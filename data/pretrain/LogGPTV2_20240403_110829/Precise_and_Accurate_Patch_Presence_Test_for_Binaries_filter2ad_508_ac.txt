“intermediate”
instructions to free up some registers (by saving their
values to memory). If we unnecessarily include all these
instructions, we may not get a match in the target. Take
the two source-level statements in Fig 3 as examples,
the ﬁrst statement is an assignment where 3 binary
instructions are generated to perform the operation.
However, capturing the last instruction alone is already
sufﬁcient, because we know through data ﬂow analysis
that X1 is equal to X0+0x4 and can therefore discard the
ﬁrst and second instruction. Similarly, instruction 03
and 04 corresponding to the second statement already
sufﬁciently capture its semantic, because the outputs of
instruction 00, 01 and 02 will later be consumed by
other instructions.
Simply put, we deﬁne “root instructions” to be the
last instructions in the data ﬂow chains (where no other
instructions will propagate any data further), along with
some complementary instructions that complete the
source-level semantic. For instance, by this deﬁnition,
the cmp instruction will be the root
instruction.
However, we need to complement
it with the next
conditional jump instruction to complete its conditional
statement semantic. For function call instructions, the
root instructions will include the push (assuming x86) of
arguments (as they each become the last instruction in a
var a = b + 4;
00 MOV  X1,X0
01 ADD  X1,X1,0x4
02 STR   X1,[addr_0]
;X1=X0
;X1=X0+0x4
;[addr_0]=X0+0x4
X0 #00 move X1 #01 +0x4 X1 #02 store [addr_0]
If (p->next != p->prev)
goto exit;
X1,[X1+0x4]
X2,[X0+0x8]
X1,X2
_exit
00 MOV  X1,X0
01 LDR
02 LDR
03 CMP
04 BNE
X0 #00 move X1 #01 +0x4
#02 +0x8
X0+0x8
#02 load
;X1=X0
;X1=[X1+0x4]
;X2=[X0+0x8]
;[X0+0x4]==[X0+0x8]
;branch if not equal
X1+0x4
X1
#01 load
     #03,04
conditional jump
X2
Figure 3: Data ﬂow analysis of example basic blocks
Signature Type
Function call
Root Instructions
(x86 example)
call,push
Conditional statement
cmp, conditional jmp
assignment
(incl. arithmetic ops)
mov,add,
sub,mul,bit ops...
Unconditional control transfer
jmp,ret
Table 1: Types of root instructions
data ﬂow chain to prepare a speciﬁc argument), and the
call
instruction (to complete the function invocation
semantic).
Note that compilers may still generate slightly
different root instructions for the same statements (due
to compiler optimizations, etc.). To facilitate signature
matching, we deem root instructions equivalent as long
as their types are the same (normalization of root
instructions). We illustrate this in Table 1 where we
show the different types of instructions that may be
generated from the same source change. For instance, a
compiler may choose to use bit operations instead of
multiplications for an assignment statement.
Annotate root instructions. Now we need to make
sure that the root instructions are sufﬁciently labeled
(which is our binary signature) such that they can be
uniquely mapped to source changes.
Following the observation mentioned earlier in §4.1
that
the target and reference function should share
variable-level semantics (as they are simply different
versions of the same function), we formulate the goal as
mapping the operands (registers or memory locations)
of the root instructions back to source-level variables.
This is sufﬁcient because if the target function indeed
USENIX Association
27th USENIX Security Symposium    893
arg:
var:
ret:
imm:
[ ]:
op:
expr:
function argument
local variable
callee return value
immediate value
dereference
binary operators
arg | var | ret | imm
| [expr] | expr op expr
| if(expr) then expr else expr
Figure 4: Notation for formula (expression) annotating
root instruction operands
applied the patch,
the variables related to the patch
should be the same ones as what we saw in the reference
function. Now, our only job here is to ensure that the
binary signature retains all such semantic information.
To this end, we compute a full-function semantic
formula for each operand (up to the point of root
instructions). As shown in Fig 1, these formulas are in
the
form of ASTs – essentially formulated as
expressions following the notation in Fig 4.
Note that from a function’s perspective, any operand
in an instruction can really be derived from only four
sources:
(1) a function parameter
(external
input),
e.g.,
ebp+0x4 if it is x86, X0 or X1 if it is aarch64;
(2) a local variable (deﬁned within the function), e.g.,
ebp-0x8 in x86 or sp+0x4 in aarch64 (which use regis-
ters to pass arguments);
(3) return values from function calls (external source),
e.g., a register holding the return value of a function call;
e.g.,
instruction/data address (including global variables),
offset, other constants;
(constant),
immediate
number
(4)
an
These sources all have meaningful semantics at the
source level. The question is how do we leverage them
in the binary signature. Do we require the binary
signature to state something precise “the fourth
parameter of the function is used in a comparison
statement”, or something more fuzzy “a local variable is
dereferenced at an offset, whose result is passed to a
function call”? These choices all have implications on
the unique and stable requirement of the signature. We
discuss how we handle these four basic cases:
least
can at
(1) Function parameter. From the calling convention,
we
infer where memory location
corresponds to which parameter. Despite the fact that
function prototpye may change in the target, our current
policy assumes otherwise (as the change happens rather
infrequently). As an extension, we could use the type of
the parameter (as mentioned in §4.2), or even its usage
proﬁle to ensure the uniqueness of the parameter. Note
that
this would also require analysis of the target
function to derive similar
require more expensive binary-level
techniques [21, 10]).
information (which will
type inference
(2) Local variable. This is similar to the function
parameter case, except that local variables are much
more prone to change, e.g., new variables may be
introduced.
In theory, we could similarly use type
information and the way the local variable is used to
ensure the uniqueness the variable in the signature. For
now, we do not conduct any additional analysis and
simply treats all
local variables as the same class
without further differentiation.
Interestingly, we will
show in §6 that
this strategy already can generate
signatures that are unique enough.
(3) Return values from function calls. This is a
relatively straightforward case, we simply tag the return
value to be originated from a speciﬁc function call.
(4) Immediate number. It is generally not safe to use
the exact values of the immediate numbers, especially if
it has to do with addresses.
For instance, a goto
instruction’s target address may not be ﬁxed in binaries.
A ﬁeld of a struct may be located at different offsets,
e.g., the target binary has a slightly different deﬁnition.
We need to conduct additional binary-level analysis to
infer if a target address is pointing to the right basic
block (e.g., by checking the similarity of the target basic
block), or the offset is pointing to a speciﬁc ﬁeld (e.g.,
by type inference [21, 10]). Our current design allows
for such extensions but at the moment simply treats
immediate numbers as a class without differentiating
their values, unless the values are related to source-level
constants and unrelated to addresses, e.g., a = 0;.
a
fairly
straightforward
In our experience, we ﬁnd that even without having a
these basic elements in the
precise knowledge of
signature, the semantic formula that describe them is
typically already unique enough to annotate the
operands; ultimately allow us to uniquely map the root
instructions to source-level statements. We show a
concrete example in Fig 5 with both reference and target
in comparison. As we can see, the patch line is in red:
a=n*m+2;,
assignment
statement, which is used as a unique source change. In
the binary form, we would identify the store instruction
as
and annotate both operands
accordingly. In this case, we know that X3=X0*X1+0x2
which represents arg 0*arg 1+0x2 and it
is being
stored into a local variable at sp+0x8. Similarly, the
target source has the same patch statement (and should
be considered patched) even though it has also inserted
some additional code with a new local variable. When
we attempt to match the binary signature, there are three
points worth noting:
instruction,
root
First, the local variable a is now located at a different
offset from sp, i.e., sp+0x10. We therefore cannot
894    27th USENIX Security Symposium
USENIX Association
Reference
4.3.2 Binary Signature Validation
foobar(n,m,flag){
int a;
a = n*m + 2;
    ...
Target
MUL  X3,X0,X1
ADD X3,X3,0x2
STR X3,[sp+0x8]
X0 * X1 + 0x2
MOV X3,X0
CBZ X2,loc_0
loc_0:
BL  do_sth
foobar(n,m,flag){
bool s;
int a;
if (!flag)
     s = do_sth();
a = n*m + 2;
    ...
return{do_sth}
X0 * X1 + 0x2
STR X0,[sp+0x8]
MUL X3,X3,X1
ADD  X3,X3,0x2
STR X3,[sp+0x10]
Figure 5: Illustration of the binary signature matching
blindly use a ﬁxed offset to represent the same local
variable across reference and target. Instead, we could
apply the additional strategies mentioned above:
(1)
Inferring the type of local variables in the target binary
and conclude that sp+0x10 is the only integer variable
and therefore must correspond to sp+0x8. (2) Proﬁling
the behaviors of all local variables in the target binary
and attempt to match the one most similar to sp+0x8 in
the reference. For example, we know sp+0x8 in the
binary (i.e., s) takes the value from a function return,
while sp+0x10 (i.e., a) did not (and sp+0x10 is the
more likely one).
Interestingly, even if we do not
perform the above analysis, the fact that there is a root
instruction storing a unique formula X0*X1+0x2 to a
local variable (any) is already unique enough to be a
signature that lead to a correct match in the target.
Second,
to show that
isolated basic block level
analysis is not sufﬁcient, we note the mov instruction in
the ﬁrst basic block of the target binary which saves X0
to X3 to free up X0 for the return value of do sth(). It
is imperative that we link X3 to X0 so that the ﬁnal
formula at the root instruction (i.e., last instruction of
the last basic block) will be the same as the one
computed in the reference binary.
Third, there is an additional store instruction in the
last basic block of the target binary, which saves X0
(return value of do sth() to sp+0x8 (i.e., s). Note that
this may look like a root instruction as well from data
ﬂow perspective. However, since it is attempting to
store a return value instead of the formula in the original
signature, it will not cause a false match.
Even though we have the best intention to preserve the
uniqueness and stability of the selected source change,
due to the information loss incurred in the translation, we
still need to double check that the candidate binary-level
signatures actually still satisfy the requirements.
(1) Unique. For each patch, we will prepare both the
patched and un-patched binaries as references and then
try to match the binary signature against them, with the
matching engine (detailed in §4.4).
For a binary
signature based on the patched code, it will be regarded
as unique only when it has no match in the reference
un-patched binary. A unique binary signature may still
have multiple matches (although rare) in the reference
patched binary, in this case, we will record the match
count as auxiliary information. When using it to test the
target binary in real world, only when the match count is
no less than previously recorded one, will we say that
the patch exists in target binary.
(2) Stable. Our previous effort in §4.2 to keep a small
footprint of the unique source change can also help to
improve the binary signature stability here, since the
sizes of source change and binary signatures are related.
Besides, we can also prepare multiple versions of
patched and un-patched function binaries (if more
ground truth data are available) and test the generated
binary signature against them. This can help to pick out
those most stable binary signatures that exist in all
patched binaries but none of un-patched binaries.
4.4 Signature Matching Engine
Matching engine is responsible for searching a given
binary signature in the target binary (i.e.,
the test
subject). This section will detail the searching process.
As brieﬂy mentioned in §3, we ﬁrst need to locate the
target function in the target binary by its symbol table,
then we will start to search the binary signature in it. We
divide the search into two phases: rough matching and
precise matching.
Rough matching. This is a quick pass that intends to
match the binary signature by some easy-to-collect
features. These features include:
(1) CFG topology. The binary signature itself is basi-
cally a subgraph of the function CFG. This step is useful
unless the binary signature resides in only a single basic
block (e.g., the signature for an assignment statement).
(2) Exit of basic blocks. In general each basic block
has one of two exit types: unconditional jump and
conditional jump, the former can be further classiﬁed
into call, return, and other normal control ﬂow transfer
for most ISAs. Thus, basic blocks can be quickly
compared by their exit types.
USENIX Association
27th USENIX Security Symposium    895
(3) Root instruction types. As described in §4.3.1, we
will analyze each basic block in the signature and
decide its root instruction set. The instruction types can
then be used to quickly compare two basic blocks. This
requires generating the data ﬂow graph for each basic
block in target function binary, which is more expensive
than previous steps but still manageable.
With above features, we can quickly narrow down the
search space in the target function. If no matches can be
found in this step, we can already conclude that the sig-
nature does not exist, otherwise, we still need to precise-
ly compare every candidate match further.
In this phase, we leverage the
annotation produced in §4.3.1 to perform a precise
match on two groups of root instructions. We essentially
just need to compare their associated annotation (i.e.,
semantic formulas).
Precise matching.
for all
To fulﬁll the semantic comparison, we ﬁrst need to
generate semantic formulas
the matched
candidate root instructions, which can be done in the
same way as detailed in §4.3.1.
If all formulas of the
signature root instructions can also be found in the
candidate root instructions, the two will be regarded as
equivalent (i.e.,
they map to the same source-level
signature/statements).
To compare two formulas (essentially two ASTs),
there have been prior solutions that calculate a similarity
score based on tree edit distance [12, 27]; however,
FIBER intends to give a deﬁnitive answer about the
match result, instead of a similarity score. Alternatively,
theorem prover has been applied to prove the semantic
equivalence of two formulas [14], which deﬁnitely
provides the best accuracy but unfortunately can be very
expensive in practice. In this paper, we choose a middle
ground.
Based on the observations that semantic
formulas capture the dependency and therefore the order
of instructions cannot be swapped, we know that the
structure of
is unlikely to change (our
evaluation conﬁrms this), e.g., (a+b)*2 will not
become a*2+b*2. In addition, with normalization of the
basic elements of the formula, the matching process is
also robust to non-structural changes. Basically, the
matching