title:Selective Versioning in a Secure Disk System
author:Swaminathan Sundararaman and
Gopalan Sivathanu and
Erez Zadok
Selective Versioning in a Secure Disk System
Swaminathan Sundararaman
Gopalan Sivathanu
Erez Zadok
Stony Brook University
Stony Brook University
Stony Brook University
Abstract
Making vital disk data recoverable even in the event of
OS compromises has become a necessity, in view of the
increased prevalence of OS vulnerability exploits over
the recent years. We present the design and implemen-
tation of a secure disk system, SVSDS, that performs
selective, ﬂexible, and transparent versioning of stored
data, at the disk-level. In addition to versioning, SVSDS
actively enforces constraints to protect executables and
system log ﬁles. Most existing versioning solutions that
operate at the disk-level are unaware of the higher-level
abstractions of data, and hence are not customizable. We
evolve a hybrid solution that combines the advantages
of disk-level and ﬁle-system—level versioning systems
thereby ensuring security, while at the same time allow-
ing ﬂexible policies. We implemented and evaluated a
software-level prototype of SVSDS in the Linux kernel
and it shows that the space and performance overheads
associated with selective versioning at the disk level are
minimal.
1 Introduction
Protecting disk data against malicious damage is one
of the key requirements in computer systems security.
Stored data is one the most valuable assets for most or-
ganizations and damage to such data often results in ir-
recoverable loss of money and man power.
In today’s
computer systems, vulnerabilities in the OS are not un-
common. OS attacks through root kits, buffer overﬂows,
or malware cause serious threat to critical applications
and data. In spite of this, security policies and mecha-
nisms are built at the OS level in most of today’s com-
puter systems. This results in wide-scale system com-
promise when an OS vulnerability is exploited, making
the entire disk data open to attack.
To protect disk data even in the event of OS compro-
mises, security mechanisms have to exist at a layer below
the OS, such as the disk ﬁrmware. These mechanisms
must not be overridable even by the highest privileged
OS user, so that even if a malicious attacker gains OS
root privileges, disk data would be protected.
Building security mechanisms at the disk-level comes
with a key problem: traditional disk systems lack higher-
level semantic knowledge and hence cannot implement
ﬂexible policies. For example, today’s disk systems can-
not differentiate between data and meta-data blocks or
even identify whether a particular disk block is being
used or is free. Disks have no knowledge of higher-level
abstractions such as ﬁles or directories and hence are
constrained in providing customized policies. This gen-
eral problem of lack of information at the lower layers of
the system is commonly referred to as the “information-
gap” in the storage stack. Several existing works aim at
bridging this information-gap [4, 11, 16, 18].
In this paper, we present the design and implementa-
tion of SVSDS, a secure disk system that transparently
performs selective versioning of key data at the disk-
level. By preserving older versions of data, SVSDS pro-
vides a window of time where data damaged by mali-
cious attacks can be recovered through a secure admin-
istrative interface. In addition to this, SVSDS enforces
two key constraints: read-only and append-only, to pro-
tect executable ﬁles and system activity logs which are
helpful for intrusion detection.
In SVSDS, we leverage the idea of Type-Safe Disks
(TSD) [16] to obtain higher-level semantic knowledge at
the disk-level with minimal modiﬁcations to storage soft-
ware such as ﬁle systems. By instrumenting ﬁle systems
to automatically communicate logical block pointers to
the disk system, a TSD can obtain three key pieces of
information that are vital for implementing ﬂexible secu-
rity policies. First, by identifying blocks that have out-
going pointers, a TSD differentiates between data and
meta-data. Second, a TSD differentiates between used
and unused blocks, by just identifying blocks that have
no incoming pointers (and hence not reachable from any
USENIX Association  
17th USENIX Security Symposium 
259
meta-data block). Third, a TSD knows higher abstrac-
tions such as ﬁles and directories by just enumerating
blocks in a sub-tree of the pointer hierarchy. For exam-
ple, the sub-tree of blocks starting from an inode block
of an Ext2 ﬁle system belong to a collection of ﬁles.
Using this semantic knowledge, SVSDS aggressively
versions all meta-data blocks, as meta-data impact the
accessibility of normal data, and hence is more impor-
tant.
It also provides an interface through which ad-
ministrators can choose speciﬁc ﬁles or directories for
versioning, or for enforcing operation-based constraints
(read-only or append-only). SVSDS uses its knowledge
of free and used blocks to place older versions of meta-
data and chosen data, and virtualizes the block address-
space. Older versions of blocks are not accessible to
higher layers, except through a secure administrative in-
terface upon authentication using a capability.
We implemented a prototype of SVSDS in the Linux
kernel as a pseudo-device driver and evaluated its cor-
rectness and performance. Our results show that the
overheads of selective disk-level versioning is quite min-
imal. For a normal user workload SVSDS had a small
overhead of 1% compared to regular disks.
The rest of the paper is organized as follows. Sec-
tion 2 describe background. Section 3 discusses the
threat model. Section 4 and Section 5 explain the de-
sign and implementation of our system respectively. In
Section 6, we discuss the performance evaluation of our
prototype implementation. Related work is discussed in
Section 7 and we conclude in Section 8.
2 Background
Data protection has been a major focus of systems re-
search in the past decade. Inadvertent user errors, ma-
licious intruders, and malware applications that exploit
vulnerabilities in operating systems have exacerbated the
need for stronger data protection mechanisms.
In this
section we ﬁrst talk about versioning as a means for pro-
tecting data. We then give a brief description about TSDs
to make the paper self-contained.
2.1 Data Versioning
Application-level versioning. Application-level ver-
sioning is primarily used for source code management [1,
2, 22]. The main advantage of these systems is that they
provide the maximum ﬂexibility as users can control ev-
erything from choosing the versioning application to cre-
ating new versions of ﬁles. The disadvantage with these
systems is that they lack transparency and users can eas-
ily bypass the versioning mechanism. The versioned data
is typically stored in a remote server and becomes vulner-
able when the remote server’s OS gets compromised.
File-system–level versioning. Several ﬁle systems
support versioning [6, 10, 12, 15, 19]. These systems are
mainly designed to allows users to access and revert back
to previous versions of ﬁles. The older versions of ﬁles
are typically stored under a hidden directory beneath its
parent directory or on a separate partition. As these ﬁle
systems maintain older versions of ﬁles, they can also be
used for recovering individual ﬁles and directories in the
event of an intrusion. Unlike application-level versioning
systems, ﬁle-system–level versioning is usually transpar-
ent to higher layers. The main advantage of these ver-
sioning systems is that they can selectively version ﬁles
and directories and can also support ﬂexible versioning
policies (e.g., users can choose different policies for each
ﬁle or directory). Once a ﬁle is marked for versioning by
the user, the ﬁle system automatically starts versioning
the ﬁle data. The main problem with ﬁle-system–level
versioning is that their security is closely tied to the se-
curity of the operating system. When the operating sys-
tem is compromised, an intruder can bypass the security
checks and change the data stored in the disk.
Disk-level versioning. The other alternative is to
version blocks inside the disk [7, 20, 23]. The main
advantage of this approach is that the versioning mech-
anism is totally decoupled from the operating system
and hence can make data recoverable even when the
operating system is compromised. The disadvantage
with block-based disk-level versioning systems is that
they cannot selectively version ﬁles as they lack seman-
tic information about the data stored inside them. As a
result, in most cases they end up versioning all the data
inside the disk which causes them to have signiﬁcant
amount of space overheads in storing versions.
Versioning data is a widely accepted solution to data pro-
tection especially for data recovery. Versioning has been
implemented in different layers. It has been implemented
above the operating system (in applications), inside the
operating system (e.g., in ﬁle systems) and beneath the
operating system (e.g., inside the disk ﬁrmware). We
now discuss the advantages and disadvantages of ver-
sioning at the different layers.
application-level versioning is weak
In summary,
in terms of security as can be easily bypassed by users.
Also, the versioning mechanism is not transparent to
users and can be easily disabled by intruders. File-
system—level data-protection mechanisms provide
transparency and also ﬂexibility in terms of what data
needs to be versioned but they do not protect the data in
the event of an operating system compromise. Disk-level
260 
17th USENIX Security Symposium 
USENIX Association
versioning systems provide better security than both
application and ﬁle system level versioning but they do
not provide any ﬂexibility to the users to select the data
that needs to be versioned. What we propose is a hybrid
solution,
the
disk-level data versioning provide, with the ﬂexibility of
ﬁle-system—level versioning systems.
i.e., combine the strong security that
2.2 Type-Safe Disks
Today’s block-based disks cannot differentiate between
block types due to the limited expressiveness of the block
interface. All higher-level operations such as ﬁle cre-
ation, deletion, extension, renaming, etc. are translated
into a set of block read and write requests. Hence, they
do not convey any semantic knowledge about the blocks
they modify. This problem is popularly known as the in-
formation gap in the storage stack [4, 5], and constrains
disk systems with respect to the range of functionality
that they can provide.
Pointers are the primary mechanisms by which data is
organized. Most importantly, pointers deﬁne reachability
of blocks; i.e., a block that is not pointed to by any other
block cannot be reached or accessed. Almost all popular
data structures used for storing information use pointers.
For example, ﬁle systems and database systems make ex-
tensive use of pointers to organize the data stored in the
disk. Storage mechanisms employed by databases like
indexes, hash, lists, and b-trees use pointers to convey
relationships between blocks.
Pointers are the smallest unit through which ﬁle sys-
tems organize data into semantically meaningful entities
such as ﬁles and directories. Pointers deﬁne three things:
(1) the semantic dependency between blocks; (2) the log-
ical grouping of blocks; and (3) the importance of blocks.
Even though pointers provide vast amounts of informa-
tion about relationships among blocks, today’s disks are
oblivious to pointers. A Type-Safe Disk (TSD) is a disk
system that is aware of pointer information and can use
it to enforce invariants on data access and also perform
various semantic-aware optimizations which are not pos-
sible in today’s disk systems.
TSDs widen the traditional block-based interface to
enable the software layers to communicate pointer infor-
mation to the disk. File systems that use TSDs should
use the disk APIs (CREATE PTR, DELETE PTR, AL-
LOC BLOCK, GETFREE) exported by TSDs to allocate
blocks, create and delete pointers, and get free-space in-
formation from the disk.
The pointer manager in TSDs keeps track of the re-
lationship among blocks stored inside the disk. The
pointer operations supported by TSDs are CREATE PTR
and DELETE PTR. Both operations take two arguments:
source and destination block numbers. The pointer
manager uses a P-TABLE (or pointer table) to main-
tain the relationship among blocks inside the disk. En-
tries are added to and deleted from the P-TABLE during
CREATE PTR and DELETE PTR operations. When there
are no incoming pointers to a block it is automatically
garbage collected by the TSD.
One other important difference between a regular disk
and a TSD is that the ﬁle systems no longer does free-
space management (i.e., ﬁle systems no longer need to
maintain bitmaps to manage free space). The free-space
management is entirely moved to the disk. TSDs export
ALLOC BLOCK API to allow ﬁle systems to request new
blocks from the disk. The ALLOC BLOCK API takes a
reference block number, a hint block number, and the
number of blocks as arguments and allocates the re-
quested number of ﬁle system blocks from the disk main-
tained free block list. After allocating the new blocks,
TSD creates pointers from the reference block to each of
the newly allocated blocks.
The garbage-collection process performed in TSDs is
different from the traditional garbage-collection mecha-
nism employed in most programming languages. A TSD
reclaims back the deleted blocks in an online fashion as
opposed to the traditional ofﬂine mechanism in most pro-
gramming languages. TSDs maintain a reference count
(or the number of incoming pointers) for each block.
When the reference count of a block decreases to zero,
the block is garbage-collected; the space is reclaimed by
the disk and the block is added to the list of free blocks. It
is important to note that it is the pointer information pro-
vided by TSD that allows the disk to track the liveness of
blocks, which cannot be done in traditional disks [17].
3 Threat Model
Broadly, SVSDS provides a security boundary at the disk
level and makes vital data recoverable even when an at-
tacker obtains root privileges. In our threat model, ap-
plications and the OS are untrusted, and the storage sub-
system comprising the ﬁrmware and magnetic media is
trusted. The OS communicates with the disk through a
narrow interface that does not expose the disk internal
versioning data. Our model assumes that the disk sys-
tem is physically secure, and the disk protects against at-
tackers that compromise a computer system through the
network. This scenario covers a major class of attacks
inﬂicted on computer systems today.
Speciﬁcally, an SVSDS provides the following guar-
antees:
• All meta-data and chosen ﬁle data marked for pro-
tection will be recoverable to an arbitrary previous
state even if an attacker maliciously deletes or over-
writes the data, after compromising the OS. The
USENIX Association  
17th USENIX Security Symposium 
261
depth of history available for recovery is solely de-
pendent on the amount of free-space available on
disk. Given the fact that disk space is cheap, this is
an acceptable dependency.
• Data items explicitly marked as read-only is guar-
anteed to be intact against any malicious deletion or
overwriting.
• Data items marked as append-only can never be
deleted or overwritten by any OS attacker.
It is important to note that SVSDS is designed to pro-
tect the data stored on the disk and does not provide
any guarantee on which binaries/ﬁles are actually exe-
cuted by the OS (e.g., rootkits could change the binaries
in memory). As ﬁles with operation-based constraints
(speciﬁcally read-only constraints) cannot be modiﬁed
inside SVSDS, upon a reboot, the system running on
SVSDS would return to a safe state (provided the system
executables and conﬁguration ﬁles are marked as read-
only).
4 Design
Our aim while designing SVSDS is to combine the se-
curity of disk-level versioning, with the ﬂexibility of
versioning at higher-layers such as the ﬁle system. By
transparently versioning data at the disk-level, we make
data recoverable even in the event of OS compromises.
However, today’s disks lack information about higher-
level abstractions of data (such as ﬁles and directories),
and hence cannot support ﬂexible versioning granulari-
ties. To solve this problem, we leverage Type-Safe Disks
(TSDs) [16] and exploit higher-level data semantics at
the disk-level.
Type-safe disks export an extended block-based in-
terface to ﬁle systems.
In addition to the regular
block read and write primitives exported by traditional
disks, TSDs support pointer management primitives that
can be used by ﬁle systems to communicate pointer-
relationships between disk blocks. For example, an Ext2
ﬁle system can communicate the relationships between
an inode block of a ﬁle and its corresponding data blocks.
Through this, logical abstractions of most ﬁle systems
can be encoded and communicated to the disk system.
Figure 1 shows the on-disk layout of Ext2. As seen
from Figure 1, ﬁles and directories can be identiﬁed us-
ing pointers by just enumerating blocks of sub-trees with
inode or directory blocks as root.
The overall goals of SVSDS are the following:
• Perform block versioning at the disk-level in a com-
pletely transparent manner such that higher-level
software (such as ﬁle systems or user applications)
SB
IB
DirB
DirB
DirB
IB
IB
IB
IB
IB
DB
DB
DB
DirB
DB
DB
DB
Legend:
SB
Super Block
IB
Inode Block
DirB
Directory Block
DB
Data Block
Figure 1: Pointer relationship inside an FFS-like ﬁle sys-
tem
cannot bypass it. System administrators or users