《 Windows Kernel Pwn 101 》
[Windows内核]
    -进程（process）
        进程（process）是计算机系统中的一种基本概念，它是一个正在运行的程序的实例。在操作系统中，进程是分配给程序资源的基本单位，每个进程都有自己的内存空间、代码、数据、堆栈和其他系统资源。在计算机系统中，每个进程都有一个唯一的标识符，称为进程ID（process ID，PID）。进程可以有一个或多个线程，线程是进程中执行代码的执行单元。在一个进程中，所有线程共享进程的内存空间和系统资源；
        进程为多任务操作系统提供了实现并发执行的机制。通过将计算机系统资源分配给多个进程，操作系统能够使多个程序同时运行，从而提高计算机系统的利用率；
        进程的创建、调度和终止都由操作系统内核进行管理。进程之间可以通过进程间通信机制来进行数据交换和协作。进程可以在操作系统的保护下运行，防止进程之间相互干扰和破坏。
    -线程（thread）
        线程（thread）是计算机系统中的一种执行单元，它是进程中的一个独立控制流，用于执行程序的指令序列。线程是操作系统调度的基本单位，每个线程都有自己的栈空间和寄存器，用于存储执行上下文和临时变量；
        在一个进程中，可以创建一个或多个线程，这些线程共享进程的内存空间和系统资源。不同于进程，线程不拥有系统资源，而是与其他线程共享相同的资源，如内存、文件、网络连接等；
        线程能够提高程序的并发性和响应性。在单核处理器系统中，通过使用多线程技术，可以让程序的不同部分在不同的时间段内交替运行，从而让程序看起来是同时运行的。在多核处理器系统中，多个线程可以在不同的核上同时执行，充分利用系统资源，提高程序的性能；
        线程的创建、调度和管理都由操作系统内核进行管理。操作系统提供了一系列线程同步机制，如互斥锁、信号量、条件变量等，用于协调不同线程之间的执行，避免竞争和冲突。
    -内存管理
        内存管理是操作系统中的一个重要模块，它负责管理计算机系统中的内存资源。计算机系统中的内存资源是有限的，操作系统需要在不同的进程和线程之间分配和回收内存空间，以满足不同程序的内存需求;
        内存管理涉及到的主要问题包括内存分配、内存回收、内存保护和内存共享等。内存分配是指在进程运行时为其分配所需的内存空间，内存回收是指在进程终止时将其占用的内存空间释放回系统，内存保护是指防止进程之间相互干扰和破坏，内存共享是指多个进程共享同一块内存区域;
        操作系统通过虚拟内存技术来实现对内存资源的管理。虚拟内存是一种将计算机的硬盘空间用作内存扩展的技术，它可以让进程访问一个比实际内存空间更大的地址空间，从而满足进程对内存空间的需求。虚拟内存管理需要实现页面置换、页面映射和页面保护等机制，来保证程序能够正确地访问所需的内存空间。
    -I/O管理
        I/O（Input/Output）管理指的是计算机系统如何管理输入和输出设备的数据传输，是操作系统的一个重要功能。I/O管理通过管理设备驱动程序、I/O请求和缓存等机制，协调系统中各种输入输出设备的使用，使其能够高效地进行数据传输;
        在计算机系统中，每个I/O设备都由一个设备驱动程序来管理。设备驱动程序是一个软件模块，它向操作系统提供I/O设备的抽象接口，使操作系统能够与设备进行通信;
        当应用程序需要与设备进行数据交换时，它会向操作系统发送一个I/O请求。操作系统会将请求传递给设备驱动程序，设备驱动程序则负责将请求转换为特定设备的操作，并将结果返回给应用程序。为了提高I/O传输的效率，操作系统会使用缓存机制，将数据缓存到内存中，并在需要时将数据从内存中读取或写入到设备中;
        I/O管理还包括处理中断和DMA（Direct Memory Access）操作。当设备完成一个操作或需要向系统发出信号时，它会向系统发送一个中断信号。操作系统会相应地处理中断请求，并通知相应的驱动程序进行处理。DMA操作则是一种数据传输方式，它允许设备直接访问系统内存，从而提高数据传输效率。
    -驱动程序
        驱动程序则是一种特殊的软件，用于控制计算机硬件设备。驱动程序通过操作硬件设备的寄存器、内存映射、中断等方式，实现对硬件设备的读取、写入、控制等操作，从而让操作系统能够与硬件设备进行交互。
[数据结构]
    -进程和线程数据结构
        每个进程都有一个EPROCESS结构，它包含进程的基本信息和进程所拥有的线程的列表。ETHREAD结构表示线程的信息，包括线程的状态、优先级和堆栈指针等；
        除了这些基本信息，EPROCESS和ETHREAD结构还包含一些其他的信息，例如虚拟地址空间的描述、进程和线程的安全描述符等等。
    -内存管理数据结构
        Windows内核使用两个池来管理内存：paged pool和non-paged pool。Paged pool用于存储可以被分页的内存，例如用于存储驱动程序的数据结构。 Non-paged pool用于存储不能被分页的内存，例如用于内存映射I/O的缓冲区。
        内存池由POOL_HEADER结构表示。每个POOL_HEADER结构都包含有关内存块的基本信息，例如内存块的大小、使用情况等等；
        分配和释放内存使用ExAllocatePoolWithTag和ExFreePoolWithTag函数，这些函数使用TAG参数来标识分配的内存块，每个内存块都包含一个前导POOL_HEADER结构，并且可能包含其他的元数据，例如内存块的TAG、指向下一个和上一个内存块的指针等等。
    -驱动程序结构
        驱动程序是一种特殊的软件，它用于控制计算机硬件设备。驱动程序需要与内核交互以访问硬件资源，Windows驱动程序的主要结构包括驱动程序对象、设备对象和IRP对象；
        驱动程序对象是驱动程序的主要对象，它包含驱动程序的入口点和一些驱动程序特定的信息；
        设备对象是驱动程序与设备之间的接口，它用于管理设备和向驱动程序传递请求，每个驱动程序可以注册多个设备对象，用于管理不同类型的设备；
        IRP对象是在Windows内核中用于表示I/O请求的结构，每个IRP对象都包含有关请求的信息，例如请求类型、输入缓冲区和输出缓冲区指针等等，驱动程序可以使用IRP对象来处理I/O请求，例如读取设备数据、写入设备数据等等；
        IRP是I/O请求包（I/O Request Packet）的缩写，它是Windows操作系统中用来传递I/O请求和相关参数的数据结构。在Windows内核中，设备和驱动程序之间的通信是通过I/O请求包（IRP）进行的。当用户程序向设备发起I/O请求时，操作系统会创建一个IRP，并把请求信息填充到IRP中，然后把IRP发送给设备驱动程序。
        在IRP中，包含了I/O请求的类型（读、写、控制等）、请求的数据缓冲区、请求的长度、请求的状态等信息，驱动程序收到IRP后，解析其中的请求信息，并执行相应的操作，然后把执行结果填充到IRP中，并把IRP返回给操作系统,操作系统再根据返回的结果对用户程序做出响应；
        当一个驱动程序提供某种服务时，用户空间的应用程序可能需要与该驱动程序进行通信，
        IOCTL (Input/Output Control) 是一种机制，允许用户空间的应用程序通过发送特定的控制代码来请求驱动程序执行某些操作。驱动程序可以解释这些控制代码，并根据控制代码来执行相应的操作，这些操作可能会更改设备状态，返回设备数据等。在驱动程序中实现 IOCTL 通常需要编写 IOCTL 处理程序，以便解释控制代码并执行相应的操作。
[前言]
了解一些win内核的基础知识以后，我将带大家开始无痛阅读代码（代码审计），这篇文章借助的是HackSysExtremeVulnerableDriver 中的
Use-After-Free 漏洞练习项目，
项目地址：
这篇文章最终会带你进入一个从代码审计到漏洞利用的旅程。
[Non-Paged Pool UaF]
DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpDeviceIoCtlHandler;  
//将驱动对象(DriverObject)的MajorFunction成员中的IRP_MJ_DEVICE_CONTROL函数指针设置为IrpDeviceIoCtlHandler函数。这样做是为了使驱动程序能够接收设备控制IRP并调用IrpDeviceIoCtlHandler函数来处理它们。
NTSTATUS IrpDeviceIoCtlHandler(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp)  
//定义了一个名为IrpDeviceIoCtlHandler的函数，它接受两个输入参数：一个指向设备对象(DeviceObject)的指针和一个指向IRP的指针(Irp)，并返回一个NTSTATUS类型的值。  
{  
ULONG IoControlCode = 0;  
PIO_STACK_LOCATION IrpSp = NULL;  
NTSTATUS Status = STATUS_NOT_SUPPORTED;  
//IoControlCode表示设备I/O控制码，IrpSp表示IRP的当前栈位置指针，Status表示函数的返回状态。
    UNREFERENCED_PARAMETER(DeviceObject); //宏，用于告诉编译器不使用这个参数。由于IrpDeviceIoCtlHandler函数没有使用DeviceObject参数，因此使用此宏可以避免编译器警告。
    PAGED_CODE(); //宏，用于将函数标记为在分页池中执行，以便驱动程序符合Windows的内存管理规则。
    IrpSp = IoGetCurrentIrpStackLocation(Irp); //使用IoGetCurrentIrpStackLocation函数获取IRP的当前栈位置，并将指针存储在IrpSp变量中。
    IoControlCode = IrpSp->Parameters.DeviceIoControl.IoControlCode; //从IRP栈位置中获取设备I/O控制码，该码存储在IrpSp的Parameters.DeviceIoControl.IoControlCode成员中，并将其赋值给IoControlCode变量。
    if (IrpSp) { //检查IrpSp指针是否为空，以确保IrpSp已正确设置。
        switch (IoControlCode) { //使用IoControlCode变量的值来确定要执行的代码路径。 
            case HACKSYS_EVD_IOCTL_STACK_OVERFLOW: //switch语句的第一个分支，其中HACKSYS_EVD_IOCTL_STACK_OVERFLOW是设备I/O控制码的一个值。如果IoControlCode等于HACKSYS_EVD_IOCTL_STACK_OVERFLOW，则执行该分支的代码。
                DbgPrint("****** message ******\n");
                Status = StackOverflowIoctlHandler(Irp, IrpSp); //调用StackOverflowIoctlHandler函数来处理IRP
                DbgPrint("****** message ******\n");
                break;
            case HACKSYS_EVD_IOCTL_STACK_OVERFLOW_GS://switch语句的第二个分支，其中HACKSYS_EVD_IOCTL_STACK_OVERFLOW_GS是另一个设备I/O控制码的值。如果IoControlCode等于HACKSYS_EVD_IOCTL_STACK_OVERFLOW_GS，则执行该分支的代码。
                DbgPrint("****** message ******\n");
                Status = StackOverflowGSIoctlHandler(Irp, IrpSp);//调用StackOverflowGSIoctlHandler函数来处理IRP
                DbgPrint("****** message ******\n");
                break;
             case HACKSYS_EVD_IOCTL_ALLOCATE_UAF_OBJECT:
                DbgPrint("****** message ******\n");
                Status = AllocateUaFObjectIoctlHandler(Irp, IrpSp);
                DbgPrint("****** message ******\n");
                break;
            case HACKSYS_EVD_IOCTL_USE_UAF_OBJECT:
                DbgPrint("****** message ******\n");
                Status = UseUaFObjectIoctlHandler(Irp, IrpSp);
                DbgPrint("****** message ******\n");
                break;
            case HACKSYS_EVD_IOCTL_FREE_UAF_OBJECT:
                DbgPrint("****** message ******\n");
                Status = FreeUaFObjectIoctlHandler(Irp, IrpSp);
                DbgPrint("****** message ******\n");
                break;
            case HACKSYS_EVD_IOCTL_ALLOCATE_FAKE_OBJECT:
                DbgPrint("****** message ******\n");
                Status = AllocateFakeObjectIoctlHandler(Irp, IrpSp);
                DbgPrint("****** message ******\n");
                break;
            //实际上这部分代码中，使用了switch-case语句是用于处理不同类型的IO控制码（IOCTL），前面提到过IOCTL是一种通用的机制，用于驱动程序与应用程序之间进行通信。在Windows内核中，驱动程序通常实现了多个不同的IOCTL处理程序，以响应应用程序对不同功能的请求。每个IOCTL都有一个唯一的控制码，通常定义在驱动程序的头文件中。switch-case语句根据接收到的IOCTL控制码，调用相应的IOCTL处理程序。例如，当IOCTL控制码为HACKSYS_EVD_IOCTL_ALLOCATE_UAF_OBJECT时，调用AllocateUaFObjectIoctlHandler函数，用于处理分配User-After-Free对象的请求；当IOCTL控制码为HACKSYS_EVD_IOCTL_USE_UAF_OBJECT时，调用UseUaFObjectIoctlHandler函数，用于处理使用User-After-Free对象的请求；当IOCTL控制码为HACKSYS_EVD_IOCTL_FREE_UAF_OBJECT时，调用FreeUaFObjectIoctlHandler函数，用于处理释放User-After-Free对象的请求；当IOCTL控制码为HACKSYS_EVD_IOCTL_ALLOCATE_FAKE_OBJECT时，调用AllocateFakeObjectIoctlHandler函数，用于处理分配Fake对象的请求，并且每个case语句都会输出一个调试信息，以便在驱动程序运行时查看调试信息。
Let's Start UAF
PUSE_AFTER_FREE g_UseAfterFreeObject = NULL;  
// 定义一个指向PUSE_AFTER_FREE类型的全局指针g_UseAfterFreeObject，并将其初始化为NULL。
NTSTATUS AllocateUaFObject() { // 定义一个名为AllocateUaFObject的函数，返回值为NTSTATUS类型。
    NTSTATUS Status = STATUS_SUCCESS; // 定义并初始化Status变量为STATUS_SUCCESS
    PUSE_AFTER_FREE UseAfterFree = NULL; // 定义一个指向PUSE_AFTER_FREE类型的指针UseAfterFree，并将其初始化为NULL。
    PAGED_CODE();  // PAGED_CODE宏用于将函数标记为在分页池中执行，以便驱动程序符合Windows的内存管理规则。
    __try { // 定义一个异常处理块。
        DbgPrint("[+] Allocating UaF Object\n");
        UseAfterFree = (PUSE_AFTER_FREE)ExAllocatePoolWithTag(NonPagedPool,
                                                              sizeof(USE_AFTER_FREE),
                                                              (ULONG)POOL_TAG);
        //这行代码是在从内核的NonPagedPool中分配一个新的内存块并将其指针赋值给指针变量 UseAfterFree。这里使用了ExAllocatePoolWithTag 函数，它接受三个参数，分别是：要分配的内存池类型，要分配的内存块大小，以及与该内存块关联的标签。这里要注意的是，我们使用强制类型转换将函数返回的 void * 指针转换为我们定义的 PUSE_AFTER_FREE 指针类型，这是因为该函数返回一个通用的 void * 指针，而我们需要将其转换为特定的类型，以便我们可以在之后的代码中访问它的成员。    
        //Non-Paged Pool是一块用于存储内核数据结构和代码的非分页内存区域，它与Paged Pool不同，Non-Paged Pool不允许操作系统将其页面交换到磁盘上，这意味着，即使在系统内存紧张时，Non-Paged Pool中的内存仍将始终保持在物理内存中，因此适用于那些需要持久存储的数据结构和代码；
        //Non-Paged Pool用于存储那些不希望出现在磁盘上的内核数据结构和代码，例如，中断服务例程和驱动程序中的全局变量。相比之下，Paged Pool适用于那些较大的数据结构，例如文件系统缓存、文件对象和内存映射等等，因为Paged Pool允许操作系统将其页面交换到磁盘上，因此可以通过调度页回收机制，获得更多的物理内存空间。
        //分页池和非分页池都是Windows内核提供的两种内存池，它们有以下不同点：
        //分页池（Paged Pool）：也称为虚拟池，用于分配用于页面交换的物理内存页面，当内存不足时，可以将某些页面移动到磁盘上，因此可以使内核保持更多的物理内存空间。分页池在Windows内核中是很常见的，比如内存分配、进程和线程管理等都使用分页池。分页池是有限的，分配的内存大小受到可用物理内存和分页文件大小的限制，分页池还可以分为paged和non-paged两种。
        //非分页池（NonPaged Pool）：也称为实际池，是一个内存池，它用于分配永久性的内核对象和数据结构，这些对象和数据结构必须一直存在于内存中，并且不能被分页。非分页池分配的内存是固定的，并且永久性的，因此分配内存时不需要考虑分页文件大小或者可用内存大小的限制，这也使得非分页池的内存访问速度比分页池更快。非分页池通常用于内核数据结构和驱动程序的存储。
        //可以简单理解成，分页池用于分配可分页的内存，而非分页池用于分配不可分页的内存，它们各自有自己的用途和优缺点，在编写Windows驱动程序时，需要选择合适的内存池以适应不同的内存分配需求。
        //分页（paging）是一种操作系统内存管理技术，它将物理内存分成大小相等的块，称为页面（page）。同样，虚拟内存也被划分成相同大小的页面。进程的虚拟内存空间中的每个页面都映射到物理内存中的一个页面。当进程访问虚拟内存时，系统会将相关的物理内存页面加载到内存中，以便进程可以访问它们。这个过程被称为页面调度（paging in）。
        //分页技术使得多个进程可以共享同一个物理内存，也可以在物理内存不足的情况下，使用磁盘上的虚拟内存来扩展可用的地址空间。
        //POOL_TAG 是一个用于标识内存池分配的标记（tag），可以用于在内存泄漏和内存分配问题排查中标识和跟踪内存池分配和释放的情况。当你在分配内存池时，可以指定一个 POOL_TAG 来标识这个内存块，当你需要释放这个内存块时，也要使用同样的 POOL_TAG。在 Windows 内核中，通常使用四个字节的字符串作为 POOL_TAG，例如 'MyTg'，来标识内存池中的内存块，
        //例如，可以使用以下方式定义POOL_TAG宏：
        //----------------------------        //#define POOL_TAG 'MyTg'
        //----------------------------        //在分配内存池时，该标签可以作为一个参数传递给相关的函数，以便跟踪哪些内存池分配被执行了。
        //POOL_TAG和PAGED_CODE都是宏定义，但它们的作用和使用场景不同：
        //POOL_TAG是用于标识分配内存块的标记，主要用于在调试和分析中区分内存块的来源和用途。它的值通常是一个四个字符的字符串，例如 'MyTg'。开发人员可以根据需要自定义POOL_TAG，但是需要保证它是唯一的，并且不会与其他代码中使用的POOL_TAG冲突;
        //PAGED_CODE则是一个宏定义，用于标记代码是否是在分页池中执行。当使用PAGED_CODE时，编译器将生成一个特殊的代码序列，用于确保代码仅在操作系统可分页的代码段中运行，这有助于提高操作系统的性能和稳定性;
        //因此，POOL_TAG主要用于标记内存块的来源和用途，而PAGED_CODE主要用于确保代码的执行位置和环境。
        //ULONG是无符号长整型，它是C语言中的一种数据类型，通常占据4个字节（32位），而POOL_TAG是一个4个字节（32位）的标识符，因此定义其数据类型为ULONG是很自然的选择。ULONG是unsigned long的缩写，它可以表示的数据范围是0到4294967295，即可以存储0和正整数。在Windows操作系统中，ULONG通常用于表示无符号整数或标识符。
        if (!UseAfterFree) {
            DbgPrint("[-] Unable to allocate Pool chunk\n");
            Status = STATUS_NO_MEMORY;
            return Status;
            // 如果无法分配内存池块，则打印一条错误消息，将Status设置为STATUS_NO_MEMORY并返回。
        }
        else {
            DbgPrint("[+] Pool Tag: %s\n", STRINGIFY(POOL_TAG));
            DbgPrint("[+] Pool Type: %s\n", STRINGIFY(NonPagedPool));
            DbgPrint("[+] Pool Size: 0x%X\n", sizeof(USE_AFTER_FREE));
            DbgPrint("[+] Pool Chunk: 0x%p\n", UseAfterFree);
            // 成功分配内存池块后，打印调试信息，显示内存池块的标记、类型、大小和地址。
        }
        // 用字符'A'填充缓冲区。
        RtlFillMemory((PVOID)UseAfterFree->Buffer, sizeof(UseAfterFree->Buffer), 0x41);
        // 将字符缓冲区以'\0'字符结尾。
        UseAfterFree->Buffer[sizeof(UseAfterFree->Buffer) - 1] = '\0';
        // 设置对象回调函数。
        UseAfterFree->Callback = &UaFObjectCallback;
        // 将UseAfterFree指针的地址赋值给全局变量g_UseAfterFreeObject。
        g_UseAfterFreeObject = UseAfterFree;
        // 打印一条调试消息，显示UseAfterFree和g_UseAfterFreeObject的地址和回调函数的地址。
        DbgPrint("[+] UseAfterFree Object: 0x%p\n", UseAfterFree);