### Breaking TrustZone-M: Privilege Escalation on LPC55S69

#### Introduction
What are two firmware engineers doing at DEFCON? They are designing a hardware Root of Trust (RoT) for the Oxide Computer Company. This in-house project involves developing a microkernel OS written in Rust, leveraging a publicly-available, security-focused microcontroller. The goal is to open-source everything by the time the product ships.

#### Design Goals
1. **Integrity and Authenticity**: Ensure strong assertions regarding the integrity and authenticity of RoT firmware and hardware configuration.
2. **Tamper-Resistant ID**: Implement a tamper-resistant, impersonation-resistant unique ID.
3. **Trust Extension**: Develop a mechanism for extending trust to additional devices.
4. **Re-establishing Trust**: Create a mechanism for re-establishing trust after a compromise.

#### Due Diligence and Findings
Due diligence on candidate microcontrollers led to some surprising findings. The NXP LPC55S69 was selected, but the documentation was often unclear and confusing, raising questions about its actual security.

#### NXP LPC55S69 Overview
- **Dual-core Cortex-M33**:
  - CPU0 has TrustZone-M (TZ-M) and Memory Protection Unit (MPU).
  - CPU1 is wrapped with a Master Security Wrapper (MSW).
- **Security Features**:
  - AES, SHA, and GF(p) accelerators.
  - SRAM-based Physical Unclonable Function (PUF) with a protected key path to the AES accelerator.
  - Secure boot (RSA-2048 or RSA-4096).
  - Debug Authentication (RSA-2048 or RSA-4096).

#### Undocumented Features
- **EZH**:
  - Custom core with single-cycle I/O access.
  - Intended for wire protocol conversions.
  - Acknowledged only to high-volume customers.
- **DICE CDI Computation**.
- **ROM Patch Controller**.
  - Defeaturized by partially removing details from documentation.

#### TrustZone-M 101
- **What is TrustZone-M?**
  - The Armv8-M architecture extends TrustZone technology to Cortex-M based systems, providing robust levels of protection at all cost points.
  - It isolates critical security firmware and private information (e.g., secure boot, firmware update, and keys) from the rest of the application.
  - TrustZone offers an efficient, system-wide approach to security with hardware-enforced isolation built into the CPU, running two domains side-by-side and sharing resources per set configuration.

#### Key Differences in M-Profile
- **Execution Modes**:
  - Only two execution modes (handler and thread) instead of EL{0-4}.
  - No Memory Management Unit (MMU).
  - MPU is optional.

#### Hardware Isolation
- **Memory Split**:
  - Secure (S), Non-secure (NS), and Non-secure Callable (NSC) ranges.
  - **Secure World**:
    - Can read/write any address (if allowed by the secure MPU).
    - Next instruction must be in a S range.
    - Uses `BXNS` or `BLXNS` to switch to NS mode and branch to NS address.
  - **Non-secure World**:
    - Can read/write only NS ranges (further restricted by non-secure MPU).
    - Next instruction must either be in a NS range or be an `SG` instruction in a NSC range.
  - **Non-secure Callable Range**:
    - Only range type that can contain `SG` instruction.
    - Switches from NS mode to S mode, no-op if already in S mode.
    - Creates explicit entry points provided for NS to call into S.

#### Security Attribution
- **Security Attribution Unit (SAU)**:
  - Programmable like an MPU to map memory ranges to security attributes (S, NS, or NSC).
  - Architecturally defined as part of ARMv8-M Security Extension.
  - Implementation-defined number of regions.
  - [Base, Limit] ranges set NS or NSC.
  - Addresses not in a range are S.
- **Implementation-defined Attribution Unit (IDAU)**:
  - Security attributes defined by the chip vendor.
  - Example: S: address bit 28 = 1, NS: address bit 28 = 0.
  - Many implementations, including NXP LPC55S69, follow this pattern.

#### Enforcement Mechanisms
- **Secure AHB, MPC, and PPC**:
  - **Secure AHB**:
    - Carries security attributes with transactions.
    - May restrict accesses based on (source port, security attribute, destination port) tuple.
  - **Memory Protection Checkers (MPC)**:
    - Filter transactions at AHB peripheral.
    - Range- or block-based policies for splitting ROM, flash, and RAMs into S and NS segments.
  - **Peripheral Protection Checkers (PPC)**:
    - Filter transactions at AHB peripheral.
    - Typically single policy for the whole peripheral.
    - Some implementations allow more fine-grain policies (e.g., per downstream peripheral).

#### AHB Initiators
- **Secure AHB-aware initiators**:
  - Can initiate transactions as S or NS.
  - Up to implementation if S can initiate NS or vice versa.
  - Typically use security attribute from the request being fulfilled (e.g., DMA request).
- **Master Security Wrapper (MSW)**:
  - Adapts existing AHB initiators to Secure AHB.
  - Sets a single security attribute used for all AHB transactions.

#### Implications
- **Peripherals Aliasing**:
  - Most peripherals are aliased (via IDAU) into both S and NS addresses.
  - Software must configure SAU, MSW, MPC, and PPC based on application policies.
  - Any mistakes in configuration can be devastating, e.g., S code or RAM accessible via NS alias, NS access to DMA controller initiating S transactions.

#### Finding the ROM Patcher
- **Embedded Files in PDFs**:
  - Noted in LPC55S69 User Manual.
  - Embedded files (e.g., LPC55S6X_LPC55S2X_LPC552X_PROTECTED_FLASH_REGION_V1.1.XLSX) were discovered.
  - Reverse engineering revealed exact details on how to use the ROM patcher.

#### NXP ROM Patch Controller
- **Features**:
  - 16 patch slots.
  - Each slot patches one 32-bit word specified by ROM address.
  - Up to 8 slots may replace the word with any 32-bit value.
  - Others are replaced with a SVC instruction.
  - Patches are cleared upon device reset.
  - Aliased into both secure and non-secure ranges.

#### ARMv7-M and ARMv8-M
- **Flash Patcher**:
  - ARMv7-M defined a flash patcher.
  - ARMv8-M removed the patching feature, preventing certain exploits.

#### ROM APIs
- **Exported Functions**:
  - Flash API.
  - In-Application Programming API.

This document provides a comprehensive overview of the security features and potential vulnerabilities of the NXP LPC55S69, highlighting the importance of thorough documentation and careful configuration in ensuring the security of embedded systems.