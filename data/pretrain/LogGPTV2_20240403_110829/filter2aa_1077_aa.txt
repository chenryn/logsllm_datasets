Breaking
TrustZone-M
PRIVILEGE ESCALATION
ON LPC55S69
What are two firmware 
 engineers doing at DEFCON?
Designing hardware Root of Trust for Oxide Computer Company
In-house, microkernel OS written in Rust
Leverage publicly-available, security-focused microcontroller
Plan to open-source everything by time product ships
Design goals
A strong assertion regarding the integrity and authenticity
of RoT firmware and hardware configuration
A tamper-resistant, impersonation-resistant unique ID
A mechanism for extending trust to additional devices
A mechanism for re-establishing trust after a compromise
Due diligence on candidate microcontrollers led to surprising findings
1
2
3
4
1
2
3
OXIDE
BREAKING TRUSTZONE-M
NXP LPC55S69
OXIDE
BREAKING TRUSTZONE-M
OXIDE
BREAKING TRUSTZONE-M
NPX LPC55S69
•
Dual-core Cortex-M33
•
•
CPU0 has TZ-M and MPU
CPU1 is wrapped with MSW
•
•
•
•
AES, SHA, and GF(p) accelerators
SRAM-based PUF w/ protected key path to AES accelerator
Secure boot (RSA-2048 or RSA-4096)
Debug Authentication (RSA-2048 or RSA-4096)
OXIDE
Is this microcontroller actually secure
•
•
Why should we believe what the marketing says?
Documentation was frequently unclear and confusing
BREAKING TRUSTZONE-M
OXIDE
BREAKING TRUSTZONE-M
FROM UM11126
OXIDE
BREAKING TRUSTZONE-M
FROM AN12283
OXIDE
Undocumented Features
•
EZH
•
•
•
•
From AN12868
Custom core with single-cycle I/O access
Intended for wire protocol conversions
NXP only acknowledges existence to high-volume 
customers
•
DICE CDI computation
•
ROM patch controller
•
Defeaturized by (partially) removing details from 
documentation
BREAKING TRUSTZONE-M
OXIDE
BREAKING TRUSTZONE-M
Undocumented Features
•
EZH
•
•
•
•
From AN12868
Custom core with single-cycle I/O access
Intended for wire protocol conversions
NXP only acknowledges existence to high-volume 
customers
•
DICE CDI computation
•
ROM patch controller
•
Defeaturized by (partially) removing details from 
documentation
TrustZone-M 101
OXIDE
BREAKING TRUSTZONE-M
OXIDE
What is TrustZone-M?
“The Armv8-M architecture extends TrustZone technology to Cortex-M based 
systems, enabling robust levels of protection at all cost points. TrustZone 
reduces the potential for attack by isolating the critical security firmware and 
private information, such as secure boot, firmware update, and keys, from the 
rest of the application.
TrustZone technology offers an efficient, system-wide approach to security 
with hardware-enforced isolation built into the CPU. It does this by running two 
domains side-by-side and sharing resources per set configuration.”
HTTPS://DEVELOPER.ARM.COM/IP-PRODUCTS/SECURITY-IP/TRUSTZONE/TRUSTZONE-FOR-CORTEX-M
BREAKING TRUSTZONE-M
OXIDE
What is TrustZone-M?
“The Armv8-M architecture extends TrustZone technology to Cortex-M based 
systems, enabling robust levels of protection at all cost points. TrustZone 
reduces the potential for attack by isolating the critical security firmware and 
private information, such as secure boot, firmware update, and keys, from the 
rest of the application.
TrustZone technology offers an efficient, system-wide approach to security 
with hardware-enforced isolation built into the CPU. It does this by running two 
domains side-by-side and sharing resources per set configuration.”
HTTPS://DEVELOPER.ARM.COM/IP-PRODUCTS/SECURITY-IP/TRUSTZONE/TRUSTZONE-FOR-CORTEX-M
BREAKING TRUSTZONE-M
OXIDE
BREAKING TRUSTZONE-M
What is TrustZone-M?
•
Conceptually similar to TrustZone-A
•
•
Hardware isolates Secure (S) world from 
Non-secure (NS) world
Ex ecution modes exist orthogonally
•
Key differences in M-profile
•
•
•
Only two execution modes (handler and thread) 
instead of EL{0-4}
No MMU
MPU is optional
•
How does the hardware distinguish 
S world from NS world?
OXIDE
With Physical Memory Addresses!
Memory split into Secure (S), Non-secure (NS), and Non-secure Callable (NSC) ranges
•
•
•
May read/write any address (if allowed by secure 
MPU)
Next instruction must be in a S range
BXNS or BLXNS instruction used to switch to NS 
mode and branch to NS address
•
Execution from NS range
•
•
•
•
May read/write only NS ranges (further restricted 
by non-secure MPU)
Next instruction must either:
Be in a NS range
Be an SG instruction in a NSC range
•
Execution from NSC range
•
•
•
•
Only range type that can contain SG instruction
Switches from NS mode to S mode, no-op if 
already in S mode
Creates explicit entry points provided for NS to 
call into S
Otherwise treated as equivalent to S range
•
Execution from S range
BREAKING TRUSTZONE-M
OXIDE
Who Decides What Is 
S, NS, or NSC?
•
Security Attribution Unit (SAU)
•
•
•
•
•
Programmable like an MPU to map memory ranges 
to security attribute (S, NS, or NSC)
Architecturally defined as part of ARMv8-M 
Security Extension
Implementation defined # of regions
[Base, Limit] ranges set NS or NSC
Addresses not in a range are S
BREAKING TRUSTZONE-M
OXIDE
•
Implementation-defined Attribution 
Unit (IDAU)
•
•
•
•
•
Security attributes defined by the chip vendor
Example from “Arm® TrustZone Technology 
for the Armv8-M Architecture”:
S: address bit 28 = 1
NS: address bit 28 = 0
Sadly, many implementations do exactly that 
including NXP LPC55S69
Who Decides What Is 
S, NS, or NSC?
BREAKING TRUSTZONE-M
OXIDE
Who Decides What Is 
S, NS, or NSC?
•
•
•
Address of every CPU data access and 
instruction fetch is sent to both SAU 
and IDAU
Each determines security attribute 
independently
Most secure attribute of the two is 
used (S > NSC > NS)
BREAKING TRUSTZONE-M
OXIDE
Secure AHB, MPC, and PPC
•
Implementation-defined mechanisms 
for enforcing policy on security 
attributes outside a CPU core
•
•
AHB matrix that carries security attributes with a 
transaction
May allow restricting accesses based on (source 
port, security attribute, destination port) tuple
•
Memory Protection Checkers (MPC)
•
•
Filter transactions at AHB peripheral
Range- or block-based policies for splitting ROM, 
flash, and RAMs into S and NS segments
•
Peripheral Protection Checkers (PPC)
•
•
•
Filter transactions at AHB peripheral
Typically single policy for the whole peripheral
Some implementations (e.g. AHB-APB bridges) 
allow more fine-grain policies (i.e. per downstream 
peripheral)
•
Secure Advanced High-performance Bus 
(Secure AHB or S-AHB)
BREAKING TRUSTZONE-M
OXIDE
What about AHB initiators
•
•
Mostly left to implementers to figure out
Secure AHB-aware initiators
•
•
•
Can initiate transactions as S or NS
Up to implementation if S can initiate NS or vice versa
Typically can use security attribute from request the 
initiator is fulfilling (e.g. DMA request)
•
Master Security Wrapper (MSW)
•
•
Used to adapt existing AHB initiators to Secure AHB
Sets a single security attribute used for all AHB transactions
BREAKING TRUSTZONE-M
OXIDE
FROM NXP UM11126
BREAKING TRUSTZONE-M
OXIDE
Implications
•
•
•
Most peripherals are aliased (via IDAU) into both S and NS addresses
Software is expected to configure SAU, MSW, MPC, and PPC based on 
application policies
Any mistakes in configuration can be devastating
•
•
S code or RAM accessible via NS alias
NS access to DMA controller that initiates S transactions
BREAKING TRUSTZONE-M
Finding the ROM 
Patcher
OXIDE
BREAKING TRUSTZONE-M
OXIDE
FROM AN12283
???????????
BREAKING TRUSTZONE-M
OXIDE
Bricked boards!
Chips destroyed by incorrect programming
BREAKING TRUSTZONE-M
OXIDE
LPC55 Flash 
Layout
BREAKING TRUSTZONE-M
OXIDE
Information is missing?
•
Noticed this in LPC55S69 User Manual
•
Did you know you can embed files inside PDFs? 
NXP does.
BREAKING TRUSTZONE-M
OXIDE
HANG ON. WHERE DID 906-1213 GO?
LPC55S6X_LPC55S2X_LPC552X PROTECTED FLASH REGION V1.1.XLSX
BREAKING TRUSTZONE-M
OXIDE
LPC55S6X_LPC55S2X_LPC552X PROTECTED FLASH REGION V1.1.XLSX
Right-click 
Strikes Again!
BREAKING TRUSTZONE-M
OXIDE
Connecting the dots
•
•
•
Find references to this flash region in ROM code
Reverse engineer that code
Oh, look, exact details on how to use the ROM patcher
BREAKING TRUSTZONE-M
OXIDE
NXP ROM Patch Controller
•
•
•
•
•
•
16 patch slots
Each slot patches one 32-bit word specified by ROM address
Up to 8 slots may replace the word with any 32-bit value
Others are replaced with a SVC  instruction
Patches are cleared upon device reset
Aliased into both secure and non-secure ranges
BREAKING TRUSTZONE-M
OXIDE
NXP ROM Patch Controller
BREAKING TRUSTZONE-M
OXIDE
ARMv7-M defined a flash patcher
•
•
From ARMv7-M Architecture Manual
See also Defcon 26 "Your Peripheral Has Planted Malware—
An Exploit of NXP SOCs Vulnerability"
BREAKING TRUSTZONE-M
OXIDE
ARMv8-M removed the patching
CAN'T DO THAT EXPLOIT!
FROM THE ARMV8-M MANUAL
BREAKING TRUSTZONE-M
OXIDE
ROM APIs
•
Exported functions for use by user code
•
•
•
Flash API
In-Application Programming API