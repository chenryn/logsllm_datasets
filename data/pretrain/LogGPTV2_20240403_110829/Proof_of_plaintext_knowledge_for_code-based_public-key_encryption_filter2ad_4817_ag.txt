• Setup(1λ, Fn): on input the security parameter λ and a functionality Fn, outputs a
public key pk, encryption keys eki for each input slot i ∈ [n], and a master secret
key msk.
• Enc(pk, eki, xi): on input the public key pk, encryption key eki for the input slot
i ∈ [n], and a message xi ∈ Xi, outputs a ciphertext ct. We assume that each
ciphertext has an associated index i, which denotes what slot this ciphertext can be
used for.
• KeyGen(pk, msk, k): on input the public key pk, the master secret key msk and a
function k ∈ Kn, outputs a decryption key dkk.
• Dec(pk, dkk, ct1, . . . , ctn): on input the public key pk, a decryption key dkk and n
ciphertexts, outputs z ∈ Z, or a sepcial rejection symbol ⊥ if it fails.
32
Chapter 2. Preliminaries
The scheme MIFE is correct if for all k ∈ Kn and all xi ∈ Xi for i ∈ [n], we have:
Pr
Dec(pk, dkk, Enc(pk, ek1, x1), . . . , Enc(pk, ekn, xn)) = Fn(k, x1, . . . , xn)
(pk, msk, (eki)i∈[n]) ← Setup(1λ, Fn);
dkk ← KeyGen(pk, msk, k);
 = 1−negl(λ),
where the probability is taken over the coins of Setup, KeyGen and Enc.
The scheme is public-key if eki = ∅, that is, the encryption algorithm Enc only requires
the public pk to encrypt messages. It is private-key otherwise.
Security notions
As for the case of single-input FE, we may consider 8 security notions xx-yy-zzz where xx
∈ {one, many} refers to the number of challenge ciphertexts; yy ∈ {SEL, AD} refers to the
fact that encryption queries are selectively or adaptively chosen; zzz ∈ {IND, SIM} refers
to indistinguishability vs simulation-based security. Since simulation-security is impossible in
general as proven in [BSW11], we will restrict ourselves to indistinguishability-based security
deﬁnition. We defer to [BLR+15] for a description of simulation-based security deﬁnitions.
Although the multi-instance setting for single-input FE is relevant to this work, the multi-
instance for the multi-input setting is not. For simplicity, we focus on the single-instance
setting here.
One novelty compared to the single-input setting is that some input slots can collude,
and should not be able to break the security of the encryption for the other slots. This is
captured, in the security game, by the oracle OCorrupt, that on input a slot i ∈ [n], returns the
corresponding encryption key eki. The public-key setting essentially corresponds to the case
where all eki are public. In particular, the adversary can encrypt any message for any slot,
and decrypt them with the challenge ciphertexts for the other slots. This inherent leakage
of information (it is allowed for an adversary to learn this information, by correctness of the
MIFE) is captured by the Condition 1 in the many-AD-IND security game.
Deﬁnition 23: many-AD-IND secure MIFE
A multi-input functional encryption MIFE := (Setup, Enc, KeyGen, Dec) for the set of
functionalities {Fn}n∈N, is many-AD-IND secure if for every stateful PPT adversary A,
we have:
Advmany-AD-IND
MIFE,A
(λ) =(cid:12)(cid:12)(cid:12)PrhAD-INDMIFE
= negl(λ),
0
(1λ,A) = 1i − PrhAD-INDMIFE
1
(1λ,A) = 1i(cid:12)(cid:12)(cid:12)
where the experiments are deﬁned for all β ∈ {0, 1} as follows:
β
Experiment AD-INDMIFE
(1λ,A):
(pk, msk, (eki)i∈[n]) ← Setup(1λ, Fn)
α ← AOEnc(·,·,·),OKeygen(·),OCorrupt(·)(pk)
Output: α
i , x1
i ), returns Enc(pk, eki, xβ
The oracle OEnc, on input (i, x0
i ). For all input slots i ∈ [n],
we denote by Qi the set of queries to OEnc for slot i, and Qi the size of Qi. The oracle
OKeygen, on input k ∈ Kn, returns KeyGen(pk, msk, k). The oracle OCorrupt, on input
i ∈ [n], returns eki. We denote by CS ⊆ [n] the set of corrupted slots. The queries of
adversary A must satisfy the following condition.
2.4 Deﬁnitions for Multi-Input Functional Encryption
33
Condition 1:
• For all i ∈ CS, all (x0
i = x1
i .
• A only makes queries k to OKeygen(·) satisfying
i ) ∈ Qi, we have x0
i , x1
Fn(k, x0
1, . . . , x0
n) = Fn(k, x1
1, . . . , x1
n)
for all possible vectors (xb
Qi, or (i ∈ CS and x0
i = x1
i)i∈[n],b∈{0,1}, where for all i ∈ [n], we have: either (x0
i ).
i , x1
i ) ∈
If the condition is not satisﬁed, the experiment outputs 0 instead of α.
Remark 3: Winning condition
Note that Condition 1 is in general not eﬃciently checkable because of the combinatorial
explosion in the restriction of the queries.
We consider the following weaker security notions.
One ciphertext, one-yy-IND:
i ∈ [n], that is, Qi ≤ 1 for all i ∈ [n].
the adversary A can only query OEnc once per input slot
Selective security, xx-SEL-IND:
beforehand, that is, before receiving the public key from the experiment, and before querying
OKeygen or OCorrupt.
the adversary A must send its challenge {xj,b
i }b∈{0,1},i∈[n],j∈[Qi]
Static corruption, xx-yy-IND-static:
before any other query.
the adversary A must send its queries to OCorrupt
Zero decryption keys, xx-yy-IND-zero:
the adversary A does not query OKeygen.
the adversary A must send at least one challenge per
Extra condition, xx-yy-IND-weak:
slot that is not corrupted, that is, for all i ∈ [n] \ CS, we have: Qi ≥ 1.
These weaker security notions may appear to impose unrealistic restrictions on the adver-
sary. As for the case of single-input FE, it is useful to start building a simpler scheme which
only satisﬁes a weak security notion, then turn it into a many-AD-IND secure scheme. In fact,
we show how to generically transform any xx-yy-IND-weakly and xx-yy-IND-zero secure MIFE
into a full-ﬂedged xx-yy-IND secure MIFE, only using symmetric-key encryption.
Removing the extra condition generically
Here we show how to remove the extra condition from any multi-input FE that is both xx-yy-
IND-weak and xx-yy-IND-zero secure, for any xx ∈ {one,many}, and yy ∈ {AD,SEL}, using
an extra layer of symmetric-key encryption. A similar approach is used in [AGRW17]. Namely,
[AGRW17] uses a symmetric key to encrypt the original ciphertexts. The symmetric key is
shared across users, and the i’th share is given as part of any ciphertext for input slot i ∈ [n].
Thus, when ciphertexts are known for all slots i ∈ [n], the decryption recovers all shares of
the symmetric key, and decrypt the outer layer, to get the original ciphertext. The rest of
decryption is performed as in the original multi-input FE.
The problem with this approach is that the encryption algorithm needs to know the sym-
metric key (and not just a share of it). Thus, corrupting one input slot allows the adversary
34
Chapter 2. Preliminaries
to recover the entire symmetric key, and break the security of the scheme. Such problem did
not arise in [AGRW17], which does not consider corruptions of input slots. To circumvent
this issue, as in [DOT18], we use the symmetric key to encrypt the functional decryption keys,
instead of encrypting the ciphertexts. Each encryption key eki for input slot i ∈ [n] contains
the i’th share of the symmetric key, but the full symmetric key is only needed by the key
generation algorithm, which knows msk. If one share is missing, all the functional decryption
keys are random. We conclude the security proof using the security of the overall multi-input
FE when zero functional decryption keys are queried.
Setup(1λ, Fn):
(pk′, msk′, (ek′
K ←R K
i)i∈[n]) ← Setup′(1λ, Fn)
k1, . . . , kn−1 ←R {0, 1}λ, kn =(cid:16)Li∈[n−1] ki(cid:17) ⊕ K
pk := pk′, msk := (msk′, K),∀i ∈ [n] : eki := (ek′
return (cid:0)pk, msk, (eki)i∈[n](cid:1)
i, ki)
Enc(pk, eki, xi):
parse eki = (ek′
i, ki)
ct′ ← Enc′(pk′, ek′
return (ki, ct′)
i, xi)
KeyGen(pk, msk, k):
k ← KeyGen′(pk′, msk′, k)
parse msk = (msk′, K)
dk′
dkk ← EncSE(K, dk′
k)
return dkk
Dec(pk, dkk, ct1, . . . , ctn):
i)}i∈[n]
parse {cti = (ki, ct′
K ←Li∈[n] ki
dk′
k ← DecSE(K, dkk)
return Dec′(dk′
k, ct′
1, . . . , ct′
n).
Figure 2.1: Compiler from any MIFE ′ := (Setup′, Enc′, KeyGen′, Dec′) with xx-yy-weak and xx-yy-
zero security to the MIFE := (Setup, Enc, KeyGen, Dec) with xx-yy security. Here, (EncSE, DecSE) is a
symmetric key encryption scheme with key space K as deﬁned in Deﬁnition 2.
Theorem 2: Removing the extra condition
Let MIFE ′ be a xx-yy-IND-weak and xx-yy-IND-zero secure MIFE, for any xx ∈ {one,many},
and any yy ∈ {AD,SEL}, and (Gen, EncSE, DecSE) be a symmetric encryption scheme. The
scheme MIFE deﬁned in Figure 2.1 is xx-yy-IND secure.
Proof of Theorem 2 (sketch). We consider two cases:
• Case 1: there exists some i ∈ [n] for which Qi = 0, and i /∈ CS. That is, the adversary
never queries OEnc or OCorrupt on slot i. Here, ki and thus K is perfectly hidden from
the adversary. Then, by semantic security of (GenSE, EncSE, DecSE), the decryption keys
are pseudo-random. We conclude using the xx-yy-IND-zero security of MIFE ′.
• Case 2: for all i, Qi ≥ 1. Here, security follows immediately from the xx-yy-IND-weak
security of the underlying MIFE ′.
2.5 Deﬁnitions for Multi-Client Functional Encryption
35
Deﬁnitions for Multi-Client Functional Encryption
We now present the deﬁnition of multi-client functional encryption (MCFE), originally given in
[GGG+14], which enhances multi-input functional encryption in the following way. In MCFE,
the encryption algorithm takes as an additional input a label (typically a time-stamp), and
ciphertexts from diﬀerent input slots can only be combined when they are encrypted under the
same label. The limits the leakage of information from the encrypted messages. Multi-input
functional encryption corresponds to the case where every message is encrypted under the same
label.
Deﬁnition 24: Multi-Client Function Encryption
Let {Fn}n∈N be a set of functionality where for each n ∈ N, Fn deﬁned over (Kn,X1,··· ,Xn)
is a function Fn : Kn × X1 × ··· × Xn → Z. Each i is called an input slot. The key space
Kn, depends on the arity n. A multi-client functional encryption scheme MCFE for the
set of functionality {Fn}n∈N consists of the following algorithms:
• Setup(1λ, Fn): on input the security parameter λ and a functionality Fn, outputs a
public key pk, encryption keys eki for each input slot i ∈ [n], and a master secret
key msk.
• Enc(pk, eki, xi, ℓ): on input the public key pk, encryption key eki for the input slot
i ∈ [n], a message xi ∈ Xi, and a label ℓ, it outputs a ciphertext ct.
• KeyGen(pk, msk, k): on input the public key pk, the master secret key msk and a
function k ∈ Kn, it outputs a decryption key dkk.
• Dec(pk, dkk, ct1, . . . , ctn, ℓ): on input the public key pk, a decryption key dkk, n
ciphertexts and a label ℓ, outputs z ∈ Z, or a special rejection symbol ⊥ if it fails.
The scheme MCFE is correct if for all k ∈ Kn, all xi ∈ Xi for i ∈ [n], and all label ℓ,
we have:
Dec(pk, dkk, Enc(pk, ek1, x1, ℓ), . . . , Enc(pk, ekn, xn, ℓ), ℓ) = Fn(k, x1, . . . , xn)
(pk, msk, (eki)i∈[n]) ← Setup(1λ, Fn);
dkk ← KeyGen(pk, msk, k);
Pr
= 1 − negl(λ),
where the probability is taken over the coins of Setup, KeyGen and Enc.
The scheme is public-key if eki = ∅, that is, the encryption algorithm Enc only requires
the public pk to encrypt messages. It is private-key otherwise.
Deﬁnition 25: many-AD-IND secure MCFE
A multi-client functional encryption MCFE := (Setup, Enc, KeyGen, Dec) for the set of
functionalities {Fn}n∈N, is many-AD-IND secure if for every stateful PPT adversary A,
we have:
Advmany-AD-IND
MCF E,A
(λ) =(cid:12)(cid:12)(cid:12)PrhAD-INDMCFE
= negl(λ),
0
(1λ,A) = 1i − PrhAD-INDMCFE
1
(1λ,A) = 1i(cid:12)(cid:12)(cid:12)
where the experiments are deﬁned for β ∈ {0, 1} as follows:
36
Chapter 2. Preliminaries
β
Experiment AD-INDMCF E
(1λ,A):
(pk, msk, (eki)i∈[n]) ← Setup(1λ, Fn)
α ← AOEnc(·,·,·),OKeygen(·),OCorrupt(·)(pk)
Output: α
i , x1
i ), ℓ), returns Enc(pk, eki, xβ
The oracle OEnc, on input (i, (x0
i , ℓ). For all input slots
i ∈ [n], and label ℓ, we denote by Qi,ℓ the set of queries to OEnc for slot i and label ℓ, and
Qi,ℓ the size of Qi,ℓ. The oracle OKeygen, on input k ∈ Kn, returns KeyGen(pk, msk, k).
The oracle OCorrupt, on input i ∈ [n], returns eki. We denote by CS ⊆ [n] the set of
corrupted slots. The queries of adversary A must satisfy the following condition.
Condition 1:
• For all i ∈ CS, all labels ℓ, all (x0
• A only makes queries k to OKeygen(·) satisfying
i ) ∈ Qi,ℓ, we have x0
i , x1
i = x1
i .
Fn(k, x0
for all labels ℓ and all vectors (xb
(x0
i ) ∈ Qi,ℓ, or (i ∈ CS and x0
i , x1
1, . . . , x1
n)
n) = Fn(k, x1
1, . . . , x0
i)i∈[n],b∈{0,1} such that for all i ∈ [n], we have: either
i = x1
i ).
If the condition is not satisﬁed, the experiment outputs 0 instead of α.
We consider the following weaker security notions.
the adversary A can only query OEnc once for each input slot
one-AD-IND security:
i ∈ [n] and label ℓ, that is, Qi,ℓ ≤ 1 for all i ∈ [n] and all labels ℓ.
xx-AD-IND-weak security: The queries of adversary A must satisfy the following extra
condition: if there exists a label ℓ and a slot i ∈ [n] such that (x0
i 6= x1
i ,
then for all j ∈ [n], we must have either j ∈ CS or Qj,ℓ > 1. Intuitively, this condition restricts
the adversary to use challenge ciphertexts for all input slots i ∈ [n] for a given label ℓ. In fact,
Condition 1 does not consider the information that may be leaked from partial ciphertexts,
since for all i ∈ [n], we must have either a query (x0
i ) ∈ Qi,ℓ, or i ∈ CS. The extra
condition simply prevents the occurrence of such partial ciphertexts in the security game.
This artiﬁcial notion will be a useful stepping stone towards full-ﬂedged xx-AD-IND security.
We now present a decentralized variant of multi-client functional encryption, where the
generation of functional decryption keys does not require a trusted third party: the master
secret key is split across users into several keys; each user can generate a share of the functional
decryption keys, without any interaction; then the shares can be publicly combined to obtain
a functional decryption key.
i ) ∈ Qi,ℓ with x0
i , x1
i , x1
2.5 Deﬁnitions for Multi-Client Functional Encryption