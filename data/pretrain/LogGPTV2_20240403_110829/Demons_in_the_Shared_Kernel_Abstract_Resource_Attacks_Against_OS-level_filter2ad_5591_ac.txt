many open files in system.”
Our attack confirms that even with a few hundred of processes,
the attacker is able to exhaust nr_files. While for usability, PIDs
control group usually allows thousands of processes. Therefore,
even with the PIDs control group enabled, the attacker-container
can still DoS-attack nr_files successfully. Even worse, nr_files is
shared among all processes including root and non-root processes.
Therefore, not only are the non-privileged container processes
impacted, the root process on the host-machine cannot perform
any file-open operations either.
3.5 Attacks on IO Management
The IO management is an essential part of an operating system. For
management convenience, the Linux kernel abstracts IO devices
into /dev files and introduces abstract resources, such as tty_struct,
to implement the IO device management. Similar to the previous
cases, these abstract resources are not isolated or limited by any
namespaces or control groups, thus it leads to new attacks. In the
following, we introduce the attacks against pty_count, which causes
DoS to the SSH connection.
3.5.1 Attacking pty_count. The Linux kernel abstracts the pseudo-
terminal (abbreviated as pty) to /dev/ptmx and /dev/pts [46]. At
the meantime, kernel also uses a global variable called pty_count
to count the total number of the opened pseudo-terminal, which
increases by one for each time /dev/ptmx is opened, as shown in line
6 of Figure 3. However, the kernel does not provide any namespaces
or control groups to isolate or limit pty_count usages. Consequently,
the attacker can easily exhaust the pty_count.
In our experiments, the attacker keeps opening /dev/ptmx in the
container to trigger ptmx_open, which calls devpts_new_index and
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea768static atomic_t pty_count = ATOMIC_INIT(0);
int devpts_new_index(struct pts_fs_info *fsi)
{
int index = -ENOSPC;
if (atomic_inc_return(&pty_count) >= (pty_limit -
↩→
(fsi->mount_opts.reserve ? 0 : pty_reserve)))
goto out;
...
return index;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
}
}
static int ptmx_open(struct inode *inode, struct file *filp)
{
...
index = devpts_new_index(fsi);
...
Figure 3: Linux kernel source of pty_count usage. pty_count is
global atomic variables, shared by all containers on the same
kernel.
increases pty_count. In a couple of seconds, the pty_count limit is
reached, and all the following ptmx_open operations fail. The con-
sequences are severe as pty devices are widely used by various
applications such as SSH connection. As a result, all SSH connec-
tion attempts to any other container fail due to the failed pseudo-
terminal-open. Even worse, the host-machine cannot start any new
containers, as the connections to a new container are denied due
to the same error.
3.6 Attacking FreeBSD and Fuchsia Kernels
The root cause of abstract resource attacks is the shared kernel
data (i.e., abstract resources). Next, we demonstrate that the shared
kernel data also makes both the FreeBSD and the Fuchsia vulnerable
to abstract resource attacks.
Attacking FreeBSD. In FreeBSD kernel, following similar resources
in the Linux kernel, we manually identified 5 shared globally ab-
stract resources, namely, dp_dirty_total, numvnodes, openfiles, pid,
and pty. Our experiments further confirm that the former two can
be DoS attacked, while the latter three are limited by rctl per-jail.
The experiments are conducted on the FreeBSD 13.0-RELEASE
with Ezjail-admin v3.4.2 running in a virtual machine with Intel
Core i5 processor, 8GB memory, and 40GB hard disk. Ezjail [53] is
a jail administration framework. The ezjail commands provide a
simple way to create multiple jails using FreeBSD’s jail system. Jails
here are similar to the containers on the Linux. We set up two jails
following the FreeBSD’s handbook [18] and use rctl [54] to limit
per Jail’s resources. We use these two jails as the attacker-jail and
the victim-jail, which is similar to the container setup in §3.1.
For the dirty counter dp_dirty_total, ZFS in FreeBSD introduces
the dsl_pool struct for recording the data of each ZFS pool. The
dsl_pool struct uses the dp_dirty_total field to represent the whole
ZFS pool dirty data. When the dp_dirty_total reaches the limit of
zfs_dirty_data_max, ZFS delays the upcoming writing and waits
for the dirty data to be synchronized to the disk. Unfortunately,
FreeBSD does not provide any isolation for the dp_dirty_total. In
the attacker-jail, we run the command dd if=/dev/zero of=/mnt/test
bs=1M count=1024 (same with the one in §3.3) to exhaust the dirty
total dp_dirty_total. As a result, the victim-jail has a 46% IO per-
formance downgrade.
For the numvnodes, FreeBSD uses a vnode struct to represent a file
system entity, such as a file or a directory. FreeBSD also keeps a
global variable numvnodes to record the total number of vnode in
the whole kernel. And the limit is in maxvnodes. In the experiments,
we can easily exhaust the host-machine’s numvnodes and reach the
maxvnodes limit by repeatedly creating directories in the attacker-
jail.
Attacking Fuchsia. Fuchsia uses the Zircon kernel, which intro-
duces the concept of handle to allow user-space programs to refer-
ence kernel objects [19]. Zircon maintains a global data structure
called gHandleTableArena for allocating all handles. The limit for
handles in the kernel is in kMaxHandleCount. Handles are used very
frequently in Zircon. Surprisingly, we find that the creation of han-
dles is not restricted. We further confirm this problem on the Fuchsia
emulator. A user with basic rights [20] (similar to capabilities in the
Linux) can repeatedly create handles to exhaust all handles, which
leads to the whole system crash. We report this problem to the
Fuchsia developers. They have confirmed this problem, and plan to
fix the problem after identifying more attack vectors to local DoS.
3.7 Summary
From the above discussions, it is easy to see that abstract resource
attacks are highly practical and the consequences are severe. What
makes things worse is that abstract resources are pretty common
in the Linux kernel, affecting every aspect of Linux functionali-
ties. Furthermore, abstract resource attack is intrinsic to OS-level
virtualization. It also works on FreeBSD and Fuchsia kernels.
4 STATIC ANALYSIS OF
CONTAINER-EXHAUSTIBLE ABSTRACT
RESOURCES
As mentioned before, abstract resources are critical to containers.
On the other side, there are thousands of abstract resources, which
makes it virtually impossible to enumerate all of them. In this paper,
we take an initial step to identify exhaustible abstract resources
shared by containers.
Challenges. We need to resolve two challenges. First, it is chal-
lenging to identify meaningful abstract resources, especially those
that are shared in the kernel. An abstract resource in the Linux
kernel can be a variable or a data structure instance. However, not
all variables or data structure instances are meaningful abstract
resources. We need to find the abstract resources that are critical to
the OS functionalities. Moreover, the identified abstract resources
need to be shared between containers so that one container can
exhaust these resources to attack other containers. Unfortunately,
there is no documentation regarding shareable abstract resources.
To address this challenge, we propose configuration-based analy-
sis and access-based analysis to identify various shared abstract
resources in the Linux kernel.
Second, it is challenging to decide if the container can exhaust a
specific abstract resource. Different from regular user-space pro-
grams, resource accesses from a container face more restrictions,
such as namespaces, control groups, and seccomp. Moreover, as
each container runs in a separate user, its resource consumption is
also restricted by the per-user limitation. Thus the simple reach-
ability analysis to the resource consumption sites cannot tell the
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea769Figure 4: The architecture of the analysis tool.
controllability of the container on an abstract resource. For example,
for abstract resources that are isolated by namespaces, even though
the container can consume these abstract resources, it still may not
affect other containers due to the namespace isolation. Therefore,
to overcome this challenge, we propose container controllability
analysis, which includes seccomp restriction analysis, per-user re-
striction analysis, and namespace isolation analysis, to further filter
container-exhaustible resources.
Figure 4 shows the architecture of our tool, which automatically
identifies container-exhaustible abstract resources. The analysis
tool takes kernel source IR as the input. It first identifies all the ker-
nel shareable abstract resources using configuration-based analysis
and access-based analysis in §4.1. Then, it conducts the syscall reach-
ability analysis and container restriction analysis in §4.2, which
includes seccomp, per-user and namespace restriction analysis, to
analyze the container controllability over these abstract resources.
Moreover, we give out the analysis results in §4.3.
4.1 Identification of Kernel Shareable Abstract
Resources
As mentioned before, it is challenging to identify meaningful ab-
stract resources from thousands of kernel variables and data struc-
ture instances. Even harder, to make sure these abstract resources
are directly or indirectly shared between containers, we need to
narrow them down to the shareable kernel abstract resources.
To overcome this challenge, we leverage kernel programming
paradigms and propose configuration-based analysis and access-
based analysis to identify kernel shareable resources.
4.1.1 Configuration-based Analysis. The Linux kernel provides
sysctl interfaces under /proc/sys to allow user-space programs
to configure kernel parameters [49]. Our key observation is that
most of these sysctl configurations are used for abstract resource
limiting, such as limiting the file number fs.file-nr or memory
huge pages vm.nr_hugepages. As a result, all containers are sharing
the same global limit specified by sysctl configurations. Such sysctl
configurations offer important clues about the abstract resources
that are shareable between containers.
Based on the above observation, we propose to identify the
shareable kernel abstract resources using the sysctl configurations,
termed as the configuration-based analysis, which consists of three
Figure 5: The sysctl data structures in Linux kernel.
basic steps. First, it uses the specific sysctl data types to identify
all sysctl-related data structures. These data structures contain the
configurable sysctl kernel parameters. Second, the sysctl data struc-
ture usually contains the function that displays the sysctl value
in /proc/sys/ folder. Therefore, by analyzing that function, we are
able to pinpoint the exact variable for this kernel parameter. Finally,
if a kernel parameter is used for restricting resource consumption,
its corresponding variable should appear in comparison instruc-
tions. Therefore, we follow the use-def chain to check the usages
of the identified variable and mark it as an abstract resource if it is
used in a comparison instruction.
We design and implement an inter-procedural analysis pass in
LLVM. We use an example in Figure 5 to illustrate the details. Specif-
ically, the Linux kernel uses the type struct ctl_table to configure
sysctl kernel parameters, such as the file system configurations
in fs_table shown in line 1 of Figure 5. Therefore, the pass first
Container Controllable Abstract ResourcesKernelSource (IR)Container Controllability Analysis (§4.2)Shareable Abstract Resources Identification (§4.1)ShareableAbstractResourcesSensitiveFunctionsSyscallReachability AnalysisAccess-basedAnalysisConfiguration-based AnalysisPer-UserRestriction AnalysisNamespaceIsolation AnalysisSeccompRestriction Analysis1staticstructctl_tablefs_table[]={2...3{4.procname="file-nr",5.data=&files_stat,6.proc_handler=proc_nr_files,7},8...9}1011intproc_nr_files(...)12{13files_stat.nr_files=get_nr_files();14...15}1617staticlongget_nr_files(void)18{19returnpercpu_counter_read_positive(&nr_files);20}2122structfile*alloc_empty_file(intflags,...)23{24...25if(get_nr_files()>=files_stat.max_files&&!capable(CAP_SYS_ADMIN)){,!26...27gotoover;28}29...30}①identify sysctlstruct②identify critical variable③checkcritical variableusagesSession 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea770traverses all kernel global variables to collect all struct ctl_table
variables, such as fs_table in Figure 5.
Second, fs_table uses the function pointer in proc_handler to
display the parameter in the /proc/sys/ file system. Therefore, from
the proc_handler field, the pass follows its points-to and launches
an inter-procedural analysis to obtain the exact variable, whose
value is displayed in the sysctl configuration interface. As shown in
line 19 of Figure 5, our pass marks nr_files as the critical variable.
Third, our pass checks all usages of identified critical variables.
If one critical variable is used in a comparison instruction (i.e.,
icmp in LLVM IR), our pass records the locations and marks this
variable as the abstract resource. For example, nr_files is used for
comparison in line 25 of Figure 5. Our pass further detects that if the
comparison fails, an error is returned in lines 25 and 27. Therefore,
our pass marks nr_files as an abstract resource. By analyzing all
struct ctl_table structures, our pass gets a collection of abstract
resources.
4.1.2 Access-based Analysis. Besides sysctl configurations, the
Linux kernel also uses lock or atomic mechanism to protect the
concurrently-accessed resources. Therefore, we propose to use con-
current accesses as an indication to identify a set of shareable
abstract resources.
As the race condition and concurrency analysis is an old topic, we
adopt the existing lockset detection approaches [5, 68]. If the lock is
taken on a field of a data structure, we mark this data structure as an
abstract resource and add this function into the sensitive function
set. Moreover, if a variable is modified quantitatively between the
lock and unlock functions, we also mark it as the abstract resource.
Besides the lock/unlock, we observe that atomic and percpu
counter are also used to protect concurrently-accessed data, such
as percpu_counter_inc (line 19 in Figure 1) and atomic_inc_return
(line 6 in Figure 3). Therefore, we implement a pass to analyze
all atomic and percpu counter usages. Our pass first analyzes the
function parameters, and adds all functions with struct atomic_t,
struct atomic64_t, and struct percpu_counter parameters to an
atomic/percpu function set. Second, our pass traverses all state-
ments in all kernel functions to check all usages of atomic/percpu
functions. If a variable is passed to an atomic/percpu function, we
mark it as an abstract resource.
During the implementation, we find that the LLVM linker merges
structure types that have the same memory layout, such as typedef
struct {int counter;} atomic_t and typedef struct {uid_t val;}
kuid_t. The reason is that uid_t is of type unsigned int, which has
the same size as int. Therefore, the LLVM linker merges them and
mis-uses kuid_t for atomic_t. To address this problem, we trace the
LLVM linker and find that the get method in lib/Linker/IRMover.cpp
compares a new type with existing types and merges them if the
memory layout is same. Therefore, we disable the merging by com-
menting out the comparing and merging code.
4.2 Container-Controllability Analysis
With identified abstract resources, we propose container controlla-
bility analysis to make sure that the container can actually consume
those abstract resources. Our idea of the container controllability
analysis is two-fold. First, we need to make sure the abstract re-
source consumption sites from §4.1 can be reached by the container
processes. To achieve this, we perform the traditional backward
control-flow analysis based on the kernel control flow graph, in
which indirect calls are resolved based on struct-type [42, 70]. If
there are no paths from system call entries to the abstract resource
consumption sites, we mark this abstract resource unreachable
from the container.
Second, note that reachability analysis alone is not enough, we
need to further make sure that there are no additional container-
specific restrictions on the path. In other words, we need to check
if there are any restriction checks on the paths to make sure that
the container can exhaust these abstract resources. As mentioned
before, different from user-space programs, the container faces
more restrictions such as seccomp, namespaces, control groups as
well as per-user resource limitations. Since our reachability analysis