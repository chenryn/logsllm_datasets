Introduce LLVM from  
a hacker's view. 
Loda chou. 
PI:EMAIL 
2012/07/02 
1
 I am Loda. 
 Work for 猪屎屋 (DeSign House). 
 Be familiar for MS-Windows System and 
Android/Linux Kernel. 
 Sometimes…also do some software crack job. 
 Like to dig-in new technology and share technical 
articles to promote to the public. 
 Motto 
 The way of a fool seems right to him ,but a wise man 
listens to advice. (Proverbs 12:15) 
Who am I? 
2
 Created by Vikram Adve and Chris Lattne on 2000  
 Support different front-end compilers (gcc/clang/....)  and different 
languages (C/C++,Object-C,Fortran,Java 
ByteCode,Python,ActionScript) to generate BitCode. 
 The core of LLVM is the intermediate representation (IR). Different 
front-ends would compile source code to SSA-based IR, and 
traslate the IR into different native code on different platform. 
 Provide RISC-like instructions (load/store…etc), unlimited registers, 
exception (setjmp/longjmp)..etc 
 Provide LLVM Interpreter and LLVM Compiler to run LLVM 
application. 
What is LLVM? 
3
Let's enjoy it. 
4
Android Dalvik RunTime 
Dalvik ByteCode 
Framework in JAR 
Dalvik ByteCode AP in dex/odex 
Partial Dalvik AP 
implemented in 
Native .so 
Linux Kernel 
Java Native Interface 
Native .so library 
Dalvik 
Virtual Machine 
5
 Per-Process per-VM 
 JDK will compile Java to Sun’s bytecode, Android would 
use  dx to convert Java bytecode to Dalvik bytecode. 
 Support Portable Interpreter (in C), Fast Interpreter (in 
Assembly) and Just-In Time Compiler 
 Just-In-Time Compiler is Trace-Run  based. 
 By Counter to find the hot-zone 
 Would translate Dalvik bytecode to 
ARMv32/NEON/Thumb/Thumb2/..etc  CPU instructions. 
The features of Dalvik VM 
6
LLVM Interpreter RunTime 
Native .so library 
Linux Kernel 
Running by LLI (Low Level Virtual Machine 
Interpreter & Dynamic Compiler) 
LLVM BitCode AP 
7
 Could run llvm-application as the performance of native 
application 
 Could generate small size BitCode, translate to target 
platform assembly code then compiled into native 
execution file (final size would be almost the same as you 
compile it directly from source by GCC or other compiler.) 
 Support C/C++/… program to seamlessly execute on 
variable hardware platform.  
 x86, ARM, MIPS,PowerPC,Sparc,XCore,Alpha…etc 
 Google would apply it into Android and Browser (Native 
Client) 
Why LLVM? 
8
C/C++ 
Java 
BitCode 
Assembly 
LLVM 
Compiler 
ARM 
Assembly 
X86 
Assembly 
...etc 
The LLVM Compiler Work-Flows. 
Fortran 
clang -emit-llvm 
 llc -mcpu=x86-64 
llc -mcpu=cortex-a9 
ARM 
Execution File 
X86 
Execution File 
gcc 
arm-none-linux-gnueabi-gcc 
-mcpu=cortex-a9 
9
LLVM in Mobile Device 
C/C++ 
Java 
ByteCode 
Render 
Script 
BitCode 
BitCode 
BitCode 
Application 
10
Chromium 
Browser 
HTML/Java Script 
Native Client APP 
IMC  
SRPC  
NPAPI 
Service Framework 
Call to run-time 
framework 
IMC 
SRPC 
Storage 
Service 
UnTrust Part 
Would passed the security 
checking before execution. 
Trust Part 
IMC : Inter-Module Communications 
SRPC : Simple RPC 
NPAPI : Netscape Plugin Application Programming Interface 
LLVM in Browser 
11
LLVM Compiler Demo. 
Use clang to compile BitCode File. 
[root@localhost reference_code]# clang -O2 -emit-llvm sample.c -c -o sample.bc  
[root@localhost reference_code]# ls -l sample.bc 
-rw-r--r--. 1 root root 1956 May 12 10:28 sample.bc 
Convert BitCode File to x86-64 platform assembly code. 
[root@localhost reference_code]# llc -O2 -mcpu=x86-64 sample.bc -o sample.s 
Compiler the assembly code to x86-64 native execution file. 
[root@localhost reference_code]# gcc sample.s -o sample -ldl 
[root@localhost reference_code]# ls -l sample 
-rwxr-xr-x. 1 root root 8247 May 12 10:36 sample 
Convert BitCode File to ARM Cortext-A9 platorm assembly code. 
[root@localhost reference_code]# llc -O2 -march=arm -mcpu=cortex-a9 sample.bc -o 
sample.s 
Compiler the assembly code to ARM Cortext-A9 native execution file. 
[root@localhost reference_code]# arm-none-linux-gnueabi-gcc -mcpu=cortex-a9 sample.s -ldl -o 
sample 
[root@localhost reference_code]# ls -l sample 
-rwxr-xr-x. 1 root root 6877 May 12 10:54 sample 
12
Let’s see a simple sample 
code. 
What is the problems for LLVM? 
13
[root@www LLVM]# clang -O2 -emit-llvm dlopen.c -c -o dlopen.bc  
[root@www LLVM]# lli dlopen.bc 
libraryHandle:86f5e4c8h 
puts function pointer:85e81330h 
loda 
LLVM dlopen/dlsymc Sample. 
int (*puts_fp)(const char *); 
int main() 
{ 
        void * libraryHandle; 
        libraryHandle = dlopen("libc.so.6", RTLD_NOW); 
        printf("libraryHandle:%xh\n",(unsigned int)libraryHandle); 
        puts_fp = dlsym(libraryHandle, "puts"); 
        printf("puts function pointer:%xh\n",(unsigned int)puts_fp); 
        puts_fp("loda"); 
        return 0; 
} 
14
 Would place the piece of machine code as a data buffer 
to verify the native/LLVM run-time behaviors. 
Make execution code as data buffer 
0000000000000000 : 
   0:   55                                            push   %rbp 
   1:   48 89 e5                                 mov    %rsp,%rbp 
   4:   b8 04 00 00 00                    mov    $0x4,%eax 
   9:   bb 01 00 00 00                     mov    $0x1,%ebx 
   e:   b9 00 00 00 00                     mov    $0x0,%ecx 
                        f: R_X86_64_32  gpHello 
  13:   ba 10 00 00 00                      mov    $0x10,%edx 
  18:   cd 80                                       int    $0x80 
  1a:   b8 11 00 00 00                      mov    $0x11,%eax 
  1f:   c9                                               leaveq 
  20:   c3                                             retq 
15
Native Program Run Code in Data 
Segment 
int (*f2)(); 
char 
TmpAsmCode[]={0x90,0x55,0x48,0x89,0xe5,0xb8,0x04,0x00,0x00,0x00,0xbb,0x01,0x00,0x00,0x00,0xb9,0x4
0,0x0c,0x60,0x00,0xba,0x10,0x00,0x00,0x00,0xcd,0x80,0xb8,0x11,0x00,0x00,0x00,0xc9,0xc3}; 
char gpHello[]="Hello Loda!ok!\n"; 
int main() 
{ 
        int vRet; 
        unsigned long vpHello=(unsigned long)gpHello; 
        TmpAsmCode[19]=vpHello>>24 & 0xff; 
        TmpAsmCode[18]=vpHello>>16 & 0xff; 
        TmpAsmCode[17]=vpHello>>8 & 0xff; 
        TmpAsmCode[16]=vpHello & 0xff; 
        f2=(int (*)())TmpAsmCode; 
        vRet=f2(); 
        printf("vRet=:%d\n",vRet); 
        return 0; 
} 
[root@www LLVM]# gcc self-modify.c -o self-modify 
[root@www LLVM]# ./self-modify 
Segmentation fault 
16
Native Program Run Code in Data 
Segment with Page EXEC-settings 
int (*f2)(); 
char 
TmpAsmCode[]={0x90,0x55,0x48,0x89,0xe5,0xb8,0x04,0x00,0x00,0x00,0xbb,0x01,0x00,0x00,0x00,0xb9,0x4
0,0x0c,0x60,0x00,0xba,0x10,0x00,0x00,0x00,0xcd,0x80,0xb8,0x11,0x00,0x00,0x00,0xc9,0xc3}; 
char gpHello[]="Hello Loda!ok!\n"; 
int main() 
{ 
        int vRet; 
        unsigned long vpHello=(unsigned long)gpHello;         
        unsigned long page = (unsigned long) TmpAsmCode & ~( 4096 - 1 ); 
        if(mprotect((char*) page,4096,PROT_READ | PROT_WRITE | PROT_EXEC  )) 
                 perror( "mprotect failed" ); 
        TmpAsmCode[19]=vpHello>>24 & 0xff; 
        TmpAsmCode[18]=vpHello>>16 & 0xff; 
        TmpAsmCode[17]=vpHello>>8 & 0xff; 
        TmpAsmCode[16]=vpHello & 0xff; 
        f2=(int (*)())TmpAsmCode; 
        vRet=f2(); 
        printf("vRet=:%d\n",vRet); 
        return 0; 
} 
[root@www LLVM]# gcc self-modify.c -o self-modify 
[root@www LLVM]# ./self-modify 
Hello Loda!ok! 
vRet=:17 
17
LLVM AP Run Code in Data Segment 
with EXEC-settings 
int (*f2)(); 
char 
TmpAsmCode[]={0x90,0x55,0x48,0x89,0xe5,0xb8,0x04,0x00,0x00,0x00,0xbb,0x01,0x00,0x00,0x00,0xb9,0x40,0x0c,0x60,0x00,0xb
a,0x10,0x00,0x00,0x00,0xcd,0x80,0xb8,0x11,0x00,0x00,0x00,0xc9,0xc3}; 
char gpHello[]="Hello Loda!ok!\n"; 
int main() 
{ 
        int vRet; 
        unsigned long vpHello=(unsigned long)gpHello; 
        unsigned long page = (unsigned long) TmpAsmCode & ~( 4096 - 1 ); 
        if(mprotect((char*) page,4096,PROT_READ | PROT_WRITE | PROT_EXEC  )) 
                 perror( "mprotect failed" ); 
        char *base_string=malloc(256); 
        strcpy(base_string,gpHello); 
        vpHello=(unsigned long)base_string; 
        TmpAsmCode[19]=vpHello>>24 & 0xff; 
        TmpAsmCode[18]=vpHello>>16 & 0xff; 
        TmpAsmCode[17]=vpHello>>8 & 0xff; 
        TmpAsmCode[16]=vpHello & 0xff; 
        f2=(int (*)())TmpAsmCode; 
        vRet=f2(); 
        printf("vRet=:%d\n",vRet); 
        return 0; 
} 
[root@www LLVM]# clang -O2 -emit-llvm llvm-self-modify.c -c -o llvm-self-modify.bc  
[root@www LLVM]# lli llvm-self-modify.bc 
Hello Loda!ok! 
vRet=:17 
18
LLVM AP Run Code in Data Segment 
without EXEC-settings? 
int (*f2)(); 
char 
TmpAsmCode[]={0x90,0x55,0x48,0x89,0xe5,0xb8,0x04,0x00,0x00,0x00,0xbb,0x01,0x00,0x00,0x00,0xb9,0x40,0x0c,0x60,0x00,0xb
a,0x10,0x00,0x00,0x00,0xcd,0x80,0xb8,0x11,0x00,0x00,0x00,0xc9,0xc3}; 
char gpHello[]="Hello Loda!ok!\n"; 
int main() 
{ 
        int vRet; 
        unsigned long vpHello=(unsigned long)gpHello; 
        char *base_string=malloc(256); 
        strcpy(base_string,gpHello); 
        vpHello=(unsigned long)base_string; 
        TmpAsmCode[19]=vpHello>>24 & 0xff; 
        TmpAsmCode[18]=vpHello>>16 & 0xff; 
        TmpAsmCode[17]=vpHello>>8 & 0xff; 
        TmpAsmCode[16]=vpHello & 0xff; 
        f2=(int (*)())TmpAsmCode; 
        vRet=f2(); 
        printf("vRet=:%d\n",vRet); 
        return 0; 
} 
[root@www LLVM]# clang -O2 -emit-llvm llvm-self-modify.c -c -o llvm-self-modify.bc  
[root@www LLVM]# lli llvm-self-modify.bc 
Hello Loda!ok!   It still works! 
vRet=:17 
19
So…..What we got? 
 LLVM could run data-segment as execution code. 
 LLVM doesn’t provide a strict sandbox to prevent 
the unexpected program flows. 
 For installed-application, maybe it is ok. (could 
protect by Android Kernel-Level Application Sandbox)  
 How about LLVM running in Web Browser? 
Running by LLI (Low Level Virtual Machine 
Interpreter & Dynamic Compiler) 
LLVM BitCode AP 
Code 
Data 
Bidirectional 
Function Call 