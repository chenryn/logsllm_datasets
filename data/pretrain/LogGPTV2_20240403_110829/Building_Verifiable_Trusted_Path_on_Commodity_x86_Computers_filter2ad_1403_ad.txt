complies with the PCI/PCIe speciﬁcations [10, 54], and thus
cannot be denied by the device itself. The hypervisor’s MMIO
protection can neither prevent nor detect peer-to-peer commu-
nication, since this communication operates directly on the in-
ternal memory of the communicating devices. In addition, the
IOMMU cannot mediate communication for PCI and USB de-
vices that are connected to the southbridge chip, because the
IOMMU is integrated into the northbridge chip.
To prevent PCI peer-to-peer communication, we propose us-
ing the new PCIe Access Control Services (ACS) [4]. The ACS
on an I/O bus/bridge will actively check the originator’s identity
in I/O requests, and prevent I/O command spooﬁng and unau-
thorized I/O access. The trusted-path hypervisor conﬁgures the
ACS on all corresponding bridges to prevent any peer-to-peer
communication between the DE and other devices. The hyper-
visor also protects the ACS conﬁguration using the mechanisms
described in Section 5. The remaining problem is that ACS is
not yet a common feature of the I/O architecture, and most cur-
rent PCI bridges and chipset hardware do not implement it.
The prevention of USB On-The-Go (OTG) peer-to-peer
communication [61] is easier, because the communication only
succeeds when both communicating devices enable OTG and
comply with OTG protocols. Thus, the HV or PE can explic-
itly conﬁgure the DE to disable USB OTG.
6.3 MMIO Memory Access Control
As mentioned in Section 5.2,
there is no central con-
troller/chipset hardware that can explicitly control access to the
mapping between devices and their MMIO memory regions,
without involving the on-CPU software. As one good example,
the IOMMU provides controls on the mapping between devices
and their DMA memory regions. We suggest similar protec-
tion mechanisms be implemented within the memory manage-
ment unit (MMU). This would enable trusted code (i.e., the
HV) to explicitly assign MMIO memory regions to devices, or
to a group of devices, based on a speciﬁc access control policy.
This I/O architectural change would help simplify our counter-
measures against the MMIO mapping attack.
6.4 Memory Virtualization Support
Memory virtualization support
in mainstream CPUs (e.g.,
AMD NPT [3], Intel EPT [32]) only delivers memory address
and access type information to the hypervisor when a mem-
ory access violation occurs. Thus, the hypervisor cannot easily
know what data was being written to the corresponding mem-
ory address. This limitation affects the virtualization of all
devices that rely on MMIO access. We propose an improve-
ment of the memory virtualization support. The memory viola-
tion should be delivered to the hypervisor with a pointer to the
contents that were being written to the memory region. This
improvement will help to simplify the hypervisor design for
virtualizing MMIO-capable devices. It will also help simplify
device design, since no special mode for virtualization (e.g.,
x2APIC mode of LAPIC mentioned in Section 5.4.3) is needed.
7 Program Endpoint (PE) Driver Design
We discuss design options for trusted-path device drivers in
PEs, and provide some high-level guidelines for driver imple-
mentation under different CPU privilege levels.
Driver Design. To isolate the trusted-path device driver from
the OS, we need to modify the commodity device driver to
eliminate any dependencies on the commodity OS or OS ker-
nel. Such driver porting efforts are manageable for the fol-
lowing four reasons. First, previous research on device driver
implementation in user space [12, 40] and device driver isola-
tion [18, 26, 58] shows how to extract the drivers from the OS
kernel in a manner that reduces reliance on the OS for I/O ser-
vices. Second, research on driver code characteristics shows
that most of the commodity driver code is for housekeeping
purposes, such as resource allocation, clean-up, and error han-
dling, with only a small portion of the code dealing with the
actual device I/O [26]. The modiﬁcations for implementing the
DE device driver inside a PE might not propagate to the en-
tire codebase of the commodity driver. Third, our trusted-path
hypervisor already implements critical I/O services needed by
the DE drivers (such as interrupt-controller conﬁguration, de-
vice I/O port and MMIO settings, and DMA memory man-
agement), which are quite helpful in driver implementation.
Fourth, trusted-path device drivers need not be full-featured
device drivers as in the commodity OS. Instead, trusted-path
device drivers may only need to support a minimal set of func-
tions that meet the I/O needs of the associated program end-
point. For example, to implement secure display, the graphics-
controller driver in the PE might only support a subset of all
possible graphics-card modes.
Guidelines.
The detailed implementation of a trusted-path
device driver is closely related to the features of its trusted-
path device and the needs of the program endpoint. These dif-
fer signiﬁcantly across trusted-path applications. We introduce
general guidelines for designing I/O related portions of the DE
driver in our trusted-path system.
To serve the different functional and performance needs
of trusted-path applications, DE device drivers can be imple-
mented either in user privilege level (Ring 3), or kernel priv-
ilege level (Ring 0). We recommend implementing device
drivers in Ring 3 for security-sensitive trusted-path applica-
tions, where performance is not the major concern of the ap-
plication. In the Ring 3 case, the driver itself cannot directly
execute I/O operations associated with privileged CPU instruc-
tions: e.g., IN/OUT for I/O port access, RDMSR/WRMSR for
accessing MSRs, and IRET for returning from interrupt service
routines. Our trusted-path system should not temporarily ele-
vate the privilege level of the device endpoint drivers and the
program endpoint to allow executing these privileged instruc-
tions. Instead, the DE driver executes these instructions with
the involvement of the HV, via certain hypercall interfaces. In
addition, device drivers in Ring 3 are often operating in virtual
memory space and lack the view of physical-to-virtual memory
624
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
mappings. In cases where the drivers need to perform opera-
tions directly on physical memory addresses (e.g., to manipu-
late devices’ MMIO registers), the driver needs the involvement
of the HV to provide the corresponding physical addresses.
The frequent involvement of the hypervisor introduces a perfor-
mance penalty to the device driver. Our case study (Section 9)
illustrates our experiences in minimizing the involvement of the
HV to enable high performance driver operations.
In the Ring 0 case, the device endpoint driver can execute
privileged CPU instructions, which may give the driver access
to critical system resources such as I/O ports and MSR regis-
ters. The key challenge is for the trusted-path hypervisor to
conﬁne the capabilities of the DE drivers, so that the drivers
can not abuse their capabilities to compromise the rest of the
system, including the OS, applications, and other devices. In
addition, the unsuspecting abuse of privileged instructions for
access to system resources may incur a performance penalty by
triggering hypervisor involvement or driver misbehavior.
8 User Veriﬁcation of Trusted-Path State
Our design enables veriﬁcation of the trusted-path state (e.g.,
correct conﬁguration and activation) to a third party who is of-
ten a human user. We use two simple devices for this task: a
TPM that is widely accessible in many commodity computers,
and a simple hand-held veriﬁcation device.
Our hand-held device is simpler and more widely applica-
ble than the special I/O devices in some related works (Sec-
tion 10). First, the standard remote attestation protocol is
identical for different trusted-path conﬁgurations, and thus a
general-purpose veriﬁer sufﬁces to work for all trusted-path ap-
plications. Second, our device only performs standard public-
key cryptographic operations (e.g., certiﬁcate and digital signa-
ture veriﬁcation) and a few cryptographic hash operations. It
does not store any secrets. Third, our device outputs the ver-
iﬁcation result to the user via only one red-green, dual-color
LED. The green light indicates the correct PE-to-DE trusted-
path state [37]. Moreover, our design can also support multiple
trusted-paths on a platform using just one simple device.
Note that all user-veriﬁcation of the trusted-path state in the
presence of malware requires some external trusted device.
Otherwise a user cannot possibly obtain malware-independent
veriﬁcation that the output displayed on the video display orig-
inates from a correctly conﬁgured and isolated trusted compo-
nent, rather than from malware.3
Trusted-Path Veriﬁcation Protocol. We describe a simple
protocol for user veriﬁcation of the trusted-path state. The
hand-held veriﬁer starts remote attestation by sending a pseudo-
3To obtain malware-independent veriﬁcation of the trusted-path state we
must detect the effect of the Cuckoo attack [46], which exploits the difﬁculty
of a human in possession of a physical computer to guarantee that s/he is com-
municating with the true hardware TPM inside that computer. This is a generic
attack for all attestation schemes that use TPMs, and we address it by requir-
ing that (1) the public key (certiﬁcate) of the TPM be loaded in the veriﬁer
device before that veriﬁer is used for the ﬁrst time, and (2) the veriﬁer checks
the validity of the signatures originating from the local TPM.
random nonce (for freshness) to an untrusted application on the
host platform. Upon receiving the nonce from the untrusted
application via some pre-reserved shared memory region, the
trusted-path program endpoint requests a TPM Quote contain-
ing cryptographic hashes of the code and static initialized data
of the hypervisor and the program endpoint that are digitally
signed using a TPM-based key. The program endpoint returns
the signed quote to the untrusted application, which sends the
quote to the hand-held veriﬁer. The veriﬁer checks the validity
of the signature and cryptographic hashes taken over the HV
and the PE, and displays the result to the user via a red-green
dual-color LED. If the green LED is on, the user knows that the
intended hypervisor and program endpoint are running on the
host platform, and the PE-to-DE trusted path has been estab-
lished. If the red light comes on, the security properties of the
trusted-path are not guaranteed.
Supporting Multiple Trusted Paths. If activation of multiple
trusted paths to different program endpoints is desired from the
same hand-held device, we envision that a single trusted path
to a trusted shell [30] can ﬁrst be executed on the target plat-
form. This trusted shell, together with the trusted-path and the
underlying hypervisor, can be veriﬁed by the user as explained
above. All other isolated PEs can then be registered via the un-
derlying hypervisor using trusted shell commands. A user can
also identify, select, invoke, manage, monitor, and tear down
any desired PE via the trusted shell. Because the trusted path
for input to and output from the trusted shell has already been
veriﬁed by the user using a hand-held device, there is no need
to verify any subsequent trusted paths.
9 Case Study:
A Simple User-Oriented Trusted Path
We implement a user-oriented trusted-path and evaluate its per-
formance to illustrate the feasibility of our trusted-path design.
This trusted path application protects a user’s keyboard input
sent to an application, and the output from the application to
the computer’s display, against attacks launched from the com-
promised OS or applications, and manipulated devices.
We implement the trusted-path system and perform all mea-
surements on an off-the-shelf desktop machine with an AMD
Phenom II X3 B75 tri-core CPU running at 3 GHz, an AMD
785G northbridge chip, and an AMD SB710 southbridge
chipset. The machine is equipped with a PS/2 keyboard in-
terface, an STMicro v1.2 TPM, and an integrated ATI Radeon
HD 4200 with VGA compatible graphics controller 9710. This
machine runs 32-bit Ubuntu 10.04 as its Desktop OS.
9.1 Hypervisor Implementation
We implement our hypervisor by extending a multi-core ver-
sion of TrustVisor [43]. Our extension includes conﬁguration
access protection, device I/O ports, MMIO and DMA mem-
ory protection, and interrupt redirection and protections. Our
DEs are a PS/2 keyboard and a VGA-capable integrated graph-
ics controller. Speciﬁcally, the HV protects the device conﬁg-
625
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
Table 1: A comparison of hypervisor codebases.
Debug Code
C/Assembly Code Header Files
HV
TrustVisor
513
468
12556
11704
2918
2566
uration space (Section 5.3), and then securely enumerates all
devices. The HV also sets up the IOAPIC and LAPIC to de-
liver the keyboard interrupt to the CPU that runs the PE (Sec-
tion 5.4), and protects the IOAPIC and LAPIC conﬁguration
using the mechanisms described in Sections 5.1 and 5.2.
In
addition, the HV also downgrades the graphics controller to
basic VGA text mode, identiﬁes the corresponding VGA dis-
play memory region, and protects both this memory region and
the entire graphics controller MMIO region by conﬁguring the
IOMMU and Nested Page Tables. Note that we have not im-
plemented the MSI interrupt protection mechanisms and the
LAPIC x2APIC mode virtualization (Section 5.4).
Small TCB. We use the sloccount4 program to count the num-
ber of lines of source code in TrustVisor and our hypervisor
HV. As shown in Table 1, our implementation of HV adds only
1,200 lines of code to TrustVisor’s codebase, among which
around 200 lines of code are for controlling the device con-
ﬁguration space (Section 5.3), 450 lines are for the interrupt
protection mechanisms in Section 5.4, and 300 lines are for the
I/O port and memory protection mechanisms in Sections 5.1
and 5.2. Our software TCB for the hypervisor (not including
the source code for debug purposes) is about 15,500 lines of
code in total.
9.2 Program Endpoint Implementation
The PE comprises a PS/2 keyboard driver, which handles the
keyboard interrupt, receives and parses keystroke data, and a
VGA driver, which writes keystroke data to the VGA display
memory. The PE runs in CPU Ring 3. This unprivileged set-
ting allows for more efﬁcient isolation mechanisms between the
PE and the rest of the system. That is, instead of trapping every
port access from the PE (Section 5.1), the HV simply conﬁg-
ures the OS’s I/O permission bitmap in the Task State Segment
to conﬁne the PE’s access to only the DE’s I/O ports.
However, running the PE in Ring 3 makes DE driver porting
more difﬁcult. First, some sensitive I/O instructions (e.g., IN,
OUT) and some critical device-driver instructions (e.g., IRET)