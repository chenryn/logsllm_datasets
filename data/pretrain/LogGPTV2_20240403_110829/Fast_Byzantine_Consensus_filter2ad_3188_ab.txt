An execution (cid:108) is F -silent if in (cid:108) no process outside F
delivers a message from a process in F .
Deﬁnition Let a 2-step execution be an execution in which
all correct processes learn by the end of the second round. A
consensus protocol is 2-step if for every initial conﬁguration
I and every set F of at most f processes, there exists a 2-
step execution of the protocol from I that is F -silent.
Deﬁnition Given a 2-step consensus protocol, an initial
conﬁguration I is 2-step bivalent if there exist two disjoint
sets of processes F0 and F1, (|F0| ≤ f and |F1| ≤ f ) an F0-
silent 2-step execution (cid:108)0 and an F1-silent 2-step execution
(cid:108)1 such that c((cid:108)0) = 0 and c((cid:108)1) = 1.
Lemma 2. For every 2-step consensus protocol with n > 2 f
there exists a 2-step bivalent initial conﬁguration.
Proof. Consider a 2-step consensus protocol C. For each i,
0 ≤ i ≤ n, let Ii be the initial conﬁguration in which the ﬁrst
i processes propose 1, and the remaining processes propose
0. By the deﬁnition of 2-step, for every Ii and for all F
such that |F | ≤ f there exists at least one F -silent 2-step
execution (cid:108)i of P. By property CS1 of consensus, c((cid:108)0) = 0
and c((cid:108)n) = 1. Consider now F0 = {p j : 1 ≤ j ≤ f}. There
must exist two neighbor conﬁgurations Ii and Ii+1 and two
F0-silent 2-step executions (cid:108)i and (cid:108)i+1 where the value that
is learned ﬂips for the ﬁrst time from 0 to 1. Note that i ≥
f , since both (cid:108)i and (cid:108)i+1 are F0-silent and the consensus
value they reach cannot depend on the value proposed by
the silent processes in F0. We claim that one of Ii and Ii+1 is
2-step bivalent. To prove our claim, we set x = min(i+ f , n)
and deﬁne F1 as the set {p j : x + 1− f ≤ j ≤ x}. Note that,
by construction, F0 and F1 are disjoint. By the deﬁnition
of C, there must in turn exist two new 2-step executions (cid:47)i
and (cid:47)i+1 that are F1-silent. The only difference between
conﬁgurations Ii and Ii+1 is the value proposed by pi+1,
which is silent in (cid:47)i and (cid:47)i+1, since it belongs to F1. Hence,
all processes outside of F1 (at least one of which is correct)
have the same view in (cid:47)i and (cid:47)i+1, and c((cid:47)i) = c((cid:47)i+1).
To summarize, we have shown that in one of Ii and Ii+1
there exist two 2-step executions that lead to different con-
sensus values for two disjoint silent sets F0 and F1—that is,
either Ii or Ii+1 is 2-step bivalent.
Theorem 1. Any 2-step Byzantine fault-tolerant consensus
protocol requires at least 5 f + 1 processes.
Proof. We prove the theorem by contradiction, supposing
there exists a 2-step fault-tolerant consensus protocol P that
tolerates up to f Byzantine faults and requires only 5 f pro-
cesses. We partition the processes in ﬁve sets of size f . For
simplicity and without loss of generality, for the remaining
of this proof we assume that f = 1 and that our system is
comprised of ﬁve processes, p1 through p5. If f > 1 and
each set contains more than one process, the following dis-
cussion must be modiﬁed so that in each execution all the
processes in a set receive the same set of messages, and, if
they fail, they do so in the same way and at the same time.
By Lemma 2 there exist a 2-step bivalent conﬁguration Ib
and two 2-step executions (cid:108)0 and (cid:108)1, respectively F0-silent
and F1-silent, such that c((cid:108)0) = 0 and c((cid:108)1) = 1. Without
loss of generality, assume F0 = {p5} and F1 = {p1}.
We focus on the state of p1, . . . , p5 at the end of the ﬁrst
round. In particular, let si and ti denote the state of pi at the
end of the ﬁrst round of (cid:108)0 and (cid:108)1, respectively. Process pi
will be in state si (respectively, ti) at the end of any execu-
tion that produces for it the same view as (cid:108)0 (respectively,
(cid:108)1).
It is possible for some processes to be in an s state
at the end of the ﬁrst round while at the same time others
are in a t state. Consider now three new (not necessarily 2-
step) executions of P, (cid:108)s, (cid:108)t, and (cid:108)c, that at the end of their
ﬁrst round have p1 and p2 in their s states and p4 and p5 in
their t states. The state of p3 is different in the tree execu-
tions: in (cid:108)s, p3 is in state s3; in (cid:108)t, p3 is in state t3; and in
(cid:108)c, p3 crashes at the end of the ﬁrst round. Otherwise, the
three executions are very much alike: all three executions
are p3-silent from the second round on—in (cid:108)c because p3
has crashed, in (cid:108)s and (cid:108)t because p3 is slow. Further, all
processes other than p3 send and deliver the same messages
in the same order in all three executions, and all three ex-
ecution enter a period of synchrony from the second round
on, so that in each execution consensus must terminate and
some value must be learned. We consider three scenarios,
one for each execution.
(cid:108)s scenario:
In this scenario, p4 is Byzantine: it follows
the protocol correctly in its messages to all processes but
p3. In particular, the message p4 sends to p3 in round two is
consistent with p4 being in state s4, rather than t4. Further,
in the second round of (cid:108)s the message from p5 to p3 is the
last to reach p3 (and is therefore not delivered by p3), and
all other messages are delivered by p3 in the same order as
in (cid:108)0. The view of p3 at the end of the second round of (cid:108)s
is the same as in the second round of (cid:108)0; hence p3 learns 0
at the end of the second round of (cid:108)s. Since p3 is correct and
p3∼ (cid:108)0, then c((cid:108)s) = c((cid:108)0) and all correct processes in (cid:108)s
(cid:108)s
eventually learn 0.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:46 UTC from IEEE Xplore.  Restrictions apply. 
(cid:108)t scenario:
In this scenario, p2 is Byzantine: it follows
the protocol correctly in its messages to all processes but
p3. In particular, the message p2 sends to p3 in round two is
consistent with p2 being in state t2, rather than s2. Further,
in the second round of (cid:108)t the message from p1 to p3 is the
last to reach p3 (and is therefore not delivered by p3), and
all other messages are delivered by p3 in the same order as
in (cid:108)1. The view of p3 at the end of the second round of (cid:108)t
is the same as in the second round of (cid:108)1; hence p3 learns 1
at the end of the second round of (cid:108)t. Since p3 is correct and
p3∼ (cid:108)1, then c((cid:108)t) = c((cid:108)1) and all correct processes in (cid:108)t
(cid:108)t
eventually learn 1.
(cid:108)c scenario:
In this scenario, p3 has crashed, and all other
processes are correct. Since (cid:108)c is synchronous from round
two on, every correct process must eventually learn some
value.
Consider now a process (e.g. p1) which is correct in (cid:108)s,
p1∼ (cid:108)t, and therefore c((cid:108)c) =
(cid:108)t, and (cid:108)c. By construction, (cid:108)c
p1∼ (cid:108)s, and
c((cid:108)t) = 1. However, again by construction, (cid:108)c
therefore c((cid:108)c) = c((cid:108)s) = 0. Hence, p1 in (cid:108)c must learn
both 0 and 1: this contradicts CS2 and CS3 of consensus,
which together imply that a correct learner may learn only
a single value.
5 Fast Byzantine Consensus
We now present FaB Paxos, a 2-step Byzantine fault-
tolerant consensus protocol that requires 5 f + 1 processes,
matching the lower bound of Theorem 1. More precisely,
FaB Paxos requires a ≥ 5 f + 1 acceptors, p ≥ 3 f + 1 pro-
posers, and l ≥ 3 f + 1 learners; as in Paxos, each process
in FaB Paxos can play one or more of these three roles. We
describe FaB Paxos in stages: we start by describing a sim-
ple version of the protocol that relies on relatively strong
assumptions, and we proceed by progressively weakening
the assumptions and reﬁning the protocol accordingly.
5.1 The Common Case
We ﬁrst describe how FaB Paxos works in the common
case, when there is a unique correct leader, all correct ac-
ceptors agree on its identity, and the system is in a period of
synchrony.
FaB is very simple in the common case, as can be ex-
pected by a protocol that terminates in two steps. Figure 1
shows the protocol’s pseudocode. The number variable
(proposal number) indicates which process is the leader; in
the common case it will not change. The code starts exe-
cuting in the onStart methods. In the ﬁrst step, the leader
proposes its value to all acceptors (line 3). In the second
step, the acceptors accept this value (line 21) and forward it
to the learners (line 22). Learners learn a value v when they
observe that (cid:4)(a + 3 f + 1)/2(cid:5) acceptors have accepted the
value (line 24). FaB avoids digital signatures in the common
case because they are computationally expensive. Adding
signatures would not reduce the number of communication
steps nor the number of servers since FaB is already optimal
in these two measures.
Correctness We defer the full correctness proof for FaB
until we have discussed the recovery protocol in Sec-
tion 5.4—in the following we give an intuition of why the
protocol is safe in the common case.
Let correct acceptors only accept the ﬁrst value they
receive from the leader and let a value v be chosen if
(cid:4)(a + f + 1)/2(cid:5) correct acceptors have accepted it. These
two requirements are sufﬁcient to ensure CS1 and CS2:
clearly, only a proposed value may be chosen and there can
be at most one chosen value since at most one value can be
accepted by a majority of correct acceptors. The last safety
clause (CS3) requires correct learners to only learn a cho-
sen value. Since learners wait for (cid:4)(a+3 f +1)/2(cid:5) identical
reports and at most f of those come from faulty acceptors,
it follows that the value was necessarily chosen.
common case
Proving liveness
in the
straightforward—the detailed proof
case can be found in [15].
for
5.2 Fair Links and Retransmissions
is
also
the common
So far we have assumed synchrony. While this is a rea-
sonable assumption in the common case, our protocol must
also be able to handle periods of asynchrony. We weaken
our network model to consider fair asynchronous authenti-
cated links (see Section 3). Note that now consensus may
take more than two communication steps to terminate, e.g.
when all messages sent by the leader in the ﬁrst round are
dropped.
Our end-to-end retransmission policy is based on the fol-
lowing pattern: the caller sends its request repeatedly, and
the callee sends a single response every time it receives a
request. When the caller is satisﬁed by the reply, it stops re-
transmitting. We alter the pattern slightly in order to accom-
modate the leader election protocol: other processes must
be able to determine whether the leader is making progress,
and therefore the leader must make sure that they, too, re-
ceive the reply. To that end, learners report not only to the
leader but also to the other proposers (line 27). When pro-
posers receive enough acknowledgments, they are “satis-
ﬁed” and notify the leader (line 9). The leader only stops
resending when it receives (cid:4)(p + f + 1)/2(cid:5) such satisﬁed
acknowledgments (line 4). If proposers do not hear from
(cid:4)(l + f + 1)/2(cid:5) learners after some time-out, they start sus-
pecting the leader (line 14). If (cid:4)(p + f + 1)/2(cid:5) proposers
suspect the leader then a new leader is elected5. The re-
5We do not show the election protocol, because existing leader election
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:46 UTC from IEEE Xplore.  Restrictions apply. 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
l e a d e r . o n S t a r t ( ) :
/ / p r o p o s i n g ( PC i s n u l l u n l e s s
s e n d ( PROPOSE , v a l u e , number , PC )
| S a t i s f i e d | >= (cid:4)(p + f + 1)/2(cid:5)
u n t i l
r e c o v e r i n g )
t o a l l
a c c e p t o r s
p r o p o s e r . o n L e a r n e d ( ) :
L e a r n e d : = L e a r n e d u n i o n { l }
i f
from l e a r n e r
| L e a r n e d | >= (cid:4)(l + f + 1)/2(cid:5) t h e n
s e n d ( SATISFIED )
t o a l l p r o p o s e r s
l
p r o p o s e r . o n S t a r t ( ) :
w a i t
i f
f o r
t i m e o u t
| L e a r n e d | < (cid:4)(l + f + 1)/2(cid:5) t h e n
s u s p e c t
l e a d e r
t h e
p r o p o s e r . o n S a t i s f i e d ( ) :
S a t i s f i e d : = S a t i s f i e d ∪ { x}
from p r o p o s e r x
a c c e p t o r . o n P r o p o s e ( v a l u e , number , p r o g c e r t ) :
from l e a d e r
i f n o t a l r e a d y a c c e p t e d t h e n
a c c e p t e d : = ( v a l u e , number )
s e n d ( ACCEPTED, a c c e p t e d )
/ /
t o a l l
a c c e p t i n g
l e a r n e r s
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
l e a r n e r . onA cce pte d ( v a l u e , number ) :
from a c c e p t o r ac
a c c e p t e d [ ac ]
i f
s u c h t h a t
t h e r e
: = ( v a l u e , number )
a r e (cid:4)a + 3 f + 1)/2(cid:5) a c c e p t o r s x
a c c e p t e d [ x ] = = ( v a l u e , number )
l e a r n i n g
/ /
l e a r n e d : = ( v a l u e , number )
s e n d ( LEARNED)
t o a l l p r o p o s e r s
t h e n
l e a r n e r . o n S t a r t ( ) :
t i m e o u t