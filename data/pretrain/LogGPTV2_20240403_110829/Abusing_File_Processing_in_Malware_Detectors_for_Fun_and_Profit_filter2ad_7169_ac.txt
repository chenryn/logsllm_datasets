8
9
9
harm in several ways. First, for efﬁciency, detectors usually
apply only a subset of analysis techniques and/or malware
signatures to any given ﬁle type. If the detector is confused
about the type, it may apply a wrong analysis. Second, many
ﬁle types require preprocessing (e.g., unpacking) before they
can be analyzed. A confused detector may apply a wrong
preprocessing or no preprocessing at all.
tested scanners ignore the extension and attempt
File-type inference heuristics. File-type inference in mal-
ware scanners is not based on the ﬁle extension. Even if
the endhost runs Windows, which by default relies on the
extension to determine the ﬁle’s type, users may override the
defaults and use any program to open any ﬁle. Therefore,
all
to
determine the actual type of the ﬁle. The simple attack
of renaming the extension thus does not work, but neither
does the simple defense of having the scanner rewrite the
extension to match the ﬁle’s actual type (see Section VII).
To illustrate ﬁle-type inference heuristics, we use Cla-
mAV v0.95.2, a popular open-source scanner [9]. The basic
principles apply to other detectors, too, as evidenced by the
success of chameleon attacks against all of them. For most
ﬁle types, ClamAV uses ﬁxed-offset byte-string signatures,
but for certain types such as HTML or self-extracting ZIP
archives, ClamAV also uses regular-expression signatures,
described later in this section. Fixed-offset signatures are
tuples of the form (offset, magic-content, length) where offset
denotes the offset from the beginning of the ﬁle which is
to be checked for this particular ﬁle type, magic-content is
the sequence of bytes starting from offset that any ﬁle of
this type should have, and length is the length (in bytes)
of that sequence. Some of ClamAV’s ﬁle-type signatures
are shown in Table XIII in the appendix. For example,
ClamAV’s signature for ELF executables is (0, 7f454c46,
4), thus any ﬁle which has 7f454c46 as its ﬁrst four bytes
will be considered as an ELF ﬁle by ClamAV.
Algorithm 1 shows a simpliﬁed version of ClamAV’s
algorithm for inferring the ﬁle type. The order of signatures
in the list matters: once ClamAV ﬁnds a match, it does
not check the list any further. In particular, if a ﬁxed-offset
Algorithm 1 Simpliﬁed pseudocode of ClamAV’s ﬁle-type
inference algorithm.
Read ﬁrst 1024 bytes of input ﬁle into buf
for each ﬁxed-offset ﬁle-type signature s in the speciﬁed
order do
if !memcmp(buf+s.offset, s.magic-content, s.length) then
if s is a ﬁle type to ignore then
return ignore
else
return s.ﬁletype
end if
end if
end for
Check buf for
Corasick algorithm
if buf matches a regex signature r then
regex ﬁle-type signatures using Aho-
return r.ﬁletype
else
return unknown ﬁle type
end if
signature is matched, all regex signatures are ignored. This
is exploited by one of our attacks.
From version 0.96 onward, ClamAV also supports LLVM
bytecode signatures, typically used to detect polymorphic
malware in a ﬁle-format-aware manner. These signatures are
only checked for speciﬁc ﬁle types, e.g., a signature regis-
tering P DF HOOK DECLARE will only get checked
if the inferred ﬁle type is PDF. Therefore, these signatures
are extremely susceptible to chameleon attacks.
Requirements for ﬁle-type masquerade. Let A be the ﬁle’s
actual type and let B be the fake type that the attacker wants
the detector to infer. For the masquerade to be successful,
three conditions must hold for the ﬁle-type signatures SA
(for type A) and SB (for type B):
1) SA and SB do not conﬂict, i.e., there are no i, j
such that 0 ≤ i < SA.length, 0 ≤ j <
SB.length, SA.offset + i = SB.offset + j, and
85
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:44 UTC from IEEE Xplore.  Restrictions apply. 
VULNERABLE FILE-TYPE PAIRS IN CLAMAV
CHAMELEON ATTACKS FOR ABC-INFECTED MS OFFICE 97 DOC FILES.
Table V
Table IX
Real type
POSIX TAR
PNG
GIF
BMP
MP3
PNG
Fake type
mirc.ini
POSIX TAR
JPEG
JPEG
POSIX TAR
JPEG
Real type
ELF
ELF
ELF
MPEG
JPEG
BMP
Fake type
POSIX TAR
JPEG
SIS
POSIX TAR
POSIX TAR
JPEG
SA.magic-content[i] (cid:3)= SB.magic-content[j].
2) The detector matches SB before SA.
3) Destination OS or application correctly processes ﬁles
of type A containing both SA and SB.
The ﬁrst condition ensures that the same ﬁle may contain
both SA and SB, the second that the detector infers type B
for the ﬁle before it has a chance to infer type A. In our
testing, we discovered 12 ﬁle-type pairs that satisfy all three
conditions for ClamAV (Table V).
Masquerade alone is not enough. Even if the detector
infers the wrong ﬁle type, it may still detect the infection
by scanning the ﬁle as a “blob” or if the signatures asso-
ciated with the inferred type contain the virus. That said,
masquerade is a good start for exploring chameleon attacks.
CHAMELEON ATTACKS WITH EICAR-INFECTED TAR FILES.
Table VI
Actual ﬁle type
POSIX TAR
POSIX TAR
POSIX TAR
POSIX TAR
POSIX TAR
POSIX TAR
POSIX TAR
POSIX TAR
POSIX TAR
POSIX TAR
Fake ﬁle type
mirc.ini
ELF
CAB
CHM
PE
SIS
PKZIP
BZip2
WinZip
JPEG
No. of vulnerable AVs
2
11
4
4
11
6
16
6
3
3
CVE
2012-1419
2012-1420
2012-1421
2012-1422
2012-1423
2012-1424
2012-1425
2012-1426
2012-1427
2012-1428
CHAMELEON ATTACKS WITH BLISS-INFECTED ELF FILES.
Table VII
Actual ﬁle type
ELF
ELF
ELF
Fake ﬁle type
POSIX TAR
SIS
JPEG
No. of vulnerable AVs
9
9
10
CVE
2012-1429
2012-1430
2012-1431
CHAMELEON ATTACKS WITH CECILE-INFECTED PE FILES.
Table VIII
Actual ﬁle type
PE
PE
PE
PE
PE
Fake ﬁle type
Winzip
JPEG
SIS
PKLITE
LZH
No. of vulnerable AVs
4
5
4
5
5
CVE
2012-1432
2012-1433
2012-1434
2012-1435
2012-1436
Results for chameleon attacks. Our description of ﬁle-
type inference logic focuses on ClamAV because its open-
source code makes it easy to explain the heuristics. File-type
Actual ﬁle type
MS Ofﬁce
MS Ofﬁce
Fake ﬁle type
PKSFX
POSIX TAR
No. of vulnerable AVs
1
2
CVE
2012-1437
2012-1438
inference based on magic strings is by no means unique
to ClamAV, however. All tested scanners proved vulnerable
to masquerade-based chameleon attacks. The results are
summarized in Table X; the masquerade pairs for each attack
and scanner are shown in Tables VI, VII, VIII, and IX.
In all attacks, to masquerade as a particular type we used
ClamAV’s magic string if supported by ClamAV, otherwise
a string from Table XIV in the appendix.
Sample attack: making a TAR archive look like mirc.ini
We describe a sample exploit against ClamAV in which a
POSIX TAR ﬁle masquerades as a ‘mirc.ini’ ﬁle. Their ﬁle-
type signatures are disjoint and the signature of ‘mirc.ini’ is
matched before the signature of TAR. It remains to ensure
that adding the ‘mirc.ini’ signature to a TAR ﬁle does not
affect the processing of the archive by the tar program.
Table XIII says that the signature of ‘mirc.ini’ begins at
offset 0 and ends at offset 9. Thus the 0 − 9 bytes of the
input TAR ﬁle must be changed to ‘5b616c69617365735d’.
Because the initial 100 bytes contain the name of the ﬁrst
ﬁle, the ﬁrst 9 bytes of this name will change as a side
effect. This does not affect the archive’s contents and any
virus infecting any ﬁle in the archive will be free to spread.
We converted this masquerade exploit into a working
chameleon attack using the test EICAR virus [11], which
is detected by all antivirus scanners, including ClamAV. If
the ﬁrst 9 bytes of a TAR archive containing ‘eicar.com’
are directly changed to ‘5b616c69617365735d’ (‘[aliases]’
in ASCII), the tar application considers the archive cor-
rupted because the names of all member ﬁles are part of a
checksum-protected header block. To avoid this issue, it is
sufﬁcient to rename ‘eicar.com’ to ‘[aliases].com’ and put
it inside the TAR archive. ClamAV does not recognize the
ﬁle as an archive and scans it as a “blob,” looking for the
EICAR signature only at offset 0 and failing to detect it in
the middle of the ﬁle. Another approach is to use a TAR
manipulation library to change the checksum, but this is not
necessary here because the fake ﬁle-type signature ‘[aliases]’
only contains ASCII characters.
Sample attack: user-repaired archive. The application on
the endhost is often capable of repairing the modiﬁed ﬁle
(this is common in archiving programs). In some cases, it
may prompt the user whether she wants to repair the ﬁle.
Most users answer ‘Yes’ to these questions.
Given a RAR archive with an EICAR-infected ﬁle, we
changed the ﬁrst two bytes to “MZ,” which is the magic
identiﬁer for Windows executables. None of the tested
scanners detected the infection in the modiﬁed archive, yet
86
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:44 UTC from IEEE Xplore.  Restrictions apply. 
Table X
SUCCESSFUL CHAMELEON ATTACKS.
Format type
non-archive
archive
File format
ELF
PE
MS Ofﬁce 97
TAR
No. of attacks
3
5
2
10
RAR
1
CVE
2012-1429, 2012-1430, 2012-1431
2012-1432, 2012-1433, 2012-1434, 2012-1435, 2012-1436
2012-1437, 2012-1438
2012-1419, 2012-1420, 2012-1421, 2012-1422, 2012-1423, 2012-1424,
2012-1425, 2012-1426, 2012-1427, 2012-1428
2012-1443
the RAR program on the endhost repaired it and correctly
extracted the infected ﬁle. This is especially surprising
because this particular attack is anecdotally known [2].
Sample attack: exploiting regex-based ﬁle-type inference.
To recognize certain formats, ClamAV uses regular expres-
sions to match magic strings that can occur anywhere in
a ﬁle,
in addition to looking for magic strings at ﬁxed
offsets. We describe two sample attacks on this combination
of ﬁxed-offset and regex-based inference (tested against
ClamAV only and thus not counted in Table X).
ZIP archives may start with arbitrary bytes. To recog-
nize ZIP ﬁles, ClamAV uses both a ﬁxed-offset signature
‘504b0304’ at offset 0 and a regex signature ‘504b0304’
which can appear at any offset within the input ﬁle. Once
a format has been recognized according to the ﬁxed-offset
signature, ClamAV does not do any further inference—even
if there are regex matches inside the ﬁle. To exploit this, we
created a ZIP ﬁle containing a Cassini-infected executable
and prepended the string ‘504b0304’ to it. ClamAV matched
the ﬁxed-offset signature at offset 0 but failed to notice
the regex signature at offset 4, was thus unable to extract
the contents correctly, and declared the archive clean. The
destination application (unzip) ignored the initial bytes and
extracted the infected ﬁle.
The second attack exploits the fact
that ClamAV ig-
nores ﬁles of certain types (e.g., MPEG video and Ogg
Vorbis audio) because they are not affected by any major
viruses. We created a CAB archive containing a Cassini-
infected ﬁle and prepended the string ‘000001b3’ to it,
which is the ﬁxed-offset MPEG signature. ClamAV’s ﬁle-
type database contains a regex signature for CAB for-
mat—‘4d534346’ anywhere in the ﬁle, which matches CAB
ﬁles even with garbage prepended—but ClamAV does not
apply regex signatures once the ﬁxed-offset signature has
been matched. Therefore, ClamAV infers MPEG type for the
ﬁle and does not scan it, while the destination application
(cabextract) correctly extracts the infected ﬁle.
VI. WEREWOLF ATTACKS
Werewolf attacks tamper with the ﬁle’s meta-data, causing
the detector to parse it
incorrectly and/or incompletely.
In contrast, the OS or application on the endhost usually
“understands” the format much deeper (see Section VIII-A)
and processes the ﬁle correctly.
Table XI shows that every scanner we tested is vulner-
able to multiple ﬁle-parsing attacks. Table XII summarizes
the header-parsing discrepancies found by our differential
fuzzing framework. All of them result in successful were-
wolf attacks; the rest were found by manual analysis.
Below, we explain some of the attacks, using ClamAV as
an example of an open-source detector and McAfee as an
example of a closed-source detector.
Table XI
SUCCESSFUL WEREWOLF ATTACKS.
Format type
non-archive
archive
File format
ELF
CHM
ZIP
TAR
TAR
TGZ
TGZ
ZIP
No. of vulnerable AVs
12
2