memory to the private memory for almost all syscalls that
return the number of bytes processed. We separate vulnera-
bilities inside the OFL from insufﬁcient mitigations because
those vulnerabilities can be exploited without having Iago
vulnerabilities in the protected code. We also found conﬁrmed
vulnerabilities in the OFL of Asylo, which we discuss next.
C. Google Asylo
Motivated by the identiﬁed vulnerable OFLs through code
review, we take Google Asylo as a typical example of commer-
cial OFL implementations, and fuzz its OFL for Iago vulnera-
bilities. Google Asylo [9] is a recent (ﬁrst commit on GitHub
was May 3, 2018) enclave application development framework
with 32 contributors on Github (101,131 LOC). It aims to
help developers take advantage of a range of emerging TEEs,
including both software and hardware isolation technologies.
In Asylo, a subset of POSIX calls made in the enclave will
be forwarded to the untrusted side by the OFL. The forwarding
is performed by wrappers in the enclave which send syscall
parameters and copy back outputs, and handler functions that
make actual calls in the untrusted world. For some of the calls,
outputs are copied based on predeﬁned rules. For other calls,
speciﬁc codes are used to parse and copy the returned value.
We modify Emilia to intercept Asylo’s untrusted syscall
handler, which handles and replies syscall requests forwarded
by the OFL. The fuzzing loop algorithm we used in Emilia
that enumerates all target syscalls is unnecessary when fuzzing
OFL since we know the target syscall will only be invoked
once by the forwarding interface. The other reason why we do
not use strace to intercept target syscalls is that the untrusted
handler will also invoke syscalls, of which the ones forwarded
by the OFL are only a subset, e.g., when doing initialization,
logging and sending syscall output back to the enclave, the
untrusted handler would also need to rely on syscalls. To be
able to use strace, we need to modify the untrusted handler
code in a way to tell strace which syscalls should be fuzzed,
which might be redundant work as we are already modifying
the code of the untrusted handler. Therefore, we decided to
fuzz the return values directly in the untrusted handler. Since
both the untrusted handler and the OS are under the attacker’s
control in the threat model, altering the syscall return values in
the handler before sending them to the trusted part is a valid
fuzzing method.
Two vulnerabilities discovered, reported and ﬁxed: We
found two memory corruption vulnerabilities involving the
getsockopt and recvmsg syscalls. Asylo uses serialized
data to transfer syscall parameters and return values. Most
of the syscalls have a pre-deﬁned forwarding rule and are
forwarded together (all handled by a set of functions instead
of handled separately). For example,
the forwarding rule
SYSCALL_DEFINE3(read, unsigned int, fd,
\out void * [bound:count], buf, size_t,
count) means that the buf parameter is an output of the
read syscall and its size is bounded by count parameter.
So the forwarding function will only copy count bytes
from buf to the application. Asylo also handles some
syscalls speciﬁcally. In enc_untrusted_getsockopt,
it copies data to the internal optval with the length of
opt_received:
memcpy(optval, opt_received.data(),
opt_received.size());
If the untrusted handler sets the opt_received with a
size larger than the original size (the original optlen)
which is used to allocate optval inside the enclave, the
attacker could overﬂow optval. A similar vulnerability was
found in enc_untrusted_recvmsg when it tries to copy
msg→ msg_name. In this case, the same could happen to
msg.msg_namelen. Following the practice of responsible
disclosure, we contacted Google and these two vulnerabili-
ties were conﬁrmed. They have been patched by comparing
the received size with the input parameter optlen and
msg_namelen.
In Section II, we assume the OFL will only copy as much
data as it has allocated space for. If the OFL fails to do
this, some vulnerabilities could have more severe consequences
than we originally expected. Consider the following applica-
tion code:
1
2
3
4
5
optlen = 200;
char* opts = malloc(optlen);
char* buf = malloc(optlen);
getsockopt(fd, level, name, opts, &optlen);
memcpy(buf, opts, optlen);
In getsockopt, both opts and optlen are untrusted
return values provided by the malicious OS. If we assume the
OFL copies at most 200 bytes to opts, then the malicious OS
can only overwrite buf with uncertain data. However, Asylo
does not truncate the opts buffer based on the allocated size
of 200 in this case, causing the memcpy to copy all of the
malicious payload provided by the OS instead of just the ﬁrst
200 bytes.
Lack of Iago mitigation for applications: The patches
Google Asylo added to ﬁx the two vulnerabilities prevent the
malicious value-result argument from being further returned to
the application. However, in addition to the above mitigation,
there remain other missing Iago mitigations. While Asylo
12
developers also added the check for the read syscall
in
September 2020, Ayslo currently still misses checks for other
syscalls such as readlink and write. In addition, Asylo
does not perform any stateful check for the epoll_wait
syscall to protect code that is vulnerable to the epoll attack.
Because these are missing mitigations, they are only vulner-
abilities if the legacy application using Asylo misuses the
return values, so they are not considered vulnerabilities in
Asylo. However, we still plan to report them to developers
after properly documenting them.
VI. EVALUATION
We evaluate Emilia’s performance and efﬁciency at ﬁnding
Iago vulnerabilities under the different
target- and value-
search strategies outlined in Section III-C across different
applications. We are not aware of any other fuzzers that will
fuzz syscall return values to ﬁnd Iago vulnerabilities. Thus,
as a Baseline, we use Emilia in its simplest conﬁguration,
which uses the Fuzz-all target selection strategy and a value
set composed of only random and invalid values (i.e., without
valid values from the value extractor). We compare this against
Emilia using the Stateful
target-selection strategy but still
without valid values, and ﬁnally Stateful with valid values
included to evaluate the beneﬁts of the Value Extractor.
Metrics: We measure the number of unique core dumps
produced (Table 5) and syscall coverage (Table 6) and use
these as the basis for comparison.
Unique core dumps, deﬁned as a core dump with a unique
program counter and unique call stack. We note that under
the Iago vulnerability model, any sequence of fuzzed return
values that Emilia uses to trigger a core dump is a legitimate
sequence that could be returned by a malicious OS to generate
the same core dump. Thus, in principle all core dumps counted
here are real crashes with no false positives. However, we
also point out that the number of core dumps listed in this
section does not match the vulnerabilities found in Table 3, as
those have been manually analyzed and deduplicated, while a
program counter invocation and call stack do not necessarily
mean the root cause of the crash is unique. In addition, some
of the core dumps attributed here to applications may actually
occur in libraries (like glibc), which we don’t attribute to the
application itself in Table 3. As recommended by [22], we run
each experiment 30 times and apply the Mann Whitney U-test
for statistical hypothesis testing to verify the signiﬁcance of
the results.
Experimental Setup: We tested with 5 applications from our
analyzed application list in section IV-A: OpenSSH, Lighttpd,
Memcached, Redis and Curl. All experiments were run on
a machine equipped with 8 Intel 2.20GHz Xeon cores and
4GB RAM. The software environment was Ubuntu-18.04 with
glibc-2.27.
A. Evaluation of Fuzzing Strategies
One property of the Stateful strategy is that it is able to
selectively target syscalls that depend on a preceding syscall. In
general, this allows the Stateful strategy to target more syscalls
than the Fuzz-all strategy, which can only target syscalls (and
all following syscalls) that appear in the vanilla sequence. As
a result, the Fuzz-all strategy may run out of targets before
the Stateful strategy does. To make the strategies comparable,
we execute the Stateful strategy until it exhausts all targets,
and then execute the Fuzz-all strategy for the same amount of
time by resetting skip_count so that it will return to the
beginning of the vanilla sequence. While this causes it to fuzz
previously fuzzed targets, we note it fuzzes them with different
random values. Since the number of targets is application
dependent, each application is fuzzed for a different length
of time.
We tabulate both the number of core dumps and syscalls
generated by Emilia’s different fuzzing strategies in Tables 5
and 6 respectively. We also show the number of core dumps
found as a function of time in Figure 2. The tables report the
Min, Max, Median, Mean, 95% upper and lower conﬁdence
intervals, Variance and p-values over 30 runs. Table 5 gives
the length of time the application was executed for in all
conﬁgurations and Table 6 gives the number of syscall invo-
cations in the vanilla sequence. All p-values are calculated by
comparing the conﬁguration against the Stateful (without valid
values) conﬁguration. All p-values in our experiments were
small, indicating that the results are statistically signiﬁcant and
conclusions can be drawn.
We ﬁrst compare the Stateful
target-selection strategy
against the Fuzz-all strategy used in the Baseline. We ﬁnd that
the Stateful (w/o valid) strategy always achieves more syscall
coverage and produces more core dumps than the Baseline.
This is because Stateful method is able to explicitly target
newly found syscalls by replaying the previously fuzzed syscall
return values that the new syscall depends on. This is partially
attributed to the fact that the Fuzz-all strategy used in the
baseline is unable to trigger some crashes due to the limitations
discussed in Section III-C1. For example,
in Memcached,
it fails to trigger memory corruption in fprintf, because
an “extra” syscall between the target syscall and the unsafe
use of the fuzzed return values causes the application to
terminate prematurely. The Stateful strategy is able to target
the appropriate syscall but leave the extra syscall unfuzzed and
thus ﬁnd the vulnerability.
We also observe that the Fuzz-all strategy wastes time as
it is more likely to trigger inﬁnite loops in the application, as
explained in Section III-C1. To see why, consider a sequence
of syscalls S1, S2, ...Sn, where Sn causes an inﬁnite loop and
timeout when fuzzed. Since Stateful targets individual syscalls
for fuzzing and can detect which ones cause an inﬁnite loop, it
identiﬁes Sn as generating an inﬁnite loop after 10 invocations
and exits. Fuzz-all on the other hand can’t detect the inﬁnite
loop and must wait for a timeout to expire. This is further
compounded by the fact that Sn will generate an inﬁnite loop
any time Fuzz-all targets a syscall < Sn, thus causing multiple
timeouts.
However, we ﬁnd that for short runs, the Stateful strategy
may ﬁnd fewer vulnerabilities than the baseline method. As
demonstrated by Openssh, Redis and Lighttpd in Figure 2, the
Fuzz-all strategy is initially able to ﬁnd more vulnerabilities
than the Stateful strategy because it is able to quickly target
all syscalls in the vanilla sequence. However, once the Stateful
strategy is able to discover and fuzz new syscalls that the
simpler Fuzz-all is not able to, it will catch up and overtake
Fuzz-all. This demonstrates a trade-off in fuzzing speed and
completeness between the two strategies.
13
Application
Method
OpenSSH
(20 hours)
Redis
(4 hours)
Curl
(4 hours)
Lighttpd
(6 hours)
Memcached
(4 hours)
Baseline
Stateful (w/o valid)
Stateful
Baseline
Stateful (w/o valid)
Stateful
Baseline
Stateful (w/o valid)
Stateful
Baseline
Stateful (w/o valid)
Stateful
Baseline
Stateful (w/o valid)
Stateful
Min Max Median Mean
17.50
21.30
26.07
9.13
17.26
19.80
3.23
4.60
4.90
18.73
22.60
23.67
5.56
41.20
54.80
13
17
22
7
15
16
2
4
3
16
19
20
4
36
47
26
25
30
11
20
24
4
6
7
25
25
26
7
51
60
17
21
26
9
17
20
3
4
5
18
22
24
6
40
55
95% CI lower
15
20
25
9
17
19
3
4
4
18
22
23
5
38
54
95% CI upper
19
22
27
9
18
21
4
5
5
19
24
24
6
43
57
Var
9.98
3.61
3.26
0.65
1.13
3.69
0.38
0.44
1.36
4.06
2.97
2.02
0.65
13.89
11.03
p-value
1.70E-06
N/A
2.09E-10
5.22E-12
N/A
2.13E-07
2.40E-09
N/A
1.26E-01
1.63E-08
N/A
9.13E-03
9.24E-12
N/A
2.31E-11
Table 5: Number of core dumps. p-values are calculated by comparing with the Stateful (w/o valid) setting. We also tabulate the
range, averages, conﬁdence intervals and variance
Application
Method
OpenSSH
(389)
Redis
(94)
Curl
(59)
Lighttpd
(194)
Memcached
(152)
Baseline
Stateful (w/o valid)
Stateful
Baseline
Stateful (w/o valid)
Stateful
Baseline
Stateful (w/o valid)
Stateful
Baseline
Stateful (w/o valid)
Stateful