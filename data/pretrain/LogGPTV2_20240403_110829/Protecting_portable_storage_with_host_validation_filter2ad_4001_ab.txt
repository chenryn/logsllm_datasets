Figure 2: Overview of the Kells architecture.
tegral to the design: any host integrity measurement solution (e.g.,
Pioneer [10]) can be used.
Kells diverges substantially from past attempts at securing ﬁxed
and mobile storage. In using the mobile storage device as an au-
tonomous trusted computing base (TCB), we extend the notion of
self-protecting storage [2, 6] to encompass a system that actively
vets the devices that make use of it. In so doing, we provide a path
to enjoying the convenience of now-ubiquitous portable storage in
a safe manner. Our contributions are as follows:
• We identify system designs and protocols that support portable
storage device validation of an untrusted host’s initial and on-
going integrity state. To our knowledge, this is the ﬁrst use
of such a system by a dedicated portable storage device.
• We describe and benchmark our proof of concept Kells sys-
tem built on a DevKit 8000 board running embedded Linux
and connected to a modiﬁed Linux host. We empirically
evaluate the performance of the Kells device. These experi-
ments indicate that the overheads associated with host valida-
tion are minimal, showing a worst case throughput overhead
of 1.22% for read operations and 2.78% for writes.
In our full technical report [1], we also reason about the security
properties of Kells using the LS2 logic [3] and prove that the stor-
age device can only be accessed by hosts whose integrity state is
valid (within a security parameter ∆t).
The remainder of this abstract describes the operation of Kells as
well as its architecture, implementation, and evalation.
2. DESIGN AND IMPLEMENTATION
The Kells architecture is shown in Figure 2. We modify three
major components of the system in order to use Kells: the interface
between the host and the device, the storage device itself, and the
host’s operating system.
USB drive plugged inHost request for trusted partition?Host veriﬁcation processMount public partitionMount trusted partition (if needed)YesNoPassFailRevalidation Timeoutpolicystoretrusted storagepublic storageUSB InterfaceTPMdriverattestationdaemonIMAattestationsremote updatesHostDevice6522.3 Modiﬁcations to Host
A host must be capable of recognizing that the Kells device is
trusted and sending information to it differs from a standard USB
mass storage transaction. We made some small changes to the USB
driver, deﬁning a ﬂag in the USB device repository allowing the
Kells device to be recognized. Because the host must interact with
its trusted hardware and perform some logic, we designed an attes-
tation daemon that runs in the host’s user space. While it may be
desirable to reduce the number of additional programs that need to
run, a major design consideration in the kernel is separating policy
from mechanism. The attestation daemon both retrieves boot-time
attestations using the Linux Integrity Measurement Architecture
(IMA) [8] and can act as an interface to any runtime monitoring
systems on the host.
3. ATTESTING HOST INTEGRITY
In order for a host connecting to the Kells device to be trustwor-
thy, it must be installed and maintained in a manner that protects
its integrity. A way to ensure this is by provisioning a secure ker-
nel and supporting operating system, from which measurements of
system integrity can be made and transferred to Kells. The host
system maintainer must thus re-measure the system when it is in-
stalled or when measurable components are updated. Solutions for
ensuring a trusted base installation include the use of a root of trust
installer (ROTI) [12], which establishes a system whose integrity
can be traced back to the installation media.
Our full technical report describes the attestation protocol in de-
tail. Brieﬂy, we measure the hardware and software using IMA,
based on the Kells device being placed in measurement mode. Sub-
sequent attestations use this measurement list for validating the
system state; this list can also be remotely disseminated. A por-
tion of non-volatile memory within Kells records this information,
which includes a unique identity for the host, the list of measure-
ments that are associated with the host (for attestation veriﬁcation),
and policy-speciﬁc information, such as whether the host being at-
tached to, should allow administrative access.
We provide a framework for supporting runtime integrity mon-
itoring, but we do not impose constraints on what system is to be
used. The runtime monitor can provide information to the storage
device as to the state of the system, with responses that represent
good and bad system states listed as part of the host policy. For
example, if the host system uses the Patagonix system for detect-
ing covertly-executing rootkits [4], it could provide a response to
the disk on being queried as to whether the system has any hid-
den binaries currently executing. Solutions that use the TPM may
also be appropriate for runtime monitoring. Our design considers
attestations from a runtime monitor to be delivered in a consistent,
periodic manner; one may think of them as representing a security
heartbeat. The period of the heartbeat is ﬁxed by the device and
transmitted to the host as part of the device enumeration process,
when other parameters are conﬁgured.
4. EVALUATION
We performed a series of experiments aimed at characterizing
the performance of Kells in realistic environments. All experiments
were performed on a Dell Latitude E6400 laptop running Ubuntu
8.04 with the Linux 2.6.28.15 kernel. The laptop TPM performs
a single quote in 880 msec. The Kells device was implemented
using a DevKit 8000 development board that is largely a clone of
the popular BeagleBoard.
Our experiments sought to determine the overhead of read op-
erations. Each test read a single 517 MB ﬁle, the size of a large
video, from the Kells device. We varied the security parameter
∆t (the periodicity of the host integrity re-validation) over subse-
quent experiments, and created a baseline by performing the read
test with a unmodiﬁed DevKit 8000 USB device and Linux kernel.
All statistics are calculated from an average of 5 runs of each test.
Read operation performance was largely unaffected by the val-
idation process, as the host preemptively creates validation quotes
and delivers them to the device at or about the time a new one is
needed (just prior to a previous attestation becoming stale). Thus,
the validation process is mostly hidden by normal read operations.
Performance, however, does degrade slightly as the validation pro-
cess occurs more frequently. At a 1 second reattestation interval,
throughput is reduced by only 1.2%, and as little as 0.2% at 10 sec-
onds. This overhead is due largely to overheads associated with
receiving and validating the integrity proofs (as large as 100KB).
Writes were performed over a 200 MB ﬁle. These are sub-
stantially slower on ﬂash devices because of the underlying mem-
ory materials and structure. Here again, the write operations were
largely unaffected by the presence of host validation, leading to a
little less than 3% overhead at a 1 second reattestation inverval and
just under 1% at a 10 second interval.
5. REFERENCES
[1] K. Butler, S. McLaughlin, and P. McDaniel. Kells: A Protection
Framework for Portable Data. Technical Report NAS-TR-0134-2010,
Network and Security Research Center, Pennsylvania State
University, June 2010.
[2] K. R. B. Butler, S. McLaughlin, and P. D. McDaniel.
Rootkit-Resistant Disks. In Proceedings of the 15th ACM Conference
on Computer and Communications Security (CCS’08), Alexandria,
VA, USA, Oct. 2008.
[3] A. Datta, J. Franklin, D. Garg, and D. Kaynar. A Logic of Secure
Systems and its Application to Trusted Computing. In Proceedings of
the 30th IEEE Symposium on Security and Privacy, Oakland, CA,
USA, May 2009.
[4] L. Litty, H. A. Lagar-Cavilla, and D. Lie. Hypervisor Support for
Identifying Covertly Executing Binaries. In Proceedings of the 17th
USENIX Security Symposium, pages 243–258, San Jose, CA, USA,
Aug. 2008.
[5] Microsoft. BitLocker and BitLocker to Go. http://technet.
microsoft.com/en-us/windows/dd408739.aspx, Jan.
2009.
[6] A. G. Pennington, J. D. Strunk, J. L. Grifﬁn, et al. Storage-based
Intrusion Detection: Watching storage activity for suspicious
behavior. In Proceedings of the 12th USENIX Security Symposium,
Washington, DC, USA, Aug. 2003.
[7] P. Porras, H. Saidi, and V. Yegneswaran. An Analysis of Conﬁcker’s
Logic and Rendezvous Points. Technical report, SRI Computer
Science Laboratory, Mar. 2009.
[8] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and
Implementation of a TCG-based Integrity Measurement
Architecture. In Proceedings of the 13th USENIX Security
Symposium, San Diego, CA, USA, Aug. 2004.
[9] Seagate Technology LLC. Self-Encrypting Hard Disk Drives in the
Data Center. Technology Paper TP583.1-0711US, Nov. 2007.
[10] A. Seshadri, M. Luk, E. Shi, et al. Pioneer: verifying code integrity
and enforcing untampered code execution on legacy systems. In
Proceedings of ACM SOSP, Brighton, UK, 2005.
[11] N. Shachtman. Under Worm Assault, Military Bans Disks, USB
Drives. Wired, Nov. 2008.
[12] L. St. Clair, J. Schiffman, T. Jaeger, and P. McDaniel. Establishing
and Sustaining System Integrity via Root of Trust Installation. In
ACSAC, Miami, FL, USA, Dec. 2007.
[13] TCG. TPM Main: Part 1 - Design Principles. Speciﬁcation Version
1.2, Level 2 Revision 103. TCG, July 2007.
[14] TCG. TCG Storage Security Subsystem Class: Opal. Speciﬁcation
Version 1.0, Revision 1.0. Trusted Computing Group, Jan. 2009.
653