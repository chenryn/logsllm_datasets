veriﬁcation is the function, DECRYPTSIG11, summarized
in Algorithm 1. At a high level, DECRYPTSIG takes, as
input, a 2048-bit signature and the public key modulus,
and returns the decrypted hash for veriﬁcation. For ef-
ﬁcient modular exponentiation, DECRYPTSIG uses the
function MONTMULT to perform Montgomery multipli-
cation operations [38,44]. MONTMULT performs Mont-
gomery multiplication of two inputs x and y with respect
to the Montgomery radix, r [38] and modulus N as fol-
lows: MONTMULT(x, y, N, r−1) ← x· y· r−1 mod N.
In addition to the use of MONTMULT, DECRYPTSIG
also invokes the function, FLIPENDIANNESS12, multiple
times at lines 4, 14 and 21 of Algorithm 1 to reverse the
contents of memory buffers. FLIPENDIANNESS is re-
quired in this implementation of DECRYPTSIG because
the inputs to DECRYPTSIG are big-endian while MONT-
MULT operates on little-endian inputs. For reference, we
outline the implementation of FLIPENDIANNESS in Al-
gorithm 2 in Appendix A.2.
5.2 Attack Strategy and Cryptanalysis
Attack overview. The overall goal of the attack is to de-
liver a fault during the execution of DECRYPTSIG such
that the output of DECRYPTSIG results in the desired
hash H(CA) of our attack code CA. This operation can be
described by Equation 2, where the attacker has to sup-
(cid:48)
ply an attack signature S
A , and fault the execution of DE-
CRYPTSIG at runtime so that DECRYPTSIG outputs the
intended hash H(CA). For comparison, we also describe
the typical decryption operation of the original signature
S to the hash of the original code blob, C in Equation 3.
f ault−−−→ H(CA) (2)
(3)
Attack : DECRYPTSIG(S
Original : DECRYPTSIG(S, e, N) −−→ H(C)
10This is a vendor-speciﬁc interface that allows the non-secure world
(cid:48)
A , e, N)
to communicate with the Trustzone secure world.
11DECRYPTSIG loads at memory address 0xFE8643C0.
12FLIPENDIANNESS loads at memory address 0xFE868B20
1066    26th USENIX Security Symposium
USENIX Association
For a successful attack, we need to address two ques-
tions: (a) At which portion of the runtime execution of
(cid:48)
A , e, N) do we inject the fault? (b) How
DECRYPTSIG(S
(cid:48)
do we craft S
A to be used as an input to DECRYPTSIG?
5.2.1 Where to inject the runtime fault?
Target code of interest. The fault should target op-
erations that manipulate the input modulus N, and ide-
ally before the beginning of the modular exponentiation
operation. A good candidate is the use of the function
FLIPENDIANNESS at Line 4 of Algorithm 1. From ex-
perimentation, we ﬁnd that FLIPENDIANNESS is espe-
cially susceptible to CLKSCREW faults. We observe that
N can be corrupted to a predictable NA as follows:
NA,rev
f ault←−−− FLIPENDIANNESS(N)
Since NA,rev is NA in reverse byte order, for brevity, we
refer to NA,rev as NA for the rest of the section.
Factorizable NA. Besides being able to fault N to NA,
another requirement is that NA must be factorizable. Re-
call that the security of the RSA cryptosystem depends
on the computational infeasibility of factorizing the mod-
ulus N into its two prime factors, p and q [21]. This
means that with the factors of NA, we can derive the
corresponding keypair {NA, dA, e} using the Carmichael
function in the procedure that is described in Razavi et
al.’s work [50]. With this keypair {NA, dA, e}, the hash
of the attack code CA can then be signed to obtain the
signature of the attack code, SA ← (H(CA))dA mod NA.
We expect the faulted NA to be likely factorizable due
to two reasons: (a) NA is likely a composite number of
more than two prime factors, and (b) some of these fac-
tors are small. With sufﬁciently small factors of up to
60 bits, we use Pollard’s ρ algorithm to factorize NA
and ﬁnd them [42]. For bigger factors, we leverage
the Lenstra’s Elliptic Curve factorization Method (ECM)
that has been observed to factor up to 270 bits [39]. Note
that all we need for the attack is to ﬁnd a single NA that
is factorizable and reliably reproducible by the fault.
5.2.2 How to craft the attack signature S
(cid:48)
A ?
Before we begin the cryptanalysis, we note that the attack
(cid:48)
A (an input to DECRYPTSIG) is not the signed
signature S
hash of the attack code, SA (private-key encryption of the
(cid:48)
A instead of SA primarily due to the
H(CA)). We use S
pecularities of our implementation. Speciﬁcally, this is
because the operations that follow the injection of the
fault also use the parameter values derived before the
point of injected fault. Next, we sketch the cryptanal-
ysis of delivering a fault to DECRYPTSIG to show how
(cid:48)
the desired S
A is not
trivially derived the same way as SA.
(cid:48)
A is derived, and demonstrate why S
(cid:48)
Cryptanalysis. The goal is to derive S
A (as input to
DECRYPTSIG) given an expected corrupted modulus NA,
the original vendor’s modulus N, and the signature of the
attack code, SA. For brevity, all line references in this
section refer to Algorithm 1. The key observation is that
after being derived from FLIPENDIANNESS at Line 4,
Nrev is next used by MONTMULT at Line 15. Line 15
marks the beginning of the modular exponentiation of
the input signature, and thus, we focus our analysis here.
(cid:48)
A , e, N) to result
in H(CA) as dictated by Equation 2, we begin by ana-
lyzing the invocation of DECRYPTSIG that will lead to
H(CA). If we were to run DECRYPTSIG with inputs SA
and NA, DECRYPTSIG(SA, e, NA) should output H(CA).
Based on the analysis of this invocation of DECRYPTSIG,
we can then characterize the output, xdesired, of the oper-
ation at Line 15 of DECRYPTSIG(SA, e, NA) with Equa-
tion 4. We note that the modular inverse of r is computed
based on NA at Line 5, and so we denote this as r−1
A .
First, since we want DECRYPTSIG(S
xdesired ← SA · (r2 mod NA)· r−1
(4)
Next, suppose our CLKSCREW fault is delivered in
(cid:48)
the operation DECRYPTSIG(S
A , e, N) such that N is cor-
rupted to NA at Line 4. We note that while N is faulted
to NA at Line 4, subsequent instructions continue to in-
directly use the original modulus N because R is derived
based on the uncorrupted modulus N at Line 3. Herein
(cid:48)
lies the complication. The attack signature S
A passed
into DECRYPTSIG gets converted to the Montgomery
representation at Line 15, where both moduli are used:
A mod NA
x f ault ← MONTMULT(S
We can then characterize the output, x f ault, of
the same Line 15 of a faulted
(cid:48)
A , r2 mod N, NA, r−1
A )
the operation at
(cid:48)
A , e, N) as follows:
DECRYPTSIG(S
(cid:48)
A · (r2 mod N)· r−1
x f ault ← S
(5)
By equating x f ault = xdesired (i.e. equating results from
(cid:48)
A for
A and xdesired, such that:
(4) and (5)), we can reduce the problem to ﬁnding S
constants K = (r2 mod N)· r−1
A mod NA
(cid:48)
A · K mod NA ≡ xdesired mod NA
S
Finally, subject to the condition that xdesired is divis-
ible13 by the greatest common divisor of K and NA, de-
noted as gcd(K, NA), we use the Extended Euclidean Al-
(cid:48)
gorithm14 to solve for the attack signature S
A , since there
(cid:48)
A · K + y· NA = xdesired. In
exists a constant y such that S
(cid:48)
summary, we show that the attack signature S
A (to be
(cid:48)
used as an input to DECRYPTSIG(S
A , e, N)) can be de-
rived from N, NA and SA.
13We empirically observe that gcd(K, NA) = 1 in our experiments,
thus making xdesired trivially divisible by gcd(K, NA) for our purpose.
14The Extended Euclidean Algorithm is commonly used to compute,
besides the greatest common divisor of two integers a and b, the inte-
gers x and y where ax + by = gcd(a, b).
USENIX Association
26th USENIX Security Symposium    1067
5.3 Timing Proﬁling
Each trustlet app ﬁle on the Nexus 6 device comes with
a certiﬁcate chain of four RSA certiﬁcates (and signa-
tures). Loading an app into Trustzone requires validating
the signatures of all four certiﬁcates [49]. By incremen-
tally corrupting each certiﬁcate and then invoking the
loading of the app with the corrupted chain, we measure
the operation of validating one certiﬁcate to take about
270 million cycles on average. We extract the target
function FLIPENDIANNESS from the binary ﬁrmware
image and execute it in the non-secure environment to
measure its length of execution. We proﬁle its invoca-
tion on a 256-byte buffer (the size of the 2048-bit RSA
modulus) to take on average 65k cycles.
To show the feasibility of our attack, we choose to at-
tack the validation of the fourth and ﬁnal certiﬁcate in
the chain. This requires a very precise fault to be in-
duced within in a 65k-cycle-long targeted period within
an entire chain validation operation that takes 270 mil-
lion x 4 = 1.08 billion cycles, a duration that is four or-
ders of magnitude longer than the targeted period. Due to
the degree of precision needed, it is thus crucial to ﬁnd a
way to determine a reliable time anchor (see Steps 2 / 3
in § 3.5) to guide the delivery of the fault.
Cache proﬁling To determine approximately which re-
gion of code is being executed during the chain vali-
dation at any point in time, we leverage side-channel-
based cache proﬁling attacks that operate across cores.
Since we are proﬁling code execution within Trustzone
in a separate core, we use recent advances in the cross-
core instruction- and data-based Prime+Probe15 cache
attack techniques [31,40,62]. We observe that the cross-
core proﬁling of the instruction-cache usage of the vic-
tim thread is more reliable than that of the data-cache
counterpart. As such, we adapt the instruction-based
Prime+Probe cache attack for our proﬁling stage.
Within the victim code, we ﬁrst identify the code ad-
dress we want to monitor, and then compute the set
of memory addresses that is congruent to the cache set
of our monitored code address. Since we are doing
instruction-based cache proﬁling, we need to rely on
executing instructions instead of memory read opera-
tions. We implement a loop within the fault injection
thread to continuously execute dynamically generated
dummy instructions in the cache-set-congruent memory
addresses (the Prime step) and then timing the execu-
tion of these instructions (the Probe step) using the clock
cycle counter. We determine a threshold for the cycle
15Another prevalent class of cross-core cache attacks is the
Flush+Reload [61] cache attacks. We cannot use the Flush+Reload
technique to proﬁle Trustzone execution because Flush+Reload re-
quires being able to map addresses that are shared between Trustzone
and the non-secure environment. Trustzone, by design, prohibits that.
Figure 11: Cache eviction proﬁle snapshot with cache-
based features.
count to indicate that the associated cache lines have
been evicted. The eviction patterns of the monitored
cache set provides an indication that the monitored code
address has been executed.
ATTACK ENABLER (TZ-SPECIFIC) #6: Memory ac-
cesses from the non-secure world can evict cache lines
used by Trustzone code, thereby enabling Prime+Probe-
style execution proﬁling of Trustzone code.
While we opt to use the Prime+Probe cache pro-
ﬁling strategy in our attack, there are alternate side-
channel-based proﬁling techniques that can also be used
to achieve the same effect. Other microarchitectural
side channels like branch predictors, pipeline contention,
prefetchers, and even voltage and frequency side chan-
nels can also conceivably be leveraged to proﬁle the vic-
tim execution state. Thus, more broadly speaking, the at-
tack enabler #6 is the presence of microarchitectural side
channels that allows us to proﬁle code for ﬁring faults.
App-speciﬁc timing feature. For our timing anchor, we
want a technique that is more ﬁne-grained. We devise a
novel technique that uses the features derived from the
eviction timing to create a proxy for proﬁling program
phase behavior. First, we maintain a global increment-
ing count variable as an approximate time counter in the
loop. Then, using this counter, we track the duration be-
tween consecutive cache set evictions detected by our
Prime+Probe proﬁling. By treating this series of evic-
tion gap duration values, g, as a time-series stream, we
can approximate the execution proﬁle of the chain vali-
dation code running within Trustzone.
We plot a snapshot of the cache proﬁle characterizing
the validation of the fourth and ﬁnal certiﬁcate in Fig-
ure 11. We observe that the beginning of each certiﬁ-
cation validation is preceded by a large spike of up to
75,000 in the g values followed by a secondary smaller
spike. From experimentation, we found that FLIPENDI-
ANNESS runs after the second spike. Based on this obser-
1068    26th USENIX Security Symposium
USENIX Association
Sample ID over time‘Gap duration’, g valuesfeat_cache1feat_cache2k1k2Figure 12: Observed faults using the timing features.
Figure 13: Variability of faulted byte(s) position.
vation, we change the proﬁling stage of the attack thread
to track two hand-crafted timing features to characterize
the instantaneous state of victim thread execution.
Timing anchor. We annotate the two timing features
on the cache proﬁle plot in Figure 11. The ﬁrst feature,