     $request));
        $plugin_info = @unserialize ($response ['body']);
        if (isset ($plugin_info->ratings)) {
现在来看最初的目标插件，它在调用unserialize()之后做的第一件事是检查名为`rating`的属性是否存在，那么这个日志
**并不是我当初注意的第三方插件产生的** ！
### 0x06 POPping WordPress出现的意外
* * *
对WordPress代码进行一次快速grep，对于上面提到的HTTP URL，显示该请求是由`wp-admin/includes/plugin-install.php`文件中的WordPress插件API发送的。浏览代码时并不清楚反序列化的payload
object是如何使用的，或者切确地说这个HTTP请求以及随后对unserialize()函数的调用是从哪里触发的。我继续点击WordPress管理界面，发现日志是从`主控制面板`、`更新页面`和`插件页面`生成的。重新加载这些页面使我能够触发目标HTTP请求，并向unserialize()函数提供任意数据。
我记录了一些WordPress发出的HTTP请求并把它们发送到`真正的api.wordpress.org`以获取实例响应，结果响应的是`stdClass`类型的序列化对象，更重要的是示例响应给了我一个预期中WordPress会收到的属性的确切列表，其中每个属性都有可能用于操控某些核心WordPress代码的执行流程。我根据捕获到的真实响应修改了`伪造的api.wordpress.org`用来返回序列化对象。以下是这个的一个简单例子：
    name = "PluginName";
        $payloadObject->slug = "PluginSlug";
        $payloadObject->version = "PluginVersion";
        print serialize($payloadObject);
我开始修改这些对象的属性并刷新相关的WordPress页面，来测试修改内容对结果页面有何影响（如果有的话）。在有些情况下WordPress使用了HTML编码来防止HTML/JavaScript注入，但是最终我发现了几个可以插入任意HTML和JavaScript的字段。请记住这个情况是发生在管理界面内，如果管理员登录并浏览“更新”或“插件”页面，攻击者就能够对WordPress站点执行`MitM攻击`或`DNS欺骗`，也可能会利用此漏洞`实现远程代码执行`。
在快速尝试一些JavaScript和Python脚本之后我有了假设漏洞的运用证明。这个PoC会导致WordPress管理界面中的“更新和插件”菜单旁显示一个徽章，表示有更新可用（当然即使没有也会显示），这可能会诱导管理员点击这些链接来检查并可能安装这些更新。如果有管理员点击任一链接，那么一个JavaScript
payload被注入到该页面中，然后就添加了一个新的管理员账户并将一个基本PHP命令shell注入到现行的WordPress主题的index.php中。
在大多数情况下这种PoC攻击足以实现代码执行，但是我也发现了我可以使用类似方式向WordPress发送一个错误的插件更新来攻击WordPress管理界面的点击更新功能，如果有管理员点击了更新按钮，就会导致下载一个假插件更新的ZIP文件并将其提取至服务器上。
### 0x07 解答
深入挖掘这一点，我注意到 **即使没有登录**
，WordPress也会发送了类似对api.wordpress.org的HTTP请求，我开始对WordPress进行代码审计来了解其中发生了什么，以及它是否可能遭受了类似攻击。我在`wp-includes/update.php文件`中发现了`wp_schedule_update_checks()`函数。
    function wp_schedule_update_checks() {
        if ( ! wp_next_scheduled( 'wp_version_check' ) && ! wp_installing() )
            wp_schedule_event(time(), 'twicedaily', 'wp_version_check');
        if ( ! wp_next_scheduled( 'wp_update_plugins' ) && ! wp_installing() )
            wp_schedule_event(time(), 'twicedaily', 'wp_update_plugins');
        if ( ! wp_next_scheduled( 'wp_update_themes' ) && ! wp_installing() )
            wp_schedule_event(time(), 'twicedaily', 'wp_update_themes');
    }
WordPress会每天两次调用`wp_version_check()`函数、`wp_update_plugins()函数`和`wp_update_themes()函数`。默认情况下，这些更新检查也可以通过`wp-cron.php`发送HTTP请求来触发。于是我开始手动审计这些函数，并修改代码来记录各种数据以及分支和函数调用的结果，查看发生了什么，函数是否根据来自api.wordpress.org的响应而做出了任何危险的操作。  
最终我设法伪造了来自`api.wordpress.org`的几个响应，来触发对`$upgrader->upgrade()`的调用，然而以前的伪造插件更新攻击在这里似乎不起作用，之后我在`should_update()`方法中发现了以下注释：
    /**
         * [...Snipped...]
         *
         * Generally speaking, plugins, themes, and major core versions are not updated
         * by default, while translations and minor and development versions for core
         * are updated by default.
         *
         * [...Snipped...]
         */
事实证明这是WordPress试图升级`内置Hello
Dolly插件`的翻译，我一直试图从`downloads.wordpress.org`下载hello-dolly-1.6-en_GB.zip，而不是请求我伪造的插件zip文件。我下载了原始文件，添加了一个shell.php文件，并将其托管在我的`虚假downloads.wordpress.org`网站上。于是下一次我访问了`wp-cron.php`，WordPress **下载了伪造的更新并解压** 到`wp-content/languages/plugins/`，其中包括
**shell** 等等。
攻击者既然可以对WordPress网站执行`MitM攻击`或`DNS欺骗`，那么就可以针对自动更新功能执行 **零交互攻击**
，并将恶意脚本写入服务器。当然这不一定是一次简单的攻击，但这仍然不可能！
WordPress团队意识到这些问题，但是他们的立场似乎是，如果HTTPS启用失败，为了允许在具有旧或损坏的SSL堆栈系统上运行的WordPress网站进行更新，WordPress将会故意降级为HTTP连接（或者安装恶意代码）……
### 0x08 注意事项/陷阱
当请求更新详细信息和更新存档时，WordPress会尝试首先通过HTTPS连接到`api.wordpress.org`和`downloads.wordpress.org`，但是如果由于任何原因导致
**HTTPS启用失败** ，则使用明文HTTP连接。  
如果WordPress的PHP脚本属于不同的用户，那么WordPress将默认无法自动更新（因此不容易受到上述攻击），例如index.php为用户foo拥有，但WordPress是在用户www-data权限下运行的。