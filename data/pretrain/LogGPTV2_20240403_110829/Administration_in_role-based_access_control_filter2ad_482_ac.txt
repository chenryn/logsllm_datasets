4.3 Economy of Mechanism
REQUIREMENT 6. Using RBAC to administer RBAC.
The basic idea of economy mechanism is to keep the design
as simple and small as possible. ARBAC97 and SARBAC vio-
late this principle as they all introduce several additional admin-
istrative relations with sophisticated semantics. We observe that
RBAC systems are used to manage permissions for accessing ob-
jects. RBAC systems themselves in turn introduce additional ob-
jects, such as users, roles, constraints, the user-role assignment re-
lation, the permission-role assignment relation, and so on. RBAC
⇒ and → represent an immediate predecessor relation and a non-immediate partial order relation, respectively.
ProjManager (PM), Engineer (Eng), Quality Assurance (QA), and Architect (Arc)
Figure 2: Adding and deleting a role from RH
administration is about managing operations that change these ob-
jects. Based on the principle of economy of mechanism, it makes
sense to reuse the mechanisms for managing permissions about ac-
cessing objects for managing the administrative operations, rather
than introducing additional relations. We call this approach “Using
RBAC to administer RBAC”.
We point out that ARBAC97 explicitly mentions “using RBAC
to administer RBAC” as a design goal. However, the interpreta-
tion of “using RBAC to administer RBAC” is different from ours.
In ARBAC97, this means that administrative powers are given to
administrative roles rather than administrative users directly. How-
ever, the relationship between administrative powers and admin-
istrative roles are encoded in newly introduced relations. On the
other hand, Oracle handles this quite well by using the same mech-
anism for managing system privileges and roles.
5. UARBAC: A NEW ADMINISTRATIVE
MODEL FOR RBAC
We now present our approach for administering RBAC,
called the UARBAC family3 of administrative models for
RBAC. UARBAC consists of a basic model and one extension:
UARBACP , which adds parameterized objects and constraint-
based administrative domains. UARBAC adopts the approach of
administering RBAC with RBAC. By this, we mean that permis-
sions about users and roles are administered in the same way as
permissions about other kinds of objects. An access control system
thus has predeﬁned classes of objects for users and roles, as well
as other classes of objects that are protected by the access control
system. For example, in Security Enhanced Linux [17], 29 classes
of objects are deﬁned, including processes, ﬁles, etc. Different ac-
cess modes are applicable for different classes. In this section, we
ﬁrst present a new RBAC model that supports object classes, then
describe the basic model in UARBAC and the extension.
5.1 An RBAC model
3The letter U in UARBAC does not stand for any thing; or one can
consider it to stand for “unnamed”.
We now present a new RBAC model that extends the exist-
ing RBAC models with the notion of object classes and RBAC
schemas.
RBAC Schemas An RBAC schema speciﬁes what kinds of objects
are managed by the RBAC system, and what access modes can be
applied to these objects. Any RBAC system must be based on an
RBAC schema. In our model, an RBAC schema is given by a tuple
(cid:104)C ,OBJ S, AM(cid:105).
1. C is a ﬁnite set of object classes that the system supports. We
require that C contain two predeﬁned object classes: user
and role.
2. OBJ S is a function that maps each class in C to a countable
set of object names of that class. That is, OBJ S(c) gives all
possible names for objects of the class c.
We use U to denote OBJ S(user) and R to denote
OBJ S(role), we also require that R contain a reserved role
name sso, for the system security ofﬁcer role.
3. AM is a function that maps each class c ∈ C to a set of
access modes that can be applied on objects of the class c.
There are a few predeﬁned access modes that are relevant to
administration.
Every class has the predeﬁned access mode, admin, i.e.,
∀c ∈ C, admin ∈ AM (c). The mode “admin” enables one
to delete the object and to give out permissions about the ob-
ject.
The access modes for the two predeﬁned classes user and
role are ﬁxed by the model as follows.
• AM (user) = { empower, admin }
The mode “empower” enables one to control who is
allowed to add “power” (i.e., permissions) to a user by
granting roles to the user. The mode “admin” enables
one to delete the user, to give out permissions about the
user, and to revoke roles from the user; it also implies
the “empower” mode.
            (ii) After addition  (a) Remove implicit relationships (option 2)  (b) Preserve implicit relationships (option 1)   PM   QA   Eng   Arc   QA   Eng   Arc   QA   Eng   PM   QA   Eng          (iii) After deletion AddInheritance(Eng, QA) DeleteInheritance(Eng, QA) AddInheritance(Eng, QA) DeleteInheritance(Eng, QA)            (ii) After addition          (iii) After deletion   PM   (i) Original state   QA   Eng   Arc   QA   Eng   (i) Original state • AM (role) = { grant, empower, admin }.
The access mode “grant” over a role enables one to
control how this role is granted to other roles and users.
The mode “empower” enables one to control who is al-
lowed to add “power” to the role. The mode “admin”
enables one to delete the role, to give out permissions
(such as grant and empower) about the role, and to re-
voke roles and permissions assigned to the role; it also
implies the modes “grant” and “empower”.
There are two kinds of permissions in the RBAC model:
1. object permissions: An object permission takes the form
[c, o, a], where c ∈ C, o ∈ OBJ S(c), and a ∈ AM (c).
This permission enables one to access the object o using the
access mode a.
2. class permissions: A class permission takes the form [c, a],
where c ∈ C, and a ∈ {create} ∪ AM (c).
This permission allows one to access all objects of class c
in the access mode a. In particular, [c, create] allows one to
create objects of class c.
By default, the sso role is granted all class permissions.
How these permissions affect administrative operations will be
discussed in Section 5.2.
RBAC States Given an RBAC schema, an RBAC state is given by
a tuple (cid:104)OB , UA, PA, RH(cid:105).
1. OB is a function that maps each class in C to a ﬁnite set
of object names of that class that currently exist. We have
∀c ∈ C , OB (c) ⊆ OBJ S(c). We use U and R as a short-
hand for OB (user) and OB (role), respectively. The set of
all permissions, P , is given by
P = {[c, o, a] | c ∈ C ∧ o ∈ OB (t) ∧ a ∈ AM (t)} ∪
{ [c, a] | c ∈ C ∧ a ∈ AM (c) ∪ {create} } .
2. UA ⊆ U × R is the user-role assignment relation.
UA contains the user-role relationships that are explicitly as-
signed by an administrative operation.
3. PA ⊆ P × R is the permission-role assignment relation.
PA contains the permission-role relationships that are explic-
itly assigned by an administrative operation.
4. RH ⊆ R × R is an irreﬂexive and acyclic relation over
R. RH contains the role-role relationships that are explicitly
added by administrative operations.
We use (cid:186)RH to denote the partial order induced by RH , i.e.,
the transitive and reﬂexive closure of RH . That r1 (cid:186)RH
r2 means that every user who is authorized for r1 is also
authorized for r2 and every permission that is associated with
r2 is also associated with r1.
We use an example of an RBAC system for ﬁles to illustrate
our model. In the schema, we have C = {ﬁle, user, role}. The
set OBJ S(ﬁle) contains all the legal ﬁle names; AM (ﬁle) =
{read, write, append, execute, admin}.
the set
OB (ﬁle) contains all the names of the existing ﬁles in the system.
The object permissions about ﬁles takes the form [ﬁle, o, a], where
o is an existing ﬁle name in OB (ﬁle), a is an access mode in AM
(ﬁle). For example the object permission [ﬁle,“/boot.ini”, write]
In each state,
enable one to modify the ﬁle “/boot.ini”, given that “/boot.ini”
∈ OB (ﬁle) . The class permissions about ﬁles take the form
[ﬁle, a], where a ∈ AM (ﬁle). For example, the class permission
[ﬁle, create] enables one to create a new ﬁle; and [ﬁle, read] enables
one to read any ﬁle.
5.2 Administrative operations in UARBAC
The administrative operations in UARBAC are listed in Figure 3.
Each administrative operation requires certain permissions to suc-
ceed. UARBAC does not ﬁx how to determine the set of permis-
sions that is considered in determining whether an administrative
operation is authorized. One way is to use all permissions of the
user u who performs the administrative operation, which can be
calculated as follows:
authorized perms[u] = { p ∈ P | ∃r1, r2 ∈ R
[(u, r1) ∈ UA ∧ (r1 (cid:186)RH r2) ∧ (r2, p) ∈ PA] }
When the operation is performed in a session, possibly only a sub-
set of all the roles that u is authorized for are activated, one can
compute the set of permissions available to the session by consid-
ering only the permissions of the roles that are activated in the ses-
sion.
To grant an object permission [c, o1, a] to a role r1, one needs the
two permissions [c, o1, admin] and [role, r1, empower]. This is dif-
ferent from the approach in Oracle, in which, if one controls an ob-
ject, one can grant permissions about the object to any user or role.
To revoke a permission [c, o1, a] from a role r1, one needs either
the permissions [c, o1, admin] or the permission [role, r1, admin].
This design is motivated by the equivalence requirement and the
reversibility requirement. Anyone who has the admin permission
over an object should be able to delete the object. Before an ob-
ject is actually removed, permissions about the object need to be
revoked from other roles; thus these revocation should be able to
succeed. Similarly, anyone who has the admin permission over a
role should be able to delete and role, which implies removing all
permissions that has been granted to the role. Therefore admin
over either the object o1 or the role r1 should sufﬁce for revoking
the permission [c, o1, a] from r1. Under this design, if one is autho-
rized to grant a permission about an object, one is also authorized
to revoke the permission, satisfying the reversibility requirement.
This design also enables anyone who has the admin permission
over a role to control the power of the role, by removing unwanted
permissions that have been granted to the role.
Granting/revoking a role to/from a role is similar to grant-
ing/revoking a permission to/from a role. To grant a role r1 to
another role r2 (i.e., making r2 more senior to r1), one needs
the two permissions [role, r1, grant] and [role, r2, empower]. To
revoke r1 from r2, one needs to satisfy one the following three
conditions:
(1) has permission [role, r1, admin], (2) has per-
mission [role, r2, admin], and (3) has both [role, r1, grant] and
[role, r2, empower]. Conditions (1) and (2) are motivated by the
need to enable anyone having the admin permission over a role to
remove the role. Condition (3) is motivated by the need to enable
anyone who can issue a grant to also revoke the grant.
To create new objects of class c, one needs the class permission
[c, create]. Unlike in DAC, the creator of an object does not auto-
matically receive “admin” privilege over the object. (Recall that in
RBAC permissions cannot be directly assigned to users.) Instead,
the creation operation speciﬁes a role r1 to receive the admin priv-
ilege over the object. To do so, the creator should also have the
permission [role, r1, empower].
To delete an existing object o1 of class c, one needs the permis-
sion [c, o1, admin]. When the object o1 is deleted, all the relation-
Operation
createObject(c, o1, r1)
deleteObject(c, o1)
grantRoleToUser(r1, u1)
revokeRoleFromUser(r1, u1)
grantRoleToRole(r1, r2)
revokeRoleFromRole(r1, r2)
grantObjPermToRole
([c, o1, a1], r1)
revokeObjPermFromRole
([c, o1, a1], r1)
grantClassPermToRole(p1, r1)
revokeClassPermFromRole
(p1, r1)
Required Perms
[c, create],
[role, r1, empower]
[c, o1, admin]
or
or
or
or
[role, r1, grant],
[user, u1, empower]
[role, r1, admin]
[user, u1, admin]
([role, r1, grant],
[user, u1, empower])
[role, r1, grant],
[role, r2, empower]
[role, r1, admin]
[role, r2, admin]
([role, r1, grant],
[role, r2, empower])
[c, o1, admin],
[role, r1, empower]
[c, o1, admin]
[role, r, admin]
only by the sso role
by the sso role or
[role, r1, admin]
or
Conditions
o1 ∈ OBJ S(c)
o1 (cid:54)∈ OB (c)
o1 ∈ OB (c)
r1 ∈ R,
u1 ∈ U
(u1, r1) ∈ UA
Effects
OB(cid:48)(c) = OB (c) ∪ {o1},
PA(cid:48) = PA ∪ {([c, o1, admin], r1)}
OB(cid:48)(c) = OB (c) \ {o1}
Relationships about o1 are removed.
UA(cid:48) = UA ∪ {(u1, r1)}
UA(cid:48) = UA \ {(u1, r1)}
r1 (cid:54)(cid:186)RH r2
(r2, r1) (cid:54)∈ RH
(r2, r1) ∈ RH
RH (cid:48) = RH ∪ {(r2, r1)}
RH (cid:48) = RH \ {(r2, r1)}
([c, o1, a1], r1)
(cid:54)∈ PA
[c, o1, a1] ∈ PA