due to an internal failure (such as abort), or (2) its output
is not as expected although the execution has successfully
completed. The latter can be due to an invalid input from
the user. For example, the task of reserving a ticket for a
ﬂight may commit successfully, but there may not be any
seats available. So a successful commit may still result in a
failure of a task.
Definition 2. [Task] Each task ti ∈ T is a 4-tuple
(cid:7)A, C, Input, Output(cid:8), where A denotes the execution agent
of ti, C the set of activities (or operations) within ti, Input
the set of input parameters to ti, and Output the set of
output parameters from ti.
In the following, we use the notation A(ti), C(ti), Input(ti),
and Output(ti) to denote the task agent, the set of activities,
the set of input parameters, and the set of output parameters
of ti, respectively.
Example 2. An example of a task, t1 = Purchase a ticket
at Continental, is as follows:
A(t1) = ContinentalT ravelAgent,
C(t1) = {check seat, check price, make invoice},
Input(t1) = {travel date, destination}, and
Output(t1) = {invoice number, ticket},
which states that t1 requires a travel date and destination
as its input and generates the invoice number and a ticket
as its output.
3.2 Workﬂow Dependencies
Intertask dependencies support a variety of workﬂow co-
ordination requirements. Basic types of task dependencies
include control-ﬂow dependencies, value-dependencies and
external dependencies [1, 13].
1. Control ﬂow dependencies: Also referred to as state de-
pendencies, these dependencies specify the ﬂow of control
based on the state of a task. Formally, a control-ﬂow depen-
dency speciﬁes that a task tj invokes a primitive prj only if
ti enters state sti. For example, a begin-on-success depen-
bs−→ tj , states
dency between tasks ti and tj denoted as ti
that tj can begin only if ti enters a succeeded state.
2. Value dependencies: These dependencies specify the ﬂow
of control based on the outcome of a task. Formally, a task
tj can invoke a primitive prj only if a task ti’s outcome sat-
bs,x>100−→ tj states that
isﬁes a condition ci. For example, ti
tj can begin only if ti has successfully completed and the
50value of its outcome, x is > 100. Since the outcome can be
evaluated only in case of a successful completion of a task,
all value dependencies have to be associated with a “bs” de-
pendency. Therefore, explicit representation can be omitted.
3. External dependencies: These dependencies specify the
control ﬂow based on certain conditions satisﬁed on param-
eters external to the workﬂow. A task ti can invoke a prim-
itive pri only if a certain condition c is satisﬁed where the
parameters in c are external to the workﬂow. For example,
a task ti can start its execution only at 9:00 am, or a task ti
can start execution only 24 hrs after the completion of task
tk.
Each task ti, therefore is associated with a set of state
dependency variables S = ST , value dependency variables
V = Output(ti), and external variables E .
Definition 3. [Dependency Variables and Literals]
A dependency variable dv for a task ti is deﬁned as follows:
If ti ∈ T and v ∈ DV = {S ∪ E ∪ V}, then dv = ti.v.
A dependency literal l is a value that a dependency variable
can take, and is deﬁned as l ∈ L = {R ∪ N ∪ G ∪ ST},
where R is the set of real numbers, N the set of natural
numbers, G the set of alphanumeric strings, and ST the set
of all possible states for tasks in W .
Definition 4. [Dependency Expression]
A dependency expression, de is deﬁned as follows:
then dv op l is a dependency expression.
• if dv ∈ DV and l ∈ L, and op ∈ {=,(cid:16)=, ,≤,≥},
• if de1 is a dependency expression, then (de1) is a de-
• if de1 is a dependency expression, then ¬de1 is a de-
• if de1 and de2 are dependency expressions, (de1 ∧ de2)
pendency expression; and
and (de1 ∨ de2) are dependency expressions.
pendency expression;
Example 3. Following are examples of dependency ex-
pressions.
1. t1.state = success;
2. (t1.price > $400 ∧ t2.seat ≥ 2)
Definition 5. [Dependency] Each dependency ti
d−→
tj in D, is a 4-tuple (cid:7)hd, de, tl, pr(cid:8), where hd and tl denote
the head (ti) and tail (tj) tasks, de the dependency expres-
sion, and pr ∈ P R the primitive of tj to be invoked when
de is true.
Example 4. Following is a list of examples of the three
types of dependencies:
bc−→ t2: (cid:7)t1, t1.state = commit, t2, begin(cid:8)
bc,price>$200
$200), t2, begin(cid:8)
−→ t2: (cid:7)t1, (t1.state = commit ∧ t1.price >
t2: (cid:7)t1, (t1.time = 10am), t2, abort(cid:8)
−→
time=10am,abort
1. t1
2. t1
3. t1
4. OUR APPROACH TO DECENTRALIZED
CONTROL
In this section, we will ﬁrst propose a methodology and
architecture to enforce the inter-organizational task depen-
dencies without the need for having to have a centralized
Central System
WFMS Stub
Self(A(t 1
))
WFMS Stub
A(t1)
Self(A(t 2) )
WFMS Stub
A(t )2
Self(A(t 3
))
WFMS Stub
)A(t3
Self(A(t 4
))
WFMS Stub
A(t )4
Figure 5: Our Approach to Decentralized Control
WFMS. In regard to this, we propose (1) self-describing
workﬂows and (2) WFMS stubs. Self-describing workﬂow
carries workﬂow information, and WFMS stubs are light-
weight software component that can be installed at each
agency to process a self-describing workﬂow. In the follow-
ing, we discuss them in detail.
4.1 Self-describing workﬂows
Intuitively, a self-describing workﬂow, comprises of (1) a
task t, (2) all the tasks that follow t and the dependencies
among them, (3) the agent that executes t, (4) the input ob-
jects required to execute t. This information is piggy-backed
along with t when sending it to its execution agent. Figure 5
shows how such decentralized control can be achieved using
the notion of self-describing workﬂows.
If we walk through this example, the central WFMS stub
constructs a self-describing workﬂow with the entire work-
ﬂow, and sends it to A(t1) ﬁrst. WFMS Stub at A(t1) exe-
cutes t1, partitions the remainder of the workﬂow if needed,
constructs a self-describing workﬂow(s), and sends it to the
subsequent agent A(t2) based on the dependency evalua-
tion. That is, as the workﬂow execution progresses, it gets
divided into partitions and forwarded for the next task ex-
ecution agent. We assume the initial partition is the entire
workﬂow, which is denoted as P1. Let Pi be the ith parti-
tion. Following is a formal deﬁnition of the self-describing
workﬂow:
Definition 6. [Self Describing Workﬂow] Given a
workﬂow Pi, we deﬁne its self-describing workﬂow, SELF(Pi),
as a tuple (cid:7)ti, P reSet(ti), OutState(ti), Pi(cid:8), where ti is the
ﬁrst task in Pi, P reSet(ti) is preconditions to be satisﬁed
before ti entering a state sti, OutState(ti) is the set of de-
d−→ tj for all tj with an outgoing
pendency variables in ti
dependency from ti and their values generated from ti’s ex-
ecution.
OutState(ti) can be a control state, value state of a variable,
and/or an external state. For instance, OutState(t1) of de-
pendency 2 in example 4 can be {cm, price > $200}, and for
that of dependency 3 can be {bs, time=9AM}. Note that
OutState(ti) is used for evaluating dependency expressions,
while Output(ti) is forwarded to the following agents to be
used as input to their tasks.
4.2 WFMS stub
A WFMS stub is a small component that can be attached
to a task execution agent. This module is responsible for
interpreting the given workﬂow:
i.e. (1) evaluate precon-
ditions and execute its task, (2) partitions the remaining
workﬂow, constructs self-describing workﬂows, (3) evaluate
51control information and (4) forwards each to its subsequent
agent.
4.2.1 Precondition Evaluation
The WFMS stub at each agent needs to evaluate the
preconditions for its task to change its state from one to
another through its primitive operations. Although, until
now we have referred to the precondition set of a task ti
(P reSet(ti)) that applies to the task as a whole, since the
task dependencies may specify invocation of any primitive,
we need to distinguish them for each primitive. Before the
task changes its state from one to another, preconditions
attached to each primitive operation need to be evaluated.
Following is the deﬁnition of preconditions of a task ti for
each primitive operation pri.
P2
(A)
(Bf) OR price>$400
t3
Bs
Bf
t2
price $400), P rec
t3 = ∅.
Given PreSet(ti), we say P repr
t3 = ∅ and
if the de in P repr
ti
is evaluated true in OutState(tk).1
ti is satisﬁed at a given state
4.2.2 Workﬂow Partitioning
Once the task is completed, the WFMS stub prepares
self-describing workﬂows for the following task agents, by
ﬁrst partitioning the remaining workﬂow. Following is an
algorithm to partition and then generate a self-describing
workﬂow.
Algorithm 1. [Self-describing Workﬂow Construc-
tion]
Partitioning: Given Wi at A(ti),
x−→ tj exists,
For each tj where ti
p = a connected component  where tj is its root
Pj = {(T,D)| T = a set of tasks {tj, tk, ..., te} in p and
D = a set of dependencies among tasks in T}
Generation of Self-describing Workﬂows:
Given a partition Pj,
tj = ﬁrst task in P j
SELF(Pj) = (cid:7)tj, P reSet(tj), OutStates(tj), Pj(cid:8)
We illustrate the working of the partitioning with the help
of an example shown in ﬁgure 6. After task agent A(t2) ﬁn-
ishes its task execution with P 2 in ﬁgure 6(A), it partitions
the remaining workﬂow into two, P 3 and P 4 as shown in
ﬁgure 6(B). Notice the t6 and t7 are included in both P 3
and P 4 since we assume there is OR-join at t6, so they are
1If P repr
for that primitive operation.
ti = ∅, then the preconditions are always satisﬁed
Figure 6: An example to illustrate partitioning
not omitted in case one partition results in a failure during
execution. Subsequently, A(t4) would partition P 4 into P 6,
and at A(t6) P 6 gets partitioned into P7 as in ﬁgure 6(C).
The workﬂow partitioning is a necessary step for decentral-
ized execution. To handle COI, we modify this partitioning
algorithm by further restricting the way in which partition-
ing is done (in algorithm 2 in section 6).
4.2.3 The WFMS stub
In the following, we describe the functionality of the WFMS
stub at each A(ti). The WFMS stub encounters the follow-
ing three cases. Since the algorithm is similar to the secure
WFMS stub algorithm (algorithm 3), we provide only an
informal discussion here.
Case 1: WFMS stub does not need to evaluate the precon-
ditions of its following task(s) tj to send SELF(Pj ). This
tj = ∅. In this case, the task(s) following
is possible if P reb
ti can be executed in parallel with that of ti. Therefore,
the WFMS stub does not need to evaluate the precondition
of tj at this point, but ti and tj can start their execution
in parallel. Therefore, the WFMS stub at A(ti) ﬁrst con-
structs the SELF(Pj), sends it over to A(tj), and executes
its own task ti. Only after the execution of ti is complete,
it evaluates P reSet(tj) and sends a signal to A(tj) indicat-
ing the completion of its execution. For example, consider
c−→ t3 in the workﬂow shown in ﬁgure
the dependency t2
7. Since this is a commit dependency, only the precondition
for the commit primitive is non-empty, but that of the begin
primitive is empty. In this case t2 and t3 will be executed
in parallel.
Case 2: WFMS stub needs to evaluate the preconditions
of its following task(s) tj before sending the SELF(Pj ) to
(cid:16)= ∅. Therefore, WFMS
A(tj). This is required if P reb
tj
stub ﬁrst constructs SELF(Pj ), executes ti, evaluates P reb
tj ,
and sends SELF(Pj) to A(tj) only if the P reb
tj is true. For
bs−→ t2 in ﬁgure 7, SELF(P2) will not be sent
t2 is not true.
example, in t1
to A(t2) if P reb
Case 3: The WFMS stub needs to evaluate the precondition
of its own task ti. When a task is executed in parallel along
52t1
bs
t2
c
x
t3
t4
Figure 7: An example to describe WFMS stub
with its preceding task as in case 1, it has to wait (in the
done state) for the signal to terminate its execution. This
work will be in addition to taking care of one of the previous
two cases. For example, the WFMS stub at A(t3) has to
evaluate P rec
tj before commiting. In addition, it has to do
x−→ t4.
the functions of either case 1 or case 2 based on t3
5. CHINESE WALL SECURITY MODEL
FOR DECENTRALIZED WORKFLOWS
In this section, we propose a variation of the Chinese Wall