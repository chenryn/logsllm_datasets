%LQGHU'ULYHU
9HQGRU+$/
$/
?@QSSS
GULYHU
.HUQHO
Fig. 2. Dynamic Analyzer. In the ﬁgure, the dashed green (---) line describes
a conceptual RPC call and the solid green line (—) is the real call chain for
accessing hardware devices. The dash-dash-dot red (− · − · − ) lines show
how the tracer is attached to all the processes related to a device operation
and the dash-dot blue (-.-.-) line illustrates how this attachment operation is
performed by the binder.
TABLE IV.
SENSITIVE DEVICES: ANDROID-SPECIFIC OR
LINUX-INHERITED
Device
Camera
NFC
Audio
Radio
External
Storage
GPS
Bluetooth
Wiﬁ
Frame Buffer
Input
Subsystem
Block
Devices
VPN, PPP
Related Permissions
CAMERA
NFC
RECORD AUDIO
CALL PRIVILEGED
CALL PHONE
READ EXTERNAL STORAGE
WRITE EXTERNAL STORAGE
ACCESS COARSE LOCATION
ACCESS FINE LOCATION
BLUETOOTH
BLUETOOTH ADMIN
ACCESS WIFI STATE
Test Operations
or Device Node
Take pictures, change cam-
era settings
Send NFC tags
Play audio, record audio
Make phone calls
Write and read from exter-
nal storages
Read GPS data
Pair to a device, send a ﬁle
Enable wiﬁ, connect to wiﬁ
/dev/graphics/fb*
/dev/input/event*
/dev/uevent
/dev/block/*
BIND VPN SERVICE
/dev/vpn, /dev/ppp
are not analyzed by Device Miner and instead, directly sent
to Risk Identiﬁer for security checks. Note that even though
this list is not complete, the same methodology can be used
to evaluate other devices, once their test cases are added, to
improve the coverage of the analysis.
For each device on the list (except those standard Linux
devices), we built a test case, which is executed by Test Runner.
The app calls related APIs to operate on the device, such as
taking a picture, transferring a tag for an NFC device, etc. Such
a test case can be generated automatically using the testing
tools such as Randoop [13]. However, given the relatively
small number of devices and the complexity in automatic
construction of a correct call sequence and parameters, we
just manually developed those cases for our implementations.
Once this test suite is constructed, it can be executed upon
different customized Android phones automatically.
Dynamic analysis. As soon as Device Miner starts the Test
Runner, it attaches a tracer (a wrapper of strace) to the app’s
process. The app needs to make API calls to access its target
devices. In Android, such an API call goes through the binder
driver in the kernel, which passes the request to a system
service. This interaction is called a transaction as shown in
Figure 2. Device Miner includes an instrumented binder that
monitors the processes communicating with the test app and
attaches tracers to them.
Speciﬁcally, our approach instruments binder.c with
the code for inspecting individual transactions. This can be
done automatically, given the binder’s source code has not
been changed signiﬁcantly across different Android versions.
Later we will discuss an alternative to avoid even this mostly
automated instrumentation.
During its runtime, this modiﬁed binder checks the trans-
action parameters of an IPC call to extract the source Process
Identiﬁer (PID) of the transaction and its target PID, together
with the transaction data. The source PID is directly retrieved
from binder_proc.pid and the target one is obtained from
target_node, which is referred by target_handler
embedded in the transaction data. Those PIDs are further
mapped to package names retrieved from process memory
using access_process_vm. If either party in the IPC
(source or target) is found to be the test app, based upon
its package name, Device Miner attaches a tracer to the one
that has not been monitored yet. Those tracers log all their
processes’ ﬁle operations, such as ioctl, read and write.
They are also capable of parsing some parameters for the
ﬁle operations, which are important to ﬁngerprinting a ﬁle
(Section III-C).
A problem for our dynamic analysis is instrumentation
of the binder. Although this can be done automatically on
Android source code, we still need to compile the instrumented
code and install it on every customized device, which makes
the approach less portable. To address this issue, we further
leverage the way the AOSP OS handles a service to simplify
the analysis. Speciﬁcally, as discovered in our research (Sec-
tion II-B), mobile phone vendors rarely modify the framework
layer services during their customizations. Particularly, they
tend to leave the package names of the services intact, because
otherwise, a large number of program locations referring those
packages need to be adjusted as well. Therefore, we can
assume that the names of the services working on a device-
related request stay unchanged across different Android OSes
(though the names of device drivers could be different). In
this case, Device Miner can build a model for running each
test case, based upon what it observes on the AOSP OS (the
reference), to record all the packages involved in handling its
device-related requests. On a customized system, our approach
automatically attaches tracers to all the processes of those
packages during the operations of the test case to monitor
ﬁles they drop. Since we do not need to change the OS to run
strace, the whole Device Miner becomes completely portable
across different Android phones. There could be a problem
when some vendors indeed touch the framework layer. In this
case, we need to install the instrumented binder on the device
and run the test again.
Differential analysis. To achieve portability, Device Miner
tracks device operations at the system-call level, which is
coarse-grained. For the Linux ﬁles discovered this way, we
414
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
do not know whether they are indeed related to the device
or just the noise introduced by other processes running in
the background. To remove such random noise, our approach
further performs a differential analysis on the outcomes of
an analysis, comparing them with those produced by other
independent
tests. Speciﬁcally, we run the same test case
multiple times, independently, until the set of the ﬁles touched
by all those executions no longer change (which indicates that
those ﬁles are related to the test case, not other processes).
This ﬁlters out ﬁles that are touched by other concurrently
running processes. Then, we invoke the test case again, and
this time, the app attempts to access the target device without
a proper permission and naturally will not get what it asks for.
The outputs we observe from this execution are used to remove
the ﬁles from the intersection produced by the prior runs, since
those ﬁles do not contribute to the normal operations on the
target device. In this way, we get a “sanitized” list of ﬁles that
are very likely to be directly related to the device.
C. Risk Identiﬁer
Given a list of Linux ﬁles related to a device, as identiﬁed
by Device Miner, we need to ﬁnd out whether their security
protection levels are properly set. The problem is that even
though we know the device protected by a dangerous or
signature permission on the framework layer, we still have
no idea whether the Linux permissions assigned to the ﬁles
are appropriate, given that there is little semantic information
about what those ﬁles indeed are. For example, it would be
natural to have null device node less protected than other
device nodes. Even given such semantic information, AOSP
has never made it clear how to set the Linux permissions for
a device-related ﬁle properly based on its protection at the
framework layer. To work around such complexities, in our
research, we simply take the way those device-related ﬁles
are conﬁgured on AOSP OSes as references and compare
the security settings of a ﬁle on a customized OS with its
counterpart in the reference. Note that we do not assume
here that AOSP always makes device protection right on the
Linux layer, though the references are typically less error-
prone than their customized counterparts. Our point here is
that if a customization makes a highly-protected ﬁle related
to a security-critical device on the original AOSP version
less protected, there could be a security issue (i.e., a LCF).
Also, nor do we consider that our approach can ﬁnd us most
customization errors: after all, it cannot handle new devices
and their ﬁles that never show up on the reference OS.
Nevertheless, our study demonstrates that even this simple,
ﬁrst-step approach can already detect security-critical and also
high-impact vulnerabilities in customizations (Section IV).
To implement this idea, we need to correlate device ﬁles
on different phones and detect LCFs through the aforemen-
tioned differential analysis. Risk Identiﬁer is designed for this
purpose. Here we elaborate how it works.
Device ﬁle correlations. To customize an AOSP version
to ﬁt their hardware, vendors typically need to add to the
system their own device drivers and other supporting ﬁles.
Compared with their AOSP counterparts, these ﬁles could have
different names and be assigned to different Linux groups,
as observed in our study (Section IV). For example,
the
camera device node on Nexus 4 (with an Android 4.2) is
video0 or video1 under the group camera, while on
GRAND, it becomes vc-cam and afﬁliated with the Linux
group system. Correlating such a ﬁle to their counterpart
on a reference OS can become nontrivial when Device Miner
outputs multiple device-related ﬁles on both sides. Here we
describe how Risk Identiﬁer establishes such a connection.
Our approach ﬁrst ﬁngerprints those ﬁles based upon how
they are operated by system calls. Speciﬁcally, for each ﬁle,
we look at the set of system calls that touch the ﬁle, and the
content and other features of those calls’ arguments. For the
arguments that pass values to a system function, strace can
often parse them to ﬁnd their content. Since the designs of
customized devices (camera, video, Bluetooth, etc.) tend to
follow their industry standards, oftentimes, the content of the
arguments for their related system calls can be informative
enough for establishing the relation between two device nodes
built according to the standards. For example, different camera
devices designed according to the V4L2 driver framework [17]
all share some arguments for the ioctl call that operates
on them, such as 0x560f (parsed into VIDIOC_QBUF).
Therefore, whenever two device-related ﬁles are found to have
some of such standard arguments (automatically identiﬁed by
strace) in common, they are considered to be related. In the
case that Risk Identiﬁer cannot ﬁnd such common arguments,
it further checks the set of system calls that happen to each ﬁle
to connect customized ﬁle to the reference one. This approach
works particularly well on the device whose operations need to
go through a standard procedure. An example is NFC, whose
call sequence is always (select, read, write) with the
2nd arguments of read and write being well-formatted NFC
streams, even when the drivers are heavily customized, with
different ﬁle names and group memberships. Note that given
a device node on the reference side, all we need to do here is
just to determine which customized ﬁle (out of several ones
reported by Device Miner) is more likely to be its counterpart.
This can often be done, since Android processes device nodes
differently from other ﬁles, such as logs.
LCF detection. After pairing individual device ﬁles on a
customized phone with those in a reference, an analysis tool
starts checking their Linux ﬁle permissions. For a pair of
device ﬁles, what we are looking for there is any discrepancy
in their permission settings. For example, if the one within the
reference is made readable and writable only to group members
while the other is open to the public, then our approach imme-
diately reports discovery of an LCF. More complicated is when
these two ﬁles end up in different Linux groups: for example,
one in camera and the other in system. We consider this
practice risky, though it may not lead to any exploitable ﬂaw.
The rationale is that Android maps permissions to different
Linux groups and as a result, change of a resource’s group
afﬁliation could open an unexpected avenue for unauthorized
access. Of course, in most cases, such afﬁliation changes may
not result in security-critical vulnerabilities. A device ﬁle found
to have this problem is thus just marked as risky, and will not
be alarmed as an LCF.
IV. FINDINGS AND ATTACKS
In our study, we ran our implementation of ADDICTED
on four smartphones to analyze the security protection of their
Linux devices. These phones include a Google Nexus 4 with
415
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
an Android 4.2, a Samsung Galaxy SII with a customized
4.0.3, a Galaxy ACE 3 with a 4.2.2 and a Galaxy GRAND
with a 4.1.2. ADDICTED instrumented the binder on the
Nexus 4 to identify the device ﬁles for our test suites. It also
built up a model for each test case, recording the packages
involved in handling its device access request. All the device
ﬁles discovered from the rest three phones were compared
with their counterparts on the Nexus 4, which served as
the reference, to identify their LCFs based on their Linux
permission settings.
This study discovered 4 LCFs and all of them were
conﬁrmed to be indeed problematic. Particularly, we performed
an in-depth study on 3 such ﬂaws3 and came up with end-to-
end attacks on them. These attacks enable a malicious app,
without relevant permissions, to log the keys the phone user
enters on her touchscreen, and to take pictures or screenshots
stealthily. Some of these ﬂaws were found to be extremely per-
vasive, affecting millions of smartphone users, as discovered
by our measurement study reported in Section V. Following
we elaborate this research.
A. Findings
Device ﬁles identiﬁed. On the Nexus 4 (the reference),
ADDICTED automatically identiﬁed the ﬁles associated with
individual devices. Table V illustrates our ﬁndings. For NFC
devices, only a single ﬁle was found for each of them, which
turned out to be their device nodes. Other devices are more
complicated. For example, on Nexus 4, the front video device
is video1 while on Galaxy SII, it becomes video0 for
both front and rear (more details in IV-B). In the case of
Galaxy GRAND, vchiq is its camera controller and vc-cam
is its device node. Device ﬁles’ group memberships may
vary as well. For example, on Nexus 4, the camera device
node is with system:camera, on Galaxy SII the group
becomes system:root and on GRAND it
to
be system:system. Vendors did not follow any guideline
when conﬁguring the Linux settings of their customized device
ﬁles. With such a diversity, those device ﬁles were all identiﬁed
by Device Miner.
turns out
LCFs detected. Those ﬁles were further correlated by Ref-
erence Identiﬁer through their system call set and call argu-
ments. As an example, Table VI shows the argument-level
connections between camera device nodes on Nexus 4 and SII.
By comparing the device-related ﬁles on the three customized
phones with those on the reference, ADDICTED reported 4
LCFs, which are presented in Table V. Most problems come
from obvious erroneous settings of sensitive device ﬁles to
publicly accessible. We manually inspected those cases, which
all look indeed problematic: the camera device nodes on SII
and GRAND, the input device on SII, and the frame buffer on
Galaxy ACE 3 are set to be publicly readable and writable.
We further built end-to-end attacks to exploit one of these two
camera ﬂaws and the LCFs with the input device and the frame
buffer to demonstrate the seriousness of the problem.
B. Attacks
To understand the seriousness of the LCFs we discovered,
we thoroughly analyzed the 3 vulnerabilities and built end-
to-end exploits on them. These vulnerabilities include the
exposure of the input device node and camera device node
on Galaxy SII, and the unprotected frame buffer on Galaxy
ACE. We found that those ﬂaws can be exploited by an app
either without any permission or with unrelated ones such
as WRITE_EXTERNAl_STORAGE (for the purpose of storing
collected data). Some of such attacks can be quite complicated,
due to the lack of documentations about those customized
devices. We reported all our ﬁndings to Samsung and Google
and are currently working with them to ﬁx those ﬂaws.
Touchscreen Keylogger. On Galaxy SII, ADDICTED discov-
ered that part of the standard Linux input driver ﬁles (e.g.,
/dev/input/event2)4 are made public. This problem
was also found on a series of other phones, as reported by
our measurement study (Section V). On Android, the input
system is used for dispatching events to different services and
delivering to them the data received by sensors like gyro and
compass and other input hardware such as touchscreen and
keyboard. Once the device ﬁles are exposed, any party can
get from them sensitive sensor data and user inputs. In our
research, we show that a touchscreen keylogger can be built
by exploiting this vulnerability.
The Android input system includes three components,
EventHub, EventReader and EventDispatcher.
EventReader reads from different driver ﬁles (through
EventHub) the data collected by sensors or input hardware
and converts them into different events such as KeyEvent,
MotionEvent etc. These events are dispatched to proper
windows through EventDispatcher.
Now that all the device ﬁles are up for grabs, we im-
plemented our own input reader to directly collect data from