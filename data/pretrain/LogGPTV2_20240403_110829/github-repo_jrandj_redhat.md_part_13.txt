    * Inventories are what Ansible uses to locate and run against multiple hosts. The default ansible 'hosts' file is `/etc/ansible/hosts`. The default location of the hosts file can be set in `/etc/ansible/ansible.cfg`.
    * The file can contain individual hosts, groups of hosts, groups of groups, and host and group level variables. It can also contain variables that determine how you connect to a host.
    * An example of an INI-based host inventory file is shown below:
        ```shell
        mail.example.com
        [webservers]
        web01.example.com
        web02.example.com
        [dbservers]
        db[01:04].example.com
        ```
    * Note that square brackets can be used instead of writing a separate line for each host.
    * An example of a YAML-based host inventory file is shown below:
        ```shell
        all:
            hosts:
                mail.example.com
            children:
                webservers:
                    hosts:
                        web01.example.com
                        web02.example.com
                dbservers:
                    hosts:
                        db[01:04].example.com
        ```
1. Modules
    * Modules are essentially tools for particular tasks. They usually take parameters and return JSON. Modules can be run from the command line or within a playbook. Ansible ships with a significant amount of modules by default, and custom modules can also be written.
1. Variables
    * Variable names should only contain letters, numbers, and underscores. A variable name should also start with a letter. There are three main scopes for variables: Global, Host and Play.
    * Variables are typically used for configuration values and various parameters. They can store the return value of executed commands and may also be dictionaries. Ansible provides a number of predefined variables.
    * An example of INI-based based variables:
        ```shell
        [webservers]
        host1 http_port=80 maxRequestsPerChild=500
        host2 http_port=305 maxRequestsPerChild=600
        ```
    * An example of YAML-based based variables:
        ```shell
        webservers
            host1:
                http_port: 80
                maxRequestsPerChild: 500
            host2:
                http_port: 305
                maxRequestsPerChild: 600
        ```
1. Facts
    * Facts provide certain information about a given target host. They are automatically discovered by Ansible when it reaches out to a host. Facts can be disabled and can be cached for use in playbook executions.
1. Plays
	* The goal of a play is to map a group of hosts to some well-defined roles. A play can consist of one or more tasks which make calls to Ansible modules.
1. Playbooks
	* A playbook is a series of plays. An example of a playbook:
        ```shell
		---
		- hosts: webservers
		  become: yes
		  tasks:
		    - name: ensure apache is at the latest version
		      yum:
		        name: httpd
		        state: latest
		    - name: write our custom apache config file
		      template:
		        src: /srv/httpd.j2
		        dest: /etc/httpd/conf/httpd.conf
		    - name: ensure that apache is started
		      service:
		        name: httpd
		        state: started
		    - hosts: dbservers
		      become: yes
		      tasks:
		      - name: ensure postgresql is at the latest version
		        yum:
		          name: postgresql
		          state: latest
		      - name: ensure that postgres is started
		        service:
		          name: postgresql
		          state: started
        ```
1. Configuration Files
	* The Ansible configuration files are taken from the below locations in order:
		* ANSIBLE_CONFIG (environment variable)
		* ansible.cfg (in the current directory)
		* `~/.ansible.cfg` (in the home directory)
		* `/etc/ansible/ansible.cfg`
	* A configuration file will not automatically load if it is in a world-writable directory.
	* The ansible-config command can be used to view configurations:
		* list - Prints all configuration options
		* dump - Dumps configuration
		* view - View the configuration file
	* Commonly used settings:
		* inventory - Specifies the default inventory file
		* roles_path - Sets paths to search in for roles
		* forks - Specifies the amount of hosts configured by Ansible at the same time (Parallelism)
		* ansible_managed - Text inserted into templates which indicate that file is managed by Ansible and changes will be overwritten
1. Use provided documentation to look up specific information about Ansible modules and commands
### Install and configure an Ansible control node
1. Install required packages
	* To install Ansible using dnf:
        ```shell
		subscription-manager repos --list | grep ansible
		# find latest version
		sudo subscription-manager repos --enable ansible-2.8-for-rhel-8-x86_64-rpms
		dnf search ansible
		# confirm available
		dnf install -y ansible
        ```
	* To install Ansible from disk:
        ```shell
		sudo dnf install git
		mkdir ansible
		mkdir git
		cd git
		git clone --single-branch --branch stable -2.8 https://github.com/ansible/ansible.git
		cd ansible
		source ./hacking/env-setup
		# make permanent
		vi ~/.bash_profile
		# add line
		source ~/git/ansible/hacking/env-setup
		pip2.7 install --user -r ./requirements.txt
		# test the installation
		ansible 127.0.0.1 -m ping
        ```
1. Create a static host inventory file
	* An inventory is a list of hosts that Ansible manages. Inventory files may contain hosts, patterns, groups and variables. Multiple inventory files may be specified using a directory. Inventory files may be specified in INI or YAML format.
	* The default location is `/etc/ansible/hosts`. The location can be set in ansible.cfg or specified in the CLI using:
	    ```shell
		ansible -i 
		```
	* Best practices for inventory variables:
		* Variables should be stored in YAML files located relative to the inventory file.
		* Host and group variables should be stored in the host_vars and group_vars directories respectively (the directories need to be created).
		* Variable files should be named after the host or group for which they contain variables (files may end in .yml or .yaml).
1. Create a configuration file
	* An example of creating a custom configuration file, and updating the default configuration file:
		```shell
		cd ansible
		vi ansible.cfg
		### contents of file
		[defaults]
		interpreter_python = auto
		inventory = /home/cloud_user/ansible/inventory/inv.ini
		roles_path = /etc/ansible/roles:/home/cloud_user/ansible/roles
		###
		mkdir roles
		# add property to default ansible.cfg
		sudo vi /etc/ansible/ansible.cfg
		# add line
		interpreter_python = auto
		```
1. Create and use static inventories to define groups of hosts
1. Manage parallelism
### Configure Ansible managed nodes
1. Create and distribute SSH keys to managed nodes
	* A control node is any machine with Ansible installed. You can run Ansible commands and playbooks from any control node. A managed node (also sometimes called a "host") is a network device or server you manage with Ansible. Ansible is not installed on managed nodes.
	* The following is an example of generating SSH keys on the control node and distributing them to managed nodes mypearson2c and mypearson3c:
		```shell
		ssh-keygen
		# enter password
		# now we have id.rsa and id_rsa.pub in /home/cloud_user/.ssh/
		ssh-copy-id PI:EMAIL
		# enter password
		ssh-copy-id PI:EMAIL
		# enter password
		```
1. Configure privilege escalation on managed nodes
	* The following is an example of configuring privilege escalation on managed nodes mypearson2c and mypearson3c:
		```shell
		# perform these steps on both mypearson2c and mypearson3c
		sudo visudo
		# add line
		cloud_user ALL=(ALL) NOPASSWD: ALL
		```
1. Validate a working configuration using ad hoc Ansible commands
	* An ad hoc command is used to execute one line commands. They are useful for non-routine tasks such as file transfers, package management, managing services, user and group management, fact gathering, general system information, software deployment from Git, and playbook creation testing.
	* The syntax of an ad hoc command is shown below:
		```shell
		ansible host -i inventory_file -m module -a "arguments"
		```
	* Arguments require double quotes and are space delimited, and commands are executed as the user that is running them. The -b option can be used to execute the command as the root user. The -a option may be used without the -m command to run shell commands.
	* Examples of ad hoc commands are shown below:
		```shell
		# an example for the ping module
		ansible -i inventory/inv.ini all -m ping
		# an example for the setup module against the mypearson2 host
		ansible mypearson2 -i inventory/inv.ini all -m setup
		# an example of a shell command against the mypearson2 host
		ansible mspearson2 -a "ls -l /tmp"
		# an example of a shell command against the labservers group
		ansible labservers -a "ls -l /tmp"
		```
### Script administration tasks
1. Create simple shell scripts
	* The first line of a shell script must include `#!/bin/bash`. Comments can be added by using the # symbol. Execute permissions are required on the script before it can be executed. The script can be executed using the absolute or relative path.
	* A sample shell script is shown below:
	```shell
	#!/bin/bash
	# hello world script
	echo "Hello world!"
	```
	* A sample shell script using a for loop is shown below:
	```shell
	#!/bin/bash
	# for loop
	for i in {1..5}
	do
		echo "Hello $i times!"
	done
	```
1. Create simple shell scripts that run ad hoc Ansible commands
	* A script containing adhoc commands is shown below:
		```shell
		#!/bin/bash
		# Create the user matt
		ansible mcpearson3c.mylabserver.com -i /home/cloud_user/ansible/inventory/inv.ini -b -m user -a "name=matt"
		# Create the demo directory in matt's home directory
		ansible mspearson3c.mylabserver.com -i /home/cloud_user/ansible/inventory/inv.ini -b -m file -a "path=/home/matt/demo state=directory owner=matt group=matt mode=0755"
		# Copy testFile to matt's home directory
		ansible mspearson3c.mylabserver.com -i /home/cloud_user/ansible/inventory/inv.ini -b -m copy -a "src=/home/cloud_user/ansible/testFile dest=/home/matt/testFile mode=0644 owner=matt group=matt"
		# Install httpd to the webservers group and start and enable the httpd service
		ansible webservers -i /home/cloud_user/ansible/inventory/inv.ini -b -m yum -a "name=httpd state=latest"
		ansible webservers -i /home/cloud_user/ansible/inventory/inv.ini -b -m service -a "name=httpd state=started enabled=yes"
		```
	* Ad hoc commands can be a powerful tool for running commands across an inventory and getting the desired results. The following example can be run on a host to retrieve log files from multiple managed nodes:
		```shell
		#!/bin/bash
		for i in webserver1 dbserver1 adminserver1;
   		do ssh ansible@$i "sudo tar -czf messages.tar.gz /var/log/messages";
		done
		ansible -m fetch -a "src=/home/ansible/messages.tar.gz dest=/tmp/messages" all
		```
### Create Ansible plays and playbooks
1. Know how to work with commonly used Ansible modules
	* Commonly used modules include:
		* Ping
			* Validates a server is running and reachable.
			* No required parameters.
		* Setup
			* Gather Ansible facts.
			* No required parameters.
		* Yum
			* Manage packages with the YUM package manager.
			* Common parameters are name and state.
		* Service
			* Control services on remote hosts:
			* Common parameters are name (required), state and enabled.
		* User
			* Manage user accounts and attributes.
			* Common parameters are name (required), state, group and groups.
		* Copy
			* Copy files to a remote host.
			* Common parameters are src, dest (required), owner, group and mode.
		* File
			* Manage files and directories.
			* Common parameters are path (required), state, owner, group and mode.
		* Git
			* Interact with git repositories.
			* Common parameters are repo (required), dest (required) and clone.
1. Use variables to retrieve the results of running a command
	* The register keyword is used to store the results of running a command as a variable. Variables can then be referenced by other tasks in the playbook. Registered variables are only valid on the host for the current playbook run. The return values differ from module to module.
	* A sample playbook register.yml is shown below:
		```shell
		---
		- hosts: mspearson2
		  tasks:
		    - name: create a file
		      file:
		        path: /tmp/testFile
		        state: touch
		      register: var
		    - name: display debug msg
		      debug: msg="Register output is {{ var }}"
		    - name: edit file
		      lineinfile:
		        path: /tmp/testFile
		        line: "The uid is {{ var.uid }} and gid is {{ var.gid }}"
		```
	* This playbook is run using:
		```shell
		ansible-playbook playbooks/register.yml
		```
	* The result stored in `/tmp/testFile` shows the variables for uid and gid.
1. Use conditionals to control play execution
1. Configure error handling
1. Create playbooks to configure systems to a specified state
### Use Ansible modules for system administration tasks that work with
1. Software packages and repositories
1. Services
1. Firewall rules
1. File systems
1. Storage devices
1. File content
1. Archiving
1. Scheduled tasks
1. Security
1. Users and groups
### Work with roles
1. Create roles
1. Download roles from an Ansible Galaxy and use them
### Use advanced Ansible features
1. Create and use templates to create customized configuration files
1. Use Ansible Vault in playbooks to protect sensitive data