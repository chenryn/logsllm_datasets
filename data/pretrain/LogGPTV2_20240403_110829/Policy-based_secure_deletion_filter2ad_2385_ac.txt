compute the share si ← S.Decrypt(Mt[ai], xi) and recon-
struct the key Kp from the shares; ﬁnally, compute c ←
S.Encrypt(Kp, f ). Output c as a protected version of the
ﬁle f .
• Access(Mt, St, p, c)
If deleted(G, D, p) = FALSE, reconstruct Kp as above and
output f ← S.Decrypt(Kp, c). Otherwise, when the pro-
tection class is inaccessible, return f ← ⊥.
The auxiliary state St contains data only for the interior node p,
i.e., the shares of the key Kp encrypted under the keys represent-
ing the n attributes. Note that the Protect and Access methods
obtain at least n − m + 1 shares for reconstructing Kp whenever
deleted(G, D, p) = FALSE; this is shown in the next theorem.
Mt+1[a] ← (⊥
if a ∈ At
Mt[a] otherwise.
Theorem 1. The direct secure deletion scheme E with a policy graph G
deﬁned above is complete and secure.
263Proof. Given the structure of G with p being an interior node with
threshold m, it follows that the predicate deleted(G, D, p) is TRUE
if and only if |D| ≥ m.
It is easy to check that the scheme is complete because as long
as deleted(G, D, p) = FALSE, fewer than m attribute keys have
been deleted; in other words, more than n − m of the keys K1,
. . . , Kn are present in the master key. Using the auxiliary data
St[p], this allows to recover more than n − m of the secret shares
s1, . . . , sn. Then the key Kp can be obtained by running algo-
rithm Recover of the secret-sharing scheme. Hence, Protect and
Access can operate on all ﬁles protected under p.
The proof that the scheme is secure proceeds in a sequence of
games [26]:
Game 0. This is the original game and its experiment is de-
ﬁned according to the security deﬁnition. Note that in the ﬁrst step
of the experiment, A is required to specify the set of attributes D
which satisﬁes deleted(G, D, p) = TRUE. As mentioned above,
this happens if and only if |D| ≥ m.
Game 1. We proceed as in the previous game except that for
each i ∈ [n] such that ai ∈ D, the Init algorithm sets xi ←
S.Encrypt(Ki, ri), for a randomly chosen ri ∈ {0, 1}|si|, and
stores these in the auxiliary state value S0[p] = (x1, . . . , xn). By
the security of the encryption scheme S and the fact that all Ki
with ai ∈ D are removed from the master key before it is revealed
to A, it holds that the adversary’s advantage changes by at most
negligible probability from the previous game.
Game 2. This game is initially the same as the previous game,
in which Init chooses a random key Kp ← S.Keygen(κ), secret-
shares it to obtain the shares s1, . . . , sn, and uses these for comput-
ing the auxiliary state. However, we also choose a different random
key K ′
p ← S.Keygen(κ) and use this key rather than Kp to protect
and access any ﬁles under p in responses to queries of A.
Recall that A will ask for at least m attributes to be deleted before
it obtains the master key. Then, by the security of the secret-sharing
scheme, the adversary cannot tell which key is secret-shared, hence
behaves like in the previous game except for a negligible differ-
ence. Also, note that the key K ′
p is completely independent from
the master key and the auxiliary state.
Game 3.
In this last game, when the adversary presents ﬁles
f0 and f1 with the same length, the challenger computes c∗ ←
S.Encrypt(K ′
p, r) for a randomly chosen r ∈ {0, 1}∗ of the same
length as the ﬁles. By the security of the encryption scheme S, the
advantage of A changes at most by a negligible amount from the
previous game. Moreover, as r is independent of f1 and f2, the
adversary cannot do better than guess the bit b at random, hence
Pr[ˆb = b] = 1
2 .
As the adversary A can guess b exactly with probability 1
2 in the
last game and her advantage changes only negligibly between every
two consecutive games, it follows that E is secure.
Note that the auxiliary state contains values neither for the at-
tributes nor for the edges incident with them. We use this prop-
erty when constructing more complex secure deletion schemes and
maintain this invariant for all direct schemes.
basic policy graphs. We consider ﬁrst the case when both schemes
are direct and relax this requirement later on.
Suppose the two secure deletion schemes are arranged in a hier-
archy as a higher and a lower scheme. The key step of the compo-
sition uses the higher secure deletion scheme to protect the master
key of the lower scheme. The protection classes applied to partic-
ular components of the lower scheme’s master key will determine
the policy graph of the resulting scheme. Importantly, the lower
master key needs no longer be stored in the erasable memory. In
this way, secure deletion operations of the higher scheme extend to
ﬁles protected with the lower scheme.
Let Eh and El be secure deletion schemes with policy graphs
Gh = (Vh, Eh) and Gl = (Vl, El), protection classes Ph and Pl,
and potentially overlapping attribute sets Ah and Al, respectively.
Apart from Ah and Al, the nodes Vh and Vl in the two graphs are
mutually exclusive. Then, a secure deletion scheme E with policy
graph G, attributes A, and protection classes P is constructed as
follows.
The composition speciﬁes two sets PJ and AJ , where PJ ⊆ Ph
and AJ ⊆ Al, as well as a map J : AJ → PJ . The map J
determines to which protection class in PJ each attribute of AJ is
joined. Also, we require that AJ ∩ Ah = ∅, i.e., the attributes to
be joined contain no attributes of Gh, so that the new policy graph
will not contain cycles. The policy graph G = (V, E) is deﬁned
as:
• V = Vh ∪ Vl \ AJ , i.e., G contains all nodes from Gh and
Gl except those attributes of Gl which are being joined to a
protection class in Gh;
• E = Eh ∪ {(u, v) | (u, v) ∈ El ∧ u /∈ AJ } ∪ {(w, v) |
(u, v) ∈ El ∧ u ∈ AJ ∧ w = J(u)}; this denotes (1)
all edges of Gh, (2) the edges of Gl not incident to nodes
in AJ , and (3) one edge (w, v) for every edge (u, v) ∈ El
with u ∈ AJ , where w = J(u) is the protection class to
which u is joined according to the composition. Note that
|E| = |Eh|+|El| and there is a one-to-one mapping between
E and Eh ∪ El determined by J and the original graph.
The attributes of E are all attributes of Gh and Gl except for those
involved in the composition, i.e., A = Ah ∪ Al \ AJ , and the set
of protection classes is the union of the present protection classes,
P = Ph ∪ Pl. An illustration of how two policy graphs are com-
posed is shown in Figure 3.
The algorithms (Init, Protect, Access, Delete) of E are com-
posed from those of Eh and El:
• E .Init(κ, G)
Compute (Mh,0, Sh,0) ← Eh.Init(κ, Gh) and
(Ml,0, Sl,0) ← El.Init(κ, Gl), and for every a ∈ A set
Mh,0[a]
Ml,0[a]
Mh,0[a] k Ml,0[a]
if a ∈ Ah and a /∈ Al,
if a /∈ Ah and a ∈ Al,
if a ∈ Ah ∩ Al,
M0[a] =
where k denotes the concatenation of two entries or tuples
into one tuple. Note that M0[a] may contain more than one
entry; in general, M0[a] is a tuple with one entry for ev-
ery edge incident to node a. For notational convenience, we
write M0[a][v] for the entry in M0[a] that corresponds to the
speciﬁc edge from a to v.
The initial auxiliary state stores no data for the attributes in
our constructions.1 For every protection class p ∈ V , the
3.4 Composition
Two secure deletion schemes can be composed into a more elab-
orate scheme whose policy graph results from combining the two
1This may not necessarily be true for other constructions; should
that be the case, auxiliary data for AJ speciﬁed by the composition
map can be stored either in the auxiliary data of the nodes to which
264auxiliary data S0[p] is simply Sh,0[p] or Sl,0[p] respective to
whether p ∈ Vh or p ∈ Vl.
As there is one-to-one mapping between E and Eh ∪ El,
we consider every edge e = (u, v) ∈ Eh ∪ El and deﬁne
the initial auxiliary state of its corresponding edge in E as
follows:
– S0[(u, v)] = Sh,0[(u, v)], if (u, v) ∈ Eh;
– S0[(u, v)] = Sl,0[(u, v)], if (u, v) ∈ El ∧ u /∈ AJ ;
– S0[(w, v)] = Sl,0[(u, v)] k
Eh.Protect(Mh,0, Sh,0, w, Ml,0[u][v]),
if (u, v) ∈ El for u ∈ AJ and w = J(u),
where w ∈ PJ is the protection class to which u ∈ AJ is
joined. That is, all edges in E which are also present in Eh
or El keep their initial auxiliary state unchanged. The edges
from a node w ∈ Vh to a node v ∈ Vl store the auxiliary
data of (u, v) and the master-key component from El related
to (u, v) protected under w with Eh; here, u ∈ Vl is the at-
tribute which was joined to w such that the edge (u, v) ∈ El
corresponds to (w, v) ∈ E. Note that in our construction,
edges adjacent to the attributes have no auxiliary data; thus,
in the last case, S0[(w, v)] = Eh.Protect(Mh,0, Sh,0, w,
Ml,0[u][v]).
Protecting the components of the master key from the lower
scheme with the higher scheme represents the main mecha-
nism of the composition. It is also the building block for the
hierarchical implementation of secure deletion schemes with
arbitrary policy graphs, as explained in Section 3.5.
• E .Delete(Mt, St, At)
Execute Eh.Delete(Mt|Vh ,Eh , St|Vh ,Eh , At ∩ Ah) and
El.Delete(Mt|Vl ,El , St|Vl,El , At∩Al), and update the mas-
ter key and auxiliary state accordingly. Recall that when a
scheme is direct, the deletion operation does not change the
auxiliary state but only deletes part of the master key; hence,
the deletion operations are trivial.
• E .Protect(Mt, St, p, f )
If p ∈ Ph, then c ← Eh.Protect(Mt|Vh ,Eh , St|Vh ,Eh , p, f ).
Otherwise, when p ∈ Pl, we reconstruct Ml,t by computing
for a ∈ Al:
– If a /∈ AJ , then Ml,t[a] = Mt[a];
– If a ∈ AJ , then Ml,t[a] is computed as the concatena-
tion of all Eh.Access(Mt|Vh ,Eh , St|Vh ,Eh , w, St[(w, v)])
for (a, v) ∈ El,
where w = J(a). Then, compute c ← El.Protect(Ml,t,
St|Vl ,El , p, f ). Note that any node u ∈ Vl and any edge
(u, v) ∈ El, where u ∈ AJ , are not present in G; hence,
they are not deﬁned in St and its restriction St|Vl ,El . This
agrees with the invariant deﬁned in the last section that a di-
rect secure deletion scheme stores no data in the auxiliary
state for attributes and edges incident with them.2 Return c.
• E .Access(Mt, St, p, c):
This operation proceeds analogously to Protect:
– If p ∈ Ph, then compute f ←
Eh.Access(Mt|Vh ,Eh , St|Vh ,Eh , p, c);
– If p ∈ Pl, then reconstruct the master key Ml,t of El
as described in the E .Protect algorithm and compute
f ← El.Access(Ml,t, St|Vl ,El , p, c).
Finally, return f .
they are joined or in the new edges created in the composition, i.e.,
those in case (3) described above.
2In the general case, when there is auxiliary data associated with
attributes or their adjacent edges, we adjust the reconstruction of
Ml,t and Sl,t easily to match the modiﬁcation needed in that case
as described in the Init algorithm.
Figure 3: Two policy graphs (Vh, Eh) and (Vl, El) on the top
are combined to (V, E), shown below. Note that AJ = {x, u}
and PJ = {w, z}, and the composition map speciﬁes J(x) = z
and J(u) = w. Only the edges of case (3) in E .Init are drawn
here; the remaining edges are omitted and not affected by the
composition.
Theorem 2. The above policy-based secure deletion scheme E is
direct, complete, and secure if Eh and El are direct policy-based
secure deletion schemes,
Proof. It is easy to show that E is complete from the fact that Eh
and El are complete and from the way they are composed.
The proof of security proceeds in a sequence of games. In each
game, we modify slightly further E when an algorithm B plays the
role of a challenger in the experiment SecdelA,E (κ) against an ad-
versary A attacking E by running the experiments SecdelB,Eh (κ)
and/or SecdelB,El (κ); note that B plays the role of a challenger
against A for E and the role of an adversary for Eh and/or El.
Game 0. The experiment SecdelA,E (κ) proceeds according to
its deﬁnition for the E deﬁned above.
Game 1. The simulator B performs the experiment SecdelB,Eh (κ)
in the role of the adversary, while simulating SecdelA,E (κ) for
A. The scheme E is modiﬁed to use oracle access to protection
and deletion operations for Eh, and every time A moves from one
step to the next in her experiment SecdelA,E (κ), so does B in
SecdelB,Eh (κ).
In particular, for a set D given by A in the ﬁrst step of her ex-
periment, B outputs Dh ← D|Vh ,Eh in the ﬁrst step of his experi-
ment. The E .Init algorithm computes the auxiliary state as deﬁned
with the exception that B runs only (Ml,0, Sl,0) ← El.Init(κ, Gl),
whereas Sh,0 is obtained from the challenger in his experiment; at
any time, the respective induced calls to Eh.Delete, Eh.Protect,
and Eh.Access are replaced by oracle calls provided to B by the
challenger of SecdelB,Eh (κ).
This game is indistinguishable to A from the previous one as
the only difference is the way B handles the recursive calls to Eh
265which are perfectly simulated from the experiment B runs against
his challenger.
Game 2. This game is identical to the previous one except for
computing the auxiliary state for edges in case (3) in the E .Init algo-
rithm (see Figure 3). Previously, the auxiliary value for the edge in
G corresponding to (u, v) ∈ Eh ∪ El, for u ∈ AJ , was computed
as S0[(w, v)] = Eh.Protect(Mh,0, Sh,0, w, Ml,0[u][v]), where
(u, v) ∈ El for u ∈ AJ and w = J(u).
For the same u ∈ AJ and w = J(u), if deleted(G, D, w) =
TRUE, this is modiﬁed to:
S0[(w, v)] = Eh.Protect(Mh,0, Sh,0, w, r),
for a randomly chosen r ← {0, 1}∗ of the same length as the cor-
responding key component.
This game is indistinguishable to A from the previous one except
for a negligible probability due to the security of Eh; in particular,
for protection classes which are deleted before the master key is
revealed, A cannot distinguish between a chosen value or a random
value being protected under such a class.
Game 3. The simulator B performs the experiments SecdelB,Eh (κ)
and SecdelB,El (κ) while simulating SecdelA,E (κ) for A. In the
ﬁrst step of the main experiment, A returns a set D, from which B
derives his set Dh ← D|Vh ,Eh for the SecdelB,Eh (κ) experiment
as before; for the experiment SecdelB,El (κ), Dl is computed as the
union of all attributes a ∈ Al such that:
• a /∈ AJ ∧ a ∈ D; or
• a ∈ AJ ∧ deleted(G, D, J(a)) = TRUE.
That is, all attributes of Al which are present in G and belong to D
or which are attributes joined in the composition and whose protec-
tion classes from Gh become inaccessible when all attributes from
D are deleted. Once B returns Dh and Dl in the ﬁrst step of the re-
spective experiments against his challengers, he is able to compute
M0, S0 for E as deﬁned in the previous game. As before, every
time A moves from one step to the next in her experiment so does
B for his.
This game is indistinguishable to A from the previous one as the
only difference is the way B handles the respective induced calls
to El which are perfectly simulated from experiment that B runs
against his challengers.