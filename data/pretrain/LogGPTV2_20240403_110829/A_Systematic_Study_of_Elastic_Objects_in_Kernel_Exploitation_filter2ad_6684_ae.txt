### Optimized Text

#### Main Text
Existing methods are inadequate for effectively mitigating the threat posed by elastic kernel objects. Motivated by this finding, we introduce a novel lightweight defense mechanism. Our conclusion is that the threat of elastic objects can be, to some extent, mitigated if the kernel can place these objects into separate caches or zones.

#### Acknowledgements
We express our gratitude to the anonymous reviewers for their valuable feedback. This research was supported by the 2020 IBM PhD Fellowship Program, NSF Grant 1718459, and ONR Grant N00014-20-1-2008.

#### References
1. **Phoronix Test Suite (2015)**. [Online]. Available: <http://www.phoronix-test-suite.com/>
2. **Code and Exploits for ELOISE (2019)**. [Online]. Available: <https://github.com/chenyueqi/w2l>
3. **0x3f97 (2018)**. cve-2017-8890 root cause analysis. [Online]. Available: <https://0x3f97.github.io/exploit/2018/08/13/cve-2017-8890-root-case-analysis/>
4. **Thanassis Avgerinos, Sang Kil Cha, Brent Lim Tze Hao, and David Brumley (2011)**. AEG: Automatic Exploit Generation. In *Proceedings of the 2016 Network and Distributed System Security Symposium (NDSS)*.
5. **Tiffany Bao, Ruoyu Wang, Yan Shoshitaishvili, and David Brumley (2017)**. Your Exploit is Mine: Automatic Shellcode Transplant for Remote Exploits. In *Proceedings of the 38th IEEE Symposium on Security and Privacy (S&P)*.
6. **Ian Beer (2017)**. Exception-oriented exploitation on iOS. [Online]. Available: <https://googleprojectzero.blogspot.com/2017/04/exception-oriented-exploitation-on-ios.html>
7. **David Brumley, Pongsin Poosankam, Dawn Xiaodong Song, and Jiang Zheng (2008)**. Automatic Patch-Based Exploit Generation is Possible: Techniques and Implications. In *Proceedings of the 29th IEEE Symposium on Security and Privacy (S&P)*.
8. **Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David Brumley (2012)**. Unleashing Mayhem on Binary Code. In *Proceedings of the 33rd IEEE Symposium on Security and Privacy (S&P)*.
9. **Shuo Chen, Jun Xu, Emre C. Sezer, Prachi Gauriar, and Ravishankar K. Iyer (2005)**. Non-Control-Data Attacks Are Realistic Threats. In *Proceedings of the 14th USENIX Security Symposium (USENIX Security)*.
10. **Weiteng Chen, Xiaochen Zou, Guoren Li, and Zhiyun Qian (2020)**. KOOBE: Towards Facilitating Exploit Generation of Kernel Out-Of-Bounds Write Vulnerabilities. In *Proceedings of the 29th USENIX Security Symposium (USENIX Security)*.
11. **Yueqi Chen and Xinyu Xing (2019)**. SLAKE: Facilitating Slab Manipulation for Exploiting Vulnerabilities in the Linux Kernel. In *Proceedings of the 26th ACM SIGSAC Conference on Computer and Communications Security (CCS)*.
12. **Yueqi Chen, Xinyu Xing, and Jimmy Su (2019)**. Hands off and putting SLAB/SLUB fengshui in a blackbox. [Online]. Available: <https://i.blackhat.com/eu-19/Wednesday/eu-19-Chen-Hands-Off-And-Putting-SLAB-SLUB-Feng-Shui-In-A-Blackbox.pdf>
13. **Eric Chiang (2019)**. User Namespaces. [Online]. Available: <https://ericchiang.github.io/post/user-namespaces/>
14. **Haehyun Cho, Jinbum Park, Joonwon Kang, Tiffany Bao, Ruoyu Wang, Yan Shoshitaishvili, Adam Doupé, and Gail-Joon Ahn (2020)**. Exploiting Uses of Uninitialized Stack Variables in Linux Kernels to Leak Kernel Pointers. In *14th USENIX Workshop on Offensive Technologies (WOOT)*.
15. **Kees Cook (2017)**. Security things in Linux v4.13. [Online]. Available: <https://outflux.net/blog/archives/2017/09/05/security-things-in-linux-v4-13/>
16. **Kees Cook (2017)**. Security things in Linux v4.14. [Online]. Available: <https://outflux.net/blog/archives/2017/11/14/security-things-in-linux-v4-14/>
17. **Jonathan Corbet (2012)**. Supervisor mode access prevention. [Online]. Available: <https://lwn.net/Articles/517475/>
18. **Jonathan Corbet (2016)**. Exclusive page-frame ownership. [Online]. Available: <https://lwn.net/Articles/700647/>
19. **Jonathan Corbet (2017)**. The current state of kernel page-table isolation. [Online]. Available: <https://lwn.net/Articles/741878/>
20. **SSD Secure Disclosure (2017)**. SSD Advisory – Linux Kernel AF_PACKET Use-After-Free. [Online]. Available: <https://ssd-disclosure.com/archives/3484>
21. **dp304 (2018)**. Alternative to flexible array members for avoiding multiple allocations. [Online]. Available: <https://www.gamedev.net/forums/topic/696730-alternative-to-flexible-array-members-for-avoiding-multiple-allocations/>
22. **Jake Edge (2016)**. Hardened usercopy. [Online]. Available: <https://lwn.net/Articles/695991/>
23. **Stefan Esser (2016)**. iOS 10 - Kernel Heap Revisited.
24. **Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh (2016)**. Jump over ASLR: Attacking branch predictors to bypass ASLR. In *Proceedings of the 49th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO)*.
25. **Google (2019)**. syzkaller - kernel fuzzer. [Online]. Available: <https://github.com/google/syzkaller>
26. **Google (2020)**. syzbot Dashboard. [Online]. Available: <https://syzkaller.appspot.com/upstream>
27. **Daniel Gruss, Clémentine Maurice, and Anders Fogh (2016)**. Prefetch Side-Channel Attacks: Bypassing SMAP and Kernel ASLR. In *Proceedings of the 23rd ACM SIGSAC Conference on Computer and Communications Security (CCS)*.
28. **Mathieu Hautebas (2018)**. empty_list - exploit for p0 issue 1564 (CVE-2018-4243) iOS 11.0 - 11.3.1 kernel r/w. [Online]. Available: <https://github.com/Jailbreaks/empty_list>
29. **Sean Heelan, Tom Melham, and Daniel Kroening (2018)**. Automatic Heap Layout Manipulation for Exploitation. In *Proceedings of the 27th USENIX Security Symposium (USENIX Security)*.
30. **Sean Heelan, Tom Melham, and Daniel Kroening (2019)**. Gollum: Modular and Greybox Exploit Generation for Heap Overflows in Interpreters. In *Proceedings of the 26th ACM SIGSAC Conference on Computer and Communications Security (CCS)*.
31. **Jann Horn (2018)**. A cache invalidation bug in Linux memory management. [Online]. Available: <https://googleprojectzero.blogspot.com/2018/09/a-cache-invalidation-bug-in-linux.html>
32. **Jann Horn (2020)**. Linux Email list: CONFIG_DEBUG_INFO_BTF and CONFIG_GCC_PLUGIN_RANDSTRUCT. [Online]. Available: <https://www.spinics.net/lists/bpf/msg16648.html>
33. **Hong Hu, Zheng Leong Chua, Sendroiu Adrian, Prateek Saxena, and Zhenkai Liang (2015)**. Automatic Generation of Data-oriented Exploits. In *Proceedings of the 24th USENIX Security Symposium (USENIX Security)*.
34. **Ralf Hund, Carsten Willems, and Thorsten Holz (2013)**. Practical Timing Side Channel Attacks Against Kernel Space ASLR. In *Proceedings of the 34th IEEE Symposium on Security and Privacy (S&P)*.
35. **Nur Hussein (2017)**. Randomizing structure layout. [Online]. Available: <https://lwn.net/Articles/722293/>
36. **Kyriakos K. Ispoglou, Bader AlBassam, Trent Jaeger, and Mathias Payer (2018)**. Block Oriented Programming: Automating Data-Only Attacks. In *Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS)*.
37. **Yeongjin Jang, Sangho Lee, and Taesoo Kim (2016)**. Breaking Kernel Address Space Layout Randomization with Intel TSX. In *Proceedings of the 23rd ACM SIGSAC Conference on Computer and Communications Security (CCS)*.
38. **M. Jones (2010)**. User space memory access from the Linux kernel. [Online]. Available: <https://developer.ibm.com/technologies/linux/articles/l-kernel-memory-access/>
39. **Vasileios P. Kemerlis, Michalis Polychronakis, and Angelos D. Keromytis (2014)**. ret2dir: Rethinking Kernel Isolation. In *Proceedings of the 23rd USENIX Security Symposium (USENIX Security)*.
40. **Kengiter and adityapakki (2019)**. Crix: Detecting Missing-Check Bugs in OS Kernels. [Online]. Available: <https://github.com/umnsec/crix>
41. **Andrey Konovalov (2017)**. Exploiting the Linux kernel via packet sockets. [Online]. Available: <https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html>
42. **Andrey Konovalov (2017)**. A proof-of-concept local root exploit for CVE-2017-6074. [Online]. Available: <https://github.com/xairy/kernel-exploits/blob/master/CVE-2017-6074/poc.c>
43. **Andrey Konovalov (2018)**. A proof-of-concept exploit for CVE-2017-18344. [Online]. Available: <https://github.com/xairy/kernel-exploits/blob/master/CVE-2017-18344/poc.c>
44. **Azeria Labs (2020)**. Grooming the iOS Kernel Heap. [Online]. Available: <https://azeria-labs.com/grooming-the-ios-kernel-heap/>
45. **Lexfo (2018)**. CVE-2017-11176: A step-by-step Linux Kernel exploitation. [Online]. Available: <https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part1.html>
46. **Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg (2018)**. Meltdown: Reading Kernel Memory from User Space. In *Proceedings of the 27th USENIX Security Symposium (USENIX Security)*.
47. **Kangjie Lu and Hong Hu (2019)**. Where Does It Go? Refining Indirect-Call Targets with Multi-Layer Type Analysis. In *Proceedings of the 26th ACM SIGSAC Conference on Computer and Communications Security (CCS)*.
48. **Kangjie Lu, Aditya Pakki, and Qiushi Wu (2019)**. Detecting Missing-Check Bugs via Semantic- and Context-Aware Criticalness and Constraints Inferences. In *Proceedings of the 28th USENIX Security Symposium (USENIX Security)*.
49. **Kangjie Lu, Marie-Therese Walter, David Pfaff, Stefan Nürnberger, Wenke Lee, and Michael Backes (2017)**. Unleashing Use-Before-Initialization Vulnerabilities in the Linux Kernel Using Targeted Stack Spraying. In *Proceedings of the 2017 Network and Distributed System Security Symposium (NDSS)*.
50. **Wolfgang Mauerer (2008)**. *Professional Linux Kernel Architectures*. Chapter 12.11.
51. **Larry McVoy and Carl Staelin (2015)**. LMbench - Tools for Performance Analysis. [Online]. Available: <http://lmbench.sourceforge.net/>
52. **Patrick Mochel and Mike Murphy (2020)**. sysfs - The filesystem for exporting kernel objects. [Online]. Available: <https://www.kernel.org/doc/Documentation/filesystems/sysfs.txt>
53. **Vitaly Nikolenko (2016)**. CVE-2016-6187: Exploiting Linux kernel heap off-by-one. [Online]. Available: <https://duasynt.com/blog/cve-2016-6187-heap-off-by-one-exploit>
54. **Vitaly Nikolenko (2018)**. Dissecting a 17-year-old kernel bug. [Online]. Available: <https://duasynt.com/blog/linux-kernel-heap-spray>
55. **Vitaly Nikolenko (2018)**. Linux Kernel universal heap spray. [Online]. Available: <https://duasynt.com/blog/linux-kernel-heap-spray>
56. **OpenWall (2020)**. John the Ripper password cracker. [Online]. Available: <https://www.openwall.com/john/>
57. **Alexander Popov (2017)**. CVE-2017-2636: Exploit the race condition in the n_hdlc Linux kernel driver bypassing SMEP. [Online]. Available: <https://a13xp0p0v.github.io/2017/03/24/CVE-2017-2636.html>
58. **Sergej Proskurin, Marius Momeu, Seyedhamed Ghavamnia, Vasileios P. Kemerlis, and Michalis Polychronakis (2020)**. xMP: Selective memory protection for kernel and user space. In *Proceedings of the 41st IEEE Symposium on Security and Privacy (S&P)*.
59. **Dusan Repel, Johannes Kinder, and Lorenzo Cavallaro (2017)**. Modular Synthesis of Heap Exploits. In *ACM SIGSAC Workshop on Programming Languages and Analysis for Security (PLAS)*.
60. **Microsoft Research (2020)**. Z3. [Online]. Available: <https://github.com/Z3Prover/z3>
61. **Chris Salls (2017)**. Exploiting CVE-2017-5123 with full protections. SMEP, SMAP, and the Chrome Sandbox! [Online]. Available: <https://salls.github.io/Linux-Kernel-CVE-2017-5123/>
62. **Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna (2015)**. Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware. In *Proceedings of the 2015 Network and Distributed System Security Symposium (NDSS)*.
63. **Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna (2016)**. SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis. In *Proceedings of the 37th IEEE Symposium on Security and Privacy (S&P)*.
64. **Spudd86 (2010)**. Flexible array member in C-structure. [Online]. Available: <https://stackoverflow.com/questions/3047530/flexible-array-member-in-c-structure>
65. **Richard M. Stallman (2019)**. GNU Debugger. [Online]. Available: <https://www.gnu.org/software/gdb/>
66. **Nick Stephens, John Grosen, Christopher Salls, Audrey Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna (2016)**. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In *Proceedings of the 2016 Network and Distributed System Security Symposium (NDSS)*.
67. **syzbot (2018)**. KASAN: slab-out-of-bounds Write in crypto_dh_encode_key. [Online]. Available: <https://syzkaller.appspot.com/bug?id=a84d6ad70b281bfc5632f272f745104fb43d219d>
68. **syzbot (2018)**. KASAN: slab-out-of-bounds Write in mpol_parse_str. [Online]. Available: <https://syzkaller.appspot.com/bug?id=3d67d693e0529df8ac89ba55b00b54e5d967e021>
69. **syzbot (2018)**. KASAN: slab-out-of-bounds Write in pipe_write. [Online]. Available: <https://syzkaller.appspot.com/bug?id=422a020e119fbac4c15d8fed114cc1696fe5c51a>
70. **syzbot (2018)**. KASAN: slab-out-of-bounds Write in sha512_final. [Online]. Available: <https://syzkaller.appspot.com/bug?id=e4be30826c1b7777d69a9e3e20bc7b708ee8f82c>
71. **syzbot (2018)**. KASAN: use-after-free Read in __lock_acquire (2). [Online]. Available: <https://syzkaller.appspot.com/bug?id=1379b6b21a2ffecd1ea4e2b564cc7e35d9f388b2>
72. **syzbot (2018)**. KASAN: use-after-free Read in snd_timer_open. [Online]. Available: <https://syzkaller.appspot.com/bug?id=e9287fe57ad2f862eedb05012481132486f3b887>
73. **syzbot (2018)**. KASAN: use-after-free Write in bpf_tcp_close. [Online]. Available: <https://syzkaller.appspot.com/bug?id=6a6fd266a962be281b17c864a073675150e36ca5>
74. **syzbot (2018)**. KASAN: use-after-free Write in dst_release. [Online]. Available: <https://syzkaller.appspot.com/bug?id=bf967d2c5ba62946c61152534c8b84823d848f05>
75. **syzbot (2019)**. KASAN: use-after-free Write in __xfrm_policy_unlink. [Online]. Available: <https://syzkaller.appspot.com/bug?id=ebeba334a8a886e3d5dc25641e201e894d4d9657>
76. **syzbot (2020)**. KASAN: use-after-free Read in route4_get. [Online]. Available: <https://syzkaller.appspot.com/bug?id=5bb09c0c5b65ab2ce628ba26fe7cbd06144bd952>
77. **PaX Team (2000)**. Design & implementation of PAGEEXEC.
78. **Yan Wang, Chao Zhang, Xiaobo Xiang, Zixuan Zhao, Wenjie Li, Xiaorui Gong, BingChang Liu, Kaixiang Chen, and Wei Zou (2018)**. Revery: From Proof-of-Concept to Exploitable. In *Proceedings of the 25nd ACM SIGSAC Conference on Computer and Communications Security (CCS)*.
79. **Wei Wu, Yueqi Chen, Xinyu Xing, and Wei Zou (2019)**. KEPLER: Facilitating Control-flow Hijacking Primitive Evaluation for Linux Kernel Vulnerabilities. In *Proceedings of the 28th USENIX Security Symposium (USENIX Security)*.
80. **Wei Wu, Yueqi Chen, Jun Xu, Xinyu Xing, Wei Zou, and Xiaorui Gong (2018)**. FUZE: Towards Facilitating Exploit Generation for Kernel Use-After-Free Vulnerabilities. In *Proceedings of the 27th USENIX Security Symposium (USENIX Security)*.
81. **Wen Xu, Juanru Li, Junliang Shu, Wenbo Yang, Tianyi Xie, Yuanyuan Zhang, and Dawu Gu (2015)**. From Collision To Exploitation: Unleashing Use-After-Free Vulnerabilities in Linux Kernel. In *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS)*.
82. **Insu Yun, Dhaval Kapil, and Taesoo Kim (2020)**. Automatic Techniques to Systematically Discover New Heap Exploitation Primitives. In *Proceedings of the 29th USENIX Security Symposium (USENIX Security)*.

#### Communication Channels
**Summary and Categorization of Communication Channels**

**User Space Memory Access APIs**
- These functions, such as `copy_to_user()` and `copyout()`, are used to transfer data between kernel and user space. For example, `copy_to_user()` copies `n` bytes of data from a kernel address to a user address. The kernel ensures the destination memory region is mapped in userspace, then maps this region to kernel space and disables SMEP/SMAP protections to avoid errors. `copyout()` works similarly but transfers `nbytes` of data from `kernel_addr` to `user_addr`.
- Other similar APIs, like `put_user_4`, transfer a fixed amount of data (e.g., 4 bytes) at compile time and are not manipulable. We exclude these non-manipulable APIs and list only those that can be manipulated in Table 3.

**Netlink Socket Family**
- This channel uses the networking framework for kernel-user communication. Netlink passes various status information about internal kernel activities to user processes, such as device registration and hardware-related events. While typically requiring `CAP_NET_ADMIN` capability, unprivileged users can bypass this restriction by creating a user namespace (`CLONE_NEWUSER`). In Linux distributions like Ubuntu and Debian, namespaces are widely deployed, allowing unprivileged users with `CAP_NET_ADMIN` to communicate with the kernel through netlink messages. Table 3 summarizes all kernel functions in this category, noting that some channels involve sequential function calls.

**General Networking**
- Unlike the netlink socket family, which is limited to local machine communication, general networking APIs enable remote data transfer. The kernel sends and receives network packets by manipulating a socket buffer. For example, when sending packets, the kernel allocates a socket buffer to store user data, prepends/appends protocol control and user data, performs validation, and then copies the data to a hardware buffer. These APIs allow adversaries to disclose data to remote hosts. Table 3 lists all functions in this category and specifies the amount of kernel data that can be encapsulated into network packets.

**Table 3: Summary of FreeBSD/Linux/XNU Critical Kernel Functions for Data Migration from Kernel to User Space**
| **Types of Channel** | **Function Prototypes** |
|----------------------|-------------------------|
| **User Space Memory Access APIs** | `unsigned long copy_to_user(void __user* to, const void* from, int n);`<br>`int copyout(const void *kernel_addr, user_addr_t user_addr, vm_size_t nbytes);`<br>`int put_user_4(uint32_t value, uint32_t __user *addr);` |
| **Netlink** | `int nla_put(struct sk_buff* skb, int attrtype, int attrlen, const void* data);`<br>`void* nlmsg_data(const struct nlmsghdr* nlh);`<br>`void* nla_data(const structure nlattr *nla);` |
| **General Networking** | `void* skb_put_data(struct sk_buff* skb, const void* data, unsigned int len);`<br>`void* skb_put(struct sk_buff* skb, unsigned int len);`<br>`void* memcpy(void* dest, const void* src, size_t count);` |

In the "Function Prototypes" column, bold parameters specify the addresses from which kernel data originate, and wavy lines indicate the amount of kernel data that an attacker can potentially disclose.