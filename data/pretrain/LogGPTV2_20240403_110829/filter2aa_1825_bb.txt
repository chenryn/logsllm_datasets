void PlaybackState::PlayMelody() {
PDEVICE_OBJECT beepDevice;
UNICODE_STRING beepDeviceName = RTL_CONSTANT_STRING(DD_BEEP_DEVICE_NAME_U);
PFILE_OBJECT beepFileObject;
auto status = IoGetDeviceObjectPointer(&beepDeviceName, GENERIC_WRITE,
&beepFileObject, &beepDevice);
if (!NT_SUCCESS(status)) {
return;
}
PVOID objects[] = { &m_counter, &m_stopEvent };
Chapter 8: Advanced Programming Techniques (Part 1)
253
IO_STATUS_BLOCK ioStatus;
BEEP_SET_PARAMETERS params;
for (;;) {
status = KeWaitForMultipleObjects(2, objects, WaitAny, Executive,
KernelMode, FALSE, nullptr, nullptr);
if (status == STATUS_WAIT_1) {
break;
}
PLIST_ENTRY link;
{
Locker locker(m_lock);
link = RemoveHeadList(&m_head);
NT_ASSERT(link != &m_head);
}
auto note = CONTAINING_RECORD(link, FullNote, Link);
if (note->Frequency == 0) {
NT_ASSERT(note->Duration > 0);
LARGE_INTEGER interval;
interval.QuadPart = -10000LL * note->Duration;
KeDelayExecutionThread(KernelMode, FALSE, &interval);
}
else {
params.Duration = note->Duration;
params.Frequency = note->Frequency;
int count = max(1, note->Repeat);
KEVENT doneEvent;
KeInitializeEvent(&doneEvent, SynchronizationEvent, FALSE);
for (int i = 0; i UserEvent == &doneEvent);
status = IoCallDriver(beepDevice, irp);
if (!NT_SUCCESS(status)) {
break;
Chapter 8: Advanced Programming Techniques (Part 1)
254
}
if (status == STATUS_PENDING) {
KeWaitForSingleObject(&doneEvent, Executive,
KernelMode, FALSE, nullptr);
}
LARGE_INTEGER delay;
delay.QuadPart = -10000LL * note->Duration;
KeDelayExecutionThread(KernelMode, FALSE, &delay);
if (i Delay != 0) {
delay.QuadPart = -10000LL * note->Delay;
KeDelayExecutionThread(KernelMode, FALSE, &delay);
}
}
}
ExFreeToPagedLookasideList(&m_lookaside, note);
}
ObDereferenceObject(beepFileObject);
}
The last piece of the puzzle is the PlaybackState::Stop method that signals the thread to exit:
void PlaybackState::Stop() {
if (m_hThread) {
//
// signal the thread to stop
//
KeSetEvent(&m_stopEvent, 2, FALSE);
//
// wait for the thread to exit
//
PVOID thread;
auto status = ObReferenceObjectByHandle(m_hThread, SYNCHRONIZE,
*PsThreadType, KernelMode, &thread, nullptr);
if (!NT_SUCCESS(status)) {
KdPrint((DRIVER_PREFIX "ObReferenceObjectByHandle error (0x%X)\n",
status));
}
else {
KeWaitForSingleObject(thread, Executive, KernelMode, FALSE, nullptr\
);
Chapter 8: Advanced Programming Techniques (Part 1)
255
ObDereferenceObject(thread);
}
ZwClose(m_hThread);
m_hThread = nullptr;
}
}
If the thread exists (m_hThread is non-NULL), then we set the event (KeSerEvent). Then we wait for
the thread to actually terminate. This is technically unnecessary because the thread was created with
IoCreateSystemThread, so there is no danger the driver is unloaded prematurely. Still, it’s worthwhile
showing how to get the pointer to the thread object given a handle (since KeWaitForSingleObject
requires an object). It’s important to remember to call ObDereferenceObject once we don’t need the
pointer anymore, or the thread object will remain alive forever (keeping its process and other resources
alive as well).
Client Code
Here are some examples for invokign the driver (error handling ommitted):
#include 
#include 
#include "..\KMelody\MelodyPublic.h"
int main() {
HANDLE hDevice = CreateFile(MELODY_SYMLINK, GENERIC_WRITE, 0,
nullptr, OPEN_EXISTING, 0, nullptr);
Note notes[10];
for (int i = 0; i 
// copied from 
enum SYSTEM_INFORMATION_CLASS {
SystemProcessInformation = 5,
};
typedef struct _SYSTEM_PROCESS_INFORMATION {
ULONG NextEntryOffset;
Chapter 8: Advanced Programming Techniques (Part 1)
259
ULONG NumberOfThreads;
UCHAR Reserved1[48];
UNICODE_STRING ImageName;
KPRIORITY BasePriority;
HANDLE UniqueProcessId;
PVOID Reserved2;
ULONG HandleCount;
ULONG SessionId;
PVOID Reserved3;
SIZE_T PeakVirtualSize;
SIZE_T VirtualSize;
ULONG Reserved4;
SIZE_T PeakWorkingSetSize;
SIZE_T WorkingSetSize;
PVOID Reserved5;
SIZE_T QuotaPagedPoolUsage;
PVOID Reserved6;
SIZE_T QuotaNonPagedPoolUsage;
SIZE_T PagefileUsage;
SIZE_T PeakPagefileUsage;
SIZE_T PrivatePageCount;
LARGE_INTEGER Reserved7[6];
} SYSTEM_PROCESS_INFORMATION, * PSYSTEM_PROCESS_INFORMATION;
extern "C" NTSTATUS ZwQuerySystemInformation(
SYSTEM_INFORMATION_CLASS info,
PVOID buffer,
ULONG size,
PULONG len);
Notice there are lots of “resevred” members in SYSTEM_PROCESS_INFORMATION. We’ll manage with
what we get, but you can find the full data structure in the Process Hacker project.
EnumProc starts by querying the number of bytes needed by calling ZwQuerySystemInformation
with a null buffer and zero size, getting the last parameter as the required size:
void EnumProcesses() {
ULONG size = 0;
ZwQuerySystemInformation(SystemProcessInformation, nullptr, 0, &size);
size += 1 UniqueProcessId),
info->SessionId, info->HandleCount,
info->NumberOfThreads, info->ImageName);
count++;
if (info->NextEntryOffset == 0)
break;
info = (SYSTEM_PROCESS_INFORMATION*)((PUCHAR)info + info->NextEntryOffset);
}
DbgPrint("Total Processes: %u\n", count);
We output some of the details provided in the SYSTEM_PROCESS_INFORMATION structure and count the
nnumber of processes while we’re at it. The only thing left to do in this simple example is to clean up:
}
ExFreePool(buffer);
}
As mentioned, DriverEntry is simple:
Chapter 8: Advanced Programming Techniques (Part 1)
261
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
UNREFERENCED_PARAMETER(DriverObject);
UNREFERENCED_PARAMETER(RegistryPath);
EnumProcesses();
return STATUS_UNSUCCESSFUL;
}
Given this knowledge, we can make the KMelody driver a bit better by creating our thread in a Csrss.exe
process for the current session, instead of the first client process that comes in. This is better, since Csrss
always exists, and is in fact a critical process - one that if killed for whatever reason, causes the system to
crash.
Killing Csrss is not easy, since it’s a protected process starting with Windows 8.1, but kernel code can
certainly do that.
1. Modify the KMelody driver to create the thread in a Csrss process for the current session.
Search for Csrss with ZwQuerySystemInformation and create the thread in that
process.
2. Add support for multiple sessions, where there is one playback thread per ses-
sion. Hint: call ZwQueryInformationProcess with ProcessSessionId to find
out the session a process is part of. Manage a list of PlaybackState ob-
jects, one for each session. You can also use the undocumented (but exported)
PsGetCurrentProcessSessionId API.
Summary
In this chapter, we were introduced to some programming techniques that are useful in many types of
drivers. We’re not done with these techniques - there will be more in chapter 11. But for now, we can
begin using some kernel-provided notifications, starting with Process and Thread notifications in the next