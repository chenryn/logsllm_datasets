### 2. Performance Metrics
- **Metric 1:** 220.2 (+2%)
- **Metric 2:** 153.3 (+13%)
- **Metric 3:** 370.2 (+28%)
- **Metric 4:** 351.6 (+0%)
- **Metric 5:** 249.4 (+35%)
- **Overall Improvement:** +11%

### 3. Additional Metrics
- **Metric 6:** 271.8
- **Metric 7:** 586.3
- **Metric 8:** 498.7
- **Metric 9:** 507.4
- **Metric 10:** 366.8
- **Metric 11:** 325.8
- **Metric 12:** 345.1
- **Metric 13:** 535.5
- **Metric 14:** 271.8 (+0%)
- **Metric 15:** 603.1 (+3%)
- **Metric 16:** 572.0 (+15%)
- **Metric 17:** 661.7 (+30%)
- **Metric 18:** 461.5 (+26%)
- **Metric 19:** 328.6 (+1%)
- **Metric 20:** 353.1 (+2%)
- **Metric 21:** 534.6 (+0%)
- **Overall Improvement (Additional):** +9%

### 8.1 Counterfeit Object-oriented Programming
Control-Flow Integrity (CFI) approaches targeting C++ must address advanced attackers using Counterfeit Object-oriented Programming (COOP) attacks [11, 38]. This class of attacks exploits defenses that do not accurately model C++ semantics. We argue that vps significantly reduces the attack surface, making practical COOP attacks infeasible.

A successful COOP attack requires an attacker to control a container filled with objects, where a loop invokes a virtual function on each object. The loop can be an actual loop (main loop gadget) or achieved through recursion (recursion gadget). Both types are referred to as loop gadgets. The attacker places counterfeit objects in the container, allowing them to hijack control flow when the loop executes each object’s virtual function. Data transfer between objects is achieved by overlapping their fields.

vps imposes the following restrictions on an attacker:
1. **Preventing Filling the Container with Counterfeit Objects:**
   - The safe memory does not contain stored vtblptrs for objects not created at legitimate creation sites.
   - An attacker has two options under vps:
     - Arbitrarily invoke constructors and create objects (restricted to programs with scripting capabilities).
     - Coax the program into creating all needed objects, requiring scanning data memory without crashing the program and filling the container with pointers to these objects.

2. **Prohibiting Overlapping Objects:**
   - Objects can only be created by legitimate constructors, limiting data transfer to argument registers or scratch memory.
   - Data passing via argument registers works only if the loop gadget does not modify the argument registers between invocations, and the virtual functions leave results in the correct argument registers upon return.
   - Passing data via scratch memory limits the attack to virtual functions working on memory areas, with the pointer to the scratch memory passed via an argument register or a field in the object. Overwriting the field can lead to a crash if the application uses the modified object.

3. **Checking vtblptr at Each vcall Instruction:**
   - Only the virtual function at the specific vtable offset used by the vcall is allowed, preventing attackers from "shifting" vtables to invoke alternative entries. This policy is comparable to vfGuard [35].

In summary, vps restricts three crucial components of COOP: object creation, data transfer, and loop gadget selection. Since all proof-of-concept exploits by Schuster et al. [38] rely on object overlapping for data transfer, vps successfully prevents them. Given that vps raises the bar even higher than vfGuard, we argue that it makes currently existing COOP attacks infeasible.

We found that multiple virtual callsites missed by VTV (as shown in Section 7.1) reside in a loop in a destructor function, similar to the main loop gadget example used by Schuster et al. [38]. These missed callsites can be leveraged as a main loop gadget even with VTV enabled, highlighting the need for defense-in-depth.

### 8.2 Limitations
Our proof-of-concept implementation of the instrumentation ignores object deletion, as it does not affect the consistency of the safe memory. When an object is deleted, its old vtblptr remains in safe memory. If an attacker controls the memory of the deleted object, they can craft a new object using the same vtable. This attack is analogous to corrupting an object’s fields and does not allow the attacker to hijack control. Thus, while our approach does not completely prevent use-after-free, it forces the attacker to reuse the type of the object previously stored in the attacked memory.

Another limitation lies in the runtime verification of candidate vcall sites. If an attacker uses an unverified vcall instruction, they can force the analysis instrumentation to detect a "false positive" vcall and remove the security instrumentation for this instruction, leaving the vcall unprotected. This attack only works for vcall sites that are unverified in the static analysis and have never been executed before. Mitigating this issue requires improving coverage during dynamic profiling analysis, which can be achieved by running test cases for the protected program or through techniques such as fuzzing [22, 36]. Note that this attack requires specific knowledge of an unverified vcall; if the attacker guesses wrong and attacks a known vcall, we detect and log the attack.

vps inherits some limitations from Dyninst, such as its inability to instrument functions that catch or throw C++ exceptions and its inability to instrument functions for which it fails to reconstruct a CFG. These limitations are not fundamental to vps and can be resolved with additional engineering effort.

Finally, our safe memory region implementation, an orthogonal research topic [27], can be enhanced to provide stronger protection against probing attacks [20, 32]. For example, using hardware features such as Memory Protection Keys (MPK) [10] can enhance security. In the current implementation, an adversary might still overwrite values in the safe memory region under certain circumstances.

### 9. Related Work
- **Marx [33]:** Reconstructs class hierarchies from binaries for VTable Protection and Type-safe Object Reuse. However, the analysis is incomplete and falls back to PathArmor [45] for missing results. Marx's approach leaves considerable room for attackers in large class hierarchies. In contrast, vps does not rely on class hierarchy information and provides stronger security by only allowing exactly correct types, and it protects all objects, not just the heap.
  
- **VTint [48]:** Instruments vtables with IDs to check their validity but allows exchanging the original vtblptr with a new pointer to an existing vtable. VTint breaks the binary in case of false positives.
  
- **VTPin [37]:** Overwrites the vtblptr whenever an object is freed to protect against use-after-free, but it requires RTTI and does not prevent vtblptr overwrites in general.
  
- **vfGuard [35]:** Identifies vtables and builds a mapping of valid target functions at each vtable offset. Unlike vps, vfGuard allows fake vtables as long as each entry appears in a valid vtable at the same offset. False positives can break the binary.
  
- **T-VIP [17]:** Protects vcalls against fake vtables but breaks the binary when vtables reside in writable memory. T-VIP uses potentially bypassable heuristics.
  
- **VCI [14]:** Allows a specific set of vtables at each vcall, mimicking VTV [43]. When the analysis cannot rebuild the sets precisely, VCI falls back to vfGuard. False positive virtual callsites in VCI break the application, and incomplete class hierarchies can also cause issues. In contrast, vps allows calls through any legitimately created object and does not allow changing the vtblptr to another one in the set.
  
- **VTV [43]:** A GCC compiler pass that only allows a statically determined set of vtables at each vcall, similar to most binary-only approaches.
  
- **CFIXX [7]:** A state-of-the-art source-based C++ defense that stores vtblptrs in safe memory and fetches them at each callsite. CFIXX prevents but does not detect vtable hijacking. As an LLVM compiler extension, CFIXX cannot protect applications without source code. While CFIXX and vps offer similar security, our binary-level analysis is novel and must consider both direct and indirect vtable accesses.

### 10. Conclusion
In this paper, we presented vps, a practical binary-level defense against C++ vtable hijacking. Unlike prior work that restricts the targets of virtual calls, vps protects objects at creation time and only allows virtual calls reachable by the object, sidestepping accuracy problems. vps improves correctness by handling false positives at vcall verification. Our evaluation uncovered several inaccuracies in VTV, a source-based approach considered the state-of-the-art among C++ defenses. We release vps as open-source software to foster further research.

### Acknowledgements
This work was supported by the German Research Foundation (DFG) within the framework of the Excellence Strategy of the Federal Government and the States – EXC 2092 CaSa – 39078197, by the United States Office of Naval Research under contracts N00014-17-1-2782 and N00014-17-S-B010 “BinRec”, and by the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme under grant agreement No. 786669 (ReAct), No. 825377 (UNICORE), and No. 640110 (BASTION). Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of any of the sponsors or their affiliates.

### References
[1] 2018. Executable and Linkable Format (ELF). https://www.cs.cmu.edu/afs/cs/academic/class/15213-s00/doc/elf.pdf.
[2] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. 2005. Control-Flow Integrity. In ACM Conference on Computer and Communications Security (CCS).
...
[49] Chao Zhang, Dawn Song, Scott A Carr, Mathias Payer, Tongxin Li, Yu Ding, and Chengyu Song. 2016. VTrust: Regaining Trust on Virtual Calls. In Symposium on Network and Distributed System Security (NDSS).