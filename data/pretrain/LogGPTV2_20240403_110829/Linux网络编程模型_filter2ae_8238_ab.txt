这部分主要来源于参考链接-`Linux编程之select`  
无论是以后讲到的`poll`还是`epoll`，原理和`select`基本相同，所以这里简单用一个流程图来表述一下`select`使用
            User Thread           Kernel 
               |                    |
               |       select       |
             socket ------------>   + 
               |                    | 
          block|                    | 等待数据
               |       Ready        | 
               +     +
               |                    | 
               |      Response      |
               +    
    #include 
    #include 
    #include 
    int select(int maxfdp, fd_set *readset, fd_set *writeset, fd_set *exceptset,struct timeval *timeout);
参数说明：  
`maxfdp`：被监听的文件描述符的总数，它比所有文件描述符集合中的文件描述符的最大值大1，因为文件描述符是从0开始计数的；  
`readfds/writefds/exceptset`：分别指向可读、可写和异常等事件对应的描述符集合。  
`timeout`:用于设置`select`函数的超时时间，即告诉内核`select`等待多长时间之后就放弃等待。`timeout ==
NULL`表示等待无限长的时间  
`timeval`结构体定义如下：
    struct timeval
    { 
        long tv_sec;   /*秒 */
        long tv_usec;  /*微秒 */
    };
返回值：超时返回0;失败返回`-1`；成功返回大于`0`的整数，这个整数表示就绪描述符的数目。  
`select`使用时有几个比较重要的宏
    int  FD_ISSET(int fd, fd_set *set); -> 测试fd是否在set中
    void FD_SET(int fd, fd_set *set); -> 添加fd进set中
    void FD_ZERO(fd_set *set); -> 将set置零
给出一个案例来详细说明`select`的使用
`select_server.c`
    do
    {
        server_fd = socket(AF_INET, SOCK_STREAM, 0);
        if (server_fd == -1)
        {
            handle_error("socket");
            break;
        }
        memset((void*)&server_addr, 0, sizeof(server_addr));
        server_addr.sin_family = AF_INET;
        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
        server_addr.sin_port = htons(SERVER_PORT);
        if (-1 == bind(server_fd, 
                    (struct sockaddr*)&server_addr, 
                    sizeof(server_addr)))
        {
            handle_error("bind");
            break;
        }
        if (-1 == listen(server_fd, LISTEN_BACKLOG))
        {
            handle_error("listen");
            break;
        }
        maxfd = server_fd; 
        maxi = -1;
        for (i = 0; i  maxfd)
                    maxfd = client_fd; 
                if (i > maxi)
                    maxi = i; 
                if (--nready  maxi)
                    maxi = i; /* max index in client[] array */
                if (--nready <= 0)
                    continue; /* no more readable descriptors */
            }
            // 轮询所有使用中的事件
            for (i = 1; i <= maxi; i++)
            {
                if ((monitfd = client[i].fd) < 0)
                    continue;
                if (client[i].revents & (POLLRDNORM | POLLERR))
                {
                    if ((n = read(monitfd, buf_read, READ_MAX_SIZE)) < 0)
                    {
                        if (errno == ECONNRESET)
                        {
                            printf("client[%d] aborted connectionn", i);
                            close(monitfd);
                            client[i].fd = -1;
                        }
                        else
                            printf("read error");
                    }
                    else if (n == 0)
                    {
                        printf("client[%d] closed connectionn", i);
                        close(monitfd);
                        client[i].fd = -1;
                    }
                    else
                    {
                        printf("Client: %sn", buf_read);
                        write(monitfd, buf_write, strlen(buf_write));
                    }
                    if (--nready <= 0)
                        break;
                }
            }
        }
    } while (0);
`poll`解决了`select`使用中`socket`数目的限制，但是`poll`也存在着和`select`一样的致命缺点，需要浪费大量的cpu时间去轮询监控的`socket`，随着监控的`socket`数目增加，性能线性增加，所以为了解决这个问题，`epoll`被开发出来了
###  epoll
`epoll`是`poll`的升级版本，拥有`poll`的优势，而且不需要轮询来消耗不必要的`cpu`，极大的提高了工作效率  
目前`epoll`存在两种工作模式
  1. `LT`(`level triggered`，水平触发模式)是缺省的工作方式，并且同时支持`block`和`non-block socket`。在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的`fd`进行`I/O`操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。比如内核通知你其中一个fd可以读数据了，你赶紧去读。你还是懒懒散散，不去读这个数据，下一次循环的时候内核发现你还没读刚才的数据，就又通知你赶紧把刚才的数据读了。这种机制可以比较好的保证每个数据用户都处理掉了。
  2. `ET`(`edge-triggered`，边缘触发模式)是高速工作方式，只支持`no-block socket`。在这种模式下，当描述符从未就绪变为就绪时，内核通过`epoll`告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，等到下次有新的数据进来的时候才会再次出发就绪事件。简而言之，就是内核通知过的事情不会再说第二遍，数据错过没读，你自己负责。这种机制确实速度提高了，但是风险相伴而行。
`epoll`使用时需要使用到的API和相关数据结构
    //用户数据载体
    typedef union epoll_data {
       void    *ptr;
       int      fd;
       uint32_t u32;
       uint64_t u64;
    } epoll_data_t;
    //fd装载入内核的载体
     struct epoll_event {
         uint32_t     events;    /* Epoll events */
         epoll_data_t data;      /* User data variable */
     };
     /* 创建一个epoll的句柄，size用来告诉内核需要监听的数目一共有多大。当创建好epoll句柄后，
    它就是会占用一个fd值，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。*/
    int epoll_create(int size);  
    /*epoll的事件注册函数*/
    int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event); 
    /*等待事件的到来，如果检测到事件，就将所有就绪的事件从内核事件表中复制到它的第二个参数events指向的数组*/
    int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);
`epoll`的事件注册函数`epoll_ctl`，第一个参数是`epoll_create`的返回值，第二个参数表示动作，使用如下三个宏来表示：
    POLL_CTL_ADD    //注册新的fd到epfd中；
    EPOLL_CTL_MOD    //修改已经注册的fd的监听事件；
    EPOLL_CTL_DEL    //从epfd中删除一个fd；
其中结构体`epoll_event`中`events`的值
    EPOLLIN     //表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；