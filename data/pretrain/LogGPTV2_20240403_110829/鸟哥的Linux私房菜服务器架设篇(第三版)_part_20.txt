图 3.2-5、区域联机计算机名称与工作组设定内容
基本上， Windows 的网络参数设定是相当的简单的！鸟哥这里仅介绍修改 IP 与
相关网络参数的方式而已。 未来如果还需要搭配 DHCP 主机、NAT 主机等等服务器的
设定时，会再次的提醒用户 Windows 的设定信息喔！尤其是 SAMBA 主机的设定中，
Windows 的网络识别就显的相当的重要呢！
2002/07/22：初次完成了局域网络架设的基本架构
2003/08/17：将整个文章重新修订，移除一些已经在 网络基础 里面谈过的内容，并且新增了表头
的说明。
2003/08/20：加入课后练习了。
2003/09/19：加入参考用解答咯！
2005/05/05：将原本介绍并行线与跳线的 N-Way 错误，订正为 auto MDI/MDI-x
2006/07/13：将旧的文章移动到 此处。
2006/07/14：加入 Linux distribution 的说明，并且重新校稿更新内容，如布线部分。
2006/07/15：取消 Windows 2000, 98。
2010/08/16：将原本旧的基于 CentOS 4.x 的版本移动于此处
2010/08/20：由于很多数据与前一章有重复，有些数据太过老旧，所以重新编辑过此文章。
2011/07/15：将原本的基于 CentOS 5.x 的文章移动到此处
2011/07/15：最重要的是加入图 3.2-1 了！那与服务器篇后续所有的章节都有相关性喔！
PI:EMAIL
第四章、连上 Internet
最近更新日期：2011/07/20
终于要来到修改 Linux 网络参数的章节了！在第二章的网络基础中， 我们知道主机要连上 Internet 需
要一些正确的网络参数设定，这些设定在 Windows 系统上面的修改则在第三章的局域网络架构中说明
了。在这一章当中，我们则主要以固定 IP 的设定方式来修改 Linux 的网络参数，同时，也会介绍如何
使用 ADSL 的拨接方式来上网，此外，因为 Cable modem 使用者也不在少数，所以我们也说明一下 Cable
modem 在 Linux 下的设定方式喔！ 最后，由于笔记本电脑使用者大增，且因为笔记本电脑常使用无线
网络，因此本文也加入了无线网络的联机介绍啊！
4.1 Linux 连上 Internet 前的注意事项
4.1.1 Linux 的网络卡
4.1.2 编译网卡驱动程序(Option)
4.1.3 Linux 网络相关配置文件案
4.2 连上 Internet 的设定方法
4.2.1 手动设定固定 IP 参数 (适用学术网络、ADSL 固定制) + 五大检查步骤
4.2.2 自动取得 IP 参数 (DHCP 方法，适用 Cable modem、IP 分享器的环境)
4.2.3 ADSL 拨接上网 (适用台湾 ADSL 拨接以及光纤到大楼)
4.3 无线网络--以笔记本电脑为例
4.3.1 无线网络所需要的硬件： AP、无线网卡
4.3.2 关于 AP 的设定：网络安全方面
4.3.3 利用无线网卡开始联机
4.4 常见问题说明
4.4.1 内部网域使用某些联机服务(如 FTP, POP3)所遇到的联机延迟问题
4.4.2 网址列无法解析问题
4.4.3 预设路由的问题
4.5 重点回顾
4.6 本章习题
4.7 参考数据与延伸阅读
4.8 针对本文的建议：http://phorum.vbird.org/viewtopic.php?p=112420
4.1 Linux 连上 Internet 前的注意事项
由前面几章的数据我们知道，想要连上 Internet 你得要设定一组合法的 IP 参数
才可以，主要是 IP, Netmask, Gateway, DNS IP 以及主机名等。那我们也知道，其实
整个主机最重要的设定，就是‘先要驱动网络卡’，否则主机连网络卡都捉不到时， 怎
么设定 IP 参数都是没有用的，你说是吧！所以底下我们就来谈一谈， 你要如何确定
网络卡已经被捉到，而 Linux 主机的网络参数又该如何设定？
PI:EMAIL
4.1.1 Linux 的网络卡
你怎么确认 Linux 有捉到网络卡？Linux 底下的网络卡的名称是啥？让我们来了
解一下吧！
 认识网络卡的装置代号
在 Linux 里面的各项装置几乎都是以文件名来取代的，例如 /dev/hda 代表
IDE1 接口的第一个 master 硬盘等等。 不过，网络卡的代号 (Network
Interface Card, NIC) 却是以模块对应装置名称来代替的， 而默认的网络卡代
号为 eth0 ，第二张网络卡则为 eth1 ，以此类推。
 关于网络卡的模块 (驱动程序)
我们知道网络卡其实是硬件，所以当然需要核心支持才能驱动他。一般来说，目
前新版的 Linux distributions 默认可以支持的网络卡芯片组数量已经很完备
了，包括大厂的 3COM, Intel 以及初阶的 RealTek, D-Link 等网络卡芯片都已
经被支持， 所以使用者可以很轻易的设定好他们的网络卡。不过，万一你的网
络卡芯片组开发商不愿意释出开放源 (Open Source) 的硬件驱动程序，或者是
该网络卡太新了，使得 Linux 核心来不及支持时，那么你就得要透过：
1. 重新编译较新的核心，或者是
2. 编译网络卡的核心模块
好让核心可以支持网络卡这块硬件啦！但是，重编核心或编译网络卡核心模块都
不是简单的工作， 而且有时原始码又可能无法在每部主机上面编译成功，所以
万一你的网络卡真的不被默认的 Linux 网络芯片所支持，那么鸟哥真的建议直
接换一块被 Linux 支持的网络卡吧，例如很便宜的螃蟹卡！ 免得花了太多时间
在硬件确认上面，划不来的！ ^_^
另外，其实有的时候 Linux 的默认网络卡模块可能无法完全 100% 的发挥网络
卡的功能的， 所以，有的时候你还是得必须要自行编译网络卡的模块才行喔！
当然， 那个网络卡的模块就得要自行由网络卡开发商的官方网站下载了！不过，
如果你的网络卡是自行编译安装的， 那么每次重新安装其他版本的核心时，你
都必须要自行重新手动编译过该模块。 因为模块与核心是有相关性的啊！
 观察核心所捉到的网卡信息
假设你的网络卡已经在主机上面，不论是内建的还是自行安插到 PCI 或 PCI-x
或 PCI-E 的接口上， 那么如何确认该网络卡有被核心捉到呢？很简单啊！就利
用 dmesg 来查阅即可：
PI:EMAIL
[root@www ~]# dmesg | grep -in eth
377:e1000: eth0: e1000_probe: Intel(R) PRO/1000 Network Connection
383:e1000: eth1: e1000_probe: Intel(R) PRO/1000 Network Connection
418:e1000: eth0 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: RX
419:eth0: no IPv6 routers present
从上面的第 377 及 383 这两行，我们可以查到这部主机的两张网络卡都使用模
块为 e1000，而使用的芯片应该就是 Intel 的网络卡了。此外，这个网卡的速
度可达到 1000Mbps 的全双工模式哩 (418行) ！除了使用 dmesg 来查询核心
侦测硬件产生的信息外，我们也可以透过 lspci 来查询相关的设备芯片数据喔！
如下所示：
[root@www ~]# lspci | grep -i ethernet
00:03.0 Ethernet controller: Intel Corporation 82540EM Gigabit
Ethernet
Controller (rev 02)
请注意，鸟哥这里使用的是 Virtualbox 仿真的那部主机的环境 (请参考第一章
1.2.2-2)，因此使用的是模拟出来的 Intel 网卡。 如果你是使用自己的实际硬
件配备安装的主机，那么应该会看到不同的芯片啦！那是正常的！
 观察网络卡的模块
从刚刚的 dmesg 的输出讯息中，我们知道鸟哥这部主机所使用的模块是 e1000 ，
那核心有顺利的载入了吗？可以利用 lsmod 去查查看。此外，这个模块的相关
信息又是如何呢？使用 modinfo 来查查看吧！
[root@www ~]# lsmod | grep 1000
e1000 119381 0 <==确实有载入到核心中！
[root@www ~]# modinfo e1000
filename: /lib/modules/2.6.32-71.29.1.el6.x86_64/kernel/drivers/net/e1000/e1000.ko
version: 7.3.21-k6-NAPI
license: GPL
description: Intel(R) PRO/1000 Network Driver
.....(以下省略).....
上面输出信息的重点在于那个档名 (filename) 的部分！那一场串的文件名目录，
就是我们驱动程序放置的主要目录所在。 得要注意的是，那个
2.6.32-71.29.1.el6.x86_64 是核心版本，因此，不同的核心版本使用的驱动程
序其实不一样喔！我们才会一直强调，更改核心后， 你自己编译的硬件驱动程
序就需要重新编译啦！
PI:EMAIL
那你如何知道你的网络卡卡号呢？很简单啊！不管有没有启动你的网络卡，都可
以使用： ‘ ifconfig eth0 ’来查询你的网卡卡号。如果你照着上面的信息来
作， 结果发现网卡已经驱动了，恭喜你，准备到下一节去设定网络吧！如果没
有捉到网卡呢？那就准备自己编译网卡驱动程序吧！
4.1.2 编译网卡驱动程序(Option)
一般来说，如果没有特殊需求，鸟哥不是很建议你自己编译网络卡的驱动程序！为
啥？ 因为想到每次更新核心都得要重新编译一次网卡驱动程序，光是想想都觉得烦～
所以，没有被 Linux 预设核心支持的网卡， 就先丢着吧！
Tips:
鸟哥之前买了一张内建网卡的主板，该网卡并没有被当时的 Linux
预设核心所支持，所以就得要自己编译核心啦。因为 CentOS 很少
更新核心，所以第一次编译完毕之后就忘记有这回事了。等到过了
数周有新的核心出现后，鸟哥很开心的自动升级核心， 然后远程进
行 reboot ，结果呢？没有网卡驱动程序了啦！我的主机无法联网，
得要到主机前用 tty 登入后才能进行编译～唉～
如果你真的很有求知欲，而且该网卡的官网有提供给 Linux 的驱动程序原始码； 或者
是你很想要某些官网提供的驱动程序才有的特殊功能；又或者是你真的很不想要再买一
张额外的网卡。 此时，就得要重新编译网络卡的驱动程序啰。
Tips:
事实上，如果你要新添购硬件时，请先查阅一下硬件包装上面是否
提及支持 Linux 的字样， 因为有些硬件厂商在推出新硬件时，常
常会漏掉 Linux 驱动程序的撰写。 如果包装上面有提到支持的话，
那么至少你会获得官方网站所提供的驱动程序原始码啊！ ^_^
因为我们这里使用的网络卡是 Intel 的 82540EM Gigabit Ethernet 控制芯片，假设
你需要的驱动程序得要由 Intel 官网取得最新的版本，而不要使用预设的核心所提供
的版本时，那你该如何处理呢？请注意，鸟哥这个小节只是一个范例简介， 不同的厂
商推出的驱动程序安装方式都有点不太一样，你得要参考驱动程序的读我档 (READ ME)
或相关档案来安装才行。 此外，如果默认驱动程序已经捉到了网络卡，鸟哥是建议使
用预设的驱动程序就好了喔！
另外，由于编译程序需要编译程序以及核心相关信息，因此得要预安装 gcc, make,
kernel-header 等软件才行。 但是我们选择的安装模式为‘basic server’，这些软
件默认都没有安装的，所以你得要先安装这些软件才行。 这些软件可以简单的透过 yum
PI:EMAIL
使用‘yum groupinstall 'Development Tools'’来安装，只可惜你并没有网络啊！ 所
以就得要透过原本光盘一个一个去处理 RPM 属性相依的问题来解决了～很麻烦的～不
然的话，就得要透过更改 yum 配置文件，使用本机档案的类型来取得原版光盘的 yum
软件列表啰！鸟哥这里假设你已经安装了所需要的编译程序了， 接下来的动作是：
1. 取得官方网站的驱动程序：
再次说明，你可以复制鸟哥的环境，透过 Virtualbox 的模拟而来。我们这里使
用的是 Intel 的网卡，你可以到如下的网站去下载：
o
http://downloadcenter.intel.com/SearchResult.aspx?lang=eng&keyw
ord='e1000-'
最后 (2011/07) 下载的版本为 8.0.30，确实比上个小节提到的版本还要新！下
载的文件名为 e1000-8.0.30.tar.gz， 鸟哥将它放置于 /root 底下，然后准备
来处理编译过程吧！
2. 解压缩与编译：
使用 root 的身份进行如下工作吧：
[root@www ~]# tar -zxvf e1000-8.0.30.tar.gz -C /usr/local/src
[root@www ~]# cd /usr/local/src/e1000-8.0.30/
# 此时在该目录下有个 README 的档案，记得看一看，这个档案内会说明很多
信息，
# 包括如何编译，以及这个模块所支持的芯片组哩！
[root@www e1000-8.0.30]# cd src