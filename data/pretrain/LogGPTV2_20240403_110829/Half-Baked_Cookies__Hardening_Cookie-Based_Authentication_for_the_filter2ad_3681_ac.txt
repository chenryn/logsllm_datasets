4 Newton: Computing Auth-Cookies
In this section, we describe the design of Newton, a tool that
we have built to help website administrators in auditing and
common users to protect their web sessions. We reﬁne the
basic idea that we presented in Section 3.1 to address the
various practical concerns that we raised in Section 3.2.
4.1 Detecting Login Status: Username Presence
Newton uses the presence of the user’s name on the webpage
to determine that the user is logged in. To detect the presence
of a user’s name without explicitly asking the user (which
is error-prone in any case, since the webpage may display a
real name to a logged-in user, rather than the username), we
developed a domain speciﬁc language that allows us to specify
how to scrape a user’s username and other information from
different sites. Using this language, we developed scraping
scripts for many popular top sites, including Facebook,
Google+, Amazon, and many dating sites to determine a
user’s real name and username.
Determining a user’s login status on a broad range of sites
using the presence of a username or real name on the page
requires multiple bootstrapping steps. First, we create dummy
accounts on an initial “seed” set of sites to help us codify
the relationship between the site’s structure and the location
on the site where the user’s name resides. Knowledge of
7
Figure 4: Bounded complete partially ordered set (POSET) repre-
senting the set of all cookie-set combinations that Newton would
have to test without optimizations. In each testing round, Newton
alternately tests current “tops” or “bottoms” of the POSET. After
each testing round, tested cookie-sets are removed from the POSET.
these relationships allows us to develop scripts in our domain
speciﬁc language to scrape real names and usernames from
these sites for any user who installs Newton. We then ran
Newton for each webpage for each of the sites where we can
determine these relationships. Newton then determines the
auth-cookies for each of these webpages (using the algorithms
that we describe below). After the user installs Newton, the
tool can determine whether a user is logged in on these sites
by examining whether the appropriate auth-cookies are set; it
can then determine the user’s name (or username, depending
on the site) by scraping the page. Finally, with knowledge
of the user’s name(s) and username(s) from these seed sites,
Newton can then determine whether a user is likely logged in
on other sites (e.g., banking sites) simply by checking for the
user’s name (or username).
Using our domain speciﬁc language, we have created 70
scraping scripts for top sites where users have accounts usu-
ally such as social networking, mailing, utility sites. Using
these, we are able to comprehensively cover different vari-
ations in a speciﬁc user’s usernames and thus detect these
usernames on sites, even on sites for which we have not
written a scraper. However, even if we fail to detect some
user’s username on some site, Newton can still determine the
auth-cookie combination for that site by performing the auth-
cookie computation for a user who we are able to identify
for that site. Because the auth-cookies that a site uses are the
same for every user, Newton can build a knowledge base of
auth-cookies for a large set of sites that is then shared across
Newton users.
4.2 Tackling Combinatorial Explosion
The strawman algorithm in Section 3.1 computes auth-
cookies by disabling combinations of cookies and determin-
ing whether a user remains logged in. Although this approach
is simple and effective, it does not scale in practice, because
Figure 5: Suppose that (A&B) is the auth-cookies combination.
Newton does not know that. A page fetch request will not succeed if
cookie A is not present in the cookie-set. From that result, Newton
will conclude that A is part of auth-cookies combination. But, now
it does not need to test other cookie-sets that do not contain A.
Figure 6: Suppose that (A&B) is the auth-cookies combination.
Newton does not know that. A page fetch will succeed because both
A and B are included. From this, Newton concludes that either A, or
B, or both are part of auth-cookies combinations. But, now it does
not need to test other cookie-sets with A and B enabled.
the number of tests is exponential in the number of cookies
that a site sets, and many sites sent tens or hundreds of cook-
ies; once the number of cookies on a site exceeds about 30,
testing every combination becomes prohibitive. For example,
live.com sets 27 cookies at login time. Assuming a single
test requires about 200 ms, testing all combinations of only
those cookies would require nearly a year. In this section,
we discuss how to avoid the exponential cost of testing every
possible cookie combination. Although the search space re-
mains exponential, Newton can use knowledge from previous
results to avoid testing certain combinations of cookies.
4.2.1 Basic optimization
First, Newton partitions the cookies for a site into two sets:
“login cookies” (set during a user’s login process) and “non-
login cookies” (set either before or after the login event). To
reduce testing time where possible, Newton initially assumes
that a site’s auth-cookies are a subset of the cookies that
are set at login (the “login cookies”). As we discussed in
Section 3.2, some auth-cookies may not be set at login, and
Newton may need to expand the set of cookie-sets that it is
testing to include additional cookies. Newton handles this
case as well, but we describe the simple case ﬁrst.
Figure 4 illustrates bounded partially ordered set represent-
ing all possible cookie-sets that Newton would have to test,
either working downward from the top of the graph by adding
cookies to an empty cookie-set, or by working upward from
the bottom by removing cookies from a complete cookie-set.
The Newton algorithm alternates by performing one test from
the top of the partially ordered set, followed by one from
the bottom, removing cookie-sets from the graph as they are
determined to either represent an auth-cookie set or not. The
algorithm terminates when no cookie-sets remain.
At ﬁrst glance, it might appear that if a website sets N “lo-
gin cookies”, then Newton would need to send HTTP requests
to the website with all 2N possible cookie combinations to
determine all sets of cookies that represent auth-cookies. For-
tunately, we can use the outcome of some cookie-set tests to
infer the outcomes for other cookie-sets, precluding the need
to test all sets with HTTP requests. Figure 5 shows one such
inference optimization: if Newton determines that the user is
logged in when all cookies in the cookie-set are sent, but that
the user is logged out when cookie A is not set, then Newton
can conclude that A is part of an auth-cookies combination.
Conversely, if Newton determines that a user is logged in
when all cookies in a cookie-set are sent, and also that the
user is logged in when only cookies A and B are sent, then
Newton can infer that any cookie-set containing A and B will
succeed, and either A or B or both of them are auth-cookies.
Figure 6 shows a similar optimization.
4.2.2 Handling corner cases
User logout or session termination during test. When
Newton is computing the auth-cookies for a particular site,
the user’s session may terminate for a variety of independent
reasons; a user’s session might time out, or a user might ini-
tiate a logout. If these events occur during one of Newton’s
tests, logout should not be attributed to set of cookies that
were being tested at the time the logout occurred. For this
reason, after the computation of the auth-cookies completes,
Newton tests that the user is still logged in by sending all
cookies for the site in an HTTP request. State V in Figures 7
and 8 illustrates this logic.
Finding auth-cookies that are not set at login. As we men-
tioned in Section 4.2.1, sometimes an auth-cookie might be
set at some time other than when the user logs in, either be-
cause the site sets it at some later point after the user logs in
(e.g., as is the case with Google Calendar) or because the auth-
cookie persisted since the user’s previous session. There are
two ways to detect that auth-cookies may be set at times other
8
Figure 8:
In contrast to Figure-7, while testing all current
tops(coming DOWN in the POSET), a negative test result occurs
when user is not logged in(expected result with most of the cookies
blocked) where as a positive test result is when a user is still logged
in. To save unnecessary testing, we swapped the order of S1 and
S2 to accommodate this test result role reversal. Once again state
V is executed to ensure that previous negative result is not due to
legitimate session log out.
Function
State Machine Driver
Cookie-set generation and optimization
State management and miscellaneous
Testing
Interpreter for scraping language (DSL)
Site speciﬁc content scrapers for 70 sites (DSL)
Total
Lines of code
5,000
1,700
1,300
800
1,600
4,600
15,000
Table 1: Approximate lines of code to implement the Newton Chrome
browser extension. All lines of code are Javascript except for the
site-speciﬁc content scrapers, which are in Newton’s domain speciﬁc
language.
the code was written in Javascript; we write the scrapers in a
domain speciﬁc language.
A signiﬁcant portion of the code resides in two modules. A
major component of Newton’s function is the state machine
driver, which determines which elements in the partially or-
dered set from Figure 4 have been tested, how to generate
the next tests based on previous results, and when to termi-
nate and produce the set of auth-cookies. The state machine
driver must also distinguish signiﬁcant results from false pos-
itives that may arise due to network delay or other failures,
as shown in Figures 7 and 8. To distinguish performance
problems from login failures, Newton maintains a moving
average of successful page load time. During a test, if a page
fetch or load is not complete successfully within a factor of
three of this time, Newton considers the result signiﬁcant.
The state management logic copes with cases when a web
session times out or user logs out in the middle of testing,
Newton needs to periodically store the state of testing on a
persistent device. This functionality is especially useful for
Figure 7: When testing all current bottom cookie-sets(going UP
in the POSET), if Newton discovers negative test result(testing a
cookie-set still causes user to be logged in), then Newton moves on
to next cookie-set to be tested. However, if the result is positive, then
Newton performs two additional tests: one to ensure that there are
no additional auth-cookies that are in non-login cookie set(state S2),
and one to ensure that we have not mistakenly assumed a disabled
cookies as an auth-cookie combination because a user was logged
out during testing(state V ).
than when the user logs in; states S1 and S2 in Figures 7 and
8 show the logic to detect these corner cases. For example, in
Figure 7, if a set of cookies from the “login cookies” set does
not log a user in, but enabling all of the cookies that are not
set at login results in a successful login, then Newton detects
that one or more cookies that were not set at login must be
part of the set of auth-cookies. In this case, Newton must
actually proceed to compute the exact auth-cookies present
in “non-login cookies” set. To do so, Newton constructs a
partially ordered set of “non-login cookies” similar to the one
shown in Figure 4 to ﬁnd the additional auth-cookies.
5 Newton: Implementation and
Performance Evaluation
We describe the implementation of Newton as a Chrome
browser extension and our evaluation of its performance on
real-world webpages and services.
5.1 Prototype: Chrome Browser Extension
We implemented Newton as a Chrome browser extension.
Our code is open source, and interested security auditors can
download, install it and start using with minimal conﬁguration.
Table 1 shows the breakdown of functions in terms of lines of
code. Except for the scrapers of site-speciﬁc content, all of
9
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
h t t p s : / / www. dropbox . com / a c c o u n t # s e t t i n g s 
t d : c o n t a i n s ( " F i r s t name " ) +> i n p u t
t d : c o n t a i n s ( " L a s t name " ) +> i n p u t
t d : c o n t a i n s ( " Email " ) +
Figure 9: Example of domain speciﬁc language for ﬁnding and
a user’s full name on Dropbox. For sites where we were able to
create dummy accounts, we could write modules to infer the user’s
username or full name from the site, which would then allow Newton
to determine if a user was logged in.
web applications that have very short session time outs for
security such as banking sites. However, the next time user
logs in, the number of cookies created can be different from
previous session. Our state management code takes care of
resolving such differences.
Another signiﬁcant component is the set of site-speciﬁc
scrapers of usernames and URLs. The domain speciﬁc lan-
guage that we implemented can traverse the user’s account
using directives to fetch a URL, follow a link, simulating a
click and storing information. (We have implemented this
tool to gather data for other studies, but for this paper we
are only using the function involving username inference.)
All users who have installed the tool have consented to both
the installation and the use of the data for the purposes of
this study. As previously mentioned, computations about a
site’s auth-cookies can be shared across users. To protect user
privacy, however, we never associate a computation of a site’s
auth-cookies with a particular user (or username), and New-
ton always asks for the user’s permission before uploading
any data from the local machine.
a
scraper
an example of
Figure 9 shows
for
The code instructs the browser to
dropbox.com.
go to the settings page for the user (line 3) and locate the
HTML tags that correspond to the ﬁrst and last name of
the user (lines 5–14); it then stores the information to local
storage (lines 16–21). We have shown one of the simpler
examples of a scraper for simplicity; more examples are
available on Github.2
5.2 Performance Evaluation