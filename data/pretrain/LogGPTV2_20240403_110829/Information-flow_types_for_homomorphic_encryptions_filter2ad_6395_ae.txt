own decryption function as well as some more basic functions;
these basic operations may represent e.g. logical gates. (Designing
a bootstrappable encryption scheme is in itself very challenging,
as it severely constrains the decryption algorithm, but is not our
concern here.)
The bootstrap relies on a series of keys. Whenever the noise
accumulated as the result of homomorphic evaluation needs to be
canceled, the intermediate result (encrypted under the current key)
is encrypted using the next encryption key, then homomorphically
decrypted using an encryption of the current decryption key un-
der the next encryption key. This bootstrapping yields an homo-
morphic scheme for any function as long as the computation can
progress using other homomorphic functions between encryptions
and decryptions to the next key. (Following Gentry’s terminology,
the resulting scheme is a leveled FHE: the key length still depends
on the max size of the circuit for evaluating f; some additional key-
cycle assumption is required to get a ﬁxed-length key.)
Next, we assume the properties of the base algorithms given by
Gentry—being CPA and homomorphic for its own decryption plus
basic operations fi that sufﬁce to evaluate some arbitrary func-
tion f. We then show that these properties sufﬁce to program and
verify by typing the bootstrapping part of Gentry’s construction,
leading to homomorphic encryption for this arbitrary function f.
Typing of Gentry’s bootstrapping relies on typing rules for CPA
with multiple keys and types of encrypted values, and on instances
of rule HOM-FUN with f = D.
We assume given a bootstrappable scheme using a set of homo-
morphic functions for decrypting and for computing: F = {D (cid:55)→
DK : 0 → 1; f i (cid:55)→ f i
K : 1 → 2 for i = 1..n}.
We are now ready to program the bootstrapping for f. Both par-
ties agree on the function to compute, f, and its decomposition into
successive computation steps (fi)i=1..n such that f = f1; . . . ; fn.
This may be realized by producing a circuit to evaluate f and then
letting the fi be the successive gates of the circuit. For simplicity,
we assume that each fi operates on all the bits of the encrypted
values; Gentry instead uses a tuple of functions f j=1..w
for each
step, each f j
i computing one bit of the encrypted values. This more
detailed bootstrapping can be typed similarly.
For the plaintexts, we write x0 for the input, x1, . . . xn−1 for the
intermediate results, and xn for the ﬁnal result, so the high-level
computation is just xi := fi(xi−1) for i = 1..n.
The client generates all keypairs; encrypts the input using the
ﬁrst encryption key; encrypts each decryption key using the next
encryption key; calls the server; and decrypts the result using the
ﬁnal key:
i
·
= kei, kdi := Ge();
Pc
skdi
y0
_;
xn
:= E(kdi, kei+1);
:= E(x0, ke1);
:= D(zn, skn)
for i = 1..n
for i = 1..n − 1
calling the server
The message consists of the content of the shared variables y0,
ke1, skd1, . . . , ken−1, skdn−1, ken. The server performs the
homomorphic computation for each fi, interleaved with the re-
keying.
Ps
·
= (cid:0)zi := f i
yi := DKi+1 (ti, skdi, kei+1);(cid:1)
ti := E(zi, kei+1);
Ki (yi−1, kei);
zn := f n
Kn (yn−1, ken); _
for i=1..n−1
We specify the security of the protocol as a policy Γ that maps
the variable of Pc and Ps to labels. We distinguish three levels of
integrity: H for the agency, S for the service, and L for untrusted
data, with H <I S <I L. kei and kdi have high integrity (H) for
i = 1..n; all other variables have service integrity (S).
Since our scheme is only CPA, we need n + 1 levels of conﬁden-
tiality to separate the results of low integrity decryptions: H0..Hn
for the agency and L for public data, such that L <C H0 <C
··· <C Hn.
• kei, skdi, zi, ti, yi are public for i = 1..n (at level L);
• x0 is readable only by the agency (H0);
• kdi is readable only by the agency for i = 1..n (Hi);
• xn is also readable by the agency, but moreover it depends
on low-integrity decryptions, and thus should not ﬂow to any
further encryption with any of the key kei for i = 1..n (Hn).
Let τi = Data (HiS). We type our variables as follows, for
i = 1..n − 1.
Γ(kei) = Ke Ei Ki(LH)
Γ(kdi) = Kd Ei Ki(HiH)
Γ(x0) = τ0
Γ(skdi) = Enc (Kd Ei Ki(Hi−1S))Ki+10(LS)
Γ(y0) = Enc τ0 K10(LS)
Γ(zi) = Enc τi−1 Ki2(LS)
Γ(ti) = Enc (Enc τi−1 Ki2(LS)) Ki+10(LS)
Γ(yi) = Enc τi Ki+11(LS)
Γ(zn) = Enc τn−1 Kn2(LS)
Γ(xn) = τn
with the encrypted sets below, for i = 2..n:
E1 ={τ0}
Ei ={τi−1, Kd Ei−1 Ki−1(Hi−2S), Enc τi−1 Ki−1(HS)}
We verify that the commands above are typable with the resulting
policy Γ:
THEOREM 4. Γ (cid:96) Pc[Ps] when α ranges over LS and LH,
hence Pc[Ps] is computationally non-interferent against these ad-
versaries.
The theorem yields strong indistinguishability guarantees. The
case α = LS corresponds to an “honest but curious” adversary, who
can observe all server operations on ciphertexts (that is, read all
intermediate values) but still learn nothing about the plaintexts. The
case α = LH corresponds to an active adversary in full control of
the service, who can disrupt its operations, and still learns nothing
about the plaintexts. To clarify these conﬁdentiality guarantees, we
verify by typing that our construction is in particular CPA. We let S
abbreviate the scheme (Gh
e ,E h,Dh,{f (cid:55)→ fK : 0 → 1}) deﬁned
as follows:
ke, kd := Gh
e ()
y := E h(e, ke)
y := f h
K (z, ke)
x := Dh(y, kd)
=(cid:0)kei, kdi
(cid:0)skdi
:= Ge();(cid:1)
:= E(kdi, kei+1);(cid:1)
·
for i=1..n
for i=1..n−1
ke := (ke1, ..., ken, skd1, skdn−1);
kd := (kd1, kdn)
·
= y := E(e, (ke)1);
·
= y0 := z;
:= f i
:= E(zi, (ke)i+1);
:= DKi+1 (ti, (ke)i+n, (ke)i+1);(cid:1)
Ki (yi−1, (ke)i);
(cid:0)zi
ti
yi
for i=1..n−1
y := f n
Kn (yn−1, (ke)n)
·
= if is_enc(y, (kd)1)
then x := D(y, (kd)1)
else x := D(y, (kd)2)
THEOREM 5. S is a CPA homomorphic encryption scheme.
[9] C. Fournet and T. Rezk. Cryptographically sound implementations
for typed information-ﬂow security. In 35th Annual ACM
SIGPLAN-SIGACT Symposium on Principles of Programming
Languages (POPL’08), pages 323–335, Jan. 2008.
[10] C. Fournet, G. le Guernic, and T. Rezk. A security-preserving
compiler for distributed programs: From information-ﬂow policies to
cryptographic mechanisms. In ACM Conference on Computer and
Communications Security, pages 432–441, Nov. 2009.
[11] C. Gentry. Fully homomorphic encryption using ideal lattices. In
ACM symposium on Theory of computing (STOC), pages 169–178,
2009.
[12] J. A. Goguen and J. Meseguer. Security policies and security models.
In IEEE Symposium on Security and Privacy, pages 11–20, 1982.
[13] S. Goldwasser and S. Micali. Probabilistic encryption & how to play
mental poker keeping secret all partial information. In ACM
symposium on Theory of computing (STOC), pages 365–377, 1982.
[14] W. Henecka, S. Kögl, A.-R. Sadeghi, T. Schneider, and
I. Wehrenberg. TASTY: tool for automating secure two-party
computations. In 17th ACM Conference on Computer and
Communications Security, pages 451–462, Oct. 2010.
[15] J. Katz and L. Malka. Secure text processing with applications to
private DNA matching. In 17th ACM Conference on Computer and
Communications Security, pages 485–492, Oct. 2010.
[16] P. Lafourcade. Vériﬁcation des protocoles cryptographiques en
présence de théories équationnelles. Thèse de doctorat, Laboratoire
Spéciﬁcation et Vériﬁcation, ENS Cachan, France, Sept. 2006.
[17] P. Laud. Semantics and program analysis of computationally secure
information ﬂow. In 10th European Symposium on Programming
(ESOP), volume 2028 of LNCS. Springer, Apr. 2001.
[18] P. Laud. On the computational soundness of
cryptographically-masked ﬂows. In 35th Annual ACM
SIGPLAN-SIGACT Symposium on Principles of Programming
Languages (POPL’08), pages 337–348, Jan. 2008.
[19] P. Laud and V. Vene. A type system for computationally secure
information ﬂow. In Fundamentals of Computation Theory, LNCS,
pages 365–377. Springer, 2005.
[20] A. C. Myers, A. Sabelfeld, and S. Zdancewic. Enforcing robust
declassiﬁcation and qualiﬁed robustness. Journal of Computer
Security, 14(2):157–196, 2006.
[21] R. Ostrovsky and W. E. Skeith III. Private searching on streaming
data. In V. Shoup, editor, Advances in Cryptology–CRYPTO 2005,
volume 3621 of LNCS, pages 223–240, 2005.
[22] P. Paillier. Public-key cryptosystems based on composite degree
residuosity classes. In EUROCRYPT, pages 223–238, 1999.
[23] N. Smart and F. Vercauteren. Fully homomorphic encryption with
relatively small key and ciphertext sizes. Public Key
Cryptography–PKC 2010, pages 420–443, 2010.
[24] G. Smith and R. Alpízar. Secure information ﬂow with random
assignment and encryption. In FMSE ’06: fourth ACM workshop on
Formal methods in security, pages 33–44, 2006.
9. RELATED WORK
Information ﬂow policies and types Non-interference was in-
troduced by Goguen and Meseguer [12]. Laud [17] introduces
computational non-interference in a model with passive adversaries
(CNIP). Laud and Vene [19] propose a type system (relying on
CPA) to verify CNIP in a language with symmetric encryption
but where decrypted values cannot be treated as keys. Fournet
and Rezk [9] generalize CNIP to the active case, with adversaries
that may interfere with the normal execution of programs, and also
covers integrity properties. We present a type system (relying on
CCA2) that enables typing of key establishment protocols.
In a
similar line of work, Smith and Alpízar [24] present a type sys-
tem (relying on CCA2) with encryption and decryption but no ex-
plicit keys. Askarov et al. [1] propose a type system for crypto-
graphically masked ﬂows. Their system also handles key reuse
for plaintexts at different levels, via subtyping, but their adver-
sary model is weaker than ours, and excludes in particular chosen-
ciphertext attacks. Laud [18] investigates conditions such that cryp-
tographically masked ﬂow imply secrecy and proposes a simpler
computationally-sound execution model for passive adversaries.
Homomorphic encryptions The ﬁrst CPA homomorphic encryp-
tion scheme is due to Goldwasser and Micali [13]. Additive homo-
morphic encryption schemes proved to be CPA include Benaloh [2]
and Paillier [22]. ElGamal [8] is a CPA multiplicative homomor-
phic encryption scheme. Other schemes [4, 11] allow both addition
and multiplication.
Protocol analysis featuring homomorphic encryptions Delaune
et al. [7] and Lafourcade [16] analyse protocols featuring homo-
morphic encryptions using equational theories (see Cortier et al.
[5]) to model homomorphisms.
Acknowledgments We thank Martín Abadi, Anupam Datta, Mar-
kulf Kohlweiss, Nikhil Swamy, and the anonymous reviewers for
their comments.
References
[1] A. Askarov, D. Hedin, and A. Sabelfeld. Cryptographically-masked
ﬂows. In Proceedings of the 13th International Static Analysis
Symposium, LNCS, 2006. Springer-Verlag.
[2] J. C. Benaloh. Secret sharing homomorphisms: Keeping shares of a
secret sharing. In A. M. Odlyzko, editor, CRYPTO, volume 263 of
LNCS, pages 251–260. Springer, 1986.
[3] M. Blaze, G. Bleumer, and M. Strauss. Divertible protocols and
atomic proxy cryptography. In EUROCRYPT, pages 127–144, 1998.
[4] D. Boneh, E.-J. Goh, and K. Nissim. Evaluating 2-DNF formulas on
ciphertexts. In Theory of Cryptography (TCC), number 3378 in
LNCS, pages 325–341. Springer, Feb. 2005.
[5] V. Cortier, S. Delaune, and P. Lafourcade. A survey of algebraic
properties used in cryptographic protocols. Journal of Computer
Security, 14(1):1–43, 2006.
[6] G. Danezis and C. Diaz. Space-efﬁcient private search with
applications to rateless codes. In Financial cryptography and data
security: 11th international conference, FC 2007, and 1st
International Workshop on Usable Security, USEC 2007, 2007.
[7] S. Delaune, P. Lafourcade, D. Lugiez, and R. Treinen. Symbolic
protocol analysis in presence of a homomorphism operator and
exclusive or. In M. Bugliesi, B. Preneel, V. Sassone, and I. Wegener,
editors, ICALP (2), volume 4052 of LNCS, pages 132–143. Springer,
2006.
[8] T. ElGamal. A public key cryptosystem and a signature scheme
based on discrete logarithms. In CRYPTO, pages 10–18, 1984.