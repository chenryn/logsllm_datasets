# Defeating Memory Corruption Attacks via Pointer Taintedness Detection

**Authors:**
- Shuo Chen†
- Jun Xu‡
- Nithin Nakka†
- Zbigniew Kalbarczyk†
- Ravishankar K. Iyer†

**Affiliations:**
- † Center for Reliable and High-Performance Computing, University of Illinois at Urbana-Champaign, 1308 W. Main Street, Urbana, IL 61801
- {shuochen, nakka, kalbar, iyer}@crhc.uiuc.edu
- ‡ Department of Computer Science, North Carolina State University, Raleigh, NC 27695
- PI: EMAIL

## Abstract

Most malicious attacks compromise system security through memory corruption exploits. Recently proposed techniques aim to defeat these attacks by protecting program control data. However, we have identified a new class of attacks that can compromise network applications without tampering with any control data. These non-control data attacks pose a significant challenge to system security. In this paper, we propose an architectural technique to detect both control data and non-control data attacks based on the concept of pointer taintedness. A pointer is considered tainted if its value originates from user input. An attack is detected whenever a tainted value is dereferenced during program execution. The proposed architecture is implemented on the SimpleScalar processor simulator and evaluated using synthetic programs and real-world network applications. Our technique effectively detects both types of attacks, offering better security coverage than current methods. The proposed architecture is transparent to existing programs.

**Keywords:** Security, Attack, Vulnerability, Taintedness, Hardware Design

## 1. Introduction

Many malicious attacks, including viruses and worms, exploit low-level programming errors to compromise the security of target systems. Examples include the Morris Worm, which exploited a buffer overflow in fingerd, the Code Red Worm, which exploited a buffer overflow in Internet Information Service (IIS), and the format string attack against the WU-FTP daemon. A wide range of programming errors, such as buffer overflows, heap corruptions, integer overflows, format strings, and LibC globbing vulnerabilities, enable attackers to launch memory corruption attacks. Our survey indicates that these types of vulnerabilities account for 67% of CERT advisories from 2000 to 2003 [8].

Several methods have been proposed to mitigate security attacks, including type-safe languages, compiler analyses, and formal methods. Despite significant research and investment, the state of the art remains imperfect, and security vulnerabilities continue to be discovered. The most direct countermeasure is security patching, but this is reactive and only applicable to known vulnerabilities. The delay between bug discovery and patching allows attackers to compromise many unpatched systems. An alternative approach is runtime vulnerability masking, which can stop ongoing attacks. Compiler and library interception techniques, such as StackGuard [5] and FormatGuard [6], have been successful in defeating specific types of attacks, particularly stack buffer overflows and format string attacks.

Recently, processor architecture mechanisms, such as no-execute page-protection (NX) processors developed by AMD and Intel [13], Secure Program Execution [18], and Minos [7], have been proposed to thwart most types of memory corruption attacks. These techniques assume that, to launch a successful memory corruption attack, the attacker must either change control data (code pointers) or execute malicious code. Control data includes function pointers and return addresses. We refer to these techniques as control-flow integrity-based protections.

We examined several vulnerabilities in major network applications and found that they can also be compromised by corrupting non-control data. Non-control data includes integers representing user identity, server configuration strings, and pointers to user input data. Many non-control data attacks result in severe security compromises, often leading to root privileges. Since these attacks do not corrupt control data, existing architectural protection mechanisms cannot detect them. Therefore, non-control data attacks represent a significant challenge in defeating memory corruption attacks. In this paper, we propose a processor architecture-level technique to detect both control data and non-control data attacks.

The basis of our technique is the notion of pointer taintedness, initially introduced in [10] to formally reason about various types of memory vulnerabilities using static program analysis. A pointer is considered tainted if its value comes directly or indirectly from user input. A tainted pointer allows the user to specify the target memory address for read, write, or control transfer, leading to system security compromise. The attacker's ability to specify a malicious pointer value is crucial for the success of memory corruption attacks.

In [10], we proposed an extended memory model where each memory location and register is associated with a Boolean property, taintedness, indicating whether the data are derived from user input. This memory model is used to implement the runtime defense mechanism discussed in this paper. Data received from external sources, such as the network, file system, keyboard, command line arguments, and environmental variables, are marked as tainted. Load, store, and ALU instructions propagate taintedness. If a data word with tainted bytes is used for memory access or control flow transfer, an alert is raised, and the application process is terminated.

The proposed architecture is transparent to the application, allowing existing applications to run without recompilation or relinking. For example, precompiled SPEC 2000 benchmark applications run on the simulated architecture without generating false alerts. This is a significant advantage over compiler-based pointer protection methods, such as PointGuard [6], which require static identification of all data variables that can be used as pointers. The proposed architecture requires no source code access or compile-time type information. Our technique is prototyped as an enhanced SimpleScalar processor simulator [20].

To evaluate the effectiveness of the proposed defense technique, we conducted attacks that overwrite both control and non-control data in several real-world network applications. The accurate detection of all these attacks demonstrates the strength of our approach and indicates a significant improvement in security coverage.

## 2. Related Work

Both static compiler analysis and runtime detection techniques have been developed to defeat memory corruption attacks. Generic static techniques, such as SPLINT [12] and Extended Static Checking [9], can check if specified security properties are satisfied in program code. Domain-specific code analysis techniques, like those for buffer overflow [23] and format string vulnerabilities, are designed to uncover specific types of vulnerabilities. Although static code analysis techniques are helpful in finding security vulnerabilities, their scalability, analysis granularity, and dependency on application-specific knowledge lead to significant false positive and false negative rates.

Runtime techniques, such as StackGuard [11] and Libsafe [5], provide protection against specific types of attacks. Techniques that randomize process memory layout, such as ASLR [2][4][24], are generic against most memory corruption attacks. However, implementing and deploying these techniques, especially on 32-bit architectures, has been challenging due to low entropy, which limits their effectiveness against brute-force attacks [19].

Advances in computer architecture research have led to techniques that are considered generic against all types of memory corruption attacks. Secure Program Execution [18] and Minos [7] protect control data integrity. While effective in defeating control data attacks, these techniques are unable to detect non-control data attacks.

The notion of taintedness was first proposed in the Perl programming language as a security feature. Inspired by this, static detection techniques like SPLINT [12] and CQUAL [21] apply taintedness analysis to ensure that user input data is never used as the format string argument in printf-like functions. In [10], we analyzed various categories of security vulnerabilities and concluded that their common root cause is the taintedness of pointers. A memory model and algorithm for detecting pointer taintedness were initially provided as a rewriting logic framework to formally reason about security vulnerabilities in programs. Secure Program Execution [18] and Minos [7] rely on definitions of spuriousness and integrity of data. We believe these definitions bear similarities to our notion of taintedness, but they do not detect the taintedness of general pointers, focusing only on control data.

## 3. Pointer Taintedness Based Attacks

We analyzed 107 CERT advisories from 2000 to 2003. Figure 1 shows a breakdown of the leading programming vulnerabilities. Buffer overflow results from writing large signed integers into an unchecked buffer; format string vulnerabilities result from incorrect invocations of printf-like functions; integer overflow results from interpreting extremely large signed integers as negatives; heap corruption results from corruption of the heap structure or freeing a buffer twice; and globbing vulnerabilities result from incorrect invocations of the LibC function glob(). These categories collectively account for 67% of the advisories. Although attacks exploiting these different types of vulnerabilities have different appearances, they share a common characteristic: the attack must first taint a pointer and then trick the victim program into dereferencing that pointer. The attacker's ability to specify a pointer value is crucial for the success of a memory corruption attack.

Figure 2 presents examples of stack buffer overflow, heap corruption, and format string attacks, illustrating how pointer taintedness enables these attacks.

### Figure 1: Breakdown of Security Vulnerability Categories in CERT Advisories (2000–2003)

- **Buffer Overflow:** 44%
- **Other:** 33%
- **Globbing:** 2%
- **Format String:** 7%
- **Heap Corruption:** 8%
- **Integer Overflow:** 6%

### Stack Buffer Overflow Attack

Each function frame consists of the return address, the frame pointer, and the local stack variables of the function. Function `exp1()` defines a stack buffer `buf` with 10 bytes, located a few words before the return address and the frame pointer. The subsequent `scanf()` call can read an arbitrarily long input supplied by the user. When the user input data (i.e., tainted data) overrun the buffer `buf`, the memory locations of the frame pointer and the return address are tainted by the input data (shown as the grey area). The tainted return address is used when `exp1()` returns, diverting the control flow of the program to an attacker-specified location, usually the entry point of malicious code the attacker wants to execute. More details about stack buffer overflow attacks can be found in [5][11].

### Heap Corruption Attack

Heap corruption occurs when the heap structure is corrupted or a buffer is freed twice. For example, a double-free attack can occur if a buffer is freed and then accessed again. The attacker can use a tainted pointer to overwrite the heap metadata, leading to arbitrary code execution.

### Format String Attack

Format string vulnerabilities result from incorrect invocations of printf-like functions. The attacker can supply a format string that includes a tainted pointer, causing the program to read or write to arbitrary memory locations. This can lead to the disclosure of sensitive information or the execution of arbitrary code.

These examples illustrate how pointer taintedness is a critical factor in enabling memory corruption attacks. By detecting and preventing the use of tainted pointers, our proposed technique can effectively mitigate both control data and non-control data attacks.