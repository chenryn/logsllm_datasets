title:Efficient attributes for anonymous credentials
author:Jan Camenisch and
Thomas Groß
Efﬁcient Attributes for Anonymous Credentials
IBM Research, Zurich Research Laboratory
IBM Research, Zurich Research Laboratory
Jan Camenisch
Rüschlikon, Switzerland
PI:EMAIL
Thomas Groß
Rüschlikon, Switzerland
PI:EMAIL
ABSTRACT
We extend the Camenisch-Lysyanskaya anonymous credential sys-
tem such that selective disclosure of attributes becomes highly ef-
ﬁcient. The resulting system signiﬁcantly improves upon existing
approaches, which suffer from a linear complexity in the total num-
ber of attributes. This limitation makes them unﬁt for many practi-
cal applications, such as electronic identity cards. Our system can
incorporate an arbitrary number of binary and ﬁnite-set attributes
without signiﬁcant performance impact. Our approach folds all
such attributes in a single attribute base and, thus, boosts the ef-
ﬁciency of all proofs of possession. The core idea is to encode dis-
crete binary and ﬁnite-set attribute values as prime numbers. We
use the divisibility property for efﬁcient proofs of their presence
or absence. We additionally contribute efﬁcient methods for con-
junctions and disjunctions. The system builds on the Strong-RSA
assumption alone.
We demonstrate the applicability and performance improve-
ments of our method in realistic application scenarios, such as,
electronic identity cards and complex/structured credentials. Our
method has crucial advantages in devices with restricted computa-
tional capabilities, such as smartcards and cell phones.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption—Public key cryptosystems
General Terms
Algorithms, Performance, Security
Keywords
Privacy, Anonymous Credential Systems, Cryptographic Protocols,
Efﬁcient Attribute Encoding
1.
INTRODUCTION
The rise of user-centric identity management ampliﬁes the need
for a combination of strong security and privacy protection. Anony-
mous credential systems are one of the most promising answers to
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27-31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
this need. Such anonymous credential systems allow a user to se-
lectively prove statements about her identity attributes while keep-
ing the corresponding data hidden.
Industry does not only aim at employing anonymous credential
systems on desktop PCs but also on small devices with very limited
computational power. Examples include cell phones and corporate
or government-issued electronic identity cards. In these environ-
ments, one fundamental complexity restriction of anonymous cre-
dential systems amounts to a limiting factor: The complexity of a
credential proof of possession is linear in the total number of at-
tributes in the credential [10, 13].
European electronic identity cards, for instance, often contain
several attributes: Nationality, sex, civil status, hair and eye color,
and applicable minority status1. These attributes are either binary
or discrete variants from a pre-deﬁned ﬁnite sets. They constitute
the lion’s share of the encoded attributes. These attributes are par-
tially highly privacy-sensitive and require a selective disclosure of
one attribute while hiding others completely. The traditional encod-
ing of such attributes in a credential renders anonymous credential
systems impractical for implementation on, e.g., electronic identity
cards. We therefore focus on new and efﬁcient means to encode
binary and ﬁnite-set attributes, enabling anonymous credential for
small devices.
There exist two prior approaches for encoding binary or ﬁnite-set
attributes in anonymous credential systems: First, encoding each
binary attribute in one attribute base (i.e., as one exponent in a dis-
crete logarithm representation). We call this method traditional
encoding. This method is directly impacted by the mentioned com-
plexity restriction: proofs of possession are linear in the total num-
ber of attribute bases. Therefore, each binary attribute burdens all
credential transactions. This traditional approach denies applica-
tions with small devices and a signiﬁcant number of binary/ﬁnite-
set attributes.
A second prior approach encodes binary attributes as bit vector
in one attribute base. Clearly, this approach limits the number of
attribute bases required. It therefore circumvents the linear com-
putational complexity in the total attribute number. However, as
soon as a user reveals some of the attributes in the bit vector the
complexity is linear again. It is either impacted by the total number
of (binary) attributes concerned or by the length of the bit vector,
depending on the particular implementation. Hence this approach
is also unacceptable for small devices.
We extend the Camenisch-Lysyanskaya credential system [13,
15] with a ﬁnite-set encoding. It enables the efﬁcient selective dis-
closure of binary and discrete-values attributes. This method over-
comes the severe limitations of existing schemes. We require a so-
1such as blind, partially sighted, spectacles wearer, or hearing im-
paired
lution with two key properties: (a) It only uses at most one attribute
base for all binary and ﬁnite-set attributes. (b) It only impacts the
proof complexity by the number of used attributes instead of the
total number. Our extension provides a highly efﬁcient toolkit of
attribute proofs as well as AND, OR, and NOT proofs over binary
or ﬁnite-set attributes. Our approach has a constant complexity in
the number of encodable attributes. It is only restricted by space
considerations for the attribute exponent length in the credential
and the size of the issuer’s public key.
The core idea of our paper is to encode binary attributes as well
as discrete attribute values of ﬁnite sets as the product of the prime
numbers corresponding to the attribute values in a single attribute
base. We use the coprime property of the encoding to efﬁciently
prove the attributes’ presence and absence. We also employ this
property to facilitate conjunction and disjunction proofs. The ef-
ﬁciency of this scheme surpasses any existing encoding of binary
and ﬁnite-set attributes.
We note that other cryptographic primitives with privacy protec-
tion can also beneﬁt from our approach, particularly group signa-
tures, blind signatures, and electronic voting schemes.
We structure the remainder of this paper as follows: Sec-
tion 2 covers related literature for anonymous credential systems
as well as existing methods for encoding binary attributes. Sec-
tion 3 contains preliminary deﬁnitions including the Camenisch-
Lysyanskaya credential system. We deﬁne our prime encoding ex-
tensions for binary and ﬁnite-set attributes in Section 4. Section 4.1
contains the attribute representation in CL signatures, followed by
setup and encoding paradigm. We treat proofs with AND, OR, and
NOT statements in Section 4.4. We analyze the complexity of our
scheme compared to existing approaches in Section 5. Section 6
governs possible application scenarios such as electronic identity
cards and role-based access control. We conclude the paper in Sec-
tion 7.
2. RELATED WORKS
Chaum pioneered privacy-preserving protocols that minimize
the amount of personal data disclosed. His work put forth the prin-
ciples of anonymous credentials [21, 23, 24], group signatures [26],
and electronic cash [22]. Subsequently, a number of authors con-
tributed more efﬁcient implementations of these primitives, e.g.,
group signatures [3, 4, 34], e-cash [6, 12, 30], anonymous cre-
dentials [7, 8, 10, 13, 16], traceable signatures [35], anonymous
auctions [36], and electronic voting based on blind-signatures [31].
All these primitives have in common that some party issues a
user some form of certiﬁcate that often contains information about
the user encoded as attributes. Typically, these attributes are en-
coded as a discrete logarithm or, more generally, as an element
(exponent) of a representation of a group element. When releasing
one or more attributes, the corresponding exponents are revealed
and the those corresponding to the non-released attributes are be-
ing hidden by a proof of knowledge of a representation. Thus, in
all these solutions, each attribute encoded into a certiﬁcate uses a
full exponent.
There are also some works [27, 9, 17, 5, 32] that these authors
employ to prove AND, OR and NOT statement about attributes,
e.g., “a user has attribute a OR b,” basically by showing that some
committed value equals a given value OR some other given value.
In contrast, we achieve such proves by showing that some given
attribute value (encoded as a prime) divides (or does not divide)
a committed value, which turns out to be much more efﬁcient (of
course to show that such relations hold we employ some of the
mentioned techniques).
3. PRELIMINARIES
3.1 Assumptions
Strong RSA Assumption [38, 32]: Given an RSA modulus n
and a random element g ∈ Z∗
n and in-
teger e > 1 such that he ≡ g mod n. The modulus n is of a special
form pq, where p = 2p0 + 1 and q = 2q0 + 1 are safe primes. Other
primitives, such as the Fiat-Shamir heuristic to generate signatures
from zero-knowledge proofs of knowledge, may require additional
assumptions. This is orthogonal to the credential system itself.
3.2 Integer Commitments
n, it is hard to compute h ∈ Z∗
i=1 gvi
i .
Recall the Pedersen commitment scheme [37], in which the pub-
lic parameters are a group G of prime order q, and generators
In order to commit to the values (v1, . . . , vm) ∈
(g0, . . . , gm).
q , pick a random r ∈ Zq and set C = Com(v1, . . . , vm; r) =
Zm
0 Qm
gr
Damgård and Fujisaki [28] show that if the group G is an RSA
group and the committer is not privy of the factorization of the
modulus, then in fact the Pedersen commitment scheme can be used
to commit to integers of arbitrary size.
3.3 Known Discrete-Logarithm-Based, Zero-
Knowledge Proofs
In the common parameters model, we use several previously
known results for proving statements about discrete logarithms,
such as (1) proof of knowledge of a discrete logarithm modulo
a prime [39] or a composite [28, 32], (2) proof of knowledge of
equality of representation modulo two (possibly different) prime
[25] or composite [17] moduli, (3) proof that a commitment opens
to the product of two other committed values [9, 17, 19], (4) proof
that a committed value lies in a given integer interval [5, 17, 20],
and also (5) proof of the disjunction or conjunction of any two of
the previous [27]. These protocols modulo a composite are secure
under the strong RSA assumption and modulo a prime under the
discrete logarithm assumption.
When referring to the proofs above, we will follow the nota-
tion introduced by Camenisch and Stadler [18] for various proofs
of knowledge of discrete logarithms and proofs of the validity of
statements about discrete logarithms. For instance,
PK{(α, β, δ) : y = gαhβ ∧ ˜y = ˜gα˜hδ ∧ (u ≤ α ≤ v)}
denotes a “zero-knowledge Proof of Knowledge of integers α, β,
and δ such that y = gαhβ and ˜y = ˜gα˜hδ holds, where u ≤
α ≤ v,1” where y, g, h, ˜y, ˜g, and ˜h are elements of some groups
G = hgi = hhi and ˜G = h˜gi = h˜hi. The convention is that Greek
letters denote quantities of which knowledge is being proven, while
all other values are known to the veriﬁer. We apply the Fiat-Shamir
heuristic [29] to turn such proofs of knowledge into signatures on
some message m; denoted as, e.g., SPK{(α) : y = gα}(m).
Given a protocol in this notation, it is straightforward to derive
actual protocol implementing the proof. Indeed, the computational
complexities of the proof protocol can be easily derived from this
notation: basically for each term y = gαhβ, the prover and the
veriﬁer have to perform an equivalent computation, and to transmit
one group element and one response value for each exponent. With
statement such as (u ≤ α ≤ v) we denote interval checks which
are basically free [17, 20] but are not tight (however, good enough
if the non-tightness can be accounted for as in our application). We
note that this exclude the interval proof protocol as the one by [5]
that are tight but computationally costly, i.e., they require the prover
to provide a number of so-called integer commitments and to prove
relations among them.
3.4 Camenisch-Lysyanskaya Signatures
Let us recall Camenisch-Lysyanskaya signatures [15]
(we
present a slight and straightforward variant which allows messages
to be negative integers as well). Let ‘m, ‘e, ‘n, ‘r and L be system
parameters. ‘r is a security parameter, the meanings of the others
will become apparent soon.
Throughout the paper, we denote by {0, 1}‘m the set of integer
{−(2‘m−1), ...., 2‘m−1). Element of this set can thus be encoded
as binary strings of length ‘m plus an additional bit carrying the
sign, i.e, ‘m + 1 bits in total.
Key generation. On input ‘n, choose an ‘n-bit RSA mod-
ulus n such that n = pq, p = 2p0 + 1, q = 2q0 + 1,
where p, q, p0, and q0 are primes. Choose, uniformly at ran-
dom, R0, . . . , RL−1, S, Z ∈ QRn. Output
the public key
(n, R0, . . . , RL−1, S, Z) and the secret key p.
Message space is the set {(m0, . . . , mL−1) : mi ∈ ±{0, 1}‘m}.
Signing algorithm. On input m0, . . . , mL−1 , choose a random
prime number e of length ‘e > ‘m + 2, and a random number v
of length ‘v = ‘n + ‘m + ‘r, where ‘r is a security parameter.
)1/e mod n . The signature
Compute A = (
R
consists of (e, A, v).
Z
mL−1
L−1 Sv
m0
0
...R
a
signature on message
Veriﬁcation algorithm.
is
Z ≡ AeRm0
2‘e > e > 2‘e−1 holds.
. . . RmL−1
To verify that
the tuple (e, A, v)
check that
L−1 Sv (mod n), mi ∈ ±{0, 1}‘m, and
(m0, . . . , mL−1),
0
THEOREM 3.1. [15] The signature scheme is secure against
adaptive chosen message attacks [33] under the strong RSA as-
sumption.
Proving Knowledge of a Signature. Let us further recall how a
prover can prove that she possesses a CL signature without reveal-
ing any other information about the signature.
Of course we want to use the protocols described in §3.3. Now,
if A was a public value, we could do so by proving knowledge rep-
resentation of Z w.r.t. R0, . . . , RL−1, S, and A. Obviously making
A public would destroy privacy as that would make all transac-
tion linkable. Luckily, one can randomize A: Given a signature
(A, e, v), the tuple (A0 := AS−r mod n, e, v0 := v + er) is also
a valid signature as well. Now, provided that A ∈ hSi and that r is
chosen uniformly at random from {0, 1}‘n+‘∅, the value A0 is dis-
tributed statistically close to uniform over Z∗
n. Thus, the user could
compute a fresh A0 each time, reveal it, and then run the protocol
, µ) : Z ≡ ±Rµ0
(mod n) ∧
µi ∈ ±{0, 1}‘m ∧ ε ∈ [2‘e−1 + 1, 2‘e − 1]} .
0 ··· RµL−1
L−1 A
PK{(ε, ν
0εSν0
0
e + 1, 2‘e−1 + 2‘0
Now, there is a technical consequence from this proof protocol re-
garding the statements µi ∈ ±{0, 1}‘m ∧ ε ∈ [2‘e−1+1, 2‘e−1].
While these can be implemented virtually for free, they requires
that the actually secret lie in a smaller interval, i.e., the signer
needs to choose e from [2‘e−1 − 2‘0
e − 1] with
e < ‘e − ‘∅ − ‘H − 3, where ‘∅ and ‘H are security parameters
‘0
(the ﬁrst controlling statistical zero-knowledge and the second one
being the size of the challenge message in the PK protocol). Sim-
ilarly, we require mi ∈ ±{0, 1}‘m−‘∅−‘H−2 when input to the
signature scheme (cf. [15]). As the proofs can only guarantee that
the absolute value of the messages are smaller then 2‘m we also
include negative message in the message space for consistency. Fi-
nally, we note that in Z ≡ ±Rµ0
(mod n) there
0 ··· RµL−1
L−1 A0εSν0
appears a ±. This is a technicality in the used proofs of knowledge
in RSA. While this is not a problem for the application at hand, we
refer to the standard literature for details.
4. EFFICIENT ATTRIBUTES FOR CL
In this section we provide the means to efﬁciently encode a num-
ber of attributes into an anonymous credential, where with efﬁ-
ciency we consider the computational cost when issuing and using
a credential (note that the communication cost when using a cre-
dential is directly related to the computational cost — hence we
only consider the latter). The standard method to encode attributes
into a credential is to designate a message mj to an attribute and
set mj to the attribute value. Now, if we need to encode a large
number of binary or discrete value attribute this approach requires
a whole message ﬁeld per attribute resulting in computationally ex-
pensive and lengthy proofs of credential ownership (it will depend
linearly on the number of attributes) and a potentially large pub-
lic key (it needs to contain as many bases Ri). Alternatively, one
could encode all the attributes as a binary vector and then set one
message mj to that vector. While this does no longer require as