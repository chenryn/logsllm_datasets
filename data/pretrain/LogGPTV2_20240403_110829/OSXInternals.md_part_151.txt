printf("%-6s = %#08x\n", "fsid", kea->data.dev);
is_fse_arg_vnode = 0;
} else {
printf("%-6s = %#08x (major %u, minor %u)\n",
"dev", kea->data.dev,
major(kea->data.dev), minor(kea->data.dev));
}
break;
case FSE_ARG_MODE: // a combination of file mode and file type
va_mode = (kea->data.mode & 0x0000ffff);
va_type = (kea->data.mode & 0xfffff000);
strmode(va_mode, fileModeString);
va_type = iftovt_tab[(va_type & S_IFMT) >> 12];
printf("%-6s = %s (%#08x, vnode type %s)\n", "mode",
fileModeString, kea->data.mode,
(va_type data.gid);
printf("%-6s = %d (%s)\n", "gid", kea->data.gid,
(g) ? g->gr_name : "?");
break;
default:
printf("%-6s = ?\n", "unknown");
break;
}
kea = (kfs_event_arg_t *)((char *)kea + eoff); // next
} // for each argument
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 60 of 90
} // for each event
} // forever
close(clonefd);
exit(0);
}
Since fslogger.c includes bsd/sys/fsevents.h, a kernel-only header file, you need the kernel source to
compile fslogger.
$ gcc -Wall -I /path/to/xnu/bsd/ -o fslogger fslogger.c
$ sudo ./fslogger
fsevents device cloned (fd 5)
fslogger ready
...
# another shell
$ touch /tmp/file.txt
=> received 76 bytes
# Event
type = FSE_CREATE_FILE
pid = 5838 (touch)
# Details
# type len data
FSE_ARG_VNODE 22 path = /private/tmp/file.txt
FSE_ARG_DEV 4 fsid = 0xe000005
FSE_ARG_INO 4 ino = 3431141
FSE_ARG_MODE 4 mode = -rw-r--r-- (0x0081a4, vnode type VREG)
FSE_ARG_UID 4 uid = 501 (amit)
FSE_ARG_GID 4 gid = 0 (wheel)
FSE_ARG_DONE (0xb33f)
$ chmod 600 /tmp/file.txt
=> received 76 bytes
# Event
type = FSE_STAT_CHANGED
pid = 5840 (chmod)
# Details
# type len data
FSE_ARG_VNODE 22 path = /private/tmp/file.txt
FSE_ARG_DEV 4 fsid = 0xe000005
FSE_ARG_INO 4 ino = 3431141
FSE_ARG_MODE 4 mode = -rw------- (0x008180, vnode type VREG)
FSE_ARG_UID 4 uid = 501 (amit)
FSE_ARG_GID 4 gid = 0 (wheel)
FSE_ARG_DONE (0xb33f)
...
11.8.3. Importing Metadata
Spotlight metadata includes both conventional file system metadata and other metadata that resides within
files. The latter must be explicitly extracted (or harvested) from files. The extraction process must deal with
different file formats and must choose what to use as metadata. For example, a metadata extractor for text
files may first have to deal with multiple text encodings. Next, it may construct a list of textual
keywordsperhaps even a full content indexbased on the file's content. Given that there are simply too many
file formats, Spotlight uses a suite of metadata importers for metadata extraction, distributing work among
individual plug-ins, each of which handles one or more specific types of documents. Mac OS X includes
importer plug-ins for several common document types. The mdimport command-line program can be used
to display the list of installed Spotlight importers.
$ mdimport -L
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 61 of 90
...
"/System/Library/Spotlight/Image.mdimporter",
"/System/Library/Spotlight/Audio.mdimporter",
"/System/Library/Spotlight/Font.mdimporter",
"/System/Library/Spotlight/PS.mdimporter",
...
"/System/Library/Spotlight/Chat.mdimporter",
"/System/Library/Spotlight/SystemPrefs.mdimporter",
"/System/Library/Spotlight/iCal.mdimporter"
)
In a given Mac OS X file system domain, Spotlight plug-ins reside in the Library/Spotlight/ directory.
An application bundle can also contain importer plug-ins for the application's document types.
An importer plug-in claims document types it wishes to handle by specifying their content types in its
bundle's Info.plist file.
$ cat /System/Library/Spotlight/Image.mdimporter/Contents/Info.plist
...
LSItemContentTypes
public.jpeg
public.tiff
public.png
...
com.adobe.raw-image
com.adobe.photoshop-image
...
You can also use the lsregister support tool from the Launch Services framework to dump the contents
of the global Launch Services database and therefore view the document types claimed by a metadata
importer.
Mac OS X provides a simple interface for implementing metadata importer plug-ins. An importer plug-in
bundle must implement the GetMetaDataForFile() function, which should read the given file, extract
metadata from it, and populate the provided dictionary with the appropriate attribute key-value pairs.
If multiple importer plug-ins claim a document type, Spotlight will choose the one that matches a given
document's UTI most closely. In any case, Spotlight will run only one metadata importer for a given file.
Boolean
GetMetaDataForFile(
void *thisInterface, // the CFPlugin object that is called
CFMutableDictionaryRef attributes, // to be populated with metadata
CFStringRef contentTypeUTI,// the file's content type
CFStringRef pathToFile); // the full path to the file
It is possible for an importer to be called to harvest metadata from a large number of filessay, if a volume's
metadata store is being regenerated or being created for the first time. Therefore, importers should use
minimal computing resources. It is also a good idea for an importer to perform file I/O that bypasses the
buffer cache; this way, the buffer cache will not be polluted because of the one-time reads generated by the
importer.
Unbuffered I/O can be enabled on a per-file level using the F_NOCACHE file control operation with the
fcntl() system call. The Carbon File Manager API provides the noCacheMask constant to request that the
data in a given read or write request not be cached.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 62 of 90
Once the metadata store is populated for a volume, file system changes will typically be incorporated
practically immediately by Spotlight, courtesy of the fsevents mechanism. However, it is possible for
Spotlight to miss change notifications. The metadata store can become out of date in other situations as
wellfor example, if the volume is written by an older version of Mac OS X or by another operating system.
In such cases, Spotlight will need to run the indexing process to bring the store up to date. Note that
Spotlight does not serve queries while the indexing process is running, although the volume can be written
normally during this time, and the resultant file system changes will be captured by the indexing process as
it runs.
The Spotlight server does not index temporary files residing in the /tmp directory. It also does not index
any directory whose name contains the .noindex or .build suffixesXcode uses the latter type for storing
files (other than targets) generated during a project build.
11.8.4. Querying Spotlight
Spotlight provides several ways for end users and programmers to query files and folders based on several
types of metadata: importer-harvested metadata, conventional file system metadata, and file content (in the
case of files whose content has been indexed by Spotlight). The Mac OS X user interface integrates
Spotlight querying in the menu bar and the Finder. For example, a Spotlight search can be initiated by
clicking on the Spotlight icon in the menu bar and typing a search string. Clicking on Show All in the list
of search resultsif anybrings up the dedicated Spotlight search window. Programs can also launch the
search window to display results of searching for a given string. Figure 1126 shows an example.
Figure 1126. Programmatically launching the Spotlight search window
// spotlightit.c
#include 
#define PROGNAME "spotlightit"
int
main(int argc, char **argv)
{
OSStatus status;
CFStringRef searchString;
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
return 1;
}
searchString = CFStringCreateWithCString(kCFAllocatorDefault, argv[1],
kCFStringEncodingUTF8);
status = HISearchWindowShow(searchString, kNilOptions);
CFRelease(searchString);
return (int)status;
}
$ gcc -Wall -o spotlightit spotlightit.c -framework Carbon
$ ./spotlightit "my query string"
...
The MDQuery API is the primary interface for programmatically querying the Spotlight metadata store. It
is a low-level procedural interface based on the MDQuery object, which is a Core Foundationcompliant
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 63 of 90
object.
Cocoa and Spotlight
Mac OS X also provides an Objective-C-based API for accessing the Spotlight metadata store.
The NSMetadataQuery class, which supports Cocoa bindings, provides methods for creating a
query, setting the search scope, setting query attributes, running the query, and retrieving
query results. It is a higher-level object-oriented wrapper[15] around the MDQuery API. The
NSMetadataItem class encapsulates a file's associated metadata. Other relevant classes are
NSMetadataQueryAttributeValueTuple and NSMetadataQueryResultGroup.
[15] NSMetadataQuery does not support synchronous queries in Mac OS X 10.4. Moreover, as
query results are collected, it provides only minimal feedback through notifications.
A single query expression is of the following form:
metadata_attribute_name operator "value"[modifier]
metadata_attribute_name is the name of an attribute known to Spotlightit can be a built-in attribute or
one defined by a third-party metadata importer. The mdimport command can be used to enumerate all
attributes available in the user's context.[16]
[16] If a metadata importer is installed locally in a user's home directory, any attributes it
defines will not be seen by other users.
$ mdimport -A
...
'kMDItemAuthors' 'Authors' 'Authors of this item'
'kMDItemBitsPerSample' 'Bits per sample' 'Number of bits per sample'
'kMDItemCity' 'City' 'City of the item'
...
'kMDItemCopyright' 'Copyright' 'Copyright information about this item'
...
'kMDItemURL' 'Url' 'Url of this item'
'kMDItemVersion' 'Version' 'Version number of this item'
'kMDItemVideoBitRate' 'Video bit rate' 'Bit rate of the video in the media'
...
Note that the predefined metadata attributes include both generic (such as kMDItemVersion) and format-
specific (such as kMDItemVideoBitRate) attributes.
operator can be one of the standard comparison operators, namely, ==, !=, , =.
value is the attribute's value, with any single- or double-quote characters escaped using the backslash
character. An asterisk in a value string is treated as a wildcard character. value can be optionally followed
by a modifier consisting of one or more of the following characters.
 c specifies case-insensitive comparison.
 d specifies that diacritical marks should be ignored in the comparison.
 w specifies word-based comparison, with the definition of a "word" including transitions from
lowercase to uppercase (e.g., "process" wc will match "GetProcessInfo")
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 64 of 90
Multiple query expressions can be combined using the && and || logical operators. Moreover, parentheses
can be used for grouping.
Figure 1127 shows an overview of a representative use of the MDQuery API. Note that a query normally
runs in two phases. The initial phase is a results-gathering phase, wherein the metadata store is searched for
files that match the given query. During this phase, progress notifications are sent to the caller depending
on the values of the query's batching parameters, which can be configured using MDQueryBatchingParams
(). Once the initial phase has finished, another notification is sent to the caller. Thereafter, the query
continues to run if it has been configured for live updates, in which case the caller will be notified if the
query's results change because of files being created, deleted, or modified.
Figure 1127. Pseudocode for creating and running a Spotlight query using the MDQuery interface
void
notificationCallback(...)
{
if (notificationType == kMDQueryProgressNotification) {
// Query's result list has changed during the initial
// result-gathering phase
} else if (notificationType == kMDQueryDidFinishNotification) {
// Query has finished with the initial result-gathering phase
// Disable updates by calling MDQueryDisableUpdates()
// Process results
// Reenable updates by calling MDQueryEnableUpdates()
} else if (notificationType == kMDQueryDidUpdateNotification) {
// Query's result list has changed during the live-update phase
}
}
int
main(...)
{
// Compose query string (a CFStringRef) to represent search expression
// Create MDQueryRef from query string by calling MDQueryCreate()
// Register notification callback with the process-local notification center
// Optionally set batching parameters by calling MDQuerySetBatchingParameters()
// Optionally set the search scope by calling MDQuerySetSearchScope()
// Optionally set callback functions for one or more of the following:
// * Creating the result objects of the query
// * Creating the value objects of the query
// * Sorting the results of the query
// Execute the query and start the run loop
}
Let us write a program that uses the MDQuery API to execute a raw query and displays the results. The
Finder's Smart Folders feature works by saving the corresponding search specification as a raw query in an
XML file with a .savedSearch extension. When such a file is opened, the Finder displays the results of
the query within. We will include support in our program for listing the contents of a smart folderthat is,
we will parse the XML file to retrieve the raw query.
Figure 1128 shows the programit is based on the template from Figure 1127.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 65 of 90
Figure 1128. A program for executing raw Spotlight queries
// lsmdquery.c
#include 
#include 
#include 
#define PROGNAME "lsmdquery"
void
exit_usage(void)
{
fprintf(stderr, "usage: %s -f \n"
" %s -q \n", PROGNAME, PROGNAME);
exit(1);
}
void
printDictionaryAsXML(CFDictionaryRef dict)
{
CFDataRef xml = CFPropertyListCreateXMLData(kCFAllocatorDefault,
(CFPropertyListRef)dict);
if (!xml)
return;
write(STDOUT_FILENO, CFDataGetBytePtr(xml), (size_t)CFDataGetLength(xml));
CFRelease(xml);
}
void
notificationCallback(CFNotificationCenterRef center,
void *observer,
CFStringRef name,
const void *object,
CFDictionaryRef userInfo)
{
CFDictionaryRef attributes;
CFArrayRef attributeNames;
CFIndex idx, count;
MDItemRef itemRef = NULL;