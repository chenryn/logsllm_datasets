3.2.4 Committing Process: TPM2 Commit()
As mentioned in Section 2, the signing procedure in tpm.sign
includes two phases: committing and signing. The commit-
ting process is achieved using the command TPM2 Commit().
This command is specially designed for a number of ap-
plications, including DAA (See Section 4) and U-Prove (See
Section 5). It causes the TPM to compute the ﬁrst part of
the tpm.sign signature operation.
It takes as input a key
handle of a signing key tk, a point P1 in G, a string ˆs, and
an integer ˆy , where ˆs and ˆy are used to construct another
point P2 in G, see below for details. The TPM outputs three
points R1, R2, K2, and a counter ctr to the host, where ctr
is used for identifying the random value r created by this
command. In the remaining part of the paper, we use
(R1, R2, K2, ctr )←TPM2 Commit()
or (R1, R2, K2)←Commit()
to denote this command. To respond this command the
TPM performs the following steps:
1. TPM computes ˆx := H(ˆs) where H is a collision-
resistant hash function, and sets P2 := (ˆx, ˆy).
2. TPM veriﬁes P1 and P2 are elements in G.
3. TPM chooses a random integer r ← Zp.
414. TPM computes R1 := P r
1 , R2 := P r
2 , and K2 := P x
2 .
5. TPM outputs R1, R2, K2 and ctr while keeping r in-
ternally.
Note that some input to this command can be empty. If
P1 is an empty ﬁeld, then R1 is not computed. If s and ˆy
are empty, then R2 and K2 are not computed.
Signing Process: TPM2 Sign()
Note also that this command is slightly diﬀerent from
the description of tpm.sign in Section 2. In the command,
the value P2 is computed as P2 := (H(ˆs), ˆy), whereas in
the tpm.sign scheme, P2 := HG(str). This is because it
is expensive for TPM to implement a new hash function
HG. Given str, the host will compute ˆs an ˆy such that
HG(str) = (H(ˆs), ˆy), therefore the TPM does not need to
implement HG. Details can be found in Appendix A.
3.2.5
This command causes a TPM to sign a digest of a given
message, which is a hash output of the message. The com-
mand takes as input a handle of the signing key tk, a message
digest ch, and optionally a counter value ctr , and outputs a
signature σ on the message. The counter value ctr is only
needed when the sign command is called after executing a
commit command Commit(). Standard digital signature al-
gorithms can be used, such as RSA, EC-DSA, or EC-Schnorr
signatures. If a conventional signature scheme is used, then
there is no need to call the commit command. In the re-
maining part of the paper, we use
σ←TPM2 Sign()
σ←Sign()
or
In the context of tpm.sign, the
to denote this command.
TPM responds this comment by performing the following
steps:
1. TPM computes c := H(ch, m), where m is the data
required to be signed.
2. TPM retrieves r from the commit command based on
the ctr value.
3. TPM computes s := r + c · x mod p where x is the
private key tsk, and deletes r.
4. TPM outputs σ = (c, s).
In the description of Commit() and Sign(), we assume an
ideal implementation where the random value r created in
the commit command is stored inside the TPM. The value
r is deleted after the corresponding sign command has been
executed. However, for the resource-constrained TPM, such
implementation is too expensive. In the TPM 2.0 speciﬁ-
cation, as suggested by David Wooten [32], the following
alternative method is used.
• During each boot of TPM, a random seed value seed
is generated and stored. The TPM maintains a max-
imum counter value mctr (with initial value 0) and a
bit table T of N = 2n entries.
• In each execution of the commit command, the TPM
increments mctr and sets ctr := mctr . The TPM de-
rives r from seed and ctr , i.e., r := kdf(seed , ctr ).
Let i be the least signiﬁcant n bits of ctr . The TPM
sets T [i] = 1. In the end of this command, the TPM
outputs ctr .
• In the sign command with ctr as input, the TPM ﬁrst
veriﬁes that mctr − N < ctr ≤ mctr . Let i be the least
signiﬁcant n bits of ctr . The TPM then checks that
T [i] = 1. If all the veriﬁcation succeed, the TPM uses
the seed and ctr to re-generate r. The TPM then sets
T [i] = 0.
Using the above method, TPM does not need to save r for
each commit command. Observe that the TPM checks ctr ≤
mctr and makes sure the same ctr has not been used by the
sign command before, an attacker cannot query the future
ctr or re-use an old ctr value. In the rest of this paper, we
assume r is generated randomly instead of being derived for
the purpose of security analysis.
4. APPLICATION 1: DAA IN TPM 2.0
Direct anonymous attestation (DAA) is an anonymous
digital signature primitive, providing a balance between user
privacy and signer authentication in a reasonable way. In a
DAA scheme, there are issuers, signers and veriﬁers. The
role of an issuer is to verify legitimacy of signers and to is-
sue a unique DAA credential to each legitimate signer. A
signer proves possession of her credential to a veriﬁer by pro-
viding a DAA signature, which reveals neither of the DAA
credential nor the signer’s identity but allows the veriﬁer to
authenticate the signer.
The concept and ﬁrst concrete scheme of DAA were pro-
posed by Brickell, Camenisch, and Chen [5] for the purposes
of remote anonymous attestation of a trusted computing
platform. Security of their DAA scheme is based on the
Strong RSA problem.
In this paper, we call this scheme
RSA-DAA for short. This DAA scheme was designed as a
TPM function for the TCG and speciﬁed in the TPM speciﬁ-
cation version 1.2 [30]. Since the ﬁrst introduction of DAA,
it has attracted lots of attention from both industry and
cryptographic researchers, e.g., [2, 3, 6, 7, 8, 9, 10, 13, 14,
16, 17, 22, 23, 27, 29].
Although the RSA-DAA scheme was adopted by the TCG
and included in the TPM 1.2 speciﬁcation ten years ago,
TPM vendors have never been happy with it. The major rea-
son is that the scheme is very expensive. In TPM 1.2 there
are two expensive and single purpose commands used to
implement the RSA-DAA scheme, namely DAA Join() and
DAA Sign(). The description of these two commands takes
about 10% space of the entire speciﬁcation of TPM 1.2. Fol-
lowing IBM software TPM 1.2 implementation, DAA takes
6.9% of total code space (see Section 4.6 for the details).
In the development of TPM 2.0, the functionality of DAA
is still required, as addressing privacy concerns is impor-
tant in a trusted computing environment. However, both
TPM users and vendors want a new DAA implementation
with minimum overhead and much higher eﬃciency than
the RSA-DAA scheme. This is one of the motivations of the
work described in this paper.
In this section, we demonstrate how to use the tpm.sign
scheme to implement DAA, which no longer requires any
heavy commands. We ﬁrst give a general description of
DAA, and then show that two existing pairing-based EC-
DAA schemes ([16, 10]) can be interpreted following this
description. After that, we demonstrate that the DAA Join
process and Sign process can be implemented using tpm.sign.
This application was the main motivation why we designed
42tpm.sign, and the result provides evidence that tpm.sign is a
ﬂexible and scalable signature algorithm.
4.1 A General Description of DAA
As described in many DAA papers [5, 22, 9, 6, 17, 16, 10,
8], a DAA scheme involves a set of DAA issuers I, a set of
signers S and a set of veriﬁers V. Each signer comprises
a host platform and its associated TPM. A DAA scheme
DAA = (Setup, Join, Sign, Verify, Link) consists of the follow-
ing ﬁve polynomial-time algorithms and protocols:
• Setup: On input of a security parameter 1t, an issuer
i ∈ I uses this randomized algorithm to produce its
secret key isk, public key ipk and the global public pa-
rameters param. param includes a list called RogueList
that contains rogue signers’ secret keys. RogueList is
set as an empty list in Setup and will be updated ev-
ery time a rogue signer is discovered. Note that how to
ﬁnd a rogue signer is out the scope of a DAA scheme.
We will assume that param are publicly known so that
we do not need to explicitly provide them as input to
other algorithms.
• Join: This protocol is run between an issuer i ∈ I and
a signer (t, h) ∈ S, where t is a TPM and h is the
corresponding host. The protocol creates the TPM’s
secret key tsk and its DAA credential cre. The value
cre is a signature on tsk under isk and can be veriﬁed
under ipk. In this paper, we denote this signing and
veriﬁcation algorithms by i.sign and i.verify. The value
cre is given to both t and h, but the value tsk is known
to t only.
• Sign: On input of tsk, cre, a basename bsn (the name
string of a veriﬁer v ∈ V or a special symbol ⊥), a
message msg to be signed and optionally the veriﬁer’s
nonce nV for freshness, t and h run this protocol to
produce a DAA signature σ. More speciﬁcally, t cre-
ates a signature σt under tsk and h converts σt to σ
using cre. In this paper, we denote the TPM’s signing
algorithm and its corresponding veriﬁcation algorithm
by t.sign and t.verify.
• Verify: On input of msg, bsn, and a candidate signa-
ture σ for msg and bsn. v ∈ V uses this deterministic
algorithm to return either true (accept) or false (re-
ject). Note that if σ was created under a key listed in
RogueList, it will be rejected.
• Link: On input of two signatures σ0 and σ1, v uses
this deterministic algorithm to return linked (linked),
unlinked (not linked) or ⊥ (invalid signatures). Note
that, unlike Verify, the result of Link is not relied on
RogueList.
We now give a new interpretation of DAA, which will lead
us to implement two DAA schemes with the same TPM
algorithm, tpm.sign. In our interpretation, a DAA scheme
contains the following two underlying signature schemes that
intercommunicate to each other:
• i.sign & i.verify: the DAA issuer’s signature and veri-
ﬁcation algorithms. We use cre←i.sign(isk, tsk) to in-
dicate that a DAA credential cre is a signature on the
signed message tsk under the signing key isk. The cor-
rection of cre can be veriﬁed via accept←i.verify(ipk,
cre, tsk). This signature algorithm has the properties
of blinded signing and randomization. By these two
properties we mean the following:
– Given a commit value of tsk rather than tsk, the
issuer can create cre. This allows the issuer to
sign tsk without knowing this value.
– Given cre, one can randomize it to obtain another
satisfying accept←i.verify(ipk, cre
(cid:3)
,
(cid:3)
signature cre
tsk).
(cid:3)
– The issuer cannot tell whether cre
and cre are
signatures on the same tsk value or not.
• t.sign & t.verify: the TPM’s signature and veriﬁcation
algorithms. We use σt←t.sign(tsk, bsn, (msg, nV )) to
indicate that a TPM part of the DAA signature is a sig-
nature on bsn, msg and nV under the TPM signing key
tsk. This signature has a property of user-controlled-
linkability, which has the following meanings:
– σt includes two parts σt = (σt,α, σt,β).
– σt,α is a deterministic signature on bsn under tsk.
If two signatures contains the same bsn and σt,α
values, they show that these two signatures are
signed under the same tsk by the same TPM.
– σt,β is a “conventional” signature on (msg, nV ) un-
der tsk. Depending on a DAA scheme, σt,β may
only available to the host h, not the Veriﬁer v.
A DAA signature is a proof of knowledge of two underlying
and σt,α, in a signature format, denoted by:
signatures, cre
(cid:3)
SPK{(tsk, cre) : cre
(cid:3) ∧ σt,α}(msg, bsn, nV ).
Given the value cre and accessing to the TPM for t.sign,
the host is able to compute such a proof. However, with-
out accessing the TPM for t.sign, the host is not able to
do so. The tpm.sign algorithm described in Section 2 is an
implementation example of t.sign. In the next two subsec-
tions, we will explain how the LRSW-DAA scheme [16] and
SDH-DAA scheme [10] can be interpreted using the two un-
derlying signatures, i.sign and t.sign. As security of these
two DAA schemes have been analyzed in their original work
and we only suggest a new way to implement them, we do
not repeat the security proof of these two DAA schemes in
this paper. Our security analysis of tpm.sign in Section 2.2
proves that the host is not able to forge a tpm.sign signature;
this proof indicates that the new implementation does not
reduce security level of these two DAA schemes. This fol-
lows from the argument that except the host, from the view
point of any other entities of the DAA scheme (a DAA Is-
suer or a DAA Veriﬁer), a DAA signature created following
the TPM 2.0 implementation is identical to the one created
following the original schemes.
4.2 The LRSW-DAA Scheme
The above general description ﬁts with the LRSW-DAA
scheme as follows (we keep the names of parameters as used
in [16]):
• tsk = f and tpk = (P1, F ), where F = P f
1 .
• cre = (A, B, C, D, u, v): as shown in the join protocol
of the DAA scheme in [8]; (A, B, C) is the CL sig-
nature [11] on f ; (u, v) is a Schnorr signature by the
43issuer; as a result, cre is a variety of the CL signature
on tpk, that allows the host to veriﬁes it without aid
of the TPM.
• cre
(cid:3)
= (R, S, T, W, h, s): as shown in the sign/verify
protocol of the DAA scheme in [16]; (h, s) is a Schnorr
signature by the TPM. cre
is a blinded CL signature
on tsk.
(cid:3)
• σt,α = (J, K), where J is equivalent to P2 and K = J f
equivalent to K2 in tpm.sign.
• σt,β = (h, s).
• SPK{(tsk, cre) :cre
(cid:3) ∧ σt,α}(msg, bsn, nV )
= (R, S, T, W, J, K, h, s).
4.3 The SDH-DAA Scheme
The above general description ﬁts with the SDH-DAA
scheme as follows (again we keep the names of parameters
as used in [10]):
• tsk = f and tpk = (h1, F ), where F = hf
1 .
• cre = (A, x): cre is a signature on tpk (therefore on
tsk) that can be veriﬁed by, e(A, wgx
2 ) =e( g1F, g2).
• cre
(cid:3)
holds e(T
= T = Aha
−xhf
1 hax
(cid:3)
2: cre
2 , g2)e(h2, w)a = e(T, w)/e(g1, g2).
is a blind signature on tsk that
• σt,α = (J, K), where, similar to the LRSW-DAA scheme,
J is equivalent to P2 and K = J f equivalent to K2 in
tpm.sign.
• σt,β is only available to the host.
• SPK{(tsk, cre) :cre
(cid:3) ∧ σt,α}(msg, bsn, nV )
= (J, K, T, c, sf , sx, sa, sb).
4.4 The TPM 2.0 DAA Join Process
There are two options for the TPM 2.0 join process. In the
ﬁrst option, the process is performed in the platform man-
ufacturing line, e.g., the DAA issuer is the Original Equip-
ment Manufacturer (OEM) of the platform. In this case, the
issuer knows that it is talking to a genuine TPM. The issuer
uses Create() to generate a DAA key, and then creates the
corresponding DAA credential for the TPM.
In the second option, the DAA join process is after the
platform has been shipped to an end user and the platform
has a certiﬁed manufacturing endorsement key, ek, which is
an asymmetric encryption key and its certiﬁcate is available
to the DAA issuer. This is a common situation. The Join
protocol, as shown in Figure 1, is run among a TPM t, the
corresponding host h and a DAA Issuer i. Suppose that the
host and the TPM know which key is a parent key and this
key is already available to the TPM. In our description, we
assume that this may be the TPM endorsement key ek. The
Join protocol has the following four steps. We refer each