attacks that involve introduction of malicious periphal devices.
In this setting, we need Fidelius-compatible devices to include
a trusted component that can perform an attestation with the
enclave to prove its legitimacy before exchanging keys. Note
that
this attestation must occur in both directions – from
enclave to keyboard and from keyboard to enclave – or the
device that does not attest can be faked by an attacker.
B. Trusted Communication
The process of switching between trusted and untrusted
modes presents an interesting security challenge. An authenti-
cation procedure between the enclave and the trusted devices
can ensure that only the enclave initiates switches between
trusted and untrusted modes, but this ignores the larger prob-
lem that the enclave must rely on the untrusted OS to inform
it when an event has happened that necessitates switching
modes. Avoiding that necessity would require moving a pro-
hibitively large fraction of the browser and UI into an enclave.
Our solution has two parts and relies on making the user aware
of when key presses produce trusted or untrusted input. First,
we include a light on each dongle that turns on only when the
keyboard or display are in trusted mode. This alone, however,
does not sufﬁce to solve the problem, as an attacker could
mount a “rapid switching” attack where it jumps in and out
of trusted mode faster than the user can perceive or react,
leading to parts of the user’s input being leaked by untrusted
input. Even worse, rapid switching between modes may occur
quickly enough to not be noticable to a user monitoring the
lights. To prevent this attack, we force a short delay when
switching out of trusted mode. This ensures the user will have
time to notice and react when a switch occurs.
The enclave switches devices in and out of trusted mode by
sending one of two reserved messages which are simply ﬁxed
strings that they interpret as commands to change the trust
setting. When in trusted mode, messages between the enclave
and the peripherals are encrypted as described in Section VI-C.
Since the timing of key presses can reveal sensitive in-
formation about what keys are being pressed [27], we must
also avoid leaking timing information while in trusted input
mode. We do this by having the keyboard send a constant
stream of key presses where most contain only an encryption
of a dummy value that indicates no key pressed. As long
as the ﬁxed frequency of key presses exceeds the pace at
which a user types, the user experience is unaffected by this
protection. Since user key presses typically result in changes
on the display, we update the display contents at the same rate
as we read keyboard inputs.
Our trusted input design in many ways mirrors that of
Bumpy [28] and SGX-USB [29], which also provide generic
trusted user input using similar techniques but do not provide
the web functionality that we do. In contrast to our work,
Bumpy does not display any trusted user input. SGX-USB
allows for generic I/O but does not solve the problem of
mixing trusted and untrusted content in a user interface as
we do in both our keyboard and display. Neither system has
source code available. We improve on the features of both
works by protecting against timing attacks on encrypted data
sent from trusted input devices.
C. Message structure
Messages sent in the trusted communication protocol de-
scribed above must include safeguards against replay attacks.
To do this, we include a counter in every message sent, so that
the same count never repeats twice. Counters are maintained
on a per-device and per-origin basis, so every message between
the enclave and the keyboard or display must include a counter
value and the name of the origin in addition to the encrypted
key press or overlay itself.
VII. WEB ENCLAVE
In this section we cover the details of the web enclave.
First, we provide an overview of the state transitions of a web
enclave. Next, we present the protocols for remote attestation,
origin authentication, and exchange of key material. Finally,
we present the details of the operations: secure HTML forms,
JavaScript code execution, secure network communication,
and persistent storage across web enclave executions.
A. Web Enclave State Machine
The web enclave implements the state machine in Figure 3.
At any point, it can be in one of the following ﬁve states:
initial, authenticated, ready, end, and fail. Transitions are
caused by ECALLs. Each state has a list of accepted ECALLs.
For example, the initial state accepts only ECALLs for the
remote attestation and origin validation. Other ECALLs bring
the web enclave to the fail state. No other transition is possible
from this state, and the enclave needs to be terminated after
reaching it.
Fidelius creates a web enclave when it ﬁnds any 
or  tags with the secure attribute set. Then it
derives the origin of the tags that need to be protected. By
default, the origin of the tags are inherited from the web page
they belong to, i.e., the domain and port of the URL. However,
for tags such as  and , the origin is derived
from the action and src attributes respecively. Tags can
have different origins. While it is possible to create one web
enclave for each origin, the current version of the web enclave
assumes that all protected components on a page communicate
with the same origin.
Once the origin has been determined, Fidelius passes the
origin to the web enclave and performs remote attestation and
(cid:19)(cid:23)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
,QLWLDO
(FDOO6XFFHVV
(FDOO)DLOXUH
5HPRWH$WWHVWDWLRQ	
RULJLQYHULILFDWLRQ
$XWKHG
$GGIRUPV
$GG-DYD6FULSW
9HULI\WDJVLJQDWXUHV
)DLO)DLO
5HDG\
5XQ-DYD6FULSW
(YHQWQRWLILFDWLRQV
*HWHQFU\SWHGNH\VWURNHV
6HQGHQFU\SWHGIUDPHV
([LWSDJHRUPDQXDOO\
WHUPLQDWH
(QG
Fig. 3. Finite state machine representing web enclave behavior.
origin validation, after which the enclave and the origin can
share a symmetric key. This key will be used to encrypt any
communication between the enclave and the origin, so any
network manipulation or monitoring will only result in an
attacker recovering encrypted data for which it does not have
the key. As a result, the rest of the network stack can remain
outside the enclave in untrusted code. In order to verify an
origin, the enclave must have the corresponding public key,
either as a hard-coded value or, more realistically, by verifying
a certiﬁcate signed by a hard-coded authority.
At this point, the web enclave is in the authenticated state.
Fidelius retrieves the tags with the secure attribute set and
loads them into the enclave. These operations do not cause a
state transition. The only ECALL that causes a valid transition
from this state is veriﬁcation of the signatures. If the validation
of all signatures succeeds, the enclave enters the ready state.
From this point on, the enclave is fully operational and can
decrypt keyboard inputs, prepare encrypted outputs for the
display, execute JavaScript functions, and take/release control
of the trusted path upon focus and blur events respectively.
B. Features
Once an enclave has successfully entered the ready state,
the full functionality of Fidelius becomes available to the web
application. Fidelius supports secure HTML forms, JavaScript
execution, secure network communication, and persistent pro-
tected storage.
1) Secure HTML Forms: When parsing a page, Fidelius
ﬁnds  tags with the secure attribute and, after verify-
ing the provided signature using the server’s public key, creates
a form data structure inside the enclave to keep track of the
form and each of the inputs inside it. We currently store server
public keys inside the enclave but could replace this with root
certiﬁcates instead. When the user highlights an input inside
a given form, the browser notiﬁes the enclave. The enclave
switches the keyboard from untrusted to trusted input mode
(see Section VI for details), and subsequent user key presses
modify the state of the highlighted input ﬁeld. As mentioned
in Section V, various defenses at the interface level protect
against attacks that an attacker could mount by modifying
untrusted content between the enclave and the user. By pushing
these defensess into the UI, we allow ourselves to keep
many components of the browser outside of the enclave and
dramatically reduce Fidelius’s TCB. For example, monitoring
of mouse movements and placement of forms on the page
can be managed outside the enclave, and tampering/dishonesty
with these elements will be detected by a user who notices
the inconsistency between what she sees on the screen and
the content of the trusted overlay.
Submission of HTML forms involves encrypting the content
of the form as one blob using the shared key negotiated during
attestation and sending that to the server.
2) Javascript: We run a JavaScript interpreter inside the
enclave but leave out heavy components like the event loop.
When a trusted JavaScript function is called,
the enclave
provides the interpreter with function inputs and any other
state that should be available to the code about to run.
Javascript running in the enclave can access the content of
protected HTML forms via the the global variable forms. The
forms variable contains a property for each form name. For
example, with reference to the HTML code in Listing 1, the
payment form can be accessed via forms.payment where
payment is the value of the attribute name of the 
tag. Developers can implement custom input validation proce-
dures. For example, a very simple form of validation can be
checking if the credit card ﬁeld contains forbidden characters
such as white spaces. The JavaScript function that veriﬁes the
presence of white spaces can be implemented as shown in
Listing 2.
1
2
3
function cardNumberHasWhiteSpaces() {
return /\s/g.test(forms.payment.card);
}
Listing 2. Simple form validation
3) Network Communication: In order for protection of user
data on the local machine to translate into a useful web
application, there must be a mechanism for transmitting data
out from the enclave without tampering by the compromised
browser or OS. We provide a basic mechanism for doing this
by supporting HTML forms, but web applications in general
need to send back data to the server programmatically in a
variety of contexts, not just when a user submits a form. To
support this need, we provide support for XMLHttpRequests
(as shown in Listing 3) where requests are encrypted inside
the enclave using the shared key from the attestation process
before leaving the enclave.
1
2
function doPay(e) {
// input form to JS associative array
(cid:19)(cid:24)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
d = toDict(forms.payment);
// validate payment data
if (validate(d)) {
return false;
}
// prepare raw messages
json_str = JSON.stringify(d);
// create SecureXMLHttpRequest
var xhr = new SecureXMLHttpRequest();
xhr.open("POST",
"https://pay.site.com/submit_data",
false); // only sync calls
// use sec_json content type
xhr.setRequestHeader('Content-Type',
'application/sec_json; charset=UTF-8');
// encrypt, sign, and send
xhr.send(json_str);
// seal data for possible future reuse
storeCreditCardData(d);
}
Listing 3. XMLHTTPRequest example
The problem of defending against replay of messages over
the network is not unique to the trusted hardware setting and
must be handled separately by applications built on Fidelius.
4) Persistent Storage: Fidelius provides developers with a
web storage abstraction similar to the standard web storage
provided by unmodiﬁed web browsers. Secure web storage
can be accessed via localStorage, as shown in Listing 4.
1
2
3
4
5
6
function storeCreditCardData(d){
localStorage['holder'] = d.holder;
localStorage['cc']
localStorage['exp']
localStorage['cvv']
= d.card;
= d.expiry;
= d.cvv;
}
Listing 4. Web storage
When the need for persistent storage arises, Fidelius en-
crypts the data to be stored using a sealing key and stores
it on disk (it could equivalently use existing browser storage
mechanisms to hold the encrypted data). The sealing key is
a feature provided by SGX to an enclave in order to store
persistent data across multiple runs of the enclave.
This approach raises two problems we must resolve. First,
every instance of the same enclave shares the same sealing
key, so we must ensure that different enclaves created by the
same browser cannot read each others’ secrets. We can prevent
this problem by including the associated origin as additional
authenticated data with the encrypted data to be stored. This
way an enclave can ﬁnd and restore data associated with the
origin it connects to but, as a matter of policy, does not allow
the user to access data associated with any other origin. The
integrity guarantees of our trusted hardware platform ensure