      figure.Segments.Add(segment1);
      var geometry = new PathGeometry();
      geometry.Figures = new PathFigureCollection();
      geometry.Figures.Add(figure);
      mouth.Data = geometry;
      _laugh = ! _laugh;
    }
分段和图片的使用在下一节详细说明。
表30-1描述了名称空间System.Windows.Shapes和Windows.Ui.Xaml.Shapes中可用的形
状。
表30-1
Shape类
说明
Line
可以在坐标（X1, Y1）到（X2, Y2）之间绘制一条线
Rectangle
使用Rectangle类，通过指定Width和Height可以绘制一个矩
形
Ellipse
使用Ellipse类，可以绘制一个椭圆
Path
使用Path类可以绘制一系列直线和曲线。Data属性是
Geometry类型。还可以使用派生自基类Geometry的类绘制图
形，或使用路径标记语法来定义图形
Polygon
使用Polygon类可以绘制由线段连接而成的封闭图形。多边
形由一系列赋予Points属性的Point对象定义
Polyline
类似于Polygon类，使用Polyline也可以绘制连接起来的线
段。与多边形的区别是，折线不一定是封闭图形
30.3 几何图形
前面示例显示，其中一种形状Path使用Geometry来绘图。Geometry元素也可用于其他
地方，如用于DrawingBrush。
在某些方面，Geometry元素非常类似于形状。与Line、Ellipse和Rectangle形状一样，
也有绘制这些形状的Geometry元素：LineGeometry、EllipseGeometry和
RectangleGeometry。形状与几何图形有显著的区别。Shape是一个FrameworkElement，可
以用于把UIElement用作其子元素的任意类。FrameworkElement派生自UIElement。形状会
参与系统的布局，并呈现自身。而Geometry类不呈现自身，特性和系统开销也比Shape类
少。在WPF中，Geometry类派生自Freezable基类，可以在多个线程中共享。在UWP应用
程序中，Geometry类直接派生自DependencyObject，这里不能使用Freezable。
Path类使用Geometry来绘图。几何图形可以用Path的Data属性设置。可以设置的简单
的几何图形元素有绘制椭圆的EllipseGeometry、绘制线条的LineGeometry和绘制矩形的
RectangleGeometry。
30.3.1 使用段的几何图形
也可以使用段来创建几何图形。几何图形类PathGeometry使用段来绘图。下面的代码
段使用BezierSegment和LineSegment元素绘制一个红色的图形和一个绿色的图形，如图30-
3所示。第一个BezierSegment在图形的起点（70,40）、终点（150,63）、控制点（90,37）
和（130,46）之间绘制了一条贝塞尔曲线。下面的LineSegment使用贝塞尔曲线的终点和
（120,110）绘制了一条线段（代码文件Geometry[WPF 
| 
UWP]/Main[Window 
|
Page].xaml）：
图30-3
图30-4
除了BezierSegment和LineSegment元素之外，还可以
使用ArcSegment元素在两点之间绘制椭圆弧。使用
PolyLineSegment可以绘制一组线段，PolyBezierSegment由
多条贝塞尔曲线组成，QuadraticBezierSegment创建一条二
次贝塞尔曲线，PolyQuadraticBezier-Segment由多条二次贝
塞尔曲线组成。
30.3.2 使用PML的几何图形
本章前面使用了PML和路径。而WPF在后台使用
PML，可以通过StreamGeometry进行高效的绘图。UWP应
用程序的XAML会创建图形和片段。通过编程，可以创建
线段、贝塞尔曲线和圆弧，以定义图形。通过XAML可以
使用路径标记语法。路径标记语法可以与Path类的Data属
性一起使用。特殊字符定义点的连接方式。在下面的示例
中，M标记起点，L是到指定点的线条命令，Z是闭合图形
的闭合命令。图30-4显示了这个绘图操作的结果。路径标
记语法允许使用更多的命令，如水平线（H）、垂直线
（V）、三次贝塞尔曲线（C）、二次贝塞尔曲线（Q）、光滑的三次贝塞尔曲线（S）、
光滑的二次贝塞尔曲线（T），以及椭圆弧（A）（代码文件Geometry[WPF 
|
UWP]/Main[Window | Page].xaml）：
30.3.3 合并的几何图形（WPF）
WPF用几何图形提供了另一个功能，在WPF中，使用CombinedGeometry类可以合并
多个几何图形。
CombinedGeometry有Geometry1和Geometry2属性，使用GeometryCombineMode可以
合并它们，构成Union、Intersect、Xor和Exclude。Union会合并两个几何图形，Intersect只
取两个几何图形都覆盖的区域，Xor与Intersect相反，显示一个几何图形覆盖的区域，但不
显示两个几何图形都覆盖的区域。Exclude显示第一个几何图形减去第二个几何图形的区
域。
下面的示例（代码文件GeometryWPF/MainWindow.xaml）合并了一个EllipseGeometry
和一个RectangleGeometry，生成并集，如图30-5所示。
图30-5
图30-5显示了这个XAML代码的不同变体，从左到右分别是Union、Xor、Intersect、
和Exclude。
30.4 变换
因为XAML基于矢量，所以可以重置每个元素的大小。在下面的例子中，基于矢量的
图形现在可以缩放、旋转和倾斜。不需要手工计算位置，就可以进行单击测试（如移动鼠
标和鼠标单击）。
图30-6显示了一个矩形的几个不同形式。所有的矩形都定位在一个水平方向的
StackPanel元素中，以并排放置矩形。第1个矩形有其原始大小和布局。第2个矩形重置了
大小，第3个矩形移动了，第4个矩形旋转了，第5个矩形倾斜了，第6个矩形使用变换组进
行变换，第7个矩形使用矩阵进行变换。下面各节讲述所有这些选项的代码示例。
图30-6
30.4.1 缩放
给Rectangle元素的RenderTransform属性添加ScaleTransform元素，如下所示，把整个
画布的内容在X方向上放大0.5倍，在Y方向上放大0.4倍（代码文件
Transformation[WPF|UWP]/Main [Window|Page]. xaml）。
除了变换像矩形这样简单的形状之外，还可以变换任何XAML元素，因为XAML定义
了矢量图形。在以下代码中，前面所示的脸部Canvas元素放在一个用户控件SmilingFace
中，这个用户控件先显示没有转换的状态，再显示调整大小后的状态。结果如图30-7所
示。
图30-7
30.4.2 平移
在X或Y方向上移动一个元素时，可以使用TranslateTransform。在以下代码片段中，
给X指定-90，元素向左移动，给Y指定20，元素向底部移动（代码文件
Transformation[WPF|UWP]/Main [Window|Page].xaml）：
30.4.3 旋转
使用RotateTransform元素，可以旋转元素。对于RotateTransform，设置旋转的角度，
用CenterX和CenterY设置旋转中心（代码文件Transformation[WPF | UWP]/ Main[Window |
Page].xaml）：
30.4.4 倾斜
对于倾斜，可以使用SkewTransform元素。此时可以指定X和Y方向的倾斜角度（代码
文件Transformation[WPF | UWP]/ Main[Window | Page].xaml）：
30.4.5 组合变换和复合变换
同时执行多种变换的简单方式是使用CompositeTransform（用于UWP应用程序）和
TransformationGroup元素。TransformationGroup可以包含SkewTransform、
RotateTransform、Translate-Transform和ScaleTransform作为其子元素（代码文件
Transformation[WPF | UWP]/Main[Window |Page]. xaml）：
为了同时执行旋转和倾斜操作，可以定义一个TransformGroup，它同时包含
RotateTransform和SkewTransform。类CompositeTransform定义多个属性，用于一次进行多
个变换。例如，ScaleX和ScaleY进行缩放，TranslateX和TranslateY移动元素。也可以定义
一个MatrixTransform，其中Matrix元素指定了用于拉伸的M11和M22属性，以及用于倾斜
的M12和M21属性，见下一节。
30.4.6 使用矩阵的变换
同时执行多种变换的另一个选择是指定一个矩阵。这里使用
MatrixTransform.MatrixTransform定义了Matrix属性有6个值。设置值1,0,0,1,0,0不改变元
素。值0.5,1.4,0.4,0.5, 
-200,0会重置元素的大小、倾斜和平移元素（代码文件
Transformation[WPF | UWP]/Main[Window | Page].xaml）：
Matrix类型是一个结构，因此在UWP应用程序的XAML代码中不能实例化。然而，前
面的示例将所有矩阵的值放入一个字符串并转换它。使用WPF，可以在XAML代码中实例
化结构，因此可以按名称给Matrix属性赋值，定义相同的值。属性M11和M12是用于缩
放，M12和M21用于倾斜，OffsetX和OffsetY用于平移。
直接将字符串的值分配给MatrixTransform类的Matrix属性时，其顺序是M11 —M12 —
M21— M22 —OffsetX — OffsetY。
30.4.7 变换布局
变换示例使用了RenderTransform。WPF还支持LayoutTransform。对于
RenderTransform，在布局阶段完成后进行变换，所以在变换后，元素就不需要不同的大
小。对于LayoutTransform，在布局阶段之前进行变换——这最好用一个示例来说明。在
接下来的代码片段中，在StackPanel中定义两个矩形，它们有相同的高度和宽度，但第一
个矩形使用RenderTransform把其大小调整为原来的1.5倍。如图30-8所示，矩形相互叠
加。布局阶段是在变换之前完成，因此第一个矩形没有足够的空间，只能移到显示区域的
外部（代码文件TransformationWPF/MainWindow.xaml）：
图30-8
使用相同的矩形和ScaleTransformation，现在再加上LayoutTransform（WPF支持
它），就可以看到在图30-9中有更多的空间。布局阶段在变换后完成。
图30-9
 注意： 
除了LayoutTransform之外，还有一个RenderTransform。
LayoutTransform在布局阶段之前发生，RenderTransform在布局阶段之后发生。
30.5 画笔
本节演示了如何使用XAML的画笔绘制背景和前景。使用画笔时，WPF提供的内容比
UWP应用程序多得多。因此，本节首先介绍两种技术所提供的画笔，然后讨论特定
XAML技术可用的画笔。
本节的第一个例子参考图30-10，显示在Button元素的Background属性中使用各种画笔
的效果。
图30-10
30.5.1 SolidColorBrush