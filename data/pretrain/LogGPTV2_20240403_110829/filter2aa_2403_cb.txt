R3, [R2,R3] 
.text:C0169F88    
MOV  
R2, R8 
.text:C0169F8C    
CMP  
R3, #0 
.text:C0169F90    
ORRNE  
R1, R1, #3 
.text:C0169F94    
STRNE  
R1, [R4,#0x24] 
.text:C0169F98    
ANDS  
R3, R6, #0x200000 
.text:C0169F9C    
MOV  
R1, R12 
.text:C0169FA0    
LDRNE  
R3, [R4,#0x24] 
.text:C0169FA4    
ANDNE  
R3, R3, #1 
.text:C0169FA8    
EORNE  
R3, R3, #1 
.text:C0169FAC    
STR  
R3, [R11,#var_54] 
.text:C0169FB0    
SUB  
R3, R11, #-var_38 
.text:C0169FB4    
BL 
lookup_fast 
... 
.text:C016A128 loc_C016A128 
; CODE XREF: do_last.isra.14+DC 
.text:C016A128    
MOV    
R0, R4 
.text:C016A12C    
BL 
complete_walk 
... 
TST 指令的功能与 x86 平台的 TEST 指令相同。 
显而易见，程序在某一条件下会调用 lookup_fast()函数，而在另一条件下会调用 complete_walk()函数。
异步社区会员 dearfuture(15918834820) 专享 尊重版权
274 
逆向工程权威指南（上册） 
这种行为符合 do_last()函数的源代码。 
这里的汇编宏 O_CREAT 也等于 0x40。 
19.2 设置/清除特定位 
本节将会围绕下面这个程序进行讨论： 
#include  
#define IS_SET(flag, bit)  
((flag) & (bit)) 
#define SET_BIT(var, bit)  
((var) |= (bit)) 
#define REMOVE_BIT(var, bit) 
((var) &= ~(bit)) 
int f(int a)  
{ 
    int rt=a; 
    SET_BIT (rt, 0x4000); 
    REMOVE_BIT (rt, 0x200); 
    return rt;  
}; 
int main()  
{ 
    f(0x12340678); 
}; 
19.2.1 x86 
Non-optimizing MSVC 
经过 MSVC 2010（未启用任何优化选项）编译上述程序，可得到如下所示的指令。 
指令清单 19.10  MSVC 2010 
_rt$ = -4  
; size = 4 
_a$ = 8 
; size = 4 
_f  PROC 
    push    ebp 
    mov     ebp, esp 
    push    ecx 
    mov 
eax, DWORD PTR _a$[ebp] 
    mov 
DWORD PTR _rt$[ebp], eax 
    mov 
ecx, DWORD PTR _rt$[ebp] 
    or 
ecx, 16384                ; 00004000H 
    mov 
DWORD PTR _rt$[ebp], ecx 
    mov 
edx, DWORD PTR _rt$[ebp] 
    and 
edx, -513                ; fffffdffH 
    mov 
DWORD PTR _rt$[ebp], edx 
    mov 
eax, DWORD PTR _rt$[ebp] 
    mov 
esp, ebp 
    pop     ebp 
    ret     0 
_f  ENDP 
OR 指令就是逐位进行或运算的指令，可用来将指定位置 1。 
AND 指令的作用是重置 bit 位。效果上说，如果立即数的某个 bit 位为 1，AND 指令则会保留寄存器
里的这个 bit 位；如果立即数的某个 bit 位为 0，AND 指令就会把寄存器里这个 bit 的值设置为 0。按照 bit
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
275 
位掩码（bitmask）的方式理解，就会非常容易地记住这些指令的作用。 
OllyDbg  
用 OllyDbg 打开这个程序，可以清楚地看到常量的各个位： 
0x200 的二进制数是 00000000000000000001000000000，第 10 位是 1。 
0x200 的逻辑非运算结果是 0xFFFFFDFF(11111111111111111110111111111)。 
0x4000 的第 15 位是 1。 
如图 19.1 所示，输入变量为 0x12340678 (10010001101000000011001111000)。 
图 19.1  OllyDbg：ECX 寄存器载入输入变量 
执行 OR 指令的情形如图 19.2 所示。 
图 19.2  OllyDbg：执行 OR 指令 
在执行 OR 指令的时候，第 15 位被设为 1。 
因为没有进行优化编译，所以程序中有些无用指令。如图 19.3 所示，它又加载了一次这个值。 
图 19.3  OllyDbg：EDX 寄存器再次加载运算结果 
然后进行了 AND 与操作，如图 19.4 所示。 
这时寄存器的第 10 位被清零。换句话说，第 10 位之外的所有位都被保留了。最终运算结果是
0x12344478，即二进制的 10010001101000100010001111000。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
276 
逆向工程权威指南（上册） 
图 19.4  OllyDbg：执行与操作 
Optimizing MSVC 
如果开启了 MSVC 的优化选项/Ox，生成的代码就会精简很多。 
指令清单 19.11  Optimizing MSVC 
_a$ = 8 
; size = 4 
_f     PROC 
    mov    eax, DWORD PTR _a$[esp-4] 
    and    eax, -513         ; fffffdffH 
    or     eax, 16384        ; 00004000H 
    ret    0  
_f     ENDP 
Non-optimizing GCC 
如果关闭 GCC 4.4.1 的优化选项，则会生成下列代码。 
指令清单 19.12  Non-optimizing GCC 
public f 
f            proc near 
var_4        = dword ptr -4 
arg_0        = dword ptr  8 
push     ebp 
mov      ebp, esp 
sub      esp, 10h 
mov      eax, [ebp+arg_0] 
mov      [ebp+var_4], eax 
or       [ebp+var_4], 4000h 
and      [ebp+var_4], 0FFFFFDFFh 
mov      eax, [ebp+var_4] 
leave 
retn 
f             endp 
虽然 GCC 的非优化编译结果中存在冗余指令，但是这个程序仍然比 MSVC 的非优化编译程序要短。 
接下来启用 GCC 的-O3 选项进行优化编译。 
Optimizing GCC 
指令清单 19.13  Optimizing GCC 
public f 
f            proc near 
arg_0      = dword ptr  8 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
277 
push     ebp 
mov      ebp, esp 
mov      eax, [ebp+arg_0] 
pop      ebp 
or       ah, 40h 
and      ah, 0FDh 
retn 
f  
endp 
它比 MSVC 优化编译生成的程序还要短。值得注意的是，它直接使用了 EAX 寄存器的部分空间——EAX
寄存器的第 8 到第 15 位（第 1 个字节），即 AH 寄存器。 
7th
（字节数） 
6th 
5th 
4th 
3rd 
2nd 
1st 
0th 
RAXx64 
EAX 
AX 
AH 
AL 
在早期的 16 位 8086 CPU 里，AX 寄存器分为 2 个 8 位寄存器——即 AL/AH 寄存器。而 80386 差不多
把所有的寄存器都扩展为 32 位，形成了 EAX 寄存器。但是出于兼容性的考虑，后续的 CPU 保留了
AX/AH/AL 寄存器的命名空间。 
世上先有的 16 位 8086 CPU，后有的 32 位 x86 CPU。在早期 16 位 CPU 上运行短程序，其 opcode 比
在 32 位 CPU 上运行的 opcode 要短。所以，操作 AH 寄存器的“or ah，40h”的指令只占用了 3 字节的 opcode。
虽然说似乎“or eax,04000h”这样的指令更合乎情理，但是那样就会占用 5 字节的 opcode；如果第一个操
作符不是 EAX 寄存器，同等的指令甚至会使用 6 字节的 opcode。 
Optimizing GCC and regparm 
如果同时启用优化选项“-O3”和寄存器分配选项“regparm＝3”，生成的指令会更为简短。 
指令清单 19.14  Optimizing GCC 
public f 
f           proc near 
push     ebp 
or       ah, 40h 
mov      ebp, esp 
and      ah, 0FDh 
pop      ebp 
retn  
f  
endp 
第一个参数原本就在 EAX 寄存器里（fastcall 规范），所以可直接使用 EAX 寄存器。函数引言的“push 
ebp / mov ebp,esp”指令，以及函数尾声的“pop ebp”完全可以省略；但是 GCC 还做不到这种程度的智能
优化。这种代码完全可以作为内嵌函数（参见第 43 章）来使用。 
19.2.2 ARM + Optimizing Keil 6/2013 (ARM mode) 
指令清单 19.15  Optimizing Keil 6/2013 (ARM mode) 
02 0C C0 E3  
BIC     R0, R0, #0x200 
01 09 80 E3  
ORR     R0, R0, #0x4000 
1E FF 2F E1  
BX      LR 
BIC 是逐位清除的“（反码）逻辑与”指令，它将第一个操作数与第二个操作数的反码（非求非运算的
结果，进行逻辑与运算，比）x86 指令集里“逻辑与”指令多作了一次求非运算，ORR 是“逻辑或指令”，
与 x86“逻辑或”的作用相同。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
278 
逆向工程权威指南（上册） 
19.2.3 ARM + Optimizing Keil 6/2013 (Thumb mode) 
指令清单 19.16  Optimizing Keil 6/2013 (Thumb mode) 
01 21 89 03  
MOVS     
R1, 0x4000 
08 43ORRS     
R0,   
R1 
49 11ASRS     
R1,   
R1, #5   ; generate 0x200 and place to R1 
88 43          
BICS     
R0, R1 
70 47          
BX       
LR 
编译器借助了算术右移指令，由 0x4000>>5 生成 0x200。与直接对寄存器进行立即数赋值（0x200）相
比，这种算术指令的 opcode 比较短。 
所以，后面的 ASRS（算术右移）指令通过计算 0x4000>>5 得到 0x200。 
19.2.4 ARM + Optimizing Xcode (LLVM) + ARM mode 
指令清单 19.17  Optimizing Xcode 4.6.3 (LLVM) (ARM mode) 
42 0C C0 E3  
BIC             R0, R0, #0x4200 
01 09 80 E3  
ORR             R0, R0, #0x4000 
1E FF 2F E1  
BX              LR 
这段代码由 LLVM 编译而得。其源代码大体应该是： 
REMOVE_BIT (rt, 0x4200); 
SET_BIT (rt, 0x4000); 
它确实足以完成所需功能。但是哪里来的 0x4200? 或许，LLVM 优化功能对原有指令进行了再加工，
或许这是负负得正。总之这段代码没有质量问题。 
有时候编译器确实会做这种类型的代码处理，详细情况请参见第 91 章。 
使用 Xcode 4.6.3 进行优化编译而生成的代码也非常相似，本文不再介绍。 
19.2.5 ARM：BIC 指令详解 
把本章开头的源代码略加修改： 
int f(int a)  
{ 
    int rt=a; 
    REMOVE_BIT (rt, 0x1234); 
    return rt;  
}; 
用Keil 5.03 进行优化编译
①
19.2.6 ARM64: Optimizing GCC(Linaro) 4.9 
，可得ARM模式的指令如下： 
f PROC 
  BIC      r0,r0,#0x1000 
  BIC      r0,r0,#0x234 
  BX       lr 
  ENDP 
上述程序使用了两条 BIC 指令，即它需要通过两次处理才能清除 0x1234 对应的比特位。这是因为立
即数 0x1234 无法和 BIC 指令封装在同一条指令里。所以编译器进行了等效处理，通过两条指令实现清空
0x1000 和 0x234 相应的比特位。 
面向 ARM64 的 GCC 编译器，可直接使用 AND 指令、而不用 BIC 指令。 
① 确切地说，使用的编译器是 LLVM build 2410.2.00 bundled with Apple Xcode 4.6.3。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
279 
指令清单 19.18  Optimizing GCC (Linaro) 4.9 
f: 
  add w0, w0, -513 
; 0xFFFFFFFFFFFFFDFF 
  orr w0, w0, 16384 
; 0x4000 
  ret 
19.2.7 ARM64: Non-optimizing GCC (Linaro) 4.9 
关闭优化选项之后，GCC 生成的代码中会加载无用指令，但是功能相同。 
指令清单 19.19  Non-optimizing GCC (Linaro) 4.9 
f: 
  sub     sp, sp, #32 
  str     w0, [sp,12] 
  ldr     w0, [sp,12] 
  str     w0, [sp,28] 
  ldr     w0, [sp,28] 
  orr     w0, w0, 16384 
; 0x4000 
  str     w0, [sp,28] 
  ldr     w0, [sp,28] 
  and     w0, w0, -513 
; 0xFFFFFFFFFFFFFDFF 
  str     w0, [sp,28] 