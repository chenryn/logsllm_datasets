```java
LinkedHashSet linkedHashSet = new LinkedHashSet<>(List.of(1, 2, 3));
Integer firstElement = linkedHashSet.getFirst();   // 1
Integer lastElement = linkedHashSet.getLast();    // 3
linkedHashSet.addFirst(0);  //List contains: [0, 1, 2, 3]
linkedHashSet.addLast(4);   //List contains: [0, 1, 2, 3, 4]
System.out.println(linkedHashSet.reversed());   //Prints [5, 3, 2, 1, 0]
```
`SequencedMap` 接口继承了 `Map`接口， 提供了在集合两端访问、添加或删除键值对、获取包含 key 的 `SequencedSet`、包含 value 的 `SequencedCollection`、包含 entry（键值对） 的 `SequencedSet`以及获取集合的反向视图的方法。
```java
interface SequencedMap extends Map {
  // New Methods
  SequencedMap reversed();
  SequencedSet sequencedKeySet();
  SequencedCollection sequencedValues();
  SequencedSet> sequencedEntrySet();
  V putFirst(K, V);
  V putLast(K, V);
  // Promoted Methods from NavigableMap
  Entry firstEntry();
  Entry lastEntry();
  Entry pollFirstEntry();
  Entry pollLastEntry();
}
```
`SortedMap` 和`LinkedHashMap` 实现了`SequencedMap` 接口。
这里以 `LinkedHashMap` 为例，演示一下实际使用效果：
```java
LinkedHashMap map = new LinkedHashMap<>();
map.put(1, "One");
map.put(2, "Two");
map.put(3, "Three");
map.firstEntry();   //1=One
map.lastEntry();    //3=Three
System.out.println(map);  //{1=One, 2=Two, 3=Three}
Map.Entry first = map.pollFirstEntry();   //1=One
Map.Entry last = map.pollLastEntry();    //3=Three
System.out.println(map);  //{2=Two}
map.putFirst(1, "One");     //{1=One, 2=Two}
map.putLast(3, "Three");    //{1=One, 2=Two, 3=Three}
System.out.println(map);  //{1=One, 2=Two, 3=Three}
System.out.println(map.reversed());   //{3=Three, 2=Two, 1=One}
```
## JEP 439：分代 ZGC
JDK21 中对 ZGC 进行了功能扩展，增加了分代 GC 功能。不过，默认是关闭的，需要通过配置打开：
```bash
// 启用分代ZGC
java -XX:+UseZGC -XX:+ZGenerational ...
```
在未来的版本中，官方会把 ZGenerational 设为默认值，即默认打开 ZGC 的分代 GC。在更晚的版本中，非分代 ZGC 就被移除。
> In a future release we intend to make Generational ZGC the default, at which point -XX:-ZGenerational will select non-generational ZGC. In an even later release we intend to remove non-generational ZGC, at which point the ZGenerational option will become obsolete.
>
> 在将来的版本中，我们打算将 Generational ZGC 作为默认选项，此时-XX:-ZGenerational 将选择非分代 ZGC。在更晚的版本中，我们打算移除非分代 ZGC，此时 ZGenerational 选项将变得过时。
分代 ZGC 可以显著减少垃圾回收过程中的停顿时间，并提高应用程序的响应性能。这对于大型 Java 应用程序和高并发场景下的性能优化非常有价值。
## JEP 440：记录模式
记录模式在 Java 19 进行了第一次预览， 由 [JEP 405](https://openjdk.org/jeps/405) 提出。JDK 20 中是第二次预览，由 [JEP 432](https://openjdk.org/jeps/432) 提出。最终，记录模式在 JDK21 顺利转正。
[Java 20 新特性概览](./java20.md)已经详细介绍过记录模式，这里就不重复了。
## JEP 441：switch 的模式匹配
增强 Java 中的 switch 表达式和语句，允许在 case 标签中使用模式。当模式匹配时，执行 case 标签对应的代码。
在下面的代码中，switch 表达式使用了类型模式来进行匹配。
```java
static String formatterPatternSwitch(Object obj) {
    return switch (obj) {
        case Integer i -> String.format("int %d", i);
        case Long l    -> String.format("long %d", l);
        case Double d  -> String.format("double %f", d);
        case String s  -> String.format("String %s", s);
        default        -> obj.toString();
    };
}
```
## JEP 442: 外部函数和内存 API（第三次预览）
Java 程序可以通过该 API 与 Java 运行时之外的代码和数据进行互操作。通过高效地调用外部函数（即 JVM 之外的代码）和安全地访问外部内存（即不受 JVM 管理的内存），该 API 使 Java 程序能够调用本机库并处理本机数据，而不会像 JNI 那样危险和脆弱。
外部函数和内存 API 在 Java 17 中进行了第一轮孵化，由 [JEP 412](https://openjdk.java.net/jeps/412) 提出。Java 18 中进行了第二次孵化，由[JEP 419](https://openjdk.org/jeps/419) 提出。Java 19 中是第一次预览，由 [JEP 424](https://openjdk.org/jeps/424) 提出。JDK 20 中是第二次预览，由 [JEP 434](https://openjdk.org/jeps/434) 提出。JDK 21 中是第三次预览，由 [JEP 442](https://openjdk.org/jeps/442) 提出。
在 [Java 19 新特性概览](./java19.md) 中，我有详细介绍到外部函数和内存 API，这里就不再做额外的介绍了。
## JEP 443：未命名模式和变量（预览）
未命名模式和变量使得我们可以使用下划线 `_` 表示未命名的变量以及模式匹配时不使用的组件，旨在提高代码的可读性和可维护性。
未命名变量的典型场景是 `try-with-resources` 语句、 `catch` 子句中的异常变量和`for`循环。当变量不需要使用的时候就可以使用下划线 `_`代替，这样清晰标识未被使用的变量。
```java
try (var _ = ScopedContext.acquire()) {
  // No use of acquired resource
}
try { ... }
catch (Exception _) { ... }
catch (Throwable _) { ... }
for (int i = 0, _ = runOnce(); i  processBox(b);
    case Box(GreenBall _)                -> stopProcessing();
    case Box(_)                          -> pickAnotherBox();
}
```
## JEP 444：虚拟线程
虚拟线程是一项重量级的更新，一定一定要重视！
虚拟线程在 Java 19 中进行了第一次预览，由[JEP 425](https://openjdk.org/jeps/425)提出。JDK 20 中是第二次预览。最终，虚拟线程在 JDK21 顺利转正。
[Java 20 新特性概览](./java20.md)已经详细介绍过虚拟线程，这里就不重复了。
## JEP 445：未命名类和实例 main 方法 （预览）
这个特性主要简化了 `main` 方法的的声明。对于 Java 初学者来说，这个 `main` 方法的声明引入了太多的 Java 语法概念，不利于初学者快速上手。
没有使用该特性之前定义一个 `main` 方法：
```java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
使用该新特性之后定义一个 `main` 方法：
```java
class HelloWorld {
    void main() {
        System.out.println("Hello, World!");
    }
}
```
进一步精简(未命名的类允许我们不定义类名)：
```java
void main() {
   System.out.println("Hello, World!");
}
```
## 参考
- Java 21 String Templates：
- Java 21 Sequenced Collections：