following results are presented as obtained by setting the
parameters as chosen in the previous section.
It is usually suggested that the preference based approach
should normalize the functions before combining them into
a single function. However, we did not see any change in
the solutions of the normalized version of Problem 1. Fig.
5 shows the solutions obtained from various runs of SGA in
Problem 1 with varying α. A decision maker, in general, may
want to assign equal weights to both the objective functions,
i.e. set α = 0.5.
It is clear from the ﬁgure that such as
assignment do not necessarily provide the desired balance
between the residual damage and the total security control
cost. Furthermore, such balance is also not obtainable by
assigning weight values in the neighborhood of 0.5. The
solutions obtained are quite sensitive to the weights, and in
this case, much higher preference must be given to the total
security control cost to ﬁnd other possible solutions. Since
the weights do not always inﬂuence the objectives in the
desired manner, understanding their eﬀect is not a trivial
task for a decision maker. It is also not possible to always
do an exhaustive analysis of the aﬀect of the weights on the
objectives. Given such situations, the decision maker should
consider obtaining a global picture of the trade-oﬀs possible.
With such a requirement in mind, we next consider Problem
2.
Figure 5: SGA solutions to Problem 1 with α varied
from 0 to 1 in steps of 0.05.
The two solutions corresponding to α = 0.25 and 0.1 in
Fig. 5, including any other solutions in the vicinity, are likely
candidates for a decision maker’s choice. Unlike the single-
objective approach, where determining such vicinal solutions
could be diﬃcult, the multi-objective optimization approach
clearly revealed the existence of at least one such solution.
Fig. 6 shows the solutions obtained from a single run of
NSGA-II on Problem 2. NSGA-II reported all the solutions
obtained from multiple runs of SGA, as well as three more
solutions. Interestingly, there exists no solution in the inter-
mediate range of [25, 45] for residual damage. This inclina-
tion of solutions towards the extremities of the residual dam-
age could be indicative of the non-existence of much variety
in the security controls under consideration. The number of
attack scenarios possible is also a deciding factor. Most of
the security controls for the example network involve either
the disabling or patching of a service, resulting in a sparse
coverage matrix. For a more “continuous” Pareto-front, it
is required to have security controls of comparative costs
and capable of covering multiple services. A larger, more
complex real-world problem would likely have more attack
scenarios and a good mixture of both local and global se-
curity controls, in which case, such gaps in the Pareto-front
will be unlikely.
Once the decision maker has a better perspective of the
solutions possible, further analysis of the solutions may be
carried out in terms of their sensitivity to security control
failures. Such sensitivity analysis is helpful in not only re-
ducing valuable decision making time, but also to guarantee
some level of fault tolerance in the network. Fig. 6 shows the
sensitivity of one of the solutions to a failure in one of the
security controls corresponding to the solution. This solu-
tion, with security controls SC4 and SC11, will incur a high
residual damage in the event of a failure of SC4. Thus, a de-
cision maker may choose to perform a sensitivity analysis on
each of the solutions and incorporate the results thereof in
making the ﬁnal choice. However, the decision maker then
has no control on how much of additional residual damage
Figure 6: NSGA-II solutions to Problem 2 and sen-
sitivity of a solution to optimum settings.
Figure 7: NSGA-II solutions to Problem 3 with D =
0 and r = 1. Problem 2 solutions are also shown for
comparison.
would be incurred in the event of failure. Problem 3 serves
the requirements of this decision stage by allowing the deci-
sion maker to specify the maximum allowed perturbation in
the residual damage. It is also possible to specify the scope
of failure – the radius r – within which the decision maker is
interested in analyzing the robustness of the solutions. For
this study, we are mostly interested in obtaining solutions
that are fully robust, meaning the residual damage should
not increase, and hence set D to zero. Also, because of the
sparse nature of the coverage matrix, we set the perturba-
tion radius r to 1. Fig. 7 shows the solutions obtained for
this problem.
obtained by collapsing all subtrees to a single node until
a node covered by a security control from R3 contributes
to the calculation of the residual damage. All such nodes,
represented by rectangles in the ﬁgure, is labeled with the
maximum residual damage that can propagate to it from
the child subtree and (+) the damage value that can occur
at the node itself. A triangular node represents the security
controls that can disable that node. The individual damage
value is accrued to the residual damage from the child node
only if the attached security control, if any, fails.
Robust-optimum security controls
R1 SC9, SC11, SC13, SC15, SC16, SC19
SC3, SC4, SC9, SC11, SC18, SC19
R2
R3
R4
R5
R6
SC3, SC4, SC7, SC11
SC3, SC4
SC7, SC11
null
RD SCC
26.0
0.0
10.5
21.0
12.0
13.5
8.0
22.8
4.0
49.5
58.8
0.0
Table 4: Fully robust solutions obtained by NSGA-
II with r = 1.
The solutions to Problem 3 reveals that none of the op-
timum solutions, except the trivial zero SCC solution, pre-
viously obtained is fully robust, even for a single security
control failure. Such insight could be of much value for a
decision maker when making a ﬁnal choice. Table 4 shows
the security controls corresponding to the robust solutions.
With the ﬁnal goal of obtaining a solution with a good bal-
ance between the residual damage and the total security
control cost, the decision maker’s choice at this point can be
justiﬁably biased towards the selection of solution R3.
We present certain interesting properties exploited by so-
lution R3 from the attack tree. To point out the salient
features, we compress the attack tree for our example net-
work model as shown in Fig. 8. The compressed tree is
Figure 8: Compressed attack tree showing residual
damage computation with R3 as security control set.
The solution R3 clearly identiﬁes the existence of the sub-
trees ST1 = {{n7, n10},{n8, n11},{n9, n12}} and ST2 = {{
n3, n7, n10},{n6, n9, n12}}. In the event of a failure of SC11,
n7 would collect a value of 10.8. Since n3 has an AN D de-
composition with SC7, it will be disabled, thereby not con-
tributing its individual damage value of 12 to the residual
damage at that node (10.8). On the other hand, if SC7 fails,
SC11 will disable n7 which in turn will disable n3. In fact,
in this case the residual damage at n3 would be zero. Simi-
larly, n6 and n8 also never propagates a residual damage of
more than 10.8 to its parent node. Consequently, n2 never
propagates a value more than 13.5. The individual cost of
36 at n1 is never added to this residual damage value of 13.5
from n2 since, owing to the AN D decomposition, n1 is al-
ways falsiﬁed by security controls SC3 and SC4, only one
of which is assumed to fail at a time. The solution wisely
applies security controls covering multiple attack scenarios,
and at multiple points in those scenarios to keep the damage
to a minimum.
9. CONCLUSION AND FUTURE WORK
In this paper, we addressed the system administrator’s
dilemma, namely, how to select, when needed, a subset of
security hardening measures from a given set so that the
total cost of implementing these measures is not only mini-
mized but also within budget and, at the same time, the cost
of residual damage is also minimized. One important con-
tribution of our approach is the use of an attack tree model
of the network to drive the solution. By using an attack tree
in the problem we were able to better guide the optimiza-
tion process by providing the knowledge about the attributes
that make an attack possible. Further, a systematic analysis
enabled us to approach the problem in a modular fashion,
providing added information to a decision maker to form a
concrete opinion about the quality of the diﬀerent trade-oﬀ
solutions possible.
The cost model that we adopt in this paper is somewhat
simplistic. We assume that, from a cost of implementation
perspective, the security measures are independent of each
other when in real life they may not be so. In addition, we
have assumed that the system administrator’s decision is in
no way inﬂuenced by an understanding of the cost to break
the system. Furthermore, the possible decomposition of an
attack tree to divide the problem into sub-problems is an in-
teresting alternative to explore. Finally, there is a dynamic
aspect to the system administrator’s dilemma. During run
time the system administrator may need to revise her de-
cision based on emerging security conditions. In future we
plan to reﬁne our model to incorporate these scenarios.
10. ACKNOWLEDGMENTS
This work was partially supported by the U.S. Air Force
Oﬃce of Scientiﬁc Research under contract FA9550-07-1-
0042. The views and conclusions contained in this document
are those of the authors and should not be interpreted as
representing oﬃcial policies, either expressed or implied, of
the U.S. Air Force or other federal government agencies.
11. REFERENCES
[1] Ammann, P., Wijesekera, D., and Kaushik, S.
Scalable, Graph-Based Network Vulnerability
Analysis. In Proceedings of the Ninth Conference on
Computer and Communications Security
(Washington, DC, USA, 2002), pp. 217–224.
[2] Berger, B. Data-centric Quantitative Computer
Security Risk Assessment. Information Security
Reading Room, SANS (2003).
[3] Butler, S. Security Attribute Evaluation Method: A
Cost-beneﬁt Approach. In ICSE 2002: Proceedings of
the 24rd International Conference on Software
Engineering (Orlando, FL, USA, 2002), pp. 232–240.
[4] Butler, S., and Fischbeck, P. Multi-attribute Risk
Assessment. In Proceedings of SREIS02 in conjunction
of 10th IEEE International Requirements Engineering
Conference (Raleigh, NC, USA, 2002).
[5] Coello, C. A. C. An Updated Survey of GA-based
Multiobjective Optimization Techniques. ACM
Computing Surveys 32, 2 (2000), 109–143.
[6] Dawkins, J., Campbell, C., and Hale, J. Modeling
Network Attacks: Extending the Attack Tree
Paradigm. In Proceedings of the Workshop on
Statistical Machine Learning Techniques in Computer
Intrusion Detection (Baltimore, MD, USA, 2002),
Johns Hopkins University.
[7] Deb, K. Multi-objective Optimization Using
Evolutionary Algorithms. John Wiley & Sons Inc.,
2001.
[8] Deb, K., Pratap, A., Agarwal, S., and
Meyarivan, T. A Fast and Elitist Multiobjective
Genetic Algorithm: NSGA–II. IEEE Transactions on
Evolutionary Computation 6, 2 (2002), 182–197.
[9] Goldberg, D. E. Genetic Algorithms in Search,
Optimization, and Machine Learning. Addison-Wesley,
1989.
[10] Gupta, M., Rees, J., Chaturvedi, A., and Chi, J.
Matching Information Security Vulnerabilities to
Organizational Security Policies: A Genetic Algorithm
Approach. Decision Support Systems 41, 3 (2006),
592–603.
[11] Jha, S., Sheyner, O., and Wing, J. M. Two Formal
Analysis of Attack Graphs. In Proceedings of the 15th
IEEE Computer Security Foundations Workshop
(Cape Breton, Nova Scotia, Canada, 2002), pp. 49–63.
[12] Lee, W. Toward Cost-sensitive Modeling for Intrusion
Detection and Response. Journal of Computer
Security 10, 1 (2002), 5–22.
[13] Moore, A., Ellison, R., and Linger, R. Attack
Modeling for Information Survivability. Technical Note
CMU/SEI-2001-TN-001, Carnegie Melon University /
Software Engineering Institute, March 2001.
[14] Noel, S., Jajodia, S., O’Berry, B., and Jacobs,
M. Eﬃcient Minimum-cost Network Hardening via
Exploit Dependency Graphs. In Proceedings of the
19th Annual Computer Security Applications
Conference (Las Vegas, NV, USA, 2003), pp. 86–95.
[15] Phillips, C., and Swiler, L. A Graph-Based
System for Network-Vulnerability Analysis. In
Proceedings of the 1998 New Security Paradigms
Workshop (Chicago, IL, USA, 1998), pp. 71–79.
[16] Ray, I., and Poolsappasit, N. Using Attack Trees
to Identify Malicious Attacks from Authorized
Insiders. In ESORICS 2005 (Milan, Italy, 2005),
pp. 231–246.
[17] Schneier, B. Attack Trees. Dr. Dobb’s Journal
(1999).
[18] Sheyner, O., Haines, J., Jha, S., Lippmann, R.,
and Wing, J. M. Automated Generation and
Analysis of Attack Graphs. In SP 2002: Proceedings of
the IEEE Symposium on Security and Privacy
(Oakland, CA, USA, 2002), pp. 273–284.
[19] Stoneburner, G., Goguen, A., and Feringa, A.
Risk Management Guide for Information Technology
Systems. NIST Special Publication 800–30 (2002).
[20] Swiler, L., Phillips, C., Ellis, D., and
Chakerian, S. Computer-Attack Graph Generation
Tool. In Proceedings of the DARPA Information
Survivability Conference and Exposition II (Anaheim,
CA, USA, 2001), pp. 307–321.