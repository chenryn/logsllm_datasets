代码生成的类需要把自动实现的属性改为完全属性，并添加一个字段作为类的成员，
用于属性的实现。为此，方法ImplementFullProperty（）首先检索创建字段和属性所需的
信息：通过访问属性中要发生变化的祖先元素来检索类型声明，通过语义模型检索属性的
类型符号。把属性名的第一个字母改为小写，在它前面加上下划线，就创建了支持字段的
名称。之后，通过调用ReplaceNodes方法，用新版本替换节点propertyDecl和typeDecl。
ReplaceNodes方法参见“代码转换”一节。
这是ReplaceNodes（）方法的一个有趣用法：替换不同类型的节点。在这里，
PropertyDeclaration-Syntax和TypeDeclarationSyntax节点需要替换。
PropertyDeclarationSyntax节点代表用完全属性语法更新的属性。TypeDeclarationSyntax节
点需要更新，以添加可变的字段。由ReplaceNodes调用的方法（由委托参数定义）接收原
始节点和更新的节点，有很大的帮助。记住，用于.NET编译器平台的树是不可变的。第
一个调用的方法改变一个节点，第二个方法调用需要提取第一个方法的更新，创建自己的
结果。通过调用方法ExpandProperty（）和ExpandType（），给属性和类型节点做出必要
的改变（代码文件PropertyCodeRefactoring / CodeGeneration.cs）:
    internal static class CodeGeneration
    {
      internal static CompilationUnitSyntax ImplementFullProperty
        CompilationUnitSyntax root,
        SemanticModel model,
        PropertyDeclarationSyntax propertyDecl,
        Workspace workspace)
      {
        TypeDeclarationSyntax typeDecl =
        propertyDecl.FirstAncestorOrSelf();
        string propertyName = propertyDecl.Identifier.ValueText;
        string backingFieldName =
        $"_{char.ToLower(propertyName[0])}{propertyName.Substring(1)}";
        ITypeSymbol propertyTypeSymbol =
        model.GetDeclaredSymbol(propertyDecl).Type;
        root = root.ReplaceNodes(
        new SyntaxNode[] { propertyDecl, typeDecl },
        (original, updated) =>
          original.IsKind(SyntaxKind.PropertyDeclaration)
          ? ExpandProperty((PropertyDeclarationSyntax)original,
            (PropertyDeclarationSyntax)updated, backingFieldName) as SyntaxNode
         : ExpandType((TypeDeclarationSyntax)original,
            (TypeDeclarationSyntax)updated, propertyTypeSymbol, backingFieldName,
            model, workspace) as SyntaxNode
        );
        return root;
      }
      // etc.
    }
ExpandProperty（）方法改变get和set访问器时，使用WithAccessorList方法，通过花
括号（SyntaxFactory.Block）传递新创建的访问器方法，再添加语句，设置和获取块内的
值。返回的属性声明用属性已更新的内容来注释。这个注释可用于将字段添加到类型中，
把字段放在属性的前面：
    private static SyntaxAnnotation UpdatedPropertyAnnotation =
      new SyntaxAnnotation("UpdatedProperty");
    private static PropertyDeclarationSyntax ExpandProperty(
        PropertyDeclarationSyntax original,
        PropertyDeclarationSyntax updated,
        string backingFieldName)
    {
      AccessorDeclarationSyntax getter =
        original.AccessorList.Accessors.FirstOrDefault(
          ad => ad.Kind() == SyntaxKind.GetAccessorDeclaration);
      var returnFieldStatement =
        SyntaxFactory.ParseStatement($"return {backingFieldName}; ");
      getter = getter
        .WithBody(SyntaxFactory.Block(
          SyntaxFactory.SingletonList(returnFieldStatement)))
        .WithSemicolonToken(default(SyntaxToken));
      AccessorDeclarationSyntax setter =
        original.AccessorList.Accessors.FirstOrDefault(
          ad => ad.Kind() == SyntaxKind.SetAccessorDeclaration);
      var setPropertyStatement = SyntaxFactory.ParseStatement(
        $"{backingFieldName} = value; ");
      setter = setter.WithBody(SyntaxFactory.Block(SyntaxFactory.SingletonList(
        setPropertyStatement)))
      .WithSemicolonToken(default(SyntaxToken));
      updated = updated
        .WithAccessorList(SyntaxFactory.AccessorList(
          SyntaxFactory.List(new[] { getter, setter })))
        .WithAdditionalAnnotations(Formatter.Annotation)
        .WithAdditionalAnnotations(UpdatedPropertyAnnotation);
      return updated;
    }
添加完全属性语法之后，添加字段。前面所示的方法ImplementFullProperty调用
ExpandProperty（）和ExpandType（）方法。ExpandType（）在TypeDeclarationSyntax对
象上调用方法WithBackingField（）：
    private static TypeDeclarationSyntax ExpandType(
      TypeDeclarationSyntax original,
      TypeDeclarationSyntax updated,
      ITypeSymbol typeSymbol,
      string backingFieldName,
      SemanticModel model,
      Workspace workspace)
    {
      return updated.WithBackingField(typeSymbol, backingFieldName, model,
        workspace);
    }
WithBackingField（）是一个扩展方法，它首先查找属性上的注释，使用方法
InsertNodesBefore将新创建的字段定位在属性之前。这个字段本身是通过调用辅助方法
GenerateBackingField创建的：
    private static TypeDeclarationSyntax WithBackingField(
      this TypeDeclarationSyntax node,
      ITypeSymbol typeSymbol,
      string backingFieldName,
      SemanticModel model,
      Workspace workspace)
    {
      PropertyDeclarationSyntax property =
        node.ChildNodes().Where(n =>
        n.HasAnnotation(UpdatedPropertyAnnotation))
          .FirstOrDefault() as PropertyDeclarationSyntax;
      if (property == null)
      {
        return null;
      }
      MemberDeclarationSyntax fieldDecl =
        GenerateBackingField(typeSymbol, backingFieldName, workspace);
      node = node.InsertNodesBefore(property, new[] { fieldDecl });
      return node;
    }
GenerateBackingField（）方法的实现代码使用ParseMember辅助方法，把术语
_field_Type_作为类型的占位符，创建了一个FieldDeclarationSyntax节点。在这个字段声明
中，类型被SyntaxNode类型替换，从语法生成器中返回：
    private static MemberDeclarationSyntax GenerateBackingField(
      ITypeSymbol typeSymbol,
      string backingFieldName,
      Workspace workspace)
    {
      var generator = SyntaxGenerator.GetGenerator(
        workspace, LanguageNames.CSharp);
      SyntaxNode type = generator.TypeExpression(typeSymbol);
      FieldDeclarationSyntax fieldDecl =
        ParseMember($"private _field_Type_ {backingFieldName}; ") as
        FieldDeclarationSyntax;
      return fieldDecl.ReplaceNode(fieldDecl.Declaration.Type,
        type.WithAdditionalAnnotations(Simplifier.SpecialTypeAnnotation));
    }
辅助方法ParseMember用SyntaxFactory建立一个编译单元，并返回传递给方法的成员
的语法节点：
    private static MemberDeclarationSyntax ParseMember(string member)
    {
      MemberDeclarationSyntax decl =
        (SyntaxFactory.ParseCompilationUnit($"class x {{\r\n{member}\r\n}}")
        .Members[0] as ClassDeclarationSyntax).Members[0];
      return decl.WithAdditionalAnnotations(Formatter.Annotation);
    }
有了这一切，就可以调试VSIX项目，进而启动另一个Visual 
Studio实例。在新的
Visual Studio实例中，可以打开项目或创建新项目，定义自动实现的属性，选择它，再选
择Quick 
Action上下文菜单。这会调用代码重构提供程序，显示可以使用的、生成的结
果。使用第二个Visual Studio实例进行编辑时，可以使用第一个实例，通过代码重构提供
程序调试。
18.7 小结
本章介绍了.NET编译器平台。只用一个章节介绍这一技术并不容易，因为可以用几
本书的篇幅介绍它。然而，本章讨论了这个技术的所有重要部分，涵盖了不同的方面，例
如使用LINQ查询从源代码中查询节点，语法遍历器等。语义分析用于检索符号信息。对
于代码转换，讨论了如何使用WithXX和ReplaceXX方法，基于现有的语法树，创建新的
语法树。本章的最后部分展示了如何使用前面的所有方面与工作区API，来创建在Visual
Studio中使用的代码重构提供程序。
下一章讨论Visual 
Studio的另一个重要方面，创建不同的测试，来检查源代码的功
能。
第19章
测试
本章要点
● 带MSTest和xUnit的单元测试
● 使用Fakes Framework
● 用IntelliTest创建测试
● 使用xUnit和.NET Core
● 编码的UI测试
● Web测试
本章源代码下载：
本章源代码的下载地址为www.wrox.com/go/professionalcsharp6。从该网页的
Download Code选项卡中下载Chapter 19 Code后，本章的代码分为如下主要示例：
● Unit Testing Sample
● MVVM Sample
● Web Application Sample
  注意： 本章的UI测试和Web测试需要Visual Studio企业版。单元测试也可以
用Visual Studio专业版完成。
19.1 概述
应用程序开发变得敏捷无比。使用瀑布过程模型来分析需求时，设计应用程序架构，
实现它，两三年后发现所建立的应用程序没有满足用户的需求，这种情形并不常见。相
反，软件开发变得敏捷无比，发布周期更短，最终用户在开发早期就参与进来。看看
Windows 10：数以百万计的Windows内部人士给早期的构建版本提供反馈，每隔几个月甚
至几周就更新一次。在Windows 
10的Beta程序中，Windows内部人士曾经在一周内收到
Windows 10的3个构建版本。Windows 10是一个巨大的程序，但微软设法在很大程度上改
变开发方式。同样，如果参与.NET 
Core开源项目，每晚都会收到NuGet包的构建版本。
如果喜欢冒险，甚至可以写一本关于未来技术的书。
如此快速和持续的改变——每晚都创建的构建版本——等不及内部人士或最终用户发
现所有问题。Windows 10每隔几分钟就崩溃一次，Windows 10内部人士就不会满意。修
改方法的实现代码的频率是多少，才能发现似乎不相关的代码不工作了？为了试图避免这
样的问题，不改变方法，而是创建一个新的方法，复制原来的代码，并进行必要的修改，
但这将极难维护。在一个地方修复方法后，太容易忘记修改其他方法中重复的代码。而
Visual Studio 2015可以找出代码重复。
为了避免这样的问题，可以给方法创建测试程序，让测试程序自动运行，签入源代码
或在每晚的构建过程中检查。从一开始就创建测试程序，会在开始时增加项目的成本，但
随着项目的继续进行和维护期间，创建测试程序有其优点，降低了项目的整体成本。
本章解释了各种各样的测试，从测试小功能的单元测试开始。这些测试应该验证应用
程序中可测试的最小部分的功能，例如方法。传入不同的输入值时，单元测试应该检查方
法的所有可能路径。Visual 
Studio 
2015为创建单元测试提供了一个很好的增强：
IntelliTest，参见本章的内容。Fakes Framework 允许隔离方法外部的依赖关系。当然，不
是使用“垫片”，而是最好使用依赖注入，但这不能在所有的地方使用。
MSTest是Visual Studio用于创建单元测试的一部分。建立.NET Core时，MSTest不支
持为.NET Core库和应用程序创建测试（如今MSTest支持.NET Core库）。这就是为什么微
软本身使用xUnit为.NET 
Core创建单元测试的原因。本章介绍微软的测试框架MSTest和
xUnit。
使用Web测试，可以测试Web应用程序，发送HTTP请求，模拟一群用户。创建这些
类型的测试，允许模拟不同的用户负载，允许进行压力测试。可以使用测试控制器，来创
建更高的负载，模拟成千上万的用户，从而也知道需要什么基础设施，应用程序是否可伸
缩。
本章介绍的最后一个测试特性是UI测试。可以为基于XAML的应用程序创建自动化测
试。当然，更容易为视图模型创建单元测试，用ASP.NET创建视图组件，但本章不可能
涉及测试的方方面面。可以自动化UI测试。想象一下数百种不同的Android移动设备。你
会购买每一个型号，在每个设备上手动测试应用程序吗？最好使用云服务，在确实要安装
应用程序的、数以百计的设备上，发送要测试的应用程序。不要以为人们会在数以百计的
设备上启动云中的应用程序，并与应用程序进行可能的交互，这需要使用UI测试自动完
成。
首先，创建单元测试。
19.2 使用MSTest进行单元测试
编写单元测试有助于代码维护。例如，在更新代码时，想要确信更新不会破坏其他代
码。创建自动单元测试可以帮助确保修改代码后，所有功能得以保留。Visual Studio 2015
提供了一个健壮的单元测试框架，还可以在Visual Studio内使用其他测试框架。
19.2.1 使用MSTest创建单元测试
下面的示例测试类库UnitTestingSamples中一个非常简单的方法。这是一个.NET 4.6类
库，因为如前所述，目前.NET 
Core不用于MSTest环境。当然，可以创建其他基于
MSBuild的项目。类DeepThought包含
TheAnswerToTheUltimateQuestionOfLifeTheUniverseAndEverything方法，该方法返回42作
为结果（代码文件UnitTestingSamples / DeepThought.cs）：
    public class DeepThought
    {
      public int TheAnswerOfTheUltimateQuestionOfLifeTheUniverseAndEverything() =
> 42;
    }
为了确保没有人改变返回错误结果的方法，创建一个单元测试。要创建单元测试，使
用Visual C#项目组中可用的Unit Test Project模板。开始创建单元测试项目的简单方法是选
择一个方法（例如方法
TheAnswerToTheUltimateQuestionOfLifeTheUniverseAndEverything），右击，打开上下文
菜单，或在触摸屏上使用双指单触摸手势，或单击键盘上的上下文菜单键，或者（如果键
盘没有上下文菜单键，就按Shift + F10，或如果功能键配置为二级键，就按FN +Shift+
F10），并选择Create Unit Tests。弹出的对话框如图19-1所示，在其中可以选择一个已安
装的测试框架，可以决定创建一个新的测试项目，或选择现有的一个。此外，可以指定不
同的名称，如测试项目的名称、名称空间的名字、文件名、类名和方法名。默认情况下，
Tests或Test添加为后缀，但可以改变它。从这个对话框中，可以安装额外的测试框架。
图19-1
单元测试类标有TestClass特性，测试方法标有TestMethod特性。该实现方式创建
DeepThought的一个实例，并调用要测试的方法
TheAnswerToTheUltimateQuestionOfLifeTheUniverseAnd-Everything。返回值使用
Assert.AreEqual与42进行比较。如果Assert.AreEqual失败，测试就失败（代码文件
UnitTestingSamplesTest / DeepThoughtTests.cs）：
    [TestClass]
    public class TestProgram
    {
      [TestMethod]
      public void
      TestTheAnswerToTheUltimateQuestionOfLifeTheUniverseAndEverything()
      {
        // arrange
        int expected = 42;
        var dt = new DeepThought();
        // act
        int actual =
          dt.TheAnswerToTheUltimateQuestionOfLifeTheUniverseAndEverything();
        // assert
        Assert.AreEqual(expected, actual);
      }
    }
单元测试是由3个A定义：Arrange、Act和Assert。首先，一切都安排好了，单元测试
可以开始了。在安排阶段，在第一个测试中，给变量expected分配调用要测试的方法时预
期的值，调用DeepThought类的一个实例。现在准备好测试功能了。在行动阶段，调用方
法。在完成行动阶段后，需要验证结果是否与预期相同。这在断言阶段使用Assert类的方
法来完成。
Assert类是Microsoft.VisualStudio.TestTools.UnitTesting名称空间中MSTest框架的一部
分。这个类提供了一些可用于单元测试的静态方法。默认情况下，Assert.Fail方法添加到
自动创建的单元测试中，提供测试还没有实现的信息。其他一些方法有：AreNotEqual验
证两个对象是否不同；IsFalse和IsTrue验证布尔结果；IsNull和IsNotNull验证空结果；
IsInstanceOfType和IsNotInstanceOfType验证传入的类型。
19.2.2 运行单元测试
使用Test Explorer（通过Test | Windows | Test Explorer打开），可以在解决方案中运行
测试（见图19-2）。
图19-2
图19-3显示了一个失败的测试，列出了失败的所有细节。
图19-3
当然，这只是一个很简单的场景，测试通常是没有这么简单的。例如，方法可以抛出
异常，用其他的路径返回其他值，或者使用了不应该在单个单元中测试的代码（例如数据
库访问代码或者调用的服务）。接下来就看一个比较复杂的单元测试场景。