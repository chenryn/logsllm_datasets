## 思考题你觉得金丝雀发布可以用在移动端应用或者桌面应用上吗？如果可以的话，大概要怎么实现呢？感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再见！![](Images/6476358e731920fbc927e278bae473aa.png){savepage-src="https://static001.geekbang.org/resource/image/ec/d8/ece1747e3a8f96aa76a8e57c94de94d8.jpg"}
# 19 \| 不再掉队，研发流程、工程方法趋势解读和展望你好，我是葛俊。今天，我们就来聊一聊研发流程和工程方法的一些趋势吧。软件行业从诞生之日起，就一直是充满了发展和变化，各种工程方法、研发模式不断涌现，而且涌现的速度越来越快。对于开发团队和个人来说，这既是挑战也是机会：说是挑战，是因为我们需要持续学习才能跟得上它的发展；说是机会，是因为如果能够快速学习并应用这些实践，我们就可以在竞争中取得优势。这些挑战和机会，并不强依赖于资源、背景，其实是为我们提供了一个相对公平的竞争环境。这，也是软件行业这些年来涌现了许多白手起家的成功公司和个人的重要原因。在今天这篇文章中，我会针对当前比较流行的研发流程、工程方法的趋势，尤其是与国内研发比较相关的部分，做一些解读和展望，和你说说我的理解、预测，希望作为你以及你的团队，在技术选型以及工程方法选择上的一些参考。接下来，我将会从协作方式、云计算平台、应用开发和 AI 这 4个方面与你展开讨论。
## 协作方式的相关趋势在我看来，协作方式的相关趋势，主要表现在以下两个方面：-   首先，团队远程办公、灵活工时办公，会越来越普遍；-   其次，聊天工具和其他工具的集成，会越来越普遍。接下来，我与你说说我为什么会有这样的预测吧。
### 团队远程办公、灵活工时办公，会越来越普遍``{=html}远程办公之前用得不是特别多，主要是因为沟通效率比较低，也不利于掌控团队氛围。但，视频会议以及团队协作工具的快速发展，使得这些问题不再那么明显了。这时，远程办公的巨大好处，也就是可以**克服人才的地域局限性**，就凸显出来了。比如，很多人在考虑要不要应聘工作时，都会考虑通勤距离。所以，一旦能够打破这个地域限制，招聘的空间就会开阔很多。远程办公的另一个好处是，可以**大量减少通勤时间，进而提高研发产出**。近些年来，交通拥挤、通勤时间过长的情况，越来越严重。美国有科学研究表明，如果每天上班单程超过30分钟，就会对人的情绪产生比较大的负面影响。而国内的一线城市，从我接触到的样本看，上班单程低于30 分钟的情况大概只占 20%。所以最近这些年，越来越多的公司开始或多或少地采用远程办公的方式，以此来缓解通勤时间过长给员工造成的压力。有些公司做得比较彻底，让绝大部分开发人员绝大部分时间都是远程办公，我知道的公司包括GitHub 和Atlassian。而更多的公司，则采用的是每周允许员工部分时间在家办公，比如Facebook 的开发人员每周三可以在家办公。**至于灵活工时，本质是用任务来驱动**。这一点比较符合软件开发的特点，在第1篇文章中我已经与你讨论过了，这里不再过多展开了。在硅谷，基本上所有的软件公司，都是这样操作的。在国内，这种情况也越来越普遍。关于远程办公方式，我还有两个小贴士：-   一是，要尽量使用视频会议，而不是电话会议。有研究表明，电话会议不如面对面沟通的效率高，主要是因为缺少了由面部表情和肢体语言传递的信息。-   二是，做好信息的数字化。比如，建设好任务系统、文档系统等，从而让研发人员在工作中能尽量从这些系统中获取信息，而不用过于依赖面对面或者实时聊天系统，依然能够高效工作。
### 聊天工具和其他工具的集成会越来越普遍聊天工具和研发流程中其他工具的紧密集成，最近几年在国外很流行，最典型的就是Slack。它可以和任务工具、代码审查工具、部署工具、监控系统进行集成，从而实现我前面[第4篇文章](https://time.geekbang.org/column/article/128867)中提到的工具网状互联，提高研发效能。所以，我觉得下面这种工作方式会越来越普遍：聊天工具里有各种各样的聊天室和聊天机器人，团队成员在不同的聊天室讨论不同的话题，并通过聊天机器人和其他工具进行集成和交互，来获取信息以及执行一些操作。比如，询问聊天机器人当前线上的服务分别是哪些版本、相关需求有哪些、Commit有哪些、具体的开发和测试人员是谁等。又比如，通过运维机器人添加两台机器到集群中去。聊天是人类最自然的沟通方式之一，所以在聊天室和机器人的帮助下，执行这些操作会非常高效，提高研发效能也就不在话下了。
## 云计算平台的相关趋势正如我在[第 16篇文章](https://time.geekbang.org/column/article/141568)中提到的，云计算正在改变我们开发软件的方式。利用好云计算平台的趋势，是提高团队研发效能必须要做的事儿。在我看来，**云计算最大的趋势应该是Docker 和 Kubernetes 带来的各种可能性**。Kubernetes 自诞生以来，背靠着 Google公司的强大技术支撑和经验积累，发展得异常迅猛，现在，它已经成为了容器编排的事实标准。在我看来，其中最大的作用是，我们可以用它来建设PaaS。使用PaaS，我们可以快速部署和管理应用程序，把容量预配置、负载均衡、弹性扩容和应用程序运行状况监控的部署细节交给平台来管理，让研发团队聚焦于业务，对高效业务开发极其有用。但是，PaaS平台容易出现灵活性不足的情况。比如，我之前在 Stand 公司开发后端服务时，非常希望能够使用 AWS 提供的PaaS 服务（比如，Elastic Beanstalk服务），来减轻团队在运维方面的工作压力，但试用之后，发现其无法支持一些定制化的需求，比如平台的技术栈的灵活性不够，而且更新的时候透明度不够。所以我们只能忍痛放弃，最终选择使用更下一层的IaaS 服务，通过自己管理虚拟机来部署和管理服务。而解决上述灵活性不足问题的一个方法是，灵活生成新的 PaaS 平台。但，PaaS平台的建设必须依托于下层的 IaaS才能实现，所以技术要求很高，工作量和资源要求也很大，只有专门做 PaaS的公司和云厂商才有能力提供 PaaS。Kubernetes出现后，提供了强大的容器管理和编排功能，事实上是实现了一种基于容器的基础设施的抽象，也就是实现了IaaS 的一个子类。所以通过它，我们终于可以方便地建设定制化的 PaaS了，一个具体的例子是 FaaS（Function as a Service）。Kubernetes的出现，极大地降低了建设 FaaS的工作量，所以很快出现了基于它的实现，比如[OpenFaaS](https://github.com/openfaas/faas)、[Fission](https://github.com/fission/fission)。正是基于 Kubernetes 提供的构建 PaaS的能力，我预期，将来越来越的产品会构建在基于 Kubernetes 和 Docker 的PaaS 之上。今天，很多公司对 Kubernetes 还是直接使用，也就是通过一个对 Kubernetes比较了解的运维团队，来支持公司的服务运行在 Kubernetes 集群上。但Kubernetes的学习成本比较高、学习曲线比较陡峭，整个系统的运行并不是那么顺畅。所以，我觉得将来的趋势将会是这样的：-   如果你所在的团队比较小，可能会选择第三方通过 Kubernetes 提供的 PaaS    平台；-   如果你所在的团队比较大，可能会基于 Kubernetes 建设适合自己的 PaaS    平台。另外，我觉得很可能会出现这样的情况：整个公司运行一套 Kubernetes 作为IaaS，上面运行多个不同的 PaaS 平台，支持各种服务的运行。如下图所示。![](Images/6629187e5f5d1674dc7c17ead245ad9c.png){savepage-src="https://static001.geekbang.org/resource/image/be/75/be1c49b861b7d92bc9e139c00bcf4475.jpg"}> 备注：CaaS（Containers as a> Service），是允许用户通过基于容器的虚拟化来管理和部署容器、应用程序、集群，属于> IaaS 平台的范畴。
## 应用开发的相关趋势随着云计算的普及，分布式计算会越来越流行，最典型的例子莫过于微服务的盛行。设计正确的架构，来支持产品的开发和部署，是云时代高效研发的重要因素。在我看来，应用开发的相关趋势，主要表现在云原生开发方式和服务网格两个方面。
### 云原生的开发方式应用程序运行在云端，需要基于云的架构设计，这就意味着我们需要一套全新的理念去承载这种开发模式。这套理念，就是云原生开发。由 Heroku 创始人 Adam Wiggins提出并开源、由众多经验丰富的开发者共同完善的[12原则（12-factor）](https://12factor.net/zh_cn/)，是云原生开发理念的理想实践标准。
### 服务网格复杂的服务拓扑结构，是云原生应用程序的一个重要难点。而服务网格正是用来处理服务间通信的专用基础设施，它提供了应用间的流量、安全性管理，以及可观察性，比较好地解决了这一问题。在服务网格架构中，流量管理从 Kubernetes中解耦，每一个服务对网络拓扑并不知情，通信都是通过代理来进行的。所以，我们就可以通过代理来方便地完成很多工作。比如，在部署阶段进行的集成测试，我们就可以借助它来实现。假设 A 和 B是系统中的两个服务，并且 A 会调用 B。我们希望在部署 A的一个新版本时，在生产环境进行 A 和 B 的集成测试：-   通过 A 的 egress 代理，让它对下游服务发出的请求都自动加上一个    x-service-test-b 的 header；-   而在 B 的 ingress 代理接收到有 x-service-test-b 的请求时，自动通知 B    这是一个测试请求。测试完毕之后，修改代理去除这个 header 即可。目前，关于服务网格有两款比较流行的开源软件，分别是[Linkerd](https://linkerd.io/)和 [Istio](https://istio.io/) ，都可以直接在 Kubernetes中集成，也日渐成熟。