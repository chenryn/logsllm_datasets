with a static RBAC system is that in a production environ-
ment, users sometime need to promote or demote their priv-
ileges temporarily depending on certain circumstances (i.e.
emergencies). A static role-based access control system is
not ideal to handle such situations. Leveraging the unique
ability of mobile devices to take environmental conditions
into account, DR BACA provides dynamic role based access
control through context-awareness and shareable rules.
c&&allowed
c&&¬allowed
¬c&&¬allowed
¬c&&allowed
explicitly allow
explicitly deny
implicitly allow
implicitly deny
Table 3: Explicit or Implicit Rules
A context itself can consist of diﬀerent environmental com-
ponents such as the current location of the device, the cur-
rent day and time or even an event such as an Android
intent. At any given moment, a context can either be ful-
ﬁlled or not. For a given context-aware rule, if the context is
currently fulﬁlled, we call it an explicit rule. If the context
is currently not fulﬁlled, we call it an implicit rule. Based on
the current context, an application execution or permission
request can be dynamically allowed or denied, either explic-
itly or implicitly as shown in Table 3 (c is the context fulﬁlled
ﬂag). For example, suppose a rule deﬁnes that gaming ap-
plications are not allowed during working hours (e.g. 9am to
5pm). If it is currently 10am, then this rule explicitly denies
the execution of gaming application. However, if the current
time is 1am, this rule implicitly allows the execution of gam-
ing applications. If two rules conﬂict with each other, the
explicit rule supersedes any implicit rule. The justiﬁcation
for this approach is as follows: an explicit rule is speciﬁcally
created by a creator of a security policy. This creator will
expect that rule to be followed in any circumstance. If an
implicit rule could supersede that explicit rule, the creators
expectations would not be met, causing confusion and pos-
sibly introduce security issues. If two conﬂicting rules are
both explicit or both implicit, then the granting rule super-
sedes the denying rule. This approach allows for situations
where the users are generally restricted from performing a
certain action but a small subset of these users still need to
301
be allowed to perform that same action. We can achieve this
situation by intentionally creating two conﬂicting rules: the
denying rule will be applied to all roles while the allowing
rule will only be applied to the small subset of these roles.
A rule can also be temporarily shared with other users on
another device. The shareable ﬂag of any given rule deﬁnes
if the rule can be shared or not. This can be very useful
for users to temporarily promote or demote their privileges
depending on the current circumstances. For example, a
doctor may temporarily share with his assisting nurse a rule
that allows the execution of an application which is normally
only executable by doctors. Another example would be to
temporarily grant camera execution rights to the check-in
staﬀ in order to register a new patient. Either way, a tem-
porary role will be created for the receiving user which will
contain this shared rule. DR BACA provides the sharing of
rules through the use of Near Field Communication (NFC),
which will be described in detail in the next section.
Table 4 gives a few examples of how DR BACA rules
can be deﬁned in practice. Note that applications can be
grouped as well. Instead of having to individually add all
applications that fall under a certain rule, one can simply
group these applications and only add the group to the de-
sired rule.
It is also important to note here that while a
rule can grant a certain permission to an application, the
application itself must still request that permission during
installation. Otherwise, Android’s own reference monitor
will reject the permission request before DR BACA is even
involved in the decision process.
(BROWSE NOK, F, F, {INET}, {BROWSER}, {WORKHOUR}):
Reject INTERNET permission for the BROWSER application during work-
ing hours
(INET NOK, F, F, {INET}, {}, {WORKDAYS}):
Reject INTERNET permission for any application during work days (MON-
FRI)
(INET OK, T, T, {INET}, {COMPANYAPPS}, {}):
Allow INTERNET permission for all COMPANYAPPS. This rule can also be
transferred using NFC
(NO GAMES, F, F, {}, {GAMES}, {WORKHOUR}):
All game applications cannot be executed during working hours
Table 4: Example DR BACA rules
By applying the RBAC model to Android systems and
taking advantage of Android’s unique ability of environmen-
tal awareness, the DR BACA model we introduced here en-
hances the current Android permission model by providing
a ﬁner-grained access control for mobile devices. The next
section will focus on how we applied this model in our DR
BACA system implementation.
4. DR BACA SYSTEM
Figure 2 illustrates DR BACA’s architecture on a high
level. The application layer consists of third-party applica-
tions that are installed on the mobile device. As shown in
the legend, the full arrows show the execution ﬂow when
a permission or execution request occurs. The dotted lines
on the other hand explain how information ﬂows inside the
system. The following subsections focus on diﬀerent com-
ponents and explain them in more detail.
In particular,
we discuss how shareable rules can be implemented through
NFC technology.
(cid:1)(cid:2)(cid:2)(cid:3)(cid:4)
(cid:1)(cid:2)(cid:2)(cid:3)(cid:5)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:6)(cid:5)(cid:7)(cid:8)
(cid:9)(cid:2)(cid:10)(cid:11)(cid:2)(cid:6)(cid:12)
(cid:13)(cid:14)(cid:2)(cid:15)(cid:11)(cid:12)(cid:5)(cid:7)(cid:8)
(cid:9)(cid:2)(cid:10)(cid:11)(cid:2)(cid:6)(cid:12)
(cid:1)(cid:6)(cid:10)(cid:11)(cid:12)(cid:13)(cid:10)(cid:3)(cid:14)(cid:12)(cid:6)(cid:13)(cid:15)(cid:12)(cid:11)
(cid:19)(cid:24)(cid:11)(cid:27)(cid:13)(cid:26)(cid:26)(cid:13)(cid:12)(cid:6)(cid:3)(cid:34)
(cid:35)(cid:33)(cid:24)(cid:21)(cid:28)(cid:15)(cid:13)(cid:12)(cid:6)(cid:3)
(cid:9)(cid:29)(cid:24)(cid:21)(cid:36)(cid:24)(cid:11)
(cid:9)(cid:12)(cid:6)(cid:15)(cid:24)(cid:33)(cid:15)
(cid:14)(cid:12)(cid:6)(cid:13)(cid:15)(cid:12)(cid:11)
(cid:17)(cid:26)(cid:24)(cid:11)
(cid:14)(cid:30)(cid:6)(cid:30)(cid:31)(cid:24)(cid:11)
(cid:16)(cid:7)(cid:3)(cid:8)(cid:1)(cid:9)(cid:1)(cid:3)(cid:25)(cid:24)(cid:11)(cid:23)(cid:13)(cid:21)(cid:24)
(cid:14)(cid:14)(cid:14)
(cid:1)(cid:2)(cid:2)(cid:3)(cid:6)
(cid:7)(cid:8)(cid:1)(cid:9)(cid:1)
(cid:1)(cid:2)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)(cid:8)(cid:9)(cid:10)(cid:3)(cid:6)(cid:11)(cid:12)(cid:13)
(cid:16)(cid:7)(cid:3)(cid:8)(cid:1)(cid:9)(cid:1)(cid:3)
(cid:25)(cid:22)(cid:26)(cid:15)(cid:24)(cid:27)(cid:3)(cid:1)(cid:2)(cid:2)
(cid:7)(cid:28)(cid:20)(cid:24)
(cid:26)(cid:29)(cid:30)(cid:11)(cid:13)(cid:6)(cid:31)
(cid:1)(cid:31)(cid:24)(cid:6)(cid:15)
(cid:19)(cid:12)(cid:20)(cid:13)(cid:21)(cid:22)
(cid:9)(cid:12)(cid:6)(cid:32)(cid:31)(cid:28)(cid:11)(cid:30)(cid:15)(cid:12)(cid:11)
(cid:25)(cid:24)(cid:21)(cid:28)(cid:11)(cid:13)(cid:15)(cid:22)
(cid:19)(cid:12)(cid:20)(cid:13)(cid:21)(cid:22)
(cid:1)(cid:9)(cid:15)(cid:13)(cid:8)(cid:4)(cid:15)(cid:10)(cid:16)(cid:4)(cid:15)(cid:15)(cid:3)(cid:12)(cid:17)(cid:6)(cid:13)(cid:12)
(cid:1)(cid:15)(cid:24)(cid:4)(cid:9)
(cid:16)(cid:7)(cid:3)(cid:8)(cid:1)(cid:9)(cid:1)(cid:3)(cid:17)(cid:18)
(cid:16)(cid:8)
(cid:19)(cid:12)(cid:20)(cid:13)(cid:21)(cid:22)(cid:3)(cid:19)(cid:11)(cid:12)(cid:23)(cid:13)(cid:10)(cid:24)(cid:11)
(cid:18)(cid:8)(cid:9)(cid:19)(cid:20)(cid:21)(cid:13)(cid:6)(cid:7)(cid:4)(cid:8)(cid:9)
(cid:22)(cid:12)(cid:13)(cid:23)(cid:12)(cid:13)
(cid:25)(cid:9)(cid:26)(cid:8)(cid:13)(cid:24)(cid:6)(cid:7)(cid:4)(cid:8)(cid:9)(cid:10)(cid:27)(cid:8)(cid:17)
(cid:28)(cid:29)(cid:12)(cid:5)(cid:21)(cid:7)(cid:4)(cid:8)(cid:9)(cid:10)(cid:27)(cid:8)(cid:17)
Figure 2: DR BACA architecture
4.1 Permission/Execution Checker
This component consists of hooks in the Android frame-
work which allow the DR BACA system to make allow or
deny decisions for both permission and application execu-
tion requests. The major diﬀerence between an execution
request and a permission request is that the permission re-
quest ﬁrst consults the Android reference monitor, whereas
an execution request immediately invokes DR BACA’s Per-
mission & Execution Checker. If Android rejects a permis-
sion request, DR BACA is not consulted and the request is
immediately rejected. Otherwise, DR BACA follows steps
shown in Figure 3.
(cid:30)(cid:29)(cid:2)(cid:17)(cid:11)(cid:12)(cid:5)(cid:7)(cid:8)(cid:9)(cid:3)(cid:2)(cid:10)(cid:11)(cid:2)(cid:6)(cid:12)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:6)(cid:5)(cid:7)(cid:8)(cid:9)(cid:3)(cid:2)(cid:10)(cid:11)(cid:2)(cid:6)(cid:12)
(cid:13)(cid:8)(cid:14)(cid:3)(cid:7)(cid:5)(cid:14)(cid:9)(cid:15)(cid:2)(cid:16)(cid:2)(cid:3)(cid:2)(cid:8)(cid:17)(cid:2)
(cid:18)(cid:7)(cid:8)(cid:5)(cid:12)(cid:7)(cid:3)(cid:9)(cid:19)(cid:20)(cid:20)(cid:7)(cid:21)(cid:6)(cid:9)(cid:5)(cid:12)(cid:22)
(cid:24)(cid:19)(cid:20)(cid:6)(cid:2)
(cid:28)(cid:3)(cid:11)(cid:2)
(cid:24)(cid:19)(cid:20)(cid:6)(cid:2)
(cid:11)(cid:6)(cid:2)(cid:9)(cid:14)(cid:2)(cid:16)(cid:19)(cid:11)(cid:20)(cid:12)(cid:9)(cid:3)(cid:7)(cid:20)(cid:2)
(cid:24)(cid:19)(cid:20)(cid:6)(cid:2)
(cid:11)(cid:6)(cid:2)(cid:3)(cid:9)(cid:20)(cid:7)(cid:25)(cid:25)(cid:2)(cid:14)(cid:9)(cid:5)(cid:8)(cid:22)
(cid:28)(cid:3)(cid:11)(cid:2)
(cid:26)(cid:19)(cid:6)
(cid:19)(cid:23)(cid:23)(cid:20)(cid:5)(cid:17)(cid:19)(cid:27)(cid:20)(cid:2)(cid:9)(cid:3)(cid:11)(cid:20)(cid:2)(cid:6)(cid:22)
(cid:28)(cid:3)(cid:11)(cid:2)
(cid:21)(cid:26)(cid:5)(cid:20)(cid:2)(cid:9)
(cid:26)(cid:19)(cid:6)(cid:18)(cid:7)(cid:3)(cid:2)(cid:15)(cid:11)(cid:20)(cid:2)(cid:6)
(cid:24)(cid:19)(cid:20)(cid:6)(cid:2)
(cid:25)(cid:7)(cid:12)(cid:7)(cid:9)(cid:8)(cid:2)(cid:29)(cid:12)(cid:9)(cid:3)(cid:11)(cid:20)(cid:2)
(cid:24)(cid:19)(cid:20)(cid:6)(cid:2)
(cid:28)(cid:3)(cid:11)(cid:2)
(cid:24)(cid:19)(cid:20)(cid:6)(cid:2)
(cid:14)(cid:7)(cid:2)(cid:6)(cid:9)(cid:3)(cid:11)(cid:20)(cid:2)(cid:9)
(cid:19)(cid:20)(cid:20)(cid:7)(cid:21)(cid:9)(cid:3)(cid:2)(cid:10)(cid:11)(cid:2)(cid:6)(cid:12)(cid:22)
(cid:28)(cid:3)(cid:11)(cid:2)
(cid:15)(cid:2)(cid:10)(cid:11)(cid:2)(cid:6)(cid:12)(cid:9)(cid:19)(cid:17)(cid:17)(cid:2)(cid:23)(cid:12)(cid:2)(cid:14)
(cid:15)(cid:2)(cid:10)(cid:11)(cid:2)(cid:6)(cid:12)(cid:9)(cid:14)(cid:2)(cid:8)(cid:5)(cid:2)(cid:14)
Figure 3: Execution/Permission request ﬂowchart
DR BACA ﬁrst checks if a user is currently logged in, since
an access decision requires a user to be present. If this is not
the case, DR BACA reads a default role, which can contain
any number of rules deﬁned by the administrator. A useful
302
rule for the default role may be to only allow essential system
applications to start. Additionally, a rule that prohibits the
execution of dangerous activities such as SEND SMS can
further improve the security provided by the default role. If
a user is logged in, DR BACA retrieves all applicable rules
for the given user by consulting all of the current user’s roles.
An applicable rule is any rule that involves the requested
application and permission and is owned by the current user
based on his/her role(s). If no such rule is found, the request
is granted. If at least one applicable rule is found, DR BACA
will grant the request if and only if one of the rules explicitly
or implicitly allows the request. As an example, the rule in
Listing 1 explicitly allows the INTERNET permission for
the browser application.
{ "permissions": ["INTERNET"],
"apps": ["BROWSER"],
"rulename": "INET_ALLOWED" }
Listing 1: Allow INTERNET for Browser #1
The rule shown in Listing 2 implicitly allows the INTER-
NET permission for the browser application outside of of-
ﬁce hours. Assuming that WORKHOUR is deﬁned as 9am
- 5pm, this rule will implicitly allow the INTERNET per-
mission for the browser application from 5pm - 8.59am.
As mentioned in the DR BACA model section, an explic-
itly granted rule supersedes an implicitly granted rule.
{ "permissions": ["INTERNET"],
"apps": ["BROWSER"],
"rulename": "INET_DENIED",
"contexts": ["WORKHOUR"],
"allowed": false }
Listing 2: Allow INTERNET for Browser #2
4.2 User Manager
DR BACA oﬀers multi-user capabilities through the User
Manager, which allows diﬀerent users to log into the same
mobile device. Users will have diﬀerent permissions, based
on DR BACA’s Security Policy. DR BACA assures that no
security sensitive information remains running between dif-
ferent user logins. For example, if a permission request was
granted for an application, the permission will be revoked
once that user logs out.
On the other hand, DR BACA also allows a single user
to log into diﬀerent devices, as long as they are part of the
same overall security policy.
4.3 Context Monitor
If a rule is associated with some context, the Context Mon-
itor will be consulted to check if the context is currently
fulﬁlled or not. Currently, the Context Monitor can check
the current location, time and day. Additional contexts have
been considered, for example, to further mitigate permission
re-delegation attacks, the chain of applications requesting
a given permission could be implemented as an additional
context. By using context-aware security rules, the Context
Monitor component enables DR BACA to provide dynamic
role-based access control (RBAC) for Android devices.
4.4 Rule sharing Agent
As part of the DR BACA Android application (see DR
BACA System App in Figure 2), the Rule Sharing Agent
enhances DR BACA’s access controls with dynamic RBAC
capabilities through the use of Near Field Communication
(NFC) technology. Android has been supporting NFC since
version 2.3 (Gingerbread). NFC allows for radio communi-
cation between NFC enabled devices. NFC tags can store
small amounts of data, normally around one to four kilo-
bytes. Once an NFC-enabled device moves into the prox-
imity of an NFC tag, the tag draws power from the device
through magnetic induction. This allows the tag to commu-
nicate with the device. NFC tags can be rewritten several
thousand times or they can be conﬁgured to be read-only.
DR BACA utilizes NFC in two ways: sharing rules be-
tween two devices and between an NFC tag and a device.
Through this technology, DR BACA currently provides dy-
namic, non-transitive rule delegation.
Device→Device:
In this mode, a set of rules can tem-
porarily be shared between NFC-enabled DR BACA devices.
The user initiating the process can select a subset of the
shareable rules he/she currently owns and initiate the shar-
ing process by moving his/her mobile device close to the
receiving mobile device. The data transferred between the
two devices contains the following:
should temporarily be shared.
• Rule name(s) contains the name of the rule(s) that
• Role name(s) contains the role(s) that are required
• Duration indicates how long the rule(s) are to be
in order to use this shareable rule.
shared.
Since we do not protect the data transferred between two
mobile devices, we need to assure that this transfer can-
not be forged by a malicious user. This can be achieved by
only allowing this form of communication between two in-
stances (one on each device) of the Rule sharing Agent. In
DR BACA, this application is a system application which
cannot be removed or overwritten by an unprivileged user.
Every application running on Android has to be digitally
signed, preventing malicious users from forging this applica-
tion. Digitally signed applications are further explained at
[13]. The rule sharing agent on the receiving device will ﬁrst
verify the other agent’s certiﬁcate before adding the tem-
porarily shared rules to the current user. If the certiﬁcate
veriﬁcation fails, no rules will be shared.
Tag→Device: Similar to the Device→Device mechanism,
one can use the Tag→Device mechanism to temporarily share
rule(s) via NFC. This works by moving the mobile device
close to a NFC tag which will then initiate the communi-
cation. In addition to the information (rules, roles and du-
ration time) sent during a Device→Device transaction, the
following information is additionally transferred:
• TagID is a unique ID consisting of 8 hexadecimal dig-
its (i.e. 1280CDB6) which is imprinted into the hard-
ware by the tag manufacturer;
• Digital signature, which protects the integrity of the
TagID, rule name(s) and duration.
Before any rule is shared, DR BACA veriﬁes that the user
on the receiving device is associated with at least one of
303
the roles required to share the rule. This applies to both
the Device→Device and the Tag→Device mechanism. This
check minimizes the risk of privileged users sharing rules
with inappropriate third parties. For example, a rule may
only be transferred to other employees but not to patients.
A patient will then not be able to make use of that rule,
even if a doctor tries to share it.
For the Tag→Device mechanism, DR BACA will also ver-
ify the digital signature which covers all data on the tag.
Using a digital signature provides integrity protection and
prevents tags from being maliciously forged. If any of the
information on the tag is modiﬁed after the fact, the dig-
ital signature veriﬁcation will fail and the rule(s) will not