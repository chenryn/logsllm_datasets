and zero otherwise.
.pp
the
.br __freading ()
function returns a nonzero value if the stream is read-only, or
if the last operation on the stream was a read operation,
and zero otherwise.
.pp
the
.br __fwriting ()
function returns a nonzero value if the stream is write-only (or
append-only), or if the last operation on the stream was a write
operation, and zero otherwise.
.pp
the
.br __fsetlocking ()
function can be used to select the desired type of locking on the stream.
it returns the current type.
the
.i type
argument can take the following three values:
.tp
.b fsetlocking_internal
perform implicit locking around every operation on the given stream
(except for the *_unlocked ones).
this is the default.
.tp
.b fsetlocking_bycaller
the caller will take care of the locking (possibly using
.br flockfile (3)
in case there is more than one thread), and the stdio routines
will not do locking until the state is reset to
.br fsetlocking_internal .
.tp
.b fsetlocking_query
don't change the type of locking.
(only return it.)
.pp
the
.br _flushlbf ()
function flushes all line-buffered streams.
(presumably so that
output to a terminal is forced out, say before reading keyboard input.)
.pp
the
.br __fpurge ()
function discards the contents of the stream's buffer.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br __fbufsize (),
.br __fpending (),
.br __fpurge (),
.br __fsetlocking ()
t}	thread safety	mt-safe race:stream
t{
.br __flbf (),
.br __freadable (),
.br __freading (),
.br __fwritable (),
.br __fwriting (),
.br _flushlbf ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh see also
.br flockfile (3),
.br fpurge (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2002 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" added note on self-signaling, aeb, 2002-06-07
.\" added note on cap_kill, mtk, 2004-06-16
.\"
.th sigqueue 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
sigqueue \- queue a signal and data to a process
.sh synopsis
.nf
.b #include 
.pp
.bi "int sigqueue(pid_t " pid ", int " sig ", const union sigval " value );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br sigqueue ():
.nf
    _posix_c_source >= 199309l
.fi
.sh description
.br sigqueue ()
sends the signal specified in
.i sig
to the process whose pid is given in
.ir pid .
the permissions required to send a signal are the same as for
.br kill (2).
as with
.br kill (2),
the null signal (0) can be used to check if a process with a given
pid exists.
.pp
the
.i value
argument is used to specify an accompanying item of data (either an integer
or a pointer value) to be sent with the signal, and has the following type:
.pp
.in +4n
.ex
union sigval {
    int   sival_int;
    void *sival_ptr;
};
.ee
.in
.pp
if the receiving process has installed a handler for this signal using the
.b sa_siginfo
flag to
.br sigaction (2),
then it can obtain this data via the
.i si_value
field of the
.i siginfo_t
structure passed as the second argument to the handler.
furthermore, the
.i si_code
field of that structure will be set to
.br si_queue .
.sh return value
on success,
.br sigqueue ()
returns 0, indicating that the signal was successfully
queued to the receiving process.
otherwise, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eagain
the limit of signals which may be queued has been reached.
(see
.br signal (7)
for further information.)
.tp
.b einval
.i sig
was invalid.
.tp
.b eperm
the process does not have permission to send the signal
to the receiving process.
for the required permissions, see
.br kill (2).
.tp
.b esrch
no process has a pid matching
.ir pid .
.sh versions
.br sigqueue ()
and the underlying
.br rt_sigqueueinfo (2)
system call first appeared in linux 2.2.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br sigqueue ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
if this function results in the sending of a signal to the process
that invoked it, and that signal was not blocked by the calling thread,
and no other threads were willing to handle this signal (either by
having it unblocked, or by waiting for it using
.br sigwait (3)),
then at least some signal must be delivered to this thread before this
function returns.
.ss c library/kernel differences
on linux,
.br sigqueue ()
is implemented using the
.br rt_sigqueueinfo (2)
system call.
the system call differs in its third argument, which is the
.i siginfo_t
structure that will be supplied to the receiving process's
signal handler or returned by the receiving process's
.br sigtimedwait (2)
call.
inside the glibc
.br sigqueue ()
wrapper, this argument,
.ir uinfo ,
is initialized as follows:
.pp
.in +4n
.ex
uinfo.si_signo = sig;      /* argument supplied to sigqueue() */
uinfo.si_code = si_queue;
uinfo.si_pid = getpid();   /* process id of sender */
uinfo.si_uid = getuid();   /* real uid of sender */
uinfo.si_value = val;      /* argument supplied to sigqueue() */
.ee
.in
.sh see also
.br kill (2),
.br rt_sigqueueinfo (2),
.br sigaction (2),
.br signal (2),
.br pthread_sigqueue (3),
.br sigwait (3),
.br signal (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/_exit.2
.\" copyright (c) 2021 suren baghdasaryan 
.\" and copyright (c) 2021 minchan kim 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" commit ecb8ac8b1f146915aa6b96449b66dd48984caacc
.\"
.th process_madvise 2 2021-06-20 "linux" "linux programmer's manual"
.sh name
process_madvise \- give advice about use of memory to a process
.sh synopsis
.nf
.br "#include " "      /* definition of " madv_* " constants */"
.br "#include " "   /* definition of " sys_* " constants */"
.br "#include " "       /* definition of " "struct iovec" " type */"
.b #include 
.pp
.bi "ssize_t syscall(sys_process_madvise, int " pidfd ,
.bi "                const struct iovec *" iovec ", size_t " vlen \
", int " advice ,
.bi "                unsigned int " flags ");"
.fi
.pp
.ir note :
glibc provides no wrapper for
.br process_madvise (),
necessitating the use of
.br syscall (2).
.\" fixme: see 
.sh description
the
.br process_madvise()
system call is used to give advice or directions to the kernel about the
address ranges of another process or of the calling process.
it provides the advice for the address ranges described by
.i iovec
and
.ir vlen .
the goal of such advice is to improve system or application performance.
.pp
the
.i pidfd
argument is a pid file descriptor (see
.br pidfd_open (2))
that specifies the process to which the advice is to be applied.
.pp
the pointer
.i iovec
points to an array of
.i iovec
structures, defined in
.ir 
as:
.pp
.in +4n
.ex
struct iovec {
    void  *iov_base;    /* starting address */
    size_t iov_len;     /* length of region */
};
.ee
.in
.pp
the
.i iovec
structure describes address ranges beginning at
.i iov_base
address and with the size of
.i iov_len
bytes.
.pp
the
.i vlen
specifies the number of elements in the
.i iovec
structure.
this value must be less than or equal to
.br iov_max
(defined in
.i 
or accessible via the call
.ir sysconf(_sc_iov_max) ).
.pp
the
.i advice
argument is one of the following values:
.tp
.br madv_cold
see
.br madvise (2).
.tp
.br madv_pageout
see
.br madvise (2).
.pp
the
.i flags
argument is reserved for future use; currently, this argument must be
specified as 0.
.pp
the
.i vlen
and
.i iovec
arguments are checked before applying any advice.
if
.i vlen
is too big, or
.i iovec
is invalid,
then an error will be returned immediately and no advice will be applied.
.pp
the advice might be applied to only a part of
.i iovec
if one of its elements points to an invalid memory region in the
remote process.
no further elements will be processed beyond that point.
(see the discussion regarding partial advice in return value.)
.pp
permission to apply advice to another process is governed by a
ptrace access mode
.b ptrace_mode_read_realcreds
check (see
.br ptrace (2));
in addition,
because of the performance implications of applying the advice,
the caller must have the
.b cap_sys_admin
capability.
.sh return value
on success,
.br process_madvise ()
returns the number of bytes advised.
this return value may be less than the total number of requested bytes,
if an error occurred after some
.i iovec
elements were already processed.
the caller should check the return value to determine whether a partial
advice occurred.
.pp
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b ebadf
.i pidfd
is not a valid pid file descriptor.
.tp
.b efault
the memory described by
.i iovec
is outside the accessible address space of the process referred to by
.ir pidfd .
.tp
.b einval
.i flags
is not 0.
.tp
.b einval
the sum of the
.i iov_len
values of
.i iovec
overflows a
.i ssize_t
value.
.tp
.b einval
.i vlen
is too large.
.tp
.b enomem
could not allocate memory for internal copies of the
.i iovec
structures.
.tp
.b eperm
the caller does not have permission to access the address space of the process
.ir pidfd .
.tp
.b esrch
the target process does not exist (i.e., it has terminated and been waited on).
.sh versions
this system call first appeared in linux 5.10.
.\" commit ecb8ac8b1f146915aa6b96449b66dd48984caacc
support for this system call is optional,
depending on the setting of the
.b config_advise_syscalls
configuration option.
.sh conforming to
the
.br process_madvise ()
system call is linux-specific.
.sh see also
.br madvise (2),
.br pidfd_open (2),
.br process_vm_readv (2),
.br process_vm_write (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/sched_setaffinity.2
.so man2/llseek.2
.so man3/fpurge.3
.so man3/stdarg.3
.so man3/pthread_attr_setschedparam.3
.so man3/unlocked_stdio.3
.\" copyright (c) 2001 martin schulze 
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" 2008-09-04, mtk, taken from debian downstream, with a few light edits
.\"
.th networks 5 2008-09-04 "gnu/linux" "linux system administration"
.sh name
networks \- network name information
.sh description
the file