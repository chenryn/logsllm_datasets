tx(t), is the number of inputs for the transaction. The out degree
d+
−
tx (t), is the number of outputs for
for a transaction t, denoted by d
the transaction.
We can also construct a graph using public keys, in which ver-
tices are public keys and directed edges again represent the ﬂow of
money from one public key to another; here, however, the in de-
gree of a public key reﬂects the number of inputs to the transaction
in which it received bitcoins, so a public key that received bitcoins
only once could have an in degree of (for example) ﬁve. For our
purposes, we would instead like the in degree of the output pub-
lic keys to be independent of how many public keys are provided
as input to the transaction. We therefore deﬁne, rather than in/out
degree, the in/out count for a public key.
DEFINITION 4.2. The in count for a public key pk, denoted
addr(pk), is the number of times pk has been an output in a trans-
d+
−
action. The out count for a public key pk, denoted d
addr(pk), is the
number of times pk has been an input in a transaction.
One of the deﬁning features of the Bitcoin protocol is the way
that bitcoins must be spent. When the bitcoins redeemed as the
output of a transaction are spent, they must be spent all at once: the
only way to divide them is through the use of a change address, in
which the excess from the input address is sent back to the sender.
A public key can therefore spend money only as many times as it
has received money (again, because each time it spends money it
must spend all of it at once).
4.3 Our heuristics
Heuristic 1.
The ﬁrst heuristic we use, in which we link input addresses to-
gether, has already been used many times in previous work [2, 17,
18, 21]; for completeness, we nevertheless present it here. Brieﬂy,
if two (or more) public keys are used as inputs to the same transac-
tion, then we say that they are controlled by the same user.
HEURISTIC 1. If two (or more) addresses are inputs to the same
transaction, they are controlled by the same user; i.e., for any trans-
action t, all pk ∈ inputs(t) are controlled by the same user.
The effects of this heuristic are transitive and extend well beyond
the inputs to a single transaction; e.g., if we observed one transac-
tion with addresses A and B as inputs, and another with addresses
B and C as inputs, then we conclude that A, B, and C all belonged
to the same user. It is also quite safe: the sender in the transaction
must know the private signing key belonging to each public key
used as an input, so it is unlikely that the collection of public keys
are controlled by multiple entities (as these entities would need to
reveal their private keys to each other).
Using this heuristic, we partitioned the network into 5,579,176
clusters of users. By naming these clusters — using the data col-
lection described in Section 3 — we observed that some of them
corresponded to the same user; e.g., there were 20 clusters that we
tagged as being controlled by Mt. Gox. (This is not surprising, as
many big services appear to spread their funds across a number of
distinct accounts to minimize the risk in case any one gets compro-
mised.) This cross-cluster naming was nevertheless not too com-
mon, and we thus ended up with 5,577,481 distinct clusters (recall
we started with 12,056,684 public keys). Factoring in “sink” ad-
dresses that have to date never sent any bitcoins (and thus did not
get clustered using this heuristic) yields at most 6,595,564 distinct
users, although we consider this number a quite large upper bound.
Heuristic 2.
Although Heuristic 1 already yields a useful clustering of users,
restricting ourselves to only this heuristic does not tell the whole
story. To further collapse users, our second heuristic focuses on
the role of change addresses within the Bitcoin system. A similar
heuristic was explored by Androulaki et al. [2] (who called them
“shadow” addresses), although there are a number of important dif-
ferences. In particular, their deﬁnition of shadow addresses relied
upon assumptions that may have held at the time of their work, but
no longer hold at present. For example, they assumed that users
rarely issue transactions to two different users, which is a frequent
occurrence today (e.g., payouts from mining pools, or bets on gam-
bling sites).
As discussed above, change addresses are the mechanism used
to give money back to the input user in a transaction, as bitcoins
can be divided only by being spent. In one idiom of use, the change
address is created internally by the Bitcoin client and never re-used;
as such, a user is unlikely to give out this change address to other
users (e.g., for accepting payments), and in fact might not even
know the address unless he inspects the block chain.
If we can
identify change addresses, we can therefore potentially cluster not
only the input addresses for a transaction (according to Heuristic 1)
but also the change address and the input user.
Because our heuristic takes advantage of this idiom of use, rather
than an inherent property of the Bitcoin protocol (as Heuristic 1
does), it does lack robustness in the face of changing (or adver-
sarial) patterns in the network. Furthermore, it has one very nega-
tive potential consequence: falsely linking even a small number of
change addresses might collapse the entire graph into large “super-
clusters” that are not actually controlled by a single user (in fact,
we see this exact problem occur in Section 4.5). We therefore fo-
cused on designing the safest heuristic possible, even at the expense
of losing some utility by having a high false negative rate, and ac-
knowledge that such a heuristic might have to be redesigned or ul-
timately discarded if habitual uses of the Bitcoin protocol change
signiﬁcantly.
Working off the assumption that a change address has only one
input (again, as it is potentially unknown to its owner and is not
re-used by the client), we ﬁrst looked at the outputs of every trans-
action. If only one of the outputs met this pattern, then we identiﬁed
that output as the change address. If, however, multiple outputs had
only one input and thus the change address was ambiguous, we did
not label any change address for that transaction. We also avoided
certain transactions; e.g., in a coin generation, none of the outputs
are change addresses.
In addition, in custom usages of the Bitcoin protocol it is possible
to specify the change address for a given transaction. Thus far,
one common usage of this setting that we have observed has been
to provide a change address that is in fact the same as the input
address.4 We thus avoid such “self-change” transactions as well.
DEFINITION 4.3. A public key pk is a one-time change address
for a transaction t if the following conditions are met:
addr(pk) = 1; i.e., this is the ﬁrst appearance of pk.
1. d+
2. The transaction t is not a coin generation.
3. There is no pk(cid:48) ∈ outputs(t) such that pk(cid:48) ∈ inputs(t); i.e.,
there is no self-change address.
4. There is no pk(cid:48) ∈ outputs(t) such that pk(cid:48)
(cid:54)= pk but
addr(pk(cid:48)) = 1; i.e., for all the outputs in the transaction,
d+
condition 1 is met for only pk.
HEURISTIC 2. The one-time change address is controlled by
the same user as the input addresses; i.e., for any transaction t, the
controller of inputs(t) also controls the one-time change address
pk ∈ outputs(t) (if such an address exists).
4.4 The impact of change addresses
To see the impact of change addresses on user clustering, con-
sider the following illustrative example: suppose we want to mea-
sure the incoming value of the major services with whom we in-
teracted; i.e., we want to know how many bitcoins they received
over time. If we consider the incoming value of services across
seven different categories — exchanges that function as banks, min-
ing pools, wallet services, gambling sites, vendors, ﬁxed-rated ex-
changes that do not function as banks, and investment schemes —
then, using Heuristic 1, we obtain the results shown in Figure 5a.
Looking at Figure 5a cumulatively, we might ﬁrst notice that, for
the past year and a half, the major users we tagged account for any-
where from 20% to 40% of the total incoming value. Comparing
across categories, we see that exchanges account for a considerable
fraction of the total value of these users. More surprisingly, given
the payout-based nature of mining pools, Figure 5a also seems to
indicate that mining pools are receiving a large portion of incoming
value. This percentage is artiﬁcially inﬂated, however, by certain
artifacts of how mining pools, and Deepbit in particular, pay their
miners.
In fact, as we see in Figure 5b, over 80% of the value
Deepbit receives is as change from itself.
While the particular mechanism that Deepbit uses allows us to
eliminate this “self-churn” even using Heuristic 1 (as they always
use a self-change address), more generally we cannot eliminate the
self-churn of all users with just Heuristic 1. We are able to identify
self-churn only if we know that the change address is controlled by
the same user as the input address(es).
Eliminating this self-churn is therefore where Heuristic 2 be-
comes crucial. To see the effect it has, we compare the self-churn
of Mt. Gox as determined using the two heuristics. Figure 5c shows
that ﬁnding additional change addresses for Mt. Gox using Heuris-
tic 2 essentially doubles the estimate of churn activity of Mt. Gox
compared to using Heuristic 1 (and we observed a similar doubling
when considering the churn in bitcoin value rather than activity).
4This usage is quite common: 23% of all transactions in the past
six months are self-change transactions. For example, it is the stan-
dard option for the popular wallet service My Wallet, hosted by
blockchain.info, as well as the way the Deepbit mining pool
does its payouts.
4.5 Reﬁning Heuristic 2
Although effective, Heuristic 2 is more challenging and signiﬁ-
cantly less safe than Heuristic 1. In our ﬁrst attempt, when we used
it as deﬁned above, we identiﬁed over 4 million change addresses.
Due to our concern over its safety, we sought to approximate the
false positive rate. To do this even in the absence of signiﬁcant
ground truth data, we used the fact that we could observe the be-
havior of addresses over time: if an address and transaction met the
conditions of Deﬁnition 4.3 at one point in time (where time was
measured by block height), and then at a later time the address was
used again, we considered this a false positive. Stepping through
time in this manner allowed us to identify 555,348 false positives,
or 13% of all labeled change accounts.
We then considered ways of making the heuristic more conser-
vative. First, however, a manual inspection of some of these false
positives revealed an interesting pattern: many of them were as-
sociated with transactions to and from Satoshi Dice and other dice
games. By looking further into the payout structure of these games,
it became clear that these were not truly false positives, as when
coins are sent to Satoshi Dice, the payout is sent back to the same
address. If a user therefore spent the contents of a one-time change
address with Satoshi Dice, the address would receive another in-
put back from Satoshi Dice, which would appear to invalidate the
“one-timeness” of the address. We therefore chose to ignore this
case, believing that addresses that received later inputs solely from
Satoshi Dice could still be one-time change addresses. By doing
so the false positive rate reduces to only 1%. We next considered
waiting to label an address as a change address; i.e., waiting to see
if it received another input. Waiting a day drove the false positive
rate down to 0.28%; waiting a week drove it down to 0.17%, or
only 7,382 false positives total.
Despite all these precautions, when we clustered users using this
modiﬁed heuristic, we still ended up with a giant super-cluster con-
taining the public keys of Mt. Gox, Instawallet, BitPay, and Silk
Road, among others; in total, this super-cluster contained 1.6 mil-
lion public keys. After a manual inspection of some of the links
that led to this super-cluster, we discovered two problematic pat-
terns. First, especially within a short window of time, the same
change address was sometimes used twice. If this change address
were then used the second time with a new address, the new ad-
dress would appear to be the change address and be falsely labeled
as such. Second, certain addresses would occasionally be used as
“self-change” addresses (recall the second requirement in Deﬁni-
tion 4.3), and then later used as separate change addresses; again,
if the time they were used separately was with a new address, the
new address would be falsely labeled as the change address. This
behavior is likely due to the advanced features in some wallets,
such as My Wallet and the desktop client Armory, that allow users
to explicitly specify the change address for a transaction.
We thus further reﬁned our heuristic by ignoring transactions in-
volved with either of these types of behavior. For transactions in
which an output had already received only one input, or for transac-
tions in which an output had been previously used in a self-change
transaction, we chose to not tag anything as the change address.
Doing so, and manually removing a handful of other false posi-
tives (with no discernible pattern), we identiﬁed 3,540,831 change
addresses.
Using this reﬁned Heuristic 2 produces 3,384,179 clusters, which
we were able to again collapse slightly (using our tags) to 3,383,904
distinct clusters. Of these clusters, we were able to name 2,197
of them (accounting for over 1.8 million addresses); although this
might seem like a small fraction, recall that by participating in 344
transactions we hand-tagged only 1,070 addresses, and thus Heuris-
(a) The incoming value over time, as a percent-
age of total weekly incoming value, for each of
the major categories. The teal and yellow cate-
gories are exchanges and mining pools respec-
tively.
(b) Of transactions sent to Deepbit, the percent-
age that were sent by Deepbit itself (i.e., the
percentage that was self-churn). The transac-
tions from Deepbit account for over 80% of its
incoming transactions.
(c) The percentage of all transactions received
by Mt Gox that were sent by Mt Gox. The
teal shows self-churn identiﬁed by Heuristic 1;
the yellow shows additional churn identiﬁed by
Heuristic 2.
Figure 5: Figures illustrating the effect of self-churn on measurements, and the different ways Heuristics 1 and 2 deal with self-churn.
tic 2 allowed us to name 1,600 times more addresses than our own
manual observation provided. Furthermore, as we see in the visu-
alization of the user graph depicted in Figure 6, and will argue in
Section 5, the users we were able to name capture an important and
active slice of the Bitcoin network.
Having ﬁnally convinced ourselves of both the safety of Heuris-
tic 2, by reﬁning it substantially, and its effectiveness, as illustrated
in Figure 5c, we use Heuristic 2 exclusively for the results in the
next section.
5. SERVICE CENTRALITY
In this section, we focus on two notable parts of the user graph
seen in Figure 6: the component consisting of Satoshi Dice and the
individuals who interact with it, and the heavily connected com-
ponent consisting of most of the services we tagged. For both
of these components, we argue that the demonstrated centrality of
these services makes it difﬁcult for even highly motivated individ-
uals — e.g., thieves or others attracted to the anonymity properties
of Bitcoin — to stay completely anonymous, provided they are in-
terested in cashing out by converting to ﬁat money (or even other
virtual currencies).
5.1 The effect of popular services
One of the largest stresses on the Bitcoin system to date has been
the introduction of so-called dice games, and in particular Satoshi
Dice, a betting game introduced in late April 2012. Brieﬂy, users
may place bets with various addresses, each of which is associated
with a probability of winning (ranging from a 0.0015% chance of
winning to a 97% chance). After determining if the user has won
(using an algorithm involving the bet transaction and a random
number), Satoshi Dice then sends some multiplier of the user’s bet
back to him if he won (e.g., 1.004 times his bet if he sent to the
address with 97% winning odds), and 1 satoshi (0.00000001 BTC)
if he lost.
Within weeks of being introduced, Satoshi Dice became wildly
popular. Figure 7a shows its activity as compared to the activity of
the Deepbit mining pool, which was arguably the most active user
prior to the introduction of dice games. Satoshi Dice engages in
tens of thousands of transactions per day, or about 60% of the over-
all activity in the Bitcoin network. It has also spawned a number of
clones, such as BTC Dice, BTCLucky, Clone Dice, and DiceOn-
Crack (which, although less popular, are nevertheless quite well
connected, as seen in Figure 6).
A number of factors help explain the popularity of Satoshi Dice.
First, it allows users to place very small bets: the minimum bet for