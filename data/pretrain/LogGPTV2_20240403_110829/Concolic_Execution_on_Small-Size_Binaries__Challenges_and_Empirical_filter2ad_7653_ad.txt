(cid:4669)
(d) Parallel program.
(e) Contextual symbolic value.
(f) Symbolic jump.
(cid:139)(cid:144)(cid:150)(cid:3)(cid:143)(cid:131)(cid:139)(cid:144)(cid:4666)(cid:139)(cid:144)(cid:150)(cid:3)(cid:131)(cid:148)(cid:137)(cid:133)(cid:481)(cid:3)(cid:133)(cid:138)(cid:131)(cid:148)(cid:535)(cid:535)(cid:3)(cid:131)(cid:148)(cid:137)(cid:152)(cid:4667)(cid:4668)
(cid:136)(cid:142)(cid:145)(cid:131)(cid:150)(cid:3)(cid:154)(cid:3)(cid:3404)(cid:3)(cid:131)(cid:150)(cid:145)(cid:136) (cid:4666)(cid:131)(cid:148)(cid:137)(cid:152)(cid:4670)(cid:883)(cid:4671)(cid:4667)(cid:482)
(cid:139)(cid:136)(cid:3)(cid:4666)(cid:883)(cid:882)(cid:884)(cid:886)(cid:3)(cid:3397)(cid:3)(cid:154)(cid:3)(cid:3404)(cid:3404)(cid:3)(cid:883)(cid:882)(cid:884)(cid:886)(cid:3)(cid:428)(cid:428)(cid:3)(cid:154)(cid:3)(cid:3408)(cid:3)(cid:882)(cid:4667)(cid:4668)
(cid:5)(cid:145)(cid:143)(cid:132)(cid:4666)(cid:4667)(cid:482)
(cid:4669)
(cid:135)(cid:142)(cid:149)(cid:135)(cid:3)(cid:4668)
(cid:9)(cid:145)(cid:145)(cid:132)(cid:131)(cid:148)(cid:4666)(cid:4667)(cid:482)
(cid:4669)
(cid:4669)
(cid:883)
(cid:884)
(cid:885)
(cid:886)
(cid:887)
(cid:888)
(cid:889)
(cid:890)
(cid:139)(cid:144)(cid:150)(cid:3)(cid:143)(cid:131)(cid:139)(cid:144)(cid:4666)(cid:139)(cid:144)(cid:150)(cid:3)(cid:131)(cid:148)(cid:137)(cid:133)(cid:481)(cid:3)(cid:133)(cid:138)(cid:131)(cid:148)(cid:535)(cid:535)(cid:3)(cid:131)(cid:148)(cid:137)(cid:152)(cid:4667)(cid:4668)
(cid:139)(cid:144)(cid:150)(cid:3)(cid:139) (cid:3404)(cid:3)(cid:131)(cid:150)(cid:145)(cid:139) (cid:4666)(cid:131)(cid:148)(cid:137)(cid:152)(cid:4670)(cid:883)(cid:4671)(cid:4667)(cid:482)
(cid:139)(cid:136)(cid:3)(cid:4666)(cid:149)(cid:139)(cid:144)(cid:4666)(cid:139)(cid:535)(cid:19)(cid:12)(cid:512)(cid:883)(cid:890)(cid:882)(cid:4667)(cid:3404)(cid:3404)(cid:3)(cid:882)(cid:484)(cid:887)(cid:4667)(cid:4668)
(cid:5)(cid:145)(cid:143)(cid:132)(cid:4666)(cid:4667)(cid:482)
(cid:4669)(cid:135)(cid:142)(cid:149)(cid:135)(cid:4668)
(cid:9)(cid:145)(cid:145)(cid:132)(cid:131)(cid:148)(cid:4666)(cid:4667)(cid:482)
(cid:4669)
(cid:4669)
(cid:883)
(cid:884)
(cid:885)
(cid:886)
(cid:887)
(cid:888)
(cid:889)
(cid:890)
(cid:139)(cid:144)(cid:150)(cid:3)(cid:143)(cid:131)(cid:139)(cid:144)(cid:4666)(cid:139)(cid:144)(cid:150)(cid:3)(cid:131)(cid:148)(cid:137)(cid:133)(cid:481)(cid:3)(cid:133)(cid:138)(cid:131)(cid:148)(cid:535)(cid:535)(cid:3)(cid:131)(cid:148)(cid:137)(cid:152)(cid:4667)(cid:4668)
(cid:139)(cid:144)(cid:150)(cid:3)(cid:146)(cid:142)(cid:131)(cid:139)(cid:144)(cid:150)(cid:135)(cid:154)(cid:150)(cid:3)(cid:3404)(cid:3)(cid:131)(cid:150)(cid:145)(cid:139)(cid:4666)(cid:131)(cid:148)(cid:137)(cid:152)(cid:4670)(cid:883)(cid:4671)(cid:4667)(cid:482)
(cid:151)(cid:144)(cid:149)(cid:139)(cid:137)(cid:144)(cid:135)(cid:134)(cid:3)(cid:133)(cid:139)(cid:146)(cid:138)(cid:135)(cid:148)(cid:4670)(cid:887)(cid:4671)(cid:482)
(cid:133)(cid:139)(cid:146)(cid:138)(cid:135)(cid:148)(cid:4670)(cid:882)(cid:4671)(cid:3)(cid:3404)(cid:3)(cid:882)(cid:27)(cid:889)(cid:889)(cid:134)(cid:135)(cid:888)(cid:890)(cid:134)(cid:131)(cid:482)
(cid:133)(cid:139)(cid:146)(cid:138)(cid:135)(cid:148)(cid:4670)(cid:883)(cid:4671)(cid:3)(cid:3404)(cid:3)(cid:882)(cid:27)(cid:135)(cid:133)(cid:134)(cid:890)(cid:884)(cid:885)(cid:132)(cid:131)(cid:482)
(cid:133)(cid:139)(cid:146)(cid:138)(cid:135)(cid:148)(cid:4670)(cid:884)(cid:4671)(cid:3)(cid:3404)(cid:3)(cid:882)(cid:27)(cid:132)(cid:132)(cid:132)(cid:887)(cid:890)(cid:135)(cid:134)(cid:132)(cid:482)
(cid:133)(cid:139)(cid:146)(cid:138)(cid:135)(cid:148)(cid:4670)(cid:885)(cid:4671)(cid:3)(cid:3404)(cid:3)(cid:882)(cid:27)(cid:883)(cid:133)(cid:890)(cid:135)(cid:883)(cid:886)(cid:134)(cid:889)(cid:482)
(cid:133)(cid:139)(cid:146)(cid:138)(cid:135)(cid:148)(cid:4670)(cid:886)(cid:4671)(cid:3)(cid:3404)(cid:3)(cid:882)(cid:27)(cid:883)(cid:882)(cid:888)(cid:135)(cid:890)(cid:885)(cid:132)(cid:132)(cid:482)
(cid:891)
(cid:883)(cid:882)
(cid:883)(cid:883)
(cid:883)(cid:884)
(cid:883)(cid:885)
(cid:883)(cid:886)
(cid:139)(cid:136)(cid:4666)(cid:22)(cid:11)(cid:4)(cid:883)(cid:820)(cid:6)(cid:18)(cid:16)(cid:19)(cid:4666)(cid:146)(cid:142)(cid:131)(cid:139)(cid:144)(cid:150)(cid:135)(cid:154)(cid:150)(cid:481)(cid:133)(cid:139)(cid:146)(cid:138)(cid:135)(cid:148)(cid:4667)(cid:3404)(cid:3404)(cid:882)(cid:4667)(cid:4668)
(cid:5)(cid:145)(cid:143)(cid:132)(cid:4666)(cid:4667)(cid:482)
(cid:4669)(cid:135)(cid:142)(cid:149)(cid:135)(cid:4668)
(cid:9)(cid:145)(cid:145)(cid:132)(cid:131)(cid:148)(cid:4666)(cid:4667)(cid:482)
(cid:4669)
(cid:4669)
(g) Floating-point number.
(h) External function call.
(i) Crypto function.
Fig. 2: Exemplary programs that pose challenges for concolic execution.
A simple situation is that external functions do not return
values, or the returned values are not employed in conditions.
We demonstrate the idea with Figure 3. When commenting
the printing code in line 7, only ﬁve instructions propagate
the symbolic values (i.e., argv), and the solution can be
any integers equal to, or greater than 0x32. But when we
enable the printing code, 61 more instructions get involved,
including some conditional instructions. As a result, 0x32 no
longer qualiﬁes the constraint model. In this way, the number
of available control ﬂows for checking grows in polynomial
to the complexity of printf. If such external functions are
not our interests, we may ignore their extra constraints in
this case. However, it would be incorrect if external functions
return values, and the values are used in conditions. Figure 2(h)
demonstrates another example, where the sine of a symbolic
value is calculated via an external function call (i.e., sin),
and the result is used to determine whether a bomb should be
triggered. In this situation, the conditions within the functions
should not be ignored. Otherwise, it is based on an error
assumption that a new test case generated under the new
constraint model can always trigger the same control ﬂow
within the external function. If a program extensively uses
such external functions, scalability issues would occur.
2) Crypto Function: Crypto functions (e.g., hash function)
are very complex. When employing crypto functions in
a program, the number of conditional branches along the
instruction trace of a concrete execution can be very large.
More importantly, secure crypto functions are resistance
to cryptanalysis, which implies the hardness in reverse
(cid:139)(cid:144)(cid:150)(cid:3)(cid:143)(cid:131)(cid:139)(cid:144)(cid:4666)(cid:139)(cid:144)(cid:150)(cid:3)(cid:131)(cid:148)(cid:137)(cid:133)(cid:481)(cid:3)(cid:133)(cid:138)(cid:131)(cid:148)(cid:535)(cid:535)(cid:3)(cid:131)(cid:148)(cid:137)(cid:152)(cid:4667)(cid:4668)
(cid:139)(cid:136)(cid:3)(cid:4666)(cid:131)(cid:148)(cid:137)(cid:152)(cid:4670)(cid:883)(cid:4671)(cid:4670)(cid:882)(cid:4671)(cid:3)(cid:3408)(cid:3)(cid:821)(cid:883)(cid:821)(cid:4667)(cid:4668)
(cid:146)(cid:148)(cid:139)(cid:144)(cid:150)(cid:136)(cid:4666)(cid:822)(cid:936)(cid:149)(cid:819)(cid:144)(cid:822)(cid:481)(cid:3)(cid:822)(cid:155)(cid:135)(cid:149)(cid:822)(cid:4667)(cid:482)
(cid:4669)(cid:3)(cid:135)(cid:142)(cid:149)(cid:135)(cid:4668)
(cid:22)(cid:145)(cid:151)(cid:148)(cid:133)(cid:135)(cid:3)(cid:6)(cid:145)(cid:134)(cid:135)(cid:483)
(cid:883)
(cid:884)
(cid:885)
(cid:886)
(cid:887)
(cid:888)
(cid:889)
(cid:890)
(cid:891)
(cid:4669)
(cid:146)(cid:148)(cid:139)(cid:144)(cid:150)(cid:136)(cid:4666)(cid:822)(cid:936)(cid:149)(cid:819)(cid:144)(cid:822)(cid:481)(cid:3)(cid:822)(cid:144)(cid:145)(cid:822)(cid:4667)(cid:482)
(cid:4669)
(cid:512)(cid:512)(cid:146)(cid:148)(cid:139)(cid:144)(cid:150)(cid:136)(cid:4666)(cid:822)(cid:936)(cid:134)(cid:819)(cid:144)(cid:822)(cid:481)(cid:3)(cid:131)(cid:148)(cid:137)(cid:152)(cid:4670)(cid:883)(cid:4671)(cid:4670)(cid:882)(cid:4671)(cid:4667)(cid:482)
(cid:148)(cid:135)(cid:150)(cid:151)(cid:148)(cid:144)(cid:3)(cid:882)(cid:482)
(cid:23)(cid:131)(cid:139)(cid:144)(cid:150)(cid:135)(cid:134)(cid:3)(cid:139)(cid:144)(cid:149)(cid:150)(cid:148)(cid:151)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:149)(cid:3)(cid:153)(cid:139)(cid:150)(cid:138)(cid:145)(cid:151)(cid:150)(cid:3)(cid:494)(cid:146)(cid:148)(cid:139)(cid:144)(cid:150)(cid:136)(cid:495)(cid:483)
(cid:883)
(cid:884)
(cid:885)
(cid:886)
(cid:887)
(cid:4666)(cid:936)(cid:135)(cid:131)(cid:154)(cid:4667)(cid:481)(cid:936)(cid:135)(cid:131)(cid:154)
(cid:836)(cid:882)(cid:154)(cid:885)(cid:883)(cid:481)(cid:936)(cid:135)(cid:131)(cid:154)
(cid:882)(cid:154)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:890)(cid:882)(cid:886)(cid:890)(cid:886)(cid:888)(cid:885)
(cid:836)(cid:882)(cid:154)(cid:886)(cid:133)(cid:481)(cid:936)(cid:135)(cid:149)(cid:146)
(cid:882)(cid:154)(cid:890)(cid:882)(cid:886)(cid:890)(cid:887)(cid:883)(cid:882)(cid:481)(cid:936)(cid:135)(cid:131)(cid:154)(cid:822)
(cid:143)(cid:145)(cid:152)(cid:149)(cid:132)(cid:142)
(cid:133)(cid:143)(cid:146)
(cid:140)(cid:142)(cid:135)
(cid:149)(cid:151)(cid:132)
(cid:142)(cid:135)(cid:131)
(cid:4666)(cid:936)(cid:135)(cid:131)(cid:154)(cid:4667)(cid:481)(cid:936)(cid:135)(cid:131)(cid:154)
(cid:836)(cid:882)(cid:154)(cid:885)(cid:883)(cid:481)(cid:936)(cid:135)(cid:131)(cid:154)
(cid:882)(cid:154)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:890)(cid:882)(cid:886)(cid:890)(cid:886)(cid:888)(cid:885)
(cid:882)(cid:154)(cid:890)(cid:882)(cid:886)(cid:890)(cid:887)(cid:885)(cid:882)(cid:481)(cid:936)(cid:135)(cid:131)(cid:154)
(cid:836)(cid:882)(cid:154)(cid:886)(cid:133)(cid:481)(cid:936)(cid:135)(cid:149)(cid:146)
(cid:4666)(cid:936)(cid:135)(cid:133)(cid:154)(cid:4667)(cid:481)(cid:936)(cid:135)(cid:133)(cid:154)
(cid:23)(cid:131)(cid:139)(cid:144)(cid:150)(cid:135)(cid:134)(cid:3)(cid:139)(cid:144)(cid:149)(cid:150)(cid:148)(cid:151)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:149)(cid:3)(cid:153)(cid:139)(cid:150)(cid:138)(cid:3)(cid:494)(cid:146)(cid:148)(cid:139)(cid:144)(cid:150)(cid:136)(cid:495)(cid:483)
(cid:883)
(cid:884)
(cid:885)
(cid:886)
(cid:887)
(cid:888)
(cid:484)(cid:484)
(cid:887)(cid:890)
(cid:887)(cid:891)
(cid:888)(cid:882)
(cid:888)(cid:883)
(cid:888)(cid:884)
(cid:888)(cid:885)
(cid:888)(cid:886)
(cid:888)(cid:887)
(cid:888)(cid:888)
(cid:143)(cid:145)(cid:152)(cid:149)(cid:132)(cid:142)
(cid:133)(cid:143)(cid:146)
(cid:140)(cid:142)(cid:135)
(cid:142)(cid:135)(cid:131)
(cid:149)(cid:151)(cid:132)
(cid:143)(cid:145)(cid:152)(cid:149)(cid:132)(cid:142)
(cid:485)
(cid:140)(cid:135)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)
(cid:133)(cid:143)(cid:146)(cid:142)
(cid:133)(cid:143)(cid:146)(cid:142)
(cid:140)(cid:135)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)
(cid:133)(cid:143)(cid:146)(cid:142)
(cid:143)(cid:145)(cid:152)(cid:149)(cid:132)(cid:142)
(cid:143)(cid:145)(cid:152)
(cid:143)(cid:145)(cid:152)
(cid:146)(cid:151)(cid:149)(cid:138)(cid:3)(cid:3)(cid:3)
(cid:882)(cid:154)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:134)(cid:133)(cid:890)(cid:132)(cid:886)(cid:883)(cid:886)(cid:889)
(cid:836)(cid:882)(cid:154)(cid:882)(cid:481)(cid:486)(cid:882)(cid:154)(cid:886)(cid:132)(cid:882)(cid:4666)(cid:936)(cid:135)(cid:132)(cid:146)(cid:4667)
(cid:836)(cid:882)(cid:154)(cid:882)(cid:481)(cid:486)(cid:882)(cid:154)(cid:886)(cid:132)(cid:886)(cid:4666)(cid:936)(cid:135)(cid:132)(cid:146)(cid:4667)
(cid:882)(cid:154)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:882)(cid:134)(cid:133)(cid:890)(cid:132)(cid:883)(cid:132)(cid:884)(cid:890)
(cid:836)(cid:882)(cid:154)(cid:882)(cid:481)(cid:486)(cid:882)(cid:154)(cid:886)(cid:131)(cid:133)(cid:4666)(cid:936)(cid:135)(cid:132)(cid:146)(cid:4667)
(cid:882)(cid:154)(cid:886)(cid:888)(cid:4666)(cid:936)(cid:135)(cid:149)(cid:139)(cid:4667)(cid:481)(cid:936)(cid:135)(cid:131)(cid:154)
(cid:486)(cid:882)(cid:154)(cid:886)(cid:889)(cid:886)(cid:4666)(cid:936)(cid:135)(cid:132)(cid:146)(cid:4667)(cid:481)(cid:936)(cid:135)(cid:133)(cid:154)
(cid:936)(cid:135)(cid:149)(cid:139)(cid:481)(cid:4666)(cid:936)(cid:135)(cid:149)(cid:146)(cid:4667)
(cid:936)(cid:135)(cid:134)(cid:139)
(cid:6)(cid:145)(cid:144)(cid:149)(cid:150)(cid:148)(cid:131)(cid:139)(cid:144)(cid:150)(cid:3)(cid:149)(cid:145)(cid:142)(cid:152)(cid:139)(cid:144)(cid:137)(cid:3)(cid:148)(cid:135)(cid:149)(cid:151)(cid:142)(cid:150)(cid:3)(cid:153)(cid:139)(cid:150)(cid:138)(cid:145)(cid:151)(cid:150)(cid:3)(cid:494)(cid:146)(cid:148)(cid:139)(cid:144)(cid:150)(cid:136)(cid:495)(cid:483)
(cid:4)(cid:22)(cid:22)(cid:8)(cid:21)(cid:23)(cid:4666)(cid:3)(cid:149)(cid:155)(cid:143)(cid:132)(cid:820)(cid:883)(cid:820)(cid:883)(cid:888)(cid:888)(cid:3)(cid:3404)(cid:3)(cid:882)(cid:154)(cid:885)(cid:884)(cid:3)(cid:4667)(cid:482)
(cid:6)(cid:145)(cid:144)(cid:149)(cid:150)(cid:148)(cid:131)(cid:139)(cid:144)(cid:150)(cid:3)(cid:149)(cid:145)(cid:142)(cid:152)(cid:139)(cid:144)(cid:137)(cid:3)(cid:148)(cid:135)(cid:149)(cid:151)(cid:142)(cid:150)(cid:3)(cid:153)(cid:139)(cid:150)(cid:138)(cid:3)(cid:494)(cid:146)(cid:148)(cid:139)(cid:144)(cid:150)(cid:136)(cid:495)(cid:483)
(cid:4)(cid:22)(cid:22)(cid:8)(cid:21)(cid:23)(cid:4666)(cid:3)(cid:149)(cid:155)(cid:143)(cid:132)(cid:820)(cid:883)(cid:820)(cid:883)(cid:888)(cid:888)(cid:3)(cid:3404)(cid:3)(cid:882)(cid:154)(cid:885)(cid:889)(cid:3)(cid:4667)(cid:482)
Fig. 3: An example of the extra constraints incurred by external
function calls. We initiate argv[1] to 7 and then concolic
executing the program with BAP.
computation. For a hash function, we cannot compute the
plaintext of a hash value. For a symmetric encryption function,
we cannot compute the key when given the pairs of plaintext
and ciphertext.
Figure 2(i) demonstrates a code snippet which employs
SHA1 function. If the hash result of the symbolic value
equivalents to a predeﬁned value,
the bomb would be
triggered. However,
is difﬁcult since SHA1 cannot be
reversely calculated.
it
Finally, we do not intend to propose a complete list of all
challenges. Loop is an exception which we haven’t discussed
185
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:37 UTC from IEEE Xplore.  Restrictions apply. 
because it has already gained much attention. Users may
extend the list with new challenges following our approach.
V. EVALUATION
To show that the proposed challenges are non-trivial for
real-world concolic execution tools, we design a set of
small-size programs which illustrate the challenges, and then
evaluate them against three popular concolic execution tools.
Our dataset and testing scripts are available online1 to facilitate
users to repeat our experiment.
A. Dataset
The overall idea is to test whether a code block can be
explored by concolic execution tools. In our dataset, each
program has been placed with a logic bomb. To trigger the
bomb, a problem which illustrates a challenge has to be solved.
If the bomb can be triggered by a correct test case, it implies
the tool has successfully addressed the problem or vice versa.
Our dataset includes over 20 programs for X86 64, which
cover all the discussed challenges. For each challenge, we
implement several programs. Either each program involves a
unique technical problem (e.g., covert propagation via ﬁle),