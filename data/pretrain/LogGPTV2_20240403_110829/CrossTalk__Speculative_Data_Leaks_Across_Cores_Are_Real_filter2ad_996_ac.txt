Processor Info (0x1)
DRBG Output
ENRNG Output
Address Not Cached
Platform ID (0x17)
Platform Info (0xCE)
104
120
3677
3694
3694
83
16
16
4
104
122
134
163
2939
2938
2942
89
16
16
4
127
155
5 / 6
2 / 3
297 / 304
303 / 311
302 / 309
1 / 1
1 / 1
1 / 1
1 / 0
1 / 2
1 / 2
4
3
30
30
30
0
1
1
1
3
3
0
0
28
28
28
0
0
0
0
0
0
4
3
2
2
2
0
1
1
0
2
2
Retired
Insts.
Loads/-
Stores
1 / 0
1 / 0
1 / 0
1 / 0
1 / 0
1 / 0
1 / 0
1 / 0
0 / 1
1 / 0
1 / 0
[RDRAND and RDSEED return random numbers from an Intel on-chip hardware random number generator, CPUID allows software to discover details of the
processor, while RDMSR is used to read the content of model-speciﬁc registers.]
Consider the CPUID instruction being used to read the CPU
brand string – remember,
the behavior of this instruction
depends on the requested (sub)leaf. Speciﬁcally, we read the
ﬁrst brand string leaf on our i7-7700K, which is ‘Intel(R)
Core(TM’. First, we use MDS to leak load port contents from
a sibling thread, by performing a single vector load which
span a page boundary, where one or both of the pages are
invalid, and using FLUSH + RELOAD to obtain the value read
during transient execution. If both pages are invalid, we leak
the values ‘Inte’ and ‘ Cor’; if only the ﬁrst page is invalid,
then we leak the values ‘l(R)’ and ‘e(TM’. These appear to
correspond to the values on the ﬁrst and second load ports,
based on other experiments; in any case, it seems that the
four offcore requests correspond to these four read values.
Alternatively, we can use MDS to leak the contents of
the ﬁll buffer. We saw the same results using both MFBDS
and TAA variants; example code using TAA can be found
in Appendix A. Here, we consistently leak the entire value,
as opposed to the individual components. This implies that
not only do these loads go via the ﬁll buffer, but also that a
single ﬁll buffer is used for the entire offcore request. Since
the ﬁll buffer is 64 bytes, we can also leak data beyond the
ﬁrst 16 bytes of the buffer. This produces inconsistent results;
sometimes the next bytes of the buffer contain the remainder
of the brand string, but it can also contain other values.
To explore this, we run the following experiment: on one
core, we execute CPUID with the leaf that reads the ﬁrst part of
the brand string. As we saw already, this uses the ﬁrst 16 bytes
of the ﬁll buffer. On another core, we use CPUID to read the
second part of the brand string, which turns out to write to the
next 16 bytes of the ﬁll buffer. Interestingly, using MDS we
observed the result of the instruction executed on the other
core in the line ﬁll buffer of the current core. Speciﬁcally,
we saw the ﬁrst 32 bytes of the CPUID brand string when
leaking the contents of the ﬁll buffer – but not the remaining
bytes (since we did not request the third brand string leaf).
Therefore, we are not just leaking the entire brand string.
This experiment implies that that we are leaking contents
from an offcore global staging buffer; our thoughts about the
nature of this buffer can be found in Appendix VIII. After
reporting our ﬁndings to Intel, they conﬁrmed that a global
staging buffer is responsible for our results.
We used the insight that we can leak the contents of this
staging buffer using CPUID as a starting point for building the
second stage of CROSSTALK, which automatically discovers
which code sequences (instructions together with the necessary
context, such as register initialization) write to which offsets
within this buffer.
Fig. 3: Microcode reads cause data to be read from the DRNG
using per-core ﬁll buffers, via a shared staging buffer.
D. Proﬁling The Staging Buffer
In the second stage of CROSSTALK, we aim to automatically
analyze how the previously-discovered code sequences that
send offcore memory requests interact with the globally-
shared staging buffer. For each sequence, we want to know
which values the CPU stores in the staging buffer, which
offsets they use, and to ﬁnd any additional staging buffers if
present. Figure 4 shows the design of CROSSTALK’s second
stage. On one physical core, we run the target instructions
that potentially interact with the staging buffer. In the other
physical core, we try to observe whether the contents of the
staging buffer changes due to the execution of the target
instructions. To make sure that we observe the contents of
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:49 UTC from IEEE Xplore.  Restrictions apply. 
1857
Fig. 4: Staging buffer analysis process of the second stage of CROSSTALK.
the staging buffer, we need to ensure that we continuously
pull the data from the staging buffer. We use what we call
masking primitives for this purpose.
The masking primitives overwrite a portion of the staging
buffer while bringing in the data from the rest of the buffer.
We refer to the region of the staging buffer overwritten by
each masking primitive as its “mask”. To obtain the entire
contents of the staging buffer, we need at least two masking
primitives with different (non-overlapping) masks. The ﬁrst
primitive allows us to obtain the data which is not overwritten
by the mask, and the second primitive allows us to obtain the
remaining data. The obvious candidates for masking primitives
are the various leaves of the CPUID instructions, which provide
primitives meeting these requirements.
To perform our proﬁling, we need masking primitives which
cover all offsets in the buffer, and which write a constant
(or predictable) value to these offsets. Once we have such
primitives, we can proﬁle code sequences by comparing the
contents of the staging buffer to the ‘expected’ data at each
offset. If we see a signiﬁcant number of unexpected values
at any given offset, we record that the code sequence being
proﬁled modiﬁes that offset of the staging buffer.
Since this is only possible if we are sure that each sequence
is not overwriting the contents of the buffer with the same
value written by our masking primitives, we need two masking
primitives for each byte, with different values. While proﬁling
the buffer, we search for suitable additional masking primitives
which write known values to the staging buffer, gaining access
to additional primitives as we proﬁle.
An example of this process can be seen in Figure 5. Here,
the masking primitives are three calls to CPUID, reading the
three leaves corresponding to the brand string. These calls
overwrite the ﬁrst 48 bytes of the staging buffer with known
data. After running a target instruction sequence containing
RDRAND, some of the offsets in the staging buffer are over-
written with new data; our staging buffer analysis records that
RDRAND modiﬁes these offsets. We call these sequences ‘leak
primitives’, since when executed, they potentially leak the data
to an attacker who can run code on another core.
Some leak primitives will write constant values, allowing us
to also record the data written by that code; for example, the
CPUID brand string leaves always write the brand string itself.
Other instructions, such as RDRAND, do not write predictable
data, so we mark the values as unknown. If necessary, we can
also use these as masking primitives, by leaking the value they
write to the staging buffer before every attempt to proﬁle a
sequence. We can also build our own masks by using WRMSR
to modify the value of MSRs and then reading them back;
for example, RDMSR 0x395 can be used as a mask with an
arbitrary 48-bit value.
Representative results obtained from CROSSTALK’s second
stage can be found in Table III. We found various leak
primitives including instructions that interact with Machine-
Speciﬁc Registers (MSRs), and instructions that are used for
hardware random number generation. Although disclosure of
the majority of this information does not seem to present
a security threat, the RDRAND and RDSEED instructions are
more of a concern. In Section V, we discuss how we can
build practical real-world exploits attacking these instructions.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:49 UTC from IEEE Xplore.  Restrictions apply. 
1858
Fig. 5: Proﬁling a target instruction. Step 1: Prime the staging buffer by executing leak primitives which write known data to
known offsets within the buffer. Step 2: Execute the target instruction (here, RDRAND). Step 3: Observe any overwritten bytes
(by comparing to step 1).
TABLE III: Examples of primitives we found to be using the staging buffer.
Instruction
Operand(s)
Description
Offcore
Responses
Staging Buffer
Offsets
32–39
0–7
0–15
16–31
32–47
0–7, 56–63
0–7, 56–63
0–7, 56–63
0–7
16–23, 48–55
24–31
16–23
Leaked Data from Staging Buffer
Random Number
Random Number
Brand String part 1
Brand String part 2
Brand String part 3
Unknown (includes raw MSR value)
Unknown
Unknown
Unknown
Unknown
Unknown
Raw MSR value
Raw MSR value
—
—
0x80000002
0x80000003
0x80000004
0x6
DRBG Output
ENRNG Output
Brand string 1
Brand string 2
Brand string 3
RDRAND
RDSEED
CPUID
CPUID
CPUID
CPUID
CPUID
CPUID
CPUID
RDMSR
RDMSR
RDMSR
RDMSR
Offcore responses are ‘other’ except: ‡28 are strm st
Intel SGX Enumeration
Intel SGX Enumeration
Intel SGX Enumeration
Bootguard Hash 1
Bootguard Status
Platform Information
0x12 (Subleaf 0)
0x12 (Subleaf 1)
0x12 (Subleaf 2)
0x20
0x13A
0xCE
0x17
Platform ID
1
1
4
4
4
3
30‡
30‡
30‡
1
3
2
2
Thermal/Power Management
0–7, 17–28, 48–55
V. EXPLOITATION
The disclosure capabilities we identiﬁed can be used to
observe the contents of the globally-shared staging buffer in
combination with MDS attacks, allowing code running on one
core to read buffer data belonging to a different core. These
attacks can be performed on any core of a system and hence
any mitigation isolating security domains on a per-core basis
is ineffective. Given their non-trivial security impact, we focus
our exploitation on the RDRAND and RDSEED instructions.
First, we discuss details and challenges involved in per-
forming attacks based on the relevant instructions. Then, we
demonstrate such attacks are realistic with an exploit that can
obtain private keys by observing the staging buffer while an
SGX enclave performs cryptographic operations.
A. Available Primitives
Since we can sample the staging buffer contents at an
arbitrary time, we can craft a probing primitive to detect when
instructions touching the buffer have been used. We do this by
sampling the buffer at regular intervals with a leak primitive,
and then comparing the data at a speciﬁc offset
to the
previously-seen values. For instance, we can determine when
the Linux CRNG is being used (such as ﬁlling AT RANDOM
when processes are created), since the _extract_crng
function always mixes new RDRAND output into the state
before outputting data.
We can also craft an information disclosure primitive which
leaks the contents of the staging buffer, and discloses security-
sensitive data such as the actual RDRAND output. As we
shall see, this example in particular has serious consequences
for code performing cryptographic operations. To do so, we
can use any of the leak primitives we have identiﬁed that
transiently sample data from the staging buffer, with some
environment-speciﬁc constraints.
B. Constraints
In practice, not all of the leak primitives are available to
attackers; we consider some typical limitations in different
environments, and how they can be avoided. Our attacks can
be mitigated in some environments due to such restrictions;
we discuss this in Section VII.
Userspace: The CPUID, RDRAND and RDSEED instructions