1614(a) Normal Nginx
(b) Normal OpenSSH
(c) SeCage Nginx
(d) SeCage OpenSSH
Figure 8: Heap memory layout for Nginx and
OpenSSH server processes. (Green blocks are mem-
ory in use, black areas are unused and the red bars
are targeted secrets found in the memory.)
Security protection for Nginx+OpenSSL. Before ap-
plying SeCage to Nginx server, we conduct HeartBleed at-
tacks on it, it is relatively simple to retrieve the RSA pri-
vate keys, we get private keys after sending 69 HeartBleed
requests. After decomposing the OpenSSL and deploying it
to SeCage framework, we mount the attack again. At this
time, no fragment of private keys is leaked no matter how
many HeartBleed requests are sent by the attacker.
Security protection for OpenSSH+OpenSSL. From
ﬁgure 8 (b), we can see that 3 fragments of private keys ex-
ist in the OpenSSH process’s dumped memory, which are
exactly what the kernel rootkit can read and expose. While
leveraging the SeCage, no one exists in the malicious rootkit’s
view, which means no secret will be leaked.
Security protection for CryptoLoop. AES crypto-
graphic keys are stored in kernel memory space, any Out-
of-bound read kernel memory disclosure vulnerabilities (e.g.,
CVE-2013-5666) and rootkit can read arbitrary memory from
kernel space, leading to kernel secrets disclosure. With the
Crypto API being enhanced by SeCage, no cryptographic
key is stored in the normal kernel memory, thus no secrets
can be leaked during CryptoLoop execution.
6.2 Security Analysis
Reduced attack surfaces. The attack surfaces of SeCage
are quite related to the code size of the sensitive functions.
The larger code base the secret compartment contains, the
more vulnerabilities may be exploited by the attackers. Af-
ter applying the proposed dynamic analysis, we get only
1350 LoCs for OpenSSL case, and 430 LoCs for CryptoLoop
case. What is more, SeCage adds some restrictions for the
sensitive functions, e.g., there should be no printf-like func-
tions thus no format attack can be conducted, etc. There-
fore, it is reasonable to assume no vulnerabilities in the code
of secret compartment.
Iago attack and ROP attack. Iago attack [15] presents
a complete attack example that the malicious kernel can
cause s server in OpenSSL to disclose its secret key by ma-
nipulating the return values of brk and mmap2 system calls,
and conduct a return-oriented programming (ROP) attack
to write the contents of the secret key to stderr. With the
protection by SeCage, if there is any system call invocation
in the secret compartment, the return value from the spring-
board will be checked to avoid the invalid one.
Meanwhile, trampoline code is marked as read-only thus
not injectable thanks to the protection from EPT. On the
other hand, there is only very small code base in sensi-
tive functions for an attacker to exploit ROP attack. The
SeCage’s mechanism ensures that the trampoline can only
enter EPT-S through designated function entries. This means
gadgets can only be at the function granularity and thus
attackers may not have suﬃcient gadgets, which further re-
duces the probability of ROP attacks. What is more, as
the execution in the secret compartment will use the secure
stack, an adversary has no chance to fake a stack on behalf
of the secret compartment. This further nulliﬁes the chance
of performing an ROP attack. If an ROP attack succeeds in
the main compartment, the payload still cannot access the
secrets because of the compartment isolation.
Rollback attack. An attacker may collude with a ma-
licious OS to rollback the password states using tricks like
memory snapshot rollback, and launch a brute-force attack
to guess the login password. SeCage is resistant to such an
attack, due to the fact that the secret states are maintained
by the hypervisor rather than the OS, it can refuse to roll-
back secrets to old states by well-designed protocols.
Coppersmith’s attack. According to [4], when process-
ing requests in Nginx, some fragments of private keys may
exist in memory. This makes it vulnerable to Coppersmith’s
Attack [2], a complex mathematical approach that is used
to split N into p and q with the knowledge of just part of
a prime number. SeCage is designed to prevent such at-
tacks since fragments of secrets can only be copied to secure
heap and stack, and no fragment copies can be leaked to the
memory of the main compartment.
Guest page mapping attack. A malicious guest OS
can conduct attacks by changing the guest page mapping
of the secure heap and the stack pages after SeCage initial-
ization. Hence, during invoking trampoline and copying se-
crets, secrets may be leaked to unprotected memory space.
SeCage prevents such attacks by tracking the page tables
modiﬁcation of these protected data pages. According to
section 7, only 3 pages are required to protect, and at most
12 PTEs need to be tracked.
VMFUNC faking attack. Another attack the mali-
cious OS can conduct is to fake the EPT-S entry point by
invoking self-prepared VMFUNC instructions. However, in
EPT-S , the executable memory is predeﬁned and ﬁxed, the
memory pages which contain the faked VMFUNC instruc-
tions are non-executable when switching to the EPT-S con-
text, thus the execution will be trapped into the hypervisor.
A more sophisticated attack is to carefully construct a guest
memory mapping that maps GVA to GPA, so that the GVA
of the memory page is the prior one page before the sensi-
tive functions pages, and put the VMFUNC instruction into
the last bytes of this page. Hence, when this VMFUNC is
invoked, the next program counter locates in the sensitive
functions, which is executable. This complicated attack can
bypass the restriction that the calls to the secret compart-
ment can only be done with several ﬁxed entry gates in the
trampoline. Nevertheless, it just adds a few more harmless
entry gates (the ﬁrst byte of the sensitive functions pages).
To further eliminate such attack surfaces, we can adapt the
approach used by [48] to putting a single byte INT3 instruc-
tion at the beginning of each page of sensitive functions, to
prevent this carefully constructed VMFUNC faking attack.
1615)
c
e
s
/
#
q
e
r
(
t
u
p
h
g
u
o
r
h
T
original-throughput
secage-throughput
overhead
 10000
 8000
 6000
 4000
 2000
 0
)
%
(
d
a
e
h
r
e
v
O
 10
 8
 6
 4
 2
 0
1
0
5
0
0-5
0
0-5
1
0
1
5
0
0-2
0
0
0-2
0
5
0
0-5
0
0
0-5
0
0
 1.2
 1
 0.8
 0.6
 0.4
)
q
e
r
/
s
m
(
y
c
n
e
t
a
L
original-latency
secage-latency
overhead
)
%
(
d
a
e
h
r
e
v
O
 4
 3
 2
 1
 0
1
0
5
0
0-2
0
0
0-2
0
1
0
5
0
0-5
0
0
0-5
0
 0.2
 0
1
0
5
0
0-5
0
0-5
[KeepAlive Req #]-[File Size (KB)]
[KeepAlive Req #]-[File Size (KB)]
(a) Throughput
(b) Latency
Figure 9: Nginx performance degradation
7. PERFORMANCE EVALUATION
To evaluate the eﬃciency of SeCage, we measure the per-
formance slowdown for applications under protection by SeCage
and collect some statistics regarding the performance and
resource consumption to conduct a detailed analysis.
All experiments are done on a machine with 4 Intel Xeon
cores (8 hardware threads using hyper-threading) running
at 3.4 GHz and with 32 GB memory. The host kernel for
KVM is Linux 3.13.7 and the guest kernel is Linux 3.16.1.
Each guest VM is conﬁgured with 2 virtual cores and 4 GB
memory.
7.1 Application Benchmarks
Nginx throughput and latency. Figure 9 shows the
performance degradation of Nginx server with SeCage pro-
tection. We use the ab benchmark to simulate 20 concurrent
clients constantly sending N KeepAlive 6 requests, each re-
quest asks the server to transfer X bytes ﬁle. To decide what
are the common values N and X should be, we scan through
the Facebook pages, and ﬁnd that within one session, there
are normally hundreds to thousands of requests, each one
ranges from 1 to 100 KB. Since the private keys are only
used during connection establishment, the overhead can be
largely amortized as the number of KeepAlive requests and
the size of ﬁle grow. When N is 1000 and X is 50K, SeCage
only adds about 0.002 ms latency for each request in aver-
age, and the throughput overhead is only about 1.8%. We
also run the SeCage in a problematic conﬁguration where all
requests require new TLS establishment with 0.5KB small
ﬁle, to test the performance slowdown in the worst case.
The result shows that the overhead is about 40%. While in
real-world scenarios, most HTTP-connections are persistent
and keep-alive headers are used [5].
OpenSSH latency. To evaluate the slowdown of OpenSSH
operation, we run a script to constantly use SSH to login the
server and execute common Linux commands such as ls and
netstat, and utilize time command to show the latency. We
ﬁnd that on average, SeCage introduces about 6 ms (%3
overhead) for each request.
CryptoLoop I/O bandwidth. We evaluate disk I/O
throughput when using CryptoLoop encrypted ﬁle system.
We leverage ﬁo benchmark with sequential read/write con-
ﬁgurations to show the overhead introduced by SeCage. We
ﬁnd that the average slowdown of I/O operations is about
4% when using SeCage protection.
6KeepAlive header asks the server to not shut down the
connection after each request is done.
7.2 Performance Analysis
EPTP switching times and cost. The overhead in-
troduced by SeCage is mainly from context switches be-
tween EPT-N and EPT-S . We instrument the application
to log the times of trampoline invocation for diﬀerent oper-
ations; each trampline invocation introduces 2 vmfunc calls
(section 3.2). Table 3 shows the statistics after the Nginx
server processed 1000 requests, OpenSSH handled one login
request, and CryptoLoop operated 10M I/O writes. N→S
means the number of trampoline calls from the main to the
secret compartment, and S→N means that from the secret
to the main compartment. We can see that there are limited
numbers of context switches compared to the long execution
path. We then do a study of how much time each vmfunc
call takes, and compare it with normal function call, syscall
and vmcall (hypercall). As shown in Table 4, the cost of a
vmfunc is similar with a syscall, while a vmcall takes much
longer time. Thus, SeCage provides the hypervisor-level pro-
tection at the cost of system calls.
Table 3: Statistics of trampoline invocation times
Nginx/1000 req OpenSSH/login CryptoLoop/10M
N→S
64693
S→N
8550
S→N
40960
S→N
11658
N→S
20480
N→S
98230
Table 4: Overhead for call, syscall, vmcall and vm-
func
call
3.37 ns
syscall
64.54 ns
vmcall
544.4 ns
vmfunc
63.22 ns
Memory consumption. Since SeCage needs to setup
a shadow EPT-S for each protected secret compartment,
we calculate how much additional memory is needed.
It
depends on how many sensitive functions and trampoline
code are extracted, and how much secure heap and stack is
reserved. The results are shown in Table 5, in the OpenSSL
case, we extracted about 20 sensitive functions, and declare
the corresponding 41 trampoline functions. For the secret
memory, we only reserve 1 page for the secure heap and 2
pages for stack. Thus the total amount of shadow memory
is only 40KB. For the CryptoLoop case, since it is much
simpler than OpenSSL, it only takes about 7 pages (28KB).
Table 5: Statistics regarding memory consumption
total
sec-stack
sec-heap
Nginx
OpenSSH
CryptoLoop
{fs}
20 (5)
21 (5)
12 (3)
{ft}
41 (2)
41 (2)
14 (1)
1
1
1
2
2