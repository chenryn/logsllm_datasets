title:Network dialog minimization and network dialog diffing: two novel
primitives for network security applications
author:M. Zubair Rafique and
Juan Caballero and
Christophe Huygens and
Wouter Joosen
Network Dialog Minimization and Network Dialog Difﬁng:
Two Novel Primitives for Network Security Applications
M. Zubair Raﬁque
iMinds-DistriNet, KU Leuven
3001 Leuven, Belgium
zubair.raﬁPI:EMAIL
Christophe Huygens
iMinds-DistriNet, KU Leuven
3001 Leuven, Belgium
PI:EMAIL
Juan Caballero
IMDEA Software Institute
Madrid, Spain
PI:EMAIL
Wouter Joosen
iMinds-DistriNet, KU Leuven
3001 Leuven, Belgium
PI:EMAIL
ABSTRACT
1.
INTRODUCTION
In this work, we present two fundamental primitives for network
security: network dialog minimization and network dialog difﬁng.
Network dialog minimization (NDM) simpliﬁes an original dialog
with respect to a goal, so that the minimized dialog when replayed
still achieves the goal, but requires minimal network communica-
tion, achieving signiﬁcant time and bandwidth savings. We present
network delta debugging, the ﬁrst technique to solve NDM. Net-
work dialog difﬁng compares two dialogs, aligns them, and identi-
ﬁes their common and different parts. We propose a novel dialog
difﬁng technique that aligns two dialogs by ﬁnding a mapping that
maximizes similarity.
We have applied our techniques to 5 applications. We apply
our dialog minimization approach for: building drive-by download
milkers for 9 exploit kits, integrating them in a infrastructure that
has collected over 14,000 malware samples running from a single
machine; efﬁciently measuring the percentage of popular sites that
allow cookie replay, ﬁnding that 31% do not destroy the server-side
state when a user logs out and that 17% provide cookies that live
over a month; simplifying a cumbersome user interface, saving our
institution 3 hours of time per year and employee; and ﬁnding a
new vulnerability in a SIP server. We apply our dialog difﬁng ap-
proach for clustering benign (F-Measure = 100%) and malicious
(F-Measure = 87.6%) dialogs.
Categories and Subject Descriptors
C.2.2 [Computer Systems Organization]: Network Protocols;
D.4.6 [Operating Systems]: Security and Protection
General Terms
Security
Keywords
Network dialog minimization, network dialog difﬁng, network se-
curity, network delta debugging.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’14, December 08 - 12 2014, New Orleans, LA, USA.
Copyright 2014 ACM 978-1-4503-3005-3/14/12
http://dx.doi.org/10.1145/2664243.2664261 ...$15.00.
A network dialog comprises the exchange of network trafﬁc be-
tween peers to achieve a goal, which can be benign such as visiting
your favorite website or downloading a ﬁle from a remote server,
but also malicious such as exploiting a networked application. For
example, a simple goal like visiting the root page of Amazon.com
produces a complex network dialog that involves multiple remote
servers and requires establishing as many as 41 TCP connections
and exchanging up to 330 HTTP messages, used among others to
download the HTML content, ﬁgures from CDNs, perform analyt-
ics, and display advertisements from ad networks.
Two fundamental primitives for network security are replaying
a network dialog previously captured in a network trace and com-
paring network dialogs. Dialog replay enables applications such as
testing which server versions are vulnerable to a exploit [11], eval-
uating intrusion detection systems [18], building interactive hon-
eypots [23], and active botnet inﬁltration [5, 8]. And, comparing
network dialogs enables clustering malware samples based on their
network behavior [38] and building C&C signatures [16, 31].
Many tools have been proposed to replay trafﬁc from a trace [7,
18, 28, 35] and prior work proposes techniques for replaying a net-
work dialog regardless of the protocols involved [11,27]. However,
a network trace may contain much trafﬁc unrelated to the replay
goal. For example, a trace obtained at the network’s boundary may
capture an attack on an internal server that an analyst wants to re-
play. But, it likely contains much trafﬁc (e.g., Gigabytes) from
other hosts not attacked, and trafﬁc from the attacked server un-
related to the attack, e.g., because it happens before or after the
attack. Before replaying the attack an analyst may want to remove
all unrelated trafﬁc to better understand the attack, and also for ef-
ﬁciency since the attack trafﬁc may be a small part of the full trace
and the attack may need to be replayed many times (e.g., against
different server versions).
In this work, we introduce the problems of network dialog mini-
mization (NDM) and network dialog difﬁng. Network dialog min-
imization is the problem of given an original dialog that satisﬁes
a goal, producing a minimized dialog comprising the smallest sub-
set of the original dialog that when replayed still achieves the same
goal as the original dialog. In essence, the minimized dialog pro-
vides a shortcut to the goal, removing all connections and messages
in the original dialog unrelated to the goal. A minimized dialog en-
ables understanding what parts of a dialog really matter for the goal
e.g., determining which messages and ﬁelds are really required to
exploit a network server without expensive code analysis. Further-
more, it provides huge reductions (up to 71 times) in time and band-
Contributions:
• We introduce the problem of network dialog minimization
(NDM) and present network delta debugging, the ﬁrst tech-
nique to solve NDM.
• We propose a novel dialog difﬁng approach that ﬁnds a map-
ping that maximizes similarity between two network dialogs,
and then identiﬁes their common and different elements. We
deﬁne a dialog similarity metric that leverages the alignment.
• We present a novel encoding of a network dialog as a tree,
which captures the dialog’s hierarchical structure of connec-
tions, messages, and ﬁelds.
• We apply our dialog minimization and difﬁng techniques to
5 applications: building drive-by download milkers, cookie
expiration validation, simplifying user interfaces, vulnerabil-
ity analysis, and dialog clustering.
2. OVERVIEW
A network dialog comprises the network trafﬁc exchanged be-
tween peers for achieving a goal such as sending an email or in-
stalling malware in a victim’s host through a drive-by download.
At the core of this work is the intuition that a network dialog can
be represented as a network dialog tree that captures the hierarchi-
cal structure of the network dialog, which comprises connections,
messages, and ﬁelds in messages.
A network dialog tree enables automatically operating on a net-
work dialog, e.g., replaying the network dialog, minimizing it, or
comparing two dialogs. Figure 1 shows a simple drive-by down-
load dialog where a victim visits a compromised site (pg22.com.
br) that redirects the victim to an exploit server at Ghanarpower.
net, which checks the browser and Java plugin version (GET /main
.php), redirects the victim’s browser to download a Java exploit
(GET /Werd.jar), and if exploitation succeeds redirects the browser
to download a malware sample (GET /w.php). Figure 2 shows the
corresponding dialog tree, where the ﬁrst level below the root cor-
responds to connections, the second level to messages in those con-
nections, and deeper levels to the hierarchical ﬁeld structure of each
message. We detail the network dialog tree in Section 3.
The remainder of this section presents our novel operations on
the network dialog tree (Section 2.1) and describes applications of
those operations (Section 2.2).
2.1 Network Dialog Tree Operations
We propose two novel operations on network dialog trees: dialog
minimization and dialog difﬁng.
Dialog minimization. One important use of network dialog trees is
to automatically replay a previously captured network dialog. The
network dialog can be periodically replayed to the same entities
involved in the dialog or to different ones (e.g., by replacing their IP
addresses / domain names). We take dialog replay one step further
and introduce the problem of network dialog minimization (NDM),
which is the process of given an original dialog that satisﬁes a goal,
automatically producing a minimized dialog that, when replayed,
achieves the same goal as the original dialog but with minimum
trafﬁc, i.e., removing all connections and messages not needed to
achieve the goal. Further removal of elements from the minimized
dialog causes the goal not to be reached.
For example, Figure 3 presents the minimized dialog for the
drive-by download original dialog in Figure 1, where the goal is
to download the malware sample being distributed. The minimized
Figure 1: A drive-by download network dialog.
width to achieve the goal, which is fundamental when replaying a
dialog repeatedly over time, e.g., in active botnet inﬁltration [5, 8].
In this work, we propose network delta debugging the ﬁrst tech-
nique to automatically minimize a network dialog. Our insight is
that NDM is a generalization of the problem of minimizing an input
that crashes a program, for which delta debugging is a well-known
solution [39]. Our network delta debugging technique generalizes
delta debugging so that it can be applied to remote applications, al-
lows application-speciﬁc goals beyond crashing an application, and
takes advantage of the hierarchical structure of a network dialog.
Network dialog difﬁng is the problem of given two dialogs, iden-
tifying how similar they are, how to align them, and how to identify
their common and different parts. In this work we propose a novel
technique for dialog difﬁng, which aligns two network dialogs by
ﬁnding a mapping between the dialogs that maximizes similarity.
Once aligned, it identiﬁes which elements (e.g., connections, mes-
sages) have been inserted, removed, and modiﬁed. We also deﬁne
a dialog similarity metric that captures how similar two dialogs are.
We have applied our dialog minimization and difﬁng techniques
to 5 applications. First, we apply NDM to build drive-by download
milkers, which periodically replay a minimized drive-by download
dialog to collect the malware an exploit server distributes over time.
We have built milkers for 9 exploit kits and have integrated them
into an infrastructure that has collected over 14,000 malware sam-
ples. A milker achieves a 34x reduction in replay time and their
use enables reducing our malware collection infrastructure from
three to a single host. Second, we apply NDM for measuring the
current status of well-known cookie replay issues in popular web-
sites [1, 4, 14, 17, 30]. The use of NDM achieves a 71x reduction
in replay time, saving over 20 hours of processing each day. Our
measurements show that despite years of research on the topic 31%
of the top 100 Alexa domains do not destroy the server-side state
when a user clicks the logout link. Thus, the user remains effec-
tively logged in. For 17% of all Alexa top 100 sites their cookie can
be replayed for more than a month, creating a very large window
for session hijacking. Third, we use NDM for vulnerability analy-
sis, ﬁnding a new vulnerability in the OpenSBC SIP server. Fourth,
we apply NDM for simplifying an unnecessarily cumbersome pro-
prietary web interface to move up and down a windows sunblind
in an automated building, converting it to a simple command-line
tool. The simpliﬁed interface saves up to 3 hours of time a year
per employee, and $10,000 that the building vendor would charge
for modifying the proprietary interface. Finally, we evaluate our
dialog difﬁng approach for clustering similar dialogs. Our dialog
clustering achieves 100% precision and 100% recall on 60 benign
dialogs from the top 30 Alexa sites, and 100% precision with 78%
recall when clustering 91 malware dialogs from 6 families.
GET /amtd.html200 OKGET /main.php?page=8c6c59becaa0da07200 OKGET /Werd.jarGET /w.php?f=b081d&e=0200 OKContent-Disposition: attachment; filename="contacts.exe"pg22.com.br200 OKGhanarpower.netGhanarpower.nettemporal ordert-nt-0t-1t-2t-3Figure 2: Network dialog tree for the dialog in Figure 1. For brevity, response nodes are not expanded.
Figure 3: Minimized drive-by download dialog.
dialog shows that it is possible to download the malware by simply
replaying two of the four requests in the original dialog.
Dialog difﬁng. Two dialogs that achieve exactly the same goal but
are taken at different points in time, or from different end hosts,
may intuitively be similar but may include a large number of di-
vergences due to non-determinism. For example, a visit to Mi-
crosoft’s MSN.com root page produces a complex network dia-
log with 82 connections connections and 177 requests. Visiting
MSN.com again one day later produces a similar dialog but with
99 connections and 222 requests instead.
Network dialog difﬁng is the problem of given two network di-
alogs automatically identifying how similar they are, which parts
are the same across them, and which parts different (i.e., connec-
tions and messages added, removed, or modiﬁed). Solving the dia-
log difﬁng problem implies solving the dialog similarity and dialog
alignment problems as well. Our approach ﬁrst deﬁnes similarity
metrics between messages, connections, and dialogs. Then, it uses
the similarity results to align both dialogs. Once aligned, common
and different parts between both dialogs are output.
2.2 Dialog Tree Applications
This section introduces the 5 applications we use to demonstrate
our techniques.
Building drive-by download milkers. A drive-by-download milker
is a lightweight program that periodically downloads a malware
sample from an exploit server. Its goal is similar to a honeyclient,
which given a URL, visits it, gets exploited, and downloads the
malware sample being distributed. But, a drive-by download milker
does not go through the exploitation process and thus does not
require running a heavyweight VM with a vulnerable browser; it
simply replays a minimized drive-by download dialog. A drive-by
download milker takes as input a minimized drive-by download di-
alog for a speciﬁc exploit kit (e.g., RedKit or CoolExploit), a set
of exploit server IP addresses, and a time value specifying how of-
ten to replay the dialog. At each iteration it downloads a malware
sample from each exploit server.
Drive-by download milkers need to be used in combination with
honeyclients since it is not always possible to replay a drive-by
download dialog. However, they achieve large performance sav-