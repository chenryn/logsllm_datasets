### Memory and Addressing in the Nintendo 3DS

#### Memory Regions
- **APPLICATION**: `0x30000000`
- **BASE**: `0x27C00000`
- **SYSTEM**: `0x2E000000`

#### Data Sections
- `.rodata`: Read-only data
- `.data`: Initialized data
- `.text`: Code section

#### Addressing Modes
- **Virtual Addressing**
- **Physical Addressing**

#### FCRAM (Fast Cycle RAM)
- Used for high-speed memory access.
- Mitigation: **PASLR** (Physical Address Space Layout Randomization) by Nintendo.

#### Bypassing PASLR in ROP (Return-Oriented Programming)
- **ROP Chain Example:**
  ```assembly
  gspwn MCOPY_RANDCODEBIN_COPY_BASE, MCOPY_RANDCODEBIN_BASE, MCOPY_CODEBIN_SIZE
  str_val MCOPY_SCANLOOP_CURPTR, MCOPY_RANDCODEBIN_COPY_BASE - MCOPY_SCANLOOP_STRIDE
  scan_loop:
    ldr_add_r0 MCOPY_SCANLOOP_CURPTR, MCOPY_SCANLOOP_STRIDE
    str_r0 MCOPY_SCANLOOP_CURPTR
    cmp_derefptr_r0addr MCOPY_SCANLOOP_MAGICVAL, scan_loop, scan_loop_pivot_after
    str_r0 scan_loop_pivot + 4
    scan_loop_pivot:
      jump_sp 0xDEADBABE
    scan_loop_pivot_after:
  memcpy MCOPY_RANDCODEBIN_COPY_BASE, initial_code, initial_code_end - initial_code
  flush_dcache MCOPY_RANDCODEBIN_COPY_BASE, 0x00100000
  gspwn_dstderefadd MCOPY_RANDCODEBIN_BASE - MCOPY_RANDCODEBIN_COPY_BASE, MCOPY_SCANLOOP_CURPTR, MCOPY_RANDCODEBIN_COPY_BASE, 0x800, 0
  .word MCOPY_SCANLOOP_TARGETCODE
  .align 0x4
  initial_code:
    .incbin "../build/mhax_code.bin"
  initial_code_end:
  ```

#### DMA and GPU Access
- **DMA (Direct Memory Access)**: Allows direct memory access, bypassing the CPU.
- **GPU DMA Range Reduction**: A mitigation introduced by Nintendo to restrict DMA ranges.
- **Bypassing GPU DMA Range Mitigation**: Possible on New 3DS, but with limitations.

#### System Components
- **ARM11 Kernel**: Manages system calls and services.
- **Home Menu**: User interface for launching applications.
- **Loader, FS, GSP, HID**: Various system components.
- **Memory Regions**:
  - **APPLICATION**: `0x30000000`
  - **BASE**: `0x27C00000`
  - **SYSTEM**: `0x2E000000`

#### Exploitation Paths
- **User-mode Application Compromised**: Initial step in privilege escalation.
- **Escalating Privilege**:
  - **mcopy**: Basic application with limited system call access.
  - **Paths to Exploitation**:
    - Directly attack the ARM9: Difficult without more services.
    - Attack the ARM11 kernel: Possible but easier with more system calls.
    - Attack other user-mode processes.

#### Memory and CPU Overview
- **Memory**:
  - **FCRAM**: Fast Cycle RAM.
  - **K/P9**: Kernel/Processor 9.
  - **Kernel11**: ARM11 Kernel.
  - **WRAM, VRAM**: Working and Video RAM.
  - **ARM9 internal**: Internal memory of ARM9.
- **CPUs**:
  - **ARM9**: Main processor.
  - **ARM11**: Secondary processor.
  - **GPU**: Graphics Processing Unit.
  - **CRYPTO**: Cryptographic unit.
  - **NAND**: Non-volatile storage.

#### Home Menu and Services
- **Home Menu Compromised**: Provides access to more services.
- **Privileges**:
  - **ns:s Service**: Allows process management.
  - **ldr:ro Service**: Handles dynamic library loading (CROs).

#### CRO Loading Process
1. **Application Loads CRO into RW Buffer**.
2. **CRO is Locked and Mapped to Load Address**.
3. **Local View Created in ro's Memory Space**.
4. **Processing (Relocations, Linking, etc.)**.
5. **Unmapping and Reprotecting the CRO**.

#### Key Insight
- **App Can’t Modify CRO from CPU, but Can with GPU**:
  - **CRO Tampering with GPU**: Race condition bugs and tricky timing.
  - **Heap Metadata Authentication**: MAC (Message Authentication Code) to prevent forgery.

#### Double Mapping Exploit
- **Initial Layout**:
  - Save free block A and B’s data through DMA.
- **Allocate Segment to Fit in B but Not A**:
  - Use DMA to replace A’ with A.
- **Result**:
  - Primary mapping and double-mapping achieved.

This document provides a comprehensive overview of the memory and addressing mechanisms in the Nintendo 3DS, along with detailed insights into potential exploitation paths and mitigations.