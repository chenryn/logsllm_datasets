provides security in a stronger adversarial model than Salus. We also note that Salus requires a two-party fair coin toss
before the protocol begins, which is not required by Whitewash.
5.2.2 Security Guarantees
The Salus protocol provides equivalent security guarantees to CMTB, guaranteeing security when none of the parties
are colluding. This is a result of outsourcing the evaluation to the Cloud while allowing the mobile device to generate
circuit randomness. If the mobile device colludes with the cloud, they can trivially recover all of the other party’s
inputs. By outsourcing the generation of the garbled circuit and adding in additional consistency checks at the evaluat-
ing party, Whitewash guarantees security under this type of collusion. As stated above, the only guarantee lost is that
of fair output release, which ultimately reduces Whitewash to the security of the underlying two-party computation
protocol.
6 Performance Evaluation
Our protocol signiﬁcantly expands upon the implementations of the PCF garbled circuit generation technique [25]
and shelat and Shen’s garbled circuit evaluation protocol [37]. For experimental comparison to previous protocols,
we acquired the code implementation of the outsourcing protocol by Carter et al. [6] directly from the authors, as
9
Circuit
Hamming (1600)
Hamming (16384)
Matrix (3x3)
Matrix (5x5)
Matrix (8x8)
Matrix (16x16)
Dijkstra’s 10
Dijkstra’s 20
Dijkstra’s 50
RSA-256
Input Size
(Bits)
1,600
16,384
288
800
2,048
8,192
KSS
24,379
262,771
424,748
1,968,452
8,067,458
64,570,969
PCF
32,912
376,176
92,961
433,475
1,782,656
14,308,864
112/1,040
192/2,080
432/5,200
256/512
259,232
1,653,380
22,109,330
934,092,960
530,354
2,171,088
13,741,514
673,105,990
118,357
757,197
10,170,407
602,006,981
Total Gates
Non-XOR Gates
KSS
17,234
186,326
263,511
1,221,475
5,006,656
40,076,631
PCF
6,375
101,083
27,369
127,225
522,304
4,186,368
291,490
1,192,704
7,549,370
235,925,023
Table 2: Input size and circuit size for all test circuits evaluated.
well as an Android port of the two-party garbled circuit protocol developed by Kreuter, shelat, and Shen [26]. For
the remainder of the work, we refer to these protocols as CMTB and KSS respectively. We refer to our Whitewash
protocol as WW. We would like to thank the authors of [6, 26, 25, 37] for making their code available and for assisting
us in running this performance evaluation2.
6.1 Test Environment
For evaluating our test circuits, we perform our experiments with a single server performing the role of Cloud and
Application server, communicating with a mobile device over an 802.11g wireless connection. The server is equipped
with 64 cores and 1TB of memory, and we partition the work between cores into parallel processing nodes using MPI.
The mobile device used is a Samsung Galaxy Nexus with a 1.2 GHz dual-core ARM Cortex-A9 processor and 1 GB
of RAM, running Android 4.0.
The large input sizes examined in the Hamming Distance trials required us to use a different testbed. For inputs
as large as 16,384 bits, the phone provided by the above computing facility would overheat and fail to complete
computation. Because the gate counts for Hamming Distance are signiﬁcantly smaller than the other test circuits, we
were able to run these experiments on a local testbed. We used two servers with Dual Intel Xeon E5620 processors,
each with 4 hyper-threaded cores at 2.4 GHz each for the Cloud and the application server. Each server is running the
Linux kernel version 2.6, and is connected by a VLAN through a 1 Gbps switch. Our mobile device is a Samsung
Galaxy Note II with a 1.6 GHz quad-core processor with Arm Cortex A9 cores and 2 GB of RAM, running the Android
operating system at version 4.1. The phone connects to the two servers through a Linksys 802.11g wireless router with
a maximum data rate of 54 Mbps. While this test environment represents optimistic connection speeds that may not
always be available in practice, it allows us to consider the performance of the protocol without interference from
variable network conditions, and mirrors the test environments used in previous work [26, 6, 37]. For all experiments
except RSA-256, we take the average execution time over ten test runs, with a conﬁdence interval of 95%. For RSA-
256, we ran 3 executions.
6.2 Experimental Circuits
To evaluate the performance of our protocol, we run tests over the following functions. We selected the following test
circuits because they exercise a range of the two major variables that affect the speed of garbled circuit protocols: input
size and gate counts. In addition, these programs are becoming somewhat standard test applications, having been used
as benchmarks in a large amount of the related literature [26, 6, 37, 25]. All of the programs are implemented with
the algorithms used by Kreuter et al. [25] except for Dijkstra’s algorithm, which matches the implementation used by
Carter et al. [6]:
2We contacted the authors of the Salus protocol [21] in an attempt to acquire their framework to compare the actual performance of their scheme
with ours. Because they were unable to release their code, no sound comparison to their work beyond an asymptotic analysis was possible. Our
code will be made available immediately on publication.
10
Figure 2: Execution time (ms) for Hamming Distance with input sizes of 1,600 and 16,384 bits for σ = 256 (note:
log scale). Note that without outsourcing, only very small inputs can be computed over. Additionally, even for a large
number of input bits, performing OTs on the servers still produces a faster execution time.
1. Hamming Distance: The Hamming Distance circuit accepts binary string inputs from both parties and outputs
the number of locations at which those strings differ. This circuit demonstrates performance for a small number
of gates over a wide range of input sizes. We consider input strings of length 1,600 bits and 16,384 bits.
2. Matrix Multiplication: Matrix multiplication takes an n × n matrix of 32-bit integer entries from each party
and outputs the result of multiplying the matrices together. This circuit demonstrates performance when both
input size and gate count vary widely. We consider square matrix inputs where n = 3, 5, 8, and 16.
3. Dijksrta’s Algorithm: This version of Dijkstra’s algorithm takes an undirected weighted graph with a grid
structure and a maximum node degree of four from the ﬁrst party, and a start and end node from the second
party. The circuit outputs the shortest path from the start node to the end node to the second party, and nothing
to the ﬁrst. For an n node graph, the graph description from the ﬁrst party requires 104n input bits, while the
start and end node descriptions require 8n + 32 bits. We consider graphs with n = 10, 20, and 50 nodes. Due
to an error in the PCF compiler, we were unable to compile a program for graphs larger than 50 nodes.
4. RSA Function: The RSA function (i.e., modular exponentiation) accepts an RSA message from one party
and an RSA public key from the other party and outputs the encryption of the input plaintext under the input
public key. Speciﬁcally, one party inputs the modulus n = pq for primes p and q, as well as the encryption
key e ∈ Zφ(n). The other party inputs a message x ∈ Z∗
n, and the circuit computes xe (mod n). This circuit
demonstrates performance for small input sizes over very large gate counts. We consider the case where the
input values x, n, and e are 256 bits each.
For each test circuit, we consider the time required to execute and the bandwidth overhead to the mobile device.
Table 2 shows the input size and gate counts for each test circuit, showing the exact range of values tested for these
two circuit variables.
6.3 Execution Time
In all experiments, the efﬁciency gains of removing oblivious transfers and public key operations are immediately
apparent. To examine how Whitewash compares to generating garbled circuits directly on the mobile device, we
considered Hamming Distance as a simple problem (Figure 2). Even with a relatively small gate count, garbling the
circuit directly on the mobile device is only possible for the small input size of 1,600 bits. Whitewash is capable
of executing this protocol in 96 seconds, while running the computation directly on the mobile device takes 2,613
seconds, representing a 96% performance improvement through our outsourcing scheme. For the very large input
size of 16,384 bits, computation directly on the mobile device ceases to be possible. When comparing to CMTB,
this circuit further illustrates the cost of oblivious transfers on the mobile device. Even with the signiﬁcantly reduced
number of OTs allowed by the OOT protocol in CMTB (80 OTs), performing 16,384 malicious secure oblivious
transfers between two servers in Whitewash still runs 30% faster than CMTB.
The matrix-multiplication circuit provides a good overview of average-case garbled circuit performance, as it
11
Hamming 1600Hamming 16384050010001500200025003000Time (sec)  CircuitWWCMTBKSSXFigure 3: Execution time (ms) for the Matrix-Multiplication problem with input size varying between 3 × 3 matrices
and 16 × 16 matrices for σ = 256 (note: log scale). This ﬁgure clearly shows that the oblivious transfers, consistency
checks, and larger circuit representations of CMTB add up to a signiﬁcant overhead as input size and gate count
increase. By contrast, Whitewash requires less overhead and increases more slowly in execution time as gate counts
and input size grow.
represents a large range of both gate counts and size of inputs. For the input size of a 3 × 3 matrix, the Whitewash
protocol runs in an average of 12 seconds, while CMTB requires 493 seconds, representing a 98% improvement (see
Figure 3). Upon inspecting the micro benchmarking breakdown of each protocol’s execution in Figure 4, we observe
a signiﬁcant speedup simply by moving oblivious transfers off of the mobile device. Even though the number of OTs
required by CMTB is essentially constant based on their application of the Ishai OT extension, performing standard
malicious secure oblivious transfers in parallel between the servers is much more efﬁcient than requiring that the phone
perform these costly operations. In addition, if we examine the amount of execution time where the phone participates
in Whitewash, we see that the mobile device (“MOBI” in Figure 4), takes around 1 second, and is idle during the
majority of computation. By contrast, both the OT and consistency check phases of CMTB require the mobile device
to participate in a signiﬁcant capacity, totaling to almost 8 minutes of the computation. Having the phone perform as
little computation as possible means that the Whitewash protocol performance is nearly equivalent to performing the
same computation between two server-class machines.
To examine the performance of Whitewash for a more practical application, we considered the Dijkstra’s algorithm
circuit used to implement privacy-preserving navigation by Carter et al. [6]. They point out that this application,
which has uses from military convoys to industrial shipping routes, is a signiﬁcant ﬁrst step in providing privacy
for the growing genre of location-based mobile applications (see an example in Figure 5). Unfortunately, the PCF
compiler does not optimize the Dijkstra’s circuit as well as the previous experimental programs, which is evident
in Table 2. In the 10 and 20 node graphs, the PCF compiler even produces a larger circuit than the compiler used
by KSS. However, despite evaluating larger circuits, the Whitewash protocol still outperforms CMTB in execution
time, running 88%,76%, and 51% faster in the 10, 20, and 50 node cases respectively (shown in Figure 6). As circuit
compilers continue to improve and produce smaller circuits, the performance gains of the Whitewash protocol will be
even larger. In this experiment, we also noticed that because Whitewash evaluates and checks circuits simultaneously,
it created contention for the network stack in our test server. In a truly distributed environment where each server
node has dedicated network resources, the highly parallelizable structure of shelat and Shen’s protocol would allow
Whitewash to execute faster. Given that Whitewash can execute Dijkstra’s algorithm obliviously on the order of
minutes, it allows computation considered only feasible for previous schemes to be performed in a nearly practical
execution time.
The previous experiments clearly show that outsourcing is necessary to run circuits of any practical size. For our
ﬁnal test circuit, we consider an extremely complex problem to demonstrate the ability of outsourcing protocols in
the worst-case. The RSA-256 circuit evaluated by Kreuter et al. in [25] and shelat and Shen in [37] represents one
of the largest garbled circuits ever evaluated by a malicious secure protocol. For the RSA-256 problem, Whitewash
completed the computation in 515 minutes. CMTB was unable to complete one execution of the protocol. A large
12
3x35x58x816x1605001000150020002500Time (sec)Circuit  WWCMTBFigure 4: Microbenchmarking execution times (ms) for Whitewash and CMTB over the Matrix-Multiplication prob-
lem. We denote the total time spent in computation for Whitewash as “MOBI”. Since the mobile device is linked with
“CHKS” and “OT” in CMTB, we do not separate out the mobile time for that protocol. Notice the dominating amount
of time required to perform oblivious transfers. Moving these operations off the mobile device removes a signiﬁcant
computation bottleneck.
Bandwidth (MB)
Circuit
Hamming (1600)
Hamming (16384)
Matrix (3x3)
Matrix (5x5)
Matrix (8x8)
Matrix (16x16)
Dijkstra’s 10
Dijkstra’s 20
Dijkstra’s 50
RSA-256
WW CMTB
41.05
23.56
241.02
374.03
11.50
4.26
23.04
11.79
51.14
30.15
189.52
120.52
1.67
20.21
35.28
2.85
6.38
80.49
3.97
x
KSS
240.33
x
x
x
x
x