1
浅谈PHP源代码保护⽅案&受保护PHP代码の解
密还原
前⾔
PHP 加密⽅案分析
⽆扩展⽅案
源代码混淆
⼿⼯解密
⾃动化通⽤解密
PHP扩展⽅案
源代码混淆
⼿⼯解密
⾃动化通⽤解密
opcode
还原代码
附录
PHP扩展编译
总结
参考
php是⼀种解释型脚本语⾔. 
与编译型语⾔不同,php源代码不是直接翻译成机器语⾔.⽽是翻译成中间代码(OPCODE) ,再由解释器
(ZEND引擎)对中间代码进⾏解释运⾏ . 
在php源代码的保护在原理可以分为3⼤类. 
源代码混淆(编码) 
OPCODE混淆(编码) 
修改解释引擎(虚拟机) 
前⾔ 
●
●
●
2
在部署上可以分为2⼤类. 
⽆扩展 
有扩展 
下⾯分析下各种加密⽅案的实现⽅法 
⽆扩展的加密在⼀些⼩开发者⽐较常⻅。 
这种源代码保护⽅式侵⼊性⼩，⽆需对服务器做额外的配置，兼容性较强。 
这种情况混淆后的源代码还原⾮常简单，可完全还原出源代码。  有时连注释都会保留  (x 我觉得这种混
淆都不能称之为加密 
基本流程 压缩代码->混淆变量函数类名->使⽤简单函数和⽅法进⾏编码加密 例:base64 异或 
看到这种的php不要慌  这种处理后的⽂件 解密流程的变量和函数名使⽤了⼤量的⾮打印字符 按照正常
的流程就可以 
ctrl+alt+l 快捷键 格式化代码 (这⾥使⽤的PhpStorm 其他IDE 格式化遇到特殊符号可能出问题  这⾥提前
调整好了⽂件编码) 
●
●
PHP 加密⽅案分析 
⽆扩展⽅案 
源代码混淆 
⼿⼯解密 
3
这⾥有⼀个php的特性 php中的base64遇到⾮base64表中字符会直接忽略 不会影响解码 
注: PHP7 遇到空字符可能会抛出error 可以使⽤php5.6执⾏ (这⾥有⼀个兼容性问题 ) 
遇到这种加密最简单的⽅法就是找⽂件中最后⼀步执⾏的函数 直接把内容打印出来 
4
这种编码⽅法最后⼀步肯定要使⽤eval执⾏还原后的php代码 所以打印最后⼀个函数基本上php代码就
会全部出来 (x 前⾯操作⼀⼤顿毫⽆卵⽤ 
注: 有保护⽅案也使⽤了call_user_func或call_user_func_array间接调⽤eval 
成功还原源代码  
⾃动化通⽤解密 
5
PHP提供了强⼤的扩展功能  可以直接通过编写php扩展hook eval相关函数 获取执⾏的源代码 
HOOK  php zend引擎的  zend_compile_string   zend_include_or_eval 函数达到⽬的 
这⾥演示的是 hook zend_compile_string 函数 
6
C
复制代码
/* $Id$ */
#include "php.h"
#include "ext/standard/info.h"
static zend_op_array* (*old_compile_string)(zval *source_string, char 
*filename TSRMLS_DC);
static zend_op_array* evalhook_compile_string(zval *source_string, char 
*filename TSRMLS_DC)
{
    if(strstr(filename, "eval()'d code")) {
        printf("\n------eval-------\n%s\n------eval-------
\n",Z_STRVAL_P(source_string));
    }
        return old_compile_string(source_string, filename TSRMLS_CC);
}
PHP_MINIT_FUNCTION(evalhook)
{
    return SUCCESS;
}
PHP_MSHUTDOWN_FUNCTION(evalhook)
{
    return SUCCESS;
}
PHP_RINIT_FUNCTION(evalhook)
{
    old_compile_string = zend_compile_string;
    zend_compile_string = evalhook_compile_string;
    return SUCCESS;
}
PHP_RSHUTDOWN_FUNCTION(evalhook)
{
    zend_compile_string = old_compile_string;
    return SUCCESS;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
7
成功还原源代码 
PHP扩展⽅案 
PHP_MINFO_FUNCTION(evalhook)
{
    php_info_print_table_start();
    php_info_print_table_row(2, "eval hooking", "enabled");
    php_info_print_table_end();
}
zend_function_entry evalhook_functions[] = {
    ZEND_FE_END
};
zend_module_entry evalhook_module_entry = {
    STANDARD_MODULE_HEADER,
    "evalhook",
    evalhook_functions,
    PHP_MINIT(evalhook),
    PHP_MSHUTDOWN(evalhook),
    PHP_RINIT(evalhook),    
    PHP_RSHUTDOWN(evalhook),
    PHP_MINFO(evalhook),
    "0.0.1-dev",
    STANDARD_MODULE_PROPERTIES
};
ZEND_GET_MODULE(evalhook)
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
8
使⽤php扩展的代码混淆和⽆扩展代码混淆⽐较相似，只不过是把代码还原过程从php代码转到了php扩
展。 
同样是使⽤aes des 异或等加密⽅法直接加密php代码，HOOK翻译php的函数在翻译PHP⽂件前对⽂件
进⾏解密操作。这种⽅案也可以完全还原出源代码。在⽆其他混淆和压缩时甚⾄还会保留注释。 
典型开源项⽬：php-beast tonyenc  screw-plus 
这⾥以beast为例. 
⾸先在php的扩展⽬录下找到beast.so 
beast的加密⽅案会把加密key编译进扩展中. 我们只需要寻找key就可以完成解密 
beast由于是开源项⽬.有现成的符号表和源码这使得反编译寻找key变得⾮常简单. 
但这样有点太简单了. 所以这⾥演示的是在没有源码的情况下使⽤IDA分析解密流程. 
⾸先在导⼊表找到zend_compile_file  
这个函数会将php⽂件翻译成opcode
因此⼤部分php加密扩展都需要hook这个函数达到拦截php⽂件载⼊和替换php⽂件的功能
源代码混淆 
⼿⼯解密 
9
继续跟⼊ 
发现有两个函数 
⼀般在这种php加密扩展设计时会对这个函数有两次操作： 
⼀个是在启动时hook 这个函数，⼀个是在停⽌时恢复这个函数。 
继续跟⼊启动hook 
显然⽂件处理逻辑在cgi_compile_file内 
10
跟踪⽂件句柄  
decrypt_file函数的参数存在⽂件句柄 所以这个函数应该就是⽂件解密函数 
根据代码可以看出beast 加密⽂件的结构 
| encrypt_file_header_sign ⽂件头标记（不固定 可修改）| reallen⽂件⻓度 int 4字节 | expire  到期时
间 int 4字节| entype  加密⽅式 int 4字节| 加密后⽂件| 
11
分析⽂件头发现该⽂件加密⽅式为 02 
跟⼊beast_get_encrypt_algo 
2对应的是 aes_handler_ops 
12
使⽤了AES 128 ECB加密模式 
直接提取key参数内容 
⻓度刚好16位 
到这⼀步就成功拿到了加密秘钥 
使⽤拿到的KEY就可以解密PHP⽂件 
⾃动化通⽤解密 
13
编写php扩展 HOOK zend_compile_file函数 
beast的加密不会对php⽂件做额外的操作  解密⽂件与加密前原⽂件完全⼀致 
php注释和原格式都会保留 
注意: 这⾥扩展加载顺序问题 建议直接修改php源码 
Zendzend_language_scanner.c  
ZEND_API zend_op_array *compile_file 
php会将源代码翻译成类似汇编的⼆进制中间操作码再交给zend引擎执⾏。 
之前的介绍的都是编译之前对php源代码的直接操作。这⾥是对opcode的操作，跳过翻译过程，直接把
现成的opcode交给zend引擎执⾏(不同版本PHP引擎编译出的opcode可能会有兼容性问题)。 
这种php代码防护⽅法 只能hook zend_execute 拿到opcode。 不可能直接得到原本的源码，只能通过
反编译尽可能的还原源代码。 
⼤部分商业php保护⽅案都使⽤这种可靠的⽅案为基础  ZendGuard(zend) SourceGuardian(SG)    
IonCube (IC)  Swoole Compiler   
上⾯的⽅案有的还对zend引擎进⾏了魔改，使翻译出的opcode只能在修改后的引擎执⾏,进⼀步增强了
安全性。 
hook zend_execute 拿到opcode 
使⽤对应版本的php操作码反推php代码 
太菜了不会反编译) 
opcode 
还原代码 
附录 
14
phpize ⽣成Makefile 
配置编译选项 启⽤扩展 
最后执⾏make 编译扩展 
编译好的扩展会放在./modules/ ⽬录下 
使⽤扩展 
可以重复使⽤-d extension 加载多个扩展 
PHP扩展编译 
Bash
复制代码
docker run -it --rm -v /mnt/hgfs/tmpssd/php-eval-hook/:/ext/ php:5.6 
/bin/bash
apt-get update 
apt install libtool
1
2
3
Bash
复制代码
phpize
1
Bash
复制代码
./configure --enable-evalhook
1
C
复制代码
php -d extension=扩展位置 -f ⽂件
1
15
在选⽤PHP源码保护⽅案时 尽量选择opcode或虚拟机⽅案 
源代码混淆类只能对源代码获取和阅读增加⼀点困难 在加密扩展可被攻击者获取到时并不能起到保护作
⽤ 
PHP代码审计⼊⻔指南 
 php内核剖析 
从Zend虚拟机分析PHP加密扩展 
通⽤加密php⽂件还原⽅法 
总结 
参考