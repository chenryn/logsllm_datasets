title:Micropayments for Decentralized Currencies
author:Rafael Pass and
Abhi Shelat
Micropayments for Decentralized Currencies
∗
Rafael Pass
Cornell University
PI:EMAIL
†
abhi shelat
U of Virginia
PI:EMAIL
ABSTRACT
Electronic ﬁnancial transactions in the US, even those en-
abled by Bitcoin, have relatively high transaction costs. As
a result, it becomes infeasible to make micropayments, i.e.
payments that are pennies or fractions of a penny.
To circumvent the cost of recording all transactions, Wheeler
(1996) and Rivest (1997) suggested the notion of a prob-
abilistic payment, that is, one implements payments that
have expected value on the order of micro pennies by run-
ning an appropriately biased lottery for a larger payment.
While there have been quite a few proposed solutions to such
lottery-based micropayment schemes, all these solutions rely
on a trusted third party to coordinate the transactions; fur-
thermore, to implement these systems in today’s economy
would require a a global change to how either banks or elec-
tronic payment companies (e.g., Visa and Mastercard) han-
dle transactions.
We put forth a new lottery-based micropayment scheme
for any ledger-based transaction system, that can be used
today without any change to the current infrastructure. We
implement our scheme in a sample web application and show
how a single server can handle thousands of micropayment
requests per second. We analyze how the scheme can work
at Internet scale.
1.
INTRODUCTION
This paper considers methods for transacting very small
th to 1 penny. Traditional bank-based
amounts such as 1
10
transactions usually incur fees of between 21 to 25 cents
(in the US) plus a percentage of the transaction [16] and
thus transactions that are less than 1$ are rare because of
this ineﬃciency; credit-card based transactions can be more
expensive.
∗Supported in part by NSF Award CNS-1217821, NSF
†Supported by NSF Award CNS-0845811, TC-1111781, and
Award CCF-1214844 and AFOSR Award FA9550-15-1-0262.
the Microsoft Faculty Fellowship.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813713 .
Although several new crypto-currencies have removed the
centralized trust from a currency and have substantially re-
duced the cost of a large international transaction, they have
not solved the problem of reducing transaction fees to enable
micro-payments. In Fig. 1, we show that Bitcoin transaction
fees are usually at least 0.0001 bitcoin, which corresponds to
between 2.5 and 10 cents over the last two years. See Fig. 8
in the Appendix for another graph showing the distribution
of fees among recent transactions.
The transaction fee pays for the cost of bookkeeping, credit
risk and overhead due to fraud. Although the cost of stor-
age and processing have diminished, the cost of maintaining
reliable infrastructure for transaction logs is still noticeable.
Figure 1: A plot of transaction fee versus frequency
for 1 million transactions in May 2015. Very few
transactions have fees less than 0.0001 Bitcoin. As
of May 2015, 10k milliBitcoin, or 0.0001 bitcoin cor-
responds to roughly 2.5 cents.
One method for overcoming a transaction fee is to batch
several small transactions for a user into a large transac-
tion that occurs say, monthly. Standard implementations
of this idea, however, rely on the extension of credit to
the user from a merchant or bank, and thus, incurr credit
risk. Systems like Apple iTunes and Google play appar-
ently implement their $1 transactions using a probabilistic
model for user behavior to pick an optimal time to bal-
ance credit risk versus transaction fee. Systems like Star-
bucks attempt to sell pre-paid cards for which several or-
ders result in one credit transaction. PayPal introduced
a micropayments pricing model (5.0% plus $0.05). Simi-
larly, the Bitcoinj project (see https://bitcoinj.github.
io/working-with-micropayments) enables setting up a mi-
cropayment channel to a single predetermined party (e.g., a
single webpage): Each payer must set up a separate chan-
nel and escrow account for each merchant; moreover, the
7%80%98%0.00010.0005(cid:9)0.001+Percentage of transactionsFee (Bitcoin)207merchants require a bookkeeping system for each user (to
issue a “claw-back” transactions). In contrast, we are here
interested in a decentralized payment system where users
can make micropayments to anyone.
Lottery-based Micropayments.
Wheeler [19] and Rivest [18] suggested a intriguing ap-
proach to overcome the cost of bookkeeping for small trans-
actions. The idea in both works is to employ probabilistic
“lottery-based” payments: to provide a payment of X, the
payer issues a “lottery ticket” that pays, say, 100X with
probability 1
100 . In expectation, the merchant thus receives
100 · 100X = X, but now (in expectation) only 1 in a hun-
1
dred transactions “succeeds”, and thus the transaction cost
becomes 100 times smaller. Several implementations of this
idea subsequently appeared; most notable among them is
the Peppercoin scheme by Micali and Rivest [15] which pro-
vided a convenient non-interactive solution.
However, these elegant ideas all require a trusted third
party—either a bank or an electronic payment companies
(e.g., Visa and Mastercard)—to coordinate the transactions.
In this case, the trusted party cannot be veriﬁed or audited
to ensure that it is performing its job correctly. Further-
more, to implement these systems in today’s economy re-
quires a global change to banks and/or electronic payment
companies that handle transactions. Consequently, such so-
lution have gained little traction in real-life system.
Cryptocurrency-based Micropayments.
In this paper, we propose cryptocurrency-based micropay-
ment systems. We follow the lottery-based approach put
forth by Wheeler [19] and Rivest [18] and show how to imple-
ment such an approach using any suitable crypto-currency
system. We provide two main solutions:
• Using the current Bitcoin/altcoin scripting language,
we provide an implementation of lottery-based micro-
payments that only relies on a publicly-veriﬁable third
party; that is, anyone can verify that the third party
is correctly fulﬁlling its proper actions. This solution
also enables performing transaction with fast valida-
tion times (recall that standard Bitcoin transactions
require roughly 10 minute validations, which is unde-
sirable in the context of micropayments). Using this
solutions, bitcoin-based micropayments can be imple-
mented today without any change to the current in-
frastructure.
• We also suggest simple modiﬁcations to the Bitcoin
scripting language that enables implementing lottery-
based micropayments without the intervention of any
third party. Furthermore, this scheme can be directly
implemented in the Ethereum currency [7] without any
modiﬁcation to the scripting language.
(Validation
times for transaction, however, are no longer faster
than in the underlying cryptocurrency.)
At a high-level, the idea behind our solution is the following:
The user starts by transferring 100X into an “escrow”. This
escrow transaction has an associated “puzzle”, and anyone
that has a solution to this puzzle can spend the escrow.
Roughly speaking, the solution to the puzzle consists of a
signed transcript of a cryptographic coin-tossing protocol
(where the signature is w.r.t. to the user’s public key) such
that the string computed in the coin-tossing ends with 00 (an
event that happens with probability 1/100 by the security
of the coin-tossing protocol).
Whenever the payer wants to spend X, it engages with a
merchant in a coin-tossing protocol and agrees to sign the
transcript. The merchant thus receives a signed coin-tossing
transcript in every transaction, and additionally, with prob-
ability 1/100, the coin-tossing transcript yields a solution
to the puzzle (i.e., the string computed in the coin-tossing
protocol ends with 00). The merchant can thus spend the
money (i.e., 100X) placed in escrow.
This approach, which we refer to as MICROPAY1, how-
ever, cannot be directly implemented today because of limi-
tations in crypto-currency scripting languages. Additionally,
as mentioned above, validation times for Bitcoin transac-
tions are high which makes Bitcoin undesirable for micropay-
ments. (Neither issue is inherent for cryptocurrencies and
thus MICROPAY1 may be the best solution for low-latency
cryptocurrencies with expressive scripting languages.)
Our next solution, MICROPAY2, makes use of a veriﬁable
trusted third party—which we refer to as a Veriﬁable Trans-
action Service (VTS)—to overcome these issues. Roughly
speaking, the VTS performs a speciﬁc polynomial-time com-
putation and signs certain messages in case the computa-
tions produce a speciﬁed desired result:
in our case, the
VTS checks whether a coin-tossing transcript is “winning”,
and if so it “releases” the escrow by signing some release
transaction. Thus, anyone can verify that the VTS only
signs messages correctly (by checking that the computation
indeed gave the desired result). Furthermore, the VTS is
only invoked on “winning” transactions (i.e., on average ev-
ery 1/100 transactions.) and can thus handle a large vol-
ume of transactions. Additionally, if the VTS only agrees
to sign the escrow release once, MICROPAY2 implements
fast transaction validation times. That is, merchants can be
assured that as long as the VTS is acting honestly, as soon
as they receive back a signature from the VTS, they will
receive their payment without having to wait 10 minutes for
the transaction to appear on the block-chain. Furthermore,
if the VTS is acting dishonestly (i.e., if it signs multiple
times), this will be observed. (Using a standard approach
with locktime, our protocol can also be slightly modiﬁed to
ensure that the user can always recover its money from the
escrow within some pre-determined expiration time.)
Finally, MICROPAY2 can be modiﬁed into a solution
called MICROPAY3 where the VTS never needs to be acti-
vated if users are honest—i.e., it is an “invisible” third party.
This solution, however, cannot have faster validation times
than the underlying cryptocurrency.
Generalization to “Smart-Contracts”.
We mention that our solution provides a general method
for a user A to pay x to diﬀerent user B if some pre-determined
polynomial-time computation produces some speciﬁc output
(in the micropayment case, the polynomial time computa-
tion is simply checking whether the most signiﬁcant two bits
of the random tape are 00.)
Projects like Ethereum [7] provide Turing-complete script-
ing languages for crypto-currencies. These systems require a
much more sophisticated mechanism to evaluate the scripts
associated with transactions in order to prevent attacks.
Our methods enable extending these “smart-contract” to
deal with probabilistic events (such as our micro-payment
208“lottery-tickets”). Furthermore, we enable using other cur-
rent cryptocurrencies (such as Bitcoin) to implement a large
class of “smart-contracts” even if the contract may be writ-
ten in a more complex language than what is currently
supported by the scripting languages for the currency. Fi-
nally, our method enables using “soft” contracts, where the
polynomial-time processes that determines if A should pay x
to B may take as inputs also facts about the world (e.g., the
whether the “Red Sox beat Yankees” in a particular game),
or the process may even be speciﬁed in natural language, as
long as the outcome of the process can be publicly veriﬁable.
Applications of our Micropayment System.
We outline some applications that may be enabled by our
system. We emphasize that none of these applications re-
quire any changes to current transactional infrastructures.
To make these applications feasible however, it is critical
that the user only needs to setup once, and be able to in-
teract with any number of merchants, as opposed, to say,
a “channels” system which requires the user to perform a
diﬀerent escrow transaction with each merchant.
An Ad-Free Internet: Our micropayment system could
be used to replace advertisements on the Internet. Users
can request an “ad-free version” of a webpage by us-
ing the protocol httpb:// (instead of http://) which
transparently invokes our micropayment protocol and
then serves a page instead of having the server display
an ad on the requested page. In Section 4, we report
on an implementation of this idea.
Pay-as-you-go Games and Services: Our micropayment
system could be used to enable pay-as-you go WiFi in-
ternet connections where users pay for every packet
they send.
Internet content providers (e.g., newspa-
pers, magazines, blogs, music and video providers) and
game-writers could charge for every item requested by
the user, or for game-playing by the minute.
Generalized wagering In some of our schemes, a trusted
party is used to sign a message if a certain event occurs.
In our case, the event relates to a coin-tossing protocol
that is executed between two parties. In general, one
can imagine that the trusted-party signs statements
about worldly events that have occurred such as “Red
Sox beat Yankees” or “Patriots win Super Bowl”, or
interpret the outcome of contracts written in natural
language. Using such a party, our protocols can be
generalized to enable wagers that are implemented en-
tirely without a bookkeeper, and only require the par-
ties to trust a 3rd party who can digitally sign facts
that can be publicly veriﬁed.