title:Please Permit Me: Stateless Delegated Authorization in Mashups
author:Ragib Hasan and
Marianne Winslett and
Richard M. Conlan and
Brian Slesinsky and
Nandakumar Ramani
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
Please Permit Me: Stateless Delegated Authorization in Mashups
Ragib Hasan, Marianne Winslett
Department of Computer Science
University of Illinois at Urbana-Champaign
Urbana, IL 61801
{rhasan,winslett}@cs.uiuc.edu
Richard Conlan, Brian Slesinsky,
and Nandakumar Ramani
Google Inc.
Mountain View, CA 94043
{zeveck,skybrian,nramani}@google.com
Abstract
Mashups have emerged as a Web 2.0 phenomenon, con-
necting disjoint applications together to provide uniﬁed ser-
vices. However, scalable access control for mashups is dif-
ﬁcult. To enable a mashup to gather data from legacy ap-
plications and services, users must give the mashup their
login names and passwords for those services. This all-or-
nothing approach violates the principle of least privilege
and leaves users vulnerable to misuse of their credentials
by malicious mashups.
In this paper, we introduce delegation permits – a state-
less approach to access rights delegation in mashups – and
describe our complete implementation of a permit-based
authorization delegation service. Our protocol and imple-
mentation enable ﬁne grained, ﬂexible, and stateless access
control and authorization for distributed delegated autho-
rization in mashups, while minimizing attackers’ ability to
capture and exploit users’ authentication credentials.
1 Introduction
Mashups have become popular as a rapid method of cre-
ating a new service through composition of several differ-
ent existing services on the Web [21]. Mashups provide the
user with an integrated view of the information that they
gather from back-end services, which can be stand-alone
websites (such as the bank and ﬁnancial service sites ac-
cessed by Mint.com [2]), or web services accessed via web-
APIs (such as ﬂickr’s photo API). Since building a mashup
from existing applications and services is much easier than
building a comparable service from scratch, mashups have
proliferated on the Internet [14, 27].
Providing a framework for authorization in a mashup is
difﬁcult. Typically, users give the mashup their authentica-
tion credentials for the back-end services that the mashup
will access. The mashup then goes on to impersonate the
user to those back-end services, and gain access to those
services in the same manner as the user would. The back-
end services do not differentiate between the user access-
ing the service and the mashup accessing the service on be-
half of the user. Further, access to the back-end services is
all-or-nothing – users delegate all of their privileges to the
mashup, or else none of them.
A mashup built in such manner introduces many secu-
rity and privacy risks. For example, if the mashup server is
compromised, the attacker can take over all the accounts in
the back-end services by capturing the user authentication
credentials stored in the mashup. Also, mashups often get
more privileges than they really need. For example, even if
the mashup just needs to read a user’s calendar, the mashup
will receive all of the user’s calendar privileges.
To solve these security vulnerabilities, ﬁner-grained del-
egation of access rights is needed. Speciﬁcally, we need ac-
cess delegation for mashups, in which users can selectively
delegate their back-end service privileges to the mashup.
In this paper, we make the following contributions toward
solving this problem: we identify the mashup authorization
requirements by examining the problem domain and exist-
ing solutions; we provide a scalable, stateless protocol for
access delegation using delegation permits; and we describe
our implementation of delegation permits and their associ-
ated protocols, which we developed for real applications.
The rest of the paper is organized as follows: we discuss
existing mashup authorization models and their limitations
in Section 2. We describe our permit-based approach, pro-
tocols, and the architecture of our prototype in Section 3.
Section 4 describes related work in the ﬁeld of distributed
authorization. Finally, we conclude in Section 5.
2 Mashup Authorization:
Current Solutions
Problems and
In this section, we explore the mashup authorization
problem and its associated security issues.
Figure 1 shows the architecture used by most mashups.
When registering herself at the mashup application, the user
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.24
DOI 10.1109/ACSAC.2008.24
163
173
If the user successfully logs in and
the web application.
grants access, Google Accounts redirects the user back to
the web application URL. The redirect contains an authen-
tication token good for one use; it can be exchanged for a
long-lived token. The web application contacts the Google
service, using the authentication token to act as an agent for
the user. If the Google service recognizes the token, it will
supply the requested data.
OAuth [4] is a new protocol for distributed authentica-
tion, and is designed to allow a consumer application to get
limited access to a service provider, as granted by the user.
In OAuth, a consumer application wishing to access a ser-
vice gets an unauthorized request token from the service.
This token is given to the user, and the user is redirected
to the service provider. The service provider gets user ap-
proval for the request, converts the token to an authorized
request token, and redirects the user to the consumer appli-
cation. The consumer extracts the authorized request token,
and uses it to get an access token containing a shared secret
from the service. The consumer can later use the token se-
cret together with the access token to access resources at the
service. OAuth requires the service to maintain the state of
all previously issued token secrets and access tokens.
Discussion. While the authorization schemes described
above are widely used in current-generation mashups, they
have serious limitations. The strawman scheme requires the
user to trust the mashup completely. The mashup receives
all the privileges the user has in a back-end service, and
there is no way for the user to restrict the mashup’s capa-
bility. A compromised mashup can leak user credentials or
impersonate the user maliciously. There is no explicit re-
vocation; the mashup can impersonate a user at back-end
services until the user changes her credentials manually at
the back-end. Some mashups will, of course, let the user re-
move credentials from the system, but this requires trusting
the mashup completely.
Phishing is another signiﬁcant risk in the strawman
schemes [12]. An attacker can set up a look-alike site im-
personating a mashup and send phishing emails to users.
Gullible users can visit the phishing site and reveal their
usernames and passwords for the back-end services.
OAuth is a better approach in this regard, and promises
to solve the trust delegation problem. However, it assumes
a stateful server to provide nonces and ensure tokens are
single-use, which does not scale well [4]. Many IdPs and
in-house single sign-on solutions may be cookie-based with
stateless servers; thus setting up an OAuth instance would
require dedicated resources and support. The OAuth core-
spec [4] also does not deﬁne access restrictions or scope.
Google’s AuthSub [13], on the other hand, requires a
RPC API call to validate the token. The token itself is an
opaque identiﬁer with no information about what back-end
service, mashup, and user the token pertains to. Therefore,
Figure 1. Architecture of a typical mashup
adds back-end services to her proﬁle. Usually the user al-
ready has credentials (typically logins and passwords) that
allow her to authenticate herself to each of these back-end
services directly. During registration at the mashup, the user
gives the mashup her authentication information at each of
the back-end services. Later, during actual use, the user logs
into the mashup. The mashup contacts an identity provider
(such as the box labeled IdP in Figure 1), which veriﬁes
the user’s identity. The identity provider can be a local ser-
vice running in the same domain as the mashup, or a global
service such as OpenID [28]. After the user logs in at the
mashup, the mashup goes to the back-end services deﬁned
in the user’s proﬁle and accesses them on her behalf. Some
of the back-end services may have mashup support via an
API, while some others may not have any built-in support
for mashups. In the latter case, the mashup impersonates
the user, and logs into the back-end services via a simu-
lated browsing session. Some mashups also rely on screen
scraping, making them complicated and brittle. In any case,
the back-end services cannot differentiate between the user
logging in directly, and the mashup impersonating the user.
In the remainder of the paper, we refer to this as the straw-
man approach. This approach is adopted by, for example,
the personal ﬁnance mashups Mint.com and Yodlee.com,
which provide a summary of a user’s ﬁnancial activities
by accessing ﬁnancial data from back-end services such as
banks and credit card companies. A variant of the straw-
man approach uses HTML IFRAME tags. The mashup cre-
ates an IFRAME for each of the back-end services, and the
user logs into them. The mashup extracts data from the
IFRAMEs and displays it to the user. AuthSub [13] is
a protocol designed and deployed by Google for authoriza-
tion of Google services. In AuthSub, when the web applica-
tion needs to access the user’s Google service data, it makes
an AuthSub call to the Google Accounts URL. Google Ac-
counts responds with an “Access Consent” page. This page
prompts the user to log into their Google account and grant
or deny access to the Google service. If the user denies ac-
cess, she is directed to a Google page rather than back to
164174
to decipher a token, additional RPC calls are required. An
AuthSub interaction only grants a single-use token. Getting
a session token requires an additional step, and the client
must explicitly revoke the session token at the end of the
session. Explicit revocation of the token may be awkward
in typical usage and in error situations, or even impossible;
thus there may be many valid, long-lived tokens ﬂoating
around. To allow the user to review and revoke any such
leftover tokens from previous session, the AuthSub server
must keep state for all issued session tokens. The resulting
state maintenance problems make this approach unscalable.
To remedy this problem, AuthSub has limited the number of
tokens that can be issued at one time. The AuthSub speciﬁ-
cation does not allow “more than ten valid tokens per user,
per web application” [13].
AuthSub requires registration of both back-end and
front-end services. The latter is required in part so that all
requests from the front-end applications (mashups) to Auth-
Sub servers can be signed by the front-end in order to issue
a secure token. The registration also allows the front-end to
pre-supply a description of the authorization request, which
is displayed by AuthSub to the user. Mashup developers
consider registration to be cumbersome, and requiring each
front-end to have its own certiﬁcate is burdensome.
Registration headaches aside, an AuthSub request is less
verbose and ﬂexible than the approach that we propose in
this paper. Notably, AuthSub requires the mashup to issue a
separate token request for each back-end service that it ex-
pects to access on the user’s behalf, resulting in many RPC
calls to the AuthSub server. AuthSub access decisions are
all-or-nothing; there is no notion of requesting a particular
level of service. Finally, AuthSub-based solutions do not, at
present, handle key rotation on the server side.
Based on the discussion above, we can list the common
issues and requirements in mashup authorization.
• Delegation and trust.
Users should not have to
provide their user authentication information to the
mashup. Authorization information/tokens should not
be stored in the mashup; rather, such sensitive autho-
rization information should be stored at the user side.
Authorization tokens should have a limited lifespan,
and the user should be able to revoke them, if neces-
sary, before their expiration time.
• Maintaining state. To be scalable, the mashup autho-
rization system should be stateless. It is not reasonable
to assume that the back-end services maintain the state
for the authorization tokens that they have issued to
various mashups. Such detailed state maintenance is
not feasible in real life applications and services.
• Fine grained control. Users should be able to pro-
vide ﬁne-grained delegation. In other words, mashups
should receive exactly the permissions they require
to function. For example, if all a mashup needs is
165175
to read user data from a back-end service, then the
mashup should only receive READ permission instead
of READ-WRITE permission.
3 Delegation Permits
In real life, people get permits for ﬁshing, driving, en-
tering national parks, and many other activities. Such per-
mits typically include the name of the issuer, the person to
whom it is issued, the issue date, expiration time, and pur-
pose of the permit. The person who checks permits does not
have to know the permit-holder, nor does she have to con-
tact the permit issuer to decide whether the holder is autho-
rized. This makes the authorization process decentralized
and scalable.
Our approach mimics real-life permit-based authoriza-
tion schemes.
In our model, a mashup asks the user to
grant it delegation permits, which are unforgeable, limited-
lifetime, digital tokens specifying the access rights to spe-
ciﬁc services. The user can see what permissions the
mashup is requesting, and must approve the request be-
fore the permit can be issued. Once a permit is issued, the
mashup can use it until the permit expires or is revoked.
When the mashup accesses a back-end service, it sends
the appropriate permit along with its request. The back-end
service makes its own authorization decisions based on the
permit. The user can review the permits they have issued
as well as indicate whether any given permit should be re-
newed, revoked, or modiﬁed.
a
More
formally,
delegation
permit
P (U, M, A, I, E, R, sig) with issuance time I, expi-
ration time E, and signature sig is an unforgeable token
issued at the behest of user U to mashup M, in order to
delegate selected access rights at the back-end application
or service A. The access rights are represented by a set
R of user-intelligible string-valued permit descriptors.
The back-end service must trust the issuer who signs the
permit; the back-end service can verify the signature using
the public key of the issuer.
In general, a mashup that
presents an untampered, unexpired permit to A will be able
to obtain certain authorizations as speciﬁed in R. However,
permits do not directly represent authorization decisions;
the back-end server has ﬁnal authority over what actions
the mashup can take.
Permit descriptors are free-form text deﬁned by a back-
end service, and made available to everyone, which denote
the different levels of access supported by the back-end ser-
vice. The format and semantics of the descriptors are de-
cided by each back-end. For example, a back-end may
use the descriptor “MyBugTracker READ-ONLY” to de-
note read-only access, while another back-end service may
choose to use “MyProjectDB RD-ONLY”. The back-end
services also make available a human readable explanation
string for each of the permit descriptors. The descriptors
also allow multiple levels of delegation: if a permit descrip-
tor ends in a *, then it can be further delegated. For example,
if a mashup receives a permit with “READ*”, it can issue a
new permit to another application that effectively encapsu-
lates the old permit, and provides a subset of the function-
ality of the original permit. Descriptors can be separated
with a /, and any subset can be further delegated. For in-
stance: the permit descriptor “READ*/WRITE*” allows the
recipient mashup to delegate the following permits to oth-
ers: READ, WRITE, READ/WRITE, READ*, WRITE*,
READ*/WRITE*, READ*/WRITE, READ/WRITE*.
Anyone can verify the signature on a permit, using the
issuer’s public key. When a back-end service is presented
with an unexpired, untampered permit from an issuer that
it trusts, the service can verify the permit locally with its
copy of the issuer’s public key, with no additional messages.
Speciﬁcally, the back-end server will not need to interact
with any remote party before authorizing the bearer of the
permit to carry out its requested actions.
In general, possession of an unexpired, untampered per-
mit with the appropriate permission descriptors is sufﬁcient
in itself to authorize a user at a service that trusts the per-
mit issuer. Because knowledge of a permit is sufﬁcient to
authenticate a user to the service, permits must be kept se-
cret. For this reason, we will only transfer permits across
the internet using SSL, unless the back-end service that the
permit is destined for requires authentication purely for in-
formative, rather than security, purposes.
A major advantage of delegation permits is that the back-
end can differentiate between the user logging in and a
mashup logging in on behalf of the user. This allows the