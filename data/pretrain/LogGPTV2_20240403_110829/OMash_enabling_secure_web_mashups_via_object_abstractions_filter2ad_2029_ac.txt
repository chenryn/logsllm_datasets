}
function doSomethingToResource()
{
resourceInterface.doSomething(token, ...);
}
(b) http://a.com/integrator.html, which calls the code in Fig-
ure 4(a)
Figure 4: Access-controlled content example:
a.com authenticates itself to the resource b.com
Integrator
exception to it. An ideal implementation would only allow a doc-
ument to access its own contents and the getPublicInterface
function getPublicInterface()
{
function Interface()
{
this.registerC = function (referenceToC)
{
var cInterface =
referenceToC.getPublicInterface();
// Verify C really is who it claims to be by
// calling its methods to get information,
// e.g. certificates
...
}
}
return new Interface();
}
(a) http://b.com/resourceB.html, provider for resource B. (re-
source C is similarly declared)
...
var bWindow =
document.getElementById("b").contentWindow;
var bInterface =
resourceWindow.getPublicInterface();
var cWindow =
document.getElementById("c").contentWindow;
...
function hookUpBWithC()
{
bInterface.registerC(cWindow);
}
(b) http://a.com/integrator.html, the integrator that connects re-
sources B and C
Figure 5: Sibling resources example:
b.com with c.com
Integrator connects
function of other pages. We reserve modifying Firefox’s security
manager in such a way for future work.
5.2 Mediating Authentication Credentials
Cross-domain XMLHttpRequest can be allowed by setting the
preference in Table 3.
Preference Name
capability.policy.default.
XMLHttpRequest.open
Value
"allAccess"
Table 3: Setting preference in Mozilla’s CAPS to allow cross-
domain XMLHttpRequest
Setting some other preferences is also required to allow the re-
sponse to be read without security violations. [22]
To make HTTP authentication and authentication cookies (cook-
ies with our proposed Authentication attribute) private data, we
associate these items with the browser tab that contains the page
using Firefox 2’s Session store API [7]. When such information is
set by a site, it is placed in the data store for the tab that received the
information. Since Firefox makes it possible to view and modify
HTTP headers it is possible to capture such information. However,
since it is possible for a web site to set a cookie in a script (i.e. by
setting document.cookie), we had to make a small change to the
source code in order to capture all cookie-related events. To allow
for multiple independent sessions to exist at once, we also augment
the stored authentication information with a unique identiﬁer cor-
responding to the tab that received the information, as well as the
location of the source window in the window hierarchy (to allow for
nested s). Thus, a user is able to log into the same site
more than once in a different tab or window and the authentication
information will be kept separately.
For each outbound request that would send authentication in-
formation under the current browser policy (i.e. with no regard
for who initiates the request), we only send the information if it is
found in the data store of the tab that initiated the request. This data
is copied to new tabs and windows created as the result of actions
on the current page, such as a link click. The data for the tab is
discarded if the new page does not match the domain of the stored
authentication.
6. POTENTIAL COMPLICATIONS
Since our model does not rely on the Same Origin Policy, it
might cause the following complications for websites using our
model.
6.1 Named Windows and Frames
Each window object has a property name that can be used as a
target for links, form submissions, and for opening a new win-
dow. This name can be introduced via an explicit assignment to
window.name, via window.open("url", "name"), or by setting
the name attribute when creating a , or . An ex-
ample of its use is when a user clicks on the link text the URL aURL will load in the
window named someName, or in a new window if no window with
that name currently exists.
In the case of links and form sub-
missions, this has the potential to navigate an existing window
to the given URL, disrupting the user’s browsing experience.
If
cross-domain communication is taking place via fragment identi-
ﬁers [9], this could disrupt their communication. Still, these are
relatively minor problems. However, a script can gain a refer-
ence to an open window with name windowName via var win =
window.open("", "windowName") (if no window with that name
exists, an empty window will be created). In our testing, we found
that Opera did not consider frame names when searching for a
matching window name, only top-level window names, while In-
ternet Explorer and Mozilla Firefox considered both.
In current
browsers, the Same Origin Policy determines whether or not ac-
cess to elements inside this window (e.g. win.document) is al-
lowed. In our proposal, access is permitted via the public interface
of the page. Assuming the page’s interface is tailored to the se-
curity level of its content, being accessible in this manner should
not be a problem; simply allow access based on valid credentials.
However, it is possible for the application developer to introduce a
named  or  that a malicious website could obtain
a reference to in order to disrupt the user’s browsing experience.
s and s are often constructed with the name
attribute set, to facilitate easy access via the window.frames prop-
erty, e.g. window.frames["frameName"]. A named frame can
also be accessed via window.frameName and window.frames[x]
(where x is the index corresponding to the frame, e.g. 0, 1, etc.).
However, dropping the name attribute for the aforementioned rea-
sons and instead using window.frames[x] can be awkward in the
presence of multiple frames. As an alternative, use the frame’s id
attribute in the same manner as in Section 3:
var innerWindow =
document.getElementById("frameID").contentWindow;
var innerInterface =
innerWindow.getPublicInterface();
6.2 Sibling Frames
As described by Jackson and Wang in Subspace [19], Firefox
(along with Safari, Internet Explorer 7, and some conﬁgurations of
Internet Explorer 6) allows the frame structure of a page to be nav-
igated regardless of the domains involved (Opera restricts access to
frames). Thus, a sibling frame with the name attribute set to bar
can reference its sibling frame with name foo as discussed in the
previous section via parent.frames["foo"] or parent.foo or
parent[x]. If the sibling frame foo has a getPublicInterface
function, bar can call it. Again, for the same reasons discussed
in the previous section, this should not be a problem given care-
ful design of the public interface of the page. However, in the
event the developer wants to simply ensure the frames cannot reach
each other, this is not currently possible, at least to our knowledge.
For instance, in Firefox frames = null; will work, but frames
can be restored via delete frames;, even if the caller is child
frame5. Thus, even without the name attributes set, sibling frames
are still reachable via frames[x]. However, it turns out that it
is possible to make Firefox restrict access to the frames attribute
from another domain by setting "capability.policy.default.
Window.frames.get" to "sameOrigin" (but setting ".set" to
"sameOrigin" has no apparent effect).
6.3 Inheritance of Authentication Credentials
Since OMash considers authentication credentials as part of a
page’s private data, web authentication under OMash exhibits dif-
ferent semantics than under the Same Origin Policy. Under the
Same Origin Policy, all pages from the same origin share authen-
tication credentials. OMash tries to simulate these semantics by
passing authentication credentials associated with a page P to other
pages that are loaded via an action on P (e.g., clicking a link). We
are currently working on techniques that can simulate these seman-
tics when the user clicks the “Back” button or selects a bookmark.
7. RELATED WORK
SMash [21] proposes a model where different trust domains can
create isolated components of content and code, and interact via
publish and subscribe messages. It isolates components using the
iframe tag, and URL fragment identiﬁers allow the frames to es-
tablish communication links. The implementation as part of Ope-
nAjax [6] provides a JavaScript library and API to run on unmod-
iﬁed browsers. SMash addresses earlier problems of using frag-
ment identiﬁers caused by browsers allowing complete navigation
of other frames, even of different origins. It extends the fragment
messaging protocol with a shared secret to ensure link integrity and
prevents frame-phishing with a combination of event handlers and
messages during frame unloads. However, the messaging protocol
in version 1.1 of OpenAjax was vulnerable to an attack discovered
by Barth et al. [8], allowing the attacker to impersonate messages
between components. Since our abstraction allows for direct func-
tion calls for code communication, we avoid use of the fragment
5Surprisingly, delete parent.frames; works even if their do-
mains are different; this is likely a bug.
identiﬁer messaging, which was not designed for use in this man-
ner and lacks desirable security properties for secure messaging.
As mentioned in section 2.2, we talk in terms of MashupOS’s
names for the various trust levels that are possible in a mashup.
MashupOS proposes its own abstractions for the missing trust lev-
els: for access-controlled content,  and
CommRequest and for unauthorized content,  and
. While their abstractions cover all the trust levels,
they still rely on the Same Origin Policy for enforcement, as well as
requiring browser writers and application developers to support and
use several different abstractions. Our approach can support all the
different trust levels with a single simple yet ﬂexible abstraction,
and do away with the Same Origin Policy and its problems at the
same time.
We also build on the technique described by Jackson and Wang
in Subspace [19] for allowing safe cross-subdomain communica-
tion (which is, from the point of view of the SOP, communica-
tion between different origins) by adopting their idea of passing
JavaScript closures between different pages.
A recent project by Google name Caja [14], also allows web ap-
plications of different trust domains to directly communicate with
JavaScript function calls and reference passing. With the realiza-
tion that a subset of JavaScript is an object-capability language, it
is possible to translate scripts to this enforced subset and to grant
these scripts only the privileges they require. It is therefore possi-
ble to isolate scripts from each other and from the global execution
environment (i.e. the browser window) to the degree needed. As it
is merely an enforced subset of JavaScript, Caja has the advantage
of requiring no changes to any web standards.
Even though our handling of authentication information could
allow the same-origin restriction on XMLHttpRequest to be lifted,
we believe that the proposed JSONRequest [12] is a good candidate
for safe cross-domain data exchange since JSONRequest does not
send any HTTP authentication or cookies. A prototype implemen-
tation exists as an extension for Mozilla Firefox [17]. JSON itself
enjoys widespread use as a data interchange format, and is being
used by, for example, Yahoo! [27] and Google [15].
Reis et al [23] propose a set of abstractions for a new browser
to allow web applications to run safely. They propose that proper
identiﬁcation of the components that make up a web programs be
used to delineate boundaries rather than the Same Origin Policy.
We provide a mechanism, the shared secret key, by which different
components of a web application from the same origin or different
origins can authenticate each other from the getPublicInterface
function.
8. CONCLUSION
We have presented OMash, a new security model based on ob-
ject abstractions to allow web pages from different domains to in-
teract in a safe, controlled manner. Our simple model, based on
the familiar notion of public interfaces, allows mashup integrators
to deﬁne various trust relationships between the integrators and
providers. OMash does not rely on the Same Origin Policy for
controlling DOM access or cross-domain data exchange and there-
fore avoids all its pitfalls and vulnerabilities. To support legacy web
applications, OMash can be conﬁgured to be backward compatible
with the Same Origin Policy. We have implemented a prototype
of OMash as an extension to Mozilla Firefox 2.06 and showcased
sample applications.
6We also had to modify three lines of Firefox source code.
Acknowledgments
This research is partially supported by NSF CNS award 0644450
and by an AFOSR MURI award. The authors wish to thank Helen
Wang, Liang Cai, Yuan Niu, and Matthew Van Gundy for their
helpful feedback.
9. REFERENCES
[1] Craigslist. http://www.craigslist.org/, 2008, (accessed
August 10, 2008).
[2] Google Maps. http://maps.google.com/, 2008, (accessed
August 10, 2008).
[3] Google Maps API. http://www.google.com/apis/maps/,
2008, (accessed August 10, 2008).
[4] HousingMaps. http://www.housingmaps.com/, 2008,
(accessed August 10, 2008).
[16] N. Hardy. The Confused Deputy: (or why capabilities might
have been invented). SIGOPS Operating Systems Reviews,
22(4):36–38, 1988.
[17] C. Jackson. JSONRequest Extension for Firefox.
http://crypto.stanford.edu/jsonrequest/, 2007,
(accessed August 10, 2008).
[18] C. Jackson, A. Barth, A. Bortz, W. Shao, and D. Boneh.
Protecting Browsers from DNS Rebinding Attacks. In
Proceedings of the 14th ACM Conference on Computer and
Communications Security (CCS 2007), pages 421–431, New
York, NY, USA, 2007. ACM.
[19] C. Jackson and H. J. Wang. Subspace: Secure Cross-Domain
Communication for Web Mashups. In Proceedings of the
16th International World Wide Web Conference
(WWW2007), pages 611–620, New York, NY, USA, May
2007. ACM.
[5] JSON. http://www.json.org/, 2008, (accessed August
[20] C. Karlof, U. Shankar, J. Tygar, and D. Wagner. Dynamic
10, 2008).
[6] OpenAjax Alliance. http://www.openajax.org/, 2008,
(accessed August 10, 2008).
[7] Session store API. http://developer.mozilla.org/en/
docs/Session_store_API, January 2008, (accessed
August 10, 2008).
[8] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame
communication in browsers. In Usenix Security Symposium,
2008.
[9] J. Burke. Cross Domain Frame Communication with
Fragment Identiﬁers.
http://tagneto.blogspot.com/2006/06/
cross-domain-frame-communication-with.html, June
2006, (accessed August 10, 2008).
[10] R. Cornford. Javascript Closures. http:
//www.jibbering.com/faq/faq_notes/closures.html,
March 2004, (accessed August 10, 2008).
[11] D. Crockford. Private Members in JavaScript. http:
//www.crockford.com/javascript/private.html,
2001, (accessed October 31, 2007).
[12] D. Crockford. JSONRequest.
http://www.json.org/JSONRequest.html, 2006,
(accessed August 10, 2008).
[13] M. Foundation. Public Sufﬁx List: Learn more about the
Public Sufﬁx List. http://publicsuffix.org/learn/,
2008, (accessed August 10, 2008).
[14] Google. google-caja.
http://code.google.com/p/google-caja/, 2008,
(accessed August 10, 2008).
[15] Google. Using JSON with Google Data APIs.
http://code.google.com/apis/gdata/json.html,
2008, (accessed August 10, 2008).
Pharming Attacks and Locked Same-origin Policies for Web
Browsers. In Proceedings of the 14th ACM Conference on
Computer and Communications Security (CCS 2007), pages
58–71, New York, NY, USA, 2007. ACM.
[21] F. D. Keukelaere, S. Bhola, M. Steiner, S. Chari, and
S. Yoshihama. Smash: secure component model for
cross-domain mashups on unmodiﬁed browsers. In WWW
’08: Proceeding of the 17th international conference on
World Wide Web, pages 535–544, New York, NY, USA,
2008. ACM.
[22] Z. Leatherman. Cross Domain XHR with Firefox.
http://www.zachleat.com/web/2007/08/30/
cross-domain-xhr-with-firefox/, August 2007,
(accessed August 10, 2008).
[23] C. Reis, S. D. Gribble, and H. M. Levy. Architectural
principles for safe web programs. In Sixth Workshop on Hot
Topics in Networks, 2007.
[24] J. Ruderman. The Same Origin Policy.
http://www.mozilla.org/projects/security/
components/same-origin.html, August 2001, (accessed
August 10, 2008).
[25] J. Ruderman. Conﬁgurable Security Policies (CAPS).
http://www.mozilla.org/projects/security/
components/ConfigPolicy.html, April 2006, (accessed
August 10, 2008).
[26] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection
and Communication Abstractions for Web Browsers in
MashupOS. In Proceedings of the 21st ACM Symposium on
Operating Systems Principles (SOSP 2007), pages 1–16,
New York, NY, USA, October 2007. ACM.
[27] Yahoo! Using JSON with Yahoo! Web Services.
http://developer.yahoo.com/common/json.html,
2008, (accessed August 10, 2008).