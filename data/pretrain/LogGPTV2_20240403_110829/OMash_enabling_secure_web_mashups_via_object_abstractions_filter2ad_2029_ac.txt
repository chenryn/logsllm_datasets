# 优化后的文本

## 代码示例
```javascript
function doSomethingToResource() {
    resourceInterface.doSomething(token, ...);
}
```

- **(b) http://a.com/integrator.html** 调用图4(a)中的代码。

### 图4：访问控制内容示例
- `a.com` 对资源 `b.com` 进行身份验证。

## 公共接口函数
```javascript
function getPublicInterface() {
    function Interface() {
        this.registerC = function (referenceToC) {
            var cInterface = referenceToC.getPublicInterface();
            // 通过调用其方法来验证 C 是否是它所声称的身份，例如证书
            ...
        }
    }
    return new Interface();
}
```
- **(a) http://b.com/resourceB.html** 是资源 B 的提供者（资源 C 类似声明）。
- **(b) http://a.com/integrator.html** 是连接资源 B 和 C 的集成器。

### 图5：同级资源示例
- `b.com` 与 `c.com` 之间的集成。

## 修改 Firefox 安全管理器
我们保留未来对 Firefox 安全管理器进行修改的可能性。

### 中介认证凭据
跨域 XMLHttpRequest 可以通过设置表3中的偏好来允许。

| 偏好名称 | capability.policy.default.XMLHttpRequest.open |
|----------|----------------------------------------------|
| 值       | allAccess                                    |

表3：在 Mozilla 的 CAPS 中设置偏好以允许跨域 XMLHttpRequest。

为了使响应能够在没有安全违规的情况下被读取，还需要设置其他一些偏好。[22]

### 保护 HTTP 认证和认证 Cookie
我们将这些项目与包含页面的浏览器标签关联起来，使用 Firefox 2 的 Session store API [7]。当站点设置此类信息时，会将其放置在接收信息的标签的数据存储中。Firefox 允许查看和修改 HTTP 头，因此可以捕获此类信息。但由于网站可以通过脚本设置 Cookie（即通过设置 `document.cookie`），我们需要对源代码进行小改动以捕获所有与 Cookie 相关的事件。

为了允许多个独立会话同时存在，我们还将存储的认证信息与接收信息的标签的唯一标识符以及源窗口在窗口层次结构中的位置一起增强。这样，用户可以在不同的标签或窗口中多次登录同一站点，并且认证信息将分开保存。

对于每个会发送认证信息的出站请求（即根据当前浏览器策略，不考虑谁发起请求），我们仅在请求发起者的标签数据存储中找到该信息时才发送。当由于当前页面上的操作（如点击链接）创建新标签或窗口时，数据会被复制到新标签或窗口。如果新页面的域名与存储的认证信息不符，则丢弃标签的数据。

## 潜在问题
由于我们的模型不依赖于同源策略，可能会导致以下问题：

### 命名窗口和框架
每个窗口对象都有一个属性名称，可以用作链接、表单提交和打开新窗口的目标。此名称可以通过显式赋值给 `window.name`、通过 `window.open("url", "name")` 或在创建 `<iframe>` 或 `<frame>` 时设置 `name` 属性来引入。一个例子是，当用户点击链接文本时，URL 将在名为 `someName` 的窗口中加载，或者如果没有该名称的窗口存在，则会在新窗口中加载。

对于链接和表单提交，这有可能导航现有的窗口到给定的 URL，从而破坏用户的浏览体验。如果跨域通信是通过片段标识符 [9] 进行的，这可能会中断它们的通信。尽管这些问题相对较小，但脚本可以通过 `var win = window.open("", "windowName")` 获取具有名称 `windowName` 的打开窗口的引用（如果不存在具有该名称的窗口，则会创建一个空窗口）。在测试中，我们发现 Opera 在搜索匹配的窗口名称时只考虑顶层窗口名称，而 Internet Explorer 和 Mozilla Firefox 则同时考虑顶层窗口和框架名称。

在当前浏览器中，同源策略决定了是否允许访问此窗口内的元素（例如 `win.document`）。在我们的提案中，通过页面的公共接口允许访问。假设页面的接口针对其内容的安全级别进行了调整，这种方式应该是没有问题的；只需基于有效凭据允许访问即可。但是，应用程序开发人员可能会引入一个命名的 `<iframe>` 或 `<frame>`，恶意网站可能会获取对该窗口的引用，从而破坏用户的浏览体验。

通常，`<iframe>` 和 `<frame>` 都设置了 `name` 属性，以便通过 `window.frames` 属性轻松访问，例如 `window.frames["frameName"]`。命名框架也可以通过 `window.frameName` 和 `window.frames[x]`（其中 x 是框架的索引，例如 0, 1 等）来访问。然而，出于上述原因删除 `name` 属性并改为使用 `window.frames[x]` 在多个框架存在时可能会显得笨拙。作为替代方案，可以使用框架的 `id` 属性，如下所示：

```javascript
var innerWindow = document.getElementById("frameID").contentWindow;
var innerInterface = innerWindow.getPublicInterface();
```

### 同级框架
正如 Jackson 和 Wang 在 Subspace [19] 中所述，Firefox（以及 Safari、Internet Explorer 7 和某些配置的 Internet Explorer 6）允许导航页面的框架结构，而不考虑涉及的域（Opera 限制了对框架的访问）。因此，具有 `name` 属性设置为 `bar` 的同级框架可以通过 `parent.frames["foo"]` 或 `parent.foo` 或 `parent[x]` 引用其名称为 `foo` 的同级框架。如果同级框架 `foo` 有一个 `getPublicInterface` 函数，`bar` 可以调用它。同样，由于上一节讨论的原因，只要仔细设计页面的公共接口，这应该不是问题。然而，如果开发者希望确保框架之间无法互相访问，目前这是不可能的，至少据我们所知是如此。

例如，在 Firefox 中 `frames = null;` 会起作用，但可以通过 `delete frames;` 恢复框架，即使调用者是子框架也是如此。因此，即使没有设置 `name` 属性，同级框架仍然可以通过 `frames[x]` 访问。然而，事实证明，可以通过将 `"capability.policy.default.Window.frames.get"` 设置为 `"sameOrigin"` 来使 Firefox 限制从另一个域访问 `frames` 属性（但将 `.set` 设置为 `"sameOrigin"` 没有明显效果）。

### 认证凭据的继承
由于 OMash 将认证凭据视为页面的私有数据，OMash 下的 Web 认证表现出与同源策略下不同的语义。在同源策略下，来自同一来源的所有页面共享认证凭据。OMash 通过将与页面 P 关联的认证凭据传递给通过 P 上的操作（例如点击链接）加载的其他页面来模拟这些语义。我们目前正在研究技术，以在用户点击“后退”按钮或选择书签时模拟这些语义。

## 相关工作
SMash [21] 提出了一个模型，不同信任域可以创建内容和代码的隔离组件，并通过发布和订阅消息进行交互。它使用 `<iframe>` 标签隔离组件，并使用 URL 片段标识符允许框架建立通信链接。作为 OpenAjax [6] 的一部分实现提供了一个 JavaScript 库和 API，可以在未修改的浏览器上运行。SMash 解决了早期使用片段标识符的问题，因为浏览器允许完全导航其他帧，即使是不同来源的帧。它通过共享密钥扩展了片段消息协议，以确保链接完整性，并通过事件处理程序和框架卸载期间的消息防止框架钓鱼攻击。然而，OpenAjax 1.1 版本中的消息协议容易受到 Barth 等人 [8] 发现的攻击，允许攻击者冒充组件之间的消息。由于我们的抽象允许直接函数调用进行代码通信，我们避免使用片段标识符消息传递，后者并不是为此目的设计的，并且缺乏安全消息传递所需的理想安全特性。

如第 2.2 节所述，我们按照 MashupOS 对各种信任级别的命名方式进行讨论。MashupOS 为其自身的抽象提出了缺失的信任级别：对于受控内容，使用 `<AccessControlled>` 和 `CommRequest`，对于未经授权的内容，使用 `<Unauthorized>` 和 `<UnauthorizedRequest>`。虽然他们的抽象涵盖了所有信任级别，但仍依赖于同源策略进行强制执行，并要求浏览器编写者和应用程序开发人员支持和使用几种不同的抽象。我们的方法可以使用单一简单而灵活的抽象支持所有不同的信任级别，并同时摆脱同源策略及其问题。

我们还借鉴了 Jackson 和 Wang 在 Subspace [19] 中描述的技术，通过在不同页面之间传递 JavaScript 闭包来允许安全的跨子域通信（从同源策略的角度来看，这是不同来源之间的通信）。

Google 最近的一个项目 Caja [14] 也允许不同信任域的 Web 应用程序通过 JavaScript 函数调用和引用传递直接通信。随着认识到 JavaScript 的一个子集是一种对象能力语言，可以将脚本转换为这种强制子集，并仅授予这些脚本所需的权限。因此，可以将脚本彼此隔离，并从全局执行环境（即浏览器窗口）中隔离到所需程度。由于它只是 JavaScript 的强制子集，Caja 的优点是不需要对任何 Web 标准进行更改。

尽管我们对认证信息的处理可能允许取消对 XMLHttpRequest 的同源限制，但我们认为提议的 JSONRequest [12] 是安全的跨域数据交换的良好候选，因为 JSONRequest 不发送任何 HTTP 认证或 Cookie。Mozilla Firefox [17] 存在一个原型实现扩展。JSON 本身作为一种数据交换格式得到了广泛使用，例如 Yahoo! [27] 和 Google [15] 都在使用它。

Reis 等人 [23] 为新的浏览器提出了一组抽象，以允许 Web 应用程序安全运行。他们建议使用组成 Web 程序的组件的适当标识来划定边界，而不是同源策略。我们提供了一种机制，即共享密钥，通过 `getPublicInterface` 函数，不同来源的 Web 应用程序组件可以相互认证。

## 结论
我们介绍了 OMash，这是一种基于对象抽象的新安全模型，允许来自不同域的 Web 页面以安全、受控的方式交互。我们的简单模型基于熟悉的公共接口概念，允许 mashup 集成器定义集成器和提供商之间的各种信任关系。OMash 不依赖于同源策略来控制 DOM 访问或跨域数据交换，因此避免了它的所有陷阱和漏洞。为了支持遗留 Web 应用程序，OMash 可以配置为向后兼容同源策略。我们已经实现了 OMash 的原型，作为 Mozilla Firefox 2.06 的扩展，并展示了示例应用程序。

## 致谢
这项研究部分由 NSF CNS 奖励 0644450 和 AFOSR MURI 奖励资助。作者感谢 Helen Wang、Liang Cai、Yuan Niu 和 Matthew Van Gundy 的有益反馈。

## 参考文献
[1] Craigslist. http://www.craigslist.org/, 2008, (accessed August 10, 2008).
[2] Google Maps. http://maps.google.com/, 2008, (accessed August 10, 2008).
[3] Google Maps API. http://www.google.com/apis/maps/, 2008, (accessed August 10, 2008).
[4] HousingMaps. http://www.housingmaps.com/, 2008, (accessed August 10, 2008).
[16] N. Hardy. The Confused Deputy: (or why capabilities might have been invented). SIGOPS Operating Systems Reviews, 22(4):36–38, 1988.
[17] C. Jackson. JSONRequest Extension for Firefox. http://crypto.stanford.edu/jsonrequest/, 2007, (accessed August 10, 2008).
[18] C. Jackson, A. Barth, A. Bortz, W. Shao, and D. Boneh. Protecting Browsers from DNS Rebinding Attacks. In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS 2007), pages 421–431, New York, NY, USA, 2007. ACM.
[19] C. Jackson and H. J. Wang. Subspace: Secure Cross-Domain Communication for Web Mashups. In Proceedings of the 16th International World Wide Web Conference (WWW2007), pages 611–620, New York, NY, USA, May 2007. ACM.
[5] JSON. http://www.json.org/, 2008, (accessed August 10, 2008).
[20] C. Karlof, U. Shankar, J. Tygar, and D. Wagner. Dynamic Pharming Attacks and Locked Same-origin Policies for Web Browsers. In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS 2007), pages 58–71, New York, NY, USA, 2007. ACM.
[21] F. D. Keukelaere, S. Bhola, M. Steiner, S. Chari, and S. Yoshihama. Smash: secure component model for cross-domain mashups on unmodified browsers. In WWW '08: Proceeding of the 17th international conference on World Wide Web, pages 535–544, New York, NY, USA, 2008. ACM.
[22] Z. Leatherman. Cross Domain XHR with Firefox. http://www.zachleat.com/web/2007/08/30/cross-domain-xhr-with-firefox/, August 2007, (accessed August 10, 2008).
[23] C. Reis, S. D. Gribble, and H. M. Levy. Architectural principles for safe web programs. In Sixth Workshop on Hot Topics in Networks, 2007.
[24] J. Ruderman. The Same Origin Policy. http://www.mozilla.org/projects/security/components/same-origin.html, August 2001, (accessed August 10, 2008).
[25] J. Ruderman. Configurable Security Policies (CAPS). http://www.mozilla.org/projects/security/components/ConfigPolicy.html, April 2006, (accessed August 10, 2008).
[26] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection and Communication Abstractions for Web Browsers in MashupOS. In Proceedings of the 21st ACM Symposium on Operating Systems Principles (SOSP 2007), pages 1–16, New York, NY, USA, October 2007. ACM.
[27] Yahoo! Using JSON with Yahoo! Web Services. http://developer.yahoo.com/common/json.html, 2008, (accessed August 10, 2008).

希望这些改进能使文本更加清晰、连贯和专业。如果有更多需要修改的地方，请告诉我！