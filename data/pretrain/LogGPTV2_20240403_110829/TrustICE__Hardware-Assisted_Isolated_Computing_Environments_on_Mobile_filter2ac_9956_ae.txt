Our design allows application developers to better utilize the
TrustZone technology without the arduous negotiation with the
OEMs and service providers to get their code into TrustZone’s
secure domain. Our prototype on Freescale i.MX53 QSB can
switch from the Rich OS to ICE in less than 12 ms. In the
future, we will study how to develop more powerful system
functions or a thin OS in ICE.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for their
valuable comments and suggestions. Dr. Kun Sun’s work is
partially supported by U.S. Army Research Ofﬁce under Grant
W911NF-12-1-0060 and U.S. Ofﬁce of Naval Research under
Grant N00014-15-1-2026 and N00014-15-1-2012. He Sun,
Yuewu Wang and Jiwu Jing are supported by National 973
Program of China under award No. 2014CB340603.
376376
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:53:17 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] Y. Zhou and X. Jiang, “Dissecting android malware: Characterization
and evolution,” in IEEE Symposium on Security and Privacy, SP 2012,
21-23 May 2012, San Francisco, California, USA, pp. 95–109.
[27]
[2] L. Wu, M. C. Grace, Y. Zhou, C. Wu, and X. Jiang, “The impact of
vendor customizations on android security,” in 2013 ACM SIGSAC Con-
ference on Computer and Communications Security, CCS’13, Berlin,
Germany, November 4-8, 2013, pp. 623–634.
“CVE Details. Google: Android:
http://cvedetails.com/vulnerability-list/vendor id-1224/product
id-19997/Google-Android.html, 2013.
Security Vulnerabilities,”
[3]
[4] L. Rasmusson and D. Corcoran, “Performance overhead of KVM on
linux 3.9 on ARM cortex-a15,” SIGBED Review, vol. 11, no. 2, pp.
32–38, 2014.
[5] C. Dall and J. Nieh, “KVM/ARM: the design and implementation of
the linux ARM hypervisor,” in Architectural Support for Programming
Languages and Operating Systems, ASPLOS ’14, Salt Lake City, UT,
USA, March 1-5, 2014, pp. 333–348.
[7]
[6] M. Reveilhac and M. Pasquet, “Promising secure element alternatives
for nfc technology,” in Near Field Communication, 2009. NFC ’09.
First International Workshop on, Feb 2009, pp. 75–80.
“Square Security.” https://squareup.com/security, accessed in Febuary
2014.
J. Azema and G. Fayad., “ M-Shield mobile security: Making wireless
secure.” Texas Instruments WhitePaper, 2008.
[8]
[9] T. Alves and D. Felton, “TrustZone: Integrated hardware and software
security,” ARM white paper, vol. 3, no. 4, 2004.
J. Winter, “Experimenting with ARM trustzone - or: How I met friendly
piece of trusted hardware,” in 11th IEEE International Conference
on Trust, Security and Privacy in Computing and Communications,
TrustCom 2012, Liverpool, United Kingdom, June 25-27, 2012, pp.
1161–1166.
[10]
[11] Trusted Logic, “Trusted Foundations by Trusted Logic Mobility,”
http://www.arm.com/community/partners/display product/rw/
ProductId/5393/.
[12] Giesecke & Devrient, “MobiCore,” http://www.gi-de.com/en/trends
and insights/mobicore/trusted-mobile-services.jsp.
[13] Freescale, “i.MX53 Reference Manual with fusemap addendum,”
http://www.freescale.com/webapp/sps/site/prod summary.jsp?code=i.
MX537&fpsp=1&tab=Documentation Tab.
[14] ARM,
“Cortex-A8
Technical
Reference Manual,”
//infocenter.arm.com/help/topic/com.arm.doc.ddi0344k/DDI0344K
cortex a8 r3p2 trm.pdf.
[15] ARM,
“Cortex-A9
Technical
Reference Manual,”
//infocenter.arm.com/help/topic/com.arm.doc.ddi0388f/DDI0388F
cortex a9 r2p2 trm.pdf.
http:
http:
[16] Freescale, “i.MX53 Processors,” http://www.freescale.com/webapp/sps/
site/taxonomy.jsp?code=IMX53 FAMILY.
[17] Texas Instruments , “Get Into the Zone: Building Secure Systems
with ARM TrustZone Technology,” http://www.ti.com/lit/wp/spry228/
spry228.pdf.
[18] Samsung Electronics, “Samsung S5PC100, ARM Cortex A8 based Mo-
bile Application Processor,” http://www.samsung.com/global/business/
semiconductor/ﬁle/media/s5pc100 brochure 200902-0.pdf.
[19] Sierraware, “Open Virtualization’s SierraVisor and SierraTEE,” http:
//www.openvirtualization.org.
[20] Trusted
Logic,
“TrustZone
Software
Porting
Kits,”
http://www.trusted-logic.com/Presentations/Trusted Logic
TrustZoneSoftwarePortingKits ccolas 2007Sept13.pdf.
[21] HUAWEI, “HUAWEI MC323 CDMA M2M Module,” https://techship.
se/products/huawei-mc323/.
[22] Package, Plastic, “i. mx 6solo/6duallite applications processors for
industrial products,” 2012.
“Das U-Boot,” http://www.denx.de/wiki/U-Boot.
[23]
[24] Paul Bakker, “PolarSSL,” https://polarssl.org/.
[25] Aurora Softworks,
details?id=com.aurorasoftworks.quadrant.ui.standard.
“Quadrant,” https://play.google.com/store/apps/
[26] ARM,
“Fast Models,”
http://www.arm.com/products/tools/models/
fast-models/index.php.
J. Winter, P. Wiegele, M. Pirker, and R. T¨ogl, “A ﬂexible software
development and emulation framework for ARM trustzone,” in Trusted
Systems - Third International Conference, INTRUST 2011, Beijing,
China, November 27-29, 2011, Revised Selected Papers, pp. 1–15.
[28] W. H. W. Hussin, P. Coulton, and R. Edwards, “Mobile ticketing system
employing trustzone technology,” in 2005 International Conference on
Mobile Business (ICMB 2005), 11-13 July 2005, Sydney, Australia, pp.
651–654.
[29] K. Kostiainen, J. Ekberg, N. Asokan, and A. Rantala, “On-board
credentials with open provisioning,” in Proceedings of the 2009 ACM
Symposium on Information, Computer and Communications Security,
ASIACCS 2009, Sydney, Australia, March 10-12, 2009, pp. 104–115.
[30] M. Pirker and D. Slamanig, “A framework for privacy-preserving mobile
payment on security enhanced ARM trustzone platforms,” in 11th IEEE
International Conference on Trust, Security and Privacy in Computing
and Communications, TrustCom 2012, Liverpool, United Kingdom, June
25-27, 2012, 2012, pp. 1155–1160.
[31] Zynq-7000, “Zynq-7000 AP SOC,” http://www.xilinx.com/products/
silicon-devices/soc/zynq-7000/.
[32] Android Open Source Project., “Android Security Overview,” http://
source.android.com/tech/security/.
[33] S. Smalley and R. Craig, “Security enhanced (SE) android: Bringing
ﬂexible MAC to android,” in 20th Annual Network and Distributed
System Security Symposium, NDSS 2013, San Diego, California, USA,
February 24-27, 2013.
[34] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A. Sadeghi, and B. Shas-
try, “Towards taming privilege-escalation attacks on android,” in 19th
Annual Network and Distributed System Security Symposium, NDSS
2012, San Diego, California, USA, February 5-8, 2012.
[35] M. Nauman, S. Khan, and X. Zhang, “Apex: extending android permis-
sion model and enforcement with user-deﬁned runtime constraints,” in
Proceedings of the 5th ACM Symposium on Information, Computer and
Communications Security, ASIACCS 2010, Beijing, China, April 13-16,
2010, pp. 328–332.
[36] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach, “QUIRE:
lightweight provenance for smart phone operating systems,” in 20th
USENIX Security Symposium, San Francisco, CA, USA, August 8-12,
2011, Proceedings.
[37] P. Hornyack, S. Han, J. Jung, S. E. Schechter, and D. Wetherall, “These
aren’t the droids you’re looking for: retroﬁtting android to protect
data from imperious applications,” in Proceedings of the 18th ACM
Conference on Computer and Communications Security, CCS 2011,
Chicago, Illinois, USA, October 17-21, 2011, pp. 639–652.
[38] M. Ongtang, K. R. B. Butler, and P. D. McDaniel, “Porscha: policy
oriented secure content handling in android,” in Twenty-Sixth Annual
Computer Security Applications Conference, ACSAC 2010, Austin,
Texas, USA, 6-10 December 2010, pp. 221–230.
[39] A. Vasudevan, E. Owusu, Z. Zhou, J. Newsome, and J. M. McCune,
“Trustworthy execution on mobile devices: What security properties can
my mobile platform give me?” in Trust and Trustworthy Computing -
5th International Conference, TRUST 2012, Vienna, Austria, June 13-
15, 2012. Proceedings, pp. 159–178.
J. Ekberg, K. Kostiainen, and N. Asokan, “Trusted execution envi-
ronments on mobile devices,” in 2013 ACM SIGSAC Conference on
Computer and Communications Security, CCS’13, Berlin, Germany,
November 4-8, 2013, pp. 1497–1498.
J.-E. Ekberg et al., “Mobile trusted module (mtm)–an introduction,”
2007.
[40]
[41]
[42] C. Marforio, N. Karapanos, C. Soriente, K. Kostiainen, and S. Capkun,
“Smartphones as practical and secure location veriﬁcation tokens for
payments,” in 21st Annual Network and Distributed System Security
Symposium, NDSS 2014, San Diego, California, USA, February 23-26,
2013.
[43] H. Sun, K. Sun, Y. Wang, J. Jing, and S. Jajodia, “Trustdump: Reliable
memory acquisition on smartphones,” in Computer Security - ESORICS
2014 - 19th European Symposium on Research in Computer Security,
Wroclaw, Poland, September 7-11, 2014. Proceedings, Part I, 2014, pp.
202–218.
377377
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:53:17 UTC from IEEE Xplore.  Restrictions apply. 
[44] N. Santos, H. Raj, S. Saroiu, and A. Wolman, “Using ARM trustzone
to build a trusted language runtime for mobile applications,” in Archi-
tectural Support for Programming Languages and Operating Systems,
ASPLOS ’14, Salt Lake City, UT, USA, March 1-5, 2014, 2014, pp.
67–80.
[45] Samsung Electronics, “White Paper: An Overview of Samsung KNOX,”
[46]
http://www.samsung.com/global/business/business-images/resource/
white-paper/2013/06/Samsung KNOX whitepaper June-0.pdf.
J. Andrus, C. Dall, A. V. Hof, O. Laadan, and J. Nieh, “Cells: a
virtual mobile smartphone architecture,” in Proceedings of the 23rd
ACM Symposium on Operating Systems Principles 2011, SOSP 2011,
Cascais, Portugal, October 23-26, 2011, pp. 173–187.
[47] P. Varanasi and G. Heiser, “Hardware-supported virtualization on
ARM,” in APSys ’11 Asia Paciﬁc Workshop on Systems, Shanghai,
China, July 11-12, 2011, p. 11.
[48] ARM, “ARM Virtualization Extensions,” http://www.arm.com/products/
processors/technologies/virtualization-extensions.php.
[49] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel,
“Inktag: secure applications on an untrusted operating system,” in Archi-
tectural Support for Programming Languages and Operating Systems,
ASPLOS ’13, Houston, TX, USA - March 16 - 20, 2013, pp. 265–278.
[50] X. Chen, T. Garﬁnkel, E. C. Lewis, P. Subrahmanyam, C. A. Wald-
spurger, D. Boneh, J. S. Dwoskin, and D. R. K. Ports, “Overshadow:
a virtualization-based approach to retroﬁtting protection in commodity
operating systems,” in Proceedings of the 13th International Conference
on Architectural Support for Programming Languages and Operating
Systems, ASPLOS 2008, Seattle, WA, USA, March 1-5, 2008, pp. 2–13.
J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. D. Gligor, and
A. Perrig, “Trustvisor: Efﬁcient TCB reduction and attestation,” in 31st
IEEE Symposium on Security and Privacy, S&P 2010, 16-19 May 2010,
Berleley/Oakland, California, USA, pp. 143–158.
[51]
[52] A. M. Azab, P. Ning, and X. Zhang, “SICE: a hardware-level strongly
isolated computing environment for x86 multi-core platforms,” in Pro-
ceedings of the 18th ACM Conference on Computer and Communica-
tions Security, CCS 2011, Chicago, Illinois, USA, October 17-21, 2011,
pp. 375–388.
[53] A. Baumann, M. Peinado, and G. C. Hunt, “Shielding applications
from an untrusted cloud with haven,” in 11th USENIX Symposium on
Operating Systems Design and Implementation, OSDI ’14, Broomﬁeld,
CO, USA, October 6-8, 2014., pp. 267–283.
APPENDIX A
AN EXAMPLE OF SECURE CODE
An example of secure code is shown in Listing 2. Line 7
shows the user-space SMC system call, with the ﬁrst parameter
showing the system call number 366 and the second parameter
showing the length of the secure code as 0x18 bytes. The third
parameter indicates which ICE is used. Bit 0 tells TDC to
switch the Rich OS to the encryption ICE while bit 1 corre-
sponds to the interface ICE. Then, the secure code between
Line 9 and Line 26 is executed in ICE. To call the functions
provided by ICE, the secure code just makes the corresponding
SVC calls and transfers the required parameters. To make
the code self-contained, we use inline assembly instead of C
functions to make system calls. From line 13 to line 21, the
secure code calls the second system call in ICE to generate
an RSA signature. The result is stored in sig[128]. From
line 23 to line 26, the secure code calls the ﬁrst system call
to exit ICE. At last the Rich OS wakes up and the application
outputs the string "app ends" in the Rich OS.
Listing 2: A typical application containing secure code
1 #include 
#include 
#include
using namespace std;
5 int main() {
syscall(366, 0x18, 0);
/*start of secure code*/
unsigned int length=128;
unsigned char start[128];
unsigned char sig[128];
asm volatile(
"ldr r0, =0x2\n\t"
"mov r1, %0\n\t"
"mov r2, %1\n\t"
"mov r3, %2\n\t"
"svc 0x0\n\t"
:
:"r"(length),"r"(start),"r"(sig)
);
asm volatile(
"ldr r0, =0x1\n\t
"svc 0x0\n\t"
);
10
15
20
25
/*end of secure code*/
cout<<"app ends"<<endl;
return 0;
30 }
378378
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:53:17 UTC from IEEE Xplore.  Restrictions apply.