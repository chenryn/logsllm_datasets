
0

0

0

2

2 N/A
1

0

0

0

1

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

2

0

0

0

0

0

:41
13 (cid:6): 0
 :17
}
False Alarms of Bug-ﬁnders: To see why VERIS-
MART achieves higher precision than bug-ﬁnders, we inspected
all 37 (=13+14+10) false positives reported by bug-ﬁnders.
Bug-ﬁnders reported 18 among 37 false positives due to
the lack of inferring transaction invariants, all of which are
avoided by VERISMART. The remaining 19 false positives
were due to imprecise handling of conditional statements. For
example, consider the following code snippet (from #55):
function transfer(address _to, uint _value) {
if (msg.sender.balance  value);
require(locked[addr][msg.sender] >= value);
if(value == 0) value = locked[addr][msg.sender];
totalLocked[addr] -= value; // false positive
locked[addr][msg.sender] -= value;
}
Fig. 6. A function simpliﬁed from the benchmark #8. OSIRIS, OYENTE,
and VERISMART warn that the subtraction at line 5 can cause arithmetic
underﬂow, which is false positive (i.e., the subtraction is safe).
TABLE III
LIST OF INCORRECT CVE REPORTS FOUND BY VERISMART.
#INCORRECT QUERIES: THE NUMBER OF INCORRECTLY REPORTED
QUERIES TO BE VULNERABLE. #FP: THE NUMBER OF ALARMS RAISED BY
EACH TOOL FOR THE INCORRECTLY REPORTED QUERIES.
CVE ID
Name
2018-13113 ETT
2018-13144 PDX
2018-13326 BTX
2018-13327 CCLAG
#FP
#Incorrect
Queries OSIRIS OYENTE VERISMART
0
0
0
0
2
1
2
1
2
1
2
1
2
1
2
1
precisely and do not produce such false alarms.
False Alarms of VERISMART: VERISMART produced
two false alarms in the benchmark #8, because it is currently
unable to capture quantiﬁed transaction invariants. Consider
the unlockReward function in Figure 6. The subtraction
operation at line 5 seems to cause arithmetic underﬂow; the
value may be changed at line 4, and thereafter the relation
totalLocked[addr] > value seems not to hold any-
more. However, the subtraction is safe because the following
transaction invariant holds over the entire contract:
(cid:2)
∀x.totalLocked[x] =
locked[x][i]
(2)
i
(cid:3)
less
transaction invariant, value is always
with an additional condition that computing the summa-
i locked[x][i]) does not cause overﬂow. With
tion (
this
than
totalLocked[addr]. Because VERISMART considers
quantiﬁer-free invariants only (Section III-C), it falsely re-
ported that an underﬂow would occur at line 5. OSIRIS and
OYENTE produced the false alarm too at the same location.
False Negatives of Bug-ﬁnders: We inspected CVE vul-
nerabilities that were commonly missed by the four bug-
ﬁnders, and we found that the bug-ﬁnders often fail to detect
bugs when vulnerabilities could happen via inter-contract
function calls. For example, consider code adapted from #18:
function mint (address holder, uint value) {
require (total+ value <= TOKEN_LIMIT); // CVE bug
// CVE bug
balances[holder] += value;
total += value;
// CVE bug
}
There is a function call token.mint (...,...) in
a main contract, where token is a contract object. We
can see that all
three addition operations possibly over-
ﬂow with some inputs. For example, suppose total=1,
value=0xfff...ff, and TOKEN_LIMIT=10000. Then,
total+value overﬂows in unsigned 256-bit and thus
the safety checking statement can be bypassed. Next,
if
balances[holder]=0,
the holder can have tokens
more than the predetermined limit TOKEN_LIMIT. VERIS-
MART detected the bugs as it conservatively analyzes inter-
contract calls (Section IV).
Incorrect CVE Reports Found by VERISMART: Inter-
estingly, VERISMART unexpectedly identiﬁed six incorrectly-
the column #
reported CVE vulnerabilities. In Table III,
Incorrect Queries denotes the number of queries incorrectly
reported to be vulnerable for each CVE ID. We could discover
them as VERISMART did not produce any alarms for those
queries and then we manually conﬁrmed that the CVE reports
are actually incorrect. We have submitted a request for revising
these issues to the CVE assignment team.
With the capability of automatically computing transaction
invariants, VERISMART successfully proved the safety for all
the incorrectly reported vulnerabilities (i.e., zero false posi-
tives). In other words, VERISMART could not have discovered
incorrect CVE reports if it were without transaction invariants.
The transaction invariants generated for proving the safety
were similar to those in Example 3 of Section II. In contrast,
existing bug-ﬁnders cannot be used for this purpose such as
proving the safety; for example, OSIRIS and OYENTE pro-
duced false positives for all of the 6 safe queries (i.e., the 6
incorrectly reported queries).
B. Comparison with Veriﬁers
We now compare VERISMART with SMTCHECKER [12]
and ZEUS [11], two recently-developed veriﬁers for smart
contracts. In particular, SMTCHECKER is the “ofﬁcial” veri-
ﬁer for Ethereum smart contracts developed by the Ethereum
Foundation, which is available in the Solidity compiler. Like
VERISMART, the primary goal of SMTCHECKER is to detect
arithmetic over/underﬂows and division-by-zeros [12].
tool
that does not support
Setup: First of all, we must admit that the comparison with
ZEUS and SMTCHECKER in this subsection is rather limited,
because ZEUS is not publicly available and SMTCHECKER is
currently an experimental
the
full Solidity language. Since we cannot run ZEUS on our
dataset,
the only option was to use the public evaluation
data [28] provided by the ZEUS authors. However, the public
data was not detailed enough to accurately interprete as the
ZEUS authors classify each benchmark contract simply as
‘safe’ or ‘unsafe’ without speciﬁc alarm information such
as line numbers. The only objective information we could
obtain from the data [28] was the fact that ZEUS produces
some (nonzero) number of false (arithmetic-overﬂow) alarms
on 40 contracts, and we decided to use those in our evaluation.
Starting with those 40 contracts, we removed duplicates with
trivial syntactic differences, resulting in a total of 25 unique
contracts (Table IV). Thus, the objective of our evaluation is
to run VERISMART and SMTCHECKER on the 25 contracts
to see how many of them can be successfully analyzed by
VERISMART and SMTCHECKER without false alarms. We
ran SMTCHECKER with the default setting.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:38 UTC from IEEE Xplore.  Restrictions apply. 
1688
EVALUATION ON THE ZEUS DATASET. VERIFIED: A TOOL DETECTS ALL
BUGS WITHOUT FALSE POSITIVES (: SUCCESS, : FAILURE)
TABLE IV
VERISMART
SMTCHECKER [12] ZEUS [11]
#Alarm #FP Veriﬁed #Alarm #FP Veriﬁed Veriﬁed
LOC #Q
No.
3
42
#1
2
78
#2
7
75
#3
7
70
#4
8
103
#5
5
141
#6
6
74
#7
6
84
#8
6
82
#9
99
2
#10
171 15
#11
7
139
#12
7
139
#13
139
7
#14
139
7
#15
141 16
#16
5
153
#17
7
139
#18
4
113
#19
3
40
#20
59
3
#21
3
28
#22
19
3
#23
457 30
#24
#25
17
3
Total 2741 172
0
1
2
0
0
2
1
0
0
1
9
0
0
0
0
10
0
0
0
0
0
1
0
13
0
40
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
6
0
6

























:24
 : 1
3
2
7
7
6
6
4
6
3
1
5
7
6