### Dynamic Taint-Based Techniques for Detecting Attacks on Web Applications

Another significant difference in our approach is the support for implicit flows, which are not addressed in [22].

#### Related Work

Independently and in parallel to our work, which was first introduced in [33], [23] and [24] have proposed using fine-grained taint analysis to detect injection attacks on web applications. The implementations in [23] and [24] are similar, both involving the manual transformation of the PHP interpreter to track tainted data. However, [24] provides a more detailed formulation and discussion, so we focus on this work. They explain that these injection attacks often result from ad hoc serialization of complex data, such as SQL queries or shell commands, and develop a detection technique called context-sensitive string evaluation (CSSE), which involves checking the use of tainted data in strings.

Our work improves upon their approach in several ways:
1. **Broader Application Scope**: By operating at the C language level, our method can handle a wider range of applications, including most server programs written in C and those written in interpreted languages like PHP and Bash.
2. **Generalized Problem Formulation**: Our problem formulation as taint-enhanced policy enforcement is more general. It can be applied to stealthy attacks discussed in Section 2, which do not involve serialization issues, and to attacks involving arbitrary types of data, not just strings.
3. **Simplified Transformation**: Our approach relies on a simple transformation described in Section 3 and implemented with 3.6KLOC of code. In contrast, their approach requires the manual transformation of a large software piece with over 300KLOC.

Other technical contributions of our work include:
- **Policy Language Development**: We developed a simple policy language for concise specification of taint-enhanced policies.
- **Support for Implicit Flows**: This allows us to provide some support for character encodings and translations.

#### Comparison with Other Techniques

**Syntax Analysis for SQL Injection Detection**:
As discussed in Section 7, Su et al. [27] describe a technique for detecting SQL injection attacks using syntax analysis. Their main focus is on providing a precise and formal characterization of SQL injection attacks. However, their implementation of taint tracking is not very reliable. They suggest a technique that avoids runtime operations for taint-tracking by "bracketing" each input string with special symbols. This method assumes that these brackets will propagate with the input strings, but this assumption fails in scenarios where parts of the input are extracted or parsed, causing the bracketing characters to be discarded.

**Manual Approaches for Correcting Input Validation Errors**:
Taint analysis targets vulnerabilities due to missing or incorrect input validation code. Manually reviewing code and adding necessary validation checks is time-consuming and error-prone. The notion of validity depends on how the input is used, requiring tracing forward in the program to identify all possible uses in security-sensitive operations. Performing validation checks at the point of use is challenging because the notion of validity depends on the data source. For example, an SQL query containing semicolons is valid if they originate within the program text but not if they come from external input. This necessitates tracing back from security-sensitive operations, leading to potential omissions and duplications of validation checks. Additionally, coding validation checks correctly is notoriously difficult and has frequently been a source of vulnerabilities.

**Information Flow Analysis**:
Information flow analysis has been researched extensively [1, 10, 8, 18, 30, 20, 25]. Early research focused on multi-level security, where fine-grained analysis was not deemed necessary [1]. More recent work has concentrated on tracking information flow at the variable level, producing many interesting results. While these techniques are promising for protecting privacy and integrity of sensitive data, the variable-level granularity is insufficient for detecting most attacks discussed in this paper.

**Static Taint Analysis**:
Static taint analysis techniques have been proposed for finding security vulnerabilities, including input validation errors in web applications [17, 14, 32], user/kernel pointer bugs [15], format string bugs [26], and authorization hook placement issues [34]. The main advantage of static analysis is that it can find all potential vulnerabilities, but it lacks accuracy. These techniques typically detect dependencies rather than vulnerabilities. For instance, [17] produces warnings whenever untrusted data is used in an SQL query, which may not be useful if the dependency is part of the application logic. The concept of endorsement can be used to indicate "safe" dependencies, but programmers must determine what is "safe," which is not straightforward.

An important difference between our work and static analysis is the intended audience. Static analysis tools are typically for developers, who need detailed knowledge about program logic to introduce endorsements and validation checks. In contrast, our tool is designed for system administrators or outside security engineers who lack detailed knowledge of the application code.

**Other Techniques**:
- **SQLrand [4]**: Defeats SQL injection by randomizing the textual representation of SQL commands. A drawback is that it requires manual changes to the program to use the modified representation for SQL commands generated by itself. Our approach achieves a similar effect by distinguishing commands generated by the application from those provided by untrusted users.
- **AMNESIA [12]**: Uses static analysis of Java programs to compute a finite-state machine model capturing the lexical structure of SQL queries. SQL injection attacks cause deviations from this model, allowing detection. Although efficient, its conservative nature and inability to distinguish different input sources can lead to higher false positives.
- **Perl Taint Mode [31]**: Tracks taint information at the variable level, requiring explicit untainting before using data in security-sensitive contexts. Our approach, due to the flexibility of our policy language, does not require such explicit untainting.

### Conclusion

In this paper, we presented a unified approach that addresses a wide range of commonly reported attacks exploiting software implementation errors. Our approach is based on a fully automatic and efficient taint analysis technique that tracks the flow of untrusted data at the byte level. Experiments show that our technique can be applied to various applications written in multiple programming languages and effectively detects attacks without false positives.

We believe that many software vulnerabilities arise because security checks are interspersed throughout the program, making it difficult to ensure the correct set of checks are performed on every program path, especially in complex programs. By decoupling policies from application logic, our approach provides a higher degree of assurance on the correctness of policies. The flexibility of our approach allows site administrators and third parties to quickly develop policies to prevent new classes of attacks without waiting for patches.

### Acknowledgments

This research was supported in part by an ONR grant N000140110967 and NSF grants CNS-0208877 and CCR-0205376.

### References

[1] D. E. Bell and L. J. LaPadula. Secure computer systems: Mathematical foundations. Technical Report MTR-2547, Vol. 1, MITRE Corp., Bedford, MA, 1973.
...
[34] X. Zhang, A. Edwards, and T. Jaeger. Using CQual for static analysis of authorization hook placement. In USENIX Security Symposium, 2002.