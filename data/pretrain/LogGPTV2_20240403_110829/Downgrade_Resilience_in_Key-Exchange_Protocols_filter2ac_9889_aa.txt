title:Downgrade Resilience in Key-Exchange Protocols
author:Karthikeyan Bhargavan and
Christina Brzuska and
C&apos;edric Fournet and
Matthew Green and
Markulf Kohlweiss and
Santiago Zanella B&apos;eguelin
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Downgrade Resilience in Key-Exchange Protocols
Karthikeyan Bhargavan∗, Christina Brzuska†, C´edric Fournet‡, Matthew Green§,
Markulf Kohlweiss‡ and Santiago Zanella-B´eguelin‡
∗Inria Paris-Rocquencourt, Email: PI:EMAIL
†Hamburg University of Technology, Email: PI:EMAIL
‡Microsoft Research, Email: {fournet,markulf,santiago}@microsoft.com
§Johns Hopkins University, Email: PI:EMAIL
Abstract—Key-exchange protocols such as TLS, SSH, IPsec,
and ZRTP are highly conﬁgurable, with typical deployments
supporting multiple protocol versions, cryptographic algorithms
and parameters. In the ﬁrst messages of the protocol, the peers
negotiate one speciﬁc combination: the protocol mode, based on
their local conﬁgurations. With few notable exceptions, most
cryptographic analyses of conﬁgurable protocols consider a single
mode at a time. In contrast, downgrade attacks, where a network
adversary forces peers to use a mode weaker than the one they
would normally negotiate, are a recurrent problem in practice.
How to support conﬁgurability while at the same time guar-
anteeing the preferred mode is negotiated? We set to answer this
question by designing a formal framework to study downgrade
resilience and its relation to other security properties of key-
exchange protocols. First, we study the causes of downgrade
attacks by dissecting and classifying known and novel attacks
against widely used protocols. Second, we survey what is known
about the downgrade resilience of existing standards. Third, we
combine these ﬁndings to deﬁne downgrade security, and analyze
the conditions under which several protocols achieve it. Finally,
we discuss patterns that guarantee downgrade security by design,
and explain how to use them to strengthen the security of existing
protocols, including a newly proposed draft of TLS 1.3.
I. INTRODUCTION
Popular protocols such as TLS, SSH and IPSec as used
in practice do not ﬁt a simple textbook deﬁnition of a key-
exchange protocol, where the state machine, cryptographic
algorithms, parameters and message formats are all ﬁxed in
advance. Rather, these modern protocols feature cryptographic
agility, which provides for conﬁgurable selection of multiple
protocol and cipher modes, so that the key exchange actually
executed between two peers depends on a negotiation phase
embedded in the exchange.
Agility has proven important in securing real-world protocol
implementations. For example, in the wake of recent vulnera-
bility disclosures in TLS [2, 3, 4, 10, 23], network operators
reacted by updating client and server conﬁgurations to disable
weak algorithms and protocol versions. Moreover, experience
shows that when sufﬁcient agility is not present within a
single protocol, application developers construct their own
ad hoc negotiation mechanisms, for example, by sequentially
attempting connections with different versions of a protocol
and “falling back” to the best one supported [39].
Unfortunately, support for algorithm agility opens up op-
portunities for downgrade attacks, where an active network
adversary interferes with the negotiation, causing honest peers
to complete a key exchange, albeit using a mode that is weaker
A
B
[G1, . . . , Gn]
Gi, gy
(km, ks) = kdf(gxy)
A, gx, sign(sk A, (Gi, gy, gx)), mac(km, A)
(km, ks) = kdf(gxy)
B, sign(sk B, (Gi, gx, gy)), mac(km, B)
Fig. 1: SIGMA-N: Basic SIGMA [30] with group negotiation
than the one they would have used on their own. Such attacks
have been identiﬁed in a number of protocols, most famously
in the early versions of the SSL protocol [43] and even in
recent versions of TLS [2, 39].
Surprisingly, there has been relatively little formal work
around the security of negotiation in modern cryptographic
protocols. Several recent works formally prove the security of
different aspects of TLS and SSH. Some [25, 31] only model
a single mode at a time. Some [12, 13] do model negotiation
of weak algorithms, but do not guarantee negotiation of the
preferred mode. Some others [9, 21] consider only interactions
where both parties have secure conﬁgurations. For this reasons,
all of these works overlook certain downgrade attacks that
occur when one party supports an insecure mode.
This is concerning because negotiation has proven to be
fertile ground for attacks, e.g. [2, 10, 43], and because recent
Internet-wide scans have revealed the prevalence of hosts
supporting insecure protocol modes [2, 5, 42].
In this work we aim to address this situation by system-
atically investigating the problem of downgrade resilience in
cryptographic protocols.
A. Motivating example
We begin with a simple motivating example: we adapt
the SIGMA protocol of Krawczyk [30] by adding a na¨ıve
extension intended to negotiate Difﬁe-Hellman groups: In the
ﬁrst message, A proposes a list of groups it supports; in the
second message, B indicates which of these groups should be
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Karthikeyan Bhargavan. Under license to IEEE.
DOI 10.1109/SP.2016.37
DOI 10.1109/SP.2016.37
506
506
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
A
MitM
B
[Gstrong , Gweak ]
Gweak , gy
[Gweak ]
To prevent an attack on a particular protocol mode,
it is sufﬁcient to deactivate the conﬁgurations that
lead to its negotiation.
(km, ks) = kdf(gxy)
A, gx, sign(sk A, (Gweak , gy, gx)), mac(km, A)
B, sign(sk B, (Gweak , gx, gy)), mac(km, B)
(km, ks) = kdf(gxy)
y = dlog(Gweak , gy)
(km, ks) = kdf(gxy)
Fig. 2: Man-in-the-Middle downgrade attack on SIGMA-N
used in the exchange. The modiﬁed protocol appears in Fig. 1.
The goal of the protocol is to compute session keys (km, ks).
Under normal circumstances, the protocol succeeds in cor-
rectly selecting a group. However, consider a scenario where
both participants support both strong and weak groups. B’s
signature authenticates the chosen group, but not A’s proposal.
This leads to a downgrade attack (see Fig. 2) similar to the
Logjam attack on TLS [2], where an attacker can break the
session keys at leisure and compromise the connection.
Protocol designers have adopted a number of techniques
to prevent such downgrade attacks. Based on a review of
deployed protocols, we identify three common patterns. In
the ﬁrst, exempliﬁed by SSH, protocol designers assume the
existence of strong signing keys shared between the two
parties, and use these keys to authenticate all negotiation
messages, either at the time they are transmitted, or after
the fact. In a second pattern, exempliﬁed by TLS, designers
transmit unauthenticated protocol messages, perform a key
exchange, and then subsequently use the resulting shared
secrets to retroactively authenticate the negotiation messages.
The ﬁnal approach relies on whitelisting certain modes, and is
best exempliﬁed by Google’s TLS False Start proposal [32],
which is being codiﬁed as part of TLS 1.3 [40].
Each approach has various advantages and disadvantages.
The devil is often in the details: each protocol is sensitive
to the precise nature of the implementation, e.g. the inputs of
authentication functions, or the speciﬁcs of what a valid mode
is for whitelisting. As a concrete example, modern versions of
TLS-DHE fail to sign the identity of the ciphersuite chosen by
a server, leading to cross-protocol attacks [2, 35]. Similarly,
TLS False Start relies solely on ciphersuite identiﬁer (rather
than more detailed information such as key strength) in its
selection of which modes to whitelist, which converts the
online attack of Adrian et al. [2] into an ofﬂine one.
B. Overview of our approach
We give a deﬁnition and a theorem for downgrade resilience
that model the following intuitive and desirable property for
deployed key-exchange protocols:
Our work builds on the deﬁnitions of Bhargavan et al. [13],
used to model security in MITLS, a reference implementation
of the TLS standard. A fundamental difference between these
deﬁnitions and previous work is that they attempt to model
entire deployed protocols. This requires a deﬁnition of security
cognizant of the fact that some aspects (modes) of the protocol
may be insecure. To deal with this, the deﬁnitions of [13]
incorporate predicates determining modes that are expected
to provide security guarantees, e.g., key indistinguishability.
This approach allows to deﬁne security when secure modes
are chosen, yet tolerates the existence of insecure modes.
One limitation of these deﬁnitions is that they do not take
into account how modes are chosen. In a protocol secure in
the MITLS framework, two parties under adversarial inﬂuence
may arrive at an insecure mode even when otherwise they
would use a secure mode. In theory each party can detect
and react to the negotiation of an insecure mode, e.g., by
terminating the protocol execution. Nonetheless,
this does
not guarantee that the preferred common mode is selected.
Our solution is to incorporate downgrade resilience in our
security deﬁnitions, to ensure that an adversary cannot force
the selection of another mode than the preferred one.
We consider protocols between an Initiator and a Responder.
These two parties each have their own local static conﬁgura-
tions, expressing their preferences and their intent to negoti-
ate a shared protocol mode. To deﬁne downgrade resilience
formally, we introduce a downgrade protection predicate DP
that operates on pairs of conﬁgurations (analogous to MITLS
predicates on modes), and that identiﬁes pairs of conﬁgurations
from which we expect downgrade resilience. We also introduce
a function Nego that maps two opposite-role conﬁgurations to
the protocol mode that should be negotiated in the absence
of active adversaries. Intuitively, our deﬁnition says that a
protocol is downgrade secure if two peers starting from conﬁg-
urations satisfying DP can only negotiate the mode determined
by Nego, even in the presence of an active adversary.
By way of example, a speciﬁc instantiation of Nego for the
TLS protocol might determine that two peer conﬁgurations
should result in the negotiation of TLS 1.2 in combination with
a ciphersuite such as DHE-RSA-AES256-GCM-SHA384
with a 2048-bit Difﬁe-Hellman modulus. However, if a server
supports an insecure mode, such as a DHE-EXPORT cipher-
suite, an adversary might force the pair to downgrade to this
mode [2]. This shows that without additional countermeasures,
TLS 1.2 does not meet our deﬁnition. On the other hand,
protocols with just one possible mode are trivially secure. The
challenge we address in this paper is to consider agile proto-
cols that support multiple modes (e.g., ciphersuites, versions).
To apply our deﬁnition to real-world protocols, we adopt
the following approach. Rather than analyzing a protocol in
its entirety, we ﬁrst extract a core negotiation sub-protocol,
which captures the main downgrade-protection mechanisms
of the larger protocol. We next prove that this sub-protocol
507507
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
in the sense that an
is complete for downgrade security,
adversary that succeeds in downgrading the full protocol will
also succeed in downgrading the sub-protocol.
This technique of lifting security from the sub-protocol to
the main protocol was previously employed by Bergsma et al.
[9] to prove multi-ciphersuite security.
In our analysis we manually extract sub-protocols that cover
speciﬁc families of modes, e.g., signature-based modes or pre-
shared key modes, while some of our attacks are cross-family
attacks. Proving the absence of cross-family attacks requires
either to consider more complex sub-protocols that encompass
several families, or to study families independently and prove
a composition theorem similar to that of Bergsma et al. [9].
Our work is a stepping stone in this direction, and our results
are readily applicable in situations where peer conﬁgurations
are from the same family.
C. Summary of our results
Our primary contribution is a novel downgrade security def-
inition for key-exchange protocols. We devise a methodology
to analyze the downgrade security of a complex protocol by
abstracting away irrelevant details and studying only the core
negotiation sub-protocol.
We demonstrate the relevance of our deﬁnition and the
applicability of our methodology by analyzing the downgrade
security of several exemplary real-world protocols, namely
TLS, SSH, IPSec and ZRTP. We do so by taking in their
standard speciﬁcations and extracting appropriate core ne-
gotiation sub-protocols. Our analysis identiﬁes known and
novel attacks on certain conﬁgurations, as well as sufﬁcient
conditions under which these protocols achieve downgrade
security. These conditions inform practitioners as to how to
restrict host conﬁgurations to best avoid downgrade attacks.
The following are concrete novel contributions:
• We describe new downgrade vulnerabilities on IKEv2
and ZRTP. These vulnerabilities are present in the protocol
standards, but can be avoided by carefully conﬁgured imple-
mentations.
• We conﬁrm the conclusion evidenced by recent attacks:
TLS versions up to 1.2 are not generally downgrade secure.
• We prove a downgrade security theorem for SSHv2
with publickey client authentication that is stronger than
previous results. This stems from both peers signing all the
messages that determine the protocol mode.
• We show that although TLS 1.3 Draft 10 [40] includes
a mandatory server-side message for signing the handshake
transcript, this does not prevent downgrades to earlier versions
of TLS or non-preferred groups. Informed by this analysis, we
deﬁne and prove two new downgrade protection mechanisms.
The concrete countermeasures, designed jointly with the core
TLS 1.3 working group, have been included in Draft 11.
D. Outline of the paper
In §II we introduce the terminology used throughout and
we provide a primer on security deﬁnitions for key exchange
protocols. We formally deﬁne downgrade resilience in §III.
508508
In §IV through §VII we apply these deﬁnitions to analyze the
security of SSH, IPSec IKE, ZRTP and TLS. We survey related
work in §VIII and conclude in §IX. The full version [14]
includes additional discussions and proofs.
II. MODELING MULTI-MODE KEY-EXCHANGES
Popular key-exchange models [9, 13, 22] focus mainly
on entity authentication and key-indistinguishability [8]. Our
focus lies on considering multi-mode protocols and incorpo-
rating the negotiation of the mode into the security model.
initial conﬁguration (including the role);
unique identiﬁer of the session;
negotiated mode (including long-term identities);
session key;
A key exchange protocol Π is a two-party protocol with an
initiator role I and a responder role R (sometimes called client
and server). The adversary interacts with multiple sessions of
the protocol. Each session π maintains variables in a local
state and makes assignments to them before sending or after
receiving a message. We write π.x for the value of variable x
in session π. We will consider the following variables:
π.cfg
π.uid
π.mode
π.key
π.complete ﬂag set when the session completes successfully.
Variables are initialized to ⊥ and each session assigns a
value to each variable only once, typically in the order given
above. The conﬁguration variable π.cfg is assigned when a
session is created and contains other variables, including one
for the session role. We use π.role as shorthand for π.cfg.role
and let I = R, R = I.
An adversary interacts with sessions via queries to oracles.
A query π ← Init(cfg) initializes a session. Recall that cfg
determines role and furthermore, in the setting where we have
symmetric or public keys, cfg will contain handles to those
keys. A query mout ← Send(π, min) sends a message min
to session π, which processes it to update its local state and
output an ongoing message mout. A query k ← Reveal(π)
reveals the session key of π, i.e., returns the value of π.key.
There are several variants of this setting for handling long-term
keys and other authentication mechanisms as well as corrup-
tion settings, and each variant requires different variables and
oracles. As these settings are mostly standard and orthogonal
to our deﬁnition, we leave those details unspeciﬁed for now
and get back to them in Section IV. Note that our deﬁnitions
only become complete once we add the speciﬁcs of long-term
keys or other authentication mechanisms.
A. Unique identiﬁers and partnering