(cid:48)
(cid:104)ct
(cid:48) ← MK-CKKS.Rescale(ct) =(cid:4)p−1
· ct(cid:7) − p−1
(cid:18)
, sk(cid:105) = p−1
(cid:96)
for the rescaling error erd = (cid:10)(cid:4)p−1
(cid:4)p−1
· ct(cid:7) − p−1
(cid:96)
(cid:96)
(cid:96)
the rescaling error has the variance of
for ct ∈ Rk+1
· ct(cid:7) ∈ Rk+1
· ct, sk(cid:11) from rounding. Note that each component of
. Then, we have
(mod q(cid:96)−1)
q(cid:96)−1
q(cid:96)
· Rp(cid:96) whose variance is 1
(cid:96)
12 . Therefore,
· [(cid:104)ct, sk(cid:105)]q(cid:96) + erd
· ct behaves like a uniform random variable on p−1
(cid:96)
(cid:19)
Vres =
1 +
1
12
1
2
kn
≈ 1
24
kn.
C Homomorphic Evaluation of CNN
For a d1 × d matrix A1 and a d2 × d matrix A2, (A1; A2) denotes the (d1 + d2) × d matrix obtained by
concatenating two matrices in a vertical direction. If two matrices A1 and A2 have the same number of
rows, (A1|A2) denotes a matrix formed by horizontal concatenation. As deﬁned in [34], there is a row
ordering encoding map to transform a vector of dimension n = d2 into a matrix in Rd×d. For a vector
a = (ak)0≤k 1
Output: ctout
1: ctout ← ct
2: for i = 0, 1, . . . , log α − 1 do
3:
4: end for
ctout ← MKHE.Add(ctout, MKHE.Rot(ctout; ψ · 2i))
Algorithm 8 Homomorphic evaluation of CNN
Input: ct.X, {ct.Yl}0≤l<4, {ct.Wk}0≤k<8, ct.z1, ct.U , ct.z2.
Output: ctout.
[Convolutional layer]
1: ct0 ← MK-CKKS.Mult(ct.X, ct.Y0)
2: for 1 ≤ l < 4 do
ct.Xl ← MK-CKKS.Rot(ct.X; 14i + j)
3:
ct ← MK-CKKS.Mult(ct.Xl, ct.Yl)
4:
ct0 ← MK-CKKS.Add(ct0, ct)
5:
6: end for
7: ct0 ← MK-CKKS.Rescale(ct0)
8: ct0 ← AllSum(ct0, 1024, 4)
[1st square layer]
9: ct1 ← MK-CKKS.Rescale(MK-CKKS.Mult(ct0, ct0))
[FC-1 layer]
10: ct2 ← MK-CKKS.Mult(ct1, ct.W0)
11: for 1 ≤ l < 8 do
ct ← MK-CKKS.Rot(ct1; 27 · l)
12:
ct ← MK-CKKS.Mult(ct, ct.Wl)
13:
ct2 ← MK-CKKS.Add(ct2, ct)
14:
15: end for
16: ct2 ← MK-CKKS.Rescale(ct2)
17: ct2 ← AllSum(ct2, 1, 64)
18: u ← PadZeros((1), 127) ∈ R128
19: u ← (u|u| . . .|u) ∈ R8192
20: ct2 ← MK-CKKS.SMult(ct2, u)
21: ct2 ← MK-CKKS.Rescale(ct2)
22: ct2 ← MK-CKKS.Add(ct2, ct.z1)
[2nd square layer]
23: ct3 ← MK-CKKS.Rescale(MK-CKKS.Mult(ct2, ct2))
[FC-2 layer]
24: ct4 ← AllSum(ct3,−1, 16)
25: ct4 ← MK-CKKS.Rescale(MK-CKKS.Mult(ct4, ct.U ))
26: ct4 ← AllSum(ct4, 128, 64)
27: ctout ← MK-CKKS.Add(ct4, ct.z2)
(cid:46) Simple convolutions
(cid:46) i = (cid:98)l/2(cid:99), j = (l%2)
(cid:46) Sum over multiple channels
(cid:46) Multiplicative masking