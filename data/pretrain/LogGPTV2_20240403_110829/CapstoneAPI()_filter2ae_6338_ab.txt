        std::cout 
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    #define CODE "\x55\x48\x8b\x05\xb8\x13\x00\x00"
    int main(void)
    {
        csh handle = 0;
        cs_insn* insn;
        size_t count;
        if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle)) {
            printf("ERROR: Failed to initialize engine!\n");
            return -1;
        }
        cs_close(&handle);
        std::cout errnum = CS_ERR_HANDLE;
            return 0;
        }
        handle->errnum = CS_ERR_OK;
        // 重设ARM架构的IT block
        if (handle->arch == CS_ARCH_ARM)
            handle->ITBlock.size = 0;
    #ifdef CAPSTONE_USE_SYS_DYN_MEM
        if (count > 0 && count errnum = CS_ERR_MEM;
            return 0;
        }
        insn_cache = total;
        while (size > 0) {
            MCInst_Init(&mci);
            mci.csh = handle;
            mci.address = offset;
            if (handle->detail) {
                //给detail指针分配内存
                insn_cache->detail = cs_mem_malloc(sizeof(cs_detail));
            } else {
                insn_cache->detail = NULL;
            }
            // 为non-detailed模式保存所有信息
            mci.flat_insn = insn_cache;
            mci.flat_insn->address = offset;
    #ifdef CAPSTONE_DIET
            //mnemonic & op_str0填充
            mci.flat_insn->mnemonic[0] = '\0';
            mci.flat_insn->op_str[0] = '\0';
    #endif
            r = handle->disasm(ud, buffer, size, &mci, &insn_size, offset, handle->getinsn_info);
            if (r) {
                SStream ss;
                SStream_Init(&ss);
                mci.flat_insn->size = insn_size;
                //将内部指令操作码映射到公共insn ID
                handle->insn_id(handle, insn_cache, mci.Opcode);
                handle->printer(&mci, &ss, handle->printer_info);
                fill_insn(handle, insn_cache, ss.buffer, &mci, handle->post_printer, buffer);
                // 调整opcode (X86)
                if (handle->arch == CS_ARCH_X86)
                    insn_cache->id += mci.popcode_adjust;
                next_offset = insn_size;
            } else  {
                // 遇到中断指令
                // 为detail指针释放内存
                if (handle->detail) {
                    cs_mem_free(insn_cache->detail);
                }
                if (!handle->skipdata || handle->skipdata_size > size)
                    break;
                if (handle->skipdata_setup.callback) {
                    skipdata_bytes = handle->skipdata_setup.callback(buffer_org, size_org,
                            (size_t)(offset - offset_org), handle->skipdata_setup.user_data);
                    if (skipdata_bytes > size)
                        break;
                    if (!skipdata_bytes)
                        break;
                } else
                    skipdata_bytes = handle->skipdata_size;
                insn_cache->id = 0;
                insn_cache->address = offset;
                insn_cache->size = (uint16_t)skipdata_bytes;
                memcpy(insn_cache->bytes, buffer, skipdata_bytes);
    #ifdef CAPSTONE_DIET
                insn_cache->mnemonic[0] = '\0';
                insn_cache->op_str[0] = '\0';
    #else
                strncpy(insn_cache->mnemonic, handle->skipdata_setup.mnemonic,
                        sizeof(insn_cache->mnemonic) - 1);
                skipdata_opstr(insn_cache->op_str, buffer, skipdata_bytes);
    #endif
                insn_cache->detail = NULL;
                next_offset = skipdata_bytes;
            }
            // 一条新指令进入缓存
            f++;
            // 反汇编了一条指令
            c++;
            if (count > 0 && c == count)
                break;
            if (f == cache_size) {
                cache_size = cache_size * 8 / 5; 
                total_size += (sizeof(cs_insn) * cache_size);
                tmp = cs_mem_realloc(total, total_size);
                if (tmp == NULL) {  //内存不足
                    if (handle->detail) {
                        insn_cache = (cs_insn *)total;
                        for (i = 0; i detail);
                    }
                    cs_mem_free(total);
                    *insn = NULL;
                    handle->errnum = CS_ERR_MEM;
                    return 0;
                }
                total = tmp;
                //在最后一条指令之后继续填充缓存
                insn_cache = (cs_insn *)((char *)total + sizeof(cs_insn) * c);
                // 将f重置为0，从一开始就填入缓存
                f = 0;
            } else
                insn_cache++;
            buffer += next_offset;
            size -= next_offset;
            offset += next_offset;
        }
        if (!c) {
            //未反汇编任何指令
            cs_mem_free(total);
            total = NULL;
        } else if (f != cache_size) {
            // 没有完全使用最后一个缓存，缩小大小
            tmp = cs_mem_realloc(total, total_size - (cache_size - f) * sizeof(*insn_cache));
            if (tmp == NULL) {  // 内存不足
                // 释放所有detail指针
                if (handle->detail) {
                    insn_cache = (cs_insn *)total;
                    for (i = 0; i detail);
                }
                cs_mem_free(total);
                *insn = NULL;
                handle->errnum = CS_ERR_MEM;
                return 0;
            }
            total = tmp;
        }
        *insn = total;
        return c;
    }
示例，x86_64:
    #include 
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    #define CODE "\x55\x48\x8b\x05\xb8\x13\x00\x00\xe9\xea\xbe\xad\xde\xff\x25\x23\x01\x00\x00\xe8\xdf\xbe\xad\xde\x74\xff"
    int main(void)
    {
        csh handle = 0;
        cs_insn* insn;
        size_t count;
        if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle)) {
            printf("ERROR: Failed to initialize engine!\n");
            return -1;
        }
        count = cs_disasm(handle, (unsigned char*)CODE, sizeof(CODE) - 1, 0x1000, 0, &insn);   //所有指令，基址0x1000，放入insn
        if (count) {
            size_t j;
            for (j = 0; j < count; j++) {
                printf("0x%""Ix"":\t%s\t\t%s\n", insn[j].address, insn[j].mnemonic, insn[j].op_str);
            }
            cs_free(insn, count);
        }
        else
            printf("ERROR: Failed to disassemble given code!\n");
        cs_close(&handle);
        return 0;
    }
输出