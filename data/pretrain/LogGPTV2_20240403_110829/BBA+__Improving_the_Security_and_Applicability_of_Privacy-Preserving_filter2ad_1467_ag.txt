320
320
[Bytes]
672
3728
3664
Issue
Acc
Vrfy
[ms]
115.27
385.61
375.73
same techniques as in the privacy proof. We distinguish two cases:
a) The adversary still outputs skU with non-negligible probability.
This contradicts the DL assumption in G1. b) The adversary does not
output the correct skU. This implies the existence of an adversary
who can distinguish between the real and the ideal privacy game.
6 PERFORMANCE EVALUATION
We evaluate the performance of our BBA+ instantiation by mea-
suring execution times of the BBA+ protocols using a practical
implementation. To this end, network payload and execution time
on the user’s device is measured. We selected the smartphone as a
target platform suitable for mobile applications, since it has become
a familiar companion in everyday life to the majority of potential
users. An additional benefit of this platform is that a developer
using our scheme does not have to distribute any new hardware
and users are already acquainted with their device.
The issuer’s, accumulator’s or verifier’s performance is not mea-
sured, as we expect their hardware to be much more powerful. Not
included in our measurements are data-transmission times, since
they depend on external factors not influenced by BBA+. How-
ever, we provide estimations based on the prevalent transmission
technology NFC.
We evaluate our implementation on a OnePlus 3 smartphone. It
features a Snapdragon 820 Quad-Core processor (2 × 2.15 GHz & 2
× 1.6 GHz), 6 GB RAM and runs Android OS v7.1.1 (Nougat). The
implementation is done in C++14 using the RELIC toolkit v.0.4.1,
an open source library with support for pairing-friendly elliptic
curves under the LGPL license [5].
6.1 Bilinear Groups
The digital signature scheme, the commitment scheme and the
non-interactive zero-knowledge proof system all build on pairing-
friendly elliptic curves. We configured RELIC with curves of 254-
bit order, the minimal supported size for pairing-friendly curves
that exceed 80 bit security. With this parameter choice the toolkit
configures itself to use the Barreto-Naehrig curves Fp254BNb and
Fp254n2BNb presented by Aranha et al. [7, 26].
We select the optimal Ate pairing as RELIC’s pairing function
since current speed records are achieved using this function [29].
To further optimize the performance of BBA+, one might use a
custom implementation of elliptic curves with a compatible bilinear
map, optimized for this purpose. We emphasize however, that RELIC
itself already delivers very promising execution times.
6.2 Implementation Results
Table 1 shows the average execution times for the respective BBA+
protocols on the user device and the amount of data that has to be
Session I3:  Personal PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA1938transmitted from the device to the issuer, accumulator, or verifier
and vice versa. To obtain a compact data stream for network transfer
while maintaining generality, we serialized each element as a length
byte, followed by its internal serialization. The size of a data packet
could further be reduced using compression algorithms. Note that
these are average execution times measured on a smartphone during
regular use. The operating system’s scheduler interferes with the
computations and thus single protocol execution times may vary.
As a reference value for an acceptable execution time, we con-
sider one second to be a reasonable upper bound. All protocols of
BBA+ execute in less than 400ms on the user’s side. If we use, for
example, NFC with its maximum transmission speed of 424 kbit/s,
it would take less than 80ms to transmit all data for any of the pro-
tocols from/to the communication terminal. This leaves more than
500ms to transmit data packets over the network to the protocol
partner, have him compute his part of the protocol and respond to
the user. Assuming that the issuer, accumulator, and verifier run
a powerful back-end, it should not be challenging to execute an
entire protocol run in less than a second.
6.3 Further Optimizations
The RELIC toolkit is a multi-purpose library which is not mainly
optimized for pairing-based elliptic curve cryptography. Hence, we
might be able speed up our implementation by creating a dedicated
library focused on a highly optimized implementation of a pairing-
friendly elliptic curve.
Regarding the Groth-Sahai proof system, we expect that a user
could significantly reduce his computations for generating a GS
proof by carefully applying the prover chosen CRS technique from
[18]. Moreover, there are ways to optimize the efficiency of the
verifier of a GS proof considerably. For instance, Herold et al. [23]
recently proposed a batch verification technique dedicated to Groth-
Sahai proofs. Integrating these optimizations into our BBA+ instan-
tion, could notably reduce the computational complexity of the
issuer, accumulator, and verifier.
7 APPLYING BBA+
In the following, we sketch important aspects when applying BBA+
in some selected scenarios. From a high-level perspective, applying
BBA+ to these scenarios seems mostly straightforward. Nonetheless,
there are some technical subtleties that needs to taken into account,
including:
• To guarantee security and privacy, the CRS needs to be set
up by a party which is trusted by both the operator (issuer,
accumulator, verifier) and the user.
• As the parties I, AC, and V all share the same secret key,
they need to trust each other (in particular, not to collude
with a malicious user).
• The values |v| being collected in a specific scenario need to be
upper bounded in a way such that no balance “wraparounds”
(in Zp) occur during the lifetime of a token. Otherwise, a
user could wrongfully lose points. He could also gain points
if negative balances are allowed (e.g., when considering a
p−1
balance space Zp represented by {− p−1
2 }).
• It needs to be ensured that the application meets the restric-
tions imposed by the BBA+ security model. In particular,
2 , . . . , 0, . . . ,
user registration needs to be done out-of-band: The appli-
cation needs to verify and store the (physical) identity of a
user and make sure his chosen public-key pkU is unique.
Furthermore, it must be ensured that that only a single to-
ken is issued per pkU. If for the same (natural) user more
than one token is required, then he may register multiple
pkU—one for each token. Management of (natural) users
and association of each pkU with a physical identity is out
of the scope of the BBA+ scheme.
• Users need to be forced to actually run the Accum or Vfy
protocol if the value v to be added is negative. How this
can be accomplished is application-specific. Remember, if
an application ensures this, the user is bound to continue
with the updated token in the next interaction and cannot
re-use an older version with a higher balance due to double-
spending detection.
7.1 Customer Loyalty Systems
As a basic application, we outline how BBA+ can be used to create
a privacy-preserving loyalty system for customer retention. When
the operator initiates a loyalty program, he asks a trusted third party
(e.g., the Federal Commissioner for Data Protection and Freedom of
Information) to generate a CRS by running Setup. The trusted third
party then publishes the CRS and securely stores the trapdoor.
When the CRS has been created, the operator may generate a key
pair (pkI, skI ) ← IGen(CRS) and publish pkI. Before a customer
is allowed to participate in the loyalty program, he must register
himself. The operator verifies the (physical) identity of the user,
ensures that pkU is unique and stores all information in some kind
of CRM system. Then the user and the operator execute the Issue
protocol to create a token for the user.
When the customer purchases some products, he executes the
AC protocol with the operator (e.g., represented by the cash regis-
ter), where v is the number of points that the customer receives.
If the customer wants to redeem some points (say, v′ ∈ N) to
obtain a voucher, he unveils his current balance w to the operator
(represented by some token remdemption machine), who checks
that w ≥ v′. The parties then execute the Vfy protocol with v :=
−v′ = p−v′ mod p. Note that there is no need to force the customer
to execute Vfy with a negative v, as he has an incentive to do so
(obtaining a voucher).
Using a balance space Zp = {0, . . . , p − 1}, balance wraparounds
are not an issue in this scenario: First, we avoid wraparounds that
could be caused by subtracting values by only executing Vfy if w ≥
v. Second, adding up positive points will not result in a wraparound
neither. To achieve a reasonable level of security, p is in the order
of 2250 (cf. Section 6.1) while a typical loyalty program grants one
point per expensed dollar. Hence, a user needs to spent about $ 1075
before a wraparound occurs.
In order to detect double-spending of collected points, the op-
erator regularly scans his database for double-spending tags with
identical token version numbers. If there are some, he runs IdentDS
in order to obtain the public key pkU of the user who committed
double-spending and a proof of guilt Π. He then looks up the name
and address of the user with key pkU and can contact him about
this issue.
Session I3:  Personal PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA19397.2 Micropayments in Vehicle-to-Grid
As the world slowly moves toward more ecologically friendly, re-
newable and natural sources of energy, the problem of storing large
amounts of energy is emerging. For example, the supply of solar
and wind power depend on external circumstances, and thus energy
harvested from these sources must be stored in order to be able to
revert to this energy when the natural supply is low, e. g. at night.
One approach for storing and resupplying this energy is to use the
batteries of electric cars while they are parked. This is known as
Vehicle-to-Grid power transfer, and involves micro-trading.
In this setting, BBA+ can be used to realize the transfer of money.
Here, an electricity provider may take the role of the issuer, accu-
mulator, and verifier, respectively. The car owner (or his car, acting
autonomously) is a user. Depending on the supply of energy in the
net and the charging level of the car’s battery, the car autonomously
sells or buys energy in exchange for points.
This raises the question how the user can be forced to actually
run the Vfy protocol in order to lose points when charging his
battery. The simplest solution is to let the user prepay before any
charging takes place. A drawback of this approach is that a user
would lose money if he wants to leave before the charging process
is completed. For a more comfortable solution, this approach can
be augmented by a subsequent refund step (using Accum) if the
prepaid amount is not used up when leaving. This allows the user
to overbuy and gain more flexibility. Finally, our specific imple-
mentation enables a third solution preventing prepayments. The
Vfy protocol can be interleaved with the actual charging of energy.
Before the charging starts, the Vfy protocol is executed until the
message from the user to the operator has been sent. This ensures
that the operator has already learned a double-spending tag for the
current token. Please note, that the final value v that must be paid
(which is unknown by now) is not yet required by the protocol.
This input can be postponed. After the charging terminates, v is
calculated and the Vfy protocol is resumed. If a user decides to “run
away” without paying and does not finish the Vfy protocol run, he
will be detected during the next interaction. This is because he has
not received a fresh version of the token, but must reuse the old
version a second time.
When the points collected by the car are exhausted, the user
may buy additional points (using cash, bank transfer or another
commonplace payment method) to recharge his token. Likewise,
when the car has accumulated a large number of points, the car
owner may redeem the points collected by his car, in order to get
paid for the electricity his car has provided.
8 FUTURE EXTENSIONS
In this section we sketch how BBA+ could be extended by range
proofs and also point out future work regarding active adversaries.
8.1 Range Proofs
There are a variety of applications where it might be desirable not
to reveal the current balance w during the verification and redemp-
tion protocol. To overcome this issue, the Vfy protocol could be
extended by a range proof system such as [10] or [14]. Although
there has been great progress to increase the efficiency of those
proof systems, we deliberately did not include one in our basic
scheme, as even recent range proofs are still computationally ex-
pensive. So they may considerably slow down the execution on
low-end hardware like mobile devices. Nonetheless, as for certain
scenarios this privacy/efficiency tradeoff might be worthwhile, we
sketch how range proofs could be integrated into our instantiation.
8.1.1 High Level Overview. In the following, we explain the idea
of the range proof in [10]. Firstly, let us recap the trivial approach
to prove that a balance w is at least the redeemed value v, i. e.
w ∈ S := {v, . . . , Nmax} with Nmax being an upper bound on the
balance space. Here, the verifier would generate a signature on
every element of S and the prover would prove in ZK that it knows
a signature on its balance w. Obviously, this approach is prohibitive
if S grows proportional to the underlying group Zp as this yields
an exponentially large set for log p ∈ Θ(n).
In [10] Camenisch et al. exploit a q-ary representation of the
secret with at most ηmax digits to overcome this problem. Here,
q, ηmax ∈ N are design parameters that are chosen during system
setup such that Nmax := qηmax − 1 < p. For a fixed q, the maximal
admissible number of digits ηmax to represent a value is bounded
by ηmax ≤ ⌊logq p⌋ ∈ O(n). Assume the prover wants to prove
that a secret x ∈ Zp is contained in the range {0, . . . , qη − 1} for
some η ≤ ηmax. The verifier needs to generate only one signature
representation of the secret x = (cid:80)η−1
on each element in {0, . . . , q − 1}, the prover generates a q-ary
j=0 xjqj and then proves for
each digit xj (j ∈ {0, . . . , η − 1}) that the digit is contained in the
set {0, . . . , q − 1}, i. e. that it knows a signature for it.
Please note that this range proof is only applicable to a Zp-subset
whose size is a power of q. Depending on the tangible choice of q
and ηmax there are p − Nmax + 1 elements of the underlying group
that cannot be represented. In practical terms, this means that only
a subset of Zp can be used and “illegal” balances have to be avoided
by the protocol.
Moreover, the basic range proof only allows to show that a secret
x can be represented with η ≤ ηmax digits, i. e. that x ∈ {0, . . . , qη −
1} holds. But we need to prove a statement w ∈ {v, . . . , Nmax} about
a secret w and usually neither interval limit is located at a q-power.
In order to overcome this issue the prover conducts two range
proofs about a suitable shifted value and shows that the shifted
value lies in two different intervals whose limits are aligned and
whose intersection is the claimed range. For details on the actual
calculation see Section 8.1.3.
8.1.2 Design Choices and Notation. The efficiency of range
proofs heavily depends on the representation of the elements with
individual digits. This leaves space for some design decisions. The
design parameters q and ηmax are a trade-off between the number of
signatures and the size of the NIZK statement. Please note, that the
signatures can be pre-computed and re-used for all NIZKs. Hence,
a greater q and a smaller ηmax is usually beneficial.
We fix the representation Zp = {0, . . . , p − 1} ⊂ N, i. e. we
interpret elements of Zp as positive numbers with the usual ≤-order
inherited from N. This means we keep the protocols Accum and Vfy
separated and only extend the latter by a range proof. Moreover,
for the ease of notation we denote the first ηmax q-powers of д1
for j = 0, . . . , ηmax − 1. These public constants are