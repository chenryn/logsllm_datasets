    Accept-Language: en-US,en;q=0.9
    ------WebKitFormBoundaryhcoAd2iSAx3TJA7A
    Content-Disposition: form-data; name="textname"
    REGISTER sip:samy.pl;transport=TCP SIP/2.0
    Contact: 
    ------WebKitFormBoundaryhcoAd2iSAx3TJA7A--    
**深入逆向固件。**
继续深入逆向的过程中，根据“SIP/2.0”定位到SIP协议大致处理的地方，然后分析过程中，发现了对于INVITE字段的处理，发现对于INVITE字段有一个判断处理，如果INVITE字段位于报文开始，那幺正常解析，否则不可以。
同时INVITE与REGISTER是同类型字段，REGISTER字段同样应该也满足类似条件。现在明白了sip报文不被解析的原因是REGISTER必须在报文开始位置，但是如何达到这个条件呢？虽然我们可以利用浏览器生成报文(TCP
via HTTP(S), UDP via TURN
w/WebRTC)，但是我们无法精确的控制报文的各个结构。如果使用TLS，加密的header位于起始位置，使用HTTP的话，起始是GET、POST等。
**分析linux网络协议栈源码。** 直接粘贴作者给的解释，最重要的部分已经加粗。
We’ll take a quick look at the [SIP connection tracking
module](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c)
  * [`module_init(nf_conntrack_sip_init)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1698) initialize this connection tracker, calling [`nf_conntrack_sip_init`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1662)
  * [`nf_ct_helper_init(...AF_INET, IPPROTO_TCP, "sip", SIP_PORT...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1676) we expect signaling to come in from IPv4 `AF_INET` TCP `IPPROTO_TCP` port 5060 `SIP_PORT`…this occurs for UDP, TCP, IPv4 & IPv6
  * [`sip_help_tcp(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1524) called when matching TCP SIP packet comes in 
    * [`process_sip_msg(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1500) if this looks like a potential SIP packet 
      * [`process_sip_request(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1444) is this is a request
      * [`strncasecmp(*dptr, handler->method, ...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1476-L1478) **the handler will bail unless the method (eg, REGISTER) occurs at the _start_ of the data portion of the packet (TCP or UDP)** like we saw with INVITE up above…[REGISTER](https://tools.ietf.org/html/rfc2543#section-4.2.6) is just another SIP command
      * this is a challenge as if we’re only using a web browser, we can’t produce a raw TCP connection and start any packet with our own data, as it will be filled with HTTP/TLS headers…or can we?
      * [`process_register_request(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1216)[`nf_ct_expect_init(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1289) via [`sip_handlers`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1391) we initialize the firewall pinhole (port to allow remote person to connect back in), but we don’t open it just yet
      * [`nf_nat_sip_hooks`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1295) -> [`nf_nat_sip(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_nat_sip.c#L144) the NAT also mangles (rewrites) the internal IP address of the client to the NAT’s public IP so the destination can properly reach it
  * [`sip_help_tcp(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1524) -> [`process_sip_msg(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1500) ->
    * [`process_sip_response(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1400) now we’re looking at SIP response from the SIP server 
      * [`process_register_response(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1314) -> [`refresh_signalling_expectation(...)`](https://github.com/samyk/linux/blob/29b0b5d56589d66bd5793f1e09211ce7d7d3cd36/net/netfilter/nf_conntrack_sip.c#L1381) the port is forwarded by the NAT only once a valid SIP response is sent by the SIP server
**使REGISTER出现在报文头部。**
报文有最大长度范围，如果我们可以发送长报文长度，并且控制其余部分报文内容，那么我们是不是可以使得REGISTER出现在报文头部呢？需要解决几个问题，浏览器将要发送多长的报文，每个浏览器是否不同，每个用户之间是否不同。并且HTTPS由于会加密报文不可控制。
我们在浏览器端发送6000byte大小的HTTP POST到攻击者服务器，带有ID和padding
data。并且在攻击者服务端，进行流量嗅探，确定报文的MTU size，IP header size, potential IP options, TCP
header size, potential TCP options, data packet size,
和我们实际可控的报文部分。同时我们在攻击者服务端运行服务监听5060端口，同时对浏览器的发送的报文进行正常的回复。如果SIP仅允许UDP报文的话，那么可以利用TURN协议。
**IP地址发现。** 如果防火墙/NAT可以正常解析的SIP的话，那么会按照SIP报文中的端口来打开victim的端口，
从而使得攻击者服务器可以和victim链接，但是目前构造保温情况仍未奏效。因为为了是ALG能够将SIP报文认定为是合法报文解析来看来看，请求数据回到的IP地址必须是内网IP地址，但是目前我们还不知道内网IP地址是什么。
在chrome上可以使用WebRTC来提取IP地址，并且这个过程中必须使用HTTPS，而后续攻击步骤必须使用HTTP，所以我们首先将流量重定向到HTTPS，获取IP地址之后在重定向到HTTP进行后续步骤。
如果使用Safari，IE=11，不支持WebRTC的情况，可以使用timing
attack攻击来获取内部ip地址。简单来说，就是在页面上附上标签,对应的是不同的网关192.168.*.1等，同时带有onsuccess、onerror的javascript事件，根据onsuccess、onerror触发与否与出发时间长短，判断是否存在对应网关。得到网关地址之后可以同理探测子网内victim地址。
然后所有的利用条件都已达到，我们已经能够成功使得NAT/防火墙解析SIP报文，victim的端口可以在不知情的情况被攻击者打开。
## 实验测试
实验测试首先需要搭建环境，我只有一台PC，所以开两台虚拟机，一台虚拟机是ubuntu
16.04模拟内网主机，另一台虚拟机是pfsense防火墙，ubuntu
16.04用仅主机模式网卡，pfsense有两张网卡对应LAN口、WAN口，LAN口网卡为仅主机模式，WAN口网卡为NAT桥接，这样pfsense的LAN口和ubuntu网卡在同一网段，模拟内网环境，同时设置ubuntu
16.04网关为pfsnese LAN口地址，pfsense
WAN口模拟外网接口，然后利用在线poc测试网站[http://samy.pl/slipstream/server进行测试。拓扑图如下。](http://samy.pl/slipstream/server%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82%E6%8B%93%E6%89%91%E5%9B%BE%E5%A6%82%E4%B8%8B%E3%80%82)
当我们在ubuntu16.04的firefox中访问恶意浏览器时，在pfsense的流量监控界面可以观察到有大量内网ip出现，对应的是针对内网网关、内网节点的ip地址的探测。
下图是用wireshark抓包，可以看到在探测内网网关地址。
下图是探测到内网网关地址192.168.19.x/24、192.168.174.x/24后开始对D段进行探测，对应的2778条为实际存在的ip地址，所以回送ack报文。
前端界面如下所示，在你不知情的情况下探测到你的内网信息，下图所示是首先尝试通过webrtc攻击获取ip地址，但是没有奏效转而进行timing
attack攻击(利用js的onsuccess/onerror事件)进行ip地址探测。
再贴一张利用webrtc攻击获取ip地址的前端效果图，webrtc攻击比起timing atk攻击速度快、准确率高。
最终一步应该是在外网直接打开内网端口，同时在内网监听端口也可以看到对应显示，在线poc也给了这个功能，但是按钮无法点击，有兴趣的人可以自行探索，也可以观看此研究员的演示视频。
## 总结
最后以两张图做个总结吧
## reference