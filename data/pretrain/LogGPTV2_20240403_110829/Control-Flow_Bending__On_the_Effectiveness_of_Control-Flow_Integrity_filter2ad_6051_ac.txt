printf ( " \ nread > Š " );
v u l n F u n c ();
printf ( " \ ndone .\ n " );
return 0;
}
G1 # arbitrary load (1/2)
f38ff:
f3900:
f3901:
f3902:
pop
pop
pop
ret
%edx
%ecx
%eax
G2 # arbitrary load (2/2)
412d2:
412d5:
412d7:
412d8:
412d9:
412da:
add
xor
pop
pop
pop
ret
$0x20,%esp
%eax,%eax
%ebx
%esi
%edi
G3 # arbitrary read
add
mov
ret
2ee25:
2ee2b:
2ee31:
G4 # arbitrary write
$0x1771cf,%ecx
0x54(%ecx),%eax
3fb11:
3fb12:
3fb18:
3fb1a:
pop
add
mov
ret
%ecx
$0xa,%ecx
%ecx,(%edx)
G5 # arbitrary call
mov
call
1b008:
1b00b:
%esi,(%esp)
*%edi
Figure 1: Our minimal vulnerable program that allows
hijacking a return instruction target.
Figure 2: Our call-site gadgets within libc.
AIR Gadget red.
0%
99.06%
98.86%
Targets Gadgets
128929
1462
0% 1850580
19611
No CFI
CFI
Table 1: Basic metrics for the minimal vulnerable pro-
gram under no CFI and our coarse-grained CFI policy.
We ﬁrst identiﬁed all gadgets that can be reached with-
out violating the given CFI policy. We found ﬁve gadgets
that allow us to implement all attacker goals as deﬁned
in Section 3. All ﬁve gadgets were within libc and be-
gan immediately following a call instruction. Two gad-
gets can be used to load a set of general purpose registers
from the attacker-controlled stack and then return. One
gadget implements an arbitrary memory write (“write-
what-where”) and then returns. Another gadget imple-
ments an arbitrary memory read and then returns. Fi-
nally, we found a ﬁfth gadget — a “call gadget” — that
ends with an indirect call through one of the attacker-
controlled registers, and thus can be used to perform ar-
bitrary calls. The ﬁve gadgets are shown in Figure 2. By
routing control-ﬂow through the ﬁrst four gadgets and
then to the call gadget, the attacker can call any function.
The attacker can use these gadgets to execute arbitrary
kernel vsyscall. In Linux
system calls by calling
systems (x86 32-bit), system calls are routed through
a virtual dynamic shared object
(linux-gate.so)
mapped into user space by the kernel at a random ad-
dress. The address is passed to the user space pro-
000 b8d60 :
...
b8d72 :
b8d77 :
b8d7d :
b8d81 :
b8d83 :
b8d88 :
call
add
mov
xchg
mov
call
...
$0xed27d ,% ebx
0 xc (% esp ) ,% edi
% ebx ,% edi
$0xb ,% eax
*% gs :0 x10
Figure 3: Disassembly of libc’s execve() function.
There is an instruction (0xb8d77) that can be returned
to by any return gadget under coarse-grained CFI.
cess. If the address is leaked, the attacker can execute
arbitrary system calls by calling
kernel vsyscall
using a call gadget.
Calls to
kernel vsyscall
are within the allowed call targets as libc itself calls
kernel vsyscall.
Alternatively, the attacker could call libc’s wrappers
for each speciﬁc system call. For example, the attacker
could call execve() within libc to execute the execve
system call. Interestingly, if the wrapper functions con-
tain calls, we can directly return to an instruction after
such a call and before the system call is issued. For an
example, see Figure 3: returning to 0xb8d77 allows us to
directly issue the system call without using the call gad-
get (we simply direct one of the other gadgets to return
there). There are some side effects on register ebx and
edi but it is straightforward to take them into account.
Arbitrary code execution is also possible. In the ab-
sence of CFI, an attacker might write new code some-
where into memory, call mprotect() to make that mem-
ory region executable, and then jump to that location
166  24th USENIX Security Symposium 
USENIX Association
6
USENIX Association  
24th USENIX Security Symposium  167
toexecutetheinjectedcode.CFIwillpreventthis,asthelocationoftheinjectedcodewillneverbeinoneofthetargetsets.Webypassthisprotectionbyusingmprotect()tomakealready-mappedcodewriteable.Theattackercanoverwritethesealready-availablecodepageswithmaliciouscodeandthentransfercontroltoitusingourcallgadget.Theresultisthattheattackercaninjectandexecutearbitrarycodeandinvokearbitrarysystemcallswitharbitraryparameters.Asanalternativemmap()couldalsobeusedtoallocatereadableandexe-cutablememory(ifnotprohibited).TheminimalprogramshowninFigure1containsavulnerabilitythatallowstheattackertooverwriteare-turnaddressonthestack.Wealsoanalyzedothermini-malprogramsthatallowtheattackertohijackanindirectjumporindirectcallinstruction,withsimilarresults.Weomitthedetailsoftheseanalysesforbrevity.AminimalvulnerableprogramforinitialindirectjumporindirectcallhijackingisfoundinAppendixA.Basedontheseresultsweconcludethatcoarse-grainedCFIpoliciesarenoteffectiveinprotectingevensmallandsimpleprograms,suchasourminimalvulnera-bleprogramexample.OuranalysisalsoshowsthatAIRandgadgetreductionmetricsfailtoindicatewhetheraCFIschemeiseffectiveatpreventingattacks;ifsuchat-tacksarepossibleonasmallprogram,thenattackswillbeeasieronlargerprogramswheretheabsolutenumberofvalidlocationsandgadgetsisevenhigher.6AttacksonFully-PreciseStaticCFIWenowturntoevaluatingfully-precisestaticCFI.RecallfromSection2.5thatwedeﬁnecontrol-ﬂowbendingasageneralizationofnon-control-dataattacks.Weexam-inethepotentialforcontrol-ﬂowbendingattacksonCFIschemeswithandwithoutashadowstack.6.1NecessityofashadowstackTobegin,wearguethatCFImusthaveashadowstacktobeastrongdefense.Withoutone,anattackercaneasilytraversetheCFGtoreachalmostanyprogramlocationdesiredandtherebybreaktheCFIscheme.Forastatic,statelesspolicylikefully-precisestaticCFIwithoutashadowstack,thebestpossiblepolicyforreturnsistoallowreturninstructionswithinafunctionFtotargetanyinstructionthatfollowsacalltoF.How-ever,forfunctionsthatarecalledoften,thissetcanbeverylarge.Forexample,thenumberofpossibletargetsforthereturnstatementsinmalloc()isimmense.Eventhoughdynamicallyonlyoneoftheseshouldbeallowedatanygiventime,astatelesspolicymustallowalloftheseedges.Figure4:Acontrol-ﬂowgraphwherethelackofashadowstackallowsanattackertomountacontrol-ﬂowbendingattack.ThisiselaboratedinFigure4.FunctionsAandCbothcontaincallstofunctionB.ThereturninfunctionBmustthereforebeabletotargettheinstructionfollowingbothofthesecalls.Innormalexecution,theprogramwillex-ecuteedge1followedbyedge2,oredge3followedbyedge4.However,anattackermaybeabletocauseedge3tobefollowedbyedge2,oredge1tobefollowedbyedge4.Inpracticethisisevenmoreproblematicwithtail-calloptimizations,whensignalhandlersareused,orwhentheprogramcallssetjmp/longjmp.Weignorethesecases.Thismakesourjobasanattackermoredifﬁcult,butwebaseourattacksonthefundamentalpropertiesofCFIinsteadofcornercaseswhichmightbehandledseparately.6.1.1DispatcherfunctionsForanattackertocauseafunctiontoreturntoadiffer-entlocationthanitwascalledfrom,shemustbeabletooverwritethereturnaddressonthestackafterthefunc-tioniscalledyetbeforeitreturns.Thisiseasytoarrangewhenthememorycorruptionvulnerabilityoccurswithinthatspeciﬁcfunction.However,oftenthevulnerabilityisfoundinuncommonlycalled(notwelltested)functions.Toachievemorepower,wemakeuseofdispatcherfunctions(analogoustodispatchergadgetsforJOP[4]).Adispatcherfunctionisonethatcanoverwriteitsownreturnaddresswhengivenargumentssuppliedbyanat-tacker.Ifwecanﬁndadispatcherfunctionthatwillbecalledlaterandusethevulnerabilitytocontrolitsargu-ments,wecanmakeitoverwriteitsownreturnaddress.Thisletsusreturntoanylocationwherethisfunctionwascalled.Anyfunctionthatcontainsa“write-what-where”primitivewhentheargumentsareundertheattacker’scontrolcanbeusedasadispatcherfunction.Alterna-tively,afunctionthatcanwritetoonlylimitedaddressescanstillworkaslongasthereturnaddressiswithinthelimits.Noteveryfunctionhasthisproperty,butasignif-icantfractionofallfunctionsdo.Forexample,assumewecontrolalloftheargumentstomemcpy().Wecan7168  24th USENIX Security Symposium 
USENIX Association
Figure5:Anexampleofloopinjection.Executionfol-lowscalledge3(cid:31),thenreturnsalongedge2(cid:31).pointthesourcebuffertoanattacker-controlledlocation,thetargetbuffertotheaddresswherememcpy()’sreturnaddresswillbefound,andsetthelengthtothewordsize.Then,whenmemcpy()isinvoked,memcpy()willoverwriteitsownreturnaddressandthenreturntosomeotherlocationinthecodechosenbytheattacker.IfthisotherlocationisinthevalidCFG(i.e.,itisaninstructionfollowingsomecalltomemcpy()),thenitisanallowededgeandCFIwillallowthereturn.Thus,memcpy()isasimpleexampleofadispatcherfunction.Wefoundmanydispatcherfunctionsinlibc,e.g.,1.memcpy()—Asdescribedabove.2.printf()—Usingthe“%n”formatspeciﬁer,theattackercanwriteanarbitraryvaluetoanarbitrarylocationandthuscauseprintf()tooverwriteitsownreturnaddress.3.strcat()—Similartomemcpy().Onlyworksiftheaddresstoreturntodoesnotcontainnullbytes.4.fputs()—Werelyonthefactthatwhenfputs()iscalled,charactersareﬁrsttemporarilybufferedtoalocationasspeciﬁedintheFILEargument.Anat-tackercanthereforespecifyaFILEwherethetem-porarybufferisplacedontopofthereturnaddress.MostfunctionsthattakeaFILEstructasanargu-mentcanbeusedinasimilarmanner.SimilarfunctionsalsoexistinWindowslibraries.Application-speciﬁcdispatcherfunctionscanbeusefulaswell,astheymaybecalledmoreoften.Anyfunctionthatcallsadispatcherfunctionisitselfadispatcherfunction:insteadofhavingthecalleeover-writeitsownaddress,itcanbeusedtooverwritethere-turnaddressofitscaller(orhigheronthecallchain).6.1.2LoopinjectionOnefurtherpotentialuseofdispatcherfunctionsisthattheycanbeusedtocreateloopsinthecontrol-ﬂowgraphwhennonewereintended,aprocesswhichwecallloopinjection.WecanusethistohelpusachieveTuring-completecomputationifwerequirealoop.Considerthecasewheretherearetwocallstothesamedispatcherfunction,wheretheattackercontrolsthear-gumentstothesecondcallanditispossibletoreachthesecondcallfromtheﬁrstthroughavalidCFGpath.Forexample,itiscommonforprogramstomakemulti-plesuccessivecallstoprintf().Ifthesecondcalltoprintf()allowsanattackertocontrolthearguments,thenthiscouldcauseapotentialloop.Thisisachievablebecausethesecondcalltoprintf()canreturntotheinstructionfollowingtheﬁrstcalltoprintf().Wecanthenreachthesecondcalltoprintf()fromthere(byassumption)andwehavecompletedtheloop.Figure5containsanexampleofthiscase.Undernor-malexecution,functionAwouldbeginbyexecutingtheﬁrstcalltofunctionBonedge1.FunctionBreturnsonedge2,afterwhichfunctionAcontinuesexecuting.ThesecondcalltofunctionBisthenexecuted,onedge3.Bthistimereturnsonedge4.NoticethatthereturninstructioninfunctionBhastwovalidoutgoingedges.AnattackercanmanipulatethistoinjectaloopwhenfunctionBisadispatcherfunction.TheattackerallowstheﬁrstcalltoBtoproceednormallyonedge1,re-turningonedge2.TheattackersetsupmemorysothatwhenBiscalledthesecondtime,thereturnwillfollowedge2insteadoftheusualedge4.Thatis,eventhoughthecodewasoriginallyintendedasstraight-lineexecu-tion,thereexistsaback-edgethatwillbeallowedbyanystatic,statelessCFIpolicywithoutashadowstack.Ashadowstackwouldblockthetransferalongedge2.6.2Turing-completecomputationCFIensuresthattheexecutionﬂowofaprogramstayswithinapredeﬁnedCFG.CFIimplicitlyassumesthattheattackermustdivertfromthisCFGforsuccessfulex-ploitation.WedemonstratethatanattackercanachieveTuring-completecomputationwhilefollowingtheCFG.ThisisnotdirectlyoneoftheattackergoalsoutlinedinSection3,howeveritisoftenausefulstepinachievingattacks[14].Speciﬁcally,weshowthatasinglecalltoprintf()allowsanattackertoperformTuring-completecomputa-tion,evenwhenprotectedwithashadowstack.Wedubthisprintf-orientedprogramming.Inourevaluation,wefounditwaspossibletomountthiskindofattackagainstallbutonebinary(whichrewrotetheirownlimitedver-sionofprintf).Ourattacktechniqueisnotspeciﬁctoprintf():wehaveconstructedasimilarattackusingfputs()whichiswidelyapplicablebutrequiresaloopobtainedinthecontrol-ﬂowgraph(vialoopinjectionorotherwise)tobe8Turing-complete. See Appendix C.
6.2.1 Printf-oriented programming
When we control the arguments to printf(), it is pos-
sible to obtain Turing-complete computation. We show
this formally in Appendix B by giving calls to printf()
which create logic gates. In this section, we give the intu-
ition behind our attacks by showing how an attacker can
conditionally write a value at a given location.
Assume address C contains a condition value, which is
an integer that is promised to be either zero or one. If the
value is one, then we wish to store the constant X at target
address T . That is, we wish to perform the computation
*T = *C ? X : *T. We show how this can be achieved
using one call to printf().
To do this, the attacker supplies the specially-crafted
format string “%s%hhnQ%*d%n” and passes arguments
(C,S,X − 2,0,T ), deﬁned as follows:
1. C — the address of the condition. While the “%s”
format speciﬁer expects a string, we pass a pointer
to the condition value, which is either the integer 0
or the integer 1. Because of the little-endian nature
of x86, the integer 1 contains the byte 0x01 in the
ﬁrst (low) byte and 0x00 in the second byte. This
means that when we print it as a string, if the condi-
tion value is 1 then exactly one byte will be written
out whereas if it is 0 then nothing will be be printed.
2. S — the address of the Q in the format string
(i.e., the address of the format string, plus 6). The
“%hhn” speciﬁer will write a single byte of output
consisting of the number of characters printed so
far, and will write it on top of the Q in the format
string. If we write a 0, the null byte, then the format
string will stop executing. If we write a 1, the for-
mat string will keep going. It is this action which
creates the conditional.
3. X − 2 — the constant we wish to store, minus two.
This speciﬁes the number of bytes to pad in the in-
teger which will be printed. It is the value we wish
to save minus two, because two bytes will have al-
ready been printed.
4. 0 — an integer to print. We do not care that we are
actually printing a 0, only the padding matters.
5. T — the target save location. At this point in time,
we have written exactly X bytes to the output, so
“%n” will write that value at the target address.
Observe that in this example, we have made use of a self-
modifying format string.
the case. We show using simple techniques it is possible
to achieve the same results without this control.
We ﬁrst deﬁne the destination of a printf() call ac-
cording to its type. The destination of an sprintf() call
is the address the ﬁrst argument points to (the destination
buffer). The destination of a fprintf() call is the ad-
dress of the temporary buffer in the FILE struct. The
destination of a plain printf() call is the destination
buffer of fprintf() when called with stdout.
Our attack requires three conditions to hold:
• the attacker controls the destination buffer;
• the format string passed to the call to printf() al-
• the attacker controls the argument to the format
speciﬁer as well as a few of the words further down
on the stack.
ready contains a “%s” speciﬁer; and,
We mount our attack by pointing the destination buffer
on top of the stack. We use the “%s” plus the controlled
argument to overwrite the pointer to the format string
(which is stored on the stack), replacing it with a pointer
to an attacker-controlled format string. We then skip
past any uncontrolled words on the stack with harmless
‘‘%x’’ speciﬁers. We can then use the remaining con-
trolled words to pivot the va_list pointer.
If we do not control any buffer on the stack, we can
obtain partial control of the stack by continuing our ar-
bitrary write with the %s speciﬁer to add arguments to
printf(). Note that this does not allow us to use null
bytes in arguments, which in 64-bit systems in particular
makes exploitation difﬁcult.
Implications
6.3
Our analysis of fully-precise static CFI, the strongest
imaginable static CFI policy, shows that preventing at-
tackers with partial control over memory from gain-
ing Turing-complete computation is almost impossible.
Run-time libraries and applications contain powerful
functions that are part of the valid CFG and can be used
by attackers to implement their malicious logic. Attack-
ers can use dispatcher functions to bend control ﬂow
within the valid CFG to reach these powerful functions.
Furthermore, we see that if an attacker can ﬁnd one of
these functions and control arguments to it, the attacker
will be able to both write to and read from arbitrary ad-
dresses at multiple points in time. Defenses which allow
attackers to control arguments to these functions must be
able to protect against this stronger threat model.
6.2.2 Practical printf-oriented programming
The previous section assumed that the attacker has con-
trol of the format string argument, which is usually not
7 Fully-Precise Static CFI Case Studies
We now look at some practical case studies to examine
how well fully-precise static CFI can defend against real-
USENIX Association  
24th USENIX Security Symposium  169
9
Binary
nginx
apache
smbclient
wireshark
xpdf
mysql
Arbitrary
write