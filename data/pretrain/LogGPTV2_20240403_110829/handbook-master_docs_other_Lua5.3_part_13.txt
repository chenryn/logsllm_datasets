检查 cond 是否为真。 如果不为真，以标准信息形式抛出一个错误 （参见 luaL_argerror）。
### luaL_argerror
[-0, +0, v]
int luaL_argerror (lua_State *L, int arg, const char *extramsg);
抛出一个错误报告调用的 C 函数的第 arg 个参数的问题。 它使用下列标准信息并包含了一段 extramsg 作为注解：
     bad argument #arg to 'funcname' (extramsg)
这个函数永远不会返回。
### luaL_Buffer
typedef struct luaL_Buffer luaL_Buffer;
字符串缓存 的类型。
字符串缓存可以让 C 代码分段构造一个 Lua 字符串。 使用模式如下：
首先定义一个类型为 luaL_Buffer 的变量 b。
调用 luaL_buffinit(L, &b) 初始化它。
然后调用 luaL_add* 这组函数向其添加字符串片断。
最后调用 luaL_pushresult(&b) 。 最后这次调用会在栈顶留下最终的字符串。
如果你预先知道结果串的长度， 你可以这样使用缓存：
首先定义一个类型为 luaL_Buffer 的变量 b。
然后调用 luaL_buffinitsize(L, &b, sz) 预分配 sz 大小的空间。
接着将字符串复制入这个空间。
最后调用 luaL_pushresultsize(&b, sz)， 这里的 sz 指已经复制到缓存内的字符串长度。
一般的操作过程中，字符串缓存会使用不定量的栈槽。 因此，在使用缓存中，你不能假定目前栈顶在哪。 在对缓存操作的函数调用间，你都可以使用栈，只需要保证栈平衡即可； 即，在你做一次缓存操作调用时，当时的栈位置和上次调用缓存操作后的位置相同。 （对于 luaL_addvalue 是个唯一的例外。） 在调用完 luaL_pushresult 后， 栈会恢复到缓存初始化时的位置上，并在顶部压入最终的字符串。
### luaL_buffinit
[-0, +0, –]
void luaL_buffinit (lua_State *L, luaL_Buffer *B);
初始化缓存 B。 这个函数不会分配任何空间； 缓存必须以一个变量的形式声明 （参见 luaL_Buffer）。
### luaL_buffinitsize
[-?, +?, e]
char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz);
等价于调用序列 luaL_buffinit， luaL_prepbuffsize。
### luaL_callmeta
[-0, +(0|1), e]
int luaL_callmeta (lua_State *L, int obj, const char *e);
调用一个元方法。
如果在索引 obj 处的对象有元表， 且元表有域 e 。 这个函数会以该对象为参数调用这个域。 这种情况下，函数返回真并将调用返回值压栈。 如果那个位置没有元表，或没有对应的元方法， 此函数返回假（并不会将任何东西压栈）。
### luaL_checkany
[-0, +0, v]
void luaL_checkany (lua_State *L, int arg);
检查函数在 arg 位置是否有任何类型（包括 nil）的参数。
### luaL_checkinteger
[-0, +0, v]
lua_Integer luaL_checkinteger (lua_State *L, int arg);
检查函数的第 arg 个参数是否是一个 整数（或是可以被转换为一个整数） 并以 lua_Integer 类型返回这个整数值。
### luaL_checklstring
[-0, +0, v]
const char *luaL_checklstring (lua_State *L, int arg, size_t *l);
检查函数的第 arg 个参数是否是一个 字符串，并返回该字符串； 如果 l 不为 NULL ， 将字符串的长度填入 *l。
这个函数使用 lua_tolstring 来获取结果。 所以该函数有可能引发的转换都同样有效。
### luaL_checknumber
[-0, +0, v]
lua_Number luaL_checknumber (lua_State *L, int arg);
检查函数的第 arg 个参数是否是一个 数字，并返回这个数字。
### luaL_checkoption
[-0, +0, v]
int luaL_checkoption (lua_State *L,
                      int arg,
                      const char *def,
                      const char *const lst[]);
检查函数的第 arg 个参数是否是一个 字符串，并在数组 lst （比如是零结尾的字符串数组） 中查找这个字符串。 返回匹配到的字符串在数组中的索引号。 如果参数不是字符串，或是字符串在数组中匹配不到，都将抛出错误。
如果 def 不为 NULL， 函数就把 def 当作默认值。 默认值在参数 arg 不存在，或该参数是 nil 时生效。
这个函数通常用于将字符串映射为 C 枚举量。 （在 Lua 库中做这个转换可以让其使用字符串，而不是数字来做一些选项。）
### luaL_checkstack
[-0, +0, v]
void luaL_checkstack (lua_State *L, int sz, const char *msg);
将栈空间扩展到 top + sz 个元素。 如果扩展不了，则抛出一个错误。 msg 是用于错误消息的额外文本 （NULL 表示不需要额外文本）。
### luaL_checkstring
[-0, +0, v]
const char *luaL_checkstring (lua_State *L, int arg);
检查函数的第 arg 个参数是否是一个 字符串并返回这个字符串。
这个函数使用 lua_tolstring 来获取结果。 所以该函数有可能引发的转换都同样有效。
### luaL_checktype
[-0, +0, v]
void luaL_checktype (lua_State *L, int arg, int t);
检查函数的第 arg 个参数的类型是否是 t。 参见 lua_type 查阅类型 t 的编码。
### luaL_checkudata
[-0, +0, v]
void *luaL_checkudata (lua_State *L, int arg, const char *tname);
检查函数的第 arg 个参数是否是一个类型为 tname 的用户数据 （参见 luaL_newmetatable )。 它会返回该用户数据的地址 （参见 lua_touserdata）。
### luaL_checkversion
[-0, +0, –]
void luaL_checkversion (lua_State *L);
检查调用它的内核是否是创建这个 Lua 状态机的内核。 以及调用它的代码是否使用了相同的 Lua 版本。 同时也检查调用它的内核与创建该 Lua 状态机的内核 是否使用了同一片地址空间。
### luaL_dofile
[-0, +?, e]
int luaL_dofile (lua_State *L, const char *filename);
加载并运行指定的文件。 它是用下列宏定义出来：
     (luaL_loadfile(L, filename) || lua_pcall(L, 0, LUA_MULTRET, 0))
如果没有错误，函数返回假； 有错则返回真。
### luaL_dostring
[-0, +?, –]
int luaL_dostring (lua_State *L, const char *str);
加载并运行指定的字符串。 它是用下列宏定义出来：
     (luaL_loadstring(L, str) || lua_pcall(L, 0, LUA_MULTRET, 0))
如果没有错误，函数返回假； 有错则返回真。
### luaL_error
[-0, +0, v]
int luaL_error (lua_State *L, const char *fmt, ...);
抛出一个错误。 错误消息的格式由 fmt 给出。 后面需提供若干参数， 这些参数遵循 lua_pushfstring 中的规则。 如果能获得相关信息，它还会在消息前面加上错误发生时的文件名及行号。
这个函数永远不会返回。 但是在 C 函数中通常遵循惯用法： return luaL_error(args) 。
### luaL_execresult
[-0, +3, e]
int luaL_execresult (lua_State *L, int stat);
这个函数用于生成标准库中和进程相关函数的返回值。 （指 os.execute 和 io.close）。
### luaL_fileresult
[-0, +(1|3), e]
int luaL_fileresult (lua_State *L, int stat, const char *fname);
这个函数用于生成标准库中和文件相关的函数的返回值。 （指 (io.open， os.rename， file:seek，等。)。
### luaL_getmetafield
[-0, +(0|1), e]
int luaL_getmetafield (lua_State *L, int obj, const char *e);
将索引 obj 处对象的元表中 e 域的值压栈。 如果该对象没有元表，或是该元表没有相关域， 此函数什么也不会压栈并返回 LUA_TNIL。
### luaL_getmetatable
[-0, +1, –]
int luaL_getmetatable (lua_State *L, const char *tname);
将注册表中 tname 对应的元表 （参见 luaL_newmetatable）压栈。 如果没有 tname 对应的元表，则将 nil 压栈并返回假。
### luaL_getsubtable
[-0, +1, e]
int luaL_getsubtable (lua_State *L, int idx, const char *fname);
确保 t[fname] 是一张表，并将这张表压栈。 这里的 t 指索引 idx 处的值。 如果它原来就是一张表，返回真； 否则为它创建一张新表，返回假。
### luaL_gsub
[-0, +1, e]
const char *luaL_gsub (lua_State *L,
                       const char *s,
                       const char *p,
                       const char *r);
将字符串 s 生成一个副本， 并将其中的所有字符串 p 都替换为字符串 r 。 将结果串压栈并返回它。
### luaL_len
[-0, +0, e]
lua_Integer luaL_len (lua_State *L, int index);
以数字形式返回给定索引处值的“长度”； 它等价于在 Lua 中调用 '#' 的操作 （参见 §3.4.7）。 如果操作结果不是一个整数，则抛出一个错误。 （这种情况只发生在触发元方法时。）
### luaL_loadbuffer
[-0, +1, –]
int luaL_loadbuffer (lua_State *L,
                     const char *buff,
                     size_t sz,
                     const char *name);
等价于 luaL_loadbufferx， 其 mode 参数等于 NULL。
### luaL_loadbufferx
[-0, +1, –]
int luaL_loadbufferx (lua_State *L,
                      const char *buff,
                      size_t sz,
                      const char *name,
                      const char *mode);
把一段缓存加载为一个 Lua 代码块。 这个函数使用 lua_load 来加载 buff 指向的长度为 sz 的内存区。
这个函数和 lua_load 返回值相同。 name 作为代码块的名字，用于调试信息和错误消息。 mode 字符串的作用同函数 lua_load。
### luaL_loadfile
[-0, +1, e]
int luaL_loadfile (lua_State *L, const char *filename);
等价于 luaL_loadfilex， 其 mode 参数等于 NULL。
### luaL_loadfilex
[-0, +1, e]
int luaL_loadfilex (lua_State *L, const char *filename,
                                            const char *mode);
把一个文件加载为 Lua 代码块。 这个函数使用 lua_load 加载文件中的数据。 代码块的名字被命名为 filename。 如果 filename 为 NULL， 它从标准输入加载。 如果文件的第一行以 # 打头，则忽略这一行。
mode 字符串的作用同函数 lua_load。
此函数的返回值和 lua_load 相同， 不过它还可能产生一个叫做 LUA_ERRFILE 的出错码。这种错误发生于无法打开或读入文件时，或是文件的模式错误。
和 lua_load 一样，这个函数仅加载代码块不运行。