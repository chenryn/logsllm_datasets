数据源对应于ConfigMap中的键-值对（key-value pair），其中，
(cid:2) key：文件名或密钥。
(cid:2) value：文件内容或字符值。
（1）从目录创建ConfigMap
可以使用kubectl create configmap命令从同一个目录中的多个文件创建ConfigMap。
创建一个配置文件目录并且下载两个文件作为测试配置文件：
mkdir -p configure-pod-container/configmap/kubectl/
wget
https://K8S.io/docs/tasks/configure-pod-container/configmap/kubectl/game.prope
rties -O configure-pod-container/configmap/kubectl/game.properties
wget
https://K8S.io/docs/tasks/configure-pod-container/configmap/kubectl/ui.propert
ies -O configure-pod-container/configmap/kubectl/ui.properties
创建ConfigMap，默认创建在default命名空间下，可以使用-n更改NameSpace（命名空间）：
[root@K8S-master01 ~]# kubectl create configmap game-config
--from-file=configure-pod-container/configmap/kubectl/
configmap/game-config created
查看当前的ConfigMap：
[root@K8S-master01 ~]# kubectl describe configmaps game-config
Name: game-config
Namespace: default
Labels: 
第2章 Docker及Kubernetes基础 | 93
Annotations: 
Data
====
game.properties:
----
enemies=aliens
lives=3
enemies.cheat=true
enemies.cheat.level=noGoodRotten
secret.code.passphrase=UUDDLRLRBABAS
secret.code.allowed=true
secret.code.lives=30
ui.properties:
----
color.good=purple
color.bad=yellow
allow.textmode=true
how.nice.to.look=fairlyNice
Events: 
可以看到，ConfigMap的内容与测试的配置文件内容一致：
[root@K8S-master01 ~]# cat
configure-pod-container/configmap/kubectl/game.properties
enemies=aliens
lives=3
enemies.cheat=true
enemies.cheat.level=noGoodRotten
secret.code.passphrase=UUDDLRLRBABAS
secret.code.allowed=true
secret.code.lives=30[root@K8S-master01 ~]# cat
configure-pod-container/configmap/kubectl/ui.properties
color.good=purple
color.bad=yellow
allow.textmode=true
how.nice.to.look=fairlyNice
（2）从文件创建ConfigMap
可以使用kubectl create configmap命令从单个文件或多个文件创建ConfigMap。
例如以configure-pod-container/configmap/kubectl/game.properties文件建立ConfigMap：
[root@K8S-master01 ~]# kubectl create configmap game-config-2
--from-file=configure-pod-container/configmap/kubectl/game.properties
configmap/game-config-2 created
查看当前的ConfigMap：
[root@K8S-master01 ~]# kubectl get cm game-config-2
NAME DATA AGE
game-config-2 1 38s
也可以使用--from-file多次传入参数以从多个数据源创建ConfigMap：
[root@K8S-master01 ~]# kubectl create configmap game-config-3
94 | 再也不踩坑的Kubernetes实战指南
--from-file=configure-pod-container/configmap/kubectl/game.properties
--from-file=configure-pod-container/configmap/kubectl/ui.properties
configmap/game-config-3 created
查看当前的ConfigMap：
[root@K8S-master01 ~]# kubectl get cm game-config-3 -oyaml
apiVersion: v1
data:
game.properties: |-
enemies=aliens
lives=3
enemies.cheat=true
enemies.cheat.level=noGoodRotten
secret.code.passphrase=UUDDLRLRBABAS
secret.code.allowed=true
secret.code.lives=30
ui.properties: |
color.good=purple
color.bad=yellow
allow.textmode=true
how.nice.to.look=fairlyNice
kind: ConfigMap
metadata:
creationTimestamp: 2019-02-11T08:33:34Z
name: game-config-3
namespace: default
resourceVersion: "4266928"
selfLink: /api/v1/namespaces/default/configmaps/game-config-3
uid: b88eea8b-2dd7-11e9-9180-000c293ad492
（3）从ENV文件创建ConfigMap
可以使用--from-env-file从ENV文件创建ConfigMap。
首先创建/下载一个测试文件，文件内容为key=value的格式：
[root@K8S-master01 ~]# wget
https://K8S.io/docs/tasks/configure-pod-container/configmap/kubectl/game-env-f
ile.properties -O
configure-pod-container/configmap/kubectl/game-env-file.properties
[root@K8S-master01 ~]# cat
configure-pod-container/configmap/kubectl/game-env-file.properties
enemies=aliens
lives=3
allowed="true"
# This comment and the empty line above it are ignored
创建ConfigMap：
[root@K8S-master01 ~]# kubectl create configmap game-config-env-file \
--from-env-file=configure-pod-container/configmap/kubectl/game-env-file.proper
ties
configmap/game-config-env-file created
第2章 Docker及Kubernetes基础 | 95
查看当前的ConfigMap：
[root@K8S-master01 ~]# kubectl get configmap game-config-env-file -o yaml
apiVersion: v1
data:
allowed: '"true"'
enemies: aliens
lives: "3"
kind: ConfigMap
metadata:
creationTimestamp: 2019-02-11T08:40:17Z
name: game-config-env-file
namespace: default
resourceVersion: "4267912"
selfLink: /api/v1/namespaces/default/configmaps/game-config-env-file
uid: a84ccd32-2dd8-11e9-90e9-000c293bfe27
注 意
如果使用--from-env-file 多次传递参数以从多个数据源创建 ConfigMap 时，仅最后一个
ENV生效。
（4）自定义data文件名创建ConfigMap
可以使用以下命令自定义文件名：
kubectl create configmap game-config-3
--from-file==
比如将game.properties文件定义为game-special-key：
[root@K8S-master01 ~]# kubectl create configmap game-config-4
--from-file=game-special-key=configure-pod-container/configmap/kubectl/game.pr
operties
configmap/game-config-4 created
[root@K8S-master01 ~]# kubectl get configmaps game-config-4 -o yaml
apiVersion: v1
data:
game-special-key: |-
enemies=aliens
lives=3
enemies.cheat=true
enemies.cheat.level=noGoodRotten
secret.code.passphrase=UUDDLRLRBABAS
secret.code.allowed=true
secret.code.lives=30
kind: ConfigMap
metadata:
creationTimestamp: 2019-02-11T08:46:08Z
name: game-config-4
namespace: default
resourceVersion: "4268642"
selfLink: /api/v1/namespaces/default/configmaps/game-config-4
uid: 797d269a-2dd9-11e9-90e9-000c293bfe27
96 | 再也不踩坑的Kubernetes实战指南
（5）从字符值创建ConfigMaps
可以使用kubectl create configmap与--from-literal参数来定义命令行的字符值：
[root@K8S-master01 ~]# kubectl create configmap special-config
--from-literal=special.how=very --from-literal=special.type=charm
configmap/special-config created
[root@K8S-master01 ~]# kubectl get cm special-config -o yaml
apiVersion: v1
data:
special.how: very
special.type: charm
kind: ConfigMap
metadata:
creationTimestamp: 2019-02-11T08:49:28Z
name: special-config
namespace: default
resourceVersion: "4269314"
selfLink: /api/v1/namespaces/default/configmaps/special-config
uid: f0dbb926-2dd9-11e9-8f6f-000c298bf023
3. ConfigMap实践
本节主要讲解ConfigMap的一些常见使用方法，比如通过单个ConfigMap定义环境变量、通
过多个ConfigMap定义环境变量和将ConfigMap作为卷使用等。
（1）使用单个ConfigMap定义容器环境变量
首先在ConfigMap中将环境变量定义为键-值对（key-value pair）：
kubectl create configmap special-config --from-literal=special.how=very
然后，将ConfigMap中定义的值special.how分配给Pod的环境变量SPECIAL_LEVEL_KEY：
apiVersion: v1
kind: Pod
metadata:
name: dapi-test-pod
spec:
containers:
- name: test-container
image: busybox
command: [ "/bin/sh", "-c", "env" ]
env:
# Define the environment variable
- name: SPECIAL_LEVEL_KEY
valueFrom:
configMapKeyRef:
# The ConfigMap containing the value you want to assign to
SPECIAL_LEVEL_KEY
name: special-config
# Specify the key associated with the value
key: special.how
restartPolicy: Never
（2）使用多个ConfigMap定义容器环境变量
首先定义两个或多个ConfigMap：
第2章 Docker及Kubernetes基础 | 97
apiVersion: v1
kind: ConfigMap
metadata:
name: special-config
namespace: default
data:
special.how: very
apiVersion: v1
kind: ConfigMap
metadata:
name: env-config
namespace: default
data:
log_level: INFO
然后，在Pod中引用ConfigMap：
apiVersion: v1
kind: Pod
metadata:
name: dapi-test-pod
spec:
containers:
- name: test-container
image: busybox
command: [ "/bin/sh", "-c", "env" ]
env:
- name: SPECIAL_LEVEL_KEY
valueFrom:
configMapKeyRef:
name: special-config
key: special.how
- name: LOG_LEVEL
valueFrom:
configMapKeyRef:
name: env-config
key: log_level
restartPolicy: Never
（3）将ConfigMap中所有的键-值对配置为容器的环境变量
创建含有多个键-值对的ConfigMap：
apiVersion: v1
kind: ConfigMap
metadata:
name: special-config
namespace: default
data:
SPECIAL_LEVEL: very
SPECIAL_TYPE: charm
使用envFrom将ConfigMap所有的键-值对作为容器的环境变量，其中ConfigMap中的键作为
Pod中的环境变量的名称：
apiVersion: v1
kind: Pod
98 | 再也不踩坑的Kubernetes实战指南
metadata:
name: dapi-test-pod
spec:
containers:
- name: test-container
image: busybox
command: [ "/bin/sh", "-c", "env" ]
envFrom:
- configMapRef:
name: special-config
restartPolicy: Never
（4）将ConfigMap添加到卷
大部分情况下，ConfigMap 定义的都是配置文件，不是环境变量，因此需要将 ConfigMap 中
的文件（一般为--from-file创建）挂载到Pod中，然后Pod中的容器就可引用，此时可以通过volume
进行挂载。
例如，将名称为special-config的ConfigMap，挂载到容器的/etc/config/目录下：
apiVersion: v1
kind: Pod
metadata:
name: dapi-test-pod
spec:
containers:
- name: test-container
image: busybox
command: [ "/bin/sh", "-c", "ls /etc/config/" ]
volumeMounts:
- name: config-volume
mountPath: /etc/config
volumes:
- name: config-volume
configMap:
# Provide the name of the ConfigMap containing the files you want
# to add to the container
name: special-config
restartPolicy: Never
此时Pod运行，会执行command的命令，即执行ls /etc/config/
special.level
special.type