---
author: Diogo Mónica
category: 容器与云
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 5541
date: '2018-06-03 21:57:35'
editorchoice: false
excerpt: 在这篇文章中，我们将讨论容器编排器安全模型中没有考虑到的、但是很重要的这方面的详细情况，以及 Docker 企业版中如何使用内置的编排性能、Swarm
  模式，去克服这些问题。
fromurl: https://blog.docker.com/2017/10/least-privilege-container-orchestration/
id: 9712
islctt: true
largepic: /data/attachment/album/201806/03/215723n53ak5ndex3bapnk.jpg
permalink: /article-9712-1.html
pic: /data/attachment/album/201806/03/215723n53ak5ndex3bapnk.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在这篇文章中，我们将讨论容器编排器安全模型中没有考虑到的、但是很重要的这方面的详细情况，以及 Docker 企业版中如何使用内置的编排性能、Swarm
  模式，去克服这些问题。
tags:
- 容器
- 编排
- Docker
- Swarm
thumb: false
title: 最小权限的容器编排
titlepic: true
translator: qhwdw
updated: '2018-06-03 21:57:35'
---
![](/data/attachment/album/201806/03/215723n53ak5ndex3bapnk.jpg)
Docker 平台和容器已经成为打包、部署、和管理应用程序的标准。为了在一个集群内协调跨节点的容器，必须有一个关键的能力：一个容器编排器。
![container orchestrator](/data/attachment/album/201806/03/215736pd1dhdoumu8ilhdi.jpg)
对于关键的集群化以及计划的任务，编排器是起重大作用的，比如：
* 管理容器计划和资源分配。
* 支持服务发现和无缝的应用程序部署。
* 分配应用程序运行必需的资源。
不幸的是，在这种环境下，编排器的分布式特性和资源的短暂性使得确保编排器的安全是一个极具挑战性的任务。在这篇文章中，我们将讨论容器编排器安全模型中没有考虑到的、但是很重要的这方面的详细情况，以及 Docker 企业版中如何使用内置的编排性能、Swarm 模式，去克服这些问题。
### 诱因和威胁模型
使用 swarm 模式的 Docker 企业版的其中一个主要目标是提供一个内置安全特性的编排器。为达到这个目标，我们部署了第一个在我们心目中认为的以最小权限原则设计的容器编排器。
在计算机科学中，一个分布式系统所要求的最小权限原则是，系统中的每个参与者仅仅能访问它正当目的所需要的信息和资源。不是更多，也不是更少。
> 
> “一个进程必须仅仅能去访问它的正当目的所需要的信息和资源”
> 
> 
> 
#### 最小权限原则
在一个 Docker 企业版集群中的每个节点分配的角色：既不是管理者（manager），也不是工人（worker）。这些角色为节点定义了一个很粗粒度的权限级别：分别进行管理和任务执行。尽管如此，不用理会它的角色，通过使用加密的方式，来保证一个节点仅仅有执行它的任务所需要的信息和资源。结果是，确保集群安全变得更容易了，甚至可以防止大多数的有经验的攻击者模式：攻击者控制了底层通讯网络，或者甚至攻陷了集群节点。
### 内核缺省安全
这是一个很老的安全最大化状态：如果它不是缺省的，就没人用它。Docker Swarm 模式将缺省安全这一概念融入了核心，并且使用这一机制去解决编排器生命周期中三个很难并且很重要的部分：
1. 可信引导和节点引入。
2. 节点身份发布和管理。
3. 认证、授权和加密的信息存储和传播。
我们来分别看一下这三个部分：
#### 可信引导和节点引入
确保集群安全的第一步，没有别的，就是严格控制成员和身份。管理员不能依赖它们节点的身份，并且在节点之间强制实行绝对的负载隔离。这意味着，未授权的节点不能允许加入到集群中，并且，已经是集群一部分的节点不能改变身份，突然去伪装成另一个节点。
为解决这种情况，通过 Docker 企业版 Swarm 模式管理的节点，维护了健壮的、不可改变的身份。期望的特性是，通过使用两种关键的构建块去保证加密：
1. 为集群成员使用 安全加入令牌   Secure join token 。
2. 从一个集中化的认证机构发行的内嵌唯一身份的证书。
##### 加入 Swarm
要加入 Swarm，节点需要一份 安全加入令牌   Secure join token 的副本。在集群内的每个操作角色的令牌都是独一无二的 —— 现在有两种类型的节点：工人（workers）和管理者（managers）。由于这种区分，拥有一个工人令牌的节点将不允许以管理者角色加入到集群。唯一得到这个特殊令牌的方式是通过 swarm 的管理 API 去向集群管理者请求一个。
令牌是安全的并且是随机生成的，它还有一个使得令牌泄露更容易被检测到的特殊语法：一个可以在你的日志和仓库中很容易监视的特殊前缀。幸运的是，即便发现一个泄露，令牌也可以很容易去更新，并且，推荐你经常去更新它们 —— 特别是，在一段时间中你的集群不进行扩大的情况下。
![Docker Swarm](/data/attachment/album/201806/03/215739qv7uv8sbyv87hfvx.jpg)
##### 引导信任
作为它的身份标识创建的一部分，一个新的节点将向任意一个网络管理者请求发布一个新的身份。但是，在我们下面的威胁模型中，所有的通讯可以被一个第三方拦截。这种请求存在的问题是：一个节点怎么知道与它进行对话的对方是合法的管理者？
![Docker Security](/data/attachment/album/201806/03/215739sbxzyy3i5yi7yv41.jpg)