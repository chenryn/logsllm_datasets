2
Construction-I of TDS. Given a fuzzy locker and a public
key encryption (PKE) with the algorithms (KeyGen, Enc, Dec),
we can construct a TDS as follows:
• Setup(1λ, s1, . . . , sn, t): The algorithm ﬁrst runs the
(q-ary) codeword generation algorithm C.Gen which in-
puts the security parameter, and t, n, it returns {Ci}i∈[n],
tk, where Ci = ci
KeyGen of the PKE and returns q(cid:96) key pairs:
(cid:96). The algorithm then runs the
1, . . . , ci
(pk1,1, sk1,1), . . . , (pk1,(cid:96), sk1,(cid:96));
(pk2,1, sk2,1), . . . , (pk2,(cid:96), sk2,(cid:96));
. . .
(pkq,1, skq,1), . . . , (pkq,(cid:96), skq,(cid:96))
Finally, the Setup algorithm takes users’ secrets s1, . . . , sn,
tk, C1, . . . , Cn and all those key pairs as inputs, and
it outputs system parameter para, an encryption key
pk, and a set of decryption keys sk1, . . . , skn. Specif-
ically, pk contains all the public keys above; ski =
} for i ∈ [n]; and para contains tk
{sk1,ci
and (cid:104)ω1, . . . , ωn(cid:105), where ωi = FL.Enc(Ci, si).
, . . . , sk(cid:96),ci
1
(cid:96)
putes m(cid:96) = m−(cid:80)(cid:96)−1
• Enc(pk, m): This algorithm is given pk and a message
m. It ﬁrst randomly samples m1, . . . , m(cid:96)−1, then com-
i=1 mi and cti,j = Enc(pki,j, mj) for
i ∈ [q], j ∈ [(cid:96)]; it outputs the ciphertext ct = {cti,j}.
• Dec(ski, ct): This algorithm takes inputs para, pk, a
secret key ski and a ciphertext ct. It parses the secret
key and the ciphertext, and computes mj = Dec(skj,ci
i=1 mi. The algorithm outputs m.
and further m =(cid:80)(cid:96)
j
, cti,j)
• RecB,D(pk, para): This algorithm inputs para, pk and
has oracle access to a device B and a distribution D. It
ﬁrst runs the following procedure for each index k ∈ [(cid:96)]
to extract a pirate codeword from B:
and computes mk = m −(cid:80)
1. It initializes the pointer value i0 = 1.
2. It samples m ← D, samples messages {mi}i(cid:54)=k
3. It feeds ciphertext {cti,j} to B where ci,j = Enc(pki,j, mj)
i(cid:54)=k mi.
if j (cid:54)= k or i > i0; and ci,k = Enc(pki,k, ri) for
i ≤ i0 where ri is a random message.
denoted by n0.), or it returns ri0 +(cid:80)
4. If in N runs (a value that will be determined in
the analysis), the number of times n1 that B re-
turns m correctly is suﬃciently smaller than that
in the (i0 − 1)−th experiment (the diﬀerence is
j(cid:54)=k mj the
algorithm returns c∗
k = i0; otherwise, it stores n1,
sets i0 = i0 + 1, and repeats from step 2.
The pirate codeword retrieved is C∗. The algorithm
parses para to identify the data (cid:104)ω1, . . . , ωn(cid:105). It then
runs the decryption algorithm of the fuzzy locker on all
of them, i.e, for i ∈ [n], it runs FL.Dec(C∗, ωi) = s∗
i .
The algorithm stops if ∃s∗
i (cid:54)= ⊥ and it returns s∗
i .
Security analysis. Due to lack of space, we present here
only a brief sketch about the security properties, and refer
to the full version for the detailed proofs.
Regarding IND-CPA security, it follows in a straightfor-
ward manner from the security of the underlying PKE scheme.
Regarding privacy of the honest user secrets, follows easily
from the security of the fuzzy locker.
Regarding the black-box traitor deterring property, note
that the Rec algorithm proceeds in two steps, it ﬁrst recov-
ers a pirate codeword C∗ from the box B. If there exists
a colluder codeword Ci, s.t., Accuse(tk, C∗, Ci) = 1, then
in the second step, according to the correctness of the fuzzy
locker, the decryption of FL.Dec(C∗, ωi) will return si. The
security of the ﬁngerprinting code guarantees that if any pi-
rate codeword is produced following the “marking assump-
tion”, it can be used to accuse at least one of the colluders.
The IND-CPA security of the underlying PKE scheme es-
sentially enforces the “marking assumption.” To see this,
suppose the collusion user secret keys are {ski} for i ∈ Ucor,
for each index j, the alphabet c∗
for the pirate codeword
for k (cid:54)∈ Ucor with probabil-
at index i can not be any ck
ity signiﬁcantly larger than the guessing probability δ − α.
i
Otherwise, these keys may be used to decrypt a ciphertext
encrypted under a public key pkk,i.
i
The choice of N, n0 can be easily determined as follows.
There must exist an index i0 such that the probability of
returning a correct plaintext (denoted by p1) is at least [δ −
(δ − α)]/q = α/q smaller than that for i0 − 1 (denoted by
p2). From the Chernoﬀ bound Pr[X < (1− ω)µ] ≤ e−ω2µ/2,
let us use X 1
i = 1 denote the event that decryption query
for i0 − 1 is answered correctly while X 2
i = 0 denote that for
i0 is not answered correctly. Also we use Xi = 1 denote the
above joint event, i.e., Pr[Xi = 1] = Pr[X 1
i = 0] =
p1(1−p2) ≥ p1−p2 ≥ α/q. When we set N = q
α log2 λ, n0 =
α
2q N , where λ is the security parameter, the gap will almost
always appear and thus a pirate codeword will be identiﬁed.
i = 1 ∧ X 2
Theorem 3.2 Given a public key encryption scheme, and
a fully secure fuzzy locker (for a q-ary ﬁngerprinting code),
there exists a TDS satisfying: fully collusion resilient, black-
235box traitor deterring property w.r.t to any message distribu-
tion D that has min-entropy H∞(D) ≥ − log(δ − α), where
δ is the correctness required by the adversarial device, α is
a non-negligible amount that is signiﬁcantly smaller than δ,
and the parameters are set to be N = q
3.2 A Fuzzy locker for CFN codes.
α log2 λ, n0 = α
2q N .
1, . . . , cj
We now propose a construction for a fuzzy locker w.r.t.
CFN codes [9].Consider the CFN ﬁngerprinting scheme where
the collusion size is set to be t; in order generate a codeword
(cid:96) ←
for a user j, the authority randomly samples cj
[q](cid:96). The tracing algorithm accuses the user whose codeword
has the largest number of locations that share the same sym-
bol with the pirate codeword. Observe that this accusation
procedure is identical to ﬁnding the “closest” among all user
codewords to the pirate codeword. To put it in another
way, the user codewords are random strings, but the trac-
ing property of the CFN code guarantees that under the
“marking assumption”, any pirate codeword produced by a
collusion of no more that t random codewords will have a
small L1-distance to one of the colluder codewords.1 To
facilitate the construction of the fuzzy locker we employ a
fuzzy extractor [11] which enables one to retrieve the same
random string from two diﬀerent but correlated strings that
have high entropy (cf. the fuzzy vault scheme [18]).
In more detail, most of the fuzzy extractors follow a correct-
then-extract strategy. When the two strings are close enough,
an error correcting code (ECC) can be used to eliminate
their discrepancies and then a randomness extractor [7] is
applied to extract a uniform output (which will later be used
as a key) from the high entropy codeword (which will be the
source from the point of view of the extractor). However for
the fuzzy locker for CFN codes, the portion of disagreement
(errors) between the codeword used for encryption and the
pirate codeword extracted for decryption is quite large and
beyond the decoding capability of a unique decoding ECC.
We thus give up perfect correctness for the fuzzy locker, and
turn to the use of list decoding [17, 30]. In a list decodable
code, the error correction returns multiple candidates, but
it can decode eﬃciently a number of errors up to portion
almost 1 (as opposed to unique decoding). One last thing
we need to be careful is that the rate of the ECC should
be selected in a way that the entropy loss will not prohibit
randomness extraction.
Combining the above tools, we will use the uniform string
extracted from the fuzzy extractor as a secret key to en-
crypt the user secret data. We further will assume the valid
messages are easily identiﬁable, and that decryption using a
wrong key will almost never yield a valid message. These two
assumptions are easy to achieve by including in the plaintext
a message authentication code or a signature on the message,
for details about this technique, we refer to [11, 24].
Fuzzy locker for CFN codes.: We present below the
fuzzy locker for CFN codes; the choices of the parameters
will be speciﬁed later. Given a randomness extractor Ext
and a secure symmetric key encryption (SE.Enc, SE.Dec):
• FL.Enc(C, m): The algorithm inputs C = c1 . . . c(cid:96)
U←−
F (cid:96)
q , and message m. It ﬁrst samples a random ((cid:96), κ)q
Reed-Solomon code X = x1, . . . , x(cid:96) which can correct
1Actually, from the analysis of CFN one infers that if the
pirate codeword and user codeword agree on more than (cid:96)/t
symbols, the user can be accused.
up to (cid:96) − (cid:96)/t errors, and computes Y = (cid:104)y1, . . . , y(cid:96)(cid:105),
where yi = ci + xi mod q; It then selects a random
bitstring s and computes k = Ext(s, C), 2 and c =
SE.Enc(k, m). The algorithm outputs ct = (Y, s, c).
1, . . . , X(cid:48)
(cid:96) and ciphertext ct, it ﬁrst computes C(cid:48) = c(cid:48)
i = yi − c∗
• FL.Dec(C∗, ct): On input a pirate codeword C∗ =
c∗
1 . . . c(cid:48)
1 . . . c∗
where c(cid:48)
i mod q, and it runs the list de-
coding algorithm on C(cid:48) to get a list of RS codewords
{X(cid:48)
L}. It then computes a list of possible user
codewords {C1, . . . , CL} where Ci = Yi − X(cid:48)
i, where
“-” stands for component-wise modular subtraction.
The algorithm tries the following procedure for ev-
it computes ri = Ext(s, Ci) and
ery user codeword:
If there exists an m (cid:54)= ⊥, the
mi = SE.Dec(ri, c).
algorithm outputs m, otherwise, it outputs ⊥.
(cid:96)
Security analysis. Regarding correctness. First we re-
call the basic idea of the CFN code. It randomly samples
C ← F (cid:96)
q . Suppose t users (w.l.o.g., we assume they have
codewords C1, . . . , Ct) collude to produce a pirate codeword
C∗. Due to the marking assumption, each symbol c∗
i equals
to one of the corresponding symbols in C1, . . . , Ct. It follows
easily that there exists a Ci, such that C∗ and Ci agree on at
least (cid:96)/t locations. We now check the decryption algorithm
on cti = FL.Enc(Ci, mi). C(cid:48) = Y − C∗ = X + (C − C∗)
(cid:96)} agree with x1, . . . , x(cid:96) on at least (cid:96)/t
mod q, thus {c(cid:48)
1, . . . , c(cid:48)
locations. For a Reed-Solomon code RS: Σκ → Σ(cid:96), it can
(cid:96)κ errors. If we have (cid:96)/t ≥ √
decode at most (cid:96) − √
(cid:96)κ, then
RS would return a list of possible candidates which contains
the actual X. Then Y − X would yield the user codeword
Ci; correctness then follows easily.
Regarding security: for any honest user whose codeword
C that is uniformly selected, we can think it is selected after
the pirate code C∗ is produced. Following the probabilistic
 /3, and q ≥ 4t, it holds
analysis from [9], if (cid:96) ≥ 4t log n
that Pr[C∗, C agree on (cid:96)/t locations] ≤ .
It follows that
the decoding algorithm will not return any user codeword.
A bit more formally, we can think of the ciphertext (Y, s, c)
as being generated following the KEM/DEM [10] framework,
where Y, s encrypt the session key k which is used to encrypt
the data in c. Conditioned on Y, s, the min-entropy of C can
be calculated as (cid:96) log q− ((cid:96)− κ) log |Σ| as s is independent of
C, Y is of length (cid:96), and the original random codeword has
entropy κ log |Σ|. Now if we have (cid:96) log q − ((cid:96) − κ) log |Σ| ≥
Θ(λ), the strong extractor can output a suﬃciently long
uniform key k, thus Y, s form a secure KEM. Now the IND-
CPA security of the message follows from the security of the
symmetric key encryption. Due to lack of space, we defer
the detailed proof in the full version.
Setting up the parameters. There are multiple con-
straints about selecting the parameters for the ﬁrst con-
struction of TDS from the CFN code. More speciﬁcally,
for parameters (cid:96), κ, n, t, , λ being the dimension and de-
gree of the RS code, the number of users, the bound of
colluders, the error term in the ﬁngerprinting code and the
security parameter respectively, they have to satisfy: (1).
(cid:96) ≥ max(κt2, 4t log n
 ); (2). (cid:96) log q − ((cid:96) − k) log (cid:96) ≥ Θ(λ).
 , we can choose (cid:96) = q = 4t log n,
and κ = Θ(λ). The resulting traitor deterring scheme will
When κt2 ≤ 4t log n