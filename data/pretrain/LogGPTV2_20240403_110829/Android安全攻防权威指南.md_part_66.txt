psBridgeIn *
---
## Page 297
10.5内核漏洞利用
18Z
3352
( (Ev_DATA *)psSysData>pvBnvSpecificData) ->pvBridgeData;
psBridgeOut = (ING_PVOID) ( (IMG_PBYTE)psBridgeIn +
3353
PVRSRV_MAX_BRIDGE_IN_SIZE) :
3354
if (psBridgePackageK->ui32InBufferSize > 0)
3355
3363
1f (CopyFromUserWrapper (psPerProc,
3364
3365
ui32BridgeID,
3366
psBridgePackageKH->pvParamIn,
psBridgeIn,
3367
psBridgePackagel>ui32InBufferSize)
- + +
psBridgePackageKM参数对应的结构是从用户空间复制面来的。在第3351和3352行，作
者将psBridgeIn和psBridgeOut指向pSysData->pvEnvSpecificationData 的
pvBridgeData 成员。如果 ui32InBufferSize 大于0.CopyFromUserWrapper 函数就会被
调用。这个函数仅仅是Linux内核中标准copy_from_user函数的一个封装。事实上，前两个
参数会被忽略，实际调用的函数是：
I.f (copy_from_user (psBridgeIn, peBridgePackageKM->pvParamIn,
p8BridgePackagel->ui32InBufferSize))
此时，ui32InBufferSize可以被完全控制，并没有与psBridgeIn 指向的内存大小进行
比较验证。如果指定一个比buffer更长的大小，就可以越过边界写人内存，破坏内核内存。这个
漏洞被赋子编号CVE-2011-1352。
接下来，驱动根据bridgeID从一个分发表中读取一个函数指针并执行。利用程序使用的
bridgeID是 CONNECT_SERVICES，对应驱动中的 PVRSRV_BRIDGE_CONNECT_SERVICES。这个
bridgeID对应的函数在CommonBridgeInit函数中注册，以调用rVRSRVConnectBw函数。然
面，这个函数并不做任何相关的事情。返回到BridgeDispatchkM函数，接下来的代码如下：
If (CopyToUserWrapper (psPexProc,
3400
3401
ui32BridgeID,
3402
3403
psBridgeOut,
psBridgePackageKM->ui32OutBufferSize]
可以看到另一个函数的封装CopyToUserWrapper。跟之前一样，前两个参数被忽略，函数
10
调用为：
if (copy_to_user (psBridgePackageKM->pvParamOut, psBridgeOut,
psBridgePackagelt->ui320utBufferSize))
这一次，驱动把数据从psBridgeOut复制到传入的用户空间的内存中。同样信任你传入
ui320utBufferSize的大小，即所复制字节的长度。可以给一个大于psBridgeOut指向内存
的长度，所以可以读取buffer以外的数据。这个问题被赋予编号CVE-2011-1350。
基于对这两个问题的深人理解，利用程序所做的事情就一目了然了。但是还有一个细节不清
楚，就是pvBridgeIn 和pvBridgeOut指向的是哪里？为了明确这个问题，搜索基指针
---
## Page 298
282第10章攻击内核
pvBridgeData。gitgrep命令似乎没有给出一个直接赋值的地方，但是你可以发现，
pvBridgeData的引用被 drviers/gpu/pvr/osfunc.c传入。仔细查看如下代码：
427 (
437
if (OSA11ocMem ( PVRSRV_OS_PAGEABLE_KEAP, PVRSRV_MAX_BRIDGE_IN_SIZE +
PVRSRV_MAX_BRIDGE_OUT_SIZE,
438
439
spsBnvData>pvBridgeData, IHG_NULL,
重点关注0SA11ocNem，如果第4个参数是0，或者请求的大小不大于一个页（0x1000字节），
那么它就会使用kmal1oc分配内存：否则使用内核的vmallocAPI来分配内存。在这次调用中，
请求大小为IN_SIZE和OUT_SIZE之和，两个都是0x1000。这解释了利用程序中为什么要加减
0x1000。相加之后，请求大小就是两个页（0x2000），因此会使用vma11oc。然面，0SInitEnvData
函数在调用oSA11ocMem时传人了0作为第4个参数。这样，两个页大小的内存就能通过kma11oc
来分配了。
在驱动初始化过程中，很早就调用了OSInitEnvData函数（启动过程中）。这意味着，对
于任意一次启动，buffer的位置都是固定的。与内核堆块相邻的内存究竞是什么对象，则取决于
启动时间、设备加载的驱动等很多因素。这是一个重要的细节，会在下一节中讨论。
·修复利用程序
理解了这两个漏洞，就可以继续努力将利用程序移植到目标设备上了。
回忆之前尝试运行原始利用程序的时候，dev_attr_ro符号不在目标设备的/proc/kallsyms
当中。要么这个对象不存在，要么这个符号没有被导出。所以需要寻找另一个对象的符号，来满
足两个条件。首先，要能够通过修改它来劫持内核的控制流，就像原先的利用程序那样随时控制
劫持的发生，但这并不是必需的条件。其次，这个对象必须与pvBridgeDatabuffer相邻。
为了解决这个问题，应首先满足第二个条件，然后再满足第一个。寻找与pvBridgeData
buffer相邻的内存非常简单，要对之前改过的利用程序进行进一步修改：在注释掉dev_attr_ro
符号解析代码的基础上，把泄露的内核空间内存保存到一个文件中。成功后重启设备，继续dump
相邻的内存。为了得到多次boot都稳定的结果，将这个过程重复100次。拥有数据文件之后，
把设备中的/proc/kallsyms提取出来。用一个Ruby小脚本，根据地址来对符号名进行分类。接下
来处理这100个样本。对于每一个样本，把数据拆分成32比特大小，逐一查看这些值是否在
/proc/kallsyms的分类当中。如果是，相应符号的计数加一。
这个步骤的输出是/proc/kallsyms中的一个对象类型列表，以及出现在 buffer旁边的频率（总
计100次）。前10项如下所示：
dev:~/levitator-droid1 $ head dumps-on-fresh-boot.freg
86 0xc0069214 T do_no_restart_sysca11
90 0xc003099c t kernel_thread_exit
68 0xc01bc42c t kliat_chi1dren_get
78 0xc03cab18 t fair_sched_class
68 0xc01bc368 t k1ist_chi1dren_put
65 0xc03cdee0 t proc_dir_inode_operation8
---
## Page 299
10.6小结
283
65 0xe03cde78 t proc_dir_operations
62 0xc00734a4 T autoremove_wake_function
58 0xc03ce008 t proc_file_inode_operations
60 0xc006f968 t worker_thread
前面儿个看起来非常好，因为与buffer相邻的比率达到了90%左右；但是简单尝试之后发现。
这些对象并不好利用。在剩下的符号中，以proc_开头的对象需要特别注意，它们控制了proc
文件系统的行为。这很有用，因为可以通过与/proc下的条目交互来触发这些操作。这比较理想
地满足了第一个条件，并且以65%的比率达到了第二个条件。
找到proc_dir_inode_operations对象后，准备开始实现这个新方法。这些对象指针与
buffler相邻，表明它们嵌人在一些其他类型的对象中。回头看一下内核源代码，找到赋值语句，
即被引用的对象在右边的语句。这样可以找到fs/proc/generic.e中的第572行代码：
559 static int proc_register (struct proc_dir_entry * dir,
struct proc_dir_entry * dp)
560 {
569
* 1 1
if (S_ISDIR(dp->mode))(
570
if (dp->proc_1ops = NULL)(
571
reosexedoxpooady =edoooade-dp
572
dp->proc_iops = sproc_dir_inode_operations1
内核使用proc_register 函数来创建proc文件系统中的条目。创建目录条目时，它会把
指向proc_dir_inode_operations的指针赋值给proc_iops成员。基于dp变量的类型，可
以知道这个相邻的对象是proc_dir_entry结构。
知道了外部数据类型的结构，就可以修改它的元素了。把需要的数据结构复制到新的利用程
序文件中，把未定义的指针类型改成空指针，让利用程序去寻找proc_dir_inode_operations
符号（而不是dev_attr_ro）。然后实现新的触发代码，递归式扫描/proc中的所有条目。最后
创建一个特别构造的inode_operations表，让getattr 成员指向你的内核空间载荷。当系
统尝试从修改后的proc_dir_entry中获取属性时，内核会调用getattr方法，这样就得到了
root权限。跟之前一样，做一些清理工作并打开一个root shell。成功了！
10.6小结
10
本章介绍了关于攻击Android设备Linux内核的一些主题。由于采用单内核设计和分发配置
方式，并且暴露了较大的攻击面，所以Android内核漏洞利用相对简单。
除此之外，本章还给Android内核利用程序开发者提供了一些工具和建议，让利用开发变得
更加简单。本章涵盖编译自定义内核和模块的整个过程，展示了如何使用内核提供的各种调试工
具，以及如何从设备和原厂固件镜像中提取信息。
本章的几个案例教你如何针对内核内存破坏漏洞进行利用程序开发。这些漏润包括数组越
界、直接内存映射、信息泄露和堆破坏等。
下一章将讨论Android的电话子系统，闸述如何研究、监视和fuzz无线接口层（RIL）组件。
---
## Page 300
第11章
攻击RIL无线接口层
无线接口层（RadioInterfaceLayer）简称RIL，是Android平台中负责移动通信的核心组件。
它为蜂窝调制解调器（cellularmodem）提供接口，借助移动网络向用户提供移动通信服务。从
设计上来说，RIL独立于蜂窝调制解调器芯片，负责实现语音通话、短信和移动上网等功能。如
果没有RIL，Android设备就不能接入移动通信网络。因此在某种程度上，RIL是Android设备作
为智能手机所必不可少的组成部分。当前，并非只有普通手机和智能手机才有移动通信功能，许
多平板电脑和电子书阅读器也内建了实时在线的移动上网功能。因为移动上网是由RIL负责的，
因此RIL存在于绝大部分Android设备中。
本章介绍RIL的工作原理，以及分析和攻击RIL的方法。原理部分介绍组成RIL的各个模
块，以及它们协同工作的方式：攻击部分则主要围绕短信服务（SMS）展开，重点讨论如何在
Android设备上对短信服务进行模棚测试。本章前半部分对AndroidRIL进行概述，并介绍SMS
消息的格式；后半部分则深人探讨如何修改RIL的代码，从面对Android中SMS的实现代码进
行模树测试。阅读本章之后，你将拥有足够的知识对Android的RL进行安全测试
11.1RIL简介
Android中的RlL是移动通信硬件接口与Android电话服务子系统之间的一个抽象层。它支
持GSM、CDMA、3G和4GLTE等所有类型的移动网络，处理移动通信中所有具体的业务，包
括网络注册、语音通话、短信（SMS）、分组数据（IP通信）等。因此、RIL在Android设备中
扮演重要的角色。
RIL是Android中极少数可以直接从外界接触到的代码之一。它的攻击面类似于服务器上部
署的网络服务，从移动网络发送到Android设备的所有数据都会经过设备中的RIL。最好的例子
就是短信的接收处理过程。
当短信发送至Android手机时，会由手机中的蜂窝调制解调器接收。蜂窝调制解调器从基站
接收物理数据并解码，然后将解码后的消息传给Linux内核。这条消息会经过AndroidRIL的各
个组件，最终抵达负责短信收发的应用程序。短信在RIL内部的传递过程会在稍后详细介绍。现
在需要理解的是，Android中的RIL可以受到远程攻击的代码。
对于攻击者来说，攻破RIL可以获得各种效果，比如用于欺诈。RIL的主要功能是与数字基
---
## Page 301
11.1RIL简介
285
带进行交互，因此控制了RIL也就控制了基带。此时，攻击者可以拨打高收费电话或者发送高额
费率的扣费短信：可以进行欺诈攻击，从而获得金钱收益；还可以进行侦听或其他间课行为。RIL
可以控制基带中的其他功能，例如设置自动应答。对企业来说，这个问题可能非常严重。还有可
能截获所有流经RIL的数据，从面访问所有未受保护（没有进行端到端加密）的数据。
总之，成功攻破RIL后，既可以访问敏感信息，也可以劫持设备来获取现金，损害设备所有
者的利益。
11.1.1RIL架构
本节概述RIL和Android电话栈。首先了解目前智能手机通用的架构，即所有Android设备
使用的架构。
11.1.2智能手机架构
为了更好地理解电话栈，需要简单了解现代智能手机的架构设计。配置了移动通信接口的平
板电脑也采用同样的架构。目前的智能手机一般由两个子系统组成，它们既相互独立，又共同协
作。第一个子系统是应用处理器。这个子系统包括主处理器（通常是一个多核的ARMCPU）和