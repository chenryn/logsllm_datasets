.rdato:00WF4164MC0sub_1EF
章
.reata:88F4166BCsu_1E548
.rdata:0eF416c
.rdata:000F4170 Bcosub_12700
PC0sub_12904
-rdata:00oFa174
alelleuor16wnicode0.Che1loMor1d>.0
MTAXREF:SN_113B0-34T
手
.rdata:000F4174
".rdata:00oFa10c
.text:lpTeo
机
-rdata:eeeF4100
bFF
CoFF
PCD
里
-rdata:00BFA18F PC8 BFF
.rdata:00F410E
C
bFF
引用它的函数
的
.rdata:00F4190
br14
缓
.rdata:00eF4191 Bc8
br12
C
1
冲
.rdata:000F4193 Bc8
.rdata:0eoF4194
ok_F4194
：PATAXREF:.teKt:000111AUTo
区
.rdata:000F4195
.rdata:0ucF41ps
溢
rdata:0041p7
C
br19
出
.rdata:0ocF4190
reata:uc419
C
1
re5ta:csh41sc
641
.rdata:00F419F BC8
BoCF
0002287D004174dt
图7.4.14字符串的详细信息
DA
.text:00011380
.text:00011380
.text:00011300
DATA XREF:
.text:00011300 var_10--0x10
.text:00011380
.text:00011380
arg_e
-text:00011380900
R12,SP
-text:00011384 STNFD
SP1,(R0)
test函数调用
.text:00011300
.text:0001138c_SU8
GMIS
SP.S.
SP1.(R12,LR)
.text:000113c0H00
S8 *e
R3.
[5P,8ext0+var_10]
.text:000113co
.text:008113cc
HOU
R3.
R2.
B3
-text:0081130o000
81,
.text:00011304H00
81
82
.text:000113b0(0
11209
.text:u0011sbc
R2,00
：1pCaption
:uType
.text:000113EaLDR
HOU
.text:000112ELDR
R0,[SP,0x10+arg_0]
R1.
-aNelleWor1d
:1nt
PA T:
.text:000113EcBL
.text:000113F0 ROD
sub_3E210
.text:000113FaLDNFD
SP.(SP,PC)
SP.SP.
.text:00011aFa:End ef function sub_11380
.text:000113F4
MessageBox函数调用
.text:000113F8;LPCWSTR 1pText
.text:000113F4：
.text:008113F8 1pTextDCs aMe1leMor1d
：DATAXREF:sub_1138-34r
.text :000113F8
Paon otla. :
.text:000113FC
.text:000113FC
.text:000113FC
00011380: sb_11380
图7.4.15调用MessageBox的函数体内容
看来是找对地方了。通过对代码的分析，我们可以确定0x000113EC处的BL指令就是调
用MessageBox的指令，所以我们在这行按F2键设置断点，然后让程序开始运行，并单击界面
上的“test”按钮，程序会在我们设置断点的位置中断，如图7.4.16所示。
235
---
## Page 261
0
day
CxSg
.text:00811280 arg_e-
.text:00011380
安
.text:000113B0 N0U
.text:00011384
STNFD
R12,SP
全
.text:00011380
STHFD
SPT.(R0)
SP1,(R12,LR)
：
.text:0001138c
SU9
R3.
SP,SP,8
.text:000113C4STR
MOU
R3,
[SP,0x10uar_10]
软
件
.text:000113cc
.text:008113c0
HOU
HOU
R2,3
R3.
84
.text:00011300N0
R1.
漏
.text:00011304
.text:00011300
HOU
Ro.
BL
Sub_11364
01
洞
.text:0001130C N0U
R3,00
：uType
分
.text:000113E0 NOU
R1,-aHelloWor10
R2,00
:1pCaption
.text:088113EaLDR
:"Hello torld"
析
.text:000113E8 LDR
R,[SP,0ex1e+arg_0]
:int
技
.text:113FLDNFD
.text:000113F0 ADD
SP.(SP,PC)
SP.SP.88
术
-text:000113Fh;End oF function sub_113B0
.text:000113F4
第
0000078C
2
图7.4.16程序在断点上中断
版
我们按F7键跟入这个函数，现在我们实际上已经进入MessageBox函数体内了，观察周围
的汇编代码我们可以发现程序实际上是调用了MessageBoxW函数来完整对话框的显示的，如
图7.4.17所示。这个过程我们就不过多讨论了，有兴趣的朋友可以继续跟踪一下。
xIDAViPCxStiwin
.text:003E218 uType-xC
.text:0803E210
texE:UO3E21oH00
text:0003E214 STNFD
SPT.(Re-R3)
R12SP
.text:0003E21C
.text:0083E210
STNFD
SUB
SP1,《R12,LR)
R3,[SP,x1C+1pCaption]
SP,SP,x14
.text:0003E224
CHP
loc_aE23c
R3,00
.text:003E22C
Re.[SP,00x1C+uar_14]
Sub_20698
.text:003E234 LDR
.text:0003E230
STR
STR
R3,[SP,#x1C+1pCaption]
R9,[SP,0x1C+uar_1a]
.text:003E230
.text:0083E23C1oc_3E23C
.text:00naE23C
：C0DE XREF:Sub_3E21018Tj
-text:00B3E23C LDR
R0,[SP,x1C+arg_0]
.text:00e3E240 BL
.text:00n3E2a4 STR
R0,[SP,x1C+hnd]
sub_2457C
.text:0003E248 LDR
R3,[SP,x1CuType]
.text:0003E24CLDR
:uType
-text:0003E250 LDR
81,[SP,1C1pText]
R2,
[SP,0bx1C+lpCaption]
:1pText
:1pCaption
.text:0883E254LDR
R0,[SP,1C+hm]
:hnd
..text:0083E25c STR
.text:00n3E250
BL
Re.[SP,h1c+uar_C]
NessageBexy
.text:0089E260 LDR
.text:009E264
STR
R3.[sP,x1C+uar_1C]
R3,
[SP,0bx1C+uar_C]
.text:0003E260 LDR
R3，[SP,x1C+uar_1c]
..text:0883E270LDR
.text:0003E26C STR
R3.[SP,0Bx1C+uar_18]
R0.[sP,x1C+uar_18]
000261C00021C210+C
图7.4.17
MessageBox函数体内汇编代码
我们按F8键单步执行程序，当执行完MessageBoxW后对话框就会在模拟器上显示出来。
我们关掉弹出的对话框后程序就会转到继续执行，当我们执行完0x003E27C处的BL语句后就
会返回HelloWorld程序中继续执行，如图7.4.18所示。
236
---
## Page 262
第
7
章
1FP9
手
调用MessageBoxW完
HelloWorld中调用
机
(1
成MessageBox显示
bog113:FCe
MessageBox的函数
里的缓冲区溢
110
11201
112
LO
田
根据R14寄
存器值返回
图7.4.18程序即将完成MessageBox调用并返回
7.5手机上的exploitme
WindowsMobile的内存管理和ARM体系结构我们都有了初步的了解，接下来我们来看看
本章的主角：手机上的exploitme。
其实手机上的溢出与PC上的溢出在本质上是相同，都是向缓冲区内复制超长的数据来覆
盖程序重要数据结构，来达到控制程序的目的。在这我们将通过以下代码来演示手机上的
exploitme.
//vul.cpp:Defines the entry point for the console application.
//
#include"stdafx.h"
#include
#include
int display(void)
FILE*fp:
charbuf[16];
if(!(fp=fopen("\\exploit.txt","r")))
return0;
fread（buf,1,100,fp);
printf("file:&s*,buf);
return1;
int
tmain(int argc,
TCHAR*argv[])
237
---
## Page 263
0
day
int flag=0;
flag=display();
安
全
return 0;
软
对代码和实验思路解释如下。
件
（1）我们在display函数里面申请16个字节的空间buf。
漏
洞
（2）从exploit.txt中读出100个字节并放入buf中，由于buf的空间会有16个字节，所以
分
当读入的数据过长时就会造成缓冲区溢出，覆盖display函数的返回地址。
析
（3）通过覆盖函数的返回地址，我们可以在函数返回时将程序劫持到我们的shellcode中
技
执行。
术
实验环境如表7-5-1所示。
（第