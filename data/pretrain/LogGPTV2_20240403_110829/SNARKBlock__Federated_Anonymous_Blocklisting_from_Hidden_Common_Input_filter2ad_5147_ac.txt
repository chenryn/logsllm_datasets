identities. In all cases, k will be a ﬁeld element selected
uniformly at random by the user. Other similar schemes
refer to k as a user’s “nym,” “pseudonym,” or “credential.”
Identity providers. Blocking users fundamentally de-
pends on identities being Sybil-resistant. Most approaches
to blocklisting, including BLAC’s approach to ZKBLs,
assume a single issuer.
Here we formalize a more general version of ZKBLs
that supports federated identity:each service provider is
allowed to maintain its own list I of accepted identity
providers, which we call the AIP set. Identity providers
are responsible for ensuring Sybil resistance. The service
provider is allowed to update this set over time, and
should distribute it via the same channels it uses to
distribute its blocklist.
Blocklists and session tuples. A ZKBL blocklist
consists of pairs containing a session nonce nonce and
session tag tag, where tag is bound to the user’s identity
by tag := Prfk(nonce) for some ﬁxed pseudorandom
function Prf. Blocklist entries can support context binding
via structured auxiliary data. By computing nonce as
nonce := H(aux,r) for some hash H, aux is bound to the
attestation. This data can be used to, for example, bind
attestation to an action (e.g., to prove that the blocked
user is the action’s author) or to a particular blocklist or
policy (e.g., to enforce which lists a banned tuple can be
transferred to).
Finally, in a departure from BLAC, we allow blocklists
to be split into chunks—equally sized non-overlapping
segments—whose sizes are decided by the service
provider. Blocklists are chunked so that users can pre-
compute non-membership proofs over individual chunks
rather than the entire blocklist at once.
Formalizing non-membership proofs.
A non-
membership proof πzkbl is a zero-knowledge proof of
three distinct properties:
1) Issuance. That the user’s identity k is signed by an
identity provider.
2) Tag well-formedness. That tag and nonce are
honestly computed, i.e., tag = Prfk(nonce).
3) Blocklist non-membership. That the user’s identity
k did not generate any tuples already on a blocklist,
i.e., ∀(tag(cid:48), nonce(cid:48)) ∈ L : tag(cid:48) (cid:54)= Prfk(nonce(cid:48)).
B. ZKBL functionality
A zero-knowledge blocklist consists of ﬁve algorithms.
CRS-Setup Generates system-wide parameters.
IdP-Keygen Generates a signing keypair (sk, pk) to be
used by an identity provider for issuance.
Register Executes a protocol between a user and an
identity provider. On success, the user obtains a
signature of (a function of) their identity.
Sync Fetches the latest additions to a service provider’s
blocklist and then precomputes cryptographic ma-
terial for them. Users periodically run this routine
ofﬂine, i.e., when not attesting.
Attest Executes a non-interactive protocol in which a
user authenticates to a service provider. First, the
user constructs a session-speciﬁc tuple (tag, nonce)
as tag := Prfk(nonce), where nonce is pseudoran-
dom and optionally bound a context aux. This tuple
can be used by the service provider to block the user
at any point in the future by simply including it in the
blocklist. The user then produces a zero-knowledge
proof πzkbl that proves well-formedness of the tuple
and that their (signed) identity did not generate any
tuples already on a blocklist. The session tuple and
zero-knowledge proof are then sent to the service
provider as (πzkbl, tag, nonce).
Verify Checks the validity of a user’s attestation. A ser-
vice provider accepts if and only if πzkbl veriﬁes with
respect to the supplied session tuple (tag, nonce)
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
952
and the service provider’s blocklist L , chunk size
schedule, AIP set I , and optional context-binding
string aux.
Separately, we assume two non-cryptographic opera-
tions for blocklist management:
Blocklist-Add Adds a token to a blocklist.
Blocklist-Remove Removes a token from a blocklist.
We stress that the Add and Remove routines are distinct
from the cryptographic scheme, and can be run by anyone.
How parties decide to manage their blocklists is wholly
orthogonal to the ZKBL construction.
BLAC as a ZKBL. The authors of BLAC construct
their scheme using BBS+ signatures [BBS04] and a
Camenisch-Shoup Σ-protocol [CS03]. Although not de-
scribed as such, this is the same PRF approach we for-
malize here. BLAC’s tag function is nonce (cid:55)→ H(nonce)k,
and it is done in two steps, with the hash evaluation
outside the zero-knowledge proof, and the exponentiation
witnessed inside. Conceptually, the entire question for
designing a practical ZKBL is how to co-design a PRF
and zero-knowledge proof protocol to make an efﬁcient
non-membership proof.
C. Security requirements
can
and
only
Our desired security properties are taken from BLAC.
For the complete deﬁnitions see [TAKS10]. Note the
following aesthetic changes in our description: block-
listability encompasses misauthentication resistance; and
anonymity is described as a distinguishability notion as
opposed to a simulatability notion, which we believe
better captures the actual security properties achieved by
BLAC’s game-based deﬁnition.
Blocklistability A coalition of dishonest
service
providers
successfully
authenticate to an honest service provider if that
user holds a valid credential issued by an identity
provider that is not included in the blocklist.
users
Non-Frameability A coalition of dishonest
identity
providers, service providers, and users cannot pre-
vent an honest, non-blocklisted user from success-
fully authenticating with an honest service provider.
Anonymity A coalition of dishonest identity providers,
service providers, and users cannot distinguish
attestation transcripts associated with any two honest
users. Further, no such coalition can link any given
authentication transcript with the registration in
which an identity provider issued the associated
credential.
V. SNARKBLOCK DESIGN AND OVERVIEW
The full design of SNARKBLOCK is detailed in
Figure 3. The core relations are deﬁned in Figure 2. In
words, Risu is satisﬁed when a user’s committed identity
(k, (pki)(cid:96)
1 ≤ i∗ ≤ (cid:96)
i=1 ; i∗,σ ,r) :
(cid:86) Schnorr.Verpki∗ (Com(k,r),σ )
(k, chunk) : (cid:94)
(L , I , tag, nonce; k,i∗,σ ,r) :
(cid:86)
(cid:86)c
Risu(k, I ; i∗,σ ,r)
Rtag(k, tag, nonce)
Rchunk(k, chunki)
(tag,nonce)∈chunk
Prfk(nonce) (cid:54)= tag
i=1
Rtag := {(k, tag, nonce) : Prfk(nonce) = tag}
Risu :=
Rchunk :=
Rzkbl :=
Fig. 2: Rzkbl is the relation which the attestation procedure in
SNARKBLOCK attests to. I is the AIP set {pk1, . . . , pk(cid:96)}, and
L is the set of chunks {chunk1, . . . , chunkc}. Note that k is
a public (rather than private) input to the three sub-relations
Risu, Rtag, and Rchunk. This is because the implementation of
HICIAP requires that the hidden common input be a public
input in the underlying Groth16 proof.
is signed by an issuer in the AIP set, Rtag is satisﬁed
when tag is computed correctly, and Rchunk is satisﬁed
when a user did not produce any of the tags in a chunk.
We omit textual descriptions of the full set of algo-
rithms and detail the two key ones: Sync and Attest.
Sync. Sync is the ofﬂine phase of attestation. During
Sync a client fetches the most recent versions of the
service provider’s blocklist, chunk schedule, and AIP
set. The client then precomputes Groth16 chunk proofs
πchunki of the relation Rchunk(k, chunki) for every new
chunki received from the service provider. The client
also precomputes πisu, by computing a Groth16 proof πisu
of Risu((k, I ), (i∗,σ ,r)) where i∗ is the chosen identity
provider in the AIP set I = {pk1, . . . , pk(cid:96)}, σ is the
identity provider’s signature of the identity commitment,
and r is the randomness used to commit to k.
Attest. To attest to blocklist non-membership, the client
must combine a series of proofs about the user’s identity k.
First the client computes fresh session tuple (tag, nonce)
and proves it is well-formed with respect to k using a
Groth16 proof πtag for the relation Rtag(k, tag, nonce).
Ideally, the client would combine πtag with the pre-
computed πisu and πchunki proofs from Sync. But a single
HICIAP instance only works for proofs over the same
relation. Thus, πtag and πisu are wrapped in HICIAP
proofs ˆπtag and ˆπisu respectively, the πchunki proofs are
aggregated into a HICIAP proof ˆπchunk, and a linking
proof πlink is used to show each aggregate is made with
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
953
IdPKeyGen()
(sk, pk) := Schnorr.KeyGen()
return (sk, pk)
RegU(k)
r ← F
com := Com(k,r)
return (com,r)
RegS(sk, com)
σ := Schnorr.Signsk(com)
return σ
CrsSetup(n)
crsisu := Groth16.Setup(Risu)
crstag := Groth16.Setup(Rtag)
crschunk := Groth16.Setup(Rchunk)
(ck, srs) := HICIAP.GenCk(n)
return (ck, srs)
Attest(k,πisu,{πchunki}c
nonce ← {0,1}λ
tag := Prfk(nonce)
πtag := Groth16.Prove(crstag, (k, tag, nonce),·)
ˆπisu := HICIAP.Prove((ck, crsisu), I , (k,{πisu}))
ˆπtag := HICIAP.Prove ((ck, crstag), (tag, nonce), (k,{πtag})))
ˆπchunk := HICIAP.Prove
(cid:18) (ck, crschunk), L ,
(cid:19)
i=1)
(k,{πchunki}c
i=1)
πlink := HICIAP.LinkProve(k, (πisu,πchunk,πtag),k)
πzkbl := (πlink, ˆπisu, ˆπtag, ˆπchunk)
return (πzkbl, tag, nonce)
Sync({chunki}c
for c(cid:48) ≤ j ≤ c :
i=c(cid:48), I ,i∗,k,σ ,r)
πchunk j := Groth16.Prove(crschunk, (k, chunk j),·)
πisu := Groth16.Prove(crsisu, (k, I ), (i∗,σ ,r))
return {πchunk1, . . . ,πchunkc}
PrepBlocklist({chunki}c
for 1 ≤ i ≤ c
i=1)
ˆSchunki := Groth16.Prepare(crschunk, chunki)
comL := HICIAP.Com(ck,{ ˆSchunki}c
return comL
i=1)
Vfy(πzkbl, (tag, nonce), I , comL )
ˆStag = Groth16.Prepare(crstag, (tag, nonce))
ˆSisu = Groth16.Prepare(crsisu, I )
return HICIAP.LinkVfy(πlink, ( ˆπisu, ˆπtag, ˆπchunk))
(cid:86) HICIAP.Vfy(srs, ˆπisu,{ ˆSisu})
(cid:86) HICIAP.Vfy(srs, ˆπtag,{ ˆStag})
(cid:86) HICIAP.Vfy(srs, ˆπchunk, comL )
Fig. 3: A pseudocode deﬁnition of the SNARKBLOCK system. We omit buffering and nonce binding.
respect to the same identity k.
The client’s output is thus (πzkbl, tag, nonce), where
πzkbl := ( ˆπisu, ˆπtag, ˆπchunk,πlink).
Buffering recent blocklist additions and deletions.
When a ban is added or removed from the blocklist,
the user must redo the corresponding chunk proof. It is
inevitable between Sync operations that some number
of additions and deletions will occur, thus requiring
recomputation during Attest and adding the corresponding
amount of latency. The larger the chunk size, the higher
the latency. While we can avoid this for deletions by
having bans expire in batches, this is undesirable for
additions—we want bans to take effect as soon as
possible.
To avoid a tradeoff between chunk size and attestation
latency, we have the tail of the list be a buffer of smaller
chunks and have a separate instance of HICIAP aggregate
them. Because the circuit is different from the circuit
used for larger chunks, this optimization increases the
number of distinct HICIAP proofs passed to the veriﬁer,
while decreasing the overall attestation time.
A. Security argument
Security of SNARKBLOCK depends on it correctly
instantiating the PRF+Sig+ZKP paradigm using HICIAP.
We state the theorem of security for SNARKBLOCK here
and give a proof sketch in Appendix B. This proof
depends on the security of HICIAP as a building block,
and so HICIAP is the main focus of our security analysis
over subsequent sections and appendices.
Theorem 1 (SNARKBLOCK Security). SNARKBLOCK
described in Figure 3 is blocklistable, anonymous and
non-frameable provided that Groth16 and HICIAP proofs
are knowledge-sound and subversion zero-knowledge;
Schnorr signatures are unforgeable; Prf is pseudorandom;
and Com is binding and hiding.
Looking ahead, in the concrete instantiation, this in
turn assumes the key-preﬁxed Poseidon hash function
is a PRF and, for Groth16, that the q-SDH [BB04] and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
954
q-DDH [BB04] assumptions hold in the Algebraic Group
Model [FKL18]. For HICIAP we also depend on the Aux-
iliary Structured Double Pairing assumption [BMM+20].
B. Trusted setup
Our protocol and security proof assumes that a trusted
party generates a CRS for each Groth16 circuit as well
as for each HICIAP instance. The CRSs are similar,
being of the form sG,s2G, . . . for several bases. In most
cases, service providers should be able to run the setup:
assuming subversion resistance [Fuc17], a malicious CRS
only undermines soundness, not privacy. If necessary,
protocols [BGM17], [BCG+15] for multiparty setup
have been used for commercial cryptocurrencies such
as Zcash [Rad21] and Filecoin, where failure would
allow the forgery of billions of dollars. These also ensure
subversion resistance.
VI. HICIAP
We now introduce the core of SNARKBLOCK: HIdden
Common-Input Aggregate Proofs (HICIAP), a novel
zkSNARK scheme which we use to generate the zero-
knowledge proof of blocklist non-membership πzkbl.
Recall the purpose of HICIAP is to aggregate multiple
Groth16 proofs of the same relation. Of its aggregated
proofs, it proves that 1) they verify with respect to
veriﬁer-supplied public inputs, and 2) they share a
common public input element (which is hidden by the
aggregate proof). In the case of SNARKBLOCK, the
relation is chunk non-membership, the veriﬁer-supplied