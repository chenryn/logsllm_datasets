((cid:96)) ≤ 1/f ((cid:96)) for all sufﬁciently large (cid:96) ∈ N.
Let A be a probabilistic algorithm. Then y ← A(x) means
that on input x, A assigns its output to variable y. We denote
with AB an algorithm A that arbitrarily interacts with algorithm B
while it is executing. The term prot [A : xA; B : xB; ∗ : xpub] →
[A : yA; B : yB] denotes an interactive protocol prot between two
probabilistic algorithms A and B. Hereby, A (resp. B) gets private
input xA (resp. xB) and public input xpub. While A (resp. B) is op-
erating, it can interact with B (resp. A). As a result of the protocol,
A (resp. B) outputs yA (resp. yB).
Signature scheme. A signature scheme is a tuple of (proba-
bilistic polynomial time) algorithms (genkeysign, sign, versig).
(sk , pk ) ← genkeysign(1(cid:96)sign ) outputs a secret signing key sk and
a public veriﬁcation key pk with security parameter (cid:96)sign ∈ N. On
input of message m and sk, sign outputs a signature σ on m, i.e.,
σ ← sign(sk ; m); versig(pk ; m, σ) ∈ {0, 1} veriﬁes σ given m
and pk.
Message authentication code.
A message authentication
code (MAC) is a tuple of (probabilistic polynomial time) algo-
rithms (genkeymac, mac, vermac). k ← genkeymac(1(cid:96)mac ) out-
puts a secret key k with security parameter (cid:96)mac ∈ N. h ←
mac(k; m) outputs a MAC digest h on input of m and k.
vermac(k; m, h) ∈ {0, 1} veriﬁes h on input of m and k.
4. PROTOCOL DESCRIPTION
SEDA has two phases: (1) an off-line phase whereby devices
are introduced into the swarm, and (2) an on-line phase performing
actual attestation. The off-line phase is executed only once and
consists of device initialization and device registration. The on-line
phase is executed repeatedly for every attestation request from a
veriﬁer VRF. In this phase, each device Di is attested individually
Table 1: Variables and parameters
Entities
OP
VRF
D1
Di
Swarm parameters
Swarm operator
Veriﬁer (can be distinct from OP)
Initiator (any device in S, selected by VRF)
Device i
Total number of devices in S
Number of neighbors of Di
s
gi
pi ≤ gi − 1 Number of children of Di in the spanning tree
Device parameters
Secret signing key of Di
Public signature veriﬁcation key of Di
Platform conﬁguration of Di(e.g., its code hash)
Identity certiﬁcate of Di (issued by OP)
Code certiﬁcate of Di (issued by OP)
Symmetric key shared between Di and Dj
Set of all symmetric keys of Di
Set of active global session identiﬁers stored on Di
sk i
pk i
ci
cert(pk i)
cert(ci)
kij
Ki
Qi
Protocol parameters
q
N
bi
βi
τi
h
σ
Global session identiﬁer
Nonce
Attestation result of Di
Number of devices successfully attested in the
subtree rooted at Di (excluding Di)
Total number of devices attested in the
subtree rooted at Di (excluding Di)
MAC digest
Digital signature
and accumulated attestation is reported to VRF. Figure 1 shows
a sample swarm formed initially of seven devices with an eighth
device D8 being initialized by the swarm operator OP and joining
It also shows VRF running an attestation protocol
the swarm.
instance.
4.1 Ofﬂine Phase
Device initialization. Each Di in a swarm S is initialized bythe
swarm operator OP with a software conﬁguration ci (e.g., a hash
digest of software binaries of Di) and a code certiﬁcate cert(ci)
signed by OP which guarantees that ci is a valid software conﬁg-
uration of Di.3 Furthermore, Di is initialized with a signing key
pair (sk i, pk i) along with an identity certiﬁcate cert(pk i) signed
by OP, guaranteeing that pk i belongs to Di. Each device is initial-
ized with the public key of OP in order to later verify cert(c) and
cert(pk ) of other devices. Note that, both cert(c) and cert(pk ) are
3Device certiﬁcates are issued and managed by OP using its
own public-key infrastructure (PKI). Industry consortia (e.g., the
Car Connectivity Consortium) are already deﬁning PKIs for cross-
certiﬁcation of devices.
Figure 1: Swarm attestation in 8-device swarm.
∗ : cert(pk i), cert(pk j), cert(ci), cert(cj)(cid:3)
→ [Di : kij; Dj : kij] .
public information. Finally, Di initializes its list of active session
identiﬁers Qi to an empty list. More formally:
init(ci, 1(cid:96)) → (sk i, pk i, cert(pk i), cert(ci),Qi) .
Device registration. Whenever Di initially joins S or changes its
position it executes join with each new neighbor Dj. In Figure 1
D8 joins S and runs the protocol with its neighbors D5 and D7.
Through join Di learns cj of each of its neighbors by receiving Dj’s
cert(cj). If certiﬁcate veriﬁcation succeeds, Di stores cj for later
validation of Dj’s attestation reports.
If veriﬁcation of cert(cj)
fails, Di does not accept Dj as a neighbor.4
An attestation key kij, shared between Di and each neighbor
Dj is established during join. The set of attestation keys Di estab-
lished with its neighbors is denoted Ki. Key establishment can be
done using an authenticated key agreement protocol based on de-
vices’ sk i, sk j, cert(pk i) and cert(pk j). Alternatively, it can be
achieved using a key pre-distribution techniques, e.g., [7]. In fact,
any key establishment protocol can be used with SEDA as long as it
provides integrity of key agreement and secrecy of generated keys.
Formally:
join(cid:2)Di : sk i; Dj : sk j;
4.2 Online Phase
The online phase of SEDA includes two protocols: attest and
attdev. attest is initiated by VRF by contacting an arbitrary
D1 ∈ S, called the initiator. Starting from D1 attestation of S
is performed recursively using attdev. Eventually, D1 receives the
accumulated attestation result of all devices and reports it to VRF.
Single device attestation. Each attestation protocol instance has a
global session identiﬁer q. It is used to construct a spanning tree
over the entire swarm. Whenever Dj receives a new q from Di it
accepts Di as its parent and stores q in the list Qj of active session
identiﬁers. The spanning-tree5 is constructed from the communica-
tion graph, where two nodes are connected in the spanning-tree if
they are neighbors in the communication graph. Setting the max-
imum number of children per node inﬂuences the construction of
the spanning tree: it limits the fan-out of the tree and forces it to
grow in height, e.g., transforms mesh topologies into balanced span-
ning trees. This allows us to optimize SEDA’s performance, as dis-
cussed in Section 6. Dj attests all its children in this spanning tree.
It then accumulates the attestation results reported by its children,
which correspond to the subtrees rooted at each of them, and sends
the accumulated result along with an attestation report for itself to
its parent Di.
4If Di’s software is updated after it joins S, Di must securely com-
municate its new code certiﬁcate to all its neighbors.
5The spanning-tree is reusable if both the topology and the initiator-
node persist between attestation-runs
To attest each child Dk, Dj uses kjk and ck from the join pro-
tocol. The result of attdev for Di (parent of Dj) is a bit b = 1
if attestation of Dj was successful (b = 0 otherwise), the number
β of devices in the subtree rooted at Dj (excluding Dj) that have
been successfully attested, and the total number τ of devices in the
subtree rooted at Dj (also excluding Dj).
If Dj already participated in an attdev protocol instance with
global session identiﬁer q or does not respond (i.e., a time-out oc-
curs), the result of attdev for Di is b = 0, β = 0, and τ = −1 to
prevent double-counting. Formally:
attdev(cid:2)Di : kij; Dj : Qj,Kj, c(cid:48)j;∗ : q, cj
(cid:3)
→ [Di : b, β, τ ; Dj : −] .
Figure 1 shows a sample swarm with eight devices: D1 . . . D8.
The spanning tree is denoted by thick lines between devices and the
root is D1, which is selected by VRF to be the initiator.
Details of attdev are as follows: Di sends a nonce Ni and q to
Dj. If q is already in the list Qj of active session identiﬁers, Dj
responds with βj ← ⊥ and τj ← ⊥. Otherwise, Dj adds q to Qj
and runs the attdev protocol with each neighbor Dk. Eventually,
Dj receives attestation reports from all of its neighbors, accumu-
lates them into (βj, τj), authenticates (βj, τj) via MAC digest h0,
and attests itself to Di with h1. Di accepts if h0 and h1 are success-
fully veriﬁed.
Swarm attestation. VRF starts attestation of S by sending an
attestation request attest (containing a random challenge) to D1.
VRF can randomly chose any device in S as D1 or depending on
its location or preference. Recall that VRF might be remote, or
within direct communication range of one or more swarm devices.
Eventually, VRF receives an attestation report from D1. VRF
outputs a bit b = 1 indicating that attestation of S was successful,
or b = 0 otherwise. Formally:
attest(cid:2)VRF : −; D : Q,K, sk , c(cid:48);∗ : s, cert(pk ), cert(c)(cid:3)
→ [VRF : b; D : −] .
As shown in Figure 3, attest operates as follows: VRF starts
the protocol by sending a nonce N to D1. It, in turn, generates a
new q and runs attdev with all its neighbors, which recursively run
attdev with their neighbors. Note that N prevents replay attacks on
communication between VRF and D1 while the purpose of q is to
identify the protocol instance and to build the spanning tree. Even-
tually, D1 receives the accumulated attestation reports of all other
devices in S. Then, D1 accumulates these reports into (β, τ ), com-
putes σ over (β, τ ) and its own c, and sends its cert(pk ), cert(c),
(β, τ ), c, and σ to VRF. Using OP’s public key, cert(pk ) and
cert(c), VRF authenticates pk and c and veriﬁes σ. Attestation
succeeds if σ veriﬁes. If D1 does not respond to VRF (i.e., a time-
out occurs), swarm attestation fails. After responding to VRF, D1
starts the clear protocol to delete q from all devices.
Clear. Di sends q authenticated with kij to Dj. On receipt of q,
Dj removes q from its list Qj of active session identiﬁers and runs
Figure 2: Protocol attdev
clear protocol with each neighbor. More formally:
clear [Di : q, kij; Dj : Qj,Kj;∗ : −] → [VRF : −; D : −] .
5. PROTOTYPE AND IMPLEMENTATION
In this section, we discuss two implementations of SEDA based
on SMART [16] and TrustLite [25] architectures. We chose these
architectures due to their minimal hardware assumptions, although
they provide different security properties and functional capabili-
ties, as discussed below.
SMART-based implementation. SMART [16] provides remote at-
testation for low-end embedded systems. Its main components are:
(1) a read-only memory (ROM), which stores program code used
for attestation and the attestation key k,6 and (2) a simple memory
protection unit (MPU), which controls access to ROM where k is
stored as shown in Figure 4. The idea is that program code in ROM
cannot be altered by any software running on the device, which en-
sures integrity of attestation code. MPU grants access to k only to
ROM code by checking whether the program counter is within the
ROM address space whenever k is accessed. This ensures that only
genuine attestation code can access k.
Our implementation of SEDA is based on a slightly modiﬁed ver-
sion of SMART, shown in Figure 4. The only difference from the
6Using one-time programmable ROM allows initializing each de-
vice with a distinct device-speciﬁc key during manufacturing.
Figure 4: Implementation based on SMART [16]
original SMART architecture is that MPU also controls access to
a small area of rewritable non-volatile memory, needed for storing
global session identiﬁers and attestation keys established as part of
the join protocol. In more detail, code for join, attest, attdev, and
clear as well as signing key sk are stored in ROM, which ensures
their integrity. The list of attestation keys K and the list of active
session identiﬁers Q (which need to be changed during the lifetime
of the device) are stored in rewritable non-volatile memory labeled
RAM in Figure 4. MPU controls access to ROM and RAM ac-
q,kij,cjDeviceDiβj,τj,h0,h1DeviceDjQj,Kj,c0jh0←mac(cid:0)kij;Nikqkβjkτj(cid:1)ifvermac(kij;Nikqkβjkτj,h0)=1thenelseb←0endifq,NiNi∈R{0,1}‘Nforeachkl∈Kj\{kij}doattdev(cid:2)Dj:kl;Dl:Ql,Kl,c0l;∗:q,cl(cid:3)→(cid:2)Dj:bl,βl,τl;Dl:−(cid:3)endforβj←βj+bl+βlβj←0,τj←0h1←mac(cid:0)kij;Nikqkc0j(cid:1)endififvermac(kij;Nikqkcj,h1)=1thenb←1elseb←0,β←0,τ←0τj←τj+1+τlifq∈QjthenelseendifQj←Qj∪{q}βj←⊥,τj←⊥ifβ6=⊥∧τ6=⊥thenβ←βj,τ←τjelseb←0,β←0,τ←−1endifFigure 3: Protocol attest
cording to the table in Figure 4. For example, MPU ensures that
only join can read and write K (rule 2 in Figure 4). Note that com-
bined attestation code (attest, attdev, join and clear) constitute a
minimal software trusted computing base (TCB).
TrustLite-based implementation. TrustLite [25] is a security ar-
chitecture for embedded systems, based on Intel’s Siskiyou Peak
research platform [44]. It enables execution of arbitrary code, (e.g.,
attest and attdev) isolated from the rest of the system. Such iso-
lated code chunks are called trustlets. As in SMART, an MPU en-
sures that data can be accessed only by code of trustlets that owns
that data. Data access permissions depend on the currently exe-
cuting code – therefore TrustLite’s MPU is called execution-aware
memory protection unit (EA-MPU). EA-MPU can be used to con-
trol access to hardware components, such as peripherals. Authentic-
ity and conﬁdentiality of both code and data of trustlets are ensured
via secure boot.
TrustLite can be seen as a generalization of SMART. The main
difference is that memory access control rules of EA-MPU in
TrustLite can be programmed as required by trustlets. In contrast,
memory access control rules of SMART MPU are static. Also,
TrustLite supports interrupt handling for trustlets, while security-