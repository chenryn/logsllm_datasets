title:Guaranteeing Proper-Temporal-Embedding safety rules in wireless CPS:
A hybrid formal modeling approach
author:Feng Tan and
Yufei Wang and
Qixin Wang and
Lei Bu and
Rong Zheng and
Neeraj Suri
Guaranteeing Proper-Temporal-Embedding Safety Rules in Wireless CPS: A Hybrid Formal
Modeling Approach
Feng Tan∗, Yufei Wang∗, Qixin Wang∗, Lei Bu†, Rong Zheng‡, Neeraj Suri∗∗
Abstract—Cyber-Physical Systems (CPS) integrate discrete-
time computing and continuous-time physical-world entities,
which are often wirelessly interlinked. The use of wireless safety
critical CPS (control, healthcare etc.) requires safety guarantees
despite communication faults. This paper focuses on one impor-
tant set of such safety rules: Proper-Temporal-Embedding (PTE).
Our solution introduces hybrid automata to formally describe
and analyze CPS design patterns. We propose a novel lease based
design pattern, along with closed-form conﬁguration constraints,
to guarantee PTE safety rules under arbitrary wireless commu-
nication faults. We propose a formal methodology to transform
the design pattern hybrid automata into speciﬁc wireless CPS
designs. This methodology can effectively isolate physical world
parameters from affecting the PTE safety of the resultant speciﬁc
designs. We conduct a case study on laser tracheotomy wireless
CPS to show that the resulting system is safe and can withstand
communication disruptions.
I.
INTRODUCTION
To introduce the CPS context [1]–[6], we consider a
classical system approach and annotate it with CPS speciﬁcs.
Consider a distributed CPS system where each entity has
an abstract “safe” state and an abstract “risky” state. During
idle time, all entities dwell in their safe states. However, to
accomplish a collective task, a distributed procedure must be
carried out: relevant entities must enter respective risky states
in a ﬁxed order and with certain minimal temporal spacing;
and then (after the intended task is done) exit to the respective
safe states in exactly the reverse order, and with the requisite
temporal spacing. This is called Proper-Temporal-Embedding
(PTE). Furthermore, each entity’s continuous dwelling time
(i.e. the duration that it continuously stays in the state) in its
“risky” state must be upper bounded by a constant. The safety
rules encompassing the discrete ordering and continuous-time
temporal conditions are termed as PTE safety rules.
As an example of PTE safety (see Fig. 1), in laser tra-
cheotomy [3] (a classical case study in CPS), the oxygen
ventilator has the “safe” ventilating state, and the “risky” pause
state; the laser-scalpel has the “safe” shutoff state, and the
“risky” emission state. In order to emit the laser, the oxygen
ventilator must ﬁrst enter the pause state, and only then can
the laser-scalpel enter the emission state. Otherwise, the laser
emission can trigger ﬁre on the oxygen ventilated trachea of
the patient. Conversely, the laser-scalpel must ﬁrst exit the
emission state, and then the ventilator can exit the pause state.
∗ Dept. of Computing, The Hong Kong Polytechnic Univ., Hong Kong
S.A.R.
† State Key Lab for Novel Software Technology, Dept. of Computer Sci.
and Tech., Nanjing Univ., China.
‡ Dept. of Computing and Software, McMaster Univ., Canada.
∗∗ Dept. of Computer Science, TU Darmstadt, Germany.
Email: PI:EMAIL
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
Thirdly, certain minimal temporal spacing must be maintained
during enter/exit of “risky” states, as shown by t1 and t2 in
Fig. 1 (e.g., t1 means that only after the oxygen ventilator has
paused for t1 can laser start emission, otherwise the patient’s
trachea may still have high enough oxygen concentration to
catch ﬁre; note this “pause t1 before laser emission” approach
is chosen in real practice because hard real-time and error-
free trachea oxygen level sensing is impractical). Fourthly, the
continuous dwelling time, as shown by t3 and t4 in Fig. 1,
must each be upper bounded by a constant (e.g., the ventilator
pause duration t3 must be upper bounded, for otherwise the
patient may suffocate to death). Modeling these sequenced
CPS operations constitute design patterns.
Fig. 1. Proper-Temporal-Embedding Example
Note that the above CPS procedure (i.e. the PTE safety
rules) is not a conventional distributed transaction. In a classi-
cal distributed transaction, each participating entity can check-
point its current state, i.e., log based recovery for aborts. If
the distributed transaction fails, each entity can roll-back to its
check point. This is often infeasible for physical world entities
in CPS, e.g., we cannot revive (roll-back) a killed patient; even
reviving (roll-back) an injured patient to his/her check-pointed
state when he/she enters hospital is hard.
As the CPS environment entails wireless-connected sens-
ing, control and computing entities, guaranteeing PTE safety
rules necessitates consideration of unreliable wireless commu-
nication. Thus, we utilize and adapt the established notion of
“leasing” [7]–[12], to ensure auto-reset of distributed entities
under communication faults. The basic idea is that each entity’s
dwelling duration in risky state is “lease” based. A lease is a
timer, which takes effect when the entity enters the risky state.
When the lease expires, the entity exits the risky state, no
matter if it receives exit command from another entity or not.
This paper develops a novel approach to utilize “leasing”
to ensure PTE safety rules in wireless CPS. Our contributions
being:
1. We propose utilizing hybrid modeling [13]–[15] to
describe and analyze CPS design patterns. Hybrid
modeling is a formal technique to describe/analyze
both the discrete and continuous dynamics of a sys-
tem, hence it is suitable for CPS. Recently, hybrid
modeling has gained popularity for CPS, though to
our best knowledge, it is mostly used for veriﬁcation
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply. 
and we are the ﬁrst to apply it to CPS design pattern
research.
2. We propose a rigorous lease based design pattern
for wireless CPS; and identify a set of closed-form
constraints on software (i.e. cyber) conﬁguration pa-
rameters. We prove that as long as these constraints
are satisﬁed, the design pattern guarantees PTE safety
rules under arbitrary packet losses over wireless.
3. We propose a formal methodology to transform the
design pattern hybrid automata into speciﬁc wireless
CPS designs. This methodology can effectively isolate
physical world parameters (which are much harder
to control, if not impossible, compared to the soft-
ware/cyber parameters) from affecting the PTE safety
of the resultant speciﬁc wireless CPS designs1.
4.
A case study on laser tracheotomy wireless CPS
is presented to validate our proposed approach and
analysis.
The rest of the paper is organized as follows. Section II
introduces the CPS hybrid modeling background; Section III
describes the requirements to guarantee PTE safety rules;
Section IV formally deﬁnes the lease based design pattern, and
proves its guarantee over PTE safety rules. The methodology
to elaborate the design patterns into speciﬁc designs is also
presented here. Section V conducts a case study to validate our
proposed approach. We present the related work in Section VI.
II. BACKGROUND, TERMINOLOGY AND MODELS
A. The Hybrid Modeling Terminology
Hybrid modeling is based on hybrid automaton [13]–
[16], and has been adapted in modeling CPS since it can
formally describe/analyze both discrete (cyber) and continuous
(physical) dynamics. For example, Fig. 2 illustrates a hybrid
automaton that describes the discrete/continuous behaviors
of a stand-alone ventilator. Hvent(t) is the height of the
ventilator cylinder at time t. The ventilator initially dwells in
the location of “PumpOut”: the cylinder moves downward at
speed 0.1(m/s). When it hits bottom (Hvent = 0), it moves to
location “PumpIn”, where the cylinder moves upward at speed
0.1(m/s). When it hits ceiling (Hvent = 0.3(m)), it moves to
location “PumpOut” again, so on and so forth.
As the goal of this paper is to provide formal descriptions
and analysis, it is necessary to ﬁrst give the formal deﬁnition
of hybrid automaton. We use the hybrid automaton of Fig. 2
to explain the following abstract deﬁnitions.
According to [13]–[15], a hybrid automaton A is a tuple
(~x(t), V , inv, F , E, g, R, L, syn, Φ0) of following compo-
nents:
1. A data state variables vector ~x(t) = (x1(t), x2(t), . . . ,
xn) ∈ Rn of n data state variables of time t, where n is called
1Note a key difference between distributed computer systems and wireless
(hence distributed) CPS lies in the continuous variables, which represent
physical world states and are not fully controllable by the computer commands.
For example, in surgery, the surgeon is a human-in-the-loop entity of the
holistic CPS, where his/her actions are not fully controlled by computer
commands. Similarly, the patient’s precise blood oxygen level is only partially
controllable by computer control as many cyber and physical factors can affect
it, even including the patient’s emotion.
Fig. 2. Hybrid Automaton A′
vent of a Stand-Alone Ventilator. Hvent(t)
is the data state variable denoting the ventilator’s cylinder height at time t.
“PumpOut” is the only initial location.
the dimension of A. A possible evaluation of ~x(t), denoted as
~s ∈ Rn, is called a data state of A (at time t). In the example
of Fig. 2, the data state variables vector is (Hvent(t)), i.e. it
contains only one data state variable: Hvent(t), which is the
height of the ventilator cylinder at time t.
2. A ﬁnite set V of vertices called locations. The state of A
(at time t) is a tuple φ(t) = (ℓ(t), ~x(t)) of two variables of time
t: the aforementioned data state variables vector ~x(t), and the
location counter ℓ(t) ∈ V , which indicates the current location
that A dwells at. In the example of Fig. 2, the ventilator hybrid
automaton has two locations: PumpOut and PumpIn.
3. A function inv that assigns to each v ∈ V a subset of Rn,
aka. the invariant set. As long as the location counter ℓ(t) = v,
~x(t) must satisfy ~x(t) ∈ inv(v). In the example of Fig. 2, in
location PumpOut, the invariant is that the ventilator cylinder
height Hvent(t) stays in the range 0 < Hvent(t) ≤ 0.3(m).
4. A set of ﬂow maps F = {fv|fv : Rn 7→ Rn, ∀v ∈ V },
with each element fv deﬁning a set of differential equations
˙~x = fv(~x) over data state variables vector ~x(t) for each
location v ∈ V . These differential equations specify the
continuous dynamics of ~x(t) when ℓ(t) = v. In the example of
Fig. 2, in location PumpOut, the ﬂow maps only involve one
˙Hvent(t) = −0.1(m/s), i.e. the ventilator
differential equation:
cylinder pushes downward at a velocity of −0.1(m/s).
5. A ﬁnite set of edges E. Each edge e ∈ E identiﬁes a
discrete transition (v, v′) from a source location v ∈ V to a
destination location v′ ∈ V . We denote the source location of
edge e as src(e); while the destination location as des(e). An
edge e = (v, v′) speciﬁes the possible discrete dynamics of
A’s state: it can switch from ℓ(t) = v to ℓ(t+) = v′. In the
example of Fig. 2, there are two edges: from location PumpOut
to PumpIn, and vice versa.
6. A guard function g : E 7→ Rn that assigns each e ∈ E
a guard set g(e) ⊆ inv(src(e)). Discrete transition e can only
take place when ~x(t) ∈ g(e). In the example of Fig. 2, the
guard condition for the edge (transition) from PumpOut to
PumpIn is that the ventilator cylinder reaches the bottom of
its movement range, i.e. Hvent(t) = 0.
7. A ﬁnite set of reset functions R = {re|re : inv(src(e)) 7→
2inv(des(e)), ∀e ∈ E}. When the A’s state switches from
ℓ(t) = src(e) to ℓ(t+) = des(e) via transition e ∈ E, ~x(t+)
is assigned a new data state from set re(~x). In the example
of Fig. 2, the reset functions for both edges are the identity
function, i.e., the state variables vector ((Hvent(t)) does not
change value after each transition (edge). We hence omit the
reset functions in the ﬁgure.
8. A ﬁnite set L of synchronization labels and a synchro-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply. 
nization labeling function syn that assigns to each edge e ∈ E
a synchronization label syn(e) ∈ L. A synchronization label
consists of a root and a preﬁx, which respectively represent a
event and the role of the hybrid automaton for that event.
When entity ξ1 (whose hybrid automaton is A1) sends
an event l to entity ξ2 (whose hybrid automaton is A2), a
transition e1 in A1 takes place; and on receiving the event,
transition e2 is triggered in A2. Correspondingly, we put a
synchronization label !l to e1 and ?l to e2. We respectively
add the preﬁxes ! and ? to the root l, to distinguish the sender
and the receiver of event l. In case l is received unreliably,
which is typical for wireless, we use ?? instead of a single ?
preﬁx. Synchronization labels with different preﬁxes or roots
are regarded as different. For example, !l, ?l, ??l are considered
three different synchronization labels, though they are related
to a same event by the root l.
If an event (correspondingly, a synchronization label root)
is communicated across multiple hybrid automata, then the
corresponding synchronization labels are external; otherwise,
the corresponding synchronization labels are internal. For an
internal synchronization label whose corresponding event does
not have receiver(s), preﬁx ! is omitted.
In the example of Fig. 2, when the transition from location
PumpOut to PumpIn happens, event evtV P umpIn happens;
in the other way around, event evtV P umpOut happens. The
! preﬁx to evtV P umpIn and evtV P umpOut in the ﬁgure
indicates the events are broadcasted. If there are other hybrid
automata in the system, some transitions may be triggered
on receiving these events, the corresponding transitions are
labeled with ?evtV P umpIn or ?evtV P umpOut. In case
the reception of events are via unreliable (e.g. wireless)
communication links,
the corresponding labels should be
??evtV P umpIn or ??evtV P umpOut.
9. A set of possible initial states Φ0 ⊆ {(v, ~s) ∈ V ×
Rn|v ∈ V, ~s ∈ inv(v)}. We also call Φ0’s projection on
location set V as initial locations, denoted as Φ0|V . In the
example of Fig. 2, the possible initial states can be Φ0 =
{(PumpOut, (h0))}, where h0 ∈ [0, 0.3]; i.e. starting from
location PumpOut and cylinder height Hvent(0) ∈ [0, 0.3](m).
B. System and Fault Model
A hybrid system H is a collection of hybrid automata
(each is called a member hybrid automaton of H), which
execute concurrently and coordinate with each other via event
communications (i.e., the sending/receiving of synchronization
labels). For simplicity, in this paper, we assume no shared data
state variables nor shared locations between different hybrid
automata of a hybrid system. That is, data state variable names
or location names are local to their respective hybrid automata.
A distributed sink-based wireless CPS consists of the
following entities: a central base station ξ0 and N (in this
paper, we require N ≥ 2) remote entities ξ1, ξ2, . . ., ξN . A
wireless communication link from the base station to a remote
entity is called a downlink; and a wireless communication link
from a remote entity to the base station is called an uplink. We
assume that there is no direct wireless communication links
between any two remote entities (such practice is desirable
for wireless applications with high dependability requirements
[17], [18]).
We assume that each packet’s checksum is strong enough
to detect any bit error(s); a packet with bit error(s) is discarded
at the receiver. Our fault model assumes that packets sent
via wireless can be arbitrarily lost (not received at all, or
discarded at the receiver due to checksum errors). As per
PTE safety requirements, the uplink communication delays are
speciﬁed and handled by the base station. For the downlink,
the remote entities locally specify delays as acceptable or as
lost-messages.
III. THE BASIS AND SPECIFICATION OF THE PTE SAFETY
RULES
For the wireless CPS system and communications fault
model described in Section II-B, various safety requirements
can be proposed. Addressing all of them is beyond the scope of