                for (bkpnum = 0; bkpnum xl_info))  
                                continue;  
                        memcpy(&bkpb, blk, sizeof(BkpBlock));  
                        blk += sizeof(BkpBlock);  
                        blk += BLCKSZ - bkpb.hole_length;  
                        printf("\tbackup bkp #%u; rel %u/%u/%u; fork: %s; block: %u; hole: offset: %u, length: %u\n",  
                                   bkpnum,  
                                   bkpb.node.spcNode, bkpb.node.dbNode, bkpb.node.relNode,  
                                   forkNames[bkpb.fork],  
                                   bkpb.block, bkpb.hole_offset, bkpb.hole_length);  
                }  
        }  
}  
```  
2\. src/include/access/rmgrlist.h  
```  
00018 /*  
00019  * List of resource manager entries.  Note that order of entries defines the  
00020  * numerical values of each rmgr's ID, which is stored in WAL records.  New  
00021  * entries should be added at the end, to avoid changing IDs of existing  
00022  * entries.  
00023  *  
00024  * Changes to this list possibly need a XLOG_PAGE_MAGIC bump.  
00025  */  
00026   
00027 /* symbol name, textual name, redo, desc, startup, cleanup, restartpoint */  
00028 PG_RMGR(RM_XLOG_ID, "XLOG", xlog_redo, xlog_desc, NULL, NULL, NULL)  
00029 PG_RMGR(RM_XACT_ID, "Transaction", xact_redo, xact_desc, NULL, NULL, NULL)  
00030 PG_RMGR(RM_SMGR_ID, "Storage", smgr_redo, smgr_desc, NULL, NULL, NULL)  
00031 PG_RMGR(RM_CLOG_ID, "CLOG", clog_redo, clog_desc, NULL, NULL, NULL)  
00032 PG_RMGR(RM_DBASE_ID, "Database", dbase_redo, dbase_desc, NULL, NULL, NULL)  
00033 PG_RMGR(RM_TBLSPC_ID, "Tablespace", tblspc_redo, tblspc_desc, NULL, NULL, NULL)  
00034 PG_RMGR(RM_MULTIXACT_ID, "MultiXact", multixact_redo, multixact_desc, NULL, NULL, NULL)  
00035 PG_RMGR(RM_RELMAP_ID, "RelMap", relmap_redo, relmap_desc, NULL, NULL, NULL)  
00036 PG_RMGR(RM_STANDBY_ID, "Standby", standby_redo, standby_desc, NULL, NULL, NULL)  
00037 PG_RMGR(RM_HEAP2_ID, "Heap2", heap2_redo, heap2_desc, NULL, NULL, NULL)  
00038 PG_RMGR(RM_HEAP_ID, "Heap", heap_redo, heap_desc, NULL, NULL, NULL)  
00039 PG_RMGR(RM_BTREE_ID, "Btree", btree_redo, btree_desc, btree_xlog_startup, btree_xlog_cleanup, btree_safe_restartpoint)  
00040 PG_RMGR(RM_HASH_ID, "Hash", hash_redo, hash_desc, NULL, NULL, NULL)  
00041 PG_RMGR(RM_GIN_ID, "Gin", gin_redo, gin_desc, gin_xlog_startup, gin_xlog_cleanup, gin_safe_restartpoint)  
00042 PG_RMGR(RM_GIST_ID, "Gist", gist_redo, gist_desc, gist_xlog_startup, gist_xlog_cleanup, NULL)  
00043 PG_RMGR(RM_SEQ_ID, "Sequence", seq_redo, seq_desc, NULL, NULL, NULL)  
00044 PG_RMGR(RM_SPGIST_ID, "SPGist", spg_redo, spg_desc, spg_xlog_startup, spg_xlog_cleanup, NULL)  
```  
3\. src/include/access/xlog.h  
```  
00041 typedef struct XLogRecord  
00042 {  
00043     uint32      xl_tot_len;     /* total len of entire record */  
00044     TransactionId xl_xid;       /* xact id */  
00045     uint32      xl_len;         /* total len of rmgr data */  
00046     uint8       xl_info;        /* flag bits, see below */  
00047     RmgrId      xl_rmid;        /* resource manager for this record */  
00048     /* 2 bytes of padding here, initialize to zero */  
00049     XLogRecPtr  xl_prev;        /* ptr to previous record in log */  
00050     pg_crc32    xl_crc;         /* CRC for this record */  
00051   
00052     /* If MAXALIGN==8, there are 4 wasted bytes here */  
00053   
00054     /* ACTUAL LOG DATA FOLLOWS AT END OF STRUCT */  
00055   
00056 } XLogRecord;  
```  
4\. src/include/c.h  
```  
00354 typedef uint32 TransactionId;  
```  
5\. src/include/access/nbtree.h  
```  
00228 /*  
00229  * All that we need to find changed index tuple  
00230  */  
00231 typedef struct xl_btreetid  
00232 {  
00233     RelFileNode node;  
00234     ItemPointerData tid;        /* changed tuple id */  
00235 } xl_btreetid;  
```  
6\. src/include/storage/relfilenode.h  
```  
00041 /*  
00042  * RelFileNode must provide all that we need to know to physically access  
00043  * a relation, with the exception of the backend ID, which can be provided  
00044  * separately. Note, however, that a "physical" relation is comprised of  
00045  * multiple files on the filesystem, as each fork is stored as a separate  
00046  * file, and each fork can be divided into multiple segments. See md.c.  
00047  *  
00048  * spcNode identifies the tablespace of the relation.  It corresponds to  
00049  * pg_tablespace.oid.  
00050  *  
00051  * dbNode identifies the database of the relation.  It is zero for  
00052  * "shared" relations (those common to all databases of a cluster).  
00053  * Nonzero dbNode values correspond to pg_database.oid.  
00054  *  
00055  * relNode identifies the specific relation.  relNode corresponds to  
00056  * pg_class.relfilenode (NOT pg_class.oid, because we need to be able  
00057  * to assign new physical files to relations in some situations).  
00058  * Notice that relNode is only unique within a particular database.  
00059  *  
00060  * Note: spcNode must be GLOBALTABLESPACE_OID if and only if dbNode is  
00061  * zero.  We support shared relations only in the "global" tablespace.  
00062  *  
00063  * Note: in pg_class we allow reltablespace == 0 to denote that the  
00064  * relation is stored in its database's "default" tablespace (as  
00065  * identified by pg_database.dattablespace).  However this shorthand  
00066  * is NOT allowed in RelFileNode structs --- the real tablespace ID  
00067  * must be supplied when setting spcNode.  
00068  *  
00069  * Note: in pg_class, relfilenode can be zero to denote that the relation  
00070  * is a "mapped" relation, whose current true filenode number is available  
00071  * from relmapper.c.  Again, this case is NOT allowed in RelFileNodes.  
00072  *  
00073  * Note: various places use RelFileNode in hashtable keys.  Therefore,  
00074  * there *must not* be any unused padding bytes in this struct.  That  
00075  * should be safe as long as all the fields are of type Oid.  
00076  */  
00077 typedef struct RelFileNode  
00078 {  
00079     Oid         spcNode;        /* tablespace */  
00080     Oid         dbNode;         /* database */  
00081     Oid         relNode;        /* relation */  
00082 } RelFileNode;  
```  
7\. src/include/access/nbtree.h  
```  
00204 /*  
00205  * XLOG records for btree operations  
00206  *  
00207  * XLOG allows to store some information in high 4 bits of log  
00208  * record xl_info field  
00209  */  
00210 #define XLOG_BTREE_INSERT_LEAF  0x00    /* add index tuple without split */  
00211 #define XLOG_BTREE_INSERT_UPPER 0x10    /* same, on a non-leaf page */  
00212 #define XLOG_BTREE_INSERT_META  0x20    /* same, plus update metapage */  
00213 #define XLOG_BTREE_SPLIT_L      0x30    /* add index tuple with split */  
00214 #define XLOG_BTREE_SPLIT_R      0x40    /* as above, new item on right */  
00215 #define XLOG_BTREE_SPLIT_L_ROOT 0x50    /* add tuple with split of root */  
00216 #define XLOG_BTREE_SPLIT_R_ROOT 0x60    /* as above, new item on right */  
00217 #define XLOG_BTREE_DELETE       0x70    /* delete leaf index tuples for a page */  
00218 #define XLOG_BTREE_DELETE_PAGE  0x80    /* delete an entire page */  
00219 #define XLOG_BTREE_DELETE_PAGE_META 0x90        /* same, and update metapage */  
00220 #define XLOG_BTREE_NEWROOT      0xA0    /* new root page */  
00221 #define XLOG_BTREE_DELETE_PAGE_HALF 0xB0        /* page deletion that makes  
00222                                                  * parent half-dead */  
00223 #define XLOG_BTREE_VACUUM       0xC0    /* delete entries on a page during  
00224                                          * vacuum */  
00225 #define XLOG_BTREE_REUSE_PAGE   0xD0    /* old page is about to be reused from  
00226                                          * FSM */  
```  
8\. http://blog.163.com/digoal@126/blog/static/1638770402012914112949546/  
9\. http://www.postgresql.org/docs/devel/static/pgxlogdump.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")