seconds.  Thus  FormatGuard imposed  a  marginal  over-
head of 37% on a trivial printf call.
We then repeated the above experiment, but replaced the
printf call with one that formats a through z, rather
than  just  three  letters.  The  FormatGuard  run  time  was
134.7  seconds,  without  FormatGuard  99  seconds,  and
0.032  second  loop  overhead  has  become  negligible.
Thus  FormatGuard  imposed  a  marginal  slowdown  of
36% on a more complex printf call, and we conclude
that FormatGuard imposes a fairly consistent 37% mar-
ginal overhead on most printf calls.
6.2 Macrobenchmarks
Most  programs  do  not  spend  much  time  running  the
printf function; printf is an I/O function, and even
programs that are I/O intensive tend to format their own
data rather than using printf. The printf function
is mostly used to format error-handling code. So we had
some difficulty finding programs that would show mea-
surable degradation under FormatGuard. We found such
a  program  in  man2html  [25],  which  uses  printf
extensively to output HTML-formatted man pages.
Our  test  was  to  batch  translate  79  man  pages  through
man2html, which is 596 KB of input. The test was run
multiple times in single-user mode on a system with 256
MB of RAM, so I/O overhead was minimal. The result
is  that  the  batch  takes  0.685  seconds  without  Format-
Guard,  and  0.698  seconds  with  FormatGuard.  Thus  in
an  arguably  near  worst-case  application  scenario,  For-
matGuard  imposes  1.3%  run-time  overhead.  In  most
cases, overhead is considerably lower, often negligible.
7  Related Work
Work related to FormatGuard is divided into analysis of
format string vulnerabilities, which we described in Sec-
tion 2, and work to protect programs against such vul-
nerabilities, which we describe here.
Fundamentally, format bugs exist because of the tension
between strong type checking, and convenient polymor-
phism.  C  and  Pascal  made  opposite  choices  in  this
regard: Pascal chose the safe route of strict type check-
ing,  which  means  that  Pascal  functions  can  never  be
spoofed with this kind of attack, but also means that it is
difficult to write a convenient generic I/O function like
printf  in  Pascal  [11].  Conversely,  C  chose  a  com-
pletely type-unsafe varargs mechanism that makes it
impossible to statically type check a polymorphic func-
tion call.
More recent programming languages such as ML have
solved this tension with  type  inference, but these tech-
niques  are  difficult  to  apply  to  C  programs  [15,  27].
Wagner  et  al  [21]  present  a  compromise  solution  in
which a “taint” type qualifier is added to the C language,
allowing  programmers  to  designate  data  as  “tainted”
(provided by the adversary) and the compiler tracks the
data  usage  through  the  program  as  tainted.  If  tainted
data  is  presented  to  printf-like  functions  as  the  format
string, the compiler flags an error. The main advantage
to this approach is that it detects potential vulnerabilities
at  compile  time,  rather  than  when  the  attacker  tries  to
exploit  them.  The  main  limitation  of  this  approach  is
that it is not transparent: functions that collect user-input
must be manually annotated as “tainted”.
Since  it  is  problematic  to  properly  type  check  C  pro-
grams,  more  pragmatic  means  have  emerged  to  deal
specifically with format bugs. Alan DeKok wrote PScan
[9] to scan C source code looking for potential format
bugs  by  looking  for  the  simple/common  case  of  a
printf-like  function  in  which  the  last  parameter  is
also the format string, and the format string is not static.
GCC  itself  has  an  un-documented  feature  where  “-
Wformat=2” will cause GCC to complain about non-
static format strings. This is over-general, in that it com-
plains  about  legitimate  code,  such  as  internationaliza-
tion  support,  which  uses  functions  to  generate  format
strings.  However,  Joseph  Myers  has  implemented  an
enhancement  to  -Wformat that unconditionally  com-
plains about the “printf(foo)” case. The function-
ality is essentially similar to PScan, with the advantage
that  it  is  built  into  the  compiler,  and  the  disadvantage
that  it  is  only  available  in  a  pre-release  version  of  the
GCC compiler.
Both  PScan  and  the  -Wformat  enhancement  offer  the
advantage  that  they  provide  static  warnings,  so  the
developer knows at compile time that there is a problem,
providing an opportunity to fix the problem before the
code  ships.  However,  because  these  static  analysis
methods  are  heuristics,  they  are  subject  to  both  false
negatives  (missing  vulnerabilities)  and  false  positives
(mis-identifying  non-vulnerabilities)  and 
they
present  an  additional  burden  on  developers.  The  addi-
tional burden, in turn, is problematic because developers
are never actually required to use those tools, and thus
may choose to omit them if they prove troublesome.
thus 
In contrast, runtime techniques present a low burden on
developers (see Section 5) and uniformly improves the
security assurance of applications. libformat [18] is
a  library  that  aborts  programs  if  they  call  printf-like
functions with a format string that is writable and con-
tains  a  %n  directive.  This  technique  is  often  effective,
but because both writable format strings and %n direc-
tives are legal, it can be subject to false positives.
libsafe cite{libsafe} is a library  approach  to  defending
against  buffer  overflow  attacks.  In  version  2.0,  libsafe
has  added  protection  against  format  bugs  by  applying
their technique of the library inspecting the call stack for
plausible arguments, in this instance rejecting %n direc-
tives that try to write to the function’s return address on
the stack. The strength of this approach is that, like lib-
format,  it  affords  protection  to  binary  programs,  and
protects  against  format  bugs 
to
vsprintf (see Section 4.1). The limitations of libsafe
are  that  it  cannot  protect  code  compiled  with  the
in  direct  calls 
“no_frame_pointer” optimization, and that it only
protects against format string attacks aimed at the acti-
vation record.
FormatGuard  tries  to  achieve  some  of  the  benefits  of
both static and run-time techniques. By using a source-
code  re-compilation  technique,  FormatGuard  achieves
high precision, resulting in few false negatives, and no
false positive, presenting a very low burden on develop-
ers. Even if the original developer chose not to do any-
thing  about  format  vulnerabilities,  an  end-user  of  an
open  source  product  can  re-compile  the  product  with
FormatGuard and gain protection from format bugs the
developer failed to discover.
8  Conclusions
Format  bugs  are  a  dangerous  and  pervasive  security
problem that appeared suddenly in June 2000, and con-
tinues  to  be  a  major  cause  of  software  vulnerabilities.
FormatGuard protects vulnerable programs against this
problem. We have shown that FormatGuard is effective
in stopping format bug attacks, imposes minimal com-
patibility,  problems,  and  has  a  practical  performance
penalty  of  less  than  2%.  FormatGuard  is  incorporated
into  WireX’s  Immunix  linux  distribution  and  server
products, and is available as a GPL’d patch to glibc at
http://immunix.org
References
[1]  American  National  Standards 
Inc.
Programming  Language  –  C,  ANSI  Standard
X3.159.  American  National  Standards  Institute,
Inc., 1989.
Institute, 
[2]  “bind”.  xlock  (exec)  Input  Validation  Error.
http://
Bugtraq 
www.securityfocus.com/vdb/
bottom.html?vid=1585, August 15 2000.
mailing 
list, 
[3]  Kalou/Pascal  Bouchareine. 
Vulnerability. 
papers/format.html, July 18 2000.
String
http://plan9.hert.org/
Format 
[4]  Pascal Bouchareine. User Supplied Format String
http://julianor.tripod.com/
Bug. 
usfs.html, July 2000.
[5]  Crispin  Cowan.  Format  Bugs  in  Windows  Code.
http://
Vuln-dev 
www.securityfocus.com/archive/82/
81455, September 10 2000.
mailing 
list, 
[6]  Crispin  Cowan,  Steve  Beattie,  Ryan Finnin  Day,
Calton  Pu,  Perry  Wagle,  and  Erik  Walthinsen.
Protecting Systems from Stack Smashing Attacks
with StackGuard. In Linux Expo, Raleigh, NC, May
1999.
[19]  “ron1n”. statdx2 - linux rpc.statd revisited. Bugtraq
http://
mailing 
marc.theaimsgroup.com/
?l=bugtraq&m=97123424719960&w=2,
October 11 2000.
list, 
[20]  Pekka  Savola.  Very  probable 
root
vulnerability  in  cfengine.  Bugtraq  mailing  list,
http://marc.theaimsgroup.com/
?l=bugtraq&m=97050677208267&w=2,
October 2 2000.
remote 
[21]  Umesh  Shankar,  Kunal  Talwar,  Jeff  Foster,  and
David  Wagner.  Automated  Detection  of  Format-
String  Vulnerabilities. 
In  USENIX  Security
Symposium, Washington, DC, August 2001.
[22]  “tf8”.  Wu-Ftpd  Remote  Format  String  Stack
Overwrite 
http://
www.securityfocus.com/bid/1387, June
22 2000.
Vulnerability. 
[23]  Tymm  Twillman.  Exploit  for  proftpd  1.2.0pre6.
http://
Bugtraq 
www.securityfocus.com/templates/
archive.pike?list=1&mid=28143,
September 1999.
mailing 
list, 
[24]  “venomous”. LPRng remote root exploit. Bugtraq
http://
mailing 
marc.theaimsgroup.com/
?l=bugtraq&m=97683900820267&w=2,
December 14 2000.
list, 
[25]  Richard  Verhoeven.  man2html.  http://
wsinwp01.win.tue.nl:1234/, February 10
2000.
[26]  “Zinx  Verituse”.  BitchX  -  more  on  format  bugs?
http://
Bugtraq 
www.securityfocus.com/archive/1/
68256, July 3 2000.
mailing 
list, 
[27]  David  Wagner,  Jeffrey S. Foster,  Eric A. Brewer,
and  Alexander  Aiken.  A  First  Step  Towards
Automated  Detection 
of  Buffer  Overrun
Vulnerabilities. In NDSS (Network and Distributed
System Security), San Diego, CA, February 2000.
[7]  Crispin  Cowan,  Heather  Hinton,  Calton  Pu,  and
Jonathan Walpole. The Cracker Patch Choice: An
Analysis  of  Post  Hoc  Security  Techniques.  In
Proceedings  of  the  19th  National  Information
(NISSC  2000),
Systems  Security  Conference 
Baltimore, MD, October 2000.
[8]  Crispin  Cowan,  Calton  Pu,  Dave  Maier,  Heather
Hinton,  Peat  Bakke,  Steve  Beattie,  Aaron  Grier,
Perry  Wagle,  and  Qian  Zhang.  StackGuard:
Automatic  Adaptive  Detection  and  Prevention  of
Buffer-Overflow Attacks. In 7th USENIX Security
Conference,  pages  63–77,  San  Antonio,  TX,
January 1998.
[9]  Alan DeKok. PScan: A limited problem scanner for
C  source  files.  Bugtraq  mailing  list,  http://
www.securityfocus.com/archive/1/
68688 
www.striker.ottawa.on.ca/ aland/
pscan/, July 7 2000.
http://
web 
and 
the 
[10]  Mike  Frantzen.  Poor  Man’s  Solution  to  Format
list,  http://
Bugs.  Vuln-dev  mailing 
www.securityfocus.com/archive/1/
72118, July 25 2000.
[11]  Brian  Kernighan.  Why  Pascal  is  not  my  Favorite
Programming Language. Report 100, AT&T Bell
Labs,  Murry  Hill,  NJ,  July  1981.  submitted  for
publication.
[12]  Brian W. Kernighan and Dennis M. Ritchie. The C
Hall,
Programming 
Englewood Cliffs, NJ, second edition, 1988.
Language. 
Prentice 
[13]  Jamie Lokier. Varargs macros subtly broken. GCC
mailing 
list,  http://gcc.gnu.org/ml/
gcc/2000-09/msg00604.html,  September
25 2000.
[14]  Tim  Newsham.  Format  String  Attacks.  Bugtraq
http://
mailing 
www.securityfocus.com/archive/1/
81565, September 9 2000.
list, 
[15]  Robert O’Callahan and Daniel Jackson. Lackwit: A
Program  Understanding  Tool  Based  on  Type
Inference. 
International
Conference  on  Software  Engineering  (ICSE’97),
Boston, MA, May 1997.
In  Proceedings  of 
[16]  P.J.  Plauger.  Standard  C  Library.  Prentice  Hall,
Englewood Cliffs, NJ, 1991.
[17]  “Weld  Pond”.  @stake  Advisory:  PHP3/PHP4
Logging  Format  String  Vulnerability  (A  101200-
1). 
http://
www.securityfocus.com/archive/1/
139259, October 12 2000.
Bugtraq 
mailing 
list, 
[18]  Tim J. 
Robbins. 
libformat. 
the.wiretapped.net/security/host-
security/libformat/, November 2001.
http://