title:FAME: Fast Attribute-based Message Encryption
author:Shashank Agrawal and
Melissa Chase
FAME: Fast Attribute-based Message Encryption
Shashank Agrawal∗
Visa Research
PI:EMAIL
ABSTRACT
Time and again, attribute-based encryption has been shown to
be the natural cryptographic tool for building various types of
conditional access systems with far-reaching applications, but the
deployment of such systems has been very slow. A central issue
is the lack of an encryption scheme that can operate on sensitive
data very efficiently and, at the same time, provides features that
are important in practice.
This paper proposes the first fully secure ciphertext-policy and
key-policy ABE schemes based on a standard assumption on Type-
III pairing groups, which do not put any restriction on policy type
or attributes. We implement our schemes along with several other
prominent ones using the Charm library, and demonstrate that they
perform better on almost all parameters of interest.
1 INTRODUCTION
Over the course of a decade, attribute-based encryption (ABE) [52]
has been shown to have applications in a variety of settings like
network privacy [12], pay-per-view broadcasting [55], health record
access-control [9, 18], cloud security [53], verifiable computation
[49], and forward-secure messaging [32]. Moreover, companies like
Zeutro [1] use ABE to provide data security solutions for cloud
applications. This should not come as a surprise: as opposed to the
all-or-nothing approach of public-key encryption, ABE provides a
much more fine-grained control of encrypted data.
In a ciphertext-policy ABE (CP-ABE) scheme [28], for instance,
ciphertexts are attached to access policies and keys are associated
with sets of attributes. A key is able to recover the message hidden
in a ciphertext if and only if the set of attributes satisfy the access
policy. To give an example, a policy P could say ‘(Zipcode:90210
OR City:BeverlyHills) AND (AgeGroup:18-25)’ and an individual A
could have a key for {Zipcode:90210, AgeGroup:Over65}, in which
case A would not be able to decrypt any message encrypted under
P. A key policy (KP-ABE) scheme, on the other hand, is the dual
of CP-ABE with ciphertexts attached to attribute sets and keys
associated with access policies.
Despite being such a versatile cryptographic tool, ABE’s impact
on the real world has been limited. A central issue is the lack of
schemes that not only have strong security guarantees and fast
operations, but provide features that are highly desirable in practice.
In this paper, we propose new ABE schemes that simultaneously:
(1) put no restriction on size of policies or attribute sets;
(2) allow any arbitrary string to be used as an attribute;
(3) are based on the faster Type-III pairing groups;
(4) need a small number of pairings for decryption; and,
∗Part of this work was done when the author was an intern at Microsoft Research,
Redmond.
Melissa Chase
Microsoft Research
PI:EMAIL
(5) satisfy the natural security requirement under a standard
hardness assumption. 1
Each of these properties are crucial to make an ABE scheme usable
in the real world. As far as we know, our schemes are the first to
achieve all of them.
Furthermore, our schemes’ performance compares quite favor-
ably with the most prominent and state-of-the-art schemes in liter-
ature. Consider for example the CP-ABE scheme of Bethencourt,
Sahai, and Waters [16] (BSW), which is arguably the most popu-
lar ABE scheme among application designers, mainly due to its
simple structure and remarkable efficiency. However, security of
this scheme is not known to follow from a standard cryptographic
assumption. Our new CP-ABE scheme not only gives full security
under a standard assumption, but also encrypts, decrypts, and gen-
erates keys faster than BSW. In particular, decryption time is a mere
0.06s even if as many as 100 attributes are involved, whereas BSW
takes more than 2s. Our ciphertexts and keys are 25% smaller too.
Thus we believe that our more secure scheme can replace BSW as
the de facto instantiation of the ABE component in most applica-
tions (policy-sealed data [53] is one example), while substantially
improving the application’s performance at the same time.
We now argue why the properties our schemes satisfy are im-
portant to build a fast and usable ABE scheme.
Policies & attributes. As institutions grow, more and more com-
plex roles, entities, policies, procedures, etc. are added on a regular
basis. However, most ABE schemes known in literature put one or
the other restriction on what can be encoded into ciphertexts and
keys. These restrictions are in the form of bounds that need to be
fixed before an ABE system is deployed. For example, there could
be a bound on the number of attributes that could be encoded into
a key/ciphertext [4, 40, 43] or the size of access policies [19, 27, 57].
Such bounds not only limit the expressiveness of an ABE scheme,
but also adversely affect the time and space complexity of various
operations. A generous bound can slow down an ABE system con-
siderably, while a tight bound can only serve well for a limited
amount of time (after which a new system with a larger bound
would have to be deployed, requiring all data to be re-encrypted
and new keys to be generated). Our ABE schemes, on the other
hand, do not put any restriction on the size of policies or attribute
sets that can be encoded.
Attribute usage. Recall the policy P we defined earlier, given
by ‘(Zipcode:90210 OR City:BeverlyHills) AND (AgeGroup:18-25)’.
Suppose an ABE system encrypts some secret data under this policy.
If the user base is spread across the United States, then the system
1To prove security, we model the hash function in our constructions as a random
oracle (RO). Note that all ABE schemes in literature that support an unlimited number
of attributes from an unbounded set (like we do) are proven secure in the RO model.
Moreover, the use of RO is fairly common in many cryptographic protocols used in
practice like Full Domain Hash signatures [14] and OAEP encryption [15].
should be able to issue keys for every zip code and city. Many promi-
nent ABE schemes in literature are small universe: they require an
a-priori polynomial bound on the number of different attributes
that could ever be used [19, 36, 42, 57, 58]. The size of public-key
then scales linearly with this bound (the set-up time is affected
similarly). We have roughly 43000 different zip codes in the US and
about 20000 different cities; if there are group elements for each
one of them then the public key will become very large.
But the problem does not stop here. What if we like to put user
names, addresses, etc. as part of the policies? The number of differ-
ent attributes will not just be in hundreds of millions, they will grow
rapidly with time. Though there are large universe ABE construc-
tions too [5, 10, 44, 50], they are not ideal because of the necessity
to map attributes to group elements manually. Our schemes, in
contrast, allow any string to be used as an attribute, be it names of
people, home addresses, etc. The mapping is via a hash function
which is modeled as a random oracle in the security proof.
Pairings. As of today, pairing friendly elliptic curves are the
only mathematical structures available for building practical ABE
schemes. They are given by a triple of groups (G, H, GT ) with an
efficiently computable map e that associates pairs of elements from
groups G and H with elements in GT . Among them, asymmet-
ric prime-order (Type-III) pairings have been the recommended
choice by experts [25]. The other two options are not suitable:
composite-order curves have large representation2 and very slow
pairing operations [33]; and symmetric prime-order (Type-I) groups
have serious security issues [24, 37]. Note that in constrast to ABE
schemes that are proven secure under Type-I setting and then im-
plemented in Type-III [51], we use only Type-III throughout the
paper.
Decryption. The decryption procedure in an ABE scheme is ar-
guably the most important one. It is this function that the users of
an ABE system invoke most of the times, often on computation-
ally weak devices. In much of the initial work in ABE [28, 42, 57],
decryption was fairly expensive, particularly for complex access
structures, because a pairing computation was needed for each
attribute. Our schemes require only 6 pairing operations for decryp-
tion, regardless of the number of attributes involved! This leads to
significant savings in decryption time. Furthermore, our encryption
and key generation procedures operate primarily in the smaller and
faster source group of a bilinear map. Concretely, any ciphertext
or key has 3 elements from this group per attribute, and only a
constant number (just 3) from the other. This unique feature of our
schemes makes it even more practical.
Security. Our schemes satisfy the natural security requirement
for ABE, which is commonly known as full or adaptive security.
A fully secure scheme provides confidentiality for data encrypted
under policies chosen anytime during a system’s life-cycle, even
after the system parameters have been published and several keys
have been distributed. On the contrary, selectively secure schemes
can only guarantee security for policies that are declared upfront,
i.e. before the system is deployed [27, 28, 48].
2Since the elliptic curve group order must be infeasible to factor, it must be at least
(say) 1024 bits. On the other hand, a 160-bit prime-order elliptic curve group provides
an equivalent level of security (NIST SP 800-57).
2
Further, our ABE schemes are proven secure under (a variant
of) the decisional linear assumption (DLIN) [17], which is a well-
understood and time-tested hardness assumption on bilinear pair-
ings. This gives a high level of confidence in security as opposed
to q-type assumptions [5, 11, 50, 57] which are fairly new and not
very well understood. Moreover, many different types of q-type
assumptions have been proposed in the context of ABE, and it is
not clear how they compare with each other or with the standard
assumptions.
See Table 1.1 for a property-wise comparison of our schemes
against the most prominent and state-of-the-art schemes in litera-
ture.
Predicate encryption. The starting point for the design of our
ABE schemes is the recent work of Chen, Gay, and Wee [19]. They
give encryption schemes not just for ABE but a variety of other
predicates like inner-product [38], building on the predicate en-
coding [58] and dual system group [21] abstractions. However,
their ABE schemes are small universe (need an a-priori bound on
the number of attributes) and put restrictions on the policies that
can be used. We show how to overcome these problems without
compromising performance with the help of new techniques in the
following section. In fact, our schemes perform better than Chen et
al. on almost all metrics of interest. We believe that our ideas can
also be used to improve the efficiency of non-ABE type problems
studied in their work.
Implementation. We implement our CP-ABE and KP-ABE schemes
in the Charm framework [7] along with the most prominent and
state-of-the-art schemes in literature. We rigorously compare their
performance on various parameters and test cases. Our analysis
highlights the trade-offs between newer schemes like our own and
Chen et al. [19] (for which no implementation was available), and
older ones like Bethencourt et al. [16] and Goyal et al. [28]. In
particular, our CP-ABE achieves faster encryption and key gen-
eration times than any previous fully secure scheme—even faster
than Bethencourt et al. which is secure only in the generic group
model but has been used in a number of implementations. It also
has significantly faster decryption times than all of the selectively
secure schemes. See Figures 5.1 and 5.2 in §5 for the performance
of the algorithms of each scheme under various test cases.
Concretely, our CP-ABE scheme always takes only 0.10s to be
set-up, 0.24s to generate a key for 10 attributes, and 0.16s to encrypt
data under a policy that requires all 10 attributes for decryption,
on an ordinary laptop. More importantly, the time required for
decryption is a mere 0.06s even if as many as 100 attributes are
involved because we always use only 6 pairing operations. In con-
trast, number of pairings required by Bethencourt et al. and (the
fastest version of) Waters [57] scales linearly with the number of
attributes. Their decryption time is more than 1s and 2s for 100
attributes, respectively.
See Table 1.2 for a qualitative comparison of various ABE schemes
in terms of the running time of different algorithms.
We also analyze why one scheme performs better than the other
by breaking down the algorithms of the schemes into the number
of different types of group operations they need and looking at
the amount of time each one of them takes. This provides a very
Type-III pairings
Unrestricted policies Arbitrary attributes
Scheme
Our CP-ABE (Fame)
Chen et al. [20, Appendix B.2]
Waters [57, Section 3]
Bethencourt et al. [16, Section 4.2]
Our KP-ABE
Chen et al. [20, Appendix B.1]
Goyal et al. [29, Appendix A.1]
Table 1.1: A property-wise comparison of the various ABE schemes we consider. The upper and lower parts of the table list
the CP-ABE and KP-ABE schemes respectively. Please see the relevant parts of the introduction for a discussion of why each
of the properties are important.
Standard assumption
✓
✓
✓
✓
✓
✗
✓
✓
✗
✗
✓
✓
✗
✗
✓
✓
✗
✗
✓
✓
✗
✓
✓
✗
✓
✓
✓
✗
✓
✓
✗
✗
✓
✓
✓
Full security
Set-up Key generation
Encryption Decryption
Scheme
Our CP-ABE (Fame)
Chen et al. [20, Appendix B.2] (SXDH)
Chen et al. [20, Appendix B.2] (DLIN)
Waters [57, Section 3]
Bethencourt et al. [16, Section 4.2]
Our KP-ABE
Chen et al. [20, Appendix B.1] (SXDH)
Chen et al. [20, Appendix B.1] (DLIN)
Goyal et al. [29, Appendix A.1]
(cid:32)(cid:32)(cid:32)
(cid:32)
(cid:32)
(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:32)
(cid:32)
(cid:32)(cid:32)
(cid:32)(cid:32)
(cid:32)(cid:71)
(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)
(cid:32)(cid:32)
(cid:32)(cid:32)
(cid:32)
(cid:32)(cid:32)