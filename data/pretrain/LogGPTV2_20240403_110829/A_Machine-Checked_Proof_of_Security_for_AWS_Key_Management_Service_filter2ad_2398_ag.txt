### API and Theorem Overview

In the given statement, \( B \), \( B1 \), and \( C \) are constructed adversaries. This theorem allows us to focus on the main result proven in EasyCrypt, specifically that the KMS Domain Management API satisfies indistinguishability-based security.

### 5.2 Low-Level Abstractions

We now describe the lower layer of the EasyCrypt development, which defines and instantiates three reusable abstractions used as black-box modules in the proof of indistinguishability-based security:

1. **Generic Signature Service**: This abstraction is used multiple times in the proof and can be reused in future EasyCrypt developments.
2. **AWS KMS-Specific Abstraction**: This abstraction is designed to manage the complexity of the proof by encapsulating the guarantees provided by the combined actions of HSMs and human operators in domain management.
3. **Multi-Recipient Public-Key Encryption Scheme**: This abstraction is used once in the main proof of security but is intended for reuse in future EasyCrypt developments.

#### Ideal Signature Service Abstraction

A central component in our modeling of the protocol and its proof of security (in both versions) is the signature service abstraction. We introduce a module called `RealSignatureServ` with an external interface that allows creating stateless signers, each with an independent signing key.

This service provides a signature verification procedure that operates purely based on the public key and uses the signature verification algorithm for the underlying signature scheme. Any protocol using digital signatures with multiple signers and arbitrary verifiers that have access to the public keys can be described as a client to the real signature service. We then show that the standard property of unforgeability implies that this service is indistinguishable from an ideal one, where signature verification is carried out by checking a list of signed messages.

The proof of security of the protocol relies on two instances of this abstraction: one for operator signatures and another for HSM signatures. When using this abstraction, one first rewrites the protocol description as a function of `RealSignatureServ`, which is always possible. Then, we use the fact that no adversary can distinguish this service from its ideal counterpart to modify the protocol into another one that uses a table-based idealized representation for signatures. From that point, we can write invariants that refer to these idealized tables, which contain domain tokens/trusts (resp. identity attestations) if and only if they have been signed by genuine HSMs (resp. operators).

#### Domain Management Abstraction

We define a general notion of a domain management policy, specifying security in terms of distinguishing a real policy enforcement mechanism from an ideal policy enforcement mechanism.

Figure 10 details the module that captures the notion of a domain management policy based on the actions of hosts, operators, and HSMs introduced in Section 3. This module maintains two data structures to track the trusts manipulated by the system: `protectedTrusts` and `parentTrust`. Protected trusts are those that contain only genuine parties; this can happen because the trust is directly checked by operators in the `isGoodInitialTrust` operation or because an HSM has checked that it is a valid descendant of a protected trust in `checkTrustUpdate`. The descendant relation is maintained using the `parentTrust` map.

The idealized version of the abstraction, which we omit for brevity, offers the same functionality as the real one but ensures the following invariants:
1. All protected trusts contain only genuine HSM members and descend from a protected trust.
2. The descendant relation computed by HSMs behaves like an injective function—any trust has at most one valid parent throughout the lifetime of the system. This relation can be checked by hosts if it has been computed by HSMs.

Intuitively, this proof follows the invariant described in Section 3. Note that this abstraction does not require genuine hosts or HSMs to determine whether a trust was previously checked by a genuine HSM; it only speaks about trusts tagged as protected. More precisely, the ideal policy states that, if a trust was previously tagged as protected, the honesty property is propagated, and a genuine host will have the same view of the descendant relation; otherwise, no guarantee is given.

In the main proof, discussed in the next subsection, we strengthen the security guarantee provided by this abstraction, relying on the authentication guarantees inherent to the signed trust data structure. Specifically, any trust for which the honesty property has been established must have been signed by a genuine HSM.

The following EasyCrypt theorem provides a concrete bound for any adversary distinguishing the real policy management module from its idealized version for the KMS Domain Management policy enforced by operators and HSMs. The bound is given by the collision resistance property of the hash function used to compute trust fingerprints and the unforgeability advantage against the signature scheme used by operators to certify identity keys, scaled up by the maximum number of operators in the system \( q_{\text{ops}} \).

```plaintext
lemma domain management:
|Pr[TrustSecInd(A, IdealTrustService(OAR)).main(): res]
− Pr[TrustSecInd(A, RealTrustService(OAR)).main(): res]| ≤
Pr[CR(AdvCR(A)).main(): res] + q_{\text{ops}} ∗ Pr[UF1(AdvUF1(A)).main(): res].
where OAR = OA(RealSigServ)
```

#### Multi-Recipient PKE Abstraction

The security proof of the main theorem relies on a tag-based multi-recipient public-key encryption abstraction. As a contribution of independent interest, we show that the variant of DHIES [2] used by the DMP to create domain tokens satisfies this notion of security. The IND-CCA security of this construction follows from the results in [2], together with the general results on multi-recipient encryption in [8]. We also extend the result to the tag-based setting of Shoup [21], where encryption takes a tag \( t \) and the decryption oracle permits decrypting any pair \((t, c) \neq (t^*, c_{\text{ph}})\) returned from the left-or-right oracle. This extension is crucial to show that a malicious HSM cannot modify an honest token to change the trust in a way that decrypts successfully.

### 5.3 Main Theorem

The proof of indistinguishability security is carried out using the game-hopping technique. The first hop shows that the KMS Domain Management protocol can be re-expressed using the signature service and policy management abstractions introduced in the previous subsection. This hop is conservative and introduces no additional terms in the security bound. The second and third hops consist of replacing the signature abstraction and the policy management abstraction with their ideal counterparts. These hops show that any adversary distinguishing the two games in the hop can be used to break the real-ideal indistinguishability guarantee for the low-level abstractions, which we showed in the previous subsection can be, in turn, reduced to the security of standard cryptographic primitives.

At this point, we perform a conservative hop that entails the most innovative part of the entire security proof. Here, we combine two types of reasoning:
1. The inductive argument that establishes the propagation of trust honesty.
2. The global invariants guaranteeing the absence of collisions between trust fingerprints and of signature forgeries.

Together, these justify a game hop that slices the entire code of the indistinguishability game, isolating protected (honest) trusts from the remaining ones and enforcing that the Test oracle can only be called by the adversary on protected trusts.

Furthermore, the game no longer relies on public-key decryption to recover domain keys when...