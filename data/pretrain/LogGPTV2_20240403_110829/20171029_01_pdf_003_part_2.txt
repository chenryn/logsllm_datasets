□ Obtaining partition information
The pg_get_partkeydef function can be used to obtain the partition method and column information.
Restrictions on each partition can be obtained with the pg_get_partition_constraintdef function.
Example 5 Obtain partition information
postgres=> SELECT pg_get_partkeydef('plist1'::regclass) ;
pg_get_partkeydef
-------------------
LIST (c1)
(1 row)
postgres=> SELECT pg_get_partition_constraintdef('plist1_v100'::regclass) ;
pg_get_partition_constraintdef
-----------------------------------------------------------
((c1 IS NOT NULL) AND (c1 = ANY (ARRAY['100'::numeric])))
(1 row)
3.2.3 Range Partition Table
The RANGE partition table is a way to group multiple partitions that can store a range of specific
values. To create a range partition table, first create a parent table accessed by the application. Specify
the PARTITION BY RANGE clause in the CREATE TABLE statement. In the RANGE clause, specify
the column name (or calculated value) to be partitioned. Multiple column names can be specified by
separating them with a comma (,). A NOT NULL constraint is automatically set for the partitioned
columns (except for calculated values). At this point the INSERT statement for the table fails.
Example 6 Create RANGE Partition Table
postgres=> CREATE TABLE prange1(c1 NUMERIC, c2 VARCHAR(10)) PARTITION BY
RANGE (c1) ;
CREATE TABLE
Next, create a child table (partition) where data is actually stored. Use the PARTITION OF clause to
specify the parent table and use the FOR VALUES FROM TO clause to specify the range of values to
include in the partition. Only the value of "FROM  CREATE TABLE prange1_a1 PARTITION OF prange1 FOR VALUES FROM
(100) TO (200) ;
CREATE TABLE
postgres=> CREATE TABLE prange1_a2 PARTITION OF prange1 FOR VALUES FROM
(200) TO (300) ;
CREATE TABLE
In the following example, refer to the definition of the partition table which has been created.
Example 8 Reference table definition
postgres=> \d+ prange1
Table "public.prange1"
Column | Type | Collation | Nullable | Default | …
--------+-----------------------+-----------+----------+---------+ …
c1 | numeric | | not null | | …
c2 | character varying(10) | | | | …
Partition key: RANGE (c1)
Partitions: prange1_a1 FOR VALUES FROM ('100') TO ('200'),
prange1_a2 FOR VALUES FROM ('200') TO ('300')
postgres=> \d+ prange1_a1
Table "public.prange1_a1"
Column | Type | Collation | Nullable | Default | …
--------+-----------------------+-----------+----------+---------+ …
c1 | numeric | | not null | | …
c2 | character varying(10) | | | | …
Partition of: prange1 FOR VALUES FROM ('100') TO ('200')
Partition constraint: ((c1 >= '100'::numeric) AND (c1  INSERT INTO prange1 VALUES (100, 'data1') ;
INSERT 0 1
postgres=> INSERT INTO prange1 VALUES (200, 'data2') ;
INSERT 0 1
postgres=> INSERT INTO prange1 VALUES (300, 'data3') ;
ERROR: no partition of relation "prange1" found for row
DETAIL: Partition key of the failing row contains (c1) = (300).
Partitioned child tables are also directly accessible. However, values other than the values specified
in the partition target column cannot be stored.
Example 10 Access to child table
postgres=> SELECT * FROM prange1_a1 ;
c1 | c2
-----+-------
100 | data1
(1 row)
postgres=> INSERT INTO prange1_a1 VALUES (200, 'data2') ;
ERROR: new row for relation "prange1_a1" violates partition constraint
DETAIL: Failing row contains (200, data2).
□ UNBOUNDED specification of range
UNBOUNDED can be specified in the FROM clause or TO clause of the RANGE partition in
addition to concrete values. This designation can create partitions that do not limit the lower limit
(FROM) or upper limit (TO) range. In the example below, two tables are specified with a value less
than 100 and a value of 100 or more as the partition of the prange1 table.
Example 11 UNBOUNDED designation
postgres=> CREATE TABLE prange1_1 PARTITION OF prange1 FOR VALUES FROM
(UNBOUNDED) TO (100) ;
CREATE TABLE
postgres=> CREATE TABLE prange1_2 PARTITION OF prange1 FOR VALUES FROM
(100) TO (UNBOUNDED) ;
CREATE TABLE
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 17
A partition that specifies "a value to divide a partition containing an existing UNBOUNDED value"
can not be added.
Example 12 Split UNBOUNDED partition
postgres=> CREATE TABLE prange1_3 PARTITION OF prange1 FOR VALUES FROM
(200) TO (300) ;
ERROR: partition "prange1_3" would overlap partition "prange1_2"
3.2.4 Existing tables and partitions
Validation of how to register an existing table in the partition table and remove it from the partition
table.
□ ATTACH of child table
An existing table can be attached as a partition (child table) in a parent table. The child table must be
created in the same column configuration as the parent table. Also, it is possible to detach a table
registered as a partition into a normal table.
Example 13 Create a table with the same structure as the parent table
postgres=> CREATE TABLE plist1_v100 (LIKE plist1) ;
CREATE TABLE
postgres=> CREATE TABLE plist1_v200 (LIKE plist1) ;
CREATE TABLE
Attach the created table as a partition of the parent table. Use the ALTER TABLE ATTACH
PARTITION statement. At the same time, specify the value of the partitioning column. In the example
below, a plist1_v100 table storing data of LIST partition c1=100 and a plist1_v200 table storing data
of c1=200 are registered.
Example 14 Attach a partition
postgres=> ALTER TABLE plist1 ATTACH PARTITION plist1_v100 FOR VALUES IN (100) ;
ALTER TABLE
postgres=> ALTER TABLE plist1 ATTACH PARTITION plist1_v200 FOR VALUES IN (200) ;
ALTER TABLE
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 18
Objects that can be registered as partitions are limited to tables or FOREIGN TABLE.
□ DETACH of child table
To remove the partitioned child table from the parent table, execute the ALTER TABLE DETACH
statement
Example 15 Detach a partition
postgres=> ALTER TABLE plist1 DETACH PARTITION plist1_v100 ;
ALTER TABLE
3.2.5 Operation on partition table
Validation of the behavior when executing DDL or COPY statement for the parent table or child table.
□ TRUNCATE for parent table
Execution of the TRUNCATE statement for the parent table propagates to all partitions.
Example 16 TRUNCATE for parent table
postgres=> TRUNCATE TABLE part1 ;
TRUNCATE TABLE
postgres=> SELECT COUNT(*) FROM part1_v1 ;
count
-------
0
(1 row)
□ COPY for parent table
The COPY statement for the parent table propagates to the child table.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 19
Example 17 COPY for parent table
postgres=# COPY part1 FROM '/home/postgres/part1.csv' WITH (FORMAT text) ;
COPY 10000
postgres=# SELECT COUNT(*) FROM part1_v1 ;
count
-------
10000
(1 row)
□ DROP parent table
Dropping the parent table also drops all child tables. The DROP TABLE statement for the child table
drops only the child table.
□ Add / delete columns to the parent table
When adding / deleting a column to / from the parent table, the child table is changed in the same
way. However, columns that are partition keys cannot be deleted. Also, if the partition is FOREIGN
TABLE, column addition is not done automatically.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 20
Example 18 Adding and deleting columns from the parent table
postgres=> \d part1
Table "public.part1"
Column | Type | Collation | Nullable | Default
--------+-----------------------+-----------+----------+---------
c1 | numeric | | |
c2 | character varying(10) | | |
Partition key: LIST (c1)
Number of partitions: 2 (Use \d+ to list them.)
postgres=> ALTER TABLE part1 ADD c3 NUMERIC ;
ALTER TABLE
postgres=> \d part1_v1
Table "public.part1_v1"
Column | Type | Collation | Nullable | Default
--------+-----------------------+-----------+----------+---------
c1 | numeric | | |
c2 | character varying(10) | | |
c3 | numeric | | |
Partition of: part1 FOR VALUES IN ('100')
postgres=> ALTER TABLE part1 DROP c1 ;
ERROR: cannot drop column named in partition key
□ TEMPORARY table
A TEMPORARY table can be used for both parent table and partitioned child table. However, if the
parent table is a temporary table, the partition table must also be a temporary table.
□ UNLOGGED table
An UNLOGGED table can be used for parent table or partition table.
□ Hierarchical structure
By partitioning different columns, hierarchical partition table can be created. In the example below,
a table partitioned by column c2 is added under the table partitioned by column c1.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 21
Example 19 Hierarchical partition
postgres=> CREATE TABLE part2 (c1 NUMERIC, c2 NUMERIC, c3 VARCHAR(10)) PARTITION
BY LIST (c1) ;
CREATE TABLE
postgres=> CREATE TABLE part2_v1 PARTITION OF part2 FOR VALUES IN (100) PARTITION
BY LIST (c2) ;
CREATE TABLE
postgres=> CREATE TABLE part2_v1_v2 PARTITION OF part2_v1 FOR VALUES IN (200) ;
CREATE TABLE
3.2.6 Execution Plan
If there is a condition to specify the partition to be accessed in the WHERE clause, an execution plan
that accesses only specific partitions is created.
Example 20 Partition-identifiable SQL and execution plan
postgres=> EXPLAIN SELECT * FROM plist1 WHERE c1 = 100 ;
QUERY PLAN
-------------------------------------------------------------------
Append (cost=0.00..20.38 rows=4 width=70)
-> Seq Scan on plist1_v100 (cost=0.00..20.38 rows=4 width=70)
Filter: (c1 = '100'::numeric)
(3 rows)
However, when the partition cannot be specified (ex. left side of the WHERE clause is a formula),
an execution plan that access all partitions is created.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 22
Example 21 Partition-unspecified SQL and execution plan
postgres=> EXPLAIN SELECT * FROM plist1 WHERE c1 + 1 = 101 ;
QUERY PLAN
-------------------------------------------------------------------
Append (cost=0.00..44.90 rows=8 width=70)
-> Seq Scan on plist1_v100 (cost=0.00..22.45 rows=4 width=70)
Filter: ((c1 + '1'::numeric) = '101'::numeric)
-> Seq Scan on plist1_v200 (cost=0.00..22.45 rows=4 width=70)
Filter: ((c1 + '1'::numeric) = '101'::numeric)
(5 rows)
3.2.7 Catalog
Information on the partitioned parent table can be checked in the pg_partitioned_table catalog. Below
is the table information of which name part1, LIST partition (partstrat = 'l'), attached table number 2
(partnatts = 2).
Example 22 Information of the parent table
postgres=> SELECT partrelid::regclass, * FROM pg_partitioned_table ;
-[ RECORD 1 ]-+------
partrelid | part1
partrelid | 16444
partstrat | l
partnatts | 2
partattrs | 1
partclass | 3125
partcollation | 0
partexprs |
The table of which the relispartition column in the pg_class catalog is "true" is a child table. When
the table is child table, the partition boundary information is stored in the relpartbound column in the
pg_class catalog. Information on this column can be converted easily by pg_get_expr function.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 23
Example 23 Information of child table
postgres=> SELECT relname, relispartition, relpartbound FROM pg_class WHERE
relname = 'prange1_v1' ;
-[ RECORD 1 ]--+----------------------------------------------------------
relname | prange1_v1
relispartition | t
relpartbound | {PARTITIONBOUND :strategy r :listdatums <> :lowerdatums
({PARTRANGEDATUM :infinite false :value {CONST :consttype 1700 :consttypmod
-1 :constcollid 0 :constlen -1 :constbyval false :constisnull
false :location -1 :constvalue 8 [ 32 0 0 0 0 -128 100 0 ]}}) :upperdatums
({PARTRANGEDATUM :infinite false :value {CONST :consttype 1700 :consttypmod
-1 :constcollid 0 :constlen -1 :constbyval false :constisnull
false :location -1 :constvalue 8 [ 32 0 0 0 0 -128 -56 0 ]}})}
postgres=> SELECT relname, relispartition, pg_get_expr(relpartbound, oid)
FROM pg_class WHERE relname = 'prange1_v1' ;
-[ RECORD 1 ]--+-----------------------------------
relname | prange1_v1
relispartition | t
pg_get_expr | FOR VALUES FROM ('100') TO ('200')
3.2.8 Restriction
The partition table has the following restrictions.
□ Number of partitioning columns
Only one column can be specified in the PARTITION BY LIST clause of the CREATE TABLE
statement. In the column name part, it is possible to specify a calculation expression enclosed in
functions and parentheses.
Example 24 Partition using function
postgres=> CREATE TABLE plist2(c1 NUMERIC, c2 VARCHAR(10)) PARTITION BY
LIST (upper(c2)) ;
CREATE TABLE
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 24
□ NULL for partitioning column
Null values cannot be stored in partitioned columns of RANGE partitions. For a list partition, it can
be stored by creating a partition containing NULL values.
Example 25 RANGE partition and NULL value
postgres=> CREATE TABLE partnl(c1 NUMERIC, c2 VARCHAR(10)) PARTITION BY
RANGE (c1) ;
CREATE TABLE
postgres=> CREATE TABLE partnlv PARTITION OF partnl FOR VALUES FROM
(UNBOUNDED) TO (UNBOUNDED) ;
CREATE TABLE
postgres=> INSERT INTO partnl VALUES (NULL, 'null value') ;
ERROR: range partition key of row contains null
□ Restriction of child table
The child table must have the same structure as the parent table. Excess and deficiency or data type
mismatch of column are not allowed.
Example 26 Partition with different structure child table
postgres=> CREATE TABLE plist3(c1 NUMERIC, c2 VARCHAR(10)) PARTITION BY LIST
(c1) ;
CREATE TABLE
postgres=> CREATE TABLE plist3_v100 (c1 NUMERIC, c2 VARCHAR(10), c3 NUMERIC) ;
CREATE TABLE
postgres=> ALTER TABLE plist3 ATTACH PARTITION plist3_v100 FOR VALUES IN (100) ;
ERROR: table "plist3_v100" contains column "c3" not found in parent "plist3"
DETAIL: New partition should contain only the columns present in parent.
postgres=> CREATE TABLE plist3_v200 (c1 NUMERIC);
CREATE TABLE
postgres=> ALTER TABLE plist3 ATTACH PARTITION plist3_v200 FOR VALUES IN (200) ;
ERROR: child table is missing column "c2"
□ Primary Key Constraint / Unique Constraint / Check Constraint
Primary key constraint (or unique constraint) cannot be specified in the parent table. The uniqueness
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 25
of the entire partition table depends on the primary key setting of the child table. CHECK constraints
on the parent table can be specified. When creating a child table, the CHECK constraint is
automatically added to the child table.
Example 27 Add primary key to parent table
postgres=> ALTER TABLE plist1 ADD CONSTRAINT pl_plist1 PRIMARY KEY (c1) ;
ERROR: primary key constraints are not supported on partitioned tables
LINE 1: ALTER TABLE plist1 ADD CONSTRAINT pl_plist1 PRIMARY KEY (c1)...
^
□ INSERT ON CONFLICT statement
The INSERT ON CONFLICT statement for the parent table cannot be executed.
□ UPDATE of partitioning column
When updating the value of a partitioned column, it can be updated only to the value contained in
the FOR VALUES clause of the child table. It cannot be updated to a value that cannot be included in
the child table.
Example 28 Update partitioned column
postgres=> UPDATE plist1 SET c1 = 200 WHERE c1 = 100;
ERROR: new row for relation "plist1_v100" violates partition constraint
DETAIL: Failing row contains (200, data1).
Since the above error occurs, data movement between child tables cannot be realized by UPDATE
statement (use DELETE RETURNING INSERT statement).
□ ATTACHing of already stored data table
ATTACHing a child table that stores data already to the parent table is possible. However, in that