        alert_href('您的会员组不支持观看此视频!',''.$xtcms_domain.'ucenter/mingxi.php');
    }
    }
    function get_play($t0){
        $result = mysql_query('select * from xtcms_player where id ='.$t0.'');
        if (!!$row = mysql_fetch_array($result)){
    return $row['n_url'];
        }else{
            return $t0;
        };
    }
    $result = mysql_query('select * from xtcms_vod where d_id ='.$d_id.'');
        if (!!$row = mysql_fetch_array($result)){
    $d_scontent=explode("\r\n",$row['d_scontent']);
    //print_r($d_scontent);
    for($i=0;$i
这里的话可以看出主要的SQL语句是这句话
    $result = mysql_query('select * from xtcms_vod where d_id = '.$_GET['play'].' ');
然后这个`play`参数是GET传参的，同时看这里的代码可以看出它是没有单引号或者双引号包裹的，此时我们跟进一下include的文件,也就是`system/inc.php`，查看一下这个文件  
跟进这个`library.php`
    $userid){ 
    alert_href('您现在所属会员组的权限制大于等于目标会员组权限值，不需要升级!','mingxi.php');
    }
看这一处代码
    $card= mysql_query('select * from xtcms_userka where id="'.$_POST['cardid'].'"');
不难发现这里的Select语句中的参数被双引号包裹了，而开头包含了`inc.php`文件，之前就已经查看过，这个文件包含了四个文件，其中一个文件中有`addslashes_deep`函数，对传入的参数中的特殊字符(如`'`,`"`,`\`)进行了转义，因此我们这里的话无法通过闭合双引号达到SQL注入的目的，同文件的其他SQL注入处也是如此，这里不再展示
### wap/login.php
扫出login.php中存在多个可控变量，我们使用Seay来看一下具体代码
    //展示的仅为一部分
    $u_end){
        $_data['u_flag'] =="0";
        $_data['u_start'] =="";
        $_data['u_end'] =="";
        $_data['u_group'] =1;
        }else{
        $_data['u_flag'] ==$row["u_flag"];
        $_data['u_start'] ==$row["u_start"];
        $_data['u_end'] ==$row["u_end"];
        $_data['u_group'] =$row["u_group"];
        }
        mysql_query('update xtcms_user set '.arrtoupdate($_data).' where u_id ="'.$row['u_id'].'"');
        $_SESSION['user_name']=$row['u_name'];
        $_SESSION['user_group']=$row['u_group'];
        if($_POST['brand1']){ 
    setcookie('user_name',$row['u_name'],time()+3600 * 24 * 365); 
    setcookie('user_password',$row['u_password'],time()+3600 * 24 * 365); 
    } 
            header('location:user.php');
        }else{
            alert_href('用户名或密码错误或者尚未激活','login.php?op=login');
        }
    }
    if(isset($_POST['reg'])){
    $username = stripslashes(trim($_POST['name']));
    // 检测用户名是否存在
    $query = mysql_query("select u_id from xtcms_user where u_name='$username'");
    if(mysql_fetch_array($query)){
    echo '';
    exit;
    }
    $result = mysql_query('select * from xtcms_user where u_email = "'.$_POST['email'].'"');
    if(mysql_fetch_array($result)){
    echo '';
    exit;
    }
    $password = md5(trim($_POST['password']));
    $email = trim($_POST['email']);
    $regtime = time();
    $token = md5($username.$password.$regtime); //创建用于激活识别码
    $token_exptime = time()+60*60*24;//过期时间为24小时后
    $data['u_name'] = $username;
    $data['u_password'] =$password;
    $data['u_email'] = $email;
    $data['u_regtime'] =$regtime;
    if($xtcms_mail==1){
    $data['u_status'] =0;
        }else{
    $data['u_status'] =1;
        }
    $data['u_group'] =1;
    $data['u_fav'] =0;
    $data['u_plays'] =0;
    $data['u_downs'] =0;
    //推广注册
    if (isset($_GET['tg'])) {
        $data['u_qid'] =$_GET['tg'];
        $result = mysql_query('select * from xtcms_user where u_id="'.$_GET['tg'].'"');
    if($row = mysql_fetch_array($result)){
    $u_points=$row['u_points'];
    }
不难发现这里的SELECT语句有以下几个
    $sql = 'select * from xtcms_user where u_name = "'.$u_name.'" and u_password = "'.md5($u_password).'" and u_status=1';
    $query = mysql_query("select u_id from xtcms_user where u_name='$username'");
    $result = mysql_query('select * from xtcms_user where u_email = "'.$_POST['email'].'"');
    $result = mysql_query('select * from xtcms_user where u_id="'.$_GET['tg'].'"');
但文件开头就声明包含了`inc.php`文件，说明这里的话包含了过滤函数，也就是对SQL注入是有防护的，对`'`、`"`以及`\`都进行了转义，因此这里如果参数是被单引号或者双引号包裹的话，那么这里极有可能算是G了，我们看第一个，也就是
    $sql = 'select * from xtcms_user where u_name = "'.$u_name.'" and u_password = "'.md5($u_password).'" and u_status=1';
它这个不难发现，`$u_name`和`$u_password`都被双引号包裹了，因此这里就不存在SQL注入了。但是看一下第二个，第二个的`username`参数虽然是被双引号进行包裹了，但你会发现这个参数的传值方式是`$username
=
stripslashes(trim($_POST['name']));`，这个`stripslashes`的功能是消除由`addslashes`函数增加的反斜杠，一个增加一个消除，那这里不就跟没有设置过滤一样吗，因此这个`name`参数是存在SQL注入的，我们通过BurpSuite进行抓包  
然后将内容复制到一个txt文件中  
我这里保存在sqlmap目录下  
而后打开sqlmap，输入如下payload即可
    python sqlmap.py "D:/sqlmap/2.txt" --dbs --batch
可以看到存在延时注入，成功爆破出数据库
### vlist.php
在这个界面，用单引号测试一下发现跟正常界面有所不同  
看一下后端代码
                                                  '.$row['c_name'].'';
            }
    ?>
这里简单看一下的话，不难发现这里的参数`cid`是不存在任何防护的，即没有被单引号或者双引号包裹，因此这里开头引用的`inc.php`虽然对SQL注入进行了防护，但在这里其实是没有意义的，用SQLmap跑一下
    python sqlmap.py -u http://127.0.0.1:8080/kkcms-kkcms/vlist.php?cid=1 --dbs --batch
### 后端文件
扫出多个后端文件存在SQL注入，接下来逐一进行检测
### admin/cms_admin_edit.php
源码如下