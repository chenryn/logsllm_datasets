的曲线(有限域的阶等于椭圆曲线的阶)，就受到一种[特殊攻击](http://interact.sagemath.org/edu/2010/414/projects/novotney.pdf)的影响，攻击者可以用一个普通电脑在多项式时间内求解出离散对数问题。
如果我给你一组椭圆曲线参数(domain parameters)，并告诉你说”OMG!
用它”，这时有一种可能性，即我可能已经秘密地找到了一种方法可以快速地对这条曲线求解离散对数。为了解决这个问题，有时候我们额外引入一个参数，即随机数种子S，并用其生成椭圆曲线特征参数a、b或基点G：
    S = random() H = hash(S) a = f(H) b = g(H) ... 
使用随机种子生成的椭圆曲线可被认为是验证随机的(verified
random)，其中使用hash来生成的参数在密码学中也称为“我的袖子里可没藏东西”数(Nothing-up-my-sleeve number)。
一个生成和校验随机椭圆曲线的标准算法是`ANSI
X9.62`，感兴趣的可以参考[SECG标准](http://www.secg.org/sec1-v2.pdf)中 _Verifiably Random
Curves and Base Point Generators_ 一节。
实践中不会每次生成新的椭圆曲线进行加密，因为我们实际上需要的是一个足够大的素数p以及子群阶n，并确保不含人为的预置。所以一般会根据标准如NIST、SECG中建议的方式去选择预置的曲线和随机数种子S，不同的椭圆曲线有不同的安全性、运算速度和不同的秘钥长度。
例如， **比特币** 使用的椭圆曲线 **secp256k1** 的参数如下：
    curve = EllipticCurve(    'secp256k1',    # Field characteristic.    p=0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f,    # Curve coefficients.    a=0,    b=7,    # Base point.    g=(0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798,       0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8),    # Subgroup order.    n=0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141,    # Subgroup cofactor.    h=1, ) 
ECC秘钥的长度取决于所使用的椭圆曲线，在大多数系统中，如OpenSSL、OpenSSH和比特币中默认的ECC秘钥长度都是256位。在OpenSSL中预置的曲线可见：
  * https://github.com/openssl/openssl/blob/master/crypto/ec/ec_curve.c
## ECDSA中的k
在生成ECDSA签名时，我们说到要从 _{1, …, n}_ 中随机选择一个整数 _k_
。这个k需要秘密保存，一旦泄露就可能让攻击者找到签名方的私钥。秘密保存不只是不将k泄露给别人，也意味着生成k的随机数生成器不可预测，更进一步地，要求签名方不能使用同样的k来进行所有签名。
只不过使用了相同的k签名，会有什么问题呢？在这个场景中，我们假设攻击者有两份信息的签名 _(r1, s1)_ 和 _(r2,s2)_
，并且计算这两份信息的原始哈希 _z1_ 和 _z2_ ，加上其他已知的椭圆曲线参数(公钥)，攻击方式如下：
  1. 注意到 _r1 = r2_ ，因为 _r = Px mod n_ 且 _P=kG_ ，对两个信息是一样的
  2. _(s1 - s2) mod n = k^-1(z1 - z2) mod n_
  3. 两边同时乘以 _k_ ，则 _k(s1 - s2) mod n = (z1 - z2) mod n_
  4. 两遍同时除 _(s1 - s2)_ ，则 _k = (z1-z2)(s1-s2)^-1 mod n_
最后一个算式中我们可以直接通过两个文件的哈希和签名计算出 _k_ ，得到 _k_ 之后就可以计算出私钥d：
    s = k^-1(z + r * d) mod n d = r^-1(s*k - z) mod n 
一个现实中的经典案例就是索尼。出于保护目的，PS3只能运行索尼自家ECDSA签名过的游戏，没有索尼签名的游戏或应用无法被PS3的系统加载。但问题是当年索尼的实现是用一个
_同样的k_ 来对所有游戏进行签名的，最终被黑客发现导致了PS3的沦陷。直到现在我们都经常能看到索尼被人用下面这张XKCD的图片进行嘲讽：
## 离散对数
除了文章中提到的安全陷阱或隐患，实际上也有其他问题会导致椭圆曲线离散对数的难题假设在一定程度上失效(或者变弱)。比如，有一种称为[`baby-step,gaint-step`](https://en.wikipedia.org/wiki/Baby-step_giant-step)的算法可以将求解离散对数的算法和空间复杂度从暴力破解的 _O(p)*降低为*O(√n)_ ，当所选的椭圆曲线子群阶 _n_
相对较小时，这种方式就能将离散对数的计算时间减少到可接受的水平，从而威胁加密的安全性。
同样类似的算法还有[`Pollard's
rho`](https://en.wikipedia.org/wiki/Pollard's_rho_algorithm_for_logarithms)算法，其进一步将求解离散对数的空间复杂度降到
_O(1)_ 。对于一些破解椭圆曲线的比赛，如 _Certicom ecc challenge_
，通常就是使用该算法的变种求解的。目前的[最新记录](https://en.wikipedia.org/wiki/Discrete_logarithm_records)是2016年破解的117.35位通用椭圆曲线离散对数求解，使用FPGA实现并行
_Pollard’s rho_ 算法，用到的算力为64至576个FPGA并行运行6个月时间。
除此之外，其他的攻击方式有：
  * Weil pairing / Tate pairing
  * Semaev-Smart-Satoh-Araki attack
  * Gaudry、Hess、Smart等提出的针对二进制域的度为小约数时的一种求解方法
  * …
# NSA后门
在前一段时间介绍比特币的文章中，说到中本聪的一个特别之处就是他“避开了NSA的椭圆曲线后门”，当时听起来挺神奇的，但对于密码学家而言其实只是个正常的选择。
前面说椭圆曲线标准时提到了NIST，其全称为 _National Institute of Standards and Technology_
，即美国的国家标准技术研究所，负责制定一系列产业统一标准。NIST在2006年颁布了一个标准[NIST SP
800-90A](https://en.wikipedia.org/wiki/NIST_SP_800-90A) (SP表示特别发布)，其标题为
**Recommendation for Random Number Generation Using Deterministic Random Bit
Generators** ，这其实只是一个伪随机数生成器的定义标准，其中涉及了4个伪随机数生成器：
  1. Hash_DRBG：基于hash函数
  2. HMAC_DRBG：基于HMAC
  3. CTR_DRBG：基于块加密
  4. **Dual_EC_DRBG** ：基于椭圆曲线加密
四个随机数生成器都是基于现有的密码学原语(cryptographic
primitives)构建的。但是第4个比较特殊，用现在的俚语来说就是“画风和别人不太一样”，而且运行速度也较其他三个而言要慢几个数量级，之所以存在于NIST标准中的唯一原因是因为这是NSA建议的。
因此，早在该标准发表后不久，就有人提出了质疑。[2006](http://eprint.iacr.org/2006/190)到[2007](http://eprint.iacr.org/2007/048)年之间最早提出的主要观点是认为
_Dual_EC_DRBG_ 这个随机数生成器的输出带有一定的偏好(bias)。
随后，在[2007年8月的CRYPTO大会](http://rump2007.cr.yp.to/15-shumow.pdf)上，研究人员进一步提出了这个随机数生成器中的不合理之处。简单来说，就是
_Dual_EC_DRBG_ 所使用的椭圆曲线是由一系列 **常数**
定义的，这些常数定义在NIST标准的附录中，但完全不知道是从何而来。研究人员提出这些常数和另外一个秘密的常数存在某种联系，如果知道了这个秘密常数，那么就可以通过获取
_Dual_EC_DRBG_ 的32字节输出后预测该随机数生成器所生成的随机数。
然而研究人员并不知道这个秘密常数是什么， _也许_
给出这组椭圆曲线参数的人会知道，也许没人知道。不过这种可能性的存在就足够让人警惕了。值得一提的是NIST在标准的附录中还指出可以通过其他随机数生成器来重新产生常数来替换默认的椭圆曲线参数，但这一步是可选的，实际上大部分Dual_EC_DRBG的实现都不会去额外做这个工作。
在比特币诞生之初，作为密码学专家的中本聪，自然也不会放过这个问题，所以避开这个后门也就理所当然了。
虽然Dual_EC_DRBG饱受质疑，但没有人能拿出实质性的证据，所以很多公司如[RSA
Security](https://en.wikipedia.org/wiki/RSA_Security)仍然使用Dual_EC_DRBG来实现一些加密项目，并表示
_问题不大_ 。直到 _2013年_ ，Edward
Snowden跳了出来。在他披露的文件中显示，NSA曾给过1000万美金给RSA，条件是令其将NSA的随机数生成器设为默认。……所以一切就说得通了。
值得一提的是，除了在标准中留后门，NSA还灵活运用了其他方法，比如网络漏洞利用、网络劫持、和工业界进行py、和其他Agent(如英国的GCHQ)进行py等等……这一系列操作构成了网络行动——`Operation
Bullrun`，感兴趣的可以去进一步了解。
_2015年_ ，NIST发布新版本的标准，默默地去掉了Dual_EC_DRBG。
# 参考文章
  * [Practical Cryptography for Developers](https://cryptobook.nakov.com/)
  * [Elliptic Curve Cryptography: a gentle introduction](https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/)
  * [一个把玩椭圆曲线的在线网站](https://cdn.rawgit.com/andreacorbellini/ecc/920b29a/interactive/reals-add.html)
  * [ECDSA代码实现示例](https://github.com/andreacorbellini/ecc/blob/master/scripts/ecdsa.py)
  * [Did NSA Put a Secret Backdoor in New Encryption Standard?](https://www.wired.com/2007/11/securitymatters-1115/)
* * *