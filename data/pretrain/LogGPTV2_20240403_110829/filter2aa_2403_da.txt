     and  
rdx, rdi 
     mov  
r10, rdx 
     and  
r10, r9 
     xor  
r10, rax 
     xor  
r10, rbx 
     not  
rbx 
     and  
rbx, r9 
     mov  
rax, r10 
     and  
rax, QWORD PTR a1$[rsp] 
     xor  
rbx, rax 
     mov  
rax, QWORD PTR out4$[rsp] 
     xor  
rbx, QWORD PTR [rax] 
     xor  
rbx, rcx 
     mov  
QWORD PTR [rax], rbx 
     mov  
rbx, QWORD PTR x36$1$[rsp] 
     and  
rbx, rbp 
     mov  
r9, rbx 
     not  
r9 
     and  
r9, rdi 
     or  
r8, r11 
     mov  
rax, QWORD PTR out1$[rsp] 
     xor  
r8, r9 
     not  
r9 
     and  
r9, rcx 
     or  
rdx, rbp 
     mov  
rbp, QWORD PTR [rsp+80] 
     or  
r9, rsi 
     xor  
rbx, r12 
     mov  
rcx, r11 
     not  
rcx 
     not  
r14 
     not  
r13 
     and  
rcx, r9 
     or  
r9, rdi 
     and  
rbx, r14 
     xor  
r9, r15 
     xor  
rcx, rdx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
394 
逆向工程权威指南（上册） 
     mov  
rdx, QWORD PTR a1$[rsp] 
     not  
r9 
     not  
rcx 
     and  
r13, r10 
     and  
r9, r11 
     and  
rcx, rdx 
     xor  
r9, rbx 
     mov  
rbx, QWORD PTR [rsp+72] 
     not  
rcx 
     xor  
rcx, QWORD PTR [rax] 
     or  
r9, rdx 
     not  
r9 
     xor  
rcx, r8 
     mov  
QWORD PTR [rax], rcx 
     mov  
rax, QWORD PTR out3$[rsp] 
     xor  
r9, r13 
     xor  
r9, QWORD PTR [rax] 
     xor  
r9, r8 
     mov  
QWORD PTR [rax], r9 
     pop  
r15 
     pop  
r14 
     pop  
r13 
     pop  
r12 
     pop  
rdi 
     pop  
rsi 
     ret  
0 
s1  
ENDP 
编译器根本没有使用栈。上述代码中的 x36 就是 a5。 
顺便说一下，x86-64 CPU 的 GPR 还算不上是最多的。例如，Itanium/安腾处理器就有 128 个 GPR。 
26.2  ARM 
自 ARM v8 开始，ARM 处理器支持 64 位指令。 
26.3  浮点数 
有关 64 位平台的浮点数运算，请参见本书第 27 章。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 2277 章
章    SSIIM
MDD 与
与浮
浮点
点数
数的
的并
并行
行运
运算
算  
在 SIMD 功能问世之前，x86 兼容的处理器早就集成了 FPU。自 SSE2 开始，SIMD 拓展指令集提供了
单指令多数据浮点计算的指令。这类指令支持的数据格式同样是 IEEE 754。 
随着硬件的发展，最近推出的 x86/x86-64 编译器越来越多地使用 SIMD 指令，都不再怎么分配 FPU 指令了。 
这不得不说是一种好消息。毕竟 SIMD 的指令更为简单。 
本章将基于第 17 章的源程序进行讲解。 
27.1  样板程序 
#include  
double f (double a, double b) 
{ 
          return a/3.14 + b*4.1; 
}; 
int main()  
{ 
          printf ("%f\n", f(1.2, 3.4)); 
}; 
27.1.1  x64 
指令清单 27.1  Optimizing MSVC 2012 x64 
__real@4010666666666666 DQ 04010666666666666r   ; 4.1 
__real@40091eb851eb851f DQ 040091eb851eb851fr   ; 3.14 
a$ = 8 
b$ = 16 
f        PROC 
         divsd   xmm0, QWORD PTR __real@40091eb851eb851f 
         mulsd   xmm1, QWORD PTR __real@4010666666666666 
         addsd   xmm0, xmm1 
         ret      0 
f        ENDP 
程序使用 XMM0～XMM3 传递参数中的前几个浮点数，其余参数都通过栈传递。有关浮点数的参数传
递规范，请参见 MSDN：https://msdn.microsoft.com/en-us/library/zthk2dkh.aspx。 
变量 a 存储在 XMM0 寄存器里，变量 b 存储在 XMM1 寄存器里。XMM 系列寄存器都是 128 位寄存
器，而双精度 double 型浮点数都是 64 位数据。所以这个程序只使用了寄存器的低半部分。 
DIVSD 是 SSE 指令，它的全称是“Divide Scalar Double-Precision Floating-Point Values”，即标量双精
度浮点除法。DIVSD 指令以第一个操作数中的低 64 位中的双精度浮点数做被除数，以第二操作数的低 64
位中的双精度浮点数做除数进行除法运算，商将保存到目标地址（第一操作数）的低 64 位中，目标地址的
高 64 位保存不变。 
在上述程序中可以看到，编译器以 IEEE 754 格式封装浮点数常量。 
MULSD 和 ADDSD 分别是乘法和加法的运算指令。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
396 
逆向工程权威指南（上册） 
上述函数返回的数据类型是 double，由 XMM0 寄存器回传。 
由 MSVC 编译器进行非优化编译，可得如下所示的代码。 
指令清单 27.2  MSVC 2012 x64 
__real@4010666666666666 DQ 04010666666666666r   ; 4.1  
__real@40091eb851eb851f DQ 040091eb851eb851fr   ; 3.14 
a$ = 8 
b$ = 16 
f        PROC 
         movsdx  QWORD PTR [rsp+16], xmm1 
         movsdx  QWORD PTR [rsp+8], xmm0 
         movsdx  xmm0, QWORD PTR a$[rsp] 
         divsd   xmm0, QWORD PTR __real@40091eb851eb851f 
         movsdx  xmm1, QWORD PTR b$[rsp] 
         mulsd   xmm1, QWORD PTR __real@4010666666666666 
         addsd   xmm0, xmm1 
         ret      0 
f        ENDP 
上述程序还可以进行优化。请注意：传入的参数被保存到了“阴影空间”（可参见本书 8.2.1 节）。但是
只有寄存器的低半部分数据——即 double 型 64 位数据会被存在阴影空间里。 
GCC 编译出的程序与之相同，本文不再介绍。 
27.1.2  x86 
在使用 MSVC 2012 编译 x86 平台的可执行程序时，编译器会分配 SSE2 指令。 
指令清单 27.3  Non-optimizing MSVC 2012 x86 
tv70 = -8  
;size=8 
_a$ = 8 
;size=8 
_b$ = 16 
;size=8 
_f       PROC 
         push     ebp 
         mov      ebp, esp 
         sub       esp, 8 
         movsd    xmm0, QWORD PTR _a$[ebp] 
         divsd    xmm0, QWORD PTR __real@40091eb851eb851f 
         movsd    xmm1, QWORD PTR _b$[ebp] 
         mulsd    xmm1, QWORD PTR __real@4010666666666666 
         addsd    xmm0, xmm1 
         movsd    QWORD PTR tv70[ebp], xmm0 
         fld      QWORD PTR tv70[ebp] 
         mov      esp, ebp 
         pop     
ebp 
         ret      0 
_f 
  ENDP 
指令清单 27.4  Optimizing MSVC 2012 x86 
tv67 = 8   
; size = 8 
_a$ = 8  
; size = 8 
_b$ = 16  
; size = 8 
_f       PROC 
         movsd  
xmm1, QWORD PTR _a$[esp-4] 
         divsd  
xmm1, QWORD PTR __real@40091eb851eb851f 
         movsd  
xmm0, QWORD PTR _b$[esp-4] 
         mulsd  
xmm0, QWORD PTR __real@4010666666666666 
         addsd  
xmm1, xmm0 
         movsd  
QWORD PTR tv67[esp-4], xmm1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 27 章 SIMD 与浮点数的并行运算 
397 
         fld  
QWORD PTR tv67[esp-4] 
         ret  
0 
_f       ENDP 
这种 x86 程序与前面介绍的 64 位程序十分相似。它们的区别主要体现在参数的调用规范上： 
① x86 程序会像第 17 章的 FPU 例子那样使用栈来传递浮点数，而不是像 64 位程序那样使用 XMM 寄存
器传递浮点型参数。 
② x86 程序的浮点型数据的运算结果保存在 ST(0)寄存器里——这个值是通过局部变量 tv、从 XMM
寄存器复制到 ST(0)寄存器的。 
现在，我们使用 OllyDbg 调试前面那个优化编译的 32 位程序，如图 27.1 到图 27.4 所示。 
图 27.1  OllyDbg: MOVSD 指令把变量 a 传递给 XMM1 
图 27.2  OllyDbg:DIVSD 进行除法运算、把商存储于 XMM1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
398 
逆向工程权威指南（上册） 
图 27.3  OllyDbg:MULSD 进行乘法运算、把积存储于 XMM0 
图 27.4  OllyDbg:ADDSD 计算 XMM0 和 XMM1 的和 
从图 27.5 可以看到：虽然 OllyDbg 把单个 XMM 寄存器视为一对 double 数据的寄存器，但是它只使用
了寄存器的低半部分。很明显，OllyDbg 根据 SSE2 指令的后缀“－SD”判断出了数据类型，并据此进行
了数据整理。实际上，OllyDbg 还能够根据 SSE 指令进行判断，把 XMM 寄存器的数据整理为 4 个 float
浮点数、或者是 16 个字节。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 27 章 SIMD 与浮点数的并行运算 
399 
图 27.5  OllyDbg:FLD 把函数返回值传递给 ST（0） 
27.2  传递浮点型参数 
#include  
#include  
int main ()  
{ 
        printf ("32.01 ^ 1.54 = %lf\n", pow (32.01,1.54)); 
        return 0; 
}  
在函数间负责传递浮点数的寄存器是 XMM0～XMM3 寄存器。 
指令清单 27.5  Optimizing MSVC 2012 x64 
$SG1354 DB       '32.01 ^ 1.54 = %lf', 0aH, 00H 
__real@40400147ae147ae1 DQ 040400147ae147ae1r 
 ; 32.01 
__real@3ff8a3d70a3d70a4 DQ 03ff8a3d70a3d70a4r 
 ; 1.54 
main   PROC 
  sub      rsp, 40 
; 00000028H 
  movsdx   xmm1, QWORD PTR __real@3ff8a3d70a3d70a4 
  movsdx   xmm0, QWORD PTR __real@40400147ae147ae1 
  call     pow 
  lea      rcx, OFFSET FLAT:$SG1354 
  movaps  xmm1, xmm0 
  movd    rdx, xmm1 
  call    printf 
  xor     eax, eax 
  add     rsp, 40 
; 00000028H 
  ret     0 
main   ENDP 
无论是Intel指令白皮书
①还是AMD指令白皮书
②