provide key independence when one or both parties reuse their DH
exponential; the session key will be different between independent
runs of the protocol, as long as one of the nonces or exponentials
changes. HKR is a global parameter for the responder — it stays
the same between protocol runs, but can change periodically.
2.2 The JFKi Protocol
The JFKi protocol consists of four messages (two round trips):
I ! R : NI ; gi; IDR0
R ! I
: NI ; NR; gr; grpinfoR; IDR;
SR[gr; grpinfoR
HHKR
(gr; NR; NI ; IPI )
];
I ! R : NI ; NR; gi; gr;
(gr; NR; NI ; IPI );
HHKR
fIDI ; sa; SI [NI ; NR; gi; gr; IDR; sa]gKe
fSR[NI ; NR; gi; gr; IDI ; sa; sa
0gKe
0]; sa
Ka
Ka
R ! I
:
(1)
(2)
(3)
(4)
The keys used to protect Messages (3) and (4), Ke and Ka, are
computed as Hgir (NI ; NR; "1") and Hgir (NI ; NR; "2") respec-
tively. The session key passed to IPsec (or some other application),
Kir, is Hgir (NI ; NR; "0"). (Note that there may be a difference
in the number of bits from the HMAC and the number produced by
the raw Difﬁe-Hellman exchange; the 512 least-signiﬁcant bits are
of gir are used as the key in that case). If the key used by IPsec is
longer than the output of the HMAC, the key extension method of
IKE is used to generate more keying material.
Message (1) is straightforward; note that it assumes that the ini-
tiator already knows a group and generator that are acceptable to
the responder. The initiator can reuse a gi value in multiple in-
stances of the protocol with the responder, or other responders that
accept the same group, for as long as she wishes her forward se-
crecy interval to be. We discuss how the initiator can discover what
groups to use in a later section. This message also contains an indi-
cation as to which ID the initiator would like the responder to use
to authenticate. IDR0 is sent in the clear; however, the responder’s
ID in Message (2) is also sent in the clear, so there is no loss of
privacy.
Message (2) is more complex. Assuming that the responder ac-
cepts the Difﬁe-Hellman group in the initiator’s message (rejections
are discussed in Section 2.5), he replies with a signed copy of his
own exponential (in the same group, also (mod p)), information
on what secret key algorithms are acceptable for the next message,
a random nonce, his identity (certiﬁcates or a string identifying his
public key), and an authenticator calculated from a secret, HKR,
known to the responder; the authenticator is computed over the re-
sponder’s exponential, the two nonces, and the initiator’s network
address. The responder’s exponential may also be reused; again, it
is regenerated according to the responder’s forward secrecy inter-
val. The signature on the exponential needs to be calculated at the
same rate as the responder’s forward secrecy interval (when the ex-
ponential itself changes). Finally, note that the responder does not
need to generate any state at this point, and the only cryptographic
operation is a MAC calculation. If the responder is not under heavy
load, or if PFS is deemed important, the responder may generate
a new exponential and corresponding signature for use in this ex-
change; of course, this would require keeping some state (the secret
part of the responder’s Difﬁe-Hellman computation).
Message (3) echoes back the data sent by the responder, includ-
ing the authenticator. The authenticator is used by the respon-
der to verify the authenticity of the returned data. The authen-
ticator also conﬁrms that the sender of the Message (3) used the
same address as in Message (1) — this can be used to detect and
counter a “cookie jar” DoS attack1. A valid authenticator indicates
to the responder that a roundtrip has been completed (between Mes-
sages (1), (2), and (3)). The message also includes the initiator’s
identity and service request, and a signature computed over the
nonces, the responder’s identity, and the two exponentials. This
latter information is all encrypted and authenticated under keys Ke
and Ka, as already described. The encryption and authentication
use algorithms speciﬁed in grpinfoR. The responder keeps a copy
of recently-received Messages (3), and their corresponding Mes-
sage (4). Receiving a duplicate (or replayed) Message (3) causes
the responder to simply retransmit the corresponding Message (4),
without creating new state or invoking IPsec. This cache of mes-
sages can be reset as soon as HKR is changed. The responder’s
exponential (gr) is re-sent by the initiator because the responder
may be generating a new gr for every new JFK protocol run (e.g.,
if the arrival rate of requests is below some threshold). It is impor-
tant that the responder deal with repeated Messages (3) as described
above. Responders that create new state for a repeated Message (3)
open the door to attacks against the protocol and/or underlying ap-
plication (IPsec).
Note that the signature is protected by the encryption. This is
necessary for identity protection, since everything signed is public
except the sa, and that is often guessable. An attacker could verify
guesses at identities if the signature were not encrypted.
Message (4) contains application-speciﬁc information (such as
the responder’s IPsec SPI), and a signature on both nonces, both
exponentials, and the initiator’s identity. Everything is encrypted
and authenticated by the same Ke and Ka used in Message (3),
which are derived from NI, NR, and gir. The encryption and au-
thentication algorithms are speciﬁed in grpinfoR.
2.3 Discussion
The design follows from our requirements. With respect to com-
munication efﬁciency, observe that the protocol requires only two
round trips. The protocol is optimized to protect the responder
against denial of service attacks on state or computation. The initia-
1The “cookie jar” DoS attack involves an attacker that is willing
to reveal the address of one subverted host so as to acquire a valid
cookie (or number of cookies) that can then be used by a large
number of other subverted hosts to launch a DDoS attack using the
valid cookie(s).
50tor bears the initial computational burden and must establish round-
trip communication with the responder before the latter is required
to perform expensive operations. At the same time, the protocol
is designed to limit the private information revealed by the initia-
tor; she does not reveal her identity until she is sure that only the
responder can retrieve it.
(An active attacker can replay an old
Message (2) as a response to the initiator’s initial message, but he
cannot retrieve the initiator’s identity from Message (3) because he
cannot complete the Difﬁe-Hellman computation).
The initiator’s ﬁrst message, Message (1), is a straightforward
Difﬁe-Hellman exponential. Note that this is assumed to be en-
coded in a self-identifying manner, i.e., it contains a tag indicat-
ing which modulus and base was used. The nonce NI serves two
purposes: ﬁrst, it allows the initiator to reuse the same exponen-
tial across different sessions (with the same or different responders,
within the initiator’s forward secrecy interval) while ensuring that
the resulting session key will be different. Secondly, it can be used
to differentiate between different parallel sessions (in any case, we
assume that the underlying transport protocol, i.e., UDP, can handle
the demultiplexing by using different ports at the initiator).
Message (2) must require only minimal work for the responder,
since at that point he has no idea whether the initiator is a legitimate
correspondent or, e.g., a forged message from a denial of service at-
tack; no round trip has yet occurred with the initiator. Therefore, it
is important that the responder not be required at this point to per-
form expensive calculations or create state. Here, the responder’s
cost will be a single authentication operation, the cost of which (for
HMAC) is dominated by two invocations of a cryptographic hash
function, plus generation of a random nonce NR.
The responder may compute a new exponential gb (mod p) for
each interaction. This is an expensive option, however, and at times
of high load (or attack) it would be inadvisable. The nonce prevents
two successive session keys from being the same, even if both the
initiator and the responder are reusing exponentials. One case when
both sides may reuse the same exponentials is when the initiator is
a low-power device (e.g., a cellphone) and the responder is a busy
server.
A simple way of addressing DoS is to periodically (e.g., once ev-
(gr); SR[gr]) tuple and
ery 30 seconds) generate an (r; gr; HHKR
place it in a FIFO queue. As requests arrive (in particular, as valid
Messages (3) are processed), the ﬁrst entry from the FIFO is re-
moved; thus, as long as valid requests arrive at under the generation
rate, PFS is provided for all exchanges. If the rate of valid protocol
requests exceeds the generating rate, a JFK implementation should
reuse the last tuple in the FIFO. Notice that in this scheme, the same
gr may be reused in different sessions, if these sessions are inter-
leaved. This does not violate the PFS or other security properties
of the protocol.
If the responder is willing to accept the group identiﬁed in the
initiator’s message, his exponential must be in the same group. Oth-
erwise, he may respond with an exponential from any group of his
own choosing. The ﬁeld grpinfoR lists what groups the responder
ﬁnds acceptable, if the initiator should wish to restart the proto-
col. This provides a simple mechanism for the initiator to discover
the groups currently allowed by the responder. That ﬁeld also lists
what encryption and MAC algorithms are acceptable for the next
two messages. This is not negotiated; the responder has the right to
decide what strength encryption is necessary to use his services.
Note that the responder creates no state when sending this mes-
sage. If it is fraudulent, that is, if the initiator is non-existent or
intent on perpetrating a denial-of-service attack, the responder will
not have committed any storage resources.
In Message (3), the initiator echoes content from the responder’s
message, including the authenticator. The authenticator allows the
responder to verify that he is in round-trip communication with a
legitimate potential correspondent. The initiator also uses the key
derived from the two exponentials and the two nonces to encrypt
her identity and service request. The initiator’s nonce is used to
ensure that this session key is unique, even if both the initiator and
the responder are reusing their exponentials and the responder has
“forgotten” to change nonces.
Because the initiator can validate the responder’s identity before
sending her own and because her identifying information (ignoring
her public key signature) is sent encrypted, her privacy is protected
from both passive and active attackers. An active attacker can re-
play an old Message (2) as a response to the initiator’s initial mes-
sage, but he cannot retrieve the initiator’s identity from Message (3)
because he cannot complete the Difﬁe-Hellman computation. The
service request is encrypted, too, since its disclosure might identify
the requester. The responder may wish to require a certain strength
of cryptographic algorithm for selected services.
Upon successful receipt and veriﬁcation of this message, the re-
sponder has a shared key with a party known to be the initiator. The
responder further knows what service the initiator is requesting. At
this point, he may accept or reject the request.
The responder’s processing on receipt of Message (3) requires
verifying an authenticator and, if that is successful, performing sev-
eral public key operations to verify the initiator’s signature and cer-
tiﬁcate chain. The authenticator (again requiring two hash opera-
tions) is sufﬁcient defense against forgery; replays, however, could
cause considerable computation. The defense against this is to
cache the corresponding Message (4); if a duplicate Message (3)
is seen, the cached response is retransmitted; the responder does
not create any new state or notify the application (e.g., IPsec). The
key for looking up Messages (3) in the cache is the authenticator;
this prevents DoS attacks where the attacker randomly modiﬁes the
encrypted blocks of a valid message, causing a cache miss and thus
more processing to be done at the responder. Further, if the authen-
ticator veriﬁes but there is some problem with the message (e.g., the
certiﬁcates do not verify), the responder can cache the authentica-
tor along with an indication as to the failure (or the actual rejection
message), to avoid unnecessary processing (which may be part of a
DoS attack). This cache of Messages (3) and authenticators can be
purged as soon as HKR is changed (since the authenticator will no
longer pass veriﬁcation).
Caching Message (3) and refraining from creating new state for
replayed instances of Message (3) also serves another security pur-
pose. If the responder were to create a new state and send a new
0
Message (4), and a new sa
for a replayed Message (3), then an at-
tacker who compromised the initiator could replay a recent session
with the responder. That is, by replaying Message (3) from a re-
cent exchange between the initiator and the responder, the attacker
could establish a session with the responder where the session-key
would be identical to the key of the previous session (which took
place when the initiator was not yet compromised). This could
compromise the Forward Security of the initiator.
There is a risk, however, in keeping this message cached for too
long: if the responder’s machine is compromised during this pe-
riod, perfect forward secrecy is compromised. We can tune this by
changing the MAC key HKR more frequently. The cache can be
reset when a new HKR is chosen.
In Message (4), the responder sends to the initiator any responder-
speciﬁc application data (e.g., the responder’s IPsec SPI), along
with a signature on both nonces, both exponentials, and the ini-
tiator’s identity. All the information is encrypted and authenti-
cated using keys derived from the two nonces, NI and NR, and
51the Difﬁe-Hellman result. The initiator can verify that the respon-
der is present and participating in the session, by decrypting the
message and verifying the enclosed signature.
2.4 The JFKr Protocol
Using the same notation as in JFKi, the JFKr protocol is:
I ! R : NI ; gi
R ! I : NI ; NR; gr; grpinfoR;
HHKR
(gr; NR; NI ; IPI )
I ! R : NI ; NR; gi; gr;
(gr; NR; NI ; IPI )
HHKR
fIDI ; IDR0 ; sa; SI [NI ; NR; gi; gr; grpinfoR
fIDR; sa