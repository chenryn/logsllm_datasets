![](img/44a9298c-0671-4f61-b714-fae334ce3b7c.png)
如果您单击“下一步”，将要求您选择一个构建提供程序，该程序定义将在您的源存储库中执行构建操作的构建服务的提供程序:
![](img/4ebf9916-9332-4ea5-b7c5-89c361a8123c.png)
选择 AWS 代码构建并选择创建新的构建项目选项后，您需要配置构建项目，如下所示:
*   环境映像:对于环境映像，选择指定一个 Docker 映像选项，然后将环境类型设置为 Linux，自定义映像类型设置为 Amazon ECR 然后，选择您在本章前面发布的`docker-in-aws/codebuild repository/latest`映像。
*   高级:确保设置了特权标志，如下图所示。每当您在 Docker 映像中运行 Docker 时，这都是必需的:
![](img/132bf4f5-0a72-458b-ab05-419745b1bae5.png)
完成生成项目配置后，请确保在单击“下一步”继续之前单击“保存生成项目”。
在下一阶段，您将被要求定义部署阶段。此时，我们只想执行测试、构建和发布 Docker 应用的持续集成任务，因此选择“不部署”选项并单击“下一步”继续:
![](img/c5d4b3fa-d8ea-4c84-968d-565b491923cf.png)
最后一步是配置一个 IAM 角色，代码管道可以承担这个角色来执行管道中的各种构建和部署任务。单击创建角色按钮，这将打开一个新窗口，要求您为代码管道创建一个具有适当权限的新 IAM 角色:
![](img/d924fc71-95b4-41d3-a6e8-29ad258664cf.png)
查看策略文档后，单击允许，这将在代码管道向导中选择新角色。最后，单击下一步，查看管道配置，然后单击创建管道以创建新管道。
此时，您的管道将被创建，您将进入管道的管道配置视图。每当您第一次创建管道时，代码管道将自动触发管道的第一次执行，几分钟后，您应该会注意到管道的构建阶段已经失败:
![](img/a014138c-d861-4c94-9165-871b35dc3908.png)
要了解有关构建失败原因的更多信息，请单击“详细信息”链接，该链接将弹出有关失败的更多详细信息，还将包含一个指向发生失败的代码构建作业的链接。如果您单击此链接并向下滚动，您可以看到故障发生在`pre_build`阶段，并且在构建日志中，该问题与 IAM 权限问题相关:
![](img/4640dbba-7a70-49ac-8992-d1d43e7b3d1c.png)
问题是在代码管道向导期间自动创建的 IAM 角色不包括登录 ECR 的权限。
要解决此问题，请打开 IAM 控制台，从左侧菜单中选择角色，并找到向导创建的`code-build-todobackend-service-role`。在权限选项卡中，单击附加策略，找到`AmazonEC2ContainerRegistryPowerUser`管理的策略，然后单击附加策略按钮。超级用户角色授予登录、拉取和推送权限，因为我们将发布到 ECR 作为构建工作流的一部分，所以需要这种级别的访问权限。完成配置后，该角色的“权限”选项卡应该与下面屏幕截图中显示的一样:
![](img/6e394fa4-1f87-4edd-9edd-6b53978de78a.png)
既然您已经解决了权限问题，请导航回您的管道的代码管道详细信息视图，在构建阶段单击“重试”按钮，并确认重试失败的构建。这一次，几分钟后，构建应该会成功完成，您可以使用`aws ecr list-images`命令来验证新的映像已经发布到 ECR:
```
> aws ecr list-images --repository-name docker-in-aws/todobackend \
 --query imageIds[].imageTag --output table
-----------------------------------------------------------------------------------
| ListImages                                                                      |
+---------------------------------------------------------------------------------+
| 5fdbe62                                                                         |
| latest                                                                          |
| ab7ac1649e8ef4d30178c7f68899628086155f1d.10f5ef52-e3ff-455b-8ffb-8b760b7b9c55   |
+---------------------------------------------------------------------------------+
```
请注意，最后发布的映像格式为``。``，其中``为 CodeBuild 作业 ID，确认 CodeBuild 已成功向 ECR 发布新映像。
# 使用代码管道创建连续交付管道
此时，您有了一个连续的集成管道，每当在主分支上将提交推送到您的源存储库时，它将自动为您的应用发布新的 Docker 映像。在某些时候，您可能希望将 Docker 映像部署到一个环境中(可能是一个临时环境，在那里您可能会运行一些端到端测试来验证您的应用是否按预期工作)，然后部署到一个为您的最终用户服务的生产环境中。虽然您可以通过更新 todobackend 栈的`ApplicationImageTag`输入来手动部署这些更改，但理想情况下，您希望能够将这些更改连续自动部署到至少一个环境中，这为开发人员、测试人员和产品经理提供了即时访问，从而允许来自应用开发中涉及的关键利益相关者的快速反馈。
这个概念被称为持续部署。换句话说，每当您持续集成和构建测试过的软件工件时，您就持续部署这些工件。持续部署现在非常普遍，尤其是在非生产环境中部署时。远不常见的是从生产一直到生产的持续部署。为了实现这一点，您必须有高度自动化的部署后测试，并且，至少在我的经验中，这对于大多数组织来说仍然很难实现。一种更常见的方法是所谓的连续交付，您可以认为这是一种一旦确定您的版本已经准备好投入生产，就自动部署到生产的能力。
连续交付允许常见的场景，其中您需要执行生产中的受控发布，而不是一有发布就持续部署到生产中。这比一直持续部署到生产环境更容易实现，因为它允许在您选择部署到生产环境之前对您的非生产环境进行手动测试。
现在您已经了解了什么是连续交付，让我们扩展我们的管道来支持连续交付。
CodePipeline includes support for ECS as a deployment target, where you can deploy new images published by your continuous integration pipeline to a target ECS cluster and ECS service. In this chapter, I will be using CloudFormation to deploy application changes; however, you can read more about the ECS deployment mechanism at [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cd-pipeline.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cd-pipeline.html).
第一个阶段是将代码更改的持续部署配置到非生产环境中，要求您执行以下配置操作，这些操作将在后面详细讨论:
*   在您的源存储库中发布版本信息
*   将代码管道支持添加到您的部署存储库中
*   将您的部署存储库添加到代码管道
*   为您的构建操作添加一个输出工件
*   为云信息部署创建一个 IAM 角色
*   向管道添加部署阶段
# 在源存储库中发布版本信息
我们管道的一个关键要求是能够将新构建的 Docker 映像部署到我们的 AWS 环境中。目前，CodePipeline 还没有真正意识到发布的 Docker 映像标签。我们知道标签是在代码构建环境中配置的，但是代码管道对此并不了解。
为了使用在代码构建构建阶段生成的 Docker 映像标记，您需要生成一个输出工件，该工件首先由代码构建收集，然后在代码管道中可供未来的部署阶段使用。
要做到这一点，您必须首先定义代码构建应该收集的工件，这可以通过向 todobackend 存储库中的`buildspec.yml`构建规范添加一个`artifacts`参数来实现:
```
version: 0.2
phases:
  pre_build:
    commands:
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --storage-driver=overlay&
      - timeout -t 15 sh -c "until docker info; do echo .; sleep 1; done"
      - export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | sed 's/^[^:]*://g')
      - export APP_VERSION=$CODEBUILD_RESOLVED_SOURCE_VERSION.$BUILD_ID
      - make login
  build:
    commands:
      - make test
      - make release
      - make publish
      - make version > version.json
  post_build:
    commands:
      - make clean
      - make logout
artifacts:
 files:
 - version.json
```
在前面的例子中，`artifacts`参数配置代码构建在`version.json`位置寻找工件。请注意，您还向构建阶段添加了一个额外的命令，该命令将`make version`命令的输出写入`version.json`文件，CodeBuild 希望在该文件中找到一个工件。
此时，请确保将您的更改提交并推送到 todobackend 存储库，以便将来的构建可以使用这些更改。
# 向部署存储库添加代码管道支持
当您使用代码管道使用云信息部署您的环境时，您需要确保您可以提供一个配置文件，其中包括输入栈参数、栈标签和栈策略配置。该文件必须以 JSON 格式实现，如[https://docs . AWS . Amazon . com/AWS cloudinformation/latest/user guide/continuous-delivery-codepipeline-cfn-artifacts . html # w2ab 1c 13 c 15 c 15](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-cfn-artifacts.html#w2ab2c13c15c15)中所定义，因此我们需要修改`todobackend-aws`存储库中输入参数文件的格式，该存储库当前为`=`格式，位于名为`dev.cfg`的文件中。根据引用的文档，所有的输入参数需要驻留在一个名为`Parameters`的键下的 JSON 文件中，您可以在一个名为`dev.json`的新文件中定义该键，该文件位于`todobackend-aws`存储库的根目录下:
```
{ 
  "Parameters": {
    "ApplicationDesiredCount": "1",
    "ApplicationImageId": "ami-ec957491",
    "ApplicationImageTag": "latest",
    "ApplicationSubnets": "subnet-a5d3ecee,subnet-324e246f",
    "VpcId": "vpc-f8233a80"
  }
}
```
在上例中，请注意我已经将`ApplicationImageTag`值更新为`latest`。这是因为我们的管道实际上会从管道的构建阶段动态获取`ApplicationImageTag`输入的值，而`latest`值是一个更安全的默认值，如果您想要从命令行手动部署栈。
此时`dev.cfg`文件是多余的，可以从你的库中删除；但是，请注意，您需要从命令行手动修改运行部署的方式，因为`aws cloudformation deploy`命令期望以`=`格式提供输入参数。
解决这个问题的一种方法是使用`jq`实用程序将新的`dev.json`配置文件转换为所需的`=`格式:
```
> aws cloudformation deploy --template-file stack.yml --stack-name todobackend \
    --parameter-overrides $(cat dev.json | jq -r '.Parameters|to_entries[]|.key+"="+.value') \
    --capabilities CAPABILITY_NAMED_IAM
```
这个命令现在已经很丰富了，所以，为了简化这个命令的运行，您可以向`todobackend-aws`存储库添加一个简单的 Makefile:
```
.PHONY: deploy
deploy/%: