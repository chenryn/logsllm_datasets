音渠道模型。（其想法是用户希望输入c，但是由于一些噪音或静
1599
---
## Page 1601
态数据，改成了输入w。）遗憾的是，从我们拥有的语料数据来
看，对该模型进行估计并不容易一—语料库没有提供信息表示哪些
单词是其他单词的拼写错误。
我们可以通过更多的数据来解决这个问题：一个错误拼写列表。
RogerMitton在http：//www.dcs.bbk.ac.uk/~ROGER/corpora.html维护
了一个约1万条（c.w）词对的数据语料库。但是我们不能只是从该
数据中查找P(w=thewlc=thaw)；若只有4万条例子，那么看到相同的
词对的概率很低。当数据很稀疏时，需要对它进行范化。可以通过
忽略相同的字母、“th"和"w"来进行范化，计算P（w=ec=a），即期
望输入字母"a"却输入“e"的概率。由于存在如"consistent/consistant”
和"inseparable/inseperable"这样的错误，把"a"误拼写为"e"是最常见
的一种单词误拼。
在以下表中，我们考虑当w=thew时，c的五个候选项。其中一个是
thew本身，另外四个表示我们将要考虑的四种单步编辑类型：1）
删除字母"thew”中的"w”，生成"the”。2）插入“r”，得到“threw”。
以上两种编辑都是考虑编辑其前一个字母。3）用"a"替换“e”，如之
前所述。4）对两个相邻字母交换位置，把"ew"交换成“we”。我们
称这些单步编辑为编辑距离1：需要两步编辑的候选项是编辑距离
2。下表显示单词w和c，编辑wlc，概率P(wlc），概率P(c)，以及二
者概率的乘积（为了可读性进行了扩展）。
W
w|c
P(w|c)
P(C)
10°P(w|c)P(c)
thew
the
ewle
0.000007
0.02 144.
144.
thew
thew
0.95
0.00000009
90.
thew
thaw
e la
0.001
0.0000007
0.7
thew
threw
h 1 hr
0.000008
000000
00
thew
thwe
ew 1 we
0.000003
00000000
0.0001
从表中可以看出，“the"是最可能的纠正结果。P(c)可以和Pw一起计
算。对于P（wlc），我们需要创建一个新的函数Pedit，它给出了一步
编辑操作的概率，从拼写错误的语料库中估计出来。举个例子，可
以计算Pedit（'ewle'）=0.000007。更复杂编辑定义成单步编辑的连
接。例如，为了把"hallow"转换成"hello”，我们把ale编辑操作和
owlo编辑操作连接起来，因此整个编辑被称为ale+owlo（或者
owlo+ale，在这种情况下（但不总是如此）是相同的）。复杂编辑
的概率等于其各个子部分的乘积。
1600
---
## Page 1602
存在一个问题：空编辑Pedit（"）的概率有多大？也就是说，假设
期望的单词是c，人们真的输入c而不是其中某种错误的编辑？这依
赖于打字员的熟练程度以及是否有检查。很随意地，我假定每20个
单词出现一次拼写错误。值得注意的是，如果我假定每50个单词才
出现一次错误，那么对于w="thew”，P(wlc）的概率为0.98.，而不是
0.95，而且“thew"将是最可能的结果。
最后，我们可以展示代码了。该代码包含两个高层函数correct和
corrections,correct函数返回一个单词的最佳纠正，corrections函数把
correct应用到文本中的每个单词，对其邻近字符不做改动。候选项
是所有可能的编辑，而最佳候选项是有最高的P(wc）P(c分值的候
选项。
def corrections (text) :
"Spell-correct all words in text."
return re.sub (*[a-zA-Z]+', lambda m:correct (m.group (0) ),
text)
def correct (w) :
"Return the word that is the most likely spell correction
of w."candidates=edits (w) .items ()
C, edit=max (candidates, key=lambda (c,e) : Pedit(e) *Pw (c) )
return c
P（w|c）是通过函数Pedit来计算的：
def Pedit (edit) :
"The probability of an edit: can be''or'a|b'or'a|b+c|d',"
if edit==*': return (1.-p_spell_error)
return p_spell_error*product (Pledit(e) for e in
edit.split (+))
P_spell_error=1./20.
Pledit=Pdist(datafile ('countledit') ) ##Probabilities of
single edits
1601
---
## Page 1603
候选项是通过编辑生成的，即传递一个单词，返回一个{单词：编
辑对的词典dict表示可能的纠正。通常来说，可能对于一个纠正存
在多种编辑。（例如，我们通过在"e"或者"1"后面插入"1"后，都可
以把"tel"转为"tell”。）我们选择有最高概率的编辑。edits是我们目
前为止最复杂的函数。一部分原因是该函数本质上就很复杂，生成
4种编辑很复杂。但是一部分是因为我们采取了一些措施使得该函
数变得高效。（性能较低但是易于读取的一个版本在
http：//norvig.com/spell-correct.html。）如果我们考虑所有的编辑，
一个单词如"accommodations"可以生成233166个候选项。但是只有
11种候选项可以在词汇库中找到。因此，编辑是通过预计算词汇库
中所有单词的所有前缀才能工作。然后，它递归调用edits，把单词
分成头部和尾部（代码中的hd和tl)，并保证头部总是在前缀列表
中。通过把结果添加到词典库dict中进行收集：
def edits (word, d=2) :
"Return a dict of(correct:edit)pairs within d edits of
word. "
results={}
def editsR (hd, tl, d, edits) :
def ed(L, R) : return edits+ [R+'I'+L]
C=hd+t1
if C in Pw:
e= '+' . join (edits)
if C not in results:results[C]=e
else:results [C]=max (results [C], e, key=Pedit)
if d>>edits ('adiabatic'， 2)
{'adiabatic': '*, 'diabetic':
>>correct ('vokabulary')
'vocabulary
>>>correct ('embracable')
'embraceable'
>>>corrections ('thiss is a teyst of acommodations for
korrections
of mispellings of particuler wurds.')
'this is a test of acommodations for corrections of
mispellings
of particular words. '
15个单词中有13个处理结果正确，但是“acommodations"和
“mispellings"处理结果错误。为什么呢？遗憾的是，网络上充满了
很多错误的拼写。错误的单词“mispellings"在语料库中出现了18543
次，而正确的单词“misspellings”只出现了50万次，这其中的差距不
足以带来用一次编辑替换无编辑。“thew”出现了96759次，我怀疑其
中绝大多数也是由于拼写错误。
有很多种方式可以改进这个拼写程序。首先，我们可以通过上下文
的其他单词来纠正这个单词，因此"theyre"本身是正确的，但是当
出现在"intheyrewords"时，就会被纠正为"their”。一个单词二元模
型或者三元模型就可以实现它。
我们真的需要清洗语料库中的拼写错误。看看以下这些不同的
"misspellings":
misspe11ings 432354
mispe1lings 18543
misspelings 10148
1604