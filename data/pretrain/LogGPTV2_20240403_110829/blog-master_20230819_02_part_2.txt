  v_end_cts1 date,   -- 窗口1的结束时间   
  v_begin_cts2 date,   -- 窗口2的开始时间   
  v_end_cts2 date   -- 窗口2的结束时间  
) returns int8 as $$  
select count(*) from   
  (select uid from tbl where rid=v_rid and cts >= v_begin_cts2 and cts = v_begin_cts1 and cts = v_begin_cts1 and cts = v_begin_cts2 and cts = v_begin_cts1 and cts    | hll           | hll            | boolean          | hll_ne          |   
 public | <>   | hll_hashval   | hll_hashval    | boolean          | hll_hashval_ne  |   
 public | =    | hll           | hll            | boolean          | hll_eq          |   
 public | =    | hll_hashval   | hll_hashval    | boolean          | hll_hashval_eq  |   
 public | ||   | hll           | hll            | hll              | hll_union       |   
 public | ||   | hll           | hll_hashval    | hll              | hll_add         |   
 public | ||   | hll_hashval   | hll            | hll              | hll_add_rev     |   
(8 rows)  
```  
创建聚合表  
```  
create table tbl_hll (  
  rid int2,   -- 地域id  
  ds date,    -- 日期  
  users hll   -- HLL值, 存储某个地域某天的所有UID聚合后的hll值  
);    
```  
将原始用户行为数据写入聚合表  
```  
insert into tbl_hll select rid, date(cts), hll_add_agg(hll_hash_bigint(uid)) from tbl group by 1,2;  
INSERT 0 6200  
Time: 2976.876 ms (00:02.977)  
```  
查看聚合表, 只占用了8MB左右.  
```  
postgres=# \dt+  
                                     List of relations  
 Schema |  Name   | Type  |  Owner   | Persistence | Access method |  Size   | Description   
--------+---------+-------+----------+-------------+---------------+---------+-------------  
 public | tbl     | table | postgres | unlogged    | heap          | 965 MB  |   
 public | tbl_hll | table | postgres | permanent   | heap          | 8312 kB |   
(2 rows)  
```  
近似情况对比:  
hll里有多少uid?  
```  
postgres=# select # hll_union_agg(users) from tbl_hll;   
     ?column?        
-------------------  
 9474798.879453091  
(1 row)  
Time: 47.075 ms  
```  
真实有多少uid?  
```  
postgres=# select count(distinct uid) from tbl;   
  count    
---------  
 9648563  
(1 row)  
Time: 2373.055 ms (00:02.373)  
```  
test case 1: 按地域的UV/天   
```  
select   
  rid,   
  ds,   
  # users   
from tbl_hll ;  
```  
耗时: 57.250 ms  
test case 2: 按地域的相比前一天新增的访问人数(昨天没访问, 今天访问了的)  
```  
select   
  rid,   
  ds,   
  (# (users || (lag(users) over w))) - (# (lag(users) over w))  
from tbl_hll   
window w as (partition by rid order by ds)   
order by 1,2;   
```  
耗时: 179.204 ms  
test case 3: 整体UV/天  
```  
select   
  ds,   
  # hll_union_agg(users)   
from tbl_hll  
group by ds  
order by 1;  
```  
耗时: 50.841 ms  
test case 4: 整体相比前一天新增的访问人数(昨天没访问, 今天访问了的)   
```  
with tmp as (  
  select   
    ds,   
    hll_union_agg(users) as users  
  from tbl_hll  
  group by ds  
)   
select   
  ds,   
  (# (users || (lag(users) over w))) - (# (lag(users) over w))  
from tmp   
window w as (order by ds)   
order by 1;   
```  
耗时: 51.931 ms  
test case 5: 按地域的UV/周   
```  
select   
  EXTRACT(ISOYEAR FROM ds) as isoyear,   
  EXTRACT(week FROM ds) as week,   
  rid,   
  # hll_union_agg(users)   
from tbl_hll   
group by 1,2,3;   
```  
耗时: 99.657 ms  
test case 6: 按地域的相比前一周新增的访问人数(昨天没访问, 今天访问了的)  
```  
with tmp as (  
  select   
    EXTRACT(ISOYEAR FROM ds) as isoyear,   
    EXTRACT(week FROM ds) as week,   
    rid,   
    hll_union_agg(users) as users  
  from tbl_hll   
  group by 1,2,3   
)   
select   
  isoyear,   
  week,    
  rid,   
  (# (users || (lag(users) over w))) - (# (lag(users) over w))   
from tmp   
window w as (partition by rid order by isoyear,week)   
order by 1,2,3;   
```  
耗时: 121.010 ms  
跨年的话更加复杂, 因为年初的第一周的上一周是去年的最后一周, 写SQL时不好表达, 可以加case进行处理, 或者使用epoch来计算.   
留个作业: 有兴趣的小伙伴可以修改一下SQL, 实现跨年.   
test case 7: 整体UV/周  
```  
select   
  EXTRACT(ISOYEAR FROM ds) as isoyear,   
  EXTRACT(week FROM ds) as week,   
  # hll_union_agg(users) as users  
from   
  tbl_hll   
group by 1,2  
order by 1,2;  
```  
耗时: 52.649 ms  
test case 8: 整体相比前一周新增的访问人数(昨天没访问, 今天访问了的)  
```  
with tmp as (  
  select   
    EXTRACT(ISOYEAR FROM ds) as isoyear,   
    EXTRACT(week FROM ds) as week,   
    hll_union_agg(users) as users  
  from   
    tbl_hll   
  group by 1,2  
)  
select   
  isoyear,   
  week,    
  (# (users || (lag(users) over w))) - (# (lag(users) over w))   
from tmp   
window w as (order by isoyear,week)   
order by 1,2;   
```  
耗时: 51.668 ms  
test case 9: 按地域的UV/任意滑动周   
使用函数, 输入要对比的两个窗口变量.   
```  
create or replace function get_uv_byrid_appro (  
  v_rid int2,   
  v_begin_cts1 date,   -- 窗口1的开始时间   
  v_end_cts1 date   -- 窗口1的结束时间   
) returns int8 as $$   