the conﬁgured test-cases into Android Studio IDE (AS-IDE) and
specify the relevant parameters for the developer-APIs. Second, if
a method is triggered, we then perform a stress test by further con-
ﬁguring different testing parameters (e.g., register different num-
bers of receivers and conﬁgure different parameters values in the
APIs) to trigger various conditions.
Using the AS-IDE, we were able to conﬁgure and fully test all
the 1,677 candidate risky methods by leveraging its type inference
within a month (2 hrs/day). Note that our candidate-risky-method
sifter is very effective, since all the four ASVs are identiﬁed within
the ﬁrst week of our analysis. Also, the ﬁrst two ASVs are con-
ﬁrmed within the ﬁrst batch returned by our stricter queries and
the other two ASVs are also returned very early when performing
the second batch of queries, which were also tested earlier. Also,
the second batch return about 10 times more methods than the ﬁrst
batch, but yields the same amount of ASVs, which demonstrates
that our sifter indeed returns ﬁrst the methods with high chance
of causing ASVs. Hence, we envision our effective sifter can be
extended into a generic framework to support analysis of similar
performance issue of other Android system components (e.g., the
native daemons), the Apple iOS middleware and etc.
Figure 2: One example triggering point for ASV #3
vices, which yield two unknown ASVs after further testing. In the
second batch, we issue more relaxed queries by reducing the thresh-
olds for the ﬁrst four ﬁelds and using 5 ORs relation among these
6 querying criteria. For instance, the last query in the second batch
is [(δ > 0) ∨ (γ > 10) ∨ (σ > 0) ∨ ( > 0) ∨ true ∨ true].
These relaxed queries return about 1,983 risky methods gradually,
which lead to the identiﬁcation of two new ASVs later on. We
then stopped our querying operations, because the returned meth-
ods are either too simple to cause any sufﬁciently long SS_freezing
consequence or not capable of causing the SS_shutdown conse-
quence. However, we do not claim that the criteria and heuris-
tics used here are perfect. Note that the purpose of the sifter is to
gradually reveal candidate methods with higher risk to prioritize
the cost of further analysis effort (e.g., dynamic testing). This risk
measurement idea is similar to the iterative approach proposed for
high-risk attack-surface distillation [39] and efﬁcient vulnerability-
impact ranking [58, 40]. Our current conﬁgurations capture most of
the traits in the candidate risky methods that are most likely causing
the ASV. Detailed results are shown in Section 3.2.
3.1.3 Triggering-Point Analyzer
After sifting out a set of candidate-risky methods in the relevant
system services, we want to identify their corresponding triggering
points to better assist further dynamic testing. The triggering points
are those methods that can trigger the execution of corresponding
candidate-risky methods from a third party app. Therefore, we de-
sign a triggering-point analyzer, which uses backward reachabil-
ity analysis on the constructed call graphs. As we want to ﬁnd
candidate-risky methods that can be directly triggered from any
app, when traversing the call graphs, our analyzer prunes the traces
with inter-service calls. That is, a traversal will terminate when it
identiﬁes a trace contains two methods from different system ser-
vices. Note that inter-service calls might be feasible paths too, but
they require more effort to trigger during runtime testing. This, on
the other hand, also means it is even harder to be exploited. This
pruning strategy reduces low-risk-cyclic traces among services.
Figure 2 contains one sample trace corresponding to the identi-
ﬁed triggering point (in blue) of the risky method (in red). Note that
due to the fundamental limitations of static analysis and our conser-
vative design to ﬁnd more traces statically, some of the identiﬁed
triggering points might not lead to risky method execution. Also,
since we want to obtain the direct accesses to most of the trigger-
ing points through Android APIs, we further match the returned
triggering points against the speciﬁed third-party APIs in frame-
works/base/api/current.txt from Android source code. Finally, our
triggering-point analyzer is able to statically identify triggering
android.server.wm.WMS:-performLayoutAndPlaceSurfacesLockedInner()android.server.wm.WMS:-performLayoutAndPlaceSurfacesLockedLoop()android.server.wm.WMS:-performLayoutAndPlaceSurfacesLocked()android.server.wm.WindowManagerService(WMS):-relayoutWindow()android.server.wm.Session:-relayout()android.view.IWindowSession:-relayout()Binder IPC/RPCandroid.view.ViewRootImpl:-relayoutWindow()android.view.WindowManager:-updateViewLayout()1240Table 3: Discovered new ASVs in the ActivityManagerService and WindowManagerService
ASV Risky Method in the System Service
1
2
3
4
ActivityManagerService(AMS).broadcastIntentLock()
ActivityManagerService(AMS).cleanUpApplicationRecordLocked()
WindowManagerService(WMS).performLayoutAndPlaceSurfacesLockedInner() WindowManager.addView()/updateViewLayout()
WindowManagerService(WMS).removeWindowInnerLocked()
android.os.Binder.sendDeathNotice()/...
Triggering Points
ActivityManager.send(Ordered)Broadcast(AsUser)()/...
android.os.Binder.sendDeathNotice()/...
Figure 3: The freezing-time trend of ASV #1
when different # of receivers are registered
Figure 4: The freezing-time trend of ASV #2
when cleaning up different # of receivers
Figure 5: The freezing-time trend of ASV #4
when removing different # of views
3.2 ASV Hunting Result
Our ASV-Hunter helps us identify four new ASVs in two batches
of queries (listed in Table 3), which are conﬁrmed exploitable by
any third party app. All of the ASVs have been further tested and
conﬁrmed in four different Android devices (listed in Table 2) with
Android version (4.0.4–5.0.2). Given the giant code-base of system
services, the result indicates that our candidate-risky-method sifter
can help gradually return the most risky methods that lead to ASVs
and our two-phase dynamic testing indeed helps security analysts
reduce the analysis effort.
From all the tested system services, activitymanager and win-
dowmanager are conﬁrmed vulnerable and each contains two ASVs.
Table 1 shows that these two system services are monitored by the
watchdog thread in all Android versions (v1.5-v5.1), indicating that
they are actually very essential to Android. Later, we can eas-
ily build several PoC attacks by exploiting them to cause various
threats to Android users.
Next, we discuss the discovered ASVs by focusing on their ex-
ploitation requirements and their direct consequences to the system
when exploited. Section 4 provides a more detailed threat analysis
on these ASVs with several proof-of-concept (PoC) attacks.
3.2.1 Vulnerable Message Broadcasting in AMS
One of the risky methods that are discovered by the ASV-Hunter
is the broadcastIntentLock() in the activitymanager service (AMS),
which is executed to resolve receivers and deliver the actual broad-
cast message to them. In Android, any app/service is able to broad-
cast a message to a set of speciﬁc components of apps/services that
have registered the matched action strings for the message. For
example, if a battery-status-monitoring app needs to receive mes-
sages from the powermanager service, which indicate the changes
of battery status, it needs to register a broadcast receiver with ac-
tion.battery_status_low. Both receiver registration and message
broadcasting are handled by methods in the AMS class. When
any app/service registers a receiver by calling the registerReceiver()
API stub, a Binder RPC call happens and the corresponding method
registerReceiver() in the AMS is invoked. Within the register-
Receiver(), the corresponding receiver ﬁelds (e.g., action, type,
scheme and permission) are parsed into a broadcastFilter object,
which are further added into a global object mRegisteredReceivers.
This global object includes all the dynamically registered receivers4.
The broadcastIntentLocked method is a lock-sufﬁxed method in
the activitymanager, which indicates that it can only be called when
the AMS.this lock is held. The AMS.this lock is checked by the
watchdog, so the SS_shutdown consequence can happen when the
lock is held for a duration longer than the preset timeout of this lock
in the watchdog (usually set as 1 minute). Later, we observe that
this method is indeed very complicated with several nested loops.
When a broadcast request is sent to the SS, a binder thread will
call queryIntent() to resolve a set of relevant receivers by matching
the broadcast ﬁelds against the ﬁelds of each registered receiver in
the global object mRegisteredReceivers. This process is actually
very time-consuming, as each broadcast usually contains several
ﬁelds and matching each ﬁeld to resolve the receivers is a com-
plicated task. Hence, it is actually returned by our risky method
sifter with strict queries. Our triggering-point analyzer also reports
a set of relevant triggering points to trigger this method, includ-
ing sendBroadcast, sendBroadcastAsUser, sendOrderedBroadcast
and other similar APIs stubs, which are later conﬁrmed triggerable
during our testing.
Exploitation requirements and consequences. To exploit the
ASV #1, our test units register many receivers into the global intent
resolving object, namely the mRegisteredReceivers in the AMS.
By triggering the risky method broadcastIntentLocked() from one
of the triggering points (e.g., sendBroadcast()), it can cause the
ss_freezing consequence to the whole activitymanager service.
Figure 3 shows the freezing time as a function of the number
of registered receivers on four testing devices. When invoking the
4Apps/services can register static receivers in the AndroidMani-
fest.xml ﬁle, which is actually maintained by the packagemanager
by parsing all the manifests and bookkeeping those receivers when
the system boots up. Note that all these static ones have lower pri-
ority than the same receiver types that are registered dynamically.
00.511.522.53010203040506070Number of registered receivers (in k)Time for broadcasts of receivers (in seconds)  Nexus 4Samsung S4Nexus 7Nexus S050100150010203040506070Number of registered receiversTime for cleanups of registered receivers  Nexus 4Samsung S4Nexus 7Nexus S0102030405060010203040506070Number of added viewsTime for the removals of the added views  Nexus 4Samsung S4Nexus 7Nexus S1241broadcastIntentLocked() to exploit ASV #1 with 1,500 identical re-
ceivers registered, it can cause the ss_freezing effect for about 20
seconds, during which most of the critical sections in activityman-
ager cannot be accessed to other threads. Furthermore, as most
of Android services and apps rely on the activitymanager, there
are potentially many other consequences. One scenario is that the
launcher app in the system will not be able to respond, so the user
cannot interact with the screen and the system becomes totally un-
responsive for the user. Also, since the activitymanager manages
the life cycle of apps, it cannot help any app perform any task (e.g.,
start(stop)Activity, start(stop)Service and etc.).
When triggering the broadcastIntentLocked() to exploit ASV #1
with 3,000 receivers registered in the activitymanager, it can actu-
ally cause ss_freezing for more than 60 seconds. By analyzing the
recorded logs in our ASV-Hunter, we ﬁnd that it indeed causes the
SS_shutdown consequence every time when the lock has been held
for more than 60s. This is because the watchdog keeps monitoring
the AMS.this lock, and it kills the SS process to force the system to
take a soft reboot when it cannot obtain the lock within a minute.
Note that during the experiment, we disable the watchdog bite ca-
pability, so that all the highest data points in Figures 3, 4 and 5 can
reach 70 seconds without the impact of system reboot.
3.2.2 Vulnerable Application Record Cleanup in AMS
The cleanUpApplicationRecordLocked() method is another risky
method in the AMS conﬁrmed by our ASV-Hunter as vulnerable.
After further checking, we ﬁnd that it is lock-sufﬁxed and contains
several nest loops. Since the AMS manages the life-cycle of all An-
droid apps/components, it has to remove the relevant ﬁelds from its
global object (e.g., mRegisteredReceivers) when certain app com-
ponents died. The cleanUpApplicationRecordLocked method will
invoke the AMS.removeReceiverLocked() method multiple times
when an app is killed. Within this method, the removeFilter method
of the IntentFilter object is further called to remove all the previ-
ously registered receivers. Therefore, besides matching the intent
ﬁelds, it has to match the relevant intent ﬁelds as well as removing
the corresponding registered receivers from the global object, thus
making it even more complicated than the previous risky method,
broadcastIntentLocked().
Exploitation requirements and consequences. To exploit the
ASV #2, our risky-method tester conﬁrms that one only has to write
a simple loop to dynamically register 75 receivers with tens of ﬁelds
in each receiver into the mReceiverResolver object. This can cause
the ss_freezing consequence for about 20 seconds when triggered.
Since the triggering-point of this method is the sendDeathNotice(),
when designing our testing app, we ﬁnd that it can be triggered in-
directly by calling the System.exit() to cause removal of all the pre-
viously registered receivers. Figure 4 shows different freezing time
periods caused by different numbers of registered receivers on dif-
ferent Android devices. We can observe that the trend is superliner,
which means as the number of registered receivers increases, the
freezing time will increase dramatically. To cause the SS_shutdown
consequence, one only needs to register 75 more receivers to freeze
the activitymanager service for an extra 40 seconds. The potential
direct consequences of this ASV are quite similar to that of the
ASV #1. Our further investigation ﬁnd that this ASV can be natu-
rally leveraged to design anti-removal techniques for malware.
3.2.3 Vulnerable Screen Layout Manipulation in WMS
Our risky method sifter returns the performLayoutAndPlaceSur-
facesLockedInner() method in the WMS with a strict querying cri-
teria. Later, we ﬁnd that it is a complicated method and it needs the
mWindowMap object lock before execution. The mWindowMap
object is one of the critical resources in the WMS, which contains
the WindowStates of all apps, so it is monitored by the watchdog
thread. Almost all the critical tasks of the WMS that manipulate
the screen layout need to hold this lock.
One of the direct triggering points leading to this risky method
is the windowmanager.addView() API stub. We only have to con-
ﬁgure the required permission for calling this API and then test the
exploitability of this risky method through our risky-method tester.
Exploitation requirements and consequences. We ﬁnd that
calling this method repetitively can cause continuous freezing of
the system UI. After further analyzing the internal design of this
risky method, we ﬁnd that it is a critical method for the Android
system that keeps reorganizing the screen-layout components when
changes happen. It helps calculate the layout components on the
screen and fresh the relevant view pixels by interacting with the
SurfaceFlinger service, which feeds the actual pixels to the memory
(i.e., the framebuffer). Therefore, by adding views onto the screen
or keeping modifying the screen-layout components, the perform-
LayoutAndPlaceSurfacesLockedInner() method is forced to keep
recalculating the components and refreshing the screen with the
SurfaceFlinger. This can prevent normal user’s interaction with
the system and cause ss_freezing repeatedly (around 1 second each
time). Since the mWindowMap resource is not held continuously
for 60 seconds, a watchdog bite cannot happen in this case. How-
ever, when our testing app adds around 30 tiny (almost invisible)
views on the screen, the Android userspace will be rebooted (i.e.,
zygote and the SS killed) due to a failure in the HWComposer5 of
the SurfaceFlinger. This is another form of SS_shutdown conse-
quence, which shows that the heuristics used in our hunter can help
identify risky methods with problematic design in the system.
3.2.4 Vulnerable WindowState Removal in WMS
Another vulnerable method in the WMS returned by our hunter
is the removeWindowInnerLocked() method. When triggered, this
method recursively calls itself and each recursive invocation will
further call a couple of complicated code blocks to refresh the screen.
Our triggering-point analyzer ﬁnds that it can be triggered when the
corresponding binder object in an app is removed, which means we
can use the System.exit() on the testing app itself to trigger this RPC
in the windowmanager6.
Exploitation requirements and consequences. To exploit the
ASV #4, our test app ﬁrst adds about 50 tiny views (human invisi-
ble) onto the screen.7 Later, at any critical moment, the test app can
choose to trigger the recursive call on removeWindowInnerLocked()
to remove all the previously added views. This operation holds
the lock mWindowMap of the windowmanager continuously for a
long enough period and eventually causes a watchdog bite on the
SS. The corresponding time trend is shown in Figure 5. Therefore,
this exploitation can cause both the SS_freezing and SS_shutdown
consequences. Furthermore, no further user interactions can be ac-
cepted by the system, since the window layout rendering mecha-
nism is paralyzed.
5HWComposer does several different things:
sync framework
(vsync callback), mode-setting, compositing layers together using
features of the display controller, displaying frames on the screen.
6The windowmanager uses the death recipients mechanism of An-
droid. When the app is killed while its windows are still showing,
the windowmanager will receive a death notiﬁcation callback to
clean up everything
7In this test, we temporarily ﬁxed the HWComposer vulnerability
by disabling it in the SurfaceFlinger and rebuilt the system
12423.2.5 Human Intelligence
Currently, our ASV-Hunting process still needs human intelli-
gence to understand the semantics of the tested API in order to
eventually conﬁrm the actual exploitability of ASVs via further
stress testing. For instance, we discover that by calling System.exit()
in an app/component, one can trigger the ASV #2 indirectly. Also,
the ASV #4 can only be exploited when the PixelFormat is not
set as TRANSPARENT. Furthermore, the ASV #2 can register less