title:Fast Byzantine Consensus
author:Jean-Philippe Martin and
Lorenzo Alvisi
Fast Byzantine Consensus
Jean-Philippe Martin, Lorenzo Alvisi
Department of Computer Sciences
The University of Texas at Austin
Email: {jpmartin, lorenzo}@cs.utexas.edu
Abstract
We present the ﬁrst consensus protocol that reaches
asynchronous Byzantine consensus in two communication
steps in the common case. We prove that our protocol is op-
timal in terms of both number of communication step, and
number of processes for 2-step consensus. The protocol can
be used to build a replicated state machine that requires
only three communication steps per request in the common
case.
1
Introduction
The consensus problem can be described in terms of the
actions taken by three classes of agents: proposers, who
propose values, acceptors, who together are responsible for
choosing a single proposed value, and learners, who must
learn the chosen value [12]. A single process can act as
more than one kind of agent. Consensus can be speciﬁed
using the following three safety properties and two liveness
properties:
CS1 Only a value that has been proposed may be chosen.
CS2 Only a single value may be chosen.
CS3 Only a chosen value may be learned by a correct
learner.
CL1 Some proposed value is eventually chosen.
CL2 Once a value is chosen, correct learners eventually
learn it.
Since the unearthing of the simple and practical Paxos
protocol [11], consensus, which for years had largely been
This work was supported in part by NSF CyberTrust award 0430510, an
Alfred P. Sloan Fellowhip and a grant from the Texas Advanced Technol-
ogy Program.
the focus of theoretical papers, has once again become pop-
ular with practitioners. This popularity should not be sur-
prising, given that consensus is at the core of the state ma-
chine approach [10, 19], the most general method for im-
plementing fault tolerant services in distributed systems.
Yet, many practitioners had been discouraged by the prov-
able impossibility of solving consensus deterministically in
asynchronous systems with one faulty process [6]. Paxos
offers the next best thing: while it cannot guarantee progress
in some scenarios, it always preserves the safety proper-
ties of consensus, despite asynchrony and process crashes.
More speciﬁcally, in Paxos one of the proposers is elected
leader and it communicates with the acceptors. Paxos guar-
antees progress only when the leader is unique and can com-
municate with sufﬁciently many acceptors, but it ensures
safety even with no leader or with multiple leaders.
Paxos is also attractive because it can be made very ef-
ﬁcient in gracious executions, i.e. executions where there
is a unique correct leader, all correct acceptors agree on its
identity, and the system is in a period of synchrony. Except
in pathological situations, it is reasonable to expect that gra-
cious executions will be the norm, and so it is desirable to
optimize for them. For instance, FastPaxos [1] in a gra-
cious execution requires only two communication steps1 to
reach consensus in non-Byzantine environments, matching
the lower bound formalized by Keidar and Rajsbaum [8].
Consequently, in a state machine that uses FastPaxos, once
the leader receives a client request it takes just two commu-
nication steps, in the common case, before the request can
be executed. Henceforth, we use the terms “common case”
and “gracious execution” interchangeably.
In this paper, we too focus on improving the common
case performance of Paxos, but in the Byzantine model. Re-
cent work has shown how to extend the Paxos consensus
protocol to support Byzantine fault tolerant state machine
replication. The resulting systems perform surprisingly
well: they add modest latency [2], can proactively recover
1To be precise, this bound is only met for stable intervals in which no
replica transitions between the crashed and “up” state.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:46 UTC from IEEE Xplore.  Restrictions apply. 
1
from faults [3], can make use of existing software diversity
to exploit opportunistic N-version programming [17], and
can be engineered to protect conﬁdentiality and reduce the
replication costs incurred to tolerate f faulty state machine
replicas [20].
These Byzantine Paxos protocols fall short of the orig-
inal, however, in the number of communication steps re-
quired to reach consensus in the common case. After a
client request has been received by the leader, Byzantine
Paxos needs a minimum of three additional communica-
tion steps (rather than the two required in the non-Byzantine
case) before the request can be executed2.
In this paper we make two contributions. First, we prove
that any 2-step Byzantine consensus protocol needs at least
5 f + 1 processes to tolerate f Byzantine faults. Second, we
show that this lower bound is tight by presenting a 2-step f -
tolerant Byzantine consensus protocol—Fast Byzantine (or
FaB) Paxos—that uses 5 f + 1 acceptors. In the common
case, FaB Paxos requires no expensive digital signature op-
eration. More broadly, we show that FaB Paxos requires
3 f + 2t + 1 acceptors to achieve 2-step consensus despite
t ≤ f Byzantine acceptors.
Since building a replicated state machine from consensus
adds a single communication step, FaB Paxos can be used
to build a Byzantine fault-tolerant replicated state machine
that requires only three communication steps per operation
in the common case. By comparison, Castro and Liskov’s
Practical Byzantine Fault-tolerance protocol [2] uses four
communication steps in the common case3.
For traditional implementations of the state machine ap-
proach, in which the roles of proposers, acceptors and learn-
ers are performed by the same set of machines, the ex-
tra replication required by our protocol may appear pro-
hibitively large, especially when considering the software
costs of implementing N-version programming (or oppor-
tunistic N-version programming) to eliminate correlated
Byzantine faults [17]. However, an architecture for Byzan-
tine fault tolerant state machine replication that physically
separates agreement from execution [20] makes this trade-
off look much more attractive. In this architecture, a cluster
of acceptors or agreement replicas is responsible for pro-
ducing a linearizable order of client requests, while a sep-
arate cluster of learners or execution replicas executes the
ordered requests.
Decoupling agreement from execution leads to agree-
ment replicas (i.e. acceptors) that are much simpler and
less expensive than state machine replicas used in tradi-
tional architectures—and can therefore be more liberally
used.
In particular, such acceptors replicas are cheaper
2No protocol can take fewer than two rounds to reach Byzantine con-
sensus. In fact, in a synchronous system where one process may crash, all
consensus protocols must take at least two rounds [5].
3Even with the optimization of tentative execution.
both in terms of hardware—because of reduced processing,
storage, and I/O requirements—and, especially, in terms of
software: application-independent agreement replicas can
be engineered as a generic library that may be reused across
applications, while with traditional replicas the costs of N-
version programming must be paid anew with each different
service.
This paper is organized as follows. We discuss related
work in Section 2 and, in Section 3, give a formal de-
scription of our system model. In Section 4 we prove the
lower bound on the number of processes required by 2-
step Byzantine consensus. We present f -tolerant FaB Paxos
in Section 5, and we show in Section 6 how to general-
ize FaB Paxos to tolerate t ≤ f Byzantine acceptors using
3 f +2t +1 acceptors. In Section 7 we discuss the FaB repli-
cated state machine before concluding.
2 Related Work
Consensus and state machine replication have generated
a gold mine of papers. The veins from which our work de-
rives are mainly those that originate with Lamport’s Paxos
protocol [11] and Castro and Liskov’s work on Practical
Byzantine Fault-tolerance (PBFT) [2]. In addition, the tech-
niques we use to reduce the number of communication steps
are inspired by the work on Byzantine quorum systems pi-
oneered by Malkhi and Reiter [14].
The two earlier protocols that are closest to FaB Paxos
are the FastPaxos protocol by Boichat and colleagues [1],
and Kursawe’s Optimistic asynchronous Byzantine agree-
ment [9]. Both protocols share our basic goal: to optimize
the performance of the consensus protocol when runs are,
informally speaking, well-behaved.
The most signiﬁcant difference between FastPaxos and
FaB Paxos lies in the failure model they support: in Fast-
Paxos processes can only fail by crashing, while in FaB
Paxos they can fail arbitrarily. However, FastPaxos only re-
quires 2 f + 1 acceptors, compared to the 5 f + 1 necessary
for FaB Paxos. There is a subtler difference in the con-
ditions under which FastPaxos achieves consensus in two
communication steps: FastPaxos can deliver consensus in
two communication steps during stable periods, i.e. pe-
riods where no process crashes or recovers, a majority of
processes are up, and correct processes agree on the iden-
tity of the leader. The conditions under which we achieve
gracious executions are somewhat weaker than these, in that
during gracious executions processes can fail, provided that
the leader does not fail. Also, FastPaxos does not rely on
eventual synchrony but on an eventual leader oracle; how-
ever, since we only use eventual synchrony for leader elec-
tion, the difference is superﬁcial.
In contrast to FastPaxos, Kursawe’s elegant optimistic
protocol assumes the same Byzantine failure model that
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:46 UTC from IEEE Xplore.  Restrictions apply. 
we adopt and operates with only 3 f + 1 acceptors, instead
of 5 f + 1. However, the notion of well-behaved execu-
tion is much stronger for Kursawe’s protocol than for FaB
Paxos. In particular, his optimistic protocol achieves con-
sensus in two communication steps only as long as channels
are timely and no process is faulty: a single faulty process
causes the fast optimistic agreement protocol to be perma-
nently replaced by a traditional pessimistic, and slower, im-
plementation of agreement. To be fast, FaB Paxos only re-
quires gracious executions, which are compatible with pro-
cess failures as long as there is a unique correct leader and
all correct acceptors agree on its identity.
There are also protocols that use failure detectors to com-
plete in two communication steps in some cases. The SC
protocol [18] achieves this goal when the failure detectors
make no mistake and the coordinator process does not crash.
The later FC protocol [7] achieves a similar result even in
executions where there are crashes. FaB Paxos differs from
these protocols because it can tolerate unreliable links and
Byzantine failures.
In his paper on lower bounds for asynchronous consen-
sus [13], Lamport, in his “approximate theorem” 3a, con-
jectures a bound N > 2Q + F + 2M on the minimum num-
ber N of acceptors required by 2-step Byzantine consensus,
where: (i) F is the maximum number of acceptor failures
despite which consensus liveness is ensured; (ii) M is the
maximum number of acceptor failures despite which con-
sensus safety is ensured; and (iii) Q is the maximum num-
ber of acceptor failures despite which consensus must be
2-step. Lamport’s conjecture is more general than ours—
we do not distinguish between M, F, and Q—and more
restrictive—Lamport does not allow Byzantine learners; we
do. Lamport’s conjecture does not technically hold in the
corner case where no learner can fail4. Dutta, Guerraoui
and Vukoli´c have recently derived a comprehensive proof
of Lamport’s original conjecture under the implicit assump-
tion that at least one learner may fail [4].
3 System Model
We make no assumption about the relative speed of pro-
cesses or communication links, or about the existence of
synchronized clocks. The network is unreliable: messages
can be dropped, reordered, inserted or duplicated. However,
if a message is sent inﬁnitely many times then it arrives at
its destination inﬁnitely many times. Finally, the recipient
of a message knows who the sender is. In other words, we
are using authenticated asynchronous fair links.
Following Paxos [12], we describe the behavior of FaB
Paxos in terms of the actions performed by three classes of
agents: proposers, acceptors, and learners. We assume that
4The counterexample can be found in our technical report [15].
the number n of processes in the system is large enough
to accommodate 3 f + 1 proposers, 5 f + 1 acceptors, and
3 f + 1 learners. Note that a single process may play mul-
tiple roles in the protocol. Each class may contain up to f
Byzantine faulty agents. When we consider FaB Paxos in
connection with state machine replication, we assume that
an arbitrary number of clients of the state machine can be
Byzantine. Unlike [13], we allow learners to fail in a Byzan-
tine manner.
FaB Paxos does not use digital signatures in the common
case; however, it does rely on digital signatures when elect-
ing a new leader. All acceptors have a public/private key
pair, and we assume that all proposers and acceptors know
all public keys and correct acceptors do not divulge their
private key. We also assume that Byzantine processes are
not able to subvert the cryptographic primitives.
Since it is impossible to provide both safety and live-
ness for consensus in the asynchronous model [6], we en-
sure safety at all times and only guarantee liveness during
periods of synchrony.
4 The Lower Bound
The FaB Paxos protocol requires 5 f + 1 acceptors, so at
least 5 f + 1 processes. We show that this is the optimal
number of processes for 2-step consensus. Our proof does
not distinguish between proposers, acceptors and learners
because doing so would restrict the proof to Paxos-like pro-
tocols.
We consider a system of n processes that communicate
through a fully connected network. Processes execute se-
quences of events, which can be of three types: local, send,
and deliver. We call the sequence of events executed by a
process its local history.
An execution of the protocol proceeds in asynchronous
rounds. In a round, each correct process (i) sends a message
to every other process, (ii) waits until it receives a (possibly
empty) message sent in that round from n− f distinct pro-
cesses (ignoring any extra messages), and (iii) performs a
(possibly empty) sequence of local events. We say that the
process takes a step in each round. During an execution,
the system goes through a series of conﬁgurations, where a
conﬁguration C is an n vector that stores the state of every
process.
This proof depends crucially on the notion of indistin-
guishability. The notions of view and similarity help us cap-
ture this notion precisely.
Deﬁnition Given an execution (cid:108) and a process pi, the view
of pi in (cid:108), denoted by (cid:108)|pi, is the local history of pi together
with the state of pi in the initial conﬁguration of (cid:108).
Deﬁnition Let (cid:108)1 and (cid:108)2 be two executions, and let pi be
a process which is correct in (cid:108)1 and (cid:108)2. Execution (cid:108)1 is
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:46 UTC from IEEE Xplore.  Restrictions apply. 
similar to execution (cid:108)2 with respect to pi, denoted as (cid:108)1
(cid:108)2, if (cid:108)1|pi = (cid:108)2|pi.
pi∼
If an execution (cid:108) results in all correct processes learn-
ing a value v, we say that v is the consensus value of (cid:108),
which we denote c((cid:108)). For the remainder of this section we
only consider executions that result in all correct processes
learning a value.
Lemma 1. Let (cid:108)1 and (cid:108)2 be two executions, and let pi be
pi∼ (cid:108)2, then
a process which is correct in (cid:108)1 and (cid:108)2. If (cid:108)1
c((cid:108)1) = c((cid:108)2).
Deﬁnition Let F be a subset of the processes in the system.