0x000d1228                       MOV R7, R2;  
0x000d1230  [0289] call.uni (retval0),   
0x000d1230                       JCAL 0x85ac0;
上面的call.uni是PTX指令，JCAL是硬件指令。在单步跟踪上面的
指令时，如果试图跟踪进入JCAL指令的目标函数，那么并不能跟踪进
去，无论是按F11键还是按F10键，都会单步跟踪到JCAL的下一条指
令，这与跟踪CPU的syscall指令的情况一样。
那么GPU是如何执行vprintf函数的呢？简单说，GPU会把中间结果
写到一个以FIFO（先进先出）形式组织的内存区中，然后CPU端再把中
间结果合成和输出到CUDA程序的控制台窗口。图9-16是在Visual Studio
中观察这个FIFO内存区的情景。
图9-16 在GPU代码中显示信息
在图9-16中，下方的“反汇编”窗口显示的是PTX指令，当前执行点
刚好是call.uni的下一条指令，也就是刚刚执行过vprintf。左上角是FIFO
内存区，灰色部分是刚刚执行vprintf后变化的内容。仔细观察，可以看
到printf的格式化模板内容（"[%d, %d]:\t\tValue is:%d\n",\）。右侧是内
存分配列表，可以找到FIFO内存区是列表中的第二个，其大小为1 048
832字节（可以通过cudaDeviceSetLimit调整）。
9.7.2 malloc和free
与普通C中的malloc和free类似，CUDA中提供两个类似的函数
malloc和free，供GPU上的程序动态分配和释放GPU上的内存。这两个
函数都是以系统调用的方式实现的。
它们的原型分别如下。
.extern .func (.param t1 ptr) malloc (.param t2 size)
.extern .func free (.param t1 ptr)
它们的参数和与普通C中的完全相同。
9.7.3 __assertfail
断言是常用的调试机制。在CUDA中，可以像普通C程序那样使用
assert（包含assert.h），其内部基于以下名为__assertfail的系统调用。
.extern .func __assertfail (.param t1 message, .param t1 file, .param .b32
 line, .param t1 function, .param t2 charSize)
假设在一个算核函数中增加下面这样一条assert语句。
__global__ void testKernel(int val)
{
    assert(val==0);
}
然后以如下代码启动这个算核函数。
dim3 dimGrid(2, 2000);
dim3 dimBlock(2, 3, 4);
testKernel>>(10);
因为传递的参数val为10，所以断言总是失败的。不过，当在Visual
Studio中直接执行或者以普通的调试方式（调试CPU代码）运行时，程
序可以畅通无阻地执行完毕，断言语句仿佛被忽略了。当在Nsight下调
试时，断言会失败。当执行到断言语句时，不但Nsight监视程序
（Nsight monitor）会在托盘区域弹出图9-17（a）所示的提示信息，而
且程序会自动中断。 
（a）提示信息             （b）硬件管线状态
图9-17 断言失败的提示信息和硬件管线状态
中断到调试器后，在CUDA Info窗口中从顶部的下拉列表中选择
Lanes（管线）（见图9-17（b）），在Status一列中，显示Assert的行代
表该CUDA核因为断言失败而暂停执行。
值得说明的是，在启动算核的代码中，定义每个线程块（block）
有24个线程（2×3×4），还不满一个Warp，但是GPU还会分配一个Warp
来执行，不过只使用其中的24个，余下8个处于禁止状态。因此，图9-
17（b）中从24号开始的管线显示为没有启动（Not Launched）。
因为传递的参数是10，所有线程都会遇到断言失败，所以图9-
17（a）的提示信息中表明“CUDA调试器检测到断言失败发生在24个线
程上”。
9.8 断点指令
虽然算核函数的名字中蕴含着短小精悍之意，但是在实际项目中，
其代码可能也因为各种因素会不断膨胀，变得不再简单明了。那么如何
调试算核函数呢？他山之石，可以攻玉。首先，借鉴CPU上的成熟方
法，把CPU多年积累下来的宝贵经验和成熟套路继承过来。然后，想办
法改进，在新的环境中，改正以前的局限，增加新的功能，争取青出于
蓝而胜于蓝。
断点是软件调试的一种基本手段，也是软件工程师们最熟悉、使用
最多的调试功能之一，本节便介绍Nvidia GPU的断点支持。
9.8.1 PTX的断点指令
在PTX 1.0版本中就包含了一条专门用于调试的断点指令，名叫
brkpt。
在CUDA程序中，可以非常方便地插入断点指令，只要使用前面介
绍过的嵌入式汇编语法就可以了，例如以下代码。
__global__ void
vectorAdd(const float *A, const float *B, float *C, int numElements)
{
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    asm("brkpt;");
    if (i < numElements)
    {
        C[i] = A[i] + B[i];
    }
}
这样嵌入的断点指令的效果与在普通C程序中嵌入CPU的断点指令
（x86下的INT 3或者调用DebugBreak）非常类似。
如果在Nsight调试器下启动上面的算核函数，当GPU执行到断点指
令时，会自动停止执行，中断到调试器，如图9-18所示。
在作者使用的软硬件环境下，中断到来后，代表程序计数器的执行
点指向的是断点指令的下一行。这与CPU端的行为有所不同。如第4章
所述，在CPU端，断点命中后，系统会自动把程序计数器“调整回退”到
刚刚执行过的断点指令。不过这属于细微差别，无伤大雅，读者了解其
特性后不要被误导就可以了。
图9-18 因为手工嵌入的断点指令而中断到调试器
如果在没有调试器的情况下执行上面的算核函数，那么GPU遇到断
点后会报告异常，导致程序意外终止，可以看到类似下面这样的错误消
息。
Exception condition detected on fd 424
=thread-group-exited,id="i1"
因此，使用上面的代码主要出于学习目的，在实际项目中，尽量不
要这样手工插入断点指令。为了特殊调试而插入这样的断点也要及时清
除或通过条件编译进行控制，比如写成下面这样。
#ifdef ADV_DEBUG
    asm("brkpt;");
#endif
这样，当需要特别调试时，只要在编译选项中增加ADV_DEBUG符
号或者在代码中增加#define ADV_DEBUG就可以了。
9.8.2 硬件的断点指令
前面介绍过，PTX 指令是中间指令，并不是GPU硬件的指令。那么
GPU硬件的断点指令是什么呢？
在Nsight调试器中，调出“反汇编”窗口（在菜单栏中选择“调
试”→“窗口”→“反汇编”），查看上面手工嵌入的PTX指令对应的SASS
指令，便看到了硬件的断点指令（见图9-19）。
图9-19 在“反汇编”窗口中查看硬件的断点指令
从图9-19可以清楚地看出，手工嵌入的brkpt指令（属于PTX指令
集）对应的硬件指令为BPT.TRAP 0x1，特别摘录的对应关系如下。
    asm("brkpt;");
0x000cf950  [0304] tmp15:  
0x000cf950  [0307] brkpt;  
0x000cf950                       BPT.TRAP 0x1;
在前面介绍硬件指令集时，细心的读者就会看到在指令列表中有一
条断点指令，名叫BPT。现在看来，BPT只是主操作符，它至少还支持
后缀.TRAP和操作数1。或许它还支持其他操作数，但是官方的公开资
料里对此讳莫如深。
9.9 Nsight的断点功能
Nsight是Nvidia为集成开发环境（IDE）开发的一套插件，目前支持
Visual Studio和Eclipse两大著名的IDE。本节以Visual Studio版本为例，
简要介绍Nsight的断点功能。
9.9.1 源代码断点
在使用Nsight调试时，可以使用多种方式在算核函数的源代码中设
置断点，与在普通C代码中设置断点的方法几乎一样。通常，首先将光
标移动到要设置断点的代码行，然后在菜单栏中选择“调试”→“切换断
点”并按F9键，或者单击源代码窗口左侧边缘附近的断点状态图标区
（在行号左侧一列）。
值得说明的是，如果对源代码行设置断点失败，那么请检查编译选
项中是否启用了“产生GPU 调试符号”选项（“项目属性”→ CUDA C/C++
→ Device → Generate GPU Debug Information）（即-G选项）（9.11节将
详细介绍）。
9.9.2 函数断点
Nsight还支持函数端点，设置方法也有多种。可以使用Visual Studio
的标准界面（在菜单栏中选择“调试”→“新建断点”→“函数断点”），也
可以使用Nsight的扩展界面。在CUDA Info窗口中设置断点，基本步骤
是打开一个CUDA Info窗口（在菜单栏中选择Nsight→Windows→CUDA
Info），选择Functions视图（见图9-20左下角部分），然后在Functions
列表中选择要设置断点的函数并右击，从上下文菜单中选择Set
Breakpoint。
值得说明的是，当函数断点命中时，中断的位置是在函数名那一
行，如图9-20所示。
观察图9-20右侧的“反汇编”窗口，可以看到此时的指令是在准备参
数，还没有进入算核函数的函数体。所以函数断点命中的时机要比设在
函数内第1行的断点要早，这可以用来调试GPU加载算核函数参数的过
程。
图9-20 当函数断点命中时的场景
9.9.3 根据线程组和线程编号设置条件断点
为了可以精确中断到调试者最感兴趣的场景，Nsight具有丰富的条
件断点支持，可以像调试普通C程序那样给断点设置条件。除了使用普
通的变量之外，条件中也可以使用CUDA的内置变量。图9-21显示的就
是条件断点threadIdx.x == 200命中时的场景。
图9-21 条件断点命中
观察图9-21所示的“局部变量”窗口，可以看到当前线程的编号为
{200, 0, 0}，线程组编号为{58, 0, 0}。右上角的CUDA Info窗口显示了当
前Warp中的32个执行管线（lane）的信息，灰色箭头所指的8号管线执
行的正是当前命中断点的线程。
为了更方便地针对线程组和线程编号设置断点，Nsight还定义了 4
个宏，比如threadIdx.x == 200可以使用宏简写为@threadIdx(200,
0, 0)。表9-8列出了这4个宏的详细信息。
表9-8 方便设置条件断点的宏
宏
展  开
说  明
@threadIdx(x,
y, z)
(threadIdx.x == (x) && threadIdx.y ==
(y) && threadIdx.z == (z))
必须使用十进制数
@threadIdx(#N)
( (((threadIdx.z * blockDim.y) +
threadIdx.y) * blockDim.x + threadIdx.x)
== (N) )
根据平坦线程号设置条
件，必须使用十进制数
@blockIdx(x, y,
z)
(blockIdx.x == (x) && blockIdx.y == (y)
&& blockIdx.z == (z))
必须使用十进制数
@blockIdx(#N)
( (((blockIdx.z * gridDim.y) +
blockIdx.y) * gridDim.x + blockIdx.x) ==
(N) )
根据平坦的线程块号设
置条件，必须使用十进
制数
在Nsight内部，当执行条件断点操作时，位于Visual Studio进程内的
插件模块会通过网络通信（Socket）把条件信息送给Nsight的监视器进
程（进程名为Nsight.Monitor.exe）。如果设置的条件无效，那么监视器
进程会弹出类似图9-22所示的错误提示。
图9-22 当设置无效条件断点时的错误提示
对应地，在Visual Studio的“输出”窗口中，也有类似的错误消息，
比如以下消息。
Invalid breakpoint condition specified. 