### Flexible Learning Tool

The third key feature of our approach is its exceptional flexibility as a learning tool. An extracted keyboard controller can be quickly and easily modified to respond to a variety of inexpensive industrial sensors and switches, as well as custom concept switches created by students. Simple input hardware, such as keyboards and mice, do not require special software drivers or specific computer ports, making them compatible with most computers and operating systems. Using standard hookup wire and basic soldering tools, students can integrate controllers, sensors, and switches into models built from wood, metal, plastic, glass, textile, and other materials. These models can then be connected to computer hardware via USB, serving as multi-sensory input devices for Digital Signal Processing (DSP) and other software applications.

### Software Sketching Materials

We also relied on software sketching materials. Students used Macromedia Flash MX2004 and ActionScript to capture data from input devices (such as keypresses and cursor coordinates), script for DSP, and create audio and visual interface elements. Flash files (SWFs) can be published on the web, linked to other websites and data sources, and receive user input from experimental physical interfaces. Additionally, Flash can be used to publish web-based design documentation. Flash is widely installed in art and design schools, has a large user base, and is the subject of numerous instructional books and websites. ActionScript, an accessible, versatile, and powerful object-oriented scripting language, is ideal for experimentation.

**Figure 2. Modifying a Keyboard Controller (Wired and Wireless)**

These were the primary tools we used in the original version of the course: sketch-modeling with discarded hardware and software sketching with Flash. We chose these tools because they were accessible, easy to use, and environmentally sound. They allowed students to work directly with the media, fostering sensitivity to its potential uses. While these tools were helpful, they had limitations. We could build multi-sensory physical input devices to control content on screens, speakers, and the web, but the Flash Player restricted the ways in which data could be received from and sent to hardware. Additionally, a modified keyboard provided only binary input (e.g., "A" key is "down" or "A" key is "up"). We wanted to offer students more technological options and design possibilities.

**Figure 3. Hardware and Software System Using a Modified Keyboard Controller**

### Exploring Alternative Solutions

We began testing popular software solutions. Cycling 74’s Max/MSP offered greater flexibility in input and output data channels and easily connected with popular analog and digital (A/D) converters (Teleo, iCube, etc.). However, we ultimately stayed with Flash due to its accessibility to designers. Max, and especially MSP, was originally intended for computer music applications. Flash, on the other hand, has a free and ubiquitous player and an internationally standardized object-oriented scripting language—a subset of ECMAScript (ISO/IEC 16262). This makes it an excellent starting point for students eager to learn other programming and scripting languages. Flash can be used for drawing, typesetting, animating, controlling audio and video playback and effects, streaming audio, video, and vector graphics. It facilitates easy web publishing, integrates seamlessly with web applications, comes with a built-in XML object and socket, and features pre-built components that allow for rapid prototyping. Most importantly, it was already installed on our students’ laptops.

### Connecting Flash with A/D Converters

One major challenge was connecting Flash with popular A/D converters. We worked with our consulting firm to explore solutions. Our first attempt involved an elaborate system with analog sensors, Teleo Analog In, Power and USB modules, a computer with Linux, Apache, JRUN, and a Java-based XML server (FLOSC) installed, a Max Patch, and a Flash SWF that could send and receive XML and included graphical buttons and sliders. Surprisingly, it worked, allowing us to control an animation on a website from an analog bend sensor and to control an electrical motor by dragging a slider in the Flash movie. However, this setup was overly complex and inefficient.

### Streamlining the Process

In the next stage of development, we aimed to streamline the signal flow between analog sensors (bend, touch, heat, motion, proximity, etc.) and a Flash Movie, and between a Flash Movie and electrical devices (motors, lights, thermostats, heating elements, etc.). Our design consultancy developed NADA, a platform-independent application in Java, to enable more direct communication between A/D converters and Flash. This software is currently being used in our courses and at several international schools.

**Figure 4. Hardware and Software System Using Analog and Digital Converters**

### Results

Since the course was first offered in 2001, we have seen significant changes in its success and our own. The course has been over-enrolled, with a waiting list exceeding three times the classroom capacity. Past students enroll in courses with the same faculty. A short video about the course methodology has been published. Other departments at RISD have agreed to partner with the industrial design department to offer a similar course. We have been invited to lecture at other institutions about the topics covered in the course, and Tellart has received contracts to apply the course’s methods and tools to projects for clients.

None of these outcomes were explicit goals of the course, but they suggest that the course offers a meaningful and practical approach to Human-Computer Interaction (HCI) issues in a design studio and beyond. The course aims to allow students to sketch in an unwieldy medium, better equipping them to design solutions for specific human needs. In essence, we sought to humanize the studio, the student, the technology, and the design process.

### Measuring Success

Measuring the course's success is not straightforward. We can point to our students' projects, many of which demonstrated a remarkable awareness of human use and environmental impact, or exceptional skill in handling materials and developing concepts. We can also highlight our course materials, which we hope became more helpful with each new session. However, we would expect to have some talented students and to provide every student with the most useful supporting materials.

Perhaps the best way to measure the course's outcome is to discuss what we observed in the studio. We saw students sketch with actual hardware and software, a process that helped them develop a vocabulary bridging the gap between designers and computer engineers. We introduced them to specific technologies at specific times, easing them into the science of their work. We developed demonstrations, exercises, and assignments using computer hardware and software, following a studio practice and design process they were already familiar with. We worked with each new technology ourselves, adapting it to the needs of each new class of students. We made the engineering side of HCI design seem familiar, personal, and possible.

### Designing Robust Products

We observed students designing more robust products because they understood their media at a deeper, more detailed level. They went beyond the color and shape of a plastic housing, examining hardware components and software logic to understand the qualities and capabilities of digital technologies. This understanding enabled them to design more sensitively shaped housings and human interfaces. They knew which questions to ask: Will the product require a lot of electrical power? Will it be heavy, or could it be light enough to be handheld? Will it cost a million dollars to make something that could reasonably be sold for one dollar? Will it require hard wiring to a wall outlet or to Ethernet? If it’s wireless, what other components will be required? All these questions affect the form and use of a product. With a solid understanding and the associated vocabulary, students can more effectively communicate with engineers and develop more useful and robust products. Form truly can follow function.

### Sensitivity to Human-Computer Interaction

Finally, we saw students, equipped with a basic understanding of computer programming, research and design with sensitivity to both cognitive and computational aspects of human-computer interaction. They learned basic principles like conditional logic: if this button is pressed, then turn on this light bulb; if this button is pressed in combination with another button, then play this video and turn on the light bulb. This knowledge allowed them to design interactive scenes: when I input this information to the computer, it will interpret that information in this way and output this (these) response(s). Students wrote text narratives and physically acted out such scenes in class, a process that allowed them to develop concepts and make further discoveries through working and playing with coding sketch models.

In the end, students gained a clearer understanding of the design process. The course removed several layers of abstraction between the process and the product—between designing an interactive product and seeing it manifested as an object in a human environment. It also removed several dense layers of engineering study, technical knowledge that often prevents students from clearly seeing the human experience of the product. Students explored the cognitive, social, technological, and economic factors involved in designing digital products. They did this through experience, with a sound introduction to engineering and programming, and always with an awareness of human need.

### Continuing the Work

Tellart, through its Sketchtools Division (sketchtools.com), now offers NADA software and physical interface design workshops to schools and professionals. Our goal is to continue bridging design and engineering disciplines, providing students and professionals with new means for thinking (sketching), designing, and engaging their audiences with articulate and meaningful forms.

### Acknowledgements

Special thanks to:
- Krzysztof Lenk for inspiring me to teach
- Mischa Schaub of Hyperwerk for initially inspiring this work
- Andreas Krach for helping me hack my first keyboard
- RISD for encouraging and supporting this course development
- Tellart for allowing us to do what we love at work
- Nick Scappaticci, my trusty Tellart co-founder
- Brian Hinch for leading the development of NADA and making the diagrams for this paper
- Jasper Speicher for all the electronics lessons and teaching collaboration
- Ryan Scott Bardsley for believing in the potential of bridging design and engineering and leading the COMETS project with RISD
- Rob Morris for his editorial help in making this paper coherent
- All of our students for their bravery, work, and inspiration

### References

- McCullough, M. (1996). *Abstracting Craft: The Practiced Digital Hand*, Reprint Edition. Cambridge: MIT Press.
- Cooper, A. (1999). *The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity*, 1st Edition. Indianapolis: SAMS.
- Laurel, B. (1990). *The Art of Human-Computer Interface Design*. Reading: Addison-Wesley Publishing Company.
- Tilley, A.R., Henry Dreyfuss Associates (2001). *The Measure of Man and Woman: Human Factors in Design*. Indianapolis: John Wiley & Sons.
- Sketchtools (NADA). http://www.sketchtools.com
- Tellart. http://www.tellart.com
- Rhode Island School of Design. http://www.risd.edu
- Macromedia Flash MX2004 and ActionScript. http://www.macromedia.com
- Making Things (Teleo). http://www.makingthings.com
- Cycling 74. http://www.cycling74.com
- Infusion Systems. http://www.infusionsystems.com
- Open Sound Control (OSC). http://www.cnmat.berkeley.edu/OpenSoundControl
- FLOSC. http://www.benchun.net/flosc
- Umeå Institute of Design. http://www.dh.umu.se
- Simulation Group, Center for Integration of Medicine and Innovative Technology, Massachusetts General Hospital. http://www.medicalsim.org