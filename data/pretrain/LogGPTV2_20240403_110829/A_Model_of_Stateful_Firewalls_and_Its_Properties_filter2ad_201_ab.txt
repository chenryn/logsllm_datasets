d, t
such that p matches this stateful rule (but p does not match
any other stateful rules listed before this rule), the tag value
of this packet p is changed from its initial value 0 to the new
value x.
The stateless section of a ﬁrewall also consists a se-
quence of rules where each rule is called a stateless rule.
A stateless rule is of the form
F1 ∈ S1 ∧ ··· ∧ Fd ∈ Sd ∧ tag ∈ St → (cid:4)decision(cid:5)
where each Si is a nonempty subset of the domain of Fi
for 0 ≤ i ≤ d, and St is a nonempty subset of the do-
main of the tag ﬁeld, and the (cid:4)decision(cid:5) is “accept”, or
“accept; insert”, or “discard”. For each i (1 ≤ i ≤ d),
if Si = D(Fi), we can replace Fi ∈ Si by Fi ∈ all, or
remove the conjunct Fi ∈ D(Fi) from the rule. A packet
(p1,··· , pd) with tag value t matches the above rule iff the
condition p1 ∈ S1∧···∧pd ∈ Sd∧t ∈ St holds. The mean-
ing of this stateless rule is as follows. Given a packet p such
that p matches this stateless rule (but p does not match any
other stateless rules listed before this rule), the decision for
this packet is executed. If the decision is “accept”, then
the packet p is allowed to proceed to its destination. If the
decision is “accept; insert”, then the packet p is allowed
to proceed to its destination and additionally packet p (to-
gether with its tag value) is inserted into the state of the
ﬁrewall. If the decision is “discard”, then the packet p is
discarded by the ﬁrewall.
In the ﬁrewall example in Figure 1, we assume that each
packet has the following seven ﬁelds. For simplicity, in this
paper we assume that each packet has a ﬁeld containing the
identiﬁcation of the network interface on which a packet
arrives. Figure 2 shows this ﬁrewall speciﬁed using our
model.
name meaning
Interface
I
Source IP address
S
Destination IP address
D
Protocol Type
P
T
echo packet type
echo packet ID
ID
SN
echo packet sequence number
domain
[0, 1]
[0, 232)
[0, 232)
{tcp, udp, icmp}
{ping, pong}
[0, 216)
[0, 216)
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Michigan State University. Downloaded on October 21, 2009 at 22:54 from IEEE Xplore.  Restrictions apply. 
3
In this ﬁrewall example, the stateful section consists of
one rule: I ∈ {0} ∧ P ∈ {icmp} ∧ T ∈ {pong} ∧ S =
(cid:1) ∧ D = S
(cid:1) ∧ ID = ID(cid:1) ∧ SN = SN (cid:1) → tag := 1. The
D
meaning of this rule is as follows: if a packet p is an incom-
ing pong packet (indicated by I ∈ {0}∧P ∈ {icmp}∧T ∈
{pong}), and there exists a packet p
(cid:1) in the state such that
the following four conditions hold:
1. the source address of p equals the destination address
(cid:1) (denoted S = D
(cid:1)),
of p
2. the destination address of p equals the source address
(cid:1) (denoted D = S
(cid:1)),
of p
3. the ID of p equals the ID of p
(cid:1) (denoted ID = ID(cid:1)
),
4. the sequence number of p equals the sequence number
(cid:1) (denoted SN = SN (cid:1)
),
of p
then the tag ﬁeld of packet p is assigned 1; otherwise the tag
ﬁeld of packet p retains its initial value 0. In this ﬁrewall
example, the stateless section consists of ﬁve rules whose
function is to map every packet with a certain tag value to
one of predeﬁned decisions. Note that the meaning of the
rule r1 is as follows. Given a packet over the seven ﬁelds
(namely I, S, D, P, T, ID, SN), if the packet matches rule r1,
then the ﬁrewall allows this packet to proceed to its desti-
nation and additionally the packet (which is a tuple over the
seven ﬁelds) together with its tag value is inserted into the
state of the ﬁrewall.
Note that when a ﬁrewall inserts a packet (p1,··· , pd)
with a tag value into the state of the ﬁrewall, the ﬁrewall
may not need to insert all the d ﬁelds of the packet. For
example, considering the above ﬁrewall example in Figure
2, its stateful section consists of one rule I ∈ {0} ∧ P ∈
{icmp} ∧ T ∈ {pong} ∧ S = D
(cid:1) ∧ ID =
ID(cid:1)∧SN = SN (cid:1) → tag := 1. This rule only examines four
ﬁelds of the packets in the state: S, D, ID and SN. Therefore,
instead of inserting a packet of all the seven ﬁelds (namely I,
S, D, P, T, ID, SN) together with the tag value of the packet
into the state, we only need to insert a tuple over the above
four ﬁelds of S, D, ID and SN.
(cid:1) ∧ D = S
Two stateless rules conﬂict iff there exists at least one
packet that matches both rules and the two rules have dif-
ferent decisions. For example, rule r1 and rule r2 in the
stateless section of the ﬁrewall in Figure 2 conﬂict. Two
stateful rules conﬂict iff in a reachable state of the ﬁrewall
there exists at least one packet that matches both rules and
the two rules have different decisions. In our ﬁrewall model,
for both the stateful section and the stateless section, we
follow the convention that stateless ﬁrewalls use to resolve
conﬂicts: a packet is mapped to the decision of the ﬁrst rule
that the packet matches.
A set of rules is comprehensive iff for any packet there is
at least one rule in the set that the packet matches. The set
of all the rules in the stateless section of a ﬁrewall must be
comprehensive because each packet needs to be mapped to
a decision. Note that the set of all the rules in the stateful
section of a ﬁrewall does not need to be comprehensive.
This is because the function of a stateful section is to assign
nonzero values to the tag ﬁelds of some packets, but not all
packets.
Given a packet to a ﬁrewall speciﬁed using our model,
Figure 3 describes how the ﬁrewall processes this packet.
Step 1. Checking in the stateful section:
If P (F1,··· , Fd, F
is the ﬁrst stateful rule that the given packet matches
d, tag(cid:1)) → tag := x
(cid:1)
1,··· , F
(cid:1)
then the tag of the packet is assigned value x;
else the tag of the packet retains value 0.
Step 2. Checking in the stateless section:
If F1 ∈ S1 ∧ ··· ∧ Fd ∈ Sd ∧ tag ∈ St → (cid:4)decision(cid:5)
is the ﬁrst stateless rule that the given packet matches
then the (cid:4)decision(cid:5) is executed for the packet.
Figure 3. Processing a given packet
By separating a ﬁrewall into a stateful section and a state-
less section, we can inherit existing research results of state-
less ﬁrewalls because a stateless section alone is in fact a
full-ﬂedged stateless ﬁrewall. For example, existing state-
less ﬁrewall design methods [2,7,8,8], and stateless ﬁrewall
analysis methods [1,6,9,11,12,16], are still applicable to the
design and analysis of a stateless section. In addition, ex-
isting packet classiﬁcation algorithms for stateless ﬁrewalls
can still be used to map a packet with a certain tag value to
the ﬁrst rule that the packet matches in the stateless section.
3 Firewall Examples
In this section, we show two more examples of stateful
ﬁrewalls.
3.1 Example I: Tracking Outgoing Packets
Suppose that the requirements for the ﬁrewall in Figure
1 are as follows:
1. Any packet
from the outside malicious domain
192.168.0.0/16 should be discarded.
2. The mail server, with IP address 192.1.2.3, should be
able to send and receive emails, but non-email trafﬁc
is not allowed to proceed to the mail server.
4
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Michigan State University. Downloaded on October 21, 2009 at 22:54 from IEEE Xplore.  Restrictions apply. 
(cid:1) ∧ P = P (cid:1) → tag := 1
Stateful Section:
(cid:1) ∧ DP = SP
R1 :I ∈ {0} ∧ S = D(cid:1) ∧ D = S(cid:1) ∧ SP = DP
Stateless Section:
∧DP ∈ all ∧P ∈ all ∧tag ∈ all → accept
∧D ∈ all
r1 : I ∈ {1} ∧ S ∈ {192.1.2.3}
∧DP ∈ all ∧P ∈ all ∧tag ∈ all → accept; insert
∧D ∈ all
r2 : I ∈ {1} ∧ S ∈ all
r3 : I ∈ {0} ∧ S ∈ [192.168.0.0, 192.168.255.255]∧D ∈ all
∧DP ∈ all ∧P ∈ all ∧tag ∈ all → discard
∧D ∈ {192.1.2.3}∧DP ∈ {25}∧P ∈ {tcp}∧tag ∈ all → accept
r4 : I ∈ {0} ∧ S ∈ all
∧D ∈ {192.1.2.3}∧DP ∈ all ∧P ∈ all ∧tag ∈ all → discard
r5 : I ∈ {0} ∧ S ∈ all
r6 : I ∈ {0} ∧ S ∈ all
∧D ∈ all
∧DP ∈ all ∧P ∈ all ∧tag ∈ {1}→ accept
r7 : I ∈ {0} ∧ S ∈ all
∧D ∈ all
∧DP ∈ all ∧P ∈ all ∧tag ∈ {0}→ discard
Figure 4. Tracking outgoing packets
3. Any packet from a remote host to a local host, which
is not the mail server, is discarded unless the local host
has already sent a packet to the remote host earlier. In
other words, the communication between a local host
and a remote host can only be initiated by the local
host.
In this example, we assume that each packet has six
ﬁelds. Four of them have been discussed earlier: I (inter-
face), S (source IP address), D (destination IP address), and
P (protocol type). The remaining two are as follows:
name meaning
SP
DP
Source Port
Destination Port
domain
[0, 216)
[0, 216)
Figure 4 shows the speciﬁcation of this ﬁrewall. Its state-
ful section consists of one rule I ∈ {0} ∧ S = D
(cid:1) ∧ D =
(cid:1) → tag := 1. The
(cid:1) ∧ SP = DP(cid:1) ∧ DP = SP(cid:1) ∧ P = P
S
meaning of this rule is as follows: if a packet p is an incom-
ing packet (denoted I ∈ {0}), and there exists a packet p
(cid:1)
in the state such that the following ﬁve conditions hold:
1. the source address of p equals the destination address
(cid:1) (denoted S = D
(cid:1)),
of p
2. the destination address of p equals the source address
(cid:1) (denoted D = S
(cid:1)),
of p
3. the source port number of p equals the destination port
number of p
(cid:1) (denoted SP = DP(cid:1)
),
4. the destination port number of p equals the source port
number of p
(cid:1) (denoted DP = SP(cid:1)
),
5. the protocol type of p equals that of p
(cid:1)),
P
(cid:1) (denoted P =
then the tag ﬁeld of packet p is assigned 1; otherwise the tag
ﬁeld of packet p retains value 0.
The stateless section of this ﬁrewall consists of seven
rules from r1 to r7. Note that the meaning of rule r2 is as
follows. Any outgoing packet from a local host other than
5
the mail server is allowed to proceed to its destination, and
additionally this packet, which is a tuple of the six ﬁelds
(namely I, S, D, P, SP, DP), together with its tag value, is
inserted into the state of the ﬁrewall. Since the stateful sec-
tion of this ﬁrewall only examines the ﬁve ﬁelds (namely S,
D, P, SP, and DP) of the packets in the state of this ﬁrewall,
we only need to insert these ﬁve ﬁelds of a packet into the
state.
3.2 Example II: Tracking FTP Ptotocol
In this section, we show an example of a ﬁrewall that
tracks the FTP protocol. File Transfer Protocol (FTP) [15]
is an application protocol that is used to transfer ﬁles be-
tween two hosts. We assume that the ﬁrewall in Figure 1 al-
lows any local host to initiate an FTP connection to a remote
host, but any remote host cannot initiate an FTP connection
to a local host. For simplicity, we assume that non-FTP
trafﬁc is discarded.
What complicates the tracking of FTP is its dual-
connection feature. FTP uses two TCP connections to trans-
fer ﬁles between two hosts: a control connection and a data
connection. When a client wants to connect to a remote
FTP server, the client uses one of its available port num-
bers, say x, to connect to the server on the well-known port
21. This connection, between the client’s port x and the
server’s port 21, is called the control connection. FTP uses
the control connection to transfer FTP commands such as