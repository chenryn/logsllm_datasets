    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要使用 Python 3 脚本，请在 SPEC 文件中的 `install -m`{.literal}
下添加以下行：
``` literallayout
%post -p /usr/bin/python3
```
要使用 Lua 脚本，请在 SPEC 文件中的 `install -m`{.literal}
下添加以下行：
``` literallayout
%post -p 
```
这样，您可以在 SPEC 文件中指定任何解释程序。
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#rpm-conditionals_advanced-topics}RPM 条件 {.title}
:::
RPM 条件句启用包含 SPEC 文件不同部分的条件。
条件包含通常涉及：
::: itemizedlist
-   特定于架构的部分
-   特定于操作系统的部分
-   不同操作系统版本间的兼容性问题
-   宏的存在和定义
:::
::: section
::: titlepage
## []{#advanced-topics.html#rpm-conditionals-syntax_rpm-conditionals}RPM 条件语法 {.title}
:::
RPM 条件使用以下语法：
[*如果表达式为*]{.emphasis} true，则执行一些操作：
``` literallayout
%if expression
…​
%endif
```
[*如果表达式为*]{.emphasis}
true，则执行一些操作（在其他情况下）执行另一个操作：
``` literallayout
%if expression
…​
%else
…​
%endif
```
:::
::: section
::: titlepage
## []{#advanced-topics.html#rpm-conditionals-examples_rpm-conditionals}RPM 条件示例 {.title}
:::
本节提供了多个 RPM 条件示例。
::: section
::: titlepage
### []{#advanced-topics.html#the_if_conditionals}%if 条件 {.title}
:::
::: example
[]{#advanced-topics.html#idm139867789970704}
**例 4.3. 使用 %if 条件来处理 Red Hat Enterprise Linux 8
和其他操作系统之间的兼容性**
::: example-contents
``` literallayout
%if 0%{?rhel} == 8
sed -i '/AS_FUNCTION_DESCRIBE/ s/^/#/' configure.in
sed -i '/AS_FUNCTION_DESCRIBE/ s/^/#/' acinclude.m4
%endif
```
:::
:::
在支持 AS_FUNCTION_DESCRIBE 宏方面，此条件处理 RHEL 8
与其他操作系统之间的兼容性。如果为 RHEL 构建软件包，会定义
`%rhel`{.literal} 宏，并将其扩展到 RHEL 版本。如果它的值是 8，这意味着为
RHEL 8 构建软件包，那么从 autoconfig 脚本中删除对 AS_FUNCTION_DESCRIBE
的引用（它不被 RHEL 8 支持）。
::: example
[]{#advanced-topics.html#idm139867803014096}
**例 4.4. 使用 %if 条件来处理宏定义**
::: example-contents
``` literallayout
%define ruby_archive %{name}-%{ruby_version}
%if 0%{?milestone:1}%{?revision:1} != 0
%define ruby_archive %{ruby_archive}-%{?milestone}%{?!milestone:%{?revision:r%{revision}}}
%endif
```
:::
:::
此条件处理宏的定义。如果设置了 `%milestone`{.literal} 或
`%revision`{.literal} 宏，定义上游 tarball 的名称的
`%ruby_archive`{.literal} 宏会被重新定义。
:::
::: section
::: titlepage
### []{#advanced-topics.html#specialized_variants_of_if_conditionals}%if 条件的专用变体 {.title}
:::
`%ifarch`{.literal} 条件、`%ifnarch`{.literal} 条件和 `%ifos`{.literal}
条件是 `%if`{.literal}
条件的专用变体。这些变体经常被使用，因此它们有自己的宏。
::: section
::: titlepage
#### []{#advanced-topics.html#the_ifarch_conditional}%ifarch 条件 {.title}
:::
`%ifarch`{.literal} 条件用于启动特定于架构的 SPEC
文件块。它后跟一个或多个架构指定符，各自用逗号或空格分隔。
::: example
[]{#advanced-topics.html#idm139867801588432}
**例 4.5. 使用 %ifarch 条件的示例**
::: example-contents
``` literallayout
%ifarch i386 sparc
…​
%endif
```
:::
:::
`%ifarch`{.literal} 和 `%endif`{.literal} 之间的 SPEC
文件的所有内容都只在 32 位 AMD 和 Intel 架构或基于 Sun SPARC
的系统中处理。
:::
::: section
::: titlepage
#### []{#advanced-topics.html#the_ifnarch_conditional}%ifnarch 条件 {.title}
:::
`%ifnarch`{.literal} 条件具有反向逻辑，而不是 `%ifarch`{.literal} 条件。
::: example
[]{#advanced-topics.html#idm139867690294272}
**例 4.6. 使用 %ifnarch 条件的示例**
::: example-contents
``` literallayout
%ifnarch alpha
…​
%endif
```
:::
:::
只有在基于 Digital Alpha/AXP 的系统中没有完成时，才会处理
`%ifnarch`{.literal} 和 `%endif`{.literal} 之间的 SPEC 文件的所有内容。
:::
::: section
::: titlepage
#### []{#advanced-topics.html#the_ifos_conditional}%ifos 条件 {.title}
:::
`%ifos`{.literal}
条件用于根据构建的操作系统控制处理。其后可以跟着一个或多个操作系统名称。
::: example
[]{#advanced-topics.html#idm139867802571872}
**例 4.7. 使用 %ifos 条件的示例**
::: example-contents
``` literallayout
%ifos linux
…​
%endif
```
:::
:::
只有在 Linux 系统中完成构建时，才会处理 `%ifos`{.literal} 和
`%endif`{.literal} 之间的所有 SPEC 文件内容。
:::
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#assembly_packaging-python-3-rpms_advanced-topics}打包 Python 3 RPM {.title}
:::
大多数 Python 项目使用 Setuptools 进行打包，并在 `setup.py`{.literal}
文件中定义软件包信息。有关 Setuptools 打包的详情，请参考 [Setuptools
文档](https://setuptools.readthedocs.io/en/latest/){.link}。
您还可以将您的 Python 项目打包打包到 RPM 软件包中，与 Setuptools
打包相比具有以下优势：
::: itemizedlist
-   软件包与其他 RPM 的依赖关系规范（甚至非 Python）
-   加密签名
    通过加密签名，可以使用操作系统的其他部分对 RPM
    软件包的内容进行验证、集成和测试。
:::
::: section
::: titlepage
## []{#advanced-topics.html#con_spec-file-description-for-a-python-package_assembly_packaging-python-3-rpms}Python 软件包的 SPEC 文件描述 {.title}
:::
SPEC 文件包含 `rpmbuild`{.literal} 实用程序用来构建 RPM
的说明。这些说明包含在一系列部分中。SPEC
文件包含定义这些部分的两个主要部分：
::: itemizedlist
-   强制（包含一系列在正文中使用的元数据项）
-   正文（包含说明的主要部分）
:::
与非 Python RPM SPEC 文件相比，Python 项目的 RPM SPEC
文件有一些具体内容。最值得注意的是，Python 库的任何 RPM
软件包的名称都必须包含用于确定版本的前缀，例如： `python3`{.literal}
(Python 3.6)、`python38`{.literal} (Python 3.8)或 `python39`{.literal} (
Python 3.9)。
下面的 SPEC [**文件示例显示了 `python3-detox`{.literal}
软件包的其他具体信息**]{.strong}。有关此类细节的描述，请参见以下示例注释。
``` programlisting
%global modname detox                                                           
Name:           python3-detox                                                   
Version:        0.12
Release:        4%{?dist}
Summary:        Distributing activities of the tox tool
License:        MIT
URL:            https://pypi.io/project/detox
Source0:        https://pypi.io/packages/source/d/%{modname}/%{modname}-%{version}.tar.gz
BuildArch:      noarch
BuildRequires:  python36-devel                                                  
BuildRequires:  python3-setuptools
BuildRequires:  python36-rpm-macros
BuildRequires:  python3-six
BuildRequires:  python3-tox
BuildRequires:  python3-py
BuildRequires:  python3-eventlet
%?python_enable_dependency_generator                                            
%description
Detox is the distributed version of the tox python testing tool. It makes efficient use of multiple CPUs by running all possible activities in parallel.
Detox has the same options and configuration that tox has, so after installation you can run it in the same way and with the same options that you use for tox.
    $ detox
%prep
%autosetup -n %{modname}-%{version}
%build
%py3_build                                                                      
%install
%py3_install
%check
%{__python3} setup.py test                                                      
%files -n python3-%{modname}
%doc CHANGELOG
%license LICENSE
%{_bindir}/detox
%{python3_sitelib}/%{modname}/
%{python3_sitelib}/%{modname}-%{version}*
%changelog
...
```
::: calloutlist
  ------------------------------------------------------------ ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [![1](images/callouts/1.png)](#advanced-topics.html#CO1-1)   [**modname**]{.strong} 宏包含 Python 项目的名称。在这个示例中是 `detox`{.literal}。
  [![2](images/callouts/2.png)](#advanced-topics.html#CO1-2)   将 Python 项目打包为 RPM 时，`python3`{.literal} 前缀始终需要添加到项目的原始名称中。这里的原始名称是 [ **`detox`{.literal}，RPM 的名称是**]{.strong} `python3-detox`{.literal}。
  [![3](images/callouts/3.png)](#advanced-topics.html#CO1-3)   [**BuildRequires**]{.strong} 指定构建和测试此软件包所需的软件包。在 BuildRequires 中，始终包含提供构建 Python 软件包所需的工具的项目： `python36-devel`{.literal} 和 `python3-setuptools`{.literal}。`python36-rpm-macros`{.literal} 软件包是必需的，带有 `/usr/bin/python3`{.literal} 解释器指令的文件会自动改为 `/usr/bin/python3.6`{.literal}。
  [![4](images/callouts/4.png)](#advanced-topics.html#CO1-4)   每个 Python 软件包都需要一些其他软件包才能正常工作。此类软件包也需要在 SPEC 文件中指定。[**要指定依赖项**]{.strong}，您可以使用 [**%python_enable_dependency_generator**]{.strong} 宏自动使用 `setup.py`{.literal} 文件中定义的依赖关系。如果软件包有没有使用 Setuptools 指定的依赖软件包，请在附加 `Requires`{.literal} 指令中指定它们。
  [![5](images/callouts/5.png)](#advanced-topics.html#CO1-5)   [**%py3_build**]{.strong} 和 [**%py3_install**]{.strong} 宏分别运行 `setup.py build`{.literal} 和 `setup.py install`{.literal} 命令，并提供额外的参数来指定安装位置、要使用的解释程序以及其他详情。
  [![6](images/callouts/6.png)](#advanced-topics.html#CO1-6)   [**check**]{.strong} 部分提供了一个运行正确版本的 Python 的宏。[**%{\_\_python3}**]{.strong} 宏包含 Python 3 解释器的路径，例如 `/usr/bin/python3`{.literal}。我们建议始终使用宏而不是字面路径。
  ------------------------------------------------------------ ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#con_common-macros-for-python-3-rpms_assembly_packaging-python-3-rpms}Python 3 RPM 的常见宏 {.title}
:::
在 SPEC 文件中，始终将以下 Macros 描述的宏用于 Python 3 RPM
表，而不是硬编码它们的值。
在宏名称中，总是使用 `python3`{.literal} 或者 `python2`{.literal}