图 4.1–WordPress 图表的图表定义。
图表定义或`Chart.yaml`文件可以包含许多不同的字段。一些字段是必需的，而大多数其他字段是可选的，只有在必要时才能提供。
现在我们已经对`Chart.yaml`文件有了基本的了解，我们将在下一节探讨该文件的必填字段。
## 必填字段
图表定义必须包含以下包含关键图表元数据的字段:
![](img/05.jpg)
让我们更详细地探讨一下这些必填字段:
*   The `apiVersion` field can be set to one of two different values:
    `v1`
    `v2`
*   如果`apiVersion`字段设置为`v1`，这意味着图表遵循传统图表结构。这是 Helm 3 发布前使用的`apiVersion`值，其中图表结构中支持附加的`requirement.yaml`文件，而图表定义中的`type`字段不受支持。Helm 3 向后兼容`apiVersion`值`v1`，但新图表应设置为`apiVersion`值`v2`，以避免使用不推荐使用的功能。
*   `name`字段用于定义 Helm 图表的名称。该值应该等于包含 Helm 图表文件的顶级目录的名称。Helm 图表的名称出现在`helm search`命令和`helm list`命令的搜索结果中，以返回用于发布的图表的名称。该字段的值应该简洁但具有描述性，用一个简短的名称描述图表安装的应用，如`wordpress`或`redis-cluster`。烤串大小写，或者用破折号分隔单词，是区分名字中不同单词的常见习惯。有时候，名字会写成一个字，比如`rediscluster`。
*   `version`字段用于确定 Helm 图表的版本。版本必须遵循**语义版本化** ( **版本** ) `2.0.0`格式才能成为有效的图表版本。SemVer 描述了一个基于`Major.Minor.Patch`格式的版本，其中`Major`版本在引入突破性变化时应该增加，当向后兼容特性发布时`Minor`版本应该增加，当 bug 修复时`Patch`版本应该增加。当`Minor`版本增加时，`Patch`版本设置回`0`。当`Major`版本增加时，`Minor`和`Patch`版本都重置为`0`。当增加图表版本时，图表开发人员应该特别小心，因为它们用于指示何时发布变更、新特性和错误修复。
虽然这三个字段是`Chart.yaml`文件中唯一需要的字段，但还可以包含更多可选字段来为图表添加额外的元数据。
让我们看看其他可能的`Chart.yaml`场 ds。
可选元数据
除了必填字段外，还有许多可选字段可用于提供图表的其他详细信息，如下表所述:
![](img/013.jpg)
其中一些字段提供简单的元数据，向用户显示关于 Helm 图表的信息。但是，其他字段用于修改 Helm 图表的行为。这些字段中的第一个是`type`字段，可以设置为`application`或`library`。如果设置为`application`，图表将部署 Kubernetes 资源。如果设置为`library`，图表通过帮助模板的形式向其他图表提供功能。
第二个可以修改 Helm 图表行为的字段是`dependencies`字段，这将在下一节中讨论。
## 管理图表相关性
图表依赖用于安装 Helm 图表可能依赖的其他图表资源。这方面的一个例子是`wordpress`图表，它将`mariaDB`图表声明为保存后端数据的依赖项。通过使用`mariadb`依赖关系，WordPress 图表不需要从头定义它的资源。
通过填充`dependencies`字段，在`Chart.yaml`文件中声明依赖关系。以下是`wordpress`图表定义的相关片段:
![Figure 4.2 – A snippet of the wordpress chart’s definition ](img/Figure_4.2.jpg)
图 4.2–WordPress Helm 图表中声明的马里亚数据库依赖关系。
虽然此示例显示了单个依赖项`mariadb`，但是依赖项块可以定义多个依赖项的列表。
一个`dependencies`块包含许多不同的字段，可以用来修改图表的依赖关系管理的行为。下表中定义了这些字段:
![](img/022.jpg)
`dependencies`块下最少需要的字段是`name`、`repository`和`version`字段。如前面的`wordpress`依赖关系片段中的所示，依赖关系的名称是马里亚数据库，可以在[https://kubernetes-charts.storage.googleapis.com](https://kubernetes-charts.storage.googleapis.com/)找到该存储库。这将在提供的存储库中搜索一个 Helm 图表，该图表的`Chart.yaml`文件中的`name`字段为`mariadb`。`dependencies`块的`version`字段指定了应该包含的图表版本。这可以固定到特定版本，如`7.0.0`，也可以指定通配符版本。上例中列出的依赖项提供了通配符版本`7.x.x`，它指示 Helm 下载与通配符匹配的图表的最新版本。
现在，了解了必需的依赖项字段，让我们了解如何下载声明的依赖项。
## 下载依赖项
依赖关系可以使用下表中列出的`helm dependency`子命令下载:
![](img/03.jpg)
要第一次下载依赖项，可以运行`helm dependency update`命令，将每个依赖项下载到给定 Helm 图表的`charts/`目录中:
```
$ helm dependency update $CHART_PATH
```
`helm dependency update`命令以`GZip`存档的形式从存储库中下载依赖项。`tgz`文件扩展名。该命令还会生成一个名为`Chart.lock`的文件。`Chart.lock`文件类似于`Chart.yaml`文件。然而，虽然`Chart.yaml`文件包含图表依赖项的期望状态，但是`Chart.lock`文件定义了所应用的依赖项的实际状态。
这里可以看到一个`Chart.lock`文件的例子:
![Figure 4.3 – A Chart.lock file ](img/Figure_4.3.jpg)
图 4.3–一个`Chart.lock`文件
将此与简单的对应`Chart.yaml`文件进行比较:
![Figure 4.4 – A corresponding Chart.yaml file ](img/Figure_4.4.jpg)
图 4.4–对应的`Chart.yaml`文件
在`Chart.yaml`文件中，可以看到指定`mariadb`依赖的版本是`7.x.x`版本，但是`Chart.lock`文件中的版本是`7.3.1`版本。这是因为`Chart.yaml`文件指示 Helm 下载最新版本的`7.x.x`版本，实际下载的版本是`7.3.1`版本。
有了`Chart.lock`文件，Helm 能够在`charts/`目录被删除或需要重建的情况下重新加载最初下载的确切依赖项。这可以通过对图表运行`helm dependency build`命令来完成:
```
$ helm dependency build $CHART_PATH
```
因为您可以使用`helm dependency build`命令下载依赖项，所以可以从源代码管理中省略`charts/`目录来减小存储库的大小。
随着时间的推移，`7.x.x`版本下的更新版本将会出现。可以再次运行`helm dependency update`命令来协调这种依赖性，这意味着将下载最新的可用版本，并且`Chart.lock`文件将重新生成。如果将来您想从`8.x.x`版本下载，或者想将依赖关系锁定到某个特定版本，如`7.0.0`，您可以在`Chart.yaml`文件中进行设置并运行`helm dependency update`。
`helm dependency list`命令可用于查看保存到本地机器的 Helm 图表的下载依赖项:
```
$ helm dependency list $CHART_NAME
```
您将看到类似如下的输出:
![Figure 4.5 – The output of a CHART_NAME command ](img/Figure_4.5.jpg)
图 4.5–“舵依赖列表”输出
`STATUS`列确定依赖项是否已经成功下载到`charts/`目录。如果状态为`ok`，则已下载。如果状态显示为`missing`，则说明该依赖项尚未下载。
默认情况下，`Chart.yaml`文件中的每个声明的依赖项都将被下载，但这可以通过提供`dependencies`块的`condition`或`tags`字段来修改，我们将在下一节中讨论。
## 条件依赖
在安装或升级过程中，可以利用`condition`和`flags`字段有条件地包含依赖关系。考虑一个例子`Chart.yaml`文件中的`dependencies`块:
```
dependencies:
  - name: dependency1
    repository: https://example.com
    version: 1.x.x
    condition: dependency1.enabled
    tags:
      - monitoring
  - name: dependency2
    repository: https://example.com
    version: 2.x.x
    condition: dependency2.enabled
    tags:
      - monitoring
```
请注意包含`condition`和`tags`字段。`condition`字段列出了应由用户提供或在图表的`values.yaml`文件中设置的值。如果评估结果为`true`，`condition`字段会将图表作为依赖项包含在内。如果`false`，则不包括依赖关系。可以通过用逗号分隔每个条件来定义多个条件，如下所示:
```
condition: dependency1.enabled, global.dependency1.enabled
```
设置条件的最佳实践是遵循`chartname.enabled`值格式，其中每个依赖项都有一个取决于依赖项图表名称的唯一条件集。这允许用户通过遵循直观的值模式来启用或禁用单个图表。如果条件值不包含在图表的`values.yaml`文件中，或者不是由用户提供的，则忽略该字段。
`condition`字段用于启用或禁用单个依赖项，而`tags`字段用于启用或禁用依赖项组。在前面的`dependencies`块中，两个依赖项都列出了一个名为`monitoring`的标签。这意味着如果启用了`monitoring`标签，则两个依赖项都包括在内。如果`monitoring`标签设置为`false`，则省略相关性。通过在父图表的`values.yaml`文件中的`tags` YAML 对象下设置标签来启用或禁用标签，如下所示:
```
tags:
  monitoring: true
```
通过遵循列表的 YAML 语法，依赖项可以在`Chart.yaml`文件中定义多个标签。只有一个标签需要评估为`true`才能包含依赖关系。
重要提示:
如果依赖项的所有标记都被忽略，默认情况下将包含该依赖项。
在本节中，我们讨论了如何有条件地声明依赖关系。接下来，我们将讨论如何覆盖和引用依赖关系中的值。
## 覆盖和引用子图表中的值
默认情况下，属于依赖关系图表(也称为**子图表**)的值可以通过将其包装在名称设置为与子图表相同的映射中而被覆盖或引用。想象一个名为`my-dep`的子图表，它支持以下值:
```
replicas: 1
servicePorts:
  - 8080
  - 8443
```
当该图表作为依赖项安装时，可以通过在父图表的`my-dep` YAML 对象中设置这些值来覆盖它们，如图所示:
```
my-dep:
  replicas: 3
  servicePorts:
    - 8080
    - 8443
    - 8778
```
上例覆盖了在`my-dep`中定义的`replicas`和`servicePorts`值，为`replicas`设置`3`，并将`8778`添加到`servicePorts`。这些值可以在父图表的模板中按照点标记法引用，例如`my-dep.replicas`。除了覆盖和引用值之外，您还可以通过定义`import-values`字段直接导入依赖关系值，这将在下一节中解释。
## 用导入值导入值
`Chart.yaml`文件的`dependencies`块支持`import-values`字段，该字段可用于导入子图表的默认值。这个领域有几种运作方式。第一种方法是提供要从子图表导入的键列表。为此，子图表必须在`exports`块下声明值，如下所示:
```
exports:
  image:
    registry: 'my-registry.io'
    name: learnhelm/my-image
    tag: latest
```
然后，父图表可以在`Chart.yaml`文件中定义`import-values`字段:
```
dependencies:
  - name: mariadb
    repository: https://charts.bitnami.com
    version: 7.x.x
    import-values:
      - image
```
这允许子图表中`exports.image`下的默认值在父图表中被如下引用:
```
registry: 'my-registry.io'
name: learnhelm/my-image
tag: latest
```
请注意，这已经删除了`image`映射，只留下了它下面的键值对。如果您不想发生这种情况，`import-values`字段可以通过遵循所谓的`child-parent`格式来保留`image`地图。这允许图表开发人员指定应该从子图表导入的值，并提供在父图表中应该引用的名称。`child-parent`格式允许这样做，而不需要子图表中的`exports`块中的值。下面的`dependencies`块演示了一个例子:
```
dependencies:
  - name: mariadb
    repository: https://charts.bitnami.com
    version: 7.x.x
    import-values: