可能带来麻烦：例如，（?（Num）thenlelse）中的（Num）i会变为（?=Num）：（也就是顺序
环视的‘Num'），如果在正则表达式的其他地方没有出现（?".）时会这样。如果存在
这样的命名捕获，f判断的就是它是否捕获成功。
---
## Page 436
410
第9章：.NET
））
意图传达给看程序的人，这样如果正则引擎在未来修改了守语法，也不会带来意外。
“编译好的”正则表达式
在前面几章，我使用“编译（compile）”这个词来描述所有正则表达式系统中，在应用正则
表达式之前必须做的准备工作，它们用来检查正则表达式是否格式规范，并将其转换为能
够实际应用的内部形式。在.NET的正则表达式中，它的术语是“解析（parsing）”。.NET
使用两种意义的“编译”来指涉解析阶段的优化。
下面是增进优化效果的细节：
·解析（Parsing）程序在执行过程中，第一次遇到正则表达式时必须检查它是否格式规
范，并将其转换为适于正则引擎实际应用的内部形式。此过程在本书的其他部分称为
“编译（compile）”。
·
即用即编译（On-the-FlyCompilation）在构建正则表达式时，可以指定RegexOptions
Compiled选项。它告诉正则引擎，要做的不仅是此表达式转换为某种默认的内部形式，
而是编译为底层的MSIL（MicrosoftIntermediateLanguage）代码，在正则表达式实际
应用时，可以由JIT（"Just-In-Time”编译器）优化为更快的本地机器代码。
这样做需要花费更多的时间和空间，但这样得到的正则表达式速度更快。本节之后会
讨论这样的权衡。
预编译的正则表达式一个（或多个）Regex对象能够封装到DLL（DynamicallyLoaded
Library，例如共享的库文件）中，保存在磁盘上。这样其他的程序也可以直接调用它。
如果使用RegexOptions.Compiled来进行“即用即编译”的编译，在启动速度，持续内存
占用和匹配速度之间，存在此消彼长的关系：
标准
不使用RegexOptions.Compiled
使用RegexOptions.Compiled
启动速度
较快
较慢（最多提升60倍）
内存占用
多（每个表达式占用5-15KB）
匹配速度
一般
最多能提升10倍
在程序第一次遇到正则表达式时进行初始的正则表达式解析（默认情况，即不用RegexOp-
tions.Compiled）相对来说是很快的。即使在我这台有年头的550MHzNT的机器上，每
秒钟也能进行大约1500次复杂编译。如果使用RegexOptions.Compiled，则速度下降到
每秒25次，每个正则表达式需要多占用大约10KB内存。
---
## Page 437
NET的正则流派
更重要的是，在程序的执行过程中，这块内存会一直占用一它无法释放。
在对时间要求不严格的场合使用RegexOptions.Compiled无疑是很有意义的，在这里，速
度是很重要的，尤其是需要处理大量的文本时更是如此。另一方面，如果正则表达式很简
单，需要处理的文本也不是很多，这样做就没有意义。如果情况不是这样黑白分明，该如
何选择就不那么容易了一必须具体情况具体分析，以进行取舍。
最终的程序所占的内存更少（因为不必装载编译正则表达式所需的包），装载速度更快（因
为在DLL生成时它们已经编译好了，只需要直接使用即可）。另一个不错的副产品就是，
表达式还可以供其他需要的程序使用，所以这是一种组建个人正则表达式库的好办法。请
从右向左的匹配
长期以来，正则表达式的开发人员一直凯着“反向（backwards）”匹配（即从右向左，而
不是从左向右）。对开发人员来说，最大的问题可能是，“从右向左”的匹配到底是什么意
思？是整个正则表达式都需要反过来吗？还是说，这个正则表达式仍然在目标字符事中进
行尝试，只是传动装置从结尾开始，驱动过程从右向左进行？
抛开这些纯释的概念，看个具体的例子：用d+匹配字符串123·and·456”。我们知道正
常情况下结果是“123”，根据直觉，从右向左匹配的结果应该是“456。不过，如果正则
引擎使用的规则是，从字符串末尾开始，驱动过程从左向右进行，结果可能就会出乎意料。
在某些语意下，正则引擎能够正常工作（从开始的位置向右“看"），所以第一次尝试d+）
始“考察”位置“6'，这当然可以匹配"d+，所以最后的结果是“6”。
NET的正则表达式提供了RegexOptions.RightToLeft的选项。但它究竟是什么意义呢？
答案是：“这问题值得思索。它的语意没有文档，我测试了也无法找到规律。在许多情况
9
制
---
## Page 438
412
第9章：.NET
不过，有时候也会报告没有匹配结果，或是匹配跟其他结果相比毫无意义的文本。
如果需要进行从右向左的匹配，你可能会发现，RegexOptions.RightToLeft似平能得到
你期望的结果，但是最后，你会发现这样做得冒风险。
反斜线-数字的二义性
数字跟在反斜线之后，可能表示十进制数的转义，也可能是反向引用。到底应该如何处理，
取决于是否指定了RegexOptions.ECMAScript选项。如果你不关心其中的细微差别，不妨
一直用k表示反向引用，或者在表示十进制数时以0开头（例如\08i）。这两种办
法不受RegexOptions.ECMAScript的影响。
如果没有使用RegexOptions.ECMASCript，从1i到9s的单个转义数字通常代表反向引
用，而以0开头的转义数字通常代表十进制转义（例如，\012匹配ASCII的进纸符
linefeed），除此之外的所有情况下，如果“有意义”（也就是说某个正则表达式中有足够
多的捕获型括号)，数字都会被作为反向引用来处理。否则，如果数字的值处于\000和\377
之间，就作为十进制转义。例如，如果捕获型括号的数目多于12，则12会作为反向引用，
否则就会作为十进制数字。
下一节详细讲解RegexOptions.ECMAScript的语意。
ECMAScript模式
则表达式的语意。如果使用RegexOptions.ECMAScript选项，.NET的正则表达式就会模
拟这些语意。如果你不明白ECMASCript的含义，或者不需要兼容它，就完全可以忽略该节。
如果启用了RegexOptions.ECMASCript，将会应用下面的规则：
RegexOptions.ECMAScript只能与下面的选项同时使用：
RegexOptions.IgnoreCase
RegexOptions.Multiline
RegexOptions.Compiled
·\w、Id、\s、\W、\D、\S只能匹配ASCII字符。
注2：ECMA表示“EuropeanComputerManufacturesAssociation（欧洲计算机制造商协会）”，成
立于1960年，任务是为不断发展计算机的各个方面制定标准。
---
## Page 439
使用.NET正则表达式
413
正则表达式中的反斜线-数字的序列不会有反向引用和十进制转义的二义性，它只能表
示反向引用，即使这样需要截断结尾的数字。例如，（）\10中的10会被处理为，
第1组捕获性括号匹配的文本，然后是文字‘0。
使用.NET正则表达式
Llsing.NETRegularExpressions
.NET正则表达式功能强大，语法清晰，通过完整而易于使用的类接口来操作。虽然微软的
正则表达式包做得很漂亮，文档却相反一一它非常糟糕。文档不够全面，编写不够清晰，
缺乏组织，有时甚至不能保证正确性。我花了很长的时间才整理清楚，所以希望这一章的
内容能够让读者更清楚地理解.NET的正则表达式。
正则表达式快速入门
Regex Quickstart
即使不需要知道正则类模型（regexclassmodel）的细节，也可以直接上手使用.NET的正则
表达式包。理解细节能够让我们获得更多的信息，提高工作效率，但是下面这些简单的例
子没有明确创建任何正则类，细节将在例子之后提到。
使用正则表达式库的程序必须在文件的开头写上下面这条语句，下面的例子假设此句已经
存在：
Imports System.Text.RegularExpressions
下面的例子都能正常处理String变量TestStr。本章的所有例子中，选用的变量名都以斜
体标注。
快速入门：在字符串中寻找匹配
这段程序检查一个正则表达式是否能匹配字符串：
If Regex.IsMatch(TestStr,^\s*s")
Console.WriteLine("line is empty")
Else
Console.WriteLine("line is not empty")
End If
这个例子使用了匹配模式：
Console.WriteLine("line is a subject line")
Else
Console.WriteLine("line is not a subject line")
EndIf
---
## Page 440
414
第9章：.NET
快速入门：匹配，获得匹配文本
这个例子显示正则表达式实际匹配的文本。如果没有匹配，TheNum就是空字符串。
Dim TheNum as String = Regex.Match(TestStr, *\d+").Value
If TheNum <>""
Console.WriteLine("Number is:* & TheNum)
End If
这个例子使用了一个匹配模式：
RegexOptions.IgnoreCase).Value
If ImgTag <>**
Console.WriteLine("Image tag:*& ImgTag)
End If
快速入门：匹配，获得捕获文本
这段程序以字符串的形式返回第1个捕获分组的匹配文本：
Dim Subject as String =
Regex.Match(TestStr,*^Subject:(.*)").Groups(1).Value
If Subject <>""
Console.WriteLine(*Subject is:*& Subject)
EndIf
请注意，在C#中应使用Groups[1]取代Groups（1）。
下面的程序目的相同，只是使用了match选项：
Dim Subject as String =
Regex.Match(TestStr,*^subject:（.*)"，
RegexOptions.IgnoreCase).Groups (1).Value
If Subject<>**
Console.WriteLine("Subject is:*& Subject)
End If
仍然是相同的程序，只是使用命名捕获：
Dim Subject as String =
Regex.Match(TestStr,*^subject:(?.*)*,
RegexOptions.IgnoreCase).Groups(*Subj*).Value
If Subject <>**
Console.WriteLine(Subject is:& Subject)
End If
快速入门：查找和替换
这个例子把输人的字符串转换为HTML“安全”的字符，把特殊的HTML转换为HTML
entity:
TestStr=Regex.Replace(TestStr,"&*,“&amp:")
TestStr=Regex.Replace（TestStr,*","&gt;*)
Console.WriteLine(*Now safe in HTML:*& TestStr)
---
## Page 441
使用.NET正则表达式
415
replacement字符串（第3个参数）的处理是很特殊的，第424页的补充内容做了讲解。例
如，在replacement字符串中，‘S&’会被正则表达式真正匹配的文本所替代，下面的例子
给大写的单词添加：
TestStr =Regex.Replace(TestStr,*\b[A-Z]\w*","$&")
Console.WriteLine("Modified string: " & TestStr)
这个例子把（使用不区分大小写的匹配）替换为：
TestStr = Regex.Replace(TestStr,*(.*?)"，"$1",
RegexOptions.IgnoreCase)
Console.WriteLine("Modified string: *& TestStr)
包概览
PackngeOrerview
通过丰富而便捷的类结构，可以使用.NET正则表达式几乎所有的功能。下面这个完整的控
制台程序，提供了关于整个包的概览，它明确使用各种对象来进行简单的匹配。
OptionExplicitOn’使用正则表达式时并非必须这样写
OptionStrictOn：但这样做是个好习惯
：简化正则表达式相关的类的访问
Imports System.Text.RegularExpression8
Module SimpleTest
Sub Main()
Dim SampleTaxt as String ="this is the lst test string"
If not M.Success
Console.WriteLine("no match")
Else
Dim MatchedFromas Integer =M.Index
Dim MatchedLen as Integer =M.Length
Console.WriteLine（"matched["&MatchedText&"]"&_
"from char#"&MatchedFrom.ToString（）&
“for"&MatchedLen.ToString(）&"chars.")
End If
End Sub
End Module
通过命令行提示符来执行，把\d+\w+i应用到同样的文本，结果是：
matched [1st] from char#12 for 3 chars.
导入正则表达式名字空间
你注意到程序头部的ImportsSystem.Text.RegularExpressions了吗？任何用到.NET
正则对象的VB程序都必须写上这一条语句，才能通过编译。
---
## Page 442
416
第9章：.NET
C#中对应的是：
using System.Text.RegularExpressions;//C#中应这么写
这个例子说明了基本的正则对象的用法，下面两行主要行为：
也可以合并为一行：
合并的写法更容易使用，程序员需要输入的代码更少，需要记录的对象也更少。不过，它
的效率会稍微低一些（432）。在下面几页中，我们首先会看到原始的对象，然后学习“便
捷”函数，例如静态函数Regex.Match，以及合适的使用时机。
为简便起见，在程序片段的例子中，我会省略下面这几行：
Option Explicit On
Option Strict On
Imports System.Text.RegularExpressions