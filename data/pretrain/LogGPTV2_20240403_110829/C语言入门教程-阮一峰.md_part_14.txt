*p = 12;
free(p);
注意，分配的内存块⼀旦释放，就不应该再次操作已经释放的地址，也不应该再次使⽤ 对该地址释
free()
放第⼆次。
⼀个很常⻅的错误是，在函数内部分配了内存，但是函数调⽤结束时，没有使⽤ 释放内存。
free()
void gobble(double arr[], int n) {
double* temp = (double*) malloc(n * sizeof(double));
}
上⾯示例中，函数 内部分配了内存，但是没有写 。这会造成函数运⾏结束后，占⽤
gobble() free(temp)
的内存块依然保留，如果多次调⽤ ，就会留下多个内存块。并且，由于指针 已经消失了，
gobble() temp
也⽆法访问这些内存块，再次使⽤。
calloc() #
函数的作⽤与 相似，也是分配内存块。该函数的原型定义在头⽂件 。
calloc() malloc() stdlib.h
两者的区别主要有两点：
（1） 接受两个参数，第⼀个参数是数据类型的单位字节⻓度，第⼆个是该数据类型的数量。
calloc()
void* calloc(size_t n, size_t size);
的返回值也是⼀个 void 指针。分配失败时，返回 NULL。
calloc()
（2） 会将所分配的内存全部初始化为 。 不会对内存进⾏初始化，如果想要初始化
calloc() 0 malloc()
为 ，还要额外调⽤ 函数。
0 memset()
int *p = calloc(10, sizeof(int));
int *q = malloc(sizeof(int) * 10);
memset(q, 0, sizeof(int) * 10);
上⾯示例中， 相当于 。
calloc() malloc() + memset()
分配的内存块，也要使⽤ 释放。
calloc() free()
realloc() #
函数⽤于修改已经分配的内存块的⼤⼩，可以放⼤也可以缩⼩，返回⼀个指向新的内存块的指
realloc()
针。如果分配不成功，返回 NULL。该函数的原型定义在头⽂件 。
stdlib.h
void* realloc(void* block, size_t size)
它接受两个参数。
：已经分配好的内存块指针（由 或 或 产⽣）。
block malloc() calloc() realloc()
：该内存块的新⼤⼩，单位为字节。
size
可能返回⼀个全新的地址（数据也会⾃动复制过去），也可能返回跟原来⼀样的地址。
realloc()
优先在原有内存块上进⾏缩减，尽量不移动数据，所以通常是返回原先的地址。如果新内存块
realloc()
⼩于原来的⼤⼩，则丢弃超出的部分；如果⼤于原来的⼤⼩，则不对新增的部分进⾏初始化（程序员可以
⾃动调⽤ ）。
memset()
下⾯是⼀个例⼦， 是数组指针， 动态调整它的⼤⼩。
b realloc()
int* b;
b = malloc(sizeof(int) * 10);
b = realloc(b, sizeof(int) * 2000);
上⾯示例中，指针 原来指向 10 个成员的整数数组，使⽤ 调整为 2000 个成员的数组。这就
b realloc()
是⼿动分配数组内存的好处，可以在运⾏时随时调整数组的⻓度。
的第⼀个参数可以是 NULL，这时就相当于新建⼀个指针。
realloc()
char* p = realloc(NULL, 3490);
char* p = malloc(3490);
如果 的第⼆个参数是 ，就会释放掉内存块。
realloc() 0
由于有分配失败的可能，所以调⽤ 以后，最好检查⼀下它的返回值是否为 NULL。分配失败
realloc()
时，原有内存块中的数据不会发⽣改变。
float* new_p = realloc(p, sizeof(*p * 40));
if (new_p == NULL) {
printf("Error reallocing\n");
return 1;
}
注意， 不会对内存块进⾏初始化。
realloc()
restrict 说明符 #
声明指针变量时，可以使⽤ 说明符，告诉编译器，该块内存区域只有当前指针⼀种访问⽅式，其
restrict
他指针不能读写该块内存。这种指针称为 “受限指针”（restrict pointer）。
int* restrict p;
p = malloc(sizeof(int));
上⾯示例中，声明指针变量 时，加⼊了 说明符，使得 变成了受限指针。后⾯，当 指向
p restrict p p
函数返回的⼀块内存区域，就味着，该区域只有通过 来访问，不存在其他访问⽅式。
malloc() p
int* restrict p;
p = malloc(sizeof(int));
int* q = p;
*q = 0;
上⾯示例中，另⼀个指针 与受限指针 指向同⼀块内存，现在该内存有 和 两种访问⽅式。这就
q p p q
违反了对编译器的承诺，后⾯通过 对该内存区域赋值，会导致未定义⾏为。
*q
memcpy() #
⽤于将⼀块内存拷⻉到另⼀块内存。该函数的原型定义在头⽂件 。
memcpy() string.h
void* memcpy(
void* restrict dest,
void* restrict source,
size_t n
);
上⾯代码中， 是⽬标地址， 是源地址，第三个参数 是要拷⻉的字节数 。如果要拷⻉ 10
dest source n n
个 double 类型的数组成员， 就等于 ，⽽不是 。该函数会将从 开始的
n 10 * sizeof(double) 10 source
个字节，拷⻉到 。
n dest
和 都是 void 指针，表示这⾥不限制指针类型，各种类型的内存数据都可以拷⻉。两者都有
dest source
restrict 关键字，表示这两个内存块不应该有互相重叠的区域。
的返回值是第⼀个参数，即⽬标地址的指针。
memcpy()
因为 只是将⼀段内存的值，复制到另⼀段内存，所以不需要知道内存⾥⾯的数据是什么类型。下
memcpy()
⾯是复制字符串的例⼦。
#include 
#include 
int main(void) {
char s[] = "Goats!";
char t[100];
memcpy(t, s, sizeof(s));
printf("%s\n", t);
return 0;
}
上⾯示例中，字符串 所在的内存，被拷⻉到字符数组 所在的内存。
s t
可以取代 进⾏字符串拷⻉，⽽且是更好的⽅法，不仅更安全，速度也更快，它不检查
memcpy() strcpy()
字符串尾部的 字符。
\0
char* s = "hello world";
size_t len = strlen(s) + 1;
char *c = malloc(len);
if (c) {
strcpy(c, s);
memcpy(c, s, len);
}
上⾯示例中，两种写法的效果完全⼀样，但是 的写法要好于 。
memcpy() strcpy()
使⽤ void 指针，也可以⾃定义⼀个复制内存的函数。
void* my_memcpy(void* dest, void* src, int byte_count) {
char* s = src;
char* d = dest;
while (byte_count--) {
*d++ = *s++;
}
return dest;
}
上⾯示例中，不管传⼊的 和 是什么类型的指针，将它们重新定义成⼀字节的 Char 指针，这样
dest src
就可以逐字节进⾏复制。 语句相当于先执⾏ （源字节的值复制给⽬标字节），然后
*d++ = *s++ *d = *s
各⾃移动到下⼀个字节。最后，返回复制后的 指针，便于后续使⽤。
dest
memmove() #
函数⽤于将⼀段内存数据复制到另⼀段内存。它跟 的主要区别是，它允许⽬标区域与
memmove() memcpy()
源区域有重叠。如果发⽣重叠，源区域的内容会被更改；如果没有重叠，它与 ⾏为相同。
memcpy()
该函数的原型定义在头⽂件 。
string.h
void* memmove(
void* dest,
void* source,
size_t n
);
上⾯代码中， 是⽬标地址， 是源地址， 是要移动的字节数。 和 都是 void
dest source n dest source
指针，表示可以移动任何类型的内存数据，两个内存区域可以有重叠。
返回值是第⼀个参数，即⽬标地址的指针。
memmove()
int a[100];
memmove(&a[0], &a[1], 99 * sizeof(int));
上⾯示例中，从数组成员 开始的 99 个成员，都向前移动⼀个位置。
a[1]
下⾯是另⼀个例⼦。
char x[] = "Home Sweet Home";
printf("%s\n", (char *) memmove(x, &x[5], 10));
上⾯示例中，从字符串 的 5 号位置开始的 10 个字节，就是 “Sweet Home”， 将其前移到 0
x memmove()
号位置，所以 就变成了 “Sweet Home Home”。
x
memcmp() #
函数⽤来⽐较两个内存区域。它的原型定义在 。
memcmp() string.h
int memcmp(
const void* s1,
const void* s2,
size_t n
);
它接受三个参数，前两个参数是⽤来⽐较的指针，第三个参数指定⽐较的字节数。
它的返回值是⼀个整数。两块内存区域的每个字节以字符形式解读，按照字典顺序进⾏⽐较，如果两者相
同，返回 ；如果 ⼤于 ，返回⼤于 0 的整数；如果 ⼩于 ，返回⼩于 0 的整数。
0 s1 s2 s1 s2
char* s1 = "abc";
char* s2 = "acd";
int r = memcmp(s1, s2, 3);
上⾯示例⽐较 和 的前三个字节，由于 ⼩于 ，所以 是⼀个⼩于 0 的整数，⼀般为 - 1。
s1 s2 s1 s2 r
下⾯是另⼀个例⼦。
char s1[] = {'b', 'i', 'g', '\0', 'c', 'a', 'r'};
char s2[] = {'b', 'i', 'g', '\0', 'c', 'a', 't'};
if (memcmp(s1, s2, 3) == 0)
if (memcmp(s1, s2, 4) == 0)
if (memcmp(s1, s2, 7) == 0)
上⾯示例展示了， 可以⽐较内部带有字符串终⽌符 的内存区域。
memcmp() \0
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
结构 语⾔教程 ⽹道
struct - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
简介 #
C 语⾔内置的数据类型，除了最基本的⼏种原始类型，只有数组属于复合类型，可以同时包含多个值，但
是只能包含相同类型的数据，实际使⽤中并不够⽤。
实际使⽤中，主要有下⾯两种情况，需要更灵活强⼤的复合类型。
复杂的物体需要使⽤多个变量描述，这些变量都是相关的，最好有某种机制将它们联系起来。
某些函数需要传⼊多个参数，如果⼀个个按照顺序传⼊，⾮常麻烦，最好能组合成⼀个复合结构传
⼊。
为了解决这些问题，C 语⾔提供了 关键字，允许⾃定义复合数据类型，将不同类型的值组合在⼀
struct
起。这样不仅为编程提供⽅便，也有利于增强代码的可读性。C 语⾔没有其他语⾔的对象（object）和类
（class）的概念，struct 结构很⼤程度上提供了对象和类的功能，可以将它视为只有属性、没有⽅法的
类。
下⾯是 ⾃定义数据类型的⼀个例⼦。
struct
struct fraction {
int numerator;
int denominator;
};
上⾯示例定义了⼀个分数的数据类型 ，包含两个属性 和 。
struct fraction numerator denominator
注意，作为⼀个⾃定义的数据类型，它的类型名要包括 关键字，⽐如上例是 ，单
struct struct fraction
独的 没有任何意义，甚⾄脚本还可以另外定义名为 的变量，虽然这样很容易造成混
fraction fraction
淆。另外， 语句结尾的分号不能省略，否则很容易产⽣错误。
struct
定义了新的数据类型以后，就可以声明该类型的变量，这与声明其他类型变量的写法是⼀样的。
struct fraction f1;
f1.numerator = 22;
f1.denominator = 7;
上⾯示例中，先声明了⼀个 类型的变量 ，这时编译器就会为 分配内存，接着就可
struct fraction f1 f1
以为 的不同属性赋值。可以看到，struct 结构的属性通过点（ ）来表示，⽐如 属性要写
f1 . numerator
成 。
f1.numerator
再提醒⼀下，声明⾃定义类型的变量时，类型名前⾯，不要忘记加上 关键字。也就是说，必须使
struct
⽤ 声明变量，不能写成 。
struct fraction f1 fraction f1