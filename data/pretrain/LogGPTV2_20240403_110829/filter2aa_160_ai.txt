the TLS index explained in the following discussion. 
Note   Statically declared TLS data objects can be used only in statically loaded image files. 
This fact makes it unreliable to use static TLS data in a DLL unless you know that the DLL, or 
anything statically linked with it, will never be loaded dynamically with the LoadLibrary API 
function. 
Executable code accesses a static TLS data object through the following steps: 
1. 
At link time, the linker sets the Address of Index field of the TLS Directory. This field points to 
a location where the program will expect to receive the TLS index.  
The Microsoft run-time library facilitates this process by defining a memory image of the TLS 
Directory and giving it the special name “__tls_used” (Intel x86 platforms) or “_tls_used” (other 
platforms). The linker looks for this memory image and uses the data there to create the TLS 
Directory. Other compilers that support TLS and work with the Microsoft linker must use this same 
technique. 
2. 
When a thread is created, the loader communicates the address of the thread’s TLS array 
by placing the address of the Thread Environment Block (TEB) in the FS register. A pointer to the 
TLS array is at the offset of 0x2C from the beginning of TEB. This behavior is Intel x86 specific. 
3. 
The loader assigns the value of the TLS index to the place indicated by the Address of Index 
field. 
4. 
The executable code retrieves the TLS index and also the location of the TLS array. 
5. 
The code uses the TLS index and the TLS array location (multiplying the index by four and 
using it as an offset to the array) to get the address of the TLS data area for the given program 
and module. Each thread has its own TLS data area, but this is transparent to the program, which 
doesn’t need to know how data is allocated for individual threads. 
6. 
An individual TLS data object is accessed as some fixed offset into the TLS data area. 
The TLS array is an array of addresses that the system maintains for each thread. Each address 
in this array gives the location of TLS data for a given module (.EXE or DLL) within the program. 
The TLS index indicates which member of the array to use. (The index is a number, meaningful 
only to the system that identifies the module). 
6.7.1. The TLS Directory 
The TLS Directory has the following format: 
Offset 
(PE32/PE32+) 
Size 
(PE32/PE3
2+) 
Field 
Description 
0 
4/8 
Raw Data Start VA 
(Virtual Address) 
Starting address of the TLS template. 
The template is a block of data used to 
initialize TLS data. The system copies all 
this data each time a thread is created, 
so it must not be corrupted. Note that 
this address is not an RVA; it is an 
address for which there should be a 
base relocation in the .reloc section. 
4/8 
4/8 
Raw Data End VA 
Address of the last byte of the TLS, 
except for the zero fill. As with the Raw 
Data Start VA, this is a virtual address, 
not an RVA. 
8/16 
4/8 
Address of Index 
Location to receive the TLS index, which 
the loader assigns. This location is in an 
ordinary data section, so it can be given 
a symbolic name accessible to the 
program. 
12/24 
4/8 
Address of Callbacks 
Pointer to an array of TLS callback 
functions. The array is null-terminated, 
so if there is no callback function 
supported, this field points to four bytes 
set to zero. The prototype for these 
functions is given below, in “TLS 
Callback Functions.” 
16/32 
4 
Size of Zero Fill 
The size in bytes of the template, beyond 
the initialized data delimited by Raw Data 
Start VA and Raw Data End VA. The 
total template size should be the same 
as the total size of TLS data in the image 
file. The zero fill is the amount of data 
that comes after the initialized nonzero 
data. 
20/36 
4 
Characteristics 
Reserved for possible future use by TLS 
flags. 
6.7.2. TLS Callback Functions 
The program can provide one or more TLS callback functions (though Microsoft compilers do not 
currently use this feature) to support additional initialization and termination for TLS data objects. 
A typical reason to use such a callback function would be to call constructors and destructors for 
objects. 
Although there is typically no more than one callback function, a callback is implemented as an 
array to make it possible to add additional callback functions if desired. If there is more than one 
callback function, each function is called in the order its address appears in the array. A null 
pointer terminates the array. It is perfectly valid to have an empty list (no callback supported), in 
which case the callback array has exactly one member—a null pointer. 
The prototype for a callback function (pointed to by a pointer of type PIMAGE_TLS_CALLBACK) 
has the same parameters as a DLL entry-point function: 
typedef VOID 
(NTAPI *PIMAGE_TLS_CALLBACK) ( 
PVOID DllHandle, 
DWORD Reason, 
PVOID Reserved 
    ); 
The Reserved parameter should be left set to 0. The Reason parameter can take the following 
values: 
Setting 
Value 
Description 
DLL_PROCESS_ATTACH 
1 
New process has started, including the first thread. 
DLL_THREAD_ATTACH 
2 
New thread has been created (this notification sent 
for all but the first thread). 
DLL_THREAD_DETACH 
3 
Thread is about to be terminated (this notification 
sent for all but the first thread). 
DLL_PROCESS_DETACH 
0 
Process is about to terminate, including the original 
thread. 
6.8. The .rsrc Section 
Resources are indexed by a multiple level binary-sorted tree structure. The general design can 
incorporate 2**31 levels. By convention, however, Windows NT uses three levels: 
1 
Type 
2 
Name 
3 
Language 
A series of Resource Directory Tables relate all the levels in the following way: each directory 
table is followed by a series of directory entries, which give the name or ID for that level (Type, 
Name, or Language level) and an address of either a data description or another directory table. If 
a data description is pointed to, then the data is a leaf in the tree. If another directory table is 
pointed to, then that table lists directory entries at the next level down. 
A leaf’s Type, Name, and Language IDs are determined by the path taken, through directory 
tables, to reach the leaf. The first table determines Type ID, the second table (pointed to by the 
directory entry in the first table) determines Name ID, and the third table determines Language ID. 
The general structure of the .rsrc section is: 
Data 
Description 
Resource Directory Tables (and 
Resource Directory Entries) 
A series of tables, one for each group of nodes in the 
tree. All top-level (Type) nodes are listed in the first table. 
Entries in this table point to second-level tables. Each 
second-level tree has the same Type identifier but 
different Name identifiers. Third-level trees have the 
same Type and Name identifiers but different Language 
identifiers. 
Each individual table is immediately followed by directory 
entries, in which each entry has: 1) a name or numeric 
identifier, and 2) a pointer to a data description or a table 
at the next lower level. 
Resource Directory Strings 
Two-byte-aligned Unicode™ strings, which serve as string 
data pointed to by directory entries. 
Resource Data Description 
An array of records, pointed to by tables, which describe 
the actual size and location of the resource data. These 
records are the leaves in the resource-description tree. 
Resource Data 
Raw data of the resource section. The size and location 
information in the Resource Data Descriptions delimit the 
individual regions of resource data. 
6.8.1. Resource Directory Table 
Each Resource Directory Table has the following format. This data structure should be considered 
the heading of a table, because the table actually consists of directory entries (see next section) 
as well as this structure: 
Offset 
Size 
Field 
Description 
0 
4 
Characteristics 
Resource flags, reserved for future use; 
currently set to zero. 
4 
4 
Time/Date Stamp 
Time the resource data was created by the 
resource compiler. 
8 
2 
Major Version 
Major version number, set by the user. 
10 
2 
Minor Version 
Minor version number. 
12 
2 
Number of Name 
Entries 
Number of directory entries, immediately 
following the table, that use strings to 
identify Type, Name, or Language 
(depending on the level of the table). 
14 
2 
Number of ID Entries 
Number of directory entries, immediately 
following the Name entries, that use 
numeric identifiers for Type, Name, or 
Language. 
6.8.2. Resource Directory Entries 
The directory entries make up the rows of a table. Each Resource Directory Entry has the 
following format. Note that whether the entry is a Name or ID entry is indicated by the Resource 
Directory Table, which indicates how many Name and ID entries follow it (remember that all the 
Name entries precede all the ID entries for the table). All entries for the table are sorted in 
ascending order: the Name entries by case-insensitive string, and the ID entries by numeric value. 
Offset 
Size 
Field 
Description 
0 
4 
Name RVA 
Address of string that gives the Type, 
Name, or Language identifier, depending 
on level of table. 
0 
4 
Integer ID 
32-bit integer that identifies Type, Name, or 
Language. 
4 
4 
Data Entry RVA 
High bit 0. Address of a Resource Data 
Entry (a leaf). 
4 
4 
Subdirectory RVA 
High bit 1. Lower 31 bits are the address of 
another Resource Directory Table (the next 
level down). 
6.8.3. Resource Directory String 
The Resource Directory String area consists of Unicode strings, which are word aligned. These 
strings are stored together after the last Resource Directory Entry and before the first Resource 
Data Entry. This minimizes the impact of these variable length strings on the alignment of the 
fixed-size directory entries. Each Resource Directory String has the following format: 
Offset 
Size 
Field 
Description 
0 
2 
Length 
Size of string, not including length field itself. 
2 
Variable 
Unicode String 
Variable-length Unicode string data, word 
aligned. 
6.8.4. Resource Data Entry 
Each Resource Data Entry describes an actual unit of raw data in the Resource Data area, and 
has the following format: 
Offset 
Size 
Field 
Description 
0 
4 
Data RVA 
Address of a unit of resource data in the 
Resource Data area. 
4 
4 
Size 
Size, in bytes, of the resource data pointed to 
by the Data RVA field. 
8 
4 
Codepage 
Code page used to decode code point values 
within the resource data. Typically, the code 
page would be the Unicode code page. 
12 
4 
Reserved (must be set to 0) 
6.8.5. Resource Example 
The resource example shows the PE/COFF representation of the following resource data: 
TypeId# 
NameId# 
Language ID 
 Resource Data 
1 
1 
0 
00010001 
1 
1 
1 
10010001 
1 
2 
0 
00010002 
1 
3 
0 
00010003 
2 
1 
0 
00020001 
2 
2 
0 
00020002 
2 
3 
0 
00020003 
2 
4 
0 
00020004 
9 
1 
0 
00090001 
9 
9 
0 
00090009 
9 
9 
1 
10090009 
9 
9 
2 
20090009 
When this data is encoded, a dump of the PE/COFF Resource Directory results in the following 
output: 
Offset 
Data 
0000: 
00000000 00000000 00000000 00030000 (3 entries in this directory) 
0010: 
00000001 80000028 
(TypeId #1, Subdirectory at offset 0x28) 
0018: 
00000002 80000050 
(TypeId #2, Subdirectory at offset 0x50) 
0020: 
00000009 80000080 
(TypeId #9, Subdirectory at offset 0x80) 
0028: 
00000000 00000000 00000000 00030000 (3 entries in this directory) 
0038: 
00000001 800000A0 
(NameId #1, Subdirectory at offset 0xA0) 
0040: 
00000002 00000108 
(NameId #2, data desc at offset 0x108) 
0048: 
00000003 00000118 
(NameId #3, data desc at offset 0x118) 
0050: 
00000000 00000000 00000000 00040000 (4 entries in this directory) 
0060: 
00000001 00000128 
(NameId #1, data desc at offset 0x128) 
0068: 
00000002 00000138 
(NameId #2, data desc at offset 0x138) 
0070: 
00000003 00000148 
(NameId #3, data desc at offset 0x148) 
0078: 
00000004 00000158 
(NameId #4, data desc at offset 0x158) 
0080: 
00000000 00000000 00000000 00020000 (2 entries in this directory) 
0090: 
00000001 00000168 
(NameId #1, data desc at offset 0x168) 
0098: 
00000009 800000C0 
(NameId #9, Subdirectory at offset 0xC0) 
00A0: 
00000000 00000000 00000000 00020000 (2 entries in this directory) 
00B0: 
00000000 000000E8 
(Language ID 0, data desc at offset 0xE8 
00B8: 
00000001 000000F8 
(Language ID 1, data desc at offset 0xF8 
00C0: 
00000000 00000000 00000000 00030000 (3 entries in this directory) 
00D0: 
00000001 00000178 
(Language ID 0, data desc at offset 0x178 
00D8: 