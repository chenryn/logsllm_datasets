          100 OP_LOADI_1    R6              ; R6:step
          102 OP_LOADI_0    R4              ; R4:i
          104 OP_LOADI_0    R7              ; R7:lst
    # setp=1, i=0, lst=0，初始化一个复杂的循环
          106 OP_MOVE       R14     R4      ; R4:i
          109 OP_MOVE       R15     R6      ; R6:step
          112 OP_ADD        R14     R15
          114 OP_MOVE       R4      R14             ; R4:i
          117 OP_JMP                214
    # i+=step，循环开始
          120 OP_MOVE       R14     R3      ; R3:content
          123 OP_MOVE       R15     R7      ; R7:lst
          126 OP_SEND       R14     :[]     1
          130 OP_SEND       R14     :ord    0
          134 OP_MOVE       R8      R14             ; R8:c
    # c=ord(content[lst])
          137 OP_MOVE       R14     R7      ; R7:lst
          140 OP_ADDI       R14     1
          143 OP_MOVE       R15     R4      ; R4:i
          146 OP_SUBI       R15     1
          149 OP_RANGE_INC  R14
          151 OP_BLOCK      R15     I(1:0x55d31260fff0)
          154 OP_SENDB      R14     :each   0
    # 对[lst-1:i+1]范围内的每个元素应用R15的lambda表达式
          158 OP_MOVE       R14     R8      ; R8:c
          161 OP_MOVE       R15     R7      ; R7:lst
          164 OP_ADDI       R15     1
          167 OP_SEND       R14     :^ 1
          171 OP_SEND       R14     :chr    0
    # R14=chr(c^lst)
          175 OP_MOVE       R15     R3      ; R3:content
          178 OP_MOVE       R16     R7      ; R7:lst
          181 OP_MOVE       R17     R14
          184 OP_SEND       R15     :[]=    2
          188 OP_MOVE       R14     R4      ; R4:i
          191 OP_MOVE       R7      R14             ; R7:lst
          194 OP_MOVE       R14     R6      ; R6:step
          197 OP_ADDI       R14     1
          200 OP_MOVE       R6      R14             ; R6:step
          203 OP_MOVE       R14     R4      ; R4:i
          206 OP_MOVE       R15     R6      ; R6:step
          209 OP_ADD        R14     R15
          211 OP_MOVE       R4      R14             ; R4:i
    # lst=i, step=step+1, i=i+step
          214 OP_MOVE       R14     R4      ; R4:i
          217 OP_MOVE       R15     R3      ; R3:content
          220 OP_SEND       R15     :length 0
          224 OP_LT         R14     R15
          226 OP_JMPIF      R14     120
    # if(ic->ci->stack[3]`，即R3的内容：
R3类型是`MRB_TT_STRING`，这个string就是`content`变量，即我们输入的32字节。再把`value`的`p`成员转换成`RString`，继续深入查看：
看到了我们的输入存放的位置，此时继续执行，进入循环，每次循环将该位置的内存dump下来：
    pwndbg> x/32xb ((struct RString*)mrb->c->ci->stack[3].value.p)->as.heap.ptr
    0x555555698655: 0x77    0x68    0x6f    0x73    0x79    0x6f    0x75    0x72
    0x55555569865d: 0x64    0x61    0x64    0x64    0x79    0x49    0x53    0x45
    0x555555698665: 0x45    0x44    0x45    0x41    0x44    0x50    0x45    0x4f
    0x55555569866d: 0x50    0x4c    0x45    0x31    0x30    0x30    0x38    0x36
    # 将字母数字从ASCII转为对应的index
    0x555555698700: 0x3a    0x2b    0x32    0x36    0x3c    0x32    0x38    0x35
    0x555555698708: 0x27    0x24    0x27    0x27    0x3c    0x12    0x1c    0x0e
    0x555555698710: 0x0e    0x0d    0x0e    0x0a    0x0d    0x19    0x0e    0x18
    0x555555698718: 0x19    0x15    0x0e    0x01    0x00    0x00    0x08    0x06
    # content[0] ^= 1
    0x555555698700: 0x3b    0x2b    0x32    0x36    0x3c    0x32    0x38    0x35
    0x555555698708: 0x27    0x24    0x27    0x27    0x3c    0x12    0x1c    0x0e
    0x555555698710: 0x0e    0x0d    0x0e    0x0a    0x0d    0x19    0x0e    0x18
    0x555555698718: 0x19    0x15    0x0e    0x01    0x00    0x00    0x08    0x06
    # content[1] ^= 2
    # content[2] ^= 2^content[1]
    0x555555698700: 0x3b    0x29    0x1b    0x36    0x3c    0x32    0x38    0x35
    0x555555698708: 0x27    0x24    0x27    0x27    0x3c    0x12    0x1c    0x0e
    0x555555698710: 0x0e    0x0d    0x0e    0x0a    0x0d    0x19    0x0e    0x18
    0x555555698718: 0x19    0x15    0x0e    0x01    0x00    0x00    0x08    0x06
    # content[3] ^= 4
    # content[4] ^= 4^content[3]
    # content[5] ^= 5^content[4]
    0x555555698700: 0x3b    0x29    0x1b    0x32    0x0e    0x01    0x38    0x35
    0x555555698708: 0x27    0x24    0x27    0x27    0x3c    0x12    0x1c    0x0e
    0x555555698710: 0x0e    0x0d    0x0e    0x0a    0x0d    0x19    0x0e    0x18
    0x555555698718: 0x19    0x15    0x0e    0x01    0x00    0x00    0x08    0x06
    # content[6] ^= 7
    # content[7] ^= 7^content[6]
    # content[8] ^= 8^content[6]
    # content[9] ^= 9^content[6]
    0x555555698700: 0x3b    0x29    0x1b    0x32    0x0e    0x01    0x3f    0x0a
    0x555555698708: 0x17    0x15    0x27    0x27    0x3c    0x12    0x1c    0x0e
    0x555555698710: 0x0e    0x0d    0x0e    0x0a    0x0d    0x19    0x0e    0x18
    0x555555698718: 0x19    0x15    0x0e    0x01    0x00    0x00    0x08    0x06
逻辑虽然难以描述，但是规律还是一目了然，在加上之前逆出的mruby字节码逻辑，还是很容易猜出公式。该循环是一个异或的过程，每次处理1，2，3，4个字节，直到超出数组长度。
写出python还原输入：
    a = [0x16, 0x27, 0x00, 0x35, 0x32, 0x16, 0x18, 0x15, 0x22, 0x21, 0x03, 0x1a, 0x1e, 0x1d, 0x3b, 0x1a,
         0x2d, 0x38, 0x0e, 0x03, 0x28, 0x08, 0x28, 0x0e, 0x2e, 0x31, 0x39, 0x3e, 0x04, 0x1d, 0x15, 0x23 ]
    s = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
    v = 1
    t = 1
    l = 0
    p = 0
    while True:
        a[p] ^= v
        for i in range(l):
            a[p+1+i] ^= (v+i)
            a[p+1+i] ^= a[p]
        v += t
        t += 1
        p += 1 + l
        l += 1
        if l > 6:
            break
    print('flag{{{}}}'.format(''.join(map(lambda x: s[x], a))))
flag: `flag{Nbdn7YVDrt8PQOzAtZMQsUW7eszx4TLZ}`
## 总结
Ruby作为一种灵活的脚本语言，经常在CTF比赛中出现，Ruby的一种实现————mruby解释器是基于寄存器的虚拟机，可以将Ruby代码编译为mruby字节码。mruby的编译器实现得比较简单，没有复制消除等优化过程，生成的字节码可读性很高，稍微静下心来逆出程序的逻辑还是比较容易的。