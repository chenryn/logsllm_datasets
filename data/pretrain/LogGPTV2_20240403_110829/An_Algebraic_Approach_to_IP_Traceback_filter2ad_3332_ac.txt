z1x3
i
y3x2
i
y2xi
6.1. Packets Needed
The receiver sees the values of evaluated degree 5 poly-
nomials; z3x5
y1, for exam-
i
ple. Our goal is to recover the IP addresses of the routers
y3x2
i
z1x3
i
z2x4
i
y2xi
9
:








IP Version(cid:13)
(4-bit)(cid:13)
Header Length(cid:13)
(4-bit)(cid:13)
Type of Service (TOS)(cid:13)
(8-bit)(cid:13)
Total Length(cid:13)
(16-bit)(cid:13)
Fragment ID(cid:13)
(16-bit)(cid:13)
Flags(cid:13)
(3-bit)(cid:13)
Fragment Offset(cid:13)
(13-bit)(cid:13)
Time to Live (TTL)(cid:13)
(8-bit)(cid:13)
Protocol(cid:13)
(8-bit)(cid:13)
Header Checksum(cid:13)
(16-bit)(cid:13)
Source IP Address(cid:13)
(32-bit)(cid:13)
Destination IP Address(cid:13)
(32-bit)(cid:13)
Accumulator(cid:13)
(11-bit)(cid:13)
Random(cid:13)
Data(cid:13)
(3-bit)(cid:13)
Flag(cid:13)
(1)(cid:13)
Figure 3. We choose to use 15 bits from the IP header
(Z and Y in our example) from this data. Using the method
analyze N packets at a time. Therefore, N must be greater
 1 1- 25 d 1 .
of [13], we will need to have  1- 25
/ 5N- N to recover edges distance d away from us if we
 1 1- 25 d 1 2 for us to expect to get
than 5-
length 25 over 98% of the time by analyzing 20 000 pack-
edges distance d away. Figure 5 shows the number of
packets needed for different values of d.
 1- 25
In our simulations, we were able to recover paths of
ets at once, which agrees with our analytic result. In recent
denial of service attacks, Yahoo reported receiving over 1
gigabyte of data per second2. Even if every packet was
of the largest possible size, Yahoo would have received
more than enough packets in under 2 seconds. We realize
that most sites do not have the bandwidth of Yahoo, but we
still think that most sites would be able to recover interest-
ing paths in far less than a minute. We also note that our
scheme will be able to take advantage of any new algo-
rithm for decoding Reed-Solomon codes to improve these
results without any router modiﬁcations. If more than one
path is present in the data, the Guruswami-Sudan algo-
rithm might not ﬁnd all the paths from a single sample of
20,000 packets. Repeating the reconstruction on different
samples might be needed. Trying to ﬁnd all paths from a
single sample would require an increase in the sample size
that was quadratic in the number of paths.
6.2. Router Performance
At the baseline, this scheme is already rather efﬁcient
for routers, requiring only normal ALU operations, com-
pares, and a random number generator. We can, however,
use some precomputation to improve this situation con-
siderably.
We only need to have our degree 5 polynomial evaluated
at 6 points in order to recover it, so we will treat the ran-
dom value 6 as 0 and 7 as 1. This should not cause us any
trouble as long as all routers agree on the change, because
the coupon collector’s problem tells us that we would ex-
pect to get all 6 values in far fewer packets than are re-
quired by our multiple path reconstructor. Even the small-
est routers should be able to precompute and store the 6
possible values that would need to be inserted when they
are in marking mode (these values require only 12 bytes of
storage). If we are storing these values already, we should
also include an extra multiplication by the random value
because that is the ﬁrst thing that the next router would
have to compute. At the victim we would, of course, have
to divide by the random value for all packets that still have
their signal bit set. This reduces the work needed at the
second router to, at most, 2 random number generations,
2 compares, 2 shifts, 5 adds and a reduction modulo 2039.
It is worth noting that this could easily be accomplished
using combinational logic in an ASIC or custom chip. For
larger routers it would probably make sense to precompute
a lookup table with all possible second hop values.
We implemented this scheme under FreeBSD 4.0 on a
Pentium II running at 333 MHz. Using RC4 [20] as the
random number generator, the scheme executed in less
than 50 clocks per packet. When routing packets across
a 100 Mbit/sec Ethernet, there was no measurable dif-
ference in throughput between the modiﬁed and unmodi-
ﬁed kernels (more than 95 Mbit/sec worth of packets were
routed in both cases).
6.3. Reconstruction Performance
2http://abcnews.go.com/sections/tech/
DailyNews/yahoo000209.html
The reconstruction algorithm due to Guruswami and
Sudan [13] can be implemented in a number of ways.
 1
 1- 25
if r5
let x be a random integer from= 0? 7
 z3x2
z1 mod 2039
z2x
set p accumulator
set p f lag
 1
set p random
if p f lag then
 p accumulator p x(
set p accumulator
 p accumulator p x(
set p accumulator
 p accumulator p x(
set p accumulator
set p accumulator
p accumulator mod 2039
set p f lag
 0
Figure 4. Marking algorithm executed by each router
else
x
z3
z2
z1
 out
1. By scaling d
The most straightforward implementation would take time
to recover all edges for which we received at least
time
of n, for any d
appropriately, this
allows us to trade off computation time (and memory)
for accuracy. A recent algorithmic breakthrough by Ol-
shevsky and Shokrollahi would reduce our reconstruction
[16]. Moreover, this new
 n15
/ 5n out of n packets. However, this drops to O n3
by requiring only slightly more packets: , 5n 1
time even further, to O n2A 5
algorithm is highly parallelizable (to up to O n proces-
the multiple attacker scenario to the O m8
These reconstruction times compare quite favorably in
time required
by Savage [19], where m is the number of routers at a
given distance from the victim.
sors), which suggests that distributing the reconstruction
task might speed things up even more.
6.4. Resistance to Attack
While this metric is the most important in evaluating
a traceback scheme it is also the most difﬁcult to analyze.
Our scheme seems to be resistant to all of the same attacks
as the scheme proposed by Savage, et al and even with
current algorithms for ﬁltering mixed data can deal with
multiple attackers more robustly. One major difference
between these schemes is our decision not to include an
explicit hop count which allows Savage’s scheme to deny
an attacker the ability to insert packets closer than his dis-
tance to the victim. We would note that this only prevents
the insertion of edges closer than the closest attacker. An
attack on this would be to have multiple attackers at dif-
ferent distances and use the close attackers to “hide” the
routes of packets from those attackers farther away. Our
scheme also suffers from this problem, but not as severely
because of the built in noise ﬁltering of the Guruswami-
Sudan multiple path reconstruction algorithm. We think
that simply by comparing the frequency at which an edge
is marked to the expected marking probability of the edge,
we can detect false edges closer than the attacker, so long
as the nearest attacker is at least a few hops away. This
technique has worked well in our simulations.
Our schemes could also make use of the HMAC tech-
niques discussed by Song and Perrig to ensure that edges
are not faked, but this would require us to either use ad-
ditional space in the packets to store the hash or lose our
incremental deployment properties [21]. If we decided to
make one of these tradeoffs, our scheme should be com-
parably secure against multiple attackers.
7. Future Work
One important open problem is to ﬁnd better variations
of our Random Full Path tracing schemes. Perhaps an
approach based on algebraic geometric codes [13] would
be successful. We have been unable to ﬁnd a variation
that immediately improves on combinatorial approaches
in all situations, but it seems intuitively plausible that one
should exist. More generally, it would be interesting to
more carefully explore resource and security tradeoffs for
more of the many parameterizations of our methods.
d
@
N
80000
70000
60000
50000
40000
30000
20000
10000
10
20
30
d
40
Figure 5. Number of packets needed to recover different length paths
8. Conclusions
We have presented a new algebraic approach for pro-
viding traceback information in IP packets. Our approach
is based on mathematical techniques that were ﬁrst devel-
oped for problems related to error correcting codes and
machine learning. Our best scheme has improved ro-
bustness over previous combinatorial approaches, both for
noise elimination and multiple-path reconstruction. An-
other key advantage of our schemes is that they will au-
tomatically beneﬁt from any improvement in the underly-
ing mathematical techniques, for which progress has been
steady in recent years.
Acknowledgments
We would like to thank David Goldberg and Dan Boneh
for helpful discussions. We would also like to thank Dawn
Song, Adrian Perrig, and the anonymous referees for help-
ful comments on an earlier version of this paper.
References
[1] P. Almquist. Type of service in the internet protocol suite.
RFC 1349, July 1992.
[2] J. A. Anderson and J. M. Bell. Number Theory with Ap-
plications. Prentice Hall, 1996.
[3] S. Ar, R. J. Lipton, R. Rubinfeld, and M. Sudan. Re-
constructing algebraic functions from mixed data.
In
33rd Annual Symposium on Foundations of Computer Sci-
ence, pages 503–512, Pittsburgh, Pennsylvania, 24–27
Oct. 1992. IEEE.
[4] S. M. Bellovin. Personal Communications, May 2000.
[5] S. M. Bellovin.
ICMP traceback messages. http:
//search.ietf.org/internet- drafts/
draft-bellovin-itrace-00.txt, Mar. 2000.
[6] E. Berlekamp and L. Welch. Error correction of algebraic
block codes. United States Patent 4,490,811, Dec. 86.
[7] E. R. Berlekamp. Algebraic Coding Theory. Aegean Park
Press, 1984.
[8] CERT coordination center denial of service attacks.
http://www.cert.org/tech_tips/denial_
of_service.html, Feb. 1999.
[9] S. Deering and R. Hinden.
Internet protocol, version 6
(IPv6) speciﬁcation. RFC 2474, Dec. 1995.
[10] D. Dittrich. The “stacheldraht” distributed denial of ser-
http://staff.washington.
vice attack tool.
edu/dittrich/misc/stacheldraht.
analysis.txt, Dec. 1999.
[11] D. Dittrich. The ”Tribe Flood Network” distributed denial
of service attack tool. http://staff.washington.
edu/dittrich/misc/tfn.analysis, Oct. 1999.
[12] P. Ferguson and D. Senie. Network ingress ﬁltering: De-
feating denial of service attacks which employ IP source
address spooﬁng. RFC 2267, Jan. 1998.
[13] V. Guruswami and M. Sudan. Improved decoding of Reed-
Solomon and algebraic-geometric codes. IEEE Transac-
tions on Information Theory, 45:1757–1767, 1999.
[14] D. E. Knuth. The Art of Computer Programming, Vol. 2:
Seminumerical Algorithms. Addison-Wesley, 1998.
[15] K. Nichols, S. Blake, F. Baker, and D. Black. Deﬁnition
of the Differentiated Services ﬁeld (DS ﬁeld) in the IPv4
and IPv6 headers. RFC 2474, Dec. 1998.
[16] V. Olshevsky and M. A. Shokrollahi. A displacement ap-
proach to efﬁcient decoding of algebraic-geometric codes.
In 31st Annual ACM Symposium on Theory of Computa-
tion, pages 235–244, Atlanta, Georgia, May 1999. ACM.
[17] W. H. Press, B. P. Flannery, S. A. Teukolsky, and W. T.
Vetterling. Numerical Recipes in FORTRAN: The Art of
Scientiﬁc Computing. Cambridge University Press, 1992.
[18] K. Ramakrishnan and S. Floyd. A proposal to add Ex-
plicit Congestion Notiﬁcation (ECN) to IP. RFC 2481,
Jan. 1999.
[19] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Prac-
tical network support for IP traceback. In 2000 ACM SIG-
COMM Conference, Aug. 2000.
[20] B. Schneier. Applied Cryptography, Second Edition. John
Wiley and Sons, 1996.
[21] D. Song and A. Perrig. Advanced and authenticated
marking schemes for IP traceback. Technical Report
UCB/CSD-00-1107, University of California, Berkeley,
June 2000.
[22] I. Stoica and H. Zhang. Providing guaranteed services
without per ﬂow management. In ACM SIGCOMM ’99,
pages 81–94, Cambridge, MA, 1999.
[23] M. Sudan. Algorithmic issues in coding theory. In 17th
Conference on Foundations of Software Technology and
Theoretical Computer Science, Kharagpur, India, 1997.
[24] M. Sudan. Decoding of Reed Solomon codes beyond the
error-correction bound. Journal of Complexity, 13(1):180–
193, Mar. 1997.