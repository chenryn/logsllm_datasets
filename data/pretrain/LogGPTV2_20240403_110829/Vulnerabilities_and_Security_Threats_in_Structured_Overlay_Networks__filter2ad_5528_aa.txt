title:Vulnerabilities and Security Threats in Structured Overlay Networks:
A Quantitative Analysis
author:Mudhakar Srivatsa and
Ling Liu
Vulnerabilities and Security Threats in Structured Overlay
Networks: A Quantitative Analysis
Mudhakar Srivatsa and Ling Liu
College of Computing, Georgia Institute of Technology
(cid:0)mudhakar, lingliu(cid:1)@cc.gatech.edu
Abstract 1
A number of recent applications have been built on
distributed hash tables (DHTs) based overlay networks.
Almost all DHT-based schemes employ a tight determin-
istic data placement and ID mapping schemes. This fea-
ture on one hand provides assurance on location of data
if it exists, within a bounded number of hops, and on the
other hand, opens doors for malicious nodes to lodge at-
tacks that can potentially thwart the functionality of the
overlay network.
This paper studies several serious security threats in
DHT-based systems through two targeted attacks at the
overlay network’s protocol layer. The ﬁrst attack ex-
plores the routing anomalies that can be caused by mali-
cious nodes returning incorrect lookup routes. The sec-
ond attack targets the ID mapping scheme. We disclose
that the malicious nodes can target any speciﬁc data
item in the system; and corrupt/modify the data item to
its favor. For each of these attacks, we provide quanti-
tative analysis to estimate the extent of damage that can
be caused by the attack; followed by experimental vali-
dation and defenses to guard the overlay networks from
such attacks.
1 Introduction
A number of recent applications have been built on dis-
tributed hash table (DHT) based overlay networks. An
example, of one such popular application is the distributed
ﬁle storage application. These overlay network based
applications are serverless and thus radically differ from
traditional server-based applications. The server based
applications have a single point of control and are thus
optimized to provide very high performance. However,
1This research is partially supported by NSF CNS CCR, NSF ITR,
DoE SciDAC, DARPA, CERCS Research Grant, IBM Faculty Award,
IBM SUR grant, HP Equipment Grant, and LLNL LDRD.
Any opinions, ﬁndings, and conclusions or recommendations ex-
pressed in the project material are those of the authors and do not nec-
essarily reﬂect the views of the sponsors.
server based applications incur heavy administrative over-
heads and maintenance costs. A server requires a ded-
icated administrative staff, upon whose competence its
reliability depends and upon whose trustworthiness its
security depends [1]. Physically centralized servers are
vulnerable to geographically localized faults, and their
store of increasingly sensitive and valuable information
makes them attractive, concentrated targets for subver-
sion and data theft, in contrast to the inherent decentral-
ization of desktop workstations.
A new breed of serverless applications have recently
emerged like SETI@Home [14], Gnutella [6], CFS [4],
Farsite [1] and etc.
In contrast to traditional applica-
tions, they harness the resources available at desktop
workstations that are distributed over a wide-area net-
work. For example, SETI@Home uses the idle comput-
ing power available on personal computers to perform
signal processing; applications like Gnutella, CFS and
Farsite provide a distributed and decentralized ﬁle stor-
age service. As the hardware resources are becoming
cheaper and cheaper, these desktop personal computers
are turning out to be more and more powerful. As a
consequence, a large fraction of computing, networking
and storage resources available at these desktop com-
puters are underutilized [1]. The collective resources
available at these desktop workstations amount to sev-
eral peta-ﬂops of computing power and several hundred
peta-bytes of storage space. Their collective power is
several order of magnitude larger than the most power-
ful supercomputer built so far.
These emerging trends have motivated the develop-
ment of various applications on wide-area overlay net-
works. An overlay network is a virtual network formed
by nodes (desktop workstations) on top of an existing
IP-network. Overlay networks typically support a lookup
protocol. A lookup (or a search) operation identiﬁes
the location of a ﬁle (say, the IP-address of a node that
hosts the ﬁle) given its ﬁlename. There are two kinds
of lookup protocol that have been popularly deployed,
(i) unstructured overlay networks: Gnutella-like over-
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:20 UTC from IEEE Xplore.  Restrictions apply. 
1
lay networks, and (ii) structured overlay networks: dis-
tributed hash tables (DHT) based overlay networks. Un-
structured overlay networks use an inefﬁcient broadcast
based lookup protocol that ﬂoods a search query over the
entire overlay network. A DHT based lookup protocol
intelligently routes a search query such that it reaches
the destination node in a small and bounded number
of hops. This has made DHT-based overlay networks
a popular choice for ﬁle storage applications like CFS,
Farsite and OceanStore.
Serverless applications are faced with the challenge
of having to harness the collective resources of loosely
coupled, insecure, and unreliable machines to provide a
secure, and reliable ﬁle-storage service. To complicate
matters further, some of the nodes in the overlay network
could be malicious. Hence, serverless applications must
be aware of the potential threats that could be caused
by malicious nodes. One way to minimize threats in
these systems is to understand the potential threats and
the level of damages they may cause to the system and to
increase the system’s ability to defend itself from mali-
cious intents, malicious behaviors, and potential threats
incurred by known attacks or unpredicted attacks.
In this paper, we focus primarily on the vulnerability
at the overlay networks layers for serverless application
services. In particular, we focus on several attacks that
can potentially thwart the functionality of the system, by
preventing the nodes from locating or accessing data on
a DHT-based overlay network. The research presented
in this paper has two novel contributions. First, we iden-
tify attacks on the DHT-based routing schemes and iden-
tify some critical properties of the overlay network rout-
ing (lookup) protocol that determine the extent of dam-
age caused by these attacks. Second, we extend in the
results in the Sybil Attack paper [5] and show that if
pseudo-spooﬁng is not controlled by the system then the
malicious nodes can easily target any data item stored in
the system. We provide an in-depth quantitative analysis
on the extent of damage these attacks might cause, fol-
lowed by experimental validations, and present counter
measures against them.
2 Formal Model
In this section, we formally describe a set of common
properties of structured overlay networks. Our formal
model brings out the important concepts behind DHT-
based systems like Chord [17], CAN [12], Pastry [13]
and Tapestry [2] that aid us in analyzing the vulnerabili-
ties and security threats on structured overlay networks.
A typical DHT-based overlay network consists of a
routing table based lookup service. The lookup service
maps a given key to a node (usually the IP-address of the
node) that is responsible for the key. Storage protocols
are layered on top of the lookup protocol. For instance,
CFS [4] is a wide-area cooperative ﬁle system layered
on Chord [17]; while OceanStore [8] is a distributed ﬁle
system layered on Tapestry [2]. A generic DHT-based
lookup service has the following properties:
(P1) A key identiﬁer space, .  is a -bit identiﬁer
space where each data item is mapped to a unique iden-
tiﬁer (cid:2) (cid:0)  using any standard hash function (like MD5
[11] or SHA1 [15]).
(P2) ID Mapping Scheme deﬁnes a node identiﬁer space
(cid:3). For example, Chord uses a one-dimensional circular
identiﬁer space; while CAN uses a (cid:2)-dimensional co-
ordinate space. Each node  is assigned an identiﬁer
(cid:6) (cid:0) (cid:3). Some DHT based systems (CAN [12]) al-
low nodes to choose their identiﬁer, while most others
derive the identiﬁer of a node , namely (cid:6), as a
strong one-way function of an external identiﬁer ((cid:7)(cid:6))
of the node . For example, (cid:6) could be equal to
(cid:8)(cid:9)(cid:8) , where   denotes the IP-address of
node . In this example, IP-address of a node is used as
its external identiﬁer.
(P3) Rules for dividing the node identiﬁer space among
the nodes. The DHT-based schemes deﬁne a responsi-
bility function for every node  which maps it to a con-
tiguous segment of identiﬁer space (cid:3) at time , denoted
as (cid:13)(cid:14). At any given time instant , (cid:1)(cid:13)(cid:14) (cid:2)
 (cid:0)  (cid:3) partitions the node identiﬁer space (cid:3), where
  refers to the total collection of all nodes in the sys-
tem at time . The algorithms also ensure that statis-
tically every node  shares the identiﬁer space equally;
that is, at any time instant , (cid:17)(cid:18)(cid:14)(cid:20) (cid:13)(cid:14) (cid:4) (cid:2)(cid:3)(cid:4)(cid:6) (cid:7)
 
Note that the function (cid:17)(cid:18)(cid:14)(cid:20) depends on the nature of
the identiﬁer space. For example, in Chord, (cid:17)(cid:18)(cid:14)(cid:20) (cid:21)
could be deﬁned as the length of the segment (cid:21); while in
CAN, (cid:17)(cid:18)(cid:14)(cid:20) (cid:21) could be deﬁned as the volume of the
coordinate space spanned by (cid:21).
(P4) Data Placement Scheme speciﬁes rules for map-
ping keys to nodes: A node  is responsible for a key
(cid:22) (cid:0)  at time  if and only if (cid:22) (cid:0) (cid:13)(cid:14). This guar-
antees that any key (cid:22) would always be found since the
set (cid:1)(cid:13)(cid:14) (cid:2)  (cid:0)  (cid:3) partitions the node identiﬁer
space (cid:3).
(P5) Routing Scheme uses the per-node routing tables.
Routing table entries on every node maintain references
to other nodes. More speciﬁcally, a distance metric is
deﬁned between any two identiﬁers (cid:17) and (cid:23) as (cid:2)(cid:17)(cid:17)(cid:24) (cid:23).
For example, in Chord, (cid:2)(cid:17)(cid:17)(cid:24) (cid:23) may be simply de-
ﬁned as the length of the segment (cid:17)(cid:24) (cid:23); while in CAN
(cid:2)(cid:17)(cid:17)(cid:24) (cid:23) could be deﬁned as the Cartesian distance be-
tween the points (cid:17) and (cid:23) in a (cid:2)-dimensional coordinate
space. When a node  is queried for key (cid:22), it returns a
.
2
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:20 UTC from IEEE Xplore.  Restrictions apply. 
node  that is closer to key (cid:1); that is, (cid:2)(cid:3)(cid:7)(cid:9) (cid:1) (cid:0)
(cid:2)(cid:3)(cid:7)(cid:9) (cid:1).
(P6) Rules for updating routing tables as nodes join
and leave. When a new node  joins the network at
time , it typically contacts an existing node  (cid:1)  
such that (cid:7) (cid:1) (cid:11)(cid:12). Note that there always
exists such a node  since the set (cid:2)(cid:11)(cid:12) (cid:3)  (cid:1)
 (cid:4) partitions the identiﬁer space (cid:14). The node  typ-
ically assumes responsibility over a portion of the iden-
tiﬁer space mapped to node ; that is; (cid:11)(cid:12)(cid:0) and
(cid:11)(cid:12)(cid:0) partitions the space (cid:11)(cid:12) for (cid:0) (cid:15) .
Similarly, when a node leaves the network, it hands over
its responsibilities to another node in the system.
The DHT-based systems guarantee location of any
data item within a bounded number of application level
hops. However, this advantage comes with a price: the
DHT-based systems enforce a highly rigid structure and
rely heavily on the correct functioning of (almost) all
nodes in the system. In short, an attacker can potentially
harm the overlay network by targeting these delicately
balanced structures enforced by DHT-based systems.
3 Adversary Model
Adversaries refer to those nodes in the system, which
either intentionally or unintentionally fail to follow the
systems’s protocols correctly. For example, an adver-
sary may try to mislead non-malicious nodes by provid-
ing them with wrong information in the form of incor-
rect lookup results or providing invalid data through the
data storage layer. We also assume that an adversary
may be aware of other malicious nodes and hence, they
may join hands (collude) in a conspiracy against the le-
gitimate nodes.
We assume that the underlying IP-network layer is
secure. Hence, (i) A malicious node has access only
to the packets that have been addressed to it, (ii) All
packets that can be accessed by a malicious node can be
potentially modiﬁed (corrupted) by the malicious node.
More speciﬁcally, if the packet is not encrypted (or does
not include a message authentication code (MAC)) then
the malicious node may modify the packet in its own
interest, and (iii) The underlying domain name service
(DNS), the network routers, and the related networking
infrastructure is completely secure, and hence cannot be
compromised by a malicious node.
We also assume that a malicious node may own one
or more external identiﬁers (like IP-addresses). A ma-
licious node may assume any of the external identiﬁers
it owns. The number of external identiﬁers that could
be owned by a node depends entirely on the nature of
the external identiﬁer. For example, with IP-address as
the EID, introduction of IPv6 [7] could permit a mali-