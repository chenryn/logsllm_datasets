具体代码： src/background/convert.js
__dombasedxssfinder_plus 加法函数
__dombasedxssfinder_equal == 函数
__dombasedxssfinder_notEqual != 函数
__dombasedxssfinder_strictEqual === 函数
__dombasedxssfinder_strictNotEqual !== 函数
__dombasedxssfinder_plus
__dombasedxssfinder_put
__dombasedxssfinder_get
__dombasedxssfinder_new_Function
__dombasedxssfinder_typeof
__dombasedxssfinder_property_call
__dombasedxssfinder_call
import {transform} from '@babel/core';
export default function(src) {
  const visitedKey = '__dombasedxssfinder_visited_key__';
  const plugin = ({ types: t }) => {
    function callExpression(callee, arguments_) {
      const e = t.callExpression(callee, arguments_);
      e[visitedKey] = true;
      return e;
    }
    const visitor = {
      BinaryExpression: {
        enter: (nodePath) => {
          if (nodePath[visitedKey] || nodePath.node[visitedKey]) {
            return;
          }
          const { left, operator, right } = nodePath.node;
          let newAst;
          if (operator === '+') {
            // a + b -> __dombasedxssfinder_plus(a, b)
            newAst = callExpression(
                t.identifier('__dombasedxssfinder_plus'),
                [left, right]
            );
          } else if (operator === '==') {
            newAst = callExpression(
                t.identifier('__dombasedxssfinder_equal'),
                [left, right]
            );
          } else if (operator === '!=') {
            newAst = callExpression(
                t.identifier('__dombasedxssfinder_notEqual'),
                [left, right]
            );
          } else if (operator === '===') {
            newAst = callExpression(
                t.identifier('__dombasedxssfinder_strictEqual'),
                [left, right]
            );
          } else if (operator === '!==') {
            newAst = callExpression(
                t.identifier('__dombasedxssfinder_strictNotEqual'),
                [left, right]
            );
          }
          if (newAst) {
            nodePath.replaceWith(newAst);
            nodePath[visitedKey] = true;
          }
        },
      },
      AssignmentExpression: {
        enter: (nodePath) => {
          if (nodePath[visitedKey] || nodePath.node[visitedKey]) {
            return;
          }
          let { left, operator, right } = nodePath.node;
          if (operator === '+=') {
            // a += b -> a = __dombasedxssfinder_plus(a, b)
            right = callExpression(
                t.identifier('__dombasedxssfinder_plus'),
                [left, right]
            );
          } else if (operator.length >= 2 && operator.endsWith('=')) {
            const subOp = operator.slice(0, -1);
            // a -= b -> a = a - b
            right = t.binaryExpression(subOp, left, right);
          }
          let newAst;
          if (left.type === 'MemberExpression') {
            // a.b = c -> __dombasedxssfinder_put(a, b, c)
            const { object, property, computed } = left;
            let key;
            if (computed) { // a[b], a['b']
              key = property;
            } else { // a.b
              key = t.stringLiteral(property.name);
            }
            newAst = callExpression(
                t.identifier('__dombasedxssfinder_put'),
                [object, key, right]
            );
          } else {
            const assignmentExpression = t.assignmentExpression("=", left, right);
            assignmentExpression[visitedKey] = true;
            newAst = assignmentExpression;
          }
          nodePath.replaceWith(newAst);
          nodePath[visitedKey] = true;
        }
      },
      MemberExpression: {
        enter: (nodePath) => {
          if (nodePath[visitedKey] || nodePath.node[visitedKey]) {
            return;
          }
          const { object, property, computed } = nodePath.node;
          let key;
          if (computed) { // a[b], a['b']
            key = property;
          } else { // a.b
            key = t.stringLiteral(property.name);
          }
          const newAst = callExpression(
              t.identifier('__dombasedxssfinder_get'),
              [object, key]
          );
          nodePath.replaceWith(newAst);
          nodePath[visitedKey] = true;
        }
      },
      NewExpression: {
        enter: (nodePath) => {
          if (nodePath[visitedKey] || nodePath.node[visitedKey]) {
            return;
          }
          const o = nodePath.node;
          const callee = o.callee;
          const arguments_ = o.arguments;
          if (callee.name === 'Function') {
            const newAst = callExpression(
                t.identifier('__dombasedxssfinder_new_Function'),
                arguments_
            );
            nodePath.replaceWith(newAst);
            nodePath[visitedKey] = true;
          }
        }
      },
      UnaryExpression: {
        enter: (nodePath) => {
          if (nodePath[visitedKey] || nodePath.node[visitedKey]) {
            return;
          }
          const { operator, argument } = nodePath.node;
          if (operator === 'typeof') {
            let newAst;
            if (argument.type === 'Identifier') {
              const unaryExpression = t.unaryExpression('typeof', argument, true);
              unaryExpression[visitedKey] = true;
              const binaryExpression = t.binaryExpression('===', unaryExpression, 
t.stringLiteral('undefined'));
              binaryExpression[visitedKey] = true;
              newAst = callExpression(
                  t.identifier('__dombasedxssfinder_typeof'),
                  [
                    // aが未定义の场合、typeof aは通过するが、f(a)はエラーになる。その対応。
                    t.conditionalExpression(
                        binaryExpression,
                        t.identifier('undefined'),
                        argument
                    )
                  ]
              );
            } else {
              newAst = callExpression(
                  t.identifier('__dombasedxssfinder_typeof'),
                  [argument]
              );
            }
            nodePath.replaceWith(newAst);
            nodePath[visitedKey] = true;
          } else if (operator === 'delete') {
            if (argument.type === 'MemberExpression') {
              // delete __dombasedxssfinder_get(a, 'b')だとdeleteされないので、
MemberExpressionを残す
              argument[visitedKey] = true;
            }
          }
        }
      },
      CallExpression: {
        enter: (nodePath) => {
          if (nodePath[visitedKey] || nodePath.node[visitedKey]) {
            return;
          }
          const o = nodePath.node;
          const callee = o.callee;
          const arguments_ = o.arguments;
          let newAst;
          if (callee.type === 'MemberExpression') {
            const { object, property, computed } = callee;
            let key;
            if (computed) { // a[b], a['b']
              key = property;
            } else { // a.b
              key = t.stringLiteral(property.name);
            }
            newAst = callExpression(
                t.identifier('__dombasedxssfinder_property_call'),
                [object, key, ...arguments_]
            );
          } else {
            newAst = callExpression(
                t.identifier('__dombasedxssfinder_call'),
                [callee, ...arguments_]
            );
          }
          nodePath.replaceWith(newAst);
          nodePath[visitedKey] = true;
注⼊的代码
ast解析主要是对源数据进⾏获取，以及对相关的语法结构数据流进⾏标记，注⼊的代码主要就是对敏感函数进⾏
标记，以及实现ast解析需要的函数。
以其中⼀个 docuement.writeLn 的hook为例⼦
        }
      },
      UpdateExpression: {
        enter: (nodePath) => {
          if (nodePath[visitedKey] || nodePath.node[visitedKey]) {
            return;
          }
          const { argument } = nodePath.node;
          if (argument.type === 'MemberExpression') {
            // __dombasedxssfinder_get(this, "activeNums")++;はエラーになるので、
MemberExpressionを残す
            argument[visitedKey] = true;
          }
        }
      },
    };
    return { visitor };
  };
  try {
    const { code, map } = transform(src, {
      parserOpts: { strictMode: false },
      plugins: [plugin],
      configFile: false,
      sourceMaps: true,
      retainLines: true,
      compact: false,
    });
    console.info('map', map);
    return { code, map };
  } catch (e) {
    console.error(e);
    return src;
  }
};
可以看到，会对源数据使⽤ __is_dombasedxssfinder_string_html 判断是否被标记，如果源数据含有被标记
的字段，就会进⾏推送漏洞 __dombasedxssfinder_vulns_push 。
完整的代码如下,在⽂件 src/background/preload.js
const documentWriteln = document.writeln;
document.writeln = function(...text) {
  for (let i = 0; i  sources.push(e));
        }
      }
      if (__is_dombasedxssfinder_string(this)) {
        this.sources.forEach(e => sources.push(e));
      }
      if (sources.size > 0) {
        const str = stringPrototypeConcat.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, { sources });
      }
      return stringPrototypeConcat.apply(this, arguments);
    };
    const stringPrototypeEndsWith = String.prototype.endsWith;
    String.prototype.endsWith = function() {
      return stringPrototypeEndsWith.apply(this.toString(), arguments);
    };
    const stringPrototypeFixed = String.prototype.fixed;
    String.prototype.fixed = function() {
      if (__is_dombasedxssfinder_string(this)) {
        const str = stringPrototypeFixed.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, this);
      }
      return stringPrototypeFixed.apply(this, arguments);
    };
    const stringPrototypeFontcolor = String.prototype.fontcolor;
    String.prototype.fontcolor = function() {
      if (__is_dombasedxssfinder_string(this)) {
        const str = stringPrototypeFontcolor.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, this);
      }
      return stringPrototypeFontcolor.apply(this, arguments);
    };
    const stringPrototypeFontsize = String.prototype.fontsize;
    String.prototype.fontsize = function() {
      if (__is_dombasedxssfinder_string(this)) {
        const str = stringPrototypeFontsize.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, this);
      }
      return stringPrototypeFontsize.apply(this, arguments);
    };
    const stringPrototypeIncludes = String.prototype.includes;
    String.prototype.includes = function() {
      return stringPrototypeIncludes.apply(this.toString(), arguments);
    };
    const stringPrototypeIndexOf = String.prototype.indexOf;
    String.prototype.indexOf = function() {
      return stringPrototypeIndexOf.apply(this.toString(), arguments);
    };
    const stringPrototypeItalics = String.prototype.italics;
    String.prototype.italics = function() {
      if (__is_dombasedxssfinder_string(this)) {
        const str = stringPrototypeItalics.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, this);
      }
      return stringPrototypeItalics.apply(this, arguments);
    };
    const stringPrototypeLastIndexOf = String.prototype.lastIndexOf;
    String.prototype.lastIndexOf = function() {
      return stringPrototypeLastIndexOf.apply(this.toString(), arguments);
    };
    const stringPrototypeLink = String.prototype.link;
    String.prototype.link = function() {
      if (__is_dombasedxssfinder_string(this)) {
        const str = stringPrototypeLink.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, this);
      }