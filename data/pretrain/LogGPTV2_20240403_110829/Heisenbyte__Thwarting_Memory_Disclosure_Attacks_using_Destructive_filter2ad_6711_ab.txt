tion [15] or basic block [27] are diﬀerent. Without this,
an adversary can ﬁnd code pointers in non-executable
memory and infer the code layout of the rest of the
memory without directly reading them.
• Defenses against JIT attacks: We also assume that
ﬁne-grained ASLR is applied to JIT engines [13], ne-
cessitating an adversary to perform a scan of the JIT
memory pages to locate usable code reuse gadgets.
3. HEISENBYTE DESIGN
In this section, we describe our destructive code read prim-
itive and how it thwarts memory disclosure attacks. Since
our goal is to extend protection against memory disclosure
attacks to COTS binaries, we also detail the challenges in
determining static data from code in disassembled binaries
and how they motivate our defense approach.
3.1 Destructive Code Reads
3.1.1 Review of Instruction Pipeline
We brieﬂy review what happens in the CPU pipeline when
an instruction dereferences memory for its data. This is to
familiarize the reader with the distinction between a memory
read or write operation that uses memory as data and an
instruction fetch operation (which is also a special form of
memory read operation) that uses memory as code.
Figure 2 shows the execution of a jmp instruction, a typical
implementation of a switch statement and a very common
example of both code and data residing within the same
memory page marked as executable. To aid explanation, we
present the raw byte representation as well as its disassem-
bled instructions. Without loss of generality, we assume the
use of 4kB memory pages for the rest of our paper. While we
have demarcated the bytes that are intended to be read as
data from those intended to be executed as code, note that
MMU94 C3 00 0000 30 00 00...33 C0 FF 24 8500 01 00 000x100:0x104:... :0x200:0x202:jmp 0x100[eax*4]Instruction PipelinePhysical MemoryCPU0x0000c3940x00000300...xor eax, eaxjmp 0x100[eax*4]Raw BytesDisassembly123Instruction FetchMem Load/StoreMemory intended as codeMemory intended as dataEIP: 0x202Figure 3: Destructive code read process.
the processor is oblivious to this; all the processor knows of
is the access permissions of a given memory page.
In Step 1 , the CPU performs a code fetch of the jmp in-
struction from the 0x202 address pointed to by the Extended
Instruction Pointer (EIP). The instruction is decoded and
the CPU determines that it needs to dereference the mem-
ory at a base address of 0x100 and an oﬀset given by the
register eax for its branching destination. Since the address
0x100 is in the virtual addressing mode, the CPU has to
translate the address to the corresponding physical address
via the Memory Management Unit (MMU) in Step 2 . For
simplicity, we assume an identity mapping of the virtual to
physical addresses. Subsequently, the CPU dereferences the
address 0x100 via a memory load operation in Step 3 , and
completes the execution of the jmp instruction.
3.1.2 Destructive Code Read Process
In Figure 3, we detail the process of how destructive code
read can thwart executable memory disclosure attacks. Ev-
ery Windows program binary comes with a PE header that
allows us to parse and identify all static memory sections
that are marked as executable. We maintain a duplicate
copy of these executable memory pages to be used as data
in the event of a memory read dereferencing operation. Fur-
ther, in order to detect read operations in the executable
memory page, we need to mark that page as execute-only.
In Figure 3(a), we show this duplicate page directly be-
low the executable page. Like in the earlier example, the
instruction is fetched at Step 1 , and the memory address
of the data to be dereferenced is translated via the MMU at
Step 2 . When a memory dereferencing for the data address
occurs at Step 3 , this invokes a memory access violation.
The destructive code read begins at this point, shown in
Figure 3(b). When we detect the read operation of the exe-
cutable page, we overwrite the byte at the faulting memory
address with a random byte at Step 4 . At Step 5 , via the
MMU, we redirect the virtual address of the memory read
to a diﬀerent physical address that points to our duplicate
page. We can then service the read operation transparently
with the original data value at Step 5 , and the instruction
that uses that data can function normally. Next, we show
how these operations, speciﬁcally Step 4 , have set up a sys-
tem state that can thwart a memory disclosure attack.
3.1.3 Thwarting Memory Scan Attacks
Since code and data are serviced by separate memory
pages depending on the operation, the bytes that are read
from executable memory pages may no longer be the same
as the ones that can be executed at the same virtual address.
Given that a legitimate application has previously derefer-
enced the memory address 0x100 as data, the code memory
address at 0x100 now contains a randomized byte. Execut-
ing the instruction at this address will lead to unintended
operations. For instance, in Figure 3(c) if the adversary
uses a memory disclosure bug to read the memory contents
of 0x100, she sees the original byte sequence “94 C3”, which
represents a commonly found stack pivot gadget2. Think-
ing that she has found the stack pivot gadget, she sets up
her dynamic code reuse payload to use the address 0x100.
Since the earlier code read operation has “destroyed” the
byte there with the random byte FF, when the code reuse
payload executes the instruction at address 0x100, the gar-
bled byte sequence “FF C3” is executed as inc ebx. This
eﬀectively stems the further progress of the exploit.
3.2 Statically Separating Code and Data
Our use of destructive code reads in Heisenbyte at run-
time is motivated by the (im)possibility of precisely and
completely distinguishing disassembled bytes intended to be
data from those intended to be instructions during runtime.
This leads us to adopt a fundamentally diﬀerent strategy
from the earlier works that enforce execute-only memory us-
ing compiler-based techniques. Instead of determining the
code or data nature of bytes during oﬄine static analysis and
enforcing runtime execute or read policies based on this, we
infer the code/data nature of bytes at runtime, identify the
inferred data bytes in executable memory, and remove the
possibility of using them as executable code in attacks. We
describe some of the main challenges of accurately identi-
fying data in executable sections of Windows binaries, and
how we sidestep these challenges using binary rewriting.
3.2.1 Challenges in Distinguishing Data from Code
Halting Problem Legitimate data must be separated
out from the disassembled bytes of the executable sections
2A sequence of instructions modifying the stack pointer to
address a code location of the adversary’s choosing
MMU94 C3 00 0000 30 00 00...33 C0 FF 24 8500 01 00 000x100:0x104:... :0x200:0x202:jmp 0x100[eax*4]Instruction PipelinePhysMemCPU12394 C3 00 0000 30 00 00...33 C0 FF 24 8500 01 00 00Memory marked as execute-onlyMMUFF C3 00 0000 30 00 00...33 C0 FF 24 8500 01 00 000x100:0x104:... :0x200:0x202:CPU494 C3 00 0000 30 00 00...33 C0 FF 24 8500 01 00 00MMUFF C3 00 0000 30 00 00...33 C0 FF 24 8500 01 00 000x100:0x104:... :0x200:0x202:CPU594 C3 00 0000 30 00 00...33 C0 FF 24 8500 01 00 000x1100:0x1104:... :0x1200:0x1202:6FFFF(a) Memory read of execute-only memory detected(b) Destructively read executable memory(c) Shellcode uses executable memory read earlier0x1100:0x1104:... :0x1200:0x1202:EIP: 0x202Shellcode0x100EIP: 0x100Executed:  inc ebxDesired:  xchg eax,esp      retFigure 4: Flowchart of conﬁguration of EPT for monitored executable pages.
of the binaries. To do so requires making a judgment on
whether or not a range of bytes is intended to be used as
data at runtime. While heuristics can be used to make that
judgment, this code or data separation task at binary level
essentially reduces to the halting problem because we can
be sure only at runtime when bytes are truly intended to be
code, and yet we want to do this during static analysis [28].
JIT Code Generation Web scripting languages such
as Javascript are optimized for eﬃcient execution by mod-
ern web browsers using just-in-time compilation. While the
newer versions of web browsers like Internet Explorer and
Mozilla Firefox separate the code and data into diﬀerent
memory pages, with the latter in non-executable ones [1],
the older versions however emit both code and data on same
executable pages. We want to support the use of these legacy
JIT engines.
Corner Cases
In our analysis of Windows shared li-
braries, we found that there are many corner cases where
the disassembler cannot accurately determine statically if a
chunk of bytes is intended to be data or code. This stems
from the limitations of the disassembly heuristics used by
the disassembling engine.
A common example of incorrect disassembly is the mis-
classiﬁcation of isolated data bytes as RET return instruc-
tions within a data block. A RET instruction is represented
in assembly as a one-byte opcode, and can potentially be
a target of computed branch instructions whose destination
cannot be statically decidable. Therefore, the disassembler
frequently misclassiﬁes data bytes that match the opcode
representation of return instructions as code.
We also found situations which assume that code and data
sections are located in a speciﬁc layout. For example, in
kernel32.dll, a shared library used by all Windows bina-
ries, the relocation section indicates a chunk of bytes that
are dereferenced as data at the base of the executable .text
section. Because a readable and writable data section .data
almost always follows this .text section, any instruction
referencing this data also assumes that 400 bytes following
this address has to be a writable location. This structural
assumption is extremely diﬃcult to discern during oﬄine
static analysis. If we blindly relocate this data from the ex-
ecutable .text section to another section without respecting
this structural assumption, a crash is inevitable.
3.2.2 Our Conservative Separation Approach
As mentioned previously legacy COTS binaries, especially
Windows native programs and libraries, have substantial
amount of legitimate data interleaved with code in the ex-
ecutable sections. Blindly retaining these data can lead to
exhorbitant overheads in Heisenbyte as read access to each
of the these data items in the executable memory will incur
the overhead of the destructive code read operation.
To mitigate these overheads, we perform very conservative
static analysis to determine well-deﬁned data structures that
can be safely relocated out of the executable sections without
aﬀecting the functionality of the program. For instance, in
many legacy Windows binaries, the read-only data sections
are merged with the code section. This is not a problem
because the format for the data section is well-documented.
Similarly, we also handle well-structured data chunks like
strings, jump tables and exception handling information.
Here, we describe examples of these legitimate data chunks
commonly interspersed with code in the executable sections
of Windows COTS binaries.
Standard data sections Many Windows native bi-
naries have the standard non-executable data-only sections
embedded within the executable .text section. Examples
include the Import Address Table, the Export Address Ta-
ble and debug conﬁguration section.
Merged data sections An optimization technique to
minimize the ﬁle sizes of programs is to merge the read-
only data section (.rdata) and the main executable section
(.text)3. This technique is commonly used in Windows
native binaries and shared DLL libraries. We are speciﬁcally
targeting the relocation of two types of read-only data in this
section, namely strings and Structured Exception handler
(SEH) structures, since they are well deﬁned.
Jump tables High-level switch statements are imple-
mented as jump instructions and jump tables in assembly.
Compilers typically position the jump table oﬀsets near the
jump instructions that use jump tables. These jump tables
are intended to be dereferenced as data at runtime.
4. SYSTEM IMPLEMENTATION
In this section, we detail the various components of Heisen-
byte, and how we realize the mechanism of destructive code
reads on selected executable memory pages. As shown in
Figure 4, we achieve this in three diﬀerent stages. We begin
by rewriting the program binaries that we want to protect to
separate speciﬁc data from the code in an Oﬄine Prepa-
ration stage. We detail this process in § 4.1.
To ensure that our destructive read operations only ap-
ply to the processes we want to protect, Heisenbyte pro-
cesses targeted executable memory pages in the following
two modes. We discuss each of them in detail in § 4.2.
• Initialization mode: This mode identiﬁes at runtime
selected executable memory pages to protect, and sub-
sequently conﬁgures execute-only access permissions
for these pages, in preparation for the next mode.
3This can be achieved using Microsoft Visual Studio com-
piler with the linker ﬂag /merge:.rdata=.text.
Active Monitoring ModeIdentify executable memory pagesStatic rewritten binariesDynamic JIT codeMark pages as execute-only using EPT QueueInitialization ModeNew process loadedNew JIT buffer created#EPT read violationDestructive code read operationOﬄine PreparationStatic program binariesBinary rewritingRewritten program binaries• Active monitoring mode: Once the set of executable
pages is conﬁgured with the desired EPT permissions,
this mode is then responsible for performing the de-
structive code read operation when it detects a read
operation to an executable page.
Furthermore, to demonstrate that the technique is prac-
tical on COTS binaries, we invest substantial eﬀort in this
work to develop Heisenbyte to work on the primarily close-
sourced Windows OS. The techniques and design presented
in this work can be generalized to other OSes like Linux.
4.1 Ofﬂine Static Binary Rewriting
Recognizing well-deﬁned data in disassembly We
use the state-of-the-art commercial disassembler, IDA Pro,
to generate the disassembled code listing of the programs.
We also leverage IDA Pro’s built-in functionality to identify
well-deﬁned data structures (described in earlier sections)
commonly found in executable memory pages.
Rewriting engine We develop our binary rewriting
engine as a Python script. Unlike traditional binary rewrit-
ing tools, we do not perform any rewriting operations that
change the semantics of instructions. Our engine focuses
on using disassembly information from IDA Pro and the
section headers to determine if a range of bytes within an
executable section needs to be relocated to a separate data
section. Our engine reconstructs the PE header to add a
new non-executable section to consolidate all these identi-
ﬁed data. Relocation information is crucial in aiding both
our static analysis and our relocation operations. For exam-
ple, if a range of data bytes needs to be relocated to another
section, the relocation table is updated either by adding new
relocation entries or editing existing ones to reﬂect the new