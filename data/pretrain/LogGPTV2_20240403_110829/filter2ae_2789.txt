# ‘FakeUpdates’恶意活动利用大量网站传播木马

## 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。

## 一、前言
自2017年12月以来，越来越多的合法网站被发现带有恶意威胁程序。这些程序通过社会工程手段诱导用户下载看似真实的虚假更新通知。一个利用雅虎等高流量网站上的恶意广告来散布恶意软件的组织也采用了类似的技术。这种模式让人联想到EITest的HoeflerText活动，其中被黑网站先是被炒作提高热度，然后提供下载恶意字体文件的链接。最近，Magebto网站也遭受了一场类似的恶意活动影响，推送了虚假的Flash Player更新通知，实际上是AZORult窃取器（一种信息窃取恶意软件）。

今天，我们将深入探讨我们称之为“FakeUpdates”活动的具体细节，包括其复杂的过滤机制和逃避检测的技巧。最早的例子是由BroadAnalysis在2017年12月20日报道的。所谓的更新文件并不是可执行文件，而是从Dropbox（一种合法的文件托管服务）上下载的脚本，如下图所示：

**图1：一个被入侵网站上典型的重定向到‘虚假更新’界面的例子**

此次恶意活动以类似的方式影响了大量的内容管理系统（CMS）。我们检查的几个网站都没有及时更新，因此容易受到恶意代码注入的影响。攻击者可能使用相同的技术批量查找可以入侵的网站并建立相应的数据库来存储这些受害网站地址，但目前尚无足够的信息证明这一点。

## 二、WordPress 和 Joomla
被攻击的WordPress和Joomla网站在其CMS的JavaScript文件中都存在相同的注入代码。

**图2：被入侵的WordPress站点推出的虚假Google Chrome更新**

**图3：被入侵的Joomla 站点推出的虚假Mozilla Firefox更新**

一些常用的库文件如`jquery.js`和`caption.js`已被附加了额外的代码。通过与原文件对比可以发现这些差异。

**图4：与原文件对比后发现的额外代码**

这些额外的代码负责将欺诈网页加载到用户访问的网站上。下图显示了在CMS平台中注入代码的优化版本，其目标是访问重定向后的URL：

**图5：起重定向功能的注入代码**

我们编写了一个简单的抓取规则来抓取一系列受害网站传输的数据包并对结果进行解析。即使列表中有少量重复项，但我们仍能识别出数百个受影响的WordPress和Joomla网站。尽管我们没有确切的受害网站数量，但我们推测会有成千上万的网站受到影响。

**图6：部分遭入侵的网站列表**

## 三、Squarespace
Squarespace是一款非常受欢迎的CMS，但也受到了这场恶意活动的影响。@Ring0x0指出了这一点。我们在2月28日发现了一篇论坛帖子，一位Squarespace用户寻求帮助，称他经常被重定向到另一个页面，显示“您的Chrome版本需要更新”。

**图7：一个Squarespace用户称他们的站点已遭到篡改**

登录管理面板后，用户发现Git历史记录中显示了一个从未登录过的用户在上周上传了`site-bundle.js`及其他大文件。

进一步分析这些案例，我们发现在WordPress和Joomla网站中使用的重定向策略略有不同。对于Squarespace，攻击者直接将一段JavaScript代码注入到网站的主页中。

**图8：在Squarespace站点中恶意重定向发生时的流量**

该代码从`query[.]network`获取源文件，然后从`boobahbaby[.]com`拉取`bundle.js`。

**图9：被入侵的Squarespace站点中的注入代码**

`bundle.js`中包含了我们在之前提到的重定向URL脚本中的相同内容。

**图10：在WP和Joomla入侵过程中使用的相同的重定向代码**

根据PublicWWW查询结果显示，超过900个Squarespace网站已经被注入了这个恶意重定向代码。

**图11：使用字符串模式识别出的其他被入侵的Squarespace网站**

## 四、重定向URL及过滤
所有CMS都会触发具有类似模式的重定向URL，最终加载欺诈性的更新主题网页。根据我们的测试，这些URL具有特定于CMS的标识符；例如，`cid=221`表示与WordPress站点相关，而`cid=208`表示与Joomla站点相关。

- **WordPress**
  - `track.positiverefreshment[.]org/s_code.js?cid=221&v=8fdbe4223f0230a93678`
  - `track.positiverefreshment.org/s_code.js?cid=225&v=0bbea7365fbb07c7acb3`
  - `track.amishbrand[.]com/s_code.js?cid=205&v=c40bfeff70a8e1abc00f`
  - `track.amishbrand.com/s_code.js?cid=228&v=e8bfa92965d1d880bac2`
  - `track.amishbrand[.]com/s_code.js?cid=234&v=59f4ba6c3cd7f37abedc`
  - `track.amishbrand[.]com/s_code.js?cid=237&v=7e3403034b8bf0ac23c6`

- **Joomla**
  - `connect.clevelandskin[.]com/s_code.js?cid=208&v=e1acdea1ea51b0035267`
  - `track.positiverefreshment[.]org/s_code.js?cid=220&v=24eca7c911f5e102e2ba`
  - `track.amishbrand[.]com/s_code.js?cid=226&v=4d25aa10a99a45509fa2`

- **SquareSpace**
  - `track.amishbrand[.]com/s_code.js?cid=232&v=47acc84c33bf85c5496d`

- **Open Journal Systems**
  - `track.positiverefreshment[.]org/s_code.js?cid=223&v=7124cc38a60ff6cb920d`

- **未知CMS**
  - `track.positiverefreshment[.]org/s_code.js?cid=211&v=7c6b1d9ec5023db2b7d9`
  - `track.positiverefreshment[.]org/s_code.js?cid=227&v=a414ad4ad38395fc3c3b`

在这个基础设施上还有其他有趣的组件，比如广告轮播：

- `track.positiverefreshment.net:81/adrotator/banner.js?cid=100`

如果我们专注于重定向代码本身，我们会注意到潜在的受害者在被重定向的同时也会被进行指纹识别（收集用户信息进行验证，包括Cookie等）。最终重定向到虚假更新主题页面是有条件的，即每个IP只能访问一次。最后一个JavaScript负责为下一个序列创建iframe URL。

**图12：这里执行指纹识别、Cookie验证和iframe重定向**

## 五、虚假更新主题
攻击者使用了Chrome、Firefox和Internet Explorer浏览器的模板，后者会被替换为Flash Player更新界面。

**图13：攻击者将目标锁定在具有专业外观模板的浏览器上**

这个虚假的更新界面托管在被入侵网站的主机中，其地址是短生命周期的URL子域名。其中一些域名是激活的（合法网站），还有一些是处于停放状态的。

- **合法域名**
  - `https://pask.spgolfshoes[.]com/95b40f61578eed04ff464c5055990abbupdate{trimmed}`

**图14：该凭证很可能已被盗用并用于注册恶意子域名**

- **停放域名**
  - `http://zlsk.redneckonize[.]com/wordpress/article.php?f=445327&g={trimmed}`

**图15：停放域名可以隐藏别有用心的心机**

## 六、最终的感染链及payloads
感染始于从Dropbox文件托管服务上下载的伪装成JS文件的虚假更新。指向Dropbox的链接（会定期更新）在第一次Web会话期间被混淆。

**图16：fileURL变量包含Dropbox URL**

这个JavaScript文件被严重混淆，静态分析十分困难。它还会隐藏一些重要指纹以逃逸虚拟机和沙箱。

**图17：从DropBox上下载下来的恶意JavaScript**

根据FireEye的一篇文章对恶意JS文件的详细分析，这是因为在受害过程的第二步中使用了WScript。通过网络和WMI收集受害者系统信息（BIOS、制造商、体系结构、MAC地址、进程信息等），并最终决定是否继续使用payload进行入侵或结束脚本运行。

以下是一次失败的感染，向C2服务器返回两个回调：

**图18：检测到不是真正机器的主机，于是中止感染**

如果是一次成功的感染，会向C2服务器返回三个回调（包括payload）：

**图19：验证通过后，受害者收到payload**

经过编码的payload流经过`wscript.exe`解码，在`%temp%`文件夹下释放出恶意二进制文件（如`Chrome_71.1.43.exe`）。这个文件是经过数字签名的，并且包含各种逃逸技术（如立即重启）以抵御沙箱。

**图20：数字签名的文件不能保证安全**

经过检查，我们确定这是Chthonic银行恶意软件（ZeusVM的一种变种）。一旦系统重启，Chthonic就会从`94.100.18[.]6/3.bin`拉取一个重要的配置文件。

在第二次尝试中，我们得到了NetSupport远程访问工具（一种商业的远程访问木马）。其安装和配置在这篇博客中得到了很好的介绍。我们再次注意到，在整个交付过程中大量使用了出于恶意目的（如文件传输、远程桌面等）的混淆。

**图21：RAT感染流量，显示了其后端服务器**

## 七、总结
此次恶意活动依赖于交付机制，利用社会工程手段骗取受害者下载，滥用合法的文件托管服务使其更加可信。诱饵文件由一个脚本而不是恶意可执行文件组成，这使得攻击者能够灵活地开发使用各种混淆方法和指纹技术。

遭到入侵的网站不仅被用来重定向用户，还挂着虚假更新的界面，使其所有者不知情地参与到恶意软件活动中。因此，保持CMS更新并做好身份认证非常重要。

## 八、IOC
### 重定向域名
- `23.152.0[.]118`
- `84.200.84[.]236`
- `185.243.112[.]38`
- `eventsbysteph[.]com`
- `query[.]network`
- `connect.clevelandskin[.]net`
- `connect.clevelandskin[.]org`
- `track.amishbrand[.]com`
- `track.positiverefreshment[.]org`

### 恶意二进制文件
#### Chtonic
- `6f3b0068793b277f1d948e11fe1a1d1c1aa78600712ec91cd0c0e83ed2f4cf1f`
- `94.100.18[.]6/3.bin`

#### NetSupport RAT
- `4d24b359176389301c14a92607b5c26b8490c41e7e3a2abbc87510d1376f4a87`