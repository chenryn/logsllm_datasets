dates a1, . . . , am ∈ R. For instance, for the query f := ”What is your favorite lecture? ”
the sequence of candidates a1, . . . , a5 might be Algebra, Logic, Security, Cryptography,
Java and the individual data set d2 of student P2 who prefers the lecture Security is
a histogram of the form 0, 0, 1, 0, 0. The algorithm outputs the winning candidate ak
drawn according to ε
Utility function. Our approach is general and can support any arithmetic utility
function. For the sake of presentation, we focus on the following utility function
q((z1, . . . , zm), ai) = zi for all histograms d = (z1, . . . , zm) and candidates a1, . . . , am,
returning the frequency zi of candidate ai stored in d. For instance, in the above ex-
ample q(d2, Security) = 1 and q(d2, ai) = 0 for all candidates ai, where i ∈ {1, 2, 4, 5}.
q(d1, . . . , dm).
11
eq(D,a)
q(D) = ak
k=1 eq(D,ak)].
q(D) = ak
q(D) = a2
q(D) = ak
q(D) = a1
(cid:3)] corresponds to aj ← ε
(cid:3) = 0.7. We draw a random
number r from (0, 1] and check whether r is in interval (0, 0.3] or in interval (0.3, 1]. In
this example, the drawing of 0.86 ← U(0,1] corresponds to a2 ← ε
Since ∆q = 1 it can be omitted from the algorithm. The privacy parameter λ is thus
set to 
2 .
Random variable. Our goal is to compute the exponential mechanism ε
q(D) for a
discrete range R, where |R| = m. The probability mass [8, 44] for the exponential
(cid:80)m
j=1 eq(D,aj ) . As pointed out by Alhadidi et
al. [8], drawing a random value according to this distribution corresponds to mapping
the above deﬁned probability mass onto the interval (0, 1] and drawing a random num-
ber r in (0, 1] to select the interval of the winning candidate. Formally, r ← U(0,1] and
q(D). For
mechanism is deﬁned as Pr(cid:2)ε
q(D) = a(cid:3) =
(cid:3) ,(cid:80)j
k=1 Pr(cid:2)ε
k=1 Pr(cid:2)ε
r ∈ ((cid:80)j−1
(cid:3) = 0.3 and Pr(cid:2)ε
instance, assume Pr(cid:2)ε
It is easy to see that by multiplying with S := (cid:80)m
(cid:3) ,(cid:80)j
k=1 Pr(cid:2)ε
k=1 Pr(cid:2)ε
r ∈ ((cid:80)j−1
k=1 eq(D,ak)], since Pr(cid:2)ε
((cid:80)j−1
k=1 eq(D,ak),(cid:80)j
((cid:80)j−1
k=1 eq(D,ak),(cid:80)j
k=1 eq(D,ak),(cid:80)j
((cid:80)j−1
this value by In =(cid:80)m
Algorithm. Our algorithm consists of the following steps3: (i) Initialize the interval
border I0 (line 1). (ii) Compute the joint histogram d = d1 + . . . + dn (line 3) by
adding the frequencies for each individual candidate. (iii) Compute interval borders
for candidates (line 4 - 5). (iv) Draw a random value r in (0, 1] (line 6) and multiply
j=1 eq(D,aj ), resulting in the scaled random value r(cid:48). (v) Check
into which of the intervals (Ij−1, Ij] the random value r(cid:48) falls (line 7) by using binary
search that returns k such that Ik−1  max((cid:100)log((cid:96) + f )(cid:101) ,(cid:100)log(γ)(cid:101))
and q > max(22(cid:96), 2γ, 2k). For ease of exposition, we assume that γ = 2(cid:96) for integers
and ﬁxed point numbers, and that f = γ
Input Distribution and Output Reconstruction. We assume that prior to the
computation the users P1, . . . , Pn create β shares of their respective integer or ﬁxed
point inputs d1, . . . , dn in the (β, β)-sharing form and distribute them amongst the β
computation parties C1, . . . Cβ, so that each party Ck holds a share of each input value
[di], for k ∈ {1, . . . , β} and i ∈ {1, . . . , n}.
Notice that the input values are either integers or ﬁxed point numbers and they
are only subject to addition operations. Therefore, for security against β − 1 (instead
of (cid:98) β−1
2 (cid:99)) compromised parties, we perform (β, β) sharing for input values to obtain
[·]β. For DP noise generation, we still rely on the honest majority assumption and
2 (cid:101)) sharing. After the parties C1, . . . , Cβ jointly
correspondingly use the usual (β,(cid:100) β+1
computed the shared result [w]β of the sanitization mechanism, the parties collaborate
to reconstruct the result w as w = Rec([w]β).
General Overview. Intuitively, the instantiation for the most part unfolds the math-
ematical operations used in the algorithms presented in § 3 and replaces them by the
corresponding SMPCs for arithmetic operations listed in § 2.
Additions for both integers and ﬁxed point numbers are very fast, while for ﬂoat-
ing point values, the protocol is costly. We thus choose the n shared data inputs
[d1], . . . , [dn] to the mechanisms to be ﬁxed point or integer numbers respectively to
lower the cost of adding them together to yield the joint unperturbed query result
[d1] + . . . + [dn]. 4 We compute the noise values in ﬂoating point form as the required
logarithm and exponentiation operations are only available for distributed ﬂoating point
arithmetic. We use the conversion operations FP2FL, FL2Int, Int2FL whenever neces-
4As we pointed out before, this also allows us to rely on (β, β) sharing for input values.
13
n(cid:80)
In: Shared ﬁxed point form (γ, f ) inputs [d1]β, . . . , [dn]β; λ = ∆f

Out: w = (
di) + Lap(λ) in the ﬁxed point form
[d]β = FPAdd([d]β, [di]β)
i=1
1: [d]β = [d1]β
2: for i = 2 to n do
3:
4: [rx] = RandInt(γ + 1); [ry] = RandInt(γ + 1)
5: (cid:104)[vx], [px], 0, 0(cid:105) = FP2FL([rx], γ, f = γ, (cid:96), k)
6: (cid:104)[vy], [py], 0, 0(cid:105) = FP2FL([ry], γ, f = γ, (cid:96), k)
7: (cid:104)[vx/y], [px/y], 0, 0(cid:105) = FLDiv((cid:104)[vx], [px], 0, 0(cid:105),(cid:104)[vy], [py], 0, 0(cid:105))
8: (cid:104)[vln], [pln], [zln], [sln](cid:105) = FLLog2((cid:104)[vx/y], [px/y], 0, 0(cid:105))
log2 e ,(cid:104)[vln], [pln], [zln], [sln](cid:105))
9: (cid:104)[vz], [pz], [zz], [sz](cid:105) = FLMul( λ
10: [z] = FL2FP((cid:104)[vz1 ], [pz1 ], [zz1], [sz1](cid:105), (cid:96), k, γ)
11: [w]β = FPAdd([d]β, [z])
12: return w = Rec([w]β)
Table 2: Protocol: Distributed LM
In: Shared integer number (γ) inputs [d1]β, . . . , [dn]β; λ = e
− 
∆f ; α =
1
ln λ·log2 e
n(cid:80)
Out: integer w = (
di) + DLap(λ)
i=1
[d]β = IntAdd([d]β, [di]β)
1: [d]β = [d1]β
2: for i = 2 to n do
3:
4: [rx] = RandInt(γ + 1); [ry] = RandInt(γ + 1)
5: (cid:104)[vx], [px], 0, 0(cid:105) = FP2FL([rx], γ, f = γ, (cid:96), k)
6: (cid:104)[vy], [py], 0, 0(cid:105) = FP2FL([ry], γ, f = γ, (cid:96), k)
7: (cid:104)[vlnx], [plnx], [zlnx], [slnx](cid:105) = FLLog2((cid:104)[vx], [px], 0, 0(cid:105))
8: (cid:104)[vlny], [plny], [zlny], [slny](cid:105) = FLLog2((cid:104)[vy], [py], 0, 0(cid:105))
9: (cid:104)[vαlnx], [pαlnx], [zαlnx], [sαlnx](cid:105) =
FLMul(α,(cid:104)[vlnx], [plnx], [zlnx], [slnx](cid:105))
10: (cid:104)[vαlny], [pαlny], [zαlny], [sαlny](cid:105) =
FLMul(α,(cid:104)[vlny], [plny], [zlny], [slny](cid:105))
11: (cid:104)[vz1], [pz1], [zz1 ], [sz1 ](cid:105) =
FLRound((cid:104)[vαlnx], [pαlnx], [zαlnx], [sαlnx](cid:105), 0)
12: (cid:104)[vz2], [pz2], [zz2], [sz2 ](cid:105) =
FLRound((cid:104)[vαlny], [pαlny], [zαlny], [sαlny](cid:105), 0)
13: [z1] = FL2Int((cid:104)[vz1 ], [pz1], [zz1], [sz1](cid:105), (cid:96), k, γ)
14: [z2] = FL2Int((cid:104)[vz2 ], [pz2], [zz2], [sz2](cid:105), (cid:96), k, γ)
15: [w]β = IntAdd([d]β, IntAdd([z1],−[z2]))
16: return w = Rec([w]β)
Table 3: Protocol: Distributed DLM
sary.
14
[zj]β = IntAdd([zj]β, [di(j)]β)
In: [d1], . . . , [dn]; the number m of candidates; λ = 
2
Out: m-bit w, s.t. smallest i for which w(i) = 1 denotes winning candidate ai
1: I0 = (cid:104)0, 0, 1, 0(cid:105)
2: for j = 1 to m do
3:
4:
5:
6:
7:
[zj]β = 0
for i = 1 to n do
(cid:104)[vzj ], [pzj ], [zzj ], [szj ](cid:105) = Int2FL([zj]β, γ, (cid:96))
](cid:105) =
(cid:104)[vz(cid:48)
FLMul(λ · log2 e,(cid:104)[vzj ], [pzj ], [zzj ], [szj ](cid:105))
(cid:104)[vδj ], [pδj ], [zδj ], [sδj ](cid:105) =
FLExp2((cid:104)[vz(cid:48)
], [zz(cid:48)
(cid:104)[vIj ], [pIj ], [zIj ], [sIj ](cid:105) = FLAdd((cid:104)[vIj−1 ], [pIj−1],
[zIj−1 ], [sIj−1 ](cid:105),(cid:104)[vδj ], [pδj ], [zδj ], [sδj ](cid:105))
10: [r] = RandInt(γ + 1)
11: (cid:104)[vr], [pr], 0, 0(cid:105) = FP2FL([r], γ, f = γ, (cid:96), k)
r](cid:105) =
12: (cid:104)[v(cid:48)
r], [z(cid:48)
r], [s(cid:48)
r], [p(cid:48)
], [pz(cid:48)
], [pz(cid:48)
], [sz(cid:48)
](cid:105))
8:
9:
j
], [zz(cid:48)
], [sz(cid:48)
j
j
j
j
j
j
j
FLMul((cid:104)[vr], [pr], 0, 0(cid:105),(cid:104)[vIm ], [pIm], [zIm], [sIm](cid:105))
13: jmin = 1; jmax = m
14: while jmin < jmax do
(cid:99)
jM = (cid:98) jmin+jmax
15:
if FLLT((cid:104)[vIjM
], [pIjM
16:
17:
18: return wjmin
2
jmin = jM + 1 else jmax = jM
], [zIjM
], [sIjM
](cid:105),(cid:104)[v(cid:48)
r], [p(cid:48)
r], [z(cid:48)
r], [s(cid:48)
r](cid:105)) then
Table 4: Protocol: Distributed EM
Random Number Generation. As we have seen in the previous section, our algo-
rithms rely heavily on the generation of a random number in the interval (0, 1] drawn
according to the uniform distribution U(0,1]. Unfortunately, the SMPC suite we consider
does not include such a function. Hence we devised an SMPC protocol that is based on
the idea of encoding such a random number generation using the primitive RandInt for
the generation of a random integer (e.g., cf. steps 4 and 5 in Table 2. We ﬁrst generate
a shared (γ + 1)-bit integer [rx] using the SMPC primitive RandInt. We then consider
this integer to be the fractional part of ﬁxed point number, whose integer part is 0 (by
choosing f = γ). Afterwards, the ﬁxed point number is converted to ﬂoating point
by using the function FP2FL and disregarding the shared sign bit. Notice that strictly
speaking, this generates a random number in [0, 1). We can achieve a transition to the
expected interval (0, 1] by slightly modifying the conversion primitive FP2FL such that