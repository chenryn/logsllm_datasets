### References

1. Robin David, Sébastien Bardin, Josselin Feist, Laurent Mounier, Marie-Laure Potet, Thanh Dinh Ta, and Jean-Yves Marion. "Specification of concretization and symbolization policies in symbolic execution." In *International Symposium on Software Testing and Analysis (ISSTA 2016)*, 2016.

2. Robin David, Sébastien Bardin, Thanh Dinh Ta, Laurent Mounier, Josselin Feist, Marie-Laure Potet, and Jean-Yves Marion. "BINSEC/SE: A dynamic symbolic execution toolkit for binary-level analysis." In *IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER 2016)*, 2016.

3. Leonardo Mendonça de Moura and Nikolaj Bjørner. "Z3: An efficient SMT solver." In *Tools and Algorithms for the Construction and Analysis of Systems (TACAS 2008)*, 2008.

4. Saumya K. Debray and Jay Patel. "Reverse engineering self-modifying code: Unpacker extraction." In *Working Conference on Reverse Engineering (WCRE 2010)*, 2010.

5. Ninon Eyrolles, Louis Goubin, and Marion Videau. "Defeating MBA-based obfuscation." In *Proceedings of the 2016 ACM Workshop on Software Protection (SPRO@CCS 2016)*, 2016.

6. Patrice Godefroid, Michael Y. Levin, and David A. Molnar. "SAGE: Whitebox fuzzing for security testing." *Communications of the ACM (CACM)*, 55(3), 2012.

7. Thomas A. Henzinger, Ranjit Jhala, Rupak Majumdar, and Grégoire Sutre. "Lazy abstraction." In *The 29th SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL 2002)*, 2002.

8. Min Gyung Kang, Pongsin Poosankam, and Heng Yin. "Renovo: A hidden code extractor for packed executables." In *ACM Workshop on Recurring Malcode (WORM 2007)*, 2007.

9. Johannes Kinder. "Towards static analysis of virtualization-obfuscated binaries." In *19th Working Conference on Reverse Engineering (WCRE 2012)*, 2012.

10. Dave King, Boniface Hicks, Michael Hicks, and Trent Jaeger. "Implicit flows: Can’t live with 'em, can’t live without 'em." In *Information Systems Security, 4th International Conference (ICISS 2008)*, 2008.

11. Yin Liu and Ana Milanova. "Static information flow analysis with handling of implicit flows and a study on effects of implicit flows vs explicit flows." In *14th European Conference on Software Maintenance and Reengineering (CSMR 2010)*, 2010.

12. Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, and Jean-Yves Marion. *ACSAC '19, December 9–13, 2019, San Juan, PR, USA*.

13. Saeed Nejati, Jia Hui Liang, Catherine H. Gebotys, Krzysztof Czarnecki, and Vijay Ganesh. "Adaptive restart and CEGAR-based solver for inverting cryptographic hash functions." In *VSTTE 2017*, 2017.

14. Jonathan Salwan, Sébastien Bardin, and Marie-Laure Potet. "Symbolic deobfuscation: From virtualized code back to the original." In *5th Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA 2018)*, 2018.

15. Florent Saudel and Jonathan Salwan. "Triton: Framework d'exécution concolique." In *SSTIC 2015*, 2015.

16. Sebastian Schrittwieser, Stefan Katzenbeisser, Johannes Kinder, Georg Merzdovnik, and Edgar Weippl. "Protecting software through obfuscation: Can it keep pace with progress in code analysis?" *ACM Computing Surveys (CSUR)*, 49(1), 2016.

17. Edward J. Schwartz, Thanassis Avgerinos, and David Brumley. "All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask)." In *Symposium on Security and Privacy (S&P 2010)*, 2010.

18. Hovav Shacham. "The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86)." In *Conference on Computer and Communications Security (CCS 2007)*, 2007.

19. Monirul I. Sharif, Andrea Lanzi, Jonathon T. Giffin, and Wenke Lee. "Impeding malware analysis using conditional code obfuscation." In *Network and Distributed System Security Symposium (NDSS 2008)*, 2008.

20. Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Krügel, and Giovanni Vigna. "SOK: (State of) the art of war: Offensive techniques in binary analysis." In *IEEE Symposium on Security and Privacy (SP 2016)*, 2016.

21. Venkatesh Srinivasan and Thomas W. Reps. "An improved algorithm for slicing machine code." In *Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA 2016)*, 2016.

22. Jon Stephens, Babak Yadegari, Christian S. Collberg, Saumya Debray, and Carlos Scheidegger. "Probabilistic obfuscation through covert channels." In *European Symposium on Security and Privacy (EuroS&P 2018)*, 2018.

23. Julien Vanegue and Sean Heelan. "SMT solvers in software security." In *6th USENIX Workshop on Offensive Technologies (WOOT'12)*, 2012.

24. Chenxi Wang, Jonathan Hill, John Knight, and Jack Davidson. "Software tamper resistance: Obstructing static analysis of programs." *Technical Report, Charlottesville, VA, USA*, 2000.

25. Chenxi Wang, Jonathan Hill, John C. Knight, and Jack W. Davidson. "Protection of software-based survivability mechanisms." In *International Conference on Dependable Systems and Networks (DSN 2001)*, 2001.

26. Zhi Wang, Jiang Ming, Chunfu Jia, and Debin Gao. "Linear obfuscation to combat symbolic execution." In *European Symposium on Research in Computer Security (ESORICS 2011)*, 2011.

27. Babak Yadegari and Saumya Debray. "Symbolic execution of obfuscated code." In *Conference on Computer and Communications Security (CCS 2015)*, 2015.

28. Babak Yadegari, Brian Johannesmeyer, Ben Whitely, and Saumya Debray. "A generic approach to automatic deobfuscation of executable code." In *Symposium on Security and Privacy (SP 2015)*, 2015.

29. Yongxin Zhou, Alec Main, Yuan Xiang Gu, and Harold Johnson. "Information hiding in software with mixed boolean-arithmetic transforms." In *Information Security Applications (WISA 2007)*, 2007.

### A. Formal Proofs

**Theorem 1 (Optimal Composition)**  
Suppose that \( P' \) is obtained by obfuscating the program \( P \). If every original path of \( P \) goes through at least \( k \) independent forking points of \( P' \) inserting at least \( \theta \) feasible paths, then \( \# \Pi_{P'} \geq \# \Pi_P \cdot \theta^k \).

**Proof:**  
Consider a program \( P \) with \( \# \Pi \) original paths \( \sigma_i \), where \( i \in \{1, \ldots, \# \Pi\} \). We obfuscate \( P \) into \( P' \) with an obfuscation scheme adding \( n \) independent forking points, each inserting \( \# \sigma_{1..n} \) feasible paths. The forking points are placed such that every original path now contains at least \( k \) forking points.

- The total number of paths of \( P' \) is:
  \[
  \# \Pi_{P'} = \prod_{\sigma_i \in \Pi_P} \# \sigma_i
  \]

- According to the definition of independence, one original path \( \sigma_i \) with at least \( k \) forking points, each inserting \( \# \sigma_{i,1..k} \) feasible paths, creates \( \# \sigma_i \geq \prod_{j=1}^k \# \sigma_{i,j} \) new paths.

- Then,
  \[
  \# \Pi_{P'} \geq \prod_{\sigma_i \in \Pi_P} \left( \prod_{j=1}^k \# \sigma_{i,j} \right)
  \]
  Let \( \theta = \min_{i,j} (\# \sigma_{i,j}) \). Therefore,
  \[
  \# \Pi_{P'} \geq \# \Pi_P \times \theta^k
  \]
  \(\blacksquare\)

**Theorem 2 (Resistance by Design)**  
Let us consider a program \( P \) and a forking point \( F \). Assuming \( F \) is built upon relevant variables, then \( F \) is slice and taint resistant.

**Proof:**  
By definition, a sound taint analysis \( A_T \) will mark any relevant variable (as they depend on input). Hence, if \( F \) is built upon relevant variables, then all variables \( v \in Var(F) \) will be marked by \( A_T \), implying that taint analysis \( A_T \) will yield no simplification on \( F \). Similarly, a sound slice analysis \( A_S \) will mark any relevant variable (as they impact the output), implying that if \( F \) is built upon relevant variables, then analysis \( A_S \) will yield no simplification on \( F \).
\(\blacksquare\)

### B. Statistics on Datasets

We present additional statistics on Dataset #1 (Appendix Table 7) and Dataset #2 (Appendix Table 8).

- **Dataset #1 (46 programs):**
  - **Entry size:**
    - 16 bytes
    - 1 byte (*)
  - **#LOC (lines of code):**
    - Average: 21
    - Standard Deviation: 1.9
  - **KLEE execution time (s):**
    - Average: 2.6s
    - Standard Deviation: 6.2s
  - **(*) 1-byte input programs are automatically turned into equivalent 8-byte input programs with the same number of paths. We report KLEE execution time on the modified versions.**

- **Dataset #2 (7 programs):**
  - **Programs:**
    - City hash
    - Fast hash
    - Spooky hash
    - MD5 hash
    - AES
    - DES
    - GRUB
  - **#LOC (lines of code) and KLEE execution time (s):**
    - City hash: 7.41s, 547 LOC
    - Fast hash: 934s, 7.74s
    - Spooky hash: 7.12s, 625 LOC
    - MD5 hash: 33.31s, 157 LOC
    - AES: 1.42s, 571 LOC
    - DES: 424s, 0.15s
    - GRUB: 0.06s, 101 LOC

### C. Additional Experiments

**Search Heuristics:**
- Results in Appendix Table 9 show that DSE search heuristics do not significantly impact overall results (cf. Table 3).
- Depth-first search (DFS) appears to be slightly better than the other two for Split.
- Non-uniform random search (NURS) appears to be slightly worse than the other two for For.

**Table 9: Impact of Search Heuristics – Dataset #1 – Secret Finding – 1h Timeout (TO)**
- **Timeouts:**
  - Virt: 0/15
  - Virt ×2: 0/15
  - Virt ×3: 1/15
  - Flat-Virt: 0/15
  - Flat-MBA: 0/15
  - Split (×10): 0/15
  - Split (×13): 0/15
  - For (k = 1): 1/15
  - For (k = 2): 0/15
  - For (k = 3): 1/15
  - For (k = 4): 10/15
  - NURS: 15/15
  - BFS: 15/15
  - DFS: 15/15
  - Allpath: 15/15

**Runtime Overhead:**
- We evaluate how the performance penalty evolves for protection For on very high values of \( k \). We take the 15 examples of Dataset #1 with large input space and vary the size of the input string from 3 to 100,000, increasing the number of forking points accordingly (k between 3 and 100,000), one forking point (loop) per byte of the input string. We run 15 random inputs 15 times for each size and measure the average runtime overhead.
- Fig. 9 shows the evolution of runtime overhead with respect to the number of For loops.
- The runtime overhead stays below 5% (×1.05) for fewer than \( k = 250 \). This means that one can significantly boost For-based protections without incurring big runtime penalties.

### D. Code Snippet for Write

Fig. 10 shows an example of an assembly-level implementation of the Write protection over the expression "var = input;".

```assembly
__asm__ (
    "movl %[src], %[dst]\n\t"
    "jmp .L%=+1\n"
    ".L%=:\n\t"
    ".section .L%=, \"awx\"\n\t"
    "movl $0, %[dst]\n\t"
    "jmp %=b\n"
    ".previous\n\t"
    : [dst] "=&a" (var)
    : [src] "r" (input)
);
```

**Figure 9: Runtime Overhead w.r.t. the Number of For Obfuscation Loops**

- **Runtime Overhead:**
  - The runtime overhead remains below 5% (×1.05) for fewer than \( k = 250 \).

**Figure 10: ASM Encoding of Protection Write**

- **ASM Encoding:**
  - The provided assembly code snippet demonstrates the implementation of the Write protection.