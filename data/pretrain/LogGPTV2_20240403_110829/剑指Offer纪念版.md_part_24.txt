听到这个问题之后，很多应聘者的第一反应是把复制过程分成两步：
注：在复杂链表的结点中，除了有指向下一结点的指针（实线箭头）
复制复杂链表的第一步
1
名企面试官精讲典型编程题（纪念版）
---
## Page 163
void ConnectSiblingNodes(ComplexListNode*pHead)
结点N'的m_pSibling指向S的下一结点 S"。
图4.10
如图4.10所示。
结点，同样 S'也是 S 的m_pNext指向的结点。设置m_pSibling 之后的链表
m_pSibling 指向结点S，那么其对应复制出来的 N'是N的 m_pNext 指向的
void CloneNodes(ComplexListNode*pHead)
后面。
ComplexListNode*
注：如果原始链表上的结点 N的 m_pSibling 指向 S，则它对应的复制
下面是完成第二步的参考代码：
第二步设置复制出来的结点的 m_pSibling。假设原始链表上的 N 的
ComplexListNode*
完成这一步的代码如下：
注：复制原始链表的任意结点N并创建新结点N，再把N链接到N的
ComplexListNode* pCloned= pNode->m_pNext;
复制复杂链表的第二步
pNode = pCloned->m_pNext;
pNode->m_pNext=pCloned;
pCloned->m_pSibling = NULL;
ComplexListNode*pCloned=
pCloned->m_pSibling = pNode->m_pSibling->m_pNext;
pNode=pHead;
pNode = pHead;
pNode->m_nValue;
new ComplexListNode();
第4章
解决面试题的思路149
---
## Page 164
150
剑指Offer-
ComplexListNode* Clone(ComplexListNode* pHead)
ComplexListNode* ReconnectNodes(ComplexListNode* pHead)
始链表，
图4.11复制复杂链表的第三步
出来的链表。图4.10中的链表拆分之后的两个链表如图4.11所示。
链接起来就是原始链表，把偶数位置的结点用m_pNext链接起来就是复制
return ReconnectNodes(pHead);
ConnectSiblingNodes(pHead);
CloneNodes(pHead);
我们把上面三步合起来，就是复制链表的完整过程：
return pClonedHead;
while (pNode != NULL)
if（pNode != NULL)
ComplexListNode*
ComplexListNode*
ComplexListNode* pNode = pHead;
要实现第三步的操作，也不是很难的事情。其对应的代码如下：
注：
第三步把这个长链表拆分成两个链表：把奇数位置的结点用 m_pNext
pNode =pNode->m_pNext;
pClonedNode->m_pNext =pNode->m_pNext;
pNode=pNode->m_pNext;
pNode->m_pNext
，偶数位置上的结点组成复制出来的链表。
：把第二步得到的链表拆分成两个链表，奇数位置上的结点组成原
pNode = pCloned->m_pNext;
—-----—-----
名企面试官精讲典型编程题（纪念版）
pClonedNode
pClonedNode
pClonedHead=
pClonedNode->m_pNext;
->m_pNext;
NULL;
NULL;
一
一
---
## Page 165
struct BinaryTreeNode
输入图4.12中左边的二叉搜索树，则输出转换之后的排序双向链表。
链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。比如
面试题27：二叉搜索树与双向链表
BinaryTreeNode
题目：输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向
int
二叉树结点的定义如下：
本题完整的源代码详见26_CopyComplexList项目。
本题考点：
考查应聘者分析时间效率和空间效率的能力。当应聘者提出第
测试用例：
源代码：
特殊输入测试（指向链表头结点的指针为NULL指针）。
空间复杂度各是多少。
解。这个时候应聘者要能自己分析出这两种算法的时间复杂度和
种和第二种思路的时候，面试官会提示此时在效率上还不是最优
3个函数。有了这些清晰的思路之后再写代码，就容易多了。
我们为每一个步骤定义一个子函数，最后在复制函数中先后调用者
常见的数据结构，而且复制这种链表的过程也较为复杂。我们把复
考查应聘者对复杂问题的思维能力。本题中的复杂链表是一种不太
m_pSibling 形成环状结构，链表中只有一个结点）。
功能测试（包括结点中的 m_pSibling 指向结点自身，两个结点的
的方式表示出来，这些方法都能帮助我们理清思路。写代码的时候，
杂链表的复制过程分解成三个步骤，同时把每一个步骤都用图形化
m_pRight;
m_pLeft;
m_nValue;
第4章解决面试题的思路151
---
## Page 166
152剑指Offer
链表。
链表之后再和根结点链接起来，整棵二叉搜索树也就转换成了排序的双向
图4.13把二叉搜索树看成三部分
如图4.13所示。
链接起来，同时它还将和右子树最小的结点（即值为12的结点）链接起来，
定义，值为10的结点将和它的左子树的最大一个结点（即值为8的结点）
结点、根结点值为6的左子树、根结点值为14的右子树。根据排序链表的
的每一个结点。当遍历到根结点的时候，我们把树看成三部分：值为10的
个结点，这是因为中序遍历算法的特点是按照从小到大的顺序遍历二叉树
中指向前一个结点的指针，原先指向右子结点的指针调整为链表中指向后
因此我们在转换成排序双向链表时，原先指向左子结点的指针调整为链表
左子结点的值总是小于父结点的值，右子结点的值总是大于父结点的值。
理论上有可能实现二叉搜索树和排序的双向链表的转换。在搜索二叉树中，
两种结点的结构相似，同时二叉搜索树也是一种排序的数据结构，因此在
每个结点也有两个指针，它们分别指向前一个结点和后一个结点。由于这
图4.12一棵二叉搜索树及转换之后的排序双向链表
一个结点指针。接下来我们考虑该如何转换。
注：根结点、左子树和右子树。在把左、右子树都转换成排序的双向
由于要求转换之后的链表是排好序的，我们可以中序遍历树中的每一
在二叉树中，每个结点都有两个指向子结点的指针。在双向链表中，
尚
-名企面试官精讲典型编程题（纪念版）
0
---
## Page 167
（新的值最大的结点），于是pLastNodeInList 指向了这个值为10 的结点。
着把根结点链接到链表中之后，值为10的结点成了链表中的最后一个结点
它的左子树都已经转换好了，因此pLastNodeInList 指向值为8的结点。接
后一个结点（也是值最大的结点)。当我们遍历到值为10的结点的时候，
pLastNodeInList)
void ConvertNode(BinaryTreeNode* pNode,BinaryTreeNode**
BinaryTreeNode* Convert(BinaryTreeNode* pRootofTree)
由于遍历和转换过程是一样的，我们很自然地想到可以用递归。
和右子树中最小的结点链接起来。至于怎么去转换它的左子树和右子树，
表中的最后一个结点就是10了。接着我们去遍历转换右子树，并把根结点
点是当前值最大的结点。我们把值为8的结点和根结点链接起来，此时链
它的左子树已经转换成一个排序的链表了，并且处在链表中的最后一个结
在上面的代码中，我们用 pLastNodeInList 指向已经转换好的链表的最
if(*pLastNodeInList
if (pCurrent->m_pLeft != NULL)
if (pNode == NULL)
if
*pLastNodeInList=pCurrent;
BinaryTreeNode
return pHeadOfList;
//pLastNodeInList 指向双向链表的尾结点，
ConvertNode(pRootOfTree,&pLastNodeInList);
基于上述分析过程，我们可以写出如下代码：
按照中序遍历的顺序，当我们遍历转换到根结点（值为10的结点）时，
inaryTreeNode
(pCurrent->m_pRight!=NULL)
return;
pHeadOfList = pHeadOfList->m_pLeft;
我们需要返回头结点
(*pLastNodeInList)->m_pRight = pCurrent;
ConvertNode(pCurrent->m_pLeft,pLastNodeInList);
*pCurrent=pNode;
*pHeadOfList = pLastNodeInList;
第4章解决面试题的思路153
---
## Page 168
154
剑指Offer-
把一个字符串看成由两部分组成：第一部分为它的第一个字符，第二部分
那我们是不是可以考虑把这个复杂的问题分解成小的问题呢？比如，我们
acb、bac、bca、cab和 cba。
入字符串abc，则打印出由字符a、b、c所能排列出来的所有字符串abc、
面试题28：字符串的排列
点和值为10的结点链接起来。
子树中最左边的子结点（值为12的结点，在右子树中值最小)，并把该结
接下来把pLastNodeInList 作为参数传入函数递归遍历右子树。我们找到右
如何求出几个字符的所有排列，很多人都不能一下子想出解决方案。
题目：输入一个字符串，打印出该字符串中字符的所有排列。例如输
本题完整的源代码详见27_ConvertBinarySearchTree项目。
本题考点：
测试用例：
源代码：
考查对二叉树、双向链表的理解及编程能力。
在于把一个大的问题分解成几个小问题，并递归地解决小问题，
左子树中最大的结点、根结点、右子树中最小的结点链接起来。
有很多指针。要实现这两种不同数据结构的转换，需要调整大量的
考查应聘者分析复杂问题的能力。无论是二叉树还是双向链表，都
特殊输入测试（指向二叉树根结点的指针为NULL指针）。
一名企面试官精讲典型编程题（纪念版）
问题的实质是一样的，因此可以递归解决。解决这个问题的关键
至于如何把左子树和右子树内部的结点链接成链表，那和原来的
我们可以把树分为三个部分：根结点、左子树和右子树，然后把
指针，因此这个过程会很复杂。为了把这个复杂的问题分析清楚
树的二叉树，只有一个结点的二叉树)。
功能测试（输入的二叉树是完全二叉树，所有结点都没有左/右子
---
## Page 169
void Permutation(char*pStr,char*pBegin)
void Permutation(char* pStr)
们不难写出如下代码：
部分的字符串的排列。（b）拿第一个字符和它后面的字符逐个交换。
分是第一个字符以后的所有字符（有阴影背景的区域）。接下来我们求阴影
图4.14求字符串的排列的过程
所示）…·
的所有字符。然后把第一个字符逐一和它后面的字符交换（如图4.14（b)
后面的所有字符分成两部分：后面字符的第一个字符，以及这个字符之后
字符（如图4.14（a）所示)，求后面所有字符的排列。这个时候我们仍把
别把第一个字符a 和后面的 b、c 等字符交换的情形。第二步固定第一个
一个位置的字符，即把第一个字符和后面所有的字符交换。图4.14就是分
的两部分。
是后面的所有字符。在图4.14中，我们用两种不同的背景颜色区分字符串
if(*pBegin ==\o)
（b)
Permutation(pStr, pStr);
if（pStr == NULL)
分析到这里，我们就可以看出，这其实是很典型的递归思路，于是我
else
我们求整个字符串的排列，可以看成两步：首先求所有可能出现在第
printf("%s\n", pStr);
return;
=*pBegin;
C
C
ba..
第4章解决面试题的思路155
---