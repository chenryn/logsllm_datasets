title:Towards Static Flow-Based Declassification for Legacy and Untrusted
Programs
author:Bruno P. S. Rocha and
Sruthi Bandhakavi and
Jerry den Hartog and
William H. Winsborough and
Sandro Etalle
2010 IEEE Symposium on Security and Privacy
Towards Static Flow-based Declassiﬁcation for
Legacy and Untrusted Programs
Bruno P. S. Rocha∗, Sruthi Bandhakavi†, Jerry den Hartog∗, William H. Winsborough‡ and Sandro Etalle∗ ,§
∗ Eindhoven University of Technology, The Netherlands
{b.p.s.rocha, j.d.hartog, s.etalle}@tue.nl
† University of Illinois at Urbana Champaign
PI:EMAIL
Abstract—Simple non-interference is too restrictive for speci-
fying and enforcing information ﬂow policies in most programs.
Exceptions to non-interference are provided using declassiﬁcation
policies. Several approaches for enforcing declassiﬁcation have
been proposed in the literature. In most of these approaches,
the declassiﬁcation policies are embedded in the program itself
or heavily tied to the variables in the program being analyzed,
thereby providing little separation between the code and the
policy. Consequently, the previous approaches essentially require
that the code be trusted, since to trust that the correct policy is
being enforced, we need to trust the source code.
In this paper, we propose a novel
framework in which
declassiﬁcation policies are related to the source code being
analyzed via its I/O channels. The framework supports many
of the of declassiﬁcation policies identiﬁed in the literature.
Based on ﬂow-based static analysis, it represents a ﬁrst step
towards a new approach that can be applied to untrusted and
legacy source code to automatically verify that the analyzed
program complies with the speciﬁed declassiﬁcation policies. The
analysis works by constructing a conservative approximation of
expressions over input channel values that could be output by
the program, and by determining whether all such expressions
satisfy the declassiﬁcation requirements stated in the policy. We
introduce a representation of such expressions that resembles
tree automata. We prove that if a program is considered safe
according to our analysis then it satisﬁes a property we call
Policy Controlled Release, which formalizes information-ﬂow
correctness according to our notion of declassiﬁcation policy. We
demonstrate, through examples, that our approach works for
several interesting and useful declassiﬁcation policies, including
one involving declassiﬁcation of the average of several conﬁdential
values.
Index Terms—Security; Languages; Software veriﬁcation and
validation; Data ﬂow analysis;
I. INTRODUCTION
Programs dealing with sensitive data must prevent conﬁden-
tial information from ﬂowing to unauthorized entities [1]. The
classical security property of programs, non-interference [2],
requires that publicly observable behavior is entirely indepen-
dent of secret, secure input values. Type-based [3], [4], [5] and
dataﬂow-based [6], [7], [8], [9] approaches have been proposed
to statically analyze whether a given program enforces non-
interference. In both approaches, each program variable is
labeled with a security level (e.g., high for secret or low
for public, though any lattice of labels can be supported). In
1081-6011/10 $26.00 © 2010 IEEE
DOI 10.1109/SP.2010.14
93
‡ University of Texas at San Antonio
PI:EMAIL
§ University of Twente, Enschede, The Netherlands
PI:EMAIL
type-based approaches, typing rules are deﬁned such that if
the program type-checks, the program is non-interferent. In
dataﬂow-based approaches, an analysis calculates dependence
relationships between program variables; non-interference is
ensured if low variables are independent from high variables.
In general, non-interference is excessively restrictive: many
programs that meet their security objectives fail to satisfy
it. A classical example of this is that of a company policy
that requires individual employee salaries be kept secret,
but allows the average salary to be disclosed. Since non-
interference prohibits any direct or indirect ﬂow of secret
information to a public output channel, any program that
publishes the average salary violates it. To mitigate the rigidity
of non-interference, one can explicitly allow exceptions to it
in the form of declassiﬁcation policies (see e.g., [10]), which
identify circumstances under which information that depends
on high-security inputs is permitted to ﬂow to low outputs.
In type-based approaches, the exceptions to the standard
ﬂow are usually associated with speciﬁc points in the code.
The programmer can specify the declassiﬁcation policy by
using a special declass command, which usually releases the
information conditionally, depending on the value of a given
expression over program variables. In frameworks of this
kind, declassiﬁcation policies are speciﬁed in a manner that is
intimately tied to the program itself.
A serious drawback of this approach is that only someone
with a deep understanding of the program can reliably write
declassiﬁcation policies for it. Everyone else is forced to trust
blindly that the policies meet the required security objectives.
When code is written by trusted programmers, this assumption
may be acceptable, though even then it would be preferable
to separate concerns and make the speciﬁcation, maintenance,
and review of declassiﬁcation policies independent from the
program. In the case of untrusted code,
this arrangement
is clearly unacceptable. Operators of systems that rely on
such a program obtain little assurance that the declassiﬁca-
tion policies deﬁned in it are appropriate. As pointed out
by Zdancewic [11], one of the reasons why language-based
techniques have not yet been widely adopted is that
the
enforcement approaches require the programmer to worry not
only about the correctness of the program logic, but also about
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
how to annotate the program so that it can be deemed secure.
This state of affairs implies that declassiﬁcation poli-
cies cannot readily be applied to legacy code. Unless the
legacy program satisﬁes strict non-interference—which,
is
uncommon—the only way to determine whether such pro-
grams satisfy information-ﬂow objectives is through the la-
borious process of understanding the program well enough to
design a program-speciﬁc declassiﬁcation policy.
Recently, Banerjee et al. [12] have partly addressed the
problem of separation of concerns. They introduce a form of
declassiﬁcation policies called ﬂowspecs, which are speciﬁed
separately from the program and instantiated at particular pro-
gram points. Flowspecs are a combination of ordinary program
assertions extended with agreement predicates, both of which
refer to local and global program variables. Although, this
approach goes a long way toward separating the policy from
the code, the policies still require an intimate knowledge of the
program variables. As a result, program assertions are heavily
tied to the programs being analyzed. Additionally, since their
analysis uses the ﬂow-insensitive, type-based approach, they
require that programs disallow assigning new values to high
variables prior to their use in expressions to be declassiﬁed.
This means that programs need to be written in a policy-
speciﬁc manner for them to be deemed valid, which is at odds
with the application of their approach to legacy code.
To stress this point further, Hicks, et al. [13] conclude that
although Jif is the most advanced security typed program-
ming language, it is not ready for mainstream use because
it requires considerably more programmer effort to write a
working program than in a conventional language. In light of
this observation, we believe there is need for an information
ﬂow analysis framework that does not require programmer
annotations and which considers programs and policies as
independent entities. This would result in greatly reducing the
effort required to program an application.
Contribution:
In this paper we introduce a novel ap-
proach for the speciﬁcation and the (static) veriﬁcation and
enforcement of declassiﬁcation policies that are independent
of the code to which they are applied. The novelty of our
approach lies in the combination of the following features: (a)
it supports user-deﬁned declassiﬁcation policies, (b) code and
policy are separated and independent from each other, (c) it
allows one to analyse and apply declassiﬁcation policies to
unannotated and untrusted code.
We believe that this work can be seen as a novel general
methodology within which veriﬁable analyses can be con-
structed that determine whether untrusted and legacy code
enforces such code-independent policies,
together with a
particular application of the methodology implementing a
particular analysis for determining whether a particular graph-
based form of declassiﬁcation policy is enforced by the input
program. The methodology provides a basis for further work
on even more expressive representations.
Rather than referring to particular program commands, our
policies identify (sets of) expressions over values obtained
from secret input channels; the values of these expressions are
thus identiﬁed as candidates for declassiﬁcation. Our approach
to program analysis deems a program to be secure if it is able
to determine that public output values depend on secret inputs
only via expressions thus identiﬁed. Consequently, programs
can be written without awareness of the formal declassiﬁca-
tion policies or of how the analyzer works, and no special
command is used in programs to specify declassiﬁcation.
Our declassiﬁcation policies use graphs to represent sets
of expressions over values obtained from input channels. This
allows us to express and to deal efﬁciently with declassiﬁcation
policies that refer to iterative constructs such as loops (as in the
example in which the average salary may be disclosed and the
individual wages must remain secret). In present approaches,
to declassify the result of a looping program using standard
ﬂow-based techniques, one is required to manually introduce
simpliﬁcations, which often consist of determining the ﬁx-
points of loops. On the other hand, type-based techniques
usually rely on the programmer to identify in the code iterative
declassiﬁcation expressions.
Our declassiﬁcation policies represent values that are per-
mitted to be made public. Expressions that may be computed
by the program under analysis are also represented by a form
of an expression graph that incorporates representations of
variables and I/O channels, and captures the dependencies
(control and data) of output expressions on values obtained
from input channels. We augment the power of our expression
graphs to allow them to express the (non-regular) property that
values obtained from input channels are given by distinct read
operations, thus enabling our policies to require, for instance,
that an expression representing the average of input values
must refer to multiple distinct values read from the input
channel, and not multiple references to the value returned by
a single read operation. A graph matching mechanism is used
to ensure that the expressions are declassiﬁable per the policy.
Technically, our principal contribution is the introduction of
a form of Conditioned Gradual Release (CGR) called Policy
Controlled Release (PCR) —a more ﬂexible security property
that replaces non-interference—and a result that shows this
property is satisﬁed by programs deemed valid by our anal-
ysis1. Compared to the prior deﬁnition of CGR [12], ours is
much simpler and more intuitive because it can be expressed
purely on the observable behaviour of programs rather than
needing details on program executions.
We believe that our work takes a ﬁrst step in a new direction
for the information-ﬂow ﬁeld. The analysis of legacy and un-
trusted programs, along with a program-independent, policy-
based declassiﬁcation mechanism represents an important step
towards bridging the gap between academic research in the
ﬁeld and its widespread adoption in industry. Due to the
novelty of the approach, we build our mechanism over some
simple assumptions: we use a simple imperative toy language;
we deﬁne the matching mechanism mathematically, leaving
1While PCR is termination-sensitive, our analysis and theorem are
termination-insensitive in the sense that our analysis may deem valid a
program that leaks secret information by failing to terminate during a while
loop that is controlled by a nondeclassiﬁable expression.
94
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
speciﬁcation and analysis of algorithms out of the scope; and
we leave some operational issues untreated (but discussed).
However, we pave the way for these assumptions to be relaxed,
towards a mechanism that will be able to analyze legacy
systems using newly created declassiﬁcation policies.
The rest of the paper is organized as follows: Section II
presents detailed examples that
illustrate our approach. In
Section III we deﬁne our language syntax and semantics, as
well as the program expression graphs and declassiﬁcation
policies, and one more example. Our matching mechanism is
presented in Section IV. The security property is discussed
in Section V, and the soundness of our analysis is shown in
Section VI. Finally, Section VII presents related work, and
Section VIII contains our discussion and conclusions of this
work.
II. EXAMPLE
In this section we illustrate by means of two examples the
mechanism of our framework. The ﬁrst example refers to one
of the classical situations requiring declassiﬁcation: authenti-
cation and password matching. The basic security requirement
is that user information should not ﬂow to the output channel,
with one exception (captured by the declassiﬁcation policy):
boolean queries on the user’s record may be declassiﬁed. Now,
in order to authenticate the user, 3 methods are possible. If the
user’s record is “complete” and the user has a given credential,
the function validate can check this credential. This is the
preferred method for authentication. If, however, the user does
not have the required credential, but his record is complete,
then the same validate function can be applied over the user’s
last name, validating the user’s name against a list. Finally,
if the user’s record is not complete, then the system prompts
for a password, from another input channel, and use function
verify to check it along with the user login name. In the end,
the result of the authentication is sent to the output channel.
The example program is given below. The language it uses is
a standard imperative programming language, with no special
security constructs, which will be used throughout the paper.
The inputs and outputs to the program are speciﬁed using input
and output channels and represented with Greek letters, as
further explained in Section III. Channel α returns the record
with the user information, channel β is used to retrieve a
password from the user, if necessary, and channel γ is the
output channel to where authorization information is sent.
Example 1. Authentication program:
struct x := α;
string f ;
bool v;
if iscomplete(x) then
if hascred (x) then
f := credential (x);
else