改进和重构.
参与..
其他行业的实践经验
第V部分结束语
........
目录
...............
.............
............
.........
........
xxix
390
389
.388
402
402
402
#
392
384
---
## Page 42
XXX
参考文献
附录F
附录E
附录D
附录C
附录B
附录A
第34章
小结..
结构化和理性的决策..
将重复性工作自动化，消除运维负载.
目录
生产环境会议记录示范
发布协调检查列表
事故状态文档示范
生产环境运维过程中的最佳实践
系统可用性..
结语
..412
...411
439
427
425
423
417
407
---
## Page 43
细节，为本书其他部分提到的各种专业术语和系统名词提供铺垫。
第2章：对Google 生产环境进行了介绍。本章通过介绍Google 组建和运维生产环境的
里提供了他对SRE的定义，描述了SRE究竟与其他类似职位存在哪些不同。
第1章：Ben Treynor Sloss，Google运维团队的高级副总裁，SRE名称的发明者，在这
些不同。
这一部分为SRE具体的工作提供了一些概括性介绍，以及SRE究竞与传统的运维存在哪
第|部分
薄蕾
1
---
## Page 44
第1章
注1Google VP，Google SRE的创始人。
考。市场上具有相关从业经历的人也很多，招聘相对容易。很多第三方工具厂商及系统
这种模型具有许多优势。对新公司来说，这种模式在行业内具有广泛的应用案例可供参
发部（Dev）和运维部（Ops）。
的事件。系统管理员的日常工作与研发工程师相差甚远，通常分属两个不同的部门：开
事件和变更需求也会越来越多。于是公司需要招聘更多的系统管理员，来应对日益增多
这些系统管理员负责将现成的软件组件部署于生产环境中，对外提供某种业务服务。
维一个日趋复杂的大型分布式计算系统呢？
大家都知道，计算机软件系统离开人通常是无法自主运行的。那么，究竟应该如何去运
编辑：BetsyBeyer
作者：Benjamin Treynor Sloss注1
介绍
门的变更需求。随着系统变得越来越复杂，组件越来越多，用户流量不断上升，相关的
雇佣系统管理员（sysadmin）运维复杂的计算机系统，是行业内一直以来的普遍做法。
系统管理员模式
不能将碰运气当成战略。
SRE俗语
系
---
## Page 45
各种流程，从而能更快地上线新功能。
整、增量更新，以及补丁化。采用这些名词的唯一目的，就是为了绕过运维部门设立的
的应对办法：开发团队宣称他们不再进行大规模的程序更新，而是逐渐转为功能开关调
可重现程度、问题价值并不一定是一致的。而开发团队吃过苦头之后也很快找到了自己
须将所有这些事故模拟一遍，确保不会重现。这个清单通常没有任何标准，每项事故的
检查清单，历数所有以前曾经出现过的生产事故，要求研发团队在上线任何功能之前必
运维团队制定的流程，这有助于避免事故的发生。例如：运维团队会列出一个非常长的
统的政治斗争方式来保障各自的利益。运维团队常常宣称，任何变更上线前必须经过由
的语境不同，对风险的定义也不一致。在现实生活中，公司内部这两股力量只能用最传
“一旦一个东西在生产环境中正常工作了，就不要再进行任何改动。”由于两个部门使月
极端来说，研发部门想要：“随时随地发布新功能，没有任何阻拦”，而运维部门则想要
成了负载流量的配比变化而导致故障。这两个部门的目标从本质上来说是互相矛盾的。
的——不管是部署新版本，还是修改配置，甚至有时只是因为改变了用户的某些行为造
何能在他们值班期间避免发生故障。由于绝大部分生产故障都是由于部署某项变更导致
上。研发部门最关注的是如何能够更快速地构建和发布新功能。运维部门更关注的是如
传统的研发团队和运维团队分歧的焦点主要在软件新版本、新配置的变更的发布速度
的问题。下面我们从两个大的方面来阐述。
但是，很少有人提及这样做以及相应造成的Dev/Ops分离的团队模型存在一些无法避免
的系统维护操作，避免重新发明轮子。
集成厂商都有现成的工具和软件解决方案帮助一个相对初级的系统管理员团队应对简单
2.间接成本。研发团队和系统运维团队分属两个部门所带来的间接成本就没那么容
1．直接成本。直接成本相对清晰，因为系统管理员团队大部分依赖人工处理系统维
的信任与尊重层面。这样的情形是谁也不愿意见到的，但却是时时上演的。
逐渐演变成目标与方向上的分歧及形成内部沟通问题，甚至最后上升到部门之间
与可能的技术防范措施也有截然不同的理解。这些细节上的分歧累积起来，最后
个团队对产品的可靠程度要求理解不同，具体执行中对某项操作的危险程度评估
团队背景各异，技术能力与工具使用习惯上差距巨大，工作目标也截然不同。两
易度量了，但是这些间接成本往往大得多。从本质上来说，由于研发团队和运维
基本与系统负载成线性相关，共同增长。
护事件以及变更的实施。随着系统复杂度的增加，部署规模的扩大，团队的大小
系统管理员模式
3
---
## Page 46
所服务的产品负载呈线性同步增长。如果一个产品非常成功，用户流量越来越大，就需
压力就会不断增加，团队也就需要更多的人来完成工作。传统的Ops团队的大小基本与
SRE模型成功的关键在于对工程的关注。如果没有持续的、工程化的解决方案，运维的
些SRE倾向于通过设计、构建自动化工具来取代人工操作。
SRE就是在用软件工程的思维和方法论完成以前由系统管理员团队手动完成的任务。这
软件工程师标准（具备85%~99%所要求的技能），但是同时具有一定程度的其他技术能
Google软件工程师招聘流程的人。第二类，其他40%~50%则是一些基本满足Google
第一类，团队中50%~60%是标准的软件工程师，具体来讲，就是那些能够正常通过
SRE方法论中的主要模块，就是SRE团队的构成。每个SRE团队里基本上有两类工程师，
的指导理念和工作方式还是基本保持了我最初的想法。
时过境迁，当年的7人团队已经成长为公司内部1000余人的SRE团队，但是SRE团队
于软件工程，所以很自然，我按照自己最习惯的工作方式和管理方式来组建了这个团队。
导一个由7名软件工程师组成的“生产环境维护组”。当时，我的整个职业生涯都专注
来设计一个新型运维团队的结果。当我在2003年加入Google的时候，我的任务就是领
SRE究竟是如何在Google起源的呢？其实我的答案非常简单：SRE就是让软件工程师
软件工程师，创造软件系统来维护系统运行以替代传统模型中的人工操作。
SRE 这种模型是Google尝试着从根本上避免产生这种矛盾的结果。SRE团队通过雇佣
Google的解决之道：SRE
41
要更多的团队成员来重复进行同样的事情。
同时，SRE团队和产品研发部门在学术和工作背景上非常相似。因此，从本质上来说，
(b)有足够的技术能力快速开发出软件系统以替代手工操作。
(a)对重复性、手工性的操作有天然的排斥感。
按照这个标准来招聘和管理SRE团队，我们很快发现SRE团队成员具有如下特点：
类工程师技术背景互补，SRE团队经常能够寻找到全新的、高效的解决问题的方法。
表现，但是到目前为止还没有发现他们在工作上和成绩上的显著差异。事实上，由于两
除此之外，所有的SRE团队成员都必须非常愿意、也非常相信用软件工程方法可以解决
额外的技术能力。
力的工程师。目前来看，UNIX系统内部细节和1~3层网络知识是Google最看重的两类
第1章介绍
---
## Page 47
层的支持才能让产品研发部门重视起来。
下去。例如：由于一个季度内的错误预算耗尽而停止发布新功能的决定，可能需要管理
高可靠性需要采取一些与常规做法违背的做法，所以需要强有力的管理层支持才能推行
书希望能为改变这种情况而努力。）最后，SRE团队建立之后，由于SRE模型中为了提
由于SRE模型也比较新，行业内关于如何建立和维护SRE团队的相关信息并不多。（本
其次，由于SRE要求同时具备多项技能，市场上具有相关从业背景和经验的人就更少了。
虽然SRE模型带来了一些优势，但也存在一些问题。Google面对的一个持久性的难题
序同时跑在100万个CPU的分布式系统上呢？
署活动，从中获得平时难以获得的宝贵知识。普通的开发人员有多少机会能将自已的程
团队之间的成员可以自由流动，整个产品部门的人员都有机会学习和参与大规模运维部
运维团队的冲突焦点，反而促进了整个产品部门水平的整体提高。因为SRE团队和研发
理员模型维护则需要更多数量的人。最后，SRE模型不仅消除了传统模型中研发团队和
所需要的成员数量与系统部署规模呈非线性增长。而运维同样的系统，用传统的系统管
种快速、创新、拥抱变化的文化。实践证明，SRE团队运行、维护、改进一个复杂系统
Google系统的过程中常常直接参与开发、修改代码，SRE文化在公司内部基本代表了一
我们发现GoogleSRE模型在运维大规模复杂系统时有很多优势。由于SRE在调整
维经验，从而让他们设计出切实解决问题的系统。
精力去进行真正有创造性的、自主的研发工作，同时，这也保障了SRE团队有足够的运
作。只有管理层主动维护每个SRE团队的工作平衡，我们才能保障他们有足够的时间和
管理层会要求该团队将一些常见的运维工作交还给产品研发部门操作，或者从产品研发
分配。依靠这个数据，SRE管理层会对在开发工作上投入时间不够的团队进行调整。通常
是如何确保每个团队都是这样做的呢？首先，我们必须不断地度量每个团队的工作时间
Google的经验法则是，SRE团队必须将50%的精力花在真实的开发工作上。那么我们
实际运行中，服务规模的不断扩张和新功能的上线已经让SRE够忙了！
极目标是推动整个系统趋向于无人化运行，而不仅仅是自动化某些人工流程。当然，在
力投入在研发任务上。因为整个系统应该可以自主运行，可以自动修复问题。我们的终
值并不是目标值。随着时间推移，SRE团队应该倾向于将基本的运维工作全部消除，全
了SRE团队有足够的时间改进所维护的服务，将其变得更稳定和更易于维护。这个上限
50%的上限值。传统运维工作包括：工单处理、手工操作等。设立这样一个上限值确保
运维工作所淹没。因此，Google为整个SRE团队所做的所有传统运维工作设立了一个