(3)
Constant Product AMM. The simplest AMM mech-
anism is a constant product market maker, which keeps the
product x×y constant for any arbitrary asset pair (X/Y ).
In this work we focus on the constant product model,
because with over 75% market liquidity, this represents the
most prevalent AMM model. In the following, k denotes
the product of supplies (k ∈ R+ = x × y), which remains
constant upon taker transactions. k changes when a liq-
uidity provider deposits, or withdraws X/Y pool funds.
Equation 4 shows the state changes of TransactXforY
under a constant product AMM.
δx∈R+
−−−−−−−−−−−−→
(x, y) TransactXforY (δx)
δx∈R+
(x + δx,
xy
x + δx − cx(·) + cy(·))
(4)
C. Price Slippage
Price slippage is the change in the price of an asset
during a trade. Expected price slippage is the expected
increase or decrease in price based on the volume to
be traded and the available liquidity [51], where the
expectation is formed at the beginning of the trade. The
higher the quantity to be traded, the greater the expected
slippage (cf. Table I). Unexpected price slippage refers to
any additional increase or decrease in price, over and above
the expected slippage, during the interveni period from
the submission of a trade commitment to its execution.
This can be thought of as an expectation error. When an
exchange’s market liquidity changes, the resulting actual
slippage is challenging to foresee (cf. Figure 1), making the
formation of accurate expectations more challenging. We
note the following deﬁnitions.
Expected Execution Price (E [P]): When a liquidity
taker issues a trade on X/Y , the taker wishes to
execute the trade with the expected execution price
E [P] (based on the AMM algorithm and X/Y state),
given the expected slippage.
Execution Price (P): During the time diﬀerence be-
tween a liquidity taker issuing a transaction, and the
transaction being executed (e.g. mined in a block),
the state of the AMM market X/Y may change.
This state change may induce unexpected slippage
resulting in an execution price P 6= E [P].
Unexpected Price Slippage (P − E [P]): is the diﬀer-
ence between P and E [P].
Unexpected Slippage Rate ( P−E [P ]
the
E [P ] ): is
unexpected slippage over the expected price.
a) Slippage Example: For example, a liquidity
taker, who intends to trade 1 asset X for 20 Y at an
exchange, results in a price of 0.05, quoted in units of
asset Y . However, by the time the AMM DEX executes
this transaction, if the price increases to 0.1, the liquidity
taker would only receive 10 Y for 1 X. The unexpected
slippage, in this case, is 0.1−0.05 = 0.05. Slippage can also
be negative, i.e. a liquidity taker can receive more asset Y
than expected. If the execution price above decreases to
0.25, the liquidity taker would receive 40 Y for 1 X, with a
corresponding unexpected slippage of 0.1 − 0.25 = −0.15.
III. Sandwich Attacks on AMM DEXs
In traditional ﬁnancial markets, the predatory trading
strategy of
front-running involves exploiting (typically
non-public) information about a pending trade, expected
to materially change the price of an asset, by buying or
selling the asset beforehand [6]. If the asset is expected
to rise (fall) in price as a result of the trade, the front-
AMM State 1
AMM State 2
1, 000
100
10
1, 000
100
Liquidity X (x)
Liquidity Y (y)
Product (k = xy)
Purchase amount X
0.1000
0.1000
AMM Price Y/X
E [P ] Y/X
0.1010
0.1010
0.0010
0.0010
Expected slippage
Slippage rate
1.01% 11.11% 0.10% 1.01%
TABLE I: Example price slippages on an AMM DEX.
0.1000
0.1001
0.0001
0.1000
0.1111
0.0111
100, 000
1
10
1
10
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
430
Fig. 1: Visualizing the cause of unexpected slippage. E [P]
of TA is based on the AMM state of block N. TA does not
suﬀer from unexpected slippage, because no concurrent
transactions exist. TB executes in block N + 3. E [P] of
TC’s is based on block N, as we assume network delays.
If TC and TD change the state of the underlying market,
those may induce unexpected slippage for TB.
runner will seek to buy (sell) the asset before the large
pending transaction executes. AMM DEXs aim to mitigate
malpractice by providing complete transparency about
the available liquidity for assets X, Y , all pending and
performed trades, and therefore removing the role played
by non-public information. However, AMM DEXs also
exacerbate malpractices by quoting asset prices in a fully
deterministic way, providing relative certainty over the
expected price impact of a trade. This enables a front-
running adversary to perform attacks with predictable
outcomes. In the following, we study two sandwich attacks
on constant product AMM asset exchanges:
1) Liquidity taker attacks liquidity taker.
2) Liquidity provider attacks liquidity taker.
In each case, the fundamental intuition is that the delay
in the time taken for a transaction to execute allows an
adversary to proﬁt by exploiting the knowledge of the
direction of a price change. The attacks are called sand-
wich attacks because a victim transaction is sandwiched
between adversarial transactions.
A. System Model
We consider a blockchain P2P network, where a victim
initiates trades on an AMM DEX (cf. Figure 2). An
adversary observes pending victim transactions (i.e. not
yet mined transactions within the memory-, or mempool)
through a spy node (e.g. a custom Ethereum client),
and a miner chooses to include transactions within a
block according to a policy (cf. Section VI). A victim
transaction trades a crypto-currency asset (such as ETH,
DAI, SAI, VERI) to another crypto-asset. We do not con-
sider blockchain forks. While blockchains typically provide
delayed ﬁnality after k blocks [27], [29], we consider a
transaction ﬁnal once included within a block.
Fig. 2: Sandwich attack system.
B. Threat Model
We consider one computationally bounded and econom-
ically rational adversary A (cf. Section VII for an extended
threat model with multiple adversaries), that observes a
zero-conﬁrmation transaction TV from a victim trader V
on a blockchain P2P network. The adversarial trader can
issue its own transaction TA,f with a transaction fee f.
Depending on f, and the age of propagation, TA,f may
be included within the blockchain prior or past TV (cf.
Section VI). In this work we focus on these novel cases
where the adversary is not colluding with a miner, i.e. we
weaken the adversary to quantify a lower bound on the fea-
sibility and proﬁtability of the proposed attacks. Outside
of this work, a (stronger) adversary may collude, or bribe a
miner [40], [46], [14], to inﬂuence the transactions ordering
within a block, or even to fork the chain as in to discard
unsuccessful attacks. We moreover assume that an attack
against one victim transaction is independent from other
concurrent attacks towards other victim transactions.
C. Liquidity Taker Attacks Taker
In our ﬁrst attack, a liquidity taker targets a victim
liquidity taker who has emits on the blockchain P2P
network an AMM DEX transaction (TransactXforY ),
formalizing [4]. The adversary then emits two transactions
(one front- and one back-running) to exploit the victim
transaction TV (cf. Figure 3). These three transactions are
then unconﬁrmed in the blockchain P2P network, until a
miner choses to include and execute them within a block.
The adversary can inﬂuence the position of the adversarial
transactions, relative to the victim transaction, by paying
a higher, or lower transaction fee amount (cf. Section VI).
We refer the interested reader to the Appendix A-A for
the technical details of the involved transactions.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
431
TA createdpendingBlockN+1BlockNBlockN+2BlockN+3TB createdpendingTC createdpendingpendingTD createdtime appearance on the blockchain P2P networkcalculateintended pricecalculateintended pricecalculateintended pricecalculateintended priceVictimEthereumNetworkAdversary1). Victim sendstransaction Tv2). Broadcast TvMinerSpyNodeLightweightNode/ FullNodeMinerNode3b). Tv added to mempool3a). Tv added to mempool4). Tv observed6). Adversary sendsTA1 and TA25). Proﬁtable?7). Broadcast TA1 and TA28). TA1 and TA2 added to mempool9). TA1, Tv, TA2included in thesame blockFig. 3: An adversarial liquidity taker A attacks a victim
taker V on an AMM DEX. Transaction TV speciﬁes its
slippage protection based on the AMM state of block N.
The adversary’s goal is to include TA1, TV and TA2 in the
same block N + k, k ∈ Z+ in that sequence.
D. Liquidity Provider Attacks Taker
We present a novel sandwich attack where a liquid-
ity provider targets a victim liquidity taker transaction
(TransactXforY ) on the blockchain P2P network. Upon
observing the victim transaction, the adversary emits
three transactions (cf. Figure 4):
1) RemoveLiquidity (increases victim’s slippage)
2) AddLiquidity (restores pool liquidity)
3) TransactY forX (restores asset balance of X)
The (i) front-running RemoveLiquidity transaction re-
duces the market liquidity of the AMM DEX and increases
the victim’s unexpected slippage. The (ii) back-running
AddLiquidity transaction restores the percentage of liq-
uidity A holds before the attack. Finally, (iii) the back-
running transaction TransactY forX equilibrates the ad-
versary’s balance of asset X to the state before the attack.
Note that liquidity providers earn commission fees pro-
portional to the liquidity (i.e. the amount of assets) they
provide to an AMM DEX market. In this attack, the
adversary A withdraws all its assets from the liquidity pool
before TV executes. As such, A foregoes the commission
fees for the victim’s transaction. We refer the interested
readers to Appendix A-B for further technical details.
Fig. 4: An adversarial liquidity provider A attacks a victim
taker V . TV transacts asset Y for asset X.
E. Model Limitations
1) Margin and Leveraged Trading: Margin trading
is the process of using borrowed funds to amplify trading
proﬁts (or losses). A trader commits a percentage of the
total trade value to open a margin position. For example,
to open a 5× short ETH for DAI position with 10ETH,
the trader needs to commit 2ETH as collateral. A short
position reﬂects the expectation that the ETH price will
decrease, whereas a long position reﬂects the opposite. The
margin platform will then lend to the trader 10ETH and
convert those assets to DAI. If the ETH price decreases,
the trader can close the margin trade with a proﬁt.
A limitation of our work is that we do not consider
on-chain margin platforms utilizing AMM exchanges to
open short/long positions (e.g. the recently attacked bZx
platform [49]). An on-chain margin trade system would
enable an adversary to reduce the capital requirements
for sandwich attacks, at the cost of higher transaction fees
(for opening and closing margin trades). Margin trading
is unlikely to aﬀect the adversary’s monetary revenue
because the victim conﬁgures a ﬁxed slippage.
2) Blockchain Forks: We do not consider the impact of
stale blocks in our analysis. In practice, it is possible that
a transaction is included in a stale block (on the forked
chain), but is not included in the conﬁrmed blocks (on the
main chain). This stale transaction is typically re-injected
into the blockchain client’s mempool when the stale block
is added as an uncle to the main chain. The stale re-
injection process of adversarial and victim transaction may
increase the failure rate of sandwich attacks, but we leave
quantitative results for future work.
IV. Analytical Evaluation
In this section, we perform the analytical evaluation of
sandwich attacks on Uniswap [52]. Uniswap is the most
popular DEX at the time of writing with 1, 301 markets,
on average 7.30 provider per market and 29.3M USD
liquidity. From Uniswap’s inception in November 2018 to
November 2019, we identiﬁed a trade volume of 1.6M ETH
(248M USD), measured on a full archive Geth node (6-core
Intel i7-8700 CPU, 3.20GHz, 64GB RAM, 10TB SSD)6.
In what follows, we base our evaluations on Uniswap
parameters and adopt its liquidity pool distributions [52]
from Ethereum block 9M (mined 25th November 2019). In
this section we present the analytical results for the two
sandwich attacks presented in Section III-C and III-D.
A. Adversarial Liquidity Taker
At Ethereum mainnet block 9M, the ETH/SAI Uniswap
oﬀers 7, 377.53 ETH and 521, 468.62 SAI7. The ETH/DAI
Uniswap oﬀers 4, 660.75 ETH and 693, 706.47 DAI. Given
this market information, and the constant product formula
(cf. Section II), we plot in Figure 5(a) and 5(b) the
revenue of an adversarial taker performing a sandwich at-
tack against another taker. We visualize three unexpected
slippage thresholds (0.1%, 0.5% and 1%). We plot the
lines at which an adversary would break even given a total
6We focus only on transactions executed on Uniswap endpoints
directly, not internal transactions that are routed to Uniswap.
7In the following we adopt the ETH/SAI exchange rate at block
9M as the ETH/USD exchange rate. 1 ETH = 148.97 USD
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
432
TVTransactXForYpendingBlockNBlockN+kTA1TransactXForYpendingTA2TransactYForXpendingtime appearance on the blockchain P2P networktransaction orderTVTransactXForYpendingBlockNBlockN+kTA1RemoveLiquiditypendingTA2AddLiquiditypendingTA3TransactYForXpendingtransaction ordertime appearance on the blockchain P2P network(a) ETH/SAI market
(b) ETH/DAI market
Fig. 5: Analytical sandwich attack by a liquidity taker on a taker (Uniswap, block 9M, 0.3% fees, 0.5% unexpected
slippage). If TV transacts 40 ETH for SAI, A gets a max. revenue by front-running TV with a trade 18.59 ETH for
2, 754.32 SAI, and back-running with 2, 754.32 SAI for 18.68 ETH. This results in a proﬁt of 0.08 ETH (11.74 USD),
if A bears 0.01 ETH tx fees. Note that the two sub-legends of each ﬁgure apply to both sub-ﬁgure 5(a) and 5(b).
(TA1 and TA2) of 0.01 ETH (1.97 USD) and 0.001 ETH
(0.2 USD) worth of transaction fees8. We observe that
the greater the amount of ETH transacted by the victim,
the greater is the adversarial revenue. For example, given
an unexpected slippage protection of 0.5%, an adversarial
taker gains a revenue of 0.01 ETH (2.03 USD) for a
victim transaction trading 25 ETH to SAI on Uniswap.
In contrast, the adversary gains a revenue of 0.14 ETH
(20.71 USD), if the victim trades 50 ETH instead of 25.
a) Optimal Adversarial Revenue: Out of the over
1, 300 Uniswap exchange markets (i.e. coin pairs to trade)
an adversary may need to focus and hold liquidity in
selected markets. In Figure 6 we quantify the maximum
revenue an adversary can expect in a given market, condi-
tional on a suitable victim transaction. Note that MKR
has the highest liquidity (9, 759.83 ETH and 2, 830.27
MKR), followed by SAI (7, 377.53 ETH and 1, 099, 040.91
SAI), WETH (5, 642.08 ETH and 5, 632.25 WETH), SNX
(5, 262.53 ETH and 572, 512.14 SNX) and DAI (4, 660.75
ETH and 693, 706.47 DAI).
b) Minimum Proﬁtable Victim Input: Not every
victim transaction yields a proﬁtable attack. For each
of the ﬁve exchanges in Figure 6, we quantify a mini-
mum proﬁtable victim input min.input (under 0.01 ETH
transaction fee and 0.3% commission), under which an
adversary will be unable to make a proﬁt (e.g. 24.26
ETH for SAI per Figure 6). This minimum proﬁtable
victim input amount increases with the liquidity pool size
8At the time of writing, the average Ethereum transaction
(https://bitinfocharts.com/comparison/
USD
is
fee
ethereum-transactionfees.html)
0.13
(cf. Figure 7). The adversary’s optimal input increases
only slightly (cf. the near horizontal line on Figure 6)
with the victim transaction size, because the ETH value
transacted by the victim is relatively small compared to
the total amount of ETH in the Uniswap exchange. Given
a ﬁxed total slippage, we observe that markets with higher
liquidity (e.g. SAI, MKR) yield higher potential revenues
than lower-liquidity markets (e.g. SNX and DAI) (given
the appropriate victim transaction).
B. Adversarial Liquidity Provider
Figure 8(a) and 8(b) show the revenue of an adversarial
liquidity provider (cf. Section III-D), after TV . We visu-
alize the same adversarial break even lines at 0.01 ETH
(1.97 USD) and 0.001 ETH (0.2 USD). Note that the
adversary can only withdraw a limited amount of liquidity
without triggering the slippage protection on victim’s
transaction. By removing liquidity from an AMM market,
the liquidity provider is forgoing a market commission
(0.3% for Uniswap). To gauge proﬁtability, we consider
the following example where TV purchases 100 ETH from
the SAI Uniswap exchange with 0.5% unexpected slippage.
The optimal strategy is to withdraw 26.58% of the total
liquidity pool, which leads to a revenue of up to 0.28 ETH
(41.71 USD) for the adversary. A passive liquidity provider
with 26.58% of the liquidity pool would only earn 0.08
ETH (11.91 USD) given a commission of 0.3%.
a) Who Loses Money?: Both V and other honest
liquidity providers lose money. V purchases 100 ETH
with 15, 223.02 SAI without triggering a 0.5% slippage
protection as a result of A’s front-running transaction.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
433
Fig. 7: Minimum proﬁtable victim input on ﬁve Uniswap
markets (0.3% fee, A breaks even at 0.01 ETH, 0.5%
unexpected slippage). A liquidity taker does not yield a
proﬁt if TV trades less than 24.26 ETH for SAI.
the coins have 18 decimal places. For example, USDC,
which is the 7th largest Uniswap exchange at block 9M,
has 6 decimal places behind the comma. In Figure 9, we
plot the k = xy curve for SAI if it had 17 decimal places
instead of 18. The minimum victim transaction amount
for A increases from 43.93 ETH to 44.54 ETH, if the
victim purchases ETH using SAI. The minimum victim
transaction amount also increases from 45.3 ETH to 56.3
ETH for ETH to SAI transactions.
C. Overall success of the attacks
Overall, when analytically evaluated, both an adversar-
ial liquidity taker and provider can proﬁt by undertaking
a sandwich attack. The optimal adversarial revenue, how-
ever, depends on the slippage protection setting. By ﬁxing
the unexpected slippage, the adversary’s revenue increases
linearly against the amount of ETH transacted for both