         * Use persistent sockets to connect to backend
         * @var Boolean
         */
        private $_persistentSocket = false;
        /**
         * Connect timeout in milliseconds
         * @var Integer
         */
        private $_connectTimeout = 5000;
        /**
         * Read/Write timeout in milliseconds
         * @var Integer
         */
        private $_readWriteTimeout = 5000;
        /**
         * Constructor
         *
         * @param String $host Host of the FastCGI application
         * @param Integer $port Port of the FastCGI application
         */
        public function __construct($host, $port)
        {
            $this->_host = $host;
            $this->_port = $port;
        }
        /**
         * Define whether or not the FastCGI application should keep the connection
         * alive at the end of a request
         *
         * @param Boolean $b true if the connection should stay alive, false otherwise
         */
        public function setKeepAlive($b)
        {
            $this->_keepAlive = (boolean)$b;
            if (!$this->_keepAlive && $this->_sock) {
                fclose($this->_sock);
            }
        }
        /**
         * Get the keep alive status
         *
         * @return Boolean true if the connection should stay alive, false otherwise
         */
        public function getKeepAlive()
        {
            return $this->_keepAlive;
        }
        /**
         * Define whether or not PHP should attempt to re-use sockets opened by previous
         * request for efficiency
         *
         * @param Boolean $b true if persistent socket should be used, false otherwise
         */
        public function setPersistentSocket($b)
        {
            $was_persistent = ($this->_sock && $this->_persistentSocket);
            $this->_persistentSocket = (boolean)$b;
            if (!$this->_persistentSocket && $was_persistent) {
                fclose($this->_sock);
            }
        }
        /**
         * Get the pesistent socket status
         *
         * @return Boolean true if the socket should be persistent, false otherwise
         */
        public function getPersistentSocket()
        {
            return $this->_persistentSocket;
        }
        /**
         * Set the connect timeout
         *
         * @param Integer  number of milliseconds before connect will timeout
         */
        public function setConnectTimeout($timeoutMs)
        {
            $this->_connectTimeout = $timeoutMs;
        }
        /**
         * Get the connect timeout
         *
         * @return Integer  number of milliseconds before connect will timeout
         */
        public function getConnectTimeout()
        {
            return $this->_connectTimeout;
        }
        /**
         * Set the read/write timeout
         *
         * @param Integer  number of milliseconds before read or write call will timeout
         */
        public function setReadWriteTimeout($timeoutMs)
        {
            $this->_readWriteTimeout = $timeoutMs;
            $this->set_ms_timeout($this->_readWriteTimeout);
        }
        /**
         * Get the read timeout
         *
         * @return Integer  number of milliseconds before read will timeout
         */
        public function getReadWriteTimeout()
        {
            return $this->_readWriteTimeout;
        }
        /**
         * Helper to avoid duplicating milliseconds to secs/usecs in a few places
         *
         * @param Integer millisecond timeout
         * @return Boolean
         */
        private function set_ms_timeout($timeoutMs) {
            if (!$this->_sock) {
                return false;
            }
            return stream_set_timeout($this->_sock, floor($timeoutMs / 1000), ($timeoutMs % 1000) * 1000);
        }
        /**
         * Create a connection to the FastCGI application
         */
        private function connect()
        {
            if (!$this->_sock) {
                if ($this->_persistentSocket) {
                    $this->_sock = pfsockopen($this->_host, $this->_port, $errno, $errstr, $this->_connectTimeout/1000);
                } else {
                    $this->_sock = fsockopen($this->_host, $this->_port, $errno, $errstr, $this->_connectTimeout/1000);
                }
                if (!$this->_sock) {
                    throw new \Exception('Unable to connect to FastCGI application: ' . $errstr);
                }
                if (!$this->set_ms_timeout($this->_readWriteTimeout)) {
                    throw new \Exception('Unable to set timeout on socket');
                }
            }
        }
        /**
         * Build a FastCGI packet
         *
         * @param Integer $type Type of the packet
         * @param String $content Content of the packet
         * @param Integer $requestId RequestId
         */
        private function buildPacket($type, $content, $requestId = 1)
        {
            $clen = strlen($content);
            return chr(self::VERSION_1)         /* version */
                . chr($type)                    /* type */
                . chr(($requestId >> 8) & 0xFF) /* requestIdB1 */
                . chr($requestId & 0xFF)        /* requestIdB0 */
                . chr(($clen >> 8 ) & 0xFF)     /* contentLengthB1 */
                . chr($clen & 0xFF)             /* contentLengthB0 */
                . chr(0)                        /* paddingLength */
                . chr(0)                        /* reserved */
                . $content;                     /* content */
        }
        /**
         * Build an FastCGI Name value pair
         *
         * @param String $name Name
         * @param String $value Value
         * @return String FastCGI Name value pair
         */
        private function buildNvpair($name, $value)
        {
            $nlen = strlen($name);
            $vlen = strlen($value);
            if ($nlen > 24) | 0x80) . chr(($nlen >> 16) & 0xFF) . chr(($nlen >> 8) & 0xFF) . chr($nlen & 0xFF);
            }
            if ($vlen > 24) | 0x80) . chr(($vlen >> 16) & 0xFF) . chr(($vlen >> 8) & 0xFF) . chr($vlen & 0xFF);
            }
            /* nameData & valueData */
            return $nvpair . $name . $value;
        }
        /**
         * Read a set of FastCGI Name value pairs
         *
         * @param String $data Data containing the set of FastCGI NVPair
         * @return array of NVPair
         */
        private function readNvpair($data, $length = null)
        {
            $array = array();
            if ($length === null) {
                $length = strlen($data);
            }
            $p = 0;
            while ($p != $length) {
                $nlen = ord($data{$p++});
                if ($nlen >= 128) {
                    $nlen = ($nlen & 0x7F = 128) {
                    $vlen = ($nlen & 0x7F _sock, self::HEADER_LEN)) {
                $resp = $this->decodePacketHeader($packet);
                $resp['content'] = '';
                if ($resp['contentLength']) {
                    $len  = $resp['contentLength'];
                    while ($len && ($buf=fread($this->_sock, $len)) !== false) {
                        $len -= strlen($buf);
                        $resp['content'] .= $buf;
                    }
                }
                if ($resp['paddingLength']) {
                    $buf = fread($this->_sock, $resp['paddingLength']);
                }
                return $resp;
            } else {
                return false;
            }
        }
        /**
         * Get Informations on the FastCGI application
         *
         * @param array $requestedInfo information to retrieve
         * @return array
         */
        public function getValues(array $requestedInfo)