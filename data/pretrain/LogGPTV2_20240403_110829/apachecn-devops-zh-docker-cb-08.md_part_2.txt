在运行时向容器中添加环境变量非常容易，但也有它的缺点。当一个环境变量被添加到容器中时，在该容器中运行的所有东西都可以访问它。这意味着，不仅您的代码可以看到它，来自第三方库的代码也可以。这使得这些密码很容易意外暴露在容器外。
当错误发生时，这通常会意外发生，在生成的错误栈跟踪中，它会列出所有当前环境变量。这最初是为了帮助您调试问题而添加的，但是他们几乎不知道，通过公开所有的环境变量，他们也共享了您的密码，并且在此过程中创造了另一个问题。
为了解决这个问题，Docker 推出了一个名为 Docker Secrets([https://docs.docker.com/engine/swarm/secrets/](https://docs.docker.com/engine/swarm/secrets/))的新功能。Docker Secrets 目前仅适用于 Swarm 服务。秘密可以是您不想与其他人共享的任何数据块，如密码、顶级域名证书等。
这是一个很大的收获，让我们来看一个例子。
# 准备好
你将需要进入一个设置了 Docker Swarm 的系统。
# 怎么做...
请遵循以下步骤:
1.  向 Swarm 添加一个秘密，如下图所示:
```
 $ echo "myP@ssWord" | docker secret create my_password -
```
![](img/a5790265-ad32-4e46-a8f1-62f8c8f43634.png)
2.  创建使用该密码的服务:
```
 $ docker service create --name="my-service" --secret="my_password" redis
```
3.  因为我们使用的是 Swarm，所以容器可以在集群中的任何节点上运行。要找出您的 Swarm 容器正在哪个节点上运行，您可以使用`docker service ps`命令；参考下面的截图:
```
    $ docker service ps my-service
```
![](img/e878f263-a363-4f4e-b7c6-68229a25e4a9.png)
4.  现在您已经知道容器在哪个节点上运行，连接到该节点并运行以下命令来查看容器内未加密的秘密，如下图所示:
```
 $ docker container exec $(docker container ls --filter name=my-service -q) cat /run/secrets/my_password
```
![](img/60231947-c510-4c9c-8493-cedfc16be343.png)
# 它是如何工作的...
它是这样工作的，当你向 Swarm 添加一个秘密时，它会将这个加密的秘密存储在它的内部 Raft 存储中。当您创建服务并引用该秘密时，Swarm 会让这些容器访问该秘密，并将未加密的秘密作为内存中的文件系统装载添加到容器中。为了读取这个秘密，您的应用需要查看文件系统挂载，而不是环境。
如果秘密被移除，或者服务被更新以移除秘密，则该秘密将不再对容器可用。
# 还有更多...
让我们看看一些附加功能:
*   使用以下代码检查机密:
```
 $ docker secret inspect 
```
*   使用以下代码列出秘密:
```
 $ docker secret ls
```
*   使用以下代码删除机密:
```
 $ docker secret rm 
```
*   使用以下代码更新服务以删除机密:
```
 $ docker service update --secret-rm    
```
# 请参见
您可以在[https://docs.docker.com/engine/swarm/secrets/](https://docs.docker.com/engine/swarm/secrets/)查看 Docker Secrets 文档了解更多信息。
# 设置 Kubernetes 集群
Kubernetes 是一个开源容器编排工具，用于集群中的多个节点。它是由谷歌发起的，现在，其他公司的开发者也在为此做出贡献。它提供了应用部署、调度、更新、维护和扩展的机制。Kubernetes 的自动放置、自动重启和自动复制功能确保应用的所需状态得到维护，这是由用户定义的。用户通过 YAML 或 JSON 文件定义应用，我们将在本食谱的后面部分看到。这些 YAML 和 JSON 文件还包含标识模式的应用编程接口版本(API version 字段)。
让我们看看 Kubernetes 的一些关键组件和概念:
*   **吊舱**:由一个或多个容器组成的吊舱，是 Kubernetes 的部署单元。容器中的每个容器与同一容器中的其他容器共享不同的名称空间。例如，pod 中的每个容器共享相同的网络命名空间，这意味着它们都可以通过 localhost 进行通信。
*   **节点/仆从**:之前被称为仆从的节点，是 Kubernetes 集群中的工作节点，通过主节点进行管理。Pods 部署在一个节点上，该节点包括运行它们所需的以下服务:
    *   `docker`，运行容器
    *   `kubelet`，与主人互动
    *   `proxy` ( `kube-proxy`)，将服务连接到相应的 pod
*   **主机**:主机集群级控制服务，如:
    *   **API 服务器**:这个有 RESTful APIs，可以和主节点和节点交互。这是与 etcd 实例对话的唯一组件。
    *   **调度器**:这个调度集群中的作业，比如在节点上创建 pods。
    *   **副本集**:这确保用户指定数量的 pod 副本在任何给定时间运行。要使用副本集管理副本，我们必须定义一个配置文件，其中包含 pod 的副本数量。
Master 还与`etcd`通信，T0 是分布式键值对。`etcd`用于存储主节点和节点都使用的配置信息。`etcd`的监视功能用于通知集群中的变化。`etcd`可以托管在主机上或一组不同的系统上。
*   **服务**:在 Kubernetes 中，每个 pod 都有自己的 IP 地址，并且会根据复制控制器的配置不时地创建和销毁 pod。因此，我们不能依靠吊舱的 IP 地址来迎合一个应用。为了克服这个问题，Kubernetes 定义了一个抽象，它定义了一组逻辑单元和访问它们的策略。这种抽象被称为服务。标签用于定义我们的服务管理的逻辑集。
*   **标签**:标签是可以附着到对象上的键值对。使用这些，我们可以选择对象的子集。例如，一个服务可以选择所有带有 mysql 标签的 pods。
*   **卷**:卷是容器可以访问的目录。它与 Docker 卷相似，但不相同。Kubernetes 支持不同类型的卷，其中一些是 emptyDir(临时)、hostPath、gcePersistentDisk、awsElasticBlockStore 和 NFS。正在积极开发以支持更多类型的卷。更多详情可在[https://kubernetes.io/docs/concepts/storage/](https://kubernetes.io/docs/concepts/storage/)找到。
Kubernetes 可以安装到虚拟机、物理机和云中。完整的矩阵，看看[https://kubernetes.io/docs/setup/pick-right-solution/](https://kubernetes.io/docs/setup/pick-right-solution/)。在第 1 章*介绍和安装中，*我们向您展示了如何为 Mac 安装 Docker 和为 Windows 安装 Docker。这两个工具都允许您通过单击按钮轻松创建本地 Kubernetes 集群。更多细节请参考那一章。
在这个食谱中，我们将看到在本地主机上安装 Kubernetes 的另一种方法，使用 MiniKube 和 VirtualBox。在 Kubernetes 的 v1.10.0 版上尝试了 Kubernetes 上的这个和下面的食谱。
# 准备好
做好以下准备:
*   从[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)安装最新的 VirtualBox。设置这些的说明超出了本书的范围。
*   必须在计算机的 BIOS 中启用 VT-x 或 AMD-v 虚拟化。
*   install kubectl:
    *   您可以通过以下方式在 macOS 上安装带有 home brew([https://brew . sh](https://brew.sh))的 Kubectl:
```
$ brew install kubernetes-cli
```
*   您可以通过以下方式在 Windows 上安装带有巧克力的 Kubectl([https://chocolatey.org](https://chocolatey.org)):
```
$ choco install kubernetes-cli
```
*   您可以通过 Linux 上的`curl`安装`kubectl`二进制文件:
```
$ curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl
$ chmod +x ./kubectl
$ sudo mv ./kubectl /usr/local/bin/kubectl
```
*   安装迷你裙(https://github . com/Kubernetes/迷你裙/版本:
    *   在 Linux 上:
```
$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.28.2/minikube-linux-amd64
$ chmod +x minikube
$ sudo mv minikube /usr/local/bin/
```
```
$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.28.2/minikube-darwin-amd64
$ chmod +x minikube
$ sudo mv minikube /usr/local/bin/
```
# 怎么做...
运行以下命令，使用带 VirtualBox 的 MiniKube 设置 Kubernetes，并参考下面的截图:
```
$ minikube start --vm-driver=virtualbox
```
![](img/d758839f-8d1e-4a82-84c0-9b1ca9fd8a5f.png)
# 它是如何工作的...
MiniKube 将下载 MiniKube ISO，在 VirtualBox 中创建新的 VM，然后在内部配置 Kubernetes。最后，它将集群设置为 kubectl 的默认集群。
# 还有更多...
如果你需要对集群运行命令，你必须使用`kubectl`命令。以下是您日常使用的一些常见命令:
*   要创建新的部署，可以使用`kubctl run`命令。输入以下命令启动 echo web 服务，并参考下面的屏幕截图:
```
 $ kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080
 $ kubectl expose deployment hello-minikube --type=NodePort
```
![](img/4f6c7ac7-232e-4345-8516-5d2b1c53fb3a.png)
检查以确保它已启动并运行:
```
 $ kubectl get pod
```
![](img/49d3265c-da7f-432c-a70c-2589b6a87e92.png)
使用`curl`连接到新服务，以确保其正常工作:
```
 $ curl $(minikube service hello-minikube --url)
```
![](img/95b9f2f6-5b72-416e-8fae-12785283cc7d.png)
您可以使用以下代码删除服务和部署:
```
 $ kubectl delete service hello-minikube
 $ kubectl delete deployment hello-minikube
```
*   您可以使用以下代码获得节点列表:
```
 $ kubectl get nodes
```
*   您可以使用以下代码获得一个豆荚列表:
```
 $ kubectl get pods
```
*   您可以使用以下代码获得服务列表:
```
 $ kubectl get services
```
*   您可以使用以下代码获得副本集列表:
```
 $ kubectl get rs
```
*   您可以使用以下代码停止 MiniKube 集群:
```
 $ minikube stop 
```
*   您可以使用以下代码删除 MiniKube 集群:
```
 $ minikube delete
```
您将会看到列出了一些 pod、服务和复制控制器，因为 Kubernetes 创建它们是为了供内部使用。如果没有看到，可以使用`-all-namespaces`命令行标志。
# 请参见
您也可以查看以下参考资料:
*   配置迷你裙:[https://kubrines . io/docs/setup/mini kube/](https://kubernetes.io/docs/setup/minikube/)。
*   kuble documentation:[https://kubriones . io/docs/home/](https://kubernetes.io/docs/home/)。
*   Kubernetes API 约定:[https://Kubernetes. io/docs/reference/using-API/](https://kubernetes.io/docs/reference/using-api/)。
# 和 Kubernetes 一起使用秘密
在使用 Docker Swarm 秘方中，我们展示了如何使用 Docker Swarm 使用秘方以安全的方式存储密码。Kubernetes 也有类似的功能，让我们看看它是如何工作的。
# 准备好
您将需要设置和配置一个 Kubernetes 集群，如前面的方法所述。
# 怎么做...
请遵循以下步骤:
1.  将您的密码添加到本地计算机上的文件中: