# 19 \| 硅谷面试：那些你应该知道的事儿一天，一位朋友偶然问我："听说 Airbnb 的面试一共有七八轮，这是不是真的？"我回答这是真的，而且告诉他在北京的招人流程也基本是一样的。朋友却觉得没有必要，认为一轮就能面出应试者的水平，弄那么复杂的面试是在浪费工程师的时间。对于他的看法，我不完全赞同，也不完全反对。其实硅谷的公司大部分都会有多轮的面试，这主要包括了算法编程、系统设计、工作经验等。**首先，我就来说一说，为什么要有那么多轮的面试。**算法编程主要考察编程的硬功夫。现在很多公司都要求现场上机，程序能运行，测试例能通过；还有一些公司使用白板考算法，于是才有了Homebrew 的作者马克斯·霍威尔（ Max Howell ）去 Google面试时无法在白板上翻转二叉树的故事。系统设计主要是给候选人一个系统设计的场景，根据自己的能力和经验去架构整个系统。系统设计面试通常没有唯一解，侧重的是候选人对不同架构和解决方案的熟悉程度，对方案的优缺点的深入了解。工作经验面试主要是与候选人聊他做过的项目，深入了解和挖掘候选人的技能树。类似Airbnb 这样的公司还会有关于价值观和团队协作能力的测试。这样看来，一轮面试是远远不够的，因为有很多工程师程序写得又快又好，但是在系统设计方面会表现的很差，对一些基本的设计理念和方法知之甚少。还有一些人，具备基本的系统知识，但想问题不全面，不能自己考虑各种场景的设计需求和异常处理，需要提示才能发现系统的漏洞。又或者，有的人沟通能力很差，无法准确地表述出问题和答案，如果是平时的工作交流，沟通能力欠缺会给团队合作带来很大的阻力。当然，也有一些人恰恰相反，谈起设计和理论来头头是道，口若悬河，但是一写代码，几乎步步维艰。出了错，也不知道如何有效地调试（Debug）。也有人说，可以知人善任。特别能写程序的，就让他多写代码，特别能说的，就让他负责沟通相关的工作，这样不就皆大欢喜了吗。其实，这样做是行不通的。一来，硅谷优秀的工程师大部分能够独当一面，他们能把工作做好，确实需要用到方方面面的技能，这也是效绩评估中考察工程师的基本要求；二来，好的公司和岗位根本不愁招不到人。你说自己代码写得特别好，但还会有很多写代码能力跟你不相上下，但是系统设计比你牛很多，所以你被拒的可能性还是很大。``{=html}**写到这估计还会有人有疑问：即使这样，那一轮代码面试，一轮设计面试也够了啊，为什么每项需要两轮甚至三轮面试呢？**我的经验是：因为不同题目考察的知识点和解决问题能力的侧重点不同，两轮可以更全面地进行评估；更重要的是，面试官也是人，难免有一些主观看法，进行两轮面试，两个人的反馈意见就可以相互有个参考，比如应试者是不是两轮都出现同样的问题或者失误，对同一领域的不同问题是不是都有正确的见解等。有的时候，两轮面试官意见相悖，加试一轮的情况也并不少见。此外，有的时候我们因为面试人手不足，也会不停地增加一些新的面试官。这些面试官经验不足，如果他们的反馈成为唯一依据，多少会产生一些冤案错案，进行交叉面试，可以尽可能避免这种情况的发生。**再说说刷题的问题。**如果你觉得写程序手生，或者一些基本概念需要复习，刷题可能是有帮助的；但是大多数情况下，除非你是跨领域面试，否则每天的工作就是系统设计和讨论，编写代码，功底不至于完全丢下，如果纯粹靠刷题通过面试，后面工作可能还是会比较吃力。当然，努力刷题对通过面试肯定是很有帮助的，毕竟大部分公司的题库都比较有限，有些题用了很多次被泄露出去，你来面试前做一遍肯定会占便宜。说到了题库，我有一点对应试者的小建议。很多应试者在面试结束后，喜欢在网上分享题目。抛开道德层面，这种行为确实是极其"大公无私"的；但如果你拿了Offer 去泄题，后面不如你的人可能会成为你的同事；而如果你没拿到 Offer去泄题，后面不如你的人可能因此拿到你想要却拿不到的 Offer。除此之外，面试官并不像想象的那么好骗，应试者是不是见过题目，面试官其实很容易看出来。有时候我们在反馈面试意见的时候，如果觉得有些题你之前做过但是没说，也会如实反馈。这种意见很可能会影响你能不能拿到Offer。另外，即使是同样的题，是不是真的懂，有经验的面试官也很容易问出来。**那么，作为应试者，面试官的经验会对你造成什么影响呢？**总的说来，越是经验不足的面试官，他可能更容易把思路局限在一个自己很熟的领域，如果你凑巧和他的思路一致，就有可能拿到很好的反馈。如果你提出了一个完全不同的解题思路，面试官反而不能十分理解，面试成绩上有偏差也是可能的。面试中还有一个潜规则，就是很多题都有难度等级，也就是分梯度的。你解出了第一部分，才会看到第二部分的问题，答出了第二部分，才有机会看到第三部分。如果一开始你就比较慢，或者解题比较挣扎，可能面试官就会直接放弃你，虽然他在当时没有明确拒绝，但心中已经给了你NO，所以剩下的时间，即使你觉得自己把第一部分答得很完美了，然而真相是你根本不知道还有二和三，也就不知道为什么觉得自己把题解出来了，最后却拿不到Offer。**最后说说怎么才能拿到面试机会。**很多人会觉得找人内推拿到面试的机会一定更大，其实并不是这样。别的公司不好说，但是像很多比较热门的科技公司，员工都会收到很多并不熟悉的人的内推请求。比如我自己，平均一周要内推两到三个人。公司知道这种情况很多，所以内推系统都会设计一个选项"你是否和被推荐者共事过"，如果是，你能不能替他的能力担保？如果没有工作交集或不能担保，即使内推了，你的简历也会得到和普通简历一样的待遇，唯一的优势可能是简历不会丢，处理速度稍微快一点而已。HR筛选简历的所有条件，并不会因为内推而降低标准。所以平时具备扎实的基本功和出色的业绩，简历上有闪光点，才是拿到面试机会的关键。真的找人推荐，最好找那些共事过的能为你能力背书的人。今天，我和你聊了聊硅谷面试的那些事儿，比如硅谷为什么会有那么多轮的面试，面试前要不要刷题，面试过程中与面试官的交流，面试题的难度分级和内推的作用。如何拿到一个面试机会并通过面试呢？其实没什么捷径，好的工作经历、扎实的基本功和一份特点突出的简历，就是工程师成功通过面试的金钥匙。你有什么有趣的面试故事，也在留言中说说，我们一起分享。我们下次再见。\![](Images/9646a8154f57432904b0215eacaebe87.png){savepage-src="https://static001.geekbang.org/resource/image/7f/01/7f0faa67e327efd58c80c7411a54b201.jpg"}戳此获取你的专属海报](https://time.geekbang.org/activity/sale-poster?utm_source=app&utm_medium=zhuyun-article&utm_campaign=zhuyun-saleposter&utm_content=zhuyun0416)
# 20 \| 项目管理中的三个技巧我在"管理者不用亲力亲为：关键是什么"一文中，介绍了授权和任务分配的重要性。那篇文章的重点有两点：第一我们要有效地把任务分配出去，第二我们要保证分配出去的任务能够被圆满完成。作为管理者，我们平时在项目管理的过程中，更侧重的是要保证团队成员能够按照你的期望值完成任务。今天的这篇文章里，我会进一步展开讲一些项目管理的技巧。这些技巧一部分来自我个人的思考和实践，另一部分得益于我的老板的悉心指导和启发，真实可行并且有效，希望对你的日常管理工作也有帮助。
## 第一个技巧，我们在做项目计划的时候，要对多个项目进行细分重组怎么理解呢？我们从做这件事的目的说起。在给组里多个人分配项目的时候，我们往往需要考虑的因素包括以下的内容。1.  先评估能力，再分配任务，每个人的能力要和任务的难度匹配。2.  每个人任务完成所需时间要尽量平等，也就是要达到一种负载平衡。3.  每个人得到的任务里，挑战有意思的工作和脏活累活的比例要大致相等。4.  每个人任务里有足够的挑战，能够帮助其成长，又不至于太难而让其望而生畏并产生挫败感。5.  不同人的任务之间如果有依赖性，在分配任务时要安排合理的顺序，确保不会有人被别的人或事阻塞（Block）。6.  每个人的任务里都应该有一个主题，就好像故事有一条主线。这样，成员会觉得自己参与了一个比较完整的任务，进而产生成就感，而不是感觉做了一堆杂活。**达到这些目的的手段，我们姑且就称其为"细分重组"。这个过程又包括两个阶段。**第一个阶段。你需要把所有要做的事，细分成一个个的小任务，每个任务的大小、完成需要的时间都大致差不多。如果有比较大的任务块，就尽可能地切分成几个小块。这需要管理者对项目本身的重点和任务细节有很好的把握。第二个阶段。把这些大小均匀的任务块，按照上面提到的因素，分装到几个虚构的"箱子"里，然后分配给团队成员。这就像个打包装箱的过程，尤其需要注意的是，每个箱子一定都有一个主题，也就是说，如果你想给这个箱子起个名字，你一定能找到那个名字，并很好地概括其中的内容。最后，保证每个箱子在内容、重量等各方面都比较均衡。完成了这个工作之后，后续项目的每一步，作为管理者的你都能做到心中有数。同时还能避免后期执行中一些可能的弊端，例如，有的人工作繁重疲累不堪，有的人则早早完成了自己任务，缺乏挑战。这种任务划分的方式还会让每个人更有成就感和责任感，因为他们完成的是一整个故事。``{=html}
## 第二个技巧，工期估算一般情况下，技术管理者都会对每个任务的完成时间有自己的判断，但最终还是要和接受任务的员工沟通清楚，并尊重对方的意见，确保双方能就任务时间线达成一致。有了承诺，工作的目标性也会更强一些，毕竟，截止日期才是最好的效率工具。这一点非常重要。如果不是双方达成一致的协议，或者不是双方都认可合理的时间估算，一旦后期出现不能按期完成任务的时刻，就很容易出现一些令人不愉快的交流。同时需要注意的是，很多工程师在做时间预算的时候，会过于乐观。我见过的大部分工程师都乐观、积极、自信，他们沉浸在代码的世界里，试图把软件做到最好，往往却会忽略时间因素。当核对工期的时候，他们会根据自己的经验给出一个非常乐观的期限。和普通人一样，工程师们也会高估自己编程能力和对复杂逻辑的处理能力。甚至，有时候工程师给出的工期是自己负责的那部分程序编写完成的时间；然而，一个功能的完成，包含编译、单元测试、提交代码、集成测试、功能测试、性能测试和上线。如果不是特别留意，这些细节往往会泯灭在项目进度的时间表里，无法体现。即使是一个很有估算经验的工程师，在新项目中也可能会遇到各种各样新的问题，你会惊奇地发现，上一个项目中的方法在新产品中失灵了。另外，开发中遇到的技术瓶颈或难以解决的Bug，也会耗费程序员大量的精力和时间，这时候我们能做的事情只有等待，给他们时间去披荆斩棘，直到问题解决。所以，在这个阶段，往往需要技术领导给出参考性的意见和建议；除此之外，你最好留出一些缓冲的时间，因为实际工作中总会有一些不可预见的情况发生。
## 第三个技巧，也是很重要的一点，实时跟踪，并准备好 B 计划技术领导者要做好两手准备，比如，团队中有一部分人突然表现失常了怎么办？项目由于其他原因被阻塞了怎么办？这时候我们需要做好以下两点。1.  我们在 "细分重组"    中把工作分成了小块，在完成过程中，我们还需要设立各种里程碑。其中，有一些长期的大里程碑，也有一些为期一周到两周的小里程碑。这些里程碑就像你上高速行驶之前给自己定的目标：几点前要到某个服务区，几点前要到某个城市等等。有了这些里程碑，管理者就可以通过它们进行实时跟踪，了解项目的进度，看看项目这辆汽车是不是还正常地行驶在高速路上，是不是抛锚了，是不是没油了，等等。2.  一旦出现延迟，管理者要和任务的负责人一起分析原因，询问对方能否追上进度，会不会对整个项目的进程有重大影响。如果问题不严重，可以暂时不做调整，继续跟进。如果影响比较大，就需要启动    B    计划了，比如调整执行的人员、提供额外的资源、分析执行的方法、调动其他组支援，甚至你需要重新考虑项目进度。今天，我和你讨论了平时在项目管理过程中的一些实践技巧，总结一下：管理者首先要对大的项目进行细分重组，"打包装箱"之后再分配下去；其次，在工期估算方面，管理者要和任务的负责人达成一致，并且要注意到，工程师们在进行时间预算的时候都是比较乐观的，最好为项目预留缓冲的时间；最后，要为项目设置大大小小的里程碑，并实时跟进，一旦项目出问题，就要启动B 计划。通常情况下，如果这三点做得比较好，我们的 B计划就不会用上，这也是我们期待的最好结果。你在项目执行过程中还有那些经验和技巧呢？可以在留言中告诉我，我们一起进步。感谢您的收听，我们下期再见。\![](Images/9646a8154f57432904b0215eacaebe87.png){savepage-src="https://static001.geekbang.org/resource/image/7f/01/7f0faa67e327efd58c80c7411a54b201.jpg"}戳此获取你的专属海报](https://time.geekbang.org/activity/sale-poster?utm_source=app&utm_medium=zhuyun-article&utm_campaign=zhuyun-saleposter&utm_content=zhuyun0416)