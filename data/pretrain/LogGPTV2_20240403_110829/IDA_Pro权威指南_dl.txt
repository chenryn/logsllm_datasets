    internal_parse_type(&type, &tval, &fields);
    appcall(ea, 0, &tval, &fields, nargs, args, &result);
AppendFchunk
append_func_tail(get_func(funcea), ea1, ea2);
ApplySig
plan_to_apply_idasgn(name);
AskAddr
ea_t addr = defval;
askaddr(&addr, "%s", prompt):
return addr;
AskFile
return qstrdup(askfile_c(forsave, mask, "%s", prompt));
AskIdent
return qstrdup(askident(defval, "%s", prompt));
AskLong
sval_t val = defval;
asklong(&val, "%s", prompt):
return val; 
AskSeg
sel_t seg = defval;
askseg(&sel, "%s", prompt):
return val; 
AskSelector
return ask_selector(sel);
AskStr
return qstrdup(askstr(HIST_CMT, defval, "%s", prompt));
AskYN
return askyn_c(defval, "%s", prompt);
AttachProcess
return attach_process(pid, event_id);
AutoMark
//macro, see AutoMark2
AutoMark2
auto_mark_range(start, end, queuetype);
AutoShow
//macro, see SetCharPrm
AutoUnmark
//*** undocumented function
autoUnmark(start, end, type); 
Batch
::batch = batch;
BeginEA
//macro, see GetLongPrm
BeginTypeUpdat
return begin_type_updating(utp)
Byte
return get_full_byte(ea);
CanExceptionCo
return get_debug_event()->can_cont;
ChangeConfig
internal_change_config(line)
CheckBpt
check_bpt(ea)
Checkpoint
//*** undocumented function
ChooseFunction
return choose_func(ea, -1)->startEA;
CleanupAppcall
return cleanup_appcall(0) == 0;
CmtIndent
//macro, see SetCharPrm
CommentEx
get_cmt(ea, repeatable, buf, sizeof(buf));
return qstrdup(buf); 
omments
//macro, see SetCharPrm
ompile
//macro for CompileEx(file, 1);
ompileEx
if  (isfile)
CompileEx(input, CPL_DEL_MACROS | CPL_USE_LABELS,
            errbuf, sizeof(errbuf));
else
CompileLineEx(input, errbuf, sizeof(errbuf)); 
CreateArray
qsnprintf(buf, sizeof(buf), "$ idc_array %s", name);
netnode n(buf, 0, true);
return (nodeidx_t)n;
DbgByte
if (dbg && (dbg->may_disturb() || get_process_state() read_memory(ea, &b, sizeof(b));
   return b; 
DbgDword
if (dbg && (dbg->may_disturb() || get_process_state() read_memory(ea, &d, sizeof(d));
   return d; 
DbgQword
if (dbg && (dbg->may_disturb() || get_process_state() read_memory(ea, &q, sizeof(q));
   return q; 
DbgRead
if (dbg && (dbg->may_disturb() || get_process_state() read_memory(ea, buf, len);
   return buf; 
DbgWord
if (dbg && (dbg->may_disturb() || get_process_state() read_memory(ea, &w, sizeof(w));
   return w; 
DbgWrite
if (dbg && (dbg->may_disturb() || get_process_state() write_memory(ea, data, length of data); 
DecodeInstruction
ua_ana0(ea);
return cmd; 
DefineException
return define_exception(code, name, desc, flags);
DelArrayElement
netnode n(id).supdel(idx, tag);
DelBpt
del_bpt(ea);
DelCodeXref
del_cref(From, To, undef);
DelConstEx
del_const(enum_id, value, serial, bmask);
DelEnum
del_enum(enum_id);
DelExtLnA
netnode n(ea).supdel(n + 1000);
DelExtLnB
netnode n(ea).supdel(n + 2000);
DelFixup
del_fixup(ea);
DelFunction
del_func(ea);
DelHashElement
 netnode n(id);
n.hashdel(idx); 
DelHiddenArea
del_hidden_area (ea);
DelHotkey
del_idc_hotkey(hotkey);
DelLineNumber
del_source_linnum(ea);
DelSeg