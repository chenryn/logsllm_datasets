# TL;DR
本文的主要重点是原型污染攻击——利益原型污染漏洞可以绕过HTML过滤器。并且我现在绞尽脑汁在思考如何自动化原型污染攻击,从而帮助我解决一些XSS挑战题。
# 原型污染基础
原型污染是JavaScript特有的安全漏洞，源于JavaScript继承模型——基于原型的继承。与C++或Java不同，在JavaScript中创建对象不需要定义类。
    const obj = {
      prop1: 111,
      prop2: 222,
    }
该对象有两个属性：pro1和pro2。但这些并不是我们可以访问的唯一属性。调用`obj.toString()`将返回来自原型的"`[object
Object]".
toString`(以及其他一些默认成员),JavaScript中的每个对象都有一个原型(它也可以是null)。如果我们不指定原型，默认情况下，对象的原型是Object.Prototype。  
DevTools可以很方便地检查Object.prototype的属性列表：
我们还可以通过检查其 `__proto__`成员或通过调用`Object.getPrototypeOf`找出给定对象的原型：
同样也可以使用`__proto__`或`Object.setPrototypeOf`设置对象的原型：
简而言之，当我们试图访问对象的属性时，JS引擎首先检查对象本身是否包含该属性。如果有，则返回该属性。否则，JS检查对象原型是否具有该属性。如果没有，JS会检查原型…的原型。依此类推，直到原型为null。这就是[原型链](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain "原型链")。  
JS遍历原型链会有一个重要的影响：如果我们能以某种方式污染Object.prototype(即，使用新属性扩展它)，那么所有JS对象都将具有这些属性。
    const user = { userid: 123 };
    if (user.admin) {
        console.log('You are an admin');
    }
乍一看，if条件不可能为真，因为user对象没有名为admin的属性。但是，如果我们污染了Object.prototype并定义了admin属性，那么console.log将会被执行。
    Object.prototype.admin = true;
    const user = { userid: 123 };
    if (user.admin) {
        console.log('You are an admin'); // this will execute
    }
这证明原型污染可能会对应用程序的安全性产生巨大影响，因为我们可以定义会改变其逻辑的属性。但是有关原型污染利用的实例确不多，目前我已知道的原型污染的例子  
1.在Ghost CMS中利用原型污染导致[RCE](https://github.com/HoLyVieR/prototype-pollution-nsec18 "RCE")  
2.kibana中的[RCE](https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/ "RCE")  
3.POSIX已经证明，在[ejs](https://blog.p6.is/Real-World-JS-1/
"ejs")以及[pug和handlers](https://blog.p6.is/AST-Injection/
"pug和handlers")中，通过原型污染导致RCE是可行的。  
在阐述本文的重点之前，还有一个问题需要探究：原型污染最初是如何发生的？  
此漏洞通常是由合并操作(将所有属性从一个对象复制到另一个对象)引发。例如：
    const obj1 = { a: 1, b: 2 };
    const obj2 = { c: 3, d: 4 };
    merge(obj1, obj2) // returns { a: 1, b: 2, c: 3, d: 4}
也可以这样合并
    const obj1 = {
      a: {
        b: 1,
        c: 2,
      }
    };
    const obj2 = {
      a: {
        d: 3
      }
    };
    recursiveMerge(obj1, obj2); // returns { a: { b: 1, c: 2, d: 3 } }
递归合并的基本流程是：  
迭代obj2的所有属性并检查它们是否存在于obj1中。  
如果属性存在，则对此属性执行合并操作。  
如果属性不存在，则将其从obj2复制到obj1。  
在实际合并操作中，如果用户可以控制要合并的对象，那么通常其中一个对象来自JSON.parse的输出，而`JSON.parse`有点特殊，因为它将`__proto__`视为“普通”属性，即没有其作为原型访问器。
在本例中，obj2是使用JSON.parse创建的。这两个对象都只定义了一个属性，`__proto__`。但是，访问`obj1.__proto__`会返回`Object.prototype`(因此`__proto__`是返回原型的特殊属性)，而`obj2.__proto__`包含JSON中给出的值，即：123。这说明在`JSON.parse`中处理`__proto__`属性的方式与在普通JavaScript中不同。  
因此，合并两个对象的recursiveMerge函数：
    obj1={}
    obj2=JSON.parse('{"__proto__":{"x":1}}')
该函数的工作方式如下：  
迭代`obj2`中的所有属性。唯一的属性是`__proto__`。  
检查 `obj1.__proto__`是否存在。确实存在。  
迭代`obj2.__proto__`中的所有属性。唯一的属性是x。  
赋值： `obj1.__proto__.x =
obj2.__proto__.x`.因为`obj1.__proto__`指向`Object.prototype`，所以原型是受污染的。  
在许多常用的JS库中都发现了这种类型的错误，包括[lodash](https://snyk.io/vuln/SNYK-JS-LODASH-450202
"lodash")或[jQuery](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/ "jQuery")。
# 原型污染和HTML过滤器
现在我们知道了什么是原型污染，以及合并操作如何触发漏洞。目前公开的漏洞报告来看，利用原型污染的实例都集中在NodeJS上，然后实现RCE。但是，客户端JavaScript也可能受到该漏洞的影响。  
我把研究重点放在了HTML过滤器上。HTML过滤器是一类库，接受不受信任的HTML标记，并删除所有可能导致XSS的标记或属性。通常是以白名单的方式运行。  
假设我们有一个仅允许``和``标记的过滤器。如果我们给它添加以下标记：
    HeaderThis is some HTML
会被过滤成以下形式
    HeaderThis is some HTML
HTML过滤器需要白名单列表。库通常采用以下两种方式来存储列表：  
1.数组方式  
库有一个包含允许元素列表的数组，例如：
    const ALLOWED_ELEMENTS = ["h1", "i", "b", "div"]
检查给定的元素是否位于数组中，调用`ALLOWED_ELEMENTS.includes(element)`。  
这种方法会避免原型污染，因为我们不能扩展数组；也就是说，我们不能污染Length属性，也不能污染已经存在的索引。
    Object.prototype.length = 10;
    Object.prototype[0] = 'test';
那么`ALLOWED_ELEMENTS.length`仍然返回4，并且`ALLOW_ELEMENTS[0]`仍然是“h1”。  
2.对象方式  
另一种解决方案是存储具有元素的对象，例如：
    const ALLOWED_ELEMENTS = {
     "h1": true,
     "i": true,
     "b": true,
     "div" :true
    }
然后，通过调用`ALLOWED_ELEMENTS[element]`可以检查是否允许某些元素。这种方法很容易通过原型污染来利用；因为如果我们通过以下方式污染原型：
    Object.prototype.SCRIPT = true;
然后ALLOWED_ELEMENTS["SCRIPT"]会返回true.
# List of analyzed sanitizers
我在NPM中发现了三个最常用的HTML过滤器；  
[Sanitize-html](https://www.npmjs.com/package/sanitize-html "Sanitize-html")，每周下载量约80万次。  
[XSS](https://www.npmjs.com/package/xss "XSS"),每周下载量约为77万次。  
[Dompurify](https://www.npmjs.com/package/dompurify "Dompurify")每周下载量约为54.4万次  
[google-close-library](https://www.npmjs.com/package/google-closure-library
"google-close-library")在NPM中不是很流行，但在Google应用程序中常用。  
在接下来的章节中，我将简要概述所有的过滤器，并展示如何通过原型污染绕过这些过滤器。
# sanitize-html
调用sanitize-html很简单：
或者，可以用选项将第二个参数传递给sanitizeHtml。否则会使用默认选项：
    sanitizeHtml.defaults = {
      allowedTags: ['h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',
        'nl', 'li', 'b', 'i', 'strong', 'em', 'strike', 'abbr', 'code', 'hr', 'br', 'div',
        'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre', 'iframe'],
      disallowedTagsMode: 'discard',
      allowedAttributes: {
        a: ['href', 'name', 'target'],
        // We don't currently allow img itself by default, but this
        // would make sense if we did. You could add srcset here,
        // and if you do the URL is checked for safety
        img: ['src']
      },
      // Lots of these won't come up by default because we don't allow them
      selfClosing: ['img', 'br', 'hr', 'area', 'base', 'basefont', 'input', 'link', 'meta'],
      // URL schemes we permit
      allowedSchemes: ['http', 'https', 'ftp', 'mailto'],
      allowedSchemesByTag: {},
      allowedSchemesAppliedToAttributes: ['href', 'src', 'cite'],
      allowProtocolRelative: true,
      enforceHtmlBoundary: false
    };
`allowedTags`属性是一个数组，这意味着我们不能对其进行原型污染。不过，值得注意的是，这里允许使用iframe。  
`allowedAttributes`是一个映射，关于这个映射，添加属性`iframe: ['onload']`会导致通过``触发XSS。  
在内部，`allowedAttributes`被重写为变量`allowedAttributesMap`。(name是当前标记的名称，a是属性的名称)：
    // check allowedAttributesMap for the element and attribute and modify the value
              // as necessary if there are specific values defined.
              var passedAllowedAttributesMapCheck = false;
              if (!allowedAttributesMap ||
                (has(allowedAttributesMap, name) && allowedAttributesMap[name].indexOf(a) !== -1) ||
                (allowedAttributesMap['*'] && allowedAttributesMap['*'].indexOf(a) !== -1) ||
                (has(allowedAttributesGlobMap, name) && allowedAttributesGlobMap[name].test(a)) ||
                (allowedAttributesGlobMap['*'] && allowedAttributesGlobMap['*'].test(a))) {
                passedAllowedAttributesMapCheck = true;