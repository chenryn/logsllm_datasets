i) Preﬁx match-
rors can be classiﬁed into four types.
ing: When a resource server checks whether the Origin
header value matches a trusted domain, it trusts any do-
main preﬁxed with the trusted domain. For example,
a resource server wants to trust example.com, but for-
gets the ending character, resulting in allowing exam-
ple.com.attacker.com. We found this mistake on pop-
ular websites like tv.sohu.com, myaccount.realtor.com.
ii) Sufﬁx matching: When a resource server checks
whether the Origin header value matches any subdo-
main of a trusted domain, the sufﬁx matching is incom-
plete, accepting any domain ending with the trusted do-
main. For example, www.example.com wants to allow
any example.com subdomain, but it only checks whether
the Origin header value ends with “example.com”, lead-
ing to allow attackexample.com, which can registered
by attackers. Such mistakes are found on websites like
m.hulu.com. iii) Not escaping ‘.’: For example, exam-
ple.com wants to allow www.example.com using regular
expression matching, but its conﬁguration omits escap-
ing “.”, resulting in allowing wwwaexample.com. Web-
sites like www.nlm.nih.gov are found to make this mis-
take. iv) Substring matching: We also found that some
websites like subscribe.washingtonpost.com have val-
idation mistakes, resulting allowing ashingtonpost.co,
which can be registered by anyone.
In our measure-
ment, a total of 50,216 domain names (about 10.4%)
were found to have these validation mistakes, as shown
in Table 3.
Table 4: Different CORS framework implementations
no Vary
Framework
* and “true”
to reﬂection
.
ASP.net CORS (ASP.net)
Corsslim (PHP)
Django-cors-headers
(Python)
Flask-cors (Python)
Go-cors (Golang)
Laravel-cors (PHP)
NelmioCorsBundle (PHP)
Plack::Middleware
::CrossOrigin (Perl)
Rack-cors (Ruby)
Tomcat CORS ﬁlter (Java)
Yii2 CORS ﬁlter (PHP)
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
6.2 Origin Forgery
An important security prerequisite for CORS is that the
Origin header value in a cross-origin request cannot be
forged. But this assumption does not always hold in re-
ality.
The Origin header was ﬁrst proposed for defense
against CSRF attacks [9]. RFC 6454 [8] states that if a
request comes from a privacy-sensitive context, the Ori-
gin header value should be null, but it does not explicitly
deﬁne what is a privacy-sensitive context.
including local ﬁle pages,
CORS reuses the Origin header, but CORS stan-
dards also lack clear deﬁnition of null value.
In
browser implementations, null is sent from multiple
iframe
different sources,
sandbox scripts. When developers want
to share
data with local ﬁle pages (e.g., hybrid applications),
they conﬁgure “Access-Control-Allow-Origin: null” and
“Access-Control-Allow-Credentials: true” on their web-
sites. However, an attacker can also forge the Ori-
gin header with null value from any website by using
browser’s iframe sandbox feature. Thus, sites conﬁgured
with “Access-Control-Allow-Origin: null” and “Access-
Control-Allow-Credentials: true” can be read by any do-
main in this way. In our measurement, we found 3,991
domains (about 0.8%) with this misconﬁguration, in-
cluding mingxing.qq.com, aboutyou.de.
6.3 Complexity of Security Mechanisms
For web developers’ convenience, CORS allows Access-
Control-Allow-Origin to be conﬁgured with the wildcard
“*”, which allows any domain. Given these overly-
loose permissions, CORS later added an additional se-
curity mechanism: “Access-Control-Allow-Origin: *”
and “Access-Control-Allow-Credentials: true” cannot be
used at the same time. This means that “Access-Control-
1088    27th USENIX Security Symposium
USENIX Association
Allow-Origin: *” can only be used to share public re-
sources.
We found this security mechanism is not well-
understood by either application developers or frame-
work developers: 1) Many application developers were
not aware of this additional requirement and still con-
ﬁgured both “Access-Control-Allow-Origin:
*” and
“Access-Control-Allow-Credentials: true”. In our mea-
surement, 7,444 out of 481,589 CORS-conﬁgured do-
mains (about 1.5%) manifested this mistake, including
popular domain names such as api.vimeo.com, secu-
rity.harvard.edu. 2) To avoid the above conﬁguration er-
rors, some web frameworks actively convert the combi-
nation into reﬂecting origin. This causes the protocol se-
curity mechanism to be bypassed, allowing any domain
to read authenticated resources. We analyzed 11 popular
CORS middleware and found that 8 of them converted
this combination to reﬂecting origin, as shown in Table 4.
6.4 CORS and Cache
There is another error-prone corner case when CORS in-
teracts with an HTTP cache. When a resource server
needs to be shared with multiple domain names, it needs
to generate different CORS policies for different request-
ing domains. But most web proxies cache HTTP con-
tents only based on URLs, without taking into consider-
ation the associated CORS policies. If a resource shared
with multiple domains is cached with CORS policy for
one domain, others domains will not be able to access
the resource because of CORS policy violation. For ex-
ample, a resource from c.com needs to be shared with
both a.com and b.com from browsers sharing a same
cache.
If the resource is ﬁrst accessed by a.com and
is cached with header “Access-Control-Allow-Origin:
http://a.com”, b.com will not be able to access the re-
source since the cached content has a CORS policy that
does not match with b.com.
HTTP provides the Vary header for this situation. A
resource server needs to conﬁgure “Vary: Origin” in its
response headers, which instructs web caches to cache
HTTP contents based on both URLs and Origin header
value. Thus, when a server returns different CORS poli-
cies for different requesting domains, these resources
will be cached in different entries.
Many developers are not aware of this corner case.
In our measurements, 132,987 domains (about 27%) al-
lowed for multiple different domains, but didn’t conﬁg-
ure “Vary: Origin”, such as azure.microsoft.com and
global.alipay.com. We analyzed 11 samples of CORS
middleware, ﬁnding 4 that were not aware of this issue
and did not generate Vary headers, as shown in Table 4.
7 Discussion
We ﬁrst analyze the underlying causes behind the CORS
security issues and then propose corresponding mitiga-
tion and improvement measures.
7.1 Root Cause
Backward compatibility needs to be just right. Al-
though backward compatibility is important in designing
new systems, over consideration can deteriorate system
security and increase burden in system development and
deployment. Prior to CORS, cross origin request attacks
have become serious problems for web security. To keep
backward compatibility, CORS can choose not to solve
the existing form submission problem, but it is not nec-
essary to allow default sending permission in its newly
opened interfaces. Although CORS made attempt to re-
strict the default sending permission such as restricting
Content-Type to three white-list values, it unintention-
ally relaxed the permissions in subtle ways, leading to
various new cross-origin attacks.
Under web rapid iterative development model,
new protocols aren’t fully evaluated before deployed.
New features are quickly implemented by browsers and
shipped to users before they are fully evaluated, some
immature design are difﬁcult to change after these fea-
tures are widely used in Web. Starting in the second
half of 2008, CORS protocol has major changes and is
still under discussion in the W3C. Due to web develop-
ers’ requirements or browsers’ competitions, in January
2009, some vendors have implemented this immature
protocol into browsers as new features, which include
some immature design, such as CORS policies only sup-
port a single origin [10]. Although the new CORS stan-
dard in 2010 required Access-Control-Allow-Origin to
support origin list [36], these requirements haven’t been
supported in any browsers. One reason is compatibil-
ity issues. Browser modiﬁcation could lead to different
versions of browsers supporting different levels of ac-
cess control policies, CORS conﬁguration will be further
complicated. Another reason is that, currently web de-
velopers can dynamically generate CORS conﬁguration
to complete their goals. Therefore, this design kept un-
changed, which increased web developers conﬁguration
difﬁculty.
The protocol security considerations haven’t been
effectively conveyed to the developers. The CORS pro-
tocol has many error-prone corner cases in its design
and implementation, as presented in Section 5 and Sec-
tion 6, but these cases are not effectively conveyed to
developers. An important reason is that these security
risks aren’t clearly highlighted in the two CORS speci-
ﬁcations. First, the W3C CORS standard lacked timely
USENIX Association
27th USENIX Security Symposium    1089
updates, its latest version was still in 2014 [38]. In Au-
gust 2017, the W3C CORS standard was proposed for
obsolescence in the W3C mailing list [7], suggesting the
use of WHATWG’s Fetch standard. Web developers who
didn’t subscribe to the W3C mailing list would likely still
take W3C CORS standard to be the latest standard. Sec-
ond, WHATWG’s Fetch standard had no separate secu-
rity consideration section and did not emphasize these
security risks either.
Improvement for CORS
7.2
We found the CORS protocol can be improved in four
aspects:
The default sending permission should be more re-
strictive. A fundamental cause for cross origin request
attack is that a browser allows to directly send cross ori-
gin requests, which could contain malicious data, with-
out asking permission from the server.
One solution is to send a preﬂight request for all
cross origin requests that allow users to modify head-
ers and body, and then send the real request after ne-
gotiating with the server. To reduce the additional pre-
ﬂight round trip, developers can use Access-Control-
Max-Age to cache preﬂight requests. Although the
“always-preﬂight” solution may break websites, it pro-
vides an uniﬁed way to solve these problem fundamen-
tally.
Another mitigation is to limit the format and value of
white-list headers and bodies in CORS simple requests,
e.g. disallowing unsafe values in white-list headers and
bodies, restricting header length, restricting access to un-
safe ports. However, this approach also increases the
complexity of CORS protocol and may bring unexpected
security troubles. For example, originally, CORS lim-
ited Content-Type to three speciﬁc values excluding “ap-
plication/json”, so many web applications used this re-
striction as CSRF defenses against JSON APIs. Later,
Chrome opened new API SendBeacons() for new fea-
tures, which can send “Content-Type: application/json”
in cross origin requests directly [39]. This behavior
break many websites’ CSRF defense and brought con-
troversy [5].
CORS conﬁguration should be simpliﬁed. The poor
expressiveness of CORS policy increase the conﬁgura-
tion complexity, web developers have to dynamically
generate corresponding CORS policies, which are prone
to mistakes. Therefore, browsers should support ad-
vanced CORS policies, such as origin list, subdomain
wildcard, to simplify developers’ CORS conﬁguration in
common usages.
The null deﬁnition should be clear. In CORS stan-
dards, the null value deﬁnition is not clear, and in actual
practice, browsers send null values in different sources.
Developers who don’t know this corner cases may mis-
conﬁgure CORS. Therefore, the CORS standard needs
to clearly deﬁne null values, preferably using different
values for different sources.
Security risks should be clearly summarized in
standards. The standard should explicitly point out the
risk of trust dependencies brought by CORS. Also, many
CORS misconﬁgurations are caused by various subtle
corner cases. These security risks should be clearly de-
livered to developers, for example, summarizing best
practices for CORS conﬁguration, highlighting various
CORS error-prone details, and updating them in the lat-
est CORS standards.
8 Disclosure and Response
We discussed the uncovered problems with the web stan-
dard organization WHATWG. They have accepted some
of our suggestions and made corresponding changes to
the CORS speciﬁcation. We are also in the process of re-
porting all vulnerabilities to the affected parties, includ-
ing browser vendors, framework developers, and website
owners. Some have also taken actions to actively address
these issues. Below we summarize the response by the
standard organization and some affected parties.
8.1 Response by CORS Standard
The authors of WHATWG Fetch standard acknowledged
that some of the problems discussed in this paper, partic-
ularly the cross origin sending attacks, are not just imple-
mentation errors, thus need to be ﬁxed in CORS speciﬁ-
cations. They carefully examined our mitigation propos-
als outlined in Section 7.2, and chose to add more restric-
tions on CORS simple requests to address the attacks we
found. They do not adopt the “always-preﬂight” solution
which we prefer because it may break existing websites.
More speciﬁcally, they chose to disallow some unsafe
characters (e.g., ‘{’) in CORS whitelisted headers, limit
the size of CORS whitelisted headers, and restrict access
to AFP ports. Some of these changes have been updated
to the latest Fetch standard 4, others are waiting to be
merged 5.
Regarding CORS misconﬁguration issues (e.g., forge-
able null origin, HTTPS sites trusting HTTP domains),
they suggested that misconﬁgured websites should ﬁx
those issues without the need to change CORS speciﬁ-
cations. However, they agreed to our suggestion to add
a security consideration section in the standard. We are
currently working on adding the security consideration
section to inform web developers of all known CORS se-
curity risks.
4https://github.com/whatwg/fetch/pull/738
5https://github.com/whatwg/fetch/pull/736
1090    27th USENIX Security Symposium
USENIX Association
8.2 Response by Vendors
Chrome and Firefox: Chrome and Firefox browsers
have released a patch to block ports 548 and 427 used
by Apple Filling Protocol [12] [15]. They are also in-
vestigating and implementing other new changes in the
speciﬁcation to restrict CORS whitelisted headers. To
address attacks against intranet services, Chrome is also
considering preventing access to localhost/RFC1918 ad-
dresses from public websites [13].
Safari: Apple informed us that their investigation re-
vealed that comprehensive changes are required to ad-
dress these issues, and they are testing those changes
with a beta testing program.
Edge/IE: Microsoft acknowledged and thanked our
report, but provided no further comment to date.
CORS frameworks: Tomcat, Yii and Go-CORS
frameworks have modiﬁed their software to not reﬂect
origin header when conﬁgured to ‘*‘. Our report to Tom-
cat team also has resulted in a public security update ad-
visory (CVE-2018-8014) [11]. ASP.net said they will
provide ﬁx in version 3.0 as it’s a breaking change.
Websites: We are in the process of reporting these
problems to all vulnerable websites. Some websites
(e.g., nasdaq.com, sohu.com, mail.ru) have acknowl-