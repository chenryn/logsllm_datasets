### 7.2 Top Developers in Terms of Highest Income
...
44
47
54
58
xxi
---
xxii
**List of Tables**
---
### 1. Introduction

#### 1.1 The Emerging Growth of the App Ecosystem

Mobile applications have become increasingly popular as the adoption of smartphones and tablet computers has outpaced that of any other consumer technology in history. A recent survey [18] conducted by the mobile analytics platform Flurry validates this trend, comparing the adoption rates of smart devices to other recent technologies. The survey indicates that smart devices are being adopted 10 times faster than the PC revolution of the 1980s, 2 times faster than the Internet boom, and 3 times faster than the recent social network adoption.

In the same survey, Flurry reported over 640 million active iOS and Android devices in July 2012. This rapid adoption is also supported by graphical representations in several articles [3, 27]. According to IDC [2], Android and iOS accounted for 82% of total smartphone sales in the first quarter of 2012, with a 44% year-on-year increase in smartphone sales from 2011 to 2012 [15] and an 85% increase from 2011 to 2012 [16]. Android dominates the market share [9, 19] with 1.3 million activations per day, as reported by Google CEO Eric Schmidt [7].

The growing popularity of smartphones has attracted developers who aim to increase their profits by creating applications. These applications are distributed through mobile app stores or marketplaces, which have seen rapid growth. For example, the official Android Market (now rebranded as Google Play) reached 600,000 apps by the end of June 2012 [52]. Figure 1.1 shows the growth of the Android Market in terms of the number of apps over three years. In May 2011, there were 200,000 available apps, and by May 2012, this number had increased to 500,000, representing a 150% annual growth rate. The average monthly growth rate is about 12.5% (25,000 new apps per day), and the average daily growth rate is almost 0.4% (882 new apps per day).

Alongside the official app stores of mobile platform vendors (e.g., Google, Apple), there are numerous third-party marketplaces that have gained popularity due to the rapid adoption of smartphones and the benefits they offer to developers. For instance, SlideMe [25] offers a higher percentage of revenue to application developers compared to the official Android Market [4].

Despite the rapid growth of these online market structures, there are no large-scale studies that thoroughly examine the characteristics of the mobile app ecosystem. A systematic study aimed at understanding the trends and characteristics of app marketplaces would be valuable for both application developers and researchers. Additionally, investigating how mobile applications are produced, used, and consumed, as well as their popularity patterns over time, would be significant for designers of such platforms to understand performance implications and design more efficient marketplaces.

In this work, we conduct a systematic study on four popular Android-based alternative marketplaces to understand the nature of the app ecosystem. We develop and deploy a distributed, non-intrusive crawling system that collects various information from these app stores on a daily basis. We explore how applications are produced and consumed, how their popularity changes over time, and the main factors affecting app popularity. We also examine how user patterns are influenced by user interests or recommendation systems and how these patterns affect app popularity. Furthermore, we discuss the impact of pricing on app popularity and developer income. Our results are compared with similar studies in other fields, such as the World Wide Web (WWW), peer-to-peer (P2P) file sharing systems, and user-generated video content (UGC).

#### 1.2 Contributions

The key contributions of this work are summarized as follows:

- **Dominance of Popular Apps**: We demonstrate that app marketplaces are dominated by a small number of highly popular apps that receive a large number of download requests, while the majority of applications are downloaded only a few times. We show that a more powerful form of the Pareto Principle applies to all the monitored app markets.
  
- **Apps with No Downloads**: We show that in some monitored app stores, a significant number of applications have not received a single download during their lifecycle. This phenomenon is attributed to poor design of recommendation systems and the pricing of paid apps.
  
- **Popularity Distributions**: We analyze the popularity distributions of apps in the monitored markets and demonstrate that they exhibit a Zipf-like behavior with truncated tails, different from the pure Zipf distribution observed in WWW traffic. This deviation is partly due to "fetch-at-most-once" behavior and the way apps are grouped within the market. We define this grouping as a "clustering effect" and verify our hypothesis using a new metric called "user temporal affinity," measured through user comments and downloads.
  
- **Appstore Usage Model**: We propose a novel model of appstore usage based on both clustering effects and fetch-at-most-once properties. We evaluate our model with a simulation-based study, finding that it approximates the actual distribution of app downloads very well.
  
- **Role of Pricing**: We present a detailed study on the role of pricing in smartphone applications, showing how pricing affects app popularity and providing insights into developer income and common strategies.

#### 1.3 Thesis Outline

The remainder of this thesis is structured as follows:

- **Chapter 2: Data Collection** - We provide information about our data collection, the crawling strategies, challenges encountered, and solutions implemented. We also describe the four popular alternative third-party Android marketplaces we studied: SlideMe, 1Mobile, AppChina, and Anzhi.

- **Chapter 3: Initial Measurements** - We present the first measurements on our data, focusing on the growth of marketplaces over time in terms of the number of available apps and total downloads.

- **Chapter 4: Popularity of Mobile Applications** - We study the popularity of mobile applications in terms of downloads, presenting its main characteristics and the factors that influence it.

- **Chapter 5: User Temporal Affinity** - We introduce our user temporal affinity metric, exploring whether users tend to stay within a single category when downloading apps rather than switching to another one.

- **Chapter 6: Novel Appstore Usage Model** - We present a novel model of appstore usage based on both fetch-at-most-once and clustering effects, validating our hypothesis through simulations.

- **Chapter 8: Related Work** - We review similar studies and compare our findings.

- **Chapter 9: Future Work** - We list potential ideas for future research.

- **Chapter 10: Conclusion** - We summarize and conclude the thesis.

### 2. Data Collection

This chapter introduces our dataset and describes the collection strategy we used to gather the data. We also discuss the challenges we encountered and the solutions we implemented. Our study focuses on four popular alternative third-party Android marketplaces: SlideMe, 1Mobile, AppChina, and Anzhi.

#### 2.1 The Monitored Appstores

To study the mobile app ecosystem, we collected information from various app marketplaces. We chose not to use the official Android Market (Google Play) because the Google Terms of Service (ToS) prohibit accessing Google Play through automated means without consent [17]. Additionally, the official Android Market and other marketplaces (e.g., Amazon Appstore, AppBrain, AndroLib) do not provide precise details of the applications, such as exact download numbers, but instead provide ranges. Therefore, we selected the following four popular third-party Android marketplaces for our analysis:

- **SlideMe [25]**: One of the oldest alternative Android marketplaces, founded in 2008, with over twenty thousand free and paid apps [1].
  
- **1Mobile [22]**: One of the largest third-party Android app stores, with over 130,000 apps.
  
- **AppChina [24]**: A popular alternative Android app store in China, with over 60,000 apps.
  
- **Anzhi [23]**: Another popular Chinese Android market, often pre-installed on HTC smartphones in China [2].

All these marketplaces maintain websites where users can browse, download, or purchase applications. They also provide application manager apps, which are Android clients capable of managing the discovery and download of Android applications directly from an Android device.

#### 2.2 Data Collection Strategy

To systematically collect our data, we implemented several spiders in Python using the Scrapy framework [20]. Each app store has a distinct spider program distributed over a set of interconnected host machines. Our spiders are designed to be stealthy, adhering to the Robots Exclusion Protocol (robots.txt) provided by each app store's website.

Our crawling strategy for all candidate app stores is as follows:

1. **Initial Crawl**: We crawl the entire app store to collect the main dataset, which includes all available apps on the first day of our crawling process (the first snapshot of the app store).
   
2. **Daily Updates**: We divide the crawling process into two parts:
   - **Part 1**: We crawl each known app in the main dataset every day to update statistics such as the number of downloads.
   - **Part 2**: We collect information on the latest added apps since the last crawling process and store them in the database, expanding our main dataset. The collected information includes various statistics such as the number of downloads, user rating, price, current version, category, hosted URL, etc. The URL of the app is used as a unique identifier for gathering statistics.

We use Scrapy's default XPATH selectors to extract data from the web pages of each app store. XPATH is a language used to navigate through elements and attributes in XML and HTML documents. Our crawlers also download the latest APK files for each app, collecting a series of all versions for every app in the marketplace. We have automated our crawlers to collect information from all apps in each app store on a daily basis.

#### 2.3 Challenges

Here, we describe some of the challenges we faced during the crawling process and the techniques we used to address these issues.

- **JavaScript-Generated Content**: Some app web pages, such as those on the 1Mobile app store, contain fields (e.g., user ratings) generated by JavaScript code. Scrapy cannot collect content from JavaScript-rendered pages by default. To address this, we used Selenium Remote Control (RC) [21], a browser automation tool, combined with a headless Firefox browser running in an X virtual frame buffer (Xvfb). We altered the spider code to proxy HTTP requests through the Selenium server with the controlled headless browser, allowing Scrapy to collect all required information from the already rendered HTML page.

- **Rate Limiting**: Some Chinese app stores (e.g., AppChina and Anzhi) apply rate limiting to hosts located outside China. We observed lower download rates from regions far from China (e.g., EU, US) when using PlanetLab [34]. To overcome this, we used several Chinese PlanetLab nodes as proxies to download APK files to machines running the crawler instances. We used Wget via SSH SOCKS proxy tunnels to the Chinese PlanetLab nodes.