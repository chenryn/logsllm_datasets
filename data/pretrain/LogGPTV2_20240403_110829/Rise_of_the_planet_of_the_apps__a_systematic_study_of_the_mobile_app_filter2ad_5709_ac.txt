7.2 Top developers in terms of highest income.
. . . . . . . . . .
44
47
54
58
xxi
xxii
LIST OF TABLES
1Introduction
1.1 The Emerging Growth of App Ecosystem
Mobile applications have started to become extremely popular as the adop-
tion of smartphones and tablet computers appears to be faster than that of
any other consumer technology in history. A recent survey [18] conducted by
the mobile analytics platform Flurry 1 validates the above proposal by stat-
ing a comparison of adoption rates between smart devices and other recent
technologies. The survey shows that smart devices is being adopted 10(cid:2)
faster than that of 80s PC revolution, 2(cid:2) faster than that of Internet Boom
and 3(cid:2) faster than that of recent social network adoption.
In the same
survey, it is mentioned that Flurry counted over than 640 million active iOS
and Android devices in July 2012. This swift espousal of mobile devices is
also shown in several other articles, through graphical representations [3,27].
According to IDC 2, Android and iOS possess the 82% of total smartphone
sales in the (cid:12)rst quarter of 2012, where there was a 44% year-on-year in-
crease of smartphone sales from 2011 to 2012 [15] and an increase of 85%
from 2011 to 2012 [16]. Android appears to dominate the smartphone mar-
ket share [9,19] with 1.3 million activations per day, as the Google CEO Eric
Schmidt recently reported [7]. The ever-growing popularity of smartphones
has attracted the interest of developers who try to increase their pro(cid:12)ts by
developing applications. The main platforms that host and distribute these
applications to the end-users are the mobile application stores or market-
places. These infrastructures that constitute a new component in the Web
1http://www.flurry.com/
2http://www.idc.com
1
2
CHAPTER 1.
INTRODUCTION
world recently have seen a rapid growth. For instance, the o(cid:14)cial Android
Market (lately rebranded as Google Play), reached the 600000 apps mile-
stone by the end of June 2012 [52]. In Figure 1.1, there is a more detailed
graph that shows the growth of Android Market in terms of number of apps
for a period of 3 years. We can see that in May 2011, the number of available
apps in the Android Market was 200000, while one year later, in May 2012,
the number has increased to 500000, that is an 150% annual growth rate.
This implies that the number of apps has doubled in less than one year.
Moreover, the average monthly growth rate is about 12.5% (25000 new apps
per day) and the average daily growth rate is almost 0.4% (882 new apps per
day), indicating a very rapid growth that appears to be a more general phe-
nomenon in the world of mobile marketplaces. Along with o(cid:14)cial appstores
Figure 1.1: The growth of Android Market in terms of number of apps.
Data sources: Wikipedia [52].
of mobile platform vendors (e.g. Google, Apple), there is a large number of
other alternative third-party marketplaces that have become very popular
as well, due to the rapid adoption of smartphones and other bene(cid:12)ts that
may o(cid:11)er to developers. For instance, SlideMe Android marketplace [25]
o(cid:11)ers a higher percentage of revenue to application developer than Google
does in the o(cid:14)cial Android Market [4].
Despite the rapid growth that these online market structures appear to
have, to the best of our knowledge, there are no other large-scale studies
try to clarify the characteristics of the mobile app ecosystem. A system-
 0 100 200 300 400 500 600 700 800 900MarDecMarAugOctMayJulOctDecFebMayJunNumber of available apps(in 1000’s)TimeAndroid Market20092010201120121.2. CONTRIBUTIONS
3
atic study aimed at understanding the characteristics and trends in the app
marketplaces would be interesting for both application developers that use
such infrastructures to distribute their software, as well as for researchers
who wish to comprehend this new means of software distribution. In ad-
dition, an investigation into how mobile applications \produced", used and
\consumed", as well as what are their popularity patterns over time, would
be signi(cid:12)cant for designers of such kind of platforms, to understand any per-
formance implications that may these standards pose and thus assist them
in designing more e(cid:14)cient marketplaces in the future.
In this work, we perform a systematic study on four popular Android-
based alternative marketplaces to understand the nature of the app ecosys-
tem. To conduct our analysis, we develop and deploy a distributed non-
intrusive crawling system that collects various information from four app
stores in a daily basis. In particular, we explore how applications are being
\produced" by developers and \consumed" by users, how their popularity
changes over time and which are the main factors that may a(cid:11)ect app pop-
ularity. Moreover, we examine how user patterns can be a(cid:11)ected by user
interests or recommendation systems and how they may a(cid:11)ect the popu-
larity of applications in a marketplace. Furthermore, we discuss how the
pricing impacts the app popularity and developers’ income. In addition, we
compare our results with similar studies on other (cid:12)elds such as world wide
web (WWW), peer-to-peer (cid:12)le sharing (P2P) systems, and user-generated
video content (UGC).
1.2 Contributions
The highlights of this work can be summarised as follows:
(cid:15) We demonstrate that, in general, the app marketplaces are dominated
by a minimum number of popular apps that receive a very large num-
ber of download requests, while the majority of the applications are
downloaded only a few times.
In particular, we show that a more
powerful form of Pareto Principle applies to all the monitored app
markets.
(cid:15) We show that in some monitored app store, there is a quite number
of applications that have not received a single download during their
life cycle. This phenomenon appears to occur due to poor design of
the recommendation systems that these marketplaces have and due to
the pricing of some portion of apps (paid apps).
(cid:15) We analyze the popularity distributions of the apps in the monitored
markets and we demonstrate that they exhibit a Zipf-like behaviour
with truncated tails, which is di(cid:11)erentiated from WWW tra(cid:14)c that
follows a pure Zipf distribution. We argue that this deviation from
4
CHAPTER 1.
INTRODUCTION
Zipf in part from \fetch-at-most-once" behavior that has been already
observed in other areas as well (e.g.P2P, UCG), but also by the way
that apps are grouped inside the market, trying to in(cid:13)uence user pref-
erences. We de(cid:12)ne the above \grouping" phenomenon as \clustering
e(cid:11)ect" and we believe that is a result of recommendation systems or
other grouping forces (i.e.user-formed societies created by users’ com-
ments or ratings). We verify our app clustering hypothesis introducing
a new metric called \user temporal a(cid:14)nity" to app categories, and we
measure it using a dataset of user comments, which implies user down-
loads.
(cid:15) We propose a novel model of appstore usage based on both clustering
e(cid:11)ect and fetch-at-most-once properties, and we evaluate our model
with a simulation-based study comparing its results with the actual
applications’ downloads. We (cid:12)nd that our model approximates very
well the actual distribution of app downloads.
(cid:15) We present a detailed study on the role of pricing in smartphone appli-
cations. We show how pricing a(cid:11)ect the popularity of applications and
we give insight on developers’ income and their common strategies.
1.3 Thesis Outline
The remainder of this thesis is structured as follows. In Chapter 2 we provide
information about our data collection, the crawling strategies we follow, the
main challenges we are confronted with during the implementation of our
crawling system, as well as the solutions we used to address these issues.
Chapter 3 presents the (cid:12)rst measurements on our data, where we attempt
to understand how the marketplaces grow through time, in terms of number
of available apps and total number of downloads. In Chapter 4, we study the
popularity of mobile applications in terms of number of downloads and we
present its main characteristics, along with various factors that may a(cid:11)ect it.
In Chapter 5, we present our user temporal a(cid:14)nity metric, where we explore
whether users tend to stay within a single category, when they download
apps, rather than switching to another one. Chapter 6 presents a novel
model of appstore usage based on both fetch-at-most-once and clustering
e(cid:11)ect, as well as our results through simulations which validate our clustering
e(cid:11)ect hypothesis.
In Chapter 8, we present similar studies to ours one,
while in Chapter 9, we list some ideas for future work. Finally, Chapter 10
summarizes and concludes the thesis.
2Data Collection
This chapter introduces our dataset and describes the collection strategy
we used to harvest our data. Moreover, we provide information about the
challenges we encountered during the collecting process along with the so-
lutions we used to overcome these problems. Finally, we discuss about the
collected data used in our experiments. In general, we study the smartphone
app ecosystem by looking at four popular alternative third-party Android
marketplaces: SlideMe [25], 1Mobile [22], AppChina [24] and Anzhi [23].
2.1 The Monitored Appstores
In order to study the mobile app ecosystem we collected information from
various app marketplaces. We were not willing to use the o(cid:14)cial Android
Market (Google Play) for this purpose since the Google Terms of Service
(ToS) do not allow users to access Google Play through any type of au-
tomated means (including use of scripts, crawlers etc.) without Google’s
consent [17]. Moreover, o(cid:14)cial Android Market, as well as other market-
places (e.g.Amazon Appstore [5], AppBrain [13], AndroLib [12] etc.), does
not provide precise details of the applications it is hosting such as the exact
numbers of downloads or installations of an app, but instead ranges. We
chose not to use such kind of appstores to collect our data since the results of
our analysis would not be that accurate. The four popular third-party An-
droid marketplaces we selected to monitor for our analysis are listed below
along with some descriptive information:
5
6
CHAPTER 2. DATA COLLECTION
(cid:15) SlideMe [25]. This is one of the oldest alternative Android mar-
It was founded in 2008, and contains over than twenty
ketplaces.
thousands of free and paid apps [1].
(cid:15) 1Mobile [22]. One of the largest third-party Android appstores (the
largest of our monitored ones) with an app population exceeding the
130000 apps.
(cid:15) AppChina [24]. A very popular alternative Android appstore in
China with over than 60000 of apps.
(cid:15) Anzhi [23]. Yet another popular Chinese Android Market that often
can be found pre-installed on HTC 1 smartphones in China [2].
All these marketplaces, apart from the website they maintain, which users
can browse to (cid:12)nd, download or buy applications, they also provide appli-
cation manager apps. That is, smartphone applications with an Android
client capable of managing the discovery and download of Android applica-
tions directly from an Android device.
2.2 Data Collection Strategy
In order to collect our data systematically we implemented several spiders
in Python based on the Scrapy framework [20]. For each appstore we im-
plemented a distinct spider program which is distributed over a set of inter-
connected host machines. We designed our spiders to be stealthy in terms
of requests per time unit, so as not to be identi(cid:12)ed as abusive from the
monitored marketplaces. For these reasons, each spider instance takes into
account The Robots Exclusion Protocol, that is, the robots.txt (cid:12)le, provided
by the website of the appstore which currently being crawled.
We followed the same crawling strategy for all the candidate appstores.
First, we crawl the whole appstore (each page with app information) to
collect the main dataset, which is stored in a database. The main dataset
consists of all apps available in the appstore the (cid:12)rst day of our crawling
process (this is the (cid:12)rst snapshot of the appstore). Then, the crawling
process is divided into two independent parts.
In the (cid:12)rst part we crawl
each (already known) app in the main dataset every single day, so as to
get new statistics (e.g. the new number of the downloads) of these apps.
In the second part, we collect information for all the latest added apps in
the appstore since the last crawling process and store them to the database,
expanding our main dataset. The collecting information includes various
statistics of the app such as the number of downloads, user rating, price,
current version, category, hosted URL etc. The URL of the app is used as a
1http://www.htc.com
2.3. CHALLENGES
7
unique identi(cid:12)er that crawler instances take into account to gather statistics
of the apps included in the main dataset. To extract all these data from
the web pages of each appstore we used the default Scrapy’s mechanism
XPATH selectors, which are able to \select" certain parts of an HTML (cid:12)le
speci(cid:12)ed by XPATH expressions. XPATH 2 is a language used to navigate
through elements and attributes in XML and HTML documents. Apart
from statistics, the crawlers download the last updated APK (cid:12)les (the app
itself) for each app. That is, if an app has changed since the last crawling
process the new APK (cid:12)le will be downloaded, collecting in this way a series
of all the versions for every app in the marketplace. We have automated
our crawlers so as to collect information of all the apps in each appstore on
a daily basis.
2.3 Challenges
Here we describe some of the challenges we faced during the crawling process
as well as techniques we used to address these issues.
One of the challenges was to collect data from pages that contain Javascript
generated content. For instance, the app web pages of 1Mobile appstore con-
tain some (cid:12)elds (e.g. the user rating (cid:12)eld) produced by a piece of Javascript
code. Scrapy by default is unable to collect content from a Javascript-
rendered page. To address this problem we used Selenium Remote Control
(RC) [21], a browser automation tool, combined with a headless Firefox
browser running in an X virtual frame bu(cid:11)er (Xvfb). Therefore, the code of
our spiders was altered to proxy the HTTP requests through the Selenium
server with the controlled headless browser. Thus, Scrapy was able to col-
lect all the required information from the already browser-rendered HTML
page.
A second challenge was the fact that some Chinese appstores (i.e. Ap-
pChina and Anzhi appstore) apply rate limiting to hosts located away from
China. We tried to download a set of APK (cid:12)les of these appstores, from
di(cid:11)erent regions using the PlanetLab [34] and we observed that all sites far
from China (e.g. in EU, US) exhibited lower download rates than those that
were close to it. In order to deal with this issue properly, we used several
Chinese PlanetLab nodes as proxies to download the APK (cid:12)les to machines
running the crawler instances, for both AppChina and Anzhi appstores. We
used Wget via SSH SOCKS proxy tunnels to the Chinese PlanetLab nodes