title:Practical and secure dynamic searchable encryption via oblivious access
on distributed data structure
author:Thang Hoang and
Attila Altay Yavuz and
Jorge Guajardo
Practical and Secure Dynamic Searchable Encryption via
Oblivious Access on Distributed Data Structure
Thang Hoang
Attila Altay Yavuz
EECS, Oregon State University
EECS, Oregon State University
Corvallis, OR, 97331
Corvallis, OR, 97331
PI:EMAIL
PI:EMAIL
Jorge Guajardo
Robert Bosch LLC — RTC
Pittsburgh, PA, 15222
PI:EMAIL
ABSTRACT
Dynamic Searchable Symmetric Encryption (DSSE) allows
a client to perform keyword searches over encrypted ﬁles
via an encrypted data structure. Despite its merits, DSSE
leaks search and update patterns when the client accesses
the encrypted data structure. These leakages may create
severe privacy problems as already shown, for example, in
recent statistical attacks on DSSE. While Oblivious Random
Access Memory (ORAM) can hide such access patterns, it
incurs signiﬁcant communication overhead and, therefore, it
is not yet fully practical for cloud computing systems. Hence,
there is a critical need to develop private access schemes over
the encrypted data structure that can seal the leakages of
DSSE while achieving practical search/update operations.
In this paper, we propose a new oblivious access scheme
over the encrypted data structure for searchable encryption
purposes, that we call Distributed Oblivious Data struc-
ture DSSE (DOD-DSSE ). The main idea is to create a
distributed encrypted incidence matrix on two non-colluding
servers such that no arbitrary queries on these servers can
be linked to each other. This strategy prevents not only
recent statistical attacks on the encrypted data structure but
also other potential threats exploiting query linkability. Our
security analysis proves that DOD-DSSE ensures the unlink-
ability of queries and, therefore, oﬀers much higher security
than traditional DSSE. At the same time, our performance
evaluation demonstrates that DOD-DSSE is two orders of
magnitude faster than ORAM-based techniques (e.g., Path
ORAM), since it only incurs a small-constant number of com-
munication overhead. That is, we deployed DOD-DSSE on
geographically distributed Amazon EC2 servers, and showed
that, a search/update operation on a very large dataset only
takes around one second with DOD-DSSE , while it takes 3
to 13 minutes with Path ORAM-based methods.
CCS Concepts
•Security and privacy → Privacy-preserving protocols;
Domain-speciﬁc security and privacy architectures;
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05-09, 2016, Los Angeles, CA, USA
c⃝ 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991088
Keywords
Privacy enhancing technology; privacy in cloud computing;
searchable encryption; ORAM; oblivious data structure
1.
INTRODUCTION
Storage-as-a-Service (SaaS) is one of the most common
cloud services which allows the clients to store data online
so that they can access them from anywhere and reduce
data management costs. Despite its merits, SaaS also brings
serious privacy issues to users. Once data are outsourced,
their privacy can be compromised by the cloud or external
attackers (e.g., malware-infected cloud). While standard
encryption can protect the content of outsourced data, it
prevents the data owner from searching and retrieving infor-
mation from the cloud and, therefore, invalidates the usability
of cloud services. To address the dilemma of user privacy
versus data utilization on the cloud, Dynamic Searchable
Symmetric Encryption (DSSE) has been proposed, that en-
ables the client to perform search or update operations on
encrypted data [4, 13]. In current DSSE approaches, the
client constructs an encrypted data structure (denoted as
I) which associates each search/update query with its corre-
This paper focuses on oblivious access on encrypted data structure I:
(i) Access to I exposes keyword/ﬁle relations, leads to statistical attacks.
(ii) ORAM is extremely costly on I.
n
r
e
t
t
a
p
s
s
e
c
c
a
-
e
r
u
t
c
u
r
t
s
a
t
a
D
s
s
e
c
c
a
-
e
l
n
r
e
t
t
a
p
ﬁ
...
(wi, idi)
...
search keyword wi
matching ﬁles IDs: idi
(fk)
update ﬁle fk
(wj, idj)
(fk′)
...
Client
...
(ci1, . . . , ciq )
(ck)
...
search keyword wj
matching ﬁles IDs: idj
update ﬁle fk′
...
search/update queries
(ci1, . . . , ciq ) for idi
(ck) for update fk
...
...
DSSE encrypted data structure I
f1
1
0
...
1
0
f2
0
0
...
1
0
. . .
. . .
. . .
. . .
. . .
. . .
fn−1
1
1
...
1
0
w1
w2
...
fn
0
0
...
1 wm−1
0
wm
Several instantiations of I:
dictionary; tree; multi-linked list
Server
Collection of encrypted ﬁles
(c1, c2, . . . , cn−1, cn)
Traditional ORAM can be used to hide ﬁle-access pattern.
Therefore, it is not our focus in this paper.
Figure 1: File-access pattern and data structure-access pat-
tern in traditional DSSE.
302
Table 1: Security and performance of DOD-DSSE , traditional DSSE and ODS with speciﬁc DSSE data structure types¶.
Scheme
Data structure-access pattern
1-time repetition of
an unlinkable query
Full query
linkability§
Update
leakage
Query
result size
Statistical
attacks
End-to-end crypto
delay†
# Server
Security
Performance
Setting
Traditional DSSE
[13],[17],[4],[26]
ODICT
OMAT
DOD-DSSE
✗
✗∗
✓
✓
✗
✓
✓
✗‡
1
1
1
2
¶ We simulated the cost of ODS [25] with Path ORAM protocol [24] on dictionary (ODICT) and incidence matrix (OMAT) data structures.
† The delays of schemes were measured in our experiment with an average network latency of 31 ms and throughput of 30 Mbps.
‡ This leakage does not lead to any statistical attacks.
∗ Due to the sublinear operation time of dictionary data structure, ODS cannot fully hide the length of search/update result without fully
padding which is very costly. To evaluate the performance of ODICT over the real network, we only simulated ODICT with average padding.
§ Full query linkability allows the adversary to perform, for example, frequency analysis [15], resulting in statistical attacks.
< 0.2 s
192.2 s∗
767.5 s
1.1 s
✗
✓
✓
✓
✗
✓
✓
✓
✗
✗∗
✓
✓
sponding ﬁles encrypted by standard encryption (e.g., [13,
12, 10, 4, 26]). The client then can outsource encrypted ﬁles
along with I and perform keyword searches or ﬁle updates
without revealing the keyword/ﬁle content.
1.1 Problem Statement
Several DSSE schemes have been proposed (e.g., [13, 12,
10, 4, 21, 26]), which oﬀer a wide spectrum of performance
and privacy trade-oﬀs (e.g., fast search/update, information
leakage). It is well-known that all DSSE schemes have one
common but critical drawback: They leak information during
search and update operations due to accesses to the collection
of encrypted ﬁles and to the encrypted data structure I [12,
21, 26] (Figure 1). Speciﬁcally,
• Accessing encrypted ﬁles leaks ﬁle-access pattern.
• Accessing the encrypted data structure I leaks data
structure-access pattern including:
(i) search pattern which reveals if a search query has
been repeated,
(ii) update pattern which reveals various statistical
relationships among keywords and ﬁles.
These leakages may violate the privacy requirements of
privacy-sensitive applications (e.g., healthcare, military) [2,
15] by exposing highly sensitive information [11, 15, 3, 27].
It is mandatory to hide both ﬁle-access and data structure-
access patterns to achieve a secure DSSE as shown in [16].
One might consider using access pattern hiding techniques
such as Oblivious Random Access Memory (ORAM) [18] to
conduct oblivious access on both encrypted data structure
I and encrypted ﬁles [16]. Unfortunately, despite recent
progress (e.g., [23, 19, 24, 25]), applying ORAM on both
I and encrypted ﬁles [16] is highly expensive in terms of
storage and communication overhead [21, 4, 16, 1].
To reduce such costs, it is recommended to separate en-
crypted ﬁles and the encrypted data structure I, and then
apply diﬀerent access pattern hiding techniques to each [16].
For instance, Naveed et al. in [16] utilized Path ORAM and
Oblivious Data Structure (ODS) [25] to access encrypted
ﬁles and encrypted data structure, respectively, to reduce the
overall cost. Due to the size variation between encrypted ﬁles,
Path ORAM can be considered as the optimal solution for
ﬁle-access pattern hiding. However, ODS, an instantiation of
position-based ORAM such as Path ORAM designed for data
structure, seems not to be ideal for large data structures as
found in DSSE. It reduces the client storage but signiﬁcantly
increases the communication overhead and delay (Table 1)
and, therefore, it is impractical for real-life applications.
Lack of practical oblivious access for encrypted data struc-
ture in the DSSE domain leads us to the following research
problem:
“Can we propose a protocol to obliviously access the
encrypted data structure I in DSSE which is much
more eﬃcient than ORAM, and yet seals leakages
of traditional DSSE with only a minimal leakage?”
Sealing information leakages from data structure-access
pattern while preserving high performance is necessary to
make DSSE a feasible solution for cloud systems.
1.2 Our contributions
In this paper, we propose a new oblivious access scheme
over the encrypted data structure in DSSE that we call
Distributed Oblivious Data structure (DOD-DSSE ). Our
intuition is to leverage two non-colluding servers and exploit
the properties of an incidence matrix to seal information leak-
ages in DSSE, while incurring only a small-constant overhead.
DOD-DSSE achieves the following desirable properties:
• Signiﬁcantly higher security than traditional DSSE:
DOD-DSSE seals leakages from search and update opera-
tions on the encrypted data structure and, therefore, it oﬀers
much higher security than traditional DSSE schemes. Specif-
ically, DOD-DSSE breaks the linkability between access
operations on the encrypted data structure I, hides search (i)
and update (ii) patterns as shown in Section 1.1. This allows
DOD-DSSE to prevent a server from learning whether or not
the same query is continuously repeated as well as the rela-
tionship between keywords and ﬁles. Therefore, DOD-DSSE
is secure against statistical attacks to which all traditional
DSSE schemes are vulnerable due to leakages from data
structure-access patterns. Table 1 summaries the security of
DOD-DSSE , compared with traditional DSSEs.
• Signiﬁcantly higher eﬃciency than ORAM-based methods:
DOD-DSSE oﬀers much lower bandwidth overhead and de-
lay than applying ORAM-based techniques (e.g., ODS [25])
to the encrypted data structure I. Our experimental results
303
Server S0
Encrypted data structure I(0)
v1
0
...
0
...
1
...
1
u1
...
u8
...
u35
...