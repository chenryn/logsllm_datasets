### Protection Coverage

Our technique offers significantly different protection trade-offs compared to oblivious hashing. 

1. **Deterministic vs. Non-Deterministic Code:**
   - **Oblivious Hashing:** This method can only protect code with deterministic execution states. Code that relies on system calls, such as the `ptrace` detector discussed in Section IV-A [13], is not protected. Adversaries often target non-deterministic code, such as control flow instructions dependent on external inputs like license keys. Therefore, a key advantage of our technique is its ability to protect both deterministic and non-deterministic code.
   
2. **Code Path Coverage:**
   - **Oblivious Hashing:** Only protects code paths for which the state was recorded during testing. In contrast, our technique is entirely static and can be applied even to untested code.

### Indefinite Attack Resistance

Indefinite attack resistance is impractical in a self-sufficient tamper-proofing system [5]. Instead, Parallax is designed to increase the difficulty and effort required for adversaries to tamper with protected code. A determined adversary may still succeed under specific conditions:
1. **Non-Overlapping Gadgets:** Modifications are made entirely within instructions that do not overlap with gadgets. As discussed in Section VII, Parallax aims to minimize such instructions.
2. **Unaffected Verification Outcome:** Protected code is altered in a way that the resulting gadgets do not affect the verification process.
3. **Semantic Equivalence:** The modified gadgets are semantically equivalent to the originals, including memory and register allocation. These conditions significantly restrict the types of modifications that can be safely made, thereby increasing the complexity for an attacker to implement arbitrary changes.

### Related Work

To the best of our knowledge, no prior work has explored the use of Return-Oriented Programming (ROP) techniques for tamper-proofing. Additionally, previous tamper-proofing research does not discuss how proposed techniques can be applied at the binary level. Our work is the first to present a code protection method that can be implemented entirely at the binary level, making it suitable for legacy binaries.

**Traditional Anti-Tampering Algorithms:**
- **Checksumming:** Traditional methods, such as those by Chang et al. [11], use checksums to verify code integrity. However, Wurster et al. [36] demonstrated that these methods are vulnerable to attacks that exploit the separation of code and data in modern processors. Subsequent work [18] attempted to re-enable code self-checksumming by detecting the attack, but this requires disabling W⊕X protection, making the binary vulnerable to traditional code injection.

**Oblivious Hashing (OH):**
- **Execution State Determinism:** OH verifies code integrity by checking that hashes of the execution state match known correct values. While it provides strong protection, it cannot protect code with non-deterministic inputs, such as environment parameters or system call return values. Our approach, unlike OH, can protect both deterministic and non-deterministic code regions.

**Instruction-Level Overlapping:**
- **Variable-Length Instructions:** Previous work [20, 24] proposed overlapping non-gadget instructions for tamper-proofing. This method is only applicable to architectures with variable-length byte-aligned instructions. Our ROP-based approach does not have this restriction [10, 12]. Moreover, overlapping non-gadget instructions requires additional jumps and partial instructions, leading to significant performance overheads (up to 3×). Our approach provides better overall performance and isolates performance overhead from the protected code.

**Common Code Sharing:**
- **Limited Usefulness:** Another approach involves sharing common code blocks between functions. However, this is limited because most common code blocks in real-world binaries are non-sensitive sequences like function prologues. It is typically not feasible to protect non-trivial code blocks longer than one instruction using this method [20].

**Concurrent Work:**
- **ROP for Code Obfuscation:** Lu et al. [25] explored the use of ROP for code obfuscation but did not consider tamper-proofing. Their work focuses on creating ROP chains to hide functionality rather than maximizing protective gadget coverage or crafting gadgets that overlap with sensitive instructions. They also do not address preventing adversaries from tampering with the ROP chains once discovered.

### Conclusion

We introduced a novel code self-verification technique based on overlapping ROP gadgets with selected code. Multiple rewriting rules can be used to increase the coverage of protective gadgets, allowing up to 90% of all code bytes to be protected. This coverage exceeds that of oblivious hashing and provides better protection for commonly attacked non-deterministic control flow instructions. Unlike introspection-based verification algorithms, our approach is not vulnerable to direct instruction cache modification attacks. Furthermore, it can protect non-deterministic code, and the performance overhead can be confined to separate verification code, ensuring that performance-sensitive code remains unaffected. The performance overhead for programs protected using our technique is less than 4%.

### Acknowledgements

This work was supported by the European Research Council Starting Grant “Rosetta,” the European Commission EU FP7-ICT-257007 SysSec project, and the Netherlands Organisation for Scientific Research (NWO).

### References

[References remain unchanged]

---

This version of the text is more structured, clear, and professional, with improved coherence and readability.