title:How Reliable is My Wearable: A Fuzz Testing-Based Study
author:Edgardo Barsallo Yi and
Amiya Maji and
Saurabh Bagchi
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
How Reliable Is My Wearable: A Fuzz
Testing-based Study
Edgardo Barsallo Yi, Amiya K. Maji, Saurabh Bagchi
Purdue University
West Lafayette, IN, USA
{ebarsall, amaji, sbagchi}@purdue.edu
Abstract—As wearable devices like smartwatches and ﬁtness
monitors gain in popularity and are being touted for clinical pur-
poses, it becomes important to evaluate the reliability of Android
Wear OS and apps on such devices. To date there has been no
study done by systematic error injection into the OS or the apps.
We address this gap in this work. We develop and open source a
fuzz testing tool for Android Wear apps and services, called Qui-
Gon Jinn (QGJ). We perform an extensive fault injection study
by mutating inter-process communication messages and UI events
and direct about 1.5M such mutated events at 46 apps. These apps
are divided into two categories: health/ﬁtness and other. The re-
sults of our study show some patterns distinct from prior studies
of Android. Over the years, input validation has improved and
fewer NullPointerExceptions are seen, however, Android
Wear apps crash from unhandled IllegalStateExceptions
at a higher rate. There are occasional troubling cases of the
entire device rebooting due to unprivileged mutated messages.
Reassuringly the apps are quite robust to mutations of UI events
with only 0.05% of them causing an app crash.
I. INTRODUCTION
Over the last few years, wearable devices have grown
tremendously in popularity. In the private consumer market,
wearables include items such as smart glasses, smart watches,
hearables, ﬁtness and health trackers, smart jewelry, and smart
clothing. The most successful wearable devices on the market
today are smart watches and health and ﬁtness trackers.
The number of connected wearable devices worldwide was
estimated to be 325 million at the end of 2016 and is expected
to grow to over 830 million in 2020 [1]. Smart watches and
health sensors today are providing a window into our health.
However, every new technology brings with it new risks and
reliability concerns and these have not been adequately studied
for the wearables. In this paper, our objective is to explore
the reliability of these highly personalized devices that are
collecting deeply personal and in cases, sensitive, data. We also
point to fundamental software engineering and architecture
work that will make the apps more reliable.
While a few researchers have explored the design decisions
and their vulnerabilities in the context of wearables [2], [3],
they have not shed light on failure mechanisms and their
propagation, in a detailed and comprehensive study. Com-
pared to smart phones, wearable devices pose several new
reliability challenges to device manufacturers and software
developers. Limited display area, limited computing power,
limited volatile and non-volatile memory, non-conventional
shape of the devices, abundance of sensor data, complex com-
munication patterns of the apps, and limited battery size—all
these factors can contribute to salient software bugs and failure
modes. Moreover, since many of the wearable devices are
used for health purposes (either monitoring or treatment), their
accuracy and robustness issues can give rise to safety concerns.
Our paper, therefore, focuses on a systematic evaluation of
popular apps on Android Wear (AW) devices, with a special
focus on health/ﬁtness apps.
There has been signiﬁcant work on understanding the vul-
nerabilities of Android OS and its apps, adapting techniques
from software testing [4]–[6]. However, to the best of our
knowledge, we present the ﬁrst study of the reliability of
AW applications. AW shares much of the codebase with
Android OS and follows Androids conventional programming
paradigm: they are written in Java, compiled ahead-of-time,
and executed atop the managed Android Runtime. However,
there are major differences between traditional Android apps
and Wear apps. This is primarily due to the smaller display
area and rich sensor data in AW, as mentioned above. The
richness of the user activities supported is much more limited
and Wear apps mostly run in the background, communicate
with users using notiﬁcations, and are typically controlled
by a companion app on the smartphone. Based on these
observations, we ask the following questions about reliability
of AW:
1) Exception Types: What are the key differences between
traditional Android apps and Wear apps in terms of exception
handling? Are the relative proportions of manifestations of
uncaught exceptions (such as, app crash or system reboot)
similar?
2) Failures across Applications: What are the differences
between failure manifestations across application types? Are
health/ﬁtness apps more or less robust than other apps?
3) Robustness: How well do Wear apps handle unexpected
interactive user inputs? Can a user-level process crash the
system?
To answer these questions, we present the design and im-
plementation of Qui-Gon Jinn (QGJ)1, a simple user-level
tool (i.e., does not need rooted devices) for testing robustness
of Android Wear apps. QGJ consists of two components—a)
QGJ-Master2: An Android app for sending generated inter-
1Named after a powerful but maverick Jedi Master from Star Wars.
2Unless otherwise speciﬁed, we use the names QGJ-Master and QGJ inter-
changeably. The UI testing component is explicitly referred to as QGJ-UI.
2158-3927/18/$31.00 ©2018 IEEE
DOI 10.1109/DSN.2018.00050
410
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:53 UTC from IEEE Xplore.  Restrictions apply. 
exception types does
and Wear
apps. Over
suffer
failures at a higher
input validation in Android has
component communication messages (intents) to targeted ap-
plications, and b) QGJ-UI: A tool based on Android Monkey
fuzzer [7], which can send mutated (malformed) UI events
to the wearable device. Using both these components, we
systematically inject a large number of mutated, synthetic
intents or mutated UI events to a selection of 45 popular Wear
apps. We then analyze the system logs to ﬁnd how well these
applications handled the mutated intents or events.
Our key ﬁndings from the study are:
indeed dif-
1. Distribution of
the
fer between Android [8]
years,
improved and
fewer NullPointerExceptions are seen, however, AW
apps
rate from unhandled
IllegalStateException.
2. Across application types, built-in apps showed more failures
compared to third-party apps. This has worrying implication
for error propagation since many Android apps reuse built-
in apps and components. Our results did not indicate any
signiﬁcant difference between health/ﬁtness apps and other
apps.
3. Several
the Wear device
rebooted in response to malformed intents. These reboots did
not occur in response to a single “deadly” intent but rather
at speciﬁc states of the device due to escalation of multiple
errors. This would indicate that the malformed intents caused
error accumulation, which eventually rebooted the system.
4. AW apps offer signiﬁcant scope for improvement of input
validation. Although, many input validations are performed
by the system (which is an encouraging sign), apps are not
taking full advantage of these routines. Automated robustness
testing tools (such as QGJ) can help in detecting such bugs
and bridging this gap.
times during the experiments,
The rest of the paper is organized as follows. First, we
present an overview of Android in Section II. Then in Sec-
tion III, we present the design QGJ and our experimental setup.
Section IV discusses the results followed by related work in
Section V. Finally, we conclude the paper in Section VI with
a discussion of threats to validity.
II. BACKGROUND
A. Intents and Application Components
The Android programming model is based on passing intent
messages for communication within or across applications.
An intent can been seen as a passive data structure with
an abstract description of an operation to be performed.
The basic information in a intent includes: Action: a deﬁned
action speciﬁed in the Android API, such as ACTION_VIEW,
ACTION_EDIT, ACTION_DIAL, etc.; Data: an URI that
represents the data item to be operated on, such as a website
URL, or the URI of a contact. Additional optional ﬁelds
includes: Category: additional information about the action
to execute; Type: speciﬁes the explicit type for intent data
(a MIME type); Component: indicates the component class to
be used for the intent; Extras: key value pairs for additional
information. Moreover, there are two types of intent: implicit
and explicit, depending if the target or destination component
is deﬁned in the intent. Implicit intents are delivered to the best
matching component in the system, based on the information
contained in the intent. QGJ is focused on explicit intent.
The two types of Android application components relevant
to this study are as follows. Activity:
the entry point for
interacting with the user. One app can invoke an activity in
another app, if permissions are granted. Service: a component
that runs in the background to perform long-running operations
or to perform work for remote processes. A service does not
provide a user interface.
B. Android Wear
Android Wear (AW) is the version of Android OS designed
for smartwatches and other wearable devices. The ﬁrst version
was released in 2014, and AW 2.0 in early 2017. Unlike
Android, AW is not completely open source; but is one of the
most popular OSes for wearables, with Apple WatchOS and
Samsung Tizen. Contrary to mobile phones, wearables require
minimal human interaction (micro transactions). Hence, AW
user interface (UI) is designed to be the least attention seeking
to the user, by showing minimal information and centered
on notiﬁcations, watch faces, native applications and voice
commands. AW applications are more services driven in
contrast to Android applications, which usually have rich GUI.
Besides, since wearables need to be worn on the body, AW
take advantage of context-awareness by sensing information
from hardware and software sensors equipped on the devices.
III. DESIGN OF OUR TOOL AND EXPERIMENT
Our testing tool, Qui-Gon Jinn (QGJ), consists of two
distinct components: a) QGJ-Master, a generational fuzzer
that sends IPC messages to various apps, and b) QGJ-UI,
a mutational fuzzer that sends mutated UI events to the
wearable. Among these two, QGJ-Master is more complicated
and its design is presented in sections III.A-III.D. The design
of QGJ-UI and its experimental setup is presented in Section
III.E. In the following, we use the terms QGJ and QGJ-Master
interchangeably.
A. Testing Tool
QGJ follows the architecture of Jar Jar Binks (JJB) [8],
an Android robustness testing tool, which exploits IPC on
Android phones. The tool can fuzz a single component or
a group of components registered in a device. JJB supports
fuzz injection of Activities, Services, and Broadcast Receiver
components. QGJ extends the JJB capabilities to support
Android Wear, thus broadening the applicability signiﬁcantly
to wearables. We have open sourced our tool and hope that
others will use it for benchmarking the emerging class of
wearable apps [9]. The overall architecture of QGJ is shown in
Figure 1. QGJ allows us to inject randomly generated intents to
both mobile and wearable devices. Basically, the tool, which
needs to be installed on two paired devices (mobile phone
and wearable) consists of three main components: a mobile
application (QGJ Mobile), a wear application (QGJ Wear), and
a fuzzer library. We begin describing each component brieﬂy.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:53 UTC from IEEE Xplore.  Restrictions apply. 
411
2
In this particular evaluation, we are only focusing on fuzz
testing on the wearable device. Henceforth, we may shorten
this to simply saying “fuzz test”.
QGJ Mobile. This is an Android application, which runs on
the mobile and offers a UI to interact with the fuzzer. The user
can choose the component type to fuzz (Activities or Services)
and the type of test to execute (a speciﬁc campaign as outlined
in Table I). The application allows the user to choose the target
device: mobile or wearable. If the mobile device is chosen as
target device, the fuzz test is done locally. Otherwise, QGJ
Mobile communicates with the wearable device to orchestrate
the fuzz test. Once the test is completed, the app shows a
summary of the results.
QGJ Wear. This is an Android Wear application, which
executes on the wearable. It communicates with the mobile
app using the Android Wear MessageAPI and DataAPI. The
application receives the selected options on the UI, and exe-
cutes the fuzz test using the Fuzzer library. After the fuzzing,
the wearable app sends a summary of the results to the mobile
application.
Fuzzer Library. This is the Java library, which contains the
main functions needed to inject intents on the target device.
Since intents have to be sent from the target device, this library
is shared by QGJ Mobile and QGJ wearable. The library runs
the fuzz experiments asynchronously in the target device, and
the output is stored in the execution logs on the device.
The communication between the mobile device and the
wearable is shown in Figure 1a. The QGJ Mobile app ﬁrst
retrieves list of components (Activities, Services) from the
Android wearable ( 1 ). Next, from the Android device, we
choose a target application and the fuzzing campaign to use.
Then the Android phone communicates with the wearable
using the AW MessageAPI ( 2 ). When the AW device receives
the message, the wearable app forwards the input (the target
component and the fuzz campaign) to the Fuzzer library to
initiate the intent injection, 3 . The fuzzer library, which is
part of the QGJ wear application, triggers the fuzzing on the
chosen target app component ( 4 ). One of the goals of QGJ
is to keep the tool simple and broadly usable. Therefore, QGJ
does not need any root privilege on the device to run.
B. Fuzz Intent Campaigns
Table I summarizes the Fuzz Intent Campaigns (FIC) used
for our evaluation. The table includes the strategy used to
generate intents, the number of intents generated, and a sample
injected intent for each fuzz campaign. The fuzzer has over
100 different Actions and 12 types of data URI (e.g., https,
http, tel) conﬁgured. Combinations of these are used in the
intents generated during various FICs. We use these FICs to
evaluate how different kinds of corruption, from the subtle
to the more egregious, affect how they are handled by the
app components. In the best case, these should be handled
“gracefully” and not cause a user-visible failure.
FICs are
targeted to Activities and Services components because they
form the large majority of the components on AW apps. It
(a) QGJ-Master
(b) QGJ-UI
Fig. 1. Operational workﬂow of using QGJ for doing fuzz-based injection of
apps on the mobile device (a phone is shown here) or the wearable (a watch
is shown here). The workﬂow shows the communication between the phone
and the watch. The diagram does not include a target app on the mobile side
for clarity since this study is focused on fuzzing Android Wear apps.
is therefore important to understand how resilient they are to
incorrect intents.
C. Target Applications and Error Manifestations
Target apps. As described in Section II-B, we deﬁne two cate-
gories of applications—Health/Fitness and Not Health/Fitness.
This categorization is suggested by the fact that health/ﬁtness
apps are unique to the AW ecosystem. These are aimed to
monitor user activity through the use of hardware or software
sensors included in the wearable device. In most cases, these
apps interact with the Google Fit API to access the sensors.
This dependency could mean that Health/Fitness apps are
susceptible to propagation errors from the Google Fit API,
a hypothesis that we verify through our experiments.
Applications can be orthogonally classiﬁed as either built-
in or third party apps. This distinction is important to note
because built-in apps were developed by Google and are
already pre-installed on the device. These apps could include
general purpose applications (e.g., Google Calendar, Gmail)
or Android Wear core apps, like Google Fitness. Third-party
applications can be downloaded from the Google Play Store
and installed by the user. We used the number of downloads for
third-party apps as a measure of the maturity and popularity
levels of applications and selected only those with greater
than 1 million downloads. The complete breakdown of the
apps selected for our study is shown in Table II. The table
includes the number of components (Activities and Services)
per category. Previous to the start of the experiments, we
chose the 35 third-party apps from the Google Play store and
installed them in the smartwatch.
Error manifestations. For the experiments, we deﬁned four
possible reliability manifestation or behaviors, which we list
in decreasing order of severity.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:53 UTC from IEEE Xplore.  Restrictions apply. 
412
3
Campaign
A: Semi-valid Action
and Data
B: Blank Action or
C: Random Action or
Data