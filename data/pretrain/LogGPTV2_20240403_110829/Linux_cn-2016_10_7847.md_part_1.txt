---
author: Ruslan
category: 软件开发
comments_data:
- date: '2016-10-26 11:46:48'
  message: 感谢分享！
  postip: 115.199.242.215
  username: 来自浙江杭州的 Chrome 54.0|Mac 10.11 用户
- date: '2016-11-11 11:32:49'
  message: "楼主，想问一下mac是不是无法查看僵尸进程？我在mac下运行下面这段代码：\r\n#include &lt;unistd.h&gt;\r\n\r\nint main(void)\r\n{\r\n&nbsp; &nbsp; &nbsp; &nbsp;
    int i;\r\n&nbsp; &nbsp; &nbsp; &nbsp; for (i = 0; i &lt; 10; ++i) {\r\n&nbsp;
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!fork()) {\r\n&nbsp;
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return
    0;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\r\n&nbsp;
    &nbsp; &nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; sleep(100);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return 0;\r\n}\r\n编译成main,然后ps
    -ef | grep 'main'之后根本无法查看到&lt;defunct&gt;的进程啊。"
  postip: 122.13.132.168
  username: 来自广东的 Chrome 54.0|Mac 10.11 用户
- date: '2016-11-11 22:43:53'
  message: 看 STATE 字段里面 Z 的进程，这是僵尸、
  postip: 123.120.51.87
  username: linux [Chrome 54.0|Mac 10.11]
count:
  commentnum: 3
  favtimes: 5
  likes: 0
  sharetimes: 0
  viewnum: 16003
date: '2016-10-09 14:42:00'
editorchoice: true
excerpt: “你该如何让你的服务器在同一时间处理多个请求呢？”在这篇文章中，你会找到答案。系好安全带，我们要认真起来，全速前进了！
fromurl: https://ruslanspivak.com/lsbaws-part3/
id: 7847
islctt: true
largepic: /data/attachment/album/201610/09/144117s2djox1sesdiviid.png
permalink: /article-7847-1.html
pic: /data/attachment/album/201610/09/144117s2djox1sesdiviid.png.thumb.jpg
related:
- displayorder: 0
  raid: 7662
- displayorder: 1
  raid: 7685
- displayorder: 0
  raid: 7877
reviewer: ''
selector: ''
summary: “你该如何让你的服务器在同一时间处理多个请求呢？”在这篇文章中，你会找到答案。系好安全带，我们要认真起来，全速前进了！
tags:
- 服务器
- Web
thumb: false
title: 搭个 Web 服务器（三）
titlepic: true
translator: StdioA
updated: '2016-10-09 14:42:00'
---
> 
> “只有在创造中才能够学到更多。” ——皮亚杰
> 
> 
> 
在本系列的[第二部分](/article-7685-1.html)中，你创造了一个可以处理基本 HTTP GET 请求的、朴素的 WSGI 服务器。当时我问了一个问题：“你该如何让你的服务器在同一时间处理多个请求呢？”在这篇文章中，你会找到答案。系好安全带，我们要认真起来，全速前进了！你将会体验到一段非常快速的旅程。准备好你的 Linux、Mac OS X（或者其他 \*nix 系统），还有你的 Python。本文中所有源代码均可在 [GitHub](https://github.com/rspivak/lsbaws/blob/master/part3/) 上找到。
![](/data/attachment/album/201610/09/144117s2djox1sesdiviid.png)
### 服务器的基本结构及如何处理请求
首先，我们来回顾一下 Web 服务器的基本结构，以及服务器处理来自客户端的请求时，所需的必要步骤。你在[第一部分](/article-7662-1.html)及[第二部分](/article-7685-1.html)中创建的轮询服务器只能够一次处理一个请求。在处理完当前请求之前，它不能够接受新的客户端连接。所有请求为了等待服务都需要排队，在服务繁忙时，这个队伍可能会排的很长，一些客户端可能会感到不开心。
![](/data/attachment/album/201610/09/144221rqrdi1vhdzbf0r3g.png)
这是轮询服务器 [webserver3a.py](https://github.com/rspivak/lsbaws/blob/master/part3/webserver3a.py) 的代码：
```
#####################################################################
# 轮询服务器 - webserver3a.py                                       #
#                                                                   #
# 使用 Python 2.7.9 或 3.4                                          #
# 在 Ubuntu 14.04 及 Mac OS X 环境下测试通过                        #
#####################################################################
import socket
SERVER_ADDRESS = (HOST, PORT) = '', 8888
REQUEST_QUEUE_SIZE = 5
def handle_request(client_connection):
    request = client_connection.recv(1024)
    print(request.decode())
    http_response = b"""\
HTTP/1.1 200 OK
Hello, World!
"""
    client_connection.sendall(http_response)
def serve_forever():
    listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    listen_socket.bind(SERVER_ADDRESS)
    listen_socket.listen(REQUEST_QUEUE_SIZE)
    print('Serving HTTP on port {port} ...'.format(port=PORT))
    while True:
        client_connection, client_address = listen_socket.accept()
        handle_request(client_connection)
        client_connection.close()
if __name__ == '__main__':
    serve_forever()
```
为了观察到你的服务器在同一时间只能处理一个请求的行为，我们对服务器的代码做一点点修改：在将响应发送至客户端之后，将程序阻塞 60 秒。这个修改只需要一行代码，来告诉服务器进程暂停 60 秒钟。
![](/data/attachment/album/201610/09/144221gpbfsxuquizfl2lq.png)
这是我们更改后的代码，包含暂停语句的服务器 [webserver3b.py](https://github.com/rspivak/lsbaws/blob/master/part3/webserver3b.py)：
```
######################################################################
# 轮询服务器 - webserver3b.py                                         #
#                                                                    #
# 使用 Python 2.7.9 或 3.4                                            #
# 在 Ubuntu 14.04 及 Mac OS X 环境下测试通过                           #
#                                                                    #
# - 服务器向客户端发送响应之后，会阻塞 60 秒                             #
######################################################################
import socket
import time
SERVER_ADDRESS = (HOST, PORT) = '', 8888
REQUEST_QUEUE_SIZE = 5
def handle_request(client_connection):
    request = client_connection.recv(1024)
    print(request.decode())
    http_response = b"""\
HTTP/1.1 200 OK
Hello, World!
"""
    client_connection.sendall(http_response)
    time.sleep(60)  ### 睡眠语句，阻塞该进程 60 秒
def serve_forever():
    listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    listen_socket.bind(SERVER_ADDRESS)
    listen_socket.listen(REQUEST_QUEUE_SIZE)
    print('Serving HTTP on port {port} ...'.format(port=PORT))
    while True:
        client_connection, client_address = listen_socket.accept()
        handle_request(client_connection)
        client_connection.close()
if __name__ == '__main__':
    serve_forever()
```
用以下命令启动服务器：
```
$ python webserver3b.py
```
现在，打开一个新的命令行窗口，然后运行 `curl` 语句。你应该可以立刻看到屏幕上显示的字符串“Hello, World!”：
```
$ curl http://localhost:8888/hello
Hello, World!
```
然后，立刻打开第二个命令行窗口，运行相同的 `curl` 命令：
```
$ curl http://localhost:8888/hello
```
如果你在 60 秒之内完成了以上步骤，你会看到第二条 `curl` 指令不会立刻产生任何输出，而只是挂在了哪里。同样，服务器也不会在标准输出流中输出新的请求内容。这是这个过程在我的 Mac 电脑上的运行结果（在右下角用黄色框标注出来的窗口中，我们能看到第二个 `curl` 指令被挂起，正在等待连接被服务器接受）：
![](/data/attachment/album/201610/09/144223uo5qz8qok8wb099h.png)
当你等待足够长的时间（60 秒以上）后，你会看到第一个 `curl` 程序完成，而第二个 `curl` 在屏幕上输出了“Hello, World!”，然后休眠 60 秒，进而终止。
![](/data/attachment/album/201610/09/144224k01m1zo1ef710fmr.png)
这样运行的原因是因为在服务器在处理完第一个来自 `curl` 的请求之后，只有等待 60 秒才能开始处理第二个请求。这个处理请求的过程按顺序进行（也可以说，迭代进行），一步一步进行，在我们刚刚给出的例子中，在同一时间内只能处理一个请求。
现在，我们来简单讨论一下客户端与服务器的交流过程。为了让两个程序在网络中互相交流，它们必须使用套接字。你应当在本系列的前两部分中见过它几次了。但是，套接字是什么？
![](/data/attachment/album/201610/09/144225dabrkbpphuubp5e5.png)
 套接字   （    socket    ） 是一个通讯通道 端点   （    endpoint    ） 的抽象描述，它可以让你的程序通过文件描述符来与其它程序进行交流。在这篇文章中，我只会单独讨论 Linux 或 Mac OS X 中的 TCP/IP 套接字。这里有一个重点概念需要你去理解：TCP  套接字对   （    socket pair    ） 。
> 
> TCP 连接使用的套接字对是一个由 4 个元素组成的元组，它确定了 TCP 连接的两端：本地 IP 地址、本地端口、远端 IP 地址及远端端口。一个套接字对唯一地确定了网络中的每一个 TCP 连接。在连接一端的两个值：一个 IP 地址和一个端口，通常被称作一个套接字。（引自[《UNIX 网络编程 卷1：套接字联网 API （第3版）》](http://www.epubit.com.cn/book/details/1692)）
> 
> 
> 
![](/data/attachment/album/201610/09/144226b648t2futy2vyt5v.png)
所以，元组 `{10.10.10.2:49152, 12.12.12.3:8888}` 就是一个能够在客户端确定 TCP 连接两端的套接字对，而元组 `{12.12.12.3:8888, 10.10.10.2:49152}` 则是在服务端确定 TCP 连接两端的套接字对。在这个例子中，确定 TCP 服务端的两个值（IP 地址 `12.12.12.3` 及端口 `8888`），代表一个套接字；另外两个值则代表客户端的套接字。
一个服务器创建一个套接字并开始建立连接的基本工作流程如下：
![](/data/attachment/album/201610/09/144227ozv3rynoay6a76my.png)
1. 服务器创建一个 TCP/IP 套接字。我们可以用这条 Python 语句来创建：
```
listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
```
2. 服务器可能会设定一些套接字选项（这个步骤是可选的，但是你可以看到上面的服务器代码做了设定，这样才能够在重启服务器时多次复用同一地址）：
```
listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
```
3. 然后，服务器绑定一个地址。绑定函数 `bind` 可以将一个本地协议地址赋给套接字。若使用 TCP 协议，调用绑定函数 `bind` 时，需要指定一个端口号，一个 IP 地址，或两者兼有，或两者全无。（引自[《UNIX网络编程 卷1：套接字联网 API （第3版）》](http://www.epubit.com.cn/book/details/1692)）