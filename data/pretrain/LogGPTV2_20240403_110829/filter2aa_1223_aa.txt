### RESTing On Your Laurels Will Get You Pwned
By Abraham Kang, Dinis Cruz, and Alvaro Munoz

#### Goals and Main Points
- This presentation, originally a 2-hour session, will focus on identifying remote code execution (RCE) and data exfiltration vulnerabilities in REST APIs.
- A REST API is essentially a web application that adheres to a structured set of rules. Therefore, traditional web application vulnerabilities such as SQL Injection, Cross-Site Scripting (XSS), Direct Object Reference, and Command Injection still apply.
- We will demonstrate how RCE and data exfiltration manifest in REST APIs.

#### Causes of REST Vulnerabilities
- **Location in the Trusted Network**: Data centers often place REST APIs in trusted networks, which can be exploited if the network is compromised.
- **History of REST Implementations**: Early REST APIs were developed for internal use, leading to security oversights when they became publicly accessible.
- **Server-Side Request Forgery (SSRF)**: Attackers can exploit SSRF to target internal REST APIs.
- **URL Construction**: URLs to backend REST APIs are often built using concatenation instead of secure URI builders, leading to vulnerabilities like Extended HPPP.
- **Self-Describing and Predictable Nature**: REST APIs are often self-describing and predictable, making them easier to enumerate and attack.
- **Inbred Architecture**: The architecture of REST frameworks may prioritize functionality over security.
- **Extensions in REST Frameworks**: Extensions that enhance development speed can introduce security risks.
- **Incorrect Assumptions**: Developers may make incorrect assumptions about application behavior, leading to vulnerabilities.
- **Input Types and Interfaces**: Improper handling of input types and interfaces can expose the API to various attacks.

#### REST History
- **Introduction**: REST was introduced in Roy Fielding's Ph.D. dissertation in 2000.
- **Promotion of HTTP Methods**: REST promoted the use of HTTP methods (PUT, POST, GET, DELETE) and URLs to communicate additional metadata.
- **HTTP Method Mapping**:
  - **GET**: `http://svr.com/customers/123` (Select)
  - **PUT**: `http://svr.com/customers/123` (Update)
  - **POST**: `http://svr.com/customers` (Insert)
  - **DELETE**: `http://svr.com/customers/123` (Delete)

#### REST History (Bad Press)
- **Initial Criticism**: When REST was first introduced, it was heavily criticized by the security community for being inherently unsafe.
- **Internal Development**: As a result, REST APIs were initially developed for internal networks only, creating a "Garden of Eden" environment.
- **Public Exposure**: Once developers became comfortable with REST, they began to expose these APIs to the public, increasing the risk of exploitation.

#### Attacking Backend Systems (Traditional Method)
- **Firewall (FW) and Internet**: Traditional attacks involve breaching the firewall and accessing the internal network.
- **Port Scanning and Fingerprinting**: After compromising an application server, attackers scan the internal network to identify and target data-rich servers.
- **Client Protocol Binaries**: Install client protocol binaries or mount direct network attacks.
- **Parameter Discovery**: Determine the correct parameters to pass to the backend system through network sniffing, credential reuse, default usernames and passwords, and authentication bypass.

#### Attacking an Internal Network (REST Style)
- **Find a Vulnerable HTTP REST Proxy**: Identify a proxy with vulnerabilities.
- **Identify REST-Based Systems**: Discover which systems on the internal network have REST APIs.
- **Data Exfiltration**: Extract data from the REST interface of the backend system.
- **Remote Code Execution (RCE)**: Gain RCE on an internal REST API.
- **Targeted Backend Systems**: Common targets include ODATA in MS SQL Server, Beehive and OAE RESTful API, Neo4j, MongoDB, CouchDB, Cassandra, HBase, and many others.

#### Server-Side Request Forgery (SSRF) to Internal REST APIs
- **Exploitation Mechanisms**: Attackers can use server-side request forwarding or proxying mechanisms to attack internal-only REST APIs.
- **Examples**: RFI through PHP include(), REST framework-specific proxies, XML External Entity (XXE) attacks, and WS-* protocols.
- **Basic Auth Over SSL**: Many internal REST APIs use basic auth over SSL. Attackers can find and use these credentials in the URL.

#### URL Construction with Concatenation
- **Vulnerability**: Publicly exposed REST APIs often invoke internal REST APIs using concatenated URLs, which can lead to Extended HPPP.
- **Example Code**:
  ```java
  new URL("http://yourSvr.com/value" + var);
  new Redirector(getContext(), urlFromCookie, MODE_SERVER_OUTBOUND);
  HttpGet("http://yourSvr.com/value" + var);
  HttpPost("http://yourSvr.com/value" + var);
  restTemplate.postForObject("http://localhost:8080/Rest/user/" + var, request, User.class);
  ```

#### Extended HPPP (HTTP Path & Parameter Pollution)
- **Discovery**: HPP was discovered by Stefano di Paola and Luca Carettoni in 2009, exploiting duplicate request parameters.
- **Extended HPPP**: Utilizes matrix and path parameters, JSON injection, and path segment characters to alter REST URL requests.
- **Techniques**:
  - `#`: Removes ending URL characters.
  - `../`: Changes the semantics of the REST request.
  - `;`: Adds matrix parameters to the URL.
  - `_method`: Changes a GET request to PUT, DELETE, or POST.
  - Special framework-specific parameters, like `qt` in Apache Solr, provide enhanced access to backend data.
  - JSON Injection: Provides necessary input to the application receiver.

#### Example: Extended HPPP
```java
String entity = request.getParameter("entity");
String id = request.getParameter("id");
URL urlGET = new URL("http://svr.com:5984/customers/" + entity + "?id=" + id);
```
- **Modification**: Change the request to a PUT to `http://svr.com:5984/admin`.

#### REST is Self-Describing and Predictable
- **Information Gathering**: When gathering information about a REST API and its backing system, you might start with the following URL:
  - `http://host:port/`

This optimized version of the text is more organized, clear, and professional, making it easier to understand the key points and concepts.