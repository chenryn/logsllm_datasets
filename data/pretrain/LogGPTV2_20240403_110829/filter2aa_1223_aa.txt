RESTing On Your Laurels Will Get 
You Pwned 
By Abraham Kang, Dinis Cruz, and 
Alvaro Munoz 
Goals and Main Point 
• Originally a 2 hour presentation so we will only 
be focusing on identifying remote code execution 
and data exfiltration vulnerabilities through REST 
APIs. 
• Remember that a REST API is nothing more than 
a web application which follows a structured set 
of rules. 
– So all of the previous application vulnerabilities still 
apply: SQL Injection, XSS, Direct Object Reference, 
Command Injection, etc. 
• We are going to show you how remote code 
execution and data filtration manifest themselves 
in REST APIs. 
Causes of REST Vulnerabilities 
• Location in the trusted network of your data center 
• History of REST Implementations 
• SSRF (Server Side Request Forgery) to Internal REST 
APIs 
• URLs to backend REST APIs are built with 
concatenation instead of URIBuilder (Prepared URI) 
• Self describing and predicable nature 
• Inbred Architecture 
• Extensions in REST frameworks that enhance 
development of REST functionality at the expense of 
security 
• Incorrect assumptions of application behavior 
• Input types and interfaces 
REST History 
• Introduced to the world in a PHD dissertation by 
Roy Fielding in 2000. 
• Promoted HTTP methods (PUT, POST, GET, 
DELETE) and the URL itself to communicate 
additional metadata as to the nature of an HTTP 
request. 
• GET  
http://svr.com/customers/123 
• PUT  
http://svr.com/customers/123 
Http Method 
Database Operation 
PUT 
Update 
POST 
Insert 
GET 
Select 
DELETE 
Delete 
REST History (Bad Press) 
• When REST originally came out, it was harshly  
criticized by the security community as being 
inherently unsafe. 
– As a result REST, applications were originally 
developed to only run on internal networks (non-
public access). 
• This allowed developers to develop REST APIs in a kind 
of “Garden of Eden” 
– This also encouraged REST to become a popular 
interface for internal backend systems. 
– Once developers got comfortable with REST 
internal applications they are now RESTifying all 
publically exposed application interfaces 
Attacking Backend Systems (Trad Method) 
FW 
Internet 
BH2 
FW 
AS2 
SAP 
FW 
Internet 
BH5 
FW 
AS5 
… 
FW 
Internet 
BH4 
FW 
AS4 
ERP 
FW 
BH1 
FW 
AS1 
Oracle 
FW 
Internet 
BH3 
FW 
AS3 
MS 
SQL 
Attacker 
Mongo 
Couch 
Neo4j 
Cassan 
LDAP/ 
AD 
HBase 
EAI 
EII 
ESB 
Http Protocol (proprietary protocols are different colors) 
… 
Attacking An Internal Network (Trad Method) 
•
Pwn the application server 
•
Figure out which systems are 
running on the internal 
network and target a data rich 
server.  (Port Scanning and 
Fingerprinting) 
•
Install client protocol binaries 
to targeted system (in this case 
SAP client code) or mount 
network attacks directly. 
•
Figure out the correct 
parameters to pass to the 
backend system by sniffing the 
network, reusing credentials, 
using default userids and 
passwords, bypassing 
authentication, etc. 
AS1 
Oracle 
X 
Non-compromised machine 
Y 
Compromised/Pwned machine 
AS2 
SAP 
AS5 
… 
AS4 
ERP 
AS3 
MS 
SQL 
Mongo 
Couch 
Neo4j 
Cassan 
LDAP/ 
AD 
HBase 
EAI 
EII 
ESB 
… 
Attacking An Internal Network (REST style) 
•
Find an HTTP REST proxy w/ vulns 
•
Figure out which REST based 
systems are running on the internal 
network 
•
Exfiltrate data from the REST 
interface of the backend system or 
•
Get RCE on an internal REST API 
•
What backend systems have a REST 
API that we can attack: 
–
ODATA in MS SQL Server 
–
Beehive and OAE RESTful API 
–
Neo4j, Mongo, Couch, Cassandra, HBase, 
your company, and many more 
SAP REST API 
SAP 
AS5 
… 
Pub REST API 
Mongo 
Couch 
Neo4j 
Cassan 
HBase 
… 
X 
Non-compromised machine 
Y 
Affected machine 
REST 
API 
REST 
API 
REST 
API 
REST 
API 
REST 
API 
REST 
API 
REST 
EAI 
EII 
ESB 
SSRF (Server Side Request Forgery) to 
Internal REST APIs 
• Attackers can take advantage of any server-side 
request forwarding or server-side request 
proxying mechanisms to attack internal-only 
REST APIs. 
– Examples: RFI through PHP include(), REST framework 
specific proxy (RESTlet Redirector), XXE, WS-* 
protocols, etc. 
• Most internal REST APIs are using basic auth over 
SSL.  So you can use the same attacks above to 
find the basic auth credentials on the file system 
and embed them in the URL: 
– http://user:PI:EMAIL/xxx... 
URLs to backend REST APIs are built with concatenation 
instead of URIBuilder (Prepared URI) 
• Most publically 
exposed REST APIs turn 
around and invoke 
internal REST APIs 
using URLConnections, 
Apache HttpClient or 
other REST clients.  If 
user input is directly 
concatenated into the 
URL used to make the 
backend REST request 
then the application 
could be vulnerable to 
Extended HPPP.  
Pub REST API 
DB 
Internal  
REST API 
What to Look For 
• new URL (“http://yourSvr.com/value” + var); 
• new Redirector(getContext(), urlFromCookie, 
MODE_SERVER_OUTBOUND ); 
• HttpGet(“http://yourSvr.com/value” + var); 
• HttpPost(“http://yourSvr.com/value” + var); 
•  restTemplate.postForObject( ”http://localhost
:8080/Rest/user/” + var, request, User.class ); 
•  ... 
Extended HPPP (HTTP Path & Parameter Pollution) 
•
HPP (HTTP Parameter Pollution) was discovered by Stefano di Paola and 
Luca Carettoni in 2009.  It utilized the discrepancy in how duplicate 
request parameters were processed to override application specific 
default values in URLs.  Typically attacks utilized the “&” character to 
fool backend services in accepting attacker controlled request 
parameters. 
•
Extended HPPP utilizes matrix and path parameters, JSON injection and 
path segment characters to change the underlying semantics of a REST 
URL request. 
– “#” can be used to remove ending URL characters similar to “--” in SQL 
Injection and “//” in JavaScript Injection 
– “../” can be used to change the overall semantics of the REST request in 
path based APIs (vs query parameter based) 
– “;” can be used to add matrix parameters to the URL at different path 
segments 
– The “_method” query parameter can be used to change a GET request to a 
PUT, DELETE, and sometimes a POST (if there is a bug in the REST API) 
– Special framework specific query parameters allow enhanced access to 
backend data through REST API.  The “qt” parameter in Apache Solr 
– JSON Injection is also used to provide the necessary input to the 
application receiver. 
Extended HPPP (Apply Your Knowledge I) 
String entity = request.getParameter(“entity”); 
String id = request.getParameter(“id”); 
URL urlGET = new 
URL(“http://svr.com:5984/customers/” + entity + 
“?id=“ + id ); 
Change it to a PUT to the following URL 
http://svr.com:5984/admin 
REST is Self Describing and Predictable 
• What URL would you first try when gathering 
information about a REST API and the system 
that backs it? 
REST is Self Describing and Predictable 
• What URL would you first try when gathering 
information about a REST API and the system that 
backs it? 
– http://host:port/ 