### 使用[PCRE](http://php.net/manual/en/book.pcre.php)(preg\_\*)家族函数
PHP有两种使用不同的方式来使用正则表达式：PCRE（Perl兼容表示法，preg\_\*）函数 和[POSIX](http://php.net/manual/en/book.regex.php)（POSIX扩展表示法，ereg\_\*） 函数。
每个函数家族各自使用一种风格稍微不同的正则表达式。幸运的是，POSIX家族函数从PHP 5.3.0开始就被弃用了。因此，你绝不应该使用POSIX家族函数编写新的代码。始终使用 PRCE家族函数，即preg\_\*函数。
**进一步阅读**
* [PHP手册：PCRE](http://php.net/manual/en/book.pcre.php)
* [PHP正则表达式起步](http://www.noupe.com/php/php-regular-expressions.html)
配置Web服务器提供PHP服务
---------------
### 使用[PHP-FPM](http://php.net/manual/en/install.fpm.php)
有多种方式来配置一个web服务器以提供PHP服务。传统（并且糟糕的）的方式是使用Apache的 [mod\_php](http://stackoverflow.com/questions/2712825/what-is-mod-php)。Mod\_php将PHP 绑定到Apache自身，但是Apache对于该模块功能的管理工作非常糟糕。一旦遇到较大的流量， 就会遭受严重的内存问题。
后来两个新的可选项很快流行起来：[mod\_fastcgi](http://www.fastcgi.com/mod_fastcgi/docs/mod_fastcgi.html) 和[mod\_fcgid](http://httpd.apache.org/mod_fcgid/)。两者均保持一定数量的PHP执行进程， Apache将请求发送到这些端口来处理PHP的执行。由于这些库限制了存活的PHP进程的数量， 从而大大减少了内存使用而没有影响性能。
一些聪明的人创建一个fastcgi的实现，专门为真正与PHP工作良好而设计，他们称之为 [PHP-FPM](http://php.net/manual/en/install.fpm.php)。PHP 5.3.0之前，为安装它， 你得跨越许多障碍，但幸运的是，PHP 5.3.3的核心包含了PHP-FPM，因此在Ubuntu 12.04上安装它非常方便。
如下示例是针对Apache 2.2.22的，但PHP-FPM也能用于其他web服务器如Nginx。
**安装PHP-FPM和Apache**
在Ubuntu 12.04上你可以使用如下命令安装PHP-FPM和Apache：
user@localhost: sudo apt-get install apache2-mpm-worker  
libapache2-mod-fastcgi php5-fpm  
user@localhost: sudo a2enmod actions alias fastcgi
注意我们*必须*使用apache2-mpm-worker，而不是apache2-mpm-prefork或apache2-mpm-threaded。
接下来配置Aapache虚拟主机将PHP请求路由到PHP-FPM进程。将如下配置语句放入Apache 配置文件（在Ubuntu 12.04上默认配置文件是/etc/apache2/sites-available/default）。
```
    AddHandler php5-fcgi .php
    Action php5-fcgi /php5-fcgi
    Alias /php5-fcgi /usr/lib/cgi-bin/php5-fcgi
    FastCgiExternalServer /usr/lib/cgi-bin/php5-fcgi -host 127.0.0.1:9000 -idle-timeout 120 -pass-header Authorization
```
 最后，重启Apache和FPM进程：
user@localhost: sudo service apache2 restart && sudo service php5-fpm  
restart
**进一步阅读**
* [PHP手册：PHP-FPM](http://php.net/manual/en/install.fpm.php)
* [PHP-FPM主页](http://php-fpm.org/)
* [在Ubuntu服务器Maverick上安装Apache + mod\_fastcgi + PHP-FPM](https://alexcabal.com/installing-apache-mod_fastcgi-php-fpm-on-ubuntu-server-maverick/)
* [为什么mod\_php的性能很糟糕](http://www.joomlaperformance.com/articles/webcasts/why_mod_php_is_bad_for_performance_52_58.html)
发送邮件
----
### 使用[PHPMailer](https://code.google.com/a/apache-extras.org/p/phpmailer/)
*经PHPMailer 5.1测试*
PHP提供了一个[mail()](http://php.net/manual/en/function.mail.php)函数，看起来很简单易用。 不幸的是，与PHP中的很多东西一样，它的简单性是个幻象，因其虚假的表面使用它会导致 严重的安全问题。
Email是一组网络协议，比PHP的历史还曲折。完全可以说发送邮件中的陷阱与PHP的mail() 函数一样多，这个可能会令你有点“不寒而栗”吧。
[PHPMailer](http://code.google.com/a/apache-extras.org/p/phpmailer/)是一个流行而 成熟的开源库，为安全地发送邮件提供一个易用的接口。它关注可能陷阱，这样你可以专注 于更重要的事情。
**示例**
```
Sender = 'PI:EMAIL';
$mailer->AddReplyTo('PI:EMAIL', 'Bilbo Baggins');
$mailer->SetFrom('PI:EMAIL', 'Bilbo Baggins');
$mailer->AddAddress('PI:EMAIL');
$mailer->Subject = 'The finest weed in the South Farthing';
$mailer->MsgHTML('
```
You really must try it, Gandalf!
-Bilbo
```
');
// Set up our connection information.
$mailer->IsSMTP();
$mailer->SMTPAuth = true;
$mailer->SMTPSecure = 'ssl';
$mailer->Port = 465;
$mailer->Host = 'my smpt host';
$mailer->Username = 'my smtp username';
$mailer->Password = 'my smtp password';
// All done!
$mailer->Send();
?>
```
验证邮件地址
------
### 使用[filter\_var()](http://php.net/manual/en/function.filter-var.php)函数
Web应用可能需要做的一件常见任务是检测用户是否输入了一个有效的邮件地址。毫无疑问 你可以在网上找到一些声称可以解决该问题的复杂的正则表达式，但是最简单的方法是使用 PHP的内建filter\_val()函数。
**示例**
**进一步阅读**
* [PHP手册：filter\_var()](http://php.net/manual/en/function.filter-var.php)
* [PHP手册：过滤器的类型](http://php.net/manual/en/filter.filters.php)
净化HTML输入和输出
-----------
**对于简单的数据净化，使用[htmlentities()](http://php.net/manual/en/function.htmlentities.php)函数, 复杂的数据净化则使用[HTML Purifier](http://htmlpurifier.org/)库**
*经HTML Purifier 4.4.0测试*
在任何wbe应用中展示用户输出时，首先对其进行“净化”去除任何潜在危险的HTML是非常必要的。 一个恶意的用户可以制作某些HTML，若被你的web应用直接输出，对查看它的人来说会很危险。
虽然可以尝试使用正则表达式来净化HTML，但不要这样做。HTML是一种复杂的语言，试图 使用正则表达式来净化HTML几乎总是失败的。
你可能会找到建议你使用[strip\_tags()](http://php.net/manual/en/function.strip-tags.php) 函数的观点。虽然strip\_tags()从技术上来说是安全的，但如果输入的不合法的HTML（比如， 没有结束标签），它就成了一个“愚蠢”的函数，可能会去除比你期望的更多的内容。由于非技术用户 在通信中经常使用字符，strip\_tags()也就不是一个好的选择了。
如果阅读了[验证邮件地址](https://phpbestpractices.org/#validating-emails)一节， 你也许也会考虑使用[filter\_var()](http://php.net/manual/en/function.filter-var.php) 函数。然而[filter\_var()函数在遇到断行时会出现问题](http://stackoverflow.com/questions/3150413/filter-sanitize-special-chars-problem-with-line-breaks)， 并且需要不直观的配置以接近[htmlentities()](http://php.net/manual/en/function.htmlentities.php)函数的效果， 因此也不是一个好的选择。
**对于简单需求的净化**
如果你的web应用仅需要完全地转义（因此可以无害地呈现，但不是完全去除）HTML，则使用 PHP的内建[htmlentities()](http://php.net/manual/en/function.htmlentities.php)函数。 这个函数要比HTML Purifier快得多，因此它不对HTML做任何验证—仅转义所有东西。
htmlentities()不同于类似功能的函数[htmlspecialchars()](http://php.net/manual/en/function.htmlspecialchars.php)， 它会编码所有适用的HTML实体，而不仅仅是一个小的子集。
**示例**
```
Mua-ha-ha!  Twiddling my evil mustache...
```
'; // Use the ENT\_QUOTES flag to make sure both single and double // quotes are escaped. // Use the UTF-8 character encoding if you've stored the text as // UTF-8 (as you should have). // See the UTF-8 section in this document for more details. $safeHtml = htmlentities($evilHtml, ENT\_QUOTES, 'UTF-8'); // $safeHtml is now fully escaped HTML. You can output $safeHtml // to your users without fear! ?>
**对于复杂需求的净化**
对于很多web应用来说，简单地转义HTML是不够的。你可能想完全去除任何HTML，或者允许 一小部分子集的HTML存在。若是如此，则使用[HTML Purifier](http://htmlpurifier.org/) 库。
HTML Purifier是一个经过充分测试但效率比较低的库。这就是为什么如果你的需求并不复杂 就应使用[htmlentities()](http://php.net/manual/en/function.htmlentities.php)，因为 它的效率要快得多。
HTML Purifier相比[strip\_tags()](http://php.net/manual/en/function.strip-tags.php) 是有优势的，因为它在净化HTML之前会对其校验。这意味着如果用户输入无效HTML，HTML Purifier相比strip\_tags()更能保留HTML的原意。HTML Purifier高度可定制，允许你为HTML的一个子集建立白名单来允许这个HTML子集的实体存在 输出中。
但其缺点就是相当的慢，它要求一些设置，在一个共享主机的环境里可能是不可行的。其文档 通常也复杂而不易理解。以下示例是一个基本的使用配置。查看[文档](http://htmlpurifier.org/docs) 阅读HTML Purifier提供的更多更高级的特性。
**示例**
```
Mua-ha-ha!  Twiddling my evil mustache...';
// Set up the HTML Purifier object with the default configuration.