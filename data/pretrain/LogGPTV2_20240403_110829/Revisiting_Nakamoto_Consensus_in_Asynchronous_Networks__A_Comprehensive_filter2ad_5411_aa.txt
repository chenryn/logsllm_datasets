title:Revisiting Nakamoto Consensus in Asynchronous Networks: A Comprehensive
Analysis of Bitcoin Safety and ChainQuality
author:Muhammad Saad and
Afsah Anwar and
Srivatsan Ravi and
David Mohaisen
Revisiting Nakamoto Consensus in Asynchronous Networks: A
Comprehensive Analysis of Bitcoin Safety and Chainality
Muhammad Saad
University of Central Florida
Orlando, USA
PI:EMAIL
University of Southern California
Srivatsan Ravi
Los Angeles, USA
PI:EMAIL
Afsah Anwar
University of Central Florida
Orlando, USA
PI:EMAIL
David Mohaisen
University of Central Florida
Orlando, USA
PI:EMAIL
ABSTRACT
The Bitcoin blockchain safety relies on strong network synchrony.
Therefore, violating the blockchain safety requires strong adver-
saries that control a mining pool with ⇡51% hash rate. In this paper,
we show that the network synchrony does not hold in the real
world Bitcoin network which can be exploited to lower the cost of
various attacks that violate the blockchain safety and chain quality.
Towards that, rst we construct the Bitcoin ideal functionality to
formally specify its ideal execution model in a synchronous net-
work. We then develop a large-scale data collection system through
which we connect with more than 36K IP addresses of the Bit-
coin nodes and identify 359 mining nodes. We contrast the ideal
functionality against the real world measurements to expose the
network anomalies that can be exploited to optimize the existing
attacks. Particularly, we observe a non-uniform block propagation
pattern among the mining nodes showing that the Bitcoin network
is asynchronous in practice.
To realize the threat of an asynchronous network, we present
the HashSplit attack that allows an adversary to orchestrate con-
current mining on multiple branches of the blockchain to violate
common prex and chain quality properties. We also propose the
attack countermeasures by tweaking Bitcoin Core to model the Bit-
coin ideal functionality. Our measurements, theoretical modeling,
proposed attack, and countermeasures open new directions in the
security evaluation of Bitcoin and similar blockchain systems.
CCS CONCEPTS
• Security and Privacy ! Distributed systems security.
KEYWORDS
Distributed Systems, Nakamoto Consensus, Security and Privacy
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specic permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484561
ACM Reference Format:
Muhammad Saad, Afsah Anwar, Srivatsan Ravi, and David Mohaisen. 2021.
Revisiting Nakamoto Consensus in Asynchronous Networks: A Compre-
hensive Analysis of Bitcoin Safety and Chain Quality . In Proceedings of the
2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 18 pages. https://doi.org/10.1145/3460120.3484561
1 INTRODUCTION AND RELATED WORK
Bitcoin is a dynamically evolving distributed system that has sig-
nicantly scaled up in recent years [9]. As Bitcoin continues to
grow and inspire other decentralized applications, its security fea-
tures are continuously investigated using theoretical analysis and
measurement techniques [25, 31]. However, as evident from the
prior work, various aspects of theory and measurements have not
been combined under a unied framework to fully characterize the
Bitcoin network anatomy and synthesize a computation model that
captures the intricacies of its real world deployments. We bridge
this gap by formally contrasting Bitcoin’s theoretical underpinnings
with network-wide measurements to investigate its security. To
put our work in the appropriate context, below we briey discuss
some notable related works and their limitations.
Theoretical Models’ Shortcomings. The existing theoretical
models [13, 29, 32, 34] that formally analyze the Nakamoto consen-
sus (1) ignore the mining power centralization in the real world
Bitcoin implementation, and (2) implicitly assume a form of syn-
chronous execution that uniformly applies to all network nodes.
However, the proof-of-work (PoW) diculty has considerably in-
creased over the years, allowing only a few nodes to mine blocks.
As a result, the network is naturally divided between mining and
non-mining nodes [3, 26].1 To incorporate the mining centrality
in a theoretical model, we construct the Bitcoin ideal functionality
(§2), which acknowledges the distinction between the mining and
non-mining nodes and presents an execution model that preserves
the blockchain safety properties.
Another limitation of the existing theoretical models is that they
assume uniform block propagation delay. The Bitcoin backbone
1The Bitcoin network consists of full nodes and SPV clients. Among the full nodes,
there are mining and non-mining nodes. The mining nodes are used by the mining
pools to broadcast blocks in the network. In [3, 26], mining nodes are also called the
“gateway nodes” of mining pools. The non-mining nodes do not mine blocks and only
maintain the blockchain. Our work focuses on the mining and non-mining full nodes.
Session 4A: Modeling Blockchains and Distributed LedgersCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea988protocol, proposed by Garay et al. [13], assumes a lock-step synchro-
nous network with no block propagation delay. This assumption
is impractical for a large-scale distributed system such as Bitcoin,
where block propagation incurs non-zero delay [10]. To address
this limitation, Pass et al. [32] extended the work in [13] and ana-
lyzed Bitcoin in the non-lock-step synchronous settings [34]. The
non-lock-step synchronous model assumes a network in which all
miners experience the same block propagation delay, which gives
a uniform advantage to the adversary over all other miners. Our
measurements contradict this assumption by showing that miners
receive blocks at dierent times (Figure 6), which cannot be mod-
eled as a uniform advantage. In §A, we analyze the shortcomings of
these models along with renements to their assumptions. In §5.1,
we conduct experiments to show that the real world execution of
Nakamoto consensus in Bitcoin is asynchronous. We note that the
change in the execution model aects the network synchronization
which is pertinent to ensure the two blockchain safety properties,
namely the common prex and the chain quality [13]. In §6, we
show that the asynchronous network relaxes the requirement to
violate these two properties.
Measurement Studies. In addition to the theoretical models, no-
table works on network measurements have focused on (1) an-
alyzing Bitcoin nodes distribution across autonomous systems
(ASes) [3, 14, 36], (2) discovering inuential nodes controlled by the
mining pools [3, 26], and (3) measuring the network synchroniza-
tion [10, 36]. The security evaluations of these studies proposed
(1) partitioning attacks through BGP prex hijacking of high pro-
le ASes [3], (2) majority attacks with less than 51% hash rate
(⇡49% in [10]), and (3) a combination of the two attacks (i.e., spatio-
temporal partitioning in [36] and the balance attack in [30]). In the
context of measuring the network synchronization, the two related
studies to our work are [10] and [36].
In 2012, Decker et al. [10] conducted the rst measurement study
to analyze the Bitcoin network synchronization. They concluded
that the block size is the dominant factor in blockchain synchroniza-
tion. In their measurements, they connected to ⇡3.5K IP addresses
and observed that ⇡90% of the nodes in the network receive the
newly published block within 12.6 seconds on average.2 In con-
trast, our measurements reveal a relatively weaker synchronization
where a large number of the connected nodes do not synchronize
on a newly published block. The observed dierences are likely
due to (1) an increase in the network size from 16K reachable IP
addresses in 2012 [10] to ⇡36K reachable IP addresses at the time of
conducting this study, (2) an increase in the block size from 500KB
to 1MB, and (3) an increase in the number of low bandwidth nodes
and Tor nodes. In 2019, weak network synchronization was also
reported in [36] using Bitnodes’ dataset. The authors observed a
few instances reported by Bitnodes where a majority of the network
nodes did not synchronize on the blockchain.
Limited Attack Strategies. The attacks proposed in these studies
have not been frequently observed in the wild due to strong adver-
sarial requirements. First, their threat models directly inherit the
assumptions of theoretical frameworks in [13, 32] and ignore the
critical distinction between the mining and non-mining nodes (i.e.,
2Another interpretation of this result is that 12.6 seconds after the release of a new
block, 90% of the nodes synchronized on that block and added it to their blockchain.
in [10, 30, 36]). As a result, their models require the adversary to
target all the network nodes. Moreover, the inability to distinguish
between the mining and non-mining nodes prevents them from
analyzing the block propagation patterns among the mining nodes
which exposes the asynchronous network. Therefore, these studies
have assumed a synchronous network which only allows limited
attack strategies [32]. The key challenge lies in getting visibility
into the network intricacies to (1) identify the mining nodes, (2)
study the block propagation among them, and (3) uncover the ac-
tual execution model. With the aid of such measurements and their
deviation from the ideal functionality, requirements for existing
attacks can be lowered, which we demonstrate in this work.
Splitting Mining Power. As mentioned earlier, the eect of block
propagation delay on the Bitcoin blockchain has been discussed
in theoretical models and measurement studies. Particularly, in
the routing attack in [3], the authors show that BGP attacks can
reduce the mining power of the Bitcoin network. In [30], Natoli et
al. used the routing attack model to present a trade-o between the
network delay and the adversary’s mining power (also simulated
by Gervais et al. [15]). Similarly, the Eclipse attack [19] showed that
an adversary can inuence the hash rate of the mining nodes by
occupying all their incoming and outgoing connections. However,
all these attacks rely on disrupting the network communication
to create a split between the mining nodes. Therefore, they im-
plicitly assume a form of route manipulation (i.e., BGP hijacking
or occupying incoming and outgoing connections [19, 30, 37]) as
a prerequisite to introduce delay and split the mining power. In
contrast, we show that the non-uniform delay in the existing block
propagation patterns can be exploited to split the mining power
without disrupting the communication model through route ma-
nipulation or connection control. We show that by only leveraging
the observed block propagation pattern among the mining nodes
and selective block broadcast, an adversary can violate the safety
properties of the Bitcoin blockchain.
Contributions and Roadmap. Combining our insight from the
theoretical analysis and measurements, we present the HashSplit
attack which relaxes the requirements to violate the blockchain
safety properties. The underpinnings of the HashSplit attack are
grounded in systematic theoretical analysis and measurements that
represent independent contributions in their own right. Along with
the attack and its countermeasures, our work exposes the anatomy
and characteristics of the Bitcoin network that are summarized
below as the key contributions.
(1) We construct the Bitcoin ideal world functionality to formally
specify the safety properties of the Bitcoin ledger; the common
prex property and the chain quality property [13] (§2). The ideal
world functionality faithfully models the expected functionality
of a correct Bitcoin implementation across prevalent deployments
in real world Bitcoin network.
(2) We deploy crawlers in the Bitcoin network and connect with
over 36K IP addresses in ve weeks (§3). We develop heuristics
to identify the mining nodes and identify 359 IP addresses of the
mining nodes using those heuristics (§4).
(3) We measure the block propagation patterns in the Bitcoin net-
work (§5) and show that during the average inter-arrival block
time, a large number of connected nodes do not synchronize
Session 4A: Modeling Blockchains and Distributed LedgersCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea989r+1. Both C1 and C2 have an equal length.
Ideal World Functionality of Bitcoin
Input: Nodes N including miners M, blockchain C, and trusted party F . The protocol starts at round r = r0 for a length l. Prior to the
execution, each Pi 2 M reports its hash rate hi to F , using which F computes µ0
i, the expected chain quality parameter for each Pi. F
mandates that hi < 0.5H, 8Pi 2 M; otherwise, F aborts. When a Pi 2 N broadcasts block br at time t0, it reaches all nodes in N and F at
the next time index t1. Therefore, N ⇥ N is fully connected, allowing each Pi to communicate with any node in N or F , concurrently.
onStart: The block mining starts in which Pi 2 M compete.
• Each round r, each Pi 2 M computes br+1 with probability hi
H .
• If Pi 2 M nds br+1 before it receives br+1 from any other miner, it broadcasts br+1 to F and N (no block withholding).
onReceive: On receiving a new block br+1, Pi 2 M, Pi /2 M, and F follow the following protocol:
• If F receives a single block br+1 in round r from Pi 2 M, F extends the chain C  br+1.
• If Pi /2 M receives a single block br+1 in round r from Pi 2 M, Pi /2 M extends the chain C  br+1.
• If Pi 2 M receives br+1 from another Pj 2 M in round r, then Pi stops its own computation for br+1, extends the chain C  br+1, and
moves to the next round to compute the next block using br+1 as the parent block.
• If F receives multiple inputs for the same parent block in a round (i.e., br+1   br and b0
r+1   br ), F forms two concurrent chains
C1   br+1 C2   b0
• If Pi 2 M receives multiple inputs for the same parent block (i.e., br+1   br and b0
r+1   br ), Pi gives time-based precedence to the
blocks. i.e., br+1 is received at t1 and b0
r+1 by treating it as an
orphaned block. Pi extends the chain C  br+1 and moves to the next round to compute the next block using br+1 as the parent block.
• If Pi 2 M receives multiple inputs for the same parent block in a round (i.e., br+1   br and b0
r+1   br ), at the same time t1, Pi tosses a
coin and selects one of the two blocks to extend the chain.
• If Pi /2 M receives multiple inputs for the same parent block in a round (i.e., br+1   br and b0
r+1   br ), Pi /2 M forms two concurrent
chains C1   br+1 C2   b0
onTerminate: On input (r = rl ), F terminates the execution and proceed towards the evaluation of Qcp and Qcq.
onery: In any round, F can query each Pi 2 N to report VPi
C
onValidate: In any round, to validate Qcp, F queries each Pi 2 N to report VPi
. If F receives a single ledger C from all Pi 2 N, it
C
considers Qcp to be preserved. If F receives more than one ledgers (i.e., C1 and C2) from one or more Pi 2 N, F prunes k blocks from C1
chain and veries if Cdk
1  C 2 (i.e., two chains share a common prex). To evaluate Qcq, F selects the longest chain among C1 and C2, and
computes the experimental value of µi. If µi   µ0
i =   (negligible in k), F assumes Qcq is preserved. Otherwise, Qcq is violated and some
Pi 2 M has maliciously contributed more blocks than its hash rate.
Figure 1: The Bitcoin ideal functionality closely modeled on the practical implementation of Bitcoin as we largely see it. We
use Pi to denote any node in the network. If Pi is among the mining nodes Pi 2 M, then it possesses the hashing power to
mine blocks. If Pi is not among the mining nodes Pi /2 M, then it simply maintains a blockchain and contributes to network
synchronization by relaying blocks to other nodes. The mining nodes M follow the communication model specied in [13, 29].