# Revisiting Nakamoto Consensus in Asynchronous Networks: A Comprehensive Analysis of Bitcoin Safety and Chain Quality

**Authors:**
- Muhammad Saad, University of Central Florida, Orlando, USA (PI:EMAIL)
- Afsah Anwar, University of Central Florida, Orlando, USA (PI:EMAIL)
- Srivatsan Ravi, University of Southern California, Los Angeles, USA (PI:EMAIL)
- David Mohaisen, University of Central Florida, Orlando, USA (PI:EMAIL)

## Abstract
The security of the Bitcoin blockchain relies on strong network synchrony. Violating this security typically requires a powerful adversary with approximately 51% of the network's hash rate. In this paper, we demonstrate that real-world Bitcoin networks do not maintain such synchrony, which can be exploited to reduce the cost of various attacks that compromise blockchain safety and chain quality.

To achieve this, we first construct the ideal functionality of Bitcoin, formally specifying its expected behavior in a synchronous network. We then develop a large-scale data collection system, connecting to over 36,000 IP addresses of Bitcoin nodes and identifying 359 mining nodes. By comparing the ideal functionality with real-world measurements, we expose network anomalies that can be exploited to optimize existing attacks. Specifically, we observe a non-uniform block propagation pattern among mining nodes, indicating that the Bitcoin network is asynchronous in practice.

We introduce the HashSplit attack, which allows an adversary to orchestrate concurrent mining on multiple branches of the blockchain, violating common prefix and chain quality properties. We also propose countermeasures by modifying Bitcoin Core to better model the ideal functionality. Our measurements, theoretical modeling, proposed attack, and countermeasures open new directions for the security evaluation of Bitcoin and similar blockchain systems.

## CCS Concepts
- **Security and Privacy**: Distributed systems security

## Keywords
- Distributed Systems, Nakamoto Consensus, Security and Privacy

## Introduction and Related Work
Bitcoin is a dynamically evolving distributed system that has significantly scaled up in recent years [9]. As Bitcoin continues to grow and inspire other decentralized applications, its security features are continuously investigated using theoretical analysis and measurement techniques [25, 31]. However, prior work has not fully combined theoretical and empirical approaches to characterize the Bitcoin network and synthesize a computational model that captures the intricacies of its real-world deployments. We bridge this gap by formally contrasting Bitcoin's theoretical underpinnings with network-wide measurements to investigate its security.

### Theoretical Models' Shortcomings
Existing theoretical models [13, 29, 32, 34] that analyze the Nakamoto consensus often ignore the centralization of mining power in real-world Bitcoin implementations and assume a form of synchronous execution that uniformly applies to all network nodes. However, the proof-of-work (PoW) difficulty has increased, allowing only a few nodes to mine blocks. This naturally divides the network into mining and non-mining nodes [3, 26]. To incorporate this centralization, we construct the Bitcoin ideal functionality (§2), which acknowledges the distinction between mining and non-mining nodes and presents an execution model that preserves blockchain safety properties.

Another limitation of these models is the assumption of uniform block propagation delay. The Bitcoin backbone protocol, proposed by Garay et al. [13], assumes a lock-step synchronous network with no block propagation delay. This assumption is impractical for a large-scale distributed system like Bitcoin, where block propagation incurs non-zero delay [10]. Pass et al. [32] extended this work to analyze Bitcoin in non-lock-step synchronous settings [34], but our measurements show that miners receive blocks at different times (Figure 6), contradicting the uniform advantage assumption. In §A, we analyze these models and their assumptions, and in §5.1, we conduct experiments to show that the real-world execution of Nakamoto consensus in Bitcoin is asynchronous. This affects network synchronization, which is crucial for ensuring the common prefix and chain quality properties [13]. In §6, we show that an asynchronous network relaxes the requirements to violate these properties.

### Measurement Studies
In addition to theoretical models, notable works on network measurements have focused on (1) analyzing the distribution of Bitcoin nodes across autonomous systems (ASes) [3, 14, 36], (2) discovering influential nodes controlled by mining pools [3, 26], and (3) measuring network synchronization [10, 36]. These studies have proposed (1) partitioning attacks through BGP prefix hijacking of high-profile ASes [3], (2) majority attacks with less than 51% hash rate (≈49% in [10]), and (3) a combination of the two attacks (i.e., spatio-temporal partitioning in [36] and the balance attack in [30]).

In 2012, Decker et al. [10] conducted the first measurement study to analyze Bitcoin network synchronization, concluding that block size is the dominant factor. They connected to ≈3,500 IP addresses and observed that ≈90% of nodes received newly published blocks within 12.6 seconds on average. In contrast, our measurements reveal weaker synchronization, with many nodes not synchronizing on newly published blocks. This difference is likely due to (1) an increase in the network size from 16,000 reachable IP addresses in 2012 to ≈36,000, (2) an increase in block size from 500KB to 1MB, and (3) an increase in the number of low-bandwidth and Tor nodes. In 2019, weak network synchronization was also reported in [36] using Bitnodes' dataset.

### Limited Attack Strategies
The attacks proposed in these studies have not been frequently observed in the wild due to strong adversarial requirements. Their threat models inherit the assumptions of theoretical frameworks [13, 32] and ignore the distinction between mining and non-mining nodes. This results in models requiring the adversary to target all network nodes, preventing the analysis of block propagation patterns among mining nodes and exposing the asynchronous network. Therefore, these studies assume a synchronous network, limiting attack strategies [32]. The key challenge is gaining visibility into the network intricacies to (1) identify mining nodes, (2) study block propagation among them, and (3) uncover the actual execution model. With such measurements and deviations from the ideal functionality, the requirements for existing attacks can be lowered, as demonstrated in this work.

### Splitting Mining Power
The effect of block propagation delay on the Bitcoin blockchain has been discussed in theoretical models and measurement studies. In [3], the authors show that BGP attacks can reduce the mining power of the Bitcoin network. In [30], Natoli et al. used the routing attack model to present a trade-off between network delay and the adversary's mining power (also simulated by Gervais et al. [15]). Similarly, the Eclipse attack [19] showed that an adversary can influence the hash rate of mining nodes by occupying all their connections. However, these attacks rely on disrupting network communication to create a split between mining nodes, assuming route manipulation or connection control. In contrast, we show that the non-uniform delay in existing block propagation patterns can be exploited to split mining power without disrupting the communication model. By leveraging the observed block propagation pattern and selective block broadcast, an adversary can violate the safety properties of the Bitcoin blockchain.

### Contributions and Roadmap
Combining insights from theoretical analysis and measurements, we present the HashSplit attack, which relaxes the requirements to violate blockchain safety properties. The underpinnings of the HashSplit attack are grounded in systematic theoretical analysis and measurements, representing independent contributions. Along with the attack and its countermeasures, our work exposes the anatomy and characteristics of the Bitcoin network, summarized below:

1. **Bitcoin Ideal World Functionality**: We construct the Bitcoin ideal world functionality to formally specify the safety properties of the Bitcoin ledger, including the common prefix and chain quality properties [13] (§2). The ideal functionality models the expected behavior of a correct Bitcoin implementation in real-world deployments.
   
2. **Large-Scale Data Collection**: We deploy crawlers in the Bitcoin network, connecting with over 36,000 IP addresses over five weeks (§3). We develop heuristics to identify mining nodes and identify 359 IP addresses of mining nodes (§4).

3. **Block Propagation Patterns**: We measure block propagation patterns in the Bitcoin network (§5) and show that during the average inter-arrival block time, a large number of connected nodes do not synchronize.

4. **HashSplit Attack and Countermeasures**: We introduce the HashSplit attack, which exploits the non-uniform block propagation pattern to violate blockchain safety properties. We also propose countermeasures by tweaking Bitcoin Core to model the ideal functionality (§6).

Our work provides a comprehensive analysis of Bitcoin's safety and chain quality in asynchronous networks, opening new directions for the security evaluation of Bitcoin and similar blockchain systems.

## Bitcoin Ideal World Functionality
### Input
- Nodes \( N \) including miners \( M \)
- Blockchain \( C \)
- Trusted party \( F \)

### Protocol
- The protocol starts at round \( r = r_0 \) for a length \( l \).
- Prior to execution, each miner \( P_i \in M \) reports its hash rate \( h_i \) to \( F \). \( F \) computes the expected chain quality parameter \( \mu_0^i \) for each \( P_i \).
- \( F \) mandates that \( h_i < 0.5H \) for all \( P_i \in M \); otherwise, \( F \) aborts.
- When a miner \( P_i \in N \) broadcasts a block \( b_r \) at time \( t_0 \), it reaches all nodes in \( N \) and \( F \) at the next time index \( t_1 \). Thus, \( N \times N \) is fully connected, allowing each node to communicate with any other node or \( F \) concurrently.

### onStart
- Block mining begins, with miners \( P_i \in M \) competing.
- Each round \( r \), each miner \( P_i \in M \) computes \( b_{r+1} \) with probability \( \frac{h_i}{H} \).
- If \( P_i \in M \) finds \( b_{r+1} \) before receiving it from another miner, it broadcasts \( b_{r+1} \) to \( F \) and \( N \) (no block withholding).

### onReceive
- **Trusted Party \( F \)**:
  - If \( F \) receives a single block \( b_{r+1} \) in round \( r \) from \( P_i \in M \), \( F \) extends the chain \( C \leftarrow b_{r+1} \).
  - If \( F \) receives multiple inputs for the same parent block in a round (i.e., \( b_{r+1} \leftarrow b_r \) and \( b'_{r+1} \leftarrow b_r \)), \( F \) forms two concurrent chains \( C_1 \leftarrow b_{r+1} \) and \( C_2 \leftarrow b'_{r+1} \).

- **Non-Miner \( P_i \notin M \)**:
  - If \( P_i \notin M \) receives a single block \( b_{r+1} \) in round \( r \) from \( P_i \in M \), \( P_i \notin M \) extends the chain \( C \leftarrow b_{r+1} \).
  - If \( P_i \notin M \) receives multiple inputs for the same parent block in a round (i.e., \( b_{r+1} \leftarrow b_r \) and \( b'_{r+1} \leftarrow b_r \)), \( P_i \notin M \) forms two concurrent chains \( C_1 \leftarrow b_{r+1} \) and \( C_2 \leftarrow b'_{r+1} \).

- **Miner \( P_i \in M \)**:
  - If \( P_i \in M \) receives \( b_{r+1} \) from another miner \( P_j \in M \) in round \( r \), \( P_i \) stops its own computation for \( b_{r+1} \), extends the chain \( C \leftarrow b_{r+1} \), and moves to the next round to compute the next block using \( b_{r+1} \) as the parent block.
  - If \( P_i \in M \) receives multiple inputs for the same parent block (i.e., \( b_{r+1} \leftarrow b_r \) and \( b'_{r+1} \leftarrow b_r \)) at the same time \( t_1 \), \( P_i \) tosses a coin and selects one of the two blocks to extend the chain.
  - If \( P_i \in M \) receives multiple inputs for the same parent block (i.e., \( b_{r+1} \leftarrow b_r \) and \( b'_{r+1} \leftarrow b_r \)) at different times, \( P_i \) gives time-based precedence to the blocks, extending the chain \( C \leftarrow b_{r+1} \) and treating \( b'_{r+1} \) as an orphaned block.

### onTerminate
- On input \( r = r_l \), \( F \) terminates the execution and proceeds to evaluate the common prefix property \( Q_{cp} \) and chain quality property \( Q_{cq} \).

### onQuery
- In any round, \( F \) can query each node \( P_i \in N \) to report \( V_{P_i}^C \).

### onValidate
- To validate \( Q_{cp} \), \( F \) queries each node \( P_i \in N \) to report \( V_{P_i}^C \). If \( F \) receives a single ledger \( C \) from all nodes, \( Q_{cp} \) is preserved. If \( F \) receives more than one ledger (i.e., \( C_1 \) and \( C_2 \)) from one or more nodes, \( F \) prunes \( k \) blocks from \( C_1 \) and verifies if \( C_{dk}^1 \leftarrow C_2 \) (i.e., the two chains share a common prefix).
- To evaluate \( Q_{cq} \), \( F \) selects the longest chain among \( C_1 \) and \( C_2 \), and computes the experimental value of \( \mu_i \). If \( \mu_i \approx \mu_0^i \) (negligible in \( k \)), \( F \) assumes \( Q_{cq} \) is preserved. Otherwise, \( Q_{cq} \) is violated, and some miner \( P_i \in M \) has maliciously contributed more blocks than its hash rate.

**Figure 1: The Bitcoin ideal functionality closely modeled on the practical implementation of Bitcoin as we largely see it. We use \( P_i \) to denote any node in the network. If \( P_i \) is among the mining nodes \( P_i \in M \), it possesses the hashing power to mine blocks. If \( P_i \) is not among the mining nodes \( P_i \notin M \), it simply maintains a blockchain and contributes to network synchronization by relaying blocks to other nodes. The mining nodes \( M \) follow the communication model specified in [13, 29].**

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the research.