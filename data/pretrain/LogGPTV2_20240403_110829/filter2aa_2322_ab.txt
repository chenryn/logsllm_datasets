                    } else {
                        return b0 == 76 && b1 == 111 && b2 == 167 && b3 == 
148 ? new EncodingDetector.BomResult("CP037", 0) : new 
EncodingDetector.BomResult("UTF-8", 0);
                    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
5
利⽤两者对于编码的识别结果不同，从⽽造成解析差异，进⾏绕过。 
在看到的wp中基本都是利⽤UTF-16绕过，但是从函数中可以看到，Tomcat还⽀持另⼀些不常⻅编码，
如UCS-4和CP037。这两种编码⽐较少⻅，并且部分后端语⾔是不⽀持直接解析的。 
也就是说，如果遇到WAF或者webshell检测引擎，在⽂件上传时⾮常粗暴的检测了jsp的标签，利⽤特
殊的编码即可造成降维打击，随便绕过。 
3. 绕过⿊名单检测 
                }
            }
        }
    }
36
37
38
39
6
这⾥也是⽐较有意思的⼀步，模拟了⼀个端上暴⼒webshell查杀引擎。 
常⻅的webshell关键字都会被拦截，其他的⼀些编码如unicode，html实体，cdata拆分也都加了关键
字。并且加了⽂件类关键字，防⽌⼆次写⽂件进⾏绕过。甚⾄拦截了request对象，禁⽌直接传⼊参
数。 
题⽬的定位为开放性题⽬，其实绕过的办法很多。看到很多wp都是利⽤远程加载class或者jar来完成
rce： 
https://www.anquanke.com/post/id/259487 
https://y4tacker.blog.csdn.net/article/details/121363886 
当时为了降低题⽬难度，环境没有设置不出⽹，并且jdk也是⽐较低的版本。那么如果题⽬设置了不出⽹
环境⼜该怎么利⽤呢？ 
在这⾥提⼀种不出⽹也可利⽤的姿势，利⽤bcel ClassLoader绕过。 
以三梦的github项⽬为例：JSP-Webshells/1.jsp at master · threedr3am/JSP-Webshells 
(github.com) 
bcel字节码webshell的原理在于com.sun.org.apache.bcel.internal.util.ClassLoader在loadClass的时
候会解析并加载bcel字节码。但是题⽬中把loadClass以及newInstance关键字都给封禁了。 
那么问题就变成了如何触发loadClass⽅法 
Plain Text
复制代码
        String[] blackWordsList = {
                //危险关键字
                "newInstance", "Runtime", "invoke", "ProcessBuilder", 
"loadClass", "ScriptEngine",
                "setAccessible", "JdbcRowSetImpl", "ELProcessor", 
"ELManager", "TemplatesImpl", "lookup",
                "readObject","defineClass",
                //写⽂件
                "File", "Writer", "Stream", "commons",
                //request
                "request", "Request",
                //特殊编码也处理⼀下
                "\\u", "CDATA", "&#"
                //这下总安全了吧
        };
1
2
3
4
5
6
7
8
9
10
11
12
13
7
实际上Class.forName在查找类的时候，如果使⽤了三个参数的重载⽅法使⽤⾃定义类加载器，就会调
⽤其类加载器的loadClass⽅法。 
仅仅从源码看不出来这⼀点，forName0经过了⼀层native⽅法。下个断点从堆栈⾥可以看到这⼀过程。 
具体实现如下： 
其中bcel字节码⽣成的代码可以参考三梦师傅的项⽬：https://github.com/threedr3am/JSP-
Webshells/blob/master/jsp/1/BcelEvil.java 
Plain Text
复制代码
1
2
3
4
5
6
8
另外，⿊名单中⼩写的lookup并不是⾮预期，原本的⽅法确实是⼩写。  
绕过是因为很多师傅找到了另⼀个重载⽅法doLookup，这是其中的⼀个预期解。  
很多⼈没有注意到这个静态⽅法。因为⽬前⼏乎所有jndi注⼊⽂章都说到的是第⼀个点lookup，⽽
doLookup这个触发点需要翻看源码才能找到。  
此题⽬为开放性题⽬，姿势很多。出题的本意就是想看看⼤家在遇到市⾯上⼤部分姿势都被ban掉的情
况下会构造出什么有意思的绕过。