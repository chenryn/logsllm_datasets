    ```
    There are two arguments required, `instance` and `token`.
    `instance` refers to the address of your Gitea instance, like `http://192.168.8.8:3000`. The runner and job containers (which are started by the runner to execute jobs) will connect to this address. This means that it could be different from the `ROOT_URL` of your Gitea instance, which is configured for web access. It is always a bad idea to use a loopback address such as `127.0.0.1` or `localhost`, as we will discuss later. If you are unsure which address to use, the LAN address is usually the right choice.
    `token` is used for authentication and identification, such as `P2U1U0oB4XaRCi8azcngmPCLbRpUGapalhmddh23`. It is one-time use only and cannot be used to register multiple runners. You can obtain tokens from `your_gitea.com/admin/runners`.
    After registering, a new file named `.runner` will appear in the current directory. This file stores the registration information. Please do not edit it manually. If this file is missing or corrupted, you can simply remove it and register again.
    Finally, it’s time to start the runner.
    ```bash
    ./act_runner daemon
    ```
* New: [Use the gitea actions.](gitea.md#use-the-gitea-actions)
    Even if Actions is enabled for the Gitea instance, repositories [still disable Actions by default](https://github.com/go-gitea/gitea/issues/23724). Enable it on the settings page of your repository.
    You will need to study [the workflow syntax](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions) for Actions and write the workflow files you want.
    However, we can just start from a simple demo:
    ```yaml
    name: Gitea Actions Demo
    run-name: ${{ gitea.actor }} is testing out Gitea Actions
    on: [push]
    jobs:
      Explore-Gitea-Actions:
        runs-on: ubuntu-latest
        steps:
          - run: echo "The job was automatically triggered by a ${{ gitea.event_name }} event."
          - run: echo "This job is now running on a ${{ runner.os }} server hosted by Gitea!"
          - run: echo "The name of your branch is ${{ gitea.ref }} and your repository is ${{ gitea.repository }}."
          - name: Check out repository code
            uses: actions/checkout@v3
          - run: echo "The ${{ gitea.repository }} repository has been cloned to the runner."
          - run: echo "The workflow is now ready to test your code on the runner."
          - name: List files in the repository
            run: |
              ls ${{ gitea.workspace }}
          - run: echo "This job's status is ${{ gitea.status }}."
    ```
    You can upload it as a file with the extension `.yaml` in the directory `.gitea/workflows/` or `.github/workflows` of the repository, for example `.gitea/workflows/demo.yaml`.
    You may be aware that there are tens of thousands of [marketplace actions in GitHub](https://github.com/marketplace?type=actions). However, when you write `uses: actions/checkout@v3`, it actually downloads the scripts from gitea.com/actions/checkout by default (not GitHub). This is a mirror of github.com/actions/checkout, but it’s impossible to mirror all of them. That’s why you may encounter failures when trying to use some actions that haven’t been mirrored.
    The good news is that you can specify the URL prefix to use actions from anywhere. This is an extra syntax in Gitea Actions. For example:
    * `uses: https://github.com/xxx/xxx@xxx`
    * `uses: https://gitea.com/xxx/xxx@xxx`
    * `uses: http://your_gitea_instance.com/xxx@xxx`
    Be careful, the `https://` or `http://` prefix is necessary!
* New: Import organisations into terraform.
    To import organisations and teams you need to use their `ID`. You can see the ID of the organisations in the Administration panel. To get the Teams ID you need to use the API. Go to https://your.gitea.com/api/swagger#/organization/orgListTeams and enter the organisation name.
* Correction: Give some tip to deal with big diffs.
    Sometimes the `diff` is too big and you need to work with it chuck by chunk. For each change you can either:
    - `chezmoi add ` if you want to keep the changes you've manually made to the files that match the ``.
    - `chezmoi apply ` if you want to apply the changes that chezmoi proposes for the ``.
    Here `` is any directory or file listed in the `diff`.
* New: Add systemd service for the actions runner.
    ```
    [Unit]
    Description=Gitea Actions Runner
    After=network.target
    [Service]
    WorkingDirectory=/var/gitea/gitea/act_runner/main
    ExecStart=/var/gitea/gitea/act_runner/main/act_runner-main-linux-amd64 daemon
    [Install]
    WantedBy=default.target
    ```
* New: [Tweak the runner image.](gitea.md#tweak-the-runner-image)
    The [gitea runner](https://docs.gitea.com/next/usage/actions/act-runner/#labels) uses the `node:16-bullseye` image by default, in that image [the `setup-python` action doesn't work](https://itsthejoker.github.io/gitea_actions_and_python/). You can tweak the docker image that the runner runs by editing the `.runner` file that is in the directory where you registered the runner (probably close to the `act_runner` executable).
    If you open that up, you’ll see that there is a section called labels, and it (most likely) looks like this:
    ```json
    "labels": [
      "ubuntu-latest:docker://node:16-bullseye",
      "ubuntu-22.04:docker://node:16-bullseye",
      "ubuntu-20.04:docker://node:16-bullseye",
      "ubuntu-18.04:docker://node:16-buster"
    ]
    ```
    You can specify any other docker image. Adding new labels doesn't work yet.
* New: Introduce molecule.
    [Molecule](https://github.com/ansible-community/molecule) is a testing tool for ansible roles.
    - [Source](https://github.com/ansible-community/molecule)
    - [Docs](https://molecule.rtfd.io/)
* New: [CI configuration.](molecule.md#ci-configuration)
    Since gitea supports github actions you can use the `setup-molecule` and `setup-lint` actions. For example:
    ```yaml
    ---
    name: Molecule
    "on":
      pull_request:
    env:
      PY_COLORS: "1"
      ANSIBLE_FORCE_COLOR: "1"
    jobs:
      lint:
        name: Lint
        runs-on: ubuntu-latest
        steps:
          - name: Checkout the codebase
            uses: actions/checkout@v3
          - name: Setup Lint
            uses: bec-galaxy/setup-lint@{Version}
          - name: Run Lint tests
            run: ansible-lint
      molecule:
        name: Molecule
        runs-on: ubuntu-latest
        needs: lint
        steps:
          - name: Checkout the codebase
            uses: actions/checkout@v3
          - name: Setup Molecule
            uses: bec-galaxy/setup-molecule@{Version}
          - name: Run Molecule tests
            run: molecule test
    ```
    [That action](https://github.com/bec-galaxy/setup-molecule/blob/main/action.yml) installs the latest version of the packages, if you need to check a specific version of the packages you may want to create your own step or your own action.
* New: [Upgrade to v5.0.0.](molecule.md#to-v5.0.0)
    They've removed the `lint` command, the reason behind is that there are two different testing methods which are expected to be run in very different ways. Linting should be run per entire repository. Molecule executions are per scenario and one project can have even >100 scenarios. Running lint on each of them would not only slowdown but also increase the maintenance burden on linter configuration and the way is called.
    They recommend users to run `ansible-lint` using `pre-commit` with or without `tox. That gives much better control over how/when it is updated.
    You can see an example on how to do this in the [CI configuration section](#ci-configuration).
* Correction: Configure the gitea actions.
    So far there is [only one possible runner](https://gitea.com/gitea/act_runner) which is based on docker and [`act`](https://github.com/nektos/act). Currently, the only way to install act runner is by compiling it yourself, or by using one of the [pre-built binaries](https://dl.gitea.com/act_runner). There is no Docker image or other type of package management yet. At the moment, act runner should be run from the command line. Of course, you can also wrap this binary in something like a system service, supervisord, or Docker container.
    You can create the default configuration of the runner with:
    ```bash
    ./act_runner generate-config > config.yaml
    ```
    You can tweak there for example the `capacity` so you are able to run more than one workflow in parallel.
    Before running a runner, you should first register it to your Gitea instance using the following command:
    ```bash
    ./act_runner register --config config.yaml --no-interactive --instance  --token 
    ```
    Finally, it’s time to start the runner.
    ```bash
    ./act_runner --config config.yaml daemon
    ```
    If you want to create your own act docker, you can start with this dockerfile:
    ```dockerfile
    FROM node:16-bullseye
    LABEL prune=false
    RUN mkdir /root/.aws
    COPY files/config /root/.aws/config
    COPY files/credentials /root/.aws/credentials
    RUN apt-get update && apt-get install -y \
      python3 \
      python3-pip \
      python3-venv \
      screen \
      vim \
      && python3 -m pip install --upgrade pip \
      && rm -rf /var/lib/apt/lists/*
    RUN pip install \
      molecule==5.0.1 \
      ansible==8.0.0 \
      ansible-lint \
      yamllint \
      molecule-plugins[ec2,docker,vagrant] \
      boto3 \
      botocore \
      testinfra \
      pytest
    RUN wget https://download.docker.com/linux/static/stable/x86_64/docker-24.0.2.tgz \
      && tar xvzf docker-24.0.2.tgz \
      && cp docker/* /usr/bin \
      && rm -r docker docker-*
    ```
    It's prepared for:
    - Working within an AWS environment
    - Run Ansible and molecule
    - Build dockers
* New: [Build a docker within a gitea action.](gitea.md#build-a-docker-within-a-gitea-action)
    Assuming you're using the custom gitea_runner docker proposed above you can build and upload a docker to a registry with this action:
    ```yaml
    ---
    name: Publish Docker image
    "on": [push]
    jobs:
      build-and-push:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: https://github.com/actions/checkout@v3
          - name: Login to Docker Registry
            uses: https://github.com/docker/login-action@v2
            with:
              registry: my_registry.org
              username: ${{ secrets.REGISTRY_USERNAME }}
              password: ${{ secrets.REGISTRY_PASSWORD }}
          - name: Set up QEMU
            uses: https://github.com/docker/setup-qemu-action@v2
          - name: Set up Docker Buildx
            uses: https://github.com/docker/setup-buildx-action@v2
          - name: Extract metadata (tags, labels) for Docker
            id: meta
            uses: https://github.com/docker/metadata-action@v4
            with:
              images: my_registry.org/the_name_of_the_docker_to_build
          - name: Build and push
            uses: docker/build-push-action@v2
            with:
              context: .
              platforms: linux/amd64,linux/arm64
              push: true
              cache-from: type=registry,ref=my_registry.org/the_name_of_the_docker_to_build:buildcache
              cache-to: type=registry,ref=my_registry.org/the_name_of_the_docker_to_build:buildcache,mode=max
              tags: ${{ steps.meta.outputs.tags }}
              labels: ${{ steps.meta.outputs.labels }}
    ```
    It uses a pair of nice features:
    - Multi-arch builds
    - [Cache](https://docs.docker.com/build/ci/github-actions/cache/) to speed up the builds
    As it reacts to all events it will build and push:
    - A tag with the branch name on each push to that branch
    - A tag with the tag on tag push
* New: [Bump the version of a repository on commits on master.](gitea.md#bump-the-version-of-a-repository-on-commits-on-master)
    - Create a SSH key for the CI to send commits to protected branches.
    - Upload the private key to a repo or organization secret called `DEPLOY_SSH_KEY`.
    - Upload the public key to the repo configuration deploy keys
    - Create the `bump.yaml` file with the next contents:
        ```yaml
        ---
        name: Bump version
        "on":
          push:
            branches:
              - main
        jobs:
          bump_version:
            if: "!startsWith(github.event.head_commit.message, 'bump:')"
            runs-on: ubuntu-latest
            name: "Bump version and create changelog"
            steps:
              - name: Check out
                uses: actions/checkout@v3
                with:
                  fetch-depth: 0  # Fetch all history
              - name: Configure SSH
                run: |
                    echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
                    chmod 600 ~/.ssh/deploy_key
                    dos2unix ~/.ssh/deploy_key
                    ssh-agent -a $SSH_AUTH_SOCK > /dev/null
                    ssh-add ~/.ssh/deploy_key
              - name: Bump the version
                run: cz bump --changelog --no-verify
              - name: Push changes
                run: |
                  git remote add ssh PI:EMAIL:templates/ansible-role.git
                  git pull ssh main
                  git push ssh main
                  git push ssh --tags
        ```
        It assumes that you have `cz` (commitizen) and `dos2unix` installed in your runner.
* New: [Skip gitea actions job on changes of some files.](gitea.md#skip-gitea-actions-job-on-changes-of-some-files)
    There are some expensive CI pipelines that don't need to be run for example if you changed a line in the `README.md`, to skip a pipeline on changes of certain files you can use the `paths-ignore` directive:
    ```yaml
    ---
    name: Ansible Testing
    "on":
      push:
        paths-ignore:
          - 'meta/**'
          - Makefile
          - README.md
          - renovate.json
          - CHANGELOG.md