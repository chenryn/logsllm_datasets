DESTRUCTURING-BIND表达式并插入得到的值来实现的。每一个DESTRUCTURING-BIND表达式
，如果spec是两项的，那么它将代表一个长形式的调用，其中的两项应当分别是：reader
((t saq: iabazut-paubtsun) () in ad<-reuta-autsap)
但是假设你已经定义了一个二进制类型unsigned-integer，它接受一个:bytés参数来指
和其他二进制格式一样，ID3标签使用的许多基本类型都是同一个主题下的变体，例如一个、
有了这个宏，之前给出的define-binary-type形式将展开成下面的代码：
注意反引用模板是如何嵌套的：最外层的模板以反引用的PROGN形式开始。这个模板由符号
为了同时支持长短两种形式的define-binary-type调用，需要基于spec参数的值来做区
(progn
当然,现在你已经让这个漂亮的宏可用来定义二进制类型了，不过它似乎还是多做了一些事。
progn
(defmethod read-value ((#:gl61887 (eql 
(u7bua1 Aax2 6utras 4no ((6ut1as-I-6588-ost: [ba) 8t9t6:#)) antea-a2tam pouzawsap)
(defmethod read-value ((#:gl618 (eql 'iso-8859-1-string)) in &key length)
(dotimes 
(((ybuet but1s-axew) but1as)) 2at)
read-va
(write-byte (char-code (char string i)) out))))
string))
, (destructuring-bind ((out value) &body body) (rest (assoc :writer spec))
(setf (char string i) (code-char (read-byte in))))
，@body}））））
(defmethod write-value ((,type (eql
value
,@body))
(i 1ength)
unsigned-i
www.TopSage.com
t:g161888
'u1)) #:g161888 &key)
‘u1)）
',name)) ,out ,value &key ,@args)
#:g161888 #:g161889 &key)
24.12 基本二进制类型
287
---
## Page 305
objects*的旧值将被恢复，从而相当于把对象从栈上弹出了。
其赋予新值的。以这种方式的话，在LET形式结束，CALL-NEXT-METHOD返回以后，*in-prOgresS-
对象在调用CALL-NEXT-METHOD之前推送到该变量里。
一开始，你应当定义一个用来保存当前正在读取或写入的对象栈的动态变量。
将是非常有用的。多亏有了动态变量和：around方法，你可以仅用几行代码来添加这一增强特性。
式。在更一般的情况下，当你读写嵌套的复合对象时，能够获得当前正在读写的任何层面的对象
24.13
并随后解析spec来生成可分别用于长短两种形式的适当的展开式。
应当是一个类型说明符，需要有区别地进行处理。你可以使用ECASE在spec的LENGTH上做切换，
和：writer规范，你可以像之前那样处理。另一方面，如果spec只有一项，那么这个唯一的项
288
然后，你可以在read-object和write-object上定义：arouna方法，从而将正在被读写的
在下一章里，你将会用到的最后一点儿功能是在读取和写入过程中获得当前二进制对象的方
(defmethodread-object:around(object stream)
(defvar *in-progress-objects*nil)
(defmacro define-binary-type (name (&rest args)&body spec)
(defmethod write-object:around (object stream)
(declare
(ecase (length spec)
(let
(declare(ignore
(let
(call-next-method)))
(call-next-method)))
(with-gensyms (type)
2
(with-gensyms (type stream value)
(1
当前对象栈
第24章实践：解析二进制文件
(progn
,(destructuring-bind((outvalue)&body body)（rest(assoc :writer spec))
,(destructuring-bind(（in)&body body)
(progn
(defmethod write-value((,type（eql',name)),stream,value&key，@args)
(defmethodwrite-value（(,type（eql
(defmethodread-value（(,type（eql
(write-value
(read-value,derived-from,stream,@derived-args))
,@body）
,@body))
www.TopSage.com
',derived-from
(cons object *in-progress-objects*)))
,stream,value,@derived-args))))))
(rest(assoc :reader spec))
,name））,out,value &key，@args）
,name)），in&key，@args)
,stream&key，@args)
---
## Page 306
代码中。下一章将介绍关于current-binary-object用法的一个例子。
的实例。
函数current-binary-object将返回栈的头部,也就是read-object或write-object最近被
① D3格式并不需要parent-of-type函数，因为它是一个相对扁平的结构。该函数主要用于解析一个带有深层嵌
现在你终于有了用来装备ID3解析库的所有工具，因此你可以进入下一章来做这件事了。
这两个函数可以用于在read-object和write-object调用的动态上下文中被调用的任何
(defun current-binary-object () (first *in-progress-objects*))
定义了这两个方法之后，你还可以写出两个用来获取当前进度栈中特定对象的便利的函数。
(find-if #'(lambda (x) (typep x type)) *in-progress-objects*))
(defun parent-of-type (type)
象并从中得到那个常量池。
正在编写一个类文件解析器，那么可以在读写那些子结构的代码中使用parent-of-type来获得顶层类文件对
含有一个常量池，负贵该该类文件中其他子结构中用到的数值映射到解析这些子结构时所需的常量值上。如果你
套结构的格式时，其解析过程依赖于保存在更高层结构中的信息。例如，在Java类文件格式中，顶层类文件结构
www.TopSage.com
24.13当前对象栈
?
289
---
## Page 307
许多MP3压制程序（它们必须将ID3标签放进MP3文件里）和MP3播放器（它们将解出ID3标签中
空字符之前内容的ID3软件将其忽略。Kemp的版本现在被称为ID3v1，而Mutschler的版本是
段中，用一个空字节使其与评论的其余部分隔开，以便已有的、倾向于读取每个文本字段第一个
一个特定MP3文件的CD音轨号，直到另一个程序员MichaelMutschler提议将音轨号嵌入到评论字
于256种风格，并且风格代码必须被所有ID3敏感的软件的用户认可才行。起初甚至没有办法编码
中添加了另外60种风格。
80个风格代码的标准含义。Nullsoft公司，一个流行的MP3播放器Winamp的发明者，后来又向其
艺术家名和一个评论，一个四字节的年份字段以及一个单字节的风格代码。Kemp提供了对于前
构成，大多数MP3软件都会忽略它。它包括四个30字符的字段，分别用于歌曲标题、专辑标题、
以任何在MP3文件中嵌入信息的方法都必须对MP3解码器不可见。ID3应运而生。
件本身。
的文件共享平台相互传递独立的MP3文件时，他们很快发现需要一种方式将元数据嵌入进MP3文
所关联的文件，那么就不会有太大的问题。不过，当人们开始在Intermet上通过诸如Napster这样
数据。只要你所有的MP3文件都被单一的应用程序所管理，能够将元数据外部保存并跟踪元数据
国际电工技术委员会（IEC）所组成的联合委员会。不过，MP3格式本身只定义了如何保存音频
的研究者们所设计并由Moving Picture Experts Group标准化，后者是由国际标准化组织（ISO）和
下面是关于ID3标签是什么以及它们与MP3文件之间关系的简要介绍。
设计选择的混合体，不管怎么说确实可以满足需要。万一你不了解文件共享领域的革命也不要紧，
对二进制数据处理库的一个好的测试，因为ID3格式是一个真实的文件格式—工程权衡和特定
尽管有上述局限性，但版本1确实提供了一个对于元数据问题的部分解决方案，因此它们被
ID3v1.1。
由于MP3标准已经定案并且相当数量的软件和硬件已经知道如何解析已有的MP3格式了，所
这个格式易于解析但明显带有很多局限性。它没有办法编码长度超过30字符的名字。它受限
最初的ID3格式由程序员Eric Kemp所发明，它由连接到一个MP3文件结尾处的128个字节所
MP3，也称为MPEG AudioLayer3，是一种用来保存压缩的音频数据的格式，由Fraunhofer IIS
第25章
实践：ID3解析器
www.TopSage.com
---
## Page 308
的头部并使用标识符来检测你正在读取的帧的类型。
用来指示帧的其余部分是如何加密的。
2.3中，帧头还含有总长两字节的标志位，以及取决于某个标志位的一个可选的单字节代码，它
名这类简单的文本信息到嵌入的图像。每个帧以一个含有字符标识符和长度的头部开始。在版本
否则，标签数据的其余部分将被划分成多个帧。不同类型的帧保存不同类型的信息，从诸如歌曲
给出了整个标签不包括头部在内的长度。在版本2.3标签里，头部可能还跟有几个扩展头部字段
的影响。
说就是3。修订号字段总是零，因为每一个新的ID3v2规范都在副版本号上跳跃，子副版本始终零。
本，而“修订号”则是规范的子副版本。这样，“主版本”字段对于一个遵守2.3.0规范的标签来
一些标志可以影响整个标签其余部分的解析方式。所谓“主版本”实际上是用来记录规范的副版
面又跟了一个字节，其单独的位被视为标志位。这意味着这些单独标志的含义依赖于规范的版本。
68和51。接下来的两个字节编码了代表当前标签所符合的ID3规范的主版本和修订号。它们的后
的头部开始。这个头部的最初三个字节以ISO-8859-1字符集编码了字符串“ID3”，它们是字节73、
25.1ID3v2标签的结构
持有趣的程度。
意力集中在版本2.2和2.3上，因为它们都已被广泛使用并且互相之间的区别大到了足够让事情保
尚未被广泛采纳，并且相比版本2.3来说，它基本上只是增加了更多不需要的灵活性。我将把注
范中的许多很少被实际使用的特性。对于初学者来说，目前你可以忽略掉整个版本2.4，因为它
尤其是当你想要支持已规范化的所有三个版本时，将需要相当多的工作。不过，你可以忽略掉规
太简单了，而从完全过分工程化的角度来看，ID3v2又太复杂了。实现其规范中的每一处细节，
二进制数据解析库来开发可以读写D3v2标签的代码。或者至少你将有一个合理的开始—ID3v1
放置在一个MP3文件的开始处。
多样的信息，同时几乎没有长度限制。它还利用了MP3格式的特定细节，从而允许将ID3v2标签
开始了设计全新标签模式的工作，其成果后来被称为ID3v2。ID3v2格式极其灵活，允许包含多种
的信息并显示给用户）所采纳。
帧是带有标记的数据结构的一个完美例子。为了知道如何解析一个帧的主体，你需要读取它
不过，ID3v2标签在解析方面相比版本1标签来说是一项挑战。在本章里，你将使用前一章的
① 所谓压制（ripping）是将一张音乐CD中的某支歌曲转化成你硬盘中的一个MP3文件的过程。近年来，大多数压制
可是到了1998年，这些限制已经令人难以忍受了，于是一个由Martin Nilsson领导的新的小组
在开始写代码之前，需要熟悉ID3v2标签的整体结构。标签以一个含有关于整个标签的信息
关于歌曲的信息，然后再以ID3标签的形式嵌入到MP3文件中。
软件也都可以自动地从诸如Gracenote（也就是Compact Disc Database[CDDB]）或FreeDB这些在线数据库中获取
www.TopSage.com
25.1ID3v2 标签的结构
291
---
## Page 309
号整数以及四种字符串。
25.3
名。下面的包定义做到了所有这些事：
用第24章和第15章的二进制数据和路径名的库，并且你也希望导出那些构成该包公共API的函数
25.2
然后读取帧数据，并在读取了标签长度范围内的所有标签或是遇到补白字节的时候停下来。
需重写整个MP3文件。?
取这些帧数据。另外，由标签头所给出的大小可能会超过帧数据的实际字节数，帧后面可能跟有
多大，但由于许多标签都是变长的，因此要找出标签中含有的帧的数量，唯一方法就是实际去读
因此，你面对的主要问题是在读取ID3头部时。检测你正在读取的是版本2.2还是2.3的标签，
292
① 几乎所有的文件系统都具有覆盖一个文件中已有字节的能力，但也有少数文件系统允许在一个文件的开始或中间
首先，你可以定义读写几种ID3格式会用到的基本类型的二进制类型，包括不同长度的无符
和目前你开发的其他库一样，你应该把在本章里编写的代码放进它自己的包里。这里需要引
ID3标签头中没有包含关于一个标签中究竟有多少个帧的直接指示。标签头只告诉你标签有
和往常一样，你可以并且也应该将包名中的com.gigamonkeys部分改成你自己的域。
(defpackage :com.gigamonkeys.id3v2
白，而如果变得更短了就使用更多的补白。
特定数量的补白，你就有机会更好地做到这点。如果新标签带有比最初标签更多的数据，你就可以使用较少的补
标签而不干扰文件的其余部分，你必须将旧标签替换成一个长度完全相同的新标签。通过在写人D3标签时带有
位置添加或删除数据而无需重写文件的其余部分。由于D3标签通常存放在一个文件的开始处，为了重写一个ID3
:translated-genre))
:read-id3
(:export
整数类型
:size
:year
:song
:track
:part-of-set
:artist
:encoding-program
genre
:composer
: album
定义包
第25章实践：ID3解析器
 :com.gigamonkeys.binary-data
: com.gigamonkeys.pathnames)