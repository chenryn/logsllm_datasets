∙ KeyGen(msk, id) takes as input the master secret msk
and an identity id ∈ ID of a user, and outputs a secret
key 𝑠𝑘id and some public information 𝑝id for id. It also
updates the public directory pd to include 𝑝id.3
∙ Enc(pk,ℛ, 𝑚) takes as input the public key pk, a set
ℛ of cardinality ≤ 𝑟 which contains the 𝑝id of each
revoked user in pd, and a plaintext message 𝑚 ∈ ℳ.
It outputs a ciphertext 𝐶 ∈ 𝒞.
∙ Dec(skid, 𝐶) takes as input a secret key skid of a user
with identity id and a ciphertext 𝐶 ∈ 𝒞. It outputs a
plaintext 𝑚 ∈ ℳ.
∙ Trace(pd,ℛ,𝒮,𝒪𝒟) is a black-box confirmation tracing
algorithm that takes as input the public directory pd,
a set ℛ of ≤ 𝑟 revoked users, a set 𝒮 of ≤ 𝑡 suspect
2In [32], a weaker notion of usefulness is considered (leading to a better
security guarantee): the box is considered useful if it distinguishes
between encryptions of two adversarially chosen plaintexts. We note
that our security proof actually handles this weaker usefulness. In fact,
we show in Lemma 3.2 that the notion of usefulness given here implies
that it is possible to efficiently find two plaintexts whose ciphertext
distributions can be distinguished by the decryption box. The rest of
the security proof carries over in an identical way for both usefulness
notions.
3We emphasize that 𝑝id does not need to contain id.
users, and has black-box access to the pirate decoder 𝒟
through the oracle 𝒪𝒟. It outputs an identity id or ⊥.
The correctness requirement is that, with overwhelming
probability over the randomness used by the algorithms, we
have:
∀𝑚 ∈ ℳ,∀id ∈ ID : Dec(skid, Enc(pk,ℛ, 𝑚)) = 𝑚,
for any set ℛ of ≤ 𝑟 revoked users and for any id such that
id /∈ ℛ.
Public Traceability. It is required that, when 𝒮 contains
the set 𝒯 of traitors who produced the pirate decoder 𝒟, then
the id output by the tracing algorithm belongs to 𝒯 . This
requirement is formalized using the following game, denoted
by AD-TT, between an adversary 𝒜 and a challenger:
∙ The challenger runs Setup(1𝜆, 1𝑡, 1𝑟) and gives pk to
𝒜.
∙ Adversary 𝒜 may ask the challenger to add polyno-
mially many users in the system. Adversary 𝒜 may
choose the id’s of the users, but does not obtain the
corresponding skid. Nevertheless, the public directory
pd is updated accordingly.
∙ Adversary 𝒜 is allowed to make up to 𝑡 arbitrary traitor
key queries. It may observe the database pd to choose
its queries in an adaptive way. If it queries id ∈ ID to
the challenger, then:
− If the key for id was previously generated, i.e., if 𝑝id
is found in the database pd, then the challenger re-
sponds with skid. The challenger records the identity
query id in a list 𝒯 .
− Otherwise (i.e., user id is a new user in the system),
the challenger runs KeyGen(msk, id), responds with
skid and updates the directory pd with the public
information 𝑝id for id. The challenger also records
the identity query id in the list 𝒯 .
∙ Adversary 𝒜 is allowed to (adaptively) choose a set ℛ
of up to 𝑟 revoked users in pd. The challenger gives
𝒜 all the corresponding skid. These queries can be
interleaved with extensions of the number of users and
user corruption queries, in an adaptive manner.
∙ Adversary 𝒜 finally produces a pirate decoder 𝒟. It
chooses a suspect set 𝒮 of cardinality ≤ 𝑡 that con-
tains 𝒯 , and sends 𝒮 to the challenger.
∙ The challenger then runs Trace(pd,ℛ,𝒮,𝒪𝒟). The ad-
versary wins if both of the following hold:
− Equation (1) is satisfied for the set of revoked users ℛ
chosen by the adversary (i.e., decoder 𝒟 is useful),
− the execution of Trace outputs ⊥ or outputs an id
that does not belong to 𝒯 with probability ≥ 1/𝜆𝑐.
No probabilistic polynomial-time adversary 𝒜 should be able
to win game AD-TT with non-negligible probability.
Almost Public Traceability. This is the same as public
traceability, except that Trace only outputs the associated
information about the traitors instead of their identities,
namely 𝑝id instead of id. Consequently, the second winning
condition of the adversary should be adapted so that it only
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2281requires the execution of Trace to output a 𝑝id that does not
belong to pd𝒯 , which is the set of all 𝑝id′ for id′ ∈ 𝒯 .
This restriction does not change much the functionality of
the tracing because, from 𝑝id, the authority can immediately
map back to id and the authority can still delegate the tracing
procedure to untrusted parties. On the other side, this variant
may be useful in practice as we do not leak the information
of users in the public directory.
We note that our proposed schemes satisfy the public
traceability instead of the almost public traceability. However,
it is easy to modify them so that they satisfy the latter.
Hereafter, we will not discuss about almost public traceability.
Traitor Tracing Scheme. A traitor tracing scheme is simply
a trace-and-revoke scheme without the capacity of revoking
users. It corresponds to the above definition where the revoked
set is always set to be empty, in the encryption as well as in
the security game.
Semantic Security. The IND-CPA security of a trace-and-
revoke scheme 𝒯 ℛ is defined based on the following game.
∙ The challenger runs Setup(1𝜆, 1𝑡, 1𝑟) and gives the pro-
duced public key pk to the adversary 𝒜. The adversary
may ask the challenger to add polynomially many users
in the system.
∙ The adversary (adaptively) chooses a set ℛ of ≤ 𝑟
revoked users in pd. The challenger gives 𝒜 all the skid
such that 𝑝id ∈ ℛ.
∙ The adversary then chooses two messages 𝑚0, 𝑚1 ∈ ℳ
∙ The challenger samples 𝑏 ←˒ {0, 1} and provides 𝐶𝑚𝑏 ←˒
∙ Finally, the adversary returns its guess 𝑏′ ∈ {0, 1} for
the 𝑏 chosen by the challenger. The adversary wins this
game if 𝑏 = 𝑏′.
of equal length and gives them to the challenger.
Enc(pk,ℛ, 𝑚𝑏) to 𝒜.
The advantage of the adversary is defined as AdvIND-CPA
𝒯 ℛ,𝒜 =
| Pr[𝑏 = 𝑏′]− 1/2|. The scheme 𝒯 ℛ is said semantically secure
if there is no probabilistic polynomial-time adversary 𝒜 that
wins this game with non-negligible advantage.
2.2 Inner Product Functional Encryption
In this section, we define functional encryption for the func-
tionality of inner products over Z𝑝.
Definition 2.2. A functional encryption scheme ℱℰ for
the inner product functionality over Z𝑝 is a tuple ℱℰ =
(ℱℰ.Setup, ℱℰ.KeyGen,ℱℰ.Enc,ℱℰ.Dec) of four probabilis-
tic polynomial-time algorithms with the following specifica-
tions:
∙ ℱℰ.Setup(1𝜆, 1ℓ) takes as input the security parameter
𝜆 and outputs the public key and the master secret
key pair (pk, msk);
∙ ℱℰ.KeyGen(msk, x) takes as input the master secret
key msk and a vector x ∈ Zℓ
𝑝 and outputs the secret
key skx;
∙ ℱℰ.Enc(pk, y) takes as input the public key pk and a
message y ∈ Zℓ
𝑝 and outputs the ciphertext cty;
∙ ℱℰ.Dec(skx, cty) takes as input the secret key of a user
skx and the ciphertext cty, and outputs an element
from Z𝑝 ∪ {⊥}.
The correctness requirement is that, with overwhelming prob-
ability over the randomness used by the algorithms, for
(pk, msk) ←˒ ℱℰ.Setup(1𝜆, 1ℓ) and ∀x, y ∈ Zℓ
𝑝:
ℱℰ.Dec (ℱℰ.KeyGen(msk, x),ℱℰ.Enc(pk, y)) = ⟨x, y⟩ mod 𝑝.
Security of ℱℰ. We consider security of functional encryp-
tion in the standard indistinguishability setting [10].
Definition 2.3. A functional encryption scheme ℱℰ =
(ℱℰ.Setup, ℱℰ.KeyGen,ℱℰ.Enc,ℱℰ.Dec) provides semantic
security under chosen-plaintext attacks (or IND-CPA secu-
rity) if no probabilistic polynomial-time adversary 𝒜 has
non-negligible advantage in the following game:
∙ The challenger runs ℱℰ.Setup(1𝜆, 1ℓ) and the master
public key mpk is given to 𝒜.
∙ The adversary adaptively makes secret key queries to
the challenger. At each query, adversary 𝒜 chooses a
vector x ∈ Zℓ
𝑝 and obtains the corresponding secret key
skx ←˒ ℱℰ.KeyGen(msk, x).
∙ Adversary 𝒜 chooses distinct messages y0, y1 ∈ Zℓ
𝑝
subject to the restriction that, for every vector x
queried in the previous step, it holds that ⟨x, y0⟩ =
⟨x, y1⟩ mod 𝑝 and sends them to the challenger. In re-
sponse, the challenger samples 𝑏 ←˒ {0, 1} and sends
ct⋆ ←˒ ℱℰ.Enc(pk, y𝑏) to 𝒜.
∙ Adversary 𝒜 makes further secret key queries for ar-
bitrary vectors x ∈ Zℓ
𝑝 of its choice. As before, it is
required that ⟨x, y0⟩ = ⟨x, y1⟩ mod 𝑝 for each query x
made by 𝒜.
∙ Adversary 𝒜 eventually outputs a bit 𝑏′ ∈ {0, 1} and
wins if 𝑏′ = 𝑏.
The adversary’s advantage is defined as Adv𝒜(𝜆) := | Pr[𝑏′ =
𝑏] − 1/2|.
The Random-Key Bounded-Collusion Model. In bounded
collusion functional encryption [18], the adversary 𝒜 is re-
stricted to ask at most 𝑄 secret key queries for some fixed
polynomial 𝑄, which is input to the setup algorithm. Addi-
tionally, our application permits an additional weakening of
the security model for inner product functional encryption:
we are only required to show security against an adversary
who first sees arbitrarily many random vectors x ←˒ Zℓ
𝑝, re-
quests secret keys for an adaptively chose subset of them, and
does not make secret key queries after it gets the challenge
ciphertext. The above definition of security against such a
restricted adversary will be called 𝑄-IND-CPA.
2.3 Lattice background
A lattice Λ is a (non-zero) discrete subgroup of R𝑚. A basis
of Λ is a linearly independent set of vectors whose Z-span is
Λ. We recall that the smoothing parameter of Λ is defined as
exp(−𝜋‖̂︀b‖2/𝜎2) ≤ 1 + 𝜀
𝜂𝜀(Λ) = min
𝜎 > 0 :
(︁
∑︁
̂︀b∈̂︀Λ
)︁
,
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2282√
where ̂︀Λ = {̂︀b ∈ SpanR(Λ) : ̂︀b𝑇 · Λ ⊆ Z} refers to the dual
of Λ. Note that if 𝜎 = Ω(
𝜆), we have that there exists
𝜀 = 2−Ω(𝜆) such that 𝜎 ≥ 𝜂𝜀(Z).
For a lattice Λ ⊆ R𝑚, a vector c ∈ R𝑚, and an invertible
Σ ∈ R𝑚×𝑚, we define the Gaussian distribution of parameter
Λ, c, and Σ by 𝐷Λ,Σ,c(b) ∼ 𝜌Σ,c(b) = exp(−𝜋‖Σ−1(b −
c)‖2) for all b ∈ Λ. When Σ = 𝜎I𝑚, we simply write 𝐷Λ,𝜎,c.
Sometimes, for convenience, we use the notation 𝐷Λ+c,Σ as
a shorthand for c + 𝐷Λ,Σ,−c.
For 𝑚 ≥ 𝑛 and a rank-𝑛 matrix X ∈ R𝑚×𝑛, denote 𝑈X =
{‖Xu‖ : u ∈ R𝑛,‖u‖ = 1}. The least singular value of
X is then defined as 𝑠𝑛(X) := inf(𝑈X) and similarly the
largest singular value of X is 𝑠1(X) := sup(𝑈X). For a matrix
Y ∈ R𝑛′×𝑚′
with 𝑛′ > 𝑚′, the least singular value and the
largest singular value are defined as 𝑠1(Y) := 𝑠1(Y𝑡) and
𝑠𝑚′ (Y) := 𝑠𝑚′ (Y𝑡) respectively.
For the rest of this section, we assume that lattices are
full-rank, i.e., the dimensions of the span and the ambient
space match.
Lemma 2.4 (Corollary 2.8 in [16]). Let Λ′ ⊆ Λ ⊆ R𝑚
be two lattices with the same dimension. Let 𝜀 ∈ (0, 1/2).
Then for any c ∈ R𝑚 and any Σ such that 𝑠𝑚(Σ) ≥ 𝜂𝜀(Λ′),
the distribution 𝐷Λ,Σ,c mod Λ′ is within statistical distance
2𝜀 from the uniform distribution over Λ/Λ′.
√
Lemma 2.5 (Lemma 1 in [21]). Let 𝑟 ≥ Ω(
𝜆) and
𝑞, ℓ, 𝑚 > 0 integers. Let b ∈ Z𝑚
𝑞 be arbitrary and x cho-
sen from 𝐷Z𝑚,𝑟. Then for any V ∈ Zℓ×𝑚 and positive real
𝑟′ > 𝑠1(V), there exists a probabilistic polynomial-time algo-
rithm ReRand(V, b + x, 𝑟, 𝑟′) that outputs b′ = Vb + x′ ∈ Zℓ
where x′ is within statistical distance 2−Ω(𝜆) from 𝐷Zℓ,2𝑟𝑟′ .
We use the following variant of the leftover hash lemma,
𝑞
adapted from [28] (see also Lemma 11 in [4]).
Lemma 2.6 ([28]). Let 𝑚 ≥ 𝑛 ≥ 1 and 𝑞 = 𝑝𝑘 for 𝑝
prime and 𝑘 ≥ 1. Take 𝒳 a distribution over Z𝑚. Let 𝐷0
be a uniform distribution over Z𝑛×𝑚
𝑞 and 𝐷1 be the
distribution of (A, A · x), where sampling A ←˒ Z𝑛×𝑚
and
x ←˒ 𝒳 . Then,
× Z𝑛
𝑞
𝑞
⎯⎸⎸⎷ 𝑘∑︁
𝑖=1
∆(𝐷0, 𝐷1) ≤ 1
2
𝑝𝑖·𝑛 · Pr𝑖.