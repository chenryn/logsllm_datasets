### 优化后的文本

#### 第四步
调用 `RtlpExecuteHandlerForUnwind` 函数，将异常登记结构中的处理函数作为参数传递。具体调用方式如下：
```c
nDisposition = RtlpExecuteHandlerForUnwind(
    pExceptionRecord, 
    pExceptionRegistrationRecord, 
    &context, 
    &DispatcherContext, 
    pExceptionRegistrationRecord->handler
);
```
`RtlpExecuteHandlerForUnwind` 函数与 `RtlpExecuteHandlerForException` 类似，主要区别在于它先将处理内嵌异常的函数地址赋给 EDX 寄存器，然后进入 `ExecuteHandler` 函数。`ExecuteHandler` 内部会调用 `ExecuteHandler2`，后者再调用实际的异常处理函数（如 `_uraw_seh_handler`）。当异常处理函数返回时，表示该函数的展开工作已完成。

#### 第五步
调用 `RtlpUnlinkHandler(pExceptionRegistrationRecord)` 将刚刚完成展开的异常处理器从 FS:[0] 链条中移除。

#### 第六步
取出下一个异常登记结构并返回到第四步，直到遇到由 `pTargetFrame` 参数指定的记录，此时展开操作结束。

#### 第七步
调用 `ZwContinue(Context, FALSE)` 恢复到 `Context` 结构中指定的状态，并继续执行。如果执行成功，程序将跳转到 `ulTargetIpAddress` 参数所指定的地址（即 `__ret_label` 标号），从而返回到 `_global_unwind2` 函数。

全局展开结束后，FS:[0] 指向声明愿意处理异常的登记结构。接下来，`_except_handler3` 函数将该结构中记录的 EBP 值（即 `_EXCEPTION_REGISTRATION` 结构的 `_ebp` 字段）设置到 EBP 寄存器中，恢复栈帧到异常处理器对应的栈帧。例如，对于我们的例子，栈将恢复到 `main` 函数的栈帧，FS:[0] 链条也恢复到 `main` 函数调用 `FuncFoo` 之前的状态。此时的状态与 `main` 函数中发生异常需要执行异常处理块的情况相同。然后，`_except_handler3` 函数会调用异常处理块，即执行 `pRegistrationFrame->scopetable[trylevel].lpfnHandler()`。异常处理块结束后，程序自然地进入所属的函数，而不会再返回到 `_except_handler3` 函数。对于我们的例子，在 `main` 函数的异常处理块（第 43 行）执行后，程序将继续执行第 46 行和第 47 行。

### 局部展开（Local Unwind）

每个异常处理器在收到展开调用后，应完成其管理范围内的清理和善后工作。由于 VC 为每个使用 SEH 的函数注册了一个异常处理器，这意味着一个处理器的管理范围是其负责的那个函数。相对于全局展开需要遍历 FS:[0] 链条依次调用多个异常处理器，我们将每个异常处理器收到全局展开调用后在其范围内进行的清理工作称为局部展开。因为 `RtlUnwind` 会从 FS:[0] 链条注销被展开的登记结构（即上述第五步），所以局部展开时不需要注销自己的登记结构。

概括来讲，局部展开主要完成以下两项任务：

1. **遍历范围表**：遍历范围表（`scopetable`）中属于被展开范围的各个表项，检查是否有终结处理块（如 `__try{}__finally` 结构的 `finally` 块）需要执行。
2. **对象展开**：对于 C++ 程序，调用被展开范围内还存活的对象的析构函数。C++ 标准规定，当栈被展开时，异常发生时仍然存活的对象的析构函数应该被调用。这一操作通常被称为对象展开（Object Unwind）。

我们将在下一节讨论 `__try{}__finally` 结构。现在来看对象展开，如清单 24-17 所示的 `SehUwObj` 程序。如果不带任何命令行参数执行 `SehUwObj`，那么 `argc = 1`，这会让 `main` 函数使用参数 `n = 0` 调用 `FuncObjUnwind` 函数，在第 23 行会发生一个除零异常。这时，第 20 行实例化的 `bug0` 对象依然有效（存活），而 `bug1` 对象还未创建。按照 C++ 标准，当栈展开时应该调用 `CBug` 的析构函数来析构 `bug0` 对象。

#### 清单 24-17：演示对象展开的 `SehUwObj` 程序
```cpp
#include "stdafx.h"
#include <stdio.h>

class CBug {
public:
    CBug(int n) : m_nIndex(n) { printf("Bug %d constructed\n", m_nIndex); }
    ~CBug() { printf("Bug %d deconstructed\n", m_nIndex); }
protected:
    int m_nIndex;
};

int FuncObjUnwind(int n) {
    CBug bug0(0);
    __try {
        n = 1 / n; // n=0 时会触发除零异常
    } __except(EXCEPTION_CONTINUE_SEARCH) {
        CBug bug1(1);
        n = 0x122;
    }
    return n;
}

int main(int argc, char* argv[]) {
    __try {
        printf("FuncObjUnwind got %x!\n", FuncObjUnwind(argc - 1));
    } __except(printf("Filter in main\n"), EXCEPTION_EXECUTE_HANDLER) {
        printf("Handling block in main\n");
    }
    return 0;
}
```

在 VC6 中编译以上代码，会得到多个 C4509 号警告信息：
```
C:\...\ SehUwObj.cpp(32) : warning C4509: nonstandard extension used: 'FuncObjUnwind' uses SEH and 'bug1' has destructor
```
这个警告告诉我们，`FuncObjUnwind` 函数使用了不属于 C++ 标准的 SEH 扩展（即 `__try` 和 `__except`），并且 `bug1` 对象有析构函数。

接下来还有一个 C2712 号错误：
```
C:\...\ SehUwObj.cpp(34) : error C2712: Cannot use __try in functions that require object unwinding
```
这个错误明确地告诉我们，不可以在需要对象展开的函数中使用 `__try{}__except()` 扩展结构。根据 MSDN 的建议，解决方法之一是使用 C++ 的 `try{}catch()` 结构。

如果在项目属性中不启用 C++ 异常处理（Project > Settings > C++ > 选取 C++ Language > 不选中 Enable Exception Handling），则没有上述编译错误，但警告信息仍然存在。执行编译好的程序，结果如下：
```
Bug 0 constructed.
Filter in main.
Handling block in main.
```
这个结果说明，由于第 17 行发生异常，程序直接跳转到第 33 行（`main` 函数）。`FuncObjUnwind` 函数中第 17 行后的代码和 `main` 函数中尚未执行完的 `printf` 函数都被跳过，`Bug0` 对象也没有被析构，这是不符合 C++ 标准的，这也是编译器发出警告信息和错误信息的原因。

综上所述，VC 的 `__try{}__except()` 结构不支持 C++ 标准所规定的对象展开。这主要是因为对象展开需要记录对象的生存范围和析构函数地址等与 C++ 语言相关的信息，而 `__try{}__except()` 结构既可以用于 C 语言，也可以用于 C++ 语言。如果加入大量对 C++ 的支持，会影响使用 C 语言编写的大量系统代码和驱动程序代码的性能。因此，VC 编译器的做法是，如果要支持对象展开，则使用 C++ 的 `try{}catch()` 结构。

事实上，`__try{}__except()` 结构的异常处理函数 `_except_handler3` 会调用名为 `_local_unwind2` 的函数执行局部展开动作。该函数的原型如下：
```c
void _local_unwind2(_EXCEPTION_RECORD * frame, DWORD trylevel)
```
由于不支持对象展开，`_local_unwind2` 的实现较为简单，它只是遍历 `scopetable`，寻找其中的 `__try{}__finally` 块（特征为 `lpfnFilter` 字段为空），找到后执行对应的 `lpfnHandler` 函数（即 `finally` 块），循环的结束条件是遍历整个 `scopetable` 或到达参数 `trylevel` 所指定的块。我们将在下一节详细介绍以上过程。

### 24.7 `__try{}__finally` 结构

在对 `__try{}__except()` 结构有了深入理解后，我们来看一下 Windows 结构化异常处理中的终结处理，即 `__try{}__finally` 结构。我们以一个简单的控制台程序 `SehFinally` 为例（见清单 24-18）。

#### 清单 24-18：`SehFinally` 程序的源代码
```cpp
#include "stdafx.h"
#include <stdio.h>

int SehFinally(int n) {
    __try {
        n = 1 / n;
    } __finally {
        printf("Finally block is executed.\n");
    }
    return n;
}

int main(int argc, char* argv[]) {
    __try { // TryMain
        printf("SehFinally got %d\n", SehFinally(argc - 1));
    } __except(printf("Filter expression in main is evaluated.\n"), EXCEPTION_EXECUTE_HANDLER) {
        printf("Exception handling block is executed.\n");
    }
    return 0;
}
```

观察 `SehFinally` 函数的汇编指令（见清单 24-19），很容易看出编译器使用的编译方法与编译 `__try{}__except` 结构非常类似。实际上，VC 使用统一的数据结构 `scope_entry` 和处理函数 `_except_handler3` 来处理 `__try{}__except` 结构和 `__try{}__finally` 结构。区分这两种结构的方法也非常直观，即 `__try{}__finally` 结构所对应的 `scope_entry` 的 `lpfnFilter` 字段（过滤表达式）为空，也就是说，编译器是把 `__try{}__finally` 结构看作过滤表达式为 `NULL` 的特殊 `__try{}__except` 结构来编译的。具体来说，像把异常处理块编译成函数形式一样，终结块也被编译为一种函数形式，我们不妨将其称为终结块函数。在清单 24-20 中，第 29～32 行便是 `SehFinally` 函数的终结块函数。

#### 清单 24-19：`SehFinally` 函数（发布版本）的反汇编结果
```asm
00401000 55              push    ebp     ; 保护父函数的栈帧基地址
```