The campaign starts with a phishing email including a
link shortened by Bitly, a URL shortening service, pointing
to a web page with the malicious iframe loaded.
In this
case, the victim is tempted to browse the web page in the
phishing email and download and run the trojaned executable
ﬁrefoxupdate prompted from the webpage. The payload
embedded in ﬁrefoxupdate creates a reverse HTTPS backdoor
connecting to the C&C server. The C&C server then sends
a command to launch a dictionary attack. By brute-force
“sudo”, the attacker attempts to gain root privilege. After
failing for a few times, the attacker changes strategies: he/she
sends instructions to the victim to start an FTP client and
download the keylogger shell script, which leverages the
xmodmap in Linux, from the FTP server hosted on the same
IP address. At the same time, the attacker also dumps the
hash ﬁle from /etc/passwd to crack the password oﬄine. In
case that either key logging or the oﬄine cracking succeeds
to gain the password of the root, the attacker can “sudo -i”
to root right away. Then a new user with the name “bad” is
added with root privilege, the malicious payload is renamed
and is set to start automatically whenever system boot up.
Table 6 shows the accuracy 87.7% and false positive rate
0.0024. From Figure 5n, we can easily identify the well-
clustered attack-related community.
5. DISCUSSION
Logging Process. As discussed in Section 4, currently we
capture the logs at diﬀerent levels on a single host. However
in a large-scale enterprise network, it is possible to obtain
logs from diﬀerent hosts. In the future, we could extend
591HERCULE to build a larger (i.e., cross-domain) weighted
graph by creating connections of logs from diﬀerent machines.
We could thus gain a deeper understanding of the attack
propagation behaviors by reconstructing more sophisticated
stories.
Log Correlation. Though shown to be lightweight accord-
ing to the size of log ﬁles (Table 4), our Log Correlation
Module is restricted by the coarse-grained 29 correlation
rules. There are log entries that are inherently related, but
too implicit to be connected by our temporal and semantic
causal analysis. We intend to add more implicit causal re-
lations between the log events by combining the dynamic
analysis of the program behavior with the learning module,
to perform ﬁner-grained attack analysis.
6. RELATED WORK
Log-Based Attack Analysis. Log analysis techniques
have been studied for many years. Assuming that attackers
unintentionally leave footprints in the host system, defend-
ers can discover evidence of the attack by interpreting and
analyzing logs.
A large number of attack detection approaches are based
on analyzing network logs to detect anomalous network be-
haviors. DNS log data is widely used for detecting malicious
domain names (e.g., [6, 7]). Oprea et al. [51] apply a belief
propagation algorithm to DNS log data or web proxy data to
identify suspicious domains. Bailey et al. [10] use raw event
logs to extract higher-level malware behavior — via state
changes rather than system calls — and use hierarchical
clustering to group malwares that have similar classes of
behaviors. Gu et al. [26] leverage network traﬃc to identify
the coordination dialog that occurs during a malware infec-
tion. HERCULE also employs network logs to detect and
track attacks, but unlike these eﬀorts, HERCULE focuses on
correlating the multiple stages of an attack across network
and system layer logs.
Many attack analysis techniques handle system activity
logs. For instance, system audit logs have been used by
several research eﬀorts (e.g., Kim et al. [32], Goel et al. [25],
King et al. [34], Kim et al. [33], and Newsome et al. [46]).
These approaches adopt backward and forward tracking to
ﬁnd the entry point of an attack and determine the damages
inﬂicted to the victim systems. They still focus on individual
logs and thus might not be able to detect attack stages which
occur in logs outside of their focus.
To obtain system-call granularity logging of an attack’s
execution, LEAPS [27] performed heavyweight event log-
ging via Event Tracing for Windows (ETW) [15]. Behavior-
based detections, using higher-level abstractions of malicious
logic, also rely on logging system calls or ﬁne-grained pro-
gram/kernel execution to capture intrinsic malicious behav-
iors [16, 20]. Dolan-Gavitt et al. [23] leverage the hypervisor
to log all virtual address accessing for the signature gener-
ation that can be applied to analyze/detect malware. Lee
et al. [36] perform static and dynamic analysis on applica-
tions to identify unit-level execution instrumentation points.
While such approaches allow for ﬁne-grained causal analysis
of attacks, their substantial runtime overhead might limit
their applicability in real-world production environments.
HERCULE leverages lightweight logs, extracted from gen-
erally available logging mechanisms, to reveal an attack’s
multiple phases.
Statistical-based Intrusion Analysis. Bilge et al. pro-
pose Disclosure [11], which identiﬁes several groups of fea-
tures from NetFlow records (a single log type) to distinguish
C&C channels from benign traﬃc using a Random Forest
algorithm. Rossow et al. develop PROVEX [58], which lever-
ages network-based statistical learning methods to detect
bots in encrypted C&C channels. West et al. [63] combine
blacklist histories with spatial context and trained an SVM
learning model to classify spam emails. Peisert et al. [52]
employ instance-based learning to conduct forensic analysis
of function call sequences. Abad et al. [2] introduce the idea
of multiple log correlation for intrusion detection. Cipriano
et al. [17] develop Nexat, which includes its designed super-
vised machine learning algorithm to learn from attackers’
past behavior and predict the future actions of the attacker.
Kapravelos et al. [31] leverage diﬀerent dimension reduction
and clustering algorithms to perform eﬃcient code similarity
matching to detect evasion attempts of malicious JavaScript.
Perl et al. [55] propose VCCFinder that trains an SVM clas-
siﬁer on C/C++ code databases to detect vulnerabilities
based on features from GitHub metadata. Piro et al. [56]
aim at detecting Sybil attacks in mobile ad hoc networks,
which involves several learning algorithms to analyze the re-
lationship between the radio-equipped nodes. Lee et al. [37]
develop WARNINGBIRD, which leverages logistic regression
with support vector classiﬁcation (SVC), to detect suspicious
URLs in the Twitter stream. Maggi et al. [41] apply the
“special form of Hidden Markov Model” to detect intrusions
using the system calls sequences. Oprea et al. [51] adapt be-
lief propagation on large-scale DNS logs to detect malicious
domains related to the C&C activity. Zhang et al. [65, 66]
predict triggering relationships between network events to
classify and pinpoint malicious network events based on the
validity of the triggering relations. HERCULE combines
unsupervised community detection to extract highly corre-
lated attack-related communities with supervised learning for
edge weight optimization that both isolates malicious/benign
events and also provides insight into the multiple stages of
an attack within communities.
McBoost [54] improves the scalability of malware analysis
by combining multiple classiﬁers to classify packed/unpacked
and malicious/benign executables. Polychronakis et al. [57]
use general machine learning techniques to score the suspi-
ciousness of URLs for further processing. These techniques
complement HERCULE as they can be used to detect the
initially tainted log entries.
Dash et al. [22] develop DroidScribe which leverages Con-
formal Prediction and an SVM to deal with sparse behav-
ior proﬁles in classifying Android malware. Shu et al. [59]
propose constrained agglomerative clustering algorithms to
uncover the attack traces in long system call sequences. Alm-
gren et al. [4] explore the application of active learning on
the intrusion detection. Besides the out-performance of ac-
tive learning over traditional learning algorithms, their work
shows a signiﬁcant training data reduction required by the
active learners. Amann et al. [5] deploy a summary statis-
tics framework to support user-deﬁned statistics in anomaly
detection. These works deal with one or more speciﬁc prob-
lems in anomaly/attack detection that are complementary
to HERCULE. In contrast, HERCULE focuses on the re-
construction of attack phases, without special attention to
issues about the learning techniques such as sparse behavior
proﬁles, reducing training data size, or long attack traces.
5927. CONCLUSION
We have presented HERCULE, an automated multi-stage
intrusion analysis system, to reconstruct a complete, intu-
itive, and human-understandable attack story from multiple
correlated logs, without the burden of heavyweight logging
process. Our extensive evaluation on a wide spectrum of
diﬀerent real-world APT attacks targeting both Linux and
Windows hosts shows the eﬀectiveness of our technique in
reconstructing the attack stories including diﬀerent infection
strategies, the vulnerabilities exploiting methods, and post
exploitation operations, with high accuracy and low false
positive rate.
8. ACKNOWLEDGMENTS
We thank the anonymous reviewers for their constructive
comments. This research was supported, in part, by DARPA
under contract FA8650-15-C-7562, NSF under award 1409668,
ONR under contract N000141410468, and Cisco Systems
under an unrestricted gift. Any opinions, ﬁndings, and con-
clusions in this paper are those of the authors only and do
not necessarily reﬂect the views of our sponsors.
9. REFERENCES
[1] Target ignored hacker alarms as crooks took 40m credit
cards. www.theregister.co.uk/2014/03/14/
target failed to act on security alerts/, 2014.
[2] C. Abad, J. Taylor, C. Sengul, W. Yurcik, Y. Zhou,
and K. Rowe. Log correlation for intrusion detection: A
proof of concept. In Proceddings of the 19th Annual
Computer Security Applications Conference, 2003.
and analysis of internet malware. In Proceedings of the
10th International Symposium on Research in Attacks,
Intrusions and Defenses, 2007.
[11] L. Bilge, D. Balzarotti, W. Robertson, E. Kirda, and
C. Kruegel. Disclosure: Detecting botnet command and
control servers through large-scale netﬂow analysis. In
Proceedings of the 28th Annual Computer Security
Applications Conference, 2012.
[12] Black vine: Formidable cyberespionage group targeted
aerospace, healthcare since 2012. www.symantec.com/
connect/blogs/black-vine-formidable-cyberespionage-
group-targeted-aerospace-healthcare-2012, 2015.
[13] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and
E. Lefebvre. Fast unfolding of communities in large
networks. Journal of Statistical Mechanics: Theory and
Experiment, 2008.
[14] K. Borders and A. Prakash. Web tap: detecting covert
web traﬃc. In Proceedings of the 11th ACM Conference
on Computer and Communications Security, 2004.
[15] I. Buch and R. Park. Improve debugging and
performance tuning with etw. MSDN Magazine, 2007.
[16] D. Canali, A. Lanzi, D. Balzarotti, C. Kruegel,
M. Christodorescu, and E. Kirda. A quantitative study
of accuracy in system call-based malware detection. In
Proceedings of the 2012 International Symposium on
Software Testing and Analysis, 2012.
[17] C. Cipriano, A. Zand, A. Houmansadr, C. Kruegel, and
G. Vigna. Nexat: A history-based approach to predict
attacker actions. In Proceedings of the 27th Annual
Computer Security Applications Conference, 2011.
[3] Watering hole attack on aerospace ﬁrm exploits
[18] Complimentary Report.
cve-2015-5122 to install isspace backdoor.
researchcenter.paloaltonetworks.com/2015/07/
watering-hole-attack-on-aerospace-ﬁrm-exploits-cve-
2015-5122-to-install-isspace-backdoor/, 2015.
[4] M. Almgren and E. Jonsson. Using active learning in
intrusion detection. In Proceedings of the 17th IEEE
Computer Security Foundations Workshop, 2004.
[5] J. Amann, S. Hall, and R. Sommer. Count me in:
Viable distributed summary statistics for securing
high-speed networks. In Proceedings of the 17th
International Symposium on Research in Attacks,
Intrusions and Defenses, 2014.
[6] M. Antonakakis, R. Perdisci, W. Lee, N. Vasiloglou II,
and D. Dagon. Detecting malware domains at the
upper dns hierarchy. In Proceedings of the 20th
USENIX Security Symposium, 2011.
[7] M. Antonakakis, R. Perdisci, Y. Nadji, N. Vasiloglou II,
S. Abu-Nimeh, W. Lee, and D. Dagon. From
throw-away traﬃc to bots: Detecting the rise of
dga-based malware. In Proceedings of the 21st USENIX
Security Symposium, 2012.
[8] Apt kill chain - part 5 : Access strenghtening and
lateral movements.
http://blog.airbuscybersecurity.com/post/2014/11/
APT-Kill-chain-Part-5-%3A-Access-Strenghtening-
and-lateral-movements, 2014.
[9] Dtl-06282015-01: Apt on taiwan - insight into advances
of adversary ttps. blog.dragonthreatlabs.com/2015/07/
dtl-06282015-01-apt-on-taiwan-insight.html, 2015.
[10] M. Bailey, J. Oberheide, J. Andersen, Z. M. Mao,
F. Jahanian, and J. Nazario. Automated classiﬁcation
www2.ﬁreeye.com/WEB-2015RPTM-Trends.html,
2015.
[19] C. Cortes and V. Vapnik. Support-vector networks.
Mach. Learn., 1995.
[20] J. R. Crandall, G. Wassermann, D. A. de Oliveira,
Z. Su, S. F. Wu, and F. T. Chong. Temporal search:
Detecting hidden malware timebombs with virtual
machines. In The 2006 ACM Sigplan Notices, 2006.
[21] Cylance spear team: A threat actor resurfaces.
blog.cylance.com/spear-a-threat-actor-resurfaces, 2015.
[22] S. K. Dash, G. Suarez-Tangil, S. Khan, K. Tam,
M. Ahmadi, J. Kinder, and L. Cavallaro. Droidscribe:
Classifying android malware based on runtime behavior.
Mobile Security Technologies (MOST), 2016.
[23] B. Dolan-Gavitt, A. Srivastava, P. Traynor, and
J. Giﬃn. Robust signatures for kernel data structures.
In Proceedings of the 16th ACM Conference on
Computer and Communications Security, 2009.
[24] Duke apt group’s latest tools: cloud services and linux
support.
www.f-secure.com/weblog/archives/00002822.html,
2015.
[25] A. Goel, W.-c. Feng, W.-c. Feng, and D. Maier.
Automatic high-performance reconstruction and
recovery. Computer Networks, 2007.
[26] G. Gu, P. A. Porras, V. Yegneswaran, M. W. Fong, and
W. Lee. Bothunter: Detecting malware infection
through ids-driven dialog correlation. In Proceedings of
the 16thth USENIX Security Symposium, 2007.
[27] Z. Gu, K. Pei, Q. Wang, L. Si, X. Zhang, and D. Xu.
593Leaps: Detecting camouﬂaged attacks with statistical
learning guided by program analysis. In Proceedings of
the 45th IEEE/IFIP International Conference on
Dependable Systems and Networks, 2015.
http://www.mathworks.com/help/stats/glmﬁt.html.
[43] Matlab quadratic programming. http://
www.mathworks.com/help/optim/ug/quadprog.html.
[44] P. McCullagh and J. A. Nelder. Generalized linear
[28] Unpatched ﬂash player ﬂaw,more pocs found in
models. CRC press, 1989.
hacking team leak. blog.trendmicro.com/trendlabs-
security-intelligence/unpatched-ﬂash-player-ﬂaws-
more-pocs-found-in-hacking-team-leak/, 2015.
[29] X. Jiang, A. Walters, D. Xu, E. H. Spaﬀord,
F. Buchholz, and Y.-M. Wang. Provenance-aware
tracing of worm break-in and contaminations: A
process coloring approach. In Proceedings of the 26th
IEEE International Conference on Distributed
Computing Systems, 2006.
[30] M. G. Kang, S. McCamant, P. Poosankam, and
D. Song. Dta++: Dynamic taint analysis with targeted
control-ﬂow propagation. In Proceedings of the 18th
Network and Distributed System Security Symposium,
2011.
[31] A. Kapravelos, Y. Shoshitaishvili, M. Cova, C. Kruegel,
and G. Vigna. Revolver: An automated approach to the
detection of evasive web-based malware. In Proceedings
of the 22nd USENIX Security Symposium, 2013.
[32] C. H. Kim, J. Rhee, H. Zhang, N. Arora, G. Jiang,
X. Zhang, and D. Xu. Introperf: transparent
context-sensitive multi-layer performance inference
using system stack traces. In Proceedings of the 2014
ACM International Conference on Measurement and
Modeling of Computer Systems, 2014.
[33] T. Kim, X. Wang, N. Zeldovich, and M. F. Kaashoek.
Intrusion recovery using selective re-execution. In
Proceedings of the 9th USENIX Symposium on
Operating Systems Design and Implementation, 2010.
[34] S. T. King, Z. M. Mao, D. G. Lucchetti, and P. M.
Chen. Enriching intrusion alerts through multi-host
causality. In Proceedings of the 12th Network and
Distributed System Security Symposium, 2005.
[35] C. Kolbitsch, P. M. Comparetti, C. Kruegel, E. Kirda,
X. Zhou, and X. Wang. Eﬀective and eﬃcient malware
detection at the end host. In Proceedings of the 18th
Conference on USENIX Security Symposium, 2009.
[36] K. H. Lee, X. Zhang, and D. Xu. High accuracy attack
provenance via binary-based execution partition. In
Proceedings of the 20th Network and Distributed System
Security Symposium, 2013.
[37] S. Lee and J. Kim. Warningbird: Detecting suspicious
urls in twitter stream. InProceedings of the 19th
Network and Distributed System Security Symposium,
2012.
[38] Libsvm. https://www.csie.ntu.edu.tw/˜cjlin/libsvm/.
[39] Louvain community detection api in python.
http://perso.crans.org/aynaud/communities/api.html.
[40] S. Ma, X. Zhang, and D. Xu. Protracer: Towards
practical provenance tracing by alternating between
logging and tainting. In Proceedings of the 2016
Network and Distributed System Security Symposium,
2016.
[41] F. Maggi, M. Matteucci, and S. Zanero. Detecting
intrusions through system call sequence and argument
analysis. IEEE Transactions on Dependable and Secure
Computing, 2010.
[42] Matlab glmﬁt.
[45] Nessus vulnerability scanner. http://www.tenable.com/
products/nessus-vulnerability-scanner.
[46] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature generation
of exploits on commodity software. In Proceedings of
the 12th Network and Distributed System Security
Symposium, 2005.
[47] Operation clandestine fox now attacking windows xp
using recently discovered ie vulnerability.
www.ﬁreeye.com/blog/threat-research/2014/05/
operation-clandestine-fox-now-attacking-windows-xp-
using-recently-discovered-ie-vulnerability.html, 2014.
[48] Operation deputydog: Zero-day (cve-2013-3893) attack
against japanese targets. www.ﬁreeye.com/blog/threat-
research/2013/09/operation-deputydog-zero-day-cve-
2013-3893-attack-against-japanese-targets.html, 2013.
[49] Operation russiandoll: Adobe & windows zero-day
exploits likely leveraged by russia’s apt28 in
highly-targeted attack. www.ﬁreeye.com/blog/threat-
research/2015/04/probable apt28 useo.html, 2015.
[50] Operation tropic trooper: Old vulnerabilities still pack
a punch. blog.trendmicro.com/trendlabs-security-
intelligence/operation-tropic-trooper-old-
vulnerabilities-still-pack-a-punch/, 2015.
[51] A. Oprea, Z. Li, T.-F. Yen, S. Chin, and S. Alrwais.
Detection of early-stage enterprise infection by mining
large-scale log data. In Proceedings of the 45th
IEEE/IFIP International Conference on Dependable
Systems and Networks, 2015.
[52] S. Peisert, M. Bishop, S. Karin, and K. Marzullo.
Analysis of computer intrusions using sequences of
function calls. IEEE Transactions on Dependable and
Secure Computing, 2007.
[53] F. Peng, Z. Deng, X. Zhang, D. Xu, Z. Lin, and Z. Su.
X-force: Force-executing binary programs for security
applications. In Proceedings of the 23rd USENIX
Security Symposium, 2014.
[54] R. Perdisci, A. Lanzi, and W. Lee. Mcboost: Boosting
scalability in malware collection and analysis using
statistical classiﬁcation of executables. In Proceedings
of the 24th Annual Computer Security Applications
Conference, 2008.
[55] H. Perl, S. Dechand, M. Smith, D. Arp, F. Yamaguchi,
K. Rieck, S. Fahl, and Y. Acar. Vccﬁnder: Finding
potential vulnerabilities in open-source projects to
assist code audits. In Proceedings of the 22nd ACM
SIGSAC Conference on Computer and
Communications Security, 2015.
[56] C. Piro, C. Shields, and B. N. Levine. Detecting the
sybil attack in mobile ad hoc networks. In Proceddings
of the 2nd International Conference on Security and
Privacy in Communication Networks, 2006.
[57] M. Polychronakis and N. Provos. Ghost turns zombie:
Exploring the life cycle of web-based malware. 2008.
[58] C. Rossow and C. J. Dietrich. Provex: Detecting
botnets with encrypted command and control channels.
594In Proceedings of the 10th SIG SIDAR Conference on
Detection of Intrusions and Malware & Vulnerability
Assessment. 2013.
[59] X. Shu, D. D. Yao, and N. Ramakrishnan. Unearthing
stealthy program attacks buried in extremely long
execution paths. In Proceedings of the 22nd ACM
Conference on Computer and Communications Security,
2015.
[60] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager,
M. G. Kang, Z. Liang, J. Newsome, P. Poosankam, and
P. Saxena. Bitblaze: A new approach to computer
security via binary analysis. In Proceedings of the 4th
International Conference on Information Systems
Security, 2008.
[61] Targeted attacks against tibetan and hong kong groups
exploiting cve-2014-4114. citizenlab.org/2015/06/
targeted-attacks-against-tibetan-and-hong-kong-
groups-exploiting-cve-2014-4114/, 2015.
[62] V. Total. Virustotal-free online virus, malware and url
scanner, 2012.
[63] A. G. West, A. J. Aviv, J. Chang, and I. Lee. Spam
mitigation using spatio-temporal reputations from
blacklist history. In Proceedings of the 26th Annual
Computer Security Applications Conference, 2010.
[64] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda.
Panorama: capturing system-wide information ﬂow for
malware detection and analysis. In Proceedings of the
14th ACM Conference on Computer and
Communications Security, 2007.
[65] H. Zhang, D. D. Yao, and N. Ramakrishnan. Detection
of stealthy malware activities with traﬃc causality and
scalable triggering relation discovery. In Proceedings of
the 9th ACM symposium on Information, computer and
communications security, 2014.
[66] H. Zhang, D. D. Yao, N. Ramakrishnan, and Z. Zhang.
Causality reasoning about network events for detecting
stealthy malware activities. computers & security, 2016.
595