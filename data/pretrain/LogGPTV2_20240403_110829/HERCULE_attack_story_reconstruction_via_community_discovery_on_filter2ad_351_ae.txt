### Campaign Overview

The campaign initiates with a phishing email containing a Bitly-shortened URL, which directs the recipient to a web page hosting a malicious iframe. The victim is lured into visiting this web page, where they are prompted to download and execute a trojanized Firefox update executable. This payload establishes a reverse HTTPS backdoor, connecting to the Command and Control (C&C) server. The C&C server then commands the backdoor to launch a dictionary attack, attempting to gain root privileges via brute-forcing the "sudo" command. If the initial attempts fail, the attacker shifts tactics, instructing the victim to start an FTP client and download a keylogger shell script from an FTP server hosted on the same IP address. The keylogger leverages `xmodmap` in Linux to capture keystrokes. Concurrently, the attacker extracts the hash file from `/etc/passwd` to crack passwords offline. If either the keylogging or offline cracking succeeds, the attacker can use `sudo -i` to escalate to root. Once root access is achieved, the attacker creates a new user named "bad" with root privileges, renames the malicious payload, and sets it to run automatically on system boot.

### Table 6: Accuracy and False Positive Rate
- **Accuracy:** 87.7%
- **False Positive Rate:** 0.0024

**Figure 5n** clearly illustrates the well-clustered attack-related community.

### 5. Discussion

#### Logging Process
As discussed in Section 4, our current approach captures logs at different levels on a single host. In a large-scale enterprise network, logs can be obtained from multiple hosts. Future work could extend HERCULE to build a larger, cross-domain weighted graph by correlating logs from different machines. This would provide a deeper understanding of attack propagation behaviors and enable more sophisticated story reconstruction.

#### Log Correlation
Although our Log Correlation Module is lightweight (as shown in Table 4), it is currently limited by 29 coarse-grained correlation rules. Some log entries are inherently related but too implicit to be connected by our temporal and semantic causal analysis. We plan to enhance the module by incorporating dynamic program behavior analysis and machine learning to identify finer-grained causal relationships between log events.

### 6. Related Work

#### Log-Based Attack Analysis
Log analysis techniques have been studied for many years. By interpreting and analyzing logs, defenders can discover evidence of attacks, as attackers often leave footprints in the host system.

Many approaches focus on network logs to detect anomalous behaviors. For example, DNS log data is widely used to identify malicious domain names [6, 7]. Oprea et al. [51] apply a belief propagation algorithm to DNS and web proxy logs to detect suspicious domains. Bailey et al. [10] use raw event logs to extract higher-level malware behavior through state changes and hierarchical clustering. Gu et al. [26] leverage network traffic to identify coordination dialog during malware infections. HERCULE also uses network logs but focuses on correlating multiple attack stages across both network and system layer logs.

System activity logs have been used in several research efforts, such as Kim et al. [32], Goel et al. [25], King et al. [34], Kim et al. [33], and Newsome et al. [46]. These approaches use backward and forward tracking to find the entry point of an attack and assess the damage. However, they focus on individual logs and may miss attack stages that occur in other logs.

For fine-grained logging, LEAPS [27] uses Event Tracing for Windows (ETW) [15] for heavyweight event logging. Behavior-based detections, using high-level abstractions of malicious logic, rely on logging system calls or fine-grained program/kernel execution [16, 20]. Dolan-Gavitt et al. [23] use a hypervisor to log all virtual address accesses for signature generation. Lee et al. [36] perform static and dynamic analysis on applications to identify unit-level execution points. While these methods allow for detailed causal analysis, their runtime overhead limits their applicability in real-world environments. HERCULE uses lightweight logs from generally available mechanisms to reveal multiple attack phases.

#### Statistical-Based Intrusion Analysis
Bilge et al. propose Disclosure [11], which distinguishes C&C channels from benign traffic using a Random Forest algorithm on NetFlow records. Rossow et al. develop PROVEX [58], which uses statistical learning to detect bots in encrypted C&C channels. West et al. [63] combine blacklist histories with spatial context and train an SVM model to classify spam emails. Peisert et al. [52] use instance-based learning for forensic analysis of function call sequences. Abad et al. [2] introduce multiple log correlation for intrusion detection. Cipriano et al. [17] develop Nexat, which uses supervised machine learning to predict future attacker actions. Kapravelos et al. [31] use dimension reduction and clustering for efficient code similarity matching to detect JavaScript evasion. Perl et al. [55] develop VCCFinder, which trains an SVM classifier on C/C++ code databases to detect vulnerabilities. Piro et al. [56] aim to detect Sybil attacks in mobile ad hoc networks using various learning algorithms. Lee et al. [37] develop WARNINGBIRD, which uses logistic regression with support vector classification to detect suspicious URLs. Maggi et al. [41] apply a special form of Hidden Markov Model to detect intrusions using system call sequences. Oprea et al. [51] adapt belief propagation on large-scale DNS logs to detect malicious domains. Zhang et al. [65, 66] predict triggering relationships between network events to classify and pinpoint malicious activities. HERCULE combines unsupervised community detection with supervised learning to isolate malicious/benign events and provide insights into multiple attack stages within communities.

McBoost [54] improves malware analysis scalability by combining multiple classifiers. Polychronakis et al. [57] use general machine learning techniques to score URL suspiciousness. These techniques complement HERCULE by detecting initially tainted log entries.

Dash et al. [22] develop DroidScribe, which uses Conformal Prediction and an SVM to classify Android malware. Shu et al. [59] propose constrained agglomerative clustering algorithms to uncover attack traces in long system call sequences. Almgren et al. [4] explore active learning for intrusion detection, showing significant training data reduction. Amann et al. [5] deploy a summary statistics framework for anomaly detection. These works address specific problems in anomaly/attack detection, complementing HERCULE, which focuses on reconstructing attack phases without specialized learning techniques.

### 7. Conclusion

We have presented HERCULE, an automated multi-stage intrusion analysis system that reconstructs complete, intuitive, and human-understandable attack stories from correlated logs, without the burden of heavyweight logging. Our extensive evaluation on a wide range of real-world APT attacks targeting both Linux and Windows hosts demonstrates the effectiveness of our technique in reconstructing attack stories, including different infection strategies, vulnerability exploitation methods, and post-exploitation operations, with high accuracy and low false positive rates.

### 8. Acknowledgments

We thank the anonymous reviewers for their constructive comments. This research was supported, in part, by DARPA under contract FA8650-15-C-7562, NSF under award 1409668, ONR under contract N000141410468, and Cisco Systems under an unrestricted gift. Any opinions, findings, and conclusions in this paper are those of the authors only and do not necessarily reflect the views of our sponsors.

### 9. References

[References listed as provided, with minor formatting adjustments for consistency]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the technical depth and detail of the original text.