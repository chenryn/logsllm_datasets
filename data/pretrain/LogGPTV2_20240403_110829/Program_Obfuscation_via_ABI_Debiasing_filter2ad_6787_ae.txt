them into classes. While OBJDigger adopts symbolic analysis and
inter-procedural data flow analysis to achieve this, OOAnalyzer,
a more recent tool adopts Prolog-based reasoning combined with
binary and symbolic analysis. OBJDigger tracks the usage and
propagation of the this pointer to identify related methods. Like
OBJDigger, OOAnalyzer first identifies methods called using the
same this pointer and then uses reasoning rules to decide if they
belong to the same class.
TVIP [12] and VTint [28] are defenses against VTable hijacking
attacks. VTint recovers VTables and appends IDs to each of them
to ensure that only valid VTables are used at runtime. Like TVIP,
VTint also ensures that allowable VTables point to read only section
of the binary.
9 CONCLUSION AND FUTURE WORK
In this work we present the notion of ABI Bias which an attacker can
exploit to reverse engineer a binary. Further we classify ABI biases
as sensitive and insensitive. We identify two ABI Biases which are
insensitive to change but give away crucial security information,
VTable ordering bias and function pointer bias. We present the
notion of lingering bias: bias which remains until corrected due
to backwards compatibility. We present an LLVM compiler-based
solution that can eliminate these insensitive and lingering biases.
Our evaluation shows that the techniques introduced have little
impact on the binary size and performance. Finally we argue that
moving forward, the design of ABIs should take these biases and
the information they can introduce into the binary into account.
The insensitive biases we discuss in depth within this paper
are the ones for which we have developed an automated solution.
Future work will focus on other forms of biases we feel are also
insensitive, such as function pointer ordering. We also wish to
investigate possible defenses against Overwrite Analysis, which is
a reverse engineering technique we did not address in this paper.
Finally we would like to explore the information these biases can
reveal about the original source code, potentially including scoping
information which is generally considered lost by the field of reverse
engineering.
ACKNOWLEDGMENTS
We would like to thank our shepherd Zhiqiang Lin and the anony-
mous reviewers for their valuable feedback. This research was
supported in part by Office of Naval Research Awards #N00014-
17-1-2929 and #N6833521C0446, and DARPA award #81192. Any
opinions, findings and conclusions in this paper are those of the
authors and do not necessarily reflect the views of the funding
agencies.
REFERENCES
[1] 2016.
abi/pull/7.
Itanium C++ ABI change.
https://github.com/itanium-cxx-abi/cxx-
[2] 2017. Itanium C++ ABI. http://itanium-cxx-abi.github.io/cxx-abi/abi.html.
[3] Dimitar Bounov, Rami Gökhan Kıcı, and Sorin Lerner. 2016. Protecting C++
dynamic dispatch through vtable interleaving. In Proceedings of the 23rd Annual
Network and Distributed System Security Symposium (NDSS’16).
[4] Mauro Conti, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Marco
Negro, Christopher Liebchen, Mohaned Qunaibit, and Ahmad-Reza Sadeghi.
2015. Losing Control: On the Effectiveness of Control-Flow Integrity Under Stack
Attacks. In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and
Communications Security.
[5] Crispin Cowan, Calton Pu, Dave Maier, Jonathan Walpole, Peat Bakke, Steve
Beattie, Aaron Grier, Perry Wagle, Qian Zhang, and Heather Hinton. 1998. Stack-
Guard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks.
In 7th USENIX Security Symposium (USENIX Security 98).
[6] Mohamed Elsabagh, Dan Fleck, and Angelos Stavrou. 2017. Strict Virtual Call
Integrity Checking for C++ Binaries. In Proceedings of the 2017 ACM on Asia
Conference on Computer and Communications Security.
156ACSAC 21, December 06–10, 2021, Online, ACM, New York, NY USA
David Demicco, Rukayat Erinfolami, and Aravind Prakash
22nd Annual Network and Distributed System Security Symposium (NDSS’15).
A VTABLES IN LLVM-IR
Listing 1: Virtual inheritance dimond structure in LLVM-IR
broken up to show the individual sub-vtables
@\ _ZTV1D = unnamed \ _addr
[5 x i 8 ∗ ] ,
}
[6 x i 8 ∗ ] ,
[5 x i 8 ∗ ]
{
c o n s t a n t
{
[4 x i 8 ∗ ] ,
i 8 ∗
[ i 8 ∗
i 8 ∗
i n t t o p t r
i n t t o p t r
i n t t o p t r
i 8 ∗ null ,
( i 6 4 48 to
[6 x i 8 ∗ ]
i 8 ∗ ) ,
∗ ) ,
,
i 8 ∗ ,
i 6 4
b i t c a s t
@_ZN1D1fEv to i 8 ∗ ) ] ,
i 8 ∗ b i t c a s t
i32 ,
i64 ,
} ∗ @\ _ZTI1D to i 8 ∗ ) ,
( {
i 8 ∗ ,
i 8 ∗
( void (% s t r u c t . D∗ ) ∗
( i 6 4 32 to i 8
( i 6 4 16 to i 8 ∗ )
i 8 ∗ ,
i32 ,
i 8 ∗ ,
[5 x i 8 ∗ ]
i n t t o p t r
(
i 8 ∗
[ i 8 ∗ null ,
i 6 4 16 to i 8 ∗ ) ,
i 6 4 −16 to i 8 ∗ ) ,
i 8 ∗ ,
∗ ,
i 6 4
b i t c a s t
@_ZN1B1gEv to i 8 ∗ ) ] ,
i32 ,
i32 ,
i 8 ∗ ,
} ∗ @\ _ZTI1D to i 8 ∗ ) ,
( void (% s t r u c t . C ∗ ) ∗
i 8 ∗
i n t t o p t r
i 8 ∗ b i t c a s t
i64 ,
i 8 ∗ ,
(
( {
i 8
i 8 ∗
i n t t o p t r
[ i 8 ∗
i 8 ∗
i n t t o p t r
i 8 ∗ b i t c a s t
i32 ,
[4 x i 8 ∗ ]
i 8 ∗ ) ,
i 8 ∗ ) ,
i32 ,
@\ _ZTI1D to i 8 ∗ ) ,
void (% s t r u c t . D∗ ) ∗
@_ZTv0_n24_N1D1fEv to i 8 ∗ ) ] ,
( i 6 4 −32 to
( i 6 4 −32 to
i 8 ∗ ,
( {
i64 ,
i 6 4
} ∗
(
i 8 ∗ b i t c a s t
i 8 ∗ ,
i 8 ∗ ,
i 8 ∗ ,
[5 x i 8 ∗ ]
[ i 8 ∗ null ,
i 6 4 −16 to i 8 ∗ ) ,
i 6 4 −48 to i 8 ∗ ) ,
i 8 ∗ ,
i 6 4
∗ ,
b i t c a s t
@_ZN1C1gEv to i 8 ∗ ) ]
i32 ,
i32 ,
i 8 ∗ ,
} ∗ @\ _ZTI1D to i 8 ∗ ) ,
( void (% s t r u c t . C ∗ ) ∗
i n t t o p t r
i 8 ∗
i 8 ∗
i n t t o p t r
i 8 ∗ b i t c a s t
i64 ,
i 8 ∗ ,
(
(
( {
i 8
i 8 ∗
} ,
a l i g n 8
...
[n.d.].
[7] Rukayat Ayomide Erinfolami and Aravind Prakash. 2019. DeClassifier: Class-
Inheritance Inference Engine for Optimized C++ Binaries. In Proceedings of
the 2019 ACM Asia Conference on Computer and Communications Security (Asi-
aCCS’19).
[8] Rukayat Ayomide Erinfolami and Aravind Prakash. 2020. Devil is Virtual: Re-
versing Virtual Inheritance in C++ Binaries. In Proceedings of the 2020 ACM
SIGSAC Conference on Computer and Communications Security (Virtual Event,
USA) (CCS ’20). Association for Computing Machinery, New York, NY, USA,
133–148. https://doi.org/10.1145/3372297.3417251
[9] Reza Mirzazade Farkhani, Saman Jafari, Sajjad Arshad, William Robertson, Engin
Kirda, and Hamed Okhravi. 2018. On the Effectiveness of Type-based Control
Flow Integrity. In Proceedings of the 34th Annual Computer Security Applications
Conference (ACSAC’18).
[10] A. Fokin, E. Derevenetc, A. Chernov, and K. Troshina. 2011. SmartDec: Ap-
proaching C++ Decompilation. In Reverse Engineering (WCRE), 2011 18th Working
Conference on.
[11] A. Fokin, K. Troshina, and A. Chernov. 2010. Reconstruction of Class Hierarchies
for Decompilation of C++ Programs. In 2010 14th European Conference on Software
Maintenance and Reengineering. 240–243.
[12] Robert Gawlik and Thorsten Holz. 2014. Towards Automated Integrity Protection
of C++ Virtual Function Tables in Binary Programs. In Proceedings of 30th Annual
Computer Security Applications Conference (ACSAC’14).
CXX-ABI-Dev mail archives.
https://www.mail-archive.com/PI:EMAIL/index.html.
[13] CXX-ABI Discussion Group.
[14] Istvan Haller, Enes Göktaş, Elias Athanasopoulos, Georgios Portokalidis, and Her-
bert Bos. 2015. ShrinkWrap: VTable Protection without Loose Ends. In Proceedings
of the 31st Annual Computer Security Applications Conference (ACSAC’15).
[15] Dongseok Jang, Zachary Tatlock, and Sorin Lerner. 2014. SafeDispatch: Securing
C++ Virtual Calls from Memory Corruption Attacks. In Proceedings of 21st Annual
Network and Distributed System Security Symposium (NDSS’14).
[16] Wesley Jin, Cory Cohen, Jeffrey Gennari, Charles Hines, Sagar Chaki, Arie
Gurfinkel, Jeffrey Havrilla, and Priya Narasimhan. 2014. Recovering C++ Objects
From Binaries Using Inter-Procedural Data-Flow Analysis. In Proceedings of ACM
SIGPLAN on Program Protection and Reverse Engineering Workshop (PPREW’14).
[17] Pascal Junod, Julien Rinaldini, Johan Wehrli, and Julie Michielin. 2015. Obfuscator-
LLVM – Software Protection for the Masses. In Proceedings of the IEEE/ACM 1st
International Workshop on Software Protection, SPRO’15, Firenze, Italy, May 19th,
2015, Brecht Wyseur (Ed.). IEEE, 3–9. https://doi.org/10.1109/SPRO.2015.10
[18] Omer Katz, Noam Rinetzky, and Eran Yahav. 2018. Statistical Reconstruction of
Class Hierarchies in Binaries. In Proceedings of the 23rd International Conference
on Architectural Support for Programming Languages and Operating Systems
(ASPLOS’18).
[19] Byoungyoung Lee, Chengyu Song, Taesoo Kim, and Wenke Lee. 2015. Type
casting verification: Stopping an emerging attack vector. In 24th USENIX Security
Symposium (USENIX Security 15).
[20] Nathan Burow and Derrick McKee and Scott A. Carr and Mathias Payer. 2018.
CFIXX: Object Type Integrity for C++ Virtual Dispatch. In Proceedings of the 25th
Annual Network and Distributed System Security Symposium (NDSS’18).
[21] Andre Pawlowski, Moritz Contag, Victor van der Veen, Chris Ouwehand,
Thorsten Holz, Herbert Bos, Elias Athanasopoulos, and Cristiano Giuffrida. 2017.
MARX : Uncovering Class Hierarchies in C++ Programs. In Proceedings of the
24th Annual Network and Distributed System Security Symposium.
[22] Pawlowski, Andre and van der Veen, Victor and Andriesse, Dennis and van
der Kouwe, Erik and Holz, Thorsten and Giuffrida, Cristiano, and Bos, Herbert.
2019. VPS: Excavating High-Level C++ Constructs from Low-Level Binaries
to Protect Dynamic Dispatching. In Proceedings of the 35th Annual Computer
Security Applications Conference (ACSAC’19).
[23] Aravind Prakash, Xunchao Hu, and Heng Yin. 2015. vfGuard: Strict Protection for
Virtual Function Calls in COTS C++ Binaries. In Proceedings of the 22nd Annual
Network and Distributed System Security Symposium (NDSS’15).
[24] Edward J. Schwartz, Cory F. Cohen, Michael Duggan, Jeffrey Gennari, Jeffrey S.
Havrilla, and Charles Hines. 2018. Using Logic Programming to Recover C++
Classes and Methods from Compiled Executables. In 2018 ACM SIGSAC Conference
on Computer and Communications Security.
[25] Felix Shuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-reza
Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-oriented Programming,
On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In
Proceedings of 36th IEEE Symposium on Security and Privacy (Oakland’15).
[26] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-
Flow Integrity in GCC & LLVM. In Proceedings of 23rd USENIX Security Symposium
(USENIX Security’14).
[27] Chao Zhang, Scott A Carr, Tongxin Li, Yu Ding, Chengyu Song, Mathias Payer,
and Dawn Song. 2016. VTrust: Regaining Trust on Virtual Calls. In Proceedings of
the 23rd Annual Network and Distributed System Security Symposium (NDSS’16).
[28] Chao Zhang, Chengyu Song, Zhijie Kevin Chen, Zhaofeng Chen, and Dawn Song.
2015. VTint: Defending Virtual Function Tables’ Integrity. In Proceedings of the
157