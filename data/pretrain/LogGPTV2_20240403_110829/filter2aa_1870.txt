Inceptor
Bypass AV/EDR solutions combining well known techniques
1
Copyright © 2021 Alessandro Magnosi. All rights reserved
Version 1.0
Alessandro Magnosi (@klezVirus)
Copyright © 2021 Alessandro Magnosi. All rights reserved
WhoAmI
Senior Security Noob
● Red Teamer, Code Reviewer…
What I do the most:
●
Mostly.. I spend my time fixing things my kid breaks
●
Beatboxing(-ish!?) till my wife wants to kill me
●
Drink coffee… while coding
2
GitHub: @klezVirus
Twitter: @klezVirus
Ok, what we’ll see?
AV Essentials
❖AV Features
❖Defender
❖Bypass Techniques
EDR Essentials
❖Win32 API Overview
❖EDR Features
❖Bypass Techniques
Inceptor: a framework to bypass them all (hopefully)!
3
“
“First, solve the problem. Then, write 
the code.” – John Johnson
4
5
AV Essentials
AV Components
6
DECOMPRESSORS
Decompressors are 
responsible of decompressing 
archives to allow the scanner 
to analyse them
SCANNERS
The scanner is responsible of 
analysing files stored in the 
file system. There are also on-
access scanners, or real-time 
scanners (AMSI)
UNPACKERS
Unpackers need to 
automatically detect and 
unpack code packed with 
known packers and allow the 
scanner to analyse them
SANDBOX
The sandbox is responsible of 
emulating the program in a 
virtualised environment, to 
detect suspicious activities 
(behavioural)
Static Scanner
◇ Static Analysis
◇ Blacklist approach 
◇ Signature based on 
particular code or data 
◇ AV holds a database of 
signatures
◇ Usually combined with 
heuristic and dynamic 
analysis. 
Sandbox
◇ Runtime analysis performed 
in a Virtual environment
◇ The analysis is subjected to 
certain limits:
o
Time
o
Virtualized APIs
o
Sandbox capabilities
Real-Time Scanner (AMSI)
◇ In-memory static analysis
◇ Scan performed injecting
`amsi.dll` within a process
address space
◇ Scan run against WSH, 
PowerShell, .NET 4.8+, UAC, 
JavaScript, VBScript and 
Office VBA 
7
AV Components
What we need to bypass and 
when?
8
What we need to bypass and 
when?
9
Native 
Executable
.NET 
Executable
PowerShell 
Script
Static Scanner (Signatures)
Real-Time Scanner (AMSI)
Sandboxing (Behavioural)
Obfuscation
The code is obfuscated to break signatures.
◇ Chameleon
◇ Chimera
◇ Invoke-Obfuscation
Evading AMSI (PowerShell)
Patching
Amsi.dll is modified in-memory to break 
the scan.
◇ Amsi Fail
10
Whenever a PowerShell process starts or a .NET assembly is loaded into memory, the Anti-Malware Scan 
Interface (AMSI) is used to scan the binary in memory and anything passed to it as a parameter.
AMSI is conceptually not different from a regular FS scanning engine, with the exception that it scans “in-
memory”. This means that the AMSI scanner is still based on signatures, and as such, it can be bypassed.
11
This is achieved by patching the opcode of AMSI.dll during runtime. Specifically, the opcode to change lies in the 
AmsiScanBuffer pointer address at an offset of 27 as illustrated below.
Here, the general purpose register – r8d – holds the value of the “length” parameter. This value would then be 
copied over to the EDI register for further processing. However, if the opcode is changed as below…
The patched instruction, “xor edi edi”, would result in the EDI register being set to zero instead of it holding the 
“length” parameter value. As such, AMSI would assume that any strings send to AmsiScanBuffer() would have a 
length of zero, resulting in AMSI being effectively disabled.
Evading AMSI (Patching)
12
Evading AMSI (Patching)
Mimikatz loaded!
13
Evading Signatures
Usually consists in signature detection and manual modifications:
https://github.com/matterpreter/DefenderCheck
Anti-Debug
◇ Non virtualized functions 
(VirtualAllocExNuma, 
fsalloc…)
◇ Filename Checking
◇ Environment checking 
(IsBeingDebugged, DR 
registers…)
◇ Mapped sections hashing
Resource Disruption
◇ One million increments
◇ Crazy allocation 
◇ Overly complex decoding 
algorithms
Logic Deception
◇ Impossible branching (i.e. 
Fetching resources from 
non-existent URLs)
◇ Special conditions (e.g. 
registry values, 
environment variables, …)
14
Evading Sandboxes
15
EDR Essentials
16
Win32 API Primer
The Windows operating system 
exposes APIs in order for applications 
to interact with the system.
The Windows API also forms a 
bridge from “user land” to 
“kernel land” with the famous 
ntdll.dll as the lowest level 
reachable from userland.
17
Win32 API Primer
When
malicious
applications
want
to
interact with the system they will, like other
applications, rely on the APIs exposed. Some
of the more interesting APIs include:
◇ VirtualAlloc: Used to allocate memory
◇ VirtualProtect: Change memory permissions
◇ WriteProcessMemory: Write data to an area of 
memory
◇ CreateRemoteThread: Create a thread in the 
address space of another process
https://github.com/NVISOsecurity/brown-bags/tree/main/DInvoke%20to%20defeat%20EDRs
18
https://github.com/NVISOsecurity/brown-bags/tree/main/DInvoke%20to%20defeat%20EDRs
Kernel32.dll
Win32 API Flow with API 
monitor
19
https://github.com/NVISOsecurity/brown-bags/tree/main/DInvoke%20to%20defeat%20EDRs
20
Win32 API – NTDLL.DLL
NTDLL.dll functions are the last instance called 
before the process switches from user-land to 
kernel-land. 
As such, they are the most likely to be monitored 
for suspicious activities from attackers or malware 
by AV/EDR vendors, and they are typically doing 
exactly that. 
EDR work by injecting a custom DLL-file into every 
new process, installing hooks in all relevant 
ntdll.dll exported functions.
https://github.com/NVISOsecurity/brown-bags/tree/main/DInvoke%20to%20defeat%20EDRs
EDR working (simplified)
https://www.ired.team/offensive-security/defense-evasion/how-to-unhook-a-dll-using-c++
EDR Working (simplified)
https://github.com/NVISOsecurity/brown-bags/tree/main/DInvoke%20to%20defeat%20EDRs
Example of the regular 
(unhooked) function prototype of 
NtAllocateVirtualMemory call 
located in ntdll.dll
Example of the hooked 
function prototype of 
NtAllocateVirtualMemory call 
located in ntdll.dll
EDR Bypass Techniques
Unhooking
Unhooking is a technique working by replacing the ntdll.dll in memory with a fresh copy 
from the filesystem
Repatching
Repatching works by applying a counter patch to the patch previously applied by the EDR
Manual Mapping
This method loads a full copy of the target library file into memory. Any functions can be 
exported from it afterwards
Overload 
Mapping
Similar to the above. The payload stored in memory will be also backed by a legitimate 
file on disk
Syscalls
This technique will map into memory only a specified function extracted from a target 
DLL
PE Memory Layout
Unhooking
https://www.ired.team/offensive-security/defense-evasion/how-to-unhook-a-dll-using-c++
Manual Mapping
https://github.com/NVISOsecurity/brown-bags/tree/main/DInvoke%20to%20defeat%20EDRs
USER32
KERNEL32
NTDLL (Original)
…
NTDLL (Manually mapped)
Syscalls
https://github.com/NVISOsecurity/brown-bags/tree/main/DInvoke%20to%20defeat%20EDRs
Keynote: We can use the same assembly «stub» to call a syscall directly!
Start of syscall signature
Syscall number in EAX
Syscall
P/Invoke
◇ Easy to use
◇ Rapid development 
◇ Will resolve functions statically
◇ Imports in the process IAT
◇ Detectable by IAT hooking and inline 
hooking
C# Tradecraft  
P/Invoke vs D/Invoke
D/Invoke
◇ Resolve function address dynamically
◇ No imports in the process IAT
◇ Manual mapping and syscalls
◇ A bit less intuitive to use
◇ Need Dinvoke.dll dependency
28
P/Invoke
D/Invoke
31
Inceptor
Template
Driven
Overview
PowerShell, 
C#, C/C++ 
Artifacts
EDR Bypass: 
Unhooking
Manual 
Mapping
Syscalls
32
Supports
Shellcode, EXE 
or DLL
AV Bypass:
Anti-Debug
Patching
Obfuscation
Malleable
Encoders
Spoofed-
certificate 
Code-Signing
Encoders
33
An Encoder is a function which processes data, changing its format into a new one using an arbitrary scheme. 
In Inceptor, encoders are used to ease shellcode loading, to obfuscate the shellcode, and to evade static AV signatures. This
process may involve adding garbage data to the shellcode, perform byte shifting, reduce the size of the data, or encrypt it.
Currently, we categorised 3 different kind of encoders:
◇
Encoders: encode the shellcode using a scheme
◇
Encryptors: encrypt the shellcode using an encryption scheme and a key
◇
Compressors: shrink the shellcode using a compression algorithm
A bit more formally, with encoder we refer to a function 𝑒 ∶
0, 1 𝑛 → {0,1}𝑛, where 𝑛 is a finite number. 
As every encoding scheme must be reversible, given any encoder 𝑒, the following condition should be satisfied:
𝑒 𝑥 = 𝑥 → 𝑒−1 𝑥 = 𝑥 ∀𝑥 ∈ {0,1}𝑛
LI vs LE Encoders
34
A Loader-Independent Encoder, or LI Encoder, is a type of encoder which is  not managed by the loader itself. Very simply, 
every encoder which installs its decoding stub directly in the shellcode, is a LI encoder. 
An example of this kind of encoders is every encoder provided by msfvenom. An advantage of this kind of encoders is the 
possibility to be injected directly by the loader, without any modification. 
A Loader-Dependent Encoder, on the other hand, is a type of encoder which installs its decoding routine in the loader, 
requiring it to decode the blob of data before trying to inject it.
The main advantages of LI encoders are: 
◇
They don’t expose the decoding stub to the loader, making it harder to reverse them
◇
They don’t need a developer to generate a decoding routine for them
However, LD encoders offer more customization and flexibility, and can be created ad-hoc.
Inceptor supports two kind of encoders:
◇
Loader-Independent (LI) Encoders
◇
Loader-Dependent (LD) encoders
Chainable Encoders
35
LD Encoders, as implemented in Inceptor, are also defined as «chainable encoders», meaning they can be chained together 
to encode a payload. 
Without being too formal, a chain of encoders is a set of encoders which are applied in sequence on a payload. 
Inceptor maintains a stack of encoders used during the encoding process, and subsequently add a decoding routine to the 
loader in order to permit full shellcode decoding.
While this can increase the probability space of the generated shellcode, it exposes multiple decoding stubs to the risk of 
being detected, reverse engineered and added to an AV signature list.
To partially mitigate this problem, inceptor offers a way to obfuscate the loader, using different tools and techniques. 
Encoder1
Encoder2
…
EncoderN
Malleable Templates
36
Shellcode Allocation
◇
VirtualAlloc, VirtualAllocEx
◇
NtAllocateVirtualMemory
◇
MapViewOfSection
◇
Etc.
Shellocode Execution
◇
CreateThread, CreateRemoteThread
◇
NtCreateThreadEx
◇
QueueUserAPC
◇
Etc. 
This gives Inceptor the capability to implement virtually any technique to load and execute the shellcode, as long as a 
template is available for it.
In Inceptor, each template represents a Loader, which implements two main sub-techniques: 
Obfuscators
37
The Obfuscation process is usually performed during or after the loader compilation, and the main objectives are:
◇
Make it harder to analyse the binary via reverse engineering (even because C# is usually trivial to reverse if not 
obfuscated)
◇
Evade common signature checking, or AMSI
The main obfuscators used by Inceptor are:
◇
Llvm-obfuscator: Native IR-based obfuscation, performed directly during compilation using clang-cl
◇
ConfuserEx: Dotnet IR-based (IL) obfuscation, performed after the binary has been built
◇
Chameleon: PowerShell code-based obfuscation, performed after the script has been written
At the time of writing, Inceptor offers limited support for code-based obfuscation. On the other 
hand, it offers full support for IR-based obfuscation, which relies mostly on external tools and 
platforms. 
EDR bypass 
38
In Inceptor, EDR bypass is obtained using three main techniques:
◇
Full Unhooking
◇
Syscalls
◇
DLL Manual Mapping
Unhooking
◇
Only used in C/C++ Artifacts
◇
The in-memory version of 
NTDLL is overwritten with a 
fresh copy from the disk
Manual Mapping
◇
Only used in .NET artifacts
◇
Implemented via Dinvoke
◇
A copy of NTDLL is loaded from 
disk into memory
◇
Native APIs are resolved to 
point to the newly mapped DLL 
instead that on the original 
(hooked) DLL
Syscalls
◇
Used in both C/C++ and .NET 
artifacts
◇
Implemented via Syswhisper (1 
and 2) and Dinvoke
◇
Syscalls stubs are used to call 
system calls directly, bypassing 
native APIs 
D/Invoke
As for today 01/06/2021, the Dinvoke DLL is immediately 
detected if added to a binary. 
In order to achieve the maximum from the tool, ensure to have 
a DInvoke fork which is not detected by the AV.
39
Send your PR
40
Inceptor needs 
your help
Thanks!
Any questions?
You can find me at:
◇
Twitter: @klezVirus
◇
GitHub: klezVirus
◇
Gmail: PI:EMAIL
41
Credits
Special thanks to all the people who made and released free 
resources which helped me with building this presentation:
◇
Mantvydas Baranauskas (@spotheplanet)
◇
Jean Maes (@Jean_Maes_1994)
◇
Emeric Nasi (@sevagas)
◇
Daniel Duggan (@_RastaMouse)
42