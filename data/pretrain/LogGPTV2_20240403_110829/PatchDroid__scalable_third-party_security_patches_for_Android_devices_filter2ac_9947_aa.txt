title:PatchDroid: scalable third-party security patches for Android devices
author:Collin Mulliner and
Jon Oberheide and
William K. Robertson and
Engin Kirda
PatchDroid: Scalable Third-Party Security Patches for
Android Devices
Collin Mulliner
Northeastern University
Jon Oberheide
DuoSecurity
William Robertson
Northeastern University
Engin Kirda
Northeastern University
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
Android is currently the largest mobile platform with around
750 million devices worldwide. Unfortunately, more than
30% of all devices contain publicly known security vulnera-
bilities and, in practice, cannot be updated through normal
mechanisms since they are not longer supported by the man-
ufacturer and mobile operator. This failure of traditional
patch distribution systems has resulted in the creation of a
large population of vulnerable mobile devices.
In this paper, we present PatchDroid, a system to dis-
tribute and apply third-party security patches for Android.
Our system is designed for device-independent patch cre-
ation, and uses in-memory patching techniques to address
vulnerabilities in both native and managed code. We created
a fully usable prototype of PatchDroid, including a number
of patches for well-known vulnerabilities in Android devices.
We evaluated our system on diﬀerent devices from multiple
manufacturers and show that we can eﬀectively patch se-
curity vulnerabilities on Android devices without impacting
performance or usability. Therefore, PatchDroid represents
a realistic path towards dramatically reducing the number
of exploitable Android devices in the wild.
1.
INTRODUCTION
Google’s Android operating system has become the largest
mobile device platform, with over 750 million devices world-
wide and about 1.5 million new activated devices every day1.
Android is popular with users since there are many appli-
cations – about 800,000 at the time of writing – available
for the platform. Mobile devices take advantage of the fact
that the main operating system and applications framework
are maintained by Google and made available for third-
party customization and distribution. Because of these rea-
sons, almost all major mobile device manufacturers produce
Android-based devices.
Google constantly publishes enhancements and bugﬁxes
1http://gigaom.com/2013/04/16/android-on-track-for-1b-
total-activations-later-this-year-google-chairman-says/
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’13 Dec. 9-13, 2013, New Orleans, LA, USA
Copyright 2013 ACM 978-1-4503-2015-3/13/12 ...$15.00.
http://dx.doi.org/10.1145/2523649.2523679.
for the Android platform. To quickly distribute updates,
since it’s early days, Android provided an over-the-air (OTA)
update mechanism through which devices can be updated
over the network without being attached to a computer. Ev-
ery time a security vulnerability is found and ﬁxed, Google
can push an update to all Android devices. In theory, this
mechanism allows all Android phones to receive security-
relevant patches in a timely fashion.
Unfortunately, this statement is only true for devices sold
directly by Google and that are currently supported. De-
vices produced by other manufacturers are not updated by
this mechanism; furthermore, updates are somewhat regu-
lated by mobile network operators – e.g., some operators
require review of new ﬁrmware versions prior to deploy-
ment. Therefore, the responsibility for distributing security
updates lies primarily in the hands of the individual device
manufacturers. Some manufacturers are better than others
when it comes to updates and especially security ﬁxes. But
most manufacturers only support a speciﬁc product for a
limited time frame, often on the order of 1–2 years. After
that time, manufacturers do not provide any further updates
even though those older devices remain in widespread use.
As a result, a large percentage of Android phones in use
run an outdated version of the Android operating system.
According to Google, in May 20132 38% of all Android de-
vices were running Android 2.3 (Gingerbread), Gingerbread
is known to contain many severe security vulnerabilities, in-
cluding multiple local privilege escalation, arbitrary code ex-
ecution via drive-by-downloads in the browser, and permis-
sion leaks where unprivileged application can perform oper-
ations that normally require special permissions. Publicly
released exploits exist for most of these vulnerabilities. In
most cases, these exploits were originally written for jail-
breaking purposes. However, they have also proven useful
in writing malware, for instance to escalate privileges on
infected devices [17].
Malware is far from the only problem with unpatched,
unsupported Android devices. For example, corporate espi-
onage and targeted attacks have become a major issue in the
area of mobile devices. Companies and governments need to
be able to protect their devices against attacks, but are cur-
rently left at the mercy of device manufacturers and mobile
network operators for receiving security updates in a timely
fashion.
Our goal in this work is to bridge the gap between oﬃcial
publication of security patches by Google and distribution
of those patches to poorly-supported devices. In particular,
2http://developer.android.com/about/dashboards/
259
we propose a new system called PatchDroid that provides
safe and scalable third-party patching of security vulnerabil-
ities in unsupported Android devices. PatchDroid does not
rely on help from either the manufacturer or operator since it
does not rely on recompilation of source code released by the
manufacturer. Instead, PatchDroid is based on dynamic, in-
memory patching of running processes. Through this mech-
anism, security analysts can write a patch for a speciﬁc vul-
nerability once, and deploy the patch using PatchDroid on
all Android devices that are vulnerable to the speciﬁc bug.
PatchDroid uses dynamic binary instrumentation in order to
inject patches into running processes on Android. As part
of this work, we have developed techniques to patch bugs in
native processes as well as in managed code that is executed
in the Dalvik VM.
In addition to vulnerability remediation, PatchDroid also
includes an attack detection subsystem to recognize exploita-
tion attempts against the ﬁxed vulnerabilities. If an attack
attempt is detected, the attack mitigation subsystem pro-
duces both on-device user notiﬁcations as well as remote
reporting.
We have evaluated PatchDroid on multiple devices from
diﬀerent hardware manufacturers running a wide variety of
Android versions. Our evaluation demonstrates that we can
eﬀectively patch known security vulnerabilities on all tested
devices. The operational state of the devices were, in all
cases, unaﬀected by PatchDroid, and the process did not in-
duce any noticeable performance overhead. Finally, we re-
cruited beta testers to run PatchDroid on their devices, and
attempted to run exploits against those devices. The results
show that PatchDroid prevented a successful exploitation in
all cases.
This paper makes the following contributions.
• We present PatchDroid, a system for safely distribut-
ing and applying third-party patches for security vul-
nerabilities in the Android operating system. The ap-
proach allows analysts to construct patches that can
be applied across a large set of mobile devices and OS
versions for both managed Dalvik bytecode as well as
native code.
• We present techniques for performing in-memory patch-
ing, which improves the safety of our system by guard-
ing against persistent modiﬁcations to critical system
ﬁles that could lead to “bricked” devices. In-memory
patching also sidesteps issues surrounding modiﬁcation
of signed system partitions.
• We evaluated PatchDroid over a number of Android
devices from diﬀerent device manufacturers running
various legacy Android versions (2.0 to 4.1). Our eval-
uation demonstrates that PatchDroid is safe, does not
incur noticeable system overhead, and eﬀectively pre-
vents exploitation of security vulnerabilities in Android
devices.
The rest of this paper is organized as follows. Section 2
provides a short overview of Android and the Android vul-
nerability landscape. In Section 3, we present the motivation
for this work. Section 4 presents the design of PatchDroid.
In Section 5, we present our patching methodology. In Sec-
tion 6, we provide details of our implementation. Section 7
presents our evaluation of PatchDroid’s reliability, perfor-
mance, and eﬀectiveness in preventing exploitation. In Sec-
tion 8, we discuss related work, and Section 9 concludes the
paper.
2. BACKGROUND
In this section, we provide a brief overview of the Android
OS and the vulnerabilities that exist at each layer of the
system.
2.1 The Android OS
The Android OS can be conceptually broken down into
four layers. The lowest layer is the Linux kernel, which pro-
vides basic operating system services such as memory man-
agement, process separation, and device drivers. The next
layer is the Android runtime, system daemons, and support
libraries. The Android runtime is implemented using the
Dalvik Virtual Machine. The Dalvik VM as well as the sys-
tem daemons and support libraries are executed as native
code. The last two layers are the Android application frame-
work and the actual applications. Both are implemented in
managed code and are executed by the Android runtime us-
ing the Dalvik VM.
2.2 Vulnerabilities in Android
Vulnerabilities exist in every layer of the Android OS from
the kernel to the framework and applications. Mainly, vul-
nerabilities in native code that allow arbitrary code execu-
tion are of interest since they provide the basis for attacks.
Most interesting are vulnerabilities in privileged programs
since they can be used for privilege escalation attacks. In
the scope of this paper, we only looked at user space vulner-
abilities. A general list of known Android vulnerabilities of
diﬀerent nature is available here [8].
For the presented work, we picked ﬁve known vulnerabil-
ities. Four very well-known and widely-exploited privilege
escalation vulnerabilities that exist in native code, and one
vulnerability in the SMS stack that is implemented in man-
aged code, and executed in the Dalvik VM. The vulnerabil-
ities are of diﬀerent kinds and, thus, provide a good general
overview of bugs. Missing range checks for array access in
vold lead to the GingerBreak [25] – this bug is also abused
by known malware [17]. Vold further contains a buﬀer over-
ﬂow that lead to the zergRush [26] exploit. Both zygote and
adbd contained a bug that is based on not checking return
values from setuid(). This lead to the zimperlich [16] and
RangeAgainstTheCage [15] exploits, respectively.
Capability leaks such as those found by the woodpecker
tool [10] are a good example of bugs in Dalvik code that can
be actually exploited for malicious intent. For instance, one
such capability leak allows any application to spoof an in-
coming SMS message, including setting an arbitrary number
as the sender. This bug can be used for SMiShing (SMS-
Phishing) attacks [24]. A proof-of-concept exploit for this
bug has been released [6].
2.3 Vulnerability Uncertainty
Google does not force manufacturers to adhere to any par-
ticular versioning schema for their Android devices; as such,
manufacturers can use any Android version.
In general,
most manufacturers use the most recent version in order
to beneﬁt from new features to better compete in the mar-
ket. However, this does not mean that each manufacturer
will apply security patches to their version of the Android
260
source after adapting it for their speciﬁc needs. The result of
this is that Google’s version of a particular Android version
might be patched against a speciﬁc vulnerability, while the
manufacturer’s version of the same Android release might
still be vulnerable. Therefore, it is not necessarily straight-
forward to determine which Android device is aﬀected by
which bug by the release version alone. This situation has
led to the creation of X-Ray [9], a vulnerability scanner for
Android.
Tests conducted using X-Ray [19] show that two devices,
running non-Google versions of Android 2.3.6 and 3.2, are
both still vulnerable to the GingerBreak bug even though
Google oﬃcially patched [25] it in Android version 2.3.4 and
3.0.1.
3. MOTIVATION
Our motivation in this work is ﬁxing security vulnerabil-
ities in Android devices that are no longer supported by
the manufacturer and mobile network operator. Addition-
ally, we want to provide the ability to roll out third-party
security ﬁxes, which can greatly reduce the population of
vulnerable Android devices in the wild.
Our main goal is to ﬁx vulnerabilities without relying on
device manufacturers to provide source code or source-level
patches for security issues. Access to source code such as
that published by AOSP3 can be leveraged to gain insights
on how known vulnerabilities were ﬁxed by Google.
A further goal is scalability. We wish our approach to
be scalable across diﬀerent device manufacturers and de-
vice models. To that end, we do not want to create ﬂash-
able operating system images mainly because not all de-
vices support ﬂashing new operating system images that are
not signed by the manufacturer. Creating complete oper-
ating system images without access to the source code of
the manufacturer is possible by combining AOSP with the
binary-only parts from the manufacturer. However, this has
the downside of being unable to ﬁx bugs in manufacturer-
speciﬁc portions of the OS. That is, it would require signiﬁ-
cant testing, and further would lose all manufacturer-speciﬁc
software that is installed on the phone.
3.1 Challenges
We identiﬁed a number of challenges in the course of this
work.
No source code and version uncertainty. We do not
have access to the source code of vulnerable applications and
libraries. Even in the optimal case where a vulnerability is
in a software component that is contained in the open source
part of Android, we do not necessarily know which version
of the code was used on a speciﬁc device. Furthermore, the
manufacturer might have changed the original source code
to add or modify functionality. Finally, even if one had
access to the source code for an aﬀected device, it would be
a signiﬁcant undertaking to compile the aﬀected code.
Issues with static binary patching. Static binary
patching has the advantage that one does not have to collect
source code and set up a build environment that can accom-
modate a large number of diﬀerent devices. However, bi-
nary patching would need to address issues such as diﬀerent
processor versions (i.e., ARMv5 vs. ARMv7), diﬀerent op-
3AOSP refers to the Android Open Source Project, which
publishes the open source component of the Android OS.
timizations, and compile ﬂags. Additionally, ARM code can
be distributed as either full 32-bit instructions, or as Thumb
code which uses 16-bit instructions. Therefore, static binary
patching would require to patch each binary individually.
Writing to system partitions. For both approaches
outlined above, there remain deployment issues. Since we
would like to avoid distributing full system images, we would
instead have to replace individual ﬁles on the ﬁlesystem.
However, all system binaries and support libraries on An-
droid devices are stored on read-only ﬁle systems. Simply
mounting the ﬁle systems to be writable does not solve the
problem.
If the replaced ﬁle does not work correctly on
the given device, the device might be rendered unusable.
The device might suﬀer from unreproducible crashes, re-
boots, or perhaps stop booting at all. Additionally, some
manufacturers cryptographically sign system partitions and
check the signatures of these partitions during boot using the