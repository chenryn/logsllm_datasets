# PatchDroid: Scalable Third-Party Security Patches for Android Devices

## Authors
- Collin Mulliner, Northeastern University
- Jon Oberheide, DuoSecurity
- William K. Robertson, Northeastern University
- Engin Kirda, Northeastern University

## Abstract
Android is the largest mobile platform, with approximately 750 million devices worldwide. However, more than 30% of these devices contain publicly known security vulnerabilities and cannot be updated through conventional means due to lack of support from manufacturers and mobile operators. This failure in traditional patch distribution has led to a significant number of vulnerable devices.

In this paper, we introduce PatchDroid, a system designed to distribute and apply third-party security patches for Android. Our system is device-independent and uses in-memory patching techniques to address vulnerabilities in both native and managed code. We have developed a fully functional prototype of PatchDroid, including patches for well-known vulnerabilities in Android devices. Our evaluation on various devices from multiple manufacturers demonstrates that PatchDroid can effectively patch security vulnerabilities without impacting performance or usability. Thus, PatchDroid offers a practical solution to reduce the number of exploitable Android devices.

## 1. Introduction
Google's Android operating system is the most widely used mobile platform, with over 750 million devices globally and about 1.5 million new activations daily. The popularity of Android is attributed to its extensive application ecosystem, with around 800,000 apps available at the time of writing. Major mobile device manufacturers produce Android-based devices, leveraging the open-source nature of the OS, which is maintained by Google and customizable by third parties.

Google regularly releases enhancements and bug fixes for the Android platform. To facilitate quick updates, Android includes an over-the-air (OTA) update mechanism, allowing devices to receive updates directly over the network. In theory, this ensures timely security patches for all Android devices. However, this is only true for devices sold directly by Google and those still supported by their manufacturers. Devices from other manufacturers and those no longer supported do not receive these updates, leading to a large population of outdated and vulnerable devices.

According to Google, as of May 2013, 38% of all Android devices were running Android 2.3 (Gingerbread), which contains numerous severe security vulnerabilities, including local privilege escalation, arbitrary code execution, and permission leaks. These vulnerabilities are often exploited by malware and targeted attacks, posing significant risks to users and organizations.

Our goal is to bridge the gap between the official release of security patches by Google and their distribution to unsupported devices. We propose PatchDroid, a system that provides safe and scalable third-party patching for security vulnerabilities in unsupported Android devices. PatchDroid does not rely on manufacturer or operator support and instead uses dynamic, in-memory patching to inject patches into running processes. This approach allows security analysts to create and deploy patches across a wide range of devices and OS versions.

PatchDroid also includes an attack detection subsystem to recognize and mitigate exploitation attempts. Our evaluation on multiple devices from different manufacturers and running various Android versions shows that PatchDroid effectively patches known vulnerabilities without affecting device performance or usability. Beta testers confirmed that PatchDroid successfully prevented exploitation in all cases.

This paper makes the following contributions:
- We present PatchDroid, a system for safely distributing and applying third-party patches for security vulnerabilities in the Android operating system.
- We introduce techniques for in-memory patching, which enhance the safety of our system by preventing persistent modifications to critical system files and sidestepping issues with signed system partitions.
- We evaluate PatchDroid on a variety of Android devices, demonstrating its safety, minimal performance overhead, and effectiveness in preventing the exploitation of security vulnerabilities.

The rest of the paper is organized as follows:
- Section 2 provides an overview of the Android OS and its vulnerability landscape.
- Section 3 discusses the motivation for this work.
- Section 4 presents the design of PatchDroid.
- Section 5 details our patching methodology.
- Section 6 describes the implementation.
- Section 7 presents the evaluation results.
- Section 8 discusses related work.
- Section 9 concludes the paper.

## 2. Background
### 2.1 The Android OS
The Android OS can be divided into four layers:
1. **Linux Kernel**: Provides basic OS services such as memory management, process separation, and device drivers.
2. **Android Runtime, System Daemons, and Support Libraries**: Includes the Dalvik Virtual Machine, system daemons, and support libraries, all executed as native code.
3. **Android Application Framework**: Implemented in managed code and executed by the Android runtime using the Dalvik VM.
4. **Applications**: Also implemented in managed code and executed by the Android runtime using the Dalvik VM.

### 2.2 Vulnerabilities in Android
Vulnerabilities exist at every layer of the Android OS, from the kernel to the framework and applications. Key vulnerabilities include:
- **Native Code Vulnerabilities**: Allow arbitrary code execution and are often used for privilege escalation attacks.
- **Managed Code Vulnerabilities**: Such as those found in the SMS stack, which can be exploited for SMiShing attacks.

### 2.3 Vulnerability Uncertainty
Google does not enforce a specific versioning schema for Android, leading to variations in the versions and patches applied by different manufacturers. This uncertainty makes it challenging to determine which devices are affected by specific vulnerabilities. Tools like X-Ray have been developed to scan for vulnerabilities, but discrepancies remain.

## 3. Motivation
Our primary motivation is to address security vulnerabilities in Android devices that are no longer supported by manufacturers and mobile operators. We aim to provide a scalable solution for distributing third-party security patches, reducing the number of vulnerable devices in the wild.

### 3.1 Challenges
We identified several challenges:
- **Lack of Source Code and Version Uncertainty**: Limited access to source code and uncertainty about the version of code used on specific devices.
- **Issues with Static Binary Patching**: Requires addressing processor versions, optimizations, and compile flags, making it impractical for a wide range of devices.
- **Writing to System Partitions**: Replacing system files on read-only file systems can render devices unusable if not done correctly.

By addressing these challenges, PatchDroid aims to provide a robust and scalable solution for securing unsupported Android devices.