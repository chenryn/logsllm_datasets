8
9
10
9
10
11
12
}
{
11 }Listing 3: Decompilation result of Listing 2 with
Fernﬂower.
1 class Utils
2 {
3
4
5
6
7
8
int i = Character.digit((char)b, 16);
if(i == -1)
static int digit16(byte b)
throws DecoderException
throw new DecoderException((new
StringBuilder()).append("Invalid URL
encoding: not a valid digit (radix
16): ").append(b).toString());
else
return i;
}
private static final int RADIX = 16;
13 }Listing 4: Decompilation result of Listing 2 with Dava.
Besides, this does not include the diﬀerent formatting
choices made by the decompilers such as new lines place-
ment and brackets usage for single instructions such as if
and else.
3. Decompiler evaluation methodology
In this section, we introduce deﬁnitions, metrics and re-
search questions. Next, we detail the framework to compare
decompilers and we describe the Java projects that form the
set of case studies for this work.
3.1. Deﬁnitions and Metrics
The value of the results produced by decompilation
varies greatly depending on the intended use of the gener-
ated source code. In this work, we evaluate the decompilers’
capacity to produce a faithful retranscription of the original
sources. Therefore, we collect the following metrics.
Deﬁnition 1. Syntactic correctness. The output of a de-
compiler is syntactically correct if it contains a valid Java
program, i.e. a Java program that is recompilable with a
Java compiler without any error.
When a bytecode decompiler generates source code that
can be recompiled, this source code can still be syntactically
diﬀerentfromtheoriginal. Weintroduceametrictomeasure
the scale of such a diﬀerence according to the abstract syn-
tax tree (AST) dissimilarity[9] between the original and the
Harrand et al.: Preprint submitted to Elsevier
Page 3 of 19
Java Decompiler Diversity and its Application to Meta-decompilation
decompiler produces (b) syntactically correct code.
Then, we measure (c) the textual diﬀerence between
the original and the recompiled bytecode. If there are
none, the decompiler produced semantically equiva-
lent code, otherwise we cannot assess anything in that
regard yet.
4. Run the test cases on the recompiled bytecode. If the
tests are successful, we mark the source as passTests
for the given triplet, showing that the decompiler pro-
duces(d)semanticallyequivalentcodemoduloinputs.
If one of these steps fails we do not perform the follow-
ing steps and consider all the resulting metrics not available.
As decompilation can generate a program that does not stop,
weset a 20minutestimeout forthe executionofthe testsuite
(the original test suites run under a minute on the hardware
used for this experiment, a Core i5-6600K with 16GB of
RAM).
Thetestsusedtoassessthesemanticequivalencemodulo
inputs are those of the original project that cover the given
Java ﬁle.3 We manually excluded the tests that fail on the
original project (either ﬂaky or because versioning issue).
The list of excluded tests is available as part of our experi-
ments.
3.4. Study Subjects
Decompilers. Table 1 shows the set of decompilers un-
der study. We have selected Java decompilers that are (i)
freely available, and (ii) have been active in the last two
years. We add Jode in order to compare our results with
a legacy decompiler, and because the previous survey by
Hamilton and colleagues considers it to be one of the best
decompilers [15].
The column VERSION shows the version used (some de-
compilers do not follow any versioning scheme). We choose
the latest release if one exists, if not the last commit avail-
able the 09-05-2019. The column STATUS indicates the date
of the last commit or "Active" if the last commit was more
recent than 30 days. The column #COMMITS represents the
numberofcommitsinthedecompilerproject,incaseswhere
the decompiler is a submodule of a bigger project (e.g. Dava
and Fernﬂower) we count only commits aﬀecting the sub-
module. Thecolumn#LOC isthenumberoflinesofcodein
all Java ﬁles (and Python ﬁles for Krakatau) of the decompi-
ler, including sources, test sources and resources counted
with cloc.4
Note that diﬀerent decompilers are developed for dif-
ferent usages and, therefore, are meant to achieve diﬀerent
goals. CFR [2] for Java 15 to 14, for code compiled with
javac (note that since we performed our ﬁrst experiments, it
is now tested with ecj generated classes). Procyon [40] from
assessed using yajta https://github.com/
castor-software/yajta
3Coverage was
4
5
http://cloc.sourceforge.net/
https://github.com/leibnitz27/cfr/blob/
33216277ae3b61a9d2b3f912d9ed91a3e698d536/src/org/benf/
cfr/reader/entities/attributes/AttributeCode.java#L49
Figure 1: Java decompiler assessment pipeline with four evalu-
ation layers: syntactic distortion, bytecode diﬀerence, syntactic
correctness, and semantic equivalence modulo input.
RQ3: To what extent do decompilers produce decep-
tive decompilation results? In this research question, we
investigate the cases where we observe semantic diﬀerences
between the original source code and the outputs of the de-
compilers.
RQ4: What is the syntactic distortion of decompiled
code? Even if decompiled bytecode is ensured to be syntac-
tically and semantically correct, syntactic diﬀerences may
remain as an issue when the purpose of decompilation is hu-
man understanding. Keeping the decompiled source code
freeofsyntacticdistortionsisessentialduringprogramcom-
prehension, as many decompilers can produce human un-
readable code structures. In this research question, we com-
pare the syntactic distortions produced by decompilers.
RQ5: To what extent do the successes and failures of
decompilers overlap? In this research question we inves-
tigate the intersection of classes for which each decompiler
produce semantically equivalent modulo input sources.
3.3. Study Protocol
Figure 1 represents the pipeline of operations conducted
on every Java source ﬁle in our dataset. For each triplet , we perform the following:
1. Compile the source ﬁles with a given compiler.
2. Decompile each class ﬁle with a decompiler (there
might be several classes if the source deﬁnes internal
classes). If the decompiler does not return any error,
we mark the source ﬁle as decompilable. Then, (a) we
measuresyntacticdistortionbycomparingtheASTof
the original source with the AST of the decompiled
source.
3. Recompile the class ﬁles with the given compiler.
If the compilation is successful, we know that the
Harrand et al.: Preprint submitted to Elsevier
Page 4 of 19
BytecodeSource codeOriginal 011110010110CompileDecompiled Recompiled011110010110RecompileSyntactic distortionBytecode differenceSemantic equivalence modulo inputsDecompileTestOriginal 1234Syntactic correctnessabcdJava Decompiler Diversity and its Application to Meta-decompilation
Table 1
Characteristics of the studied decompilers.
Table 2
Characteristics of the projects used to evaluate decompilers.
Decompiler
CFR [2]
Dava [19]
Fernﬂower [20]
JADX [38]
JD-Core [6]
Jode [16]
Krakatau [39]
Procyon [40]
Version
0.141
3.3.0
NA**
0.9.0
1.0.0
1.1.2-pre1
NA**
0.5.34
2018-06-15*
Status
Active
Active
Active
Active
2004-02-25*
2018-05-13*
Active
1433
14
453
970
#Commits #LOC
52098
22884
52118
55335
36730
30161
11301
122147
NA***
NA***
512
1080
* Date of last update.
** Not following any versioning scheme.
*** CVS not available at the date of the present study.
Java 5 and beyond and javac, shares its test suite with CFR.
Fernﬂower [20] is the decompiler embedded in IntelliJ IDE.
Krakatau [39] up to Java 7 does not currently support Java 8
or invokedynamic. JD-Core [6] is the engine of JD-GUI.
It supports Java 1.1.8 to Java 12.0. The version we study
in this work is the ﬁrst version released since the complete
rewrite of JD-Core. While older versions were based on a
simple bytecode pattern recognition engine, JD-Core now
includes a CFG analysis layer. JADX [38] is a decompiler
that originally targeted dex ﬁles (bytecode targeting the an-
droidplatform)butcanalsotargetclassﬁles, asinourexper-
iments. Dava [19] is a decompiler built on top of the Soot
Framework [42]. It does not target Java bytecode produced
by any speciﬁc compiler nor from any speciﬁc language, but
produces decompiled sources in Java. Soot supports byte-
code and source code up to Java 7. Jode [16] is a legacy
decompiler that handles Java bytecode up to Java 1.4.
Projects. In order to get a set of real world Java projects
toevaluatetheeightdecompilers,wereusethesetofprojects
ofPawlakandcolleagues[32]. Tothese 13projectsweadded
a fourteenth one named DcTest made out of examples col-
lected from previous decompiler evaluations [15, 23].6 Ta-
ble 2 shows a summary of this dataset: the Java version in
which they are written, the number of Java source ﬁles, the
number of unit tests as reported by Apache Maven, and the
number of Java lines of code in their sources.
As diﬀerent Java compilers may translate the same
sources into diﬀerent bytecode representations [5]7, we ex-
periment with the two most used Java compilers:
javac
and ecj (versions 1.8.0_17 and 13.13.100, respectively).
We compiled all 14 projects with both compilers (except
commons-lang which failed to build with ecj). Our dataset
includes 3928 bytecode classes, 1887 of which compiled
with ecj, and 2041 compiled with javac. As we study the in-
ﬂuence of the compiler, in RQ1, we limit our datasets to the
1887 classes that compiled with both compilers. As seman-
ticequivalencemoduloinputsisbasedontestsuites,forRQ2
and RQ3 we focus on the classes that contain code executed
by test suites: 2397 classes generated by the two compilers.
These classes covered by the test suites exclude interfaces
as they do not contain executable code. Most enum declara-
tions fall under the same category. Test coverage is assessed
6
http://www.program-transformation.org/Transform/
JavaDecompilerTests
7
https://www.benf.org/other/cfr/
eclipse-differences.html
Harrand et al.: Preprint submitted to Elsevier
Project name
Bukkit
Commons-codec
Commons-collections
Commons-imaging
Commons-lang
DiskLruCache
JavaPoet*
Joda time
Jsoup
JUnit4
Mimecraft
Scribe Java
Spark
DcTest**
Total
906
644
15067
Java version #Classes #Tests #LOC
60800
15087
62077
47396
79509
1206
934
70027
14801
17167
523
4294
4089
211
94
2581
61
60
4133
430
867
14
99
54
9
1.6
1.6
1.5
1.5
1.8
1.5
1.6
1.5
1.5
1.5
1.6
1.5
1.8
642
59
301
329
154
3
2
165
54
195
4
89
34
10
2041
1.5 − 1.8
25019
378121
(*) Formerly named JavaWriter.
(**) Examples collected from previous decompilers evaluation.
through bytecode instrumentation with a tool named yajta.8
4. Experimental Results
4.1. RQ1: (syntactic correctness) To what extent is
decompiled Java code syntactically correct?
This research question investigates to what extent the
sourcecodeproducedbythediﬀerentdecompilersissyntac-
tically correct, meaning that the decompiled code compiles.
We also investigate the eﬀect of the compiler that produces
the bytecode on the decompilation results. To do so, in this
section, we focus on the 1887 classes that compile with both
javac and ecj.
Figure 2 shows the ratio of decompiled classes that are
syntactically correct per pair of compiler and decompiler.
The horizontal axis shows the ratio of syntactically correct
output in green, the ratio of syntactically incorrect output in
blue, and the ratio of empty output in red (an empty output
occurs, e.g. when the decompiler crashes). The vertical axis
shows the compiler on the left and decompiler on the right.
For example, Procyon, shown in the last row, is able to pro-
ducesyntacticallycorrectsourcecodefor 1609(85.3%)class
ﬁlescompiledwith javac,andproduceanon-emptysyntacti-
cally incorrect output for 278 (14.7%) of them. On the other
hand, when sources are compiled with ecj, Procyon gener-
ates syntactically correct sources for 1532 (81.2%) of class
ﬁles and syntactically incorrect for 355 (18.8%) sources. In
other words, Procyon is slightly more eﬀective when used
against code compiled with javac. It is interesting to notice
that not all decompiler authors have decided to handle er-
ror the same way. Both Procyon and Jode’s developers have
decided to always return source ﬁles, even if incomplete (for
our dataset). Additionally, when CFR and Procyon detect a
method that they cannot decompile properly, they may re-
place the body of the method by a single throw statement