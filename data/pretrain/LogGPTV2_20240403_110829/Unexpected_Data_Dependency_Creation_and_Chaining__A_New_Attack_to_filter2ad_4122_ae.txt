9
10
11
12
13
14
15
16
17
18
ONOS
Floodlight
OpenDaylight
SE-Floodlight
#1




Diagnostic
Diagnostic
A3 → A5 → A7
Execute arbitrary commands
A3 → A6 → A7
Execute arbitrary commands
YangLiveCompiler
FlowRuleManager
A3 → A9
A3 → A10
Execute arbitrary commands
Modify speciﬁc network states
WEB UI
WEB UI
NETCONF
XMLPARSER
OVSDB
YangLiveCompiler
Core
StaticEntryPusher
Web GUI
Forwarding
ODL-SDNi
VPNService
A1 → A8 ( A10 )
Read arbitrary network states
A2 → A8 ( A10 )
Read arbitrary network states
A1
A2
A4
A3 → A5
A3 → A6
B1 → B3
B1 → B4
B2
Read arbitrary conﬁguration ﬁles
Read arbitrary conﬁguration ﬁles
Disrupt speciﬁc network service
Corrupt arbitrary conﬁguration ﬁles
Corrupt arbitrary conﬁguration ﬁles
Write speciﬁc network states

Read speciﬁc network states
Disrupt speciﬁc network service
C1 → C3
Read speciﬁc network states
C2
Disrupt speciﬁc network service
StaticEntryPusher
Web GUI
D1 → D3
D1 → D2
Write speciﬁc network states

Read speciﬁc network states
#3








#2












Disclosure
Fixed (CVE-2017-1000078, CVE-2018-1999020)
Fixed (CVE-2017-1000078, CVE-2018-1999020)
Fixed (CVE-2019-13624)
Reported
Fixed (CVE-2018-1000614)
Fixed (CVE-2018-1000616)
Fixed (CVE-2018-1000614)
Fixed (CVE-2018-1000616)
Fixed (CVE-2018-1000615)
Fixed (CVE-2018-1999020)
Fixed (CVE-2018-1999020)
Fixed (CVE-2018-1000163)
Fixed(CVE-2018-1000163)
Fixed (CVE-2018-1000617)
Fixed (CVE-2018-1132)
Fixed
Reported
Reported
1#: Network Manipulation
Researchers from Fraunhofer AISEC also discovered CVE-2017-1000078 and they reported it earlier than us.
3#: Denial of Service
2#: Data Leakage
attacker to access the database of the ODL-SDNi application
and obtain certain network device information.
Denial of Service. We found that 8 D2C2 chains (i.e., DC-
1, DC-2, DC-3, DC-9, DC-10, DC-11, DC-14 and DC-
16) can hurt the availability of the controllers. In ONOS,
we found 6 D2C2 chains. DC-1, DC-2 and DC-3 can termi-
nate the controller through command execution. DC-9 incurs
a NumberFormatException exception into the OVSDB
component, which leads to disruption of the legitimate pro-
tocol interactions involved in the corresponding service. By
abusing the sensitive method FileOutputStream, DC-
10 and DC-11 can affect the functionalities of a component
by corrupting its conﬁguration ﬁles. In Floodlight, we found
that DC-14 can crash the forwarding component by incurring
exceptions during protocol handling. In OpenDaylight, DC-16
crashes the vpnservice component by incurring exceptions
into its protocol parsing method(s).
Remark. Based on the impact analysis results, we claim
the D2C2 attack indeed achieves greater reachability
that
in the control plane, which leads to a much larger SDN
attack surface. This claim is supported by two main insights.
(i) By triggering creation and chaining of unexpected data
dependencies in a creative way, the D2C2 attack effectively
attacks many components hidden deep in the control plane.
According to our results, 13 previously unreachable control
plane components are attacked via 21 newly created data
dependencies. Without taking the newly created data depen-
dencies into consideration, some of these exposed components
(e.g., Diagnostic) in fact originally do not have any direct or
indirect data dependencies with the data plane. (ii) The D2C2
attack achieves signiﬁcant attack effects by abusing these
exposed components. By “signiﬁcant”, we mean the following
indicators. First, the D2C2 attack is able to cause almost every
attack effect in previous data-to-control plane attacks. The
only exception is the data-to-control plane saturation attack.
We cannot achieve this particular attack effect because the
D2C2 attack is not volumetric attack. Second, some of the
attack effects previously caused by local control-plane-only
attacks [37], [16], such as injection of manipulated ﬂow rules,
can also be caused by the D2C2 attack. Third, the D2C2 attack
causes some completely new kinds of attack effects, including
the execution of arbitrary commands in the controller and
exﬁltration/corruption of arbitrary conﬁguration ﬁles.
D. Case Studies
In this section, we illustrate the severity of the D2C2 attack
through two representative attack examples.
Arbitrary command execution in the control plane.
With DC-2, an attacker in the data plane is able to execute
arbitrary commands in the controller. Fig. 6(a) shows the
exploit chain’s event chain graph (left half) and payload
crafting guide (right half). As shown in the left half, the target
is the diagnostics component which holds the sensitive method
Runtime.getRuntime().exec(). SVHunter identiﬁed
a poisoning event (i.e. event A7 ) which takes input data
from a local conﬁguration ﬁle. To trigger this event, SVHunter
identiﬁed another poisoning event (i.e. event A6 ) which can
poison a category fs data item. This event is identiﬁed from
the Yang component which creates new ﬁles with the sensitive
method Files.write(). However, to control the content
of the new ﬁles and trigger this event, we need a particular
network state to be poisoned. This precondition is met by
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1522
Malicious Device
Payload
TYPE : proto_msg
PID    : OFFeatureReply.mfrDesc
DATA: var#53
var#53
TYPE : net_state
PID    : root.models
DATA: var#12
var#12
TYPE : fs
PID    : bin.
            onos-node-diagnostics
DATA: var#51
var#51
TYPE : net_state
PID    : .
Data Plane
A1
NetconfAlarmTranslator
#createDocFromMessage
@96
A10
FlowRuleService
#getFlowEntries
@63
End
End
Malicious Device
Payload
TYPE : proto_msg
PID    : netconf.notification
DATA: var#56
var#56
TYPE : net_state
PID    : root.flows.deviceid
DATA: var#24
var#56
TYPE: fs
PID   : .
var#24
TYPE: net_state
PID   : flowRules
command execution in
(b) Steal sensitive network information in ONOS.
Data Plane
A3
DevicesWebResource
#getDevice
@83
A6
YangLiveCompilerManager
#extractZipArchive
@127
A7
DiagnosticsWebResource
#execute
@62
End
(a) Remote
ONOS.
Fig. 6. Two D2C2 attack examples (We manually adjust the placement of some nodes to make the graphs look neat).
event A3 . In A3 , method getDevice is abused so that
it can poison the data items in the net state by accessing the
corresponding Restful API. As shown in the ﬁgure, A3 can
be directly triggered by a custom ﬁeld in a legitimate protocol
message from the data plane. Hence, the attacker can exploit
the whole D2C2 chain by sending a single malicious protocol
message. Although there are several events and data items
involved, crafting the payload is actually quite straightforward
with the help of SVHunter. As shown in the right half
of Fig. 6(a), the D2C2 chain can be exploited by sending
a OFFeatureReply.mfrDesc protocol message to the
controller while letting the message have a malicious payload
crafted by using the guide shown in the ﬁgure. Regarding
the attack effect, an attacker located in the data plane can
leverage this D2C2 chain to execute arbitrary commands in
the controller and even get a reverse system shell from it.
Stealing sensitive network information. The attack effect
of chain DC-5 is to steal
important network information
(e.g., conﬁgurations, network topologies and routing poli-
cies). As shown in Figure 6(b),
the ﬁrst poisoning event
of this D2C2 chain is event A1 , which happens in the
core service NetConf. Since a method of this component
(i.e. createDocFromMessage()) calls a sensitive method
that can be abused to launch XML external entity attacks
(XXE) [10] to handle certain data items in the category of
proto msg (i.e., custom ﬁeld). As shown in the ﬁgure, there
are two potential consequences of this poisoning event. First, it
can directly read conﬁgurations in the local ﬁle system through
the XXE attack. Second, it can also be leveraged to launch
a HTTP request to access data through Restful API, which
is denoted as event A10 . Event A10 involves the sensitive
method getFlowEntries which is used by ONOS to read
ﬂow rules. As shown in the right half of Fig. 6(b), an attacker
only needs to craft the corresponding XXE payload into the
notiﬁcation message and then send it to the controller from
a data plane device in order to launch this attack. Regarding
the attack effect, a data plane attacker can leverage this D2C2
chain to steal either conﬁguration (e.g., user credentials) or
network state information (e.g., ﬂow rules, network topology).
VII. DISCUSSION
A. Countermeasures
Security Checks. To launch the D2C2 attack, an attacker
has to ﬁnd several exploitable sensitive methods. One way
to defeat the D2C2 attack is to add security checks for the
arguments of each sensitive method. For example, in Fig. 8(a),
the attacker abused extractZipArchive in A6 with a
malicious input to write an arbitrary ﬁle into an arbitrary
directory. By checking the arguments, the attacker will no
longer be able to exploit this chain. Several chains we reported
to the vendors have been patched with security checks.
Mitigating Malicious Dependency Creation. The D2C2
attack employs a data dependency creation strategy to increase
the reachability. Therefore another potential mitigation method
is to detect and mitigate the malicious data dependency
creation. We can dynamically monitor the data ﬂow of the
entire controller to detect such malicious dependency creation.
However, global monitoring may incur signiﬁcant overhead to
the controller. As future work, we are considering to design
a custom algorithm to more efﬁciently detect abnormal data
dependencies from massive legitimate data dependencies.
Sanitizing Protocol Interaction. The ﬁrst step of all chains
is to inject malicious payloads into the protocol messages and
send them to the controllers. So another potential mitigation is
to sanitize malicious protocol messages. We can sanitize the
format and value range of every custom ﬁeld to mitigate the
malicious payload injection. Moreover, custom ﬁelds in the
SDN protocol speciﬁcations should be carefully inspected and
re-deﬁned to make such attacks less possible.
B. Limitations
First,
like many other
static program analysis tools,
SVHunter may trace a number of redundant information ﬂows
or miss some ﬂows. To reduce false positives and false
negatives, we can combine SVHunter with dynamic program
analysis techniques. Second, since we do not perform ﬁne-
grained analysis of program semantics (SVHunter only per-
forms keyword-based ﬁltering on basic security checks in the
SDN controllers), it is possible for SVHunter to construct an
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1523
inaccurate exploit chain whose exploitation might be impeded
by some speciﬁc check functions. A potential method to
increase accuracy is to combine SVHunter with, for example,
symbolic execution [38], [31].
Also, SVHunter relies on a domain-speciﬁc language ERL
to model the behavior of sensitive methods and APIs. Hence, it
requires some manual effort to identify new sensitive methods
or add some new tracing rules if the user wants to support
more SDN controllers. The sensitive methods/APIs belong to