序的运行结果打印到标准输出，而错误提
 而标准错误输出仍然对应终端设备，
 它不表示磁盘上的一
本书会用“常规文件”（Regular
 stderr);
 主设备号5,
目录下都有-
使用的函数接口是相同的。本
，在stdio.h中声
终端设备也有对应的路
因为设备文件在磁盘_
 次设备号0，
一个特殊的设备文件与
备。UNIX的传统
备。内核通过设备
仍然看不出是什
stderr也只用
主设备
3
，而设
现
这
山
台
T
径
交
普
台
---
## Page 463
strerror函数可以根据错误号返回错误原因字符串。
如果把上面的程序改成这样：
perror函数将错误信息打印到标准错误输出，
前不能再调用其它系统函数。
也有少数例外,
则printr打印的错误号并不是fopen产生的错误号，
帮助。
提供一些额外的信息，
限
No such file or directoryo
如果文件abcde不存在，
perror函数的Man Page中没有ERRoRs部分，
，很多系统函数都会改变它，
例 25.4. perror
int main(void)
#include 
void perror(const char *s);
#include
比如strcpy）
int main(void)
return 0;
，每个fopen打开不同的文件，那么在每个fopen的错误处理中打印文件名就很有
以便在看到错误信息时能够很快定位是程序中哪里出了错，如果在程序中有
fopen返回-1并设置errno为ENOENT,
return 0;
exit(l);
perror(
（fp 
虽然perror可以打印出错误原因,
1
，所以一个系统函数错误返回后应该马上检查errno，在检查errno之
exit(1);
 perror("Open file abcde");
= NULL
，首先打印参数s所指的字符串，然后打印:号，然后根
"r");
 说明它本身不产生错误码，
：而是perror产生的错误号。
"， errno);
紧接着perror函数读取errno的值，
 传给perror的字符串参数仍然应该
但它调用的其它函数
）errno是一个全局变
---
## Page 464
对于fgetc函数的使用有以下几点说明:
绍TCP协议时会对流这个概念做更详细的解释。
件有时也叫做流（Stream）
注意在Man Page的函数原型中rILE*指针参数有时会起名叫stream,
fgetc函数从指定的文件中读一个字节，getchar从标准输入读一个字节，调用getchar（）相当于调
2.5.以字节为单位的IVO函数 请点评
请读者自己设计几个实验，
只读方式打开。试试如果以可写的方式打开一
打开一个没有访问权限的文件。
2、做几个小练习，看看fopen出错有哪些常见的原因。
1、在系统头文件中找到各种错误码的宏定义。
习题请点评
这个函数返回指向静态内存的指针。以后学线程库时我们会看到，
int fgetc(FILE *stream);
#include 
fputs(strerror(n)， stderr);
返回值：错误码errnum所对应的字符串
#include 
返
int
 = fopen("/etc/shadow",
而是通过返回值返回,
exit(1);
"Open /home/akaedu");
("Open /etc/shadow");
看看你还能测试出哪些错误原因？
传给fopen的第一
文件由一串字节组成，每次可以读或写其中任意数量的字节，以后介
：就不能调用perror打印错误原因了，这时strerror就派上了用
"r");
"r+");
一个参数目录名末尾可以加/也可以不加/，但只允许以
“个存在的目录会怎么样呢？
 有些函数的错误码并不保存
 这是因为标准IO库操作的文
---
## Page 465
这些字符打印到屏幕上。
下面的例子演示了这四个函数的用法，从键盘读入一串字符写到一个文件中，再从这个文件中读出
对于fputc函数的使用也要说明几点：
fputc函数向指定的文件写一个字节，putchar向标准输出写一个字节，
·要用fputc函数写一个文件，该文件的打开方式必须是可写的（包括追加）。
然后把要写入的字节追加到后面。
fgetc 成功时返回读到一个字节，
向后移动一个字节，因此可以连续多次调用fgetc函数依次读取多个字节。
要用fgetc函数读一个文件，该文件的打开方式必须是可读的。
例 25.5.用fputc/fgetc读写文件和终端
意
种情况区分开,
或读到文件末尾时fgetc将返回EoF，即-1，
是int型,
节数)
系统对于每个打开的文件都记录着当前读写位置在文件中的地址（或者说距离文件开头的字
返回值：成功返回写入的字节，出错返回EOF
int fputc(int c, FILE *stream);
#include 
件末尾都有一个字节是EOF（根据上面的分析，EOF并不是一个字节）。
in
，也叫偏移量
，所以这个字节要转换成int型再返回，那为什么要规定返回值是int型呢？因为出错
int main(void)
int
while ((ch = fgetc(fp)) != EOF)
int ch;
FILE *fp;
（Offset）o
C）
exit(1);
fputc(ch,
perror
，本来应该是unsigned char型的，
 当文件打开时，读写位置是0，
只是用这个返回值表示已读到文件末尾，并不是说每个
 fp);
，保存在intt型的返回值中是0xffff，如果读到字
一定要保存在int型变量中,
 那么当返回值是0xff时无法区分到底
 只有规定返回值是int型才能把这两
，调用putchar(c)相当于调
，但由于函数原型中返回值
如果写
---
## Page 466
2.6.操作读写位置的函数 请点评
到换行符才返回的。
每敲一
2、虽然我说getchar要读到换行符才返回，
运行这个程序可以把dir1/fileA文件拷贝到dir2/fileB文件。注意各种出错处理。
1、编写一个简单的文件复制程序。
习题请点评
数把读写位置移到文件开头，再进入第二个while循环从头读取文件内容。
在上面的程序中，
定，不一定得是END，只要和输入的内容能区分开就行。
#include 
int main(void)
#include 
负值表示向前（向文件开头的方向）移动，
return 0;
fclose(fp);
fputc('K')
if (fseek(fp)
FILE* fp;
（fp"
exit(1);
perror(
，fp);
10,
"Seek file textfile");
 SEEK_SET） != O） {
，正值表示向后 (向文件末尾的方向)
，本节介绍另外两个操作读写位置
---
## Page 468
fputs 向指定的文件写入一个字符串，puts向标准输出写入一个字符串。
如果一次fgets 调用在读入若干个字符后到达文件末尾，
如果文件中的一行太长,
整的字符串。
中读取以\n'结尾的一行（包括"\n在内）存到缓冲区s中，并且在该行末尾添加一个\o组成完
gets函数无需解释，
fgets从指定的文件中读一行字符到调用者提供的缓冲区中，gets 从标准输入读一行字符到调用者
2.7.以字符串为单位的IVO函数 请点评
注意，
1个字符和一个"0字符存入缓冲区，
现在说说fgets 函数，
在只是为了兼容以前的程序，
提供的缓冲区中。
在该位置写入一个字符K，这样textfile文件就变长了，从第5到第9个字节自动被填充为0。
fseek(fp，10，SEEK_SET)将读写位置移到第10个字节处（其实是第11个字节，
而不适合读二进制文件，并且文本文件中的所有字符都应该是可见字符，不能有＇。
普通字符读入。如果文件中存在o'字符（或者说0x00字节）
题
运行这个程序，然后查看文件textfile的内容:
误
人避免出问题，
、对于fgets来说，"\n'是一个特别的字符，而o并无任何特别之处，如果读到\o·就当作
int fputs(const char *s,
#include 
返回值：
char
char *fgets(char *s,
#include 
000oob
int
000000 35 36 37
od
，而gets读取的输入直接来自程序外部，
*gets(char
"成功时s指向哪返回的指针就指向哪，出错或者读到文件末尾时返回NULL
tx1
，Man Page的BUGS部分已经说得很清楚了：Never use gets()。gets函数的存
con
 -tc -Ax textfile
 参数s是缓冲区的首地址,
char
（Sx
38
*S
 int size, FILE *stream);
8
n
， FILE *stream);
出错返回EOF
文件中剩下的半行可以在下次调用fgets时继续读。
，却不能指定缓冲区的大小,
 size是缓冲区的长度，
，所以唯一的办法就是不要用它。
，则将已读到的字符串加上"o存入缓冲区
 用户可能通过标准输入提供任意长的字符
调用fgets之后就无法判断缓冲区
只要程序员小心一点就
 很可能导致缓冲区溢出
，就把已经读到的size-
从0开始数），
，然后
错
司
---
## Page 469
件中，另一个程序和从文件中读出结构体。
fread和fwrite用于读写记录，
2.8.以记录为单位的IVO函数请点评
则fwrite的返回值小于nmemb指定的值。下面的例子由两个程序组成，
前读写位置已经在文件末尾了
当前读写位置距文件末尾只有一
nmemb是请求读或写的记录数，
在ptr所指的内存空间中连续存放，共占size ＊nmemb个字节，
件
习题请点评
有n′。puts将字符串s写到标准输出（不包括结尾的\o）
缓冲区s中保存的是以0结尾的字符串，
，试试用它拷贝二进制文件会出什么问题。
例 25.7. fread/fwrite
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE 
size_t fread(void *ptr,
#include 
28}};
struct record {
int main(void)
#include
#include 
/* writerec.c */
fwrite(array, sizeof(struct record), 2, fp);
struct record array[2] = {{"Ken", 24}, {"Knuth",
ret
int age;
char
fclose(
eturn
(fp 
 name[10];
，这里的记录是指一串固定长度的字节，比如一个int、
一条记录的长度，
fread和fwrite返回的记录数有可能小于nmemb指定的记录数。例如
，或者读文件时出错了
(fp);
成功时返回的记录数等于nmemb，
:0
 size_t size, size_t nmemb,
("Open file recfile");
，根据本节对fgets函数的分析，应该只能拷贝文本文
调用fread时指定nmemb 为2，
出错或读到文件末尾时返回的记
字符串中可以有n'也可以没
一个程序把结构体保存到文
 FILE *stream);
则返回值为1。
但并不写入结尾
这些记录
一个结构体或
，如果当
---
## Page 470
现在该正式讲一下printf和scanf 函数了，这两个函数都有很多种形式。
2.9.格式化VO函数 请点评
在name成员之后
为030和034）。
其中不仅保存着字符型数据，还保存着整型数据24和28（在od命令的输出中以八进制显示，
把两条记录写到文件中共占32字节。
我们把一个struct record结构体看作一条记录，
则不能保证正确读出文件的内容,
5
#include 
000020
t
gcc readrec.c -o readrec
gcc writerec.c
/writerec
 sprintf(
fprintf(FILE
后的什么位置
array[l].age);
struct record {
#include
int main(void)
#include 
，注意，
/* readrec.c */ 
(char
 直接在文件中读写结构体的程序是不可移植的，
n
return 0;
printf("Namel: %s\tAgel: %d\n", array[0].name
fread(array; .
struct record array[2];
int age;
char name[10];
置也可能不同）。
国
ILE
z2
Age2:
*str;
n
-0 writerec
00.00.00.0000.00.00.001800.00.00,
*fP
因为不同平台的大小端可能不同（因而对整型数据的存储方式不
.7