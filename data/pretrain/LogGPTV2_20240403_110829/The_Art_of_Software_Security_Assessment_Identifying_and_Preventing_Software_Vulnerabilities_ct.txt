used to clear out a process's environment. Not all UNIX implementations have all five 
functions, and the semantics of functions vary across versions. 
As far as the kernel cares, the environment is simply an array of NULL-terminated 
strings. The standard C library, however, expects strings to be in a particular format, 
separating environment variables into a name and a value. The = character is used as 
the delimiter, so a typical environment variable is expected to follow this format: 
NAME= 
The library functions provided for programs to manipulate their environment 
generally work with this expectation. These functions are described in the following 
paragraphs. 
The getenv() function is used to look up environment variables by name and retrieve 
their corresponding values: 
char *getenv(const char *name); 
It takes a single argument, which is the name of the environment variable to retrieve, 
and searches through the program's environment for that variable. Say you call it like 
this: 
res = getenv("bob"); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
610 
getenv() would go through each string in the environment, starting at the first one in 
the array pointed to by environ. The first environment string it finds starting with the 
four characters bob= will be returned to the caller (actually, it returns a pointer to the 
byte immediately following the = character). So for an environment string defined as 
bob=, getenv("bob") would return a pointer to the string test.getenv() is supported 
across practically all UNIX environments. 
The setenv() function is used to add or update environment variables: 
int setenv(const char *name, const char *val, int rewrite); 
This function takes a name of an environment variable and a potential value. If the 
name environment variable doesn't exist, the function creates it and sets it to the value 
indicated in the second argument. If the name environment variable does exist, the 
behavior depends on the rewrite argument. If it's set, setenv() replaces the existing 
environment variable, but if it's not, setenv() doesn't do anything to the 
environment. 
If setenv() needs to add a new environment variable to the array pointed to by 
environ, it can run into one of two situations. If the original environ set up by the 
kernel is still in use, setenv() calls malloc() to get a new location to store the array of 
environment variables. On the other hand, if environ has already been allocated on 
the process heap, setenv() uses realloc() to resize it. setenv() usually allocates 
memory off the heap to store the environment variable string, unless there's room to 
write over an old value. 
On the surface, the putenv() function seems similar to setenv(): 
int putenv(const char *str); 
However, there's an important difference between the two. putenv() is used for 
storing an environment variable in the environment, but it expects the user to provide 
a full environment string in str in the form NAME=. putenv() replaces any existing 
environment variable by that name. On many systems, putenv() actually places the 
user-supplied string in str directly in the environment array. It doesn't allocate a copy 
of the string as setenv() does, so if you give it a pointer to a string you modify later, 
you're tampering with the program's environment. Under BSD systems, however, 
putenv() does allocate a copy of the string; it's implemented as a wrapper around 
setenv(). 
Note 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
611 
Linux used to allocate a copy of the environment string in the past, but changed this 
behavior in recent glibc versions. The man page on a Linux system for putenv() 
explicitly notes this behavior change in the Notes section: 
The putenv() function is not required to be reentrant, and the one in libc4, libc5 and 
glibc2.0 is not, but the glibc2.1 version is. 
Description for libc4, libc5, glibc: If the argument string is of the form name, and does 
not contain an = character, then the variable name is removed from the environment. 
If putenv() has to allocate a new array environ, and the previous array was also 
allocated by putenv(), then it will be freed. In no case will the old storage associated 
to the environment variable itself be freed. 
The libc4 and libc5 and glibc 2.1.2 versions conform to SUSv2: the pointer string 
given to putenv() is used. In particular, this string becomes part of the environment; 
changing it later will change the environment. (Thus, it is an error is to call putenv() 
with an automatic variable as the argument, then return from the calling function 
while string is still part of the environment.) However, glibc 2.0-2.1.1 differs: a copy 
of the string is used. On the one hand this causes a memory leak, and on the other 
hand it violates SUSv2. This has been fixed in glibc2.1.2. 
The BSD4.4 version, like glibc 2.0, uses a copy. 
The unsetenv() function is used to remove an environment variable from the 
environment array: 
void unsetenv(const char *name); 
It searches through the array for any environment variables with the name name. For 
each one it finds, it removes it from the array by shifting all remaining pointers up one 
slot. 
The clearenv() function is used to clear the process environment completely and get 
rid of all environment variables: 
int clearenv(void); 
Binary Data 
One interesting feature of the environment is that it can be used to place arbitrary 
data at the top of the stack of a program you intend to run. While this is more of an 
interesting topic in the context of writing exploits, it's worth covering here. The kernel 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
612 
reads the environment strings you pass execve() in order and places them adjacent to 
each other at the top of the new process's stack. It works out so that you can supply 
mostly arbitrary binary data. Say you have an array like this: 
env[0]="abcd"; 
env[1]="test"; 
env[2]=""; 
env[3]="hi"; 
env[4]=""; 
env[5]= 
In memory, you would expect the kernel to create the following sequence of bytes: 
abcd\0test\0\0hi\0\0 
The use of an empty string ("") causes a single NUL byte to be written to the 
environment. Because environment strings need to be preserved across a call to 
execve(), the strings need to be manually copied into the new process's address 
space before the new program can be run. This is logical; because execve() unmaps 
all memory of the old process, which includes environment strings. If you know where 
the stack starts for the new process (usually a known location, except when memory 
randomization mechanisms are used) and what environment variables exist, you 
know exactly where these environment strings reside in memory in the newly running 
process. The environment maintenance routines don't impose any limitations on the 
nature of data that can exist in the environment, so you're free to add binary data 
containing machine code designed to spawn a shell or another nefarious task. 
Confusing putenv() and setenv() 
Because of the slight semantic differences between putenv() and setenv(), these 
functions could possibly be used in the wrong context. To review, the putenv() 
function doesn't actually make a copy of the string you're setting in the environment 
in many systems. Instead, it just takes the pointer you pass and slots it directly into 
the environment array. This behavior is definitely a problem if you can modify data 
that is being pointed to later on in the program, or if the pointer is discarded, as 
shown in the following example: 
int set_editor(char *editor) 
{ 
    char edstring[1024]; 
    snprintf(edstring, sizeof(edstring), "EDITOR=%s", editor); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
613 
    return putenv(edstring); 
} 
This function seems to be doing the right thing, but there's a problem: The edstring 
variable is directly imported into the environment array (providing that it is not being 
run on BSD or older Linux versions). In this example, a local stack variable is inserted 
in the environment. Since stack variables are automatically cleaned up when the 
function returns, the pointer in the environment then points to undefined stack data! 
Through careful manipulation of the program, attackers might be able control data 
placed on the stack where edstring used to be and hence introduce arbitrary 
variables into the environment. 
A bug of this nature might also surface when applications are designed to work on a 
number of platforms. Specifically, if Solaris is one of the target platforms, developers 
are required to use putenv() because Solaris doesn't implement setenv(). Here's a 
slightly modified example showing what this code might look like: 
int set_editor(char *editor) 
{ 
#ifdef _SOLARIS 
    char edstring[1024]; 
    snprintf(edstring, sizeof(edstring), "EDITOR=%s", editor); 
    return putenv(edstring); 
#else 
    return setenv("EDITOR", editor, 1); 
#endif                        /* _SOLARIS */ 
} 
This code seems as though it should be functionally equivalent regardless of the 
target platform. But, as you already know, the call to putenv() is unsafe in this 
instance whereas setenv() is not. 
Another possible vulnerability is one in which the argument passed to putenv() 
contains an environment value rather than the name followed by the value. Although 
this type of error might seem unlikely, it has happened in the past. Listing 10-3 is 
from the Solaris telnetd code. 
Listing 10-3. Misuse of putenv() in Solaris Telnetd 
char    binshellvar[] = "SHELL=/bin/sh"; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
614 
if (curshell = getenv("SHELL")) { 
    oldshell = strdup(curshell); 
    (void) putenv(binshellvar); 
} else 
    oldshell = (char *)NULL; 
... 
if (oldshell) 
    (void) putenv(oldshell); 
The SHELL variable is retrieved from the environment and then later reinserted in the 
environment with putenv() without prepending SHELL=. If users can supply the SHELL 
variable, they are able make the value of that variable an arbitrary environment 
name-and-value pair (such as LD_PRELOAD=) and thus introduce potentially dangerous 
environment values into the program that might lead to further compromise. 
Note 
Upon further examination, it turns out this bug isn't exploitable, because even though 
environment variables have been read from the user during option negotiation, they 
haven't been entered in the environment at this point in execution. However, it's 
worth showing the code in Listing 10-3 because the use of putenv() is incorrect. 
Extraneous Delimiters 
You know that standard library functions expect to see environment variables with 
the NAME= format. However, consider the case where you have a variable formatted 
like this: 
NAME= 
Variations in how environment variables are formatted can be important, depending 
on how the algorithms responsible for fetching and storing values are implemented. 
Bugs of this nature have surfaced in the past in how the libc functions 
setenv()/unsetenv() work. The following is a quote from a post made by a security 
researcher named David Wagner (the post can be read in full at 
http://archives.neohapsis.com/archives/linux/lsap/2000-q3/0303.html): 
ObHistoricalNote: By the way, does anyone remember the bug in telnetd accepting 
environment variables? There was a fascinating bug explained there: setenv 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
615 
(name,val) and unsetenv(name) do not behave as expected when 'name' contains an 
'='setenv ("x=y","z") defines the environment variable called "x"; unsetenv("x=y") 
deletes the variable called "x=y". Subtle, eh? Perhaps it would be nice if setenv() 
refused to set a variable with '=' 
As a result of these problems, current setenv() and unsetenv() implementations are 
selective about allowing names with delimiters (=) in them. That said, it's usually a 
good idea to err on the side of caution when making assumptions about library 
support of production systems. 
Extending on this idea, if an application decides to manually edit the environment 
without the aid of library APIs, comparing how variables are found and how they are 
set is a good idea. These functions should be complementary, and if they're not, the 
opportunity to insert variables that should have been weeded out might be possible. 
After all, libcs for a number of UNIX variants made these mistakes in the past, and so 
it's likely that developers writing new code will fall into the same traps. The same 
possibility exists for simulated environments (such as those generated by scripting 
languages). If in principle they're attempting to achieve the same effect with a 
synthesized environment structure, they are liable to make the same sort of mistakes. 
For example, take a look at these two functions: 
struct env_ent { 
    char *name, 
    char *value; 
    struct env_ent *next; 
}; 
int process_register_variable(struct env_ent *env, 
char *valuepair) 
{ 
    char *val; 
    int i, name_len; 
    struct env_ent *env0 = env; 
    val = strchr(valuepair, '=' 
Do you see the problem? The way that variables are located when determining 
whether to overwrite a value already in the environment differs from the way they are 
located when just fetching a value. Specifically, the use of strncmp() in 
process_register_variable() is a little faulty because it returns 0 if a length of 0 is 
passed to it. If the string = is passed in, the function replaces the first entry in the 
environment with the value BOB! 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
616 
Another important problem to focus on is code that makes the assumption about 
input not containing extraneous delimiters when using putenv(). Consider the 
following example: 
int set_variable(char *name) 
{ 
    char *newenv; 
    intlength = strlen("APP_") + strlen("=new") + strlen(name) + 1; 
    newenv = (char *)malloc(length); 
    snprintf(newenv, length, "APP_%s=new", name); 
    return putenv(newenv); 
} 
The set_variable() function makes the assumption that the name variable doesn't 
contain a delimiter. However, if it does, the user is free to select an arbitrary 
environment value for the variable, which obviously isn't what the code intended. 
Duplicate Environment Variables 
Another potential pitfall in programs that interact with environment variables is 
having more than one variable with the same name defined in the environment. This 
error was more of a problem in the past because many libc implementations 
neglected to remove multiple instances of a variable (because of faulty unsetenv() 
implementations). Having said that, it's still an issue occasionally, so keep it in mind 
when you're auditing environment sanitization code for two reasons: 
Although most modern UNIX implementations now have environment APIs 
that are quite thorough in managing variables, you can't assume that the 
deployment environment of an application will provide a safe libc 
implementation. Depending on the application and its intended purpose, it 
might be destined for installation on older systems that are vulnerable to some 
of the tricks described previously. 
Every now and then a program might choose to manually manipulate the 
environment instead of using the libc functions. In these cases, the program 
could make the same mistakes that were made in older implementations of 
libc. 
If the function terminates when it finds the requested variable in question, it's likely 
vulnerable to attackers sneaking values through by setting multiple instances of the 
same value. This problem existed in the loadmodule program in SunOS 4.1.x. The 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
617 
environment was manually cleaned out before a call to system() to stop attackers 
from setting the IFS variable (discussed later in "Other Environment Variables") and, 
therefore, being able to run arbitrary commands with root privileges. Unfortunately, 
the code neglected to correctly deal with multiple instances of the same variable 
being set, so the call to system() was still vulnerable to exploitation. This bug is 
documented at www.osvdb.org/displayvuln.php?osvdb_id=. 
To cite a more recent example, the accomplished researcher Solar Designer noted a 
problem in the Linux loader supplied with older versions of glibc. The loader checks for 
the existence of environment variables prefixed with LD_ and uses them to determine 
behavioral characteristics of how the loader functions. These variables allow loading 
additional or alternate libraries into the process's address space. Naturally, this 
behavior isn't desirable for setuid applications, so these variables were filtered out of 
the environment when loading such a program. However, a bug in the loaders 
unsetenv() function caused it to neglect filtering out duplicate environment variables 
correctly, as shown in the following code: 
static void 
_dl_unsetenv(const char *var, char **env) 
{ 
        char *ep; 
        while ((ep = *env)) { 
                const char *vp = var; 
                 while (*vp && *vp == *ep) { 
                         vp++; 
                         ep++; 
                 } 
                 if (*vp == '\0' && *ep++ == '='env++; 
        } 
} 
When a variable is found that needs to be stripped, this function moves all other 
environment variables after it back one place in the environment array. However, 
then it increments the environment variable pointer (env), so if two entries with the 
same name are in the environment right next to each other, the program misses the 
second instance of the variable! 
Note 
During the process of researching loader behavior for this book, the authors noticed 
that as of this writing, this bug is also present in the ELF loader shipped with the 
OpenBSD (3.6) version. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
618 
So even when code does attempt to deal with multiple instances of the same variable, 
a program might accidentally expose itself to potential security risks if it doesn't 
analyze the environment correctly. 
Common Environment Variables 
Now that you're familiar with the details of how a typical UNIX environment is 
managed, you can begin to examine some common variables used by applications. 
The variables described in the following sections are just a few of the environment 
variables you'll encounter regularly in applications you audit, so don't assume that 
variables not listed here are innocuous. 
Shell Variables 
A number of variables can modify how the typical UNIX shell behaves. Many of these 
values are always present because they're initialized with default values if a shell is 
started without them. You have already seen that system shells can play a big part in 
how applications operate when indirect program invocation is used or privileged shell 
scripts are running. Many other programs use a number of these variables as well. 
Note that in contemporary UNIX variants, many of these variables are considered 
potentially dangerous and are filtered out when a setuid process runs. Still, this is by 
no means true of all systems. Also, keep in mind that those applications you interact 
with remotely and supply environment variables to are not automatically subject to 
the same environment restrictions if the program isn't setuid. 
PATH 