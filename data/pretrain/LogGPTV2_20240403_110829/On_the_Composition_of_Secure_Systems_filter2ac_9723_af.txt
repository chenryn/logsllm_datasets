### 3. Analysis of PSP Objects and Information Flow

The flow that PSP (Probabilistic Security Policy) objects to might, upon further analysis, not pose a threat to the system. The definitions of PSP and information flow provide insight into what constitutes a security property. Specifically, the definition of PSP is established by specifying the elements that must be present in the low-level equivalent set for a low-level observation.

**Definition 4.7: Security Properties**

A system satisfies a security property if and only if all low-level equivalent sets satisfy the security property predicate \( P \). Formally, this can be expressed as:
\[ \forall t \in \text{traces}(S) \mid L \vdash P(B_{\text{low}}(t, S)) \]

We will use \( P(S) \) to indicate that system \( S \) satisfies property \( P \).

A security property ensures that certain traces are included in the low-level equivalent set. This does not imply that other traces cannot also be present in this set. For example, if property \( P_1 \) implies property \( P_2 \) and the component is known to satisfy \( P_2 \), it may also satisfy \( P_1 \), but this is not guaranteed. The property specifies what must occur, and all other traces are coincidental and can vary from component to component.

For each security property, there exists a set of traces that are guaranteed to be consistent with the property. The following definition will be used to identify this set:

**Definition 4.8: Guaranteed Low-Level Equivalent Set**

We will write \( GP(t, S) \) to identify the set of traces that property \( P \) guarantees will be present for trace \( t \) in System \( S \). We will write \( Gp(t) \) if the system is obvious from the context.

This set should not be confused with \( B_{\text{low}}(t, S) \), which gives the set of all traces with the same low-level events. \( Gp(t, S) \) is the set of traces that are required to be present in the set \( T \) of the system for the system to satisfy \( P \). Clearly, if a system \( S \) satisfies a property \( P \), then \( Gp(t, S) \subseteq B_{\text{low}}(t, S) \).

We have been deliberately vague about how security properties can be expressed. In the next section, we will examine some of the security properties presented in the literature to demonstrate how they can be expressed. The security properties we will present and analyze in Chapter 5 are intended to illustrate the power of our framework and how other frameworks and ad hoc approaches to security fail.

### 4.4.1. Noninference

Noninference was introduced by O’Halloran [O’Halloran90]. It aims to separate low-level activity from high-level activity. Informally, Noninference requires that for any trace of the system, removing all high-level events results in a valid trace.

Noninference is too strong for systems that have high-level outputs without high-level inputs. For example, consider a system whose only function is to keep a journal of all low-level events on a high-level device. This system is secure because the low-level user does not know anything about what high-level users are doing. However, this system does not satisfy the Noninference property.

McLean [McLean94] extends Noninference as follows: For any trace \( t \), it must be possible to find another trace \( s \) such that the low-level events of \( t \) are equal to those of \( s \) and \( s \) has no high-level inputs. McLean calls this stronger property Generalized Noninference.

Formally, Generalized Noninference can be expressed as:
\[ \forall t \in \text{traces}(S) \mid L \vdash GN(B_{\text{low}}(t, S)) \]
\[ GN(B) \equiv \forall t \in B \vdash t|HI = \langle \rangle \]

This satisfies the definition of a security property. The \( GN \) predicate ensures that a trace without any high-level inputs is always possible for any low-level observation. Therefore, for all possible low-level observations, a trace can be found with the same low-level events but with no high-level inputs.

For Generalized Noninference, the guaranteed indistinguishable set can be expressed as:
\[ GGN(t, S) = \{ s \in \text{traces}(S) \mid s|L = t|L \land s|HI = \langle \rangle \} \]

### 4.4.2. Noninterference

Noninterference is a security property introduced by Goguen and Meseguer [Goguen & Meseguer82, Goguen & Meseguer84]. It captures the idea that system security is preserved whenever high-level users are prevented from influencing the behavior of low-level users. Goguen and Meseguer’s original definition of Noninterference was only applicable to deterministic systems. McCullough [McCullough87, McCullough88] extended the definition to encompass non-deterministic systems.

McCullough's definition of Generalized Noninterference (GNI) can be informally defined as follows: Given a trace \( t \), modifying it by inserting or deleting high-level inputs results in a sequence \( s' \), which is not necessarily a valid trace. This is referred to as a perturbation of \( t \). It must be possible to construct a valid trace \( t' \) from \( s' \) by inserting or deleting high-level outputs. This is called a correction to the perturbation.

Formally, Generalized Noninterference can be defined as:
\[ GNI(A) \equiv \forall t \in \text{interleave}(HI^*, t_{\text{low}}) \mid L \vdash \exists s \in A \mid t = s|(L \cup HI) \]

To simplify the presentation of the GNI predicate, we use \( t_{\text{low}} \) to represent the low-level trace, which can be extracted from any member of \( A \).

Once the security predicate has been written, the set of traces that are guaranteed to look like a particular trace \( t \) to the low-level user can be formed:
\[ GGNI(t, S) = \{ s \in \text{traces}(S) \mid \exists t \in \text{interleave}(HI^*, t_{\text{low}}) \mid s|L = t|L \land s|(L \cup HI) = t \} \]

### 4.4.2.1. Forward Correctability

The above definition of Generalized Noninterference is different from McCullough’s original definition. The above definition allows a correction to a perturbation to occur at any point in the trace, even before the perturbation. McCullough called the possibility of correcting before the perturbation a “violation of causality.” We will show in section 7.5.1 that this violation can only occur in a non-deterministic system.

We can also define a causal or Forward Correctable version of GNI where corrections can only occur after the perturbation. Unless otherwise specified, when referring to Generalized Noninterference, we will refer to the one defined in the previous section.

### 4.4.3. Non-Deducible Output Security

The previous two examples were security properties founded on the notion of preventing a low-level user (LLU) from deducing anything about high-level inputs. Our definition of security is not limited to this type of security. To illustrate a different form of security, we present Guttman and Nadel's Non-Deducible Output Security [Guttman & Nadel88]. In this example, we start with the formal description of the property and demonstrate how it can be analyzed.

Non-Deducible Output Security can be expressed as:
\[ NDO(A) \equiv \forall t \in \text{traces}(S) \mid t|LI = t_{\text{low}}|LI \vdash \exists s \in A \mid s|(H \cup LI) = t|(H \cup LI) \]

Once again, we use \( t_{\text{low}} \) to simplify the notation, which can be extracted from any trace of the bunch \( A \).

The analysis of a property begins by writing the security property in a form where it is obvious which traces look like a trace \( t \) to an LLU:
\[ GNDO(t, S) = \{ s \in \text{traces}(S) \mid t|LI = t_{\text{low}}|LI \land s|L = t|L \land s|(H \cup LI) = t|(H \cup LI) \} \]

If the LLU sees a trace \( t \), they can determine the set \( B_{\text{low}}(t, S) \). All these traces are indistinguishable to a low-level user from a trace \( s \) that has the same low-level events as \( t \) but the high-level events come from another trace that has the same low-level input events. Since the low-level user cannot determine which high-level events were chosen, the observation of \( t_{\text{low}} \) gives the user no new information about high inputs or outputs. Furthermore, since the merging was performed arbitrarily, the low observation is also compatible with all interleavings and thus gives no information about which interleaving occurred.

Output Non-Deducibility cannot be expressed in McLean’s Selective Interleaving Framework. This property is not the interleavings of two traces (see section 6.2).

### 4.4.4. Separability

Separability is an example of perfect security [McLean94]. Separability is perfect security because no interaction is allowed between high-level and low-level events. It is like having two separate systems, one running the high-level processes and one running the low-level processes. Separability can be defined as follows: For every pair of traces \( t_1 \) and \( t_2 \), the trace \( t \) such that \( t|L = t_1|L \) and \( t|H = t_2|H \) is a valid trace.

No matter what the low-level user observes, every possible sequence of high-level events is possible. Therefore, the low-level user cannot gain any new information.

This property can be formalized as:
\[ \text{SEPARABILITY}(A) \equiv \forall t \in \text{traces}(S) \mid L \vdash \text{SEPARABILITY}(B_{\text{low}}(t, S)) \]
\[ G\text{SEPARABILITY}(t, S) = \{ s \in \text{traces}(S) \mid \forall t \in \text{traces}(S) \mid H \vdash \text{interleave}(t, t_{\text{low}}) \in A \} \]

### 4.5. Comparing Security Properties

Before comparing security properties, we must decide what it means to compare them. Consider any component \( C_1 \) that satisfies property \( P_1 \) and any component \( C_2 \) that satisfies \( P_2 \). We can ask whether \( C_1 \) always satisfies \( P_2 \). If it does, then property \( P_2 \) is weaker than \( P_1 \). If \( C_2 \) always satisfies \( P_1 \), then \( P_1 \) is weaker than \( P_2 \). If neither is true, then \( P_1 \) and \( P_2 \) are not comparable. By performing the above comparison between all properties, a partial ordering of properties can be constructed.

Our formalism provides a mechanical method of evaluating the relative strengths of security properties. Since we have a logical expression for our properties, the comparison is simple. To compare properties \( P \) and \( Q \), evaluate \( P \Rightarrow Q \) and \( Q \Rightarrow P \). If the first statement is true, then \( P \) is stronger than \( Q \). If the second statement is true, then \( Q \) is stronger than \( P \). If both are true, the properties are equal, and if neither is true, they are not comparable.

**Example 4.2: Comparing Generalized Noninference to Generalized Noninterference**

We reproduce the definitions of Generalized Noninference and Generalized Noninterference here:
\[ GN(B) \equiv \forall t \in B \vdash t|HI = \langle \rangle \]
\[ GNI(B) \equiv \forall t \in \text{interleave}(HI^*, t_{\text{low}}) \mid L \vdash \exists s \in B \mid t = s|(L \cup HI) \]

First, we show that GNI implies Generalized Noninference:
\[ \forall t \in \text{traces}(S) \mid L \vdash GNI(B_{\text{low}}(t, S)) \]
\[ \equiv \forall t \in \text{interleave}(HI^*, t_{\text{low}}) \mid L \vdash \exists s \in B_{\text{low}}(t, S) \mid t = s|(L \cup HI) \]
\[ \equiv \forall t \in \text{interleave}(HI^*, t_{\text{low}}) \mid L \vdash \exists s \in B_{\text{low}}(t, S) \mid t|L = s|L \land t|HI = s|HI \]
\[ \equiv \forall t \in \text{interleave}(HI^*, t_{\text{low}}) \mid L \vdash \exists s \in B_{\text{low}}(t, S) \mid \langle \rangle = s|HI \]
\[ \equiv \forall t \in \text{traces}(S) \mid L \vdash GN(B_{\text{low}}(t, S)) \]

Now, we show that Generalized Noninference does not imply GNI:
\[ \forall t \in \text{traces}(S) \mid L \vdash GN(B_{\text{low}}(t, S)) \]
\[ \equiv \forall t \in \text{traces}(S) \mid L \vdash \forall t \in B_{\text{low}}(t, S) \mid t|HI = \langle \rangle \]
\[ \not\Rightarrow \forall t \in \text{traces}(S) \mid L \vdash GNI(B_{\text{low}}(t, S)) \]

Therefore, GNI is stronger than Generalized Noninference.