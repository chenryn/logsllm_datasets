    ```
    输出再次被截断以显示相关的网络详细信息:
    ![Figure 6.11: Output of the Networks section of the alpinedns2 container instance ](img/B15021_06_11.jpg)
    图 6.11:alpinds2 容器实例的网络部分的输出
    在前面的输出中可以观察到`alpinedns2`容器有一个`192.168.54.3`的 IP 地址，这是`dnsnet`子网内的一个不同的 IP 地址。
17.  Run the `docker exec` command to access a shell in the `alpinedns1` container:
    ```
    $ docker exec -it alpinedns1 /bin/sh
    ```
    这将把你放入容器内部的一个根外壳中。
18.  Once inside the `alpinedns1` container, use the `ping` utility to ping the `alpinedns2` container:
    ```
    / # ping alpinedns2
    ```
    `ping`输出应该显示成功连接到`alpinedns2`容器实例的网络:
    ```
    PING alpinedns2 (192.168.54.3): 56 data bytes
    64 bytes from 192.168.54.3: seq=0 ttl=64 time=0.278 ms
    64 bytes from 192.168.54.3: seq=1 ttl=64 time=0.233 ms
    ```
19.  Use the `exit` command to return to your primary terminal. Use the `docker exec` command to gain access to a shell inside the `alpinedns2` container:
    ```
    $ docker exec -it alpinedns2 /bin/sh
    ```
    这会让你掉到`alpinedns2`容器内的一个壳里。
20.  Use the `ping` utility to ping the `alpinedns1` container by name:
    ```
    $ ping alpinedns1
    ```
    输出应显示来自`alpinedns1`容器的成功响应:
    ```
    PING alpinedns1 (192.168.54.2): 56 data bytes
    64 bytes from 192.168.54.2: seq=0 ttl=64 time=0.115 ms
    64 bytes from 192.168.54.2: seq=1 ttl=64 time=0.231 ms
    ```
    注意
    与传统链接方法相反，Docker DNS 允许同一 Docker 网络中的容器之间的双向通信。
21.  Use the `cat` utility inside any of the `alpinedns` containers to reveal that Docker is using true DNS as opposed to `/etc/hosts` file entries inside the container:
    ```
    # cat /etc/hosts
    ```
    这将显示相应容器内`/etc/hosts`文件的内容:
    ```
    127.0.0.1  localhost
    ::1  localhost ip6-localhost ip6-loopback
    fe00::0    ip6-localnet
    ff00::0    ip6-mcastprefix
    ff02::1    ip6-allnodes
    ff02::2    ip6-allrouters
    192.168.54.2    9b57038fb9c8
    ```
    使用`exit`命令终止`alpinedns2`容器内部的 shell 会话。
22.  使用`docker stop`命令
    ```
    $ docker stop  containerlink1
    $ docker stop  containerlink2
    $ docker stop  alpinedns1
    $ docker stop  alpinedns2
    ```
    停止所有正在运行的容器，从而清理您的环境
23.  Use the `docker system prune -fa` command to clean the remaining stopped containers and networks:
    ```
    $ docker system prune -fa
    ```
    成功执行该命令将清理`dnsnet`网络以及容器实例和映像:
    ```
    Deleted Containers:
    69ecb9ad45e16ef158539761edc95fc83b54bd2c0d2ef55abfba1a300f141c7c
    9b57038fb9c8cf30aaebe6485e9d223041a9db4e94eb1be9392132bdef632067
    Deleted Networks:
    dnsnet
    Deleted Images:
    untagged: alpine:latest
    untagged: alpine@sha256:9a839e63dad54c3a6d1834e29692c8492d93f90c
        59c978c1ed79109ea4fb9a54
    deleted: sha256:f70734b6a266dcb5f44c383274821207885b549b75c8e119
        404917a61335981a
    deleted: sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b
        b3b61c946a5741a
    Total reclaimed space: 42.12M
    ```
    系统清理输出的每个部分将识别并删除不再使用的 Docker 资源。在这种情况下，它将删除`dnsnet`网络，因为该网络中当前没有部署容器实例。
在本练习中，您了解了使用名称解析在 Docker 网络上实现容器间通信的好处。使用名称解析是有效的，因为应用不必担心其他运行容器的 IP 地址。相反，可以通过简单地按名称调用其他容器来启动通信。
我们首先探索了名称解析的传统链接方法，通过该方法，运行的容器可以建立一个关系，利用容器的`hosts`文件中的条目利用单向关系。在容器之间使用域名系统的第二种也是更现代的方法是创建用户定义的 Docker 网络，该网络允许双向解析域名系统。这将使网络上的所有容器能够通过名称或容器标识解析所有其他容器，而无需任何额外的配置。
正如我们在本节中看到的，Docker 提供了许多独特的方法来为容器实例提供可靠的网络资源，例如在同一 Docker 网络上的容器之间启用路由，以及在容器之间启用本地 DNS 服务。这只是 Docker 提供的网络选项的表面。
在下一节中，我们将了解如何使用其他类型的网络驱动程序部署容器，以便在部署容器化基础架构时真正提供最大的灵活性。
# 本机 Docker er 网络驱动程序
由于 Docker 是近年来得到最广泛支持的容器平台之一，因此 Docker 平台已经通过了众多生产级网络场景的审查。为了支持各种类型的应用，Docker 提供了各种网络驱动程序，可以灵活地创建和部署容器。这些网络驱动程序允许容器化应用在几乎任何直接受裸机或虚拟化服务器支持的网络配置中运行。
例如，可以部署共享主机服务器网络栈的容器，或者在允许从底层网络基础架构为它们分配唯一 IP 地址的配置中部署容器。在本节中，我们将了解基本的 Docker 网络驱动程序，以及如何利用它们为各种类型的网络基础架构提供最大的兼容性:
*   `bridge` : A `bridge`是 Docker 将在其中运行容器的默认网络。如果在启动容器实例时没有定义任何内容，Docker 将使用`docker0`接口后面的子网，其中容器将被分配一个`172.17.0.0/16`子网中的 IP 地址。在`bridge`网络中，容器与`bridge`子网中的其他容器有网络连接，也有到互联网的出站连接。到目前为止，我们在本章中创建的所有容器都在`bridge`网络中。Docker `bridge`网络通常用于简单的 TCP 服务，这些服务只公开简单的端口或需要与存在于同一主机上的其他容器进行通信。
*   `host`:在`host`联网模式下运行的容器可以直接访问主机的网络栈。这意味着暴露给容器的任何端口也暴露给运行容器的主机上的相同端口。该容器还可以看到主机上运行的所有物理和虚拟网络接口。`host`当运行消耗大量带宽或利用多种协议的容器实例时，网络通常是首选。
*   `none`:网络`none`不为部署在该网络中的容器提供网络连接。部署在`none`网络中的容器实例只有一个环回接口，根本无法访问其他网络资源。没有驱动程序运行此网络。使用`none`网络模式部署的容器通常是在存储或磁盘工作负载上运行的应用，不需要网络连接。出于安全目的与网络连接隔离的容器也可以使用此网络驱动程序进行部署。
*   `macvlan` : `macvlan`在 Docker 中创建的网络用于您的容器化应用需要一个 MAC 地址和到底层网络的直接网络连接的场景。使用`macvlan`网络，Docker 将通过主机上的物理接口为您的容器实例分配一个 MAC 地址。这使得您的容器在部署的网段上显示为物理主机。需要注意的是，很多云环境，比如 AWS、Azure 以及很多虚拟化虚拟机管理程序都不允许在容器实例上配置`macvlan`网络。`macvlan`网络允许 Docker 基于连接到主机的物理网络接口从底层网络分配容器 IP 地址和 MAC 地址。如果配置不正确，使用`macvlan`联网很容易导致 IP 地址耗尽或 IP 地址冲突。`macvlan`容器网络通常用于非常具体的网络用例，例如监控网络流量模式或其他网络密集型工作负载的应用。
没有对 **Docker 覆盖网络**的简要概述，关于 Docker 网络的任何对话都是不完整的。`Overlay`联网是 Docker 如何处理与 Swarm 集群的联网。当在节点之间定义 Docker 集群时，Docker 将使用将节点链接在一起的物理网络来定义在节点上运行的容器之间的逻辑网络。这允许容器在集群节点之间直接相互对话。在*练习 6.03，探索 Docker 网络*中，我们将了解 Docker 默认支持的各种类型的 Docker 网络驱动程序，例如`host`、`none`和`macvlan`。在*练习 6.04* 、*定义覆盖网络*中，我们将定义一个简单的 Docker 群集群，以了解在集群模式下配置的 Docker 主机之间的`overlay`网络如何工作。
## 练习 6.03:探索 Docker 网络
在本练习中，我们将研究 Docker 默认支持的各种类型的 Docker 网络驱动程序，例如`host`、`none`和`macvlan`。我们将从`bridge`网络开始，然后研究`none`、`host`和`macvlan`网络:
1.  First, you need to get an idea of how networking is set up in your Docker environment. From a Bash or PowerShell terminal, use the `ifconfig` or `ipconfig` command on Windows. This will display all the network interfaces in your Docker environment:
    ```
    $ ifconfig
    ```
    这将显示所有可用的网络接口。你应该会看到一个名为`docker0`的`bridge`界面。这是 Docker `bridge`接口，用作默认 Docker 网络的入口(或入口点):
    ![Figure 6.12: Example ifconfig output from your Docker development environment ](img/B15021_06_12.jpg)
    图 6.12:Docker 开发环境的 ifconfig 输出示例
2.  Use the `docker network ls` command to view the networks available in your Docker environment:
    ```
    $ docker network ls
    ```
    这将列出之前定义的三种基本网络类型，显示网络标识、Docker 网络名称以及与网络类型相关的驱动程序:
    ```
    NETWORK ID       NAME      DRIVER     SCOPE
    50de4997649a     bridge    bridge     local
    f52b4a5440ad     host      host       local
    9bed60b88784     none      null       local
    ```
3.  View the verbose details of these networks using the `docker network inspect` command, followed by the ID or the name of the network you want to inspect. In this step, you will view the verbose details of the `bridge` network:
    ```
    $ docker network inspect bridge
    ```
    Docker 将以 JSON 格式显示`bridge`网络的详细输出:
    ![Figure 6.13: Inspecting the default bridge network ](img/B15021_06_13.jpg)
    图 6.13:检查默认网桥网络
    该输出中需要注意的一些关键参数是`Scope`、`Subnet`和`Gateway`关键词。根据这个输出，可以观察到这个网络的范围只有本地主机(`Scope: Local`)。这表示 Docker 群集中的主机之间不共享网络。该网络在`Config`部分下的`Subnet`值为`172.17.0.0/16`，子网的`Gateway`地址为定义的子网(`172.17.0.1`内的一个 IP 地址。子网的`Gateway`值必须是该子网内的一个 IP 地址，以便部署在该子网中的容器能够访问该网络范围之外的其他网络。最后，该网络与主机接口`docker0`相连，主机接口将作为网络的`bridge`接口。`docker network inspect`命令的输出非常有助于全面了解部署在该网络中的容器的行为。
4.  View the verbose details of the `host` network using the `docker network inspect` command:
    ```
    $ docker network inspect host
    ```
    这将以 JSON 格式显示`host`网络的详细信息:
    ![Figure 6.14: docker network inspect output for the host network ](img/B15021_06_14.jpg)
    图 6.14:主机网络的 docker 网络检查输出
    如您所见，`host`网络中没有太多配置。由于它使用`host`网络驱动程序，所有容器的网络将与主机共享。因此，这种网络配置不需要定义特定的子网、接口或其他元数据，就像我们之前在默认的`bridge`网络中看到的那样。
5.  Investigate the `none` network next. Use the `docker network inspect` command to view the details of the `none` network:
    ```
    docker network inspect none
    ```
    详细信息将以 JSON 格式显示:
    ![Figure 6.15: docker network inspect output for the none network ](img/B15021_06_15.jpg)
    图 6.15:无网络的 docker 网络检查输出
    类似于`host`网络，`none`网络大多是空的。由于部署在该网络中的容器通过利用`null`驱动程序将没有网络连接，因此不太需要配置。
    注意
    请注意`none`和`host`网络的区别在于它们使用的驱动程序，尽管配置几乎相同。在`none`网络中启动的容器根本没有网络连接，也没有网络接口分配给容器实例。然而，在`host`网络中启动的容器将与主机系统共享网络栈。
6.  Now create a container in the `none` network to observe its operation. In your terminal or PowerShell session, use the `docker run` command to start an Alpine Linux container in the `none` network using the `--network` flag. Name this container `nonenet` so we know that it is deployed in the `none` network:
    ```
    $ docker run -itd --network none --name nonenet alpine:latest 
    ```
    这将在`none`网络中拉出并启动一个 Alpine Linux Docker 容器。
7.  Use the `docker ps` command to verify whether the container is up and running as expected:
    ```
    $ docker ps 
    ```
    输出应显示`nonenet`容器启动并运行:
    ```
    CONTAINER ID    IMAGE            COMMAND      CREATED 
      STATUS              PORTS              NAMES
    972a80984703    alpine:latest    "/bin/sh"    9 seconds ago
      Up 7 seconds                           nonenet
    ```
8.  Execute the `docker inspect` command, along with the container name, `nonenet`, to get a deeper understanding of how this container is configured:
    ```
    $ docker inspect nonenet
    ```
    `docker inspect`的输出将以 JSON 格式显示完整的容器配置。此处提供了突出显示`NetworkSettings`部分的截断版本。密切关注`IPAddress`和`Gateway`设置: