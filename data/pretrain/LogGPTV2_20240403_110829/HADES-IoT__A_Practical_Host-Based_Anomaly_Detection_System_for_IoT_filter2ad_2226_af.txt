7.3 Potential Attacks on HADES-IoT
Buffer Overflow and Code Injection. Buffer overflow attacks
take advantage of an unhandled write to a program’s buffer and
writing the malicious data beyond the boundary of a buffer. Code in-
jection attacks exploit an improper input validation and enables the
injection of malicious code into the program. In both cases, an at-
tacker can modify a program’s execution flow by crafting a specific
payload and writing it to the memory. In general, HADES-IoT does
not cover this kind of attack, since it does not check the memory
content of a process. However, it is important to consider the goal of
the attacker. If the attacker performs a code injection attack in order
to manipulate the vulnerable service itself, without executing any
other program, HADES-IoT does not detect it. On the other hand,
there are simple protection countermeasures such as address space
layout randomization (ASLR) and non-executable stack, which in
combination with HADES-IoT can provide full protection. If the
goal of the attacker is to remotely execute a shell command, e.g.,
with an intention to open a reverse shell or download malicious
binaries via the FTP client, the attacker will fail, as these programs
would not be included in the whitelist. Although HADES-IoT is un-
able to detect the initial phase of such an attack, it will still protect
the IoT device in the later phase, when an “anomalous” binary is
executed.
Utilization of Whitelisted Programs. Assuming that the attacker
knows the set of programs in the whitelist, he can potentially chain
these programs to conduct an attack similar to return-oriented
programming (ROP) [25]. Since HADES-IoT only checks the pa-
rameters of programs in specific cases, such an attack would not be
detected. Note that this attack is possible given HADES-IoT’s design,
hence it cannot be fully prevented; however, it can be mitigated by
more fine-grained logic of the whitelist.
7.4 Possible Extensions
In this section, we present possible extensions aimed at improving
practical features of HADES-IoT. These features are not part of
the proof-of-concept, as they do not improve the detection perfor-
mance.
Malware Collection. In order to hide traces, it is a common prac-
tice for malware to delete itself after its execution. Since HADES-IoT
pauses program execution in its initial stage, we are able to retrieve
the binary of malware before it is (potentially) deleted. Therefore,
in addition to the reporting subsystem (see Section 4.5.1), HADES-
IoT can be enhanced by the capability of collecting and reporting
suspicious binaries. Such a capability would enable us to collect the
latest malware samples.
Automated Extraction of Configuration. To ensure the com-
patibility of HADES-IoT with a Linux kernel on a particular IoT
device, some configuration options must be extracted from the de-
vice (see Section 3.2) and stored in the kernel configuration file.
Since the configuration file consists of information about all of the
options set, it can be parsed and adjusted in an automated fash-
ion instead of being adjusted by manual configuration. Therefore,
the kernel configuration process performed at the user’s computer
could be automated by running a script that would connect to an
IoT device, issue necessary commands for extraction of the impor-
tant data, and based on that, modify the stock configuration file of
a vanilla Linux. Next, the configuration file obtained would be used
for the compilation of the required kernel’s parts, enabling proper
compilation of HADES-IoT.
8 RELATED WORK
In this section, we discuss works aimed at host-based intrusion
detection systems for IoT devices. An anomaly-based approach
is provided by Yoon et al. [32]; the authors present a lightweight
method based on the distribution of system call frequencies. By
utilizing a cluster analysis, they first learn the benign execution con-
text, and then a device is monitored in real-time to detect anomalies.
However, the authors only consider attacks that alter system calls
in benign programs and use only one sample for their evaluation
(i.e., Motion). A lightweight IDS that focuses on smart meters is
proposed in [28]; this research is based on system call sequences,
where the benign program is represented by a finite state machine
(FSM). The system calls are captured by the strace utility and stored
in a log file. Using strace for system call collection, the authors
incur only 1% of performance overhead. On the other hand, the
second component compares the captured system calls stored in
the log with the FSM, hence it is more resource intensive, and the
authors execute it only every 10 seconds. To lower the resource
demands, the authors consider only those system calls that an at-
tacker can possibly utilize during the attack. Using this approach,
the IDS incurs overhead of only 4%. However, the presented IDS
is designed to be used on smart meters only, so it is trained on a
single executable. On top of that, it requires the addition of annota-
tions to the smart meter software by its developers. The work of
Agarwal et al. [1] presents a concept for anomaly detection that
uses context-sensitive features based on Ball-Larus path profiling.
However, this approach requires the source code be instrumented,
which facilitates the recording of function calls during execution.
This study includes just a preliminary evaluation of the overhead
inflicted to two programs – tcpecho and consumer health IoT gate-
way, and the detection performance is not evaluated. An et al. [2]
propose behavioral anomaly detection aimed at home routers. This
research employs three semi-supervised algorithms (i.e., principal
component analysis, one-class SVM, and a naïve detector based
on unseen n-grams) utilizing captured kernel-level system calls to
determine whether a device has been compromised. The system
calls used for training are extracted from a device using the ftrace
utility. In the experiments, the trained classifiers are evaluated on
two IoT malware families – one variant of MrBlack and four vari-
ants of Mirai. The results show that all three algorithms employed
achieved a 100% detection rate with a low false alarm rate, but the
overhead inflicted by the approach is not evaluated. The downside
of the approach is that full kernel recompilation with enabled ftrace
support is required. Su et al. [27] present a lightweight image recog-
nition technique for malware classification. The proposed approach
transforms a program’s binary into images of 64x64 pixels. Such
images then serve as input to a convolutional neural network that
determines whether the analyzed program is malicious or benign.
To evaluate the performance, the authors used malware captured
by the IoTPOT honeypot [24]. They achieved 94% accuracy for two-
class classification and 81% accuracy for three-class classification
(i.e., benign, Mirai, or Gafgyt). However, the authors admit that
their approach is susceptible to complex code obfuscation. From
the industry sector, NEC announced that it has developed tamper
detection technology for IoT devices [21] that leverages ARM’s
security technology, TrustZone. The proposed approach should be
able to detect tampering with a device in just six milliseconds. The
detection method is based on memory inspection, and the vendor
claims that their approach checks only 2kB memory. The article
further states that the proposed detection method is able to discover
tampering with a device not only during the operation of the device,
but on its first activation as well (e.g., detection of supply chain
attacks). Note that thorough explanation of the approach is not
provided and evaluation is also lacking.
9 CONCLUSION
In this paper, we proposed HADES-IoT, a host-based anomaly de-
tection system for IoT devices, which provides proactive detection
and tamper-proof resistance. HADES-IoT is based on whitelisting
and utilizes system call interception which is performed within the
loadable kernel module (LKM). Thanks to the LKM, HADES-IoT
gains complete control of the execution of all user space programs,
and any execution of an unauthorized binary can be thwarted when
it starts. HADES-IoT is lightweight in terms of its size, memory,
and CPU demands. Computational overhead is only influenced by
the number of spawned processes on the device, but not by opera-
tions with the whitelist – searching in the whitelist has a constant
time complexity. In the evaluation, we showed that extraction of an
accurate device profile can be performed in an hour; HADES-IoT
also demonstrated 100% effectiveness in the detection of five kinds
of attacks.
REFERENCES
[1] Akash Agarwal, Samuel Dawson, Derrick McKee, Patrick Eugster, Matthew
Tancreti, and Vinaitheerthan Sundaram. 2017. Detecting Abnormalities in IoT
Program Executions through Control-Flow-Based Features. In Proceedings of the
Second International Conference on Internet-of-Things Design and Implementation.
ACM, 339–340.
[2] Ni An, Alexander Duff, Gaurav Naik, Michalis Faloutsos, Steven Weber, and
Spiros Mancoridis. 2017. Behavioral anomaly detection of malware on home
routers. In Malicious and Unwanted Software (MALWARE), 2017 12th International
Conference on. IEEE, 47–54.
[3] Manos Antonakakis, Tim April, Michael Bailey, Matt Bernhard, Elie Bursztein,
Jaime Cochran, Zakir Durumeric, J Alex Halderman, Luca Invernizzi, Michalis
Kallitsis, et al. 2017. Understanding the Mirai botnet. In USENIX Security Sympo-
sium. 1092–1110.
[10] Neil
J. Gunther.
UNIX Load Average,
https://www.teamquest.com/import/pdfs/whitepaper/ldavg1.pdf.
2010.
Part
1:.
[11] Ivan Homoliak. 2016. Intrusion Detection in Network Traffic. Ph.D. Dissertation.
Dissertation, Faculty of Information Technology, University of Technology Brno.
https://doi.org/10.13140/RG.2.2.25780.24963/1
[12] Ivan Homoliak, Martin Teknøs, Martîn Ochoa, Dominik Breitenbacher, Saeid
Hosseini, and Petr Hanacek. 2018. Improving Network Intrusion Detection Clas-
sifiers by Non-payload-Based Exploit-Independent Obfuscations: An Adversarial
Approach. EAI Endorsed Transactions on Security and Safety 5, 17 (12 2018).
https://doi.org/10.4108/eai.10-1-2019.156245
[13] George V. Hulme. 2012. Embedded system security much more dangerous,
Retrieved September 05,
costly than traditional software vulnerabilities.
2018 from http://www.csoonline.com/article/2131478/critical-infrastructure/
embedded-system-security-much-more-dangerous-costly-than-traditional-softwa.
html
[4] Ankit Anubhav. 2018.
Understanding the IoT Hacker – A Conversa-
tion With Owari/Sora IoT Botnet Author. https://blog.newskysecurity.com/
understanding-the-iot-hacker-a-conversation-with-owari-sora-iot-botnet-author-117feff56863
[5] Mark Boltz, Mika Jalava, and Jack Walsh. 2010. New Methods and Combinatorics
for Bypassing Intrusion Prevention Technologies. Technical Report. Stonesoft.
[6] David Canellis. 2018. Crypto-jacking epidemic spreads to 30K routers across
India. Retrieved October 19, 2018 from https://thenextweb.com/hardfork/2018/
10/05/crypto-jacking-malware-coinhive/
[7] Catalin Cimpanu. 2016. You Can Now Rent a Mirai Botnet of 400,000 Bots.
Retrieved October 19, 2018 from https://www.bleepingcomputer.com/news/
security/you-can-now-rent-a-mirai-botnet-of-400-000-bots/
[8] Prahlad Fogla, Monirul I. Sharif, Roberto Perdisci, Oleg M. Kolesnikov, and Wenke
Lee. 2006. Polymorphic Blending Attacks. In USENIX Security Symposium. 241–
256.
[9] Dan Gooding. 2018.
unimaginable
from
for-sale-ddoses-guaranteed-to-take-down-gaming-servers-just-20/
New IoT botnet offers DDoSes of once-
Retrieved October 19, 2018
https://arstechnica.com/information-technology/2018/02/
for $20.
sizes
HADES-IoT: A Practical Host-Based Anomaly Detection System for IoT Devices
[14] Leslie Lamport. 1979. Constructing digital signatures from a one-way function.
Technical Report. Technical Report CSL-98, SRI International Palo Alto.
[15] Bellevue Linux. 2006. System Call Definition. Retrieved September 05, 2018
from http://www.linfo.org/system_call.html
[16] Knud Lasse Lueth. 2018.
vices now at 7B – Market accelerating.
state-of-the-iot-update-q1-q2-2018-number-of-iot-devices-now-7b/
State of the IoT 2018: Number of IoT de-
https://iot-analytics.com/
[17] Fernando Merces. 2018.
IoT, Being Offered in the Underground.
2018
cryptocurrency-mining-malware-targeting-iot-being-offered-in-the-underground/
Cryptocurrency-Mining Malware Targeting
Retrieved October 19,
https://blog.trendmicro.com/trendlabs-security-intelligence/
[18] Ralph C Merkle. 1989. A certified digital signature. In Conference on the Theory
from
and Application of Cryptology. Springer, 218–238.
[19] Rob van der Meulen. 2017. Gartner Says 8.4 Billion Connected “Things” Will Be
in Use in 2017, Up 31 Percent From 2016. http://www.gartner.com/newsroom/
id/3598917
[20] Kerrisk Michael. 2017. Linux Programmer’s Manual. Retrieved September 05,
2018 from http://man7.org/linux/man-pages/man2/syscalls.2.html
[21] NEC. 2018. NEC develops tamper detection technology to protect IoT devices.
Retrieved October 23, 2018 from https://www.nec.com/en/press/201804/global_
20180402_01.html
[22] Richard Newell. 2016. The Biggest Security Threats Facing Embedded Design-
ers. Retrieved September 05, 2018 from http://www.electronicdesign.com/iot/
biggest-security-threats-facing-embedded-designers
[23] Nuvias. 2017. The Cost of Renting an IoT Botnet. Retrieved October 19, 2018 from
https://www.nuviasblog.com/main-category/security/cost-renting-iot-botnet/
[24] Yin Minn Pa Pa, Shogo Suzuki, Katsunari Yoshioka, Tsutomu Matsumoto,
Takahiro Kasama, and Christian Rossow. 2016. Iotpot: A novel honeypot for
revealing current iot threats. Journal of Information Processing 24, 3 (2016),
522–533.
[25] Ryan Roemer, Erik Buchanan, Hovav Shacham, and Stefan Savage. 2012. Return-
oriented programming: Systems, languages, and applications. ACM Transactions
on Information and System Security (TISSEC) 15, 1 (2012), 2.
[26] Dimitrios N. Serpanos and Artemios G. Voyiatzis. 2013. Security Challenges in
Embedded Systems. ACM Trans. Embed. Comput. Syst. 12, 1s, Article 66 (March
2013), 10 pages. https://doi.org/10.1145/2435227.2435262
[27] Jiawei Su, Vargas Danilo Vasconcellos, Sanjiva Prasad, Sgandurra Daniele, Yaokai
Feng, and Kouichi Sakurai. 2018. Lightweight Classification of IoT Malware
Based on Image Recognition. In 2018 IEEE 42nd Annual Computer Software and
Applications Conference (COMPSAC). IEEE, 664–669.
[28] Farid Molazem Tabrizi and Karthik Pattabiraman. 2014. A model-based intrusion
detection system for smart meters. In High-Assurance Systems Engineering (HASE),
2014 IEEE 15th International Symposium on. IEEE, 17–24.
[29] OWASP IoT Security Team. 2018. OWASP IoT Top 10. https://www.owasp.org/
images/1/1c/OWASP-IoT-Top-10-2018-final.pdf
[30] TrendMicro.
2018.
dled with 19 Vulnerabilities.
from
vpnfilter-affected-devices-still-riddled-with-19-vulnerabilities/
Rid-
Retrieved October 22, 2018
https://blog.trendmicro.com/trendlabs-security-intelligence/
VPNFilter-affected
Devices
Still
[31] Giovanni Vigna, William Robertson, and Davide Balzarotti. 2004. Testing
Network-based Intrusion Detection Signatures Using Mutant Exploits. In 11th
ACM conference on Computer and Communications Security (CCS). ACM, 21–30.
[32] Man-Ki Yoon, Sibin Mohan, Jaesik Choi, Mihai Christodorescu, and Lui Sha. 2017.
Learning Execution Contexts from System Call Distribution for Anomaly Detec-
tion in Smart Embedded System. In Internet-of-Things Design and Implementation
(IoTDI), 2017 IEEE/ACM Second International Conference on. IEEE, 191–196.
[33] Jin young Cho. 2017. Linux Takes Lead in IoT Market Keeping 80% Market
Share. Retrieved September 05, 2018 from http://www.businesskorea.co.kr/
news/articleView.html?idxno=18525