该特权表示可以为进程分配主令牌，经常与SeImpersonatePrivilege特权配合使用在potato的提权中。拥有该特权时，我们可以使用非受限的令牌调用CreateProcessAsUser()；或者先创建挂起的进程，再通过NtSetInformationProcess()来替换进程的token
顺便提一嘴，之前文章中提到的mimikatz的token::run模块在使用时可能会出现0x00000522错误，如下图所示
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_11
这是因为在调用CreateProcessAsUser()时，如果传入的是非受限令牌，那么则需要SeAssignPrimaryTokenPrivilege特权，有关受限令牌的概念可阅读微软文档：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_mimikatz_12
因此该功能应该是用来从SYSTEM权限窃取其他用户的Access
Token（因为默认SYSTEM才有SeAssignPrimaryTokenPrivilege），如果想要非SYSTEM用户调用的话可以考虑改为用CreateProcessWithToken()创建进程
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_13
  1. SeLoadDriverPrivilege  
该权限用来加载或卸载设备的驱动，在windows中用户可以通过NTLoadDriver()进行驱动的加载，其DriverServiceName参数需要传入驱动配置的注册表项
NTSTATUS NTLoadDriver(  
_In_ PUNICODE_STRING DriverServiceName //
\Registry\Machine\System\CurrentControlSet\Services\DriverName  
);  
1.  
2.  
3.  
其中DriverName表示启动名称，该键下至少应有两个值：
ImagePath：REG_EXPAND_SZ类型，“??\C:\path\to\driver.sys” 格式  
Type：REG_WORD类型，其值需要被设置为1，表示KENERL_DRIVER  
如果是非管理员权限，默认无法操作HKLM注册表项，则可以在HKEY_CURRENT_USER (HKCU)
下创建注册表项并设置驱动程序配置设置，再调用NTLoadDriver()指定之前创建的注册表项来注册驱动，代码可参考：
此时可以利用一些有漏洞的驱动程序来实现LPE等操作，以Capcom.sys为例：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_14
除此之外，在AD域中SeLoadDriverPrivilege权限在域控上默认授予Print
Operators组，使得该组用户可以远程在域控加载打印机驱动程序，前一段时间的Printnightmare便是绕过了该权限的检查
  1. SeCreateTokenPrivilege  
该特权表示：允许拥有此特权的进程可以通过ZwCreateToken()创建Access Token
NTSATUS ZwCreateToken(  
OUT PHANDLE TokenHandle,  
IN ACCESS_MASK DesiredAccess,  
IN POBJECT_ATTRIBUTES ObjectAttributes,  
IN TOKEN_TYPE TokenType,  
IN PLUID AuthenticationId,  
IN PLARGE_INTEGER ExpirationTime,  
IN PTOKEN_USER TokenUser,  
IN PTOKEN_GROUPS TokenGroups,  
IN PTOKEN_PRIVILEGES TokenPrivileges,  
IN PTOKEN_OWNER TokenOwner,  
IN PTOKEN_PRIMARY_GROUP TokenPrimaryGroup,  
IN PTOKEN_DEFAULT_DACL TokenDefaultDacl,  
IN PTOKEN_SOURCE TokenSource  
);  
1.  
2.  
3.  
4.  
5.  
6.  
7.  
8.  
9.  
10.  
11.  
12.  
13.  
14.  
15.  
那么我们肯定会想：能不能直接利用该API创建一个SYSTEM的token，然后起进程？很遗憾，该权限不允许用户使用他们刚创建的令牌
但我们可以利用模拟，创建一个当前用户的、包含特权组SID的token，因为只要令牌是针对同一个用户的，并且完整性级别小于或等于当前进程完整性级别（完整性级别可以通过构造令牌时来设置），就可以不需要SeImpersonatePrivilege特权，对线程设置模拟令牌
以创建Group
List中包含administrators组SID的token为例，在创建token前修改了组SID、特权列表，最初成功利用模拟令牌创建线程，在system32下写入文件：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_mimikatz_15
需要注意的是在Win10 >= 1809和Windows Server
2019，以及安装了KB4507459的Win10和2016上，我们不能使用生成的模拟令牌，会爆“1346：未提供所需的模拟级别，或提供的模拟级别无效”错误
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_16
幸运的是已经有大牛发现了绕过的方法，就是把Token的AuthenticationID从SYSTEM_LUID(0x3e7)修改为ANONYMOUS_LOGON_LUID(0x3e6)，最终成功使用模拟令牌向system32目录写入了文件：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_mimikatz_17
  1. SeTcbPrivilege  
该特权标志着其拥有者是操作系统的一部分，拥有该特权的进程可利用LsaLogonUser()执行创建登录令牌等操作，因此可以充当任意用户
NTSTATUS LsaLogonUser(  
HANDLE LsaHandle,  
PLSA_STRING OriginName,  
SECURITY_LOGON_TYPE LogonType,  
ULONG AuthenticationPackage,  
PVOID AuthenticationInformation,  
ULONG AuthenticationInformationLength,  
PTOKEN_GROUPS LocalGroups,  
PTOKEN_SOURCE SourceContext,  
PVOID *ProfileBuffer,  
PULONG ProfileBufferLength,  
PLUID LogonId,  
PHANDLE Token,  
PQUOTA_LIMITS Quotas,  
PNTSTATUS SubStatus  
);  
1.  
2.  
3.  
4.  
5.  
6.  
7.  
8.  
9.  
10.  
11.  
12.  
13.  
14.  
15.  
16.  
根据微软官方文档，当以下一项获多项为真时，LsaLogonUser()调用者需要SeTcbPrivilege特权：
使用了 Subauthentication 包  
使用 KERB_S4U_LOGON，调用者请求模拟令牌  
LocalGroups参数不为NULL  
我们主要关注第二点和第三点，从文档的描述来看，如果使用KERB_S4U_LOGON来登录(也可以使用MSV1_0_S4U_LOGON，但文档中未体现)，我们就可以拿到一张模拟令牌，并且可以在LocalGroups参数给该令牌添加附加组：
WCHAR systemSID[] = L"S-1-5-18";  
ConvertStringSidToSid(systemSID, &pExtraSid);
pGroups->Groups[pGroups->GroupCount].Attributes = SE_GROUP_ENABLED |
SE_GROUP_ENABLED_BY_DEFAULT | SE_GROUP_MANDATORY;  
pGroups->Groups[pGroups->GroupCount].Sid = pExtraSid;  
pGroups->GroupCount++;  
1.  
2.  
3.  
4.  
5.  
6.  
此时我们就可以拿到一张拥有SYSTEM的SID的令牌，如何在没有SeImpersonatePrivilege特权的情况下使用模拟令牌在SeCreateTokenPrivilege的利用中已经提到过了
如下图所示，成功在system32下写入文件：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_18
当然，如果在域内，也可以尝试KERB_S4U_LOGON来获取域内用户的模拟令牌
  1. SeTrustedCredmanAccessPrivilege  
该特权用来访问凭据管理器，备份凭据管理器中的凭据需要使用CredBackupCredentials()这一API，而调用该API需要拥有SeTrustedCredmanAccessPrivilege特权，该特权默认授予winlogon.exe和lsass.exe这两个进程
BOOL WINAPI CredBackupCredentials( HANDLE Token, LPCWSTR Path, PVOID Password,
DWORD PasswordSize, DWORD Flags);  
1.  
为了测试我在凭据管理器中手动新增了一条凭据，用于访问192.168.47.20，用户名和密码为admin/adminpass
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_mimikatz_19
利用方式即窃取winlogon.exe的token，并调用CredBackupCredentials()对凭据管理器中的凭据进行备份（指定加密密码为NULL），最终再调用CryptUnprotectData()对备份的文件进行解密。此处代码参考：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_mimikatz_20
  1. SeEnableDelegationPrivilege  
在域内配置无约束委派和约束委派时（这里特指传统的约束委派，不包括基于资源的约束委派），都是修改的LDAP中的userAccountControl属性来配置（当然约束委派还要修改msDS-AllowedToDelegateTo来配置委派可以访问的服务），而想要配置无约束委派或约束委派，不仅需要对属性有写权限，还需要在域控有SeEnableDelegationPrivilege特权
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_21
虽然该利用对攻ji者来说较为苛刻，但如果发现域内组策略给普通账户配置了SeEnableDelegationPrivilege特权，就需要检查是否是正常的业务需求
0x04 检测与缓解  
检测思路：
查看域内Server Operators、Backup Operators、Print Operators等特权组内是否有不应出现的用户  
查看域内组策略配置文件，是否有将特权授予不常见的SID  
检测“4672: 分配给新登录的特殊权限”日志  
缓解思路：
非业务必需情况下不为普通账户赋予特权  
不影响业务的情况下，可以取消部分管理员账户的SeDebugPrivilege等特权  
0x05 参考  