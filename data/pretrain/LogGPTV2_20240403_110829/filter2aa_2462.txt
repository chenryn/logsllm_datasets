​
apt-get install binfmt-support qemu-user-static qemu qemu-system
1. 
​
QEMU 
0x00 QEMU 
0x01 QEMU 
​
cp $(which qemu-aarch64-static) ./
sudo chroot . ./qemu-aarch64-static ./bin/ls
​
2. 
​
​
1. 
​
apt-get install bridge-utils uml-utilities
0x02 QEMU 
brctl addbr br0    #br0bridge
brctl addif br0 eth0    #br0eth0
brctl stp br0 on     #br0STP
dhclient br0    #br0
sudo sh qemu-bridge.sh
​
#!/bin/bash
#This is a qemu-ifup script for bridging.
#You can use it when starting a KVM guest with bridge mode network.
#set your bridge name
switch=br0
if [ -n "$1" ]; then
#create a TAP interface; qemu will handle it automatically.
#tunctl -u $(whoami) -t $1
#start up the TAP interface
ip link set $1 up
sleep 1
#add TAP interface to the bridge
brctl addif ${switch} $1
exit 0
else
echo "Error: no interface specified"
exit 1
fi
2.qemu 
​
​
​
​
sudo qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress -initrd initrd.img-3.2.0-4-vexpress -drive if=sd
,file=debian_wheezy_armhf_standard.qcow2 -append "root=/dev/mmcblk0p2" -m 256 -net nic -net tap,ifname=tap1,script=/e
tc/qemu-ifup,downscript=no
​
 ctl+option+g 
​
​
sudo route del -net 10.211.55.0 netmask 255.255.255.0 gw 0.0.0.0 dev eth0
sudo route add -net 10.211.55.5 netmask 255.255.255.255 gw 0.0.0.0 dev br0
​
0x03  
​
 sudo apt-get install nfs-kernel-server 
​
sudo systemctl start nfs-server.service
mount -t nfs 10.211.55.3:/home/mbp/workstation/iot /mnt
​
2. img 
sudo qemu-system-x86_64 -hda debian_squeeze_amd64_standard.qcow2 -smp 2 -m 1024 -net nic -net tap,ifname=tap1,script=
/etc/qemu-ifup,downscript=no -drive file=./share.img  
//-driveimg
dd if=/dev/zero of=share.img bs=1M count=1024
1G
sudo mkfs.ext4 share.img
ext4
mkdir mntcode
sudo mount share.img mntcode
sudo cp -rfp targetfs/ mntcode/
sudo unmount mntcode
sudo e2fsck -p -f share.img
sudo resize2fs -M share.img
sudo qemu-system-x86_64 -hda debian_squeeze_amd64_standard.qcow2 -smp 2 -m 1024 -net nic -net tap,ifname=tap1,script=
/etc/qemu-ifup,downscript=no -drive file=./share.img  
mount -t proc /proc proc/
mount --rbind /sys sys/
mount --rbind /dev dev/
​
chroot . /bin/sh
0x04 chroot 
1.  
2. chroot+ 
mount -t proc /proc proc/
mount --rbind /sys sys/
mount --rbind /dev dev/
​
3. docker 
0x05 arm64