title:ICE: a passive, high-speed, state-continuity scheme
author:Raoul Strackx and
Bart Jacobs and
Frank Piessens
ICE: A Passive, High-Speed, State-Continuity Scheme
Raoul Strackx
Bart Jacobs
Frank Piessens
iMinds-Distrinet, KU Leuven
iMinds-Distrinet, KU Leuven
iMinds-Distrinet, KU Leuven
Celestijnenlaan 200A
3001 Heverlee
Celestijnenlaan 200A
3001 Heverlee
ﬁPI:EMAIL
Celestijnenlaan 200A
3001 Heverlee
ABSTRACT
The amount of trust that can be placed in commodity com-
puting platforms is limited by the likelihood of vulnerabili-
ties in their huge software stacks. Protected-module archi-
tectures, such as Intel SGX, provide an interesting alter-
native by isolating the execution of software modules. To
minimize the amount of code that provides support for the
protected-module architecture, persistent storage of (conﬁ-
dentiality and integrity protected) states of modules can be
delegated to the untrusted operating system. But precau-
tions should be taken to ensure state continuity: an attacker
should not be able to cause a module to use stale states (a
so-called rollback attack), and while the system is not under
attack, a module should always be able to make progress,
even when the system could crash or lose power at unex-
pected, random points in time (i.e., the system should be
crash resilient).
Providing state-continuity support is non-trivial as many
algorithms are vulnerable to attack, require on-chip non-vo-
latile memory, wear-out existing oﬀ-chip secure non-volatile
memory and/or are too slow for many applications.
We present ICE, a system and algorithm providing state-
continuity guarantees to protected modules. ICE’s novelty
lies in the facts that (1) it does not rely on secure non-volatile
storage for every state update (e.g., the slow TPM chip). (2)
ICE is a passive security measure. An attacker interrupting
the main power supply or any other source of power, can-
not break state-continuity. (3) Benchmarks show that ICE
already enables state-continuous updates almost 5x faster
than writing to TPM NVRAM. With dedicated hardware,
performance can be increased 2 orders of magnitude.
ICE’s security properties are guaranteed by means of a
machine-checked proof and a prototype implementation is
evaluated on commodity hardware.
1.
INTRODUCTION
Protection of sensitive data in commodity computing plat-
forms is extremely challenging. Modern operating systems
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
ACSAC ’14, December 08–12, 2014, New Orleans, LA, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3005-3/14/12 ...$15.00.
http://dx.doi.org/10.1145/2664243.2664259 .
provide process isolation primitives, but the kernel is too
large to be implemented free from vulnerabilities. More-
over, commodity systems are prone to physical attacks, even
by ill-equipped and resource-constrained home users. These
vulnerabilities limit the amount of trust that can be placed
in commodity systems. In servers these limitations are reme-
died by programmable hardware security modules (HSMs).
On client devices, highly-sensitive applications such as on-
line banking or e-government often resort to smart cards.
Unfortunately, these solutions are expensive, cumbersome
and the security guarantees that they can provide to the
overall applications are limited.
Two recent advances in computer security indicate that
this situation may change in the near future. First, pro-
tected-module architectures (PMAs) have been developed
that provide strong isolation directly to modules running at
application level [3, 4, 16, 17, 19, 28, 29, 36]. The OS is still
relied upon to provide services such as disk and network
access, but they are not trusted. Protected modules’ mem-
ory regions cannot be accessed from unprotected memory;
modules are in complete control over their own content and
can only be accessed through the interface they expose. Last
year Intel disclosed their work on Software Guard eXtension
(SGX) [2, 9, 18], their own hardware-implemented PMA for
commodity processors. SGX goes even further than other
state-of-the-art PMAs and also provides protection against
hardware attacks; modules (called enclaves in SGX1) are
only stored in plaintext within the CPU package. When
they are evicted to main memory they are conﬁdentiality,
integrity and version protected.
Second, Agten et al. [1] and Patrignani et al. [21, 22] pro-
posed fully-abstract compilation techniques to protected-
module architectures. While the strong isolation guarantees
oﬀered by these architectures is vital, they are diﬃcult to
implement without compiler support. Care must be taken
not to introduce software vulnerabilities during compilation.
Fully-abstract compilation ensures just this; machine-code-
level attacks exists iﬀ also a corresponding attack at source-
code level exists. This enables easy reasoning and veriﬁca-
tion of the security guarantees these modules provide.
Unfortunately an important attack vector has been largely
overlooked. Protected-module architectures, including SGX,
only provide strong isolation guarantees while the system
executes continuously. Without support for state continu-
ity, protected modules need to remain stateless, signiﬁcantly
1We will use the term “protected module” when referring to
isolated memory areas in any protected-module architecture
and use “enclave” when referring to SGX speciﬁcally.
(cid:20)(cid:19)(cid:25)
hampering their applicability. Consider as a running exam-
ple a password-checking module. To defend against dictio-
nary attacks, the user will be locked out indeﬁnitely after
three failed attempts. The module conﬁdentiality and in-
tegrity protects its state before handing it to the untrusted
operating system for storage. But when the module needs
to recover its state after a reboot, it cannot distinguish be-
tween a fresh and a stale state and the guess-limited security
measure cannot be guaranteed.
In practice most applications and protocols rely on state-
continuity guarantees; ﬁrewall settings most not be revert-
ible, attackers must not be able to tamper with log ﬁles,
revoked user credentials must not be rolled back, crypto-
graphic nonces must never be re-used, etc. Support for state
continuity may also provide stronger security guarantees.
Chun et al. for example proposed append-only memory [5]
to harden existing distributed algorithms and applications
such as NFS. Acting as a trusted log, this memory protects
against equivocation; the ability of a network node to make
contradicting statements to diﬀerent entities.
While at ﬁrst glance having similarities with replay at-
tacks, the state itself is replayed in a rollback attack. Pro-
viding support for state continuity is therefore much harder,
especially when practical limitations are considered. Parno
et al. [20] show that many seemingly obvious algorithms are
ﬂawed. Others are prone to simple hardware attacks. At-
taching an uninterruptible power source (UPS), for exam-
ple, may simply be disconnected. Or an in-kernel attacker
may prevent the execution of the interrupt handlers it re-
lies upon. Adding non-volatile memory on-chip could sim-
plify a solution, but requires modiﬁcation of manufacturing
processes leading to increased manufacturing costs. Alter-
natively, using non-volatile memory oﬀ-chip (e.g., isolating
disk space) may be susceptible to a clone attack where a
hardware-level attacker may easily overwrite the state with
a previously recorded stale state. Using TPM NVRAM or
TPM monotonic counters instead, would foil such attacks,
but would signiﬁcantly impact performance and usability.
Most implementations only provide 1,280 bytes of NVRAM
that supports only 100,000 write cycles over the chip’s life-
time [20]. Accessing NVRAM every second, would wear it
out in less then 28 hours. Monotonic counters, on the other
hand, only need to be incrementable every 5 seconds [35].
Hardware upgrades to the TPM chip could reduce some of
these architectural constraints, at an economic cost. How-
ever, any solution placing the TPM on the performance-
critical path, would require additional upgrades over time to
bridge the ever growing TPM/CPU performance gap. We
present ICE, an alternative solution that only requires TPM
accesses at boot time and is thus not aﬀected by TPM speed.
ICE avoids architectural challenges (1) by proposing a
simple implementation technique where on-chip dedicated
registers are backed oﬀ-chip by a capacitor and persistent
memory. Upon a sudden loss of power, the contents of the
dedicated registers is written to persistent memory. (2) ICE
is a passive protection scheme; in the event of a crash or
power loss, security is guaranteed instantly. A hardware at-
tacker may disconnect the capacitor, but state continuity
remains guaranteed. (3) At the moment freshness informa-
tion is backed to persistent storage, it is considered public
data. Overwriting it with stale freshness information will be
detected upon recovery.
In summary, we make the following contributions:
• We present ICE, the ﬁrst algorithm providing state-
continuity guarantees with a minimal TCB that does
not rely on the speed of secure, non-volatile memory
(e.g., the (slow) TPM chip) nor does it rely on an
uninterruptible power source.
• We formally verify and machine check the security
properties of ICE using the Coq proof assistant.
• Because SGX-enabled machines or emulators are not
yet available, we validate our claims based on a proto-
type implementation on top of Fides [28], an existing
hypervisor-based protected module architecture simi-
lar to SGX. Benchmarks show that states can already
be stored almost 5x faster on commodity hardware
than writing to TPM NVRAM. Dedicated hardware
support would increase performance substantially.
The remainder of this paper is structured as follows. First
we detail our attack model and the security properties that
we need to guarantee. Next in Sections 3 and 4, we present
our algorithm and discuss two possible implementations. Fi-
nally, we evaluate the security and performance of ICE.
2. PROBLEM DEFINITION
2.1 Attacker Model
ICE can defend against an attacker with three powerful
capabilities. First, we assume that an attacker is able to
compromise the entire software stack, with the exception of
ICE-implementing modules. This enables versatile attacks
ranging from modifying the contents of the hard drive to
preventing enclaves from ever resuming execution.
Second, we assume that an attacker has control over the
system’s power supply or is able to launch attacks leading
to a similar result. Power-interruption attacks diﬀer from
kernel-level crashes as they also aﬀect software modules ex-
ecuting in complete isolation from the rest of the system:
modules may stop executing before they can commit their
new state. SGX enclaves are especially vulnerable to such
attacks. In order to prevent denial-of-service attacks by ma-
licious enclaves that never return control to the kernel, SGX
supports interruption of enclaves [11]. When the interrupt
is handled in the untrusted kernel, an in-kernel attacker can
easily prevent the enclave from ever resuming execution.
Third, we consider hardware attacks. We implement ICE
as a library that modules can be statically linked with and
take advantage of the security guarantees provided by the
protected-module architecture.
In case of SGX this im-
plies that an attacker may place probes on memory buses
or perform cold boot attacks [8]. Defending against phys-
ical attacks against the CPU package itself or the TPM
chip [26,32,38] are orthogonal problems and not considered.
2.2 Security Properties
State continuity can be factored into two properties: safety
and liveness. To ensure safety, ICE must be resilient against
a rollback attack where an attacker provides the module with
a valid, but stale state. A rollback attack is related to a re-
play attack but it is much harder to defend against. Where
in a replay attack identical input is provided, the state of
the module itself is replayed in a rollback attack.
The second property, liveness, states that benign events
should never force the system into a state from which it can-
(cid:20)(cid:19)(cid:26)
regs
controller
crash
reboot
NVRAM
capacitor
trusted
untrusted
CPU
power 
supply
Figure 1: Architecture of guarded memory. When
power suddenly fails on-chip dedicated registers are
backed up to oﬀ-chip, shadow memory (NVRAM).
not progress. In practice this means that the system should
be allowed to crash at any time during the operation of the
algorithm, including when it is recovering from a previous
crash. Note that this is not the same as protection against
denial-of-service. Protection against denial-of-service is not
in scope; in-kernel attackers can easily prevent the system
from progressing (e.g., by breaking the kernel). Liveness
only ensures progress is not hampered by random crashes,
which may also occur when the system is not under attack.
3. STATE-CONTINUITY AS A LIBRARY
Before introducing a running example and describing ICE
in full detail, we ﬁrst introduce the system hardware we rely
on and discuss how freshness information is recorded.
3.1 Architecture
Assuming ICE is implemented on top of Intel SGX, we
only place trust in the CPU package and TPM chip. Attacks
against any other component cannot compromise security.
Enclaves.
Intel SGX provides enclaves with total control over their
own code and data by enforcing a speciﬁc access control
mechanism; only when executing within the boundaries of
an enclave can its content be accessed. Access attempts
from code running at any privilege level outside the enclave
(including from other enclaves), will be blocked. Enclaves
can only be accessed through an explicitly exposed interface.
TPM.
We store long term secrets and freshness information in
TPM NVRAM. These secrets should only be accessible from
the SGX enclave that provided them.
Guarded Memory.
To enable fast state updates, we propose the addition of
a small amount of guarded memory; dedicated registers on-
chip that are backed oﬀ-chip by shadow, non-volatile mem-
ory (NVRAM) and a capacitor (see Fig. 1). When a con-
troller detects that the main power supply is disconnected
from the CPU package, it copies the registers’ content to
non-volatile memory. When power is re-applied, the regis-
ters are restored. Note that only on-chip components need
to be trusted. Attacks against shadow memory, main power
supply or the capacitor cannot break state continuity.
Persistent Storage.
ICE uses operating system services to access persistent
storage. These services are not trusted: an attacker may
copy, replace and destroy ﬁles. To diﬀerentiate between the
actual state of a module and states stored on disk, we call
the latter (ICE) cubes whenever ambiguity might arise.
3.2 Guards: Storing Freshness Info
Just as message authentication codes (MACs) can be used
to guarantee message integrity, we will use guards to prove
that a cube is fresh. Guards are 2-tuples:
i
guardi(n) = (Hash
(n)
,
(cid:2)
(cid:3)(cid:4)
(cid:5)
i(cid:2)(cid:3)(cid:4)(cid:5)
)
guard value
guard index
where the ﬁrst element, the guard value represents the hash
value after hashing the base value i times, the guard index.
A guard is incremented by hashing the guard value and
incrementing the index:
i
guardi(n) = (Hash
guardi+1(n) = (Hash
(n), i)
i+1(n), i + 1)
Based on the construction of guards, they possess two
important properties: (1) two guards can be compared based
on the guard index:
(n, i) ≤ (m, j) ⇔
n = m
(Hash(n), i + 1) ≤ (m, j)
if i = j
if i < j
(cid:6)