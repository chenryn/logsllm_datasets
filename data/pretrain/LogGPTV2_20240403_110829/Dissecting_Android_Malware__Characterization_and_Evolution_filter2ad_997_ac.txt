### Malicious Redirection and Download

When a user clicks on a malicious link, they are redirected to a website that falsely claims to analyze the battery usage of their phone. The site then redirects the user to a fake Android Market, where they are prompted to download an app purported to improve battery efficiency. However, the downloaded app is not designed to enhance battery performance; instead, it is malware that subscribes the user to premium-rate services without their knowledge.

Similarly, the Jifake malware is distributed when users are redirected to a malicious website. Unlike other methods, Jifake does not use in-app advertisements to lure users. Instead, it employs a malicious QR code. When scanned, this QR code redirects the user to a URL containing the Jifake malware. This malware is a repackaged version of a mobile ICQ client, which sends multiple SMS messages to a premium-rate number. Although warnings about QR code-based malware propagation have been issued, this is the first known instance of such an attack in the wild.

### Ported PC Malware: Spitmo and ZitMo

Spitmo and ZitMo are mobile versions of well-known PC malware, SpyEye and Zeus, respectively. These malware variants operate in a similar manner: when a user performs online banking on a compromised PC, they are directed to download a smartphone app that claims to better protect their online banking activities. In reality, the app is malware that can collect and send mTANs (mobile transaction authentication numbers) or SMS messages to a remote server. These malware families rely on compromised desktop browsers to initiate the attack. Despite the difficulty in infecting real users, the potential to steal sensitive banking information raises significant security concerns.

### Other Social Engineering Techniques

#### 1. Update Dialogue
One common technique involves presenting the user with an update dialogue for an existing app. For example, BaseBridge and DroidKungFuUpdate both use this method. BaseBridge includes the "updated" version within the original app, making it more stealthy than including the entire malicious payload initially. DroidKungFuUpdate, on the other hand, remotely downloads a new version from the network. It uses a third-party library to notify users, mimicking legitimate notification functionality (similar to Google's Cloud to Device Messaging framework). Once downloaded, the "updated" version turns out to be the DroidKungFu3 malware. Both DroidKungFuUpdate and BaseBridge were available on official and alternative Android Markets.

#### 2. Stealthy Component Updates
AnserverBot and Plankton take the update attack a step further by stealthily upgrading specific components within the host app rather than the entire app. This approach eliminates the need for user approval. Plankton directly fetches and runs a JAR file from a remote server, while AnserverBot retrieves an encrypted blog entry containing the actual payload. The stealthy nature of these attacks makes them particularly challenging to detect.

### Drive-by Download Attacks

The third technique involves traditional drive-by download attacks adapted for mobile devices. Although these attacks do not exploit mobile browser vulnerabilities directly, they entice users to download seemingly interesting or feature-rich apps. Our dataset includes four such malware families: GGTracker, among others.

### Categorization of Malware Samples

In our dataset, we have 1083 repackaged apps and 177 standalone apps. We organized the standalone apps into the following groups:

1. **Spyware**: These apps are designed to be installed on victim’s phones intentionally. For example, GPSSMSSpy listens to SMS-based commands to record and upload the victim’s current location.
2. **Fake Apps**: These masquerade as legitimate apps but perform malicious actions, such as stealing credentials or sending background SMS messages. FakeNetflix, for instance, steals a user’s Netflix account and password.
3. **Malicious Functionality**: These apps provide the advertised functionality but also include hidden malicious features, such as subscribing to premium-rate services. RogueSPPush, an astrology app, automatically subscribes to premium-rate services by hiding confirmation SMS messages.
4. **Root Exploits**: These apps rely on root privileges to function, often using known exploits to escape the built-in security sandbox. Examples include Asroot and DroidDeluxe.

### Activation via System Events

Android malware often registers for system-wide events to trigger their payloads. Common events include `BOOT_COMPLETED` and `SMS_RECEIVED`. For example, Geinimi listens to `BOOT_COMPLETED` to start its background service, and zSone intercepts SMS messages from specific numbers. Some malware, like AnserverBot, register for multiple events to ensure reliable payload execution.

### Malicious Payloads

We categorized the payload functionalities into four categories:

1. **Privilege Escalation**: Many malware samples embed root exploits, such as exploid, RATC, and GingerBreak. For instance, DroidDream and DroidKungFu use these exploits to gain elevated privileges.
2. **Remote Control**: A significant number of malware turn infected phones into bots, using HTTP-based web traffic to receive commands from C&C servers. Some, like Pjapps and DroidKungFu3, encrypt C&C server addresses and communications.
3. **Financial Charges**: Malware often causes financial charges by subscribing users to premium-rate services. For example, some malware send SMS messages to premium-rate numbers.
4. **Personal Information Stealing**: Malware may steal personal information, such as login credentials and location data, and send it to remote servers.

These findings highlight the evolving nature of Android malware and the ongoing challenges in detecting and mitigating these threats.