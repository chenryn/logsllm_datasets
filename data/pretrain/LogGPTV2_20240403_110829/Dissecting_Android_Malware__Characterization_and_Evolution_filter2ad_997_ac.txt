ment link, it will redirect the user to a malicious website,
which claims to be analyzing the battery usage of user’s
phone and will redirect the user to one fake Android Market
to download an app claimed to improve battery efﬁciency.
Unfortunately, the downloaded app is not one that focuses
on improving the efﬁciency of battery, but a malware that
will subscribe to a premium-rate service without user’s
knowledge.
Similarly, the Jifake malware is downloaded when users
are redirected to the malicious website. However, it is not
using in-app advertisements to attract and redirect users.
Instead, it uses a malicious QR code [21], which when
scanned will redirect the user to another URL containing
the Jifake malware. This malware itself is the repackaged
mobile ICQ client, which sends several SMS messages to
a premium-rate number. While QR code-based malware
propagation has been warned earlier [22], this is the ﬁrst
time that this attack actually occurred in the wild.
The last two Spitmo and ZitMo are ported versions of
nefarious PC malware, i.e., SpyEye and Zeus. They work in
a similar manner: when a user is doing online banking with
a comprised PC, the user will be redirected to download a
particular smartphone app, which is claimed to better protect
online banking activities. However, the downloaded app is
actually a malware, which can collect and send mTANs
or SMS messages to a remote server. These two malware
families rely on the comprised desktop browsers to launch
the attack. Though it may seem hard to infect real users,
the fact that they can steal sensitive bank information raises
serious alerts to users.
4) Others We have so far presented three main social
engineering-based techniques that have been used in existing
(a) The Update Dialogue
(b) Installation of A New Version
Figure 2. An Update Attack from BaseBridge
be installed (Figure 2(b)). Because the malicious payload is
in the “updated” app, not the original app itself, it is more
stealthy than the ﬁrst technique that directly includes the
entire malicious payload in the ﬁrst place.
is
similar
The
DroidKungFuUpdate malware
to
instead of carrying or enclosing the
BaseBridge. But
“updated” version inside the original app,
it chooses to
remotely download a new version from network. Moreover,
it
takes a stealthy route by notifying the users through
a third-party library [16] that provides the (legitimate)
notiﬁcation functionality. (Note the functionality is similar
to the automatic notiﬁcation from the Google’s Cloud to
Device Messaging framework.) In Figure 3, we show the
captured network trafﬁc initiated from the original host app
to update itself. Once downloaded, the “updated” version
turns out to be the DroidKungFu3 malware. As pointed out
in Table I, the DroidKungFuUpdate malware was available
on both ofﬁcial and alternative Android Markets.
The previous two update attacks require user approval to
download and install new versions. The next two malware,
i.e., AnserverBot and Plankton, advance the update attack
by stealthily upgrading certain components in the host apps
not the entire app. As a result, it does not require user
approval. In particular, Plankton directly fetches and runs
a jar ﬁle maintained in a remote server while AnserverBot
retrieves a public (encrypted) blog entry, which contains the
actual payloads for update! In Figure 4, we show the actual
network trafﬁc to download AnserverBot payload from the
remote command and control (C&C) server. Apparently,
the stealthy nature of these update attacks poses signiﬁcant
challenges for their detection (Table VII – Section V).
3) Drive-by Download
The third technique applies
the traditional drive-by download attacks to mobile space.
Though they are not directly exploiting mobile browser
vulnerabilities, they are essentially enticing users to down-
load “interesting” or “feature-rich” apps. In our collection,
we have four such malware families, i.e., GGTracker [17],
99
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply. 
THE (ABBREVIATED) ANDROID EVENTS/ACTIONS OF INTEREST TO EXISTING MALWARE
Table III
Abbreviation
BOOT
(Boot Completed)
CALL
Events
BOOT COMPLETED
PHONE STATE
Abbreviation
SMS
(SMS/MMS)
USB
(Phone Events)
NEW OUTGOING CALL
(USB Storage)
Events
SMS RECEIVED
WAP PUSH RECEIVED
UMS CONNECTED
UMS DISCONNECTED
Abbreviation
NET
(Network)
MAIN
(Main Activity)
Events
CONNECTIVITY CHANGE
PICK WIFI WORK
ACTION MAIN
PKG
(Package)
PACKAGE ADDED
PACKAGE REMOVED
PACKAGE CHANGED
PACKAGE REPLACED
PACKAGE RESTARTED
PACKAGE INSTALL
BATT
(Power/Battery)
ACTION POWER CONNECTED
ACTION POWER DISCONNECTED
BATTERY LOW
BATTERY OKAY
BATTERY CHANGED ACTION
SYS
INPUT METHOD CHANGED
USER PRESENT
(System Events)
SIG STR
SIM FULL
Android malware. Next, we examine the rest samples that
do not fall
in the above three categories. In particular,
our dataset has 1083 repackaged apps, which leaves 177
standalone apps. We therefore look into those standalone
apps and organize them into the following four groups.
The ﬁrst group is considered spyware as claimed by
themselves – they intend to be installed to victim’s phones on
purpose. That probably explains why attackers have no moti-
vations or the need to lure victim for installation. GPSSMSSpy
is an example that listens to SMS-based commands to record
and upload the victim’s current location.
The second group includes those fake apps that masquer-
ade as the legitimate apps but stealthily perform malicious
actions, such as stealing users’ credentials or sending back-
ground SMS messages. FakeNetflix is an example that
steals a user’s Netﬂix account and password. Note that
it is not a repackaged version of Netﬂix app but instead
disguises to be the Netﬂix app with the same user interface.
FakePlayer is another example that masquerades as a movie
player but does not provide the advertised functionality at
all. All it does is to send SMS messages to premium-rate
numbers without user awareness.
The third group contains apps that also intentionally
include malicious functionality (e.g., sending unauthorized
SMS messages or subscribing to some value-added service
automatically). But the difference from the second group
is that they are not fake ones. Instead, they can provide
the functionality they claimed. But unknown to users, they
also include certain malicious functionality. For example,
one RogueSPPush sample is an astrology app. But it will
automatically subscribe to premium-rate services by inten-
tionally hiding conﬁrmation SMS messages.
the root privilege to these apps,
The last group includes those apps that rely on the root
privilege to function well. However, without asking the user
to grant
they leverage
known root exploits to escape from the built-in security
sandbox. Though these apps may not clearly demonstrate
malicious intents, the fact of using root exploits without
user permission seems cross the line. Examples in this group
include Asroot and DroidDeluxe.
B. Activation
Next, we examine the system-wide Android events of
interest
to existing Android malware. By registering for
the related system-wide events, an Android malware can
100
rely on the built-in support of automated event notiﬁcation
and callbacks on Android to ﬂexibly trigger or launch its
payloads. For simplicity, we abbreviate some frequently-
used Android events in Table III. For each malware family
in our dataset, we also report related events in Table II.
Among all available system events, BOOT_COMPLETED is
the most interested one to existing Android malware. This
is not surprising as this particular event will be triggered
when the system ﬁnishes its booting process – a perfect
timing for malware to kick off its background services.
In our dataset, 29 (with 83.3% of
the samples) mal-
ware families listen to this event. For instance, Geinimi
(SHA1: 179e1c69ceaf2a98fdca1817a3f3f1fa28236b13)
lis-
tens to this event to bootstrap the background service –
com.geinimi.AdService.
The SMS_RECEIVED comes second with 21 malware fami-
lies interested in it. This is also reasonable as many malware
will be keen in intercepting or responding incoming SMS
messages. As an example, zSone listens to this SMS_RECEIVED
event and intercepts or removes all SMS message from
particular originating numbers such as “10086” and “10010.”
During our analysis, we also ﬁnd that certain malware
registers for a variety of events. For example, AnserverBot
registers for callbacks from 10 different events while
BaseBridge is interested in 9 different events. The regis-
tration of a large number of events is expected to allow the
malware to reliably or quickly launch the carried payloads.
In addition, we also observe some malware samples
directly hijack the entry activity of
the host apps,
which will be triggered when the user clicks the app
icon on the home screen or an intent with action
ACTION_MAIN is received by the app. The hijacking of
the entry activity allows the malware to immediately
bootstrap its
app’s
(SHA1:
primary
fdf6509b4911485b3f4783a72fde5c27aa9548c7) replaces the
original entry activity with its own com.android.root.main
so that
it can gain control even before the original
activity
com.codingcaveman.SoloTrial.SplashActivity
is
hijack
(e.g., button clicking).
certain UI
An
(SHA1:
00d6e661f90663eeffc10f64441b17079ea6f819) that invokes
its own SMS sending code inside the onClick() function
of the host app.
Some malware may
interaction events
service before
starting the host
launched.
activity.
For
example,
DroidDream
example
is
the
also
zSone
malware
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply. 
THE LIST OF PLATFORM-LEVEL ROOT EXPLOITS AND THEIR USES IN
EXISTING ANDROID MALWARE
Table IV
Vulnerable
Program
Linux kernel
init
(<= 2.2)
Root
Exploit
Asroot [23]
Exploid [24]
Release
Date
2009/08/16
2010/07/15
adbd (<= 2.2.1)
zygote(<= 2.2.1)
RATC [25]
Zimperlich [26]
2010/08/21
2011/02/24
Malware with the Exploit
Asroot
DroidDream, zHash
DroidKungFu[1235]
DroidDream, BaseBridge
DroidKungFu[1235]
DroidDeluxe
DroidCoupon
ashmem
(<= 2.2.1)
vold
(<= 2.3.3)
libsysutils
(<= 2.3.6)
KillingInThe
NameOf [27]
2011/01/06
-
GingerBreak [28]
2011/04/21
GingerMaster
zergRush [29]
2011/10/10
-
C. Malicious Payloads
As existing Android malware can be largely character-
ized by their carried payloads, we also survey our dataset
and partition the payload functionalities into four different
categories: privilege escalation, remote control, ﬁnancial
charges, and personal information stealing.
1) Privilege Escalation
The Android platform is a
complicated system that consists of not only the Linux
kernel, but also the entire Android framework with more
than 90 open-source libraries included, such as WebKit,
SQLite, and OpenSSL. The complexity naturally introduces
software vulnerabilities that can be potentially exploited
for privilege escalation. In Table IV, we show the list of
known Android platform-level vulnerabilities that can be
exploited for privilege exploitations. Inside the table, we also
show the list of Android malware that actively exploit these
vulnerabilities to facilitate the execution of their payloads.
Overall, there are a small number of platform-level vulner-
abilities that are being actively exploited in the wild. The top
three exploits are exploid, RATC (or RageAgainstTheCage),
and Zimperlich. We point out that if the RATC exploit is
launched within a running app, it is effectively exploiting the
bug in the zygote daemon, not the intended adbd daemon,
thus behavoring as the Zimperlich exploit. Considering the
similar nature of these two vulnerabilities, we use RATC to
represent both of them.
From our analysis, one alarming result is that among 1260
samples in our dataset, 463 of them (36.7%) embed at least
one root exploit (Table V). In terms of the popularity of each
individual exploit, there are 389, 440, 4, and 8 samples that
contain exploid, RATC, GingerBreak, and asroot, respec-
tively. Also, it is not uncommon for a malware to have two
or more root exploits to maximize its chances for successful
exploitations on multiple platform versions. (In our dataset,
there are 378 samples with more than one root exploit.)
A further investigation on how these exploits are actually
used shows that many earlier malware simply copy verbatim
the publicly available root exploits without any modiﬁcation,
even without removing the original debug output strings
or changing the ﬁle names of associated root exploits. For
example, DroidDream contains the exploid ﬁle name exactly
the same as the publicly available one. However, things have
been changed recently. For example, DroidKungFu does not
directly embed these root exploits. Instead it ﬁrst encrypts
these root exploits and then stores them as a resource or asset
ﬁle. At runtime, it dynamically uncovers these encrypted
root exploits and then executes them properly, which makes
their detection very challenging. In fact, when the ﬁrst
version of DroidKungFu was discovered, it has been reported
that no single existing mobile anti-virus software at that time
was able to detect it, which demonstrated the “effectiveness”
of this approach. Moreover, other recent malware such as
DroidCoupon and GingerMaster apparently obfuscate the ﬁle
names of the associated root exploits (e.g., by pretending
as picture ﬁles with png sufﬁx). We believe these changes
reﬂect the evolving nature of malware development and the
ongoing arms race for malware defense (Section IV).
2) Remote Control During our analysis to examine the
remote control functionality among the malware payloads,
we are surprised to note that 1, 172 samples (93.0%) turn
the infected phones into bots for remote control. Speciﬁcally,
there are 1, 171 samples that use the HTTP-based web trafﬁc
to receive bot commands from their C&C servers.
We also observe that some malware families attempt
to be stealthy by encrypting the URLs of remote C&C
servers as well as their communication with C&C servers.
For example, Pjapps uses its own encoding scheme to
encrypt
the C&C server addresses. One of its samples
(SH1: 663e8eb52c7b4a14e2873b1551748587018661b3)
encodes
into
mobilemeego91.com
2maodb3ialke8mdeme3gkos9g1icaofm.
DroidKungFu3
employs the standard AES encryption scheme and uses the
key Fuck_sExy-aLl!Pw to hide its C&C servers. Geinimi
similarly applies DES encryption scheme (with the key
0x0102030405060708) to encrypt its communication to the
remote C&C server.
its C&C server
During our study, we also ﬁnd that most C&C servers
are registered in domains controlled by attackers themselves.
However, we also identify cases where the C&C servers are
hosted in public clouds. For instance, the Plankton spyware
dynamically fetches and runs its payload from a server
hosted on the Amazon cloud. Most recently, attackers are
even turning to public blog servers as their C&C servers.
AnserverBot is one example that uses two popular public
blog services, i.e., Sina and Baidu, as its C&C servers to re-
trieve the latest payloads and new C&C URLs (Section IV).
3) Financial Charge
Beside privilege escalation and
remote control, we also look into the motivations behind
malware infection. In particular, we study whether malware
will intentionally cause ﬁnancial charges to infected users.
One proﬁtable way for attackers is to surreptitiously
subscribe to (attacker-controlled) premium-rate services,
such as by sending SMS messages. On Android, there is
101
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply. 
AN OVERVIEW OF EXISTING ANDROID MALWARE (PART II: MALICIOUS PAYLOADS)
Table V
Privilege Escalation
Remote Control
Financial Charges
Personal Information Stealing
Exploid
RATC/
Zimperlich
Ginger
Break
Asroot
Encrypted
√
√
√
√
√
√
√
√
√
√
√
√
√
√
SMS
Phone
Call
NET
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√