It was necessary to devise a way to overwrite a function pointer in the high portion of the address space
without touching the address space gap.
We chose a multistage approach that would ﬁrst corrupt the
descriptor array, so that DestPtr would be adjusted by a corrupted descriptor length value. This approach
allows exact control of DestPtr on a subsequent block copy.
One major hurdle stood in the way of the descriptor overwrite approach; before the coalescing block copy
operations begins, the descriptor array is relocated to the bottom of the address space. This ensures that
the descriptor array is always out of the way of any block copy operations. Additional tricks were needed to
proceed further with this approach.
4.1.3
Optimization Tricks
An examination of the CopyMem implementation yielded a clever trick that could be abused for the descriptor
overwrite approach.
12
CopyMem (
OUT VOID
*DestinationBuffer,
IN CONST VOID
*SourceBuffer,
IN UINTN
Length
)
{
...
if (DestinationBuffer == SourceBuffer) {
return DestinationBuffer;
}
return InternalMemCopyMem (DestinationBuffer, SourceBuffer, Length);
}
Listing 8: CopyMem implementation
Note in Listing 8 that CopyMem is optimized so that if DestinationBu↵er and SourceBu↵er are equal,
the function will automatically exit successfully. Hence a huge CopyMem can be performed that will skip
over the address space gap, and DestPtr will subsequently be increased by a huge value. Using this approach
allowed DestPtr to be wrapped to the bottom of the address space where the relocated descriptor array had
been placed.
Also note that this CopyMem optimization abuse can not be used to set DestPtr directly at any function
pointers high in the address space. This requirement results from the IsOverlapped check described in code
Listing 7. The IsOverlapped check validates that the current block copy operation will not clobber the current
block or any other remaining data blocks. Because we have explicitly set DestPtr equal to CurrentBlockDesc’s
Data member in order to abuse the CopyMem optimization, the blocks necessarily overlap. However, if we
examine the IsOverlapped implementation, we see a way out.
BOOLEAN
IsOverlapped (
UINT8
*Buff1,
UINTN
Size1,
UINT8
*Buff2,
UINTN
Size2
)
{
//
// If buff1’s end is less than the start of buff2, then it’s ok.
// Also, if buff1’s start is beyond buff2’s end, then it’s ok.
//
if (((Buff1 + Size1) = (Buff2 + Size2))) { LbaCache = AllocatePool (FvbDev->NumBlocks * sizeof (LBA_CACHE)); BlockMap;
PtrBlockMapEntry->NumBlocks != 0; PtrBlockMapEntry++) {
for (BlockIndex2 = 0; BlockIndex2 NumBlocks; BlockIndex2++) {
FvbDev->LbaCache[BlockIndex].Base = LinearOffset;
FvbDev->LbaCache[BlockIndex].Length = PtrBlockMapEntry->Length;
LinearOffset += PtrBlockMapEntry->Length;
BlockIndex++;
}
}
Listing 10: ProduceFVBProtocolOnBu↵er code continued.
Recall that NumBlocks had to be set very large in order to induce the overﬂow in the LbaCache allocation
(Bug 3). Unfortunately this also means that the above loop will end up corrupting the majority of the address
space and destabilize the system if allowed to run to completion. Another complication is the discovery that
LbaCache was being allocated below the FvbDev structure. This meant that the overwriting loop would
end up corrupting the LbaCache pointer, further complicating the progression of the corruption. This issue
is illustrated in Figure 9. Lastly, note that the corruption occurs via a series of pairs of 4 byte writes. One
of the writes, PtrBlockMapEntry’s Length member, is attacker controlled. However, the other is the write
15
00000000
FFFFFFFF
MemBase 
MemBase + MemSize
3C1BF000
100000
UEFI PEI Code
PEI Stack
Intended Coalescing Space
DescriptorArray[0] 
“Poison  Capsule  Header  Block”
Length=100
DataBlock=EFI_CAPSULE_HEADER
Top of RAM
40000000
Relocated DescriptorArray
DescriptorArray[1]
“The  Huge  Block”
Length=&(Relocated DescriptorArray[2]) – DestPtr_One
DataBlock=DestPtr_One
DescriptorArray[2]
“Self  Overwriting  Descriptor  Block”
Overwritten Length=ReturnAddress – DestPtr_2 
DataBlock=3E200000
DescriptorArray[3]
“Return  Address  Overwrite  Block”
Length=4
DataBlock=3E100000
ReturnAddress – DestPtr_Two
Shellcode Address
3E200000
3E100000
DescriptorArray[4]
“Total  CapsuleSize  Padding  Block”
Length=FFFFFFD4 - Sum(DescriptorArray[0..4])
DataBlock=Wherever
DestPtr_2 = &RelocatedDescriptorArray[2]
Figure 7: DescriptorArray[2] overwrites its own Length value, so that DestPtr can be arbitrarily adjusted.
of LinearO↵set. LinearO↵set is incremented during every iteration of the loop and thus is only partially
attacker controlled.
The most pressing constraint is the non terminating nature of the corrupting loop. In order to escape the
loop, it was necessary to overwrite the loop code itself. However, as the values being written are not com-
pletely attacker controlled, it was a matter of brute force to determine what values of PtrBlockMapEntry’s
Length member would lead to overwriting the loop code with coherent x86 instructions. Figure 10 shows an
attempt that overwrites the top of the loop’s basic block with x86 instructions that are not advantageous
to an attacker. Figure 11 shows a Length value discovered by our brute force script that leads to attacker
advantageous instructions overwriting the loop code.
4.3
Exploitation From Windows 8
Two conditions are necessary for the exploitation of the vulnerabilities.
• The ability to instantiate the capsule update process.
• The ability to stage arbitrary data at certain physical addresses.
If the attacker already has ring 0 code execution, these conditions are trivially met. The attacker can call
the capsule update Runtime Service directly to meet the ﬁrst condition. The second condition can be met
via a number of kernel APIs that allow access to physical memory, such as MmAllocateContiguousMemory5,
or via direct page table manipulation.
The attack is also possible from a privileged user in ring 3. The introduction of the userland EFI variable
API in Windows 8 inadvertently exposes the capsule update process to userland. This follows from the fact
5http://msdn.microsoft.com/en-us/library/windows/hardware/ff554460(v=vs.85).aspx
16
00000000
FFFFFFFF
MemBase 
MemBase + MemSize
3C1BF000
100000
UEFI PEI Code
PEI Stack
Intended Coalescing Space
DescriptorArray[0] 
“Poison  Capsule  Header  Block”
Length=100
DataBlock=EFI_CAPSULE_HEADER
Top of RAM
40000000
Relocated DescriptorArray
DescriptorArray[1]
“The  Huge  Block”
Length=&(Relocated DescriptorArray[2]) – DestPtr_One
DataBlock=DestPtr_One
DescriptorArray[2]
“Self  Overwriting  Descriptor  Block”
Overwritten Length=ReturnAddress – DestPtr_2 
DataBlock=3E200000
DescriptorArray[3]
“Return  Address  Overwrite  Block”
Length=4
DataBlock=3E100000
ReturnAddress – DestPtr_Two
Shellcode Address
3E200000
3E100000
DescriptorArray[4]
“Total  CapsuleSize  Padding  Block”
Length=FFFFFFD4 - Sum(DescriptorArray[0..4])
DataBlock=Wherever
DestPtr_3 = ReturnAddress
Hacked
Figure 8: DescriptorArray[3] overwrites the return address for the CopyMem function. Control is gained here.
that capsule update is automatically initiated by the ﬁrmware if the “CapsuleUpdateData” EFI variable
exists during a warm reset of the system.
A privileged userland process also has several ways to surmount the second attack requirement. We do
not assume the attacker needs their own kernel driver signing key. However, given our attack model assumes
a privileged user, such a user is able to install any authenticode signed kernel drivers onto the system.
There exist such drivers that will arbitrarily modify the content of physical memory on a users behalf6.
The technique of using known-vulnerable, but signed, 3rd party drivers to perform exploits or actions on
the attacker’s behalf, has been discussed since Windows Vista’s inception[19] and has been used in the
wild by malware[17]. It is also possible to stage content at known physical memory locations by having a
userland process allocate and write huge amounts of memory just before initiating the platform reset. In the
Capsule Coalesce vulnerabilities, the attacker is able to set the instruction pointer to an arbitrary location.
Thus the attacker can experimentally determine which physical memory is reliably controllable through the
aforementioned allocate and write method, and then stage his payload at this discovered location.
Exploitation of the capsule envelope vulnerability may not be possible from Windows 8 userland. The
majority of consumer platforms we analyzed executed their DXE phase in 64 bit mode. Hence as described
in section 4.2, it is necessary for the attacker to control a contiguous 2 GB part of the address space in
order to induce the underlying integer overﬂow. We are not aware of any methods by which a userland
attacker could reliably stage a physically contiguous 2GB region. Another complicating factor is the only
semi-controlled nature of the corruption. The attacker is dependent on ﬁnding some values that will allow
overwriting the non-terminating loop with attacker advantageous instructions. Typically these instructions
will take the form of jumping or calling to a non-corrupted address. Exploitation of the envelope vulnerability
from userland also dictates that a speciﬁc target physical address will need to be attainable from a Windows
8 userland process. This may not be possible depending on the target address, for instance if that physical