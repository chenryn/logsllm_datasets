o
r
e
b
m
u
N
 100000
 10000
 1000
 100
 10
 1
 0
10,000 Flows
5,000 Flows
2,500 Flows
Same for all rules with score > .04
Same for all rules with score > .07
 0.05
 0.1
 0.15
 0.2
 0.25
 0.3
Rule Score (Modified JMeasure)
l
i
s
e
u
R
e
n
M
o
t
e
m
T
i
478
300.7
237.5
600
500
400
300
200
100
0
2500
10000
# of Highly Active Flows 
5000
ʊRule-Clusters
ʆʃʄ
ʆʇʉ
ʈʃʇ
ʄʃʄ
ʄʈʄ
40
35
30
25
20
15
10
5
0
7.36
1.52
34.48
5000
2500
# of Highly Active Flows 
10000
)
6
0
1
x
(
d
e
t
a
u
a
v
E
s
e
u
R
l
l
f
o
#
(a) ʊDiscovered Rules vs. ʊHighly Active Flows Considered (K)
(b) Time to Mine
(c) Memory Footprint
Figure @: Sensitivity of eXpose to the number of highly active (cid:8)ows (K, §ʅ.ʅ). Recall that eXpose mines over the top K = 5000 highly active (cid:8)ows by
default. ˆe more statistically signi(cid:12)cant a rule (higher score), the fewer the number of active (cid:8)ows eXpose has to consider to discover the rule!
l
s
e
u
R
d
e
r
e
v
o
c
s
D
i
f
o
r
e
b
m
u
N
.25s Windows
.5s Windows
1s Windows
2s Windows
5s Windows
 100000
 10000
 1000
 100
 10
 1
 0
 0.05
 0.1
 0.15
 0.2
 0.25
 0.3
 0.35
 0.4
Rule Score (Modified JMeasure)
Figure @: Sensitivity of eXpose to the size of time windows used in dis-
cretizing the trace (§ʅ.ʄ). Window sizes in the [.ʅʈs, ʅs] range seem to not
change results appreciably, verifying the assumption that most dependent
(cid:8)ows happen within a short duration of each other.
atleast one matching IP to be considered for a rule) caused eXpose
to evaluate an order of magnitude more (ʈ,ʇʃ@,ʃʇ@) (cid:8)ow pairs. Yet,
only an additional ʄʉʈ rules were found for a much smaller hit-rate
of 3.3 × 10−5 and a large increase in the time to mine.
How Sensitive is eXpose to the Number of Active Flows? Recall
that eXpose mines over the top K = 5000 highly active (cid:8)ows by
default. But, do the discovered rules change appreciably if eXpose
mines over many more or many fewer (cid:8)ows? Fig. @ plots the num-
ber of discovered rules and their scores when eXpose mines over
the LabEnterprise trace with three di(cid:11)erent choices of K. As eX-
pose mines over more active (cid:8)ows, its search space broadens and
it discovers more rules. But, the more statistically signi(cid:12)cant a
rule (higher score), the fewer the number of active (cid:8)ows eXpose has
to consider in order to reveal that rule! In Fig. @ (a), we see that
when eXpose mines over twice the default number of highly active
(cid:8)ows (K = 10, 000), none of the new rules have score higher than
.04. Figures @(b, c) show the cost of expanding the search space.
Since eXpose has to now evaluate many more rules, the time to mine
for rules increases by ʈ@ʂ (from ʆʃʃ.@s to ʇ@@s) and the memory
footprint increases by ʆʉ@ʂ. We believe that an administrator can
choose the number of active (cid:8)ows to tradeo(cid:11) higher resource cost
for better (cid:12)delity in revealing the less signi(cid:12)cant rules. We picked
K = 5000 as the default.
Why pick 1s wide time-windows? Fig. @ plots the number of rules
discovered at each score level by eXpose on the LabEnterprise trace
when discretizing at time windows of di(cid:11)erent sizes. We see that
smaller windows lead to fewer rules while larger windows lead to
more rules, at almost every score level. ˆe reason is twofold. First,
at larger time windows, eXpose would discover rules for more de-
pendent (cid:8)ows, i.e., all those that are separated by no more than the
time window. Second, since more (cid:8)ows are present in each of the
larger time windows on average, it is more likely that a (cid:8)ow pair will
co-occur merely due to chance. Lacking ground truth it is hard to
distinguish between these two cases—whether a rule that was newly
discovered at a larger window size is a true rule that was missed at
the smaller window size or is a false positive that was added merely
by chance. Regardless, at all window sizes in the [.ʅʈs, ʅs] range,
eXpose reveals very similar rules, showing that dependencies that
occur within a short period are highly stable.
4.6 Case Study: Patterns in the Enterprise
In every one of our traces, we found patterns of typical behavior
describing the network setup and the dependencies between appli-
cations, and also patterns of atypical behavior indicating con(cid:12)gu-
ration problems or malicious activity. We have been running eX-
pose inside Microso(cid:13) on the link connecting a thousand node re-
search LAN with the rest of the corporate network (Fig. ʄd) for a
few months. Here, we present rules learnt by eXpose on a ʆhr trace.
Load Balancing: Perhaps the most signi(cid:12)cant pattern in the Enter-
prise trace was due to the proxies used for external web access. ˆere
are about thirty di(cid:11)erent proxies, and eXpose found this rule cluster
of generics:
P roxy1.80 : ∗.∗ ⇒ P roxy2.80 : ∗.∗; P roxy3.80 : ∗.∗;
. . .
P roxy2.80 : ∗.∗ ⇒ P roxy1.80 : ∗.∗; P roxy3.80 : ∗.∗;
. . .
. . .
and so on.
ˆis rule-cluster was a clique; the generic corresponding to each
proxy was linked by a rule to every one of the generics correspond-
ing to the other proxies. ˆese rules show that whenever a client
talks to one of the proxy servers, the client is very likely to talk to
some other proxy server. ˆe explanation for this rule is simple – a
client browsing the web fetches multiple HTTP objects in quick suc-
cession, and the load-balancing aspect of the proxy cluster spreads
the client’s HTTP requests across multiple proxy servers.
We note two things. First, this rule could not be discovered with-
out abstraction. No one client talks to all the proxies, nor does any
one client browse for very long. Second, without any knowledge of
the network setup in the Enterprise, eXpose reveals the existence of
load balancing web proxies and further shows that the load balancer
works fairly well. Such information helps in understanding the net-
work setup and in troubleshooting performance problems.
Within the Enterprise, many services are load-balanced. We
found similar load-balancing patterns for DNS servers on port ʈʆ,
WINS (windows name lookup) servers on port ʄʆ@ and domain-
controller servers (certi(cid:12)cates) on port ʄʆ@.
Application Dependencies: We believe that one of the main contri-
butions of eXpose is the ability to automatically (cid:12)nd dependencies
for all the important applications. eXpose learnt rules for web activ-
ity, email viewing, video lecture broadcasts, printers and dependen-
cies at all the prominent servers.
eXpose discovered rules indicating that name lookup is a key in-
gredient of activities ranging from distributed (cid:12)le-systems to email
and web access.
∗.∗ : Server.port ⇒ ∗.∗ : DN S.53
∗.∗ : Server.port ⇒ ∗.∗ : W IN S.137
ˆe (cid:12)rst rule shows that a client accessing any server does a
DNS lookup for names, while the latter shows the client doing a
WINS (windows name server) lookup. Names in the Enterprise are
distributed across DNS and WINS tables. Such rules were ubiqui-
tous for every one of the servers mentioned in the rest of the trace,
so we omit further mention.
Web: For web-browsing, we found that a majority of the proxies
requested authentication credentials before access.
P roxy1.500 : ∗.∗ ⇒ P roxy1.80 : ∗.∗
ˆis generic rule shows that when fetching HTTP data (at port @ʃ)
from a proxy, clients exchange Kerberos credentials (at port ʈʃʃ).
E-Mail: eXpose found dependencies for e-mail access.
Client.∗ : M ail.135 ⇒ Client.∗ : DC.88
Client.∗ : M ail.135 ⇒ Client.∗ : M ail.X
Client.∗ : M ail.X ⇒ Client.∗ : P F S1.X, Client.∗ : P F S2.X
Client.∗ : M ail.X ⇒ Client.∗ : P roxy.80
ˆe rules show that whenever a client talks to a mail server, he
talks to a domain-controller (DC); the DC servers on port @@ is-
sue Kerberos credentials a(cid:13)er authenticating the user. ˆe second
rule shows that the actual mail server is on a “custom port”, so the
clients (cid:12)rst look up the end-point mapper on port ʄʆʈ at the server
to learn which port the actual exchange server process is located
at. Enterprise-wide public mail is stored elsewhere on public folder
servers. Many clients browse through public mail simultaneously
with their personal mail. Finally, we found that most mail contains
HTTP content, or has links to content, so the users connect to the
proxies when reading mail.
A couple of points are worth noting here. ˆe e-mail dependen-
cies are the (cid:12)rst instance of multi-host dependencies and show the
ease with which eXpose extends across hosts and applications. eX-
pose discovered these rules without being told that email was an
important activity and without knowing which ports/servers are in-
volved in email. Clients within the Enterprise are distributed across
multiple mail servers, so we found multiple instances of the above