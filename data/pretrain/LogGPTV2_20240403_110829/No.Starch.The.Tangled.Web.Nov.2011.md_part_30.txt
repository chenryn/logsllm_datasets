Connection Limits
In many web applications, each web page consists not only of the proper
HTML document retrieved from the URL visible in the address bar but
alsoas many as several dozen other, separately loaded subresources, such
asimages, stylesheets, and scripts. Because requesting all of these elements
through individually established HTTP connections can be slow, the reader
may recall from Chapter 3 that the protocol has been extended to offer keep-
alive sessions and request pipelining. But even with these improvements, one
stubborn problem remains. The inherent limitation of the protocol is that
the server must always send responses in the same order that it received the
requests, so if any of the subresources (no matter how inconsequential) takes
a bit longer to generate, the loading of all subsequent ones will be delayed.
To work around this problem, and to optimize performance when keep-
alive requests or pipelining can’t be used, all browsers permit the opening of
several simultaneous HTTP connections to the destination server. This way,
the browser can issue multiple requests in parallel.
Unfortunately, the parallel connection design can be expensive for the
destination website, especially if the server relies on the traditional fork()-
based connection-handling architecture.* Therefore, in order to limit the
risk of accidentally or intentionally launching a distributed DoS attack, the
number of parallel connections needs to be limited to a modest per-host
value, typically between 4 and 16. Furthermore, to prevent attackers from
overloading the browser itself (or affecting the performance of the nearby
networking equipment), the total number of simultaneous connections to
alldestinations is also constrained to a low multiple of the per-host cap.
NOTE In many implementations, the per-host connection limit is enforced by looking at DNS
labels, not at IP addresses. Therefore, an attacker may still be able to point several
bogus DNS entries in his own domains to any unrelated target IP and circumvent
thefirst restriction. The global connection limit will be still in effect, though.
Although the number of concurrent HTTP sessions is limited, there are
no practical restrictions on how long an active session may be kept alive (that
is, as long as no kernel-level TCP/IP timeouts are encountered). This design
* The traditional design of most Unix services is to have a master “listener” process, and then
create a new process for handling every accepted connection. For the developer, this model is
remarkable in its simplicity; but it comes with many significant hidden costs for the operating
system, which sometimes finds handling more than several hundred simultaneous connections
at once challenging.
216 Chapter 14
may make it possible for attackers to simply exhaust the global connection
limit by talking to a couple of intentionally slow destinations, preventing the
user from doing anything useful in the meantime.
Pop-Up Filtering
The window.open(...) and window.showModalDialog(...)* APIs permit web pages
to create new browser windows, pointing them to any otherwise permitted
URLs. In both cases, the browser may be instructed not to show certain win-
dow decorations for the newly loaded document or to position the window
on the screen in a specific way. A simple use of window.open(...) might look
like this:
window.open("/hello.html", "_blank", "menubar=no,left=50,top=50");
In addition to these two JavaScript methods, new windows may also be
opened indirectly by programatically interacting with certain HTML ele-
ments. For example, it is possible to call the click() method on an HTML link
or to invoke the submit() method on a form. If the relevant markup includes
atarget parameter, the resulting navigation will take place in a new window
ofa specified name.
As could be expected, the ability for random web pages to open new
browser windows soon proved to be problematic. In the late 1990s, many
players in the then-young online advertising industry decided they needed
toattract attention to their ads at any cost, even at the expense of profoundly
annoying and alienating their audiences. Automatically spawning windows
solely to show a flashy advertisement seemed like a great way to do business
and make new friends.
Pop-up and pop-under† advertisements have quickly emerged as one of
the best-known and most reviled aspects of the Web. For good reason, too:
Especially with pop-unders, it would not be unusual to amass a dozen of
them after two to three hours of casual browsing.
Due to widespread complaints, browser vendors stepped in and imple-
mented a simple restriction: Spurious attempts by non-whitelisted pages to
create new windows would be silently ignored.‡ Exceptions were made for
attempts made immediately after a mouse click or a similar user action. For
* The little-known showModalDialog(...) method is a bit of a misnomer. It is essentially equivalent
to window.open(...), but it is supposed to vaguely emulate the behavior of a modal dialog by block-
ing the scripts in the calling context until such a “dialog” window is dismissed. The exact behav-
ior of this API varies randomly from one browser to another. For example, it is sometimes possible
for other pages to navigate the underlying window or execute new scripts while the original JS
code that called showModalDialog(...) is in progress.
† A “pop-under” is a pop-up window that, immediately after its creation, is moved to the back of
the window stack with the help of opener.window.focus() or window.blur(). Pop-unders are arguably
slightly less distracting than pop-ups, because the user does not have to take immediate action to
go back to the original document. They are no less despised, however.
‡ For example, a call to window.open(...) would not generate an exception. The return value in
such a case is not standardized, however, making it difficult to detect a blocked pop-up reliably.
In Internet Explorer and Firefox, the function will return null; in Safari, it will return another
special value, undefined; in Opera, a dummy window handle will be supplied; and in Chrome, the
returned window handle will even have a quasi-functional DOM.
Dealing with Rogue Scripts 217
example, in the case of JavaScript, the ability to call window.open(...) would be
granted to code executed in response to an onclick event and revoked shortly
thereafter. (In Internet Explorer and WebKit, this permission expires the
moment the event handler is exited. Other browsers may recognize a short
grace period of one second or so.)
The pop-up blocking feature initially curtailed pop-up advertising but, ulti-
mately, proved to be fairly ineffective: Many websites would simply wait for the
user to click anywhere on the page (in order to follow a link or even scroll the
document) and spawn new windows in response. Others simply moved on to
even more disruptive practices such as interstitials—full-page advertisements
you need to click through to get to the content you actually want to read.
The advertising arms race aside, the war on window.open(...) is also inter-
esting from the DoS perspective. Creating hundreds of thousands of windows,
thereby exhausting OS-enforced limits on the number of UI handles, is a
sure way to crash the browser and to disrupt other applications as well. Any
mechanism that limits this capability would be, at least in theory, a valuable
defense. No such luck: Unbelievably, only Internet Explorer and Chrome
sensibly limit the actual number of times window.open(...) can be called in
response to a single click. In other browsers, once the temporary permission
to open windows is granted, the attacker can go completely nuts and open as
many windows as she desires.
Dialog Use Restrictions
Window-related woes aside, all web-originating scripts can open certain
browser- or OS-handled dialogs. The usefulness of these dialogs to modern
web applications is minimal, but they still constitute another interesting part
of the browser security landscape. Dialog-initiating APIs include window
.alert(...), used to display simple text messages; window.prompt(...) and window
.confirm(...), used to request basic user input; and window.print(...), which brings
up the OS-level printing dialog. A couple of obscure vendor extensions, such
as Mozilla’s window.sidebar.addPanel(...) and window.sidebar.addSearchEngine(...)
(to create bookmarks and register new search providers, respectively), are
also on this list.
The aforementioned JavaScript methods aside, several types of dialogs
can be spawned indirectly. For example, it is possible to invoke the click()
method on a file upload button or to navigate to a downloadable file, which
usually brings up the OS-supplied file selection dialog. Navigating to a URL
that requires HTTP authentication will also typically bring up a browser-level
prompt.
So, what makes dialogs so interesting? The challenge with these prompts
is quite different from that of programmatically created windows. Unlike
thelargely asynchronous window.open(...) API, dialogs pause the execution of
JavaScript and defer many other actions (such as navigation or event deliv-
ery), effectively preventing dialogs from being created in large numbers to
exhaust resources and crash the application. But their modal behavior is
also their curse: They prevent any interaction with some portion of the
browser until the user dismisses the dialog itself.
218 Chapter 14
This creates an interesting loophole. If a new dialog is opened immedi-
ately after the old one is closed, the victim may be locked out of a vital portion
of the browser UI, often even losing the ability to close the window or navi-
gate away from the offending page. Malware authors sometimes abuse that
quirk to force casual, panicked users to perform a dangerous action (such as
downloading and executing an untrusted executable) just to be permitted to
continue their work: Making any other choice in the script-initiated security
prompt will only make the same dialog reappear over and over again.
Probably because of this malware-related tangent, browser vendors have
begun experimenting with less disruptive prompting methods. In Chrome,
for example, some of the most common modal dialogs have a checkbox that
allows the user to suppress future attempts by the page to use the offending
API (until the next reload, that is). In Opera, it is possible to stop the execu-
tion of scripts on the page. And in both Opera and recent versions of Firefox,
many common dialogs are modal
only in relation to the document-
controlled area of the window, still
allowing the tab to be closed or a
different URL to be entered in the
address bar. Nevertheless, the cov-
erage of such improvements is
limited.
Figure 14-1: Firefox generated a profoundly
NOTE *Many browser-level dialogs do a poor confusing and vague prompt following the exe-
cution of an onbeforeunload handler on a web
job of explaining where the prompt
page. The handler gives page authors a chance
originated and its intended purpose.
to explain the consequences of navigating away
In some cases, such as the Firefox dia-
from their page (such as losing any unsaved
log shown in Figure 14-1, the result data) and requests a final decision from the
can be comical—and there is a more user.* In this screenshot, the first and the last
sinister side to such goofiness, too. line come from the browser itself; the middle
Spawning authoritative-sounding dia- two lines are an “explanation” supplied by an
(unnamed!) rogue website instead. The security
logs that claim to be coming from the
impact of this particular dialog is minimal, but
operating system itself is a common
it is a remarkable example of poor UI design.
trick used by malware authors to con-
Sadly, a nearly identical dialog is also used by
fuse less experienced users. It’s not Internet Explorer, and most other browser dia-
hard to imagine why that works. logs are not much better.
Window-Positioning and Appearance Problems
All right, all right—let’s move beyond the arguably uninspiring and unpopu-
lar topic of DoS flaws. There is a lot more to the various UI-related APIs—
and window.open(...) is a particularly curious case. Recall from the discussion
earlier in this chapter that this humble function permits web applications not
only to create new windows but also to position them in a specific spot on the
* For usability reasons, random pages on the Internet are no longer permitted to abort pending
navigation by means other than this specific onbeforeunload dialog. (Surprisingly, the by-design
ability to trap the user on a rogue page forever and cancel any navigation attempts wasn’t
received well.)
Dealing with Rogue Scripts 219
screen. Several other methods, such as window.moveTo(...), window.resizeTo(...),
window.focus(), or window.blur(), further permit such a window to be moved
around the screen, scaled, or stacked in a particular way. Finally, window.close()
allows it to be discreetly disposed of when the script no longer needs it.
As with most other UI-manipulation features, these APIs soon proved to
be a source of pain. Following a series of amusing hacks that involved creat-
ing “hidden” windows by placing them partly or completely off-screen or by
making them really tiny, these functions now require newly created windows
to have certain minimal dimensions and to stay entirely within the visible desk-
top area. (It is still possible to create a window that constantly hops around
the screen and evades all mouse-driven attempts to close it, but given what
you’ve read so far, this deserves nothing but a heavy sigh.)
The restrictions on window
size do not mean that the entire
contents of the address bar have
to be visible to the user, how-
ever. An undersized window
could be leveraged to mislead
the user as to the origin of a
document simply by carefully
truncating the hostname, as
shown in Figure 14-2. Browser
vendors have been aware of this
problem since at least my report
in 2010,1 but as of this writing,
only Internet Explorer uses a
somewhat convincing if subtle
mitigation: It appends “...” at
the end of any elided host-
Figure 14-2: A window carefully sized by a script
names in the address bar.
so that the real origin of the displayed content is
Another interesting issue
elided ina confusing way. The actual URL of this
with script-controlled window cat-themed page is http://www.example.com
positioning is the prospect of .coredump.cx/, nothttp://www.example.com/.
creating several cleverly aligned,
overlapping windows to form what appears to be a single document window
with an address bar that doesn’t correspond to portions of the document dis-
played. This attack, which I like to call window splicing, is perhaps best illus-
trated in Figure 14-3.
Window positioning offers some interesting if far-fetched attack scenar-
ios, but manipulating the contents of a programmatically created window is
also of some relevance to browser security. We have already mentioned that
one of the features of the window.open(...) API is its ability to hide certain ele-
ments of the browser chrome (scrollbars, menus, and so on) in the newly
opened window. An example of such a UI-restricting call is
window.open("http://example.com/", "_blank", "location=no,menubar=no");
220 Chapter 14
Figure 14-3: A window-splicing attack in Chrome. What may appear as a single document
is actually a composite of two overlapping, aligned windows. The user is led to believe that
the file upload button comes from the domain shown in the address bar of the top window,
but it does not. Certain visual cues indicate foul play (for example, part of the window bor-
der has a slightly different hue), but they are too subtle to be easily noticed by the user.
One of these settings, location=no, was meant to hide the address bar.
This is, of course, a horrible idea: It enables the attacker not only to hide the
actual address bar but also to load a page that simply provides a pixel-perfect
image of the address bar showing a completely unrelated URL. Heck, with
some minimal effort, that fake address bar may even be fully interactive.
Realizing the dangers of this design, most browsers eventually began
displaying a minimalistic, read-only address bar in any windows opened with
location=no; Apple, however, sees no harm in allowing this setting to work as
originally envisioned in the 1990s. Too bad: Figure 14-4 shows a simple attack
on its UI. (I contacted Apple about this attack sometime in 2010 but have yet
to hear back.)
Figure 14-4: Allowing websites to hide the address bar in Safari is a bad idea.
The displayed document is not retrieved from http://www.example.com/.
Instead, the page simply displays a screenshot of a real address bar in a win-
dow created by window.open("http://coredump.cx/...", "location=no").
Dealing with Rogue Scripts 221
Microsoft has not fared much better: Although they patched up
window.open(...), they forgot about window.createPopup(...), an ancient
andobscure API still not subject to the necessary checks.
Timing Attacks on User Interfaces
The problems we’ve discussed so far in this chapter may be hard to fix, but at
least in principle, the solutions are not out of reach. Still, here’s a preposter-
ous question: Could the current model of web scripting be fundamentally
incompatible with the way human beings work? By that, I do not mean merely
the dangers of web-delivered social engineering that targets the inattentive
and the easily confused; rather, I’m asking if it’s possible for scripts to consis-
tently outsmart alert and knowledgeable victims simply due to the inherent
limitations of human cognition?
The question is outlandish enough not to be asked often, yet the answer
may be yes. Consider that in a typical, attentive human subject, the usual
latency between a visual stimulus and a voluntary motor response is between
100 and 300 milliseconds.2 Humans do not pause for that long to assess the
situation after every minute muscle movement; instead, we subconsciously
schedule a series of learned motor actions well in advance and process any
sensory feedback as it arrives later on. For a split second, we cannot abort a
premeditated action, even if something goes horribly wrong.
Alas, on today’s personal computers, a lot can happen in as little as one-
tenth of that interval. In particular, scripts can open new windows, move them
around, or close any existing ones; they can also initiate or abort system-level
prompts. In such a setting, designing security-sensitive UIs is not nearly as
simple as it seems, and some types of attacks may be simply impossible to
defend against without a major paradigm shift in how we design software.
To illustrate the issue, consider a page that attempts to start an unsolicited
download of a dangerous file type. The download will typically initiate a browser-
level dialog with three options: “open,” “save,” and “cancel.” Sane users will
make that last choice—but not if the attacker robs them of a chance to do so.
Let’s assume that just milliseconds after the dialog is opened, and per-
haps before the user even registers its presence, a new window is created
ontop that hides it from view. In that window, the attacker plants a carefully
positioned button or link that the user is likely to click, for example, a button
to dismiss an annoying interstitial advertisement. As the user attempts to per-
form this perfectly reasonable action, the rogue page may use onmousemove
events to monitor the position and velocity of the mouse pointer and fairly
accurately predict the timing of an upcoming click. Closing the overlay win-
dow several milliseconds before that click, only to reveal the “open” button
in the same position, will lead the user inevitably to make that choice in the
security prompt. There is simply nothing the user can do. (I demonstrated a