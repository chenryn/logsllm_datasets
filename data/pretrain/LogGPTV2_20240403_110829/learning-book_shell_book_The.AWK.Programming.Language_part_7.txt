prccedence are evaluated left to right; thus 3-2-1 is (3-2)-1, not 3-(2-1).
---
## Page 57
SECTION 2.2
ACTI0NS47
Since there is no explicit operator for concatenation, it is wise to
the program
$1$
and
$1 0;i--)print x[i] }
The first action merely records each input line in the array x, using the line
number as a subscript; the real work is done in the END statement.
The characteristic that sets awk arrays apart from those in most other
languages is that subscripts are strings. This gives awk a capability like the
associative memory of SNOBOL4 tables, and for this reason, arrays in awk are
called associative arrays.
The following program accumulates the populations of Asia and Europe in
the array pop. The END action prints the total populations of these two con-
tinents.
---
## Page 61
SECTION 2.2
ACTIONS
51
/Asia/(pop["Asia"]+= $3}
（es=+[adoxng]dod}/adoxng/
END
{print "Asian population is*,
pop["Asia*],“million."
print "European population io",
pop["Europe°],“nillion.*
}
On countries, this program generates
Asian population is 2173 mi1lion.
European population is 172 mi1lion.
we had written pop[Asia] instead of pop["Asia"], the expression would
have used the value of the variable Asia as the subscript, and since the variable
is uninitialized, the values would have been accumulated in pop[ "" ].
This example doesn’t really need an associative array since there are only
two elements, both named explicitly. Suppose instead that our task is to deter-
mine the total population for each continent. Associative arrays are ideally
suited for this kind of aggregation. Any expression can be used as a subscript in
an array reference,so
pop[$4]+= $3
e  x        s  s
pop and in that entry accumulates the value of the third field:
BEGIN(FS ="\t”)
(for （nane in pop)
{pop[$4]+=$3}
END
、
print nane, pop[name]
The subscripts of the array pop are the continent names; the values are the
accumulated populations. This code works regardless of the number of con-
tinents; the output from the countries file is
North America 340
South America
Asia 2173
134
Europe 172
The last program used a form of the for statement that loops over all sub-
scripts of an array:
fox (variable in array)
statement
This loop executes statement with variable set in turn to each different subscript
in the array. The order in which the subscripts are considered is implementa-
tion dependent.Results are unpredictable if new elements are added to the
array by statement.
---
## Page 62
52THE AWK LANGUAGE
CHAPTER 2
You can determine whether a particular subscript occurs in an array with
the expression
subscript in A
This expression has the value 1 if A [subscripr ] already exists, and 0 otherwise.
Thus, to test whether Africa is a subscript of the array pop you can say
if (°Africa* in pop)...
This condition performs the test without the side effect of creating
.（=1[oxv]dod） 
Note that neither is a test of whether the array pop contains an element with
value "Africa".
The delete Statement. An array element may be deleted with
delete array[subscripr]
For example, this loop removes all the elements from the array pop:
for (i in pop)
The split Function.The function split（str,arr,fs) splits the string
value of str into fields and stores them in the array arr. The number of fields
produced is returned as the value of split. The string value of the third argu-
ment, fs, determines the field separator. If there is no third argument, FS is
used. In either case, the rules are as for input field splitting, which is discussed
in Section 2.5. The function
split("7/4/76",arr, "/")
splits the string 7/4/76 into three fields using / as the separator; it stores 7 in
[]xu9‘]xx[]xx
Strings are versatile array subscripts, but the behavior of numeric subscripts
as strings may sometimes appear counterintuitive. Since the string values of 1
and "1” are the same, arr[1] is the same as arr["1"]. But notice that 01
is not the same string as 1 and the string 10 comes before the string 2.
Multidimensional Arrays. Awk does not support multidimensional arrays
directly but it provides a simulation using one-dimensional arrays. Although
you can write multidimensional subscripts like 1,  or 8,P,Q,x, awk concaten-
thesize a single subscript out of the multiple subscripts you write. For example,
for (1 = 1; n 7 = : n
The variables m and n belong to the function max; they are unrelated to any
---
## Page 64
54
THEAWK LANGUAGE
CHAPTER 2
other variables of the same names elsewhere in the program.
A user-defined function can be used in any expression in any pattern-action
statement or the body of any function definition. Each use is a call of the func-
tion. If a user-defined function is called in the body of its own definition, that
function is said to be recursive.
For example, the max function might be called like this:
{print max（$1,max（$2,$3)) }print maximum of $1,$2,$3
function sax（n,n)(
return m > n ? m : n
of the argument list when the function is called.
nary variable, the function is given a copy of the value of the variable, so the
function manipulates the copy, not the variable itself. This means that the func
tion cannot affect the value of the variable outside the function. (The jargon is
that such variables, called “scalars," are passed “by value.") Arrays are not
copied, however, so it is possible for the function to alter array elements or
tion may not be used as a parameter.
To repeat, within a function definition, the parameters are local variables 
they last only as long as the function is executing, and they are unrelated to
variables of the same name elsewhere in the program. But all other variables
are global; if a variable is not named in the parameter list, it is visible and
accessible throughout the program.
This means that the way to provide local variables for the private use of a
function is to include them at the end of the parameter list in the function
definition. Any variable in the parameter list for which no actual parameter is
supplied in a call is a local variable, with null initial value. This is not a very
elegant language design but it at least provides the necessary facility. We put
several blanks between the arguments and the local variables so they can be dis-
tinguished.
2.4Output
The print and printf statements generate output. The print statement
is used for simple output; printf is used when careful formatting is required.
Output from print and printf can be directed into files and pipes as well as
to the terminal. These statements can be used in any mixture; the output comes
out in the order in which it is generated.
---
## Page 65
SECTION 2.4
55
Output Statements
print
print $0 on standard output
print expression, expression, ..
print expression’s, separated by OFS, terminated by ORS
print expression, expression, - >filename
print on file filename instead of standard output
print expression, expression,-.>>flename
append to file filename instead of overwriting previous contents
print expression, expression, -. 1 command
print to standard input of command
printf(formar, expression, expression,..)
printf(formar, expression, expression, ..) >filename
printf (format,expression, expression, ..) >>filename
printf (formar , expression, expression, ..)1 command
printf statements are like print but the first argument specifies output format
close(filename),close(command)
break connection between print and filename or command
system(command)
cxecute command; value is status return of command
The argument list of a printf statement does not need to be enclosed in parentheses.
But if an expression in the argument list of a print or printf statement contains a
relational operator, either thc expression or the argument list must be
enclosed in
parentheses. Pipes and system may not be available on non-Unix systems.
The print Statement
The print statement has two forms:
print expr,expr，…，expr,
print（expr:,expr，….，expr,)
Both forms print the string value of each expression separated by the output
field separator followed by the output record separator. The statement
print
is an abbreviation for
print $0
To print a blank line, that is, a line with only a newline, use
print **
The second form of the print statement encloses the argument list in
parentheses, as in
---
## Page 66
56
THE AWK LANGUAGE
CHAPTER 2
print(s1 ":",$2)
 me qo s o g sd o s q
see, parentheses are necessary for arguments containing relational operators.
Output Separators
The output field separator and output record separator are stored in the
built-in variables OFS and ORS. Initially, OFS is set to a single blank and ORS
to a single newline, but these values can be changed at any time. For example,
the following program prints the first and second fields of each line with a colon
between the fields and two newlines after the second field:
BEGIN
（OFS =*:”;ORS="\n\n”}
（print s1,$2 }
By contrast,
{print $1 $2 }
prints the first and second fields with no intervening output field separator,
because $1 $2 is a string consisting of the concatenation of the two fields.
The printf Statemont
The printf statement is used to generate formatted output. It is similar to
that in C except that the • format specifier is not supported. Like print, it
has both an unparenthesized and parenthesized form:
printf formar，expr,expr，…，expr
printf(format,expr;,expr， …,expr。)
The formar argument is always required; it is an expression whose string value
contains both literal text to be printed and specifications of how the expressions
in the argument list are to be formatted, as in Table 2-9. Each specification
begins with a %, ends with a character that determines the conversion, and may
include three modifiers:
left-justify expression in its field
width
pad field to this width as needed; leading 0 pads with zeros
-prec
maximum string width, or digits to right of decimal point
Table 2-10 contains some examples of specifications,data,and the
corresponding output. Output produced by printf does not contain any new-
lines unless you put them in explicitly.
Output into Files
The redirection operators > and >> are used to put output into files instead
of the standard output. The following program will put the first and third fields
of all input lines into two files: bigpop if the third field is greater than 100,
---
## Page 67
SECTION 24
OUTPUT
57
TABLE 2-9. PRINTF FORMAT-CONTROL CHARACTERS
CHARACTER
PRINT EXPRESSION AS
C
decimal integer
ASCII character
P
e
[-]d.dddddde[+-]dd
f
[-]ddd.dddddd
g
e or f conversion, whichever is shorter, with
nonsignificant zeros suppressed
unsigned octal number
string
X