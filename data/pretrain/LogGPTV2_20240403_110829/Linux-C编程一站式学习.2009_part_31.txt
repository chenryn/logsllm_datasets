，在我的系统上内
者属于应用软
，用户不需
4. MMU
下一页
产
一
它
是
核
生
定
序
---
## Page 265
片的外部地址引脚上，也就是将VA映射成PA，如下图所示。
为虚拟地址（Virtual Address，
如果处理器启用了MMU，CPU执行单元发出的内存地址将被MMU截获，
现代操作系统普遍采用虚拟内存管理（Virtual Memory Management）机制，
4.MMU请点评
用，CPU执行单元发出的内存地址将直接传到芯片引脚上，被内存芯片（以下称为物理内存，
首先引入两个概念，
处理器芯片
图17.6.虚拟地址
处理器芯片
图17.5.物理地址
CPU核
CPU核
叫折税
，虚拟地址和物理地址。
MMU
以下简称VA）
第17章计算机体系结构基础
总线接口
设备
总线接口
设备
全国嵌入式人才培训基地
。如果处理器没有MMU，或者有MMU但没有启
，而MMU将这个地址翻译成另一个地址发到CPU芯
 4. MMU
内存芯片
内存芯片
设备
设备
从CPU到MMU的地址称
这需要处理器中
以便
---
## Page 266
异常由CPU内部产生,
面不允许访问，
MMU除了做地址转换之外，
computer science can be solved by another level of indirection.还记得这句话吗？ 多了 -
指令中的地址被CPU解释执行，
我们在程序中使用的变量和函数都有各自的地址，
操作系统和MMU是这样配合的：
页称为物理页面或者页帧（Page Frame）
果CPU执行单元要访问虚拟地址0xb7001008，则实际访问到的物理地址是0x2008。物理内存中的
MMU将VA映射到PA是以页（Page）为单位的，32位处理器的页尺寸通常是4KB。例如，
为0等都会产生异常。
于CPU当前执行的指令出了问题，
个VA时，
射到什么PA。
过页表（Page Table）来描述的，
于4GB。
地址空间是独立的，32位处理器的虚拟地址空间是4GB，而物理地址空间既可以大于也可以小
可，
是取指令
以通过一
址线)
如果是32位处理器，
管理机制的作用。
是为了解决什么问题的，
复杂的内存管理机制呢？多了一层VA到PA的转换到底换来了什么好处？Al problems in
2．设置好之后，
1．操作系统在初始化或分配、释放内存时会执行一些指令在物理内存中填写页表，然后用指令
，程序中使用的地址都是虚拟地址,
转换操作由硬件自动完成，不需要用指令控制MMU去做。
设置MMU，告诉MMU页表在物理内存中的什么位置。
图17.7.处理器模式
，MMU会检查CPU当前处于用户模式还是特权模式,
一个映射项将VA的一页0xb7001000~0xb7001fff映射到PA的一页0x2000~0x2fff，
而经过MMU转换之后的外地址总线则不一定是32位的。也就是说，
如果和操作系统设定的页面权限相符，
，、有些页面只有在CPU处于特权模式时才允许访问，有些页面在用户模式和特权模式
，CPU每次执行访问内存的指令都会自动引发MMU做查表和地址转换操作，地址
，则内地址总线是32位的，
，中断产生的原因和CPU当前执行的指令无关，而异常的产生就是由
，等讲完了必要的预备知识之后，将在第5节“虚拟内存管理"讨论虚拟内
还提供内存保护机制。各种体系结构都有用户模式（User Mode）
 就成了CPU执行单元发出的内存地址，
例如访问内存的指令被MMU检查出权限错误，
，页表保存在物理内存中，MMU会查找页表来确定一个VA应该映
 异常的处理过程和中断类似，
，都会引发MMU做查表和地址转换操作。那为什么要设计这
，虚拟内存的哪个页面映射到物理内存的哪个页帧是通
与CPU执行单元相连（图中只是示意性地画了4条地
，程序被编译后,
就允许访问,
访问内存的目的是读数据、写数据还
，不同的是中断由外部设备产生而
 把它转换成PA,
，这些地址就成了指令中的地址
所以在启用MMU的情况
当CPU要访问一
虚拟地址空间和物理
 否则不允许访 
除法指令的除数
一层间接必
如
，MMU可
和
页
---
## Page 267
3.设备
段错误我们已经遇到过很多次了，
到特权模式执行内核程序，处理完中断或异常之后再返回用户模式继续执行用户程序。
成的。总结一下：在正常情况下处理器在用户模式执行用户程序，在中断或异常情况下处理器切换
或异常服务
不仅会跳转到中断或异常服务程序，
法地址，
能访问内核中的数据,
后1GB（Oxc0000000~0xff）是内核空间。
是0x00000000~0xfff，
通常操作系统把虚拟地址空间划分为用户空间和内核空间,
上一页
3．内核把这个异常解释为段错误，把引发异常的进程终止掉。
2．MMU产生一个异常，CPU从用户模式切换到特权模式，跳转到内核代码中执行异常服务程
1．用户程序要访问的一个VA，经MMU检查无权访问。
序。
，顶多这一个进程崩溃，
务程序可以跳转到内核代码中执行。事实上,
User mode
exception
Interrupt or
 也不能跳转到内核代码中执行。这样可以保护内核，
exception
interrupt or
Retum from
，而不会影响到内核和整个系统的稳定性。CPU在产生中断或异常时
，它是这样产生的：
Privileged mode
，还会自动切换模式，
全国嵌入式人才培训基地
，用户程序加载到用户空间,
起始页
上一级
 整个内核就是由各种中断和异常处理程序组
从用户模式切换到特权模式，
 例如x86平台的Linux系统虚拟地址空间
在用户模式下执行,
如果一个进程访问了
 5. Memory Hierarchy
因此从中断
下一页
不
---
## Page 268
5. Memory Hierarchy 请点评
各种存储器的容量和访问速度的典型值。
是CPU寄存器、Cache、内存、
计算机都把存储器分成若干级，
存储器，
由于硬件技术的限制，
存储器呢？这些存储器各自有什么特点？这是本节要讨论的问题。
硬盘、内存、CPU寄存器,
存储器
表 17.1. Memory Hierarchy
几十～几百B
几十~几百KB
几百KB~几MB
几百MB~几GB
几百GB~几TB
图 17.8. Memory Hierarchy
，但不可能两边的好处都占着，
类型
典型容量
位于哪里
一级Cache
二级Cache
我们可以制造出容量很小但很快的存储器，
寄存器
内存
硬盘
 还有本节要讲的Cache,
几十个，
器通常只
CPU寄存
存储容量
 硬盘，越靠近CPU的存储器容量越小但访问速度越快，
称为Memory Hierarchy,
3~15 ms
典型访问时间
第17章计算机体系结构基础
1 ns
5~10 ns
40~60 ns
100~150 ns
，不可能制造出访问速度又快容量又大的存储器。因此，现代
 5. Memory Hierarchy
名字，它由一组触
全国嵌入式人才培训基地
是一种数字电路的
“寄存器"这个名字就
半导体工艺
，这些都是存储器，计算机为什么要有这么多种
 按照离CPU由近到远的顺序依次
寄存器是
访问时间
也可以制造出容量很大但很慢的
如何访问
下图给出了
下一页
---
## Page 269
Cache
存
CPU寄
器
行单元中。
和MMU一
CPU核
位
百
靠近
级Cache更扰
级Cache,
的两 
上图所示
Cache通常
每个寄存
几MB。
儿
级
几十到几
级
常
内
靠
级
11
几节
-以有
字
于
取
器
百KB到
Cache有
Cache有厅
Cache
CPU执
分为几
KB，
存
CPU的
决
的容量
[
近
一共只
长
元，
最典
字
物
二
通
更
问速度比SRAM慢。
容量可以做得更
比SRAM简单,
成。DRAM电路
态RAM）组
RAM，动
由DRAM
由SRAM（Static 
据会丢失。不同白
时RAM中保存的数
访问，计算机掉
可以根据地址随机
Access
由RAM (Random
Cache和内存都是
的数据会去
电时寄存器
等操作。计算机掉
可以做存取和移位
大
态
存一个Bit的数据,
成
发器（Flip-flop）组
，但DRAM的访
存通常
RAM)
Cache通常
每个触发器保
）组成，
1(Dynamic
失
中保存
存储
而
的
电
几十纳
典型的访
时间是）
型的访
储器，
最快的存
问时间是
纳
访问速度
秒。
是
2
问
典
存
度
访问物理内存之
了二级
如果计算机还配置
小是32~256字节。
个Cache Line,
字节都取上来缓
是把相邻的几十>
就取哪个字节，
并不是要
内存中耳
该数据，
果Cache没有
到Cache中；如
接改写
如果是写操作就直
传给CPU寄存器，
将Cache中的数据
作就直接 
存了，
不需要访问物理
如果Cache中有京
据有没有被缓存，
用VA查找相应的数
出VA，Cache利
先发
元要访问内存时首
作的：CPU执行
级Cache是这样
提高计算机的整体
用Cache可以大
速度是
由于Cache的访
问过的内存数据，
Cache缓存最近访
定
这
使
的
些都是由指令决
使用哪个寄存
这称为一
以备下次用
所以有效利
写
是内存的几十
，如果是读操
。
缓
要哪个字
取数据，
，就去物王
存
，则
置在前
典
存
个
而
目
存
就纳
首
大
可
---
## Page 270
对这个表格总结如下。
问一个很小的地址范围中的数据（例如访问一个数组）。所以预读缓存的办法是很有效
Cache从内存取数据时会预取一个Cache Line缓存起来，
个页面缓存起来，
是硬件自动完成的，
除
寄存器、
（Locality）的特点：它们会花费大量的时间反复执行一小段代码（例如循环）
余了访问寄存器由程序指令直接控制之外，
硬盘
内存
CPU取一
、Cache和内存中的数据都是掉
连过
和
直
线
地
与
的
硬
ICPU相
接
于设
线相
址
CPU通
控
‘
芯
于CPU外
一条指令，我把和它相邻的指令也都缓存起来，CPU很可能马上就会取
设
人
备制