# 网络防御之恶意流量分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 常见协议的RFC文档正常值
  * 为什么要查询RFC文档呢？
它可以将正常的行为流量与异常的攻击流量区分开来。能看出来正常的值就等于能观察到异常的攻击流量。
一个强有力的意识就是：遇到可疑，就来RFC查询它们的合法解释，如果未找到合法的行为解释，显而易见，它属于非法。遇事不决，RFC文档。
###  ARP
**wireshark样本**
  * 实战练习可以在官网把样本下载下来自己观察  
 【官方样本】  
 【官方样本】  
【本例中使用此样本】
这个协议本身没几个字段，相对简单容易理解。就不放RFC文档了，感兴趣的可以自己阅读一下wiki
  * 需要注意的是，将解析物理地址调整出来，便于观察mac地址来核查可疑的痕迹
  * 比如发现bogon很可疑，则可以将该目标过滤出来。注意：大部分情况下，不需要使用语法。直接选中。bogon旨在表示假的，伪造的。  
  * 使用选中功能生成语法，在此基础上再使用一些布尔运算符之类的拼拼凑凑即可。
  * 如果发现同一个MAC值，对应多个IP身份，则很可疑
  * 这里是请求与响应的操作码，广播包。注意请求包的目标地址是广播。如果不是广播则不正常。  
###  ICMP
  *  RFC-792  
【本例中使用此样本】
ICMP是用于分析网络上的各种节点诊断信息的。 常体现于ping和traceroute之类的实用程序。
  * type值8是请求包，type值0是应答包  
  * 如果您发现其他值，请看RFC文档对应字段的解释 比如type=3为目标不可达，type=11 为超时，type=12 参数存在问题等。code是具体type对应的不同原因值。  
  * Timestamp有时被用于确认事情发生的时间点  
  * 我们发现在type 8和0的包格式中，data字段没有限制多少bit  
  * 并且还发现data字段，identifier字段，sequence字段，code 0在请求包中是什么值，响应包就返回相同值。  
  * 观察正常的包也确实和RFC文档中描述的一模一样  
###  TCP
RFC-793
  * 
样本
  * 
  * 编辑>首选项>协议> TCP>去掉相对序列号的钩来查看原始序列号。  
  * 如果未出现raw原始序列号，则把钩选上再看。对于TCP主要观察序列号和确认号  
  * 如果对头格式中的其他字段感兴趣，则可以进入到RFC文档。点击头格式查看解释  
Data Offset: 表示数据从哪里开始  
URG：紧急指针字段意义重大  
ACK：确认字段有效  
PSH：推送功能  
RST：重置连接  
SYN：同步序列号  
FIN：没有来自发件人的更多数据
  * TCP需要注意的点是 端口，flags，以及三次握手的顺序（如果莫名其妙先出现SYN,ACK，则一定有问题，比如有人在绕waf）  
  * nmap的各种类型的扫描留给大家自己观察，这里就不赘述了。
###  DNS
RFC-1035  
【本例使用此样本】  
  * DNS原理 查询的记录会在本地缓存中添加  
  * DNS服务器原理  
根据其功能，名称服务器可以是专用计算机上的独立程序，也可以是大型分时主机上的一个或多个进程。 一个简单的配置可能是：  
在这里，主NameServer通过从其本地文件系统中读取主文件来获取有关一个或多个区域的信息，并回答有关来自外部解析器的那些区域的查询。
  * DNS区域传输
DNS要求多个区域服务器冗余地支持所有区域。 指定的辅助服务器可以使用DNS的区域传输协议来获取区域并从主服务器检查更新。 该配置如下所示：
在这种配置中，名称服务器会定期开始维护活动获取外部NameServer区域的副本或检查现有副本是否已更改。
maintenance responses 维护与响应
支持域名系统各个方面的主机中的信息流如下所示：
refreshes 刷新 references 参考
共享数据库保存本地名称服务器和解析器的域空间数据。
共享数据库的内容通常是由NameServer的定期刷新操作维护的权威数据和来自先前解析程序请求的缓存数据的混合。
域数据的结构以及NameServer和解析程序之间同步的必要性暗示了此数据库的一般特征，但实际格式取决于本地实现者。
  * 递归服务器集中式缓存—提高解析命中率
还可以定制信息流，以便一组主机一起行动以优化活动。 有时这样做是为了卸载能力较弱的主机，这样它们就不必实现完整的解析器。
这对于希望最大程度地减少所需新网络代码量的PC或主机而言是合适的。
在集中式缓存具有较高命中率的前提下，该方案还可以允许一组主机共享少量缓存，而不必维护大量单独的缓存。