现在我们将为示例应用创建持续集成（CI）流程。首先，我们先花一部分时间讨论如何进行代码分支。
１. 分支模型
在自动化持续集成中，需要重点考虑的是开发模型和团队。开发模型通常取决于团队如何使用版本控制系
统。因为我们的应用托管在Git仓库中，所以使用Git-Flow模型，这种方式也很常用。
Git-Flow模型中维护两种分支：开发（Develop）分支和主（master）分支。当加入一个新功能时，从开
发分支中创建一个新的分支，当开发完成，将合并回开发分支。所有的功能分支由开发人员单独管理，一旦代
码被提交到开发分支，CI（持续集成）服务器将负责编译，通过自动化测试，并提供一个服务器用于QA测试
及评审。一旦需要发布版本，将开发分支合并到主分支中，本次合并提交会有一个版本号并打标签（tag），被
标签的发布版本可用于Beta版本、模拟环境、或生产环境中。
以下，我们将用GitFlow工具管理Git分支。安装Git-Flow，按此说明即可。安装好后，如下所示，运行
Git Flow init来配置Git仓库，过程中提示问题选择默认即可。当执行Git-Flow命令时，它将创建一个开发分
支（如果不存在的话），并将此作为当前工作分支。
$ git flow init
Which branch should be used for bringing forth production releases?
- master
Branch name for production releases: [master]
Branch name for "next release" development: [develop]
How to name your supporting branch prefixes?
Feature branches? [feature/]
Release branches? [release/]
Hotfix branches? [hotfix/]
Support branches? [support/]
Version tag prefix? []
现在通过命令Git flow feature start [feature-name]来创建一个新的功能，通常以ticket/issue id作为
功能名。比如，如果你在用Jira，且已有一个Ticket，Ticket ID(如 MSP-123)可以作为功能名。当通过Git-
Flow创建一个新的功能时，将会自动切换到此功能分支。
git flow feature start MSP-123
Switched to a new branch 'feature/MSP-123'
Summary of actions:
- A new branch 'feature/MSP-123' was created, based on 'develop'
- You are now on branch 'feature/MSP-123'
Now, start committing on your feature. When done, use:
git flow feature finish MSP-123
此时，你可以开发此新功能，然后运行自动化测试保证功能完成。更新README文件，通过运行 命令
Git flow feature finish MSP-123，即可完成新功能开发过程。
Switched to branch 'develop'
Updating 403d507..7ae8ca4
Fast-forward
README.md | 1 +
1 file changed, 1 insertion(+)
Deleted branch feature/MSP-123 (was 7ae8ca4).
Summary of actions:
- The feature branch 'feature/MSP-123' was merged into 'develop'
- Feature branch 'feature/MSP-123' has been removed
- You are now on branch 'develop'
注：Git Flow会将此功能合并到开发分支中，并删除此功能分支，将当前工作环境切换到开发分支。
此时你可将开发分支提交到远程仓库中（命令Git push origin develop:develop）。当提交时，CI持续
集成服务器将启动持续集成流程。
注：对大型项目而言，步骤会有所不同，一般是先评审代码，将远程代码合入开发分支后，再将开发分支
提交到远程仓库。
２. 用 Jenkins 创建 CI 流程
本节我们假设你已将Jenkins集群运行起来了。如果没有，可以阅读此文章完成设置。除此之外，还需要
安装如下插件和依赖：
• Jenkins Plugins
◦ Build Pipeline Plugin
◦ Copy Artifact Plugin
◦ Parameterized Trigger Plugin
◦ Git Parameter Plugin
◦ Mask Password Plugin
• Docker 1.7+
• Docker Compose
安装好后，我们将进行构建流程的前三个主要任务：编译，打包，集成测试。这也是持续集成，持续部署
的首要工作。
任务 1：构建 Go-Auth 服务
首先，确保代码是代码控制库上最新的。
为示例工程进行配置过程：选择“New Item”（新建）->”Freestyle project”（ 构建一个自由风格的
软件项目），选中“This build is parameterized”（参数化构建过程）来添加“Git Parameter”，如下图所
示：
名字设为“GO_AUTH_VERSION”，“tag filter”标签过滤设置为“v*”(如 v2.0)，“Default
value”可设置为开发分支（develop）。
本页面其他设置见以下描述：
源码管理部分：在“Source Code Management” 中添加https://github.com/usmanismail/go-
messenger.git 作为仓库链接，配置“Branches to build”为“*/develop”，设置触发器poll间隔，如 5
分钟。Jenkins将跟踪开发分支的任务改变，并触发持续集成CI(和持续部署CD) 流程的第一个任务。
构建部分：在“Build（构建）”配置中，选择“Add Build Step”> “Execute Shell”，并拷贝前面所
提到的docker run命令。此步骤将从GitHub上获取最新代码，并将代码编译成Go-Auth可执行文件。
构建后操作：还需要添加两个“Post-Build”步骤，选择“Archive the Artifacts”归档Go-Auth二进
制，“Trigger parameterized builds” 启动此流程的下一步工作，如下所示。当添加“Trigger
parameterized builds”时，确保从“Add Parameters”中选中了“Current build parameters”，此设置
将使本阶段的所有设置（如GO_AUTH_VERSION）同样应用于下一阶段。
构建任务的日志输出如下所示。我们用了一个Docker化的容器在运行本次构建：先用Go Fmt格式标准
化代码，后运行单元测试，如有编译错误或者测试错误，Jenkins将检测到此错误。此外，你还可以配置Email
或集成即时通讯工具（如HipChat, Slack）来通知团队人员，以便及时修复问题。
Started by an SCM change
Building in workspace /var/jenkins/jobs/build-go-auth/workspace
> git rev-parse --is-inside-work-tree # timeout=10
Fetching changes from the remote Git repository
> git config remote.origin.url https://github.com/usmanismail/go-messenger.git # timeout=10
Fetching upstream changes from https://github.com/usmanismail/go-messenger.git
> git --version # timeout=10
> git -c core.askpass=true fetch --tags --progress https://github.com/usmanismail/go-messenger.git +refs
/heads/*:refs/remotes/origin/*
> git rev-parse refs/remotes/origin/develop^{commit} # timeout=10
> git rev-parse refs/remotes/origin/origin/develop^{commit} # timeout=10
Checking out Revision 89919f0b6cd089342b1c5b7429bca9bcda994131 (refs/remotes/origin/develop)
> git config core.sparsecheckout # timeout=10
> git checkout -f 89919f0b6cd089342b1c5b7429bca9bcda994131
> git rev-list 7ae8ca4e8bed00cf57a2c1b63966e208773361b4 # timeout=10
[workspace] $ /bin/sh -xe /tmp/hudson1112600899558419690.sh
+ echo develop
develop
+ cd go-auth
+ docker run --rm -v /var/jenkins/jobs/build-go-auth/workspace/go-auth:/go/src/github.com/usmanismail/g
o-messenger/go-auth/ -e SOURCE_PATH=github.com/usmanismail/go-messenger/go-auth/ usman/go-build
er:1.4
Downloading dependencies
Fix formatting
Running Tests
? github.com/usmanismail/go-messenger/go-auth [no test files]
? github.com/usmanismail/go-messenger/go-auth/app [no test files]
? github.com/usmanismail/go-messenger/go-auth/database [no test files]
? github.com/usmanismail/go-messenger/go-auth/logger [no test files]
ok github.com/usmanismail/go-messenger/go-auth/user 0.328s
Building source
Build Successful
Archiving artifacts
Warning: you have no plugins providing access control for builds, so falling back to legacy behavior of p
ermitting any downstream builds to be triggered
Triggering a new build of package-go-auth
Finished: SUCCESS
任务 2: 打包 Go Auth
当编译好代码后，需要将其打包到Docker容器中。选择“New Item > Freestyle Project ”, 此任务命
名与上一任务匹配。如上所述，本任务也将选中“The build is parameterized”，并设置参数
“GO_AUTH_VERSION ”，如下所示。
如之前在源码部分配置GitHub工程一样，本任务中添加一个构建步骤来执行shell。
echo ${GO_AUTH_VERSION}
cd go-auth
chmod +x go-auth
chmod +x run-go-auth.sh
chmod +x integration-test.sh
docker build -t usman/go-auth:${GO_AUTH_VERSION} .
因为需要上一步骤编译的二进制来构建Docker容器，我们添加了一个构建步骤，用于从上一步构建中拷
贝数据。注意：我们用“GO_AUTH_VERSION”参数来标签(tag)此镜像。开发分支的任何改变，默认将会构
建 usman/go-auth:develop，并更新已有镜像。
任务 3 运行集成测试
本节我们用上面的Docker Compose模版来生成多容器的测试环境，并进行集成测试。最后，我们用
shell脚本运行HTTP查询，如下：更改目录到go-auth，再运行integration-test.sh。
echo ${GO_AUTH_VERSION}
cd go-auth
chmod +x integration-test.sh
./integration-test.sh
integration-test.sh脚本内容在此。此工作的日志输出类似于如下打印，过程如下：启动数据库容器，并
将其连接到GoAuth容器中；如连接正常，将会看到“Pass：…”之类的输出；测试运行完成，将清理环境并
删除数据库及GoAuth容器。
Creating goauth_Database_1...
Creating goauth_Goauth_1...
[36m04:02:52.122 app.go:34 NewApplication DEBUG [0m Connecting to database db:3306
[36m04:02:53.131 app.go:37 NewApplication DEBUG [0m Unable to connec to to database: dial tcp 10.0.0.
28:3306: connection refused. Retrying...
[36m04:02:58.131 app.go:34 NewApplication DEBUG [0m Connecting to database db:3306
[36m04:02:58.132 app.go:37 NewApplication DEBUG [0m Unable to connec to to database: dial tcp 10.0.0.
28:3306: connection refused. Retrying...
[36m04:03:03.132 app.go:34 NewApplication DEBUG [0m Connecting to database db:3306
[36m04:03:03.133 common.go:21 Connect DEBUG [0m Connected to DB db:3306/messenger
[36m04:03:03.159 user.go:29 Init DEBUG [0m Created User Table
[36m04:03:03.175 token.go:33 Init DEBUG [0m Created Token Table
[36m04:03:03.175 app.go:42 NewApplication DEBUG [0m Connected to database
[36m04:03:03.175 app.go:53 Run DEBUG [0m Listening on port 9000
Using Service IP 10.0.0.29
Pass: Register User
Pass: Register User Conflict
Stopping goauth_Goauth_1...
Stopping goauth_Database_1...
Finished: SUCCESS
以上三个任务，在Jenkins视图页面中，选择标签“+”，你将会新建一个构建流程视图，在弹出的配置
页面中，选择编译/构建任务作为启示任务，并选择确定。将会很直观的看到每个提交经过构建/部署的完整工
作流程。
当你在开发分支上有所更改时，Jenkins将会被自动触发。
回顾以上步骤：
1. 用Git-Flow添加新功能，并合并到开发分支中；
2. 跟踪开发分支的变化，并在集中管理环境中构建系统；
3. 将上一步骤所生成的应用打包成一个Docker容器；
4. 用Docker Compose 部署临时测试环境；
5. 进行集成测试，并清理环境；
以上CI流程，每当一个新功能（或是Bug修复）合入开发分支时，以上过程便会自动执行，并生成
“usman/go-auth:develop” 的Docker镜像。下一步我们会有一系列文章描述集成部署。
总结
本文中我们讲述了如何将Docker应用到CI中，以达到集中管理、可测试、可重复性、隔离性（不同组件
的环境依赖）等要求。基于Docker进行构建和部署流程的后续部分，下周我们将展示如何用rancher来部署
一个完整的服务环境，对大规模项目而言，我们也将提供如何配置长期测试环境的最佳实践。
如需了解Rancher，请注册Rancher beta版，同时，你也能下载本文的电子书。