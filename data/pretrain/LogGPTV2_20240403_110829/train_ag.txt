in the linux implementation,
pathname sockets honor the permissions of the directory they are in.
creation of a new socket fails if the process does not have write and
search (execute) permission on the directory in which the socket is created.
.pp
on linux,
connecting to a stream socket object requires write permission on that socket;
sending a datagram to a datagram socket likewise
requires write permission on that socket.
posix does not make any statement about the effect of the permissions
on a socket file, and on some systems (e.g., older bsds),
the socket permissions are ignored.
portable programs should not rely on
this feature for security.
.pp
when creating a new socket, the owner and group of the socket file
are set according to the usual rules.
the socket file has all permissions enabled,
other than those that are turned off by the process
.br umask (2).
.pp
the owner, group, and permissions of a pathname socket can be changed (using
.br chown (2)
and
.br chmod (2)).
.\" however, fchown() and fchmod() do not seem to have an effect
.\"
.ss abstract sockets
socket permissions have no meaning for abstract sockets:
the process
.br umask (2)
has no effect when binding an abstract socket,
and changing the ownership and permissions of the object (via
.br fchown (2)
and
.br fchmod (2))
has no effect on the accessibility of the socket.
.pp
abstract sockets automatically disappear when all open references
to the socket are closed.
.pp
the abstract socket namespace is a nonportable linux extension.
.\"
.ss socket options
for historical reasons, these socket options are specified with a
.b sol_socket
type even though they are
.b af_unix
specific.
they can be set with
.br setsockopt (2)
and read with
.br getsockopt (2)
by specifying
.b sol_socket
as the socket family.
.tp
.b so_passcred
enabling this socket option causes receipt of the credentials of
the sending process in an
.b scm_credentials ancillary
message in each subsequently received message.
the returned credentials are those specified by the sender using
.br scm_credentials ,
or a default that includes the sender's pid, real user id, and real group id,
if the sender did not specify
.b scm_credentials
ancillary data.
.ip
when this option is set and the socket is not yet connected,
a unique name in the abstract namespace will be generated automatically.
.ip
the value given as an argument to
.br setsockopt (2)
and returned as the result of
.br getsockopt (2)
is an integer boolean flag.
.tp
.b so_passsec
enables receiving of the selinux security label of the peer socket
in an ancillary message of type
.br scm_security
(see below).
.ip
the value given as an argument to
.br setsockopt (2)
and returned as the result of
.br getsockopt (2)
is an integer boolean flag.
.ip
the
.b so_passsec
option is supported for unix domain datagram sockets
.\" commit 877ce7c1b3afd69a9b1caeb1b9964c992641f52a
since linux 2.6.18;
support for unix domain stream sockets was added
.\" commit 37a9a8df8ce9de6ea73349c9ac8bdf6ba4ec4f70
in linux 4.2.
.tp
.br so_peek_off
see
.br socket (7).
.tp
.b so_peercred
this read-only socket option returns the
credentials of the peer process connected to this socket.
the returned credentials are those that were in effect at the time
of the call to
.br connect (2)
or
.br socketpair (2).
.ip
the argument to
.br getsockopt (2)
is a pointer to a
.i ucred
structure; define the
.b _gnu_source
feature test macro to obtain the definition of that structure from
.ir  .
.ip
the use of this option is possible only for connected
.b af_unix
stream sockets and for
.b af_unix
stream and datagram socket pairs created using
.br socketpair (2).
.tp
.b so_peersec
this read-only socket option returns the
security context of the peer socket connected to this socket.
by default, this will be the same as the security context of
the process that created the peer socket unless overridden
by the policy or by a process with the required permissions.
.ip
the argument to
.br getsockopt (2)
is a pointer to a buffer of the specified length in bytes
into which the security context string will be copied.
if the buffer length is less than the length of the security
context string, then
.br getsockopt (2)
returns \-1, sets
.i errno
to
.br erange ,
and returns the required length via
.ir optlen .
the caller should allocate at least
.br name_max
bytes for the buffer initially, although this is not guaranteed
to be sufficient.
resizing the buffer to the returned length
and retrying may be necessary.
.ip
the security context string may include a terminating null character
in the returned length, but is not guaranteed to do so: a security
context "foo" might be represented as either {'f','o','o'} of length 3
or {'f','o','o','\\0'} of length 4, which are considered to be
interchangeable.
the string is printable, does not contain non-terminating null characters,
and is in an unspecified encoding (in particular, it
is not guaranteed to be ascii or utf-8).
.ip
the use of this option for sockets in the
.b af_unix
address family is supported since linux 2.6.2 for connected stream sockets,
and since linux 4.18
.\" commit 0b811db2cb2aabc910e53d34ebb95a15997c33e7
also for stream and datagram socket pairs created using
.br socketpair (2).
.\"
.ss autobind feature
if a
.br bind (2)
call specifies
.i addrlen
as
.ir sizeof(sa_family_t) ,
.\" i.e., sizeof(short)
or the
.br so_passcred
socket option was specified for a socket that was
not explicitly bound to an address,
then the socket is autobound to an abstract address.
the address consists of a null byte
followed by 5 bytes in the character set
.ir [0\-9a\-f] .
thus, there is a limit of 2^20 autobind addresses.
(from linux 2.1.15, when the autobind feature was added,
8 bytes were used, and the limit was thus 2^32 autobind addresses.
the change to 5 bytes came in linux 2.3.15.)
.ss sockets api
the following paragraphs describe domain-specific details and
unsupported features of the sockets api for unix domain sockets on linux.
.pp
unix domain sockets do not support the transmission of
out-of-band data (the
.b msg_oob
flag for
.br send (2)
and
.br recv (2)).
.pp
the
.br send (2)
.b msg_more
flag is not supported by unix domain sockets.
.pp
before linux 3.4,
.\" commit 9f6f9af7694ede6314bed281eec74d588ba9474f
the use of
.b msg_trunc
in the
.i flags
argument of
.br recv (2)
was not supported by unix domain sockets.
.pp
the
.b so_sndbuf
socket option does have an effect for unix domain sockets, but the
.b so_rcvbuf
option does not.
for datagram sockets, the
.b so_sndbuf
value imposes an upper limit on the size of outgoing datagrams.
this limit is calculated as the doubled (see
.br socket (7))
option value less 32 bytes used for overhead.
.ss ancillary messages
ancillary data is sent and received using
.br sendmsg (2)
and
.br recvmsg (2).
for historical reasons, the ancillary message types listed below
are specified with a
.b sol_socket
type even though they are
.b af_unix
specific.
to send them, set the
.i cmsg_level
field of the struct
.i cmsghdr
to
.b sol_socket
and the
.i cmsg_type
field to the type.
for more information, see
.br cmsg (3).
.tp
.b scm_rights
send or receive a set of open file descriptors from another process.
the data portion contains an integer array of the file descriptors.
.ip
commonly, this operation is referred to as "passing a file descriptor"
to another process.
however, more accurately,
what is being passed is a reference to an open file description (see
.br open (2)),
and in the receiving process it is likely that a different
file descriptor number will be used.
semantically, this operation is equivalent to duplicating
.rb ( dup (2))
a file descriptor into the file descriptor table of another process.
.ip
if the buffer used to receive the ancillary data containing
file descriptors is too small (or is absent),
then the ancillary data is truncated (or discarded)
and the excess file descriptors are automatically closed
in the receiving process.
.ip
if the number of file descriptors received in the ancillary data would
cause the process to exceed its
.b rlimit_nofile
resource limit (see
.br getrlimit (2)),
the excess file descriptors are automatically closed
in the receiving process.
.ip
the kernel constant
.br scm_max_fd
defines a limit on the number of file descriptors in the array.
attempting to send an array larger than this limit causes
.br sendmsg (2)
to fail with the error
.br einval .
.br scm_max_fd
has the value 253
(or 255 in kernels
.\" commit bba14de98753cb6599a2dae0e520714b2153522d
before 2.6.38).
.tp
.b scm_credentials
send or receive unix credentials.
this can be used for authentication.
the credentials are passed as a
.i struct ucred
ancillary message.
this structure is defined in
.i 
as follows:
.ip
.in +4n
.ex
struct ucred {
    pid_t pid;    /* process id of the sending process */
    uid_t uid;    /* user id of the sending process */
    gid_t gid;    /* group id of the sending process */
};
.ee
.in
.ip
since glibc 2.8, the
.b _gnu_source
feature test macro must be defined (before including
.i any
header files) in order to obtain the definition
of this structure.
.ip
the credentials which the sender specifies are checked by the kernel.
a privileged process is allowed to specify values that do not match its own.
the sender must specify its own process id (unless it has the capability
.br cap_sys_admin ,
in which case the pid of any existing process may be specified),
its real user id, effective user id, or saved set-user-id (unless it has
.br cap_setuid ),
and its real group id, effective group id, or saved set-group-id
(unless it has
.br cap_setgid ).
.ip
to receive a
.i struct ucred
message, the
.b so_passcred
option must be enabled on the socket.
.tp
.b scm_security
receive the selinux security context (the security label)
of the peer socket.
the received ancillary data is a null-terminated string containing
the security context.
the receiver should allocate at least
.br name_max
bytes in the data portion of the ancillary message for this data.
.ip
to receive the security context, the
.b so_passsec
option must be enabled on the socket (see above).
.pp
when sending ancillary data with
.br sendmsg (2),
only one item of each of the above types may be included in the sent message.
.pp
at least one byte of real data should be sent when sending ancillary data.
on linux, this is required to successfully send ancillary data over
a unix domain stream socket.
when sending ancillary data over a unix domain datagram socket,
it is not necessary on linux to send any accompanying real data.
however, portable applications should also include at least one byte
of real data when sending ancillary data over a datagram socket.
.pp
when receiving from a stream socket,
ancillary data forms a kind of barrier for the received data.
for example, suppose that the sender transmits as follows:
.pp
.rs
.pd 0
.ip 1. 3
.br sendmsg (2)
of four bytes, with no ancillary data.
.ip 2.
.br sendmsg (2)
of one byte, with ancillary data.
.ip 3.
.br sendmsg (2)
of four bytes, with no ancillary data.
.pd
.re
.pp
suppose that the receiver now performs
.br recvmsg (2)
calls each with a buffer size of 20 bytes.
the first call will receive five bytes of data,
along with the ancillary data sent by the second
.br sendmsg (2)
call.
the next call will receive the remaining four bytes of data.
.pp
if the space allocated for receiving incoming ancillary data is too small
then the ancillary data is truncated to the number of headers
that will fit in the supplied buffer (or, in the case of an
.br scm_rights
file descriptor list, the list of file descriptors may be truncated).
if no buffer is provided for incoming ancillary data (i.e., the
.i msg_control
field of the
.i msghdr
structure supplied to
.br recvmsg (2)
is null),
then the incoming ancillary data is discarded.
in both of these cases, the
.br msg_ctrunc
flag will be set in the
.i msg.msg_flags
value returned by
.br recvmsg (2).
.\"
.ss ioctls
the following
.br ioctl (2)
calls return information in
.ir value .
the correct syntax is:
.pp
.rs
.nf
.bi int " value";
.ib error " = ioctl(" unix_socket ", " ioctl_type ", &" value ");"
.fi
.re
.pp
.i ioctl_type
can be:
.tp
.b siocinq
for
.b sock_stream
sockets, this call returns the number of unread bytes in the receive buffer.
the socket must not be in listen state, otherwise an error
.rb ( einval )
is returned.
.b siocinq
is defined in
.ir  .
.\" fixme . http://sources.redhat.com/bugzilla/show_bug.cgi?id=12002,
.\" filed 2010-09-10, may cause siocinq to be defined in glibc headers
alternatively,
you can use the synonymous
.br fionread ,
defined in
.ir  .
.\" siocoutq also has an effect for unix domain sockets, but not
.\" quite what userland might expect. it seems to return the number
.\" of bytes allocated for buffers containing pending output.
.\" that number is normally larger than the number of bytes of pending
.\" output. since this info is, from userland's point of view, imprecise,
.\" and it may well change, probably best not to document this now.
for
.b sock_dgram
sockets,
the returned value is the same as
for internet domain datagram sockets;
see
.br udp (7).
.sh errors
.tp
.b eaddrinuse
the specified local address is already in use or the filesystem socket
object already exists.
.tp
.b ebadf
this error can occur for
.br sendmsg (2)
when sending a file descriptor as ancillary data over
a unix domain socket (see the description of
.br scm_rights ,
above), and indicates that the file descriptor number that
is being sent is not valid (e.g., it is not an open file descriptor).
.tp
.b econnrefused
the remote address specified by
.br connect (2)
was not a listening socket.
this error can also occur if the target pathname is not a socket.
.tp
.b econnreset
remote socket was unexpectedly closed.
.tp
.b efault
user memory address was not valid.
.tp
.b einval
invalid argument passed.
a common cause is that the value
.b af_unix
was not specified in the
.i sun_type
field of passed addresses, or the socket was in an
invalid state for the applied operation.
.tp
.b eisconn
.br connect (2)
called on an already connected socket or a target address was
specified on a connected socket.
.tp
.b enoent
the pathname in the remote address specified to
.br connect (2)
did not exist.
.tp
.b enomem
out of memory.
.tp
.b enotconn
socket operation needs a target address, but the socket is not connected.
.tp
.b eopnotsupp
stream operation called on non-stream oriented socket or tried to
use the out-of-band data option.
.tp
.b eperm
the sender passed invalid credentials in the
.ir "struct ucred" .
.tp
.b epipe
remote socket was closed on a stream socket.
if enabled, a
.b sigpipe
is sent as well.
this can be avoided by passing the
.b msg_nosignal
flag to
.br send (2)
or
.br sendmsg (2).
.tp
.b eprotonosupport
passed protocol is not
.br af_unix .
.tp
.b eprototype
remote socket does not match the local socket type
.rb ( sock_dgram
versus
.br sock_stream ).
.tp
.b esocktnosupport
unknown socket type.
.tp
.b esrch
while sending an ancillary message containing credentials
.rb ( scm_credentials ),
the caller specified a pid that does not match any existing process.
.tp
.b etoomanyrefs
this error can occur for
.br sendmsg (2)
when sending a file descriptor as ancillary data over
a unix domain socket (see the description of
.br scm_rights ,
above).