### 8.2 Web Application Enumeration

#### 8.2.1 Fingerprinting Web Servers with Nmap

Before diving into the details of web application enumeration, it is essential to familiarize ourselves with the tools and techniques used in this process. In this learning unit, we will revisit Nmap for web service enumeration, Wappalyzer for identifying the technology stack, Gobuster for directory and file discovery, and Burp Suite for comprehensive web application testing.

**Nmap for Initial Active Enumeration**

Nmap is a powerful tool for initial active enumeration. We should start by examining the web server, as it is the core component of any web application that exposes its services.

Assuming we have found port 80 open on our target, we can use Nmap to perform a service scan and retrieve the web server banner:

```bash
kali@kali:~$ sudo nmap -p80 -sV 192.168.50.20
```

**Output:**
```
Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-29 05:13 EDT
Nmap scan report for 192.168.50.20
Host is up (0.11s latency).
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
```

The scan reveals that Apache version 2.4.41 is running on the Ubuntu host.

To further enumerate the web server, we can use Nmap's NSE (Nmap Scripting Engine) scripts, such as `http-enum`, which performs an initial fingerprinting of the web server:

```bash
kali@kali:~$ sudo nmap -p80 --script=http-enum 192.168.50.20
```

**Output:**
```
Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-29 06:30 EDT
Nmap scan report for 192.168.50.20
Host is up (0.10s latency).
PORT   STATE SERVICE
80/tcp open  http
| http-enum:
| /login.php: Possible admin folder
| /db/: BlogWorx Database
| /css/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'
| /images/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'
| /js/: Potentially interesting directory wo/ listing on 'apache/2.4.41 (ubuntu)'
|_ /uploads/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'
Nmap done: 1 IP address (1 host up) scanned in 16.82 seconds
```

This script identifies several interesting directories that could provide more information about the target web application.

#### 8.2.2 Technology Stack Identification with Wappalyzer

In addition to active enumeration with Nmap, we can passively gather information about the application's technology stack using Wappalyzer. This online service can disclose the underlying technologies, including the operating system, user interface framework, and web server.

After registering a free account, we can perform a Technology Lookup on the `megacorpone.com` domain. The results from Wappalyzer provide valuable insights into the OS, UI framework, web server, and JavaScript libraries used by the web application. Some versions of these libraries may be vulnerable, making this information crucial for further analysis.

#### 8.2.3 Directory Brute Force with Gobuster

Once we have identified a web application running on a server, the next step is to map all publicly accessible files and directories. Gobuster is a powerful tool written in Go that can help with this task by using wordlists to discover directories and files through brute forcing.

Gobuster can generate significant traffic, so it may not be suitable for stealthy operations. It supports different modes, but for now, we will focus on the `dir` mode, which enumerates files and directories. We need to specify the target IP using the `-u` parameter and a wordlist with `-w`. The default number of threads is 10, but we can reduce this to minimize traffic using the `-t` parameter.

```bash
kali@kali:~$ gobuster dir -u 192.168.50.20 -w /usr/share/wordlists/dirb/common.txt -t 5
```

**Output:**
```
===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url: http://192.168.50.20
[+] Method: GET
[+] Threads: 5
[+] Wordlist: /usr/share/wordlists/dirb/common.txt
[+] Negative Status codes: 404
[+] User Agent: gobuster/3.1.0
[+] Timeout: 10s
===============================================================
2022/03/30 05:16:21 Starting gobuster in directory enumeration mode
===============================================================
/.hta (Status: 403) [Size: 278]
/.htaccess (Status: 403) [Size: 278]
/.htpasswd (Status: 403) [Size: 278]
/css (Status: 301) [Size: 312] [--> http://192.168.50.20/css/]
/db (Status: 301) [Size: 311] [--> http://192.168.50.20/db/]
/images (Status: 301) [Size: 315] [--> http://192.168.50.20/images/]
/index.php (Status: 302) [Size: 0] [--> ./login.php]
/js (Status: 301) [Size: 311] [--> http://192.168.50.20/js/]
/server-status (Status: 403) [Size: 278]
/uploads (Status: 301) [Size: 316] [--> http://192.168.50.20/uploads/]
===============================================================
2022/03/30 05:18:08 Finished
===============================================================
```

From the output, we find ten resources, with four inaccessible due to insufficient privileges (Status: 403). The remaining six are accessible and warrant further investigation.

#### 8.2.4 Security Testing with Burp Suite

Burp Suite is a GUI-based integrated platform for web application security testing, providing various tools through a single user interface. While the free Community Edition includes manual testing tools, the commercial versions offer additional features, such as a robust web application vulnerability scanner.

To launch Burp Suite, you can find it in Kali under Applications > 03 Web Application Analysis > burpsuite, or from the command line:

```bash
kali@kali:~$ burpsuite
```

Upon launching, you may see a warning about the Java Runtime Environment (JRE). Since the Kali team tests Burp Suite on the Java version shipped with the OS, this warning can be safely ignored.

**Configuring Burp Suite as a Proxy**

1. **Start Burp Suite**: Choose "Temporary project" and click Next. Select "Use Burp defaults" and click Start Burp.
2. **Proxy Configuration**: Click the Proxy tab and disable the Intercept tool under the Intercept sub-tab.
3. **Browser Configuration**: In Firefox, navigate to `about:preferences#general`, scroll down to Network Settings, and click Settings. Choose "Manual" and set the proxy to `127.0.0.1` on port `8080`.

With Burp Suite configured as a proxy, browse to `http://www.megacorpone.com` and observe the intercepted traffic in Burp Suite under Proxy > HTTP History.

**Intercepting and Inspecting Traffic**

- If the browser hangs, ensure Intercept is disabled.
- As you browse, more requests will appear in the HTTP History tab.
- Click on a request to view the client request and server response in the lower half of the Burp UI.

By following these steps, you can effectively enumerate and test web applications using Nmap, Wappalyzer, Gobuster, and Burp Suite.