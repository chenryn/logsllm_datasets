### Ballot Definition and System Vulnerabilities

In the Diebold system, the data that defines the ballot is referred to as a "ballot definition." This document outlines several critical security vulnerabilities in the Diebold AccuVote-TS system, which can be exploited by various actors, including voters, poll workers, and developers.

#### Potential Attacks and Their Implications

| Actor | Possible Attack |
| --- | --- |
| Voter | Vote multiple times using a forged smartcard. |
| Poll Worker (with network access) | Access administrative functions, modify system configuration, or close polling stations. |
| Internet Provider (with network access) | Tamper with network traffic to impersonate legitimate voting machines. |
| OS Developer | Insert backdoors into the code. |
| Voting Device Developer | Modify the ballot definition, cause votes to be miscounted, or tamper with audit logs. |

This table summarizes some of the most significant potential attacks on the system. For example, ensuring that the number of votes collected does not exceed the number of registered voters at any given polling location is crucial.

### Detailed Overview of the Code

The 4.3.1 snapshot of the AccuVote-TS tree consists of 136 `.h` files totaling 16,414 lines and 120 `.cpp` files totaling 33,195 lines, resulting in 256 files and 49,609 lines of C++ code. While a comprehensive description of every module is beyond the scope of this paper, we will focus on the bootstrapping process and the main state transitions during an election, with explicit references to the relevant portions of the code.

#### Voting Terminal Implementation

- **Directory Structure**: The voting terminal is implemented in the `BallotStation/` directory, utilizing libraries from supporting directories such as `Ballot/`, `DES/`, `DiagMode/`, `Shared/`, `TSElection/`, `Utilities/`, and `VoterCard/`.
- **Main Loop**: The method `CBallotStationApp::DoRun()` serves as the main loop for the voting terminal software.
  - **Initialization**: It starts by invoking `CBallotStationApp::LoadRegistry()`, which loads information about the voting terminal from the registry keys stored under `HKEY_LOCAL_MACHINE\Software\Global Election Systems\AccuVote-TS4`. If the registry information fails to load, the program creates a new instance of `CTSRegistryDlg` to prompt the administrator to set up the machine for the first time.
  - **Smartcard Reader Check**: The `DoRun()` method checks for the presence of a smartcard reader and, if none is found, allows the administrator to reconfigure the settings.
  - **Election Process**: The method enters a while loop that continues until the software is shut down. It first checks for removable media to store election results and ballot configurations. If the election configuration file `election.edb` cannot be opened, the program enters the `CTSElectionDoc::ES_NOELECTION` state and attempts to download the configuration file using `CBallotStationApp::Download()`.
  - **State Transitions**:
    - **Pre-Election State**: The program enters the `CTSElectionDoc::ES_PREELECT` state, where the administrator can start the election.
    - **Election State**: When the election is started, the state changes to `CTSElectionDoc::ES_ELECTION`, and the `CVoteDlg` class is instantiated to handle the voting process.
    - **Post-Election State**: If an ender card or an administrator card with the correct PIN is inserted, the election ends, and the state changes to `CTSElectionDoc::ES_POSTELECT`.

### Smartcard Security Concerns

While smartcards can enhance security, their use in the Diebold system provides minimal additional security and opens the system to several attacks.

#### Exploiting the Lack of Cryptography

- **No Cryptographic Operations**: The smartcards do not perform any cryptographic operations, making them vulnerable to forgery.
- **Creating Homebrew Smartcards**: An attacker can create counterfeit smartcards by learning the protocol between the terminal and the smartcards. This can be achieved through various methods, such as wiretapping or person-in-the-middle attacks.

#### Casting Multiple Votes

- **Forgery and Reuse**: An adversary can bring multiple active cards to the voting booth or program a smartcard to ignore deactivation commands, allowing them to vote multiple times.
- **Detection**: The system records a "voter serial number" only if a voter decides not to place a vote. If the number of collected votes exceeds the number of people who showed up to vote, it may indicate a security breach.

### Conclusion

The Diebold AccuVote-TS system has several critical vulnerabilities that can be exploited to compromise the integrity of the voting process. Addressing these issues, particularly those related to smartcard security and vote counting, is essential to ensure the reliability and security of the system.