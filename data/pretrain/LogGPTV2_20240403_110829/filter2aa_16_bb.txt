char *ptr;              /* next character position */ char *base;              /* location of buffer */
int              flag;              /* mode of file access */ int              fd;              /* file descriptor */
} FILE;
extern FILE _iob[OPEN_MAX];
#define stdin              (&_iob[0])
#define stdout              (&_iob[1])
#define stderr              (&_iob[2])
enum _flags {
_READ              = 01,              /* file open for reading */
_WRITE              = 02,              /* file open for writing */
_UNBUF              = 04,              /* file is unbuffered */
_EOF              = 010,              /* EOF has occurred on this file */
_ERR              = 020              /* error occurred on this file */
};
int _fillbuf(FILE *);
int _flushbuf(int, FILE *);
#define feof(p)              ((p)•>flag & _EOF) != 0)
#define ferror(p)              ((p)•>flag & _ERR) != 0)
#define fileno(p)              ((p)•>fd)
#define getc(p)              (••(p)•>cnt >= 0 \
? (unsigned char) *(p)•>ptr++ : _fillbuf(p))
#define putc(x,p) (••(p)•>cnt >= 0 \
? *(p)•>ptr++ = (x) : _flushbuf((x),p))
#define getchar()              getc(stdin)
#define putcher(x)              putc((x), stdout)
宏 getc 一般先将计数器减 1，将指针移到下一个位置，然后返回字符。(前面讲过，一 个长的#define 语句可用反斜杠分成几行。)但是，如果计数值变为负值，getc 就调用函数
_fillbuf 填充缓冲区，重新初始化结构的内容，并返回一个字符。返回的字符为 unsigned
类型。以确保所有的字符为正值。
尽管在这里我们并不想讨论一些细节，但程序中还是给出了 putc 函数的定义，以表明它 的操作与 getc 函数非常类似，当缓冲区满时，它将调用函数_flushbuf。此外，我们还在 其中包含了访问错误输出、文件结束状态和文件描述符的宏。
下面我们来着手编写函数 fopen。fopen 函数的主要功能是打开文件，定位到合适的位 置，设置标志位以指示相应的状态。它不分配任何缓冲区空间，缓冲区的分配是在第一次读 文件时由函数_fillbuf 完成的。
#include 
#include "syscalls.h"
#define PERMS 0666              /* RW for owner, group, others */
FILE *fopen(char *name, char *mode)
{
int fd; FILE *fp;
if (*mode != 'r' && *mode != 'w' && *mode != 'a') return NULL;
for (fp = _iob; fp flag & (_READ | _WRITE)) == 0)
break;              /* found free slot */
if (fp >= _iob + OPEN_MAX)              /* no free slots */
return NULL;
if (*mode == 'w')
fd = creat(name, PERMS); else if (*mode == 'a') {
if ((fd = open(name, O_WRONLY, 0)) == •1) fd = creat(name, PERMS);
lseek(fd, 0L, 2);
} else
fd = open(name, O_RDONLY, 0);
if (fd == •1)              /* couldn't access name */ return NULL;
fp•>fd = fd; fp•>cnt = 0; fp•>base = NULL;
fp•>flag = (*mode == 'r') ? _READ : _WRITE; return fp;
}
该版本的 fopen 函数没有涉及标准 C 的所有访问模式，但是，加入这些模式并不需要增加多 少代码。特别是，该版本的 fopen 不能识别表示二进制访问方式的 b 标志，这是因为，在 UNIX 系统中这种方式是没有意义的。同时，它也不能识别允许同时进行读和写的+标志。
对于某一特定的文件，第一次调用 getc 函数时计数值为 0，这样就必须调用一次函数
_fillbuf。如果_fillbuf 发现文件不是以读方式打开的，它将立即返回 EOF;否则，它将
试图分配一个缓冲区(如果读操作是以缓冲方式进行的话)。
建立缓冲区后，_fillbuf 调用 read 填充此缓冲区，设置计数值和指针，并返回缓冲区 中的第一个字符。随后进行的_fillbuf 调用会发现缓冲区已经分配。
#include "syscalls.h"
/* _fillbuf:              allocate and fill input buffer */ int _fillbuf(FILE *fp)
{
int bufsize;
if ((fp•>flag&(_READ|_EOF_ERR)) != _READ) return EOF;
bufsize = (fp•>flag & _UNBUF) ? 1 : BUFSIZ; if (fp•>base == NULL)              /* no buffer yet */
if ((fp•>base = (char *) malloc(bufsize)) == NULL) return EOF;              /* can't get buffer */
fp•>ptr = fp•>base;
fp•>cnt = read(fp•>fd, fp•>ptr, bufsize); if (••fp•>cnt cnt == •1) fp•>flag |= _EOF;
else
fp•>flag |= _ERR; fp•>cnt = 0;
return EOF;
}
return (unsigned char) *fp•>ptr++;
}
最后一件事情便是如何执行这些函数。我们必须定义和初始化数组_iob 中的 stdin、
stdout 和 stderr 值:
FILE _iob[OPEN_MAX] = {              /* stdin, stdout, stderr */
{ 0, (char *) 0, (char *) 0, _READ, 0 },
{ 0, (char *) 0, (char *) 0, _WRITE, 1 },
{ 0, (char *) 0, (char *) 0, _WRITE, | _UNBUF, 2 }
};
该结构中 flag 部分的初值表明，将对 stdin 执行读操作、对 stdout 执行写操作、对 stderr
执行缓冲方式的写操作。
练习 8•2 用字段代替显式的按位操作，重写 fopen 和_fillbuf 函数。比较相应代 码的长度和执行速度。
练习 8•3             设计并编写函数_flushbuf、fflush 和 fclose。 练习 8•4             标准库函数
int fseek(FILE *fp, long offset, int origin)
类似于函数 lseek，所不同的是，该函数中的 fp 是一个文件指针而不是文件描述符，且返回 值是一个 int 类型的状态而非位置值。编写函数 fseek，并确保该函数与库中其它函数使用 的缓冲能够协同工作。
8.6 实例——目录列表
我们常常还需要对文件系统执行另一种操作，以获得文件的有关信息，而不是读取文件 的具体内容。目录列表程序便是其中的一个例子，比如 UNIX 命令 ls，它打印一个目录中的文 件名以及其它一些可选信息，如文件长度、访问权限等等。MS•DOS 操作系统中的 dir 命令也 有类似的功能。
由于 UNIX 中的目录就是一种文件，因此，ls 只需要读此文件就可获得所有的文件名。但 是，如果需要获取文件的其它信息，比如长度等，就需要使用系统调用。在其它一些系统中， 甚至获取文件名也需要使用系统调用，例如在 MS•DOS 系统中即如此。无论实现方式是否同 具体的系统有关，我们需要提供一种与系统无关的访问文件信息的途径。
以下将通过程序 fsize 说明这一点。fsize 程序是 ls 命令的一个特殊形式，它打印命令 行参数表中指定的所有文件的长度。如果其中一个文件是目录，则 fsize 程序将对此目录递 归调用自身。如果命令行中没有任何参数，则 fsize 程序处理当前目录。
我们首先回顾 UNIX 文件系统的结构。在 UNIX 系统中，目录就是文件，它包含了一个 文件名列表和一些指示文件位置的信息。"位置"是一个指向其它表(即 i 结点表)的索引。 文件的 i 结点是存放除文件名以外的所有文件信息的地方。目录页通常仅包含两个条目:文件 名和 i 结点编号。
遗憾的是，在不同版本的系统中，目录的格式和确切的内容是不一样的。因此，为了分 离出不可移植的部分，我们把任务分成两部分。外层定义了一个称为 Dirent 的结构和 3 个 函数 opendir、readdir 和 closedir，它们提供与系统无关的对目录页中的名字和 i 结点 编号的访问。我们将利用此接口编写 fsize 程序，然后说明如何在与 Version 7 和 System V UNIX 系统的目录结构相同的系统上实现这些函数。其它情况留作练习。
结构 Dirent 包含 i 结点编号和文件名。文件名的最大长度由 NAMZ_MAX 设定，NAME_MAX 的值由系统决定。opendir 返回一个指向称为 DIR 的结构的指针，该结构与结构 FILE 类似， 它将被 readdir 和 closedir 使用。所有这些信息存放在头文件 dirent.h 中。
#define NAME_MAX              14              /* longest filename component; */
/* system•dependent */
typedef struct {              /* portable directory entry */ long ino;                            /* inode number */
char name[NAME_MAX+1];              /* name + '\0' terminator */
} Dirent;
typedef struct {              /* minimal DIR: no buffering, etc. */ int fd;                            /* file descriptor for the directory */
Dirent d;              /* the directory entry */
} DIR;
DIR *opendir(char *dirname); Dirent *readdir(DIR *dfd); void closedir(DIR *dfd);
系统调用 stat 以文件名作为参数，返回文件的 i 结点中的所有信息;若出错，则返回•1。 如下所示:
char *name;
struct stat stbuf;
int stat(char *, struct stat *); stat(name, &stbuf);
它用文件 name 的 i 结点信息填充结构 stbuf。头文件中包含了描述 stat
的返回值的结构。该结构的一个典型形式如下所示:
struct stat              /* inode information returned by stat */
 {
};
该 结构中大 部分的值 已在注 释中进行 了解释。 dev_t 和 ino_t 等类型 在 头 文件
中定义，程序中必须包含此文件。
st_mode 页包含了描述文件的一系列标志，这些标志在中定义。我们只 需要处理文件类型的有关部分:
#define S_IFMT              0160000              /* type of file: */
#define S_IFDIR              0040000              /* directory */
#define S_IFCHR              0020000              /* character special */
#define S_IFBLK              0060000              /* block special */
#define S_IFREG              0010000              /* regular */
/* ... */
下面我们来着手编写程序 fsize。如果由 stat 调用获得的模式说明某文件不是一个目 录，就很容易获得该文件的长度，并直接输出。但是，如果文件是一个目录，则必须逐个处 理目录中的文件。由于该目录可能包含子目录，因此该过程是递归的。
主程序 main 处理命令行参数，并将每个参数传递给函数 fsize。
#include 
#include 
#include "syscalls.h"
#include               /* flags for read and write */
#include               /* typedefs */
#include               /* structure returned by stat */
#include "dirent.h" void fsize(char *)
/* print file name */ main(int argc, char **argv)
{
if (argc == 1)              /* default: current directory */ fsize(".");
else
while (••argc > 0) fsize(*++argv);
return 0;
}