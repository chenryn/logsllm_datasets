分和后半部分，并解释成两个long类型的整数。因此，对于n3和n4，虽然用
对了转换说明，但printf()还是读错了字节。
float n1; /* 作为double类型传递 */
double n2;
long n3, n4;
...
printf("%ld %ld %ld %ld\n", n1, n2, n3, n4);
212
图4.9 传递参数
2.printf()的返回值
第2章提到过，大部分C函数都有一个返回值，这是函数计算并返回给
主调程序（calling 
program）的值。例如，C库包含一个sqrt()函数，接受一
个数作为参数，并返回该数的平方根。可以把返回值赋给变量，也可以用于
计算，还可以作为参数传递。总之，可以把返回值像其他值一样使用。
printf()函数也有一个返回值，它返回打印字符的个数。如果有输出错误，
printf()则返回一个负值（printf()的旧版本会返回不同的值）。
213
printf()的返回值是其打印输出功能的附带用途，通常很少用到，但在检
查输出错误时可能会用到（如，在写入文件时很常用）。如果一张已满的
CD或DVD拒绝写入时，程序应该采取相应的行动，例如终端蜂鸣30秒。不
过，要实现这种情况必须先了解if语句。程序清单4.13演示了如何确定函数
的返回值。
程序清单4.13 prntval.c程序
/* prntval.c -- printf()的返回值 */
#include 
int main(void)
{
int bph2o = 212;
int rv;
rv = printf("%d F is water's boiling point.\n", bph2o);
printf("The printf() function printed %d characters.\n",
rv);
return 0;
}
该程序的输出如下：
212 F is water's boiling point.
The printf() function printed 32 characters.
214
首先，程序用rv = printf(...);的形式把printf()的返回值赋给rv。因此，该
语句执行了两项任务：打印信息和给变量赋值。其次，注意计算针对所有字
符数，包括空格和不可见的换行符（\n）。
3.打印较长的字符串
有时，printf()语句太长，在屏幕上不方便阅读。如果空白（空格、制表
符、换行符）仅用于分隔不同的部分，C 编译器会忽略它们。因此，一条语
句可以写成多行，只需在不同部分之间输入空白即可。例如，程序清单4.13
中的一条printf()语句：
printf("The printf() function printed %d characters.\n",
rv);
该语句在逗号和 
rv之间断行。为了让读者知道该行未完，示例缩进了
rv。C编译器会忽略多余的空白。
但是，不能在双引号括起来的字符串中间断行。如果这样写：
printf("The printf() function printed %d
characters.\n", rv);
C编译器会报错：字符串常量中有非法字符。在字符串中，可以使用\n
来表示换行字符，但是不能通过按下Enter（或Return）键产生实际的换行
符。
给字符串断行有3种方法，如程序清单4.14所示。
程序清单4.14 longstrg.c程序
/* longstrg.c ––打印较长的字符串 */
#include 
215
int main(void)
{
printf("Here's one way to print a ");
printf("long string.\n");
printf("Here's another way to print a \
long string.\n");
printf("Here's the newest way to print a "
"long string.\n");  /* ANSI C */
return 0;
}
该程序的输出如下：
Here's one way to print a long string.
Here's another way to print a long string.
Here's the newest way to print a long string.
方法1：使用多个printf()语句。因为第1个字符串没有以\n字符结束，所
以第2个字符串紧跟第1个字符串末尾输出。
方法2：用反斜杠（\）和Enter（或Return）键组合来断行。这使得光标
移至下一行，而且字符串中不会包含换行符。其效果是在下一行继续输出。
但是，下一行代码必须和程序清单中的代码一样从最左边开始。如果缩进该
行，比如缩进5个空格，那么这5个空格就会成为字符串的一部分。
216
方法3：ANSI C引入的字符串连接。在两个用双引号括起来的字符串之
间用空白隔开，C编译器会把多个字符串看作是一个字符串。因此，以下3
种形式是等效的：
printf("Hello, young lovers, wherever you are.");
printf("Hello, young "   "lovers" ", wherever you are.");
printf("Hello, young lovers"
", wherever you are.");
上述方法中，要记得在字符串中包含所需的空格。
如，"young""lovers"会成为"younglovers"，而"young 
" 
"lovers"才是"young
lovers"。
4.4.5 使用scanf()
刚学完输出，接下来我们转至输入——学习scanf()函数。C库包含了多
个输入函数，scanf()是最通用的一个，因为它可以读取不同格式的数据。当
然，从键盘输入的都是文本，因为键盘只能生成文本字符：字母、数字和标
点符号。如果要输入整数 2014，就要键入字符 2、0、1、4。如果要将其储
存为数值而不是字符串，程序就必须把字符依次转换成数值，这就是scanf()
要做的。scanf()把输入的字符串转换成整数、浮点数、字符或字符串，而
printf()正好与它相反，把整数、浮点数、字符和字符串转换成显示在屏幕上
的文本。
scanf()和 printf()类似，也使用格式字符串和参数列表。scanf()中的格式
字符串表明字符输入流的目标数据类型。两个函数主要的区别在参数列表
中。printf()函数使用变量、常量和表达式，而scanf()函数使用指向变量的指
针。这里，读者不必了解如何使用指针，只需记住以下两条简单的规则：
如果用scanf()读取基本变量类型的值，在变量名前加上一个&；
217
如果用scanf()把字符串读入字符数组中，不要使用&。
程序清单4.15中的小程序演示了这两条规则。
程序清单4.15 input.c程序
// input.c -- 何时使用&
#include 
int main(void)
{
int age;      // 变量
float assets;   // 变量
char pet[30];   // 字符数组，用于储存字符串
printf("Enter your age, assets, and favorite pet.\n");
scanf("%d %f", &age, &assets); // 这里要使用&
scanf("%s", pet);        // 字符数组不使用&
printf("%d $%.2f %s\n", age, assets, pet);
return 0;
}
下面是该程序与用户交互的示例：
Enter your age, assets, and favorite pet.
38
218
92360.88 llama
38 $92360.88 llama
scanf()函数使用空白（换行符、制表符和空格）把输入分成多个字段。
在依次把转换说明和字段匹配时跳过空白。注意，上面示例的输入项（粗体
部分是用户的输入）分成了两行。只要在每个输入项之间输入至少一个换行
符、空格或制表符即可，可以在一行或多行输入：
Enter your age, assets, and favorite pet.
42
2121.45
guppy
42 $2121.45 guppy
唯一例外的是%c转换说明。根据%c，scanf()会读取每个字符，包括空
白。我们稍后详述这部分。
scanf()函数所用的转换说明与printf()函数几乎相同。主要的区别是，对
于float类型和double类型，printf()都使用%f、%e、%E、%g和%G转换说
明。而scanf()只把它们用于float类型，对于double类型时要使用l修饰符。表
4.6列出了C99标准中常用的转换说明。
表4.6 ANSI C中scanf()的转换说明
219
可以在表4.6所列的转换说明中（百分号和转换字符之间）使用修饰
符。如果要使用多个修饰符，必须按表4.7所列的顺序书写。
表4.7 scanf()转换说明中的修饰符
续表
220
如你所见，使用转换说明比较复杂，而且这些表中还省略了一些特性。
省略的主要特性是，从高度格式化源中读取选定数据，如穿孔卡或其他数据
记录。因为在本书中，scanf()主要作为与程序交互的便利工具，所以我们不
在书中讨论更复杂的特性。
1.从scanf()角度看输入
接下来，我们更详细地研究scanf()怎样读取输入。假设scanf()根据一
个%d转换说明读取一个整数。scanf()函数每次读取一个字符，跳过所有的
空白字符，直至遇到第1个非空白字符才开始读取。因为要读取整数，所以
scanf()希望发现一个数字字符或者一个符号（+或-）。如果找到一个数字或
符号，它便保存该字符，并读取下一个字符。如果下一个字符是数字，它便
保存该数字并读取下一个字符。scanf()不断地读取和保存字符，直至遇到非
数字字符。如果遇到一个非数字字符，它便认为读到了整数的末尾。然后，
scanf()把非数字字符放回输入。这意味着程序在下一次读取输入时，首先读
到的是上一次读取丢弃的非数字字符。最后，scanf()计算已读取数字（可能
还有符号）相应的数值，并将计算后的值放入指定的变量中。
如果使用字段宽度，scanf()会在字段结尾或第1个空白字符处停止读取
（满足两个条件之一便停止）。
如果第1个非空白字符是A而不是数字，会发生什么情况？scanf()将停在
221
那里，并把A放回输入中，不会把值赋给指定变量。程序在下一次读取输入
时，首先读到的字符是A。如果程序只使用%d转换说明， 
scanf()就一直无
法越过A读下一个字符。另外，如果使用带多个转换说明的scanf()，C规定
在第1个出错处停止读取输入。
用其他数值匹配的转换说明读取输入和用%d 
的情况相同。区别在于
scanf()会把更多字符识别成数字的一部分。例如，%x转换说明要求scanf()识
别十六进制数a～f和A～F。浮点转换说明要求scanf()识别小数点、e记数法
（指数记数法）和新增的p记数法（十六进制指数记数法）。
如果使用%s 转换说明，scanf()会读取除空白以外的所有字符。scanf()跳
过空白开始读取第 1 个非空白字符，并保存非空白字符直到再次遇到空白。
这意味着 scanf()根据%s 转换说明读取一个单词，即不包含空白字符的字符
串。如果使用字段宽度，scanf()在字段末尾或第1个空白字符处停止读取。
无法利用字段宽度让只有一个%s的scanf()读取多个单词。最后要注意一点：
当scanf()把字符串放进指定数组中时，它会在字符序列的末尾加上'\0'，让数
组中的内容成为一个C字符串。
实际上，在C语言中scanf()并不是最常用的输入函数。这里重点介绍它
是因为它能读取不同类型的数据。C 语言还有其他的输入函数，如 getchar()
和 fgets()。这两个函数更适合处理一些特殊情况，如读取单个字符或包含空
格的字符串。我们将在第7章、第11章、第13章中讨论这些函数。目前，无
论程序中需要读取整数、小数、字符还是字符串，都可以使用scanf()函数。
2.格式字符串中的普通字符
scanf()函数允许把普通字符放在格式字符串中。除空格字符外的普通字
符必须与输入字符串严格匹配。例如，假设在两个转换说明中添加一个逗
号：
scanf("%d,%d", &n, &m);
scanf()函数将其解释成：用户将输入一个数字、一个逗号，然后再输入
222
一个数字。也就是说，用户必须像下面这样进行输入两个整数：
88,121
由于格式字符串中，%d后面紧跟逗号，所以必须在输入88后再输入一
个逗号。但是，由于scanf()会跳过整数前面的空白，所以下面两种输入方式
都可以：
88, 121
和
88,
121
格式字符串中的空白意味着跳过下一个输入项前面的所有空白。例如，
对于下面的语句：
scanf("%d ,%d", &n, &m);
以下的输入格式都没问题：
88,121
88 ,121
88 , 121
请注意，“所有空白”的概念包括没有空格的特殊情况。
除了%c，其他转换说明都会自动跳过待输入值前面所有的空白。因
此，scanf("%d%d", &n, &m)与scanf("%d %d", &n, &m)的行为相同。对
于%c，在格式字符串中添加一个空格字符会有所不同。例如，如果把%c放
在格式字符串中的空格前面，scanf()便会跳过空格，从第1个非空白字符开
始读取。也就是说，scanf("%c", 
&ch)从输入中的第1个字符开始读取，而
223
scanf(" %c", &ch)则从第1个非空白字符开始读取。
3.scanf()的返回值
scanf()函数返回成功读取的项数。如果没有读取任何项，且需要读取一
个数字而用户却输入一个非数值字符串，scanf()便返回0。当scanf()检测
到“文件结尾”时，会返回EOF（EOF是stdio.h中定义的特殊值，通常用
#define指令把EOF定义为-1）。我们将在第6章中讨论文件结尾的相关内容
以及如何利用scanf()的返回值。在读者学会if语句和while语句后，便可使用
scanf()的返回值来检测和处理不匹配的输入。
4.4.6 printf()和scanf()的*修饰符
printf()和scanf()都可以使用*修饰符来修改转换说明的含义。但是，它
们的用法不太一样。首先，我们来看printf()的*修饰符。
如果你不想预先指定字段宽度，希望通过程序来指定，那么可以用*修
饰符代替字段宽度。但还是要用一个参数告诉函数，字段宽度应该是多少。
也就是说，如果转换说明是%*d，那么参数列表中应包含*和 d对应的值。这
个技巧也可用于浮点值指定精度和字段宽度。程序清单4.16演示了相关用
法。
程序清单4.16 varwid.c程序
/* varwid.c -- 使用变宽输出字段 */
#include 
int main(void)
{
unsigned width, precision;
int number = 256;
224
double weight = 242.5;
printf("Enter a field width:\n");
scanf("%d", &width);
printf("The number is :%*d:\n", width, number);