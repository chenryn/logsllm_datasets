architectures [1,6]. Interpreter-induced function calls need in filters. This still grants insights into general efficiency
to prepare/remove stack frames, save/restore registers, and considerations, in particular the economy of column access.
jump to and from the diverse function bodies, leading to Figure 4(a) (left-hand column) shows the LLVM pseudo
pipeline flushes and instruction cache pollution. codethatisemittedfortheconjunctivefilterexpressione≡
The resulting interpretation overhead is significant and p (A)ANDp (B). Here,p (A)isanarbitraryfilterexpression
1 2 1
may dominate all other tasks of the query processor. Post- thatreadscolumnA.Inthecode,%rdenotesLLVMregisterr
1518
e ≡ p1(A)ANDp2(B) eORp3(A,B) e ≡ p1(A)ANDp2(B) eORp3(A,B)
plugsintot: t withR={A→%a,B→%b}:
%a = slotgetattr(A)
%p1= p1(%a) rettrue rettrue
br%p1,label%l0,label%l2 %a = slotgetattr(A)
%l0:% %pb 2= =  s pl 2o (%t bg )etattr(B) plugsintof: b%p r1 %p= 1,p l1 a( b% ea l) %l0,label%l2 f 1 withR={A→%a}:
br%p2,label%l1,label%l2 %b = slotgetattr(B) %l0:%b = slotgetattr(B) %b = slotgetattr(B)
% %l l1 2: :  t f r%p e3 t= %p3p3(%a,%b) b%p r2 %p= 2,p l2 a( b% eb l) r%p e3 t%= p3p3(%a,%b)
%l1,label%l3
%l1: t
%l2: f
%l3: f1 2 f 2 withR={A→%a,B→%b}:
(a) Compiling filter subexpressions using continuation %p3= p3(%a,%b)
holest/f: codepluggedintoholet mayassumethat ret%p3
ehasevaluatedtotrue(likewiseforf/false). Notethat
holef atlabel%l2maybereachedviatwocodepaths. (b) Code emitted once hole f has been split into f .
1,2
Figure 4: Expression compilation: LLVM pseudo-code emitted for the evaluation of the filter p (A) AND p (B) OR p (A,B).
1 2 3
(ofwhichtherearearbitrarilymany—thesewillbemapped 1 SELECTSUM(l_extendedprice*(1-l_discount))ASrevenue 3
o unn mt no orr Ae ta isl aC vP iU laMr be lg eci os indte rr es gb isy tec ro ,d %ae .g ue Fmn ie ninr aa lt lytio ,hn s) t. o hp te1 g( v% eaa tlu) a ts tot rfa (cn Aod )ls 2 53 WF H AR E NO R DM E lp pl __ _i sp sn ha ie ir zi pt et mke oem, dy ep = Ia 5lr N_t p (’a Ar Itk R’e ,y ’4
i f h e L aL V e fo r p 1 ass g a lt e - 4 A N D > = 1 AIRREG’) 6
6 ANDl_shipinstruct=’DELIVERINPERSON’)
represents the LLVM instructions needed to invoke Post- 7 AND( p_brand=’Brand#31’
greSQL’sbuilt-inroutinethatextractsthevalueofcolumnA 8 ANDp_containerIN(’SMCASE’,’SMBOX’,...)
from the current row. 9 ANDl_quantity>=4ANDl_quantity=12ANDl_quantity=29ANDl_quantity<=39
p (A) and p (B) evaluate to true. 18 ANDp_size<=15); 7
1 2
Code that plugs into hole t (f) may be generated un- Figure 5: Once Q19 has been optimized, PostgreSQL’s in-
der the assumption that subexpression e evaluated to true terpreter effectively evaluates the highlighted expressions.
(false). Weexploitthiswhenwegeneratecodeforacontain-
ingexpressionlikeeORp (A,B),seeFigure4(a)(right-hand
3
column). According to the semantics of disjunction, there translationmaintainsacompile-timemappingRofcolumns
is thus nothing left to do in hole t and we immediately to LLVM registers (see Figure 4(b), right-hand column).
return via ret. At f, however, the overall result depends Since hole splitting effectively unfolds all possible code
onp 3(A,B). WeknowthatcolumnAisdefinitelyavailablein paths through a filter expression at compile time, we pay
register %a but we cannot tell for column B: two code paths for this optimization in terms of code size. For TPC-H
lead to hole f at label %l2 and only on one has %b been query Q19 featuring complex predicates (see Figure 5), we
assigned the value of slot getattr(B). We thus need to indeed find that we now generate about 9 times as many
play safe and perform column extraction for B in any case. LLVM instructions (expression 7 yields 156 code paths).
This is unfortunate since calls to slot getattr are costly: SinceSQLexpressionsaresuper-briefifcomparedtogeneral-
theroutine(1)checkswhetherthecolumnhasalreadybeen purpose programs, we are nevertheless ready to accept this
extractedandthuscached,(2)retrievestheexternalcolumn size increase in order to reap the potential runtime savings.
representation either from the cache or the row at the cor-
rectoffset, andthen(3)transformsthevaluetoaninternal 2.2 TheBottomLine: PerformanceGains
main-memory representation.
We set out to shift effort from query run time to compile
Hole Splitting. The cost of slot getattr motivates an time. Thispaysoffonlyiftheaddedcompilationtimedoes
improved compilation scheme that uses holes to encode ex- noteatuptheperformancegains. WithLLVM,wemeasure
actlywhichcolumnvaluesarepresentinwhatregisters when translation times of no more than 40ms when we handle
executionreachesahole. Inthecaseofourfilterexpressione TPC-H queries. Hole splitting adds to this but only mod-
this leads to a split of the false hole into f and f (Fig- erately so: for Q19 we see an increase of about 30%—this
1 2
ure4(b),left-handcolumn). Atf (label%l2)weknowthat is still negligible for OLAP-class queries. The more rows a
1
eevaluatestofalseandthat%aholdscolumnA,atf wead- query processes, the more worthwhile expression compila-
2
ditionallyknowthatcolumnBispresentin%b. Wecanmake tion becomes.
good use of this and judiciously omit the slot getattr(B) Figure 6 documents the performance gain of expression
call in hole f . To issue the minimum number of column compilation when PostgreSQL 9 processes a TPC-H bench-
2
loads that need to happen in a specific hole, the expression markofscalefactor5(averageof10runsreported). Weseea
1519
interpreted 32.5s 12.5s 7.3s 12.5s 7.1s 10.9s
expressions 11.8s 11.5s 9.7s
23.9s 5.3s
4.6s
61.8
52.4 47.6
9.4 24.3 27.0
25.3
Q1 Q3 Q6 Q10 Q14 Q19
Figure 6: Percentages of overall execution time spent to
evaluate compiled arithmetic and filter expressions (inter-
preted: see Figure 2). After compilation, TPC-H query Q1
executes in 23.9s (before: 32.5s).
353.9M 62.0M 62.7M 65.6M 55.7M 42.8M
naive
evaluation 93.0% 94.9%
58.9% 59.8%
Q1 Q3 Q6 Q10 Q14 Q19
Figure7: Reductionofthenumberofcallstoslot getattr Figure 8: Enhanced visual EXPLAIN, revealing the LLVM-
(column value extraction) after hole splitting. generatedx86instructionsthatimplementthefilterexpres-
sion 1 (cf. Figure 1). Plan rendering based on Pev.2
queryruntimereductionofuptoto37%(Q6)forthefamily
of selected TPC-H queries—in fact, all TPC-H queries ex- queryprocessorsuchthatexecutiontimebreakdownsinthe
hibit performance improvements. The system now devotes formofpiecharts(after: ,before: ,recallFigure2)can
a smaller slice of its time to expression evaluation: for Q1, be output on the fly.
SQL expressions now account for 9.4%+25.3%=34.7% of Deeper. On a click, EXPLAIN reveals the LLVM intermedi-
the overall effort (formerly: 51.9%, compare to Figure 2). aterepresentation[5]and/orthenativex86instructionsfor
Figure 7 contains evidence that queries do benefit from any expression that underwent compilation. Among other
hole splitting if an embedded expression repeatedly refers gory details, this also shows how hole splitting shapes the
to the same set of columns. Even moderate repetition suf- generatedcode. AlargerTPC-Hinstancewillbepreloaded
fices to cut down the number of slot getattr calls signi- to demonstrate the runtime savings we have reported here.
ficantly: the filter expressions in Q6 as well as Q14 access The demonstration does not run on rails, though: we will
columns l shipdate and l discount twice. No such col- also provide toy data sets that allow for quick turnaround
umn reuse within one expression occurs in Q1 or Q3. Ex- andexperimentation. Theaudienceisencouragedtoexplore
pression 7 of Q19 (Figure 5) is a prime candidate for hole ad-hoc query compilation scenarios and observe the impact
splitting—it is because of the high selectivity of the con- of this PostgreSQL performance surgery.
juncts 4 to 6 that we only measure a minor runtime im-
pact: thenativecodefor 7 needstobehardlyeverinvoked
4. REFERENCES
by PostgreSQL.
[1] P. Boncz, M. Zukowski, and N. Nes. MonetDB/X100:
Hyper-Pipelining Query Execution. In Proc. CIDR,
3. DEMONSTRATIONSETUP pages 225–237, 2005.
[2] P. A. Boncz, T. Neumann, and O. Erling. TPC-H
We will bring an installation of PostgreSQL (version 9)
Analyzed: Hidden Messages and Lessons Learned from
that has been enhanced with an LLVM-based compiler for
an Influential Benchmark. In Proc. TPC Technology
arithmetic and Boolean expressions, as described in Sec- Conference on Performance Evaluation &
tion 2.1. The on-site demonstration features a setup cho- Benchmarking (TPCTC), pages 61–76, 2013.
sentoprovidecursoryaswellasdeeperimpressionsofSQL [3] G. Graefe. Volcano—An Extensible and Parallel Query
expression compilation: Evaluation System. IEEE TKDE, 6(1):120–135, 1994.
[4] D.Gries.Compiler Construction for Digital Computers.
Cursory. Our PostgreSQL 9 system comes with a visual
John Wiley & Sons, New Jersey, USA, 1971.
EXPLAIN plan renderer (see Figure 8) that helps to under-
[5] The LLVM Compiler Infrastructure Project. llvm.org.
stand how the system spends its time. Colored operator
[6] T. Neumann. Efficiently Compiling Efficient Query
labels,like largest or slowest,letperformancechokepoints
Plans for Modern Hardware. In Proc. VLDB, pages
stick out even if plans get complex. Paired execution time
539–550, Seattle, Washington, USA, 2011.
annotations (after|before) give a quick overview of what is
[7] The TPC Benchmark H. tpc.org.
to be gained by SQL expression compilation for a particu-
larquery. Additionally,wehaveinstrumentedPostgreSQL’s 2github.com/AlexTatiyants/pev
1520