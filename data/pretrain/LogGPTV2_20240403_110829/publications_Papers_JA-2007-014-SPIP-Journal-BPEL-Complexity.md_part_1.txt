**Accepted for Publication, Software Process: Improvement and Practice Journal, Copyright Â© 2006 John Wiley & Sons, Ltd.**

**Complexity Analysis of BPEL Web Processes**
Jorge Cardoso
Department of Mathematics and Engineering
University of Madeira, 9050-390 Funchal, Portugal
Email: [PI:EMAIL]
Phone: +351 291 705 150, Fax: +351 291 705 199

**Abstract:**
Many organizations have recognized the potential of WS-BPEL (Web Services Business Process Execution Language) for modeling the behavior of web services in business processes. WS-BPEL provides a framework for describing both simple and complex interactions between business partners. However, WS-BPEL process designs can become highly complex, often due to the large number of web services involved in global markets. High complexity in a process can lead to several undesirable outcomes, such as poor understandability, increased errors, defects, and exceptions, resulting in longer development, testing, and maintenance times. Therefore, it is crucial to avoid excessive complexity. Highly complex processes are also less flexible, as making changes to them becomes more challenging. This paper introduces two metrics for analyzing the control-flow complexity (CFC) of WS-BPEL web processes. These metrics are intended to be used during the design phase to evaluate the complexity of a process before implementation.

**Keywords:** Web services, Web processes, BPEL, Business processes, Workflows, Complexity

**1. Introduction**
In the competitive landscape of e-commerce and e-business, web processes can span both within and between enterprises (Sheth, Aalst et al., 1999). A web process (Cardoso and Sheth, 2005) models complex interactions among organizations and represents an evolution of workflow technology. While workflows invoke tasks and activities, web processes invoke web services. The most well-known language for modeling web processes is BPEL (WS-BPEL, 2005), and the W3C standard for modeling web services is WSDL (Christensen, Curbera et al., 2001). Organizations aim for their web processes to be simple, modular, easy to understand, maintain, and re-engineer. However, in cross-organizational settings, these processes inherently possess a certain level of complexity.

To achieve effective process management, one key area of research is the complexity analysis of web processes (Cardoso, 2005). Studies indicate that 38% of process management solutions will be applied to redesigning enterprise-wide processes (Delphi Group, 2002). Recently, a new field of research has emerged, known as process measurement, which involves quantifying specific properties of processes, such as complexity, defects, process size, testing effort, maintenance effort, understandability, time, resources, and quality of service. Despite its importance, process measurement is still in its early stages, and much work remains to be done.

Complexity is closely related to flexibility, a key enabler of innovation for organizations. Flexibility and complexity are generally inversely related. Low-complexity processes are typically more flexible, as they can quickly adapt to new products or services to meet changing customer and business partner needs. Complex web processes are more prone to errors. For example, in software engineering, modules with high complexity indices have a higher frequency of failures (Lanning and Khoshgoftaar, 1994). Surprisingly, despite extensive literature on software complexity measurement, there is a lack of research on process complexity. The only notable work in this area is the cohesion and coupling metric for workflows proposed by Reijers and Vanderfeesten (Reijers and Vanderfeesten, 2004).

In our previous work (Cardoso, 2005), we introduced a control-flow complexity (CFC) metric for analyzing tri-logic workflows (Cardoso and Cravo, 2006). This metric was designed to improve the quality and maintainability of processes during development. Given the widespread adoption of WS-BPEL, with over 30 enactment engines and editing tools developed, it is essential to develop complexity metrics for evaluating BPEL processes. We believe that no comprehensive metric exists to analyze the complexity of web processes, and multiple metrics are needed to characterize different aspects of web processes.

The three fundamental elements of any measurement are the entity, attribute, and metric. In our case, the entities are BPEL processes, and the attribute of interest is the complexity associated with these processes. Attributes such as time, cost, and reliability have already been studied (Cardoso, Miller et al., 2004; Cardoso, 2005). The metric we will focus on is the control-flow complexity.

This paper is structured as follows: Section 2 discusses various perspectives of process complexity. Section 3 provides an introduction to WSDL web services and BPEL web processes. Section 4 presents the metric we have developed to evaluate the control-flow complexity of BPEL processes. Section 5 reviews related work, highlighting the gap in research on complexity analysis for business processes compared to software engineering. Finally, Section 6 concludes the paper.

**2. Web Process Complexity and Flexibility**
Flexibility in a process is characterized by the ease with which it can adapt to new, different, or changing requirements. According to the IEEE Standard Glossary of Software Engineering Terminology (IEEE, 1992), "flexibility is the ease with which a system or component can be modified for use in applications or environments other than those for which it was specifically designed." Following this definition, we view flexibility as the ease of modifying a process in response to environmental or initial requirement changes. In software engineering, flexibility is often measured by the impact of changes on programs (Li and Offutt, 1996). Curtis (Curtis, 1979) suggests that "software complexity determines how much effort will be required to modify program modules to incorporate specific changes." If a process is complex, it may contain many complex components, such as switches, flows, whiles, or picks. Adding, removing, or changing an activity in a complex process requires studying numerous cases, making the process difficult to change and, therefore, inflexible. In our view, the more cases a process has, the more difficult it is to change. Being able to handle a large number of cases does not make the process flexible but rather complete for a particular domain.

In networked supply chains, process flexibility can be classified into three levels (Ferrara, Hayden et al., 2003). These levels require the ability to modify and customize processes and to change them in real-time. The basic property of a process is that it is case-based (Aalst, 1998), meaning every task is executed for a specific case. Complex processes tend to be less flexible because they support more cases, making it difficult to account for all cases when making changes. For example, eligibility referral (Anyanwu, Sheth et al., 2003) and enrollment processes (CAPA, 1997) are complex due to the many cases in each process, resulting from the complex logic in healthcare and educational organizations. Changing such processes requires considering a vast number of cases, making the adaptation complex.

Flexibility should be a concern during development, and control-flow complexity measures should be used during web process construction or reengineering to monitor complexity trends and maintain predefined flexibility levels. A significant increase in complexity during testing may indicate a brittle, non-flexible, or high-risk process. As processes evolve over time through modifications, they can become fragile. Techniques like complexity analysis can help assess the system's condition and provide information on the cost and time required to make changes to enhance flexibility.

We define web process complexity as the degree to which a process is difficult to analyze, understand, or explain. It can be characterized by the number and intricacy of web services' interfaces, transitions, conditional and parallel branches, loops, roles, activity categories, data structures, and other process characteristics (Cardoso, 2005).

There is no single metric that can measure the complexity of a process. Based on previous work identifying recurring, generic patterns in workflows, such as Workflow Control Patterns (Aalst, Hofstede et al., 2003), Workflow Data Patterns (Russell, Hofstede et al., 2005), and Workflow Resource Patterns (Russell, Aalst et al., 2005), we identify three main complexity perspectives: control-flow complexity, data-flow complexity, and resource complexity. We also consider the complexity of activities, which can be classified into four types: atomic, block, multiple-instance, and multiple-instance block. In this paper, we focus on control-flow complexity but present the main ideas behind each perspective.

- **Activity Complexity:** This metric calculates the number of activities in a process. While simple, it is important for complementing other forms of complexity. For example, a sequential process with a thousand activities has a control-flow complexity of 0 but an activity complexity of 100. This metric is inspired by the lines-of-code (LOC) metric in software engineering (Jones, 1986).
  
- **Control-Flow Complexity:** This perspective considers constructs such as splits, joins, loops, and starting and ending points. Splits define possible control paths, while joins express synchronization. A control-flow complexity model must account for XOR-split/join, OR-split/join, AND-split/join, loops, etc. (Cardoso, 2005).

- **Data-Flow Complexity:** This increases with the complexity of data structures, the number of formal parameters of activities, and the mappings between activities' data. A data-flow complexity metric can include sub-metrics for data complexity, interface complexity, and interface integration complexity (Cardoso, 2005).

- **Resource Complexity:** Activities in a process need to access resources during execution. Resources, such as human, IS, and IT resources, can be structured in the context of an organization. Analyzing the structure of resources can help managers lower administrative costs and optimize resource utilization (Du, Davis et al., 1999; zur MÃ¼hlen, 1999).

**3. BPEL Web Processes**
The rise of e-commerce has transformed the business landscape, forcing managers to rethink their strategies. Organizations face the challenge of managing e-business systems, web services, and web processes. Web services and web processes promise to ease infrastructural challenges such as data, application, and process integration. With the emergence of web services, a process management system is essential to support, manage, and enact web processes both between and within enterprises (Sheth, Aalst et al., 1999).

A BPEL process is composed of a set of web services combined to achieve a final goal. As the complexity of a process design increases, it can lead to poor quality and difficulty in reengineering. High complexity may result in limited understandability, more errors, defects, and exceptions, requiring more time for development, testing, and maintenance. Excessive complexity should be avoided, especially for critical processes where failure can result in serious consequences, such as in healthcare applications (Anyanwu, Sheth et al., 2003). Producing processes of higher quality and lower complexity is a matter of endurance.

**3.1 Web Services**
Web services are modular, self-describing, and self-contained applications accessible over the Internet (Curbera, Nagy et al., 2001). They are described using the Web Services Description Language (WSDL) (Chinnici, Gudgin et al., 2003), which provides operational information. WSDL specifies the structure of message components using XML Schema constructs. A WSDL document contains definitions for input and output messages, data types, port types, and bindings. These elements are illustrated in the following code segment:

```xml
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:element name="GetStockPrice" type="tns:GetStockPrice"/>
      <xs:complexType name="GetStockPrice">
        <xs:sequence>
          <xs:element name="tickerSymbol" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetStockPriceRequest">
    <wsdl:part name="parameters" element="tns:GetStockPrice"/>
  </wsdl:message>
  <wsdl:portType name="StockQuotePortType">
    <wsdl:operation name="GetStockPrice">
      <wsdl:input message="tns:GetStockPriceRequest"/>
      <wsdl:output message="tns:GetStockPriceResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="StockQuoteSoapBinding" type="tns:StockQuotePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetStockPrice">
      <soap:operation soapAction="http://example.com/GetStockPrice"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="StockQuoteService">
    <wsdl:port name="StockQuotePort" binding="tns:StockQuoteSoapBinding">
      <soap:address location="http://example.com/stockquote"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
```

This WSDL document defines a simple web service for getting stock prices, including the message structure, port types, and bindings.