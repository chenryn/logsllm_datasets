OpenSSL ﬂaw [66]; a patch ‘ﬁxing’ a valgrind warning about
uninitialized data also removed the code which added entropy
during key generation, leading to the widespread generation
and use of predictable keys.
E. Stack variables
A function stack frame contains copies of local variables
which are either too large to be stored in registers, or which
have their addresses taken (for example, to be passed to another
function). The stack also generally contains spilled copies
of other local variables and compiler-generated temporary
variables, as well as function arguments, frame pointers and
return addresses. Given the constant re-use of stack memory,
these frames provide a rich source of sensitive data.
Modern compilers use sophisticated algorithms for register
and stack frame allocation [42], and both temporaries and
variables with non-overlapping lifetimes can be assigned the
same portion of a stack frame (or registers). This reduces
memory usage and improves cache locality, but means that
even clearing registers and stack frames before/after a function
call is insufﬁcient to avoid all potential uninitialized variables.
3
main() {
int x;
printf("%d", x);
}
define @main() {
%x = alloca i32, align 4
%0 = load i32, i32* %x
call @printf(..., i32 %0)
define @main() {
call @printf(..., i32 undef)
}
}
(a) C code
(b) LLVM bitcode, before mem2reg
(c) LLVM bitcode, after mem2reg
Fig. 1. LLVM transforms uninitialized reads into undef values early in the optimization process; later passes cannot recover the information removed in (c)
for (i = 0; i 5%).
C. Optimizer
Our optimizer design provides several efﬁcient and practi-
cal optimizations which improve the performance of SafeInit
while being efﬁcient and non-invasive. The primary goal of the
optimizer is to make simple changes which will allow the many
other standard optimizations available in modern compilers to
remove any unnecessary initializations. We hope that SafeInit
will become a standard hardening technique, and so it needs
to be as practical as possible; in particular, we need to avoid
adding complex or invasive analysis.
1) Sinking stores: Ideally, stores to local variables should
be as close as possible to their uses. This is important for cache
locality, and for minimizing the memory usage of stack frames;
minimizing the lifetime of a variable allows stack coloring
algorithms to allocate stack frame space more efﬁciently.
Our optimizer attempts to move our initialization stores to
the dominating point of the uses of a variable. Importantly,
this also avoids unnecessary initialization; variables which are
unused in certain paths need only be initialized in the paths
where they are used. A common example is where variables
are only used in error paths, such as with the code in Figure 4.
This code path is not executed during normal execution, and
we do not need to initialize the buffer until we reach a path
in which it will be used.
If this dominating point of the uses of a variable is
reachable from itself, and it does not go out of scope when
5
int buf[50];
for (int i = 0; i row_num = 0;
r->length = 0;
r->user_word = NULL;
Fig. 5. Example of initialization using a loop; ‘buf’ is fully initialized but
this code cannot be converted into a memset.
sprintf (t3, "%s%s;", t1, t2);
strcpy (t1, t3);
Fig. 6. t3 is a ‘safe’ string buffer (from gcc in SPEC CPU2006) which does
not need initialization
following this execution path, then it is not an appropriate
place for initialization; this typically occurs if the ﬁrst stores
to a variable are inside a loop. To resolve this, we instead use
an initialization point which also dominates all the predecessor
basic blocks of such dominating points.
2) Detecting initialization: We propose detection of typical
code which initialize arrays (or portions of them), which allows
other compiler optimizations to remove or shorten previous
stores which are revealed to be overwritten.
Typical compiler optimizations perform this only for indi-
vidual store instructions, or intrinsics such as memset. While
modern compiler transforms attempt to convert some loops to
memset calls [18], this is only possible if a single-byte (or
in some cases, two-byte) pattern is used. This is insufﬁcient
for many common cases, such as initializing an array of (four-
byte) integer values to the value ‘1’, as shown in Figure 5.
Our design detects such code, treating these loops as if they
were single stores which cover the entire range they initialize.
3) String buffers: Buffers which are used to store C-style
null-terminated strings are often only used in a ‘safe’ manner,
where the data in memory beyond the null-terminator is never
used. We propose a low-cost check which catches simple
cases, such as that in Figure 6; buffers which are only passed
to known C library string functions (such as strcpy and
strlen) are ‘safe’. When initializing with zero, only the ﬁrst
byte of such buffers must be initialized.
Compilers already know about and detect such ‘built-in’
string functions, so we can take advantage of their existing
infrastructure to detect these functions; there is no need to
add annotations. Where the optimizer can prove that the string
is always initialized, the initialization can later be removed
entirely; however, this often only becomes clear after further
optimizations have been applied.
D. Dead Store Elimination
To minimize the performance cost of initialization, SafeInit
also includes a variety of improved optimization passes. These
are more complex than our other optimizations, and may
not always be necessary to obtain low overhead. However,
they resolve real situations which we found to introduce
unnecessary overhead when using our hardening passes.
In particular, we need so-called ‘dead store elimination’
(DSE) optimizations, a standard class of compiler optimiza-
tions [4] which remove stores which are always overwritten by
Fig. 7.
returned from malloc is already cleared with zero values.
Example of removed zero stores (from ‘espresso’); the memory
int buf[n];
memset(buf, 0, n);
memset(buf, 1, n);
Fig. 8.
memset can always be removed.
Example of an unnecessary non-constant-length store; the ﬁrst
another store without ever being read. We propose DSE-style
optimizations which are particularly appropriate for removing
initializations; existing optimizations are often ill-suited to this
task, since these situations occur less frequently in other code,
and so are less of a priority for compiler development.
Only relatively simple DSE optimizations are available in
current compilers, generally limited to only statically-sized
stores within a single basic block. However, this is an active
area of compiler development, and as we will later discuss,
support for these forms of complex DSE is slowly being
introduced in mainstream compilers. The optimizations we
present here serve to demonstrate demonstrate the importance
of this work and the potential performance improvements
which are possible from more intensive optimization.
1) Heap clearing: Since all heap allocations are guaranteed