    payload = p64(libc_base+0x3c4aed)
    fill(2, payload)
    allocate(0x60)      #chunk4
    allocate(0x60)      #chunk6(fake chunk)
    one_gadget = libc + 0x4526a
    payload = p8(0)*3 +p64(0)*2+ p64(one_gadget)
    fill(6, payload)
    #gdb.attach(p)
    allocate(0x10)
    p.interactive()
初始内存分布
可以看到，heap从 0x555b0e321000开始
然后我们释放chunk1和chunk2 `free(1);free(2)`此时在单链表fastbin中chunk2->fd 指向chunk1.
如果利用栈溢出的漏洞，修改堆内存，把chunk2->fd，使它指向chunk4，就可以将unsortedbin chunk，链接到fastbin中。
但是此时害需要把chunk4->size的0x91修改成0x21,绕过检测1即malloc对fastbin chunk大小的检查。
由于程序开启了PIE，所以实际上我们是不知道heap的地址的，因为它是随机的，但是heap的起始地址的低字节一定是0x00，那么chunk4的低字节位一定是0x80(因为每个chunk相隔0x20)
这种情况是在申请前面的init函数中的那个table空间申请使用mmap系统调用，而不是通过malloc函数调用，是为了保证chunk是从heap的起始地址开始分配的。
此时开启这个断点。
将0x80写入chunk2的fd指针了，即chunk2->fd -> chunk4
此时再次申请空间，根据fastbin后进先出的原理，那么实际上调用的是chunk2，在chunk2的位置创建一共new
chunk1，在chunk4的位置创造一个重叠的new chunk2.
先来查看一下，chunk4修改size，使其通过malloc的fastbin大小检查
可以看到在0x80的size位变成了0x21
    这边的chunk的结构是一共占0x20个位置，第一个0x8，放置1或者0，查看chunk是否可以使用，第二个0x8存放size
    最后的0x10存放content，但是这个content可以溢出嘛，然后写到下面一位的第一个0x8第二个0x8这样
在断到重新申请chunk
由于unsortedbin双链表，会产生chunk4和top chunk合并，所以申请完chunk4之后要将chunk4->size
修改0x91，并且申请一个unsortedbin chunk，这样释放的chunk4就可以将它放入unsortedbin。
chunk5为防止合并的chunk
此时chunk4的fd，bk指针均指向main_arena+88，又因为这个是起始地址，所以只要找libc的起始地址然后做差就行（main_arena和libc有一个固定偏移0x3c4b20）
hex(3951480) = 0x3c4b78
libc_base = fd_addr - 0x58 - 0x3c4b20
接下来就是修改_malloc_hook了，malloc_hook指向void _function(size_t size, void_
caller),调用malloc函数的时候，首先会判断hook函数指针是否为空，不为空才调用它。所以需要使得malloc_hook指向one_gadget。但是由于fast
chunk的大小只能在0x20到0x80之间,那么就要计算偏移了，因为要找到0x7f
此时malloc_hook滞空，但是上面却有0x7f，那么它们相差多少距离
相差一个0x10再-2个字节，0xd
此时所拥有0xd这个位置的chunk就称fake chunk，因为它不会在heap中出现。
断到发送payload后面
然后我们把它申请回来，但是此时只把fastbin链表后面那个申请回来了
要想把这个0x7f申请回来，则需要再申请一个0x60的大小
这个时候就把0x7f给申请回来了。那下一步就是修改这个目标地址的数据为one_gadget
这样就成功的往malloc_hook中写入one_gadget了。
那么p8(0) _3 + p64(0)_ 2这个是怎么计算出来的呢
我们回过头看一下main_arena-0x30这个位置。
由于需要0x7f才能通过fastbin的malloc检查，所以我们在malloc那个fake
chunk的时候需要那个size位上面是0x7f。这才导致我们用上了+0xd这个位置，但是我们的目标地址是malloc_hook，实际上是要更改malloc_hook的参数，所以在最后写入one_gadget的时候要计算一下位置，p8(0)*3的意思是0x7f距离刚开始有6个位置(0x00007f)，然后从上面的2个0x8
0x8(2个地址)开始填充，所以需要这么大的空间，才能刚刚好把one_gadget写在0x00007f。。。。。
再最后调用calloc函数就能调用malloc_hook。
##### 8.3.2 Use After Free
**原理**
简单的说，Use After Free 就是其字面所表达的意思，当一个内存块被释放之后再次被使用。但是其实这里有以下几种情况
  * 内存块被释放后，其对应的指针被设置为 NULL ，然后再次使用，自然程序会崩溃。
  * 内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么 **程序很有可能可以正常运转** 。
  * 内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时， **就很有可能会出现奇怪的问题** 。
而我们一般所指的 **Use After Free** 漏洞主要是后两种。此外， **我们一般称被释放后没有被设置为 NULL 的内存指针为
dangling pointer。**
**UAF漏洞利用过程：**
  1. 申请一段空间，并将其释放，释放后的指针不清空，将这个指针简称为p1
  2. 申请空间p2， 由于malloc分配过程原则，使得p2指向刚刚释放的p1的空间，构造特殊的数据将这段内存空间覆盖
  3. 利用p1，一般会多出一个函数的指针，由于之前已经使用p2将p1的数据给覆盖了，所以此时p1上的数据是我们可以控制的，就存在劫持函数流的可能
###### **例题1.不重置指针**
    #include 
    #include 
    typedef struct name {
      char *myname;
      void (*func)(char *str);
    } NAME;
    void myprint(char *str) { printf("%s\n", str); }
    void printmyname() { printf("call print my name\n"); }
    int main() {
      NAME *a;
      a = (NAME *)malloc(sizeof(struct name)); 
      a->func = myprint; //指向myprint函数
      a->myname = "I can also use it"; 
      a->func("this is my function"); //打印出this is my function
      // free without modify
      free(a); //释放a的空间，但是不重置指针为NULL
      a->func("I can also use it"); //仍然会打印出I can also use it
      // free with modify
      a->func = printmyname;  //给指针赋值上新函数
      a->func("this is my function"); //此时就不会打印出this is my function而是 call print my name
      // set NULL
      a = NULL; //设置指针为空 
      printf("this pogram will crash...\n");
      a->func("can not be printed..."); //无效，没有反应
    }
最后输出的结果
    this is my function
    I can also use it
    call print my name
    this pogram will crash...
###### 2.例题double free
目录
    1.程序分析
        main.c
        crate函数
        delete函数
    2.漏洞分析
        UAF漏洞
    3.思路
        利用UAF漏洞将结构体函数修改成put函数
        通过获取程序基地址绕过PIE
        通过修改printf函数泄露libc_base,或者通过计算偏移得出libc_base
        再次利用UAF漏洞将结构体函数修改成system函数，并在寄存器上布置/bin/sh
    4.总结与理解
**程序分析**
从源代码部分进行分析，再从反编译层面理解
main.c
    #include 
    #include 
    #include 
    #include 
    typedef struct String{
        union {
            char *buf;
            char array[16];
        } o;
        int len;
        void (*free)(struct String *ptr);
    } String;
    struct {
        int inuse;
        String *str;
    } Strings[0x10];
    void showMenu(void);
    int getInt(void);
    void creatStr();
    void deleteStr();
    void freeShort(String *str);
    void freeLong(String *str);
    int getInt(void) {
        char str[11];
        char ch;
        int i;
        for (i = 0; (read(STDIN_FILENO, &ch, 1), ch) != '\n' && i o.buf);
        free(str);
    }
    void deleteStr() {
        int id;
        char buf[0x100];
        printf("Pls give me the string id you want to delete\nid:");
        id = getInt();
        if (id  0x10) {
            printf("Invalid id\n");
        }
        if (Strings[id].str) {
            printf("Are you sure?:");
            read(STDIN_FILENO,buf,0x100);
            if(strncmp(buf,"yes",3)) {
                return;
            }
            Strings[id].str->free(Strings[id].str);
            Strings[id].inuse = 0;
        }
    }
    void creatStr() {