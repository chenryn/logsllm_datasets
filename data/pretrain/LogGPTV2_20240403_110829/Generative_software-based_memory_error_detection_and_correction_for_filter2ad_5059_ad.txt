() pointcut 
as the protectedClasses 
out in 
the same way 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:00 UTC from IEEE Xplore.  Restrictions apply. 
is  incremented 
we introduced 
checks must  be skipped until the checksum 
a per-object counter 
all concurrent 
is valid again. Therefore, 
into each shared class instance. This counter 
before a thread enters a potentially 
const, member function. 
thread leaves the non-const member function. 
per-object counter 
may modify an object. All EDM/ERM operations 
unless this counter 
single thread accessing the object. In summary, 
call to a shared object is synchronized 
by 9 steps: 
that is non足
modifying, 
is decremented 
after the 
In fact, such a 
threads 
are skipped 
is 1 ,  which means, until there is only a 
the number of concurrent 
each function 
The counter 
reflects 
that 
per-object counter 
1 )  acquire lock 
2) increment 
3) check () the checksum 
4) release lock 
5) enter the function . . .  until it returns 
6) acquire lock 
7) recalculate() the checksum 
8) decrement 
per-object counter 
9) release lock 
if counter 
= =   1 
if counter 
==  1 
B. Evaluation 
Setup & Fault Model 
on eCos 3.0 with a set 
that is bundled with eCos 
a subset of all eCos benchmarks 
variant 
benchmark 
and records 
and which 
We evaluated 
each protection 
and test programs 
constitutes 
C++ and utilizes 
protected 
the baseline variant, 
of 21  benchmark 
itself, 
that is implemented  in 
briefly describes  each 
dynamic function calls to  the 
classes. Including 
variantlbenchmark combinations. All binaries 
for i386 with the GNU C++ compiler 
tools 4.3.2-sw,  optimization 
its default 
configuration, 
variant. 
as the benchmarks 
and such time-consuming 
any EDM/ERM runtime overhead. 
report on success or failure 
Additionally, 
we disabled 
grub startup 
both serial 
(GCC, eCosCentric GNU 
level -02); eCos was set up with 
and the bitmap scheduler 
and VGA output, 
before finishing, 
output would completely 
mask out 
threads. Table III 
its number of 
scheduler 
this set totals 
at 1 26 
and thread 
were compiled 
ributed 
space. First, 
in our solution 
We chose two different 
transient 
we consider 
fault models to emphasize 
the 
we used the common 
single-bit 
flip fault model in 
program runs  in 
flexibility 
uniformly-dist
data memory, i.e., 
bit in the datalBSS segments 
model seems reasonable 
read-only 
(EEP)ROM or Flash, and global objects and the program stack 
is kept in non-ECC RAM. Second, we used a burst bit-flip 
model, which flips all eight bits at a memory address at once. 
of high energy events. 
This models, e.g., 
flips at some point in time. This 
where 
data and code  (text)  is  stored 
embedded systems 
for low-cost 
multi-bit 
impacts 
which a single 
in far less susceptible 
Bochs, the IA-32 (x86)  emulator 
framework [ 1 7] currently 
back end that the 
provides, was con足
FAIL * 
experimentation 
figured to simulate 
the CPU on a behavior 
of one instruction 
instruction, 
and does not provide 
effects. Therefore 
errors in this simulator 
contemporary 
bit flips (especially 
a modern 2.666 GHz x86 CPU. It simulates 
level with a simplistic 
per cycle (with the exception 
of the HLT 
timing model 
which spans multiple 
cycles until the next interrup
t), 
any insights 
on caching 
and pipelining 
the results 
obtained 
from injecting 
memory 
are very pessimistic: 
We expect that a 
cache hierarchy would 
mask many main-memory 
for longer-running 
benchmarks). 
C. Effectiveness: 
Error Detection 
& Correction 
running 
version 
reasonable 
we skipped 
(cf. Section 
for the original 
the three longest-
instructions) 
V-D). Furthennore 
almost 2.7 
with its 
high runtime overhead 
and the Hamming protection 
To keep the  FI experimentation 
efforts  within 
(KILL, 
benchmarks 
running for 
variant 
to run for 
of 1,000 main loop iterations, and extrapolated the 
limits, 
MUTEX3 and CLOCKTRUTH -the latter 
billion 
extremely 
we modified the BIN_SEM2 and SYNc2 benchmarks 
1 00 instead 
results 
by 1 0 ;  this simplification 
nature of these benchmarks. 
fault space to the scheduler 
the kernel: This naturally 
coverage, 
behavior 
additional 
following 
while the non-critical 
remains as susceptible 
but as  we do not expect any  resiliency-wise 
from  all 
insights 
results 
other memory areas, we would not gain 
from injecting faults 
the 
s, 
Section 
II) 
Additionally 
and thread data structures 
within 
towards a better 
Therefore, 
data structure
is valid due  to the highly repetitive 
rest of the memory space  (cf. 
by multiplying 
for the protected 
are only valid 
we constrained the 
biases  the 
different 
the failure 
FI results 
as before. 
there. 
counts 
due to  the locking and 
elides 
property 
atomicity 
guarantees 
This sequence 
furthennore 
important 
since the second Coffman condition 
resources) [25] is not satisfied. 
EDMJERM  operation 
released 
straightaway 
waiting 
without 
unnecessary EDM/ERM operations. Another 
is that this sequence 
cannot cause deadlocks, 
(hold and "wait for" 
runs to completion, 
After acquiring 
the lock, the 
and the lock is 
s. 
for additional 
resource
Finally, 
the per-object counters 
memory errors on their own respect. 
counters 
solution 
variable, 
by tripling 
is feasible, 
so that tripling 
is inexpensive. 
their state plus majority 
since a counter' s  state is only an  integer 
have to be resilient 
these 
This 
We  implemented 
voting. 
against 
V. IMPLEMENTATION AND EVALUATION 
In the following, 
we describe 
error-detection 
and error-recovery 
the implementation 
of five 
based 
mechanism. Subsequently, 
algorithms 
we 
object-protection 
their effectivene
evaluate 
(FI) experiments, 
ss in a set of benchmarks 
and measure the induced 
and dynamic overhead. 
This allows us to predict 
the 
concrete 
on the generic 
quantitatively 
with fault-injection 
static 
suitability 
scenario
of specific 
EDM/ERM variants 
for yet unknown 
s, and to draw conclusions 
on the overall 
methodology. 
A. EDMIERM Variants 
To exemplarily 
evaluate 
the generic 
object-protection 
mech足
anism described in Sections III and IV, we implemented 
five generic 
EDM/ERM aspects. In Table II we introduce 
acronyms 
("Baseline" is the unmodified 
present 
estimate 
in the rest of this 
without 
and 
per module to convey an 
canonicalized
of the complexity. 
5 lines-of-code 
protection), 
for reference 
for each 
version 
section 
variant 
Each variant 
is implemented 
as a generic 
to protect any 
subset of the existing 
module and can 
C++ classes 
be configured 
of the target system. 
5Effective 
lines of code (excluding 
empty lines and comments). obtained 
with cloe: http://c1oc.sourceforge.neU 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:00 UTC from IEEE Xplore.  Restrictions apply. 
Aspect/Module Description 
LOC 
SSE4,2 instructions 
(EDM), 
CRC 
TMR 
A CRC32 implementation 
Triple-modular redundancy, 
CRC (EDM, see above), 
A 32-bit two's complement addition 
leveraging 
CRC+DMR 
SUM+DMR 
Hamming  Software-implemented 
Framework Generic object-protection 
plus  one 
Intel's 
using two copies of  each 
majority 
134 
voting (EDMlERM),  86 
(ERM),  171 
(ERM).  157 
166 
EDMIERM implementations. 1,581 
EDMIERM). 
data member  and 
member  for 
copy of each  data 
error correction 
checksum (EDM), plus one copy of each data  member 
additional 
Hanuning code (240 data bits, 8 parity bits; single-bit 
infrastructure, 
the basis for  all 
concrete 
TABLE II: EDM/ERM variants. 
/ Testing domain 
Syscalls 
Binary semaphore 
Binary semaphore 
functionality 
(2 Ihreads) 323 
Benchmark  Description 
BIN SEMI 
(15 Ihreads) 
BIN_SEM2  Dining philosophers 
92,711 
timeout (2 Ihreads)  602 
BIN SEM3 
Kernel Real Time Clock (RTC) (I Ihread) 2,851 
CLOCKI 
subsystem (J Ihread)  379 
CLOCKCNV 
CLOCKTRUTH  Kernel RTC accuracy (J Ihread) 
39,839 
(2 Ihreads) 370 
CNT_SEMI  Counting 
(J Ihread) 
EXCEPTI 
171 
(3 Ihreads) 
FLAGI 
1,356 
(3 Ihreads)  874 
KILL 
Message queues (2 Ihreads) 
922 
Exception 
Flag functionality 
Thread kiliO and reinitalizeO 
semaphore 
functionality 
Kernel RTC converter 
functionality 
MQUEUEI 
/ Testing domain 
Syscalls 
functionality 
inheritance 
Basic mutex functionality 
Mutex release 
Mutex priority 
Benchmark  Description 
MUTEXI 
MUTEX2 
MUTEX3 
RELEASE  Thread releaseO (2 Ihreads) 
SCIIEDI 
SYNc2 
SYNc3 
TIIREADO  Thread constructors/destructors 
THREADI  Basic thread functions 
TIIREAD2  Scheduler 
(3 Ihreads)  743 
(4 Ihreads)  743 
(7 Ihreads)  19,812 
641 
(2 Ihreads) 
94 
mechanisms (4 Ihreads) 437,314 
(3 Ihreads) 385 
(J Ihread)  72 
266 
(3 Ihreads) 685 
Basic scheduler 
locking 
Different 
Priorities 
and priority 
(2 Ihreads) 
and thread priorities 
inheritance 
functions 
TABLE III: eCos kernel test benchmarks. The number of dynamic system  calls 
classes is shown in the last column. 
(Syscalls) to  the protected 
scheduler 
and thread 
clock 1  clockcnv  cnCsem1 
exceptl 
lIagl 
mqueue1 
mutex1 
mutex2 
release 
schedl 
sync2 
sync3 
threadO  thread 1  thread2 
Experiment 
result 
Timeout 
Bad mem access 
JMP outside 
code 
CPU Exception 
Wrong output 
Detected, 
Det. & 
No effecl 
restart 
corrected 
c: o  .0 . 25%-
U5 '0 
"S  0%足
(fJ  
0%  -
Fig. 3: Single-bit 
runtime) 
in percentages 
of their respective 
flip PI campaign  results 
(KILL, MUTEX3 and CLOCKTRUTH benchmarks 
fault-space size (benchmark 
runtime 
x critical-data 
memory size). 
omitted 
due to their extremely 
long 
Baseline  CRC 
TMR 
CRC+DMR  SUM+DMR 
Baseline  CRC 
TMR 
CRC+DMR  SUM+DMR 
BIN_SEMI 2.395 x 106 5.416 x 106 8.546 x 106 6.446 x 106 6.355 x 106  MUTEXI 4.516 x 106 9.472 x 106 1.491 x 10' 1.132 x 10' 1.108 X 10' 
BIN_SEM2 5.075 x 1012 2.637 X 10' 3.880 X 10' 3.178 X 10' 3.150 X 10'  MUTEX2 1.262 x 10' 1.690 X 10' 2.661 X10' 2.039 x 10' 2.001 X 10' 
BIN_SEM3 6.575 x 1010 1.042 X 10' 1.583 X 10' 1.243 X 10' 1.232 X 10'  RELEASE 2.535 X 106 5.324 X 106 8.376 X 106 6.309 X 106 6.236 X 106 
CLOCK I 1.288 x 101 1.112 x 107 1.577 x 107 1.267 x 107 1.278 x 107  SCIIEDI 1.580 x 106 1.724 X 106 2.850 X 106 2.045 X 106 1.993 X 106 
CLOCKCNV 6.594 x 103 8.997 x 103 1.461 x 106 1.066 X 106 1.037 X 106  SYNc2 8.551 x 10' 4.287 X 109 6.645 X 109 5.127 X109 5.024 x 109 
CNT_SEMI 2.130 x 106 4.526 X 106 7.168 X 106 5.345 X 106 5.252 X 106  SYNC3 5.289 x 106 9.654 X 106 1.532 x 107 1.157 x 107 1.135 x 107 
EXCEPTI 8.498 x 105 1.060 X 106 1.665 X106 1.240 x 106 1.206 X 106  TIIREADO 9.211 X 105 7.232 X 105 1.139 X 106 8.048 X 105 7.805 X 105 
FLAG I  2.066 X1011 1.911 x 10' 2.899 X 10' 2.274 x 10' 2.243 x 10'  TIIREADI 5.894 x 10' 7.134 x 106 1.089 x 10' 8.479 X 106 8.363 X 106 
MQUEUEI 5.957 x 106 8.509 X 106 1.338 X 10' 1.012 x 10' 9.967 x 106  TIIREAD2 6.499 x 106 1.839 X 10' 2.957 X 10' 2.223 X 10' 2.176 x 10' 
TAB LE IV: Absolute failure 
extremely 
(KILL, MUTEX3 and CLOCKTRUTH benchmarks 
counts for PI campaign 
long runtime). 
omitted due to their 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:00 UTC from IEEE Xplore.  Restrictions apply. 
90  variant/bench足
and after applying 
For both fault models and the remaining 
FI experiments.  Figure 
to effi足
fault-space pruning techniques 
fault space, we conducted 
a total 
3 shows the  FI 
flip fault model, divided 
and corrected, 
and error 
the baseline), 
and various 
(including 
the complete 
for the single-bit 
negative  outcom
mark combinations 
FAIL * ' s  conservative 
ciently  cover 
of about 274 million 
result distribution 
into positive (no effect, error detected 
detected) 
successfully detects 
(the only protection 
but not corrects)  scheduler 
almost all cases -over all benchmarks, 
faults have no effect, 84.7 % are detected, 
a previous 
evaluated 
equally 
detected 
only vary insignifica
marginally 
schemes detect/correct 
ntly (plot not shown): 
more cases ( 1 3 . 6  %), but  the 
average 
variants 
good (賊0.1 %), with the difference 
and corrected. 
and thread data-st
evaluated 
the same  percentage 
of errors. 
of 1 2.8 % in the baseline) 
(TMR, CRC+DMR, SUM+DMR) turn out 
ructure 
errors in 
of 1 5 . 3  % 
an average 
and only 0.01 % (from 
still  fail. 
The  other 
With the burst fault model, 
The baseline 
the numbers 
es: The CRC variant 
only detects 
variant that 
fails in 
EDM/ERM 
that 84.7%  are 
The experiment 
outcome numbers relative 
paragraph 
to the fault足
are contrasted 
by the 
numbers in Table IV. As software-implemented 
error 
runtime overhead, 
protected 
increasing 
the chance of being 
(which we  assume to be uniformly 
there exists a break-even 
and 
that for 
crossing the battlefield, 
point 
with heavy armor. Table IV suggests 
this break-even 
point is approximately 
slower but 
introduces additional 
d). Consequently, 
metaphorically, 
quickly 
space size from the previous 
absolute 
protection 
variants naturally 
run longer, 
hit by memory bit-flips 
distribute
between, 
running 
1 3  of  the benchmarks, 
met (the error counts with and without 
the same order of magnitude), 
a real advantage 
- note these are  among  the 
analyzed!  -the break-even 
absolute 
magnitude.  We  conclude 
be applied  to 
with a significant 
failure  numbers 
net resiliency 
from running slowly. 
protection 
are within 
but we do not readily 
gain 
For the remaining 
5 
longest-running 
was clearly 
outpaced 
among the 1 8  
and the 
orders of 
can 
that our protection 
mechanisms 
are reduced by several 
almost any long-running  embedded 
application 
improvement. 
D. Efficiency: 