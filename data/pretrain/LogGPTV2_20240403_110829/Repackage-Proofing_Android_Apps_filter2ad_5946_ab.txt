(X509Certificate)ctFty.generateCertificate(new
ByteArrayInputStream(sig));
//Get the public key
String pubKey = cert.getPublicKey().toString();
//Extract a substring from the public key
String keySub = pubKey.substring(1,4);
//Compare with substring of the original key
if (!keySub.equals("elc")) {
//Repackaging is detected.
SenderCommunicationChannel();
}
Fig. 2. A code snippet of a detection node.
etc., of the installed apps. We make use of PackageManager
to extract Kr from this ﬁle.
We construct detection nodes based on multiple predeﬁned
distinct “polymorphic” templates which implement the same de-
tection functionality but look different. For example, reﬂection
is used to call functions. The function names (getPublicKey
and generateCertificate, etc.) are generated in different
ways in different templates: a variety of substrings are produced
and concatenated to form function names, which are passed to
reﬂection methods to invoke the corresponding functions. This
way, attackers cannot identify the detection nodes by statically
searching function names. Moreover, different code obfuscation
techniques, such as instruction reordering, variable renaming,
dummy code injection, and opaque predicate insertion, are also
combined and applied to the detection nodes to make them
difﬁcult to reverse-engineer and improve their stealthiness [12],
[37], [32], [43], [38].
2) An Example: Figure 2 shows an example of the code
snippet
in a detection node with reﬂection calls omitted.
The detection node ﬁrst obtains a CertificateFactory
object with the speciﬁed type “X509” (Line 1). It
then
retrieves an X509Certificate object (Line 3). Next, it calls
getPublicKey to get the runtime public key pubKey (Line
5). Note that pubKey is extracted from packages.xml.
Then the detection node extracts a substring keySub from
pubKey (Line 7), and checks whether keySub equals to
the hard-coded substring of the original public key with the
same index range (Line 9). Sometimes, the two substrings are
applied on the same transformation function (e.g., transform
each one to a hash code, etc.), and then the equivalence of
the two resulting values are compared. Here, we denote the
substring of the original public key as K sub
. Different detection
nodes compare different substrings with varied lengths of the
public key. Comparing an individual character is insufﬁcient,
as different public keys may happen to have the same character
at a given index. Neither do we compare the entire public
key, since it is conspicuous to attackers (Ko is a long string).
Finally, if keySub is not equal with K sub
, the detection
node determines the app has been repackaged, and stealthily
transmits the detection result via a communication channel by
calling SenderCommunicationChannel (Line 11). How
to transmit the detection result will be presented in Section V.
o
o
B. Detection Node Injection
1) Candidate Methods: Once the detection nodes are
constructed, we next automatically inject them into the app. To
achieve it, we ﬁrst need to determine the candidate methods
552
Algorithm 1 Detection Node Injection
D: a random subset of the constructed detection nodes
G: the CFG of a candidate method
while D is not empty do
b ← SelectBlock(G) // randomly select a block from G
S ← FindDominators(b, G) // store dominators into S
Insert(d, S) // insert d into S
d ← deq(D)
n ← GetLineofCode(d) // get # of lines of code in d
m ← GetNumofBlocks(S) // get # of blocks in S
k ← RandomNum(1, min(n, m))
C ← SplitDetectionNode(k, d)
B ← SelectBlocks(k, S)
for each ci in C and each bi in B do
1: function DETECTIONNODESINJECTION(D, G)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
end for
14:
end while
15:
16: end function
Inject ci into bi
into which the detection nodes should be injected. We require
the candidate methods should not be hot methods, for example,
those keep running in the background. If a detection node
is injected into a hot method, it will be executed over and
again, incurring a high overhead. Instead, we consider relatively
cold methods which are invoked for a few times during an
execution of the app. There are a variety of methods satisfying
the condition, for example, those invoked at initialization, exit,
or phase transitions.
To assist selection of candidate methods, we proﬁle the
apps using Monkey [41] and Traceview [49]. Monkey is a
tool that can generate pseudo-random streams of keystrokes,
touches, and gestures, and Traceview a proﬁling tool that can
log the execution trace. We ﬁrst use Monkey to generate the
pseudo-random stream of 100,000 user events and feed these
events to the app. Simultaneously, we use Traceview to monitor
the app at runtime to log the execution trace. The log contains
the information about the invocation number of each method.
We consider the methods which are called more than 50,000
times as “hot”, and exclude them. The rest methods are used
as candidate methods.
2) Injection Algorithm: To inject a detection node, we do
not inject it as a whole; instead, we split it into several parts and
inject each part separately in order to achieve better stealthiness.
Algorithm 1 shows the pseudo-code for detection node
injection. Given the Control Flow Graph (CFG) of a candidate
method and a randomly selected subset D of the constructed de-
tection nodes, the function DetectionNodesInjection
inserts each detection node in D to G. The algorithm weaves
code of each detection node into the candidate method, so that
detection nodes are difﬁcult to locate and identify by attackers.
To inject a detection node, it ﬁrst randomly selects a basic
block b from G (Line 3). Then all the dominators of d are
found and are stored along with d into a set S (Line 4 and
5). In a CFG, a basic block a dominates a basic block b if
every path from the entry block to b must go through a [34].
Next d is split into k parts and stored in C, and k basic blocks
are selected from S and stored in B; k is a random integer
between 1 and min(n, m), where n is the number of lines of
code in d, and m the number of basic blocks in S (Line 7 to
11); note that d is mainly a straight-line code sequence except
for a few conditional basic blocks, each of which is considered
553
d1
d2
d3
8
d
detection 
node d
2
6
11
1
4
5
9
13
3
7
12
CFG of a 
candidate method
10
Fig. 3. An example of detection node injection.
as a single line. Finally, each part in C is sequentially inserted
into B (Line 12 and 13) following the dominance order of
these parts in the CFG.
The injection method guarantees that the execution order of
the instructions in each detection node remains after injection.
In addition, as we use different names for variables in different
detection methods, it does not cause problems even when parts
of multiple detection nodes are inserted into one basic block
of a candidate method.
Figure 3 shows, as an example, how to inject a detection
node into a candidate method. In the CFG of the candidate
method, we ﬁrst randomly select a basic block; assume it is node
11. Then we adopt the classic Lengauer-Tarjan algorithm [34],
an efﬁcient dominance algorithm, to ﬁnd all the dominators of
node 11: node 1, 4, 5, and 6. The ﬁve nodes (node 1, 4, 5, 6,
and 11) are stored in a set S, and the detection node d is split
into three parts: d1, d2, and d3. The number of the split parts
is a random integer not greater than the number of instructions
in d and the number of nodes in S. We then randomly select
three nodes from S; assume they are node 4, 5, and 11. Finally,
we inject d1, d2 and d3 into the three nodes, respectively.
IV. REPACKAGING RESPONSE
This section presents how to construct and inject response
nodes with design and implementation details.
A. Response Node Construction
1) Stealthy-modiﬁcation Mechanism: A few response strate-
gies for tamper-prooﬁng have been proposed [48], [13]. The
response is usually conspicuous in the form of, for example,
program crashes and inﬁnite loops, which are very unusual
behaviors. Such that attackers can quickly locate the injected
response, and then try to trace back to the response injection
code.
Instead of stopping apps from working, we propose to
inject responses in the form of delayed logical malfunctions:
(1) after a response is injected, it takes effect after some
delay; (2) the response is in the form of logical malfunctions,
so that when attackers notice it, little trace is left behind.
Combined with stochastic responses (Section IV-C), delayed
logical malfunctions make debugging and evasion attacks on
the attacker side much more difﬁcult.
We give some examples of responses in the form of delayed
logical malfunctions. In the OpenSudoku game, assume a
response has been injected, so that when a user selects a puzzle,
instead of rendering the selected puzzle, some other puzzle
is presented to the user. In this example, the response shows
itself as some logical bug. Alternatively, the response may turn
the app in some disorder, e.g., showing unrecognizable text,
rendering a huge button, or supplying a textbox too small to type
in. These effects accumulates very negative user experiences,
so that few benign users continue using the app. On the other
hand, the response is not evident in the beginning and it even
does not show itself until some delay after it is injected; thus,
when attackers decide to launch debugging, it is difﬁcult to
reproduce the problem and locate the response injection code.
To implement delayed logical malfunctions, we propose
stealthy-modiﬁcation methods, which stealthily modify particu-
lar features of an app so as to cause logical malfunctions. We
consider two types of stealthy-modiﬁcation methods. The ﬁrst
one is to modify integer variables; for example, modifying the
Intent value to disturb inter-activity communication, modifying
the attributes of Button, TextView, EditText objects, such as
the size, visibility, and inputType, modifying the operands in
arithmetic operations. The second type is to modify string
variables, for example, appending a random string to it.
The modiﬁcations may result in program crashes instead of
intended delayed logical malfunctions. For instance, modifying
the array index may lead to buffer overﬂow exceptions and
hence crashes. we can check against crashes, for example, by
avoiding overﬂows in the previous example, but we choose not
to do so in order to simplify the response nodes. Our goal is
to achieve the delayed logical malfunctions in most situations
rather than all.
2) Construction Process: To automatically construct the
response nodes, we search the app’s code to ﬁnd all of the
candidate variables which our stealthy-modiﬁcation methods
can apply to. We consider all class member variables (i.e.,
member ﬁelds) as candidate variables.
For each candidate variable, a stealthy-modiﬁcation method
is applied to constructing the response node. We then apply
code obfuscation techniques on the constructed response nodes
to make them difﬁcult to reverse-engineer.
3) An Example: The following is the code snippet of a
response node with respect to a candidate variable v.
1
2
3
4
5
6
//Infer repackaging detection result
bool flag = ReceiverCommunicationChannel();
//if flag is true, repackaging is detected.
if (flag) {
v += 3; //3 is a random number
}
As shown in this code snippet, the response node ﬁrst
monitors the communication channel to infer the detection
result (Line 2; how to infer the detection result is presented in
Section V). If repackaging is detected (Line 4), the response
node modiﬁes the candidate variable v by adding a random
number to it (Line 5).
One detail is that when applying modiﬁcations to member
variables of a class and inserting the corresponding response
node to another class, the modiﬁcations are subject to the scope
of the variables and availability of the assistant methods. For
example, the attribute declared in the Button class are all
Algorithm 2 Response Nodes Injection
G: a candidate method
1: function RESPONSENODESINJECTION(G)
α ← ReferencedCandidateVariables(G)
2:
for each αi in α do
3:
4:
5:
6:
7:
8: end function
λ ← FindJavaClass(αi)
site ← FindInjectionSite(αi, λ)
Injection(αi, site)
end for
9: function INJECTION(γ, Γ)
10:
11:
12:
13: end function
(name, type) ← FindNameType(γ)
r ← ConstructResponseNode(name, type)
RandomInject(r, Γ)
member variables; they can only be modiﬁed through set*
methods when methods of other classes are to modify them.
B. Response Node Injection
To automatically inject the response nodes, we ﬁrst deter-
mine where to inject them. Again, we use relative cold methods
as candidate methods (Section III-B1). Note that each response
node is quite small and simple; thus, unlike injection detection
nodes, we inject a response node as a whole rather than splitting
it into multiple parts.
Algorithm 2 shows the pseudo-code for injecting the
response nodes. Given a candidate method G, the function
ﬁrst ﬁnds candidate variables referenced by the method (line
2). Then for each candidate variable αi, it determines a proper
injection site (line 5). In order to cause a delay between the
response injection site and the point where a response is evident,
we deﬁne a method that does not reference the candidate
variable as its proper injection site; such that, after a member
variable is assigned with some problematic value by a response
node, the variable is not used until the method containing this
response node returns and another method references it. In
this way, it creates extra difﬁculty for attackers to locate the
response node when the malfunction is evident. If there exist
multiple proper injection sites, a random one is selected. Then
the response node is constructed and injected to the selected
injection site (line 6).
C. Stochastic Responses
To improve the resilience to evasion attacks, we integrate