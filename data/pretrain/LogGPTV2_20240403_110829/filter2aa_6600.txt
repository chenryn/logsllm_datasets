# 代码段
## 概述

在动态链接器创建了进程镜像并完成重定位后，每个共享目标文件都有机会执行一些初始化代码。所有共享目标文件的初始化会在可执行文件获取控制权之前完成。在调用某个目标文件 A 的初始化代码前，必须先调用其所有依赖的目标文件的初始化代码。例如，如果目标文件 A 依赖于 B，则 B 必须在 A 之前被初始化。这种依赖关系记录在动态结构中的 DT_NEEDED 条目中。循环依赖的处理是未定义的。

递归地处理每个依赖项来完成目标文件的初始化。只有当一个目标文件的所有依赖项都已初始化完毕后，该目标文件才会执行其初始化代码。以下示例展示了两种可能的初始化顺序。在这个例子中，`a.out` 依赖于 `b`, `d` 和 `e`；`b` 依赖于 `d` 和 `f`；而 `d` 依赖于 `e` 和 `g`。根据这些信息，可以绘制出如下依赖图，并按此图确定初始化顺序。

类似地，共享目标文件也具有终止函数，这些函数通过 atexit 机制在进程终止时执行。动态链接器以与初始化相反的顺序调用这些终止函数，并确保每个函数最多只被执行一次。

共享目标文件使用动态结构中的 DT_INIT 和 DT_FINI 条目指定其初始化和终止函数。通常，这些函数位于 `.init` 节和 `.fini` 节中。

**注意：**
尽管 atexit 终止处理函数通常会被执行，但在程序异常终止（如调用 `_exit` 函数或因信号导致的进程终止）时，它们可能不会被调用。此外，动态链接器不负责调用可执行文件的 `.init` 节或通过 atexit 注册可执行文件的 `.fini` 节。用户注册的 atexit 函数应在所有共享目标文件的终止函数之前执行。

## .init & .init_array

`.init` 节包含可执行指令，作为进程初始化的一部分。系统在调用主程序入口点（通常是 C 语言的 `main` 函数）之前执行这些代码。

## .text

`.text` 节包含程序的可执行指令。

## .fini & .fini_array

`.fini` 节包含可执行指令，作为进程终止的一部分。当程序正常退出时，系统会执行这些代码。