### 优化后的文本

#### 2. 约束条件
- `InputUrl.startsWith("https://") == false`
- `InputUrl.startsWith("file://") == false`
- `InputUrl.startsWith("content://") == false`
- `InputUrl.startsWith("mx") == false`
- `InputUrl.contains("app_name") == true`
- `flag == 1` （此约束无法满足）
- `InputUrl.contains("%IMEI%") == true`

所有约束都可以满足，除了第 (7) 条。通过解决事件处理器依赖问题，可以生成以下事件处理顺序：`onPageFinished() → shouldOverrideUrlLoading()`。然而，由于触发约束（第五章-A节），我们发现 `onPageFinished()` 在 `shouldOverrideUrlLoading()` 之后执行。因此，为了生成所需的执行顺序，需要刷新网页。

1. 假设用户的手机支持FTP，以下是引导 `shouldOverrideUrlLoading()` 执行敏感API `getDeviceId()` 的代码示例：

```java
// 代码示例
```

#### D. 性能与准确性
EOEDroid 的性能和准确性可能受到符号执行实现的影响，其中使用了多种启发式方法来缓解路径爆炸问题。虽然这些启发式方法可能导致分析结果的过度近似或不准确，但它们有助于我们在性能和准确性之间取得良好的平衡。本节中，我们将详细介绍评估细节，并展示当前系统的性能和准确性是可接受的。

对于每个应用，EOEDroid 的平均成功分析时间为4.2分钟，其中包括3.4分钟的事件处理器分析时间。考虑到我们的工具是为离线分析设计的，这样的开销是可以接受的。

我们使用假阳性（FP）和假阴性（FN）来衡量 EOEDroid 的准确性。假阳性是指将非脆弱的事件处理器标记为脆弱，而假阴性是指将脆弱的事件处理器识别为非脆弱。

**假阳性**：我们手动分析了所有被 EOEDroid 标记为脆弱的事件处理器，并运行了生成的漏洞利用代码。最终，我们发现所有漏洞都被成功触发，这表明 EOEDroid 的假阳性率较低。

**假阴性**：我们从被 EOEDroid 标记为非脆弱的混合应用中随机选择了200个应用。通过仔细手动检查它们的事件处理器，我们发现除两个应用外，所有应用都是非脆弱的。进一步研究表明，这两个应用的主要原因是SMT求解器无法解决包含多个正则表达式和字符串分割操作的路径约束。尽管如此，EOEDroid 的假阴性率仍然很低。

#### VII. EOE 对策讨论
防止 EOE 的关键在于，应用程序应仅允许可信的 Web 代码访问事件处理器中的关键功能。为此，应用程序首先应在所有通信中完全使用 HTTPS，以有效减少攻击面。其次，在通过事件处理器调用关键功能时，应仔细检查 Web 代码的框架级别和来源信息。

最新版本的 Android 提供了一个新设置，仅允许通过 HTTPS 下载的 Web 代码访问 `shouldOverrideUrlLoading()`，并且在事件处理器的参数中包含更多信息，如 Web 代码的框架级别和来源信息。因此，我们强烈建议开发者将其应用迁移到新版本，并在开发过程中利用这些安全信息。

#### VIII. 相关工作
**WebView 攻击**：近年来，研究人员对由事件处理器引起的安全问题给予了极大关注。Luo 等人 [26] 讨论了恶意软件可能利用事件处理器劫持和嗅探 Web 事件。然而，与 EOE 相比，这种类型的攻击更难实施，因为攻击者必须控制用户设备中的原生代码，例如在 WebView 中注册自己的原生事件处理器。Chen 等人 [13] 和 Mutchler 等人 [27] 发现事件处理器功能可能导致敏感数据泄露（如认证 URL）。Georgiev 等人 [19] 和 Tuncay 等人 [35] 讨论了攻击者可能利用事件处理器功能访问原生代码的可能性。

相比之下，我们系统地研究了所有可行的基于 Web 事件的攻击类型，包括利用单个 Web 事件和组合多个 Web 事件来影响程序状态的攻击。

与现有的 WebView 攻击相比，EOE 更具可行性和实用性。Chin 等人 [14] 分析了导致过多授权和基于文件的跨区域脚本攻击的 WebView 漏洞。Wu 等人 [40] 讨论了由于 `file://` 和 `content://` 方案在 WebView 中导致的文件泄露问题。然而，这两种攻击在新版 Android 中得到了更好的保护，限制了直接访问本地文件的能力。

Bhavani 等人 [10] 也研究了 WebView 中跨站脚本攻击的可能性。Neugschwandtner 等人 [28] 描述了数据泄露场景，并展示了通过 WebView 进行 JavaScript 注入攻击的几个现实案例。Jin 等人 [24] 系统地调查了混合应用中 JavaScript 代码注入的后果，并展示了由于经典的 Web 攻击向量而导致的数据泄露的普遍性。Wei 等人 [38] 介绍了攻击者如何利用现有漏洞（如 CVE-2012-6636 [2] 和 CVE-2013-4710 [3]）在 WebView 中调用任意 Java 函数的攻击场景。Rastogi 等人 [30] 演示了基于应用-Web 桥接的隐藏攻击。然而，上述所有攻击都需要启用 JavaScript 和 JavaScript-Bridge，而 EOE 并没有这样的要求。

Wang 等人 [36] 系统地研究了 Intent 滥用问题，并展示了其严重后果。然而，这种攻击需要预先安装启用了 WebView 的恶意软件，而 EOE 并不需要。

Yang 等人 [41] 和 Hassanshahi 等人 [22] 研究了基于应用-Web 桥接的攻击，并提出了检测解决方案以审查混合应用。然而，他们要么不支持事件处理器功能，要么专注于从特定的 URL 导航事件（即 "intent://..."）发起的攻击。相比之下，EOEDroid 是通用的。

**WebView 防御**：一些防御方法，如 NoFrak [19]、MobileIFC [33] 和 Draco [35]，被提出用于扩展 SOP 到本地资源，或在原生层提供对事件处理器的访问控制。然而，现有的方法在防止 EOE 攻击方面存在困难。首先，Draco 需要 root 权限来替换 WebView 的内部原生库，而 MobileIFC 和 NoFrak 也需要重新编译带有自定义混合框架的混合应用。其次，它们通过插桩 WebView 或第三方混合框架来实现。因此，它们可能需要在移植到最新版本时进行额外的工作。第三，防御级别完全取决于开发者编写的安全策略的质量。最后，它们基于 Web 框架的来源信息进行访问控制，因此很难限制嵌入式内联 JavaScript 代码的访问。

其他防御方法，如 WIREframe [17] 和 HybridGuard [29]，提供了在 WebView 中的策略强制执行以保护应用-Web 桥接。然而，它们只关注 JavaScript 代码而忽略了 HTML 代码。因此，EOE 仍然可以通过纯 HTML 代码绕过这些防御。

**符号执行**：近年来，符号执行取得了重大进展。几种静态方法（如 Intellicode [39] 和 TriggerScope [18]）被提出用于使用符号执行审查 Android 应用。然而，这些静态方法在本文所面临的上下文中可能会产生较高的假阳性和假阴性。首先，静态分析必须解决指针和别名问题。其次，由于缺乏真实数据，解决 Java 反射和 Intent 很具挑战性。最后，难以处理数组索引类型的隐式流。在实际应用中，这种隐式流在流行的应用和广告库（如 Google Ads）中频繁使用。

许多基于符号执行的动态方法也被实现。例如，DART [20] 和 CUTE [31] 使用混杂执行自动测试软件。EXE [12] 和 KLEE [11] 使用符号执行查找错误。IntScope [37] 使用符号执行检测整数溢出问题。SAGE [21] 为 Windows 设计，使用符号执行审查操作系统。S2E [15] 提出了选择性符号执行以提高性能。Driller [34] 使用选择性符号执行指导模糊测试，结果表明这种组合非常有效。现有的动态方法可能具有较低的假阳性。然而，生成触发已发现漏洞所需的事件序列对他们来说是一个挑战。

一些基于符号执行的方法也被设计用于处理隐式流。例如，DTA++ [25] 使用符号执行解决控制流问题（即隐式流），而 Spandex [16] 在 Android 中实现了符号执行以审查应用的密码使用情况。然而，这两个系统在处理 Android 特定规范（如 Android Intent）和数组索引类型的隐式流方面存在不足。

#### IX. 系统局限性与未来工作
EOEDroid 并不完美。首先，目前我们简单地使用 Monkey 触发 WebView。探索所有可能的 UI 组件是一个难题，尽管它与本研究正交。其次，在 EOEDroid 中，我们并未解决所有隐式流问题，而是仅关注数组索引类型的操作，这些操作在事件处理器中频繁使用。最后，我们并未处理所有 Android 原生代码，而是仅建模重要的原生代码，如 `system.arraycopy()`。在未来的工作中，我们计划探索这些方向的解决方案，以改进 EOEDroid。

#### X. 结论
本文全面研究了所有 Web 事件、原生事件处理器及其触发约束。基于我们的发现，我们提出了 EOEDroid，这是一个能够通过生成漏洞利用代码自动检测和验证 EOE 漏洞的新系统。我们使用大量应用对 EOEDroid 进行了评估，并发现了几个关键漏洞。

#### 致谢
感谢所有匿名评审者和我们的牧羊人 Adam Doupé 提出的宝贵意见和建议。本材料部分基于美国国家科学基金会（NSF）的资助，项目编号 1314823 和 1700544。文中的观点、发现和结论或建议仅代表作者的观点，并不一定反映 NSF 的观点。

#### 参考文献
[略]

希望优化后的文本更加清晰、连贯和专业。如果有任何进一步的修改需求，请随时告诉我。