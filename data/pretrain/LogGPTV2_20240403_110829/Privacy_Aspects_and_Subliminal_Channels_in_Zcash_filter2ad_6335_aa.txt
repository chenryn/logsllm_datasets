title:Privacy Aspects and Subliminal Channels in Zcash
author:Alex Biryukov and
Daniel Feher and
Giuseppe Vitto
Privacy Aspects and Subliminal Channels in Zcash∗
Alex Biryukov
University of Luxembourg
PI:EMAIL
Daniel Feher
University of Luxembourg
PI:EMAIL
Giuseppe Vitto
University of Luxembourg
PI:EMAIL
ABSTRACT
In this paper we analyze two privacy and security issues for the
privacy-oriented cryptocurrency Zcash. First we study shielded
transactions and show ways to fingerprint user transactions, in-
cluding active attacks. We introduce two new attacks which we call
Danaan-gift attack and Dust attack. Following the recent Sapling
update of Zcash protocol we study the interaction between the new
and the old zk-SNARK protocols and the effects of their interaction
on transaction privacy. In the second part of the paper we check for
the presence of subliminal channels in the zk-SNARK protocol and
in Pedersen Commitments. We show presence of efficient 70-bit
channels which could be used for tagging of shielded transactions
which would allow the attacker (malicious transaction verifier)
to link transactions issued by a maliciously modified zk-SNARK
prover, while would be indistinguishable from regular transactions
for the honest verifier/user. We discuss countermeasures against
both of these privacy issues.
CCS CONCEPTS
• Security and privacy→ Distributed systems security; Privacy-
preserving protocols; Cryptanalysis and other attacks; • General
and reference → Empirical studies.
KEYWORDS
privacy, blockchain, Zcash, zk-SNARK, NIZK, subliminal channel
ACM Reference Format:
Alex Biryukov, Daniel Feher, and Giuseppe Vitto. 2019. Privacy Aspects
and Subliminal Channels in Zcash. In 2019 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’19), November 11–15, 2019,
London, United Kingdom. ACM, New York, NY, USA, 17 pages. https://doi.
org/10.1145/3319535.3345663
1 INTRODUCTION
Cash-like privacy is one of the key properties to be implemented in
modern blockchain-based cryptocurrencies. Bitcoin [16], with its
pseudonymous transactions, while initially believed to offer pay-
ment privacy, was shown to suffer from transaction graph analysis
and linkability issues [12, 21], mainly due to the public nature of
∗This work was supported by the Luxembourg National Research Fund (FNR) project
FinCrypt (C17/IS/11684537).
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3345663
its ledger. Aiming at addressing this aspect, there has been a rise of
privacy-preserving cryptocurrencies such as Dash [1], Monero [2],
Zcash [3]. Each of these is using different privacy enhancing tech-
nologies. The simplest one is used by the blockchain Dash, which
uses so-called masternodes with built-in mixers to provide privacy.
Monero’s ring signatures provide another form of transaction mix-
ing, which does not require central nodes, while also hiding the
values of transactions. These ring signatures are a cryptographic
primitive which provides a valid signature for a group of n users
where only one user has to use his/her secret key together with the
public keys of the other members. Externally it is impossible to tell
which group member signed the message. For transactions, that
means that multiple outputs can be spent at the same time without
the ability to distinguish which signer used a secret key and which
ones the public keys.
The last technology that is in use for privacy preserving block-
chains are zk-SNARKs, which stands for Zero-Knowledge Succinct
Non-interactive ARguments of Knowledge. This technology offers
provable security, and requires a Common Reference String (CRS),
which is the central trusted piece of data. In the case of Zcash
blockchain the CRS was generated once at the launch of the chain,
in a distributed multi-party computation (MPC) with trusted peers.
Zcash launched on 28 October, 2016 as the first commercial release
of zk-SNARKs. Zcash itself is based on Bitcoin style UTXO (unspent
transaction output) system of tracking coins. It has a public and
a private portion. The public part works exactly the same way as
in Bitcoin. The private part uses zk-SNARKs and transactions that
use zk-SNARKs are called shielded transactions. The two parts are
in constant interaction with each other, which introduces some
exploitable privacy leakage. One of the problems with zk-SNARK
technology was that, in the first version, the creation of a proof
took 40 seconds and 1.5GB of memory, so for usability reasons this
blockchain kept transparent Bitcoin-style transactions as default.
In October 2018 Zcash has added a new and much faster zk-SNARK
protocol called Sapling in which a proof takes 3 seconds and requires
40MB of memory.
In this paper we describe attacks against privacy in the cur-
rent Zcash protocol. First we show how past linkability techniques
([9, 20]) could be improved based on value matching and value
fingerprinting. Then we introduce two new active attacks on user
privacy. Both of these attacks require the knowledge of the target’s
hidden address. In the first approach, which we called the Danaan-
gift attack, the adversary is donating small tainted amounts of
Zcash to the target’s shielded address in hope that the tainted value
would remain when the value would be de-shielded. This attack is
helped by the fact that Zcash transaction values (like Bitcoin) can
be fractioned to a very high precision, so that the last four digits
of a Zcash value have no economic significance but could be used
as a fingerprint. The second attack is called the Dust attack, and is
based on the observation that in a shielded transaction the number
Session 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom1813of inputs and outputs is visible in the new Sapling release of Zcash.
The attacker can send a large set of micropayments to the target
shielded address which would allow to track one extra payment
hop involving this address inside the shielded transactions pool.
Both of these attacks require transfer of small amount of coins to
the target’s hidden address. We discuss several countermeasures
against such attacks.
The second category of tagging attacks that we explore in this
paper is based on subliminal channels [26, 27, 30]. With a subliminal
channel an attacker can reveal b bits of arbitrary information out of
a cryptosystem, using system parameters that were not originally
designed to exchange such information. This means that subliminal
channels, if they exist, become a hidden part inside the cryptosys-
tem and if the attacker controls the affected parameters, he can
freely decide whether to send a secret message or not. Such hidden
communication can be used to reveal secret keys or user IDs. Even
worse, to maintain confidentiality of the subliminal channel, the
attacker can easily use encryption to permit only some receivers
that know a pre-shared secret to retrieve the plaintext message,
while the others cannot even detect that any message was sent.
While subliminal channels can be present in many cryptosystems,
we believe that in privacy-focused setting it is very important to be
aware of their existence and properties due to severe consequences
for the user privacy and fungibility (for cryptocurrencies).
In Zcash we discovered three different subliminal channels, that
can be used depending on what cryptosystem the attacker is able
to attack: the Inner and the Outer Subliminal Channels can be used
assuming that the zk-SNARK proof generation mechanism (but
not the secret master key!) is under the control of the attacker,
while the Pedersen Subliminal Channel requires the control of the
randomness source in the commitment scheme adopted to hide
values of shielded inputs and outputs. Such subliminal channels
can be exploited, for example, by closed-source lightweight wallets
which are used on mobile devices. Another possible attack points
are computation servers (or hardware devices) which are used for
zero-knowledge proof generation.
Alongside the descriptions of these subliminal channels, we
provide an example of how an attacker can exploit them to permit
external entities, that we will refer to as “Subliminal Verifiers”,
to distinguish transactions created by the same user and to de-
commit/reveal all shielded transaction amounts. We then discuss
countermeasures to prevent the exchange of subliminal messages,
or alternatively methods to disrupt their contents.
1.1 Related Work
There has been constant research on privacy of blockchains since
the introduction of Bitcoin, which can be split into two main cat-
egories. The first category is protocols that try to improve the
cryptocurrency privacy. These works consider direct extensions of
Bitcoin with mixing services as in [6, 7, 11, 24, 28]. Other works
used new protocols, like ring signatures adopted in the Monero
blockchain [17, 29], also for mixing purposes. Yet other works in-
troduced new protocols that used zero-knowledge proofs, such as
[14, 25], and Zcash is based on these papers as well.
The second category studied privacy in existing blockchains
trying to find new attacks and privacy issues. Such works on Bitcoin
include [4, 5, 13, 22, 23]. There have also been works on the Monero
blockchain, such as [10, 15, 31], which show the drawback of using
mixing-style privacy.
Relevant for this paper, there has also been previous work on
denanonymizing or linking transactions in Zcash. The first such
work was by Quesnelle [20], where the direct information leakage
of public values in a shielded transactions was first exposed. That
work connected hiding and revealing transactions, where the two
values were identical, and the number of blocks between the hide-
reveal transactions was short. This approach was later examined
in more detail and extended with other clustering techniques in
[9], where they showed that most of the mining related shielded
transactions can be linked, while also providing anonymity analysis
for some shielded transactions connected to the hacker collective
"The Shadow Brokers".
In this paper we further investigate linkage of hiding and reveal-
ing transactions based on their specific values which we call value
fingerprints, and also show active attacks against user’s privacy,
first based on empirical measurements, then based on completely
different ideas, using the cryptographic subliminal channels in the
zk-SNARK protocol. Finally, it is important to note, that all the
work done in this paper was done in an ethical way, never targeting
or storing linkage data of individual users. For the confirmation of
active attacks we did it on our own transactions.
2 INTRODUCTION TO ZCASH
Zcash is a privacy preserving blockchain based on Zerocash [25],
using practical zero-knowledge proofs called zk-SNARKs. Zcash
has a public open part, which exactly mimics Bitcoin’s ledger based
on unspent transaction outputs (UTXO), while it has a parallel
hidden part. Transactions that use zero-knowledge proofs are called
shielded transactions. The public key of a public address starts with
the letter "t", while a shielded address starts with "z". Transactions
between public and shielded addresses are possible, but the amount
of hidden or revealed coins from or to the public addresses becomes
public. In the rest of the paper we refer to a shielded transaction as
a hiding transaction if it moves coins from a public to a shielded
address, and to one that moves coins from a shielded to a public
address as a revealing transaction. The exact amounts are referred
to as hiding and revealing values.
Zcash was launched on 28 October, 2016 with the release called
Sprout. This version’s zk-SNARK proof mechanism took 40 seconds
and required 1.5GB of memory. In the rest of the paper we will
refer to these shielded transaction as Sprout transactions. On 29
October, 2018 the first major update to Zcash’s proof system called
"Sapling" was deployed. This update reduced the time to create a zk-
SNARK to 3 seconds, while the memory requirement was reduced
to 40MB. In the rest of the paper we will refer to these shielded
transactions as Sapling transactions. Sprout and Sapling addresses
and transactions use completely different elliptic curves and proof
protocols, which makes them incompatible with each other. This
also means that they are easy to distinguish while looking at the
Zcash blockchain. Interaction between Sprout, Sapling and trans-
parent transaction pools is shown in Figure 1. Our studies for this
paper were performed at Zcash blockchain block height 472,285
which corresponds to 29 January, 2019.
Session 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom18142.1 Technical Details
Coins in Zcash are referred to as ZEC, while the smallest possible
value is called Zatoshi, where 1 ZEC = 108 Zatoshi1. Zcash uses a
UTXO based ledger both in its public and shielded setting. In order
to create a new output with a specific value, one must consume
previously unspent outputs, where the value sum of these has to
be larger or equal to the value sum of the desired new outputs.
The only transaction that can create new value without having
to consume a previously unspent output is the so called coinbase
transaction, which is always the first transaction in a block. Its base
value is fixed in the protocol of the blockchain, and the miner of
the block can add extra value equal to the sum of fees from all the
other transactions in the block. In a general transaction if the sum
of the values from the consumed outputs is larger than the new
outputs, the difference can be claimed in the coinbase transaction
by the miner as the transaction fee. In the rest of the paper we will
refer to the consumed or spent outputs as inputs of a transactions,
while to the newly created unspent outputs simply as the outputs
of a transaction. Every output is connected to a public key which
is also called an address. The output can be only spent with the
corresponding private key of the address.
When a new coin is created and rewarded to a Zcash miner, the
miner can only claim the coin by transferring it to a shielded address
first. This is an attempt from the Zcash developers to have every
coin shielded at least once. However most of the miners/mining
pools quickly move their coins back to transparent addresses. Thus
majority of the hiding and revealing transactions are of this origin.
Sprout based shielded transactions use a mechanism called join-
split, which combines two previously unspent shielded outputs and
creates two new shielded unspent outputs, while also being able
to hide or reveal a clearly noted amount of ZEC. The limitation of
this protocol apart from its efficiency is the fact that even if a user
wants to send only 1 shielded output to another address, a dummy
input and a dummy output still needs to be created to fill out the
rest of the input and outputs of a joinsplit. Similarly, if a user wants
to spend three unspent outputs, he will have to use two joinsplits
in the same transaction.
In the rest of the paper we will refer to public transactions that
do not involve any zk-SNARKs as t-to-t transactions and will refer
to purely shielded transaction as z-to-z transactions. Furthermore,
if a transaction is hiding coins, i.e. it is transferring coins from a
public to a shielded address, we refer to it as a t-to-z transaction,
and similarly to a revealing transaction as z-to-t.
2.2 Introduction of Sapling Shielded
Transactions
At block height 419,200 (29 October, 2018) the Sapling hard fork
of Zcash took place, which introduced a new elliptic curve and zk-
SNARK protocol. It is a major improvement in terms of efficiency.
On the other hand, as the new zk-SNARK protocol uses a new
curve, it is not backwards compatible, meaning that if a user wants
to send coins from a Sprout to a Sapling address, it has to reveal
the value in-between, which is currently only possible with the
involvement of public addresses, see Figure 1. This means that
1At the moment of this writing 1 ZEC is about 70 USD.
Transparent Addresses
t-to-t
z-to-z
z-to-t
t-to-z
z-to-z
t-to-z
z-to-t
Sprout Addresses
Sapling Addresses
Figure 1: Sapling Turnstile
transactions between Sprout and Sapling addresses are visible, as
they have to use an in-between t-address.
Sapling shielded transactions have also abandoned the joinsplit
structure of the zk-SNARKs and they reveal exactly how many
shielded inputs and outputs (these inputs and outputs are sometimes
referred to as shielded notes as well) they have as a side-channel
information. The developers did consider including mandatory
dummy inputs and outputs, but they decided against it in order to
reduce the average transaction size. Figure 3 explains the Sapling
transaction layout.
We have checked how many values were directly linkable by
already known techniques from [9, 20] (Heuristic 1), and out of the
241 outputs we have only found 4 of them that were uniquely link-
able (exact and unique value matched some earlier unique Sprout
input), meaning most of the users were aware of this attack and/or