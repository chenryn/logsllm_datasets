# Opportunity for Library Fuzzing

API functions can significantly influence the exploration of library code and the discovery of potential bugs by altering internal states. 

## 4.3 Discovered Vulnerabilities

We added two projects from GitHub, `cJSON` [5] and `mpc` [7], to discover unknown bugs using AFL and FuzzBuilder. Projects in OSS-Fuzz have already been extensively fuzzed, so we chose other projects to discover new bugs under limited resources. This also serves as an example to show that testers can easily apply fuzzing to library projects using FuzzBuilder without deep knowledge of the libraries. The project names and commits are listed in Table 11.

### Line Coverage Comparison

Figures 7 and 8 illustrate the line coverage comparison between FuzzBuilder and OSS-Fuzz over different time ranges. The results highlight FuzzBuilder's effectiveness in achieving higher coverage.

### General Process of Greybox Fuzzing

Figure 9 outlines the general process of greybox fuzzing, which includes input generation, target program execution, seed updates, and execution analysis.

### Notable Bug Discoveries

One particularly impressive finding was a heap buffer overflow in `expat`. This bug eluded OSS-Fuzz despite its extensive resource usage. FuzzBuilder successfully generated an executable that included a function sequence leading to the state where the bug could be exposed. Other discovered bugs, such as NULL dereference and stack buffer overflow, were significant because they were challenging to find with traditional greybox fuzzing techniques. A summary of the found bugs is provided in Table 12.

## 5 Related Works

### 5.1 Greybox Fuzzing

Greybox fuzzing is a dynamic testing technique that identifies bugs in programs using arbitrary input values. It leverages lightweight program analysis to generate inputs efficiently, exploring various program paths. The process involves generating inputs based on seeds, analyzing execution information (e.g., basic block coverage), and updating seeds if new coverage is achieved. High code coverage is often difficult to achieve if the input structure is complex, making seed selection and optimization crucial.

Several research efforts have focused on improving input generation and seed management, including Angora [14], VUzzer [24], lafintel [9], steelix [22], eclipser [15], TIFF [19], and memfuzz [16]. Hybrid approaches combining fuzzing and symbolic execution [30, 34] have also been proposed. However, providing effective seeds remains essential for achieving sufficient code coverage without excessive runtime resources.

### 5.2 OSS-Fuzz

OSS-Fuzz is a fuzzing service framework managed by Google, designed to share open-source projects with successful fuzzing experiences, such as those from Chrome components. As of now, OSS-Fuzz has tested over 100 open-source projects and discovered more than 10,000 bugs.

To register a project with OSS-Fuzz, developers must write fuzzing code, which is then distributed to the Clusterfuzz environment for execution. While Libfuzzer, a greybox fuzzer for libraries, simplifies this process, it still requires in-depth knowledge of the target project, making it challenging for many users.

## 6 Discussion

### Automated Specification of FA

In this study, FA (Fuzzing Artifacts) was chosen manually, requiring user intervention. Future work will focus on automating this process for a fully automated fuzzing experience.

### Optimization of Generated Executable

FuzzBuilder eliminates unnecessary test functions when generating executables from unit tests. However, many instructions unrelated to fuzzing remain, slowing down execution speed. Future improvements will aim to transform unit tests into more efficient executables.

### Errors in Unit Tests

Unit test functions may include instructions that force program termination, such as `assert` and `abort`, which can lead to false alarms during fuzzing. These issues need to be addressed to fully leverage the benefits of greybox fuzzing.

### Expansion of Input Value Types

FuzzBuilder currently considers input parameters as `char` pointers, which is suitable for many parsing functions. However, supporting additional data types, such as C++ strings or user-defined types, would enhance the ability to explore various library paths.

## 7 Conclusion

This study introduces a method for applying greybox fuzzing to libraries, implemented as FuzzBuilder, a tool based on the LLVM framework. FuzzBuilder-generated executables can be used with other fuzzers like AFL, eliminating the need for manual source code writing and maintenance. This method enables testers to perform greybox fuzzing without deep knowledge of the target program and helps in generating efficient seeds for fuzzing. Thus, FuzzBuilder enhances software security by facilitating the application of greybox fuzzing to various types of programs.

## Acknowledgments

This work was supported by the National Research Foundation of Korea (No. 2017K1A3A1A17092614).

## References

[References are listed as provided, with no changes needed.]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.