title:HelDroid: Dissecting and Detecting Mobile Ransomware
author:Nicol&apos;o Andronio and
Stefano Zanero and
Federico Maggi
HELDROID: Dissecting and Detecting Mobile
Ransomware
Nicol´o Andronio, Stefano Zanero, and Federico Maggi(B)
DEIB, Politecnico di Milano, Milano, Italy
PI:EMAIL,
{stefano.zanero,federico.maggi}@polimi.it
Abstract. In ransomware attacks, the actual target is the human, as
opposed to the classic attacks that abuse the infected devices (e.g., botnet
renting, information stealing). Mobile devices are by no means immune
to ransomware attacks. However, there is little research work on this mat-
ter and only traditional protections are available. Even state-of-the-art
mobile malware detection approaches are ineﬀective against ransomware
apps because of the subtle attack scheme. As a consequence, the ample
attack surface formed by the billion mobile devices is left unprotected.
First, in this work we summarize the results of our analysis of the exist-
ing mobile ransomware families, describing their common characteristics.
Second, we present HelDroid, a fast, eﬃcient and fully automated app-
roach that recognizes known and unknown scareware and ransomware
samples from goodware. Our approach is based on detecting the “build-
ing blocks” that are typically needed to implement a mobile ransomware
application. Speciﬁcally, HelDroid detects, in a generic way, if an app
is attempting to lock or encrypt the device without the user’s consent,
and if ransom requests are displayed on the screen. Our technique works
without requiring that a sample of a certain family is available before-
hand.
We implemented HelDroid and tested it on real-world Android ran-
somware samples. On a large dataset comprising hundreds of thousands
of APKs including goodware, malware, scareware, and ransomware, Hel-
Droid exhibited nearly zero false positives and the capability of recog-
nizing unknown ransomware samples.
1 Introduction
Theorized back in 1996 [1], ransomware attacks have now become a reality.
A typical ransomware encrypts the ﬁles on the victim’s device and asks for a
ransom to release them. The miscreants implement various extortion tactics (as
explained in Sect. 2), which are both simple and extremely eﬀective. In the “best”
case, the device is locked but data is actually left in place in untouched; in the
worst case, personal data is eﬀectively encrypted. Therefore, even if the malware
is somehow removed, in absence of a fresh backup, the victims have no other
choice than paying the requested ransom to (hope to) regain access to their data.
McAfee Labs [2] and the FBI [3] recently concluded that the ransomware trend
c(cid:2) Springer International Publishing Switzerland 2015
H. Bos et al. (Eds.): RAID 2015, LNCS 9404, pp. 382–404, 2015.
DOI: 10.1007/978-3-319-26362-5 18
HELDROID: Dissecting and Detecting Mobile Ransomware
383
is on the rise and will be among the top 5 most dangerous threats in the near
future.
In parallel, mobile malware is expanding quickly and steadily: McAfee Labs
recently reported a 100 % growth in Q42014 since Q42013 [2, p.28], VirusTotal
receives hundred of thousands of Android samples every week1, making them the
fourth most submitted ﬁle type. Unfortunately, mobile devices are not immune
by ransomware. A remarkable wave infected over 900,000 mobile devices in a
single month alone [4]. Moreover, Kaspersky Labs [5] tracked a another notable
mobile campaign, revealing a well-structured distribution network with more
than 90 hosts serving the malicious APKs, more than 400 URLs serving the
exploits, one controller host, and two traﬃc-driving networks. Alarmingly, the
cyber criminals are one step ahead of the defenders, already targeting mobile
users. Given the wide attack surface oﬀered by mobile devices along with the
massive amount of sensitive data that users store on them (e.g., pictures, digital
wallets, contacts), we call for the need of mobile-speciﬁc ransomware counter-
measures. Our goal in this paper is to make a ﬁrst step in this direction.
Current Solutions. To the best of our knowledge, current mitigations are com-
mercial cleanup utilities implementing a classic signature-based approach. For
example, SurfRight’s HitmanPro.Kickstart [6] is a bootable USB image that uses
a live-forensics approach to look for artifacts of known ransomware. Other tools
such as Avast’s Ransomware Removal [7] (for Android) release the ransomed ﬁles
by exploiting the na¨ıve design of certain families (i.e., SimpLocker) to recover
the encryption key, which fortunately is not generated on a per-infection basis.
The research community knows very well that such approaches lack of generality.
Also, they are evidently limited to known samples, easy to evade, and ineﬀective
against new variants. From the users’ perspective, signature-based approaches
must be constantly updated with new deﬁnitions, and are rarely eﬀective early.
Research Gap. To our knowledge, no research so far have tackled this emerg-
ing threat. Even state-of-the-art research approaches (e.g., [8]), which demon-
strated nearly-perfect detection and precision on non-ransomware Android
malware, recognized only 48.47 % of our ransomware dataset (see Sect. 8). The
reason is because ransomware schemes are essentially mimicry attacks, where the
overall maliciousness is visible only as a combination of legitimate actions. For
instance, ﬁle encryption or screen locking alone are benign, while the combina-
tion of unsolicited encryption and screen locking is certainly malicious. Thus, it
is not surprising that generic malware-detection approaches exhibit a low recall.
Proposed Approach. After manually analyzing a number of samples of
Android ransomware variants from all the existing families, our key insight is
to recognize speciﬁc, distinctive features of the ransomware tactics with respect
to all other malware families — and, obviously, to goodware. Speciﬁcally, our
1 https://www.virustotal.com/en/statistics/.
384
N. Andronio et al.
approach is to determine whether a mobile application attempts to threaten the
user, to lock the device, to encrypt data — or a combination of these actions.
We implemented HelDroid to analyze Android applications both statically
and dynamically. In particular, HelDroid uses static taint analysis and light-
weight emulation to ﬁnd ﬂows of function calls that indicate device-locking or
ﬁle-encryption behaviors. Our approach to detecting threatening behavior —
a core aspect of ransomware — is a learning-based, natural language process-
ing (NLP) technique that recognizes menacing phrases. Although most of our
analysis is static, the threatening-text detector does execute the sample in case
no threatening text is found in the static ﬁles. This allows to support oﬀ-band
text (e.g., fetched from a remote server).
Overall, HelDroid is speciﬁc to the ransomware schemes, but it does not rely
on any family in particular. Moreover, the detection features are parametric and
thus adaptable to future families. For instance, the taint-analysis module relies
on a single conﬁguration ﬁle that lists interesting sources and sinks. Similarly,
the threatening-text detector supports several languages and new ones can be
added with little, automatic training.
Evaluation Results. We tested HelDroid on hundreds of thousands of sam-
ples including goodware, generic malware, and ransomware. HelDroid correctly
detected all the ransomware samples, and did not confused corner-case, benign
apps that resembled some of the typical ransomware features (e.g., screen locking,
adult apps repackaged with disarmed ransomware payload). Overall, HelDroid
outperformed the state-of-the-art approach for Android malware detection (see
Sect. 8). HelDroid performed well also against unknown ransomware samples,
missing only minority of cases where the language was not supported out of the
box. This was easily ﬁxed with 30 min of work (i.e., ﬁnd a textbook in Spanish
and re-train the NLP classiﬁer). The detection heuristics of HelDroid exhib-
ited only a dozen of false positives over hundreds of thousands non-ransomware
apps.
Prototype Release. We provide access to HelDroid through an API (on top
of which we implemented a simple Android client), and release our dataset for
research purposes: http://ransom.mobi.
Original Contributions. In summary:
– We are the ﬁrst at looking at the ransomware phenomenon against mobile
devices. We provide a retrospective view of the past two years and distill the
characteristics that distinguish mobile ransomware from goodware (and from
other malware).
– We propose three generic indicators of compromise for detecting Android ran-
somware activity by recognizing its distinguishing features. The novel aspects
of our approach include a text classiﬁer based on NLP features, a lightweight
Smali emulation technique to detect locking strategies, and the application of
taint tracking for detecting ﬁle-encrypting ﬂows.
HELDROID: Dissecting and Detecting Mobile Ransomware
385
– We implement (and evaluate) our approaches for the Android platform and
open them to the community as a JSON-based API service over HTTP. This
is the ﬁrst public research prototype of its kind.
2 Background and Motivation
Fascinatingly, the idea of abusing cryptography to create extortion-based attacks
was ﬁrst theorized and demonstrated back in 1996 [1]. The authors deﬁned the
concept of cryptovirus as a “[malware] that uses public key [...] to encrypt data
[...] that resides on the host system, in such a way that [...] can only be recovered
by the author of virus”.
Based on this deﬁnition, ransomware can be seen as an advanced, coercive
cryptovirus. Coercion techniques, also seen in various scareware families, include
threatening the victim of indictments (e.g., for the detention of pornographic con-
tent, child pornography), violation of copyright laws, or similar illegal behavior.
In pure scareware, the cyber crooks exploit the fear and do not necessarily lock
the device or encrypt any data. In pure ransomware, before or after the threat-
ening phase the malware actually locks the device and/or encrypts sensitive con-
tent until the ransom is paid, usually through money transfer (e.g., MoneyPak,
MoneyGram) or crypto currencies. Although digital currency was not used in
practice back in 1996, curiously, Young and Yung [1] foresaw that “information
extortion attacks could translate in the loss of U.S. dollars if electronic money
is implemented.” Notably, CryptoLocker’s main payment mechanism is, in fact,
Bitcoin [9,10].
2.1 Motivation
Noticing the rapid succession of new families of mobile ransomware, as summa-
rized in Table 1, we downloaded and manually reverse engineered a few samples
for each family, noticing three, common characteristics. From this manual analy-
sis we hypothesize that these independent characteristics are representative of
the typical mobile ransomware scheme and can be combined in various ways to
categorize a sample as scareware, ransomware, or none of the previous.
Device Locking. All families doing device locking use one among these three
techniques. The main one consists in asking for device-administration rights and
then locking the device. Another technique is to superimpose a full-screen alert
dialog or activity. The third technique consists in trapping key-pressure events
(e.g., home or back button), such that the victim cannot switch away from the
“lock” screen.
Data Encryption. Some samples do not actually have any encryption capa-
bility, even if they claim so; alternatively, they may include encryption routines
that are however never called. To our knowledge, only the SimpLocker family
386
N. Andronio et al.
Table 1. Timeline of known Android ransomware or scareware families (we exclude
minor variants an aliases). E = Encrypt, L = Lock, T = Threaten.
First Seen Name
Extort E L T Target and notes
May 2014 Koler (Reveton) [5]
$300
✗ ✓ ✓ Police-themed screen lock; local-
ized in 30 countries; spreads via
SMS
Jun 2014
Simplocker [12]
$12.5a ✓ ✓ ✓ All ﬁles on SD card; uses hard-
Jun 2014
Aug 2014
Svpeng [13]
ScarePackage [14]
$200
$100
coded, non-unique key
✗ ✓ ✓ Police-themed screen lock
✗ ✓ ✓ Can take pictures and scan the
device for banking apps or ﬁnan-
cial details
Early 2015 New Simplocker [11] $200
aCorresponding to, approximately, 260 UAH.
✓ ✓ ✓ Per-device keys; advanced C&C
currently implements ﬁle encryption. In the ﬁrst version, the encryption key was
hardcoded, whereas the second version [11] generates a per-device key. Neverthe-
less, samples of this family never call any decryption routine, arguably leaving
data permanently unavailable even after payment (unless unlocking is performed
through a separate app).
Threatening Text. All current families display threatening messages of some
sort. We noticed that families localized in English rely on MoneyPak for pay-
ments, whereas families localized in Russian accept credit cards as well.
2.2 Goals and Challenges
Having considered the threat posed by ransomware, the potential attack surface
comprising billions of Internet-connected devices and the limitations of current
countermeasures, our high-level goal is to overcome the downsides of signature-
based approaches, and recognize both known and novel ransomware variants
robustly by generalizing the insights described in Sect. 2.1.
Achieving our goal is challenging. Recognizing variants requires a robust model
of their characterizing features that has both generalization and detection capa-
bilities, in order to catch both new and known ransomware implementations,
possibly in an adaptive way. For example, the task of modeling and recognizing
threatening text must account for localization, creating a model that can be
quickly re-adapted to new languages before new ransomware campaigns start
spreading. Similar observations apply to other characterizing features.
2.3 Scope and Assumptions
Although ransomware detection is by no means tied exclusively to the mobile
world, in this work we focus on Android ransomware. Mobile ransomware is
HELDROID: Dissecting and Detecting Mobile Ransomware
387
Samples
Static flow 
extraction
Static code 
analysis
Sentence 
extraction
tainted flows
Encryption 
Detector
Smali instructions
Locking 
Detector
?
statically allocated strings
Threatening 
Text Detector
encrypt and/or lock + 
threatening text
threatening text
none
Ransomware
Scareware
Goodware or 
other malware
Dynamic 
analysis
no threat found
Generic threatening 
sentences for training
Fig. 1. Android samples are statically analyzed for extracting “artifacts” that typical of
ransomware tactics (encryption, locking, threatening). If no threatening text is found,
oﬀ-band text is analyzed by collecting strings allocated by the sample while running
in an instrumented sandbox.
indeed evolving quickly, with 5 families in less than one year (May 2014–Jan
2015), and self-replicating capabilities since the ﬁrst release.
We focus on challenges that are unique to the ransomware-detection problem
(i.e., detecting locking strategies, encryption operations and threatening mes-
sages). In this work, we set aside: related problems already tackled by current or
past research such as (anti-)evasion techniques, or other aspects that are typical
of malicious software in general). In Sect. 7 we discuss the impact of our choices.
3 HELDROID’s Approach
In this section we describe how, at a conceptual level, HelDroid analyzes each
Android APK ﬁle to decide whether it is a ransomware sample.
As summarized in Fig. 1, we employ three, independent detectors, which can
be executed in parallel. Each detector looks for a speciﬁc indicator of compro-
mise typical of a ransomware malware. The Threatening Text Detector uses
text classiﬁcation to detect coercion attempts (Sect. 3.1). If the result of this
classiﬁer is positive, but the others are not, we label the sample as “scareware”.
This means that the application limits itself to displaying some threatening text
to convince the victim in doing some action. If also the Encryption Detector
(Sect. 3.2) and/or the Locking Detector (Sect. 3.3) are triggered, this means