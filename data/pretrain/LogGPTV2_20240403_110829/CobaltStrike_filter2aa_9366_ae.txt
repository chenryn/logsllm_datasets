导入 CrossC2Kit_Loader.cna
**注意**
其实可以不用 CrossC2.cna 这个脚本, 直接在 cs 服务器的命令行下生成即可, 注意生成时候的回连地址, 如果是域前置要把域前置的 ip 指定，然后 host 头要在 profile 里指定，和 genCrossC2.Linux 没有关系
如果还是上不了线,建议仔细看看这几个issue
- https://github.com/gloxec/CrossC2/issues/60
- https://github.com/gloxec/CrossC2/issues/89
- https://github.com/gloxec/CrossC2/issues/65
另外，mac m1 下生成的 shell ，x86 机器是用不了的，所以建议 cs 全套都在 x86 的机器上弄
**mac 🐎**
- [Macos钓鱼上线CS踩坑流程](https://mp.weixin.qq.com/s/ZptprvkNXRP0PNpmoXpbFg)
---
## CS 样本
目录中有一个 CobaltStrike.jar 文件，直接解压，这里面有一个名为 resources 的文件夹，就是 CobaltStrike 的配置信息，我们在 CobaltStrike 控制台生成的木马都来源于这个文件夹。
可以直接分析这里面的样本，提取规则进行查杀。
---
## CNA 扩展
Cobalt Strike 可以使用 AggressorScripts 脚本来加强自身，能够扩展菜单栏，Beacon 命令行，提权脚本等
**相关文章**
- https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/agressor_script.htm
**CS插件资源**
- [rmikehodges/cs-ssl-gen](https://github.com/rmikehodges/cs-ssl-gen) sslgen 将安装一个 letsencrypt 证书并从中创建一个 Cobalt Strike 密钥库.
- [uknowsec/SharpToolsAggressor](https://github.com/uknowsec/SharpToolsAggressor) - 内网渗透中常用的 c# 程序整合成 cs 脚本, 直接内存加载.
- [DeEpinGh0st/Erebus](https://github.com/DeEpinGh0st/Erebus) CobaltStrike 后渗透测试插件
- [QAX-A-Team/EventLogMaster](https://github.com/QAX-A-Team/EventLogMaster) - RDP 日志取证 & 清除插件
- [outflanknl/Spray-AD](https://github.com/outflanknl/Spray-AD) - Cobalt Strike工具，用于审核 AD 用户帐户中的弱密码
- [gloxec/CrossC2](https://github.com/gloxec/CrossC2) - generate CobaltStrike's cross-platform payload
- [lintstar/LSTAR](https://github.com/lintstar/LSTAR) - LSTAR - CobaltStrike 综合后渗透插件
- [AttackTeamFamily/cobaltstrike-bof-toolset](https://github.com/AttackTeamFamily/cobaltstrike-bof-toolset) - 在cobaltstrike中使用的bof工具集，收集整理验证好用的bof。
- [outflanknl/PrintNightmare](https://github.com/outflanknl/PrintNightmare) - CVE-2021-1675 / CVE-2021-34527 exploit.
- [helpsystems/nanodump](https://github.com/helpsystems/nanodump) - Dumping LSASS has never been so stealthy
- [optiv/Registry-Recon](https://github.com/optiv/Registry-Recon) - Cobalt Strike Aggressor Script that Performs System/AV/EDR Recon
- [mgeeky/cobalt-arsenal](https://github.com/mgeeky/cobalt-arsenal) - My collection of battle-tested Aggressor Scripts for Cobalt Strike 4.0+
---
## 通信扩展
Cobalt Strike 可以引用其他的通讯框架 ExternalC2，ExternalC2 是由 Cobalt Strike 提出的一套规范/框架，它允许黑客根据需要对框架提供的默认 HTTP(S)/DNS/SMB C2 通信通道进行扩展。
**相关文章**
- https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2_main.htm
- https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2-extend_main.htm
**Profile 资源**
C2 Profile 可以调整传输过程中的流量, 一定程度上可以隐蔽 C2 服务器
- [rsmudge/Malleable-C2-Profiles](https://github.com/rsmudge/Malleable-C2-Profiles) - This repository is a collection of Malleable C2 profiles that you may use. These profiles work with Cobalt Strike 3.x.
- [threatexpress/malleable-c2](https://github.com/threatexpress/malleable-c2) - Cobalt Strike Malleable C2 Design and Reference Guide
- [HuskyHacks/CobaltNotion](https://github.com/HuskyHacks/CobaltNotion) - A spin-off research project. Cobalt Strike x Notion collab 2022
**辅助项目**
- [CodeXTF2/Burp2Malleable](https://github.com/CodeXTF2/Burp2Malleable) - Quick python utility I wrote to turn HTTP requests from burp suite into Cobalt Strike Malleable C2 profiles
**Malleable C2**
Beacon 中的 http 通讯由 Malleable-C2 配置文件定义，在启动 teamserver 时来指定我们的配置文件, 每个 CS 只能载入一个配置文件, 多个文件需要启动多个 teamserver
目录下的 c2lint 文件可以检测配置文件的语法问题和测试
```bash
chmod +x c2lint
./c2lint [/path/to/my.profile]
```
### profile 语法
**简单举例**
```
#
# Backoff POS Malware
#
# This profile takes steps to dress up the POST side of Beacon's C2 to
# look like Backoff. The GET side is left generic.
#
```
注释符号 `#`
```
set sample_name "Backoff POS Malware";
set sleeptime "30000"; # use a ~30s delay between callbacks
set jitter    "10";    # throw in a 10% jitter
```
选择赋值 `set` 用来设置一些程序的默认值 语句以; 结束,类似JavaScript.
代码中 `set sleeptime "30000";` 即为设置心跳时间为30000毫秒，`set jitter "10";` 为默认抖动系数（0-99%）
```
set useragent "Mozilla/5.0 (Windows NT 6.1; rv:24.0) Gecko/20100101 Firefox/24.0";
```
设置 user-agent
**Data Transform Language**
```
http-get {
    set uri "/updates";
    client {
        metadata {
            netbiosu;
            prepend "user=";
            header "Cookie";
        }
    }
    server {
        header "Content-Type" "text/plain";
        output {
            base64;
            print;
        }
    }
}
```
数据转换,CS内置的几种编码
Statement | Action |  Inverse
-|-|-
append "string"	 | Append "string"	| Remove last LEN("string") characters
base64	| Base64 Encode	| Base64 Decode
base64url	| URL-safe Base64 Encode |	URL-safe Base64 Decode
mask	| XOR mask w/ random key	| XOR mask w/ same random key
netbios	| NetBIOS Encode 'a'	| NetBIOS Decode 'a'
netbiosu	| NetBIOS Encode 'A'	| NetBIOS Decode 'A'
prepend "string" |	Prepend "string" |	Remove first LEN("string") characters
数据转换语句可以任意数量顺序组合,以终止语句结束,在转换中只能使用一个终止语句
Statement | What
-|-|
header "header" |Store data in an HTTP header
parameter "key" | Store data in a URI parameter
print   | Send data as transaction body
uri-append | Append to URI
终止语句将转换后的数据储存到 Http 头中，参数终止语句将转换的数据 print 来最后发送这些编码的数据
print 是 `http-get.server.output`，`http-post.server.output` 和 `http-stager.server.output` 的终止语句配合上文代码可以看出。
其他块使用 `header`，`parameter`，`print` 和 `uri-append` `termination` 语句, 如果在 `http-post.client.output` 上使用 `header` `parameter` `uri append` `termination` 语句，beacon 会将其响应分块到一个合理的长度，以适应事务的一部分。
**Strings**
Beacon 的 Profile 语法可以多个地方使用 Strings
Value | Special Value
-|-|
"\n"  |  Newline character
"\r"   | Carriage Return
"\t"   | Tab character
"\u####"  |  A unicode character
"\x##"  | A byte (e.g., \x41 = 'A')
"\\"   | \
**Options**
Beacon 的默认值, 分为全局和本地, 全局更改 Beacon 的设置，本地用于特定事务。
Option | Context | Default Value | Changes
-|-|-|-|
amsi_disable  | null  |    false  | (Attempt to) disable AMSI for execute-assembly, powerpick, and psinject
dns_idle    | null |    0.0.0.0 | IP address used to indicate no tasks are available to DNS Beacon; Mask for other DNS C2 values
dns_max_txt  | null |   252   | Maximum length of DNS TXT responses for tasks
dns_sleep    | null |   0  | Force a sleep prior to each individual DNS request. (in milliseconds)
dns_stager_prepend   | null  |   null  |    Prepend text to payload stage delivered to DNS TXT record stager
dns_stager_subhost   | null |   .stage.123456.    | Subdomain used by DNS TXT record stager.
dns_ttl  | null |   1    |  TTL for DNS replies
host_stage   | null    |   true     |  Host payload for staging over HTTP, HTTPS, or DNS. Required by stagers.
jitter     | null  |   0     | Default jitter factor (0-99%)
maxdns     | null  |   255   | Maximum length of hostname when uploading data over DNS (0-255)
pipename     | null   |    msagent_##   |  Name of pipe to use for SMB Beacon's peer-to-peer communication. ## is replaced with a number unique to your team server.
pipename_stager  | null   |    status_##    |  Name of pipe to use for SMB Beacon's named pipe stager. ## is replaced with a number.
sample_name   | null   |   My Profile   |  The name of this profile (used in the Indicators of Compromise report)
sleeptime     | null   |   60000     | Default sleep time (in milliseconds)
spawnto_x86   | null   |   %windir%\syswow64\rundll32.exe   |  Default x86 program to open and inject shellcode into
spawnto_x64   | null     | %windir%\sysnative\rundll32.exe  |  Default x64 program to open and inject shellcode into
tcp_port     | null    |   4444     |  TCP Beacon listen port
uri   | http-get,http-post    |  [required option]  |   Transaction URI
uri_x86   | http-stager      | null |  x86 payload stage URI
uri_x64   | http-stager      | null | x64 payload stage URI
useragent    |null  |     Internet Explorer (Random)   |  Default User-Agent for HTTP comms.
verb     |  http-get,http-post   | GET,POST     |  HTTP Verb to use for transaction
**Beacon HTTP Transaction**
HTTP请求 参数
Request | Component | Block | Data
-|-|-|-|
http-get   |   client  |  metadata   |   Session metadata
http-get    |  server  |  output  |  Beacon's tasks
http-post  |   client  |  id  |  Session ID
http-post   |  client  |  output  |  Beacon's responses
http-post   |  server   | output  |  Empty
http-stager  | server |   output  |  Encoded payload stage
**HTTP Staging**
Beacon 是一个分阶段的 payload，有效负载由 stager 下载并注入内存，在目标内存中有 Beacon 之前 HTTP GET 和 HTTP POST 不会生效。 Malleable C2 的 http-stager 块可自定义 HTTP 分段过程。
```
http-stager {
      set uri_x86 "/get32.gif";
      set uri_x64 "/get64.gif";
```
uri_x86 选项设置 URI 下载 x86 的 payload,uri_x64 选项设置 URI 下载 64 位的 payload 。
**Self-signed Certificates with SSL Beacon**
HTTPS Beacon 在其通信中使用 HTTP Beacon 的指示符, Malleable C2 配置文件还可以指定 Beacon C2 服务器的自签名 SSL 证书的参数。
```
https-certificate {
      set CN       "bobsmalware.com";
      set O        "Bob's Malware";
}
```
证书参数
Option | Example | Description
-|-|-|
C   |  US   | Country
CN   | beacon.cobaltstrike.com  | Common Name; Your callback domain