            // gaps.length = 0 isn't necessary here,
            // because buyTickets() eventually clears
            // the gaps array in the loop itself.
            // Distribute prize and fee
            winningAddress.transfer(prize);
            feeAddress.transfer(fee);
        }
        // Get your money back before the raffle occurs
        function getRefund() public {
            uint refund = 0;
            for (uint i = 0; i  0) {
                msg.sender.transfer(refund);
            }
        }
        // Refund everyone's money, start a new raffle, then pause it
        function endRaffle() public {
            if (msg.sender == feeAddress) {
                paused = true;
                for (uint i = 0; i  0); 
            uint256 c = a / b;
            return c;
        }
        function sub(uint256 a, uint256 b) internal pure returns (uint256) {
            require(b = a);
            return c;
        }
    }
    contract ERC20{
        using SafeMath for uint256;
        mapping (address => uint256) public balances;
        uint256 public _totalSupply;
        function totalSupply() public view returns (uint256) {
            return _totalSupply;
        }
        function balanceOf(address owner) public view returns (uint256) {
            return balances[owner];
        }
        function transfer(address _to, uint _value) public returns (bool success){
            balances[msg.sender] = balances[msg.sender].sub(_value);
            balances[_to] = balances[_to].add(_value);
            return true;
        }
    }
    contract ggToken is ERC20 {
        string public constant name = "777";
        string public constant symbol = "666";
        uint8 public constant decimals = 18;
        uint256 public constant _airdropAmount = 1000;
        uint256 public constant INITIAL_SUPPLY = 20000000000 * (10 ** uint256(decimals));
        mapping(address => bool) initialized;
        constructor() public {
            initialized[msg.sender] = true;
            _totalSupply = INITIAL_SUPPLY;
            balances[msg.sender] = INITIAL_SUPPLY;
        }
    }
    contract ggbank is ggToken{
        address public owner;
        mapping(uint => bool) locknumber;
        event GetFlag(
                string b64email,
                string back
            );
        modifier authenticate {
            require(checkfriend(msg.sender));_;
        }
        constructor() public {
            owner=msg.sender;
        }
        function checkfriend(address _addr) internal pure returns (bool success) {
            bytes20 addr = bytes20(_addr);
            bytes20 id = hex"000000000000000000000000000000000007d7ec";
            bytes20 gg = hex"00000000000000000000000000000000000fffff";
            for (uint256 i = 0; i =100);
            balances[msg.sender]-=100;
            uint random=uint(keccak256(abi.encodePacked(block.number))) % 100;
            if(uint(keccak256(abi.encodePacked(msg.sender))) % 100 == random){
                balances[msg.sender]+=20000;
                _totalSupply +=20000;
                locknumber[block.number] = true;
            }
            return true;
        }
        function PayForFlag(string b64email) public payable authenticate returns (bool success){
                require (balances[msg.sender] > 200000);
                emit GetFlag(b64email, "Get flag!");
            }
    }
我们看获得flag的条件是需要`require (balances[msg.sender] > 200000)`。
    function getAirdrop() public authenticate returns (bool success){
             if (!initialized[msg.sender]) { //空投
                initialized[msg.sender] = true;
                balances[msg.sender] = _airdropAmount;
                _totalSupply += _airdropAmount;
            }
            return true;
        }
在上面的函数中我们知道每一个新用户都会获得`uint256 public constant _airdropAmount =
1000;`1000的钱。然而，我们看到goodluck函数中能够看到：
    function goodluck()  public payable authenticate returns (bool success) {
        require(!locknumber[block.number]); //判断block.numbrt
        require(balances[msg.sender]>=100); //余额大于100
        balances[msg.sender]-=100; //每次调用要花费100token
        uint random=uint(keccak256(abi.encodePacked(block.number))) % 100; //随机数
        if(uint(keccak256(abi.encodePacked(msg.sender))) % 100 == random){ //随机数判断
            balances[msg.sender]+=20000;
            _totalSupply +=20000;
            locknumber[block.number] = true;
        }
        return true;
    }
我们看到这里就是随机数预测。而在这个随机数预测中我们使用了`abi.encodePacked(msg.sender)`与`random=uint(keccak256(abi.encodePacked(block.number)))
% 100`。也就是说我们需要这两个数相等即可返回ture。
而msg.sender可以直接控制已知的地址，那么左值就是已知的，剩下的就是要等待一个右值出现，由于block.number是自增的，我们可以通过提前计算出一个block.number，然后写脚本监控这个值出现，提前开始发起交易抢打包，就能够返回true了。
我们可以查看此题目的[wp](https://github.com/LCTF/LCTF2018/tree/master/Writeup/gg%20bank)。
### 五、参考资料
  * 
  * 
  * 
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**