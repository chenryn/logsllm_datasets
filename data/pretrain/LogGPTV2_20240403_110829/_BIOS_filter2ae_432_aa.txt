# 【技术分享】用符号执行和虚拟平台查找BIOS漏洞
|
##### 译文声明
本文是翻译文章，文章来源：intel.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[lfty89](http://bobao.360.cn/member/contribute?uid=2905438952)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**前言**
在代码中寻找漏洞已成为网络攻防之间博弈的一部分，网络防御方需要尽可能地定位和修补所有可能的系统漏洞，而攻击方通常只需找到一处正确的切入点便可获得胜利。因此，相对于进攻方，防御方通常需要准备更加有效的工具以应对这场较量。
fuzzing（模糊测试）是一种采取向系统发送随机输入（通过一些随机生成器产生的）的方式来定位漏洞的通用技术。通常来讲，由于测试目的不明等原因，直接采取blind
fuzzing的方式在实际应用中的效率并不高。但对于防御方而言，在实际应用场景中可以额外借鉴系统源代码、攻击背景等有效信息，并借助静态分析、符号执行（symbolic
execution）等方式有效地开展fuzzing测试，最终将系统崩溃、bug等问题溯源到源代码的具体位置并对其进行修复。
Intel的Excite项目通过使用一种结合符号执行、fuzzing和concrete测试的方法在敏感代码中寻找漏洞。项目组发现，将符号和具体化技术进行有效搭配后，其执行效率高于单用其中任何一种技术。自2015年项目启动以来，Exite已经进行了多次成果展示（如USENIX
Workshop on Offensive Technologies (WOOT) 2015[1] and ZeroNights
2016[2]），目前已成为一款自动化挖掘BIOS漏洞的有效工具。
Excite是一种结合多种技术的自动化工作流，具体包括：通过结合一种动态选择性符号执行技术（dynamic selective symbolic
execution）和fuzzing来生成测试用例；利用Wind
River*Simics*虚拟平台以dump与平台相关的数据和代码；针对发现的安全问题以重放测试等方式进行检测和研究；通过评估代码覆盖率以准备下一次的测试用例。
图1描述了Excite为符号执行、fuzzing以及虚拟平台这三种技术结合的交集。
**目标：系统管理模式**
目前，Excite项目研究正在重点分析系统管理模式（SMM：System Management Mode）中的系统管理中断（SMI：System
Management Interrupt，被用于UEFI
BIOS中）处理程序上。鉴于近年来针对BIOS的攻击逐渐增多，Intel也采取了代码开发纲要[3]、安全设计纲要[4]、代码复检和静态分析等方式逐步提高BIOS的安全性。Excite凭借着自动化测试生成等特性横空出世，意味着BIOS的安全技术领域又新增一名成员。
在Intel处理器中，SMM是权限最高的执行状态（可将SMM看作运行在Ring -2层，操作系统在Ring 0层，而应用程序在Ring
3层），这也导致其成为rootkit藏匿的绝佳位置。操作系统自身并不清楚SMM在何时运行，更不能检测和阻止SMM代码的执行，因此，从平台的整体而言，SMM的安全问题至关重要。
SMM使用的代码和数据存放于系统管理存储器（SMRAM： System Management
RAM）中，后者是系统RAM的一部分，只是被分配给SMM使用，同时也受到处理器相关机制的保护。要进入SMM的执行上下文，通常需要平台的一些特定事件来触发SMI调用。
发生SMI后，一个通信缓存（Communications
Buffer）被用于传递来自外界的参数，该通信缓存被存储在正常的RAM中，并且假定随时可能被攻击者控制，因此，SMI处理程序必须非常谨慎地检验通信缓存中存放的数据，以防止被攻击者利用。
因为SMI处理程序能够访问机器的任意一块内存，在安全防护的角度上看，它们也更加危险。针对这个问题，UEFI BIOS中有一个组件表（sets up
table）专门定义SMI处理程序能够访问哪些内存，同时不能访问哪些内存。
SMM是UEFI
BIOS的一部分，正因如此，它并不是一个静态组件。在系统启动的过程中，BIOS会往SMRAM中以动态的方式加载SMM的驱动和相关的SMI处理程序，一旦安装完成，SMRAM被处理器以设置锁比特位的方式锁定。
**在SMM中应用Excite**
目前，Excite计划捕获UEFI
SMI处理程序中的两个非常“恶意”的安全问题：在外部调用SMRAM以及访问禁止的内存区域。为达成该目标，Excite工具集以图2的方式组合了多种技术：
首先以标准化的方式构建UEFI
BIOS，完成构建后将其加载到一个Simics虚拟平台中并启动。Simics能够模拟真实的Intel平台，从而让UEFI运行为真实环境准备的所有代码。
在SMM驱动初始化到SMRAM锁定之前的阶段，SIMICS
dump了一份用于符号执行的SMRAM镜像。该方法的好处在于，其dump出来的数据包括了SMM模块的初始化状态，从而避免了额外开发一个SMM复杂模型的工作。
接下来开始生成测试框架（test