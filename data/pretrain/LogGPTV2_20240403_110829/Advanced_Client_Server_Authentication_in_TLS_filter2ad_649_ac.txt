Although  not  addressed  in  this  paper,  this  simple  case 
could  be  supported  in  the  normal  TLS  handshake.    A 
simple  negotiation  occurs,  for  example,  when  a  server 
requests  a  certificate  from  the  client  and  the  client 
immediately discloses the certificate.  TNT is designed to 
protect sensitive certificates in more complex negotiations.   
4.2.  TLS session resumption 
The  performance  bottleneck  in  TLS  handshakes  is  the 
public key cryptographic operations [9].  In particular, the 
encryption  and  decryption  required 
to  confidentially 
exchange  a  pre-master  secret  is  expensive.    One  of  the 
reasons the client must verify the server’s certificate is to 
use the server’s public key to encrypt the pre-master secret 
in the key exchange.   
TLS  supports  session  resumption  in  order  to  avoid  the 
  With  session 
overhead  of  a  full  TLS  handshake. 
the  server  replies  by  returning 
resumption,  an  abbreviated  handshake  occurs  as  follows.  
The  client  sends  a  ClientHello  message  to  a  server 
and  includes  the  sessionID  from  a  previous  session 
with  the  server.    If  the  server  is  willing  to  resume  the 
session, 
the  same 
sessionID in the ServerHello message.  In order to 
resume  a  session,  the  client  and  server  reuse  the  master 
secret  from  the  prior  session  to  compute  new  keying 
the  expensive  public-key 
material, 
operations  of  a  normal  handshake. 
the 
ServerHello  message 
exchange 
ChangeCipherSpec  and  Finished  messages,  with 
the server proceeding first. 
thus  avoiding 
  After 
they 
simply 
The  TNT  protocol  presented  in  the  next  section 
leverages  TLS  session  resumption  in  order  to  avoid  the 
overhead  of  needlessly  generating  a  new  master  secret.  
Once the client and server successfully negotiate trust, an 
abbreviated  handshake  takes  place,  similar  to  session 
resumption.  Instead of completing the full handshake, the 
client and server compute new keying material by reusing 
the  master  secret  from  the  current  TLS  session  and 
conclude  by 
and 
Finished  messages  to  one  another,  with  the  server 
proceeding first. 
sending  ChangeCipherSpec 
4.3.  TNT protocol 
The  TNT  protocol,  shown  in  figure  4,  is  designed  to 
support trust negotiation between a TLS client and server 
whenever a TLS client has requested access to a sensitive 
service  and  the  access  control  policy  associated  with  the 
service is not satisfied.  A TLS server desiring to negotiate 
trust  with  a  client  initiates  a  rehandshake  by  sending  a 
HelloNegotiationRequest  message  to  the  client.  
The  client  responds  with  a  ClientHello  message, 
the  server  sending  a  ServerHello 
followed  by 
message. 
the  hello 
messages  is  the  sessionID  associated  with  the  current 
session,  to  allow  for  streamlined  session  resumption 
following a successful trust negotiation.   
  The  sessionID 
included 
in 
that 
In  order  to  conduct  a  successful  trust  negotiation,  the 
negotiation  participants  must  first  agree  on  a 
trust 
negotiation strategy family.  Once they agree on a strategy 
family,  each  party  is  free  to  independently  select  a 
negotiation  strategy  from  that  strategy  family,  with  the 
guarantee 
trust  will  be  successfully  negotiated 
whenever  possible  [15].    Two  design  choices  for  adding 
information  on  the  negotiation  strategy  family  into  TLS 
are: 1) include the strategy family in the hello messages, or 
2)  incorporate  the  strategy  family  into  the  TLS  cipher 
suite.    A current IETF Internet draft specifies extensions 
to the ClientHello and ServerHello messages that 
can  be  used  to  communicate  support  for  new  capabilities 
+ 
Client 
Server 
HelloNegotiationRequest 
ClientHello 
ServerHello 
* 
* 
Certificate 
CertificateVerify 
Policy 
ServerTurnDone 
Certificate 
CertificateVerify 
Policy 
ClientTurnDone 
NegotiationDone 
ChangeCipherSpec 
Finished 
ChangeCipherSpec 
Finished 
  * 
  * 
until the negotiation succeeds or is terminated.  During the 
server’s  turn,  the  server  first  discloses  zero  or  more 
certificates  using  a  combination  of  TLS  Certificate 
and  CertificateVerify  messages.    Immediately 
following  each  Certificate  message, 
the  server 
demonstrates  ownership  of  a  private  key  using  the 
CertificateVerify  message,  unless  the  server  has 
previously  demonstrated  possession  of  the  private  key 
earlier  in  the  negotiation.    The  CertificateVerify 
message  is  encrypted  using  the  server’s  private  key 
associated with the certificate the server just disclosed.  It 
is sent to prove to the client that the server is the owner of 
the  certificate.    Next,  the  server  discloses  zero  or  more 
Policy messages.  Policies are disclosed to provide hints 
to  the  client  regarding  the  certificates  the  client  can 
disclose  to  advance  the  negotiation.    Finally,  the  server 
sends  a  ServerTurnDone  message  indicating  that  the 
server has nothing further to disclose during this round of 
the negotiation. 
Next,  the  client  takes  a  turn  disclosing  information  to 
advance  the  negotiation,  following  the  same  general 
pattern  as  the  server.    The  client  first  discloses  zero  or 
more  certificates  using  a  combination  of  Certificate 
and  CertificateVerify  messages.    Immediately 
following  each  Certificate  message, 
the  client 
demonstrates  ownership  of  a  private  key  using  the 
CertificateVerify  message,  unless  the  client  has 
previously  demonstrated  possession  of  the  private  key 
earlier in the negotiation.  Next, the client discloses zero or 
more policies to provide hints to the  server regarding the 
certificates 
the 
negotiation.    The  client  concludes  its  turn  during  the 
current 
a 
ClientTurnDone message.   
the  server  can  disclose 
to  advance 
round 
of 
negotiation 
by 
sending 
Figure 4.  The TNT handshake protocol for 
negotiating trust during an encrypted TLS 
rehandshake, with optional messages shaded. 
in  a  TLS  client  or  server  [2].    The  draft  is  work  in 
progress.   
Anticipating  that  extensibility  in  the  hello  messages 
will  be  available  in  TLS  in  the  future,  TNT  extends  the 
ClientHello and ServerHello messages to include 
the  TrustNegotiationStrategyFamily 
field.  
Using  that  field  in  the  ClientHello  message,  a  TNT 
client  includes  a  list  of  the  negotiation  strategy  families 
that  the  client  supports.    The  server  selects  a  strategy 
family from the list presented by the client and returns it in 
the ServerHello message. 
Following  the  exchange  of  hello  messages,  the  TNT 
protocol enters the negotiation phase, in  which  the  server 
and  client  take  turns  disclosing  policies  and  certificates 
The negotiation continues for a number of rounds until 
the  server’s  policy  governing  the  resource  is  satisfied  or 
the  negotiation  is  terminated.    The  server  checks  to  see 
whether  the  policy  is  satisfied  after  each  round  of  the 
negotiation.    Once  the  policy  is  satisfied,  the  server 
successfully  concludes  the  negotiation  by  sending  the 
NegotiationDone message.   
the  facilities  for 
Either party  may terminate the negotiation at any time 
using 
terminating  any  other  TLS 
handshake.  The decision to terminate is dependent on the 
negotiation  strategy.    Previous  work  on  trust  negotiation 
characterizes important properties of negotiation strategies, 
including  termination  [10][13][14][15].    A  production 
implementation of TNT could use these previous results to 
place  practical  limits  on  the  number  of  rounds  of 
negotiation  to  insure  a  negotiation  does  not  continue 
indefinitely. 
The final phase of the TNT protocol is very similar to 
the  conclusion  of  the  abbreviated  TLS  handshake.    The 
server  sends  a  ChangeCipherSpec  message  and  a 
Finished  message.    Once  the  client  replies  with  the 
same two types of messages, the rehandshake is complete.   
The following is an example trust negotiation between a 
client and server using TNT.  Suppose a web browser and 
server  support  TNT.    The  user  is  a  student  purchasing  a 
book  from  an  online  bookstore  that  offers  discounts  to 
students  at  accredited  universities.    Suppose  the  user 
requests a student discount while purchasing a book in the 
context  of  a  TLS  session.    For  this  example,  assume  the 
client and server are initially unfamiliar with one another.   
The  server  initiates  a  TLS  rehandshake  in  order  to 
authenticate  the  client  as  a  valid  student  by  sending  a 
HelloNegotiationRequest  message  to  the  client.  
The  client  responds  with  a  ClientHello  message, 
followed  by  a  ServerHello  message  from  the  server.  
These  messages  permit  the  client  and  server  to  select  a 
trust  negotiation  strategy  family  and 
the  RSA  key 
exchange method.   
Next, the server sends a Policy message to the client 
that  describes  the  certificates  the  client  must  submit  in 
order  to  receive  the  discount  service.    In  this  case,  the 
server  requires  a  valid  student  ID  certificate  and  a  credit 
card certificate.  For this example, we ignore the details of 
the  valid  certificate  chains  that  are  required  in  practice.  
The server then sends a  ServerTurnDone  message.  
Suppose the client has the necessary certificates to obtain a 
discount,  but  considers  them  to  be  sensitive.    In  order  to 
establish  trust  in  the  server,  the  client  sends  a  Policy 
message  requesting  certificates  from  the  server  that 
demonstrate the server is a member of the Better Business 
Bureau  and  is  certified  by  TRUSTe  to  follow  its  privacy 
practices to not share private information with any outside 
party.    The  client  then  sends  a  ClientTurnDone 
message,  indicating  it  is  done  with  this  stage  of  the 
negotiation. 
the  client’s  request. 
Next,  assume  the  server  possesses  the  certificates  that 
satisfy 
  The  server  sends  a 
Certificate  message  and  a  CertificateVerify 
message  for each of the certificate chains associated  with 
its  BBB  and  TRUSTe  certificates,  followed  by  a 
ServerTurnDone  message.    Now  that  the  server  is 
authorized  to  receive  the  client’s  certificates,  the  client 
continues  the  negotiation  by  sending  a  Certificate 
message  and  a  CertificateVerify  message  for  the 
two certificates requested earlier by the server, the student 
ID  and  credit  card. 
then  sends  a 
ClientTurnDone message.   
  The  client 
the 
sends 
service, 
the  discount 
Once  the  client  has  satisfied  the  server’s  requirements 
for 
a 
NegotiationDone  message.    Finally,  the  handshake 
completes  according  to  the  abbreviated  approach  used 
during  session  resumption,  with  the  server  and  client 
sending  a  ChangeCipherSpec  message  and  a 
Finished message to one another. 
server 
4.4.  Overcoming TLS authentication limitations 
The  TNT  protocol  overcomes  the  limitations  of  TLS 
client/server  authentication  described  in  section  3.2,  as 
described in the following list corresponding to each of the 
limitations given previously.   
1.  The  TNT  protocol  is  conducted  within  the  scope  of  a 
rehandshake  during  an  encrypted  TLS  session.  
Sensitive certificates are not exchanged in plain text.   
2.  The  client  and  the  server  can  exchange  multiple 
certificates  during  each  round  of  a  negotiation.  
Requiring multiple certificates from different certifying 
authorities can reduce the risk associated with a single 
private  key  compromise. 
  This  is  the  electronic 
equivalent of requiring multiple forms of ID. 
3.  The  TNT  protocol  allows  the  server  to  go  first.  
However,  the  server  is  not  obligated  to  disclose  all  of 
its  certificates  before  the  client  discloses  any.    The 
server  can  save  more  sensitive  certificates 
for 
disclosure  during  later  rounds  of  the  negotiation.  
Another approach that could be explored is to have the 
participants  negotiate  who  goes  first.    The  decision  of 
who proceeds first is related to the negotiation strategy; 
so further work in this area is warranted. 
4.  The client and server have equal opportunity to disclose 
trust 
to  one  another 
to  specify 
their 
policies 
requirements. 
5.  The client and server both send verification messages to 
one another after disclosing a certificate that they own.  
This verifies ownership of associated private keys.  It is 
necessary to prove this immediately in TNT so that the 
certificate  can  be  reliably  used  to  gain  access  to 
sensitive certificates of a negotiation counterpart. 
to 
regarding 
inform  each  other 
6.  The TNT protocol permits clients and servers  who are 
strangers 
their 
requirements  for  establishing  trust  through  the  use  of 
Policy messages.  Even a negotiation strategy that does 
not make use of policy messages could allow a client 
or  server  the  ability  to  begin  disclosing  less  sensitive 
certificates and only disclose more sensitive certificates 
when absolutely necessary.  TNT is more flexible than 
the one-time disclosure currently available in TLS.   
4.5.  TNT message syntax 
The majority of the message types in the TNT protocol 
are standard TLS  message types.  The semantics of these 
messages remain the same in TNT as they are in TLS.  The 
TNT  protocol  introduces  five  new  message  types.    The 
following  syntax  describes  four  new  message  types  in 
TNT that are simply for control flow purposes.  
Struct {} HelloNegotiationRequest 
Struct {} ServerTurnDone 
Struct {} ClientTurnDone 
Struct {} NegotiationDone 
PureTLS 
Client 
TNT 
PureTLS 
Server 
a 
I
M
R
d 
TrustBuilder 
b,c 
d 
a 
I
M
R
d,e 
TrustBuilder 
b,c 
d,e 
IBM Trust 
Establishment 