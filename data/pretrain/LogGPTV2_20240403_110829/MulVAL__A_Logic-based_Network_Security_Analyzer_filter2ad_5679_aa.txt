title:MulVAL: A Logic-based Network Security Analyzer
author:Xinming Ou and
Sudhakar Govindavajhala and
Andrew W. Appel
MulVAL: A Logic-based Network Security Analyzer ∗
Xinming Ou
Sudhakar Govindavajhala Andrew W. Appel
Princeton University
{xou, sudhakar, appel}@cs.princeton.edu
Abstract
To determine the security impact software vulnerabilities
have on a particular network, one must consider interac-
tions among multiple network elements. For a vulnera-
bility analysis tool to be useful in practice, two features
are crucial. First, the model used in the analysis must be
able to automatically integrate formal vulnerability spec-
iﬁcations from the bug-reporting community. Second,
the analysis must be able to scale to networks with thou-
sands of machines.
We show how to achieve these two goals by present-
ing MulVAL, an end-to-end framework and reasoning
system that conducts multihost, multistage vulnerability
analysis on a network. MulVAL adopts Datalog as the
modeling language for the elements in the analysis (bug
speciﬁcation, conﬁguration description, reasoning rules,
operating-system permission and privilege model, etc.).
We easily leverage existing vulnerability-database and
scanning tools by expressing their output in Datalog and
feeding it to our MulVAL reasoning engine. Once the in-
formation is collected, the analysis can be performed in
seconds for networks with thousands of machines.
We implemented our framework on the Red Hat Linux
platform. Our framework can reason about 84% of the
Red Hat bugs reported in OVAL, a formal vulnerability
deﬁnition language. We tested our tool on a real network
with hundreds of users. The tool detected a policy vio-
lation caused by software vulnerabilities and the system
administrators took remediation measures.
1 Introduction
the number of vulnerabilities discovered each year grow-
ing rapidly, it is impossible for system administrators
to keep the software running on their network machines
free of security bugs. One of a sysadmin’s daily chores is
to read bug reports from various sources (such as CERT,
BugTraq etc.) and understand which reported bugs are
actually security vulnerabilities in the context of his own
network. In the wake of new vulnerabilities, assessment
of their security impact on the network is important in
choosing the right countermeasures: patch and reboot,
reconﬁgure a ﬁrewall, dismount a ﬁle-server partition,
and so on.
A vulnerability analysis tool can be useful to such a sysad-
min, but only if it can automatically integrate formal vul-
nerability speciﬁcations from the bug-reporting commu-
nity, and only if the analysis can scale to networks with
thousands of machines. These two issues have not been
addressed by the previous work in this area.
We present MulVAL (Multihost, multistage Vulnerabil-
ity Analysis), a framework for modeling the interaction
of software bugs with system and network conﬁgura-
tions. MulVAL uses Datalog as its modeling language.
The information in the vulnerability database provided
by the bug-reporting community, the conﬁguration infor-
mation of each machine and the network, and other rel-
evant information are all encoded as Datalog facts. The
reasoning engine consists of a collection of Datalog rules
that captures the operating system behavior and the in-
teraction of various components in the network. Thus in-
tegrating information from the bug-reporting community
and off-the-shelf scanning tools in the reasoning model is
straightforward. The reasoning engine in MulVAL scales
well with the size of the network. Once all the informa-
tion is collected, the analysis can be performed in sec-
onds for networks with thousands of machines.
Dealing with software vulnerabilities on network hosts
poses a great challenge to network administration. With
∗This research was supported in part by DARPA award F30602-99-
1-0519 and by ARDA award NBCHC030106. This information does
not necessarily reﬂect the opinion or policy of the federal government
and no ofﬁcial endorsement should be inferred.
The inputs to MulVAL’s analysis are, Advisories: What
vulnerabilities have been reported and do they exist on
my machines? Host conﬁguration: What software and
services are running on my hosts, and how are they con-
ﬁgured? Network conﬁguration: How are my network
routers and ﬁrewalls conﬁgured? Principals: Who are
USENIX Association
14th USENIX Security Symposium
113
the users of my network? Interaction: What is the model
of how all these components interact? Policy: What ac-
cesses do I want to permit?
In the next section, we give examples of the Datalog
clauses for each of these elements and the tools that can
be leveraged to gather the information.
networkService(webServer, httpd,
TCP, 80, apache).
That is, program httpd runs on machine webServer as
user apache, and listens on port 80 using TCP protocol.
2 Representation
MulVAL comprises a scanner—run asynchronously on
each host and which adapts existing tools such as OVAL
to a great extent—and an analyzer, run on one host when-
ever new information arrives from the scanners.
Advisories. Recently, the Open Vulnerability Assess-
ment Language [26] (OVAL) has been developed that
formalizes how to recognize the presence of vulnerabili-
ties on computer systems. An OVAL scanner takes such
formalized vulnerability deﬁnitions and tests a machine
for vulnerable software. We convert the result of the test
into Datalog clauses like the following:
vulExists(webServer, ’CAN-2002-0392’, httpd).
Namely, the scanner identiﬁed a vulnerability with CVE
1 ID CAN-2002-0392 on machine webServer. The vulner-
ability involved the server program httpd. However, the
effect of the vulnerability — how it can be exploited and
what is the consequence — is not formalized in OVAL.
ICAT [18], a vulnerability database developed by the Na-
tional Institute of Standards and Technology, provides
the information about a vulnerability’s effect. We convert
the relevant information in ICAT into Datalog clauses
such as
vulProperty(’CAN-2002-0392’, remoteExploit,
privilegeEscalation).
The vulnerability enables a remote attacker to execute
arbitrary code with all the program’s privileges.
Host conﬁguration. An OVAL scanner can be directed
to extract conﬁguration parameters on a host. For exam-
ple, it can output the information of a service program
(port number, privilege, etc). We convert the output to
Datalog clauses like
Network conﬁguration. MulVAL models network (router
and ﬁrewalls) conﬁgurations as abstract host access-control
lists (HACL). This information can be provided by a ﬁre-
wall management tool such as the Smart Firewall [4].
Here is an example HACL entry that allows TCP trafﬁc
to ﬂow from internet to port 80 on webServer:
hacl(internet, webServer, TCP, 80).
Principals. Principal binding maps a principal symbol
to its user accounts on network hosts. The administrator
should deﬁne the principal binding like:
hasAccount(user, projectPC, userAccount).
hasAccount(sysAdmin, webServer, root).
Interaction.
In a multistage attack, the semantics of
the vulnerability and the operating system determine an
adversary’s options in each stage. We encode these as
Horn clauses (i.e., Prolog), where the ﬁrst line is the con-
clusion and the remaining lines are the enabling condi-
tions. For example,
execCode(Attacker, Host, Priv) :-
vulExists(Host, VulID, Program),
vulProperty(VulID, remoteExploit,
privEscalation),
networkService(Host, Program,
Protocol, Port, Priv),
netAccess(Attacker, Host, Protocol, Port),
malicious(Attacker).
That is, if Program running on Host contains a remotely
exploitable vulnerability whose impact is privilege es-
calation, the buggy program is running under privilege
Priv and listening on Protocol and Port, and the at-
tacker can access the service through the network, then
the attacker can execute arbitrary code on the machine
under Priv. This rule can be applied to any vulnerability
that matches the pattern.
114
14th USENIX Security Symposium
USENIX Association
ICAT
database
OVAL
definition
Principal and
Data Binding
Security policy
violation &
attack trace
Interaction
Rules
Prolog Environment
OVAL
Scanner
…
OVAL
Scanner
Host 1
…
Host 1
Network
Configuration
Figure 1: The MulVAL framework
Policy.
In MulVAL, a policy describes which principal
can have what access to data. Anything not explicitly
allowed is prohibited. Following is a sample policy.
allow(Everyone, read, webPages).
allow(systemAdmin, write, webPages).
Section 6 discusses how to conduct hypothetical vulner-
ability analysis in MulVAL. Performance data is shown
in section 7. Some design and implementation issues
are discussed in section 8. We compare our approach
with some related work in section 9 and conclude in sec-
tion 10.
Because Everyone is capitalized, it is a Prolog variable,
so it can match any user.
3 Vulnerability speciﬁcation
Analysis framework. Since Datalog is a subset of Pro-
log, the encoded information can be directly loaded into a
Prolog environment and executed. We use the XSB [22]
environment because it supports tabled execution of Pro-
log programs. Tabling is a form of dynamic program-
ming that avoids recomputation of previously calculated
facts. Also, tabling provides complete declarative-style
logic programing because the order of rules does not af-
fect the result of the execution. The framework is shown
in Figure 1. An OVAL scanner runs on each machine
and outputs vulnerability report and relevant conﬁgura-
tion parameters. The tuples from the scanners, the net-
work conﬁguration (represented as HACL), the deduc-
tion rules, and the administrator-deﬁned security policy
are loaded into an XSB environment. A Prolog query
(see section 5.2) can then be made to search for policy
violations. Our program can also generate a detailed at-
tack tree.
The rest of the paper describes in detail the various com-
ponents of MulVAL. Section 3 brieﬂy introduces the for-
mal vulnerability deﬁnitions from bug-reporting commu-
nities and how they are integrated into MulVAL. Sec-
tion 4 discusses the reasoning and input Datalog clauses
used in MulVAL and the analysis algorithm. Section 5
shows two examples that illustrate the analysis process.
A speciﬁcation of a security bug consists of two parts:
how to recognize the existence of the bug on a system,
and what is the effect of the bug on a system. The recog-
nition speciﬁcation is only used in the scanning of a ma-
chine, whereas the effect speciﬁcation is used in the rea-
soning process. Recently, the bug-reporting community
has started to provide these kinds of information in for-
mal, machine-readable formats.
In the next two sub-
sections, we brieﬂy describe OVAL, a formal speciﬁca-
tion language for recognizing vulnerabilities, and ICAT,
a database that provides a vulnerability’s effect.
3.1 The OVAL language and scanner
The Open Vulnerability Assessment
Language
(OVAL) [26] is an XML-based language for specifying
machine conﬁguration tests. When a new software vul-
nerability is discovered, an OVAL deﬁnition can specify
how to check a machine for its existence. Then the OVAL
deﬁnition can be fed to an OVAL-compatible scanner,
which will conduct the speciﬁed tests and report the re-
sult. Currently, OVAL vulnerability deﬁnitions are avail-
able for the Windows, Red Hat Linux and Solaris plat-
forms. OVAL-compliant scanners are available for Win-
dows and Red Hat Linux platforms. OVAL vulnerability
USENIX Association
14th USENIX Security Symposium
115
deﬁnitions have been created since 2002 and new deﬁni-
tions are being submitted and reviewed on a daily basis.
As of January 31, 2005, the number of OVAL deﬁnitions
for each platform is:
Platform
Microsoft Windows
Red Hat Linux
Sun Solaris
Total
Submitted Accepted
543
203
73
819
489
202
57
748
For example, we ran the OVAL scanner on one machine
using the latest OVAL deﬁnition ﬁle and found the fol-
lowing vulnerabilities:
same server is listening under multiple ports and proto-
cols, this is described by multiple networkService state-
ments. clientProgram describes the privilege of a client
program once it gets executed. setuidProgram speci-
ﬁes an a setuid executable on the system and its owner.
filePath speciﬁes the owner of a particular path in the
ﬁle system. nfsExport describes which portion of the
ﬁle system on an NFS server is exported to a client.
nfsMountTable describes an NFS mounting table entry
on the client machine. The scanner used in MulVAL
is implemented by augmenting a standard off-the-shelf
OVAL scanner, such that it not only reports the existence
of vulnerabilities, but also outputs machine conﬁguration
information in the form of these predicates.
CVE Id
VULNERABILITIES FOUND:
OVAL Id
-------------------------
CAN-2004-0427
OVAL2819
CAN-2004-0554
OVAL2915
CAN-2004-0495
OVAL2961
OVAL3657
CVE-2002-1363
-------------------------
3.2 Vulnerability effect
One can ﬁnd detailed information about the vulnerabil-
ities from OVAL’s web site2. For example, the OVAL
description for the bug OVAL2961 is:
We convert the output of an OVAL scanner into Datalog
clauses like the following:
Multiple unknown vulnerabilities in Linux kernel 2.4
and 2.6 allow local users to gain privileges or access
kernel memory, ...
vulExists(webServer, ’CVE-2002-0392’, httpd).
Besides producing a list of discovered vulnerabilities, the
OVAL scanner can also output a detailed machine conﬁg-
uration information in the System Characteristics Schema.
Some of this information is useful for reasoning about
multistage attacks. For example, the protocol and port
number a service program is listening on, in combination
with the ﬁrewall rules and network topology expressed
as HACL, helps determine whether an attacker can send
a malicious packet to a vulnerable program. Currently
the following predicates about machine conﬁgurations
are used in the reasoning engine.
networkService(Host, Program,
Protocol, Port, Priv).
clientProgram(Host, Program, Priv).
setuidProgram(Host, Program, Owner).
filePath(H, Owner, Path).
nfsExport(Server, Path, Access, Client).
nfsMountTable(Client, ClientPath,
Server, ServerPath).
networkService describes the port number and proto-
col under which a service program is listening and the
user privilege the program has on the machine.
If the
This informal short description highlights the effect of
the vulnerability — how the vulnerability can be exploited
and the consequence it can cause. If a machine-readable
database were to provide information on the effect of
a bug such as bug 2961 is only locally exploitable, one
could formally prove properties like if all local users are
trusted, then the network is safe from remote attacker.
Unfortunately, OVAL does not present the information
about the effect of a vulnerability in a machine readable
format. Fortunately, the ICAT database [18] classiﬁes the
effect of a vulnerability in two dimensions: exploitable
range and consequences.
• exploitable range: local, remote
• consequence: conﬁdentiality loss, integrity loss,
denial of service, and privilege escalation
A local exploit requires that the attacker already have