### 优化后的文本

#### 4.4.1 Binder Driver 异常处理与 `servicemanager` 重启

当调用 `thread_read` 时，Binder 驱动程序首先检测到 `return_error` 的状态异常，并将此错误状态返回给 `servicemanager` 的用户空间。最终，`servicemanager` 在接收到该错误状态后会退出并重新启动。

进程 `/system/bin/keystore` 托管系统服务 `android.security.keystore`，并在进程启动时在 `servicemanager` 中注册该服务。如果此进程在 `servicemanager` 启动之前启动，或者 `servicemanager` 重启而该进程未重启，则该系统服务不会在 `servicemanager` 中注册。当漏洞导致 `servicemanager` 重启时，`/system/bin/keystore` 进程不受影响。因此，除非系统完全重启，否则 `android.security.keystore` 系统服务无法再次在 `servicemanager` 中注册。由于任何需要与系统服务通信的应用都必须从 `servicemanager` 获取句柄，而现在 `android.security.keystore` 没有在 `servicemanager` 中注册，所以没有任何应用可以使用该系统服务。

`android.security.keystore` 负责 Android 系统中的密钥操作。因此，任何与密钥操作相关的操作都无法完成，例如卸载应用或添加新用户，否则系统可能会崩溃。此外，设置应用程序中的两个项目（“安全”和“更多”下的“VPN”子项）将无法点击，否则设置应用程序将会崩溃。

这个漏洞是通过手动检查 `servicemanager` 的源代码发现的。我们注意到每个函数发送的请求标志均为零，即 `servicemanager` 需要返回一个结果。我们想知道如果将标志设置为一会发生什么。通过向 `servicemanager` 发送手工制作的畸形输入，我们发现它崩溃了。随后，我们手动分析了 `servicemanager` 和 Binder 驱动程序的源代码，找到了根本原因。同时，我们也发现了 `servicemanager` 重启对 `android.security.keystore` 系统服务的影响。

#### 4.4.3 WiFi 系统服务中的漏洞

图 4：攻击系统服务

这种方法通过调用伪造接口来封装带有伪造接口描述符字符串的 Parcel，但远程真实接口由系统服务 X（表示为 IBinder 对象中的令牌）实现。当系统服务检查 Parcel 对象中的描述符字符串时，会发现差异并抛出 `SecurityException` 给系统服务 A。图 4 展示了整个过程。

这种类型的第一个漏洞是通过分析 AIDL 系统生成的代码并手动创建恶意接口发现的。然后我们将这类畸形参数的方法放入 Fuzzer 中进行测试。经过对所有 Android 系统服务的测试，我们发现几个系统服务存在漏洞。表 1 显示了这些系统服务的名称、目标易受攻击的方法和接口名称。

这些系统服务共有 10 个属于同一类别的漏洞。这些漏洞可能导致不同结果，使运行这些系统服务的不同进程崩溃，包括 `system_server` 和 `com.android.settings` 等。此外，不同的漏洞有不同的触发条件，这些条件取决于相关接口的功能。

`display` 和 `mount` 系统服务中的漏洞可以在不进行任何进一步操作的情况下直接导致系统服务崩溃，因为这两个系统服务在接收到请求时会直接调用接口。其他易受攻击的系统服务的触发条件如下：
- `launcherapps`：显示在启动器中的应用发生变化。这将阻止系统卸载任何应用。
- `bluetooth manager`：蓝牙状态发生变化。恶意应用需要请求 `BLUETOOTH` 权限。
- `fingerprint`：向该系统服务发送成功的请求。例如，可以发送删除指纹 ID 的请求。关于此系统服务的更多细节将在第 4.4.6 节中说明。
- `window`：设备屏幕方向旋转。
- `lock settings`：用户更改屏幕锁定设置。
- `wallpaper`：壁纸发生变化。
- `audio`：媒体通道和流从当前设备到外部扬声器和目标设备的路由发生变化，例如插入耳机或头戴式耳机。

总之，这种类型漏洞的触发取决于接口中的功能。漏洞 366
表 1：受影响的系统服务及其接口
| 服务名称 | 目标易受攻击方法 | 接口 |
| --- | --- | --- |
| bluetooth manager | registerAdapter | android.bluetooth.IBluetoothManagerCallback |
| launcherapps | addOnAppsChangedListener | android.content.pm.IOnAppsChangedListener |
| lock settings | registerObserver | com.android.internal.widget.ILockSettingsObserver |
| wallpaper | getWallpaper | android.app.IWallpaperManagerCallback |
| fingerprint | startListening | android.service.fingerprint.IFingerprintServiceReceiver |
| window | watchRotation | android.view.IRotationWatcher |
| display | createVirtualDisplay | android.hardware.display.IVirtualDisplayCallback |
| mount | mountObb | android.os.storage.IObbActionListener |
| audio | startWatchingRoutes | android.media.IAudioRoutesObserver |

如今，包括 Nexus 6 和 Nexus 9 在内的 Android 设备支持双频 WiFi，即 2.4GHz 和 5GHz。因此，Android 系统允许用户在这些设备中选择不同的频段。默认情况下，WiFi 频段编号只能是以下三个值之一：0（自动）、1（5GHz）和 2（2.4GHz）。当频段编号大于二时，WiFi 系统服务无法找到与该编号相关的频率段，从而导致设备无法连接到任何 WiFi AP。此漏洞已在第 2.2 节中提到。利用此漏洞可以将频段编号设置为大于二。然而，这并不是全部情况。在设置应用中也存在一个漏洞。当频段编号被设置为大于二后，如果用户尝试在设置中修改频率段，该应用将会崩溃。结合这两个漏洞，攻击者可以使设备永远无法成功连接到 WiFi AP。

设置应用中的漏洞位于 `AdvancedWifiSettings` 类中。清单 2 显示了该类的易受攻击方法。索引是从系统服务 WiFi 获取的。字符串数组 `summaries` 从资源文件 `arrays.xml` 中获取，其中只有三个项目：“自动”、“仅 5 GHz”和“仅 2.4 GHz”。因此，当索引号大于二时，会生成 `StringIndexOutOfBoundsException` 异常。由于该异常未被捕获，设置应用会崩溃。

```java
private void updateFrequencyBandSummary(Preference freqBandPref, int index) {
    String[] summaries = getResources().getStringArray(R.array.wifi_frequency_band_entries);
    freqBandPref.setSummary(summaries[index]);
}
```

综上所述，通过 WiFi 系统服务中的漏洞，可以通过向 WiFi 系统服务发送请求来将 WiFi 频段设置为任意数字。如果频段编号大于二，设备将失去与 WiFi AP 的连接，并且设置应用中的相应项目也无法打开，从而导致用户无法更改 WiFi 频段。换句话说，结合这两个漏洞会使设备永远无法成功连接到 WiFi AP。

WiFi 系统服务中的漏洞是通过运行 Fuzzer 测试该系统服务发现的。我们发现即使在系统全新重启后，设备仍无法连接到 WiFi AP。随后，我们分析了日志信息并记录了被测试的方法。通过再次阅读该系统服务的源代码，我们推测出了目标方法并找到了易受攻击的方法。

#### 4.4.4 搜索系统服务中的漏洞

搜索系统服务负责搜索 UI 并维护可搜索活动的注册表。自 Android 5.0 以来，搜索系统服务中新增了一个 `launchAssistAction` 方法，用于请求系统启动接受 `ACTION_ASSIST` 动作的活动。Google 的 Nexus 图像系统包含 Google 的 Android 应用，其中包括一个名为 `com.google.android.googlequicksearchbox` 的系统应用。该应用有一个接受 `ACTION_ASSIST` 意图的动作。因此，如果攻击者不断向搜索系统服务发送请求以调用此功能，该应用中的目标活动将被调用。然后，整个屏幕将几乎冻结，用户无法点击任何内容。电池将耗尽，设备将关机，除非按住电源按钮直到设备重新启动。

此漏洞是通过手动方式发现的。由于易受攻击的方法总是会导致 UI 被搜索活动覆盖，我们认为如果不断调用此方法，UI 可能无法使用。通过使用 Fuzzer 不断向特定方法发送请求，我们的想法得到了证实，并发现了此漏洞。

#### 4.4.5 由 NULL 引用引起的漏洞

`media.audio_policy` 系统服务中的 `registerClient` 方法没有验证传入参数是否为 NULL，而是直接使用该参数。如果该参数为 NULL，该系统服务将崩溃。该系统服务运行在 `/system/bin/mediaserver` 进程中。该系统服务的崩溃将导致该进程崩溃，然后该进程将由 `init` 进程重新启动。其他一些系统服务，如 `media.audio_flinger`、`media.player`、`media.camera` 和 `media.sound_trigger_hw` 也运行在此进程中。因此，如果该进程崩溃，这些系统服务将不可用。也就是说，用户将无法观看视频、听音乐或使用相机。因此，恶意应用可以不断发送请求以崩溃 `media.audio_policy` 系统服务和 `/system/bin/mediaserver` 进程，从而使与 `media.*` 系统服务相关的任何应用都无法使用。`media.player` 系统服务中的 `decode` 方法也有同样的漏洞。利用此漏洞的结果也是相同的。

`SurfaceFlinger` 系统服务中的 `getActiveConfig` 方法也有类似的漏洞，它没有检查传入参数是否为 NULL，而是直接使用该参数。该系统服务运行在 `system_server` 进程中。因此，该系统服务的崩溃将导致整个系统似乎重新启动。

综上所述，利用这些系统服务中的三个漏洞可以导致这些服务及其宿主进程崩溃。此外，恶意应用不需要请求任何权限。

这三个漏洞是通过 Fuzzer 自动发现的。由于这些漏洞的影响非常明显，我们很容易从日志消息中找出目标易受攻击的方法。在利用 `media.player` 系统服务中的漏洞时有一个技巧：Fuzzer 在请求数据中什么都不放，目标系统服务通过 `Parcel.readCString()` 函数获得一个字符串。该函数不像 `Parcel.readString8()` 和 `Parcel.readString16()` 函数那样返回空字符串，而是返回一个 NULL 字符串值。这样，目标系统服务获得了 NULL 字符串，从而导致崩溃。因此，`Parcel.readCString()` 函数的设计可能需要重新考虑。

#### 4.4.6 其他缺陷

Android 5.0.1 有 96 个系统服务，但其中一些在某些设备中并未使用，例如 Nexus 6 和 Nexus 9 中的 `consumer_ir`（控制 Android 设备中的红外线）以及 Nexus 9（WiFi 版本）中的电话相关系统服务。此外，一些系统服务具有权限检查功能，但其实现体为空，留下了隐藏的隐患。例如，`fingerprint` 系统服务在内核中没有硬件支持，其权限检查函数 `checkPermission` 也没有实现体，应该检查应用是否具有 `USE_FINGERPRINT` 和 `ENROLL_FINGERPRINT` 权限。结合第 4.4.1 节中描述的漏洞，恶意应用无需请求任何权限即可向该系统服务发送带有伪造接口 `android.service.fingerprint.IFingerprintServiceReceiver` 参数的请求。当攻击者向 `fingerprint` 系统服务发送另一个请求以删除指纹 ID 时，该系统服务将崩溃，因为 `nativeRemove` 函数只返回一个错误号。

综上所述，系统应减少这类系统服务，以降低攻击面。

其他一些系统服务如果被滥用，也会让用户感到烦恼。例如，`statusbar` 系统服务管理 Android 设备屏幕上的状态栏。该系统服务的一个方法可以让屏幕显示最近使用的应用。如果恶意应用不断发送请求调用此方法，这可能会让用户感到烦恼。但是，如果最近使用的应用列表为空，这种滥用将没有影响。这些系统服务中的方法不需要攻击者请求任何权限。

#### 4.5 Google 的回应

我们向 Google 通报了这些漏洞，并提供了所有技术细节。在分析了我们的报告后，Google 安全团队为这些问题创建了跟踪编号。跟踪编号为 ANDROID-20076875、ANDROID-20643294、ANDROID-21117978、ANDROID-21523339、ANDROID-21585255 和 ANDROID-22489397。我们还从他们那里获得了五个 CVE-ID。此外，我们还收到了他们的回复。