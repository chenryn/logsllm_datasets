this experiment simulates eavesdropping on a reporter typ-
ing the NPR news article. The dictionary is formed with
words that appear in six other news articles related to Greece
debt crisis, that were published a week before the target arti-
cle. The dictionary is also sorted based on frequency of word
appearances in the six chosen news articles, which improves
our chances of successfully solving a word-proﬁle collision.
Figure 6 shows the percentage of words recovered per par-
ticipant. As one should expect in a real-life attack, out of
the 40 words in the target paragraph, only 27 were present
in the contextual dictionary. Even so, our framework was
able to recover as many as 21 words (for 3 participants), by
matching with just the ﬁrst ranked word in the sorted list of
similarity scores (Figure 6). In other words, 21 words were
uniquely identiﬁed without any ambiguity, for the 3 partic-
ipants. On the lower end, only 4 words were recovered for
3 participants, but the recovery can be improved by con-
sidering words with lower rank in the sorted similarity list.
The mean word recovery using only the ﬁrst ranked word
was 31.2% (or 46.2% if we consider only the words present
in the dictionary).
5.4 Typing Behavior and Speed
During data collection, we observed that in many instances
participants did not follow our assumed layout. Some of the
participants frequently used their left hand to press a key
on the right side of the keyboard, and vice versa. Upon fur-
Figure 7: A comparison of accuracy of our attack
with Marquardt et al.
[9].
Note that in spite of not having wrist movement
information available from the non-watch-wearing
hand, our results are roughly comparable for a very
large (60,000 words) dictionary.
[16] and Berger et al.
ther investigation we also found that participant who typed
slower, were less likely to follow the left and right division of
the keyboard. This phenomenon explains why participants
who took longer to type all the 40 words saw lesser word
recovery rate in Section 5.3 experiments. Figure 6 shows
the time taken by the adversary (whose typing was used as
the training data) to type the 40 words as A on the hor-
izontal axis. Participants on the right of A typed slower
than the adversary, and we can see a trend that the recov-
ery rate drops with slower typing.
Interestingly, we see a
similar trend on the left of A as well, indicating that recov-
ery rate drops with faster typing. Our speculation is that
due to fast typing there may occur overlapping feature re-
gions leading to poorly performing L/R classiﬁcation, and
incorrect L/R classiﬁcation can signiﬁcantly aﬀect recovery
of words. Combining both the trends we arrive at a con-
clusion that participants who typed at a similar speed as
the adversary were more vulnerable to the attack. For an
adversary, the take-home message from this conclusion is
that the attack framework can be optimized by training it
with a typing speed and style expected from the potential
victim(s).
5.5 Comparison to Previous Work
From the above experiments, we saw that relying on ex-
act match with ﬁrst ranked words may not always result
in the best inference accuracy. As pointed out by earlier
emanation based keystroke inference attacks [16, 9], more
intelligent adversaries may be able to form target sentences
with lower ranked words from the sorted similarity list. So,
we re-create the experiments conducted by Marquardt et al.
[16] and Berger et al.
[9] in order to be able to compare
our attack framework directly with theirs. We use a simi-
lar sized English dictionary of 60,000 words (of length 4 or
more), sorted based on frequency of usage in English liter-
ature. We reuse 38 of the 40 words typed by participants
in Section 5.3 experiment, while remaining 2 (ﬁrst and last
name of former Greek ﬁnance minister) are not contained in
the 60,000 word dictionary. Figure 7 shows the comparison.
Our attack framework demonstrates comparable accura-
cies to that of Marquardt et al. and Berger et al. It was
able to correctly map test words to the top 10 words in the
0102030405060708090P7P5P11P24P20P16P19P18P9AP3P17P23P8P4P25P14P13P10P1P2P6P15P21P22P12Word Recovery Percentage (Top 1)Increasing Order of Time Taken by Participant to Type All Words Among All 40 Words TypedAmong 27 Words in DictionaryParticipants who Typed Faster than AdversaryParticipants who Typed Slower than Adversary0102030405060708090100Top 10Top 25Top 50Top 100Top 200Percentage Word Recovery Our AttackMarquardt et al.Berger et al.sorted similarity list 50.5% of the time, which happen to be
signiﬁcantly higher than the earlier works using smartphone
sensors. The word recovery steadily improves as we increase
the size of selection from the sorted similarity list, but our
attack trails behind the other two in case of very large selec-
tions. Note that the complexity of forming sentences with
ambiguously recovered words grow exponentially with the
selection size. Therefore, achieving a better recovery rate
with just top 10 words is more signiﬁcant than having a bet-
ter recovery rate using top 500 words. It is also important
to remember the distinct challenge faced by our technique
where no wrist movement information is available from the
non-watch-wearing hand.
We are unable to compare equitably with Wang et al.
[26] because of their diﬀerent experimental setup. However,
using a smaller dictionary of only 5,000 words, they were
able to narrow down a typed word to 24 possibilities with a
50% chance. In contrast, we use a much larger dictionary of
60,000 words, and our attack is still able to narrow down a
typed word to only 25 possibilities with about 52.5% chance.
6. LIMITATIONS
Our proposed movement-based keystroke inference attack
using smartwatches circumvents some of the limitations of
emanation-based attacks, but it faces new challenges.
In
this section, we discuss some of them.
• Ambient Wrist Movement:
In case the target par-
ticipates in some other activity (for example, having a
periodic sip of drink) in between typing, the introduced
noise can lead to incorrectly predicted words. However,
since each word is treated separately, the error will not
propagate.
• Left and Right Handedness: Although the same at-
tack framework is applicable independent of the hand on
which the smartwatch is worn, classiﬁers trained using
data with the smartwatch worn on the left hand cannot
be used to predict words typed while wearing the smart-
watch on the other hand, and vice-versa.
• Inferring Non-Dictionary Text: Our attack performs
well for dictionary words, but is incapable of recovering
numeric keys and special characters. As a result, if the ad-
versary is interested in learning data with numbers and/or
special characters (such a credit card numbers, strong
passwords, etc.), the presented framework and attack will
not be directly applicable. However, wrist movements can
still be useful in determining approximate position of keys
pressed, which may signiﬁcantly reduce the search space.
7. SMART MITIGATION
Our proposed attack demonstrates the need for reforms on
how sensors on smartwatches, and other wearable devices,
are accessed by applications. Even innocuous sensors can be
used as side-channels to indirectly infer private information.
However, there is no straightforward remedy to such privacy
threats. In this section, we present a smart countermeasure
to prevent such attacks in future.
The simplest way to protect against the presented attack
would be to remove the smartwatch from wrist while typing.
But repetitive removal of the watch (and remembering when
to remove) can become a burden for the user, as a result of
Figure 8: The protection framework against key-
stroke inference attacks. Third party applications
get unrestricted access to motion sensors only when
rTAD reports that the user is not typing at the mo-
ment.
which, the user may choose to ignore the threat altogether.
To draw a favorable balance between utility, usability and
privacy while using wearable devices, we need smarter sen-
sor access controls. We feel that sensor access controls need
to be context-aware in order to automatically manage an
application’s sensor permissions, without having the user to
manually change these settings repetitively. As part of our
eﬀorts to prevent smartwatch based side-channel inference
attacks demonstrated earlier in this paper, we design, imple-
ment and evaluate a context-aware access control framework
for smartwatch sensors. The framework (Figure 8) consists
of two key components: (i) a real-time typing activity de-
tection (rTAD) and (ii) a motion sensor access-controller
(MSAC). Preliminary evaluations of the framework lead us
to very promising results.
7.1 Typing Activity Recognition
Detecting when a smartwatch user is typing on a key-
board is not as straightforward as detecting contexts such as
location or temperature. Running complex machine learn-
ing based classiﬁcation on very limited processors of smart-
watches is not a practical solution. Moreover, rTAD must
be real-time so that protection measures can be activated
proactively. The second bottleneck is the limited battery
capacity. Sampling sensors at high frequency and perform-
ing complex computations discharges the smartwatch bat-
tery rapidly, requiring frequent recharge of the device. For
example, continuous sampling of the accelerometer and gy-
roscope at 50 Hz on our Samsung Gear Live smartwatch
completely drains the battery in less than an hour of use,
which will severely aﬀect the usability. From these observa-
tions it is evident that we have to identify features which are
easy to compute and compatible with low sensor sampling
rates. However, reducing sampling frequency also means
compromising the accuracy of classiﬁcation. To compen-
sate the reduction in sampling frequency, we design features
using a assorted set of motion sensors (sampled at approxi-
mately 15 Hz) in order to make a highly perceptive decision.
Following are the ﬁve feature we incorporate in our proposed
rTAD component:
• Energy: Activity measured in terms of cumulative lin-
ear accelerometer readings. An unworn watch lying on a
table has zero energy, while an athlete’s watch has high
energy. Typing activity typically results in low but non-
zero energy. We apply a low pass ﬁlter over the linear
MSACSensorsLinear AccelerometerAccelerometerMagnetometerPedometerrTADEnergyStep CountMagnetic Field ChangeDirection of GravityTurnaroundsOther Motion SensorsYesNoUser Typing?Untrusted 3rdParty Applications(a) N=1
(b) N=2
Figure 9: From bottom to top, (1) the 10 second detection windows where typing was detected are marked
in red vertical lines, (2) when N detections occurs within a minute, typing activity is recognized for that 15
minute time segment, and (3) the ground truth collect by prompting the participant.
accelerometer to eliminate high-frequency noise caused by
environmental factors.
• Turnarounds: Major positive to negative (or vice versa)
changes on linear accelerometer readings signify the turn-
arounds adjoining transitional movements between key
presses. Multiple turnarounds in close time proximity can
be associated with many activities, such as brushing teeth,
eating, playing drums, etc. As a result, we need additional
features to distinguish typing from other similar activities.
• Magnetic Field Change: Wrists are not rotated sig-
niﬁcantly when a user types on a QWERTY keyboard,
while sitting in front of a stationary desk. Rapid change
in north, east and nadir vectors implies non-typing activ-
ity.
• Direction of Gravity: Gravity generally remains domi-
nant on z-axis of accelerometer while typing on a horizon-
tally placed keyboard. Any major ﬂuctuations or gravity
on x-axis or y-axis implies other activities.
• Step Count: We assume that the user will be stationary
while typing on a computer keyboard. Thus, whenever
step count increases, we rule out typing activity.
At the end of every 10 seconds, rTAD conducts a binary
classiﬁcation of weather the user typed in the last 10 sec-
onds or not. All features for the binary classiﬁcation resets
at the starting of the next 10 second window. The cutoﬀ
parameters for Energy and Turnarounds features are calcu-
lated using the test data collected in Section 5, whereas cut-
oﬀ parameters for Magnetic Field Change and Direction of
Gravity features are calculated heuristically. Cutoﬀ param-
eter for Step Count is straightforward, because any increase
in the pedometer count indicates walking. The exact cutoﬀ
parameters of each feature used in our evaluation of rTAD
can be found in Table 2.
Like many other activity recognition problems, there is
an inverse relationship between precision (number of actual
typing instances divided by number of all identiﬁed typing
instances) and recall (number of identiﬁed actual typing in-
stances divided by number of actual typing instances), where
it is possible to increase one at the cost of reducing the other.
A common approach to draw a favorable balance between
false positives and false negatives is to ‘recognize’ an activity
only when multiple instances of the activity are detected in
close time proximity [23]. However, the use of rTAD is very
diﬀerent than most informative activity detection applica-
tions. The purpose of rTAD is to enable countermeasures
Table 2: The rTAD’s binary classiﬁcation uses the
following parameters. At the end of each 10 second
windows, if any of the features are outside these
parameter ranges, then non-typing activity is iden-
tiﬁed, and vice versa.
Feature
Parameters Ranges
Energy
>= 10 and = 6
Magnetic
Field Change
= 5 samples with ﬂuctuations, or grav-
ity on x-axis or y-axis
Step Count
<= P reviousStepCount