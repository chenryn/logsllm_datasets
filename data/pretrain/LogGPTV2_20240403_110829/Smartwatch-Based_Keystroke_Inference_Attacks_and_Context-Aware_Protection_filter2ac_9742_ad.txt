### Experiment Overview

This experiment simulates eavesdropping on a reporter typing an NPR news article. The dictionary is constructed from words that appear in six other news articles related to the Greek debt crisis, published a week before the target article. The dictionary is sorted based on the frequency of word appearances in these six articles, which enhances the likelihood of resolving word-profile collisions.

### Results

Figure 6 illustrates the percentage of words recovered per participant. Out of the 40 words in the target paragraph, only 27 were present in the contextual dictionary. Despite this, our framework successfully recovered up to 21 words (for 3 participants) by matching with the first-ranked word in the sorted list of similarity scores. This means that 21 words were uniquely identified without any ambiguity for these 3 participants. On the lower end, only 4 words were recovered for 3 participants, but recovery can be improved by considering words with lower ranks in the sorted similarity list. The mean word recovery using only the first-ranked word was 31.2% (or 46.2% if we consider only the words present in the dictionary).

### Typing Behavior and Speed

During data collection, we observed that many participants did not follow the assumed keyboard layout. Some participants frequently used their left hand to press keys on the right side of the keyboard and vice versa. Further investigation revealed that participants who typed slower were less likely to adhere to the left and right division of the keyboard. This explains why participants who took longer to type all 40 words had a lower word recovery rate in the Section 5.3 experiments. Figure 6 shows the time taken by the adversary (whose typing was used as training data) to type the 40 words, denoted as A on the horizontal axis. Participants to the right of A typed slower than the adversary, and we observe a trend where the recovery rate drops with slower typing. Interestingly, a similar trend is observed on the left of A, indicating that the recovery rate also drops with faster typing. We speculate that fast typing may lead to overlapping feature regions, resulting in poor L/R classification, which significantly affects word recovery. Combining both trends, we conclude that participants who typed at a similar speed as the adversary were more vulnerable to the attack. For an adversary, the key takeaway is that the attack framework can be optimized by training it with the expected typing speed and style of potential victims.

### Comparison to Previous Work

From the above experiments, we found that relying solely on exact matches with the first-ranked words may not always yield the best inference accuracy. As noted in earlier emanation-based keystroke inference attacks [16, 9], more intelligent adversaries may form target sentences using lower-ranked words from the sorted similarity list. To compare our attack framework directly with previous work, we recreated the experiments conducted by Marquardt et al. [16] and Berger et al. [9]. We used a similarly sized English dictionary of 60,000 words (of length 4 or more), sorted based on frequency of usage in English literature. We reused 38 of the 40 words typed by participants in the Section 5.3 experiment, while the remaining 2 (the first and last name of the former Greek finance minister) were not included in the 60,000-word dictionary. Figure 7 shows the comparison. Our attack framework demonstrated comparable accuracies to those of Marquardt et al. and Berger et al., correctly mapping test words to the top 10 words in the sorted similarity list 50.5% of the time, which is significantly higher than earlier works using smartphone sensors. Word recovery steadily improves as the size of the selection from the sorted similarity list increases, but our attack trails behind the other two for very large selections. Note that the complexity of forming sentences with ambiguously recovered words grows exponentially with the selection size. Therefore, achieving a better recovery rate with just the top 10 words is more significant than having a better recovery rate using the top 500 words. It is also important to remember the distinct challenge faced by our technique, where no wrist movement information is available from the non-watch-wearing hand.

We are unable to make a direct comparison with Wang et al. [26] due to their different experimental setup. However, using a smaller dictionary of only 5,000 words, they were able to narrow down a typed word to 24 possibilities with a 50% chance. In contrast, we use a much larger dictionary of 60,000 words, and our attack is still able to narrow down a typed word to only 25 possibilities with about a 52.5% chance.

### Limitations

Our proposed movement-based keystroke inference attack using smartwatches circumvents some of the limitations of emanation-based attacks but faces new challenges:

- **Ambient Wrist Movement:** If the target engages in other activities (e.g., sipping a drink) between typing, the introduced noise can lead to incorrectly predicted words. However, since each word is treated separately, the error will not propagate.
- **Left and Right Handedness:** Although the same attack framework is applicable regardless of the hand on which the smartwatch is worn, classifiers trained using data with the smartwatch worn on the left hand cannot be used to predict words typed while wearing the smartwatch on the other hand, and vice versa.
- **Inferring Non-Dictionary Text:** Our attack performs well for dictionary words but is incapable of recovering numeric keys and special characters. Thus, if the adversary is interested in data with numbers and/or special characters (such as credit card numbers, strong passwords, etc.), the presented framework and attack will not be directly applicable. However, wrist movements can still be useful in determining the approximate position of keys pressed, which may significantly reduce the search space.

### Smart Mitigation

Our proposed attack highlights the need for reforms in how sensors on smartwatches and other wearable devices are accessed by applications. Even seemingly innocuous sensors can be used as side-channels to indirectly infer private information. However, there is no straightforward remedy to such privacy threats. In this section, we present a smart countermeasure to prevent such attacks in the future.

The simplest way to protect against the presented attack would be to remove the smartwatch from the wrist while typing. However, repetitive removal of the watch (and remembering when to remove it) can become a burden for the user, leading them to ignore the threat altogether. To balance utility, usability, and privacy while using wearable devices, we need smarter sensor access controls. These controls should be context-aware to automatically manage an application's sensor permissions without requiring the user to manually change settings repeatedly. As part of our efforts to prevent smartwatch-based side-channel inference attacks, we design, implement, and evaluate a context-aware access control framework for smartwatch sensors. The framework (Figure 8) consists of two key components: (i) a real-time typing activity detection (rTAD) and (ii) a motion sensor access controller (MSAC). Preliminary evaluations of the framework have yielded promising results.

#### Typing Activity Recognition

Detecting when a smartwatch user is typing on a keyboard is not as straightforward as detecting contexts such as location or temperature. Running complex machine learning-based classification on the limited processors of smartwatches is impractical. Moreover, rTAD must be real-time to enable proactive protection measures. Another bottleneck is the limited battery capacity. Sampling sensors at high frequency and performing complex computations rapidly drain the smartwatch battery, requiring frequent recharges. For example, continuous sampling of the accelerometer and gyroscope at 50 Hz on our Samsung Gear Live smartwatch completely drains the battery in less than an hour of use, severely affecting usability. From these observations, it is evident that we need to identify features that are easy to compute and compatible with low sensor sampling rates. Reducing sampling frequency, however, compromises classification accuracy. To compensate for the reduction in sampling frequency, we design features using a variety of motion sensors (sampled at approximately 15 Hz) to make highly perceptive decisions. The following five features are incorporated in our proposed rTAD component:

- **Energy:** Activity measured in terms of cumulative linear accelerometer readings. An unworn watch lying on a table has zero energy, while an athlete's watch has high energy. Typing activity typically results in low but non-zero energy. We apply a low-pass filter over the linear accelerometer to eliminate high-frequency noise caused by environmental factors.
- **Turnarounds:** Major positive to negative (or vice versa) changes in linear accelerometer readings signify turnarounds adjoining transitional movements between key presses. Multiple turnarounds in close time proximity can be associated with various activities, such as brushing teeth, eating, or playing drums. Additional features are needed to distinguish typing from other similar activities.
- **Magnetic Field Change:** Wrists are not rotated significantly when a user types on a QWERTY keyboard while sitting at a stationary desk. Rapid changes in north, east, and nadir vectors imply non-typing activity.
- **Direction of Gravity:** Gravity generally remains dominant on the z-axis of the accelerometer while typing on a horizontally placed keyboard. Any major fluctuations on the x-axis or y-axis imply other activities.
- **Step Count:** We assume that the user will be stationary while typing on a computer keyboard. Thus, whenever the step count increases, we rule out typing activity.

At the end of every 10 seconds, rTAD conducts a binary classification to determine whether the user typed in the last 10 seconds. All features for the binary classification reset at the start of the next 10-second window. The cutoff parameters for Energy and Turnarounds features are calculated using the test data collected in Section 5, whereas the cutoff parameters for Magnetic Field Change and Direction of Gravity features are calculated heuristically. The cutoff parameter for Step Count is straightforward, as any increase in the pedometer count indicates walking. The exact cutoff parameters for each feature used in our evaluation of rTAD can be found in Table 2.

Like many other activity recognition problems, there is an inverse relationship between precision (number of actual typing instances divided by the number of all identified typing instances) and recall (number of identified actual typing instances divided by the number of actual typing instances). A common approach to balance false positives and false negatives is to 'recognize' an activity only when multiple instances of the activity are detected in close time proximity [23]. However, the use of rTAD is different from most informative activity detection applications. The purpose of rTAD is to enable countermeasures, and thus, it must be highly accurate in identifying typing activity.

### Conclusion

In conclusion, our study demonstrates the potential vulnerabilities of smartwatches in keystroke inference attacks and proposes a context-aware access control framework to mitigate these risks. By leveraging real-time typing activity detection and motion sensor access control, we aim to provide a balanced solution that ensures both utility and privacy for smartwatch users.