title:Latex Gloves: Protecting Browser Extensions from Probing and Revelation
Attacks
author:Alexander Sj&quot;osten and
Steven Van Acker and
Pablo Picazo-Sanchez and
Andrei Sabelfeld
LATEX GLOVES: Protecting Browser Extensions
from Probing and Revelation Attacks
Alexander Sj¨osten∗, Steven Van Acker∗, Pablo Picazo-Sanchez and Andrei Sabelfeld
Chalmers University of Technology
{sjosten, acker, pablop, andrei}@chalmers.se
Abstract—Browser extensions enable rich experience for the
users of today’s web. Being deployed with elevated privileges,
extensions are given the power to overrule web pages. As a
result, web pages often seek to detect the installed extensions,
sometimes for benign adoption of their behavior but sometimes
as part of privacy-violating user ﬁngerprinting. Researchers have
studied a class of attacks that allow detecting extensions by
probing for Web Accessible Resources (WARs) via URLs that
include public extension IDs. Realizing privacy risks associated
with WARs, Firefox has recently moved to randomize a browser
extension’s ID, prompting the Chrome team to plan for following
the same path. However, rather than mitigating the issue, the
randomized IDs can in fact exacerbate the extension detection
problem, enabling attackers to use a randomized ID as a reliable
ﬁngerprint of a user. We study a class of extension revelation
attacks, where extensions reveal themselves by injecting their
code on web pages. We demonstrate how a combination of
revelation and probing can uniquely identify 90% out of all
extensions injecting content, in spite of a randomization scheme.
We perform a series of large-scale studies to estimate possible
implications of both classes of attacks. As a countermeasure, we
propose a browser-based mechanism that enables control over
which extensions are loaded on which web pages and present
a proof of concept implementation which blocks both classes of
attacks.
I.
INTRODUCTION
Browser extensions, or simply extensions, enable rich ex-
perience for the users of today’s web. Since the introduction
of browser extensions in Microsoft Internet Explorer 5 in
1999 [42], they have been an important tool to customize
the browsing experience for all major browser vendors. To-
day, the most popular extensions have millions of users, e.g.
AdBlock [10] has over 10,000,000 downloads in the Chrome
Web Store [24]. All major web browsers now support browser
extensions. Mozilla and Chrome provide popular platforms
for browser extensions, with Mozilla having over 11.78%,
and Chrome over 66.1% of the browser’s market share (April
2018) [57].
Power of extensions: Firefox and Chrome provide
their extensions with elevated privileges [41]. As such, the
∗These authors contributed equally.
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23309
www.ndss-symposium.org
extensions have access to a vast amount of information, such
as reading and modifying the network trafﬁc, the ability to
make arbitrary modiﬁcations to the Document Object Model
(DOM), or having the possibility to access a user’s private
information from the browsing history or the cookies. The ex-
tension models for both Firefox and Chrome allow extensions
to read and modify the DOM of the currently loaded web
page [44], [26]. In addition to the aforementioned scenarios,
some browser extensions like password managers, have access
to sensitive data such as the user’s passwords, which can
include credentials to email accounts or social networks.
Detecting extensions: Due to the increased power
that browser extensions possess, they have been target for
detection from web pages. Today, Chrome comes with a built-
in ChromeCast extension [31], which has Web Accessible
Resources (WARs), public ﬁles which exist in the extension
and can be accessible from the context of the web page. Web
pages, such as video streaming pages, can then probe for the
ChromeCast extension, and add a cast button which would
allow to cast the video player to the connected ChromeCast.
By doing this, the browsing experience of the user is improved.
On the other side, a web page might want to prevent DOM
modiﬁcations (e.g. by detecting ad blockers), prepare for an
attack against the user of a browser extension with sensitive
information (e.g. by performing a phishing attack [16]), or
even to gain access to the elevated APIs the browser extension
has access to [3]. With the possibility of detecting browser
extensions by web pages, users can be tracked based on their
installed browser extensions [22], [55], [53]. This motivates
the focus of this paper on the problem of protecting browser
extensions from detection attacks.
Probing attack: Previous works [55], [53] have focused
on non-behavioral detection, based on a browser extension’s
listed WARs. The WARs are public resources which can be
fetched from the context of a web page using a predeﬁned
URL, consisting of a public extension ID (or Universally
Unique Identiﬁer (UUID)) and the path to that resource. With
the predeﬁned URL to fetch a WAR from an extension, a
web page can mount a probing attack, designed to detect an
extension by probing for WARs, since a response with the
probed WAR indicates the corresponding extension is installed.
This attack can be seen in Figure 1a where 1(cid:13) denotes the
requests made by the attacker to probe for an installed browser
extension. If the browser extension is in the browser context,
the attacker will get a response consisting of the requested
WAR (denoted by 2(cid:13)). This attack can be magniﬁed by probing
for a set of browser extensions’ resources, thereby enumerating
(a) Probing attack.
(b) Revelation attack.
Fig. 1: Schematic overview of the extension probing attack and extension revelation attacks. In the probing attack, a web page
probes for the presence of an extension. In the revelation attack, the extension reveals itself to the attacker by injecting content
in the web page.
many or even all installed browser extensions.
Firefox defense against probing: As the probing
attack is possible when the URLs of a browser extension’s
WARs are ﬁxed and known beforehand, Firefox implements
a randomization scheme for the WAR URLs in their new
browser extension model, WebExtensions. To make the probing
attack infeasible, each browser extension is given a random
UUID, as it “prevents websites from ﬁngerprinting a browser
by examining the extensions it has installed” [50]. The Chrome
developers are considering to implement a similar random-
ization scheme, when they have “the opportunity to make a
breaking change” [8].
Revelation attack: Starov and Nikiforakis [56] show
that browser extensions can introduce unique DOM modiﬁca-
tions, which allows an attacker to determine which extension is
active based on the DOM modiﬁcation. In contrast to probing
attacks, these attacks are behavioral attacks because they are
based on detecting behavior of a browser extension via, e.g.,
DOM modiﬁcations.
This work puts the spotlight on revelation attacks, an
important subclass of behavioral attacks, ﬁrst introduced by
S´anchez-Rola et al. in the context of Safari extensions [53].
The core of a revelation attack is to trick an extension to
inject content via WAR URLs, thereby giving up its random
UUID and provide a unique identiﬁer of the victim. This
attack is displayed in Figure 1b. When the WAR is injected
by the browser extension ( 1(cid:13)), the URL with the random
UUID becomes known to the attacker, who is monitoring
changes to the web page through JavaScript. With the random
UUID known, an attacker can construct WAR URLs to known
resources by initiating a probing attack ( 2(cid:13) and 3(cid:13)). The
probing in this case will be done for known unique resources
for browser extensions which have the injected WAR as a
resource, a set which can be precomputed by the attacker.
Upon ﬁnding one of the resources in this precomputed set,
the attacker can deduce which browser extension injected the
information, allowing derandomization of browser extensions.
Starov and Nikiforakis [56] show that browser extensions
can provide unique DOM modiﬁcations, allowing an attacker
to determine the active extension. However, it is not possible
to uniquely identify the victim only based on the browser
extensions [33]. This is the crucial part of the revelation
attack: as the random UUID becomes known to the attacker, it
enables them to uniquely identify the victim, based on that
installed extension alone. Furthermore, in most cases these
random WAR URLs can easily be used to derandomize an
extension, indicating the UUID randomization does not prevent
extension ﬁngerprinting. In fact, since a malicious web page
in many situations can not only ﬁgure out which browser
extension has the random UUID, but also uniquely identify
the user, the randomization of UUIDs ampliﬁes the effect of a
revelation attack rather than mitigating detection possibilities.
The problem with randomization of UUIDs is known, and has
been a topic of discussions among browser developers [1],
as well as presented as an attack against a built-in browser
extension which takes screenshots for Firefox [13]. Although
this attack requires user interaction, it is important to study how
many of the Firefox and Chrome extensions can be exploited
without the need for user interaction.
Empirical studies: To see how many extensions are
susceptible to the revelation attack without user interaction,
and how many web pages probe for extensions, we conduct
several empirical studies.
• We download all extensions for Firefox and Chrome
in theory, 1,301 (≈94.41%) and
and determine that,
10,459 (≈89.91%) of the Firefox and Chrome extensions
respectively that might inject content are susceptible to
the revelation attack.
• We check how many of the extensions susceptible to
the revelation attack actually reveal themselves, where
the attacker model is a generic web developer with the
ability to host a web page visited by the victim. While
the victim is on the attacker web page, the attacker will
attempt to make the installed browser extensions inject
content to make them reveal themselves, with the hope of
determining exactly which browser extensions are being
executed based on the injected content. If the randomized
token proves stable enough, the attacker may also use it
to track the victim on the Web. This attacker model ﬁts a
wide range of possible attackers, from small and obscure
web pages, to top-ranked web applications. To emulate
this, we check how many extensions reveal themselves
based on where the extension is deﬁned to inject content,
and whether the actual content on the web page matters,
showing that 2,906 out of 13,011 (≈22.3%) extensions
2
http://domain.comWeb Page Title▶Item 1▶Item 2▶Item 3▶Item 4▶Item 5Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.In enim justo, ttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus.OKCancel1extensionidWAR21http://domain.comWeb Page Title▶Item 1▶Item 2▶Item 3▶Item 4▶Item 5Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.In enim justo, ttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus.OKCancel1extensionidWAR23reveal themselves on actual pages.
• We visit the most popular 20 web pages for each of the
Alexa top 10,000 domains, and ﬁnd that 2,572 out of
those 10,000 domains probe for WARs.
“Latex Gloves” mitigation approach: In popular cul-
ture, crime scene investigators frequently use latex gloves
to avoid contaminating a crime scene with ﬁngerprints. In
this work, our goal is to prevent that extensions leave any
“ﬁngerprints” that are detectable by an attacker web page, be it
through a probing attack or a revelation attack. For this reason,
we named our approach “Latex Gloves” for extensions.
A key feature of our approach is its generality. The mecha-
nism is parametric in how whitelists (or, dually, blacklists) are
deﬁned, with possibilities of both web pages and extensions
having their say. Extension manifest ﬁles can be used for
automatic generation of whitelists already. While it might be
suitable to let the advanced user affecting the whitelists, the
goal is to relieve the average user from understanding the
workings and effects of web pages and browser extensions.
For the whitelist, which deﬁnes which extensions are allowed
to reveal themselves to the web page, there are several options,
each with its own beneﬁts and drawbacks. For example, a
mechanism similar to Google Safe Browsing [28] can be
employed, where browser vendors can provide blacklists for
our mechanism containing web pages known to perform exten-
sion ﬁngerprinting. This would put the burden on the browser
vendors to keep the blacklist up to date. Another option would
be to allow web pages to specify a whitelist, similar to how a
Content Security Policy (CSP) [58] is deﬁned. Naturally, there
is a big risk web pages would simply try to deny all extensions
any access, greatly limiting a user’s intentions. Another option
is a simple interface that allows users to classify websites
into sensitive (e.g., bank) and insensitive (e.g., news portal),
so that it is possible to conﬁgure whether an extension is
triggered on a(n) (in)sensitive website. Yet another option is
an all-or-nothing policy: either all extensions are triggered on
all insensitive websites or no extensions are triggered on any
sensitive websites. This would keep interaction with the user
to a minimum. Each option has advantages and disadvantages,
and usability studies can help determine the most suitable
alternatives.
Our vision is to have direct browser support for Latex
Gloves. However, in order to aid evaluation of the general
mechanism, we present a proof-of-concept prototype consist-
ing of a Chromium browser modiﬁcation, a Chrome extension
and a web proxy. This prototype allows the whitelisting of
those web pages that are allowed to probe for extensions, and
the whitelisting of those extensions that are allowed to reveal
themselves to web pages.
Contributions: In this work, we present the ﬁrst large-
scale empirical study of browser extensions on both Firefox
and Chrome based on the revelation attack, in order to de-
termine how ﬁngerprintable the browser extensions — and
the users of browser extensions — are, in the presence of
a random WAR URL scheme. Additionally, we propose a
countermeasure based on two whitelists, deﬁning which web
pages may interact with which extensions and vice versa,
thus allowing users to avoid being ﬁngerprinted or tracked by
untrusted web sites. We ﬁnally give some guidelines to avoid
this security issue for browser developers.
The main contributions of this paper are:
Revelation attack on Firefox. We demonstrate how to de-
randomize Firefox extensions through revelation attacks
(Section IV).
Empirical studies of Firefox and Chrome extensions.
large-scale empirical studies of Firefox
We present
and Chrome extensions regarding revelation attacks
(Section IV), where we determine how ≈ 90% out of all
extensions injecting content can be uniquely identiﬁed in
spite of a randomization scheme, as well as evaluating
how many extensions can be detected with a revelation
attack, based on the attacker model.
Empirical study of the Alexa top 10,000. We report on an
empirical study over the Alexa top 10,000 domains, with
up to 20 of the most popular pages per domain to
determine how widely the probing attack (Section III) is
used on the Web.
Resetting Firefox random UUID. We investigate the user
actions required to reset the random UUID of a Firefox
extension, in order to remove a unique ﬁngerprint acci-
dentally introduced by Mozilla, on the most prominent
operating systems: Windows, Mac OSX and Linux.
Design of a mechanism against the two attacks. We give
the design for “Latex Gloves” (Section V), a mecha-
nism against both probing and revelation attacks using
whitelists to specify which web sites are allowed to inter-
act with which extension’s WARs, and which extensions
are allowed to interact with which web sites.
Proof of concept prototype. We implement a proof of con-
cept prototype (Section VI) consisting of a modiﬁed
Chromium browser, a browser extension and a web proxy,
all based on the whitelisting mechanism. Our prototype
is evaluated (Section VII) against
two known attacks
(extension enumeration [55] and timing attack [53]).
Recommendations for browser developers. We use key in-
sights from our empirical studies to give recommenda-
tions (Section VIII) to browser developers for a browser
extension resource URL scheme.
II. BACKGROUND
An extension is a program, typically written in a combina-
tion of JavaScript, HTML and CSS. Browser extensions have
become a vital piece in the modern browser as they allow
users to customize their browsing experience by enriching the
browser functionality, e.g. by altering the DOM or executing
arbitrary scripts in the context of a web page.
JavaScript code in a browser extension can roughly be clas-
siﬁed as background pages and content scripts. Background
pages are executed in the browser context and cannot access
the DOM of the web page. Instead, they are allowed to access
the same resources as the browser, e.g. cookies, history, web
requests, tabs and geolocation. However, in order to make use