第 5步：运行程序
作为一个例子，打开你的 Web 浏览器，访问 No Starch Press 的联系页面
http://www.nostarch.com/contactus.htm。按下Ctrl-A选择该页的所有文本，按下Ctrl-C
将它复制到剪贴板。运行这个程序，输出看起来像这样：
Copied to clipboard:
800-420-7240
第7章 模式匹配与正则表达式
415-863-9900
415-863-9950
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
第 6步：类似程序的构想
识别文本的模式（并且可能用sub()方法替换它们）有许多不同潜在的应用。
 寻找网站的URL，它们以http://或https://开始。
 整理不同日期格式的日期（诸如3/14/2015、03-14-2015和2015/3/14），用唯一
的标准格式替代。
 删除敏感的信息，诸如社会保险号或信用卡号。
 寻找常见打字错误，诸如单词间的多个空格、不小心重复的单词，或者句子末
尾处多个感叹号。它们很烦人！！
7.16 小结
虽然计算机可以很快地查找文本，但你必须精确地告诉它要找什么。正则表达
式让你精确地指明要找的文本模式。实际上，某些文字处理和电子表格应用提供了
查找替换功能，让你使用正则表达式进行查找。
Python 自带的 re 模块让你编译 Regex 对象。该对象有几种方法：search()查找
单词匹配，findall()查找所有匹配实例，sub()对文本进行查找和替换。
除本章介绍的语法以外，还有一些正则表达式语法。你可以在官方Python文档
中找到更多内容：http://docs.python.org/3/library/re.html。指南网站http://www.regular-
expressions.info/也是很有用的资源。
既然已经掌握了如何操纵和匹配字符串，接下来就该学习如何在计算机硬盘上
读写文件了。
7.17 习题
1．创建Regex对象的函数是什么？
2．在创建Regex对象时，为什么常用原始字符串？
3．search()方法返回什么？
4．通过Match对象，如何得到匹配该模式的实际字符串？
5．用r'(\d\d\d)-(\d\d\d-\d\d\d\d)'创建的正则表达式中，分组0表示什么？分组1
呢？分组2呢？
6．括号和句点在正则表达式语法中有特殊的含义。如何指定正则表达式匹配
Python编程快速上手——让繁琐工作自动化
真正的括号和句点字符？
7．findall()方法返回一个字符串的列表，或字符串元组的列表。是什么决定它
提供哪种返回？
8．在正则表达式中，|字符表示什么意思？
9．在正则表达式中，?字符有哪两种含义？
10．在正则表达式中，+和*字符之间的区别是什么？
11．在正则表达式中，{3}和{3,5}之间的区别是什么？
12．在正则表达式中，\d、\w和\s缩写字符类是什么意思？
13．在正则表达式中，\D、\W和\S缩写字符类是什么意思？
14．如何让正则表达式不区分大小写？
15．字符.通常匹配什么？如果re.DOTALL作为第二个参数传递给re.compile()，
它会匹配什么？
16．.*和*?之间的区别是什么？
17．匹配所有数字和小写字母的字符分类语法是什么？
18．如果numRegex = re.compile(r'\d+')，那么numRegex.sub('X', '12 drummers, 11
pipers, five rings, 3 hens')返回什么？
19．将re.VERBOSE作为第二个参数传递给re.compile()，让你能做什么？
20．如何写一个正则表达式，匹配每3位就有一个逗号的数字？它必须匹配以
下数字：
 '42'
 '1,234'
 '6,368,745'
但不会匹配：
 '12,34,567' （逗号之间只有两位数字）
 '1234' （缺少逗号）
21．如何写一个正则表达式，匹配姓 Nakamoto 的完整姓名？你可以假定名字
总是出现在姓前面，是一个大写字母开头的单词。该正则表达式必须匹配：
 'Satoshi Nakamoto'
 'Alice Nakamoto'
 'RoboCop Nakamoto'
但不匹配：
 'satoshi Nakamoto'（名字没有大写首字母）
 'Mr. Nakamoto'（前面的单词包含非字母字符）
 'Nakamoto' （没有名字）
 'Satoshi nakamoto'（姓没有首字母大写）
22．如何编写一个正则表达式匹配一个句子，它的第一个词是 Alice、Bob 或
第7章 模式匹配与正则表达式
Carol，第二个词是eats、pets或throws，第三个词是apples、cats或baseballs。该句
子以句点结束。这个正则表达式应该不区分大小写。它必须匹配：
 'Alice eats apples.'
 'Bob pets cats.'
 'Carol throws baseballs.'
 'Alice throws Apples.'
 'BOB EATS CATS.'
但不匹配：
 'RoboCop eats apples.'
 'ALICE THROWS FOOTBALLS.'
 'Carol eats 7 cats.'
7.18 实践项目
作为实践，编程完成下列任务。
7.18.1 强口令检测
写一个函数，它使用正则表达式，确保传入的口令字符串是强口令。强口令的
定义是：长度不少于8个字符，同时包含大写和小写字符，至少有一位数字。你可
能需要用多个正则表达式来测试该字符串，以保证它的强度。
7.18.2 strip()的正则表达式版本
写一个函数，它接受一个字符串，做的事情和 strip()字符串方法一样。如果只
传入了要去除的字符串，没有其他参数，那么就从该字符串首尾去除空白字符。否
则，函数第二个参数指定的字符将从该字符串中去除。
Python编程快速上手——让繁琐工作自动化
8
第 章
读 写 文 件
当程序运行时，变量是保存数据的好方法，但如果希望
程序结束后数据仍然保持，就需要将数据保存到文件中。你
可以认为文件的内容是一个字符串值，大小可能有几个GB。
在本章中，你将学习如何使用 Python 在硬盘上创建、读取和
保存文件。
8.1 文件与文件路径
文件有两个关键属性：“文件名”（通常写成一个单词）和“路径”。路径指明了文
件在计算机上的位置。例如，我的 Windows 7 笔记本上有一个文件名为projects.docx，
它的路径在C:\Users\asweigart\Documents。文件名中，最后一个句点之后的部分称为文
件的“扩展名”，它指出了文件的类型。project.docx是一个Word文档，Users、asweigart
和 Documents 都是指“文件夹”（也成为目录）。文件夹可以包含文件和其他文件夹。
例如，project.docx在Documents文件夹中，该文件夹又在asweigart文件夹中，asweigart
文件夹又在Users文件夹中。图8-1展示了这个文件夹的组织结构。
路径中的C:\部分是“根文件夹”，它包含了所有其他文件夹。在Windows中，
根文件夹名为C:\，也称为C：盘。在OS X和Linux中，根文件夹是/。在本书中，
我使用Windows风格的根文件夹，C:\。如果你在OS X或Linux上输入交互式环境
的例子，请用/代替。
图8-1 在文件夹层次结构中的一个文件
附加卷，诸如DVD驱动器或USB闪存驱动器，在不同的操作系统上显示也不
同。在Windows上，它们表示为新的、带字符的根驱动器。诸如D:\或E:\。在OS X
上，它们表示为新的文件夹，在/Volumes文件夹下。在Linux上，它们表示为新的
文件夹，在/mnt（"mount"）文件夹下。同时也要注意，虽然文件夹名称和文件名在
Windows和OS X上是不区分大小写的，但在Linux上是区分大小写的。
8.1.1 Windows 上的倒斜杠以及OS X 和Linux上的正斜杠
在Windows上，路径书写使用倒斜杠作为文件夹之间的分隔符。但在OS X和
Linux 上，使用正斜杠作为它们的路径分隔符。如果想要程序运行在所有操作系统
上，在编写Python脚本时，就必须处理这两种情况。
好在，用 os.path.join()函数来做这件事很简单。如果将单个文件和路径上的文
件夹名称的字符串传递给它，os.path.join()就会返回一个文件路径的字符串，包含正
确的路径分隔符。在交互式环境中输入以下代码：
>>> import os
>>> os.path.join('usr', 'bin', 'spam')
'usr\\bin\\spam'
我在 Windows 上运行这些交互式环境的例子，所以，os.path .join('usr', 'bin',
'spam')返回'usr\\bin\\spam'（请注意，倒斜杠有两个，因为每个倒斜杠需要由另一个
倒斜杠字符来转义）。如果我在 OS X 或 Linux 上调用这个函数，该字符串就会是
'usr/bin/spam'。
如果需要创建文件名称的字符串，os.path.join()函数就很有用。这些字符串将传
递给几个文件相关的函数，本章将进行介绍。例如，下面的例子将一个文件名列表
中的名称，添加到文件夹名称的末尾。
138 Python编程快速上手——让繁琐工作自动化
>>> myFiles = ['accounts.txt', 'details.csv', 'invite.docx']
>>> for filename in myFiles:
print(os.path.join('C:\\Users\\asweigart', filename))
C:\Users\asweigart\accounts.txt
C:\Users\asweigart\details.csv
C:\Users\asweigart\invite.docx
8.1.2 当前工作目录
每个运行在计算机上的程序，都有一个“当前工作目录”，或 cwd。所有没有
从根文件夹开始的文件名或路径，都假定在当前工作目录下。利用os.getcwd()函数，
可以取得当前工作路径的字符串，并可以利用os.chdir()改变它。在交互式环境中输
入以下代码：
>>> import os
>>> os.getcwd()
'C:\\Python34'
>>> os.chdir('C:\\Windows\\System32')
>>> os.getcwd()
'C:\\Windows\\System32'
这里，当前工作目录设置为 C:\Python34，所以文件名 project.docx 指向
C:\Python34\project.docx。如果我们将当前工作目录改为 C:\Windows，文件就被解
释为C:\Windows\project.docx。
如果要更改的当前工作目录不存在，Python就会显示一个错误。
>>> os.chdir('C:\\ThisFolderDoesNotExist')
Traceback (most recent call last):
File "", line 1, in 
os.chdir('C:\\ThisFolderDoesNotExist')
FileNotFoundError: [WinError 2] The system cannot find the file specified:
'C:\\ThisFolderDoesNotExist'
注意 虽然文件夹是目录的更新的名称，但请注意，当前工作目录（或当前目录）是
标准术语，没有当前工作文件夹这种说法。
8.1.3 绝对路径与相对路径
有两种方法指定一个文件路径。
• “绝对路径”，总是从根文件夹开始。
• “相对路径”，它相对于程序的当前工作目录。
还有点（.）和点点（..）文件夹。它们不是真正的文件夹，而是可以在路径中
使用的特殊名称。单个的句点（“点”）用作文件夹目名称时，是“这个目录”的缩
写。两个句点（“点点”）意思是父文件夹。
图 8-2 是一些文件夹和文件的例子。如果当前工作目录设置为 C:\bacon，这些
文件夹和文件的相对目录，就设置为图8-2所示的样子。
第8章 读写文件 139
图8-2 在工作目录C:\bacon中的文件夹和文件的相对路径
相对路径开始处的.\是可选的。例如，.\spam.txt和spam.txt指的是同一个文件。
8.1.4 用os.makedirs()创建新文件夹
程序可以用os.makedirs()函数创建新文件夹（目录）。在交互式环境中输入以下
代码：
>>> import os
>>> os.makedirs('C:\\delicious\\walnut\\waffles')
这不仅将创建C:\delicious文件夹，也会在C:\delicious下创建walnut文件夹，
并在C:\delicious\walnut中创建waffles文件夹。也就是说，os.makedirs()将创建所有
必要的中间文件夹，目的是确保完整路径名存在。图 8-3 展示了这个文件夹的层次
结构。
图8-3 os.makedirs('C:\\delicious\\walnut\\waffles')的结果
8.1.5 os.path 模块
os.path模块包含了许多与文件名和文件路径相关的有用函数。例如，你已经使
用了os.path.join()来构建所有操作系统上都有效的路径。因为os.path是os模块中的
140 Python编程快速上手——让繁琐工作自动化
模块，所以只要执行import os就可以导入它。如果你的程序需要处理文件、文件夹
或文件路径，就可以参考本节中这些简短的例子。os.path模块的完整文档在Python
网站上：http://docs.python.org/3/library/os.path.html。
注意 本章后面的大多数例子都需要os模块，所以要记得在每个脚本开始处导入它，或在
重新启动IDLE时导入它。否则，就会遇到错误消息NameError: name 'os' is not defined。
8.1.6 处理绝对路径和相对路径
os.path模块提供了一些函数，返回一个相对路径的绝对路径，以及检查给定的
路径是否为绝对路径。
• 调用os.path.abspath(path)将返回参数的绝对路径的字符串。这是将相对路径转
换为绝对路径的简便方法。