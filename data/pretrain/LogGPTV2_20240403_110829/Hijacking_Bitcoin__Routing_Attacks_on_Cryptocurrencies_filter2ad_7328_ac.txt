latter phase, the attacker cuts all vulnerable connections that
cross the partition and excludes from P nodes which are
identiﬁed as leakage points. Leakage points are nodes that are
connected to the rest of the network via stealth connections.
Intercept Bitcoin trafﬁc: The attacker starts by hijacking
all the preﬁxes pertaining to the Bitcoin nodes she wants to
isolate, i.e. all the preﬁxes covering the IP addresses of nodes
in P . As a result, she receives all the trafﬁc destined to these
preﬁxes, which she splits into two packet streams: relevant and
380
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:24 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1: Partitioning algorithm.
Input: - P , a set of Bitcoin IP addresses to disconnect from the
Algorithm 2: Leakage detection algorithm.
Input: - U, a set of Bitcoin IP addresses the attacker cannot
isolated;
rest of the Bitcoin network; and
- S = [pkt1,···], an inﬁnite packet stream of
diverted Bitcoin trafﬁc resulting from the hijack of the
preﬁxes pertaining to P .
Output: False if there is no node ∈ P that can be veriﬁably
1 enforce_partition(P, S):
2 begin
3
4
5
6
7
8
9
10
U ← ∅ ;
L ← ∅ ;
while P \ (L ∪ U ) (cid:5)= ∅ do
last_seen[pkt.ip_dst] = now() ;
U ← U \ {pkt.ip_src} ;
detect_leakage(U, pkt) ;
if pkt.ip_src ∈ P ∧ pkt.ip_src /∈ L then
for pkt ∈ S do
11
12
13
14
15
16
else
for src ∈ P ∧ src /∈ L do
U ← U ∪ {src}
drop(pkt) ;
if last_seen[src] > now() − threshold then
return false ;
irrelevant. Relevant trafﬁc includes any Bitcoin trafﬁc destined
to nodes in P . This trafﬁc should be further investigated.
Irrelevant trafﬁc corresponds to the remaining trafﬁc which
should be forwarded back to its legitimate destination.
To distinguish between relevant and irrelevant trafﬁc, the
attacker applies a simple ﬁlter matching on the IP addresses,
the transport protocol and ports used, as well as certain bits
of the TCP payload. Speciﬁcally, the attacker ﬁrst classiﬁes
as irrelevant all non-TCP trafﬁc as well as all trafﬁc with
included in P . In contrast,
destination IPs which are not
the attacker classiﬁes as relevant all trafﬁc with destination
or source TCP port the default Bitcoin port (8333). Finally,
she classiﬁes as relevant all packets which have a Bitcoin
header in the TCP payload. Any remaining trafﬁc is considered
irrelevant.
Partitioning algorithm: Next,
the attacker processes the
relevant trafﬁc according to Algorithms 1 and 2. We start by
presenting their goal before describing them in more details.
The high-level goal of the algorithms is to isolate as many
nodes in P as possible. To do so, the algorithms identify
L, the nodes that are leakage points, and disconnect them
from the other nodes in P . Also, the algorithms maintain a
set of veriﬁably isolated nodes P (cid:3) = P \ {U ∪ L}, where
U corresponds to the nodes that cannot be monitored (e.g.,
because they never send packets). In particular, Algorithm 2
is in charge of identifying L, while Algorithm 1 is in charge
of identifying U and performing the isolation itself.
We now describe how the algorithms work. Algorithm 1
starts by initializing L and U to ∅. For every received packet,
the algorithm ﬁrst decides whether the packet belongs to a
monitor; and
- pkt, a (parsed) diverted Bitcoin packet.
1 detect_leakage(U, pkt):
2 begin
3
4
5
6
L ← L ∪ {pkt.ip_src} ;
drop(pkt) ;
if contains_block(pkt) ∨ contains_inv(pkt) then
if hash(pkt) ∈ Blocks(¬(P \ L)) then
connection internal to P \ L or to one between a node in
P \ L and an external node based on the source IP address.
If the source IP is in P \ L, the packet belongs to an internal
connection and it is given to Algorithm 2 to investigate if
the corresponding node acts as a leakage point (Algorithm 1,
Line 10). Otherwise, the packet belongs to a connection that
crosses the partition and is dropped (Algorithm 1, Line 12).
Given a packet originated from P \ L, Algorithm 2 checks
whether the sender of the packet is advertising information
from outside of P \L. Particularly, the attacker checks whether
the packet contains an INV message with the hash of a block
mined outside of P \ L (or the block itself). If it does so,
the sender must have a path of stealth connections to a node
outside of P \ L from which the block was transmitted. Thus
the sender is a leakage point and is added to L (Algorithm 2,
Line 5). The actual packet is also dropped to prevent this
information from spreading.
To detect whether a node in P \ L is a leakage point, an
attacker should be able to intercept at least one of that node’s
connections. Speciﬁcally, the node should have a vulnerable
connection to another node within P \ L, so that the attacker
can monitor the blocks it advertises. To keep track of the
nodes that the attacker cannot monitor, Algorithm 1 maintains
a set U which contains the nodes she has not received any
packets from for a predeﬁned time threshold. (Algorithm 1,
Line 15). Whenever one of these nodes manages to a establish
a connection that the attacker intercepts, it is removed from
U (Algorithm 1, Line 9).
Example: We now show how the algorithms work on the
example of Fig. 3b in which the attacker, AS8, aims to isolate
P = {A, B, C}. By hijacking the preﬁxes corresponding to
these nodes, the attacker intercepts the connections (B, C) and
(A, C) and feeds the relevant packets to the algorithms. Recall
that the partition is bridged by a stealth (intra-AS) connection
between nodes A and X which cannot be intercepted by the
attacker. When a block outside P is mined, node X will inform
A which then will advertise the block to C. The attacker will
catch this advertisement and will conclude that node A is a
leakage point. After that, the attacker will drop the packet and
will add A to L. As such, all future packets from A to other
nodes within P \ L = {A, B} will be dropped. Observe that
the partition isolating P \ L = {B, C} is indeed the maximum
feasible subset of P .
381
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:24 UTC from IEEE Xplore.  Restrictions apply. 
D. Correctness of the partitioning algorithm
We now prove the properties of Algorithm 1.
Theorem 1. Given P , a set of nodes to disconnect from the
Bitcoin network, there exists a unique maximal subset I ⊆
P that can be isolated. Given the assumption that Bitcoin
nodes advertise blocks that they receive to all their peers,
Algorithm 1 isolates all nodes in I, and maintains a set P (cid:3) =
P \ {U ∪ L} ⊆ I that contains all nodes in I that have a
monitored connection and are thus known to be isolated.
Proof. Consider the set of nodes S ⊆ P that has a path of
stealth connections to some nodes not in P . Clearly, nodes
in S cannot be isolated from the rest of the network by the
attacker. Let I = P \ S. Notice that I is the maximal set in
P that can be disconnected by an attacker. Now, notice that
every node in S is placed in sets L or U by the algorithm: if
the node has a monitored connection and is caught advertising
external blocks it is placed in L (Algorithm 2 Line 5). If it is
not monitored then it is placed in U (Algorithm 1, Line 15).
Notice also that the entire set I is isolated from the network.
If some node has no stealth connection outside, and was
removed solely for the lack of monitoring, it is still having
all its packets from outside of P \ L dropped – Algorithm 1
Line 12).
V. DELAYING BLOCK PROPAGATION
While partitioning attacks (Section IV) are particularly
effective and can be performed by any AS, they require full
control over the victim’s trafﬁc and are also highly visible.
In this section, we explore delay attacks, which can cause
relatively severe delays in block propagation, even when an
attacker intercepts only one of the victim’s connections, and
wishes the attack to remain relatively undetectable.
In this attack, the adversary delays the delivery of a block
by modifying the content of speciﬁc messages. This is possible
due to the lack of encryption and of secure integrity checks of
Bitcoin messages. In addition to these, the attacker leverages
the fact that nodes send block requests to the ﬁrst peer that
advertised each block and wait 20 minutes for its delivery,
before requesting it from another peer.
The ﬁrst known attack leveraging this 20 minutes time-
out [28] mandates the adversary to be connected to the victim
and to be the ﬁrst to advertise a new block. After a successful
block delay, the connection is lost. In contrast, network-based
delay attacks are more effective for at least three reasons: (i) an
attacker can act on existing connections, namely she does not
need to connect to the victim which is very often not possible
(e.g, nodes behind a NAT); (ii) an attacker does not have to be
informed about recently mined blocks by the victim’s peers to
eclipse it; and (iii) the connection that was used for the attack
is not necessarily lost, prolonging the attack.
Particularly, the effectiveness of the delay attack depends
on the direction and fraction of the victim’s trafﬁc the attacker
intercepts. Intuitively, as Bitcoin clients request blocks from
one peer at a time,
the attacker will
the probability that
attacker
victim
attacker
victim
INV  
Block #42
GET DATA 
Block #30
Block #30
GET DATA 
Block #42
Block #42
GET DATA 
Block #42
INV  
Block #42
ignored
GET DATA 
Tx #123
up to
20 min
INV  
Block #42
INV  
Block #42
GET DATA 
Block #42
Block #42
Block #4@!
wrong 
checksum!
20 min
DISCONNECT/ 
TIMEOUT
(a) (cid:3) Attacker (cid:3) victim
(b) (cid:4) Attacker (cid:4) victim
Fig. 4: An attacker can perform different delay attacks depend-
ing on the direction of trafﬁc she intercepts. When on the path
from the victim, it can modify the GETDATA message (a),
while it can modify the BLOCK message when intercepting
the opposite path (b).
intercept such a connection increases proportionally with the
fraction of the connections she intercepts. In addition, Bitcoin
connections are bi-directional TCP connections, meaning the
attacker may intercept one direction (e.g., if the victim is
multi-homed), both, or none at all. Depending on the direction
she intercepts, the attacker ﬁddles with different messages.
In the following, we explain the mechanism that is used to
perform the attack if the attacker intercepts trafﬁc from the
victim (Section V-A) or to the victim node (Section V-B).
While in both cases the attacker does delay block propagation
for 20 minutes, the former attack is more effective.
A. The attacker intercepts outgoing trafﬁc
Once a node receives a notiﬁcation that a new block is
available via an INV message, it issues a download request
to its sender using a GETDATA message. As an illustration
in Fig. 4a the victim requests Block 42 from the ﬁrst of its
peers that advertised the block. Since the attacker intercepts
the trafﬁc from the victim to this peer, she can modify this
GETDATA message to request an older block, instead of the
original one. In Fig. 4a for example, the attacker replaces the
hash corresponding to block 42 with that of block 30. The
advantage of doing so, over just dropping the packet, is that
the length of the message is left unchanged. Notice that if
the packet was dropped the attacker would need to intercept
both directions of the connection and update the TCP sequence
numbers of all following packets to ensure that the connection
is not dropped. If the block is not delivered, the victim node
will disconnect after 20 minutes. To avoid a disconnection,
the attacker can use another GETDATA, sent within the 20
minute window, to perform the reverse operation. Speciﬁcally,
she modiﬁes the hash back to the original one, requested
by the victim. Since the GETDATA message for blocks and
transactions have the same structure, the attacker is more likely
to use the latter as these are much more common. In Fig. 4a
for example, she changes the hash of the transaction (Tx #123)
382
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:24 UTC from IEEE Xplore.  Restrictions apply. 
to the hash of block 42. Since the block is delivered within the
timeout neither of the nodes disconnects or has any indication
of the attack (e.g., an error in the log ﬁles).
B. The attacker intercepts incoming trafﬁc
We now describe the mechanism an attacker would use
if she intercepts trafﬁc towards the victim, i.e. she can see
messages received by the victim, but not the messages that
it sends. This attack is less effective compared to the attack
working in the opposite direction, as it will eventually result in
the connection being dropped 20 minutes after the ﬁrst delayed
block (similarly to [28]).
In this case, the attack focuses on
the BLOCK messages rather than on the GETDATA. A naive
attack would be for the attacker to simply drop any BLOCK
message she sees. As Bitcoin relies on TCP though, doing
so would quickly kill the TCP connection. A better, yet still
simple approach is for the attacker to corrupt the contents of
a BLOCK message while preserving the length of the packet
(see Fig. 4b). This simple operation causes the BLOCK to be
discarded when it reaches the victim, because of a checksum
mismatch. Surprisingly though, we discovered (and veriﬁed)
that the victim will not request the block again, be it from the
same or any other peer. After the 20 minute timeout elapses,
the victim simply disconnects because its requested block did
not arrive on time.
An alternative for the adversary is to replace the hash of the
most recent Block with a hash of an older one in all the INV
messages the victim receives. This attack however would fail
if the attacker intercepts only a fraction of the connections, as
the victim will be informed via other connections. As such,
this practice is only useful when the attacker hijacks and thus
intercepts all the trafﬁc directed to the victim.
VI. HOW VULNERABLE IS BITCOIN TO ROUTING
ATTACKS? A COMPREHENSIVE MEASUREMENT ANALYSIS
Evaluating the impact of routing attacks requires a good
understanding of the routing characteristics of the Bitcoin
network. In this section, we explain the datasets and the
techniques used to infer a combined Internet and Bitcoin
topology (Section VI-A). We then discuss our key ﬁndings and
their impact on the effectiveness of the two routing attacks we
consider (Section VI-B).
A. Methodology and datasets
Our study is based on three key datasets: (i) the IP addresses
used by Bitcoin nodes and gateways of pools; (ii) the portion
of mining power each pool possesses; (iii) the forwarding path
taken between any two IPs. While we collected these datasets
over a period of 6 months, starting from October 2015 through
March 2016, we focus on the results from a 10 day period
starting from November 5th 2015, as the results of our analysis
do not change much through time.
Bitcoin IPs We started by collecting the IPs of regular
nodes (which host no mining power) along with the IPs of
the gateways the pools use to connect to the network. We
gathered this dataset by combining information collected by
two Bitcoin supernodes with publicly available data regarding
mining pools. One supernode was connected to ∼2000 Bitcoin
nodes per day, collecting block propagation information, while
the other was crawling the Bitcoin network, collecting the
∼6,000 IPs of active nodes each day.
We inferred which of these IPs act as the gateway of a pool
in two steps. First, we used block propagation information
(gathered by the ﬁrst supernode), considering that the gateways
of a pool are most likely the ﬁrst to propagate the blocks this
pool mines. Particularly, we assigned IPs to pools based on
the timing of the INV messages received by the supernode.
We considered a given IP to belong to a gateway of a pool
if: (i) it relayed blocks of that pool more than once during
the 10 day period; and (ii) it frequently was the ﬁrst to relay
a block of that pool (at least half as many times as the most
frequent node for that pool). Second, we also considered as