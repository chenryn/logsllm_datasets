### 5.4 成本分析：动作可编程性

除了指令RAM和动作存储器的成本外，该芯片还包括大约7000个宽度从8位到32位不等的处理器数据路径。幸运的是，由于这些处理器使用了简单的RISC指令集，它们所占的总面积仅占芯片的7%。

### 5.5 面积和功耗成本

该交换机设计有大容量的匹配表，因此匹配和动作存储器在芯片面积估算中占有重要比例（见表3）。第一项包括I/O、数据缓冲区、CPU等，其面积与传统交换机类似。可以看出，VLIW动作引擎和解析/解析器对面积的贡献相对较小。

我们之前提到，匹配阶段单元RAM相比最佳可能的RAM存在14%的面积惩罚。考虑到这一对匹配阶段SRAM（而非TCAM）的惩罚，以及比传统交换机多出的比特数（15%），多余的存储器面积约占芯片总面积的8%。如果解析器和动作引擎中的额外逻辑再增加6.2%，总的额外面积成本约为14.2%，这验证了之前的估计，即总成本差异不超过15%。

| 组件 | 面积占比 (%) | 额外成本 (%) |
| --- | --- | --- |
| I/O, 缓冲区, 队列, CPU等 | 37.0 | 0.0 |
| 匹配存储器及逻辑 | 54.3 | 8.0 |
| VLIW动作引擎 | 7.4 | 5.5 |
| 解析器+解码器 | 1.3 | 0.7 |
| **总计** | **100.0** | **14.2** |

**表3：芯片面积估算**

| 组件 | 功耗占比 (%) | 额外成本 (%) |
| --- | --- | --- |
| 输入/输出 | 26.0 | 0.0 |
| 存储器泄漏 | 43.7 | 4.0 |
| 逻辑泄漏 | 7.3 | 2.5 |
| RAM活动 | 2.7 | 0.4 |
| TCAM活动 | 3.5 | 0.0 |
| 逻辑活动 | 16.8 | 5.5 |
| **总计** | **100.0** | **12.4** |

**表4：芯片功耗估算**

在最坏的工作条件下（温度、工艺），满负荷流量（一半最小包大小，一半最大包大小1.5 KB），并且所有匹配和动作表都填满的情况下，预计交换机的功耗如表4所示。输入/输出功率与传统交换机相当。存储器泄漏功率与存储器比特数成正比，如果这种可编程交换机能以与传统交换机相同的比特数实现，则其功耗也将相当。其余项目合计占30%，由于传统交换机在匹配-动作流水线上的功能较少，这部分功耗会更低。我们估计，这种可编程芯片比传统交换机多消耗12.4%的功率，但其执行的包处理任务更为复杂。

总体而言，与传统交换机的竞争评估表明，当内存比特数相同时，这种交换机可以执行相同的功能。这进而使得芯片成本和功耗的主要方面达到平衡。尽管可编程解决方案需要承担额外的功率和面积成本，但考虑到其更全面的功能，这些成本是相对较小的。

### 6. 相关工作

灵活处理可以通过多种机制实现。在处理器上运行软件是一种常见的选择。我们的设计性能比CPU高出两个数量级 [7]，比GPU和NPU高出一个数量级 [5,9,12,29]。现代FPGA（如Xilinx Virtex-7 [35]）可以实现接近1 Tb/s的流量转发。然而，FPGA提供的总存储容量较低，模拟TCAM效果较差，功耗较高，且价格昂贵得多。目前最大的Virtex-7设备（Virtex-7 690T）提供62Mb的总存储容量，仅为我们芯片容量的10%左右。仅两个匹配阶段的TCAM就会消耗大部分用于实现用户逻辑的查找表（LUT）。其批量价格超过10,000美元，是我们预期芯片价格的一个数量级以上。这些因素共同排除了FPGA作为解决方案的可能性。

PLUG [6] 与NPU相关，它提供了多个通用处理核心，并配有存储器和路由资源。处理过程被分解为数据流图，并分布在芯片上。PLUG主要关注实现查找操作，而不是解析或包编辑。

Intel FM6000 64端口×10Gb/s交换芯片 [24] 包含一个由32个阶段组成的可编程解析器，每个阶段内部都有一个TCAM。它还包括一个两阶段的匹配-动作引擎，每个阶段包含12个1K × 36b的TCAM块。这仅代表总表容量的一小部分，其他表则在固定的流水线中。

最新的OpenFlow [31] 规范提供了MMT抽象，并部分实现了RMT模型。但其动作能力仍然有限，而且尚不清楚是否有可能或即将推出一个功能完整的动作标准。

### 7. 结论

理想的交换机或路由器应能使用多年。面对不断变化的世界，需要通过软件升级来添加新功能和新协议的可编程性。网络处理器（NPUs）是为了支持这一愿景而引入的，但无论是NPUs还是GPUs都无法达到基于ASIC的固定功能交换机的速度；也没有看到重新编程基于NPU的路由器（如Cisco的CRS-1）以添加新协议的案例研究。同样，FPGA虽然最近接近了ASIC的转发速度，但仍然过于昂贵。

我们的芯片设计重振了这一古老的可编程性愿景，在实际芯片的限制内表达了RMT模型。新的字段可以添加，查找表可以重新配置，新的报头处理也可以通过软件重新配置来实现。虽然我们的芯片不能进行正则表达式匹配或操纵包体，但由这种芯片构建的设备可以在周二作为以太网芯片，周三作为防火墙，周四作为全新的设备，只需通过正确的软件升级即可实现。挑战在于在接近太比特的容量下实现这一点。我们提出的芯片设计具有惊人的规格：包含7,000个处理器数据路径、370 Mb的SRAM和40 Mb的TCAM，分布在32个处理阶段中。

在概念上，我们将RMT模型视为一种强大的方式，将程序员所需的转发行为映射到一个由灵活的解析器、可配置的逻辑匹配阶段（带有任意宽度和深度的存储器）和灵活的包编辑组成的流水线上。这些抽象需要新的算法来高效地实现在太比特速度下的操作。我们使用可在阶段内或跨阶段组合的存储器块是实现可重构匹配表的关键；大规模使用TCAM大大提高了匹配灵活性；最后，我们使用完全并行的VLIW指令是包编辑的关键。我们的设计表明，这种显著增加的灵活性带来了不到15%的额外芯片面积和功耗成本。最终，我们解决的实现挑战可能是SIGCOMM受众不太明显的问题，即如何在芯片上高效布线。

虽然OpenFlow规范暗示了RMT，并且一些研究人员 [17] 积极追求这一梦想，但在没有具体的芯片设计证明其在太比特速度下可行之前，RMT模型仍然只是理论上的。我们的论文提出了一种具体的RMT提案，并证明了其可行性。显然，我们可以进一步去除一些因实施原因而施加的限制。但现在，讨论可以开始了。

### 致谢

感谢Nick Feamster对早期草稿的反馈，感谢Aditya Akella对最终版本的指导，以及匿名评审者的宝贵意见。

### 参考文献

[此处省略参考文献列表]

---

以上是对原文的优化，使其更加清晰、连贯和专业。希望对你有所帮助！