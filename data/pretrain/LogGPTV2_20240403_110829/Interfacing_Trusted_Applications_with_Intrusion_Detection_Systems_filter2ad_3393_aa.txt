# Interfacing Trusted Applications with Intrusion Detection Systems

**Authors: Marc G. Welz and Andrew Hutchison**

**Department of Computer Science, University of Cape Town, Rondebosch, 7701 South Africa**
- **Emails:** {mwelz, hutch}@cs.uct.ac.za
- **Affiliation:** Data Network Architectures Laboratory

## Abstract
In this paper, we present an interface that integrates intrusion detection systems (IDS) more closely with trusted system components. Unlike traditional IDS, which are loosely coupled with the components they protect, our approach argues for a tighter integration. This enhanced coupling reduces the vulnerability to desynchronization attacks, provides higher-quality information, and enables immediate, fine-grained responses. Our preliminary results indicate that this can be achieved through an external, non-specific, voluntary reference monitor, accessible to applications via a simple API. By moving most of the IDS functionality into the context of the trusted application, reasonable performance can be maintained.

## 1. Introduction
Traditional intrusion detection systems (IDS) passively intercept traffic between the entities they protect and potential attackers. This mechanism is vulnerable to desynchronization attacks and can only provide coarse, indirect responses. We propose a direct coupling between applications and IDS, where the IDS acts as an external, voluntary reference monitor. The application programmer can consult this monitor for a second opinion whenever an action with security implications is taken.

While making the IDS visible to the application programmer incurs an initial cost, it offers several advantages. It is difficult to desynchronize or bypass, and it allows for fine-grained preventative measures rather than indirect responses. Our system is primarily designed for services and applications with security functions that need to defend against subversion, which we term "trusted applications."

The following sections will cover:
- Section 2: Motivation for access control at the application level.
- Section 3: Methods for monitoring applications.
- Section 4: Instrumentation methods.
- Section 5: Need for targeted responses.
- Section 6: Direct coupling between IDS and applications.
- Section 7: Implementation of the interface, IDS/A.
- Sections 8, 9, and 10: Applications, usage, and brief results.
- Section 11: Limitations of our approach.
- Conclusion: Related work and final thoughts.

## 2. Trusted Applications
For this paper, we define a trusted application as a user-space program that interacts with multiple protection domains. A trusting application, on the other hand, operates within a single protection domain. Our definition of "application" is broad, including web servers and database managers.

When an application interacts with multiple protection domains, it becomes a target for attackers, as a subverted application can be used to cross into previously inaccessible domains. Conversely, an application restricted to one protection domain is less attractive to attackers, as subverting it yields no new rights.

### Figure 1: Trusted vs. Trusting Applications
- **Trusted Application:** Straddles multiple domains and controls exchanges across them (e.g., a database server).
- **Trusting Application:** Operates within a single domain (e.g., an interactive command interpreter).

Like an operating system, a trusted application must enforce access policies and resist subversion. However, while OS reference monitors have been well-studied, less attention has been given to access control decisions at the application level. For example, a medical database application might allow users to compute disease percentages but not retrieve individual disease statuses. This differentiation cannot be handled by the host OS without duplicating the database logic.

As systems become more connected and nested, trusted applications will likely become more significant. Applications often provide their own execution environments (e.g., Java virtual machines, database stored procedures), making it possible to nest applications (e.g., a Java-based tax calculator running inside a web browser). In such cases, the underlying OS access controls are less relevant.

## 3. Application Monitoring
Given the vulnerability of applications to subversion, it is prudent to monitor them for signs of failure. This is the field of intrusion detection, with a focus on individual applications rather than network-level detection.

### Methods of Application Monitoring
1. **Interception:** The IDS decodes the exchanges between the monitored application and other parties. This method is transparent to both the application and its peers and is common in network-based IDS.
2. **Instrumentation of a Third Party:** Uses audit or log messages from a party other than the monitored application. The third party decodes the messages, and the application is aware of this third party. Examples include application layer proxies in TIS's firewall toolkit and OS audit trails.
3. **Instrumented Application:** The application directly emits messages to the IDS. Common interfaces include Unix syslog, Windows NT event logger, XDAS, and XEMS.

### Figure 2: IDS Data Acquisition Methods
- **Interception:** Passive monitoring.
- **Third Party Instrumentation:** Uses logs from another component.
- **Application Instrumentation:** Directly from the application.

### Advantages and Disadvantages of Interception
- **Advantages:** Easy deployment, unobtrusive.
- **Disadvantages:**
  - Stateful interactions require duplicate resources.
  - Interface may be underspecified or not honored.
  - Time constraints are severe.
  - Cryptographic protections can prevent interception.

### Formalization of Interception
An application can be viewed as a function \( f \) taking current state \( st \) and input \( i \), returning output \( o \) and next state \( st+1 \):
\[ f(it, st) = (ot, st+1) \]

An intercepting IDS reconstructs the state from observed traffic:
\[ d(e, pt, qt, mt) = (mt+1, nt) \]

For the IDS to be effective, it must remain synchronized with the application, \( n = s \), to detect compromised states. Desynchronization risks include unreliable inputs/outputs, state exceeding IDS capabilities, underspecified application descriptions, and unknown initial states.

## 4. Instrumentation
Instrumenting applications or components for monitoring has a higher initial cost but is less likely to be desynchronized. Host-based IDS favor instrumentation over interception.

### Common Forms of Instrumentation
- **Audit Trail:** Records system calls made by the application. Examples include USTAT and ASAX.
- **Benefits of Direct Instrumentation:**
  - Application designer's knowledge can be leveraged for feature selection, reducing data volumes and improving performance.
  - End-to-end cryptographic protection may extend into the application, making third-party traces less useful.
  - Optimized applications may precompute data or cache results, further complicating third-party monitoring.

By instrumenting applications directly, we can take advantage of the application designer's expertise, reduce data volumes, and improve overall system performance.