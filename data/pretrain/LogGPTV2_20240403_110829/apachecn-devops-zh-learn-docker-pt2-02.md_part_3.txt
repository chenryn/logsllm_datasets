这里，我们遇到了 25 秒的延迟，因为这是我们在第二个终端屏幕上的容器上启动`docker pause`子命令的时间，如下所示:
```
$ sudo docker pause c439077aa80a
c439077aa80a  
```
当我们暂停容器时，我们使用容器上的`docker ps`子命令查看进程状态，它在同一个屏幕上，并且它清楚地指示容器已经暂停，如该命令结果所示:
```
$ sudo docker ps
CONTAINER ID IMAGE COMMAND 
CREATED STATUS PORTS NAMES
c439077aa80a ubuntu:16.04 "/bin/bash" 
47 seconds ago Up 46 seconds (Paused) 
ecstatic_torvalds 
```
我们继续发出`docker unpause`子命令，解冻我们的容器，继续执行，然后开始打印日期和时间，正如我们在前面的命令中看到的，如下所示:
```
$ sudo docker unpause c439077aa80a
c439077aa80a  
```
我们在本节开始时解释了`pause`和`unpause`命令。最后，使用`docker stop`子命令停止容器和其中运行的脚本，如下所示:
```
$ sudo docker stop c439077aa80a
c439077aa80a  
```
### 家政容器
在前面的许多例子中，当我们发出`docker ps -a`时，我们看到了许多停止的容器。如果我们选择不干预，这些容器可能会在很长一段时间内保持停止状态。一开始，它可能看起来像一个小故障，但实际上，我们可以执行操作，例如从容器提交映像并重新启动停止的容器。然而，并非所有停止的容器都将被再次重用，并且这些未使用的容器中的每一个都将占用 Docker 主机的文件系统中的磁盘空间。Docker 引擎提供了两种方法来缓解这个问题。让我们开始探索它们。
在容器启动期间，一旦容器达到停止状态，我们就可以指示 Docker 引擎清理容器。为此，`docker run`子命令支持一个`--rm`选项(例如，`sudo docker run -i -t --rm ubuntu:16.04 /bin/bash`)。
另一种方法是使用`docker ps`子命令的`-a`选项列出所有容器，然后使用`docker rm`子命令手动移除它们，如下所示:
```
$ sudo docker ps -a
CONTAINER ID IMAGE COMMAND CREATED 
STATUS PORTS 
NAMES
7473f2568add ubuntu:16.04 "/bin/bash" 5 seconds ago 
Exited (0) 3 seconds ago 
jolly_wilson 
$ sudo docker rm 7473f2568add
7473f2568add
$  
```
两个 Docker 子命令，即`docker rm`和`docker ps`，可以组合在一起自动删除当前未运行的所有容器，如下命令所示:
```
$ sudo docker rm $(sudo docker ps -aq)  
```
在前面的命令中，`$()`中的命令将生成每个容器的完整容器标识列表，无论是运行的还是不运行的，这将成为`docker rm`子命令的参数。除非使用`-f`选项强制，否则`docker rm`子命令将仅移除不处于运行状态的容器。它将为正在运行的容器生成以下错误，然后继续到列表中的下一个容器:
```
Error response from daemon: You cannot remove a running container. 
Stop the container before attempting removal or use -f  
```
也许我们可以通过使用`docker ps`子命令的过滤器(`-f`)选项过滤处于`Exited`状态的容器来避免前面的错误，如下所示:
```
$ sudo docker rm $(sudo docker ps -aq -f state=exited)
```
对输入如此长而复杂的命令感到沮丧？这是给你的好消息。`docker container prune`子命令可以方便地移除所有停止的容器。该功能在 Docker 版本中引入，以下是`docker container prune`子命令的示例运行:
![](img/image_02_008.png)
### 从容器构建映像
到目前为止，我们已经使用标准的基本映像`busybox`和`ubuntu`制作了一些容器。在本节中，让我们看看如何在运行的容器上向基础映像添加更多的软件，然后将该容器转换为供将来使用的映像。
让我们将`ubuntu:16.04`作为我们的基础映像，安装`wget`应用，然后通过执行以下步骤将运行的容器转换为映像:
1.  使用`docker run`子命令启动`ubuntu:16.04`容器，如下所示:
```
      $ sudo docker run -i -t ubuntu:16.04 /bin/bash
```
2.  启动容器后，让我们快速验证`wget`是否可用于我们的映像。为此，我们使用带有`wget`的`which`命令作为参数，在我们的例子中，它返回空的，这实质上意味着它在这个容器中找不到任何`wget`安装。该命令按如下方式运行:
```
 root@472c96295678:/# which wget
 root@472c96295678:/#
```
3.  现在，让我们继续下一步，这涉及到`wget`安装。由于它是一个全新的`ubuntu`容器，在安装`wget`之前，我们必须将其与 Ubuntu 包库同步，如下所示:
```
      root@472c96295678:/# apt-get update
```
4.  Ubuntu 包库同步完成后，我们可以继续安装`wget`，如下图所示:
```
      root@472c96295678:/# apt-get install -y wget
```
5.  完成`wget`安装后，让我们以`wget`为参数调用`which`命令来确认`wget`的安装，如下图所示:
```
 root@472c96295678:/# which wget
 /usr/bin/wget
 root@472c96295678:/#
```
6.  安装任何软件都会改变基础映像的构成，我们也可以使用*跟踪容器内部变化*部分中引入的`docker diff`子命令来跟踪。从第二个终端/屏幕，我们可以发出`docker diff`子命令，如下所示:
```
      $ sudo docker diff 472c96295678
```
前面的命令将显示对`ubuntu`映像的几百行修改。此次修改包括对软件包库、`wget`二进制文件和`wget.`支持文件的更新
7.  最后，让我们进入提交映像的最重要的一步。`docker commit`子命令可以在运行或停止的容器上执行。当在运行的容器上执行提交时，Docker 引擎将在`commit`操作期间暂停容器，以避免任何数据不一致。我们强烈建议您在停止的容器上执行`commit`操作。我们可以使用`docker commit`子命令将容器提交给映像，如下所示:
```
      $ sudo docker commit 472c96295678 \
 learningdocker/ubuntu_wget sha256:a530f0a0238654fa741813fac39bba2cc14457aee079a7ae1f 
 e1c64dc7e1ac25  
```
我们用`learningdocker/ubuntu_wget`这个名字来承诺我们的形象。
我们还看到了如何一步一步地从容器创建映像。现在，让我们使用以下命令快速列出 Docker 主机上的映像，并查看这个新创建的映像是否是映像列表的一部分:
```
$ sudo docker images
REPOSITORY TAG IMAGE ID 
CREATED VIRTUAL SIZE
learningdocker/ubuntu_wget latest a530f0a02386 
48 seconds ago 221.3 MB busybox latest e72ac664f4f0 
2 days ago 2.433 MB
ubuntu 16.04 6b4e8a7373fe 
2 days ago 194.8 MB  
```
从前面的`docker images`子命令输出中，很明显我们从容器中创建的映像非常成功。
现在，您已经学习了如何使用一些简单的步骤从容器创建映像，我们鼓励您主要使用这种方法进行测试。最优雅也是最推荐的创建映像的方法是使用`Dockerfile`方法，这将在下一章中介绍。
### 将容器作为守护程序启动
我们已经试验了一个交互式容器，跟踪对容器所做的更改，从容器中创建映像，然后获得对容器化范例的见解。现在，让我们继续了解 Docker 技术的真正主力。是的，没错。在本节中，我们将指导您完成在分离模式下启动容器所需的步骤；换句话说，您将了解作为守护程序启动容器所需的步骤。我们还将查看容器中生成的文本。
`docker run`子命令支持`-d`选项，该选项将在分离模式下启动一个容器，也就是说，它将作为守护程序启动一个容器。为了说明，让我们求助于我们在`pause` / `unpause`容器示例中使用的日期和时间脚本，如下所示:
```
$ sudo docker run -d ubuntu \
 /bin/bash -c "while true; do date; sleep 5; done"
0137d98ee363b44f22a48246ac5d460c65b67e4d7955aab6cbb0379ac421269b
```
`docker logs`子命令用于查看我们的守护程序容器生成的输出，如下所示:
```
$ sudo docker logs \
0137d98ee363b44f22a48246ac5d460c65b67e4d7955aab6cbb0379ac421269b
Sat Oct 4 17:41:04 UTC 2016
Sat Oct 4 17:41:09 UTC 2016
Sat Oct 4 17:41:14 UTC 2016
Sat Oct 4 17:41:19 UTC 2016
```
## 摘要
在本章中，我们描述了实现后阶段所需的洞察力，主要是关于 Docker 容器的操作方面。我们从澄清重要的术语开始这一章，例如映像、容器、注册中心和存储库，以便使您能够清楚地理解后面说明的概念。我们解释了如何在 Docker 存储库中搜索映像。我们还讨论了 Docker 容器的操作和处理，如何跟踪容器内部的变化，以及如何控制和管理容器。在下一章中，我们将解释以易于掌握的方式构建 Docker 映像的有前途和潜在的技术和工具。