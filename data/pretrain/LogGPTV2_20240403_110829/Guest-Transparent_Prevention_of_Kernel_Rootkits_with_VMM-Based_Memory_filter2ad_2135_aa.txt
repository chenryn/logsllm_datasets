title:Guest-Transparent Prevention of Kernel Rootkits with VMM-Based Memory
Shadowing
author:Ryan Riley and
Xuxian Jiang and
Dongyan Xu
Guest-Transparent Prevention of Kernel
Rootkits with VMM-Based Memory Shadowing
Ryan Riley1, Xuxian Jiang2, and Dongyan Xu1
1 CERIAS and Department of Computer Science, Purdue University
{rileyrd,dxu}@cs.purdue.edu
2 Department of Computer Science, North Carolina State University
PI:EMAIL
Abstract. Kernel rootkits pose a signiﬁcant threat to computer systems
as they run at the highest privilege level and have unrestricted access to
the resources of their victims. Many current eﬀorts in kernel rootkit de-
fense focus on the detection of kernel rootkits – after a rootkit attack has
taken place, while the smaller number of eﬀorts in kernel rootkit preven-
tion exhibit limitations in their capability or deployability. In this paper
we present a kernel rootkit prevention system called NICKLE which ad-
dresses a common, fundamental characteristic of most kernel rootkits: the
need for executing their own kernel code. NICKLE is a lightweight, vir-
tual machine monitor (VMM) based system that transparently prevents
unauthorized kernel code execution for unmodiﬁed commodity (guest)
OSes. NICKLE is based on a new scheme called memory shadowing,
wherein the trusted VMM maintains a shadow physical memory for a
running VM and performs real-time kernel code authentication so that
only authenticated kernel code will be stored in the shadow memory.
Further, NICKLE transparently routes guest kernel instruction fetches
to the shadow memory at runtime. By doing so, NICKLE guarantees
that only the authenticated kernel code will be executed, foiling the ker-
nel rootkit’s attempt to strike in the ﬁrst place. We have implemented
NICKLE in three VMM platforms: QEMU+KQEMU, VirtualBox, and
VMware Workstation. Our experiments with 23 real-world kernel rootk-
its targeting the Linux or Windows OSes demonstrate NICKLE’s eﬀec-
tiveness. Furthermore, our performance evaluation shows that NICKLE
introduces small overhead to the VMM platform.
1 Introduction
Kernel-level rootkits have proven to be a formidable threat to computer sys-
tems: By subverting the operating system (OS) kernel, a kernel rootkit embeds
itself into the compromised kernel and stealthily inﬂicts damages with full, un-
restricted access to the system’s resources. Eﬀectively omnipotent in the com-
promised systems, kernel rootkits have increasingly been used by attackers to
hide their presence and prolong their control over their victims.
There have been a number of recent eﬀorts in mitigating the threat of kernel
rootkits and they can mainly be classiﬁed into two categories: (1) detecting the
R. Lippmann, E. Kirda, and A. Trachtenberg (Eds.): RAID 2008, LNCS 5230, pp. 1–20, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
2
R. Riley, X. Jiang, and D. Xu
presence of kernel rootkits in a system [1, 2, 3, 4, 5] and (2) preventing the
compromise of OS kernel integrity [6, 7]. In the ﬁrst category, Copilot [4] pro-
poses the use of a separate PCI card to periodically grab the memory image of
a running OS kernel and analyze it to determine if the kernel has been compro-
mised. The work which follows up Copilot [2] further extends that capability by
detecting the violation of kernel integrity using semantic speciﬁcations of static
and dynamic kernel data. SBCFI [3] reports violations of the kernel’s control
ﬂow integrity using the kernel’s control-ﬂow graph. One common attribute of
approaches in this category is the detection of a kernel rootkit’s presence based
on certain symptoms exhibited by the kernel after the kernel rootkit has already
struck. As a result, these approaches are, by design, not capable of preventing
kernel rootkit execution in the ﬁrst place.
In the second category, Livewire [6], based on a virtual machine monitor
(VMM), aims at protecting the guest OS kernel code and critical kernel data
structures from being modiﬁed. However, without modifying the original ker-
nel code, an attacker may choose to load malicious rootkit code into the kernel
space by either exploiting kernel vulnerabilities or leveraging certain kernel fea-
tures (e.g., loadable kernel module support in modern OSes). More recently,
SecVisor [7] is proposed as a hypervisor-based solution to enforce the W⊕X
property of memory pages of the guest machine, with the goal of preventing
unauthorized code from running with kernel-level privileges. SecVisor requires
modifying kernel source code and needs the latest hardware-based virtualiza-
tion support and thus does not support closed-source OSes or legacy hardware
platforms. Moreover, SecVisor is not able to function if the OS kernel has mixed
pages that contain both code and data. Unfortunately, such mixed kernel pages
do exist in modern OSes (e.g., Linux and Windows as shown in Section 2.2).
To complement the existing approaches, we present NICKLE (“No Instruction
Creeping into Kernel Level Executed”)1, a lightweight, VMM-based system that
provides an important guarantee in kernel rootkit prevention: No unauthorized
code can be executed at the kernel level. NICKLE achieves this guarantee on top
of legacy hardware and without requiring guest OS kernel modiﬁcation. As such,
NICKLE is readily deployable to protect unmodiﬁed guest OSes (e.g., Fedora
Core 3/4/5 and Windows 2K/XP) against kernel rootkits. NICKLE is based on
observing a common, fundamental characteristic of most modern kernel rootkits:
their ability to execute unauthorized instructions at the kernel level. By removing
this ability, NICKLE signiﬁcantly raises the bar for successfully launching kernel
rootkit attacks.
To achieve the “NICKLE” guarantee, we ﬁrst observe that a kernel rootkit
is able to access the entire physical address space of the victim machine. This
observation inspires us to impose restricted access to the instructions in the
kernel space: only authenticated kernel instructions can be fetched for execution.
Obviously, such a restriction cannot be enforced by the OS kernel itself. Instead,
1 With a slight abuse of terms, we use NICKLE to denote both the system itself and
the guarantee achieved by the system – when used in quotation marks.
Guest-Transparent Prevention of Kernel Rootkits
3
a natural strategy is to enforce such memory access restriction using the VMM,
which is at a privilege level higher than that of the (guest) OS kernel.
Our main challenge is to realize the above VMM-level kernel instruction fetch
restriction in a guest-transparent, real-time, and eﬃcient manner. An intuitive
approach would be to impose W⊕X on kernel memory pages to protect existing
kernel code and prevent the execution of injected kernel code. However, due to
the existence of mixed kernel pages in commodity OSes, this approach is not
viable for guest-transparent protection. To address that, we propose a VMM-
based memory shadowing scheme for NICKLE that will work in the face of mixed
kernel pages. More speciﬁcally, for a virtual machine (VM), the VMM creates
two distinct physical memory regions: a standard memory and a shadow memory.
The VMM enforces that the guest OS kernel cannot access the shadow memory.
Upon the VM’s startup, the VMM performs kernel code authentication and
dynamically copies authenticated kernel instructions from the standard memory
to the shadow memory. At runtime, any instruction executed in the kernel space
must be fetched from the shadow memory instead of from the standard memory.
To enforce this while maintaining guest transparency, a lightweight guest memory
access indirection mechanism is added to the VMM. As such, a kernel rootkit
will never be able to execute any of its own code as the code injected into the
kernel space will not be able to reach the shadow memory.
We have implemented NICKLE in three VMMs: QEMU[8] with the KQEMU
accelerator, VirtualBox [9], and VMware Workstation. Our evaluation results
show that NICKLE incurs a reasonable impact on the VMM platform (e.g.,
1.01% on QEMU+KQEMU and 5.45% on VirtualBox when running UnixBench).
NICKLE is shown capable of transparently protecting a variety of commodity
OSes, including RedHat 8.0 (Linux 2.4.18 kernel), Fedora Core 3 (Linux 2.6.15
kernel), Windows 2000, and Windows XP. Our results show that NICKLE is
able to prevent and gracefully respond to 23 real-world kernel rootkits targeting
the above OSes, without requiring details of rootkit attack vectors. Finally, our
porting experience indicates that the NICKLE design is generic and realizable
in a variety of VMMs.
2 NICKLE Design
2.1 Design Goals and Threat Model
Goals and Challenges. NICKLE has the following three main design goals:
First, as its name indicates, NICKLE should prevent any unauthorized code
from being executed in the kernel space of the protected VM. The challenges
of realizing this goal come from the real-time requirement of prevention as well
as from the requirement that the guest OS kernel should not be trusted to
initiate any task of the prevention – the latter requirement is justiﬁed by the
kernel rootkit’s highest privilege level inside the VM and the possible existence
of zero-day vulnerabilities inside the guest OS kernel. NICKLE overcomes these
challenges using the VMM-based memory shadowing scheme (Section 2.2). We
4
R. Riley, X. Jiang, and D. Xu
VM
Applications
Guest OS
VM
Applications
Guest OS
NICKLE Module
VMM
Guest physical address
NICKLE Module
VMM
Kernel code authentication and copying
Other memory accesses
Guest kernel instruction fetch
Kernel code
Auth. kernel code
Physical
Memory
Kernel code
Auth. kernel code
Physical
Memory
Kernel code
Auth. kernel code
Kernel code
Auth. kernel code
Standard Memory
Shadow Memory
Standard Memory
Shadow Memory
(a) Kernel code authorization and copying
(b) Guest physical address redirection
Fig. 1. Memory shadowing scheme in NICKLE
note that the scope of NICKLE is focused on preventing unauthorized kernel
code execution. The prevention of other types of attacks (e.g., data-only attacks)
is a non-goal and related solutions will be discussed in Section 5.
Second, NICKLE should not require modiﬁcations to the guest OS kernel.
This allows commodity OSes to be supported “as is” without recompilation and
reinstallation. Correspondingly, the challenge in realizing this goal is to make
the memory shadowing scheme transparent to the VM with respect to both the
VM’s function and performance.
Third, the design of NICKLE should be generically portable to a range of
VMMs. Given this, the challenge is to ensure that NICKLE has a small footprint
within the VMM and remains lightweight with respect to performance impact.
In this paper we focus on supporting NICKLE in software VMMs. However, we
expect that the exploitation of recent hardware-based virtualization extensions
[10, 11] will improve NICKLE’s performance even further.
In addition, it is also desirable that NICKLE facilitate various ﬂexible response
mechanisms to be activated upon the detection of an unauthorized kernel code
execution attempt. A ﬂexible response, for example, is to cause only the oﬀending
process to fail without stopping the rest of the OS. The challenge in realizing
this is to initiate ﬂexible responses entirely from outside the protected VM and
minimize the side-eﬀects on the running OS.
Threat Model and System Assumption. We assume the following ad-
versary model when designing NICKLE: (1) The kernel rootkit has the highest
privilege level inside the victim VM (e.g., the root privilege in a UNIX system);
(2) The kernel rootkit has full access to the VM’s memory space (e.g., through
/dev/mem in Linux); (3) The kernel rootkit aims at stealthily maintaining and
hiding its presence in the VM and to do so, the rootkit will need to execute its
own (malicious) code in the kernel space. We note that such a need exists in
most kernel rootkits today, and we will discuss possible exceptions in Section 5.
Guest-Transparent Prevention of Kernel Rootkits
5
Meanwhile, we assume a trusted VMM that provides VM isolation. This as-
sumption is shared by many other VMM-based security research eﬀorts [1, 6, 12,
13, 14, 15]. We will discuss possible attacks (e.g., VM ﬁngerprinting) in Section
5. With this assumption, we consider the threat from DMA attacks launched
from physical hosts outside of the scope of this work.2
2.2 Enabling Scheme and Techniques
Memory Shadowing. The memory shadowing scheme enforces the “NICKLE”
property: For a VM, apart from its standard physical memory space, the VMM
also allocates a separate physical memory region as the VM’s shadow memory
(Figure 1) which is transparent to the VM and controlled by the VMM. Upon
the startup of the VM’s OS, all known-good, authenticated guest kernel instruc-
tions will be copied from the VM’s standard memory to the shadow memory
(Figure 1(a)). At runtime, when the VM is about to execute a kernel instruc-
tion, the VMM will transparently redirect the kernel instruction fetch to the
shadow memory (Figure 1(b)). All other memory accesses (to user code, user
data, and kernel data) will proceed unhindered in the standard memory.
The memory shadowing scheme is motivated by the observation that modern
computers deﬁne a single memory space for all code – both kernel code and user
code – and data. With the VMM running at a higher privilege level, we can now
“shadow” the guest kernel code space with elevated (VMM-level) privileges to
ensure that the guest OS kernel itself cannot access the shadowed kernel code
space containg the authenticated kernel instructions. By doing so, even if a kernel
rootkit is able to inject its own code into the VM’s standard memory, the VMM
will ensure that the malicious code never gets copied over to the shadow memory.
Moreover, an attempt to execute the malicious code can be caught immediately
due to the inconsistency between the standard and shadow memory contents.
The astute reader may be asking “How is NICKLE functionally diﬀerent from
W⊕X?” In essence, W⊕X is a scheme that enforces the property, “A given
memory page will never be both writable and executable at the same time.”
The basic premise behind this scheme is that if a page cannot be written to
and later executed from, code injection becomes impossible. There are two main
reasons why this scheme is not adequate for stopping kernel level rootkits:
First, W⊕X is not able to protect mixed kernel pages with both code and
data, which do exist in current OSes. As a speciﬁc example, in a Fedora Core
3 VM (with the 32-bit 2.6.15 kernel and the NX protection), the Linux kernel
stores the main static kernel text in memory range [0xc0100000, 0xc02dea50]
and keeps the system call table starting from virtual address 0xc02e04a0. No-
tice that the Linux kernel uses a large page size (2M B) to manage the physical
memory,3 which means that the ﬁrst two kernel pages cover memory ranges
2 There exists another type of DMA attack that is initiated from within a guest VM.
However, since the VMM itself virtualizes or mediates the guest DMA operations,
NICKLE can be easily extended to intercede and block them.
3 If the NX protection is disabled, those kernel pages containing static kernel text will
be of 4M B in size.
6
R. Riley, X. Jiang, and D. Xu
[0xc0000000, 0xc0200000) and [0xc0200000, 0xc0400000), respectively. As a re-
sult, the second kernel page contains both code and data, and thus must be
marked both writable and executable – This conﬂicts with the W⊕X scheme.
Mixed pages also exist for accommodating the code and data of Linux loadable
kernel modules (LKMs) – an example will be shown in Section 4.1. For the Win-
dows XP kernel (with SP2), our investigation has conﬁrmed the existence of
mixed pages as well [16]. On the other hand, NICKLE is able to protect mixed
pages.4
Second, W⊕X assumes only one execution privilege level while kernel rootkit
prevention requires further distinction between user and kernel code pages. For
example, a page may be set executable in user mode but non-executable in
kernel mode. In other words, the sort of permission desired is not W⊕X, but
W⊕KX (i.e. not writable and kernel-executable at the same time.) Still, we point
out that the enforcement of W⊕KX is not eﬀective for mixed kernel pages and,
regardless, not obvious to construct on current processors that do not allow such
ﬁne-grained memory permissions.
Another question that may be asked is, “Why adopt memory shadowing when
one could simply guard kernel code by keeping track of the ranges of valid
kernel code addresses ?” Indeed, NICKLE is guided by the principle of kernel
code guarding, but does so diﬀerently from the brute-force approach of track-
ing/checking kernel code address ranges – mainly for performance reasons. More
speciﬁcally, the brute-force approach could store the address ranges of valid
kernel code in a data structure (e.g., tree) with O(logN) search time. On the
other hand, memory shadowing allows us to locate the valid kernel instruction
in the shadow memory in O(1) time thus signiﬁcantly reducing the process-
ing overhead. In addition, memory shadowing makes it convenient to compare
the instructions in the shadow memory to those in the standard memory. If
they diﬀer (indicating malicious kernel code injection or modiﬁcation), a num-
ber of response actions can be implemented based on the diﬀerence (details in
Section 3).
Guest Memory Access Indirection. To realize the guest memory shadow-
ing scheme, two issues need to be resolved. First, how does NICKLE ﬁll up
the guest shadow memory with authenticated kernel code? Second, how does
NICKLE fetch authenticated kernel instructions for execution while detecting
and preventing any attempt to execute unauthorized code in the kernel space?
We note that our solutions have to be transparent to the guest OS (and thus
to the kernel rootkits). We now present the guest memory access indirection
technique to address these issues.
4 We also considered the option of eliminating mixed kernel pages. However, doing so