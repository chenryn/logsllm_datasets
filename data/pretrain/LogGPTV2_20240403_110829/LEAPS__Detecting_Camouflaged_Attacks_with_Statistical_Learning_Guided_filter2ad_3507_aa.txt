# LEAPS: Detecting Camouflaged Attacks with Statistical Learning Guided by Program Analysis

**Authors:** Zhongshu Gu, Kexin Pei, Qifan Wang, Luo Si, Xiangyu Zhang, Dongyan Xu  
**Affiliation:** Department of Computer Science and CERIAS, Purdue University, West Lafayette, IN, USA, 47907-2107  
**Emails:** {gu16, kpei, wang868, lsi, xyzhang, dxu}@cs.purdue.edu  
**Conference:** 2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN 2015)  
**DOI:** 10.1109/DSN.2015.34  
**Copyright:** 978-1-4799-8629-3/15 $31.00 © 2015 IEEE

## Abstract
Modern cyberinfrastructures face increasingly sophisticated attacks that embed malicious payloads within benign programs. Traditional attack detection methods based on statistical learning can generate misleading decision boundaries when dealing with noisy data containing both benign and malicious behaviors. Conversely, formal program analysis-based methods may lack completeness or adaptability in modeling attack behaviors. To address these limitations, we introduce LEAPS, an attack detection system that combines supervised statistical learning with program analysis to classify benign and malicious system events. LEAPS uses control flow graphs (CFGs) inferred from system event logs to prune the training data, leading to more accurate classification models. Our extensive evaluation shows that LEAPS consistently outperforms pure statistical learning models in detecting real-world camouflaged attacks.

## Keywords
Attack Detection, Statistical Learning, Program Analysis

## I. Introduction
Enterprise cyberinfrastructures are under increasing threat from advanced attack techniques driven by financial motives, such as stealing sensitive data, gathering competitive intelligence, or concealing unauthorized access. These attacks often exploit system vulnerabilities or use social engineering to initiate stealthy and persistent backdoors, which can remain undetected for extended periods. We refer to these as "camouflaged attacks" due to their ability to blend in with benign program behavior.

Recent research in host-based attack detection can be categorized into two main approaches: program analysis and statistical learning.

### Attack Detection Based on Program Analysis
Some methods [1]–[5] perform static analysis on applications to create precise execution models. However, the overhead, complexity, and intentional obfuscation limit their practicality. Other systems [6]–[8] use dynamic analysis to build deterministic behavior models by profiling application-system interactions.

### Attack Detection Based on Statistical Learning
Statistical learning-based systems [9]–[18] use techniques like association rules, frequency rules, histogram-based methods, hidden Markov models (HMMs), and Support Vector Machines (SVMs) to classify benign and malicious behaviors. These systems are robust in handling incomplete data and often achieve better results than program analysis methods.

However, current detection systems struggle to effectively distinguish between benign and malicious behaviors in camouflaged attacks, where malicious code runs concurrently with benign code, creating noisy training datasets.

To overcome these challenges, we developed LEAPS, which integrates the strengths of both statistical learning and program analysis. LEAPS uses CFGs derived from system event logs to refine its statistical learning model, enhancing detection accuracy.

## II. System Overview

### A. Threat Model
We assume that adversaries have already infiltrated the system through physical access, social engineering, or exploiting unpatched vulnerabilities. They may implant a backdoor in a long-running benign program. LEAPS aims to detect anomalous behavior and backtrack to the entry point of the attack.

### B. Workflow of LEAPS
LEAPS operates in two phases: Training and Testing.

#### 1) Training Phase
The training phase involves the following steps:
- **Raw Log Parsing:** Parse raw log files to extract system events and stack traces.
- **Stack Partitioning:** Split stack traces into application and system parts.
- **Data Preprocessing:** Extract features from system stack traces using hierarchical clustering.
- **CFG Inference:** Build CFGs from application stack traces and compare them to assign weights to events.
- **Supervised Statistical Learning:** Use Weighted SVM to train a classifier based on the weighted dataset.

#### 2) Testing Phase
In the testing phase, apply the trained classifiers to new system event logs to detect camouflaged attacks.

## III. System Design

### A. Data Preprocessing
Data preprocessing is crucial for preparing the input for statistical learning. LEAPS uses system events and correlated system-level stack traces to characterize program behavior. Each system event is represented as a 3-tuple: {Event_Type, Lib, Func}. Hierarchical clustering is used to group similar library and function sets, and the resulting clusters are used as input for the statistical learning model.

### B. Control Flow Graph Inference
LEAPS infers CFGs from application stack traces. The CFGs are used to measure the distance of each execution path in the mixed CFG to the benign CFG. This distance is used to assign weights to events in the mixed dataset, improving the accuracy of the statistical learning model.

## IV. Implementation Details
(Section to be added)

## V. Evaluation
(Section to be added)

## VI. Limitations and Future Work
(Section to be added)

## VII. Related Work
(Section to be added)

## VIII. Conclusion
(Section to be added)

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the paper's content.