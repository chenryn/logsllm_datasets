## Proposed functionality
A new `setStorageState()` API on the `context` object that applies any given
storage state to the current page.
    context.setStorageState({ path: '/storage.json' })
    context.setStorageState({
      cookies: [...],
      origins: [...]
    })
This API is opposite in its functionality to the existing
`context.storageState()` that flushes the storage state to the disk.
## Use case
The Authentication docs showcase a great example of creating a browser
context, performing sign-in, and storing that session in a JSON file. However,
to _use_ that session file you need to create a new browsing context. This is
not suitable when using `@playwright/test` and wanting to control auth state
per test.
The recommended example shows that we can create separate contexts with a
different session, and that works great, but you lose the ability to use the
already existing `context` that gets created by the Playwright test runner.
You also lose any custom fixtures as they are attached to that default
context.
In general, I see no reason not to have the "read" functionality for the
session state.
## Implementation
You're already using this logic in Playwright, it's just internal:
playwright/packages/playwright-core/src/server/browserContext.ts
Lines 512 to 537 in 1303e3e
|  async setStorageState(metadata: CallMetadata, state:
NonNullable) {  
---|---  
|  this._settingStorageState = true;  
|  try {  
|  if (state.cookies)  
|  await this.addCookies(state.cookies);  
|  if (state.origins && state.origins.length) {  
|  const internalMetadata = serverSideCallMetadata();  
|  const page = await this.newPage(internalMetadata);  
|  await page._setServerRequestInterceptor(handler => {  
|  handler.fulfill({ body: '' }).catch(() => {});  
|  });  
|  for (const originState of state.origins) {  
|  const frame = page.mainFrame();  
|  await frame.goto(metadata, originState.origin);  
|  await frame.evaluateExpression(`  
|  originState => {  
|  for (const { name, value } of (originState.localStorage || []))  
|  localStorage.setItem(name, value);  
|  }`, true, originState, 'utility');  
|  }  
|  await page.close(internalMetadata);  
|  }  
|  } finally {  
|  this._settingStorageState = false;  
|  }  
|  }  
I propose to abstract it into a general function, dropping internals like
`this. _settingStorageState`, and reuse it in the new `page.setStorageState()`
API.