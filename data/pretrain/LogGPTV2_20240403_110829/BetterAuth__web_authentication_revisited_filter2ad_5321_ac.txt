### HTTP Requests and Authentication

Whenever an authentication process is initiated with a BetterAuth-enabled site, or a request is sent to a domain for which an established BetterAuth authentication context exists, the extension becomes active.

#### 4.1.1 Initial Authentication

If an HTML form marked with the custom attribute `data-purpose="better-auth"` is processed during rendering, the extension becomes active and intercepts the form submission. Before submitting the form, the username and password data are retrieved from the request and used to initiate the BetterAuth authentication handshake. After receiving a 401 response, the extension removes the password value from the request data and submits the form.

#### 4.1.2 Authentication Tracking

As discussed in Section 3.4, the authentication tracking mechanism mimics the behavior of web browsers by automatically adding cookie headers to requests targeted to the cookie's domain. The extension keeps track of currently active authentication contexts. When a request is targeted towards a domain with an existing authentication context, the extension verifies that the request originated from within this authenticated context or whether the target URL is listed in the application’s set of public interfaces (see Section 3.5). If one of these conditions is satisfied, the extension transparently signs the outgoing request.

### 4.2 JavaScript Implementation

Our solution is designed to support a pure JavaScript fallback for browsers that do not natively support our authentication scheme. This allows for a transitional phase where developers can use the mechanism without providing a separate authentication scheme for legacy browsers. In this section, we document the design of the JavaScript implementation of BetterAuth.

#### 4.2.1 General Approach

The core of the transitional implementation involves replacing native navigation operations, such as form submissions and page transitions, with a JavaScript-initiated loading mechanism. This ensures that the initial authentication handshake can be executed and all further outgoing requests can be signed by JavaScript before being sent to the server. This approach is realized using four distinct elements: dedicated form handling for the initial authentication (Section 4.2.2), a request signing component (Section 4.2.4), and a dedicated page loader object for pure page transitions (Section 4.2.5). Additionally, we utilize domain isolation to keep the key material out of reach of potentially untrusted JavaScript code (Section 4.2.3).

#### 4.2.2 Initial Authentication

Implementing the initial authentication handshake is straightforward. The BetterAuth-enabled HTML form triggers a JavaScript function on form submission, which conducts the key exchange handshake. The username and password values are read from the DOM elements. Using the `XMLHttpRequest` object, the script creates an OPTIONS request to the server’s authentication interface. After receiving the server’s encrypted Diffie-Hellman key and the optional password salt in the 401 response, the JavaScript calculates the browser’s Diffie-Hellman key and encrypts it with the password. The session signing key is then calculated using the two key fragments.

#### 4.2.3 Isolating the Secure Key Storage

As stated in Section 3.1, it is unacceptable for any aspect of our technique to introduce security flaws that are not present in the current state. Therefore, we must take measures to separate the key material from potentially untrusted JavaScript code.

A careless implementation could lead to a situation where an XSS attack could steal the session signing key and leak it to the adversary. To avoid this, we leverage the guarantees provided by the same-origin policy and the `postMessage` API. We introduce a separate subdomain responsible for handling and storing the signing key. This domain contains only static JavaScript dedicated to this task. An HTML document hosted on this subdomain, containing all necessary scripts, is included in the main application’s pages using an invisible iframe.

The main application communicates with the key handling scripts on the secure subdomain using the `postMessage` API. After a successful key exchange, the component responsible for the initial handshake passes the session signing key via `postMessage` to the secure subdomain. The receiving script stores the key, depending on its configured lifespan, either via the subdomain’s `sessionStorage` or `localStorage` mechanism.

#### 4.2.4 JavaScript-Based Request Signing

Following the initial authentication, all further requests must carry a correct HMAC signature to be recognized as authenticated. All outgoing requests are initiated via JavaScript by replacing hyperlink targets and form actions with JavaScript event handlers. These handlers pass the target URL to the signing component of our implementation. The component normalizes the request’s data and then passes it, using the `postMessage` API, to the secure iframe.

The `postMessage` API ensures that the origin domain of incoming requests is communicated in an unspoofable manner. The request signing script verifies that the call to the signing function was created within an authenticated context (see Section 3.5). The signing component retrieves the signing key from `localStorage`, conducts the signing process, and passes the resulting values back to the main application using the `postMessage` functionality.

For legacy applications, adapting to support the novel functionality may require traversing the application’s pages' DOM on load and patching the encountered links and forms to use the request signing functions. Alternatively, server-side rewriting of outgoing HTML can modify hyperlinks and form-actions to utilize JavaScript page navigation. For applications relying on AJAX-driven client/server interaction, the request signing functionality can be introduced transparently by replacing the `XMLHttpRequest` object with an object wrapper that implements the necessary actions.

#### 4.2.5 Accessing Public Interfaces

The final piece in the transitional implementation is a facility that enables external sites to navigate to the application’s public interfaces (see Section 3.5). A public interface is a URL to which external sites are allowed to navigate in an authenticated state (e.g., for posting to social sharing sites).

For this purpose, we utilize a pageloader object. The pageloader is a small JavaScript delivered by the application if an unauthenticated request is received for a URL that requires authentication and is contained in the application’s set of public interfaces. The script is carried in the body of the initial 401 response during the key exchange handshake. If such a response is received during a standard web navigation process, the pageloader is executed in an otherwise blank HTML document.

The pageloader’s source code is dynamically created by the server to contain the request’s data, mainly consisting of the original request’s URL. The pageloader dynamically includes the iframe to the secure subdomain and uses the standard request signing functionality to create a second, now authenticated request. The strict origin checking mechanism of the subdomain’s signing interface robustly prevents potential abuse.

### 5. Evaluation

#### 5.1 Security Evaluation

In this section, we examine how capable BetterAuth is in mitigating the security threats (see Section 2).

- **Network-based attacks**: At no point are passwords or authentication tokens transmitted over the network. Therefore, sniffing attacks are powerless. Due to the mutual authentication properties of the initial authentication, man-in-the-middle attacks are mitigated. However, BetterAuth only proves that the server possesses the password. The security properties of BetterAuth do not rely on the security of an underlying SSL/TLS connection, making SSL stripping attacks or CA breaches ineffective.
  
- **Cookie-based authentication tracking issues**: There is no authentication cookie that can be stolen or manipulated. Hence, session hijacking and fixation attacks do not apply. CSRF attacks are mitigated, as only in-application requests receive a signature, leading to cross-domain requests being treated as unauthenticated by default. Developers must ensure that cross-domain requests to explicitly added URLs do not cause unwanted side effects. Clickjacking attacks are partially addressed but may still occur.
  
- **Phishing**: The password never leaves the browser, making phishing attacks bound to fail. However, this property only holds if the password is entered only in BetterAuth-enabled input fields (see Section 5.3 for a further discussion of this limitation).
  
- **Limitations of the JavaScript implementation**: Unlike a native implementation, the transitional implementation is susceptible to active man-in-the-middle attackers. The cryptographic components, executed in the secure subdomain’s iframe, are transported over the compromised network connection. The adversary could alter the transmitted source code to leak the session signing key or the user’s password. Therefore, the secure subdomain’s content should be communicated via HTTPS.

#### 5.2 Performance Evaluation

We do not expect a native implementation to cause considerable overhead. The utilized algorithms are already highly efficiently implemented in both browsers and servers as part of the SSL/TLS suite. The introduced overhead will be at most in the same range as that introduced by HTTPS communication. However, for the transitional implementation, the client-side component is implemented in pure JavaScript, which may introduce noticeable overhead. Fortunately, recent improvements in JavaScript interpreters have reduced this concern.

To evaluate the performance of the JavaScript realization of the initial authentication, we implemented the protocol as outlined in Section 4.2. For cryptographic operations, we used the “BigInteger Library” and the “Stanford JavaScript Crypto Library (SJCL)”. We benchmarked our implementation on three different machines running different operating systems (Linux, macOS, and Windows 7) and in total six browsers (see Table 2 for details). Among all configurations, the best performance was observed with the Chrome browser, which consistently stayed below 300 ms using a 1024-bit key length. The worst performance was observed with Internet Explorer 9, which consumed an average of 1314 ms for the same operations. Note that this overhead occurs only once during the entire process. The HMAC-based authentication tracking can be implemented highly efficiently and causes negligible performance effects.

#### 5.3 Open Issues

- **Password entry field**: BetterAuth provides strong protection against phishing attacks at the protocol level. However, this protection can be circumvented on the GUI level. Attackers can trick users into entering their passwords in non-BetterAuth-enabled fields (see [36, 12] for more details).

| D-H Key Length | 1536 Bit |
|----------------|----------|
| Browser        | Chromium/Linux1 | 876.6 ms |
|                | Firefox/Linux1  | 1476.6 ms |
|                | Chrome/Mac2     | 862.6 ms |
|                | Safari/Mac2     | 3069.7 ms |

This optimized version of the text is more structured, clear, and professional, with improved readability and coherence.