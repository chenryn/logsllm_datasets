ck(c, m, d) for Open(ck, h, c, m, d).
we write Open
any ck ∈ Cgen(1l), m ∈ M, and h ∈ H, if Commit
h
ck(c, m, d) = 1.
(c, d), then Open
We impose the conventional correctness requirement: for
h
ck(m) =
for
(non-interactive) non-malleable
63
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
A syntactic difference between NM-CAD and the con-
ventional commitment scheme is that NM-CAD supports
associated-data (i.e., header). The function of the associated-
data resembles that of the label in threshold encryption—to
distinguish instances of the protocols.
(cid:2)|ck
(cid:2)
h
ck(mb), b
$← {0, 1}, (c, d) $← Commit
(PPT)
Π,A (1l) = Pr[b = b
adversary A = (A1,A2), we
For our purpose, we require computational hiding, compu-
tational binding, and non-malleability with respect to opening
and associated-data.
Hiding. It
is computationally infeasible for any adversary
two messages m0, m1 ∈ M such that A
A to output
can distinguish between their corresponding commitment
values c0, c1. Formally, for any probabilistic polynomial-
deﬁne
time
$← Cgen(1l), (m0, m1, h, st) ←
Advhiding
$← A2(h, c, st)],
A1(ck), b
where st is the state information.
Binding. It is computationally infeasible for any adversary
A to output two different messages m (cid:6)= m
(cid:2) to the same
commitment c and header h. Formally, for any PPT adversary
(cid:6)=
(cid:2)) ∧ (m, m
Π,A (1l) = Pr[(m (cid:6)= m
A, we deﬁne Advbinding
(cid:2)
⊥)|ck
h
ck(c, m,
(cid:2)
h
ck(c, m
d) = 1, Open
Non-malleability. We require the commitment scheme to be
non-malleable. There are two notions of non-malleability
though: non-malleability with respect to commitment [32] and
non-malleability with respect to opening [31]. The former
requires that it is infeasible to ﬁnd a commitment to a message
which is related to another committed value. The latter requires
that it is infeasible to open the modiﬁed commitment given the
decommitment of the original commitment. The former is a
strictly stronger notion [37].
$← Cgen(1l), (h, c, m, m
(cid:2)
(cid:2)) = 1].
(cid:2)) $← A(ck), Open
, d, d
, d
Our application only needs the weaker notion—non-
malleability with respect to opening. However, our speciﬁc
construction meets the stronger one.
Our notion of non-malleability with respect
to opening
is an extension and generalization of the conventional one,
because we require that non-malleability hold with respect to
associated-data as well.
We provide a simulation-based deﬁnition as depicted
in Fig. 1. We ﬁx a PPT relation R which takes inputs from a
space M × M and outputs a bit.
We consider a three-stage adversary A = (A1,A2,A3). In
the ﬁrst stage, adversary A1 selects a message space M and
a header space H from which a message m and a header
h are sampled respectively. In the second stage, adversary
A2 is given a hint hm on the message m (as an output
of a PPT function hint(ck,·)) that represents some a-prior
information that may be gathered by the adversary from other
executions of the protocols. Note that we do not need to deﬁne
a similar function for the header space H, as the target header
will be given to the adversary in cleartext. A2 now has to
output a “new” commitment. In the last stage, adversary A3
is given the committed value and the opening of the original
commitment and must output the corresponding values for the
new commitment.
Expnm-oad-0
Expnm-oad-1
(l)
(l)
Π,A
Π,S
$← Cgen(1l)
$← Cgen(1l)
ck
ck
(M,H, s1) $← A1(ck)
(M,H, s1) $← S1(ck)
$← M(1l)
$← M(1l)
m
m
$← hint(ck, m)
$← hint(ck, m)
htm
htm
$← H(1l)
$← H(1l)
h
h
(c, d) $← Commit
(c, d) $← Commit
h
h
ck(m)
ck(m)
, s2) $←S2(s1, htm)
, s2) $←A2(h, c, s1, htm) (h
∗
∗
∗
(h
, c
, c
∗) $← S3(m, d, s2)
∗) $← A3(m, d, s2)
∗
∗
(m
(m
, d
, d
return 1 iff
return 1 iff
∗) = 1∧
∗) = 1 ∧
h∗
h∗
∗
∗
∗
∗
ck (c
ck (c
Open
Open
, d
, d
, m
, m
(m, h) (cid:6)= (m
∗) ∧
(m, h) (cid:6)= (m
∗)∧
∗
∗
, h
, h
∗ (cid:6)= ⊥) ∧
∗ (cid:6)= ⊥) ∧ (h
∗ (cid:6)= ⊥) ∧ (h
∗ (cid:6)= ⊥) ∧
(m
(m
∗) = 1
∗) = 1
R(m, m
R(m, m
∗
Fig. 1. Game for non-malleability with respect
associated-data (NM-OAD).
to opening and
For the relation R, unlike prior works, we do not need to
rule out the possibility of “message copying” (by insisting
R(m, m) = 0 with probability 1), as the adversary may well
win the game by simply modifying the header.
Π,S
Π,A
Π,A
(l) = 1].
let R be a relation,
(l), as Pr[Expnm-oad-0
Let Π be an NM-CAD,
We require that for any adversary which, on input
the
commitment (h, c), ﬁnds a new commitment
to a related
message,
there exists a simulator which can simulate the
commitment and the decommitment just as well without the
original commitment.
let
A = (A1,A2,A3) be any PPT adversary, and let S =
(S1,S2,S3) be the simulator. We deﬁne the NM-OAD ad-
(l) = 1] −
vantage of A, AdvNM-OAD
Pr[Expnm-oad-1
Remark. In deﬁning NM-OAD, we chose to use a notion
similar to non-malleability with respect to opening. But one
can easily modify the experiment to deﬁne a stronger notion
that resembles the notion of non-malleability with respect to
∗
∗ and d
commitment, by requiring the simulator to output m
given ck and htm only. But as we will see, our NM-OAD
deﬁnition sufﬁces for our application.
A deﬁnitional choice we made is that in order to win the
game, adversary should produce a pair (m, h) (cid:6)= (m
∗). In
fact, according to our protocol (CP1), it is sufﬁcient to require
(m (cid:6)= m
∗).2 Our deﬁnition
yields a stronger one.
∗) or (m = m
, h (cid:6)= h
, h (cid:6)= h
, h
∗
∗
∗
Our deﬁnition echoes some other cryptographic primitives
such as authenticated encryption with associated-data [58] and
adaptive one-way function [55].
commitment with
Extensions
associated-data. A conventional commitment scheme can be
easily obtained by removing the header in its algorithms.
The deﬁnition can be also easily extended to the concurrent
simpliﬁcations
and
on
2This is because according to our protocol, the recipient of the commitment
will also verify the authenticity of the message.
64
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
setting [56] where the adversary is receiving commitments to
multiple messages m1,··· , ms, while attempting to commit
1,··· , m
(cid:2)
(cid:2)
s. This is a stronger notion
to related messages m
than non-malleable commitment.
Generic constructions and efﬁcient instantiations. It was
shown that concurrent NMC can be built from any one-way
function [51]. It is easy to show that concurrent NM-CAD can
be built from any adaptive one-way function [55].
Building NMC is trivial in the ROM; one just needs to
commit to a random coin in addition to the message itself.
Concurrent NM-CAD can be built likewise but with a small
tweak. For simplicity, let M = {0, 1}l and H = {0, 1}l.
Fix a hash function H: K × {0, 1}3l → {0, 1}l. Cgen simply
$← K. Given a message
returns a uniformly chosen hash key k
m and a header h, Commit selects a uniformly random coin
r, computes c = Hk(h, m, r), and returns (c, d), where d = r.
Given h, c, m, and d, Open checks if c = Hk(h, m, d) and
returns a decision bit. The scheme can be easily shown to be
NM-OAD in both the stand-alone and concurrent settings.
A brief explanation. NM-CAD is designed speciﬁcally for
CP1. NMC also works for CP1, but it requires slightly higher
bandwidth. Since we consider concurrent requests, we will
correspondingly need concurrent non-malleable commitments
(with associated-data). For CP2, a conventional commitment
scheme is sufﬁcient (explanation coming shortly).
C. Secret Sharing Schemes
In a (t, n) secret-sharing scheme (SS), the dealer distributes
shares of the secret to n servers such that: 1) any group of t
(or more) servers can reconstruct the secret, and 2) any group
of fewer than t servers cannot obtain any partial information
on the secret. One well-known SS is Shamir’s secret sharing
scheme [63] which is based on polynomial interpolation.
Asynchronous robust secret sharing. We consider asyn-
chronous robust secret sharing, where the dealer is correct,
up to t − 1 servers may be Byzantine, and the environments
may be asynchronous. To formalize this, we extend robust
secret sharing (RSS) by Bellare and Rogaway (BR) [9] to
asynchronous settings.
A (t, n) asynchronous robust secret-sharing (ARSS) proto-
col consists of a distribute stage and reconstruct stage. In the
distribute stage, a dealer runs Share on s and outputs a n-
vector S = S[1..n], and sends the server i the share S[i]. In
the reconstruct stage, each server broadcasts its share to the
rest of the servers. Each server waits for enough shares in a
(cid:2) to return a secret or a distinguished
set S
symbol ⊥.
(cid:2) and runs Rec on S
The above syntax is natural, simple, but rather restrictive:
the distribute stage consists of a best-effort broadcast, and the
reconstruction stage consists of best-effort broadcast among
servers. We ﬁnd, however, the simple syntax is sufﬁcient to
provide efﬁcient constructions. Also, in our syntax, the number
of shares needed for reconstruction, u, where t ≤ u ≤ n, does
not have to be ﬁxed. As we will see, typical choices of u such
as t, t + f, and n − f, may restrict the possibility of efﬁcient
constructions.
(A)
Experiment Exppriv
ARSS
T $← A; (s0, s1, st) $← A(T )
b $← {0, 1}
S $← Share(sb)
b(cid:2) $← A(ST , st)
if b(cid:2) = b then return 1
return 0
ARSS(A)
Experiment Exprec
T $← A; (s, st) $← A(T )
S $← Share(s)
$← A(ST , st)
S(cid:2)
S(cid:2)← ST (cid:3) S(cid:2)
if s (cid:5)= Rec(R) return 1
return 0
T
T ; R← R ∪ {S(cid:2)[i]}
Fig. 2. Privacy game (Left) and recoverability game (Right) with adversary
A and an ARSS scheme.
ARSS
ARSS(A) = 1].
(A) = 1] − 1/2.
(cid:2) is now ST (cid:9) S
(A) = Pr[Exppriv
ARSS(A) = Pr[Exprec
We consider two security deﬁnitions for ARSS—privacy
and recoverability in Fig. 2. We assume a static adversary who
must decide at the beginning of its execution which players T
to corrupt.
In the privacy game, adversary A decides which servers to
corrupt before its execution. A chooses two secrets s0 and
s1 such that |s0| = |s1|. Then the game chooses a hidden
bit b and runs Share(sb) to produce a n-vector S. The shares
corresponding to the corrupted set T , ST , are then given to A
(cid:2) for the hidden bit. Formally,
who will then output its guess b
we deﬁne Advpriv
In the recoverability game, adversary A statically corrupts a
ARSS
set of T servers. A then chooses a secret s and the game sam-
ples S from Share(s). A replaces the shares ST with S