M. Pereira et al.
Fig. 5. Kernel density plot of the features extracted for the RF experiments where
the x-axis represents the feature value and the area under the curve represents the
probability of having a feature in that range of x values.
Test-Unfamiliar Experiment. In the “Test-Unfamiliar” experiment, the trained
models are tested on AGDs generated from dictionaries that were not seen dur-
ing training. As Table 5 shows, the WordGraph method has no problem at all
detecting these new AGDs across all rounds, while, as expected, the RF method
continues to struggle. Interestingly enough, unlike in the previous experimental
setting, the performance of the CNN model is no longer consistently good across
all rounds. In round 1, the CNN model performs signiﬁcantly worse when com-
pared to rounds 2 and 3, having a FPR higher by one order of magnitude. In
round 1 the model is trained on WL1 and WL2 DGA domains, while the testing
data contains WL3 AGDs. A possible explanation for the poor performance of
the CNN method in round 1 is that, as observed in Fig. 5 for the ‘len’ feature,
the AGDs in WL3 tend to be longer than those in WL1 and WL2, leading the
CNN to misclassify the AGDs from WL3 as malicious because it has never seen
such long malicious domain names during training.
Table 5. Results of all methods on balanced ground truth data, for a ﬁxed TPR =
1. The AGDs in the test data are generated from dictionaries that were not available
during training time (“Test-Unfamiliar”).
Method
Round 1
FPR PPV FPR
Round 2
WordGraph 0.0
1.0
CNN
RF
0.589 0.650 0.084
1.0
0.522 1.0
0.928 0.050
0.522 0.723
Round 3
PPV FPR
6.67 · 10
−5 0.999 1.33 · 10
PPV
−4 0.999
0.956
0.602
Detection of Algorithmically Generated Domain Names in DNS Traﬃc
311
Results on Imbalanced Ground Truth Data. The results for the models trained
and tested on the imbalanced ground truth data are presented in Table 6. The
trend we observed before persists: the WordGraph approach perfectly detects
all Dictionary-AGDs in all rounds without misclassifying even a single benign
domain name, the CNN method sometimes does well and sometimes not, and
the RF method does not do well at all.
Table 6. Results of all methods on imbalanced ground truth data, for a ﬁxed TPR=1,
the three rounds of experiment are listed in Table 2 (“Test-Imbalanced”).
Method
Round 1
FPR PPV FPR PPV FPR PPV
Round 3
Round 2
WordGraph 0.0
1.0
0.0
1.0
0.0
1.0
CNN
RF
0.718 0.230 0.127 0.117 0.039 0.300
1.0
0.017 1.0
0.017 1.0
0.017
Overall, the WordGraph method clearly outperforms the CNN and RF meth-
ods. It is able to ‘ﬁnd’ dictionaries in data through graph analysis, even when
only a small sample is available. The imbalanced experiment from Table 6 illus-
trates a scenario where only one infected machine is present in a network. After
one day of Dictionary-AGD DNS requests, the WordGraph approach is able to
extract the malicious dictionary from traﬃc. Out of 10,169 domains in each test
dataset, only 169 domains are malicious, and the WordGraph method is able
to identify 100% of the words from the malicious dictionary, with FPR=0.0 in
every round of this experiment.
6.2 Experimental Results: Real DNS Traﬃc
To study the performance of the WordGraph method in a realistic scenario, we
evaluate it on the real traﬃc data from Table 3. To further reduce the dataset
size, we used solely NX Traﬃc since most of AGD queries result in Non-Existent
Domain (NXDomain) responses. This approach has been consistently used in
the literature [3,8].
The ﬁrst three days in the real traﬃc dataset were used for training the graph
component classiﬁer as described in Sect. 4. The Dictionary-based AGDs in the
dataset were labeled using DGA archive [15] as a source of ground truth labels.
The number of Dictionary-based AGDs for each day is described in Table 3. We
then evaluated the results of our method on the remaining ﬁve days of traﬃc.
Overall, we identiﬁed 81 dictionaries in ﬁve days of traﬃc. Fifteen of these dis-
covered dictionaries are present in DGArchive. We manually veriﬁed the remain-
ing dictionaries and conﬁrmed they were all malicious. Since DGArchive has the
complete dictionary for the 15 cases (by reverse engineering the malware) we
managed to verify that our method recovered the complete dictionary in this
312
M. Pereira et al.
situation. We identiﬁed several dictionaries related to malware download hosts,
such as apartonly.gq, oftenthere.ga and quitethough.cf. We also discovered vari-
ations of the malware family Suppobox, where the generated domains in this
variation present TLD “.ru”.
Once we obtained the dictionaries, we also ﬂagged the domains that were
generated by these words in the resolved DNS traﬃc, giving information on
active C&C (Command and Control) centers.
7 Discussion and Limitations
Computational Complexity. The most expensive part of our algorithm is the
graph building with complexity O(n2), where n is the number of words extracted
from domains. We apply our algorithm only to NXDomains (since DGAs are
mostly non-resolved) on a daily basis. The datasets have about 5 millions
domains, where about 500,000 are NXdomains. The size of the graphs are about
60,000 nodes, which corresponds to the number of extracted words from traf-
ﬁc. The entire algorithm runs in about 30 min, considering word extraction and
graph analysis phases. All experiments were run on a machine with an 2.3 GHz
Intel Core i5 processor and a maximum of 16GB of allowed memory consump-
tion.
Limitations. (1) Our WordGraph method is very successful in extracting dic-
tionaries from AGDs. This is the case for all variations of the Suppobox family,
and other unidentiﬁed families that we were able to identify in real traﬃc. The
method leverages the fact that such families uses limited dictionaries and the
reuse of dictionary words is frequent. We suggest as future work the investigation
of Dictionary-based AGDs that utilizes a very large dictionary and very low word
reuse rate. (2) Additionally, there are malware families, such as Matsnu, that
use a DGA as a secondary resource for C&C communication, with hardcoded
domains being the primary method. Such a malware family typically not only
generates a very small number of DGA domains daily [18], but those domains are
only queried in the case that all domains from the hardcoded list receive an NX
response. Matsnu malware for instance generates only four DGA domains per
day. In our real traﬃc dataset, we did not encounter any occurrences of Matsnu
AGDs. Preliminary results on ground truth data indicate that the WordGraph
method would need more than one month of observation to be able to recover the
dictionary. Using one month of Matsnu AGDs from DGAarchive, we were able to
extract from 590 domains a partial dictionary of 82 words, leading to the detec-
tion of 273 domains. (3) Once the dictionaries are extracted, we detect malicious
domains by checking if they have two or more words from the extracted dictio-
naries. False positive rates were at most 10−4 in all the performed experiments
(with real traﬃc and synthetic data). An adversary could, in principle, try to
increase the false positive rate by using dictionaries with words commonly used
in legitimate domains. However, this approach has a drawback for the adversary
since several of the generated domains will already be registered and thus useless
for the bot-master.
Detection of Algorithmically Generated Domain Names in DNS Traﬃc
313
8 Conclusion
We proposed a novel WordGraph method for detection of Dictionary-based
DGAs in DNS traﬃc. The WordGraph method consists of two main phases:
(1) malicious dictionary extraction from traﬃc observations and (2) detection of
Dictionary-AGDs present in traﬃc. We evaluated WordGraph on ground truth
data consisting of Dictionary-AGDs from DGArchive and benign domains from
Alexa. Our experiments show that WordGraph consistently outperforms random
forests based on human deﬁned lexical features as well as deep learning models
that take the raw domain name string as input and learn the features themselves.
In particular, unlike these existing state-of-the-art methods, WordGraph detects
(nearly) all Dictionary-AGDs even when the dictionary used to generate them
is changed. Furthermore, when we analyzed 5 days of real traﬃc from multiple
ISPs with WordGraph, we were able to detect the presence of Dictionary-AGDs
generated by known as well as by previously unknown malware, and we discov-
ered domains related to C&C proxies that received thousands of requests. Due
to its nature of discovering, through a graph perspective, malicious patterns of
words in traﬃc, the WordGraph method guarantees a very low false positive
rate, presenting itself as a DGA detection system with practical relevance.
References
1. Abbink, J., Doerr, C.: Popularity-based detection of domain generation algorithms.
In: Proceedings of the 12th International Conference on Availability, Reliability and
Security, p. 79. ACM (2017)
2. ALEXA: Top sites on the web (2017). http://alexa.com/topsites
3. Antonakakis, M., et al.: From throw-away traﬃc to bots: detecting the rise of DGA-
based malware. In: 21st USENIX Security Symposium, pp. 24–24 (2012). http://
dl.acm.org/citation.cfm?id=2362793.2362817
4. Barabosch, T., Wichmann, A., Leder, F., Gerhards-Padilla, E.: Automatic extrac-
tion of domain name generation algorithms from current malware. In: Proceedings
of NATO Symposium IST-111 on Information Assurance and Cyber Defense (2012)
5. Bilge, L., Kirda, E., Kruegel, C., Balduzzi, M.: Exposure: ﬁnding malicious domains
using passive DNS analysis. In: NDSS (2011)
6. Diestel, R.: Graph Theory. Graduate Texts in Mathematics, vol. 137. Springer,
Heidelberg (2005)
7. Geﬀner, J.: End-to-end analysis of a domain generating algorithm malware family.
Black Hat USA 2013 (2013)
8. Krishnan, S., Taylor, T., Monrose, F., McHugh, J.: Crossing the threshold:
detecting network malfeasance via sequential hypothesis testing. In: 43rd Annual
IEEE/IFIP International Conference on Dependable Systems and Networks
(DSN), pp. 1–12 (2013)
9. Lind, P.G., Gonzalez, M.C., Herrmann, H.J.: Cycles and clustering in bipartite
networks. Phys. Rev. E 72(5), 056127 (2005)
10. Lison, P., Mavroeidis, V.: Automatic detection of malware-generated domains with
recurrent neural models. arXiv:1709.07102 (2017)
314
M. Pereira et al.
11. Ma, J., Saul, L.K., Savage, S., Voelker, G.M.: Beyond blacklists: learning to detect
malicious web sites from suspicious URLs. In: Proceedings of the 15th ACM
SIGKDD International Conference on Knowledge Discovery and Data Mining,
KDD 2009, pp. 1245–1254 (2009). https://doi.org/10.1145/1557019.1557153
12. Mao, G., Zhang, N.: Analysis of average shortest-path length of scale-free network.
J. Appl. Math. (2013). http://dx.doi.org/10.1155/2013/865643
13. McGrath, D.K., Gupta, M.: Behind phishing: an examination of phisher modi
operandi. LEET 8, 4 (2008)
14. Mowbray, M., Hagen, J.: Finding domain-generation algorithms by looking at
length distribution. In: 25th IEEE International Symposium on Software Relia-
bility Engineering Workshops, ISSRE Workshops, pp. 395–400 (2014). https://
doi.org/10.1109/ISSREW.2014.20
15. Plohmann, D., Yakdan, K., Klatt, M., Bader, J., Gerhards-Padilla, E.: A com-
prehensive measurement study of domain generating malware. In: 25th USENIX
Security Symposium, pp. 263–278 (2016)
16. Saxe, J., Berlin, K.: eXpose: a character-level convolutional neural network
with embeddings for detecting malicious URLs, ﬁle paths and registry keys.
arXiv:1702.08568 (2017)
17. Schiavoni, S., Maggi, F., Cavallaro, L., Zanero, S.: Phoenix: DGA-based botnet
tracking and intelligence. In: Dietrich, S. (ed.) DIMVA 2014. LNCS, vol. 8550, pp.
192–211. Springer, Cham (2014). https://doi.org/10.1007/978-3-319-08509-8 11
18. Skuratovich, S.: Matsnu technical report. Check Point Software Technologies
Ltd. (2015). https://blog.checkpoint.com/wp-content/uploads/2015/07/matsnu-
malwareid-technical-brief.pdf
19. Tran, D., Mac, H., Tong, V., Tran, H.A., Nguyen, L.G.: A LSTM based framework
for handling multiclass imbalance in DGA botnet detection. Neurocomputing 275,
2401–2413 (2018)
20. Woodbridge, J., Anderson, H.S., Ahuja, A., Grant, D.: Predicting domain genera-
tion algorithms with long short-term memory networks. arXiv:1611.00791 (2016)
21. Yadav, S., Reddy, A.K.K., Reddy, A.L.N., Ranjan, S.: Detecting algorithmically
generated malicious domain names. In: Proceedings of the 10th ACM SIGCOMM
Conference on Internet Measurement, pp. 48–61 (2010). https://doi.org/10.1145/
1879141.1879148
22. Yu, B., Gray, D., Pan, J., De Cock, M., Nascimento, A.: Inline DGA detection with
deep networks. In: Data Mining for Cyber Security, Proceedings of International
Conference on Data Mining (ICDM 2017) Workshops, pp. 683–692 (2017)
23. Yu, B., Pan, J., Hu, J., Nascimento, A., De Cock, M.: Character level based detec-
tion of DGA domain names. In: Proceedings of IJCNN at WCCI2018 (2018 IEEE
World Congress on Computational Intelligence) (2018)
24. Yu, B., Smith, L., Threefoot, M.: Semi-supervised time series modeling for real-
time ﬂux domain detection on passive DNS traﬃc. In: Perner, P. (ed.) MLDM
2014. LNCS (LNAI), vol. 8556, pp. 258–271. Springer, Cham (2014). https://doi.
org/10.1007/978-3-319-08979-9 20
25. Yu, B., Smith, L., Threefoot, M., Olumoﬁn, F.: Behavior analysis based DNS
tunneling detection with big data technologies. In: Proceedings of the International
Conference on Internet of Things and Big Data, pp. 284–290 (2016)