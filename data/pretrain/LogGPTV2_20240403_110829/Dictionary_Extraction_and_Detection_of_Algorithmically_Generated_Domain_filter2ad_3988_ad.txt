### M. Pereira et al.

**Figure 5.** Kernel density plot of the features extracted for the Random Forest (RF) experiments. The x-axis represents the feature value, and the area under the curve represents the probability of a feature falling within that range of x values.

### Test-Unfamiliar Experiment

In the "Test-Unfamiliar" experiment, the trained models are evaluated on Algorithmically Generated Domains (AGDs) generated from dictionaries not seen during training. As shown in Table 5, the WordGraph method consistently detects these new AGDs across all rounds, while the RF method continues to struggle. Interestingly, the performance of the Convolutional Neural Network (CNN) model is no longer consistently good across all rounds. In Round 1, the CNN model performs significantly worse compared to Rounds 2 and 3, with a False Positive Rate (FPR) higher by an order of magnitude. This poor performance can be attributed to the fact that in Round 1, the model is trained on WL1 and WL2 DGA domains, while the testing data contains WL3 AGDs. As observed in Figure 5 for the 'len' feature, the AGDs in WL3 tend to be longer than those in WL1 and WL2, leading the CNN to misclassify the WL3 AGDs as malicious because it has not encountered such long domain names during training.

**Table 5.** Results of all methods on balanced ground truth data, for a fixed True Positive Rate (TPR) = 1. The AGDs in the test data are generated from dictionaries not available during training ("Test-Unfamiliar").

| Method | Round 1 | Round 2 | Round 3 |
|--------|---------|---------|---------|
| **WordGraph** | FPR: 0.0, PPV: 1.0 | FPR: 0.0, PPV: 1.0 | FPR: 0.0, PPV: 1.0 |
| **CNN** | FPR: 0.589, PPV: 0.650 | FPR: 0.084, PPV: 1.0 | FPR: 0.522, PPV: 0.723 |
| **RF** | FPR: 0.928, PPV: 0.050 | FPR: 0.522, PPV: 0.956 | FPR: 0.602, PPV: 0.956 |

### Results on Imbalanced Ground Truth Data

The results for the models trained and tested on imbalanced ground truth data are presented in Table 6. The trend observed in the balanced data persists: the WordGraph approach perfectly detects all Dictionary-AGDs in all rounds without misclassifying even a single benign domain name, the CNN method sometimes performs well and sometimes not, and the RF method performs poorly.

**Table 6.** Results of all methods on imbalanced ground truth data, for a fixed TPR=1. The three rounds of the experiment are listed in Table 2 ("Test-Imbalanced").

| Method | Round 1 | Round 2 | Round 3 |
|--------|---------|---------|---------|
| **WordGraph** | FPR: 0.0, PPV: 1.0 | FPR: 0.0, PPV: 1.0 | FPR: 0.0, PPV: 1.0 |
| **CNN** | FPR: 0.718, PPV: 0.230 | FPR: 0.127, PPV: 0.117 | FPR: 0.039, PPV: 0.300 |
| **RF** | FPR: 0.017, PPV: 1.0 | FPR: 0.017, PPV: 1.0 | FPR: 0.017, PPV: 1.0 |

Overall, the WordGraph method outperforms the CNN and RF methods. It can identify dictionaries in data through graph analysis, even with a small sample. The imbalanced experiment in Table 6 illustrates a scenario where only one infected machine is present in a network. After one day of Dictionary-AGD DNS requests, the WordGraph approach can extract the malicious dictionary from traffic. Out of 10,169 domains in each test dataset, only 169 domains are malicious, and the WordGraph method identifies 100% of the words from the malicious dictionary, with an FPR of 0.0 in every round of this experiment.

### 6.2 Experimental Results: Real DNS Traffic

To evaluate the performance of the WordGraph method in a realistic scenario, we tested it on real traffic data from Table 3. To reduce the dataset size, we used only Non-Existent Domain (NXDomain) traffic, as most AGD queries result in NXDomain responses. This approach is consistent with previous literature [3,8].

The first three days of real traffic were used for training the graph component classifier, as described in Section 4. The Dictionary-based AGDs in the dataset were labeled using the DGA archive [15] as a source of ground truth labels. The number of Dictionary-based AGDs for each day is detailed in Table 3. We then evaluated the results of our method on the remaining five days of traffic.

Overall, we identified 81 dictionaries in five days of traffic. Fifteen of these discovered dictionaries are present in the DGArchive. We manually verified the remaining dictionaries and confirmed they were all malicious. Since the DGArchive has the complete dictionary for the 15 cases (by reverse engineering the malware), we verified that our method recovered the complete dictionary. We identified several dictionaries related to malware download hosts, such as apartonly.gq, oftenthere.ga, and quitethough.cf. We also discovered variations of the Suppobox malware family, where the generated domains have the top-level domain (TLD) ".ru".

Once we obtained the dictionaries, we flagged the domains generated by these words in the resolved DNS traffic, providing information on active Command and Control (C&C) centers.

### 7 Discussion and Limitations

**Computational Complexity:** The most computationally expensive part of our algorithm is the graph building, which has a complexity of O(n^2), where n is the number of words extracted from domains. We apply our algorithm only to NXDomains (since DGAs are mostly non-resolved) on a daily basis. The datasets contain about 5 million domains, of which approximately 500,000 are NXdomains. The graphs have about 60,000 nodes, corresponding to the number of extracted words from the traffic. The entire algorithm runs in about 30 minutes, considering word extraction and graph analysis phases. All experiments were run on a machine with a 2.3 GHz Intel Core i5 processor and a maximum of 16GB of allowed memory consumption.

**Limitations:**
1. **Dictionary Extraction:** Our WordGraph method is very successful in extracting dictionaries from AGDs, especially for families like Suppobox, and other unidentified families in real traffic. The method leverages the fact that such families use limited dictionaries with frequent word reuse. Future work should investigate Dictionary-based AGDs that use very large dictionaries and have a very low word reuse rate.
2. **Malware Families with Hardcoded Domains:** Some malware families, such as Matsnu, use DGAs as a secondary resource for C&C communication, with hardcoded domains being the primary method. These families typically generate a very small number of DGA domains daily, and these domains are queried only if all hardcoded domains receive an NX response. In our real traffic dataset, we did not encounter any Matsnu AGDs. Preliminary results on ground truth data indicate that the WordGraph method would need more than one month of observation to recover the dictionary. Using one month of Matsnu AGDs from the DGAarchive, we were able to extract a partial dictionary of 82 words from 590 domains, leading to the detection of 273 domains.
3. **False Positives:** Once the dictionaries are extracted, we detect malicious domains by checking if they contain two or more words from the extracted dictionaries. The false positive rates were at most 10^-4 in all performed experiments (with real traffic and synthetic data). An adversary could, in principle, increase the false positive rate by using dictionaries with words commonly used in legitimate domains. However, this approach has a drawback for the adversary since many of the generated domains will already be registered and thus useless for the bot-master.

### 8 Conclusion

We proposed a novel WordGraph method for detecting Dictionary-based DGAs in DNS traffic. The WordGraph method consists of two main phases: (1) malicious dictionary extraction from traffic observations and (2) detection of Dictionary-AGDs present in traffic. We evaluated WordGraph on ground truth data consisting of Dictionary-AGDs from the DGArchive and benign domains from Alexa. Our experiments show that WordGraph consistently outperforms random forests based on human-defined lexical features and deep learning models that take the raw domain name string as input and learn the features themselves. Unlike these existing state-of-the-art methods, WordGraph detects nearly all Dictionary-AGDs even when the dictionary used to generate them is changed. Furthermore, when we analyzed five days of real traffic from multiple ISPs with WordGraph, we were able to detect the presence of Dictionary-AGDs generated by known and previously unknown malware, and we discovered domains related to C&C proxies that received thousands of requests. Due to its nature of discovering, through a graph perspective, malicious patterns of words in traffic, the WordGraph method guarantees a very low false positive rate, presenting itself as a DGA detection system with practical relevance.

### References

1. Abbink, J., Doerr, C.: Popularity-based detection of domain generation algorithms. In: Proceedings of the 12th International Conference on Availability, Reliability and Security, p. 79. ACM (2017)
2. ALEXA: Top sites on the web (2017). http://alexa.com/topsites
3. Antonakakis, M., et al.: From throw-away traffic to bots: detecting the rise of DGA-based malware. In: 21st USENIX Security Symposium, pp. 24â€“24 (2012). http://dl.acm.org/citation.cfm?id=2362793.2362817
4. Barabosch, T., Wichmann, A., Leder, F., Gerhards-Padilla, E.: Automatic extraction of domain name generation algorithms from current malware. In: Proceedings of NATO Symposium IST-111 on Information Assurance and Cyber Defense (2012)
5. Bilge, L., Kirda, E., Kruegel, C., Balduzzi, M.: Exposure: finding malicious domains using passive DNS analysis. In: NDSS (2011)
6. Diestel, R.: Graph Theory. Graduate Texts in Mathematics, vol. 137. Springer, Heidelberg (2005)
7. Geffner, J.: End-to-end analysis of a domain generating algorithm malware family. Black Hat USA 2013 (2013)
8. Krishnan, S., Taylor, T., Monrose, F., McHugh, J.: Crossing the threshold: detecting network malfeasance via sequential hypothesis testing. In: 43rd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), pp. 1â€“12 (2013)
9. Lind, P.G., Gonzalez, M.C., Herrmann, H.J.: Cycles and clustering in bipartite networks. Phys. Rev. E 72(5), 056127 (2005)
10. Lison, P., Mavroeidis, V.: Automatic detection of malware-generated domains with recurrent neural models. arXiv:1709.07102 (2017)
11. Ma, J., Saul, L.K., Savage, S., Voelker, G.M.: Beyond blacklists: learning to detect malicious web sites from suspicious URLs. In: Proceedings of the 15th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD 2009, pp. 1245â€“1254 (2009). https://doi.org/10.1145/1557019.1557153
12. Mao, G., Zhang, N.: Analysis of average shortest-path length of scale-free network. J. Appl. Math. (2013). http://dx.doi.org/10.1155/2013/865643
13. McGrath, D.K., Gupta, M.: Behind phishing: an examination of phisher modi operandi. LEET 8, 4 (2008)
14. Mowbray, M., Hagen, J.: Finding domain-generation algorithms by looking at length distribution. In: 25th IEEE International Symposium on Software Reliability Engineering Workshops, ISSRE Workshops, pp. 395â€“400 (2014). https://doi.org/10.1109/ISSREW.2014.20
15. Plohmann, D., Yakdan, K., Klatt, M., Bader, J., Gerhards-Padilla, E.: A comprehensive measurement study of domain generating malware. In: 25th USENIX Security Symposium, pp. 263â€“278 (2016)
16. Saxe, J., Berlin, K.: eXpose: a character-level convolutional neural network with embeddings for detecting malicious URLs, file paths, and registry keys. arXiv:1702.08568 (2017)
17. Schiavoni, S., Maggi, F., Cavallaro, L., Zanero, S.: Phoenix: DGA-based botnet tracking and intelligence. In: Dietrich, S. (ed.) DIMVA 2014. LNCS, vol. 8550, pp. 192â€“211. Springer, Cham (2014). https://doi.org/10.1007/978-3-319-08509-8_11
18. Skuratovich, S.: Matsnu technical report. Check Point Software Technologies Ltd. (2015). https://blog.checkpoint.com/wp-content/uploads/2015/07/matsnu-malwareid-technical-brief.pdf
19. Tran, D., Mac, H., Tong, V., Tran, H.A., Nguyen, L.G.: A LSTM based framework for handling multiclass imbalance in DGA botnet detection. Neurocomputing 275, 2401â€“2413 (2018)
20. Woodbridge, J., Anderson, H.S., Ahuja, A., Grant, D.: Predicting domain generation algorithms with long short-term memory networks. arXiv:1611.00791 (2016)
21. Yadav, S., Reddy, A.K.K., Reddy, A.L.N., Ranjan, S.: Detecting algorithmically generated malicious domain names. In: Proceedings of the 10th ACM SIGCOMM Conference on Internet Measurement, pp. 48â€“61 (2010). https://doi.org/10.1145/1879141.1879148
22. Yu, B., Gray, D., Pan, J., De Cock, M., Nascimento, A.: Inline DGA detection with deep networks. In: Data Mining for Cyber Security, Proceedings of International Conference on Data Mining (ICDM 2017) Workshops, pp. 683â€“692 (2017)
23. Yu, B., Pan, J., Hu, J., Nascimento, A., De Cock, M.: Character level based detection of DGA domain names. In: Proceedings of IJCNN at WCCI2018 (2018 IEEE World Congress on Computational Intelligence) (2018)
24. Yu, B., Smith, L., Threefoot, M.: Semi-supervised time series modeling for real-time flux domain detection on passive DNS traffic. In: Perner, P. (ed.) MLDM 2014. LNCS (LNAI), vol. 8556, pp. 258â€“271. Springer, Cham (2014). https://doi.org/10.1007/978-3-319-08979-9_20
25. Yu, B., Smith, L., Threefoot, M., Olumofin, F.: Behavior analysis based DNS tunneling detection with big data technologies. In: Proceedings of the International Conference on Internet of Things and Big Data, pp. 284â€“290 (2016)