# Power-SQL
---
## DDL 操作数据库、表
### 数据库操作
#### 创建数据库
我们可以在登录 MySQL 服务后，使用 creat 命令创建数据库，语法如下:
```sql
create database 数据库名称 [库选项];
```
其中，库选项是用来约束数据库的，为可选项（有默认值），共有两种，分别为：
- 字符集设定：charset/ character set+ 具体字符集，用来表示数据存储的编码格式，常用的字符集包括 GBK 和 UTF8 等。
- 校对集设定：collate+ 具体校对集，表示数据比较的规则，其依赖字符集。
示例：
```sql
-- 创建数据库 test
create database test charset utf8;
```
其中，数据库的名字不能用关键字（已经被占用的字符，例如 `update` 和 `insert` 等）或者保留字（将来可能会用的，例如 `access` 和 `cast` 等）。
如果非要使用数据库的关键字或者保留字作为数据库名称，那么必须用反引号将其括起来，例如：
```sql
create database `update` charset utf8;
```
如果还想使用中文作为数据库的名称，那就得保证数据库能够识别中文（强烈建议不要用中文命名数据库的名称），例如：
```sql
-- 设置中文名称的方法，其中 gbk 为当前数据库的默认字符集
set names gbk;
create database 北京 charset gbk;
```
```sql
-- 创建数据库，判断不存在，再创建;
create database if not exists 数据库名称;
-- 创建数据库，并且指定字符集;
create database 数据库名称 character set 字符集名称;
-- 创建数据库db，判断是否存在，并指定字符集为gbk
create database if not exists db character set gbk;
```
#### 删除数据库
使用普通用户登录 MySQL 服务器，你可能需要特定的权限来创建或者删除 MySQL 数据库，所以我们这边使用 root 用户登录，root 用户拥有最高权限。
在删除数据库过程中，务必要十分谨慎，因为在执行删除命令后，所有数据将会消失。
```sql
-- 语法
drop database ;
-- 例如删除名为 test 的数据库：
drop database test;
-- 判断数据库是否存在，存在则删除;
drop database if exists 数据库名称;
```
#### 查询数据库
```sql
-- 查看全部
show databases;
-- 查看部分（模糊查询）
show databases like 'pattern';
```
其中，pattern 是匹配模式，有两种，分别为：
- %：表示匹配多个字符;
- _：表示匹配单个字符。
此外，在匹配含有下划线 _ 的数据库名称的时候，需要在下划线前面加上反斜线 \_ 进行转义操作。
```sql
-- 匹配所有 TBL 开头的数据库。
show databases like 'TBL%';
-- 查看数据库的创建语句
show create database 数据库名称;
-- 在这里，查看的结果有可能与咱们书写的 SQL 语句不同，这是因为数据库在执行 SQL 语句之前会优化 SQL，系统保存的是优化后的结果。
```
#### 更新数据库
在这里，需要注意：数据库的名字不可以修改。
```sql
-- 语法
alter database 数据库名称 [库选项];
-- 修改test数据库的字符集为 gbk.
alter database test charset gbk;
```
#### 选择数据库
在你连接到 MySQL 数据库后，可能有多个可以操作的数据库，所以你需要选择你要操作的数据库。
```sql
-- 使用 test 数据库
use test;
```
执行以上命令后，你就已经成功选择了 test 数据库，在后续的操作中都会在 test 数据库中执行。
注意:所有的数据库名，表名，表字段都是区分大小写的。所以你在使用 SQL 命令时需要输入正确的名称。
```sql
-- 查询正在使用的数据库;
select database();
```
#### 数据库的备份和还原
备份：
```bash
mysqldump -u用户名 -p密码 要备份的数据库名称 > 保存路径;
```
还原：
- 登录数据库：-u用户名称 -p密码;
- 创建数据库：create database 数据库名称;
- 使用数据库：use 数据库名称;
- 执行文件：source 文件路径;
#### 权限的管理
**查询权限**
```sql
-- 语法
show grants for '用户名'@'主机名';
show grants for 'list'@'localhost';
```
**授予权限**
```sql
-- 语法
grant 权限列表 on 数据库.表名 to '用户名'@'主机名';
```
**一次授予所有权限**
```sql
grant all on * . * to '用户名'@'主机名';
```
**撤销权限**
```sql
revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名';
```
---
### 表操作
#### 创建表
创建 MySQL 数据表需要以下信息：
- 表名
- 表字段名
- 定义每个表字段
以下为创建 MySQL 数据表的 SQL 通用语法：
```sql
create table [if not exists] + 表名(
    字段名称 数据类型,
    ……
    字段名称 数据类型   /* 最后后一行，不需要加逗号 */
)[表选项];
```
其中，`if not exists` 表示如果表名不存在，就执行创建代码;如果表名存在，则不执行创建代码。
表选项则是用来控制表的表现形式的，共有三种，分别为：
- 字符集设定：charset/ character set+ 具体字符集，用来表示数据存储的编码格式，常用的字符集包括 GBK 和 UTF8 等。
- 校对集设定：collate+ 具体校对集，表示数据比较的规则，其依赖字符集。
- 存储引擎：engine+ 具体存储引擎，默认为 InnoDB，常用的还有 MyISAM.
```sql
-- 在已经指定的数据库中创建数据表 test_tbl：
CREATE TABLE IF NOT EXISTS `test_tbl`(
   `test_id` INT UNSIGNED AUTO_INCREMENT,
   `test_title` VARCHAR(100) NOT NULL,
   `test_author` VARCHAR(40) NOT NULL,
   `submission_date` DATE,
   PRIMARY KEY ( `test_id` )
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
```
- 如果你不想字段为 NULL 可以设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为 NULL ，就会报错。
- AUTO_INCREMENT 定义列为自增的属性，一般用于主键，数值会自动加1。
- PRIMARY KEY关键字用于定义列为主键。 你可以使用多列来定义主键，列间以逗号分隔。
- ENGINE 设置存储引擎，CHARSET 设置编码。
由于任何表都归属于某个数据库，因此在创建表的时候，都必须先指定具体的数据库。在这里，指定数据库的方式有两种，分别为：
第 1 种：显式的指定表所属的数据库，示例
```sql
create table if not exists test.student(
    name varchar(10),
    age int,            /* 整型不需要指定具体的长度 */
    grade varchar(10)   /* 最后后一行，不需要加逗号 */
)charset utf8;
```
第 2 种：隐式的指定表所属的数据库，示例
```sql
use test;               /* use + 数据库名称，表示切换到指定的数据库，这句命令其实不加分号也可以，但不建议这么做 */
create table if not exists student(
    name varchar(10),
    age int,            /* 整型不需要指定具体的长度 */
    grade varchar(10)   /* 最后后一行，不需要加逗号 */
)charset utf8;
```
创建 MySql 的表时，表名和字段名外面的符号 ` 不是单引号，而是英文输入法状态下的反单引号，也就是键盘左上角 esc 按键下面的那一个 ~ 按键
反引号是为了区分 MySql 关键字与普通字符而引入的符号，一般的，表名与字段名都使用反引号。
#### 删除表
MySQL 中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。
```sql
-- drop table table_name : 删除表全部数据和表结构，立刻释放磁盘空间，不管是 Innodb 和 MyISAM;
drop table student;
-- 判断表是否存在，若存在则删除;
drop table if exists 表名称;
-- truncate table table_name : 删除表全部数据，保留表结构，立刻释放磁盘空间 ，不管是 Innodb 和 MyISAM;
truncate table student;
-- delete from table_name : 删除表全部数据，表结构不变，对于 MyISAM 会立刻释放磁盘空间，InnoDB 不会释放磁盘空间;
delete from student;
-- delete from table_name where xxx : 带条件的删除，表结构不变，不管是 innodb 还是 MyISAM 都不会释放磁盘空间;
delete from student where T_name = "张三";  -- 实例，删除学生表中姓名为 "张三" 的数据：
-- delete 操作以后，使用 optimize table table_name 会立刻释放磁盘空间，不管是 innodb 还是 myisam;
delete from student where T_name = "张三";  -- 实例，删除学生表中姓名为 "张三" 的数据：
-- 实例，释放学生表的表空间：
optimize table student;
```
delete from 表以后虽然未释放磁盘空间，但是下次插入数据的时候，仍然可以使用这部分空间。
总结
- 当你不再需要该表时， 用 drop;
- 当你仍要保留该表，但要删除所有记录时， 用 truncate;
- 当你要删除部分记录时， 用 delete。
#### 查询表
```sql
-- 查看全部
show tables;
-- 查看部分（模糊查询）
show tables like 'pattern';
```
其中，pattern 是匹配模式，有两种，分别为：
- %：表示匹配多个字符;
- _：表示匹配单个字符。
此外，在匹配含有下划线 _ 的表名的时候，需要在下划线前面加上反斜线 `\_` 进行转义操作。
```sql
-- 表示匹配所有以 t 结尾的表。
show tables like '%t';
-- 查看表的创建语句
show create table 表名;
```
在这里，咱们也可以用 `\g` 和 `\G` 代替上述语句中的;分号，其中 `\g` 等价于分号，`\G` 则在等价于分号的同时，将查的表结构旋转 90 度，变成纵向结构。
```sql
-- 查看表中的字段信息
show columns from 表名;
-- 查询表的结构
desc 表名;
```
#### 更新表
```sql
-- 修改表名
rename table 旧表名 to 新表名;
-- 修改表选项
alter table 表名 表选项[=] 值;
-- 修改表的字符集
alter table 表名 character set 字符集名称;
-- 新增字段
alter table 表名 add [column] 列名 数据类型 [列属性][位置];
-- 其中，位置表示此字段存储的位置，分为 first（第一个位置）和 after + 列名（指定的字段后，默认为最后一个位置）.
alter table student add column id int first;
-- 只修改列的数据类型;
alter table 表名 modify 列名 数据类型 [列属性][位置];
-- 其中，位置表示此字段存储的位置，分为 first（第一个位置）和 after + 列名（指定的字段后，默认为最后一个位置）.
alter table student modify name char(10) after id;
-- 即修改列名，也修改该列的数据类型
alter table 表名 change 旧列名 新的列名 新的数据类型 [列属性][位置];
-- 其中，位置表示此字段存储的位置，分为 first（第一个位置）和 after + 列名（指定的字段后，默认为最后一个位置）.
alter table student change grade class varchar(10);
-- 删除字段
alter table 表名 drop 列名;
alter table student drop age;
-- 注意：如果表中已经存在数据，那么删除该字段会清空该字段的所有数据，而且不可逆，慎用。
```
#### 复制表
如果我们需要完全的复制 MySQL 的数据表，包括表的结构，索引，默认值等。 如果仅仅使用 CREATE TABLE ... SELECT 命令，是无法实现的。
```sql
CREATE TABLE targetTable LIKE sourceTable;
INSERT INTO targetTable SELECT * FROM sourceTable;
​
可以拷贝一个表中其中的一些字段:
CREATE TABLE newadmin AS
(
    SELECT username, password FROM admin
)
​
可以将新建的表的字段改名:
CREATE TABLE newadmin AS
(
    SELECT id, username AS uname, password AS pass FROM admin
)
​
可以拷贝一部分数据:
CREATE TABLE newadmin AS
(
    SELECT * FROM admin WHERE LEFT(username,1) = 's'
)
​
可以在创建表的同时定义表中的字段信息:
CREATE TABLE newadmin
(
    id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY
)
AS
(
    SELECT * FROM admin
)
```
或
```sql
create table 新表 select * from 旧表
```
**整体方法**
步骤一: 获取数据表的完整结构。
```sql
mysql> SHOW CREATE TABLE test_tbl \G;
*************************** 1. row ***************************
       Table: test_tbl
Create Table: CREATE TABLE `test_tbl` (
  `test_id` int(11) NOT NULL auto_increment,
  `test_title` varchar(100) NOT NULL default '',
  `test_author` varchar(40) NOT NULL default '',
  `submission_date` date default NULL,
  PRIMARY KEY  (`test_id`),
  UNIQUE KEY `AUTHOR_INDEX` (`test_author`)
) ENGINE=InnoDB
1 row in set (0.00 sec)
```
步骤二
修改 SQL 语句的数据表名，并执行 SQL 语句。
```sql
mysql> CREATE TABLE `clone_tbl` (
  -> `test_id` int(11) NOT NULL auto_increment,
  -> `test_title` varchar(100) NOT NULL default '',