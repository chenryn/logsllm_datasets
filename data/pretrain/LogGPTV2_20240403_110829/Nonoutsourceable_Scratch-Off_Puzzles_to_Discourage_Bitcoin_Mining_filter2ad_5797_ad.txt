function that generates a puzzle instance, and in all of our schemes
GenPuz(1λ) simply returns a uniform random string. However,
in the actual Bitcoin protocol, the next puzzle instance is gener-
ated by applying a hash function to the solution of the previous
puzzle. Our approach is likewise to determine each next puzzle in-
stance from the hash of the previous solution and message, puz(cid:48) :=
H(puz(cid:107)m(cid:107)ticket).
Further Integration Issues. In the full online version of our paper,
we further discuss how our nonoutsourceable puzzles can be com-
bined with other proposals for complementary properties, such as
faster blocks [26, 40], support for lightweight mobile clients [32],
and either ASIC-resistance [43] or backward-compatibility with
existing mining equipment [17].
8. MULTI-TIER BLOCK REWARDS
We want to arrive at a cryptocurrency design that simultane-
ously discourages centralized mining pools and hosted mining ser-
vices, yet encourages participation from individual miners and pro-
vides similar overall functionality and security as Bitcoin today. To
achieve this, there are two major remaining challenges.
Challenge 1: Lower variance rewards for individual miners.
Individual miners should not have to wait an unreasonable amount
of time to earn a Bitcoin reward. Intuitively, we can achieve this
by decreasing the average time between blocks, so that rewards are
given out much more frequently. We are constrained, however, by
the latency of network propagation, and the time it takes to compute
the zero knowledge proofs used in the strongly nonoutsourceable
puzzle.
Challenge 2: Discourage statistical enforcement over time. Our
deﬁnition of nonoutsourceable puzzles essentially describes a one-
shot game, and ensures that the worker can steal a single puzzle
solution from the pool operator and evade detection. However, this
deﬁnition does not immediately eliminate statistical enforcement
techniques over time. For example, pool operators could mon-
itor the output of a hosted service provider and punish it (e.g.,
through legal prosecution) if it underperforms signiﬁcantly. Intu-
itively, we should address this by giving out larger rewards much
less frquently, so that the worker can steal solutions over some rea-
sonable timeframe and plausibly claim it was just unlucky.
Conﬂicting requirements. What we need is a reward structure that
simultaneously answers the above challenges. Challenge 1 desires
paying out small rewards rapidly, whereas Challenge 2 clearly fa-
vors paying out large rewards less frequently. Further, to satisfy
Challenge 1, if we reduce the inter-block time to the order of sec-
onds, we phase another challenge: since it takes at least 14 seconds
to generate the zero-knowledge proof, it would be infeasible for a
miner to steal a block this way. The miner could choose to steal
the reward using the plaintext option, but since the reward at stake
is low, the mining pool could require a small collateral deposit to
discourage such blatant stealing.
8.1 Proposed Multi-Tier Reward Structure
We propose to satisfy both of these properties by designing a
reward structure with multiple possible prizes. Our multi-tier de-
sign is inspired by the payoff structure of state lottery games, which
often have several consolation prizes as well as large, less frequent
jackpots [34,38]. The effectiveness of such lotteries at encouraging
wide participation has long been proven in practice. Our implicit
assumption is that miners will tolerate a high-variance payoff over-
all, as long as they earn some reward fairly frequently.
In Table 3, we provide a concrete example of such a multi-tier
reward schedule, the rationale for which we discuss below. Each
attempt at solving a puzzle yields some chance of winning each of
three possible prizes (in contrast with Bitcoin today, in which every
block earns the same reward). The prizes are not only associated
with different reward values, but also count with varying weight
towards the blockchain “difﬁculty” scoring function. The ﬁrst two
columns indicate the average time between rewards of a given type,
along with their relative frequency (adding up to 1). The middle
two columns indicate the prize value (in btc), along with the real-
tive contribution to the total expected reward value (adding up to
1). Note that the overall expected payout rate is the same as in Bit-
coin today (25btc every 10 minutes, on average). The ﬁnal pair of
columns indicates the blockchain difﬁculty weight associated with
each reward type along with their expected relative contributions
687Table 2: Proof and veriﬁcation micro-benchmarks for strongly nonoutsourceable puzzles
C
1
2
3
4
#
220
120
80
60
Gates
213k
280k
392k
467k
Pinocchio [36]
Prove
268.2s
578.4s
1002.9s
1242.1s
Verify
11ms
11ms
11ms
11ms
# Gates
1
282K
Prove
508.5s
Verify
10ms
Total
2.42s
1.32s
0.80s
0.66s
Total
0.01s
Type I Statements
Prove (Single-core)
16.33s
20.29s
26.92s
32.88s
19.42s
Type II Statements
Prove (Single-core)
Libsnark [5]
Prove (Multi-core) Verify
7.6ms
7.7ms
7.7ms
7.8ms
9.84s
13.90s
17.18s
20.71s
Prove (Multi-core) Verify
7.8ms
13.34s
Total
1.672s
0.924s
0.616s
0.468s
Total
0.008s
Size
29.4KB
23.2KB
17.0KB
10.8KB
Size
<1KB
towards the overall difﬁculty of a blockchain (again, adding up to
1).
Low-value consolation prize: provides low-variance rewards
to solo-miners. The consolation prize is awarded the most fre-
quently (e.g., once every three seconds). The prize is small, less
than a tenth of a Bitcoin (≈$21 at the time of writing), but the
small prizes contribute overall to 70% of the total expected value.
Medium-value main prize: ensures block conﬁrmations ar-
rive regularly. The medium-value prizes are necessary to ensure
that the log of transactions approximately as quickly and securely
as in Bitcoin. They are given out at the same rate as ordinary Bit-
coin blocks; they carry a larger reward than the low-value prize,
but contribute much less to the overall expected payout. However,
the medium-value blocks account for nearly 75% of the total dif-
ﬁculty, and a miner who ﬁnds one of these blocks has an average
of 7.5 minutes to propagate her solution before it would become
stale. The 14 seconds it takes to compute a zero-knowledge proof
is relatively small in comparison.
High-value jackpot: defends against statistical detection of
cheating hosted mining services. The jackpot prize is very rare,
and accounts for a small, yet disproportionately large fraction of
the total expected value. The role of this reward is to engender
distrust of hosted mining providers; they would proﬁt greatly by
stealing these rewards, but it would be hard to obtain statistical
evidence that they have done so.
Implementing Multi-Tier Rewards. It is straightforward to im-
plement multi-tier rewards on top of any known scratch-off puzzle
constructions (i.e., Bitcoin or our nonoutsourceable constructions).
Recall that in these constructions, the critical step of a mnining at-
tempt is to compare a hash value to a threshold, H(puz(cid:107)ticket)
?
<
T , where the threshold T = 2λ−d is parameterized by the difﬁ-
culty d. To implement three reward tiers, we introduce two ad-
ditional thresholds, Tmedium < Thigh < T . If the hash value lies
between Thigh and T , then this attempt earns a high-value reward;
if it is between Tmedium and Thigh it earns a medium-value reward;
and otherwise it earns a low-value reward. These thresholds must
be set according to the desired frequency of each reward type.
8.2 Economic Analysis of Multi-Tier Rewards
We argue that our proposed reward structure would simultane-
ously satisfy the necessary properties.
First, our scheme offers small payoff variance. At the time of
writing, the overall Bitcoin hashpower is over 3.5· 1017 hashes per
second. The most cost effective entry-level Bitcoin ASIC we know
of is the 8.0 · 1014 ASICMiner BE Tube, which costs $320. Using
this device to solo-mine, the expected time to ﬁnd a block would be
over 8.3 years. However, under our proposed scheme and typical
parameters, over a 60 day period, the mining rig mentioned earlier
has a better than 98% chance of winning at least one of these prizes.
Table 3: Reward schedules for Bitcoin & our scheme. We give a
typical parametrization for the multi-tier reward structure. Param-
eters can be tuned based on different scenarios.
Time
1
10m
.995
3s
10m
.005
3mo 3.8E-7
Freq Prize (btc)
25
8.8E-2
5
3.3E4
(rel)
(rel) Weight
1
1
1 0.2499
600 0.7497
1800 3.4E-4
1
0.7
0.2
0.1
Bitcoin
Low
Med
High
Next we argue that the payoff structure is also effective at pre-
venting temporal statistical detection. Suppose a large hosted min-
ing provider controls 25% of the network hashpower. Under the
original Bitcoin reward structure, it should expect to mine 6574
blocks during a six-month period, and the chance of it mining fewer
than 6429 blocks (≈ 98%) is less than one in a thousand. Hence,
it could expect steal at most 145 puzzle solutions (worth $900,000,
at today’s price) over this time period before being implicated with
high conﬁdence – and even less before generating considerable sus-
picion. On the other hand, under our proposed scheme, even if the
service provider is honest, it has a better than 60% chance of fail-
ing to ﬁnd any jackpot during the same time period. Thus if it does
steal one, it would arouse no suspicion, yet the expected value of
this strategy is over $4.1 million USD.
Finally, we explain that as in the strawman scheme, it is plausible
that if miners joined pools requiring small collateral deposits that
they would prefer not to defect when they ﬁnd low-value blocks.
However, since the low-value blocks account for only 25% of the
blockchain’s total difﬁculty, even if a coercer inﬂuences all the
transactions in these blocks, this would be insufﬁcient to enforce
a blacklist policy, for example. The difﬁculty weight of the main
prize is high enough to provide ample time to steal the puzzle so-
lution (7.5 minutes) and adequate incentive to do so (thousands of
dollars worth). Since these blocks account for 75% of the over-
all difﬁculty, pool members would be encouraged at least to steal
these blocks. Note that the jackpot blocks count more towards the
blockchain weight than the other blocks (so that a miner who ﬁnds
a jackpot block has a long time window (45 minutes on average)
before it becomes stale), but contributes very little to the total dif-
ﬁculty of a chain. This prevents an attacker from revising a large
span of history by ﬁnding a single jackpot block.
9. DISCUSSION
We have proposed a technical countermeasure against the con-
solidation of mining power that threatens the decentralization of
Bitcoin and other cryptocurrencies. Although we have presented a
formal deﬁnition that captures the security guarantees of our con-
struction and described how it can be practically integrated into a
cryptocurrency, due to the difﬁculty involved in modifying an in-
use cryptocurrency (i.e., via a “hard fork” upgrade [7]) and the high
688stakes involved in cryptocurrencies generally, the bar for adopting
a new design is set very high. Our work provides a signiﬁcant step
in this direction by providing a sound and practical approach to
discouraging centralization. However, in order for our solution to
be deployed we must provide a thorough and compelling argument
that this solution is fully effective, preferable to all alternatives, and
does not conﬂict with other aspects of the system. Towards this end,
we address several typical objections we have encountered in the
past, from academic reviewers and the Bitcoin community alike:
“Mining pools are good because they lower the variance for
solo miners. Therefore, nonoutsourceable puzzles are not well-
motivated.” In Section 1 we describe the severe consequences that
can occur due to the concentration of mining power — basically
all purported security properties of decentralized cryptocurrencies
can be broken if mining coalitions with signiﬁcant mining power
misbehave (and in some cases it may be in their best interest to
misbehave [18]). Further, our multi-tier reward system design (see
Section 8.2) achieves the best of both worlds, (i.e., ensuring low
variance for solo mining as well as discouraging mining coalitions).
“Can miners still use smart contracts or legal contracts to en-
force mining coalitions in spite of the nonoutsourceable puz-
zles?” Our deﬁnition of nonoutsourceable puzzles prevents the en-
forcement of contractual mechanisms including smart contracts or
legal contracts. An enforcement mechanism, such as seizing collat-
eral deposits or legal prosecution, is only effective if it can be ap-
plied with few false positives. The worker can steal the puzzle so-
lutions without being held accountable, since the zero-knowledge
spending option ensures the worker can spend stolen coins without
revealing any evidence that can later be used to implicate it.
“What about collecting statistical evidence cheating workers?”
Suppose a pool operator monitors the puzzle production rate of a
worker over time, to detect if the worker is potentially cheating.
One enforcement mechanism might be for the pool to require that a
worker submit a deposit to join, such that in case the worker is not
producing solutions at the expected rate, the deposit can be conﬁs-
cated and redistributed.
As mentioned earlier in Section 8.2, our puzzle deﬁnition is by
nature a one-shot game. Although our nonoutsourceable puzzle
alone does not prevent the collection of statistical evidence, in Sec-
tion 8.2, we argued that by combining our puzzle with a multi-tier
reward system, we effectively make it highly costly or unreliable to
accumulate statistical evidence over time. In particular, a worker
can opt to steal only the “jackpot prize” (which happens only infre-
quently but offers a large reward), while behaving honestly when
it ﬁnds a “consolation prize” which is of much smaller amount but
paid off at a frequent interval. Such an attack cannot be reliably
detected within a reasonable of timeframe (e.g., several years).