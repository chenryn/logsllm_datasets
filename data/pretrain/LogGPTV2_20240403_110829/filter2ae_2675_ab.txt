`2.jpg`, the original `_wp_attached_file` becomes `2019/02/2.jpg`.
Then we modify `_wp_attached_file` to `2019/02/1.jpg?/../../../evil.jpg` via
Post Meta variable overwriting, and the original image path here will be
stitched to `{wordpress_path}/wp-content/uploads/2019/02/1.jpg?/../../../evil.jpg`, which obviously does not
exist, so the stitching link will be `http://127.0.0.1/wp-content/uploads/2019/02/2.jpg?/../../../evil.jpg`. The latter part is treated
as GET request and the original picture will be successfully obtained.
The new image path that immediately enters the save function will be stitched
to `{wordpress_path}/wp-content/uploads/2019/02/1.jpg?/../../../cropped-evil.jpg` and we will write a new file successfully.
Later on, save function will call the cropping function of your current image
library to generate the image result(the default is imagick).
    /wp-includes/class-wp-image-editor.php line 394
![
](https://images.seebug.org/content/images/2019/02/5b0141da-32df-4b58-b856-c448c9c7feb9.png-w331s)
It seems to be no limit here, but in the written target directory, there is a
fake directory, which is `1.jpg?`.
  * Linux and Mac support this fake directory, you can use “?”.
  * But Windows can't have “?” in path, so I changed it to “#”.
    &meta_input[_wp_attached_file]=2019/02/2-1.jpg#/../../../evil.jpg
Write the file successfully.
    cropped-evil.jpg
### Control template parameters to cause arbitrary file inclusion
In the original text, this part was simply mentioned, and we encountered many
problems in the process of practice. Even different versions of WordPress will
have different performances. Among them, a variety of utilization methods have
been put forward. Here I mainly talk about one stable way of utilization.
#### Set `_wp_page_template`
Let's firstly analyze under what circumstances we can set `_wp_page_template`.
To be sure, this variable is part of Post Meta, just like `_wp_attached_file`,
which can be assigned to this variable by the previous operation.
![
](https://images.seebug.org/content/images/2019/02/158f6bb3-077a-467c-9c6c-a216d02ea294.png-w331s)
But during the actual testing process, we found that we counldn’t modify and
set this value in any way.
    /wp-includes/post.php line 3828
  * If you set this value, but this file does not exist, it will be defined as default.
  * If this value is set, you cannot modify it in this way.
So we may need to upload a new media file and then set this value via variable
overwriting.
#### Load the template
When we successfully set the variable, we find that not all pages will load
the template. We return to the code and the place where the template is
finally loaded is as follows:
    wp-includes/template.php line 634
![
](https://images.seebug.org/content/images/2019/02/95e922c3-839e-4b00-9db7-0a26a8c37216.png-w331s)
As long as the file name in `$template_names` needs to be loaded, it will be
traversed and loaded in the current theme directory.
Backtracking
    wp-includes/template.php line 23
![
](https://images.seebug.org/content/images/2019/02/29697c7a-84d4-4cfd-a573-d93a0498754b.png-w331s)
Continuing backtracking, we find that when you visit the page, the page will
call different template load functions through the page properties you access.
    wp-includes/template-loader.php line 48
![
](https://images.seebug.org/content/images/2019/02/82c029a1-d222-442e-8191-c70cb4c5511b.png-w331s)
Among so many template calling functions, only `get_page_template` and
`get_single_template` call the `get_page_template_slug` function.
    wp-includes/template.php line 486
![
](https://images.seebug.org/content/images/2019/02/c40734d0-e4e7-47b1-a2d1-d73e486c0793.png-w331s)
The `get_page_template_slug` function gets the `_wp_page_template` value from
the database.
    /wp-includes/post-template.php line 1755
![
](https://images.seebug.org/content/images/2019/02/c0cc746f-85fc-4878-be3e-ecf32a9049a6.png-w331s)
As long as we can get the template to enter `get_page_template` or
`get_single_template` when it is being loaded, it can be successfully
included.
Due to the difference between the code and the front end, we have not
completely found out what the trigger condition is. We choose the easiest one
to upload a txt file in the repository, and then edit the information and
preview it.
![
](https://images.seebug.org/content/images/2019/02/57cc6235-3c7a-4dd1-8662-d2f05ec180ae.png-w331s)
### Generate an image hidden with malicious code
This part involves the problem of the back-end image library. There are two
back-end image processing libraries used by WordPress, "gd" and "imagick", and
the default priority is to use "imagick" for processing.
  * imagick  
It doesn't handle the "exif" part of the image. Adding sensitive code to exif
section will not change it.
  * gd  
The use of "gd" is more difficult. Not only will "gd" process the "exif" part
of the image, but also delete the PHP code that appears in the image. Unless
the attacker gets a well-constructed image through "fuzz", the required PHP
code can appear just after it has been cropped.
This is not the core part of the vulnerability, so no more details here.
## Repair
(1) Because the vulnerability is mainly through the picture trojan to complete
RCE, and while the back-end image library is "gd", the "exif" part of the
picture information will be removed, as well as the sensitive PHP code.
However, if an attacker carefully designs a picture that is cropped and just
generates sensitive code, it can result in RCE vulnerability. If the back-end
image library is "imagick", adding the sensitive code to the "exif" part of
the image information can cause RCE vulnerability.
This vulnerability has been fixed in all release versions available for
downloading. You can just update to the latest version or overwrite the
current version by yourself.
(2) The general defense method  
Use a third-party firewall for protection such as Knownsec Cloud Waf(Cloud Web
Application Firewall) (https://www.yunaq.com/cyd/)
(3) Technical service consulting  
The consulting hotline of Knownsec: 400-060-9587、028-68360638
## Conclusion
The entire RCE utilization chain consists of four parts. Deep into the
underlying Core logic of WordPress, these four parts are hard to cause
trouble, but they are cleverly connected, and the whole part is unexpectedly
the default configuration, greatly increasing the scope of impact. This kind
of attack utilization chain is quite rare in WordPress, which is extremely
secure. It deserves to be studied.
## About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was established by a group
of high-profile international security experts. It has over a hundred frontier
security talents nationwide as the core security research team to provide
long-term internationally advanced network security solutions for the
government and enterprises.
Knownsec's specialties include network attack and defense integrated
technologies and product R&D under new situations. It provides visualization
solutions that meet the world-class security technology standards and enhances
the security monitoring, alarm and defense abilities of customer networks with
its industry-leading capabilities in cloud computing and big data processing.
The company's technical strength is strongly recognized by the State Ministry
of Public Security, the Central Government Procurement Center, the Ministry of
Industry and Information Technology (MIIT), China National Vulnerability
Database of Information Security (CNNVD), the Central Bank, the Hong Kong
Jockey Club, Microsoft, Zhejiang Satellite TV and other well-known clients.
404 Team, the core security team of Knownsec, is dedicated to the research of
security vulnerability and offensive and defensive technology in the fields of
Web, IoT, industrial control, blockchain, etc. 404 team has submitted
vulnerability research to many well-known vendors such as Microsoft, Apple,
Adobe, Tencent, Alibaba, Baidu, etc. And has received a high reputation in the
industry.
The most well-known sharing of Knownsec 404 Team includes: [KCon Hacking
Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference"), [Seebug
Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability
Database") and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/
"ZoomEye Cyberspace Search Engine").
* * *