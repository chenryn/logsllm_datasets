# Toward Secure Embedded Web Interfaces

## Authors
- **Baptiste Gourdin**  
  LSV ENS-Cachan  
  Email: [EMAIL]
- **Chinmay Soman**  
  Stanford University  
  Email: [EMAIL]
- **Hristo Bojinov**  
  Stanford University  
  Email: [EMAIL]
- **Elie Bursztein**  
  Stanford University  
  Email: [EMAIL]

## Abstract
We address the challenge of building secure embedded web interfaces by introducing WebDroid, the first framework specifically designed for this purpose. Our design extends the Android Framework and enables developers to easily create secure web interfaces for their applications. To motivate our work, we conducted an in-depth study of the security of web interfaces embedded in consumer electronics devices, uncovering significant vulnerabilities in all examined devices and categorizing these vulnerabilities. We demonstrate how the security mechanisms in our framework prevent embedded applications from being susceptible to the vulnerabilities exposed by our audit. Finally, we evaluate the efficiency of our framework in terms of both performance and security.

## 1. Introduction
Virtually all network-capable devices, including simple consumer electronics such as printers and photo frames, come with an embedded web interface for easy configuration. The ubiquity of web interfaces can be attributed to two key factors: for end users, they are easy to use because the interaction takes place in a familiar environment (the web browser); for device manufacturers, providing a web-based interface is more cost-effective than developing and maintaining custom software and installers.

Although web interfaces are effective from a usability perspective, securing them requires considerable expertise. Our initial security audit of embedded web interfaces provided the impetus for this work. Compromising a networked device can serve as a stepping stone to compromising the local network. For example, compromising a photo frame in an office building can lead to the infection of a web browser connecting to the photo frame, which can then spread to the entire local network, resulting in privacy breaches. A router's web interface, for instance, can be exploited to steal the WiFi WPA key and gain access to the entire network. Mitigating the threats posed by embedded devices, including routers, is becoming increasingly critical, as highlighted in recent research. In the absence of a reference framework for building embedded web interfaces, each vendor must develop its own stack, often leading to security issues. This work builds on initial studies and proposes a solution that addresses all known sources of vulnerabilities in embedded web applications.

We chose to build our reference implementation as an Android application for several reasons. First, Android has become the leading open-source embedded operating system, shipping on millions of smartphones and specialized devices like the Nook e-book reader. Second, Android's bias towards the ARM architecture makes it suitable for embedding in other consumer devices such as cameras, photo frames, and media hubs. Third, the security architecture of Android is well-suited for embedded single-user devices, as it effectively isolates concurrent, potentially vulnerable applications.

Our main contribution, WebDroid, is the first open-source web framework specifically designed for building secure embedded web interfaces:
- **WebDroid** is designed, implemented, and evaluated based on the knowledge gained from auditing over 30 web-embedded devices' interfaces and discovering more than 50 vulnerabilities.
- **WebDroid** features a novel composition of security design principles and techniques, with a simple and intuitive configuration interface where most security mechanisms are enabled by default, including location and network address restrictions, server-side CSP, and frame-busting.
- **WebDroid** also includes application-wide authentication, ensuring that every embedded web application has a secure login and logout mechanism resistant to attacks, including brute-forcing and session hijacking.

Similar to previous work on building secure web servers (e.g., the OKWS server), our framework separates the core web server components from the applications to protect against low-level attacks. Unlike previous systems, our framework also mitigates all known application-level attacks, including XSS, CSRF, SQL injection, and Clickjacking.

The remainder of the paper is organized as follows: Section 2 provides the necessary background. Section 3 presents and categorizes the vulnerabilities found during our audit. Section 4 develops the threat model addressed by our system design, depicted in Section 5. Section 6 highlights the main defense mechanisms employed in our implementation. Section 7 presents the user interface for managing web applications. Section 8 discusses two application case studies and describes how WebDroid's security mechanisms help mitigate vulnerabilities. Section 9 summarizes relevant related work, and Section 10 concludes the paper.

## 2. Background
The market for embedded devices is growing rapidly. For example, in the fourth quarter of 2008, 7 million digital photo frames were sold, almost 50% more than in the same quarter of 2007. Similarly, analysts predict that by 2012, 12 million Network Attached Storage (NAS) devices will be sold annually. At the current pace, devices with embedded web servers will outnumber traditional web servers in less than two years; Netcraft reported approximately 40 million active web servers on the Internet in June 2009.

To differentiate their products, vendors are constantly adding new features, such as BitTorrent support in NAS devices. As the number of features increases, the need for a powerful management interface on the device becomes apparent. Vendors have started to embed web interfaces in their products to offer an intuitive, convenient, and cost-effective way to manage these features. While the most well-known use of these web interfaces is to configure network equipment like WiFi access points and routers, many other embedded devices include web interfaces. For instance, digital photo frames are an excellent example of this expansion, requiring a rich configuration interface. Thus, web interfaces have become the norm in managing embedded devices.

Our audit uncovered numerous examples of hastily implemented and vulnerable features. For example, Flickr integration in digital photo frames led to XSS attacks. We also found CSRF exploits in managed network switches intended for datacenter use, which could allow remote users to reboot them and effectively DoS an entire company intranet in one step.

**Figure 1**: The web interface embedded into a Samsung photo frame.

**Figure 1** shows a screenshot of the interface embedded in a high-end Samsung photo frame. This interface allows the user to control the frameâ€™s display remotely, add an Internet photo feed, and view various statistics. Although the interface appears well-designed, it is actually flawed: it is possible to bypass the authentication process to view photos, and there are CSRF and XSS vulnerabilities that allow an attacker to extract photos and send them to a remote server.

## 3. Embedded Web Application Security: State of the Art
Over the past two years, we audited the web interfaces of more than 30 embedded devices. In this section, we report our audit results and discuss the insights gained, which later guide the design of our framework's security features. Note that while some of the vulnerabilities were discussed in a previous publication, this is the first comprehensive report and discussion of the complete audit results.

### 3.1 Audit Coverage
We tested eight categories of devices: lights-out management (LOM) interfaces, NAS, photo frames, routers/access points, IP cameras, IP phones, switches, and printers. These categories spanned seventeen brands, as shown in Table 1. We tested devices from vendors specializing in one type of product, such as Buffalo, and from vendors with a wide range of products, such as D-Link.

### 3.2 Vulnerability Classes
- **XSS (Cross-Site Scripting)**: We found Type 2 (stored) XSS vulnerabilities in most devices, even those that perform some input checking. For example, the TrendNet switch ensures that its system location field does not contain spaces but does not prevent attacks of the form: `loc");document.write("`.
- **CSRF (Cross-Site Request Forgery)**: CSRF enables an attacker to compromise a device using an external website as a stepping stone for intranet infiltration. On embedded devices, it can be used to reboot critical network equipment and inject stored XSS and reverse XCS payloads.
- **File Security**: We checked whether it was possible to read or inject arbitrary files. Some devices, like the Samsung photo frame, allow attackers to read protected files without authentication. Even when the web interface was password-protected, it was possible to access stored photos using a specially crafted URL.
- **User Authentication**: Most devices have a default password or no password at all. Many authenticate users in cleartext (i.e., without HTTPS). This was true even for security cameras, which are intended to securely monitor private spaces. Some NAS and photo frames do not enforce authentication, allowing access to user content without being traced in logs. No device implements a password policy or anti-brute force defense.
- **Clickjacking Attacks**: All devices were vulnerable to clickjacking attacks, which can be used to reboot devices, erase content, and, in the case of routers, enable guest network access. Advanced clickjacking, as demonstrated by Paul Stone at Black Hat Europe 2010, allows attackers to steal the router WPA key or the NAS password.
- **XCS (Cross-Channel Scripting)**: XCS involves two steps: the attacker uses a non-web communication channel (e.g., FTP or SNMP) to store malicious JavaScript code on the server, and then sends the malicious content to the victim via the web interface. XCS vulnerabilities are prevalent in embedded devices due to their exposure to multiple services beyond HTTP.
- **Reverse XCS**: In a reverse XCS attack, the web interface is used to attack another service on the device, primarily to exfiltrate data protected by an access control mechanism.

We did not look for SQL injections, as it was unlikely that the audited devices would contain a SQL server. However, we consider SQL injection a potential threat and have included security mechanisms in our framework to mitigate it. Additionally, while we found weaknesses in the networking stack (e.g., predictable Initial Sequence Numbers), we do not discuss them here.

### 3.3 Tools Used
The audit of each device was conducted in three phases:
1. **General Assessment**: Using NMap and Nessus.
2. **Web Management Interface Testing**: Using Firefox and extensions like Firebug, Tamper Data, and Edit Cookies, along with a custom tool for CSRF analysis.
3. **XCS Testing**: Using hand-written scripts and command-line tools like smbclient.

### 3.4 Audit Results
Table 2 summarizes the classes of vulnerabilities found for each type of device. We use the symbol (cid:3) when one device is vulnerable to a class of attacks and (cid:4) when multiple devices in the class are vulnerable. The second column from the left indicates the number of devices tested in each category. The NAS category exhibits the highest number of vulnerabilities, followed by routers and IP cameras.

**Table 1: List of Devices by Brand**

| Brand          | Camera | LOM | NAS | Phone | Photo Frame | Printer | Router | Switch |
|----------------|--------|-----|-----|-------|-------------|---------|--------|--------|
| Allied         |        |     |     |       |             |         |        | (cid:88)|
| Buffalo        |        |     | (cid:88)|       |             |         |        |        |
| Belkin         |        |     |     |       | (cid:88)    |         | (cid:88)|        |
| D-Link         | (cid:88)| (cid:88)| (cid:88)| (cid:88)| (cid:88)    | (cid:88)| (cid:88)| (cid:88)|
| Dell           |        |     |     |       |             |         |        |        |
| eStarling      |        |     |     |       | (cid:88)    |         |        |        |
| HP             |        |     | (cid:88)| (cid:88)| (cid:88)    | (cid:88)| (cid:88)| (cid:88)|
| IBM            |        |     |     |       |             |         |        |        |
| Intel          |        |     |     |       |             |         |        |        |
| Kodak          |        |     |     |       | (cid:88)    |         |        |        |
| LaCie          |        |     | (cid:88)|       |             |         |        |        |
| Linksys        |        |     |     |       |             |         | (cid:88)| (cid:88)|
| Netgear        |        |     | (cid:88)|       | (cid:88)    |         | (cid:88)| (cid:88)|
| Panasonic      |        |     |     |       | (cid:88)    |         |        |        |
| QNAP           |        |     | (cid:88)|       |             |         |        |        |
| Samsung        |        |     |     |       | (cid:88)    |         |        |        |
| SMC            |        |     |     |       |             |         |        |        |
| TrendNet       |        |     |     |       |             |         |        | (cid:88)|
| ZyXEL          |        |     |     |       |             |         | (cid:88)| (cid:88)|

**Table 2: Summary of Vulnerabilities by Device Type**

| Device Type    | # Tested | XSS | CSRF | File Security | User Auth | Clickjacking | XCS | Reverse XCS |
|----------------|----------|-----|------|---------------|-----------|--------------|-----|-------------|
| Camera         | 5        | (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)|
| LOM            | 3        | (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)|
| NAS            | 8        | (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)|
| Phone          | 4        | (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)|
| Photo Frame    | 7        | (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)|
| Printer        | 5        | (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)|
| Router         | 6        | (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)|
| Switch         | 5        | (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)| (cid:4)|

**Figure 2: Overview of an XCS Attack**

[Insert Figure 2: Diagram showing the two-step process of an XCS attack.]

In the next sections, we will delve deeper into the threat model, our system design, and the specific defense mechanisms employed in WebDroid.