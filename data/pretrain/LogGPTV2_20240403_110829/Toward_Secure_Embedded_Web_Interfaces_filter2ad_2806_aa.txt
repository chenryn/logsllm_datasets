title:Toward Secure Embedded Web Interfaces
author:Baptiste Gourdin and
Chinmay Soman and
Hristo Bojinov and
Elie Bursztein
Toward Secure Embedded Web Interfaces
Baptiste Gourdin
LSV ENS-Cachan
PI:EMAIL
Chinmay Soman
Stanford University
PI:EMAIL
Hristo Bojinov
Stanford University
PI:EMAIL
Elie Bursztein
Stanford University
PI:EMAIL
Abstract
We address the challenge of building secure embedded
web interfaces by proposing WebDroid: the ﬁrst frame-
work speciﬁcally dedicated to this purpose. Our design
extends the Android Framework, and enables developers
to create easily secure web interfaces for their applica-
tions. To motivate our work, we perform an in-depth study
of the security of web interfaces embedded in consumer
electronics devices, uncover signiﬁcant vulnerabilities in
all the devices examined, and categorize the vulnerabili-
ties. We demonstrate how our framework’s security mech-
anisms prevent embedded applications from suffering the
vulnerabilities exposed by our audit. Finally we evaluate
the efﬁciency of our framework in terms of performance
and security.
1
Introduction
Virtually all network-capable devices, including sim-
ple consumer electronics such as printers and photo
frames, ship with an embedded web interface for easy
conﬁguration. The ubiquity of web interfaces can be
explained by two key factors. For end users, they are easy
to use because the interaction takes place in a familiar
environment: the web browser. For device manufacturers,
providing a web-based interface is cheaper than develop-
ing and maintaining custom software and installers.
Though web interfaces are clearly an effective solution
from a usability perspective, considerable expertise is
required to make them secure [50]. Our ﬁrst security
audit of embedded web interfaces ([7]) provided the
initial impetus for our work. To underscore the impact of
these earlier results, we point out that compromising a
networked device can be used as a stepping stone towards
compromising the local network [45]. For example,
compromising a photo frame in an ofﬁce building
can lead to an infection of a Web browser connecting
to the photo frame. The infection can subsequently
spread to the entire local network, and also result in
privacy breaches [8]. For instance a router web interface
can be exploited to steal remotely the WiFi WPA key
and gain access to the entire network. Mitigating the
threats posed by embedded devices, including routers,
is becoming a critical task, as pointed out repeatedly in
recent work [7, 45, 19, 27]. In the absence of a reference
framework for building embedded web interfaces
each vendor is forced to develop its own stack, which
usually leads to security problems. This work takes the
initial studies a step further and proposes a solution
that uniformly addresses all of the known sources of
vulnerabilities in embedded web applications.
We have chosen to build our reference implementation
as an Android application for several reasons. First,
Android has quickly become the premier open embedded
operating system on the market, shipping not only on
tens of millions of smart-phones every year, but also on
specialized devices such as the Nook e-book reader by
Barnes&Noble. Second, Android’s de facto bias towards
the ARM architecture makes the operating system
suitable for embedding in other consumer devices such
as cameras, photo frames, and media hubs. Third, the
security architecture adopted by Android is particularly
well-suited for embedded single-user devices as it casts
the system security question into one of effectively
isolating concurrent, possibly vulnerable applications.
Our main contribution in this paper, WebDroid [16], is
the ﬁrst open-source web framework speciﬁcally designed
for building secure embedded web interfaces:
• WebDroid is designed, implemented and evaluated
based on the knowledge we gained by auditing more
than 30 web embedded devices’ web interfaces over
the two last years, and the more that 50 vulnerabili-
ties we discovered on these devices.
1
• WebDroid is a novel composition of security design
principles and techniques with a simple and intuitive
conﬁguration interface where most of the security
mechanisms are enabled by default—including lo-
cation and network address restrictions, as well as
server-side CSP and frame-busting.
• WebDroid also features application-wide authen-
tication that ensures that every embedded web
application will have a secure login and logout
mechanism which is resistant to attacks, including
brute-forcing and session hijacking.
Similar to previous work done on building secure web
servers (e.g., the OKWS server [29]), our framework
separates the core web server components from the
applications to protect against low level attacks. Unlike
previous systems however, our framework also mitigates
all of the known application-level attacks including XSS
(Cross-Site Scripting) [13], CSRF (Cross Site Request
Forgery) [50], SQL injection [50] and Clickjacking [44].
The remainder of the paper is organized as follows: in
Section 2 we brieﬂy go through the background necessary
to understand this work. In Section 3 we present and
categorize the vulnerabilities we found during our audit
work. Section 4 develops the threat model that we address
with our system design depicted in Section 5. In Sec-
tion 6 we highlight the main defense mechanisms that are
employed in our implementation. Section 7 presents the
user interface for managing web applications. Section 9
discusses two application case studies and describes how
WebDroid security mechanisms help to mitigate vulnera-
bilities. In Section 10 we provide a summary of relevant
related work, and Section 11 concludes the paper.
2 Background
The embedded device market is growing rapidly. For
example, in the 4th quarter of 2008, 7 million digital
photo frames were sold, almost 50% more than in the 4th
quarter of 2007. Similarly, analysts forecast that by 2012,
12 million Network Attached Storage (NAS) devices
will be sold each year. At the current pace, devices with
embedded web servers will outnumber traditional web
servers in less than 2 years; Netcraft reported that there
are roughly 40 millions active web servers on the Internet
in June 2009 [35].
In order to differentiate their products from those of
their competitors, vendors are constantly adding novel
features to their products, such as BitTorrent support in
NAS devices.
As the number of features increases, a need for a
powerful management interface on the device rapidly
arises. To offer this in an intuitive, convenient, and
cost effective way, vendors have started to embed web
interfaces in their products. While the most well known
use of these web interface is to conﬁgure network
equipments such as WiFi access points and routers,
many other embedded devices include web interfaces.
For instance digital photo frames are an excellent
example of this expansion of features and need for a rich
conﬁguration interface. Thus, it is safe to say that web
interfaces have become the norm in managing embedded
devices.
Our audit uncovered abundant examples of features
that were hastily implemented and vulnerable to web at-
tacks. For example the Flickr integration in digital photo
frames led to XSS attacks. What is especially trouble-
some is the fact that we found CSRF exploits in managed
network switches aimed for datacenter use. Attacks on
such devices could allow remote users to reboot them and
effectively DoS an entire company intranet in one step.
Figure 1: The web interface embedded into a Samsung
photo frame.
Figure 1 is a screenshot of the interface embedded in
a high-end Samsung photo frame. This interface allows
the user to control the frame’s display remotely, add an
Internet photo feed to be displayed on the frame, and
to ﬁnd out various statistics. Although at ﬁrst sight this
interface looks perfectly designed, we found out that in
reality it is completely ﬂawed: for example, it is possible
to bypass the authentication process to view photos and
it is possible to inject an exploit via a CSRF and XSS
vulnerability that allows to extract photos and send them
to a remote server.
2
3 Embedded Web Application Security:
State of the Art
Over the last two years we audited the web interfaces
for more than 30 embedded devices. In this section we
report our audit results and discuss the insights we gained
from them. These results and insights are later used to
justify and guide the design of our framework security
features. Note that although we discussed some of the
vulnerabilities we found in a previous publication [8], this
is the ﬁrst time that the complete audit results are reported
and discussed.
3.1 Audit coverage
The eight categories of devices we tested are: lights-out
management (LOM) interfaces (these typically allow the
administrator to power cycle a PC or control network ac-
cess, bypassing the OS), NAS (used for shared storage
accessible via Ethernet), photo frames (we focused on
“smart” frames with network connectivity), routers/access
points (probably the most familiar browser-managed class
of consumer device), IP cameras (with video feeds that
can be accessed over the network), IP phones (especially
those with a web-based management interface), switches
(“managed switches” that expose some conﬁguration op-
tions), and printers (the larger ones usually have a HTTP-
based interface used to conﬁgure a variety of functions,
including access via e-mail). The eight device categories
spanned seventeen brands: Table 1 shows which types
of devices were tested for each brand. As one can see
we did test devices from vendors specialized in one type
of product such as Buffalo, and from vendors that have a
wide range of products such as D-link.
3.2 Vulnerability classes
XSS. As a warm-up we started by testing for Type 2
(stored) cross-site scripting (XSS) vulnerabilities [13],
which are common in web applications. Most devices
are vulnerable, including those that perform some input
checking. For example, the TrendNet switch ensures that
its system location ﬁeld does not contain spaces, but does
not prevent attacks of the form:
loc");document.write(".
XSS attacks are particularly dangerous on embedded
devices because they are the ﬁrst step toward a persistent
reverse XCS, as discussed below.
CSRF. Cross-site request forgery [50] enables an attacker
to compromise a device by using an external web site as
a stepping stone for intranet inﬁltration. On embedded
devices it can also be used as a direct vector of attack as it
allows the attacker to reboot critical network equipments
such as switches, IP phones and routers. Finally we used
CSRF as a way to inject Type 2 (stored) XSS and reverse
XCS [9] payloads.
File security. For each device, we checked whether it was
possible to read or inject arbitrary ﬁles. Some devices,
such as the Samsung photo frame, allow the attacker
to read protected ﬁles without being authenticated. On
this device, even when the Web interface was protected
by a password, it was still possible to access the photos
stored in memory by using a specially crafted URL. On
other devices, the Web interface could be compromised
by abusing the log ﬁle.
User authentication. Most devices have a default pass-
word or no password at all. Additionally, most devices
authenticate users in cleartext (i.e. without HTTPS). This
was even true for several security cameras, which is sur-
prising given that they are intended to securely monitor
private spaces. We even found that some NAS and photo
frames do not properly enforce the authentication mecha-
nism and it is possible to access the user content (i.e. pho-
tos) without being traced in the logs. Similarly, nothing is
done at the network level to prevent session hijacking as
the trafﬁc is in clear and the cookies are sent over HTTPS.
Finally as far as we can tell not a single device implements
a password policy or an anti-brute force defense.
Clickjacking attacks. Clickjacking attacks [18] are the
most recent, and most overlooked attack vectors as all
devices were vulnerable to them. While at ﬁrst sight this
does not appear to be a big issue, it turns out that being
able clickjack an embedded interface gives a lot of lever-
age to the attacker. For example basic Clickjacking can
be used to reboot devices, erase their content and in the
case of routers, enable guest network access. Advanced
Clickjacking [49] as demonstrated by Paul Stone at Black-
Hat Europe 2010 allows the attacker to steal the router
WPA key or the NAS password.
Figure 2: Overview of an XCS attack.
3
DeviceattackerUserAltermateChannelsWebInjectonStorageReﬂexionBrand
Allied
Buffalo
Belkin
D-Link
Dell
eStarling
HP
IBM
Intel
Kodak
LaCie
Linksys
Netgear
SMS networks
Panasonic
QNAP
Samsung
SMC
TrendNet
ZyXEL
Camera LOM NAS Phone Photo Frame Printer Router
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Switch
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Table 1: List of devices by brand.
XCS. A Cross-Channel Scripting attack [9] comprises
two steps, as shown in Figure 2.
In the ﬁrst step the
attacker uses a non-web communication channel such as
FTP or SNMP to store malicious JavaScript code on the
server. In the second step, the malicious content is sent
to the victim via the Web interface. XCS vulnerabilities
are prevalent in embedded devices since they typically
expose multiple services beyond HTTP. XCS bugs often
affect the interaction between two speciﬁc protocols only
(such as the combination of HTTP and BitTorrent), which
can make them harder to detect.
Reverse XCS. In a Reverse XCS attack the web interface
is used to attack another service on the device. We
primarily use reverse XCS attacks to exﬁltrate data that is
protected by an access control mechanism.
We did not look for SQL injections [21], as it was un-
likely that the audited devices would contain a SQL server.
However we still consider SQL injection attack to be a
potential threat and therefore our framework has security
mechanisms in place to mitigate them. Finally, while in
some cases we found weaknesses in the networking stack
(for example: predictable Initial Sequenced Numbers),
we do not discuss that topic here.
4
3.3 Tools used
The audit of each device was done in three phases. First,
we performed a general assessment using NMap [31] and
Nessus [42]. Next, we tested the web management inter-
face using Firefox and several of its extensions: Firebug
[20], Tamper Data [26], and Edit Cookies [51]. We used
a custom tool for CSRF analysis. In the third phase we
tested for XCS using hand written scripts and command
line tools such as smbclient.
3.4 Audit results
Table 2 summarizes which classes of vulnerabilities
were found for each type of device. We use the
symbol (cid:3)when one device is vulnerable to this class of
attacks and (cid:4)when multiples devices in the class are
vulnerable. The second column from the left indicates
the number of devices tested in that category. We sur-
vey the most interesting vulnerabilities in the next section.
Table 2 shows that the NAS category exhibits the