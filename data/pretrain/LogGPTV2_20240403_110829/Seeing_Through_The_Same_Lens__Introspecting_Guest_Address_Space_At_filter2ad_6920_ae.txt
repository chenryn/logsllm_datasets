### 8 相关工作

虚拟机内省（VMI）的基本问题在于通过重构内核对象来获取内核的语义。大量研究致力于直接从原始字节中恢复内核的数据结构。这些方法可以基于专家知识（如Memparser [12]、GREPEXEC [13]、Draugr [17]以及其他工具[2, 4, 5, 6, 8, 9, 22, 32]）或自动工具（如SigGraph [28]、KOP [15]和MAS [16]）。这类研究通常涉及大量的工程工作，并且在内存取证分析中非常有用。由于它们不强调实时内存内省，因此访问客户机实时状态的安全性和有效性并不是其主要关注点。总体而言，这些研究与本文的研究方向是正交的。

更为复杂的方法是利用现有的内核来解释并从实时客户机内存镜像中构造所需的内核对象。根据内省是否使用客户机VM的内核，这种方法可以进一步分为VM内内省和VM外内省。

#### VM内内省
一般来说，VM内内省方案旨在通过依赖客户机内核的能力来节省工程工作量。Process Implanting [23]将一个VMI程序（如strace和ltrace）加载到客户机VM中，并在一个现有进程的伪装下执行它。SYRINGE [14]在监控VM中运行VMI应用程序，并允许内省代码在客户机线程的上下文中调用客户机内核函数。当客户机内核不可信时，安全性和有效性会完全丧失，因为rootkit可以直接逃避或篡改内省。因此，这些VM内内省方案仅适用于监控客户机VM中的用户空间行为。SIM [34]是一种针对rootkit的VM内监控方案。为了在不受信任的客户机中运行监控代码，它创建了一个与客户机内核隔离的SIM虚拟地址空间，并在客户机中放置钩子以拦截事件。内核与SIM代码之间的地址切换由专用门控保护。

#### VM外内省
VM外内省代码位于目标客户机之外，因此可以在不直接面对攻击的情况下检测客户机VM中的内核级恶意活动。Virtuoso [18]通过在可信VM中训练监控应用程序并可靠地从中提取内省相关指令来生成内省代码。内省时，在可信VM中重放执行跟踪，其数据访问被重定向到客户机VM的内存。VMST [19]是另一种VM外内省技术，它通过在QEMU [11]模拟的监控VM中运行内省应用程序来重用内核代码。监控VM中运行污点分析，并将相关的数据访问重定向到客户机的实时内存。Hybrid-bridge [33]是一种结合了VMST和Virtuoso优点的混合方法。类似地，VMI应用程序在可信监控VM中运行并重用操作系统代码。与监控功能相关的内核数据访问被识别并在需要时重定向到客户机内核内存。EXTERIOR [20]是另一种受VMST启发的空间旅行方法，不仅支持客户机VM内省，还支持客户机VM的重新配置和恢复。

Process Out-Grafting [35]将被监控的进程从客户机VM迁移到监控VM。监控VM始终将系统调用转发给客户机，客户机内核处理后将结果返回给被监控的进程。这种方法隐含地假设客户机内核是可信的。

TxIntro [29]是一种非阻塞的VM外内省方法，设计用于及时内省。它主要关注改造硬件事务性内存以避免读取不一致的内核状态。在其设计中，VMI代码在植入的核心上运行，并且可以以本地速度访问客户机内存。然而，它缺乏足够的安全考虑，并且无法帮助内省代码与客户机保持一致的内存视图。为了使VMI代码看到与客户机内核相同的映射，其页表中的L4条目直接指向客户机内存中存在的L3页条目。但是，没有保证客户机内核在其执行过程中确实使用这些L3页条目进行地址转换。在内省运行期间，L4页表条目可能会动态更改，客户机内核可以通过使用另一个CR3值来使用完全不同的页表进行地址转换。实际上，除非内省代码始终直接使用与客户机相同的CR3值读取客户机，否则任何变化都可能发生在客户机使用的地址映射上，而VMI工具无法注意到这一点。因此，按照其设计，无法实现一致的地址转换，内省的有效性也会丧失。

### 9 结论
总之，我们展示了现有VM外内省系统中广泛使用的软件地址转换并不能有效解决地址差距问题。然后，我们提出了ImEE，它提供了架构支持以实现有效的目标访问。ImEE代理以与客户机内核相同的速度读取目标VM内存，地址转换由硬件以与客户机相同的方式执行。ImEE的本机访问速度允许与目标VM保持一致的内存视图。

### 致谢
本研究部分得到了华为技术有限公司的研究资助。

### 参考文献
[此处列出参考文献]

### 附录
A. 包含TLB的内省
由于硬件不会自动维护TLB条目和内存中的PTE之间的一致性，目标VM的对手可以利用这种硬件行为来击败内省。在访问VA处的页面后，对手修改PTE以将VA映射到另一个GPA而不更新TLB。基于页表的内省会导致与对手不同的内存视图。

ImEE方案可以扩展为通过正在运行的目标线程使用的TLB来访问目标内存。Hypervisor以之前描述的方式捕获目标核心。需要注意的是，借助Intel的新VPID技术，目标使用的TLB条目不会因VM退出而被逐出。我们的基本思想是在目标CR3中加载新的页表基址。

**注意事项**：上述两种方法仅适用于检查被拦截的线程。对手仍然可以使用秘密PCID隐藏其TLB条目。检测这些条目仍然是一个具有挑战性的问题。包含TLB的内省并不等同于检查TLB内的映射。没有特殊硬件技术的支持，软件无法检查每个TLB条目。

---

希望优化后的文本更加清晰、连贯和专业。如果有更多需要调整的地方，请告诉我！