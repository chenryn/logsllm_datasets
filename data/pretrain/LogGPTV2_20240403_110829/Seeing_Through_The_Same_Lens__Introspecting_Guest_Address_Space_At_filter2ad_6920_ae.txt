8 Related Work
The fundamental problem of VMI is to acquire the ker-
nel’s semantic by reconstructing the kernel objects. Sig-
niﬁcant efforts have been spent in directly recovering
the kernel’s data structures from the raw bytes.
It can
be based on expert knowledge (e.g., Memparser [12],
GREPEXEC [13], Draugr [17], and others [2, 4, 5, 6,
8, 9, 22, 32]) and automatic tools (e.g, SigGraph [28],
KOP [15], and MAS [16]). These studies usually involve
a large amount of engineering work and are useful for
memory forensic analysis. Since they do not emphasize
on live memory introspection, the security and effective-
ness of accessing the guest’s live state are not their main
concerns. In general, they are orthogonal to our study in
this paper.
A more sophisticated approach is to reuse the exist-
ing kernel to interpret and construct the desired kernel
objects from a live guest memory image. Based on
whether the introspection uses the guest VM’s kernel or
not, schemes using this approach can be further divided
into in-VM introspection and out-of-VM introspection.
In-VM Introspection.
In general, in-VM introspec-
tion schemes aim to save the engineering efforts by re-
lying on the guest kernel’s capabilities. Process Im-
planting [23] loads a VMI program such as strace and
ltrace into the guest VM and executes it with the cam-
ouﬂage of an existing process. SYRINGE [14] runs the
VMI application in the monitor VM and allows the in-
trospection code to call the guest kernel functions un-
der a guest thread’s context. When the guest kernel is
not trusted, the security and effectiveness are totally bro-
ken, because it is straightforward for a rootkit to evade
or tamper with the introspection. Hence, these in-VM in-
trospection schemes are only useful to monitor the user
space behavior in the guest VM. SIM [34] is an in-VM
monitoring scheme against rootkits. To run the monitor-
ing code inside the untrusted guest, it creates a SIM vir-
tual address space isolated from the guest kernel. Hooks
are placed in the guest to intercept events. The address
switches between the kernel and the SIM code is guarded
by dedicated gates.
Out-of-VM Introspection. The out-of-VM introspec-
tion code stays outside of the target guest. Therefore, it is
capable of introspecting the guest VM to detect kernel-
level malicious activities without directly facing the at-
tack. Virtuoso [18] generates the introspection code by
training the monitor application in a trusted VM and
reliably extracting the introspection related instructions
from the application. The execution trace is replayed
in a trusted VM when performing introspection, whose
data accesses are redirected to the guest VM’s memory.
VMST [19] is another out-of-VM introspection tech-
nique. It manages to reuse the kernel code by running
the introspection application in a monitor VM emulated
by QEMU[11]. A taint analysis runs in the monitor VM
and relevant data accesses are redirected to the guest’s
live memory. Hybrid-bridge [33] is a hybrid approach
which combines the strengths of both VMST and Vir-
tuoso. Similarly, the VMI application is running in the
trusted monitor VM and the OS code is reused. The
kernel data accesses which are related to the monitor-
ing functionality are identiﬁed and redirected to the guest
kernel memory when needed. EXTERIOR [20] is an-
other space traveling approach inspired by VMST, which
supports not only guest VM introspection but also recon-
ﬁguration and recovery of the guest VM.
Process Out-Grafting [35] relocates the monitored
process from the guest VM to the monitor VM. The mon-
itor VM always forwards system calls to the guest. The
guest kernel handles it and return back the results to the
monitored process. This approach requires the implicit
assumption that the guest kernel is trusted.
TxIntro [29] is an out-of-VM and non-blocking ap-
proach designed for timely introspection. It mainly fo-
cuses on retroﬁtting the hardware transactional memory
to avoid reading inconsistent kernel states. In its design,
the VMI code runs on an implanted core and can also ac-
cess the guest memory at a native speed. Nevertheless,
it lacks sufﬁcient security concerns and also fails to help
USENIX Association
26th USENIX Security Symposium    811
the introspection code have a consistent memory view
with the guest’s. In order to make the VMI code see the
same mapping with the guest VM’s kernel, the L4 en-
tries of kernel addresses in its page table directly point
to the L3 page entries existing in the guest VM’s mem-
ory. However, there is no guarantee that the guest kernel
uses these L3 page entries to translate kernel address in-
deed during its execution. The L4 page table entries can
be changed on-the-ﬂy during an introspection run and
the guest kernel can have completely different page ta-
bles to translate addresses by using another CR3 value.
In fact, unless the introspection code always keeps using
the same CR3 value with the guest’s directly when read-
ing the guest like ImEE, any change is able to happen on
the address mapping used in the guest and it is infeasible
for the VMI tool note that. Therefore by following its de-
sign, a consistent address translation cannot be achieved
and the effectiveness of the introspection is lost.
9 Conclusion
To summarize, we have shown that the software-based
address translation widely used in existing out-of-VM in-
trospection systems is not effective to bridge the address
gap. We then present the ImEE which provides the archi-
tectural support for effective target accesses. The ImEE
agent reads the target VM memory at the native speed as
its kernel, and the address translation is performed by the
hardware in the same way as in the guest. ImEE’s native
access speed allows consistent memory view with that of
the target VM.
Acknowledgement
This work is supported in part by a research grant from
Huawei Technologies, Inc.
References
[1] Bonnie++. http://www.coker.com.au/bonnie++/.
[2] Idetect. Online at http://forensic.seccure.net/.
[3] Lmbench - tools for performance analysis.
bitmover.com/lmbench/.
http://www.
[4] Lsproc. Online at http://windowsir.blogspot.com/2006/
04/lsproc-released.html.
[5] PROCENUM. Online at http://forensic.seccure.net/.
[6] Red Hat Crash Utility. Online at http://people.redhat.
com/anderson/.
[7] Standard performance evaluation corporation. https://www.
spec.org/cpu2006/.
Online
[8] Volatilitux.
volatilitux/.
at https://code.google.com/p/
[9] Windows Memory Forensic Toolkit.
forensic.seccure.net/.
Online at http://
[10] XED: x86 encoder decoder.
http://www.pintool.org/
docs/24110/Xed/html/.
[11] BELLARD, F. Qemu, a fast and portable dynamic transla-
In Proceedings of USENIX Annual Technical Conference,
tor.
(FREENIX Track) (2005), pp. 41–46.
[12] BETZ, C.
Memparser.
2005,
http://www. dfrws.
org/2005/challenge/memparser. shtml (2005).
[13] BUGCHECK, C. Grepexec: Grepping executive objects from pool
memory. In Report from the Digital Forensic Research Workshop
(DFRWS) (2006).
[14] CARBONE, M., CONOVER, M., MONTAGUE, B., AND LEE, W.
Secure and robust monitoring of virtual machines through guest-
In Research in Attacks, Intrusions, and
assisted introspection.
Defenses. Springer, 2012, pp. 22–41.
[15] CARBONE, M., CUI, W., LU, L., LEE, W., PEINADO, M., AND
JIANG, X. Mapping kernel objects to enable systematic integrity
checking. In Proceedings of the 16th ACM conference on Com-
puter and communications security (2009), ACM, pp. 555–565.
[16] CUI, W., PEINADO, M., XU, Z., AND CHAN, E. Tracking
In
rootkit footprints with a practical memory analysis system.
USENIX Security Symposium (2012), pp. 601–615.
[17] DESNOS, A.
Draugr-live memory forensics on linux.
https://code.google.com/archive/p/draugr/.
[18] DOLAN-GAVITT, B., LEEK, T., ZHIVICH, M., GIFFIN, J., AND
LEE, W. Virtuoso: Narrowing the semantic gap in virtual ma-
In Security and Privacy (SP), 2011 IEEE
chine introspection.
Symposium on (2011), IEEE, pp. 297–312.
[19] FU, Y., AND LIN, Z. Space traveling across VM: Automatically
bridging the semantic gap in virtual machine introspection via
online kernel data redirection. In Security and Privacy (SP), 2012
IEEE Symposium on (2012), IEEE, pp. 586–600.
[20] FU, Y., AND LIN, Z. Exterior: Using a dual-VM based exter-
nal shell for guest-OS introspection, conﬁguration, and recovery.
ACM SIGPLAN Notices 48, 7 (2013), 97–110.
[21] GARFINKEL, T., ROSENBLUM, M., ET AL. A virtual machine
introspection based architecture for intrusion detection. In In Pro-
ceedings of NDSS (2003), vol. 3, pp. 191–206.
[22] GARNER JR, G. M.
Kntlist.
2005, http://www. dfrws.
org/2005/challenge/kntlist. shtml (2005).
[23] GU, Z., DENG, Z., XU, D., AND JIANG, X. Process implanting:
A new active introspection framework for virtualization. In Reli-
able Distributed Systems (SRDS), 2011 30th IEEE Symposium on
(2011), IEEE, pp. 147–156.
[24] JAIN, B., BAIG, M. B., ZHANG, D., PORTER, D. E., AND
SION, R. SoK: Introspections on trust and the semantic gap.
In Proceedings of the 35th IEEE Symposium on Security and Pri-
vacy (2014).
[25] JANG, D., LEE, H., KIM, M., KIM, D., KIM, D., AND KANG,
B. B. ATRA: Address translation redirection attack against
In Proceedings of the 2014
hardware-based external monitors.
ACM SIGSAC Conference on Computer and Communications Se-
curity.
[26] LEE, H., MOON, H., JANG, D., KIM, K., LEE, J., PAEK, Y.,
AND KANG, B. B. KI-mon: A hardware-assisted event-triggered
monitoring platform for mutable kernel object. In Proceedings of
the 2013 USENIX Security Symposium (2013).
[27] LENGYEL, T. K., MARESCA, S., PAYNE, B. D., WEBSTER,
G. D., VOGL, S., AND KIAYIAS, A. Scalability, ﬁdelity and
stealth in the drakvuf dynamic malware analysis system.
In
Proceedings of the 30th Annual Computer Security Applications
Conference (2014), ACM, pp. 386–395.
812    26th USENIX Security Symposium
USENIX Association
the agent to the trapped vCPU and to set up the identical
context used for TLB lookup.
The strongest method is that the hypervisor injects the
introspection agent to the thread’s address space, by ei-
ther directly modifying the target memory or using EPT
redirection as in the ImEE scheme. The execution of the
agent on the target’s core uses the TLB for translation
since it is in the same address space. Note that it dif-
fers from the in-VM introspection, because the agent ex-
ecution is independent of the target OS. Obviously, this
method is intrusive as it changes the target states and may
affect the execution of other target’s threads involving the
modiﬁed memory or mappings.
A non-intrusive way is to run the agent in an exter-
nal address space. As shown in Figure 12, the hyper-
visor creates a new page table directory with all its en-
tries being copied from the target’s except that one entry
is mapped to a separated page storing the mappings for
the agent. It loads the target’s CR3 with the new page
table base. Note that the PCID in the original CR3 is
not changed. When the agent runs, the TLB entries that
match the targeted VAs are used by the MMU (if the
entry has the same PCID). In case of TLB misses, the
agent still introspects the memory in the same way as in
the ImEE. The consistency is maintained because the tar-
get’s thread is not active during introspection. We have
experimented with this method. The result shows that
the agent does use the mappings in the TLB to read the
global page of the target, instead of following the map-
ping in the page table.
[28] LIN, Z., RHEE, J., ZHANG, X., XU, D., AND JIANG, X. Sig-
graph: Brute force scanning of kernel data structure instances
using graph-based signatures. In NDSS (2011).
[29] LIU, Y., XIA, Y., GUAN, H., ZANG, B., AND CHEN, H. Con-
current and consistent virtual machine introspection with hard-
In Proceedings of the 20th IEEE
ware transactional memory.
International Symposium on High Performance Computer Archi-
tecture (HPCA) (2014), IEEE, pp. 416–427.
[30] N. L. PETRONI, T. FRASER, J. M., AND ARBAUGH., W. A.
Copilot—a coprocessor-based kernel runtime integrity monitor.
In USENIX Security Symposium (Aug. 2004), pp. 179–194.
[31] PAYNE, B. D. Simplifying virtual machine introspection using
LibVMI. Tech. Rep. SAND2012-7818, Sandia National Labora-
tories, 2012.
[32] PETRONI, N. L., WALTERS, A., FRASER, T., AND ARBAUGH,
W. A. Fatkit: A framework for the extraction and analysis of
digital forensic data from volatile system memory. Digital Inves-
tigation 3, 4 (2006), 197–210.
[33] SABERI, A., FU, Y., AND LIN, Z. Hybrid-bridge: Efﬁciently
bridging the semantic gap in virtual machine introspection via
decoupled execution and training memoization. In Proceedings
of the 21st Annual Network and Distributed System Security Sym-
posium (NDSS), San Diego, CA (2014).
[34] SHARIF, M. I., LEE, W., CUI, W., AND LANZI, A. Secure
in-VM monitoring using hardware virtualization. In Proceedings
of the 16th ACM conference on Computer and communications
security (2009), ACM, pp. 477–487.
[35] SRINIVASAN, D., WANG, Z., JIANG, X., AND XU, D. Process
out-grafting: an efﬁcient out-of-VM approach for ﬁne-grained
process execution monitoring. In Proceedings of the 18th ACM
conference on Computer and communications security (2011),
ACM, pp. 363–374.
[36] SUNEJA, S., ISCI, C., DE LARA, E., AND BALA, V. Explor-
ing vm introspection: Techniques and trade-offs. In Proceedings
of the 11th ACM International Conference on Virtual Execution
Environment (VEE’15) (2015).
[37] WALTERS, A. The volatility framework: Volatile memory arti-
fact extraction utility framework, 2007.
Appendices
A TLB-inclusive Introspection
Since the hardware does not automatically maintain the
consistency between the TLB entries and the PTEs in
the memory, the target VM’s adversary can leverage this
hardware behavior to defeat introspection. After access-
ing a page at VA, the adversary then modiﬁes the PTE
to map VA to anther GPA without updating the TLB. An
introspection based on the page tables then results in a
different memory view from the adversary.
The ImEE scheme can be extended to access the tar-
get memory through the TLB used by the running target
thread. The hypervisor traps the target’s core in the same
way as describe before. Note that with the new VPID
technique from Intel, the TLB entries used by the target
are not evicted due to VM-exit. Our basic idea is to load
Figure 12: Basic idea of TLB-inclusive introspection.
The dashed arrows are used for introspection. The shad-
owed pages are allocated out of the target’s GPA range
so that the target’s core does not have TLBs for the page
table pages.
CAVEAT. The two methods above are only applicable
to check the intercepted thread. The adversary can still
use a secret PCID to hide its TLBs. It remains as a chal-
lenging problem to detect those entries. TLB-inclusive
introspection is not equivalent to checking the mappings
inside the TLB. Without using special hardware tech-
niques, it is infeasible to for software to inspect every
TLB entries.
USENIX Association
26th USENIX Security Symposium    813
ImEE agent 11 Target CR3