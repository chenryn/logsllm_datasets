Given the following two files in a project:
    //app.ts
    enum MyEnum {
        one,
        two,
        three
    }
    //class.ts
    namespace MyNamespace {
        //class must be exported for bug 
        export class MyClass {
            private message = "hello";
            log() {
                //setTimeout must be returned, not just called
                return setTimeout(() => console.log(this.message));
            }
        }
    }
The generated JavaScript for `MyClass.log` will erroneously reference `this`
instead of `_this` inside of the `setTimeout` method, i.e. it will emit:
    MyClass.prototype.log = function () {
        return setTimeout(function () { return console.log(this.message); });
    };
instead of:
    MyClass.prototype.log = function () {
        var _this = this;
        return setTimeout(function () { return console.log(_this.message); });
    };
Here are the conditions necessary for this to happen. They may not be the
_only_ conditions necessary (every time I think I have this bug nailed another
condition emerges), so if you cannot reproduce it let me know and I will send
a full project that exhibits the bug.
  * "Compile on save" must be enabled
  * "Combine JavaScript output into file" must be enabled, with a file specified (say, `out.js`)
  * "Generate declaration files" must be enabled
  * `MyClass` must be exported from a namespace
  * `setTimeout` must be _returned_ from `MyClass.log`, not just called
  * The output of `app.ts` must come before `class.ts` in the combined output file. I believe this is satisfied by the fact that "app.ts" is alphabetically before "class.ts".
If these conditions are satisfied, and if you alter `app.ts` _without_
altering `class.ts` and save, the `out.js` that is generated in response to
that save will have the erroneous code.
This is using Visual Studio 2015 and TypeScript 1.8.