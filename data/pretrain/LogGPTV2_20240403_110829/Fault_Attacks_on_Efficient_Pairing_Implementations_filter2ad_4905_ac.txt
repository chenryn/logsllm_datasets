(cid:1)(νyU −
1−ζ2
1−ζ2
Secret Key is the Second Argument of the Com-
pressed Pairing.
If the secret key is the second argu-
ment of the compressed pairing, we need to guess the num-
ber of the Miller Loop iterations that have been executed,
i.e.
the value of i in the previous subsection. Suppose
that we know this value, then we can compute the value
of T = (r1, r2 . . . ri)2 × P and since we also know the value
of the ﬁrst argument P , we can recover the value of the
second argument of the pairing which is the secret key Q.
Using
(cid:18) ζ 2
1 − ζ 2
(cid:19) µ
ν
C1
C
=
× xQ
yQ
,
and the value i of the iterations in the Miller Loop, we can
compute the tangent through point T and P = µ0
and we re-
ν0
cover the ratio between µ0 and ν0. We assume that µ0 = αµ
and ν0 = αν, and since the third component of the pairing
value is used to transform the value in a projective space
so it can have a coeﬃcient 1/β for every component and
consequently, we can rewrite the equations: C(cid:48)
1−ζ2
(cid:1)(ν0yT − µ0xT ), C(cid:48)
(cid:1)µ0xQ, C(cid:48) = 1
(cid:0) ζ2
(cid:0) −
0 = 1
βα
ζ
1 = 1
βα ν0yQ.
1−ζ2
βα
0, we can deduce the coeﬃcient 1
βα ,
1 and C(cid:48) we can ﬁnd the the
Using the formula of C(cid:48)
and then using the value of C(cid:48)
exact value of the point Q.
Secret Key is the First Argument of the Compressed
Pairing. Now, we try to recover the secret key in the ﬁrst
argument of the compressed pairing, in the same fault model
and when the value of the second point Q and the number
of the iterations i during the scanning of the binary repre-
sentation of the value r = (r0, r1, c . . . , rk)2 in Miller Loop
is known. Our goal is to recover the value of the ﬁrst point
P . We denote by ri the scalar represented by the binary
expansion (r0, r1, c . . . , ri).
(cid:0) 1−ζ2
As we already know the value of the second point Q, we
can compute using the value of C1 and C, the value of µ
and ν which are the numerator and the denominator of the
line slope through Q and U = [ri] · P . Using the value
of C0, we can ﬁnd a linear relation between xU and yU :
yU = µ
We remark that in this method the point U is a point
in the ﬁnite ﬁeld Fp, if the result computed using fault in-
jection was not two consecutive iterations, then there is no
reason that this value normally in F
p12 will be in the ﬁnite
ﬁeld Fp. This criteria can be used to discard many possible
ν xU − C0
(cid:1).
ζν
candidates of the following computation. Using the linear
relation found before and the relation imposed by the Weier-
strass equation of the elliptic curve, we get a polynomial in
one variable of degree 3 in xU . Consequently, we have 3
diﬀerent values for xU and then we use the linear relation
to recover yU . Now, we can recover P since we know ri and
we have U = [ri] · P . Therefore, we can recover at most
three diﬀerent values for P and it is easy to ﬁnd the correct
one by trying to decrypt a ciphertext for instance in an IBE
scheme.
Probability. We have to inject multiple double faults into
the loop bound value of Miller Loop to have two consecu-
tive iterations with the bit ”0”. The analysis of probability
of two consecutive loop bound value has been given by El
Mrabet [23]. Let B(n, N ) be the possible picks of n numbers
among N integers with no consecutive numbers. And this
value is given by a recurrence formula:
 B(n, N ) = 0 if N ≥ 0, n > 0,
B(n, N ) = (cid:80)N
among N , P (n, N ): P (n, N ) = 1 − B(n, N )/(cid:0)n+N
(cid:80)n
k=1 B(n − k, j − 2).
B(n, N ) = 1 if n = 0,
The probability to get two consecutive integers after n picks
(cid:1). If we
(1)
j=1
n
assume that the binary representation of r contains as many
zeroes as ones, the total number of faults needed is 2/P (n, N ).
3.2 Second Step: Generic Fault Attack on the
Final Exponentiation
To attack the ﬁnal exponentiation in general cases, we
need to inject many double faults. This attack is inspired
from the Page and Vercauteren’s attack [27] against the
Miller Loop. It is adapted to the implementation of the ﬁnal
exponentiation using the square-multiply method and leads
to a surprisingly alternative to Lashermes et al.’s attack.
The main advantage of this attack compared to the previ-
ous one is that we use the same fault model as in the previous
attacks of [27]. Consequently, we do not need to perform an
exhaustive search on the error introduced and our attack is
compatible with the speed-up usually used when computing
the ﬁnal exponentiation using the frobenius map.
Faults models. We take the same faults model as in the
attack against the Miller Loop. We can inject faults into the
control variable of the for loop and can force the loop ter-
mination without ﬁnishing the normal computation. Then
we can get the ﬁnal result calculated with the fault injected
to the loop.
Let m = p4−p2+1
r
= (m0m1 . . . ml)2 which is the binary
representation of the number of iterations for the ﬁnal expo-
nentiation. We will inject faults until we can ﬁnd two loop
counters m(cid:48) = (m0 . . . mi)2 and m(cid:48)(cid:48) = (m0 . . . mi+1)2, with
mi+1 = 1 in the implementation of square-and-multiply for
, m(cid:48)(cid:48) = m(cid:48)2f . Therefore, using m(cid:48)(cid:48) and m(cid:48), we can
p4−p2+1
r
f
recover the value of the f .
Number of faults needed to inject. As we must to inject
multiple faults to have two consecutive iterations and the
ﬁnal bit is 1, the birthday paradox gives us the probability
of the success: on average with p a prime number with 256
3 · 256 = 56 faults are needed to recover the value
bits, 2
of f the output of the Miller Loop. We remark that this is
diﬀerent from the attack of the Miller Loop, we do not need
√
645to guess the exact number of iterations executed, which can
be very expensive. However, the overall number of faults is
relatively high. Indeed, we have a birthday paradox on the
Miller Loop of size log(r) ≈ 256 and another one on the ﬁnal
exponentiation to the power (p4 − p2 + 1)/r, which is about
3× 256. The total complexity is about 2
3 · 256 ≈
1000 faults. We think that such high number of faults is not
really practical and in the next section, we propose a more
eﬃcient attack using less faults.
3.3 Second Step: Attack on the Final Expo-
√
√
256× 2
nentiation for BN-curves
Our ﬁrst generic attack requires to inject many faults
which makes it less realistic in practice compared to Lash-
ermes et al. attack. Therefore, we propose a more eﬃcient
attack when the ﬁnal exponentiation is not implemented as
a square-multiply approach, but with a more eﬃciently com-
putation adapted with the Barreto-Naherig Curve proposed
by Devegili, Scott and Dahab [11].
In the implementation of BN-curve (section 2.3), the ex-
pensive operation computes f−6x−5. The exponentiation to
the power 6x + 5 is usually not optimized, and the square-
multiply method is applied after the computation of 1/f .
Consequently, we can try to inject a fault in the loop control
variable to stop the loop before its end. Let ((cid:96)0, . . . , (cid:96)65)2
be the binary representation of the exponent (cid:96) = 6x + 5
and F be the group order p4−p2+1
, there exist L, M so that,
F = p4−p2+1
r
r
= (−6x − 5)[(p + 1)(6x2 + 1) + (p + 2)]
+[p3 + (2p + p2)(6x2 + 1) + 9p + 13]
= (−6x − 5) · L + M,
where L = (p + 1)(6x2 + 1) + (p + 2) is coprime with the
group order F and M = p3 + (2p + p2)(6x2 + 1) + 9p + 13. If
we fault the loop counter at the value 0 ≤ i ≤ 65, then the
(cid:19)
output exponent with fault is
(cid:18)
j=0 2j · (cid:96)j
(cid:96) −(cid:80)i
(cid:19)
= −(cid:96) · L + M +
j=0 2j · (cid:96)j
· L.
j=0 2j · (cid:96)j
(cid:18)(cid:80)i
(cid:18)
(cid:96) −(cid:80)i
Ki = −
· L + M
= F +
(cid:19)
· L
By testing all the 66 possible values for Ki, we observe that
there are 55 values of them are coprime with the group order
F . The other 11 values have a non-trivial gcd with the group
of
order. Consequently, we can compute the inverse K
(cid:1)· L in Z/F Z, and then, it is easy
Ki = F +(cid:0)(cid:96)−(cid:80)i
j=0 2j · (cid:96)j
−1
i
to invert the output of the pairing computation in order to
recover the output value of the Miller Loop for compressed
pairing computation. We remark that to mount this attack,
we must guess the number of iterations executed i. Since
the number of possible values for i is small, less than 55, we
reduce a lot the number of faults compared to the previous
generic attack.
4. ATTACKING DEVEGILI ET AL. IMPLE-
MENTATION FOR BKLS
gorithm returns a value computed with the wrong number
of iterations.
The general idea of the attack is to reduce the attack on nor-
mal pairing to the attack on compressed pairing. The main
problem consists in inverting the computation of f (p6−1)(p2+1)
to get f , then to deduce (cid:96)U,V (Q). Indeed, the previous at-
tack can be used to recover f (p6−1)(p2+1), but it seems very
diﬃcult to recover f since raising to the power (p6 − 1) kills
every factor of f in the multiplicative subgroup of F
p6 . As
a consequence, we have no hope to uniquely recover f .
However, we can use the compressed representation of
f (p6−1)(p2+1) to ﬁnd the compressed representation of
(cid:96)U,V (Q)(p6−1)(p2+1)
and deduce directly the value of P and Q as in the pre-
vious attack described. Our idea is to reduce the value
f (p6−1)(p2+1) in a compressed representation of f with (β0, β1).
Now, the two easy exponentiations can be removed (they are
not needed when we consider compressed pairing since the ﬁ-
p4−p2+1
r
M L
in
nal exponentiation of the compressed pairing is f
which fM L is the result of the Miller Loop when we compute
with compressed pairing). If we perform a fault on the loop
counter during the Miller loop algorithm with standard rep-
resentation, this will have a corresponding fault on the loop
counter during the Miller loop algorithm with compressed
representation. Now, our attack on compressed representa-
tion allows us to recover the argument of the pairing.
The attack is a second order attack and we need to inject
double faults in a single pairing computation. We remark
that using the same attack described in the section 3.1 we
can ﬁnd the value of ((cid:96)U,V (Q)(p6−1)(p2+1))p4−p2+1. Then,
using the same loop bound faults injection as in the section
3.3 we can recover a value (cid:96)U,V (Q)(p6−1)(p2+1) from the value
of ((cid:96)U,V (Q)(p6−1)(p2+1))p4−p2+1.
And since the same construction of ﬁnite ﬁeld is used,
F
p12 = (F
p2 (τ ))(σ), then there exists β = C0 + C1τ +
C2τ 2 with β ∈ F
p2 )3 such that
(cid:96)U,V (Q)(p6−1)(p2+1) = β−σ
β+σ .
We note that there is actually a bijection between the com-
pressed form (F0, F1) of a value f and the value f (p6−1)(p2+1),
but not between f and his compressed representation (F0, F1).
And (C0, C1) deﬁned in the section below is exactly the com-
pressed form of the value (cid:96)U,V (Q).
p6 and (C0, C1, C2) ∈ (F
As we saw before, the formula for the computation of the
compressed pairing (C0, C1) of line function (cid:96)T,P (Q) is:
(cid:18)
(cid:19) yT − µ
(cid:18) ζ 2
(cid:19) xQ
1 − ζ 2
.
yQ
C0 =
− ζ
1 − ζ 2
ν xT
, C1 =