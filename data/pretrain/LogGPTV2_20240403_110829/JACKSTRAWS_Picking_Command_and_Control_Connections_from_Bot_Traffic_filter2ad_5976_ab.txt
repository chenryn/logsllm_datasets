associated with y uses as argument some output that is
produced by system call x. That is, an edge represents a
data dependency between system calls x and y. Behav-
ior graphs have been introduced in previous work as a
suitable mechanism to model the host-based activity of
(malware) programs [5,13,26]. The reason is that system
calls capture the interactions of a program with its envi-
ronment (e.g., the operating system or the network), and
data ﬂows represent a natural dependence and ordered
relationship between two system calls where the output
of one call is directly used as the input to the other one.
Figure 1 shows an example of a behavior graph. This
graph captures the host-based activity of a bot that reads
the Windows serial number (ID) from the registry and
sends it to its command and control server. Frequently,
bots collect a wealth of information about the infected,
local system, and they send this information to their
C&C servers. The graph shows the system calls that are
invoked to open and read the Windows ID key from the
registry. Then, the key is sent over a network connec-
network: connectport: 80network: send   arg: socket=Result  network: recv   arg: socket=Result  systemcall: NtQueryValueKeyValuename: ProductId  arg: buf=KeyValueInformation  systemcall: NtOpenKeyKeyname: HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion  arg: KeyHandle=KeyHandle  systemcall: NtOpenKeyKeyname: \REGISTRY\MACHINE  arg: ObjectAttributes=KeyHandle  tion (that was previously opened with connect). An
answer is ﬁnally received from the server (recv node).
While behavior graphs are not novel per se, we use
them in a different context to solve a novel problem. In
previous work, behavior graphs were used to distinguish
between malicious and benign program executions. In
this work, we link behavior graphs to network trafﬁc and
combine these two views. That is, we use these graphs
to identify command and control communication amidst
all connections that are produced by a malware sample.
C&C templates. As mentioned previously, the behav-
ior graphs that are produced by our dynamic malware
analysis system are matched against a set of C&C tem-
plates. C&C templates share many similarities with be-
havior graphs. In particular, nodes n carry information
about system call names and arguments encoded as la-
bels ln, and edges e represent data dependencies where
the type of ﬂow is encoded as labels le. The main differ-
ence to behavior graphs is that the nodes of templates are
divided into two classes; core and optional nodes. Core
nodes capture the necessary parts of a malicious activity,
while optional nodes are only sometimes present.
To match a C&C template against a behavior graph G,
we deﬁne a similarity function δ. This function takes as
input the behavior graph G and a C&C template T and
produces a score that indicates how well G matches the
template. All core nodes of a template must at least be
present in G in order to declare a match.
Template generation. Each C&C template represents
a certain type of command and control activity. We use
the following four steps to generate C&C templates:
In the ﬁrst step, we run malware executables in our
dynamic malware analysis environment, and extract the
behavior graphs for their network connections. These
connections can be benign or related to C&C trafﬁc.
JACKSTRAWS requires that some of these connections
are labeled as either malicious or benign (for training).
In our current system, we apply a set of signatures to
all connections to ﬁnd (i) known C&C communication
and (ii) trafﬁc that is known to be unrelated to C&C.
Note that we have signatures that explicitly identify be-
nign connections as such. The signatures were manually
constructed, and they were given to us by a network se-
curity company. By matching the signatures against the
network trafﬁc, we ﬁnd a set of behavior graphs that are
associated with known C&C connections (called mali-
cious graph set) and a set of behavior graphs associated
with non-C&C trafﬁc (called benign graph set). These
sets serve as the basis for the subsequent steps.
It is important to observe that our general approach
only requires labeled connections, without considering
the payload of network connections. Thus, we could use
other means to generate the two graph sets. For exam-
ple, we can add a graph to the malicious set if the net-
work connection corresponding to this graph contacted
a known blacklisted C&C domain. This allows us to
create suitable graph sets even for encrypted C&C con-
nections. One could also manually label connections.
Of course, there are also graphs for which we do not
have a classiﬁcation (that is, neither a C&C signature nor
a benign signature has matched). These unknown graphs
could be related to either malicious or benign trafﬁc, and
we do not consider them in the subsequent steps.
The second step uses the malicious and the benign
graph sets as inputs and performs graph mining. More
precisely, we use a graph mining technique, previously
presented by Yan and Han [47,48], to identify subgraphs
that frequently appear in the malicious graph set. These
frequent subgraphs are likely to constitute the core activ-
ity linked to C&C connections. Some post-processing is
then applied to compact the set of mined subgraphs. Fi-
nally, the set difference is computed between the mined,
malicious subgraphs and the benign graph set. Only
subgraphs that never appear by subgraph isomorphism
in the benign graph set are selected. The assumption
is that the selected subgraphs represent some host- and
network-level activity that is only characteristic of par-
ticular C&C connections, but not benign trafﬁc.
In [13], the authors used a similar approach to distin-
guish between malware and harmless programs. To this
end, the authors used a leap mining technique presented
by Yan et al. [46] that selects subgraphs which maximize
the information gain between the malicious and benign
graph sets, that is to say subgraphs that maximally cover
(detect) the entire collection of malicious graphs while
introducing a very low number of false positives. How-
ever, during the mining process, this technique tends to
remove the graph parts that could be common to both
benign and malicious graphs. In our present case, these
parts are critical to obtain complete C&C templates. For
example, in the case of a download and execute com-
mand, if the download part of the graph is observed in
the benign set, leap mining would only mine the execute
part. For these reasons, we performed the set difference
with the benign graph set only as post-processing, once
complete malicious subgraphs have already been mined,
without risk of losing parts of them.
In addition, the algorithm proposed in [13] does not
attempt to synthesize any semantic information from the
mined behaviors; it does not produce a template that
combines related behaviors and generalizes their com-
mon core. In other words [13], “this synthesis step does
not add new behaviors to the set, it only combines the
ones previously mined.” In this paper, we go further and
introduce two additional, novel steps to generalize the
results obtained during the graph mining step. This is
important because we want to generalize from speciﬁc
instances of implementing a C&C connection and ab-
stract a core that characterizes the common and neces-
sary operations for a particular type of command.
As a third step, we cluster the graphs previously
mined. The goal of this step is to group together graphs
that correspond to a similar type of command and con-
trol activity. That is, when we have observed differ-
ent instances of one particular behavior, we combine
the corresponding graphs into one cluster. As an ex-
ample, consider different instances of a malware family
where each sample downloads data from the network via
HTTP, decodes it in some way, stores the data on disk,
and ﬁnally executes that ﬁle. All instances of this be-
havior are examples for typical bot update mechanisms
(download and execute), and we want to group all of
them into one cluster. As a result of this step, we ob-
tain different clusters, where each cluster contains a set
of graphs that correspond to a particular C&C activity.
In the fourth step, we produce a single C&C template
for each cluster. The goal of a template is to capture the
common core of the graphs in a cluster; with the assump-
tion that this common core represents the key activities
for a particular behavior. The C&C templates are gener-
ated by iteratively computing the weighted minimal com-
mon supergraph (WMCS) [3] between the graphs in a
cluster. The nodes and edges in the supergraph that are
present in all individual graphs become part of the core.
The remaining ones become optional.
At the end of this step, we have extracted templates
that match the core of the program activities for different
types of commands, taking into account optional opera-
tions that are frequently (but not always) present. This
allows us to match variants of C&C trafﬁc that might be
different (to a certain degree) from the exact graphs that
we used to generate the C&C templates.
3 System Details
In this section, we provide an overview of the actual im-
plementation of JACKSTRAWS and explain the different
analysis steps in greater details.
3.1 Analysis Environment
We use the dynamic malware analysis environment Anu-
bis [20] as the basis for our implementation, and imple-
mented several extensions according to our needs. Note
that the general approach and the concepts outlined in
this paper are independent of the actual analysis envi-
ronment; we could have also used BitBlaze, Ether, or
any other dynamic malware analysis environment.
As discussed in Section 2, behavior graphs are used
to capture and represent the host-based activity that mal-
ware performs. To create such behavior graphs, we
execute a malware sample and record the system calls
that this sample invokes.
In addition, we identify de-
pendencies between different events of the execution
by making use of dynamic taint analysis [38], a tech-
nique that allows us to asses whether a register or mem-
ory value depends on the output of a certain operation.
Anubis already comes with tainting propagation sup-
port. By default, all output arguments of system calls
from the native Windows API (e.g., NtCreateFile,
NtCreateProcess, etc.) are marked with a unique
taint label. Anubis then propagates the taint information
while the monitored system processes tainted data. Anu-
bis also monitors if previously tainted data is used as an
input argument for another system call.
While Anubis propagates taint information for data in
memory, it does not track taint information on the ﬁle
system.
In other words, if tainted data is written to a
ﬁle and subsequently read back into memory, the origi-
nal taint labels are not restored. This shortcoming turned
out to be a signiﬁcant drawback in our settings: For ex-
ample, bots frequently download data from the C&C,
decode it in memory, write this data to a ﬁle, and later
execute it. Without taint tracking through the ﬁle system,
we cannot identify the dependency between the data that
is downloaded and the ﬁle that is later executed. Another
example is the use of conﬁguration data: Many malware
samples retrieve conﬁguration settings from their C&C
servers, such as URLs that should be monitored for sen-
sitive data or address lists for spam purposes. Such con-
ﬁguration data is often written to a dedicated ﬁle before
it is loaded and used later. Restoring the original taint la-
bels when ﬁles are read ensures that the subsequent bot
activity is linked to the initial network connection and
improves the completeness of the behavior graphs.
Finally, we improved the network logging abilities
of Anubis by hooking directly into the Winsock API
calls rather than considering only the abstract interface
(NtDeviceIOControlFile) at the native system
call level. This allows us to conveniently reconstruct
the network ﬂows, since send and receive operations are
readily visible at the higher-level APIs.
3.2 Behavior Graph Generation
When the sample and all of its child processes have ter-
minated, or after a ﬁxed timeout (currently set to 4 min-
utes), JACKSTRAWS saves all monitored system calls,
network-related data, and tainting information into a log
ﬁle. Unlike previous work that used behavior graphs
for distinguishing between malicious and legitimate pro-
grams, we use these graphs to determine the purpose of
network connections (and to detect C&C trafﬁc). Thus,
we are not interested in the entire activity of the mal-
ware program. Instead, we only focus on actions related
to network trafﬁc. To this end, we ﬁrst identify all send
and receive operations that operate on a successfully-
established network connection.
In this work, we fo-
cus only on TCP trafﬁc, and a connection is considered
successful when the three-way handshake has completed
and at least one byte of user data was exchanged. All
system calls that are related to a single network con-
nection are added to the behavior graph for this connec-
tion. That is, for each network connection that a sample
makes, we obtain one behavior graph which captures the
host-based activities related to this connection.
For each send operation, we check whether the sent
data is tainted. If so, we add the corresponding system
call that produced this data to the behavior graph and
connect both nodes with an edge. Likewise, for each
receive operation, we taint the received data and check
if it is later used as input to a system call. If so, we also
add this system call to the graph and connect the nodes.
For each system call that is added to the graph in this
fashion, we also check backward dependencies (that is,
whether the system call has tainted input arguments). If
this is the case, we continue to add the system call(s)
that are responsible for this data. This process is re-
peated recursively as long as there are system calls left
that have tainted input arguments that are unaccounted
for. That is, for every node that is added to our behav-
ior graph, we will also add all parent nodes that produce
data that this node consumes. For example, if received
data is written to a local ﬁle, we will add the correspond-
ing NtWriteFile system call to the graph. This write
system call will use as one of its arguments a ﬁle han-
dle. This ﬁle handle is likely tainted, because it was
produced by a previous invocation of NtCreateFile.
Thus, we also add the node that corresponds to this cre-
ate system call and connect the two nodes with an edge.
On the other hand, forward dependencies are not recur-
sively followed to avoid an explosion in the graph size.
Graph labeling. Nodes and edges that are inserted into
the behavior graph are augmented with additional labels
that capture more information about the nature of the
system calls and the dependencies between nodes. For
edges, the label stores either the names of the input or
the output arguments of the system calls that are con-
nected by a data dependency. For nodes, the label stores
the system call name and some additional information
that depends on the speciﬁc type of call. The additional