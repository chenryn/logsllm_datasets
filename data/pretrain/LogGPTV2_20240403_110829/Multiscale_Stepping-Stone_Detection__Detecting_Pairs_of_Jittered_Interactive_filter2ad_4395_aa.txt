title:Multiscale Stepping-Stone Detection: Detecting Pairs of Jittered Interactive
Streams by Exploiting Maximum Tolerable Delay
author:David L. Donoho and
Ana Georgina Flesia and
Umesh Shankar and
Vern Paxson and
Jason Coit and
Stuart Staniford
Multiscale Stepping-Stone Detection:
Detecting Pairs of Jittered Interactive Streams
by Exploiting Maximum Tolerable Delay
David L. Donoho1, Ana Georgina Flesia1, Umesh Shankar2, Vern Paxson3,
Jason Coit4, and Stuart Staniford4
1 Department of Statistics, Stanford University
Sequoia Hall, 390 Serra Mall, Stanford, CA 94305-4065 USA
{donoho,flesia}@stanford.edu
2 Department of Computer Science, University of California at Berkeley
567 Soda Hall, Berkeley, CA 94704
PI:EMAIL
3 International Computer Science Institute
1947 Center St. suite 600, Berkeley, CA 94704-1198
PI:EMAIL
4 Silicon Defense
203 F Street, suit E, Davis, CA95616, USA
{stuart,jasonc}@silicondefense.com
Abstract. Computer attackers frequently relay their attacks through a
compromised host at an innocent site, thereby obscuring the true origin
of the attack. There is a growing literature on ways to detect that an
interactive connection into a site and another outbound from the site
give evidence of such a “stepping stone.” This has been done based on
monitoring the access link connecting the site to the Internet (Eg. [7,11,
8]). The earliest work was based on connection content comparisons but
more recent work has relied on timing information in order to compare
encrypted connections.
Past work on this problem has not yet attempted to cope with the
ways in which intruders might attempt to modify their traﬃc to defeat
stepping stone detection. In this paper we give the ﬁrst consideration
to constraining such intruder evasion. We present some unexpected
results that show there are theoretical limits on the ability of attackers
to disguise their traﬃc in this way for suﬃciently long connections.
We consider evasions that consist of local jittering of packet arrival times
(without addition and subtraction of packets), and also the addition of
superﬂuous packets which will be removed later in the connection chain
(chaﬀ).
To counter such evasion, we assume that the intruder has a “maximum
delay tolerance.” By using wavelets and similar multiscale methods,
we show that we can separate the short-term behavior of the streams
– where the jittering or chaﬀ indeed masks the correlation – from the
long-term behavior of the streams – where the correlation remains.
It therefore appears, at least in principle, that there is an eﬀective
countermeasure to this particular evasion tactic, at least for suﬃciently
long-lived interactive connections.
A. Wespi, G. Vigna, and L. Deri (Eds.): RAID 2002, LNCS 2516, pp. 17–35, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002
18
D. Donoho et al.
Keywords: Network intrusion detection. Evasion. Stepping Stone.
Interactive Session. Multiscale Methods. Wavelets. Universal Keystroke
Interarrival Distribution.
1 Introduction
Perpetrators launching network intrusions over the Internet of course wish to
evade surveillance. Of the many methods they use, one of the most common and
eﬀective is the construction of stepping stones. In this technique, the attacker
uses a series of compromised hosts as relay machines and constructs a chain of
interactive connections running on these hosts using protocols such as Telnet or
SSH. The commands typed by the attacker on their own host are then passed
along, unmodiﬁed, through the various hosts in the chain. The ultimate victim
of the attack sees traﬃc coming from the ﬁnal host in the chain, and because
this is not the actual origin of the attack, little is revealed about the real location
of the attacker.
An investigator seeking to locate the perpetrator would appear to be stymied
by the need to execute a lengthy and administratively complex ‘traceback’ pro-
cedure, working back host by host, ﬁguring out each predecessor in the chain
step-by-step (based on whatever log records may be available at each stepping-
stone site). For discussion of the use of stepping-stone attacks in high proﬁle
cases – and the diﬃculty of unraveling them – see for example [6] or [3].
An alternate paradigm for stepping-stone detection entails the installation of
a stepping-stone monitor at the network access point of an organization (such as
a university or other substantial local network). The monitor analyzes properties
of both incoming and outgoing traﬃc looking for correlations between ﬂows that
would suggest the existence of a stepping stone [7,11,8]. See Figure 1.
This tradition of work has all been concerned with traceback of interac-
tive connections: traceback of short non-interactive connections is harder and
is presently unaddressed in the literature. Nor do we address it here. However,
the interactive traceback problem is of interest, since there are many tasks that
attackers must perform interactively. If the hacker has a goal beyond just com-
promising machines for zombies, if he or she really wishes to exploit a particular
site for criminal ends, then the creative exploration and understanding of the
newly compromised site requires a signiﬁcant amount of human time, and for
this one or more interactive sessions are highly desirable.
Attackers who are aware of the risk of monitors looking for stepping stones
can attempt to evade detection of their stepping stones by modifying the streams
crossing the network access point so that they appear unrelated. Since the
stepping-stone hosts are under their control, we must assume that attackers
can arbitrarily modify their traﬃc in such evasion attempts. A wide spectrum
of possible evasions might be considered; in the worst case, the information the
attacker truly wishes to transmit could be embedded steganographically in con-
nections that appear to be quite unrelated, both as regards content and traﬃc
properties. On the other hand, such evasions might be very inconvenient to de-
sign, implement and use. It is of considerable interest to understand how well
Multiscale Stepping-Stone Detection
19
External
Internet
Connections
Univ.edu
Correlation
Finder
Fig. 1. Stepping-Stone Monitor
the various evasion techniques can work, and under what circumstances they can
be defeated by monitoring techniques – particularly the ones that are easiest to
deploy.
In this article we consider evasions based on keeping within the Telnet/SSH
connection paradigm – which is obviously the most convenient for the attacker
– and simply modifying the traﬃc being handled through the Telnet or SSH
connections. We discuss a class of evasions to the monitoring techniques based
on local timing perturbations, in which the stepping stone simply adds delay in
more or less random amounts to traﬃc crossing the stepping stone. However,
we assume that there is a maximum tolerable delay that the attacker is will-
ing to introduce (since humans are not able to work eﬀectively over interactive
connections with very long latencies). We give a theoretical result that such
packet conserving evasions are ineﬀective against appropriate correlation based
on multiscale analysis using wavelets, at least in the limit of long connections.
We then consider the case of attackers who add extra packets into their
connection, but still wish to have it look interactive. Again, we show that for
long enough connections, it will be possible to correlate the two connections
despite the added packets.
This suggests that the attacker wishing to evade stepping stone detection
would be ill-advised to rely solely on local timing jitter or addition of chaﬀ
packets to connections. Based on our analysis, it appears that the most likely
approach will require abandoning connection chains that use only standard in-
teractive protocols, such as Telnet or SSH, for more sophisticated schemes, that
can steganographically add traﬃc to connections that look like something else.
These tools will be correspondingly harder to install and use. However, we also
note that our results are primarily asymptotic, and require further analysis to
20
D. Donoho et al.
determine the degree to which attackers can still evade detection within the
framework by keeping their connections suﬃciently short.
2 Previous Approaches
Staniford and Heberlein (1995) [7] initiated the literature of stepping-stone de-
tection by considering chain-of-Telnet connections, in which the content is trans-
mitted in the clear, and therefore could be statistically analyzed. Their approach
was to tabulate character frequencies during set time intervals over all Telnet
connections into and out of a domain, and to compare the tables of character
frequencies looking for suspiciously good matches. As a technical feature, they
used statistical analysis tools (principal components) to reduce the dimension-
ality of the feature vector, enabling rapid comparisons of features of diﬀerent
connections.
The increasing use of SSH and other encrypted modes of communication in
recent years makes it important to develop a tool which does not require access
to the actual transmitted content. Zhang and Paxson (2000) [8] developed an
activity-based rather than content-based approach, which in particular could be
used with chain-of-SSH connections. Their approach was based on the observa-
tion that interactive sessions have a strong “on–oﬀ” structure. Given this, one
can then monitor the “oﬀ” periods of connections looking for suspicious coinci-
dences of connections making nearly simultaneous transitions to an “on” period.
They developed an on-line algorithm for looking for stepping stones and showed
they could do this in practice at a large site (though it turned out that most of
the stepping stones found were innocent).
Yoda and Etoh (2000) [11] also considered the problem of comparing interac-
tive network connections that might be encrypted and they too relied on timing
properties of the connection. However, they based their approach on looking at
the average time lag between one connection and another, minimized over pos-
sible time oﬀsets. They developed a quadratic time oﬀ-line algorithm for doing
this comparison, and showed at least a preliminary ability to discriminate step-
ping stones pairs from unrelated connection pairs based on a threshold of about
three seconds for the average delay between connections.
The mechanisms developed by Zhang/Paxson and Yoda/Etoh are both vul-
nerable to attackers perturbing the timing structure of their connections in order
to defeat the stepping stone detection. In this paper we demonstrate that, for
some types of perturbations, such vulnerabilities do not appear fundamental.
3 Next Generation Evasions
Existing approaches to detecting stepping-stones are subject to evasions, and
the purpose of this paper is to analyze the capabilities of some of these evasions.
The central issue is that attackers will have available the ability to eﬀect stream
transformations on the hosts in a stepping-stone chain, altering the relays from
performing pure ‘passthru’ to instead modifying the stream in some way.
Multiscale Stepping-Stone Detection
21
For example, in a Unix context, one could introduce ﬁlters for “chaﬀ embed-
ding” and “chaﬀ stripping.” Imagine a ﬁlter (cid:1)enchaff(cid:2) that merges the standard
input with meaningless ‘chaﬀ’ input from another source, so that the standard
input content comprises only a sub-sequence of the output stream; (cid:1)dechaff(cid:2)
extracts the embedded meaningful sub-sequence; and (cid:1)passthru(cid:2) simply copies
standard input to standard output. By chaining together such ﬁlters, one can
conceptually arrange that the content transmitted over the connection incoming
to a site will not obey the sequencing and volume relationships of the outgoing
connection, even though the semantic content is identical.
In fact, writing such ﬁlters in Unix is not quite trivial, due to buﬀering and
pseudo-tty issues. But clearly they are realizable without a great deal of eﬀort.
Accordingly, we need to consider the possible impact of stream transformations
used to evade stepping-stone detectors.
In short, the challenge for the next generation of stepping-stone monitors is
to detect correlated activity between two streams when
– One or both streams may be transformed
– It is not possible to examine content for correlations
4 The Constraint Hypothesis
Our research began with the hypothesis that, while arbitrary stream transfor-
mations might conceivably be very eﬀective at evading detections, certain con-
straints on interactive sessions might prevent the use of eﬀective transformations.
For interactive connections, we argue for the following two constraints:
– Latency constraints. Ultimately, the chain of interactive connections is tied
to a human user, for whom it will be annoying/tiring/error-prone to have
to wait a long time for the results of their typing to be echoed or processed.
Hence, we posit a maximum tolerable delay limiting what a stream transfor-
mation can impose; anything longer will be just too painful for the user.
– Representative traﬃc. Typing (and “think time” pauses) by humans mani-
fests certain statistical regularities in the corresponding interpacket spacings,
sharply distinct from machine-driven network communication. In particular,
interpacket spacings above 200 msec (the majority) are well-described as re-
ﬂecting a Pareto distribution with shape parameter α ≈ 1.0 [9]. A stream
transformation which upsets this regularity can in principle call attention to
itself and become itself a source of evident correlation between ingress and
egress connections.
We can summarize these constraints as: (i) the original stream and its trans-
formation must be synchronized to within a certain speciﬁc maximum tolerable
delay, and (ii) the stream interarrival times must have the same distribution as
the universal Pareto distribution described above.
This second constraint is particularly powerful. It seems diﬃcult to add chaﬀ
to a stream without destroying invariant distributional properties, so in most of
22
D. Donoho et al.
the remainder of this paper we consider schemes which do not add chaﬀ. That
is, we consider transforms that conserve character counts: each character in
one stream corresponds to one character in the other stream. Such conservative
transforms can only alter the interarrival times between items in the input stream
and the output stream, and can be thought of as simply jittering the times to
mask the similarity of the two streams.
We must, however, note an important caveat regarding constraint (ii), which
is that the Pareto distribution emerges as a general property when we analyze
the statistics of many interactive interpacket times aggregated together. How-
ever, the variation in the distribution seen across diﬀerent individual interactive
sessions has not yet been characterized in the literature. It is possible that suf-
ﬁcient variation exists such that an attacker could inject chaﬀ that signiﬁcantly
alters the distribution of the interpacket timings without an anomaly detector
being able to ﬂag the altered distribution as anomalous. With that possible lim-
itation in mind, we now investigate what we can do to thwart evasion if in fact
that the attacker cannot pursue such alterations. Later, we will return to the
issue of detecting correlations despite the addition of chaﬀ.
Assuming that the attacker is conﬁned to conservative transforms, can they
actually be used to hide the common source of two streams? To answer this
question, we now examine possible evasion transforms that conform with the
above assumptions.
One aproach is to use a transform which re-randomizes interarrival times.
In words, we take a stream and ‘strip it’ of its identity by changing all the
inter-keystroke times to a stochastically independent set of inter-keystroke times.
Formally,
– Stream 1 contains Characters c1, ..., cn at Times t1, ..., tn.
– Stream 2 contains the same Characters c1, ..., cn, at Times u1, ..., un.
– The interarrival times ti − ti−1 are known to be independent and identically
– Stream 2 is deﬁned by interarrival times (ui − ui−1) which are also i.i.d. F ,
distributed (i.i.d.) according to a known distribution function F .
independently of (ti).
This approach certainly removes all correlations between the two streams,
but has two major ﬂaws. First, it is not causal: it is possible that ui  ti(cid:1) for other characters i
one of the streams must occur strictly after the other. (Which one occurs after
the other depends on the monitor’s location with respect to the position of the
transformation element.)
It might appear that the diﬃculty with causality can be addressed by concep-
tually shifting the transformed stream in time by a ﬁxed amount, preserving its
distribution but ensuring that we always have ui ≥ ti. But a second problem re-
mains: the two streams become unboundedly out-of-sync. Indeed, the diﬀerence
between the two cumulative counting functions behaves as a random walk, and
so we know from simple probability calculations that for this scheme, |tn − un|
ﬂuctuates unboundedly as n → ∞, and that V ar (tn − un) ≥ constant·n (essen-
tially because tn−un is a sum of n i.i.d. random variables). It follows that for any
Multiscale Stepping-Stone Detection
23
given buﬀer length, eventually the delay between the two streams will surpass
that length; and that for any tolerable perceptual delay, eventually the delay
caused by the transcoding will exceed that length. In summary, transcoding to
remove all correlations leads to complete desynchronization over time, violating
the maximum tolerable delay constraint.
Fig. 2. Divergence of Independent Streams. The two cumulative counting functions
diverge arbitrarily as time progresses.
The point is illustrated in the ﬁgure 2, which shows a simulation of the
transformation discussed above, where keystroke arrivals are drawn from the
empirical distribution given in [9]. We can see that after about 5,000 symbols,
the two streams are about 500 characters out of sync.
How about partial randomization of keystroke arrival times? Consider the
following local jittering algorithm, which we call dyadic block reshuﬄing. Given
Stream 1 with arrival times ti, this approach creates Stream 2 with arrival times
ui that never diﬀer from those in Stream 1 by more than a certain speciﬁc
guaranteed amount, but which are completely independent at ﬁne levels. The
approach has the following general structure:
– For dyadic intervals [k2j, (k+1)2j), N 1
j,k in Stream 1, compute arrival counts
j,k, for all j ≥ j0, all
j,k = N 1
– Method: identify all arrivals in Ij,k and select random uniform arrivals in
N 1
j,k.
– For a given ‘scale’ j0, create Stream 2 so that N 2
k.
same interval.
The approach is illustrated in ﬁgures 3 and 4. The ﬁrst one depicts the algorithm
operating at a speciﬁc medium scale j0: This sort of local shuﬄing does not suﬀer
24
D. Donoho et al.
x
xx
x
x
x
x
x x
x x x
x
x
x x
x
x
x
x x
x x
x
o
o
oo
oo o
o
o o
o o