relevant public channels in Table 2. Consequently, it is harder for
an adversary to ﬁngerprint an app’s exact running status on the ﬂy.
The other way to reduce the risk is to introduce randomness into
pre-scheduled scans. Instead of setting up an exact time, the user
may specify a time window, in which an AVD can choose a random
time to start scanning each day. A long-term mitigation is to im-
prove the malScan operation and make scan operations continuous
and comprehensive at the same time. According to our discussion
with AVD vendors, this seems to be a future research topic, since
malScan with both properties requires lots of testing and optimiza-
tions to be ﬁnally deployed on the resource limited mobile devices.
In addition to the designed short-term mitigations to AVD ven-
dors in Section 4.2 for the engineUpdate hazard, we discuss with
the Google security team that the system designers will have to re-
architect the PMS component to close or reduce the null-protection
window in the app-updating procedure. One suggestion to Google
is to delete the old APK only after the new process has been reac-
tivated, but this might cause conﬂicts on app’s package names or
other app management tasks (e.g., the install veriﬁcation process).
Since lots of apps have continuous monitoring requirements (e.g.,
MDMs, IPSs, and etc.), Google has to ﬁnd a way to resolve those
conﬂicts for this feature enhancement in PMS.
5.2 Other Hazards
In our study, we ﬁnd the other two potential hazards, which in-
dicate that the discovered hazards are just a tip of the iceberg. So
we discuss the other two types of hazards which can enable the
evasions of current Android AVDs.
Cloud based malScan Hazard.
During the analysis, we sense a trend of adding the cloud-based
scanning strategy for mobile platforms, including AVD # 1, 2, 3,
23 and 26. Cloud-based scanning ﬁts resource limited mobile de-
vices, as it can ofﬂoad the heavy computation to a remote server
by sending out the collected information. However, since the per
UID network usage statistics can be directly accessed through the
discovered channel # 16 in Table 2 as well, an adversary can plan
evasions and attacks against AVDs using the similar ﬁngerprinting
strategy described in the heavy sweeping malScan hazard.
Virus deﬁnition ﬁle (VDF) update Hazard.
All the AVDs store their VDF and other ﬁles/data in the subdi-
rectories, /data/data/[AV D_package]/∗, which are strictly set
to be world-unreadable and enforced by the Linux kernel in An-
droid. Our further analysis based on Environment Information Col-
lector shows that this solid design of app data privacy protection is
not enough for VDFs’ deployment, as an adversary only needs to
know the ﬁle size or other meta-data information of relevant ﬁles
(e.g., created/updated time) in the subdirectory to infer the updating
status of the VDF or other sensitive ﬁles (e.g., scan result caching
ﬁle). We design a zero-permission app to call the stat() system call
thorugh JNI to directly probe the meta-data information of all these
ﬁles in an AVD’s data folder. The whole path parameter that leads
to different ﬁles (e.g., VDF) can be ﬁrst collected via ofﬂine anal-
ysis. Knowing this status information, lots of potential targeted
evasions can be designed. For instance, we ﬁnd that some AVDs
(e.g., # 21) perform a fresh heavy sweeping malScan right after the
VDF is updated, so the adversary can drop or decrypt the newly
obfuscated known malicious payloads a few minutes after the VDF
has been updated, so as to make its fresh scan useless.
6. RELATED WORK
Malware analysis and threat prevention techniques [47, 38]
have been designed and applied for ofﬂine analysis. Also, various
interesting anti-analysis techniques have been discussed [42, 28]
for both mobile and PC malware. Our proof-of-concept evasion
techniques are conceptually similar to anti-analysis techniques, but
we focus on a new angle to emphasize more on the evasion of
AVD’s online protection mechanism. Zhou et al. [53] provided a
study of Android malware, and similarly, the discovered hazards in
this paper are also based on a systematic study of 30 popular AVDs.
Android app and system hazards have been discovered in [41,
30, 46, 51, 50]. Accidental data disclosure between apps in mobile
and PC systems have been discussed in [39]. The discovered infor-
mation leakage channels for various hazards in AVD are relevant to
the unexpected data exposure from the system side. Jana et al. [36]
also take the per process memory usage and CPU scheduling statis-
tics as probing channels to leak program’s secrets. We identify that
we can even leverage per thread usages to conduct ﬁne-grained in-
ference. Pileup attacks [46] are also based on a ﬂaw in PMS that
targets system update. Our engineUpdate hazard is based on one
newly discovered ﬂaw in PMS (related to the app-update mecha-
nism). Empirical studies [30] have been performed on several haz-
ards in security critical components or modules in Android apps.
Our study is performed on current AVD apps, and several hazards
have been discovered and reported to AVD vendors.
Antivirus evasion techniques [40, 24, 35] have been studied
previously. Android Dalvik bytecode polymorphic transformation
attacks have been presented by Rastogi et al. [44] to target incom-
plete signature database. However, our study concentrates on the
the malware recognition mechanism itself, and the result shows that
the quality of AVD’s malScan mechanism should be further im-
proved when deployed on the Android platform. Fedler et al. [31]
discuss the lack of on-demand ﬁle system hooking problem of An-
droid antivirus. Our study shows that some of the AVDs have al-
ready leveraged FileObserver APIs for that purpose. However, we
ﬁnd that it is the lack of combination of scan comprehensiveness
and continuity that causes the ineffectiveness of the current design.
What’s more, the discovered hazards in the AVD engineUpdate are
completely orthogonal to the ﬁle system hooking problem. Because
any strong protections have to rely on an activated AVD process,
which is missing in the null-protection window.
7. CONCLUSION
Based on an analysis framework, we conduct an empirical study
of top 30 AVDs on the current Android platform. We discovered
several serious hazards related to AVD malware scan mechanism,
engine update procedure and etc. We then develop techniques to
measure the feasibility of exploiting the hazards in malScan and
conﬁrmed the vulnerable engineUpdate program logic in the An-
droid system through static analysis and model checking techniques.
We reported the discovered vulnerabilities and hazards to AVD ven-
dors, all of them have conﬁrmed our ﬁndings and will take some of
the mitigations suggestions in their latest versions. We also discuss
the vulnerable design in the PMS that causing the null-protection
window to the Google security team. They also admit the problem
and will consider feature enhancement on the PMS component.
As the malware and the Android system keep evolving, more se-
cure and preventive design strategies for mission critical apps (e.g.,
AVDs, IPS [12, 14], MDM [18] and etc.) should be adopted to
reduce the chance of getting unexpected failures and loopholes.
8. ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers for
their insightful comments that helped improve the presentation of
this paper. This work was partially supported by ARO W911NF-
09-1-0525 (MURI), NSF CCF-1320605, NSFC 61100226 and NSF
CNS-1223710. Any opinions, ﬁndings and conclusions or recom-
mendations expressed in this material are those of the authors and
do not necessarily reﬂect the views of the National Science Foun-
dation and Army Research Ofﬁce.
9. REFERENCES
[1] AndroGuard: Android Dalvik Bytecode Analysis
Framework. http://www.blackhat.com/html/
bh-ad-11/bh-ad-11-briefings.html.
[2] Android antivirus companies. Technical report.
http://www.zdnet.com/android-antivirus-comparison-review-
malware-symantec-mcafee-kaspersky-sophos-norton-
7000019189/.
[3] Android Dalvik Debug Monitor Server.
http://developer.android.com/sdk/
installing/studio-tips.html.
[4] Android Monkeyrunner. http://developer.
android.com/guide/developing/tools/
monkeyrunner_concepts.html.
[5] Android OS Version Relative Chart ending on April 1, 2014 .
http://developer.android.com/about/
dashboards/index.html.
[6] AV TEST report, Jan 2014.
http://www.av-test.org/en/tests/
mobile-devices/android/jan-2014/.
[7] Avast! Mobile Security protects against USSD attacks.
http://blog.avast.com/2012/10/04/
avast-mobile-security-protects
-against-ussd-attacks/ .
[8] DoS attack on Lookout mobile security application.
http://web.nvd.nist.gov/view/vuln/
detail?vulnId=CVE-2013-3579.
[9] Factory Images for Nexus Devices.
https://developers.google.com/android/
nexus/images.
[10] Frequently updates of Antivirus Detection Engine, 2013.
http://www.androiddrawer.com/15401/
download-lookout-security-antivirus-
8-30-1-app-apk/ .
[11] HTC Android Images from HTCdev. http:
//www.htcdev.com/devcenter/downloads/P00.
[12] Jinshan mobile duba. http://m.duba.net/.
[13] Kaspersky Lab Reports Mobile Malware in 2013.
http://usa.kaspersky.com/about-us/
press-center/press-releases/
kaspersky-lab-reports-mobile
-malware-2013-more-doubles-previous .
[14] LBE secrity guard. http://www.lbesec.com/.
[15] Prevent Unintended APP Update.
http://www.symantec.com/connect/blogs/
case-unintended-android-application-upgrade.
[16] Samli/Baksmali.
http://code.google.com/p/smali/.
[17] Samsung Images from Samsung-updates.
http://samsung-updates.com/.
[18] Samsung Mobile Device Management solution.
http://www.samsung.com/global/business/
mobile/solution/security/
mobile-device-management/.
[19] The avast! AVD v2.0.4400 for Android allows attackers to
cause a denial of service . http:
//cve.scap.org.cn/CVE-2013-0122.html.
[20] The Lookout AVD v8.17-8a39d3f for Android allows
attackers to cause a denial of service . http:
//cve.scap.org.cn/CVE-2013-3579.html.
[21] The TrustGo AVD v1.3.6 for Android allows attackers to
cause a DoS. http:
//cve.scap.org.cn/CVE-2013-3580.html.
[22] Android Platform Fragmentation. http://opensignal.
com/reports/fragmentation-2013/, 2012.
[23] Frequently updates of Antivirus Detection Engine.
http://m.aptoide.com/list/versions/com.
lookout/83510, 2013.
[24] M. I. Al-Saleh and J. R. Crandall. Application-level
reconnaissance: Timing channel attacks against antivirus
software. In 4th USENIX Workshop on LEET 11’.
[25] H. Chen, D. Dean, and D. Wagner. Model Checking One
Million Lines of C Code. In NDSS, 2004.
[26] K. Chen, P. Liu, and Y. Zhang. Achieving accuracy and
scalability simultaneously in detecting application clones on
android markets. In ICSE, pages 175–186, 2014.
[27] K. Z. Chen, N. M. Johnson, V. D’Silva, S. Dai,
K. MacNamara, T. R. Magrino, E. X. Wu, M. Rinard, and
D. X. Song. Contextual policy enforcement in android
applications with permission event graphs. In NDSS, 2013.
[28] X. Chen, J. Andersen, Z. M. Mao, M. Bailey, and J. Nazario.
Towards an understanding of anti-virtualization and
anti-debugging behavior in modern malware. In DSN’ 08.
[29] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E.
Bryant. Semantics-aware malware detection. In S&P ’05.
[30] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An
empirical study of cryptographic misuse in android
applications. In CCS ’13.
[31] R. Fedler, M. Kulicke, and J. Schutte. An antivirus API for
Android malware recognition. In Malicious and Unwanted
Software:" The Americas"(MALWARE), 2013.
[32] C. Gibler, R. Stevens, J. Crussell, H. Chen, H. Zang, and
H. Choi. Adrob: Examining the landscape and impact of
android application plagiarism. In MobiSys ’13.
[33] H. Huang, S. Zhang, X. Ou, A. Prakash, and K. Sakallah.
Distilling critical attack graph surface iteratively through
minimum-cost sat solving. In Proceedings of the 27th
ACSAC, pages 31–40. ACM, 2011.
[34] H. Huang, S. Zhu, P. Liu, and D. Wu. A framework for
evaluating mobile app repackaging detection algorithms. In
Trust and Trustworthy Computing. Springer, 2013.
[35] S. Jana and V. Shmatikov. Abusing ﬁle processing in
malware detectors for fun and proﬁt. In SP’ 12.
[36] S. Jana and V. Shmatikov. Memento: Learning secrets from
process footprints. In S&P ’12.
[37] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri. Code
injection attacks on HTML5-based mobile apps:
Characterization, detection and mitigation. In CCS ’14.
[38] M. G. Kang, H. Yin, S. Hanna, S. McCamant, and D. Song.
Emulating emulation-resistant malware. In Proceedings of
the 1st ACM Workshop on Virtual Machine Security, 2009.
[39] A. Nadkarni and W. Enck. Preventing accidental data
disclosure in modern operating systems. In CCS ’13.
[40] J. Oberheide, M. Bailey, and F. Jahanian. PolyPack: an
automated online packing service for optimal antivirus
evasion. In 3rd USENIX on Offensive technologies.
[41] J. Oberheide and F. Jahanian. Remote ﬁngerprinting and
exploitation of mail server antivirus engines, 2009.
[42] G. Pék, B. Bencsáth, and L. Buttyán. nEther: In-guest
Detection of Out-of-the-guest Malware Analyzers. In
Proceedings of the Fourth European Workshop on System
Security, EUROSEC ’11.
[43] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and
G. Vigna. Execute this! analyzing unsafe and malicious
dynamic code loading in android applications. In NDSS ’14.
[44] V. Rastogi, Y. Chen, and X. Jiang. Droidchameleon:
evaluating android anti-malware against transformation
attacks. In asiaCCS. ACM, 2013.
[45] S. Smalley and R. Craig. Security enhanced (se) android:
Bringing ﬂexible mac to android. In NDSS, 2013.
[46] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang. Upgrading
your android, elevating my malware: Privilege escalation
through mobile os updating. In IEEE Symposium on S&P 14.
[47] L. K. Yan and H. Yin. Droidscope: seamlessly reconstructing
the os and dalvik semantic views for dynamic android
malware analysis. In USENIX Sec ’12.
[48] F. Zhang, H. Huang, S. Zhu, D. Wu, and P. Liu. ViewDroid:
Towards obfuscation-resilient mobile application
repackaging detection. In Proceedings of ACM WiSec ’14.
[49] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. Detecting
repackaged smartphone applications in third-party android
marketplaces. In Proceedings of CODASPY ’12. ACM.
[50] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang,
C. A. Gunter, and K. Nahrstedt. Identity, location, disease
and more: inferring your secrets from android public
resources. In In ACM CCS. ACM, 2013.
[51] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The
peril of fragmentation: Security hazards in android device
driver customizations. In IEEE Symposium on S&P, 2014.
[52] Y. Zhou and X. Jiang. An analysis of the anserverbot trojan.
http://www.csc.ncsu.edu/faculty/jiang/
pubs/AnserverBotAnalysis.pdf.
[53] Y. Zhou and X. Jiang. Dissecting android malware:
Characterization and evolution. In SP ’12. IEEE.