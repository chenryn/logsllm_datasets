    t1 result;                                               \
    __builtin_memcpy(&result, &mem->data[addr], sizeof(t1)); \
    return (t3)(t2)result;                                   \
  }
#define DEFINE_STORE(name, t1, t2)                                     \
  static inline void name(wasm_rt_memory_t* mem, u64 addr, t2 value) { \
    MEMCHECK(mem, addr, t1);                                           \
    t1 wrapped = (t1)value;                                            \
    __builtin_memcpy(&mem->data[addr], &wrapped, sizeof(t1));          \
  }
#endif
DEFINE_LOAD(i32_load, u32, u32, u32);
DEFINE_LOAD(i64_load, u64, u64, u64);
DEFINE_LOAD(f32_load, f32, f32, f32);
DEFINE_LOAD(f64_load, f64, f64, f64);
DEFINE_LOAD(i32_load8_s, s8, s32, u32);
DEFINE_LOAD(i64_load8_s, s8, s64, u64);
DEFINE_LOAD(i32_load8_u, u8, u32, u32);
DEFINE_LOAD(i64_load8_u, u8, u64, u64);
DEFINE_LOAD(i32_load16_s, s16, s32, u32);
DEFINE_LOAD(i64_load16_s, s16, s64, u64);
DEFINE_LOAD(i32_load16_u, u16, u32, u32);
DEFINE_LOAD(i64_load16_u, u16, u64, u64);
DEFINE_LOAD(i64_load32_s, s32, s64, u64);
DEFINE_LOAD(i64_load32_u, u32, u64, u64);
DEFINE_STORE(i32_store, u32, u32);
DEFINE_STORE(i64_store, u64, u64);
DEFINE_STORE(f32_store, f32, f32);
DEFINE_STORE(f64_store, f64, f64);
DEFINE_STORE(i32_store8, u8, u32);
DEFINE_STORE(i32_store16, u16, u32);
DEFINE_STORE(i64_store8, u8, u64);
DEFINE_STORE(i64_store16, u16, u64);
DEFINE_STORE(i64_store32, u32, u64);
#define I32_CLZ(x) ((x) ? __builtin_clz(x) : 32)
#define I64_CLZ(x) ((x) ? __builtin_clzll(x) : 64)
#define I32_CTZ(x) ((x) ? __builtin_ctz(x) : 32)
#define I64_CTZ(x) ((x) ? __builtin_ctzll(x) : 64)
#define I32_POPCNT(x) (__builtin_popcount(x))
#define I64_POPCNT(x) (__builtin_popcountll(x))
#define DIV_S(ut, min, x, y)                                 \
   ((UNLIKELY((y) == 0)) ?                TRAP(DIV_BY_ZERO)  \
  : (UNLIKELY((x) == min && (y) == -1)) ? TRAP(INT_OVERFLOW) \
  : (ut)((x) / (y)))
#define REM_S(ut, min, x, y)                                \
   ((UNLIKELY((y) == 0)) ?                TRAP(DIV_BY_ZERO) \
  : (UNLIKELY((x) == min && (y) == -1)) ? 0                 \
  : (ut)((x) % (y)))
#define I32_DIV_S(x, y) DIV_S(u32, INT32_MIN, (s32)x, (s32)y)
#define I64_DIV_S(x, y) DIV_S(u64, INT64_MIN, (s64)x, (s64)y)
#define I32_REM_S(x, y) REM_S(u32, INT32_MIN, (s32)x, (s32)y)
#define I64_REM_S(x, y) REM_S(u64, INT64_MIN, (s64)x, (s64)y)
#define DIVREM_U(op, x, y) \
  ((UNLIKELY((y) == 0)) ? TRAP(DIV_BY_ZERO) : ((x) op (y)))
#define DIV_U(x, y) DIVREM_U(/, x, y)
#define REM_U(x, y) DIVREM_U(%, x, y)
#define ROTL(x, y, mask) \
  (((x) > (((mask) - (y) + 1) & (mask))))
#define ROTR(x, y, mask) \
  (((x) >> ((y) & (mask))) | ((x)  y) ? x : y)
#define TRUNC_S(ut, st, ft, min, minop, max, x)                             \
  ((UNLIKELY((x) != (x)))                        ? TRAP(INVALID_CONVERSION) \
   : (UNLIKELY(!((x)minop(min) && (x) =, 2147483648.f, x)
#define I64_TRUNC_S_F32(x) TRUNC_S(u64, s64, f32, (f32)INT64_MIN, >=, (f32)INT64_MAX, x)
#define I32_TRUNC_S_F64(x) TRUNC_S(u32, s32, f64, -2147483649., >, 2147483648., x)
#define I64_TRUNC_S_F64(x) TRUNC_S(u64, s64, f64, (f64)INT64_MIN, >=, (f64)INT64_MAX, x)
#define TRUNC_U(ut, ft, max, x)                                            \
  ((UNLIKELY((x) != (x)))                       ? TRAP(INVALID_CONVERSION) \
   : (UNLIKELY(!((x) > (ft)-1 && (x) = (s32)w2c_i1);
  if (w2c_i0) {
    w2c_i0 = 128u;
    //(*Z_envZ_abortStackOverflowZ_vi)(w2c_i0);
  }
  w2c_i0 = w2c_p0;
  w2c_l218 = w2c_i0;
  w2c_i0 = w2c_p1;
  w2c_l219 = w2c_i0;
  w2c_i0 = w2c_p2;
  w2c_l230 = w2c_i0;
  w2c_i0 = w2c_p3;
  w2c_l241 = w2c_i0;
  w2c_i0 = w2c_p4;
  w2c_l243 = w2c_i0;
  w2c_i0 = w2c_p5;
  w2c_l244 = w2c_i0;
  w2c_i0 = w2c_p6;
  w2c_l245 = w2c_i0;
  w2c_i0 = w2c_p7;
  w2c_l246 = w2c_i0;
  w2c_i0 = w2c_p8;
  w2c_l247 = w2c_i0;
  w2c_i0 = w2c_p9;
  w2c_l248 = w2c_i0;
  w2c_i0 = w2c_p10;
  w2c_l220 = w2c_i0;
  w2c_i0 = w2c_p11;
  w2c_l221 = w2c_i0;
  w2c_i0 = w2c_p12;
  w2c_l222 = w2c_i0;
  w2c_i0 = w2c_p13;
  w2c_l223 = w2c_i0;
  w2c_i0 = w2c_p14;
  w2c_l224 = w2c_i0;
  w2c_i0 = w2c_p15;
  w2c_l225 = w2c_i0;
  w2c_i0 = w2c_p16;
  w2c_l226 = w2c_i0;
  w2c_i0 = w2c_p17;
  w2c_l227 = w2c_i0;
  w2c_i0 = w2c_p18;
  w2c_l228 = w2c_i0;
  w2c_i0 = w2c_p19;
  w2c_l229 = w2c_i0;
  w2c_i0 = w2c_p20;
  w2c_l231 = w2c_i0;
  w2c_i0 = w2c_p21;
  w2c_l232 = w2c_i0;
  w2c_i0 = w2c_p22;
  w2c_l233 = w2c_i0;
  w2c_i0 = w2c_p23;
  w2c_l234 = w2c_i0;
  w2c_i0 = w2c_p24;
  w2c_l235 = w2c_i0;
  w2c_i0 = w2c_p25;
  w2c_l236 = w2c_i0;
  w2c_i0 = w2c_p26;
  w2c_l237 = w2c_i0;
  w2c_i0 = w2c_p27;
  w2c_l238 = w2c_i0;
  w2c_i0 = w2c_p28;
  w2c_l239 = w2c_i0;
  w2c_i0 = w2c_p29;
  w2c_l240 = w2c_i0;
  w2c_i0 = w2c_p30;
  w2c_l242 = w2c_i0;
  w2c_i0 = 0u;
  w2c_l342 = w2c_i0;
  w2c_i0 = w2c_l218;
  w2c_l31 = w2c_i0;
  w2c_i0 = w2c_l31;
  w2c_i1 = 4294967295u;
  w2c_i0 ^= w2c_i1;
  w2c_l280 = w2c_i0;
  w2c_i0 = w2c_l280;
  w2c_i1 = 167u;
  w2c_i0 &= w2c_i1;
  w2c_l156 = w2c_i0;
  w2c_i0 = w2c_l218;
  w2c_l32 = w2c_i0;
  w2c_i0 = w2c_l32;
  w2c_i1 = 4294967128u;
  w2c_i0 &= w2c_i1;
  w2c_l157 = w2c_i0;
  w2c_i0 = w2c_l156;
  w2c_i1 = w2c_l157;
  w2c_i0 |= w2c_i1;
  w2c_l311 = w2c_i0;
  w2c_i0 = w2c_l311;
  w2c_i1 = 193u;
  w2c_i0 -= w2c_i1;
  w2c_l343 = w2c_i0;
  w2c_i0 = w2c_l343;
  w2c_l376 = w2c_i0;
  w2c_i0 = 0u;
  w2c_i1 = w2c_l376;
  w2c_i0 -= w2c_i1;
  w2c_i1 = w2c_l376;
  w2c_i2 = w2c_l376;
  w2c_i3 = 0u;