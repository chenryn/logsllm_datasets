title:Mechanized Network Origin and Path Authenticity Proofs
author:Fuyuan Zhang and
Limin Jia and
Cristina Basescu and
Tiffany Hyun-Jin Kim and
Yih-Chun Hu and
Adrian Perrig
Mechanized Network Origin and Path Authenticity Proofs
Fuyuan Zhang
CyLab, CMU
PI:EMAIL
Tiffany Hyun-Jin Kim
CyLab, CMU
PI:EMAIL
Limin Jia
ECE & INI, CMU
PI:EMAIL
Yih-Chun Hu
UIUC
PI:EMAIL
ETH Zürich
Cristina Basescu
PI:EMAIL
Adrian Perrig
CyLab, CMU/ETH Zürich
PI:EMAIL
ABSTRACT
A secure routing infrastructure is vital for secure and reliable Inter-
net services. Source authentication and path validation are two fun-
damental primitives for building a more secure and reliable Inter-
net. Although several protocols have been proposed to implement
these primitives, they have not been formally analyzed for their
security guarantees. In this paper, we apply proof techniques for
verifying cryptographic protocols (e.g., key exchange protocols) to
analyzing network protocols. We encode LS2, a program logic for
reasoning about programs that execute in an adversarial environ-
ment, in Coq. We also encode protocol-speciﬁc data structures,
predicates, and axioms. To analyze a source-routing protocol that
uses chained MACs to provide origin and path validation, we con-
struct Coq proofs to show that the protocol satisﬁes its desired prop-
erties. To the best of our knowledge, we are the ﬁrst to formalize
origin and path authenticity properties, and mechanize proofs that
chained MACs can provide the desired authenticity properties.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: Security and pro-
tection; C.2.2 [Network Protocols]: Protocol veriﬁcation
Keywords
Origin authenticity, path authenticity, secrecy, formal methods, mech-
anized proofs
1.
INTRODUCTION
A secure routing infrastructure is central to providing secure and
reliable Internet services. The current Internet routing infrastruc-
ture has many known security issues [38, 16]. Source authen-
tication and path validation are two fundamental building blocks
for security mechanisms that can mitigate some of these issues.
Source authentication allows routers to validate whether a received
packet indeed originated from the claimed source. Path validation
allows routers to verify whether received packets indeed travelled
on the source-selected path. Source authentication and path valida-
tion are key to implementing mechanisms such as path compliance,
packet attribution, and protection against redirection of ﬂows. For
instance, path validation provides a way to enforce path compli-
ance according to the policies of ISPs, enterprises, and datacenters.
Without it, a malicious ISP can use an inferior path while claim-
ing to its client that it forwarded the packet on the premium path,
incurring greater charges.
Several protocols for source authentication and path validation
have been proposed; however, their security guarantees have not
been formally veriﬁed [31, 9, 39, 37]. So far, the state-of-the-art
security analysis in this space is limited to enumerating attack sce-
narios and arguing how the proposed protocol can defend against
those attacks. In this paper, we apply proof techniques for verify-
ing cryptographic protocols (e.g., key exchange protocols) to the
veriﬁcation of source authentication and path validation protocols.
Analyzing network protocols is far more complex than analyz-
ing cryptographic protocols, as the analysis needs to consider ar-
bitrary network topologies. Furthermore, the protocol programs as
well as the properties are recursive, often bound by the size of the
network.
If we were to apply model checking tools for analyz-
ing cryptographic protocols naïvely, we would have to ﬁx the size
of the network topology and limit ourselves to verifying proper-
ties speciﬁc to a set of topologies. It is unclear how to use these
model checking tools to prove a general property that holds for all
topologies. In some special cases, small-world theorems have been
attempted for simpler ad hoc wireless protocols [20], where only a
ﬁnite number of topologies need to be checked to conclude that a
property holds on all topologies. Unfortunately, to the best of our
knowledge, general small-world theorems applicable to verifying
path validation protocols do not exist. Therefore, model checking
techniques cannot be immediately applied to proving properties of
these protocols. As a ﬁrst step towards understanding the formal
aspects of these source authentication and path validation proto-
cols, we manually construct proofs of general security properties
that are independent of the network topology.
Several proof systems exist for reasoning about protocols [22,
23, 25, 40]. Paulson showed how to encode the network adver-
sary model and the protocol, and prove properties of protocols in
Isabelle/HOL [40]. PCL is a program logic that includes compo-
sitional reasoning principles for protocols [22]. Several protocols
have been veriﬁed using PCL [41]. LS2 generalizes PCL and pro-
vides a set of reasoning principles for deriving trace properties of
programs that run concurrently with adversaries [23]. LS2 can be
used to reason about protocols, as well as general system designs.
Because of its generality, we use LS2 as our reasoning logic.
We encode LS2 in Coq using shallow embedding, a technique fre-
quently used in encoding one proof system in another (e.g., the
encoding of Ynot [36]). LS2-speciﬁc inference rules are isolated
in a monad. Other generic inference rules such as ﬁrst-order logic
rules are not encoded; instead, Coq’s logic is directly used when
constructing LS2 proofs. We instantiate LS2 with protocol-speciﬁc
data structures, predicates, and axioms, which are also encoded in
Coq. Shallow embedding allows us to use Coq’s libraries and tools
and enables us to efﬁciently construct proofs.
We analyze the OPT protocols that use chained Message Authen-
tication Codes (MACs) to provide source authentication and path
validation for routers [29]. These protocols have two phases: key
setup and packet forwarding. We prove the secrecy and authentic-
ity of keys of the key setup phase, and origin and path authenticity
properties of the forwarding phase. To the best of our knowledge,
we are the ﬁrst to formalize origin and path authenticity properties
of packet forwarding provided by chained MACs, and construct
machine-checkable proofs of these properties.
More concretely, this paper makes the following contributions:
• We encode LS2 and basic constructs for reasoning about cryp-
tographic protocols in Coq.
• We formalize and construct machine-checkable proofs of the
secrecy and authenticity properties of the key setup protocol.
• We formalize and construct machine-checkable proofs of the
origin and path authenticity properties of the forwarding pro-
tocol.
The rest of this paper is organized as follows. In Section 2, we
review LS2 and present the protocols that we verify. In Section 3,
we show our Coq encoding of LS2 and of protocol-speciﬁc reason-
ing constructs. Then, in Sections 4 and 5, we explain our formal
deﬁnitions of security properties and discuss our proof techniques.
We show attacks to alternative protocol designs identiﬁed during
the proof process and discuss the connection between prevented at-
tack scenarios and the veriﬁcation results in Section 6. In the end,
we discuss related work in Section 7.
The proof for the key setup protocol described in this paper has
1092 lines of Coq code, the proof for the forwarding protocol has
3788 lines of code, and the encoding of both protocols has 2657
lines of code. The basic deﬁnitions including the state monad and
protocol-speciﬁc constructs are an additional 1566 lines of code. It
took approximately two person months to complete the proofs. The
Coq source ﬁles are available for download at the following URL:
http://www.ece.cmu.edu/ liminjia/net-verif.
2. BACKGROUND
We brieﬂy review the program logic we use for veriﬁcation and
explain the OPT source authentication and path validation protocol.
2.1 Reasoning Logics
LS2 is a program logic for deriving properties of programs that
run in parallel with other programs, including programs controlled
by an adversary [23]. Subsequent work extends LS2 and intro-
duces a compositional reasoning framework for interface-conﬁned
adversaries [25]. A network consists of both trusted nodes that run
the prescribed protocols and adversarial nodes that run arbitrary
code. These adversaries are limited in their capabilities. We as-
sume a variant of the Dolev-Yao network attacker model (explained
in Section 2.2). Therefore, these two proof systems are well suited
for reasoning about network protocols. We use the core reason-
ing principles formalized by Garg et al. [25] and refer to this proof
system as LS2 for the rest of this paper.
The semantics of LS2 assumes interleaving executions of system
components, some of which can be adversarial. Each component is
called a thread and is assigned a unique thread ID. Each thread is
represented as a tuple of the thread ID, the program that the thread
is executing, and a local execution environment. A thread makes a
transition step if its program makes a step, and the system makes
a transition if one of the threads makes a transition. A trace is a
sequence of transitions of the system. Each transition is associated
with a time point, denoting the time when the transition takes effect.
A system’s behavior is modelled as the set of traces generated from
the initial conﬁguration.
The formal properties of a system are speciﬁed as properties of
its traces, using ﬁrst-order logic formulas. Predicates that spec-
ify actions of threads, such as sending messages, take a time point
as an argument, indicating when that action happens. Using these
time points, we can encode temporal logic formulas, and, therefore,
specify safety properties (informally, nothing bad has happened so
far). Many desired properties of protocols are safety properties.
Trusted principals are modelled as threads running programs cor-
responding to prescribed protocols, and adversaries are modelled as
threads running arbitrary code. We explain how we encode adver-
sary’s capabilities in Section 3.2.
One key feature of LS2 is that program assertions include both
partial correctness and invariant assertions. A partial correctness
assertion speciﬁes properties of traces that contain the complete
execution of that program. An invariant assertion speciﬁes proper-
ties of traces that contain unﬁnished execution of that program. In-
variant properties are crucial to proving security properties; safety
properties should hold not only after the program terminates, but
also throughout the execution of the program. Section 3 presents
detailed inference rules for LS2. For a full description of LS2 and
its soundness, please refer to Garg et al.’s work [23, 25].
LS2 is a general logic that is meant to be instantiated with domain-
speciﬁc deﬁnitions for reasoning about speciﬁc applications. To
reason about protocols using cryptographic functions, LS2 needs
to be extended with relevant deﬁnitions and axioms. PCL [22]
has deﬁnitions of many such data structures and axioms. For our
proofs, we reuse and reﬁne deﬁnitions from PCL.
2.2 Origin and Path Trace (OPT)
OPT is a protocol that supports source authentication and path
validation [29]. We have veriﬁed both OPT and the extended OPT
protocols proposed in [29]. In this paper, we focus on explaining
the veriﬁcation of the extended OPT, as it provides stronger secu-
rity guarantees. The analysis of OPT is analogous, and we refer
interested readers to our companion technical report [49] for these
details. For the rest of this paper, we refer to the extended OPT
protocol simply as OPT.
OPT enables all entities (e.g., routers, switches, middleboxes) on
the path to authenticate the source and the content of the received
packet, and to validate the path on which the packet traveled. OPT
assumes that each router R in the network has a public-private key
pair. A router R’s key pair is denoted by pk(R), pk−1(R). OPT
has two phases: key setup and packet forwarding. During the key
setup process, each intermediate router on the source-selected path
sets up two symmetric keys to be shared with the source and the
destination, respectively. The destination also sets up a symmetric
key shared with the source. Once the key setup process is ﬁnished,
the source, routers, and the destination use these keys to compute
and verify MACs of forwarded packets.
2.2.1 Attacker Model
We use a variant of the Dolev-Yao attacker model. We consider
attackers that can send and receive messages intended for them,
compute cryptographic functions using the keys that they have, and
decompose and construct messages based on the messages and keys
they know. Unlike Dolev-Yao attackers, our attackers cannot inter-
cept messages not meant for them, or inject messages into part of
the network that they are not directly connected to. This is a rea-