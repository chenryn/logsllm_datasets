open（ouT，
if (!defined ($entry_ref->(email)))
warn "Notifying $member_id...\n";
if(!$entry_ref)
ny
return;
warn"Member
return;
warn "NO ENTRY found for member $member_id!\n";
Sentry_ref
@col_name=@($sth->{NAME}};
$stmt=
else
if (!$recurse)
se
close （IN);
read_file(\*IN);
open (IN, $arg) or die “Cannot open $arg: $!\n";
warn "filename $arg inside file: ignored\n";
notify_member ($ary_ref->[0]);
Your membership in the U.S.Historical League is
"| $sendmail") or die"Cannot open mailer\n";
qq
（）；
$member_id has no email address; no message was sent\n";
=$sth->fetchrow_hashref ();
例如，可以从中找到成员的电话号码和住址。（关于show_member.pl
->prepare
SELECT
（$stmt）;
FROM memberWHEREmember_id=?};
#文件名
#成员条目里没有电子邮件地址
#未找到成员！
Please note
The
8.3DBI脚本实践
325
---
## Page 346
方式，即按提示输入成员条目的各个新值，来更新成员条目。其工作原理如下所示。
编辑成员信息。但是本节将展示如何编写命令行脚本edit_member.pl，让你能用一种简单的
人更新，我们就需要用新的到期日期来更新他们的条目。在下一章里，我们将设法利用Web
8.3.3
面的命令将通知ID 编号为18的成员，以及电子邮件地址为PI:EMAIL 的成员。
要过期：
率不会超过每月一次。
就可以使用renewal_notify2.pl来代替。
可以保证在没有sendmail程序的情况下也可以发送邮件。如果你安装了Mail:sendmail模块，
renewal_notify·pl脚本的修改版一
统通常不会安装sendmail 程序。）为应对此种情况，sampdb 发行版包含了一个
需要修改这个路径：
sendmail程序的路径名。因为 sendmail程序的位置会因系统的不同而有所差异，所以你可能
后把邮件信息塞入这个管道。在renewal_notify.pl脚本的开头部分，有一个参数设置
这
发
326
么做，有助于保证你不会过于频繁地发送通知。其实，我们这里会假设你运行这个脚本的频
送更新通知的具体日期，然后修改renewal_notify·pl脚本，让它在发送邮件时更新该列。
在开始发送更新通知之后，肯定会有一些收到通知的成员来更新他们的成员资格。如果有
如果想单独通知个别成员，可以利用他们的ID 编号或电子邮件地址来指定它们。例如，
（1）运行need_renewal.p1脚本，生成一个成员列表，其中每个成员的资格都已过期或将
你还可以进一步优化这个脚本。例如，可以在member 表里增加一列，用于记录最近一次
口如果在调用edit_member.pl时未在命令行上指定任何参数，那么它会假设你想要输人
现在，这两个脚本都已创建完成。你可以按以下步骤来使用它们。
如果你的系统上没有 sendmai1程序，那么这个脚本将无法正确工作。（例如，Windows 系
notify_member（）函数发送电子邮件的办法是：打开一个连通 sendmail 程序的管道，
口如果在调用edit_member.pl时在命令行指定了成员 ID 编号，那么它会查找该成员条
%./renewal_notify.pl 18 PI:EMAIL
%./renewal_notify.pl tmp
(3）如果无误，则把它输人renewal_notify·pl脚本，发送更新通知：
(2）检查tmp，
%./need_renewal.pl>tmp
my $sendmail="/usr/sbin/sendmail-t-oi";
#根据你的系统修改下面的路径
EOF
Thank you.
一个新成员。于是，它会提示你输入必要的信息，并创建一个新条目。
close (OUT);
foreach my $col_name (@col_name)
编辑美史联盟成员条目
第8章用Perl DBI编写MySQL程序
printf
if
OUT
，看是否存在不合理的地方。
 defined ($entry_ref->($col_name));
T " $entry_ref->($col_name)"
"\n";
-renewal_notify2.pl，它使用了Mail:sendmail模块，
来
然
---
## Page 347
主循环：
一个以列名为键的散列，用以表明各个列是否允许赋值为 NULL。然后，edit_member.pl进入
到所需要的这些信息：
赋值为NULL。在清除列值时，会用到后面那个特性（如果列允许使用NULL值，则把它赋值为
因为这是脚本创建条目时自动生成的，之后不应该被更改。）
能修改条目的各项内容。（有一个例外，即edit_member.pl不会允许你修改member_id字段，
但从另一个角度来讲，像这样的脚本也提供了一种简单而通用的解决方案，让不懂SQL的人也
edit_member.p1脚本最先要做的事情就是，了解member表里的列名，以及它们是否可以
在得到列信息之后，
my $sth=$dbh->prepare(qq{
my @col_name =(）;
如果只是想更新成员的资格到期日期，那么像这样编辑整个条目，可能就有些小题大做了，
else
while(my ($col_name, $is_nullable)
ssth->execute
$nullable($col_name) =($is_nullable eq "YEs");
获得member表的所有列名
while（my $id
new_member
#传递对列名数组的引用
（@ARGV==O）#如果未指定参数，则创建新条目
push (@col_name, $col_name);
对于每一
#
查看那些与给定姓相匹配的条目，并以此确定正确的ID编号值。）
目。（如果你不知道成员的ID编号，那么可以执行show_member.pllast_name命令，
“none”，则会清除该列的当前值。如果输入了单词“Exit”，则会直接退出，不创建此条
目的现有内容，然后提示你对每一列进行更新。如果你输入了列值，那么它会把该列的
my $entry_ref = $sth->fetchrow_hashref ();
$sth = $dbh->prepare(qq(
把@ARGV保存起来，
if (!$entry_ref)
$sth->finish();
$sth->execute ($id);
前值替换掉。
warn "No member exists with member ID = $id\n";
（{
!（
(\@col_name）;
WHERE TABLE_SCHEMA=?AND TABLE_NAME=?
SELECT COLUMN_NAME,UPPER(IS_NULLABLE)
SELECT*FROM member WHERE member_id =?
("sampdb",
#否则，把参数当作成员ID，编辑各个条目
，如果直接按下Enter键，那么该列的值不会发生变化。如果输人了单词
shift（@id））
，这个脚本会生成一个数组，依次包含各个列的名字；并且，还会生成
查找相应的条目，然后编辑它
，然后清空它，以便脚本在从STDIN读取输入时，
"member");
列是否允许为（），以列名为键
列名数组
#
=$sth->fetchrow_array ())
8.3DBI脚本实践
327
---
## Page 348
后再返回答案：
INSERT语句来插入新行：
328
my Sstr = shift;
edit_member.pl脚本使用了两个例程来显示用户提示信息。prompt（）函数会先提问，然
qduoxdqns
sub new_member
下面是用来创建新成员条目的代码，它会提示你输入 member 表中各列的值，然后执行
print STDERR $str;
$dbh->do ($stmt) or warn "Warning: new entry not created!\n"
#构造一条INSERT查询语句，然后执行它
oreachmy $col_name (@($col_name_ref})
$entry_ref=（};
$col_name_ref=shift;#对列名数组的引用
$delim="，";
#仅为事先给出的列指定具体值
显示各个值，并在正式插入条目之前要求确认
$stmt.= sprintf
$entry_ref->{$col_name}=$col_val;
next if $col_val eq "";
next if $col_name eq "member_id";
提示输入新值。
第8章
$stmt
return if uc ($col_val)
my$col
edit_member(\@col_name,
quote（）会把undef转换为单词NULL（注意，没有引号）
ext if!defined($entry_ref->($col_name));
$col_val = ($nullable($col_name) ? undef : "");
#如果列可以为空，则输入NULL；否则，输入空串
传递列名数组引用和条目引用
next;
"NONE"来清除原值；或者输入"EXIT"来退出编辑，
用Perl DBI编写MySQL程序
val
“SET";
"INSERT INTO
用户可以选择：输入新值；
sdbh->quote
("%s8s=s",
#在第1列之前放置"SET"，
#把新条目创建为一个散列
eq "EXIT";
$entry_ref);
$entry_ref);
($entry_ref->($col_name}));
$delim,
或者按Enter键以保留原值；
#
#用户按下了Enter键
#跳过关键字字段
$col_name,
提前退出
在其他列之前放置"，"
/^y/i;
---
## Page 349
而不是INSERT：
的条目，因此提示例程会显示条目的各个当前值，edit_member（）函数会调用UPDATE 语句，
这个值为undef，但在编辑已有行时，它会指向当前条目的内容。对于编辑已有行的情况，
会返回用户输人的那个值：
用于编辑已有成员信息的代码，
my（$col_name_ref,$entry_ref)=@_;
#列名数组引用和条目散列引用
subedit_member
col_prompt（）函数的第二个参数是一个散列引用，表示的是成员条目。在创建新条目时
my ($col_name,
sub col_prompt
col_prompt（）函数可以接受一个列名作为其参数。它会显示这个列名，提示输入新值，并
return unless prompt ("\nUpdate this entry (y/n)？")=~/^y/i;
#显示初始值，并询问是继续还是编辑
return(Sstr);
print STDERR Sprompt;
return ($str);
显示新值，并在更新条目之前要求确认
oreach my$col_name(@($col_name_ref})
$entry_ref->($col_name}=$col_val;
return if
my $col_val
next if $col_name eq "member_id";
提示输入新值。
nextif$col_val
$prompt.=
my $cur_val = $entry_ref->{$col_name};
$col_val=($nullable($col_name) ？undef :"");
#如果列可以为空，则输入NULL；否则，输入空串
uc
"NULL"
Sentry_ref)=@_;
($col_val)
eq
（"\nEditthis
!defined ($cur_val);
eq "EXIT";
输入新值；或者按