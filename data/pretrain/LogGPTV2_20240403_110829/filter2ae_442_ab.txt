        }
可以看到这里也是成功识别的
既然调用`parse`解析参数时可以不被包裹，结合getToken函数我们可以知道在最后一个参数其实就不必要加`;`了，并且解析完通过`params.get("filename")`获取到参数后还会调用到`org.apache.tomcat.util.http.parser.HttpParser#unquote`那也可以基于此再次变形
为了直观这里就直接明文了，是不是也很神奇
继续看看这个解析value的函数，它有两个终止条件，一个是走到最后一个字符，另一个是遇到`;`
如果我们能灵活控制终止条件，那么waf引擎在此基础上还能不能继续准确识别呢？
    private String parseQuotedToken(final char[] terminators) {
      char ch;
      i1 = pos;
      i2 = pos;
      boolean quoted = false;
      boolean charEscaped = false;
      while (hasChar()) {
        ch = chars[pos];
        if (!quoted && isOneOf(ch, terminators)) {
          break;
        }
        if (!charEscaped && ch == '"') {
          quoted = !quoted;
        }
        charEscaped = (!charEscaped && ch == '\\');
        i2++;
        pos++;
      }
      return getToken(true);
    }
如果你理解了上面的代码你就能构造出下面的例子
同时我们知道jsp如果带`"`符号也是可以访问到的，因此我们还可以构造出这样的例子
还能更复杂点么，当然可以的结合这里的`\`，以及上篇文章当中提到的`org.apache.tomcat.util.http.parser.HttpParser#unquote`中对出现`\`后参数的转化操作，这时候如果waf检测引擎当中是以最近`""`作为一对闭合的匹配，那么waf检测引擎可能会认为这里上传的文件名是`y4tacker.txt\`,从而放行
### 变形之双写filename*与filename
这个场景相对简单
首先tomcat的`org.apache.catalina.core.ApplicationPart#getSubmittedFileName`的场景下，文件上传解析header的过程当中，存在while循环会不断往后读取，最终会将key/value以Haspmap的形式保存，那么如果我们写多个那么就会对其覆盖，在这个场景下绕过waf引擎没有设计完善在同时出现两个filename的时候到底取第一个还是第二个还是都处理，这些差异性也可能导致出现一些新的场景
同时这里下面一方面会删除最后一个`*`
另一方面如果`lowerCaseNames`为`true`，那么参数名还会转为小写，恰好这里确实设置了这一点
因此综合起来可以写出这样的payload，当然结合上篇还可以变得更多变这里不再讨论
### 变形之编码误用
假设这样一个场景，waf同时支持多个语言，也升级到了新版本会解析`filename*`，假设go当中有个编码叫y4，而java当中没有，waf为了效率将两个混合处理，这样会导致什么问题呢？
如果没有,这里报错后会保持原来的值，因此我认为这也可以作为一种绕过思路？
    try {
      paramValue = RFC2231Utility.hasEncodedValue(paramName) ? RFC2231Utility.decodeText(paramValue)
        : MimeUtility.decodeText(paramValue);
    } catch (final UnsupportedEncodingException e) {
      // let's keep the original value in this case
    }
## 扩大tomcat利用面
现在只是war包的场景，多多少少影响性被降低，但我们这串代码其实抽象出来就一个关键
    Part warPart = request.getPart("deployWar");
    String filename = warPart.getSubmittedFileName();
通过查询[官方文档](https://docs.oracle.com/javaee/7/api/javax/servlet/http/Part.html#getSubmittedFileName--)，可以发现从Servlet3.1开始，tomcat新增了对此的支持，也就意味着简单通过`javax.servlet.http.HttpServletRequest#getParts`即可，简化了我们文件上传的代码负担(如果我是开发人员，我肯定首选也会使用，谁不想当懒狗呢)
    getSubmittedFileName
    String getSubmittedFileName()
    Gets the file name specified by the client
    Returns:
    the submitted file name
    Since:
    Servlet 3.1
## Spring
早上起床想着昨晚和陈师的碰撞，起床后又看了下陈师的星球，看到这个不妨再试试Spring是否也按照了RFC的实现呢（毕竟Spring内置了Tomcat，就算没有，但可能会思路有类似的呢）
Spring为我们提供了处理文件上传MultipartFile的接口
    public interface MultipartFile extends InputStreamSource {
        String getName(); //获取参数名
        @Nullable
        String getOriginalFilename();//原始的文件名
        @Nullable
        String getContentType();//内容类型
        boolean isEmpty();
        long getSize(); //大小
        byte[] getBytes() throws IOException;// 获取字节数组
        InputStream getInputStream() throws IOException;//以流方式进行读取
        default Resource getResource() {
            return new MultipartFileResource(this);
        }
        // 将上传的文件写入文件系统
        void transferTo(File var1) throws IOException, IllegalStateException;
        // 写入指定path
        default void transferTo(Path dest) throws IOException, IllegalStateException {
            FileCopyUtils.copy(this.getInputStream(), Files.newOutputStream(dest));
        }
    }
而spring处理文件上传逻辑的具体关键逻辑在`org.springframework.web.multipart.support.StandardMultipartHttpServletRequest#parseRequest`，抄个文件上传demo来进行测试分析
### Spring4
#### 基础构造
这里我测试了`springboot1.5.20.RELEASE`内置`Spring4.3.23`，具体小版本之间是否有差异这里就不再探究
其中关于`org.springframework.web.multipart.support.StandardMultipartHttpServletRequest#parseRequest`的调用也有些不同
        private void parseRequest(HttpServletRequest request) {
            try {
                Collection parts = request.getParts();
                this.multipartParameterNames = new LinkedHashSet(parts.size());
                MultiValueMap files = new LinkedMultiValueMap(parts.size());
                Iterator var4 = parts.iterator();
                while(var4.hasNext()) {
                    Part part = (Part)var4.next();
                    String disposition = part.getHeader("content-disposition");
                    String filename = this.extractFilename(disposition);
                    if (filename == null) {
                        filename = this.extractFilenameWithCharset(disposition);
                    }
                    if (filename != null) {
                        files.add(part.getName(), new StandardMultipartHttpServletRequest.StandardMultipartFile(part, filename));
                    } else {
                        this.multipartParameterNames.add(part.getName());
                    }
                }
                this.setMultipartFiles(files);
            } catch (Throwable var8) {
                throw new MultipartException("Could not parse multipart servlet request", var8);
            }
        }
简单看了下和tomcat之前的分析很像，这里Spring4当中同时也是支持`filename*`格式的
看看具体逻辑
    private String extractFilename(String contentDisposition, String key) {
            if (contentDisposition == null) {
                return null;
            } else {
                int startIndex = contentDisposition.indexOf(key);
                if (startIndex == -1) {
                    return null;
                } else {
                    //截取filename=后面的内容
                    String filename = contentDisposition.substring(startIndex + key.length());
                    int endIndex;
                    //如果后面开头是“则截取”“之间的内容
                    if (filename.startsWith("\"")) {
                        endIndex = filename.indexOf("\"", 1);
                        if (endIndex != -1) {
                            return filename.substring(1, endIndex);
                        }
                    } else {
                      //可以看到如果没有“”包裹其实也可以，这和当时陈师分享的其中一个trick是符合的
                        endIndex = filename.indexOf(";");
                        if (endIndex != -1) {
                            return filename.substring(0, endIndex);
                        }
                    }
                    return filename;
                }
            }
        }
简单测试一波，与心中结果一致
同时由于indexof默认取第一位，因此我们还可以加一些干扰字符尝试突破waf逻辑
如果filename*开头但是spring4当中没有关于url解码的部分
没有这部分会出现什么呢？我们只能自己发包前解码，这样的话如果出现00字节就会报错，报错后
看起来是spring框架解析header的原因，但是这里报错信息也很有趣将项目地址的绝对路径抛出了，感觉不失为信息收集的一种方式
#### 猜猜我在第几层
说个前提这里只针对单文件上传的情况，虽然这里的代码逻辑一眼看出不能有上面那种存在双写的问题，但是这里又有个更有趣的现象
我们来看看这个`extractFilename`函数里面到底有啥骚操作吧，这里靠函数`indexOf`去定位key(filename=/filename*=)再做截取操作
        private String extractFilename(String contentDisposition, String key) {
            if (contentDisposition == null) {
                return null;
            } else {
                int startIndex = contentDisposition.indexOf(key);
                if (startIndex == -1) {
                    return null;
                } else {