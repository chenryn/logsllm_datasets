电子邮件地址。 517
使用/填充这个首部存在潜在的隐私问题。客户端实现者在请求报文中包含这个首
部之前，应该通知用户，请他们作出选择。有些人会去收集不请自来的邮件报文中
携带的电子邮件地址，这可能造成潜在的滥用。因此，未做声明就将此首部广播出
去的实现者一定会非常懊悔，他们不得不向愤怒的用户说抱歉。
类型 请求首部
基本语法 From: mailbox
举例 From: PI:EMAIL
Host
客户端通过Host首部为服务器提供客户端想要访问的那台机器的因特网主机名和
端口号。主机名和端口号来自客户端所请求的URL。
只要服务器能够在同一台机器（即，在同一个IP地址）上提供多个不同的主机名，
服务器就可以通过Host首部，根据主机名来区分不同的相对URL。
类型 请求首部
注释 HTTP/1.1客户端必须在所有请求中包含Host首部。所有的HTTP/1.1
服务器都必须以400 Bad Request状态码去响应没有提供Host首部的
客户端。
基本语法 Host: host [":" port]
举例 Host: www.hotbot.com:80
If-Modified-Since
If-Modified-Since请求首部用来发起条件请求。客户端可以用GET方法去请求
服务器上的资源，而响应则取决于客户端上次请求此资源之后，该资源是否被修改过。
如果对象未被修改过，服务器会回送一条304 Not Modified响应，而不会回送此资
源。如果对象被修改过，服务器就会像对待非条件GET请求一样进行响应。第7章
详细地讨论了条件请求。
类型 请求首部
基本语法 If-Modified-Since: HTTP-date
举例 If-Modified-Since: Thu, 03 Oct 1997 17:15:00 GMT 518
HTTP首部参考 ｜ 543
If-Match
与 If-Modified-Since首部类似，If-Match首部也可以用于发起条件请求。
If-Match请求使用的是实体标记，而不是日期。服务器将对比If-Match首部的
实体标记与资源当前的实体标记，如果标记匹配，就将对象返回。
服务器应该用If-Match值“*”与某资源拥有的所有实体标记进行匹配。除非服
务器上没有这个资源了，否则“*”总会与实体标记相匹配。
类型 请求首部
基本语法 If-Match: ("*" | 1# entity-tag)
举例 If-Match: "11e92a-457b-31345aa"
If-None-Match
与所有If首部一样，If-None-Match首部可以用于发起条件请求。客户端为服务
器提供一个实体标记列表，服务器将这些标记与它拥有的资源实体标记进行比较，
只在都不匹配的时候才将资源返回。
这样缓存就可以只在资源已被修改的情况下才更新。通过If-None-Match首部，
缓存可以用一条请求使它拥有的实体失效，同时在响应中接收新的实体。第7章曾
讨论过条件请求。
类型 请求首部
基本语法 If-None-Match: ("*" | 1# entity-tag)
举例 If-None-Match: "11e92a-457b-31345aa"
If-Range
与所有If首部一样，If-Range首部可以用于发起条件请求。应用程序拥有某范围
内资源的副本，它要对范围进行再验证，如果范围无效的话，要获取新的资源，在
这种情况下会使用这个首部。第7章详细讨论了条件请求。
类型 请求首部
519 基本语法 If-Range: (HTTP-date | entity-tag)
举例 If-Range: Tue, 3 Oct 1997 02:15:31 GMT
If-Range: "11e92a-457b-3134b5aa"
If-Unmodified-Since
If-Unmodified-Since和If-Modified-Since首部是一对“双胞胎”。在请求
544 ｜ 附录C
中包含此首部就可以发起条件请求。服务器应该去查看首部的日期值，只有在从该
首部提供的日期之后，对象都未被修改过，才会返回对象。第7章详细介绍了条件
请求。
类型 请求首部
基本语法 If-Unmodified-Since: HTTP-date
举例 If-Unmodified-Since: Thu, 03 Oct 1997 17:15:00 GMT
Last-Modified
Last-Modified首部试图提供这个实体最后一次被修改的相关信息。这个值可以
说明很多事情。比如，资源通常都是一台服务器上的文件，因此Last-Modified
值可能就是服务器的文件系统所提供的最后修改时间。另一方面，对于那些动态创建
的资源（比如，由脚本创建的资源），Last-Modified值可能就是创建响应的时间。
服务器要注意，Last-Modified时间不应该是未来的时间。如果它比Date首部中
要发送的值还迟，HTTP/1.1服务器就会将Last-Modified时间重置。
类型 实体首部
基本语法 Last-Modified: HTTP-date
举例 Last-Modified: Thu, 03 Oct 1997 17:15:00 GMT
Location
服务器可以通过Location首部将客户端导向某个资源的地址，这个资源可能在客
户端最后一次请求之后被移动过，也可能是在对请求的响应中创建的。
类型 响应首部
基本语法 Location: absoluteURL
举例 Location: http://www.hotbot.com 520
Max-Forwards
这个首部只能和TRACE方法一同使用，以指定请求所经过的代理或其他中间节点
的最大数目。它的值是个整数。所有收到带此首部的TRACE请求的应用程序，在
将请求转发出去之前都要将这个值减1。
如果应用程序收到请求时，这个首部的值为零，就要向请求回应一条200 OK响应，
并在实体的主体部分包含原始请求。如果TRACE请求中没有Max-Forwards首
部，就假定没有转发最大次数的限制。
HTTP首部参考 ｜ 545
其他HTTP方法都应该忽略这个首部。更多有关TRACE方法的信息参见3.3节。
类型 请求首部
基本语法 Max-Forwards: 1*DIGIT
举例 Max-Forwards: 5
MIME-Version
MIME是HTTP的近亲。尽管两者存在根本区别，但有些HTTP服务器确实构造了
一些在MIME规范下同样有效的报文。在这种情况下，服务器可以提供MIME版本
的首部。
尽管HTTP/1.0规范中提到过这个首部，但它从未写入官方规范。很多比较老的服
务器会发送带有这个首部的报文，但这些报文通常都不是有效的MIME报文，这样
会让人觉得这个首部令人迷惑且不可信。
类型 扩展的通用首部
基本语法 MIME-Version: DIGIT "." DIGIT
举例 MIME-Version: 1.0
Pragma
Pragma首部用于随报文传送一些指令。这些指令几乎可以包含任何内容，但通常
会用这些指令来控制缓存的行为。Pragma首部的目标可以是接收这条报文的所有
应用程序，因此代理和网关一定不能将其删除。
最常见的Pragma形式——Pragma: no-cache是一个请求首部，通过它可以迫使
缓存在有新鲜副本可用的情况下，向原始服务器请求文档或对其进行再验证。用户
521 点击重新加载/刷新按钮时，浏览器就会发出这个首部。很多服务器会将Pragma:
no-cache作为响应首部发送（和Cache-Control:no-cache等价）。尽管这个首
部得到了广泛的使用，但从技术上来说，并没有定义过其行为，不是所有的应用程
序都支持Pragma响应首部。
第7章探讨了Pragma首部以及HTTP/1.0应用程序如何通过它来控制缓存。
类型 请求首部
基本语法 Pragma: 1# pragma-directive7
举例 Pragma: no-cache
注7： 规范中定义的唯一的一个Pragma指令就是no-cache，但我们可能会碰到其他作为规范扩展而定
义的Pragma首部。
546 ｜ 附录C
Proxy-Authenticate
Proxy-Authenticate首部的功能类似于WWW-Authenticate首部。代理会这个
首部来质询发送请求的应用程序，要求其对自身进行认证。第14章详细讨论了这个
质询/响应过程和HTTP的其他安全机制。
如果一台HTTP/1.1代理服务器发送了一条407 Proxy Authentication Required响应，
就必须包含Proxy-Authenticate首部。
代理和网关在解释所有的Proxy首部时要特别小心。通常它们都是逐跳首部，只
适用于当前的连接。比如，Proxy-Authenticate首部会要求对当前的连接进行
认证。
类型 响应首部
基本语法 Proxy-Authenticate: challenge
举例 Proxy-Authenticate: Basic realm="Super Secret Corporate
FinancialDocuments"
Proxy-Authorization
Proxy-Authorization首部的功能与Proxy-Authorization首部类似。客户端
应用程序可以用它来响应Proxy-Authenticate质询。更多有关质询/响应安全机
制工作原理的内容参见第14章。
类型 请求首部
基本语法 Proxy-Authorization: credentials
举例 Proxy-Authorization: Basic YnJpYW4tdG90dHk6T3ch 522
Proxy-Connection
Proxy-Connection首部的语义与HTTP/1.0 Connection首部类似。在客户端和
代理之间可以用它来指定与连接（主要是keep-alive连接）有关的选项。8它并不是
一个标准的首部，标准委员会把它当作一个临时首部。但它得到了浏览器和代理的
广泛使用。
浏览器实现者创建了Proxy-Connection首部，来解决客户端发送的HTTP/1.0
Connection首部被哑代理盲转发的问题。收到被盲转发的Connection首部的服
务器会将客户端连接的功能与代理连接的功能混淆起来。
注8：更多有关keep-alive和持久连接的内容参见第14章。
HTTP首部参考 ｜ 547
客户端知道要经过代理传输时，就会发送 Proxy-Connection首部，而不是
Connection首部。服务器如果无法识别Proxy-Connection首部，就会将其忽
略，这样，对首部进行盲转发的哑代理就不会带来任何问题了。
如果在从客户端到服务器的路径上有多个代理，这种解决方法就会有问题。如果第
一个代理将首部盲转发给第二个能够理解它的代理，那么第二个代理就会像服务器
看到Connection首部一样，无法理解。
这是HTTP工作组的解决方案存在的问题——他们将其作为一种黑客工具，可以解
决单个代理的问题，但无法解决更大的问题。尽管如此，这种方式确实能够处理一
些比较常见的情况，而且由于网景的Navigator和微软的Internet Explorer的较老
版本都实现了这个首部，因而代理的实现者也需要对其进行处理，更多信息参见第
4章。
类型 通用首部
基本语法 Proxy-Connection: 1# (connection-token)
举例 Proxy-Connection: close
Public
服务器可以用Public首部告知客户端它支持哪些方法。今后客户端发起的请求就
可以使用这些方法了。代理收到服务器发出的带有Public首部的响应时，要特别
小心。这个首部说明的是服务器支持的方法，而不是代理的，因此代理在将响应发
送给客户端之前，要对首部的方法列表加以编辑，或者将此首部删除。
523 类型 响应首部
注释 RFC 2616中没有定义这个首部。它是之前在HTTP/1.1规范的早期草案
RFC 2068中定义的，而官方规范已经将其删除了。
基本语法 Public: 1# HTTP-method
举例 Public: OPTIONS, GET, HEAD, TRACE, POST
Range
在请求某实体的部分内容中会用到Range首部。它的值说明了报文所包含实体的
范围。
请求某范围内的文档可以更有效地对大型对象发出请求（分段对其发出请求），或者
更有效地从传输错误中恢复（允许客户端请求没有完成的那部分资源）。第15章详
细说明了范围请求和能实现范围请求的首部。
548 ｜ 附录C
类型 实体首部
举例 Range: bytes=500-1500
Referer
在客户端请求中插入Referer首部，可以使服务器知道客户端是从哪里获得其请求
的URL。这是一种对服务器有益的自愿行为，这样服务器就可以更好地记录请求，
或执行其他任务了。Referer的拼写错误要回溯到HTTP的早期，令世界各地以英语
为母语的文字编辑们万分沮丧。
浏览器所做的工作相当简单。如果在主页A上点击一个链接，进入主页B，浏览器
就会在请求中插入一个带有值A的Referer首部。只有在你点击链接的时候，浏
览器才会插入Referer首部；自己输入的URL中不会包含Referer首部。
因为有些页面是私有的，所以这个首部会有隐私问题。尽管有些只是毫无根据的猜
想，但Web服务器及其管理者确实可以通过这个首部看到你来自何方，这样他们就
能更好地追踪你的浏览行为了。因此，HTTP/1.1规范建议应用程序编写者让用户来
选择是否传输这个首部。
类型 请求首部
基本语法 Referer: (absoluteURL | relativeURL)
举例 Referer: http://www.inktomi.com/index.html 524
Retry-After
服务器可以用Retry-After首部告知客户端什么时候重新发送某资源的请求。这
个首部可以与503 Service Unavailable（服务不可用）状态码配合使用，给出客户端
可以重试其请求的具体日期和时间（或者秒数）。
服务器还可以在将客户端重定向到资源时，通过这个首部通知客户端在对重定向的
资源发送请求之前需要等待的时间。9对那些正在创建动态资源的服务器来说，这个
首部是非常有用的，服务器可以通过它将客户端重定向到新创建的资源，并给出了