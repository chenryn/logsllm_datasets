1
00000043 6001
PUSH1 0x01
2
00000045 60A0
PUSH1 0xA0
3
00000047 6002
PUSH1 0x02
4
00000049 0A
EXP
5
0000004A 03
SUB
6
0000004B 16
AND
Listing 8: Optimized Assembly Code Example
We can then translate the EVM assembly code shown in listing 8 to the
following 3 items:
and(reg256, sub(exp(2, 0xa0), 1)) (EVM)
reg256 & (2 ** 0xA0) - 1) (Intermediate)
address (Solidity)
With that being said, in listing 9 For instance, the following EVM byte-
code would simply yield as the equivalence of msg.sender variable in Solidity
format.
1
CALLER
2
PUSH1
0x01
3
PUSH
0xA0
4
PUSH1
0x02
5
EXP
6
SUB
7
AND
Listing 9: msg.sender EVM Bytecode Example
12
5.1.3
Parameter Address Mask
1
0000003a 6004
PUSH1 04
2
0000003e 35
CALLDATALOAD
3
...
4
00000058 73ffffffff
+
PUSH20 ffffffffffffffffffffffffffffffffffffffff
5
0000006d 16
AND
6
0000006e 6c00000000
+
PUSH13 00000000000000000000000001
7
0000007c 02
MUL
Listing 10: Parameter Address Mask Example
In listing 10, we can see that the EVM assembly code for what would
translate to mul(and(arg_4, 0xffffffffffffffffffffffffffffffffffffffff), 0x
1000000000000000000000000) , which is in fact an optimization to mask the ad-
dresses as parameters before storing them in memory.
6
Smart-Contract
When compiling a new smart-contract with Solidity, you will be asked to
choose between two options to retrieve the bytecode as shown below.
–bin
–bin-runtime
The ﬁrst one will output the binary of the entire contract, which includes
its pre-loader. While the second one will output the binary of the runtime
part of the contract which is the part we are interested in for analysis.
6.1
Pre-Loader
Listing 11 is a copy of the output from the porosity disassembler representing
the pre-loader.
The instruction CODECOPY is used to copy the runtime part of the contract
in EVM’s memory. The o↵set 0x002b is the runtime part, while 0x00 is the
destination address.
13
Note that in Ethereum assembly, PUSH / RETURN means the value pushed
will be the returned value from the function and won’t a↵ect the execution
address.
1
00000000 6060
PUSH1
60
2
00000002 6040
PUSH1
40
3
00000004 52
MSTORE
4
00000005 6000
PUSH1
00
5
00000007 6001
PUSH1
01
6
00000009 6000
PUSH1
00
7
0000000b 610001
PUSH2
0001
8
0000000e 0a
EXP
9
0000000f 81
DUP2
10
00000010 54
SLOAD
11
00000011 81
DUP2
12
00000012 60ff
PUSH1
ff
13
00000014 02
MUL
14
00000015 19
NOT
15
00000016 16
AND
16
00000017 90
SWAP1
17
00000018 83
DUP4
18
00000019 02
MUL
19
0000001a 17
OR
20
0000001b 90
SWAP1
21
0000001c 55
SSTORE
22
0000001d 50
POP
23
0000001e 61bb01
PUSH2
bb01
24
00000021 80
DUP1
25
00000022 612b00
PUSH2
2b00
26
00000025 6000
PUSH1
00
27
00000027 39
CODECOPY
28
00000028 6000
PUSH1
00
29
0000002a f3
RETURN
Listing 11: Porosity Pre-loader Disassembly Output
6.2
Runtime Dispatcher
At the beginning of each runtime part of contracts, we ﬁnd a dispatcher that
branches to the right function to be called when invoking the contract.
14
6.2.1
Function Hashes
As we discussed earlier in the user-deﬁned function section, the ﬁrst 4 bytes
of the environment block are used to pass the function hash to the runtime
dispatcher that we will describe shortly. The function hash itself is generated
from the ABI deﬁnition of the function using the logic presented in listing 12.
1
[
2
{
3
"constant":false,
4
"inputs":[{ "name":"a", "type":"uint256" }],
5
"name":"double",
6
"outputs":[{ "name":"", "type":"uint256" }],
7
"type":"function"
8
},
9
{
10
"constant":false,
11
"inputs":[{ "name":"a", "type":"uint256" }],
12
"name":"triple",
13
"outputs":[{ "name":"", "type":"uint256" }],
14
"type":"function"
15
}
16
]
Listing 12: ABI Deﬁnition
We take the ﬁrst 4 bytes of the
sha3 (keccak256) value for the string
functionName(param1Type, param2Type, etc) . For instance, if we consider the
above function to be declared as double then we also need to consider the
string double(uint256) as illustrated below in listing 13:
1
keccak256("double(uint256)") =>
2
eee972066698d890c32fec0edb38a360c32b71d0a29ffc75b6ab6d2774ec9901
Listing 13: double Function Declaration
This means that the function signature/hash is 0xeee97206 as extracted
from the return value shown above in listing 13.
If we repeat the same
15
operation for the triple(uint256) function then we will get the values shown
in listing 14.
1
Contract::setABI: Name: double(uint256)
2
Contract::setABI: signature: 0xeee97206
3
4
Contract::setABI: Name: triple(uint256)
5
Contract::setABI: signature: 0xf40a049d
Listing 14: double/triple Function Hashes
6.2.2
Dispatcher
Using the --disassm parameter of Porosity and by providing the --abi def-
inition as well, Porosity will then generate a readable disassembly output
resolving the symbols based on the ABI deﬁnition. Not only that, but also
isolate each basic block which will help a lot in the explanation of this section.
We can go ahead and examine the runtime bytecode shown in listing 15.
1
606060405260e06 \
2
0020a6000350463 \
3
eee972068114602 \
4
4578063f40a049d \
5
146035575b005b6 \
6
045600435600060 \
7
4f8260025b02905 \
8
65b604560043560 \
9
00604f826003603 \
10
1565b6060908152 \
11
602090f35b92915 \
12
05056
Listing 15: EVM Runtime Bytecode Example
Porosity will generate the following disassembly for the previously men-
tioned runtime bytecode which was obtained from the EVM itself as being
shown in listing 16.
16
1
loc_00000000:
2
0x00000000 6060
PUSH1
60
3
0x00000002 6040
PUSH1
40
4
0x00000004 52
MSTORE
5
0x00000005 60e0
PUSH1
e0
6
0x00000007 60 02
PUSH1
02
7
0x00000009 0a
EXP
8
0x0000000a 6000
PUSH1
00
9
0x0000000c 35
CALLDATALOAD
10
0x0000000d 04
DIV
11
0x0000000e 630672e9ee
PUSH4
0672e9ee
12
0x00000013 81
DUP2
13
0x00000014 14
EQ
14
0x00000015 6024
PUSH1
24
15
0x00000017 57
JUMPI
16
17
loc_00000018:
18
0x00000018 80
DUP1
19
0x00000019 639d040af4
PUSH4
9d040af4
20
0x0000001e 14
EQ
21
0x0000001f 6035
PUSH1
35
22
0x00000021 57
JUMPI
23
24
loc_00000022:
25
0x00000022 5b
JUMPDEST
26
0x00000023 00
STOP
27
28
double(uint256):
29
0x00000024 5b
JUMPDEST
30
0x00000025 6045
PUSH1
45
31
0x00000027 6004
PUSH1
04
32
0x00000029 35
CALLDATALOAD
33
0x0000002a 6000
PUSH1
00
34
0x0000002c 604f
PUSH1
4f
35
0x0000002e 82
DUP3
36
0x0000002f 6002
PUSH1
02
37
38
loc_00000031:
39
0x00000031 5b
JUMPDEST
40
0x00000032 02
MUL
41
0x00000033 90
SWAP1
42
0x00000034 56
JUMP
17
43
triple(uint256):
44
0x00000035 5b
JUMPDEST
45
0x00000036 6045
PUSH1
45
46
0x00000038 6004
PUSH1
04
47
0x0000003a 35
CALLDATALOAD
48
0x0000003b 6000
PUSH1
00
49
0x0000003d 604f
PUSH1
4f
50
0x0000003f 82
DUP3
51
0x00000040 6003
PUSH1
03
52
0x00000042 6031
PUSH1
31
53
0x00000044 56
JUMP
54
55
loc_00000045:
56
0x00000045 5b
JUMPDEST
57
0x00000046 6060
PUSH1
60
58
0x00000048 90
SWAP1
59
0x00000049 81
DUP2
60
0x0000004a 52
MSTORE
61
0x0000004b 6020
PUSH1
20
62
0x0000004d 90