title:POPE: Partial Order Preserving Encoding
author:Daniel S. Roche and
Daniel Apon and
Seung Geol Choi and
Arkady Yerukhimovich
POPE: Partial Order Preserving Encoding
Daniel S. Roche*, Daniel Apon†, Seung Geol Choi*, Arkady Yerukhimovich‡
*United States Naval Academy, Annapolis, Maryland, USA
†University of Maryland, College Park, Maryland, USA
‡MIT Lincoln Laboratory, Lexington, Massachusetts, USA
{roche,choi}@usna.edu, PI:EMAIL, PI:EMAIL
ABSTRACT
Recently there has been much interest in performing search queries
over encrypted data to enable functionality while protecting sensi-
tive data. One particularly efﬁcient mechanism for executing such
queries is order-preserving encryption/encoding (OPE) which re-
sults in ciphertexts that preserve the relative order of the underlying
plaintexts thus allowing range and comparison queries to be per-
formed directly on ciphertexts. Recently, Popa et al. (S&P 2013)
gave the ﬁrst construction of an ideally-secure OPE scheme and
Kerschbaum (CCS 2015) showed how to achieve the even stronger
notion of frequency-hiding OPE. However, as Naveed et al. (CCS
2015) have recently demonstrated, these constructions remain vul-
nerable to several attacks. Additionally, all previous ideal OPE
schemes (with or without frequency-hiding) either require a large
round complexity of O(log n) rounds for each insertion, or a large
persistent client storage of size O(n), where n is the number of
items in the database. It is thus desirable to achieve a range query
scheme addressing both issues gracefully.
In this paper, we propose an alternative approach to range queries
over encrypted data that is optimized to support insert-heavy work-
loads as are common in “big data” applications while still maintain-
ing search functionality and achieving stronger security. Speciﬁ-
cally, we propose a new primitive called partial order preserving
encoding (POPE) that achieves ideal OPE security with frequency
hiding and also leaves a sizable fraction of the data pairwise in-
comparable. Using only O(1) persistent and O(n) non-persistent
client storage for 0 <  < 1, our POPE scheme provides extremely
fast batch insertion consisting of a single round, and efﬁcient search
with O(1) amortized cost for up to O(n1−) search queries. This
improved security and performance makes our scheme better suited
for today’s insert-heavy databases.
INTRODUCTION
1.
Range queries over big data. A common workﬂow in “Big Data”
applications is to collect and store a large volume of information,
then later perform some analysis (i.e., queries) over the stored data.
In many popular NoSQL key-value stores such as Google BigTable
[14] and its descendants, e.g. [17, 41, 42, 43], the most important
Publication rights licensed to ACM. ACM acknowledges that this contribution was
authored or co-authored by an employee, contractor or afﬁliate of the United States
government. As such, the Government retains a nonexclusive, royalty-free right to
publish or reproduce this article, or to allow others to do so, for Government purposes
only.
CCS’16, October 24 - 28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978345
query operation is a range query, which selects rows in a contigu-
ous block sorted according to any label such as an index, times-
tamp, or row id.
In order to support high availability, low cost, and massive scal-
ability, these databases are increasingly stored on remote and po-
tentially untrusted servers, driving the need to secure the stored
data. While traditional encryption protects the conﬁdentiality of
stored data, it also destroys ordering information that is necessary
for efﬁcient server-side processing, notably for range queries. An
important and practical goal is therefore to provide data security for
the client while allowing efﬁcient query handling by the database
server.
In many big data scenarios, a moderate number of range queries
over a huge amount of data are performed. For example, a typi-
cal application might be the collection of data from low-powered
sensor networks as in [45], where insertions are numerous and hap-
pen in real-time, whereas queries are processed later and on more
capable hardware. In this work, we target this type of scenario.
Range queries with order-preserving encoding (OPE). A simple
and efﬁcient solution for performing range queries over encrypted
data was recently proposed by Popa et al. [35] who showed how to
build an order-preserving encoding (OPE) scheme 1, which guaran-
tees that enc(x) < enc(y) iff x < y, allowing range queries to be
performed directly over encoded values. Additionally, this scheme
achieves the ideal security goal for OPE of IND-OCPA (indistin-
guishability under ordered chosen-plaintext attack) [7] in which ci-
phertexts reveal no additional information beyond the order of the
plaintexts. This scheme differs from traditional encryption in two
ways. First, the encoding procedure is interactive requiring multi-
ple rounds of communication between the data owner (client) and
the database (server). Second, the ciphertexts produced are mutable
so previously encoded ciphertexts may have to be updated when a
new value is encoded. This approach requires O(log n) rounds of
communication and O(1) client storage, where n is the number of
items in the database.
A different trade-off between client storage and communication
is given by Kerschbaum and Schröpfer [30] achieving just O(1)
communication to encode elements (from a uniform random distri-
bution), but requiring O(n) persistent client storage to maintain a
directory providing the mapping between each OPE ciphertext to
the corresponding plaintext — proportional to the storage require-
ments on the remote database itself.
When used for range searches over encrypted data, these two
schemes either require signiﬁcant communication, or signiﬁcant
client storage. Moreover, in the second of these schemes the direc-
tory in the persistent client storage depends on the full dataset. Thus
1We abuse notation and use OPE to refer to both order-preserving
encryption and order-preserving encoding.
Here
Popa et al. [35]
Kerschbaum & Schröpfer [30]
Comm. Rounds
Insert
Query
O(1)
1
O(log n) O(log n)
1
1
Amortized
Client Storage
Communication Working set
Persistent
O(1)
O(log n)
O(1)
O(n)
O(1)
O(n)
O(1)
O(1)
O(n)
(cid:17)
(cid:16) n2−
Incomparable
Elements
m − n
0
0
Ω
Figure 1: Comparison of OPE-based range search schemes. n is the total number of inserts, and m is the total number of search queries. The communication
complexity is given in number of encrypted elements. For our scheme we require at most O(n1−) total number of queries. In [35] and ours, the O(1)
persistent storage is used for storing the encryption key. The incomparable elements refers to the number of element pairs (out of Θ(n2) total) that cannot be
compared even after m queries are performed.
it is not easily amenable to a setting with multiple inserting clients,
a common deployment scenario in big data applications (e.g., mul-
tiple weak sensors encrypting and inserting data for analysis in the
cloud), as the persistent storage has to be synchronized across all
the clients.
Hence, we ask the following question:
In the scenario of a large number of insertions and a moder-
ate number of range queries, can we design a secure range-
query scheme with both small, non-persistent client-side stor-
age and much lower communication cost?
Toward stronger security: frequency-hiding and more. As
recently pointed out by Naveed et al. [33], security provided by
OPE may be insufﬁcient for many applications. Speciﬁcally, they
showed attacks that use frequency analysis and sorting of cipher-
texts to decrypt OPE encrypted values using some auxiliary infor-
mation. To counter the ﬁrst of these attacks, Kerschbaum [29] pro-
posed a stronger notion of security (IND-FAOCPA) that also hides
the frequency of OPE-encoded elements (i.e. hides equality). How-
ever, even this does not address all known attacks on OPE. Hence,
this paper asks the following question:
Can we design an efﬁcient range query scheme with security
better than frequency-hiding?
1.1 Our Work
Our contribution.
In this paper we give a positive answer to
both of the above questions, proposing an alternative range query
scheme that we call partial order preserving encoding or POPE.
Speciﬁcally, our POPE construction satisﬁes the following proper-
ties when storing n items using O(1) persistent and O(n) working
storage on the client and performing at most O(n1−) range queries
for any constant 0 <  < 1:
• Trivial insert operations consisting of 1 message from the
client to the server and no computation for the server. Fur-
thermore, a large number of data insertions can be performed
only with a single round in a batch.
• O(1)-round (amortized) communication per range query.
• No persistent client storage between operations except the
encryption key.
• Greater security than IND-FAOCPA. Our scheme leaks noth-
ing beyond the order of (some of the) inserted elements while
also hiding equality. Moreover, a fraction of plaintext pairs
remain incomparable even after the queries.
See Figure 1 for how this compares to existing schemes.
We have implemented our construction and tested it on a variety
of workloads, comparing to other schemes and also measuring its
network performance. We ﬁnd that our scheme is especially suit-
able for typical big data applications where there are many more
inserts than queries. As an example data point, with about one mil-
lion insertions and one thousand range queries, our POPE scheme
is 20X faster than the scheme by Popa et al.
We also experimentally validate our claim of improved security
by observing how many data items remain unsorted (i.e., the server
cannot learn their relative order) after some number of queries are
performed over real-world data. Speciﬁcally, we ran an experiment
where we inserted over 2 million public employee salary ﬁgures
from [1] and then performed 1000 random range queries. Figure 2
shows the server’s view of the salary data after various numbers of
queries. The black lines indicate elements whose position in the
global order the server knows (the shading of the lines indicates
the fraction of comparable points in each value range with lighter
shading indicating a lower fraction), while the contiguous white re-
gions represent data points whose relative order is unknown. Note
that for a typical OPE scheme, this image would be fully black (all
order revealed).
See Section 5 for more details on our implementation and further
experimental data.
POPE tree: no sorting when inserting data. Our main tech-
nique to make this possible is lazy indexing. Speciﬁcally, unlike
OPE, we do not sort the encoded values on insert, instead only
partially sorting values when necessary during query execution. If
we regard the actual location in the search tree data structure as an
implicit encoding of an encrypted value, our scheme gives a par-
tially ordered encoding, and hence the name of our construction,
POPE (partial order preserving encoding).
In particular, our scheme works by building a novel tree data
structure (inspired by buffer trees [5]), which we call a POPE tree,
where every node contains an unsorted buffer and a sorted list of el-
ements. The invariant that we maintain is that the sorted elements
of a node impose a partial order on both sorted and unsorted ele-
ments of its child nodes. That is, all sorted and unsorted values at
child i will lie between values i − 1 and i in the parent’s sorted
list. We stress that there is no required relation between unsorted
elements of a node and the elements of its child nodes. In partic-
ular, unsorted elements of the root node do not need to satisfy any
condition. That said, one can simply insert a value by putting it in
the unsorted buffer of the root node.
Having the server incrementally reﬁne this POPE tree on range
queries allows us to achieve both better efﬁciency and stronger se-
curity. In particular,
• Insertion is extremely simple by putting the encrypted label
in the unsorted buffer of the root of the POPE tree. More-
over, a large number of items can be inserted in a batch, and
the entire task takes only a single round. We note that the
interactive OPE scheme in [35] cannot support a batch in-
sertion, since each insertion is involved with traversing and
changing the encoding tree structure, and it’s quite difﬁcult
Figure 2: Server’s view of salary data whose order is incrementally revealed after inserting more than 2 million salary entries and then performing 1000
random range queries. The black lines indicate entries whose order is known by the server, while the white regions indicate entries that remain pairwise
incomparable after some number of queries.
to parallelize this procedure maintaining the consistency of
the tree structure.
• The cost of sorting encrypted elements can be amortized over
the queries performed. In particular, on each query we only
need to sort the part of the data that is accessed during the
search, leaving much of the data untouched. This allows us
to support range queries with much better efﬁciency and si-
multaneously achieve stronger security by having some frac-
tion of pairs of elements remain incomparable.
• Since encodings are sorted during searches, the cost of per-
forming a batch of search queries is often much cheaper than
performing these queries individually, as later queries do not
need to sort any elements already sorted in earlier queries.
We now describe the key properties of our data structure in more
detail. Intuitively, thanks to the required condition between sorted
elements of a node and the elements of its child nodes, the sorted
values at each node can serve as an array of simultaneous pivot
elements for the elements in the child nodes, in the sense of Quick-
sort [28]. To maintain this property we make use of client working-
set storage to partition a set of unsorted elements according to the
values at the parent. Speciﬁcally, we require the client to be able
to read in a list of O(n) encrypted values and then to partition