## Page 45
体安装步骤如下：
openssl-devel sqlite-devel bzip2-devel
Python版本存在依赖，具体如图2-7所示。
将Python升级到2.7.x以上，Django对
详细步骤如下。
2.5.2
趣的朋友可以去 Django 官网查看更为详细的介绍，同时也有 Django 中文文档可供学习。
专注地开发应用程序而不需要去白费力气地重复工作。
应用程序。它是由经验丰富的开发人员来创建的，省去了Web 开发的很多麻烦，因此你可以
金会（DSF）维持。
Django遵循模型－视图－控制器（MVC）框架模式，目前由一个非盈利的独立组织的软件基
奏的新闻编译室环境中开发出来的，因此它的设计目的是让普通开发者的工作变得简单。
Django 的安装分为4个步骤，下面以 Django 1.7.1、CentOS 6.5 x86_64为例进行讲解，
Django 目前已经被运维圈广泛使用，本文在此不会详细介绍Django的基础知识，有兴
Django鼓励快速开发和干净实用的设计。Django可以更容易更快速地构建更好的 Web
本文推荐使用 yum 命令进行安装，并设置 MySQL root 密码，创建cmdbtest 数据库，具
2.MySQL安装
（3）测试Django的安装，操作命令如下：
$ easy_install django==1.7.1
（2）安装 Django，使用 easy_install来安装，
$wgethttps://bootstrap.pypa.io/ez_setup.py-o-lpython
（1）安装 easy_install工具，操作命令如下:
#yuminstall
编译步骤如下：
用CentOS7以下版本的朋友需要
1.安装 Python 2.7.x
S
S
django-admin -version
easy_instal1 django==1.7.1
make && make altinstall
cd Python-2.7.6
tar zxf Python-2.7.6.tgz
wget http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz
Django 安装
7.1
/configure
--prefix=/usr/local
zlib-dev
第2章利用Facter和Django快速构建CMDB29
Django version
WhatPython versioncanI usewithDjango?
，安装的版本为1.7.1，具体命令如下：
1.7,1.8
图 2-7·Django与 Python 版本的依赖关系
2.7and3.2，3.3，3.4
2.6, 2.7 and 3.2, 3.3
2.6,2.7 and 3.2, 3.3 (experinental)
2.5，2.6，2.7
Python versions
---
## Page 46
2.5.4Django 的配置
CMDB App，如果你对如下这些Django命令很熟悉，可以直接跳过。
2.5.3Django常用命令
30运维前线：一线运维专家的运维方法、技巧与实践
完成 Django的安装后，可以通过如下命令快速熟悉 Django的操作，
（1）服务端机器信息：
笔者准备了两台测试机器用来进行代码测试，测试机器的环境信息分别如下。
（6）帮助：
（5）Django Shell调试：
（4）启动Django服务器：
（2）新建App:
（1）新建一个django-project:
IP:10.20.122.111
（2）客户端机器信息：
Mysqlversion:5.1.73
Python version: 2.7.8 Django version:1.7.1
System0s:Cent0s release 6.5x86_64
Role: puppet server + cmdb
IP:10.20.122.100
1.环境准备
$django-admin--help
$python manage.py shel1
$python manage.py runserver
$python manage.py syncdb
（3）同步数据库：
$django-admin startapp app-name
$django-admin startproject project-name
S
S
$/etc/init.d/mysqldstart
$mysql_install_db --user=mysql
$yum-y installmysql mysql-server
python manage.py--help
，以便快速创建一
---
## Page 47
进行定义，需要配置如下6个地方，操作步骤具体如下。
会默认先加载此配置文件，因此我们需要先对它
到 settings.py的全局配置文件，Django 在运行时
所示的目录结构。
行如下命令。
（1）修改数据库设置：
4.配置CMDB项目信息
（1）创建一个Project:
DATABASES={
运行成功后使用11命令就可以看到如图2-8
$mkdir static templates
（4）创建一个存放静态文件和模板的目录：
$django-admin startapp cmdb
（3）创建一个CMDB App:
$cdmyproject
（2）进人myproject目录：
$ django-admin startproject myproject
创建CMDB 项目的同时，在这个项目中创建一个CMDBApp，登录10.20.122.100，
3.创建CMDB项目
（6）Agent安装Puppet Agent。
（5）master 安装项目依赖的 Python 模块。
（4）master安装Django。
（3）master安装MySQL
（2）master 安装Python。
（1）master 安装Puppet Server。
前几节已经对所需要的环境进行了安装，在这里我们再回顾一下：
2.软件安装
System OS: Centos release 6.5 x86_64
NAME':'cmdbtest',
default':
Role:puppet agent
{'ENGINE':'django.db.backends.mysql',
第2章利用Facter和Django快速构建CMDB
图 2-8Django 安装后的目录组织结构
228291
22522525725
Mi
31
---
## Page 48
CMDB数据结构：
用再需要学习复杂的数据库操作，只需要通过定义models即可。下面是我设置的最简单的
文件的设置，Django 自带数据库的ORM（Object Relational Mapping）架构，这使得我们不
32运维前线：一线运维专家的运维方法、技巧与实践
#指定解析器为Python
Django 遵循 MVC设计，其中M（模型）就是数据库模型，也就是App 中的 models.py
5.数据表设计
到此为止基础环境已经准备完毕，接下来需要设计数据库，并定义好视图。
）CMDB_VERSION='1.O'CMDB_NAME=u′测试CMDB'LOGIN_REDIRECT_URL='/home/
"django.core.context_processors.request"
TEMPLATE_CONTEXT_PROCESSORS=
（6）设置其他参数，可以根据自己的需求进行设置：
LOGIN_URL='/cmdb/login/'
（5）设置登录URL：
（4）设置模板文件存放目录：
STATICFILES_DIRS =(os.path.join(BASE_DIR,‘static/'),)
（3）设置静态文件存放目录：
NSTALLED_APPS = ('django.contrib.admin',
（2）设置 App，把我们新建的CMDB App 加到末尾，代码如下：
#
context_processors.menu',
TEMPLATE_DIRS=[os.path.join(BASE_DIR,'templates')，]
django.contrib.contenttypes'
django.contrib.auth',
PORT':'3306'，
'PASSWORD':'cmdbtest',
'USER':'root',
'HOsT':'localhost',
导入User模块
com django.db import models
django.contrib.staticfiles'，'cmdb',
django.contrib.messages',
django.contrib.sessions',
从django.db 中导入 models 模块
指定字符编码为utf8
了
encoding:utf8
!/usr/bin/env python
"django.contrib.auth.context_processors.auth"
---
## Page 49
class Server_Role(models.Model):
#定义一个 Server_Role类，主要存储服务器角色信息，数据表结构有3个字段
class Project(models.Model):
#定义一个 Project 类，主要存储项目信息，数据表结构有2个字段
class IDC(models.Model):
#定义一个IDC类，主要存储IDC信息，数据表结构有2个字段
class Server_Group(models.Model):
from django.contrib.auth.models import User
定义一个 Server_Group 类，从 models.Model中继承，这里就是所谓的数据表结构
Create your models here.
group = models.ForeignKey("Server_Group", verbose_name=′项目组')
#关联 Server_Group，也就是服务器组
name = models.CharField(u′角色'，max_length=255)
class Meta:
memo = models.CharField(u'备注'，max_length=255,
name = models.CharField(u'项目名称'; max_length=255,
def
class Meta:
def
memo=
name=
#定义Meta属性
def
#定义主机组名称字段
定义IDC的名称字段
unicode返回值
emo = models.CharField(u' 备注', max_length=255, blank=True)
备注字段
oject=
关联的项目字段，这里是关联一个外键
db_table ='project'
return self.name
-unicode_
db_table=-'idc
return self.name
#存储的时候需要确认组合键是唯一的
#数据库中的表名
_unicode_
return '%s-%s'%(self.project.name, self.name)
#返回的格式
_unicode__(self):
_(self):
_(self):
第2章
利用Facter和Django快速构建CMDB
max_length=255,unique=True)
blank=True)
unique=True)
unique=True)
33
---
## Page 50
34运维前线：一线运维专家的运维方法、技巧与实践
class Server_Device(models.Model):
#CMDB核心数据表结构，用来存储服务器系统信息
#定义备注字段
admin = models.ForeignKey('auth.User', verbose_name=+ 管理员 ', null=True, blank=True)
#管理用户信息
default=1)
role = models.ManyToManyField("Server_Role", verbose_name=′角色'，blank=True)
name='机房名称'）
idc = models.ForeignKey(IDC, max_length=255, blank=True, null=True, verbose_
cpu =
#定义CPU信息字段
mem=
disk=models.CharField(u′磁盘'，max_length=200,blank=True)
定义磁盘信息字段
os= models.CharField(u'操作系统'，max_length=200，blank=True)
name = models.CharField(u′主机名称'，max_length=100,unique=True)
SERVER_STATUS=（
#服务器状态选择，具体的字段存储数据为0～3的int 数字
class Meta:
memo = models.CharField(u′备注', max_length=255, blank=True)
机器状态，默认都为在线状态
定义一个多对多字段，
#
sn
井
#：
def
定义内存信息字段
定义操作系统字段
定义MAC地址字段
私网IP字段，可以为空
公网IP字段，可以为空
定义 SN编号字段，blank=True，
定义一个名称字段，若blank 没有设置则默认为 False，不能为空，且unique=True 必须唯一
（0，u'下线'），
#存储的时候需要确认组合键是唯一的
#设置数据库表名
return '%s-%s-%s' % (self.group.project.name, self.group.name, self.name)
models.CharField(u内存', max_length=200, blank=True)
db_table=
unicode(self):
models.CharField(u'CPU',max_length=200, blank=True)
2
u'
u'在线），
待上线），
:models.CharField(u′内网 IP', max_length=200, blank=True)
'server_role'
一台服务器可以对应多个角色
可以为空
---
## Page 51