笔者打算从漏洞挖掘的角度分析hsqldb反序列化漏洞，这样可以解决payload为什么这么构造的问题，目前网上的一些分析大部分没有将具体的漏洞细节，更是没有分析到hsqldb的协议交互和payload构造。将解决问题的一些方法分享给大家。
# 0x01 环境搭建
老规矩还是先从调试环境搭建开始讲起。整个环境分为两大部分，一部分是tomcat运行hsqldb
web服务，另一部分是攻击代码。本小结重点分析第一部分hsqldb web服务的搭建工作。
## 0x1 导入 hsqldb 项目
从github上下载项目  
`git clone
[https://github.com/BabyTeam1024/hsqldb_unserialize.git](https://github.com/BabyTeam1024/hsqldb_unserialize.git)`
导入的项目是hsqldb-source-master，该git项目中的test.java是后续将会分析到的利用代码。用Intellij
导入hsqldb项目，操作如下  
选中文件夹后选择导入类型，这里选Maven  
右键项目pom.xml文件利用Maven自动下载依赖jar包源码  
源码导入到此结束
## 0x2 搭建tomcat
开始配置启动服务，这里需要使用tomcat 作为Web容器启动Web服务  
在这之后通过intellij 向tomcat部署war包操作如下  
配置完成后点击运行按钮  
出现如下图内容说明配置完成  
## 0x3 增加调试信息
在动态调试连接代码时发现直接引用的jar包不能进行调试，我们需要一些操作，把调试信息加进去。这里主要把前面tomcat项目运行时产生的hsqldb
class文件替换原有hsqldb.jar中的class文件。
    mkdir test
    cd test
    cp ../hsqldb.jar ./
    jar -xvf hsqldb.jar org/
    cp -r  ~/IdeaProjects/hsqldb_unserialize/hsqldb-source-master/target/classes/org ./
    jar -uvf hsqldb.jar org
# 0x02 漏洞分析
从0到1，自己尝试下在不知道漏洞点和利用的情况下如何把这个漏洞挖出来。基本思路是先找出存在的反序列化点，其次分析这些反序列化点是如何被调用的。
## 0x1 寻找反序列化点
因为有hsqldb的java源代码，所以可以通过grep的方式搜索readObject在哪些文件中出现过。  
看看这些readObject数据存不存在被我们控制的可能性。先从第一个java代码开始分析，从代码里看到objStream对象是从一个文件流中获取的数据，因为我们不在服务器底层，无法从http协议直接进行控制。放弃寻找下一个  
针对TransferCommon.java代码采用同样的分析方式，在129行进行了反序列化操作，但是也是从文件流中获取的数据，我们无法直接控制，继续分析下一个。  
根据其函数注释分析InOutUtil.java代码，了解到该函数功能是将传入的数据反序列化为一个对象，并返回。分析这个函数的可用性就要向上溯源找到deserialize的调用函数。下面的函数就不再一一分析，方法类似。  
## 0x2 寻找触发路由
下面开始寻找InOutUtil.java中readObject函数的触发路由，首先在整个项目中全局搜索其调用函数。发现如下调用，跟上去看一看  
首先看下方法描述，从实现 JDBC 接口的类调用此方法，用来将 **OTHER类型**
的值转换成另外一个类型。很明显是想通过反序列化实现类型转换。这里的OTHER类型将在后续分析到，是一个hsqldb自定义的类型。  
继续搜索getObject函数的调用代码，有以下三处。  
笔者分析到这里的时候尝试性的向上溯源发现了多个调用函数，一时半会没有捋清楚如何调用。于是就先放了放，打算编写数据库连接代码，分析在正常查询过程中hsqldb服务端这边是
**如何处理数据和分发路由的** ，带着这个问题开始接下来的分析。
## 0x3 构造连接查询代码
需要注意在运行时添加 hsqldb.jar 依赖库  
首先利用create指令创建数据表之后用select进行查询
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.sql.Statement;
    public class test {
        public static void main(String[] args) throws IOException, ClassNotFoundException, SQLException {
            String url = "http://localhost:8080";
            String dburl = "jdbc:hsqldb:" + url + "/hsqldb_war_exploded/hsqldb/";
            Class.forName("org.hsqldb.jdbcDriver");
            Connection connection = DriverManager.getConnection(dburl, "sa", "");
            Statement statement = connection.createStatement();
            //statement.execute("create table example (id integer,name varchar(20)");//先创建数据表，再搜索
            statement.execute("select * from example");
        }
    }
因为使用http协议发送的数据，所以在服务端存在接受POST或GET协议的相关代码，经过一番寻找最终找到了hsqldb自己实现的servlet，如下图所示  
接着上一个小节讲，这里应该就是触发路由的入口点了，后面要想办法如何让数据走到之前分析的点即JavaObject的getObject方法。
## 0x4 hsqldb服务端数据处理
通过正常的select查询，调试服务端代码逻辑，方面后面漏洞利用构造相应的payload。直接使用上述客户端代码，执行以下SQL语句
    statement.execute("select * from example");
### 1\. 数据格式解析
服务端首先接受POST传递过来的数据，进行格式解析，重点关注Result.read中的代码逻辑
    inStream = new DataInputStream(request.getInputStream());
    Result resultIn = Result.read(rowIn, inStream);
该方法实现如下图所示，主要从 **DataInput datain** 中读取数据并解析。  
在创建Result对象的时候会进行相对应的数据提取，因这部分代码太长笔者选取了关键逻辑，代码如下
    int length = datain.readInt(); // 协议长度
    Result(RowInputBinary in) throws HsqlException {
        try {
            mode = in.readIntData(); //操作类型
            ...
            databaseID = in.readIntData(); //数据库id
            sessionID  = in.readIntData(); //保持会话用的
            switch (mode) {
                ....
                case ResultConstants.SQLEXECDIRECT :
                    updateCount = in.readIntData();//0
                    statementID = in.readIntData();//0
                    mainString  = in.readString();//执行的SQL语句
                    break;
                case ResultConstants.ERROR :
                case ResultConstants.SQLCONNECT :
                    mainString   = in.readString();
                    subString    = in.readString();
                    subSubString = in.readString();
                    statementID  = in.readIntData();
                    break;
                case ResultConstants.UPDATECOUNT :
                ...
                default :
                    throw new HsqlException(
                        Trace.getMessage(
                            Trace.Result_Result, true, new Object[]{
                                new Integer(mode) }), null, 0);
            }
        } catch (IOException e) {
            throw Trace.error(Trace.TRANSFER_CORRUPTED);
        }
    }
简单解读下，服务端把不同操作分为了不同的mode号，于是后台根据这个mode选择对应的分支进行处理。根据调试发现执行select、delete、call的mode号均为65547，这也意味着前期的解析操作是一模一样的。
### 2\. 简单分发
在Servlet主函数解析过POST数据后会调用session.execute函数进行第一步的分发操作。  
sqlExecuteDirectNoPreChecks函数会根据传入的SQL语句执行相对应的处理流程。  
### 3\. SQL语句格式解析
dbCommandInterpreter.execute函数会根据SQL查询语法生成对应的cmd id号  
之后会执行executePart函数将id号和token传入其中，进行相应的分发，  
详细分析executePart函数，返现其通过cmd的值进行分发，因为客户端执行的是Select语句所以这里走到了Token.SELECT分支。再之后会执行parser.compileSelectStatement函数编译select语句，session.sqlExecuteCompiledNoPreChecks会执行SQL语句  
继续跟进该函数  
executeImpl函数中有第三次路由分发，主要是根据查询语句的主操作函数比如SELECT、INSERT、UPDATE、DELETE等
    private Result executeImpl(CompiledStatement cs) throws HsqlException {
        switch (cs.type) {
            case CompiledStatement.SELECT :
                return executeSelectStatement(cs);
            case CompiledStatement.INSERT_SELECT :
                return executeInsertSelectStatement(cs);
            case CompiledStatement.INSERT_VALUES :
                return executeInsertValuesStatement(cs);
            case CompiledStatement.UPDATE :
                return executeUpdateStatement(cs);
            case CompiledStatement.DELETE :
                return executeDeleteStatement(cs);
            case CompiledStatement.CALL :
                return executeCallStatement(cs);
            case CompiledStatement.DDL :
                return executeDDLStatement(cs);
            default :
                throw Trace.runtimeError(
                    Trace.UNSUPPORTED_INTERNAL_OPERATION,
                    "CompiledStatementExecutor.executeImpl()");
        }
    }
分析到这个程度可以先停一停，回想下我们为什么要分析这个，想想我们的初心是什么。我们整理下服务端的数据处理流程，大图预警
总的来说在整个SQL语句处理执行过程中大概经历了三次路由分发，让不同的查询操作走了不同的代码分支，其中有对操作指令的识别也有对查询参数的识别，最后代码执行到executeSelectStatement函数进行最后的处理。
## 0x5 再出发，继续寻找触发路由
**我们要寻找如何才能执行到JavaObject.getObject函数**  