### Higher-Order Controls for Tuning the Whitelist

By default, ads are text-only. To enable images, the `enable-images` permission can be set to `allow`, thus specifying the publisher's content restrictions policy on the use of third-party images. Similarly, the `enable-flash` permission allows Flash ads to be displayed. However, since our framework does not address security threats from opaque content such as Flash (§2.1), publishers must exercise extreme caution when enabling this permission.

Additionally, the `enable-iframe` permission can allow `<iframe>` elements. However, allowing `<iframe>` elements can facilitate attacks such as clickjacking [17] and drive-by downloads [36].

### Ad Appearance Controls

The `max-height`, `max-width`, and `overflow` permissions control how ads appear on the page. If an element's size exceeds the `max-width` or `max-height` dimensions and the `overflow` permission is set to `deny`, the excess content will be hidden. Otherwise, the excess content will overlap other parts of the page. The `overflow` permission is useful because some ads consume a small area when not in use but may overlap non-ad content when engaged by the user (e.g., expanding menus). Publishers may wish to disallow expanding ads to prevent them from overlapping trusted page content.

### Link Target Control

The `link-target` permission controls the HTML `target` attribute of all `<a>` elements (and `<form>` elements, if allowed by the whitelist) in mirrored content. By setting this permission, the publisher can specify that activated links or submitted forms must open in a new browser tab/window (if set to `blank`) or in the same tab/window hosting the real page (if set to `top`). This permission ensures that the agreed-upon link behavior between the publisher and ad network is enforced, protecting the publisher from ad scripts that might create content with incorrect link behavior.

### Policy Specification

Publishers can annotate any HTML element of the real page with a `policy` attribute. The `policy` attribute contains a set of statements, each terminated by a semicolon. Each statement specifies the value of a particular permission in the form `permission: value;`. Acceptable values for `permission` and `value` are listed in Table 1.

Permissions granted in an element’s `policy` attribute are inherited by descendant elements in the HTML document hierarchy. The scope of a permission P is the HTML subtree rooted at the element whose `policy` attribute grants P.

### Algorithm for Computing Policy

Algorithm 1: `ComputePolicy(targetElement)`
1. Initialize `policy` as a new object.
2. Set `WABeforeAppend` to `undefined`.
3. For each element from the root to `targetElement`:
   - Parse the `policy` attribute of the element.
   - For each statement in the parsed `policy`:
     - Update `policy` using `ComposePolicies(policy, stmt)`.
4. If `policy["write-access"]` is not `append`, set `WABeforeAppend` to `policy["write-access"]`.
5. For each permission in all permissions:
   - If the permission is not defined in `policy`, set it to its default value using `GetDefaultValue(permission)`.
6. Return `policy`.

### Policy Composition

Multiple policy statements may assign different values to a single permission. This can occur within a single `policy` attribute or through inheritance. We resolve the ambiguity of multiple permission values through a composition process. The effective value for a permission is the most restrictive value specified for that permission across all composed policy statements. After all statements have been composed, any unspecified permissions are set to their most restrictive values.

### Exceptions to Default Policies

To enhance usability, we introduced three minor exceptions:
1. The `max-height` and `max-width` permissions default to their least restrictive value (`none`). This is because a definitive maximum height and width may not be suitable for every type of ad. Publishers should explicitly declare these values if such restrictions are desired.
2. The `link-target` permission defaults to its least restrictive value.
3. Inheritance of `append` write permissions is prevented. This is important because `append` specifically does not grant access to existing children of an element, so any existing children should not inherit the `append` permission.

### Real and Shadow Pages

Our implementation requires changes to the original web page (real page) and the creation of a corresponding shadow page, as described in §3.1. The shadow page is hosted on a web server with a different origin, ensuring that the browser’s same-origin policy prevents the shadow page from accessing the cookies, content, or other data belonging to the real page. Deploying our implementation requires the publisher to configure their DNS and web server to support the shadow page origin domain. Care must be taken in selecting the shadow page domain to avoid reuse or overlap of domains.

To facilitate communication between the two pages, we use the `window.postMessage()` browser API, which enables inter-origin frame communication.

### Construction of the Real Page

The real page is a modified version of the publisher’s original page, with the following changes:
1. Remove the ad script (Figure 4a).
2. Add the tunnel script (Figure 4b) to the end of the page.
3. Annotate HTML elements with policies, as discussed in §4.1.

The real page tunnel script initializes by scanning the real page to find all elements with policies granting `read-access: subtree;`, `write-access: append;`, and `write-access: subtree;`. These elements are converted into models (JavaScript data structures) and sent to the shadow page. Script nodes are omitted from models to ensure their semantics are preserved. An example model is shown in Figure 5.

Elements with read permission are modeled by encoding (non-script) element attributes and readable child nodes into the model. Elements with write access but no read access are modeled as empty containers. All elements with a policy annotation and their descendant elements are assigned a unique `syncId` attribute during initialization. The `syncId` is used to match elements on the real page with their corresponding elements on the shadow page.

### Construction of the Shadow Page

The shadow page starts as a template web page containing only the tunnel script. As the template page is rendered, the shadow page tunnel script receives content models from the real page’s tunnel script. The model data is sent as a JSON string via `postMessage()`. Once received, the models are converted into HTML constructs using the browser’s DOM interfaces, resulting in a web page environment containing all the non-sensitive content and constructs of the real page, where the ad script can execute.

To support ads that appear or behave differently based on content positioning, the shadow page is virtually sized to the dimensions of the real page, and content models are rendered in the same absolute position and size as their real page counterparts.

### Synchronization

After initial rendering, the real and shadow pages are kept synchronized by exchanging messages listed in Table 2. We conserve the total number of generated ad impressions using an approach given in §4.3.1. Content written by ad scripts to the shadow page is mirrored to the real page, and user interface events are forwarded from the real page to the shadow page. Content position and style are kept synchronized on both pages as needed by some ad scripts.

### DOM Interposition

A primary goal of our approach is to conserve the number of ad impressions detected by an ad server. Ad networks bill advertisers and pay publishers based on the number of ad impressions, which are correlated to the number of requests for ad resources. When ad content is rendered on the real page, any external resources not available in the browser’s cache will be requested, causing an impression. This may occur for several reasons out of our control, such as the user disabling the cache or the ad network's configuration.