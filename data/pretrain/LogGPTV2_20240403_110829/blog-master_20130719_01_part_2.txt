     4 |     0  
     5 |     0  
     6 |     0  
     7 |     0  
     8 |  5440  
(9 rows)  
```  
以上结果表明0,8号数据块的剩余空间是多少字节.  
二. pgstattuple的更改体现在函数层面如下 :   
```  
+-- complain if script is sourced in psql, rather than via CREATE EXTENSION  
+\echo Use "CREATE EXTENSION pgstattuple" to load this file. \quit  
+  
+CREATE FUNCTION pgstattuple(IN relname text,  
+    OUT table_len BIGINT,              -- physical table length in bytes  
+    OUT tuple_count BIGINT,            -- number of live tuples  
+    OUT tuple_len BIGINT,              -- total tuples length in bytes  
+    OUT tuple_percent FLOAT8,          -- live tuples in %  
+    OUT dead_tuple_count BIGINT,       -- number of dead tuples  
+    OUT dead_tuple_len BIGINT,         -- total dead tuples length in bytes  
+    OUT dead_tuple_percent FLOAT8,     -- dead tuples in %  
+    OUT free_space BIGINT,             -- free space in bytes  
+    OUT free_percent FLOAT8,           -- free space in %  
+    OUT all_visible_percent FLOAT8)            -- all visible blocks in %  
+AS 'MODULE_PATHNAME', 'pgstattuple'  
+LANGUAGE C STRICT;  
+  
+CREATE FUNCTION pgstattuple(IN reloid oid,  
+    OUT table_len BIGINT,              -- physical table length in bytes  
+    OUT tuple_count BIGINT,            -- number of live tuples  
+    OUT tuple_len BIGINT,              -- total tuples length in bytes  
+    OUT tuple_percent FLOAT8,          -- live tuples in %  
+    OUT dead_tuple_count BIGINT,       -- number of dead tuples  
+    OUT dead_tuple_len BIGINT,         -- total dead tuples length in bytes  
+    OUT dead_tuple_percent FLOAT8,     -- dead tuples in %  
+    OUT free_space BIGINT,             -- free space in bytes  
+    OUT free_percent FLOAT8,           -- free space in %  
+    OUT all_visible_percent FLOAT8)            -- all visible blocks in %  
+AS 'MODULE_PATHNAME', 'pgstattuplebyid'  
+LANGUAGE C STRICT;  
+  
+CREATE FUNCTION pgstatindex(IN relname text,  
+    OUT version INT,  
+    OUT tree_level INT,  
+    OUT index_size BIGINT,  
+    OUT root_block_no BIGINT,  
+    OUT internal_pages BIGINT,  
+    OUT leaf_pages BIGINT,  
+    OUT empty_pages BIGINT,  
+    OUT deleted_pages BIGINT,  
+    OUT avg_leaf_density FLOAT8,  
+    OUT leaf_fragmentation FLOAT8)  
+AS 'MODULE_PATHNAME', 'pgstatindex'  
+LANGUAGE C STRICT;  
+  
+CREATE FUNCTION pg_relpages(IN relname text)  
+RETURNS BIGINT  
+AS 'MODULE_PATHNAME', 'pg_relpages'  
+LANGUAGE C STRICT;  
+  
+CREATE FUNCTION pgstatginindex(IN relname regclass,  
+    OUT version INT4,  
+    OUT pending_pages INT4,  
+    OUT pending_tuples BIGINT)  
+AS 'MODULE_PATHNAME', 'pgstatginindex'  
+LANGUAGE C STRICT;  
```  
测试 :   
```  
digoal=# select * from pgstattuple('t1');  
-[ RECORD 1 ]-------+------  
table_len           | 73728  
tuple_count         | 999  
tuple_len           | 60939  
tuple_percent       | 82.65  
dead_tuple_count    | 0  
dead_tuple_len      | 0  
dead_tuple_percent  | 0  
free_space          | 5540  
free_percent        | 7.51  
all_visible_percent | 100  
```  
增加了all_visible_percent这个输出, 代表百分之多少的块是在VM中的, 越多的话vacuum这个表将越快. 因为可以忽略掉很多数据块的检测.  
接下来执行一个删除动作. 将把0号块从vm中抹除.  
```  
digoal=# delete from t1 where ctid='(0,2)';  
DELETE 1  
digoal=# select * from pgstattuple('t1');  
-[ RECORD 1 ]-------+------  
table_len           | 73728  
tuple_count         | 998  
tuple_len           | 60878  
tuple_percent       | 82.57  
dead_tuple_count    | 1  
dead_tuple_len      | 61  
dead_tuple_percent  | 0.08  
free_space          | 5540  
free_percent        | 7.51  
all_visible_percent | 88.89  
```  
9个块中有8个块是all visible的. 所以all_visible_percent是88.89;  
```  
digoal=# select 8/9.0;  
-[ RECORD 1 ]--------------------  
?column? | 0.88888888888888888889  
```  
## 参考  
1\. http://www.postgresql.org/message-id/flat/PI:EMAIL#PI:EMAIL  
2\. [《PostgreSQL 如何精确计算表膨胀(fsm,数据块layout讲解) - PostgreSQL table exactly bloat monitor use freespace map data》](../201306/20130628_01.md)   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")