known maximum number of prior operations is better than
(potentially) leaking all of them!
Consider, by contrast, an AVL tree implemented within a
standard ORAM as in prior work. Using the fact that AVL tree
shapes reveal information about past operations, the adversary
can come up with two sequences of operations such that (i)
the ﬁrst operations of each sequence result in a distinct AVL
tree shape but the same data items, and (ii) the same read
operations, as many as necessary, follow at the end. With
the catastrophic attack, the adversary will simply observe the
tree shape and make a correct guess. This argument holds
for any data structure whose shape reveals information about
past operations, which therefore have no upper bound on the
amount of history leakage.
Secure deletion. Perfect history independence implies se-
cure deletion. However, the above lower bound shows that
complete history independence will not be possible in our
setting. So, we consider a complementary security notion that
requires strong security for the deleted data. Secure deletion
is deﬁned through an experiment sdel, given in Figure 1.
In the experiment, A1 chooses two data items d0 and d1
−→
at random, based on which A2 outputs (
−→
opd0,d1 , S). Here,
opd0,d1 denotes a vector of operations containing neither d0
−→
nor d1, and S = (s1, s2, . . . , sm) is a monotonically increasing
sequence.
opd0,d1
according to S. In particular, “insert db" is placed at position
−→
s1; for example, if s1 is 5, this insert operation is placed right
opd0,d1. Then, “look-up db" is
before the 6th operation of
placed at positions s2, . . . , sm−1, and ﬁnally “delete db" at
sm.
(cid:2)(cid:3)S db denotes injecting db into
−→
opd0,d1
2Full proofs for the main theorems may be found in Appendix C.
183183
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 3. For a data structure D, consider the experiment
sdelA1,A2,A3 (D, λ, n, b) with adversary A = (A1,A2,A3).
EXP
We call the adversary A admissible if for any data item d that
A1(1λ, 0) (resp., A1(1λ, 1)) outputs, the probability that A1
outputs d is negligible in λ, i.e., the output A1 forms a high-
the sequence of operations
entropy distribution; moreover,
from A2 must store at most n items. We deﬁne the advantage
of A as:
AdvsdelA (D, λ, n) =
We say that the data structure D provides secure deletion if
for any sufﬁciently large λ, any n ∈ poly(λ), and any PPT
admissible adversary A, we have AdvsdelA (D, λ, n) ≤ negl(λ).
Note that our deﬁnition is stronger than just requiring that
the adversary cannot recover the deleted item; for any two high
entropy distributions chosen by the adversary, the adversary
cannot tell from which distribution the deleted item was drawn.
(cid:2)(cid:2)(cid:2)(cid:2) Pr[EXP
sdelA (D, λ, n, 1) = 1]
sdelA (D, λ, n, 0) = 1]
− Pr[EXP
(cid:2)(cid:2)(cid:2)(cid:2) .
IV. ORAM WITH VARIABLE-SIZE BLOCKS (VORAM)
The design of vORAM is based on the non-recursive version
of Path ORAM [9], but we are able to add more ﬂexibility by
allowing each ORAM bucket to contain as many variable-size
blocks (or parts of blocks) as the bucket space allows. We
will show that vORAM preserves obliviousness and maintains
a small stash as long as the size of variable blocks can be
bounded by a geometric probability distribution, which is the
case for the HIRB that we intend to store within the vORAM.
To support secure deletion, we also store encryption keys
within each bucket for its two children, and these keys are re-
generated on every access, similarly to other work on secure
deletion [17], [34].
Parameters. The vORAM construction is governed by the
following parameters:
• The height T of the vORAM tree: The vORAM is
represented as a complete binary tree of buckets with
height T (the levels of the tree are numbered 0 to T ), so
the total number of buckets is 2T +1 − 1. T also controls
the total number of allowable data blocks, which is 2T .
• The bucket size Z: Each bucket has Z bits, and this Z
must be at least some constant times the expected block
size B for what will be stored in the vORAM.
• The stash size parameter R: Blocks (or partial blocks)
that overﬂow from the root bucket are stored temporarily
in an additional memory bank in local storage called the
stash, which can contain up to R · B bits.
• Block collision parameter γ: Each block will be assigned
a random identiﬁer id; these identiﬁers will all be distinct
at every step with probability 1 − negl(γ).
Bucket structure. Each bucket is split into two areas: header
and data. See Figure 2 for a pictorial description. The header
area contains two encryption keys for the two child buckets.
The data area contains a sequence of (possibly partial) blocks,
each preceded by a unique identiﬁer string and the block
184184
k1 k2 id1 l1
blk1
. . . id(cid:4) l(cid:4)
blk(cid:4)
0
header
Figure 2: A single vORAM bucket with (cid:3) partial blocks.
l1 bytes
l(cid:4) bytes
Figure 3: A sample vORAM state with partial blocks with
id0, id1, id2, id3: Note that the partial blocks for id0 are
opportunistically ﬁlled up the vORAM from leaf to root and
then remaining partial blocks are placed in the stash.
data length. The end of the data area is ﬁlled with 0 bits,
if necessary, to pad up to the bucket size Z.
Each idi uniquely identiﬁes a block and also encodes the
path of buckets along which the block should reside. Partial
blocks share the same identiﬁer with each length l indicating
how many bytes of the block are stored in that bucket.
Recovering the full block is accomplished by scanning from
the stash along the path associated with id (see Figure 3). We
further require the ﬁrst bit of each identiﬁer to be always 1
in order to differentiate between zero padding and the start
of next identiﬁer. Moreover, to avoid collisions in identiﬁers,
the length of each identiﬁer is extended to 2T + γ + 1 bits,
where γ is the collision parameter mentioned above. The
most signiﬁcant T + 1 bits of the identiﬁer (including the
ﬁxed leading 1-bit) are used to match a block to a leaf, or
equivalently, a path from root to leaf in the vORAM tree.
vORAM operations. Our vORAM construction supports the
following operations.
• insert(blk) (cid:6)→ id. Inserts the given block blk of data into
the ORAM and returns a new, randomly-generated id to
be used only once at a later time to retrieve the original
contents.
• remove(id) (cid:6)→ blk. Removes the block corresponding to
id and returns the original data blk as a sequence of bytes.
• update(id, callback) (cid:6)→ id+. Given id and a user-deﬁned
function callback, perform insert(callback(remove(id)))
in a single step.
Each vORAM operation involves two phases:
1) evict(id). Decrypt and read the buckets along the path
from the root to the leaf encoded in the identiﬁer id,
and remove all the partial blocks along the path, merging
partial blocks that share an identiﬁer, and storing them in
the stash.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
2) writeback(id). Encrypt all blocks along the path encoded
by id with new encryption keys and opportunistically
store any partial blocks from stash, dividing blocks as
necessary, ﬁlling from the leaf to the root.
An insert operation ﬁrst evicts a randomly-chosen path,
then inserts the new data item into the stash with a sec-
ond randomly-chosen identiﬁer, and ﬁnally writes back the
originally-evicted path. A remove operation evicts the path
speciﬁed by the identiﬁer, then removes that item from the
stash (which must have had all its partial blocks recombined
along the evicted path), and ﬁnally writes back the evicted path
without the deleted item. The update operation evicts the path
from the initial id, retrieves the block from stash, passes it to
the callback function, re-inserts the result to the stash with a
new random id+, and ﬁnally calls writeback on the original
id. A full pseudocode description of all these operations is
provided in Appendix A.
Security properties.
Theorem 2. The vORAM provides obliviousness.
For obliviousness, any insert, remove, update operation is
computationally indistinguishable based on its access pattern
because the identiﬁer of each block is used only once to re-
trieve that item and then immediately discarded. Each remove
or update trivially discards the identiﬁer after reading the
path, and each insert evicts buckets along a bogus, randomly
chosen path before returning a fresh id+ to be used as the
new identiﬁer for that block.
Theorem 3. The vORAM provides secure deletion.
Secure deletion is achieved via key management of buckets.
Every evict and writeback will result in a path’s worth of
buckets to be re-encrypted and re-keyed, including the root
bucket. Buckets containing any removed data may persist,
but
the decryption keys are erased since the root bucket
is re-encrypted, rendering the data unrecoverable. Similarly,
recovering any previously deleted data reduces to acquiring the
old-root key, which was securely deleted from local, erasable
memory.
However, each evict and writeback will disclose the
vORAM path being accessed, which must be handled care-
fully to ensure no leakage occurs. Fortunately,
identiﬁers
(and therefore vORAM paths as well) are uniformly random,
independent of the deleted data and revealing no information
about them.
Theorem 4. The vORAM provides history independence with
leakage of O(n log n + λn) operations.
Regarding history independence, although any removed
items are unrecoverable,
the height of each item in the
vORAM tree, as well as the history of accesses to each
vORAM tree bucket, may reveal some information about the
order, or timing, of when each item was inserted. Intuitively,
items appearing closer to the root level of the vORAM are
more likely to have been inserted recently, and vice versa.
In fact, we can achieve asymptotically optimal
However, if an item is inserted and then later has its path
entirely evicted due to some other item’s insertion or removal,
then any history information of the older item is essentially
wiped out; it is as if that item had been removed and re-
inserted. Because the identiﬁers used in each operation are
chosen at random, after some O(n log n) operations it is likely
that every path in the vORAM has been evicted at least once.
leakage
with only a constant-factor blowup in the bandwidth. Every
vORAM operation involves reading and writing a single
path. Additionally, after each operation, we can evict and
then re-write a complete subtree of size lg n which contains
(lgn)/2 − 1 leaf buckets in a deterministicly chosen dummy
operation that simply reads the buckets into stash, then rewrites
the buckets with no change in contents but allowing the blocks
evicted from the dummy operation and those evicted from the
access to all move between levels of the vORAM as usual. The
number of nodes evicted will be less than 2 lg n, to encompass
the subtree itself as well as the path of buckets to the root of
the subtree, and hence the total bandwidth for the operation
remains O(log n).
The beneﬁt of this approach is that if these dummy subtree
evictions are performed sequentially across the vORAM tree
on each operation, any sequence of n/ lg n operations is
guaranteed to have evicted every bucket in the vORAM at least
once. Hence this would achieve history independence with
only O(n/ log n) leakage, which matches the lower bound of
Theorem 1 and is therefore optimal up to constant factors.
Stash size. Our vORAM construction maintains a small stash
as long as the size of variable blocks can be bounded by a
geometric probability distribution, which is the case for the
HIRB that we intend to store within the vORAM.
Theorem 5. Consider a vORAM with T levels, collision
parameter γ, storing at most n = 2T blocks, where the length
l of each block is chosen independently from a distribution
such that E[l] = B and Pr[l > mB]  R B] < 28 · (0.883)
R
.
Note that the constants 28 and 0.883 are technical artifacts
of the analysis, and do not matter except to say that 0.883 < 1
and thus the failure probability decreases exponentially with
the size of stash.
As a corollary, for a vORAM storing at most n blocks, the
cloud storage requirement is 40Bn bits, and the bandwidth
for each operation amounts to 40B lg n bits. However, this is
a theoretical upper bound, and our experiments in Section VI
show a smaller constants sufﬁce. namely, setting Z = 6B
and T = (cid:8)lg n − 1(cid:9) stabilizes the stash, so that the actual
storage requirement and bandwidth per operation are 6Bn and
12B lg n bits, respectively.
Furthermore, to avoid failure due to stash overﬂow or col-
lisions, the client storage R and collision parameter γ should
both grow slightly faster than log n, i.e., R, γ ∈ ω(log n).
185185
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
V. HIRB TREE DATA STRUCTURE
We now use the vORAM construction described in the
previous section to implement a data structure supporting the
operations of a dictionary that maps labels to values. In this
paper, we intentionally use the word “labels” rather than the
word “keys” to distinguish from the encryption keys that are
stored in the vORAM.
Motivating the HIRB. Before describing the construction
and properties of the history independent, randomized B-Tree
(HIRB), we ﬁrst wish to motivate the need for the HIRB as it
relates to the security and efﬁciently requirements of storing
it within the vORAM:
• The data structure must be easily partitioned into blocks
that have expected size bounded by a geometric distribu-
tion for vORAM storage.
• The data structure must be pointer-based, and the struc-
ture of blocks and pointers must form a directed graph
that is an arborescence, such that there exists at most one
pointer to each block. This is because a non-recursive
ORAM uses random identiﬁers for storage blocks, which
must change on every read or write to that block.
• The memory access pattern for an operation (e.g., get,
set, or delete) must be bounded by a ﬁx parameter to
ensure obliviousness; otherwise the number of vORAM
accesses could leak information about the data access.
• Finally, the data structure must be uniquely represented
such that the pointer structures and contents are deter-
mined only by the set of (label, value) pairs stored within,
up to some randomization performed during initialization.
Recall that strong history independence is provided via a
unique representation, a sufﬁcient and necessary condi-
tion [25] for the desired security property.
In summary, we require a uniquely-represented, tree-based
data structure with bounded height. While a variety of uniquely
represented (or strongly history independent) data structures
have been proposed in the literature [24], [29], we are not
aware of any that satisfy all of the requisite properties.
While some form of hash table might seem like an obvious
choice, we note that such a structure would violate the second
condition above; namely, it would be impossible to store a
hash table within an ORAM without having a separate position
map, incurring an extra logarithmic factor in the cost. As it
turns out, our HIRB tree does use hashing in order to support
secure deletion, but this is only to sort the labels within the
tree data structure.
Overview of HIRB tree. The closest data structure to the
HIRB is the B-Skip List [30]; unfortunately, a skip list does
not form a tree. The HIRB is essentially equivalent to a B-
Skip List after sorting labels according to a hash function and
removing pointers between skip-nodes to impose a top-down
tree structure.
Recall that a typical B-tree consists of large nodes, each
with an array of (label, value) pairs and child nodes. A B-tree
node has branching factor of k, and we call it a k-node, if the
186186
node contains k − 1 labels, k − 1 values, and k children (as
in Figure 4). In a typical B-tree, the branching factor of each
node is allowed to vary in some range [B + 1, 2B], where
B is a ﬁxed parameter of the construction that controls the
maximum size of any single node.
label1, value1 label2, value2 ···
labelk−1, valuek−1
child1
child2
childk
Figure 4: B-tree node with branching factor k
child3
···
HIRB tree nodes differ from typical B-tree nodes in two
ways. First, instead of storing the label in the node a cryp-
tographic hash3 of the label is stored. This is necessary to
support secure deletion of vORAM+HIRB even when the
nature of vORAM leaks some history of operations; namely,
revealing which HIRB node an item was deleted from should
not reveal the label that was deleted.
The second difference from a normal B-tree node is that the
branching factor of each node, rather than being limited to a
ﬁxed range, can take any value k ∈ [1,∞). This branching
factor will observe a geometric distribution for storage within
the vORAM. In particular,
it will be a random variable
X drawn independently from a geometric distribution with
expected value β, where β is a parameter of the HIRB tree
construction.
The height of a node in the HIRB tree is deﬁned as the
length of the path from that node to a leaf node; all leaf nodes
are the same distance to the root node for B-trees. The height