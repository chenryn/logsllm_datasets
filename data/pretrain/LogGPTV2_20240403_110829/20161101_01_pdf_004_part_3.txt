 postgres=# explain select * from test where lower(info) ~ '^a';
 Bitmap Heap Scan on test (cost=13.40..648.99 rows=500 width=23)
 Filter: (lower(info) ~ '^a'::text)
 -> Bitmap Index Scan on idx_test_info_1 (cost=0.00..13.27 rows=500 width=0)
 Index Cond: ((lower(info) >= 'a'::text) AND (lower(info)  Result (cost=0.00..0.01 rows=1 width=0)
 (4 rows)
 绑定变量的使用场景, 通常需要5次后得到generic plan.
 http://blog.163.com/digoal@126/blog/static/1638770402012112452432251/
HOT Update
索引指针结构
 ItemPointers (index) ->
ItemId数据结构
(Array of (lp_off:15bit, lp_flags:2bit,lp_len:15bit) pairs pointing
to the actual items. 4 bytes per ItemId.)
 -> Item (tuple)
HOT Update
 Heap-Only Tuple Benefit :
 eliminates redundant index entries
 allows the re-use of space taken by DELETEd or obsoleted UPDATEd tuples without performing a table-wide vacuum.
 Example
 Update 1: Index points to 1
 line points [1] [2]
 Items [111111111]->[2222222222]
 Update 2: Index points to 1
 line point [1]->[2]
 Items [2222222222]
 Update 3: Index points to 1
 line points [1]->[2] [3]
 Items [2222222222]->[3333333333]
 Update 4: Index points to 1
 line points [1]------>[3]
 Items [3333333333]
HOT Update
Heap Page Index Page
PageHead PageHead
LinePoint LinePoint
Free ItemPoint
1 2
Space
Tuple2 HEAP_HOT_TUPLE
Tuple1 t_ctid, HEAP_HOT_UPDATED
HOT Update
Heap Page Index Page
PageHead PageHead
LinePoint LinePoint
LP_REDIRECT Free ItemPoint
1 2
Space
Tuple2 HEAP_HOT_TUPLE
Tuple1 Dead,vacuumed
HOT Update
 利用pageinspect extension 来观察HOT
 postgres=# create extension pageinspect;
 postgres=# create table hot_test (id int primary key,info text);
 postgres=# insert into hot_test values (1,'digoal');
 -- 因为是从0号page开始插入, 这里就省去了查询ctid等过程.直接切入0号page.
 -- 当前的page信息
 postgres=# select * from page_header(get_raw_page('hot_test',0));
 lsn | tli | flags | lower | upper | special | pagesize | version | prune_xid
 2/75B27878 | 1 | 0 | 28 | 8152 | 8192 | 8192 | 4 | 0
 -- 当前的item信息
 postgres=# select * from heap_page_items(get_raw_page('hot_test',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid
 1 | 8152 | 1 | 35 | 1864 | 0 | 0 | (0,1) | 2 | 2050 | 24 | |
HOT Update
 -- 当前索引的page信息
 postgres=# select * from page_header(get_raw_page('hot_test_pkey',0));
 lsn | tli | flags | lower | upper | special | pagesize | version | prune_xid
 2/75B278B0 | 1 | 0 | 48 | 8176 | 8176 | 8192 | 4 | 0
 -- 当前索引的item信息
 postgres=# select * from heap_page_items(get_raw_page('hot_test_pkey',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid
 1 | 12642 | 2 | 2 | | | | | | | | |
 2 | 2 | 0 | 0 | | | | | | | | |
 3 | 1 | 0 | 0 | | | | | | | | |
 4 | 0 | 0 | 0 | | | | | | | | |
 5 | 1 | 0 | 0 | | | | | | | | |
 6 | 0 | 0 | 0 | | | | | | | | |
HOT Update
 -- 更新一次后 itemID中的信息
 postgres=# update hot_test set info='new' where id=1;
 -- item信息 tuple中的信息,对应
第一幅图
 postgres=# select * from heap_page_items(get_raw_page('hot_test',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 1 | 8152 | 1 | 35 | 1864 | 1867 | 0 | (0,2) | 16386 | 258 | 24 | |
 2 | 8120 | 1 | 32 | 1867 | 0 | 0 | (0,2) | 32770 | 10242 | 24 | |
 -- 索引的item信息(没有变化)
 postgres=# select * from heap_page_items(get_raw_page('hot_test_pkey',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 -- 内容略
HOT Update
itemID中的信息
 -- vacuum 后
对应第二幅图
 postgres=# vacuum hot_test ;
 VACUUM
 postgres=# select * from heap_page_items(get_raw_page('hot_test',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 1 | 2 | 2 | 0 | | | | | | | | |
 2 | 8160 | 1 | 32 | 1867 | 0 | 0 | (0,2) | 32770 | 10498 | 24 | |
 -- 多次更新后
 postgres=# update hot_test set info='new' where id=1;
 postgres=# update hot_test set info='new' where id=1;
 postgres=# update hot_test set info='new' where id=1;
 postgres=# update hot_test set info='new' where id=1;
 postgres=# update hot_test set info='new' where id=1;
 postgres=# update hot_test set info='new' where id=1;
HOT Update
 postgres=# select * from heap_page_items(get_raw_page('hot_test',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 1 | 2 | 2 | 0 | | | | | | | | |
 2 | 8160 | 1 | 32 | 1867 | 1868 | 0 | (0,3) | 49154 | 9474 | 24 | |
 3 | 8128 | 1 | 32 | 1868 | 1869 | 0 | (0,4) | 49154 | 9474 | 24 | |
 4 | 8096 | 1 | 32 | 1869 | 1870 | 0 | (0,5) | 49154 | 9474 | 24 | |
 5 | 8064 | 1 | 32 | 1870 | 1871 | 0 | (0,6) | 49154 | 9474 | 24 | |
 6 | 8032 | 1 | 32 | 1871 | 1872 | 0 | (0,7) | 49154 | 9474 | 24 | |
 7 | 8000 | 1 | 32 | 1872 | 1873 | 0 | (0,8) | 49154 | 8450 | 24 | |
 8 | 7968 | 1 | 32 | 1873 | 0 | 0 | (0,8) | 32770 | 10242 | 24 | |
注意redirect后,lp_off的值表示第几条itemid, 而不
是offset_bytes.
HOT Update
 -- vacuum后
 postgres=# vacuum hot_test ;
 postgres=# select * from heap_page_items(get_raw_page('hot_test',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 1 | 8 | 2 | 0 | | | | | | | | |
 2 | 0 | 0 | 0 | | | | | | | | |
 3 | 0 | 0 | 0 | | | | | | | | |
 4 | 0 | 0 | 0 | | | | | | | | |
 5 | 0 | 0 | 0 | | | | | | | | |
 6 | 0 | 0 | 0 | | | | | | | | |
 7 | 0 | 0 | 0 | | | | | | | | |
 8 | 8160 | 1 | 32 | 1873 | 0 | 0 | (0,8) | 32770 | 10498 | 24 | |
 Use pageinspect EXTENSION view PostgreSQL Page's raw infomation
 http://blog.163.com/digoal@126/blog/static/16387704020114273265960/
PostgreSQL 全文检索
 和全文检索相关的有两个数据类型
 tsvector -- 文本在经过全文检索标准化处理后得到类型, 处理后的文本包括(分词去重复后排序, 分词的位置, 分词的权重结构(一共可以指
定4个权重ABCD, D默认不显示))
 tsquery -- 需要检索的分词组合, 组合类型包括&, | , ! (与, 或, 否). 同时还支持分词的权重, 分词的前导匹配.
 详细介绍
 http://www.postgresql.org/docs/9.3/static/datatype-textsearch.html
 http://www.postgresql.org/docs/9.3/static/textsearch.html
 字符串 到 tsvector 的默认转换例子 :
 digoal=# select $$hello world, i'm digoal.$$::tsvector;
 tsvector
 -----------------------------------
 'digoal.' 'hello' 'i''m' 'world,'
 这种转换后得到的tsvector不包含分词的位置信息和权重信息. 只有排序后的分词.
 权重和位置信息可以提现在文本中(权重一般用来表示该分词所在的级别,如目录,或正文? ),
 digoal=# select $$hello:1b world,:1a i'm:3D digoal.$$::tsvector;
 tsvector
 -------------------------------------------
 'digoal.' 'hello':1B 'i''m':3 'world,':1A
PostgreSQL 全文检索
 使用to_tsvector, 可以指定不同的语言配置, 把文本根据指定的语言配置进行分词.
 例如, 使用西班牙语和英语得到的tsvector值是不一样的.
 digoal=# select to_tsvector('english', $$Hello world, I'm digoal.$$);
 to_tsvector
 --------------------------------------
 'digoal':5 'hello':1 'm':4 'world':2
 (1 row)
 digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$);
 to_tsvector
 -------------------------------------------
 'digoal':5 'hell':1 'i':3 'm':4 'world':2
 (1 row)
PostgreSQL 全文检索
 查看系统中已经安装的全文检索配置.
 digoal=# \dF *
 List of text search configurations
 Schema | Name | Description
 pg_catalog | danish | configuration for danish language
 pg_catalog | dutch | configuration for dutch language
 pg_catalog | english | configuration for english language
 pg_catalog | finnish | configuration for finnish language
 pg_catalog | french | configuration for french language
 pg_catalog | german | configuration for german language