# WebPwn：php-pwn学习
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
>
> 现在的CTF比赛，WebPwn题目越来越常见，本篇文章目标为WebPwn入门学习。将会介绍Webpwn环境搭建，以及分别以一道栈溢出题目和一道堆题，讲解Webpwn的入门知识点。
## php-pwn拓展模块
现有Webpwn题目通常为php-pwn，主要考察对php拓展模块漏洞的利用技巧。所以，题目一般会给一个php的.so文件，该文件是需要重点分析的二进制文件。其次，可能会给一个Dockerfile用于搭建php-pwn的环境。  
首先，需要安装一个本地php环境，使用如下命令：
    sudo apt install php php-dev
然后，需要下载对应版本的php源码，可在[此处下载](https://github.com/php/php-src/releases)。
在源码目录中，重点关注ext目录，该目录
包含了`php`拓展库代码。如果想编译一个自己的拓展模块，需要在该目录下进行，在该目录下使用如下命令，既可以创建一个属于自己的拓展模块工程文件：
    ./ext_skel --extname=phppwn
此时，在 `ext`目录下，即会生成一个 `phppwn`的文件夹。进入该文件夹，可以看到如下文件：
    config.m4  config.w32  CREDITS  EXPERIMENTAL  php_phppwn.h  phppwn.c  phppwn.php  tests
只需要重点 `phppwn.c`文件，该文件初始代码如下：
    /*
      +----------------------------------------------------------------------+
      | PHP Version 7                                                        |
      +----------------------------------------------------------------------+
      | Copyright (c) 1997-2018 The PHP Group                                |
      +----------------------------------------------------------------------+
      | This source file is subject to version 3.01 of the PHP license,      |
      | that is bundled with this package in the file LICENSE, and is        |
      | available through the world-wide-web at the following url:           |
      | http://www.php.net/license/3_01.txt                                  |
      | If you did not receive a copy of the PHP license and are unable to   |
      | obtain it through the world-wide-web, please send a note to          |
      | PI:EMAIL so we can mail you a copy immediately.               |
      +----------------------------------------------------------------------+
      | Author:                                                              |
      +----------------------------------------------------------------------+
    */
    /* $Id$ */
    #ifdef HAVE_CONFIG_H
    #include "config.h"
    #endif
    #include "php.h"
    #include "php_ini.h"
    #include "ext/standard/info.h"
    #include "php_phppwn.h"
    /* If you declare any globals in php_phppwn.h uncomment this:
    ZEND_DECLARE_MODULE_GLOBALS(phppwn)
    */
    /* True global resources - no need for thread safety here */
    static int le_phppwn;
    /* {{{ PHP_INI
     */
    /* Remove comments and fill if you need to have entries in php.ini
    PHP_INI_BEGIN()
        STD_PHP_INI_ENTRY("phppwn.global_value",      "42", PHP_INI_ALL, OnUpdateLong, global_value, zend_phppwn_globals, phppwn_globals)
        STD_PHP_INI_ENTRY("phppwn.global_string", "foobar", PHP_INI_ALL, OnUpdateString, global_string, zend_phppwn_globals, phppwn_globals)
    PHP_INI_END()
    */
    /* }}} */
    /* Remove the following function when you have successfully modified config.m4
       so that your module can be compiled into PHP, it exists only for testing
       purposes. */
    /* Every user-visible function in PHP should document itself in the source */
    /* {{{ proto string confirm_phppwn_compiled(string arg)
       Return a string to confirm that the module is compiled in */
    PHP_FUNCTION(confirm_phppwn_compiled)
    {
        char *arg = NULL;
        size_t arg_len, len;
        zend_string *strg;
        if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &arg, &arg_len) == FAILURE) {
            return;
        }
        strg = strpprintf(0, "Congratulations! You have successfully modified ext/%.78s/config.m4. Module %.78s is now compiled into PHP.", "phppwn", arg);
        RETURN_STR(strg);
    }
    /* }}} */
    /* The previous line is meant for vim and emacs, so it can correctly fold and
       unfold functions in source code. See the corresponding marks just before
       function definition, where the functions purpose is also documented. Please
       follow this convention for the convenience of others editing your code.
    */
    /* {{{ php_phppwn_init_globals
     */
    /* Uncomment this function if you have INI entries
    static void php_phppwn_init_globals(zend_phppwn_globals *phppwn_globals)
    {
        phppwn_globals->global_value = 0;
        phppwn_globals->global_string = NULL;
    }
    */
    /* }}} */
    /* {{{ PHP_MINIT_FUNCTION
     */
    PHP_MINIT_FUNCTION(phppwn)
    {
        /* If you have INI entries, uncomment these lines
        REGISTER_INI_ENTRIES();
        */
        return SUCCESS;
    }
    /* }}} */
    /* {{{ PHP_MSHUTDOWN_FUNCTION
     */
    PHP_MSHUTDOWN_FUNCTION(phppwn)
    {
        /* uncomment this line if you have INI entries
        UNREGISTER_INI_ENTRIES();
        */
        return SUCCESS;
    }
    /* }}} */
    /* Remove if there's nothing to do at request start */
    /* {{{ PHP_RINIT_FUNCTION
     */
    PHP_RINIT_FUNCTION(phppwn)
    {
    #if defined(COMPILE_DL_PHPPWN) && defined(ZTS)
        ZEND_TSRMLS_CACHE_UPDATE();
    #endif
        return SUCCESS;
    }
    /* }}} */
    /* Remove if there's nothing to do at request end */
    /* {{{ PHP_RSHUTDOWN_FUNCTION
     */
    PHP_RSHUTDOWN_FUNCTION(phppwn)
    {
        return SUCCESS;
    }
    /* }}} */
    /* {{{ PHP_MINFO_FUNCTION
     */
    PHP_MINFO_FUNCTION(phppwn)
    {
        php_info_print_table_start();
        php_info_print_table_header(2, "phppwn support", "enabled");
        php_info_print_table_end();
        /* Remove comments if you have entries in php.ini
        DISPLAY_INI_ENTRIES();
        */
    }
    /* }}} */
    /* {{{ phppwn_functions[]
     *
     * Every user visible function must have an entry in phppwn_functions[].
     */
    const zend_function_entry phppwn_functions[] = {
        PHP_FE(confirm_phppwn_compiled,    NULL)        /* For testing, remove later. */
        PHP_FE_END    /* Must be the last line in phppwn_functions[] */
    };
    /* }}} */
    /* {{{ phppwn_module_entry
     */
    zend_module_entry phppwn_module_entry = {
        STANDARD_MODULE_HEADER,
        "phppwn",
        phppwn_functions,
        PHP_MINIT(phppwn),
        PHP_MSHUTDOWN(phppwn),
        PHP_RINIT(phppwn),        /* Replace with NULL if there's nothing to do at request start */
        PHP_RSHUTDOWN(phppwn),    /* Replace with NULL if there's nothing to do at request end */
        PHP_MINFO(phppwn),
        PHP_PHPPWN_VERSION,
        STANDARD_MODULE_PROPERTIES
    };
    /* }}} */
    #ifdef COMPILE_DL_PHPPWN
    #ifdef ZTS
    ZEND_TSRMLS_CACHE_DEFINE()
    #endif
    ZEND_GET_MODULE(phppwn)
    #endif
    /*
     * Local variables:
     * tab-width: 4
     * c-basic-offset: 4
     * End:
     * vim600: noet sw=4 ts=4 fdm=marker
     * vim<600: noet sw=4 ts=4
     */
我们只需要在该模板代码中，加上属于我们自己的函数，以及为函数进行注册，即可完成编写一个拓展模块。
如果要添加自己的函数，可以按如下模板编写：
    PHP_FUNCTION(easy_phppwn)
    {
        char *arg = NULL;
        size_t arg_len, len;
        char buf[100];
        if(zend_parse_parameters(ZEND_NUM_ARGS(), "s", &arg, &arg_len) == FAILURE){
            return;
        }
        memcpy(buf, arg, arg_len);
        php_printf("phppwn extension function\n");
        return SUCCESS;