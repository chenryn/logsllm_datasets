are fully materialized or generated on the ﬂy during secure
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:02 UTC from IEEE Xplore.  Restrictions apply. 
GC Back End
Features
Fairplay [12]
Java-based
FastGC [33]
Java-based
ObliVM-GC
(this paper)
GraphSC [24]
(extends ObliVM-GC)
JustGarble [4]
KSS [11]
Java-based
Java-based
Parallelizable
C-based
Hardware AES-NI
Garbling only, does
not run end-to-end
Parallel execution
in malicious mode
Hardware AES-NI
Garbling Speed
≤ 30 gates/sec
96K gates/sec
670K gates/sec,
1.8M gates/sec (online)
580K gates/sec per pair of cores
1.4M gates/sec per pair of cores (online)
Bandwidth to
match compute
Adopted
by
900Bps
2.8MBps
19.6MBps
54MBps (online)
16MBps per pair of cores
41MBps per pair of cores (online)
CBMC-GC [16]
PCF [10]
SCVM [15]
ObliVM
GraphSC [24]
11M gates/sec
315MBps
TinyGarble [34]
320 gates/sec per pair of cores
2.4MBps per pair of cores
PCF [10]
TABLE I: Summary of known (2-party) Garbled Circuit back ends. The gates/sec metric refer speciﬁcally to AND gates, since
XOR gates are considered free [5]–[7]. Measurements for different papers are taken on off-the-shelf computers representative of
when each paper is written. ObliVM essentially adopts a much better architected and engineered version of FastGC [33]. The
focus of this paper is our language, programming abstractions, and compiler. It is our future work to extend JustGarle (C-based,
hardware AES-NI) to a fully working back end and integrate it with our language and compiler.
computation. Many ﬁrst-generation secure computation com-
pilers such as Fairplay [12], TASTY [13], Sharemind [9],
CBMC-GC [16], PICCO [14], KSS12 [11] generate target
code containing the fully materialized circuits. This approach
has the following drawbacks. First, the target code size and
compile time are proportional to the circuit size. That is why
some works report large compile times (e.g., 8.2 seconds for
a circuit of size 700K in KSS12 [11]). Second, the program
must be recompiled for every input data size – possibly taking
a long time again!
Newer generations of secure computation compilers (e.g.,
PCF, Wysteria, and SCVM [10], [15], [17]) employ program-
style target code instead. Program-style target code is essen-
tially a more compact intermediate representation of circuits
– fundamentally,
the succinctness comes from introducing
looping instructions in the intermediate representation, such
that the circuit need not be fully unrolled in this intermediate
representation.
The resulting program-style target code can then be se-
curely evaluated using a cryptographic protocol such as Gar-
bled Circuit or GMW. Typically these protocols perform per-
gate computation – therefore, circuits are effectively generated
on-the-ﬂy at runtime. ObliVM also adopts program-style target
code and on-the-ﬂy circuit generation. Speciﬁcally, the circuit
generation is pipelined using a well-known technique by
Huang et al. [33] such that the circuit is never materialized en-
tirely, and thus only a constant amount of working memory is
necessary. Further, we stress that on-the-ﬂy circuit generation
incurs unnoticeable cost in comparison with the time required
to compute the cryptographic protocol. In ObliVM, on-the-ﬂy
circuit generation only contributes to less than 0.1% of the
total runtime.
Finally,
in a concurrent work called TinyGarble [34],
Songhori et al. show that by partially materializing a circuit,
they can have a somewhat more global view of the circuit.
Thus they show how to borrow hardware circuit synthesis
techniques to optimize the circuit size by roughly 50% to
80% in comparison with PCF [10]. TinyGarble’s techniques
are orthogonal and complementary to this work.
ORAM support. Almost all existing secure computation
compilers, including most recent ones such as Wysteria [17],
PCF [10], and TinyGarble [34], compile dynamic memory
accesses (whose addresses depend on secret inputs) to a linear
scan of memory in the circuit representation. This is com-
pletely unscalable for big data sizes. A solution to this problem
lies in Oblivious RAM (ORAM), ﬁrst proposed by Goldreich
and Ostrovsky [40], [41]. To the best of our knowledge, the
only known compiler that provides ORAM support is our
prior work SCVM which ObliVM builds on. SCVM employs
the binary-tree ORAM [42] to implement dynamic memory
accesses. Presently, Circuit ORAM is the most efﬁcient ORAM
scheme for secure computation – and ObliVM is the ﬁrst to
offer a Circuit ORAM implementation.
Language expressiveness and formal security. Most existing
languages for secure computation are restrictive in nature.
Existing languages [10], [13]–[17] lack essential features such
as function calls and public loops inside secret-ifs. This
prevents the implementation of a large class of interesting
programs. We also offer several other new features such as na-
tive primitives, random types (with an afﬁne type system), and
generic constants that were lacking in previous languages [10],
[13]–[17].
Earlier domain-speciﬁc languages [10], [13], [14], [16] for
secure computation do not aim to offer formal security. More
recent languages such as SCVM [15] and Wysteria [17] offer
formal security through new type systems. In comparison,
Wysteria’s type system is too restrictive – for example, Wyste-
ria rejects programs with public loops and function calls inside
secret-ifs. This prevents many interesting applications – for
example, it is not feasible to implement ORAM and oblivious
data structures efﬁciently in Wysteria. On the other hand,
Wysteria supports multiple parties, and abstractions for writing
362
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:02 UTC from IEEE Xplore.  Restrictions apply. 
code generic in number of parties. Extending to multiple
parties is future work for ObliVM.
III. PROGRAMMING LANGUAGE AND COMPILER
As mentioned earlier, we wish to design a powerful source
language ObliVM-lang such that an expert programmer can
i) develop oblivious programming abstractions as libraries and
offer them to non-specialist programmers; and ii) implement
low-level circuit gadgets atop ObliVM-lang.
ObliVM-lang builds on top of the recent SCVM source
language [15] – the only known language to date that supports
ORAM abstractions, and therefore offers scalability to big
data. In this section, we will describe new features that
ObliVM-lang offers and explain intuitions behind our security
type system which is formalized in a separate manuscript [21].
As compelling applications of ObliVM-lang, in Section IV,
we give concrete case studies and show how to implement
oblivious programming abstractions and low-level circuit li-
braries atop ObliVM-lang.
A. Language features for expressiveness and efﬁciency
Security labels. Except for the new random type introduced
in Section III-B, all other variables and arrays are either of
a public or secure type. secure variables are secret-shared
between the two parties such that neither party sees the value.
public variables are observable by both parties. Arrays can
be publicly or secretly indexable. For example,
• secure int10[public 1000] keys: secret array con-
tents but indices to the array must be public. This array
will be secret shared but not placed in ORAMs.
• secure int10[secure 1000] keys: This array will be
placed in a secret-shared ORAM, and we allow secret
indices into the array.
Standard features. ObliVM-lang allows programmers to use
C-style keyword struct to deﬁne record types. It also sup-
ports generic types similar to templates in C++. For example,
a binary tree with public topological structure but secret per-
node data can be deﬁned without using pointers (assuming its
capacity is 1000 nodes):
struct KeyValueTable {
secure int10[public 1000] keys;
T[public 1000] values;
};
In the above, the type int10 means that its value is a 10-bit
signed integer. Each element in the array values has a generic
type T similar to C++ templates. ObliVM-lang assumes data
of type T to be secret-shared. In the future, we will improve
the compiler to support public generic types.
Generic constants. Besides general types, ObliVM-lang also
supports generic constants to further improve the reusability.
Let us consider the following tree example:
struct TreeNode@m {
public int@m key;
T value;
public int@m left, right;
};
struct Tree@m {
TreeNode[public (1.search(public int@m key) {
1
2
3
4
5
6
7
8
9
10
11
12
13
14
public int@m now = this.root, tk;
T ret;
while (now != -1) {
tk = this.nodes[now].key;
if (tk == key)
ret = this.nodes[now].value;
if (tk <= key)
now = this.nodes[now].right;
else
now = this.nodes[now].left;
}
return ret
};
This function is a method of a Tree object, and takes a key
as input, and returns a value of type T. The function body de-
ﬁnes three local variables now and tk of type public int@m,
and ret of type T. The deﬁnition of a local variable (e.g. now)
can be accompanied with an optional initialization expression
(e.g. this.root). When a variable (e.g. ret or tk) is not
initialized explicitly,
it
is initialized to be a default value
depending on its type.
The rest of the function is standard, C-like code, except
that ObliVM-lang requires exactly one return statement at
the bottom of a function whose return type is not void.
We highlight that ObliVM-lang allows arbitrary looping on a
public guard (e.g. line 4) without loop unrolling, which cannot
be compiled in previous loop-elimination-based work
[9],
[11]–[14], [16].
Function types. Programmers can deﬁne a variable to have
function type, similar to function pointers in C. To avoid
the complexity of handling arbitrary higher order functions,
the input and return types of a function type must not be
function types. Further, generic types cannot be instantiated
with function types.
363
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:02 UTC from IEEE Xplore.  Restrictions apply. 
Native primitives. ObliVM-lang supports native types and
native functions. For example, ObliVM-lang’s default back
end implementation is ObliVM-GC, which is implemented
in Java. Suppose an alternative BigInteger implementation in
ObliVM-GC (e.g., using additively homomorphic encryption)
is available in a Java class called BigInteger. Programmers
can deﬁne
typedef BigInt@m = native BigInteger;
Suppose that
this class supports four operations: add,
multiply, fromInt and toInt, where the ﬁrst two operations
are arithmetic operations and last two operations are used
to convert between Garbled Circuit-based integers and HE-
based integers. We can expose these to the source language
by declaring:
BigInt@m PI:EMAIL(BigInt@m x,
BigInt@m y)= native BigInteger.add;
BigInt@m BigInt@m.multiply(BigInt@m x,
= BigInt@m y) native BigInteger.multiply;
BigInt@m BigInt@m.fromInt(int@m y)
= native BigInteger.fromInt;
int@m PI:EMAIL(BigInt@m y)
= native BigInteger.toInt;
B. Language features for security
The key requirement of ObliVM-lang is that a program’s
execution traces will not leak information. These execution
traces include a memory trace, an instruction trace, a function
stack trace, and a declassiﬁcation trace. The trace deﬁnitions
are similar to Liu et al. [15]. We develop a security type system
for ObliVM-lang.
Liu et al. [15] has discussed how to prevent memory traces
and instruction traces from leaking information. We explain
the basic ideas of ObliVM-lang’s type system concerning
functions and declassiﬁcations, but defer a formal discussion
to a separate manuscript [21].
Random numbers and implicit declassiﬁcations. Many
oblivious programs such as ORAM and oblivious data struc-
tures crucially rely on randomness. In particular, their obliv-
iousness guarantee has the following nature: the joint dis-
tribution of memory traces is identical regardless of secret
inputs (these algorithms typically have a cryptographically
negligible probability of correctness failure). ObliVM-lang
supports reasoning of such “distributional” trace-obliviousness
by providing random types associated with an afﬁne type sys-
tem. For instance, rnd32 is the type of a 32-bit random integer.
A random number will always be secret-shared between the
two parties.
To generate a random number, there is a built-in function
RND with the following signature:
rnd@m RND(public int32 m)
This function takes a public 32-bit integer m as input, and
returns m random bits. Note that rnd@m is a dependent type,
whose type depends on values, i.e. m. To avoid the complexity
of handling general dependent types, the ObliVM-lang com-
piler restricts the usage of dependent types to only this built-in
function, and handles it specially.
In our ObliVM framework, outputs of a computation can be
explicitly declassiﬁed with special syntax. Random numbers
364
are allowed implicit declassiﬁcation – by assigning them to
public variables. Here “implicitness” means that the declassi-
ﬁcation happens not because this is a speciﬁed outcome of the
computation.
For security, we must ensure that each random number is
implicitly declassiﬁed at most once for the following reason.
When implicitly declassifying a random number, both parties
observe the random number as part of the trace. Now consider
the following example where s is a secret variable.
1
2
3
4
rnd32 r1 = RND(32), r2= RND(32);
public int32 z;
if (s) z = r1; // implicit declass
else z = r2; // implicit declass
. . . . . .
XX public int32 y = r2; // NOT OK
In this program, random variables r1 and r2 are initialized
in Line 1 – these variables are assigned a fresh, random value
upon initialization. Up to Line 4 , random variables r1 and r2
are each declassiﬁed no more than once. Line XX, however,
could potentially cause r2 to be declassiﬁed more than once.
Line XX clearly is not secure since in this case the observable
public variable y and z could be correlated – depending on
which secret branch was taken earlier.
Therefore, we use an afﬁne type system to ensure that each
random variable is implicitly declassiﬁed at most once. This
way, each time a random variable is implicitly declassiﬁed,
it will
introduce a independently uniform variable to the
observable trace. In our security proof, a simulator can just