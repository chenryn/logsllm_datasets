    [52]             : 4 [Type: unsigned long]
    [60]             : 11 [Type: unsigned long]
    [68]             : 6 [Type: unsigned long]
    [76]             : 13 [Type: unsigned long]
    [84]             : 3 [Type: unsigned long]
    [92]             : 16 [Type: unsigned long]
    [100]            : 19 [Type: unsigned long]
    [108]            : 2 [Type: unsigned long]
    [116]            : 1 [Type: unsigned long]
    [124]            : 2 [Type: unsigned long]
    [132]            : 2 [Type: unsigned long]
    [140]            : 3 [Type: unsigned long]
    [148]            : 2 [Type: unsigned long]
    [156]            : 1 [Type: unsigned long]
    [164]            : 1 [Type: unsigned long]
Asynchronous procedure call interrupts
Asynchronous procedure calls (APCs) provide a way for user programs and
system code to execute in the context of a particular user thread (and hence a
particular process address space). Because APCs are queued to execute in the
context of a particular thread, they are subject to thread scheduling rules and
do not operate within the same environment as DPCs—namely, they do not
operate at DISPATCH_LEVEL and can be preempted by higher priority
threads, perform blocking waits, and access pageable memory.
That being said, because APCs are still a type of software interrupt, they
must somehow still be able to wrangle control away from the thread’s
primary execution path, which, as shown in this section, is in part done by
operating at a specific IRQL called APC_LEVEL. This means that although
APCs don’t operate under the same restrictions as a DPC, there are still
certain limitations imposed that developers must be wary of, which we’ll
cover shortly.
APCs are described by a kernel control object, called an APC object. APCs
waiting to execute reside in one of two kernel-managed APC queues. Unlike
the DPC queues, which are per-processor (and divided into threaded and
nonthreaded), the APC queues are per-thread—with each thread having two
APC queues: one for kernel APCs and one for user APCs.
When asked to queue an APC, the kernel looks at the mode (user or
kernel) of the APC and then inserts it into the appropriate queue belonging to
the thread that will execute the APC routine. Before looking into how and
when this APC will execute, let’s look at the differences between the two
modes. When an APC is queued against a thread, that thread may be in one
of the three following situations:
■    The thread is currently running (and may even be the current thread).
■    The thread is currently waiting.
■    The thread is doing something else (ready, standby, and so on).
First, you might recall from Part 1, Chapter 4, “Thread scheduling,” that a
thread has an alertable state whenever performing a wait. Unless APCs have
been completely disabled for a thread, for kernel APCs, this state is ignored
—the APC always aborts the wait, with consequences that will be explained
later in this section. For user APCs however, the thread is interrupted only if
the wait was alertable and instantiated on behalf of a user-mode component
or if there are other pending user APCs that already started aborting the wait
(which would happen if there were lots of processors trying to queue an APC
to the same thread).
User APCs also never interrupt a thread that’s already running in user
mode; the thread needs to either perform an alertable wait or go through a
ring transition or context switch that revisits the User APC queue. Kernel
APCs, on the other hand, request an interrupt on the processor of the target
thread, raising the IRQL to APC_LEVEL, notifying the processor that it must
look at the kernel APC queue of its currently running thread. And, in both
scenarios, if the thread was doing “something else,” some transition that
takes it into either the running or waiting state needs to occur. As a practical
result of this, suspended threads, for example, don’t execute APCs that are
being queued to them.
We mentioned that APCs could be disabled for a thread, outside of the
previously described scenarios around alertability. Kernel and driver
developers can choose to do so through two mechanisms, one being to
simply keep their IRQL at APC_LEVEL or above while executing some
piece of code. Because the thread is in a running state, an interrupt is
normally delivered, but as per the IRQL rules we’ve explained, if the
processor is already at APC_LEVEL (or higher), the interrupt is masked out.
Therefore, it is only once the IRQL has dropped to PASSIVE_LEVEL that the
pending interrupt is delivered, causing the APC to execute.
The second mechanism, which is strongly preferred because it avoids
changing interrupt controller state, is to use the kernel API
KeEnterGuardedRegion, pairing it with KeLeaveGuardedRegion when you
want to restore APC delivery back to the thread. These APIs are recursive
and can be called multiple times in a nested fashion. It is safe to context
switch to another thread while still in such a region because the state updates
a field in the thread object (KTHREAD) structure—SpecialApcDisable and
not per-processor state.
Similarly, context switches can occur while at APC_LEVEL, even though
this is per-processor state. The dispatcher saves the IRQL in the KTHREAD
using the field WaitIrql and then sets the processor IRQL to the WaitIrql of
the new incoming thread (which could be PASSIVE_LEVEL). This creates an
interesting scenario where technically, a PASSIVE_LEVEL thread can
preempt an APC_LEVEL thread. Such a possibility is common and entirely
normal, proving that when it comes to thread execution, the scheduler
outweighs any IRQL considerations. It is only by raising to
DISPATCH_LEVEL, which disables thread preemption, that IRQLs
supersede the scheduler. Since APC_LEVEL is the only IRQL that ends up
behaving this way, it is often called a thread-local IRQL, which is not
entirely accurate but is a sufficient approximation for the behavior described
herein.
Regardless of how APCs are disabled by a kernel developer, one rule is
paramount: Code can neither return to user mode with the APC at anything
above PASSIVE_LEVEL nor can SpecialApcDisable be set to anything but 0.
Such situations result in an immediate bugcheck, typically meaning some
driver has forgotten to release a lock or leave its guarded region.
In addition to two APC modes, there are two types of APCs for each mode
—normal APCs and special APCs—both of which behave differently
depending on the mode. We describe each combination:
■    Special Kernel APC This combination results in an APC that is
always inserted at the tail of all other existing special kernel APCs in
the APC queue but before any normal kernel APCs. The kernel
routine receives a pointer to the arguments and to the normal routine
of the APC and operates at APC_LEVEL, where it can choose to
queue a new, normal APC.
■    Normal Kernel APC This type of APC is always inserted at the tail
end of the APC queue, allowing for a special kernel APC to queue a
new normal kernel APC that will execute soon thereafter, as described
in the earlier example. These kinds of APCs can not only be disabled
through the mechanisms presented earlier but also through a third API
called KeEnterCriticalRegion (paired with KeLeaveCriticalRegion),
which updates the KernelApcDisable counter in KTHREAD but not
SpecialApcDisable.
■    These APCs first execute their kernel routine at APC_LEVEL,
sending it pointers to the arguments and the normal routine. If the
normal routine hasn’t been cleared as a result, they then drop the
IRQL to PASSIVE_LEVEL and execute the normal routine as well,
with the input arguments passed in by value this time. Once the
normal routine returns, the IRQL is raised back to APC_LEVEL
again.
■    Normal User APC This typical combination causes the APC to be
inserted at the tail of the APC queue and for the kernel routine to first
execute at APC_LEVEL in the same way as the preceding bullet. If a
normal routine is still present, then the APC is prepared for user-
mode delivery (obviously, at PASSIVE_LEVEL) through the creation
of a trap frame and exception frame that will eventually cause the
user-mode APC dispatcher in Ntdll.dll to take control of the thread
once back in user mode, and which will call the supplied user pointer.
Once the user-mode APC returns, the dispatcher uses the NtContinue
or NtContinueEx system call to return to the original trap frame.
■    Note that if the kernel routine ended up clearing out the normal
routine, then the thread, if alerted, loses that state, and, conversely, if
not alerted, becomes alerted, and the user APC pending flag is set,
potentially causing other user-mode APCs to be delivered soon. This
is performed by the KeTestAlertThread API to essentially still behave
as if the normal APC would’ve executed in user mode, even though
the kernel routine cancelled the dispatch.
■    Special User APC This combination of APC is a recent addition to
newer builds of Windows 10 and generalizes a special dispensation
that was done for the thread termination APC such that other
developers can make use of it as well. As we’ll soon see, the act of
terminating a remote (noncurrent) thread requires the use of an APC,
but it must also only occur once all kernel-mode code has finished
executing. Delivering the termination code as a User APC would fit
the bill quite well, but it would mean that a user-mode developer
could avoid termination by performing a nonalertable wait or filling
their queue with other User APCs instead.
To fix this scenario, the kernel long had a hard-coded check to validate if the
kernel routine of a User APC was KiSchedulerApcTerminate. In this
situation, the User APC was recognized as being “special” and put at the
head of the queue. Further, the status of the thread was ignored, and the “user
APC pending” state was always set, which forced execution of the APC at
the next user-mode ring transition or context switch to this thread.
This functionality, however, being solely reserved for the termination code
path, meant that developers who want to similarly guarantee the execution of
their User APC, regardless of alertability state, had to resort to using more
complex mechanisms such as manually changing the context of the thread
using SetThreadContext, which is error-prone at best. In response, the
QueueUserAPC2 API was created, which allows passing in the
QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC flag, officially
exposing similar functionality to developers as well. Such APCs will always
be added before any other user-mode APCs (except the termination APC,
which is now extra special) and will ignore the alertable flag in the case of a
waiting thread. Additionally, the APC will first be inserted exceptionally as a
Special Kernel APC such that its kernel routine will execute almost
instantaneously to then reregister the APC as a special user APC.
Table 8-9 summarizes the APC insertion and delivery behavior for each
type of APC.
Table 8-9 APC insertion and delivery
A
P
C 
Ty
pe
Inser
tion 
Beha
vior
Delivery Behavior
Sp
eci
al 
(k
er
nel
)
Insert
ed 
right 
after 
the 
last 
specia
l APC 
(at 
the 
head 
of all 
other 
norm
al 
APCs
)
Kernel routine delivered at APC level as soon as IRQL 
drops, and the thread is not in a guarded region. It is 
given pointers to arguments specified when inserting the 
APC.
No
rm
al 
(k
er
nel
)
Insert
ed at 
the 
tail of 
the 
kernel
-
mode 
APC 
list
Kernel routine delivered at APC_LEVEL as soon as IRQL 
drops, and the thread is not in a critical (or guarded) 
region. It is given pointers to arguments specified when 
inserting the APC. Executes the normal routine, if any, at 
PASSIVE_LEVEL after the associated kernel routine was 
executed. It is given arguments returned by the associated 
kernel routine (which can be the original arguments used 
during insertion or new ones).
No
rm
al 
(us
er)
Insert
ed at 
the 
tail of 
the 
user-
mode 
APC 
Kernel routine delivered at APC_LEVEL as soon as IRQL 
drops and the thread has the “user APC pending” flag set 
(indicating that an APC was queued while the thread was 
in an alertable wait state). It is given pointers to 
arguments specified when inserting the APC. Executes 
the normal routine, if any, in user mode at 
PASSIVE_LEVEL after the associated kernel routine is 
executed. It is given arguments returned by the associated 
list
kernel routine (which can be the original arguments used 
during insertion or new ones). If the normal routine was 
cleared by the kernel routine, it performs a test-alert 
against the thread.
Us
er 
Th
rea
d 
Te
rm
ina
te 
A
PC 
(K
iSc
he
du
ler
Ap
cT
er
mi
na
te)
Insert
ed at 
the 
head 
of the 
user-
mode 
APC 
list
Immediately sets the “user APC pending” flag and 
follows similar rules as described earlier but delivered at 
PASSIVE_LEVEL on return to user mode, no matter 
what. It is given arguments returned by the thread-
termination special APC.
Sp
eci
al 
(us
er)
Insert
ed at 
the 
head 
of the 
user-
mode 
APC 
Same as above, but arguments are controlled by the caller 
of QueueUserAPC2 (NtQueueApcThreadEx2). Kernel 
routine is internal KeSpecialUserApcKernelRoutine 
function that re-inserts the APC, converting it from the 
initial special kernel APC to a special user APC.
list 
but 
after 
the 
thread 
termi
nates 
APC, 
if 
any.
The executive uses kernel-mode APCs to perform operating system work
that must be completed within the address space (in the context) of a
particular thread. It can use special kernel-mode APCs to direct a thread to
stop executing an interruptible system service, for example, or to record the
results of an asynchronous I/O operation in a thread’s address space.
Environment subsystems use special kernel-mode APCs to make a thread
suspend or terminate itself or to get or set its user-mode execution context.
The Windows Subsystem for Linux (WSL) uses kernel-mode APCs to
emulate the delivery of UNIX signals to Subsystem for UNIX Application
processes.
Another important use of kernel-mode APCs is related to thread
suspension and termination. Because these operations can be initiated from
arbitrary threads and directed to other arbitrary threads, the kernel uses an
APC to query the thread context as well as to terminate the thread. Device
drivers often block APCs or enter a critical or guarded region to prevent
these operations from occurring while they are holding a lock; otherwise, the
lock might never be released, and the system would hang.
Device drivers also use kernel-mode APCs. For example, if an I/O
operation is initiated and a thread goes into a wait state, another thread in
another process can be scheduled to run. When the device finishes
transferring data, the I/O system must somehow get back into the context of
the thread that initiated the I/O so that it can copy the results of the I/O
operation to the buffer in the address space of the process containing that
thread. The I/O system uses a special kernel-mode APC to perform this
action unless the application used the SetFileIoOverlappedRange API or I/O
completion ports. In that case, the buffer will either be global in memory or
copied only after the thread pulls a completion item from the port. (The use
of APCs in the I/O system is discussed in more detail in Chapter 6 of Part 1.)
Several Windows APIs—such as ReadFileEx, WriteFileEx, and
QueueUserAPC—use user-mode APCs. For example, the ReadFileEx and
WriteFileEx functions allow the caller to specify a completion routine to be
called when the I/O operation finishes. The I/O completion is implemented
by queuing an APC to the thread that issued the I/O. However, the callback
to the completion routine doesn’t necessarily take place when the APC is
queued because user-mode APCs are delivered to a thread only when it’s in
an alertable wait state. A thread can enter a wait state either by waiting for
an object handle and specifying that its wait is alertable (with the Windows
WaitForMultipleObjectsEx function) or by testing directly whether it has a