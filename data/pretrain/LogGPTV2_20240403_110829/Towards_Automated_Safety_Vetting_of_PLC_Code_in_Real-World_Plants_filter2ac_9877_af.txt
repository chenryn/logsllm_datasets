SMART
SMART
Fischer.
Fischer.
Fischer.
Fischer.
Fischer.
Safety SpeciÔ¨Åcation to Avoid Hazard
(cid:3)tx.(Pallet ‚Üí ‚ô¶ty.(Retract Stopper ‚àß ty ‚àí tx ‚â§ 30s))
(cid:3)tx.(¬¨Safe Zone ‚Üí ‚ô¶ty.(Safe Zone ‚àß ty ‚àí tx ‚â§ 60s))
Robot fails to return its safe zone.
(cid:3)tx.(Pallet ‚Üí ‚ô¶ty.(Retract Stopper ‚àß ty ‚àí tx ‚â§ 30s))
Robot stops processing parts from conveyor due to signal conÔ¨Çicts.
(cid:3)(Pallet AtGate ‚Üí (cid:3)Gate Open)
A pallet collides with a closed gate.
(cid:3)tx.(Part In ‚Üí ‚ô¶ty.(Part Out ‚àß ty ‚àí tx ‚â§ 5m))
CNC stops processing parts from gantry due to missing signals.
(cid:3)(Part Entering ‚Üí ¬¨‚ô¶Ram Push)
A ram starts pushing when a part has not fully entered the ram.
A part is passed to CNC when a preceding part is not fully discharged. (cid:3)(CNC Busy ‚Üí ¬¨‚ô¶Part Arrival)
(cid:3)tx.(Part Arrival ‚Üí ‚ô¶ty.(Part Arrival ‚àß ty ‚àí tx ‚â§ 6s))
Parts are pushed to conveyor prematurely.
(cid:3)tx.(Part Arrival ‚Üí ‚ô¶ty.(Part Arrival ‚àß ty ‚àí tx ‚â• 8.5s))
A conveyor belt halts operation.
(cid:3)(Part Entering ‚Üí (cid:3)Ram Ready)
Ram1 pushes a part to unprepared Ram2.
PLC source code, regardless of whether they are introduced
by developers or malicious logic injected by insiders.
In addition, we notice that a Ô¨Åner-grained time discretization
may lead to a more precise error-triggering (speed range) con-
straints. For instance, for Scenario #8, the sequences produced
by VETPLC-TSEQS-5 reveal that a push ram at speeds from
1714 to 2000 rpm can cause errors, while those of VETPLC-
TSEQS-2 only indicate that it malfunctions at the minimum
speed of 1714 rpm. Some cases, such as Scenario #7, may
include multiple machines with variable speeds, and thus we
compute the error-triggering ranges individually.
Nevertheless, the precision improvement of speed ranges
comes at a price. As we discretize time into more factions, the
amount of event sequences also grows signiÔ¨Åcantly. Figure 6
illustrates that, compared to ALLSEQS, VETPLC-TSEQS-2,
VETPLC-TSEQS-5 and VETPLC-TSEQS-10 on average yield
38%, 93% and 226% of sequences, respectively. Nonetheless,
the increase of time fractions does not always lead to an
improvement of error ranges. The difference between TSEQS-
5 and TSEQS-10 is not as signiÔ¨Åcant as that between TSEQS-2
and TSEQS-5. Yet the increase of permutations for TSEQS-10
is drastic. As a result, empirically, we can see that TSEQS-5
strikes a balance between efÔ¨Åciency and precision.
C. Case Study
We perform case studies on two scenarios. The study on
Scenario #2 is presented here while the study on Scenario #7
is elaborated in Appendix G.
Scenario Description. Scenario #2 depicts the interaction
among a PLC, a robot and a CNC in Cell 2. Here, the robot
carries a part into CNC cabinet, places it on CNC table and
moves out. It then pauses at a temporary position and waits for
further instructions from PLC. Normally, CNC senses a part‚Äôs
arrival from its table and notiÔ¨Åes the PLC of the receipt. Then,
the PLC signals the robot, allowing it to return to its safe zone,
while the CNC begins to process the part.
Timed Event Causality Graph. Figure 7 illustrates the
TECG constructed from PLC, robot and CNC (slave PLC)
code. The causal relation between Deliver Part to CNC
and Part Delivered indicates the request and response
between PLC and robot. The duration of Part Present
extracted from CNC code is 1 second. However, the controller
code cannot reveal the implicit relation between PLC sending
a request to robot and CNC receiving a part, because the PLC
does not directly send commands to the CNC. Fortunately,
VETPLC can recover this dependency via invariant mining
and thus introduce a new edge Deliver Part to CNC ‚Üí
Part AtTable, depicted by the bold line. Besides, data
mining also discovers the robot delivery time, corresponding
to Robot Start
‚àí‚àí‚àí‚àí‚àí‚àí‚Üí Robot Standby.
[0.5s,6.6s]
Automated Safety Vetting. TECG helps reduce the amount
of possible event permutations from 13700 to 446. We further
obtain 2366, 8846 and 29246 timed sequences for TSEQS-
2, TSEQS-5, TSEQS-10, respectively. Using these timed se-
quences to exercise the PLC code, we discover a safety
violation that the robot, running at certain speeds, cannot
return to its safe zone. Particularly, TSEQS-5 can provide
a relatively precise error-triggering range [250 mm/sec, 959
mm/sec] with a relatively low time cost (8846 permutations).
Root Cause. This problem is caused by event timings and
thus is not revealed by ordering-based sequences. Since Part -
Present only lasts for 1 second, when PLC receives Part -
Delivered from the robot, the former event may have already
terminated. Then, PLC will not permit the robot to move back
due to missing necessary signals. Such a problem can only be
observed when the robot speed falls into the discovered range.
Security Implication. Our analysis results do not auto-
matically infer the intent of safety violations, but they do
serve as contextual evidence that can help investigators draw
correct conclusions. Prior work [38] has indicated that attacks
are likely to be triggered under very narrow conditions (e.g.,
logic bombs) to evade detection; Stuxnet [36] code injected by
insiders runs only when the target system operates between
807 Hz and 1210 Hz ‚Äì a unique frequency range used for
nuclear centrifuges. Hence, if the vulnerabilities are injected
by insiders, VETPLC must Ô¨Ånd their narrow triggering ranges.
Otherwise, we must not provide a misleading result implying
the error can happen only when robot runs at very low speed
[250 mm/s, 465 mm/s] or its highest speed 3300 mm/s.
Instead, we must discover a precise error-trigger range, e.g.,
[250 mm/s, 959 mm/s] for robot speed.
D. Runtime Performance
It
takes on average 203s to construct graphs for one
scenario. The computation time is acceptable because our
analyses are designed to be straightforward and real-world
PLC code is not very complex. The runtime of trace-based
veriÔ¨Åcation is proportional to the number of testing sequences,
and thus is comparable to that of ALLSEQS, while each run
takes approximately 55 seconds.
VIII. DISCUSSION
Scalability. Our testbeds are smaller in size, but
they
accurately represent certain plants that manufacture speciÔ¨Åc
products. For instance, a small-scale plant, such as an aircraft
seating factory consisting of 20 CNCs, often organizes its
(cid:22)(cid:20)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
ALLSEQS VETPLC-SEQS
#
1
2
3
4
5
6
7
8
9
10
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
Fig. 6: No. of Event Sequences
	
	

 




	


	
	

 	
	

	




	

	






	




	






Fig. 7: A TECG of Case #2 (Robot in Danger Zone)
CNCs into multiple serial cells where up to 6 parallel machines
work in the same cell on the same workloads. Thus, the
amount of manufacturing steps and data communication in
such a factory is comparable to that of ours. We admit that
once a manufacturing system is scaled up, more computation
power will be required to conduct our analysis and data
mining. To address this challenge, one possible solution is
to take advantage of the inherent parallelism to scale the
computation. Due to the hierarchical architecture of factory
Ô¨Çoors, it is possible to divide an entire plant into multiple
relatively independent groups, each of which can be analyzed
individually. The summarized results of individual groups can
be combined to carry out an analysis of the entire factory.
SpeciÔ¨Åc Challenges to PLC Code Analysis. When com-
pared to analyzing programs in other domains (e.g., Android
apps, web programs), the analysis of PLC code is inherently
unique due to three reasons. (a) PLC code controls multiple
types of customized hardware constrained by unique phys-
ical limits. (b) PLC software follows a unique programming
paradigm due to the introduction of PLC scan cycles. (c) Most
importantly, PLC events are highly time-sensitive, due to the
physical nature of machines. Such time sensitivity is the exact
cause of certain safety problems discovered in our work.
IX. RELATED WORK
Safety VeriÔ¨Åcation of PLC Code. Many prior efforts [24],
[28], [30], [31], [42], [44], [57], [58], [61], [63], [65] have been
made to statically verify logic code using model checkers [15],
[21]. Further efforts have also been made to conduct runtime
veriÔ¨Åcation in an online [39], [45] or ofÔ¨Çine manner [35], [62].
More recently, symbolic execution [43], [54] has been enabled
on PLC code. While TSV [54] conducted static symbolic
execution on its temporal execution graphs, SymPLC [43]
leveraged OpenPLC [16] framework and Cloud9 engine [4]
to conduct dynamic analysis. In contrast, VETPLC aims to
verify real-world PLC code, which is driven by events.
VETPLC-TSEQS-2
Robot:[250,465]
Robot:[465,465]
Robot:[250,467]
VETPLC-TSEQS-5
Robot:[550,3300]
Robot:[250,959]
Robot:[307,959]
Robot:[250,399]
Robot:[550,3300]
Ram:[1714,2000]
VETPLC-TSEQS-10
Robot:[550,3300]
Y Robot:[3300,3300] Y
Robot:[250,1486]
Y
Y
Robot:[275,1486]
Y
Y
Robot:[250,467]
Y
Y
Robot:[550,3300]
Y Robot:[3300,3300] Y
Ram:[1714,2000]
Y
Y
Y CNC1:[3273,6000] Y CNC1:[2571,6000] Y CNC1:[2571,6000]
CNC2:[1714,4000]
Ram:[1714,2000]
Ram:[2000,6000]
Ram:[2000,6000]
Ram:[1714,1714]
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
N
N
N
CNC2:[1714,2667]
Ram:[1714,1714]
Ram:[2667,6000]
Ram:[2667,6000]
CNC2:[1714,4000]
Ram:[1714,2000]
Ram:[2400,6000]
Ram:[2000,6000]
TABLE IV: Detection Results
Mining Temporal Invariants. Synoptic [29] and Per-
fume [60] extracted temporal
invariants from conventional
system logs via data mining. Different from OS events, ICS
events are created by distributed sources on the factory Ô¨Çoor
and are difÔ¨Åcult to obtain. Recently, ARTINALI [25] mined
temporal properties from smart meters and medical devices to
enable intrusion detection. To detect anomalies in ICS, Chen
et al. [33] managed to learn invariants from data traces of
a water puriÔ¨Åcation testbed. As a comparison, VETPLC also
mines ICS invariants but addresses a different problem.
Exercising Event-Driven Programs. Anand et al. [27] pro-
posed to generate GUI event sequences based upon concolic
testing. Mirzaei et al. [55] correlated events with their handlers
for generating Android-speciÔ¨Åc drivers. AppIntent [67] relied
on Android lifecycle model to produce event-space constraint