    }
    void test(int a, int b)
    {
        int c =a+b+0x666;
    }
如上所示源码转换成IR后，main函数如下
    ; Function Attrs: argmemonly nounwind
    declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1
    declare dso_local i32 @printf(i8*, ...) #2
    declare dso_local i32 @read(...) #2
    declare dso_local i32 @puts(i8*) #2
    @.str = private unnamed_addr constant [24 x i8] c"hello!\0Ainput your name:\00", align 1
    ; Function Attrs: noinline nounwind optnone uwtable
    define dso_local i32 @main() #0 
    {
      %1 = alloca i32, align 4
      %2 = alloca [16 x i8], align 16
      %3 = alloca i32, align 4
      %4 = alloca i32, align 4
      store i32 0, i32* %1, align 4
      %5 = bitcast [16 x i8]* %2 to i8*
      call void @llvm.memset.p0i8.i64(i8* align 16 %5, i8 0, i64 16, i1 false)
      store i32 32, i32* %3, align 4
      %6 = load i32, i32* %3, align 4
      %7 = add nsw i32 %6, 256
      %8 = add nsw i32 %7, 512
      store i32 %8, i32* %4, align 4
      %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0))
      %10 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i32 0, i32 0
      %11 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i8*, i32, ...)*)(i32 0, i8* %10, i32 16)
      %12 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i32 0, i32 0
      %13 = call i32 @puts(i8* %12)
      ret i32 0
    }
test函数如下
    ; Function Attrs: noinline nounwind optnone uwtable
    define dso_local void @test(i32, i32) #0 
    {
      %3 = alloca i32, align 4
      %4 = alloca i32, align 4
      %5 = alloca i32, align 4
      store i32 %0, i32* %3, align 4
      store i32 %1, i32* %4, align 4
      %6 = load i32, i32* %3, align 4
      %7 = load i32, i32* %4, align 4
      %8 = add nsw i32 %6, %7
      %9 = add nsw i32 %8, 1638
      store i32 %9, i32* %5, align 4
      ret void
    }
全局变量用`unnamed_addr`来标记，表示地址不重要，只有内容
`nsw` 是“No Signed Wrap”缩写，是一种无符号值运算的标识
`nuw` 是“ No Unsigned Wrapp”缩写，是一种有符号值运算的标识
`bitcast ... to ..`是类型转换指令，可以在不修改数据的前提下转换数据类型
例如，上面的`%5 = bitcast [16 x i8]* %2 to i8*`
意思是把变量%2(原本的类型是一个指向16字节的数组指针) 转换为一个指向字符的指针，然后%5存储转换后的指针
函数或者变量用`dso_local`标记，表示解析为同一链接单元中的符号， 即使定义不在此编译单元内，也会直接访问
使用`define`定义函数时，遵守以下定义规则：
    define [linkage] [PreemptionSpecifier] [visibility] [DLLStorageClass]
           [cconv] [ret attrs]
            @ ([argument list])
           [(unnamed_addr|local_unnamed_addr)] [AddrSpace] [fn Attrs]
           [section "name"] [comdat [($name)]] [align N] [gc] [prefix Constant]
           [prologue Constant] [personality Constant] (!name !N)* { ... }
参数列表是逗号分隔的参数序列，其中每个参数遵守以下规则
     [parameter Attrs] [name]
其中<>中为必填项，[]中为可选项
更多IR语法可参考： 
，这个页面非常大，可以通过最开头的目录快速找到相应IR指令的语法
# pass
LLVM的优化即对中间代码IR优化，由多个Pass来完成，每个Pass完成特定的优化工作。
可以分组比如像 clang命令的参数如-O2，-O3, -O4等。
Pass即为一层一层相互独立的IR优化器。可以做到代码优化，代码混淆等  
pass一般有以下几种分类
这里首先需要了解几个概念:
Module, Function, BasicBlock, Instruction, Value
  * Module: 包含 Function，简单的说就是一个.c或者.cpp文件的集合，它包含了许多的function，main就是其中一种
  * Function：包含若干 BasicBlock，也就是一个函数里面会有很多的代码嘛，每一段顺序执行的代码都是一个BasicBlock
  * BasicBlock：包含若干 Instruction，也就是包含若干个汇编层指令了，想add啊sub啊之类的
  * Instruction: 具体到每一个指令，就保护了若干个opcode，或者说value
  * 指令的格式一般为： 操作符+操作数
为了直观的体现出pass的作用，这里举个例子，编写一些简单的pass
    mkdir outpass
    cd outpass
    mkdir print_pass
在outpass文件夹中创建一个CMakeLists.txt文件，内容为以下：
    cmake_minimum_required(VERSION 3.4)
    set(ENV{LLVM_DIR} ~/LLVM/bulid/lib/cmake/llvm) #这里设置LLVM_DIR变量为前面编译安装llvm的build目录下的/lib/cmake/llvm
    find_package(LLVM REQUIRED CONFIG)
    add_definitions(${LLVM_DEFINITIONS})
    include_directories(${LLVM_INCLUDE_DIRS})
    link_directories(${LLVM_LIBRARY_DIRS})
    # add c++ 14 to solve "error: unknown type name 'constexpr'"
    add_compile_options(-std=c++14)
    add_subdirectory(Print_FuncPass)  # Use your pass name here.
然后cd print_pass，再创建一个CMakeLists.txt文件，内容为以下：
    add_library(PrintFunctions MODULE
      #这里填写pass文件名
      Print_FuncPass.cpp
    )
    # LLVM is (typically) built with no C++ RTTI. We need to match that;
    # otherwise, we'll get linker errors about missing RTTI data.
    set_target_properties(PrintFunctions PROPERTIES
      COMPILE_FLAGS "-fno-rtti"
    )
    # Get proper shared-library behavior (where symbols are not necessarily
    # resolved when the shared library is linked) on OS X.
    if(APPLE)
      set_target_properties(PrintFunctions PROPERTIES
        LINK_FLAGS "-undefined dynamic_lookup"
      )
    endif(APPLE)
最后就是编写pass了，pass本质上也是一个c++，创建Print_FuncPass.cpp，内容如下
    #include "llvm/Pass.h"
    #include "llvm/IR/Function.h"
    #include "llvm/Support/raw_ostream.h"
    #include "llvm/IR/LegacyPassManager.h"
    #include "llvm/Transforms/IPO/PassManagerBuilder.h"
    using namespace llvm;
    namespace {
        struct Hello : public FunctionPass
        {
            static char ID;
            Hello() : FunctionPass(ID) {}
            virtual bool runOnFunction(Function &F)
            {
                //输出当前调用的函数名
                errs()  X("print_func", "print func name PASS",
                                false /* Only looks at CFG */,
                                false /* Analysis Pass */);
    //注册到 opt 中,通过 opt -print_func 来使用该pass，第一个参数用于命令行，第二个参数是说明该pass的作用，第三个参数用于cfg时才需要true，第四个参数用于分析pass的时候才需要true
    static RegisterStandardPasses Y(
        PassManagerBuilder::EP_EarlyAsPossible,
        [](const PassManagerBuilder &Builder,
            legacy::PassManagerBase &PM) { PM.add(new Hello()); });
    //注册到标准编译流程中，默认会执行该pass，通过 clang 即可调用pass，如果不进行RegisterStandardPasses注册，则clang无法调用pass，只能通过opt
这个pass的作用是每次调用一个函数，就会输出其函数的名字
pass编写完了，就直接编译
在outpass目录下执行：
cmkae .
make
编译完成后会生成一个.so文件，接下来就需要一个test.c来验证pass的效果
在outpass目录编写一个test.c
    #include 
    int func2()
    {
        int a,b =1;
        return a+b;
    }
    int func1()
    {
        int a,b =1;
        func2();
        return a+b;
    }
    int main()
    {
        func1();
        return 0;
    }
最后就调用pass作用在这个test.c了，有两种方式
**一、直接使用clang**
`clang -Xclang -load -Xclang ./outpass/Print_FuncPass/libPrintFunctions.so
./test.c`
输出如图
**二、使用opt**
首先要用clang生成.bc文件
`clang -emit-llvm -c ./test.c`
然后再使用opt
`opt -load ./outpass/Print_FuncPass/libPrintFunctions.so -print_func 
GitHub：
官方历史版本下载页面： 
llvm中文文档网： 