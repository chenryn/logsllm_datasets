U, the friendship,1 or a group g ∈ G, that is, ac ∈ U∪{f riendOf}∪
G . Let tl be a trust level, which is a rational number in the range
[0,1], assigned to ac. And let at ∈ {U N; F S; GN} be the type of
the accessor (user name, friendship, and group name, respectively).
The accessor speciﬁcation is deﬁned as a set, {a1; : : : ; an}, where
each element is a 3-tuple .
Data Speciﬁcation: In the context of OSNs, user data is composed
of three types of information. User proﬁle describes who a user is
in the OSN, including identity and personal information, such as
name, birthday, interests and contact information. User friendship
shows who a user knows in the OSN, including a list of friends to
represent connections with family, coworkers, colleagues, and so
on. User content indicates what a user has in the OSN, including
photos, videos, statues, and all other data objects created through
various activities in the OSN.
Again, to facilitate effective resolution of privacy conﬂicts for
collaborative privacy control, we introduce sensitivity levels for
data speciﬁcation, which are assigned by the controllers to the shared
data. The users’ judgment of the sensitivity levels of the data is not
binary (private/public), but multi-dimensional with varying degrees
of sensitivity. Formally, the data speciﬁcation is deﬁned as follows:
DEFINITION 7. (Data Speciﬁcation). Let d ∈ D be a data
item, and sl be a sensitivity level, which is a rational number in
the range [0,1], assigned to d. The data speciﬁcation is deﬁned as
a tuple .
Privacy Policy: To summarize the aforementioned features and ele-
ments, we introduce a formal deﬁnition of privacy policies for col-
laborative data sharing as follows:
DEFINITION 8. (Privacy Policy). A privacy policy is a 4-tuple
P =, where
• controller is a controller speciﬁcation deﬁned in Deﬁni-
• accessor is an access speciﬁcation deﬁned in Deﬁnition 6;
• data is a data speciﬁcation deﬁned in Deﬁnition 7; and
• ef f ect ∈ {permit; deny} is the authorization effect of the
tion 5;
policy.
Suppose the trust levels that a controller can allocate to a user
or a user set are {0.00, 0.25, 0.50, 0.75, 1.00}, indicating none
trust, weak trust, medium trust, strong trust, and strongest trust,
respectively. Similarly, a controller can leverage ﬁve sensitivity
levels: 0.00 (none), 0.25 (low), 0.50 (medium), 0.75 (high), and
1.00 (highest) for the shared data. The following is an example of
privacy policy in terms of our policy speciﬁcation scheme.
EXAMPLE 1. Alice authorizes users who are her friends or
users in hiking group to access a photo (identiﬁed by a particular
photoId) she is tagged in, where Alice considers her friends with a
medium trust level, the hiking group with a weak trust level, and
the photo with a high sensitivity level:
p = (;{; }; ; permit).
1We limit our consideration to f riendOf relation. The support of
more relations such as colleagueOf and classmateOf does not
signiﬁcantly complicate our approach proposed in this paper.
Figure 2: Example of Privacy Conﬂict Identiﬁcation Based on Accessor Space Segmentation.
3.2 Identifying and Resolving Privacy Conﬂicts
When two users disagree on whom the shared data item should
be exposed to, we say a privacy conﬂict occurs. The essential rea-
son leading to the privacy conﬂicts is that multiple associated users
of the shared data item often have different privacy concerns over
the data item. For example, assume that Alice and Bob are two
controllers of a photo. Each of them deﬁnes a privacy policy stat-
ing only her/his friends can view this photo. Since it is almost
impossible that Alice and Bob have the same set of friends, privacy
conﬂicts may always exist considering collaborative control over
the shared data item.
A naive solution for resolving multiparty privacy conﬂicts is to
only allow the common users of accessor sets deﬁned by the multi-
ple controllers to access the data [24]. Unfortunately, this solution
is too restrictive in many cases and may not produce desirable re-
sults for resolving multiparty privacy conﬂicts. Let’s consider an
example that four users, Alice, Bob, Carol and Dave, are the con-
trollers of a photo, and each of them allows her/his friends to see
the photo. Suppose that Alice, Bob and Carol are close friends and
have many common friends, but Dave has no common friends with
them and has a pretty weak privacy concern on the photo. In this
case, adopting the naive solution for conﬂict resolution may turn
out that no one can access this photo. Nevertheless, it is reasonable
to give the view permission to the common friends of Alice, Bob
and Carol. A strong conﬂict resolution strategy may provide a bet-
ter privacy protection. Meanwhile, it may reduce the social value
of data sharing in OSNs. Therefore, it is important to consider the
tradeoff between privacy protection and data sharing when resolv-
ing privacy conﬂicts. To address this issue, we introduce a mecha-
nism for identifying multiparty privacy conﬂicts, as well as a sys-
tematic solution for resolving multiparty privacy conﬂicts.
3.2.1 Privacy Conﬂict Identiﬁcation
Through specifying the privacy policies to reﬂect the privacy
concern, each controller of the shared data item deﬁnes a set of
trusted users who can access the data item. The set of trusted users
represents an accessor space for the controller. In this section, we
ﬁrst introduce a space segmentation approach [16] to partition ac-
cessor spaces of all controllers of a shared data item into disjoint
segments. Then, conﬂicting accessor space segments (called con-
ﬂicting segments in the rest of this paper), which contain acces-
sors that some controllers of the shared data item do not trust, are
identiﬁed. Each conﬂicting segment contains at least one privacy
conﬂict.
Algorithm 1 shows the pseudocode of generating conﬂicting ac-
cessor space segments for all controllers of a shared data item. An
entire accessor space derived from the policies of all controllers
of shared data item is ﬁrst partitioned into a set of disjoint seg-
Algorithm 1: Identiﬁcation of Conﬂicting Accessor Space
Input: A set of accessor space, A.
Output: A set of disjoined conﬂicting accessor spaces, CS.
/* Partition the entire accessor space */
S ←− P artition(A);
/* Identify the conﬂicting segments */
CS:N ew();
foreach s ∈ S do
/* Get all controllers associated with a segment s */
C ←− GetControllers(s);
if |C| < |A| then
CS:Append(s);
Partition(A)
foreach a ∈ A do
sa ←− F riendSet(a);
foreach s ∈ S do
/* sa is a subset of s*/
if sa ⊂ s then
S:Append(s \ sa);
s ←− sa;
Break;
/* sa is a superset of s*/
else if sa ⊃ s then
sa ←− sa \ s;
/* sa partially matches s*/
else if sa ∩ s ̸= ∅ then
S:Append(s \ sa);
s ←− sa ∩ s;
sa ←− sa \ s;
S:Append(sa);
return S;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
ments. As shown in lines 10-28 in Algorithm 1, a function called
Partition() accomplishes this procedure. This function works
by adding an accessor space sa derived from policies of an con-
troller a to an accessor space set S. A pair of accessor spaces must
satisfy one of the following relations: subset (line 14), superset
(line 19), partial match (line 22), or disjoint (line 27). Therefore,
one can utilize set operations to separate the overlapped spaces into
disjoint spaces.
Conﬂicting segments are identiﬁed as shown in lines 5-9 in Al-
gorithm 1. A set of conﬂicting segments CS : {cs1, cs2, . . . , csn}
from the policies of conﬂicting controllers has the following three
properties:
1. All conﬂicting segments are pairwise disjoint: csi ∩ csj =
∅; 1 ≤ i ̸= j ≤ n;
′
2. Any two different accessors a and a
within a single conﬂict-
ing segment (csi) are deﬁned by the exact same set of con-
′
trollers: GetController(a) = GetController(a
), where
a ∈ csi; a
′ ∈ csi; a ̸= a
′
; 2 and
3. The accessors in any conﬂicting segments are untrusted by at
least one controller of the shared data item.
Figure 2 gives an example of identifying privacy conﬂicts based
on accessor space segmentation. We use circles to represent ac-
cessor spaces of three controllers, c1, c2 and c3, of a shared data
item. We can notice that three of accessor spaces overlap with each
other, indicating that some accessors within the overlapping spaces
are trusted by multiple controllers. After performing the space seg-
mentation, seven disjoint accessor space segments are generated as
shown in Figure 2 (a). To represent privacy conﬂicts in an intuitive
way, we additionally introduce a grid representation of privacy con-
ﬂicts, in which space segments are displayed along the horizontal
axis of a matrix, controllers are shown along the vertical axis of
the matrix, and the intersection of a segment and a controller is a
grid that displays the accessor subspace covered by the segment.
We classify the accessor space segments as two categories: non-
conﬂicting segment and conﬂicting segment. Non-conﬂicting seg-
ment covers all controllers’ access spaces, which means any acces-
sor within the segment is trusted by all controllers of the shared data
item, indicating no privacy conﬂict occurs. A conﬂicting segment
does not contain all controllers’ access spaces that means accessors
in the segment are untrusted by some controllers. Each untrusting
controller points out a privacy conﬂict. Figure 2 (b) shows a grid
representation of privacy conﬂicts for the example. We can easily
identify that the segment ps is a non-conﬂicting segment, and cs1
through cs6 are conﬂicting segments, where cs1, cs2 and cs3 in-
dicate one privacy conﬂict, respectively, and cs4, cs5 and cs6 are
associated with two privacy conﬂicts, respectively.
3.2.2 Privacy Conﬂict Resolution
The process of privacy conﬂict resolution makes a decision to al-
low or deny the accessors within the conﬂicting segments to access
the shared data item. In general, allowing the assessors contained
in conﬂicting segments to access the data item may cause privacy
risk, but denying a set of accessors in conﬂicting segments to ac-
cess the data item may result in sharing loss. Our privacy conﬂict
resolution approach attempts to ﬁnd an optimal tradeoff between
privacy protection and data sharing.
Measuring Privacy Risk: The privacy risk of a conﬂicting segment
is an indicator of potential threat to the privacy of controllers in
terms of the shared data item: the higher the privacy risk of a con-
ﬂicting segment, the higher the threat to controllers’ privacy. Our
basic premises for the measurement of privacy risk for a conﬂicting
segment are the following: (a) the lower the number of controllers
who trust the accessors within the conﬂicting segment, the higher
the privacy risk; (b) the stronger the general privacy concerns of
controllers, the higher the privacy risk; (c) the more sensitive the
shared data item, the higher the privacy risk; (d) the wider the data
item spreads, the higher the privacy risk; and (e) the lower the trust
levels of accessors in the conﬂicting segment, the higher the pri-
vacy risk. Therefore, the privacy risk of a conﬂicting segment is
calculated by a monotonically increasing function with the follow-
ing parameters:
• Number of privacy conﬂicts: The number of privacy con-
ﬂicts in a conﬂicting segment is indicated by the number of
the untrusting controllers. The untrusting controllers of a
conﬂict segment i are returned by a function controllersut(i);
• General privacy concern of an untrusting controller: The
general privacy concern of an untrusting controller j is de-
noted as pcj. The general privacy concern of a controller can
be derived from her/his default privacy setting for data shar-
ing. Different controllers may have different general privacy
concern with respect to the same kinds of data. For exam-
ple, public ﬁgures may have higher privacy concern on their
shared photos than ordinary people;
• Sensitivity of the data item: Data sensitivity in a way de-
ﬁnes controllers’ perceptions of the conﬁdentiality of the data
being transmitted. The sensitivity level of the shared data
item explicitly chosen by an untrusting controller j is de-
noted as slj. The factor depends on the untrusting controllers
themself. Some untrusting controllers may consider the shared
data item with the higher sensitivity;
• Visibility of the data item: The visibility of the data item
with respect to a conﬂicting segment captures how many ac-
cessors are contained in the segment. The more the accessors
in the segment, the higher the visibility; and
• Trust of an accessor: The trust level of an accessor k is
denoted as tlk, which is an average value of the trust levels
deﬁned by the trusting controllers of the conﬂicting segment
for the accessor.
The privacy risk of a conﬂict segment i due to an untrusting con-
troller j, denoted as P R(i; j), is deﬁned as
P R(i; j) = pcj ⊗ slj ⊗
(1 − tlk)
(1)
∑
k2accessors(i)