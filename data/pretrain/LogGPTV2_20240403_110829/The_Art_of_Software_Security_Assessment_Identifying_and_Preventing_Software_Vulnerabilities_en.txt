            Name:  
            Age:  
The result of transforming the XML content into HTML is this document: 
Name: Zoe 
Age: 1 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1019 
Internet Database Connection (IDC) is an older, now unsupported, Microsoft Web 
programming technology for binding an HTML page to a data source (such as a 
database) and populating fields in the page with dynamic data. It has strong 
similarities to XSLT. Web developers create a template, known as an .htx file, which 
is basically an HTML document with special tags that indicate where data from the 
database should be inserted. They then create an .idc file that tells the Web server 
which template file to use and what database query to run to get the values needed 
to fill in the template. 
Server-Side Scripting 
Server-side scripting technology is essentially server-side document processing 
taken to the next level. Instead of embedding simple directives or providing 
transformation templates, server-side scripting technologies enable Web developers 
to embed actual program code in HTML documents. When the Web server encounters 
these embedded programs, it runs them through an internal program interpreter. 
This model is popular for small- to medium-scale Web development because it offers 
good performance, and Web sites that use it are typically simple to develop. Here are 
the popular server-side scripting technologies: 
PHP: Hypertext Preprocessor (PHP) Because PHP is a recursive acronym, so 
you can probably guess that it's a UNIX-oriented, open-source technology. It's 
currently a popular language for Web development, especially for small to 
medium applications. PHP is a scripting language designed from the ground up 
to be embedded in HTML files and interpreted by a Web server. It's a fairly 
easy language to pick up because it has much overlap with Perl, C, and Java. 
Active Server Pages (ASP) ASP is Microsoft's popular server-side scripting 
technology. ASP pages can contain code written in a variety of languages, 
although most developers use VBScript or JScript (Microsoft's JavaScript). It's 
also relatively easy to develop for because the ASP framework is fairly 
straightforward, and pages can call Component Object Model (COM) objects 
for involved processing. 
ColdFusion Markup Language (CFML) This server-side scripting language is 
used by the Adobe (formerly Macromedia) ColdFusion framework. ColdFusion 
is another popular technology that has retained a core set of developers over 
many years. 
JavaServer Pages (JSP) JSP is ostensibly a server-side scripting language in 
the same vein as PHP and ASP. It does allow Web developers to embed Java 
code in HTML documents, but it isn't typically used in the same fashion as 
other server-side scripting languages. JSP pages are with a component of Java 
servlet technology, explained in the next bulleted list. 
Over time, server-side scripting solutions have evolved away from an interpreted 
model. Instead of running a page through an interpreter for each request, a Web 
server can compile the page down to a more efficient representation, such as 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1020 
bytecode. The Web server needs to do this compilation only once, as it can keep the 
compiled program in a cache. The virtual machine that interprets the bytecode can 
then cache the corresponding machine code, resulting in performance similar to a 
normal compiled language, such as straight C/C++. Here are some popular 
technologies of this nature: 
Java servlets Java is probably responsible for much of the evolution in 
server-side scripting, as it was originally designed with a compiled model. Java 
servlets are simply classes that are instantiated by and interact with the Web 
server through a common interface. JSP pages are actually compiled into Java 
servlets by the Web server. 
ASP.NET ASP.NET is Microsoft's revamping of ASP. ASP.NET page code can be 
written in any .NET language, such as C# or VB.NET. The pages are compiled 
down to intermediate language (IL) and cached by the Web server. The .NET 
framework handles just-in-time (JIT) compilation of the IL. 
ColdFusion MX ColdFusion MX compiles CFML pages down to Java bytecode 
instead of running an interpreter. 
Note 
Even pure scripting technologies are often compiled to bytecode when a script is 
requested for the first time. The bytecode is then cached to accelerate later requests 
for the same unmodified script. 
8.4.3 HTTP 
HTTP is the network protocol that all Web transactions use under the hood. The next 
section summarizes the high points, but interested readers should check out RFC 
2616 (www.ietf.org) or find a good Web inspection proxy tool and start studying 
traffic. 
Overview 
HTTP is a straightforward request and response protocol, in which every request the 
client sends to the server is reciprocated with a single response. These requests are 
performed over TCP connections. In contemporary versions of HTTP, a single TCP 
connection is typically reused for multiple requests to the same server, but 
historically, each Web request caused the creation of an entirely new TCP connection. 
Here's an example of a simple HTTP request: 
[View full width](? [????.]) 
GET /testing/test.html HTTP/1.1 
Accept: image/gif, image/x-xbitmap, image/jpeg, 
image/pjpeg, application/x-gsarcade-launch, application/x- 
shockwave-flash, application/vnd.ms-excel, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1021 
application/vnd.ms-powerpoint, application/msword, */* 
Accept-Language: en-us 
Accept-Encoding: gzip, deflate 
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 
1.0.3705; .NET CLR 
 1.1.4322) 
Host: test.testing.com:1234 
Connection: Keep-Alive 
HTTP requests are composed of a header and an optional body. A blank linecalled a 
carriage return/line feed (CRLF)separates the header and the body. The preceding 
request doesn't have a body, so the blank line is simply the end of the request. 
The first line of a HTTP request is composed of a method, a URI path, and an HTTP 
protocol version. The method tells the server what type of request it is. The preceding 
request has a GET method, which tells the server to retrieve (get) the requested 
resource. The URI path which tells the server which resource the client is requesting. 
The preceding request asks for the resource located at /testing/test.html on the 
server. The protocol version specifies the version of HTTP the client is using. In the 
preceding request, the client is using version HTTP/1.1. 
The rest of the lines in the request header share the same general format: a field 
name followed by a colon, and then a field definition. The preceding request includes 
the following request header fields: 
Accept This header field tells the server which kinds of media (such as an 
image or application) are acceptable for the response and their order of 
preference. 
Accept-Language This header field tells the server which languages the client 
accepts and prefers, which in the preceding request is U.S. English. 
Accept-Encoding This header field tells the server it can encode the request 
body with certain schemes if necessary. 
User-Agent This header field tells the server what software versions the client 
is using for its Web browser and operating system. You can see that the 
preceding request was made from Internet Explorer 6.0 (MSIE 6.0) on a 
Windows XP machine (Windows NT 5.1) with the .NET 1.1 runtime installed 
(.NET CLR 1.0.3705; .NET CLR 1.1.4322). 
Host This header field tells the Web server which host the request is for, which 
is useful if multiple Web sites are hosted on the same machine (called virtual 
hosts). You can see that the request was for the machine named 
test.testing.com, and the client is talking to the server on port 1234. 
Connection This header field gives the server options that are specific to the 
connection. In the preceding request, the client's Keep-Alive value tells the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1022 
server not to close the connection after it answers the request. This way, the 
client can reuse the TCP connection to issue another request. 
Now look at the response to this query: 
HTTP/1.1 404 Not Found 
Date: Fri, 20 Aug 2006 01:58:14 GMT 
Server: Apache/1.3.28 (Unix) PHP/4.3.0 
Keep-Alive: timeout=15, max=100 
Connection: Keep-Alive 
Transfer-Encoding: chunked 
Content-Type: text/html; charset=iso-8859-1 
d3 
404 Not Found 
Not Found 
The requested URL /testing/test.html was not found on this server. 
0 
HTTP responses are similar to HTTP requests. The response has a header and a body, 
and the response header is set up so that the first line has a special format. The rest 
of the header response lines share the field name, colon, and field value format. 
The first line of the HTTP response header is composed of the HTTP protocol version, 
the response code, and the response reason phrase. The protocol version is the same 
as in the request: HTTP/1.1. The response code is a numeric status code that tells the 
client the result of the request. In the preceding response, it's 404, which is probably 
familiar to you. If it isn't, the response reason phrase gives a short text description of 
the status code, which is "Not Found" in this response. 
The rest of the response header lines provide information to the client: 
Date This field tells the client when the server generated the response. 
Server This field gives the client information about the Web server software. 
You can see that the Web server is running Apache 1.3.28 on some kind of 
UNIX machine. 
Keep-Alive and Connection These fields give the client information about the 
connection and how long it will be held open. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1023 
Transfer-Encoding This field tells the client the mechanism the server uses to 
transmit the body of the response. This server elected to use the chunked 
method of encoding. 
Content-Type This field tells the client the media type and character set of the 
response, which is a plain HTML document. 
The response body in the example is encoded with the chunked encoding method, 
which is made up of a series of chunks. Each chunk has a line specifying its length in 
hexadecimal and the corresponding data. In the preceding response, d3 specifies 211 
bytes of data in the first chunk. The 0 at the end indicates the end of the chunked data. 
You can see that in the response, which is plain HTML, the server gives an error 
message to go along with the error code 404. 
Versions 
Three versions of HTTP are currently in use: 0.9, 1.0, and 1.1. An HTTP version 0.9 
request looks like this: 
GET / 
This request retrieves the root document. It's about as straightforward as it can get 
and can be used for quick manual testing. A minimal HTTP version 1.0 request looks 
like this: 
GET / HTTP/1.0 
This request is similar to the request shown in the previous section. Note that a blank 
line (a second CRLF) signifies the end of the HTTP request header and, therefore, the 
end of the HTTP request. If you're entering requests by hand, HTTP/1.0 is easiest to 
use because it's simpler than HTTP/1.1. Here's a minimal HTTP/1.1 request: 
GET / HTTP/1.1 
Host: test.com 
This request is nearly identical to the minimal HTTP/1.0 request, except it requires 
the client to provide a Host header in the request. 
Headers 
HTTP headers provide descriptive information (metadata) about the HTTP connection. 
They are used in negotiating an HTTP connection and establishing the connection's 
properties after successful negotiation. HTTP supports a variety of headers that fall 
into one of four basic categories: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1024 
Request Headers in the initial request 
Response Headers in the server response 
General Headers that can be in a request or response 
Entity Headers that apply to a specific entity in the request or response 
The remainder of this chapter refers to a number of HTTP headers, so Table 17-1 lists 
them for easy reference. 
Table 17-1. Request and Response Header Fields 
Header 
Type 
Description 
Accept 
Request 
Lists media (MIME) types the client will 
accept 
Accept-Charset 
Request 
Lists character encodings the client will 
accept 
Accept-Encoding 
Request 
Lists content encodings the client will accept, 
such as compression mechanisms 
Accept-Language 
Request 
Lists languages the client will accept 
Accept-Ranges 
Response Server indicates it supports range requests 
Age 
Response Freshness of the requested URI 
Allow 
Entity 
Lists HTTP methods allowed for the 
requested URI 
Allowed 
Response Deprecated: lists allowed request methods 
Authorization 
Request 
Presents credentials for HTTP authentication 
Cache-Control 
Response Specifies caching requirements for the 
requested URI 
Charge-To 
Request 
Deprecated: billing information 
Connection 
General 
Allows the client to specify connection 
options 
Content-Encoding 
Entity 
Identifies additional encoding of the entity 
body, such as compression 
Content-Transfer-Encoding Response Deprecated: MIME transfer encoding 
Content-Language 
Entity 
Identifies the language of the entity body 
Content-Length 
Entity 
Identifies the length (in bytes) of the entity 
body 
Content-Location 
Entity 
Supplies the correct location for the entity if 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1025 
Table 17-1. Request and Response Header Fields 
Header 
Type 
Description 
known and not available at the requested URI 
Content-MD5 
Entity 
Supplies an MD5 digest of the entity body 
Content-Range 
Entity 
Lists the byte range of a partial entity body 
Content-Type 
Entity 
Specifies the media (MIME) type of the entity 
Cost 
Response Deprecated: cost of requested URI 
Date 
General 
Date and time of the message 
Derived-From 
Response Deprecated: previous version of requested 
URI 
ETag 
Response Entity tag used for caching purposes 
Expect 
Request 
Lists server behaviors required by the client 
Expires 
Entity 