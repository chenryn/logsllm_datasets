Hofstede, 2003), or some other specifica- which include: data complexity, interface com-
tion language. The objective is to be able plexity, and interface integration complexity
to set complexity standards and interpret (Cardoso, 2005b). While the first two submetrics
the resultant numbers uniformly across are related to static data aspects (data declara-
specification languages. tion), the third metric is more dynamic in nature
and focuses on data dependencies between the
Perspectives on Process various activities of a process.
complexity Resource complexity. Activities in a pro-
There is no single metric that can be used to cess need to access resources during their execu-
measure the complexity of a process. Four tions. A resource is defined as any entity (e.g.,
main complexity perspectives can be identified human resources, IS resources, IT resources)
(Figure 5): activity complexity, control-flow required by an activity for its execution, such
complexity, data-flow complexity, and resource as a document, a database, a printer, an external
complexity. While in this article we will focus application, or role (Du, Davis, Huang, & Shan,
on control-flow complexity, we present the main 1999; zur Mühlen, 1999). Resources such as ac-
ideas behind each complexity perspective. tors and roles can be structured into the context
of an organization. The structure that is used to
Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global
is prohibited.
International Journal of Web Services Research, 5(2), 49-76, April-June 2008 55
Figure 5. Types of complexity analyses
shape the various types of resources can be ana- during development and maintenance of process
lyzed to determine its complexity. This analysis applications can result in a better quality and
can help managers lower administrative costs maintainability. Based on MCC, we propose a
and better optimize resource utilization. control-flow complexity metric to be used dur-
ing the design of processes. Process control-flow
busInEss ProcEss complexity is a design-time metric.
Since our work to evaluate process com-
control-Flow coMPlExIty
plexity borrows some ideas from MCC (Mc-
MEtrIc
Cabe, 1976) in order to analyze software com-
The graphical representation of most process
plexity, we start by describing the importance
specification languages provides the user with
of MCC and illustrate its usage. This metric
the capability to recognize complex areas of
was chosen for its reliability as a complexity
processes. Thus, it is important to develop
indicator and its suitability for our research.
methods and measurements to automatically
Since its development, MCC has been one
identify complex processes and complex ar-
of the most widely accepted software metrics
eas of processes. Afterward, these processes
and has been applied to tens of millions of lines
can be redesigned to reduce the complexity of
of code in both the Department of Defense
related activities. One key to the redesign is
(DoD) and commercial applications. The result-
the availability of a metric that characterizes
ing base of empirical knowledge has allowed
complexity and provides guidance for restruc-
software developers to calibrate measurements
turing processes.
of their own software and arrive at some un-
derstanding of its complexity.
overview of Mccabe’s cyclomatic
Software metrics often are used to give
complexity a quantitative indication of a program’s com-
Our work borrows some techniques from the plexity. However, it is not to be confused with
branch of software engineering known as algorithmic complexity measures (e.g., Big-Oh
software metrics; namely, McCabe’s cyclo- “O”-Notation), whose aim is to compare the
matic complexity (MCC) (McCabe, 1976). A performance of algorithms. Software metrics
judicious adaptation and usage of this metric have been found to be useful in reducing soft-
Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global
is prohibited.
56 International Journal of Web Services Research, 5(2), 49-76, April-June 2008
ware maintenance costs by assigning a numeric control flow graph. For example, in Figure 6.,
value to reflect the ease or difficulty with which the MCC of the control flow graph for the Java
a program module may be understood. code described is 14-11+2=5.
MCC is a measure of the number of linearly Our major objective is to develop a metric
independent paths in a program. It is intended that could be used in the same way as the MCC
to be independent of language and language metric, but to evaluate process complexity. One
format (McCabe & Watson, 1994). MCC is an of the first important observations that can be
indication of a program module’s control flow made from an MCC control flow graph (Figure
complexity. Derived from a module’s control 6.) is that this graph is extremely similar to
graph representation, MCC has been found to processes and workflows. One major difference
be a reliable indicator of complexity in large is that the nodes of an MCC control flow graph
software projects (Ward, 1989). This metric have identical semantics, while process nodes
is based on the assumption that a program’s (i.e., activities, tasks, Web services) can have
complexity is related to the number of control different semantics (e.g., AND-splits, XOR-
paths through the program. For example, a 10- splits, OR-joins, etc.).
line program with 10 assignment statements Our approach uses the idea introduced by
is easier to understand than a 10-line program McCabe and tackles the semantic difference
with 10 if-then statements. of nodes. Numerous studies and experience in
MCC is defined for each module as e - n + software projects have shown that the MCC
2, where e and n are the number of edges and measure correlates very closely with errors in
nodes in the control flow graph, respectively. software modules. The more complex a module
Control flow graphs describe the logic struc- is, the more likely it is to contain errors. Our goal
ture of software modules. The nodes represent is to adapt McCabe’s cyclomatic complexity to
computational statements or expressions, be applied to processes.
and the edges represent transfer of control
between nodes. Each possible execution path control-Flow Graphs
of a software module has a corresponding path Control flow graphs can be used to describe
from the entry to the exit node of the module’s the logic structure of processes. A process is
Figure 6. Example of a Java program and its corresponding flow graph
Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global
is prohibited.
International Journal of Web Services Research, 5(2), 49-76, April-June 2008 57
composed of activities and transitions. Activities deterministic.
are represented using circles, and transitions are An example of a process is shown in Fig-
represented using arrows. Transitions express ure 7. The process has been developed by the
dependencies between activities. An activity Fungal Genome Resource (FGR) laboratory
with more than one outgoing transition can be in an effort to improve the efficiency of their
classified as an AND-split, OR-split, or XOR- processes (Cardoso, Miller, Sheth, Arnold,
split. Control flow graphs with activities that & Kochut, 2004). One of the reengineered
can have three types of output logic are called processes was the DNA sequencing workflow,
tri-logic workflows (Cardoso & Cravo, 2006). since it was considered to be beneficial for the
AND-split activities enable all their outgoing laboratory’s daily activities.
transitions after completing their execution.
OR-split activities enable one or more outgo- Definition and Measurement of
ing transitions after completing their execution. Control-flow Complexity
XOR-split activities enable only one outgoing The control-flow behavior of a process is af-
transition after completing their execution. fected by constructs such as splits and joins.
AND-split activities are represented with a ‘•’, Splits allow defining the possible control paths
OR-split with an ‘O’, and XOR-split activities that exist through the process. Joins have a
with a ‘⊕’. An activity with more than one different role; they express the type of syn-
incoming transition can be classified as an AND- chronization that should be made at a specific
join, OR-join, or XOR-join. AND-join activities point in the process.
start their execution when all their incoming Since we are interested in calculating the
transitions are enabled. OR-join activities start complexity of processes’ control-flow, the
their execution when a subset of their incoming formulae that we will present evaluate the
transitions is enabled. XOR-join activities are complexity of XOR-split, OR-split, and AND-
executed as soon as one of the incoming transi- split constructs. We call this measurement of
tions is enabled. As with AND-split, OR-split, complexity Control-flow Complexity (CFC).
and XOR-split activities, AND-join, OR-join, Each formula computes the number of states
and XOR-join activities are represented with that can be reached from one of the three split
the symbols ‘•’, ‘O’, and ‘⊕’, respectively. Van constructs. The measure is based on the relation-
der Aalst, Hofstede, Kiepuszewski, and Barros ships between mental discriminations needed
(2003) show that most workflow patterns can to understand a split construct and its effects.
be constructed using the basic building blocks This type of complexity has been referred to as
AND-split, OR-split, and XOR-split. Only OR psychological complexity. Therefore, the more
and XOR-splits introduce nondeterminism. possible states follow a split, the more difficulty
On the other hand, AND-splits and joins are the designer or business process engineer has
Figure 7. The DNA sequencing workflow
Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global
is prohibited.
58 International Journal of Web Services Research, 5(2), 49-76, April-June 2008
to understand the section of a processes and, The fan-out is computed using function fan-
thus, the process itself. out(a), where a is an activity.
In processes, the MCC cannot be used suc-
cessfully since the metric ignores the semantics Definition 6 (Control-flow-induced Mental
associated with nodes of the graph. While the State): A mental state is a state that has to be
nodes (i.e., activities) of processes have distinct considered when a designer is developing a
semantics associated, the nodes of a program’s process. Splits introduce the notion of mental
flow graph are undifferentiated. states in processes. When a split (XOR, OR, or
We now introduce several definitions that AND) is introduced in a process, the business
will constitute the basis for CFC measure- process designer has to mentally create a map
ment. or structure that accounts for the number of
states that can be reached from the split.
Definition 1 (Process): A process is a collec-
tion of activities that takes one or more kinds The notion of mental state is important
of input and creates an output that is of value since there are certain theories (Miller, 1956)
to the customer (Hammer & Champy, 1993). that prove that complexity beyond a certain point
A process is a specific ordering of activities defeats the human mind’s ability to perform
across time and place, with a beginning, an accurate symbolic manipulations and, hence,
end, and clearly identified inputs and outputs results in error.
(Davenport, 1993).
Definition 7 (XOR-split Control-flow Com-
Definition 2 (Process Property): A property plexity): XOR-split control-flow complexity
is a feature, characteristic, or attribute of a is determined by the number of mental states
process such as complexity, maintainability, that are introduced with this type of split. The
cost, reliability, and so forth. Process properties function CFC (a), where a is an activity,
XOR-split
can be evaluated and quantified using suitable computes the control-flow complexity of the
models, methods, and algorithms. XOR-split a. For XOR-splits, the control-flow
complexity is simply the fan-out of the split.
Definition 3 (Process Measure): A process
measure is an empirical assignment of num- CFC (a)= fan-out(a)
XOR-split
bers (or symbols) to processes in order to
characterize a specific property. Let P be a set In this particular case, the complexity is
of processes. Let N be a set of formal objects, directly proportional to the number of activities
such as numbers. A measure m is defined to be a that follow an XOR-split and that a process de-
mapping, m: P→N. This guarantees that every signer needs to consider, analyze, and assimilate.
process has a measure, and every process has The idea is to associate the complexity of an
only one measure. However, it does not require XOR-split with the number of states (e.g., activi-
that every number (in set N) be the measure of ties, tasks, Web services) that follow the split.
some process in set P. This rationale is illustrated in Figure 8. Please
note that in this first case, the computation and
Definition 4 (Process Metric): Process metric result bear a strong similarity to the MCC.
is any type of measurement related to a process.
Process metrics allows attributes of processes Definition 8 (OR-split Control-flow Complex-
to be quantified. ity): OR-split control-flow complexity is also
determined by the number of mental states that
Definition 5 (Activity Fan-out): Fan-out is the are introduced with the split. For OR-splits, the
number of transitions going out of an activity. control-flow complexity is 2n-1, where n is the
Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global
is prohibited.
International Journal of Web Services Research, 5(2), 49-76, April-June 2008 59
Figure 8. XOR-split control-flow complexity
Figure 9. OR-split control-flow complexity
fan-out of the split. This rationale is illustrated Definition 9 (AND-split Control-flow Com-
in Figure 9. plexity): For an AND-split, the complexity is
simply 1.
CFC (a)= 2fan-out(a)-1
OR-split
CFC (a)= 1
AND-split
This means that when a designer is con-
structing a process, he or she needs to consider The designer constructing a process needs
and analyze 2n-1 states that may arise from the only to consider and analyze one state that
execution of an OR-split construct. may arise from the execution of an AND-split
Mathematically, it would appear more construct, since it is assumed that all the outgo-
obvious that 2n states can be reached after the ing transitions are selected and followed. This
execution of an OR-split. But since a process rationale is illustrated in Figure 10.
that has started its execution has to finish, it can- The higher the value of CFC (a), CF-
XOR-split
not be the case where, after the execution of an C (a), and CFC (a), the more complex
OR-split AND-split
OR-split, no transition is activated (i.e., no Web is a process’s design, since developers have
service or workflow task is executed. Therefore, to handle all the states between control-flow
this situation or state cannot happen. constructs (splits) and their associated outgo-
ing transitions and activities. Each formula to
calculate the complexity of a split construct is
Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global
is prohibited.
60 International Journal of Web Services Research, 5(2), 49-76, April-June 2008
Figure 10. AND-split control-flow complexity
based on the number of states that follow the evaluate complexity without direct execution
construct. of processes. The function of CFC is computed
based on the individual control-flow complex-
control-Flow complexity of ity of XOR, OR, and AND –splits. Unless
business Processes otherwise stated, CFC(P) denotes the absolute
Mathematically, control-flow complexity metric control-flow complexity.
is additive. Thus, it is very easy to calculate the
complexity of a process simply by adding the Example of cFc calculation