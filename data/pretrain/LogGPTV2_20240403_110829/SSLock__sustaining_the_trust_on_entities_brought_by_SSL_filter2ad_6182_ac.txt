and  so  on.  The  core  implementation  is  shown  in  Table  2.  The 
details are explained below: 
4 One suggested catering unprotected domains with ForceHTTPS 
[11].  But  we  never  prefer  using  cookie  for  security-critical 
operations.  It  is  found  that  later  development  of  ForceHTTPS 
also abandoned the use of cookie as we did initially [12]. 
// To enable SSLock-protection if conditions are met 
//  secureDomain is the current protected domain 
//  candidates is the array of whitelisted domains 
//  sslock.cache is the CL cached in browsers 
sslock.insert = function(secureDomain, candidates) { 
   for (var candidate in candidates) { 
      var _org = candidate.split('.'), 
          _dst = secureDomain.split('.'), 
          _oPop = '', _dPop = '',  
          wildcard = [], level = 0, 
          save = function(k, v) { 
              sslock.cache[StrongHash(k)] = v; 
          }; 
      do{ 
         wildcard.unshift(_oPop); 
         _oPop = _org.pop(); 
         _dPop = _dst.pop(); 
         level++; 
      } while (_oPop == _dPop); 
      if (level  0)) 
      return slots.shift() + ((slots.length)  
         ? '.' + sslock.convert(slots.join('.'), 1)  
         : ''); 
   slots = slots.reverse(); 
   slots[Math.abs(level) - 1] = 'secure'; 
   return slots.reverse().join('.'); 
} 
  The function sslock.insert() is executed when the header 
SSLock-Candidates  is  found  in  a  HTTP  response.  To 
reduce the load, we  may only examine responses that are of 
MIME  type  equal  to  text,  for  instance,  text/plain  or 
text/html. The function guarantees that the current domain 
is  a  SSLock-protected  one.  Hence  the  function  adds  all 
unprotected  domains  listed  in  the  header  to  the  CL  with 
immediate effect according to the specification. 
  The function sslock.convert() is always executed before 
a domain is sent to DNS for resolution. The function tests if 
the  current  domain  and  its  suffix  are  stored  in  the  CL.  If  a 
matched record is found, the domain will be replaced with the 
corresponding SSLock-protected domain. 
2084.3  Program Flow 
  As  illustrated  in  Figure  3,  (1)  it  is  the  first  time  a  user  visits 
http://gmail.com/.  Obviously,  it  is  an  unprotected  domain. 
(2) Unsurprisingly, the browser fails to perform neither client-side 
redirection  nor  any  traditional  cached  redirections.  (3)  The 
browser  then  contacts  the  Gmail’s  server  which  redirects  the 
browser to a new location https://secure.gmail.com/login 
in  which  the  SSLock-Candidates  header  is  found.  (4)  The 
browser  then  adds  gmail.com  and  www.gmail.com  to  the  CL 
according to the given SSLock-Candidates header. (5) Finally, 
the  browser  enforces  the  SSLock-protection  as  intended  by  the 
use of SSLock-protected domain. 
to 
Intuitively,  for  subsequent  access 
the  same  domain 
gmail.com, the browser is able to locate this domain in the CL 
and automatically replace this domain with secure.gmail.com, 
the SSLock-protected one. As a result, the SSLock-protection for 
unprotected domain is enabled by the client-side redirection. 
5.  DISCUSSION 
  The following design advantages, compatibility analysis as well 
as limitations are carefully examined during its design. 
5.1  Design Advantages 
SSL protection, designed to work  with unsecured connections, 
is  sufficient  and  well  understood  to  ensure  end-to-end  security. 
SSLock  takes  the  initiative  to  address  the  operational  flaw  by 
proposing  a  new  domain  segmentation  approach  to  honor  the 
intended security of service providers. SSLock is designed to be 
light-weight and generic for application vendors; opt-in and zero-
initialization  for  service  providers;  as  well  as  idiot-proof  and 
privacy-preserving for users. 
Light-weight: SSLock is light-weight since only simple matching, 
hashing and array manipulation is needed. It is deployable in all 
platforms  including  resource-constrained  devices  like  mobile 
handsets.  The  core  implementation  is  provided  with  30  lines  of 
code while the whole implementation is estimated to be less than 
50 lines of computationally efficient code. 
Generic: The core specification of SSLock leverages the existing 
SSL  protection  by 
introducing  a  generic  domain  naming 
convention  but  not  new  infrastructures  nor  protocol-specific 
implementations.  Since  domain  is  generally  the  key  to  access  a 
web service, SSLock can be easily generalized to almost all SSL 
applications including browsers and mail user agents. Intuitively, 
SSLock complements other solutions like DNSSEC. 
Opt-in: By default, SSLock-protection is strictly enforced only in 
SSLock-protected  domains.  For service  providers  especially  like 
banks that operate with valid certificates, it is obligatory to opt in 
the  extra  SSLock-protection  for  their  sensitive  content  so  as  to 
prevent their users from falling into potential traps as discussed in 
Section  4.  For  service  providers  like  Gmail  that  are  reluctant  to 
host everything over HTTPS, it is still feasible to host relatively 
unimportant  content  in  unprotected  subdomains  owing  to  the 
nature of domain segmentation. On the other hand, acquiring valid 
certificates is no longer a barrier towards adopting SSLock. In our 
experience,  we  first  paid  US$12.99  to  obtain  a  valid  domain-
validated certificate [22] and later renewed it for another 5 years 
free-of-charge [23]. We thus obtained a valid certificate for only 
US$2.165 per annum, which is adequately affordable. 
Zero-initialization: SSLock is the only proposal attributing SSL 
protection  to  a  specific  subset  of  domains  (SSLock-protected) 
without any initialization. SSLock upholds the fact that the only 
Domain as input, 
e.g. gmail.com
Is SSLock-protected 
domain (secure) ?
Continue and Enforce 
SSLock protection
Y
N
Y
Domain exists in the 
Extended Protection 
List? (invoking 
sslock.convert())
Replace the domain with 
the corresponding 
SSLock-protected domain
N
Insert the domain into 
the Extended protection 
list
Y
Contact the server.
Redirection occurs and 
points to SSLock-
protected domain?
Y
Domain exists in 
SSLock-Candidates?
(invoking 
sslock.insert())
N
N
Continue without 
SSLock protection
Figure 3: The flow diagram to enforce SSLock-protection for 
a particular domain. 
pre-agreement  of  communication  is  the  domain  but  not  a 
certificate  that  is  hopefully  transmitted  over  insecure  channels 
without  interference.  Therefore,  even  if  it  is  the  first  time  a 
browser lands in a SSLock-protected domain, SSLock suffices to 
enforce the SSL protection before any potential interference in an 
insecure  network.  For  other  domains  where  zero-initialization  is 
infeasible, a domain-specific initialization is needed once over a 
valid connection. 
Idiot-proof: The responsibility on legitimacy judgment is shifted 
to  security-conscious  service  providers  who  have  the  most 
incentive to opt for better protection. Users need not to know the 
technical  details  or  remember  which  service  providers  employ 
valid  certificates.  Users  will  unconsciously  be  protected  by 
visiting  websites  that  use  SSLock-protected  domains.  Certainly, 
the  users’  minimal  and  essential  requirement  as  of  any  other 
schemes is to verify the domains. 
Privacy-preserving:  Nowadays,  users  require  their  applications 
like  browsers  to  leave  no  trace  of  their  activities.  For  SSLock-
protected domains, it is trivial that browsers do not need to save 
anything  to  start  the  protection.  However,  to  enforce  protection 
for  unprotected  domains,  it  is  unavoidable  to  store  the  domains 
which  could  possibly  compromise  privacy.  In  view  of  this,  we 
propose  the  privacy-enhancing  client-side  redirection  which 
makes use of a one-way hashing function such that the cache5 is 
5 As  a  matter  of  fact,  the  current  certification  ignores  domain 
expiry date, i.e. CAs implicitly allow valid certificates to be still 
valid  even  after  the  domain  has  expired  or  sold  afterwards.  If 
expiry  of  EPL  is  considered  (we  do  not  find  it  a  must),  we 
recommend EPL to expire no later than certificates’ expiry date. 
209Table 3: Compatibility rate on websites if SSLock-protection is applied on unique domains that end with secure.domain.com 
and ssl.domain.com. In the 4th column, expired certificates are also regarded as valid for comparison. In the 5th column, the 
set of reasons is defined as [# of self-signed, # of no-SSL, # of mismatched common name, # of SSL fatal errors] 
Keywords used to  
search in google.com 
site:secure.*.com 
bank site:secure.*.com 
buy site:secure.*.com 
shop site:secure.*.com 
site:ssl.*.com 
bank site:ssl.*.com 
buy site:ssl.*.com 
shop site:ssl.*.com 
Approximated 
Record Count 
611,000 
131,000 
238,000 
251,000 
233,000 
3,140 
9,460 
74,400 
Compatibility Rate 
(# of compatible/total-domains) 
92.03% (635/690) 
97.93% (142/145) 
98.17% (107/109) 
94.41% (169/179) 
86.24% (282/327) 
93.79% (136/145) 
94.64% (53/56) 
97.56% (40/41) 
Compatibility Rate 
 (+ expired-certs) 