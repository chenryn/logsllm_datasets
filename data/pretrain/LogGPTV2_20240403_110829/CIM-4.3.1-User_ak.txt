 SOURCE_KEY = dest_ip
 REGEX = (.+)
 FORMAT = dest::"$1"
 [dest_dns_as_dest]
 SOURCE_KEY = dest_dns
 REGEX = (.+)
 FORMAT = dest::"$1"
 [ossec_severities_lookup]
 filename = ossec_severities.csvfilename = ossec_severities.csv
12. Add the lookup to default/props.conf:
 [source::....ossec]
	 sourcetype=ossec
 [ossec]
 SHOULD_LINEMERGE = false
136
	 REPORT-0kv_for_ossec = kv_for_ossec, Location_kv_for_ossec	 REPORT-dest_for_ossec = dest_dns_as_dest,dest_ip_as_dest
	 FIELDALIAS-src_for_ossec = src_ip as src
	 LOOKUP-severity_for_ossec = ossec_severities_lookup severity_id OUTPUT severity[source::udp:514]
	 TRANSFORMS-force_sourcetype_for_ossec_syslog = force_sourcetype_for_ossec
13. Define the vendor and product fields. The last fields to populate are the vendor and product fields. To populate these, add stanzas to the 
default/transforms.conf file to statically define them:
 [source::....ossec]
	 sourcetype=ossec
 [ossec]
 SHOULD_LINEMERGE = false
	 [source::udp:514][source::udp:514]
	 TRANSFORMS-force_sourcetype_for_ossec_syslog = force_sourcetype_for_ossec
 [kv_for_ossec]
 REGEX = Alert Level\:\s+([^;]+)\;\s+Rule\:\s+([^\s]+)\s+-
 \s+([^\.]+)\.{0,1}\;\s+Location\:\s+([^;]+)\;\s*(srcip\:\s+(\d{1,3}\.\d{1,3}\.\d{1,3 }\.\d{1,3})\;){0,1}\s*(user\:\s+([^;]+)\;){0,1}\s*(.*)
 FORMAT = severity_id::"$1" signature_id::"$2" signature::"$3"Location::"$4" src_ip::"$6" user::"$8" Message::"$9"
 [Location_kv_for_ossec]
 SOURCE_KEY = Location
 REGEX = (\(([^\)]+)\))*\s*(.*?)(->)(.*)
 FORMAT = dest_dns::"$2" dest_ip::"$3" orig_source::"$5"
 [dest_ip_as_dest]
 SOURCE_KEY = dest_ip
 REGEX = (.+)
 FORMAT = dest::"$1"
 [dest_dns_as_dest]
 SOURCE_KEY = dest_dns
 REGEX = (.+)
 FORMAT = dest::"$1"
 [ossec_severities_lookup]
	 filename = ossec_severities.csvfilename = ossec_severities.csv
 [product_static_hids]
 REGEX = (.)
137
 FORMAT = product::"HIDS"
 [vendor_static_open_source_security] REGEX = (.)
 FORMAT = vendor::"Open Source Security"
14. Enable the stanzas in the default/props.conf file.
 [source::....ossec]
	 sourcetype=ossec
	 [ossec]
	 SHOULD_LINEMERGE = false
	 REPORT-0kv_for_ossec = kv_for_ossec, Location_kv_for_ossec	 REPORT-dest_for_ossec = dest_dns_as_dest,dest_ip_as_destFIELDALIAS-src_for_ossec = src_ip as src
	 LOOKUP-severity_for_ossec = ossec_severities_lookup severity_id OUTPUT severity
	 REPORT-product_for_ossec = product_static_hids
	 REPORT-vendor_for_ossec = vendor_static_open_source_security
Step 6: Validate your CIM compliance
1. Verify that your field extractions function correctly. First, restart the Splunk platform so that it recognizes the lookups you created.2. In the Searching and Reporting app, search for the source type.
sourcetype="ossec" 
3. From the search results, select Pick Fields to choose the fields that the Splunk platform ought to populate. Hover over the field name to display the values (see example below).
138
Optional You can further validate using one of the following methods:
◊ Use Pivot. See "[the CIM to normalize data at search time]" for 	details.◊ Use the datamodel command. See "[the CIM to normalize data at 	search time]" for details.
◊ Use the Splunk Enterprise Security dashboard in which you expect the data to appear. In this example, the OSSEC data ought to display in the Intrusion Center Dashboard. The OSSEC data is not immediately available in the dashboard because Splunk Enterprise Security uses summary indexing. Therefore, the data is notavailable on the dashboard for up to an hour after you've completed the add-on.
Step 7: (Optional) Document and package your configurations as an add-on
1. Create a README file. In the file, include information necessary for others to use the add-on. Create the following README.txt file under the root add-on directory.
===OSSEC add-on===
 Author: John Doe
 Version/Date: 1.3 September 2013Version/Date: 1.3 September 2013
 Supported product(s):
 This add-on supports Open Source Security (OSSEC) IDS 2.5
 Source type(s): This add-on will process data that is source typed
 as "ossec".
 Input requirements: Syslog data sent to port UDP\514
 ===Using this add-on===
 Configuration: Automatic   
 Syslog data sent to port UDP\514 will automatically be detected as
OSSEC
 data and processed accordingly.OSSEC
 data and processed accordingly.
 To process data that is sent to another
 port, configure the data input with a source type of "ossec".
2. Package the OSSEC add-on by converting it into a zip archive named Splunk_TA-ossec.zip.
139
3. To share your add-on, go to Splunkbase, navigate to the For Developers section, then click Submit your app.
Use the CIM to normalize CPU performance metricsThis example illustrates how to normalize data for CIM-compliance for an IT Service Intelligence use case. The example presents two variations: one using Splunk Web, and another using configuration files from the command line.
Normalize data for CIM-compliance using Splunk Web
Step 1. Get your data in
For the purposes of this example, assume that you have already indexed your data in your Splunk platform. For instructions on adding data, see Getting Data In.Step 2. Examine your data in context of the CIM
Make sure that the data that you want to extract has an object that the CIM contains.
For example, if you want to build a KPI search based on a specific CPU performance metric, such as cpu_load_percent, review the appropriate data models (Performance, Application State) to make sure that the data model lists cpu_load_percent as an object.If the CIM does not contain the specific data you want to extract for your KPI searches, you can use a Splunk add-on or build your own data model.
Step 3. Configure CIM-compliant event tags
1. From your Splunk Web instance, navigate to Settings > Data Models. Find the data model object that you want to map your data to, then identify its associated tags. For example, the cpu_load_percent object in the Performance data model has the following tags associated with it:tag = performance
tag = cpu
2. Create an event type in the Events type manager.
140
a. Go to Settings > Event types.
b. Click New.
c. In the Add new dialog, enter the following:
Destination
App: 	ITSI
Name: 	Name the eventtype. For example, "cpu_metrics."
Search 	Enter a search string for the eventtype. For example,
String: 	sourcetype=test_cpu_log.
Tag(s): 	Enter the tags associated with the data model object you aremapping to. For example, performance, cpu.
Field aliases:Enter the field name as found in your data, then enter the field alias. For example, cpu_percent = cpu_load_percent
3. Click Save.
For more information, see "Define and maintain event types in Splunk Web."
Step 4. Verify your tags
See "Use the CIM to normalize data at search time" for details.
Step 5. Make Fields CIM-compliantStep 5. Make Fields CIM-compliant
1. Create Field Aliases. Go to Settings > Fields > Field Aliases.
2. Click New. In the Add New window, enter the following:
Destination
App: 	Select Destination App ITSI.
Name: 	Enter a name for your field alias.
Apply to: 	Select sourcetype
named: 	Enter the name of the source type (for example,
test_cpu_log).
Note: Field aliasing does not support multi-value fields. For more information,see "Add field aliases."
141
3. Restart the Splunk platform.
4. Create search-time field extractions.
If your event data contains fields that are not found in existing data models or search-time field extractions, you can add those fields using the Field Extractions page in Splunk Web. See "Manage search-time field extractions."
5. Write lookups to add fields and normalize field values.6. Verify fields and values.
Step 5. Validate normalized data against the data model
Now that you have mapped your data to the CIM, you can validate that your data is CIM-compliant using the one of the following methods:
◊ Validate using Pivot in Splunk Web.
◊ Validate using the datamodel command.
Normalize data for CIM-compliance using configuration filesThis section demonstrates how to normalize data for CIM-compliance at search-time using Splunk configuration files.
Step 1. Get your data in
For the purposes of this example, assume that you have already indexed your data in your Splunk platform. For instructions on adding data, see Getting Data In.
Step 2. Examine your data in context of the CIM
Make sure that the CIM contains an object that corresponds to the data that you want to extract.For example, if you want to build a KPI search based on a specific CPU 
performance metric, such as cpu_load_percent, review the appropriate data models (Performance, Application State), and make sure that the data model lists cpu_load_percent as an object.
If the CIM does not contain the specific data you want to extract for your KPI searches, you can use a Splunk add-on or build your own data model.142
Step 3. Configure CIM-compliant event tags
1. Determine which tags are associated with the data model object. In Splunk Web, go to Settings > Data Models.
2. Find the data model object for which you want to normalize your data, then then identify its associated tags. For example, the cpu_load_percent object in the Performance data model uses the following tags:
tag = performance
tag = cputag = performance
tag = cpu
3. Edit (or create) the 
$SPLUNK_HOME/etc/apps/$APPNAME$/local/eventtypes.conf file, then manually add the event type. For example:
[cpu_metrics]
search = sourcetype=test_cpu_log 
For more information, see "Configure event types in eventtypes.conf."
4. Edit (or create) the $SPLUNK_HOME/etc/apps/$APPNAME$/local/tags.conf file, then manually add the appropriate tags for the data model object. For example:[eventtype=cpu_metrics]
performance = enabled
cpu = enabled 
5. Restart the Splunk platform.
Step 4. Verify your tags
See "Use the CIM to normalize data at search time" for details.
Step 5. Make fields CIM-compliant
1. Create field aliases. Note that you can create multiple field alias in a single stanza. In props.conf, create your field alias by adding the following line to a stanza in $SPLUNK_HOME/etc/apps/itsi/local/props.conf:FIELDALIAS- =  AS 
For example:
143
[test_cpu_log]
FIELDALIAS-cpu_percent = cpu_percent AS cpu_load_percent 2. Restart the Splunk platform for your changes to take effect.
For more information, see "Add Field Aliases."
3. Create basic search-time field extractions in props.conf. Create your search-time field extraction by adding an EXTRACT stanza to$SPLUNK_HOME/etc/apps/itsi/local/props.conf:
EXTRACT- = [| in ]
For more information, see "Create search-time field extractions with props.conf."
For information on creating advanced search-time field extractions, see "Create advanced search-time field extractions with field transforms."
Step 6. Validate normalized data against the data modelNow that you have updated your configuration files to map your data to the CIM, validate that your data is CIM-compliant using one of two methods:
◊ Validate using Pivot in Splunk Web.
◊ Validate using the datamodel command.
144