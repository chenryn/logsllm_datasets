### 5
### 7
### 9
### Number of NS-NR Pairs

**Figure 13. One Greedy Receiver Competes with a Varying Number of NS-NR Pairs.**

In this scenario, all receivers experience the same loss rates. As illustrated in Figure 13, the impact of the greedy receiver increases with the loss rate. This is because a higher loss rate provides more opportunities for the greedy receiver to fake ACKs. Additionally, the absolute difference in goodput between the greedy and normal receivers decreases as the number of normal receivers increases, due to a decreasing per-flow goodput. However, the relative difference in goodput remains high across all numbers of receivers considered.

### 6 Evaluation in Testbed

Next, we evaluate the performance impact of greedy receivers in a testbed consisting of four DELL Dimensions 1100 PCs, each equipped with a 2.66 GHz Intel Celeron D Processor 330 and 512 MB of memory. The setup includes two senders and two receivers, with fixed locations on the same floor of an office building. Each node runs Fedora Core 4 Linux and is equipped with 802.11 a/b/g NetGear WAG511 using MadWiFi. In our experiments, we enable RTS/CTS and use a fixed 6 Mbps MAC-layer data rate. We use 802.11a to avoid interference with the campus 802.11b wireless LAN in the building.

Our testbed evaluation focuses on misbehavior 1, as MadWiFi currently does not support the implementation of the other two misbehaviors. Given the trend of moving more functionalities to software, this is not an inherent constraint. We implement misbehavior 1 by inflating the RTS NAV to 32700 µs, which automatically triggers inflated NAV in CTS frames (inflated CTS NAV is 32655 µs). To study the impact of a greedy receiver, we have the sender transmit at the lowest power so that its RTS with inflated NAV is not overheard by the other sender and receiver. Only the CTS frames from the greedy receiver are heard by all other nodes, effectively creating the greedy receiver misbehavior.

**Table 3. Testbed Evaluation of NAV Inflation.**

| No GR (Mbps) | 1 GR (Mbps) | 2 GRs (Mbps) |
|--------------|--------------|---------------|
| NR1: 2.43    | NR: 0.04     | GR1: 4.64     |
| NR2: 3.06    | GR: 4.65     | GR2: 4.37     |
|              |              | UDP: 4.64     |
|              |              | TCP: 4.37     |

The reported goodput is the median over five runs, each lasting two minutes. Without a greedy receiver, both receivers achieve similar goodput. When only one receiver is greedy, the greedy receiver captures virtually all the bandwidth, starving the normal receiver. When both receivers are greedy, the one transmitting earlier dominates the medium and starves the other receiver. These results are consistent with simulation results and confirm the serious damage of greedy misbehavior in real networks.

### 7 Detecting Greedy Receivers

In this section, we present techniques to detect and mitigate greedy receiver misbehaviors. We assume that senders are well-behaved and do not collude with greedy receivers. Figure 14 shows a flow-chart of our countermeasure scheme, which can be implemented at any node in the network, including APs and clients. The more nodes implementing the detection scheme, the higher the likelihood of detection. Next, we describe how to detect inflated NAV, spoofed ACKs, and fake ACKs.

#### 7.1 Detecting Inflated NAV

Inflated NAV affects two sets of nodes: (i) those within communication range of the sender and receiver, and (ii) those outside the communication range of the sender but within the communication range of the receiver. The first set of nodes can directly detect and correct inflated NAV since they overhear the sender’s frame and can compute the correct NAV. The second set of nodes can infer an upper bound on the receiver’s NAV using the maximum data frame size (e.g., 1500 bytes, Ethernet MTU). If the NAV in CTS or ACK exceeds the expected value, a greedy receiver is detected. We can further locate the greedy receiver using received signal strength measurements.

To recover from this misbehavior, nodes will ignore the inflated NAV and replace it with the expected NAV for virtual carrier sense.

#### 7.2 Detecting Spoofed ACKs

To detect greedy receivers that spoof ACKs on behalf of normal receivers, we use their received signal strength. Specifically, let \( \text{RSS}_N \) denote the received signal strength from the original receiver, \( \text{RSS}_C \) denote the received signal strength in the current ACK frame, and \( \text{Thresh}_{cap} \) denote the capture threshold. \( \text{RSS}_N \) can be obtained using a TCP ACK from that receiver, assuming the TCP ACK is not spoofed. If \( \text{RSS}_C \) is significantly different from \( \text{RSS}_N \), the sender reports greedy misbehavior. Furthermore, when \( \text{RSS}_N \geq \text{RSS}_C + \text{Thresh}_{cap} \), the sender can directly recover from this misbehavior by ignoring the received ACK. This is because, in this case, the original receiver must not have received the data and sent an ACK; ignoring such MAC-layer ACKs allows the sender to retransmit the data at the MAC layer as it should.

To examine the feasibility of using RSS measurements for detecting spoofed ACKs, we collect RSSI measurements from our testbed, consisting of 16 nodes spread over one floor of an office building. Our measurements show that around 95% of RSSI measurements differ from the median RSSI of that link by no more than 1 dB. This suggests that RSSI does not change much during a short time interval, and we can use large changes in RSSI to identify spoofed ACKs.

Based on the above observation, a sender determines a spoofed ACK if \( |\text{RSSI}_{\text{median}} - \text{RSSI}_{\text{curr}}| > \text{RSSI}_{\text{Thresh}} \), where \( \text{RSSI}_{\text{median}} \) is the median RSSI from the true receiver, \( \text{RSSI}_{\text{curr}} \) is the RSSI of the current frame, and \( \text{RSSI}_{\text{Thresh}} \) is the threshold.

The accuracy of detection depends on the value of \( \text{RSSI}_{\text{Thresh}} \). Figure 15 plots the false positive and false negative rates as \( \text{RSSI}_{\text{Thresh}} \) varies from 0 to 5 dB, where false positive is how often the sender determines it is a spoofed ACK but in fact it is not, and false negative is how often the sender determines it is not a spoofed ACK but in fact it is. Using 1 dB as the threshold achieves both low false positive and low false negative rates.

The previous detection is effective when RSSI from the normal receiver (NR) is relatively stable and RSSI from the greedy receiver (GR) is different from NR. To handle highly mobile clients, which experience large variations in RSSI, the sender can use a cross-layer approach to detect the greedy behavior. For each TCP flow, it maintains a list of recently received MAC-layer ACKs and TCP ACKs. A greedy receiver is detected when TCP often retransmits the packet for which a MAC-layer ACK has been received. This detection assumes that the wireline loss rate is much smaller than the wireless loss rate, which is generally the case.

#### 7.3 Detecting Faked ACKs

To detect greedy receivers that send MAC-layer ACKs even for corrupted frames, the sender compares the MAC-layer loss with the application layer loss rate. The latter can be estimated using active probing (e.g., ping). Since packets are corrupted, the greedy receiver cannot send a ping response, and we can measure the true application loss rate.

If the loss rate is mainly from the wireless link, \( \text{applicationLoss} \approx \text{MACLoss} \times \text{maxRetries} \) when packet losses are independent. If \( \text{applicationLoss} > \text{MACLoss} \times \text{maxRetries} + \text{threshold} \), the sender detects faked ACKs, where the threshold is used to tolerate loss rate on wireline links when the connection spans both wireless and wireline. The appropriate value of the threshold depends on the loss rate on the wireline links.

### 8 Evaluation of Detection

We implement the greedy receiver countermeasure (GRC) against inflated NAV and ACK spoofing described in Section 7 in NS-2.

**Figure 16. GRC Effectively Detects and Mitigates Inflated CTS NAV.**

First, we evaluate the countermeasure against inflated CTS NAV using the topology in Figure 16(a), where the communication and interference ranges are 55 m and 99 m, respectively. Figure 16(b) compares the UDP performance under the following three cases (from left to right): (i) no greedy receiver, (ii) one greedy receiver with no GRC, and (iii) one greedy receiver with GRC. As we can see, without a greedy receiver, the two flows get similar goodput. The goodput jumps around 99 m because the two senders do not interfere beyond this distance. When R2 is greedy, R2 dominates the medium and completely shuts off R1 when all four nodes are within communication range. Beyond 55 m, R2’s inflated CTS NAV cannot be heard by R1 and S1, so the goodput of the two flows is similar beyond 55 m. Therefore, inflated CTS NAV is effective only when the distance is below 55 m, and we focus on this region. We observe that GRC effectively detects and mitigates the inflated NAV. Specifically, the goodput of the two flows is similar when the distance is below 45 m, since S1 and R1 both hear S2’s RTS and know the true packet size. As the distance further increases, S1 does not hear RTS from S2 and has to assume the maximum packet size of 1500 bytes, which is 46.48% larger than the actual data packet size. In this case, R2 receives higher goodput. Nevertheless, compared with no GRC, the normal receiver no longer starves. Similar trends are observed under TCP traffic, as shown in Figure 16(c).

Next, we consider a greedy receiver that spoofs ACKs. We compare the goodput of two competing flows under varying loss rates, where the loss rates on the two flows are the same and losses are randomly generated. As shown in Figure 17, without a greedy receiver, the goodput of the two flows is similar, both gradually decreasing as the BER increases from 0 to 14e−4. When R2 is greedy, its flow dominates the medium and degrades R1’s performance when no GRC is used. With GRC, both flows fairly share the medium: their goodput closely follows the goodput curves under no greedy receiver. This demonstrates the effectiveness of the GRC.

### 9 Conclusion

As the popularity of hotspot networks continues to grow, it is increasingly important to understand potential misuses and guard against them. In this paper, we identify a range of greedy receiver misbehaviors and evaluate their effects using both simulation and testbed experiments. Our results show that greedy receiver misbehavior can cause serious degradation in other traffic, including starvation. We further develop techniques to detect and mitigate these misbehaviors and demonstrate their effectiveness.

### References

[1] J. Bellardo and S. Savage. 802.11 denial-of-service attacks: Real vulnerabilities and practical solutions. In Proc. of 12th USENIX Security Symposium, Aug. 2003.

[2] M. Cagalj, S. Ganeriwal, I. Aad, and J.-P. Hubaux. On selfish behavior in CSMA/CA networks. In Proc. of IEEE Infocom, Mar. 2005.

[3] IEEE Computer Society LAN MAN Standards Committee. IEEE 802.11: Wireless LAN Medium Access Control and Physical Layer Specifications, Aug. 1999.

[4] Y. Hu and A. Perrig. A survey of secure wireless ad hoc routing. IEEE Security & Privacy, special issue on Making Wireless Work, pages 28–39, 2004.

[5] In-stat. Revenue from wireless hotspots. http://www.in-stat.com/catalog/Wcatalogue.asp?id=167.

[6] ITFacts. http://blogs.zdnet.com/ITFacts/index.php?blogthis=1&p=9319.

[7] D. Kotz and K. Essien. Analysis of a campus-wide wireless network. In Proc. of ACM MOBICOM, Sept. 2002.

[8] A. Kuzmanovic and E. Knightly. Low-rate TCP-targeted denial of service attacks (the shrew vs. the mice and elephants). In Proc. of ACM SIGCOMM, Aug. 2003.

[9] P. Kyasanur and N. Vaidya. Detection and handling of MAC layer misbehavior in wireless networks. In IEEE Transactions on Mobile Computing, Apr. 2004.

[10] The Network Simulator – ns-2. http://www.isi.edu/nsnam/ns/.

[11] M. Raya, J. P. Hubaux, and I. Aad. DOMINO: A system to detect greedy behavior in IEEE 802.11 hotspots. In Proc. of MobiSys, Sept. 2004.

[12] S. Savage, N. Cardwell, D. Wetherall, and T. Anderson. TCP congestion control with a misbehaving receiver. ACM Computer Communications Review, Oct. 1999.

[13] D. Tang. Analysis of a local-area wireless network. In Proc. of MOBICOM, Sept. 2000.

[14] W. Xu, W. Trappe, Y. Zhang, and T. Wood. The feasibility of launching and detecting jamming attacks in wireless networks. In Proc. of ACM MobiHoc, May 2005.