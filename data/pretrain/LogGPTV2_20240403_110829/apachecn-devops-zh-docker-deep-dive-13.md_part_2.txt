```
$ docker volume rm bizvol
Error response from daemon: remove bizvol: volume is in use - [b44d3f82...dd2029ca] 
```
 `卷是全新的，所以没有任何数据。让我们将`exec`放到容器上，并向其中写入一些数据。举了一个 Linux 的例子，如果你在 Windows 上执行，只需在命令的末尾用`pwsh.exe`替换`sh`。所有其他命令将在 Linux 和 Windows 上工作。
```
$ docker container exec -it voltainer sh
/# echo "I promise to write a review of the book on Amazon" > /vol/file1
/# ls -l /vol
total 4
-rw-r--r-- 1 root  root   50 Jan 12 13:49 file1
/# cat /vol/file1
I promise to write a review of the book on Amazon 
```
 `键入`exit`返回到 Docker 主机的外壳，然后用以下命令删除容器。
```
$ docker container rm voltainer -f
voltainer 
```
 `即使容器被删除，卷仍然存在:
```
$ docker container ls -a
CONTAINER ID     IMAGE    COMMAND    CREATED       STATUS
$ docker volume ls
DRIVER              VOLUME NAME
local               bizvol 
```
 `因为该卷仍然存在，所以您可以查看它在主机上的装载点，以检查数据是否仍然存在。
从 Docker 主机的终端运行以下命令。第一个将显示文件仍然存在，第二个将显示文件的内容。
如果你在 Windows 上跟随，一定要使用`C:\ProgramData\Docker\volumes\bizvol\_data`目录。此外，这一步在 Mac 和 Windows 10 的 Docker Desktop 上不起作用。这是因为 Docker Desktop 在虚拟机内部运行 Docker，并且卷数据目录存在于虚拟机内部。
```
$ ls -l /var/lib/docker/volumes/bizvol/_data/
total 4
-rw-r--r-- 1 root root 50 Jan 12 14:25 file1
$ cat /var/lib/docker/volumes/bizvol/_data/file1
I promise to write a review of the book on Amazon 
```
 `太好了，数量和数据依然存在。
甚至可以将`bizvol`卷装入新的服务或容器中。以下命令创建一个新的 Docker 服务，称为 hellcat，并将 bizvol 装载到`/vol`处的服务副本中。您需要在群集模式下运行此命令才能工作。如果你在单引擎模式下运行，你可以使用`docker container run`命令代替。
```
$ docker service create \
  --name hellcat \
  --mount source=bizvol,target=/vol \
  alpine sleep 1d
overall progress: 1 out of 1 tasks
1/1: running   [====================================>]
verify: Service converged 
```
 `我们没有指定`--replicas`标志，所以只部署了一个服务副本。找到它在群中的哪个节点上运行。
```
$ docker service ps hellcat
ID         NAME         NODE      DESIRED STATE     CURRENT STATE
l3nh...    hellcat.1    node1     Running           Running 19 seconds ago 
```
 `在本例中，副本运行在`node1`上。登录`node1`获取服务副本容器的标识。
```
node1$ docker container ls
CTR ID     IMAGE             COMMAND       STATUS        NAMES
df6..a7b   alpine:latest     "sleep 1d"    Up 25 secs    hellcat.1.l3nh... 
```
 `请注意，容器名称是由句点分隔的`service-name`、`replica-number`和`replica-ID`的组合。
执行到容器上，检查数据是否出现在`/vol`中。我们将在`exec`示例中使用服务副本的容器标识。如果你在 Windows 上跟随，记得用`pwsh.exe`代替`sh`。
```
node1$ docker container exec -it df6 sh
/# cat /vol/file1
I promise to write a review of the book on Amazon 
```
 `很好，该卷保留了原始数据，并使其可用于新的容器。
我想是时候跳到亚马逊上写书评了:-D
#### 跨群集节点共享存储
通过将外部存储系统与 Docker 集成，可以在群集节点之间共享卷。这些外部系统可以是云存储服务，也可以是您内部数据中心的企业存储系统。例如，单个存储 LUN 或 NFS 共享可以呈现给多个 Docker 主机，允许容器和服务副本使用它，无论它们运行在哪个 Docker 主机上。图 13.4 显示了呈现给两个 Docker 节点的单个外部共享卷。然后，这些 Docker 节点可以使共享卷对一个容器或两个容器都可用。
![Figure 13.4](img/figure13-4.png)
Figure 13.4
构建这样的设置需要很多东西。您需要访问专门的存储系统，并了解其工作原理和存储方式。您还需要知道应用如何将数据读写到共享存储中。最后，您需要一个与外部存储系统配合使用的卷驱动程序插件。
Docker Hub 是查找卷插件的最佳位置。登录 Docker Hub，选择视图显示`plugins`而不是`containers`，过滤结果只显示`Volume`插件。找到适合您的存储系统的插件后，您可以创建它可能需要的任何配置文件，并用`docker plugin install`安装它。
注册插件后，您可以使用带有`-d`标志的`docker volume create`从存储系统创建新卷。
以下示例安装了纯存储 Docker 卷插件。该插件提供对纯存储闪存阵列或闪存刀片存储系统上的存储卷的访问。插件仅适用于正确的外部存储系统。
1.  纯存储插件需要在 Docker 主机的`/etc/pure-docker-plugin/`目录中有一个名为`pure.json`的配置文件。该文件包含插件定位外部存储系统、进行认证和访问资源所需的信息。
2.  安装插件并授予所需的权限。
```
 $ docker plugin install purestorage/docker-plugin:latest --alias pure --grant-all-permissions
  Plugin "purestorage/docker-plugin:3.8" is requesting the following privileges:
   - network: [host]
   - host pid namespace: [true]
   - mount: [/etc/pure-docker-plugin/pure.json]
   - mount: [/dev]
   - mount: [/sys]
   - allow-all-devices: [true]
   - capabilities: [CAP_SYS_ADMIN CAP_SYS_PTRACE]
  Do you grant the above permissions? [y/N] y 
```
 `1.  列出可用的插件。
```
 $ docker plugin ls
  ID                  NAME                DESCRIPTION                      ENABLED
  6b5e61aefbb3        pure:latest         Pure Storage plugin for Docker   true 
```
 `1.  使用插件创建一个新卷(您也可以在容器创建过程中这样做)。本示例在注册的纯存储后端创建一个名为“fastvol”的 25GB 新卷。
```
 $ docker volume create -d pure -o size=25GB fastvol
  fastvol 
```
 `不同的存储驱动程序支持不同的选项，但这应该足以让您感受到它们是如何工作的。
##### 潜在的数据损坏
在多个容器之间共享单个卷的任何配置的主要问题是**数据损坏**。
假设基于图 13.4 的例子如下。
运行在节点 1 上的 ctr-1 中的应用更新共享卷中的一些数据。但是，它不会将更新直接写入卷，而是将其保存在本地缓冲区中，以便更快地调用(这在许多操作系统中很常见)。此时，ctr-1 中的应用认为数据已经写入卷。但是，在节点 1 上的 ctrl-1 刷新其缓冲区并将数据提交到卷之前，节点 2 上的 ctrl-2 中的应用会用不同的值更新相同的数据，并将其直接提交到卷。此时，两个应用*都认为*已经更新了卷中的数据，但实际上只有 ctr-2 中的应用更新了。几秒钟后，节点-1 上的 ctrl-1 将数据刷新到卷，覆盖了应用在 ctrl-2 中所做的更改。然而，ctr-2 中的应用完全没有意识到这一点！这是数据损坏发生的方式之一。
为了防止这种情况，您需要以一种避免这种情况的方式编写应用。
### 卷和持久数据-命令
*   `docker volume create`是我们用来创建新卷的命令。默认情况下，使用`local`驱动程序创建卷，但是您可以使用`-d`标志来指定不同的驱动程序。
*   `docker volume ls`将列出本地 Docker 主机上的所有卷。
*   `docker volume inspect`显示详细的音量信息。使用此命令可以查看许多有趣的卷属性，包括卷在 Docker 主机文件系统中的位置。
*   `docker volume prune`将删除容器或服务副本未使用的所有卷。**慎用！**
*   `docker volume rm`删除未使用的特定卷。
*   `docker plugin install`将从 Docker Hub 安装新的卷插件。
*   `docker plugin ls`列出安装在 Docker 主机上的所有插件。
### 章节总结
有两种主要的数据类型:持久数据和非持久数据。持久数据是需要保留的数据，非持久数据是不需要保留的数据。默认情况下，所有容器都获得一层可写的非持久存储，它与容器一起生存和死亡——我们称之为*本地存储*，它非常适合非持久数据。但是，如果您的容器创建了需要保留的数据，您应该将数据存储在 Docker 卷中。
在 Docker API 中，Docker 卷是一等公民，并使用自己的`docker volume`子命令独立于容器进行管理。这意味着删除容器不会删除它正在使用的卷。
第三方卷插件可以为 Docker 提供对专用外部存储系统的访问。它们通过`docker plugin install`命令从 Docker Hub 安装，并在卷创建时通过`-d`命令标志引用。
在 Docker 环境中，卷是处理持久数据的推荐方式。``````````````````