% Number
84394
80498
78733
1765
1302
463
183
3896
3194
814
2380
336
54
312
9%
9%
9%
%
100%
95.4%
93%
2.1%
1.5%
0.5%
0.2%
4.6%
3.8%
1%
2.8%
0.4%
0%
0.4%
Table 2: ECN Test Results
SYN packet, or by responding with a TCP Reset [10].
[23] in-
cludes test results showing the fraction of web servers that were
ECN-capable and the fraction of paths to web servers that included
middleboxes blocking TCP SYN segments attempting to negotiate
ECN-capability. The TBIT test for ECN is described in [23].
Table 2 shows the results of the ECN test for 84,394 web servers.
Only a small fraction of servers are ECN-Capable – this percentage
has increased from 1.1% of the web servers tested in 2000 to 2.1%
in 2004. After a web server has successfully negotiated ECN we
send a data segment marked “Congestion Experienced (CE)” and
record whether the mark is reﬂected back to the TBIT client via
the ECN-Echo in the ACK packet. The results are given on lines
I.B.1 and I.B.2 of the table. In roughly three-quarters of cases when
ECN is negotiated, a congestion indication is not returned to the
client. This could be caused by a bug in the web server’s TCP
implementation or a middlebox that is clearing the congestion mark
as the segment traverses the network. Finally, we also observe a
small number of web servers send a malformed SYN/ACK packet,
with both the ECN-Echo and Congestion Window Reduced (CWR)
bits set in the SYN/ACK packet (line I.C of the table).
For 3194 of the web servers, no TCP connection was established.
For our TBIT test, if the initial SYN packet is dropped, TBIT re-
sends the same SYN packet – TBIT does not follow the advice in
RFC 3168 of sending a new SYN packet that does not attempt to
negotiate ECN. Similarly, if TBIT receives a TCP Reset in response
to a SYN packet, TBIT drops the connection, instead of sending a
subsequent SYN packet that does not attempt to negotiate ECN-
capability.
In order to assess how many of these connection failures are
caused by the attempt of ECN negotiation, we run two back-to-
back TBIT tests to each server. The ﬁrst test does not attempt to
negotiate ECN. After a two-second idle period, another connec-
tion is attempted using ECN. We observe that 814 connections (1%
of the web servers, or 25% of the connection failures) are appar-
ently refused because of trying to negotiate ECN, since the connec-
tion was established successfully when no ECN negotiation was
attempted. Table 2 indicates that the fraction of web servers with
ECN-blocking middleboxes on their path has decreased substan-
tially since September 2000 – from 9% in 2000 to 1% in 2004.
We further explored the behavior of ECN-capable servers by
recording the ECT codepoints in the data packets received by TBIT.
Table 3 shows the number of servers from which the different code-
points were observed. TBIT received data packets with the ECT 00
ECN ﬁelds in data packets
ECN-capable servers
Received packets w/ ECT 00 (Not-ECT)
Received packets w/ ECT 01 (ECT(1))
Received packets w/ ECT 10 (ECT(0))
Received packets w/ ECT 11 (CE)
Received packets w/ ECT 00 and ECT 10
Number
1765
758
0
1167
0
174
% of
total
100%
42%
0%
66%
0%
10%
Table 3: Codepoints in data packets from ECN-Capable
Servers
codepoint from about 42% of the ECN-capable servers. The ECN
speciﬁcation deﬁnes two ECT code points that may be used by a
sender to indicate its ECN capabilities in IP packets. The speci-
ﬁcation further indicates that protocols that require only one such
a codepoint should use ECT (1) = 10. We observe that ECN-
capable servers do use ECT(1) and found no server made use of the
ECT (0) = 01 codepoint. We further observe that no router be-
tween our TBIT client and the ECN-capable servers reported Con-
gestion Experienced (CE) in any segment. Finally, TBIT received
both data segments with ECT = 00 and ECT = 10 in the same
connection from about 10% of the ECN-capable servers. This be-
havior may indicate that the ECT code point is being erased by a
network element (e.g. router or middlebox) along the path between
the ECN-capable server and the client.
4.2 Path MTU Discovery
TCP performance is generally proportional to the segment size
employed [16]. In addition, [16] argues that packet fragmentation
can cause poor performance. As a compromise, TCP can use Path
MTU Discovery (PMTUD) [22, 20] to determine the largest seg-
ment that can be transmitted across a given network path without
being fragmented.
Initially, the data sender transmits a segment
with the IP “Don’t Fragment” (DF) bit set and whose size is based
on the MTU of the local network. Routers along the path that can-
not forward the segment without ﬁrst fragmenting it (which is not
allowed because DF is set) will return an ICMP message to the
sender noting that the segment cannot be forwarded because it is
too large. The sender then reduces its segment size and retransmits.
Problems with PMTUD are documented in [17], which notes that
many routers fail to send ICMP messages and many ﬁrewalls and
other middleboxes are often conﬁgured to suppress all ICMP mes-
sages, resulting in PMTUD failure. If the data sender continues to
retransmit large packets with the DF bit set, and fails to receive the
ICMP messages indicating that the large packets are being dropped
along the path, the packets are said to be disappearing into a PM-
TUD black hole. We implemented a PMTUD test in TBIT to assess
the prevalence of web servers using PMTUD, and the success or
failure of PMTUD for these web servers. The test is as follows:
1. TBIT is conﬁgured with a virtual link MTU, M T Uv. In our
tests, we set M T Uv to 256 bytes.
2. TBIT opens a connection to the web server using a SYN seg-
ment that contains an MSS Option of 1460 bytes (which is
based on the actual MTU of the network to which the TBIT
client is attached).
3. The TCP implementation at the server accepts the connec-
tion and sends MSS-sized segments, resulting in transmitted
packets of MSS + 40 bytes.
If the data packets from the
server do not have the DF bit set, then TBIT classiﬁes the
PMTUD Status
Total Number of Servers
I. Classiﬁed Servers
I.A. PMTUD not-enabled
I.B. Proper PMTUD
I.C. PMTUD Failed
II. Errors
II.A. Early Reset
II.B. No Connection
II.C. HTTP Errors
II.D. Others
Number
81776
71737
24196
33384
14157
9956
545
2101
2843
4467
Table 4: PMTUD Test Results
% of
total
100%
88%
30%
41%
17%
12%
0.6%
2.5%
3.4%
5.5%
server as not attempting to use PMTUD. If TBIT receives a
packet with the DF bit set that is larger than M T Uv TBIT re-
jects the packet, and generates an ICMP message to be sent
back to the server.
4. If the server is capable of receiving and processing such ICMP
packets, it will reduce the MSS to the value speciﬁed in the
MTU ﬁeld of the ICMP packet, minus 40 bytes for packet
headers, and resume the TCP connection. In this case, TBIT
accepts the proper-sized packets and the communication com-
pletes.
5. If the server is not capable of receiving and processing ICMP
packets it will retransmit the lost data using the same packet
size. Since TBIT rejects packets that are larger than M T Uv
the communication will eventually time out and terminate
and TBIT classiﬁes the server/path as failing to properly em-
ploy PMTUD.
Table 4 shows that PMTUD is used successfully for slightly less
than half of the servers on our list. For 31% of the servers on our
list, the server did not attempt Path MTU Discovery. For 18% of
the servers on our list, Path MTU Discovery failed, presumably
because of middleboxes that block ICMP packets on the path to the
web server.
Alternate methods for determining the path MTU are being con-
sidered in the Path MTU Discovery Working Group in the IETF,
based on the sender starting with small packets and progressively
increasing the segment size. If the sender does not receive an ACK
packet for the larger packet, it changes back to smaller packets.
In a similar strategy, called black-hole detection, if a packet with
the DF bit set is retransmitted a number of times without being
acknowledged, then the MSS will be set to 536 bytes [2]. We
performed a variant of the PMTUD test in which TBIT does not
send the ICMP packets, to see if any server reduces the size of the
packets sent simply because it didn’t receive an ACK for the larger
packet. We didn’t ﬁnd any servers performing black-hole detection.
Since a non-trivial number of network elements discard well-
known ICMP packets the results of our tests do not offer hope for
protocol designers proposing to use new ICMP messages to signal
various network path properties to end systems (e.g., for explicit
corruption notiﬁcation, handoff or outage notiﬁcation, etc.).
4.3 IP Options
IP packets may contain options to encode additional information
at the end of IP headers. A number of concerns have been raised
regarding the use of IP options. One concern is that the use of IP
options may signiﬁcantly increase the overhead in routers, because
in some cases packets with IP options are processed on the slow
path of the forwarding engine. A second concern is that receiv-
ing IP packets with malformed IP options may trigger alignment
problems on many architectures and OS versions. Solutions to this
problem range from patching the OS, to blocking access to packets
using unknown IP options or using IP options in general. A third
concern is that of possible denial of service attacks that may be
caused by packets with invalid IP options going to network routers.
These concerns, together with the fact that the generation and pro-
cessing of IP options is nonmandatory at both the routers and the
end hosts, have led routers, hosts, and middleboxes to simply drop
packets with unknown IP options, or even to drop packets with stan-
dard and properly formed options. This is of concern to designers
of transport protocols because of proposals for new transport mech-
anisms that would involve using new IP options in transport proto-
cols (e.g., [15, 9]).
TBIT’s IP options test considers TCP connections with three
types of IP options in the TCP SYN packet, the IP Record Route
Option, the IP Timestamp Option, and a new option called IP Op-
tion X, which is an undeﬁned option and represents any new IP
option that might be standardized in the future. We experimented
with two variants of Option X, both of size 4. The ﬁrst variant
uses a copy bit of zero, class bits set to zero and 25 as the option
number. The second variant of IP Option X sets the class bits to a
reserved value, and uses an option number of 31. The results for
experiments with both Option X variants are similar.
100 
98% 
No Connection
Option Ignored
Success
70% 
s
n
o
i
t
c
e
n
n
o
C
f
o
%