## 近似查询处理(Approximate Query Processing) - DataSketches - 压缩、distinct、分位、rank、高频柱状图(count distinct, quantiles, most-frequent items, joins, matrix computations, and graph analysis) 等 实时 大数据 近似分析  
### 作者
digoal
### 日期
2021-05-18
### 标签
PostgreSQL , 近似 , DataSketches , 概率 , 压缩 , distinct , 分位 , rank , 高频柱状图 , count distinct , quantiles , most-frequent items , joins , matrix computations , graph analysis , 实时 大数据 近似分析 , HLL , CPC , KLL , 频率   
----
## 背景
https://github.com/apache/datasketches-postgresql  
## The Business Challenge 商业挑战:   
Analyzing Big Data Quickly.  
## 近似算法库项目 - datasketches  
https://datasketches.apache.org/  
In the analysis of big data there are often problem queries that don’t scale because they require huge compute resources and time to generate exact results. Examples include count distinct, quantiles, most-frequent items, joins, matrix computations, and graph analysis.  
If approximate results are acceptable, there is a class of specialized algorithms, called streaming algorithms, or sketches that can produce results orders-of magnitude faster and with mathematically proven error bounds. For interactive queries there may not be other viable alternatives, and in the case of real-time analysis, sketches are the only known solution.  
For any system that needs to extract useful information from big data these sketches are a required toolkit that should be tightly integrated into their analysis capabilities. This technology has helped Yahoo (Verizon Media) successfully reduce data processing times from days or hours to minutes or seconds on a number of its internal platforms.  
This project is dedicated to providing a broad selection of sketch algorithms of production quality. Contributions are welcome from those interested in further development of this science and art.  
Fast  
Sketches are fast. The sketch algorithms in this library process data in a single pass and are suitable for both real-time and batch. Sketches enable streaming computation of set expression cardinalities, quantiles, frequency estimation and more. In addition, designing a system around sketching allows simplification of system's architecture and reduction in overall compute resources required for these heretofore difficult computational tasks.  
Big Data  
This library has been specifically designed for production systems that must process massive data. The library includes adaptors for Apache Hive, Apache Pig, and PostgreSQL (C++). These adaptors also stand as examples for adaptors for other systems. The sketches in this library are designed to have compatible binary representations across languages (Java, C++, Python) and platforms.  
Analysis  
Built-in Theta Sketch set operators (Union, Intersection, Difference) produce sketches as a result (and not just a number) enabling full set expressions of cardinality, such as ((A ∪ B) ∩ (C ∪ D)) \ (E ∪ F). This capability along with predictable and superior accuracy (compared with Include/Exclude approaches) enable unprecedented analysis capabilities for fast queries.  
## 近似算法库与数据库的整合  
![pic](20210518_01_pic_001.png)  
http://db.cs.berkeley.edu/cs286/papers/flajoletmartin-jcss1985.pdf  
http://db.cs.berkeley.edu/cs286/papers/synopses-fntdb2012.pdf  
https://people.cs.umass.edu/~mcgregor/711S12/sketches1.pdf  
- Probabilistic counting Algorithms for Data Base Applications   
- Synopses for Massive Data: Samples, Histograms, Wavelets, Sketches  
- Sketch Techniques for Approximate Query Processing  
# PG的近似算法库插件  
# PostgreSQL Adaptor for C++ DataSketches  
Please visit the main [DataSketches website](https://datasketches.apache.org) for more information.   
If you are interested in making contributions to this site please see our [Community](https://datasketches.apache.org/docs/Community/) page for how to contact us.  
---  
This module currently supports the following sketches(目前已整合的近似算法库):  
- CPC (Compressed Probabilistic Counting) sketch - very compact (smaller than HLL when serialized) distinct-counting sketch  
- Theta sketch - distinct counting with set operations (intersection, a-not-b)  
- HLL sketch - very compact distinct-counting sketch based on HyperLogLog algorithm  
- KLL float quantiles sketch - for estimating distributions: quantile, rank, PMF (histogram), CDF  
- Frequent strings sketch - capture the heaviest items (strings) by count or by some other weight  
## Examples  
### Distinct counting with CPC sketch  
Suppose 100 million random integer values uniformly distributed in the range from 1 to 100M have been generated and inserted into a table  
Exact count distinct:  
	$ time psql test -c "select count(distinct id) from random_ints_100m"  
	  count  
	----------  
	 63208457  
	(1 row)  
	real	1m59.060s  
Approximate count distinct:  
	$ time psql test -c "select cpc_sketch_distinct(id) from random_ints_100m"  
	 cpc_sketch_distinct   
	---------------------  
	    63423695.9451363  
	(1 row)  
	real	0m20.680s  
Note that the above one-off distinct count is just to show the basic usage. Most importantly, the sketch can be used as an "additive" distinct count metric in a data cube.  
Aggregate union:  
	create table cpc_sketch_test(sketch cpc_sketch);  
	insert into cpc_sketch_test select cpc_sketch_build(1);  
	insert into cpc_sketch_test select cpc_sketch_build(2);  
	insert into cpc_sketch_test select cpc_sketch_build(3);  
	select cpc_sketch_get_estimate(cpc_sketch_union(sketch)) from cpc_sketch_test;  
	 cpc_sketch_get_estimate  
	-------------------------  
	        3.00024414612919  
Non-aggregate union:  
	select cpc_sketch_get_estimate(cpc_sketch_union(cpc_sketch_build(1), cpc_sketch_build(2)));  
	 cpc_sketch_get_estimate   
	-------------------------  
	        2.00016277723359  
### Distinct counting with Theta sketch  
See above for the exact distinct count of 100 million random integers  
Approximate distinct count:  
	$ time psql test -c "select theta_sketch_distinct(id) from random_ints_100m"  
	 theta_sketch_distinct   
	-----------------------  
	      64593262.4373193  
	(1 row)  
	real	0m19.701s  
Note that the above one-off distinct count is just to show the basic usage. Most importantly, the sketch can be used as an "additive" distinct count metric in a data cube.  
Aggregate union:  
	create table theta_sketch_test(sketch theta_sketch);  
	insert into theta_sketch_test select theta_sketch_build(1);  
	insert into theta_sketch_test select theta_sketch_build(2);  
	insert into theta_sketch_test select theta_sketch_build(3);  
	select theta_sketch_get_estimate(theta_sketch_union(sketch)) from theta_sketch_test;  
	 theta_sketch_get_estimate   
	---------------------------  
	                         3  
Non-aggregate set operations:  
	create table theta_set_op_test(sketch1 theta_sketch, sketch2 theta_sketch);  
	insert into theta_set_op_test select theta_sketch_build(1), theta_sketch_build(1);  
	insert into theta_set_op_test select theta_sketch_build(1), theta_sketch_build(2);  
	select theta_sketch_get_estimate(theta_sketch_union(sketch1, sketch2)) from theta_set_op_test;  
	 theta_sketch_get_estimate   
	---------------------------  
	                         1  
	                         2  
	(2 rows)  
	select theta_sketch_get_estimate(theta_sketch_intersection(sketch1, sketch2)) from theta_set_op_test;  
	 theta_sketch_get_estimate   
	---------------------------  
	                         1  
	                         0  
	(2 rows)  
	select theta_sketch_get_estimate(theta_sketch_a_not_b(sketch1, sketch2)) from theta_set_op_test;  
	 theta_sketch_get_estimate   
	---------------------------  
	                         0  
	                         1  
	(2 rows)  
### Distinct counting with HLL sketch  
See above for the exact distinct count of 100 million random integers  
Approximate distinct count:  
	$ time psql test -c "select hll_sketch_distinct(id) from random_ints_100m"  
	 hll_sketch_distinct   
	---------------------  
	    63826337.5738399  
	(1 row)  
	real	0m19.075s  