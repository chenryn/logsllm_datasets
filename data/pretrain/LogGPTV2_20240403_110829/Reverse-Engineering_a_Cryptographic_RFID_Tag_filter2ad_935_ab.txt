each gate into a format suitable for a circuit simulation
program. We decided against this approach because the
overhead seemed excessive. For larger libraries that per-
haps intentionally vary the library cells in an attempt
to impede reverse-engineering, however, automation is
certainly possible and has already been demonstrated in
other projects [2].
Our template matching provides a map of the different
logic gates across the chip. While it would certainly have
been possible to reverse-engineer the whole RFID tag,
we focused our attention on ﬁnding and reconstructing
the cryptographic components. We knew that the stream
cipher would have to include at least a 48-bit register and
a number of XOR gates. We found these components in
one of the corners of the chip along with a circuit that
appeared to be a random number generator as it has an
output, but no input.
Focusing our efforts on only these two parts of the chip,
we reconstructed the connections between all the logic
gates. This step involved considerable manual effort and
was fairly error-prone. All the errors we made were
found through a combination of redundant checking and
statistical tests for some properties that we expected the
cipher to have such as an even output distribution of
blocks in the ﬁlter function. We have since implemented
scripts to automate the detection of wires, which can
speed the process and improve its accuracy. Using our
manually found connections as ground truth we ﬁnd that
our automated scripts detect the metal connection and
intra-layer vias correctly with reasonably high probabil-
ity. In our current tests, our scripts detect over 95% of the
metal connections correctly and the few errors they make
were easily spotted manually by overlaying the source
image and the detection result. These results are, how-
ever, preliminary, as many factors are not yet accounted
for. To assess the potential for automation more thor-
oughly, we plan to test our tools on different chips, us-
ing different imaging systems, and having different users
check the results.
In the process of reconstructing the circuit, we did not
encounter any added obscurity or tamper-prooﬁng. Be-
cause the cryptographic components are highly struc-
tured, they were particularly easy to reconstruct. Fur-
thermore, we could test the validity of different building
blocks by checking certain statistical properties. For ex-
ample, the different parts of the ﬁlter function each have
an even output distribution so that the output bits are not
directly disclosing information about single state bits.
The map of logic gates and the connections between
them provides us with almost enough information to dis-
cover the cryptographic algorithm. Because we did not
reverse-engineer the control logic, we do not know the
exact timing and inputs to the cipher. Instead of recon-
structing more circuitry, we derived these missing pieces
of information from protocol layer communication be-
tween the Mifare card and reader.
2.2 Protocol Analysis
From the discovered hardware circuit, we could not de-
rive which inputs are shifted into the cipher in what or-
der, partly because we did not reverse the control logic,
but also because even with complete knowledge of the
hardware we would not yet have known what data differ-
ent memory cells contain. To add the missing details to
the cipher under consideration, and to verify the results
of the hardware analysis, we examined communication
between the Mifare tags and a Mifare reader chip.
An NXP reader chip is included on the OpenPCD open
source RFID reader, whose ﬂexibility proved to be cru-
cial for the success of our project. The OpenPCD in-
cludes an ARM micro-controller that controls the com-
munication between the NXP chip and the Mifare card.
This setup allows us to record the communication and
provides full control over the timing of the protocol.
Through timing control we can amplify some of the vul-
nerabilities we discovered as discussed in Section 3.
No details of the cipher have been published by the man-
ufacturer or had otherwise been leaked to the public prior
to this work. We guessed that the secret key and the tag
ID were shifted into the shift register sequentially rather
than being combined in a more complicated way. To
test this hypothesis, we checked whether a reader could
successfully authenticate against a tag using an altered
key and an altered ID. Starting with single bit changes
in ID and key and progressively extending our search to
larger variations, we found a number of such combina-
tions that indeed successfully authenticated the reader to
the tag. From the pattern of these combinations we could
derive not just the order of inputs, but also the structure
of the linear feedback shift register, which we had inde-
pendently found on the circuit level. Combining these in-
sights into the authentication protocol with the results of
our hardware analysis gave us the whole Crypto-1 stream
cipher, shown in Figure 2.
The cipher is a single 48-bit linear feedback shift register
(LFSR). From a ﬁxed set of 20 state bits, the one bit of
key stream is computed in every clock cycle. The shift
register has 18 taps (shown as four downward arrows in
188 
17th USENIX Security Symposium 
USENIX Association
Figure 2: Crypto-1 stream cipher and initialization.
the ﬁgure) that are linearly combined to ﬁll the ﬁrst reg-
ister bit on each shift. The update function does not con-
tain any non-linearity, which by today’s understanding of
cipher design can be considered a serious weakness. The
generating polynomial of the register is (with xi being the
ith bit of the shift register):
as fare collection where the value of breaking a partic-
ular key is relatively low. Weaknesses of the random
number generator and the cryptographic protocol allow
an attacker to pre-compute a codebook and perform key-
lookups quickly and cheaply using rainbow tables.
x48 + x43 + x39 + x38 + x36 + x34 + x33 + x31 + x29
+ x24 + x23 + x21 + x19 + x13 + x9 + x7 + x6 + x5 + 1.
The polynomial is primitive in the sense that it is irre-
succession. To conﬁrm this, we converted the Fibonacci
LFSR into a Galois LFSR for which we can compute any
number of steps in a few Galois ﬁeld multiplications. We
ducible and generates all 248 − 1 possible outputs in
then found that the cipher state repeats after 248 − 1
steps, but not after any of the possible factors for this
number. The LSFR is hence of maximum-length.
The protocol between the Mifare chip and reader loosely
follows the ISO 9798-2 speciﬁcation, which describes an
abstract challenge-response protocol for mutual authenti-
cation. The authentication protocol takes a shared secret
key and a unique tag ID as its inputs. At the end of the
authentication, the parties have established a session key
for the stream cipher and both parties are convinced that
the other party knows the secret key.
3 Cipher Vulnerabilities
The 48-bit key used in Mifare cards makes brute-force
key searches feasible. Cheaper than brute-force attacks,
however, are possible because of the cipher’s weak cryp-
tographic structure. While the vulnerability to brute-
force attacks already makes the cipher weak, the cheaper
attacks are relevant for many Mifare deployments such
3.1 Brute-Force Attack
In a brute-force attack an attacker records two challenge-
response exchanges between the legitimate reader and a
card and then tries all possible keys for whether they pro-
duce the same result.
To estimate the expected time for a brute-force attack,
we implemented the cipher on FPGA devices by Pico
Computing. Due to the simplicity of the cipher, 6 fully-
pipelined instances can be squeezed into a single Xilinx
Virtex-5 LX50 FPGA. Running the implementation on
an array of 64 such FPGAs to try all 248 keys takes under
50 minutes.
3.2 Random Number Generation
The random number generator (RNG) used on the Mi-
fare Classic tags is highly insecure for cryptographic ap-
plications and further decreases the attack complexity by
allowing an attacker to pre-compute a codebook.
The random numbers on Mifare Classic tags are gener-
ated using a linear feedback shift register with constant
initial condition. Each random value, therefore, only de-
pends on the number of clock cycles elapsed between the
time the tag is powered up (and the register starts shift-
ing) and the time the random number is extracted. The
numbers are generated using a maximum length 16-bit
LFSR of the form:
USENIX Association  
17th USENIX Security Symposium 
189
x16 + x14 + x13 + x11 + 1.
The register is clocked at 106 kHz and wraps around ev-
ery 0.6 seconds after generating all 65,535 possible out-
put values. Aside from the highly insufﬁcient length of
the random numbers, an attacker that controls the tim-
ing of the protocol controls the generated number. The
weakness of the RNG is ampliﬁed by the fact that the
generating LFSR is reset to a known state every time
the tag starts operating. This reset is completely un-
necessary, involves hardware overhead, and destroys the
randomness that previous transactions and unpredictable
noise left in the register.
We were able to control the number the Mifare random
number circuit generated using the OpenPCD reader
and custom-built ﬁrmware. In particular, we were able
to generate the same “random” nonce in each query,
thereby completely eliminating the tag randomness from
the authentication process. Moreover, we found the same
weakness in the 32-bit random numbers generated by the
reader chip, which suggests that a similar hardware im-
plementation is used in the chip and reader. Here, too,
we were able to repeatedly generate the same number.
While in our experiments this meant controlling the tim-
ing of the reader chip, a skilled attacker will likely be
able to exploit this vulnerability even in realistic scenar-
ios where no such control over the reader is given. The
attacker can predict forthcoming numbers from the num-
bers already seen and precisely chose the time to start
interacting with the reader in order to receive a certain
challenge. The lack of true randomness on both reader
and tag enable an attacker to eliminate any form of ran-
domness from the authentication protocol. Depending
on the number of precomputed codebooks, this process
might take several hours and the attack might not be fea-
sible against all reader chips.
fore, given a key that for some ID results in a session
key, there exists a key for any ID that would result in the
same session key. This bijective mapping allows for a
codebook that was pre-computed for only a single ID to
be used to ﬁnd keys for all other IDs as well.
A codebook for all keys would occupy 1500 Terabytes,
but can be stored more economically in rainbow tables.
Rainbow tables store just enough information from a key
space for ﬁnding any key with high probability, but re-
quire much less space than a table for all keys [9, 15].
Each “rainbow” in these tables is the repeated application
of slight variants of a cryptographic operation.
In our
case, we start with a random key and generate the output
of the authentication protocol for this key, then use this
output as the next key for the authentication, generate its
output, use that as the next key, and so on. We then only
store the ﬁrst and last value of each rainbow, but compute
enough rainbows so that almost all keys appear in one of
them. To ﬁnd a key from such a rainbow table, a new
rainbow is computed starting at a recorded output from
the authentication protocol. If any one of the generated
values in this series is also found in the stored end values
of the rainbows, then the key used in the authentication
protocol can be found from the corresponding start val-
ues of that matching rainbow. The time needed to ﬁnd a
key grows as the size of the tables shrinks.
Determining any card’s secret key will be signiﬁcantly
cheaper than trying out all possible keys even for rain-
bow tables that only occupy a few Terabytes and can
be almost as cheap as a database lookup. The fact that
an attacker can use a pre-computed codebook to reveal
the keys from many cards dramatically changes the eco-
nomics of an attack in favor of the attacker. This means
that even attacks on low-value cards like bus tickets
might be proﬁtable.
3.3 Pre-Computing Keys
3.4 Threat Summary
Several weaknesses of the Mifare card design add up to
what amounts to a full codebook pre-computation. First,