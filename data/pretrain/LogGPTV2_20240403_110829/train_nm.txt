.tp
.b sync_file_range_wait_after
wait upon write-out of all pages in the range
after performing any write.
.pp
specifying
.i flags
as 0 is permitted, as a no-op.
.ss warning
this system call is extremely dangerous and should not be used in portable
programs.
none of these operations writes out the file's metadata.
therefore, unless the application is strictly performing overwrites of
already-instantiated disk blocks, there are no guarantees that the data will
be available after a crash.
there is no user interface to know if a write is purely an overwrite.
on filesystems using copy-on-write semantics (e.g.,
.ir btrfs )
an overwrite of existing allocated blocks is impossible.
when writing into preallocated space,
many filesystems also require calls into the block
allocator, which this system call does not sync out to disk.
this system call does not flush disk write caches and thus does not provide
any data integrity on systems with volatile disk write caches.
.ss some details
.b sync_file_range_wait_before
and
.b sync_file_range_wait_after
will detect any
i/o errors or
.b enospc
conditions and will return these to the caller.
.pp
useful combinations of the
.i flags
bits are:
.tp
.b sync_file_range_wait_before | sync_file_range_write
ensures that all pages
in the specified range which were dirty when
.br sync_file_range ()
was called are placed
under write-out.
this is a start-write-for-data-integrity operation.
.tp
.b sync_file_range_write
start write-out of all dirty pages in the specified range which
are not presently under write-out.
this is an asynchronous flush-to-disk
operation.
this is not suitable for data integrity operations.
.tp
.br sync_file_range_wait_before " (or " sync_file_range_wait_after )
wait for
completion of write-out of all pages in the specified range.
this can be used after an earlier
.b sync_file_range_wait_before | sync_file_range_write
operation to wait for completion of that operation, and obtain its result.
.tp
.b sync_file_range_wait_before | sync_file_range_write | \
sync_file_range_wait_after
this is a write-for-data-integrity operation
that will ensure that all pages in the specified range which were dirty when
.br sync_file_range ()
was called are committed to disk.
.sh return value
on success,
.br sync_file_range ()
returns 0; on failure \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b ebadf
.i fd
is not a valid file descriptor.
.tp
.b einval
.i flags
specifies an invalid bit; or
.i offset
or
.i nbytes
is invalid.
.tp
.b eio
i/o error.
.tp
.b enomem
out of memory.
.tp
.b enospc
out of disk space.
.tp
.b espipe
.i fd
refers to something other than a regular file, a block device, or
a directory.
.sh versions
.br sync_file_range ()
appeared on linux in kernel 2.6.17.
.sh conforming to
this system call is linux-specific, and should be avoided
in portable programs.
.sh notes
.ss sync_file_range2()
some architectures (e.g., powerpc, arm)
need 64-bit arguments to be aligned in a suitable pair of registers.
.\" see kernel commit edd5cd4a9424f22b0fa08bef5e299d41befd5622
on such architectures, the call signature of
.br sync_file_range ()
shown in the synopsis would force
a register to be wasted as padding between the
.i fd
and
.i offset
arguments.
(see
.br syscall (2)
for details.)
therefore, these architectures define a different
system call that orders the arguments suitably:
.pp
.in +4n
.ex
.bi "int sync_file_range2(int " fd ", unsigned int " flags ,
.bi "                     off64_t " offset ", off64_t " nbytes );
.ee
.in
.pp
the behavior of this system call is otherwise exactly the same as
.br sync_file_range ().
.pp
a system call with this signature first appeared on the arm architecture
in linux 2.6.20, with the name
.br arm_sync_file_range ().
it was renamed in linux 2.6.22,
when the analogous system call was added for powerpc.
on architectures where glibc support is provided,
glibc transparently wraps
.br sync_file_range2 ()
under the name
.br sync_file_range ().
.sh see also
.br fdatasync (2),
.br fsync (2),
.br msync (2),
.br sync (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/fgetwc.3
.so man2/lchown.2
.\" copyright (c) 2010 intel corporation, author: andi kleen
.\" and copyright 2014, vivek goyal 
.\" and copyright (c) 2015, michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th kexec_load 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
kexec_load, kexec_file_load \- load a new kernel for later execution
.sh synopsis
.nf
.br "#include " "      /* definition of " kexec_* " constants */"
.br "#include " "      /* definition of " sys_* " constants */"
.b #include 
.pp
.bi "long syscall(sys_kexec_load, unsigned long " entry ,
.bi "             unsigned long " nr_segments \
", struct kexec_segment *" segments ,
.bi "             unsigned long " flags );
.bi "long syscall(sys_kexec_file_load, int " kernel_fd ", int " initrd_fd ,
.bi "             unsigned long " cmdline_len ", const char *" cmdline ,
.bi "             unsigned long " flags );
.fi
.pp
.ir note :
glibc provides no wrappers for these system calls,
necessitating the use of
.br syscall (2).
.sh description
the
.br kexec_load ()
system call loads a new kernel that can be executed later by
.br reboot (2).
.pp
the
.i flags
argument is a bit mask that controls the operation of the call.
the following values can be specified in
.ir flags :
.tp
.br kexec_on_crash " (since linux 2.6.13)"
execute the new kernel automatically on a system crash.
this "crash kernel" is loaded into an area of reserved memory that
is determined at boot time using the
.i crashkernel
kernel command-line parameter.
the location of this reserved memory is exported to user space via the
.i /proc/iomem
file, in an entry labeled "crash kernel".
a user-space application can parse this file and prepare a list of
segments (see below) that specify this reserved memory as destination.
if this flag is specified, the kernel checks that the
target segments specified in
.i segments
fall within the reserved region.
.tp
.br kexec_preserve_context " (since linux 2.6.27)"
preserve the system hardware and
software states before executing the new kernel.
this could be used for system suspend.
this flag is available only if the kernel was configured with
.br config_kexec_jump ,
and is effective only if
.i nr_segments
is greater than 0.
.pp
the high-order bits (corresponding to the mask 0xffff0000) of
.i flags
contain the architecture of the to-be-executed kernel.
specify (or) the constant
.b kexec_arch_default
to use the current architecture,
or one of the following architecture constants
.br kexec_arch_386 ,
.br kexec_arch_68k ,
.br kexec_arch_x86_64 ,
.br kexec_arch_ppc ,
.br kexec_arch_ppc64 ,
.br kexec_arch_ia_64 ,
.br kexec_arch_arm ,
.br kexec_arch_s390 ,
.br kexec_arch_sh ,
.br kexec_arch_mips ,
and
.br kexec_arch_mips_le .
the architecture must be executable on the cpu of the system.
.pp
the
.i entry
argument is the physical entry address in the kernel image.
the
.i nr_segments
argument is the number of segments pointed to by the
.i segments
pointer;
the kernel imposes an (arbitrary) limit of 16 on the number of segments.
the
.i segments
argument is an array of
.i kexec_segment
structures which define the kernel layout:
.pp
.in +4n
.ex
struct kexec_segment {
    void   *buf;        /* buffer in user space */
    size_t  bufsz;      /* buffer length in user space */
    void   *mem;        /* physical address of kernel */
    size_t  memsz;      /* physical address length */
};
.ee
.in
.pp
the kernel image defined by
.i segments
is copied from the calling process into
the kernel either in regular
memory or in reserved memory (if
.br kexec_on_crash
is set).
the kernel first performs various sanity checks on the
information passed in
.ir segments .
if these checks pass, the kernel copies the segment data to kernel memory.
each segment specified in
.i segments
is copied as follows:
.ip * 3
.i buf
and
.i bufsz
identify a memory region in the caller's virtual address space
that is the source of the copy.
the value in
.i bufsz
may not exceed the value in the
.i memsz
field.
.ip *
.i mem
and
.i memsz
specify a physical address range that is the target of the copy.
the values specified in both fields must be multiples of
the system page size.
.ip *
.i bufsz
bytes are copied from the source buffer to the target kernel buffer.
if
.i bufsz
is less than
.ir memsz ,
then the excess bytes in the kernel buffer are zeroed out.
.pp
in case of a normal kexec (i.e., the
.br kexec_on_crash
flag is not set), the segment data is loaded in any available memory
and is moved to the final destination at kexec reboot time (e.g., when the
.br kexec (8)
command is executed with the
.i \-e
option).
.pp
in case of kexec on panic (i.e., the
.br kexec_on_crash
flag is set), the segment data is
loaded to reserved memory at the time of the call, and, after a crash,
the kexec mechanism simply passes control to that kernel.
.pp
the
.br kexec_load ()
system call is available only if the kernel was configured with
.br config_kexec .
.ss kexec_file_load()
the
.br kexec_file_load ()
system call is similar to
.br kexec_load (),
but it takes a different set of arguments.
it reads the kernel to be loaded from the file referred to by
the file descriptor
.ir kernel_fd ,
and the initrd (initial ram disk)
to be loaded from file referred to by the file descriptor
.ir initrd_fd .
the
.ir cmdline
argument is a pointer to a buffer containing the command line
for the new kernel.
the
.ir cmdline_len
argument specifies size of the buffer.
the last byte in the buffer must be a null byte (\(aq\e0\(aq).
.pp
the
.ir flags
argument is a bit mask which modifies the behavior of the call.
the following values can be specified in
.ir flags :
.tp
.br kexec_file_unload
unload the currently loaded kernel.
.tp
.br kexec_file_on_crash
load the new kernel in the memory region reserved for the crash kernel
(as for
.br kexec_on_crash ).
this kernel is booted if the currently running kernel crashes.
.tp
.br kexec_file_no_initramfs
loading initrd/initramfs is optional.
specify this flag if no initramfs is being loaded.
if this flag is set, the value passed in
.ir initrd_fd
is ignored.
.pp
the
.br kexec_file_load ()
.\" see also http://lwn.net/articles/603116/
system call was added to provide support for systems
where "kexec" loading should be restricted to
only kernels that are signed.
this system call is available only if the kernel was configured with
.br config_kexec_file .
.sh return value
on success, these system calls returns 0.
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eaddrnotavail
.\" see kernel/kexec.::sanity_check_segment_list in the 3.19 kernel source
the
.b kexec_on_crash
flags was specified, but the region specified by the
.i mem
and
.i memsz
fields of one of the
.i segments
entries lies outside the range of memory reserved for the crash kernel.
.tp
.b eaddrnotavail
the value in a
.i mem
or
.i memsz
field in one of the
.i segments
entries is not a multiple of the system page size.
.tp
.b ebadf
.i kernel_fd
or
.i initrd_fd
is not a valid file descriptor.
.tp
.b ebusy
another crash kernel is already being loaded
or a crash kernel is already in use.
.tp
.b einval
.i flags
is invalid.
.tp
.b einval
the value of a
.i bufsz
field in one of the
.i segments
entries exceeds the value in the corresponding
.i memsz
field.
.tp
.b einval
.ir nr_segments
exceeds
.br kexec_segment_max
(16).
.tp
.b einval
two or more of the kernel target buffers overlap.
.tp
.b einval
the value in
.i cmdline[cmdline_len\-1]
is not \(aq\e0\(aq.
.tp
.b einval
the file referred to by
.i kernel_fd
or
.i initrd_fd
is empty (length zero).
.tp
.b enoexec
.i kernel_fd
does not refer to an open file, or the kernel can't load this file.
currently, the file must be a bzimage and contain an x86 kernel that
is loadable above 4\ gib in memory (see the kernel source file
.ir documentation/x86/boot.txt ).
.tp
.b enomem
could not allocate memory.
.tp
.b eperm
the caller does not have the
.br cap_sys_boot
capability.
.sh versions
the
.br kexec_load ()
system call first appeared in linux 2.6.13.
the
.br kexec_file_load ()
system call first appeared in linux 3.17.
.sh conforming to
these system calls are linux-specific.
.sh see also
.br reboot (2),
.br syscall (2),
.br kexec (8)
.pp
the kernel source files
.ir documentation/kdump/kdump.txt
and
.ir documentation/admin\-guide/kernel\-parameters.txt
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 rickard e. faith (PI:EMAIL)
.\" portions extracted from /usr/include/dirent.h are:
.\"                    copyright 1991, 1992 free software foundation
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th getdirentries 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
getdirentries \- get directory entries in a filesystem-independent format
.sh synopsis
.nf
.b #include 
.pp
.bi "ssize_t getdirentries(int " fd ", char *restrict " buf ", size_t " nbytes ,
.bi "                      off_t *restrict " basep );