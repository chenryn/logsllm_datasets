# One Hot Garbling

**Authors:**
- David Heath, Georgia Tech, USA
- Vladimir Kolesnikov, Georgia Tech, USA

## Abstract
Garbled Circuits (GCs) are the primary practical technique for 2-party computation (2PC), yet they have resisted significant improvements in performance. Typically, GC functions are evaluated gate-by-gate using encrypted truth tables, and the evaluator decrypts the corresponding output label given input labels.

Interactive protocols, on the other hand, can use more sophisticated techniques, such as exposing a masked private value to a party, allowing them to perform local computations and feed the resulting cleartext back into the MPC. Such techniques have not been effectively applied to GCs.

In this work, we demonstrate that it is possible to enhance GC efficiency while maintaining its round complexity by exposing masked private values to the evaluator. We achieve this through the use of garbled one-hot encodings. This approach improves the performance of several important functions, including matrix multiplication, integer multiplication, field element multiplication, field inverses, AES S-Boxes, and integer exponents. We provide a systematic framework for designing such GC modules.

Our constructions are concretely efficient. For example, we improve binary matrix multiplication within GC by more than 6× in terms of communication and by more than 4× in terms of WAN wall-clock time. Our improvement circumvents an important GC lower bound and may open the door to further enhancements.

**CCS Concepts:**
- Security and privacy → Cryptography
- Theory of computation → Cryptographic protocols

**Keywords:**
- Secure 2PC
- Garbled Circuits

**ACM Reference Format:**
David Heath and Vladimir Kolesnikov. 2021. One Hot Garbling. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 20 pages. https://doi.org/10.1145/3460120.3484764

## 1 Introduction

Garbled circuits (GCs) enable two mutually untrusting parties to compute arbitrary functions of their private inputs while revealing only the outputs. Today, GCs are considered a cryptographic primitive rather than a protocol, and they can be integrated into many secure multiparty computation (MPC) protocols.

The GC primitive allows the circuit generator \( G \) and evaluator \( E \) to communicate a constant number of times, making it challenging to improve. Since Yao first introduced GCs, only a few fundamental improvements have been made.

GCs are typically structured as encryptions of Boolean circuits composed of XOR and AND gates. Most prior work has focused on optimizing these gates, with bandwidth consumption being the primary cost. The widely used half-gates technique [ZRE15] requires \( G \) to send two ciphertexts per AND gate, while XOR gates are communication-free [KS08]. [ZRE15] also established a matching lower bound on AND gate communication, which is difficult to circumvent.

Thus, it is natural to target more complex functions for GC evaluation. Two core-GC improvements have been found:
- Arithmetic GCs [BMR16] generalize Free XOR [KS08] to achieve free additive homomorphisms for arbitrary fields, improving communication for specific scenarios.
- Stacked garbling [HK20a] improves the performance of GCs for functions with conditional branching, but requires exclusive conditional behavior.

### Our Work
We show that a number of useful functions can be greatly improved by operating over a garbled one-hot encoding. Specifically, suppose the GC holds two bit vectors \( a \in \{0, 1\}^n \) and \( b \in \{0, 1\}^m \). If \( E \) knows \( a \) in cleartext, our central primitive allows \( G \) and \( E \) to compute the following \( 2^n \times m \) matrix inside the GC extremely efficiently:

\[
\begin{pmatrix}
0 & 0 & \cdots & 0 \\
b_0 & 0 & \cdots & 0 \\
0 & b_1 & \cdots & 0 \\
\vdots & \vdots & \ddots & \vdots \\
0 & 0 & \cdots & b_{m-1} \\
\end{pmatrix}
\]

In this matrix, row \( a \), viewed as \( a \in \{0, 2^n-1\} \), is the only non-zero row.

This primitive, which we call a one-hot outer product, can be used to implement several important functions, improving the GC bandwidth consumption for matrix multiplication, integer multiplication, field multiplication, field inverses, AES S-Boxes, and integer exponents. We develop a framework for designing such ready-to-use modules, which can be freely composed in GC.

### Contribution
Non-interactivity is a key advantage of GC, but it also limits the set of building blocks. Essentially, we only know how to evaluate GC functions using encrypted truth tables. In this work, we show that it is possible to improve GC efficiency by exposing masked private values to \( E \). By doing so, we circumvent the [ZRE15] GC lower bound and open GC for further improvement. Specifically, we:
1. Introduce a new GC gate primitive that computes a one-hot outer product for only \( 2(n - 1) + m \) ciphertexts.
2. Provide numerous constructions that utilize this new primitive to implement improved GC modules.
3. Formalize a framework that allows new one-hot-based modules to be easily plugged in.
4. Implement our approach in C++ and provide experimental evaluation.

### High-Level Intuition
Let \( H(\cdot) \) denote the function that maps a bit vector to its corresponding one-hot encoding. For \( a \in \{0, 1\}^n \), \( H(a) \) is a length-\( 2^n \) bit vector that is zero everywhere except at index \( a \), where it is one. Let \( a \in \{0, 1\}^n \) and \( b \in \{0, 1\}^m \) be two bit vectors, and suppose \( E \) holds garblings of these values. Our lowest-level primitive allows \( E \) to efficiently construct a garbling of the following matrix:

\[
H(a) \otimes b
\]

where \( \otimes \) denotes the vector outer product operation. This matrix has dimension \( 2^n \times m \), but the parties construct the output using only \( O(n + m)\kappa \) bits of communication, for security parameter \( \kappa \).

Our construction has one limitation: \( E \) must know \( a \). Nevertheless, we build several useful GC constructions from this low-level primitive, even if \( E \) does not know the input.

Our constructions use two key ideas:
1. The garbled one-hot encoding of a value is, in a sense, fully homomorphic. For any public function \( f \), the following equality holds:
   \[
   T(f)^\top \cdot H(a) = f(a)
   \]
   If \( E \) knows \( a \), we can map a garbling of \( H(a) \) to a garbling of \( f(a) \) without communication.
2. We can reveal masked intermediate circuit values in cleartext to \( E \). This way, \( E \) learns nothing, yet can use the one-hot primitive to compute \( f \) of the masked \( a \). In many cases, simple algebra can cheaply undo the masking and obtain \( f(a) \) inside GC, where \( E \) does not know \( a \).

## 2 Related Work

Our work is part of a line of research aimed at improving the practical performance of GCs, with a focus on communication reduction. 

Practical GC research has long focused on efficient evaluation of AND/XOR gates. [NPS99] introduced the first GC communication improvement: garbled row reduction. Later, [KS08] provided the important Free XOR optimization, eliminating the communication cost of XOR gates. Garbled gates were gradually improved [PSSW09, KMR14], and the half-gates technique [ZRE15] reduced AND gate communication to two ciphertexts. [GLNP18] showed that similar costs (two ciphertexts per AND and one per XOR) are possible even with one-way functions. Recently, a new "three-halves" garbling technique [RR21] reduced AND gate communication to 1.5 ciphertexts, though it has not yet been implemented. We focus our comparison on the widely available half-gates technique, noting that [RR21]'s construction is compatible with and complementary to our technique.

Despite these improvements, they have been small. For example, half-gates improved over the prior state-of-the-art [KMR14] by only 1.5× in the pessimal case.