ited technical knowledge. The GoodUSB daemon provides a basic
mode to abstract away low-level interface decisions, simplifying
device administration for regular users. Additionally, the daemon’s
security image component speeds up the process of authorizing de-
vices on subsequent connections.
One obstacle to the deployment of GoodUSB is the requirement
Instrumenting the kernel is necessary to in-
of a custom kernel.
troduce a security mechanism into the USB stack. To ease the
installation and conﬁguration of GoodUSB, we will be releasing
GoodUSB in multiple formats upon publication. In addition to a
kernel patch, we will also publish a prebuilt x86-64 GoodUSB ker-
nel image for Ubuntu Linux users. Additionally, we will provide a
preconﬁgured GoodUSB KVM image, as well as a separate KVM
image for HoneyUSB, in order to make deployment of GoodUSB
feasible and straightforward.
6.1 Future Work
GoodUSB is a ﬁrst step in hardening the USB stack from sophis-
ticated attacks. In future work, we intend to move up the stack to
explore USB drivers. While best practices in software engineering
encourage drivers to support as many devices as possible, this in-
herently violates the principle of least privilege, providing a device
with more abilities than it actually needs. We plan to perform a
driver analysis that explores this problem in depth. We also intend
to analyze some of the more popular user space drivers, such as
usbmuxd, and instrument them to provide ﬁle-level provenance
so their actions on the system may be better understood.
We also hope to add more features to the GoodUSB architecture.
One such feature is to let the proﬁling phase of HoneyUSB inform
the available device-to-interface mappings in the gud graphical in-
terface, thereby automating the process of adding new mappings
to the policy engine. We also hope to use HoneyUSB proﬁles
to improve GoodUSB’s ability to predict the purpose of vendor-
speciﬁc interface requests, allowing gud to display the actual ex-
pected driver to be loaded to the user.
7. RELATED WORK
Awareness of the USB attack vector has increased notably due
to its presence in high-proﬁle malware families including Stuxnet
[12], Conﬁcker [36], and Flame [38]. Myriad proposals have ap-
peared in the literature to protect against using USB storage devices
for exﬁltration and installing malicious payloads [11, 30, 37, 40].
Schumilo et al. present a USB fuzzer that can be used to harden
drivers against exploitable software ﬂaws, which improves security
at the driver layer by improving the internal logic of device-speciﬁc
drivers [35]. These security mechanisms operate at higher layers of
the USB stack (i.e., the speciﬁc driver layer), which is insufﬁcient
to defend against BadUSB attacks.
Very few existing security solutions are positioned to defend
against malicious USB ﬁrmware. Yang et al. propose a trust man-
agement scheme that mediates use of USB storage devices in in-
dustrial control systems [40]. While they consider the BadUSB
attack, they conclude that they cannot prevent malicious storage
device from requesting additional interfaces. Secure USB devices
such as IronKey [18] can prevent BadUSB attacks by using signed
ﬁrmware, provided that the device manufacturer is trusted and the
signing key is kept safe. Unfortunately, these devices are costly,
and have not overtaken traditional USB devices in most enterprise
environments. Moreover, some organizations may be concerned
about state-sponsored attacks in which the device manufacturer has
been coerced into sharing their signing keys. GoodUSB provides
additional assurance that even “Secure” USB devices are behaving
correctly.
GoodUSB leverages virtual honeypots, which have also appeared
elsewhere in the literature. Provos’ Honeyd system provides in-
sight into network attacks by deploying virtual machines honeypots
in arbitrary routing topologies [33]. Poeplau and Gassen present
Ghost, a honeypot for USB storage [32]. The aim of Ghost is to de-
tect the propagation of malicious USB storage payloads, which it
accomplishes through emulating a storage device that periodically
connects to potentially infected machines. In contrast, GoodUSB’s
honeypot emulates a USB host, using hardware virtualization to
hoist the entire USB controller into the virtual machine. Because it
emulates the device and not the host, Ghost cannot detect BadUSB
attacks. The GoodUSB honeypot provides a more general archi-
tecture that can proﬁle malicious USB storage payloads as well
as BadUSB attacks that covertly request privileged interfaces; this
comes at an increased computational resource cost, as an entire host
needs to be emulated instead of just a USB device.
A vital component of the GoodUSB architecture is the ability to
identify devices that have previously connected to the host. De-
vice identiﬁcation is an especially difﬁcult problem due to the un-
availability of trusted hardware to bootstrap host-to-device attes-
tation. As an alternative to trusted hardware, device ﬁngerprinting
schemes attempt to leverage innate characteristics (e.g., power, tim-
ing) of the device in order to establish identity. Fingerprint schemes
for 802.11 devices have been proposed that leverage passive [13]
and active [23] timing analysis, as well as radio frequency metrics
[24, 4]. Gerdes et al. identify Ethernet cards through analysis of the
analog signal of network packets [14]. Gupta et al. ﬁngerprint elec-
tronic devices using the electromagnetic interference generated by
switch mode power supplies [15]. Daneve et al. ﬁngerprint RFID
cards through extraction of the modulation shape and spectral fea-
tures of the signals emitted by the transponder [9]. While we con-
sidered incorporating a ﬁngerprint mechanism into GoodUSB, it
is unclear if these approachs could be successfuly applied to USB
Devices. Power analysis may be frustrated by the fact that the de-
vice is powered by the host. These ﬁngerprint schemes also make
the assumption of a benign target that is not attempting to evade
detection; in our threat model, the adversary could attempt to mod-
ify its ﬁngerprint to avoid detection, thereby complicating timing
analysis. As a result of these pitfalls, GoodUSB does not attempt
to perform device ﬁngerprinting. Instead, it attempts to catch a ma-
licious device in its lie by checking its requested interfaces against
the user’s expectations.
Unlike host-to-device identiﬁcation, a variety of proposals lever-
age the USB interface to perform device-to-host identiﬁcation. Wang
et al. [39] and Davis [10] independently observe that variations in
protocol implementations leak information about the host operat-
ing system; however, these schemes would not be effective against
an active ﬁngerprint target, as demonstrated by Bates et al.
[2].
Timing analysis of USB packets has also proven to be an effective
means of identifying the host operating system [22], and even of-
fers limited ability to differentiate between instances of identically-
deployed machines [2]. Butler et al. present a mechanism for host
veriﬁcation that performs TPM attestations over the USB interface
[6]; however, trusted hardware is a not a panacea due to the threat
of cuckoo attacks [29].
GoodUSB’s user notiﬁcations contain a security image compo-
nent. Graphical password systems were recently surveyed by Bid-
dle et al. [3]. Passfaces is a recognition-based system for general
authentication in which, during login, users choose a pre-selected
face from a panel of candidate faces [5]. The Story system is
also recognition-based; users select a portfolio of random images,
and during login they must select their images in the correct se-
quence from amidst a portfolio of decoys. To prevent a BadUSB
device from masquerading as another device, GoodUSB uses a
recognition-based system to succinctly represent the claimed de-
vice identity. Unlike full-ﬂedged graphical password systems, Good-
USB’s security images serve to provide an intuitive binding be-
tween a device and its requested interfaces. As a result, password
guessing attacks are not a concern. Unfortunately, security images
have been shown to be of limited utility on banking websites [34].
The strength of our security image component relies on the assump-
tion that employees in an enterprise environment that have under-
gone security training will be more capable of identifying suspi-
cious activity compared to typical banking customers.
8. CONCLUSION
USB attacks are becoming more sophisticated, affecting all classes
of USB device instead of just storage. To date, there has been no
practical defensive solution against BadUSB attacks, which expose
the fundamental vulnerabilities of unconstrained privileges in USB
devices. In this work, we present the design and implementation
of GoodUSB, which enforces permissions of devices by encoding
user expectations into USB driver loading. GoodUSB provides a
security image component for better user experience and a honey-
pot mechanism for proﬁling suspicious USB devices. Outside of
delays associated with user input, GoodUSB’s performance over-
head during USB enumeration is just 5.2% (about 7 milliseconds).
With this new method of constraining privilege of USB devices,
users and administrators now possess a powerful new tool for se-
curing their computers, permitting the re-introduction of these valu-
able devices back into the enterprise. The code and data used for
GoodUSB as well as modiﬁed Linux distributions are available at
our website, www.ﬂorida-security.org.
9. ACKNOWLEDGEMENTS
This work is supported in part by the US National Science Foun-
dation under grant numbers CNS-1540217 and CNS-1540218, as
well as by the Florida Cyber Consortium.
10. REFERENCES
[1] M. Al-Zarouni. The Reality of Risks from Consented Use of
USB Devices. School of Computer and Information Science,
Edith Cowan University, Perth, Western Australia, 2006.
[2] A. Bates, R. Leonard, H. Pruse, K. R. Butler, and D. Lowd.
Leveraging USB to Establish Host Identity Using
Commodity Devices. In Proceedings of the 2014 Network
and Distributed System Security Symposium, NDSS ’14,
February 2014.
[3] R. Biddle, S. Chiasson, and P. Van Oorschot. Graphical
Passwords: Learning from the First Twelve Years. ACM
Comput. Surv., 44(4):19:1–19:41, Sept. 2012.
[4] V. Brik, S. Banerjee, M. Gruteser, and S. Oh. Wireless
Device Identiﬁcation with Radiometric Signatures. In
Proceedings of the 14th ACM International Conference on
Mobile Computing and Networking, MobiCom ’08, Sept.
2008.
[5] S. Brostoff and M. Sasse. Are Passfaces More Usable Than
Passwords? A Field Trial Investigation. In People and
Computers XIV – Usability or Else!, pages 405–424.
Springer London, 2000.
[6] K. Butler, S. McLaughlin, and P. McDaniel. Kells: A
Protection Framework for Portable Data. In Proceedings of
the 26th Annual Computer Security Applications Conference,
ACSAC ’10, Austin, TX, USA, Dec. 2010.
[7] A. Caudill and B. Wilson. Phison 2251-03 (2303) Custom
Firmware & Existing Firmware Patches (BadUSB). GitHub,
26, Sept. 2014.
[8] Compaq, Hewlett-Packard, Intel, Microsoft, NEC, and
Phillips. Universal Serial Bus Speciﬁcation, Revision 2.0,
April 2000.
[9] B. Danev, T. S. Heydt-Benjamin, and S. Capkun.
Physical-layer Identiﬁcation of RFID Devices. In
Proceedings of the 18th USENIX Security Symposium, Aug.
2009.
[10] A. Davis. Revealing Embedded Fingerprints: Deriving
Intelligence from USB Stack Interactions. In Blackhat USA,
July 2013.
[11] S. A. Diwan, S. Perumal, and A. J. Fatah. Complete security
package for USB thumb drive. Computer Engineering and
Intelligent Systems, 5(8):30–37, 2014.
[12] N. Falliere, L. O. Murchu, and E. Chien. W32. Stuxnet
Dossier. 2011.
[13] J. Franklin, D. McCoy, P. Tabriz, V. Neagoe, J. V. Randwyk,
and D. Sicker. Passive Data Link Layer 802.11 Wireless
Device Driver Fingerprinting. In Proceedings of the 15th
USENIX Security Symposium, Aug. 2006.
[14] R. M. Gerdes, T. E. Daniels, M. Mina, and S. F. Russell.
Device Identiﬁcation via Analog Signal Fingerprinting: A
Matched Filter Approach. In Proceedings of the 2006
Network and Distributed System Security Symposium, NDSS
’06, Feb. 2006.
[15] S. Gupta, M. S. Reynolds, and S. N. Patel. ElectriSense:
Single-point Sensing Using EMI for Electrical Event
Detection and Classiﬁcation in the Home. In Proceedings of
the 12th ACM International Conference on Ubiquitous
Computing, UBICOMP ’10, Sept. 2010.
[16] Hak5. Episode 709: USB Rubber Ducky Part 1.
http://hak5.org/episodes/episode-709, 2013.
[17] Hak5. USB Rubber Ducky Payloads. https://github.com/
hak5darren/USB-Rubber-Ducky/wiki/Payloads, 2013.
[18] Imation. Ironkey. http://www.ironkey.com/en-US/resources/,
2013.
[19] Imation. IronKey Secure USB Devices Protect Against
BadUSB Malware. http://www.ironkey.com/en-US/
solutions/protect-against-badusb.html, 2014.
[20] S. Kamkar. USBdriveby. http://samy.pl/usbdriveby/, 2014.
[21] J. Lee, L. Bauer, and M. Mazurek. The effectiveness of
security images in internet banking. Internet Computing,
IEEE, 19(1):54–62, Jan 2015.
[22] L. Letaw, J. Pletcher, and K. Butler. Host Identiﬁcation via
USB Fingerprinting. In IEEE Sixth International Workshop
on Systematic Approaches to Digital Forensic Engineering,
SADFE ’11, May 2011.
[23] D. Loh, C. Y. Cho, C. P. Tan, and R. S. Lee. Identifying
Unique Devices Through Wireless Fingerprinting. In
Proceedings of the 1st ACM Conference on Wireless Network
Security, WiSec ’08, Apr. 2008.
[24] N. T. Nguyen, G. Zheng, Z. Han, and R. Zheng. Device
Fingerprinting to Enhance Wireless Security Using
Nonparametric Bayesian Method. In Proceedings of the 30th
IEEE International Conference on Computer
Communications, INFOCOM ’11, Apr. 2011.
[25] K. Nohl and J. Lehl. BadUSB – On Accessories That Turn
Evil. In Blackhat USA, Aug. 2014.
[26] OLEA Kiosks, Inc. Malware Scrubbing Cyber Security
Kiosk. http://www.olea.com/product/cyber-security-kiosk/,
2015.
[27] Open Source Security,Inc. grsecurity. https://grsecurity.net/,
2013.
[28] OPSWAT. Metascan.
https://www.opswat.com/products/metascan, 2013.
[29] B. Parno. Bootstrapping Trust in a "Trusted" Platform. In
Proceedings of the 3rd USENIX Workshop on Hot Topics in
Security, HotSec ’08, Aug. 2008.
[30] D. V. Pham, M. N. Halgamuge, A. Syed, and P. Mendis.
Optimizing Windows Security Features to Block Malware
and Hack Tools on USB Storage Devices. In Progress in
Electromagnetics Research Symposium, 2010.
[31] PJRC. Teensy 3.1.
https://www.pjrc.com/teensy/teensy31.html, 2013.
[32] S. Poeplau and J. Gassen. A Honeypot for Arbitrary Malware
on USB Storage Devices. In 7th International Conference on
Risk and Security of Internet and Systems, CRiSIS ’12, Oct.
2012.
[33] N. Provos. A Virtual Honeypot Framework. In Proceedings
of the 13th USENIX Security Symposium, Aug. 2004.
[34] S. Schechter, R. Dhamija, A. Ozment, and I. Fischer. The
Emperor’s New Security Indicators. In 28th IEE Symposium
on Security and Privacy, SP’07, May 2007.
[35] S. Schumilo, R. Spenneberg, and H. Schwartke. Don’t trust
your USB! How to ﬁnd bugs in USB device drivers. In
Blackhat Europe, Oct. 2014.
[36] S. Shin and G. Gu. Conﬁcker and Beyond: A Large-scale
Empirical Study. In Proceedings of the 26th Annual
Computer Security Applications Conference, ACSAC ’10,
pages 151–160, New York, NY, USA, 2010. ACM.
[37] A. Tetmeyer and H. Saiedian. Security Threats and
Mitigating Risk for USB Devices. Technology and Society
Magazine, IEEE, 29(4):44–49, winter 2010.
[38] J. Walter. "Flame Attacks": Brieﬁng and Indicators of
Compromise. McAfee Labs Report, May 2012.
[39] Z. Wang and A. Stavrou. Exploiting Smart-phone USB
Connectivity for Fun and Proﬁt. In Proceedings of the 26th
Annual Computer Security Applications Conference, ACSAC
’10, 2010.
[40] B. Yang, D. Feng, Y. Qin, Y. Zhang, and W. Wang. TMSUI:
A Trust Management Scheme of USB Storage Devices for
Industrial Control Systems. Cryptology ePrint Archive,
Report 2015/022, 2015. http://eprint.iacr.org/.
[41] yubico. yubikey.
https://www.yubico.com/products/yubikey-hardware/, 2015.
[42] P. Zaitcev. The usbmon: USB Monitoring Framework.
http://people.redhat.com/zaitcev/linux/OLS05_zaitcev.pdf,
2005.