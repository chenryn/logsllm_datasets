### GoodUSB: Enhancing USB Security Through Device Administration and Honeypot Mechanisms

#### Abstract
GoodUSB is a security solution designed to harden the USB stack against sophisticated attacks, including BadUSB. The system introduces a daemon that simplifies device administration for regular users by abstracting low-level interface decisions. Additionally, it includes a security image component to speed up the authorization process for subsequent connections. This paper discusses the deployment challenges, future work, and related research in the field.

#### 1. Introduction
The GoodUSB daemon provides a basic mode that abstracts away low-level interface decisions, making device administration more straightforward for regular users. The daemon's security image component also accelerates the authorization of devices on subsequent connections.

#### 2. Deployment Challenges
One significant obstacle to deploying GoodUSB is the requirement for a custom kernel. Instrumenting the kernel is necessary to introduce a security mechanism into the USB stack. To ease installation and configuration, we will release GoodUSB in multiple formats:
- A kernel patch.
- A prebuilt x86-64 GoodUSB kernel image for Ubuntu Linux.
- A preconfigured GoodUSB KVM image.
- A separate KVM image for HoneyUSB.

These formats aim to make the deployment of GoodUSB feasible and straightforward.

#### 3. Future Work
GoodUSB represents a first step in hardening the USB stack against sophisticated attacks. Future work will focus on exploring USB drivers. While best practices in software engineering encourage drivers to support as many devices as possible, this inherently violates the principle of least privilege. We plan to perform a driver analysis to explore this issue in depth and analyze popular user space drivers like `usbmuxd` to provide file-level provenance.

We also intend to add more features to the GoodUSB architecture:
- Automate the process of adding new mappings to the policy engine by using the profiling phase of HoneyUSB.
- Improve GoodUSB’s ability to predict the purpose of vendor-specific interface requests, allowing the graphical interface (gud) to display the expected driver to be loaded.

#### 4. Related Work
Awareness of the USB attack vector has increased due to high-profile malware families such as Stuxnet, Conficker, and Flame. Various proposals have been made to protect against USB storage devices used for exfiltration and installing malicious payloads. Schumilo et al. present a USB fuzzer to harden drivers against exploitable software flaws, but these mechanisms operate at higher layers of the USB stack, which is insufficient to defend against BadUSB attacks.

Few existing solutions can defend against malicious USB firmware. Yang et al. propose a trust management scheme for USB storage devices in industrial control systems, but they cannot prevent malicious storage devices from requesting additional interfaces. Secure USB devices like IronKey use signed firmware, but they are costly and not widely adopted. GoodUSB provides additional assurance that even "Secure" USB devices are behaving correctly.

GoodUSB leverages virtual honeypots, similar to Provos’ Honeyd system and Poeplau and Gassen’s Ghost. However, GoodUSB emulates a USB host using hardware virtualization, providing a more general architecture that can profile both malicious USB storage payloads and BadUSB attacks, albeit at a higher computational cost.

A critical component of GoodUSB is the ability to identify previously connected devices. Device identification is challenging due to the lack of trusted hardware. Alternative fingerprinting schemes have been proposed, but their applicability to USB devices is uncertain. GoodUSB does not attempt to perform device fingerprinting; instead, it checks requested interfaces against user expectations.

#### 5. Conclusion
USB attacks are becoming more sophisticated, affecting all classes of USB devices. GoodUSB enforces device permissions by encoding user expectations into USB driver loading, providing a security image component for better user experience, and a honeypot mechanism for profiling suspicious USB devices. With minimal performance overhead, GoodUSB offers a powerful tool for securing computers and reintroducing valuable USB devices into the enterprise.

#### 6. Acknowledgements
This work is supported in part by the US National Science Foundation under grant numbers CNS-1540217 and CNS-1540218, as well as by the Florida Cyber Consortium.

#### 7. References
[1] M. Al-Zarouni. The Reality of Risks from Consented Use of USB Devices. School of Computer and Information Science, Edith Cowan University, Perth, Western Australia, 2006.
[2] A. Bates, R. Leonard, H. Pruse, K. R. Butler, and D. Lowd. Leveraging USB to Establish Host Identity Using Commodity Devices. In Proceedings of the 2014 Network and Distributed System Security Symposium, NDSS ’14, February 2014.
[3] R. Biddle, S. Chiasson, and P. Van Oorschot. Graphical Passwords: Learning from the First Twelve Years. ACM Comput. Surv., 44(4):19:1–19:41, Sept. 2012.
...
[42] P. Zaitcev. The usbmon: USB Monitoring Framework. http://people.redhat.com/zaitcev/linux/OLS05_zaitcev.pdf, 2005.