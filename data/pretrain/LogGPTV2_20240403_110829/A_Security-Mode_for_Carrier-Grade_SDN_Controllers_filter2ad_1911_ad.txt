level PBAC policy is evaluated and enforced at runtime. Accordingly,
this mechanism necessarily performs a permission check for each
API call via Java’s native security manager, and since applications
frequently make API calls, this may significantly affect the overall
performance of the system. Indeed, we observe that although there
are only a few types of application permissions to be checked at
runtime, the performance penalty is significant. For example, if an
application calls a Northbound API that requires PACKET_READ
permission for the first time, SM-ONOS should perform a permis-
sion check. Once verified, the application should be able to call any
APIs that require PACKET_READ permission without additional
permission checks. We therefore employ a checked-permission
cache mechanism to help accelerate permissions enforcement on
repeated operations.
The challenge of implementing this cache is determining a key
value that SM-ONOS can compute and obtain a unique and consis-
tent value for the same type of permission checks (or API calls). In
SM-ONOS, the key value is calculated based on the hash values of
all the OSGi bundle instances involved in the calling context and
required permission instance. To be more specific, if the forwarding
application, for example, calls an API that issues a flow rule for the
A Security-Mode for Carrier-Grade SDN Controllers
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
first time, the context of the call may include onos-app-fwd, onos-
api, onos-core-net, and onos-of OSGi bundles, and SM-ONOS will
leverage OSGi’s security manager to verify if these bundles have
FLOWRULE_WRITE permission or not. In our caching mechanism,
SM-ONOS obtains and combines the hash values of these bundle
and permission instances and uses the combined value as a key
value for the cache. On each cache-miss, this key value and the
permission check result is stored to avoid any duplicate permission
checks.
6 IMPLEMENTATION
In response to the demand of a usable, practical and effective secu-
rity feature for ONOS, this SM-ONOS project was collaboratively
initiated since its initial proposal stage. As the security feature for
the Cardinal release of ONOS, the design and the progress of this
project has been open to the public domain via the community
sessions hosted by ON.Lab just like any other official ONOS fea-
tures. At the time of writing, this project is under its development
stage and the complete source code is available as a part of the Emu
release.
7 EVALUATION
In this section, we evaluate our work by introducing use case scenar-
ios and measuring the performance impact of our security extension
to ONOS.
7.1 Use case scenarios
In Section 3, we examined the underlying motivations for defining
SM-ONOS’s access control mechanisms. Using these security ex-
tensions, one can now conduct ONOS application vetting with a
full understanding of each app’s service and API usage needs, and
deny-by-default any usage attempts that have not been explicitly re-
viewed and granted by the operator. One can also use network-level
access controls to configure each ONOS application in a manner
that minimizes interference that may arise among peer apps. SM-
ONOS introduces several key security functions that we believe
will be useful for a wide range of scenarios, offering to improve
the stability and the security posture of its hosted networks. The
following are examples of several of these potential usage scenarios.
Scenario 1: Access-aware ONOS application selection. An
obvious usage scenario arises when an ONOS operator considers
selection of a flow management function that is available from more
than one candidate ONOS application. For example, the application
may be consistent in both bundle type and application role. Further-
more, each application’s manifest enumerates those services and
API calls required to perform their traffic management function.
As each ONOS app’s manifest is open to inspection, the operator
can compare manifests to determine which is most consistent with
their own privilege expectations. For example, some API usage,
such as the switch disconnect function discussed in Section 3, may
provide enough concerns to cause the selection of one application
over another.
Scenario 2: Deploying traffic management authorities. Con-
sider applications that are designed to provide specialized manage-
ment of certain forms of network traffic, such as UDP multime-
dia streams, load balancing for specific network services, or flow
management for proxy services. While such applications may be
deployed in parallel, it may be desirable to limit their ability to
impose flow mods to those flows for which other peer ONOS appli-
cations are specialized. SM-ONOS’s header space permissions may
be employed to grant each application targeted access to certain
protocol and port combinations, while restricting each app’s control
over other non-matching flows. In this way, applications can be
granted authority over their peers for handling certain application
traffic, while granted no access to manipulate flows outside their
designated authority.
Scenario 3: Partitioning application responsibilities in data-
flow sensitive environments. While ONOS currently grants
each application access to the global network topology, it may be
desirable to partition applications into virtual networks or into a
subsets of the network’s IP range. Let us consider an example where
partitioning applications may arise.
Figure 8: Example sensitive data-processing scenario using
application partitioning. Three data processing tiers are
shown (Web, App, and DB), with tight data-flow restrictions
between each tier. ONOS applications are constrained by
network-level permission-based access controls to isolate
flow management authority at each tier.
Figure 8 illustrates a common three-tiered network configura-
tion in which the network is composed of a web tier, an application
tier, and the data tier. The web tier services access requests from
remote clients, translates these requests to application-tier queries,
then formats and returns the application-tier response to the re-
mote client. The application tier is responsible for processing client
requests by interacting with the database tier, which it must query
to fulfill the external client’s request. Finally, the database tier man-
ages the sensitive data store and operates a SQL interface to respond
to each application-tier request. This tiered scheme requires strict
separation between each tier, and disallows any flow that does not
follow the above request-handling procedure. Figure 8 also shows
several ONOS applications to the right, which are designed to man-
age the flows at each tier. As a final usage scenario, SM-ONOS may
be used to isolate the function of each ONOS application, such that
it is granted full management control overall all flows received or
Web$Tier$Sensi+ve$Data$Store$App$Tier$Data$Tier$Database$Server$Recovery$Storage$Management$Form$Parser$Web$$Services$Data$Form$Processing$$$Server$Instance$$$Server$Instance$$$Server$Instance$$$Server$Instance$DB$Query$Service$Content$Generator$$$$$ONOS$App$Load%Balance%ONOS$App$Flow%Mngmt%Fault%Recovery%ONOS$App$Flow%Mngmt%Security%Applica+on$Server$ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
C. Yoon et al.
initiated from its tier. One approach is to segment each tier into
an ONOS virtual network, and employ topology permissions to
restrict each application to its respective tier. Alternatively, each
tier of the network may be assigned a distinct IP range, such that its
corresponding ONOS application(s) can be deployed with header
space permissions that limit modify-access to the IP range matching
their tiers.
7.2 Performance
An important aspect of evaluating the addition of a new security
mechanism to a network system, is understanding its performance
overhead. For a network operating system such as ONOS, the im-
pact on flow latency and throughput are critical factors. In this
section, we describe the test environment as well as the methods
and metrics that we use to effectively measure the performance
overhead incurred by enabling security-mode on ONOS and discuss
the implications in detail.
Test Environment. Our test environment involves two phys-
ical machines, as shown in Appendix A-Figure 9. One is a server
machine that hosts seven virtual machines, each running an in-
stance of ONOS on Ubuntu 14.04 LTS and forming a cluster. Each
virtual machine was allocated four processor cores and 8 GB of
memory. The second machine is a desktop with Ubuntu 14.04 LTS
that connects to the virtual machines, builds and deploys ONOS,
and runs ONOS system test suite (ONOS-Test) [1], which is an
automatic ONOS performance testing tool.
AppPermissions, 3 OSGi permissions, 6 Java native permissions).
Using ONOS-Test, we instantiated a linear topology with 30 logical
switches and requested the demo application to install 2,333 flow
mods to each switch for a total 69,990 flow mods per ONOS cluster.
We also evaluated the impact of cluster size on performance by
running this test against varying number of ONOS nodes (1, 3,
5 and 7 nodes). This test was executed against both original and
SM-ONOS, and each test was repeated five times to mitigate outlier
effects.
Test Results. The results, illustrated in Figure 10 and Figure
11, demonstrate that enabling SM-ONOS incurs a perceptible but
reasonable overhead as a trade-off.
Figure 10: Average flow mod installation latencies measured
in various sizes of ONOS cluster. Yellow bars illustrate the
latencies measured on the original ONOS, while blue bars
shows the latencies measured on SM-ONOS.
Figure 9: Test environment consists two physical machines,
the server machine hosts 7 virtual machines.
To quantitatively assess the performance penalty incurred by
SM-ONOS, we measure the flow mod installation throughput and
latency, that an application achieves, on two different platforms:
unmodified ONOS and SM-ONOS. These performance metrics are
critically important for evaluating the performance of network op-
erating systems, and hence, comparing the values measured across
the two different platforms provides a basis for understanding the
performance overhead of SM-ONOS. Specifically, we use ONOS-
Test to measure the flow mod installation latencies and throughputs.
ONOS-Test uses a demo application, which is an ONOS application
that comes with ONOS project distribution, and ONOS-Test is ca-
pable of remotely commanding the demo application to install a
certain number of flow mods as well as querying for the overall time
taken to install the requested number of flow mods. It also uses the
null provider bundle to emulate logical network topology within an
ONOS node, verify how many flow mods were successfully installed
and how long it took to complete the task.
We pulled two copies of ONOS (v1.4.0) and added security-mode
features to one of them for head-to-head performance comparison.
For the SM-ONOS performance test, we grant the permissions that
are required: (total of 24 permissions are granted, including 14
Figure 11: Average flow mod installation throughputs mea-
sured in various sizes of ONOS cluster. Yellow bars illustrate
the average throughputs measured on the original ONOS,
while blue bars shows the average throughputs measured on
SM-ONOS.
In 1, 3, 5, and 7 node clusters, SM-ONOS recorded 409, 1084,
1346, and 1822 KFlow mods per second, and ONOS recorded 429,
1346, 1558, and 2287 KFlow mods per second, respectively. In other
words, SM-ONOS in a single-node cluster incurred a throughput
penalty of only five percent; however, in multi-node cluster, the
penalty varied from 14 to 20 percent.
We note that since most of the applications invoke the same APIs
repeatedly and a large number of APIs are classified into only a few
types of permissions, the caching mechanism to reduce redundant
7-node ONOS clusterXeon E5-2650 2GHz 8-Core / 64G RAMONOS System Test platform (TestON)Core i7-2630QM 2GHz 4-Core / 16GB RAMVM 1VM 2VM 3VM 4VM 5VM 6VM 7Number of ONOS nodes1357Flow installation latency (ms)050100150200SM-ONOSONOSNumber of ONOS nodes1357Flow installation throughput (KFlows/s)020040060080010001200140016001800200022002400SM-ONOSONOSA Security-Mode for Carrier-Grade SDN Controllers
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
permission checks provided significant performance enhancement.
The demo application, which we use in our latency and throughput
test, invokes different APIs that cause permission checks to be
performed against 14 different AppPermissions immediately after
the activation, and accordingly, the cache hit rate remained 100
percent during most of the test run. Our caching mechanism also
allowed SM-ONOS to avoid critical performance impact due to
bursty simultaneous permission checks by ensuring that every
ONOS application may only incur a certain number of simultaneous
permission checks (i.e., number of permission types).
Although the result indicates that SM-ONOS incurs acceptable
performance overhead, we have further analyzed the test environ-
ment and the result to examine why SM-ONOS specifically causes
more performance penalty in a multi-node cluster environment.
In a multi-node cluster, when an application attempts to install
flow mods by calling a Northbound API from one of the ONOS
nodes, the API access incurs the overhead. Then, the flow mods are
replicated via distributed store, and the other ONOS nodes attempt
to install the flow mods to the switches by calling the API once
again. Hence, the additional performance overhead incurred in a
multi-node cluster environment is simply due to the extra North-
bound API calls caused by distributed flow mod installation. We
believe this cost is unavoidable in a distributed environment.
8 RELATED WORK
The movement of modern networking toward software-defined
flow management is evidenced by its adoption by major network
infrastructure companies. This interest is in turn stimulating the
development of novel, robust and scalable open-source efforts to
meet these adoption opportunities. However, the notion of a cen-
tralized network controller [7, 8, 10] fundamentally limits scaling
in first-generation SDN networks. Realizing this, the SDN research
community has embarked on a serious effort into the design and
development of distributed control planes such as ONIX [14], Open-
Daylight [2], Maestro [5] and ONOS [4]. However, the security
implications of such distributed management of dynamic software-
defined networks remain largely unexplored.
The design of SM-ONOS is inspired by Security Enhanced Linux
(SELinux) [22], which is a security module for Linux kernel. SELinux
is capable of enforcing security polices including RBAC, and we
partially apply such effective security mechanism for traditional
operating system to a different domain. There have been multiple
efforts to enable non-interference through network slicing in SDN
environments. FlowVisor [25] and OpenVirtex [3] are network hy-
pervisors placed in between the control and data plane to logically
isolate the physical network infrastructure into multiple virtual
networks on a per-NOS basis. In contrast, our approach extends the
SDN controller to implement network access control on per-app
basis. Our header space permission checking technique is inspired
by the header space analysis method to detect network failures [11].
It is similar to our work in that it checks header space of network
flows to partition and constrain the traffic authority. We implement
a specialized version of such analysis that specifically partitions
traffic authority among applications.
There are some previous studies on hardening network operat-
ing systems. SE-Floodlight is similar to our work in that it employs
an application permission model as a security enhancement [23].
However, the permission model constrains application interactions
with the data plane, while SM-ONOS covers all the possible appli-
cation behaviors in a distributed environment. The Rosemary [26]
controller employs a micro-kernel approach to enhancing network
operating system security and also employs an access control mech-
anism to constrain application behavior. However, it is limited to
a uni-controller environments and does not support the range of
permission models that we have considered in this work. Monaco et
al. [19], enabled file I/O-based network administration by exposing
both the network state and configuration as a file system; however,
their primary focus is not the security of network operating sys-
tem. LegoSDN [6] proposes a new network operating system that
is resilient to SDN application failures. Its approach can provide
some security services to a network operating system, but it does
not consider practical permission models that we have focused
in this paper. Wen et al. [28] also proposed the idea of enforcing
a fine-grained permission-based security policy to constrain the
application behaviors; however, unlike our work, they did not con-
sider distributed SDN control plane architectures. Klaedtke et al.,