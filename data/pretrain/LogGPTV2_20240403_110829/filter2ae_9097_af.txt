    ...
       for (UINT32 op = 0; op | 指定针对Intel 64架构的64-bit的Pintool。  
-p32 | 指定IA-32架构下的Pintool  
-p64 | 指定针对Intel 64架构的Pintool  
-smc-support | 是否开启app的SMC功能，1开启，0关闭。默认开启  
-smc_strict | 是否开启基本块内部的SMC，1开始，0关闭。默认关闭  
-appdebug | 调试目标程序，程序运行后立即在debugger中断下  
-appdebug_enable | 开启目标程序调试功能，但是在程序运行后不暂停  
-appdebug_silent | 当程序调试功能开启时，Pin打印消息告知如何连接外部debugger。但是在-appdebug_connection选项开启时不打印。  
-appdebug_exclude | 当程序调试功能开启，并指定了-follw_execv时，默认在所有子进程上启用调试。  
-appdebug_allow_remote | 允许debugger与Pin不运行在同一系统上，而是以远程方式进行连接。指定 -appdebug_connection 时会忽略该选项的值，因为 -appdebug_connection 明确指定了运行debugger的machine。  
-appdebug_connection | 当程序开启调试时，Pin默认会开启一个TCP端口等待debugger的连接。在开启该选项时，会在debugger中开启一个TCP端口来等待Pin的连接，相当于反置了默认的机制。该选项的格式为"[ip]:port"，“ip”以点十进制格式表达，如果省略了ip，则会连接本地的端口，端口号为十进制表示。需要注意的是，debugger为GDB时，不使用该选项。  
-detach_reattach | 允许在probe模式下进行detach和reattach，仅在Windows平台下使用。  
-debug_instrumented_processes | 允许debugger对经过插桩的进程进行attach，仅在Windows平台下使用。  
-show_asserts | 健全性检查  
此外，还支持如下的tool options，它们需要跟在tool名字后面，但是要在--符号前：
Option | Description  
---|---  
-logifle | 指定log文件的名字和路径，默认路径为当前工作目录，默认文件名为pintool.log  
-unique_logfile | 添加pid到log文件名中  
-discard_line_info  | 忽略特定模块的信息，模块名应该为没有路径的短文件名，不能是符号链接  
-discard_line_info_all | 忽略所有模块的信息  
-help | 帮助信息  
-support_jit_api | 启用托管平台支持  
-short_name | 使用最短的RTN名称。  
-symbol_path | 指定用分号分隔的路径列表，用于搜索以查找符号和行信息。仅在Windows平台下使用。  
-slow_asserts | 健全性检查  
### **_6.2 在Intel(R) 64架构插桩_**
IA-32和Intel(R) 64架构的Pin
kit是一个组合kit，均包含32-bit和64-bit的版本。这就为复杂的环境提供了极高的可运行性，例如一个稍微有点复杂的运行如下：
    pin [pin-option]... -t64  -t  [tool-options]...
    --  [application-option]..
需要注意的是：
  * t64选项需要用在-t选项的前面
  * 当-t64和-t一起使用时，-t后面跟的时32-bit的tool。不推荐使用不带-t的-t64，因为在这种情况下，当给定32-bit应用程序时，Pin将在不应用任何工具的情况下运行该应用程序。
  * [tool-option]会同时作用于64-bit和32-bit的tool，并且必须在-t 后面进行指定。
### **_6.3 注入_**
选项-injection仅在UNIX平台下可以使用，该选项控制着Pin注入到目标程序进程的方式。
默认情况下，建议使用dynamic模式。在该模式下，使用的是对父进程注入的方式，除非是系统内核不支持。子进程注入方式会创建一个pin的子进程，所以会看到pin进程和目标程序进程同时运行。使用父进程注入方式时，pin进程会在注入完成后退出，所以相对来说比较稳定。在不支持的平台上使用父进程注入方式可能出现意料之外的问题。
## **_7\. 编写Pintool_**
### **_7.1 记录Pintool的消息_**
Pin提供了将Pintool的messages写入到文件的机制——LOG()
api，在合适的获取message的位置使用即可。默认的文件名为pintool.log，存储路径为当前工作目录，可以使用-logfile选项来改变log文件的路径和名字。
    LOG( "Replacing function in " + IMG_Name(img) + "\n" );
    LOG( "Address = " + hexstr( RTN_Address(rtn)) + "\n" );
    LOG( "Image ID = " + decstr( IMG_Id(img) ) + "\n" );
### **_7.2 编写Pintool时的性能考量_**
Pintool的开发质量会很大程度上决定tool的性能如何，例如在进行插桩时的速度问题。将通过一个例子来介绍一些提高tool性能的技巧。
首先是插桩部分代码：
    VOID Instruction(INS ins, void *v)
    {
       ...
       if ( [ins is a branch **or** a call instruction] )
       {
        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR) docount2,
                IARG_INST_PTR,
                IARG_BRANCH_TARGET_ADDR,
                IARG_BRANCH_TAKEN,
                IARG_END);
       }
       ...
    }
然后是分析代码：
    VOID docount2( ADDRINT src, ADDRINT dst, INT32 taken )
    {
      if(!taken) return;
      COUNTER *pedg = Lookup( src,dst );
      pedg->_count++;
    }
该工具的目的是计算控制流图中每个控制流变化的边界被遍历的频率。工作原理如下：插桩组件通过调用docount2对每个分支进行插桩。传入的参数为源分支和目标分支以及分支是否被执行。源分支和目标分支代表来控制流边界的源和目的。如果没有执行分支，控制流不会发生改变，因此分析routine会立即返回。如果执行了分支，就使用src和dst参数来查找与此边界相关的计数器，并增加计数器的值。
**_Shifting Computation for Analysis to Instrumentation Code_**
在一个典型的应用程序中，大概每5条指令构成一个分支，在这些指令执行时会调用`Lookup`函数，造成性能下降。我们思考这个过程可以发现，在指令执行时，每条指令只会调用一次插桩代码，但会多次调用分析代码。所以，可以想办法将计算工作从分析代码转移到插桩代码，这样就可以降低调用次数，从而提升性能。
首先，就大多数分支而言，我们可以在`Instruction()`中找到目标分支。对于这些分支，我们可以在Instruction()内部调用`Lookup()`而不是`docount2()`，对于相对较少的间接分支，我们仍然需要使用原来的方法。
因此，我们增加一个新的函数`docount`，原来的`docount2`函数保持不变：
    VOID docount( COUNTER *pedg, INT32 taken )
    {
      if( !taken ) return;
      pedg->_count++;
    }
相应地，修改插桩函数：
    VOID Instruction(INS ins, void *v)
    {
       ...
      if (INS_IsDirectControlFlow(ins))
      {
        COUNTER *pedg = Lookup( INS_Address(ins), INS_DirectControlFlowTargetAddress(ins) );
        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR) docount,
                IARG_ADDRINT, pedg,
                IARG_BRANCH_TAKEN,
                IARG_END);
      }
      else
      {
        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR) docount2,
                IARG_INST_PTR,
                IARG_BRANCH_TARGET_ADDR,
                IARG_BRANCH_TAKEN,
                IARG_END);
      }
       ...
    }
在插桩函数内部根据不同的情况，执行不同的分析代码，避免对所有类型的指令都笼统地调用性能要求高`docount2`函数。
最终实现的完整代码如下：
    /* ===================================================================== */
    /*!
      对于已经进行过插桩的Edge，重用entry；否则创建一个新的。
     */
    static COUNTER* Lookup(EDGE edge) // 查找边界
    {
        COUNTER*& ref = EdgeSet[edge];
        if (ref == 0)
        {
            ref = new COUNTER();
        }
        return ref;
    }
    /* ===================================================================== */
    // 分析routine代码
    VOID docount(COUNTER* pedg) { pedg->_count++; }
    /* ===================================================================== */
    // 对于间接控制流，我们不知道边界，所以需要进行查找。
    VOID docount2(ADDRINT src, ADDRINT dst, ADDRINT n, ETYPE type, INT32 taken)
    {
        if (!taken) return;
        COUNTER* pedg = Lookup(EDGE(src, dst, n, type));
        pedg->_count++;
    }
    /* ===================================================================== */
    VOID Instruction(INS ins, void* v) // 插桩函数
    {
        if (INS_IsDirectControlFlow(ins)) // 如果是直接控制流（ins为控制流指令，目标地址由指令指针或立即数指定）
        {
            ETYPE type = INS_IsCall(ins) ? ETYPE_CALL : ETYPE_BRANCH; // 判断是否为call指令，是则返回ETYPE_CALL
            // 静态目标可以在这里进行一次映射
            // 参数分别为当前指令地址、当前指令目标地址、下一指令地址、指令类型
            COUNTER* pedg = Lookup(EDGE(INS_Address(ins), INS_DirectControlFlowTargetAddress(ins), INS_NextAddress(ins), type)); 
            // 插桩
            INS_InsertCall(ins, IPOINT_TAKEN_BRANCH, (AFUNPTR)docount, IARG_ADDRINT, pedg, IARG_END);
        }
        else if (INS_IsIndirectControlFlow(ins)) // 如果是间接控制流（ins为控制流指令，且目标地址通过内存或寄存器提供）
        {
            ETYPE type = ETYPE_IBRANCH; // 直接指定类型为间接控制流
            if (INS_IsRet(ins)) // 是否为ret或iret
            {
                type = ETYPE_RETURN;
            }
            else if (INS_IsCall(ins))
            {
                type = ETYPE_ICALL;
            }
            // 进行插桩
            INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount2, IARG_INST_PTR, IARG_BRANCH_TARGET_ADDR, IARG_ADDRINT, INS_NextAddress(ins), IARG_UINT32, type, IARG_BRANCH_TAKEN, IARG_END);
        }
        else if (INS_IsSyscall(ins))  //  如果是syscall指令
        {
            COUNTER* pedg = Lookup(EDGE(INS_Address(ins), ADDRINT(~0), INS_NextAddress(ins), ETYPE_SYSCALL));
            INS_InsertPredicatedCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_ADDRINT, pedg, IARG_END);
        }
    }
    /* ===================================================================== */
    inline INT32 AddressHighNibble(ADDRINT addr) { return 0xf & (addr >> (sizeof(ADDRINT) * 8 - 4)); }
    /* ===================================================================== */
    static std::ofstream* out = 0;
    VOID Fini(int n, void* v) // 程序结束时的处理函数
    {
        const INT32 nibble = KnobFilterByHighNibble.Value();
        *out  tuple = *it;
            // skip inter shared lib edges
            if (nibble >= 0 && nibble != AddressHighNibble(tuple.first._dst) && nibble != AddressHighNibble(tuple.first._src))
            {
                continue;
            }
            if (tuple.second->_count == 0) continue;
            count++;
        }
        *out  tuple = *it;
            // skip inter shared lib edges
            if (nibble >= 0 && nibble != AddressHighNibble(tuple.first._dst) && nibble != AddressHighNibble(tuple.first._src))
            {
                continue;
            }
            if (tuple.second->_count == 0) continue;
            *out _count, 12) close();
    }
    /* ===================================================================== */
    /* Main                                                                  */
    /* ===================================================================== */
    int main(int argc, char* argv[])
    {
        if (PIN_Init(argc, argv)) // 初始化
        {
            return Usage();
        }
        string filename = KnobOutputFile.Value(); // 输出文件
        if (KnobPid)
        {
            filename += "." + decstr(getpid());
        }
        out = new std::ofstream(filename.c_str());
        INS_AddInstrumentFunction(Instruction, 0); // 注册插桩函数
        PIN_AddFiniFunction(Fini, 0); // 注册Fini函数
        // 开始执行，不返回
        PIN_StartProgram();
        return 0;
    }
    /* ===================================================================== */
    /* eof */
    /* ===================================================================== */
### **_7.3 消除控制流_**
上面新增的`docunt()`函数的代码十分简洁，极大地提升了性能。除此之外，还可以被Pin内联，进一步避免函数调用的开销。
但是现在的`docount()`函数中存在控制流，这有可能在进行内联时发生未知的改变。最好的解决办法是去掉函数中的控制流，这样进行内联时可以保证健壮性。
考虑到`docount()`函数的'taken'参数要么为0，要么为1，所以可以将函数代码修改为如下：
    VOID docount( COUNTER *pedg, INT32 taken )
    {
      pedg->_count += taken;