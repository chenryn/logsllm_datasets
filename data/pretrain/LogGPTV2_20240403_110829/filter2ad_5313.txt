# Title: App-Agnostic Post-Execution Semantic Analysis of Android In-Memory Forensics Artifacts

## Authors:
- Aisha Ali-Gombe, Ph.D.*
- Alexandra Tambaoan*
- Angela Gurfolino*
- Golden G. Richard III, Ph.D.†

---

## Abstract
This paper introduces OAGen, a generalized and app-agnostic technique for post-execution semantic analysis of Android in-memory forensics artifacts. The approach automates object relationship generation and provides robust semantic analysis modules, enabling its application to various forensic investigations and Android program analyses.

---

## 1. Introduction
### 1.1 Mobile Forensics - The Need
Mobile forensics is crucial for investigating digital evidence on mobile devices. Memory forensics, particularly Userland Memory Forensics (UMF), plays a vital role in extracting and analyzing volatile data from the device's memory.

### 1.2 Memory Forensics
#### 1.2.1 Userland Memory Forensics (UMF)
Userland Memory Forensics (UMF) involves analyzing the memory space of user applications and system processes. This includes examining the following components:
- **Apps**
- **Android Framework**
- **Native Libraries**
- **Android Runtime**
- **HAL/HIDL**
- **Linux Kernel**

#### 1.2.2 Kernel-land Memory Forensics
Kernel-land Memory Forensics focuses on the memory space managed by the Linux kernel, including IP headers and other kernel-level structures.

---

## 2. Prior Work on UMF
### 2.1 App-Specific Techniques
Previous work, such as Anglano et al. (2017), has focused on app-specific techniques for memory forensics. These methods are limited to specific scenarios and lack generalizability.

### 2.2 Domain-Specific Techniques
Domain-specific techniques, like those by Saltaformaggio et al. (2015), have also been developed. These methods often involve learning, brute-force instrumentation, and reverse engineering to extract specific types of data, such as images, activities, frames, and network objects.

### 2.3 Generalized Techniques
More recent approaches, such as Pridgen et al. (2017) and Ali-Gombe et al. (2019), aim to generalize UMF. These techniques involve reverse engineering the runtime environment but often lack context and relationships between recovered data.

---

## 3. Research Objective
The primary goal of this research is to develop a generalized and app-agnostic UMF technique called OAGen. The key objectives include:
- Automated object relationship (OAG) generation.
- Robust semantic analysis modules for path exploration, context determination, and object scope.

**Goal:** To create a technique that can be applied to any kind of forensic investigation and used for Android program analysis.

---

## 4. OAGen – Design
OAGen is designed to generate an Object Allocation Graph (OAG) where nodes represent objects and edges represent relationships. The graph is defined as \( G = (N, E) \), where \( n \in N \) and \( n_1 \rightarrow n_2 \in E \).

Example:
```java
MessageData msgData = new MessageData();
msgData.setURI(new URI());
```

---

## 5. OAG Generation
The OAG generation process involves:
- **Object Recovery:** Based on the default Region-Space memory allocation algorithm.
- **Heap Dump Utilization:** Uses the base Heapdump of DroidScraper (Ali-Gombe et al. 2019).

---

## 6. Semantic Analysis
### 6.1 Path Exploration
Explores the paths between objects in the OAG to understand their relationships.

### 6.2 Context Determination
Determines the context in which objects are used, with varying depths of analysis.

### 6.3 Object Scope
Identifies the scope of objects within the application, including references in different threads and segments.

### 6.4 Search Utility
Provides utilities for searching strings and objects within the OAG.

---

## 7. OAGen – Implementation & Evaluation
### 7.1 Implementation
- **Language:** Python (~3000 lines of code)
- **Modules:** OAG Generation, Search Utility, Path Exploration, Context and Scope Determination
- **Prototype:** Available at [apphackuno/OAGen.git](PI:EMAIL:apphackuno/OAGen.git)

### 7.2 Evaluation
- **Hardware:** MacBook Pro with a 2.6GHz Intel processor and 16GB RAM
- **Performance Metrics:**
  - Throughput: 0.19 Mbps
  - Robustness of the recursive search
  - Application of the semantic analysis algorithms

### 7.3 Macro Benchmark
- **Objective:** Test the robustness of OAGen in searching and finding object references.
- **Results:**
  - **com.whatsapp:** 301,742 (Droidscraper) vs. 301,467 (OAGen)
  - **com.android.messaging:** 92,046 (Droidscraper) vs. 90,053 (OAGen)
  - **com.yandex226.yandex:** 11,172 (Droidscraper) vs. 10,328 (OAGen)

*Note: OAGen recovers objects in heap, stack, initialized data, and code segments.*

---

## 8. Evaluation – Semantic Analysis
### 8.1 Cybercrime Investigation
- **Nodes:** >350K
- **Strings Search Utility:** End-to-end encryption and complete destruction of evidence
- **Context Determination:** Depth of 50 and 10

### 8.2 Data Exfiltration
- **Nodes:** >128K
- **Object Search Utility:** Object scope within RefQueueWorker thread
- **Context Determination:** Varying depths

---

## 9. Challenges and Future Work
- **Noise Reduction:** Requires significant time to filter out noise.
- **Tentative Execution Path Reconstruction:** Mapping OAG to in-memory code.
- **Testing:** Further testing is needed to explore the effects of garbage collection, process state, and program obfuscation on recovered data.

---

## 10. Key Takeaways
- **OAGen:** A tool for post-execution semantic analysis of Android applications.
- **Features:**
  - Object Allocation Graph Generation
  - Algorithms for path exploration, context, and object scope determination

---

## 11. Acknowledgment
This work is supported by the U.S. National Science Foundation under the awards NSF-CRII-SaTC-1850054.

---

## 12. Thank You!
Questions?  
Prototype: [apphackuno/OAGen.git](PI:EMAIL:apphackuno/OAGen.git)  
Contact: PI:EMAIL

---