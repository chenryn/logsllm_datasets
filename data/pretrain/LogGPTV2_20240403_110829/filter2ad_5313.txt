title:App-Agnostic Post-Execution Semantic Analysis of Android In-Memory
Forensics Artifacts
author:Aisha Ali-Gombe and
Alexandra Tambaoan and
Angela Gurfolino and
Golden G. Richard III
App-Agnostic Post-Execution Semantic 
Analysis of Android In-Memory Forensics 
Artifacts 
Aisha Ali-Gombe Ph.D.*, Alexandra Tambaoan*, Angela Gurfolino*
Golden G. Richard III Ph.D.† 
Mobile Forensics – The need
Memory Forensics
Userland Memory Forensics (UMF) 
I stole the 
squirrels 
Apps
Android Framework
Native Libraries
Android Runtime
HAL/HIDL
Linux Kernel
Kernel-land Memory Forensics
IP 
Header
sbcjkshuqeh
qwnbNjhfiid
Prior Work on UMF
App-Specific Techniques
(Anglano et. al, 2017)…
Domain-Specific Techniques
(Saltaformaggio et. al, 2015)…
Learning
Brute-force
Instrumentation
Reverse Engineering
….
Images
Activities
Frame
Network Objects
…..
Limited to only specialized 
scenario
Activiy
List
Arrays
Has-Maps
Strings
POST: ID: 11/11/2020 - I love cats 
Prior Work on UMF (2)
Generalized Techniques
(Pridgen et. al, 2017, Ali-Gombe et. al 2019)…
Apps
Android Framework
Native Libraries
Android Runtime
HAL/HIDL
Linux Kernel
Reverse Engineer 
Runtime
No context and no relationship 
between recovered data
Runtime
Allocator
GC
Heap
Threads
android.content.Intent
java.lang.String
java.lang.String
android.content.Compo
nentName
java.lang.String
android.app.ActivityThr
ead$BindServiceData
…..
Research Objective
• Generalized and app-agnostic UMF technique called OAGen
• Automated object relationship (OAG) generation
• Robust semantic analysis modules (Paths, Context and Scope)
GOAL:
Our technique can be applied to any kind of 
forensics investigation and can be use for 
Android program analysis
OAGen – Design
where n ∈ N and n1 à n2∈ E 
G = (N, E) 
MessageData msgData = new MessageData()
msgData.setURI (new URI())
OAG Generation
Semantic Analysis
Path Exploration
Context Determination 
Object Scope
Search Utility – Strings and Objects
OAGen – Implementation & 
Evaluation
• Python - ~ 3000 loc
• Five modules (OAG Gen, Search utility, path exploration, context and 
scope determination)
• Prototype - PI:EMAIL:apphackuno/OAGen.git
• Object recovery is based on the default Region-Space memory 
allocation algorithm
• Utilizes the base Heapdump of DroidScraper (Ali-Gombe et al. 
2019)
RAM 
• Evaluation - MacBook Pro with a 2.6GHz Intel processor and 16GB 
• Performance of the graph generation algorithm
• Robustness of the recursive search
• Application of the semantic analysis algorithms
Evaluation - Processing Time
Average throughput = 0.19Mbps
Evaluation – Macro Benchmark
Objective: Robustness of OAGen in searching and finding object references
Heap’s objects_allocated_ 
field
com.whatsapp
301,742
com.android.messaging
92,046
com.yandex226.yandex
11,172
Droidscraper
OAGen
301,467
318,632
90,053
106,304
10,328
35,528
*OAGen recovers objects in heap, stack, initialized data and code segments
Evaluation –
Semantic Analysis 1: Cybercrime Investigation
Memfetch
OAG 
Generation
>350K 
nodes
Strings Search 
Utility
• End-to-end encryption
• Complete destruction of 
evidence
Context Determination with a 
depth of 50
Context Determination with a 
depth of 10
Evaluation –
Semantic Analysis 2: Data Exfiltration
Memfetch
OAG 
Generation
>128K 
nodes
Object Search 
Utility
Object Scope within 
RefQueueWorker thread 
Context 
Determination
Context 
Determination
Challenges and Future Work
• Require considerable amount of time 
to weed out noise
• Tentative execution path reconstruction
• mapping OAG to in-memory code
• Need more testing to explore the effects:
• garbage collection/process state on 
recovered data
• program obfuscation
Key Takeaway
• OAGen - a tool for post-execution semantic analysis of 
Android applications
• Object Allocation Graph Generation
• Algorithms 
• Path exploration
• Context
• Object Scope Determination
Acknowledgement 
This work is supported by the U.S.
National Science Foundation under
the awards -
NSF-CRII-SaTC-1850054
THANK YOU!
QUESTIONS!
PI:EMAIL:apphackuno/OAGen.git
PI:EMAIL