With an iterator that returns a borrowed reference to its contents, it’s
possible to hold the reference longer than the reference is valid. In
particular, if the iterator changes its internal state, the new state can be
observed via the saved reference. Check it out:
    fn crash_please() {
        let mut iter = Newtype(Some(Box::new(0)));
        let saved = iter.next().unwrap();
        println!("{}", saved);
        iter.0 = None;
        println!("{}", saved);
    }
    struct Newtype(Option>);
    impl Iterator for Newtype {
        type Item = &'a Box;
        fn next(&mut self) -> Option> {
            self.0.as_ref()
        }
    }
This clearly shouldn’t type check, but it does, and runs, and crashes:
    0
    zsh: illegal hardware instruction  target/collect_bug
Where the type error should be, I’m not sure. It seems like it’s actually a
problem with traits. If we change the above code to define `next` in a non-
trait impl, then it no longer passes the borrow checker:
    impl Newtype {
        fn next(&mut self) -> Option> {
            self.0.as_ref()
        }
    }
I originally observed this bug when testing an iterator that owns a `String`;
at each iteration it modifies the string and then returns a string slice
borrowed from it. My non-test code worked fine because it finished with each
value from the iterator before calling `next()` again, but the test code
collected the iterator into a vector. This meant that all the slices in the
vector continued to point to the same buffer, even after it had been modified.
So for example, if the strings written to the buffer were `"aaa"`, `"bb"`, and
`"c"`, then in the end the vector would contain `"cba"`, `"cb"`, and `"b"`.
Creepy.
## Version
I’m using 1.0.0-alpha still, because I’m teaching a class and we don’t want to
follow a moving target, but I confirmed that the Feb. 26 nightly has the same
bug.
    rustc 1.0.0-alpha (44a287e6e 2015-01-08 17:03:40 -0800)
    binary: rustc
    commit-hash: 44a287e6eb22ec3c2a687fc156813577464017f7
    commit-date: 2015-01-08 17:03:40 -0800
    host: x86_64-apple-darwin
    release: 1.0.0-alpha