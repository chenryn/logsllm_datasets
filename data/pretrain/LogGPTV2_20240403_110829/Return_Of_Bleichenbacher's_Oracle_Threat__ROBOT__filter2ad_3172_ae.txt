Independent of the padding mode RSA encryption
does not provide forward secrecy. Given the clear advan-
tage of ciphers with forward secrecy enabled we believe
the way forward is to use neither PKCS #1 v1.5 encryp-
tion nor RSA-OAEP in TLS. This is also the decision
that has been made for TLS 1.3 [33]. RSA-OAEP may
however be a better alternative for other protocols. We
would like to point out that OAEP is not fully resilient to
padding attacks, see Manger [27] and Meyer et al. [28]
for details.
When using forward secrecy RSA can be used as a
signature algorithm. This is still the most common set-
ting in TLS, as alternatives like ECDSA have not seen
widespread adoption yet. RSA signature implementa-
tions do not suffer from Bleichenbacher’s attack from
1998, but the PKCS #1 v1.5 padding has another prob-
lem. In 2006, Bleichenbacher discovered a common im-
plementation ﬂaw in the parsing of those signatures [19].
A variation of this attack, named BERserk, was indepen-
dently discovered by Delignat-Lavaud and Intel as affect-
ing the Mozilla NSS library in 2014 [35]. While these at-
tacks are completely independent of the RSA encryption
attack from 1998, they are a good reason to deprecate
PKCS #1 v1.5 both for encryption and for signatures.
RSA-PSS provides resilience against this attack and
is also standardized in the latest PKCS #1 v2.2 stan-
dard [29]. TLS 1.3 will use RSA-PSS for signatures [33].
9.5 Bleichenbacher attacks in other proto-
cols
In this research we focused on Bleichenbacher attacks
against TLS. However these attacks are not limited to
TLS. Jager et al. [22] have shown Bleichenbacher vulner-
abilities in XML encryption, Detering et al. have shown
vulnerabilities in JSON / JOSE [16] and Nestlerode has
discovered vulnerabilities in the Cryptographic Message
Syntax (CMS) code of OpenSSL [31].
All protocols that make use of PKCS #1 v1.5 en-
cryption and potentially allow an attacker to see error
messages are potential targets for Bleichenbacher at-
tacks. Our recommendation to deprecate PKCS #1 v1.5
is therefore not limited to TLS – it should be avoided in
other protocols as well.
9.6 Vendor responsibility
Perhaps the most surprising fact about our research is
that it was very straightforward. We took a very old and
widely known attack and were able to perform it with
very minor modiﬁcations on current implementations.
One might assume that vendors test their TLS stacks for
known vulnerabilities. However, as our research shows
in the case of Bleichenbacher attacks, several vendors
have not done this.
There were several warnings that indicated such prob-
lems. The work from Meyer et al.
in 2014 has al-
ready shown some vulnerable modern-day implementa-
tions [28]. Jager et al. have warned about the risk of Ble-
ichenbacher attacks for TLS 1.3 [23], and were awarded
with the best paper award at the “TLS 1.3 Ready Or Not”
USENIX Association
27th USENIX Security Symposium    829
(TRON) workshop [9]. Aviram et al. have used the idea
of Bleichenbacher’s attack to construct their DROWN at-
tack [6]. It is notable that none of these publications have
caused the affected vendors to test their product for such
vulnerabilities.
9.7 Vulnerability detection tools
Many existing TLS vulnerability testing tools did not
have tests for Bleichenbacher vulnerabilities in the past.
This is likely one reason why such an old vulnerability
is still so prevalent. To our knowledge TLS-Attacker3
and tlsfuzzer4 had tests for Bleichenbacher vulnerabili-
ties before our research started. However, both tools are
not yet optimized for usability and are likely only used
by a small audience. None of the existing tools we know
of had tests for the shortened message ﬂow attacks.
We reached out to developers of several TLS test-
ing tools prior to this publication. The developers of
testssl.sh5 developed a test that is similar to our own test
tool. Kario implemented additional checks in tlsfuzzer.
The test in tlsfuzzer is different to our test as it also
checks for protocol violations that are not vulnerabili-
ties. A strict interpretation of the TLS standard demands
that all RSA decryption failures are answered with a TLS
alert 20 (bad record mac) after the Finished message.
Tripwire IP360 added detection6 for vulnerable F5 de-
vices in ASPL-753 which was released in coordination
with F5’s public advisory. Generic detection of Ble-
ichenbacher oracles will be released in coordination with
this publication. SSLLabs added detection for Bleichen-
bacher oracles in their development version with a test
similar to our own.7
Before our research, TLS-Attacker had implemented
a basic Bleichenbacher attack evaluation with full TLS
protocol ﬂows. We extended this evaluation with short-
ened protocol ﬂows with missing ChangeCipherSpec
and Finished messages, and implemented an oracle
detection based on TCP timeouts and duplicated TLS
alerts. These new features are available in TLS-Attacker
2.2.
We encourage developers of other TLS or security test
tools to include tests for Bleichenbacher attacks and for
other old vulnerabilities. We hope that better test tools
will detect any remaining vulnerable implementations
that we have not identiﬁed during our research.
We are offering the code of our own scan tool under a
CC0 (public domain) license. 8 This allows developers
3https://github.com/RUB-NDS/TLS-Attacker
4https://github.com/tomato42/tlsfuzzer
5http://testssl.sh/
6https://www.tripwire.com/state-of-security/vert/
return-bleichenbachers-oracle-threat-robot
7https://dev.ssllabs.com/
8https://github.com/robotattackorg/robot-detect
of other tools – both free and proprietary – to use our
code with no restrictions.
10 Summary and conclusion
We were able to identify nine vendors and open source
projects and a signiﬁcant number of hosts that were vul-
nerable to minor variations of Bleichenbacher’s adaptive-
chosen ciphertext attack from 1998. The most notable
fact about this is how little effort it took us to do so. We
can therefore conclude that there is insufﬁcient testing of
modern TLS implementations for old vulnerabilities.
The countermeasures in the TLS standard to Bleichen-
bacher’s attack are incredibly complicated and grew
more complex over time. It should be clear that this was
not a viable strategy to avoid these vulnerabilities.
The designers of TLS 1.3 have already decided to dep-
recate the RSA encryption key exchange. However, as
long as compatibility with RSA encryption cipher suites
is kept on older TLS versions these attacks remain a
problem. To make sure Bleichenbacher attacks are ﬁ-
nally resolved we recommend to fully deprecate RSA
encryption based key exchanges in TLS. For HTTPS we
believe this can be done today.
We hope that our research will help to end the use of
PKCS #1 v1.5.
Acknowledgments
The authors thank Tibor Jager for providing a Python im-
plementation of the Bleichenbacher attack, Adam Lang-
ley for feedback on QUIC and timing problems in Go
TLS, Eric Mill from GSA for helping us to identify vul-
nerable platforms, Nick Sullivan for sharing usage num-
bers of RSA key exchanges from Cloudﬂare, Dirk Wetter
and David Cooper for implementing a ROBOT check in
testssl.sh and for ﬁnding bugs in our test code, Hubert
Kario for ﬁnding bugs in our test code, Graham Steel,
Vladislav Mladenov, Christopher Meyer, Robert Merget,
Ernst-G¨unter Giessmann, and Tanja Lange for feedback
on this paper, Ange Albertini for drawing a great logo,
Garret Wasserman from CERT/CC for helping with ven-
dor contacts, and Facebook for generous bug bounties.
Juraj Somorovsky was supported through the Hori-
zon 2020 program under project number 700542 (Fu-
tureTrust).
References
[1] ALFARDAN, N. J., AND PATERSON, K. G. Lucky Thirteen:
Breaking the TLS and DTLS Record Protocols. In 2013 IEEE
Symposium on Security and Privacy (May 2013), pp. 526–540.
[2] ALLEN, C., AND DIERKS, T. The TLS Protocol Version 1.0.
RFC 2246, Jan. 1999.
830    27th USENIX Security Symposium
USENIX Association
[3] ANDIN, I. A. Patch Package: OTP 18.3.4.7. erlang-questions
mailing list, Nov. 2017.
[20] GARSKE, D. Fix for handling of static RSA padding failures.
Github pull request, Nov. 2017.
[4] ANDIN, I. A. Patch Package: OTP 19.3.6.4. erlang-questions
mailing list, Nov. 2017.
[5] ANDIN, I. A. Patch Package: OTP 20.1.7. erlang-questions
mailing list, Nov. 2017.
[6] AVIRAM, N., SCHINZEL, S., SOMOROVSKY, J., HENINGER,
N., DANKEL, M., STEUBE, J., VALENTA, L., ADRIAN, D.,
HALDERMAN, J. A., DUKHOVNI, V., K ¨ASPER, E., COHNEY,
S., ENGELS, S., PAAR, C., AND SHAVITT, Y. DROWN: Break-
In 25th USENIX Security Symposium
ing TLS Using SSLv2.
(USENIX Security 16) (Austin, TX, Aug. 2016), USENIX Asso-
ciation, pp. 689–706.
[7] BARDOU, R., FOCARDI, R., KAWAMOTO, Y., SIMIONATO, L.,
STEEL, G., AND TSAY, J.-K. Efﬁcient padding oracle attacks on
cryptographic hardware. In Advances in Cryptology – CRYPTO
2012: 32nd Annual Cryptology Conference, Santa Barbara, CA,
USA, August 19-23, 2012. Proceedings (Berlin, Heidelberg, Aug.
2012), R. Safavi-Naini and R. Canetti, Eds., Springer Berlin Hei-
delberg, pp. 608–625.
[8] BARNES, R., HOFFMAN-ANDREWS, J., AND KASTEN, J. Au-
tomatic Certiﬁcate Management Environment (ACME). Internet-
Draft draft-ietf-acme-acme-08, Internet Engineering Task Force,
Oct. 2017. Work in Progress.
[9] BAUMGARTEN, D.
2016.
IETF-Award f¨ur Beitrag zu TLS 1.3, Feb.
[10] BENJAMIN, D.
Intent to Deprecate: DHE-based cipher suites.
Chromium net-dev mailing list, Mar. 2016.
[11] BLEICHENBACHER, D. Chosen Ciphertext Attacks Against Pro-
tocols Based on the RSA Encryption Standard PKCS1. In Ad-
vances in Cryptology — CRYPTO ’98 (Aug. 1998), Springer-
Verlag, pp. 1–12.
[12] Add QUIC 31 in which the server’s proof covers both the static
server conﬁg as well as a hash of the client hello. Chromium
Code Reviews, Mar. 2016.
[21] IBM. IBM Security Bulletin: WebSphere MQ is vulnerable to
disclosing side channel information via discrepencies between
valid and invalid PKCS#1 padding. ROBOT. (CVE-2018-1388),
feb 2018.
[22] JAGER, T., SCHINZEL, S., AND SOMOROVSKY, J. Bleichen-
bacher’s Attack Strikes again: Breaking PKCS#1 v1.5 in XML
Encryption. In European Symposium on Research in Computer
Security (ESORICS) (2012), pp. 752–769.
[23] JAGER, T., SCHWENK, J., AND SOMOROVSKY, J. On the Secu-
rity of TLS 1.3 and QUIC Against Weaknesses in PKCS#1 V1.5
Encryption. In 22Nd ACM SIGSAC Conference on Computer and
Communications Security (New York, NY, USA, 2015), CCS ’15,
ACM, pp. 1185–1196.
[24] JAGER, T., SCHWENK, J., AND SOMOROVSKY, J. Practical In-
valid Curve Attacks on TLS-ECDH. 20th European Symposium
on Research in Computer Security (ESORICS) (2015).
[25] KALISKI, B. PKCS #1: RSA Encryption Version 1.5. RFC 2313
(Informational), Mar. 1998. Obsoleted by RFC 2437.
[26] KL´IMA, V., POKORN ´Y, O., AND ROSA, T. Attacking RSA-
In Cryptographic Hardware and
Based Sessions in SSL/TLS.
Embedded Systems - CHES 2003: 5th International Workshop,
Cologne, Germany, September 8–10, 2003. Proceedings (Berlin,
Heidelberg, 2003), C. D. Walter, C¸ . K. Koc¸, and C. Paar, Eds.,
Springer Berlin Heidelberg, pp. 426–440.
[27] MANGER, J. A Chosen Ciphertext Attack on RSA Optimal
Asymmetric Encryption Padding (OAEP) as Standardized in
In Advances in Cryptology — CRYPTO 2001:
PKCS #1 v2.0.
21st Annual International Cryptology Conference, Santa Bar-
bara, California, USA, August 19–23, 2001 Proceedings (Berlin,
Heidelberg, 2001), Springer Berlin Heidelberg, pp. 230–238.
[28] MEYER, C., SOMOROVSKY, J., WEISS, E., SCHWENK, J.,
SCHINZEL, S., AND TEWS, E. Revisiting SSL/TLS Implemen-
tations: New Bleichenbacher Side Channels and Attacks. In 23rd
USENIX Security Symposium (USENIX Security 14) (San Diego,
CA, Aug. 2014), USENIX Association, pp. 733–748.
[13] CISCO. End-of-Sale and End-of-Life Announcement for the
Cisco ACE Application Control Engine ACE30 Module, Sept.
2013.
[29] MORIARTY, K., KALISKI, B., JONSSON, J., AND RUSCH, A.
PKCS #1: RSA Cryptography Speciﬁcations Version 2.2. RFC
8017, Nov. 2016.
[14] CISCO. Release Note vA5(3.x), Cisco ACE Application Control
Engine Module, Aug. 2014.
[30] NETWORKS, P. A. ROBOT attack against PAN-OS (PAN-SA-
2017-0032), Jan. 2018.
[15] CITRIX. TLS Padding Oracle Vulnerability in Citrix NetScaler
Application Delivery Controller (ADC) and NetScaler Gateway,
Dec. 2017.
[16] DETERING, D., SOMOROVSKY, J., MAINKA, C., MLADENOV,
V., AND SCHWENK, J. On The (In-)Security Of JavaScript
In Reversing and Offensive-
Object Signing And Encryption.
oriented Trends Symposium (ROOTS) (Vienna, Austria, Nov.
2017).
[17] DIERKS, T., AND RESCORLA, E. The Transport Layer Security
(TLS) Protocol Version 1.1. RFC 4346, Apr. 2006.
[18] F5. K21905460: BIG-IP SSL vulnerability CVE-2017-6168,
Nov. 2017.
[19] FINNEY, H. Bleichenbacher’s RSA signature forgery based on
implementation error. IETF OpenPGP mailing list, Aug. 2006.
[31] OPENSSL. OpennSSL Security Advisory: CMS and S/MIME
Bleichenbacher attack (CVE-2012-0884), Mar. 2012.
[32] RADWARE. CVE-2017-17427 Adaptive chosen-ciphertext attack
vulnerability, Dec. 2017.
[33] RESCORLA, E. The Transport Layer Security (TLS) Protocol
Version 1.3. Internet-Draft draft-ietf-tls-tls13-22, Internet Engi-
neering Task Force, Nov. 2017. Work in Progress.
[34] RESCORLA, E., AND DIERKS, T. The Transport Layer Security
(TLS) Protocol Version 1.2. RFC 5246, Aug. 2008.
[35] RESEARCH, I. S. A. T. BERserk Vulnerability, Sept. 2014.
[36] SOMOROVSKY, J. Systematic Fuzzing and Testing of TLS Li-
braries. In ACM SIGSAC Conference on Computer and Commu-
nications Security (New York, NY, USA, Oct. 2016), CCS ’16,
ACM, pp. 1492–1504.
USENIX Association
27th USENIX Security Symposium    831
[37] VAUDENAY, S. Security Flaws Induced by CBC Padding - Appli-
cations to SSL, IPSEC, WTLS. In Advances in Cryptology - EU-
ROCRYPT 2002, International Conference on the Theory and Ap-
plications of Cryptographic Techniques, Amsterdam, The Nether-
lands, April 28 - May 2, 2002, Proceedings (May 2002), vol. 2332
of Lecture Notes in Computer Science, Springer, pp. 534–546.
A Generated signature for Facebook
We provide a signature that signs the following text:
We hacked Facebook with a Bleichenbacher
Oracle (JS/HB).
The text is PKCS #1 v1.5 encoded and signed with
the certiﬁcate with the certiﬁcate that was used on
www.facebook.com at the time of this research.
We provide example commands using curl, xxd and
openssl that will verify this signature. We download the
certiﬁcate from the crt.sh search engine in order to have
a stable URL. We could alternatively get it directly from
Facebook’s servers via TLS, but that would stop working
once the certiﬁcate expires and Facebook changes it.
This signature is using the format of OpenSSL’s
rsautl command. This command signs the raw input
message and does not use the hashing that is part of
PKCS #1 v1.5.
echo 799e43535a4da70980fada33d0fbf51ae60d32
c1115c87ab29b716b49ab0637733f92fc985f28
0fa569e41e2847b09e8d028c0c2a42ce5beeb64
0c101d5cf486cdffc5be116a2d5ba36e52f4195
498a78427982d50bb7d9d938ab905407565358b
1637d46fbb60a9f4f093fe58dbd2512cca70ce8
42e74da078550d84e6abc83ef2d7e72ec79d7cb
2014e7bd8debbd1e313188b63a2a6aec55de6f5
6ad49d32a1201f18082afe3b4edf02ad2a1bce2
f57104f387f3b8401c5a7a8336c80525b0b83ec
96589c367685205623d2dcdbe1466701dffc6e7
68fb8af1afdbe0a1a62654f3fd08175069b7b19
8c47195b630839c663321dc5ca39abfb45216db
7ef837 | xxd -r -p > sig
curl https://crt.sh/?d=F709E83727385F514321
D9B2A64E26B1A195751BBCAB16BE2F2F34EBB08
4F6A9|openssl x509 -noout -pubkey > pub
key.key
openssl rsautl -verify -pubin -inkey pubkey
.key -in sig
832    27th USENIX Security Symposium
USENIX Association