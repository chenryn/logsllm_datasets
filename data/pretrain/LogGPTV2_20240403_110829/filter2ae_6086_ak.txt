    doFilter:223, AbstractAuthenticationProcessingFilter (org.springframework.security.web.authentication)
    doFilter:213, AbstractAuthenticationProcessingFilter (org.springframework.security.web.authentication)
The verification method is the same as the verification in the Response. The
certificate is configured locally instead of extracted from the Assertion. The
Sianature and summary information in the Assertion are verified, and whether
the Conditions have expired and whether the recipient in the Subject is The
expected receiving endpoint is verified. After this series of verifications, a
Credential is successfully returned, which contains some information of the
user.
### Security risks in the SAML verification process
For the signature issue, several issues mentioned in the article [Bypassing
SAML 2.0 SSO with XML Signature
Attacks](https://research.aurainfosec.io/bypassing-saml20-SSO/) feel like a
good illustration of SAML Possible security risks:
  * Is a signature required? Maybe some SAML implementations judge whether the signature is carried in the request, verify if it is carried, and not verify if it is not carried; or set a signature verification switch for developers to handle, and developers may not be familiar with not turning on the mandatory verification, etc.
  * Is the signature verified? Although the generated AuthnRequest and Response are signed, but the signature verification is not performed when each receives the SAML message.
  * Is the signature from the correct signer? X509Certificate contains the signer information. If there is no verification of whether it is a trusted certificate, then the certificate can be forged, and then the SAML message can be tampered with and re-signed.
  * Is the correct part of the response signed? There are only two places where the signatures allowed by the SAML standard exist: Response and Assertion. No one has completely implemented a complex XML signature mechanism just to use SAML. This standard is generic, as are its implementations and their software libraries. So if some library does not verify the signature to the correct location, it can refer the signature to a different location in the document, and make the receiver think the signature is valid, causing XSW attack.
There is a SAML Raider plugin in Burp, which can easily modify and forge SAML
attacks, but sometimes it needs to be constructed manually, so it is necessary
to understand the processing flow of SAML.
In "Hacking the Cloud With SAML", a new attack surface is mentioned, which is
the order of the checksum of SignedInfo and the digest check. As can be seen
from the above **SP receives AuthnResponse processing** section, the digest
verification will be processed by transform first, and the calculation of the
digest does not include the content of the Signature tag, so if the digest
verification is performed first, then the operation space under the transforms
is not limited, and the transform can be set arbitrarily, which is also
mentioned in this ppt. There are two CVEs (CVE-2022-34716, CVE-2022-34169),
which are good examples of transform attacks.
#### Problems in the Demo project
The OpenSAML used in the Demo is relatively new. After testing, the processing
of the AuthnResponse received by the SP does not have the above problem. His
verification sequence is as follows:
  * Use locally trusted certificates
  * Check SignedInfo
  * check Digest
So there is no problem with the verification of Response.
However, when IDP receives the AuthnRequest, it only checks whether the
Instant has expired. However, because there is no process for processing
signatures and digests, there is no possibility of other attacks. However, the
IDP is the AssertionConsumerServiceURL obtained from AuthnRequest, and there
is no verification to see if it is expected. Therefore, when the Reponse is
sent back later, it will cause an SSRF problem. The processing of this piece
should be done by the developer, not the library.
### Finally
Since a relatively new version of OpenSAML is used for debugging, some repair
traces can be found during the debugging process, such as the repair of XSW
and ds: Object element attacks. I saw SAML or SAML vulnerability reports
before, because it involves signatures and digests, and it is also for XML
signatures and digests. Is it digested and signed like strings? If not, how to
sign XML, how to digest XML, how to verify XML, how to tamper with forgery in
my attack, what data needs to be modified, how to recalculate signature and
digest, etc. Now it is very clear after debugging.
### Refer
* * *