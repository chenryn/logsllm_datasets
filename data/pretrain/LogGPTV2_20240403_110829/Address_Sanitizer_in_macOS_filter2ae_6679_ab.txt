堆内存的检测将在另外一篇文章中描述。
**asan实现**
****
asan可以在源代码级别同时检测栈内存和堆内存，但是两种检测手段差别很大。栈内存的检查是基于LLVM Pass， 在编译阶段插入了检测代码；
而堆内存则是使用了动态替换malloc、free这些函数达到了检测的目的。因此， asan的实现分为两部分：栈实现和堆实现。本篇文章只讨论栈内存的检测手段。
### asan的栈检测实现
###  
因为asan在检查栈的时候， 使用了插入的检测代码手段， 具体来说是在程序的LLVM IR中插入了代码。 为了简化分析， 可以直接查看相应的LLVM
IR代码， 以查看具体的实现和修改。
#### 准备工作
在这里， 还是使用上面的test.c文件作为我们的测试代码。使用如下的命令， 我们可以得到使用asan前后test.c对应的LLVM IR(
**由于默认采用了-O0的方式编译本文出现的所有文件， 因此得到的IR可能不是标准的SSA形式， 在此特别说明** )。
    [不启动asan]: clang ./test -o ./test1.ll -emit-llvm -S  
    [启用asan]: clang ./test -o ./test2.ll emit-llvm -S -fsanitize=address
#### 分析文件
为了更好地和asan生成的IR比较， 因此首先查看文件test1.ll， 文件内容如下：
    ; Function Attrs: nounwind ssp uwtable  
    define i32 @main() #0 {  
      %1 = alloca i32, align 4  
      %a = alloca [32 x i8], align 16          
      %b = alloca [32 x i8], align 16  
      %c = alloca [50 x i8], align 16  
      store i32 0, i32* %1, align 4  
      %2 = getelementptr inbounds [32 x i8], [32 x i8]* %a, i64 0, i64 1  
      store i8 49, i8* %2, align 1  
      %3 = getelementptr inbounds [32 x i8], [32 x i8]* %b, i64 0, i64 32  
      store i8 97, i8* %3, align 16  
      %4 = getelementptr inbounds [50 x i8], [50 x i8]* %c, i64 0, i64 100  
      store i8 99, i8* %4, align 4  
      ret i32 0  
    }
可以看到IR几乎是test.c中的代码的直接翻译。
接下来， 可以查看test2.ll中的内容，由于生成的test2.ll文件比较大， 在当前计算机上生成了超过300行的代码。于是，分段查看当前的代码：
    define i32 @main() #0 {  
      %1 = alloca i32, align 4  
      %2 = load i32, i32* @__asan_option_detect_stack_use_after_return  
      %3 = icmp ne i32 %2, 0  
      br i1 %3, label %4, label %6  
    ; :4                                       ; preds = %0  
      %5 = call i64 @__asan_stack_malloc_2(i64 256)  
      br label %6  
    ; :6                                       ; preds = %0, %4  
      %7 = phi i64 [ 0, %0 ], [ %5, %4 ]  
      %8 = icmp eq i64 %7, 0  
      br i1 %8, label %9, label %11  
    ; :9                                       ; preds = %6  
      %MyAlloca = alloca i8, i64 256, align 32  
      %10 = ptrtoint i8* %MyAlloca to i64  
      br label %11
如果asan中启用了 **asan_option_detect_stack_use_after_return标志， 那么使用**
asan_stack_malloc_2分配栈内存；否则使用alloca分配栈内存。 在这里需要注意的是分配栈的大小是256个字节。在test1.ll中，
可以看到当前的代码在栈上分配内存有三个，分别是[32 _i8], [32_ i8]和[50 * i8]。
并且由上面部分可以知道asan将会在每个栈变量两侧插入相应的redzone作为检测变量是否溢出的依据。因此当前的栈结构应该是这样的：
整个栈是32个字节对齐的， 一般来说是32个字节， 但是理论上也可能存在更大的对齐值。
    ; :11                                      ; preds = %6, %9  
      %12 = phi i64 [ %7, %6 ], [ %10, %9 ]  
      %13 = add i64 %12, 32                      ; 得到%a的地址  
      %14 = inttoptr i64 %13 to [32 x i8]*    ; 得到%a的指针  
      %15 = add i64 %12, 96  
      %16 = inttoptr i64 %15 to [32 x i8]*  ; 得到%b  
      %17 = add i64 %12, 160  
      %18 = inttoptr i64 %17 to [50 x i8]*  ;得到%c  
      %19 = inttoptr i64 %12 to i64*  
      store i64 1102416563, i64* %19        ; rsp=0x41B58AB3  
      %20 = add i64 %12, 8                    ; rsp+8  
      %21 = inttoptr i64 %20 to i64*  
      store i64 ptrtoint ([33 x i8]* @__asan_gen_ to i64), i64* %21 ;栈信息指针  
      %22 = add i64 %12, 16                    ; rsp+16 = ptr main  
      %23 = inttoptr i64 %22 to i64*  
      store i64 ptrtoint (i32 ()* @main to i64), i64* %23  
      %24 = lshr i64 %12, 3             ;shadow memory[0]  
      %25 = or i64 %24, 17592186044416        ;imm=0x100000000000  
      %26 = add i64 %25, 0             ;redzone[0]  
      %27 = inttoptr i64 %26 to i64*  
      store i64 4059165169, i64* %27  
      %28 = add i64 %25, 8             ;redzone[1]  
      %29 = inttoptr i64 %28 to i64*  
      store i64 4076008178, i64* %29  
      %30 = add i64 %25, 16             ;redzone[2]  
      %31 = inttoptr i64 %30 to i64*  
      store i64 4076008178, i64* %31  
      %32 = add i64 %25, 24            ; redzone[3]  
      %33 = inttoptr i64 %32 to i64*  
      store i64 -868082074072776704, i64* %33  
      store i32 0, i32* %1, align 4  
      %34 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 1  
      %35 = ptrtoint i8* %34 to i64  
      %36 = lshr i64 %35, 3  
      %37 = or i64 %36, 17592186044416  
      %38 = inttoptr i64 %37 to i8*  
      %39 = load i8, i8* %38  
      %40 = icmp ne i8 %39, 0  
      br i1 %40, label %41, label %46, !prof !2
asan在这里重新定位了三个变量。其次做了如下三件事： (1) 在redzone[0]保存了三个指针信息， 地址从低到高分别为： _[rsp+0x00] =
0x41B58AB3 (redzone[0]'s magic number)_ [rsp+0x08] = @ **asan _gen_ (@**asan
_gen_ 保存了当前栈的基本信息) _[rsp+0x10] = ptr @main (当前函数的函数指针) (2) 设置shadow
memory的基本信息：_ 如果是redzone[0], 那么使用0xF1F1F1F1进行填充， 以此作为检测手段； _如果是redzone[1],
那么使用0xF2F2F2F2进行填充；_ redzone[3]则使用0xF3F3F3F3。 * 正常分配的内存则是使用0进行说明。 如果是0，
那么证明当前位置是有效的。 为了更好的理解这部分内容， 我将使用调试器查看shadow memory中具体的值：
这里可以很清楚的看到shadow memory的内存布局， 也可以更好的理解asan的检测原理。
(3) 对访问内存的行为做了如下的改变：
     %34 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 1  
      %35 = ptrtoint i8* %34 to i64  
      %36 = lshr i64 %35, 3            ;计算索引  
      %37 = or i64 %36, 17592186044416    ;在lowmemory区域  
      %38 = inttoptr i64 %37 to i8*    ;取出当前位置的值  
      %39 = load i8, i8* %38  
      %40 = icmp ne i8 %39, 0            ;比较是否是合法的
asan在程序每次访问指针的时候， 都检测其对应的shadow memory是否是0。 如果是0， 那么认为指针是合法的；
否则直接报错。test2.ll中的其他部分大部分都是这样检测的。
#### 结论
####  
asan的栈的检测是一项功能强大的工具，可以很好的检查出栈指针越界的问题。程序开发人员或者漏洞查找人员可以多利用asan检查或者找出更多的“越界漏洞”，
以保证程序的安全性。
**参考**
****
  1. [libtidy global buffer overflow](https://marcograss.github.io/bug/2016/08/03/libtidy-global-bof.html)
  2. [LLVM IR](http://llvm.org/docs/LangRef.html)
  3. [AddressSanitizerAlgorithm](https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm)
  4. [asan in Xcode7](http://www.cocoachina.com/ios/20150729/12830.html)
  5. [asan from google](http://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/37752.pdf)
Happy Hacking JudyZhu123