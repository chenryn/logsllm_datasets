**作者：cq674350529  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
### 前言
之前在浏览群晖官方的安全公告时，翻到一个`Critical`级别的历史漏洞[Synology-SA-18:64](https://www.synology.com/en-global/security/advisory/Synology_SA_18_64)。根据漏洞公告，该漏洞存在于群晖的`DSM(DiskStation
Manager)`中，允许远程的攻击者在受影响的设备上实现任意代码执行。对群晖`NAS`设备有所了解的读者可能知道，默认条件下能用来在群晖`NAS`上实现远程代码执行的漏洞很少，有公开信息的可能就是与`Pwn2Own`比赛相关的几个。由于该漏洞公告中没有更多的信息，于是打算通过补丁比对的方式来定位和分析该公告中提及的漏洞。
### 环境准备
群晖环境的搭建可参考之前的文章[《A Journey into Synology NAS 系列一:
群晖NAS介绍》](https://cq674350529.github.io/2021/08/30/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E4%B8%80-%E7%BE%A4%E6%99%96NAS%E4%BB%8B%E7%BB%8D/),这里不再赘述。根据群晖的[安全公告](https://www.synology.com/en-global/security/advisory/Synology_SA_18_64)，以`DSM 6.1`为例，`DSM
6.1.7-15284-3`以下的版本均受该漏洞影响，由于手边有一个`DSM 6.1.7`的虚拟机，故这里基于`DSM`
`6.1.7-15284`版本进行分析。
### 补丁比对
首先对群晖的`DSM`更新版本进行简单说明，方便后续进行补丁比对。以`DSM
6.1.7`版本为例，根据其发行说明，存在`1`个大版本`6.1.7-15284`和`3`个小版本`6.1.7-15284 Update
1`、`6.1.7-15284 Update 2`及`6.1.7-15284 Update
3`。其中，大版本`6.1.7-15284`对应初始版本，其镜像文件中包含完整的系统文件，而后续更新的小版本则只包含与更新相关的文件。另外，`Update
2`版本中包含`Update 1`中的更新，`Update 3`中也包含`Update 2`中的更新，也就是说最后`1`个小版本`Update
3`包含了全部的更新。
从群晖官方的[镜像仓库](https://archive.synology.com/download/)中下载`6.1.7-15284`、`6.1.7-15284-2`和`6.1.7-15284-3`这三个版本对应的`pat`文件。在`Update
x`版本的`pat`文件中除了包含与更新相关的模块外，还有一个描述文件`DSM-Security.json`。比对`6.1.7-15284-2`和`6.1.7-15284-3`这2个版本的描述文件，如下。
可以看到，在`6.1.7-15284 Update
3`中更新的模块为`libfindhost`与`netatalk-3.x`，与对应版本发行说明中的信息一致。
借助`Bindiff`插件对版本`6.1.7-15284`和`6.1.7-15284 Update
3`中的`libfindhost`模块进行比对，如下。可以看到，主要的差异在函数`FHOSTPacketRead()`中。后面的其他函数很短，基本上就`1~2`个`block`，可忽略。
两个版本中函数`FHOSTPacketRead()`内的主要差异如下，其中在`6.1.7-15284 Update 3`中新增加了`3`个`block`。
对应的伪代码如下。可以看到，在`6.1.7-15284 Update
3`中，主要增加了对变量`v34`的额外校验，而该变量会用在后续的函数调用中。因此，猜测漏洞与`v34`有关。
### 漏洞分析
`libfindhost.so`主要是与`findhostd`服务相关，用于在局域网内通过`Synology
Assistant`工具搜索、配置和管理对应的`NAS`设备，关于`findhostd`服务及协议格式可参考之前的文件[《A Journey into
Synology NAS 系列二:
findhostd服务分析》](https://cq674350529.github.io/2021/09/12/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E4%BA%8C-findhostd%E6%9C%8D%E5%8A%A1%E5%88%86%E6%9E%90/)。其中，发送数据包的开始部分为`magic
(\x12\x34\x56\x78\x53\x59\x4e\x4f)`，剩余部分由一系列的`TLV`组成，`TLV`分别对应`pkt_id`、`data_length`和`data`。
另外，在`libfindhost.so`中存在一大段与协议格式相关的数据`grgfieldAttribs`，表明消息剩余部分的格式和含义。具体地，下图右侧中的每一行对应结构`pkt_item`，其包含`6`个字段。其中，`pkt_id`字段表明对应数据的含义，如数据包类型、用户名、`mac`地址等；`offset`字段对应将数据放到内部缓冲区的起始偏移；`max_length`字段则表示对应数据的最大长度。
> 实际上，`libfindhost.so`中的`grgfieldAttribs`，每一个`pkt_item`包含`8`个字段；而在`Synology
> Assistant`中，每一个`pkt_item`包含`6`个字段。不过，重点的字段应该是前几个，故这里暂且只关注前`6`个字段。
`findhostd`进程会监听`9999/udp, 9998/udp,
9997/udp`等端口，其会调用`FHOSTPacketRead()`来对接收的数据包进行初步校验和解析。以`DSM 6.1.7-15284`版本为例，
`FHOSTPacketRead()`的部分代码如下。首先，在`(1)`处会校验接收数据包的头部，校验通过的话程序流程会到达`(2)`，在`while`循环中依次对剩余部分的`pkt_item`进行处理。在`(2)`处会从数据包中读取对应的`pkt_id`，之后在`grgfieldAttribs`中通过二分法查找对应的`pkt_item`，查找成功的话程序流程会到达`(3)`。在`(3)`处会读取对应`pkt_item`中的`pkt_index`字段，如果`pkt_index=2`，程序流程会到达`(4)`。如果`v39
==
pkt_id`，则会执行`++v36`，否则在`(5)`处会将`pkt_id`赋值给`v39`。之后，在`(6)`处会根据`pkt_index`的值调用相应的`FHOSTPacketReadXXX()`。
    // in libfindhost.so
    __int64 FHOSTPacketRead(__int64 a1, char *recv_data, int recv_data_size, char *dst_buf)
    {
      v4 = a1;
      // ...
      remain_pkt_len = recv_data_size;
      // ...
      v6 = dst_buf;
      memset(dst_buf, 0, 0x2F50uLL);
      v7 = *(unsigned int *)FHOSTHeaderSize_ptr;
      v8 = *(_DWORD *)FHOSTHeaderSize_ptr;
      // ...
      v37 = memcmp(recv_data, src, *(unsigned int *)FHOSTHeaderSize_ptr);   // (1) check packet header
      // ...
      pkts_ptr = &recv_data[v7];
      v33 = pkts_ptr;
      v34 = remain_pkt_len - v8;
      // ...
      v11 = v6 + 0x74;
      v12 = (char *)off_7FFFF7DD7FE0;   // grgfieldAttribs
      v38 = v6;
      v39 = 0;
      v36 = 0;
      s = v11;
      while ( 1 )
      {
        pkt_id = (unsigned __int8)*pkts_ptr;    // (2) get pkt_item_id
        v15 = pkts_ptr + 1;
        wrap_remain_pkt_len = remain_pkt_len - 1;
        v17 = 76LL;
        v18 = 0LL;
        wrap_pkt_id = (unsigned __int8)*pkts_ptr;
        // ... try to find target pkt_item in grgfieldAttribs via binary search
        pkt_index_in_table = *((_DWORD *)v21 + 1);  // (3) find the target pkt_item
        // ...
        v31 = *((unsigned int *)v21 + 6);
        if ( (_DWORD)v31 != 2 )
          v31 = 1LL;
        if ( pkt_index_in_table == 2 )              // index
        {
          if ( v39 == pkt_id )      // (4)
          {
            ++v36;      // cause out-of-bounds wirte later
          }
          else
          {
            v39 = (unsigned __int8)*pkts_ptr;   // (5)
            v36 = 0;
          }
        }
        else
        {
          v39 = 0;
          v36 = 0;
        }
        v24 = (*((__int64 (__fastcall **)(__int64, char *, _QWORD, char *, _QWORD, __int64, _QWORD))off_7FFFF7DD7FC0    // (6)
               + 3 * pkt_index_in_table
               + 1))(
                a1,
                pkts_ptr + 1,