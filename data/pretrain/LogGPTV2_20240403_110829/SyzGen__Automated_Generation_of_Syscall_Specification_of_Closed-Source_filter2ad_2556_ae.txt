fails to recognize such string-based dependence variables and the
corresponding dependencies.
6.3 Dependence Generalization
To see how much benefit does dependence generalization pro-
vides, we compared SyzGen against SyzGen-IMF in terms of the
number of identified dependencies and block coverage. As shown
in Table 3, SyzGen-IMF can infer dependencies for 5 user clients
among those with logs. Interestingly, starting from 33 dependen-
cies learned from logs by SyzGen-IMF, SyzGen can generalize them
to those interfaces without logs and recognize 238 more depen-
dencies. Note that the number of dependencies is counted by the
#Dependencies∗
SyzGen-IMF
2
4
2
23
2
33
Block Coverage
User Client
SyzGen-IMF
209
AudioAUUCDriver
6503
AppleAPFSUserClient
192
AppleUpstreamUserClient
4421
IOBluetoothHCIUserClient
157
IONetworkUserClient
Overall
11482
∗: The number of dependencies is counted by the usage of them.
Table 3: Comparison of dependence inference between
SyzGen-IMF and SyzGen
SyzGen
5
21
5
235
5
271
SyzGen
255
6811
241
5773
157
13237
instances of them among different interfaces. For example, SyzGen-
IMF only infers three types of explicit dependencies (identified
by the dependence variable from the generate interface) from the
logs for IOBluetoothHCIController, in which one represents the
request the application sends to the service, one represents a re-
mote Bluetooth device, and one represents the connection between
two devices. From the logs, SyzGen-IMF discovered 16, 2, and 5
use interfaces that take the three types of dependence variables,
respectively. The fourth and fifth columns of Table 3 further demon-
strate the coverage improvement achieved by those additionally
discovered dependencies. On average, SyzGen achieves 16.5% more
coverage compared to SyzGen-IMF. Note that we only compare
SyzGen against SyzGen-IMF for 5 user clients because we did not
even find any explicit dependence for the rest 20 user clients. This
means that SyzGen and SyzGen-IMF degrades to the same mode
where only interface recovery is performed. Upon a closer look,
these user clients mostly correspond to simple and small drivers.
To get a better intuition on the evolution of the fuzzing process,
we visualize the block coverage over time as shown in Fig. 9 in the
Appendix. The coverage improvement in general is as significant as
we expected. We investigated the reasons and come to the following
conclusions. Since we uncovered more explicit dependencies, the
search space of fuzzing for input is enlarged. Thus, in general more
fuzzing time is needed to cover more basic blocks. For example,
we can see from Fig. 9(b) that the coverage clearly still improves
towards the end of the experiment for SyzGen. However, there
are exceptions. For IOBluetoothHCIUserClient, we observe only
30.7% coverage improvement over SyzGen-IMF, and yet SyzGen
identified 10 times more explicit dependencies as shown in Table 3.
It turns out that IOBluetoothHCIUserClient serves mostly as a
middleware connecting userspace applications and the underlying
firmware. Thus, most interfaces simply construct the request from
user inputs and forward it to the firmware through a common set of
functions, leaving much smaller space for coverage improvement.
Nevertheless, we are able to find serious vulnerabilities in the new
interfaces as will be shown in §6.4. For IONetworkUserClient and
AppleAPFSUserClient, the improvement is relatively small due
to their unique characteristics of explicit dependence. As opposed
to most drivers in which the value of a dependence variable is
dynamically allocated (e.g., object ID), these two drivers in fact
have some pre-defined IDs that can be directly used. For instance,
interface methodVolumeSpace() in driver AppleAPFSUserClient
provides the space information of a given volume represented by a
dependence variable which can be either produced by the interface
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea759User Client
AppleAPFSUserClient
AppleCredentialManagerUserClient
AppleSSEUserClient
AppleUpstreamUserClient
AppleUSBHostDeviceUserClient
AppleUSBHostInterfaceUserClient
AudioAUUCDriver
IOBluetoothHCIUserClient
IONetworkUserClient
Overall
#Interfaces
49
2
1
7
20
34
7
213
5
338
#Interfaces w/ Traces
5
1
1
2
4
3
2
16
2
36
Table 4: Numbers of interfaces with traces.
methodVolumeCreate() or some special constants such as zero
representing the default volume.
Dependence verification. Although we do not have the ground
truth for the dependencies (except IONetworkUserClient and IOAu-
dioFamily manually verified as aforementioned), we manually re-
verse engineer the binaries to confirm the correctness of them
(i.e., no false positives). Besides, we find some hints from those
meaningful functions’ names, indicating the presence of dependen-
cies. We take the driver APFS as an example, in which functions
methodVolumeDelete obviously requires a dependence value pro-
duced by the function methodVolumeCreate. We also observed
missing explicit dependence in 4 user clients where we have no
trace at all and thus cannot infer any explicit dependency.
Necessity for explicit dependence generalization. IMF [14]
targets on commonly used syscalls and thus downloads 5 most
popular and free apps in each category from Apple App Store to
collect syscall logs, while Moonshine [21] focuses on Linux core
subsystem and relies on existing test suite such as Linux Testing
Project (LTP), Linux Kernel selftests (kselftests), Open Posix Tests,
and Glibc Testsuite. In contrast, drivers oftentimes lack test suites
and applications exercising every interface. In our evaluation, we
successfully obtained traces for 9 services listed in Table 4. In total,
only 36 out of 338 interfaces have traces, resulting in 238 more
dependencies being neglected initially by SyzGen-IMF as shown in
Table 3. Given the scarcity of traces, generalizing explicit dependen-
cies from interfaces with traces to those without traces could reduce
the reliance on collecting traces and improve interface recovery.
6.4 Bug Finding and Case Studies
During the evaluation of fuzzing (§6.2), we collected thousands of
crash logs3 and crashing test cases, manually triaged them, and
filtered out duplicates based on the stack trace. In total, SyzGen
was able to find 34 unique bugs in 25 user clients. Table 5 lists all
the bugs SyzGen found as well as their corresponding services and
crashing types including arbitrary read, OOB read, integer overflow,
null pointer deference, etc. In general, as expected, we find that
the number of bugs is positively correlated to the code size and
complexity of the inputs.
The base configuration of SyzGen (with service and command
identifier determination and constraints recovered from dispatch
table if applicable) is able to find 29 bugs. Although the result
is impressive on its own, we found that all of them are rather
3MacOS would automatically generate crash reports containing backtraces upon
panics.
shallow bugs that can be easily triggered, e.g., invalid userspace
pointer could trigger an assertion failure. In contrast, those bugs
only identified by SyzGen require either complex inputs or correct
handling of dependencies. They also have more serious security
impacts. One of which can even lead to privilege escalation.
We are currently working on responsibly disclosing those vul-
nerabilities to Apple. So far, we have received 2 CVE numbers. In
the rest of this subsection, we will present the case studies of several
bugs, explaining their root causes and demonstrating how SyzGen
is able to discover them.
•Incoherent checks. One of the most interesting bugs in our
collection is caused by incoherent checks against a 4-byte boolean
input. Depending on its value, the driver expects different sizes of
inputs. The problem is that the driver initially sanitizes the inputs
by checking the least significant byte of the boolean input, but
considers the whole 4 bytes as a boolean value when consuming
the rest input. Due to the incoherent checks, a deliberately crafted
boolean value (e.g., 0x100) could cause different outcomes, leading to
an out-of-bound read. This subtle difference can be easily neglected
by manual audits. Thanks to symbolic execution to explore every
possible path, SyzGen is able to model different paths in different
specifications, including one modeling the boolean value of zero,
one with the value larger than zero, and one requiring only the
least significant byte to be zero.
•Nested structure with dependencies and inter-fields re-
lationship. Fig. 8 showcases the specification for the interface
User Client
IOBluetoothHCIUserClient
ACPI_SMC_PluginUserClient
IOHDIXControllerUserClient
AppleCredentialManagerUserClient
AppleAPFSUserClient
AppleUSBLegacyDeviceUserClient
AppleUSBHostInterfaceUserClient
AppleUSBHostFramework-
DeviceClient
AppleUSBHostDeviceUserClient
AppleUSBHostFramework-
InterfaceClient
IOHDACodecDeviceUserClient
AppleHDAControllerUserClient
AppleHDADriverUserClient
*: A: SyzGen; B: SyzGen-Base
Vuln Type
Arbitrary Read
Arbitrary Read
Null Pointer
OOB Read
OOB Read&Write
Null Pointer
Null Pointer
Out of Memory
Invalid Free
Memory Leak
Assert Failure
Assert Failure
Null Pointer
Null Pointer
Integer Overflow
Assert Failure
Assert Failure
Assert Failure
Null Pointer
Null Pointer
Assert Failure
Kernel Hang
Kernel Hang
Assert Failure
Assert Failure
Integer Overflow
Assert Failure
Null Pointer
Null Pointer
Kernel Hang
Null Pointer
Null Pointer
Null Pointer
Null Pointer
Status
CVE-2020-9929
Confirmed
Confirmed
Reported
CVE-2020-9928
Reported
Reported
Reported
Reported
Reported
Reported
Reported
Reported
Reported
Fixed
Reported
Reported
Reported
Reported
Reported
Reported
Reported
Reported
Reported
Reported
Fixed
Reported
Reported
Reported
Reported
Reported
Reported
Reported
Reported
Found*
A
A
A
A
A
A&B
A&B
A&B
A
A&B
A&B
A&B
A&B