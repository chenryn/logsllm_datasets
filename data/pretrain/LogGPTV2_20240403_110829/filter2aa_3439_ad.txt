ü Taint"analysis"is"amazing"because"we"are"able"to"using"in"fuzzing"tasks"to"
know"what"registers"and"memory"address"are"“affected”"by"the"user"data"
input."J"
ü During"Virtual"Machine’s"decoding,"it"is"interesting"to"distinguish"which"
instructions"are"related"to"user"input"and"which"are"not."J"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
84"
v  Installing Triton without Pin  (Ubuntu 19):  
ü  apt-get install libboost-all-dev 
ü  apt-get install libpython-dev 
ü  apt-get install libcapstone-dev 
ü  Take care: DO NOT install libz3-dev. If this package is already 
installed, so remove it.  
ü  git clone https://github.com/Z3Prover/z3 
ü  cd z3/ 
ü  python scripts/mk_make.py 
ü  cd build/ 
ü  make 
ü  make install 
ü  git clone https://github.com/JonathanSalwan/Triton.git 
ü  cd Triton/ 
ü  mkdir build 
ü  cd build/ 
ü  cmake .. 
ü  make -j install (my recommendation: 8 GB RAM + 8 GB swapfile) 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
85"
ü  Installing Triton with Pin (Ubuntu 19): 
ü  Install the same packages from last slide.  
ü  Install Z3 as shown in the last slide. 
ü  wget https://software.intel.com/sites/landingpage/pintool/
downloads/pin-2.14-71313-gcc.4.4.7-linux.tar.gz 
ü  tar zxvf pin-2.14-71313-gcc.4.4.7-linux.tar.gz 
ü  cd pin-2.14-71313-gcc.4.4.7-linux/source/tools 
ü  git clone https://github.com/JonathanSalwan/Triton.git 
ü  cd Triton/ 
ü  mkdir build 
ü  cd build 
ü  cmake -DPINTOOL=on -DKERNEL4=on ..  
ü  make 
ü  cd .. 
ü  ./build/triton ./src/examples/pin/ir.py /usr/bin/host   (only to test the 
installation). 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
86"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
87"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
88"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
89"
This"is"an"educational"way"to"show"how"
to"find"the"hexadecimal"representation"
for"each"instruction."
"
However,"there"are"much"better"ways"
to"do"it"by"opening"the"binary"on"IDA"
Pro,"Radare2,"Ghidra"or"even"using"
distorm3.""
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
90"
byte by byte J 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
91"
0xb9 == 185 J 
eax 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
92"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
93"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
94"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
95"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
96"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
"RADARE2 + MIASM 
DEF"CON"CHINA"1.0"(2019)"
97"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
98"
ESIL comment 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
99"
ü  aer: handle ESIL registers (set and show) 
ü  aes: perform emulated debugger step 
ü  aecu: continue until address 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
100"
R2M2  bridges the radare2 and miasm2 communities: radare2 being the graphical interface of 
miasm2, and miasm2 simplifying the implementation of new architectures. 
How to install it? 
ü  apt-get install docker 
ü  git clone https://github.com/radare/radare2.git 
ü  cd radare2/ 
ü  sys/install.sh 
ü  Install MIASM 
ü  pip install cffi 
ü  pip install jinja2 
ü  docker pull guedou/r2m2 
ü  docker run --rm -it -e 'R2M2_ARCH=x86_32' guedou/r2m2 bash 
ü  [r2m2@fd5662d151e4 ~]$ pwd 
ü  (another terminal) docker ps -a 
ü  (another terminal) docker cp /root/defcon2019.bin fd5662d151e4:/home/r2m2/
defcon2019.bin 
ü  [r2m2@fd5662d151e4 ~]$ export R2M2_ARCH=x86_32 
ü  [r2m2@fd5662d151e4 ~]$ r2 -A -b 32 -a r2m2 defcon2019.bin  
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
101"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
102"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
"DTRACE on WINDOWS 
DEF"CON"CHINA"1.0"(2019)"
103"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
104"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  DTrace is a dynamic tracing framework, which is very efficient and famous on 
Solaris operating system.  
ü  Dtrace was initially written by Mike Shapiro, Adam Leventhal and Brian Cantrill at 
Sun Microsystems. Although they were developing DTrace since 2003, it was only 
introduced in Solaris 10 03/05.  
ü  It is used to get a real time overview of a system in user and kernel mode. 
Furthermore, it can be used to understand how application and systems are 
behaving.  
ü  Few months ago, DTrace was ported to Windows: https://github.com/
opendtrace/opendtrace/tree/windows 
ü  DTrace is could be summarized as a set of probes (sensors) scattered over the key 
point in th kernel. Thus, every time that a probe is “activated”, it is possible to 
register and understand the application behavior.   
ü  Using DTrace makes easier to trace the profile of a process and the system, find 
which system calls are “called”, how many bytes are written/read  by a process, 
file opened by a process, tracing the sequence of called system calls and so on.           
DEF"CON"CHINA"1.0"(2019)"
105"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  DTrace scripts are written in D language (similar to awk).  
ü  Probe names are described by the following syntaxe: 
 provider:module:function:name 
where:  
ü  provider: library of probes used to instrument an area of the system. On 
Windows, the existing providers are syscall, etw, profile, pid and dtrace.  
ü  module:  kernel module where we find the probe.  
ü  function: function contaning the probe. 
ü  name: specific name or description of the target probe.  
ü  Key concepts:  
ü  predicates: user defined conditions.  
ü  actions: tasks that are run when a probe fires.  
ü  aggregations: coalesce data using aggregation functions.  
DEF"CON"CHINA"1.0"(2019)"
106"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  To install DTrace:  
ü   Windows 10 x64 (build 18342 or later) from Windows Insider Program. 
ü  bcdedit.exe /set dtrace on 
ü  Download DTrace package: http://download.microsoft.com/download/B/
D/4/BD4B95A5-0B61-4D8F-837C-F889AAD8DAA2/DTrace.amd64.msi 
ü  _NT_SYMBOL_PATH=srv*C:\symbols*https://msdl.microsoft.com/
download/symbols 
ü  Reboot the system.  
ü  Open a command prompt as administrator.  
ü  If you are using fbt (function boundary tracing), so it is necessary to attach 
the WinDbg and boot the Windows in debug mode. J 
DEF"CON"CHINA"1.0"(2019)"
107"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
108"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
109"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
110"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
111"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
112"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  It is possible to use a different type of provider named “fbt” (function boundary 
tracing), which tracks the sequence of system calls being executed through the 
NTFS in the kernel.  
ü  The “fbt” provider only it is available when there is kernel debugger attached to 
the Windows 10. 
DEF"CON"CHINA"1.0"(2019)"
113"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
114"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
115"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
116"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
117"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Traceext.sys:!exposes!functionality!
used!by!DTrace!to!tracing.!
DEF"CON"CHINA"1.0"(2019)"
118"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
"ANTI-VM  
DEF"CON"CHINA"1.0"(2019)"
119"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
120"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  It is extremely easy writing malware samples using  anti-VM techniques designed 
to detect VMWare (checking I/O port communication), VirtualBox, Parallels, 
SeaBIOS emulator, QEMU emulator, Bochs emulator, QEMU emulator, Hyper-V, 
Innotek VirtualBox, sandboxes (Cuckoo).  
ü  Furthermore, there are dozens of techniques that could be used for detection 
Vmware sandboxes: 
ü  Examing the registry (OpenSubKey( ) function) to try to find entries related 
to tools installed in the guest 
(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VirtualMachine\Guest\Para
meters). 
ü  Using WMI to query the Win32_BIOS management class to interact with 
attributes from the physical machine.  
ü  We have already know every single anti-VM technique around the world and all 
of them are documented.  
ü  Most current techniques use WMI and it is quick  to write a C# program using 
them. 
DEF"CON"CHINA"1.0"(2019)"
121"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
122"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  The code from last slide does not have any news:  
ü  The ManagementClass class represents a Common Information Model 
(CIM) management class.  
ü  Win32_BIOS WMI class represents the attributes of BIOS and members of 
this class enable you to access WMI data using a specific WMI class path. 
ü  GetInstances( ) acquires a collection of all instances of the class. 
ü  GetEnumerator( ) returns the enumerator (IEnumerator) for the collection. 
ü  IEnumerator.Current( ) returns the same object. 
ü  IEnumerator.MoveNext( ) advances the enumerator to the next element of 
the collection. 
q  Physical host:  
C:\> Test_VM.exe 
Attributes: 
Version:         DELL   - 6222004 
SerialNumber:    D5965S1 
OperatingSystem:         0 
Manufacturer:    Dell Inc. 
q  Guest virtual machine:  
E:\> Test_VM.exe 
Attributes: 
Version:         LENOVO - 6040000 
SerialNumber:    VMware-56 4d 8d c3 a7 c7 
e5 2b-39 d6 cc 93 bf 90 28 2d 
OperatingSystem:         0 
Manufacturer:    Phoenix Technologies LTD 
DEF"CON"CHINA"1.0"(2019)"
123"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
124"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Double-click"the"result....""
DEF"CON"CHINA"1.0"(2019)"
125"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
126"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
127"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  There is not support for acquiring 
temperature data in virtual machines.  
ü  Therefore, malwares are able to know 
whether they are running on virtual machines 
or not. J 
ü  Physical Host: 
C:\> VM_Test2.exe 
Status: OK  Thus, the program is 
running in a physical host! 
ü  Virtual Machine: 
C:\> VM_Test2.exe 
This program IS RUNNING in a virtual machine! 
DEF"CON"CHINA"1.0"(2019)"
128"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
q FEW CONCLUSIONS: 
ü Before trying to unpack modern protectors, it is really necessary to 
understand the common anti-reversing techniques.  
ü MIASM, METASM and TRITON are amazing tools to handle and 
deobfuscate complex codes.  
ü Emulation is an possible alternative to understand small and 
complicated piece of codes.  
ü DTrace has done an excellent job on Solaris and it may be an excellent 
tool on Windows operating system. Stay tuned. J 
ü Although excellent researches have found sophisticated anti-vm 
techniques, many other simples and smart ones exist. Take care. 
DEF"CON"CHINA"1.0"(2019)"
129"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
v Acknowledgments to: 
ü DEF CON’s staff, who have been always very kind with 
me.  
ü You, who reserved some time attend my talk. 
ü Remember: the best of this life are people. J 
DEF"CON"CHINA"1.0"(2019)"
130"
ALEXANDRE"BORGES"–"IT"IS"NOT"ALLOWED"TO""COPY"OR"REPRODUCE"THIS"SLIDE."""
ü  Malware and Security 
Researcher. "
ü  Speaker at DEFCON USA 2018 
ü  Speaker at HITB2019 
Amsterdam 
ü  Speaker at CONFidence Conf. 
2019 
ü  Speaker at BSIDES 
2018/2017/2016 
ü  Speaker at H2HC 2016/2015 
ü  Speaker at BHACK 2018 
ü  Consultant, Instructor and 
Speaker on Malware Analysis, 
Memory Analysis, Digital 
Forensics and Rookits. "
ü  Reviewer member of the The 
Journal of Digital Forensics, 
Security and Law."
ü  Referee on Digital 
THANK!YOU!FOR!
ATTENDING!MY!TALK.!J!
谢谢!
!
Ø  Twitter:!!
!
@ale_sp_brazil!
@blackstormsecbr!
!
!
Ø  Website:!http://blackstormsecurity.com!
Ø  LinkedIn:!http://www.linkedin.com/in/
aleborges!
Ø  E-mail:!
PI:EMAIL!