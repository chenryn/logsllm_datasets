believed was the dishonest prover.
To protect against these attacks, we could require ev-
ery prover to use a unique key with the veriﬁer, thereby
making it impossible for the dishonest prover to encrypt
a message for some other honest prover.
Example 2. Making the additions described above to the
protocol from Example 1 we get a protocol that is secure
against all the attacks listed above:
Veriﬁer
Generate random values
chal, resp and nonce
Prover
id
{chal,resp}kpv
ready
chal,nonce
h(nonce,kpv),resp
timed
This protocol uses a lightweight hash function, which
needs to be computed before the timer expires.
3 Timer location calculus: A language for
modelling distance bounding protocols
Our timer location calculus extends the applied pi-
calculus [1, 2, 7, 33] with timers and locations. We
ﬁrst present the calculus syntax, illustrating this using
the protocol from Example 1. We then present the se-
mantics and explain how this captures the behaviour of
timed communications.
Syntax: Each protocol role is written as a process,
using the syntax of our language (Figure 1). Communi-
cation between roles is modelled by the input and output
commands. The semantics, presented below, will substi-
tute the term sent by an output command for the variable
named in an enabled input. We assume that the attacker
Figure 1 The timer location calculus syntax
M,N ::=
x,y,z
a,b,c,k
f (M1, . . . ,Mn)
variables
names
constructor application
terms
D ::= g(M1, . . . ,Mn)
destructor application
P,Q ::=
0
out(N).P
in(x).P
P | Q
!P
new a.P
let x = D in P else Q
event(M1, . . . ,Mn)
startTimer.P
stopTimer.P
processes
nil
output
input
parallel composition
replication
restriction
term evaluation
an event
timer activation
timer termination
S ::=
[{P1, . . . ,Pn}]r
new ˜a.S
[{P1, . . . ,Pn}]r | S
systems
a location
restriction
locations
controls the network, so processes are not able to ensure
that a particular output goes to a particular input.
Parallel composition (P | Q) represents two processes
running concurrently, and process replication (!P) repre-
sents an arbitrary number of copies of a process running
in parallel. The new command creates a new value that
then represents, for instance, a nonce, a key or a process
identity. This value will not be known to the attacker
unless it is output on a public channel.
Example 3. The following process models an arbitrary
number of provers with different ids each running an ar-
bitrary number of times
ExProvers(id) = !new id.!PRole(id)
We deﬁne PRole(id) in the next example to model a sin-
gle run of the protocol with identity “id”, so !PRole(id)
represents an arbitrary number of runs of the protocol
with a particular id. The “!new id” term at the front of
the process generates an arbitrary number of new pro-
cess ids.
Cryptography is modelled using constructors and de-
structors, e.g., symmetric key encryption can be mod-
elled using a binary constructor enc(m,k) to represent the
message m encrypted with the key k and a binary destruc-
tor function dec with the rewrite rule dec(enc(m,k),k) =
m. Functions can be public, i.e., available for use by the
attacker, or private meaning that they cay only be used
1566    27th USENIX Security Symposium
USENIX Association
by processes speciﬁed as party of the protocol. Private
functions are useful, for instance, to look up private keys
which should only be known to protocol participants.
Functions are applied using the let statement, e.g.,
“let pt = dec(ct,k) in P else Q” tries to decrypt cipher
text ct with key k, and acts as P if decryption succeeds
and Q otherwise. Term evaluation in the let statement
can also be used to deﬁne projections on tuples, and
equality checks on names. As syntactic sugar we write
“in(=a).P”, for a process that receives an input and then
acts as the process P if that input value is equal to a. We
refer the reader to [2] for more details on functions in the
applied pi-calculus.
Example 4. A single run of the prover role of the proto-
col informally described in Example 1, with identity id,
can be modelled as the process:
PRole(id) = out(id) . in(x) .
let (chal,resp) = dec(x,k) in
out(ready) . in(=chal) . out(resp)
Events are used to annotate the protocol for automated
checking. For instance, below we will add an event to
the protocol to signal that the veriﬁer believes it has cor-
rectly veriﬁed a particular prover. The syntax presented
so far is from the applied pi-calculus. Next, we present
our additions, namely, locations and timers.
The process startTimer.P represents starting a timed
challenge and stopTimer.P represents ending a chal-
lenge. We require that every start timer action is matched
by exactly one stop timer action along all possible paths,
and replication and parallel composition are forbidden
between start and stop timer actions.
Example 5. The veriﬁer role of the protocol informally
described in Example 1 can be modelled as the process:
ExVeriﬁers = !in(id) . new chal . new resp.
out(enc((chal,resp),k)) . in(ready).
startTimer . out(chal) . in(=resp) .
stopTimer . event(verify(id))
Locations are written [P]r, where P are (co-
located) processes and r denotes the number of active
timers. We abbreviate [{P1, . . . ,Pn}]r as [P1, . . . ,Pn]r and
[{P1, . . . ,Pn}]0 as [P1, . . . ,Pn]. Our model assumes that
processes are either co-located or at distinct locations,
and we abstract away from precise distances between
provers and veriﬁers when modelling. We assume that
there is a known maximum round trip time for commu-
nication between “local” processes, i.e., co-located pro-
cesses, and the timer enforces this. Hence, it will not be
possible for a message to travel to processes at different
locations, and back again before the timer expires.
Example 6. The system
new k.[ ExProvers | ExVeriﬁers ]
represents our example provers and veriﬁers running at
the same location, i.e., it is possible for the prover to an-
swer the challenge within the time limit and be veriﬁed.
The declaration of the key k as new means that this is
a new unique value, known only in the ExProvers and
ExVeriﬁers processes.
By comparison, the system
new k.([ ExProvers ] | [ ExVeriﬁers ])
represents the veriﬁers and provers at different locations.
Hence, in the latter system, it should not be possible for
the prover to answer the timed challenge within the time
limit, therefore a correct distance bounding protocol will
not allow the prover to be veriﬁed.
Semantics: Dynamic behaviour of processes (which
model protocols) can be examined using the semantics
of our language (Figure 2), which is deﬁned over system
conﬁgurations, denoted E, L , where that E is a set of
free names and L is a ﬁnite multiset of systems.
The set E keeps track of the names that have been as-
signed so far, making it possible for the new command
to pick fresh previously unused names, this is done by
the (NEW) rule. The (REPL) rule creates a copy of a
replicated process, the (LET 1) rule can be used to ap-
ply functions, e.g., for decryption, and the (LET 2) rule
selects the else branch when no function reductions are
possible (this, for instance, allows us to deﬁne equality
tests). These rules are a direct extension of existing ap-
plied pi-calculus rules (e.g., [1, 33]) with our syntax for
locations.
The rules we have created for our modelling language
deﬁne the behaviour for timers and for communication
between locations. The (START) rule increments the
number of timers running at a location, and the (STOP)
rule reduces the number of running timers. The re-
striction placed upon processes ensures that the num-
ber of running timers never becomes negative. Rule
(I/O LOCAL) deﬁnes local communication, which al-
lows messages to be exchanged between co-located pro-
cesses, regardless of whether timers are running.
Example 7 (Local communication). As an example we
consider a veriﬁer that sends a challenge, denoted a, to
a prover, to which the prover replies with a function f
applied to this and some other value b:
timed
PV
P(cid:48)
V
a
f (a,b)
PP
P(cid:48)
P
USENIX Association
27th USENIX Security Symposium    1567
Figure 2 Operational semantics for our timer locations calculus
E, L ∪{ [P ∪{!P}]r } → E, L ∪{ [P ∪{!P,P}]r }
E, L ∪{ [P ∪{P | Q}]r } → E, L ∪{ [P ∪{P,Q}]r }
E, L ∪{ [P ∪{new a.P}]r } → E ∪{a(cid:48)}, L ∪{ [P ∪{P{a(cid:48)/a}}]r }
for some name a(cid:48) /∈ E
E, L ∪{ [P ∪{let x = D in P else Q}]r } → E, L ∪{ [P ∪{P{M/x}}]r }
if there exists M such that D → M
E, L ∪{ [P ∪{let x = D in P else Q}]r } → E, L ∪{ [P ∪{Q}]r }
if there is no M such that D → M(cid:48)
E, L ∪{ [P ∪{out(M).P,in(x).Q}]r } → E, L ∪{ [P ∪{P,Q{M/x}}]r }
E, L ∪{ [P ∪{out(M).P}]r , [Q]0 } → E, L ∪{ [P ∪{P}]r , [Q∪{out(M)}]0 }
E, L ∪{ [P ∪{startTimer.P}]r } → E, L ∪(cid:8) [P ∪{P}]r+1
E, L ∪{ [P ∪{stopTimer.P}]r } → E, L ∪(cid:8) [P ∪{P}]r−1
(cid:9)
(cid:9)
E, L ∪{ [P ∪{out(M).P}]r } → E, L ∪{ [P ∪{P | out(M)}]r }
E, L ∪{ [P ∪{event(M).P}]r } → E, L ∪{ [P ∪{P}]r }
(REPL)
(PAR)
(NEW)
(LET 1)
(LET 2)
(I/O LOCAL)
(GLOBAL)
(START)
(STOP)
(ASYNC)
(EVENT)
We can write these roles as processes:
V
PV = startTimer.out(a).in(x).stopTimer.P(cid:48)
PP = in(x).out( f (x,b)).P(cid:48)
V and P(cid:48)
P
such that processes P(cid:48)
P do not contain vari-
able x (hence, we need not consider substitutes for x in
these processes). Moreover, consider system conﬁgura-
tion C1 = E,{[PV ,PP]0} that co-locates those processes.
Hence, we can observe traces in which the timed chal-
lenge succeeds. Indeed, C1 reduces by rule (START) two
applications of rule (I/O LOCAL) rule, and rule (STOP):
(cid:9)
(cid:3)
C1 →E,(cid:8)(cid:2)out(a).in(x).stopTimer.P(cid:48)
→E,(cid:8)(cid:2)in(x).stopTimer.P(cid:48)
(cid:9)
(cid:3)
→E,(cid:8)(cid:2)stopTimer.P(cid:48)
V ,out( f (a,b)).P(cid:48)
(cid:9)
→E,(cid:8)(cid:2)P(cid:48)
V ,P(cid:48)
V ,PP
(cid:9)
(cid:3)
(cid:3)
P
P
1
1
1
V ,P(cid:48)
P
0
By comparison, the processes cannot complete the chal-
lenge from distinct locations. Indeed, although
E,{[PV ]0 , [PP]0} →∗
1 ,(cid:2)out( f (a,b)).P(cid:48)
V ,(cid:3)
E,(cid:8)(cid:2)in(x).stopTimer.P(cid:48)
P
the semantics do not allow any further reduction.
(cid:9) ,
(cid:3)
0
Rule (GLOBAL) allows an output to arrive at a new
location, if no timers are active at that location. In imple-
mented systems, it is only possible to receive outputs at
particular times, yet rule (GLOBAL) allows outputs to be
received at any time (in particular, after other processes
have reduced). In this sense, the rule might be considered
an over-approximation. However, for any communica-
tion allowed by our semantics, there exists a correspond-
ing system execution (that takes communication and pro-
cessing times into account). Thus, the rule accurately
captures system behaviour, in particular, all possible in-
teractions with an attacker are considered.
P,out( f (p,b))]0
Example 8 (Preemption). A remote process may com-
municate with a timed process by preempting the mes-
sages needed. For instance, consider conﬁguration C3 =
(cid:9) and reduction
E,(cid:8)[PV ]0 , [in(x).P(cid:48)
(cid:9)
(cid:3)
C3 → E,(cid:8)[PV ,out( f (p,b))]0 ,(cid:2)in(x).P(cid:48)
V ,out( f (p,b))(cid:3)
→ E,{(cid:2)out(a).in(x).stopTimer.P(cid:48)
(cid:3)
(cid:2)in(x).P(cid:48)
(cid:3)
→∗ E,{(cid:2)stopTimer.P(cid:48)
0}
(cid:3)
(cid:2)P(cid:48)
→ E,{(cid:2)P(cid:48)
0}
0}
(cid:2)P(cid:48)
(cid:3)
(cid:3)
1 ,
P
P
V
P
V