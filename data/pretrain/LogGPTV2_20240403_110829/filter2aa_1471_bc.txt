Now use the Extras menu and select Private Namespaces.
You’ll see a list, such as the one shown here:
For each object, you’ll see the name of the boundary descriptor
(for example, the Installing mutex is part of the LoadPerf
boundary), and the SID(s) and integrity level associated with it (in
this case, no explicit integrity is set, and the SID is the one for the
Administrators group). Note that for this feature to work, you must
have enabled kernel debugging on the machine the tool is running
on (either locally or remotely), as WinObjEx64 uses the WinDbg
local kernel debugging driver to read kernel memory.
EXPERIMENT: Tampering with single instancing
Applications such as Windows Media Player and those in
Microsoft Office are common examples of single-instancing
enforcement through named objects. Notice that when launching
the Wmplayer.exe executable, Windows Media Player appears only
once—every other launch simply results in the window coming
back into focus. You can tamper with the handle list by using
Process Explorer to turn the computer into a media mixer! Here’s
how:
1. 
Launch Windows Media Player and Process Explorer to
view the handle table (by clicking View, Lower Pane View,
and then Handles). You should see a handle whose name
contains
Microsoft_WMP_70_CheckForOtherInstanceMutex, as
shown in the figure.
2. 
Right-click the handle and select Close Handle. Confirm
the action when asked. Note that Process Explorer should
be started as Administrator to be able to close a handle in
another process.
3. 
Run Windows Media Player again. Notice that this time a
second process is created.
4. 
Go ahead and play a different song in each instance. You
can also use the Sound Mixer in the system tray (click the
Volume icon) to select which of the two processes will
have greater volume, effectively creating a mixing
environment.
Instead of closing a handle to a named object, an application
could have run on its own before Windows Media Player and
created an object with the same name. In this scenario, Windows
Media Player would never run because it would be fooled into
believing it was already running on the system.
Symbolic links
In certain file systems (on NTFS, Linux, and macOS systems, for example), a
symbolic link lets a user create a file name or a directory name that, when
used, is translated by the operating system into a different file or directory
name. Using a symbolic link is a simple method for allowing users to
indirectly share a file or the contents of a directory, creating a cross-link
between different directories in the ordinarily hierarchical directory structure.
The Object Manager implements an object called a symbolic link object,
which performs a similar function for object names in its object namespace.
A symbolic link can occur anywhere within an object name string. When a
caller refers to a symbolic link object’s name, the Object Manager traverses
its object namespace until it reaches the symbolic link object. It looks inside
the symbolic link and finds a string that it substitutes for the symbolic link
name. It then restarts its name lookup.
One place in which the executive uses symbolic link objects is in
translating MS-DOS-style device names into Windows internal device
names. In Windows, a user refers to hard disk drives using the names C:, D:,
and so on, and serial ports as COM1, COM2, and so on. The Windows
subsystem creates these symbolic link objects and places them in the Object
Manager namespace under the \Global?? directory, which can also be done
for additional drive letters through the DefineDosDevice API.
In some cases, the underlying target of the symbolic link is not static and
may depend on the caller’s context. For example, older versions of Windows
had an event in the \KernelObjects directory called LowMemoryCondition,
but due to the introduction of memory partitions (described in Chapter 5 of
Part 1), the condition that the event signals are now dependent on which
partition the caller is running in (and should have visibility of). As such,
there is now a LowMemoryCondition event for each memory partition, and
callers must be redirected to the correct event for their partition. This is
achieved with a special flag on the object, the lack of a target string, and the
existence of a symbolic link callback executed each time the link is parsed by
the Object Manager. With WinObjEx64, you can see the registered callback,
as shown in the screenshot in Figure 8-36 (you could also use the debugger
by doing a !object \KernelObjects\LowMemoryCondition command and
then dumping the _OBJECT_SYMBOLIC_LINK structure with the dx
command.)
Figure 8-36 The LowMemoryCondition symbolic link redirection
callback.
Session namespace
Services have full access to the global namespace, a namespace that serves as
the first instance of the namespace. Regular user applications then have read-
write (but not delete) access to the global namespace (minus some exceptions
we explain soon.) In turn, however, interactive user sessions are then given a
session-private view of the namespace known as a local namespace. This
namespace provides full read/write access to the base named objects by all
applications running within that session and is also used to isolate certain
Windows subsystem-specific objects, which are still privileged. The parts of
the namespace that are localized for each session include \DosDevices,
\Windows, \BaseNamedObjects, and \AppContainerNamedObjects.
Making separate copies of the same parts of the namespace is known as
instancing the namespace. Instancing \DosDevices makes it possible for each
user to have different network drive letters and Windows objects such as
serial ports. On Windows, the global \DosDevices directory is named
\Global?? and is the directory to which \DosDevices points, and local
\DosDevices directories are identified by the logon session ID.
The \Windows directory is where Win32k.sys inserts the interactive
window station created by Winlogon, \WinSta0. A Terminal Services
environment can support multiple interactive users, but each user needs an
individual version of WinSta0 to preserve the illusion that he is accessing the
predefined interactive window station in Windows. Finally, regular Win32
applications and the system create shared objects in \BaseNamedObjects,
including events, mutexes, and memory sections. If two users are running an
application that creates a named object, each user session must have a private
version of the object so that the two instances of the application don’t
interfere with one another by accessing the same object. If the Win32
application is running under an AppContainer, however, or is a UWP
application, then the sandboxing mechanisms prevent it from accessing
\BaseNamedObjects, and the \AppContainerNamedObjects object directory
is used instead, which then has further subdirectories whose names
correspond to the Package SID of the AppContainer (see Chapter 7 of Part 1,
for more information on AppContainer and the Windows sandboxing model).
The Object Manager implements a local namespace by creating the private
versions of the four directories mentioned under a directory associated with
the user’s session under \Sessions\n (where n is the session identifier). When
a Windows application in remote session two creates a named event, for
example, the Win32 subsystem (as part of the
BaseGetNamedObjectDirectory API in Kernelbase.dll) transparently
redirects the object’s name from \BaseNamedObjects to
\Sessions\2\BaseNamedObjects, or, in the case of an AppContainer, to
\Sessions\2\AppContainerNamedObjects\\.
One more way through which name objects can be accessed is through a
security feature called Base Named Object (BNO) Isolation. Parent processes
can launch a child with the ProcThreadAttributeBnoIsolation process
attribute (see Chapter 3 of Part 1 for more information on a process’s startup
attributes), supplying a custom object directory prefix. In turn, this makes
KernelBase.dll create the directory and initial set of objects (such as
symbolic links) to support it, and then have NtCreateUserProcess set the
prefix (and related initial handles) in the Token object of the child process
(specifically, in the BnoIsolationHandlesEntry field) through the data in the
native version of process attribute.
Later, BaseGetNamedObjectDirectory queries the Token object to check if
BNO Isolation is enabled, and if so, it appends this prefix to any named
object operation, such that \Sessions\2\BaseNamedObjects will, for example,
become \Sessions\2\BaseNamedObjects\IsolationExample. This can be used
to create a sort of sandbox for a process without having to use the
AppContainer functionality.
All object-manager functions related to namespace management are aware
of the instanced directories and participate in providing the illusion that all
sessions use the same namespace. Windows subsystem DLLs prefix names
passed by Windows applications that reference objects in the \DosDevices
directory with \?? (for example, C:\Windows becomes \??\C:\Windows).
When the Object Manager sees the special \?? prefix, the steps it takes
depend on the version of Windows, but it always relies on a field named
DeviceMap in the executive process object (EPROCESS, which is described
further in Chapter 3 of Part 1) that points to a data structure shared by other
processes in the same session.
The DosDevicesDirectory field of the DeviceMap structure points at the
Object Manager directory that represents the process’ local \DosDevices.
When the Object Manager sees a reference to \??, it locates the process’ local
\DosDevices by using the DosDevicesDirectory field of the DeviceMap. If
the Object Manager doesn’t find the object in that directory, it checks the
DeviceMap field of the directory object. If it’s valid, it looks for the object in
the directory pointed to by the GlobalDosDevicesDirectory field of the
DeviceMap structure, which is always \Global??.
Under certain circumstances, session-aware applications need to access
objects in the global session even if the application is running in another
session. The application might want to do this to synchronize with instances
of itself running in other remote sessions or with the console session (that is,
session 0). For these cases, the Object Manager provides the special override
\Global that an application can prefix to any object name to access the global
namespace. For example, an application in session two opening an object
named \Global\ApplicationInitialized is directed to
\BaseNamedObjects\ApplicationInitialized instead of
\Sessions\2\BaseNamedObjects\ApplicationInitialized.
An application that wants to access an object in the global \DosDevices
directory does not need to use the \Global prefix as long as the object doesn’t
exist in its local \DosDevices directory. This is because the Object Manager
automatically looks in the global directory for the object if it doesn’t find it in
the local directory. However, an application can force checking the global
directory by using \GLOBALROOT.
Session directories are isolated from each other, but as mentioned earlier,
regular user applications can create a global object with the \Global prefix.
However, an important security mitigation exists: Section and symbolic link
objects cannot be globally created unless the caller is running in Session 0 or
if the caller possesses a special privilege named create global object, unless
the object’s name is part of an authorized list of “unsecured names,” which is
stored in HKLM\SYSTEM\CurrentControlSet\Control\Session
Manager\kernel, under the ObUnsecureGlobalNames value. By default, these
names are usually listed:
■    netfxcustomperfcounters.1.0
■    SharedPerfIPCBlock
■    Cor_Private_IPCBlock
■    Cor_Public_IPCBlock_
EXPERIMENT: Viewing namespace instancing
You can see the separation between the session 0 namespace and
other session namespaces as soon as you log in. The reason you can
is that the first console user is logged in to session 1 (while services
run in session 0). Run Winobj.exe as Administrator and click the
\Sessions directory. You’ll see a subdirectory with a numeric name
for each active session. If you open one of these directories, you’ll
see subdirectories named DosDevices, Windows,
AppContainerNamedObjects, and BaseNamedObjects, which are
the local namespace subdirectories of the session. The following
figure shows a local namespace:
Next, run Process Explorer and select a process in your session
(such as Explorer.exe), and then view the handle table (by clicking
View, Lower Pane View, and then Handles). You should see a
handle to \Windows\WindowStations\WinSta0 underneath
\Sessions\n, where n is the session ID.
Object filtering
Windows includes a filtering model in the Object Manager, akin to the file
system minifilter model and the registry callbacks mentioned in Chapter 10.
One of the primary benefits of this filtering model is the ability to use the
altitude concept that these existing filtering technologies use, which means
that multiple drivers can filter Object Manager events at appropriate locations
in the filtering stack. Additionally, drivers are permitted to intercept calls
such as NtOpenThread and NtOpenProcess and even to modify the access
masks being requested from the process manager. This allows protection
against certain operations on an open handle—such as preventing a piece of
malware from terminating a benevolent security process or stopping a
password dumping application from obtaining read memory permissions on
the LSA process. Note, however, that an open operation cannot be entirely
blocked due to compatibility issues, such as making Task Manager unable to
query the command line or image name of a process.
Furthermore, drivers can take advantage of both pre and post callbacks,
allowing them to prepare for a certain operation before it occurs, as well as to
react or finalize information after the operation has occurred. These callbacks
can be specified for each operation (currently, only open, create, and
duplicate are supported) and be specific for each object type (currently, only
process, thread, and desktop objects are supported). For each callback,
drivers can specify their own internal context value, which can be returned
across all calls to the driver or across a pre/post pair. These callbacks can be
registered with the ObRegisterCallbacks API and unregistered with the
ObUnregisterCallbacks API—it is the responsibility of the driver to ensure
deregistration happens.
Use of the APIs is restricted to images that have certain characteristics:
■    The image must be signed, even on 32-bit computers, according to the
same rules set forth in the Kernel Mode Code Signing (KMCS)
policy. The image must be compiled with the /integritycheck linker
flag, which sets the
IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY value in the
PE header. This instructs the memory manager to check the signature
of the image regardless of any other defaults that might not normally
result in a check.
■    The image must be signed with a catalog containing cryptographic
per-page hashes of the executable code. This allows the system to
detect changes to the image after it has been loaded in memory.
Before executing a callback, the Object Manager calls the
MmVerifyCallbackFunction on the target function pointer, which in turn
locates the loader data table entry associated with the module owning this
address and verifies whether the LDRP_IMAGE_INTEGRITY_FORCED flag
is set.
Synchronization
The concept of mutual exclusion is a crucial one in operating systems
development. It refers to the guarantee that one, and only one, thread can
access a particular resource at a time. Mutual exclusion is necessary when a
resource doesn’t lend itself to shared access or when sharing would result in
an unpredictable outcome. For example, if two threads copy a file to a printer
port at the same time, their output could be interspersed. Similarly, if one
thread reads a memory location while another one writes to it, the first thread
will receive unpredictable data. In general, writable resources can’t be shared
without restrictions, whereas resources that aren’t subject to modification can
be shared. Figure 8-37 illustrates what happens when two threads running on
different processors both write data to a circular queue.
Figure 8-37 Incorrect sharing of memory.
Because the second thread obtained the value of the queue tail pointer
before the first thread finished updating it, the second thread inserted its data
into the same location that the first thread used, overwriting data and leaving
one queue location empty. Even though Figure 8-37 illustrates what could
happen on a multiprocessor system, the same error could occur on a single-
processor system if the operating system performed a context switch to the
second thread before the first thread updated the queue tail pointer.
Sections of code that access a nonshareable resource are called critical
sections. To ensure correct code, only one thread at a time can execute in a
critical section. While one thread is writing to a file, updating a database, or
modifying a shared variable, no other thread can be allowed to access the
same resource. The pseudocode shown in Figure 8-37 is a critical section that
incorrectly accesses a shared data structure without mutual exclusion.
The issue of mutual exclusion, although important for all operating
systems, is especially important (and intricate) for a tightly coupled,
symmetric multiprocessing (SMP) operating system such as Windows, in
which the same system code runs simultaneously on more than one
processor, sharing certain data structures stored in global memory. In
Windows, it is the kernel’s job to provide mechanisms that system code can
use to prevent two threads from modifying the same data at the same time.
The kernel provides mutual-exclusion primitives that it and the rest of the
executive use to synchronize their access to global data structures.
Because the scheduler synchronizes access to its data structures at
DPC/dispatch level IRQL, the kernel and executive cannot rely on
synchronization mechanisms that would result in a page fault or reschedule
operation to synchronize access to data structures when the IRQL is
DPC/dispatch level or higher (levels known as an elevated or high IRQL). In
the following sections, you’ll find out how the kernel and executive use
mutual exclusion to protect their global data structures when the IRQL is
high and what mutual-exclusion and synchronization mechanisms the kernel
and executive use when the IRQL is low (below DPC/dispatch level).
High-IRQL synchronization
At various stages during its execution, the kernel must guarantee that one,
and only one, processor at a time is executing within a critical section. Kernel
critical sections are the code segments that modify a global data structure
such as the kernel’s dispatcher database or its DPC queue. The operating
system can’t function correctly unless the kernel can guarantee that threads
access these data structures in a mutually exclusive manner.
The biggest area of concern is interrupts. For example, the kernel might be
updating a global data structure when an interrupt occurs whose interrupt-
handling routine also modifies the structure. Simple single-processor
operating systems sometimes prevent such a scenario by disabling all
interrupts each time they access global data, but the Windows kernel has a
more sophisticated solution. Before using a global resource, the kernel
temporarily masks the interrupts whose interrupt handlers also use the
resource. It does so by raising the processor’s IRQL to the highest level used
by any potential interrupt source that accesses the global data. For example,
an interrupt at DPC/dispatch level causes the dispatcher, which uses the
dispatcher database, to run. Therefore, any other part of the kernel that uses
the dispatcher database raises the IRQL to DPC/dispatch level, masking
DPC/dispatch-level interrupts before using the dispatcher database.
This strategy is fine for a single-processor system, but it’s inadequate for a
multiprocessor configuration. Raising the IRQL on one processor doesn’t
prevent an interrupt from occurring on another processor. The kernel also
needs to guarantee mutually exclusive access across several processors.
Interlocked operations
The simplest form of synchronization mechanisms relies on hardware support
for multiprocessor-safe manipulation of integer values and for performing
comparisons. They include functions such as InterlockedIncrement,
InterlockedDecrement, InterlockedExchange, and
InterlockedCompareExchange. The InterlockedDecrement function, for
example, uses the x86 and x64 lock instruction prefix (for example, lock
xadd) to lock the multiprocessor bus during the addition operation so that
another processor that’s also modifying the memory location being
decremented won’t be able to modify it between the decrementing
processor’s read of the original value and its write of the decremented value.
This form of basic synchronization is used by the kernel and drivers. In
today’s Microsoft compiler suite, these functions are called intrinsic because
the code for them is generated in an inline assembler, directly during the
compilation phase, instead of going through a function call (it’s likely that
pushing the parameters onto the stack, calling the function, copying the
parameters into registers, and then popping the parameters off the stack and
returning to the caller would be a more expensive operation than the actual
work the function is supposed to do in the first place.)
Spinlocks
The mechanism the kernel uses to achieve multiprocessor mutual exclusion is
called a spinlock. A spinlock is a locking primitive associated with a global
data structure, such as the DPC queue shown in Figure 8-38.
Figure 8-38 Using a spinlock.
Before entering either critical section shown in Figure 8-38, the kernel
must acquire the spinlock associated with the protected DPC queue. If the
spinlock isn’t free, the kernel keeps trying to acquire the lock until it
succeeds. The spinlock gets its name from the fact that the kernel (and thus,
the processor) waits, “spinning,” until it gets the lock.
Spinlocks, like the data structures they protect, reside in nonpaged memory
mapped into the system address space. The code to acquire and release a
spinlock is written in assembly language for speed and to exploit whatever
locking mechanism the underlying processor architecture provides. On many
architectures, spinlocks are implemented with a hardware-supported test-and-
set operation, which tests the value of a lock variable and acquires the lock in
one atomic instruction. Testing and acquiring the lock in one instruction
prevents a second thread from grabbing the lock between the time the first
thread tests the variable and the time it acquires the lock. Additionally, a
hardware instruction such the lock instruction mentioned earlier can also be
used on the test-and-set operation, resulting in the combined lock bts opcode
on x86 and x64 processors, which also locks the multiprocessor bus;
otherwise, it would be possible for more than one processor to perform the
operation atomically. (Without the lock, the operation is guaranteed to be
atomic only on the current processor.) Similarly, on ARM processors,
instructions such as ldrex and strex can be used in a similar fashion.
All kernel-mode spinlocks in Windows have an associated IRQL that is
always DPC/dispatch level or higher. Thus, when a thread is trying to acquire