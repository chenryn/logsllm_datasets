ﬁxed-length plaintext hj , if we set the output lengths of the
PRF and the hash function to be equal, we can simply use
Aj as a pseudorandom masking factor for hj , i.e., Ej =
(cid:2)n
i=1 PRFKi (Tj(cid:4)Mj)] ⊕ hj. From this construction, it is
[
clear that if even one PRF value is unknown, the adversary
ﬁnds it infeasible to recover any bits of hj from Ej. The
protocol is described in pseudocode in Algorithm 3; the
proof of the security of this optimization is a straightforward
reduction of attacking the protocol to attacking either the
pre-image resistance of H or the distinguishability of the
PRF from a random function [26].
Like the basic CSA scheme, the algorithm requires a
freshness check on Mj . This prevents the adversary from
using possible old revealed values on the hash chain to
authenticate bogus messages.
The resultant protocol terminates in 2 passes and thus
results in a round complexity of 2n−1 for a linear topology.
Algorithm 3 Hash Chain Protocol with 2 passes
Require: Hash chain h0, . . . , hm
(cid:2)n
Mj = jth Message
s computes: Tj = MAChj(Mj)
s computes: Ej =
Aj ← 0
s sends (Mj, Tj, Ej, Aj) to d1:
for i = 1 to n do
i=1 PRFKi(Tj(cid:4)Mj) ⊕ hj
Check that Mj is from stage j;
If di has already attempted the algorithm for stage j or
later, abort.
di computes: Aj ← Aj ⊕ PRFKi (Tj(cid:4)Mj)
di forwards (Mj, Tj, Ej, Aj) to di+1
end for
dn computes: hj ← Aj ⊕ Ej
for i = n downto 1 do
di checks Tj = MAChj(Mj); if success, accept Mj .
di forwards hj to di−1
end for
Each of Tj, Ej, Aj and hj are passed through each node
in the network, resulting in a total of 4 cryptographic
values are sent through each receiver in the network. The
total communication cost is thus 4n cryptographic values.
The maximum per-round data transfer increases from 1
cryptographic value to 3.
now a 2-pass protocol,
3) Partitioning the receiver set: Since this protocol is
the speedup trade-offs of Sec-
tion V-A2 apply directly. In general, n + n/(2k − 1)
round complexity is achievable with k subsets implying
a congestion overhead of 2(k + 1) cryptographic values.
Total communication cost remains n times the congestion,
i.e., 2n(k + 1). The maximum per-round data transfer
increases to 2k + 1 cryptographic values. Optimal n round
complexity is achievable with k = (cid:2)log n(cid:3) + 1 receiver sets,
at the cost of 2((cid:2)log n(cid:3) + 2) communication congestion.
Total communication cost is n times the congestion, i.e.,
2n((cid:2)log n(cid:3) + 2). The maximum per-round data transfer
increases to 2(cid:2)log n(cid:3) + 3 cryptographic values; however, as
discussed in Section V-A2, this is unlikely to be a limiting
factor.
VI. FULLY CONNECTED TOPOLOGY
We now examine bounds and optimizations for the fully
connected topology. In the fully connected topology, G is
the complete graph Kn+1 of n + 1 vertices (including the
sender s and n receivers).
Fully-connected topologies are important in both theory
and practice. In terms of theoretical importance, round com-
plexity lower bounds proven on fully connected topologies
apply to all topologies. Since any graph G of n+1 nodes is a
subgraph of Kn+1, any algorithm for G is also an algorithm
for Kn+1; hence if we can show that no algorithm can be
265
Figure 6. Maximum Dissemination Tree
faster than f (n) on the complete graph Kn+1, the bound also
applies directly to arbitrary topologies. In terms of practical
importance, fully-connected topologies occur whenever a
network of nodes can achieve any-to-any addressability; this
commonly occurs on Internet-based distributed systems such
as peer-to-peer networks and grid computing.
A. Doubling Broadcast / Maximum Dissemination Trees
Most of the algorithms in this and subsequent sections rely
on well-known techniques and bounds for fast information
dissemination in arbitrary networks. Hence, as a preliminary,
we ﬁrst consider the problem of disseminating a message M
from one node to as many other nodes as possible within t
rounds. A straightforward approach is doubling broadcast:
in each round, every node which has knowledge of M
communicates it to a different node that has not yet received
M . An inductive reasoning on t shows that this schedule
reaches the maximum number of nodes for each t; since each
node can only communicate with one other node in each
round, the number of nodes that have received M can at most
double at each round. Thus, after t rounds, up to 2t
nodes
have received M . Figure 6 shows this process; the numbers
in the circled nodes indicate in which round the node ﬁrst
receives the message. We deﬁne the communication pattern
caused by this optimal dissemination schedule the maximum
dissemination tree. A consequence of this schedule being
optimally fast is that any dissemination of a message from
one node to n nodes must take at least (cid:2)log2(n)(cid:3) rounds on
any topology.
B. Hash Tree Based Schemes
As mentioned in Section IV-A, the hash tree based broad-
cast authentication scheme takes three message passes to
and from the sender to the rest of the network. Since the
network is fully connected, it is easy to derive a maximum
dissemination spanning tree rooted at the sender that reaches
all nodes. The tree will have depth (cid:2)log(n + 1)(cid:3); three
passes on this tree will take 3(cid:2)log(n + 1)(cid:3) rounds; this is
the fastest possible round complexity for the unoptimized
protocol. Authentication paths on this hash tree will have
O(log n) length; congestion and max per round data transfer
are also O(log n).
As an improvement, we present a schedule which takes
at most 2 log n + 1 rounds, with a maximum per-round
266
Figure 7. Path Reconstruction Phase
data transfer of 2 cryptographic values. We ﬁrst describe
an algorithm for the case where n is a power of 2, i.e., the
hash tree is a perfect binary hash tree.
The protocol proceeds in two phases. In the ﬁrst phase,
the sender computes the hash tree root r for the message M
using the construction of Section IV-A. Then the message
tuple (M, r) is disseminated using the repeated maximum
dissemination broadcast method of Section VI-A. This takes
log n + 1 rounds: one round for the sender to send the
initial message, then log n rounds for all receivers to receive
it. In the second phase, nodes collaborate to reconstruct
authentication paths. This phase of messages is illustrated
in Figure 7. There is one round of message exchanges for
each level of the hash tree, starting from the leaves. At each
level j, every node exchanges the hash tree vertex at level j
on its authentication path with that of its counterpart in the
neighboring subtree at level j. This allows it to compute
the next higher hash tree vertex (at level h − 1) on its
authentication path and thus repeat the process in the next
round. Within log n rounds all nodes will have computed
their authentication paths to the root. This process is shown
in Algorithm 4. The communication pattern is similar to all-
to-all broadcast on a hypercube.
It remains to address the case where n is not a power of
2. In this case, we can partition the receiver set into up to
log n subsets where each subset is a distinct power of 2. The
subsets correspond to the binary representation of n, e.g., for
n = 13, we have subsets of size 8, 4 and 1. The protocol
then runs, in parallel, one completely separate instance of the
protocol for each subset. Since the sender can only start one
instance of the protocol in each round, it starts the protocol
for the largest subset ﬁrst, then it starts the protocol for the
second largest subset in the next round, and so on. Even
with this head start, the largest subset has the largest hash
tree and will be the last subset to complete veriﬁcation; it
has 2(cid:4)log n(cid:5)
nodes and thus takes 1 + 2(cid:7)log n(cid:8) ≤ 2 log n + 1
Algorithm 4 Hash Tree Scheme
s sends (M, r) to all receivers using doubling broadcast
(Sec. VI-A).
Check freshness of M (e.g., inspect seq. num), if not
fresh, abort.
Otherwise, di sets vi[0] ← PRFKi(M )
for h = 0 to (log n) − 1 do
j ← ((i − 1) ⊕ 2h) + 1
di sends to dj : vi[h]
di receives from dj : vj[h]
if i  j do vi[h + 1] ← H(vj[h](cid:4)vi[h])
for i = 1 to n do
end for
end for
Each di checks authentication path in vi.
rounds to complete veriﬁcation.
The greatest amount of per-round data transfer occurs
when the nodes are exchanging hash-tree vertices: since one
hash value is transmitted and received respectively, a total of
2 cryptographic values are exchanged. The communication
congestion overhead for this scheme is at most 2(cid:2)log n(cid:3)
values: (cid:2)log n(cid:3) for the dissemination of r, and (cid:2)log n(cid:3)
sending up to (cid:2)log n(cid:3) cryptographic values, leading to a total
communication overhead of (2n + 1)((cid:2)log n(cid:3)).
for the authentication path. The sender is responsible for
Hash Chain Algorithms: We note that a 2-pass hash-
chain based scheme (see Section V-B2) can follow the
same schedule, resulting in similar round complexity and
communication overheads. Instead of exchanging hash tree
vertices, receivers will exchange their XOR-aggregated ac-
knowledgments; by the end of the protocol each receiver
has collected the aggregated acknowledgments of all the
receivers in the network and can thus decrypt the hash chain
value and authenticate the broadcast message.
C. Lower Bounds on Round Complexity vs Congestion
Several of our schemes for the linear topology are round
complexity-optimal: they take n rounds, which is the lower
bound on the number of rounds needed for message dis-
semination. It is less clear what lower bounds exist for
the fully connected topology. The requirements for message
dissemination (log n rounds for doubling broadcast) provide
a loose bound, which can be achieved by attaching a dig-
ital signature to every message. However digital signatures
represent a fundamentally harder problem than authenti-
cation, being both more computationally expensive and
providing additional unnecessarily strong properties such as
non-repudiation. Therefore, we investigate what bounds can
be derived for protocols which do not involve the digital
signature problem.
We prove that, any network broadcast authentication pro-
tocol that with a ﬁxed communication pattern that completes
in at most (2 − ρ) log n + k rounds (where k is a constant)
must imply a digital signature or have communication over-
head at least proportional to nρ
. By implication, any protocol
that completes in asymptotically less than 2 log n rounds
cannot have communication complexity polylogarithmic in
n unless it also provides signature properties (i.e., it solves
a fundamentally harder problem).
We build on the result of Boneh, Durfee and Franklin [18]
which showed that any multicast MAC (or MMAC) for
n receivers must either imply a digital signature or have
to n. An MMAC is deﬁned by
overhead proportional
three algorithms KEY-GEN, MAC-GEN, MAC-VER. Algo-
rithm KEY-GEN takes a security parameter s and a number
of receivers n and generates the sender key sk and receiver
keys rk1, . . . , rkn for each receiver d1, . . . , dn. Algorithm
MAC-GEN takes a payload message M and a sender key
sk returns a ﬁxed-length tag T = MAC-GEN(M, sk). Al-
gorithm MAC-VER takes a payload message M , a tag T ,
and a receiver key K and returns a bit indicating whether
the tag T veriﬁed correctly for payload message M , un-
der the constraint that correctly generated tags from the
sender always verify successfully for all receivers,
i.e.,
MAC-VER(M, MAC-GEN(M, sk), rki) = ‘accept’ for all
i = 1, . . . , n.
MMACs are static codes;
in this sense they can be
considered a special case of the set of broadcast authen-
tication protocols under the restriction that the sender only
produces a single, ﬁxed-length tag T for all receivers. Each
receiver must then perform veriﬁcation by inspection of
T without interacting with the sender or other receivers.
General broadcast authentication protocols, on the other
hand, allow the sender to send different protocol messages to
different receivers, which can perform rounds of interaction
with each other or the sender to determine if the payload is
legitimate. Boneh, Durfee and Franklin’s result holds only
for MMACs and do not apply to broadcast authentication
protocols in general. We extend their result to show that if a
broadcast authentication protocol is fast, then it implies an
MMAC. The basic idea is that if the protocol is fast, then
there must exist a (large) set of receivers that did not interact
with each other in the protocol; in the absence of interaction
between receivers, a broadcast authentication protocol can be
reduced to an MMAC.
The details of the proof are as follows. To begin with,
assume that all receivers are deterministic, i.e., they do not
perform any purely random coin tosses during the protocol,
although they may simulate this with pseudorandom val-
ues generated from a preloaded seed. We assume that the
communication pattern is static for each execution of the
protocol, i.e., the set of nodes that communicate with each
other in each round is ﬁxed regardless of the message or tag
originated by the sender. These assumptions are consistent
267
with all known broadcast authentication protocols in the
literature. We do not count setup overhead (such as key
establishment, etc) in the rounds of the protocol; thus we can
assume that no receiver starts the protocol until it receives
a message that contains information from the sender.
The proof involves a reduction from a fast broadcast
authentication protocol to an MMAC; we deﬁne the security
games for each class of problems as follows. For the MMAC
security game: (1) The adversary adaptively selects a proper
subset SA of S for compromise, and the challenger provides
A with all secret information known by these receivers as
they are selected; the adversary can expand her choice of
SA based on this information. (2) The adversary can query
the challenger to provide valid MMACs for some adaptively
chosen M1, . . . , Mq. (3) The adversary constructs a forged
(cid:10)= Mi for all i, . . . , q and a tag T (cid:2)
data-message M (cid:2)
.
The adversary wins the game if some receiver in S − SA
accepts message M (cid:2)
. We say the MMAC is -secure if the
probability of any adversary winning is at most .
The security game for existential forgery on the broad-
cast authentication protocol is similarly structured: (1) The
adversary adaptively selects a subset of receivers C for
compromise, and the challenger provides all secret infor-
mation known by these receivers. (2) The adversary can