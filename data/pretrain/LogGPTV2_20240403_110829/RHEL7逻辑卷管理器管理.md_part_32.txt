    # operation is complete.
    polling_interval = 15
}
####################
# Advanced section #
####################
# Metadata settings
#
# metadata {
    # Default number of copies of metadata to hold on each PV.  0, 1 or 2.
    # You might want to override it from the command line with 0 
    # when running pvcreate on new PVs which are to be added to large VGs.
    # pvmetadatacopies = 1
    # Default number of copies of metadata to maintain for each VG.
    # If set to a non-zero value, LVM automatically chooses which of
    # the available metadata areas to use to achieve the requested
    # number of copies of the VG metadata.  If you set a value larger
    # than the the total number of metadata areas available then
    # metadata is stored in them all.
    # The default value of 0 ("unmanaged") disables this automatic
    # management and allows you to control which metadata areas
    # are used at the individual PV level using 'pvchange
    # --metadataignore y/n'.
    # vgmetadatacopies = 0
    # Approximate default size of on-disk metadata areas in sectors.
    # You should increase this if you have large volume groups or
    # you want to retain a large on-disk history of your metadata changes.
    # pvmetadatasize = 255
    # List of directories holding live copies of text format metadata.
    # These directories must not be on logical volumes!
    # It's possible to use LVM2 with a couple of directories here,
    # preferably on different (non-LV) filesystems, and with no other 
    # on-disk metadata (pvmetadatacopies = 0). Or this can be in
    # addition to on-disk metadata areas.
    # The feature was originally added to simplify testing and is not
    # supported under low memory situations - the machine could lock up.
    #
    # Never edit any files in these directories by hand unless you
    # you are absolutely sure you know what you are doing! Use
    # the supplied toolset to make changes (e.g. vgcfgrestore).
    # dirs = [ "/etc/lvm/metadata", "/mnt/disk2/lvm/metadata2" ]
#}
# Event daemon
#
dmeventd {
    # mirror_library is the library used when monitoring a mirror device.
    #
    # "libdevmapper-event-lvm2mirror.so" attempts to recover from
    # failures.  It removes failed devices from a volume group and
    # reconfigures a mirror as necessary. If no mirror library is
    # provided, mirrors are not monitored through dmeventd.
    mirror_library = "libdevmapper-event-lvm2mirror.so"
    # snapshot_library is the library used when monitoring a snapshot device.
    #
    # "libdevmapper-event-lvm2snapshot.so" monitors the filling of
    # snapshots and emits a warning through syslog when the use of
    # the snapshot exceeds 80%. The warning is repeated when 85%, 90% and
    # 95% of the snapshot is filled.
    snapshot_library = "libdevmapper-event-lvm2snapshot.so"
    # thin_library is the library used when monitoring a thin device.
    #
    # "libdevmapper-event-lvm2thin.so" monitors the filling of
    # pool and emits a warning through syslog when the use of
    # the pool exceeds 80%. The warning is repeated when 85%, 90% and
    # 95% of the pool is filled.
    thin_library = "libdevmapper-event-lvm2thin.so"
    # Full path of the dmeventd binary.
    #
    # executable = "/usr/sbin/dmeventd"
}
```
:::
:::
[]{#lvm_tags.html}
::: appendix
::: titlepage
# [⁠]{#lvm_tags.html#lvm_tags}附录 C. LVM 对象标签 {.title}
:::
::: para
LVM 标签是可将有相同类型的 LVM2
对象分为同一组的用词。标签可以附加到对象中，比如物理卷、卷组、逻辑卷、片段。也可将标签附加到集群配置的主机中。无法为快照添加标签。
:::
::: para
可在命令行的 PV、VG 或者 LV 参数中使用标签。标签应该有 @
作为前缀以避免混淆。每个标签都可用所有对象都拥有的标签取代来扩大范围，标签的类型根据它在命令行的位置确定。
:::
::: para
LVM 标签是最长可为 1024 个字符的字符串。LVM 标签可使用小横线开始。
:::
::: para
有效标签仅由有限字符范围组成。允许的字符包括 \[A-Za-z0-9\_+.-\]。从 Red
Hat Enterprise Linux 6.1 发行本开始，允许的字符列表扩大为可包含
\"/\"、\"=\"、\"!\"、\":\"、\"#\" 和\"&\" 字符。
:::
::: para
只能为卷组中的对象添加标签。如果从卷组中删除物理卷，它们就会丢失其标签。这是因为标签是作为卷组元数据的一部分保存的，并在删除物理卷时被删除。无法为快照添加标签。
:::
::: para
以下命令列出所有带 `database`{.literal} 标签的逻辑卷。
:::
``` screen
lvs @database
```
::: para
以下命令列出目前活跃的主机标签。
:::
``` screen
lvm tags
```
::: section
::: titlepage
# [⁠]{#lvm_tags.html#object_tags}C.1. 添加和删除对象标签 {.title}
:::
::: para
请使用 `pvchange`{.command} 命令的 `--addtag`{.option} 或者
`--deltag`{.option} 选项在物理卷中添加或者删除标签。
:::
::: para
请使用 `vgchange`{.command} 或 `vgcreate`{.command} 命令的
`--addtag`{.option} 或者 `--deltag`{.option}
选项在卷组中添加或者删除标签，。
:::
::: para
请请使用 `lvchange`{.command} 或 `lvcreate`{.command} 命令的
`--addtag`{.option} 或者 `--deltag`{.option}
选项在逻辑卷中添加或者删除标签，。
:::
::: para
可以在 `pvchange`{.command}、`vgchange`{.command} 或者
`lvchange`{.command} 命令中指定多个 `--addtag`{.option} 和
`--deltag`{.option} 参数。例如：下面的命令可从卷组 `grant`{.literal}
中删除标签 `T9`{.literal} 和 `T10`{.literal}，同时添加标签
`T13`{.literal} 和 `T14`{.literal}。
:::
``` screen
vgchange --deltag T9 --deltag T10 --addtag T13 --addtag T14 grant
```
:::
::: section
::: titlepage
# [⁠]{#lvm_tags.html#host_tags}C.2. 主机标签 {.title}
:::
::: para
在集群配置中，可以在配置文件中定义主机标签。如果在 `tags`{.literal}
部分设定
`hosttags = 1`{.literal}，就会自动使用机器的主机名定义主机标签。这样可允许在所有机器中使用通用配置文件，以便其有该文件的相同的副本，但会根据主机名有不同的动作。
:::
::: para
有关配置文件的详情请参考 [附录 B, *LVM
配置文件*](#config_file.html){.xref}。
:::
::: para
对于每个主机标签，会读取存在额外的配置文件
lvm\_*hosttag.*conf。如果那个文件定义了新的标签，那么会在要读取的文件列表中添加进一步的配置文件。
:::
::: para
例如：下面配置文件中的条目总是定义 `tag1`{.literal}，如果主机名为
`host1`{.literal} 则定义 `tag2`{.literal}。
:::
``` screen
tags { tag1 { }  tag2 { host_list = ["host1"] } }
```
:::
::: section
::: titlepage
# [⁠]{#lvm_tags.html#tag_activation}C.3. 使用标签控制激活 {.title}
:::
::: para
可以在配置文件中指定在那个主机中只应该激活某个逻辑卷。例如：下面的条目作为激活请求的过滤器使用（比如
`vgchange -ay`{.command}），且只激活 `vg1/lvol0`{.filename}
以及那些在该主机的元数据中带 `database`{.literal} 标签的逻辑卷和卷组。
:::
``` screen
activation { volume_list = ["vg1/lvol0", "@database" ] }
```
::: para
有一个特殊的映射"@\*"，只有该机器中任意元数据标签与任意主机标签匹配时方可匹配。
:::
::: para
另一个例子就是，想象在该集群的每台机器，其配置文件中均有以下条目：
:::
``` screen
tags { hosttags = 1 }
```
::: para
如果只在主机 `db2`{.filename} 中激活
`vg1/lvol2`{.filename}，请执行以下操作：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    可在集群中的任意主机中运行
    `lvchange --addtag @db2 vg1/lvol2`{.command}。
    :::
2.  ::: para
    运行 `lvchange -ay vg1/lvol2`{.command}。
    :::
:::
::: para
这个解决方案包括将主机名保存在卷组元数据中。
:::
:::
:::
[]{#lvm_metadata.html}
::: appendix
::: titlepage
# [⁠]{#lvm_metadata.html#lvm_metadata}附录 D. LVM 卷组元数据 {.title}
:::
::: para
卷组的配置详情被称为元数据。默认情况下，卷组的每个物理卷元数据区域中均保存完全相同的元数据副本。
:::
::: para
如果卷组包含很多物理卷，那么有很多元数据的冗余副本不是很有效。可以使用
`pvcreate`{.command} 命令的 `--metadatacopies 0`{.option}
选项创建没有任何元数据副本的物理卷。选择物理卷中包含的元数据副本数目后就无法再进行修改。选择零副本将在修改配置时提高更新速度。注意：虽然任何时候每个卷组必须至少包含一个带元数据区域的物理卷（除非您使用高级配置设置允许您在文件系统中保存卷组元数据）。如果将来要分割卷组，那么每个卷组至少需要一个元数据副本。
:::
::: para
核心元数据以 ASCII
格式保存。元数据区域是一个环形缓冲。新的元数据会附加在旧的元数据之后，然后会更新其起始指针。
:::
::: para
可使用 `pvcreate`{.command} 命令的 `--metadatasize`{.option}
选项指定元数据区域的大小。对于包含数百个物理卷和逻辑卷的卷组来说，默认大小可能太小。
:::
::: section
::: titlepage
# [⁠]{#lvm_metadata.html#PV_label}D.1. 物理卷标签 {.title}
:::
::: para
默认情况下，`pvcreate`{.command} 命令会在第二个 512
字节扇区放置物理卷标签。这个标签可选择性地放在前四个扇区中的任意一个，因为扫描物理卷标签的
LVM 工具会检查前四个扇区。物理卷标签以字符串 `LABELONE`{.literal} 开始。
:::
::: para
物理卷标签包含：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    物理卷 UUID
    :::
-   ::: para
    以字节为单位的块设备大小
    :::
-   ::: para
    以 NULL 结尾的数据区域位置列表
    :::
-   ::: para
    以 NULL 结尾的元数据区域位置列表
    :::
:::
::: para
元数据位置以偏移和大小（单位：字节）形式保存。标签中有大约 15
个位置的空间，但 LVM 工具目前仅使用 3
个位置：即单数据区域以及最多两个元数据区域。
:::
:::
::: section
::: titlepage
# [⁠]{#lvm_metadata.html#metadata_contents}D.2. 元数据内容 {.title}
:::
::: para
卷组元数据包含：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    何时以及如何创建该卷组的信息
    :::
-   ::: para
    卷组信息：
    :::
:::
::: para
卷组信息包括：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    名称和唯一 id
    :::
-   ::: para