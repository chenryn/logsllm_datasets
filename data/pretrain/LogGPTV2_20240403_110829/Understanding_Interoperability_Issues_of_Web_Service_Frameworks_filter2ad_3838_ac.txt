















































































	






























	




















































































	


	


	


	



	



	



	




	


	


	
	


	


	


	
	
	





























Figure 3.   An overview of the prepared experimental environment. 
326326326
TABLE I.  
SERVER PLATFORMS 
C# 
Java 
Java 
Language 
Framework 
Metro 2.3 [10]  
JBossWS CXF 4.2.3 [11] 
Server 
GlassFish 4.0 [13] 
JBoss AS 7.2 [14] 
Microsoft IIS 8.0.8418.0 
(Express) [15] 
The  operation  simply  returns  the  provided  input  without 
further processing. 
WCF .NET  4.0.30319.17929 [12] 
the  different  native  classes  of 
We used a code generation script [22] to automatically 
create  thousands  of  services  that  follow  the  structure 
described in the previous paragraph, each of them having as 
input/output  all 
the 
programming language supported by the framework. In our 
case,  we  generated  3971  Java  services  for  GlassFish  and 
3971 Java services for JBoss AS and 14082 C# services for 
the  .NET  framework.  To  gather  a  list  of  all  classes  in  the 
two  languages  we  used  scripts  [22]  based  on  wget  [25]  to 
crawl the online documentation for the two languages [26], 
[27].  Obviously,  not  all  classes  can  be  used  as  input  or 
output of a service. The first step of the next approach phase 
is used as a filter to exclude the services that cannot be used. 
B.  Testing Phase 
After  the Preparation Phase, the Testing Phase follows. 
The  key  steps  are:  a)  generation  of service  description 
documents;  b)  generation  of  client-side  artifacts;  c) 
compilation  of  client-side  artifacts;  and  d) classification  of 
the  results.  The  execution  of  the  first  three  steps  in  this 
phase is interleaved with the execution of classification step. 
The Testing phase is described in the next paragraphs. 
tool  (which 
a)  Service Description Generation 
The first step is to generate a WSDL document for each 
service  written.  For  this  purpose,  we  can  use  a  WSDL 
generation 
the  WS 
frameworks),  or  use  the  automatic  WSDL  generation 
approach, which is executed by the application server when 
we  the  service  is  deployed.  We  used  this  latter  approach, 
since it is a typical technique for generating the WSDL (and 
in theory should have the same effect as running the WSDL 
generation tool manually).  
typically  part  of 
is 
Since,  in  the  service  creation  step,  we  tried  to  use  all 
TABLE II.  
CLIENT-SIDE FRAMEWORKS 
Framework 
Tool 
Language  Compilation 
Yes 
Yes1) 
Yes2) 
Yes 
Yes
Java 
Java 
Java 
Java 
Java
C#/ 
wsimport 
wsdl2java 
wsdl2java 
wsdl2java 
wsconsume
Oracle Metro 2.3 [10]    
Apache Axis1 1.4 [16] 
Apache Axis2 1.6.2 [17] 
Apache CXF 2.7.6 [18] 