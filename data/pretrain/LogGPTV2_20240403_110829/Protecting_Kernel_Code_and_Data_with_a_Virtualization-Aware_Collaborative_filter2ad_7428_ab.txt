not export functions that provide services for manipulating
them. We are not arguing that it is not possible to conceive an
attack using exported kernel functions. However, it would be
much more difﬁcult and would require much more ingenuity
from the attacker.
B. File Integrity
In our approach we have considered that a ﬁle is low
integrity if at least one of its bytes is untrusted (i.e., came
from a network source). When a ﬁle is created into the system
the system call sys write is invoked receiving as one of its
parameters a buffer with the set of bytes to be written into the
ﬁle.
1These are character device ﬁles that allow privileged processes to access
any physical page in the system by opening one of these device ﬁles and
seeking a certain virtual (for /dev/kmem) or physical address (/dev/mem) [2].
It is supposed to be used for debugging and quick kernel hacks but has been
abused by attackers as a mechanism to inject malicious code or to tamper
with kernel data structures.
454
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:22 UTC from IEEE Xplore.  Restrictions apply. 
To discover the integrity level of these bytes, the OS issues
the software interrupt 15 passing as parameters the type of
the OS-VM request (FILE INTEGRITY) and the number of
bytes to be written into the ﬁle. To answer such request the
VM needs to inspect in its shadow memory the integrity level
of these bytes at the physical location where they are stored. If
at least of one these bytes is associated with a network source
in the shadow memory, the VM returns 1 to the OS via EAX
register and 0, otherwise.
To inspect its shadow memory the VM needs to know the
physical address of the buffer containing the bytes. As the
OS deals with virtual addresses, our approach to obtain the
corresponding physical addresses is as follows. After receiving
the ﬁrst software interrupt 15, the VM expects the OS to pass
the initial address of the buffer by using a DEC instruction
with the ﬁrst byte of the buffer as a parameter. Upon receiving
such instruction immediately after the software interrupt 15
(FILE INTEGRITY) the OS Request Manager interprets it not
as a regular DEC instruction, but as a mechanism to obtain
the address of the buffer to be written into a certain ﬁle. From
the architecture point of view this instruction behaves like a
NOP. While decoding the DEC instruction, the VM obtains
the segment selector and the offset inside this segment where
the ﬁrst byte in the buffer is stored. From the segment and
offset, the OS Request Manager computes the physical address
and uses it to inspect its shadow memory to discover the ﬁle
integrity. Another solution to pass the buffer address directly
to the VM could be to extend the instruction set with a new
instruction to perform this task. However, we have chosen not
to change the instruction set architecture.
After the DEC instruction, the OS issues another software
interrupt 15 (FILE INTEGRITY, exit request) and expects the
VM to return in the EAX register 1 if the ﬁle is low integrity
and 0 if it is high integrity. If the ﬁle is low integrity the
OS marks its inode accordingly (new ﬁeld tainted added to
inode struct). Also, in this case the OS passes to the VM
the ﬁle inode number and the ﬁle name so that the VM
can maintain the information about low integrity ﬁles at the
architectural level. This is useful for keeping track of kernel
modules integrity. The OS passes this information to the VM
in the same way that it does to communicate the size and the
address of the buffer to be written into the ﬁle.
To keep track of the propagation of data from low integrity
ﬁles even if their bytes leave the system memory (if the ﬁle is
closed and later reopened), we introduce the following mod-
iﬁcations into the sys read system call. For each invocation
of this system call we check if the ﬁle from where bytes are
going to be read to is low integrity. If the ﬁle is low integrity,
the OS asks the VM to mark the region of memory where
these bytes are going to be read as low integrity.
C. Process Integrity
At the OS level, we monitor process integrity as follows.
Inside the do execve function we check the integrity level of
the process executable ﬁle by inspecting its inode’s tainted
ﬁeld. If the ﬁle is low integrity we mark the new ﬁeld tainted
of the process’s task struct (Linux 2.4.21) as low integrity .
D. Module Integrity
A module is linked into the kernel by executing the user-
space program insmod which performs the following oper-
ations: (i) reads from the command line the ﬁle name, (ii)
locates the ﬁle that contains the module object code, (iii)
computes the size of the area needed to store the module,
(iv) invokes the sys create module system call to allocate
kernel memory to store the module, and (v) invokes the
sys init module system call to copy the relocated object code
to kernel space and to call the module’s initialization function.
As we can observe, the copy of bytes from the module
object code ﬁle to kernel space will be done by code inside
a system call that will obviously not make use of sys read.
Thus, to propagate their integrity level into the system mem-
ory, our approach leverages the fact that the VM maintains
information about all low integrity ﬁles in the system (inode
number and ﬁlename). The OS ﬁrst asks the VM the integrity
level of the module’s object ﬁle. If it is low integrity the OS
will ask the VM to mark, at the architectural level, the memory
region storing the module object code as low integrity. This
is necessary because the VM may not have information about
the integrity level of the memory region holding the object
code: the ﬁle bytes could, at a certain point, have left main
memory and returned to the ﬁle system.
This OS-VM down-call proceeds inside system call cre-
ate module, immediately after memory is allocated to hold
the module’s object code. The OS issues a software inter-
rupt 15 passing as parameters this type of request (MOD-
ULE INTEGRITY) and the length of the module’s name.
Then, the OS issues a DEC instruction passing as a parameter
the ﬁrst byte of the buffer containing the module’s name. The
VM obtains the module’s name and searches among the low
integrity ﬁles the name of the module object ﬁle. If it ﬁnds
the ﬁle, this means that it is low integrity. The OS obtains
a ﬁnal answer from the VM by issuing another software
interrupt 15 passing as a parameter the type of the request
(MODULE INTEGRITY, exit). The VM returns in register
EAX 1, if the module ﬁle is low integrity, and 0 otherwise.
If the module ﬁle is low integrity the OS needs to request
the VM to mark as low integrity the memory region allocated
for the module object code. The OS issues another software
interrupt 15 passing as parameters the type of the request
(MODULE ADDRESS) and the size of the module. Then
the OS issues a DEC instruction to pass the address of the
ﬁrst byte in the allocated area to the VM in the same way
it did when it passed the module ﬁle name. The OS Request
Manager inside the VM computes the physical address of the
ﬁrst byte in the allocated area and marks the whole memory
region holding the module’s object code as low integrity. The
network source associated with this memory range is the same
that is associated with the low integrity module ﬁle.
In our prototype we have used the name of the module ﬁle
to identify a ﬁle at the VM level. The ﬁle inode number would
have been a better choice because it uniquely identiﬁes a ﬁle at
the OS level. However, a module ﬁle inode number is not avail-
able to the module-related system calls (sys create module
and sys init module). One way to address this limitation is
455
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:22 UTC from IEEE Xplore.  Restrictions apply. 
to modify the system call sys create module so that it can
receive the module ﬁle descriptor instead of the ﬁle name.
This would require modiﬁcations to the insmod program so
that it can pass the ﬁle descriptor to sys create module as a
parameter. We leave this as future work.
E. Integrity of Dynamically Allocated Kernel Areas
Kernel areas dynamically allocated by low integrity modules
or kernel
threads should be considered low integrity. The
kernel provides interfaces for memory allocation with or
without page-size granularity [29]. The preferred choice for
memory allocation inside the kernel is through the kmalloc
interface which requires the size in bytes of the required
area passed as a parameter. The memory region allocated is
physically continuous. vmalloc is a similar interface but the
allocated area is only virtually contiguous. In this prototype
we only keep track of the integrity level of areas allocated
using kmalloc or vmalloc interfaces. However, extending
this approach for page-size granularity interfaces such as
alloc pages,
get free pages, etc... is straightforward and
we leave as future work.
Inside kmalloc and vmalloc (allocation interfaces), after
the requested area is allocated, the OS obtains the address
of the function that invoked it. Then it passes this address
to the VM and ask it about the integrity level of the calling
function. If the calling function is low integrity,
the OS
asks the VM to mark the allocated region as low integrity
as well. In our implementation, we obtain the address of
the function calling these allocation interfaces using the
builtin return address gcc hack to the linux kernel [1].
The OS issues a software interrupt 15 passing as a parameter
the type of this request (ALLOC AREA CALLING FUNC)
and the size of the allocated area. Following,
issues a
DEC instruction to pass to the VM the address of the calling
function. The VM retrieves this address and checks in its
shadow memory its integrity level. If it
is low integrity,
the allocated area should be considered untrusted as well.
If the function is untrusted, the OS issues another software
interrupt 15 passing as a parameter the type of the request
(ALLOC AREA ADDR) and a DEC instruction with the ﬁrst
byte of the allocated area as a parameter. The VM computes
the initial physical address of the allocated area and marks all
this memory region as low integrity. The associated network
source is the same as the one found for the low integrity calling
function.
it
When kernel memory is freed through kfree or vfree the OS
down-calls the VM passing as a parameter the type of the OS-
VM request (FREE ALLOC AREA) and the number of bytes
that are being freed. Then it issues a DEC instruction to pass
the address of the freed area. The VM removes any association
with network sources for this memory region, meaning that the
integrity level of this region is set to high.
F. Kernel Threads
All kernel threads created during system start-up (establish-
ment time) are considered high integrity. However, we need
an approach to monitor the integrity level of kernel threads
created after the establishment time. As we have mentioned in
section V-D, the OS requests the VM to mark all areas holding
a low integrity module object code as untrusted. Consequently,
if a kernel thread is initiated inside a low integrity module
function, all memory areas containing its instructions are low
integrity in the system.
G. Enforcing the Integrity Model
level
the architectural
We enforce our integrity model inside the VM as follows.
At
the subjects can be represented
as instructions executing in the CPU. The VM knows the
integrity level of each instruction being executed at the CPU
by inspecting it in its shadow memory at the location where
the instruction is stored.
Every time the VM is executing an instruction that will
cause a write into kernel code or data segments it checks the
instruction and memory areas integrity level. If the instruction
is low integrity and the memory locations it will write into are
high integrity areas of kernel code and data segments the VM
aborts the write operation and issues a General Protection fault
that terminates the offending process and allows the system to
continue its execution normally with its integrity preserved.
The offending process and the network source associated with
the aborted write are identiﬁed by the OS and the VM.
VI. EXPERIMENTAL EVALUATION
In this section, we present the results of the experiments
validating our architecture. We have implemented a proof-
of-concept prototype using Linux 2.4.21 as our collaborating
guest OS and Bochs IA-32 emulator as the VM layer. All
experiments were executed on an Intel Core 2 Duo k6600
with 4GB of RAM. We had three metrics in this evaluation:
(i) effectiveness against several types of kernel attacks, (ii)
behavior against benign loadable kernel modules and (iii)
performance overhead.
A. Rootkit Attacks
We have selected 6 kernel attacks using two types of attack
vectors (LKM and abuse of /dev/kmem interface) to test our
approach (Table I). To analyze the effectiveness of our solution
against non-control data attacks [10], we have implemented
a version of the Resource Wastage attack [5]. We have also
selected 4 real-world benign kernel modules and devices to
test our prototype against false positives (Table II).
1) LKM Attacks: The most common attack vector for
rootkits is to load themselves into the kernel through the LKM
interface. A LKM is loaded into the kernel through the insmod
program, which invokes system calls sys create module and
sys init module for allocating kernel memory to hold the
module and calling the module’s init function. The module’s
init function is usually the place where rootkits presenting
themselves as LKM tamper with kernel data structures, such as
the system call table. The adore rootkit, for instance, replaces
the entry of 15 system calls with its own malicious functions.
In our architecture when the ﬁrst adore’s instruction at-
tempts to write into the kernel memory holding the system
456
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:22 UTC from IEEE Xplore.  Restrictions apply. 
Rootkit/Attack
adore
rkit
knark
rial
suckit
Resource wastage [5]
Attack vector
LKM
LKM
LKM
LKM
/dev/kmem injection
LKM
Parts of Kernel Affected
system call table
system call table
system call table, /proc interface, inet protocols
system call table
system call table
zone table
Non-control data
No
No
No
No
No
Yes
TABLE I
KERNEL ATTACKS
Module/device
ftpfs
FISTGEN
kmw0.1.1
frandom
Description
Enhances Linux VFS with FTP volume mounting capabilities.
Stackable ﬁle system templates and language.
For modularizing Linux kernel functions even if they aren’t within a module.
Driver that implements a fast random number generator.
TABLE II
BENIGN MODULES/DEVICES
call table, the VM detects that the instruction is low integrity,
the memory region where it is trying to write is high integrity
and then issues a General Protection fault. The current process
insmod which is invoking adore’s init function terminates and
the system call table remains with its integrity preserved. The
VM also reports the network source associated with the attack
and the system execution can proceed normally afterwards. All
rootkits that were tested and presented themselves as LKM
were prevented from compromising the kernel the same way
adore was.
2) /dev/kmem Attacks: The /dev/kmem interface is a char-
acter device ﬁle that allows privileged processes in user mode
to write directly into kernel memory as if it was a regular ﬁle
[2]. The suckit rootkit [53] works by abusing this interface
from user space. First it discovers the address of kmalloc and,
through /dev/kmem, writes this address into an empty slot into
the system call table. Then is calls kmalloc from user space as
if it was a system call to allocate kernel memory. This memory
is written with malicious code and suckit uses another empty
slot from the system call table to store the address of this code
(KINIT). When KINIT is invoked from user space it replaces
other system call entries with pointers for malicious versions
of them.
When suckit is executed in our architecture and calls KINIT
the VM detects that a low integrity instruction in kernel mode
(instruction from KINIT in system call context) is attempting
to write into a high integrity kernel memory region (system
call table) and then issues a General Protection fault that
terminates the suckit process with message: Got signal 11
while manipulating kernel!.
Although we were able to prevent suckit from replacing
system call entries with its malicious versions, kernel space
was still corrupted because during the ﬁrst phase of the attack,
suckit was able to write into empty slots from the system
call
table by abusing /dev/kmem. This happened because
our architecture currently only checks the validity of writes
performed in kernel mode, when the segments loaded into
DS, CS, SS registers are respectively kernel data, code and
stack segments. The corruption of kernel space in the ﬁrst
phase of the attack (overwriting the two empty slots from the
system call table with the addresses of kmalloc and KINIT)
occurred in user mode when the data, code and stack segments
being addressed by the CPU were those from a user process.
Our solution to this issue was to check the integrity level
of processes trying to open /dev/kmem for write operations.
If the process integrity is low the open operation returns an
error code. This prevents suckit (and also other rootkits that
work by abusing this interface) from succeeding. It terminates
with message Can’t open /dev/kmem for read/write. The kernel
integrity remains intact. Another solution would be to also
check the validity of writes in user-mode for segments other
than those loaded into the DS, CS and SS registers. We leave
this alternative as future work.
3) Noncontrol Data Attack: The majority of rootkit attacks
works by tampering with control data-structures, such as the
system call table. The goal is to control user-level requests so
as to hide or covertly perform malicious actions. Recent work
[5], however, has shown a new class of kernel attacks targeting
non-control kernel data structures. We have implemented a
version of the Resource Wastage non-control data attack,
presented by Arati et al. [5]. It causes resource wastage and
degradation of system performance by generating memory
pressure. The attack tampers with zone marks in the normal
memory zone. These zone marks are stored in the zone table
data structure. We have implemented a LKM that sets the
page min and page low watermarks close to the value of
page high.
When loading this module in our architecture,
the VM
detects a low integrity instruction (from the module’s init
function) attempting to write into the high integrity data
structure zone table. As in the case of other LKM rootkits, the
VM issues a General Protection fault that terminates insmod
without loading the rootkit and maintaining the integrity of
the zone table data structure intact.
4) Benign LKM’s: We have selected 4 benign mod-
ules/drivers (Table II) from sourceforge.net [54] to test our
architecture against false positives. During our tests, none of
these modules violated our integrity model when loaded into
457
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:22 UTC from IEEE Xplore.  Restrictions apply. 
i
e
m
T
n
o
i
t
u
c
e
x
E
d
e
z
i
l
a
m
r
o
N
  2
  1.5
  1
  0.5
  0
  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  
