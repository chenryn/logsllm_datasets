correction techniques (e.g., based on erasure [18] or foun-
tain codes [14]) allow for schemes where a message can
be reassembled if only a subset of all packets is available.
However, as discussed above, to avoid that the attacker can
exponentially increase the reassembly time at the receiver,
each of these subsets must be identiﬁable as belonging to
the same message without relying on a shared key. Us-
ing a single hash chain to link packets of the same mes-
69
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:26 UTC from IEEE Xplore.  Restrictions apply. 
m′′1m′′2m′′3m′′4m′2m′1repeatedtransmissionchainA(M)insertedattackerbythem1m2m3m4m′′′1m′′′2m′′′3m′′′4chainA(M)branchescannotbecreatedbytheattackerm1m2m3m4m′′2m′′′3m′′′4Figure 6. Use of Uncoordinated Frequency
Hopping (UFH). The jamming-resistant com-
munication using UFH does not rely on a se-
cret spreading code (key). Hence, UFH can
be used by two nodes without pre-shared
keys to execute a key establishment protocol
in the presence of a jammer, resulting in a
secret key shared between the nodes. This
key then serves as input for a coordinated
spread-spectrum system. Once the key is set
up, UFH is abandoned in favor of, e.g., coor-
dinated frequency hopping.
sage is not beneﬁcial because verifying this packet chain
requires that the receiver receives all packets, which nulli-
ﬁes the advantage of the forward error correction. A possi-
ble solution to this problem could be to append more than
one hash link to each packet such that subsets of packets
will be connected to a complete chain with high probabil-
ity. Another promising approach might be to use distilla-
tion codes [11] that use (RSA authenticated) Merkle hash
trees as one-way accumulators. As for the multiple-chains
case, here each packet would contain more than one hash
value. This increases the overhead per packet (and thus the
total number of packets per message) in favor of a reduced
number of required successful packet receptions. We leave
the evaluation and adaption of these and new fragmenta-
tion/reassembly schemes as a topic for future research.
4. UFH Key Establishment
Having presented our UFH message transfer protocol,
we now show how it supports a jamming-resistant key es-
tablishment by which the nodes can establish a shared hop-
ping sequence for later coordinated frequency hopping (see
Figure 6).
Our UFH key establishment is divided into two stages.
In stage 1, the nodes execute a key establishment proto-
col and agree on a shared secret key K using UFH; var-
ious key establishment protocols can be used in this step.
Then, in stage 2, each node transforms K into a hopping
sequence (using linear feedback shift registers and channel
mappers [16]) and, subsequently, the nodes communicate
using coordinated frequency hopping. The ﬁrst message
in stage 2 would typically be a key conﬁrmation verify-
ing the successful key agreement and, additionally, it would
be used for the frequency hopping synchronization between
the nodes. Note that the established key is not used for en-
crypting or signing sensitive data but exclusively for estab-
lishing the hopping sequence; a weak choice does thus not
disclose any conﬁdential data.
A requirement for the key establishment protocol in our
scenario is the authentication of all exchanged messages in
order to prevent the insertion of fake messages. The pro-
tocol we propose therefore contains the exchange of pub-
lic key certiﬁcates issued by the CA, which can be omitted
in the case where the nodes exchanged or preloaded their
certiﬁcates prior to the protocol execution. In addition, the
protocol uses timestamps to preclude replay attacks and a
(short-term) history buffer to detect and drop duplicate mes-
sages during the validity of the timestamps. Messages can
be received more than once during their validity either due
to replay attacks or due to the repetitive message transmis-
sions which are inherent to our UFH message transfer pro-
tocol.
As an example, we consider an authenticated Difﬁe-
Hellman key agreement protocol in which A will establish
a key with any node in its power range. We focus on the El-
liptic Curve Cryptography (ECC) based Station-to-Station
(STS) Difﬁe-Hellman protocol [3]. It is executed as follows
(see Figure 7): Let P be the generator of a cyclic group G
with prime order p. Let SigX(·) be the signature by node X
of the string in brackets and let {·}K be its encryption with
key K. A selects a (pseudo-)random element rA ←R Zp
and broadcasts its public key certiﬁcate, a timestamp TA,
and the credential rAP , including the digital signature of
the message. Any node B in the transmission range may
reply with a symmetric message containing its credential
rBP and A’s timestamp TA. Based on the received mes-
sages, both compute the shared key, K = rA(rBP ) for A
and K = rB(rAP ) for B. Due to the nature of the DH-
key exchange and the fact that public key certiﬁcates can be
prepended to the DH-messages, two UFH messages are suf-
ﬁcient in order to agree on a key. In stage 2, A uses coordi-
nated frequency hopping to provide an authenticated proof
of its secret knowledge by sending an encrypted signature
{SigA(rAP k rBP )}K.
Discussion. The DH-protocol we consider is not manda-
tory for the UFH scheme and can be optimized for size (e.g.,
using short signature schemes [6]) or be replaced by other
protocols such as a key transport protocol [8] or an ID-based
key negotiation using bilinear maps [7]. Common to the de-
sign of the UFH key establishment protocols is that each
message is authenticated with a digital signature and either
contains a timestamp or a previously contributed random
value (Figure 7). Hence, the authenticity and freshness of
all received messages can be veriﬁed: fake messages will
fail the signature veriﬁcation and replayed messages will
70
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:26 UTC from IEEE Xplore.  Restrictions apply. 
Anti-jammingcommunicationbasedonUFHestablishesrequiredforSharedsecretkey(spreadingcode)Anti-jamminge.g.,FHorDSSScommunication,ProtocolApplicationKeyEstablish-mentProtocolFigure 7. UFH key establishment using an authenticated DH protocol.
In stage 1, A uses UFH to
broadcast its certiﬁed public key and its key contribution rAP for the elliptic curve DH protocol. Re-
play attacks are prevented by the timestamp TA and the signature of the message. Any node B in
the power range may answer by sending its DH-contribution. In stage 2, A transmits a key acknowl-
edgment, then the nodes can send arbitrary messages using coordinated frequency hopping.
be detected due to an expired timestamp or an entry in the
(short-term) history buffer. The period during which a mes-
sage is considered valid is deﬁned by the receiver and is
usually in the order of time that is required to successfully
transmit the message using our UFH scheme. Messages
which are replayed by the attacker during their validity pe-
riod are thus of no harm and might even help the sender to
deliver them. Although an attacker may be able to replay the
authenticated message of the receiver within the acceptable
time interval in another protocol session, this does still not
enable her to defer the secret hopping sequence from it (the
key contribution of the legitimate device remains secret).
Apart from authenticating the sender of a message, the
attached signatures suit a second purpose on the UFH mes-
sage transfer level. Once the possible combinations of frag-
ments have been reassembled to one or more messages, the
signature of each message is used to verify the reassembly.
Thus, we do not need to add checksums to the messages
because the signature provides the same type of error detec-
tion check.
5. Performance Analysis and Evaluation
In this section, we evaluate the efﬁciency of the pre-
sented UFH message transfer protocol
in terms of its
throughput and resource requirements. We show that, com-
pared to insertion (AI), modiﬁcation (AM ), and mixed
strategies (AIM J),
jamming (AJ) is the best attacker’s
strategy (see Figure 10). Throughout this analysis, we as-
sume that the hopping frequency of the receiver fB is much
slower than the hopping frequency of the sender fA (Fig-
ure 2). We can therefore neglect packet losses caused by
the lack of synchronization between sender and receiver as
they only affect every fA
-th packet and are thus rare events
fB
compared to the likelihood that the receiver listens on an in-
(cid:28) (1 − 1
c )). We also assume that
correct channel (i.e., fB
fA
the number of devices in the neighborhood of the receiver
that use the same channels is low (i.e., (cid:28) c) and that the
impact of unintentional interference is thus negligible.
Given an attacker strategy Ax (x ∈ {0, I, M, J, IM J}),
we use the expected number of packets that have to be sent
in order for a message to be successfully received (Nx) as
the main metric for the performance of our UFH message
transfer protocol. For ease of comparison, we additionally
derive therefrom the relative throughput of UFH (Φx) with
respect to coordinated frequency hopping. We note that our
UFH scheme is probabilistic in nature and that the probabil-
ity that a message is successfully received depends on the
strength of the attacker and the number of times the message
has been (re)sent (see Figure 11(a)).
5.1. Communication without an Attacker (At-
tacker Strategy A0)
First of all, we evaluate the performance of the presented
UFH message transfer protocol in the absence of an at-
tacker, which is equal to the situation where the attacker
embarks on strategy A0. In this case, the probability that a
particular packet is successfully received is
(cid:18)
pA0
m = 1 − cm−1Y
≥ 1 −(cid:16)
i=0
1 − cn
c
1 − min
(cid:17)cm
(cid:27)(cid:19)
(cid:26) cn
, 1
c − i
(1)
where cn ≤ c (cm ≤ c) is the number of channels on which
the sender (receiver) simultaneously sends (receives). From
the receivers point of view, the transfer of an entire mes-
sage is completed once it has successfully received all l
message fragments. Let the random variable Y represent
the number of times that the sender is required to retransmit
the sequence of packets in order to successfully transfer the
71
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:26 UTC from IEEE Xplore.  Restrictions apply. 
K=rB(rAP)rB←RZBwithoutsharedkeyFrequencyHoppingUncoordinatedFrequencyHoppingwithsharedkeyK(Coordinated)A,PKA,SigCA(A,PKA),TA,rAP,SigA(A,...,rAP)B,PKB,SigCA(B,PKB),TA,rBP,SigB(B,...,rBP)rA←RZAK=rA(rBP){SigA(rAPkrBP)}KStage2Stage1Figure 8. Input and output channel conﬁgura-
tion of the attacker. We denote by cs the num-
ber of channels that the attacker can sense
in parallel and by ts (tj) the required time
to switch the frequency of the input (output)
channels. The number of channels on which
the attacker can send (γt), jam (γj), and over-
shadow (γo) is bounded by her transmission
power.
Figure 9. Probability that a packet is jammed
as a function of the number of jammed chan-
nels for different jammer types.
i=0
∞X
∞X
∞X
i=0
N(pA0
m ) :=
=
=
P[Y = i]il
(P[Y ≥ i] − P[Y > i]) il
(cid:18)
1 −(cid:16)
1 −(cid:0)1 − pA0
m
message. The probability that a message transfer is still in-
complete after i (re)transmissions is then P[Y ≥ i + 1] =
P[Y > i] = 1 − (1 − (1 − pA0
m )i)l. Hence, the expected
total number of packets that have to be transmitted in order
to successfully transfer a message is N0 = N(pA0
m ), where
(cid:1)i(cid:17)l(cid:19)
l.
(2)
i=0
5.2. Jamming Performance of the Attacker
As introduced in Section 2.2, we assume that the max-
imal transmission strength of the attacker is ﬁnite, and de-
note by PT the signal strength that the attacker is able to
achieve at the receiver B if she transmits with maximal
transmission power on a single channel. We also assume
that the frequency-dependent variance in the signal attenu-
ation is negligible over the communication frequency range
of C and that the attacker can divide her transmission power
arbitrarily among all c channels. The only restriction is
therefore that for all combinations of output channel assign-
ments in which the attacker sends on γt, jams on γj, and
overshadows on γo channels, γtPt + γjPj + γoPo ≤ PT
and 0 ≤ γt, γj, γo ≤ c must hold at all times. Consequently,
we can derive b PT
c as upper bounds on
the number of channels on which the attacker can simulta-
neously send (ct), jam (cj), or overwrite (co), respectively.
The number of channels that the attacker can concurrently
c, and b PT
c, b PT
Po
Pj
Pt
sense is denoted by cs. Furthermore, we assume that the
attacker is able to receive and transmit in parallel and that
the channels on which she receives and transmits can be
switched independently of each other. The required time to
switch the frequency of the input (output) channels is de-
noted by ts (tj) (see Figure 8).
Using the above introduced terms, the jamming capabil-
ities of the attacker can then be expressed as the probabil-
ity pj with which a packet mi is jammed. This probabil-
ity depends on the length of the packet and on the strength
of the attacker:
the longer the packet is and the stronger
the attacker is, the more likely it is that the packet will get
jammed. More precisely, let tp be the time to transmit a
packet mi on frequency channel fi and tp be the minimum
jamming period during which the attacker has to interfere
with the transmission of mi such that it cannot be decoded.
Following previous classiﬁcations [16], we distinguish be-
tween static, sweep, random, responsive, and hybrid jam-
mers (see Figure 9).
cj
Static, sweep, and random jammers do not sense for on-
going transmissions but permanently jam on cj channels.
However, whereas sweep and random jammers switch the
output channels after a duration of tp, static jammers remain
on the same channels for a time t(cid:29) tp. Also, sweep jam-
mers systematically update the output channels in a way that
after d c
e jamming cycles all channels have been jammed
once (but do not have to follow a particular order). Random
jammers, on the other hand, always choose cj channels at
random and might thus jam the same channels more than
once in subsequent jamming cycles. The number of jam-
ming cycles per packet is in both cases nj := tp/(tp + tj).
Hence, the probability that a packet is jammed is pj ≤ cj