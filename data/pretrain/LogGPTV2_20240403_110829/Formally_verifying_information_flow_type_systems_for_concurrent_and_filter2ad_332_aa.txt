title:Formally verifying information flow type systems for concurrent and
thread systems
author:Gilles Barthe and
Leonor Prensa Nieto
Formally Verifying Information Flow Type Systems
for Concurrent and Thread Systems∗
Gilles Barthe
INRIA Sophia-Antipolis, France
PI:EMAIL
Leonor Prensa Nieto
LORIA, France
†
PI:EMAIL
ABSTRACT
Information ﬂow type systems provide an elegant means to
enforce conﬁdentiality of programs. Using the proof assis-
tant Isabelle/HOL, we have machine-checked a recent work
of Boudol and Castellani [4], which deﬁnes an information
ﬂow type system for a concurrent language with scheduling,
and shows that typable programs are non-interferent. As a
beneﬁt of using a proof assistant, we are able to deal with a
more general language than the one studied by Boudol and
Castellani. The development constitutes to our best knowl-
edge the ﬁrst machine-checked account of non-interference
for a concurrent language.
Categories and Subject Descriptors
F.3.3 [Studies of Program Constructs]: Type structure;
D.2.8 [Software Engineering]: Software/Program Veri-
ﬁcation; D.3.2 [Language Classiﬁcations]: Concurrent,
distributed, and parallel languages
General Terms
Security, languages, veriﬁcation
Keywords
Non-interference, concurrency, machine-checked proofs
INTRODUCTION
1.
1.1 Background
Security models for mobile and embedded code, such as
the Java Virtual Machine and the Common Language Run-
time, partially guarantee the innocuity of downloaded ap-
plications, but are too weak to enforce strong security. For
∗Work partially supported by the IST Project Profundis and
†Most of this work was performed while at INRIA Sophia-
by the ACI S´ecurit´e SPOPS.
Antipolis.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
FMSE’04, October 29, 2004, Washington, DC, USA.
Copyright 2004 ACM 1-58113-971-3/04/0010 ...$5.00.
example, these security models ensure that applications will
not perform illegal memory accesses, but fail to guarantee
that conﬁdential data shall not be accessed by an unautho-
rized party. In fact, conventional mechanisms such as static
bytecode veriﬁcation and access control mechanisms are not
appropriate to prevent attacks by untrusted code, and plat-
forms for mobile and embedded code should be endowed
with appropriate mechanisms that guarantee end-to-end se-
curity. One such mechanism for conﬁdentiality is provided
by information ﬂow type systems, which track the ﬂow of
information in a program execution, and provide a means
to enforce statically that no information leakage will result
from executing the program. More precisely, information
ﬂow type systems guarantee non-interference [8], a high-level
property that characterizes programs whose execution does
not reveal information about secret data, see [23] for a recent
survey.
The deﬁnition of non-interference is conditioned by the at-
tacker model which describes the capabilities of the attacker,
concerning for instance which observations it can make. In
a sequential setting, there are several well-established vari-
ants of non-interference. These variants all assume a sepa-
ration between secret inputs and public inputs on the one
hand, and secret outputs and public outputs on the other
hand. On the basis of this separation, deﬁnitions of non-
interference require that the value of public outputs does not
depend on the value of secret inputs (termination-insensitive
non-interference), or that the termination of the program
and the value of public outputs does not depend on the value
of secret inputs (termination-sensitive non-interference), or
that the execution time of the program and the value of
public outputs does not depend on the value of secret in-
puts (timing-sensitive non-interference).
While information ﬂow type systems provide an eﬀec-
tive means to enforce end-to-end conﬁdentiality for sequen-
tial programs, concurrency raises a number of subtle issues,
starting from the deﬁnition of non-interference in a concur-
rent setting.
A ﬁrst diﬃculty is to handle non-determinism. One ob-
vious possibility is to adopt a so-called possibilistic notion
of non-interference [4, 27] which considers the set of pos-
sible outputs of a program execution (instead of the out-
put in a sequential setting). However, programs that are
deemed secure by possibilistic non-interference are subject
to reﬁnement attacks: indeed, using a scheduler to execute
non-deterministic programs may result in secure programs
leaking conﬁdential information. For example, the program
(if h = 0 then skip else sleep(100)); l := 0 || l := 1
is likely to terminate with l = 0 if h = 0 and a round robin
scheduler is used.
In order to avoid such reﬁnement attacks, several ap-
proaches have been developed to account for schedulers.
One approach is to focus on probabilistic non-interference,
which deals with probabilistic parallel composition (or a gen-
eralization of it that allows to compose an arbitrary number
of programs in parallel) and considers the probability of dis-
tribution for the possible outputs of a program execution.
For example, one can show probabilistic non-interference of
programs assuming that probabilities in parallel composi-
tion are uniform [26, 30]. Another alternative is to adopt
a stronger, scheduler independent, notion of security; for
example, one can isolate a large class of schedulers, poten-
tially probabilistic, and require programs to be secure for
all the schedulers in this class [25]. Yet another possibility
is to extend the programming language with primitives for
scheduling, as e.g.
In this approach, schedul-
ing policies are represented by a concurrent program that
is type-checked using the same rules as other concurrent
programs. (Such a scenario of schedule-carrying code has
been pursued independently in the context of embedded sys-
tems [10].)
in [4, 15].
One further issue with concurrency is the attacker model.
While deﬁnitions of non-interference in sequential settings
can be concerned with an input/output view of the pro-
gram behavior, deﬁnitions of non-interference in concurrent
setting usually adopt a more conservative approach in order
to prevent that a malicious thread can observe the behavior
of other threads and adapts its behavior accordingly. Con-
sequently, deﬁnitions of non-interference for concurrent pro-
grams often aim at guaranteeing that the conﬁdential data
is protected throughout the entire program execution. To
this end, such deﬁnitions are based on diﬀerent notions of
bisimulation.
In particular, bisimulation based notions of
non-interference have been adopted in many works on non-
interference that have been pursued in the context of process
algebra, see e.g.
[7], π-calculus, see e.g. [9, 11], and ambi-
ent calculus, see e.g. [6]. However, diﬀerent deﬁnitions of
non-interference are also considered in the literature: for ex-
ample, Zdancewic and Myers [32] have recently considered
a notion of observational determinism that uses execution
traces and considers a complex notion of indistinguishabil-
ity involving equivalence of (projections along variables of)
traces up to preﬁxing and stuttering.
1.2 Our work
Non-interference for sequential and concurrent languages
is very intricate, both in the deﬁnition of the type system
used for the analysis, and in the soundness proof which es-
tablishes that typable programs are non-interferent.
It is
therefore natural to resort to proof assistants for manag-
ing the complexity of the deﬁnitions and proofs involved in
establishing non-interference for languages.
The purpose of this paper is to report on an experiment
with the mechanical veriﬁcation of a type system for a con-
current language with scheduling, using the Isabelle proof
assistant [18].
The programming language is an extension of a simple
while language with:
• a parallel composition operator with an interleaving
semantics;
• primitive operators for scheduling and synchroniza-
tion.
Our language is inspired from [4], but features unrestricted
sequential composition, whereas [4] requires that the ﬁrst
process of a sequential composition is sequential. We also
modify and extend the semantics rules to give a reasonable
meaning to all possible programs in our language.
The type system is also taken from [4], and keeps track of
the level of loop guards, as well as of the level of assignments.
However, we show its validity for our more general language.
Validity, which is expressed as in possibilistic terms and
cast in terms of bisimulation, is established against the same
notion of security than in [4]: concretely, we deﬁne a pro-
gram P to be non-interferent if P ≈ P , where ≈ is the largest
bisimulation on programs. (Note that the notion of bisimu-
lation on programs is drawn from an appropriate notion of
bisimulation on conﬁgurations, and that, while bisimulation
on conﬁgurations is an equivalence relation, bisimulation on
programs is not.)
Furthermore, our proofs mostly use deﬁnitions and proof
techniques from [4]; in particular for our main results, we
rely on exhibiting an appropriate bisimulation relation R
such that P R P for every typable program P . However, as
a result of allowing for unrestricted sequential composition,
we do not need to prove sequential non-interference prior to
proving concurrent non-interference.
Our work not only indicates that proof assistants are ma-
ture for verifying state-of-the-art type systems for informa-
tion ﬂow, but also shows that proof assistants help reduce
the complexity of proofs and thereby allow to discard conve-
nient, but unnecessary assumptions in proofs. Perhaps less
importantly, our work reveals minor ﬂaws in the deﬁnitions
and proofs of [4].
1.3 Related work on formal proofs of
non-interference
There is a large body of work in machine-checked pro-
gramming language semantics, in particular in the area of
type systems. However, most works in this area focus on
“traditional” type systems. In contrast, few formalizations
focus on language-based non-interference and in particu-
lar, we do not know of any machine-checked proof of non-
interference for a concurrent programming language.
Existing works include a formalization of unwinding the-
orems for intransitive non-interference by Rushby [22], as
well as recent formalizations of information ﬂow type sys-
tems for a fragment of Java [2, 1]. The latter formalizations
have been conducted by Naumann [17] and by Strecker [28],
in PVS and Isabelle respectively.
1.4 Contents of the paper
The remainder of the paper is organized as follows. Sec-
tion 2 gives an introduction to Isabelle/HOL and the syntax
used in this paper. Section 3.1 presents the concurrent pro-
gramming language, and its associated type system. Section
3.2 establishes non-interference of the concurrent language.
In Section 4.1, we extend the language with scheduling prim-
itives, and endow it with appropriate typing rules. Section
4.2 is devoted to a proof of non-interference for the extended
language. We conclude in Section 5 with directions for fur-
ther work.
2.
ISABELLE/HOL
Isabelle [18] is a generic interactive theorem prover which
can be instantiated with diﬀerent object logics. Isabelle/HOL
is the instance for Higher-Order Logic.
We use two base types (bool and nat) and construct oth-
ers by type constructors like list, set or the product type
(×) and by function application (⇒). Isabelle also supports
inductive deﬁnitions of data types (keyword datatype).
List notation is similar to ML. The ith component of a
list xs is written xs!i. The functional map :: (α ⇒ β) ⇒
α list ⇒ β list applies a function to all elements of a list. The
syntax xs[i := x] denotes the list xs with the ith component