0
0
0
0
0
0
1
0
0
AGHL_Step(𝑓 𝑖𝑛)
Step 4
0
1
0
0
0
0
0
0
0
0
0
0
𝑜𝑢𝑡
0
0
0
0
0
𝐸𝑥_𝑜𝑢𝑡
Expension
𝐸𝑥_𝑣
𝑠ℎ𝑖𝑒𝑙𝑑
0
×
0
1
×
0
0
0
1
0
0
× . . .
0
0
. . .
1
1
1
1
0
0
0
1
0
1
0
0
1
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
Figure 7: Reconstruction step: we want to get a pulse array
with the same length as the original array, while the only
1’s index is corresponding to the first non-zero term in the
original array.
𝐸𝑥_𝑣[𝑖] = · · · = 𝐸𝑥_𝑣[𝑖 + (𝑡 − 1)𝑘] = 𝐸𝑥_𝑜𝑢𝑡[𝑖]
Integration: We multiply the expanded array 𝐸𝑥_𝑣 by the array
𝑠ℎ𝑖𝑒𝑙𝑑 we got from the previous section to get a new array 𝑜𝑢𝑡,
∀𝑖 ∈ [𝑛]:
𝑜𝑢𝑡[𝑖] = 𝐸𝑥_𝑣[𝑖] × 𝑠ℎ𝑖𝑒𝑙𝑑[𝑖]
Since the array 𝑠ℎ𝑖𝑒𝑙𝑑 is only non-zero in the target interval, the
result of the multiplication is the final reconstructed array.
4.2.4 Transform array to number. This subroutine takes as input
an encrypted array, which consists of a single 1 and multiple 0s for
the rest, and outputs the ciphertext of the index of the non-zero
term in the array.
As a slightly abuse of notation, 𝑜𝑢𝑡 ∈ {0, 1}𝑛 represents a vector
of encrypted bits as input, where 𝑥 denotes 𝑥’s ciphertext. We
obtain the binary representation of the index (of the non-zero term
in 𝑜𝑢𝑡) in encrypted form, i.e., by outputing 𝐵 · 𝑜𝑢𝑡, where 𝐵 ∈
{0, 1}⌈log(𝑛+1)⌉×𝑛 is a ⌈log(𝑛 + 1)⌉ × 𝑛 matrix whose every 𝑖-th
column is the binary representation of integer 𝑖 in cleartext.
While the process seemingly involves multiplications, it actually
requires only homomorphic additions since 𝐵 consists of 0-1 valued
entries in plaintext, and therefore multiplying 𝐵 with a vector 𝑜𝑢𝑡
of encrypted entries first selects the corresponding ciphertexts in
𝑜𝑢𝑡 (based on the values in 𝐵) and then outputs their encrypted
sum using homomorphic additions. We provide an example below
for 𝑛 = 4 and thus 𝐵 is a 3 × 4 matrix and we let the encrypted
vector 𝑜𝑢𝑡 = (0, 1, 0, 0)𝑇 . Multiplying 𝐵 and 𝑜𝑢𝑡 yields:
(cid:169)(cid:173)(cid:171)0
0
1
0
1
0
0
1
1
1
0
0
(cid:170)(cid:174)(cid:172) ·(cid:169)(cid:173)(cid:173)(cid:173)(cid:171)
(cid:170)(cid:174)(cid:174)(cid:174)(cid:172) =(cid:169)(cid:173)(cid:171) 0
1 + 0
0 + 0
0
1
0
0
(cid:170)(cid:174)(cid:172) =(cid:169)(cid:173)(cid:171)0
(cid:170)(cid:174)(cid:172) ,
1
0
where the result (0, 1, 0)𝑇 corresponds to binary representation
of 2 (i.e., the non-zero term’s index in 𝑜𝑢𝑡).
Core Idea of Our Algorithm: In our algorithm, we use the Local-
ization technique to narrow down the scope of the first 1 entity,
then use the Extraction technique to extract the desired interval, so
that we do not need to apply expansive operations on non-target
Figure 6: Extraction step: we turn elements in the non-target
interval to 0, then add the corresponding position together
to obtain the target interval.
Adding the elements in the corresponding position of each in-
terval, because all the elements in the interval except the interval
with the first 1 are all 0, so the result is the interval with the first
non-zero item. So far, we have completed the goal of extracting the
target interval.
Step 4: After extracting the target interval, we only need to call
AGHL_Step algorithm on this interval to obtain a pulse array, then
we assign the result to array 𝐸𝑥_𝑜𝑢𝑡. There are two things we want
to point out about AGHL_Step algorithm:
(1) Compared with AGHL algorithm mentioned above, this algo-
rithm (AGHL_Step) eliminates the step of finally converting
pulse array into binary representation;
(2) The parameter selection of RS-OR operation in this algo-
rithm is the same as we mentioned in Section 3.3, which are
all 𝑁 (𝜀) = ⌈log( 𝑛
𝜀 )⌉, means that the probability of failure of
all RS-OR operations in this paper is 𝜀
𝑛
Compared to the previous algorithm, LEAF algorithm does not need
to apply RS-OR on every elements in the array, instead, we utilize
RS-OR in a coarse-grained manner, that is, we partition the original
array, evaluate only one RS-OR operation in an interval, and replace
the result of the whole interval with this result, so as to determine
the first non-zero element into a smaller interval with less expen-
sive operations. Although the localization and extraction steps bring
extra time overhead, through choosing suitable parameters, we ob-
tained, by analysis, the ascension of the whole performance of the
algorithm will be relatively large. All the way through, we get ap-
proximate interval coordinates of the first non-zero element and the
offset within that interval. In the Reconstruction step, we’ll explain
how to build the final result with the two position information.
4.2.3 Reconstruction. In this step, our goal is to integrate the po-
sition information from the two steps above into one final output.
The process is shown in Figure 7.
Expansion: In this step, we extend the pulse array (𝐸𝑥_𝑜𝑢𝑡) ob-
tained by AGHL_Step algorithm to an array with the same length
as the original array (𝑣), ∀𝑖 ∈ [𝑘]:
𝑛⌋, 𝑘 = ⌈ 𝑛
Algorithm 1 LEAF
1: Input: Array 𝑣 ∈ {0, 1}𝑛;
2: Output: 𝑖∗ = 𝑚𝑖𝑛{𝑖 ∈ [𝑛] | 𝑣[𝑖] == 1};
3: Set 𝑡 = ⌊√
𝑡 ⌉, pad the input array by 𝑡 × 𝑘 − 𝑛 zero
entries;
4: Create a new array 𝑖𝑛𝑑 ∈ {0, 1}𝑡, ∀𝑖 ∈ [𝑡], set 𝑖𝑛𝑑[𝑖] ←
RS-OR(𝑣[1], 𝑣[2], . . . , 𝑣[𝑖 × 𝑘]);
5: Create a new array 𝑓 𝑙𝑎𝑔 ∈ {0, 1}𝑡, ∀𝑖 ∈ [2, 𝑡] : 𝑓 𝑙𝑎𝑔[𝑖] ←
𝑖𝑛𝑑[𝑖] − 𝑖𝑛𝑑[𝑖 − 1], 𝑓 𝑙𝑎𝑔[𝑡 + 1] ← 1 − 𝑖𝑛𝑑[𝑡];
6: Create a new array 𝑠ℎ𝑖𝑒𝑙𝑑 ∈ {0, 1}𝑛: ∀𝑗 ∈ [𝑡],∀𝑖 ∈
[𝑘] 𝑠ℎ𝑖𝑒𝑙𝑑[( 𝑗 − 1) · 𝑘 + 𝑖] ← 𝑓 𝑙𝑎𝑔[ 𝑗];
7: ∀𝑖 ∈ [𝑛], 𝑣[𝑖] ← 𝑣[𝑖] × 𝑠ℎ𝑖𝑒𝑙𝑑[𝑖];
8: Create a new array 𝑓 𝑖𝑛 ∈ {0, 1}𝑘: ∀𝑗 ∈ [𝑘], 𝑓 𝑖𝑛[ 𝑗] ← 𝑣[ 𝑗] +
𝑣[𝑘 + 𝑗] + · · · + 𝑣[(𝑡 − 1) × 𝑘 + 𝑗];
9: 𝐸𝑥_𝑜𝑢𝑡 ← AGHL_Step(𝑓 𝑖𝑛);
10: Create a new array 𝐸𝑥_𝑣 ∈ {0, 1}𝑛: ∀𝑖 ∈ [𝑘], 𝐸𝑥_𝑣[𝑖] =
11: Create a new array 𝑜𝑢𝑡 ∈ {0, 1}𝑛:∀𝑖 ∈ [𝑛], 𝑜𝑢𝑡[𝑖] ← 𝐸𝑥_𝑣[𝑖]×
12: index ← 𝐵 · 𝑜𝑢𝑡, 𝑓 𝑜𝑟 𝐵 ∈ {0, 1}⌈log(𝑛+1)⌉×𝑛;
13: return index;
𝐸𝑥_𝑣[𝑖 + 𝑘] = · · · = 𝐸𝑥_𝑣[𝑖 + (𝑡 − 1)𝑘] = 𝐸𝑥_𝑜𝑢𝑡[𝑖];
𝑠ℎ𝑖𝑒𝑙𝑑[𝑖];
intervals, significantly reducing the number of multiplication op-
erations. Finally, we use Reconstruction technique to construct the
final output based on the two position information.
The reason why we need to use new techniques to extract the
target interval instead of directly using array index is based on
the fact that the coordinates representing the general range are
homomorphically encrypted, and the server cannot get the general
position of the target items.
Combining the above operations, we get Algorithm 1 (The selec-
tion of 𝑡, 𝑘 is detailed in Section 5.2).
4.3 Correctness of LEAF Algorithm
In this paper, a low-degree approximation method for OR called
RS-OR is adapted to construct our algorithm, this method can
significantly reduce the degree of the algorithm, but at the same
time introduce some error probability. We will prove that the error
probability of our algorithm can be controlled at a very low level.
As mentioned above, all RS-OR operations in this paper select
the same parameter 𝑁 (𝜀) = ⌈log( 𝑛
𝜀 )⌉, according to the proof in
Section 3.3, all RS-OR operations with this parameter has the same
correct probability which is 1 − 𝜀
𝑛 .
In the Localization step, we divide the original array into 𝑡 inter-
vals of equal length, so in this step, we calculate RS-OR for a total
of 𝑡 times. In our Extraction step, we performed RS-OR for each
element in the target interval with length 𝑘, so we calculated a total
of 𝑘 times of RS-OR operations in this step. In addition, other parts
of our algorithm did not use RS-OR operation, so our algorithm
used 𝑡 + 𝑘 times of RS-OR operation, if these operations do not
occur any error, our algorithm will be correct.
Based on the conclusion in Section 5.2, we select the parameter
√
𝑛 in this paper, so the probability of our algorithm being
𝑡 = 𝑘 =
correct is:
𝑃𝑟LEAF =(cid:0)1 − 𝜀
𝑛
(cid:1)𝑡+𝑘 =(cid:0)1 − 𝜀
(cid:1)2√
𝑛
𝑛
𝑠ℎ𝑖𝑒𝑙𝑑
𝑖𝑡𝑒𝑚𝑠
0
×
?
0
×
?
1
1
1
1
0
0
× . . .
?
?
?
𝑋
?
?
0
?
0
?
0
?
0
?
0
?
0
?
0
?
0
?
. . .
𝑡𝑒𝑚𝑝1
0
0
0
0
?
𝑋
?
?
0
0
0
0
0
0
0
0
Step 1
?
×
𝑡𝑒𝑚𝑝2
𝐸𝑥_𝑜𝑢𝑡
𝑟𝑒𝑠𝑢𝑙𝑡
0
0
𝑋
×
1