title:Self-service cloud computing
author:Shakeel Butt and
H. Andr&apos;es Lagar-Cavilla and
Abhinav Srivastava and
Vinod Ganapathy
Self-service Cloud Computing
Shakeel Butt
Rutgers University
H. Andr´es Lagar-Cavilla
GridCentric Inc.
Abhinav Srivastava
AT&T Labs-Research
Vinod Ganapathy
Rutgers University
ABSTRACT
Modern cloud computing infrastructures use virtual machine moni-
tors (VMMs) that often include a large and complex administrative
domain with privileges to inspect client VM state. Attacks against
or misuse of the administrative domain can compromise client secu-
rity and privacy. Moreover, these VMMs provide clients inﬂexible
control over their own VMs, as a result of which clients have to
rely on the cloud provider to deploy useful services, such as VM
introspection-based security tools.
We introduce a new self-service cloud (SSC) computing model
that addresses these two shortcomings. SSC splits administrative
privileges between a system-wide domain and per-client adminis-
trative domains. Each client can manage and perform privileged
system tasks on its own VMs, thereby providing ﬂexibility. The
system-wide administrative domain cannot inspect the code, data
or computation of client VMs, thereby ensuring security and pri-
vacy. SSC also allows providers and clients to establish mutually
trusted services that can check regulatory compliance while re-
specting client privacy. We have implemented SSC by modifying
the Xen hypervisor. We demonstrate its utility by building user do-
mains to perform privileged tasks such as memory introspection,
storage intrusion detection, and anomaly detection.
Categories and Subject Descriptors. D.4.6 [Operating Sys-
tems]: Security and Protection
General Terms. Design, Experimentation, Management, Security
Keywords. cloud computing, security, trust, privacy
INTRODUCTION
1.
Modern cloud infrastructures rely on virtual machine monitors
(VMMs) to ﬂexibly administer and execute client virtual machines
(VMs). VMMs implement a trusted computing base (TCB) that vir-
tualizes the underlying hardware (CPU, memory and I/O devices)
and manages VMs. In commodity VMMs, such as Xen and Hyper-
V, the TCB has two parts—the hypervisor and an administrative
domain. The hypervisor directly controls physical hardware and
runs at the highest processor privilege level. The administrative do-
main, henceforth called dom0, is a privileged VM that is used to
control and monitor client VMs. Dom0 has privileges to start/stop
client VMs, change client VM conﬁguration, monitor their physical
resource utilization, and perform I/O for virtualized devices.
• Security and privacy of client VMs. Dom0 has the privilege to
inspect the state of client VMs, e.g., the contents of their vCPU
registers and memory. This privilege can be misused by attacks
against the dom0 software stack (e.g., because of vulnerabilities
Endowing dom0 with such privileges leads to two problems:
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
or misconﬁgurations) and malicious system administrators. This is
a realistic threat [10, 11, 12, 13, 14, 19, 23], since dom0 typically
executes a full-ﬂedged operating system with supporting user-level
utilities that can be conﬁgured in complex ways.
• Inﬂexible control over client VMs. Virtualization has the poten-
tial to enable novel services, such as security via VM introspec-
tion [6, 18], migration [8] and checkpointing. However, the adop-
tion of such services in modern cloud infrastructures relies heav-
ily on the willingness of cloud service providers to deploy them.
Clients have little say in the deployment or conﬁguration of these
services. It is also not clear that a “one size ﬁts all” conﬁguration
of these services will be acceptable to client VMs. For example,
a simple cloud-based security service that checks network packets
for malicious content using signatures will not be useful to a client
VM that receives encrypted packets. The client VM may require
deeper introspection techniques (e.g., to detect rootkits), which it
cannot deploy on its own. Even if the cloud provider oﬀers such an
introspection service, the client may be reluctant to use it because
dom0’s ability to inspect its VMs may compromise its privacy.
Recent work has investigated the use of nested virtualization [4]
to develop solutions for each of the above problems. The Cloud-
Visor project [52] uses nesting to protect client VMs from an un-
trusted dom0, thereby addressing security and privacy concerns.
The XenBlanket project [51] uses nesting to address the problem of
inﬂexible control and cloud provider “lock-in,” and allows clients
to implement their own services. However, while these projects
address the individual concerns above, they do not address both
of them simultaneously. In theory, it may be possible to combine
the goals of these projects by recursively nesting one within the
other (i.e., two levels of nested virtualization). However, on com-
modity x86 hardware, the use of nested virtualization imposes un-
wanted performance penalties on client VMs (as compared to the
case of non-nested virtualization). These overheads can grow ex-
ponentially as client VMs are placed at deeper levels of nesting
because of the need to emulate traps within each nested hypervisor
(e.g., see [25, Section 3]). Therefore, a straightforward combination
of CloudVisor and XenBlanket will likely be unpalatable to clients.
We take a fundamentally diﬀerent approach to addressing these
problems. Our main contribution is a new Self-service Cloud (SSC)
Computing model that simultaneously addresses the problems of
security/privacy and inﬂexbile control. Our main observation is that
both of the above problems are a direct consequence of the way in
which commodity hypervisors assign privilege to VMs. SSC intro-
duces a novel privilege model that reduces the power of the ad-
ministrative domain and gives clients more ﬂexible control over
their own VMs. SSC’s privilege model splits the responsibilities
traditionally entrusted with dom0 between a new system-wide ad-
ministrative domain (Sdom0) and per-user administrative domains
(Udom0s), service domains (SDs) and mutually-trusted service do-
mains (MTSDs) that are described in more detail below. By intro-
ducing a new privilege model, SSC addresses both of the above
problems without requiring nested virtualization and the perfor-
mance overhead that it entails.
Udom0 (User dom0) is a per-user administrative domain that
can monitor and control the set of VMs of a particular client. When
253creating VMs, a privilege that no longer resides with the system-
wide administrative domain (Sdom0). Section 3 presents a detailed
overview of the design of SSC.
We have implemented an SSC-compliant VMM by modifying
Xen (v3.4.0). We demonstrate SSC’s utility by showing that SDs
can be used to implement a variety of services (Section 4). To
summarize, the main contributions of this paper are:
• The SSC model. SSC’s privilege model allows clients to ad-
minister their own VMs, while disallowing the cloud’s adminis-
trative domain from inspecting client VM state. This new privilege
model addresses both client concerns discussed earlier, i.e., secu-
rity/privacy of VMs, and inﬂexible control over VMs. Unlike re-
cent work to address these concerns [51, 52], SSC does not rely on
nested virtualization. Consequently, client VMs are able to enjoy
the beneﬁts of SSC with negligible performance overheads.
• Service domains. SDs allow clients to perform privileged system
tasks on their VMs. We demonstrate case studies showing that
SDs can be used to implement a variety of system services that
are traditionally implemented in dom0. Consequently, SDs provide
clients more ﬂexible control over their VMs.
• Mutually-trusted service domains. MTSDs execute privileged
services that check regulatory compliance in a manner that is mu-
tually agreed upon between the cloud provider and the client. They
balance the tension between the cloud provider’s need to retain con-
trol and the client’s security and privacy goals.
2. THREAT MODEL
SSC’s threat model is similar to those used in recent work on pro-
tecting client VMs in the cloud [26, 40, 52], and diﬀerentiates be-
tween cloud service providers and cloud system administrators.
Cloud providers are entities such as Amazon EC2 and Microsoft
Azure, who have a vested interest in protecting their reputations.
On the other hand, cloud system administrators are individuals en-
trusted with system tasks and maintaining the cloud infrastructure.
To do so, they have access to dom0 and the privileges that it entails.
We assume that cloud system administrators are adversarial (or
could make mistakes), and by extension, that the administrative do-
main is untrusted. Administrators have both the technical means
and the monetary motivation to misuse dom0’s privileges to snoop
client data at will. Even if system administrators are benign, attacks
on client data can be launched via exploits directed against dom0.
Such attacks are increasing in number [10, 11, 12, 13, 14, 23] be-
cause on commodity VMMs, dom0 often runs a full-ﬂedged op-
erating system, with a complex software stack. Likewise, miscon-
ﬁgured services in dom0 can also pose a threat to the security and
privacy of client data.
SSC protects clients from threats posed by exploits against
Sdom0 and cloud administrators who misuse Sdom0’s privileges.
SSC prevents Sdom0 from accessing the memory contents of client
VMs and the state of their virtual processors (vCPUs). This pro-
tects all of the client’s in-memory data, including any encryption
keys stored therein. SSC’s core mechanisms by themselves do not
prevent administrators from snooping on network traﬃc or per-
sistent storage. Security-concious clients can employ end-to-end
encryption to protect data on the network and storage. We show
how clients can achieve this by implementing suitable SDs (Sec-
tion 4.1). Packet headers need not be encrypted; after all, network
middleboxes inspect and mangle packet headers.
SSC assumes that the cloud service provider is trusted. The
provider must supply a TCB running an SSC-compliant VMM. We
assume that the physical hardware is equipped with an IOMMU
and a Trusted Platform Module (TPM) chip, using which clients
can obtain cryptographic guarantees about the software stack ex-
ecuting on the machine. The cloud provider must also implement
Figure 1. The design of a Self-service Cloud (SSC) comput-
ing platform. SSC splits the TCB of the system (indicated us-
ing the shaded components) into a system-level TCB, with the
hardware, the SSC hypervisor, and the domain builder, and a
client-level TCB, with the Udom0 and service domains.
a client attempts to start a VM in SSC, it is assigned its own Udom0
domain. This domain creates the user VMs that perform the actual
work for the client (UdomUs). Udom0 can delegate its privileges
to service domains (SDs), which are special-purpose user domains
that can perform privileged system services on UdomUs. Clients
can leverage SDs to implement services such as memory introspec-
tion to verify VM integrity, intrusion detection, and storage encryp-
tion. In a traditional cloud, these services would be implemented in
dom0, and would have to be deployed by the cloud provider. Thus,
SSC allows clients to ﬂexibly deploy new services and control their
own VMs using SDs.
Sdom0 (System dom0) is the system-wide administrative do-
main in SSC. Sdom0 retains the privileges to start/stop Udom0 do-
mains upon request by clients, and to run drivers for virtualized de-
vices. Sdom0 manages resources, including scheduling time-slices
and I/O quotas. SSC’s privilege model disallows Sdom0 from in-
specting the state of the client’s domains (Udom0s, SDs, and Udo-
mUs), thereby ensuring the security and privacy of client VMs.
Although this privilege model allows SSC to achieve our stated
goals, in practice, cloud providers typically require some ability
to control client VMs for regulatory compliance. For example,
providers may wish to ensure that clients are not misusing their
cloud infrastructure to host malicious software [30]. To do so, the
cloud provider must have the ability to inspect client VMs, but
this may conﬂict with the client’s privacy goals. There is often
such a tension between the client’s privacy policies and the cloud
provider’s need to retain control over client VMs executing on its
platform.
SSC resolves this tension by introducing mutually-trusted ser-
vice domains (MTSDs). The cloud provider and the client mutually
agree upon policies and mechanisms that the provider will use to
control the client’s VMs. The cloud provider implements its code
in a MTSD, which runs similar to a SD, and can therefore inspect
a client’s VMs. Clients can leverage trusted computing technol-
ogy [5, 21, 24] to verify that a MTSD only runs code that was
mutually agreed-upon with the cloud provider. Clients that have
veriﬁed the trustworthiness of the platform and the MTSD can rest
assured their privacy will not be compromised. Likewise, the cloud
provider can ensure liveness of MTSDs for regulatory compliance.
Figure 1 depicts the design of SSC. We use the term meta-
domain to refer to the collection of a client’s domains (Udom0,
UdomUs, SDs, and MTSDs). Only Udom0 holds privileges over
UdomUs in its meta-domain, but can delegate speciﬁc privileges to
SDs to carryout specialized services. To bootstrap meta-domains,
SSC employs a specialized domain builder (domB) (akin to the
design of Murray et al. [33]). DomB is entrusted with the task of
HardwareHypervisorUDomUUDom0SDom0DomainBuilderUser DomainService Domain Client's Meta-DomainSecurityserviceRegulatoryComplianceMTSD254procedural controls (security guards, cameras, auditing procedures)
to ensure the physical security of the cloud infrastructure in the data
center. This is essential to prevent hardware-based attacks, such as
cold-boot attacks, against which SSC cannot defend. SSC does not
attempt to defend against denial-of-service attacks. Such attacks are
trivial to launch in a cloud environment, e.g., a malicious adminis-
trator can simply conﬁgure Sdom0 so that a client’s VMs is never
scheduled for execution, or power oﬀ the server running the VMs.
Clients can ameliorate the impact of such attacks via oﬀ-site repli-
cation. Finally, SSC does not aim to defend against subpoenas and
other judicial instruments served to the cloud provider to monitor
speciﬁc clients.
3. THE SSC PLATFORM
We now describe the design and implementation of the SSC plat-
form, focusing on the new abstractions in SSC, their operation, and
SSC’s privilege model.
3.1 Components
As Figure 1 shows, an SSC platform has a single system-wide
administrative domain (Sdom0) and a domain-building domain
(domB). Each client has its own administrative domain (Udom0),
which is the focal point of privilege and authority for a client’s
VMs. Udom0 orchestrates the creation of UdomUs to perform
client computations, and SDs, to which it delegates speciﬁc priv-