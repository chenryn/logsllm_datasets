# Self-Service Cloud Computing

## Authors
- Shakeel Butt, Rutgers University
- H. Andrés Lagar-Cavilla, GridCentric Inc.
- Abhinav Srivastava, AT&T Labs-Research
- Vinod Ganapathy, Rutgers University

## Abstract
Modern cloud computing infrastructures often rely on virtual machine monitors (VMMs) that include a large and complex administrative domain with extensive privileges to inspect client VM state. This setup can lead to security and privacy risks if the administrative domain is compromised or misused. Additionally, these VMMs provide clients with limited control over their own VMs, forcing them to depend on the cloud provider for deploying useful services such as VM introspection-based security tools.

We introduce a new self-service cloud (SSC) computing model that addresses these issues. SSC splits administrative privileges between a system-wide domain and per-client administrative domains. Each client can manage and perform privileged tasks on their own VMs, providing greater flexibility. The system-wide administrative domain cannot inspect the code, data, or computation of client VMs, ensuring security and privacy. SSC also allows providers and clients to establish mutually trusted services for regulatory compliance while respecting client privacy. We have implemented SSC by modifying the Xen hypervisor and demonstrate its utility through user domains performing tasks such as memory introspection, storage intrusion detection, and anomaly detection.

**Categories and Subject Descriptors:** D.4.6 [Operating Systems]: Security and Protection

**General Terms:** Design, Experimentation, Management, Security

**Keywords:** cloud computing, security, trust, privacy

## 1. Introduction
Modern cloud infrastructures use virtual machine monitors (VMMs) to flexibly administer and execute client virtual machines (VMs). VMMs implement a trusted computing base (TCB) that virtualizes the underlying hardware (CPU, memory, and I/O devices) and manages VMs. In commodity VMMs like Xen and Hyper-V, the TCB consists of the hypervisor and an administrative domain (dom0). The hypervisor directly controls physical hardware and runs at the highest processor privilege level, while dom0 is a privileged VM used to control and monitor client VMs. Dom0 has extensive privileges, including starting/stopping client VMs, changing their configuration, monitoring resource utilization, and performing I/O for virtualized devices.

### Challenges
1. **Security and Privacy of Client VMs:**
   - **Risk of Misuse:** Dom0's ability to inspect the state of client VMs (e.g., vCPU registers and memory) can be misused due to vulnerabilities or malicious administrators. This is a realistic threat, as dom0 typically runs a full-fledged operating system with complex configurations.
   
2. **Inflexible Control Over Client VMs:**
   - **Limited Flexibility:** Clients have little control over the deployment or configuration of services in their VMs. For example, a simple network packet inspection service may not be suitable for a client receiving encrypted packets, and deeper introspection techniques (e.g., rootkit detection) cannot be deployed by the client without relying on the cloud provider.

### Existing Solutions
Recent work has explored nested virtualization to address these challenges. Projects like CloudVisor and XenBlanket use nesting to protect client VMs from untrusted dom0 and allow clients to implement their own services. However, these solutions do not address both security/privacy and inflexible control simultaneously. Nested virtualization also introduces significant performance overheads, making it impractical for many clients.

### Our Approach
We propose a new Self-Service Cloud (SSC) Computing model that addresses both security/privacy and inflexible control without relying on nested virtualization. SSC introduces a novel privilege model that reduces the power of the administrative domain and gives clients more flexible control over their VMs. SSC splits the responsibilities traditionally held by dom0 between a system-wide administrative domain (Sdom0) and per-user administrative domains (Udom0), service domains (SDs), and mutually-trusted service domains (MTSDs).

- **User dom0 (Udom0):** A per-user administrative domain that can monitor and control a set of VMs for a specific client.
- **System dom0 (Sdom0):** The system-wide administrative domain that retains privileges to start/stop Udom0 domains and manage resources but cannot inspect client VM states.
- **Service Domains (SDs):** Special-purpose user domains that can perform privileged system tasks on client VMs, allowing clients to deploy custom services.
- **Mutually-Trusted Service Domains (MTSDs):** Domains that execute privileged services agreed upon by the cloud provider and the client, balancing the need for regulatory compliance with client privacy.

We have implemented SSC by modifying the Xen hypervisor (v3.4.0) and demonstrate its utility through case studies showing SDs implementing various system services. The main contributions of this paper are:
- The SSC model, which provides a new privilege model addressing both security/privacy and inflexible control without nested virtualization.
- Service domains (SDs) that allow clients to perform privileged tasks on their VMs, providing greater flexibility.
- Mutually-trusted service domains (MTSDs) that balance regulatory compliance with client privacy.

## 2. Threat Model
SSC's threat model differentiates between cloud service providers and cloud system administrators. Cloud providers, such as Amazon EC2 and Microsoft Azure, have a vested interest in protecting their reputations. Cloud system administrators, however, are individuals with access to dom0 and its privileges, and they are assumed to be adversarial or prone to mistakes.

- **Protection Mechanisms:**
  - **Memory and vCPU State:** SSC prevents Sdom0 from accessing the memory contents and vCPU state of client VMs, protecting in-memory data and encryption keys.
  - **Network and Storage:** While SSC does not prevent administrators from snooping on network traffic or persistent storage, security-conscious clients can use end-to-end encryption to protect their data.
  - **Trust Assumptions:** SSC assumes the cloud service provider is trusted and must supply a TCB running an SSC-compliant VMM. Physical hardware should be equipped with an IOMMU and a Trusted Platform Module (TPM) chip to provide cryptographic guarantees about the software stack.

## 3. The SSC Platform
### 3.1 Components
As shown in Figure 1, the SSC platform includes:
- **System-Wide Administrative Domain (Sdom0):** Manages resources and starts/stops Udom0 domains but cannot inspect client VM states.
- **Domain-Building Domain (DomB):** Responsible for bootstrapping meta-domains.
- **Per-User Administrative Domain (Udom0):** The focal point of privilege and authority for a client’s VMs. Udom0 creates and manages user VMs (UdomUs) and delegates privileges to service domains (SDs).
- **Service Domains (SDs):** Perform privileged system tasks on UdomUs, allowing clients to deploy custom services.
- **Mutually-Trusted Service Domains (MTSDs):** Execute services agreed upon by the cloud provider and the client, ensuring regulatory compliance while respecting client privacy.

Figure 1 illustrates the design of the SSC platform, highlighting the separation of system-level and client-level TCBs and the roles of each component.

## 4. Conclusion
The Self-Service Cloud (SSC) computing model addresses the key challenges of security/privacy and inflexible control in modern cloud infrastructures. By introducing a novel privilege model and leveraging service domains, SSC provides clients with greater control over their VMs while ensuring their security and privacy. Our implementation and case studies demonstrate the practical benefits of SSC, making it a promising approach for enhancing cloud computing environments.