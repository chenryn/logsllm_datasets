[root@study ~]# grub2-mkconfig -o /boot/grub2/grub.cfg
另外，如果每次都想要让 windows 变成默认的开机选项，那么在 /etc/default/grub 当中设置好“
GRUB_DEFAULT=win7 ” 然后再次 grub2-mkconfig 这样即可啦！不要去算 menuentry 的顺序喔！通过 --id 内容来处
理即可！
我们在本章稍早之前“ boot loader 与 kernel 载入”的地方已经提到过 initramfs 这玩意儿，他的目的在于提供开机过程中所需要的最重要
核心模块，以让系统开机过程可以顺利完成。 会需要 initramfs 的原因，是因为核心模块放置于 /lib/modules/$（uname -r）/kernel/ 当中， 这些
模块必须要根目录 （/） 被挂载时才能够被读取。但是如果核心本身不具备磁盘的驱动程序时， 当然无法挂载根目录，也就没有办法取得驱动
程序，因此造成两难的地步。
initramfs 可以将 /lib/modules/.... 内的“开机过程当中一定需要的模块”包成一个文件 （文件名就是 initramfs）， 然后在开机时通过主机的
INT 13 硬件功能将该文件读出来解压缩，并且 initramfs 在内存内会仿真成为根目录， 由于此虚拟文件系统 （Initial RAM Disk） 主要包含磁盘
与文件系统的模块，因此我们的核心最后就能够认识实际的磁盘， 那就能够进行实际根目录的挂载啦！所以说：“initramfs 内所包含的模块大
多是与开机过程有关，而主要以文件系统及硬盘模块 （如 usb, SCSI 等） 为主”的啦！
一般来说，需要 initramfs 的时刻为：
根目录所在磁盘为 SATA、USB 或 SCSI 等连接接口；
根目录所在文件系统为 LVM, RAID 等特殊格式；
根目录所在文件系统为非传统 Linux 认识的文件系统时；
其他必须要在核心载入时提供的模块。
Tips
之前鸟哥忽略 initrd 这个文件的重要性，是因为鸟哥很穷... ^_^。因为鸟哥的 Linux 主机都是较早期的硬件， 使用的是 IDE 接口的硬
盘，而且并没有使用 LVM 等特殊格式的文件系统，而 Linux 核心本身就认识 IDE 接口的磁盘， 因此不需要 initramfs 也可以顺利开机完成的。自从
SATA 硬盘流行起来后，没有 initramfs 就没办法开机了！ 因为 SATA 硬盘使用的是 SCSI 模块来驱动的，而 Linux 默认将 SCSI 功能编译成为模
块....
一般来说，各 distribution 提供的核心都会附上 initramfs 文件，但如果你有特殊需要所以想重制 initramfs 文件的话， 可以使用 dracut /
mkinitrd 来处理的。这个文件的处理方式很简单， man dracut 或 man mkinitrd 就知道了！ ^_^。 CentOS 7 应该要使用 dracut 才对，不过
mkinitrd 还是有保留下来，两者随便你玩！鸟哥这里主要是介绍 dracut 就是了！
[root@study ~]# dracut [-fv] [--add-drivers 列列表表] initramfs文文件件名名 核核心心版版本本
选项与参数：
-f ：强迫编译出 initramfs ，如果 initramfs 文件已经存在，则覆盖掉旧文件
-f ：显示 dracut 的运行过程
--add-drivers 列表：在原本的默认核心模块中，增加某些你想要的模块！模块位于核心所在目录
/lib/modules/$（uname -r）/kernel/*
initramfs文件名 ：就是你需要的文件名！开头最好就是 initramfs，后面接版本与功能
核心版本 ：默认当然是目前运行中的核心版本，不过你也可以手动输入其他不同版本！
其实 dracut 还有很多功能，例如下面的几个参数也可以参考看看：
--modules ：将 dracut 所提供的开机所需模块 （核心核模块） 载入，可用模块在下面的目录内
/usr/lib/dracut/modules.d/
--gzip|--bzip2|--xz：尝试使用哪一种压缩方式来进行 initramfs 压缩。默认使用 gzip 喔！
--filesystems ：加入某些额外的文件系统支持！
范例一：以 dracut 的默认功能创建一个 initramfs 虚拟磁盘文件
[root@study ~]# dracut -v initramfs-test.img $（（uname -r））
Executing: /sbin/dracut -v initramfs-test.img 3.10.0-229.el7.x86_64
*** Including module: bash *** # 先载入 dracut 本身的模块支持
*** Including module: nss-softokn ***
*** Including modules done ***
.....（中间省略）..... # 下面两行在处理核心模块
*** Installing kernel module dependencies and firmware ***
*** Installing kernel module dependencies and firmware done ***
.....（中间省略）.....
*** Generating early-microcode cpio image *** # 创建微指令集
*** Constructing GenuineIntel.bin ****
*** Store current command line parameters ***
*** Creating image file *** # 开始创建 initramfs 啰！
*** Creating image file done ***
范例二：额外加入 e1000e 网卡驱动与 ext4/nfs 文件系统在新的 initramfs 内
[root@study ~]# dracut -v --add-drivers "e1000e" --filesystems "ext4 nfs" \
> initramfs-new.img $（（uname -r））
[root@study ~]# lsinitrd initramfs-new.img | grep -E '（（e1000|ext4|nfs））'
usr/lib/modules/3.10.0-229.el7.x86_64/kernel/drivers/net/ethernet/intel/e1000e
usr/lib/modules/3.10.0-229.el7.x86_64/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko
usr/lib/modules/3.10.0-229.el7.x86_64/kernel/fs/ext4
usr/lib/modules/3.10.0-229.el7.x86_64/kernel/fs/ext4/ext4.ko
usr/lib/modules/3.10.0-229.el7.x86_64/kernel/fs/nfs
usr/lib/modules/3.10.0-229.el7.x86_64/kernel/fs/nfs/nfs.ko
# 你可以看得到，新增的模块现在正在新的 initramfs 当中了呢！很愉快喔！
initramfs 创建完成之后，同时核心也处理完毕后，我们就可以使用 grub2 来创建菜单了！下面继续瞧一瞧吧！
如果你的 Linux 主机本来就是使用 grub2 作为 loader 的话，那么你就不需要重新安装 grub2 了， 因为 grub2 本来就会主动去读取配置文
件啊！您说是吧！但如果你的 Linux 原来使用的并非 grub2 ， 那么就需要来安装啦！如何安装呢？首先，你必须要使用 grub-install 将一些必要
的文件复制到 /boot/grub2 里面去，你应该这样做的：
[root@study ~]# grub2-install [--boot-directory=DIR] INSTALL_DEVICE
选项与参数：
--boot-directory=DIR 那个 DIR 为实际的目录，使用 grub2-install 默认会将
grub2 所有的文件都复制到 /boot/grub2/* ，如果想要复制到其他目录与设备去，
就得要用这个参数。
INSTALL_DEVICE 安装的设备代号啦！
范例一：将 grub2 安装在目前系统的 MBR 下面，我的系统为 /dev/vda：
[root@study ~]# grub2-install /dev/vda
# 因为原本 /dev/vda 就是使用 grub2 ，所以似乎不会出现什么特别的讯息。
# 如果去查阅一下 /boot/grub2 的内容，会发现所有的文件都更新了，因为我们重装了！
# 但是注意到，我们并没有配置文件喔！那要自己创建！
基本上，grub2-install 大概仅能安装 grub2 主程序与相关软件到 /boot/grub2/ 那个目录去，如果后面的设备填的是整个系统 （/dev/vda,
/dev/sda...）， 那 loader 的程序才会写入到 MBR 里面去。如果是 XFS 文件系统的 /dev/vda2 设备的话 （个别 partition），那 grub2-install 就
会告诉你， 该文件系统并不支持 grub2 的安装喔！也就是你不能用 grub2-install 将你的主程序写入到 boot sector 里头去的意思啦！ 那怎办？
没关系，来强迫写入一下看看！
# 尝试看一下你的系统中有没有其他的 xfs 文件系统，且为传统的 partition 类型？
[root@study ~]# df -T |grep -i xfs
/dev/mapper/centos-root xfs 10475520 4128728 6346792 40% /
/dev/mapper/centos-home xfs 5232640 665544 4567096 13% /home
/dev/mapper/raidvg-raidlv xfs 1558528 33056 1525472 3% /srv/raidlvm
/dev/vda2 xfs 1038336 144152 894184 14% /boot
/dev/vda4 xfs 1038336 63088 975248 7% /srv/myproject
# 看起来仅有 /dev/vda4 比较适合做个练习的模样了！来瞧瞧先！
# 将 grub2 的主程序安装到 /dev/vda4 去看看！
[root@study ~]# grub2-install /dev/vda4
Installing for i386-pc platform.
grub2-install: error: hostdisk//dev/vda appears to contain a xfs filesystem which isn't
known to reserve space for DOS-style boot. Installing GRUB there could result in
FILESYSTEM DESTRUCTION if valuable data is overwritten by grub-setup （--skip-fs-probe
disables this check, use at your own risk）.
# 说是 xfs 恐怕不能支持你的 boot sector 概念！这个应该是误判！所以我们还是给它强制装一下！
[root@study ~]# grub2-install --skip-fs-probe /dev/vda4
Installing for i386-pc platform.
grub2-install: warning: File system ‘xfs’ doesn't support embedding.
grub2-install: warning: Embedding is not possible. GRUB can only be installed in this
setup by using blocklists. However, blocklists are UNRELIABLE and their use is
discouraged..
grub2-install: error: will not proceed with blocklists.
# 还是失败！因为还是担心 xfs 被搞死～好！没问题！加个 --force 与 --recheck 重新处理一遍！
[root@study ~]# grub2-install --force --recheck --skip-fs-probe /dev/vda4
Installing for i386-pc platform.
grub2-install: warning: File system ‘xfs’ doesn't support embedding.
grub2-install: warning: Embedding is not possible. GRUB can only be installed in this
setup by using blocklists. However, blocklists are UNRELIABLE and their use is
discouraged..
Installation finished. No error reported.
# 注意看！原本是无法安装的错误，现在仅有 warning 警告讯息，所以这样就安装到 partition 上了！
上面这样就将 grub2 的主程序安装到 /dev/vda4 以及重新安装到 MBR 里面去了。现在来思考一下，我们知道 grub2 主程序会去找
grub.cfg 这个文件，大多是在 /boot/grub2/grub.cfg 里面，那有趣了，我们的 MBR 与 /dev/vda4 都是到 /boot/grub2/grub.cfg 去抓设置吗？ 如果
是多重操作系统那怎办？呵呵！这就需要重新进入新系统才能够安装啦！举个例子来说啰：
问：
假设你的测试系统上面使用 MBR 分区，并且出现如下的数据：
[root@study ~]# fdisk -l /dev/vda
Device Boot Start End Blocks Id System
/dev/vda1 2048 10487807 5242880 83 Linux
/dev/vda2 * 10487808 178259967 83886080 7 HPFS/NTFS/exFAT
/dev/vda3 178259968 241174527 31457280 83 Linux
其中 /dev/vda1, /dev/vda3 是两个 CentOS 7 系统，而 /dev/vda2 则是 windows 7 系统。安装的流程是依序 /dev/vda1 -->
/dev/vda2 --> /dev/vda3。因此，安装好而且重新开机后，系统其实是默认进入 /dev/vda3 这个 CentOS 7 的系统的。 此时 MBR
会去读取的配置文件在 （/dev/vda3）/boot/grub2/grub.cfg 才对。
因为 /dev/vda1 应该是用来管理开机菜单的，而 /dev/vda2 及 /dev/vda3 在规划中就是用来让学生操作的，因此默认情况下，
/dev/vda1 内的 CentOS 系统应该只会在开机的时候用到而已，或者是出问题时会找他来使用。至于 /dev/vda3 及 /dev/vda2 则
可能因为学生的误用， 因此未来可能会升级或删除或重灌等。那你如何让系统永远都是使用 /dev/vda1 开机呢？