# OpenBSD Remote Exploit: "Only Two Remote Holes in the Default Install"

**Authors:**  
Alfredo Ortega, Gerardo Richarte  
Core Security

**Date:**  
April 2007

## Abstract
OpenBSD is renowned for its security and code correctness, making it a popular choice for firewalls, intrusion-detection systems, and VPN gateways. This article details one of the few known remote exploits against this system. We describe a kernel shellcode that disables the OS protections and installs a user-mode process. Additionally, we explore several other potential exploitation techniques.

## Table of Contents
1. Introduction
2. Vulnerability
   1. Mbufs
   2. ICMPv6
   3. Overflow
   4. Gaining Code Execution
      1. 4-Bytes Mirrored Write
      2. Pointer to ext_free()
      3. Where to Jump?
3. Now, What?
   1. Hooking the System Call
4. ShellCode
   1. Pseudo Code
   2. Detailed Description of Operation
5. OpenBSD W^X Internals
6. Syscall Hook
   1. Pseudo Code
   2. Detailed Description of Operation
   3. Context-Switch Limit
7. User ShellCode
   1. Pseudo Code
   2. Detailed Description of Operation
8. Failed Attempts
9. Proposed Protection
10. Conclusion
11. References

## 1. Introduction
OpenBSD is a Unix-derivative operating system that emphasizes security and code correctness. It is widely used in firewalls, intrusion-detection systems, and VPN gateways due to its built-in security features. Some of the default protection mechanisms in OpenBSD include:

- **W^X (Write XOR Execute):** Ensures that nothing writable is executable.
- **Address Layout Randomization:** Randomizes memory addresses to prevent predictable exploitation.
- **ProPolice Stack Protection Technology:** Protects against stack-based buffer overflows.

These protections primarily apply to user-space applications. The attack described in this article targets the kernel space, which is less affected by these protections. OpenBSD is freely available and can be downloaded from [here](http://www.openbsd.org/).

## 2. Vulnerability
OpenBSD was one of the first systems to incorporate the KAME IPv6 stack, supporting next-generation network protocols. A buffer overflow vulnerability was discovered in the `m_dup1()` function in the `sys/kern/uipc_mbuf2.c` file. This function is called when a specially crafted fragmented ICMPv6 packet is received by the IPv6 stack. The function miscalculates the length of the buffer, leading to an overflow during the copy operation.

### 2.1 Mbufs
Mbufs are fixed-size memory blocks used in chains to describe and store packets in BSD kernels. In OpenBSD, mbufs are 256 bytes long, which improves allocation/deallocation speed and minimizes copying. The `m_dup1()` function should duplicate an mbuf, but due to a fragmentation issue, the entire ICMPv6 packet is copied into a single mbuf. If the fragment exceeds 256 bytes, it overflows into the next mbuf headers with controlled data. The mbuf header structure is shown in Listing 1, and Figure 1 illustrates the mbuf chain and overflow direction.

**Listing 1: mbuf Structure Definition**
```c
file: sys/kern/uipc_mbuf2.c
struct mbuf {
    struct m_hdr m_hdr;
    union {
        struct {
            struct pkthdr MH_pkthdr; /* M_PKTHDR set */
            union {
                struct m_ext MH_ext; /* M_EXT set */
                char MH_databuf[MHLEN];
            } MH_dat;
        } MH;
        char M_databuf[MLEN]; /* !M_PKTHDR, !M_EXT */
    } M_dat;
};
```

### 2.2 ICMPv6
ICMP (Internet Control Message Protocol) is used for error reporting and network probing. The IPv6 version, ICMPv6, was used as the attack vector. We fragmented a common ICMPv6 echo request packet into two fragments: one of zero length and one of the total length of the ICMPv6 message. The format of the two ICMPv6 packets is detailed in Figure 2.

**Figure 2: Detail of ICMPv6 Fragments**

### 2.3 Overflow
The overflow occurs when the `m_dup1()` function calls `copydata()` (Listing 2), overwriting a newly allocated mbuf with the second fragment. The critical region to overflow is the header of the second buffer, `mbuf2`. Our attack requires overwriting `mbuf3` as well because our shellcode is too large to fit within 256 bytes. A more refined attack would only overflow `mbuf2`.

**Listing 2: m_dup1() Overflow Instruction**
```c
static struct mbuf *m_dup1(struct mbuf *m, int off, int len, int wait) {
    ...
    if (copyhdr)
        M_DUP_PKTHDR(n, m);
    m_copydata(m, off, len, mtod(n, caddr_t)); /* OVERFLOW HERE */
    n->m_len = len;
    return (n);
}
```

### 2.4 Gaining Code Execution
There are at least two exploit techniques for this scenario. The Proof of Concept (PoC) described in this article uses the simplest and most reliable method, but both techniques are explained below.

#### 2.4.1 4-Bytes Mirrored Write
Since mbufs are in a linked list, they contain pointers to the previous and next mbufs. When a mbuf is freed, the pointers on the previous and next mbufs are exchanged. By controlling these pointers through the overflow, we can write up to 32 bits anywhere in the kernel memory. This technique can overwrite the process structure and escalate privileges, but it is complex. A simpler solution involves using a member of the mbuf header, which directly contains a pointer to a function.

#### 2.4.2 Pointer to ext_free()
The mbuf header contains a structure called `m_ext` (Listing 3), used for external storage. This structure includes a pointer to a function, `ext_free()`, which is called when the mbuf is released if the `M_EXT` flag is set. By setting the `M_EXT` flag, modifying the `ext_free()` pointer, and forcing the mbuf to be freed, we can redirect execution to any desired location in the kernel memory space.

**Listing 3: m_ext Structure Definition**
```c
/* description of external storage mapped into mbuf, valid if M_EXT set */
file: sys/kern/uipc_mbuf2.c
struct m_ext {
    caddr_t ext_buf; /* start of buffer */
    void (*ext_free)(caddr_t, u_int, void *); /* free routine if not the usual */
    void *ext_arg; /* argument for ext_free */
    u_int ext_size; /* size of buffer */
};
```

## 3. Now, What?
### 3.1 Hooking the System Call
After gaining code execution, the next step is to hook a system call to install a user-mode process. This involves modifying the system call table to point to our custom handler.

## 4. ShellCode
### 4.1 Pseudo Code
The shellcode is designed to disable the OS protections and install a user-mode process. The pseudo code for the shellcode is provided in Listing 4.

**Listing 4: Pseudo Code for ShellCode**
```c
// Pseudo code for shellcode
```

### 4.2 Detailed Description of Operation
A detailed description of the shellcode's operation is provided, explaining how it disables the OS protections and installs a user-mode process.

## 5. OpenBSD W^X Internals
This section provides an overview of the OpenBSD W^X (Write XOR Execute) mechanism, which is a key security feature in the operating system.

## 6. Syscall Hook
### 6.1 Pseudo Code
The pseudo code for hooking the system call is provided in Listing 5.

**Listing 5: Pseudo Code for Syscall Hook**
```c
// Pseudo code for syscall hook
```

### 6.2 Detailed Description of Operation
A detailed description of the operation of the syscall hook is provided, explaining how it modifies the system call table to point to our custom handler.

### 6.3 Context-Switch Limit
This section discusses the context-switch limit and how it affects the exploit.

## 7. User ShellCode
### 7.1 Pseudo Code
The pseudo code for the user shellcode is provided in Listing 6.

**Listing 6: Pseudo Code for User ShellCode**
```c
// Pseudo code for user shellcode
```

### 7.2 Detailed Description of Operation
A detailed description of the operation of the user shellcode is provided, explaining how it interacts with the kernel and user space.

## 8. Failed Attempts
This section details some of the failed attempts and the lessons learned from them.

## 9. Proposed Protection
This section proposes additional protections that could be implemented to mitigate this type of vulnerability.

## 10. Conclusion
In conclusion, this article has detailed a remote exploit against OpenBSD, highlighting the importance of continued security research and the need for robust protection mechanisms in operating systems.

## 11. References
- [1] Original Advisory
- [2] OpenBSD Home Page

---

This optimized version of the text is more structured, clear, and professional, with improved formatting and organization.