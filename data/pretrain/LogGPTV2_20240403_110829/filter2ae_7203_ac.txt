    89a29c58  8988e010
    89a29c5c  89aedc30
    89a29c60  89a7d898
    89a29c64  0001ffff
其中`srv!SrvGlobalSpinLocks+0x3c` 就是所谓的 SRV global data pointer ：b76d8bec
##### 5.1.1.4 Locating function tables
    kd> dds b76d8bec-0x654
    b76d8598  b7709683 srv!SrvSmbOpen2
    b76d859c  b76f62a8 srv!SrvSmbFindFirst2
    b76d85a0  b76f74e5 srv!SrvSmbFindNext2
    b76d85a4  b76f6309 srv!SrvSmbQueryFsInformation
    b76d85a8  b7707293 srv!SrvSmbSetFsInformation
    b76d85ac  b77041ad srv!SrvSmbQueryPathInformation
    b76d85b0  b7703ce7 srv!SrvSmbSetPathInformation
    b76d85b4  b77025ad srv!SrvSmbQueryFileInformation
    b76d85b8  b770367f srv!SrvSmbSetFileInformation
    b76d85bc  b7705c85 srv!SrvSmbFsctl
    b76d85c0  b7706419 srv!SrvSmbIoctl2
    b76d85c4  b7705c85 srv!SrvSmbFsctl
    b76d85c8  b7705c85 srv!SrvSmbFsctl
    b76d85cc  b77047bb srv!SrvSmbCreateDirectory2
    b76d85d0  b7709a51 srv!SrvTransactionNotImplemented
    b76d85d4  b7709a51 srv!SrvTransactionNotImplemented
    b76d85d8  b76fb144 srv!SrvSmbGetDfsReferral
    b76d85dc  b76faf7e srv!SrvSmbReportDfsInconsistency
    b76d85e0  00000000
#### 5.1.2 泄露Npp Buffer (shellcode buffer)
这里又得回到`ExecuteTransaction`函数：
    SMB_STATUS SRVFASTCALL ExecuteTransaction (
        IN OUT PWORK_CONTEXT WorkContext)
    {
        //...
        header = WorkContext->ResponseHeader;
        response = (PRESP_TRANSACTION)WorkContext->ResponseParameters;
        ntResponse = (PRESP_NT_TRANSACTION)WorkContext->ResponseParameters;
        //
        // Setup output pointers
        //
        if ( transaction->OutParameters == NULL ) {
            //
            // Parameters will go into the SMB buffer.  Calculate the pointer
            // then round it up to the next DWORD address.
            //
            transaction->OutParameters = (PCHAR)(transaction->OutSetup +
                transaction->MaxSetupCount);
            offset = (transaction->OutParameters - (PCHAR)header + 3) & ~3;
            transaction->OutParameters = (PCHAR)header + offset;
        }
        if ( transaction->OutData == NULL ) {
            //
            // Data will go into the SMB buffer.  Calculate the pointer
            // then round it up to the next DWORD address.
            //
            transaction->OutData = transaction->OutParameters +
                transaction->MaxParameterCount;
            offset = (transaction->OutData - (PCHAR)header + 3) & ~3;
            transaction->OutData = (PCHAR)header + offset;
        }
                //...
                command = SmbGetUshort(&transaction->InSetup[0]);
                //...
                switch( command ) {
                case TRANS_TRANSACT_NMPIPE:
                    resultStatus = SrvTransactNamedPipe( WorkContext );
                    break;
                case TRANS_PEEK_NMPIPE:
                    resultStatus = SrvPeekNamedPipe( WorkContext );
                    break;
                //...
    }
这在这个函数里有这么一个逻辑，当`transaction->OutParameters==NULL`里，会将`PWORK\_CONTEXT->ResponseHeader`加上一定的offset赋于它，`PWORK_CONTEXT->ResponseHeader`就是个NonePagedPool.
    kd> ub eip
    srv!ExecuteTransaction+0x60:
    b76e8d05 46              inc     esi
    b76e8d06 50              push    eax
    b76e8d07 d1e0            shl     eax,1
    b76e8d09 2bc2            sub     eax,edx
    b76e8d0b 8d440803        lea     eax,[eax+ecx+3]
    b76e8d0f 83e0fc          and     eax,0FFFFFFFCh
    b76e8d12 03c2            add     eax,edx
    b76e8d14 894640          mov     dword ptr [esi+40h],eax
    kd> dd 5ace0
    0005ace0  109c020c 00000000 89b2c948 89a29c18
    0005acf0  e1ed9900 e15e2960 0005bda0 00059c50
    0005ad00  00020000 0005ad78 00002361 40010036
    0005ad10  00000000 0005ad0c 8993fa25 0005ad7c
    0005ad20  8993fa28 0005ad7c b76d84ec 00000004
    0005ad30  00000000 00000000 00000000 00000010
    0005ad40  00000000 00000000 00000100 00000000
    0005ad50  00000101 08000000 0800cee6 0000004b
    kd> ? esi+0x40
    Evaluate expression: 372000 = 0005ad20
    kd> r eax
    eax=8993fa28
##### 5.1.2.1 transaction->OutParameters=NULL
Transaction 初始状态下`OutParameters`并不为NULL：
    kd> dd 5ace0
    0005ace0  109c020c 00000000 89b2c948 89a29c18
    0005acf0  e1ed9900 e15e2960 0005bda0 00059c50
    0005ad00  00020000 0005ad78 00002361 00000001
    0005ad10  00000000 0005ad7c 00000000 0005ad7c
    0005ad20  0005adbc 0005ad7c 0005bd7c 00000000
    0005ad30  00000000 00000000 00000000 00000fc0
    0005ad40  00000000 00000040 00000000 00000000
    0005ad50  00000101 08000000 0800cee6 0000004b
这里通过`write_transaction`越界 写 `leak_transaction->OutParameters`为NULL,
然后发包触发写`leak_transaction`操作，之后`leak_transaction->OutParameters`便为一 Npp
Buffer值了。
##### 5.1.2.2 leak_transaction->OutData = &leak_transaction->OutParameters
这里要事先泄露leak_transaction的基址，其实也不难，通过读leak_transaction的OutData 或 OutParameters 或
InData 字段的值再减去一定的偏移便得到了基址，使`leak_transaction->OutData =
&leak_transaction->OutParameters`之后，发包触发leak_transaction读操作便将该Npp
buffer地址泄露出来了。
##### 5.1.2.3 写shellcode到Npp Buffer
将`control_transaction->OutData`设为`Npp
Buffer+0x100`地址，然后发包发送shellcode，便将shellcode写到了`Npp Buffer+0x100`内。
### 5.2 代码执行
至此，直接将Npp buffer+0x100写到之前泄露出来的函数表里
    kd> dds b76d8598
    b76d8598  b7709683 srv!SrvSmbOpen2
    b76d859c  b76f62a8 srv!SrvSmbFindFirst2
    b76d85a0  b76f74e5 srv!SrvSmbFindNext2
    b76d85a4  b76f6309 srv!SrvSmbQueryFsInformation
    b76d85a8  b7707293 srv!SrvSmbSetFsInformation
    b76d85ac  b77041ad srv!SrvSmbQueryPathInformation
    b76d85b0  b7703ce7 srv!SrvSmbSetPathInformation
    b76d85b4  b77025ad srv!SrvSmbQueryFileInformation
    b76d85b8  b770367f srv!SrvSmbSetFileInformation
    b76d85bc  b7705c85 srv!SrvSmbFsctl
    b76d85c0  b7706419 srv!SrvSmbIoctl2
    b76d85c4  b7705c85 srv!SrvSmbFsctl
    b76d85c8  b7705c85 srv!SrvSmbFsctl
    b76d85cc  b77047bb srv!SrvSmbCreateDirectory2
    b76d85d0  8993fb28
    b76d85d4  b7709a51 srv!SrvTransactionNotImplemented
    b76d85d8  b76fb144 srv!SrvSmbGetDfsReferral
    b76d85dc  b76faf7e srv!SrvSmbReportDfsInconsistency
    b76d85e0  00000000
之后发包就能触发该函数调用：
    kd> k
     # ChildEBP RetAddr  
    WARNING: Frame IP not in any known module. Following frames may be wrong.
    00 b72b4cf0 b76e8d76 0x8993fb28
    01 b72b4d04 b76e341f srv!ExecuteTransaction+0xdb
    02 b72b4d7c b76ca836 srv!SrvSmbTransaction+0x7ac
    03 b72b4d88 b76dad98 srv!SrvProcessSmb+0xb7
    04 b72b4dac 805c6160 srv!WorkerThread+0x11e
    05 b72b4ddc 80541dd2 nt!PspSystemThreadStartup+0x34
    06 00000000 00000000 nt!KiThreadStartup+0x16
## 6 关于补丁
了解了漏洞原理之后修补都很简单了。只要在`srv!SrvFindTransaction`里面判断一下SMB COMMAND的类型是否一致就好了。 修补前
    TRANSCATION *__fastcall SrvFindTransaction(int pConnect, SMB_HEADER *Fid, __int16 a3)
    {
      _DWORD **pTransList; // eax@4
      _DWORD *v6; // ebx@4
      PDEVICE_OBJECT v7; // ecx@5
      TRANSCATION *pTransaction; // esi@6
      char Command_Trans; // al@10
      char Command_header; // dl@10
      __int16 MIDorFID; // [sp+Ch] [bp-Ch]@2
      struct _ERESOURCE *Resource; // [sp+14h] [bp-4h]@4
      if ( Fid->Command == 0x2F )
        MIDorFID = a3;
      else
        MIDorFID = Fid->MID;
      Resource = (struct _ERESOURCE *)(pConnect + 0x19C);
      ExAcquireResourceExclusiveLite((PERESOURCE)(pConnect + 0x19C), 1u);
      pTransList = (_DWORD **)(*(_DWORD *)(pConnect + 0x160) + 8);
      v6 = *pTransList;
      if ( *pTransList == pTransList )
        goto LABEL_14;
      v7 = WPP_GLOBAL_Control;
      while ( 1 )
      {
        pTransaction = (TRANSCATION *)(v6 - 6);
        if ( *((_WORD *)v6 + 49) == Fid->TID
          && pTransaction->PID == Fid->PID
          && pTransaction->UID == Fid->UID
          && pTransaction->MID == MIDorFID )
        {
          break;
        }
    LABEL_13:
        v6 = (_DWORD *)*v6;
        if ( v6 == (_DWORD *)(*(_DWORD *)(pConnect + 0x160) + 8) )
          goto LABEL_14;
      }
      //
      // 这里添加了对COMMAND的比较。比较pTransaction和请求中SMB\_HEADER中的COMMAND进行对比
      //
      Command_Trans = pTransaction->Command;
      Command_header = Fid->Command;
      if ( Command_Trans != Command_header )
      {
        if ( (PDEVICE_OBJECT *)v7 != &WPP_GLOBAL_Control )
        {
          WPP_SF_qDD(v7->AttachedDevice, v7->CurrentIrp, (_BYTE)v6 - 24, Command_header, Command_Trans);
          v7 = WPP_GLOBAL_Control;
        }
        goto LABEL_13;
      }
      if ( BYTE1(pTransaction->field_0) == 2 )
      {
        _InterlockedIncrement((volatile signed __int32 *)(pTransaction->field_8 + 4));
        goto LABEL_15;
      }
    LABEL_14:
      pTransaction = 0;
    LABEL_15:
      ExReleaseResourceLite(Resource);
      return pTransaction;
    }
补丁点就是`if ( Command_Trans != Command_header )`看注释的地方。
## 7 总结
总之，这个漏洞还是非常好的，远程任意地址写，还可以信息泄露。威力很大。
## 8 联系作者
[pgboy 微博](http://weibo.com/pgboy1988)  
[zhong_sf 微博](http://weibo.com/2641521260)
如果你感觉排版不舒服可以去[这里](https://github.com/progmboy/vul_analyze_doc)下载原始的markdown文件。
* * *