207
Secure coding 
recommendations 
211
Self-protection mechanism 
212
Plan your code securely 
212
Do not use old code 
212
Input validation 
212
PoLP (Principle of Least Privilege) 
213
Compiler warnings 
213
Automated code testing 
213
Wait mechanisms – preventing race 
conditions 
213
Integrity validation 
213
Summary 
214
Why subscribe? 
215
Other Books You May Enjoy
Index
Preface
This book was created based on 2 and a half years of researching different kinds of 
antivirus software.
Our goal was to actually understand and evaluate which, and how much, antivirus 
software provides good endpoint protection. We saw in our research a lot of interesting 
patterns and behaviors regarding antivirus software, how antivirus software is built, its 
inner workings, and its detection or lack of detection rates.
As human beings and creators, we create beautiful and smart things, with a lot of 
intelligence behind us, but as we already know, the fact – the hard fact – is that there is no 
such thing as perfect, and antivirus software is included in that. As we as humans develop, 
evolve, learn from our mistakes, try, fail, and eventually succeed with the ambition of 
achieving perfection, so we believe that antivirus software and other protection systems 
need to be designed in a way that they can adapt, learn, and evolve against ever-growing 
cyber threats.
This is why we created this book, where you will understand the importance of growing 
from self-learning, by accepting the truth that there is no 100-percent-bulletproof security 
solutions and the fact that there will always be something to humbly learn from, develop, 
and evolve in order to provide the best security solution, such as antivirus software.
By showing you how antivirus software can be bypassed, you can learn a lot about it, 
from it, and also make it better, whether it is by securing it at the code level against 
vulnerability-based bypasses or by writing better detections in order to prevent detection-
based antivirus bypasses as much as possible.
While reading our book, you will see cases where we bypassed a lot of antivirus software, 
but in fact, this does not necessarily suggest that the bypassed antivirus software is not 
good, and we do not give any recommendations for any specific antivirus software in this 
book. 
xii     Preface
Who this book is for
This book is aimed at security researchers, malware analysts, reverse engineers, 
penetration testers, antivirus vendors who are interested in strengthening their detection 
capabilities, antivirus users, companies who want to test and evaluate their antivirus 
software, organizations that want to test and evaluate their antivirus software before 
purchase or acquisition, and other technology-oriented individuals who want to learn 
about new topics.
What this book covers
Chapter 1, Introduction to the Security Landscape, introduces you to the security 
landscape, the types of malware, the protection systems, and the basics of antivirus 
software.
Chapter 2, Before Research Begins, teaches you how to gather antivirus research leads with 
well-known dynamic malware analysis tools in order to bypass antivirus software.
Chapter 3, Antivirus Research Approaches, introduces you to the antivirus bypass 
approaches of vulnerability-based antivirus bypass and detection-based antivirus bypass.
Chapter 4, Bypassing the Dynamic Engine, demonstrates the three antivirus dynamic 
engine bypass techniques of process injection, dynamic link library, and timing-based 
bypass.
Chapter 5, Bypassing the Static Engine, demonstrates the three antivirus static engine 
bypass techniques of obfuscation, encryption, and packing.
Chapter 6, Other Antivirus Bypass Techniques, demonstrates more antivirus bypass 
techniques – binary patching, junk code, the use of PowerShell to bypass antivirus 
software, and using a single malicious functionality.  
Chapter 7, Antivirus Bypass Techniques in Red Team Operations, introduces you to 
antivirus bypass techniques in real life, what the differences between penetration testing 
and red team operations are, and how to perform antivirus fingerprinting in order to 
bypass it in a real-life scenario.
Chapter 8, Best Practices and Recommendations, teaches you the best practices and 
recommendations for writing secure code and enriching malware detection mechanisms 
in order to prevent antivirus bypassing in the future. 
Preface     xiii
To get the most out of this book
You need to have a basic understanding of the security landscape, and an understanding 
of malware types and families. Also, an understanding of the Windows operating system 
and its internals, knowledge of programming languages such as Assembly x86, C/C++, 
Python, and PowerShell, and practical knowledge of conducting basic malware analysis.
Code in Action
Code in Action videos for this book can be viewed at https://bit.ly/3cFEjBw
Download the color images
We also provide a PDF file that has color images of the screenshots/diagrams used in this 
book. You can download it here: http://www.packtpub.com/sites/default/
files/downloads/9781801079747_ColorImages.pdf.
xiv     Preface
Conventions used
There are a number of text conventions used throughout this book.
Code in text: Indicates code words in text, database table names, folder names, 
filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles. 
Here is an example: "The first option is to use rundll32.exe, which allows the 
execution of a function contained within a DLL file using the command line".
Any command-line input or output is written as follows:
RUNDLL32.EXE , 
Bold: Indicates a new term, an important word, or words that you see onscreen. For 
example, words in menus or dialog boxes appear in the text like this. Here is an example: 
"In order to display the full results of the Jujubox sandbox, you need to click on the 
BEHAVIOR tab, click on VirusTotal Jujubox, and then Full report".
Tips or important notes
Appear like this.
Disclaimer
The information within this book is intended to be used only in an ethical manner. Do not 
use any information from the book if you do not have written permission from the owner of 
the equipment. If you perform illegal actions, you are likely to be arrested and prosecuted to 
the full extent of the law. Packt Publishing, Nir Yehoshua, and Uriel Kosayev (the authors 
of the book) do not take any responsibility if you misuse any of the information contained 
within the book. The information herein must only be used while testing environments with 
proper written authorizations from appropriate persons responsible.
Get in touch
Feedback from our readers is always welcome.
General feedback: If you have questions about any aspect of this book, mention the book 
title in the subject of your message and email us at customercare@packtpub.com.
Errata: Although we have taken every care to ensure the accuracy of our content, mistakes 
do happen. If you have found a mistake in this book, we would be grateful if you would 
report this to us. Please visit www.packtpub.com/support/errata, selecting your 
book, clicking on the Errata Submission Form link, and entering the details.
Preface     xv
Piracy: If you come across any illegal copies of our works in any form on the Internet, 
we would be grateful if you would provide us with the location address or website name. 
Please contact us at PI:EMAIL with a link to the material.
If you are interested in becoming an author: If there is a topic that you have expertise in 
and you are interested in either writing or contributing to a book, please visit authors.
packtpub.com.
Reviews
Please leave a review. Once you have read and used this book, why not leave a review on 
the site that you purchased it from? Potential readers can then see and use your unbiased 
opinion to make purchase decisions, we at Packt can understand what you think about 
our products, and our authors can see your feedback on their book. Thank you!
For more information about Packt, please visit packt.com.
Section 1:  
Know the Antivirus 
– the Basics Behind 
Your Security 
Solution
In this first section, we’ll explore the basics of antivirus software, get to know the engines 
behind antivirus software, collect leads for research, and learn about the authors’ two 
bypass approaches in order to prepare us for understanding how to bypass and evade 
antivirus software.
This part of the book comprises the following chapters:
• Chapter 1, Introduction to the Security Landscape
• Chapter 2, Before Research Begins
• Chapter 3, Antivirus Research Approaches
1
Introduction to the 
Security Landscape
This chapter provides an overview of our connected world. Specifically, it looks at how 
cybercriminals in the cyber landscape are becoming more sophisticated and dangerous. 
It looks at how they abuse the worldwide connectivity between people and technology. In 
recent years, the damage from cyberattacks has become increasingly destructive and the 
majority of the population actually thinks that antivirus software will protect them from 
all kinds of cyber threats. Of course, this is not true and there are always security aspects 
that need to be dealt with in order to improve antivirus software's overall security and 
detections.
Many people and organizations believe that if they have antivirus software installed on 
their endpoints, they are totally protected. However, in this book, we will demonstrate – 
based on our original research of several antivirus products – why this is not completely 
true. In this book, we will describe the types of antivirus engines on the market, explore 
how antivirus software deals with threats, demonstrate the ways in which antivirus 
software can be bypassed, and much more.
4     Introduction to the Security Landscape
In this chapter, we will explore the following topics:
• Defining malware and its types
• Exploring protection systems
• Antivirus – the basics
• Antivirus bypass in a nutshell
Understanding the security landscape
In recent years, the internet has become our main way to transfer ideas and data. In fact, 
almost every home in the developed world has a computer and an internet connection.
The current reality is that most of our lives are digital. For example, we use the web for the 
following:
• Shopping online 
• Paying taxes online
• Using smart, internet-connected televisions 
• Having internet-connected CCTV cameras surrounding our homes and businesses.
• Social media networks and website that we are using in a daily basis to share 
information with each other.
This means that anyone can find the most sensitive information, on any regular person, on 
their personal computer and smartphone.
This digital transformation, from the physical world to the virtual one, has also unfolded 
in the world of crime. Criminal acts in cyberspace are growing exponentially every year, 
whether through cyberattacks, malware attacks, or both.
Cybercriminals have several goals, such as the following:
• Theft of credit card data
• Theft of PayPal and banking data
• Information gathering on a target with the goal of later selling the data
• Business information gathering
Of course, when the main goal is money, there's a powerful motivation to steal and collect 
sellable information.
Defining malware     5
To deal with such threats and protect users, information security vendors around the 
world have developed a range of security solutions for homes and enterprises: Network 
Access Control (NAC), Intrusion Detection Systems (IDS)/Intrusion Prevention 
Systems (IPS), firewalls, Data Leak Prevention (DLP), Endpoint Detection and 
Response (EDR), antiviruses, and more.
But despite the wide variety of products available, the simplest solution for PCs and other 
endpoints is antivirus software. This explains why it has become by far the most popular 
product in the field. Most PC vendors, for example, offer antivirus licenses bundled with 
a computer purchase, in the hope that the product will succeed in protecting users from 
cyberattacks and malware.
The research presented in this book is based on several types of malicious software 
that we wrote ourselves in order to demonstrate the variety of bypass techniques. 
Later in this book, we will explore details of the malware we created, along with 
other known and publicly available resources, to simplify the processes of the bypass 
techniques we used. 
Now that we have understood why organizations and individuals use antivirus software, 
let's delve into the malware types, malicious actors, and more.
Defining malware
Malware is a portmanteau of malicious software. It refers to code, a payload, or a file 
whose purpose is to infiltrate and cause damage to the endpoint in a few different ways, 
such as the following:
• Receive complete access to the endpoint
• Steal sensitive information such as passwords and the like
• Encrypt files and demand a ransom
• Ruin the user experience
• Perform user tracking and sell the information
• Show ads to the user
• Attack third-party endpoints in a botnet attack
Over the years, many companies have developed antivirus software that aims to combat 
all types of malware threats, which have multiplied over the years, with the potential for 
harm also growing every single day.
6     Introduction to the Security Landscape
Types of malware
To understand how to bypass antivirus software, it's best to map out the different kinds 
of malware out there. This helps us get into the heads of the people writing antivirus 
signatures and other engines. It will help us recognize what they're looking for, and when 
they find a malicious file, to understand how they classify the malware file:
• Virus: A malware type that replicates itself in the system. 
• Worm: A type of malware whose purpose is to spread throughout a network and 
infect endpoints connected to that network in order to carry out some future 
malicious action. A worm can be integrated as a component of various types of 
malware.
• Rootkit: A type of malware that is found in lower levels of the operating system that 
tend to be highly privileged. Many times, its purpose is to hide other malicious files.
• Downloader: A type of malware whose function is to download and run from the 
internet some other malicious file whose purpose is to harm the user.
• Ransomware: A type of malware whose purpose is to encrypt the endpoint and 
demand financial ransom from the user before they can access their files.
• Botnet: Botnet malware causes the user to be a small part of a large network of 
infected computers. Botnet victims receive the same commands simultaneously 
from the attacker's server and may even be part of some future attack.
• Backdoor: A type of malware whose purpose is – as the name suggests – to leave 
open a "back door", providing the attacker with ongoing access to the user's 
endpoint.
• PUP: An acronym that stands for potentially unwanted program, a name that 
includes malware whose purpose is to present undesirable content to the user, for 
instance, ads.
• Dropper: A type of malware whose purpose is to "drop" a component of itself into 
the hard drive.
• Scareware: A type of malware that presents false data about the endpoint it is 
installed on, so as to frighten the user into performing actions that could be 
malicious, such as installing fake antivirus software or even paying money for it.
• Trojan: A type of malware that performs as if it were a legitimate, innocent 
application within the operating system (for example, antivirus, free games, or 
Windows/Office activation) and contains malicious functionality.
• Spyware: A type of malware whose purpose is to spy on the user and steal their 
information to sell it for financial gain.
Exploring protection systems     7
Important Note
Malware variants and families are classified based not only on the main 
purpose or goal of the malware but also on its capabilities. For example, the 
WannaCry ransomware is classified as such because its main goal is to encrypt 
the victim's files and demand ransom, but WannaCry is also considered and 
classified as Trojan malware, as it impersonates a legitimate disk partition 
utility, and is also classified and detected as a worm because of its ability to 
laterally move and infect other computers in the network by exploiting the 
notorious EternalBlue SMB vulnerability.
Now that we have understood malware and its varieties, we should take a look at the 
systems created to guard against these intrusions. 
Exploring protection systems
Antivirus software is the most basic type of protection system used to defend endpoints 
against malware. But besides antivirus software (which we will explore in the Antivirus – 
the basics section), there are many other types of products to protect a home and business 
user from these threats, both at the endpoint and network levels, including the following:
• EDR: The purpose of EDR systems is to protect the business user from malware 
attacks through real-time response to any type of event defined as malicious.
For example, a security engineer from a particular company can define within the 
company's EDR that if a file attempts to perform a change to the SQLServer.exe 
process, it will send an alert to the EDR's dashboard.
• Firewall: A system for monitoring, blocking, and identification of network-based 
threats, based on a pre-defined policy.
• IDS/IPS: IDS and IPS provide network-level security, based on generic signatures, 
which inspects network packets and searches for malicious patterns or malicious 
flow.
• DLP: DLP's sole purpose is to stop and report on sensitive data exfiltrated from 
the organization, whether on portable media (thumb drive/disk on key), email, 
uploading to a file server, or more.
Now that we have understood which security solutions exist and their purpose in securing 
organizations and individuals, we will understand the fundamentals of antivirus software 
and the benefits of antivirus research bypass.
8     Introduction to the Security Landscape
Antivirus – the basics
Antivirus software is intended to detect and prevent the spread of malicious files and 
processes within the operating system, thus protecting the endpoint from running them.
Over time, antivirus engines have improved and become smarter and more sophisticated; 
however, the foundation is identical in most products.
The majority of antivirus products today are based on just a few engines, with each engine 
having a different goal, as follows:
• Static engine
• Dynamic engine (includes the sandbox engine)
• Heuristic engine
• Unpacking engine
Of course, most of these engines have their own drawbacks. For example, the drawback of 
a static engine is that it is extremely basic, as its name implies. Its goal is to identify threats 
using static signatures, for instance, the YARA signature (YARA, Welcome to YARA's 
documentation, https://yara.readthedocs.io/en/stable/). These signatures 
are written from time to time and updated by antivirus security analysts on an almost 
daily basis.
During a scan, the static engine of the antivirus software conducts comparisons of 
existing files within the operating system to a database of signatures, and in this way 
can identify malware. However, in practice, it is impossible to identify all malware that 
exists using static signatures because any change to a particular malware file may bypass a 