这样就转换成了之前我们学习过的IN的使用方法了吧。可能有些读
者会产生这样的疑问：“既然子查询展开后得到的结果同样是
（'0003','0004','0006','0007'），为什么一定要使用子查询呢？”
这是因为ShopProduct（商店商品）表并不是一成不变的。实际
上由于各个商店销售的商品都在不断发生变化，因此ShopProduct表
内大阪店销售的商品也会发生变化。如果SELECT语句中没有使用子查
询的话，一旦商品发生了改变，那么SELECT语句也不得不进行修改，
而且这样的修改工作会变得没完没了。
反之，如果在SELECT语句中使用了子查询，那么即使数据发生了
变更，还可以继续使用同样的SELECT语句。这样也就减少了我们的常
规作业（单纯的重复操作）。
像这样可以完美应对数据变更的程序称为“易维护程序”，或者“免
维护程序”。这也是系统开发中需要重点考虑的部分。希望大家在开始学
习编程时，就能够有意识地编写易于维护的代码。
■NOT IN和子查询
IN的否定形式NOT IN同样可以使用子查询作为参数，其语法也和
IN完全一样。请大家参考代码清单6-37中的例文。
代码清单6-37 使用子查询作为NOT IN的参数
SELECT product_name, sale_price
FROM Product
WHERE product_id NOT IN (SELECT product_id
FROM ShopProduct
WHERE shop_id = '000A');
本例中的SQL语句是要选取出“在东京店（000A）以外销售的商品
（product_id）的销售单价（sale_price）”“，NOT IN”代表了“以
● 210 第6章 函数、谓词、CASE表达式
外”这样的否定含义。
我们也像之前那样来看一下该SQL的执行步骤。因为还是首先执行
子查询，所以会得到如下结果。
-- 执行子查询
SELECT product_name, sale_price
FROM Product
WHERE product_id NOT IN ('0001', '0002', '0003');
之后就很简单了，上述语句应该会返回0001～0003“以外”的结果。
执行结果
product_name | sale_price
--------------+-----------
菜刀 | 3000
高压锅 | 6800
叉子 | 500
擦菜板 | 880
圆珠笔 | 100
谓词
EXIST
KEYWORD 本节最后将要给大家介绍的是EXIST谓词。将它放到最后进行学习
●EXIST谓词
的原因有以下3点。
① EXIST的使用方法与之前的都不相同
② 语法理解起来比较困难
③ 实际上即使不使用EXIST，基本上也都可以使用IN（或者NOT IN）来代替
理由①和②都说明EXIST是使用方法特殊而难以理解的谓词。特别
是使用否定形式NOT EXIST的SELECT语句，即使是DB工程师也常
常无法迅速理解。此外，如理由③所述，使用IN作为替代的情况非常
多（尽管不能完全替代让人有些伤脑筋），很多读者虽然记住了使用方法
但还是不能实际运用。
但是一旦能够熟练使用EXIST谓词，就能体会到它极大的便利性。
因此，非常希望大家能够在达到SQL中级水平时掌握此工具。本书只简
6-2 谓词 211 ●
注A 单介绍其基本使用方法A。
希望了解EXIST谓词详细内容的
接下来就让我们赶快看一看EXIST吧。
读者，可以参考拙著《达人に学
ぶSQL彻底指南书》(翔泳社)中
1-8节的内容。 ■EXIST谓词的使用方法
一言以蔽之，谓词的作用就是“判断是否存在满足某种条件的记录”。
如果存在这样的记录就返回真（TRUE），如果不存在就返回假（FALSE）。
EXIST（存在）谓词的主语是“记录”。
我们继续使用前一节“IN和子查询”中的示例，使用EXIST选取出“大
阪店（000C）在售商品（product_id）的销售单价（sale_price）”。
SELECT语句请参考代码清单6-38。
代码清单6-38 使 用EXIST选取出“大阪店在售商品的销售单价”
SQL Server DB2 PostgreSQL MySQL
SELECT product_name, sale_price
FROM Product AS P ①
WHERE EXISTS (SELECT *
FROM ShopProduct AS SP ②
WHERE SP.shop_id = '000C'
AND SP.product_id = P.product_id);
特定的SQL
Oracle的FROM子句中不能使用AS（会发生错误）。因此，在Oracle中执行代码
清单6-38时，请将①的部分修改为“FROM Product P”，将②的部分修改为“FROM
ShopProduct SP”（删除FROM子句中的AS）。
执行结果
product_name | sale_price
------------+-------------
叉子 | 500
运动T恤 | 4000
菜刀 | 3000
擦菜板 | 880
●EXIST的参数
之前我们学过的谓词，基本上都是像“列 LIKE 字符串”或者“列
BETWEEN 值1 AND 值2”这样需要指定2个以上的参数，而EXIST的
左侧并没有任何参数。很奇妙吧？这是因为EXIST是只有1个参数的谓
词。EXIST只需要在右侧书写1个参数，该参数通常都会是一个子查询。
● 212 第6章 函数、谓词、CASE表达式
(SELECT *
FROM ShopProduct AS SP
WHERE SP.shop_id = '000C'
AND SP.product_id = P.product_id)
上面这样的子查询就是唯一的参数。确切地说，由于通过条件“SP.
product_id = P.product_id”将Product表和ShopProduct
表进行了联接，因此作为参数的是关联子查询。EXIST通常都会使用关
联子查询作为参数a。
注A
虽然严格来说语法上也可以使用 法则6-1
非关联子查询作为参数，但实际
应用中几乎没有这样的情况。 通常指定关联子查询作为EXIST的参数。
●子查询中的SELECT *
可能大家会觉得子查询中的SELECT *稍微有些不同，就像我们之
前学到的那样，由于EXIST只关心记录是否存在，因此返回哪些列都没
有关系。EXIST只会判断是否存在满足子查询中WHERE子句指定的条
件“商店编号（shop_id）为'000C'，商品（Product）表和商店
商品（ShopProduct）表中商品编号（product_id）相同”的记录，
只有存在这样的记录时才返回真（TRUE）。
因此，即使写成代码清单6-39那样，结果也不会发生改变。
代码清单6-39 这样的写法也能得到与代码清单6-38相同的结果
SQL Server DB2 PostgreSQL MySQL
SELECT product_name, sale_price
FROM Product AS P ①
WHERE EXISTS (SELECT 1 -- 这里可以书写适当的常数
FROM ShopProduct AS SP ②
WHERE SP.shop_id = '000C'
AND SP.product_id = P.product_id);
特定的SQL
在Oracle中执行代码清单6-39时，请将①的部分修改为“FROM Product P”，
将②的部分修改为“FROM ShopProduct SP”（删除FROM子句中的AS）。
大家可以把在EXIST的子查询中书写SELECT *当作SQL的一
种习惯。
6-2 谓词 213 ●
法则6-2
作为EXIST参数的子查询中经常会使用SELECT *。
●使用NOT EXIST替换NOT IN
KEYWORD 就像EXIST可以用来替换IN一样，NOT IN也可以用NOT EXIST
●NOT EXIST谓词
来替换。下面就让我们使用NOT EXIST来编写一条SELECT语句，读
取出“东京店（000A）在售之外的商品（product_id）的销售单价
（sale_price）”（代码清单6-40）。
代码清单6-40 使用NOT EXIST读取出“东京店在售之外的商品的销售单价”
SQL Server DB2 PostgreSQL MySQL
SELECT product_name, sale_price
FROM Product AS P ①
WHERE NOT EXISTS (SELECT *
FROM ShopProduct AS SP ②
WHERE SP.shop_id = '000A'
AND SP.product_id = P.product_id);
特定的SQL
在Oracle中执行代码清单6-40时，请将①的部分修改为“FROM Product P”，
将②的部分修改为“FROM ShopProduct SP”（删除FROM子句中的AS）。
执行结果
product_name | sale_price
------------+------------
菜刀 | 3000
高压锅 | 6800
叉子 | 500
擦菜板 | 880
圆珠笔 | 100
NOT EXIST与EXIST相反，当“不存在”满足子查询中指定条件
的记录时返回真（TRUE）。
将IN（代码清单6-36）和EXIST（代码清单6-38）的SELECT语
句进行比较，会得到怎样的结果呢？可能大多数读者会觉得IN理解起来
要容易一些，笔者也认为没有必要勉强使用EXIST。因为EXIST拥有
IN所不具有的便利性，严格来说两者并不相同，所以希望大家能够在中
级篇中掌握这两种谓词的使用方法。
● 214 第6章 函数、谓词、CASE表达式
第6章 函数、谓词、CASE表达式
6-3
表达式
CASE
● CASE表达式分为简单CASE表达式和搜索CASE表达式两种。搜索
学习重点
CASE表达式包含简单CASE表达式的全部功能。
● 虽然CASE表达式中的ELSE子句可以省略，但为了让SQL语句更加容易
理解，还是希望大家不要省略。
● CASE表达式中的END不能省略。
● 使用CASE表达式能够将SELECT语句的结果进行组合。
● 虽然有些DBMS提供了各自特有的CASE表达式的简化函数，例如Oracle
中的DECODE和MySQL中的IF，等等，但由于它们并非通用的函数，功
能上也有些限制，因此有些场合无法使用。
什么是 表达式
CASE
KEYWORD 本节将要学习的CASE表达式，和“1 + 1”或者“120 / 4”这
●CASE表达式
样的表达式一样，是一种进行运算的功能。这就意味着CASE表达式也
●分支（条件分支）
是函数的一种。它是SQL中数一数二的重要功能，希望大家能够在这里
好好学习掌握。
CASE表达式是在区分情况时使用的，这种情况的区分在编程中通常
注A 称为（条件）分支A。
在C语言和Java等流行的编程语
言中，通常都会使用IF语句或者
CASE语句。CASE表达式就是这些
语句的SQL版本。
表达式的语法
CASE
KEYWORD CASE表达式的语法分为简单CASE表达式和搜索CASE表达式两种。
●简单CASE表达式
但是，由于搜索CASE表达式包含了简单CASE表达式的全部功能，因
●搜索CASE表达式
此本节只会介绍搜索CASE表达式。想要了解简单CASE表达式语法的
读者，可以参考本节末尾的“简单CASE表达式”专栏。
下面就让我们赶快来学习一下搜索CASE表达式的语法吧。
6-3 CASE表达式 215 ●
语法6-16 搜索CASE表达式
CASE WHEN  THEN 
WHEN  THEN 
WHEN  THEN 
.
.
.
ELSE 
END
KEYWORD WHEN子句中的“”就是类似“列 = 值”这样，返回
●WHEN子句
值为真值（TRUE/FALSE/UNKNOWN）的表达式。我们也可以将其看作
●求值
●THEN子句
使用=、!=或者LIKE、BETWEEN等谓词编写出来的表达式。
●ELSE
CASE表达式会从对最初的WHEN子句中的“”进行
求值开始执行。所谓求值，就是要调查该表达式的真值是什么。如果结果
为真（TRUE），那么就返回THEN子句中的表达式，CASE表达式的执行
到此为止。如果结果不为真，那么就跳转到下一条WHEN子句的求值之中。
如果直到最后的WHEN子句为止返回结果都不为真，那么就会返回ELSE
中的表达式，执行终止。
从CASE表达式名称中的“表达式”我们也能看出来，上述这些整
体构成了一个表达式。并且由于表达式最终会返回一个值，因此CASE表
达式在SQL语句执行时，也会转化为一个值。虽然使用分支众多的CASE
表达式编写几十行代码的情况也并不少见，但是无论多么庞大的CASE表
达式，最后也只会返回类似“1”或者“'渡边先生'”这样简单的值。
表达式的使用方法
CASE
那么就让我们来学习一下CASE表达式的具体使用方法吧。例如我们
来考虑这样一种情况，现在Product（商品）表中包含衣服、办公用品和
厨房用具3种商品类型，请大家考虑一下怎样才能够得到如下结果。
A：衣服
B：办公用品
C：厨房用具
因为表中的记录并不包含“A：”或者“B：”这样的字符串，所以需
● 216 第6章 函数、谓词、CASE表达式
要在SQL中进行添加。我们可以使用6-1节中学过的字符串连接函数“||”
来完成这项工作。
剩下的问题就是怎样正确地将“A：”“B：”“C：”与记录结合起来。
这时就可以使用CASE表达式来实现了（代码清单6-41）。
代码清单6-41 通过CASE表达式将A～C的字符串加入到商品种类当中
SELECT product_name,
CASE WHEN product_type = '衣服'
THEN 'A：' || product_type
WHEN product_type = '办公用品'
THEN 'B：' || product_type
WHEN product_type = '厨房用具'
THEN 'C：' || product_type
ELSE NULL
END AS abc_product_type
FROM Product;
执行结果
product_name | abc_product_type
---------------+------------------
T恤衫 | A：衣服
打孔器 | B：办公用品