s, v
A, v
u, B, S
u, B, s
M1
M2
SPAKE2+
ID, X
(select [w0]M,[w0]N , L)
[w0]M,[w0]N , L
X ,[w0]M,[w0]N , L
Y , Z , V
Y
KcA
KcB
Key
Derivation
Key
Confirmation
5 EVALUATION
In this section, we conduct a series of experiments to reveal the
performance of our scheme. The protocols we implement include
SRP3 protocol with modulus size 1024-bit, 1536-bit and 2048-bit
as well as SPAKE2+ protocol over Edwards25519 curve. For sim-
plicity, we denote SRP implementation of supposed parameters
with SRP-l, where l is the modulus bit length, e.g. SRP-1024.
5.1 Basic Configurations
We build the testing environment under LAN as well as WLAN.
Besides PAKE-Server and a Web server, the client devices include
a wireless mobile phone and a PC connected to the network
with a cable. Table 4 and Table 5 give the specifications and
configurations of the devices.
Figure 8: Overall Framework
Table 4: Server-side Specifications
For Web browsers, vendors only need to insert pake.js into
their front-end code. Meanwhile, PAKE-Server deployed in In-
tranet takes over the most costly work of aPAKE computations
from Web servers.
In contrast, upgrading Web servers is a bit more complicated.
The most troublesome job is database modification. If the target
CPU
GPU
RAM
OS
Network Card
Software
Web Server
PAKE-Server
Intel® Xeon® E5-2697 v2
-
8GB
Linux 4.15.0-64-generic, Ubuntu 16.04.16
82574L Gigabit Network Connection
Apache/2.4.18 & PHP 7.0.33
Intel® Core(TM) i9-7900X
NVIDIA GeForce GTX TITAN V
Linux 4.15.0-141-generic, Ubuntu 18.01
Ethernet Connection (2) I219-V
16GB
-
Web BrowserInternetWeb ServerIntranettb: [id,verifier ,salt,…]DatabaseWeb ApplicationPAKE-ServerSDKxx.cssxx.js…pake.js…CPU-AVXGPU-CUDAGF/ECC PrimitivesProtocol StackSRP, SPAKE2+...epoll threadsdisp threadsring buffertask queueHTML83Heterogeneous-PAKE: Bridging the Gap between PAKE Protocols and Their Real-World Deployment
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 5: Clients’ Specifications
Product
CPU
RAM
OS
HUAWEI Mate 30 Pro
Intel® Core(TM) i5-8250U CPU @ 1.60GHz 1.80 GHz HUAWEI Kirin 990 5G
Xiaomi Laptop Air 13
8GB
Windows 10 Family 20H2
8GB
Android 10
5.2 Determining the Optimal Threshold
As we have mentioned the threshold t for heterogeneous com-
puting in Section 4, we determine its optimal value through
experiments here.
5.2.1 Theoretical Model. From the client-side’s perspective, the
total delay increases with the number of tasks sent to PAKE-
Server. Theoretically, the CPU program’s delay increases linearly,
conforming to y = k · x while the GPU program’s delay increases
stepwise, which could be concluded as y = ⌈ x
B ⌉ · T . The variable
x denotes task number, and y denotes delay. In addition, the
parameter T indicates the latency for a single task processed by
GPUs, and B implies the maximum amount of tasks that arrive
simultaneously, which is decided by the connection number and
the socket buffer’s capacity for protocol-specific messages.
A proper t shall be abscissa of the only intersection with the
two function curves, and hence once the task number exceeds
t the GPU always finishes responds faster than the CPU. This
requires the slope k not to be less than 2T/B, and then the inequal-
ity B >= ⌈2T/k⌉ holds. After that, we could get the optimal t by
substituting y with T in equation y = k · x, and finally t = T/k.
Since T could hardly be reduced, the feasible approaches to
guarantee the existence and the uniqueness of t include enlarging
B by expanding the socket buffer and establishing more connec-
tions to PAKE-Server. Our experiment intends to acquire T and
the lower limit of B for each protocol.
5.2.2 Experiment Setup. Instead of sending requests from browsers,
we launch tests on PAKE-Server directly with a client program
that could simulate requests with configurable parameters like
task amount, connection number. We only maintain one dis-
patcher for the test to avoid the error resulted from thread com-
petitions.
The function curves of time-delay are shown in Figure 9 and
more detailed data is given in Table 11 in Appendix B. Since we
adopt a small socket buffer size (4096-bytes) for convenience, the
two curves in each diagram do not intersect at an expected point
with a small B. However, this won’t impact the accuracy of t.
Just as we analyzed above, in each subfigure, the slope k of the
CPU curve and the step height T of the GPU curve are determined
by the complexity of the target protocol. A heavier computation
overhead leads to greater k and T , and thus the four protocols
could be sorted by complexity as SRP-2048, SRP-1536, SRP-1024
and SPAKE2+. After the statistical analysis for the experimental
result, key parameters of each protocol are given in Table 6. The
row deduced t means that the value is deduced as t = ⌈T/k⌉,
and empirical t indicates the task number of the request whose
response time firstly exceeds T in Table 11. The coincidence of
the two rows implies the theoretical model’s correctness.
5.3 Performance Evaluation from Server’s
Perspective
While multiple metrics are taken into account for performance
evaluation of the system, particular concerns are paid to throuдhput
(a) SRP-1024
(b) SRP-1536
(c) SRP-2048
(d) SPAKE2+
Figure 9: Time-delay of a Single Dispatcher
Table 6: Key Parameters
Protocol
T
k
suggested B (⌈2T/k⌉)
deduced t (⌈T/k⌉)
empirical t
SRP-1024
10.997
0.957
≥ 23
12
12
k: the slope of CPU delay function
SRP-1536
33.526
2.161
≥ 32
16
16
SRP-2048
83.074
3.842
≥ 44
22
22
SPAKE2+
6.788
0.269
≥ 51
26
26
T : latency of a single task on GPUs
B: max number of tasks a socket buffer contains
t: threshold
for PAKE-Server, which indicates the tasks processed per sec-
ond. By testing the maximize throuдhput, we expect to provide
references for making the most of PAKE-Server’s computing
capacity.
5.3.1 Trade-off Considerations. The basic routine for improving
throuдhput is to increase c (number of connections to PAKE-
Server) and p (number of tasks carried in a roundtrip message) by
establishing more TCP connections with a larger socket buffer.
However, larger c or p leads to higher resource consumption and
logical complexity. A proper configuration for c and p helps the
Web system harvest the best performance without obvious waste
of resources. While the p value of a protocol is determined after
compilation, the c value could be controlled by the vendors ac-
cording to the scale of their server cluster. In our design, vendors
are suggested to
(1) select the proper socket buffer size according to the current
size and the probable size in the future of their server
cluster, and
(2) establish an appropriate number of TCP connections to
PAKE-Server in each Web server to ensure that it can
achieve the ultimate throuдhput exactly.
5.3.2 Experiment Setup. In order to provide reasonable c and p
values for vendors, we mount stress testing with different connec-
tion numbers and socket buffers size of 8192-bytes, 16384-bytes,
32768-bytes and 65536-bytes respectively. The detailed results
are shown in Table 12 and Table 13 while intuitive results are
drawn in Figure 10.
With p determined by the socket buffer size, throuдhput in-
creases with c until the peak value. Vendors should ensure that
020406080100120020406080100Delay (ms)Task NumberCPUGPU0100200300400500600020406080100Delay (ms)Task NumberCPUGPU0500100015002000020406080100Delay (ms)Task NumberCPUGPU051015202530020406080100Delay (ms)Task NumberCPUGPU84ACSAC ’21, December 6–10, 2021, Virtual Event, USA
R.Wei and F.Zheng, et al.
5.4.1 Preparation. We set up a Web server with a simple PHP
website on Apache server, and launch requests from four main-
stream PC browsers and two mobile browsers. The detailed infor-
mation of the browsers is listed in Table 9. Our implementations
conform to RFC2945 and CFRG document [42], and the KDF
function used for SPAKE2+ is PBKDF2 with iteration set to 1000.
Table 9: Versions of Testing Platforms
(a) SRP-1024
(b) SRP-1536
Platform
Chrome
Firefox
IE
Microsoft Edge
Huawei Browser
Firefox for Android
Version
88.0 (64-bit)
11
90.0.4430.93 (Official Build) (64-bit)
90.0.818.51 (64-bit)
11.0.8.301
88.13 (Build #2015808649)
(c) SRP-2048
(d) SPAKE2+
Figure 10: Throughput of PAKE-Server
c reaches the inflection point exactly in the figures. Oversized c
will not bring any performance improvement, instead, it leads
to resource wastes of Web servers. Taking SPAKE2+ as an ex-
ample, suppose that the Web server cluster contains 64 servers.
According to Table 11, by adopting a 65536-bytes socket buffer,
PAKE-Server could get fully loaded with only 5 TCP connections
to each Web server. As long as the cluster gets expanded to no
more than 320 servers in the future, vendors could maintain the
best performance of the system by reducing TCP connections in
each Web server to a proper number.
The abscissa of the inflection point of each curve in the figures
represents the optimal number of connections under the current
buffer size. Table 7 gives the maximum throuдhput of each pro-
tocol and the recommended c value for each socket buffer size is
listed in Table 8.
Table 7: Peak Throughput
Protocol
Peak Throughput (kop/s)
SRP-1024
241.536
SRP-1536
70.740
SRP-2048
30.155
SPAKE2+
1654.947
Table 8: Suggested Connection Number
Socket
Buffer Size
SRP-1024
Protocol
SRP-1536
SRP-2048
8192B
16384B
32768B
65536B
2048
1024
512
256
2048
1152
768
320
2560
1408
1024
512
SPAKE2+
2560
1280
640
320
5.4 Performance Evaluation from Clients’
Perspective
In this subsection, we conduct tests for PAKE protocols from the
client side. In comparison with PAKE-Server, we focus on user
experience with the metric latency which implies the time delay
from the user submitting the form to the moment session key is
established.
5.4.2 Experiment Setup. In order to observe the detailed time
consumption on the call path, we collect timestamps of several
key nodes as shown in Figure 11, and then get the delays of
desired phases.
Figure 11: Time Slots, the subscript “W B∗” means "Web
Browser", "T∗" means "Transmission", "W S∗" means "Web
Server", and "PS" means "PAKE-Server"
We launch tests during idle-hours as well as busy-hours of
PAKE-Server. Considering the disturbance caused by the unstable
network (especially WLAN), we sample the transmission delay
TT 1, TT 2, TT 3 and TT 4 to diminish the infect of network variations.
Influenced by the out-sync clocks between the client and the
server, a single transmission delay is inaccurate (sometimes even
be negative). However, the sum of them can offset this error, and
we denote it with TT . The testing results are shown in Table 14-17
in Appendix B.
To reveal the performance gap between PAKE schemes and a
pure hash-based authentication, we test the latter’s delay and list
the results in Table 18. The hash function we adopted is Bcrypt.
Figure 12 compares the latency during idle hours on the testing
platforms with histograms. Although the hash-based approach
seems to be much faster than PAKE schemes, its workloads are
centralized in Web servers, leading to a rapid increase of latency
with the concurrency up.
Unsurprisingly, the outdated kernel of IE results in the highest
latency among the testing platforms. All the protocols could be
finished within 3 seconds except for SRP-2048 on IE. Influenced
05010015020025030016488012819225638451276810241280153617922048Throughput (kop/s)Connection Number8192B16384B32768B65536B0102030405060708016488012819225638451276810241280153617922048Throughput (kop/s)Connection Number8192B16384B32768B65536B0510152025303516488012819225638451276810241280153617922048Throughput (kop/s)Connection Number8192B16384B32768B65536B0500100015002000164880128192256384512768128020483072Throughput (kop/s)Connection Number8192B16384B32768B65536BWeb BrowserWeb ServerPAKE-ServerKey DerivationKey ConfirmationTWB1TT1TWS1TPSTWS2TT2TWS3TWB4TWB2TWB3TT3TT485Heterogeneous-PAKE: Bridging the Gap between PAKE Protocols and Their Real-World Deployment
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
ACKNOWLEDGMENTS
This work was supported in part by the National Natural Science
Foundation of China under Grant 61902392 and in part by CCF-
Tencent Open Fund under Grant RAGR20210131.
REFERENCES
[1] 2019.
Facebook stored hundreds of millions of passwords in plain
text. https://www.theverge.com/2019/3/21/18275837/facebook-plain-text-
password-storage-hundreds-millions-users
[2] 2019. Google stored some passwords in plain text for fourteen years–Only affects
some G Suite customers. Technical Report. https://www.theverge.com/2019/
5/21/18634842/google-passwords-plain-text-g-suite-fourteen-years
[3] Michel Abdalla and David Pointcheval. 2005. Simple password-based en-
crypted key exchange protocols. In Cryptographers’ track at the RSA conference.
Springer, 191–208.
[4] Steven Michael Bellovin and Michael Merritt. 1992. Encrypted key exchange:
Password-based protocols secure against dictionary attacks. (1992).
[5] F. Callegati, W. Cerroni, and M. Ramilli. 2009. Man-in-the-Middle Attack to the
HTTPS Protocol. Man-in-the-Middle Attack to the HTTPS Protocol.
[6] Ran Canetti. 2001. Universally composable security: A new paradigm for
cryptographic protocols. In Proceedings 42nd IEEE Symposium on Foundations
of Computer Science. IEEE, 136–145.
[7] Marius Cornea. 2015. Intel AVX-512 instructions and their use in the imple-
mentation of math functions. Intel Corporation (2015).
[8] Jiankuo Dong, Fangyu Zheng, Juanjuan Cheng, Jingqiang Lin, Wuqiong Pan,
and Ziyang Wang. 2018. Towards high-performance X25519/448 key agree-
ment in general purpose GPUs. In 2018 IEEE Conference on Communications
and Network Security (CNS). IEEE, 1–9.
[9] Jiankuo Dong, Fangyu Zheng, Niall Emmart, Jingqiang Lin, and Charles
Weems. 2018. sDPF-RSA: Utilizing floating-point computing power of GPUs
for massive digital signature computations. In 2018 IEEE International Parallel
and Distributed Processing Symposium (IPDPS). IEEE, 599–609.
[10] Niall Emmart, Fangyu Zheng, and Charles Weems. 2018. Faster modular
exponentiation using double precision floating point arithmetic on the GPU.
In 2018 IEEE 25th Symposium on Computer Arithmetic (ARITH). IEEE, 130–137.
[11] Lili Gao, Fangyu Zheng, Niall Emmart, Jiankuo Dong, Jingqiang Lin, and
Charles Weems. 2020. DPF-ECC: Accelerating Elliptic Curve Cryptography
with Floating-Point Computing Power of GPUs. In 2020 IEEE International
Parallel and Distributed Processing Symposium (IPDPS). IEEE, 494–504.
[12] Jeffrey Goldberg. 2017. Three layers of encryption keeps you safe when
SSL/TLS fails. Technical Report. https://blog.1password.com/three-layers-of-
encryption-keeps-you-safe-when-ssl/tls-fails/
[13] IEEE P1363 Working Group et al. 2003. Standard specifications for password-
based public-key cryptographic techniques. IEEE P1363. 2/D11 (2003).
[14] Huseyin Hisil, Kenneth Koon-Ho Wong, Gary Carter, and Ed Dawson. 2008.
Twisted Edwards curves revisited. In International Conference on the Theory
and Application of Cryptology and Information Security. Springer, 326–343.
[15] Apple Inc. 2021.
Apple Platform Security.
Technical Report.
https://manuals.info.apple.com/MANUALS/1000/MA1902/en_US/apple-
platform-security-guide.pdf
[16] D. JABLON. 1999. B-SPEKE. Integrity Sciences White Paper (1999). https:
//ci.nii.ac.jp/naid/10010452557/en/
[17] Stanislaw Jarecki, Hugo Krawczyk, and Jiayu Xu. 2018. OPAQUE: an asym-
metric PAKE protocol secure against pre-computation attacks. In Annual
International Conference on the Theory and Applications of Cryptographic Tech-
niques. Springer, 456–486.
[18] Hwancheol Jeong, Sunghoon Kim, Weonjong Lee, and Seok-Ho Myung. 2012.
Performance of SSE and AVX instruction sets. arXiv preprint arXiv:1211.0820
(2012).
[19] William Kahan. 1996. IEEE standard 754 for binary floating-point arithmetic.
Lecture Notes on the Status of IEEE 754, 94720-1776 (1996), 11.
[20] Cameron F Kerry and Charles Romine Director. 2013. FIPS PUB 186-4 federal
information processing standards publication digital signature standard (DSS).
(2013).
[21] Taekyoung Kwon. 2001. Authentication and Key Agreement via Memorable
Password.. In NDSS.
[22] K. Leboeuf, R. Muscedere, and M. Ahmadi. 2013. A GPU implementation
of the Montgomery multiplication algorithm for elliptic curve cryptography.
IEEE (2013).
[23] Philip MacKenzie. 2002. The PAK suite: Protocols for password-authenticated
key exchange. In IEEE P1363. 2. Citeseer.
[24] Michael Kerrisk. 2021. epoll(7) - Linux manual page. https://man7.org/linux/
man-pages/man7/epoll.7.html [Online; accessed 16-June-2021].
[25] Michael Kerrisk. 2021. poll(2) - Linux manual page. https://man7.org/linux/
man-pages/man2/poll.2.html [Online; accessed 16-June-2021].
[26] Michael Kerrisk. 2021. select(2) - Linux manual page. https://man7.org/linux/
man-pages/man2/select.2.html [Online; accessed 16-June-2021].
[27] Montgomery and L. Peter. 1985. Modular multiplication without trial division.
Math. Comp. 44, 170 (1985), 519–519.
[28] Kathleen Moriarty, Burt Kaliski, and Andreas Rusch. 2017. Pkcs# 5: Password-
based cryptography specification version 2.1. Internet Eng. Task Force (IETF)
8018 (2017), 1–40.
Figure 12: Latency during Idle-hours
by the natural shortage of wireless networks, the two mobile
browsers receive higher transmission delays than the desktop
ones. While a PAKE scheme achieves different performances on
various browsers, the hash-based authentication obtains a stable
delay since the hash operation is conducted on the server-side.
5.4.3 Result Analysis. In the low concurrency scenes, TPS only
shares a small proportion (seldom exceeds 1%) of the entire pro-
cess. On the contrary, most time consumption occurs in Web
browsers for the natural performance shortcomings of JavaScript
and consequently, other factors including browser kernel, crypto
parameters (such as the iteration number of PBKDF2) also impact
the client-side’s performance significantly, and thus latency of the
same protocol varies on different platforms. When PAKE-Server
is fully loaded, the user could acutely feel the increase of delay.
According to the result, TPS under the busy state is 10x to 100x of
that during idle time. Although the latency of a PAKE authentica-
tion seems to be times of a hash-based one, the bottleneck lies in
browsers instead of Web servers. According to Table 18 and TW S∗
in Table 14-17, our scheme takes over almost all the burdens of
Web servers in comparison with traditional hash-based approach,
and hence the system’s throughput increases by a large margin.
It is noticeable that SPAKE2+ keeps latency lower than 0.4s even
when facing up with over 1,600,000 requests per second on most
platforms.
6 CONCLUSION
In this work, we propose Heterogeneous-PAKE, a practical Web
framework for the application of PAKE protocols. Our scheme
also gives the vendors instructions about upgrading existing
Web systems for PAKE authentication. To dispel people’s mis-
giving about the feasibility of PAKE schemes in a real-world
scene caused by their heavy computational overheads, we pro-
vide high-speed implementations of two representative PAKE
protocols, SRP and SPAKE2+. The system achieves comprehen-
sive performance comparable with hash-based authentications by
integrating state-of-the-art research results into a heterogeneous
computing module supported by GPUs and CPU with vector
instructions. For PAKE protocols, this work bridges the gap be-
tween their theoretical research and the real-world deployment
and provides a reference for industrialization.
01000200030004000500060007000ChromeFirefoxIEMicrosoftEdgeHuaweiBrowserFirefox forAndroidLatency (ms)Computing DelayTransmission Delay86ACSAC ’21, December 6–10, 2021, Virtual Event, USA
R.Wei and F.Zheng, et al.
[29] Junghyun Nam, Juryon Paik, H-K Kang, Ung Mo Kim, and Dongho Won. 2009.
An off-line dictionary attack on a simple three-party key exchange protocol.
IEEE Communications Letters 13, 3 (2009), 205–207.
[30] Stuart Oberman, Greg Favor, and Fred Weber. 1999. AMD 3DNow! technology:
Architecture and implementations. IEEE Micro 19, 2 (1999), 37–48.
[31] Wuqiong Pan, Fangyu Zheng, Yuan Zhao, Wen-Tao Zhu, and Jiwu Jing. 2016.
An efficient elliptic curve cryptography signature server with GPU acceler-
ation. IEEE Transactions on Information Forensics and Security 12, 1 (2016),
111–122.
[32] Alex Peleg and Uri Weiser. 1996. MMX technology extension to the Intel
architecture. IEEE micro 16, 4 (1996), 42–50.
[33] Colin Percival and Simon Josefsson. 2016. The scrypt password-based key
derivation function. IETF Draft URL: http://tools. ietf. org/html/josefsson-scrypt-
kdf-00. txt (accessed: 30.11. 2012) (2016).
[34] Mark
Dive
http://diveintohtml5.info/index.html (2010).
Pilgrim.
2010.
into HTML5.
URL:
[35] Niels Provos and David Mazieres. 1999. Bcrypt algorithm. In USENIX.
[36] Venu Gopal Reddy. 2008. Neon technology introduction. ARM Corporation 4,
[37] Eric Rescorla and Tim Dierks. 2018. The transport layer security (TLS) protocol
1 (2008).
version 1.3. (2018).
[38] Jason Sanders and Edward Kandrot. 2010. CUDA by example: an introduction
to general-purpose GPU programming. Addison-Wesley Professional.
[39] Nicolas Serrano, Hilda Hadan, and L Jean Camp. 2019. A complete study of
PKI (PKI’s Known Incidents). Available at SSRN 3425554 (2019).
[40] SeongHan Shin and Kazukuni Kobara. 2012. Efficient Augmented Password-