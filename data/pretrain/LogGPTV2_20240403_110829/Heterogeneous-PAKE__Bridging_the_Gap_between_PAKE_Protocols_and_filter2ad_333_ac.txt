# Heterogeneous-PAKE: Bridging the Gap between PAKE Protocols and Their Real-World Deployment

## 5. EVALUATION

In this section, we conduct a series of experiments to evaluate the performance of our proposed scheme. The protocols implemented include SRP3 with modulus sizes of 1024-bit, 1536-bit, and 2048-bit, as well as SPAKE2+ over the Edwards25519 curve. For simplicity, we denote the SRP implementation with a specific modulus size as SRP-l, where l is the modulus bit length (e.g., SRP-1024).

### 5.1 Basic Configurations

We set up the testing environment in both Local Area Network (LAN) and Wireless Local Area Network (WLAN) settings. The test setup includes a PAKE-Server, a Web server, a wireless mobile phone, and a PC connected via a cable. Tables 4 and 5 provide the specifications and configurations of the devices.

**Figure 8: Overall Framework**

**Table 4: Server-side Specifications**

| Component | Specification |
|-----------|---------------|
| CPU       | Intel® Xeon® E5-2697 v2 |
| GPU       | -             |
| RAM       | 8GB           |
| OS        | Linux 4.15.0-64-generic, Ubuntu 16.04.16 |
| Network Card | 82574L Gigabit Network Connection |
| Software  | Apache/2.4.18 & PHP 7.0.33 |

**Table 5: Clients’ Specifications**

| Product                | CPU                                      | RAM | OS                  |
|------------------------|------------------------------------------|-----|---------------------|
| HUAWEI Mate 30 Pro     | HUAWEI Kirin 990 5G                      | 8GB | Android 10          |
| Xiaomi Laptop Air 13   | Intel® Core(TM) i5-8250U @ 1.60GHz 1.80 GHz | 8GB | Windows 10 Family 20H2 |

For Web browsers, vendors only need to insert `pake.js` into their front-end code. The PAKE-Server, deployed in the Intranet, takes over the most computationally intensive tasks from the Web servers. Upgrading Web servers is more complex, primarily due to database modifications.

### 5.2 Determining the Optimal Threshold

As mentioned in Section 4, the threshold \( t \) for heterogeneous computing is determined through experiments.

#### 5.2.1 Theoretical Model

From the client's perspective, the total delay increases with the number of tasks sent to the PAKE-Server. The CPU program's delay increases linearly, following the equation \( y = k \cdot x \), while the GPU program's delay increases stepwise, described by \( y = \lceil \frac{x}{B} \rceil \cdot T \). Here, \( x \) is the task number, \( y \) is the delay, \( T \) is the latency for a single task on GPUs, and \( B \) is the maximum number of tasks that can arrive simultaneously, determined by the connection number and the socket buffer capacity.

The optimal threshold \( t \) is the abscissa of the intersection point of the two function curves. This requires the slope \( k \) to be at least \( \frac{2T}{B} \), leading to the inequality \( B \geq \lceil \frac{2T}{k} \rceil \). The optimal \( t \) is then given by \( t = \frac{T}{k} \).

To ensure the existence and uniqueness of \( t \), we can increase \( B \) by expanding the socket buffer and establishing more connections to the PAKE-Server. Our experiment aims to determine \( T \) and the lower limit of \( B \) for each protocol.

#### 5.2.2 Experiment Setup

We directly test the PAKE-Server using a client program that simulates requests with configurable parameters such as task amount and connection number. We use a single dispatcher to avoid errors from thread competition.

**Figure 9: Time-delay of a Single Dispatcher**

**Table 6: Key Parameters**

| Protocol  | T (ms) | k (ms/task) | Suggested B (⌈2T/k⌉) | Deduced t (⌈T/k⌉) | Empirical t |
|-----------|--------|-------------|----------------------|-------------------|-------------|
| SRP-1024  | 10.997 | 0.957       | ≥ 23                 | 12                | 12          |
| SRP-1536  | 33.526 | 2.161       | ≥ 32                 | 16                | 16          |
| SRP-2048  | 83.074 | 3.842       | ≥ 44                 | 22                | 22          |
| SPAKE2+   | 6.788  | 0.269       | ≥ 51                 | 26                | 26          |

### 5.3 Performance Evaluation from Server’s Perspective

We evaluate the system's performance, focusing on throughput, which indicates the tasks processed per second by the PAKE-Server. By testing the maximum throughput, we aim to provide references for optimizing the PAKE-Server's computing capacity.

#### 5.3.1 Trade-off Considerations

Improving throughput involves increasing the number of connections \( c \) to the PAKE-Server and the number of tasks \( p \) carried in a roundtrip message. However, larger \( c \) or \( p \) leads to higher resource consumption and logical complexity. A proper configuration for \( c \) and \( p \) helps the Web system achieve the best performance without significant resource waste.

Vendors are suggested to:
1. Select an appropriate socket buffer size based on the current and future size of their server cluster.
2. Establish an appropriate number of TCP connections to the PAKE-Server to ensure it can achieve the ultimate throughput.

#### 5.3.2 Experiment Setup

We conduct stress tests with different connection numbers and socket buffer sizes of 8192-bytes, 16384-bytes, 32768-bytes, and 65536-bytes. The detailed results are shown in Tables 12 and 13, and intuitive results are illustrated in Figure 10.

**Figure 10: Throughput of PAKE-Server**

**Table 7: Peak Throughput**

| Protocol  | Peak Throughput (kop/s) |
|-----------|-------------------------|
| SRP-1024  | 241.536                 |
| SRP-1536  | 70.740                  |
| SRP-2048  | 30.155                  |
| SPAKE2+   | 1654.947                |

**Table 8: Suggested Connection Number**

| Socket Buffer Size | SRP-1024 | SRP-1536 | SRP-2048 | SPAKE2+  |
|--------------------|----------|----------|----------|----------|
| 8192B              | 2048     | 2048     | 2560     | 2560     |
| 16384B             | 1024     | 1152     | 1408     | 1280     |
| 32768B             | 512      | 768      | 1024     | 640      |
| 65536B             | 256      | 320      | 512      | 320      |

### 5.4 Performance Evaluation from Clients’ Perspective

We conduct tests from the client side to evaluate the user experience, focusing on latency, which is the time delay from the user submitting the form to the session key being established.

#### 5.4.1 Preparation

We set up a Web server with a simple PHP website on an Apache server and launch requests from four mainstream PC browsers and two mobile browsers. The detailed information of the browsers is listed in Table 9. Our implementations conform to RFC2945 and CFRG document [42], and the KDF function used for SPAKE2+ is PBKDF2 with 1000 iterations.

**Table 9: Versions of Testing Platforms**

| Platform            | Version                              |
|---------------------|--------------------------------------|
| Chrome              | 88.0 (64-bit)                        |
| Firefox             | 90.0.4430.93 (Official Build) (64-bit) |
| IE                  | 11.0.8.301                           |
| Microsoft Edge      | 90.0.818.51 (64-bit)                 |
| Huawei Browser      | 11.0.8.301                           |
| Firefox for Android | 88.13 (Build #2015808649)            |

#### 5.4.2 Experiment Setup

To observe the detailed time consumption on the call path, we collect timestamps at several key nodes as shown in Figure 11 and calculate the delays of desired phases.

**Figure 11: Time Slots**

We conduct tests during idle and busy hours of the PAKE-Server. To mitigate the impact of network variations, we sample transmission delays \( TT_1, TT_2, TT_3, \) and \( TT_4 \). The sum of these delays, denoted as \( TT \), offsets the error caused by out-of-sync clocks between the client and the server. The testing results are shown in Tables 14-17 in Appendix B.

To compare the performance gap between PAKE schemes and a pure hash-based authentication, we test the latter's delay and list the results in Table 18. The hash function used is Bcrypt.

**Figure 12: Latency during Idle-hours**

#### 5.4.3 Result Analysis

In low concurrency scenarios, the time spent on the PAKE-Server (TPS) is a small proportion (seldom exceeds 1%) of the entire process. Most time consumption occurs in the Web browser due to the natural performance limitations of JavaScript. Factors such as browser kernel and crypto parameters (e.g., the iteration number of PBKDF2) also significantly impact client-side performance, leading to varying latencies for the same protocol on different platforms.

When the PAKE-Server is fully loaded, users can acutely feel the increase in delay. According to the results, TPS under the busy state is 10x to 100x that during idle time. Although the latency of a PAKE authentication seems to be several times that of a hash-based one, the bottleneck lies in the browsers rather than the Web servers. Our scheme offloads almost all the computational burden from the Web servers, resulting in a significant increase in system throughput. Notably, SPAKE2+ maintains latency below 0.4s even when handling over 1,600,000 requests per second on most platforms.

## 6. CONCLUSION

In this work, we propose Heterogeneous-PAKE, a practical Web framework for the application of PAKE protocols. Our scheme provides instructions for vendors to upgrade existing Web systems for PAKE authentication. To address concerns about the feasibility of PAKE schemes in real-world scenarios, we offer high-speed implementations of two representative PAKE protocols, SRP and SPAKE2+. By integrating state-of-the-art research results into a heterogeneous computing module supported by GPUs and CPUs with vector instructions, our system achieves comprehensive performance comparable to hash-based authentications. This work bridges the gap between theoretical research and real-world deployment of PAKE protocols and provides a reference for industrialization.

**Figure 12: Latency during Idle-hours**

**References**

[1] Facebook stored hundreds of millions of passwords in plain text. https://www.theverge.com/2019/3/21/18275837/facebook-plain-text-password-storage-hundreds-millions-users

[2] Google stored some passwords in plain text for fourteen years–Only affects some G Suite customers. Technical Report. https://www.theverge.com/2019/5/21/18634842/google-passwords-plain-text-g-suite-fourteen-years

[3] Michel Abdalla and David Pointcheval. 2005. Simple password-based encrypted key exchange protocols. In Cryptographers’ track at the RSA conference. Springer, 191–208.

[4] Steven Michael Bellovin and Michael Merritt. 1992. Encrypted key exchange: Password-based protocols secure against dictionary attacks. (1992).

[5] F. Callegati, W. Cerroni, and M. Ramilli. 2009. Man-in-the-Middle Attack to the HTTPS Protocol. Man-in-the-Middle Attack to the HTTPS Protocol.

[6] Ran Canetti. 2001. Universally composable security: A new paradigm for cryptographic protocols. In Proceedings 42nd IEEE Symposium on Foundations of Computer Science. IEEE, 136–145.

[7] Marius Cornea. 2015. Intel AVX-512 instructions and their use in the implementation of math functions. Intel Corporation (2015).

[8] Jiankuo Dong, Fangyu Zheng, Juanjuan Cheng, Jingqiang Lin, Wuqiong Pan, and Ziyang Wang. 2018. Towards high-performance X25519/448 key agreement in general purpose GPUs. In 2018 IEEE Conference on Communications and Network Security (CNS). IEEE, 1–9.

[9] Jiankuo Dong, Fangyu Zheng, Niall Emmart, Jingqiang Lin, and Charles Weems. 2018. sDPF-RSA: Utilizing floating-point computing power of GPUs for massive digital signature computations. In 2018 IEEE International Parallel and Distributed Processing Symposium (IPDPS). IEEE, 599–609.

[10] Niall Emmart, Fangyu Zheng, and Charles Weems. 2018. Faster modular exponentiation using double precision floating point arithmetic on the GPU. In 2018 IEEE 25th Symposium on Computer Arithmetic (ARITH). IEEE, 130–137.

[11] Lili Gao, Fangyu Zheng, Niall Emmart, Jiankuo Dong, Jingqiang Lin, and Charles Weems. 2020. DPF-ECC: Accelerating Elliptic Curve Cryptography with Floating-Point Computing Power of GPUs. In 2020 IEEE International Parallel and Distributed Processing Symposium (IPDPS). IEEE, 494–504.

[12] Jeffrey Goldberg. 2017. Three layers of encryption keeps you safe when SSL/TLS fails. Technical Report. https://blog.1password.com/three-layers-of-encryption-keeps-you-safe-when-ssl/tls-fails/

[13] IEEE P1363 Working Group et al. 2003. Standard specifications for password-based public-key cryptographic techniques. IEEE P1363. 2/D11 (2003).

[14] Huseyin Hisil, Kenneth Koon-Ho Wong, Gary Carter, and Ed Dawson. 2008. Twisted Edwards curves revisited. In International Conference on the Theory and Application of Cryptology and Information Security. Springer, 326–343.

[15] Apple Inc. 2021. Apple Platform Security. Technical Report. https://manuals.info.apple.com/MANUALS/1000/MA1902/en_US/apple-platform-security-guide.pdf

[16] D. JABLON. 1999. B-SPEKE. Integrity Sciences White Paper (1999). https://ci.nii.ac.jp/naid/10010452557/en/

[17] Stanislaw Jarecki, Hugo Krawczyk, and Jiayu Xu. 2018. OPAQUE: an asymmetric PAKE protocol secure against pre-computation attacks. In Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 456–486.

[18] Hwancheol Jeong, Sunghoon Kim, Weonjong Lee, and Seok-Ho Myung. 2012. Performance of SSE and AVX instruction sets. arXiv preprint arXiv:1211.0820 (2012).

[19] William Kahan. 1996. IEEE standard 754 for binary floating-point arithmetic. Lecture Notes on the Status of IEEE 754, 94720-1776 (1996), 11.

[20] Cameron F Kerry and Charles Romine Director. 2013. FIPS PUB 186-4 federal information processing standards publication digital signature standard (DSS). (2013).

[21] Taekyoung Kwon. 2001. Authentication and Key Agreement via Memorable Password.. In NDSS.

[22] K. Leboeuf, R. Muscedere, and M. Ahmadi. 2013. A GPU implementation of the Montgomery multiplication algorithm for elliptic curve cryptography. IEEE (2013).

[23] Philip MacKenzie. 2002. The PAK suite: Protocols for password-authenticated key exchange. In IEEE P1363. 2. Citeseer.

[24] Michael Kerrisk. 2021. epoll(7) - Linux manual page. https://man7.org/linux/man-pages/man7/epoll.7.html [Online; accessed 16-June-2021].

[25] Michael Kerrisk. 2021. poll(2) - Linux manual page. https://man7.org/linux/man-pages/man2/poll.2.html [Online; accessed 16-June-2021].

[26] Michael Kerrisk. 2021. select(2) - Linux manual page. https://man7.org/linux/man-pages/man2/select.2.html [Online; accessed 16-June-2021].

[27] Montgomery and L. Peter. 1985. Modular multiplication without trial division. Math. Comp. 44, 170 (1985), 519–519.

[28] Kathleen Moriarty, Burt Kaliski, and Andreas Rusch. 2017. Pkcs# 5: Password-based cryptography specification version 2.1. Internet Eng. Task Force (IETF) 8018 (2017), 1–40.

[29] Junghyun Nam, Juryon Paik, H-K Kang, Ung Mo Kim, and Dongho Won. 2009. An off-line dictionary attack on a simple three-party key exchange protocol. IEEE Communications Letters 13, 3 (2009), 205–207.

[30] Stuart Oberman, Greg Favor, and Fred Weber. 1999. AMD 3DNow! technology: Architecture and implementations. IEEE Micro 19, 2 (1999), 37–48.

[31] Wuqiong Pan, Fangyu Zheng, Yuan Zhao, Wen-Tao Zhu, and Jiwu Jing. 2016. An efficient elliptic curve cryptography signature server with GPU acceleration. IEEE Transactions on Information Forensics and Security 12, 1 (2016), 111–122.

[32] Alex Peleg and Uri Weiser. 1996. MMX technology extension to the Intel architecture. IEEE micro 16, 4 (1996), 42–50.

[33] Colin Percival and Simon Josefsson. 2016. The scrypt password-based key derivation function. IETF Draft URL: http://tools.ietf.org/html/josefsson-scrypt-kdf-00.txt (accessed: 30.11. 2012) (2016).

[34] Mark Pilgrim. 2010. Dive into HTML5. URL: http://diveintohtml5.info/index.html (2010).

[35] Niels Provos and David Mazieres. 1999. Bcrypt algorithm. In USENIX.

[36] Venu Gopal Reddy. 2008. Neon technology introduction. ARM Corporation 4.

[37] Eric Rescorla and Tim Dierks. 2018. The transport layer security (TLS) protocol version 1.3. (2018).

[38] Jason Sanders and Edward Kandrot. 2010. CUDA by example: an introduction to general-purpose GPU programming. Addison-Wesley Professional.

[39] Nicolas Serrano, Hilda Hadan, and L Jean Camp. 2019. A complete study of PKI (PKI’s Known Incidents). Available at SSRN 3425554 (2019).

[40] SeongHan Shin and Kazukuni Kobara. 2012. Efficient Augmented Password-Based Key Exchange.