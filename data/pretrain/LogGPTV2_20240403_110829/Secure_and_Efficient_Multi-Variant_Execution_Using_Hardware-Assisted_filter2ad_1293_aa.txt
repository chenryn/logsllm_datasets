title:Secure and Efficient Multi-Variant Execution Using Hardware-Assisted
Process Virtualization
author:Koen Koning and
Herbert Bos and
Cristiano Giuffrida
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Secure and Efﬁcient Multi-variant Execution Using
Hardware-assisted Process Virtualization
Koen Koning
Herbert Bos
Vrije Universiteit Amsterdam
Vrije Universiteit Amsterdam
PI:EMAIL
PI:EMAIL
Cristiano Giuffrida
Vrije Universiteit Amsterdam
PI:EMAIL
Abstract—Memory error exploits rank among the most serious
security threats. Of the plethora of memory error containment
solutions proposed over the years, most have proven to be too
weak in practice. Multi-Variant eXecution (MVX) solutions can
potentially detect arbitrary memory error exploits via divergent
behavior observed in diversiﬁed program variants running in
parallel. However, none have found practical applicability in
security due to their non-trivial performance limitations.
In this paper, we present MvArmor, an MVX system that uses
hardware-assisted process virtualization to monitor variants for
divergent behavior in an efﬁcient yet secure way. To provide com-
prehensive protection against memory error exploits, MvArmor
relies on a new MVX-aware variant generation strategy. The
system supports user-conﬁgurable security policies to tune the
performance-security trade-off. Our analysis shows that MvArmor
can counter many classes of modern attacks at the cost of modest
performance overhead, even with conservative detection policies.
I.
INTRODUCTION
For more than a quarter of a century and despite a plethora
of proposed solutions, memory errors in C and C++ programs
still rank among the most serious security concerns today [1],
[2]. Even an unsophisticated memory error exploit like Heart-
bleed can easily compromise the private data of countless users
worldwide with serious consequences [3].
Modern operating systems deploy several measures to
protect against memory error exploits, but all of them can be
circumvented with varying amounts of effort. For example,
widely deployed security defenses such as data execution
prevention (DEP) [4], address space layout randomization
(ASLR) [5], and stack canaries [6] can all be bypassed by
modern code-reuse attacks [7], [8]. Stronger security defenses
proposed by the research community, either require recom-
pilation of the program and all shared libraries
[9], [10],
[11], [12] (limiting deployability), or protect only against a
subset of all possible memory attacks (limiting security). As
an example, popular control-ﬂow integrity (CFI) solutions that
protect against control-ﬂow diversion attacks [13], [14], [15],
[16], [17] are ineffective against data-only attacks (such as
Heartbleed) and possibly even against control-ﬂow diversion
attacks that piggyback on legal control ﬂows in the pro-
gram [18], [19], [20], [21].
The need for defenses that protect against arbitrary attacks
has led to a scramble for more comprehensive solutions—
most notably Multi-Variant eXecution (MVX)1 [22], [23].
1Also known as N-variant or dual execution and closely related to N-version
execution.
MVX systems, ﬁrst proposed by Cox et al. [23] in 2006, run
two or more memory-diversiﬁed but semantically equivalent
software variants in parallel and detect memory attacks from
semantically divergent behavior. These variants run on the
same machine (utilizing many-core CPUs) and synchronize
at the system call (syscall) level. While such systems have
been around for nearly a decade, the run-time performance
of traditional MVX implementations [24], [25], [26], [27] is
so poor—due to their costly syscall monitoring mechanisms—
to make them unusable in practice. Also, the limited variant
generation strategies in existing solutions often do not of-
fer adequate protection against more sophisticated memory
attacks. Recent MVX efforts have therefore focused either
on generating better variants so as to detect (some) modern
attacks but with no improvement in performance [26], [24], or
on improving the performance by efﬁcient in-process imple-
mentations which are, unfortunately, not suitable for security
enforcement purposes and target reliability instead [22].
In this paper, we propose MvArmor, an MVX system
which relies on a new secure and efﬁcient multi-variant de-
sign to counter arbitrary memory error exploits. Our design
leverages hardware-assisted process virtualization to place the
application-level MVX monitor directly in the syscall path of
each of the running variants. This approach is efﬁcient, as it
does not incur the frequent context switches from/to external
monitoring processes required by traditional process tracing-
based MVX implementations [24], [25], [26]. Furthermore,
given that the process virtualization layer can grant the MVX
monitor access to privileged CPU features [28], our design
is particularly amenable to optimizations [29], [30]. At the
same time, this approach is secure, as it relies on hardware-
enforced protection rings to completely isolate the execution
of the MVX monitor by construction—unlike prior in-process
implementations [22]—protecting it from known and unknown
attacks. Furthermore, unlike prior implementations running
entirely in the kernel [23], our design separates the application-
level MVX monitor from the rest of the system, limiting the
trusted computing base (TCB).
To counter arbitrary attacks effectively, we complement our
MVX design with a new MVX-aware variant generation strat-
egy, which seeks to provide strong security and performance
guarantees with no manual effort. Our strategy relies on per-
variant allocator abstractions to carefully and efﬁciently control
the memory layout across the running variants. This strategy
provides deterministic security guarantees against arbitrary
memory error exploits when possible—or strong probabilistic
guarantees otherwise. Finally, MvArmor supports ﬂexible secu-
rity policies tailored to different classes of modern attacks (e.g.,
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.46
431
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:38:26 UTC from IEEE Xplore.  Restrictions apply. 
arbitrary code execution or information disclosure), allowing
users to tune the performance-security trade-off according to
their needs.
Summarizing, our contributions are:
• We propose an MVX design based on hardware-assisted
process virtualization. Our design efﬁciently separates the
execution of the MVX monitor from both the running
variants and the underlying kernel, providing a superior
performance and security design point compared to prior
efforts.
• We propose a novel variant generation strategy based
on MVX-aware allocator abstractions. Our strategy is
efﬁcient and, when used in combination within our MVX
design, provides strong security guarantees against both
traditional and modern memory error exploits.
• We present MvArmor, a secure and efﬁcient MVX system.
MvArmor implements our design on top of Dune [28]
to protect commodity Linux programs and offers ﬂexible
security policies to encourage deployment. We evaluate
MvArmor with standard benchmarks and popular real-
world server programs and show that MvArmor provides
a powerful defense against arbitrary memory attacks
with much better performance than any existing security-
related MVX solution (9% overhead on SPEC CINT2006
and just 55% on average for server applications even with
the most conservative security policy).
II. BACKGROUND
Every MVX system contains two major components: a
monitor which runs and synchronizes the variants and a variant
generation strategy. Both have a strong impact on the security
and performance of the overall system and have been the focus
of extensive research in the past decade.
A. Monitor
The MVX monitor is responsible for comparing and syn-
chronizing the execution of the running process variants. These
variants all run on the same system, and ideally each have a
numbers of cores dedicated to them—we assume that a number
of cores can be explicitly dedicated to particularly security-
sensitive applications in modern many-core architectures. The
monitor itself might consist of several processes, for instance
one per variant, communicating via shared memory. The
entire MVX system (including the monitor) is designed to
be application- and user-transparent. For example, in the case
of a web server running under MVX, the user’s request will
get distributed to all variants. The monitor will also combine
the responses of all web server variants and give the user the
illusion she is directly talking to a single web server instance.
Furthermore, whenever these responses (or other operations)
are not equivalent across variants, the monitor can immediately
detect an attack attempt (as normal operations should never
trigger divergent behavior) and stop the variants before the
attacker could do any harm. In general, MVX does not lead
to more ﬁlesystem and socket I/O, as the monitor effectively
executes all syscalls, not every variant. On the other hand,
all variants will have to execute all instructions and memory
9
8
.
6
1
2
1
6
.
8
9
1
Passthrough Emulation
2
7
.
8
4
4
.
5
4
7
.
5
7
.
4
9
5
.
7
3
9
.
0
1
0
.
1
2
1
.
1
LK M
Ptrace
SBI
DBT
Dune
)
d
e
z
i
l
a
m
r
o
n
(
d
a
e
h
r
e
v
o
e
m
i
t
-
n
u
R
10
8
6
4
2
0
Overhead induced by several syscall
Fig. 1.
interposition strategies
(passthrough and emulation mode) for a microbenchmark repeatedly issuing
getpid syscalls.
reads/writes by themselves, leading to more overall CPU usage
and potential memory bandwidth issues.
In most cases, syscalls are used as synchronization points,
as they are generally the primary way for each process to
interact with the environment (e.g., ﬁle system operations or
socket operations). A monitor operating at the syscall level can
capture and control external behavior while still allowing for
individual variants to exhibit different internal behavior.
A monitor must be able to intercept syscalls and their
arguments to compare process behavior across variants. It must
also be able to rewrite arguments, block syscalls, and modify
the return value (or memory) to ensure uniform and side effect-
free syscall handling across all the variants. In general, the
monitor needs to ensure all the variants are exposed to the
same environment view and information (e.g., PIDs) to avoid
unintentionally divergent behavior.
Several strategies have been used in prior MVX systems
to intercept syscalls, but all of them suffer from important
performance and/or security limitations. To gather insights
into these limitations, we evaluated the run-time overhead
induced by existing syscall interposition strategies for a simple
microbenchmark repeatedly issuing getpid syscalls. Figure 1
presents our results in both passthrough (i.e., forwarding the
original syscall to the underlying OS kernel) and emulation
(i.e., immediately returning the result to the application) mode.
As shown in the ﬁgure, an MVX monitor based on a
loadable kernel module (LKM) implements by far the most
efﬁcient syscall interposition strategy in both modes of op-
eration, as it does not introduce additional context switches
and can directly access the process state. The problem with
this strategy, adopted by early MVX systems [23], is that
the monitor runs entirely in the kernel. This results in a
substantial increase of the trusted computing base (TCB) and
poor deployability: a single bug in the monitor could affect
the entire system, and the internal kernel API is very volatile.
the spectrum lie traditional
ptrace-based MVX implementations [24], [31], [32], [25],
[26], which rely on the UNIX process tracing API to imple-
ment a deployable but highly inefﬁcient syscall interposition
strategy. This strategy introduces multiple context switches be-
tween the monitor and the traced process per syscall, resulting
the opposite side of
At
432
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:38:26 UTC from IEEE Xplore.  Restrictions apply. 
in by far the highest overheads (up to ∼217 times) for our
microbenchmark. On 64-bit systems a monitor using ptrace
cannot block syscalls, making emulation even more expensive
than passthrough. Syscall monitoring using ptrace is also
susceptible to TOCTOU attacks [33], which are hard to resolve
due to the large latency between operations and limited access
between the monitor’s and the application’s address spaces.
More recent MVX monitor implementations rely on static
binary instrumentation (SBI) to rewrite the binary and replace
any syscall instruction (e.g., int $0x80 or syscall) with
a call into the monitor. As shown in Figure 1, this syscall
interposition strategy is much more efﬁcient (up to ∼5 times
overhead, based on the Dyninst SBI framework [34]), as it
requires no context switches and even no mode switches in
emulation mode. Unfortunately, this strategy is not generally
suitable for security applications, as an attacker can tamper
with the in-process monitor state or simply run uninstru-
mented unaligned syscall instructions (not part of the normal
instruction stream, as x86 does not enforce alignment) to
bypass syscall interposition and evade detection altogether. An
implementation based on dynamic binary translation (DBT), in
turn, would be able to instrument both aligned and unaligned
instructions and solve the latter problem, at the cost of slightly
higher syscall interposition overhead (up to ∼9 times overhead
in our experiment, based on the DynamoRIO DBT frame-
work [35]), but also a non-trivial impact during syscall-free
execution. To fully address the former problem, a DBT-based
solution needs to deploy additional instrumentation [16] (e.g.,
software-based fault isolation [36]), but this would also further
increase the overhead during syscall-free execution.
MvArmor, instead, relies on hardware-level process virtual-
ization to implement syscall interposition. For this purpose, we
use Dune, which virtualizes regular Linux processes and places
them in their own (hardware-supported) virtual environment.
As shown in Figure 1, this strategy is very efﬁcient compared
to other techniques (up to ∼7 times overhead on getpid())
and meets all our security demands: small systemwide TCB,
fully isolated monitor with no in-process state, non-bypassable
(trap-based) syscall interposition mechanism. Furthermore, the
excellent performance in emulation mode and the ability to ac-
cess privileged CPU features provide interesting opportunities
for libOS-style optimizations [29], [30].
B. Variant generation
The variant generation strategy has a strong impact on
the classes of attacks addressed by the resulting MVX sys-
tem. Ideally, any attack should eventually result in divergent
behavior among variants. For instance, relying on ASLR for
variant generation makes it unlikely that two or more variants
share code pages at the same addresses, making code-reuse
attacks such as ROP [37] more difﬁcult. By extending this
strategy to use MVX-aware (i.e. non-overlapping) address
spaces, traditional code-reuse attacks can be fully prevented.
This is because no code pointer can ever be valid in more than
one variant, and thus will cause a fault while dereferencing it in
all but one of the variants [23], [25], [27]. While this approach
will also stop arbitrary memory read and write attacks that
rely on absolute memory object locations (e.g., data pointer
overwrites), it cannot stop attacks that only rely on the relative
distance between memory objects. For instance, stack- or
heap-based buffer overreads that disclose private data (e.g.,
cryptographic keys) [3] and overﬂows that corrupt sensitive
non-pointer data (e.g., UIDs) [38] will still work reliably, as
these attacks only use relative memory accesses.
Alternative variant generation strategies include reversing
the direction of the stack [24] and randomizing the instruction
set [23]. These strategies add little additional security (e.g.,
addressing only stack-based and code injection attacks, respec-
tively) and often introduce non-trivial overhead by themselves.
MvArmor, in contrast, relies on a new MVX-aware variant
generation strategy, which seeks to minimize the run-time
performance impact while providing strong security guarantees
against arbitrary classes of attacks that rely on both absolute
and relative accesses in memory. Security policies allow the
user to choose between increasing levels of protection (both
probabilistic and deterministic), at the cost of a larger perfor-
mance overhead.
Finally, the advantage of using an MVX system over other
approaches with the same goals is that it can simultaneously
protect against multiple of these types of attacks with less
overhead (given enough spare CPU cores and resources), and
does not generally require access to the source or recompilation
of system libraries [10], [9].
III. THREAT MODEL
We assume a strong threat model where an attacker can
interact with the target program repeatedly, exploiting vulner-
abilities to read or write arbitrary data from/to memory. In par-
ticular, we assume an attacker can rely on both relative (e.g.,
buffer overread/overﬂow and partial pointer overwrites) and
absolute arbitrary memory read/write primitives (e.g., pointer
overwrites). We also assume both spatial (e.g., buffer over-
ﬂows) and temporal (e.g., use-after-free) memory attacks [39].
Based on these primitives, we assume an attacker may pursue
any of the following goals (in line with the characteristics of
modern attacks [18], [40]):
• Arbitrary code execution: An attacker could execute
arbitrary code, for example issuing an execve syscall
using ROP [37] or other code-reuse techniques [41].
• Information disclosure: An attacker could leak sensitive
data from the target program, for example cryptographic
keys as in the case of Heartbleed [3].
• Information tampering: An attacker could tamper with
sensitive data, for example UIDs to escalate privileges, or
mount other non-control-data attacks [38], [40].
IV. OVERVIEW
Figure 2 shows the main components of MvArmor, which
all run inside a virtualized environment [28]. Additionally,
MvArmor can provide the same functionality for other syscall
interception methods by simply replacing the syscall frontend
and backend components. At startup, the variant generator
(Sec. V-A) spawns an application instance for every variant,
using an MVX-aware variant generation strategy in order to
protect applications from all the previously mentioned attack
vectors. The security manager (Sec. V-B), in turn, generates
security policies, providing a trade-off between security and
433
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:38:26 UTC from IEEE Xplore.  Restrictions apply. 
performance for the rest of the components. These security
policies can be deﬁned by the user and depend on the classes
of attacks considered.