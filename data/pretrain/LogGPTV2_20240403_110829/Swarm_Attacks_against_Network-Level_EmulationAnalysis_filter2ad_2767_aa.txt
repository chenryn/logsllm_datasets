title:Swarm Attacks against Network-Level Emulation/Analysis
author:Simon P. Chung and
Aloysius K. Mok
Swarm Attacks against Network-Level
Emulation/Analysis
Simon P. Chung and Aloysius K. Mok(cid:2)
University of Texas at Austin, Austin TX 78712, USA
Department of Computer Sciences,
{phchung,mok}@cs.utexas.edu
Abstract. It is always assumed that if the attackers can achieve their
goal by exploiting a vulnerability once, they won’t exploit it twice. This
assumption shapes our view of what attacks look like, and aﬀects the
design of many security systems. In this work, we propose the swarm
attack, in which the attacker deliberately exploits the same vulnerability
multiple times, each intended to carry out only a small part of the attack
goal. We have studied eight systems that detect attacks using network-
level emulation/analysis, and ﬁnd them surprisingly vulnerable to attacks
based on this strategy.
Keywords: Decoder detection; network-level emulation; network IDS;
evasion; swarm attacks.
1 Introduction
In its simplest, most common form, a control hijacking attack works as follow: the
attacker sends in one single malicious input with the proper “protocol frame”
to trigger the targeted vulnerability, together with a self contained payload
that will achieve the attacker’s goal once executed. When the malicious input is
processed, certain control data structure will be overwritten, and this results in
an almost instant transfer of control to the attacker’s payload. We believe
many security systems are designed with this simple model of attacks in mind,
and it is usually implicitly assumed that the attacker gains nothing by making
the attack more complicated (or less “eﬃcient”). In other word, if they can get
all their attack code executed with one instance of control hijacking, they will
not divide their code into multiple pieces and execute them through multiple
exploitations of the vulnerability. Similarly, the attacker will overwrite the piece
of control data that leads to the control hijacking with the minimum delay.
In this paper, we propose the attack strategy where the attacker violates the
above assumption and be deliberately “ineﬃcient” in their attacks, and study
the implications of such strategy to systems that try to locate executable code
within network traﬃc and determine if those are attack payload. We call our
proposed attack the swarm attack, and will refer to target systems described
(cid:2) The research reported here is supported partially by a grant from the Oﬃce of Naval
Research under contract number N00014-03-1-0705.
R. Lippmann, E. Kirda, and A. Trachtenberg (Eds.): RAID 2008, LNCS 5230, pp. 175–190, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
176
S.P. Chung and A.K. Mok
above network-level emulation/analysis systems. Surprisingly, we ﬁnd that
by deliberately dividing the attack code into many pieces and have each executed
through a diﬀerent exploitation of the same vulnerability, the attacker can evade
at least seven out of the eight network-level emulation/analysis systems that we
have studied [1,3,13,14,15,21,24,25] (we believe the third one, [13], may detect
our attack if speciﬁcally trained to, but can only do so at the cost of high false
positives). The design of our attack is simple; the attack will be divided into
n+1 instances of control hijacking. Each of the ﬁrst n instances will have a small
payload to write part of the real decoder to a predetermined area in the attacked
process’ address space, and the (n + 1)st instance will direct the hijacked control
to the decoder we just constructed. Under this attack, the number of unencoded
instructions in each attack instance can be reduced to below 10, and all these
unencoded payload will appear to serve no useful purpose for an attack. Note
that the need to have multiple instances of control hijacking on the target system
places certain constraints on our swarm attack. However, we will argue in Sect.
4.1 that the attack can be used against many vulnerable network servers, and
there are techniques to overcome this constraint even if the target system is
single-threaded. Finally, we believe if network-level emulation/analysis systems
continue to consider traﬃc separately, such small, simple payload will be very
hard to detect with low false positives; the payload behavior is so simple that the
chance of ﬁnding such behavior in random data by coincidence is non-negligible.
The rest of the paper will be organized as follow: in Sect. 2, we will present
related work in the area of network-level emulation/analysis based detection, and
attacks against other types of network intrusion detection systems. In Sect. 3, we
will present the details of the proposed swarm attack, and address some practical
issues that may arise in the implementation of the attack in Sect. 4. Analysis of
how the proposed attack evade network-level emulation/analysis will be given in
Sect. 5, and in Sect. 6, we will discuss whether it is possible to improve existing
systems to detect the attack. Finally, we conclude in Sect. 7.
2 Related Work
There are generally three approaches for network intrusion detection, and the
most traditional of which is signature matching. The second approach is anom-
aly detection, which compares properties of observed traﬃc against properties of
known good traﬃc. Network anomaly detection systems usually treat the traﬃc
under analysis as a bag of bytes, and use statistical methods to determine if this
bag of bytes appears to be an attack. For example, PAYL [23] distinguishes nor-
mal traﬃc from attacks based on byte frequency distribution. The last approach,
which we call the network-level emulation/analysis, is the focus of our work. The
main idea behind this approach is to locate executable code within the incoming
traﬃc, and analyze the extracted code to determine if it is random data that
coincidentally appears to be syntactically correct machine instructions or actual
attack code. We note that any useful attack strategy must be able to defeat all
three kinds of detectors. However, in this work, we will focus on evading systems
Swarm Attacks against Network-Level Emulation/Analysis
177
based on network-level emulation/analysis, which is the least attacked among
the three approaches. As for the evasion of the other two mechanisms, we will
rely on existing techniques against them.
2.1 Analyzing Code within Network Traﬃc
The earliest network-level emulation/analysis systems are designed speciﬁcally
for buﬀer overﬂow attacks. In particular, they are designed to detect the sled in
these attacks; since the attacker does not know the exact address where their
payload will be found, the hijacked control is usually directed to an area ﬁlled
with NOPs that precedes the actual payload. This technique allows the attack
to succeed even though the attackers only have a rough estimate of where their
payload will be located on the stack or the heap, and the area of NOP is called
the sled. Sled-detection systems are usually very simple. For example, [21] scans
through the incoming traﬃc and declares it as malicious if it ﬁnds 30 or more
consecutive valid instructions in the traﬃc. Similarly, [1] considers the incoming
traﬃc malicious if it contains an instruction sequence that spans at least 230
bytes, with each of its suﬃx also being a valid instruction sequence.
The obvious problem with sled-detection is that not all attacks contain sleds.
In fact, with the use of register springs, many buﬀer overﬂow attacks can avoid
using sled. Thus a second generation of detection systems is developed to iden-
tify “meaningful” code within network traﬃc. For example, [24] will classify
incoming traﬃc as malicious if: (1) it contains two or more separate instruction
sequences for function calls (including the instructions for placing arguments
on the stack and the actual control transfer), or (2) it contains a sequence of
14 or more “useful” instructions that does not cause any data ﬂow anomaly
(i.e. they deﬁne data values once before use). As another example, [3] deﬁnes
malicious traﬃc as one that contains either obvious library/system calls (identi-
ﬁed by hardcoded jump target and interrupt instructions after initializing eax),
return/indirect control transfer with target address being properly set up by
preceding instructions found in the traﬃc, or a proper loop structure that ap-
pears to be a decoding routine in polymorphic shellcode. The weakness of this
second generation of systems is that they are not very eﬀective against polymor-
phic shellcode, in which only the decoder appears as valid instructions in the
network traﬃc, and the rest of the attack code is encoded. To address this prob-
lem, systems are designed to target properties speciﬁc to the decoding routines
of polymorphic shellcode. The most commonly used property is the presence
of GetPC code, which allows a position-independent shellcode to ﬁnd out its
own location, as well as the address of the payload to be decoded. In both
[14,25], the presence of GetPC code (e.g. call, fnstenv) is used both as a pre-
condition for further analysis, and an indicator of the beginning of the decoding
routine. With this location of the GetPC code, [25] conﬁrms that the identi-
ﬁed code is indeed a decoder if it is self modifying and involves a loop which
contains indirect write instructions with target addresses that are diﬀerent in
each iteration. On the other hand, after identifying the GetPC code, [14] char-
acterizes the decoder by a signiﬁcant number (6 or more) of reads from diﬀerent
178
S.P. Chung and A.K. Mok
locations within the analyzed traﬃc itself. A machine learning based approach
is used in [13], where a neural network is employed to determine if a sequence of
instructions is a decoder, based on the frequency at which diﬀerent types of in-
structions appears in that sequence. Even though [13] shows that neural network
trained with decoder from one polymorphic engine can identify decoder routines
from another polymorphic engine, we believe retraining is necessary if there is
a drastic change in the decoding algorithm. Finally, as an extension of [14], [15]
argued that some non-self-contained polymorphic shellcode does not have any
GetPC code or reads to bytes within the traﬃc itself. [15] thus proposed two new
properties for identifying polymorphic shellcode: writing to a signiﬁcant number
of diﬀerent memory locations, and then executing those locations that has been
written to.
2.2 Evading Signature-Based and Statistics-Based Detectors
Polymorphic shellcode, which is the focus of many systems described in the pre-
vious section, is originally designed to evade signature-based defenses. The idea
is simple, to avoid being matched by signatures generated based on previous in-
stances of the same attack, the attacker will make every attack instance appears
diﬀerently. This goal is usually achieved by having the attack code encoded by
some very simple “keyed-encryption” algorithm, and has the code for each attack
instance encoded under a diﬀerent key. In order to allow correct execution of the
attack code, we need to attach a decoder to each attack instance, provide it with
the correct key and execute it to decode the real payload. This way, only the
decoding routine will remain constant throughout all attack instances. To avoid
the decoder from being targeted by signature-matching, various “polymorphic”1
engines have been developed to make the routine slightly diﬀerent in every at-
tack instance. Common techniques for achieving this goal include instruction
substitution [6,10] and insertion of junk instructions [10].
Even though the encoding of the actual payload, together with the metamor-
phism applied on the decoder will successfully evade a signature-based detector,
the resulting attack instances may still have very diﬀerent properties from nor-
mal traﬃc, and thus can be detected by some kind of anomaly detection. In [8],
a technique is proposed to encode the payload so that it will have the same byte
frequency distribution as the observed normal traﬃc, and evade anomaly detec-
tion systems based on byte frequency (e.g. PAYL [23]). The idea is extended in
[7] so that encoded payload (using either xor-based or byte-substitution-based
encoding) which satisﬁes any normal traﬃc proﬁle (expressed in a ﬁnite-state
machine) can be found.
The diﬃculties of detecting the decoder of a polymorphic attack with either
a signature-based or statistical-based approach are also demonstrated in [20],
but in an unconventional way. Instead of showing concrete ways to defeat the
studied defenses, [20] only presents an “existential proof”, showing that n-byte
sequences that exhibit decoder-like behavior are distributed over a very large
1 Which are actually “metamorphic” engines.
Swarm Attacks against Network-Level Emulation/Analysis
179
span of all possible n-byte sequences, and uses this as an evidence to suggest
the actual decoder population may have a similar span, and thus it will be very
diﬃcult to characterize all of them with signatures or statistical model. What is
of interest are the properties [20] used to deﬁne decoder behavior: self-writing
(containing instructions that write to nearby locations) and self-modiﬁcation
(containing instructions that write to nearby locations using values read from
another nearby location). This further illustrates the general perception of what
decoders should look like, and can be very useful when we design our attack to
evade systems that detect instruction sequences which appear to be decoding
routines.
2.3 Other Related Attacks
In general, attacks for evading data-non-executable defenses can achieve the
same goal as ours; they carry out the attack without executing (or placing)
any code within the network traﬃc, thus there will be nothing for network-level
emulation/analysis systems to detect. However, these attacks are usually much
more diﬃcult to construct than those that use highly obfuscated/polymorphed
shellcode. For example, [18] makes extensive use of the ret-to-libc technique,
and allows the attacker to “execute” arbitrary code by chaining up “gadgets”,
each being code fragment within libc which contains instructions for achieving
some primitive binary-level operations (e.g. data movement), followed by a re-
turn instruction that will pass the control to the next gadget. However, there
seems no easy way to automatically locate all the gadgets needed for some set
of primitive operations, and these gadgets can only be invoked by using hard-
coded addresses, which may harm the portability of the resulting attack, and can
provide a lot of materials for signature matching. As for the non-control-data
attack in [2], the logic of the attacked program is altered through the manipu-
lation of its critical data, and such attacks cannot be designed without intimate
knowledge of the internals of the victim program, as well as the whereabouts
of its critical data. Once again, it is unclear to us whether [2] can be eﬀec-
tive against signature-based or statistics-based defenses. Furthermore, standard
techniques (like [6,8,10]) for evading detection, that mostly focus on code mor-
phing/encoding, are not applicable to attacks against data-non-executable, since
they don’t involve any code at all. Finally, an attack of similar ﬂavor but dif-
ferent objective to ours is [17], where a technique for evading signature-based
detection systems is presented. The idea in [17] is similar to ours in the sense
that evasion is achieved through breaking up the attack into many small pieces,
and inserting some useless pieces in between (though the attacks generated by
[17] still exploit the target vulnerability only once).
To conclude our discussion of related work, we note that techniques for evading
the three types of detection systems can be easily combined; while the technique
in [7] only works for certain types of encryption/decryption routine, both the
technique we are going to present and the metamorphism employed in [6,10] can
work on any kind of decoders. Thus, [7] will determine the decryption routine we
can use, and provide an encrypted payload that can blend in with normal traﬃc,
180
S.P. Chung and A.K. Mok
our swarm attack will modify the routine to remove any behavior expected of a
decoder (or any non-polymorphic malicious code), and the metamorphism will
be applied to the modiﬁed routine so that it appears diﬀerently in every attack
instance.
3 Swarm Attack against Network-level
Emulation/Analysis
As we have mentioned in the introduction, the idea of swarm attack against
network-level emulation/analysis systems is to modify a control hijacking attack so
that the decoder in its polymorphic shellcode will not appear in any attack traﬃc.
We achieve this goal by creating the decoder inside the attacked process’ address
space using multiple instances of the attack, with each attack instance writing a
small part of the decoder at the designated location. When we have ﬁnished build-
ing the decoder, we will send in one last attack instance which serves two purposes;
ﬁrst of all, it will hijack the control of the attacked process to start executing the
decoder, and secondly, it will carry the encoded actual payload.
Note that the decoder under this swarm attack will have to be modiﬁed to
locate the actual payload (which may not be found using the same method as in