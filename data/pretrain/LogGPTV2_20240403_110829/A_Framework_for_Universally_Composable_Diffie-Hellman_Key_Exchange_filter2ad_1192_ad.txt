become known; otherwise the environment could calculate
gab on its own and distinguish the real from the ideal world.
We note that the commitment problem is not speciﬁc to
our modeling of DH keys, but rather is a general issue in
universal composability models (see, e.g., [29]). To adress
this problem, we restrict the environment (the higher level
protocol that uses Fcrypto) to not cause the commitment
problem. That is, once an unknown exponent e has been
used to create an unknown DH key gc, the environment may
no longer manually retrieve e from Fcrypto, create a DH key
from e and the corresponding DH share ge (yielding ge2),
or use e with a DH share h where Fcrypto does not know
the secret exponent of h. Observe, however, that most real-
world protocols meant to achieve perfect forward secrecy
fulﬁll this restriction: In such protocols, an exponent e is
generated, used exactly once to generate a DH key, and then
deleted from memory. Hence, after a key was created, the
protocol will never access the exponent in any way, and thus,
also never cause the commitment problem. For example, this
holds true for all protocols analyzed in Section VI. It might
be possible to relax these restrictions, enabling an analysis
of protocols that re-use the same exponent, by using the non-
standard PRF-ODH assumption5 [5], [6] instead of the DDH
assumption. We want to explore a formulation of Fcrypto
based on this assumption in future work.
A similar commitment problem exists for encryption and
key derivation. However, again most real-world protocols do
not cause this problem (see also [19]). This leads us to the
following formal restriction of environments:
We say that an environment E does not cause the commit-
ment problem (is non-committing), if the following happens
with negligible probability only: i) in a run of E |Fcrypto, after
an unknown key k has been used to encrypt a message or
derive a new key, k becomes known later on in the run, i.e.,
is marked known by Fcrypto, and ii) in a run of E |Fcrypto,
after an unknown exponent e or the corresponding group
element ge has been used to create an unknown DH key k,
e becomes known later on in the run, i.e., is marked known
by Fcrypto.
Besides the commitment problem, we also have to take
care of key cycles. As mentioned, standard security def-
initions such as IND-CCA2, which we want to use for
5Informally, the PRF-ODH assumption states that, given a Difﬁe-Hellman
key gab which is used to key a pseudo random function f (gab, s), no ad-
versary that knows ga and gb can distinguish a challenge output of the PRF
from random, even when given access to an oracle O(h, s) := f ((h)a, s)
(where h is a group element and s is a salt).
our realization, do not provide any security in this case.
Indeed, security in the presence of key cycles is usually not
required: real-world protocols generally do not encrypt keys
anymore once these keys have been used for the ﬁrst time.
Obviously, such protocols also do not produce key cycles.
This observation leads to the following natural restriction of
environments:
An environment E is called used-order respecting if the
following happens with negligible probability only: in a run
of E |Fcrypto an unknown key k (i.e., k is marked unknown in
Fcrypto) which has been used for encryption or key derivation
(cid:2) used
at some point is encrypted itself by an unknown key k
for the ﬁrst time later than k.
We call an environment well-behaved if it is used-order
respecting and does not cause the commitment problem.
For such well-behaved environments, we can show that
Pcrypto ≤R Fcrypto if all cryptographic primitives fulﬁll the
standard cryptographic assumptions. As explained above,
many real world protocols fulﬁll the requirements of well-
behaved environments, and hence, if they are analyzed using
Fcrypto, one can replace Fcrypto with its realization afterwards.
In the following theorem, formally, instead of considering
a speciﬁc set of environments, we use a machine F∗ to man-
ually enforce the properties of well-behaved environments
for all environments. The machine F∗ is plugged between
the environment and the I/O interface of Pcrypto/Fcrypto and
forwards all messages while checking that the conditions of
well-behaved environments are fulﬁlled.6 If at some point
one of the conditions is violated, instead of forwarding the
current message, F∗ stops and blocks all future communi-
cation. We obtain the following theorem:
Theorem 2. Let Σunauth-enc, Σauth-enc, Σpub be encryption
schemes, Σmac be a MAC scheme, Σsig be a signature
scheme, GroupGen be an algorithm as above, F be a family
(cid:2) be a family of pseudo-
of pseudo-random functions, and F
random functions for GroupGen. Let Pcrypto be parameter-
ized with these algorithms. Let Fcrypto be parameterized with
GroupGen and a leakage algorithm L which leaks exactly
the length of a message. Then,
F∗ |Pcrypto ≤R F∗ |Fcrypto
if Σunauth-enc and Σpub are IND-CCA2 secure, Σauth-enc is
IND-CPA and INT-CTXT secure, Σmac and Σsig are UF-CMA
secure, GroupGen always outputs groups with n ≥ 2 and
such that the DDH assumption holds true for GroupGen.7
6Note that this can be done by observing the I/O trafﬁc and asking Fcrypto
about the corruption status of keys.
7We refer the reader to our technical report [24] for the formal deﬁnitions
of these security notions. We have to require n ≥ 2 because the trivial group
which contains only the neutral element fulﬁlls the DDH assumption, but
is not suitable for realizing Fcrypto. In particular, collisions of randomly
chosen exponents do not happen with a negligible probability if there is
only one element.
889
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:54 UTC from IEEE Xplore.  Restrictions apply. 
As mentioned, the proof of this theorem is quite involved.
It consists of a series of hybrid systems where we replace
parts of Pcrypto with the ideal versions used in Fcrypto
and then show that no environment can distinguish these
replacements. Each of these steps involves several reductions
and hybrid arguments itself. In particular, some of these
reductions are intertwined with each other, as, e.g.,
the
security of symmetric encryption and key derivation rely on
each other. We provide a proof sketch in Appendix A; a full
proof with all details can be found in our technical report
[24].
V. IDEAL FUNCTIONALITIES FOR KEY EXCHANGE WITH
KEY USABILITY
key-use differs.
In this section, we present our ideal functionalities for
key exchange, one functionality for mutual authentication,
denoted by F MA
key-use, and one for unilateral authentication,
F UA
key-use. These functionalities are of general interest and
should be widely applicable. In Section VI, we use them in
our case studies. In the following, we ﬁrst present F MA
and then describe how F UA
key-use
key-use. The ideal functionality F MA
The functionality F MA
key-use
is inspired by an ideal key exchange functionality from [11],
but has important differences, which among others makes it
more widely applicable (see the comparison at the end of
this section). In particular, neither unilateral authentication
nor perfect forward secrecy were considered in [11].
Similar to other exchange functionalities (e.g., [30]),
F MA
key-use guarantees that an uncorrupted instance that outputs
a session key is in a session with an instance of its intended
communication partner and only uncorrupted instances from
the same session will have access to the session key.
However, F MA
key-use) has several features that
distinguishes it from key exchange functionalities typically
considered in the literature.
key-use (and also F UA
key-use never directly outputs session keys to users.
Instead it provides a user with a pointer and allows the user
to perform ideal cryptographic operations with it (among
others, symmetric encryption, MACing, deriving new keys
from the session key which can then be used further). This
is an important feature as higher level protocols that use
F MA
key-use, such as secure channel protocols, can use the session
key still in an ideal way, which simpliﬁes the analysis of
higher level protocols and avoids reduction proofs.
First, F MA
Second, unlike most other formulations of key exchange
functionalities in the literature, the above feature also makes
it possible to realize F MA
key-use by key exchange protocols that
use the session key during the key exchange. Most key
exchange functionalities simply output a session key that
was chosen uniformly at random, and thus, a realization
must ensure that the session key is indistinguishable from a
random one. However, this is not the case if the key was used
during the actual key exchange, e.g., to encrypt a message,
as then the environment can check whether the key that
Formally, F MA
key-use.
is output after a successful key exchange can decrypt said
message. In contrast, our functionality does not output the
session key but only gives access to idealized cryptographic
operations. As long as a key exchange protocol ensures
separate domains of messages that are, e.g., encrypted with
the session key during and after the key establishment phase,
it can realize F MA
Third, almost all formulations of functionalities (including
key exchange functionalities) in the universal composability
literature use so-called pre-established session IDs [11]:
users somehow, outside of the protocol, agree on a (global)
unique session ID and then use that session ID to access the
same ideal functionality. As argued in [11], this hinders the
faithful analysis of real-world protocols where such global
session IDs are not a priori available; session IDs are often
rather implicitly established during the protocol run. In fact,
as illustrated in [11], an insecure key establishment protocol
can be transformed into a secure one by assuming that global
session IDs have been established prior to the actual protocol
run. Therefore, F MA
key-use does not rely on pre-established
session IDs. Instead, just as Fcrypto, it uses local session IDs
that are chosen and managed by the higher level instances.
Local sessions (of an initiator and a responder) are combined
by the adversary/simulator into a global session sharing one
key during the protocol run.
key-use is a machine that has two I/O tapes
role), one network
tI and tR (initiator and responder
(cid:2)
(cid:2)
R that connect
to
I and t
tape, and two I/O tapes t
Fcrypto, which is used as a subroutine by F MA
key-use. F MA
is parameterized with a symmetric key type tkey ∈
key-use
{pre-key, unauthenc-key, authenc-key, mac-key} which
determines the type of the keys that are output after a suc-
cessful key exchange. Similarly to Fcrypto, F MA
key-use handles
all (local) sessions for all users. Messages from/to any I/O
tape are expected to be preﬁxed with (pid , lsid ) where
pid ∈ {0, 1}∗ is a party ID and lsid ∈ {0, 1}∗ is a local
session ID managed by the higher level protocol. Thus, a
user participating in a key exchange can be fully identiﬁed
by (pid , lsid , r ), where r ∈ {I, R} speciﬁes the role of that
user (and the tape she is using).
key-use maintains a mapping state :
{0, 1}∗ → {⊥, started, inSession, exchangeFinished,
to ⊥ for ev-
sessionClosed, corrupted},
ery input which stores the current state for every user
(pid , lsid , r ). The functionality also stores the PID of the
intended partner of a user (pid , lsid , r ) via a mapping
partner : {0, 1}∗ → {0, 1}∗. The functionality provides the
following operations to higher level protocols:
- A user (pid , lsid , r ) with state(pid , lsid , r ) = ⊥ can
start a key exchange by sending m = (InitKE, pid(cid:2)
(cid:2)),
, m
where pid(cid:2)
denotes the party ID of the intended partner
(cid:2) ∈ {0, 1}∗ is an arbitrary bit string which the
and m
realization might use in the key exchange protocol. Upon
receiving this message, F MA
key-use sets state(pid , lsid , r ) :=
The functionality F MA
initially set
890
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:54 UTC from IEEE Xplore.  Restrictions apply. 
key-use
, and forwards
state(pid , lsid , r )
(pid , lsid , r ) with
started, sets partner(pid , lsid , r ) := pid(cid:2)
(m, (pid , lsid , r )) to the adversary.
=
- A user
exchangeFinished can use F MA
key-use to access symmetric
operations of the subroutine Fcrypto. To be more precise,
F MA
forwards the commands New, Equal?, Enc,
Dec, Mac, MacVerify, and Derive to Fcrypto on tape
r, r ∈ {I, R}. Upon receiving a response of Fcrypto,
(cid:2)
t
F MA
key-use forwards this response to the user while internally
keeping track of all pointers that the user has access to.
state(pid , lsid , r )
=
- A user
session
in
exchangeFinished
F MA
by which
sets
she loses access
state(pid , lsid , r )
the
adversary with a restricting message (CloseSession,
(pid , lsid , r )),8 and, after receiving any response from
the adversary, returns OK to the user.
to all of her keys. F MA
key-use
:= sessionClosed, notiﬁes
her
CloseSession,
(pid , lsid , r ) with
sending
close
key-use
can
by
state
corrupt
adversary
a
can
send
user where
(Corrupt, (pid , lsid , r ))
∈
state(pid , lsid , r )
is updated
Corruption is modeled in such a way that the adversary may
corrupt instances before a key exchange and after they have
closed a session, but not while a session is active (see the
discussion below). More precisely:
- The