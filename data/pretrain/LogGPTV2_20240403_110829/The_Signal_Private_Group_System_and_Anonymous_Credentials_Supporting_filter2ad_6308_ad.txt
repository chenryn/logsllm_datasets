3. M3 := Gm3
An AuthCredentialResponse contains an algebraic MAC for the credential, and also
the proof of issuance πI . The user veriﬁes this proof in the GetAuthCredential operation,
using attribute values (M1, M2) which the user derives from their own UID.
5.10 Proﬁle Key Credentials
A ProﬁleKeyCredential has four attributes. The ﬁrst two credential attributes encode the
UID and are the same as the AuthCredential, and the last two encode the ProﬁleKey:
1. M1 = HashToG(UID),
2. M2 = EncodeToG(UID),
3. M3 = HashToG(ProﬁleKey, UID), a hash of the proﬁle key and UID,
4. M4 = EncodeToG(ProﬁleKey), an encoding of the proﬁle key.
21
Blind Issuance Issuance of ProﬁleKeyCredentials diﬀers from AuthCredentials because
the ProﬁleKeyCredential attribute values are not all known to the server.
Instead, the user and server will perform a blind issuance protocol, based on the same
idea as in [CMZ14]. The ProﬁleKeyCredentialRequest will contain an Elgamal encryption
of the blinded attributes (M3, M4) and a proof that these values match a ProﬁleKey-
Commitment.
A ProﬁleKeyCommitment commits to the values M3 and M4. Since M3 and M4 are
group elements and not scalars, we can’t simply use Pedersen’s commitment scheme. In-
j3M4,
stead, a ProﬁleKeyCommitment is the triple of values (J1, J2, J3) = (Gj1
j3) where j3 = HashToZq(ProﬁleKey, UID). Note that this commitment scheme is
Gj3
not perfectly hiding, but since ProﬁleKeys are assumed to have high min-entropy, this is
suﬃcient. Further, the commitment is deterministic since (M3, M4, j3) are derived from
the ProﬁleKey and UID, thus any user with these values can reconstruct the ProﬁleKey-
Commitment.
j3M3, Gj2
Upon receiving a ProﬁleKeyCredentialRequest that matches the user’s ProﬁleKey-
Commitment the server will use the homomorphic properties of Elgamal encryption to
create an encrypted MAC and return it to the user, along with a proof of correctness, in a
ProﬁleKeyCredentialResponse. The user will verify the proof and then decrypt the MAC
to recover their ProﬁleKeyCredential.
To generate the ProﬁleKeyCredentialRequest the user generates an Elgamal key pair
(y, Y = Gy), where G is a generator of G. The blind attributes (M3, M4) are encrypted as
(D1, D2) = (Gr1, Y r1M3)
(E1, E2) = (Gr2, Y r2M4)
for random r1 and r2. The ProﬁleKeyCredentialRequest contains the ciphertexts, the
public key Y , and a proof that the encrypted values match the commitment (J1, J2, J3) =
(Gj1
j3M3, Gj2
j3):
j3M4, Gj3
πBR = PK{(y, r1, r2, j3) :
Y = Gy ∧ D1 = Gr1 ∧ E1 = Gr2 ∧ J3 = Gj3
D2/J1 = Y r1/Gj1
E2/J2 = Y r2/Gj2
j3∧
j3}
j3∧
To create a ProﬁleKeyCredentialResponse after verifying the ProﬁleKeyCredential-
Request the server will create a partial credential (t, U, V (cid:48)) that covers the unblinded
V (cid:48)) for
attributes, and encrypt V (cid:48) with the user’s public key Y to get (R1, R2) = (Gr(cid:48)
a random r(cid:48). Then the server will compute
, Y r(cid:48)
(S1, S2) = (D1
y3E1
y4R1, D2
y3E2
y4R2) .
22
Because Elgamal encryption is homomorphic, the ciphertext (S1, S2) is an encryption of
V for a credential (t, U, V ) which covers both blinded and revealed attributes. With the
attributes (M1, . . . , M4) as described above, (S1, S2) will be:
S1 = Gy3r1+y4r2+r(cid:48)
S2 = Y y3r1+y4r2+r(cid:48)
= Y y3r1+y4r2+r(cid:48)
,
W U x0+tx1
4(cid:89)
i=1
yi
Mi
V
The server can prove that (S1, S2) were calculated correctly by modifying the issuance
proof to be the following proof πBI :
πBI = PK{(w,w(cid:48), y1, . . . , y4, x0, x1, r(cid:48)) :
CW = Gw
I =
Gx0
S1 = D1
S2 = D2
wGw(cid:48) w(cid:48) ∧
GV
x1Gy1
y4Gr(cid:48) ∧
y4Y r(cid:48)
Gw
x0Gx1
y3E1
y3E2
∧
y4
y1 . . . Gy4
w(U x0)(U t)x1M1
y1M2
y2}
The server sends (S1, S2, t, U, πBI ) to the user, and if πBI is valid, the user decrypts V =
S2/S1
y and outputs the credential (t, U, V ) with attributes (M1, . . . , M4).
5.11 Veriﬁable Encryption of UIDs and Proﬁle Keys
Encryption of UIDs and ProﬁleKeys is done with the symmetric-key scheme from Sec-
tion 4.1. Both encryption and decryption use the GroupSecretP arams. The GroupSecret-
P arams are (a1, a2, b1, b2) ∈ Zq
4 derived from a randomly-chosen GroupMasterKey. The
GroupPublicP arams are (A, B) where A = Ga1
a2 and B = Gb1
a1Ga2
b1Gb2
b2.
Encryption of UIDs Recall that M1 = HashToG(UID) and M2 = EncodeToG(UID).
To encrypt a UID to a UidCiphertext (EA1, EA2) calculate:
a1
EA1 = M1
EA2 = EA1
a2M2
To decrypt the UidCiphertext ﬁrst compute:
M(cid:48)
2 = EA2/EA1
a2
23
then decode M(cid:48)
following checks and return UID(cid:48) if they succeed, ⊥ otherwise:
2 to get UID(cid:48), and compute M(cid:48)
1 = HashToG(UID(cid:48)). Then perform the
?(cid:54)= 1
?= (M(cid:48)
1)a1
EA1
EA1
Encryption of ProﬁleKeys Recall that M3 = HashToG(ProﬁleKey, UID) and M4 =
EncodeToG(ProﬁleKey). To encrypt a ProﬁleKey as a ProﬁleKeyCiphertext (EB1, EB2)
calculate:
b1
EB1 = M3
EB2 = EB1
b2M4
To decrypt the ProﬁleKeyCiphertext ﬁrst compute:
4 = EB2/EB1
4 to get ProﬁleKey(cid:48), compute M(cid:48)
b2
M(cid:48)
then decode M(cid:48)
perform the following checks and return ProﬁleKey(cid:48) if they succeed, ⊥ otherwise:
3 = HashToG(ProﬁleKey(cid:48), UID). Then
?(cid:54)= 1
?= (M(cid:48)
3)b1
EB1
EB1
5.12 Presenting an AuthCredential
An AuthCredentialPresentation contains a UidCiphertext, a redemption date, and a proof
of knowledge calculated as follows:
1. Recompute (EA1, EA2) from UID and (a1, a2) as described in Section 5.11.
2. Choose z ∈R Zq and compute
Cy1 = Gy1
Cy2 = Gy2
Cy3 = Gy3
zM1
zM2
z
Cx0 = Gx0
Cx1 = Gx1
CV = GV
zU
zU t
zV
along with two values in Zq: z0 = −zt and z1 = −za1.
24
3. Compute the following proof of knowledge:
πA = PK{(z,sk, z0, z1, t) :
z ∧
Z = I z ∧
tGx0
Cx1 = Cx0
a1Ga2
A = Ga1
Cy2/EA2 = Gy2
a1Gy1
EA1 = Cy1
z }
Cy3 = Gy3
z0Gx1
a2 ∧
z/EA1
z1 ∧
a2 ∧
//plaintext is M2
//EA1 is well-formed
4. Output (Cx0, Cx1, Cy1, . . . , Cy3, CV , EA1, EA2, πA)
5. The server computes
Z = CV /(W Cx0
x0Cx1
x1Cy1
y1Cy2
y2(Cy3Gm3
m3)y3)
using the current date m3 and the secret key (W, x0, x1, y1, . . . , y3), and then veri-
ﬁes πA.
5.13 Presenting a ProﬁleKeyCredential
A ProﬁleKeyCredentialP resentation contains a UidCiphertext, a ProﬁleKeyCiphertext,
and a proof of knowledge calculated as follows:
1. Choose random z, r then compute
Cx0 = Gx0
Cx1 = Gx1
along with three values in Zq: z0 = −zt, z1 = −za1, and z2 = −zb1.
zMi for i = 1, . . . , 4
zV
Cyi = Gyi
CV = GV
zU
zU t
2. Then compute the proof of knowledge
πP = PK{(sk, z, z0, z1, z2, t) :
z∧
tGx0
a1Ga2
b1Gb2
Z = I z∧
Cx1 = Cx0
A = Ga1
B = Gb1
Cy2/EA2 = Gy2
a1Gy1
EA1 = Cy1
Cy4/EB2 = Gy4
b1Gy3
EB1 = Cy3
z0Gx1
a2 ∧
b2 ∧
z/EA1
z1 ∧
z/EB1
z2
}
25
a2 ∧
//plaintext is M2
//EA1 is well-formed
b2 ∧
//EB1 is well-formed
//plaintext is M4
and output ({Cyi}4
3. The server computes