单元文件是被单元生成器动态生成的(参见 \fBsystemd.generator\fR(7) 手册)。被生成的单元文件可能并未被直接启用，而是被单元生成器隐含的启用了。
T}:T{
0
T}
T{
"transient"
T}:T{
单元文件是被运行时API动态临时生成的。该临时单元可能并未被启用。
T}:T{
0
T}
T{
"bad"
T}:T{
单元文件不正确或者出现其他错误。 \fBis\-enabled\fR 不会返回此状态，而是会显示一条出错信息。 \fBlist\-unit\-files\fR 命令有可能会显示此单元。
T}:T{
> 0
T}
.TE
.sp 1
.RE
.PP
\fBmask \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
屏蔽指定的单元或单元实例。 也就是在单元目录中创建指向
/dev/null
的同名符号连接，从而在根本上确保无法启动这些单元。 这比
\fBdisable\fR
命令更彻底，可以通杀一切启动方法(包括手动启动)，所以应该谨慎使用该命令。 若与
\fB\-\-runtime\fR
选项连用，则表示仅作临时性屏蔽(重启后屏蔽将失效)，否则默认为永久性屏蔽。 除非使用了
\fB\-\-now\fR
选项(相当于同时执行
\fBstop\fR
命令)，否则仅屏蔽一个单元并不会导致该单元被停止。 此命令的参数仅能接受单元的名字，而不能接受单元文件的路径。
.RE
.PP
\fBunmask \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
解除对指定单元或单元实例的屏蔽，这是
\fBmask\fR
命令的反动作。 也就是在单元目录中删除指向
/dev/null
的同名符号连接。 此命令的参数仅能接受单元的名字，而不能接受单元文件的路径。
.RE
.PP
\fBlink \fR\fB\fIPATH\fR\fR\fB\&.\&.\&.\fR
.RS 4
将不在标准单元目录中的单元文件(通过软链接)连接到标准单元目录中去。
\fIPATH\fR
参数必须是单元文件的绝对路径。该命令的结果可以通过
\fBdisable\fR
命令撤消。 通过该命令，可以让一个不在标准单元目录中的单元文件，也可以像位于标准单元目录中的常规单元文件一样， 被
\fBstart\fR,
\fBstop\fR
\&.\&.\&. 等各种命令操作。
.RE
.PP
\fBrevert \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
将指定的单元恢复成初始版本。 这将会删除对指定单元的所有修改。 例如，对于
"foo\&.service"
单元来说， 将会删除所有
foo\&.service\&.d/
目录。 如果指定的单元在
/usr/lib/
目录中 还存在单元文件的初始版本，那么还会进一步删除
/etc/
与
/run/
目录中 所有用来覆盖初始单元文件的软连接与自定义单元文件。 如果指定的单元已经被屏蔽，那么将会被解除屏蔽。
.sp
从效果上看，该命令相当于撤销
\fBedit\fR,
\fBset\-property\fR,
\fBmask\fR
命令所做的操作， 并且将指定单元的配置恢复成软件包提供的初始值。
.RE
.PP
\fBadd\-wants \fR\fB\fITARGET\fR\fR\fB \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR, \fBadd\-requires \fR\fB\fITARGET\fR\fR\fB \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
将指定的单元或单元实例(\fINAME\fR) 作为
"Wants="
或
"Requires="
依赖， 添加到
\fITARGET\fR
单元中。
.sp
关于
\fB\-\-system\fR,
\fB\-\-user\fR,
\fB\-\-runtime\fR,
\fB\-\-global\fR
选项的影响， 参见前文对
\fBenable\fR
命令的解释。
.RE
.PP
\fBedit \fR\fB\fINAME\fR\fR\fB\&.\&.\&.\fR
.RS 4
调用文本编辑器(参见下面的"环境变量"小节)修改指定的单元或单元实例。
.sp
若使用了
\fB\-\-full\fR
选项，则表示使用新编辑的单元文件完全取代原始单元文件， 否则默认将新编辑的单元配置片段(位于
\&.d/
目录)附加到原始单元文件的末尾。
.sp
如果使用了
\fB\-\-force\fR
选项，并且某些指定的单元文件不存在， 那么将会强制打开一个新的空单元文件以供编辑。
.sp
注意，在编辑过程中，编辑器实际操作的只是临时文件， 仅在编辑器正常退出时，临时文件的内容才会被实际写入到目标文件中。
.sp
注意，如果在编辑器退出时，临时文件的内容为空， 则表示取消编辑动作(而不是写入一个空文件)。
.sp
编辑动作完成之后，systemd 将会自动重新加载自身的配置(相当于执行
\fBdaemon\-reload\fR
命令)，以确保所做的变更立即生效。
.sp
关于
\fB\-\-system\fR,
\fB\-\-user\fR,
\fB\-\-runtime\fR,
\fB\-\-global\fR
选项的影响， 参见前文对
\fBenable\fR
命令的解释。
.sp
注意：(1)该命令不可用于编辑远程主机上的单元文件。 (2)禁止在编辑
/etc
中的原始单元文件时使用
\fB\-\-runtime\fR
选项， 因为
/etc
中的单元文件优先级高于
/run
中的单元文件。
.RE
.PP
\fBget\-default\fR
.RS 4
显示默认的启动目标。 这将显示
default\&.target
软链接所指向的实际单元文件的名称。
.RE
.PP
\fBset\-default \fR\fB\fINAME\fR\fR
.RS 4
设置默认的启动目标。 这会将
default\&.target
软链接指向
\fINAME\fR
单元。
.RE
.SS "机器命令"
.PP
\fBlist\-machines \fR\fB[\fIPATTERN\fR\&.\&.\&.]\fR
.RS 4
列出主机和所有运行中的本地容器，以及它们的状态。 如果给出了模式(\fIPATTERN\fR)参数， 那么仅显示容器名称与至少一个模式匹配的本地容器。
.RE
.SS "任务(job)命令"
.PP
\fBlist\-jobs \fR\fB[\fIPATTERN\&.\&.\&.\fR]\fR
.RS 4
列出正在运行中的任务。 如果给出了模式(\fIPATTERN\fR)参数， 那么仅显示单元名称与至少一个模式匹配的任务。
.RE
.PP
\fBcancel \fR\fB\fIJOB\fR\fR\fB\&.\&.\&.\fR
.RS 4
据给定的任务ID撤消任务。 如果没有给出任务ID， 那么表示撤消所有尚未执行的任务。
.RE
.SS "环境变量命令"
.PP
\fBshow\-environment\fR
.RS 4
显示所有 systemd 环境变量及其值。 显示格式遵守shell脚本语法，可以直接用于shell脚本中。 这些环境变量会被传递给所有由 systemd 派生的进程。
.RE
.PP
\fBset\-environment \fR\fB\fIVARIABLE=VALUE\fR\fR\fB\&.\&.\&.\fR
.RS 4
设置指定的 systemd 环境变量。
.RE
.PP
\fBunset\-environment \fR\fB\fIVARIABLE\fR\fR\fB\&.\&.\&.\fR
.RS 4
撤消指定的 systemd 环境变量。 如果仅指定了变量名，那么表示无条件的撤消该变量(无论其值是什么)。 如果以 VARIABLE=VALUE 格式同时给出了变量值， 那么表示仅当 VARIABLE 的值恰好等于 VALUE 时， 才撤消 VARIABLE 变量。
.RE
.PP
\fBimport\-environment\fR [\fIVARIABLE\&.\&.\&.\fR]
.RS 4
导入指定的客户端环境变量。 如果未指定任何参数， 则表示导入全部客户端环境变量。
.RE
.SS "systemd 生命周期命令"
.PP
\fBdaemon\-reload\fR
.RS 4
重新加载 systemd 守护进程的配置。 具体是指：重新运行所有的生成器(\fBsystemd.generator\fR(7))， 重新加载所有单元文件，重建整个依赖关系树。 在重新加载过程中， 所有由 systemd 代为监听的用户套接字都始终保持可访问状态。
.sp
不要将此命令与
\fBreload\fR
命令混淆。
.RE
.PP
\fBdaemon\-reexec\fR
.RS 4
重新执行 systemd 守护进程。 具体是指：首先序列化 systemd 状态， 接着重新执行 systemd 守护进程并反序列化原有状态。 此命令仅供调试和升级 systemd 使用。 有时候也作为
\fBdaemon\-reload\fR
命令的重量级版本使用。 在重新执行过程中， 所有由 systemd 代为监听的用户套接字都始终保持可访问状态。
.RE
.SS "系统命令"
.PP
\fBis\-system\-running\fR
.RS 4
检查当前系统是否处于正常运行状态(running)，若正常则返回"0"，否则返回大于零的正整数。 所谓正常运行状态是指： 系统完成了全部的启动操作，整个系统已经处于完全可用的状态， 特别是没有处于启动/关闭/维护状态，并且没有任何单元处于失败(failed)状态。 除非使用了
\fB\-\-quiet\fR
选项， 否则此命令还会在标准输出上显示系统的当前状态， 如下表所示：
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&2.\ \&is\-system\-running 命令的输出
.TS
allbox tab(:);
lB lB lB.
T{
状态
T}:T{
含义
T}:T{
返回值
T}
.T&
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l.
T{
\fIinitializing\fR
T}:T{
启动的早期阶段。也就是尚未到达
basic\&.target/rescue\&.target/emergency\&.target
之前的阶段。
T}:T{
> 0
T}
T{
\fIstarting\fR
T}:T{
启动的晚期阶段。 也就是任务队列首次达到空闲之前的阶段， 或者已经启动到了某个救援 target 中。
T}:T{
> 0
T}
T{
\fIrunning\fR
T}:T{
完成了全部的启动操作，整个系统已经处于完全可用的状态， 并且没有任何单元处于失败(failed)状态。
T}:T{
0
T}
T{
\fIdegraded\fR
T}:T{
完成了全部的启动操作，系统已经可用， 但是某些单元处于失败(failed)状态。
T}:T{
> 0
T}
T{
\fImaintenance\fR
T}:T{
启动了
rescue\&.target/emergency\&.target
目标。
T}:T{
> 0
T}
T{
\fIstopping\fR
T}:T{
系统正处于关闭过程中。
T}:T{
> 0
T}
T{
\fIoffline\fR
T}:T{
整个系统已经处于完全可用的状态， 但init进程(PID=1)不是 systemd
T}:T{
> 0
T}
T{
\fIunknown\fR
T}:T{
由于资源不足或未知原因， 无法检测系统的当前状态
T}:T{
> 0
T}
.TE
.sp 1
.RE
.PP
\fBdefault\fR
.RS 4
进入默认模式。差不多相当于执行
\fBisolate default\&.target\fR
命令。
.RE
.PP
\fBrescue\fR
.RS 4
进入救援模式。差不多相当于执行
\fBisolate rescue\&.target\fR
命令。 但同时会向所有用户显示一条警告信息。
.RE
.PP
\fBemergency\fR