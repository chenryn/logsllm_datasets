be protected against unauthorized access. In the case of global
variables, each TA has exclusive access to its own memory
and protecting the data within from multi-tenant interference
is a matter of employing proper CA session management. In
contrast, the TZOS provides all TAs with shared access to
other Secure World resources (e.g., RPMB memory). Thus, a
different, TZOS-enforced access control is required to ensure
that CAs and TAs cannot overwrite or leak each other’s data.
The TZOS manages TA access and prevents them from
illegally accessing each other’s contents. For example,
GlobalPlatform deﬁnes a set of sharing rules in the case
of PersistentObjects, under which each TA has exclusive
access to its created objects, unless explicitly stated otherwise
at creation. However, this is not enough to prevent CA
conﬁdential data from being exposed to malicious CA access,
as the TZOS enforced access control is only concerned with
access controlling access between different TAs and resources.
The lack of a ﬁne-gained access control between CA and
the Secure World resources holding their data enables multiple
attack vectors to be used in order to launch HPE attacks. For
example, multiple instances of the same TA have shared access
to their resources. This enables malicious CAs to connect
to any TA instance with access to these resources and trick
them into leaking or compromising data stored inside. Details
presented in Section 4.3.
3.2 Threat Model
We assume the attacker’s goal is to obtain or manipulate
sensitive data processed by a certain Normal World CA but is
unable to compromise that CA directly. Thus, attackers cannot
access its memory, hijack its execution or escalate privileges
via the Normal World OS. Additionally, we assume the attacker
is unable to gain code execution in any Normal World daemon,
TA or the TZOS. This makes man-in-the-middle attacks out of
scope. Given these limitations, the attacker may still leverage
HPE vulnerabilities to access the victim CA’s data.
We also assume that the victim CA depends on one or
more TAs that either maintains session-level data for multiple
tenants simultaneously, or persists data in secure objects,
RPMB or other system-level resources protected by the TEE.
Any ﬂaws in isolating a given TA’s data in these environments
may lead to HPE. In order to leverage such a ﬂaw, the attacker
must compromise any other CA in the system, and use it to
issue requests that will leak or modify the victim’s data.
The attack surface of available CAs is substantial and
non-static. Each CA is an application containing a li-
brary for sending ioctls to a device node (/dev/mobicore,
/dev/qseecom and /dev/tzdev in Kinibi, QSEE and Teegris
respectively). While a Normal World daemon assists in setting
up the communication channel between CA and TA, e.g.,
for loading the TA and setting up shared memory2, actual
requests go directly from the CA to the device node. The
kernel then converts these to SMCs to schedule TAs in the
TZOS. Thus, compromising a given CAs does not allow for
man-in-the-middle attacks against other CAs, but is sufﬁcient
for HPE. The number of CAs is actually larger than the number
of TAs seen below, as quite a few third party and mobile
payment CA/TA pairs were not evaluated for this study.
3.3 Exploiting HPE vulnerabilities
The lax access control enforced by the TZOS and TAs enables
a compromised CA to send malicious requests to any TA
running inside the Secure World. Such a CA can leverage
their access to stateful TA API in order to obtain access to
data belonging to another CAs. Figure 2 illustrates how in
the presence of HPE vulnerabilities a malicious CA can
leak, compromise or use other CA data maintained inside the
Secure World. In this ﬁgure, Cdata and CKey correspond to
CA conﬁdential data and CA cryptographic keys.
As described in Section 3, stateful TAs can store CA
data either temporarily in their memory or rely on external
resources to persist it for future usage upon CA requests. Six
attacks are presented in Figure 2. (A)-(C) target data stored
in TA sessions (e.g., global variables), while (D)-(F) target
data persisted in Secure World storage.
Some TAs can store temporally values (e.g., keys, process-
ing results) in memory to avoid retrieving or recalculating
them again. These values are derived from CA-provided
inputs. A malicious CA can access any data stored in TA
memory between a target CA’s requests, provided it can time
its own requests before a shared TA clears the respective data
and this data is retrievable though at least one exposed API
exposed that do not perform any origin checks regarding the
requests (e.g., sessions). Such attacks are most damaging
when CA provided keys are cached between CA requests.
In contrast to data stored in TA memory, CA data persisted
on the ﬂash drive or Secure World resources is retained even
after a TA instance is killed. This data is accessible from any
TA that is allowed access to the respective resource. Moreover,
this data is not usually cleared after a CA connection is termi-
nated, providing less restrictions for attackers on timing their
malicious requests. For example, in the case of single-tenant
TA, any TA instance can be used by malicious CAs due
to the fact that all share the same Secure World resources.
The (D)-(F) data ﬂows illustrate how malicious CA are not
required to have access to TA storing the victim’s data (Cdata).
Instead, communication with other TA’s could provide them
with required access to the Secure World resource. Of course,
in the absence of a ﬁne-grained access control TrustedApp1
can also be used to leak or compromise the victim’s data.
Data leakage. Caching CA data inside TA memory or storing
it in Secure World resources expose it to leakage through
HPE attacks. The (A) and (D) data ﬂows illustrate how once a
2Note that the Normal World daemons do not currently perform any access
control, and will help set up any requested TA.
828    29th USENIX Security Symposium
USENIX Association
Figure 2: Stateful TA attacks
victim CA sends data to stateful TA API, the attackers can trick
the TAs into providing it from the location where it maintained
(e.g., TA memory or resource). This data can be leaked until
it is overwritten, either through CA requests or due to other
factors (e.g., TA process termination, resource failure, etc.).
Data compromise. Storing data across multiple CA requests
in the Secure World protects it against Normal World access,
but presents opportunities for malicious CA’s to compromise
it through HPE attacks. The (B) and (E) data ﬂow illustrate
the process in which a victim CA data stored or persisted
across invocations can be altered by attackers before it is
read back by the victim. In order to corrupt a target CA’s
data, the malicious CA needs to time its malicious request to
execute between the victim CA’s requests. Thus, in contrast
to HPE data leakage attacks, data compromise through HPE
is restricted to a narrower timing window.
While handling CA requests, sometimes stateful TAs store
data (e.g., CA provided keys, CA veriﬁcation results, etc.)
in global variables in order to optimize the processing of
further CA requests. Even if this data is never provided to CAs,
compromising it can alter all subsequent CA request handling.
For example, by overwriting cached encryption or signing
keys in the Secure World, attackers can ensure that future data
encryption or signing performed using the respective keys
can be easily undone. Similarly, by overwriting decryption
keys attackers can trick CAs into using attacker generated
information in their operations, leading to data compromise.
In consequence, compromising certain critical ("key")
information (e.g., encryption, signing or decryption keys) can
enable attackers to achieve both data leakage and compromise.
Cryptographic oracles. Some stateful TA API exposed
can be leveraged by attackers even without leaking or
compromising data in the TA memory or TA controlled
external resource. Instead, the attackers can achieve their goals
by just timing their attacks to leverage a speciﬁc state of their
targeted TAs. For example, cryptographic keys maintained
across multiple CA requests can be used by attackers for
encrypting, decrypting or signing data on their behalf. We will
refer to such TAs vulnerable to such attacks as cryptographic
oracles. Data ﬂow (C) presents an example of how a decryption
key, stored in a TA session could be used by a malicious CA
to decrypt data, including those ciphertexts belonging to the
victim. Data ﬂow (F) shows the same scenario in the case of
keys persisted in Secure World storage.
In order for a TA to expose an API that can be used as a
cryptographic oracle, the following conditions must be met:
USENIX Association
29th USENIX Security Symposium    829
Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted AppGlobal2: Read(Cdata)1: Write(Cdata)Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted AppGlobal2: Modify(Cdata)1: Write(Cdata)3: Read(Cdata)Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted AppGlobal3: Read decrypted input2: Request decrypt(Ckey, input)Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted App1Global4: Load(Cdata)Trusted App2GlobalStorage (RPMB, etc.)3: Read(Cdata)2: Write(Cdata)Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted App1Global5: Read decrypted inputTrusted App2GlobalStorage (RPMB, etc.)2: Write(Ckey)1: Write(Ckey)3: Request decrypt (Ckey, input)4: Read(Ckey)Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted App1Global3: Modify (Cdata)Trusted App2GlobalStorage (RPMB, etc.)4: Write(Cdata)2: Write(Cdata)5: Read(Cdata)6: Load(Cdata)1: Save(Cdata)1: Save(Ckey)1: Save(Cdata)(A) Session data leakage(B) Session data compromise(C) Session key decryption oracle(D) Persisted data leakage(E) Persisted data compromise(F) Persisted key decryption oracleNormal WorldSecure WorldMalicious Client AppVictim Client AppTrusted AppGlobal2: Read(Cdata)1: Write(Cdata)Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted AppGlobal2: Modify(Cdata)1: Write(Cdata)3: Read(Cdata)Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted AppGlobal3: Read decrypted input2: Request decrypt(Ckey, input)Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted App1Global4: Load(Cdata)Trusted App2GlobalStorage (RPMB, etc.)3: Read(Cdata)2: Write(Cdata)Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted App1Global5: Read decrypted inputTrusted App2GlobalStorage (RPMB, etc.)2: Write(Ckey)1: Write(Ckey)3: Request decrypt (Ckey, input)4: Read(Ckey)Normal WorldSecure WorldMalicious Client AppVictim Client AppTrusted App1Global3: Modify (Cdata)Trusted App2GlobalStorage (RPMB, etc.)4: Write(Cdata)2: Write(Cdata)5: Read(Cdata)6: Load(Cdata)1: Save(Cdata)1: Save(Ckey)1: Save(Cdata)(A) Session data leakage(B) Session data compromise(C) Session key decryption oracle(D) Persisted data leakage(E) Persisted data compromise(F) Persisted key decryption oracle1. A CA provides a cryptographic key to a TA.
2. The TA stores the key in TA memory or external storage.
3. The TA uses stored key to encipher CA provided data.
Opposed to the data leak and compromise attacks, to abuse
these cryptographic oracles, the attackers need to perform
an extra step. For decryption oracles, the attackers require a
method to retrieve the target CA’s encrypted data, while for
encryption they need to ﬁnd a way to inject their encrypted
payload into the storage used by the CA (e.g., memory, ﬂash
drive, etc.). In the case of signing oracles, attacker signed data
is usually used to impersonate the CA in communications with
local or remote entities.
4 Results
Most TrustZone-enabled commercial devices run under either
a QSEE, Kinibi or Teegris TZOS [12]. In this section we
present a study of the susceptibility of TAs operating under
these three TZOSes to HPE attacks and show that several of
these TAs contain HPE-enabling vulnerabilities.
4.1 Evaluation Approach
For our investigation we have extracted TA binaries from
the newest TrustZone-enabled mobile devices running
each TZOS. We have separated the TA binaries found in
Kinibi(26)-, QSEE(38)- and Teegris(31)-based devices into
seven categories, based on an analysis of their functionality.
Each category corresponds to the main functionality exposed
through APIs by each analyzed TA. For example, Attestation
TAs provide functions for creating attestation tokens, while
Hardware Driver TAs are in charge of communicating with
security-sensitive I/O devices. A total of 95 TA binaries were
extracted on June 2019, each representing the latest version
of a TA executing under one of the three TZOSes.
For approximately two months, two engineers manually an-
alyzed each TA binary using IDA Pro [8] and reported any
vulnerabilities that could enable HPE attacks. Each vulnerabil-
ity has then been examined further by investigating TA and CA
logic in order to determine how attackers can exploit them. The
results of this analysis are presented in Section 4.3. A total of
23 vulnerabilities that enable HPE attacks have been identiﬁed
(Kinibi-eight, QSEE-eight, Teegris-seven. These vulnerabili-
ties have been identiﬁed in DRM, Key Management and Attes-
tation TAs, which typically are either multi-tenant TAs or rely
on data persisted across multiple CA sessions (either in Secure
World storage or as ciphertext ﬁles on the ﬂash drive). The
other categories are typically do not perform substantial CA
resource management and thus did not receive much scrutiny.
4.2 Disclosure and Vendor Response
All issues covered here were reported to the device vendor
upon discovery between July 2019 and January 2020 under
NDA. A ﬁnal report was provided in February 2020, which
included several bugs outside the scope of this paper (failure
to clear keys from memory and errors when parsing secure
objects). While prioritization and triage are at the vendor’s
discretion, their response strategy can be outlined as follows.
For issues that can be addressed by modifying a single TA,
(CWE-639 and CWE-862) ﬁxes will be deployed via FOTA
update. For semantic gap issues, the vendor is planning on
modifying the Normal World kernel to do access control at
the granularity of CA/TA pairs. This will substantially reduce
the attack surface for multi-tenant TAs. We explore the full
possibilities of such an approach in Section 6.5.
4.3 Discovered Vulnerabilities
Table 1 presents the breakdown of the TA categories analyzed
for each vendor, indicating how many TAs have been found
to contain at least one vulnerability in each category.
Table 1: Vulnerable TA summary table.
Vulnerable TAs identiﬁed / Total TAs examined.
TA Category
DRM
Key Management
Attestation
Hardware Drivers
Device Integrity
Authentication
Utility
Total
Kinibi QSEE Teegris
1 / 2
2 / 2
3 / 10
3 / 12
3 / 3
3 / 3
0 / 5
0 / 1
0 / 3
0 / 2
0 / 3
0 / 6
0 / 2
0 / 3
7 / 31
8 / 26
2 / 7
3 / 11
3 / 3
0 / 3
0 / 4
0 / 5
0 / 5
8 / 38
We have discovered instances of 3 types of vulnerabilities
in the TAs examined, which facilitate HPE attacks:
a. CWE-639: Authorization Bypass Through User-
Controlled Key (Auth-Bypass): present in multi-tenant TAs
employing low entropy assignments of CA session identiﬁers.
A guessable session ID enables malicious CAs to obtain
access to data stored in sessions maintained by the TA
for CA communication in the Secure World and leak or
compromise the data within. This data can include sensitive
CA information (e.g., cryptographic keys, passwords, user
information). Section 4.4.1 presents an example of how an
instance of this vulnerability can be leveraged in order to
obtain data necessary to bypass DRM license restrictions.
b. CWE-862: Missing Authorization (Missing-Auth):
encountered when CA provided information is kept by multi-
tenant TAs in global variables across multiple CA requests,
without isolation mechanisms (e.g., session management).
c. CWE-732: Incorrect Permission Assignment for Criti-
cal Resource (Storage-Hijacking): vulnerability discovered
when CA provided information is stored by TAs in TZOS
provided resources that lack ﬁne-grained access control. In
contrast to Auth-Bypass and Missing-Auth, this vulnerability
is not speciﬁc to multi-tenant TAs.
Table 2 shows a summary of the vulnerabilities discovered
in each TA binary categories extracted from each vendor. In-
stances of vulnerabilities Auth-Bypass and Storage-Hijacking
have been discovered in TA binaries running under all
830    29th USENIX Security Symposium
USENIX Association
examined vendors, while Missing-Auth instances have only
been discovered in TA running under Kinibi and QSEE.
Under Teegris, all TAs are either conﬁgured as multi-tenant
TAs and manage CAs through sessions or are conﬁgured as
Multi Instance Trusted Applications [10] and only accept
connections from a single tenant.
For each vulnerability discovered, we have studied how
it can be exploited from a compromised CA. Table 3 shows
a breakdown of different HPE attacks vectors that each
vulnerability enables. Even though we have not identiﬁed
any CA data leakage or compromise through Auth-Bypass,
our results indicate that all HPE attack vectors described in
Section 3 are possible using any of these vulnerabilities. We
have examined each vulnerability discovered and studied how
it can be exploited from compromised CAs.
Finally, Table 4 summarizes every HPE attack identiﬁed
in binaries analyzed from each TZOS. These attacks can