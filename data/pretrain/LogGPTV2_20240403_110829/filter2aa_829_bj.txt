### Techniques for File Exfiltration

There are numerous methods to obfuscate the type of file being exfiltrated, including encrypting the contents or removing the magic bytes before transmission and reappending them upon receipt. For human-readable files, I prefer encryption, as it can help evade detection mechanisms that monitor for specific strings in outbound connections. For other file types, I typically remove, alter, or falsify the magic bytes if detection is a concern.

### Exfiltration Process

When ready to exfiltrate the file, we can use our agent's built-in download functionality to send it over the established command-and-control (C2) channel. This process involves opening the file to read its contents into memory. The EDR’s filesystem minifilter driver will receive a notification, potentially examining attributes such as the requestor. Since the organization must build a detection from this data, the likelihood of an EDR detecting this activity is relatively low.

Once the file contents are in the agent’s address space, we close the file handle and initiate the transfer. Transmitting data over HTTP or HTTPS channels will trigger related ETW providers, but these events typically do not include the message contents if the channel is secure, as with HTTPS. Thus, we should have no issues exfiltrating the design plans. After downloading, we simply reattach the magic bytes and open the file in the 3D modeling software of choice (Figure 13-1).

**Figure 13-1: The Binford 6100 Left-Handed Screwdriver**

### Conclusion

We have successfully accessed the design information for Binford’s revolutionary product. Throughout this operation, we used our knowledge of EDR detection methods to make informed decisions about navigating the environment.

It is important to note that the path we took may not be the only or best way to achieve the objective. Could we have outpaced Binford’s defenders without considering the noise we were making? What if we had used a cloud-based file-hosting application like SharePoint instead of Active Directory? Each approach would significantly alter Binford’s ability to detect us.

After reading this book, you should be equipped to make these strategic choices independently. Proceed with caution, and good luck.

---

### Appendix: Auxiliary Telemetry Sources

Modern EDRs sometimes utilize less common components to enhance their detection capabilities. These auxiliary telemetry sources provide valuable data that would otherwise be unavailable from standard sensors. This appendix covers some examples of these components, their functionality, and their value to EDR agents. This list is not exhaustive but highlights some niche components you may encounter during your research.

#### Alternative Hooking Methods

This book has demonstrated the value of intercepting function calls, inspecting parameters, and observing return values. The most prevalent method of hooking function calls at the time of writing involves injecting a DLL into the target process and modifying the execution flow of another DLL’s exported functions, such as those in ntdll.dll. However, this method is easily bypassed due to inherent weaknesses (see Chapter 2).

Other, more robust methods exist, such as using the Microsoft-Windows-Threat-Intelligence ETW provider to indirectly intercept certain syscalls in the kernel. These methods have their own limitations, but they offer advantages by providing multiple techniques for the same effect. Some EDR vendors have implemented alternative hooking methods, such as Nirvana hooks, which intercept the point where a syscall returns to user mode from the kernel. This allows the agent to identify syscalls that did not originate from known locations, such as the ntdll.dll mapped into a process’s address space, thus detecting manual syscalls.

However, Nirvana hooks have downsides. They rely on undocumented PROCESS_INFORMATION_CLASS and associated structures, which may be modified or disabled by Microsoft. Additionally, adversaries can remove the hook by nulling out the callback via NtSetInformationProcess().

Even if Nirvana hooks are relatively easy to evade, not every adversary can do so, and the telemetry they provide can still be valuable. Vendors can employ multiple techniques to achieve the desired coverage.

#### RPC Filters

Recent attacks, such as Lee Christensen’s PrinterBug and topotam’s PetitPotam, have renewed interest in RPC tradecraft. In response, EDR vendors are monitoring RPC traffic to detect and prevent such exploits.

RPC traffic is challenging to manage at scale. One method EDRs use is RPC filters, which are firewall rules based on RPC interface identifiers. These filters can be created and deployed using built-in system utilities. For example, Listing A-1 shows how to block all inbound DCSync traffic to the current host using netsh.exe.

```plaintext
netsh> rpc filter
netsh rpc filter> add rule layer=um actiontype=block
Ok.
netsh rpc filter> add condition field=if_uuid matchtype=equal \
data=e3514235-4b06-11d1-ab04-00c04fc2dcd2
Ok.
netsh rpc filter> add filter
FilterKey: 6a377823-cff4-11ec-967c-000c29760114
Ok.
netsh rpc filter> show filter
```

These commands add a new RPC filter that blocks communications using the Directory Replication Service RPC interface (GUID: E3514235-4B06-11D1-AB04-00C04FC2DCD2). When the filter blocks a connection, the Microsoft-Windows-RPC provider emits an ETW event (Listing A-2).

```plaintext
An RPC call was blocked by an RPC firewall filter.
ProcessName: lsass.exe
InterfaceUuid: e3514235-4b06-11d1-ab04-00c04fc2dcd2
RpcFilterKey: 6a377823-cff4-11ec-967c-000c29760114
```

While this event provides some information, it lacks the context needed for robust detection. A better option is to consume a similar event from the Microsoft-Windows-Security-Auditing Secure ETW provider, which populates Event ID 5157 (Listing A-3).

```plaintext
5157
1
0
12810
0
0x8010000000000000
11289563
Security
sun.milkyway.lab
644
\device\harddiskvolume2\windows\system32\lsass.exe
%%14592
192.168.1.20
62749
192.168.1.5
49667
6
75664
%%14610
46
S-1-0-0
S-1-0-0
```

This event contains more detailed data but also has limitations, such as missing the interface ID and inconsistent generation across Windows versions. Therefore, some defenders might prefer the less-enriched but more consistent RPC event.

#### Hypervisors

Hypervisors virtualize one or more guest operating systems, acting as an intermediary between the guest and either the hardware or the base operating system. This position provides EDRs with a unique opportunity for detection.

##### How Hypervisors Work

The inner workings of a hypervisor are straightforward once you understand core concepts. Windows runs code at several rings, with higher rings (e.g., ring 3 for user mode) being less privileged than lower ones (e.g., ring 0 for the kernel). The hypervisor operates at ring 0, the lowest privilege level, and limits the operations that the guest (non-root mode system) can perform. When a virtualized guest attempts to execute an instruction that the hypervisor must handle, a VMEXIT occurs, transitioning control to the hypervisor. The Virtual Machine Control Structure (VMCS) preserves the processor state and tracks the reason for the VMEXIT. After handling the root-mode operation, the hypervisor transfers execution back to the guest via a VMRESUME instruction.

There are two types of hypervisors:
- **Type 1**: Runs on the bare metal system (e.g., Microsoft Hyper-V, VMware ESX).
- **Type 2**: Runs in an operating system installed on the bare metal system (e.g., VMware Workstation, Oracle VirtualBox).

Type 2 hypervisors are interesting because they can virtualize a system that is already running, making the hypervisor layer transparent to the user while allowing the EDR to collect telemetry.

##### Security Use Cases

A hypervisor can provide visibility into system operations at a deeper layer than other sensors, enabling the detection of attacks missed by other sensors, such as:
- **Virtual Machine Detection**: Malware can issue a CPUID instruction to detect if it is running in a VM. The hypervisor can trick the malware by returning false data.
- **Syscall Interception**: The hypervisor can exit on each syscall and emulate its operation.
- **Control Register Modification**: The hypervisor can detect and inspect modifications to control registers, such as the SMEP bit in the CR4 register.
- **Memory Change Tracing**: The hypervisor can track changes to certain regions of memory using the page-modification log and Extended Page Tables (EPT).
- **Branch Tracing**: The hypervisor can trace the execution of a program beyond monitoring syscalls using the last branch record and EPT.

##### Evading the Hypervisor

Operating against a system with a hypervisor can be challenging, as detection often occurs before the attacker realizes they are in a VM. Malware developers often use VM-detection functions, such as CPUID instructions or sleep acceleration, to terminate or perform benign actions if they detect a VM. Another option is to unload the hypervisor, which can be done by interacting with the driver, changing the boot configuration, or stopping the controlling service. To date, there are no public reports of real-world adversaries employing these techniques.

---

### Support the Electronic Frontier Foundation (EFF)

The world increasingly relies on the Internet to stay connected and informed, making the EFF’s mission to ensure technology supports freedom, justice, and innovation more urgent than ever. For over 30 years, EFF has fought for tech users through activism, legal battles, and software development. Your support can help navigate toward a brighter digital future.

**Learn more and join EFF at [EFF.ORG/NO-STARCH-PRESS](http://EFF.ORG/NO-STARCH-PRESS)**

---

**Evading EDR (Early Access) © 2023 by Matt Hand**