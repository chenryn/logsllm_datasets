title:\(τ\)CFI: Type-Assisted Control Flow Integrity for x86-64 Binaries
author:Paul Muntean and
Matthias Fischer and
Gang Tan and
Zhiqiang Lin and
Jens Grossklags and
Claudia Eckert
τ CFI: Type-Assisted Control Flow
Integrity for x86-64 Binaries
Paul Muntean1(B)
Jens Grossklags1
, and Claudia Eckert1
, Matthias Fischer1, Gang Tan3
, Zhiqiang Lin2
,
1 Technical University of Munich, Munich, Germany
{paul.muntean,matthias.fischer,claudia.eckert}@sec.in.tum.de,
PI:EMAIL
2 The Ohio State University, Columbus, USA
3 The Pennsylvania State University, State College, USA
PI:EMAIL
PI:EMAIL
Abstract. Programs aiming for low runtime overhead and high avail-
ability draw on several object-oriented features available in the C/C++
programming language, such as dynamic object dispatch. However, there
is an alarmingly high number of object dispatch (i.e., forward-edge) cor-
ruption vulnerabilities, which undercut security in signiﬁcant ways and
are in need of a thorough solution. In this paper, we propose τ CFI, an
extended control ﬂow integrity (CFI) model that uses both the types and
numbers of function parameters to enforce forward- and backward-edge
control ﬂow transfers. At a high level, it improves the precision of existing
forward-edge recognition approaches by considering the type information
of function parameters, which are directly extracted from the application
binaries. Therefore, τ CFI can be used to harden legacy applications for
which source code may not be available. We have evaluated τ CFI on
real-world binaries including Nginx, NodeJS, Lighttpd, MySql and the
SPEC CPU2006 benchmark and demonstrate that τ CFI is able to eﬀec-
tively protect these applications from forward- and backward-edge cor-
ruptions with low runtime overhead. In direct comparison with state-of-
the-art tools, τ CFI achieves higher forward-edge caller-callee matching
precision.
Keywords: C++ object dispatch · Indirect control ﬂow transfer
Code-reuse attack
1 Introduction
The C++ programming language has been extensively used to build many large,
complex, and eﬃcient software systems over the last decades. A key concept
of the C++ language is polymorphism. This concept is based on C++ virtual
functions. Virtual functions enable late binding and allow programmers to over-
write a virtual function of the base-class with their own implementation. In
c(cid:2) Springer Nature Switzerland AG 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 423–444, 2018.
https://doi.org/10.1007/978-3-030-00470-5_20
424
P. Muntean et al.
order to implement virtual functions, the compiler needs to generate virtual
table meta-data structures for all virtual functions and provide to each instance
(object) of such a class a (virtual) pointer (the value of which is computed during
runtime) to the aforementioned table. Unfortunately, this approach represents a
main source for exploitable program indirection (i.e., forward edges) along func-
tion returns (i.e., backward edges), as the C/C++ language provides no intrinsic
security guarantees (i.e., we consider Clang-CFI [1] and Clang’s SafeStack [2]
optional).
In this paper, we present a new control ﬂow integrity (CFI) tool called τ CFI
used to secure C++ binaries by considering the type information from applica-
tion binaries. Our work targets applications, whose source code is unavailable
and that contain at least one exploitable memory corruption bug (e.g., a buﬀer
overﬂow bug). We assume such bugs can be used to enable the execution of
sophisticated Code-Reuse Attacks (CRAs) such as the COOP attack [3] and
its extensions [4–7], violating the program’s intended control ﬂow graph (CFG)
through forward edges in the CFG and/or through attacks, that violate backward
edges such as Control Jujutsu [8]. A potential prerequisite for violating forward-
edge control ﬂow transfers is the corruption of an object’s virtual pointer. In
contrast, backward edges can be corrupted by loading fake return addresses on
the stack.
To address such object dispatch corruptions, and in general any type of indi-
rect program control ﬂow transfer violations, CFI [9,10] was originally devel-
oped to secure indirect control ﬂow transfers, by adding runtime checks before
forward-edge and backward-edge control transfers. CFI-based techniques, that
rely on the construction of a precise CFG, are eﬀective [11], if CFGs are care-
fully constructed and sound [12]. However, these techniques still allow CRAs
that do not violate the enforced CFG. For example, the COOP family of CRAs
bypasses most deployed CFI-based enforcement policies, since these attacks do
not exploit indirect backward edges (i.e., function returns), but rather impre-
cision in forward edges (i.e., object dispatches, indirect control ﬂow transfers),
which in general cannot be statically (before runtime) and precisely determined
as alias analysis in program binaries is undecidable [13]. Source code based tools
such as: SafeDispatch [14], MCFI [15,16], ShrinkWrap [17], VTI [18], and IFC-
C/VTV [19] can protect against forward-edge violations. However, they rely on
source code availability limiting their applicability (e.g., proprietary libraries
cannot be recompiled). In contrast, binary-based forward-edge protection tools,
including binCFI [20], vfGuard [21], vTint [22], VCI [23], Marx [24] and TypeAr-
mor [25], typically protect only forward edges through a CFI-based policy, and
most of the tools assume that a shadow stack [26] technique is used to protect
backward edges.
Unfortunately, the currently most precise binary-based forward-edge protec-
tion tools w.r.t. calltarget reduction, VCI and Marx, suﬀer from forward-edge
imprecision, since both are based on an approximated program class hierarchy
obtained through the usage of heuristics and assumptions. TypeArmor enforces
a forward-edge policy, which only takes into account the number of parameters
τ CFI: Type-Assisted Control Flow Integrity for x86-64 Binaries
425
of caller-callee pairs without imposing any constraint on the parameters’ types.
Thus, these forward-edge protection tools are generally too permissive. CFI-based
forward-edge protection techniques without backward-edge protection are broken
[27], thus these tools assume that a shadow stack protection policy is in place.
Unfortunately, shadow stack based techniques (backward-edge protection) were
recently bypassed [28] and add, on average, up to 10% runtime overhead [29].
In this paper, we present τ CFI, which is a ﬁne-grained forward-edge and
backward-edge binary-level CFI protection mechanism, that neither relies on
shadow stack based techniques to protect backward edges, nor any runtime-type
information (RTTI) (i.e., metadata emitted by the compiler, which is most of
the time stripped in production binaries). Note that, in general, variable type
reconstruction on production binaries is a diﬃcult task, as the required program
semantics are mostly removed through compilation.
At a high level, there are a number of analyses τ CFI performs in order to
achieve its protection objective. In particular, it (1) uses its register width (ABI
dependent) as the type of the parameter for each function parameter, (2) when
determining whether an indirect call can target a function, it checks whether the
call and the target function use the same number of parameters and whether
the types (register width) match, (3) based on the provided forward-edge caller-
callee mapping it builds a mapping, back from each callee to the legitimate
addresses, located next to each caller. τ CFI’s backward-edge policy is based on
the observation that backward edges of a program can be eﬃciently protected,
if there is a precise forward-edge mapping available between callers and callees.
We have implemented τ CFI on top of DynInst [30], which is a binary rewrit-
ing framework, that allows program binary instrumentation during loading or
runtime. Note that τ CFI preserves the original code copy of an executable by
instrumenting all code of an executable shadow copy, which is later mapped
to the original binary after it was loaded and τ CFI’s analysis ﬁnished. τ CFI
works with legacy programs and can be used to protect both executables and
libraries. τ CFI performs per-ﬁle analysis; as such each ﬁle is protected individu-
ally. We have evaluated τ CFI with several real-world open source programs (i.e.,
NodeJS, Lighttpd, MySql, etc.), as well as the SPEC CPU2006 benchmarks and
demonstrated that our forward-edge policy is more precise than state-of-the-art
tools. τ CFI is applicable to program binaries for which we assume source code is
not available. τ CFI signiﬁcantly reduces the number of valid forward edges com-
pared to previous work and thus, we are able to build a precise backward-edge
policy, which represents an eﬃcient alternative to shadow stack based techniques.
In summary, we make the following contributions:
– We present τ CFI, a new CFI system that improves the state-of-the-art
CFI with more precise forward-edge identiﬁcation by using type information
reverse-engineered from stripped x86-64 binaries.
– We have implemented τ CFI with a binary instrumentation framework to
enforce a ﬁne-grained forward-edge and backward-edge protection.
– We have conducted a thorough evaluation, through which we show that τ CFI
is more precise and eﬀective than other state-of-the-art techniques.
426
P. Muntean et al.
2 Background
In this section, we provide the needed technical background to set the stage for
the remainder of this paper.
2.1 Exploiting Object Dispatches in C++
Figure 1 depicts a C++ code example (left) and how a COOP main-loop gadget
(right) (i.e., based either on ML-G (main-loop), REC-G (recursive) or UNR-G
(unrolled) COOP gadgets, see [4] for more details) is used to sequentially call
COOP gadgets by iterating through a loop (REC-G excluded) controlled by the
attacker.
First, the object dispatch (see line 17 depicted in Fig. 1) is exploited by the
attacker in order to call diﬀerent functions in the whole program by iterating on
an array of fake objects previously inserted in the array through, for example, a
buﬀer overﬂow. Second, in order to achieve this, the attacker previously exploits
an existing program memory corruption (e.g., buﬀer overﬂow), which is further
used to corrupt an object dispatch, ❶, by inserting fake objects into the array
and by changing the number of initial loop iterations. Next she invokes gadgets,
❶ and ❸ up to M , through the calls, ❷ and ❹ up to N , contained in the loop. As
it can be observed in Fig. 1, the attacker can invoke from the same callsite legiti-
mate functions (in total N ) residing in the virtual table (vTable) inheritance path
(i.e., at the time of writing this paper this type of information is particularly
hard to recuperate from program binaries) for this particular callsite, indicated
with green color vTable entries. However, a real COOP attack invokes illegit-
imate vTable entries residing in the entire initial program class hierarchy (or
the extended one) with little or no relationship to the initial callsite, indicated
with red-color vTable entries. Third, in this way diﬀerent addresses contained in
the program (1) (vTable) hierarchy (contains only virtual members), (2) class
hierarchy (contains both virtual and non-virtual members) and (or) the whole
program address space can be called. For example, the attacker can call any entry
in the: (1) class hierarchy of the whole program, (2) class hierarchy containing
only legitimate targets for this callsite, (3) virtual table hierarchy of the whole
program, (4) virtual table hierarchy containing only legitimate targets for this
callsite, (5) virtual table hierarchy and class hierarchy containing only legitimate
targets for this callsite, and (6) virtual table hierarchy and class hierarchy of the
whole program. Finally, because there are no intrinsic language semantics—such
as object cast checks—in the C++ programming language for object dispatches,
the loop gadget indicated in Fig. 1 can be used without constraint to call any
possible entry in the whole program. Thus, making any program address the
start of a potential usable gadget.
2.2 Type-Inference on Executables
Recovering variable types from executable programs is generally considered dif-
ﬁcult for two main reasons. First, the quality of the disassembly can vary con-
siderably from one used underlying binary analysis framework to another and
τ CFI: Type-Assisted Control Flow Integrity for x86-64 Binaries
427
Fig. 1. COOP main loop gadget (ML-G) operation with the associated C++ code.
w.r.t. the compiler ﬂags which were used to compile the binary. Note that pro-
duction binaries can be more or less stripped (i.e., RTTI or other debugging
symbols may or may not be available etc.) from useful information, which can
be used during a type-recovering analysis. τ CFI is based on DynInst and the
quality of the executable disassembly is suﬃcient for our needs. In contrast to
other approaches, the register width based type recuperation of τ CFI is based
on a relatively simple analysis compared to other tools and provides similar
results. For a more comprehensive review on the capabilities of DynInst and
other tools, we advice the reader to review Andriesse et al. [31]. Second, if the
type inference analysis requires alias analysis, it is well known that alias analysis
in binaries is undecidable [13] in theory and intractable in practice [32]. Further,
there are several highly promising tools such as: Rewards [33], BAP [34], Smart-
Dec [35], and Divine [36]. These tools try more or less successfully to recover (or
infer) type information from binary programs with diﬀerent goals. Typical goals
are: (1) full program reconstruction (i.e., binary to code conversion, reversing,
etc.), (2) checking for buﬀer overﬂows, and (3) checking for integer overﬂows and
other types of memory corruptions. For a comprehensive review of type inference
recovering tools in the context of binaries, we suggest consulting Caballero et
al. [37]. Finally, it is interesting to note that the code from only a few of the
tools mentioned in the previous review are actually available as open source.
2.3 Security Implications of Indirect Transfers
Indirect Forward-Edge Transfers. Illegal forward-edge indirect calls may
result from a virtual pointer (vPointer) corruption. A vPointer corruption is not
a vulnerability but rather a capability, which can be the result of a spatial or
temporal memory corruption triggered by: (1) bad-casting [38] of C++ objects, (2)
428
P. Muntean et al.
buﬀer overﬂow in a buﬀer adjacent to a C++ object, or (3) a use-after-free condi-
tion [3]. A vPointer corruption can be exploited in several ways. A manipulated
vPointer can be exploited to make it point to any existing or added program
virtual table entry or to a fake virtual table added by the attacker. For example,
an attacker can use the corruption to hijack the control ﬂow of the program and
start a COOP attack [3]. vPointer corruptions are a real security threat that
can be exploited in many ways as for example if there is a memory corruption
(e.g., buﬀer overﬂow, use-after-free condition), which is adjacent in memory to
the C++ object. As a consequence, each memory corruption, which can be used
to reach the memory layout of an object (e.g., object type confusion), can be
potentially used to change the program control ﬂow.
Indirect Backward-Edge Transfers. Program backward edges (i.e., jump,
ret, etc.) can be corrupted to assemble gadget chains such as follows. (1) No
CFI protection technique was applied: In this case, the binary is not protected
by any CFI policy. Obviously, the attacker can then hijack backward edges to
jump virtually anywhere in the binary in order to chain gadgets together. (2)
Coarse-grained CFI protected scenarios: In this scenario, if the attacker is aware
of what addresses are protected, the attacker may deviate the application ﬂow
to legitimate locations in order to link gadgets together. (3) Fine-grained CFI
protection scenarios: In this case, the legitimate target set is stricter than in
(2). But, assuming that the attacker knows which addresses are protected and
which are not, she may be able to call legitimate targets through control ﬂow
bending. (4) Fully precise CFI protected scenarios (i.e., SafeStack [26] based):
In this scenario, the legitimate target set is stricter than in (3). Even though we
have a one-to-one mapping between calltargets and legitimate return sites, the
attacker could use this one-to-one mapping to assemble gadget chains if at the
legitimate calltarget return site there is a useful gadget [27].
3 Threat Model
We follow the same basic assumptions stated in [25] w.r.t. forward edges. More
precisely, we assume a resourceful attacker that has read and write access to
the data sections of the attacked program binary. We assume that the protected
binary does not contain self-modifying code or any kind of obfuscation. We also
consider pages to be either writable or executable, but not both at the same
time. Further, we assume that the attacker has the ability to exploit an existing
memory corruption in order to hijack the program control ﬂow. As such, we
consider a powerful yet realistic adversary model that is consistent with previous
work on CRAs and their mitigations [26]. The adversary is aware of the applied
defenses and has access to the source and non-hardened binary of the target
application. She can exploit (bend) any backward-edge based indirect program
transfer and has the capability to make arbitrary memory writes.
τ CFI: Type-Assisted Control Flow Integrity for x86-64 Binaries
429
4 Design and Implementation
In this section, we present a brief overview of τ CFI followed by its design and
implementation.
4.1 Approach Overview
Figure 2 depicts an overview of our approach. From left to right, the program
binary is analyzed by τ CFI and the calltargets and callsite analysis are per-
formed for determining how many parameters are provided, how many are con-
sumed, and their register width. After this step, labels are inserted at each pre-
viously identiﬁed callsite and at each calltarget. The enforced policy is schemat-
ically represented by the black highlighted dots (addresses, e.g., cs1 ) in Fig. 2
that are allowed to call only legitimate red highlighted dots (addresses, e.g., ct1 ).