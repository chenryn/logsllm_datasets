digoal=# load 'auto_explain';  
LOAD  
digoal=# set session auto_explain.log_min_duration=0;  
SET  
digoal=# set role digoal;  
SET  
digoal=> select * from tbl_user_info limit 3;  
 id | firstname | lastname |   corp     
----+-----------+----------+----------  
  1 | zhou1     | digoal1  | sky-mobi  
  2 | zhou2     | digoal2  | sky-mobi  
  3 | zhou3     | digoal3  | sky-mobi  
(3 rows) 
```
再看日志,已经有了 :   
```
2011-06-08 15:29:30.011 CST,"postgres","digoal",14062,"127.0.0.1:5939",4def24bc.36ee,1,"SELECT",2011-06-08 15:29:00 CST,2/29,0,LOG,0  
0000,"duration: 0.031 ms  plan:  
Query Text: select * from tbl_user_info limit 3;  
Limit  (cost=0.00..0.05 rows=3 width=31)  
  ->  Seq Scan on tbl_user_info  (cost=0.00..183.00 rows=10000 width=31)",,,,,,,,,"psql"  
```
如果你不想看日志这么麻烦，想在client直接显示，也很方便，设置client_min_messages='log'就可以看到auto explain的输出了。  
```
set client_min_messages='log';
set auto_explain.log_min_duration = 0;
set auto_explain.log_analyze = true;
set auto_explain.log_verbose = true;
set auto_explain.log_buffers = true;
set auto_explain.log_nested_statements = true;
postgres=# do language plpgsql $$        
declare
begin
perform 1 from pg_class where oid=1;
end;
$$;
LOG:  duration: 0.008 ms  plan:
Query Text: SELECT 1 from pg_class where oid=1
Index Only Scan using pg_class_oid_index on pg_catalog.pg_class  (cost=0.27..1.29 rows=1 width=4) (actual time=0.006..0.006 rows=0 loops=1)
  Output: 1
  Index Cond: (pg_class.oid = '1'::oid)
  Heap Fetches: 0
  Buffers: shared hit=2
DO
```
另一个例子 
```
load 'auto_explain';
set auto_explain.log_analyze =on;
set auto_explain.log_buffers =on;
set auto_explain.log_min_duration =0;
set auto_explain.log_nested_statements =on;
set auto_explain.log_timing =on;
set auto_explain.log_verbose =on;
set client_min_messages ='log';
postgres=# do language plpgsql $$
declare
  arr text;
begin
  select string_agg((random()*100000)::int::text, ',') into arr from generate_series(1,10);    
  execute 'select * from a where id in ('||arr||')';
end;
$$ ;
LOG:  duration: 0.024 ms  plan:
Query Text: select string_agg((random()*100000)::int::text, ',')          from generate_series(1,10)
Aggregate  (cost=25.01..25.02 rows=1 width=32) (actual time=0.021..0.021 rows=1 loops=1)
  Output: string_agg((((random() * '100000'::double precision))::integer)::text, ','::text)
  ->  Function Scan on pg_catalog.generate_series  (cost=0.00..10.00 rows=1000 width=0) (actual time=0.008..0.009 rows=10 loops=1)
        Output: generate_series
        Function Call: generate_series(1, 10)
LOG:  duration: 0.104 ms  plan:
Query Text: select * from a where id in (23707,28634,42724,79820,82297,8859,19271,54725,5089,42662)
Index Scan using a_pkey on public.a  (cost=0.43..17.72 rows=10 width=45) (actual time=0.036..0.100 rows=10 loops=1)
  Output: id, info, crt_time
  Index Cond: (a.id = ANY ('{23707,28634,42724,79820,82297,8859,19271,54725,5089,42662}'::integer[]))
  Buffers: shared hit=40
DO
Time: 1.126 ms
```
## plprofiler
除了auot_explain，还有一个存储过程性能分析利器。    
https://bitbucket.org/openscg/plprofiler   
可用于生成形象的火焰图，找到瓶颈。  
## 参考 
1\. man LOAD  
2\. man EXPLAIN  
3\. http://www.postgresql.org/docs/9.6/static/auto-explain.html  
4\. https://bitbucket.org/openscg/plprofiler  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")