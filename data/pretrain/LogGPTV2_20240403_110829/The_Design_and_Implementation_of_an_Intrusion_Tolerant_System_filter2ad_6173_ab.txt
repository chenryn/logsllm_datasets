client error. In the latter case, the cause was a malformed
request or a request for a resource that does not exist on
one machine. The combination indicates that the machine
responding with success should be taken off-line to begin
recovery because it should not have responded with
success to a request that was malformed or targeted a
resource that was not on both machines.
is
combination
Another meaningful
200/300
(success/redirection). This indicates one web server (the
one responding with success) sent back different content
than the other, which responded with redirection, because
the client already had the content requested. In this case,
the cause is assumed to be that content has changed on the
first web server
indicating a defacement may have
occurred. That server would be taken off-line.
A third meaningful combination is 300/400. This
indicates one web server sent a redirect status code, while
the other sent client error, with the same possible causes
as for the 200/400 case. The web server responding with
300 would be taken off-line.
Finally,
there is
the possibility one web server
responds and the other does not. We use a timeout (much
less than a second) to identify this case, which results in
the non-responding web server being taken off-line.
three
combinations
Other combinations of different status codes are
ignored. Different status codes in general are rare,
including the
analyzed in the
preceding paragraphs. If those combinations occur but
were not caused by an intrusion, service will continue
after failover and appear uninterrupted to the users. Thus,
the problem of self-inflicted denial of service by false
positives from our detection mechanism is avoided.
In addition to comparison, we have additional sensors
to
for detection including “Wrapper” technology [8]
protect an application’s environment (the file system, its
own process space) from the application itself or from a
malicious
the
application. This is a detection mechanism as well as a
prevention mechanism because attempts to violate policy
are reported to the MAC, which may be configured to
failover even though the attempt did not succeed.
vulnerabilities
exploiting
agent
in
3
Software Isolation
Requests are not immediately passed to the application
servers. They are intercepted by a proxy on the primary
and sent
to the MAC. The MAC calls the function,
AllowRequest, in the Content Filter with the new request.
The Content Filter has a list of bad requests, which were
identified by the Forensics Agent
after previous
intrusions, and generalization rules, which are used to
determine if a new request is “similar” to a bad request.
The Content Filter returns with true (“the request should
be allowed”) if the new request matches or is similar to a
bad request; otherwise,
it returns false (“the request
should be blocked”). In the latter case, the request is not
sent to the backup, nor is it processed by the primary.
As described in the section about “Detection”, COTS-
provided diversity is part of HACQIT’s design. Not only
does it help with the detection through comparison
mechanism, but it is also part of our isolation strategy.
Most attacks use exploits of particular vulnerabilities in a
software product, either a server application like a web
server or an operating system or one of
its major
components like the networking protocol stack. An
exploit
that works against one product of a type of
software (web server, OS, etc.) will seldom work against
another product of the same type. Consequently, as long
as we have two different web servers operating on our
primary and backup, an exploit that succeeds on one
should be unlikely to propagate to the other, even though
we might pass the request that contains the exploit to
both.
It is possible for an intrusion to become part of a
legitimate process (create a new thread that lives within
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:25:04 UTC from IEEE Xplore.  Restrictions apply. 
for an
the process) but not do anything (“sleep”)
indefinite length of time. In this case, our detection
mechanisms may not detect a failure until the malign
thread “wakes up” and attempts to do some damage.
Random rejuvenation is a counter-measure for this type of
intrusion. The MAC randomly initiates a failover with the
average interval between random failovers set through the
Policy Editor. This should minimize the effectiveness of
“stealth” attacks that sleep before they cause errors we
can identify. Typically, this value should be set at a few
hours or more.
On each server we have a host firewall installed. It
only allows access to the server from the OOB machine
by authorized programs like the MAC through authorized
ports and only allows access from the gateway machine
through port 80. Similarly, it only allows access to the
OOB machine from the server by authorized programs
like the wrappers and the Host Monitor (HM) through
authorized ports. It only allows access to the gateway
machine through port 80 from the web server. To change
this configuration, a user must enter a password at the
server’s keyboard. An attacker would have to gain system
privileges and remove the host firewall to have access to
the OOB machine. Creating an unauthorized process to
remove a file would trigger an “Unhealthy” state by the
HM (see section 4).
4 Recovery
The wrappers on our web servers mediate every
attempt to access the file system through the web server
process, allowing only policy-authorized operations, for
example, appending messages to the message board store.
Thus, every file access by a wrapped process should be
legitimate. Even if the process is taken over by a buffer
overflow attack, the wrapper continues to mediate file
access and prevent unauthorized file access.
However, we have designed HACQIT to incorporate
multiple, layered defenses. In particular, we would like to
detect unauthorized file accesses due to wrapper failure or
other unknown vulnerabilities, to accelerate recovery. We
call
the overall capability (detection and recovery)
Continual Recovery. It is analogous to on-line repair for
hardware fault tolerance.
This is accomplished using the native security event
auditing of Windows NT/2000. With this feature, the HM
can detect any process creation and every access to the
file system almost immediately (within a millisecond).
File accesses include reads, writes, appends, executes,
lists of directories, changes to the working directory
(“cd”), and access to file attributes. In addition, the HM
knows the system files that are allowed to execute and the
specific pre-existing directory of system data files they
must be able to access. Finally, there are uncompromised
copies of all files on a separate disk connected to the out-
of-band machine.
Continual Recovery performs the following actions:
1)
it
the
file,
the HM sets
If a file is executed which is not either (a) on the
approved list of processes allowed to execute, or
(b) executed by a wrapped process,
is an
unauthorized process, and the HM will terminate
it.
If an unauthorized process has created or deleted
a
to
“Unhealthy” and notifies the MAC; the MAC
will then set the server off-line and failover.
If the unwrapped process created a file, the HM
will remove the file.
If a file is modified or deleted by other than a
wrapped process, the HM will retrieve a copy of
the file from the OOB machine to replace the one
that was modified or deleted. The copy will be
valid as of the last failover.
server
state
2)
3)
4)
The last two actions precede what occurs after every
failover: the wrapped processes are terminated, and an
integrity check via TripWire is performed on the allowed
executable files and the directory of system data files. If
no integrity violations are found, the MAC is notified that
the server is “Healthy.” When the server is promoted to
on-line spare or backup, its data files are re-synchronized
with the files from the previous instantiation of process
pairs.
Continual Recovery prevents two common goals of
network attacks: to leave Trojans or “Zombies” for later
exploitation and to delete necessary executable or data
files to deny service to the end users.
5 Demonstration
We will
demonstrate
and
isolation, error detection, failfast failover, attack learning,
and attack generalization. The demonstration will consist
of the following steps:
prevention
intrusion
1)
attacks
from one
laptop, while
Launch
maintaining a simulated stress load on the
HACQIT web server. The critical application is a
dynamic message board maintained by the web
server, which is read and written from a web
browser on the laptop. Before the first attack,
demonstrate message board application and the
persistence of its dynamic data.
2) Attack with a sequence of recent, well-known
exploits. For concreteness in this explanation, we
will use Code Red I, Code Red II, and one of the
enormous number of trivial variants of these
worms. (At the time of the conference, we may
use exploits of more topical interest.)
3) Attack with Code Red I. This will not be
prevented, as the corrective software patch will
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:25:04 UTC from IEEE Xplore.  Restrictions apply. 
not have been applied to the OS and IIS, but the
status code comparison will cause the primary to
failover. A new process pair will then be active,
with the previous backup server promoted to
primary, and the on-line spare promoted to
backup.
5)
4) Use the log from the laptop that maintains the
simulated stress load to show that there was no
apparent interruption of service to the other users
of the critical application, and use a browser to
show that dynamic data on the message board
has persisted across the failover.
Show the HACQIT status display on the OOB
machine to see that after the failover was caused
by our initial attack with Code Red I, the MAC
requested that
then
received the request suspected of causing the
failover from the Forensics Agent.
Launch Code Red I again. No failover will
occur. The HACQIT cluster status display will
show that the request was blocked because the
Content Filter would not allow it.
forensics be started.
6)
It
8)
resource, which contains
7) Attack HACQIT with variants of Code Red I,
including Code Red II, and an arbitrary variant.
These requests will be blocked. The Content
Filter log will show they were blocked because
they were generalizations of Code Red I, not
because the cluster had been attacked by them
before.
that references the
Send a legitimate request
Index Server
the
vulnerability Code Red I exploits, and show that
legitimate requests to this resource are not
arbitrarily blocked. The particular request will
contain a long query string shorter than the
minimum required to cause a buffer overflow.
We will receive a benign status code.
Launch one more attack, this time with a non-
buffer-overflow attack. It will cause failover, but
when repeated will be blocked.
Insert a floppy disk with an executable file on
one of the servers and copy the file to the hard
disk. It will be deleted. Start the executable from
the floppy disk; the process will be killed and
failover will occur.
10)
9)
At the time of paper submission, these capabilities had
already been shown in our lab with multiple exploits
including Code Red I, Code Red II, and many variants.
6 Conclusion
At least three potential benefits are suggested by our
work:
1) For a bounded problem space (no anonymous
uses), it should be possible to use techniques from
tolerance field, suitably modified,
to
the fault
increase the availability of our systems in the face
of concerted cyber attacks.
2) For
a problem space with less
restrictive
assumptions, it should be possible to significantly
improve on how fast and how cheaply we can
recover from intrusions with the implementation of
continual on-line repair.
3) For the general case (any server on the Internet), it
should be possible to prevent repeated attacks from
succeeding, even when the attacks can be varied,
with a
attack learning and
generalization as part of a control loop that filters
out bad requests.
combination of
and
software,
Of course, these benefits have a cost in additional
hardware,
administration. Regarding
isolation, our efforts are designed to minimize the
likelihood
provably
eliminate it. This is in line with the best advice for
building secure systems [7], which uses risk analysis, not
absolute security policies, to evaluate system security.
propagation,
intrusion
not
of
7 References
fault
J. Gray,
Avizienis,
T. Barclay,
L. Spainhower and T. A. Gregg, “IBM S/390 Parallel
tolerance: A historical
1.
Department of Defense Trusted Security Evaluation
Criteria, DOD 5200.28-STD, Library No. S225,711,
December 1985.
2.
and D. Slutz, Microsoft
TerraServer: A Spatial Data Warehouse, MS-TR-99-29,
Microsoft Research, Advanced Technology Division, One
Microsoft Way, Redmond WA 98052, June 1999.
3.
Enterprise Server G5
perspective,” IBM reprint, 0018-8646/99, 1999.
4.
J. Gray and A. Reuter, Transaction Processing:
Concepts and Techniques, San Francisco, CA: Morgan
Kaufmann Publishers, 1993.
5.
“The N-Version Approach to Fault-
Tolerant Software,” Transactions on Software Engineering,
Vol. SE-22, No. 12, pp. 1491-1501, December 1985.
6.
S. S. Brilliant, J. C. Knight, and N. G. Leveson,
“Analysis of Faults in an N-Version Software Experiment,”
IEEE Transactions on Software Engineering, Vol. SE-16,
No. 2, February 1990.
7.
World,” Annual
Conference,
http://www.acsac.org/2000/papers/lampson.pdf.
8.
R. Balzer and N. Goldman, “Mediating Connectors,”
Proceedings of the 19th IEEE International Conference on
Distributed Computing Systems, Austin, Texas, May 31-
June 4, 1999, IEEE Computer Society Press, pp. 73-77.
9.
http://www.w3.org/Protocols/rfc2616/rfc2616.html.
B. W. Lampson, “Computer Security in the Real
Security Applications
2000,
Hypertext Transfer Protocol—HTTP/1.1 (RFC 2616),
December
Computer
11-15,
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:25:04 UTC from IEEE Xplore.  Restrictions apply.