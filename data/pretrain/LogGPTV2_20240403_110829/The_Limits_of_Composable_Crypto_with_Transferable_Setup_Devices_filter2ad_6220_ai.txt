relax this assumption to one-way functions.
Our main idea is to rely on an instantiation of Lamport’s one-time signature scheme [Lam79] with a non-
interactive perfectly binding commitment scheme Com (instead of one-way functions), which additionally
has the uniqueness property as in [CKS+14]. In the following, we consider the setting where a sender S and
a receiver R engage in several oblivious transfer instantiations concurrently. We will identify every session
with the identiﬁer ssid. On a high-level, for every OT instance identiﬁed by ssid we generate a one-time
30
signature/veriﬁcation key pair by applying a PRF on (cid:28) = sid∥ssid∥combj
∥j where combj is the receiver’s
jth commitment to its input’s share for that instance. Then the receiver is allowed to query the OT token TKj
only if it possesses a valid signature corresponding to its commitment combj for that instance. Now, since
the signatures are unique, the signatures themselves do not carry any additional information. To conclude,
we use the same protocol as described in the previous section with the following change:
(cid:15) S provides a signature of combj for every j, under key sk(cid:28) for (cid:28) = sid∥ssid∥combi
second message to the receiver.
∥i, along with its
Similarly, we handle the commitments comci and tokens cTKi.
We further note that since the tokens are sent prior to the protocol execution, we use an additional PRF
key in order to sample the random strings x0; x1, for which the OT tokens use in order to decommit to their
shares. Speciﬁcally, the OT tokens will generate this pair of strings by applying a PRF on an input sid∥ssid.
Handling the PRF tokens. To reduce the number of PRF tokens we must ensure that the sender cannot
create stateful tokens that encode information about the PRF queries. Indeed, such as attack can be carried
out once the PRF tokens are being reused. For instance, the token can split two queries into ﬁve strings and
return them as the responses for 10 subsequent queries. Since the output of the PRF queries are relayed to
sender, the sender will be able to recover the ﬁrst query and this violates the min-entropy argument required
to prove that the commitments are statistically hiding. On a high-level, we get around this by requiring
the sender send 2(cid:20) (identical) tokens that compute the same PRF functionality. Then, for each query, the
receiver picks a subset of (cid:20) tokens to be queried and veriﬁes that it received the same outcome from any
token in that subset. In case any one of the tokens abort or the outcomes are not identical, the receiver aborts.
Security is then shown by proving that for any query u, the high min entropy of its outcome v is maintained
even conditioned on subsequent queries. Namely, we extend the proof of Lemma 5.1, and prove that with
overwhelming probability, there are sufﬁciently many preimages for v (namely 22(cid:20)+1) even conditioned
on all subsequent queries. Intuitively, this follows because with overwhelming probability any two token
queries are associated with two distinct tokens subsets.8 The rest of the proof against a corrupted sender
follows similarly to the proof of Theorem 4.1.
Lemma 4.14 (Lemma 5.1 restated) For any i 2 [(cid:20)], let Db denote the distribution obtained by sampling a
random combi with bi = b. Then D0 and D1 are 2
(cid:0)(cid:20)+1-close.
Proof: We continue with the formal proof of the extended Lemma 5.1. Speciﬁcally, instead of having
the sender send 4(cid:20)2 tokens that independently implement the PRF, we will require the sender to send 2(cid:20)
tokens implementing the same PRF functionality for each commitment, in order to implement a simple
cut-and-choose strategy. In all, the sender sends 4(cid:20)2 (cid:2) 2(cid:20) = 8(cid:20)3 tokens.
Namely, for each of the 4(cid:20)2 commitments, we modify the receiver’s algorithm as follows: let the 2(cid:20) to-
(cid:20); TK1
(cid:20).
kens (allegedly) implementing a particular PRF to be used for some commitment be TK0
Then the receiver picks a uniformly sampled u and proceeds as follows:
1; : : : ; TK0
1; TK1
1. Pick (cid:20) random bits h1; : : : ; hk.
2. For every i 2 [(cid:20)], run TKhi
i on input u. If all tokens do not output the same value the receiver halts.
8We wish to acknowledge that our approach is inspired by the communication exchanged with the authors of the [GIS+10]
paper while communicating their ﬁx to the issue we found in their paper.
31
3. Commit by running an extractor on u as described Protocol 2.
(
)
(cid:3)
1
T
2
For a given malicious sender S
(cid:3), let there be at most T = poly(k) sequential sessions in all and let
(U1; V1); : : : ; (UT ; VT ) be the random variables representing the (query/answer) pair for this PRF in the T
sessions, where Vi (and subsequent values) is set to ? if the token aborts or all tokens do not give consistent
answers on query Ui. In Lemma 5.1, it sufﬁces to prove that for any i, with high probability the min-entropy
of Ui conditioned on (U1; : : : ; Ui(cid:0)1; Ui+1; : : : ; UT ; V1; ; VT ) is at least 2(cid:20) + 1. Since Uj for j ̸= i are each
independently sampled by the receiver, we can ﬁx their values to arbitrary strings. Therefore, it sufﬁces to
show that for any sequence of values u1; : : : ; ui(cid:0)1; ui+1; : : : ; uT with high probability the min-entropy of
Ui conditioned on (V1; : : : ; VT and Uj = uj for j ̸= i) is at least 2(cid:20) + 1.
(cid:3). Then the two sequences u1; : : : ; ui(cid:0)1; ui; : : : ; uT and u1; : : : ; ui(cid:0)1; u
Denote by the event Good if there exist no two queries picked by the receiver for which the same values
2(cid:20) , and therefore with
for h1; : : : ; hk in Step 1 are chosen. Using a union bound, except with probability
negligible probability, Good holds. Since Good holds except with negligible probability, it sufﬁces to prove
(cid:3) be such that some token in session i returns vi where the input sequence
our claim when Good holds. Let u
is u1; : : : ; ui(cid:0)1; u
; : : : ; uT will
result in the same sequence of responses (until either some token aborts or some token gives an inconsistent
answer). This is because, since Good holds, for every j > i, uj is queried on at least one token (among the
2(cid:20) tokens implementing the PRF) that was not queried in session i and therefore will behave independently
from the query made in session i. In particular this means that a consistent response for uj for any j > i
must be identical for sequences u1; : : : ; ui(cid:0)1; ui; : : : ; uT and u1; : : : ; ui(cid:0)1; u
; : : : ; uT or must result in a
(cid:3)
premature abort in one of the sequences. It therefore sufﬁces to show that there are sufﬁciently many u
values for which the same sequence of responses are obtained and if the receiver aborts, it aborts in the same
(cid:3).
session for the sequences corresponding to ui and u
Following Lemma 5.1 we have that except with probability 1=2(cid:20), there is a set SVi of size at least
24(cid:20)2 possible values for u such that on input sequence beginning with u1; : : : ; ui(cid:0)1; u, the token will re-
spond with Vi in session i. Let Ai; Ai+1; : : : ; AT be subsets of SVi such that u 2 Aj if on input sequence
; : : : ; uT , the receiver aborts during session j. Let AT +1 (cid:18) SVi be those u on which the re-
u1; : : : ; ui(cid:0)1; u
ceiver does not abort at all. Note that the Aj’s form a partition of SVi. To argue the claim, it sufﬁces to show
that with high probability Ui belongs to Aj such that jAjj > 22k+1. More formally, we bound the number of
“bad” u’s, namely u 2 SVi such that u belongs to Aj and jAjj  24(cid:20)2. This is negligible.
Therefore, it holds that, except with negligible probability, Ui belongs to Aj such that jAjj > 22k+1 and this
concludes the proof of the Lemma.
j which is at most T =2(cid:20)(cid:0)1 since jSVj
(cid:3)
(cid:3)
Handling commitment tokens. As discussed in the beginning of the section, our main idea is to rely on
an instantiation of Lamport’s one-time signature scheme [Lam79] with Com (instead of one-way functions),
which additionally has the uniqueness property as in [CKS+14]. As mentioned above, we will identify every
session by two quantiﬁers (sid; ssid) where sid is the sequential session identiﬁer and ssid is the parallel
session identiﬁer.
Following these modiﬁcations we can allow for the tokens to be created in a setup phase only once and
then used an arbitrary number of times. We exchange the following tokens in an initial setup phase. As in
the previous protocol (cid:5)OT, we additionally rely on a non-interactive perfectly binding commitment scheme
Com and PRFs F; F
′. In more details,
32
A Signature Token TKSIG
(cid:28) = sid∥ssid∥com∥i then compute V = PRF
S : S chooses a PRF key (cid:13) for a PRF family PRF
′
(cid:13)((cid:28) ) and output
(
(cid:13) : f0; 1g(cid:3) ! f0; 1g(cid:20). Let
′
)
vk(cid:28) =
Com(x0
Com(x1
ℓ)b2f0;1g;ℓ2[(cid:20)+1]∥(rb
1; r0
1)
1; r1
1)
(cid:1)(cid:1)(cid:1)
Com(x0
(cid:1)(cid:1)(cid:1) Com(x1
(cid:20)+1; r0
(cid:20)+1; ; r1
(cid:20)+1)
(cid:20)+1)
where V is parsed as (xb
Then S creates token TKSIG
S by sending (Create; sid; ssid; R; S; mid1; M1), that on input sid∥ssid∥com∥i
ℓ)b2f0;1g;ℓ2[(cid:20)+1].
outputs vk, where M1 is the above functionality.
Next, consider the following modiﬁed tokens.
1. fTK0
1j ; TK1
(cid:20)j ; TK1
(cid:20)j
1j ; : : : ; TK0
gj2[4(cid:20)2]: S chooses 8(cid:20)3 random PRF keys f(cid:13)lgl2[8(cid:20)3] for family F . Let
PRF(cid:13)l : f0; 1g5(cid:20) ! f0; 1g(cid:20) denote the pseudorandom function. S creates these tokens by sending
fCreate; sid; ssid; R; S; midl; M2gl2[8(cid:20)3] to R where M1 is the machine that on input (sid; ssid; x),
outputs PRF(cid:13)l(sid∥ssid∥x).
2. TKCom
S
: S chooses a random PRF
′
key (cid:13)
′ for family F
′. Let PRF
(cid:13)′ : f0; 1g(cid:20) ! f0; 1gp((cid:20)) denote
′
by sending (Create; sid; ssid; R; S; midl+1; M3)
the pseudorandom function. S creates token TKCom
to FgWRAP where M2 is the machine that on input (sid; ssid; tcombi; i) does the following:
)
(cid:15) If i = 0: Compute V = PRF
(cid:15) Otherwise: Let (cid:28) = sid∥ssid∥tcombi
(cid:13)′(sid∥0(cid:20)). Then, parse V as e∥r and output come   Com(e; r).
′
′
(cid:13)′((cid:28) ). Then output
S
(
∥i. Compute V = PRF
(cid:1)(cid:1)(cid:1)
Com(x0
(cid:1)(cid:1)(cid:1) Com(x0
Com(x0
Com(x0
ℓ)b2f0;1g;ℓ2[(cid:20)+1]∥(rb
1; r0
1)
1; r0
1)
(cid:20)+1; r0
(cid:20)+1; ; r1
(cid:20)+1)
(cid:20)+1)
ℓ)b2f0;1g;ℓ2[(cid:20)+1] and comsi
b
  Com(si
b; rb)
(comsi
0
1
; comsi
∥si
); vk(cid:28) =
∥r0∥r1∥(xb
1
where V is parsed as si
for b = f0; 1g.
0
3. TKi: For all i 2 [(cid:20)], S creates a token TKi by sending (Create; sid; ssid; R; S; midl+1+i; M4) to
FgWRAP where M4 is deﬁned as follows given input ((cid:27); sid; ssid; i; bi; tcombi; TCdecombi):
Check 1: TCdecombi is a valid decommitment of tcombi to bi.
Check 2: (cid:27) is (the unique) valid signature of tcombi corresponding to the veriﬁcation key vk(cid:28) , where
vk(cid:28) is the key generated by querying TKCom
If both the checks pass then output (si
b; decomsi
b
S where (cid:28) = sid∥ssid∥tcombi
), otherwise output (?;?).
∥i.
Furthermore, we use the same protocol as described in the previous section with the following two
changes:
(cid:15) R sends all the veriﬁcation keys vk(cid:28) along with its ﬁrst message.
(cid:15) S veriﬁes whether the veriﬁcation keys correctly correspond to the commitments tcombi and then
provides a signature of tcombi for every i, under key sk(cid:28) for (cid:28) = sid∥ssid∥tcombi
∥i, along with its
second message to the receiver.
33
Proof Sketch: We brieﬂy highlight the differences in the proof for the modiﬁed protocol.
Sender corruption. The simulator proceeds in stages, a stage for each sid 2 [q2(n)]. In Stage sid, the
simulation proceeds as in the previous protocol (cid:5)OT. Recall ﬁrst that the simulation for that protocol
extracts e in a ﬁrst run and then uses e to equivocate the receiver’s commitments. We will employ the
same strategy here, with the exception that the simulator extracts esid;ssid simultaneously in the ﬁrst
run for every ssid 2 [q1(n)] (namely, for all parallel sessions), as there are q1(n) parallel sessions. We
remark that in the extraction phase we rely heavily on the fact that these sessions are run in parallel.
Then in the rewound executions, the simulator equivocates the receiver’s commitments accordingly.
In addition, the simulator produces all signatures for the second message honestly. Indistinguishability
follows essentially as before. We remark that since the signatures are unique given the veriﬁcation
key, the signatures do not carry any additional information beyond the message.
On a high-level, we rely on the same sequence of hybrids as in the previous protocol (cid:5)OT, once for
each simulation stage. Below are the changes to the hybrids for each stage:
1. In Hybrid H1, the simulator proceeds exactly as S1, with the exception that it extracts all the