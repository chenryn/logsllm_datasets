    f.close()
    print len(cmp_values)
    def brute(c, andv):
        v5 = 0xffffffff
        for i in range(2):
            v5 ^= ord(c[i])
            for j in range(8):
                if v5&1:
                    v5 = (v5>>1)^(0xffffffff&andv)
                else:
                    v5 = (v5>>1)^(0&andv)
        return v5
    def test(andv, cmpv):
        for c1 in range(0x100):
            for c2 in range(0x100):
                c = chr(c1) + chr(c2)
                ret = brute(c, andv)
                #print hex(ret)
                if ret + cmpv == 0xffffffff:
                    return c
        return None
    input = ''
    for i in range(167):
        c = test(and_values[i], cmp_values[i])
        input += c
    f = open('./step4.input', 'wb')
    f.write(input)
    f.close()
**Codetalkers**
首先是一个gif，给了很多简单的图案，有重复的，根据题目的意思和第一张和最后一张进行猜测，猜测为利用图案进行单表替换的加密，类似于福尔摩斯的跳舞的小人。密码学部分简单，那么下面最关键的问题是图片处理了。我们需要对图片进行处理，首先将gif切分：
去掉开始和最后的文字图片，一共将一个gif图片切分为了1245个bmp文件。可以看到在这些图片中有很多图案的形状是重复的，但是颜色和大小都不是重复的，我试了一下直接对这些图片进行相似识别，现有的py很难分得很好，所以我决定对图片进行进一步处理。接下来，我们去掉颜色，将图片转为纯粹的黑白二色图片，连灰度都不要：
    def padlen(a):
        return "0"*(5-len(str(a)))+str(a)
    from PIL import Image
    def RGB2BlackWhite(filename,savename):
        im = Image.open(filename)
        print "image info,", im.format, im.mode, im.size
        (w, h) = im.size
        R = 0
        G = 0
        B = 0
        for x in xrange(w):
            for y in xrange(h):
                pos = (x, y)
                rgb = im.getpixel(pos)
                (r, g, b) = rgb
                R = R + r
                G = G + g
                B = B + b
        rate1 = R * 1000 / (R + G + B)
        rate2 = G * 1000 / (R + G + B)
        rate3 = B * 1000 / (R + G + B)
        print "rate:", rate1, rate2, rate3
        for x in xrange(w):
            for y in xrange(h):
                pos = (x, y)
                rgb = im.getpixel(pos)
                (r, g, b) = rgb
                n = r * rate1 / 1000 + g * rate2 / 1000 + b * rate3 / 1000
                # print "n:",n
                if n >= 10:
                    im.putpixel(pos, (255, 255, 255))
                else:
                    im.putpixel(pos, (0, 0, 0))
        im.save(savename)
    for i in range(1,1246):
        im="codetalkers.gif.ifl/IMG"+padlen(i)+".bmp"
        imsave='bw/'+str(i)+".bmp"
        RGB2BlackWhite(im,imsave)
经过这个脚本转换后，我将图片转为了纯粹的黑白图片：
这里要注意rgb的阈值的选取，可以边测试边调整，发现如果图片全黑那么说明选取的值偏大，可以进行调节，保证有白色的图案出来。
这样转换完成后，还是有问题，就是图案的大小和顺序是不一样的，所以我又找了个图片裁剪的函数，将周围的黑边去掉，并把裁剪完的图片调节为固定大小：
    import Image, ImageChops
    def autoCrop(image,backgroundColor=None):
        '''Intelligent automatic image cropping.
           This functions removes the usless "white" space around an image.
           If the image has an alpha (tranparency) channel, it will be used
           to choose what to crop.
           Otherwise, this function will try to find the most popular color
           on the edges of the image and consider this color "whitespace".
           (You can override this color with the backgroundColor parameter)
           Input:
                image (a PIL Image object): The image to crop.
                backgroundColor (3 integers tuple): eg. (0,0,255)
                     The color to consider "background to crop".
                     If the image is transparent, this parameters will be ignored.
                     If the image is not transparent and this parameter is not
                     provided, it will be automatically calculated.
           Output:
                a PIL Image object : The cropped image.
        '''
        def mostPopularEdgeColor(image):
            ''' Compute who's the most popular color on the edges of an image.
                (left,right,top,bottom)
                Input:
                    image: a PIL Image object
                Ouput:
                    The most popular color (A tuple of integers (R,G,B))
            '''
            im = image
            if im.mode != 'RGB':
                im = image.convert("RGB")
            # Get pixels from the edges of the image:
            width,height = im.size
            left   = im.crop((0,1,1,height-1))
            right  = im.crop((width-1,1,width,height-1))
            top    = im.crop((0,0,width,1))
            bottom = im.crop((0,height-1,width,height))
            pixels = left.tobytes() + right.tobytes() + top.tobytes() + bottom.tobytes()
            # Compute who's the most popular RGB triplet
            counts = {}
            for i in range(0,len(pixels),3):
                RGB = pixels[i]+pixels[i+1]+pixels[i+2]
                if RGB in counts:
                    counts[RGB] += 1
                else:
                    counts[RGB] = 1
            # Get the colour which is the most popular:
            mostPopularColor = sorted([(count,rgba) for (rgba,count) in counts.items()],reverse=True)[0][1]
            return ord(mostPopularColor[0]),ord(mostPopularColor[1]),ord(mostPopularColor[2])
        bbox = None
        # If the image has an alpha (tranparency) layer, we use it to crop the image.
        # Otherwise, we look at the pixels around the image (top, left, bottom and right)
        # and use the most used color as the color to crop.
        # --- For transparent images -----------------------------------------------        if 'A' in image.getbands(): # If the image has a transparency layer, use it.
            # This works for all modes which have transparency layer
            bbox = image.split()[list(image.getbands()).index('A')].getbbox()
        # --- For non-transparent images -------------------------------------------        elif image.mode=='RGB':
            if not backgroundColor:
                backgroundColor = mostPopularEdgeColor(image)
            # Crop a non-transparent image.
            # .getbbox() always crops the black color.
            # So we need to substract the "background" color from our image.
            bg = Image.new("RGB", image.size, backgroundColor)
            diff = ImageChops.difference(image, bg)  # Substract background color from image
            bbox = diff.getbbox()  # Try to find the real bounding box of the image.
        else:
            raise NotImplementedError, "Sorry, this function is not implemented yet for images in mode '%s'." % image.mode
        if bbox:
            image = image.crop(bbox)
        return image
    for i in range(1,1246):
        im = Image.open('bw/'+str(i)+'.bmp')
        cropped = autoCrop(im)
        cropped=cropped.resize((80, 80), Image.ANTIALIAS)
        cropped.save('min/'+str(i)+'.bmp')
调节过后达到了如下效果：
这样处理过后，再进行图案的比对分析，网上的脚本基本均可使用，相同图片和不同图片的差异在30倍以上。最后我将相同的图案用一种字母代替，得到了图片到字符串的转换结果，发现一共有26种不同图案，正好对应26个字母。
    from itertools import izip
    import Image
    def padlen(a):
        return "0"*(5-len(str(a)))+str(a)
    def check(num1,num2):
        i1 = Image.open("min/"+str(num1)+".bmp")
        i2 = Image.open("min/"+str(num2)+".bmp")
        assert i1.mode == i2.mode, "Different kinds of images."
        assert i1.size == i2.size, "Different sizes."
        pairs = izip(i1.getdata(), i2.getdata())
        if len(i1.getbands()) == 1:
            dif = sum(abs(p1 - p2) for p1, p2 in pairs)
        else:
            dif = sum(abs(c1 - c2) for p1, p2 in pairs for c1, c2 in zip(p1, p2))
        ncomponents = i1.size[0] * i1.size[1] * 3
        return (dif / 255.0 * 100) / ncomponents
    import string
    charlist=string.printable
    charlist="abcdefghijklmnopqrstuvwxyz"
    misc=['0']*1246
    p=0
    for i in range(1,1246):
        print i
        if misc[i]=='0':
            misc[i]=charlist[p]
            for j in range(i+1,1246):
                te=check(i,j)
                if misc[j]=='0' and te10 and te<15:
                    print i,j
                    print "sth error"
                    raw_input()
            p += 1
    print "".join(misc)
这样转换完成后，我们可以对得到的字符串在quipquip上破解单表替代密码：
最后的空格去掉就是flag。
**From Russia with Love**
分析dump.img中的程序，发现将第2扇区开始的几个扇区读入到0x1000处，然后跳转到0x1200执行。最后发现会向shell脚本中插入一些字符，插入的代码如下。同时通过ultraiso可以从dump.img中提取得到一个picture.bmp文件。
    f = open('./dump2.img', 'rb')
    d = f.read()[0x7e7:].split('x00')[0]
    f.close()