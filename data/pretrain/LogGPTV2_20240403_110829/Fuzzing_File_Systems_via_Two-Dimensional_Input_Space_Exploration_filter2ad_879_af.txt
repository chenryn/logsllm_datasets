[22] H. Han and S. K. Cha. IMF: Inferred Model-based Fuzzer. In Proceedings
of the 24th ACM Conference on Computer and Communications Security
(CCS), Dallas, TX, Oct.–Nov. 2017.
Automated Software Engineering (ASE), Champaign, IL, Oct. 2017.
[25] D. Jones. Linux system call fuzzer. https://github.com/kernelslacker/
trinity, 2018.
[26] Kernel.org Bugzilla. Btrfs bug entries. https://bugzilla.kernel.org/buglist.
cgi?component=btrfs, 2018.
[27] Kernel.org Bugzilla. ext4 bug entries. https://bugzilla.kernel.org/buglist.
cgi?component=ext4, 2018.
[28] R. Langner. Stuxnet: Dissecting a cyberwarfare weapon. In Proceedings of
the 32nd IEEE Symposium on Security and Privacy (Oakland), Oakland,
CA, May 2011.
[29] M. Larabel. F2FS File-System Moves Forward With Encryption Sup-
port. https://www.phoronix.com/scan.php?page=news_item&px=F2FS-
Encryption-Support, 2015.
[30] C. Lee, D. Sim, J. Y. Hwang, and S. Cho. F2FS: A New File System
for Flash Storage. In Proceedings of the 13th USENIX Conference on
File and Storage Technologies (FAST), Santa Clara, CA, Feb. 2015.
[31] Linux.
Documentation/ﬁlesystems/dax.txt, 2015.
Direct Access
for ﬁles.
https://www.kernel.org/doc/
[32] Linux. fuse - Filesystem in Userspace (FUSE) device. http://man7.org/
linux/man-pages/man4/fuse.4.html, 2015.
[33] X. Liu, Q. Wei, Q. Wang, Z. Zhao, and Z. Yin. CAFA: A Checksum-
Aware Fuzzing Assistant Tool for Coverage Improvement. Security and
Communication Networks, 2018, 2018.
[34] LLVM Project. libFuzzer - a library for coverage-guided fuzz testing.
https://llvm.org/docs/LibFuzzer.html, 2018.
[35] Microsoft. Windows. https://www.microsoft.com/en-us/windows, 2018.
[36] C. Min, S. Kashyap, B. Lee, C. Song, and T. Kim. Cross-checking
semantic correctness: The case of ﬁnding ﬁle system bugs. In Proceedings
of the 25th ACM Symposium on Operating Systems Principles (SOSP),
Monterey, CA, Oct. 2015.
[37] MITRE Corporation. CVE-2009-1235. https://cve.mitre.org/cgi-bin/
cvename.cgi?name=CVE-2009-1235, 2009.
[38] MITRE Corporation. CVE-2017-13830. https://cve.mitre.org/cgi-bin/
cvename.cgi?name=CVE-2017-13830, 2017.
[39] MITRE Corporation. CVE-2017-6990. https://cve.mitre.org/cgi-bin/
cvename.cgi?name=CVE-2017-6990, 2017.
[40] MITRE Corporation. F2FS CVE entries. http://cve.mitre.org/cgi-bin/
cvekey.cgi?keyword=f2fs, 2018.
[41] Mozilla Corporation. MozPeach. https://github.com/MozillaSecurity/
peach, 2017.
[42] Mozilla Corporation.
JavaScript engine fuzzers. https://github.com/
MozillaSecurity/funfuzz, 2018.
[43] MWR Labs. Cross Platform Kernel Fuzzer Framework. https://github.
com/mwrlabs/KernelFuzzer, 2016.
[44] MWR Labs. macOS Kernel Fuzzer.
OSXFuzz, 2017.
https://github.com/mwrlabs/
[45] NCC Group. System call fuzzing of OpenBSD amd64 using TriforceAFL.
https://github.com/nccgroup/TriforceOpenBSDFuzzer, 2016.
[46] NCC Group. AFL/QEMU fuzzing with full-system emulation. https:
//github.com/nccgroup/TriforceAFL, 2017.
[47] NCC Group. A linux system call fuzzer using TriforceAFL. https:
//github.com/nccgroup/TriforceLinuxSyscallFuzzer, 2017.
[48] V. Nossum and Q. Casasnovas. Filesystem Fuzzing with American Fuzzy
Lop. In Vault Linux Storage and Filesystems Conference, 2016.
[49] S. Pailoor, A. Aday, and S. Jana. MoonShine: Optimizing OS Fuzzer Seed
Selection with Trace Distillation. In Proceedings of the 27th USENIX
Security Symposium (Security), Baltimore, MD, Aug. 2018.
[50] Peach Tech. Peach Fuzzer. https://sourceforge.net/projects/peachfuzz,
2016.
[23] R. Hodován, Á. Kiss, and T. Gyimóthy. Grammarinator: a grammar-
based open source fuzzer. In Proceedings of the 9th ACM SIGSOFT
International Workshop on Automating TEST Case Design, Selection,
and Evaluation, pages 45–48. ACM, 2018.
[24] M. Höschele and A. Zeller. Mining input grammars from dynamic taints.
In Proceedings of the 32nd IEEE/ACM International Conference on
[51] H. Peng, Y. Shoshitaishvili, and M. Payer. T-Fuzz: fuzzing by program
transformation. In Proceedings of the 39th IEEE Symposium on Security
and Privacy (Oakland), San Francisco, CA, May 2018.
[52] D. E. Porter, S. Boyd-Wickizer, J. Howell, R. Olinsky, and G. C. Hunt.
Rethinking the library os from the top down. In ACM SIGPLAN Notices,
2011.
(cid:25)(cid:20)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
[53] D. E. Porter, S. Boyd-Wickizer, J. Howell, R. Olinsky, and G. C. Hunt.
Rethinking the library OS from the top down. In ACM SIGPLAN Notices.
ACM, 2011.
[54] O. Purdila, L. A. Grijincu, and N. Tapus. LKL: The Linux kernel library.
In Proceedings of the 9th Roedunet International Conference (RoEduNet).
IEEE, 2010.
[55] N. Rath and M. Szeredi. A network ﬁlesystem client to connect to SSH
servers. https://github.com/libfuse/sshfs, 2018.
[56] Red Hat Inc. Utilities for managing the XFS ﬁlesystem. https://git.kernel.
org/pub/scm/fs/xfs/xfsprogs-dev.git, 2018.
[57] Ribose Inc. FuzzBSD, a ﬁlesystem image fuzzing script to test BSD
kernels. https://github.com/riboseinc/fuzzbsd, 2017.
[58] T. Ridge, D. Sheets, T. Tuerk, A. Giugliano, A. Madhavapeddy, and
P. Sewell. SibylFS: formal speciﬁcation and oracle-based testing for
POSIX and real-world ﬁle systems. In Proceedings of the 25th ACM
Symposium on Operating Systems Principles (SOSP), Monterey, CA, Oct.
2015.
[59] O. Rodeh, J. Bacik, and C. Mason. BTRFS: The Linux B-tree ﬁlesystem.
In Proceedings of the ACM Transactions on Storage (TOS), 2013.
[60] B. Schneier. "Evil Maid" Attacks on Encrypted Hard Drives. https:
//www.schneier.com/blog/archives/2009/10/evil_maid_attac.html, 2009.
[61] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz. kaﬂ:
Hardware-assisted feedback fuzzing for OS kernels.
In Proceedings
of the 26th USENIX Security Symposium (Security), Vancouver, BC,
Canada, Aug. 2017.
[62] SGI, OSDL and Bull. Linux Test Project. https://github.com/linux-test-
project/ltp, 2018.
[63] Silicon Graphics Inc. (SGI).
(x)fstests is a ﬁlesystem testing suite.
https://github.com/kdave/xfstests, 2018.
[64] Silicon Graphics Inc. (SGI) and Red Hat Inc. XFS. http://xfs.org, 2018.
[65] K. Sun, D. Fryer, J. Chu, M. Lakier, A. D. Brown, and A. Goel. Spiffy:
enabling ﬁle-system aware storage applications. In Proceedings of the
16th USENIX Conference on File and Storage Technologies (FAST),
Oakland, CA, Feb. 2018.
[66] K. Sun, M. Lakier, A. D. Brown, and A. Goel. Breaking Apart the
VFS for Managing File Systems. In Proceedings of the 10th USENIX
Workshop on Hot Topics in Storage and File Systems, Boston, MA, July
2018.
[67] The GNOME Project. GVfs. https://wiki.gnome.org/Projects/gvfs, 2018.
[68] L. Torvalds. Linux kernel source tree. https://github.com/torvalds/linux,
2018.
[69] T. Ts’o. Ext2/3/4 ﬁle system utilities. https://github.com/tytso/e2fsprogs,
2018.
[70] Tuxera. NTFS-3G. https://www.tuxera.com/community/open-source-ntfs-
3g, 2017.
[71] T. Wang, T. Wei, G. Gu, and W. Zou. TaintScope: A checksum-aware
directed fuzzing tool for automatic software vulnerability detection. In
Proceedings of the 31th IEEE Symposium on Security and Privacy
(Oakland), Oakland, CA, May 2010.
[72] M. Xie and L. Zefan. Performance improvement of btrfs. LinuxCon
Japan, 2011.
[73] J. Yang, C. Sar, and D. Engler. Explode: a lightweight, general system
for ﬁnding serious storage system errors.
In Proceedings of the 7th
USENIX Symposium on Operating Systems Design and Implementation
(OSDI), Seattle, WA, Nov. 2006.
[74] J. Yang, P. Twohey, D. Engler, and M. Musuvathi. Using model checking
to ﬁnd serious ﬁle system errors. In Proceedings of the ACM Transactions
on Computer Systems (TOCS), 2006.
[75] M. Zalewski. american fuzzy lop (2.52b) - conﬁg.h. https://github.com/
mirrorer/aﬂ/blob/master/conﬁg.h, 2017.
[76] M. Zalewski. american fuzzy lop (2.52b). http://lcamtuf.coredump.cx/aﬂ,
2018.
[77] Zero Day Initiative. CVE-2018-4268. https://www.zerodayinitiative.com/
advisories/ZDI-18-602, 2018.
A. Seed Image
APPENDIX
# root
# folder
# folder
# file protected by ACL
# normal file
# FIFO file
# hardlink to baz
# softlink to baz
1 ./
2 ./foo
3 ./foo/bar
4 ./foo/bar/acl
5 ./foo/bar/baz
6 ./foo/bar/fifo
7 ./foo/bar/hln
8 ./foo/bar/sln
9 ./foo/bar/xattr # file with an extended attribute
Fig. 9: The hierarchy of a seed image tested by JANUS in the
evaluation.
Figure 9 presents the organization of ﬁles and directories stored on a seed
image in our evaluation.
B. Coverage Proﬁling: AFL versus KCOV
1 /* AFL */
2 cur_location = ;
3 bitmap[cur_location ^ prev_location]++;
4 prev_location = cur_location >> 1;
5
6 /* Syzkaller */
7 uint32_t pc = cover_data[i];
8 uint32_t sig = pc ^ prev;
9 prev = hash(pc);
Fig. 10: The code injected by AFL and the code used by Syzkaller
to proﬁle runtime path coverage.
AFL and KCOV used to support Syzkaller apply two different approaches to
instrument a fuzzing target and reserve runtime path coverage in two different
formats. In particular, AFL labels every basic block with a random number,
and at each branch, the code shown in Figure 10 is instrumented. Each byte
set in the bitmap can be considered as a hit on a particular code path.
KCOV relies on the -fsanitize-coverage=trace-pc ﬂag of GCC (>= 6.0)
to inject code at every basic block which emits the current PC value into
a buffer mapped in user space. After the execution for a mutated input is
completed, Syzkaller uses every two consequent PC values to calculate out a
hash value to represent a particular code path (see Figure 10).
Note that Syzkaller uses the lowest 32 bits of a PC value to label the
corresponding basic block, which has lower randomness compared to pseudo
random numbers generated by AFL and thereby results in more collisions that
degrade the fuzzing performance.
C. An LKL Example
Figure 11 provides a simple example of leveraging LKL in an user
application to operate an ext4 image.
D. Serialization Format
JANUS serializes a generate program along with the speculated image status
into a binary ﬁle by following the format described in Figure 12.
E. A Testing Program for Image Fuzzing
Figure 13 presents a ﬁxed sequence of system calls to be performed on
any mutated image when evaluating the effectiveness of JANUS and Syzkaller
in image fuzzing.
F. Supported System Calls
In our implementation, JANUS supports generating and mutating the follow-
ing 34 system calls: read(), write(), open(), seek(), mmap(), getdents64(),
pread64(), pwrite64(), stat(), lstat(), rename(), fsync(), fdatasync(),
syncfs(), sendfile(), access(), ftruncate(), truncate(), fstat(), statfs(),
fstatfs(), utimes(), mkdir(), rmdir(), link(), unlink(), symlink(),
readlink(), chmod(), fchmod(), setxattr(), fallocate(), listxattr(), and
removexattr().
G. File system bugs found by JANUS
Table VI lists the patched bugs found by JANUS in ﬁve widely used ﬁle
systems that were previously unknown.
(cid:25)(cid:20)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
#
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
ext4
XFS
Btrfs
F2FS
HFS+
File system CVE
CVE-2018-1092
CVE-2018-1093
CVE-2018-1094
CVE-2018-1095
CVE-2018-10840
CVE-2018-10876
CVE-2018-10877
CVE-2018-10878
CVE-2018-10879
CVE-2018-10880
CVE-2018-10881
CVE-2018-10882
CVE-2018-10883
-
-
-
CVE-2018-13093
CVE-2018-10322
CVE-2018-10323
CVE-2018-13094
CVE-2018-13095
-
-
CVE-2018-14609
CVE-2018-14610
CVE-2018-14611
CVE-2018-14612
CVE-2018-14613
-
-
-
CVE-2018-13096
CVE-2018-13097
CVE-2018-13098
-
CVE-2018-13099
CVE-2018-13100
-
-
CVE-2018-14614
CVE-2018-14615
CVE-2018-14616
CVE-2018-14617
File
fs/ext4/inode.c
fs/ext4/balloc.c
fs/ext4/super.c
fs/ext4/xattr.c
fs/ext4/xattr.c
fs/ext4/extents.c
fs/ext4/extents.c
fs/ext4/balloc.c
fs/ext4/xattr.c
fs/ext4/inline.c
fs/ext4/ext4.h
fs/jbd2/transaction.c
fs/jbd2/transaction.c
fs/ext4/xattr.c
fs/ext4/namei.c
fs/ext4/inline.c
fs/xfs/xfs_icache.c
fs/xfs/xfs_inode.c
fs/xfs/libxfs/xfs_bmap.c
fs/xfs/xfs_trans_buf.c
fs/xfs/libxfs/xfs_bmap.c
fs/xfs/libxfs/xfs_alloc.c
fs/xfs/libxfs/xfs_dir2.c
fs/btrfs/relocation.c
fs/btrfs/extent_io.c
fs/btrfs/free-space-cache.c
fs/btrfs/ctree.c
fs/btrfs/free-space-cache.c
fs/btrfs/volumes.c
fs/btrfs/locking.c
fs/btrfs/volumes.c
fs/f2fs/segment.c
fs/f2fs/segment.h
fs/f2fs/inode.c
fs/f2fs/segment.h
fs/f2fs/segment.c
fs/f2fs/segment.c
fs/inode.c
fs/f2fs/node.c
fs/f2fs/segment.c
fs/f2fs/inline.c
fs/crypto/crypto.c
fs/hfsplus/dir.c
Function
ext4_iget
ext4_valid_block_bitmap
ext4_ﬁll_super
ext4_xattr_check_entries
ext4_xattr_set_entry
ext4_ext_remove_space
ext4_ext_drop_refs
ext4_init_block_bitmap
ext4_xattr_set_entry
ext4_update_inline_data
ext4_get_group_info
start_this_handle
jbd2_journal_dirty_metadata
ext4_xattr_set_entry
ext4_rename
empty_inline_dir
xfs_iget_cache_hit
xfs_ilock_attr_map_shared
xfs_bmapi_write
xfs_trans_binval
xfs_bmap_extents_to_btree
xfs_alloc_get_freelist
xfs_dir_isempty
__del_reloc_root