HTML> (html (:p "foo"))
(awT au S " (nmon :) d:) (> aWT au ST mON
Foo →（:p "Foo")
当然，多数HTML都由带有标签的元素构成。用来描述每个元素的三部分信息分别是标签、
通过使用PRINC-TO-STRING，满足该谓词的对象将把它们转换成字符串，然后在转义任何
还可以定义一个新的读取器层面的语法来处理新的对象类型。但这样做不值得，并且会带来更多麻烦。
NIL
NIL
NIL
"foo
:foo
10
FOO形式
表30-1自求值对象的FOO输出
www.TopSage.com
foo &amp; bar
FOO
foo
生成的HTML
30.2FOO 语言
377
---
## Page 395
开始。
之上，它会支持诸如转义保留字符和生成美观的缩进输出之类的特性，因此我们有理由从这里
输出同样HTML的CommonLisp代码。无论是解释器还是编译器都将构建在一个共同的代码基础
器负责遍历一棵FOO形式树并直接输出对应的HTML，一个编译器遍历一棵树并将其转化成可以
列的FOO形式转化成你想要的HTML呢？前面提到，需要实现FOO的两个语言处理器：一个解释
际求值点对形式的代码将使用该函数而不担心它所采用的语法。
一个形式并将其解析成3个元素：标签、属性列表和主体列表，然后以多值的形式返回它们。实
种语法。
这样，可以像下面这样书写前面两个表达式：
键字为标签的HTML元素，嵌套列表的REST部分作为其属性，外层列表的REST部分作为其主体。
378
为了完全地抽象掉两种语法变体之间的差异，你可以定义函数parse-cons-form，它接受
现在已经基本规范了语言，你可以考虑如何实际来实现语言的处理器了。怎样才能将一系
(defun parse-implicit-attributes-sexp (sexp)
(defun parse-explicit-attributes-sexp (sexp)
应当将test函数参数化，因为以后你需要在该名字上使用稍微不同的谓词来测试相同的两
(defun parse-cons-form （sexp)
(defun cons-form-p（form &optional（test #'keywordp))
下面的函数测试一个给定对象是否匹配这两种语法：
NIL
（html((:p:id"x":style“foo")"Foo"）)
Foo
HTML>（html((:p:style"foo")"Foo"))
(loop with tag =(first sexp)
(destructuring-bind
(if
(values tag attributes body)))
finally(return (values tag attributes rest))))
(parse-implicit-attributes-sexp sexp)))
end
when
第30章实践：HTML生成库，解释器部分
collect （second rest)into attributes
collect (first rest) into attributes and
(or （funcall test （car form）)
style='foo'>Foo
(second rest)
（and （consp （car form))
(keywordp (first rest))(second rest))
(restsexp)
((tag&rest
www.TopSage.com
by#'cddr
attributes）&body body)sexp
（funcall test(caarform))))))
e.com
---
## Page 396
一个分号组成。这些数值转义项有时用来在HTML中嵌人非ASCII的字符。
些字符必须被替换成字符引用项“&lt;”、
样的字符一定不能出现在元素或属性值的文本中，它们是和&。在元素文本或属性值中，这
30.3
escape-char返回的对应的字符项。
列，然后返回第一个参数的一个副本，其中所有在第二个参数中出现过的字符都被替换成由
本书Web站点上下载的源代码中的DEFPACKAGE定义：
的宏生成宏的名字。
COMMON-LISP包的名字以及儿乎同样经常依赖的来自COM.GIGAMONKEYS.MACRO-UTILITIES
由于FOO是一个底层库，你开发的这个包并不依赖很多外部代码。只有通常依赖的来自
需要依赖的首要基础设施是知道如何转义那些HTML中带有特殊含义字符的代码。有三个这
下面的函数接受单个字符并返回一个含有该字符的字符引用项的字符串：
(defun escape (in to-escape)
你可以使用该函数来作为函数escape的基础，escape函数接受一个字符串和一个字符序
(defun escape-char (char)
(case char
字符转义
(flet ((needs-escape-p (char) (find char to-escape)))
(:export
(with-output-to-string (out)
(t (format nil "&#~d;" (char-code char)))))
(αonb，"\#)
#\ (escape
HTML>
下面是一些例子：
(defparameter *attribute-escapes* "<>&\"+")
(defparameter *element-escapes* "<>&")
(indent-if-necessary
(loop for start
(indenting-p
(out
unless
(indentation
缩进打印器
(setf
while pos))
when pos do (emit-newline ip)
for
第 30章 实践：HTML 生成库，解释器部分
(escape
pos
(beginning-of-line-p ip) ni1)))
(*sadeosa-auawata* ,ea,  oo 
ip)
 :accessor indenting-p
:accessor out
www.TopSage.com
(out ip) :start start :end end)
:initform t)))
:initform 0)
:initarg :out)
---
## Page 398
的操作的列表，其可被优化并编译成以更高效方式生成同样输出的代码。我把这些广义函数称为
30.5
这非常有用。
换行结束的输出，而另一些代码希望生成以换行开始的输出，但你不希望两者之间产生空行时，
中间没有任何emit的多个emit-freshline调用将不会产生一个空行。在一些代码希望生成以
总是输出一个换行,而emit-freshline则只有在beginning-of-line-p为假时才输出。这样,
都用来输出一个换行符，类似于rORMAT指令~%和~&。这就是说，唯一的区别在于emit-newline
后台接口。它由下面8个广义函数构成：
indenting-printer的代码可以通过操作indentation和indenting-p槽来控制缩进。递增和
定是否需要输出缩进，以及当两者均为真时输出由indentation的值所指定数量的空格。使用
现在可以定义将被FOO语言处理器用来输出HTML的接口了。你可以将该接口定义成一组广
(defgeneric raw-string (processor string &optional newlines-p))
有了这些先决条件，现在就可以开始进入FOO处理器的核心地带了。
(defun emit-newline (ip)
 indenting-printer API中的最后两个函数是emit-newline和emit-freshline，两者
(defun emit-freshline (ip)
(defun indent-if-necessary (ip)
助手函数indent-if-necessary通过检测beginning-of-line-p和indenting-p来决
(defgeneric embed-code (processor code))
(defgeneric embed-value (processor value))
(defgeneric toggle-indenting (processor))
(defgeneric unindent (processor))
(defgeneric indent (processor))
(defgeneric freshline (processor))
(defgeneric newline (processor))
(unless (beginning-of-line-p ip) (emit-newline ip)))
HTML处理器接口
(write-char
(setf (beginning-of-line-p ip) nil)))
(out ip))
www.TopSage.com
(indenting-p ip))
30.5HTML处理器接口
381
---
## Page 399
HTML。因此除了newline之外，下面的方法全部都会在做任何事之前检查*pretty*：
HTML美化打印器才会生成美化的输出。当它是NIL时，你应当生成没有不必要空白的紧凑
indenting-printer的相当直接的管理。唯一的亮点是只有当动态变量*pretty*为真时，
NIL的newlines-p参数。
换行的字符串来调用，因此默认的行为是使用emit/no-newlines，除非调用者指定了一个非
要输出一个正常保留的字符，要么是所有的保留字都已经被转义了。通常raw-string以不含有
法了。
槽用来保存制表符宽度，即对于HTML元素的每一层嵌套缩进你想要增加的空格数。
30.6美化打印器后台
的方法的具体实现，该类被用来生成人类可读的HTML。
系列函数的调用来实现的。
义函数定义了FOO语言处理器所使用的抽象操作，并且它们并不总是通过对indenting-printer
但也许理解这些抽象操作语义的最简单方式是去查看特化在html-pretty-printer类上
382
① 另一个更纯粹的面向对象的方法是定义两个类，也许是html-pretty-printer和html-raw-printer，然后
FOO处理器使用raw-string函数来输出不需要字符转义的字符串，这要么是因为你实际想