-   已安装 [*mdevctl*]{.emphasis} 软件包。
    ``` literallayout
    # yum install mdevctl
    ```
-   要从中删除该设备的虚拟机关闭。
:::
::: orderedlist
**流程**
1.  获取您要删除的介质设备的 UUID。要做到这一点，使用
    `mdevctl list`{.literal} 命令：
    ``` literallayout
    # mdevctl list
    85006552-1b4b-45ef-ad62-de05be9171df 0000:01:00.0 nvidia-63 (defined)
    30820a6f-b1a5-4503-91ca-0c10ba58692a 0000:01:00.0 nvidia-63 (defined)
    ```
2.  停止 mediated vGPU 设备的运行实例。为此，请使用
    `mdevctl stop`{.literal} 命令及 设备的 UUID。例如，停止
    `30820a6f-b1a5-4503-91ca-0c10ba58692a`{.literal} 设备：
    ``` literallayout
    # mdevctl stop -u 30820a6f-b1a5-4503-91ca-0c10ba58692a
    ```
3.  从虚拟机 XML 配置中删除该设备。为此，可使用 `virsh edit`{.literal}
    实用程序编辑虚拟机的 XML 配置，并删除 mdev
    的配置段。这个片段类似如下：
    ``` programlisting
    ```
    请注意，停止和分离 mediated 设备不会删除它，而是将其保留为
    [**defined**]{.strong}。因此，您可以
    [重启](#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#starting-nvidia-vgpu-devices_assembly_managing-nvidia-vgpu-devices){.link}
    该设备并将其
    [附加到](#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#attaching-nvidia-vgpu-devices_assembly_managing-nvidia-vgpu-devices){.link}
    其他虚拟机。
4.  [**可选：**]{.strong} 要删除已停止的介质设备，请移除其定义：
    ``` literallayout
    # mdevctl undefine -u 30820a6f-b1a5-4503-91ca-0c10ba58692a
    ```
:::
::: itemizedlist
**验证**
-   如果您只停止和分离该设备，请列出活跃的介质设备以及定义的介质设备。
    ``` literallayout
    # mdevctl list
    85006552-1b4b-45ef-ad62-de05be9171df 0000:01:00.0 nvidia-63 (defined)
    # mdevctl list --defined
    85006552-1b4b-45ef-ad62-de05be9171df 0000:01:00.0 nvidia-63 auto (active)
    30820a6f-b1a5-4503-91ca-0c10ba58692a 0000:01:00.0 nvidia-63 manual
    ```
    如果第一个命令没有显示该设备，但第二个命令会成功执行。
-   如果您也删除了该设备，第二个命令不应该显示该设备。
    ``` literallayout
    # mdevctl list
    85006552-1b4b-45ef-ad62-de05be9171df 0000:01:00.0 nvidia-63 (defined)
    # mdevctl list --defined
    85006552-1b4b-45ef-ad62-de05be9171df 0000:01:00.0 nvidia-63 auto (active)
    ```
:::
::: itemizedlist
**其它资源**
-   有关使用 `mdevctl`{.literal} 实用程序的更多信息，请使用
    `man mdevctl`{.literal}。
:::
:::
::: section
::: titlepage
## []{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#proc_obtaining-nvidia-vgpu-information-about-your-system_assembly_managing-nvidia-vgpu-devices}获取有关您系统的 NVIDIA vGPU 信息 {.title}
:::
要评估您可用的 vGPU 功能，您可以获取系统中介质设备的附加信息，例如：
::: itemizedlist
-   可创建给定类型的 mediated 设备
-   您的系统中已经配置了哪些介质设备。
:::
::: itemizedlist
**先决条件**
-   已安装 [*mdevctl*]{.emphasis} 软件包。
    ``` literallayout
    # yum install mdevctl
    ```
:::
::: itemizedlist
**流程**
-   要查看主机上可用的 vGPU 类型，请使用 `mdevctl type 命令`{.literal}。
    例如，下面的显示了使用 0000:41:00.0 PCI 总线下使用物理 Tesla T4
    卡的系统信息：
    ``` literallayout
    # mdevctl types
    0000:41:00.0
      nvidia-222
        Available instances: 0
        Device API: vfio-pci
        Name: GRID T4-1B
        Description: num_heads=4, frl_config=45, framebuffer=1024M, max_resolution=5120x2880, max_instance=16
      nvidia-223
        Available instances: 0
        Device API: vfio-pci
        Name: GRID T4-2B
        Description: num_heads=4, frl_config=45, framebuffer=2048M, max_resolution=5120x2880, max_instance=8
      nvidia-224
        Available instances: 0
        Device API: vfio-pci
        Name: GRID T4-2B4
        Description: num_heads=4, frl_config=45, framebuffer=2048M, max_resolution=5120x2880, max_instance=8
      nvidia-225
        Available instances: 0
        Device API: vfio-pci
        Name: GRID T4-1A
        Description: num_heads=1, frl_config=60, framebuffer=1024M, max_resolution=1280x1024, max_instance=16
        [...]
    ```
-   要查看主机上活跃的 vGPU 设备，包括其类型、UUID 和父设备的 PCI
    总线，请使用 `mdevctl list`{.literal} 命令：
    ``` literallayout
    # mdevctl list
    85006552-1b4b-45ef-ad62-de05be9171df 0000:41:00.0 nvidia-223
    83c32df7-d52e-4ec1-9668-1f3c7e4df107 0000:41:00.0 nvidia-223 (defined)
    ```
    本例显示，`85006552-1b4b-45ef-ad62-de05be9171df`{.literal}
    设备正在运行但未定义，`83c32df7-d52e-4ec1-9668-1f3c7e4df107`{.literal}
    已定义并运行。
:::
::: itemizedlist
**其它资源**
-   有关使用 `mdevctl`{.literal} 实用程序的更多信息，请使用
    `man mdevctl`{.literal}。
:::
:::
::: section
::: titlepage
## []{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#ref_remote-desktop-streaming-services-for-nvidia-vgpu_assembly_managing-nvidia-vgpu-devices}用于 NVIDIA vGPU 的远程桌面流服务 {.title}
:::
以下远程桌面流服务已被成功测试，以用于 RHEL 8 主机中的 NVIDIA vGPU
功能：
::: itemizedlist
-   [**HP-RGS**]{.strong} - 请注意，目前不能将 HP-RGS 与 RHEL 8
    虚拟机搭配使用。
-   [**Mechdyne TGX**]{.strong} - 请注意，当前无法将 Mechdyne TGX 与
    Windows Server 2016 虚拟机一起使用。
-   [**NICE DCV**]{.strong} -
    在使用此流服务时，红帽建议使用固定解析设置，因为在某些情况下使用动态解析会生成一个黑色屏幕。此外，目前无法将
    NICE DCV 用于 RHEL 8 虚拟机。
:::
:::
::: section
::: titlepage
## []{#assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization.html#related-information-assembly_managing-nvidia-vgpu-devices}相关信息 {.title}
:::
::: itemizedlist
-   有关在 RHEL with KVM 中使用 NVIDIA vGPU 的详情，请查看 [NVIDIA GPU
    软件文档](https://docs.nvidia.com/grid/latest/grid-vgpu-release-notes-red-hat-el-kvm/index.html#validated-platforms){.link}。
:::
:::
:::
:::
[]{#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html}
::: chapter
::: titlepage
# []{#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization}第 13 章 配置虚拟机网络连接 {.title}
:::
要使虚拟机(VM)通过网络连接到您的主机、连接到您主机上的其他虚拟机，并且要连接到外部网络上的位置，必须相应地配置虚拟机网络。为提供虚拟机网络，RHEL
8 管理程序和新创建的虚拟机具有默认的网络配置，也可以进一步修改。例如：
::: itemizedlist
-   您可以将主机上的虚拟机通过主机之外的位置发现并连接到，就如同虚拟机与主机位于相同的网络中一样。
-   您可以部分或完全将虚拟机与入站网络流量隔离，以提高其安全性，并最大程度降低影响主机的任何问题的风险。
:::
以下小节解释了各种类型的虚拟机网络配置，并提供设置所选虚拟机网络配置的说明。
::: section
::: titlepage
# []{#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#understanding-virtual-networking-overview_configuring-virtual-machine-network-connections}了解虚拟网络 {.title}
:::
主机硬件必须协助虚拟机(VM)连接到网络上的其他设备和位置。以下小节解释了虚拟机网络连接的机制，并描述了默认虚拟机网络设置。
::: section
::: titlepage
## []{#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#how-virtual-networks-work_understanding-virtual-networking-overview}虚拟网络的工作方式 {.title}
:::
虚拟网络使用了虚拟网络交换机的概念。虚拟网络交换机是在主机机器中运行的软件构造。VM
通过虚拟网络交换机连接到网络。根据虚拟交换机的配置，虚拟机可以使用由虚拟机监控程序管理的现有虚拟网络或不同的网络连接方法。
下图显示了将两个虚拟机连接到网络的虚拟网络交换机：
::: informalfigure
::: mediaobject
![vn 02 switchandtwoguests](images/vn-02-switchandtwoguests.png)
:::
:::
从客户机操作系统的角度来看，虚拟网络连接与物理网络连接相同。主机计算机将虚拟网络交换机视为网络接口。首次安装和启动
`libvirtd`{.literal} 服务时，它会创建 [**virbr0**]{.strong}
（虚拟机的默认网络接口）。
要查看有关此接口的信息，请在主机上使用 `ip`{.literal} 实用程序。
``` literallayout
$ ip addr show virbr0
3: virbr0:  mtu 1500 qdisc noqueue state
 UNKNOWN link/ether 1b:c4:94:cf:fd:17 brd ff:ff:ff:ff:ff:ff
 inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0
```
默认情况下，单一主机上的所有虚拟机都连接到名为 [**default**]{.strong}
的同一 [NAT
类型](#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#virtual-networking-network-address-translation_types-of-virtual-machine-network-connections "使用网络地址转换进行虚拟联网"){.link}
虚拟网络，该网络使用 [**virbr0**]{.strong} 接口。详情请查看
["虚拟网络默认配置"一节](#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#virtual-networking-default-configuration_understanding-virtual-networking-overview "虚拟网络默认配置"){.xref}。
对于虚拟机的基本出站网络访问，通常不需要额外的网络设置，因为默认网络与
`libvirt`{.literal} 软件包一起安装，并在 `libvirtd`{.literal}
服务启动时自动启动。
如果需要其他虚拟机网络功能，您可以创建额外的虚拟网络和网络接口，并将虚拟机配置为使用它们。除了默认的
NAT 外，这些网络和接口也可以配置为使用以下模式之一：
::: itemizedlist
-   [路由模式](#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#virtual-networking-routed-mode_types-of-virtual-machine-network-connections "路由模式中的虚拟网络"){.link}
-   [网桥模式](#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#virtual-networking-bridged-mode_types-of-virtual-machine-network-connections "网桥模式中的虚拟网络"){.link}
-   [隔离模式](#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#virtual-networking-isolated-mode_types-of-virtual-machine-network-connections "以隔离模式的虚拟网络"){.link}
-   [开放模式](#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#virtual-networking-open-mode_types-of-virtual-machine-network-connections "开放式模式中的虚拟网络"){.link}
:::
:::
::: section
::: titlepage
## []{#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#virtual-networking-default-configuration_understanding-virtual-networking-overview}虚拟网络默认配置 {.title}
:::
当 `libvirtd`{.literal}
服务首次安装到虚拟化主机上时，它包含网络地址转换(NAT)模式中的初始虚拟网络配置。默认情况下，主机上的所有虚拟机都连接到名为
[**default**]{.strong} 的同一 `libvirt`{.literal}
虚拟网络。这个网络上的虚拟机可以连接到主机上和主机之外的网络位置，但有以下限制：