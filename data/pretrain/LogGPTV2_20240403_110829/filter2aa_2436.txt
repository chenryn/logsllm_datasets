# macOS/iOS Kernel Debugging and Heap Feng Shui

## Presenter
- **Min (Spark) Zheng**  
  - Security Expert at Alibaba Mobile Security  
  - Twitter: @蒸米spark, Weibo: 蒸米spark  
  - PhD from CUHK, Member of Blue-lotus and Insight-labs  
  - Formerly worked at FireEye, Baidu, and Tencent  
  - Focus on Android and iOS system security

## Co-author
- **Xiangyu Liu**  
  - Security Engineer at Alibaba

## Special Thanks
- yang dian, aimin pan, jingle, qwertyoruiop, windknown, liangchen, qoobee, etc.

## Outline
1. Introduction
2. macOS Two-Machine Debugging
3. iOS Kernel Debugging
4. Debugging Mach_voucher Heap Overflow
5. Traditional Heap Feng Shui
6. Port Feng Shui
7. Conclusion

## Introduction to macOS/iOS Kernel
- **XNU**: The kernel developed by Apple for iOS and macOS, released as open-source software under the Darwin operating system.
  - **macOS XNU**: Open source, can be compiled and debugged.
  - **iOS XNU**: Not officially open source, but most of its implementation is similar to macOS.

## macOS Two-Machine Debugging
- **Tools and Setup**
  - **Machines**: Two MacBooks or one MacBook with a VM (different system versions are acceptable).
  - **Equipment**: 
    - Thunderbolt to FireWire * 2
    - Belkin FireWire 800 9/9-Pin cable * 1
    - Thunderbolt 3 (USB-C) to Thunderbolt 2 * 2 (for new 2016 MacBook)
- **Steps**
  1. Install KDK (Kernel Debug Kit) on both MacBooks.
  2. Connect the MacBooks using the FireWire cable.
  3. Execute `fwkdp` on the host MacBook.
  4. Copy `kernel.development` from KDK to the `System/Library/Kernels/` folder on the debug MacBook.
  5. Execute the following commands on the debug MacBook:
     ```bash
     sudo nvram boot-args="debug=0x147 kdp_match_name=firewire fwkdp=0x8000 kcsuffix=development pmuflags=1 -v keepsyms=1"
     sudo kextcache -invalidate /
     sudo reboot
     ```
  6. After the debug MacBook reboots, start debugging on the host MacBook with `lldb, kdp-remote localhost`.
  7. Use `image list` to get the kernel addresses of partial kexts.
  8. Use `x/nx` to inspect data in the kernel.
  9. Set breakpoints in the kernel using `b *address`.
  10. Pause the debugging machine with `Command+Alt+Control+Shift+Esc`.
  11. Use `int $3` to set breakpoints in the XNU source code and `printf()` to print kernel information.
  12. Load Python scripts in lldb for more useful information using `command script import`.
  13. Use `showallkexts` to get the kernel addresses of all kexts.

## iOS Kernel Debugging
- **Kernelcache**
  - **Before iOS 10**: Encrypted. Keys can be found at [The iPhone Wiki](https://www.theiphonewiki.com/wiki/Firmware_Keys/9.x).
  - **After iOS 10**: No encryption. Unzip and decode the kernel using `img4tool`, and extract kernel information with `joker` and `IDA`.

- **Task_for_pid**
  - Use `task_for_pid()` to read/write arbitrary kernel memory.
  - If no jailbreak or `task_for_pid()` patch, use alternative methods.

- **Kernel Slide**
  - **arm32**: Easy to determine.
  - **arm64**: More complex. Create an OSObjects in the kernel, find its vtable pointer, and search backwards from the vtable address to find the kernel header.

- **Root and Port Address**
  - Use offset + kernel slide to find the kernel objects addresses of related ports in memory.
  - Refer to luca’s yalu and ianbeer’s mach_portal for more details.

## Debugging Mach_voucher Heap Overflow
- **Vulnerable Code**
  - `Mach_voucher_extract_attr_recipe_trap()` is a new function in iOS 10 and macOS 10.12 with a buffer overflow vulnerability.
  - Set breakpoints at `0xffffff8014631540` and `0xffffff8014631545` to debug the heap overflow.

## Traditional Heap Feng Shui
- **Mitigation Mechanism**
  - In iOS 10 and macOS 10.12, Apple added a mitigation mechanism to check for freeing into the wrong zone attack.
  - Use `mach_port_allocate_full()` to allocate ipc_kmsg objects in the kernel memory.
  - Use exception port to send and receive data to the kernel memory without freeing it after receiving.
  - Calculate the offset to manipulate the kernel memory layout.

- **Steps**
  1. Allocate 2000 prealloc ports to ensure the following ports (holder, first_port, second_port) are continuous.
  2. Free the holder and overflow the first 0x40 bytes of the first_port.
  3. Use the first_port to read and write the content of the second_port.
  4. Change the header of the second_port to make it valid.
  5. Send a message to the second port to set ikm_next and ikm_prev to point to itself.
  6. Receive the content of the first port to get the address of the second_port.
  7. Reset the second port and free it, then allocate an AGXCommandQueue UserClient to hold the spot of the second_port.
  8. Leak kslide by comparing the dynamic vtable address with the vtable in the kernelcache.
  9. Use OSSerialize to create a ROP chain for arbitrary kernel memory read and write.
  10. Call `IOConnectGetService(Client_port)` to trigger the ROP chain.
  11. Perform kernel patching (refer to yalu 102).

## Port Feng Shui
- **Mach Message**
  - Use MACH_MSG_OOL_PORTS_DESCRIPTOR to transmit out-of-line ports to the kernel.
  - Overflow pointers to modify an ipc_object pointer to point to a fake ipc_object in user mode.
  - Create a fake task for the fake port and set io_bits to IKOT_TASK.
  - Use `pid_for_task()` to read arbitrary 32-bit kernel memory.
  - Dump kernel ipc_object and kernel task to the fake ipc_object and fake task.
  - Use `task_get_special_port()` to get the kernel task port for arbitrary kernel memory read and write.

## Conclusion
- **macOS/iOS Kernel Debugging**: Essential for kernel exploit development.
- **Traditional Heap Feng Shui**: Requires ROP chains, unstable, and needs multiple feng shui attempts.
- **Port Feng Shui**: Does not need ROP, uses data structures, stable with a high success rate, but easy for Apple to fix.

## References
1. Yalu 102: [GitHub](https://github.com/kpwn/yalu102)
2. Mach_voucher Bug Report: [Chromium Project Zero](https://bugs.chromium.org/p/project-zero/issues/detail?id=1004)
3. iOS Kernel Utilities: [GitHub](https://github.com/Siguza/ios-kern-utils)

Thank you!