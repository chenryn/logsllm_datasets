# echo "flush ruleset" > /tmp/nftables
导出当前规则集：
# nft list ruleset >> /tmp/nftables
可以直接修改/tmp/nftables文件，使更改生效则运行：
# nft -f /tmp/nftables
```
---
### 禁ping
**临时性,重启后失效**
```bash
echo 0 >/proc/sys/net/ipv4/icmp_echo_ignore_all     # 允许 ping
echo 1 >/proc/sys/net/ipv4/icmp_echo_ignore_all     # 禁止 ping
```
**长期性**
```bash
vim /etc/rc.d/rc.local
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all
```
或
```bash
vim /etc/sysctl.conf
net.ipv4.icmp_echo_ignore_all=1
```
`sysctl -p` 使新配置生效
---
### SSH
**文章**
- [Multiple Ways to Secure SSH Port](http://www.hackingarticles.in/multiple-ways-to-secure-ssh-port/)
**查**
- **查询可以远程登录的帐号信息**
    ```bash
    awk '/\$1|\$6/{print $1}' /etc/shadow
    ```
- **查看尝试暴力破解机器密码的人**
    ```bash
    # Debian 系的发行版
    grep "Failed password for root" /var/log/auth.log | awk '{print $11}' | sort | uniq -c | sort -nr | more
    # Red Hat 系的发行版
    grep "Failed password for root" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more
    ```
- **查看暴力猜用户名的人**
    ```bash
    # Debian 系的发行版
    grep "Failed password for invalid user" /var/log/auth.log | awk '{print $13}' | sort | uniq -c | sort -nr | more
    # Red Hat 系的发行版
    grep "Failed password for invalid user" /var/log/secure | awk '{print $13}' | sort | uniq -c | sort -nr | more
    grep "Failed password" /var/log/secure | awk {'print $9'} | sort | uniq -c | sort -nr
    grep -o "Failed password" /var/log/secure|uniq -c
    ```
- **IP 信息**
    ```bash
    # Debian 系的发行版
    grep "Failed password for root" /var/log/auth.log | awk '{print $11}' | sort | uniq -c | sort -nr | more
    # Red Hat 系的发行版
    grep "Failed password for root" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more
    ```
- **登录成功**
    ```bash
    # Debian 系的发行版
    grep "Accepted " /var/log/auth.log | awk '{print $11}' | sort | uniq -c | sort -nr | more
    # Red Hat 系的发行版
    grep 'Accepted' /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr
    grep "Accepted " /var/log/secure | awk '{print $1,$2,$3,$9,$11}'
    grep "Accepted " /var/log/secure* | awk '{print $1,$2,$3,$9,$11}'
    ```
- **私钥**
    ```bash
    ll -al /etc/ssh/
    ll -al /root/.ssh/
    ```
**防**
- **ping 钥匙**
    - [使用 ping 钥匙临时开启 SSH:22 端口,实现远程安全 SSH 登录管理就这么简单](https://www.cnblogs.com/martinzhang/p/5348769.html)
    ```bash
    # 规则1 只接受Data为1078字节的ping包,并将源IP记录到自定义名为sshKeyList的列表中
    iptables -A INPUT -p icmp -m icmp --icmp-type 8 -m length --length 1078 -m recent --name sshKeyList --set -j ACCEPT
    # 规则2 若30秒内发送次数达到6次(及更高),当发起SSH:22新连接请求时拒绝
    iptables -A INPUT -p tcp -m tcp --dport 22 --syn -m recent --name sshKeyList --rcheck --seconds 30 --hitcount 6 -j DROP
    # 规则3 若30秒内发送次数达到5次,当发起SSH:22新连接请求时放行
    iptables -A INPUT -p tcp -m tcp --dport 22 --syn -m recent --name sshKeyList --rcheck --seconds 30 --hitcount 5 -j ACCEPT
    # 规则4 对于已建立的连接放行
    iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT
    # 规则5 老规矩:最后的拒绝
    iptables -A INPUT -j DROP
    ```
- **更改默认端口**
    修改 `/etc/ssh/sshd_config` 文件,将其中的 Port 22 改为指定的端口
    `!!! 警告,记得防火墙要先放行端口,不然你的远程主机就连不上了🤣!!!`
    ```
    service ssh restart
    ```
- **配置使用 RSA 私钥登录**
    1. 先生成你的客户端的密钥,包括一个私钥和公钥
        ```bash
        ssh-keygen -t rsa
        ```
    2. 把公钥拷贝到服务器上,注意,生成私钥的时候,文件名是可以自定义的,且可以再加一层密码,所以建议文件名取自己能识别出哪台机器的名字.
        ```bash
        cd /root/.ssh
        scp id_rsa.pub PI:EMAIL:~/
        ```
    3. 然后在服务器上,你的用户目录下,新建 `.ssh` 文件夹,并将该文件夹的权限设为 700
        ```bash
        cd
        mkdir .ssh
        chmod 700 .ssh
        ```
    4. 新建一个 authorized_keys,这是默认允许的 key 存储的文件.如果已经存在,则只需要将上传的 id_rsa.pub 文件内容追加进去即可,如果不存在则新建并改权限为 400 即可. 然后编辑 ssh 的配置文件
        ```bash
        mv id_rsa.pub .ssh
        cd .ssh
        cat id_rsa.pub >> authorized_keys
        chmod 600 authorized_keys
        ```
        ```bash
        vim /etc/ssh/sshd_config
        RSAAuthentication yes                           # RSA 认证
        PubkeyAuthentication yes                        # 开启公钥验证
        AuthorizedKeysFile /root/.ssh/authorized_keys   # 验证文件路径
        PasswordAuthentication no                       # 禁止密码登录
        ```
        `service sshd restart` 重启 sshd 服务
    5. 测试使用私钥登录
        ```bash
        ssh root@x.x.x.x -i id_rsa
        ```
- **禁止 root 用户登录**
    可以建一个用户来专门管理,而非直接使用 root 用户,修改 /etc/ssh/sshd_config
    ```vim
    vim /etc/ssh/sshd_config
    PermitRootLogin no
    ```
- **使用 Fail2ban**
    - [fail2ban](https://github.com/fail2ban/fail2ban) ,详细搭建步骤请移步 [Power-Linux](./Power-Linux.md##Fail2ban)
- **SSH 陷阱**
    - [skeeto/endlessh](https://github.com/skeeto/endlessh) - 蓝队 SSH 陷阱
---
### 文件共享
**NFS服务**
配置文件
```
/etc/exports
```
**TFTP服务**
配置文件
```
/etc/default/tftpd-hpa
/etc/xinetd.d/tftp
```
**samba服务**
配置文件
```
/etc/samba/smb.conf
```
---
## 加固
### 查后门
**相关文章**
- [linux常见backdoor及排查技术](https://xz.aliyun.com/t/4090)
**添加 root 权限后门用户**
检查 `/etc/passwd` 文件是否有异常
**vim 后门**
检测对应 vim 进程号虚拟目录的 map 文件是否有 python 字眼.
查看连接情况 `netstat -antlp`
例如发现 vim pid 为 12
```
file /proc/12/exe
more /proc/12/cmdline
more /proc/12/maps | grep python
```
**strace 记录**
通过排查 shell 的配置文件或者 `alias` 命令即可发现,例如 `~/.bashrc` 和 `~/.bash_profile` 文件查看是否有恶意的 alias 问题.
**定时任务和开机启动项**
 一般通过 `crontab -l` 命令即可检测到定时任务后门.不同的 linux 发行版可能查看开机启动项的文件不大相同,Debian 系 linux 系统一般是通过查看 `/etc/init.d` 目录有无最近修改和异常的开机启动项.而 Redhat 系的 linux 系统一般是查看 `/etc/rc.d/init.d` 或者 `/etc/systemd/system` 等目录.
**预加载型动态链接库后门 ld.so.preload**
通过 `strace` 命令去跟踪预加载的文件是否为 `/etc/ld.so.preload` ,以及文件中是否有异常的动态链接库.以及检查是否设置 LD_PRELOAD 环境变量等.注意:在进行应急响应的时候有可能系统命令被替换或者关键系统函数被劫持(例如通过预加载型动态链接库后门),导致系统命令执行不正常,这个时候可以下载 busybox.下载编译好的对应平台版本的 busybox,或者下载源码进行编译通过U盘拷贝到系统上,因为 busybox 是静态编译的,不依赖于系统的动态链接库,busybox 的使用类似如下 busybox ls,busybox ps -a.
**内核级 rootkit**
可以通过 unhide 等工具进行排查,更多内容见 [应急](../../Security/BlueTeam/应急.md#rootkit)
**深信服 Web 后门扫描**
http://edr.sangfor.com.cn/backdoor_detection.html
---
### 杀毒
**[ClamavNet](https://www.clamav.net/downloads)**
---
### 配置 pam.d 策略
- [pam](./实验/pam.md)
- [认证](./笔记/认证.md#pam)