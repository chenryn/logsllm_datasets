the deadlines, regardless of how the tasks are using the allo-
cated resources. However, direct adaption of secure scheduling
cannot provide an effective trade-off between security (TCB
complexity) and performance (meeting deadlines).
Challenges in Secure Scheduler Design that Balances Real-
Time Performance and TCB Minimization: One naive
scheduler design is static allocation without coordination, with
the non-secure OS and the secure environment occupying
completely different cores; however, this hurts overall system
performance. An alternative design is to maximize perfor-
mance by having a single scheduler for both secure and non-
secure environments. Most of the current TEEs adopt this
paradigm and have a global scheduler in the non-secure OS.
However, if we move the global scheduler into the secure
environment to offer availability, the secure scheduler has to
understand the semantic and maintain run-time information
for all the non-secure tasks running in the general purpose
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
5356
Secure OS SchedulerTasks Q T1 T2 T3Kernel Secure Tasks User Secure TasksNon-Secure OS SchedulerT1T2T3Tasks QTasksKernelUserSecureNon-SecureSecure Timer INTWorld QW2World SchedulerW3W1Interrupt ProﬁlesNS I/O Helper ModelNS Tasks ModelS TasksModelCompositional SchedulingAnalysisWorld Scheduler Policy(Period, Budget, Prio.)NS Sched. Algorithm World Sched. Policy S Sched. AlgorithmRuntimeDesign Timeprocess, RT-TEE needs to take into consideration the security
properties of the I/O devices and the nature of the interrupt
since a compromised non-secure OS can program a peripheral
to continuously raise interrupts to launch a DoS attack. While
it
is possible to completely disable interrupts from non-
secure peripherals or assign all the peripherals to the secure
environments, neither of these approaches is ideal. To provide
better I/O response time to the non-secure environment, it
might be possible to enable non-secure interrupt for a limited
number of times over a short duration, based on the security
policy. This, however, changes the schedulability analysis due
to lack of time accounting in interrupt context, which the
non-secure OS can exploit to perform denial of service. To
enable schedulability analysis on this mechanism, we propose
to create a synthetic non-secure I/O serving task to capture its
impact on real-time scheduling.
The resulting design is a policy-based event-driven two-
layer hierarchical scheduler as shown in Fig. 3. The ﬁrst
layer is the world scheduler, responsible for scheduling the
individual execution environment. The second layer is the OS
scheduler inside the individual execution environment.
At design time, the system designer has to ﬁrst determine
the real-time task models for both the secure and non-secure
environment. She will also need to determine the non-secure
interrupt proﬁles based on the security policies, which will also
be translated into a real-time non-secure task for scheduling.
The synthetic interrupt task and the original task models are
then passed to the compositional scheduling analysis engine,
which will produce a solution on the concrete scheduling
parameters used by the world scheduler.
At runtime, when a secure timer interrupt is triggered, the
execution will be redirected to the world scheduler, which
will resume either the secure environment or the non-secure
environment based on the scheduling policy. When an indi-
vidual environment is resumed, the OS will execute under
the abstraction that
it owns the entire system. Since the
scheduler is event-driven, before resuming a world, it has
to anticipate the next scheduling event, such as job release
from higher priority jobs or budget replenishment,
to set
the timer appropriately to minimize overhead. From the real-
time availability perspective, in real-time systems, the budget
replenishment server algorithm is the mechanism to ensure
timing resource isolation since it assigns a portion of the
bandwidth (cycles) of the CPU to different tasks. Together with
the scheduling system that ensures priority, the replenishment
process enforces the timing policy of the system. RT-TEE is
designed to support different types of scheduling algorithms.
C. Fine-grained I/O Access Control for Peripheral Availability
Limitations of Direct Application of TEE: While TEEs, such
as TrustZone, are designed to support resource isolation, there
are several drawbacks with naive adaption of the primitive.
1) Existing implementation of TEE often provides exclusive
access to a peripheral unit on the SoC. However, when the
peripheral device is a bus controller (especially the simpler
serial buses such as SPI or I2C), the access control provided
Fig. 4: RT-TEE Secure I/O Architecture
that
by hardware is coarse-grained in that they can only be granted
at the bus level. Even if only one connected sensor is security-
critical, every device access via that bus has to go through the
secure TCB. In the context of CPS, most sensors are connected
to the processor via either SPI or I2C [47], [48], presenting
realistic challenges. 2) When I/O devices are assigned to
the secure environment, the device drivers will need to be
included in the secure kernel, resulting in a signiﬁcantly
larger TCB. Furthermore, a malicious command from either
a compromised driver or a confused deputy can put sensors
or actuators into a non-reversible state, affecting availability.
For example, overcharging the servo motor may damage the
mechanical components to the extent
it won’t restart
anymore. Given the number of driver vulnerabilities disclosed
daily, it is very difﬁcult to ensure all drivers are bug-free.
I/O Protection Goals: To address the aforementioned limita-
tions, we propose to remove the assumption of trusted drivers.
Therefore, in the presence of compromised drivers executing
in secure privilege mode, RT-TEE has to provide the following
properties. 1) IO R1: TCB for secure I/O shall be minimized.
2) IO R2: Policy-driven ﬁne-grained access control on I/O
devices – The interactions between processes (mainly the non-
secure OS) and devices shall follow the security policy. 3)
IO R3: I/O availability – Access to secure devices shall not
be impacted by the non-secure environment. 4) IO R4: Real-
time I/O availability – Access to peripherals has to be timely.
I/O Solution Overview: An overview of our solution is shown
in Fig. 4, there are two key components.
TCB minimization – We adapt two instances of drivers for each
peripheral. One instance offers rich functionality, but cannot
be trusted and is sandboxed. The other one provides minimal
functionality but is instead trusted. For the trusted minimal
instance, we leverage the predictable nature of CPS to debloat
the drivers via templatized transformation, which essentially
replays known hardware commands and therefore only incurs a
small overhead on the TCB. I/O operations are transactionized
to ensure that the peripheral hardware can be shared. Using the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
6357
User SpaceDriverUser SpaceDriverDebloated DriverSpatial I/O Reference MonitorSplitted Kernel SpaceDriverSandboxBus ControllerPeripheral BusSensor 1Secure CriticalNon-SecureioctlUserKernelHardwareNon-SecureSecureTrustedUntrustedSensor 2Sensor 3ApplicationApplicationUser SpaceDriverDebloated Driver StubsyscallsmcApplicationApplicationUser SpaceDriverPriority QueueTemporal I/O Reference MonitorKernel Driver Stubbus controller as an example, one solution is to have the secure
and safety-critical devices on the bus driven by the debloated
driver, while the non-secure ones are driven by the sandboxed
feature-rich driver.
I/O reference monitor – It is responsible for peripheral access
control and therefore is responsible for availability. There are
two key dimensions of access control, spatial, and temporal.
The spatial aspect of the I/O reference monitor mediates what
peripherals a process can access and how it can interact
with the device. The temporal aspect of the I/O reference
monitor mediates over when a process can interact with a
peripheral and for how long. Together they ensure the real-
time availability of the system.
TCB Minimization by Debloating Trusted I/O Drivers: In
order for a secure process to make use of the secure peripher-
als, there has to be a driver. The key research challenge is how
to provide such functionality without including the complex
and buggy drivers in the TCB. The debloating technique we
proposed is based on the observation that CPSs are highly
predictable by design. Such predictability also translates to
its interaction with sensors and actuators, where most of the
device interactions are exactly the same. Therefore, there is an
opportunity to convert complex hardware interactions to sim-
ple replay of the ﬁxed I/O interactions, trading expressiveness
for reduced attack surface, minimizing the code size.
There are two opportunities to debloat the driver, pruning
and transformation. Pruning refers to elimination of function-
ality. For most of the peripheral devices in CPSs, there are
primarily two stages, initializing and utilization of the device.
Based on the assumption that the system has secure boot, de-
vice initializations are executed in the non-secure environment
as part of the secure boot. Immediately after the initialization,
access to the devices from the non-secure environment is
blocked. This insight allows for signiﬁcant reduction in the
code base. For example, in the Navio2 platform, there are more
than 30 I/O request types during initialization for bus probing
and device initialization, but only half a dozen message types
for sensor and actuation interactions.
The second opportunity is transformation. An overview
of our approach is shown in Fig. 5 where code that drives
hardware interactions (such as sensor reads) is converted to
data recording templates capturing the interaction patterns
(what content was written to which MMIO register in what
order). A driver replayer then repeats the template to drive
the peripheral. More speciﬁcally, we record all the MMIO
register reads and writes, and repeat these data recordings
to drive the peripheral. However,
the
interactions may not always stay the same. One of challenges
is understanding the semantic of the message and recognizing
what is always ﬁxed (such as TA bit in the control register)
and what is constantly changing (such as motor speed). For
peripherals on the SoC, the driver often resides within the
kernel. However, for sensors and actuators connected via a bus
such as SPI and I2C, there are both the kernel space driver
and the user space driver. As a result, the recording captures
though predictable,
Fig. 5: Debloated Driver
the logic of both the user space driver and the kernel space
driver for the peripheral. To facilitate template generation, we
apply taint analysis to understand how the control program
is driving device interactions. In the user space, we tracked
what information is control-supplied in the buffer passed to
the kernel, often via IOCTL. In the kernel space, we tracked
how user space inputs are used in the MMIO interactions, and
therefore were able to mark the variable offsets in the data
recording to create an interaction template. At runtime, all
the I/O addresses will be statically mapped, and all the DMA
memory is statically allocated. The replayer will ﬁll in the
template with the appropriate values from the request after
veriﬁcation by the I/O reference monitor. At the minimum,
the replayer has to be able to repeat MMIO reads and writes.
However, to improve performance, support IRQ and DMA,
and support real-time availability, we also added support for
schedule timeout. To provide the I/O reference monitor with
the ability to mediate access, we also added an operation type
in the template to trap the replayer in the reference monitor.
TCB Minimization by Sandboxing Untrusted Drivers:
While the debloated drivers are sufﬁcient to support inter-
actions with safety-critical sensors and actuators, it requires
predictability and a well-formatted template. For non-critical
functions in the peripheral or non-secure devices on the bus, it
may not require the same level of security protection or may
not even have as predictable patterns as those used for CPS
controls. To enable these feature-rich drivers for non-secure
devices, we propose to sandbox them using software instru-
mentation. However, software-fault-isolation (SFI) techniques
only prevent the untrusted driver from accessing the rest of the
secure environment; there are several additional challenges.
First, drivers have to access the MMIO registers to interact
with the hardware. For bus controllers, these same sets of
MMIO registers also allow for interaction with the secure
safety-critical peripherals. For example, the sandboxed driver
could change the chip select bits to send messages to the secure
actuator instead. To prevent the driver from tampering with se-
cure devices, all MMIO register reads/writes are instrumented
to trap into the I/O reference monitor to enforce the access
control policy. Furthermore, besides adding CFI, all the other
memory reads/writes will be masked to conﬁne the driver,
preventing data-only attacks on MMIO registers.
Second, device drivers often use many kernel helper func-
tions, migrating a full-feature driver into the secure environ-
ment where the kernel is intentionally minimized is likely not
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
7358
ReplayerBus ControllerI/O Reference Monitor Schedulerwaitresumereturntrap MMIO read/writeI/O Transaction TemplatesreadwritetrapwaitfetchcompassbarometerIMUmotorsSPI/I2C Sensors/Actuatorspossible without increasing the size of TCB. To address this,
we adopted a split driver design where most kernel/applica-
tion facing functionalities are implemented in the non-secure
environment, while the hardware interacting code resides in
the sandboxed secure environment. On one extreme, almost
the entire device driver can reside in the non-secure OS,
while each register’s reads/writes are redirected to the secure
environment split. However, for performance consideration,
the balance often lies in putting the functions with large
numbers of register operations into the secure split.
Availability via Spatial I/O Reference Monitor: The I/O
reference monitor that mediates all the secure I/O devices’
access is the component that ensures availability. There are two
main attack vectors an adversary can use to deny secure task
access to a peripheral, corrupting peripheral state (e.g., sending
random bytes to secure devices on the bus or to the tx-ﬁfo of
bus controller) or physically damaging the peripheral (e.g.,
overcharging the motor). For peripherals directly connected to
the SoC without a bus, it is either a secure device or a non-
secure one. To ensure its availability, the I/O reference monitor
can simply make sure that only secure processes have access to
the device. However, most sensors and actuators are connected
via a serial bus. For devices on the bus, availability assurance
presents additional challenges.
To prevent the untrusted driver in the sandbox from tamper-
ing with secure devices on the same bus, each MMIO access
will be checked to ensure that the driver has access rights to
the device, particularly by monitoring the chip select line or
chip select bits in the control register. An adversary may also
attempt to corrupt the bus controller by leaving contents in
the tx-ﬁfo before handing the access to the secure debloated
driver such that the driver may send existing contents to the
secure devices. To prevent this, the I/O reference monitor will
ensure that the controller state is reset upon switching between
the secure debloated and non-secure sandboxed instances of
the drivers. To prevent physical damage to the sensor, the I/O
reference monitor can verify the values in commands sent to
sensors and actuators are within validated range. Since our
reference monitor has the ability to introspect every single
MMIO access, the policy can be as rich as is demanded by
the mission. For example, sensor access control can even be
done on the sensor command level instead of the device level.
The I/O reference monitor also protects the system from full
system shutdown and time warping attacks. The DVFS-based
attack presented in TimeWarp earlier and system shutdown
relies on interactions with the power management (PM) and
clock management (CM) on the SoC. The I/O reference
monitor can prevent malicious use of these peripheral features.
While it may still be possible to offer limited access to
the power/clock management features, such as shutdown, the
impact on availability requires careful considerations. For
example, allowing access to DVFS would require the secure
scheduler to switch to a task proﬁle to ensure availability.
Real-time I/O Availability via Temporal I/O Reference
Monitor: Once I/O device availability is established, achiev-
Fig. 6: RT-TEE Implementation
ing real-time availability means that ensuring I/O requests are
processed according to real-time scheduling policy such that
secure tasks can access the necessary resource in a timely
manner. A key challenge in this is priority inversion, in which
higher priority tasks are waiting for a lower priority task on a
shared resource. However, priority inversion is often inevitable
since marginal gain from interrupting the lowest level I/O
operation, such as transmitting a single message, is often very
small. As a result, the main approach to achieve real-time I/O
operation is reducing priority inversion time [49], [50]. In RT-
TEE, individual I/O request will be placed in different priority
queues based on the inherited priority from the requesting
process. However, processing of individual I/O requests on the
same peripheral device is not preemptible, thereby creating a
priority inversion. To ensure real-time responsiveness, the I/O
reference monitor will bound the I/O request processing time
by enforcing a time limit on an I/O job, therefore bounding
the priority inversion time and the worst case execution time
(WCET) of the job.
V. IMPLEMENTATION
We implemented a prototype of RT-TEE on both ARMv8-
A and ARMv8-M architectures. For ARMv8-A, we built on
top of OP-TEE v3.4 for the secure kernel and Raspbian
Linux 4.14.95-emlid-v7+ for the normal world. For ARMv8-
M, we build on top of the evaluation ﬁrmware OS from NXP.
As shown in Figure 6, there are three main implementation