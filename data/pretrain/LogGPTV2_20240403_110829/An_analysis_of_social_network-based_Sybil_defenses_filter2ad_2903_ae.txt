### Figure 15: Accuracy of Sybil Defense Schemes on the Facebook Network

**Figure 15** illustrates the accuracy of various Sybil defense schemes on the Facebook network when Sybils are allowed to target their links among the closest k nodes to the trusted node. As Sybils place their links closer, all schemes begin ranking Sybil nodes higher than non-Sybil nodes, as evidenced by the A′ score dropping below 0.5.

### Key Findings and Implications

Our findings highlight the need for Sybil defense schemes to be evaluated on a wider range of social networks and attack models. Additionally, there is a need to develop new Sybil defense schemes that leverage different network features or additional information beyond the network structure, to ensure effectiveness in scenarios where current schemes fall short.

### Concluding Discussion

In this paper, we have taken the first steps towards developing a deeper understanding of how the numerous proposed social network-based Sybil defense schemes work. We found that, despite their considerable differences, all Sybil defense schemes rely on identifying communities within the social network. Unfortunately, this reliance on community detection makes the schemes fundamentally vulnerable to Sybil attacks when operating over networks where non-Sybil nodes form strong communities.

Given these negative results, we explore alternative approaches to Sybil defense that could be deployed in practice. In this section, we discuss additional challenges that arise when deploying social network-based Sybil defense schemes and propose two ways to improve Sybil defenses moving forward. Our discussion points are presented as questions and answers.

#### Are Links in Social Networks Hard to Form?

All the Sybil defense schemes discussed in this paper assume that Sybils can only form a certain number of links to non-Sybils. However, it remains an open question whether this assumption holds in any online social network today. It is clear that, at least in some social networks, the assumption does not hold [5].

#### Are Sybils Necessarily Bad?

In all Sybil defense schemes, it is assumed that the presence of Sybils indicates misbehavior, and thus, no non-Sybil should interact with a Sybil. However, there are legitimate reasons why a user might wish to create multiple identities. For example, users may partition their identity into one used for interacting with co-workers and another for friends and family. Users posting videos to YouTube may use pseudonyms to avoid revealing their real-world identity while still using a personal account to rate videos and post comments. Therefore, the mere presence of users with multiple accounts is not necessarily indicative of misbehavior. Instead, we should be concerned with the use of Sybils for misbehavior. Detecting Sybils and simply excluding them from a system is only one particularly draconian way of addressing this issue.

#### Should Sybil Defenses Move Towards Sybil Tolerance?

Instead of explicitly identifying Sybils, a system could aim to prevent Sybils from gaining access to extra privileges. For example, SumUp limits the votes coming from Sybil nodes by limiting the effect of votes from potential Sybil regions. The protocol seeks to limit the ability of Sybils to disproportionately affect the resulting vote count, rather than preventing users from creating multiple identities. Building Sybil tolerance into applications may require more effort and is less general than identifying Sybils, but it allows application designers to sidestep the arms race of locating Sybils in the social network.

#### Should Sybil Defenses Leverage More Information?

Given the inherent limitations of relying solely on the social network to defend against Sybils, an attractive way to improve these schemes is to provide additional information. For instance, if a Sybil defense scheme were given a list of nodes, one in each of the different communities within the network, who are either known to be Sybils or known to be non-Sybils, this additional information could be used by community detection algorithms to accurately differentiate between communities containing Sybil and non-Sybil nodes. Current Sybil defense schemes are given only a single trusted node as input and consequently perform poorly.

Recent work has suggested that activity between users may be a better predictor of the strength of the social link between them [30, 31]. These studies indicate that even in networks where users accept friend requests from arbitrary sources, users engage in shared activity (e.g., exchanging messages) with only a limited subset of their friends. Thus, having additional information about user activity could help weed out weak social connections, including links from Sybil nodes.

Finally, it is unclear how far we are from applying these ideas to actual deployed systems. However, as digital identities become more important, the potential for fraud, deception, and other misbehavior will increase, necessitating effective Sybil defenses. Understanding the benefits, limitations, and trade-offs associated with alternative approaches to Sybil defense is an important step towards making this happen.

### Acknowledgements

We thank the anonymous reviewers and our shepherd, Cristina Nita-Rotaru, for their helpful comments. This research was supported in part by an Amazon Web Services in Education Grant.

### References

[References listed here]

### Appendix

#### A. Analysis of SybilGuard

**Assumed Social Network Topology:**
SybilGuard assumes that the non-Sybil region is fast mixing [22], meaning that after O(log n) hops (where n is the number of non-Sybils), the probability distribution of the last node on a random walk reaches the stationary distribution. SybilGuard assumes that the entire network (the Sybil region combined with the non-Sybil region) is not fast mixing.

**Partitioning Algorithm:**
SybilGuard uses constrained random walks to mark nodes as non-Sybil or Sybil. It marks a suspect node as non-Sybil if the random walk from the trusted node and the suspect intersect; otherwise, the suspect is marked as a Sybil.

**Node Ranking:**
To generate a ranking, we conduct random walks from the trusted node, starting with a walk length of 1 and increasing it to k, where k is the length of the random walk such that all nodes in the network are marked as non-Sybil. The order in which nodes are marked as non-Sybil in these increasingly long random walks imposes a ranking. If all nodes are not marked as non-Sybil using a single random seed and a long walk length, we conduct a series of random walks with different random seeds to induce a ranking for the remaining nodes.

**Determining Cutoff:**
SybilGuard uses O(√n log n) random walks to gather samples from the non-Sybil region of n nodes. For a social network with O(log n) mixing time, based on the birthday paradox, two non-Sybil nodes with √n samples from the non-Sybil region will have an intersection with high probability. SybilGuard relies on an estimation procedure to determine the appropriate length of the random walk and the cutoff value.

#### B. Analysis of SybilLimit

**Assumed Social Network Topology:**
SybilLimit makes the same assumptions about the network as SybilGuard.

**Partitioning Algorithm:**
SybilLimit performs O(√m) independent random walks of length O(log n) from each node. Two conditions must be satisfied for the trusted node to mark a suspect as a non-Sybil: the intersection condition (the last edge of one of the random walks of the trusted node and the suspect must intersect) and the balance condition (limits the number of non-Sybils per attack edge). Each tail of a random walk is assigned a "load" that is not allowed to exceed a given threshold; the load is incremented each time the trusted node marks another suspect as a non-Sybil.

**Node Ranking:**
SybilLimit has two primary parameters for controlling the number of nodes marked as non-Sybil in the network: the number of random walks from each node and the length of these walks. As these parameters are increased, greater numbers of nodes are marked as non-Sybil. Similar to SybilGuard, we infer a ranking based on the order in which nodes are marked as non-Sybil.

**Determining Cutoff:**
Similar to SybilGuard, SybilLimit relies on an estimation procedure to find the length of the random walk and the number of random walks required. These two parameters impose a cutoff.

#### C. Analysis of SybilInfer

**Assumed Social Network Topology:**
SybilInfer makes the same assumption as SybilGuard and further assumes that the modified random walks are fast mixing in real social networks.

**Partitioning Algorithm:**
SybilInfer performs multiple random walks from each node to sample nodes from the non-Sybil region and uses a Bayesian inference technique to determine the probability of any node in the system being marked as non-Sybil.

**Node Ranking:**
Since SybilInfer assigns each node a probability of being a non-Sybil, the nodes can be ranked based on this probability. We conduct 30 runs of SybilInfer with different random seeds and use the average probability over all the runs to determine the final ranking of the nodes.

**Determining Cutoff:**
SybilInfer partitions the nodes based on a threshold value for the probability of a node being non-Sybil.

#### D. Analysis of SumUp

**Assumed Social Network Topology:**
SumUp assumes that the min-cut between the vote collector (i.e., the trusted node) and non-Sybil nodes occurs at the collector, and that the min-cut between Sybils and the non-Sybils occurs at the attack edges.

**Partitioning Algorithm:**
SumUp partitions nodes based on whether their vote is accepted or not. Nodes whose votes are accepted are treated as non-Sybils, whereas nodes whose votes are subject to capacity constraints are treated as Sybils.

**Node Ranking:**
SumUp decides whether a vote will be collected or not by defining a voting envelope within which all votes are collected and outside of which votes are constrained to one per link out of the envelope. The size of the voting envelope is controlled by the parameter Cmax, which is the maximum number of votes that can be collected by the trusted node. To rank nodes, we increase Cmax from 1 to k, where k is the value for which the voting envelope contains the entire network. The order in which these nodes are added to the voting envelope induces a ranking.

**Determining Cutoff:**
Cmax determines the size of the voting envelope and serves as the cutoff parameter.