 SL
 SU
 SI
)
’
A
(
e
v
r
u
c
C
O
R
r
e
d
n
u
a
e
r
A
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Random
 100
 200
 300
 400
 500
k
Figure 15: Accuracy of Sybil defense schemes on
the Facebook network when Sybils are allowed to
target their links among the closest k nodes to the
trusted node. As the Sybils place their links closer,
all schemes begin ranking Sybil nodes higher than
non-Sybils (as evidenced by the A′ below 0.5).
vate the need for Sybil defense schemes to be evaluated on a
wider range of social networks and attack models. Our ﬁnd-
ings also point to a need to develop Sybil defense schemes
that work by leveraging diﬀerent network features (or addi-
tional information beyond the network structure) than ex-
isting schemes, allowing Sybil defense to be eﬀective where
now it is not.
6. CONCLUDING DISCUSSION
In this paper, we have taken the ﬁrst steps towards develop-
ing a deeper understanding of how the numerous proposed
social network-based Sybil defense schemes work. We found
that, despite their considerable diﬀerences, all Sybil defense
schemes rely on identifying communities in the social net-
work. Unfortunately, we also discovered that this reliance
on community detection makes the schemes fundamentally
vulnerable to Sybil attacks when operating over networks
where the non-Sybil nodes form strong communities.
In light of these negative results, we look for alternative
approaches to Sybil defense that could be deployed in prac-
tice. In this section, we ﬁrst focus our discussion on addi-
tional challenges that arise when deploying social network-
based Sybil defense schemes in practice. We then discuss
two ways to improve Sybil defenses moving forward. We
present our discussion points as questions and answers.
Are links in social networks hard to form? All the
Sybil defense schemes discussed in this paper make the as-
sumption that Sybils can only form a certain number of
links to non-Sybils. However, it remains an open question
whether this is true in any online social network of today; it
is clear that, at least in some social networks, the assump-
tion does not hold [5].
Are Sybils necessarily bad? In all of the Sybil defense
schemes, it is assumed that the presence of Sybils is evi-
dence of misbehavior, and as such, no non-Sybil should in-
teract with a Sybil. However, there are legitimate reasons
why a user might wish to create multiple identities. For ex-
ample, users may wish to partition their identity into one
that is used to interact with co-workers, and another that is
used to interact with friends and family (e.g., the multiple
email addresses that many people use today). Users posting
videos to YouTube may wish to post under pseudonyms in
order to avoid revealing their real-world identity while still
using a personal account to rate videos and post comments.
372Since the mere presence of users with multiple accounts is
not necessarily indicative of misbehavior, what we should
be concerned with is not necessarily the presence of Sybils,
but, rather, the use of Sybils for misbehavior. Detecting
Sybils and simply excluding them from a system is only one
particularly draconian way of accomplishing this.
Should Sybil defenses move towards Sybil toler-
ance? Instead of explicitly identifying Sybils like Sybil-
Guard, SybilLimit, and SybilInfer, a system could aim to
instead just prevent Sybils from gaining access to extra privi-
leges. SumUp, for example, attempts to limit the votes com-
ing from Sybil nodes by limiting the eﬀect of votes from po-
tential Sybil regions. Instead of explicitly identifying nodes,
the protocol seeks to limit their ability to disproportionally
aﬀect the resulting vote count. As a result, the system does
not try to prevent users from creating multiple identities, but
rather, ensures that by doing so, they are unable to gain any
additional privileges. We believe that building Sybil toler-
ance into applications may require more eﬀort, and is clearly
less general than identifying Sybils, but allows application
designers to sidestep the arms race of locating Sybils in the
social network.
Should Sybil defenses leverage more information?
Given the inherent limitations of relying solely on the so-
cial network in order to defend against Sybils, an attractive
way to improve on these schemes is to give Sybil defense
schemes additional information. As a simple example, sup-
pose a Sybil defense scheme were given a list of nodes, one in
each of the diﬀerent communities within the network, who
were either known to be Sybils, or known to be non-Sybils.
In this case, it is clear that this additional information could
be used by community detection algorithms to accurately
diﬀerentiate between communities containing Sybil and non-
Sybil nodes. In contrast, current Sybil defense schemes are
given only a single trusted node as input and consequently,
they perform poorly.
As another example, recent work has suggested that activ-
ity between users may be a better predictor of the strength
of the social link between them [30, 31]. These studies indi-
cate that even in networks where users accept friend requests
from arbitrary sources, users engage in shared activity (e.g.,
exchanging messages) with only a limited subset of their
friends. Thus, having additional information about user ac-
tivity could help weed out weak social connections, including
links from Sybil nodes.
Finally, for all of the work that has focused on social
network-based Sybil defenses, it is unclear how far we are
from having these ideas applied to actual deployed systems.
However, as digital identities become more important, it is
clear that the potential for fraud, deception, and other mis-
behavior will increase, thereby necessitating Sybil defenses.
Understanding the beneﬁts, limitations, and tradeoﬀs as-
sociated with alternative approaches to Sybil defense is an
important step towards making this happen.
Acknowledgements
We thank the anonymous reviewers and our shepherd,
Cristina Nita-Rotaru, for their helpful comments. This re-
search was supported in part by an Amazon Web Services
in Education Grant.
7. REFERENCES
[1] Advogato trust network.
http://www.trustlet.org/wiki/Advogato.
[2] R. Andersen and K. J. Lang. Communities from seed
sets. In Proc. WWW’06, Edinburgh, Scotland, May
2006.
[3] J. P. Bagrow. Evaluating local community methods in
networks. J. Stat. Mech., 2008(5), 2008.
[4] A.-L. Barab´asi and R. Albert. Emergence of Scaling in
Random Networks. Science, 286:509–512, 1999.
[5] L. Bilge, T. Strufe, D. Balzarotti, and E. Kirda. All
your contacts are belong to us: Automated identity
theft attacks on social networks. In Proc. WWW’09,
Madrid, Spain, Apr 2009.
[6] A. Clauset. Finding local community structure in
networks. Physical Review E, 72(2), 2005.
[7] G. Danezis and P. Mittal. SybilInfer: Detecting Sybil
Nodes using Social Networks. In Proc. NDSS’09, San
Diego, CA, Feb 2009.
[8] J. Douceur. The Sybil Attack. In Proc. IPTPS’02,
Cambridge, MA, Mar 2002.
[9] J. Fogarty, R. S. Baker, and S. E. Hudson. Case
studies in the use of ROC curve analysis for
sensor-based estimates in human computer
interaction. In Proc. GI’05, Victoria, BC, May 2005.
[10] S. Fortunato. Community detection in graphs. Physics
Reports, 486:75, 2010.
[11] R. Guimera, L. Danon, A. Diaz-Guilera, F. Giralt,
and A. Arenas. Self-similar community structure in a
network of human interactions. Physical Review E,
68(6), 2003.
[12] J. Kleinberg. The Small-World Phenomenon: An
Algorithmic Perspective. In Proc. STOC’00, Portland,
OR, May 2000.
[13] J. Leskovec, D. Huttenlocher, and J. Kleinberg. Signed
Networks in Social Media. In Proc. CHI’10, Atlanta,
GA, Apr 2010.
[14] J. Leskovec, J. Kleinberg, and C. Faloutsos. Graph
Evolution: Densiﬁcation and Shrinking Diameters.
ACM TKDD, 1(1), 2007.
[15] J. Leskovec, K. Lang, and M. Mahoney. Empirical
comparison of algorithms for network community
detection. In Proc. WWW’10, Raleigh, NC, Apr 2010.
[16] J. Leskovec, K. J. Lang, A. Dasgupta, and M. W.
Mahoney. Statistical Properties of Community
Structure in Large social and information networks. In
Proc. WWW’08, Beijing, China, Apr 2008.
[17] C. Lesniewski-Laas. A Sybil-proof one-hop DHT. In
Proc. SNS’08, Glasgow, Scotland, Apr 2008.
[18] C. Lesniewski-Laas and M. F. Kaashoek. Wh¯anau: A
sybil-proof distributed hash table. In Proc. NSDI’10,
San Jose, CA, Apr 2010.
[19] F. Luo, J. Z. Wang, and E. Promislow. Exploring local
community structures in large networks. Web
Intelligent and Agent Systems, 6(4):387–400, 2008.
[20] A. Mislove, A. Post, K. P. Gummadi, and P. Druschel.
Ostra: Leveraging Trust to Thwart Unwanted
Communication. In Proc. NSDI’08, San Francisco,
CA, Apr 2008.
[21] A. Mislove, B. Viswanath, K. P. Gummadi, and
P. Druschel. You are who you know: Inferring user
proﬁles in online social networks. In Proc. WSDM’10,
New York, NY, Feb 2010.
[22] M. Mitzenmacher and E. Upfal. Probability and
Computing. Cambridge University Press, Cambridge,
UK, 2005.
[23] A. Mohaisen, A. Yun, and Y. Kim. Measuring the
mixing time of social graphs. Technical report,
University of Minnesota, 2010.
[24] S. Nagaraja. Anonymity in the wild: Mixes on
373unstructured networks. In Proc. PET’07, Ottawa, ON,
Jun 2007.
[25] M. E. J. Newman. The structure of scientiﬁc
collaboration networks. PNAS, 98(2):404–409, 2001.
[26] M. E. J. Newman. Fast algorithm for detecting
community structure in networks. Physical Review E,
69(6), 2004.
[27] D. Quercia and S. Hailes. Sybil attacks against mobile
users: Friends and foes to the rescue. In Proc.
INFOCOM’10, San Diego, CA, Mar 2010.
[28] A. Strehl and J. Ghosh. Cluster Ensembles – A
Knowledge Reuse Framework for Combining
Partitionings. In Proc. AAAI’02, Palo Alto, CA, Mar
2002.
[29] N. Tran, B. Min, J. Li, and L. Subramanian.
Sybil-Resilient Online Content Voting. In Proc.
NSDI’09, Boston, MA, Apr 2009.
[30] B. Viswanath, A. Mislove, M. Cha, and K. P.
Gummadi. On the Evolution of User Interaction in
Facebook. In Proc. WOSN’09, Barcelona, Spain, Aug
2009.
[31] C. Wilson, B. Boe, A. Sala, K. P. N. Puttaswamy, and
B. Y. Zhao. User Interactions in Social Networks and
their Implications. In Proc. Eurosys’09, Nuremberg,
Germany, Apr 2009.
[32] H. Yu, P. B. Gibbons, M. Kaminsky, and F. Xiao.
SybilLimit: A Near-Optimal Social Network Defense
against Sybil Attacks. In Proc. IEEE S&P, Oakland,
CA, May 2008.
[33] H. Yu, M. Kaminsky, P. B. Gibbons, and A. Flaxman.
SybilGuard: Defending Against Sybil Attacks via
Social Networks. In Proc. SIGCOMM’06, Pisa, Italy,
Sep 2006.
APPENDIX
A. ANALYSIS OF SYBILGUARD
Assumed social network topology: SybilGuard [33] as-
sumes that the non-Sybil region is fast mixing [22], meaning
that after O(log n) hops (where n is the number of non-
Sybils), the probability distribution of the last node on a ran-
dom walk reaches the stationary distribution. SybilGuard
assumes that the entire network (the Sybil region combined
with the non-Sybil region) is not fast mixing.
Partitioning algorithm: SybilGuard uses constrained
random walk for marking nodes as non-Sybil or Sybil.
It
marks a suspect node as non-Sybil if the random walk from
the trusted node and the suspect intersect, otherwise the
suspect is marked as a Sybil.
Node ranking by partitioning algorithm:
In order
to generate a ranking, we conduct random walks from the
trusted node. We start with a walk length 1 and increase it
to k, where k is the length of the random walk such that all
nodes in the network are marked as non-Sybil. The order
in which nodes are marked as non-Sybil in these increas-
ingly long random walks imposes a ranking. In the rare case
when all the nodes in the network are not marked as non-
Sybil using a single random seed and a long walk length,
we conduct a series of random walks with diﬀerent random
seeds to induce a ranking for the remaining nodes.
Determining cutoﬀ: SybilGuard uses O(√n log n) ran-
dom walks to gather samples from the non-Sybil region of
n nodes. For a social network with O(log n) mixing time,
based on the birthday paradox, two non-Sybil nodes with
√n samples from the non-Sybil region will have an intersec-
tion with high probability. SybilGuard relies on an estima-
tion procedure for determining the appropriate length of the
random walk, and consequently, the cutoﬀ value.
B. ANALYSIS OF SYBILLIMIT
Assumed social network topology: SybilLimit [32]
makes the same assumptions about the network as Sybil-
Guard.
Partitioning algorithm: SybilLimit performs O(√m) in-
dependent random walks of length O(log n) from each node.
Two conditions must be satisﬁed for the trusted node to
mark a suspect as a non-Sybil. The ﬁrst condition—called
the intersection condition—requires that the last edge of one
of the random walks of the trusted node and the suspect
must intersect. The second condition—called the balance
condition—limits the number of non-Sybils per attack edge.
Each tail of a random walk is assigned a “load” that is not
allowed to exceed a given threshold; the load is incremented
each time the trusted node marks another suspect as a non-
Sybil.
Node ranking by partitioning algorithm: SybilLimit
has two primary parameters for controlling the number of
nodes marked as non-Sybil in the network—the number of
random walks from each node and the length of these walks.
As these parameters are increased, greater numbers of nodes
are marked as non-Sybil. Similar to SybilGuard, we infer a
ranking based on the order in which nodes are marked as
non-Sybil.
Determining cutoﬀ: Similar to SybilGuard, SybilLimit
relies on an estimation procedure to ﬁnd length of random
walk and the number of random walk required. These two
parameters impose a cutoﬀ.
C. ANALYSIS OF SYBILINFER
Assumed social network topology: SybilInfer [7] makes
the same assumption as SybilGuard. SybilInfer also makes
a further assumption that the modiﬁed random walks are
fast mixing in real social networks.
Partitioning algorithm: SybilInfer performs multiple
random walks from each node to sample nodes from the
non-Sybil region. It further uses a Bayesian inference tech-
nique to determine the probability of any node in the system
being marked as non-Sybil.
Node ranking by partitioning algorithm: Since Sybil-
Infer assigns each node a probability of being a non-Sybil,
the nodes can be ranked based on this probability. We con-
duct 30 runs of SybilInfer with diﬀerent random seeds, and
use the average probability over all the runs to determine
the ﬁnal ranking of the nodes.
Determining cutoﬀ: SybilInfer partitions the nodes based
on a threshold value for the probability of a node being non-
Sybil.
D. ANALYSIS OF SUMUP
Assumed social network topology: SumUp assumes
that the min-cut between the vote collector (i.e., the trusted
node) and non-Sybil nodes occurs at the collector, and that
the min-cut between Sybils and the non-Sybils occurs at the
attack edges.
Partitioning algorithm: SumUp partitions nodes based
on whether their vote is accepted or not. Nodes whose
votes are accepted are treated as non-Sybils, whereas nodes
whose votes are subject to capacity constraints are treated
as Sybils.
Node ranking by partitioning algorithm: SumUp de-
cides whether a vote will be collected or not by deﬁning a
voting envelope within which all votes are collected and out-
side of which votes are constrained to one per link out of
the envelope. The size of the voting envelope is controlled
by the parameter Cmax, which is the maximum number of
votes that can be collected by the trusted node. In order
to rank nodes, we increase Cmax from 1 to k, where k is
the value for which the voting envelope contains the entire
network. The order in which these nodes are added to the
voting envelope induces a ranking.
Determining cutoﬀ: Cmax determines the size of the vot-
ing envelope and serves as the cut-oﬀ parameter.
374