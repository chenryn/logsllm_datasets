---
title: Java 21 新特性概览(重要)
category: Java
tag:
  - Java新特性
---
JDK 21 于 2023 年 9 月 19 日 发布，这是一个非常重要的版本，里程碑式。
JDK21 是 LTS（长期支持版），至此为止，目前有 JDK8、JDK11、JDK17 和 JDK21 这四个长期支持版了。
JDK 21 共有 15 个新特性，这篇文章会挑选其中较为重要的一些新特性进行详细介绍：
- [JEP 430：String Templates（字符串模板）](https://openjdk.org/jeps/430)（预览）
- [JEP 431：Sequenced Collections（序列化集合）](https://openjdk.org/jeps/431)
- [JEP 439：Generational ZGC（分代 ZGC）](https://openjdk.org/jeps/439)
- [JEP 440：Record Patterns（记录模式）](https://openjdk.org/jeps/440)
- [JEP 441：Pattern Matching for switch（switch 的模式匹配）](https://openjdk.org/jeps/442)
- [JEP 442：Foreign Function & Memory API（外部函数和内存 API）](https://openjdk.org/jeps/442)（第三次预览）
- [JEP 443：Unnamed Patterns and Variables（未命名模式和变量](https://openjdk.org/jeps/443)（预览）
- [JEP 444：Virtual Threads（虚拟线程）](https://openjdk.org/jeps/444)
- [JEP 445：Unnamed Classes and Instance Main Methods（未命名类和实例 main 方法 ）](https://openjdk.org/jeps/445)（预览）
## JEP 430：字符串模板（预览）
String Templates(字符串模板) 目前仍然是 JDK 21 中的一个预览功能。
String Templates 提供了一种更简洁、更直观的方式来动态构建字符串。通过使用占位符`${}`，我们可以将变量的值直接嵌入到字符串中，而不需要手动处理。在运行时，Java 编译器会将这些占位符替换为实际的变量值。并且，表达式支持局部变量、静态/非静态字段甚至方法、计算结果等特性。
实际上，String Templates（字符串模板）再大多数编程语言中都存在:
```typescript
"Greetings {{ name }}!";  //Angular
`Greetings ${ name }!`;    //Typescript
$"Greetings { name }!"    //Visual basic
f"Greetings { name }!"    //Python
```
Java 在没有 String Templates 之前，我们通常使用字符串拼接或格式化方法来构建字符串：
```java
//concatenation
message = "Greetings " + name + "!";
//String.format()
message = String.format("Greetings %s!", name);  //concatenation
//MessageFormat
message = new MessageFormat("Greetings {0}!").format(name);
//StringBuilder
message = new StringBuilder().append("Greetings ").append(name).append("!").toString();
```
这些方法或多或少都存在一些缺点，比如难以阅读、冗长、复杂。
Java 使用 String Templates 进行字符串拼接，可以直接在字符串中嵌入表达式，而无需进行额外的处理：
```java
String message = STR."Greetings \{name}!";
```
在上面的模板表达式中：
- STR 是模板处理器。
- `\{name}`为表达式，运行时，这些表达式将被相应的变量值替换。
Java 目前支持三种模板处理器：
- STR：自动执行字符串插值，即将模板中的每个嵌入式表达式替换为其值（转换为字符串）。
- FMT：和 STR 类似，但是它还可以接受格式说明符，这些格式说明符出现在嵌入式表达式的左边，用来控制输出的样式
- RAW：不会像 STR 和 FMT 模板处理器那样自动处理字符串模板，而是返回一个 `StringTemplate` 对象，这个对象包含了模板中的文本和表达式的信息
```java
String name = "Lokesh";
//STR
String message = STR."Greetings \{name}.";
//FMT
String message = STR."Greetings %-12s\{name}.";
//RAW
StringTemplate st = RAW."Greetings \{name}.";
String message = STR.process(st);
```
除了 JDK 自带的三种模板处理器外，你还可以实现 `StringTemplate.Processor` 接口来创建自己的模板处理器。
我们可以使用局部变量、静态/非静态字段甚至方法作为嵌入表达式：
```java
//variable
message = STR."Greetings \{name}!";
//method
message = STR."Greetings \{getName()}!";
//field
message = STR."Greetings \{this.name}!";
```
还可以在表达式中执行计算并打印结果：
```java
int x = 10, y = 20;
String s = STR."\{x} + \{y} = \{x + y}";  //"10 + 20 = 30"
```
为了提高可读性，我们可以将嵌入的表达式分成多行:
```java
String time = STR."The current time is \{
    //sample comment - current time in HH:mm:ss
    DateTimeFormatter
      .ofPattern("HH:mm:ss")
      .format(LocalTime.now())
  }.";
```
## JEP431：序列化集合
JDK 21 引入了一种新的集合类型：**Sequenced Collections（序列化集合，也叫有序集合）**，这是一种具有确定出现顺序（encounter order）的集合（无论我们遍历这样的集合多少次，元素的出现顺序始终是固定的）。序列化集合提供了处理集合的第一个和最后一个元素以及反向视图（与原始集合相反的顺序）的简单方法。
Sequenced Collections 包括以下三个接口：
- [`SequencedCollection`](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedCollection.html)
- [`SequencedSet`](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedSet.html)
- [`SequencedMap`](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedMap.html)
`SequencedCollection` 接口继承了 `Collection`接口， 提供了在集合两端访问、添加或删除元素以及获取集合的反向视图的方法。
```java
interface SequencedCollection extends Collection {
  // New Method
  SequencedCollection reversed();
  // Promoted methods from Deque
  void addFirst(E);
  void addLast(E);
  E getFirst();
  E getLast();
  E removeFirst();
  E removeLast();
}
```
`List` 和 `Deque` 接口实现了`SequencedCollection` 接口。
这里以 `ArrayList` 为例，演示一下实际使用效果：
```java
ArrayList arrayList = new ArrayList<>();
arrayList.add(1);   // List contains: [1]
arrayList.addFirst(0);  // List contains: [0, 1]
arrayList.addLast(2);   // List contains: [0, 1, 2]
Integer firstElement = arrayList.getFirst();  // 0
Integer lastElement = arrayList.getLast();  // 2
List reversed = arrayList.reversed();
System.out.println(reversed); // Prints [2, 1, 0]
```
`SequencedSet`接口直接继承了 `SequencedCollection` 接口并重写了 `reversed()` 方法。
```java
interface SequencedSet extends SequencedCollection, Set {
    SequencedSet reversed();
}
```
`SortedSet` 和 `LinkedHashSet` 实现了`SequencedSet`接口。
这里以 `LinkedHashSet` 为例，演示一下实际使用效果：