```
cat /etc/pam.d/system-auth|grep limits.so
session     required      pam_limits.so
```
因此只需要在 `/etc/security/limits.conf` 中加入以下内容:
```
vim /etc/security/limits.conf
......
kevin        hard       maxlogins       4
```
### 强制使用强密码 (用户密码安全配置)
PAM 配置文件：`/etc/pam.d/system-auth-ac`
模块名称: pam_cracklib(仅适用于 password 模块接口)
模块参数:
* minlen=12             密码字符长度不少于 12 位 (默认为 9)
* lcredit=-1            至少包含 1 个小写字母
* ucredit=-1            至少包含 1 个大写字母
* dcredit=-1            至少包含 1 个数字
* ocredit=-1            至少包含 1 个特殊字符
* retry=3               配置密码时，提示 3 次用户密码错误输入
* difok=6               配置密码时，新密码中至少 6 个字符与旧密码不同 (默认为 5)
其他常用参数：
* reject_username       新密码中不能包含与用户名称相同的字段
* maxrepeat=N           拒绝包含超过 N 个连续字符的密码，默认值为 0 表示此检查已禁用
* maxsequence=N         拒绝包含大于 N 的单调字符序列的密码，例如’1234’或’fedcb’，默认情况下即使没有这个参数配置，一般大多数这样的密码都不会通过，除非序列只是密码的一小部分
* maxclassrepeat=N      拒绝包含相同类别的 N 个以上连续字符的密码。默认值为 0 表示此检查已禁用。
* use_authtok           强制使用先前的密码，不提示用户输入新密码 (不允许用户修改密码)
模块名称：pam_unix (适用于 account，auth， password 和 session 模块接口)
模块参数：
* remember=N            保存每个用户使用过的 N 个密码，强制密码不能跟历史密码重复
其他常见参数：
* sha512                当用户下一次更改密码时，使用 SHA256 算法进行加密
* md5                   当用户更改密码时，使用 MD5 算法对其进行加密。
* try_first_pass        在提示用户输入密码之前，模块首先尝试先前的密码，以测试是否满足该模块的需求。
* use_first_pass        该模块强制使用先前的密码 (不允许用户修改密码)，如果密码为空或者密码不对，用户将被拒绝访问
* shadow                用户保护密码
* nullok                默认不允许空密码访问服务
* use_authtok           强制使用先前的密码，不提示用户输入新密码 (不允许用户修改密码)
在 RHEL/CentOS 下的配置，passwd 程序的 PAM 配置文件涉及主配置文件 `/etc/pam.d/passwd` 和 `/etc/pam.d/system-auth-ac`（也可以是 `/etc/pam.d/password-auth-ac`），其中 `/etc/pam.d/passwd` 配置文件默认只包含了 `/etc/pam.d/system-auth-ac` 配置文件，因此对于以上 PAM 身份验证密码模块配置，只修改/配置该文件即可。
在 Ubuntu 中，配置文件包括：`/etc/pam.d/common-password`、`/etc/pam.d/common-account`、`/etc/pam.d/common-auth`、`/etc/pam.d/common-session`
设置 口令最小长度不小于8，至少包含大写字母、小写字母、数字和特殊字符中的三种。
```bash
# CentOS、Fedora、EulerOS操作系统
password requisite pam_cracklib.so try_first_pass retry=3 minlen=9 dcredit=-1 ucredit=-1 lcredit=-1 ocredit=-1 type=
# Debian、Ubuntu操作系统
vim /etc/pam.d/common-password
password requisite pam_cracklib.so retry=3 minlen=9 dcredit=-1 ucredit=-1 lcredit=-1 ocredit=-1 difok=3
```
### 用户 SSH 登录失败尝试次数超出限制后锁定账户 (帐户锁定/解锁和时间设置)
为了进一步提高安全性，可以指定超过失败登录尝试次数后锁定用户。用户账户可以被解锁（可以由 root 用户主动解锁），或者在设定的时间后自动解锁。
如在三次失败的登录尝试后锁定用户十分钟。需要在 `/etc/pam.d/password-auth-ac`(或者在 `/etc/pam.d/sshd`) 文件添加以下参数：
```
auth        required      pam_tally2.so deny=3 unlock_time=600 onerr=succeed file=/var/log/tallylog
```
在 Ubuntu、SuSE Linux 中，需要修改 `/etc/pam.d/common-auth` 配置文件
另外，使用 PAM 还可以限制在 console 控制台上登录，需要修改 `/etc/pam.d/system-auth` 配置文件 (或者 `/etc/pam.d/login`)，添加如上 auth 配置字段即可。
一旦用户失败登录尝试次数达到 3 次，该帐户立刻被锁定，除非 root 用户解锁。root 用户下使用如下命令解锁用户：
```
pam_tally2 -u username -r --reset
```
查看用户登录失败信息
```
pam_tally2 -u username
```
如果要在 3 次失败登录尝试后永久锁定用户，那么需要删除 unlock_time 字段，除非 root 用户解锁该账户，否则将永久锁定。
### pam_tally/pam_tally2 模块参数
全局选项
* onerr=[succeed|fail]
* file=/path/to/log     失败登录日志文件，默认为 `/var/log/tallylog`
* audit                 如果登录的用户没有找到，则将用户名信息记录到系统日志中
* silent                不打印相关的信息
* no_log_info           不通过 syslog 记录日志信息
AUTH 选项
* deny=n                失败登录次数超过 n 次后拒绝访问
* lock_time=n           失败登录后锁定的时间（秒数）
* unlock_time=n         超出失败登录次数限制后，解锁的时间
* no_lock_time          不在日志文件 `/var/log/faillog` 中记录. fail_locktime 字段
* magic_root            root 用户 (uid=0) 调用该模块时，计数器不会递增
* even_deny_root        root 用户失败登录次数超过 deny=n 次后拒绝访问
* root_unlock_time=n    与 even_deny_root 相对应的选项，如果配置该选项，则 root 用户在登录失败次数超出限制后被锁定指定时间
### 允许普通用户使用 sudo 而不是 su (限制普通用户登录到 root 用户)
Linux 系统上默认存在一个 wheel 组，用于限制普通用户通过 su 登录到 root 用户，只有属于 wheel 组的用户成员才能使用 su。但是在默认情况下，系统并没有启用这个功能，我们可以通过 PAM 启用它，或者修改为指定的组 / 用户使用 su，当然指定为什么组可以按照要求而定。该配置通过 pam_wheel 模块指定。
首先启用 whell 组，使得只属于 wheel 组的用户可以使用 su 命令, 需要在 `/etc/pam.d/su` 配置文件添加以下配置：
```
auth            required        pam_wheel.so use_uid
```
需要注意应该将这一行参数添加在 `/etc/pam.d/su` 文件的首部，否则 PAM 模块可能会跳过该项检查。配置完之后，我们就可以将需要用 su 权限的用户添加到 wheel 组中，如下：
```
usermod -a -G wheel username
```
其次，如果你不想使用 wheel 组，而是使用其他的组代替，比如指定组名为 myadmingroup 的组拥有 su 的权限，需要这么做：
```
auth            required        pam_wheel.so use_uid group=myadmingroup
```
最后配置指定用户拥有 sudo 权限，要知道我们的目的是尽量少使用 root 身份的权限，sudo 可以让用户仅仅在需要调用 root 用户权限的情况下调用。我们可以指定特定的组/用户使用 sudo(不需要 root 密码) 调用 root 权限。visudo 打开配置文件：
```
hmm    ALL=(ALL)     NOPASSWD: ALL   #允许hmm用户通过sudo执行任何命令(不需要输入密码)
%wheel  ALL=(ALL)    ALL             #允许wheel组成员使用sudo执行任何命令(需要输入密码)
```
**禁止直接使用 root 用户通过 SSH 登录**
在 `/etc/pam.d/password-auth-ac` 或者 `/etc/pam.d/sshd` 配置文件中添加以下配置（该配置禁止 SSH 的口令认证，但仍然可以使用 SSH 密钥登录）
```
auth        required      pam_securetty.so
```
此外还可以配置 `/etc/securetty` 文件禁止 root 用户通过所有 tty 终端登录系统
```bash
cp /etc/securetty /etc/securetty.saved
echo "" >/etc/securetty
```
### 限制 root 只能从 kevin.com 这台计算机使用 ssh 远程登陆
由于 ssh 服务器的程序文件使用 sshd, 而 sshd 刚好支持 PAM，验证如下：
```
ldd /usr/sbin/sshd | grep libpam.so
    libpam.so.0 => /lib64/libpam.so.0 (0x00007f36f254d000)
```
修改 `/etc/pam.d/sshd`, 加入第二行，如下：
```diff
vim /etc/pam.d/sshd
auth       include      system-auth
++ account    required     pam_access.so accessfile=/etc/deny_sshd
account    required     pam_nologin.so
```
创建 `/etc/deny_sshd` 文件
```diff
vim /etc/deny_sshd
++ -:root:ALL EXCEPT kevin.com
```
---
## Source & Reference
- https://developer.aliyun.com/article/560279
- https://www.cnblogs.com/kevingrace/p/8671964.html