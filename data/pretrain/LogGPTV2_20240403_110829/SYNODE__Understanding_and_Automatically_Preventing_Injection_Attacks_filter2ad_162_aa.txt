title:SYNODE: Understanding and Automatically Preventing Injection Attacks
on NODE.JS
author:Cristian-Alexandru Staicu and
Michael Pradel and
Benjamin Livshits
Synode: Understanding and Automatically
Preventing Injection Attacks on Node.js
Cristian-Alexandru Staicu
TU Darmstadt
PI:EMAIL
Michael Pradel
TU Darmstadt
PI:EMAIL
Benjamin Livshits
Imperial College London
PI:EMAIL
Abstract—The Node.js ecosystem has lead to the
creation of many modern applications, such as server-
side web applications and desktop applications. Unlike
client-side JavaScript code, Node.js applications can
interact freely with the operating system without the
beneﬁts of a security sandbox. As a result, command
injection attacks can cause signiﬁcant harm, which is
compounded by the fact that independently devel-
oped Node.js modules interact in uncontrolled ways.
This paper presents a large-scale study across 235,850
Node.js modules to explore injection vulnerabilities.
We show that injection vulnerabilities are prevalent
in practice, both due to eval, which was previously
studied for browser code, and due to the powerful exec
API introduced in Node.js. Our study suggests that
thousands of modules may be vulnerable to command
injection attacks and that ﬁxing them takes a long time,
even for popular projects. Motivated by these ﬁndings,
we present Synode, an automatic mitigation technique
that combines static analysis and runtime enforcement
of security policies to use vulnerable modules in a safe
way. The key idea is to statically compute a template
of values passed to APIs that are prone to injections,
and to synthesize a grammar-based runtime policy from
these templates. Our mechanism is easy to deploy:
it does not require any modiﬁcation of the Node.js
platform, it is fast (sub-millisecond runtime overhead),
and it protects against attacks of vulnerable modules,
while inducing very few false positives (less than 10%).
I.
Introduction
JavaScript is the most widely-used programming lan-
guage for the client-side of web applications, powering
over 90% of today’s web sites1. Recently, JavaScript has
become increasingly popular for platforms beyond the
browser: server-side and desktop applications that use
Node.js, mobile programming (Apache Cordova/Phone-
Gap); it is even used for writing operating systems, such
1JavaScript usage statistics: http://w3techs.com/technologies/
details/cp-javascript/all/all.
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23071
www.ndss-symposium.org
as Firefox OS. One of the forces behind using JavaScript
in other domains is to enable client-side programmers to
reuse their skills in other environments.
Unfortunately, this skill transfer also spreads the risk
of misusing JavaScript in a way that threatens software
security. One example of this is bad programming habits
of client-side JavaScript, such as the widespread use of the
eval construct [32], spreading to the emerging platforms.
Additionally, new types of vulnerabilities and attacks be-
come possible, which do not directly map to problems
known in the client-side domain. For example, recent
work shows that mobile applications written in JavaScript
contain injection vulnerabilities [15] and that the impact of
attacks in mobile applications is potentially more serious
than that of client-side cross-site scripting (XSS). Others
have shown how dangerous the use of dangerous and
outdated JavaScript APIs can be [17]. Companies like
the Node Security Platform2 and Snyk3 are maintaining
vulnerability data for platforms that include Node.js and
Ruby Gems, underlining the importance of these issues,
but do no provide actionable prevention strategies.
This paper is the ﬁrst to thoroughly investigate a secu-
rity issue speciﬁc to JavaScript executed on the Node.js
platform. Speciﬁcally, we focus on injection vulnerabilities,
i.e., programming errors that enable an attacker to inject
and execute malicious code in an unintended way. Injection
vulnerabilities on the Node.js platform diﬀer from those
on other JavaScript platforms in three signiﬁcant ways.
1) Injection APIs and impact of attacks: Node.js
provides two families of APIs that may accidentally enable
injections. The eval API and its variants take a string
argument and interpret it as JavaScript code, allowing an
attacker to execute arbitrary code in the context of the
current application. The exec API and its variants take a
string argument and interpret it as a shell command, giving
the attacker access to system-level commands, beyond the
context of the current application. Moreover, attackers
may combine both APIs by injecting JavaScript code via
eval, which then uses exec to execute shell commands.
Because of these two APIs, and because Node.js lacks the
security sandbox of the web browser, injection vulnerabil-
ities in Node.js can cause signiﬁcantly more harm than
in the browser, e.g., by modifying the local ﬁle system or
even taking over the entire machine.
2https://nodesecurity.io/
3https://snyk.io/
2) Developer stance: While it is tempting for researchers
to propose an analysis that identiﬁes vulnerabilities as a
solution, to have longer-range impact, it helps to under-
stand Node.js security more holistically. By analyzing
security issues reported in the past and through developer
interactions, we observe that, while injection vulnerabili-
ties are indeed an important problem, developers who use
and maintain JavaScript libraries are generally reluctant
to use analysis tools and are not always willing to ﬁx their
code.
To better understand the attitude of Node.js module
developers toward potential injection ﬂaws, we submitted
a sample of 20 bug reports to developers on GitHub.
Somewhat to our surprise, only about half the reports
were attended to and only a small fraction was ﬁxed (the
results of this experiment are detailed in Figure 4). To
understand the situation further, we reviewed many cases
of the use of eval and exec, to discover that most (80%)
could be easily refactored by hand, eliminating the risk of
injections [24]. These observations suggest that even given
the right analysis tool, it is unlikely that developers will
proceed to voluntarily ﬁx potential vulnerabilities.
3) Blame game: A dynamic we have seen developing is
a blame game between Node.js module maintainers and
developers who use these modules, where each party tries
to claim that the other is responsible for checking un-
trusted input. Furthermore, while an individual developer
can ﬁnd it tempting to deploy a local ﬁx to a vulnerable
module, this patch is likely to be made obsolete or will
simply be overwritten by the next module update. These
observations motivated us to develop an approach that
provides a high level of security with a very small amount
of developer involvement.
Synode: Given the above observations about the devel-
opment process around Node.js modules, it is crucial to
oﬀer a solution that provides complete automation. This
paper presents Synode, an automatic approach to identify
potential injection vulnerabilities and to prevent injection
attacks. The basic idea is to check all third-party modules
as part of their installation and to rewrite them to enable
a safe mode proposed in this paper. A mix of two strategies
is applied as part of rewriting.
• Static: we statically analyze the values that may be
passed to APIs prone to injections. The static analysis
also extracts a template that describes values passed
to these dangerous APIs.
• Runtime: for code locations where the static analysis
cannot ensure the absence of injections, we oﬀer a
dynamic enforcement mechanism that stops malicious
inputs before passing them to the APIs.
A combination of these techniques is applied to a module
at the time of installation via Node.js installation hooks,
eﬀectively enforcing a safe mode for third-party modules.
In principle, while our runtime enforcement may be overly
conservative, our evaluation in Section VIII shows that
such cases are rare.
Alternative approaches: There are several alternatives
to our static-dynamic analysis. One alternative is a sound
static analysis that conservatively rejects all Node.js
modules for which the analysis cannot guarantee the
absence of
injection vulnerabilities. Unfortunately, due
to the dynamic features of JavaScript [2], a reasonably
precise static analysis is virtually never sound [2], [47],
whereas a fully sound analysis would result in many false
positives. Another alternative is a training-based approach
that learns from safe executions which values are safe to
pass to APIs prone to injections. While this approach
works well for client-side JavaScript [37], [25], [29], where
a lot of runtime behavior gets triggered by loading the
page, relying on training is challenging for Node.js code,
which often comes without any inputs to execute the code.
Finally, security-aware developers could resort to manually
analyzing third-party modules for potential vulnerabilities.
However, manual inspection does not scale well to the large
number of modules available for Node.js and suﬀers from
human mistakes. Instead of these alternatives, Synode
takes a best-eﬀort approach in the spirit of soundiness [21]
that guarantees neither to detect all vulnerabilities nor to
reject only malicious inputs. Our experimental evaluation
shows that, in practice, Synode rejects very few benign
inputs and detects all malicious inputs used during the
evaluation.
Synode relates to existing work aimed at preventing
code injections in JavaScript [11], [44], [35]. The closest
existing approaches, Blueprint [44] and ScriptGard [35],
share the idea of restricting runtime behavior based on
automatically inferred templates. In contrast to them,
Synode infers templates statically, i.e., without relying on
inputs that drive the execution during template inference.
Our work diﬀers from purely static approaches [11] by
defering some checks to runtime instead of rejecting poten-
tially benign code. Moreover, all existing work addresses
XSS vulnerabilities, whereas we address injection attacks
on Node.js code.
Contributions:
• Study: We present a study of injection vulnerabilities
in 235,850 Node.js modules, focusing on why and
how developers use potentially dangerous APIs and
whether developers appear open to using tools to
avoid these APIs. (Section III)
• Static analysis: We present a static analysis that
attempts to infer templates of user inputs used at
potentially dangerous sinks. (Section IV)
• Runtime enforcement: For cases that cannot be
shown safe via static analysis, we present a runtime
enforcement achieved through code rewriting. The
runtime approach uses partially instantiated abstract
syntax trees (ASTs) and ensures that the runtime
values do not introduce any unwanted code beyond
what is expected. (Section IV)
• Evaluation: We apply our static technique to a set
of 15,604 Node.js modules that contain calls to sinks.
We discover that 36.66% of the sink call sites are
statically guaranteed to be safe. For a subset of the
statically unsafe modules, we create both malicious
inputs that exploit the injection vulnerabilities and
benign inputs that exercise the advertised functional-
ity of the module. Our runtime mechanism eﬀectively
2
prevents 100% of the attacks, while being overly con-
servative for only 8.92% of the benign inputs.
Our implementation and a benchmark suite containing
both malicious and benign inputs passed to the vulnerable
modules is available for download:
https://github.com/sola-da/Synode
II. Background and Example
Node.js and injection APIs: The Node.js platform
is the de-facto standard for executing JavaScript outside
of browsers. The platform provides two families of APIs
that may allow an attacker to inject unexpected code,
which we call injection APIs. First, exec enables command
injections if an attacker can inﬂuence the string given to
exec, because this string is interpreted as a shell command.
The exec API has been introduced by Node.js and is not
available in browsers. Second, calling eval enables code
injections if an attacker can inﬂuence the string passed
to eval, because this string is interpreted as JavaScript
code. Since code injected via eval may contain calls to
exec, any code injection vulnerability is also a command
injection vulnerability. The latter distinguishes server-side
JavaScript from the widely studied client-side problems of
eval [32] and introduces an additional security threat. In
this paper, we focus on exec and eval, as these are the
most prominent members of the two families of APIs. Ex-
tending both our study and our mitigation mechanism to
more APIs, e.g., new Function() or modules, e.g., shelljs
is straightforward. Moreover, the approach can also be
applied with minimal eﬀort to other types of security
vulnerabilities, e.g. SQL injections and path traversals.
In contrast to the browser platform, Node.js does not
provide a security sandbox that controls how JavaScript
code interacts with the underlying operating system. In-
stead, Node.js code has direct access to the ﬁle system,
network resources, and any other operating system-level
resources provided to processes. As a result, injections are
among the most serious security threats on Node.js, as
evidenced by the Node Security Platform4, where, at the
time of writing, 20 out of 66 published security advisories
address injection vulnerabilities.
Module system: Code for Node.js is distributed and
managed via the npm module system. A module typically
relies on various other modules, which are automatically
installed when installing the module. There is no mecha-
nism built into npm to specify or check security properties
of third-party modules before installation.
Motivating example: Figure 1 shows a motivating ex-
ample that we use throughout the paper to illustrate our
approach. The function receives two parameters from an
unknown source and uses them to copy a ﬁle on the local
ﬁle system. The parameters are intended to represent a
ﬁle name and a ﬁle extension, respectively. To copy the ﬁle,
lines 2 to 5 construct a string that is passed as a command
to exec (line 7), which will execute a shell command. The
code also logs a message to the console. Line 10 retrieves
4https://nodesecurity.io/advisories/
var cmd = [];
cmd . push (" cp " );
cmd . push ( name + "." + ext );
cmd . push (" ~/ . localBackup /" );
1 function backupFile ( name , ext ) {
2
3
4
5
6
7
8
9
10
11 }
exec ( cmd . join (" " ));
var kind = ( ext === " jpg ") ? " pics " : " other ";
console . log ( eval (" messages . backup_ " + kind ));
Fig. 1: Motivating example.
the content of the message by looking up a property of the
messages object. The property and the message depend
on the extension of the backed up ﬁle. Implementing a
lookup of a dynamically computed property with eval
is a well-known misuse of eval that frequently occurs in
practice [32]. For example, suppose the function is called
with backupFile("f", "txt"). In this case, the command
will be cp f.txt ~/.localBackup and the logged message
will be the message stored in messages.backup_other.
The example contains two calls to APIs that may allow
for injecting code (lines 7 and 10). As an example for an
injection attack, let us consider the following call:
backupFile("–help && rm -rf * && echo ", "")
The dynamically constructed command will be:
cp –help && rm -rf * && echo . ~/.localBackup/
Unfortunately, this command does not backup any ﬁles
but instead it creates space for future backups by deleting
all ﬁles in the current directory. Such severe consequences
distinguish the problem of injections on Node.js from
injections known from client-side JavaScript, such as XSS:
because Node.js code runs without any sandbox that
could prevent malicious code from accessing the underlying
system, an attacker is able to inject arbitrary system-level
commands.
III. A Study of Injection Vulnerabilities
To better understand how developers of JavaScript
for Node.js handle the risk of injections, we conduct
a comprehensive empirical study involving 235,850 npm
modules. We investigate four research questions (RQs).
A. RQ1: Prevalence
At ﬁrst, we study whether APIs that are prone to
injection vulnerabilities are widely used in practice. We call
a module that directly calls an injection API an injection
module. To assess whether a module uses another mod-
ule that calls an injection API, we analyze dependences
between modules, as speciﬁed in their package.json ﬁle.
Given an injection module minj, we say that another
module m1 has a level-1 (level-2) dependence if it depends
on minj (via another module). Figure 2 shows how many
npm modules use injection APIs, either directly or via
another module. We ﬁnd that 7,686 modules and 9,111
modules use exec and eval, respectively, which corresponds
to 3% and 4% of all modules. In total, 15,604 modules
use at least one injection API. Furthermore, about 20% of
3
return s. replace (/"/g , ’\\" ’);
1 function escape (s) {
2
3 }
4 exports . open = function open ( target , callback ) {
5
6 }
7
8 // Possible attack : open (" ‘rm -rf *‘" );
exec ( opener + ’ " ’ + escape ( target ) + ’" ’);
Fig. 3: Regular expression-based sanitization and input
that bypasses it.
to Node.js JavaScript code. One usage pattern that was
not previously reported is to dynamically create complex
functions. This pattern, which we call “higher-order func-
tions”, is widely used in server-side JavaScript for creating
functions from both static strings and user-provided data.
We are not aware of an existing technique to easily refactor
this pattern into code that does not use eval.
Overall, we ﬁnd that over 20% of all uses of injection
APIs cannot be easily removed. Furthermore, many of
the remaining uses are unlikely to be refactored by the
developers, e.g., because techniques for removing usages of
eval [24], [14] are available but not adopted by developers.
C. RQ3: Existing Mitigation
To understand how developers deal with the risk of
injections, we study to what extent data gets checked
before being passed into injection APIs. Speciﬁcally, we
analyze two conditions. First, whether a call site of an
injection API may be reached by attacker-controlled data,
i.e., whether any mitigation is required. We consider data
as potentially attacker-controlled if it is passed as an input
to the module, e.g., via a network request, or if the data
is passed from another module and then propagates to
the injection call site. Second,
if the call site requires
mitigation, we analyze which mitigation technique the
developers use. We ﬁnd that 58% of the inspected call sites
are exploitable, i.e., attacker-controlled data may reach
the injection API. Among these call sites, the following
mitigation techniques are used:
None: A staggering 90% of the call sites do not use any
mitigation technique at all. For example, the call to exec in
the motivating example in Figure 1 falls into this category.
Regular expressions: For 9% of the call sites, the devel-
opers harden their module against injections using regular
expression-based checks of input data. An example in our
data set is shown in Figure 3. Unfortunately, most regular
expressions we inspected are not correctly implemented
and cannot protect against all possible injection attacks.
For example, the escape method in Figure 3 does not
remove back ticks, allowing an attacker to deliver a ma-
licious payload using the command substitution syntax,