### Stack Trace Analysis

The provided stack trace indicates an `io.druid.query.QueryInterruptedException` during the execution of a Druid query. The exception is thrown from the `ScanQueryEngine`, which suggests that the query was interrupted, possibly due to a timeout or other external factors.

#### Key Points in the Stack Trace:
1. **Jetty Thread Execution:**
   - The error originates from the Jetty thread pool, specifically from the `ExecuteProduceConsume` strategy.
   - The thread pool is responsible for managing and executing tasks, and the interruption occurred while processing a task.

2. **Druid Query Interruption:**
   - The `QueryInterruptedException` is thrown by the `ScanQueryEngine` at line 163.
   - This exception is likely due to the query being interrupted, which can happen if the query exceeds a configured timeout or if the system is under high load and needs to free up resources.

3. **Sequence and Yielder Handling:**
   - The stack trace shows multiple calls to `toYielder` and `wrap` methods, indicating that the query is working with sequences and yielders, which are used for lazy evaluation and memory management in Druid.
   - The `WrappingSequence` and `ConcatSequence` classes are involved in handling these sequences, and the `CPUTimeMetricQueryRunner` is also part of the process.

### Advice on Using `scan-query`

You mentioned that you are considering using `scan-query` to address memory pressure issues that `select-query` might have. Here are some points to consider:

1. **Memory Management:**
   - `scan-query` is designed to be more memory-efficient compared to `select-query` because it streams results rather than loading them all into memory at once.
   - Ensure that your query has appropriate limits and filters to prevent it from returning too much data, which could still cause memory issues.

2. **Timeouts and Interruptions:**
   - Configure appropriate timeouts for your queries to ensure they do not run indefinitely. This can help manage resource usage and prevent the system from becoming unresponsive.
   - If you frequently encounter `QueryInterruptedException`, it may be worth increasing the timeout settings, but be cautious as this can impact overall system performance.

3. **Query Performance:**
   - Optimize your query to reduce the amount of data processed. Use filters, time intervals, and other query parameters to narrow down the dataset.
   - Consider the use of segments and partitioning to distribute the load more evenly across the cluster.

4. **Monitoring and Logging:**
   - Enable detailed logging and monitoring to track query performance and resource usage. This can help you identify and address any bottlenecks or issues proactively.

5. **Cluster Configuration:**
   - Ensure that your Druid cluster is properly configured to handle the expected load. This includes having sufficient nodes, appropriate JVM settings, and optimized hardware resources.

### Example Configuration

Here is an example of how you might configure a `scan-query` to avoid memory issues:

```json
{
  "queryType": "scan",
  "dataSource": "your_datasource",
  "intervals": ["2023-01-01T00:00:00.000Z/2023-01-02T00:00:00.000Z"],
  "resultFormat": "compactedList",
  "columns": ["column1", "column2"],
  "batchSize": 1000,
  "limit": 10000,
  "filter": {
    "type": "and",
    "fields": [
      {
        "type": "selector",
        "dimension": "status",
        "value": "active"
      }
    ]
  }
}
```

- **`intervals`**: Specify the time range to limit the data scanned.
- **`columns`**: Include only the necessary columns to reduce the amount of data processed.
- **`batchSize` and `limit`**: Control the number of rows returned to manage memory usage.
- **`filter`**: Apply filters to reduce the dataset size.

By following these guidelines and configuring your queries appropriately, you should be able to mitigate memory pressure and improve the overall performance of your Druid setup.