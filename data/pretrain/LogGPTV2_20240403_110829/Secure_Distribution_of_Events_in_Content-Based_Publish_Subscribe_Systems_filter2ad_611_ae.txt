throughput). 
build-up cache, where previously cached keys 
are used to generate new keys, has remarkably 
little effect on number of encryptions required 
over  simple  cache,  besides  being  more 
expensive  to  search  when  for  entries  that 
should be used to generate a new key.  
increase 
in 
The  LKH  scheme  performed  better  than  the 
simple cache for the random case despite the fact that 
the LKH scheme essentially requires a fixed amount of 
storage  for  a  given  number  of  clients  (e.g.,  1999 
individual and internal group keys for 1000 clients), but 
not  as  well  as  clustering  schemes.  LKH  scheme  can 
also be more expensive to use in terms of search costs -
--  algorithmically,  finding  an  optimal  cover  of  LKH 
keys for a new subgroup usually takes more steps than 
searching the cluster-cache. 
The  reduction  over  simple  caching  and  LKH 
that  we  considered  appears  to  be  asymptotically  a 
constant factor for the same size cache. A question that 
arises is whether it is possible to do reduce the number 
of encryptions to O(log N) per event in the worst case,  
by either using multiple static LKH trees or by using a 
large  cache.    The  answer  appears  to  be  no  as  the 
following  analysis  shows  unless  the  cache  size  is 
exponential in the number of clients. Since the internal 
nodes  of  an  LKH  tree  can  also  be  considered  to  be 
cache  entries,  the  result  also  says  that  an  exponential 
number of LKH trees are required to reduce the worst-
case  bound  on  the  number  of  encryptions  to  be 
O(log(N))    per  event.  In  the  analysis  below,  we  only 
consider the situation where generating a group key for 
a  new  event  uses  an  optimal  combination  of  existing 
keys in the cache.  
Suppose the cache size is S.  If we are allowed 
to  pick  at  most  p  entries  from  the  cache  to  form  any 
subgroup, the maximum number of subgroups that can 
be formed from this cache is bounded by:  
pS  
But,  there  are  2N  subgroups  that  need  to  be 
formed,  given  N  clients.  Therefore,  if  each  potential 
subgroup  needs  to  be  formed  using  at  most  p  cache 
entries, the following must hold: 
2‡
pS
N
Therefore, 
NS
p
S
log
2‡
2
N
p
Or  
The  above  result  tells  us  that  if  p  is  any 
sublinear  function  of  N  (e.g.,  O(ln  N)  or  O(f N)),  the 
size  of  the  cache  must  grow  exponentially  in  N  to 
guarantee that each event  can be sent securely using at 
most p encryptions. 
So,  it  appears  that  the  worst-case  number  of 
encryptions for an event will need to be linear in N for 
reasonably sized caches, but one can try to improve the 
constant  of  proportionality,  as  we  have  tried  to  do  in 
this  paper.  Note  that  this  result  applies  only  if  a  new 
event needs to be encrypted individually using existing 
(potentially multiple) group keys.  An open question is 
whether one can do better if one allows an event to be 
encrypted  multiple 
times;  e.g.,  send  a  message 
encrypted  under  both  keys  k1  and  k2,  to  send  the 
message  to  only  those  members  who  possess  both  k1 
and  k2.  Another  open  question  is  whether  sublinear 
e
e
e
‡
amortized bounds can be achieved without exponential-
size caches. We leave the analysis of these questions to 
future work. 
7  Conclusion and Future Work 
There is a growing need for security solutions 
for  content-based  systems.    This  paper  identifies  the 
“secure  end-point  delivery”  problem  and  explores  a 
number  of  possible  solutions.  We are concerned with 
providing  confidentiality  when  sending  events  from 
brokers to subscribers.  The problem is that in content-
based  systems,  every  event  can  potentially  have  a 
different  set  of  interested  subscribers.    There  are  2N 
possible subsets, where N is the number of subscribers. 
With  thousands  of  subscribers  it  is  infeasible  to  setup 
static security groups for every possible subset.   
A  number  of  key  management  systems  for 
group communication solve a similar problem but none 
of them was designed to handle the dynamic nature of 
content-based event delivery.  We explored a number of 
dynamic  caching  approaches.    A  simple solution is to 
encrypt  each  event  separately  for  each  interested 
subscriber;  however  this  requires  a  large  number  of 
encryptions for large sets of subscribers.  Our main goal 
is  to  reduce  the  number  of  encryptions  required  to 
preserve  confidentiality  while  sending  events  only  to 
interested  subscribers.    The  number  of  encryptions  is 
important  because  it  translates  directly  into  message 
throughput (see figure 9).   
All  of our approaches use a dynamic caching 
scheme,  where  the  broker  and  subscribers  must  cache 
subgroup keys.  Each cache entry has a format , where G identifies the set of subscribers belonging to 
a subgroup and K is a key associated with the subgroup.  
All  secure  communication intended for all subscribers 
in  G  can  be  encrypted  using  key  K.    Through 
theoretical analysis and simulation results, we show that 
our clustered and clustered-popular approaches perform 
better  as  cache  size  increases.    Both  cluster-based 
algorithms  outperform  LKH-based  solution  for  most 
cases.  Clustered-popular algorithm performs especially 
well  in  the  case  of  the  popular-set  group distribution.  
We also show that it is impossible to achieve sublinear 
encryptions growth for a large class of algorithms, even 
with using multiple LKH trees, without an exponential 
number of LKH trees or exponential-sized caches in the 
number of subscribers per broker. 
Our results show that cluster-based algorithms 
can  be  a  practical  solution  to  the  end-point  delivery 
problem.  They do not impose heavy overhead as hash 
tables  can  be  used  for  cache  lookup.    The  cache  size 
requirement  on  the  subscriber  side  is  also  lower  than 
the simple cache or build-up cache algorithms.  In the 
case of the clustered cache, each subscriber only needs 
C
K
KC = .  C is the total cache 
Ck cache entries, where 
size at the broker, K is the number of clusters and CK is 
the size of one cluster part of cache.  If client resources 
are  limited,  a  protocol  for  key  request/exchange  is 
needed  for  a  subscriber  to  request  appropriate  keys 
from the broker.   
in 
the 
future. 
We plan to investigate the effect of providing 
integrity  and  sender  authentication  on  message 
throughput 
sender 
authentication  in  the  context of content-based systems 
is  a  non-trivial  problem.    Throughout  the  paper  we 
make  an  assumption  that  brokers  are  trusted.    Every 
broker in the system has the ability to read every event.  
We are investigating the impact of non-universal broker 
trust on the design of algorithms. 
  Efficient 
References 
[ABH00]  D.  Arnold,  J.  Boot,  M.  Henderson,  T. 
Phelps,  and  B.  Segall.    Elvin  –  Content-
Addressed  Messaging  Client  Protocol.  
Internet  Draft,  Network  Working  Group, 
2000. 
from 
http://elvin.dstc.edu.au/download/internet-
draft.txt. 
Available 
[ASW00]  M. Abdalla, Y. Shavitt, and A. Wool.  Key 
Management 
for  Restricted  Multicast 
Using  Broadcast  Encryption.    IEEE/ACM 
Transactions on Networking, 8(4), pp 443-
454, August 2000. 
[B93]  
[B96] 
[BC94] 
K.  Birman.  The  Process  Group  Approach 
to  Reliable  Distributed  Computing. 
Communications  of  the  ACM,  36(12):37 
53, December 1993.  
A.  Ballardie.  Scalable  Multicast  Key 
Distribution.  Internet  Engineering  Task 
Force, May 1996. RFC 1949.  
C.  Blundo  and  A.  Cresti. 
  Space 
requirements  for  broadcast encryption.  In 
Advances 
– 
EUROCRYPT’94,  LNCS 950, pp 287-298. 
Springer-Verlag, 1994. 
Cryptology 
in 
[BCM99]  Guruduth Banavar, Tushar Chandra, Bodhi 
Mukherjee,  Jay  Nagarajarao,  Robert  E. 
Strom,  and  Daniel  C.  Sturman. 
  An 
Efficient  Multicast  Protocol  for  Content-
Based  Publish-Subscribe  Systems. 
  In 
International  Conference  on  Distributed 
Computing  Systems  (ICDCS  '99),  June 
1999. 
[BD94]  M.  Burmester  and  Y.  Desmedt.    A secure 
and  efficient  conference  key  distribution 
system.    In  Advances  in  Cryptology  – 
EUROCRYPT ’94, 1995. 
[HM97b]  H. Harney and C. Muckenhirn. Group Key 
Management 
(GKMP) 
Specification.  Internet  Engineering  Task 
Force, July 1997. RFC 2093. 
Protocol 
[BFMS98]  C.  Blundo,  L.  A.  Frota  Mattos, and D. R. 
Stinson. Generalized Beimel-Chor schemes 
for  broadcast  encryption  and  interactive 
key distribution.  In Theoretical Computer 
Science, 200(1-2), pp 313-334, 1998. 
[BW98]  K.  Becker  and  U.  Wille.    Communication 
complexity  of  group  key  distribution.    In 
5th  ACM  Conference  on  Computer  and 
Communications  Security,  San  Francisco, 
CA, November 1998. 
[C98] 
[CDF] 
Antonio  Carzaniga.    Architectures  for  an 
Event  Notification  Service  Scalable  to 
Wide-Area  Networks. 
thesis, 
Politecnico  di  Milano,  December  1998.  
http://www.cs.colorado.edu/ 
Available: 
~carzanig/papers. 
  PhD 
G.  Cugola,  E.  DiNitto,  and  A.  Fuggetta.  
The JEDI event-based infrastructure and its 
application  to  the  development  of  the 
OPSS  WFMS.    Submitted  to Transactions 
on Software Engineering 
[CDZ97]  K.  Calvert,  M.  Doar,  and  E.  Zegura.  
IEEE 
Modeling 
Communications Magazine, June, 1997. 
Internet  Topology. 
[D89] 
S.  Deering. 
  Host  Extensions  for  IP 
Multicasting.    IETF    RFC  1112,  August 
1989. 
[GKP99]  R.  Gruber,  B.  Krishnamurthy,  and  E. 
Panagos.  An Architecture of the READY 
Event Notification System.  In Proceedings 
of 
the 
International  Conference  on  Distributed 
Computing Systems 1999, Austin, TX, June 
1999. 
the  Middleware  Workshop  at 
[HH99] 
Hugh  Harney  and  Eric  Harder.  Group 
Secure  Association  Key  Management 
Protocol (Draft). Internet Engineering Task 
Force,  April  1999.  draft-harney-sparta-
gsakmp-sec-00.txt. 
[HM97a]  H. Harney and C. Muckenhirn. Group Key 
Management 
(GKMP) 
Architecture.  Internet  Engineering  Task 
Force, July 1997. RFC 2094. 
Protocol 
[ITW82] 
[IONA] 
I. Ingemarsson, D. Tang, and C. Wong.  A 
conference  key  distribution  system.    IEEE 
Transactions  on  Information  Theory,  vol. 
28, no. 5, pp. 714-720, September 1982. 
IONA Corporation.  OrbixTalk Fact Sheet.  
http://www.iona.com/products/messaging/t
alk/index.html. 
[KPT00]  Y. Kim, A. Perrig, and G. Tsudik.  Simple 
and  Fault-Tolerant  Key  Agreement  for 
Dynamic  Collaborative  Groups. 
In 
Proceedings  of  7th  ACM  Conference  on 
Computer  and  Communication  Security 
CCS 2000. 
[KR95] 
[LS98] 
[M97] 
B.  Krishnamurthy  and  D.  Rosenblum.  
Yeast:  A  general  purpose  event-action 
system.    IEEE  Transactions  on  Software 
Engineering, 21(10), October 1995. 
M.  Luby  and  J.  Staddon.    Combinatorial 
bounds  for  broadcast  encryption. 
  In 
Advances 
Cryptology 
– 
EUROCRYPT’98, LNCS 1403, pp 512-526, 
Espoo, Finland, 1998. 
in 
S. Mittra. Iolus: A Framework for Scalable 
Secure  Multicasting.  In  Proceedings  of 
ACM  SIGCOMM  '97,  pages  277  -  278. 
ACM, September 1997.  
[MPH99]  P.  McDaniel,  A.  Prakash,  and  P. 
  Antigone:  A  Flexible 
Honeyman. 
Framework 
Group 
Communication.  In Proceedings of the 8th 
USENIX  Security  Symposium,  August 
1999. 
Secure 
for 
[MS97]  M.  Mansouri-Samani  and  M.  Sloman.    A 
Generalised  Event  Monitoring  Language 
for  Distributed  Systems. 
  EE/IOP/BCS 
Distributed  Systems  Engineering  Journal, 
4(2), June 1997. 
[MS98] 
David  A.  McGrew  and  Alan  T.  Sherman.  
Key  Establishment 
in  Large  Dynamic 
Groups  Using  One-Way  Function  Trees. 
TIS Report No. 0755, TIS Labs at Network 
Associates,  Inc.,  Glenwood,  MD,  May 
1998. 
[TIBCO]  TIBCO.    TIB/Rendezvous  White  Paper.  
http://www.rv.tibco.com/whitepaper.html. 
[VBM96]  R.  Van  Renesse,  K.  Birman,  and  S. 
Maffeis.  Horus:  A  Flexible  Group 
Communication  System.  Communications 
of the ACM, 39(4):76 - 83, April 1996.  
[WGL98]  C.  K.  Wong,  M.  Gouda,  and  S.  S.  Lam. 
Secure  Group  Communication  Using  Key 
Graphs. 
of  ACM 
SIGCOMM  '98,  pages  68  -  79.  ACM, 
September 1998.  
In  Proceedings 
[WHA98]  Debby  M.  Wallner,  Eric  J.  Harder,  and 
Ryan  C.  Agee.  Key  Management  for 
Multicast: Issues and Architectures (Draft). 
Internet 
Force, 
September  1998.  draft-wallner-key-arch- 
01.txt.  
Engineering 
Task 
[WISEN98] Workshop on Internet Scale Event 
Notification.  See http://www.ics.uci.edu/ 
IRUS/wisen/wisen98 for details. 
[WCS99]  M.  Waldvogel,  G.  Caronni,  D.  Sun,  N. 
Weiler,  and  B.  Plattner.    The  VersaKey 
Framework:  Versatile  Group  Key 
Management.  IEEE  Journal  on  Selected 
17(9), 
Areas 
September 1999. 
Communications, 
in 
[YL00] 
Y.  Yang  and  S.  Lam.    A  Secure  Key 
Management  Protocol  Communication 
Lower Bound.  Technical Report TR2000-
24,  The  University  of  Texas  at  Austin, 
Austin, TX, September 2000. 
  How 
S. 
Bhattacharjee. 
to  Model  an 
Internetwork.    In  Proceedings  of  IEEE 
Infocom  `96,  San  Francisco,  CA,  April 
1996. 
[ZCB96]  E.  Zegura,  K.  Calvert, 
and 
[OAA00]  L.  Opyrchal,  M.  Astley,  J.  Auerbach,  G. 
Banavar,  R.  Strom,  and  D.  Sturman.  
Exploiting  IP  Multicast  in  Content-Based 
Publish-Subscribe 
In 
Proceedings  of  Middleware  2000,  New 
York, April 2000. 
Systems. 
[OMG] 
[P99] 
[Pub77] 
[R94] 
[SA97] 
Object Management Group.  Notification 
Service.  http://www.omg.org/cgi-bin/ 
doc?telecom/98-06-15  
Protocols 
Adrian Perrig.  Efficient Collaborative Key 
Management 
Secure 
Autonomous  Group  Communication.  In 
International  Workshop  on  Cryptographic 
Techniques  and  E-Commerce  (CrypTEC 
'99), 1999. 
for 
Federal  Information  Processing  Standards 
Publication.    Data  Encryption  Standard, 
1997.  National Bureau of Standards. 
M.  Reiter.  Secure  Agreement  Protocols: 
Reliable  and  Atomic  Group  Multicast  in 
Rampart.  In  Proceedings  of  2nd  ACM 
Conference 
and 
Communications  Security,  pages  68  -  80. 
ACM, November 1994.  
Computer 
on 
Bill  Segall  and  David  Arnold.    Elvin  has 
left 
the  building:  A  publish/subscribe 
notification  service  with  quenching.    In 
of  AUUG97,  Brisbane, 
Proceedings 
Australia, September 1997. 
[SAB00]  B.  Segall,  D.  Arnold,  J.  Boot,  M. 
Henderson, and T. Phelps.  Content Based 
Routing  with  Elvin4. 
in 
Canberra, 
Proceedings 
Australia, June 2000. 
  To  appear 
AUUG2K, 
[SSD88]  D.  Steer,  L.  Strawczynski,  W.  Diffie,  and 
M. Wiener.  A secure audio teleconference 
system.    In  Advances  in  Cryptology  – 
CRYPTO  ’88,  Santa  Barbara,  CA,  August 
1998. 
[SvT98]  D. R. Stinson and T. van Trung.  Some new 
results  on  key  distribution  patterns  and 
broadcast  encryption.  Designs,  Codes  and 
Cryptography, 14(3), pp261-279, 1998. 
[STW00]  M.  Steiner,  G.  Tsudik,  and  M.  Waidner.  
Key  Agreement  in  Dynamic  Peer  Groups.  
IEEE  Transactions  on  Parallel  and 
Distributed Systems, 2000. 
[SUN] 
Sun Microsystems.  Java Message Service.  
http://java.sun.com/products/jms.