\$ awk -f dot.awk
\-\-\--Using .1\-\-\--
.1d\--\> 101
.1e\--\> 1.0e+02
.1f\--\> 101.2
.1g\--\> 1e+02
\-\-\--Using .4\-\-\--
+--------+-------------------------------------------------------------+
| > .4   | > 0101                                                      |
| d\--\> |                                                             |
+========+=============================================================+
| > .4   | > 1.0123e+02                                                |
| e\--\> |                                                             |
+--------+-------------------------------------------------------------+
| > .4   | > 101.2300                                                  |
| f\--\> |                                                             |
+--------+-------------------------------------------------------------+
| > .4   | > 101.2                                                     |
| g\--\> |                                                             |
+--------+-------------------------------------------------------------+
#### Print Report to File
You can redirect the output of a print statement to a specific output
file inside the awk script. In the following example the 1st print
statement has \"\> report.txt\", which creates the report.txt file and
sends the output of the prints statement to it. All the subsequent print
statements have \"\>\> report.txt\", which appends the output to the
existing report.txt file.
\$ cat printf-width4.awk BEGIN {
> FS=\",\"
printf \"%-3s\\t%-10s\\t%-10s\\t%-5s\\t%-3s\\n\",
\"Num\",\"Description\",\"Type\",\"Price\",\"Qty\" \> \"report.txt\"
> printf
\"\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--\\
n\" \>\> \"report.txt\"
}
{
> if (\$5 \> 10)
>
> printf \"%-3d\\t%-10s\\t%-10s\\t\$%-.2f\\t%03d\\n\",
\$1,\$2,\$3,\$4,\$5 \>\> \"report.txt\"
}
\$ awk -f printf-width4.awk items.txt
\$ cat report.txt
Num Description Type Price Qty
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
103. MP3 Player Audio \$270.00 015
104. Tennis Racket Sports \$190.00 020
The other method is not to specify the \"\> report.txt\" or \"\>\>
report.txt\" in the print statement. Instead, while executing the awk
script, redirect the output to the report.xt as shown below.
\$ cat printf-width5.awk BEGIN {
> FS=\",\"
printf \"%-3s\\t%-10s\\t%-10s\\t%-5s\\t%-3s\\n\",
\"Num\",\"Description\",\"Type\",\"Price\",\"Qty\"
> printf
\"\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--\\
n\"
}
{
> if (\$5 \> 10)
>
> printf \"%-3d\\t%-10s\\t%-10s\\t\$%-.2f\\t%03d\\n\",
\$1,\$2,\$3,\$4,\$5
}
\$ awk -f printf-width5.awk items.txt \> report.txt
\$ cat report.txt
Num Description Type Price Qty
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
103. MP3 Player Audio \$270.00 015
104. Tennis Racket Sports \$190.00 020
## Built-in Numeric Functions
Awk has built-in functions for several numeric, string, input, and
output operations. We discuss some of them here.
#### Awk int(n) Function
int() function gives you the integer part of the given argument. This
produces the lowest integer part of given n. n is any number with or
with out floating point. If you give a whole number as an argument, this
function returns the same number; for a floating point number, it
truncates.
> **Init Function Example:**
\$ awk \'BEGIN{ print int(3.534); print int(4); print int(-5.223); print
int(-5);
}\'
The above command produces the following output.
3
4
-5
-5
#### Awk log(n) Function
The log(n) function provides the natural logarithm of given argument
n\. The number n must be positive, or an error will be thrown.
> **Log Function Example:**
\$ awk \'BEGIN{ print log(12); print log(0); print log(1);
print log(-1);
}\' 2.48491
-inf 0
nan
In the above output you can identify that log(0) is infinity which was
shown as -inf, and log(-1) gives you the error nan (Not a Number).
Note: You might also get the following warning message for the log(- 1):
awk: cmd. line:4: warning: log: received negative argument -1
#### Awk sqrt(n) Function
sqrt function gives the positive square root for the given integer n.
This function also requires a positive number, and it returns nan error
if you give the negative number as an argument.
> **Sqrt Function Example:**
\$ awk \'BEGIN{ print sqrt(16); print sqrt(0); print sqrt(-12);
}\' 4
0
nan
#### Awk exp(n) Function
The exp(n) function provides e to the power of n.
> **Exp Function Example:**
\$ awk \'BEGIN{
print exp(123434346); print exp(0);
print exp(-12);
}\'
inf 1
6.14421e-06
In the above output, for exp(1234346), it gives you the output infinity,
because this is out of range.
#### Awk sin(n) Function
The sin(n) function gives the sine of n, with n in radians.
> **Sine Function Example:**
\$ awk \'BEGIN { print sin(90); print sin(45);
}\' 0.893997
0.850904
#### Awk cos(n) Function
The cos(n) returns the cosine of n, with n in radians.
> **Cosine Function Example:**
\$ awk \'BEGIN { print cos(90); print cos(45);
}\'
-0.448074
0.525322
#### Awk atan2(m,n) Function
This function gives you the arc-tangent of m/n in radians.
> **Atan2 Function Example:**
\$ awk \'BEGIN { print atan2(30,45) }\' 0.588003
## Random Number Generator
#### Awk rand() Function
rand() is used to generate a random number between 0 and 1. It never
returns 0 or 1, always a value between 0 and 1. Numbers are random
within one awk run, but predictable from run to run.
Awk uses an algorithm to generate the random numbers, and since this
algorithm is fixed, the numbers are repeatable.
The following example generates 1000 random numbers between 0 and 100,
and shows how often each number was generated.
> **Generate 1000 random numbers (between 0 and 100):**
\$ cat rand.awk BEGIN {
while(i\ n = int(rand()\*100); rnd\[n\]++;
>
> i++;
}
for(i=0;i\ print i,\"Occured\", rnd\[i\], \"times\";
}
}
\$ awk -f rand.awk
0 Occured 6 times
1.  Occured 16 times
2.  Occured 12 times
3.  Occured 6 times
4.  Occured 13 times
5.  Occured 13 times
6.  Occured 8 times
7.  Occured 7 times
8.  Occured 16 times
9.  Occured 9 times
10. Occured 6 times
11. Occured 9 times
12. Occured 17 times
13. Occured 12 times
From the above output, we can see that the rand() function can generate
repeatable numbers very often.
#### Awk srand(n) Function
srand(n) is used to initialize the random number generation with a given
argument n. Whenever program execution starts, awk starts generating its
random numbers from n. If no argument were given, awk would use the time
of the day to generate the seed.
> **Generate 5 random numbers starting from 5 to 50:**
\$ cat srand.awk BEGIN {
> \# Initialize the seed with 5. srand(5);
>
> \# Totally I want to generate 5 numbers. total=5;
>
> #maximum number is 50.
>
> max=50; count=0;
>
> while(count \
> rnd = int(rand() \* max); if ( array\[rnd\] == 0 ) {
>
> count++; array\[rnd\]++;
>
> }
>
> }
>
> for ( i=5; i\
> print i;
>
> }
}
\$ awk -f srand.awk 9
15
26
37
39
The above srand.awk does the following:
-   Uses rand() function to generate a random number that is multiplied
    > with the maximum desired value to produce a number \ If it does not exist, it increments the index and loop count. It
    > generates 5 numbers using this logic.
-   Finally in the for loop, it loops from minimum to maximum, and
    > prints each index that contains any value.
## Generic String Functions
Following are the common awk string functions that are available on all
flavors of awk.
#### Index Function
The index function can be used to get the index (location) of the given
string (or character) in an input string.
In the following example, string \"Cali\" is located in the string \"CA
is California\" at location number 7.
You can also use index to check whether a given string (or character) is
present in an input string. If the given string is not present, it will
return the location as 0, which means the given string doesn\'t exist,
as shown below.
\$ cat index.awk BEGIN {
> state=\"CA is California\"
print \"String CA starts at location\",index(state,\"CA\");
print \"String Cali starts at location\",index(state,\"Cali\");
> if (index(state,\"NY\")==0)
>
> print \"String NY is not found in:\", state
}
\$ awk -f index.awk
String CA starts at location 1 String Cali starts at location 7
String NY is not found in: CA is California
#### Length Function
The length function returns the length of a string. In the following
example, we print the total number of characters in each record of the
items.txt file.
\$ awk \'{print length(\$0)}\' items.txt 29
32
27
31
30
#### Split Function
> **Syntax:**
split(input-string,output-array,separator)
This split function splits a string into individual array elements. It
takes following three arguments.
-   input-string: This is the input string that needs to be split into
    > multiple strings.
-   output-array: This array will contain the split strings as
    > individual elements.
-   separator: The separator that should be used to split the
    > input-string.
For this example, the original items-sold.txt file is slightly changed
to have different field delimiters, i.e. a colon to separate the item
number and the quantity sold. Within quantity sold, the individual
quantities are separated by comma.
So, in order for us to calculate the total number of items sold for a
particular item, we should take the 2nd field (which is all the
quantities sold delimited by comma), split them using comma separator
and store the substrings in an array, then loop through the array to add
the quantities.
\$ cat items-sold1.txt 101:2,10,5,8,10,12
102:0,1,4,3,0,2
103:10,6,11,20,5,13
104:2,3,4,0,6,5
105:10,2,5,7,12,6
\$ cat split.awk BEGIN {
> FS=\":\"
}
{
> split(\$2,quantity,\",\"); total=0;
>
> for (x in quantity) total=total+quantity\[x\];
>
> print \"Item\", \$1, \":\", total, \"quantities sold\";
}
\$ awk -f split.awk items-sold1.txt Item 101 : 47 quantities sold
Item 102 : 10 quantities sold
Item 103 : 65 quantities sold
Item 104 : 20 quantities sold
Item 105 : 42 quantities sold
#### Substr Function
> **Syntax:**
substr(input-string, location, length)
The substr function extracts a portion of a given string. In the above
syntax:
-   input-string: The input string containing the substring.
-   location: The starting location of the substring.
-   length: The total number of characters to extract from the starting
    > location. This parameter is optional. When you don\'t specify it
    > extracts the rest of the characters from the starting location.
The following example starts extracting the string from 5th the
character and prints the rest of the line. The 1st 3 characters are the
item number, 4th character is the comma delimiter. So, this skips the
item number and prints the rest.
\$ awk \'{print substr(\$0,5)}\' items.txt HD Camcorder,Video,210,10
Refrigerator,Appliance,850,2
MP3 Player,Audio,270,15 Tennis Racket,Sports,190,20 Laser
Printer,Office,475,5
> **Start from the 1st character (of the 2nd field) and prints 5
> characters:**
\$ awk -F\",\" \'{print substr(\$2,1,5)}\' items.txt HD Ca
Refri MP3 P
Tenni Laser