title:Protocol misidentification made easy with format-transforming encryption
author:Kevin P. Dyer and
Scott E. Coull and
Thomas Ristenpart and
Thomas Shrimpton
Protocol Misidentiﬁcation Made Easy
with Format-Transforming Encryption
Kevin P. Dyer
Portland State University
Scott E. Coull
RedJack, LLC.
Thomas Ristenpart
University of Wisconsin
Thomas Shrimpton
Portland State University
ABSTRACT
Deep packet inspection (DPI) technologies provide much-
needed visibility and control of network traﬃc using port-
independent protocol identiﬁcation, where a network ﬂow is
labeled with its application-layer protocol based on packet
contents. In this paper, we provide the ﬁrst comprehensive
evaluation of a large set of DPI systems from the point of
view of protocol misidentiﬁcation attacks, in which adver-
saries on the network attempt to force the DPI to mislabel
connections. Our approach uses a new cryptographic prim-
itive called format-transforming encryption (FTE), which
extends conventional symmetric encryption with the ability
to transform the ciphertext into a format of our choosing.
We design an FTE-based record layer that can encrypt arbi-
trary application-layer traﬃc, and we experimentally show
that this forces misidentiﬁcation for all of the evaluated DPI
systems. This set includes a proprietary, enterprise-class
DPI system used by large corporations and nation-states.
We also show that using FTE as a proxy system incurs no
latency overhead and as little as 16% bandwidth overhead
compared to standard SSH tunnels. Finally, we integrate
our FTE proxy into the Tor anonymity network and demon-
strate that it evades real-world censorship by the Great Fire-
wall of China.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Invasive software; C.2.0
[Computer-Communication Networks]: Security and
protection
Keywords
deep packet inspection; protocol classiﬁcation; regular ex-
pressions; censorship circumvention; applied cryptography
A preliminary version of this work appeared in the proceedings of
the 20th ACM Conference on Computer and Communications Security
(CCS), 2013. This is the full version.
1.
INTRODUCTION
Network operators increasingly deploy deep packet inspec-
tion (DPI) to improve visibility into network activities and
control those activities based on identiﬁed application-layer
protocols and content. The most advanced in-use DPI sys-
tems use regular expressions to encode ﬁngerprints for, in
particular, the protocols of interest, and whether packet con-
tents match against these expressions informs what is often
called port-independent protocol identiﬁcation [3, 10, 12, 24,
35]. This may be followed by other, potentially more sophis-
ticated, traﬃc and content analysis methods, or may lead to
ﬁltering or other discriminatory behavior. For example, cor-
porations use DPI to block ﬁle-sharing protocols that often
cause accidental data leakage, while ISPs often use DPI to
throttle bandwidth-heavy BitTorrent traﬃc [22, 53]. More
controversially, nation-states use DPI to censor their citi-
zens’ use of the Internet, in part by blocking privacy tools
like Tor [14].
Despite their growing roles in many security-critical set-
tings, we are unaware of any work that speciﬁcally studies
the robustness of state-of-the-art DPI protocol-identiﬁcation
tools in the face of dedicated attacks. Thus, we address
the following question: are there practical attacks that will
force any regular-expression-based DPI into misclassifying
connections as protocols of the attacker’s choosing? And,
if such attacks do exist, can these misclassiﬁed connections
carry practically useful amounts of information?
The results of our work conclude that, indeed, misclassiﬁ-
cation attacks exist against enterprise-grade DPI, and that
these attacks can be mounted while carrying suﬃcient infor-
mation to surf the web, transfer ﬁles, and use Tor. Rather
than building an array of ad-hoc schemes to trick speciﬁc
DPI systems, we instead target the implicit premise under-
lying modern DPI: that regular expressions (regexes) are
suﬃcient for identifying network protocols. To that end, we
develop a generic approach for controlling the format of en-
crypted data, so that it will match whatever regex we desire
to specify. With this ability, we can force protocol misiden-
tiﬁcation across a broad range of DPI systems.
The development of a generic approach to evasion of regex-
based DPI implies that, for settings with adversarial net-
work users, future protocol-identiﬁcation systems will have
to move to more expensive techniques based on machine
learning [26, 33, 34, 55], active probing [28], or something
else entirely. At the same time, the approach also suggests
a promising way forward for tools aiming to circumvent net-
work censors.
Format-Transforming Encryption. The foundation of
our approach is a new cryptographic primitive called format-
transforming encryption (FTE). It allows the user to input a
regex of their choosing and output ciphertexts that are guar-
anteed to match it. This gives FTE a built-in mechanism
for forcing misidentiﬁcation by regex-based DPI. It will ad-
ditionally achieve more traditional privacy and authenticity
goals.
We consider a variety of methods to specify the regular
expressions that are input to the FTE scheme. In those sce-
narios where we know which DPI systems are being used,
the simplest method is lifting them directly from systems
themselves, or manually creating them using knowledge of
RFCs and the DPI code. When we do not have informa-
tion about the DPI system, we provide a simple procedure
for learning regexes from network traces of the application-
protocols that we wish our traﬃc to match.
Under the hood, our FTE scheme relies heavily on well-
known algorithms for ranking strings in a given regular lan-
guage [17]. The algorithms were previously suggested for use
in the related context of format-preserving encryption [5],
however, as far as we are aware, our work gives the ﬁrst im-
plementation and performance analysis of the algorithms.
To realize a working FTE proxy system capable of tunnel-
ing arbitrary network traﬃc, we specify and implement a
full, FTE-powered record layer. By this we mean that we
build, around the FTE core, logic to manage buﬀering and
fragmentation of incoming plaintext streams on the sender’s
side, and ciphertext stream buﬀering, parsing and fragment
reassembly on the receiver’s side.
We use this FTE proxy system to explore the resistance
of six state-of-the-art DPI systems to protocol misclassiﬁ-
cation attacks. We show that even expensive, proprietary
systems can be forced to mistakenly identify FTE-protected
traﬃc as any of a number of target protocols chosen by
the user, including HTTP, SMB, and SSH. We stress that
our approach works no matter what the underlying FTE-
encapsulated application-layer protocol actually is. To the
best of our knowledge, this is the ﬁrst comprehensive anal-
ysis exposing how ineﬀectual modern DPI systems can be
rendered.
One immediate implication is that our proxy system pro-
vides a ready-made mechanism for circumventing actual, de-
ployed DPI tools. When used to surf the web, FTE imposes
as little as 16% bandwidth overhead and no latency overhead
compared to conventional encryption of traﬃc. By compar-
ison, FTE is both more ﬂexible and eﬃcient than existing
circumvention tools that also attempt to prevent proper pro-
tocol identiﬁcation [20, 30, 52] As a practical matter, our
FTE system works as a drop-in pluggable transport [42] for
Tor, and we are working to include FTE in the oﬃcial Tor
Browser Bundle. Furthermore, the FTE library source code
has been released under the GNU General Public License,
and is available on GitHub1. Initial tests from servers within
the Great Firewall of China (GFC) using an FTE-powered
Tor Browser Bundle have been successful, and enabled us to
browse a variety of censored websites.
2. MODERN DPI SYSTEMS
In our evaluation, we focus on port-independent protocol
identiﬁcation as used by six modern DPI systems. These
systems span a wide range of complexity, cost, and expected
1https://github.com/redjack/FTE
System
DPI
Type
Multi-stage
Pipeline
Classiﬁer Complexity
HTTP SSH SMB
appid
l7-ﬁlter
YAF
regex-only
regex-only
regex-only
bro
nProbe
DPI-X
hybrid
hybrid
?





?
DFA States
15
55
29
8
8
10
104
6
5
Lines of C/C++ Code
1593
1188
807
30
89
24
?
?
?
Figure 1: Summary of evaluated DPI systems. Type
indicates the kind of DPI engine used. Multi-stage
pipelines chain together several passes over packet
contents. Classiﬁer complexity is the number of DFA
states used for regular expressions or total lines non-
whitespace/non-comment C/C++ code.
deployment environments. Here, we discuss details of the
systems we evaluate, and present a summary in Figure 1.
Unless otherwise mentioned, our discussion and later evalu-
ations will use default conﬁgurations.
appid. The appid [3] library uses port-based pre-ﬁltering
to determine a set of protocol-identifying regexes, against
which each TCP stream should be evaluated.
It applies
each regular expression in the set against the stream, and
returns the ﬁrst match as the protocol label. A match is
attempted for bi-directional (i.e., client-server and server-
client) streams. In our evaluation we used the latest avail-
able version of appid (as of April 2013), and instantiated it
via its included Python module.
L7-ﬁlter. The l7-ﬁlter [10] software also performs regex-
only matching. However, it diﬀers from appid in that it does
not pre-ﬁlter based on port numbers. Moreover, l7-ﬁlter spec-
iﬁes only regexes to identify uni-directional server-to-client
streams. In our evaluation we used version 2009-05-28 of the
l7-ﬁlter userspace classiﬁcation engine, and invoked it with its
included test suite.
Yet Another Flowmeter. YAF [24] is a network moni-
tor that performs application labeling. The YAF protocol-
classiﬁcation engine is predominantly regex-only, although
in a few cases (e.g., the classiﬁcation of TLS) it employs
C-based logic. We classify YAF as regex-only because the
majority of protocols are classiﬁed using a regex-only strat-
egy. Additionally, for some protocols, YAF performs its regex
analysis in two stages; HTTP is one example. A ﬁrst-pass
match for HTTP (caused, say, by matching the string HTTP/)
triggers a second-pass to extract message contents, such as
the User-Agent ﬁeld of the HTTP request. In our evalua-
tion we used the latest stable version of YAF (2.3.3, January
2013) compiled with application identiﬁcation support.
bro’s [35] Dynamic
Bro Network Security Monitor.
Protocol Detection (DPD) is implemented as a set of regexes
and associated C/C++ based parsers, where a parser is trig-
gered in the event that its partnering regular expression(s)
match the input stream. The parser is used to extract ad-
ditional information from the stream, when possible, and to
determine when the regular expression match was actually
a false positive. In its default conﬁguration, bro parses in-
dividual messages and extracts per-message attributes, such
as the URI of an HTTP request, or the version number of
the SSH protocol being used.
In our evaluation, we used
the latest, stable version (2.1, Aug. 2012) of bro, and ex-
tracted the assigned stream label from the service ﬁeld of
the conn.log ﬁle.
For classiﬁcation of SMB streams, which is not supported
in version 2.1, we used an alpha-release SMB parser available
in the bro git repository. We bootstrapped this parser into an
SMB-classiﬁer by labeling a ﬂow as SMB only if the parser
did not encounter parse errors, which is consistent with the
strategy of other classiﬁers present in bro.
nProbe Pro. nProbe [12] is an open-source network moni-
toring utility that costs e299.95 for commercial use. nProbe
includes the ability to identify the encapsulated data within
a protocol. As an example, it can identify a web request
to YouTube or FaceBook. This means that nProbe can re-
assemble TCP streams, identify the contents of a ﬂow, and
then parse individual message within a ﬂow. nProbe uses
hard-coded C-based logic, for the sake of eﬃciency, to iden-
tify attributes that could be captured by a regular expres-
sion. As an example, for HTTP it searches for a ﬁnite list of
values (i.e. GET, POST, HTTP, etc.), in order to identify
an HTTP stream. When such a match occurs, a C-based
second-pass parser is triggered. In our evaluation we used
version 6.9.5 of nProbe Pro, and the NetFlow output value
%L7_PROTO_NAME to determine nProbe’s stream label.
DPI-X. We obtained access to an enterprise-grade secu-
rity gateway device sold by a well-known network equip-
ment manufacturer. The DPI capabilities of this device,
as advertised, enable classifying over 900 applications and
protocols, including nested and tunneled applications (e.g.,
Facebook over HTTP). We disclosed our results to the equip-
ment manufacturer, but did not receive approval to release
details about the device. Hence, we refer to this system as
DPI-X. This device belongs to a class of commercial systems,
ranging from lower-end systems capable of handling a max-
imum throughput of 90 Mbps ($600), up to carrier-grade
products capable of 100 Gbps (over $25,000). The system
used in our testing has a maximum throughput of 1.5 Gbps
and a cost of $8,000. We believe DPI-X is representative of
the DPI products employed in many enterprise and carrier
networks. In fact, the maker of this product has been iden-
tiﬁed as one of the suppliers of censorship equipment for
Iran [36].
Threat model. A primary goal in this work is to experi-
mentally ascertain the extent to which these representative
DPI systems are vulnerable to protocol-misidentiﬁcation at-
tacks. (We will use misidentiﬁcation and misclassiﬁcation
interchangeably.) To deﬁne this term, consider a setting
in which a DPI system monitors all connections travers-
ing a network. Two parties want to communicate via an
application-layer protocol that uses connection(s) travers-
ing the DPI-protected network. We will refer to these two
parties as the “attacker” to emphasize that the DPI faces
adversarially generated traﬃc. In a white-box DPI attack,
the attacker knows the DPI classiﬁcation algorithms that are
used, while in a black-box DPI setting the attacker does not.
The latter may be because the particular DPI being used is
not known (even if the set of possible DPIs is known), or
simply because the algorithms are proprietary.
We call the application-layer protocol used for communi-
In a misidentiﬁcation at-
cating data the source protocol.
tack, the attacker’s goal is to have its connections, which
use the source protocol, be (mis)identiﬁed by the DPI as
a target protocol of the attacker’s choosing. An example
would be to have SSH as the source protocol, and HTTP
as the target protocol. In a successful attack, the DPI will
incorrectly label the actual (encrypted) SSH connections as