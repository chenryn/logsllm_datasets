a
dep
b
b
b) Actions: A and B’s actions are the publication of
transactions in any ΓMH (·,·) subgame.
A can only redeem MH-Dep and only if she has prea
(shared = 1), hence has a single transaction of interest txdep
a ,
tokens. Note txdep
a has to outbid unrelated
offering fee of f
dep
a > f, however, can-
transactions and thus has to offer a fee f
dep
a  f and revealing preb. However, prea is not
published, so miners cannot redeem MH-Dep and MH-Col
themselves. Therefore, miners maximize their utility by in-
cluding txdep+col
in the last round.
in the last.
dep+col
b
dep+col
b
a
b
b
b
That means txdep+col
get 0 and vdep + vcol − f
b
is included in a block, and A and B
tokens, respectively.
dep+col
b
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
1238
b
if
We now present three lemmas, considering potential de-
viations from the prescribed strategy, and showing that any
such deviation is strictly dominated. We provide the gist of
the proofs, with the details deferred to Appendix A.
We ﬁrst show that if A and B contend then the miners do
not take their transactions in the last round.
Lemma 4.
sub-
game ΓMH (T,·),
are
published then miners’ best-response strategy is not to include
any of A’s or B’s transactions in this round.
round of
and either txdep
b
In the last
txdep
a
i.e.
or txdep+col
the game,
This holds because in the described scenario any miner can
simply redeem all the tokens herself. Then we show A’s cannot
deviate to increase her utility.
Lemma 5. In ΓMH (1, red), A cannot increase her utility by
deviating from the prescribed strategy.
This holds as publishing at the last round or not publishing
at all results with A not getting any tokens. Similarly, we
claim B does not gain from deviating.
Lemma 6. In ΓMH (1, red), B cannot increase his utility by
deviating from the prescribed strategy.
Intuitively, if B publishes when A also does then B loses
all the tokens, whilst refraining from doing so earns him the
collateral.
Following directly from Lemma 5 and Lemma 6), we
obtain:
Corollary 1. The prescribed strategy of MAD-HTLC is a
unique subgame perfect equilibrium, and as such, incentive
compatible.
We are now ready to prove our main theorem:
Theorem 1. MAD-HTLC satisﬁes HTLC-Spec with rational
PPT participants.
Proof. Lemma 1 shows the possible redeeming transactions
for PPT participants, disregarding invalidity due to timeouts
and transaction conﬂicts. Consequently, the game description
considering the timeouts and conﬂicts (§V-B) captures the
possible redeeming transactions of PPT participants.
The game analysis (Corollary 1) shows the prescribed
strategy (Protocol 1) is incentive compatible, and Lemma 2
and Lemma 3 show the prescribed strategy matches HTLC-
Spec. Note that matching HTLC-Spec, Protocol 1 states the
redeeming transaction fee should be negligibly larger than f,
and is independent of vdep.
Myopic Miners: MAD-HTLC’s design deters B from
bribe attempts as he knows rational non-myopic miners will
seize his funds if he acts dishonestly.
However, even in the presence of unsophisticated, myopic
miners, MAD-HTLC still satisﬁes HTLC-Spec. The common
transaction selection logic [116]–[119] as of today has miners
myopically optimize for the next block. Since B’s transaction
can only be conﬁrmed in the last round, these miners will
simply include A’s transaction, achieving the desired outcome.
Table III: Bitcoin contract and redeeming transaction sizes.
Contract
HTLC
Redeeming tx [bytes]
Redeem path
Size [bytes]
99
htlc-A
htlc-B
dep-A
dep-B
dep-M
col-B
col-M
291
259
323
322
282
248
241
MH-Dep
MH-Col
129
88
Only miners that are sophisticated enough to be non-myopic
but not sophisticated enough to take advantage of the dep-M
path would cooperate with the attack. But even in the presence
of such miners, it is sufﬁcient for one miner (or user) to take
advantage of the dep-M path during the T rounds in order to
thwart the attack.
VI. MAD-HTLC IMPLEMENTATION
We demonstrate the efﬁcacy of MAD-HTLC by evaluating
it in Bitcoin and Ethereum. We discuss the deployment of
MAD-HTLC and its overhead (§VI-A), and our implemen-
tation of a framework for implementing MEV infrastruc-
ture [37]–[39] on Bitcoin (§VI-B), used to facilitate MAD-
HTLC guarantees.
A. Contract Implementation, Overhead and Deployment
We
implement MH-Dep
in Bitcoin’s
Script [35] and Ethereum’s Solidity [36], [42] smart contract
languages. We also implement a version of the standard HTLC
for reference. We bring the code in Appendix B.
and MH-Col
We brieﬂy discuss these implementations, show their
transaction-fee overhead is negligible compared to the secured
amounts, and present main network deployments.
Bitcoin implementation: Bitcoin’s transaction fees are
determined by the transaction sizes. Our contracts use
P2SH [120] (non SegWit [121]) addresses, so the initiating
transactions contain only the hashes of the scripts, and each
contract initiation within a transaction requires 28 bytes. The
redeeming transactions provide the full predicate script along
with its inputs. Table III presents the script and redeeming
transaction sizes of HTLC, MH-Dep and MH-Col.
A transaction redeeming MH-Dep is about 50 bytes larger