title:Bureaucratic protocols for secure two-party sorting, selection, and
permuting
author:Guan Wang and
Tongbo Luo and
Michael T. Goodrich and
Wenliang Du and
Zutao Zhu
Bureaucratic Protocols for Secure Two-Party Sorting,
Selection, and Permuting
Guan Wang
Syracuse University
Syracuse, NY, USA 13244
PI:EMAIL
Tongbo Luo
Syracuse University
Syracuse, NY, USA 13244
PI:EMAIL
Michael T. Goodrich
University of California, Irvine
Irvine, CA, USA 92697
PI:EMAIL
Wenliang Du
Syracuse University
Syracuse, NY, USA 13244
PI:EMAIL
Zutao Zhu
Syracuse University
Syracuse, NY, USA 13244
PI:EMAIL
ABSTRACT
In this paper, we introduce a framework for secure two-party
(S2P) computations, which we call bureaucratic comput-
ing, and we demonstrate its eﬃciency by designing prac-
tical S2P computations for sorting, selection, and random
permutation. In a nutshell, the main idea behind bureau-
cratic computing is to design data-oblivious algorithms that
push all knowledge and inﬂuence of input values down to
small black-box circuits, which are simulated using Yao’s
garbled paradigm. The practical beneﬁt of this approach
is that it maintains the zero-knowledge features of secure
two-party computations while avoiding the signiﬁcant com-
putational overheads that come from trying to apply Yao’s
garbled paradigm to anything other than simple two-input
functions. 1
Categories and Subject Descriptors
K.6 [Management of Computing and Information Sys-
tems]: Miscellaneous
General Terms
Algorithms, Security
Keywords
Secure two-party computation, sorting, oblivious algorithms,
bureaucratic protocols
1.
INTRODUCTION
1This work has partially supported by Awards No. 0430252
and 0618680 from the United States National Science Foun-
dation.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’10 April 13–16, 2010, Beijing, China.
Copyright 2010 ACM 978-1-60558-936-7/10/04 ...$10.00.
1
As people become more and more concerned about their
privacy, privacy-preserving techniques have been receiving
increasing attention in the research community, with secure
two-party (S2P) computations being one of the primary so-
lutions that have been studied to address this concern. S2P
computations allow two parties, say Alice and Bob, to evalu-
ate a public known function, f (X, Y ), on private data, with
X belonging to Alice and Y belonging to Bob, without dis-
closing any information on their inputs other than what can
be inferred from the result, f (X, Y ) [14, 30].
One of the most theoretically elegant and general tech-
niques for achieving S2P computations is Yao’s garbled cir-
cuit paradigm [30]. In using this paradigm, Alice and Bob
compile f (X, Y ) into a Boolean circuit, which they then
cooperatively evaluate using cryptographically masked ver-
sions of their respective inputs, X and Y . The generality
of this technique is derived from the fact it can be applied
to any function that can be converted into a Boolean cir-
cuit, which implies that it works for any function that can
be computed by an algorithm2.
Bringing Yao’s garbled circuit paradigm out of the realm
of theoretical computer science, the Fairplay system [25] is
a beautiful software system that implements Yao’s garbled
circuit paradigm to compile Boolean circuits from program
speciﬁcations and then simulate the resulting circuits us-
ing cryptographic masking of the inputs shared by the two
parties. Unfortunately, as the popularity of the Fairplay
system is growing, people are discovering that Yao’s garbled
circuit approach incurs major computational costs for any-
thing other than basic functions, like MIN, MAX, ADD, and
compare-exchange. Thus, the practical usefulness of Yao’s
garbled circuit paradigm, and, hence, the Fairplay system,
is diminished for more complex computations. For exam-
ple, using the Fairplay system’s implementation of Yao’s
garbled circuit paradigm, we can turn Quicksort into a cir-
cuit, and achieve sorting of an array between Alice and Bob,
where each array element si is shared by Alice and Bob (e.g.,
si = ai ⊕ bi, where ai is known to Alice and bi is known to
Bob). We know that Quicksort has an O(n log n) average-
case complexity, and is considered as one of the most eﬃcient
sorting algorithms. Nevertheless, we have observed that the
running time of Quicksort is Θ(n2) if it is implemented using
2Recall that the formal deﬁnition of an algorithm states that
it must terminate on every possible input.
a garbled circuit for S2P with Fairplay. This performance,
of course, completely negates the eﬃciency of using Quick-
sort. Even the simple Bubblesort can achieve Θ(n2) in the
S2P environment. Moreover, such examples are more than
just academic exercises, since sorting plays a role in several
S2P protocols.
1.1 The Beneﬁt of Bureaucracy
To help understand better what causes an eﬃcient algo-
rithm in the non-S2P environment to become ineﬃcient in
the S2P environment, let us consider the following two sim-
ple algorithms. Both algorithms calculate the number of
ones in the ﬁrst n positions in a binary sequence, S, which
we assume are indexed from 1 to n:
CountOne_1(S,n):
if (n == 1) then
return S[1]
else
i = n
if (S[i] == 1) then
return 1 + CountOne_1(S,n-1)
else
return CountOne_1(S,n-1)
end_if
end_if
CountOne_2(S,n):
countOne = 0
for i = 1 to n do
countOne = S[i] + countOne
end_for
return countOne
Note that both algorithms have running times that are
O(n), and that CountOne_1 has the added beneﬁt that the
number of additions it performs will on average be half the
number done by CountOne_2. Therefore, these algorithms
might seem to be equal candidates for conversion to an S2P
environment, with CountOne_1 likely to be somewhat faster
than CountOne_2 in practice (since it uses tail recursion and
makes half as many calls on average to an addition circuit),
but this is not the case.
In a typical S2P environment, the array S is shared by
two parties, Alice and Bob, with each bit of the array being
the exclusive-or of two bits a and b, where a is known to
Alice and b is known to Bob. Alice and Bob want to ﬁnd
out the number of ones in the array S without letting the
other know the actual contents of S. Using Yao’s garbled
circuit paradigm, we can easily turn the above algorithms
into S2P protocols. However, the running time of the resul-
tant protocols will be quite diﬀerent.
For the ﬁrst algorithm, the outcome of the second if-else
(and the fact that one of its branches performs an addi-
tion and the other doesn’t) cannot be disclosed to anybody
during the computation; otherwise, that party will know
the value of S[i], which is considered as private informa-
tion disclosure in typical S2P computation circumstance be-
cause no party is supposed to know any real value in array
S. To disguised the outcome of the if-condition, there-
fore, the circuit has to execute both branches of the second
if-else. Unfortunately, this increases the complexity of the
algorithm from Θ(n) to Θ(2n), since it requires the dupli-
cation of the circuit that counts the number of ones in the
ﬁrst n − 1 positions of S. That is, compiling CountOne_1
for S2P converts an eﬃcient linear-time computation into
an exponential-sized circuit that Alice and Bob must then
painfully evaluate using masked versions of their respective
data values. The second algorithm does not have the prob-
lem, however, since it has no conditions that depend on any
values of S, so the complexity of the resulting circuit is O(n).
The dramatic diﬀerence in complexity between the S2P
versions of these two algorithms is caused by the fact that
the second algorithm is data-oblivious, while the ﬁrst one
is not. Recall that an algorithm is data-oblivious [21] if
the control ﬂow of the algorithm does not depend on any
data values.
In the case of CountOne_2, the only part of
the algorithm that needs to “know” the actual values of S is
the low-level summation operator. The higher-level portions
of the algorithm needs not “know” anything about the low-
level summation operations other than the fact that they
are performing their respective tasks correctly.
In addition to being a graphic demonstration of the ineﬃ-
ciencies that can come from wholesale applications of Yao’s
garbled circuit paradigm, the above example also serves as a
motivation for an alternative approach to S2P computations,
which we call bureaucratic computing. In the bureaucratic
approach, all the high-level steps of an algorithm to evalu-
ate the function, f (X, Y ), of interest to Alice and Bob, are
done in a data-oblivious way; that is, the high-level steps
are non-adaptive with respect to the data values, X and Y .
All the low-level computations that depend on the data val-
ues are isolated to simple “black-box” functions, like SUM,
MIN, MAX, compare-exchange, etc., which can be eﬃciently
simulated in a zero-knowledge fashion using Yao’s garbled
circuit technique. In simulating a bureaucratic algorithm in
the S2P framework, Alice and Bob collectively perform each
high-level step using their cryptographically masked vari-
ables, and they only engage in the simulations of Boolean
circuits for the low-level steps that involve their inputs being
“fed” into one of the low-level black-box functions.
1.2 Our Results and Contributions
In this paper, we demonstrate the utility of the bureau-
cratic approach to S2P computations through case studies
involving three problems—sorting, random permutation and
selection (i.e., ﬁnding the kth smallest or largest element).
These problems have been extensively studied in the non-
S2P environment, and many eﬃcient algorithms for them
are taught in undergraduate computer science classes (e.g.,
see [10, 16]). However, as we have discussed, the time com-
plexities in the non-S2P environment and in the S2P envi-
ronment are not necessarily the same. To the best of our
knowledge, there has been little previous attention to meth-
ods for developing practical algorithms for these problems
in the S2P environment, for which we are advocating the
bureaucratic approach in this paper.
Speciﬁcally, we study two bureaucratic algorithms for sort-
ing from the perspective of S2P computations: one algo-
rithm leverages research from sorting networks and the other
uses a randomized-algorithms approach. Both algorithms
use compare-exchange as a low-level primitive, with all other
(high-level) steps being done in a data-oblivious manner. In-
cidentally, previous studies of sorting networks were moti-
vated by a totally diﬀerent reason (hardware design), but
we ﬁnd out that the results of sorting networks are nev-
ertheless applicable to our problem, since they give rise to
2
eﬃcient bureaucratic algorithms. Using existing results on
sorting networks, we can achieve an O(n log2 n) time com-
plexity for S2P sorting, with a constant factor that is only
0.25. We also study another interesting algorithm that low-
ers the time complexity to O(n log n), with a constant 5.
This algorithm is also data-oblivious, but it is probabilistic,
guaranteeing with very high probability that its ﬁnal result
is sorted. As we show, this algorithm also leads to eﬃcient
S2P implementations.
Building upon these bureaucratic S2P sorting algorithms,
we propose some immediate applications:
in particular, to
selection algorithms and random permutation algorithms for
the S2P environment.
The contribution of this paper is two-fold: (1) We have
developed a new paradigm, called bureaucratic computing,
for solving S2P computation problems. (2) We have devel-
oped eﬃcient algorithms for conducting sorting, selection,
and random permuting in the secure two-party computation
environment.
2. BUREAUCRATIC COMPUTING
2.1 The Framework
A standard S2P computation involves two parties, each
having his/her own secret inputs. Without loss of generality,
we assume that each party’s input is an array. These two
participants want to run a protocol to evaluate a function
(e.g. vector dot product) or run an algorithm (e.g. sorting)
on their joint inputs. At the end of the protocol, neither
party can learn anything other than what can be derived
from the results and their own private inputs.
As we have pointed out in Section 1, although a whole-
sale application of Yao’s garbled circuit paradigm can solve
general S2P computation problems theoretically, the resul-
tant protocols might not be practically applicable, even if
the Yao’s circuit is built upon an algorithm that is optimal
in the non-S2P environment.
We propose a new paradigm, called bureaucratic comput-
ing. It consists of two levels of computations. The low-level
computations depend on the data values from both parties.
The computations must be oblivious, in the sense that no
participant should be able to infer anything about the in-
termediate results of the computation or other party’s data.
We can use Yao’s garbled circuit technique to build S2P cir-
cuits for these low-level computations. We call these circuits
components in this paper.
The high-level computations in our bureaucratic comput-
ing paradigm consists of the procedures (or algorithms) of
how to invoke the low-level components. These computa-
tions must be data oblivious, meaning that the algorithms
are non-adaptive with respect to the data values; namely,
regardless of what the results of the low-level computations
are, the behavior of the high-level computations stays the
same. This data-oblivious property is very important; oth-
erwise, a participant can infer the other party’s private in-
puts from the observable behavior of the algorithms. Data-
obliviousness guarantees that the behavior of an algorithm
is independent from its inputs.
2.2 Low-Level Components
Low-level components serves as building blocks to S2P
computations.
In our bureaucratic computing paradigm,
these components should be oblivious; more speciﬁcally, they
should have the following properties: ﬁrst, outputs of the
components cannot be revealed to any participant. Because
the outputs of the low-level components are usually interme-
diate results, not the ﬁnal results, S2P computations do not
allow them to be disclosed (recall that in S2P, participants
can only learn whatever can be derived from the ﬁnal results
and their own private inputs, and nothing else). Second, the
inputs of the low-level component might be intermediate re-
sults from other components; because of the way how the
other components’ outputs are protected, nobody (Alice or
Bob) knows the actual inputs.
Therefore, when building Yao’s garbled circuit for low-
level computation components, we adopt the circuit layout
depicted in Figure 1.
O1,B
O1,A
O2,B
O2,A
Om,B
Om,A
O1
O2
Om
Secure 2−Party Computation
I1
I2
I1,A
I2,A
I1,B
I2,B
In
In,A
In,B
Ok = Ok,A ⊕ Ok,B
Ik = Ik,A ⊕ Ik,B
Figure 1: Circuit Layout
Outputs: To protect intermediate results in Yao’s garbled
circuit, all intermediate results are distributed to Alice and
Bob using a secret sharing scheme, i.e., the actual output
is split into two pieces, each going to one party. Nobody
can derive any useful information about the secret outputs
based on their own share alone; they need to put both pieces
together to reveal the actual secrets. Since in S2P computa-
tion, we only have two participants, we use a simple secret
sharing method, exclusive-or (xor). Namely, each secret r
is split into two random pieces a and b, such that r = a ⊕ b,
where a is disclosed to Alice and b is disclosed to Bob.
Therefore, each output pin of our circuit (we may have
many output pins depending on the actual computations)
consists of two outputs, one goes to Alice and the other goes
to Bob. This way, nobody knows the actual output of this
circuit. If this circuit is the last step of the entire algorithm
or function, Alice and Bob can disclose their secret shares to
each other to obtain the ﬁnal results. They cannot do so if
the output is not the ﬁnal results, due to privacy concerns.