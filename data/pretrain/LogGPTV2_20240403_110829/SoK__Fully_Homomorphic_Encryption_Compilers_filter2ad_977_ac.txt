Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:21 UTC from IEEE Xplore.  Restrictions apply. 
1096
considered viable candidates (i.e., BFV, BGV, CKKS, or
GSW-based constructions) and consider only the latest version
of each tool, including “spiritual successors” where they exist.
We also consider only unique implementations, i.e., we do
not list wrappers or ports of existing tools. FHE techniques
are used internally in several MPC protocols, and there are
a variety of tools that speciﬁcally target hybrid protocols
combining FHE and MPC [43]. However, for this survey, we
consider only tools that support using purely FHE, requiring
no interaction during the computation itself.
We focus on three design aspects: (i) settings and con-
ﬁgurations, e.g., which input languages or schemes a tool
supports; (ii) features and optimizations, e.g., support for
batching or automated parameter selection; (iii) accessibility,
e.g., documentation and examples.
In our experimental evaluation, we consider a selection of
tools in more detail. Through using the tools to implement
different case study applications, we can provide an in-depth
analysis of their usability and expressiveness in practice. In
addition, our benchmarks allow us to study not only the
overall performance of FHE for these applications but also
the relative strengths of different tools compared to each other.
We select three applications that represent different domains of
FHE-based computation. Our ﬁrst application is a risk score
calculation that requires comparisons and, therefore, binary
circuit emulation. Second, we consider a statistical χ2-test, in
a formulation that simpliﬁes it to polynomial functions over
integers. Finally, we consider machine learning, speciﬁcally
neural network inference, for a range of network architectures.
We evaluate these applications across the different tools and
report on usability, expressiveness, and performance.
V. FHE LIBRARIES
FHE libraries implement the underlying cryptographic oper-
ations of an FHE scheme and expose a higher-level API. They
minimally provide key generation, encryption, decryption, ho-
momorphic addition, and multiplication interfaces. In practice,
however,
library APIs often include dozens of additional
functionalities for ciphertext maintenance and manipulation.
Using these libraries generally requires a deep understand-
ing of the underlying scheme and its supported operations.
While many libraries include powerful advanced features that
can signiﬁcantly improve performance, developers must em-
ploy them manually while ensuring correctness and efﬁciency.
In Table I, we present an overview of FHE libraries and
list supported languages, schemes, features, and accessibility
aspects. We group schemes into families of related schemes
for conciseness and consider support for bootstrapping and
leveled-FHE. For accessibility, we consider whether an im-
plementation (Code) is available, whether examples (Ex.)
describe usage ( ) or usage can be inferred from, e.g., tests
(G#), and whether or not API documentation (Doc.) is available.
Finally, we give a rough indication of age and activity by
giving the date of the last release or major update.
Due to space constraints, we present only a small subset in
more detail. We start by discussing HElib, SEAL, and Palisade,
which appear to be the most active and widely supported
libraries. We also discuss TFHE here since it is used by some
of the compilers we evaluate. Finally, we discuss performance
differences and brieﬂy discuss the remaining libraries.
A. HElib
The Homomorphic Encryption Library (HElib), presented in
2013 by Halevi and Shoup, was the ﬁrst FHE library [48]. The
library is implemented in C++ and uses the NTL library [61]
for the underlying mathematical operations. While it initially
only implemented the BGV scheme, more recent releases of
this library also support the CKKS scheme. The library offers
leveled FHE operations and, for BFV, also supports bootstrap-
ping [62]. The source code is available under the Apache
License v2.0, and includes extensive examples. In addition
to the standard documentation, several reports describing the
design and algorithms of HElib [56], [62], [63] are available.
B. PALISADE
PALISADE, ﬁrst released in 2014, is developed primarily
by NJIT and Duality Technologies [58]. It is implemented in
C++ and optionally uses the NTL library [61] to accelerate
underlying mathematical operations. PALISADE supports a
wide range of schemes, including BFV, BGV, CKKS, and
CGGI. In addition, it supports multi-party extensions of certain
schemes and other cryptographic primitives like proxy re-
encryption and digital signatures. The library offers both
leveled and bootstrapped operations, where supported by the
scheme. PALISADE’s source code is available under a BSD
2-clause license and includes examples and documentation.
C. SEAL
The Simple Encrypted Arithmetic Library (SEAL), ﬁrst
released in 2015, is developed by Microsoft Research [20].
It is implemented in C++, with an ofﬁcial wrapper for .NET
languages (e.g., C#). SEAL is thread-safe and heavily multi-
threaded itself. It implements the BFV and CKKS schemes,
with a majority of the API being common to both. SEAL
offers leveled FHE operations and does not implement boot-
strapping for either scheme. Earlier versions of SEAL included
automated parameter selection based on estimating the noise
growth [64]. Since the estimated parameters were frequently
non-competitive, this feature was removed. However, SEAL
still ensures that the chosen parameters offer 128-bit security.
The source code is available under an MIT license, is well
documented, and includes a wide range of examples for both
schemes. In addition, there are several demo applications (e.g.,
AsureRun [13]) that demonstrate more complex use cases.
D. TFHE
The Fast Fully Homomorphic Encryption Library over the
Torus (TFHE) was proposed in 2016 by Chillotti et al. [38]
and can be considered the successor of the FHEW library [54].
It is implemented in C++ and supports a variety of different
libraries for underlying FFT operations. TFHE is based on
the CGGI scheme and offers gate-by-gate bootstrapping with
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:21 UTC from IEEE Xplore.  Restrictions apply. 
1097
Name
Input Lang.
Supported Schemes
Features
Accessibility
BFV CKKS GSW Bootstrapp. Levels Code Ex. Doc.
Last Major
Update
Rust
C++
C++
C++
C++
Go
concrete ([53])
FHEW ([54])
FV-NFLlib ([55])
HEAAN ([36])
HElib ([56])
lattigo ([57])
PALISADE ([58]) C++
SEAL ([20])
TFHE ([21])
C++, .NET
C++
cuFHE ([59])
nuFHE ([60])
C++, Python
C++, Python
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
G#
#
G#
G#
G#
#
#
#
#
#
11/2020
05/2017
07/2016
09/2018
12/2020
12/2020
04/2020
08/2020
05/2017
08/2018
07/2019
Table I: Overview of existing FHE CPU-targeting (top) and GPU-targeting (bottom) libraries. Note that similar schemes are
summarized into categories, e.g., BFV/BGV as BFV and CGGI/TFHE/FHEW as GSW.
signiﬁcantly reduced bootstrapping times, resulting in times
of less than 0.1 sec compared to 6 min for bootstrapping
in the HElib library. TFHE implements a variety of logic
gates like OR, NOR, MUX that are generally implemented
more efﬁciently than naive constructions from XOR and AND
would be. However, the library provides no assistance with
building more complex logic circuits like efﬁcient comparators
and adders. TFHE’s source code is available under the Apache
License v2.0 and includes examples and documentation.
E. Other Libraries
In addition to the libraries we discussed above, we consid-
ered a large variety of other libraries [36], [53]–[55], [57]. We
also conducted a series of microbenchmarks to compare how
different implementations of the same scheme perform. How-
ever, due to space considerations we refer to our accompanying
online repository for details. Finally, GPU-based libraries like
cuFHE [59] and nuFHE [60] can offer signiﬁcant speedups,
improving the already fast TFHE bootstrapping times by
around two orders of magnitude. However, as GPUs remain
considerably more expensive and less common in enterprise
datacenters, these speedups must be considered in context.
VI. FHE COMPILERS
This section provides an overview of existing FHE compil-
ers, i.e., tools that provide a high-level abstraction to develop
FHE-based applications, so developers do not have to deal
directly with homomorphic operations on ciphertexts. These
tools generally manage key setup, encryption, decryption, and
ciphertexts maintenance operations in the background. The
term compiler is used loosely in the context of FHE, as some
function more like interpreters or libraries to link against.
In Table II, we provide an overview of the various FHE
compilers and their properties. FHE compilers can roughly
be divided into generic tools for general purpose use and
tools that target speciﬁc applications. In the latter category,
we see compilers targeted at building Machine Learning (ML)
applications. In addition to supported schemes, which we again
group for conciseness, we also consider the plaintext spaces
supported by the tool. Even when the underlying scheme and
implementation support different plaintext spaces, compilers
generally only target binary or arithmetic plaintext spaces.
We consider a wide range of features and generally differ-
entiate between three states indicating full support ( ), partial
support (G#), or no support (#). For SIMD-Batching (SIMD),
we differentiate between tools that merely enable batching
and those that actively assist
in working with vectorized
data. Similarly, we differentiate between manual, partially
assisted, and fully automated parameter selection (Params.).
While all tools include some form of automated ciphertext
maintenance operations (Ctxt. Mnt.), we segment tools into
those that use naive heuristics and those using more advanced
strategies. Additionally, we note whether or not tools try to
reduce the multiplicative depth (× Depth) of the circuits they
generate. For accessibility, we consider the same metrics as for
libraries, i.e., whether an implementation (Code) is available,
whether examples (Ex.) describe usage, and whether or not
API documentation (Doc.) is available. Similarly, we again
give a rough indication of age and activity by giving the date
of the last release or major update. Where no source code is
available to us, we have to omit these metrics (“–”).
Finally, Table III associates compilers with the libraries they
use. Here we can see SEAL being targeted by a signiﬁcantly
larger number of compilers than any other library.
In the following, we introduce each compiler in more detail.
A. ALCHEMY
A Language and Compiler for Homomorphic Encryption
Made easY (ALCHEMY) was proposed by Crockett et al. in
2017 [69]. Input programs are speciﬁed in a special Domain-
Speciﬁc Language (DSL) implemented in Haskell and exe-
cuted as arithmetic circuits using a custom BGV implementa-
tion using the Λ◦λ lattice crypto library [52]. While it supports
SIMD batching, it does not offer an encoding/decoding API,
making it difﬁcult to use. ALCHEMY automatically selects
suitable parameters by statically tracking the upper bound
of the ciphertext error but requires user-supplied modulus
candidates. However, this approach, based on type-level arith-
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:21 UTC from IEEE Xplore.  Restrictions apply. 
1098
Name
Input
Lang.
Schemes
BFV CKKS GSW
ALCHEMY ([49]) Haskell
Cingulata ([51])
E3 ([65])
EVA ([17])
Marble ([50])
RAMPARTS ([66])
C++
C++
Python
C++
Julia
CHET ([67])
nGraph-HE ([24])
SEALion ([68])
C++
Python
Python
#
#
#
#
#
#
#
#
#
G#
#
#
#
#
#
#
Ptxt.
Space
Arithm.
Binary
Both
Arithm.
Both
Arithm.
Arithm.
Arithm.
Arithm.
Features & Optimizations
Accessbility
SIMD Params. Ctxt. Mnt. × Depth Code Ex. Doc.
G#
#
G#
G#
#
G#
G#
G#
#
G#
#
G#
G#