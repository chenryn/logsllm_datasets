title:Automated remote repair for mobile malware
author:Yacin Nadji and
Jonathon T. Giffin and
Patrick Traynor
Automated Remote Repair for Mobile Malware
Yacin Nadji, Jonathon Gifﬁn, and Patrick Traynor
School of Computer Science, Georgia Institute of Technology
{yacin.nadji, gifﬁn, traynor}@cc.gatech.edu
ABSTRACT
Mobile application markets currently serve as the main line
of defense against malicious applications. While market-
place revocations have successfully removed the few overtly
malicious applications installed on mobile devices, the antic-
ipated coming ﬂood of mobile malware mandates the need
for mechanisms that can respond faster than manual inter-
vention.
In this paper, we propose an infrastructure that
automatically identiﬁes and responds to malicious mobile
applications based on their network behavior. We design
and implement a prototype, Airmid, that uses cooperation
between in-network sensors and smart devices to identify
the provenance of malicious traﬃc. We then develop sam-
ple malicious mobile applications exceeding the capabilities
of malware recently discovered in the wild, demonstrate the
ease with which they can evade current detection techniques,
and then use Airmid to show a range of automated recovery
responses ranging from on-device ﬁrewalling to application
removal.
1.
INTRODUCTION
Malware infections on mobile phones have ﬂourished in
recent years. Nearly immediately after the introduction of
functionality beyond basic telephony, researchers have sug-
gested that such devices were likely targets of malicious soft-
ware [14, 24]. However, even as mobile operating systems
move towards greater sophistication and an increasing num-
ber of malicious applications have been discovered, large-
scale infection has been avoided. This relative safety can be
largely attributed to the revocation capabilities of mobile
application markets which, upon discovering or being noti-
ﬁed of the existence of a malicious program, can remove it
from both the marketplace and installed platforms.
Manually-triggered revocations have been successful be-
cause the number of malicious applications has been small.
As the rate with which new mobile malware is discovered
begins to approach that of traditional malware, estimated
by some as greater than 70,000 new samples per day [38],
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’11 Dec. 5-9, 2011, Orlando, Florida USA
Copyright 2011 ACM 978-1-4503-0672-0/11/12 ...$10.00.
such mechanisms are unlikely to be able to continue to re-
spond rapidly. Speciﬁcally, cellular providers will not be
able to rely solely upon the rapid identiﬁcation and removal
of malware by mobile market operators.
In this paper, we propose, design, and implement Airmid1,
a system for the automated detection of and response to ma-
licious software infections on handheld mobile devices. Our
architecture leverages cooperation between network moni-
tors and on-device software components. We place the main
detection component within the network so that no malware-
speciﬁc knowledge needs to be stored at every mobile device.
When the network sensor detects malicious traﬃc (which
can be done using traditional security tools including DNS
blacklists, domain ﬁrewall policies, an IDS, etc), it notiﬁes
devices sending or receiving that traﬃc via an authenticated
channel. A protected software agent on each device then
identiﬁes executing processes responsible for the malicious
traﬃc and initiates a recovery action to repair the infection:
traﬃc can be ﬁltered at the device, apps can be sandboxed
or deleted, or the device itself can be patched or restored to
its factory defaults. This system allows malware detection
and response to occur at machine speed without human in-
teraction and without burdening small handheld systems with
the computation, storage, and power consumption typical of
traditional anti-virus systems.
As in desktop malware, we expect malicious apps to in-
crease in sophistication as defensive utilities become widespread;
however, current malicious applications remain rather sim-
plistic. To facilitate testing with complex malicious apps, we
developed laboratory samples of mobile malware exhibiting
characteristics common to mature desktop-class malware.
The basic functionality of the malware reﬂects attacks al-
ready occuring in cellular devices: our apps leak private
data [39], dial premium numbers [26], and participate in
botnet activity [36]. To this we added complex evasive func-
tionality: our samples detect the presence of an emulated
environment and change their behavior, create hidden back-
ground processes, scrub logs, and restart on reboot. These
samples demonstrate that mobile device software architec-
tures permit the creation of advanced malware that can-
not be easily identiﬁed prior to distribution, underscoring
the need for rapid recovery after infection. For safety, our
malware lacks propagation ability and was tested only on a
closed network.
In summary, we make the following contributions:
1Airmid is the Celtic goddess of healing, and is known for
her ability to bring the dead back to life.
• Identiﬁcation of current remediation shortcom-
ings: While mobile application markets have thus far
successfully removed most discovered malware, we ar-
gue that such mechanisms are unlikely to remain suc-
cessful as the only mechanism given the expected in-
crease in malicious software for mobile environments.
In particular, markets do not have access to all traf-
ﬁc generated by such applications, nor the perfectly
analyze all incoming applications prior to distribution.
• Design and implementation of advanced proto-
type malware: We build three proof-of-concept mal-
ware instances based on samples collected “in the wild”.
We then demonstrate the ease with which such mal-
ware can resist static and dynamic analysis in a mar-
ket, making their pre-deployment detection unlikely
and the need for a more dynamic “kill switch” mecha-
nism.
• Cooperatively neutralize malware on infected
mobile phones: We pair a software agent running
within a hardened, modiﬁed version of the stock An-
droid Linux kernel with a network sensor running Snort.
Our network sensor initiates a range of remediation ac-
tions that successfully sanitize our advanced prototype
malware in under 10 ms. Remediation results can be
fed back to mobile markets, allowing both providers
and application vendors to more quickly protect cus-
tomers from malware.
The remainder of this paper is organized as follows: Sec-
tion 2 compares related research. Section 3 presents an
overview of the current state of mobile malware creation
and detection, and it demonstrates by example how mobile
malware can implement evasive behaviors similar to those
of desktop-class malware. Section 4 proposes our remote
repair architecture for in-network detection of malware and
automatic on-device remediation of the infection. Section 5
presents our speciﬁc prototype implementation for Android
and an evaluation of the prototype’s performance using the
evasive malware instances ﬁrst presented in Section 3. Sec-
tion 6 includes a discussion of the system, its potential ap-
plications, and its current limitations. We conclude in Sec-
tion 7.
2. RELATED WORK
Mobile malware is becoming increasingly commonplace.
While malicious software for these platforms is not new [18–
21], the migration towards a small number of mobile operat-
ing systems and the increasing power of such devices height-
ens the probability of large scale infection. Traynor et al. [41]
observed that even small numbers of compromised and co-
ordinated phones could be used to cause widespread out-
ages. A number of other authors have built advanced proof-
of-concept mobile malware capable of deciphering DTMF
tones [37] and collecting video [43]. Mobile malware in the
wild has already been found to exﬁltrate sensitive data [39],
generate calls and text messages to premium numbers [26]
and exhibit traditional botnet behaviors [36].
The industrial and research communities have responded
with a range of solutions. Numerous anti-virus products
have been ported to the most popular mobile platforms [2,9,
17, 27]. Others have proposed new platform-based detection
systems based on triggers including service thresholds [8],
low level API calls [7] and anomalous power usage pro-
ﬁles [28,30]. These device-only approaches fail for a number
of reasons, including excessive power requirements for tradi-
tional anti-virus system scanning and false positives caused
by untrained benign behavior. Tools such as TaintDroid [16]
and PiOS [15] can identify information ﬂows in applications,
but they require signiﬁcant manual assistance and do not au-
tomatically identify “malicious” behavior; rather, they iden-
tify the presence of speciﬁc information ﬂows (e.g., IMEIs
and IMSIs). Neither approach is currently scalable as a
means of analyzing all available mobile applications.
Traﬃc attribution and provenance are generally diﬃcult
problems. IP addresses are well known as weak indicators
of the origin of malicious traﬃc on the Internet. Regular
backscatter traﬃc measurements indicate wide-spread ad-
dress spooﬁng [32]. Balasubramaniyan et al. attempt to
solve a similar problem in the larger telephony space [5].
Because cellular networks maintain a cryptographic relation-
ship with each user device, attribution of a speciﬁc packet to
an individual device is possible. However, additional steps
must be taken to identify the speciﬁc process responsible
for traﬃc.
In the context of virtualized desktop systems,
Srivastava et al. [40] developed a virtual machine introspec-
tion based technique that attributes network traﬃc to an
executing process for the purpose of implementing ﬁrewall
rules. Our work uses an in-kernel approach to identify a
similar correlation between network behaviors and process
execution for the purpose of malware infection remediation.
3. MOBILE MALWARE
Malware has begun to move from desktop computing into
mobile environments. This section brieﬂy considers mobile
malware already deployed, and it then extensively presents
highly capable laboratory samples that we created to demon-
strate both the evasive technologies available to malware au-
thors on Android platforms and the utility of our proposed
remote repair design.
3.1
In the wild
By the ﬁrst quarter of 2011, over 1000 mobile malware
instances have been discovered in the wild, primarily tar-
geting the Symbian OS for feature phones [31]. Android
is the second most common target, and the most common
smartphone OS victim. Google, the producer of Android
and operator of the oﬃcial app marketplace, has exercised
its revocation ability at least three times since 2010 [3,11,12].
The malicious behaviors of Android malware include [31]:
• Privilege escalation to root (DroidDream).
• Bots (Drad.A).
• Data exﬁltration (DroidKungFu, SteamyScr.A).
• Backdoor triggered via SMS (Bgyoulu.A)
Similarly, jailbroken devices running Apple iOS experienced
a botnet in 2009 [36]. These attacks send and receive traﬃc
across data or voice channels that can be identiﬁed by a
network intrusion detection system as malicious.
Detection of mobile malware prior to its deployment is
as challenging as detection of malware on desktop systems.
Centralized app marketplaces provide an opportunity for
centralized analysis before the marketplace lists an app. Un-
fortunately, marketplaces have at least two deﬁciencies that
will enable the proliferation of malicious apps. First, mal-
ware authors can write their apps with logic to evade detec-
tion or analysis, as we show below with laboratory malware
samples. Second, the Android platform allows users to in-
stall apps from third-party marketplaces that may make no
eﬀorts to verify the safety of the software that they dis-
tribute. As a result, we naturally expect malware to suc-
cessfully reach client devices.
3.2 Enhanced prototype malware
As seen in desktop security, the success of traditional mal-
ware detection diminishes as malware incorporates strate-
gies designed to evade detection or analysis. While evasions
strengthen the need for post-infection remediation, existing
mobile malware samples have not yet added such complex-
ity. To better illustrate the eﬀectiveness and ﬂexibility of
Airmid, we created laboratory malware instances suggestive
of future malicious developments in the mobile environment.
Each instance combines malicious functionality now occur-
ring in real mobile malware with evasive functionality com-
mon to desktop malware, and embeds the malicious logic
into a benign app. Inserting malware into a benign app and
rehosting the app on a third-party marketplace has become
a common malware distribution strategy. For safety, we cre-
ated our laboratory malware samples without distribution or
propagation functionality.
We created three laboratory mobile malware samples: a
Twitter client that leaks private data (“Loudmouth”), a Face-
book client sync app that dials premium numbers (“2Faced”),
and a mobile bot (“Thor”). Each piece of malware is actu-
ally a maliciously modiﬁed open-source Android application.
Our malware requires no additional permissions from the un-
modiﬁed applications, which are listed in Table 1. All sam-
ples include evasive techniques and exceed the capabilities
of mobile malware currently in the wild.
3.2.1 Loudmouth
Our ﬁrst malware instance, Loudmouth, combines:
• Malicious mobile functionality: Data exﬁltration.
• Evasive functionality: Malware analysis environment
detection.
• Benign host app: Twitter client.
The principal malicious functionality of Loudmouth is data
exﬁltration, a powerful attack in a mobile context. As users
embrace the functionality of smartphones, they place signif-
icant personal data on their devices. Even basic feature
phones store contact lists, messages, and call databases.
GPS-enabled devices can leak location information, turn-
ing a mobile device into a tracking system. Such data is
useful for criminal activities.
Loudmouth appears to the user as a benign Twitter client.
We augmented the Nanotweeter [34] codebase with just 143
lines of new, malicious code. The app provides the expected
usual functionality, but it also leaks private information to
a server owned by the attacker (here, us) during use.
It
steals Twitter account credentials, the phonebook database,
and the most recently available GPS location. When ac-
tive, Loudmouth creates malicious network traﬃc that con-
tains private data and is transmitted to the malware author’s
server.
Desktop-class malware is commonly analyzed by execut-
ing the malware within a virtualized or emulated environ-
ment. Malware authors have hence begun to include checks
for analysis environments, and the malware alters its behav-
ior so that it does not exhibit malicious functionality during
analysis [13, 22]. Mobile malware does not yet contain such
sophistication; however, should application marketplaces be-
gin to verify apps via runtime analysis, then mobile malware
authors may begin to include checks for analysis environ-
ments. We implemented multiple checks in Loudmouth.
To thwart dynamic analysis, Loudmouth contains sev-
eral checks to determine its environment, and it hides all
malicious behavior when run on an emulator or a devel-
oper phone. The Android platform provides straightforward
methods of detection. Loudmouth ﬁrst queries the “brand”,
“device”, and “model” Java environment variables and com-
pares their values against a whitelist of known consumer
phones. The malware then checks for the Radio Interface
Layer (RIL) library, the Google Maps application, and any
DRM system components. These three components are ei-
ther supplied by hardware device manufacturers or are pro-
prietary, and hence none are distributed with the emulator
or with developer phones. These restrictions are actively
enforced even for third-party distributions of the operating
system [42]. Loudmouth can thus determine whether the
phone is emulated or a physical device, as well as speciﬁc
details of the phone. To the best of our knowledge, we are
the ﬁrst to investigate and implement these techniques in
mobile phones.
3.2.2
Our second malware instance, 2Faced, combines:
• Malicious mobile functionality: Premium number di-
2Faced
aler.
• Evasive functionalities: Log sanitization and a hidden
native process.
• Benign host app: Facebook sync.
Premium number dialer applications are examples of historic
malware that once targeted dial-up Internet users. These
attacks resulted in revenue for the owners of the premium
numbers, as users had little chance of refuting their expen-
sive phone bills [10]. These attacks have recently seen a
resurgence on mobile devices [26].
2Faced is a new generation of the premium number dialer.