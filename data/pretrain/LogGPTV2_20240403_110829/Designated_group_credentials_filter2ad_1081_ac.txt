and computes uicP as the public keys PKH , PK1,
··· , PKn of the credential holder and the designated
veriﬁers. B sends those public keys together with the
description CP of common parameters and aP as the
public key PKS of the credential issuer to A.
R
• Phase 2: Every time when A issues a hash query on
any message mi, i = 1,··· , qH of his choice, B will
answer the query as follows:
– B maintains a hash record [m, H(m), r, f ] to store
all the hash results, it grows as new hash result
has replied.

– If the query on mi has not been asked before (and
hence, it does not exist in the record maintained
∈ Z∗q
by B), then B picks a random number ri
and ﬂips a {0, 1} coin that has probability α on
outcome 0 and 1 − α on outcome 1. If 0 is ob-
tained, B answers with H(mi) = riP . Otherwise,
B answers with H(mi) = bP +riP . B updates his
record with (mi, H(mi), ri, fi), where fi ∈ {0, 1}
is the result of the coin ﬂipping.
R
– If the query on mi has been asked before, then
B looks up his record to obtain the entry (mi,
H(mi), ri, fi) and answers with the stored value
H(mi).
• Phase 3: Every time when A issues a key generation
query on any users Ui, i = 1,··· , qK of his choice, B
will answer the query as follows:
– B maintains a key record [i, sk, pk] to store all
the key pairs, it grows as new key pair result has
replied.
– If the query on Ui has not been asked before (and
hence, it does not exist in the record maintained
∈ Z∗q
by B), then B picks a random number ki
and answers with (SKi = ki, PKi = kiP ). B
updates his record with (i, ki, kiP )
R
– If the query on Ui has been asked before, then B
looks up his record to obtain the entry (i, ki, kiP )
and answers with the stored value (ki, kiP ).
• Phase 4: Every time when A issues a credential query
on any message mi, i = 1,··· , qC and any public keys
PKj, j = 1,··· , n of his choice, B will answer the
query as follows:
R
– If the query on (mi, PKjS , PKjH , PKj1 , ··· ,
PKjn ) has not been asked before (and hence, mi
does not exist in the hash record maintained by
∈ Z∗q
B), then B picks two random number ai, ri
and answers the query with (a−1
i riPKjS , aiP ,
aiPKjH , aiPKj1 ,··· , aiPKjn ). B updates his
hash record with (mi, riP, ri, 0). Note that riPKjS
= riSKjS P = SKjS riP = SKjS H(mi), which is
equal to a credential on mi generated with the
secret key corresponds to PKjS .
– If the query on (mi, PKjS , PKjH , PKj1 , ··· ,
PKjn ) where mi has been asked before, then B
looks up on his hash record to ﬁnd the entry
(mi, H(mi), ri, fi). If fi is found to be equal to 1
(i.e. H(mi) = bP + riP ), then B terminates and
fails the simulation. Otherwise if fi is found to
be equal to 0 (i.e. H(mi) = riP ), then B picks a
i riPKjS ,
random number ai
aiP , aiPKjH , aiPKj1 ,··· , aiPKjn ) as the an-
swer.
∈ Z∗q and returns (a−1
R
• Phase 5: Eventually, A will output a forged creden-
tial (σ, L) = ({S, R, RH , R1, ··· , Rn}, L) on m∗.
B needs to look up on his record to ﬁnd the entry
(mi, H(mi), ri, fi) where mi = m∗(i.e.(m∗, H(m∗),
r∗, f∗)). If m∗ has not been queried (i.e. the entry is
not found), then B terminates with failure. But since
the random values ri are randomly picked over Z∗q ,
thanks to its uniform randomness, the hash results are
distributed over G1 and the probability that A hits the
hash result H(m∗) is 1
q where q is a large prime, which
is negligible. Hence m∗ must have been queried during
the hash queries (i.e. A has obtained H(m∗) from B)
and B is able to ﬁnd the entry. In order to compute
the answer for the given instance to the BDHP, H(m∗)
has to be in the form of bP + r∗P (i.e. f∗ = 1). If
it is not, B terminates and fails the simulation. Oth-
erwise, B selects any Rj value with the corresponding
public key PKj = ujcP of any designated veriﬁer or
credential holder from the forged credential to calcu-
late ˆe(S, Rj)u−1
· ˆe(aP, cP )−r∗ as the answer for the
BDHP.
j
If B does not terminate in the simulation, the answer com-
puted by B is equal to :
j
j
ˆe(S, Rj)u−1
· ˆe(aP, cP )−r∗
= ˆe(aH(m∗),PKj)u−1
· ˆe(aP, cP )−r∗
= ˆe(aH(m∗), ujcP )u−1
· ˆe(aP, cP )−r∗
= ˆe(a(bP + r∗P ), cP ) · ˆe(aP, cP )−r∗
= ˆe(abP + ar∗P, cP ) · ˆe(−r∗aP, cP )
= ˆe(P, P )abc
j
Hence B has successfully solved the BDHP for the given
instance (P, aP , bP , cP ). Note that the probability that B
success is:
P r[∀fi = 0 in P hase 4] × P r[f∗ = 1 in P hase 5]
×SuccU F−CS−CM A
A
(k)
= αqC (1 − α)SuccU F−CS−CM A
A
(k)
In order to have a maximum probability of success, we take
derivative on this value and found it is maximize at α =
qC (qC +1)−1. Let β = SuccU F−CS−CM A
(k). Hence B solves
A
the BDHP with probability:
(qC (qC + 1)−1)qC (1 − qC (qC + 1)−1)β
= (
)qC (
β
)
qC + 1
)−qC (
β
qC + 1
)
qC
qC + 1
1
qC
β
= (1 +
≥
e(qC + 1)
where e is the base for natural logarithm. In other words,
B solved the BDHP with non-negligible probability, which
contradicts with the BDHP assumption. Hence, we com-
plete the proof.
Limitability. As deﬁned in Section 3, we use the LD-CS-
CMA experiment to proof this property. As in the unforge-
ability proof, we let A be a LD-CS-CMA adversary in the
limitability experiment described in Section 3. We will build
a simulator B that will use A to solve an instance of the
BDHP. The purpose of B is to make use of A to compute
ˆe(P, P )abc from (P, aP, bP, cP ) for unknown a, b, c, which is
given in the beginning of the experiment. The simulation is
described as follows:

• Phase 1-4: The same as Phase 1-4 in the UF-CS-
CMA experiment.
• Phase 5: At some stage, A will nominate a desig-
nated veriﬁer UO within the veriﬁers given by B in
phase 1 that he would like to corrupt and ask for the
credential (σ, L) on any m∗ of his choice with US as
the credential issuer, UH as the credential holder and
UVi , i = 1,··· , n, Vi = O as the designated veriﬁers
such that m∗ has never been queried for the credential
result or m∗ has been queried but UO ∈ L. B will then
follow the way he replies the queries in Phase 4 to
reply A with the required credential (σ, L).
• Phase 6: A can keep querying any m∗ ∈ {0, 1}∗ and
any users of his choice, with one condition that m∗ and
UO cannot be queried together again.
• Phase 7: Eventually, A will output a valid desig-
nated credential ˆσ on m∗ designated to UO. In order
to compute the answer for the given instance to the
BDHP, B ﬁnds the corresponding public key uOcP
of UO and the entry (mi, H(mi), ri, fi) where mi =
m∗(i.e.(m∗, H(m∗), r∗, f∗)) in his hash record, then
calculates ˆσu−1
O · ˆe(aP, cP )−r∗ as the answer for the
BDHP.
If B does not terminate in the simulation, the answer com-
puted by B is equal to :
ˆσu−1
O · ˆe(aP, cP )−r∗
= ˆe(aH(m∗),PKO)u−1
O · ˆe(aP, cP )−r∗
= ˆe(aH(m∗), uOcP )u−1
O · ˆe(aP, cP )−r∗
= ˆe(a(bP + r∗P ), cP ) · ˆe(aP, cP )−r∗
= ˆe(abP + ar∗P, cP ) · ˆe(−r∗aP, cP )
= ˆe(P, P )abc
Following the computation in the UF-CS-CMA experiment,
B has successfully solved the BDHP for the given instance
(P, aP , bP , cP ) with the same non-negligible probability of
success that contradicts with the BDHP assumption. Hence,
we complete our proof.
[3] D. Balfanz, G. Durfee, N. Shankar, D. Smetters,
J. Staddon, and H. Wong. Secret Handshakes from
Pairing-Based Key Agreements. In IEEE Symposium
on Security and Privacy, pages 180–196, 2003.
[4] D. Boneh and M. Franklin. Identity-Based Encryption
from the Weil Pairing. In Advances in Cryptology -
Crypto 2001, volume 2139 of Lecture Notes in
Computer Science, pages 213–229. Springer-Verlag,
2001.
[5] D. Boneh, B. Lynn, and H. Shacham. Short
Signatures from the Weil Pairing. In Advances in
Cryptology - Asiacrypt 2001, volume 2248 of Lecture
Notes in Computer Science, pages 514–532.
Springer-Verlag, 2001.
[6] R. W. Bradshaw, J. E. Holt, and K. E. Seamons.
Concealing Complex Policies with Hidden Credentials.
In ACM Conference on Computer and
Communications Security, pages 146–157, 2004.
[7] C. Castelluccia, S. Jarecki, and G. Tsudik. Secret
Handshakes from CA-Oblivious Encryption. In
Advances in Cryptology - Asiacrypt 2004, volume 3329
of Lecture Notes in Computer Science, pages 293–307.
Springer-Verlag, 2004.
[8] D. Chaum. Zero-Knowledge Undeniable Signatures. In
Advances in Cryptology - Eurocrypt 1990, volume 473
of Lecture Notes in Computer Science, pages 458–464.
Springer-Verlag, 1990.
[9] J. Holt, R. W. Bradshaw, K. E. Seamons, and
H. Orman. Hidden Credentials. In ACM Workshop on
Privacy in the Electronic Society, pages 1–8, 2003.
[10] M. Jakobsson, K. Sako, and R. Impagliazzo.
Designated Veriﬁer Proofs and Their Applications. In
Advances in Cryptology - Eurocrypt 1996, volume 1070
of Lecture Notes in Computer Science, pages 143–154.
Springer-Verlag, 1996.
[11] F. Laguillaumie and D. Vergnaud. Designated Veriﬁer
Signatures: Anonymity and Eﬃcient Construction
from Any Bilinear Map. In Security in
Communication Networks 2004, volume 3352 of
Lecture Notes in Computer Science, pages 105–119.
Springer-Verlag, 2005.
5. CONCLUSION
In this paper, we deﬁned a new notion: Designated Group
Credential. Our notion allows a credential issuer to issue
a credential to a credential holder, such that the creden-
tial holder can only convince a group of veriﬁers that have
been predetermined by the credential issuer. We provided a
scheme based on bilinear pairings which is provably secure
under the random oracle model.
6. REFERENCES
[1] N. Asokan, V. Shoup, and M. Waidner. Optimistic
Fair Exchange of Digital Signatures. IEEE Journal on
Selected Areas in Communications, 18(4):593–610,
2000.
[2] J. Baek, R. Safavi-Naini, and W. Susilo. Universal
designated veriﬁer signature proof. In Advances in
Cryptology - Asiacrypt 2005, volume 3788 of Lecture
Notes in Computer Science, pages 644–661.
Springer-Verlag, 2005.

[12] N. Li, W. Du, and D. Boneh. Oblivious Signature-
Based Envelope. In ACM Symposium on Principles of
Distributed Computing, pages 182–189, 2003.
[13] N. P. Smart. An Identity Based Authenticated Key
Agreement Protocol Based on the Weil Pairing. In
Cryptology ePrint Archive, Report 2001/111, 2001.
[14] R. Steinfeld, L. Bull, H. Wang, and J. Pieprzyk.
Universal Designated-Veriﬁer Signatures. In Advances
in Cryptology - Asiacrypt 2003, volume 2894 of
Lecture Notes in Computer Science, pages 523–542.
Springer-Verlag, 2003.
[15] R. Steinfeld, H. Wang, and J. Pieprzyk. Eﬃcient
Extension of Standard Schnorr/RSA Signatures into
Universal Designated-Veriﬁer Signatures. In Public
Key Cryptography 2004, volume 2947 of Lecture Notes
in Computer Science, pages 86–100. Springer-Verlag,
2004.
[16] S. Xhu and M. Yung. k-anonymous Secret Handshakes
with Reusable Credentials. In ACM Conference on
Computer and Communications Security, pages
158–167, 2004.