6:
7:
8: else
9:
10:
11:
Activate this partial slab as the current cpu slab
return the ﬁrst available object in the freelist
Allocate and initialize a new slab from the page frame allocator
Associate label  to the slab’s page struct
Issue a hypercall to SILVER’s hypervisor to label the corresponding physical
pages and set up permissions in principals’ HAP tables
Activate this new slab and return object as of Line 6-7
12:
13: end if
slab with the label  of the same SLUB cache. The API call will return
a new object reference which p could pass to q (but p can no longer dereference
to d due to slab access control). Upon receiving the reference, q will leverage
SILVER’s reference validation primitives (described in Section 3.3) to ensure
that the reference is legal, and ﬁnally endorse d to complete the transfer. Note
that in transfer-based communication, since the object ownership is surrendered,
the sending principal must release all the references to the object before calling
the pd transfer object, the same way as it is calling the kfree function.
Service-based communication represents the semantic that a principal re-
quests another principal to process its data object, rather than giving up the
ownership permanently. In service-based cross-domain call, the original stored
location of the data object is not released during the transfer process, instead,
a shadow copy of the object is created to be used by the domain that provides
the service. After the service call is completed, the updated value of the object
is copied back to the original location. SILVER also implements service-based
communication based on the SLUB allocator: when a principal p is requesting
another principal q to process its own object d, SILVER will ﬁrst fork object d
from its current slab to a new object d∗ in a  slab in the same SLUB
cache, and then use the reference of the forked object as the parameter of the
cross-domain call. Before the call returns, all the references of d in Sp would
dereference to the original d in p’s slab. Once the call returns, SILVER will join
the d∗ with d if d∗ can be endorsed, committing changes made by q, and free d∗
from q’s slab. Figure 2 shows the procedure of the corresponding slab operations.
Note that in most cases there is no extra hypervisor operation involved during
the communication procedure, since both two slabs are pre-allocated so that no
labeling/relabeling is required.
12
Reference validation and object accounting In commodity OS kernel like
Linux, fetching data from another principal is usually achieved by obtaining a
reference (i.e., pointer of virtual address) to the particular data object. Object
references can be passed between principals through function call parameters,
function call return values, and reading exported symbols.
As stated in Section 2.1, the absence of reference validation in function pa-
rameters could leave avenues for attackers. In order to support reference valida-
tion, SILVER must be able to track security information of kernel data objects at
run-time so that given any reference, SILVER could identify the object that the
reference points to. To further support type-enforcement and bound checking,
the type and size information of protected objects must also be known at run-
time. By extending the SLUB tracking mechanism, we implemented an account-
able resource management layer named object registry, for managing protected
objects. The object registry maintains additional metadata for each protected
object, and updates metadata upon allocation, deallocation, and communication
events. The metadata include allocation principal, owner principal, object size,
integrity level, object type and the time of allocation. The object type can be
obtained because the SLUB allocator follows a type-based organization, and for
generic-sized types, we use the allocation request function/location (the function
that calls kmalloc) as well as the object size to identify the type of the object.
SILVER ensures that references passed through the
pd transfer object API and service-based communication functions through
designated parameters must be owned by the sender principal. In addition, the
object registry oﬀers basic primitives to principals for implementing their own
reference validation schemes.
4 Evaluation
In this section, we ﬁrst describe the implementation of our prototype, then we
show how to apply SILVER to existing kernel programs for establishing protec-
tion domains. In Section 4.3, we demonstrate SILVER’s protection eﬀectiveness
using security case studies of diﬀerent kernel threats. We evaluate the perfor-
mance of SILVER in Section 4.4.
4.1 Prototype Implementation
We have built a proof-of-concept prototype of SILVER. The VMM layer is an
extension of the Xen-based HUKO hypervisor [31], with a few hypercalls and
exception handling logic added. The OS subsystem is based on Linux kernel
2.6.24.6, and deployed as a Xen guest in HVM mode. Protection domain meta-
data are maintained in various locations. For each security principal we main-
tain a security identiﬁer prid in the module struct, and we encode the slab label
 as additional ﬂags in the corresponding page struct. The
object registry is organized in a red-black tree with the object address as the key
value. In addition, to facilitate monitoring for the administrator, we export the
13
run-time status of protection domains in the kernel, including object information
and exported functions, to a virtual directory in the /proc/ ﬁle system.
4.2 Protection Domain Deployment
In this section we describe how to adapt existing kernel programs to leverage
primitives provided by SILVER. The ﬁrst step is to establish the protection
by declaring a speciﬁc LKM as a domain principal using the pd initialize()
routine, which will return an unique principal id. The module text range will be
used to authenticate the principal during protection domain transition. Entry
points of this domain need to be initialized by pd ep create API.
The second step involves modifying the declaration or creation of security-
sensitive program data. There are four kinds of data object associated with a
kernel program: global object, stack object, heap object and page object. For
static data and stack data, SILVER could automatically recognize them and treat
them private to their principal so that modiﬁcation by other principals must be
carried out by calling wrapper functions. For heap and page objects, developers
could specify their security property to control how they could be accessed by
other principals through calling kmalloc pd and get free pages pd API with
an integrity label. For example, unprotected memory sharing of low integrity
data could be declared using the GB LOW ﬂag. Note that this process could be
performed incrementally and selectively.
The next step is to handle data communication. The major task is to convert
functions that handle exchange of high-integrity data to exploit transfer-based
and service-based communication primitives. The example code below is a frag-
ment of alloc skb function that returns an allocated network buﬀer to NIC
driver using transfer-based communication. By adding ﬁve lines of code at the
end of the function, the owner principal of the sk buff object changes accord-
ingly.
transfer skb = pd transfer object(skb, prid, PD HIGH, sizeof(struct
out:
- return skb;
+ if(is protected(prid = get caller prid()))
+
sk buff));
+ else
+
+ return transfer skb;
transfer skb = pd degrade object(skb, GB LOW);
Service-based communication is used in a similar manner, the data proxying is
accomplished by SILVER automatically, but the developer needs to register the
function signature and mark the transferring parameter at both the beginning
and the end of function using SILVER’s APIs. To support reference validation,
SILVER provides routine that automatically checks whether a designated pa-
rameter reference belongs to the caller principal.
14
We have converted a number of Linux kernel functions and extensions us-
ing SILVER’s primitive to secure their interactions. The extensions include the
Realtek RTL-8139 NIC driver, the CAN BCM module, a emulated sound card
driver, and two kernel modules written by us for attacking experiments. For all
cases, the total amount of modiﬁcation incurs changing less than 10% lines of
original code.
4.3 Security
In this section we evaluate the eﬀectiveness of security protection provided by
SILVER mechanism with both real-world and synthetic attacks.
In Section 2.1, we mention an exploit described by
Kernel SLUB overﬂow.
Jon Oberheide (CVE-2010-2959) to the vulnerable CAN Linux kernel module
that achieves privilege escalation through overﬂowing dynamic data in the SLUB
cache and corrupting crucial kernel control data in the same SLUB cache. We
ported the vulnerable module to our Linux system, implemented and tested our
exploit based on the attack code provided by Jon Oberheide. We then tested
our attack in case the module is secured by SILVER’s primitives, placing it in
an untrusted domain separated from the Linux kernel. As result, dynamic data
(e.g., op->frames) allocated by the CAN module are labeled with untrusted
principal. According to SILVER’s SLUB memory allocation scheme, these data
object are placed on dedicated slabs for the untrusted CAN module principal,
and they could never be adjacent to a high integrity kernel object shmid kernel
in the SLUB cache, despite any allocation pattern carried out by the attacker.
For this reason, the attack can never succeed in our experiment. Moreover, in
case the attacker successfully compromise the vulnerable kernel module (e.g., be
able to execute injected code), it still cannot tamper the integrity of OS kernel
since the entire kernel module can only exercise permissions of an untrusted
principal.
Kernel NULL pointer dereference. The key idea of NULL pointer derefer-
ence is to leverage the vulnerability that a kernel module does not check whether
a function pointer is valid before invoking that function pointer. As the result,
the control will jump to the page at address zero, where the attacker maps a
payload page containing the malicious code from user space before hand. Once
get executed, the payload code could modify crucial kernel data or invoke kernel
functions to achieve malicious goals such as privilege escalation. Such vulner-
abilities are quite common in buggy extensions and even the core kernel code
(CVE-2009-2692, CVE-2010-3849, CVE-2010-4258).
In our experiment, dereferencing a NULL pointer in a buggy untrusted mod-
ule could not succeed in SILVER, primarily for two reasons. First, in SILVER,
executing user-level code by an untrusted principal is prohibited according to ac-
cess control rules. This is because NX bits are set for user pages in the untrusted
principal HAP table. Second, even if the attack code got executed, it is still ex-
ecuted on behalf of untrusted principal with restricted permissions. As a result,
attacking eﬀorts such as privilege escalation (e.g., setting the task->uid, calling
15
the commit creds function) would be intercepted by the reference monitor and
the integrity of core OS kernel is preserved.
In Section 2.1, we show that even with pro-
Attacks through Kernel API.
tection schemes like memory isolation or SFI, attackers can still compromise
kernel integrity by launching confused deputy attacks over legitimated kernel
APIs. Note that this kind of attacks is very rare in practice, for the reason that
currently few Linux systems employ protection/sandboxing approaches inside
OS kernel so that kernel attackers do not need to resort to this approach at
all. To demonstrate SILVER’s protection eﬀectiveness against kernel API at-
tacks, we implemented a kernel API attack module based on the RTL-8139 NIC
driver. The attacking module provides a crafted reference of struct pci dev *
and uses it as input to the exported routine pci enable device. The reference
is actually pointing to a calculated oﬀset of the current process descriptor. By
calling legitimate kernel API with such reference, the uid to current process will
be set to 0 (root). SILVER prevents such attack by looking up the security prop-
erty of the object referred by the actual pointer value. The reference monitor
then detected that the caller principal actually does not owned the data object
provided, and it raised an exception denying the attack attempt.
4.4 Performance Evaluation
In this section, we measure the performance overhead introduced by using SIL-
VER’s protection domain primitives. First, we would like to measure the time
overhead of calling the extended or new APIs of SILVER by relying on a set
of micro-benchmarks. Then we would like to use macro-benchmarks to measure
the overall performance impact on throughput when a kernel NIC driver is con-
tained. All experiments are performed on a HP laptop computer with a 2.4GHz
Intel i5-520M processor and 4GB of memory. The VMM layer is based on Xen
3.4.2 with a Linux 2.6.31 Dom0 kernel. The OS kernel environment was conﬁg-
ured as a HVM guest running Ubuntu 8.04.4 (kernel version 2.6.24.6) with single
core and 512MB memory.
Run-time performance. Table 1 reports the microbenchmark results of se-
lected APIs of SILVER. The ﬁrst four rows denote the performance of the native
Linux kernel SLUB memory allocator running on unmodiﬁed Xen. The fast path
happens when the object requested is exactly available at the current cpu slab.
The rest of rows shows the performance of SILVER’s dynamic data manage-
ment primitives. There are three major sources of overhead added by SILVER’s
run-time system: (1) “context switch” between protection domains, (2) label-
ing a physical page through hypercalls, and (3) updating the object registry
and data marshaling. Row 5 and 6 show the overhead of allocation and free
when the caller is kernel itself, which only incurs overhead caused by (3). Row
7-8 show the overhead of calling kmalloc pd and kfree by protection domains
other than kernel. In this case, besides overhead (3), a protection domain switch
(1) is also involved, and page labeling (2) happens occasionally when a new slab
16
is required. The relatively expensive guest-VMM switches in (1) and (2) make
allocations/free operations by untrusted principals much more expensive.
To perform evaluation on application performance, we use SILVER to con-
tain a 8139too NIC driver, and leverage secure communication primitives to
protect all of its object creation and data exchanges (skb pipeline) with the
Linux kernel. We use the following macro-benchmarks to evaluate performance
impact of SILVER towards diﬀerent applications: (a) Dhrystone 2 integer per-
formance; (b) building a Linux 2.6.30 kernel with defconﬁg; (c) apache ab (5
concurrent client, 2000 requests of 8KB web page) and (d) netperf benchmark
(TCP STREAM, 32KB message size, transmit). Figure 3 illustrates the normalized
performance results compared to native Linux on unmodiﬁed Xen. We observed
that our current SILVER prototype has a non-negligible overhead, especially in
terms of throughput when system is loaded with saturated network I/O. This is
primarily caused by very frequent protection domain switches and transfer-based
communication. We measured protection domain switch rate of the apache test
to be around 32, 000 per second. The overall performance also depends on how
much data are speciﬁed as security-sensitive, how often security-sensitive data
are created and the frequency of protected communication with untrusted prin-
cipals. With SILVER, many of these security properties are controlled by the
programmer so that she can manage the balance between security and perfor-