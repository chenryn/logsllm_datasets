[]{#index.html}
::: book
::: titlepage
::: producttitle
[Red Hat Enterprise Linux]{.productname} [8]{.productnumber}
:::
# []{#index.html#idm139867814139152}软件打包和分发 {.title}
## 在 Red Hat Enterprise Linux 8 中打包和分发软件的指南 {.subtitle}
::: authorgroup
[Red Hat]{.orgname} [Customer Content Services]{.orgdiv}
:::
::: legalnotice
[]{#index.html#idm139867801133424}
Copyright []{.trademark}© 2021 Red Hat, Inc.
The text of and illustrations in this document are licensed by Red Hat
under a Creative Commons Attribution--Share Alike 3.0 Unported license
(\"CC-BY-SA\"). An explanation of CC-BY-SA is available at
`http://creativecommons.org/licenses/by-sa/3.0/`{.uri}. In accordance
with CC-BY-SA, if you distribute this document or an adaptation of it,
you must provide the URL for the original version.
Red Hat, as the licensor of this document, waives the right to enforce,
and agrees not to assert, Section 4d of CC-BY-SA to the fullest extent
permitted by applicable law.
Red Hat, Red Hat Enterprise Linux, the Shadowman logo, the Red Hat logo,
JBoss, OpenShift, Fedora, the Infinity logo, and RHCE are trademarks of
Red Hat, Inc., registered in the United States and other countries.
[Linux]{.trademark}® is the registered trademark of Linus Torvalds in
the United States and other countries.
[Java]{.trademark}® is a registered trademark of Oracle and/or its
affiliates.
[XFS]{.trademark}® is a trademark of Silicon Graphics International
Corp. or its subsidiaries in the United States and/or other countries.
[MySQL]{.trademark}® is a registered trademark of MySQL AB in the United
States, the European Union and other countries.
[Node.js]{.trademark}® is an official trademark of Joyent. Red Hat is
not formally related to or endorsed by the official Joyent Node.js open
source or commercial project.
The [OpenStack]{.trademark}® Word Mark and OpenStack logo are either
registered trademarks/service marks or trademarks/service marks of the
OpenStack Foundation, in the United States and other countries and are
used with the OpenStack Foundation\'s permission. We are not affiliated
with, endorsed or sponsored by the OpenStack Foundation, or the
OpenStack community.
All other trademarks are the property of their respective owners.
:::
::: abstract
**摘要**
本文档论述了如何将软件打包到 RPM
中。它还演示了如何为打包准备源代码，并解释选定的高级打包场景，如将
Python 项目或 RubyGems 打包到 RPM 中。
:::
------------------------------------------------------------------------
:::
:::
[]{#making-open-source-more-inclusive.html}
::: preface
::: titlepage
# []{#making-open-source-more-inclusive.html#making-open-source-more-inclusive}使开源包含更多 {.title}
:::
红帽承诺替换我们的代码、文档和网页属性中存在问题的语言。我们从这四个术语开始：
master、slave、blacklist 和
whitelist。这些更改将在即将发行的几个发行本中逐渐实施。如需了解更多详细信息，请参阅
[CTO Chris Wright
信息](https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language){.link}。
:::
[]{#proc_providing-feedback-on-red-hat-documentation_packaging-and-distributing-software.html}
::: preface
::: titlepage
# []{#proc_providing-feedback-on-red-hat-documentation_packaging-and-distributing-software.html#proc_providing-feedback-on-red-hat-documentation_packaging-and-distributing-software}对红帽文档提供反馈 {.title}
:::
我们感谢您对文档提供反馈信息。请让我们了解如何改进文档。要做到这一点：
::: itemizedlist
-   关于特定内容的简单评论：
    ::: orderedlist
    1.  请确定您使用 [*Multi-page HTML*]{.emphasis}
        格式查看文档。另外，确定 [**Feedback**]{.strong}
        按钮出现在文档页的右上方。
    2.  用鼠标指针高亮显示您想评论的文本部分。
    3.  点在高亮文本上弹出的 [**Add Feedback**]{.strong}。
    4.  按照显示的步骤操作。
    :::
-   要提交更复杂的反馈，请创建一个 Bugzilla ticket：
    ::: orderedlist
    1.  进入
        [Bugzilla](https://bugzilla.redhat.com/enter_bug.cgi?product=Red%20Hat%20Enterprise%20Linux%208){.link}
        网站。
    2.  在 Component 中选择 [**Documentation**]{.strong}。
    3.  在 [**Description**]{.strong}
        中输入您要提供的信息。包括文档相关部分的链接。
    4.  点 [**Submit Bug**]{.strong}。
    :::
:::
:::
[]{#getting-started-with-rpm-packaging_packaging-and-distributing-software.html}
::: chapter
::: titlepage
# []{#getting-started-with-rpm-packaging_packaging-and-distributing-software.html#getting-started-with-rpm-packaging_packaging-and-distributing-software}第 1 章 RPM 打包入门 {.title}
:::
RPM 软件包管理器(RPM)是在红帽企业 Linux、CentOS 和 Fedora
上运行的软件包管理系统。您可以使用 RPM
来分发、管理和更新您为上述任何操作系统创建的软件。
与传统存档文件中的软件分发相比，RPM 软件包管理系统具有多个优势。
RPM 允许您：
::: itemizedlist
-   使用标准软件包管理工具（如 Yum 或
    PackageKit）安装、重新安装、删除、升级和验证软件包。
-   使用已安装的软件包数据库查询并验证软件包。
-   使用元数据描述软件包、安装说明和其他软件包参数。
-   将软件源、补丁和完整的构建指令打包在源和二进制软件包中。
-   添加软件包到 Yum 存储库。
-   使用 GNU Privacy Guard(GPG)签名密钥通过数字签名您的软件包。
:::
:::
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html}
::: chapter
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#preparing-software-for-rpm-packaging_packaging-and-distributing-software}第 2 章 为 RPM 打包准备软件 {.title}
:::
这部分论述了如何为 RPM
打包准备软件。为此，无需了解如何编码。[然而，您需要了解基本概念，如源代码是什么
以及如何制定程序。](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "源代码是什么"){.link}
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging}源代码是什么 {.title}
:::
这部分解释了什么是源代码，并显示了使用三种不同编程语言编写的程序的源代码示例。
源代码是计算机人类可读的指令，用于描述如何执行计算。源代码使用编程语言来表示。
本文档包含使用三种不同编程语言编写的 `Hello World`{.literal}
程序的三个版本：
::: itemizedlist
-   [在 bash 中写入 World 的
    hello](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-bash_preparing-software-for-rpm-packaging "例 2.1. 在 bash 中写入 World 的 hello"){.link}
-   [使用 Python 编写的
    World](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-python_preparing-software-for-rpm-packaging "例 2.2. 使用 Python 编写的 World"){.link}
-   [使用 C 编写的
    World](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-c_preparing-software-for-rpm-packaging "例 2.3. 使用 C 编写的 World"){.link}
:::
每个版本都以不同的方式打包。
这些版本的 `Hello World`{.literal} 程序涵盖了 RPM
软件包器的三个主要用例。
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-bash_preparing-software-for-rpm-packaging}
**例 2.1. 在 bash 中写入 World 的 hello**
::: example-contents
[*bello*]{.emphasis} 项目在
[bash](https://www.gnu.org/software/bash/){.link} 中实施
`Hello World`{.literal}。其实现中仅包含 `bello`{.literal} shell
脚本。该程序的目的是在命令行中输出 `Hello World`{.literal}。
`bello`{.literal} 文件具有以下语法：
``` literallayout
#!/bin/bash
printf "Hello World\n"
```
:::
:::
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-python_preparing-software-for-rpm-packaging}
**例 2.2. 使用 Python 编写的 World**
::: example-contents
[*pello*]{.emphasis} 项目在 [Python](https://www.python.org/){.link}
中实施 `Hello World`{.literal}。实现中仅包含 `pello.py`{.literal}
程序。该程序的目的是在命令行中输出 `Hello World`{.literal}。
`pello.py`{.literal} 文件具有以下语法：
``` literallayout
#!/usr/bin/python3
print("Hello World")
```
:::
:::
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-c_preparing-software-for-rpm-packaging}
**例 2.3. 使用 C 编写的 World**
::: example-contents
[*unito*]{.emphasis} 项目在 C 中实现
`Hello World`{.literal}。其实施中仅包含 `cello.c`{.literal} 和
`Makefile`{.literal} 文件，因此生成的 `tar.gz`{.literal} 存档除
`LICENSE`{.literal} 文件外有两个文件。
该程序的目的是在命令行中输出 `Hello World`{.literal}。
`cello.c`{.literal} 文件具有以下语法：
``` literallayout
#include 
int main(void) {
    printf("Hello World\n");
    return 0;
}
```
:::
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#how-programs-are-made_preparing-software-for-rpm-packaging}编写程序的方式 {.title}
:::
从人类可读的源代码转换到机器代码的方法（计算机执行该程序所遵循的指令）包括：
::: itemizedlist
-   [程序是原生编译的](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#natively-compiled-code_preparing-software-for-rpm-packaging "原生编译代码"){.link}。
-   [程序由原始解译来解释](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#raw-interpreted-code_preparing-software-for-rpm-packaging "原始解读的程序"){.link}。
-   [程序由字节编译](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#byte-compiled-code_preparing-software-for-rpm-packaging "字节编译的程序"){.link}。
:::
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#natively-compiled-code_preparing-software-for-rpm-packaging}原生编译代码 {.title}
:::
原生编译的软件是编程语言编写的软件，使用生成的二进制可执行文件编译到计算机代码中。此类软件可以独立运行。
以这种方式构建的 RPM 软件包特定于架构.
如果您在使用 64 位(x86_64)AMD 或 Intel
处理器的计算机上编译此类软件，则不会在 32 位(x86)AMD 或 Intel
处理器上执行。生成的软件包的名称中指定了架构。
:::
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#interpreted-code_preparing-software-for-rpm-packaging}解释代码 {.title}
:::
[bash](https://www.gnu.org/software/bash/){.link} 或
[Python](https://www.python.org/){.link}
等一些编程语言不编译到计算机代码。相反，程序的源代码会分步执行，无需事先转换，可以通过语言解释器或语言虚拟机进行转换。
完全使用解释编程语言编写的软件不特定于架构。因此，生成的 RPM
软件包的名称中包含 `noarch`{.literal} 字符串。
解释的语言可以是 [Raw 解读的程序或
二进制编译程序](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#raw-interpreted-code_preparing-software-for-rpm-packaging "原始解读的程序"){.link}。这两种类型在程序构建过程和打包过程中有所不同。
::: section
::: titlepage
### []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#raw-interpreted-code_preparing-software-for-rpm-packaging}原始解读的程序 {.title}
:::
原始解读的语言程序不需要编译，并由解释程序直接执行。
:::
::: section
::: titlepage
### []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#byte-compiled-code_preparing-software-for-rpm-packaging}字节编译的程序 {.title}
:::
字节编译语言需要编译成字节代码，然后由语言虚拟机执行。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}