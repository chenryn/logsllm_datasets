11.4.2 Using both GET and CONNECT requests, attempt to connect to different IP
addresses and ports within the hosting infrastructure.
11.4.3 Using both GET and CONNECT requests, attempt to connect to common
port numbers on the web server itself by specifying 127.0.0.1 as the target
host in the request.
11.5 Test for Virtual Hosting Misconfi guration
11.5.1 Submit GET requests to the root directory using the following:
n The correct Host header
n A bogus Host header
cc2211..iinndddd 884477 88//1199//22001111 1122::2222::0066 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 848
848 Chapter 21 n A Web Application Hacker’s Methodology
n The server’s IP address in the Host header
n NoHost header (use HTTP/1.0 only)
11.5.2 Compare the responses to these requests. A common result is that direc-
tory listings are obtained when the server’s IP address is used in the Host
header. You may also fi nd that different default content is accessible.
11.5.3 If you observe different behavior, repeat the application mapping exer-
cises described in section 1 using the hostname that generated different
results. Be sure to perform a Nikto scan using the -vhost option to iden-
tify any default content that may have been overlooked during initial
application mapping.
11.6 Test for Web Server Software Bugs
11.6.1 Run Nessus and any other similar scanners you have available to identify
any known vulnerabilities in the web server software you are attacking.
11.6.2 Review resources such as Security Focus, Bugtraq, and Full Disclosure
to fi nd details of any recently discovered vulnerabilities that may not
have been fi xed on your target.
11.6.3 If the application was developed by a third party, investigate whether it
ships with its own web server (often an open source server). If it does,
investigate this for any vulnerabilities. Be aware that in this case, the
server’s standard banner may have been modifi ed.
11.6.4 If possible, consider performing a local installation of the software you
are attacking, and carry out your own testing to fi nd new vulnerabilities
that have not been discovered or widely circulated.
11.7 Test for Web Application Firewalling
11.7.1 Submit an arbitrary parameter name to the application with a clear attack
payload in the value, ideally somewhere the application includes the
name and/or value in the response. If the application blocks the attack,
this is likely to be due to an external defense.
11.7.2 If a variable can be submitted that is returned in a server response, submit
a range of fuzz strings and encoded variants to identify the behavior of
the application defenses to user input.
11.7.3 Confi rm this behavior by performing the same attacks on variables
within the application.
11.7.4 For all fuzzing strings and requests, use payload strings that are unlikely
to exist in a standard signature database. Although giving examples of
cc2211..iinndddd 884488 88//1199//22001111 1122::2222::0066 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 849
Chapter 21 n A Web Application Hacker’s Methodology 849
these is by defi nition impossible, avoid using /etc/passwd or /windows/
system32/config/sam as payloads for fi le retrieval. Also avoid using
terms such as  in an XSS attack and using alert() or xss as
XSS payloads.
11.7.5 If a particular request is blocked, try submitting the same parameter in a
different location or context. For instance, submit the same parameter in
the URL in a GET request, within the body of a POST request, and within
the URL in a POST request.
11.7.6 On ASP.NET, also try submitting the parameter as a cookie. The API
Request.Params[“foo”] will retrieve the value of a cookie named foo
if the parameter foo is not found in the query string or message body.
11.7.7 Review all the other methods of introducing user input provided in
Chapter 4, picking any that are not protected.
11.7.8 Determine locations where user input is (or can be) submitted in a non-
standard format such as serialization or encoding. If none is available,
build the attack string by concatenation and/or by spanning it across
multiple variables. (Note that if the target is ASP.NET, you may be able
to use HPP to concatenate the attack using multiple specifi cations of the
same variable.)
12 Miscellaneous Checks
12.1. Test for DOM-based attacks
12.2. Test for local privacy vulnerabilities
12.3. Test for weak SSL ciphers
12.4. Check same-orgin policy configuration
Figure21-13: Miscellaneous checks
12.1 Check for DOM-Based Attacks
12.1.1 Perform a brief code review of every piece of JavaScript received from
the application. Identify any XSS or redirection vulnerabilities that can
be triggered by using a crafted URL to introduce malicious data into
the DOM of the relevant page. Include all standalone JavaScript fi les
cc2211..iinndddd 884499 88//1199//22001111 1122::2222::0066 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 850
850 Chapter 21 n A Web Application Hacker’s Methodology
and scripts contained within HTML pages (both static and dynamically
generated).
12.1.2 Identify all uses of the following APIs, which may be used to access
DOM data that can be controlled via a crafted URL:
document.location
document.URL
document.URLUnencoded
document.referrer
window.location
12.1.3 Trace the relevant data through the code to identify what actions are
performed with it. If the data (or a manipulated form of it) is passed to
one of the following APIs, the application may be vulnerable to XSS:
document.write()
document.writeln()
document.body.innerHtml
eval()
window.execScript()
window.setInterval()
window.setTimeout()
12.1.4 If the data is passed to one of the following APIs, the application may
be vulnerable to a redirection attack:
document.location
document.URL
document.open()
window.location.href
window.navigate()
window.open()
12.2 Check for Local Privacy Vulnerabilities
12.2.1 Review the logs created by your intercepting proxy to identify all the
Set-Cookie directives received from the application during your test-
ing. If any of these contains an expires attribute with a date that is in
the future, the cookie will be stored by users’ browsers until that date.
Review the contents of any persistent cookies for sensitive data.
12.2.2 If a persistent cookie is set that contains any sensitive data, a local attacker
may be able to capture this data. Even if the data is encrypted, an attacker
who captures it will be able to resubmit the cookie to the application
and gain access to any data or functionality that this allows.
12.2.3 If any application pages containing sensitive data are accessed over
HTTP, look for any cache directives within the server’s responses. If any
of the following directives do not exist (either within the HTTP headers
cc2211..iinndddd 885500 88//1199//22001111 1122::2222::0066 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 851
Chapter 21 n A Web Application Hacker’s Methodology 851
or within HTML metatags), the page concerned may be cached by one
or more browsers:
Expires: 0
Cache-control: no-cache
Pragma: no-cache
12.2.4 Identify any instances within the application in which sensitive data is
transmitted via a URL parameter. If any cases exist, examine the browser
history to verify that this data has been stored there.
12.2.5 For all forms that are used to capture sensitive data from the user (such
as credit card details), review the form’s HTML source. If the attribute
autocomplete=off is not set, within either the form tag or the tag for the
individual input fi eld, data entered is stored within browsers that sup-
port autocomplete, provided that the user has not disabled this feature.
12.2.6 Check for technology-specifi c local storage.
12.2.6.1 Check for Flash local objects using the BetterPrivacy plug-in
for Firefox.
12.2.6.2 Check any Silverlight isolated storage in this directory:
C:\Users\{username}\AppData\LocalLow\Microsoft\
Silverlight\
12.2.6.3 Check any use of HTML5 local storage.
12.3 Check for Weak SSL Ciphers
12.3.1 If the application uses SSL for any of its communications, use the tool
THCSSLCheck to list the ciphers and protocols supported.
12.3.2 If any weak or obsolete ciphers and protocols are supported, a suitably
positioned attacker may be able to perform an attack to downgrade or
decipher the SSL communications of an application user, gaining access
to his sensitive data.
12.3.3 Some web servers advertise certain weak ciphers and protocols as sup-
ported but refuse to actually complete a handshake using these if a
client requests them. This can lead to false positives when you use the
THCSSLCheck tool. You can use the Opera browser to attempt to per-
form a complete handshake using specifi ed weak protocols to confi rm
whether these can actually be used to access the application.
12.4 Check Same-Origin Policy Confi guration
12.4.1 Check for the /crossdomain.xml fi le. If the application allows unrestricted
access (by specifying ), Flash objects
cc2211..iinndddd 885511 88//1199//22001111 1122::2222::0066 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 852
852 Chapter 21 n A Web Application Hacker’s Methodology
from any other site can perform two-way interaction, riding on the ses-
sions of application users. This would allow all data to be retrieved, and
any user actions to be performed, by any other domain.
12.4.2 Check for the /clientaccesspolicy.xml fi le. Similar to Flash, if the
 confi guration is too permissive, other sites
can perform two-way interaction with the site under assessment.
12.4.3 Test an application’s handling of cross-domain requests using
XMLHttpRequest by adding an Origin header specifying a different
domain and examining any Access-Control headers that are returned.
The security implications of allowing two-way access from any domain,
or from specifi ed other domains, are the same as those described for the
Flash cross-domain policy.
13 Follow Up Any Information Leakage
13.1 In all your probing of the target application, monitor its responses for
error messages that may contain useful information about the error’s
cause, the technologies in use, and the application’s internal structure
and functionality.
13.2 If you receive any unusual error messages, investigate these using stan-
dard search engines. You can use various advanced search features to
narrow down your results. For example:
“unable to retrieve” filetype:php
13.3 Review the search results, looking both for any discussion about the
error message and for any other websites in which the same message has
appeared. Other applications may produce the same message in a more
verbose context, enabling you to better understand what kind of conditions
give rise to the error. Use the search engine cache to retrieve examples
of error messages that no longer appear within the live application.
13.4 Use Google code search to locate any publicly available code that may
be responsible for a particular error message. Search for snippets of error
messages that may be hard-coded into the application’s source code.
You can also use various advanced search features to specify the code
language and other details, if these are known. For example:
unable\ to\ retrieve lang:php package:mail
13.5 If you receive error messages with stack traces containing the names
of library and third-party code components, search for these names on
both types of search engine.
cc2211..iinndddd 885522 88//1199//22001111 1122::2222::0066 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 853
Index
A customer, 665–666 platforms, 264–265
Absinthe, 322 trust relationships in tiered programmatic, 282
absolute URLs, open redirection architecture, 649 referer-based, 266
vulnerabilities access controls role-based, 282
blocking, 544–545 account testing, 267–270 security, 278–283
prefi x, 545–546 API methods, 276–277 best practices, 279–280
“accept known good” approach, HTTP methods, 278 central component approach,
input, 24 limited access, 273–276 280
access multistage function, 271–273 multilayered privilege
ASP attackers, 658–660 static resources, 277 model, 280–283
ASP.NET API methods application mapping, 268–269 pitfalls, 278–279
database, 721 attackers, 266–278 static resources, 263–264
fi le, 720 types, 258–260 account testing, 277
ASPs and customer, 665–666 usernames and passwords, unprotected functionality, API
database 275–276 methods, 260–261
ASP.NET API methods, 721 back-end components, 357 vertical, 258
Java API methods, 714–715 broken, 7, 274 vulnerabilities, 258–266, 276
Perl language API methods, context-dependent, 258 application logic fl aws, 411
737–738 declarative, 282–283 Access-Control-Allow-
PHP API methods, 729–730 defective, 257 Origin headers, 528–529
defense mechanisms handling, discretionary, 282 account activation URLs, 184
18–21 fl aws, 284 account suspension, 197–198
authentication, 18–19 hacker’s methodology account testing, access controls,
control, 20–21 insecure access, 823 267–270
session management, 19–20 limited access, 822–823 API methods, 276–277
Java API methods multiple accounts, 822 HTTP methods, 278
database, 714–715 requirements, 821 limited access, 273–276
fi le, 713 horizontal, 258 multistage function, 271–273
Perl language API methods identifi er-based functions, static resources, 277
database, 737–738 261–262 Achilles proxy, 751
fi le, 737 insecure methods, 265–266 Action Message Format (AMF),
PHP API methods location-based, 266 135
database, 729–730 multistage functions, 262–263 Burp Suite, 137
fi le, 727–729 testing, 271–273 active scanning, 764–765
shared hosting parameter-based, 265–266 ActiveX controls, 447
attackers, 658–660 per-user segregation, 274 COMRaider, 558
853
bbiinnddeexx..iinndddd 885533 88//1199//22001111 1122::0011::3355 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 854
854 Index n A–A
hacker’s methodology, browser Java hacker’s methodology
extensions, 804 database access, 714–715 attack surface, 842
HTML modifi cation, 557 dynamic code execution, 715 incomplete input, 843
“safe for scripting” fi le access, 713 multistage functions,
registration, 555–557 OS command execution, 842–843
vulnerabilities, 555–556 715–716 transaction logic, 844
fi nding, 556–558 potentially dangerous, trust relationships, 844
preventing, 558–559 713–716 hacker’s methodology,
administrative functions, web sockets, 716 authentication, 811–813
applications, 35–36 URL redirection, 716 invalidating input validation,
administrators Java user input, 712 420–422
DBA, 325–326 JavaScript DOM-based, 740 lessons, 428–429
defense mechanisms handling Perl language login function, 426–427
attackers, alerting, 33–34 database access, 737–738 race conditions, 427
Ajax dynamic code execution, 738 nature of, 406
HTML5, 487 fi le access, 737 password change function,
stored XSS in uploaded fi les OS command execution, 738 409–410
via, 486–487 potentially dangerous, proceeding to checkout,
web functionality, 62–63, 384 736–739 410–411
Alcon, Wade, 565 sockets, 739 real-world, 406–407
alerts, 33–34 URL redirection, 738 rolling your own insurance,
Allaire JRun, 690–691 PHP 412–413
allow_url_include, 729 database access, 729–730 search function, 429
AMF. See Action Message dynamic code execution, abuse, 422–424
Format 730–731 security, 428
ampersand character, batch fi le access, 727–729 session management, 429
function, 360–361, 363 OS command execution, 731 shell metacharacters, 419
Anley, Chris, 218, 322, 634 potentially dangerous, source code, 428
anomalous event alerts, 33 727–732 SQL injection, 420–422
anti-CSRF tokens, 508–509, sockets, 732 application logs, 262
516–517 URL redirection, 731–732 application mapping, 73
XSS defeating, 509–510 server-side redirection, 392 access controls, 268–269
anti-XSS fi lters, 452 SQL injection, 291 analyzing, 97–113
IE, 748 versatility, 358 key areas, 97–98
AOL AIM Enterprise Gateway Apple iDisk Server, path attack surface, 111
application, 409 traversal vulnerabilities, 690 example, 112–113
Apache application. See web application Burp Suite, 268
chunked encoding overfl ow, application architecture. See comparisons, 268–269
688 tiered architectures enumerating content and
error messages, 628 application logic fl aws functionality, 74–97
mod_isapi, 688 access controls vulnerabilities, hacker’s methodology, 795–798
mod_proxy, 688 411 debug parameters, 798
refl ected XSS, 442 attack surface, 405 default content, 797
Tomcat, 673 audit trail, 429 enumerating identifi ers,
virtual hosting, 683 authentication, 415–416 797–798
API methods avoiding, 428–429 hidden content, 796–797
access controls to, 260–261 beating business limit, 416–417, public information resources,
account testing, 276–277 429 796
ASP.NET breaking bank, 414–416 tokens to sessions, 818
database, 721 bulk discount cheating, 418, 429 visible content, 795–796
dynamic code execution, 722 debugger messages, 424–426 hidden content
fi le access, 720 developers, 429–430 brute-force techniques
OS command execution, encryption oracle, 407–408 discovering, 81–85
722–723 “remember me” function, 407 discovering, 80–93