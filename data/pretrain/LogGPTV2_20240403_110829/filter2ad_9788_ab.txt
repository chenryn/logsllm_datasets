讲solr目录下所有jar包导入 lib目录下 add as library
配置远程调试
断点成功停住
当然也可以下载solr源码，idea直接打开，配置Remote，远程调试，看源码总是正规的嘛
## 2.Solr较高版本
### 2.1 环境搭建
大体同上，只不过启动时，没有了start.jar 改为bin目录下的solr.bat
    ./solr.cmd -f -a "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=10010" -port 8983 -s "C:\Solr\solr-6.4.0\example\example-DIH\solr"
    solr.cmd start -p 8983 -s "C:\Solr\solr-6.4.0\example\example-DIH\solr"
PS:这里注意一点，需要jdk8及以上 以及 **solr.cmd -f -e dih** 加载example 然后solr stop -p 8983
再启动，加上 -s "C:\Solr\solr-6.4.0\example\example-DIH\solr" 要不然漏洞复现不出来。
    solr.cmd -f -a "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=10010" -port 8983 -s "C:\Solr\solr-8.6.3\example\example-DIH\solr"
### 2.2 动态调试
下载源码，配置Remote即可
2.3 PS Cloud模式下的 debug
    solr.cmd -c -f -a "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=10010" -p 8983
    solr.cmd -c -f -a "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=10010" -p 8983
    调试solr的启动过程
    java -Xdebug -Xrunjdwp:transport=dt_socket,address=10010,server=y,suspend=y -jar start.jar --module=http
创建一个新的核心
在此感谢Whippet师傅！
# 三、源码分析
## 1.Apache Solr架构
### (1) Request Handler
Solr 用来处理http请求处理程序的模块，无论是api又或者是web前台的，这也是我们漏洞挖掘时需要主要关注的部分
### (2) Search Component
Solr的搜索组件，提供搜索功能服务。
### (3) Query Parser
Solr查询解析器解析我们传递给Solr的查询，并验证查询是否存在语法错误。 解析查询后，它会将它们转换为Lucene理解的格式。
### (4) Response Writer
Solr处理响应的功能模块，是为用户查询生成格式化输出的组件。Solr支持XML，JSON，CSV等响应格式。对于每种类型的响应，都有不同的响应编写器。
### (5) Analyzer / tokenizer
Lucene以令牌的形式识别数据。 Apache Solr分析内容，将其划分为令牌，并将这些令牌传递给Lucene。Apache
Solr中的分析器检查字段文本并生成令牌流。标记生成器将分析器准备的标记流分解为标记。
### (6) Update Request Processor
每当我们向Apache Solr发送更新请求时，请求都通过一组插件（签名，日志记录，索引）运行，统称为 更新请求处理器
。此处理器负责修改，例如删除字段，添加字段等
## 2.目录结构
### 1.运行目录结构
├─bin大量的Solr控制台管理工具存在该目录下
├─contrib包含大量关于Solr的扩展
│ ├─analysis-extras该目录下面包含一些相互依赖的文本分析组件
│ ├─clustering该目录下有一个用于集群检索结果的引擎
│ ├─dataimporthandlerDIH组件，该组件可以从数据库或者其他数据源导入数据到Solr中
│ ├─dataimporthandler-extras包含了对DIH的扩展
│ ├─extraction集成Apache Tika，用于从普通格式文件中提取文本
│ ├─jaegertracer-configurator
│ ├─langid该组件使得Solr拥有在建索引之前识别和检测文档语言的能力
│ ├─ltr
│ ├─prometheus-exporter
│ └─velocity包含一个基于Velocity模板语言简单检索UI框架
├─distSolr的核心JAR包和扩展JAR包。当我们试图把Solr嵌入到某个应用程序的时候会用到核心JAR包。
│ ├─solrj-lib包含构建基于Solr的客户端时会用到的JAR包
│ └─test-framework包含测试Solr时候会用到的JAR包
├─docsSolr文档
├─exampleSolr的简单示例
│ ├─cloud
│ ├─example-DIH
│ ├─exampledocs
│ ├─files
│ └─films
├─licenses各种许可和协议
└─server本地把Solr作为服务运行的必要文件都存放在这里
├─contexts启动Solr的Jetty网页的上下文配置
├─etcJetty服务器配置文件，在这里可以把默认的8983端口改成其他的
├─libJetty服务器程序对应的可执行JAR包和响应的依赖包
│ └─ext
├─logs日志将被输出到这个文件夹
├─moduleshttp\https\server\ssl等配置模块
├─resources存放着Log4j的配置文件
├─scriptsSolr运行的必要脚本
│ └─cloud-scripts
├─solr运行Solr的配置文件都保存在这里。solr.xml文件，提供全方位的配置；zoo.cfg文件，使用SolrCloud的时候有用。子文件夹/configsets存放着Solr的示例配置文件。各个生成的core也放在这里
以及configsets等
│ ├─.system_shard1_replica_n1
│ ├─aaa_shard1_replica_n1
│ ├─configsets
│ │ ├─sample_techproducts_configs
│ ├─filestore
│ ├─userfiles
│ └─zoo_data
│ └─version-2
├─solr-webapp管理界面的站点就存放在这里
│ └─webapp
│ └─WEB-INF
└─tmp存放临时文件
├─jetty-0_0_0_0-8983-webapp-_solr-any-7904109470622189110.dir
### 2.Solr Home目录结构
单例模式下
       solr.xml
       core_name1/
          core.properties
          conf/
             solrconfig.xml
             managed-schema
          data/
       core_name2/
          core.properties
          conf/
             solrconfig.xml
             managed-schema
          data/
colud模式下
    /
       solr.xml
       core_name1/
          core.properties
          data/
       core_name2/
          core.properties
          data/
## 3.源码结构
├─binSolr控制台管理工具存在该目录下
├─contrib包含大量关于Solr的扩展 同安装目录中一样
├─corecore的核心
│ └─src
│ ├─java.org.apache.solr
│ │ ├─analysis文本分析处理类，其中没有很多核心实现，主要调用了lucene重点的核心功能
│ │ ├─apiSolr对外提供给的API(两个版本)处理包
│ │ ├─client.solrj.embeddedSolr中嵌入了jetty，这里存在Jetty的配置类以及嵌入式启动类
│ │ ├─cloudSolr在cloud模式下云的的相关处理包，包含zk相关的处理类
│ │ ├─corecore相关的处理包 solrcore solrinfo CoreDescriptor等
│ │ ├─filestore文件处理包
│ │ ├─handler请求程序处理包
│ │ │ ├─admin
│ │ │ ├─component
│ │ │ ├─export
│ │ │ ├─loader
│ │ │ ├─sql
│ │ │ └─tagger
│ │ ├─highlight solr高亮功能包
│ │ ├─index
│ │ ├─internal
│ │ ├─legacy
│ │ ├─logging日志功能处理包
│ │ ├─metrics
│ │ ├─packagemanager
│ │ ├─parser解析器包
│ │ ├─pkg
│ │ ├─query查询功能处理
│ │ ├─request请求前置处理 SolrQueryRequestBase在这里
│ │ ├─response返回数据处理
│ │ ├─restrest功能，包含restApi处理逻辑
│ │ ├─schema模式定义
│ │ ├─searchsearch功能程序处理包
│ │ │ ├─join
│ │ │ ├─mlt
│ │ │ ├─similarities
│ │ │ └─stats
│ │ ├─security安全功能处理包