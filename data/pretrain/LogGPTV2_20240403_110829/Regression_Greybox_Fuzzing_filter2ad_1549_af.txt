### Deduplication Results and Heuristics Effectiveness

#### Figure 6: Deduplication Results (NoAge and NoChurn)
- **Description**: This figure illustrates the deduplication results for two heuristics, NoAge and NoChurn. 
- **Key Findings**:
  - NoChurn is the only variant that identifies additional UaF (Use After Free) and double-free bugs in LibXML2.
  - Both variants identify the same set of bugs across other subjects.
  - NoChurn has a higher median than NoAge for approximately the same number of subjects as NoAge has a higher median than NoChurn.

#### Table 3: Individual Effectiveness of Our Heuristics
- **Metrics**:
  - **Mean TTE (Time to Error)**
  - **#Crashing Trials**
  - **Mean #Crashes**

| Subject        | Mean TTE (NoAge/NoChurn) | Factor | #Crashing Trials (NoAge/NoChurn) | Factor | Mean #Crashes (NoAge/NoChurn) | Factor |
|----------------|--------------------------|--------|----------------------------------|--------|-------------------------------|--------|
| libgit2        | 00h 00m / 00h 08m        | 0.8    | 00h 07m / 00h 12m                | 0.9    | 70.80 / 68.55                 | 1.0    |
| file           | 00h 14m / 00h 30m        | 0.9    | 01h 39m / 02h 21m                | 1.1    | 5.90 / 4.80                   | 1.0    |
| yara           | 02h 09m / 01h 42m        | 1.1    | 20.80 / 17.90                    | 1.0    | 20 / 20                       | 1.0    |
| libxml2        | 04h 40m / 04h 18m        | 0.9    | 754.85 / 712.70                  | 1.0    | 6.40 / 6.75                   | 1.0    |
| aspell         | 00h 47m / 00h 43m        | 1.1    | 164.45 / 98.85                   | 1.0    | 11.60 / 12.25                 | 1.0    |
| libhtp         | 08h 57m / 08h 42m        | 1.4    | 6.40 / 6.45                      | 1.0    | 19 / 19                       | 1.0    |
| openssl        | 07h 03m / 11h 50m        | 0.3    | 11.60 / 12.25                    | 1.0    | 20 / 20                       | 1.0    |
| grok           | 12h 20m / -              | 11.7   | 4.30 / 6.10                      | 1.1    | 0 / 0                         | -      |
| unbound        | 00h 00m / 00h 00m        | 1.1    | 0.15 / 0.05                      | 0.3    | 0 / 0                         | -      |
| zstd           | 00h 00m / 00h 00m        | 1.0    | 4.5 / 7.00                       | 0.6    | 0 / 0                         | -      |
| usrsctp        | 00h 00m / 00h 00m        | 1.0    | 0.60 / 0.00                      | 0.6    | 0 / 0                         | -      |
| systemd        | 00h 00m / 00h 00m        | 1.0    | 0 / 0                            | -      | 0 / 0                         | -      |
| neomutt        | 00h 00m / 00h 00m        | 1.0    | 0 / 0                            | -      | 0 / 0                         | -      |
| openvswitch    | 00h 00m / 00h 00m        | 1.0    | 0 / 0                            | -      | 0 / 0                         | -      |
| picotls        | 00h 00m / 00h 00m        | 1.0    | 0 / 0                            | -      | 0 / 0                         | -      |

#### Observations
- **Time-to-Error (TTE)**:
  - A notable difference in TTE is observed for `libhtp`, where NoAge finds the regression in half the time.
  - For `usrsctp`, NoChurn outperforms NoAge significantly in terms of crashing trials and the mean number of unique crashes.
  
- **Code Churn and Age**:
  - In `libhtp`, the churn heuristic is more effective because the basic blocks have been changed multiple times, while the code age is between one and six years old.
  - For `usrsctp`, neither age nor churn stands out, but NoChurn still performs better.

- **Reproducibility**:
  - Note that the crashes in `usrsctp` could not be reproduced during deduplication, hence it is not shown in Figures 5 or 6.

#### Conclusion
- The effectiveness of the heuristics varies by subject. NoChurn generally outperforms NoAge in terms of finding unique bugs, particularly in `libxml2`.
- The churn heuristic is more effective for subjects with frequently changed code, such as `libhtp`.
- Further analysis and testing are needed to understand the specific conditions under which each heuristic performs best.