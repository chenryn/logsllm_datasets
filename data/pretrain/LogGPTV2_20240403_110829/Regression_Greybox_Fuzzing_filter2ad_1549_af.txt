●●●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●●●
●
●
●●
●
●
●
●●
●
●
●
●
●●
●
●
● ●
●
yara_11945
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
● ●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●●●
●
●
●
●●
●
10
5
0
20
15
10
5
0
20
15
10
5
0
grok_27386*
●●
●
●
●
libxml2_17737*
●
●
●
●
●
●
●
●
●
●
●
● ●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●●
yara_19591*
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
grok_27428
grok_28227
libgit2_11007
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●●
●
●●
●
●
●●●
●
●
●
●
●
●
●
libxml2_UaF
●
●
●
●
●
●
●
15
10
5
0
20
15
10
5
0
1.5
1.0
0.5
0.0
15
10
5
0
●
●
●
●
libxml2_dblfree
●
zstd_14368*
●
●
●
●
6
4
2
0
12
8
4
0
15
10
5
0
●
●
●
●
●
●
●
●
●
●
●
● ●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
openssl_17715*
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●●●
Fuzzer
●
●
aflchurn_nochurn
aflchurn_noage
)
s
r
u
o
h
n
i
(
h
s
a
r
c
t
s
r
i
f
o
t
e
m
T
i
15
10
5
0
20
15
10
5
0
20
15
10
5
0
Figure 6: Deduplication Results (NoAge and NoChurn). Individual effectiveness of the two heuristics: NoAge is a variant of
AFLChurn that is guided only by how frequently the executed code has been changed. NoChurn is a variant that is guided
only by how recently the executed code has been changed.
Table 3: Individual effectiveness of our heuristics.
Mean TTE
#Crashing Trials
Mean #Crashes
Subject
libgit2
file
yara
libxml2
aspell
libhtp
openssl
grok
unbound
zstd
usrsctp
systemd
neomutt
openvswitch
picotls
NoAge NoChurn Factor NoAge NoChurn Factor NoAge NoChurn Factor
00h 00m
1.0
00h 08m
0.8
00h 14m
0.9
00h 30m
0.9
02h 09m
1.1
01h 42m
0.6
04h 40m
0.9
00h 47m
1.1
08h 57m
1.4
07h 03m
0.3
12h 20m
11.7
-
-
-
-
-
-
-
-
00h 00m 1.1
00h 07m 0.8
00h 12m 0.9
01h 39m 3.3
02h 21m 1.1
03h 20m 2.0
04h 18m 0.9
00h 43m 0.9
08h 42m 1.0
08h 22m 1.2
11h 50m 1.0
-
-
-
-
70.80
1.0
5.90
1.0
1.0
20.80
1.0 754.85
1.0
6.40
1.0 164.45
7.20
1.0
11.60
1.0
4.30
1.1
0.15
0.3
4.5
0.60
0
-
0
-
0
-
-
0
68.55
4.80
17.90
712.70
6.75
98.85
6.45
12.25
6.10
0.05
7.00
0
0
0
0
20
20
20
20
20
19
20
20
19
1
9
-
-
-
-
20
20
20
20
20
20
20
20
18
3
2
-
-
-
-
-
-
-
-
1○
2○
3○
winner. In terms of time-to-error, we observe a notable difference
only for libhtp, where NoAge finds the regression in half the time.
Indeed, as we can see in Figure 8, CL2śCL6 are all among the one-
third of basic blocks that have been changed more than three or
four times. On the other hand, most of the stack trace lives in code
that is between one and six years old. This might explain why the
churn and not the age heuristic is effective for libhtp. In terms of
crashing trials and the mean number of unique crashes, one notable
subject is usrsctp where NoChurn substantially outperforms NoAge.
However, in Figure 8, neither age nor churn stand particularly out
for usrsctp.8
Figure 6 shows the deduplication results for NoAge and NoChurn.
Only NoChurn finds the additional UaF and double-free bugs in
LibXML2. Otherwise, both variants find the same bugs. Across all
subjects, NoChurn has a higher median than NoAge for roughly
the same number of subjects as NoAge has a higher median than
NoChurn.
8Recall from Section 5.1, that we were unable to reproduce the crashes in usrsctp
during deduplication. Hence, usrsctp is not shown in Figures 5 or 6.
15
10
5
0
i
e
z
S
n
o
i
t
c
e
s
r
e
t
n
I
afl
noage
aflchurn
nochurn
0
15
10
5
Set Size
15
●
●
●
●
2
●
●
1
●
1
●
●
1
●
●