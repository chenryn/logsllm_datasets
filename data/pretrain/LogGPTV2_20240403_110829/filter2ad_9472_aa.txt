# 0x00 介绍
## 工具介绍
RedGuard，是一款C2设施前置流量控制技术的衍生作品，有着更加轻量的设计、高效的流量交互、以及使用go语言开发具有的可靠兼容性。它所解决的核心问题也是在面对日益复杂的红蓝攻防演练行动中，给予攻击队更加优秀的C2基础设施隐匿方案，赋予C2设施的交互流量以流量控制功能，拦截那些“恶意”的分析流量，更好的完成整个攻击任务。
RedGuard是一个C2设施前置流量控制工具，可以避免Blue Team,AVS,EDR,Cyberspace Search Engine的检查。
## 应用场景
  * 攻防演练中防守方根据态势感知平台针对C2交互流量的分析溯源
  * 防范云沙箱环境下针对木马样本的恶意分析
  * 阻止恶意的请求来实施重放攻击，实现混淆上线的效果
  * 在明确上线服务器IP的情况下，以白名单的方式限制访问交互流量的请求
  * 防范网络空间测绘技术针对C2设施的扫描识别，并重定向或拦截扫描探针的流量
  * 支持对多个C2服务器的前置流量控制，并可实现域前置的效果实现负载均衡上线，达到隐匿的效果
  * 能够通过请求IP反查API接口针对根据 IP 地址的归属地进行地域性的主机上线限制
  * 通过目标请求的拦截日志分析蓝队溯源行为，可用于跟踪对等连接事件/问题
  * 具有自定义对样本合法交互的时间段进行设置，实现仅在工作时间段内进行流量交互的功能
  * Malleable C2 Profile 解析器能够严格根据 malleable profile验证入站 HTTP/S 请求，并在违规情况下丢弃外发数据包（支持Malleable Profiles 4.0+）
  * 内置大量与安全厂商相关联的设备、蜜罐、云沙箱的IPV4地址黑名单，实现自动拦截重定向请求流量
  * 可通过自定义工具与样本交互的SSL证书信息、重定向URL，以规避工具流量的固定特征
  * ..........
# 0x01 安装
可以直接下载并使用已经编译好的版本，也可以远程下载go包进行自主编译执行。
    git clone https://github.com/wikiZ/RedGuard.git
    cd RedGuard
    # 也可以使用upx压缩编译后的文件体积
    go build -ldflags "-s -w"
    # 赋予工具可执行权限，并进行初始化操作
    chmod +x ./RedGuard&&./RedGuard
# 0x02 配置说明
## 初始化
如下图，首先对RedGuard赋予可执行权限并进行初始化操作，第一次运行会在当前用户目录下生成配置文件，以实现灵活的功能配置，
**配置文件名：.RedGuard_CobaltStrike.ini** 。
**配置文件内容：**
cert的配置选项主要是针对样本与C2前置设施的HTTPS流量交互证书的配置信息，proxy主要用于配置反向代理流量中的控制选项，具体使用会在下面进行详细讲解。
在流量的交互中使用的SSL证书会生成在RedGuard执行所在目录下的cert-rsa/目录下，可以通过修改配置文件进行工具的基础功能启停
**(证书的序列号是根据时间戳生成的，不用担心被以此关联特征)** 。如果你想要使用自己的证书，只需要重命名为ca.crt和ca.key覆盖在cert-rsa/目录下即可。
    openssl x509 -in ca.crt -noout -text
每次启动RedGuard都会更新随机TLS JARM指纹，防止被以此佐证C2设施。
## RedGuard Usage
    root@VM-4-13-ubuntu:~# ./RedGuard -h
    Usage of ./RedGuard:
      -allowIP string
            Proxy Requests Allow IP (default "*")
      -allowLocation string
            Proxy Requests Allow Location (default "*")
      -allowTime string
            Proxy Requests Allow Time (default "*")
      -common string
            Cert CommonName (default "*.aliyun.com")
      -country string
            Cert Country (default "CN")
      -dns string
            Cert DNSName
      -drop string
            Proxy Filter Enable DROP (default "false")
      -host string
            Set Proxy HostTarget
      -http string
            Set Proxy HTTP Port (default ":80")
      -https string
            Set Proxy HTTPS Port (default ":443")
      -ip string
            IPLookUP IP
      -locality string
            Cert Locality (default "HangZhou")
      -location string
            IPLookUP Location (default "风起")
      -malleable string
            Set Proxy Requests Filter Malleable File (default "*")
      -organization string
            Cert Organization (default "Alibaba (China) Technology Co., Ltd.")
      -redirect string
            Proxy redirect URL (default "https://360.net")
      -type string
            C2 Server Type (default "CobaltStrike")
      -u    Enable configuration file modification
**P.S. 可以使用参数命令的方式修改配置文件，当然我觉得可能直接vim手动修改更方便。**
# 0x03 工具使用
## 基础拦截
如果直接对反向代理的端口进行访问，则会触发拦截规则，这里通过输出的日志可以看到客户端请求根目录，但是因为其请求过程未带有请求的凭证，也就是正确的HOST请求头所以触发了基础拦截的规则，流量被重定向到了
这里为了方便展示输出效果，实际使用可以通过`nohup ./RedGuard &`后台运行。
    {"360.net":"http://127.0.0.1:8080","360.com":"https://127.0.0.1:4433"}
从上面的slice不难看出，360.net对应了代理到本地8080端口，360.com指向了本地的4433端口，且对应了使用的HTTP协议的不同，在后续上线中，需要注意监听器的协议类型需要和这里设置的保持一致，并设置对应HOST请求头。
如上图，在未授权情况下，我们得到的响应信息也是重定向的站点返回信息。
## 拦截方式