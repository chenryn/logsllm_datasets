cation; likewise, the server cannot trick Alice into thinking
that Bob is nearby without guessing the difference of their
locations.
Performance. The entire protocol requires a small number
of additions and one multiplication mod p plus two evalua-
tions of AES. The total message trafﬁc is 12 bytes per edge
assuming p is 32 bits. Message encryption adds a few bytes
to every message.
Comparing the two protocols. We presented two private
equality testing protocols. Which protocol to use depends
on the level of trust in the server and the clients’ comput-
ing power. The ﬁrst protocol makes no use of a server, but
is computationally expensive and requires the two users to
communicate synchronously. The second protocol is asyn-
chronous (Bob need not be online when Alice queries the
server) which ﬁts better with our application.
In spite of the asynchronicity, due to the need for a
counter, each message from Bob can be used in one pro-
tocol execution by Alice, which means that we cannot use
the optimization where Bob only sends messages when he is
moving. In the appendix we present an asynchronous vari-
ant of Protocol 1 using an oblivious server (synchrony is not
inherent in Protocol 1). The protocol has only one round of
communication between Alice and the Server (Protocol 2
has two such rounds). This variant is identical to Protocol 1
in terms of computational efﬁciency (per invocation). The
security properties are similar to protocol 2: a collusion be-
tween Alice and the server reveals Bob’s location.
All the protocols are asymmetric since only Alice learns
the answer. They can be made symmetric (if needed) by
executing the protocol twice, once in each direction.
4 Location tags
Location tags were ﬁrst studied by Qiu et al [36]. For our
purposes, a location tag is a secret associated with a point
It is a collection of location features
in space and time.
derived from (mostly electromagnetic) signals present in the
physical environment.
Location tagging is a procedure to extract the tag from a
point in space-time, together with a comparison or matching
function. The matching function can be based on Hamming
distance, set distance, etc. The two key properties are:
Reproducibility. If two measurements at the same place
and time yield tags τ and τ(cid:48), then τ and τ(cid:48) match with high
probability. Note that they need not be equal as strings.
Unpredictability. An adversary not at a speciﬁc place
or time should be unable to produce a tag that matches the
tag measured at that location at that time.
To ﬁx intuition, a single location feature can be thought
of as having around 10 bits of entropy, whereas the pre-
dictability of a location tag is much lower, say 2−64.
Location tags provide a different model for proximity
testing. The main advantage is that since the location tags
of the two parties need to match, spooﬁng the location is no
longer possible, which stops online brute force attacks.
The main disadvantage is that users no longer have con-
trol over the granularity of proximity: the notion of neigh-
borhood is now entirely dependent on the type of location
tag considered. For example, with WiFi packets, the neigh-
borhood is deﬁned by the range of the wireless network in
question. To further exemplify, we found that three con-
tiguous buildings at our university belonging to the CS and
EE departments comprise one “virtual LAN,” and form one
neighborhood in our system.
Some types of location tags we consider below are more
time-varying than others. Note that the location tags stud-
ied in the original paper [36] are required to be time in-
variant. The authors take extra steps to make the tag stable
over time. In our settings, the time-varying nature of loca-
tion tags is necessary for security (otherwise an attacker can
record location tags in advance).
Protocol
ARP
BROWSER
DHCP
MDNS
NBNS
All
Device 1 Device 2 Common
832
255
208
541
1117
2953
1088
262
249
600
1134
3333
1071
286
237
551
1190
3335
Table 1. Packet counts
4.1 Constructing location tags
Now we discuss several possible ways to extract loca-
tion tags. We have experimentally studied the ﬁrst method
and show it to be well suited as a source of location tags.
The remaining methods depend on additional features on
the phone and we point to papers that study their viability
as location tags.
WiFi: broadcast packets. The contents of the WiFi trafﬁc
offer a rich potential for extracting location tags. Broad-
cast packets comprise a variety of different protocols. The
source and destination IP addresses, sequence numbers of
packets, and precise timing information all offer varying de-
grees of entropy.
We performed an experiment on the Stanford univer-
sity campus to test the rate and quality of location fea-
tures that can be extracted. To do so, we ignored the traf-
ﬁc that is not restricted to the local network. For exam-
ple, TCP packets likely originate from external networks,
and so an attacker might be able to predict or control the
contents of some of those packets, so we ignore them. Of
the protocols carrying purely local trafﬁc, we restricted our-
selves to the top 5 protocols by number of packets: ‘ARP’,
‘BROWSER’,4 ‘DHCP’, ‘MDNS’, and ‘NBNS’. We further
limited ourselves to broadcast packets; capturing all packets
in “promiscuous mode” would yield many more packets if
this mode is supported by the device.
We logged the packets thus ﬁltered from two different
devices over a period of 223 seconds and compared them.
We received around 3,300 packets on each, for a rate of
around 15.0 packets/sec. Table 1 summarizes the degree of
similarity between the two logs.
As we can see, around 90% of the packets are common to
both devices. Based on the volume of trafﬁc, we can derive
meaningful location tags within 2-3 seconds.
According to a simple histogram estimator, the entropies
of the various ﬁelds are 6.9±0.1 bits for the source address,
1.9 ± 0.1 bits for the destination address, 2.07 ± 0.01 bits
for the protocol identiﬁer and 7.6 ± 0.1 bits for the content
of the packet. These measurements were computed from
4 samples of 1,000 packets each. The numbers are likely
4This refers to Microsoft SMB server and not to web browsing activity.
underestimates since the histogram estimator has negative
bias; on the other hand, the total entropy is less than the
sum due to correlations between the attributes. It appears
reasonable to conclude that each location feature has an en-
tropy of at least 10 bits under trafﬁc conditions similar to
those in our experiment.
One problem with using WiFi packets for location tags
is that both users need to use the same wireless network.
One way to get around this, if the device has multiple inter-
faces, to execute the protocol multiple times, once for each
network. Heuristics such as picking the network with the
highest signal strength or the network with the alphabeti-
cally lowest MAC address among the networks with signal
strength greater than a threshold might be sufﬁcient in prac-
tice.
GPS. The Global Positioning System works by timing sig-
nals sent by a number of orbital satellites. GPS consists
of several signals, including “P (Y )” (encrypted precision
code) and “M-code” (military). Unlike the civilian code,
military codes are designed to be unpredictable without a
secret key. Recent work by Lo et al. [27] shows that the
composition of P (Y ) or M signals from four or more satel-
lites forms a secure location tag that is temporally and spa-
tially unpredictable by design, as needed for our applica-
tion. These tags would have a conﬁgurable granularity and
are therefore ideal for our settings.
Since these codes run at a higher frequency than the
civilian code (to provide better accuracy), current commer-
cial GPS receivers are too slow to measure them. Lo et
al. argue that the next generation Broadcom GPS receivers
will have the ability to measure at these higher rates making
GPS-based location tags practical for mobile devices.
GSM. In cellular networks, various (GSM) cell towers are
in range at any one time. Each tower has space- and time-
varying characteristics such as signal strength. This seems
like a promising location tag and we leave it for future work
to conﬁrm its reproducibility and unpredictability.
Bluetooth. Like WiFi IDs, Bluetooth IDs are unique to
each device. They have the advantage over WiFi IDs of al-
most always being associated with mobile rather than ﬁxed
devices, making Bluetooth-based location tags more time-
variable. One concern with Bluetooth is that the range may
be too small to be very useful. We therefore believe that
Bluetooth is not a good source for location tags.
Audio. Audio might be useful in certain limited circum-
stances to extract location features. For example, music
playing in the background in a coffee shop or a talk in a
conference room. Acoustic ﬁngerprinting is a well-known
technique to extract features from audio in a way that is ro-
bust to transformation of the audio such as compression and
adding noise. It is used as a way to identify an audio sig-
nal from a database of tracks (e.g., in the mobile application
Shazam). Similar feature extraction techniques can provide
part of a location tag.
Atmospheric gases. The cell-phone-as-sensor project has
experimented with CO, NOx and temperature sensors on
cell phones and hopes this will become standard on smart-
phones so that it can be used for real-time pollution map-
ping and other applications [20, 34]. If these sensors ever
become mainstream, they are another potential source of lo-
cation tags.
4.2 Proximity testing using location tags
One way to formulate the underlying cryptographic
problem of private proximity testing using location tags is
private set intersection. Alice and Bob have sets A and B
respectively and wish to privately compute |A ∩ B|. A and
B represent location tags; the players conclude that they are
nearby if the size of the intersection exceeds a threshold t.
Private set intersection is a well studied problem and
an elegant solution was given by Freedman, Nissim and
Pinkas [13]. Other approaches to private set intersection are
given in [18, 21, 22, 19]. The protocol of Freedman, Nis-
sim and Pinkas makes use of a homomorphic encryption
scheme E that anyone can encrypt and Alice can decrypt.
At the end of the following protocol, Alice learns |A ∩ B|
and Bob learns nothing:
• Alice interpolates a polynomial p whose set of zeroes
is the set A.
• Alice sends E(p) to Bob, i.e., the sequence of en-
crypted coefﬁcients
• Bob evaluates E(p(b)) for each b ∈ B.
• For each b ∈ B, Bob picks a random r and computes
E(rp(b))
• Bob sends to Alice a permutation of the encryptions
computed in the previous step
• Alice decrypts each value she receives; she outputs the
number of nonzero decryptions as |A ∩ B|.
Note that there are homomorphic encryption schemes
where it is possible to multiply inside encryption by a con-
stant using O(1) modular exponentiations. To see that this
protocol works, observe that rp(b) is zero if b ∈ A and a
random nonzero value otherwise.
This protocol has two disadvantages in our setting. First,
it requires θ(|A| · |B|) modular exponentiations (E(p(b))
can be evaluated using Horner’s rule using O(|A|) modular
exponentiations, and there are |B| such encryptions to com-
pute). Second, it is only secure against semi-honest players.
There is a version that handles malicious players, but it is
signiﬁcantly less efﬁcient. More recent protocols can be
more efﬁcient [18, 21, 22, 19].
More importantly, revealing the size of the intersection
can be a privacy breach. This is of course a weakness of
the problem formulation rather than the protocol. It allows
Alice to carry out an online brute force attack by incorrectly
reporting her input set A. This can be a problem when the
individual location features have low entropy.
To avoid this weakness, we formulate the problem differ-
ently. Speciﬁcally, we consider the following relaxation of
private threshold set intersection: Alice and Bob have sets
A and B respectively of n elements each and wish to deter-
mine if |A∩ B| ≥ t. If the condition does not hold, then the
parties should learn nothing except the fact that |A∩B|  t, the formulation is
similar to private threshold set intersection. Note that in our
settings the quantities n and t are globally ﬁxed since if they
were allowed to depend on the location, that might itself be
a privacy leak. Freedman, Lindell and Pinkas [13] provide
a solution that always keeps A and B private (even when
|A ∩ B| ≥ t) using generic Yao circuit evaluation which is
too slow for our purposes.
We construct an efﬁcient protocol for relaxed private
threshold set intersection. Security depends on the random-
ness of the participants’ input distribution (i.e. the random-
ness of location tags). More precisely, let X denote the
domain of location tags. We need the following properties:
• If Alice and Bob are “nearby,” we assume that A and
B are sampled as follows: for some t(cid:48) ≥ t, A =
, A ∈R
C ∪ A(cid:48) and B = C ∪ B(cid:48) where C ∈R X t(cid:48)
X n−t(cid:48)
. This means that their location
tags are random subject to the constraint that at least t
of them match.
, B(cid:48) ∈R X n−t(cid:48)
• Alice and Bob are “apart,” A and B are sampled as
before for some t(cid:48) < 2t − n.
Observe that there is a gap (of n − t) between the two
conditions above. The protocol makes no guarantees on
correctness or security when neither the “nearby” nor the
“apart” condition holds. This is to be expected, and is anal-
ogous to the approximation factor in the grid-based proto-
cols. If we imagine the predictability of location tags in-
creasing gradually from 0 to 100% as one approaches the
target location, then it translates to a gap between the max-
imum distance at which we can guarantee detection and the
minimum distance at which we can guarantee privacy.
We now describe a protocol for the asymmetric version
of relaxed private threshold set intersection. Here it is Bob
who obtains the answer while Alice learns nothing.
Protocol 3.
• Alice encodes her input as a set P of points {(p1, x1),
(p2, x2) . . . (pn, xn)} where pi ∈ F and xi ∈ F. Sim-
ilarly Bob encodes his input as a set Q = {(q1, y1),
(q2, y2) . . . (qn, yn)}.
• Alice constructs a polynomial p of degree n−1 deﬁned
by the points P . Alice picks a random set of points R
on p such that R ∩ P = {} and |R| = 2(n − t).
• Alice sends R to Bob.
• Bob attempts to ﬁnd a polynomial p(cid:48) of degree n − 1
that passes through at least 2n−t of the points in Q∪R.
If he is successful, he outputs 1 otherwise he outputs
0.