                for fileCfg in fileCfgList:
                    fileCfg = fileCfg.split("")[0]
                    file_appname = fileCfg.split(",")[4]
                    file_tag = fileCfg.split(",")[5]
                    file_snmptype = fileCfg.split(",")[6]
                    file_args = fileCfg.split(",")[7].split(" ")
                    try:
                        file_args.remove("")
                    except Exception, e:
                        pass
                    file_args.append(fileCfg.split(",")[2])
                    file_args.append(fileCfg.split(",")[3])
                    if appname == file_appname and tag == file_tag and args == file_args and snmptype == file_snmptype:
                        flag = True
                        break
                if not flag:
                    dt = {}
                    dt['appname'] = appname
                    dt['tag'] = tag
                    dt["snmptype"] = snmptype
                    dt['args'] = args
                    dt['type'] = 2
                    dt['source'] = hekaCfg['source']
                    chgList.append(dt)
            #判断新增
            for fileCfg in fileCfgList:
                fileName = fileCfg.split("")[1]
                fileCfg = fileCfg.split("")[0]
                appname = fileCfg.split(",")[4]
                tag = fileCfg.split(",")[5]
                snmptype = fileCfg.split(",")[6]
                args = fileCfg.split(",")[7].split(" ")
                try:
                    args.remove("")
                except Exception, e:
                    pass
                args.append(fileCfg.split(",")[2])
                args.append(fileCfg.split(",")[3])
                flag = True
                for hekaCfg in hekaCfgList:
                    heka_appname = hekaCfg["appname"]
                    heka_tag = hekaCfg["tag"]
                    heka_args = hekaCfg["args"]
                    heka_snmptype = hekaCfg["snmptype"]
                    if appname == heka_appname and tag == heka_tag and args == heka_args and heka_snmptype == snmptype:
                        flag = False
                        break
                if flag:
                    dt = {}
                    dt['appname'] = appname
                    dt['tag'] = tag
                    dt['args'] = args
                    dt['type'] = 1
                    dt['filename'] = fileName
                    dt['snmptype'] = snmptype
                    chgList.append(dt)
            chgInfo[agent] = chgList
        return chgInfo
    def __generatebatchid(self):
        sql = "select max(batchid) from snmp_hekacfg_batch"
        maxinfo = self.conn.query(sql)
        if maxinfo[0][0] == None:
            return 1
        else:
            return maxinfo[0][0] + 1
    def __generatebatch(self):
        sql = "insert into snmp_hekacfg_batch (batchid, batchtime, batchsize, batchstatus, batchdesc) values (%s, '%s', %s, %s, '')"%(self.batchId, time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time())), self.chgSize, '1')
        self.conn.execute(sql)
        return None
    def __generatebatchmetainfo(self, agent, _info):
        logging.debug(_info['args'])
        logging.debug(_info['args'][len(_info['args'])-2])
        sql = "insert into snmp_hekacfg_batchmetainfo (batchid, agentip, agentport, deviceip, deviceoid, devicesnmptype, deviceargs, deviceinterval, devicecharset, source, appname, tag, cfgfile, type, status, msg) values (%s, '%s', '%s', '%s', '%s', '%s', '%s', %s, '%s', '%s', '%s', '%s', '%s', %s, %s, '%s')"%(self.batchId, agent.split(",")[0], agent.split(",")[1], _info['args'][len(_info['args'])-2], _info['args'][len(_info['args'])-1], _info['snmptype'], " ".join(_info['args']), 60, "utf-8", _info.get("source", ""), _info.get("appname"), _info.get("tag"), _info.get("filename", ""), _info.get("type"), 0, "")
        self.conn.execute(sql)
        return None
    def _setbatchstatus(self, status, msg):
        sql = "update snmp_hekacfg_batch set batchstatus=%s, batchdesc='%s' where batchid=%s"%(status, msg, self.batchId)
        self.conn.execute(sql)
        return None
    def _batchChk(self):
        agents = self.__getAgentList()
        chgCfgList = self.__getDictCfgInfo(agents)
        chgInfo = self.__chgCfgCheck(agents, chgCfgList)
        return chgInfo
    def crtBatch(self):
        self.batchId = None
        chgInfo = None
        try:
            chgInfo = self._batchChk()
        except Exception, e:
            logging.error(traceback.format_exc())
        logging.info("变更的信息：" + str(chgInfo))
        self.chgSize = 0
        self.chgInfo = chgInfo
        for key in self.chgInfo.keys():
            self.chgSize = self.chgSize + len(self.chgInfo[key])
        if self.chgSize == 0:
            return None
        self.batchId = self.__generatebatchid()
        self.__generatebatch()
        try:
            for key in self.chgInfo:
                for _row in self.chgInfo[key]:
                    self.__generatebatchmetainfo(key, _row)
        except Exception, e:
            logging.error(traceback.format_exc())
            self._setbatchstatus(2, str(e).replace("'", ""))
            raise e
        return None
class BatchProcess(threading.Thread):
    def __init__(self, batch, agent_ip, agent_port):
        threading.Thread.__init__(self)
        self.agent_ip = agent_ip
        self.agent_port = agent_port
        self.batch = batch
        self.status = False
        self._initSConn()
        return None
    def _initSConn(self):
        self.conn = MysqlConnection(MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PSWD)
        return None
    def __delhekaconfig(self, chg):
        url = "http://%s:%s/delHekaConfig?operator=%s&token=%s"%(self.agent_ip, self.agent_port, RIZHIYI_USER, RIZHIYI_TOKEN)
        logging.debug(url)
        request = {}
        request['source'] = chg['source']
        request['type'] = "ProcessInput"
        logging.debug(request)
        _res = requests.post(url, data=json.dumps(request), verify=False)
        logging.debug(_res)
        logging.debug(_res.text)
        if _res.status_code != 200:
            raise Exception(str(_res.status_code) + ":" + _res.text)
        ret = json.loads(_res.text)
        if not ret.get("result"):
            raise Exception(ret.get("reason"))
        return None
    def __addhekaconfig(self, chg):
        url = "http://%s:%s/addHekaConfig?operator=%s&token=%s"%(self.agent_ip, self.agent_port, RIZHIYI_USER, RIZHIYI_TOKEN)
        logging.debug(url)
        request = {}
        request['appname'] = chg["appname"]
        request['bin'] = "/usr/bin/%s"%(chg['snmptype'])
        request['charset'] = "utf-8"
        request['spliter_regx'] = "\n"
        request['tag'] = chg['tag']
        request['ticker_interval'] = 60
        request['type'] = "ProcessInput"
        request['args'] = chg['args']
        logging.debug(request)
        _res = requests.post(url, data=json.dumps(request), verify=False)
        logging.debug(_res)
        logging.debug(_res.text)
        if _res.status_code != 200:
            raise Exception(str(_res.status_code) + ":" + _res.text)
        ret = json.loads(_res.text)
        if not ret.get("result"):
            raise Exception(ret.get("reason"))
        return None
    def __setbatchmetainfostatus(self, appname, tag, deviceip, deviceoid, _type, _status, _msg):
        sql = "update snmp_hekacfg_batchmetainfo set status = %s, msg = '%s' where batchid = %s and agentip='%s' and agentport='%s' and deviceip='%s' and deviceoid='%s' and type=%s and appname = '%s' and tag = '%s'"%(_status, _msg, self.batch.batchId, self.agent_ip, self.agent_port, deviceip, deviceoid, _type, appname, tag)
        self.conn.execute(sql)
        return None
    def __setbatchmetainfobyAgent(_status, _msg):
        sql = "update snmp_hekacfg_batchmetainfo set status = %s, msg = '%s' where batchid = %s and agentip='%s' and agentport = '%s'"%(_status, _msg, self.batch.batchId, self.agent_ip, self.agent_port)
        self.conn.execute(sql)
        return None
    def run(self):
        self.status = False
        try:
            metaInfo = self.batch.chgInfo[self.agent_ip + "," + self.agent_port]
            for meta in metaInfo:
                appname = meta['appname']
                tag = meta['tag']
                deviceip = meta['args'][len(meta['args'])-2]
                deviceoid = meta['args'][len(meta['args'])-1]
                _type = meta['type']
                try:
                    if _type == 1:
                        self.__addhekaconfig(meta)
                    else:
                        self.__delhekaconfig(meta)
                    self.__setbatchmetainfostatus(appname, tag, deviceip, deviceoid, _type, 1, "处理成功")
                except Exception, e:
                    logging.error(traceback.format_exc())
                    self.__setbatchmetainfostatus(appname, tag, deviceip, deviceoid, _type, 2, str(e).replace("'", ""))
        except Exception, e:
            logging.error(traceback.format_exc())
            self.__setbatchmetainfobyAgent(2, str(e).replace("'", ""))
        finally:
            self.status = True
        return None
class Bootstrap(object):
    def __init__(self):
        self.conn  = None
        self.mconn  = None
        self.batch = None
        try:
            self._initSConn()
            self._initMConn()
            self._initTable()
        except Exception as e:
            logging.error(traceback.format_exc())
            if self.conn != None:
                self.conn.close()
            if self.mconn != None:
                self.mconn.close()
            raise e
        return None
    def _initSConn(self):
        self.conn = MysqlConnection(MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PSWD)
        return None
    def _initMConn(self):
        self.mconn = MongoConnection(MONGO_HOST, MONGO_PORT, MONGO_USER, MONGO_PSWD)
        return None
    def _initTable(self):
        table = TableCheck(self.conn)
        table.check()
        return None
    def run(self):
        try:
            self.batch = BatchCheck(self.conn, self.mconn, RIZHIYI_USER, RIZHIYI_TOKEN)
            self.batch.crtBatch()
        except Exception, e:
            logging.error(traceback.format_exc())
            if self.conn != None : self.conn.close()
            if self.mconn != None: self.mconn.close()
        if self.batch.batchId == None:
            return None
        try:
            agents = self.batch.chgInfo.keys()
            threadpool = []
            while True:
                for i in range(0, THREAD_SIZE - len(threadpool)):
                    if len(agents) == 0:
                        break
                    process = BatchProcess(self.batch, agents[0].split(",")[0], agents[0].split(",")[1])
                    threadpool.append(process)
                    process.start()
                    agents.pop(0)
                for var in threadpool:
                    if var.status:
                        threadpool.remove(var)
                if len(agents) == 0 and len(threadpool) == 0:
                    break
            self.batch._setbatchstatus(3, "处理结束")
        except Exception, e:
            logging.error(traceback.format_exc())
            self.batch._setbatchstatus(2, str(e).replace("'", ""))
        finally:
            if self.conn != None: self.conn.close()
            if self.mconn != None: self.mconn.close()
        return None
def splInvoke():
    inpipe = sys.stdin
    outpipe = sys.stdout
    reader = csv.reader(inpipe)
    writer = csv.writer(outpipe)
    for result in reader:
        if result:
            bootstrap = Bootstrap()
            bootstrap.run()
            result.append("call succ")
            writer.writerow(result)
    return None
MYSQL_HOST = "102.104.77.100"
MYSQL_PORT = "3306"
MYSQL_USER = "root"
MYSQL_PSWD = "rizhiyi&2014"
MONGO_HOST = "102.104.77.100"
MONGO_PORT = "27017"
MONGO_USER = "rizhiyi"
MONGO_PSWD = "rizhiyi&2018"
RIZHIYI_USER = "admin"
RIZHIYI_TOKEN = "e9d710f7f8e738138790e75ba4b20c44"
THREAD_SIZE = 10
if __name__ == '__main__':
    splInvoke()