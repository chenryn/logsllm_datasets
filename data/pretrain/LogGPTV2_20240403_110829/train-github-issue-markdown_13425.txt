# Describe the bug
With the new version `1.4.0` the call `engine.dialect.has_table` fails for
sqlite. This didn't happen in the previous version `1.3.23`.
**Note**  
Starting with version `1.4.0` it's recommended to use
    sqlalchemy.inspect(engine).has_table(table_name)
this works OK.
This call
    engine.has_table(table_name)
also works fine.
# Expected behavior
This should not fail.
# To Reproduce
Here's a self-contained example:
    # check_table.py
    import os
    import sqlite3
    import sqlalchemy
    table_name = "test_table"
    db_name = "example.db"
    # Create a temporary SQLite database
    if os.path.exists(db_name):
        os.remove(db_name)
    con = sqlite3.connect("example.db")
    cur = con.cursor()
    cur.execute(f"CREATE TABLE {table_name} (name TEXT)")
    con.commit()
    con.close()
    # Create an engine and check if the table exists
    engine = sqlalchemy.create_engine(f"sqlite:///{db_name}")
    print(f"Does the table {table_name} exist:", engine.dialect.has_table(engine, table_name))
    # Remove the temporary SQLite database
    os.remove(db_name)
    pip install sqlalchemy==1.4.0
    python check_table.py
**Error**
    Traceback (most recent call last):
      File "check_table.py", line 21, in 
        print(f"Does the table {table_name} exist:", engine.dialect.has_table(engine, table_name))
      File "/Users/me/venv/lib/python3.8/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1998, in has_table
        info = self._get_table_pragma(
      File "/Users/me/venv/lib/python3.8/site-packages/sqlalchemy/dialects/sqlite/base.py", line 2520, in _get_table_pragma
        cursor = connection.exec_driver_sql(statement)
    AttributeError: 'Engine' object has no attribute 'exec_driver_sql'
# Versions
  * OS: macOS Catalina 10.15.7
  * Python: `3.8.6`
  * SQLAlchemy: `1.4.0`
  * Database: SQLite
  * DBAPI: `sqlite`