个死锁，Python解释器此时不知道如何处理这种情况，便直接抛出异常，这就是上述例子有
A元素的时候，
除了在不同的局部变量、全局变量中查找名字，还有一个相似的场景不可不察，那就是
可以看到实例 my_instance可以访问类属性class_att。但与读操作有所不同，如果通过
除了与类相关的类属性之外，每一个实例也有相应的属性表（_dict_），称为实例属性。
菱形继承是我们在多继承设计的时候需要尽量避免的一个问题。
>>>my_instance.class _attr
>>> my_instance =MyClass()
每一个类都有一个_
dict_proxy(('
>>> class MyClass(object):
当算法进行到最后一步的时候便再也找不到满足条件的head了，因为当选择ABO的头
>>>1
L（E)=E+merge（L（C),L（D),CD)
order (MRo)for bases B，A
TypeError: Error when calling the metaclass bases
一
Cannot create a consistent method resolution
my_instance.
=E+C+D+merge(ABO+BAO)
module
，发现其包含在BAO的尾部AO中；同理，B包含在BO中，此时便形成了一
_dict_':,
_dict_
objects>,
dict
main
_属性，其中包含的是它的所有属性，
weakref
'：None，
>> MyClass.inst_attr
KeyError:'class_attr2'
Traceback (most recent call last):
>>> my_instance._dict_['inst_attr']
至此，我们应当理解了，当我们通过“.”操作符访问一个属性时，如果访问的是实例
说不能，是因为在Python中，内置类型和用户定义的类型是有分别的，内置类型并不
那么，能不能给类增加一个属性呢？答案是，能，也不能。说能，是因为每一个class
'china'
'china'
>>>my_instance.
Traceback (most recent call last):
>>>setattr(str,
Traceback (most recent call last):
File"",line l，in
china'
File "",
File "",
>>>str.new_attr=1
100
>>>
>>>
>>>MyClass.
{'inst_attr':'china'}
>>> my_instance.inst_attr ='china'
my_instance.class_attr2
MyClass.class_attr2=100
of'MyClass'
module
dict
dict
line1，in
line 1，in 
objects>,
_dict_['class_attr2']
dict
main
'：
weakref_
---
## Page 172
的呢？
程序库的读者来说，就非常有用了。比如大家熟悉的已绑定方法和未绑定方法，它是怎么来
调用_get_O。
了，原因是没有调用它的_get_O方法。是否如此呢？怎么验证一下？我们可以尝试手动
dict_[x]._get_(None,cls)。
述符的_get_O方法。
type(obj)._dict_[x]返回的是一个描述符，这里有一个试探和判断的过程；最后调用这个描
0会返回 type(obj)._dict_[x]._get_(obj,type(obj))结果，即：type(obj)获取obj的类型;
属性和根据类访问属性的不同，有以下两种情况：
前说的先在实例属性中查找，然后再在类属性中查找那么简单，实际上，根据通过实例访问
如果是方法，却又不是如此了。
get_方法，也就是说其他每一个函数都是描述符。
描述符机制有什么作用呢？其实它的作用编写一般程序的话还真用不上，但对于编写
至此，就能够明白MyClass._dict_['my_method]返回的是function 而不是instancemethod
另一种是通过类访问的情况，比如代码cls.x，则会被_getatribute_O转换为cls.
一种是通过实例访问，比如代码obj.x，如果x是一个描述符，那么_getattribute_
看，果然是这样！这是因为描述符协议是一个Duck Typing的协议，而每一个函数都有
我们已经知道访问类属性时，通过_dict_访问和使用“.”操作符访问是一样的，但
这其中作怪的就是描述符了。当通过“.”操作符访问时，
>>>t
甚至它们的类型都不一样！
(unbound method MyClass.my_method>
>>>MyClass.
>>>class MyClass(object):
>>>MyClass.my_method
defmy_method（self):
_dict_['my_method']
print'my_method
，Python的名字查找并不是之
第6章内部机制159
---
## Page 173
100
中以及对应的类的基类以及祖先类中都不存在，而_getatribute_O对于所有属性的访问都
建议60：区别
用可以进一步参考Python 源码中的其他用法。
staticmethod和property等。在这里，给出 property的参考实现作为本节的结束，更深入的应
get_(None,type(obj)，这可以通过未绑定方法的 im_self属性为None 得到印证。
的形式访问时，调用参数是_get_(obj,type(obi)；而以 cls.x的形式访问时，调用参数是_
_getattr_O和_getattribute_O都可以用做实例属性的获取和拦截（注意，仅对实例属
class Property(object):
除此之外，
>>>print MyClass.my_method.im_self
上面例子输出的不同，其实来自于对描述符的_get_O的调用参数的不同，当以obj.x
>>>a.my_method.im_self
None
>
>>>a.my_method
>>>a=MyClass（)
>>>MyClass.my_method
def
def
def
def
self.fdel(obj)
if self.fdel is None:
self.fset(obj, value)
return self.fget(obj)
if
_delete_
if
self.fdel=
self.fset=
self.fget=
get_
self.fset is None:
set
init
，所有对属性、方法进行修饰的方案往往都用到了描述符，比如classmethod、
raise AttributeError,"can't delete attribute"
self.fget is None:
obj is None:
raise AttributeError,
raise AttributeError,
return self
（self，obj，value）：
(self,
(self，obj）:
fdel
fget
fset
=doc
fget=None,
"can'tset attribute"
fset=None,fdel=None,doc=None):
"unreadable attribute"
---
## Page 174
中定义的默认方法，当用户需要覆盖这些方法时有以下几点注意事项：
方法同时被定义的时候，要么在_getattribute_O中显式调用，要么触发AtributeError异
property中定义的get()方法抛出异常的时候也会调用该方法)。需要特别注意的是当这两个
触发AttributeError异常时（注意，不仅仅是_getatribute_O引发的AttributeError异常，
情况下才被调用：属性不在实例的_dict_中；属性不在其基类以及祖先类的_dict_中；
么_getatr_O会在什么情况下调用呢？我们在上面的例子中添加_getatr_O方法试试。
档http://docs.python.org/2/reference/datamodel.html#object.getattribute中也提到了这一点。那
要涉及实例属性的访问就会调用该方法，它要么返回实际的值，要么抛出异常。Python的文
法_getattribute_(self,name)抛出的，因为_getattribute_O会被无条件调用，也就是说只
会调用该方法。它们的函数签名分别为：
1）避免无穷递归。当在上述例子中添加_getatribute_O方法后程序运行会抛出
这次程序没有抛出异常，而是调用了，
None
('calling
attribute
再次运行程序会发现输出为：
def
当访问一个不存在的实例属性的时候就会抛出AttributeError异常。这个异常是由内部方
AttributeError:'A'objecthasno attribute'test'
Traceback (most recent call last):
attribute
上面的程序输出如下：
print a.test
print a.name
a=A("attribute")
class A(object):
既然这两种方法都用作属性的访问，那么它们有什么区别呢？我们来看一个例子。
其中参数name 为属性的名称。需要注意的是_getattribute_O仅应用于新式类。
File"test.py"，1ine 7,in
print a.test
print
def
_getattr_
init
getattr_:'，'test')
(self,name):
_getattr
_(self,name):
(self,name)
_getattribute_O及_getattr_0方法都是Object类
_getattr_O方法。实际上_getatr_O方法仅如下
第6章内部机制161
---
## Page 175
162
性t，因此hasattr(object,name)的返回结果是True。如果我们在上述例子中抛出异常（raise
用户的理解本来应该是输出警告信息的，可是实际却输出 None。这是因为在_getattr_0
方法中没有抛出任何异常也没有显式返回一个值，None被作为默认值返回并动态添加了属
返回一个值，则会返回None，此时可能会影响到程序的实际运行预期。我们来看一个示例：
getattribute_O方法的时候需要特别小心。
做法是使用 super(obj,self)._getatribute_(attr)，因此上面的例子可以改为：super(A,self).
dict_[attr]又要调用_getattribute_(selfattr)，于是产生了无穷递归，即使将语句self.
2）访问未定义的属性。如果在_getatrO_
用户本来的意图是：如果t不属于实例属性，则打印出警告信息，否则给c赋值。按照
else:
if hasattr(a,'t'):
这是因为属性的访问调用的是覆盖了的_getatribute_O方法，而该方法中 self.
class A(object):
=A("attribute")
def _getattribute_(self, attr):
print"instance a has no attribute t"
def _getattribute_(self, attr):
printc
def
except KeyError:
try:
try:
except KeyError:
elif name
self.x=20
（self,name)：
return'default'
return self._dict_[attr]
return super(A,self)._getattribute_(attr)
return'default'
return self.x **3
return self.x **2
'y':
_方法中不抛出AttributeError异常或者显式
---
## Page 176
是怎样的呢？
property、
中如果动态添加属性y，即使hasattr(a,y)的值为True，dir(a)得到的却是如下输出：
隐藏。因为dir()通常只显示正常的属性和方法，因此不会将该属性列为可用属性，上述例子
getatribute_O方法，性能上会有所损耗，比使用默认的方法要慢。
TypeError("unknown attr:+name))，则一切将如用户期待的那样。
2）覆盖的_getattr_O方法如果能够动态处理事先未定义的属性，可以更好地实现数据
print "---
print al.a
再来思考一个问题：我们知道property也能控制属性的访问，
1）覆盖了_getattribute_O方法之后，任何属性的访问都会调用用户定义的_
另外关于_getatr_O和_getattribute_O有以下两点提醒：
a1=A（)
class A(object):
lasshook_
_class
reduce_ex_
getattribute
def
def a(self,value):
@a.setter
def a(self):
@property
print“using
self.x=value
return "b"
print
else:
_delattr_
0以及