effect of injecting spikes is dependent on the time instant at
which the spikes are injected, while the metric for reasoning
about spikes is the number of spikes, which is independent
of the time instant at which the spikes are injected. It is
because, even with a small number of spikes, the number
of combinations of injecting them at different time-slots is
very large (𝐶 𝑤
𝑛 , for 𝑛 spikes across a simulation window of
length 𝑤). Hence, we consider the time slots at the beginning
portion of the simulation window to insert a spike, assuming
that the effect on the output will be preserved, though the
temporal behaviour may differ. One may consider other
ways of quality-fault modeling and yet use the presented
framework for analysis.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:30:28 UTC from IEEE Xplore.  Restrictions apply. 
317III. STATIC ANALYSIS OF QUALITY-FAULT TOLERANCE
OF THE SYSTEM
In this section, we ﬁrst present the proposed method i.e.,
the input/output, and the steps involved in the analysis. Next,
we describe in detail some of the points of the analysis.
A. Proposed Method
Figure 3. The static quality-fault tolerance analysis ﬂow.
The method takes the following as input:
1) The operational-level model, and the functional test-
cases around which the quality-fault analysis is to be
done.
2) The signals which can be infected by quality-faults,
and the type of faults which can occur on a signal
(noise, spike, shift or a combination of them), the
sets of signals that can be simultaneously faulty, the
amount of deviation that can happen (bounds on noise,
shift and spikes), and
fault-tolerance
on
output/observing signals
should lie with in a
given bound, noise should lie with in a given bound,
there should not be any spikes, etc.).
3) The
requirement
(shift
The method outputs the counterexamples (the fault in-
jections on various signals which violate the given fault-
tolerance requirements), as per the given input.
This analysis framework consists of six steps, as presented
next, and illustrated in Figure 3 (the steps are marked and
numbered in the ﬁgure).
1) Partitioning the given operation-level system model
into sub-systems/components. This is done to capture
the quality-error behavior of the components better
during the characterization.
2) Functional simulation of the components, which cre-
ates golden simulation traces for the quality-fault
tolerance analysis, for a suite of functional testcases.
The input and output traces for each sub-system com-
ponent, for each functional-testcase, is recorded in this
step.
3) Characterization wherein for each sub-system compo-
nent, and each functional-testcase, several characteriz-
ing simulation runs are performed. Each characteriza-
tion run consists of perturbing inputs (corresponding
to a functional testcase) in a systematic manner and
recording the output perturbations. The output of this
step is a set of lookup tables (LUTs), one for each sub-
system component, and each functional testcase. The
characterization step is where the abstraction occurs.
Here the detailed dynamics of the system are hidden,
and abstracted as quality lookup tables mapping input
quality degradation to output quality degradation of
individual components, i.e., for a given noise, shift
and spikes at the inputs, the output noise, shift and
spikes are stored in these tables.
4) A SMT instance is created by replacing each sub-
system operation by a LUT and an addition operation
(to model propagation of errors, and introduction of
errors by the component respectively), and adding
constraints to bind input and output values of sub-
system components appropriately. The variables mod-
eling injected faults, and those modeling the error at
the outputs are constrained in accordance with the
fault-hypothesis and fault-tolerance requirements re-
spectively. State machine and MUX outputs are taken
that of the corresponding golden functional simulation
trace, as we are considering only the quality-faults.
Change of state due to quality-error can not be handled
by this method, and hence care should be taken so that
such an instance is considered as a separate functional
testcase.
5) A SMT solver is used to obtain a fault-scenario
which violates the fault-tolerance requirements. This
counterexample fault-scenario indicates a hot-spot in
the design (but abstraction in the characterization step
implies that the results of SMT solver are approxi-
mate).
6) Finally, the hot-spots obtained in the previous step are
simulated in the operation-level model, and checked
if they are spurious or actual fault-scenarios. Spurious
hot-spots may also be used for improving the accu-
racy of characterization. Note that, we use the term
counterexample to indicate a real fault-scenario which
violates the fault-tolerance requirement. And the term
hot-spot to indicate a potential fault-scenario which
can violate the fault-tolerance requirement, which will
need to be counter-veriﬁed by actual simulation to
decide whether its real or spurious.
We once again note that the proposed approach does not
guarantee the robustness of a given control system (due to
the lossful abstraction involved) but ﬁnds the counterexam-
ples quickly whenever it can, and is helpful for quick design-
test iterations.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:30:28 UTC from IEEE Xplore.  Restrictions apply. 
318B. Details
In the following, we elaborate on how the partitioning
and characterization of different components is done, and
how the LUT network is encoded into a satisﬁability modulo
theory (SMT) instance.
1) Partitioning: Partitioning of a model is done to ef-
fectively capture the behaviour of the control system. Bet-
ter/ﬁner partitioning not only helps in improving accuracy of
predicted output but also helps in achieving better coverage
of the model [6].
One can consider partitioning up-to ‘atomic’ component
level where a component can not be further partitioned. This
helps in capturing the behaviour of the system accurately.
However, in the presence of feedback around the atomic
components, one may treat the atomic operation and its
feedback as a single component
the
feedback behaviour better.
in order to model
In our experiments, we did the partitioning manually
but ways for automating this based on reading the block
modeling of Simulink can be explored, with caution towards
feedback components.
Figure 4. A setup for characterizing a two-input software operation.
2) Characterizing Quality-Error Behaviour as Lookup
Tables: We propose to characterize operation-level blocks
(components) for propagation of quality degradation at in-
puts, to the outputs, in the form of a lookup table. Character-
ization consists of simulation of individual operation blocks
(components) with fault-injections, abstracting properties of
the residual trajectories (difference with golden signals) to
quality degradations (values of noise, shift, and spikes), and
storing these quality degradations in lookup tables. A setup
for characterizing the “pumping constant” block is shown in
Figure 4.
The results of characterization are tabulated in a quality
lookup table mapping the quality degradation on the inputs,
to the quality degradation of the outputs. Hence it stores a
mapping 𝐿𝑈 𝑇 : 𝜏 × 𝜋(𝑖0) × 𝜋(𝑖1)... × 𝜋(𝑖𝑘−1)→𝜒(𝑜0) ×
𝜒(𝑜1)... × 𝜒(𝑜𝑚−1). Here 𝜋(𝑖) ⊆ 𝜋𝑛𝑜𝑖𝑠𝑒(𝑖) × 𝜋𝑠ℎ𝑖𝑓 𝑡(𝑖) ×
𝜋𝑠𝑝𝑖𝑘𝑒(𝑖), and 𝜋𝑛𝑜𝑖𝑠𝑒(𝑖), 𝜋𝑠ℎ𝑖𝑓 𝑡(𝑖), 𝜋𝑠𝑝𝑖𝑘𝑒(𝑖) are the sets of
noise, shift and spike values for signal 𝑖 which are invoked
during characterization. The values 𝜒(𝑖) ⊂ ℜ+ × ℜ × 𝑍 +,
denote the values of output noise (positive real, as the noise
is assumed to be uniformly spread on both sides of the
signal), shift (real, as it can be on either side of the signal)
and spikes (natural number) for signal 𝑖. The LUT stores
the quality degradation mappings for each functional testcase
(𝑡 ∈ 𝜏 ). Usually, very few representative functional testcases
are selected. The minimization of the obtained LUTs is also
considered to present the input to SMT solver efﬁciently.
the output
𝑛𝑜𝑖𝑠𝑒(𝑜𝑗), 𝑣𝑜𝑢𝑡
𝑠ℎ𝑖𝑓 𝑡(𝑜𝑗), 𝑣𝑜𝑢𝑡
𝑛𝑜𝑖𝑠𝑒(𝑖𝑙), 𝑣𝑖𝑛
Given the tuples of quality degradations for all
in-
put signals of an operation 𝑜𝑝,
the quality degrada-
signals can be estimated
tion tuples
for
from the quality lookup table of the operation 𝑜𝑝. Let
𝑉 (𝑖𝑙) = ⟨𝑣𝑖𝑛
𝑠𝑝𝑖𝑘𝑒𝑠(𝑖𝑙)⟩ denote the tu-
𝑠ℎ𝑖𝑓 𝑡(𝑖𝑙), 𝑣𝑖𝑛
ple of quality degradation for an input 𝑖𝑙, and 𝑉 (𝑜𝑗) =
𝑠𝑝𝑖𝑘𝑒𝑠(𝑜𝑗)⟩ denote the tuple of qual-
⟨𝑣𝑜𝑢𝑡
ity degradation for a corresponding output 𝑜𝑗.
the
input degradations do not coincide with quality values
from characterization, i.e. 𝑉 (𝑖0) × 𝑉 (𝑖1)... × 𝑉 (𝑖𝑘−1) ∕∈
𝜋(𝑖0) × 𝜋(𝑖1)... × 𝜋(𝑖𝑘−1), then one of several interpola-
tion/extrapolation techniques may be used to estimate the
output quality degradation 𝑉 (𝑜𝑗). The addition operation
manifests fault-injection as mandated by quality-faults af-
ﬂicting the operation/signal (Figure 5). The characterized
data of different components can be used across designs
whenever possible.
If
3) Identifying hot-spots using an SMT solver for LUT
analysis: Once a network of lookup tables and addition
operations has been created, the quality-fault tolerance anal-
ysis problem mandates that all possible fault-scenarios be
examined to ensure that fault-tolerance requirements are
not breached. We propose to map the LUT-based analysis
problem to a Satisﬁability Modulo Theory [12] (SMT)
problem and solve it using SMT solvers, like Yices [7]. SMT
modeling is the key to explore the huge search space quickly.
The SMT solver Yices takes as input a set of mathematical
and boolean constraints, and tries to ﬁnd a valuation of
variables consistent with the constraints.
INPUT 1
INPUT 2
OUTPUT
........
........
........
SIGNAL12
........
........
Quality LUT 1
INPUT 1
INPUT 2
INPUT
OUTPUT
........
........
........
........
........
........
Quality LUT 2
Figure 5. Quality-centric analysis using lookup tables. An illustration of
lookup-table analysis with fault-injection ⟨𝑆𝐼𝐺𝑁 𝐴𝐿12, 0.2, 0.4, 1⟩
Each lookup table describes the transfer of quality degra-
dation at the input, to the quality degradation at the output.
lookup tables, while argu-
We consider only one-output
ing that a multi-output
lookup table may be considered
equivalent to a set of one-output lookup tables. Different
interpolation methods can be used while mapping the LUTs
on an SMT instance.
We employed two different interpolation techniques in our
experiments. The ﬁrst of which works as follows: For a given
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:30:28 UTC from IEEE Xplore.  Restrictions apply. 
319set of inputs, the output value corresponds to the output
value of the row whose input values are immediately higher
than the given inputs. For example, consider an operation
which has just one input and one output, and let its LUT
consist of two rows, row 1 being input:2, output:2, and row 2
being input:4, output:6. Now for any query with input value
greater than 2 the output will be 6, even if the input is 2.1
which is actually close to row 1, the output value will be
that of row 2. This scheme always over approximates the
quality-error and is less likely to miss any counterexample
if present (assuming that more quality-error at the output
of a component actually leads to more quality-error at
observing/output signals, which is often the case, but may
not be the case always). However, in this case, the accuracy
with which a hot-spot is generated by the SMT solver is less
(more false-positives).
The second technique is: For a given set of inputs, the
output value corresponds to the output value of the row
whose input values are closest
to the given inputs. For
example, in Figure 5, when 𝐼𝑁 𝑃 𝑈 𝑇 1 and 𝐼𝑁 𝑃 𝑈 𝑇 2 are
⟨0.3,−0.1, 1⟩ and ⟨1.4, 0.0, 2⟩ respectively. These map to
the lookup table entry “⟨0.5, 0.0, 1⟩, ⟨1.5, 0.0, 2⟩”, as circled
in the ﬁgure. This scheme is relatively more accurate than
the previous interpolation technique, though at times under-
estimation of output value can happen which can result in
missing actual counterexamples (more false-negatives).
One can use the closeness-based technique (second one)
for quickly generating the hot-spots, and if none are found,
then the experiments can be repeated using the over-
approximation technique (ﬁrst one) for gaining more con-
ﬁdence on the robustness of the system.
IV. EXPERIMENTAL RESULTS
In this section we present our experience of quality-fault
tolerance analysis for the “Fault-tolerant fuel controller”
automotive system from the Simulink automotive demon-
strations1. Except for the partition of control system into
sub-components for characterization, all
the steps (func-
tional simulation, characterization, SMT instance generation
according to different interpolation policies, invoking the
SMT solver, counter veriﬁcation of the hotspot of SMT
by simulation, and generation of next SMT instance with
past answers in-built–to avoid duplicates while trying to ﬁnd
more than one counterexample) are completely automated in
a single ﬂow in MATLAB. We ﬁrst present a brief overview
of the selected automotive model, and then present
the
experimental results obtained.
We have studied an engine-block application, which