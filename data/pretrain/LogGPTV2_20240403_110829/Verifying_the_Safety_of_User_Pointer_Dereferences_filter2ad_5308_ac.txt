:= access ok(v2). A location l is unchecked after
the call if l is unchecked before the call and the call
does not check l. Thus, if Γ is the state environment
before the call, then l is unchecked after the call if
Γ(l, unchecked) and either v2 does not point to l or
v1 = 0 after the call. Now, ϕ1 ≡ ¬(rval(ρ)(v2, l) ∧ φ)
ϕ2 ≡ (cid:1)
is the guard under which v2 does not point to l, and
l(cid:1)[rval(ρ)(v1, l(cid:1))∧ (l(cid:1) = 0)]∧ φ is the the guard
under which v1 = 0, where ρ is the points-to graph at
the call statement and φ is the guard under which the call
statement executes. The rule for checking statements is:
l ∈ Loc
ϕ2 ≡ (cid:1)
ϕ1 ≡ ¬(rval(ρ)(v2, l) ∧ φ)
l(cid:1) (rval(ρ)(v1, l(cid:1)) ∧ (l(cid:1) = 0)) ∧ φ
ϕ ≡ (ϕ1 ∨ ϕ2)
Γ(cid:1) = Γ[(l, unchecked) (cid:19)→ Γ(l, unchecked) ∧ ϕ]
φ, ρ, Γ (cid:7)i
safety v1 := access ok(v2) : Γ(cid:1)
5.8.3 Branches
The rule for branch statements is:
φ1, ρ1 (cid:7)mem s1 : φ(cid:1)
φ2, ρ2 (cid:7)mem s2 : φ(cid:1)
φ1, ρ1, Γ (cid:7)i
φ2, ρ2, Γ (cid:7)i
1, ψ1
2, ψ2
safety s1 : Γ1
safety s2 : Γ2
1, ρ(cid:1)
2, ρ(cid:1)
Γ(cid:1) = reﬁne(Γ1, ψ1) (cid:11) reﬁne(Γ2, ψ2)
φ, ρ, Γ (cid:7)i
safety if (v != 0) {s1} else {s2} : Γ(cid:1)
where reﬁne ∈ (StateEnv ×Guard) → StateEnv be a
function that reﬁnes a state environment Γ with a guard
ϕ by conjoining the guard for each state in Γ with ϕ as
follows:
reﬁne(Γ, ϕ)(q) = Γ(q) ∧ ϕ.
The purpose of reﬁne is to preserve the information of
the two branches Γ1 and Γ2 in the combined environ-
ment Γ(cid:1)
.
5.8.4 Dereferences
The dereference of a pointer v2 is unsafe when v2 is an
unchecked, user pointer. Consider the statement v1
:= *v2 that dereferences v2. The location l is unsafe
after the dereference when either l is unsafe before
the dereference or v2 points to l and l is user and l is
unchecked. The location l is unsafe before the deref-
erence under the guard Γ(l, unsafe) where Γ is the state
environment before the dereferencing statement. Now,
ϕ1 ≡ rval(ρ)(v2, l) ∧ φ is the guard under which v2
points-to l, and ϕ2 ≡ Γ(l, user) ∧ Γ(l, unchecked) is
the guard under which l is user and unchecked, where
ρ is the points-to graph at the dereferencing statement
and φ is the guard under which the dereferencing state-
ment executes. The following inference rule describes
how the analysis updates the state environment with the
332
int x;
int y;
int *p;
1: void syscall(int c) {
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12: }
process(p, p);
if (c != 0)
p := &x;
p := &y;
else
13: void process(int* q, int *r) {
14:
15: }
...
Figure 2. Example 2
guard under which l is unsafe:
l ∈ Loc
ϕ1 ≡ rval(ρ)(v2, l) ∧ φ
ϕ2 ≡ Γ(l, user) ∧ Γ(l, unchecked)
Γ(cid:1) = Γ[(l, unsafe) (cid:19)→ Γ(l, unsafe) ∨ (ϕ1 ∧ ϕ2)]
φ, ρ, Γ (cid:7)i
safety v1 := *v2 : Γ(cid:1)
5.9
Interprocedural Analysis
At a call statement, the analysis looks up the sum-
mary state environment of the callee generated in the
previous pass and instantiates it with respect to the call-
ing context:
(cid:7)i−1
safety t1 Q (
sum = IStateEnv (ρP , ΓP
ΓP
−−−→
t2 v) { s } : ΓQ
call)(ΓQ
sum , φP )
−→
v2) : ΓP
safety v1 := Q (
out
out = reﬁne(ΓP
ΓP
call (cid:7)i
φP , ρP , ΓP
sum)
sum
out to the reﬁnement of ΓP
The ﬁrst antecedent binds ΓQ
sum to the summary state
environment of procedure Q generated in the (i − 1)st
pass. The second antecedent binds the state environment
sum to the state environment instantiation of ΓQ
ΓP
sum, and
the last antecedent binds ΓP
sum
with φP .
environment
function
(PointsToP × StateEnv P ) →
IStateEnv
StateEnv Q → StateEnv P instantiates a callee
state environment with respect to the points-to graph
and state environment at the call statement in the caller.
The remainder of this section presents its deﬁnition in
instantiation
state
∈
The
333
several steps. First, note that the instantiation of a callee
state environment is complicated by the possibility that
a callee location may instantiate to many caller loca-
tions, and many callee locations may instantiate to one
caller location. The following example demonstrates
how this many-many instantiation relation between
callee-caller locations may arise.
EXAMPLE. Consider the program in Figure 2. The
In
procedure syscall calls the procedure process.
syscall the stack locations for variables c, x, y, and
p are represented by the abstract locations lc, lx, ly, and
lp, respectively. In process the stack locations for vari-
ables q and r are represented by the abstract locations
lq and lr, respectively. The locations that represent the
points-to targets of these variables on entry to the proce-
dure are l
*r, respectively.
*q and l
Let ρ11 be the points-to graph computed by the mem-
ory model on line 11 at the call to process. Then,
ρ11(lp, lx) = (lc (cid:3)= 0) and ρ11(lp, ly) = (lc = 0) be-
cause of the guarded assignments on lines 7 and 9. Sim-
ilarly, let ρ13 be the points-to graph computed by the
memory model on line 14 on entry to process. Then,
ρ13(lq, l
*r) =
true, where b is an unconstrained boolean variable. Ob-
serve that the memory model captures the entry aliasing
among the parameters in process induced by the call
statement on line 11 by introducing an edge from lq to
*r under the guard b.
l
*q) = ¬b, ρ13(lq, l
*r) = b, and ρ13(lr, l
Now, at the call statement on line 11, the location
instantiation function introduced in Section 4.2 has
*q, lx) = (lc (cid:3)= 0)
*q, ly) = (lc = 0)
*r, lx) = (lc (cid:3)= 0)
*r, ly) = (lc = 0)
ILoc(ρ11)(l
ILoc(ρ11)(l
ILoc(ρ11)(l
ILoc(ρ11)(l
*q may instantiate to either lx or ly, and
Observe that l
that lx may instantiate from either l
*q or l
*r. (cid:1)
The guard instantiation function I P
Suppose procedure P calls procedure Q at a particu-
lar call statement and ψQ is a guard that appears in the
summary state environment of Q. Let ΓP
call be the state
environment computed at the call statement in P , which
maps each P -state to the P -guard under which the pro-
gram is in that state at the call statement.
∈
(PointsToP × StateEnv P ) → Guard Q → Guard P
instantiates a Q-guard to the corresponding P -guard by
individually instantiating each of the context variables
that appear in the Q-guard. Recall from Section 5.7
that
the only atoms appearing in a summary state
environment guard are context variables. Also recall
from Section 5.4 that each state has a corresponding
Guard
context variable according to xvar that represents the
guard under which the program is in that state on entry
to the procedure.
In order to describe guard instantation, we introduce
additional notation. The function xvar−1 ∈ XVar →
State is the inverse function of xvar. The function
sub takes two sets S1 and S2 and constructs all possi-
ble substitutions from S1 to S2 such that the domain of
σ ∈ sub(S1, S2) is S1 and the range is a subset of S2.
The expression ψ[σ] is the guard produced by substitut-
ing each atom v in ψ with σ(v).
Guard instantation entails constructing a substitution
σ that maps each Q-context variable to a P -guard and
then applying σ to ψQ to construct the P -guard ψQ[σ].
Finding the P -guard σ(cQ) that corresponds to a Q-
context variable cQ consists of the following three steps:
1. Look up the Q-state qQ
1 that corresponds to cQ us-
ing xvar Q.
2. Instantiate qQ
1 to a P -state qP
2 .
3. Look up the P -guard that corresponds to qP
2 using
ΓP
call .
The ﬁrst and third steps are straightforward because
xvar and ΓP
call are injective functions. However, the sec-
ond step requires more care because one Q-state may
instantiate to many P -states and many Q-states may in-
stantiate to one P -state as demonstrated by the example
presented earlier in this section.
call , τ)(ψQ) = ψQ[ΓP
We handle the second step by considering all pos-
sible substitutions from State Q to State P denoted by
sub(State Q, State P ). Consider a substitution τ ∈
sub(State Q, State P ). We deﬁne an substitution guard
instantiation function ISubApply that instantiates ψQ
with respect to τ :
ISubApply(ΓP
call ◦ τ ◦ (xvar−1)Q]
call ◦ τ ◦
The series of
(xvar−1)Q carries out the three steps enumerated above
but considers only one way to instantiate Q-states
to P -states, namely τ . Observe that each substi-
tution τ ∈ sub(State Q, State P ) induces a guard
ISubReﬁne(ρP )(τ) formed by conjoining,
for each
1 (cid:19)→ qP
2 ∈ τ , the guard under which qQ
qQ
1 instantiates
to qP
2 :
function compositions ΓP
ISubReﬁne(ρP )(τ) =
(cid:4)
2 ∈τ
1 (cid:3)→qP
qQ
IState(ρP )(qQ
2 )
1 , qP
334
Now, we deﬁne the guard instantiation function
IGuard that considers all possible substitutions τ ∈
sub(State Q, State P ):
(cid:2)
(cid:6)
call , τ)(ψQ) ∧ ISubReﬁne(ρP )(τ)
(cid:5)ISubApply(ΓP
IGuard(ρP , ΓP
call)(ψQ) =
τ
Let ΓQ
Finally, we deﬁne of the state environment instan-
sum be the sum-
sum be its in-
sum =
sum). The P -guard associated
call)(ΓQ
2 in ΓP
sum is formed by disjoining,
1 ∈ State Q, the guard under which
2 , and the guard instantiation of
tiation function IStateEnv .
mary state environment of Q, and let ΓP
stantiation to P at the call statement. So, ΓP
IStateEnv (ρP , ΓP
with a P -state qP
for each Q-state qQ
qQ
1 instantiates to qP
sum(qQ
1 ):
ΓQ
IStateEnv (ρP , ΓP
(cid:7)
(cid:2)
IStateEnvQ(ρP , ΓP
(cid:8)
2 )
1 , qP
sum)(qQ
call)(ΓQ
call)(ΓQ
sum)(qP
2 ) =
qQ
1
where
IStateEnvQ(ρP , ΓP
IState(ρP )(qQ
1 , qP
call)(ΓQ
sum)(qQ
2 ) ∧ IGuard(ρP , ΓP
1 , qP
2 ) =
call)(ΓQ
sum(qQ
1 ))
5.10 Path-Sensitive Must Modify Anal-
ysis
The underlying alias analysis described in [9] is an in-
terprocedurally path-insensitive may-alias analysis. Un-
fortunately, this level of precision is not sufﬁcient to
reduce the false alarms in our study to a reasonable
number. Initially, more than four hundred false alarms
were reported because the alias analysis was not precise
enough to compute path-sensitive must-modify informa-
tion from callees. A location is must-modiﬁed if, under
some guard, the location must be updated with a value
different than the one it contained on entry to the proce-
dure.
a
the
user
Consider
procedures
sys recvmsg
verify iovec reproduced in Figure 3.
sys recvmsg copies
msg sys.msg name stack location,
dates that
voking verify iovec.
subsequently
sock recvmsg.
ally must-modiﬁes m->msg name under
and
Now,
the
and then up-
location with a kernel pointer by in-
the procedure
into
Here, verify iovec condition-
the guard
msg sys.msg name
pointer
passes
Then,
into
long sys_recvmsg(..., struct msghdr __user *msg)
{
struct msghdr msg_sys;
int err;
char addr[MAX_SOCK_ADDR];
...
if (copy_from_user(&msg_sys,msg,
sizeof(struct msghdr)))
return -EFAULT;
...
err = verify_iovec(&msg_sys, ...,
addr, VERIFY_WRITE);
if (err msg_namelen) {
if (mode == VERIFY_READ) {
22: int verify_iovec(struct msghdr *m, ...,
23:
24: {
25:
26:
27:
28:
29:
30: