or organization.
Content coding of emails and determinations of so-
cial engineering ratings for the TTI were performed by
ﬁve independent coders who were given a code book for
content categories and the TTI social engineering scale
with examples to guide analysis. We performed regu-
lar inter-rater reliability checks and ﬂagged any poten-
tial edge cases and inconsistencies for discussion and re-
evaluation. Following completion of this analysis, two
of the authors reviewed the social engineering base value
scores to ensure consistency and conformity to the scale.
We provide speciﬁc examples of each of these targeting
values in Appendix A.
USENIX Association  
23rd USENIX Security Symposium  533
7
1(cid:1)
(cid:1)
s
n
o
i
s
s
i
0.8(cid:1)
0.6(cid:1)
m
b
u
S
f
o
n
o
i
t
c
a
r
F
0.4(cid:1)
0.2(cid:1)
0(cid:1)
1(cid:1)
 China Group 1(cid:1)
 China Group 3(cid:1)
 Tibet Group 1(cid:1)
 Tibet Group 2(cid:1)
 Tibet Group 4(cid:1)
2(cid:1)
3(cid:1)
Social Engineering Sophistication Base Value(cid:1)
4(cid:1)
5(cid:1)
Figure 3: Social engineering sophistication base value
assigned to e-mail submissions from groups that submit-
ted at least 50 e-mails.
4.2.3 Summary of Social Engineering Sophistica-
tion Base Value
Figure 3 shows the targeting score for organizations in
our study who submitted at least 50 e-mails. We can see
that actors targeting these groups put signiﬁcant effort
into targeting their messages, in particular the three Ti-
betan groups included in Figure 3 observe more than half
of their messages with a targeting score of 3 or higher.
This result means adversaries are taking care to make the
e-mail appear to come from a legitimate individual or or-
ganization, and include relevant information (e.g., news
reports or exchanges from public mailing lists). Higher
targeting scores, which result from actions such as per-
sonalizing lures to an individual in the group, or includ-
ing information that requires prior reconnaissance tend
to be more rare, but we do observe instances of them.
For example, in the case of China Group 3, we observed
an e-mail which received a social engineering score of 5,
which claimed to be from the group’s funder and refer-
enced a speciﬁc meeting they had planned that was not
public knowledge.
4.3 Technical Sophistication
We manually analyzed all submitted emails and attach-
ments to determine whether they contained politically-
motivated malware. The malware is then analyzed in de-
tail to extract information such as the vulnerability, C&C
server (if present), and technical sophistication of the ex-
ploit.
4.3.1 Assessment methodology
The ﬁrst step in our analysis pipeline is determining
whether the email contains politically motivated malware
or not. This process involves an initial inspection for
social engineering of the email message and attachment
(e.g., an executable pretending to be a document). We
also correlate with other emails received as part of this
project to identify already-known malware. Well-known
malware attacks (e.g., the Zeus trojan masquerading as
an email from the ACH credit card payment processor,
or Bredolab malware pretending to be from the DHL
courier service) are not considered targeted attacks in our
study, but are still kept for potential review.
Once we have identiﬁed emails which we suspect of
containing politically-motivated malware, we perform
the following analysis steps on any attachments to ver-
ify that they indeed contain malware. First, we run the
attachment in a sandboxed VM to look for malicious ac-
tivity e.g., an Ofﬁce document writing ﬁles to disk or try-
ing to connect to a C&C server. We also check the MD5
hash of the attachment against the Virus Total database to
see if it matches existing viruses. We also manually ex-
amine the attached ﬁle for signs of malicious intent (e.g.,
executable payload in a PDF, shellcode or Javascript).
We exclude any graphics attached to the email which are
used for social engineering (and do not contain malicious
payload) from our analysis.
We follow this initial analysis with more detailed tech-
nical analysis of the attachments which we conﬁrm con-
tain malware. First, we manually verify the ﬁle type of
the attachment for overview statistics. This manual anal-
ysis is necessary as the Unix ﬁle command may be mis-
led by methods of manipulating important bytes in the
ﬁle (e.g., replacing \rtf1 with \rtf[null]). We then iden-
tify if the vulnerability included in the malware already
exists in a corpus of vulnerabilities, such as the Com-
mon Vulnerabilities and Exposures (CVE) naming sys-
tem. We also perform analysis of network trafﬁc from
the attachment to identify the C&C server the malware
attempts to contact.
In cases where the malware does
not execute in our controlled environment we manually
examine the ﬁle to extract the relevant information.
On a case-by-case basis we use additional tools such
as IDA [1] and OllyDbg [3] for detailed static and dy-
namic analysis, respectively. Our goal in this analysis
is to identify relationships between malware campaigns
between organizations, or instances of the same malware
family repeatedly targeting a given organization. By ob-
serving overlapping C&C servers, or mapping malware
to common exploits identiﬁed by anti virus/security com-
panies we can cluster attacks that we believe come from
the same malware family and potentially the same adver-
sary.
4.3.2 Technical Sophistication Multiplier
While the previous analysis is useful for understanding
the nature of threats, we also score threats numerically to
aid in understanding the relative technical sophistication
of their approaches. Each malware sample is assigned
one of the following values:
1 Not Protected - The sample contains no code protec-
534  23rd USENIX Security Symposium 
USENIX Association
8
tion such as packing, obfuscation (e.g. simple rotation
of interesting or identifying strings), or anti-reversing
tricks.
1.25 Minor Protection - The sample contains a sim-
ple method of protection, such as one of the following:
code protection using publicly available tools where the
reverse method is available, such as UPX packing; sim-
ple anti-reversing techniques such as not using import
tables, or a call to IsDebuggerPresent(); self-disabling in
the presence of AV software.
1.5 Multiple Minor Protection Techniques - The sam-
ple contains multiple distinct minor code protection tech-
niques (anti-reversing tricks, packing, VM / reversing
tools detection) that require some low-level knowledge.
This level includes malware where code that contains the
core functionality of the program is decrypted only in
memory.
1.75 Advanced Protection - The sample contains mi-
nor code protection techniques along with at least one
advanced protection method such as rootkit functionality
or a custom virtualized packer.
2 Multiple Advanced Protection Techniques - The
sample contains multiple distinct advanced protection
techniques, e.g.
rootkit capability, virtualized packer,
multiple anti-reversing techniques, and is clearly de-
signed by a professional software engineering team.
The purpose of the technical sophistication multiplier
is to measure how well the payload of the malware can
conceal its presence on a compromised machine. We use
a multiplier because advanced malware requires signif-
icantly more time and effort (or money, in the case of
commercial solutions) to customize for a particular tar-
get.
We focus on the level of obfuscation used to hide pro-
gram functionality and avoid detection for the follow-
ing reasons: (1) It allows the compromised system to
remain infected for a longer period; (2) it hinders ana-
lysts from dissecting a sample and developing instruc-
tions to detect the malware and disinfect a compromised
system; (3) since most common used remote access tro-
jans (RATs) have the same core functionality (e.g. key-
logging, running commands, exﬁltrating data, control-
ling microphones and webcams, etc.)
the level of ob-
fuscation used to conceal what the malware is doing can
be used to distinguish one RAT from another.
4.3.3 Summary of Technical Sophistication Multi-
plier Value
Figure 4 shows the technical sophistication multiplier
values for e-mails submitted by the different organiza-
tions in our study. One key observation we make here
is that the email-based targeted malware that was self-
1 
s
n
o
i
s
s
i
m
b
u
s
f
o
n
o
i
t
c
a
r
F
0.8 
0.6 
0.4 
0.2 
0 
 China Group 1 
 China Group 3 
 Tibet Group 1 
 Tibet Group 2 
 Tibet Group 4 
1 
1.25 
1.5 
Technical Sophistication Multiplier 
Figure 4: Technical sophistication multiplier assigned to
e-mail submissions from groups that submitted at least
50 e-mails.
reported by our study groups is relatively simple. The
highest multiplier value we see is 1.5 and even that value
is seen infrequently. The majority of malware observed
is rated either 1 or 1.25 according to our technical scoring
criteria, with Tibetan Groups observing a higher fraction
of malware rated 1.25 and Chinese groups observing a
higher fraction rated 1.
The technical sophistication multiplier value is also
useful for assessing the technical evolution of threats in
our study. When we group malware into different fam-
ily groups we can see some of these groups are under
active development. For example, we observe multiple
versions of the Enfal [40, 49], Mongal [14], and Gh0st
RAT [15] families with increasing levels of sophistica-
tion and defenses in place to protect the malware code
(resulting in an increase in technical multiplier from 1 to
1.25 for these families). Since our technical multiplier
value focuses on how well malware code defends and
disguises itself, changes to other aspects of the code may
not result in an increase in value (e.g., we observe multi-
ple versions of the IMuler.A/Revir.A malware which all
receive a score of 1). Interestingly, when we observe both
a Windows and Mac version of a given malware family,
the technical score for the Mac version tended to be lower
with the Mac version being relatively primitive relative to
the Windows variant.
4.4 TTI Results
We now show how the TTI metric can help us better char-
acterize the relative threat posed by targeted malware.
Figure 5 shows the technical sophistication multiplier
and maximum/minimum TTI scores for malware fami-
lies observed in our dataset. Since we primarily observe
simple malware, with a technical sophistication multi-
plier of 1 or 1.25, this value does a poor job of differen-
tiating the threat posed by the different malware families
to the CSOs. However, by incorporating both the tech-
nical sophistication and targeting base value into the TTI
metric we can gain more insights into how effective these
USENIX Association  
23rd USENIX Security Symposium  535
9
(cid:1)
n
e
e
j
o
u
d
(cid:1)
T
A
R
t
s
0
h
G
(cid:1)
t
e
n
w
o
d
a
h
s
(cid:1)
r
t
r
u
S
(cid:1)
b
a
r
g
d
i
V
(cid:1)
P
D
U
X
g
u
l
P
(cid:1)
2
0
0
9
(cid:1)
b
o
c
z
E
(cid:1)
1
1
a
t
s
n
I
(cid:1)
l
a
g
n
o
M
(cid:1)
2
0
1
3
(cid:1)
n
a
i
r
a
u
Q
(cid:1)
n
k
i
h
.
r
a
c
S
(cid:1)
t
a
D
b
u
S
g
e
R
(cid:1)
0
V
T
C
C
T
A
R
t
s
0
h
G