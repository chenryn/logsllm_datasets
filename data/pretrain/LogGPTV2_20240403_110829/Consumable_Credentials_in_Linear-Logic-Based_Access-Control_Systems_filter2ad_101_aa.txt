title:Consumable Credentials in Linear-Logic-Based Access-Control Systems
author:Kevin D. Bowers and
Lujo Bauer and
Deepak Garg and
Frank Pfenning and
Michael K. Reiter
Consumable Credentials in Logic-Based Access-Control Systems
Kevin D. Bowers
Lujo Bauer
Deepak Garg
Frank Pfenning Michael K. Reiter
Carnegie Mellon University
Pittsburgh, PA, USA
{kbowers, lbauer, dg, fp, reiter}@cmu.edu
Abstract
We present a method to implement consumable creden-
tials in a logic-based distributed authorization system. Such
credentials convey use-limited authority (e.g., to open a
door once) or authority to utilize resources that are them-
selves limited (e.g., concert tickets). We design and imple-
ment mechanisms to enforce the consumption of credentials
in a distributed system, and to protect credentials from non-
productive consumption as might result from misbehavior
or failure. We explain how these mechanisms can be used to
support a distributed authorization system that uses a linear
access-control logic. Finally, we give several usage exam-
ples in the framework, and evaluate the performance of our
implementation for use in a ubiquitous computing deploy-
ment at our institution.
1. Introduction
The use of formal logics to model (e.g., [18, 38]) or
implement (e.g., [10]) distributed access-control decision
procedures provides assurance that access control is imple-
mented correctly [2]. Such assurance is beneﬁcial in light of
the complex interactions that such systems are designed to
accommodate, which may involve policies constructed in
a decentralized way and that utilize delegations, roles and
groups. Logic-based access-control systems typically ex-
press these policy elements in digitally signed credentials,
and use the credentials as premises in a formal proof that a
reference monitor’s policy is satisﬁed by the credentials.
Despite signiﬁcant attention to these systems in the last
decade [41, 39, 4, 5], a natural form of access-control policy
remains largely unexplored by this line of research: policies
that use consumable authority that can be exercised only
a limited number of times. Numerous types of authority
are consumable, typically because the real-world resource
affected by exercising the authority is itself consumable:
e.g., the authority to spend money, or to sell theater tickets,
would fall into this category. As a tangible example, a job
hosting service might require a proof not only that a client’s
submitted job is safe to execute [43], but in addition that the
client committed the required fee to the service to execute
the job. Existing decentralized access-control frameworks,
which express authority by way of digitally signed creden-
tials that are easily copied, would permit a client to utilize
the same credential (and hence the same funds) for execut-
ing multiple jobs.
In looking to extend prior work on access-control logics
to support consumption of authority, one is quickly led to
linear logic, a type of logic in which an inference expends
the premises that enabled it [32]. For example, a proof con-
structed in linear logic that a client’s job is safe to execute,
which is dependent on the client submitting payment, would
consume the payment credentials. Once the credential is
used in a proof, it is consumed, thus making it unavailable
for use in future proofs. This accurately describes the corre-
sponding real-world scenario: money, once withdrawn from
an account and applied to a purchase, is spent and cannot be
used again.
Using linear logic to model access-control systems is an
interesting but relatively straightforward exercise. Recent
work has conclusively argued, however, that implement-
ing distributed access-control systems using logical frame-
works provides a signiﬁcantly greater level of assurance of
the systems’ correctness than merely modeling these sys-
tems using logic [6, 10]. This greater assurance is a product
of bridging the gap between a system’s speciﬁcation (which
can be easily modeled) and its implementation (which de-
parts from the speciﬁcation and therefore the model). To
beneﬁt from this greater assurance of correctness for an im-
plemented access-control system, we need to tightly inte-
grate linear logic with the basis of this distributed system.
This task is more complicated than building distributed
systems around classical or intuitionistic logic, as has been
done heretofore. In these previous systems, as long as the
appropriate credentials can be located, proofs can be created
and veriﬁed on different nodes and at different times.
In
linear logic, however, a credential is transient, in that its use
on one node must cause it to become unavailable throughout
the entire system. Hence, the task of implementing such a
linear-logic based distributed system is more difﬁcult.
In this paper we develop the mechanisms that permit a
decentralized logic-based authorization system to enforce
the consumption of credentials, and show how these mech-
anisms can be used to effectively enforce the abstractions of
linear logic in a distributed setting. Our system is very ﬂex-
ible in that it permits the enforcement and straightforward
speciﬁcation of arbitrary, even dynamically determined lim-
its on the use of credentials. For example, in a Chinese
wall policy [17], a client that accesses one resource is then
precluded from accessing another for which the client, by
virtue of accessing the ﬁrst resource, now has a conﬂict
of interest.
This policy can be speciﬁed in linear logic
and enforced by our mechanism, which would consume the
client’s credential for the second resource upon the client’s
use of the ﬁrst one.
The high-level strategy for enforcing credential con-
sumption in our framework is to issue each consumable cre-
dential in such a manner that the credential’s use requires
the consent of another entity, its ratiﬁer. The credential’s
ratiﬁer, which is named in the credential itself, tracks the use
of the credential and limits that use accordingly. Though
this high-level approach is unsurprising, its conceptual sim-
plicity is somewhat deceptive, due to several challenges that
it raises.
1. In a setting where the steps of constructing a proof of
authority and checking that proof are distinct [4], it is
unclear what constitutes a credential use and thus the
moment at which a credential should be consumed.
One possibility is consuming the credential upon the
assembly of a proof in which it is a premise. Another
possibility is consuming it when a reference monitor
checks the proof. As we will see in Section 3, neither
of these alternatives is satisfactory, and we propose a
third alternative that, we argue, is more compelling.
2. For many types of consumable credentials, not only
must the credential’s consumption be enforced, but
its availability must be protected against wasted “con-
sumption”. That is, a credential’s consumption should
not occur until the authorized party commits to us-
ing it.
(A failure to ensure such availability would
be particularly of concern for, e.g., authority to spend
money.)
In particular, if a credential is “used” dur-
ing the construction of a proof, but the proof cannot
be completed due to the lack of another permission,
then the credential should not be consumed (since no
authority was, in fact, exercised). Our approach to
dealing with availability draws on techniques from fair
contract signing [12].
To summarize the contributions of this paper: We discuss
our approach to addressing the above issues, and detail the
design and implementation of a mechanism that allows a
decentralized logic-based authorization system to support
the consumption of credentials. For illustration, we present
a linear access-control logic that uses this mechanism and
show how it can encode several scenarios that make use of
consumable credentials. We also empirically evaluate the
key facets of our implementation that affect its performance.
2. Related Work
The study of logics for access-control gained promi-
nence with the work on the Taos operating system [3]. Since
then, signiﬁcant effort has been put into formulating formal
languages and logics (e.g., [3, 5, 15, 41]) that can be used
to describe a wide range of practical scenarios.
Initially,
the focus was on formulating logics that would be able to
describe common abstractions such as roles, groups, and
delegation without admitting any counter-intuitive behav-
ior [2, 36, 37, 38]. In many cases, these logics were de-
signed to model an implemented access-control system or
policy-speciﬁcation language [1, 3, 33, 34, 40]; the logics
often included modality (to express the viewpoints of dif-
ferent actors), the law of the excluded middle, and some
high-order features (typically, limited quantiﬁcation over
formulas). The usefulness of mechanically generated proofs
(e.g., that access to a resource should be granted) led to
various efforts to balance the decidability and expressive-
ness of access-control logics. These efforts resulted in var-
ious ﬁrst-order classical logics, each of which would de-
scribe a comprehensive but not exhaustive set of useful
access-control scenarios [5, 35, 39, 41], and more powerful
higher-order logics that served as a tool for deﬁning sim-
pler, application-speciﬁc ones [4]. More recently, intuition-
istic logics have been investigated as providing a closer tie
between the policy (via formulas) and its enforcement (via
proofs) [19, 31]. An increasing amount of attention is spent
on formally proving that particular access-control logics are
sound, not only with respect to some abstract model, but
also with respect to the reality the logics are intended to
model [6, 30, 31].
In this body of work on access-control logics, a cre-
dential is typically created by digitally signing a formula
(e.g., Alice digitally signs that she is delegating her au-
thority to Bob). Upon veriﬁcation of the signature, the
credential is represented as a predicate in the logic (e.g.,
Alice signed (. . .)), after which its use is unencumbered
(i.e., the predicate can be used as a premise in arbitrarily
many proofs and can no longer be made unavailable). This
leads to some difﬁculty in modeling standard revocation
and expiration. To overcome this deﬁciency, the logic is
typically extended with mechanisms that allow for enforce-
ment to occur outside the logic. Our ratiﬁcation framework
shares elements of this approach, though extends this idea to
tighter integration with logic-based authorization, enforce-
ment of arbitrary consumption of credentials, and does so
while preventing the capricious consumption of credentials.
Though not previously researched in the context of logic-
based access control, consumability has been extensively
studied in applications such as electronic cash [22, 23, 24,
45, 47]. Preventing double-spending is an instance of our
problem in which the rules regarding consumption are sim-
ple: money can be spent only once. As such, it is not sur-
prising that our solution has certain elements in common
with these proposals, notably the use of an online server
(the ratiﬁer) to enforce the consumption of a credential.1
While the technique we developed can be used to imple-
ment an electronic payment system, that is by no means the
only application of consumable credentials, nor is such an
application meant to compete with work already done in
electronic payment systems. The novelty of our approach
is the development of this technique within a logic-based
access-control system, and in implementing a general prim-
itive for enforcing a range of consumption policies for arbi-
trary consumable resources. An earlier version of this work
can be found in [7].
3. Preliminaries and Goals
In this section we describe the goals of our consumable
credential system. To be able to discuss the enforcement
mechanism in concrete terms, we ﬁrst present an illustra-
tive access-control logic, discuss extending it with consum-
able credentials, and then describe what it means to have a
system that implements it.
3.1. Logic-Based Access Control
We introduce an illustrative logic which extends linear
logic [32] with constructs for access control.
It is based
on [30]. The syntax of the logic contains terms and formu-
las. Terms are strings or principals (denoted by A), which
are the base types in the logic. Generally, we refer to prin-
cipals by name such as Alice or Bob. Principals may in
turn want to refer to other principals or to create local name
spaces which gives rise to compound principals. We will
write Alice.secretary to denote the principal whom Alice
calls “secretary.”
To talk about a resource that a client wants to access,
we introduce the action() predicate that takes three pa-
rameters as arguments. The ﬁrst parameter to this pred-
icate is a string that describes the desired action (e.g.,
“open”). The second parameter is a list of qualiﬁca-
tions of the desired action (e.g., what should be opened).
1Merely detecting double-spenders does not
require an online
server [21, 25, 44, 49]. However, detecting the misuse of authority is not
sufﬁcient for access control more generally.
the last param-
To allow for unique resource requests,
eter of the action() constructor is a nonce. The for-
mula action(action, parameters , nonce) denotes that it
is OK to perform action during the session identiﬁed by
nonce. We will usually omit the nonce in informal dis-
cussion and simply say action(action, parameters) or
action(action ) if the qualiﬁcations are irrelevant. For sim-
plicity, we assume that these are the only atomic formulas
in the logic, but this is not a necessary restriction.
Our logic extends linear logic, which is a logic of re-
sources. The primary judgment in linear logic is F true
which means that there is exactly one copy of resource F .
In order to model resources that may be used more than
once, we use the judgment F valid, which means that F
may be used any number of times, including never. Logical
reasoning is done using hypothetical judgments of the form
Γ; ∆ ` F true, where Γ and ∆ are multisets of assump-
tions of the form F valid and F true, respectively. The
intuitive meaning of this judgment is that “by using each
formula in ∆ exactly once and using the formulas in Γ any
number of times, one can obtain one copy of F ”.
This intuitive meaning is captured by the following rules
of linear logic. The rule hyp says that we can prove F if ∆
contains F and nothing else. Read bottom up, the rule copy
says that we can copy resources from Γ into ∆ as many
times as required.
Γ; F true ` F true
(hyp)
Γ, F valid; ∆, F true ` G true
Γ, F valid; ∆ ` G true
(copy)
In order to reason about access-control policies we need
to be able to express the intent of a principal. This is rep-
resented using the judgment A aﬃrms F , which reads
“principal A afﬁrms the truth of formula F ”. Afﬁrmation is
different from truth because principals are not restricted in
what they afﬁrm. They may even afﬁrm contradictory state-
ments, without making the logic inconsistent. We assume
that principals are rational in that they will not refuse to af-
ﬁrm a formula that is true. This gives us the following rule
for afﬁrmations.
Γ; ∆ ` F true
Γ; ∆ ` A aﬃrms F
(aﬀ )
To be able to write afﬁrmations inside formulas, we in-
ternalize A aﬃrms F as a connective A says F . This