# CDN 2021 完全攻击指南 （二）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> [CDN 2021
> 完全攻击指南（一）](https://www.anquanke.com/post/id/227818)中主要介绍了当下针对CDN的检测和绕过方法的基本策略，在拜读了清华大学的多篇高纬度的论文后，本篇文章主要从协议层的管制出发，给大家讲述不同的协议规范下，标准和非标准的碰撞，与CDN攻击联系到一起，又会产生怎样的火花？
## HTTP范围放大攻击
范围放大攻击又称 Rangeamp，主要利用了HTTP协议中Range请求头的规范和特性来实现，针对目标网站，我们可以发送一个 HEAD
请求，来判断是否支持 Range 请求头：
如果目标网站支持 Range 传输，则会返回 `Accept-Ranges: bytes`
当然，我们也可以直接加上 `Range: bytes=` 请求头去发送数据包，然后查看其是否返回我们指定请求的字节数据，注意响应状态，返回的是 206
Partial Content
###  SBR小字节范围攻击
SBR小字节范围攻击主要是利用了请求和响应流量之间不对称的方式来进行放大攻击，客户端发送小字节（例如1字节）的Range范围请求，大多数CDN在接受到此类范围请求时，为了缓存优化、降低延迟和减少回源等，可能会采取删除Range头或者扩增请求字节的大小范围，然后再将处理后的HTTP请求发送给后端服务器。
这样一来，我们源请求和处理后的请求之间，会造成响应流量的严重倾斜，也就是不对称，其比值即为攻击放大的倍数。针对1024kb大小的资源来说，其放大倍数基本都在1000倍以上。
以下是实验中，目标资源大小分别为1MB、10MB和25MB时的流量放大倍数表：
###  OBR重叠字节范围攻击
OBR利用了多范围请求，多范围Range请求如图所示：
客户端发送类似 `Range: bytes=0-1,1-10,200-2000` 的多范围HTTP请求，正常情况下，服务器返回的是分段处理后的响应流。
此时客户端请求的是一份资源，但是服务器对重叠范围请求处理后，返回的是 N * 资源大小的数据流量，单词请求压力是之前的 N
倍，因为服务器要做大量的运算和字符串处理，重叠范围请求的越多，压力越大，内存消耗越多。
但是大部分网站都遵循RFC7233标准对重叠范围请求做了处理和修正。
如图所示，当我们发起请求多个重叠范围时，返回的最大数据为我们的单次资源最大字节数，并不能无限消耗和放大。
但是在CDN中，有一些CDN并没有遵循标准，此时可以针对两台CDN节点做级联放大攻击，以此来打跨CDN节点。
客户端发送OBR请求给前端CDN，前端CDN节点不经过处理直接发送给后端CDN节点，后端CDN节点与源站，也就是与服务器的交互请求受限于服务器的RFC标准，此时服务器返回最大单个资源请求响应数据。
后端CDN收到单个资源数据后，因为并未遵循RFC标准，将响应的资源数据放大N倍后传递给前端CDN节点，OBR重叠范围的数目越多，请求压力就越大，最终造成DDOS攻击。
以下是级联CDN的实测流量放大倍数表：
## 基于协议转换的HPACK攻击
在 `http/1.x`
的版本中，请求的Header字段未被压缩，Header字段以字符串进行传输，在高并发的场景下，每个请求都携带了Header字段，浪费了带宽，增加了网络延迟。
针对这个问题，`http/2.x`
的版本对Header信息进行压缩编码，从而提高带宽利用率，这种压缩编码算法就是HAPCK。HPACK一种新型压缩器，可消除冗余的header字段，限制已知安全攻击的漏洞，并且在受限环境中使用有限的内存要求。
在 `RFC7541` 标准中可以具体的来看HPACK
HPACK将HTTP请求的Header字段看作 `name-value` 的有序集合对，使用 2
个索引表（静态索引表、动态索引表）来把头部映射到索引值，并对不存在的头部使用哈夫曼编码，并动态缓存到索引，从而达到压缩头部的效果。
头部的内容包括了 `Header Name` 和 `Header Value`两部分，不同的类型包含了不同的内容。
静态表顾名思义，是预定义好的，总共有61对索引值，表如下：
动态表则是在每次HTTP请求中，由客户端进行扩充
k是可以增大的，每次在动态表中插入新的索引，新插入的 `key-value` 对的索引下标是s+1,动态表里的其他数据下标依次往后挪。
总的来说，HPACK的压缩和编码特性，结合CDN的前后协议不一致，将会造成新的攻击态势。
###  静态表的协议不对称放大攻击
针对源HTTP请求：
    GET / HTTP/1.1
    Host: binmake.com
    Scheme: https
经过静态表编码压缩的过程：
可以看到，压缩后直接从原来的 52 字节压缩到了 16字节：
    82 84 87 41 0B 62 69 6e 6d 61 6b 65 2e 63 6f 6d
kali上我们可以用 nghttp2 自带的 h2load 来测试压缩效率
基本上所有的CDN都支持 HTTP2 协议，但不是所有的后端源服务器都支持。
所以利用前后端 HTTP 协议不一致造成的不对称差异，可以放大流量，制造拒绝服务攻击：
此时放大倍数约为3.3。
###  动态表的协议不对称放大攻击
针对源HTTP请求：
    GET / HTTP/1.1
    Host: binmake.com
    Scheme: https
    Extension: ......(1000 bytes)
由于请求头中多出了 `Extension` 字段和1000字节的值，此时预定义的静态表中无法找到，那么HPACK就会使用扩展的动态表来记录：
注意，只有第一次请求的时候，需要未经压缩编码的扩展字段发送给 CDN ，CDN 在HPACK机制下，会将整个扩展字段在动态表中新增一条记录。
当再次请求同一资源时，CDN会检查匹配动态表是否命中：
后续的请求CDN 全部走动态表：
此时放大系数约为 62 倍，远远超过了静态表。
###  利用哈夫曼编码的协议不对称放大攻击
根据数据结构当中的树型结构，在哈夫曼算法的支持下构造出一棵最优二叉树，我们把这类树命名为哈夫曼树。哈夫曼编码是在哈夫曼树的基础之上构造出来的一种编码形式，一般应用于压缩和解压缩。
HPACK 对字符串的处理是支持哈夫曼编码的，见如下表：
                                                            code
                              code as bits                 as hex   len
            sym              aligned to MSB                aligned   in
                                                           to LSB   bits
           (  0)  |11111111|11000                             1ff8  [13]
           (  1)  |11111111|11111111|1011000                7fffd8  [23]
           (  2)  |11111111|11111111|11111110|0010         fffffe2  [28]
           (  3)  |11111111|11111111|11111110|0011         fffffe3  [28]
           (  4)  |11111111|11111111|11111110|0100         fffffe4  [28]
           (  5)  |11111111|11111111|11111110|0101         fffffe5  [28]
           (  6)  |11111111|11111111|11111110|0110         fffffe6  [28]
           (  7)  |11111111|11111111|11111110|0111         fffffe7  [28]
           (  8)  |11111111|11111111|11111110|1000         fffffe8  [28]
           (  9)  |11111111|11111111|11101010               ffffea  [24]
           ( 10)  |11111111|11111111|11111111|111100      3ffffffc  [30]
           ( 11)  |11111111|11111111|11111110|1001         fffffe9  [28]
           ( 12)  |11111111|11111111|11111110|1010         fffffea  [28]
           ( 13)  |11111111|11111111|11111111|111101      3ffffffd  [30]
    Peon & Ruellan               Standards Track                   [Page 27]
    RFC 7541                          HPACK                         May 2015
           ( 14)  |11111111|11111111|11111110|1011         fffffeb  [28]
           ( 15)  |11111111|11111111|11111110|1100         fffffec  [28]
           ( 16)  |11111111|11111111|11111110|1101         fffffed  [28]
           ( 17)  |11111111|11111111|11111110|1110         fffffee  [28]
           ( 18)  |11111111|11111111|11111110|1111         fffffef  [28]
           ( 19)  |11111111|11111111|11111111|0000         ffffff0  [28]
           ( 20)  |11111111|11111111|11111111|0001         ffffff1  [28]
           ( 21)  |11111111|11111111|11111111|0010         ffffff2  [28]
           ( 22)  |11111111|11111111|11111111|111110      3ffffffe  [30]
           ( 23)  |11111111|11111111|11111111|0011         ffffff3  [28]
           ( 24)  |11111111|11111111|11111111|0100         ffffff4  [28]
           ( 25)  |11111111|11111111|11111111|0101         ffffff5  [28]
           ( 26)  |11111111|11111111|11111111|0110         ffffff6  [28]
           ( 27)  |11111111|11111111|11111111|0111         ffffff7  [28]
           ( 28)  |11111111|11111111|11111111|1000         ffffff8  [28]
           ( 29)  |11111111|11111111|11111111|1001         ffffff9  [28]
           ( 30)  |11111111|11111111|11111111|1010         ffffffa  [28]
           ( 31)  |11111111|11111111|11111111|1011         ffffffb  [28]
       ' ' ( 32)  |010100                                       14  [ 6]
       '!' ( 33)  |11111110|00                                 3f8  [10]
       '"' ( 34)  |11111110|01                                 3f9  [10]
       '#' ( 35)  |11111111|1010                               ffa  [12]
       '$' ( 36)  |11111111|11001                             1ff9  [13]
       '%' ( 37)  |010101                                       15  [ 6]
       '&' ( 38)  |11111000                                     f8  [ 8]
       ''' ( 39)  |11111111|010                                7fa  [11]
       '(' ( 40)  |11111110|10                                 3fa  [10]
       ')' ( 41)  |11111110|11                                 3fb  [10]
       '*' ( 42)  |11111001                                     f9  [ 8]