User: Please list the common types of security vulnerabilities and give examples.
Assistant: 1. SQL Injection Vulnerabilities Attackers send malicious requests to the background database of the application by entering malicious SQL codes, causing the database to execute malicious codes and obtain sensitive information. For example: ```SQL SELECT * from users WHERE username = 'admin' AND password = '123456' ``` An attacker can use the following code to launch an injection attack: ```SQL ' or '1'='1 ``` 2. XSS (Cross-Site Scripting) Attack Attackers embed malicious JavaScript code into input boxes, links, etc. Executed in the browser, so as to achieve some purposes of the attacker. For example: ```JavaScript <script> alert('malicious code'); </script> ``` The attacker can embed the code in a comment box, and when other users view the comment, the pop-up box will be triggered, causing Harassment or other worse consequences. 3. CSRF (Cross-Site Request Forgery) attack The attacker embeds a link or form containing malicious code into the website where the victim has logged in, so that the victim can complete some malicious operations without knowing it, such as: ` ``HTML <img src="http://www.example.com/api/delete?id=3&token=123456" /> ``` The attacker obtains the API address of a website’s delete operation and the current user’s identity token, and then concatenate the two parameters into a src attribute in the img tag, and embed this HTML code into the malicious website. When the victim visits, if the user has logged in to the website before, the deletion operation It will be done without knowing it. 4. File upload vulnerability Attackers can obtain sensitive information or control the background of the website by uploading malicious files to the file upload function of the website. For example, an attacker uploads a malicious file and uses the uploaded file as a platform for subsequent attacks: ```PHP <?php $file = $_FILES['file']; $name = uniqid().$file['name' ]; if (move_uploaded_file($file['tmp_name'], 'uploads/'.$name)) { echo 'Uploaded successfully! '; } else { echo 'Upload failed! '; } ?> ``` An attacker can upload a PHP script as an attack platform, and then directly execute background commands by accessing the script file to control the background operation of the entire website.