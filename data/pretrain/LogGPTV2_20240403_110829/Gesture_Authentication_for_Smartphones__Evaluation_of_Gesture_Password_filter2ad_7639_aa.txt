title:Gesture Authentication for Smartphones: Evaluation of Gesture Password
Selection Policies
author:Eunyong Cheon and
Yonghwan Shin and
Jun Ho Huh and
Hyoungshick Kim and
Ian Oakley
2020 IEEE Symposium on Security and Privacy
Gesture Authentication for Smartphones: Evaluation
of Gesture Password Selection Policies
Eunyong Cheon1, Yonghwan Shin1, Jun Ho Huh2, Hyoungshick Kim3 and Ian Oakley1
1Department of Human Factors Engineering, UNIST, Republic of Korea
2Samsung Research, Seoul, Republic of Korea
3Department of Software, Sungkyunkwan University, Republic of Korea
Email: PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract—Touchscreen gestures are attracting research atten-
tion as an authentication method. While studies have showcased
their usability, it has proven more complex to determine, let
alone enhance, their security. Problems stem both from the small
scale of current data sets and the fact that gestures are matched
imprecisely – by a distance metric. This makes it challenging
to assess entropy with traditional algorithms. To address these
problems, we captured a large set of gesture passwords (N=2594)
from crowd workers, and developed a security assessment frame-
work that can calculate partial guessing entropy estimates, and
generate dictionaries that crack 23.13% or more gestures in
online attacks (within 20 guesses). To improve the entropy of
gesture passwords, we designed novel blacklist and lexical policies
to, respectively, restrict and inspire gesture creation. We close by
validating both our security assessment framework and policies
in a new crowd-sourced study (N=4000). Our blacklists increase
entropy and resistance to dictionary based guessing attacks.
I. INTRODUCTION
Smartphone password schemes like screen lock patterns
and PINs suffer from the security issues that emerge from
the biased ways in which users choose their passwords: they
select easy-to-remember and quick-to-draw lock patterns [1]
and PINs [2] that are also easy to guess. Free-form gestures
are a potentially fast and secure way of authenticating users
to smartphones that may address the problem. Rather than
being constrained by a ﬁxed grid or keypad layout and small
password space (e.g., 389,112 possible lock patterns), users
can freely draw one or more strokes on a touchscreen [3]
or bespoke input surface [4]. The resultant stream of co-
ordinates can be matched against stored templates, using
mature algorithms [5], to grant or restrict access. The use of
gestures conveys numerous advantages: the theoretical number
of possible gestures is extremely large [3] and; gesture input
may require less visual attention than input based on selecting
buttons or targets [6] making it particularly suitable for mobile
or wearable scenarios where users may be working on small
displays [7] or busy and engaged in other dominant tasks [8].
While the potential beneﬁts of gesture passwords are well-
established, their applicability for use as a smartphone un-
lock scheme and their inherent security and usability remain
unclear. One issue is the small size of existing data sets –
prior work has collected between 22 [9] and 345 [10] different
predeﬁned or user-proposed gestures from 34 to 45 users and
the largest analysis to date [11] combines two proprietary
data sets, captured in different studies/settings,
to yield a
corpus of 529 different gestures in total. This contrasts to
existing analyses of passwords [12], PINs [13] and pattern
locks [14] which based security assessments on data sets of
several thousand examples. In light of these precedents, we
argue it is necessary to complement existing claims about the
high entropy of gesture passwords, based on controlled small
scale studies in the lab or ﬁeld, with the data and analysis
from a larger online study of gesture passwords.
A related problem is a lack of established metrics for
assessing security – unlike the exact comparisons possible
with passwords and PINs, gestures are matched via a simi-
larity measure (e.g., cosine [15] or Dynamic Time Warping
(DTW) [16] distance). There are currently no methods for es-
tablishing common security metrics such as guessing entropy
for gesture data sets, making it hard to contrast gestures against
other authentication methods. Researchers have instead made
security assessments based on, for example, calculations of
Equal Error Rate (EER) [9], [3] or via resistance to manual [3],
[17] or brute-force guessing attacks [11]. Improving the quality
and scale of gesture data sets is an integral current requirement
for work in this area; doing so will enable development of
new forms of security analysis, provide a more comprehensive
assessment of the security of the basic technique, and provide
raw evidence required to determine the suitability of gesture
passwords as a lock scheme for smartphones.
This paper addresses these limitations and evaluates the fea-
sibility and practicality of using gesture passwords as a main
authentication technique on smartphones. In this scenario, we
constrain gestures to involve single strokes by single ﬁngers
on a small screen region, similar to graphical pattern locks [4].
From this starting point, we describe a multi-stage study. We
ﬁrst capture the largest extant sample of gesture passwords
(N=2594) from crowd workers. We analyze this to extract key
security metrics, such as an EER for the gesture matching
threshold, and as the basis for developing both a dictionary of
the 20 most common gestures (Android only allows 20 con-
secutive fail attempts), and an automated entropy assessment
algorithm. We show the dictionary is effective at cracking the
gesture passwords: 54.18% to 58.37% at the EER threshold
value and 23.13% to 31.49% with a stricter threshold derived
from closely related prior work [10]. This indicates user-
chosen gesture passwords, just like other unlock schemes, are
insecure against dictionary-based password guessing attacks.
© 2020, Ian Oakley. Under license to IEEE.
DOI 10.1109/SP40000.2020.00034
249
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:12:34 UTC from IEEE Xplore.  Restrictions apply. 
To help users select stronger gesture passwords, we intro-
duce three novel policies: a lexical policy that involves present-
ing words that can inspire gestures, and two blacklist policy
variants that block users from choosing password gestures
that match popularly used gestures. We capture and analyze
a new crowd-sourced data set (N=4000) and compare the
usability and security of gestures generated with these policies
against those generated in a standard condition. The results
show that while our lexical policy is ineffective, our blacklist
policies increase both the entropy of gesture passwords and
their resistance to future dictionary based guessing attacks:
cracking as few as 14.93% of gestures when a consolidated
blacklist policy was enforced. Usability trade-offs were small
compared to the baseline policy: between 1.1 and 1.7 seconds
slower in mean authentication times, and approximately 3%
lower in 1-day recall tests (memorability).
The contributions are: 1) the largest data set of gesture pass-
words – over both studies 6594 unique participants produce
more than 67 thousand examples of 9188 different gesture
passwords. 2) a novel security assessment framework for
gesture-based authentication that can generate a dictionary of
representative gesture passwords, measure cracking rates, and
calculate the entropy of user-chosen gesture passwords. 3)
novel blacklist and lexical policies for improving the entropy
of the gesture passwords users create. Finally, 4) an assessment
of these policies in terms of both usability (over multiple recall
sessions) and our newly developed security metrics.
II. RELATED WORK
The use of gestures to authenticate an individual has a long
history; a written signature is, fundamentally, a 2D gesture.
With the emergence of large, high resolution touch-screens
on mobile devices, researchers began to explore how to apply
gesture authentication to this new space. Early work focused
on the biometric properties of gesture input, suggesting that
how users stroke the screen while producing single [18] or
multi-touch [9] gestures can provide identifying information
with an accuracy of between 77% – 90% for a single input.
A. Gesture Passwords
More recent work has focused on gestures as passwords in
and of themselves – when the strokes made, rather than how
they are performed, is the data examined to authenticate a
user [3]. Various aspects of performance have been examined
in this space. One prominent strand of work has focused on
gestures that contain one or more ﬁnger strokes, with the
requirement that multiple ﬁnger-strokes overlap temporally,
and examined optimal algorithms to recognize gesture pass-
words [5] and the usability and memorability of gesture pass-
words compared to text passwords after periods of one hour,
one day and one week [10]. The authors conclude that gestures
passwords achieve levels of usability equal to or exceeding text
passwords – for a set of 91 participants creating and recalling
pairs of gesture passwords, mean creation times of 69 seconds,
recall rates of 89.6% and recall times of 16.49 seconds were
indistinguishable from text password performance. We also
note that current touch screen gesture authentication work
focuses on input over the whole screen; no existing work
studies the use of gesture passwords on smartphones with a
more limited drawing canvas. We focus on the feasibility of
using gesture passwords as an alternative graphical password
(lock) scheme on smartphones – as such we restrict input to
the small phone screen regions typical in phone lock systems.
B. Gesture Password Security
Although the usability of gesture authentication schemes
can be assessed in much the same way as any other form
of password, assessing their security is more difﬁcult. This
is fundamentally because, unlike traditional password sys-
tems, matches between stored gestures and those entered by
users (or attackers) is achieved not
through an exact and
precise comparison but by exceeding a threshold value on
a similarity measure such as cosine distance (used in the
Protractor recognizer [15]) or DTW distance [18], [16]. The
key consequence of this approach is that
there are many
possible valid variations of a gesture that would authenticate
a user and that different matching algorithms [5] and match
thresholds (or number of template gestures [3]) will yield
different levels of performance in terms of the proportion of
genuine or malicious gestures that are conﬁrmed as a valid
match. In practice, this means that while a na¨ıve analysis
of the entropy of gesture passwords, deﬁned as the number
of possible strokes that can be made on a canvas of some
given resolution, is extremely high (e.g., 100 bits for 16 point
gestures drawn on an 8 by 9 grid [10]), the practical entropy
of the space is likely much lower, as multiple strokes within
this space will match one another. Unsurprisingly, as with
other forms of password, users are biased to produce speciﬁc
gestures more frequently than others [11].
Reﬂecting these problems, prior research assesses the se-
curity of gesture authentication schemes through alternative
approaches. A common one is empirical: gesture passwords
are attacked by either observers [3], [17], or via automated
processes such as through random geometric guesses [5] and
their resistance to these attacks is contrasted against data for
baseline cases such as passwords. Recent automated attacks
exploit information extracted from gesture data sets to improve
performance: the symmetry of gestures and a dictionary of
commonly selected gesture passwords [11]. Although it is not
applicable to an online attack scenario (with guessing attempt
limits), this attack was shown to be highly successful if used
for an ofﬂine attack – crack rates were between 47.71% and
55.9% with 109 guesses. We note that the large sets of gesture
password samples that would be necessary to generate and
validate attack dictionaries do not currently exist.
C. Password Policies
Password selection policies, such as mandated minimum
length or required special characters, can help users create
stronger passwords [19]. However, policies that are effective
at
improving password entropy can negatively impact us-
ability [20]. System-assisted password selection policies [14]
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:12:34 UTC from IEEE Xplore.  Restrictions apply. 
250
can be effective. They try to guide users to create more
secure passwords – signiﬁcantly improving security with small
compromises in recall rates and unlock times. Currently, only
limited work has examined password selection policies for
gesture passwords – Clark et al. [21] proposed three policies
that request users to create gestures that are fast, random or
use multiple ﬁngers. Evaluations indicate they had limited
impact on security and may have negatively affected usability.
Given the importance of password policies in ensuring the
security of other forms of password system, we identify the
development of policies that can help users select more secure
gesture passwords as an underdeveloped area of research.
III. SECURITY EVALUATION FRAMEWORK
Here we discuss the challenges in measuring the security of
gesture passwords, and propose a novel evaluation framework
for gesture password security. Our framework consists of the
following three methods: (1) conﬁguring gesture algorithm
parameters based on EERs, and measuring false acceptance
rates as the ﬁrst security measure; (2) measuring entropy of
gesture passwords through an n-gram Markov Model; and (3)
measuring the resistance of gestures to a novel clustering-
based dictionary attack. This framework is used later to
compare the security of our gesture selection policies.
A. Online Attack Model for Smartphones
To mitigate online guessing attacks on smartphones, only k
consecutive fail unlock attempts are allowed (e.g., k = 20 for
Android and k = 10 for iOS). That is, after k unsuccessful
attempts, an attacker can no longer try unlocking the target
device. Thus, the attacker’s goal is to unlock a target device
within k guessing attempts. If the attacker has no information
about the gesture password being used, the best attack strategy
is to try the top k most commonly used gesture passwords
ﬁrst. If a gesture password data set is available, the attacker
could use a data-driven approach to build this list of top
k gesture passwords, and try them sequentially to unlock
victims’ devices. In the next section, we explain why building
a guessing dictionary for gesture passwords is challenging.
B. Challenges in Evaluating Security
it
We identify two key problems with assessing the security
of gesture passwords in response to online attacks. The ﬁrst
relates to modelling the gesture space – as the theoretical
space is very large,
is an open question how to best
identify common gesture forms. Prior work has proposed
manual classiﬁcation of gestures into broad categories (e.g.
digits, letters, geometric shapes [11]) to support ofﬂine attacks.
There is no prior work exploring automated approaches to
this problem, such as n-gram models or Probabilistic Context-
Free Grammars (PCFG) [22] capable of computing probability
scores for all possible gestures, or clustering algorithms that
group gestures in a set based on their similarity. Due to this
lack, we believe that exploring mechanisms to automatically
determine common gesture classes is an important ﬁrst step
to support online attacks on gesture authentication systems.
The second relates to the fact that multiple possible vari-
ations of a gesture, effectively multiple different gestures,
will authenticate any given user. This is because thresholded
distance metrics, as opposed to exact similarity, are used
to determine matches between entered gestures and stored
templates. To create maximally effective dictionaries for online
attack, it is therefore important to be able to generate or select
highly representative gesture exemplars from common gesture
classes. Prior online approaches to this problem [11], focused
on making large numbers of diverse guesses by distorting
randomly selected gesture examples, do not apply to an online
attack scenario in which the maximum number of guesses is
low (e.g., 10 or 20). A viable online attack against gesture
passwords must be able to identify optimal guesses for each
gesture class. In the next sections, we explain how our gesture-
tailored n-gram model and clustering-based dictionary have
been designed to address these challenges.
C. Preprocessing and Equal Error Rates
Prior to performing recognition or other analysis, gestures
need to be normalized. We follow recommendations from prior
work [5] and apply scale and position normalization, making
these proprieties effectively invariant – two gestures depicting
similar leftward arrows should therefore be matched regardless
of any differences in the scale or location of the strokes on
the canvas. We do not apply rotation normalization, making
gestures rotation variant – a leftward arrow would therefore
not be matched to an otherwise similar rightward arrow.
There are many existing algorithms for gesture recognition.
Our framework applies two recognizers that have been widely
used in recent studies of gesture passwords: Protractor [3],
[10] and Dynamic Time Warping (DTW) [11]. We describe
the conﬁguration of these algorithms below:
Protractor: We used the reference $N Protractor imple-
mentation [23]. Gestures are compared by the inverse cosine
distance between their vectors. We conﬁgured the recognizer
to allow only single stroke gestures and to allow gestures to
be matched on drawn shape rather than stroke sequence (i.e.,
to use original and inverted stroke sequences as templates).
Rotation invariance was applied at the default thresholds: +-
30◦ degrees for the initial stroke, deﬁned as 1/8 of the gesture
length, and 45◦ for the gesture as a whole.
DTW: We used a standard DTW implementation based on
a Euclidean distance measure [16]. No additional processes
are required to maintain rotation variance.
A key ﬁnal normalization of gestures is re-sampling: both
protractor and DTW algorithms require that gestures being
matched are the same size. They meet this constraint by re-
sampling all strokes to a preset size; optimal values for this
size parameter vary depending on the gesture set. As in prior
work [11], we determine optimal values for this parameter by
creating multiple sets of re-sampled gestures and examining
Equal Error Rates (EERs). Speciﬁcally, we create 12 gesture
sets with re-sampled lengths of between 8 and 96 points, in
steps of 8. We calculate EERs by adapting processes described
in Sherman et al. [3]. For a given data set, False Rejection
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:12:34 UTC from IEEE Xplore.  Restrictions apply. 
251
Rates (FRRs), which measure the proportions of users’ gen-
uine gestures that are rejected by a gesture algorithm, are
calculated by matching different examples of each individual’s
gestures against each other. False Acceptance Rates (FARs),
which measure the proportion of others’ gestures being mis-
classiﬁed as users’ own, are based on matching an individual’s
stored gesture template against those from all other individu-
als. FARs reﬂect the rate at which attackers might succeed in
guessing users’ gestures. By calculating FRRs and FARs for
a range of distance threshold values, we can derive an EER
at their intersection. Re-sampling size is then set to minimize
EERs across the data-sets being examined.
D. Entropy Analysis with n-gram Markov Model
Measuring the guessing entropy of passwords is commonly
achieved by analyzing the probability distribution of real-
world passwords. However, as we can only collect samples
representing a small portion of the theoretically possible space
of gesture passwords, we need to develop a probabilistic
password model [22] that uses collected samples to estimate
the probability distribution of all gesture passwords. We do this
by developing n-gram Markov models that can calculate the
probability of each gesture password. n-gram Markov models
are an appropriate technique as they have successfully been
used to estimate the probability distribution of other graphical
password schemes [1], [14]. In an n-gram Markov model,
the probability of the next stroke in a graphical password is
calculated based on a preﬁx of length n. The idea is that
adjacent strokes in user-chosen graphical passwords are not
independent, but follow certain high probability patterns.
In order to produce an n-gram model, based on sequences
of discrete tokens, from a continuous two-dimensional gesture
representation we need to design a discretization process that
minimizes error. Our multi-stage process is described below
and illustrated in Figure 1.
Discretization: First, we apply Douglas-Peucker (DP) line
simpliﬁcation [24] to each gesture. We examine the relation-
ship between the DP simpliﬁcation tolerance value and the
number of simpliﬁed strokes, selecting the knee point as the
optimal value. Based on the resultant set of simpliﬁed strokes,
we create discrete symbols based on stroke length and stroke
angle. To identify a mapping that minimizes error, we consider
multiple divisions of stroke length (dividing the full range of
all observed stroke lengths into 2, 3 or 4 equally sized length
regions) and angle (into 6, 8, 10, 12 and 14 equally sized
angular regions). This leads to 15 differently sized models
containing from between 12 (2 lengths by 6 angles) and 56
(4 lengths by 14 angles) possible symbols, roughly equivalent
to the number of symbols in a pattern (9 points) or PIN (10
symbols) and an alphanumeric password (about 95 symbols).
In addition, we also consider two possible phases for the
angular regions: with an origin at 0◦ and an origin at half
the region angular width (e.g., 22.5◦ if there are 8 regions).
We refer to these phases as aligned and offset. This leads to a
total of 30 different approaches. Following this transformation,
we are able to represent each gesture as a series of discrete
symbols each representing a single stroke.
Generation: To estimate the probability of any possible
gesture password from a set of gesture samples, it is es-
sential to develop a probabilistic password model (e.g., n-
gram Markov model) that effectively represents the probability
distribution of real-world gesture passwords. Therefore, we
build a number of reasonable n-gram Markov models across
various discretizations and n-gram Markov parameters. Using
a 5-fold process, we create a set of nine 2-gram models using
each of the 30 discretizations: 270 models in total. Each set
explores a grid search over two additional variables: smooth-
ing method (“add-1 Laplace smoothing”, “add-1/(number of
symbols) Laplace smoothing” and “Good-Turing smoothing”)
and; exclusion policy for short gestures. Speciﬁcally, we create
models that 1) include all gestures, 2) exclude single stroke
gestures, and 3) exclude single and dual stroke gestures. The
use of smoothing methods enables n-gram models to cover
rare n-gram cases. We explore excluding extremely short
gestures as their probability may be over-weighted, potentially
biasing the n-gram models. In each model, we apply end-point
normalization to ensure the sum of probabilities of all possible
gesture passwords is 1. We opt not to examine 3-gram models
due to the difﬁculty of collecting a data set large enough to
yield an acceptably low proportion of unseen cases.
Selection: To select reasonable models, we apply three cri-
teria. The ﬁrst two rely on comparisons between original user-
chosen gestures and gestures derived from the discretization
process and n-gram Markov models. In order to make these
comparisons, we reconstitute gestures from their symbolic
forms in the models. This is done by creating a contiguous
sequence of strokes, with each stroke’s length and angle
set to the central values of its length/angle segment – see
steps 6 and 7 in Figure 1. The ﬁrst criteria based on this
process is the crack rate using k guesses at a speciﬁc distance
threshold t. We believe models achieving a higher crack
rate more accurately reﬂect the probability distribution of the
collected samples. The second criteria is the similarity between
each original user-chosen gesture and its discretized n-gram
representation. For a given n-gram model, we calculate this
as the proportion of gestures that are more similar than a
speciﬁc distance threshold t. We believe models in which
gesture representations are more similar to the originals will
be more accurate. The third criteria we apply is the model
completeness. We surmise that models in which we observe
a larger proportion of possible n-gram cases will be more
accurate. We calculate these values for all models. Models
should be selected for further study through manual inspection
to achieve a good balance of performance across these criteria.
Optimization: Any discretization method for n-gram
Markov models yields degenerate cases (e.g., strokes on an
edge). Thus, to improve n-gram Markov model performance,
we need to handle degenerate cases in each selected model. We
do this during discretization of strokes into length and angle
categories by treating cases within b% of boundary edges as
ambiguous and incrementing the n-gram sequence frequency
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:12:34 UTC from IEEE Xplore.  Restrictions apply. 
252
'!


(!	$
#
%
)!
#
*!
 #

+!	
#
#
,!
#
"
-!#
