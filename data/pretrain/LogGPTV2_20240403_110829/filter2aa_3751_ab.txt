```ruby
case 比较对象
when 值 1 then
 处理 1
when 值 2 then
 处理 2
when 值 3 then
 处理 3
else
 处理 4
end
```
> 可以省略 then
本例的比较对象的值有 3 个，但根据实际情况可以无限增加下去。
还有，`when` 可以一次指定多个值。下面的示例从数组 `tags` 的开头依次取出元素，判断元素值，输出相应的结果。
```ruby
tags = [ "A", "IMG", "PRE" ]
tags.each do |tagname|
  case tagname
  when "P","A","I","B","BLOCKQUOTE"
    puts "#{tagname} has child."
  when "IMG", "BR"
    puts "#{tagname} has no child."
  else
    puts "#{tagname} cannot be used."
  end
end
```
执行示例
```ruby
> ruby case.rb
A has child.
IMG has no child.
PRE cannot be used.
```
我们再来看看其他例子
```ruby
array = [ "a", 1, nil ]
array.each do |item|
  case item
  when String
    puts "item is a String."
  when Numeric
    puts "item is a Numeric."
  else
    puts "item is something."
  end
end
```
执行示例
```ruby
> ruby case_class.rb
item is a String.
item is a Numeric.
item is something.
```
在本例中，程序判断传过来的对象类型是字符串（`String` 类）还是数值（`Numeric` 类），或者均不是以上两者，然后再输出相应的结果。
在这里，我们同样是使用 `case` 语句，不过判断的主体与之前的例子有点区别。本例中的 `when` 实际并不是直接判断传过来的字符串，而是先查找该对象属于哪个类，然后再根据这个类的信息来进行条件判断。
我们还可以根据正则表达式的匹配结果进行不同处理。下面是使用正则表达式做判断的 `case` 语句的例子。
```ruby
text.each_line do |line|
  case line
  when /^From:/i
    puts "发现寄信人信息"
  when /^To:/i
    puts "发现收信人信息"
  when /^Subject:/i
    puts "发现主题信息"
  when /^$/
    puts "头部解析完毕"
    exit
  else
    ## 跳出处理
  end
end
```
这是一个解析电子邮件头部的程序。为了简化程序，我们并没有考虑有多个头部的情况，而且电子邮件里的内容我们也没取出来。在这里，大家掌握程序的大概的处理流程就可以了。
`each_line` 方法逐行读取电子邮件正文数据 `text`，并将每行的内容赋值给变量 `line`。这个是处理文件、文本数据时的典型的写法。
接着 `case` 语句判断得到的字符串的内容，执行不同的处理。以 From: 开头时输出“发现寄信人信息”，以 `To:` 开头时输出“发现收信人信息”，以 `Subject:` 开头时输出“发现主题信息”。
最后的 `when` 判断的 `/^$/`，表示行的开头后马上就接着是行尾的意思 3，也就是说，这是表示空行的正则表达式。电子邮件的头部和正文间一定会以空行作间隔，因此根据这个规则我们就可以把空行作为头部结束的标志。当 `when` 遇到空行，输出“头部解析完毕”的信息后调用 `exit` 方法，结束程序。
> 在正则表达式中，^ 表示匹配字符串的开始，$ 表示匹配字符串的结束。
## === 与 case 语句
在 `case` `语句中，when` 判断值是否相等时，实际是使用 `===` 运算符来判断的。左边是数值或者字符串时，`===` 与 `==` 的意义是一样的，除此以外，`===` 还可以与 `=~` 一样用来判断正则表达式是否匹配，或者判断右边的对象是否属于左边的类，等等。对比单纯的判断两边的值是否相等，`===` 能表达更加广义的“相等”。
```ruby
p (/zz/ === "xyzzy")    #=> true
p (String === "xyzzy")  #=> true
p ((1..3) === 2)        #=> true
```
用 if 语句改写 case 语句的程序如下所示。请注意 when 指定的对象在===h 的左边。
# if 修饰符与 unless 修饰符
if 与 unless 可以写在希望执行的代码的后面。像下面这样：
```ruby
puts "a 比b 大" if a > b
```
这与下面的写法是等价的。
```ruby
if a > b
  puts "a 比b 大"
end
```
使用修饰符的写法会使程序更加紧凑。通常，我们在希望强调代码执行的内容时会使用修饰符写法。同样地，在使用修饰符写法时，请大家注意程序的易读性。
# 对象的同一性
所有的对象都有标识和值。
标识（ID）用来表示对象同一性。Ruby 中所有对象都是唯一的，对象的 ID 可以通过 `object_id`（或者 `__id__`）方法取得。
```ruby
ary1 = []
ary2 = []
p ary1.object_id    #=> 67653636
p ary2.object_id    #=> 67650432
```
我们用 `equal?` 方法判断两个对象是否同一个对象（ID 是否相同）。
```ruby
str1 = "foo"
str2 = str1
str3 = "f" + "o" + "o"
p str1.equal?(str2)    #=> true
p str1.equal?(str3)    #=> false
```
对象的“值”就是对象拥有的信息。例如，只要对象的字符串内容相等，Ruby 就会认为对象的值相等。Ruby 使用 `==` 来判断对象的值是否相等。
```ruby
str1 = "foo"
str2 = "f" + "o" + "o"
p str1 == str2    #=> true
```
除了 `==` 以外，Ruby 还提供 `eql?` 方法用来判断对象的值是否相等。`==` 与 `eql?` 都是 Object 类定义的方法，大部分情况下它们的执行结果都是一样的。但也有例外，数值类会重定义 `eql?` 方法，因此执行后有不一样结果。
```ruby
p 1.0 == 1      #=> true
p 1.0.eql?(1)    #=> false
```
凭直觉来讲，把 `1.0` 与 `1` 判断为相同的值会更加方便。在一般情况进行值的比较时使用 `==`，但是在一些需要进行更严谨的比较的程序中，就需要用到 `eql?` 方法。例如，`0` 与 `0.0` 作为散列的键时，会判断为不同的键，这是由于散列对象内部的键比较使用了 `eql?` 方法来判断。
```ruby
hash = { 0 => "0"}
p hash[0.0]    #=> nil
p hash[0]      #=> "0"
```