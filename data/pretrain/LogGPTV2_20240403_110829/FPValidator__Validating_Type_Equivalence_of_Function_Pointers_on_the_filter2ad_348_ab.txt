function
pointer
function
pointer
pointer
record
Figure 2. Example code and its labeled type graph
For a type τ, we deﬁne its deﬁnition graph D(τ) as the
subgraph containing all reachable nodes from τ and edges
connecting them, which completely deﬁnes τ. For example
the deﬁnition graph of list is shown in Figure 3. Then we
(cid:2)
deﬁne the labeled structural equivalence of type τ and τ
as that D(τ) and D(τ
(cid:2)) are completely identical, including
their structures, type names and edge labels. More formally,
type τ = T (N (τ), , ..., ) and τ
(cid:2) =
T (cid:2)(N (τ
(cid:2)
n >) is labeled structural
equivalent if T = T (cid:2)
(cid:2)), and ∀1 , ..., , , ..., ), S(τ) is recursively deﬁned as:
S(τ) = T N (τ) l1(S(τ1))l2(S(τ2))...ln(S(τn))
At the beginning of S(τ) is the type constructor, followed
by the type name, and then the label and recursive labeled
type signature of each depended type. The recursion termi-
nates when τ is a primitive type, because it depends on no
other types. For example the function pointer type walker,
which is declared by a typedef statement and denoted by
node 2 in the labeled type graph, has the following labeled
type signature.
S(walker) =
pointer ptr(f unction ret(int)p1(pointer ptr(void)))
Some types may be deﬁned recursively, such as link which
depends on a pointer type that points to itself. To prevent
inﬁnite loops in this case, we adopt an alias approach to
eliminate recursive dependence. While we are traversing the
deﬁnition graph, a type is assigned an unique alias at the ﬁrst
time it is met. Later when the type is met again, we simply
use its alias to represent it, without recursively traversing
its depended types. We use the sequence in which types are
traversed as type aliases. For instance S(list) is equal to
record list next(pointer ptr(T 1))value(pointer ptr(void))
where T 1 is the alias of list.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
The relationship between the type deﬁnition graph and the
labeled type signature is 1 to 1. That is to say, throughout
the whole program including all compilation units, each type
has a unique signature, and, on the other hand, the deﬁnition
graph can be accurately rebuilt based on the signature. Hence
we could use labeled type signatures to precisely validate the
type equivalence between function pointers and their target
functions.
Different labeled type signatures usually have different
lengthes. Some signatures could be very long. In order
to simplify storing and comparing labeled type signatures,
we hash signatures and only store and compare their hash
values. The signature hashes for functions are stored in a
separate section in the ELF ﬁles (executables or dynamic
libraries). When an ELF ﬁle is loaded, these signature hashes
are read in and organized as a hash table, indexed by function
entries. For executables, the addresses of function entries
are determined at the linking stage, so they can be stored
along with signature hashes. However, for dynamic libraries,
these addresses are determined at the load stage, so they are
calculated after the load point of the library is determined.
The hash table is marked as read-only after all signature
hashes are loaded,
in order to prevent malicious modi-
ﬁcations. The signature hashes for function pointers are
treated as constants stored in read-only data section, which
is discussed in details next.
C. Instrumenting Programs
FPValidator checks function pointers at runtime. In order
to prevent adversaries from circumventing the dynamic
validation, it
is desired that the validation is performed
immediately before each indirect call. We use a compilation-
stage instrumentation mechanism to achieve this goal.
First of all, we need to identify indirect function calls. In
general a call can be expressed as (f p expr)(args), where
f p expr could be an address, a function pointer variable or
a complex expression consisting of operations such as array
indexing, ﬁeld references, type castings, or even another call,
and args is the parameter list. Whatever f p expr is, as
long as its value may change at runtime, the call is treated
as an indirect call and the type of target functions should
be the type of f p expr. To determine whether f p expr
could change, we traverse its Abstract Syntax Tree (AST).
If its value directly or indirectly depends on variables or the
results of function calls, the call is treated as an indirect call
and will be instrumented. In fact, if the value of a complex
expression may change, the expression as a whole can be
viewed as an implicit function pointer variable. FPValidator
validates not only function pointer variables but also function
pointer expressions. It has wider coverage than solutions that
only validate function pointer variables, such as [4].
Each indirect call is translated, by instrumentation, into
the code fragment shown in Figure 4. If f p expr is a
complex expression, it may have side effect. To prevent it
1 ({
2
3
4
5
6
7 } )
t y p e o f ( f p e x p r )
h a s h t
h =
fp = f p e x p r ;
HASH ;
f p v a l i d a t e (
fp ( a r g s ) ;
fp ,
h ) ;
Figure 4. Code after instrumentation
from being executed multiple times, at the beginning we
save the target address it generates into a local variable
f p, and later use the variable instead. HASH stands
for the hash of f p expr’s labeled type signature, which is
generated at compilation time and declared as a constant.
Its location is therefore within the read-only data section.
During execution, HASH is assigned to a local variable,
f p validate,
which is in turn passed as a parameter to
the validating function, along with the value of
f p (i.e.
the target address). We enclose all statements as a compound
statement whose value is equal to that of its last statement,
i.e. the result of the indirect call, in that the result may be
used as a right value in some cases, such as the statement
a = (f p expr)(args).
f p validate contains the actual validation code, which
is implemented in a shared object and linked dynamically,
so that updating the validation code is convenient, without
f p validate looks
requiring to recompile the program.
up the hash of the type signature of the target function in
f p, the target address, and
the hash table according to
then compares it with
h. If they are identical, the function
pointer and the target function are type equivalent, otherwise
the indirect call is illegal.
We accomplish the instrumentation through transforming
AST. AST is generated by the compiler, which contains
sufﬁcient type information that we can use. We traverse the
AST of each function, ﬁnding nodes that represent indirect
call expressions, and replacing each of them with a new AST
corresponding to the code segment shown in Figure 4. The
original AST of an indirect call expression is depicted in
Figure 5(a). After instrumentation, according to whether the
return type of the indirect call is void, the original AST is
replaced by a BIND EXPR or a TARGET EXPR separately.
The AST for these two expressions are similar, except for
some subtle difference. We only show the AST of the latter
in Figure 5(b).
IV. IMPLEMENTATION AND EVALUATION
FPValidator can be applied to programs written in stati-
cally typed languages. We have integrated FPValidator into
gcc for GNU C. This section describes our implementation
and its evaluation.
55
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
(a) Original AST
TARGET_EXPR
AST
IMod
Source
File
gcc
Type
Information
ELF
File
ELFRwt
Final
Executable
BIND_EXPR
_tmp
Figure 6. Overview of the implementation
STATEMENT_LIST
MODIFY_EXPR
CALL_EXPR
MODIFY_EXPR
__fp
fp_expr
__fp_check
__h
CALL_EXPR
args
(b) AST After Instrumentation
Figure 5.
Instrumenting AST
A. Implementation
Our implementation includes two parts, namely an instru-
menting module (IMod) and an ELF rewriter (ELFRwt).
IMod is responsible for collecting type information and
instrumenting indirect call statements, while ELFRwt is re-
sponsible for rewriting the generated ELF ﬁle to add the type
hashes of functions. The architecture of our implementation
is shown in Figure 6.
IMod inserts the validation code at the compilation stage,
so we need to modify the compilation process. To minimize
the modiﬁcation, we build IMod upon GCC Extension Mod-
ules (GEM) [19]. GEM patches gcc, adding a group of hooks
which can be used to invoke user-deﬁned functions at certain
points. User-deﬁned functions are encapsulated in dynami-
cally linked libraries which can be speciﬁed by command-
line options. IMod is implemented as a GEM module,
deﬁning the function for the hook gem ﬁnish function which
is called after a function has been parsed and its AST has
been generated. In the hook function we traverse the AST,
searching for indirect call expressions and instrumenting
each of them. The instrumented AST is used later to generate
the ELF ﬁle. IMod also collects the type information of
functions, i.e. the hashes of type signatures, which is passed
to ELFRwt for building the type hash table.
The ﬁnal ELF ﬁle is built by ELFRwt. ELFRwt
is
implemented as a separate program executed after the ELF
ﬁle has been generated by gcc. It rewrites the ELF ﬁle,
adding a dedicated section to store the signature hashes of
functions. These hashes could be obtained from IMode if
the source code is available. However, sometimes we can
not get the source code, for example, when dealing with a
dynamic library provided by a thirty party. Fortunately, we
can still obtain signature hashes from head ﬁles which are
usually available, and rewrite the library to add these hashes.
In this case, FPValidator can not validate indirect calls in
the dynamic library since the library is not instrumented,
but FPValidator can still validate whether other indirect
calls, when calling functions in the library, target compatible
functions.
B. Evaluation
FPValidator causes extra overhead, including the time
overhead of building and executing due to the instrumen-
tation and runtime validation, as well as the space overhead
due to the addition of type information. However, we will
demonstrate in this subsection that the increased overhead
is low.
Adversaries often tend to compromise programs that run
for a long time, especially those providing network services,
so that they can leave backdoors for future attacks. Therefore
we select several server programs as the benchmark, includ-
ing the Apache http server (httpd), the OpenSSH ssh server
(sshd) and the ProFTPD ftp server (proftpd). We measure
the overhead brought by FPValidator. The result is shown in
Table I.
The column Functions and Calls show the numbers of
function deﬁnitions and indirect call statements. The in-
creased compilation and storage cost is in direct propor-
tion to them. The column Building Time and Executable
Size compare the costs of versions built with and without
FPValidator. The increased building time is caused by the
operations of instrumenting indirect calls. Since the number
of indirect calls is small, the increased cost is less than
3%. The increased executable size is mainly cause by the
insertion of type information. Because with our method each
type can be represented by a single hash value, the space cost
is less than 8%. The column Runtime Overhead gives the
time cost spent on the dynamic function pointer validation.
It is determined by how often indirect calls are performed.
The result shows it is only about 2%.
56
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
Table I
OVERHEAD
Program Funcs
Calls
sshd
proftpd
httpd
995
1,133
2,032
143
174
324
Normal
16.445s
10.813s
78.469s
Building Time
FPValidator
16.509s
10.971s
80.519s
%
Normal
0.4% 484.9K
0.9% 734.9K
2.6% 809.2K
Executable Size
FPValidator
502.1K
785.7K
869.1K
Runtime Overhead
%
Total
33,000µs
3.5%
82,000µs
6.9%
7.4% 115,000µs
Validate
687µs
1,278µs
2,436µs
%
2.1%
1.6%
2.1%