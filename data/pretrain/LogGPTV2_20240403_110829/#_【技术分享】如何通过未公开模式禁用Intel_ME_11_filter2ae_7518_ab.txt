### 优化后的文本

#### 整个加载过程
整个加载过程始于ROM程序，该程序存储在内置的PCH（Platform Controller Hub）只读存储区中。普通用户无法访问或修改这部分存储区。然而，我们可以在网上找到ME（Management Engine）固件的预发行版，其中包含一个名为ROMB（ROM Bypass）的组件。假设ROMB与ROM的功能相似，通过检查这个固件，我们可以重现初始化程序的基本功能。

#### ROMB组件分析
通过分析ROMB，我们可以确定ROM执行的一系列操作，包括：
- 初始化硬件（如SPI控制器）
- 验证FTPR头部的数字签名
- 加载闪存中的RBE（ROM Boot Extension）模块

随后，RBE会验证KERNEL、SYSLIB和BUP（Bring Up）模块的校验和，并将控制权交给内核入口点。值得注意的是，ROM、RBE和KERNEL的执行位于MIA内核的ring-0级别。

#### 内核进程
内核创建的第一个进程是BUP，它运行在ring-3级别的独立地址空间中。内核本身不会启动其他进程，这些任务由BUP和另一个独立模块LOADMGR完成。BUP的主要职责包括：
- 初始化平台的硬件环境（如处理器）
- 执行主电源管理功能（如按下电源键时启动平台）
- 启动所有其他ME进程

如果缺少有效的ME固件，PCH 100及更高版本的物理设备将无法启动。首先，BUP会初始化电源管理控制器（PMC）和ICC控制器。其次，BUP根据某些字符串启动特定进程，这些字符串可能硬编码在固件中（如SYNCMAN、PM、VFS），也可能包含在InitScript中（InitScript类似于autorun脚本，保存在FTPR卷标头中并经过数字签名）。

因此，BUP会读取InitScript并启动符合ME启动类型的所有IBL（Initial Boot Loader）进程。如果某个进程无法启动，BUP将停止系统启动。如图9所示，LOADMGR是列表中的最后一个IBL进程。如果模块启动过程中出现错误，LOADMGR将继续执行下一个模块。

#### 减少固件大小的方法
减少固件大小的第一种方法是删除InitScript中没有IBL标志的所有模块。但我们的主要任务是找出HAP模式下的ME状况。为此，我们可以研究BUP软件模型。

### BringUP (BUP) 模块
BUP模块实现了一个经典的有限状态机，其执行过程分为两个阶段：初始化阶段和系统初始化后的服务阶段。根据平台和SKU的不同，初始化阶段的数量有所不同，但主要阶段相同。

#### 阶段1
- 创建SUSRAM FS（非易失性存储区中的文件系统）
- 读取配置信息
- 向PMC查询启动触发原因（如插电、重启、睡眠唤醒等）
- 支持多种模式（普通模式和服务模式）

#### 阶段2
- 初始化ICC控制器
- 加载ICC配置文件
- 初始化Boot Guard
- 开启处理器启动确认轮询

#### 阶段3
- 等待PMC确认主处理器已启动
- 启动电源事件的PMC异步轮询
- 根据事件执行相应动作

#### 阶段4
- 初始化内部硬件
- 启动HECI轮询
- 查询BIOS中的DID信息

#### 阶段5
- 根据具体模式启动InitScript中的IBL进程或挂起
- 在HAP模式下，BUP会初始化平台但不启动主ME进程

### 设置HAP比特
第二种禁用Intel ME的方法是设置HAP比特：
1. 设置HAP比特
2. 删除或破坏除RBE、KERNEL、SYSLIB和dBUP之外的其他模块
3. 修复CPD头部的校验值

### HAP和Boot Guard
在HAP模式下，BUP会在Boot Guard策略中设置额外比特，但我们尚未找到该比特的具体作用。

### me_cleaner对ME 11的支持
me_cleaner更新后可以删除除RBE、KERNEL、SYSLIB和BUP之外的所有模块，但未设置HAP比特，导致ME进入TemporaryDisable模式。删除分区和ME文件系统会导致cfgrules文件读取错误。在服务器版和移动版ME中，这种做法无效。

### 结论
我们发现了一个未公开的PCH strap，可以在早期阶段禁用Intel ME的主要功能。这基于以下三点：
1. 对Intel ME固件的二进制分析
2. 移除关键ME模块并启用HAP模式不会导致ME崩溃
3. RBE、KERNEL和SYSLIB模块中没有退出HAP模式的代码

HAP可以防护除RBE、KERNEL、SYSLIB、ROM和BUP模块外的所有模块中的漏洞，但无法防止早期阶段的错误。Intel证实了HAP模式的存在，但其对Boot Guard的影响尚不清楚。