N/A
N
N
N
N/A
Y
N/A
N
Y
Y
N
Y1
N
Y2
Y1
Y1
Y1: vulnerable to an insider attack. Y2: vulnerable to an attack requiring collaboration between an insider and outsider.
upstream server. Due to per-IP rate limit, the victim server will
always generate only one ICMP reply (in steady state) as long as
there is at least one inactive port scanned, which is the case in both
the left and right side of the figure. In the case where the 50 probes
hit ùëõ private open ports (to the upstream server), the global rate
limit counter still decrements to ùëõ because the victim attempted to
generate 50 ‚àí ùëõ ICMP replies. In contrast, when all 50 probes hit
inactive ports (left side of the figure), the counter decrements to 0.
The rest of the procedure is identical as before, where a binary
search can be launched to narrow down to a specific port.
Influence on public-facing source port scan. With this knowl-
edge, we can improve method 3‚óã in ¬ß4.3 as follows: instead of
spoofing 50 different IPs in each round of probing, we only need to
use a single spoofed IP (or a 2nd IP the attacker owns) instead of
many different IPs (which sometimes can be a hurdle).
Handling noises. We point out that there is inherently less noise
in this scan compared to the one on public-facing source ports.
This is because every source port is now effectively ‚Äúopen‚Äù to only
one single remote IP which is originally specified in connect().
Therefore, assuming the victim is a resolver, most of its queries (i.e.,
noise) will be destined to a different name server than a specific
attack target. Other noise conditions such as packet loss and re-
ordering still apply. Similarly, noise handling techniques also apply
(e.g., using more than one IP to alleviate the per-IP ICMP rate limit).
4.5 Vulnerable DNS Forwarder and Resolver
Population
A forwarder or resolver is considered vulnerable if the UDP source
port of a DNS query can be inferred successfully, or more specifically
if it supports the global ICMP rate limit, and/or if it does not use
connect() (which makes the port public).
Vulnerable Forwarders. We surveyed six home router devices,
all of which act by default as a forwarder supporting DNS caching.
Their behaviors are summarized in Table 1.
Only one router (Huawei A1) fails to respond with even the
ICMP port unreachable message, which is a basic requirement of
the port scan. The Verizon Gateway is not vulnerable because it is
the only one using connect() yet without the global rate limit. We
find that all routers are running old Linux kernel versions in the
range of 2.6 to 3.10, which is why global rate limit is not observed.
We do believe that routers of newer generations will eventually
inherit the global rate limit. Nevertheless, since most of them do
not use connect() on the UDP socket, the source port of a DNS
query can be easily probed without leveraging the side channel
based on the global ICMP rate limit. In addition, we also measured
the IP spoofing capability within the LAN network. Specifically,
if an attacker can spoof the public IP of the resolver from within
the LAN network, which often operates on a private IP range, the
end-to-end attack can be conducted from a machine in the LAN
alone without any external collaborator. The result shows that three
routers fall under this category (Y1), and one can be attacked from
an outside machine capable of spoofing the resolver‚Äôs IP (Y2).
Vulnerable Resolvers. We study a list of 14 popular DNS providers
shown in Table 2 and show that 12 of them are vulnerable which
is very serious. Interestingly, we find that due to firewall policies
encountered in several providers, the source port of the probing
packet must be set to 53 and the destination port should be in the
ephemeral port range in order to trigger ICMP responses on some
servers.
Note that we also report the number of backend server IPs be-
hind the anycasted frontend IP (e.g., 8.8.8.8). These backend IPs
correspond to the reachable servers on which we can scan ports.
The presence of multiple such IPs increases the attack‚Äôs difficulty as
we need to decide which IP(s) to scan. To discover the backend IPs,
we simply send 100 queries from the same machine to the frontend
and record the observed IPs at an authoritative name server that
we own. For the cases where we encounter only a few IPs, we can
simply scan all of them simultaneously. For the cases of OpenDNS
and AliDNS which have over 100, we discuss possible techniques
to handle them later in ¬ß6. Note that OpenDNS and AliDNS exhibit
more than 100 IPs because our authoritative name server inten-
tionally discards incoming queries and they decide to retry with
potentially new IPs every time before giving up.
In addition, we also measured the general population of open
resolvers. Compared with public resolvers, which are usually ad-
vertised and intended to serve the public, open resolvers, however,
are generally unlisted and are intended to serve smaller numbet
of clients. We obtain a list of open resolvers from Censys [23] and
managed to probe a set of 138,924 live IPs, among which there are
70,503 whose backend and frontend IPs are identical, indicative of
the absence of anycast. Further, 41.3% of the 138,924 cases generate
ICMP replies (following the same practice of using source port 53
in the probing packets), out of which 67.56% exhibit a global rate
limit, and 53.93% use connect() on the socket. Overall, 34.36% of
all cases are vulnerable because they either support the global rate
limit or do not use connect()). Most of them are not vulnerable
simply because of the lack of ICMP replies.
5 EXTENDING THE ATTACK WINDOW
The longer the attack window, the more ports an attacker can scan,
and also more time to inject rogue records. Therefore, our goal is
to ‚Äúmute‚Äù upstream servers and prevent them from being able to
Session 4E: Network Security CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1342Name
Google
CloudFlare
OpenDNS
Comodo
Dyn
Quad9
AdGuard
Address
8.8.8.8
1.1.1.1
208.67.222.222
8.26.56.26
216.146.35.35
9.9.9.9
176.103.130.130
CleanBrowsing 185.228.168.168
Neustar
Yandex
Baidu DNS
114 DNS
Tencent DNS
Ali DNS
156.154.70.1
77.88.8.1
180.76.76.76
114.114.114.114
119.29.29.29
223.5.5.5
172.253.2.4
172.68.135.169
208.67.219.11
66.230.162.182
45.76.11.166
74.63.16.243
66.42.108.108
45.76.171.37
77.88.56.132
106.38.179.6
106.38.179.6
183.194.223.102
210.69.48.38
2610:a1:300c:128::143
15
2
107
2
1
11
3
1
2
19
16
11
45
160
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
N
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
N
N
N/A
Table 2: Popular Public Resolver Behaviors
Example Backend Addr. # of Backends ICMP Global Rate Limit Using connect() Vulnerable
N
Y
Y
N
N
Y
N
Y
N
Y
Y
N
N
N/A
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
N1
N
1 Though meeting the requirements, it is not vulnerable due to interference of fast UDP probing encountered (likely caused by firewalls).
respond to the DNS queries triggered by the attacker. Depending
on the attack target (i.e., a forwarder or resolver), we come up with
two novel strategies. Ironically, one of the strategies again leverage
the ‚Äúrate limiting‚Äù feature commonly deployed at the application
layer, which can be turned to the attacker‚Äôs advantage.
5.1 Extending Window in a Forwarder Attack
We propose a novel strategy as follows: the attacker first sends a
query of his own domain, e.g., www.attacker.com to the forwarder,
which will eventually trigger the upstream resolver to query the
attacker-controlled authoritative name server. The name server is
intentionally configured to be unresponsive so that the forwarder
would wait maximum amount of time possible (as the resolver is
also halted) while leaving an open source port. At a first glance,
this is pointless because we are not interested in poisoning an
attacker‚Äôs own domain. However, due to the unique role of DNS
forwarders [34], they rely completely on upstream resolvers to
perform validations on responses.
More specifically, according to RFC 8499 [34], recursive resolvers‚Äô
responsibility is to handle the complete resolution of a name and
provide a ‚Äúfinal answer‚Äù to its client. This includes recursively han-
dling referrals and CNAMEs and assemble a final answer, including
any CNAME redirects by design. More importantly, resolvers are re-
quired to perform integrity checks such as the bailiwick check [25],
whereas forwarders are not. This means that forwarders by design
trust the upstream resolvers and its response. This is not a secu-
rity flaw; rather, it is a design choice to prevent forwarders from
duplicating the work of resolvers. This observation is also made a
in recent study dedicated to the security of DNS forwarders [60].
As a result, a rogue response (potentially injected by an attacker
from either LAN or outside) shown in Figure 5 will be accepted by
a forwarder and both the attacker‚Äôs and victim‚Äôs domain records
will be cached. This strategy is extremely effective because we can
impose the maximum wait time on the forwarder (i.e., creating the
largest possible attack window). Specifically, most forwarders have
a very lenient timeout (sometimes close to a minute e.g., in dns-