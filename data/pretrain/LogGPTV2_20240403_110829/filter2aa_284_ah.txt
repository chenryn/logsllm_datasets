### Password Complexity
For guidelines on password complexity, refer to the [OWASP Authentication Cheat Sheet](https://www.owasp.org/index.php/Authentication_Cheat_Sheet).

### Password Recovery Mechanism
It is common for applications to provide a mechanism for users to regain access to their accounts if they forget their passwords. This functionality is typically invoked by unauthenticated users. Ensure that such interfaces are protected from misuse. For example, if a password reminder request results in an email or SMS being sent to the registered user, implement measures to prevent attackers from using this feature to spam the user by repeatedly entering the username. For more details, see the [Forgot Password Cheat Sheet](https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet).

### Secure Password Storage
It is crucial for an application to store passwords using the appropriate cryptographic techniques. Refer to the [Password Storage Cheat Sheet](https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet) for detailed guidance.

### Secure Communication
When reviewing MVC .NET applications, ensure that all web pages, not just login pages, use SSL/TLS for secure data transmission. The `RequireHttpsAttribute` can be used to enforce this. Here is an example of how to configure it in the `global.asax` file:

```csharp
public static void RegisterGlobalFilters(GlobalFilterCollection filters)
{
    filters.Add(new RequireHttpsAttribute());
}
```

### Multi-Factor Authentication (MFA)
For high-risk functions, such as banking transactions and user profile updates, implement multi-factor authentication (MFA). MFA enhances security by requiring more than one authentication factor:
- Something you know (e.g., password)
- Something you have (e.g., token, mobile phone)
- Something you are (e.g., biometrics)

MFA also mitigates risks associated with CSRF and session hijacking attacks.

### SSL Client Authentication
In controlled environments, consider using SSL Client Authentication (two-way SSL). This involves both the client and server exchanging SSL certificates during the TLS handshake. This method provides stronger authentication, as the server can issue and manage client certificates, ensuring that only trusted clients can access the system. Secure transmission of the client certificate is essential.

### References
- [OWASP Authentication Cheat Sheet](https://www.owasp.org/index.php/Authentication_Cheat_Sheet)
- [NIST SP 800-132](http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf)
- [Introduction to Mutual SSL Authentication](http://www.codeproject.com/Articles/326574/An-Introduction-to-Mutual-SSL-Authentication)
- [CWE-287: Improper Authentication](https://cwe.mitre.org/data/definitions/287.html)
- [OWASP ASVS Requirements for Authentication (V2)](https://www.owasp.org/index.php/ASVS_V2)

### Forgot Password Design Patterns
If your web application requires user authentication, it will likely need to handle forgotten usernames and passwords. The code reviewer should be aware of the benefits and drawbacks of the "Direct Authentication" pattern. This section emphasizes design patterns for securely handling forgotten credentials.

#### General Considerations
- Notify the user via phone, SMS, or email, requiring them to click a link to reset their password.
- Ask the user to enter existing login credentials (e.g., Facebook, Twitter, Google, Microsoft Live, OpenID) to validate their identity before allowing a password change.
- Send notifications to confirm registration or password reset usage.
- Notify the user of any changes to account information via the registered email.
- Set appropriate timeout values. For example, if the user does not respond within 48 hours, freeze the account until re-confirmation.

#### Security Best Practices
- Transfer the identity and shared secret/password using encryption to ensure data confidentiality.
- Never store a shared secret in clear text, even temporarily.
- Store shared secrets in hashed or encrypted format in the database.
- The organization storing the encrypted shared secret should not have the ability to view or decrypt user passwords.
- If the client must cache the username and password, use a secure cache mechanism.
- When reporting an invalid entry, do not identify the specific invalid field. Provide a generic error message, such as "The username or password you entered is incorrect."

### CAPTCHA
CAPTCHA (Completely Automated Public Turing test to tell Computers and Humans Apart) is an access control technique used to prevent automated software from performing actions like creating email spam, posting to blogs, forums, and wikis, and automating account creation.

#### General Considerations
- Do not allow multiple guesses after an incorrect attempt.
- Understand the statistics of guessing. For example, a CAPTCHA with four images (three cats and one boat) where the user must select the non-matching image can be exploited if the attacker always chooses the first image.
- Use a key passed to the server that uses a HMAC (Hash-based message authentication code).
- Text-based CAPTCHAs should adhere to the following security design principles:
  - Randomize the CAPTCHA length.
  - Randomize the character size.
  - Wave the CAPTCHA to increase difficulty.
  - Avoid complex character sets.
  - Use anti-recognition techniques like rotation, scaling, and varying font sizes.
  - Keep lines within the CAPTCHA but ensure they cross only some letters.
  - Use large lines that are not as wide as the character segments.
  - Be aware of ADA (Americans with Disabilities Act) compliance requirements.

### Out-of-Band Communication
Out-of-band communication refers to interactions between a web application and an end user through channels separate from HTTP requests, such as text/SMS, phone calls, email, and regular mail. This is often used for security purposes, especially for sensitive operations like changing passwords, updating account details, transferring funds, and managing orders.

#### Two-Factor Authentication (2FA)
Two-factor authentication (2FA) combines two of the following authentication factors:
- Something you know (e.g., password, PIN)
- Something you have (e.g., mobile phone, RSA token)
- Something you are (e.g., biometric data)

#### Implementation
- Ensure that only authenticated users can access links that invoke out-of-band features (except for password reset).
- Rate limit the interface to prevent abuse.
- Only use registered phone numbers, emails, and addresses.
- For high-risk sites, register phone numbers in person.
- Do not send personal or authentication information in out-of-band communications.
- Ensure that PINs or passwords sent over out-of-band channels have a short lifespan and are random.
- Consider preventing SMS messages from being sent to the device currently conducting the browsing session.
- Use specialized hardware/software to handle out-of-band communication, including the creation of temporary PINs and passwords.

### Session Management
Session management is essential for web applications to retain user information and status across multiple requests. Sessions provide the ability to establish variables like access rights and localization settings.

#### Security Considerations
- Understand the session techniques used by developers and identify potential vulnerabilities.
- Web applications can create sessions for both anonymous and authenticated users.
- The session ID or token binds the user's authentication credentials to their HTTP traffic and enforces access controls.
- Insecure session IDs can lead to session hijacking, fixation, and elevation attacks.

#### Best Practices
- Generate cryptographically strong session IDs using cryptographic hash functions like SHA2 (256 bits).
- Change the default session ID name to a generic name, such as "id".
- Ensure session IDs are at least 128 bits long and provide at least 64 bits of entropy.
- Make session IDs meaningless to prevent information disclosure attacks.
- Use cookies to store session information and set the `HTTPOnly` attribute to prevent JavaScript access.
- Implement session expiration and require users to log out when they finish using the application.
- Roll sessions (change session IDs) when they are elevated or down-elevated.

#### Server-Side Defenses
- Generate new session IDs to prevent session rolling, fixation, and hijacking.
- Use the `RequireHttpsAttribute` to enforce SSL/TLS for all web pages.

### References
- [OWASP Forgot Password Cheat Sheet](https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet)
- [Zitmo Malware for Android and BlackBerry](http://securelist.com/blog/virus-watch/57860/new-zitmo-for-android-and-blackberry/)