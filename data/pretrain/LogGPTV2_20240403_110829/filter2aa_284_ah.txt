on password complexity see the OWASP Authentication Cheat Sheet.
• It is common for an application to have a mechanism that provides a means for a user to gain access to their
account in the event they forget their password. This is an example of web site functionality this is invoked by unau-
thenticated users (as they have not provided their password). Ensure interfaces like this are protected from misuse, if 
asking for password reminder results in an e-mail or SMS being sent to the registered user, do not allow the password 
reset feature to be used to spam the user by attackers constantly entering the username into this form. Please see 
Forgot Password Cheat Sheet for details on this feature.
• It is critical for an application to store a password using the right cryptographic technique. Please see 
Password Storage Cheat Sheet for details on this feature.
When reviewing MVC .NET is is important to make sure the application transmits and received over a secure link. It is 
recommended to have all web pages not just login pages use SSL. 
We need to protect session cookies, which are useful as users credentials.
In the global.asax file we can review the RegisterGlobalFilters method.
public static void RegisterGlobalFilters(GlobalFilterCollection filters) {
“ flters.Add(new RequireHttpsAttribute());  “ 
}
Sample 8.1
61
A2 - Broken Authentication and Session Management
The attribute RequireHttpsAttribute() can be used to make sure the application runs over SSL/TLS
It is recommended that this be enabled for SSL/TLS sites.
• For high risk functions, e.g. banking transactions, user profile updates, etc., utilize multi-factor authentication 
(MFA). This also mitigates against CSRF and session hijacking attacks. MFA is using more than one authentication 
factor to logon or process a transaction:
• Something you know (account details or passwords)
• Something you have (tokens or mobile phones)
• Something you are (biometrics)
• If the client machine is in a controlled environment utilize SSL Client Authentication, also known as two-way
SSL authentication, which consists of both browser and server sending their respective SSL certificates during the TLS 
handshake process. This provides stronger authentication as the server administrator can create and issue client cer-
tificates, allowing the server to only trust login requests from machines that have this client SSL certificate installed. 
Secure transmission of the client certificate is important.
References
• https://www.owasp.org/index.php/Authentication_Cheat_Sheet
• http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf
• http://www.codeproject.com/Articles/326574/An-Introduction-to-Mutual-SSL-Authentication
• https://cwe.mitre.org/data/definitions/287.html Improper Authentication
• OWASP ASVS requirements areas for Authentication (V2)
8.4 Forgot Password
Overview
If your web site needs to have user authentication then most likely it will require user name and password to 
authenticate user accesses. However as computer system have increased in complexity, so has authenticating 
users has also increased. As a result the code reviewer needs to be aware of the benefits and drawbacks of user 
authentication referred to as “Direct Authentication” pattern in this section. This section is going to emphasise 
design patterns for when users forget user id and or password and what the code reviewer needs to consider 
when reviewing how user id and passwords can be retrieved when forgotten by the user and how to do this 
in a secure manner.
General considerations
Notify user by (phone sms, email) such that the user has to click a link in the email that takes them to your site 
and ask the user to enter a new password.
Ask user to enter login credentials they already have (Facebook, Twitter, Google, Microsoft Live, OpenID etc) to 
validate user before allowing user to change password.
Send notification to user to confrm registration or forgot password usage.
Send notifications that account information has been changed for registered email. Set appropriate time out 
value. I.e. If user does not respond to email within 48 hours then user will be frozen out of system until user 
re-affirms password change.
• The identity and shared secret/password must be transferred using encryption to provide data confidenti-
ality. 
62
• A shared secret can never be stored in clear text format, even if only for a short time in a message queue.
• A shared secret must always be stored in hashed or encrypted format in a database.
• The organization storing the encrypted shared secret does not need the ability to view or decrypt users 
passwords. User password must never be sent back to a user.
• If the client must cache the username and password for presentation for subsequent calls to a Web service
then a secure cache mechanism needs to be in place to protect user name and password.
• When reporting an invalid entry back to a user, the username and or password should not be identified as be-
ing invalid. User feed back/error message must consider both user name and password as one item “user credential”. 
I.e. “The username or password you entered is incorrect.”
8.5 CAPTCHA
Overview
CAPTCHA (an acronym for “Completely Automated Public Turing test to tell Computers and Humans Apart”.) is 
an access control technique.
CAPTCHA is used to prevent automated software from gaining access to webmail services like Gmail, Hotmail 
and Yahoo to create e-mail spam, automated postings to blogs, forums and wikis for the purpose of promotion 
(commercial, and or political) or harassment and vandalism and automated account creation.
CAPTCHA’s have proved useful and their use has been upheld in court. Circumventing CAPTCHA has been 
upheld in US Courts as a violation Digital Millennium Copyright Act anti-circumvention section 1201(a)(3) and 
European Directive 2001/29/EC.
General considerations
Code review of CAPTCHA’s the reviewer needs to pay attention to the following rules to make sure the CAPT-
CHA is built with strong security principals.
• Do not allow the user to enter multiple guesses after an incorrect attempt.
• The software designer and code review need to understand the statics of guessing. I.e. One CAPTCHA 
design shows four (3 cats and 1 boat) pictures, User is requested to pick the picture where it is not in the same cat-
egory of the other pictures. Automated software will have a success rate of 25% by always picking the first picture. 
Second depending on the fixed pool of CAPTCHA images over time an attacker can create a database of correct 
answers then gain 100% access.
• Consider using a key being passed to the server that uses a HMAC (Hash-based message authentication
code) the answer.
Text base CAPTCHA’s should adhere to the following security design principals...
1. Randomize the CAPTCHA length: Don’t use a fixed length; it gives too much information to the attacker.
2. Randomize the character size: Make sure the attacker can’t make educated guesses by using several font
sizes / several fonts.
3. Wave the CAPTCHA: Waving the CAPTCHA increases the difficulty for the attacker.
4. Don’t use a complex charset: Using a large charset does not improve significantly the CAPTCHA scheme’s
A2 - Broken Authentication and Session Management
63
security and really hurts human accuracy.
5. Use anti-recognition techniques as a means of strengthening CAPTCHA security: Rotation, scaling and 
rotating some characters and using various font sizes will reduce the recognition efficiency and increase secu-
rity by making character width less predictable.
6. Keep the line within the CAPTCHAs: Lines must cross only some of the CAPTCHA letters, so that it is 
impossible to tell whether it is a line or a character segment.
7. Use large lines: Using lines that are not as wide as the character segments gives an attacker a robust 
discriminator and makes the line anti-segmentation technique vulnerable to many attack techniques.
8. CAPTCHA does create issues for web sites that must be ADA (Americans with Disabilities Act of 1990) 
compliant. Code reviewer may need to be aware of web accessibilities and security to review the CAPTCHA 
implementation where web site is required to be ADA complaint by law.
References
• UNITED STATES of AMERICA vs KENNETH LOWSON, KRISTOFER KIRSCH, LOEL STEVENSON Federal Indictment. 
February 23, 2010. Retrieved 2012-01-02.
• http://www.google.com/recaptcha/captcha 
• http://www.ada.gov/anprm2010/web%20anprm_2010.htm
• Inaccessibility of CAPTCHA - Alternatives to Visual Turing Tests on the Web http://www.w3.org/TR/turingtest/ 
8.6 Out-of-Band Communication
Overview
The term ‘out-of-band’ is commonly used when an web application communicates with an end user over a 
channel separate to the HTTP request/responses conducted through the users’ web browser. Common exam-
ples include text/SMS, phone calls, e-mail and regular mail.
Description
The main reason an application would wish to communicate with the end user via these separate channels 
is for security. A username and password combination could be sufficient authentication to allow a user to 
browse and use non-sensitive parts of a website, however more sensitive (or risky) functions could require 
a stronger form of authentication. A username and password could have been stolen through an infected 
computer, through social engineering, database leak or other attacks, meaning the web application cannot 
put too much in trust a web session providing the valid username and password combination is actually the 
intended user.
Examples of sensitive operations could include:
• Changing password
• Changing account details, such as e-mail address, home address, etc
• Transferring funds in a banking application
• Submitting, modifying or cancelling orders
In these cases many applications will communicate with you via a channel other than a browsing session. 
Many large on-line stores will send you confirmation e-mails when you change account details, or purchase 
items. This protects in the case that an attacker has the username and password, if they buy something, the 
legitimate user will get an e-mail and have a chance to cancel the order or alert the website that they did not 
modify the account.
A2 - Broken Authentication and Session Management
64
When out-of-band techniques are performed for authentication it is termed two-factor authentication. There 
are three ways to authenticate:
1. Something you know (e.g. password, passphrase, memorized PIN)
2. Something you have (e.g. mobile phone, cash card, RSA token)
3. Something you are (e.g. iris scan, fingerprint)
If a banking website allows users to initiate transactions online, it could use two-factor authentication by tak-
ing 1) the password used to log in and 2) sending an PIN number over SMS to the users registered phone, and 
then requiring the user enter the PIN before completing the transaction. This requires something the user 
knows (password) and has (phone to receive the PIN).
A ‘chip-and-pin’ banking card will use two-factor authentication, by requiring users to have the card with them 
(something they have) and also enter a PIN when performing a purchase (something they know). A ‘chip-and-
pin’ card is not use within the PIN number, likewise knowing the PIN number is useless if you do not have the 
card.
What to Review
When reviewing code modules which perform out-of-band functions, some common issues to look out for 
include:
1. Recognize the risk of the system being abused. Attackers would like to flood someone with SMS messages
from your site, or e-mails to random people. Ensure:
2. When possible, only authenticated users can access links that cause an out-of-band feature to be invoked
(forgot password being an exception).
3. Rate limit the interface, thus users with infected machines, or hacked accounts, can’t use it to flood 
out-of-band messages to a user.
4. Do not allow the feature to accept the destination from the user, only use registered phone numbers,
e-mails, addresses.
5. For high risk sites (e.g. banking) the users phone number can be registered in person rather than via the
web site.
6. Do not send any personal or authentication information in the out-of-band communication.
7. Ensure any PINs or passwords send over out-of-band channels have a short life-span and are random.
8. A consideration can be to prevent SMS messages being sent to the device currently conducting the 
browsing session (i.e. user browsing on their iPhone, were the SMS is sent to). However this can be hard to enforce. 
If possible give users the choice of band they wish to use. For banking sites Zitmo malware on mobile 
devices (see references) can intercept the SMS messages, however iOS devices have not been affected by this mal-
ware yet, so users could choose to have SMS PINs sent to their Apple devices, and when on Android they could use 
recorded voice messages to receive the PIN.
9. In a typical deployments specialized hardware/software separate from the web application will handle the
out-of-band communication, including the creation of temporary PINs and possibly passwords. In this scenario there 
is no need to expose the PIN/password to your web application (increasing risk of exposure), instead the web appli-
cation should query the specialized hardware/software with the PIN/password supplied by the end user, and receive 
A2 - Broken Authentication and Session Management
65
a positive or negative response.
Many sectors including the banking sector have regulations requiring the use of two-factor authentication for certain 
types of transactions. In other cases two-factor authentication can reduce costs due to fraud and re-assure customers 
of the security of a website.
References
• https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet
• http://securelist.com/blog/virus-watch/57860/new-zitmo-for-android-and-blackberry/
8.7 Session Management
Overview
A web session is a sequence of network HTTP request and response transactions associated to the same user. Session 
management or state is needed by web applications that require the retaining of information or status about each 
user for the duration of multiple requests. Therefore, sessions provide the ability to establish variables – such as access 
rights and localization settings – which will apply to each and every interaction a user has with the web application 
for the duration of the session.
Description
Code reviewer needs to understand what session techniques the developers used, and how to spot vulnerabilities 
that may create potential security risks. Web applications can create sessions to keep track of anonymous users after 
the very first user request. An example would be maintaining the user language preference. Additionally, web ap-
plications will make use of sessions once the user has authenticated. This ensures the ability to identify the user on 
any subsequent requests as well as being able to apply security access controls, authorized access to the user private 
data, and to increase the usability of the application. Therefore, current web applications can provide session capabil-
ities both pre and post authentication.
The session ID or token binds the user authentication credentials (in the form of a user session) to the user 
HTTP traffic and the appropriate access controls enforced by the web application. The complexity of these 
three components (authentication, session management, and access control) in modern web applications, 
plus the fact that its implementation and binding resides on the web developer’s hands (as web development 
framework do not provide strict relationships between these modules), makes the implementation of a secure 
session management module very challenging.
The disclosure, capture, prediction, brute force, or fixation of the session ID will lead to session hijacking (or 
sidejacking) attacks, where an attacker is able to fully impersonate a victim user in the web application. Attack-
ers can perform two types of session hijacking attacks, targeted or generic. In a targeted attack, the attacker’s 
goal is to impersonate a specific (or privileged) web application victim user. For generic attacks, the attacker’s 
goal is to impersonate (or get access as) any valid or legitimate user in the web application.
With the goal of implementing secure session IDs, the generation of identifiers (IDs or tokens) must meet the 
following properties:
• The name used by the session ID should not be extremely descriptive nor offer unnecessary details about the
purpose and meaning of the ID.
• It is recommended to change the default session ID name of the web development framework to a generic
name, such as “id”.
• The session ID length must be at least 128 bits (16 bytes) (The session ID value must provide at least 64 bits
of entropy).
A2 - Broken Authentication and Session Management
66
• The session ID content (or value) must be meaningless to prevent information disclosure attacks, where an 
attacker is able to decode the contents of the ID and extract details of the user, the session, or the inner work-
ings of the web application.
It is recommended to create cryptographically strong session IDs through the usage of cryptographic hash 
functions such as SHA2 (256 bits).
What to Review
Require cookies when your application includes authentication. Code reviewer needs to understand what in-
formation is stored in the application cookies. Risk management is needed to address if sensitive information 
is stored in the cookie requiring SSL for the cookie
.Net ASPX web.config
Java web.xml
PHP.INI
Session Expiration
In reviewing session handling code the reviewer needs to understand what expiration timeouts are needed 
by the web application or if default session timeout are being used. Insufficient session expiration by the web 
Sample 8.2
  true
Sample 8.3
void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = true [, bool 
$httponly = true ]]]] )
Sample 8.4
A2 - Broken Authentication and Session Management
67
application increases the exposure of other session-based attacks, as for the attacker to be able to reuse a valid 
session ID and hijack the associated session, it must still be active. 
Remember for secure coding one of our goals is to reduce the attack surface of our application.
.Net ASPX
ASPX the developer can change the default time out for a session. This code in the web.config file sets the 
timeout session to 15 minutes. The default timeout for an aspx session is 30 minutes.
Java
PHP 
Does not have a session timeout mechanism. PHP developers will need to create their own custom session timeout.
Session Logout/Ending.
Web applications should provide mechanisms that allow security aware users to actively close their session once they 
have finished using the web application.
.Net ASPX Session.Abandon() method destroys all the objects stored in a Session object and releases their resources. 
If you do not call the Abandon method explicitly, the server destroys these objects when the session times out. You 
should use it when the user logs out. Session.Clear() Removes all keys and values from the session. Does not change 
session ID. Use this command if you if you don’t want the user to relogin and reset all the session specific data.
Session Attacks
Generally three sorts of session attacks are possible:
• Session Hijacking: stealing someone’s session-id, and using it to impersonate that user.
• Session Fixation: setting someone’s session-id to a predefined value, and impersonating them using that
known value
• Session Elevation: when the importance of a session is changed, but its ID is not.
Sample 8.5
    1
Sample 8.6
A2 - Broken Authentication and Session Management
68
Session Hijacking
• Mostly done via XSS attacks, mostly can be prevented by HTTP-Only session cookies (unless Javascript code
requires access to them).
• It’s generally a good idea for Javascript not to need access to session cookies, as preventing all flavors of XSS 
is usually the toughest part of hardening a system.
• Session-ids should be placed inside cookies, and not in URLs. URL information are stored in browser’s history, 
and HTTP Referrers, and can be accessed by attackers.
• As cookies can be accessed by default from javascript and preventing all flavors of XSS is usually the toughest 
part of hardening a system, there is an attribute called “HTTPOnly”, that forbids this access. The session cookie 
should has this attribute set. Anyway, as there is no need to access a session cookie from the client, you 
should get suspicious about client side code that depends on this access.
• Geographical location checking can help detect simple hijacking scenarios. Advanced hijackers use the 
sameIP (or range) of the victim.
• An active session should be warned when it is accessed from another location.
• An active users should be warned when s/he has an active session somewhere else (if the policy allows 
multiple sessions for a single user).
Session Fixation
• If the application sees a new session-id that is not present in the pool, it should be rejected and a new 
session-id should be advertised. This is the sole method to prevent fixation.
• All the session-ids should be generated by the application, and then stored in a pool to be checked later for. 
Application is the sole authority for session generation.
Session Elevation
• Whenever a session is elevated (login, logout, certain authorization), it should be rolled.
• Many applications create sessions for visitors as well (and not just authenticated users). They should 
definitely roll the session on elevation, because the user expects the application to treat them securely after 
they login.
• When a down-elevation occurs, the session information regarding the higher level should be flushed.
• Sessions should be rolled when they are elevated. Rolling means that the session-id should be changed, and 
the session information should be transferred to the new id.
Server-Side Defenses for Session Management
.NET ASPX
Generating new session Id’s helps prevent, session rolling, fixation, hijacking.
A2 - Broken Authentication and Session Management
69
Java