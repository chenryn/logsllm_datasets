5.2 Microcode Instruction Set
The microinstruction set presented in AMD’s patent
RISC86 [24] gave us a general understanding and valu-
able hints. However, we found that almost all details such
as microinstruction length, operand ﬁelds, operations, and
encoding differ. Furthermore, we could not conﬁrm that
USENIX Association
26th USENIX Security Symposium    1169
single microinstructions can be addressed, which would
result in the preceding microinstructions of the triad be-
ing ignored. Instead, we found that only entire triads are
addressable. In the following, we reuse terminology from
the patent where appropriate. Unless stated otherwise,
all information given afterwards was obtained through
reverse engineering.
We found four operation classes, namely RegOp, LdOp,
StOp, and SpecOp, that are used for arithmetic and logic
operations, memory reads, memory writes, and special
operations such as write program counter, respectively.
The structure of the four operation classes is shown in
Table 2. The different operation classes can be distin-
guished by the op class ﬁeld at bit locations 37 to 39.
RegOp and SpecOp share the same op class ﬁeld encod-
ing but have disjunct encodings for the operation type
ﬁeld. The unlabeled ﬁelds indicate unused or unknown
bit locations. RegOp supports operation types such as
arithmetic, comparators, and logic operations. The mul
and imul operation types must be the ﬁrst microinstruc-
tion within a triad in order to work. SpecOp enables
to write the x86 program counter and to conditionally
branch to microcode. If the conditional branch is taken,
the microcode sequencer continues decoding at the given
address. In case the conditional branch is not taken, the
sequence word determines further execution. The con-
dition to be evaluated is encoded in the 4 high bits of
the 5-bit cc ﬁeld. Bit 0 of the cc ﬁeld inverts the con-
dition if set. The available condition encodings match
the ones given in patent RISC86 [24], p. 37. The write-
program-counter SpecOp must be placed third within a
triad in order to work. We found that LdOp and StOp
have their own operation types. Our collection of oper-
ation types is incomplete, because it was impossible to
observe the internal state of the CPU. We show encoding
details for the operation types we found in the Appendix
in Table 5. The ﬁelds reg1, reg2 and reg3 encode the
microcode registers. In addition to the general-purpose
registers, microcode can access a number of internal regis-
ters. Their content is only stored until the microinstruction
has been decoded. The special pcd register is read-only
and contains the address of the next macroinstruction to
decode. This is valuable information to implement rela-
tive x86 jumps in microcode. The microarchitecture also
contains a microcode substitution engine, which automat-
ically replaces operand ﬁelds in the microinstruction with
operands from the macroinstruction. The ﬁrst two x86
operands can be accessed in microcode with the register
encodings regmd and regd. We refer to Table 6 in the
Appendix for encoding details of the microcode registers.
We did not ﬁnd the substitution mechanism for imme-
diate values encoded in the macroinstruction. To solve
this issue, we read the x86 instruction bytes from main
memory and extract the immediate. The sw ﬁeld swaps
source and destination registers. The 3o ﬁeld enables
the three operand mode and allows RegOp microinstruc-
tions of the form reg2:= reg1 op reg3/imm. The ﬂags
ﬁeld decides whether the resulting ﬂags of the current
RegOp microinstruction should be committed to the x86
ﬂags register. The rmod ﬁeld switches between reg3 and
a 16-bit immediate value. The sequence word, see Ta-
ble 3, contains an action ﬁeld at bit locations 14 to 16 that
may indicate a branch to the triad at the given address,
a branch to the following triad, or stop decoding of the
current macroinstruction. Our disassembler has a cover-
age of approximately 40% of the instructions contained
in existing microcode patches. However, we ignored bits
in unknown ﬁelds of recognised microinstructions whose
meaning we could not determine. We designed automated
test cases that, e.g., permute the bits of an unknown mi-
croinstruction ﬁeld to provoke observable differences in
the ﬁnal CPU state. Our result ﬁlter discarded outputs
that match the expected CPU state. We then manually in-
spected the remaining interesting CPU states and inferred
the meaning of the new encoding.
Intercepting x86 Instructions
5.3
Currently, we can only intercept vector instructions by
writing related triad addresses from the heat maps into the
match registers. We are uncertain whether a mechanism
for hooking direct path instructions exists. It is relatively
simple to replace the logic of a vector path instruction;
however, it appeared challenging to add logic, because
the original semantics must be preserved. To solve this
issue, we leverage the two microcode hook concepts from
Section 4.3. In the following we describe in detail the
practical application of both concepts. (1) After executing
the added logic, we jump back to microcode ROM. (2)
After execution of the added logic we implement the
semantics of the macroinstruction in microcode ourselves
and indicate sequence complete in the last triad. This
way, we successfully hooked shrd and imul vector path
instructions.
We also successfully intercepted the div instruction
using the ﬁrst method. One fundamental limitation of
hooking with match registers is that one cannot jump
back to the intercepted triad, because the match register
would redirect control again, essentially creating an end-
less loop. We are not aware of a feature to temporarily
ignore a match register. Thus we need to intercept a negli-
gible triad and, after execution of our logic, jump back to
the subsequent triad, essentially skipping one triad. We
inferred the observable part of the logic of div heat map
triads. We proceeded by iteratively branching directly
to the triads with a known CPU state with a match reg-
ister hook set to the following triad. With this method
we found one triad we can skip without visibly changing
1170    26th USENIX Security Symposium
USENIX Association
Index
RegOp
LdOp
StOp
SpecOp
63
-
-
-
-
62
54
type
type
type
type
cc
52
53
sw 3o
sw 3o
sw 3o
sw 3o
51 46
reg1
reg1
reg1
reg1
45
-
40
-
ﬂags
-
-
-
39 37
000
001
010
000
36 30
size
-
-
size
size
-
-
29 24
reg2
reg2
reg2
reg2
23
rmod
rmod
rmod
22 16
-
-
-
-
0
15
imm16/reg3
imm16/reg3
imm16/reg3
imm16/addr12
Table 2: The four operation classes and their microinstruction encoding.
0
6 Hardware Analysis
Index
next triad
branch
complete
31
17
-
-
-
16 14
000
010
110
13 12
11
-
-
address
-
Table 3: Sequence word encoding.
the result. Speciﬁcally, we can intercept triad 0x7e5 per
match register, induce the desired behavior, and ﬁnally
jump back to address 0x7e6 via sequence word. It should
be noted that the hook is in the middle of the calculation.
Thus the source and destination general-purpose registers
as well as some internal microcode registers hold interme-
diate results, which need to be preserved if the correctness
of the ﬁnal result matters.
5.4 Microcode RTL
We developed a microcode register transfer language
based on the syntax of Intel x86 assembly language, be-
cause for the implementation of microprograms it is im-
practical to manually assemble bit vectors. In the follow-
ing, we show a template for a typical microinstruction in
our microcode RTL:
insn op1, op2[, op3]
The insn ﬁeld deﬁnes the operation. It is followed by
one to three operands of which the ﬁrst one is always the
destination and only the last one may be an immediate.
In two-operand mode, the ﬁrst operand is the destination
and the source. There are dedicated load and store instruc-
tions. Memory addressing currently supports only one
register, i.e., ld eax, [ebx]. The size of arithmetic oper-
ations is implicitly speciﬁed by the destination operand’s
size. Memory reads always fetch a whole native system
word, and the size of memory writes is speciﬁed by the
source operand’s size. The conditional microcode branch
encodes the condition in the ﬁrst operand and the branch
target in the second operand, i.e. jcc nZF, 0xfe5. The
assembler automatically resolves constraints such as mul
must be placed ﬁrst in a triad and write-program-counter
must be placed last. Strictly speaking the sequence words
are not instructions, thus we cover them by directives such
as .sw complete and .sw branch 0x7e6. The branch to
next triad sequence words are added implicitly.
In addition to the black box microcode reverse engineer-
ing presented in the previous section, we analyzed the
CPU’s hardware in a parallel approach. The goal of hard-
ware analysis was to read and analyze the non-volatile
microcode ROM to support reverse engineering of the mi-
crocode encoding. Furthermore, this allows us to analyze
the actual implementation of microcoded macroinstruc-
tions.
Our chosen Device Under Test (DUT) is a Sempron
3100+ (SDA3100AIP3AX) with a 130nm technology size,
since it features the largest size of the target CPU fam-
ily (which facilitates our analysis). Note that the larger
technology size allows for additional tolerance margins
in both the delayering and the imaging of the individual
structures. Similar to any common microcontroller or
CPU, the DUT is built using a CMOS process with mul-
tiple layers. In contrast to traditional microcontrollers,
general-purpose x86 CPUs feature a much larger die size
and are stacked up to 12 layers, which increases hardware
reverse engineering effort.
We expected the targeted non-volatile microcode ROM
to be stored in a cell array architecture. Other mem-
ory types to implement microcode ROM, such as ﬂash,
Electrically Erasable Programmable Read-only Mem-
ory (EEPROM), and RAM, are either too slow, unnec-
essarily large, or volatile.
Note that the general die structure is almost identical to
the die shot provided in [21], which helped our initial anal-
ysis identify our Region Of Interest (ROI), the microcode
ROM.
6.1 Delayering
After removing the heat sink with a drill, we fully decap-
sulated the die with fuming nitric acid [46]. In order to
visualize the ROM array, we delayered (e.g., removed in-
dividual stacked layers) from the top of the die. The main
challenge during delayering is to uniformly skim planar
surfaces parallel to the individual layers. Typically, the
delayering process alternates between removing a layer
and imaging the layer beneath it [46]. Focusing on our
ROI, we were able to neglect other areas of the chip re-
sulting in a more planar surface in important region(s).
Note that hardware reverse engineering of the whole CPU
USENIX Association
26th USENIX Security Symposium    1171
microarchitecture would require a more controlled delay-
ering process and several months to acquire and process
the whole layout. The interested reader is referred to our
die shot in Figure 3 in the Appendix.
In order to remove layers, we used a combined ap-
proach of Chemical Mechanical Polishing (CMP) and
plasma etching. During inspection of the seventh layer,
we encountered the expected ROM array structure. We
acquired images of individual layers using a Scanning
Electron Microscope (SEM) since optical microscopy
reaches diffraction limits at this structure size. Compared
to colored and more transparent images from optical mi-
croscopy, SEM images only provide a gray-scale channel,
but with higher magniﬁcation. In SEM images, different
materials can be identiﬁed due to brightness yield.
We encountered multiple regular NOR ROM arrays
using contact layer (vias) for programming.
In NOR
ROM with active layer programming, the logic state is
encoded by the presence or absence of a transistor [52].
In our case an advanced bitline-folding architecture [31]
encodes the logic state by either placing a via on the right
or the left bitline. Note another property of this ROM type
is that only a single via may be set at any time; setting
both will result in a short circuit.
Overall, we identiﬁed three ROM blocks consisting of 8
subarrays. Each of the 3 ROM blocks has the capability to
store 30 kB. Note that our results match the visible blocks
in [21]. It is important to note that the vias’ positions
are hardwired and cannot be changed after shipping. The
only possible way to patch bugs in the ROM is to employ
the microcode update procedure described in Section 3.3.
6.2 Microcode Extraction
In Figure 2, we highlighted how bits are programmed
by this memory type. Bright spots represent a via going
down from a metal line, which is either connected to GND
or VCC. We chose to represent the individual cells as set
to logical ’1’ if the left via was set and ’0’ if the right one
was set. This convention does not necessarily correspond
to the correct runtime interpretation. However, permuta-
tions are commonly applied to the ROM memory, hence a
misinterpretation can be corrected in a later analysis step.
In order to analyze the microcode ROM bits for any
permutations, we processed the acquired SEM images
with rompar [7]. Using its image processing capabilities,
we transformed the optical via positions into bit values.
Microcode ROM Bit Analysis. In order to group the
bit values into microinstructions, we carefully analyzed
the ROM structure and we made two crucial observations:
(1) Each alternating column of bits is inverted due to
mirroring of existing cells, which saves space on the die.
(2) Since the memory type employs a transposed bitline
Figure 2: Partially interpreted bits in one ROM subarray.
architecture [31], the bit inversion has to be adjusted to
each segment.
With both observations in mind, we were able to derive
microinstructions from the images. Note that we also had
to interleave the subarrays respectively to acquire 64 bits
(size of a microinstruction) per memory row. Hence, the
ROM allows us to ﬁnd more complex microinstructions
and experimentally reverse engineer their meaning.
7 Microprograms
In this section, we demonstrate the effectiveness of our re-
verse engineering effort by presenting microprograms that
successfully augment existing x86 instructions and add
foreign logic. With this paper, we also publish microcode
patches [42] that are compiled from scratch and run on
unmodiﬁed AMD CPUs, namely K8 Sempron 3100+ and
K10 Athlon II X2 260/280. We found that the microcode
ROM content varies between different processors, but the
macroinstruction entry points into the microcode ROM
are constant. Thus we assume our microcode patches are
compatible with a wider range of K8/K10-based CPUs.
We discuss additional applications of microcode in Sec-