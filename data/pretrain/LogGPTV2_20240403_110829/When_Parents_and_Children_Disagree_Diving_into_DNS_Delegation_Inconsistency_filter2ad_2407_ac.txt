s
r
e
w
s
n
a
 20
 15
 10
 5
 0
0 1 2 3 4 5 6 7 8 9
0
1
1
1
iteration (each 10 minutes)
iteration (each 10 minutes)
(a) Results for normal responses
(b) Results with minimal responses
Fig. 5. Superset NS sets experiments
ns1 and ns3
ns2 and ns4
ns5 and ns6
ns1 and ns3
ns2 and ns4
ns5 and ns6
)
k
(
s
r
e
w
s
n
a
 20
 15
 10
 5
 0
0 1 2 3 4 5 6 7 8 9
0
1
1
1
)
k
(
s
r
e
w
s
n
a
 20
 15
 10
 5
 0
0 1 2 3 4 5 6 7 8 9
0
1
1
1
iteration (each 10 minutes)
iteration (each 10 minutes)
(a) Results for normal responses
(b) Results with minimal responses
Fig. 6. Rest NS sets experiments
only among ns2 and ns4, in the case of normal responses, instead it distributes
queries among all name servers in case of minimal responses.
These measurements then conﬁrm that including “authority data” in the
authoritative server responses will cause some resolvers to prefer only the child
authoritative servers.
4.4 Mixed NSSets (Rest)
We have shown in Table 1 that in 11% of cases, the NSSet of the parent and child
do not have a subset/superset relationship. Instead, some elements are present
in both, but both parent and child have at least one NS that is not available in
the other. To simulate this scenario, as shown in Table 2, we set four NS records
at the parent: [ns1,ns2,ns3,ns4]. Then, at the child, we set [ns2, ns4, ns5, ns6 ],
where the highlighted names show the ones not shared.
Figure 6a shows the experiment results. We see that [ns2, ns4], which are
listed at both parent and child receive most queries. Then, records set only at
the parent ([ns1, ns3]) are second to receive more queries. Finally, records set
only at the child ([ns5, ns6]) receive the least amount of queries. In case of
minimal responses (Fig. 6b), the name servers only present at the child ([ns5,
ns6]) receive virtually no traﬃc.
Diving into DNS Delegation Inconsistency
185
Table 3. O.S. and resolver versions evaluated (N/available, N/covered)
Unbound Knot PowerDNS Windows-DNS
Ubuntu-18-04 9.11.3-1
1.6.7
Ubuntu-16.04 9.10.3-P4 1.5.8
1.6.6
CentOS 7
1.4.20
CentOS 6
Source
1.9.0
N/C
Windows
N/A
N/A
N/A
N/A
N/A
2008r2, 2012, 2016, 2019
2.1.1 4.1.1
1.0.0 4.0.0
2.4.1 4.1.9
N/C 3.7.4
N/C 4.1.9
N/C N/C
Bind
9.9.4
9.8.2rc1
9.14.0
N/C
4.5 Discussion
Having inconsistent NSSets in parent and child authoritative servers impacts
how queries are distributed among name servers, which plays an important role
in DNS engineering. Overall, for all evaluated cases, queries will be unevenly
distributed among authoritative servers – and the servers listed at the parent
zone will receive more queries than then ones speciﬁed in the child.
5 Resolver Software Evaluation
The experiments carried out in Sect. 3 evaluates DNS resolver behavior in the
wild. Since we use RIPE Atlas, we do not know what resolver software is used, if
probes use DNS forwarders, or what kind of cache policies they use. We, however,
see the aggregated behavior among a large set of conﬁgurations.
In this section, we focus on evaluating speciﬁc DNS resolver software instead,
in a controlled environment, in order to understand how they behave towards
DNS zones that are inconsistent with regards to their parent/child NSSet. Our
goal is to identify which vendors conform to the standards. In particular, we
pay attention as to whether resolvers follow RFC2181 [5], which speciﬁes how
resolvers should rank data in case of inconsistency: child authoritative data
should be preferred.
We evaluate four popular DNS resolver implementations: BIND [9],
Unbound [16], Knot [2], and PowerDNS [18]. We do this under popular Linux
server distribution releases, using default packages and conﬁgurations. In addi-
tion, we evaluate resolvers shipped with various Windows server releases. Table 3
shows which vendors and versions we evaluate.
Experiments: We conﬁgure the authoritative name servers for our test
domain (marigliano.xyz) as a disjoint NSSet, as in Sect. 4.1. We conﬁg-
ure the parent zone with [ns1 ,ns3].marigliano.xyz, and the child with [ns2,
ns4].marigliano.xyz
Each experiment includes the four tests described in Table 4(i–iv), in which
we vary query types and query sequence. In (i), we ask the resolver for an A
186
R. Sommese et al.
Table 4. Expected resolver behavior
(i) A Query (ii) NS Query (iii) A Query Then NS Query (iv) NS Query Then A Query
Query
Answer
Cache C(A); C(NS)
C(A)
C(NS)
C(NS)
Answer
Cache C(A); P(NS)
C(A)
First
C(A)
Second
C(NS)
First
C(NS)
C(A); C(NS) C(A); C(NS) C(NS)
Minimal response enabled
C(NS)
C(A)
C(NS)
C(NS)
C(NS)
C(A); P(NS) C(A); C(NS) C(NS)
Information provided by: C⇒ Child, P⇒ Parent
Second
C(A)
C(NS); C(A)
C(A)
C(NS); C(A)
record of a subdomain in our test zone. In test (ii), we ask for the NS record of
the zone. In (iii) we send ﬁrst an A query followed by an NS query, to understand if
resolvers use non-authoritative cached NS information to answer to the following
query violating (§5.4.1 of RFC2181 [5]). In (iv) we invert this order to understand
if authoritative record are overwritten by non-authoritative ones in the cache.
We dump the cache of the resolver after each query, and show which records
are in cache and received by our client (we clear the cache after each query).
Table 4 shows the expected NS usage by the resolvers, if they conform to the
RFCs.
5.1 Results
We evaluate ﬁve resolver vendors and multiple versions. In total, we found that
out of 22 resolvers/vendors evaluated, 13 conform to the RFCs. Next, we report
the non-conﬁrming resolver vendors/versions.
For experiment (i), in which we query for A records, we found that BIND
packaged for Ubuntu did not conform to the standards: it caches only information
from the parent and does not override it with information from the authoritative
section provided by the child (which comes as additional section). This, in turn,
could explain part of results of parent centricity observed in Sect. 4.
For experiment (i) and (iii), if we compile the latest BIND from source it
also does not behave as expected: it sends the parent an explicit NS query before
performing the A query. This is not a bad behavior, i.e.,it does not violate RFCs,
instead it tries to retrieve more authoritative information. However, either if the
name server information retrieved and used in the following query is the one
provided by the child, BIND caches the data from the parent. This behavior of
BIND could be one explanation of the small number of child-centric resolvers
shown in Sect. 4 with Minimal Responses.
We are in the process of notifying BIND developers about this issue.
For experiment (iii), PowerDNS packaged for CentOS 6 and Ubuntu Xenial,
and Windows (all) use the cached non-authoritative information to answer the
NS query in the test, not conforming to RFC2181.
Diving into DNS Delegation Inconsistency
187
PowerDNS Notiﬁcation. We reached out to the developers of PowerDNS,
who have conﬁrmed the behavior. They do not maintain older versions any-
more and the ﬁx will not be backported due to the low severity of the problem.
Our suggestion to the package maintainers of the distributions is to update the
software to a newer version of the software.
6 Conclusions and Recommendations
Given a domain name, its NSSet in the parent and child DNS zones should be
consistent [12]. This is the ﬁrst study that shows, across the .com, .net and org
zones (50% of the DNS namespace), that roughly 8% (13M) domains do not
conform to that. We also show that DNS resolvers in the wild diﬀer in behavior
in returning information from the parent or child.
Inconsistency in parent and child NSSets have consequences for the operation
of the DNS, such as improper load balancing among the name servers, increased
resolution latency and unresponsive name servers. We strongly advise opera-
tors to verify their zones and follow RFC1034. To automate this process, we
advise zone operators to consider supporting CSYNC DNS records (RFC7477)
or other automated consistency checks, so the synchronization can be done in
an automated fashion.
Finally, we also recommend that resolver vendors conform to the authorita-
tive information ranking in RFC2181 (taking into account the recommendations
to mitigate the Kaminsky attack as speciﬁed in RFC5452), and when possible,
to explicitly ask for the child’s NS records, similarly to what is done in DNSSEC,
where signed records are only available at the child (Sect. 5).
Acknowledgments. We thank John Heidemann, Ólafur Guðmundsson and Ülrich
Wisser for feedback provided in the early stages of this research. We also thank the
PAM2020 anonymous reviewers, our shepherd, Steve Uhlig, and Philip Homburg, from
RIPE NCC. This work uses measurements from RIPE Atlas (https://atlas.ripe.net),
an open measurements platform operated by RIPE NCC.
This work is partially funded by the NWO-DHS MADDVIPR project (Grant Agree-
ment 628.001.031/FA8750-19-2-0004), the PANDA project (NSF OAC-1724853) and
the EU CONCORDIA project (Grant Agreement 830927). This material is based
on research sponsored by Air Force Research Laboratory under agreement number
FA8750-18-2-0049. The U.S. Government is authorized to reproduce and distribute
reprints for Governmental purposes notwithstanding any copyright notation thereon.
The views and conclusions in this paper are those of the authors and do not neces-
sarily reﬂect the opinions of a sponsor, Air Force Research Laboratory or the U.S.
Government.
A Longitudinal View on Inconsistency
A.1 NS Inconsistency over Time
The results presented in Table 1 show NS inconsistency for a single day. However,
it is also interesting to understand how this misconﬁguration evolves over time.
188
R. Sommese et al.
Fig. 7. NS inconsistency (P (cid:4)= C) from 2017-04-01 until 2019-10-01
We analyzed NS inconsistency for the case P (cid:3)= C over the two and a half year-
period preceding the date of the analysis presented in Table 1. Figure 7 shows
the results of this analysis. The ﬁgure clearly demonstrates that the fraction
of domains aﬀected by this misconﬁguration remains similar over time. This
result suggests that NS inconsistency is a long-term misconﬁguration in the
DNS ecosystem.
References
1. Almond, C.: CNAME at the apex of a zone. https://www.isc.org/blogs/cname-at-
6. Hardaker, W.: Child-to-parent synchronization in DNS. RFC 7477, IETF, March
1997. http://tools.ietf.org/rfc/rfc2181.txt
2015. http://tools.ietf.org/rfc/rfc7477.txt
7. Hoﬀman, P., Sullivan, A., Fujiwara, K.: DNS terminology. RFC 8499, IETF,
November 2018. http://tools.ietf.org/rfc/rfc8499.txt
8. Hubert, A., Mook, R.: Measures for making DNS more resilient against forged
answers. RFC 5452, IETF, January 2009. http://tools.ietf.org/rfc/rfc5452.txt
9. Internet Systems Consortium: BIND: Berkeley Internet Name Domain. https://
www.isc.org/bind/
the-apex-of-a-zone/
en/know-how/statistics/l
(Jan 2020)
2. CZ.NIC: Knot Resolver. https://www.knot-resolver.cz
3. DENIC AG: Statistics of .de domains, 22 October 2019. https://www.denic.de/
4. DNS OARC: Root zone archive. https://www.dns-oarc.net/oarc/data/zfr/root
5. Elz, R., Bush, R.: Clariﬁcations to the DNS speciﬁcation. RFC 2181, IETF, July
Diving into DNS Delegation Inconsistency
189
10. Kristoﬀ, J.: DNS inconsistency (2018). https://blog.apnic.net/2018/08/29/dns-
inconsistency/
11. Liu, D., Hao, S., Wang, H.: All your DNS records point to us: understanding
the security threats of dangling DNS records. In: Proceedings of the 2016 ACM
SIGSAC Conference on Computer and Communications Security, CCS 2016, pp.
1414–1425. ACM, New York (2016). https://doi.org/10.1145/2976749.2978387
12. Mockapetris, P.: Domain names - concepts and facilities. RFC 1034, IETF, Novem-
ber 1987. http://tools.ietf.org/rfc/rfc1034.txt
13. Moura, G.C.M., Heidemann, J., Müller, M., de Schmidt, R.O., Davids, M.: When
the dike breaks: dissecting DNS defenses during DDoS. In: Proceedings of the
ACM Internet Measurement Conference, October 2018. https://doi.org/10.1145/
3278532.3278534
14. Moura, G.C.M., Heidemann, J., de Schmidt, R.O., Hardaker, W.: Cache me if you
can: eﬀects of DNS time-to-live (extended). In: Proceedings of the ACM Internet
Measurement Conference. ACM, Amsterdam, October 2019. https://doi.org/10.
1145/3355369.3355568. p. to appear
15. Müller, M., Moura, G.C.M., de Schmidt, R.O., Heidemann, J.: Recursives in the
wild: engineering authoritative DNS servers. In: Proceedings of the ACM Internet
Measurement Conference, London, UK, pp. 489–495 (2017). https://doi.org/10.
1145/3131365.3131366
16. NLnet Labs: Unbound, March 2019. https://unbound.net/
17. Pappas, V., Wessels, D., Massey, D., Lu, S., Terzis, A., Zhang, L.: Impact of con-
ﬁguration errors on DNS robustness. IEEE J. Sel. Areas Commun. 27(3), 275–290
(2009)
18. PowerDNS: PowerDNS Recursor. https://www.powerdns.com/recursor.html
19. van Rijswijk-Deij, R., Sperotto, A., Pras, A.: DNSSEC and its potential for DDoS
attacks: a comprehensive measurement study. In: Proceedings of the 2014 ACM
Conference on Internet Measurement Conference, IMC, pp. 449–460. ACM, Novem-
ber 2014
20. RIPE Ncc Staﬀ: RIPE Atlas: a global internet measurement network. Internet
Protocol J. (IPJ) 18(3), 2–26 (2015)
21. RIPE Network Coordination Centre: RIPE Atlas (2015). https://atlas.ripe.net
22. Root Zone ﬁle: Root, February 2019. http://www.internic.net/domain/root.zone
23. van Rijswijk-Deij, R., Jonker, M., Sperotto, A., Pras, A.: A high-performance,
scalable infrastructure for large-scale active DNS measurements. IEEE J. Sel. Areas
Commun. 34(6), 1877–1888 (2016). https://doi.org/10.1109/JSAC.2016.2558918