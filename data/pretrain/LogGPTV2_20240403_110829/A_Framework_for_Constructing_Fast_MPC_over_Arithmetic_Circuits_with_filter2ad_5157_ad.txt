and unknown).
PROTOCOL 3.6 (Triple Verification Based on Multiplication).
Let πmult be a multiplication protocol that is secure up to additive
attack, as described in Section 2.
• Inputs: The parties hold a triple ([x], [y], [z]) to verify, and an
• The protocol:
additional random triple ([a], [b], [c]).
(1) The parties execute Frand to generate a random sharing [α].
(2) The parties execute πmult on [x] and [α] to obtain [α · x].
(3) Each party locally computes [ρ] = [α · x] + [a] and [σ] =
(4) The parties execute πmult on [z] and [α] to obtain [α · z].
(5) The parties execute πmult on [a] and [σ] to obtain [σ · a].
(6) The parties execute πmult on [ρ] and [y] to obtain [ρ · y].
(7) The parties call Fcoin to receive a random ψ ∈ F.
(8) The parties run the open([α]) procedure to receive α. If a
party receives ⊥ in the opening, then it sends ⊥ to all the
other parties and aborts.
[y] + [b].
(9) Each party locally computes
[v] = ([α ·z] +αψ ·[x])−[c] +([σ ·a] +ψ ·[a])−([ρ ·y] +ψ ·[ρ]).
(10) The parties call Frand to generate a random sharing [r]
(11) The parties execute πmult on [r] and [v] to obtain
[w] = [r · v].
(12) The parties run the open([w]) procedure to receive w. If a
party receives ⊥ in the opening, then it sends ⊥ to all the
other parties and aborts.
(13) Each party checks that w = 0. if not, then it sends ⊥ to the
(14)
other parties and aborts.
If no abort messages are received, then output accept.
The protocol can be proven secure as long as all shares of the in-
put are guaranteed to be valid (but not necessarily value-consistent
or form correct triples). Thus, this method is only suited for proto-
cols where validity is always guaranteed.
The following lemma shows the security provided by Proto-
col 3.6.
Lemma 3.7. Let [a],[b],[c] be valid shares and let πmult be a mul-
tiplication protocol that is secure up to additive attacks. If [x],[y] are
correct shares and [z] is valid, but ([x],[y],[z]) is not a correct multi-
plication triple, then the honest parties output accept in Protocol 3.6
with probability at most negligibly greater than 1
|F| .
Proof. Assume that [x],[y] are correct shares, that [z] is valid
(meaning that all subsets of honest parties of size t + 1 reconstruct
to a value, and not to ⊥) and that the triple ([x],[y],[z]) is not
correct (note that since x and y are well de(cid:27)ned, then so is x · y).
This implies that either [z] is value-inconsistent or that z is correct
but z (cid:44) x · y. In both cases, there exists a subset J0 of t + 1 honest
parties such that val([z])J0 = x · y + ¯d where ¯d ∈ F \ {0}. Thus,
val([z(cid:48)])J0 = x ·y +ψ · x + ¯d. We consider the values val([a])J0 = aJ0
and val([b])J0 = bJ0 that the honest subset J0 would open for [a]
and [b], respectively. Since [c] is valid, it holds that val([c])J0 =
aJ0 · bJ0 + d1 for some d1 ∈ F (note that d1 may equal 0).
In the protocol, the parties execute πmult (cid:27)ve times. Looking at
the shares of parties in J0, we obtain that there exist d2, . . . , d5 ∈ F
such that
val([α · x])J0 = α · x + d2
val([α · z])J0 = α · (x · y + ¯d) + d3
val([σ · a])J0 = (y + bJ0) · aJ0 + d4
val([ρ · y])J0 = (α · x + d2 + aJ0) · y + d5.
(3)
(4)
(5)
(6)
The above holds by the assumption that πmult is secure up to ad-
ditive attacks and therefore these di values are well de(cid:27)ned (and
can be extracted by a simulator). By the properties of the open
procedure, if all the honest parties output accept at the end of the
protocol, then [w] is a correct sharing of 0. We consider two cases:
Case 1: [v] is a sharing of 0. This implies that for J0 it holds:
val([v])J0
= val([α · z])J0 + αψ · x − val([c])J0 + val([σ · a])J0 + ψ · aJ0
−val([ρ · y])J0 − ψ · (val([α · x])J0 + aJ0)
= α · (x · y + ψ · x + ¯d) + d3 − (aJ0 · bJ0 + d1)
+ (y + ψ + bJ0) · aJ0 + d4 − (α · x + d2 + aJ0) · (y + ψ) − d5
= α · ¯d − d1 − d2 · (y + ψ) + d3 + d4 − d5 = 0.
This holds if and only if
α · ¯d = d1 + d2 · (y + ψ) − d3 − d4 + d5.
(7)
We claim that for x, y, z as in the lemma, Eq. (7) holds with prob-
ability at most negligibly greater than 1
|F| . To see this, assume by
contradiction, that there exists an adversary A who participates in
Protocol 3.6 and succeeds in causing Eq. (7) to hold with probability
 that is non-negligibly greater than 1
F. We will show by reduction
that if such an A exists, then this contradicts the security of the se-
cret sharing scheme. Let [x],[y],[z],[a],[b],[c] be inputs for which
A succeeds in having Eq. (7) holds with probability .
Before describing S, let Π denote Protocol 3.6 where the πmult
executions are replaced with “ideal functionalities” computing mul-
tiplication under an additive attack; Π is a “hybrid” protocol con-
taining both regular messages and ideal calls. As described in Sec-
tion 2.2, this functionality receives d from the adversary, shares
of two values x, y from the honest parties, and returns shares of
x · y + d to all parties. Now, let AΠ be the adversary obtained from
A by replacing the πmult executions with these ideal calls; such an
adversary exists by the sequential modular composition theorem
of [9]. Accordingly, the probability that Eq. (7) holds when AΠ runs
Protocol 3.6 on input [x],[y],[z],[a],[b],[c] is negligibly close to .
We are now ready to describe S who breaks the security of the
secret sharing scheme. Adversary S chooses t < n/2 shares, hands
them to it’s challenger, which chooses a random element α and
de(cid:27)ne the remaining n − t shares accordingly. The goal of S is to
guess α. S internally plays the honest parties in set J0 running the
hybrid protocol Π with AΠ, using inputs [x],[y],[z],[a],[b],[c],
up to and including Step 7.S obtains t shares from AΠ playing
the role of Frand and send them to its challenger. Then, it obtains
d2, d3, d4, d5 from AΠ during the internal simulation, computes
¯d = z − x · y and d1 = c − a · b. Finally, S chooses a random ψ, and
hands it to AΠ. Then, S outputs
−1
(cid:48) = (d1 + d2 · (y + ψ) − d3 − d4 + d5) · ¯d
.
α
By the assumption that z (cid:44) x · y, we have ¯d (cid:44) 0 and thus ¯d−1 is
well de(cid:27)ned. Furthermore, if Eq. (7) holds, then α(cid:48) = α and so S
outputs the secret value, despite knowing less than n/2 shares. By
the assumption on A, we have that S succeeds with probability
that is negligibly close to . This contradicts the security of the
secret sharing scheme if  is non-negligibly greater than 1/|F|.
Case 2: [v] is a not a sharing 0. As before, this means that
there exists a subset J0 of size t + 1 of honest parties, such that
val([v])J0 = e for some e ∈ F \ {0}. By the assumption on πmult,
this implies that for J0 there exists d6 ∈ F such that:
val([w])J0 = r · e + d6 = 0,
which holds if and only if
r · e = −d6
(8)
Similarly to the previous case, assume in contradiction that there
exists an adversary A who succeeds in causing Eq. (8) to hold with
probability  negligibly greater than 1
Replacing yet again the πmult executions with ideal functionalities
computing multiplication under additive attack, we can construct
an adversary S who uses the adversary AΠ that exists by the as-
sumption in the hybrid protocol, to break the secret sharing scheme.
This time S runs the hybrid protocol with AΠ up to and include
Step 11. S begins by receiving t shares which are used by him to de-
(cid:27)ne [α] for some random α ∈ F as would do Frand. Then, S receives
d2, d3, d4, d5 from A during the simulation, computes ¯d and d1 and
thus can compute e = val([v])J0 = α · ¯d−d1−d2·(y +ψ)+d3 +d4−d5.
Then, S proceeds by handing a random ψ to AΠ. Then, it receives t
shares from AΠ for generating [r] which are sent to its challenger.
Finally, it receives d6 from AΠ and outputs r(cid:48) = −d6 · e−1. If Eq. (8)
holds, then r(cid:48) = r and S succeeds with probability which is negligi-
bly close to , in contradiction to the security of the secret sharing
scheme.
This completes the proof of the lemma.
(cid:3)
|F| on inputs[x],[y],[z],[a],[b],[c].
Removing the remaining calls to the open procedure. Protocol 3.6
requires two executions of the open procedure. Stated di(cid:29)erently,
each veri(cid:27)cation of a triple requires two invocations of the open
procedure. We now show how to verify many triples with just two
calls to the open procedure. The idea behind this improvement is
straightforward: (cid:27)rst, use the same random sharing [α] for all the
veri(cid:27)ed triples, and second, compute a random linear combination
of many [v]’s, multiply the result with a random sharing and then
open the result. If any [v] (cid:44) 0, then since the coe(cid:28)cients are
random, the (cid:27)nal result will not equal 0, except with probability
1/(|F| − 1). By doing this, we also reduce the number of πmult by 1,
since the multiplication with a random sharing before opening is
required only once. The idea is speci(cid:27)ed in Protocol 3.8. Observe
that this method also applies to Protocol 3.4, thereby reducing the
number of openings there from 3 to 2. From an asymptotic view,
this is less signi(cid:27)cant, as the overhead of the protocol still depends
on the cost of the open procedure.
Lemma 3.9. Let {([ai],[bi],[ci])}L
i =1 be valid shares and let πmult
be a protocol that is secure up to additive attack. If {([xi],[yi])}L
i =1
are correct, but there exists some k ∈ {1 . . . , L} such that [zk] is valid
and ([xk],[yk],[zk]) is not a correct multiplication triple, then the
PROTOCOL 3.8 (Batch Verification of Triples based on Mul-
tiplication).
• Inputs: The parties hold a list of triples {([xi], [yi], [zi])}L
i =1
i =1.
• The protocol:
to verify and a list of random triples {([ai], [bi], [ci])}L
(1) The parties call Frand to generate a random sharing [α].
(2) For i = 1 to L: The parties run Steps 2-7 of Protocol 3.6 on
(3) The parties run open([α]).
(4) For i = 1 to L: The parties execute Step 9 of Protocol 3.6 ,
(5) The parties call Fcoin to receive random elements
[α], ([xi], [yi], [zi]) and ([ai], [bi], [ci]).
to obtain [vi].
ρ1, . . . , ρL ∈ F \ {0}
(6) The parties locally compute
[v] = ρ1 · [v1] + . . . + ρL · [vL]
(7) The parties call Frand to generate a random sharing [r].
(8) The parties execute πmult on [r] and [v] to obtain
(9) The parties run open([w]).
(10)
.
[w] = [r · v].
If no abort message was received, then the parties output
accept.
honest parties output accept in Protocol 3.8 with probability at most
negligibly greater than
1
|F|−1 .
F <
Proof. Assume that {([xi],[yi])}L
i =1 are correct, and that ∃k ∈
{1, . . . , L} such that[zk] is valid and([xk],[yk],[zk]) is not a correct
multiplication triple. If the honest parties output accept at the end
of the protocol, then by the properties of the open procedure, [w]
is a correct sharing of 0. There are three cases to consider:
(1) [vk] is a correct sharing of 0. By exactly the same argument
in the proof of Lemma 3.7 (case 1), the probability that this
happens is at most negligibly greater than 1
(2) [vk] is not sharing of 0, but [v] is a correct sharing of 0.. If
[vk] is not a correct sharing, then, by Lemma 2.4, the prob-
ability that [v] is a correct sharing is at most
1
|F|−1. Other-
wise, [vk] is a correct sharing of some dk ∈ F \ {0}. Let [u] =
j∈{1,...,L}\{k } ρj ·[vj]. Then, we have that [v] = [u] + ρk[vk].
Since [v] and [vk] are both correct, it follows from the linear
property of the scheme that [u] is also correct. Thus, if v = 0
then it must hold that 0 = u + ρk · dk, which in turn holds only
if ρk = −u · d−1
. Since ρk ∈ F \ {0} is random, this happens
with probability of at most
(3) [v] is not a sharing of 0, but [w] is a sharing of 0. This is exactly
case 2 of Lemma 3.7, where it is shown that the probability that
this happens is at most negligibly greater than 1
1
|F|−1.
1
|F|−1.

k
F <
1
|F|−1.
Thus, in all cases, the honest parties accept with probability at most
1
|F|−1, as required.
(cid:3)
4 THE PROTOCOL FRAMEWORK FOR
LARGE FIELDS
In this section, we present our protocol for large (cid:27)elds (the protocol
works for any (cid:27)eld, but as we will see it is most e(cid:28)cient for large
(cid:27)elds). The protocol has a set-up phase to generate random triples
and an online phase to compute any arithmetic circuit.
The set-up protocol is presented in Protocol 4.1. In this protocol,
we utilize the fact that the random triples ([ai],[bi],[ci]) used in
the veri(cid:27)cation protocols only need to be valid (but not necessarily
correct). This enables us to generate the tuples very e(cid:28)ciently,
using a private semi-honest multiplication protocol.
PROTOCOL 4.1 (Generating Random Multiplication Triples).
Let πmult be a private semi-honest multiplication protocol. If VER-
SION 2 is used in the main protocol, then πmult must also be secure
up to additive attack.
• Inputs: The parties have the number N of triples to generate.
• The protocol:
(1) The parties call Frand to obtain 2N random sharings, ar-
(2) For i = 1 to N : the parties execute πmult on [ai] and [bi]
ranged in a list of the form {([ai], [bi])}N
i =1.
to obtain [ci].
• Outputs: The parties output {([ai], [bi], [ci])}N