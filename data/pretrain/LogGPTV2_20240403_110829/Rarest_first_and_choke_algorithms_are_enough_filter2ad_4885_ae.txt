### Rarest First and Network Coding

The rarest first algorithm selects pieces that are the least common within the peer set, i.e., those with the fewest copies. These pieces are typically chosen only at the end of the content download when no other pieces are available for download.

Due to space limitations, we will focus on our main conclusions. For a detailed discussion on the last pieces problem, interested readers may refer to [19].

In our observations, the last pieces problem was not observed in torrents in a steady state. However, this issue did arise in a few torrents during their transient state. We found that the problem is inherent to the transient state and not due to the rarest first algorithm. In fact, the rarest first algorithm is effective at mitigating this problem by quickly replicating rare pieces as they become available.

### Piece and Block Interarrival Time

Understanding the piece interarrival time is crucial because BitTorrent clients can only retransmit complete pieces, not partially received ones. Pieces are further divided into blocks, which are the unit of data transfer in BitTorrent. Therefore, we also evaluated the block interarrival time and identified a "first blocks problem." This issue results in a slow startup of the torrent, indicating an area for potential improvement in BitTorrent.

In conclusion, while the last pieces problem is often overstated, the first blocks problem is underestimated and presents an opportunity for performance enhancement.

### Discussion on Rarest First and Network Coding

Our analysis shows that the rarest first strategy is efficient in the torrents we studied. The claimed deficiencies of the rarest first approach were either not observed in our experiments or were due to a misunderstanding of the reasons for piece scarcity in torrents during their transient state.

However, this does not negate the value of solutions based on source or network coding. Network coding can achieve near-optimal piece selection in all scenarios, which is not always the case with the rarest first approach. In specific contexts, such as small outdegree constraints or poor network connectivity between clusters of peers, the rarest first method may perform poorly. Our study demonstrates that in real-world torrents with a large peer set (e.g., 80 peers) and good network connectivity, the rarest first strategy performs very well.

In fact, in the presented torrents, the rarest first approach is nearly as effective as network coding. We consider two states: steady and transient. In the steady state, the entropy of the torrents is close to one, indicating that each peer is frequently interested in each other peer. This is close to the ideal target for a piece selection strategy, suggesting that the potential for improvement over the rarest first method is minimal. In the transient state, network coding allows the initial seed to distribute the entire content faster, avoiding duplicate pieces. However, simple policies like the new choke algorithm in seed state or super seeding mode [3] can reduce the ratio of duplicate pieces, making the benefits of network coding less significant.

Network coding is more general and optimal in all cases, but it introduces implementation challenges and is CPU-intensive. The rarest first method, on the other hand, is simple, easy to implement, and widely used. In a context with a large peer set and good network connectivity, the rarest first strategy is both simple and highly efficient, making its replacement unjustified.

### Choke Algorithm

The choke algorithm is a peer selection strategy designed to ensure fairness and maximize system capacity. In this section, we focus on the fairness aspect, as the claimed deficiencies of the choke algorithm relate to its fairness properties.

#### Fairness Issue

Recent studies [5, 10, 13, 15] have challenged the fairness of the choke algorithm, arguing that it does not implement a bit-level tit-for-tat but rather a coarse approximation based on short-term download estimations. They propose that a fair peer selection strategy should enforce byte-level reciprocation, where a peer A refuses to upload to a peer B if the difference between the bytes uploaded by A to B and the bytes downloaded from B to A exceeds a threshold. This notion of fairness, called "tit-for-tat fairness," aims to penalize free riders and enforce reciprocation.

We argue that tit-for-tat fairness is not appropriate for peer-to-peer file replication. In a peer-to-peer session, there are seeds, leechers, and free riders (leechers that never upload). With tit-for-tat fairness, excess capacity in the torrent would be lost even if slow leechers or free riders could benefit from it. Peer-to-peer applications inherently have excess capacity due to two key characteristics: leechers often have asymmetric network connectivity (upload capacity lower than download capacity), and seeds cannot evaluate the reciprocation of leechers since they do not need any pieces. Therefore, a different notion of fairness is needed that accounts for these characteristics.

We propose two fairness criteria:
1. Any leecher i with an upload speed \( U_i \) should get a lower download speed than any other leecher j with an upload speed \( U_j > U_i \).
2. A seed should give the same service time to each leecher.

These criteria allow leechers to use excess capacity without compromising the contributions of more active leechers. Reciprocation is encouraged, and free riders are penalized. Seeds do not distinguish between contributing leechers and free riders, but the presence of more contributing leechers reduces the impact of free riders on the system's stability.

Tit-for-tat fairness can be extended to distribute seed capacity evenly among peers, but finding an optimal threshold in a distributed system is challenging. The choke algorithm, however, meets our fairness criteria with a simple distributed algorithm that does not require complex threshold calculations.

In summary, tit-for-tat fairness is not suitable for peer-to-peer file replication. We propose new fairness criteria that better fit the context of protocols like BitTorrent.

#### Leecher State

The choke algorithm in leecher state fosters reciprocation. Figure 7 shows that peers receiving the most from the local peer (top graph) are also the ones from which the local peer downloads the most (bottom graph). This strong correlation indicates that the choke algorithm effectively promotes reciprocation, even though it does not achieve perfect byte-level reciprocity.

Two torrents exhibit different characteristics: in torrent 19, the local peer does not upload any bytes due to a small number of leechers, and in torrent 5, a low level of reciprocation is observed due to a single leecher who contributed significantly but received little in return. This is attributed to the low entropy of the torrent in its transient state.

Overall, the choke algorithm, with its simple distributed approach, achieves a good level of reciprocation without stringent requirements, making it a fair and effective solution.

### Seed State

The new choke algorithm in seed state ensures that each leecher receives the same service time. Figure 9 illustrates this fairness, showing that the distribution of uploaded bytes is consistent across sets of remote peers. This consistency confirms that the choke algorithm in seed state is fair according to our proposed criteria.

In conclusion, the choke algorithm, both in leecher and seed states, is fair and effective, meeting the proposed fairness criteria and promoting a balanced and stable peer-to-peer environment.