    -   CPU 类型和数量; 在 `/proc/cpuinfo`{.literal} 文件中可用
    -   安装的内存以及 rase OS 运行后可用的内存量 ; 在
        `/proc/meminfo`{.literal} 文件中可用
    -   已使用的驱动器控制器类型
    -   已使用磁盘的类型和数量
    :::
-   运行中进程的完整列表 ; 可在 `ps aux`{.literal}
    命令或类似的列表中找到
-   物理卷的名称和为 VDO 创建的卷组的名称；可在 `pvs 和 vgs`{.literal}
    ``{=html} 命令中找到
-   格式化 VDO 卷时使用的文件系统（若有）
-   挂载的目录的权限
-   `/etc/vdoconf.yaml`{.literal} 文件的内容
-   VDO 文件的位置
:::
:::
::: section
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#creating-a-vdo-test-volume_testing-vdo-space-savings}创建 VDO 测试卷 {.title}
:::
此流程在 512 GiB 物理卷中创建了大小为 1 TiB 的 VDO 卷，用于测试目的。
::: orderedlist
**流程**
1.  创建 VDO 卷：
    ``` screen
    # vdo create --name=vdo-test \
                 --device=/dev/sdb \
                 --vdoLogicalSize=1T \
                 --writePolicy=policy \
                 --verbose
    ```
    ::: itemizedlist
    -   使用到块设备的路径替换 `/dev/sdb`{.literal}。
    -   要在异步存储之上测试 VDO `async`{.literal} 模式，请使用
        `--writePolicy=async`{.literal} 选项创建一个异步卷。
    -   要在同步存储之上测试 VDO `同步`{.literal} 模式，请使用
        `--writePolicy=sync`{.literal} 选项创建一个同步卷。
    :::
2.  使用 XFS 或者 ext4 文件系统格式化新卷。
    ::: itemizedlist
    -   对于 XFS：
        ``` screen
        # mkfs.xfs -K /dev/mapper/vdo-test
        ```
    -   对于 ext4：
        ``` screen
        # mkfs.ext4 -E nodiscard /dev/mapper/vdo-test
        ```
    :::
3.  挂载格式化的卷：
    ``` screen
    # mkdir /mnt/vdo-test
    # mount /dev/mapper/vdo-test /mnt/vdo-test && \
      chmod a+rwx /mnt/vdo-test
    ```
:::
:::
::: section
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#testing-the-vdo-test-volume_testing-vdo-space-savings}测试 VDO 测试卷 {.title}
:::
此流程测试 VDO 测试卷的读取和写入是否正常工作。
::: itemizedlist
**先决条件**
-   挂载新创建的 VDO 测试卷。详情请查看 ["创建 VDO
    测试卷"一节](#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#creating-a-vdo-test-volume_testing-vdo-space-savings "创建 VDO 测试卷"){.xref}。
:::
::: orderedlist
**流程**
1.  将随机数据的 32 GiB 写入 VDO 卷：
    ``` screen
    $ dd if=/dev/urandom of=/mnt/vdo-test/testfile bs=4096 count=8388608
    ```
2.  从 VDO 卷中读取数据并将其写入另一个卷：
    ``` screen
    $ dd if=/mnt/vdo-test/testfile of=another-location/testfile bs=4096
    ```
    ::: itemizedlist
    -   使用任何不在 VDO 测试卷中的写入访问权限的目录替换
        [*[another-location]{.replaceable}*]{.emphasis}。例如，您可以使用您的主目录。
    :::
3.  比较这两个文件：
    ``` screen
    $ diff --report-identical-files /mnt/vdo-test/testfile another-location/testfile
    ```
    命令应该报告这些文件是相同的。
4.  将文件复制到 VDO 卷中的新位置：
    ``` screen
    $ dd if=another-location/testfile of=/mnt/vdo-test/testfile2 bs=4096
    ```
5.  将第三个文件与第二个文件进行比较：
    ``` screen
    $ diff --report-identical-files /mnt/vdo-test/testfile2 another-location/testfile
    ```
    命令应该报告这些文件是相同的。
:::
::: itemizedlist
**清理步骤**
-   删除 VDO 测试卷，如 ["清理 VDO
    测试卷"一节](#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-test-volume_testing-vdo-space-savings "清理 VDO 测试卷"){.xref}
    所述。
:::
:::
::: section
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-test-volume_testing-vdo-space-savings}清理 VDO 测试卷 {.title}
:::
此流程移除了用于从系统中测试 VDO 效率的 VDO 卷。
::: itemizedlist
**先决条件**
-   挂载 VDO 测试卷。
:::
::: orderedlist
**流程**
1.  卸载在 VDO 卷中创建的文件系统：
    ``` screen
    # umount /mnt/vdo-test
    ```
2.  从系统中删除 VDO 测试卷：
    ``` screen
    # vdo remove --name=vdo-test
    ```
:::
::: itemizedlist
**验证步骤**
-   验证卷是否已被删除：
    ``` screen
    # vdo list --all | grep vdo-test
    ```
    这个命令不应该列出 VDO 测试分区。
:::
:::
::: section
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#measuring-vdo-deduplication_testing-vdo-space-savings}测量 VDO 复制 {.title}
:::
此流程测试 VDO 数据重复在 VDO 测试卷中的效率。
::: itemizedlist
**先决条件**
-   挂载新创建的 VDO 测试卷。详情请查看 ["创建 VDO
    测试卷"一节](#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#creating-a-vdo-test-volume_testing-vdo-space-savings "创建 VDO 测试卷"){.xref}。
:::
::: orderedlist
**流程**
1.  准备可记录测试结果的表：
    ::: informaltable
      统计               裸机文件系统   seed 后   10 个副本后
      ------------------ -------------- --------- -------------
      文件系统使用大小                             
      使用 VDO 数据                                
      使用 VDO 逻辑                                
    :::
2.  在 VDO 卷中创建 10 个目录存放测试数据集的 10 个副本：
    ``` screen
    $ mkdir /mnt/vdo-test/vdo{01..10}
    ```
3.  检查文件系统报告的磁盘用量：
    ``` screen
    $ df --human-readable /mnt/vdo-test
    ```
    ::: example
    []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#idm139672007957344}
    **例 3.1. 磁盘用量**
    ::: example-contents
    ``` screen
    Filesystem            Size  Used Avail Use% Mounted on
    /dev/mapper/vdo-test  1.5T  198M  1.4T   1% /mnt/vdo-test
    ```
    :::
    :::
4.  记录以下值：
    ``` screen
    # vdostats --verbose | grep "blocks used"
    ```
    ::: example
    []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#idm139672003100576}
    **例 3.2. 使用的块**
    ::: example-contents
    ``` screen
    data blocks used                : 1090
    overhead blocks used            : 538846
    logical blocks used             : 6059434
    ```
    :::
    :::
    ::: itemizedlist
    -   `使用的数据块`{.literal} 是 VDO
        下运行的物理设备优化后用户数据使用的块数。
    -   `使用的逻辑块`{.literal}
        是优化前使用的块数。它将作为测量的起点。
    :::
5.  在 VDO 卷中创建数据源文件：
    ``` screen
    $ dd if=/dev/urandom of=/mnt/vdo-test/sourcefile bs=4096 count=1048576
    4294967296 bytes (4.3 GB) copied, 540.538 s, 7.9 MB/s
    ```
6.  重新定义已使用的物理磁盘空间量：
    ``` screen
    $ df --human-readable /mnt/vdo-test
    ```
    ::: example
    []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#idm139671991487536}
    **例 3.3. 使用数据源文件磁盘用量**
    ::: example-contents
    ``` screen
    Filesystem            Size  Used Avail Use% Mounted on
    /dev/mapper/vdo-test  1.5T  4.2G  1.4T   1% /mnt/vdo-test
    ```
    :::
    :::
    ``` screen
    # vdostats --verbose | grep "blocks used"
    ```
    ::: example
    []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#idm139672003549936}
    **例 3.4. 数据源文件使用的块**
    ::: example-contents
    ``` screen
    data blocks used                : 1050093  # Increased by 4GiB
    overhead blocks used            : 538846   # Did not significantly change
    logical blocks used             : 7108036  # Increased by 4GiB
    ```
    :::
    :::
    这个命令应该显示使用的块数量增加，与写入文件的大小相对应。
7.  将文件复制到 10 个子目录中的每个子目录中：
    ``` screen
    $ for i in {01..10}; do
      cp /mnt/vdo-test/sourcefile /mnt/vdo-test/vdo$i
      done
    ```
8.  重新定义已使用的物理磁盘空间量：
    ``` screen
    $ df -h /mnt/vdo-test
    ```
    ::: example
    []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#idm139671989568528}
    **例 3.5. 复制文件后磁盘用量**
    ::: example-contents
    ``` screen
    Filesystem            Size  Used Avail Use% Mounted on
    /dev/mapper/vdo-test  1.5T   45G  1.3T   4% /mnt/vdo-test
    ```
    :::
    :::
    ``` screen
    # vdostats --verbose | grep "blocks used"
    ```
    ::: example
    []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#idm139671990669888}
    **例 3.6. 复制文件后使用的块**
    ::: example-contents
    ``` screen
    data blocks used                : 1050836   # Increased by 3 MiB
    overhead blocks used            : 538846
    logical blocks used             : 17594127  # Increased by 41 GiB
    ```
    :::
    :::
    `使用的数据块`{.literal}
    应当与先前列表的结果相似，而文件系统日志和元数据仅稍有增加。
9.  从写入测试数据之前找到的值中减去文件系统所用空间的新值。从文件系统的角度来看，这是此测试占用的空间量。
10. 观察您记录统计中的空间节能：
    ::: example
    []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#idm139671881086512}
    **例 3.7. 记录的值**
    ::: example-contents
    ::: informaltable
      统计               裸机文件系统                                                   seed 后    10 个副本后
      ------------------ -------------------------------------------------------------- ---------- -------------
      文件系统使用大小   198 MiB                                                        4.2 GiB    45 GiB
      使用 VDO 数据      4 MiB                                                          4.1 GiB    4.1 GiB
      使用 VDO 逻辑      23.6 GiB [*（1.6 TiB 格式驱动器的文件系统开销）*]{.emphasis}   27.8 GiB   68.7 GiB
    :::
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}