title:Heisenbyte: Thwarting Memory Disclosure Attacks using Destructive
Code Reads
author:Adrian Tang and
Simha Sethumadhavan and
Salvatore J. Stolfo
Heisenbyte: Thwarting Memory Disclosure Attacks using
Destructive Code Reads
Adrian Tang
Simha Sethumadhavan
Salvatore Stolfo
Department of Computer Science
Columbia University
New York, NY, USA
{atang, simha, sal}@cs.columbia.edu
ABSTRACT
Vulnerabilities that disclose executable memory pages en-
able a new class of powerful code reuse attacks that build
the attack payload at runtime.
In this work, we present
Heisenbyte, a system to protect against memory disclosure
attacks. Central to Heisenbyte is the concept of destructive
code reads – code is garbled right after it is read. Gar-
bling the code after reading it takes away from the attacker
her ability to leverage memory disclosure bugs in both static
code and dynamically generated just-in-time code. By lever-
aging existing virtualization support, Heisenbyte’s novel use
of destructive code reads sidesteps the problem of incom-
plete binary disassembly in binaries, and extends protection
to close-sourced COTS binaries, which are two major limi-
tations of prior solutions against memory disclosure vulner-
abilities. Our experiments demonstrate that Heisenbyte can
tolerate some degree of imperfect static analysis in disas-
sembled binaries, while eﬀectively thwarting dynamic code
reuse exploits in both static and JIT code, at a modest 1.8%
average runtime overhead due to virtualization and 16.5%
average overhead due to the destructive code reads.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General
- Security and Protection
General Terms
Security
Keywords
Memory disclosure; Binary rewriting; Destructive code reads
1.
INTRODUCTION
In the last decade, with the widespread use of data ex-
ecution protection, attackers have turned to reusing code
snippets from existing binaries to craft attacks. To perform
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813685.
these code reuse attacks, the attacker has to “see” the code
so that she can ﬁnd the “gadgets” necessary to craft the
attack payload. One eﬀective solution, until very recently,
has been ﬁne-grained randomization. The idea is to shuﬄe
the code to blind the attacker from seeing the code layout
in memory. The assumption behind this approach is that
without knowledge of the code layout, the attacker cannot
craft payloads. However, as demonstrated by Snow et al. in
2013, it is feasible and practical to scan for ROP gadgets at
runtime and construct a dynamic JIT attack payload [22].
The attack by Snow et al. undermines the use of ﬁne-grained
randomization as an mitigation against ROP attacks.
To counter this new threat, researchers have revived the
idea of execute-only memory (XOM) [24]. This approach in-
volves preventing programs from reading executable memory
using general purpose memory access instructions. One chal-
lenge in realizing these systems is that legacy binaries and
compilers often intersperse code and data (e.g. jump tables)
in executable memory pages. Thus, the wholesale blinding
of executable memory at page granularity is not an option.
To tackle this issue, researchers have used static compila-
tion techniques to separate code and data [5]. However, this
solution does not work well in the absence of source code,
for instance, when utilizing legacy binaries. In fact, sepa-
rating data from code has been shown to be provably un-
decidable [28]. Another complication in realizing the XOM
concept arises from web browsers’ use of JIT code where
data becomes dynamically generated code. This has been
shown to be a signiﬁcant attack surface for browsers [1, 29].
In this work, we propose a new concept to deal with mem-
ory disclosure attacks. Unlike XOM and XOM-inspired sys-
tems, which aim to completely prevent reads to executable
memory, a task beset with many practical diﬃculties, we
allow executable memory to be read, but make them un-
usable as code after being read. In essence, in our model,
as soon as the code is read using a general-purpose mem-
ory dereferencing instruction, the copy of code in memory is
garbled. Manipulating executable memory in this manner
allows legitimate code to execute without false-positives and
false-negatives, while servicing legitimate memory read op-
erations for data embedded in the code. We term our special
code read operations as destructive code reads.
We implement our new code read mechanism by leverag-
ing existing virtualization hardware support on commodity
processors. We term our system Heisenbyte 1.
1A tribute to renowned physicist, Werner Heisenberg, who
observed that the act of observing a system inevitably
changes its state in quantum mechanics.
Figure 1: TOP: Stages of a code reuse attack that constructs its payload on-the-ﬂy using executable memory
found with a memory disclosure bug. BOTTOM: Taxonomy of defenses grouped by their defense strategy.
Our experiments demonstrate that Heisenbyte can thwart
the use of memory disclosure attacks on executable memory,
both from static program binaries and dynamically gener-
ated JIT code on a production Windows 7 machine at a
modest average runtime overhead of 16.5% and 18.3% on
virtualized and non-virtualized systems respectively.
Our paper makes the following contributions:
1. We conceptualize a novel destructive code read primi-
tive that tolerates legitimate data reads in executable
memory while preventing the same data from being
used as code in a dynamic code reuse attack.
2. We implement Heisenbyte to realize this destructive
code read operation in practice on contemporary com-
modity systems.
3. We demonstrate its utility in preventing attacks that
use memory disclosure bugs on both static program
binaries and dynamic JIT code in close-sourced COTS
binaries.
The rest of the paper is organized as follows. We provide
a background on the threat model in § 2. We detail the
design of Heisenbyte in § 3. We describe the implementation
details and challenges in § 4. We evaluate our system in
§ 5, and discuss the security implications and limitations of
the system in § 6. We cover some related work in § 7, and
conclude in § 8.
2. BACKGROUND
In this section, we describe the steps of a typical dynamic
code reuse attack. Since the use of memory disclosure vul-
nerabilities is crucial in a dynamic code reuse attack (cf.
static code reuse attacks [21, 4]), we will focus on tech-
niques that aim to thwart executable memory disclosures.
We also cover the assumptions of the threat model and the
capabilities of the adversary.
2.1 Dynamic Code Reuse Attacks
In the top half of Figure 1, we show the stages of a typi-
cal code reuse attack, and the sub-steps within each stage.
Typical dynamic code reuse attacks comprise two stages,
namely 1 the search for usable code reuse gadgets in either
static code [22] or dynamic JIT code [1], and 2 building
the payload on-the-ﬂy and then redirecting execution to the
payload.
To gather code reuse gadgets for the dynamic exploit, an
adversary needs to ﬁrst uncover memory pages that are exe-
cutable. Note that a trivial linear scan of the memory cannot
be used as it is likely to trigger a page fault or access un-
mapped guard pages placed randomly in the address space.
Therefore, to craft a stable exploit, the adversary has to ﬁrst
gather pointers to the memory pages marked as executable.
These pointers can be direct branches into executable mem-
ory or indirect pointeres residing in data pages but pointing
to code memory.
With the list of the pointers to executable memory, the ad-
versary can then invoke a memory disclosure bug repeatedly
(without crashing the vulnerable program) to scan and dis-
assemble the memory pages looking for suitable code reuse
gadgets. The next step involves stringing the locations of
the gadgets together in an exploit payload, and ﬁnally redi-
recting execution to this payload using another control ﬂow
hijacking vulnerability.
2.2 Previous Works
The ﬁrst category of defenses focuses on protecting the
code pointers and preventing them from being disclosed,
stiﬂing the attack as earlier as possible. Oxymoron hides
the direct code pointers by generating randomized code that
does not have direct references to code pages [3]. However,
besides using direct references to code pages, adversaries can
use indirect code references that reside in stack and heap.
Readactor addresses this by masking the indirect code ref-
10101011010101101010101101100100Harvest pointers to executable memoryMemory Disclosure BugControl FlowHijackingDirectIndirectFine-grained ASLRMemory Space10101011010101101010101101100100Static Dynamic / JITScan & disassembleexecutable pagesXOR EAX,EAXRETMOV ECX,1RETSUB ECX,EBXRETConstruct on-the-ﬂycode reuse payloadCode Reuse Shellcode12Execute attackpayloadDEFENSESPrevent code pointers from being disclosed[5] Readactor (indirect)[3] Oxymoron+ (direct)Prevent executable memoryfrom being read/disclosed[5] Readactor #[2] XnR+[10] HideM+Prevent disclosed executable memory from being executed[6] Isomeron+# (randomize execution paths)[this work] Heisenbyte+# (destructive code reads)+ - protects close-sourced COTS binaries# - handles dynamic JIT codeFind usable code reuse gadgetsBuild payload and executeTypicaldynamic code reuse attackATTACKerences with executable trampolines that are protected by
hardware virtualization feature [5].
The next set of works introduces the concept of execute-
only memory implemented in software. This is designed to
prevent executable memory from being disclosed directly
through memory read operations, consequently removing
the adversary’s ability to scan and locate suitable code reuse
sequences for the attack. To achieve this, these works have
to separate legitimate data from executable sections of pro-
grams, and distinguish at runtime between code execution
and data read operations in executable memory.
XnR conﬁgures executable pages to be non-executable and
augments the page fault handler to mediate illegal reads into
code pages [2], but it is susceptible to disclosure attacks via
indirect code references. HideM leverages the spilt-TLB ar-
chitecture on AMD processors to transparently prevent code
from being read by memory dereferencing operations [10].
The use of split-TLB limits its ability to remove all data
from the executable sections, and inevitably exposes these
data remnants to being used in attacks. Readactor relies on
compiler-based techniques to separate legitimate data from
code in programs and uses hardware virtualization support
to enforce execute-only memory [5].
Unlike the previous defenses that protect the executable
memory from illegal memory reads, the third group of works
tolerates the disclosure of executable memory contents in at-
tacks. It shifts the focus of the defense strategy to preventing
any discovered gadgets from the earlier attack stages from
being used in later stages of attacks. Belonging to this class
of defenses, Isomeron probabilistically impedes the use of
the discovered gadgets by randomizing the control ﬂow at
runtime speciﬁcally for dynamically generated code [6].
Our work also falls into this third category of defenses.
While most works either enforce execute-only code memory
or hide important static code contents from adversaries, we
conceal the destructive changes made to executable mem-
ory (when it is read) from the adversaries. Heisenbyte al-
lows legitimate read operations to disclose the contents of
executable memory while keeping the randomized changes
made to the read memory hidden.
This allows us to transparently support existing COTS
binaries without the need to ensure all legitimate data and
code are separated cleanly and completely in the disassem-
bly. The heart of Heisenbyte lies on the assumption that
every byte in the executable memory can only be exclusively
used as code or data.
2.3 Assumptions
We assume a powerful adversary who can read (and write)
arbitrary memory within the address space of the vulnerable
program, and do so without crashing the program. On the
target system, we also make similar assumptions used in
related papers addressing the problem of memory disclosure
attacks. We assume that the target system is equipped with
the following protections:
• W⊕X: Memory pages cannot be both executable and
writable at the same time. This prevents direct over-
writing of existing code or injection of native code into
the vulnerable program. We assume that this also ap-
plies to JIT code generated by programs, i.e. dynam-
ically generated instructions cannot be executed on a
memory page that is writable.
Figure 2: A typical execution of a jmp instruction
using both code and data interleaved on the same
memory page.
• Load-time ﬁne-grained ASLR: All the static code
from programs and libraries are loaded at random loca-
tions upon each startup. Address Space Layout Ran-
domization (ASLR) reduces the predictability of the
code layout. Furthermore, we require code layouts to
be randomized at a ﬁne granularity so that the regis-
ters [18] used and instruction locations within a func-