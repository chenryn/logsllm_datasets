### Security and Integrity of Browser Miners

To ensure that browser miners do not compromise the integrity of the browser, including other miners, our technical discussion primarily addresses these concerns. 

### Security Policies

REPRIV supports a diverse set of extensions while maintaining control over sensitive information in the personal store. Extension authors can express their code's capabilities using a simple policy language. During installation, users are presented with a list of required capabilities and can choose to allow or disallow the installation.

Several policy predicates deal with information flow and provenance labels, which are (host, extensionID) pairs. All sensitive information used by miners is tagged with these labels, enabling policies to reason about information flows involving any (host, extensionID) pair. A selection of the available predicates in REPRIV’s policy language is shown in Figure 4.

The policy for a specific miner is interpreted as the conjunction of each predicate in the list. This is equivalent to behavioral whitelisting: unless a behavior is implied by the predicate conjunction, the miner does not have permission to exhibit it. Each miner is associated with a static security policy that remains active throughout its lifespan. Revocation is not supported by the extension framework, as it is not needed for current applications.

### Tracking Sensitive Information

When a miner requests information from the personal store, special precautions are taken to prevent misuse. Similarly, when a miner writes information to the store derived from user-viewed content, REPRIV ensures that the user's privacy preferences for web content are respected. All REPRIV functionality that returns sensitive information to miners first encapsulates it in a private data type, `tracked`, which includes metadata indicating the provenance of the information.

The `tracked` type is opaque, preventing miner code from directly referencing the data. Instead, it must use a REPRIV mechanism to prevent misuse. This ensures complete noninterference, as mandated by the miner’s policy. To perform computations on encapsulated information, the miner must call a special `bind` function, which takes a function-valued argument and returns a newly-encapsulated result. This scheme prevents the leakage of sensitive information, provided the function passed to `bind` does not cause side effects. We discuss the verification of this property below.

### Communication Protocols for Personal Information

**Figure 3: Communication protocols for personal information.**

- **(a) Top-n Interests:**
  - "The domain 'example.com' would like to learn your top-n interests. We will tell them your interests are: c1, c2, … Is this acceptable?"
  
- **(b) Interest Level by Category:**
  - "The domain 'example.com' would like to learn how interested you are in the topic 'catN'. We will tell them interest-level. Is this acceptable?"

### Example API Definitions

**Figure 5: Example API definitions.**

- **MakeRequest:**
  - The second argument, a string denoting the remote host, is refined with the formula `AllCanCommunicateXHR host p`, where `p` is the provenance label of the buffer to be transmitted. This ensures that a miner cannot call `MakeRequest` unless its policy includes a `CanCommunicateXHR` predicate for the host.
  - The third argument and the return value of `MakeRequest` are of the dependent type `tracked`. The `tracked` types are indexed by the type of the data and its provenance. The return value has a provenance label refined in the fifth argument, reflecting all principals that could affect the value returned by `MakeRequest`.

### Verifying Miners

REPRIV verifies miners against their stated properties statically using security types, eliminating the need for costly runtime checks and ensuring that security exceptions do not interrupt browsing sessions. Miners must be written in Fine, a security-typed programming language that allows programmers to express dependent types on function parameters and return values. Fine provides a language-level sandbox, so all useful functionality is available to miners only through a set of API functions. Verification occurs at each code point where an API function is invoked, checking the miner’s policy against the dependent type signature of the API function.

### Selected Security Policy Predicates

**Figure 4: Selected security policy predicates.**

- **CanCaptureEvents(t, (h, e))**: Extension can capture events of type `t` on elements tagged (h, e).
- **CanReadDOMElType(t, h)**: Extension can read DOM elements of type `t` from pages hosted by `h`.
- **CanReadDOMId(i, h)**: Extension can read DOM elements with ID `i` from pages hosted by `h`.
- **CanUpdateStore(d, (h, e))**: Extension can update the personal store with information tagged (h, e).
- **CanReadStore((h, e))**: Extension can read items in the personal store tagged (h, e).
- **CanCommunicateXHR(h1, (h2, e))**: Extension can communicate information tagged (h2, e) to host `h1` via XHR-style requests.
- **CanServeInformation(h1, (h2, e))**: Extension can serve programmatic requests to sites hosted by `h1`, containing information tagged (h2, e).
- **CanHandleSites(h)**: Extension can set load handlers on sites hosted by `h`.

### Miner Patterns and Their Policy Templates

**Figure 6: Miner patterns and their policy templates.**

- **Site-specific Parsing:**
  - Extensions that update the user’s interest profile based on specific web sites.
  - Required permissions: `CanCommunicateXHR(d)` or `CanReadDOM*(d, CanUpdateStore(, d))`, `CanHandleSites(d)` (optional), `CanCaptureEvents(, d)` (optional).

- **Category-specific Information:**
  - Extensions that return detailed information about the user’s interactions with specific types of sites.
  - Required permissions: `CanCommunicateXHR(d)` or `CanReadDOM*(d, CanUpdateStore(Tag(, d)))`, `CanHandleSites(d)` (optional), `CanCaptureEvents(, d)` (optional), `CanReadStore(Tag(, d))`, `CanServeInformation(p, Tag(, d))` for each domain `p` that can request category-specific information.

- **Web Service Relay:**
  - Extensions that act as intermediaries between the user’s personal information and web services.
  - Required permissions: `CanCommunicateXHR(a, t)`, `CanReadStore(t)`, `CanServeInformation(p, t)`, and `CanServeInformation(p, a)` for each domain `p` that can make requests.

### Miner Examples

**Figure 7: Miner characteristics.**

- **TwitterMiner:**
  - Uses the RESTful API from twitter.com to periodically check the user’s Twitter profile for updates.
  - Capabilities: `CanCommunicateXHR(twitter.com)` and `CanUpdateStore(, twitter.com)`.
  - Source code: Shown in Figure 8.

- **BingMiner:**
  - Classifies the user’s search terms.
  - Capabilities: Similar to TwitterMiner.

- **NetFlixMiner:**
  - Monitors the user’s interactions with netflix.com and adds information to the personal store.
  - Capabilities: `CanCommunicateXHR(netflix.com)`, `CanUpdateStore(Tag(, netflix.com))`, `CanReadStore(Tag(, netflix.com))`, `CanServeInformation(p, Tag(, netflix.com))`.

- **GlueMiner:**
  - Returns movies similar to those recently viewed by the user.
  - Capabilities: `CanCommunicateXHR(getglue.com)`, `CanReadStore(Tag(, netflix.com))`, `CanServeInformation(p, Tag(, getglue.com))`.

### Verification Philosophy

The policy associated with a miner is expressed at the top of its source file using Fine `assume` statements. Given the type refinements on all REPRIV APIs, verifying that the miner correctly implements its stated policy is reduced to an instance of Fine type checking. The soundness of this technique rests on three assumptions:

- The soundness of the Fine type system and the correctness of its implementation.
- The correctness of the dependent type refinements placed on the API functions.
- The correctness of the underlying browser’s implementation of functions provided by the REPRIV API.

These are modest requirements for the trusted computing base, pointing towards the overall soundness of REPRIV’s security properties.