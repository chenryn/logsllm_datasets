---
author: Fraser Tweedale
category: 软件开发
comments_data:
- date: '2017-09-15 19:03:19'
  message: 一直都不大懂
  postip: 118.247.6.64
  username: 二次元萌控森 [Sogou Explorer 2|Windows 10]
- date: '2017-09-16 01:26:08'
  message: "函数式编程是所有编程模式的总结，取消一切对象设计，一切简化成过程，然后将所有的过程粘接起来，其实回到了 C 的世界，只不过简化了函数的定义与使用，应该说是取消了函数声明，采用“边写边用”，每一个过程都是匿名引用或显引用，然后在不同的
    scope 域串接起来。\r\n\r\n这样的编程方式感觉上莫过于就是 JavaScript 的匿名（或命名） function 套匿名（或命名）
    function，然后链式、传递调用。\r\n\r\n这样的语言也是有缺陷的，很容易进 callback 坑，所以你看 Ocaml
    in 回车、然后继续 in 回车，写得像杨辉三角。\r\n\r\n其实 FP 可以认为是语言思想"
  postip: 220.113.126.32
  username: 来自北京的 Safari 10.1|Mac 10.12 用户
- date: '2017-09-16 01:27:15'
  message: "继续上文。。。\r\n\r\n其实 FP 可以认为是语言思想界里的【极简设计】，去掉 OO 臃肿的外壳，只留下它的目标精髓。但是过于骨感其实也不太好，所以我还是倾向于
    Swift / Go。"
  postip: 220.113.126.32
  username: 来自北京的 Safari 10.1|Mac 10.12 用户
- date: '2017-09-18 23:07:32'
  message: 没研究过这个编程语言，要是用java示例就好了
  postip: 220.249.72.210
  username: mistyos [Firefox 55.0|GNU/Linux]
- date: '2017-09-19 13:28:40'
  message: 很快我们会发一篇用 javascript 来介绍函数式编程的。
  postip: 61.186.31.157
  username: linux [Chrome 60.0|Mac 10.11]
count:
  commentnum: 5
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 6783
date: '2017-09-15 13:53:59'
editorchoice: false
excerpt: 我们来解释函数式编程的什么，它的优点是哪些，并且给出一些函数式编程的学习资源。
fromurl: https://opensource.com/article/17/4/introduction-functional-programming
id: 8869
islctt: true
largepic: /data/attachment/album/201709/15/135403erbbhprllibyy6lr.png
permalink: /article-8869-1.html
pic: /data/attachment/album/201709/15/135403erbbhprllibyy6lr.png.thumb.jpg
related:
- displayorder: 0
  raid: 8992
reviewer: ''
selector: ''
summary: 我们来解释函数式编程的什么，它的优点是哪些，并且给出一些函数式编程的学习资源。
tags:
- 函数式编程
- Haskell
thumb: false
title: 函数式编程简介
titlepic: true
translator: MonkeyDEcho
updated: '2017-09-15 13:53:59'
---
> 
> 我们来解释函数式编程的什么，它的优点是哪些，并且给出一些函数式编程的学习资源。
> 
> 
> 
![Introduction to functional programming ](/data/attachment/album/201709/15/135403erbbhprllibyy6lr.png " 函数式编程简介 ")
这要看您问的是谁，  函数式编程   functional programming （FP）要么是一种理念先进的、应该广泛传播的程序设计方法；要么是一种偏学术性的、实际用途不多的编程方式。在这篇文章中我将讲解函数式编程，探究其优点，并推荐学习函数式编程的资源。
### 语法入门
本文的代码示例使用的是 [Haskell](https://wiki.haskell.org/Introduction) 编程语言。在这篇文章中你只需要了解的基本函数语法：
```
even :: Int -> Bool
even = ...    -- 具体的实现放在这里
```
上述示例定义了含有一个参数的函数 `even` ，第一行是 *类型声明*，具体来说就是 `even` 函数接受一个 Int 类型的参数，返回一个 Bool 类型的值，其实现跟在后面，由一个或多个等式组成。在这里我们将忽略具体实现方法（名称和类型已经足够了）：
```
map :: (a -> b) -> [a] -> [b]
map = ...
```
这个示例，`map` 是一个有两个参数的函数：
1. `(a -> b)` ：将 `a` 转换成 `b` 的函数
2. `[a]`：一个 `a` 的列表，并返回一个 `b` 的列表。（LCTT 译注： 将函数作用到 `[a]` （List 序列对应于其它语言的数组）的每一个元素上，将每次所得结果放到另一个 `[b]` ，最后返回这个结果 `[b]`。）
同样我们不去关心要如何实现，我们只感兴趣它的定义类型。`a` 和 `b` 是任何一种的的  类型变量   type variable  。就像上一个示例中， `a` 是 `Int` 类型， `b` 是 `Bool` 类型:
```
map even [1,2,3]
```
这个是一个 Bool 类型的序列：
```
[False,True,False]
```
如果你看到你不理解的其他语法，不要惊慌；对语法的充分理解不是必要的。
### 函数式编程的误区
我们先来解释一下常见的误区：
* 函数式编程不是命令行编程或者面向对象编程的竞争对手或对立面，这并不是非此即彼的。
* 函数式编程不仅仅用在学术领域。这是真的，在函数式编程的历史中，如像 Haskell 和 OCaml 语言是最流行的研究语言。但是今天许多公司使用函数式编程来用于大型的系统、小型专业程序，以及种种不同场合。甚至还有一个[面向函数式编程的商业用户[33](http://cufp.org/)的年度会议；以前的那些程序让我们了解了函数式编程在工业中的用途，以及谁在使用它。
* 函数式编程与 [monad](https://www.haskell.org/tutorial/monads.html) 无关 ，也不是任何其他特殊的抽象。在这篇文章里面 monad 只是一个抽象的规定。有些是 monad，有些不是。
* 函数式编程不是特别难学的。某些语言可能与您已经知道的语法或求值语义不同，但这些差异是浅显的。函数式编程中有大量的概念，但其他语言也是如此。
### 什么是函数式编程?
核心是函数式编程是只使用*纯粹*的数学函数编程，函数的结果仅取决于参数，而没有副作用，就像 I/O 或者状态转换这样。程序是通过  组合函数   function composition  的方法构建的：
```
(.) :: (b -> c) -> (a -> b) -> (a -> c)
(g . f) x = g (f x)
```
这个 中缀   infix 函数 `(.)` 表示的是二个函数组合成一个，将 `g` 作用到 `f` 上。我们将在下一个示例中看到它的使用。作为比较，我们看看在 Python 中同样的函数：
```
def compose(g, f):
  return lambda x: g(f(x))
```
函数式编程的优点在于：由于函数是确定的、没有副作用的，所以可以用结果替换函数，这种替代等价于使用使  等式推理   equational reasoning  。每个程序员都有使用自己代码和别人代码的理由，而等式推理就是解决这样问题不错的工具。来看一个示例。等你遇到这个问题：
```
map even . map (+1)
```
这段代码是做什么的？可以简化吗？通过等式推理，可以通过一系列替换来分析代码：