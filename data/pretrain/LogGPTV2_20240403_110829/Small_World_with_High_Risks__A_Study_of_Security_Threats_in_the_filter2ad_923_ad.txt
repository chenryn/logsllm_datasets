secure, there needs to be a patch available for a given advi-
sory. In Figure 13 we show the evolution of the number of
unpatched security vulnerabilities in npm, as deﬁned in Sec-
tion 3. This trend is alarming, suggesting that two out of three
advisories are still unpatched, leaving the users at risk. When
manually inspecting some of the unpatched advisories we
notice that a large percentage of unpatched vulnerabilities are
actually advisories against malicious typosquatting packages
for which no ﬁx can be available.
To better understand the real impact of the unpatched vul-
nerabilities we analyze how much of the ecosystem they im-
pact, i.e., vulnerability reach as introduced in Section 3.2. To
that end, we compute the reach of unpatched packages at
every point in time in Figure 12. At a ﬁrst sight, this data
shows a much less grim picture than expected, suggesting
that the reach of vulnerable packages is dropping over time.
However, we notice that the effect of vulnerabilities tends
to be retroactive. That is, a vulnerability published in 2015
affects multiple versions of a package released prior to that
date, hence inﬂuencing the data points corresponding to the
years 2011-2014 in Figure 12. Therefore, the vulnerabilities
1004    28th USENIX Security Symposium
USENIX Association
Figure 15: Correlation between number of vulnerabilities and
number of dependencies.
that will be reported in the next couple of years may correct
for the downwards trend we see on the graph. Independent
of the downwards trend, the fact that for the majority of the
time the reach of vulnerable unpatched code is between 30%
and 40% is alarming.
Up to 40% of all packages rely on code known to be
vulnerable.
5 Potential Mitigations
The following section discusses ideas for mitigating some of
the security threats in the npm ecosystem. We here do not
provide fully developed solutions, but instead outline ideas
for future research, along with an initial assessment of their
potential and challenges involved in implementing them.
5.1 Raising Developer Awareness
One line of defense against the attacks described in this paper
is to make developers who use third-party packages more
aware of the risks entailed by depending on a particular pack-
age. Currently, npm shows for each package the number of
downloads, dependencies, dependents, and open issues in the
associated repository. However, the site does not show any
information about the transitive dependencies or about the
number of maintainers that may inﬂuence a package, i.e., our
ITP and ITM metrics. As initial evidence that including such
metrics indeed predicts the risk of security issues, Figure 15
shows the number of implicitly trusted packages versus the
number of vulnerabilities a package is affected by. We ﬁnd
that the two values are correlated (Pearson correlation coefﬁ-
cient of 0.495), which is not totally unexpected since adding
more dependencies increases the chance of depending on vul-
nerable code. Showing such information, e.g., the ITP metric,
could help developers make more informed decisions about
which third-party packages to rely on.
Figure 16: Decrease in average number of implicitly trusted
maintainers and packages as the set of trusted maintainers or
packages increases.
5.2 Warning about Vulnerable Packages
To warn developers about unpatched vulnerabilities in their de-
pendencies, the npm audit tool has been introduced. It com-
pares all directly depended upon packages against a database
of known vulnerabilities, and warns a developer when depend-
ing upon a vulnerable version of a package. While being a
valuable step forward, the tool currently suffers from at least
three limitations. First, it only considers direct dependencies
but ignores any vulnerabilities in transitive dependencies. Sec-
ond, the tool is limited to known vulnerabilities, and hence its
effectiveness depends on how fast advisories are published.
Finally, this defense is insufﬁcient against malware attacks.
5.3 Code Vetting
A proactive way of defending against both vulnerable and
malicious code is code vetting. Similar to other ecosystems,
such as mobile app stores, whenever a new release of a vetted
package is published, npm could analyze its code. If and only
if the analysis validates the new release, it is made available to
users. Since the vetting process may involve semi-automatic
or even manual steps, we believe that it is realistic to assume
that it will be deployed step by step in the ecosystem, starting
with the most popular packages. Figure 16 (orange curve)
illustrates the effect that such code vetting could have on
the ecosystem. The ﬁgure shows how the average number of
implicitly trusted packages, ITP, reduces with an increasing
number of vetted and therefore trusted packages. For exam-
ple, vetting the most dependent upon 1,500 packages would
reduce the ITP ten fold, and vetting 4,000 packages would
reduce it by a factor of 25.
An obvious question is how to implement such large-scale
code vetting, in particular, given that new versions of pack-
ages are released regularly. To estimate the cost of vetting new
releases, Figure 17 shows the average number of lines of code
USENIX Association
28th USENIX Security Symposium    1005
effect that such a process would have, we simulate how train-
ing and vetting a particular number of trusted maintainers in-
ﬂuences the average number of implicitly trusted maintainers,
ITM. The simulation assumes that the most inﬂuential main-
tainers are vetted ﬁrst, and that once a maintainer is vetted
she is ignored in the computation of the ITM. The results of
this simulation (Figure 16) show a similar effect as for vetting
packages: Because some maintainers are highly inﬂuential,
vetting a relatively small number of maintainers can signiﬁ-
cantly reduce security risks. For example, vetting around 140
maintainers cuts down the ITM in half, and vetting around
600 could even reduce ITM to less than ﬁve. These results
show that this mechanism scales reasonably well, but that hun-
dreds of maintainers need to be vetted to bring the average
number of implicitly trusted maintainers to a reasonable level.
Moreover, two-factor authentication has its own risks, e.g.,
when developers handle authentication tokens in an insecure
way14 or when attackers attempt to steal such tokens, as in
the eslint-scope incident.
6 Related Work
In this section we discuss the closest related work contained
mainly in two distinct research areas: JavaScript security and
software ecosystem studies. While some of this work studies
the npm ecosystem, to the best of our knowledge, we are
the ﬁrst to analyze in depth the role maintainers play in the
ecosystem and the impact of different types of attacks, as well
as the potential impact of vetting code.
Server-side JavaScript Security There are many studies
that investigate problems with dependency management for
the JavaScript or other ecosystems. Abdalkareem et al. [2] in-
vestigate reasons why developers would use trivial packages.
They ﬁnd that developers think that these packages are well
implemented and tested and that they increase productivity as
the developer does not need to implement such small features
herself. Another empirical study on micropackages by Kula
et al. [19] has similar results. They show that micropackages
have long dependency chains, something we also discovered
in some case studies of package reach. We also show that
these packages have a high potential of being a target of an
attack as they are dependent on by a lot of packages. Another
previously studied topic is breaking changes introduced by
dependencies. Bogart et al. [5] perform a case study inter-
viewing developers about breaking changes in three different
ecosystems. They ﬁnd that npm’s community values a fast ap-
proach to new releases compared to the other ecosystems. De-
velopers of npm are more willing to adopt breaking changes
to ﬁght technical debt. Furthermore, they ﬁnd that the seman-
tic versioning rules are enforced more overtime than in the
beginning. Similarly, Decan et al. [11] analyze three package
14https://blog.npmjs.org/post/182015409750/
automated-token-revocation-for-when-you
Figure 17: Number of lines of code that need to be vetted for
achieving a certain number of trusted packages.
that are changed per release of a package, and would need to
be vetted to maintain a speciﬁc number of trusted packages.
For example, vetting the changes made in a single new release
of the top 400 most popular packages requires to analyze over
100,000 changed lines of code. One way to scale code vet-
ting to this amount of code could be automated code analysis
tools. Recently, there have been several efforts for improving
the state of the art of security auditing for npm, both from
academia, e.g., Synode [30], BreakApp [32], NodeSec [16],
NoRegrets [25], Node.cure [10], and from industry practi-
tioners, e.g., Semmle11, r2c12, and DeepScan13. Orthogonal
to automated code analysis tools, the npm community could
establish crowd-sourced package vetting, e.g., in a hierarchi-
cally organized code distribution model similar to the Debian
ecosystem.
Another challenge for code vetting is that npm packages, in
contrast to apps in mobile app stores, are used across different
platforms with different security models. For example, XSS
vulnerabilities are relevant only when a package is used on the
client-side, whereas command injection via the exec API [30]
is a concern only on the server-side. A code vetting process
could address this challenge by assigned platform-speciﬁc
labels, e.g., “vetted for client-side” and ”vetted for server-
side”, depending on which potential problems the vetting
reveals.
5.4 Training and Vetting Maintainers
Another line of proactive defense could be to systematically
train and vet highly inﬂuential maintainers. For example, this
process could validate the identity of maintainers, support
maintainers in understanding basic security principles, and
ensure that their accounts are protected by state-of-the-art
techniques, such as two-factor authentication. To assess the
11https://semmle.com/
12https://r2c.dev/
13https://deepscan.io/
1006    28th USENIX Security Symposium
USENIX Association
ecosystems, including npm, and evaluate whether dependency
constraints and semantic versioning are effective measures
for avoiding breaking changes. They ﬁnd that both these mea-
sures are not perfect and that there is a need for better tooling.
One such tool can be the testing technique by Mezzetti et
al. [25] which automatically detects whether an update of a
package contains a breaking change in the API. With this
method, they can identify type-related breaking changes be-
tween two versions. They identify 26 breaking changes in 167
updates of important npm packages. Pfretzschner et al. [27]
describe four possible dependency-based attacks that exploit
weaknesses such as global variables or monkeypatching in
Node.js. They implement a detection of such attacks, but they
do not ﬁnd any real-world exploits. One way to mitigate these
attacks is implemented by Vasilakis et al. [32] in BreakApp, a
tool that creates automatic compartments for each dependency
to enforce security policies. This increases security when us-
ing untrusted third-party packages. Furthermore, third-party
packages can have security vulnerabilities that can impact
all the dependents. Davis et al. [9] and Staicu et al. [29] ﬁnd
denial of service vulnerabilities in regular expressions in the
npm ecosystem. In another study, Staicu et al. [30] ﬁnd sev-
eral injection vulnerabilities due to the child_process module
or the eval function. Brown et al. [6] discuss bugs in the
binding layers of both server-side and client-side JavaScript
platforms, while Wang et al. [33] analyze concurrency bugs
in Node.js Finally, Gong [16] presents a dynamic analysis
system for identifying vulnerable and malicious code in npm.
He reports more than 300 previously unknown vulnerabilities,
some of which are clearly visible on the ﬁgures in Section 4.3.
Furthermore, there are studies that look at how frequent se-
curity vulnerabilities are in the npm ecosystem, how fast
packages ﬁx these and how fast dependent packages upgrade
to a non-vulnerable version. Chatzidimitriou et al. [7] build
an infrastructure to measure the quality of the npm ecosystem
and to detect publicly disclosed vulnerabilities in package de-
pendencies. Decan et al. [13] perform a similar study but they
investigate the evolution of vulnerabilities over time. They
ﬁnd that more than half of the dependent packages are still af-
fected by a vulnerability after the ﬁx is released. However, we
show that the problem is even more serious because for more
than half of the npm packages there is no available patch.
Client-Side (JavaScript) Security Client-side security is a
vast and mature research area and it is out scope to extensively
survey it here. Instead, we focus on those studies that ana-
lyze dependencies in client-side code. Nikiforakis et al. [26]
present a study of remote inclusion of JavaScript libraries
in the most popular 10,000 websites. They show that an av-
erage website in their data set adds between 1.5 and 2 new
dependencies per year. Similar to our work, they then discuss
several threat models and attacks that can occur in this tightly
connected ecosystem. Lauinger et al. [20] study the inclusion
of libraries with known vulnerabilities in both popular and
average websites. They show that 37% of the websites in their
data set include at least one vulnerable library. This number
is suprisingly close to the reach we observe in npm for the
vulnerable code. However, one should take both these results
with a grain of salt since inclusion of vulnerable libraries does
not necessary lead to a security problem if the library is used
in a safe way. Libert et al. [22] perform a HTTP-level analysis
of third-party resource inclusions, i.e., dependencies. They
conclude that nine in ten websites leak data to third-parties
and that six in ten spwan third-party cookies.
Studies of Software Ecosystems Software ecosystem re-
search has been rapidly growing in the last year. Manikas [23]
surveys the related work and observes a maturing ﬁeld at the
intersection of multiple other research areas. Nevertheless,
he identiﬁes a set of challenges, for example, the problem
of generalizing speciﬁc ecosystem research to other ecosys-
tems or the lack of theories speciﬁc to software ecosystems.
Serebrenik et al. [28] perform a meta-analysis of the difﬁ-
cult tasks in software ecosystem research and identify six
types of challenges. For example, how to scale the analysis
to the massive amount of data, how to research the quality
and evolution of the ecosystem and how to dedicate more
attention to comparative studies. Mens [24] further looks at
the socio-technical view on software maintenance and evo-
lution. He argues that future research needs to study both
the technical and the social dimension of the ecosystem. Our
study follows this recommendation as it not only looks at the
inﬂuence of a package on the npm ecosystem, but also at the
inﬂuence of the maintainers. Several related work advocates
metrics borrowed from other ﬁelds. For example, Lertwit-