### Table 1: Assumptions and Key Characteristics of Well-Known Replication Strategies

| Fault Type | Tolerated Faults | Determinism | Resource Overhead | Communication Overhead | Recovery Overhead |
|------------|------------------|-------------|-------------------|------------------------|--------------------|
| Fail-silent servers | Crash faults | Not required | 1 active server | High (checkpoints) | - |
| Fail-silent servers | Crash faults | Not required | 2 active servers | Low (no checkpoints) | Low (switch) |
| Fail-uncontrolled | Value faults | Required | 3 active servers | Low (no checkpoints) | Medium (re-execute) |

### Table 2: Control and Observability Requirements for the Considered Replication Strategies

| Strategy | Communication | Execution | State | Entities | Actions | Motivation | Means |
|----------|---------------|-----------|-------|----------|---------|------------|-------|
| Passive replication | Requests/replies | Execution points | Internal data, platform data | Send/receive | Activation/progress/termination | Synchronization between replicas. Capture/restore ongoing requests in concurrent servers. Consistent state restoration, i.e., transparent recovery from the client's perspective. | Interception, platform instrumentation, memory dump, serialization, interactions journals |
| Semi-active replication | Same as passive | Same as passive + non-deterministic decision points | Same as passive + non-deterministic operations | Same as passive | Same as passive | Control over leader/follower notifications. Control over non-deterministic decisions. | Same as passive + control over platform interactions with non-deterministic results |
| Active replication | Same as passive | Same as passive | Same as passive | Same as passive | Same as passive | Reply validation & propagation | Same as passive |

### Table 3: Towards an Aggregate Meta-Model for Replication Strategies

| Reflective Features | Reification | Introspection | Behavioral Intercession | Structural Intercession |
|---------------------|-------------|---------------|-------------------------|-------------------------|
| Communication | Request reception, request sending, reply sending, reply reception, get request content, get reply content, do send, do receive | Piggyback data on message | - | - |
| Execution | Execution point start, execution point end, execution point reach, non-deterministic flow change, get execution point, create execution point, set execution point, force result of flow change | - | - | - |
| State | Non-deterministic platform call, get server state, get platform state, force result of platform call, set server state, set platform state | - | - | - |

### Section 3.3: Coordination and Consistency in Replication Strategies

The motivations for each reflective feature in Table 3 can be related to two different concerns in replication strategies: coordination of replicas and consistency control. The communication facet is the least intrusive and can be implemented using wrapping techniques. The execution and state facets, which deal with internal non-determinism and state information, are more intrusive. The key question is how this meta-model can be implemented on a real platform.

### Section 4: Introducing Multi-Layer Reflection

#### 4.1. The Black-Box Case

In this scenario, the fault-tolerance programmer has access only to the application level, with all underlying executive layers being black-boxes. This approach provides no control over the order in which requests are delivered to the application objects. If a thread-pool ORB with a pool size of two threads simultaneously receives three requests, only two out of the three requests will be non-deterministically delivered to the application (the third one being queued). This can lead to inconsistencies, such as problem PB1, where the ORB's internal message shuffling destroys any total order provided by an underlying atomic multicast protocol.

A possible solution is to serialize incoming requests at the communication level before they are delivered to the ORB, but this eliminates the benefits of the thread-pool mode.

#### 4.2. The Mono-Layer Reflection Case

In this case, the fault-tolerance programmer has access to the OS level, while the ORB remains a black-box. By controlling thread scheduling and synchronization, the programmer can ensure that requests are processed in the same order by all object replicas. This approach inhibits ORB message shuffling and solves problem PB1 under the assumption of a deterministic application. However, this approach is complex and not optimal, leading to problem PB2, where forcing threads to process requests in the same order introduces unnecessary constraints.

For example, consider two dispatchings of two successive requests (R1 and R2) on a pool containing two threads (T1 and T2). In Case 1, both requests are handled by T1. In Case 2, R1 is processed by T1, and R2 is processed by T2. The final states after both computation profiles are identical, but the lack of visibility and semantic understanding at the OS level makes it difficult for the programmer to conclude this. This leads to blind forcing of thread scheduling at both replicas, which is suboptimal in a complex multi-layer architecture.

### Figure 2: Request vs Thread Using a Thread Pool

**Case 1: T1 handles the two requests R1 and R2**
- **State Variable X**: X_after_R1_by_T1_init
- **Thread T1**: T1_after_R1
- **Request R2**: Y_after_R2_by_T1_after_R1

**Case 2: T1 handles R1, T2 handles R2**
- **State Variable X**: X_after_R1_by_T1_init
- **Thread T1**: T1_after_R1
- **State Variable Y**: Y_after_R2_by_T2_init
- **Thread T2**: T2_after_R2

In practice, one of these two computation profiles will be imposed on both the leader and follower, solving the non-determinism problem PB1 but at the expense of blind forcing of thread scheduling, leading to unacceptable overheads in a complex multi-layer architecture.