### General Description and Analysis

In the general case, we assume that \( m^* \parallel r^* \) was queried to the hash function \( H \). If this query is of type II, the simulator \( S \) aborts. Otherwise, \( H(m^* \parallel r^*) \) must have been a type I query. Let this be the \( j^* \)-th query. Then, we must have that:
\[ \sigma^* = (0 \parallel w^* \parallel r' \parallel \gamma^*)^d = (y \cdot (x_{j^*})^e)^d = y^d \cdot x_{j^*} \]
Thus, \( S \) can compute \( y^d = \frac{\sigma^*}{x_{j^*}} \), which is the solution to the given RSA problem. This completes the description of \( S \).

### Estimating the Success Probability of \( S \)

To estimate the success probability of \( S \), we define the following events:
- **Forge**: The event that the adversary \( A \) produces a valid forgery.
- **A1**: The event that \( S \) aborts due to \( k_0 \) values of \( y_i \) being sampled in a \( H \) or \( \text{Sign} \) query, all having the most significant bit set to 1 (i.e., \( b = 1 \)).
- **A2**: The event that \( S \) aborts due to \( w_i = w_j \) in a \( H \) or \( \text{Sign} \) query for some \( j < i \).
- **A3**: The event that \( S \) aborts due to a \( \text{Sign} \) query or the forgery corresponding to a wrong query type.

From the above, it follows that:
\[ \text{Adv}_{\text{RSAGen},S}^{\text{RSA}} = \Pr[\text{Forge} \land A1 \land A2 \land A3] \]
\[ \geq \Pr[\text{Forge} | A1 \land A2 \land A3] \cdot \Pr[A3] - \Pr[A1] - \Pr[A2] \]

We proceed by showing the following lemmas:

**Lemma 15.** 
\[ \Pr[\text{Forge} | A1 \land A2 \land A3] \geq \epsilon - (q_s + q_h) \cdot 2^{-k/2+2} \]

**Proof.**
The view of \( A \) in the simulation provided by \( S \) would have been identical to the view of \( A \) in the UF-RR-CMA game if the responses to the \( H \) and \( G \) queries (i.e., the \( h_i \) and \( g_i \) values) were uniformly distributed. In this case, \( A \) is guaranteed to produce a forgery with probability \( \epsilon \). We will now argue that the responses are statistically close to uniform.

Firstly, if the \( y_i \) values were sampled from \( \mathbb{Z}_{2^{k-1}} \), the \( h_i \) and \( g_i \) values would have been uniformly distributed. Secondly, in the simulation, the \( y_i \) values correspond to uniformly chosen elements of \( \mathbb{Z}_N^* \) less than \( N \), as the \( x_i \) values are sampled from \( \mathbb{Z}_N^* \), and the RSA function is a permutation over \( \mathbb{Z}_N^* \). Finally, due to Lemma 11 and the fact that \( S \) uses \( q_s + q_h \) samples, \( A \) will produce a forgery with probability at least \( \epsilon - (q_s + q_h) \cdot 2^{-k/2+2} \).

**Lemma 16.**
\[ \Pr[A1] \leq (q_s + q_h) \left( \frac{1}{2} + 2^{-k/2+2} \right)^{k_0} \]

**Proof.**
The \( y_i \) elements sampled by \( S \) are uniformly distributed in \( \mathbb{Z}_N^* \). Also, if the values were sampled from \( \mathbb{Z}_N \), the probability that the most significant bit is 1 would have been less than \( \frac{1}{2} \). However, the statistical difference between sampling from \( \mathbb{Z}_N \) and \( \mathbb{Z}_N^* \) is \( \frac{N - \phi(N)}{N} \leq 2^{-k/2+2} \). Thus, \( S \) aborts in a single query with probability at most \( \left( \frac{1}{2} + 2^{-k/2+2} \right)^{k_0} \). As there are \( q_s + q_h \) queries, the lemma follows.

**Lemma 17.**
\[ \Pr[A2] \leq (q_s + q_h)^2 (2^{-k_1} + 2^{-k/2+2}) \]

**Proof.**
Using similar observations as in Lemma 15, the statistical difference between sampling \( w_i \) uniformly and as done by \( S \) is at most \( 2^{-k/2+2} \). Hence, the chance that \( w_i \) collides with any of the previous values is at most \( (q_s + q_h)(2^{-k_1} + 2^{-k/2+2}) \). Considering all queries, we have \( \Pr[A2] \leq (q_s + q_h)^2 (2^{-k_1} + 2^{-k/2+2}) \).

**Lemma 18.**
\[ \Pr[A3] \approx \frac{1}{e \cdot q_s} \text{ for the optimal choice of } p \text{ and large values of } q_s, \text{ where } e \text{ is the base of the natural logarithm.} \]

**Proof.**
For \( S \) not to abort based on the type of query, all \( \text{Sign} \) queries must correspond to type II queries, and the forgery must correspond to a type I query. From the above description, this happens with probability \( p^{q_s} (1 - p) \). This expression is maximized for \( p = 1 - \frac{1}{q_s + 1} \). Inserting this value yields \( \Pr[A3] \approx \frac{1}{e \cdot q_s} \) for large values of \( q_s \).

Combining the above expressions for \( \text{Adv}_{\text{RSAGen},S}^{\text{RSA}} \) with the above lemmas yields the theorem.

### Tight Reduction for Unique Randomness Query Respecting Adversaries

By restricting the function class \( \Phi \) and the adversary, a tight reduction can be obtained. Specifically, we consider a function class \( \Phi \) that is continuously hard-to-compute, and an adversary that queries a new related randomness function \( \phi \) in each signature query. Such an adversary is referred to as a unique randomness query respecting adversary. This combination implies that the adversary cannot predict the randomness value used in a signature query, allowing us to obtain a tight proof, assuming the collision resistance and continuously hard-to-compute properties of \( \Phi \) are sufficiently strong.

**Theorem 3.**
Assume that \( \Phi \) is collision resistant and continuously hard-to-compute, and that the RSA problem is hard with respect to \( \text{RSAGen} \). Then PSS is UF-RR-CMA secure for all unique randomness query respecting adversaries, and the reduction to the RSA problem with respect to \( \text{RSAGen} \) is tight. Specifically, for all polynomial-time and unique randomness query respecting adversaries \( A \) against PSS, there exist algorithms \( B1 \) and \( B2 \) such that:
\[ \text{Adv}_{\text{PSS},A}^{\text{UF-RR-CMA}} (\lambda) \leq \text{Adv}_{\text{RSAGen},B1}^{\text{RSA}} (\lambda) + (q_s + q_h) \cdot 2^{-k/2+2} + (q_s + q_h) \cdot \left( \frac{1}{2} + 2^{-k/2+2} \right)^{k_0} + (q_s + q_h)^2 \cdot (2^{-k_1} + 2^{-k/2+2}) + q_s \cdot q_h \cdot \text{Adv}_{\Phi,B2}^{\text{CHTC}} (\lambda) + q_s^2 \cdot \text{CR}_{\Phi} (\lambda) \]

Note that for the reduction to be tight, the continuously hard-to-compute property and the collision resistance of \( \Phi \) need to be sufficiently strong, i.e., \( q_s \cdot q_h \cdot \text{Adv}_{\Phi,B2}^{\text{CHTC}} \) and \( q_s^2 \cdot \text{CR}_{\Phi} \) must be negligible in the security parameter. Due to space restrictions, the proof of the above theorem is not included here.

### Conclusion

In this paper, we provide a detailed analysis of the robustness of the RSA-OAEP encryption scheme and the RSA-PSS signature scheme against related randomness attacks. Specifically, we show that under the RSA and \( \Phi \)-hiding assumptions, RSA-OAEP encryption remains secure against related randomness attacks for function families \( (\Phi, \Psi) \) where \( \Phi \) is collision resistant and hard-to-compute with respect to \( \Psi \). This implies that RSA-OAEP is secure for a large class of related randomness attacks if the recipient is honest and remains secure even if malicious recipients are considered, as long as the randomness used for the honest recipient cannot be efficiently computed from the randomness used for the malicious recipients. However, since RSA-OAEP is randomness recovering, security is not guaranteed if highly correlated randomness is used for encryption for both malicious and honest recipients. Furthermore, we show that under the RSA assumption, the RSA-PSS signature scheme remains related randomness secure for any function family \( \Phi \), albeit with a non-tight security reduction, but if \( \Phi \) is additionally assumed to be continuously hard-to-compute and the attack is not capable of forcing the use of repeated randomness, a tight reduction is possible. Our results show that, compared to other widely available and standardized schemes, RSA-OAEP and RSA-PSS provide better protection when used in environments where (potentially maliciously caused) randomness failures might occur.

### References

[1] Abdalla, M., Bellare, M., and Rogaway, P. The Oracle Diffie-Hellman Assumptions and an Analysis of DHIES. In CT-RSA (2001), vol. 2020 of Lecture Notes in Computer Science, Springer, pp. 143–158.
[2] Bauer, A., Coron, J., Naccache, D., Tibouchi, M., and Vergnaud, D. On the broadcast and validity-checking security of PKCS#1 v1.5 encryption. In ACNS (2010), pp. 1–18.
[3] Bellare, M., Boldyreva, A., Kurosawa, K., and Staddon, J. Multirecipient Encryption Schemes: How to Save on Bandwidth and Computation Without Sacrificing Security. IEEE Trans. Information Theory 53, 11 (2007), 3927–3943.
[4] Bellare, M., Boldyreva, A., and O’Neill, A. Deterministic and Efficiently Searchable Encryption. In CRYPTO (2007), vol. 4622 of Lecture Notes in Computer Science, Springer, pp. 535–552.
[5] Bellare, M., Boldyreva, A., and Staddon, J. Randomness Re-use in Multi-recipient Encryption Schemes. In Public Key Cryptography - PKC 2003, 6th International Workshop on Theory and Practice in Public Key Cryptography, Miami, FL, USA, January 6-8, 2003, Proceedings (2003), Y. Desmedt, Ed., vol. 2567 of Lecture Notes in Computer Science, Springer, pp. 85–99.
[6] Bellare, M., Brakerski, Z., Naor, M., Ristenpart, T., Segev, G., Shacham, H., and Yilek, S. Hedged public-key encryption: How to protect against bad randomness. In ASIACRYPT (2009), pp. 232–249.
[7] Bellare, M., and Rogaway, P. Random Oracles are Practical: A Paradigm for Designing Efficient Protocols. In ACM CCS (1993), ACM, pp. 62–73.
[8] Bellare, M., and Rogaway, P. Optimal Asymmetric Encryption. In EUROCRYPT (1994), vol. 950 of Lecture Notes in Computer Science, Springer, pp. 92–111.
[9] Bellare, M., and Rogaway, P. The Exact Security of Digital Signatures - How to Sign with RSA and Rabin. In EUROCRYPT (1996), vol. 1070 of Lecture Notes in Computer Science, Springer, pp. 399–416.
[10] Bellare, M., and Tackmann, B. Nonce-based cryptography: Retaining security when randomness fails. In EUROCRYPT (2016), pp. 729–757.
[11] Bendel, M. Hackers describe PS3 security as epic fail, gain unrestricted access, 2011. http://www.exophase.com/20540/hackers-describe-ps3-security-as-epic-fail-gain-unrestricted-access/.
[12] Bernstein, D. J., Chang, Y.-A., Cheng, C.-M., Chou, L.-P., Heninger, N., Lange, T., and van Someren, N. Factoring RSA keys from certified smart cards: Coppersmith in the wild. Cryptology ePrint Archive, Report 2013/599, 2013. http://eprint.iacr.org/.
[13] Bitcoin.org. Android security vulnerability, 2013. http://bitcoin.org/en/alert/2013-08-11-android.
[14] Checkoway, S., Niederhagen, R., Everspaugh, A., Green, M., Lange, T., Ristenpart, T., Bernstein, D. J., Maskiewicz, J., Shacham, H., and Fredrikson, M. On the Practical Exploitability of Dual EC in TLS Implementations. In USENIX Security Symposium (2014), USENIX Association, pp. 319–335.
[15] Coron, J.-S. On the Exact Security of Full Domain Hash. In CRYPTO (2000), vol. 1880 of Lecture Notes in Computer Science, Springer, pp. 229–235.
[16] Coron, J.-S. Optimal Security Proofs for PSS and Other Signature Schemes. In EUROCRYPT (2002), vol. 2332 of Lecture Notes in Computer Science, Springer, pp. 272–287.
[17] Cramer, R., and Shoup, V. A Practical Public Key Cryptosystem Provably Secure Against Adaptive Chosen Ciphertext Attack. In CRYPTO (1998), vol. 1462 of Lecture Notes in Computer Science, Springer, pp. 13–25.
[31] Lenstra, A. K., Hughes, J. P., Augier, M., Bos, J. W., Kleinjung, T., and Wachter, C. Public keys. In CRYPTO (2012), pp. 626–642.
[32] Michaelis, K., Meyer, C., and Schwenk, J. Randomly Failed! The State of Randomness in Current Java Implementations. In CT-RSA (2013), pp. 129–144.
[33] National Institute of Standards and Technology (NIST). FIPS PUB 186-4: Digital signature standard (DSS), 2013. http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf.
[34] Paterson, K. G., Schuldt, J. C. N., and Sibborn, D. L. Related randomness attacks for public key encryption. In PKC (2014), pp. 465–482.
[18] Debian. Debian Security Advisory DSA-1571-1: OpenSSL – predictable random number generator, 2008. http://www.debian.org/security/2008/dsa-1571.
[35] Pinto, A., Poettering, B., and Schuldt, J. C. N. Multi-recipient encryption, revisited. In 9th ACM Symposium on Information, Computer and Communications Security, ASIA CCS ’14, Kyoto, Japan - June 03 - 06, 2014 (2014), S. Moriai, T. Jaeger, and K. Sakurai, Eds., ACM, pp. 229–238.
[36] Ristenpart, T., and Yilek, S. When Good Randomness Goes Bad: Virtual Machine Reset Vulnerabilities and Hedging Deployed Cryptography. In NDSS (2010).
[37] RSA Laboratories. PKCS#1 v2.2: RSA cryptography standard, 2012. http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/pkcs-rsa-cryptography-standard.htm.
[38] Schnorr, C.-P. Efficient Identification and Signatures for Smart Cards. In CRYPTO (1989), vol. 435 of Lecture Notes in Computer Science, Springer, pp. 239–252.
[39] Shoup, V. A proposal for an ISO standard for public key encryption. IACR Cryptology ePrint Archive, Report 2001/112 (2001). http://eprint.iacr.org/2001/112.
[40] Smith, A. D., and Zhang, Y. On the regularity of lossy RSA - improved bounds and applications to padding-based encryption. In TCC, Part I (2015), pp. 609–628.
[41] Yuen, T. H., Zhang, C., Chow, S. S. M., and Yiu, S. Related randomness attacks for public key cryptosystems. In ACM ASIACCS (2015), pp. 215–223.
[19] Dodis, Y., Pointcheval, D., Ruhault, S., Vergnaud, D., and Wichs, D. Security analysis of pseudo-random number generators with input: /dev/random is not robust. In ACM CCS (2013), ACM, pp. 647–658.
[20] Dorrendorf, L., Gutterman, Z., and Pinkas, B. Cryptanalysis of the random number generator of the Windows operating system. ACM Trans. Inf. Syst. Secur. 13, 1 (2009).
[21] Fujisaki, E., Okamoto, T., Pointcheval, D., and Stern, J. RSA-OAEP Is Secure under the RSA Assumption. In CRYPTO (2001), vol. 2139 of Lecture Notes in Computer Science, Springer, pp. 260–274.
[22] Fujisaki, E., Okamoto, T., Pointcheval, D., and Stern, J. RSA-OAEP Is Secure under the RSA Assumption. J. Cryptology 17, 2 (2004), 81–104.
[23] ElGamal, T. A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms. In CRYPTO (1984), vol. 196 of Lecture Notes in Computer Science, Springer, pp. 10–18.
[24] Gutterman, Z., and Malkhi, D. Hold Your Sessions: An Attack on Java Session-Id Generation. In CT-RSA (2005), pp. 44–57.
[25] Gutterman, Z., Pinkas, B., and Reinman, T. Analysis of the Linux Random Number Generator. In IEEE Symposium on Security and Privacy (2006), pp. 371–385.
[26] Heninger, N., Durumeric, Z., Wustrow, E., and Halderman, J. A. Mining your Ps and Qs: Detection of widespread weak keys in network devices. In USENIX Security Symposium (Aug. 2012).
[27] IEEE. IEEE p1363 – standard specifications for public-key cryptography. http://grouper.ieee.org/groups/1363/.
[28] IEEE. IEEE p1363a – standard specifications for public-key cryptography: Additional techniques. http://grouper.ieee.org/groups/1363/.
[29] ISO/IEC 18033-2. Information technology – security techniques – encryption algorithms – part 2: Asymmetric ciphers.
[30] Kamara, S., and Katz, J. How to encrypt with a malicious random number generator. In FSE (2008), pp. 303–315.