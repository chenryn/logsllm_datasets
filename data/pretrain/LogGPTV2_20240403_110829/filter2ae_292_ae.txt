    sub     rsp, 38h
    mov     rax, cs:__realloc_hook_ptr  #取出 __realloc_hook 指针
    mov     rax, [rax]
    test    rax, rax
    jnz     loc_848E8
    test    rsi, rsi
    jnz     short loc_846F5
    test    rdi, rdi
    jnz     loc_84960
代码中的 `push` 以及 `sub rsp, 38h` 都可用于对栈进行调整。
可以收先把 `__malloc_hook` 设置为 `0x6363636363636363`， 当程序断下来后， **查看栈的情况，然后选择跳转的位置**
。
最后把 `malloc_hook` 设置为选择好的位置，`realloc_hook` 设置为 `one_gadget`, 触发 `malloc`
### **可写 __free_hook**
#### 直接写one_gadget
#### 改成 system 函数的地址
然后 释放掉 内容为 `/bin/sh\x00` 的 `chunk`
### 可写 std* 结构体
`std*` 类结构体 定义是 `_IO_FILE_plus` ， `64` 为大小为 `0xe0`
#### 修改 vtable指针
##### libc  2.23
一般结合 `unsorted bin attack` ，改到 **libc.symbols['_IO_wstrn_jumps'] + 0x10
-0x18** ， 然后触发 `abort` 会调用 `_IO_OVERFLOW (fp, EOF)` 时就会调用 `IO_wstr_finish(fp,
EOF)` ，通过设置 `fp` 的数据，就可以 `system("/bin/sh")`.
> (: fp为文件结构体的指针
## Double Free
### 原理
程序把指针 `free` 之后没有对指针进行清空， 出现了 **悬垂指针** 。后续还可以对该指针进行 `free` 操作。
### 利用
**基于 pwnable.tw 中的 secretgard**
#### 信息泄露
总的思路 : **大块 拆成 小块**
  * 分配一个 `0x120` 的 `chunk`, `p1` 指向 它。 然后释放掉他
  * 分配两个 `0x90` 的 `chunk` 重用刚刚 `free` 掉的 `chunk`, 可以发现此时 `p1==p2`
  * 此时再次 `free(p1)`, 在 `p2->fd` 和 `p2->bk` 会写入 `main_arean` 的地址（`free` 之后大小大于 `fastbin`的范围，进入 `unsorted bin`)
  * 然后打印 `p2` 的内容就可以拿到 `libc` 的地址
#### Overlap chunk + unlink
总的思路 : **小块 融合成 大块**
  * 首先分配两个 `0x90` 的 `chunk (p0, p1)` ，然后释放掉，会进行合并，形成 一个 `0x120` 的 `unsorted bin`
  * 然后分配一个 `0x120` 的 `chunk (p2)` , 则 `p0=p2` ， 此时 `p0` 所在的 `chunk` 可以包含 `p1` 的 `chunk`
  * 然后在 `p0` 所在的 `chunk` 伪造一个 `free chunk`， 设置好 `fd` 和 `bk` , 然后释放 `p1` 触发 `unlink`
    add(0x80) # pz
    add(0x80) # p0
    add(0x80) # p1
    add(0x80) # px
    del(1)
    del(2)
    add(0x110) # p2
    payload = p64(0)       # p1's 用户区
    payload += p64(0x81)   # fake chunk size
    payload += p64(ptr - 0x18)  # fd, ptr--->p0 + header_size
    payload += p64(ptr - 0x10)  # bk
    payload += 'a' * (0x80 - len(payload))
    payload += p64(0x80)  # pre_size ----- 下一个 chunk p1
    payload += p64(0x80)  # size 设置 pre_inused=0
    payload += 'b' * 0x70
    payload += p64(0x80)
    payload += p64(0x21)  # size 设置 pre_inused=1 ---- p1-->next_chunk, 绕过 double free 检查
    edit(2,payload)   # fake chunk
    # p1 所在 chunk->pre_inused=0, 向前合并
    # 触发 fake chunk 的 unlink
    # ptr--->p0 + header_size, 实现 *ptr = ptr-0x18
    del(1)
#### 修改 __malloc_hook
一般 `malloc`触发的方式，`one_gadgets` 由于限制条件不满足，很可能会失败
可以使用 `malloc_printerr` 触发， 此时恰好 **[esp+0x50]=0**
**__malloc_hook - 0x23 + 0x8** 的 内容为 **0x000000000000007f** ， 可以用来绕过 `fastbin`
分配的检查  
可以 `gdb + hexdump` 找到类似的位置来伪造 `fastbin`
##### Overlap Chunk + Fastbin Attack
总的思路 : **小块 融合成 大块， 分配大块操纵小块**
  * 首先分配两个 `0x90` 大小 的 `chunk (p0, p1)`
  * 释放掉它们，合并成一个 `0x120` 的 `unsorted bin`
  * 分配 `0x120` 的 `chunk (p3)` , **p3==p1** , 而且此时通过 `p3` 可以修改 **p2 的 chunk** ， **Overlap Chunk完成**
  * 修改 `p->size = 0x71` **p = p2-0x10** ， `p`为 `p2` 所在 **chunk的地址**
  * 修改 **p + 0x70** 为 **p64(0x70) + p64(0x41)** , 设置 **pre_inused =1** , 使得后面 **free(p2)** 绕过`double free`检测
  * 此时 `free(p2)` , `p2` 进入 `0x70` 大小的 `fastbin`
  * 再次 `free(p1)`（此时 `p1` 所在 `chunk` 的 `size` 为 `0x120`)， 得到一个 `0x120` 的 `unsorted bin`
  * 再次分配 `0x120` 的 `chunk (p4)` , **p4==p1**
  * 通过 `p4` 可以修改 `p2` 指向的 `chunk` 的 `fd` 为 `__malloc_hook - 0x23` (此时 `p2` 的 `chunk` 已经在 `0x70` 的 `fastbin` 里面)
  * **Fastbin Attack** 开始，分配两次，可以得到 **p6 = __malloc_hook -0x13**
  * 然后修改 **__malloc_hook**
##### Overlap chunk + fastbin attack + 修改 top chunk
  * 首先通过上面的 `Overlap chunk` 我们可以修改 `p2` 的 `chunk` 的内容
  * 修改 chunk->size = 0x41 , **注意设置 好 chunk- >nextchunk 的 pre_inused 位 避免过不了 double free 检查**
  * `free(p2)` , 此时 `p2` 的 `chunk` 进入 `0x40` 的 `fastbin`
  * `free(p3)` ，`malloc(0x110)` , 可以再次修改 `p2 chunk` , 修改 **chunk- >size = 0x41 and chunk->fd = 0x71**
  * `malloc(0x30)` ，此时 **main_arean- >fastbinY 中会有一项 的 值 为 p64(0x71)**
  * 再次 `free(p3)`， `malloc(0x110)`，修改 **p2 chunk, chunk- >size = 0x71**
  * `free(p2)` , 此时 `p2` 的 `chunk` 进入 `0x70` 的 `fastbin`
  * `free(p3)`， `malloc(0x110)`，修改 `p2 chunk`, 设置 **chunk- >size = 0x71 and chunk->fd = 0x40 fastbinY 的地址附近**
  * 分配两次 `0x70` 的 `chunk`, 可以修改 **main_arean- >top 为 __malloc_hook -0x10 (这里存的指针，值很大)**
  * 然后使用 `top chunk` 进行分配， 就可以拿到 `__malloc_hook`
##### Fastbin dup+ Fastbin Attack
在把释放的块放进`fastbin` 时，会检测也 **只检测** 当前 **free 的 chunk 和 fastbin 第一项** 是否相同 ，
如果相同则报 `double free` 的错误。
  * 首先 分配 `2` 个 `0x70` 的 `chunk , p0, p1`
  * 释放 `p0`, `p0` 进入 `0x70` 大小的 `fastbin`, 此时 `p0` 为第一项
  * 释放 `p1`, `p1` 进入 `0x70` 大小的 `fastbin`, 此时 `p1`为第一项， **p1- >fd = p0**
  * 再次释放 `p0`, 此时 `p1`为 `fastbin` 的 第一项， **不会报错** ，`p0` 进入 `fastbin`, 此时 `p0` 为第一项
  * 分配 `0x70` 的 `chunk p2`, **p2==p0** , 设置 **p2- >fd = __malloc_hook - 0x23**， **其实就是修改 p0- >fd**
  * 此时 **__malloc_hook - 0x23** 成为 **0x70 fastbin** 的第 **3** 项
  * 分配三个 **0x70** 的 **chunk p3, p4, p5** ， **p5==__malloc_hook - 0x13**
  * 通过 `p5` 修改 `__malloc_hook`
#### 修改 __free_hook
因为 `free_hook` 上方很大一块空间都是 `\x00`, 所以使用 `fastbin attack` 直接来修改它基本不可能，可以迂回一下，在
`free_hook-0xb58` 位置会存一些指针，我们通过 `fastbin attack` 修改 `main_arean->top`, 到这里然后多用
`top_chunk` 分配几次，就可以分配到 `free_hook`, 然后该 `free_hook` 为 `system` 。
##### Fastbin dup + Fastbin Attack 修改 main_arean->top
  * 首先利用 `Fastbin dup` 我们可以拿到实现修改 `fastbin` 中的块的 `fd`
  * 由于在 `fastbin` 中 如果为空，其在 `main_arean->fastbinY` 里面对应的值为 `0x0` , 而堆的地址基本 是 `0x5x` 开头的（其在内存就是 `xx xx..... 5x`)， 此时如果在 `main_arean->fastbinY` 的 相邻项为 `0x0` , 就会出现 `5x 00 00 00...` , 所以就可以出现 `0x000000000000005x` ，可以把它作为 `fastbin` 的 `size` 进行 `fastbin attack` ， **不过作为 fastbin attack 的 size 不能 为 0x55**
  * 然后我们就可以修改 `main_arean->top` 为 `free_hook-0xb58`
  * 之后多分配几次， 既可以分配到 `free_hook`
  * 改 `free_hook` 为 `system`
  * `free` 掉一个 内容为 `/bin/sh\x00` 的块
#### 修改 _IO_FILE_plus 结构体 的 vtable
在 `libc 2.24` 以下可修改 `_IO_FILE_plus` 的 `vtable` 指针到我们可控的位置，进行虚表的伪造。
**参考**  
[Pwnable.tw secretgard](http://tacxingxing.com/2018/02/20/pwnabletw-secretgarden/)
## off by one
### 原理
在一些情况下我们可以往指定的 `buf` 中多写入 `1` 个字节的数据 ，这就是 `off by one` . 这种情况下可以进行利用的原因在于 调用
`malloc` 分配内存是要 对齐的， **64 位 0x10 字节对齐， 32 位 8 字节对齐** ，下面均以64位进行说明。 **如果
malloc(0x28) 则会分配`0x30` 字节的 chunk, 除去 0x10 的首部， 我们有 0x20 然后加上下一个 chunk 的
pre_size ，我们就有 0x28 了**， 我们知道 `pre_size` 后面紧跟着就是 `size` ，所以利用 `off by one` 可以
修改 下一个 `chunk` 的 `size` 字段，同时 在 **glibc 中的内存管理 非常依赖这个 size 字段**
，所以我们可以利用它做一些有趣的事情。
所以 **当程序中有类似这种不对齐的分配， 就要小心 off by one**
### 利用
#### 普通off by one
在这种情况下，溢出的那个字节不受限制，此时的利用思路就是，多分配几个 `chunk` ，然后利用第一个来溢出修改第二个 `chunk` 的 `size`（
**改大** ）, 然后 `free(chunk_2)` , 就可以 `overlap chunk 3`, 要非常注意 in_used 位的设置
##### 溢出 used 状态的 chunk
在 `free` 时可以获得包含 `chunk` 的 `unsorted bin`
##### **溢出 free 状态的 chunk**
因为`malloc` 再分配内存时 不会校验 `unsorted bin` 的 `size` 是否被修改
[Glibc_Adventures-The_Forgotten_Chunks](http://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf)
**基于 0ctf 2018 babyheap**
##### 信息泄露
  * 首先malloc 4 个 chunk, malloc(0x18)
    allocate(0x18)  # 0, 0x20 chunk
    allocate(0x38)  # 1, 0x40 chunk----> 溢出修改为 0x91
    allocate(0x48)  # 2, 0x50 chunk
    allocate(0x18)  # 3, 0x20 chunk
  * 然后在 **chunk 0 溢出一个字节，修改 chunk 1 的 size 位 为 0x91 (原来应该为 0x41)** ，这样一来 通过 `chunk 1` 索引到的 下一个 `chunk` 就是 **p + 0x90 = chunk 3** (设`p` 为 `chunk 1`的地址)
  * 此时 释放 `chunk 1`, `libc`会根据下一个 `chunk` ( **这里也就是 chunk3** ) 的 `pre_inused` 位来检查是否`double free`, 由于 `chunk2` 原来并没有被释放，所以 `pre_inused =1` ，于是可以过掉检查， 此时得到一个 `0x90` 的 `unsorted bin` , 同时 `chunk2` 在 这个 `unsorted bin`里面， **overlap chunk 2**
  * 此时再次 `malloc(0x38)` ， 会使用 `unsorted bin` 进行 **切割** ， 所以 在 `chunk 2` 的 **fd, bk 处会写入 main_arean 的 地址** ， 打印 `chunk 2` 的内容就可以 `leak libc`
##### 漏洞利用
其实可以 `overlap chunk` 了，就相当于获得了 `堆溢出` 的能力，我们可以任意修改 `chunk` 的数据，此时可以使用 `unlink`,
`unsorted bin attack`, `fastbin attack`。 没有限制内存分配的大小，使用 `fastbin attack` 即可
###### unlink
这种情况下的 `unlink` 应该比较简单，在当前 `chunk` 伪造好 `fd, bk` 然后利用 `off by one` 修改 下一个
`chunk` 的 `pre_size` (由于不对齐的分配，这个区域其实属于当前 chunk ) 和 `size`的 `pre_inused` 为
`0`， 然后 `free` 掉下面那个 `chunk` ，就可以触发 `unlink` 了
#### off by null
在这种情况下，我们只能溢出 `\x00` 字节， 所以会把 `size` 变小 同时 `inused` 位 会被设置为 `0`
##### unlink
`B + 0x100` 处要设置好 `p64(xxx) + p64(0x41)` 关键是 **pre_inused** 位 ， `free`
的时候会检测这个位
##### shrink free chunk size
###### 布局过程
  * 首先分配 `3` 个 `chunk (A B D)` , 大小分别为 `0x110 , 0x210, 0x110`
  * 然后 释放 `B` ， 此时 **D- >pre_inused = 0 and D->pre_size = 0x210**
  * 修改 `B+0x200` 处 为 `p64(0x200)` ，绕过新版 libc 的 **chunksize(P) != prev_size (next_chunk(P))** 检查 
  * 然后分配两个 `chunk (P, K)`, 大小为 `0x110, 0x90`
  * 释放掉 `P` , 此时 `P` 会进入 `unsorted bin` , **fd, bk 是有效的** **， 原因是 后面合并 D 时需要 unlink**
  * 释放 `D` , 发现 `D->pre_inused=0`, 说明前一个 `chunk` 已经 `free`, 需要合并。 根据 `pre_size` 找到 `P` , 然后 `unlink(P)` 合并得到一个 `0x330` 的 `unsorted bin`， 此时 `K` 位于 `unsorted bin` 内部， **overlap chunk done**
###### 布局过程中的一些 tips
  * 在第三步 ，释放 B 之前把 `B+0x200` 处 设置 `p64(0x200)` ， 因为新版的 `libc` 会检验 `chunksize(P) != prev_size (next_chunk(P))`
  * `off by null` 缩小 `B` 以后，分配 `P` 其大小不能再 `fastbin` 的范围内，后面释放 `D` 需要向前合并，会进行 `unlink` 操作，所以大小 大于 `fastbin` ， `free(P)`后 `P` 会进入 `unsorted bin` ，此时他的 `fd` , `bk` 都是正常的，正常 `unlink` 。
​
**参考**  
[how2heap](https://github.com/shellphish/how2heap)
##### 修改 pre_inused + 向前合并
###### **方案一**
  * 首先分配 `4` 个 `chunk (A B C D)` , 大小分别为 `0x100, 0x100, 0x100, 0x80`. 最后那个用于防止 `top_chunk` 合并
  * 然后释放 `A` , 此时 `A` 进入 `unsorted bin` , 生成了有效的 `FD` 和 `BK`，为了 **可以在后面的融合中成功 unlink**
  * 然后利用 `off by null` , **设置 C 的 pre_size 和 pre_inused** 。
  * 释放 `C` , 系统 根据 **C 的 pre_size 找到 A 进行合并** ，首先 `unlink(A)` 因为 `A` 已经在 `unsorted bin`，不会出错，然后就会有一个 `0x300` 的 `unsorted bin` , 此时 `B` 位于 该 `unsorted bin` 的 中间
###### 方案二
如果程序限制只能在触发 `off by null` 之后才能 释放 `A` ，需要在 `A` 和 `B` 之间多分配一个内存块 **x（0x20)** ,
原因是 触发 `off by null` 后 `B` 被标识 **已经 free** , 那么此时再 释放 `A` 就会对 `B` 进行 `unlink`
，此时 `B` 中 `fd` 和 `bk` 是过不了 检查的（ **B已经分配，并已经被用来进行 off by null** ) 。
**参考**  
[Libc堆管理机制及漏洞利用技术](http://www.freebuf.com/articles/system/91527.html)
## 总结
对于堆相关的漏洞，不论是 堆溢出，double free, off by one ，uaf 等其最终目的都是为了修改 `chunk` 的一些管理结构 比如
`fd,bk`, 然后在后续的堆管理程序处理中实现我们的目的（代码执行）。
**堆溢出**
直接可以修改 下一个 `chunk` 的 元数据 ，然后就是 `unsorteb bin attack` , `fastbin attack` 等攻击手法了
**double free**
利用一些内存布局，可以实现 `overlap chunk` ,最后也是实现了 可以修改 `chunk` 的元数据
**off by one**
类似于 `double free` ，实现 `overlap chunk` 然后改 `chunk` 元数据