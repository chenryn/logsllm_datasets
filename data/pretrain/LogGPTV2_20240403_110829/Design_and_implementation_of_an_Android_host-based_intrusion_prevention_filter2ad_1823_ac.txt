android.location
.ILocationManager
. . .
4
5
. . .
1
2
28
. . .
1
5
. . .
sendData
sendText
. . .
dail
call
getCellLocation
. . .
requestLocationUpdates
getLastLocation
. . .
TD: Transaction Descriptor, TC: Transaction Code
Figure 8: Alert of intrusive transaction (sendText).
Patronus uses two procedures to ensure the system se-
curity. The ﬁrst is on the client side. Before the intrusive
transaction goes through the Java layer and the native layer,
Patronus will ﬁrst inspect the transaction and check if there
is any permission aﬃliated with this transaction. If there is
no pre-deﬁned policy, Patronus will pop up a window as an
alert. The alert contains the transaction type, calling app
of the transaction and transaction content (e.g., destination
number and content of the SMS message) if needed. If the
user allows this transaction, this transaction will proceed to
the server side. The Patronus Service will not perform the
second inspection. If the server ﬁnds that the transaction
was not checked by the injected ﬁles on the client side, this
implies that the app attempts to bypass the system or uses
the native code. Then Patronus Service will perform policy
enforcement to ensure the security of the transaction.
In Section 3.4, we illustrated several methods to bypass
some existing HIPS. Patronus can easily detect and defend
against these type of attacks. Firstly, if the malware at-
tempts to bypass the transaction inspection on the Java
layer, the system will perform the second inspection on the
server side. Since the second veriﬁcation is on the server
side, the malware cannot bypass this step due to the pro-
cess isolation feature in Android. Secondly, the Patronus
policy database is also an important component of the sys-
tem. The policy database can be read by any app but only
Patronus has the write permission to the database. This
mechanism guarantees that the policy database will not be
compromised or contaminated by malware. Hence, Patronus
provides a secured and complete intrusion prevention func-
tionality. Consider the same mobile app (the one we dis-
cussed in Section 3.4) which bypassed the detection of a
commercial HIPS product. When we execute this app on a
mobile phone with Patronus, our system can intercept the
intrusive transaction and the alert will popup, as shown in
Figure 8.
4.4 Dynamic Detection
Besides intrusion prevention, Patronus can detect mal-
ware at runtime and block malicious behaviors before the
malware infects the system. By using the runtime infor-
mation to detect malware, Patronus can determine malware
accurately and defend against obfuscation eﬀectively. The
dynamic detection consists of two steps: (1) malware trans-
action forensics and (2) two-phase dynamic detection.
4.4.1 Malware Transaction Forensics
Malware transaction forensics is a procedure to trigger the
malicious behaviors and to collect the runtime transaction
information. This can help the system to conduct dynamic
detection.
It includes two steps: malware triggering and
malware transaction tagging.
Once the app is determined to be a potential malware
(using existing static and dynamic analysis), the analysts
can execute the malware on a test phone with the Patronus
system. The analysts can manually trigger the malicious
behaviors, and the system will record the transaction infor-
mation (i.e., transaction descriptor and transaction code).
If the transaction is an intrusive transaction, Patronus also
records the content of the transaction parcel.
After collecting the transactions, the analysts can tag
the malicious transactions in the set of suspicious intru-
sive transactions. The malicious transactions are used to
invoke malicious behaviors by malware, such as sending pre-
mium SMS message, tracking location information and steal-
ing contact information. Because the contents of transac-
tions are evidence of malicious behaviors, these will be used
to determine the type of malware we are analyzing. We
want to emphasize that malware transaction tagging will not
add more workload for analysts since we only tag malicious
transactions and the system already ﬁltered many other le-
gitimate transactions.
In our experiments, the number of
intrusive transactions for a malware is less than ﬁve and
most of them are tagged as malicious transactions. Let us
now deﬁne transaction footprint, which we use for malware
detection.
Deﬁnition 1. A transaction footprint is a set of transac-
tion information tuples S = {T1, T2, . . . , Tn} over runtime
transactions where:
• The index represents the unique id of the combination
• The transaction information tuple Ti = (Ni, Fi, Ci),
where Ni is the number of invocations of transaction i,
Fi is the boolean ﬂag tagging the malicious transaction
i, Ci represents the content of the transaction parcel.
of transaction descriptor and code.
We can use the transaction footprint for dynamic detec-
tion. Firstly, it describes the runtime behaviors of a group of
similar malware. Secondly, it also contains evidence of ma-
licious transactions. Due to these two factors, we propose
a two-phase dynamic detection method to eﬀectively detect
the malware on an Android mobile phone at runtime.
4.4.2 Two-phase Dynamic Detection
The dynamic detection contains two phases: correlation
detection and transaction footprint comparison. Because
only the intrusive transactions can initiate malicious behav-
iors. For eﬃciency, the detection will be triggered when the
system encounters an intrusive transaction. The system will
use the transaction footprint collected at runtime and the
malware footprint to detect the malware.
Phase one. Deﬁne V as the transaction vector over a trans-
action footprint S where V = [v1, v2, . . . , vn], (vi = Ni). In
phase one, we collect Vruntime which is a transaction vec-
tor over the transaction footprint for the runtime app. Let
Vmalware be the transaction vector over the transaction foot-
print in malware transaction forensics. In Patronus, we use
the Pearson correlation as the similarity score r so as to de-
(cid:80)n
termine the correlation between the app and our malware
samples. Formally, the similarity score r is:
i=1(Xi − ¯X)(Yi − ¯Y )
i=1(Xi − ¯X)2
i=1(Yi − ¯Y )2
where X = Vruntime, Y = Vmalware
(cid:113)(cid:80)n
(cid:113)(cid:80)n
r =
.
(1)
Because transactions of an app represent the behaviors
when interacting with other apps, the higher r implies that
the known malware in our database and the mobile app
under testing are very similar. The system will calculate r
with the transaction footprint in the malware database.
Phase two.
If there is any r higher than a pre-deﬁned
threshold (the threshold we use in our experiment was set
as 0.9), we treat the detected app as a suspicious app. For
the suspicious app, we conduct the phase-two detection to
ensure the accuracy of our detection. In phase two, Patronus
will use the content of malicious transactions [C1, C2, . . . , Ci],
(Fi = true) in the transaction footprint S to perform further
veriﬁcation. The system will compare the decisive ﬁelds in
the content of each intrusive transaction from the suspicious
app with the selected footprints. The decisive ﬁelds are val-
ues indicating the malicious behaviors. In general, the con-
tent of a transaction contains several ﬁelds, the semantics of
the ﬁelds for each transaction can be diﬀerent. For example,
sendText transaction has four ﬁelds which indicate the des-
tination address, source address, text and intent ﬂag. The
decisive ﬁelds for a malicious transaction are values which
determine the malicious properties. For example, the desti-
nation ﬁeld (number of premium SMS service) is the decisive
ﬁeld of a malicious sendText transaction.
By using the above two-phase detection, Patronus can de-
tect malware based on the runtime information eﬀectively
and prevent the malware before it infects the system or steal
users’ privacy. Since the transaction information we obtain
have more semantic information than the low-level system
calls using the ptrace-based dynamic analysis system, this
makes Patronus achieving a much higher accuracy in de-
tecting intrusive apps. Furthermore, because one transac-
tion procedure usually only contains tens of system calls, the
performance overhead of transaction-based detection will be
less than system-call-based detection. Moreover, traditional
static analysis systems have to scan the apps oﬄine, while
Patronus can perform detection online.
5. LARGE SCALE EVALUATION
In this section, we analyze the capabilities of intrusion
prevention and dynamic detection on large number of mobile
apps. We also evaluate the performance overhead and power
consumption introduced by Patronus.
5.1 Capability Evaluation
We downloaded the top 500 legitimate mobile apps from
Google Play and use them as the base for our evaluation
database. In addition, we also collected three malware fam-
ilies from [2] and [11] including 213 BaseBridge samples, 9
FakeAV samples and 15 MobileTx samples. We also deﬁne an
intrusive transaction list (https://www.cse.cuhk.edu.hk/
~mssun/pub/intrusive_transaction_list.pdf) including 49
Table 2: Top 10 Intrusive Transactions
Transaction Name
Total #
CALL_TRANSACTION
REGISTER_RECEIVER_TRANSACTION
START_ACTIVITY_TRANSACTION
TRANSACTION_getDeviceId
GET_CONTENT_PROVIDER_TRANSACTION
QUERY_TRANSACTION
TRANSACTION_getSubscriberId
TRANSACTION_requestLocationUpdates
INSERT_TRANSACTION
TRANSACTION_getCallState
3,508
2,960
1,734
1,732
1,400
1,303
333
228
139
90
Service
Table 3: Transaction Statistics
Top 500 BaseBridge FakeAV MobileTx
PackageManager
Telephony
TelephonyRegistry
ContentProvider
LocationManager
ActivityManager
AudioService
Sms
PhoneSubInfo
NotiﬁcationManager
PhoneStateListener
0
90
52
4,996
228
6,156
9,781
0
2,208
639
0
0
0
1
131
7
295
1,453
0
622
336
0
0
0
0
0
0
0
37
0
0
161
0
0
0
17
0
25
98
40
49
0
0
0
Total transaction
Intrusive transaction
Percentage
724,185
24,150
3.33%
548
66,229
2,845
198
4.30% 3.61%
3,920
229
5.84%
transactions within eleven services.
To evaluate Patronus, we automatically install the top
500 legitimate apps and malware samples into Android de-
vice (Nexus 5) with Patronus installed. Then we use monkey
tool [12] to generate 500 pseudo-random user events such
as clicks, touches, gestures or system-level events, into the
device to trigger various behaviors. Patronus will record the
transactions which are in the intrusive transaction list. Ta-
ble 2 shows the top ten intrusive transactions and their total
numbers recorded in our evaluation. Most of these trans-
actions are dangerous and related with privacy operation.
For example, CALL_TRANSACTION, GET_CONTENT_PROVIDER_
TRANSACTION, QUERY_TRANSACTION and INSERT_TRANSACTION
are operations (e.g., querying and updating) on databases
which may contain users’ personal information. While TRANS
ACTION_requestLocationUpdates can get current location
information. Table 3 depicted detailed statistics of these in-
trusive transactions on all our downloaded apps. Note that
the percentage of intrusive transaction is only around 4%.
Therefore, the alert notiﬁcations of intrusive transaction will
not annoy users in practice.
To evaluate the capability of dynamic detection, we ﬁrst
conduct transaction forensics on the malware families in our
evaluation database. We automatically run these malware
samples along with 500 legitimate apps to analyze the ef-
fectiveness of our detection algorithm. During the testing,
we also generated 500 pseudo-random user events such as
clicks, touches, or gestures for each app so to trigger dif-
ferent routines. We calculate the distribution of correlation
scores and they are illustrated in Figure 9. From this dis-
tribution, we choose 0.9 as our threshold in the two-phase
detection which eﬀectively separate malware and legitimate
app. Table 4 shows the detection results of malware samples
within the legitimate apps. We compute the true positive
(TP), true negative (TN), false positive (FP), false negative
(FN), precision and F-score to illustrate our results. From
these results, we observe that only few legitimate apps is re-
ported as malware in the ﬁrst phase of detection. We like to
Malware # of Samples TP TN FP FN Precision F-score
Table 4: Detection Results
Table 5: Benchmark Results
Test
Baseline Patronus Overhead
BaseBridge
FakeAV
MobileTx
213 186 495
9 500
11 494
9
15
5
0