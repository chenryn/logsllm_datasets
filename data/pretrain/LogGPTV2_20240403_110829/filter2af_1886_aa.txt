原文链接：
## 背景
源代码安全检测是安全开发流程（SDL）中非常重要的一部分，在58集团的CI/CD流程中每天有数千次量级的构建及发布，白盒检测的自动化能力显得极为重要。企业级的白盒代码审计系统就不仅仅面临漏洞发现的需求，也需要适应企业CI/CD流程。由于58集团大部分业务使用自研的Java框架，本系列文章会重点介绍我们在Java白盒能力建设过程中的实践。
本文主要介绍58集团 Java白盒能力建设中的技术选型过程，分享我们对业内常见的商业、开源产品进行分析的情况。
## SAST简介
静态代码分析是指在不实际执行程序的情况下，对代码语义和行为进行分析，由此找出程序中由于错误的编码导致异常的程序语义或未定义的行为。通俗的说，静态代码分析就是在代码编写的同时就能找出代码的编码错误。你不需要等待所有代码编写完毕，也不需要构建运行环境，编写测试用例。它能在软件开发流程早期就发现代码中的各种问题，从而提高开发效率和软件质量。
静态AST（SAST）技术通常在编程和/或测试软件生命周期（SLC）阶段分析应用程序的源代码，字节代码或二进制代码以查找安全漏洞。
## 业内知名代码审计产品
### 知名商业产品
### 知名开源项目
## 技术选型思考
### 技术选型结果统计
我们出于自身需求，对常见的开源方案以及部分商业方案进行了一些选型统计
产品 | 是否开源 | 是否支Java AST | 是否支持跨文件 | 定制化需求难易度 | 是否Web项目友好 | 安全规则编写难度 |
是否支持代码质量检查 | 支持语言 | 可扩展性 | 是否侵入项目 | 是否支持Jar包扫描 | 是否支持移动端  
---|---|---|---|---|---|---|---|---|---|---|---|---  
Coverity | 否 | 是 | 是 | 极难，需要厂商支持 | 是 | 相对困难 | 支持 | 常见语言都支持 | 低，需厂商支持 | 否 | 是 |
否  
SonarQube | 是 | 是 | 否 | 相对简单 | 是 | 相对简单 | 支持 | 常见语言都支持 | 高 | 否 | 否 | 否  
FlowDroid | 是 | 是 | 是 | 相对困难 | 否 | 相对困难 | 支持 | Android/Java | 中 | 否 | 是 |
Android  
ErrorProne | 是 | 是 | 是 | 相对困难 | 否 | 相对困难 | 支持 | Android/java | 中 | 是 | 是 |
Android  
Infer | 是 | 是 | 是 | 相对困难 | 否 | 相对困难 | 支持 | Android/java | 中 | 是 | 是 | Android  
Soot | 是 | 是 | 是 | 相对困难 | 否 | 相对困难 | 支持 | Android/java | 中 | 否 | 是 | Android  
PMD | 是 | 是 | 否 | 相对简单 | 是 | 相对简单 | 支持 | java | 高 | 否 | 否 | 否  
CodeQL | 半开源 | 是 | 是 | 中等 | 是 | 相对简单 | 支持 | 除php外常见语言 | 高 | 否 | 是 | 否  
### 商业产品分析
Coverity、Fortify、CheckMarx
作为白盒静态扫描领域的领头产品，拥有极其深厚的技术积累以及专业的产品技术团队。其产品能力都为业界翘楚。笔者曾经和Coverity的售前及售后团队有过一定的交流，可以总结以上商业产品的优点及缺点
#### 优点
  * 深厚的技术积累，产品能力强大，在SAST领域内少有不支持扫描的漏洞类型
  * 售后团队专业，能较为理解用户需求
#### 缺点
  * 定制化需求支持困难，引擎对用户不透明，需求提交给厂商相应时长为 Month ++
  * 规则学习成本高，规则学习文档不完善，自定义规则困难
  * 厂商以最大并发量授权license，弹性扩容能力差，存在成本浪费
  * 漏洞模型难以适配每个用户自己内部的漏洞模型，难以准确处理误报、漏洞修复复查等业务需求
  * 融入企业自身的CI/CD流程困难，数据模型需要企业自己转换
#### 实际案例
1、Converity的C/C++安全扫描依赖本地编译环境，需要研发使用Converity下发的扫描脚本进行编译扫描，但是扫描脚本对MacOS的版本适配一般都会delay
2~3个月，这就会造成MacOS一更新，对C/C++的安全扫描业务就会中断。Convertiy也未提供编译机的方案进行统一编译（有很多原因，比如编译参数、平台不一致难以统一编译）
2、Converity对代码的安全扫描并不只上报安全漏洞，代码的质量问题也会上报。但是Converity并未明显区分代码质量问题和安全漏洞，每个项目数千计数的代码质量问题和安全漏洞难以修复落地
### 开源产品分析
SonarQube、FindBugs、Chechstyle都是一些老牌开源静态代码扫描工具，但是这些工具都更偏向代码质量检查而非安全性检查。我们可以总结这些老牌开源产品的优点及缺点
#### 优点
  * 源代码开源 
  * 适配Jenkins等持续集成软件
#### 缺点
  * 没有跨文件AST能力，无法分析跨文件数据流和控制流
  * 漏洞匹配模式导致误报非常高，难以落地运营
### 其他开源产品分析
#### ① FlowDroid
##### 现状分析
FlowDroid是一款使用Java实现的针对Android的静态污点分析框架，发表于PLDI'2014，截止撰文时间在Google
Scholar上显示已有1200+的引用，目前为Android静态污点分析的主流框架，代码开源并提供于GitHub。
##### 产品概要
Github仓库：
##### 技术分析及使用
命令行使用
  * github下载jar包soot-infoflow-cmd-jar-with-dependencies.jar；
  * 命令行调用分析
    java -jar soot-infoflow-cmd-jar-with-dependencies.jar \
    -al 500 -mc 500 -md 500
    -a  \
    -p  \
    -s 
使用Maven构建FlowDroid
    EXPORT ANDROID_JARS=
    EXPORT DROIDBENCH=
    mvn install
##### 优劣势
  * 针对Android的开源框架，相比于跨语言的工具复杂性相对较低
  * 工具封装仅支持apk的分析
  * BenchMark强依赖于安卓相关的方法，用例也基于安卓的场景设计。安全相关的规则需要自行编写用例
#### ② ErrorProne
##### 现状分析
由Google出品，使用ErrorProne接管compiler,在代码编译时进行检查，并抛出错误中断执行。常用于静态的Java和Android
bug分析。
##### 产品概要
官方文档：
github仓库：
##### 技术分析及使用
支持`Bazel` 、`Maven` 、`Gradle` 、`Ant` 、IDE扩展、命令行
等不同安装方式,以Maven为例，build时依赖`maven-compiler-plugin` 扩展，且需要关注JDK版本:
        org.apache.maven.plugins
        maven-compiler-plugin
        3.8.0
            1.8
            1.8
            UTF-8
            true
                -XDcompilePolicy=simple
                -Xplugin:ErrorProne -Xep:DeadException:WARN -Xep:GuardedBy:OFF
                -J-Xbootclasspath/p:${settings.localRepository}/com/google/errorprone/javac/9+181-r4173-1/javac-9+181-r4173-1.jar
                    com.google.errorprone
                    error_prone_core
                    2.4.0
`bootclasspath` 参数的javac版本依据实际环境需要调整。
编译执行
    mvn clean && mvn compile -e
如果扫描后未发现缺陷点，则构建通过:
如果发现缺陷点，将抛出`CompilationFailureException` 异常，且导致mvn构建失败:
##### 产品优劣势
  * 需要手动侵入Maven工程项目的POM文件，且需要关注及适配编译器和版本等细节；
  * 编译阶段扫描缺陷点，没有友好的导出方案，需要从compile failed异常中捞取信息及整理；
  * 无法拿到完整的AST信息；
#### ③ Infer
##### 现状分析
Infer 是 Facebook 开源的静态程序分析工具，用于在发布移动应用之前对代码进行分析，找出潜在的问题。目前 Facebook 使用该工具来分析
Facebook 的 App，包括 Android 、iOS、Facebook Messenger 和 Instagram 等等
##### 产品概要
官方文档：
Github仓库：
安装较为简单，支持`MacOS` 和`Linux` ,以及`Docker Image`
部署:
支持多语言，Java的Maven项目有专门支持:
  * ant
  * buck
  * cc
  * gradle
  * java
  * javac
  * make
  * mvn
  * ndk-build
  * xcodebuild
扫描调研
    # 扫描前需先清理
    mvn clean && infer -- mvn package
结果文件默认输出在项目的`infer-out/` 目录下，分析运行时间与项目相关(理想时间预计在10~20min)。
##### 优劣势
官方最新版本放弃了对AL(AST Language)的维护，并在后续版本中会删除AL功能:
***\** DEPRECATED* _**_ On end-of-life support, may be removed in the future.
对于Github中用户提起的弃用原因，目前官方暂无正面回应：
#### ④ Soot
##### 现状分析
soot是java优化框架，提供4种中间代码来`分析` 和`转换` 字节码：
  * Baf：精简的字节码表示，操作简单
  * Jimple：适用于优化的3-address中间表示
  * Shimple：Jimple的SSA变体