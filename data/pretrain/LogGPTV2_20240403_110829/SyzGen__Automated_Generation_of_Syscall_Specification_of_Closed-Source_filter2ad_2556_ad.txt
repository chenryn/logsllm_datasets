means that there is only user client and thus no need for the dri-
ver to validate the service type, we simply select the minimum
value. With the help of symbolic execution to explore all possible
paths, SyzGen is able to discover all valid values for service type
and their corresponding user client classes. Note that we termi-
nate a path when it reaches the class initialization function and
thus symbolic execution does not suffer from the notorious path
explosion problem.
Specification reduction. Since SyzGen produces the syscall
specification in the format of Syzkaller templates [26], it needs
to support the data types defined in its declarative description
language. Fig. 7 lists all supported types by SyzGen.
As mentioned in §4.3, SyzGen generates one specification for
one explored path from symbolic execution. After path pruning
by its depth, we merge two templates based on a set of simple
rules defined in Table 6 in the Appendix. Basically, we observe
that most specifications only differ in one field and thus can be
straightforwardly merged. For example, if one specification says
that one byte of the input can take a constant of 1 while another
says it can take a constant of 2, we will simply merge the two
specifications and say that this byte can take either the value of
1 or 2. Note that coalesced specifications can be further merged
recursively until they differ by more than one field. Later we will
illustrate an example template produced by SyzGen in Fig. 8.
Fuzzing with Kernel Coverage Coverage-guided fuzzing has
become the de facto standard for fuzzing. To collect coverage for
macOS kernel fuzzing, Panic [18] proposes to leverage static binary
instrumentation, but it is not a full-fledged tool and not publicly
available. kAFL [22] takes advantage of hardware (i.e., intel-pt)
and thus is agnostic to OSes. We, however, found it lacking sup-
port for the latest macOS due to the underlying virtual machine it
uses (i.e., qemu-pt, a customized version of qemu). Therefore, we
propose a lightweight technique to collect coverage without the
constN[V]:                 a N-bit integer constant of value VintN[min:max]:          a N-bit integer with range from min to max ﬂags[(V)+, T]:            a set of constants of type Tstring:                        a zero-terminated memory buﬀerarray[T, min:max]:    a bounded array of elements of type Tptr[dir, T]:                  a pointer to an object of type T;                                   dir speciﬁes the direction (input or output)len[identiﬁer, intN]:   a N-bit integer denotes the size of another                                   ﬁeld speciﬁed by the identiﬁeridentiﬁer { (identiﬁer T)+ }:   a custom structureSession 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea757• SyzGen. This configuration enables all components as described
in §4. Compared to SyzGen-IMF, the only difference is the signature-
based dependence inference.
All experiments are conducted on three machines, a Macbook
Air with 2.2 GHz Intel Core i7, a Macbook with 1.1 GHz Dual-Core
Intel Core m3, and a Macbook Pro with 1.1 GHz Dual-Core Intel
Core m3. For any tested driver, we ensure all related evaluations
are performed on the same machine to guarantee a fair comparison.
The version of tested macOS is 10.15.4, and they run in VMware
Fusion 11.5.7. In total, we have tested 25 user clients as listed in
Table 2. Each fuzzing campaign takes 24 hours, and we repeated
it three times for each driver to report the coverage on average to
reduce randomness. The only exception is the file system driver
‘AppleAPFSUserClient’ due to its low throughput (i.e., 5 test cases
per minute) caused by one time-consuming interface to create new
disk volume, and thus we fuzz it for 72 hours. To collect syscall logs
for drivers, we look for any macOS build-in application associated
with them (e.g., system preferences for Bluetooth driver) and man-
ually perform all possible operations on it multiple times. Also, we
found some sample code from Apple open source projects [1]. As a
result, we successfully obtained logs for nine user clients.
6.2 Effectiveness of Interface Recovery
To evaluate the effectiveness of different steps of our interface
recovery solution, we ran SyzGen against 254 drivers. As a result,
SyzGen identified 56 valid service names in total. We found that the
majority of drivers were not loaded (72%) in our environment or
did not expose the interface IOConnectCallMethod() (18.5%). For
each service name, it may correspond to multiple user clients, each
of which is bound to a specific type number. SyzGen successfully
discovered 60 user clients and their corresponding type numbers,
among which we selectively fuzz 25 user clients as listed in Table 2.
The selection of targets to fuzz is based on the code size (i.e., the
fifth column) and the complexity of inputs as these metrics are
positively correlated to the number of bugs (see §6.4). Note that the
fifth column of Table 2 shows the number of all basic blocks in a
driver and does not necessarily represent the number of blocks that
could be reached by the corresponding user client (there may also be
blocks reachable only from handling specific hardware interrupts).
Effectiveness of service identification. By design, all the ser-
vices registered in the system must be queryable via the API IOSer-
viceMatching(). Therefore, we believe it is complete using the ap-
proach proposed in §4.2. We are unable to find any false positives
or false negatives. As for the 60 user clients and corresponding
type numbers that SyzGen extracts, we manually checked the bi-
nary to confirm the correctness and developed a test program to
ensure those user clients were indeed reachable from userspace.
However, we observed that SyzGen failed to identify the user client
for one particular driver CoreAnalyticsHub because the user client
is instantiated by some daemon after system startup, and subse-
quent requests for connecting are rejected unless prior instance
terminates. SyzGen utilizes memory snapshots as the initial state
to perform symbolic execution and thus is unable to bypass the
singleton check. Additionally, judging from the class names with
the suffix ‘UserClient’, we found two definitions of user clients
(e.g., AppleUSBLegacyInterfaceUserClient) in the binaries but
cannot find any interface that can trigger the creation of them.
Therefore, we do not consider them as false negatives.
Effectiveness of command identifier determination. The
second column of Table 2 shows the number of valid command
identifiers extracted from the corresponding user client. In total,
SyzGen found 504 valid command identifiers across 25 user clients.
Though SyzGen does not distinguish among switch cases, if-else,
and function tables, we manually inspected the binaries and found
that 16 user clients use dispatch function tables, eight use switch
cases and one combines if-else and switch cases, demonstrating the
generality of our tool. We also manually verified those extracted
command identifiers were correct and SyzGen did not miss any-
one. Moreover, unlike DIFUSE [9] and p-joker [28] that assume the
command identifier must be passed through certain parameter (e.g.,
the second parameter ‘selector’ of IOConnectCallMethod), SyzGen
successfully recognizes the control identifier embedded in the in-
putStruct (i.e., the fifth parameter to IOConnectCallMethod) for
IOBluetoothHCIUserClient, making the subsequent steps possi-
ble.
Effectiveness of specifications overall by coverage perfor-
mance. Since we do not have the ground truth for the syscall spec-
ifications, we compare the coverage between SyzGen and SyzGen-
Base to demonstrate the overall improvement over interface mod-
els. The third and fourth columns of Table 2 shows the block
coverage for SyzGen-Base and SyzGen, respectively. As we can
see, the average coverage improvement is 48%, demonstrating
the effectiveness of the specifications SyzGen generates. Most im-
provements are due to a few complex drivers where we either
extrapolate many explicit dependencies (e.g., 469% improvement
for IOBluetoothHCIUserClient) or recover many constraints im-
posed on the inputs (e.g., 306% improvement for AppleSSEUserClient),
indicating that the coverage improvement is correlated positively
with the complexity of the target. In contrast, for drivers that are
small and with few input constraints to begin with (or if their con-
straints are already encoded in the dispatch table which can be
extracted by SyzGen-Base), we see almost no improvement and
even slightly worse performance (due to noise) in some cases. This
is expected because such drivers may not have many interesting
behaviors to test in any event. To be thorough, we investigated
the missing block coverage and found that most are simply on the
error paths that terminate early (which are pruned by SyzGen as
described in §5), indicating that SyzGen works as expected.
In addition, we managed to find the source code of two dri-
vers IONetworkUserClient and IOAudioFamily, allowing us to
inspect the source code and confirm the quality of the correspond-
ing templates SyzGen generated. We can confirm that SyzGen suc-
cessfully recovered all the argument structures. However, SyzGen
failed to identify the explicit dependency for IOAudioFamily due
to lack of syscall logs. We also noticed a missing constraint in
IONetworkUserClient, which requires an input string to match
some pre-registered key maintained in an internal dictionary object.
SyzGen fails to extract those fixed keys because it is challenging to
perform symbolic execution on cryptography routines (e.g., hash
functions). Fortunately, the syscall logs happen to contain valid
values for that string field, which are used to produce the initial
corpus, mitigating the specific issue. Nonetheless, these two drivers
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea758User Client
ACPI_SMC_PluginUserClient
AppleImage4UserClient
IOHDIXController
AppleMCCSUserClient
AppleSSEUserClient
AppleCredentialManagerUserClient
AHCISMARTUserClient
AppleFDEKeyStoreUserClient
IOAudioEngineUserClient
AppleAPFSUserClient
IOBluetoothHCIUserClient
IOAVBNubUserClient
IONetworkUserClient
IOReportUserClient
IOHDACodecDeviceUserClient
AppleHDAControllerUserClient
AppleHDADriverUserClient
AppleHDAEngineUserClient
AppleUpstreamUserClient
AppleUSBHostInterface
AppleUSBHostFrameworkInterface
AppleUSBHostDeviceUserClient
AppleUSBHostFrameworkDevice
AppleUSBLegacyDeviceUserClient
AudioAUUCDriver
Overall
#Valid
Command
Identifier
4
4
2
9
1
2
9
27
6
49
213
21
5
4
2
2
2
10
7
34
26
20
13
25
7
504
Block Coverage
SyzGen-Base
104
24
61
107
62
224
282
108
504
6232
1014
453
157
133
120
217
905
1367
183
1903
2949
3220
1373
255
158
SyzGen
104
24
61
104
252
758
302
178
504
6811
5773
452
157
132
123
223
1032
1367
241
1719
2925
3255
1373
255
255
#Blocks
1875
1645
1769
1739
830
8043
2766
824
3875
37889
17989
1266
3806
263
519
3069
24920
24920
492
15408
15408
15408
15408
14019
439
Table 2: Tested macOS drivers
are rather simple (i.e., most interfaces only require an integer and a
string) and may not be representative.
We further reverse engineered all tested drivers to obtain some
ground truth with our best effort. In general, we believe the automatically-
generated specifications were not entirely precise but good enough.
For instance, it is sufficient for a boolean field of size 8 bytes to have
two values (i.e., True and False), but our specifications may specify
a valid range of [0, MAX_INT], causing the fuzzer to mutate the
value unnecessarily (likely end up with the same True value). One
weakness we find is the inability to express complex relationships
between fields of structures in the specification due to the limitation
of description language defined by Syzkaller. For example, Syzkaller
template cannot express a relationship such as “field A should al-
ways be twice the value of field B”. This prevents us from exploring
certain interesting code paths in the driver. Additionally, for some
drivers (e.g., IOAVBFamily), we find that they allow users to provide
some string as a key to create an object (e.g., addAVBClient(char*
key)) and later on input the same key to delete the corresponding
object (e.g., removeAVBClient(char* key)). Currently, SyzGen