    ```
    docker run -d -v /apps/testapp:/bin/testapp ubuntu:latest
    ```
    这将启动一个运行 Ubuntu 的容器，容器内部有一个挂载点，绑定到本地主机的`/apps/testapp`路径，编译后的应用位于该路径。
2.  为了测试应用，您可以附加到运行的映像，并通过运行`/bin/testapp/testapp`来执行应用。由于容器的装载使用本地主机目录，您可以测试应用，如果遇到任何错误，您可以修复代码并简单地重新编译可执行文件。
3.  重新编译后，您可以在容器中再次运行新的可执行文件来测试应用。这样可以避免创建多个测试映像，在发现问题后迭代映像。一旦成功测试了应用，就可以停止容器并创建包含应用的最终容器映像。
Docker 卷不能提供相同的解决方案，因为它们都位于主机上的目录中，并且不能指向现有目录。
还有其他使用绑定挂载的示例用例。需要记住的主要一点是，绑定装载可用于通过容器在主机系统的任何地方共享数据。在正确的场景中使用时，绑定挂载非常有用，但是如果使用不当，它们的使用可能会导致系统不稳定或安全漏洞。
不言而喻，在将主机系统上的任何现有目录与容器一起使用时，您都应该小心。将主机的`/etc`目录绑定到容器中可能会导致意外的结果。在容器中运行 shell 的人可以轻松删除或编辑一个文件或多个文件，从而使主机系统不稳定。
# tmpfs Docker〔t0〕挂载
在本章的开头，我们提到 Docker 允许您使用主机的 RAM 作为容器数据的临时存储位置。这种类型的装载不会保留数据，但是对于正确的工作负载，它可能是一个非常有用的存储位置。tmpfs 提供了一些在卷或绑定装载中不可用的独特优势:
*   大小可以预先定义，以限制存储消耗的内存量。
*   提供非常快速的数据访问。
tmpfs 安装也有一些限制:
*   它们只在 Linux 上可用；不支持 Windows。
*   单个 tmpfs 只能安装在一个容器上。
## 使用安装在容器中的 tmpfs
通过添加`--mount`或使用`--tmpfs`选项，可以用 tmpfs 底座启动容器。在一般情况下，您应该默认使用`--mount`选项，因为`--tmpfs`不允许在挂载上进行任何自定义。如果您使用`--tmpfs`，您将无法设置大小限制或任何文件模式安全性。由于这种类型的装载将使用昂贵的资源，即主机的内存，因此您需要为装载创建一个大小。由于这些限制，我们强烈建议您不要使用`--tmpfs`来创建您的 tmpfs 坐骑。
要为 NGINX 容器使用 tmpfs 挂载，您需要在启动映像时使用`--mount`选项:
```
docker run --mount type=tmpfs,target=/opt/html,tmpfs-mode=1770,tmpfs-size=1000000 --name nginx-test -d bitnami/nginx:latest
```
在`run`命令中指定`--mount`后，挂载选项允许您添加多个选项。在我们的示例中，我们为装载类型、容器中的目标装载、文件模式和大小添加了选项。下表显示了每个选项的详细信息:
![Table 2.2 – Docker tmpfs optiond ](img/B15514_Table_2.2.jpg)
表 2.2–tmpfs option Docker
现在我们已经创建了 tmpfs 装载，我们想要列出主机上的卷，以验证我们有 tmpfs 装载。您可能还记得，我们可以使用`docker volume ls`命令列出卷。创建 tmpfs 挂载后的输出如下所示:
![Figure 2.9 – Docker volume list ](img/Fig_2.9_B15514.jpg)
图 2.9–Docker 卷列表
请注意，列表是空的；根据 Docker 守护程序，没有正在使用的卷。tmpfs 装载不会出现在卷列表中，因为它们不是“真实”卷；使用`docker volume ls`命令时，仅显示体积。
如果您想验证容器中的 tmpfs 安装，您可以查看容器中的`docker inspect`命令输出，并查找`"Mounts"`部分:
![Figure 2.10 – Docker inspect output ](img/Fig_2.10_B15514.jpg)
图 2.10–Docker 检查输出
当使用`docker exec`命令时，您也可以通过执行 Linux `df`命令来验证正在运行的容器内的装载:
![Figure 2.11 – tmpfs mount in Linux ](img/Fig_2.11_B15514.jpg)
图 2.11–Linux 中的 tmpfs 挂载
正如您在`df`命令输出的高亮部分所看到的，装载存在于容器中，并且大小正确。
我们想展示使用挂载的最后一个例子，其中我们没有指定 tmpfs 空间的大小。如果不指定大小，Docker 将使用主机一半的内存创建装载。我们的示例服务器有 26 GB 的内存，我们在没有指定大小的情况下用同一个容器执行了一个 T0 命令。
请注意，我们确实在`mount`命令中指定了一个大小。要验证容器是否有`/opt/html`目标，我们可以使用`docker exec`执行`df -u`命令，并确认`/opt/html`挂载已经创建。大家可能已经注意到了，卷大小为 **13 GB** ，是主机 RAM**26gb**的**一半**。需要指出的是，虽然卷被设置为 26 GB，但此时它没有数据，因此它还没有消耗任何内存。内存直到数据存储在容器中才会被消耗，所以您需要非常小心 tmpfs 卷，否则您可能会耗尽主机上的内存并导致系统崩溃。
# 总结
在本章中，您学习了在容器中处理数据的多种方法。阅读本章后，您应该知道如何决定容器的合适存储类型。
在下一章中，我们将通过了解 Docker 默认桥接网络来了解 Docker 网络。我们还将学习如何使用和创建用户定义的桥，并在网络上公开容器服务。
# 问题
1.  Which of the following volumes provides persistent storage for containers?
    A.tmpfs
    B.绑定安装
    C.卷
    D.存储区域网
2.  Docker volumes must be created before they can be mounted.
    A.真实的
    B.错误的
3.  You create a tmpfs volume on a host that has 64 GB of RAM. During its creation, you failed to set a size. What size volume will Docker create?
    A.1 GB
    B. 64 GB
    C.20 GB
    D.32 GB
4.  Docker volumes are automatically deleted when you remove a container.
    A.真实的
    B.错误的
5.  Which volume type is managed by the Docker daemon?
    A.绑定卷
    B.命名卷
    C.所有卷
    D.没有人
6.  How do you delete an unused bind volume?
    A.没必要；Docker 会自动删除它
    B.`docker volume prune`
    C.`docker volume bind prune`
    D.您必须手动删除绑定文件夹