in a
priority order, to ﬁnd the best route for a destination preﬁx.
We use the following priority rules: ﬁrst based on relationships
(i.e., prefer the route from a customer over that from a peer
over that from a provider), and then prefer the route with no
(or least) holes. If there are still ties, prefer the route with
shortest path. The rationale is that this order ﬁrst considers
the economic incentives of the ASes, and then security, and
performance last.
The procedure SENDPREVENTIVEANN decides whether to
send a preventive announcement or not in ROV++ v3. This is
a bit delicate; ROV++ v3 uses multiple measures to prevent
unsafe paths from propagating in the network, which may
harm convergence or cause loops. First, when a ROV++ v3
AS sends an announcement, it includes a transitive ﬁeld to
indicates whether the announcement contains holes or not,
which can be recognized by other ROV++ v3 ASes. Second, an
ROV++ v3 AS X only generates a preventive announcement
about a subpreﬁx subp if (i) X receives a subpreﬁx hijack an-
nouncement subp from a provider or peer, and (ii) X receives a
legitimate announcement pre, s.t. subp ⊂ pre, that contains no
holes (as indicated by the transitive ﬁeld) from some neighbor
AS Y that did not send subp to X. Third, X sends the
preventive announcement only to customers from which it has
not received pre, to prevent routing loops. Suppose a customer
of AS X, say AS Z, receives a preventive announcement from
X on subp, and later sends an announcement with preﬁx pre to
X. Then X will withdraw the preventive announcement from
Z, and Z will in turn withdraw it from other ASes.
D. Non-routed Preﬁx and Superpreﬁx Hijacks
So far, the ROV++ design focuses on mitigation of sub-
preﬁx hijacks. We now discuss minor extensions that have
signiﬁcant impact on other important hijack scenarios.
Non-routed preﬁx hijacks. These are hijacks on IP ad-
dresses that are normally non-routed, i.e., not part of any
(legitimately) announced IP preﬁx. Somewhat surprising, there
are plenty such IP addresses, typically owned by organizations
that were allocated large address blocks in the early days
of the Internet, and never got
to utilize them. As shown
in [60], non-routed preﬁxes are often hijacked, and then used
to launch different attacks such as spam and DDoS. The main
motivation of the attackers is to foil blacklists: once one such
hijacked preﬁx is blacklisted, they just move to another one.
Indeed, a signiﬁcant fraction of the non-routed address blocks
is blacklisted at any given moment, due to such attacks.
RPKI allows ROA to specify origin AS zero to signal a
non-routed preﬁx so that ROV ASes will drop these announce-
ments, and thereby not send packets to the non-routed preﬁxes,
as desired. This completely prevents hijacking of packets sent
by a ROV-deploying AS to non-routed preﬁxes. ROV also
provides some defense to non-adopting ASes, but this defense
is quite limited. We present the ﬁrst evaluation of the defense
that partial-adoption of ROV provides to non-adopting ASes
against non-routed preﬁx hijacks (see §V), which shows a
8
signiﬁcant improvement, almost linearly as adoption of ROV
grows. However, we next explain how a simple adaptation
of the ROV++ blackhole announcement mechanism provides
much improved security (to non-adopting ASes).
ROV++: non-routed blackhole announcements. To bet-
ter defend against non-routed hijacks, ROV++ sends black-
hole announcements as follows. An AS that receives an
announcement for a preﬁx with non-routed ROA (identiﬁed as
origin AS being zero [27]) sends the corresponding blackhole
announcement, following either the v2 or v2a rules. This
announcement will now compete with the attacker’s non-
routable preﬁx hijack, preventing hijack of trafﬁc from more
non-adopting ASes. Our evaluation in §V conﬁrms the beneﬁts
of this improvement.
In superpreﬁx hijack of non-routed preﬁx, an attacker
announces a superpreﬁx of a non-routed preﬁx. Since the
preﬁx is not announced, then packets whose destination IP
address is in the non-routed preﬁx, will be routed following the
superpreﬁx announcement directly to the attacker. This attack
circumvents ROV; if there is no ROA for the superpreﬁx, which
is the common case, then ROV will announce the superpreﬁx,
and the attack succeeds. For example, suppose preﬁx 1.2.3/24
is non-routed and protected by a ROA with origin AS 0.
An attacker, AS 6, wants to hijack 1.2.3/24, and therefore
announces superpreﬁx 1.2.0/22. It is reasonable to assume that
no other AS announces 1.2.0/22 and no corresponding ROA
was published (due to concerns that issuing such a broad ROA
may invalidate legit announcements of many preﬁxes that are
not yet covered by ROAs [19]). Using ROV (and BGP), the
announcement of 1.2.0/22 is likely to reach almost all ASes,
including ROV ASes and their customers. As a result, AS 6
will successfully hijack almost all trafﬁc sent to 1.2.3/24 or
any other unannounced subpreﬁx of 1.2.0/22.
ROV++ blackholing defeats superpreﬁx hijack of non-
routed preﬁx. ROV++ always blackholes all trafﬁc sent to
non-routed preﬁxes. This sufﬁces to completely foil the super-
preﬁx hijack of non-routed preﬁxes. Further, this provides
some beneﬁts to non-adopting ASes; see evaluation in §V.
Extensions foiling reﬂection-DDoS. The fact that ROV++
blackholes trafﬁc sent to non-routed preﬁxes foils many ex-
ploits of non-routed preﬁxes. In particular,
it foils spam,
since the spammer will not be able to establish the SMTP
connection. However, this alone may not provide the best
defense against the common threat of reﬂection-DDoS attacks.
Improved defense can be achieved through another minor
extension: the AS should also blackhole trafﬁc whose source
IP is in a non-routed preﬁx.
Superpreﬁx+preﬁx hijack preﬁx. The superpreﬁx attack
may also be combined with a preﬁx-hijack attack, i.e., to hijack
trafﬁc sent to a preﬁx which was announced by its legitimate
origin AS, and protected by a ROA. The goal would, again, be
to reduce the effectiveness of ROV to defend against hijack—
in this case, to protect against preﬁx hijack. Let us explain the
attack using an example. As the name implies, the attacker
sends a preﬁx hijack announcement, say for preﬁx 1.2.3/24,
but also announces the superpreﬁx, say 1.2.0/22. As before,
we assume that 1.2.0/22 is not covered by a ROA. Consider,
for simplicity, a stub AS that uses ROV, and assume this AS
received the hijack announcement for 1.2.3/24; due to the use
of ROV, this announcement is dropped. However, like almost
all ASes, this AS will almost surely receive the superpreﬁx
(1.2.0/22) announcement. As a result, the AS will send packets
with destination IP in 1.2.3/24 to its provider, and from there,
these packets will be routed to the attacker, since the provider
is using the hijacked announcement.
Defenses. The blackhole mechanism makes ROV++ adopt-
ing ASes immune to this improved attack. It is possible to foil
the superpreﬁx attacks by issuing non-routed ROAs (origin
AS set to zero) for superpreﬁxes of ROA-protected preﬁxes.
However, this may cause any unknown preﬁx covered by the
superpreﬁx to be considered invalid, and hence needs to be
applied carefully.
IV. SECURITY ANALYSIS
It is challenging to identify the exact properties of rout-
ing security mechanisms, including ROV++, especially under
partial deployment. We present some preliminary results, and
leave further analysis for future work.
As mentioned earlier, hidden hijacks have signiﬁcant impli-
cations on ROV and ROV++. We next formally deﬁne hidden
hijacks and visible hijacks, and then compare the extent of
hidden/visible hijacks when deploying ROV++ versus ROV,
and show that ROV++ achieves better security than ROV and
BGP.
Deﬁnition (visible and hidden hijacks). Suppose that an
AS A0 selects the path (A1, . . . , An) for routing packets for
the entire preﬁx pre (no subpreﬁxes). If A0 sends a packet to
an IP address x ∈ pre, and this packet does not reach An,
then we say that it was hijacked. If A0 received from A1 an
announcement for a subpreﬁx subp ⊂ pre with an AS-path
that does not terminate in An, we say this was a visible hijack;
otherwise, we say this was a hidden hijack. See examples of
hidden hijacks in Fig. 1. An example of visible hijack is in
Fig. 2(a). There, AS 77 receives two announcements from AS
44: one with path (44, 99) for preﬁx 1.2/16, which if valid and
selected by AS 77, and one with path (44, 666) for subpreﬁx
1.2.3/24, which is invalid and dropped. However, the trafﬁc
from AS 77 to 1.2.3/24 is still hijacked, which is a visible
hijack since AS 77 received the subpreﬁx hijack announcement
from AS 44.
Hidden hijacks in ROV and ROV++. As shown in
§II, ROV ASes are vulnerable to visible subpreﬁx hijacks.
In addition, since ROV ASes drop illegitimate subpreﬁx an-
nouncements, it can create hidden hijacks, i.e., causing other
ASes to fall victim to hidden hijacks; see one example in
Fig. 1(b), where AS 44 will suffer from hidden hijacks because
ROV AS 78 drops the subpreﬁx hijack announcement. This is
a signiﬁcant weakness of ROV, and a concern for mixing ROV
with ROV++ and other defense mechanisms, including BGP
hijack detection services and the Artemis defense [51].
In contrast, ROV++ does not suffer from visible subpreﬁx
hijacks. This is by design—even in ROV++ v1—an ROV++
AS either blackholes the subpreﬁx or uses an alternative
safe path (if available) to prevent visible subpreﬁx hijacks.
Therefore, all subpreﬁx hijacks in ROV++ are hidden hijacks.
In addition, ROV++ ASes will never create hidden subpreﬁx
hijacks. These properties are formally stated below; we assume
9
the relevant RPKI ROAs are correct, i.e., if PASSROV(ann) is
invalid, then ann is a preﬁx or subpreﬁx hijack announcement
Lemma 1. Consider a ROV++ AS X that receives a visible
hijack announcement ann, i.e., PASSROV(ann) is invalid,
from neighbor ann.from. Then X will not send packets to
ann.from for any packet whose destination IP is in ann.pre.
The lemma follows from the design of ROV++ (all vari-
ants). Note that if a stub AS receives a visible hijack for
some preﬁx pre, then it would not send any trafﬁc to pre,
i.e., become disconnected from it (rather than allow the trafﬁc
to be hijacked).
We next show that ROV++ achieves Goal 1, if we do not
have two concurrent hijacks of different sub-preﬁxes of the
same preﬁx.
Corollary 1 (Goal 1 is achieved, for a single hijack). If trafﬁc
from AS A0 to preﬁx pre is not hijacked when A0 is using BGP
or ROV, then trafﬁc from A0 to pre will also not be hijacked
if A0 uses (any variant of) ROV++, provided that at most one
subpreﬁx of pre is hijacked.
Proof: Consider any IP address x ∈ pre. Let A1 be the
AS to which A0 is forwarding packets with destination x,
when A0 uses BGP/ROV. If, when running ROV++, A0 is
also forwarding packets to x, or A0 cannot route packets to x,
the claim follows trivially. Hence, assume that when A0 runs
ROV++, it sends packets whose destination is x to another
1 (cid:54)= A1. In all versions of ROV++, this happens
neighbor, A(cid:48)
only if A0 detects hijacking of a subpreﬁx subp ⊂ pre. If
x ∈ subp, then x would be hijacked if A0 used ROV/BGP.
Otherwise, then x is not in any hijacked (sub)preﬁx, since we
assumed at most one subpreﬁx of pre is hijacked; hence, x
must be routed correctly also when A0 uses ROV++.
The claim and proof also extend to the ROV++ Lite
versions, presented in §VI, even without the restriction to a
single hijack. The proof is omitted due to length restrictions.
Hidden hijacks in BGP and ROV++. Interestingly, hidden
hijacks can also occur in BGP-only networks, where an AS that
uses BGP does not receive a subpreﬁx hijack announcement
from any neighbor, yet the data trafﬁc to the subpreﬁx is
hijacked; see one example in Fig. 1(a). In a BGP-only network,
a subpreﬁx hijack announcement will normally reach almost
all the ASes, leading to visible subpreﬁx hijacks; but some
(usually few) ASes may not receive the subpreﬁx hijack
announcement (e.g., due to valley-free routing as in Fig. 1(a)),
and suffer from hidden subpreﬁx hijacks. Our analysis (see full
version [43]) shows that BGP ASes generally make subpreﬁx
hijacks visible by forwarding the subpreﬁx announcement,
hence the hidden hijack rate in BGP-only network is low (the
visible subpreﬁx hijacks rate is, however, close to 100%). In
contrast, ROV can create hidden hijacks, leading to higher
hidden hijack rate.
ROV++, unlike ROV and BGP, never creates hidden hi-
jacks. However, ROV++ cannot completely prevent hidden
hijacks, since an AS A0 cannot detect that trafﬁc may be
hijacked when routed via a neighbor A1, if A0 did not receive
a (visible) hijack announcement for a subpreﬁx subp ⊂ pre
from A1. Furthermore, unlike BGP, ROV++ never outputs a
visible hijack—and, as a result, may quite often propagate
hidden hijacks, i.e., output a hidden hijack—when receiving a
hidden hijack announcement. This happens when the hidden
hijack announcement is selected, which may happen quite
often, esp. considering ROV++ “prefers” it, hoping it does
not result in hijack. This causes an interesting phenomenon in
the evaluations, where hijacking from ROV++ ASes somewhat
increases as adoption increases (up to about 40%), due to the
higher proliferation of (BGP-induced) hidden hijacks. This is
more pronounced in ROV++ v3, where an adopting AS that has
selected the hidden hijack announcement will use the hijacked
path to generate preventive announcements. Any neighbor that
uses this preventive announcement will then be subject to
hidden hijack.
V. PERFORMANCE EVALUATION
In this section, we evaluate the performance of ROV++ in
comparison with ROV using simulation. We ﬁrst describe the
simulation setup, and then present the results.
A. Simulation Setup
We evaluate the performance of the multiple ROV++
variants and ROV using a simulator that we developed. This
simulator provides detailed simulation of BGP announce-
ment propagation, including both update and withdrawal of
announcements. It further incorporates simulation of route
validation, best path decision making and export policy.
All evaluation uses an empirically-derived Internet-scale
AS topology (each edge marked with an AS relationship)
from CAIDA [10] (using the serial-2 dataset for July, 2020).
For an AS that adopts plain BGP or ROV,
the best path
decision making follows three standard rules in order: (i) local
preference (i.e., prefer announcements from customers, over
those from peers, and those from providers), (ii) shortest path,
and (iii) breaking ties randomly. For a ROV++ adopting AS,
preference to routes with no blackholes is placed right after
local preference, so that the economic interests of the AS is still
considered ﬁrst. The routing follows the commonly assumed
valley-free routing [18].
For each ROV or ROV++ policy, we assume a certain
percentage of ASes adopts the policy, while the others run
plain BGP. The percentage of adoption varies from 0%-100%
for a given policy1. For each setting, we run over 2000 trials,
each with a random attacker and victim from the edge ASes,
and present the average results with 95% conﬁdence intervals.
We consider three categories of ASes: top 100 ASes (obtained