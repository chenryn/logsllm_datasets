Since our target processor is the ARM processor used by PDA's, we will provide some of 
the necessary information you need to know, or at least be familiar with, before 
attempting to study a program meant to run on this processor type. The next few pages 
will provide you with a description of the ARM processor, its major op codes, their HEX 
equivalent, and how the memory is used. If you do not understand this information, you 
may have some difficulty in following the rest of this paper. 
3.2 Hex vs. Binary 
To successfully RE a program, there are several concepts that you must understand. The 
first is that no matter what programming language a file is written in, it will eventually be 
converted to a language that the computer can understand. This language is known as 
Page 8 of 8                                 © 2003 Airscanner™ Corp. http://www.Airscanner.com 
binary and exists in a state of ones and zeros. For example, the word “HACKER” in 
binary is written as follows: 
H 
A 
C 
K 
E 
R 
01001000 
01000001 
01000011 
01001011 
01000101 
01010010 
While people did code in binary at one time, this is very rare in today's interface based 
world. In fact, many operating systems do not display, store, or even transmit this binary 
information, as it really exists; instead, they use a format known as HEX.  
Hex, while still very cryptic, shortens the process of transmitting data by converting the 8 
digit binary byte, into a 2 character hex value. For example, the previously illustrated 
word “HACKER” in binary would equate to the following in hex: 
H 
A 
C 
K 
E 
R 
48 
41 
43 
4B 
45 
42 
In addition to the space considerations, experienced computer programmers can easily 
understand hex characters. In fact, with nothing more than a simple hex editor, a 
knowledgeable hacker can open an executable file and alter the hex code of the file to 
remove protection, alter a programs appearance, or even install a Trojan. In other words, 
understanding hex is one of the main requirements of being able to reverse-engineer a 
program. To facilitate you in your endeavors, an ASCII/Binary/hex chart has been 
included in the appendix of this book. In addition to this, you can find several conversion 
web pages and programs online, and if all else fails, the Windows calculator will convert 
hex to binary to decimal to octal, once it has been set to scientific mode.  
3.3 The ARM Processor  
The Advanced RISC Microprocessor (ARM) is a low-power 32 bit microprocessor based 
on the Reduced Instruction Set Computer (RISC) principles. In particular, the ARM is 
used in small devices that have a limited power source and low threshold for heat, such as 
PDA's, telecommunication devices, and other miniature devices that require a relatively 
high level of computing power. 
3.3.1 Registers 
There are a total of 37 registers within this processor that are used to hold values used in 
the execution of code. Six of these registers are used to hold status values needed to hold 
the results of compare and mathematical operations, among others. These leaves 31 left 
to the use of the program, of which a max of 16 are generally available to the 
programmer. Of these 16, Register 15 (R15) is used to hold the Program Counter (PC), 
which is used by the processor to keep track of where in the program it is currently 
executing. R14 is also used by the processor as a subroutine link register (Lr), which is 
used to temporarily hold the value held by R15 when a Branch and Link (BL) instruction 
is executed. Finally R13, known as the Stack Pointer (Sp), is used by the processor to 
Page 9 of 9                                 © 2003 Airscanner™ Corp. http://www.Airscanner.com 
hold the memory address of the stack, which is used to store all values about to be used 
by the processor in it execution.  
In addition to these first 16 registers, a debugger allows the programmer to monitor the 
last four registers (28-31), which are used to hold conditional values. These registers are 
used to hold the results of arithmetic and logical operations performed by the processor 
(e.g. addition, subtraction, compares, etc.). The following lists the register and its 
name/purpose. They are listed in descending order due to the fact that the processor bits 
are read from high to low.  
R31: Negative / Less Than 
R30: Zero 
R29: Carry / Borrow / Extend 
R28: Overflow 
Understanding these registers is very important when debugging software. By knowing 
what each of these values means, you can be sure to know the next step the program will 
make. In addition, using a good debugger, you can often alter these values on the fly, thus 
maintaining 100% control over how a program flows. The following is a table of the 
possible values and their meanings.  
Value 
Meaning 
EQ 
– Z set (equal) 
NE 
– Zero clear (not equal) 
CS 
– Carry set (unsigned higher or same) 
CC 
– Carry clear (unsigned lower) 
MI 
– Negative set 
PL 
– Negative clear 
VS 
– Overflow set 
VC 
– Overflow clear 
HI 
– Carry set and Zero clear (unsigned hi) 
LS 
– Carry clear and Zero set 
(unsigned lo or same) 
GE 
– Negative set and Overflow set 
or Negative clear and Overflow clear (>=) 
LT 
– Negative set and Overflow clear 
or Negative clear and Overflow set () 
LE 
– Zero set, and either Negative set and 
Overflow clear, or Negative clear and 
Page 10 of 10                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
Value 
Meaning 
Overflow set (= #0 then C = 1, else C = 0  C = 1 
O: Was there an error in the calculation, if so, O = 0  O = 0 
Using the above, determine the following. 
CMP 23, 36 
Negative: If 23 = 36 then C = 1, else C = 0  C = 0 
Overflow: Was there an error in the calculation, if so, O = 0  O = 0 
Now that you see how this work in the case of a CMP, we need to look at how the status 
flags are updated in other situations. The next will illustrate how the flags are updates in 
the case of a MOVS opcode and an ANDS opcode.  
MOVS R1, R0 
In this case, you need to look at the status flags as they are labeled and update them 
according to the value of R0. Use the following steps to determine the outcome. 
N: If R0 < 0 then N = 1, else N = 0 
Z: if R0 = 0 then Z = 1, else Z = 0 
Two things to note from this example, the first is that R0 has to be a negative number for 
the N flag to be set. This is possible, but only if the binary value starts with a 1. One 
common value you will see is 0xFFFFFFFF. The second item to note is that the carry 
value is not updated using the MOVS opcode. 
ANDS R1, R0, 0xff 
In the case of an ANDS opcode, the results are similar to that of the MOVS opcode. The 
R0 value is used to determine the flags’ status. Use the following to determine the output 
of the N and Z flags. 
N: If R0 < 0 then N = 1, else N = 0 
Z: if R0 = 0 then Z = 1, else Z = 0 
There are many other opcodes that update the status flags. Some opcodes are implicit and 
do not require the specification of the ‘S’. These update the status flags similar to the 
CMP opcode. The opcodes that have an explicit ‘S’ operate like the MOVS example.  
3.3.2 ARM Opcodes 
The ARM processor has a pre-defined set of operation codes (opcodes) that allows a 
programmer to write code. These same opcodes are used by compilers, such as 
Microsoft's EVC, when a program is created for an ARM device. In addition to creating 
Page 12 of 12                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
programs, the opcodes are also used when a program is disassembled and/or debugged. 
For this reason, it is important that you have a understanding of how opcodes are used, 
and be able to recognize at least the most common opcodes, as well as what operation 
they perform. The more you are familiar with the opcodes, the easier it will be to 
determine what the code is doing. In addition, it is also important for you to have some 
reference of the hex equivalent of an opcode. You will need this to find and replace an 
opcode as it appears in a hex dump of the file. While practice will ingrain the popular 
opcodes into your memory, this short discussion will help get you started.  
3.3.2.1 Branch (B)  
The Branch opcode tells the processor to jump to another part of program, or more 
specifically the memory, where it will continue its execution. The B opcode is not to be 
confused with the Branch with Link (BL) opcode discussed next. The main difference is 
found in the fact that the B opcode simply is a code execution redirector. The program 
will jump to the specified address and continue processing the instructions. The BL 
opcode also redirects to another piece of code, but it will eventually jump back to the 
original code and continue executing where it left off. 
There are several variations of the B opcode, most of which make obvious sense. The 
following is a list of the three most common variants and what they mean. Note that this 
list relates to the condition table in the previous section. In addition, we have also 
included the hex code that you will need to search for when altering a branch operation. 
This is only a partial list. For a full list please visit the references section at the end of this 
paper.  
B 
Branch 
Always branches 
XX XX XX EA 
BEQ 
B if equal 
B if Z flag = 0 
XX XX XX 0A 
BNE 
B if no equal  
B if Z flag = 1 
XX XX XX 1A 
Examples: 
B 
loc_11498  
07 00 00 EA 
BEQ      
loc_1147C  
0C 00 00 0A 
BNE      
loc_11474  
06 00 00 1A 
3.3.2.2 Branch with Link (BL) 
When a program is executing, there are situations where the program must branch out 
and process a related piece of information before it can continue with the main program, 
such as system calls (i.e. a message box). This is made possible with a Branch with Link 
opcode. Unlike its relative, the B opcode, BL always returns back to the code it originally 
was executing. To facilitate this, register 14 is used to hold the original address from 
which the BL was executed and the stack is used to hold any important register values. 
The BL opcode has several variants to its base instruction, just like the B opcode. The 
following is a list of the same three variants and what they mean, which will be followed 
Page 13 of 13                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
by examples. It is important to note that the examples show function calls instead of 
address locations. However, if you look at the actual code you will find normal address, 
just like the B opcode. The function naming is due to the fact that many BL calls are 
made to defined function that will return a value or perform a service. As you investigate 
RVEing, you will become very intimate with the BL opcode. Note, the MVT debugger 
will not jump to the BL address when doing a line by line execution. It will instead 
perform the function and continue to the next line. If you want to watch the code 
specified by the BL operate, you will need to specify a breakpoint at the memory address 
it branches to. This concept will be discussed later in this paper. 