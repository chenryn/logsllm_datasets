for the case n = 4 but this solution can be generalized to
any value of n by employing the same technique as used
in [11]. The state of a process after k communication steps
is determined by its initial value, the failure detector output
and the value and source of the messages received in every
communication round up to k. To strengthen the result, the
processes exchange their complete state. For the sake of
simplicity, Ω outputs the same leader process p1 at all pro-
cesses in every run considered in the proof until p1 possibly
crashes. The state of process p after k communication steps
is expressed as a k-dimensional vector with n entries such
that the i-th entry contains the state of the i-th process after
k − 1 steps. Since in each round a process waits for a mes-
sage from at most n − f processes, one entry is empty. The
decision value is bracketed (0)/(1).
Two runs R1 and R2 are similar for process p up to step
k, iff the state of p after k steps in R1 is identical to the
state of p after k steps in R2. If two runs are similar for
some process p, then p decides the same value in both runs.
Idea: The proof is by contradiction. We assume a leader-
based one-step and zero-degrading protocol and show that
it does not solve consensus. We construct a chain of le-
gal runs such that every two neighboring runs are similar to
some process. We start with a run in which all processes
propose 1, and then we construct new runs either by chang-
ing the communication pattern or the conﬁguration. The
failure detector assumption as well the expected properties
of the protocol lead to a run that violates agreement.
Proof :
• If A is one-step, then it must have a run like R1 in
which all correct processes propose 1 and p1 might have
proposed the same. Thus, p4 decides 1 after one round2.
• If A is zero-degrading, then it must allow a run such as
R2. R2 is stable because Ω outputs p1 at all correct pro-
cesses and its output does not change. Thus, p1 decides
2Actually, processes p2 and p3 also decide 1 after one round but this is
not relevant for the proof.
R1 :
1
1
1
0
1
1
0
0
1
1
0
0
1
0
0
-111
(1)
R3 :
011-
s1
(1)
011-
011-
01-0
s2
(1)
R5 :
011-
s3
(1)
01-0
s4
...
(1)
0-10
s4
...
(1)
01-0
s4
...
(1)
R7 :
01-0
s5
(1)
0-00
(0)
0
1
1
0
1
1
0
0
1
1
0
0
0
0
1
CA
0
B@ 011-
011-
011-
-
0
B@ 011-
-
1
CA
011-
01-0
0
B@ 011-
01-0
1
CA
-
01-0
1
CA
0
B@ -
01-0
0-10
01-0
0
B@ 01-0
01-0
1
CA
-
01-0
R2 :
011-
s1
(1)
011-
011-
R4 :
011-
s3
(1)
01-0
011-
01-0
s2
(1)
R6 :
01-0
s5
(1)
s1 =
s2 =
s3 =
s4 =
s5 =
01-0
s4
...
(1)
0-10
s4
...
(1)
01-0
s4
...
(1)
R8 :
0-00
(0)
Figure 1: Lower bound proof.
after two communication steps. If p1 decides 0, then we
(cid:1) that for p1 is similar to R2 (p1 de-
can construct a run R
(cid:1)) and that for p4 is similar to R1 (p4 decides
cides 0 in R
(cid:1)). Consequently in R2, p1 necessarily decides 1.
1 in R
• Runs R2 and R3 are similar for p1. Thus, p1 decides 1
in R3 after two communication steps. Since R3 is stable,
p4 also decides 1 after the second round.
• Runs R3 and R4 are similar for p4 and thus p4 decides
1 in R4 after the second communication step. Since R4 is
stable, p1 also decides 1 after the second round.
• Runs R4 and R5 are similar for p1. Consequently p1
decides 1 in R5 after the second communication step. In
R5 we crash p1 so that all messages sent to p2, p3 and
p4 after the ﬁrst round are lost. Since R5 is not stable
because Ω eventually outputs a new leader, p2, p3 and p4
are only required to decide eventually. In order to ensure
agreement they eventually decide 1.
• In R6 we crash p1 such that R5 and R6 are similar for
p2, p3 and p4. Thus, they eventually decide 1. As p1
cannot distinguish R6 from a stable run, it decides after
two rounds. In order to ensure agreement, p1 necessarily
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:34 UTC from IEEE Xplore.  Restrictions apply. 
decides 1.
• R6 and R7 are similar for p1. Thus, p1 decides 1 in R7
after two communication steps. R7 and R8 are similar for
p4, thus it decides 0 in R7 after the ﬁrst communication
step. Consequently, R7 violates the consensus agreement
(cid:1)
property concluding the proof.
5 Circumventing the Impossibility with Ω
In this section we present a leader-based consensus pro-
tocol that is zero-degrading but is not one-step, as this
would contradict the established impossibility result. How-
ever, the protocol has the property that it obtains consensus
in one communication step if all proposals are equal and
the run is stable. The main idea behind the proposed L-
Consensus algorithm 1 is to constrain the processes to de-
cide the value proposed by the leader. A process decides v
in the ﬁrst round if n − f values including the leader value
are equal to v. Consequently, every process that does not
decide can safely pick the leader value. Hence, consensus
is achieved in two rounds in every stable run. If there is no
leader, then safety is ensured by picking the majority value.
Algorithm 1: The L-Consensus Algorithm
Function Consensus(vi)
start T 1, T 2;
task T 1: ri ← 1; esti ← vi; ld ← ⊥;
while true do
ld ← Ω.leader;
∀j do send PROP(ri, esti, ld) to pj enddo;
wait until received PROP(ri, ∗, ∗) from n − f processes;
wait until received PROP(ri, ∗, ∗) from ld
∨ ld (cid:6)= Ω.leader;
if received PROP(ri, v, ld) from n − f processes ∧ received
PROP(ri, v, ∗) from ld then
∀j do send DECIDE(v) to pj enddo;
return v;
else if received PROP(ri, ∗, ld) from > n/2 processes ∧
received PROP(ri, v, ∗) from ld then
esti ← v;
else if received PROP(ri, v, ∗) from n − 2f processes then
esti ← v;
ri ← ri + 1;
1
2
3
4
5
6
7
8
9
10
11
end
task T 2: upon reception of DECIDE(v): ∀j (cid:6)= i do send
DECIDE(v) to pj enddo; return v;
The protocol executes in a round by round fashion. In ev-
ery round, processes exchange messages, update their state
depending on the messages received and possibly decide or
move to the next round. The algorithm has three blocks that
a process can execute in a round depending on which con-
dition is satisﬁed (at line 4, 7 or 9). Safety is ensured as
follows: if a process p decides a value v during round k, ev-
ery process q that ﬁnishes round k, does so with value v, no
matter what block it executes. In a stable run, the condition
at line 7 evaluates to true, every correct process accepts the
leader value and hence decides in the next round. In asyn-
chronous runs, when there might be multiple leaders in the
system, agreement is kept through majority voting. Since
n − f equal values are necessary for a decision, if a pro-
cess decides v then every process receives v at least n − 2f
times, making the condition at line 9 become true. Since
n − 2f > f, a process can safely pick the majority value.
5.1 Detailed Description
The L-Consensus algorithm consists of two parallel
tasks T 1 and T 2. When a process pi calls the Consensus
function with a proposal vi (i.e. it proposes value vi), it ini-
tiates both tasks. Compliant with the deﬁnition of consen-
sus, the Consensus function eventually returns the same
decision value v to each non-crashed process.
Task 1: The algorithm executes a sequence of asyn-
chronous rounds of one communication step each. In each
round k, a process sends a round k message containing its
current proposal to all processes and waits for round k mes-
sages from n−f processes including its current leader, com-
putes its new state based on the messages received (possibly
decides), and moves to the next round. A process pi main-
tains three local variables: the round number ri, an estimate
of the decision value esti initialized to the proposal value
vi, and the current leader ld, initially ⊥.
At the beginning of each round, pi queries Ω for the cur-
rent leader and stores the identity in ld. We say that pi has
leader pl in round k if pi sends a message with ld = l. The
messages sent contain the following ﬁelds: ki, esti, ld. We
say that a process pl is majority leader for round k if a ma-
jority of processes send round k messages with ld = l. As
any two majorities have a non empty intersection, there can
be at most one majority leader at round k. Note that in asyn-
chronous runs there are periods with no majority leader.
A process pi can send two different types of messages
in round k. If pi has decided, then it broadcasts a decision
value, otherwise it broadcasts a PROP(ki, esti, ld) message
and we say that pi proposes esti in round ki.
At the end of round k (i.e. after receiving round k mes-
sages from n−f processes possibly including one from ld),
process pi updates its esti variable as follows: if pi receives
a value v from the majority leader of round k, then esti = v.
If there is no majority leader or the Ω module at pi suspects
ld for having crashed and pi receives n − 2f equal values
v, then pi picks v. Otherwise the estimate value is kept un-
changed. A process pi decides in round k if it receives n−f
equal values including one value from the majority leader.
Task 2: Upon receiving a decision message with value
v, pi forwards the decision value to the other processes and
then decides v. Thus, if a correct process decides, the re-
maining correct processes cannot block since they eventu-
ally receive the decision message.
5.2 Correctness
Lemma 1 (Termination) Every correct process decides.
Proof : We show that if some correct process never decides
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:34 UTC from IEEE Xplore.  Restrictions apply. 
then every correct process eventually decides; a contradic-
tion. If some correct process never decides then either some
correct process decides or no correct process decides.
1) Case a: Some correct process decides. Then, it broad-
cast a decision message (line 5). Since it is correct, ev-
ery correct process eventually receives the decision message
(line 16) and also decides. Thus, every correct process de-
cides, which contradicts the assumption.
2) Case b: No correct process decides. If some correct pro-
cess pi never decides, then either it is blocked in a round or
it executes an inﬁnite number of rounds.