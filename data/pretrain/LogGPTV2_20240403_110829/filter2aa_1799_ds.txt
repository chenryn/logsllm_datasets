8A9C7F79D39D}
Prevents discardable sections of any 
kernel module to be freed by the memory 
manager and blocks the loading of the 
target driver (where the shim is applied).
NT kernel
NDIS Shim
{49691313-1362-4e75-8c2a-
2dd72928eba5}
NDIS version compatibility shim (returns 
6.40 where applied to a driver).
Ndis.sys
SrbShim
{434ABAFD-08FA-4c3d-
A88D-D09A88E2AB17}
SCSI Request Block compatibility shim that 
intercepts the IOCTL_STORAGE_QUERY_
PROPERTY.
Storport.sys
CHAPTER 10 Management, diagnostics, and tracing
559
Shim Name
GUID
Purpose
Module
DeviceIdShim
{0332ec62-865a-4a39-b48f-
cda6e855f423}
Compatibility shim for RAID devices.
Storport.sys
ATADeviceIdShim
{26665d57-2158-4e4b-a959-
c917d03a0d7e}
Compatibility shim for serial ATA devices.
Storport.sys
Bluetooth Filter Power shim
{6AD90DAD-C144-4E9D-
A0CF-AE9FCB901EBD}
Compatibility shim for Bluetooth filter 
drivers.
Bthport.sys
UsbShim
{fd8fd62e-4d94-4fc7-8a68-
bff7865a706b}
Compatibility shim for old Conexant USB 
modem.
Usbd.sys
Nokia Usbser Filter Shim
{7DD60997-651F-4ECB-B893-
BEC8050F3BD7}
Compatibility shim for Nokia Usbser filter 
drivers (used by Nokia PC Suite).
Usbd.sys
A shim is internally represented through the KSE_SHIM data structure (where KSE stands for Kernel 
Shim Engine). The data structure includes the GUID, the human-readable name of the shim, and an 
array of hook collection (KSE_HOOK_COLLECTION data structures). Driver shims support different 
kinds of hooks: hooks on functions exported by the NT kernel, HAL, and by driver libraries, and on 
driver’s object callback functions. In phase 1 of its initialization, the Shim Engine registers the Microsoft-
Windows-Kernel-ShimEngine ETW provider (which has the {0bf2fb94-7b60-4b4d-9766-e82f658df540} 
GUID), opens the driver shim database, and initializes the remaining built-in shims implemented in the 
NT kernel (refer to Table 10-21).
To register a shim (through KseRegisterShimEx), the NT kernel performs some initial integrity checks 
on both the KSE_SHIM data structure, and each hook in the collection (all the hooks must reside in the 
address space of the calling driver). It then allocates and fills a KSE_REGISTERED_SHIM_ENTRY data 
structure which, as the name implies, represents the registered shim. It contains a reference counter 
and a pointer back to the driver object (used only in case the shim is not implemented in the NT kernel). 
The allocated data structure is linked in a global linked list, which keeps track of all the registered shims 
in the system.
The shim database 
The shim database (SDB) file format was first introduced in the old Windows XP for Application 
Compatibility. The initial goal of the file format was to store a binary XML-style database of programs 
and drivers that needed some sort of help from the operating system to work correctly. The SDB file 
has been adapted to include kernel-mode shims. The file format describes an XML database using tags. 
A tag is a 2-byte basic data structure used as unique identifier for entries and attributes in the data-
base. It is made of a 4-bit type, which identifies the format of the data associated with the tag, and a 
12-bit index. Each tag indicates the data type, size, and interpretation that follows the tag itself. An SDB
file has a 12-byte header and a set of tags. The set of tags usually defines three main blocks in the shim
database file:
I 
The INDEX block contains index tags that serve to fast-index elements in the database. Indexes
in the INDEX block are stored in increasing order. Therefore, searching an element in the index-
es is a fast operation (using a binary search algorithm). For the Kernel Shim engine, the elements
are stored in the INDEXES block using an 8-byte key derived from the shim name.
560 
CHAPTER 10 Management, diagnostics, and tracing
I 
The DATABASE block contains top-level tags describing shims, drivers, devices, and executables.
Each top-level tag contains children tags describing properties or inner blocks belonging to the
root entity.
I 
The STRING TABLE block contains strings that are referenced by lower-level tags in the
DATABASE block. Tags in the DATABASE block usually do not directly describe a string but
instead contain a reference to a tag (called STRINGREF) describing a string located in the string
table. This allows databases that contain a lot of common strings to be small in size.
Microsoft has partially documented the SDB file format and the APIs used to read and write it at 
https://docs.microsoft.com/en-us/windows/win32/devnotes/application-compatibility-database. All the 
SDB APIs are implemented in the Application Compatibility Client Library (apphelp.dll).
Driver shims
The NT memory manager decides whether to apply a shim to a kernel driver at its loading time, using 
the KseDriverLoadImage function (boot-loaded drivers are processed by the I/O manager, as discussed 
in Chapter 12). The routine is called at the correct time of a kernel-module life cycle, before either 
Driver Verifier, Import Optimization, or Kernel Patch protection are applied to it. (This is important; 
otherwise, the system would bugcheck.) A list of the current shimmed kernel modules is stored in a 
global variable. The KsepGetShimsForDriver routine checks whether a module in the list with the same 
base address as the one being loaded is currently present. If so, it means that the target module has 
already been shimmed, so the procedure is aborted. Otherwise, to determine whether the new module 
should be shimmed, the routine checks two different sources:
I 
Queries the “Shims” multistring value from a registry key named as the module being loaded
and located in the HKLM\System\CurrentControlSet\Control\Compatibility\Driver root key. The
registry value contains an array of shims’ names that would be applied to the target module.
I 
In case the registry value for a target module does not exist, parses the driver compatibility da-
tabase file, looking for a KDRIVER tag (indexed by the INDEX block), which has the same name
as the module being loaded. If a driver is found in the SDB file, the NT kernel performs a com-
parison of the driver version (TAG_SOURCE_OS stored in the KDRIVER root tag), file name, and
path (if the relative tags exist in the SDB), and of the low-level system information gathered at
engine initialization time (to determine if the driver is compatible with the system). In case any
of the information does not match, the driver is skipped, and no shims are applied. Otherwise,
the shim names list is grabbed from the KSHIM_REF lower-level tags (which is part of the root
KDRIVER). The tags are reference to the KSHIMs located in the SDB database block.
If one of the two sources yields one or more shims names to be applied to the target driver, the SDB 
file is parsed again with the goal to validate that a valid KSHIM descriptor exists. If there are no tags 
related to the specified shim name (which means that no shim descriptor exists in the database), the 
procedure is interrupted (this prevents an administrator from applying random non-Microsoft shims to 
a driver). Otherwise, an array of KSE_SHIM_INFO data structure is returned to KsepGetShimsForDriver.
CHAPTER 10 Management, diagnostics, and tracing
561
The next step is to determine if the shims described by their descriptors have been registered in the 
system. To do this, the Shim engine searches into the global linked list of registered shims (filled every 
time a new shim is registered, as explained previously in the “Shim Engine initialization” section). If a 
shim is not registered, the shim engine tries to load the driver that provides it (its name is stored in the 
MODULE child tag of the root KSHIM entry) and tries again. When a shim is applied for the first time, 
the Shim engine resolves the pointers of all the hooks described by the KSE_HOOK_COLLECTION data 
structures’ array belonging to the registered shim (KSE_SHIM data structure). The shim engine allocates 
and fills a KSE_SHIMMED_MODULE data structure representing the target module to be shimmed 
(which includes the base address) and adds it to the global list checked in the beginning. 
At this stage, the shim engine applies the shim to the target module using the internal 
KsepApplyShimsToDriver routine. The latter cycles between each hook described by the KSE_HOOK_
COLLECTION array and patches the import address table (IAT) of the target module, replacing the 
original address of the hooked functions with the new ones (described by the hook collection). Note 
that the driver’s object callback functions (IRP handlers) are not processed at this stage. They are modi-
fied later by the I/O manager before the DriverInit routine of the target driver is called. The original 
driver’s IRP callback routines are saved in the Driver Extension of the target driver. In that way, the 
hooked functions have a simple way to call back into the original ones when needed.
EXPERIMENT: Witnessing kernel shims
While the official Microsoft Application Compatibility Toolkit distributed with the Windows 
Assessment and Deployment Kit allows you to open, modify, and create shim database files, it 
does not work with system database files (identified through to their internal GUIDs), so it won’t 
be able to parse all the kernel shims that are described by the drvmain.sdb database. Multiple 
third-party SDB parsers exist. One in particular, called SDB explorer, is freely downloadable from 
https://ericzimmerman.github.io/.
In this experiment, you get a peek at the drvmain system database file and apply a kernel shim 
to a test driver, ShimDriver, which is available in this book’s downloadable resources. For this experi-
ment, you need to enable test signing (the ShimDriver is signed with a test self-signed certificate):
1.
Open an administrative command prompt and type the following command:
bcdedit /set testsigning on
2.
Restart your computer, download SDB Explorer from its website, run it, and open the
drvmain.sdb database located in %SystemRoot%\apppatch.
3.
From the SDB Explorer main window, you can explore the entire database file, orga-
nized in three main blocks: Indexes, Databases, and String table. Expand the DATABASES
root block and scroll down until you can see the list of KSHIMs (they should be located
after the KDEVICEs). You should see a window similar to the following:
EXPERIMENT: Witnessing kernel shims
While the official Microsoft Application Compatibility Toolkit distributed with the Windows 
Assessment and Deployment Kit allows you to open, modify, and create shim database files, it 
does not work with system database files (identified through to their internal GUIDs), so it won’t 
be able to parse all the kernel shims that are described by the drvmain.sdb database. Multiple 
third-party SDB parsers exist. One in particular, called SDB explorer, is freely downloadable from 
https://ericzimmerman.github.io/
https://ericzimmerman.github.io/.
https://ericzimmerman.github.io/
In this experiment, you get a peek at the drvmain system database file and apply a kernel shim
to a test driver, ShimDriver, which is available in this book’s downloadable resources. For this experi-
ment, you need to enable test signing (the ShimDriver is signed with a test self-signed certificate):
1.
Open an administrative command prompt and type the following command:
bcdedit /set testsigning on
2.
Restart your computer, download SDB Explorer from its website, run it, and open the 
drvmain.sdb database located in %SystemRoot%\apppatch. 
3.
From the SDB Explorer main window, you can explore the entire database file, orga-
nized in three main blocks: Indexes, Databases, and String table. Expand the DATABASES 
root block and scroll down until you can see the list of KSHIMs (they should be located 
after the KDEVICEs). You should see a window similar to the following:
562 
CHAPTER 10 Management, diagnostics, and tracing
4.
You will apply one of the Version lie shims to our test driver. First, you should copy the
ShimDriver to the %SystemRoot%\System32\Drivers. Then you should install it by typ-
ing the following command in the administrative command prompt (it is assumed that
your system is 64-bit):
sc create ShimDriver type= kernel start= demand error= normal binPath= c:\
Windows\System32\ShimDriver64.sys
5.
Before starting the test driver, you should download and run the DebugView tool,
available in the Sysinternals website (https://docs.microsoft.com/en-us/sysinternals/
downloads/debugview). This is necessary because ShimDriver prints some debug messages. 
6.
Start the ShimDriver with the following command:
sc start shimdriver
7. 
Check the output of the DebugView tool. You should see messages like the one shown
in the following figure. What you see depends on the Windows version in which you run
the driver. In the example, we run the driver on an insider release version of Windows
Server 2022:
4.
You will apply one of the Version lie shims to our test driver. First, you should copy the 
ShimDriver to the %SystemRoot%\System32\Drivers. Then you should install it by typ-
ing the following command in the administrative command prompt (it is assumed that 
your system is 64-bit): 
sc create ShimDriver type= kernel start= demand error= normal binPath= c:\
Windows\System32\ShimDriver64.sys
5.
Before starting the test driver, you should download and run the DebugView tool, 
available in the Sysinternals website (https://docs.microsoft.com/en-us/sysinternals/
downloads/debugview). This is necessary because ShimDriver prints some debug messages. 
downloads/debugview). This is necessary because ShimDriver prints some debug messages. 
downloads/debugview
6.
Start the ShimDriver with the following command:
sc start shimdriver
7.
Check the output of the DebugView tool. You should see messages like the one shown 
in the following figure. What you see depends on the Windows version in which you run 
the driver. In the example, we run the driver on an insider release version of Windows 
Server 2022:
CHAPTER 10 Management, diagnostics, and tracing
563
8.
Now you should stop the driver and enable one of the shims present in the SDB data-
base. In this example, you will start with one of the version lie shims. Stop the target
driver and install the shim using the following commands (where ShimDriver64.sys is
the driver’s file name installed with the previous step):
sc stop shimdriver
reg add "HKLM\System\CurrentControlSet\Control\Compatibility\Driver\
    ShimDriver64.sys" /v Shims /t REG_MULTI_SZ /d 
KmWin81VersionLie /f /reg:64
9.
The last command adds the Windows 8.1 version lie shim, but you can freely choose
other versions.
10. Now, if you restart the driver, you will see different messages printed by the DebugView
tool, as shown in the following figure:
11. This is because the shim engine has correctly applied the hooks on the NT APIs used for
retrieving OS version information (the driver is able to detect the shim, too). You should
be able to repeat the experiment using other shims, like the SkipDriverUnload or the
KernelPadSectionsOverride, which will zero out the driver unload routine or prevent the
target driver from loading, as shown in the following figure:
8.
Now you should stop the driver and enable one of the shims present in the SDB data-
base. In this example, you will start with one of the version lie shims. Stop the target 
driver and install the shim using the following commands (where ShimDriver64.sys is 
the driver’s file name installed with the previous step):
sc stop shimdriver 
reg add "HKLM\System\CurrentControlSet\Control\Compatibility\Driver\
    ShimDriver64.sys" /v Shims /t REG_MULTI_SZ /d 
KmWin81VersionLie /f /reg:64
9.
The last command adds the Windows 8.1 version lie shim, but you can freely choose 
other versions. 
10. Now, if you restart the driver, you will see different messages printed by the DebugView 
tool, as shown in the following figure:
11. This is because the shim engine has correctly applied the hooks on the NT APIs used for 
retrieving OS version information (the driver is able to detect the shim, too). You should 
be able to repeat the experiment using other shims, like the SkipDriverUnload or the 
KernelPadSectionsOverride, which will zero out the driver unload routine or prevent the 
target driver from loading, as shown in the following figure:
564 
CHAPTER 10 Management, diagnostics, and tracing
Device shims
Unlike Driver shims, shims applied to Device objects are loaded and applied on demand. The NT kernel 
exports the KseQueryDeviceData function, which allows drivers to check whether a shim needs to be 
applied to a device object. (Note also that the KseQueryDeviceFlags function is exported. The API is just 
a subset of the first one, though.) Querying for device shims is also possible for user-mode applications 
through the NtQuerySystemInformation API used with the SystemDeviceDataInformation information 
class. Device shims are always stored in three different locations, consulted in the following order:
1.
In the HKLM\System\CurrentControlSet\Control\Compatibility\Device root registry key, using
a key named as the PNP hardware ID of the device, replacing the \ character with a ! (with the
goal to not confuse the registry). Values in the device key specify the device’s shimmed data
being queried (usually flags for a certain device class).
2.
In the kernel shim cache. The Kernel Shim engine implements a shim cache (exposed through
the KSE_CACHE data structure) with the goal of speeding up searches for device flags and data.
3.
In the Shim database file, using the KDEVICE root tag. The root tag, among many others (like
device description, manufacturer name, GUID and so on), includes the child NAME tag contain-
ing a string composed as follows: . The KFLAG or KDATA children tags
include the value for the device’s shimmed data.
If the device shim is not present in the cache but just in the SDB file, it is always added. In that way, 
future interrogation would be faster and will not require any access to the Shim database file.  
Conclusion
In this chapter, we have described the most important features of the Windows operating system 