插入垃圾代码，导致反汇编"code spaghetti"。
使用Domain generation algorithm来规避网络检测。
**Necurs木马**
Necurs
是一个木马程序，它可以控制系统并传递给其他恶意软件。Necurs是最大的僵尸网络之一，在2016年已拥有超过600万个节点。Necurs于2016年开始传播Locky。
图18：Necurs采用多种机制来规避检测和分析。（哈希： 22d745954263d12dfaf393a802020764）
图 19：CPUID指令返回有关CPU的信息，并允许恶意软件来检测它自己是否运行在虚拟环境之中。如果是的话，该恶意软件肯定不会运行了。
图 20： 第二种规避技术使用Windows
API调用GetTickCount来检索系统已启动的时间。它然后执行几个操作并再次检索消耗的时间。这种技术用于检测调试工具。如果检索的时间比预期要长，那么该文件目前正在被调试。恶意软件将终止该进程或导致系统崩溃。
图 21： 一种老但仍然有效的规避技术是查询VMware所使用的输入/输出的通信端口。恶意软件可以使用magic number
“VMXh”与x86“IN”指令来查询这个端口。在执行期间，该IN指令被限制在虚拟机中进行仿真。从指令返回的结果被存储在寄存器ebx中，然后与magic
number "VMXh"相比较。如果结果匹配，恶意软件则是运行在VMware之上，它将终止该进程或试图导致系统崩溃。
图 22：VMCPUID 指令类似于CPUID，不过该指令只执行在某些虚拟机之上。如果不执行VMCPUID指令，它会导致系统崩溃，以防止虚拟机的分析。
图23：VPCEXT指令（可视属性的容器扩展器）是另一种被Necurs用来检测虚拟系统的抗虚拟机的技巧。这种技术并无相关记录，且只有几个僵尸主机使用。如果该指令的执行不生成异常的话，则判定恶意软件运行虚拟机之上。
**Fileless malware**
一些恶意软件感染系统并非将文件写入磁盘，并以此来规避许多类型的检测。我们曾在 McAfee Labs威胁报告：2015年11月首次提及Fileless
malware。
现在，我们发现了被用作感染载体的PowerShell。在一个样本中，一个简单的JavaScript
文件运行一个经过混淆处理的PowerShell命令，从一个外部的IP地址下载已经包装过的文件。该文件绕过所有保护将恶意的DLL注入到合法的进程之中。这种恶意软件类型并非完全没有文件，但它是仍然非常有效。
下面的样本（哈希： f8b63b322b571f8deb9175c935ef56b4）显示了感染的过程：
图24：PowerShell 命令下载NSIS的打包文件（agzabf.exe、哈希：
c52950316a6d5bb7ecb65d37e8747b46），将monkshood.dll（哈希：
895c6a498afece5020b3948c1f0801a2）
注入到进程explorer.exe中。在这里使用的规避技术是DLL注入，它将代码注入到正在运行的进程中。
**规避技术趋势**
最常见的规避技术包括：
混淆处理：保护数据、变量和网络通信，随机化变量或函数的名称。它可以使用XOR或任何其他编码技术来执行。
环境检查：规避分析，恶意软件检测与虚拟环境相关的工具或工序。
沙箱检测：恶意软件执行磁盘检查，以检测与沙箱相关的文件或进程。
以下的统计来自Virus Total和McAfee，这些样本取自已知的、含有沙盒规避的技术。
**沙箱规避技术**
恶意软件使用许多其他技术以规避检查。检测监测和Windows钩子（更改内部Windows
功能的行为）十分常见。提升权限对于禁用反恶意软件的工具、或是需要管理员权限来执行其他操作来说十分普遍。
**其他规避技术**
信息安全行业正在开发出新的、基于机器学习的检测技术。它能够检验行为，并对可执行文件是否恶意进行了预测。
图 25：对机器学习的兴趣一直在稳步增长。 资料来源： 谷歌趋势。
信息安全行业对机器学习高度感兴趣，攻击者亦然。今年3月，安全研究人员观察到了第一个恶意软件样本–Cerber勒索软件，
其规避检测就是基于机器学习的。Cerber在感染的每个阶段都使用到多个文件，动态地将它们注入正在运行的进程之中。这些攻击者所面临的挑战是：机器学习用来检测恶意文件的方式是基于特征，而非签名。在此样本中，Cerber使用单独的加载器来注入载荷，而不是在其中运行一个例程。虽然不是靠传统的反恶意软件引擎，但是这种技术却能允许Cerber通过机器学习，以未被发现的方式运行。
另一个日益增长的规避技术是固件感染，我们预测：攻击物联网的设备将会非常的普遍。
将恶意代码插入固件是一直非常有效的、规避检测的方式。固件的恶意软件可以控制许多系统组件，包括键盘、麦克风和文件系统。操作系统不能检测到它，因为感染发生在Ring-1，即内核的最深处，恶意软件可以享有许多特权，而且几乎没有什么对安全的检查。
为了检测到这种威胁，并轻松地分析固件，McAfee高级威胁研究（McAfee Advanced Threat
Research）发布了开源工具–Chipsec。你可以通过检查白名单，来查找固件是否已被如下的命令所破坏：
图26：用Chipsec框架来扫描转存固件。
图 27： 用比对白名单，来检查扫描转存的固件，以检测任何被修改之处。
**  
**
**针对规避类恶意软件的保护**
为了更好地应对规避类恶意软件，首当其冲就是要学习有关恶意软件的规避技术。
我们要基于如下三个基本部分，来建立安全的程序，以防护规避类恶意软件。
人员：安全从业人员必须接受培训，正确应对安全事件并正确的掌握当前的安全技术。攻击者通常使用社会工程来感染用户。如果没有内部的宣传和培训，用户很可能会将自己的Windows系统留给攻击者胡作非为。
流程：结构清晰，内部流程必须到位，以提高安全从业人员的效率。安全最佳实践（更新、备份、治理、情报、事件响应计划等）是造就一个强大且有效的安全团队的关键要素。
技术：技术能给团队和流程提供支持。为了能够适应新的威胁，技术应持续培训和增强。
**  
**
**有效的策略和程序，以保护免受恶意软件的攻击**
应对恶意软件的感染，最重要防御来自用户。用户必须意识到，下载和安装来自具有潜在风险资源的应用程序，所带来的风险。用户也必须认识到，恶意软件可能会在浏览网页时被无意中进行下载。
始终保持web浏览器和其加载项的更新，不断升级终端和网关上的反病毒软件到最新的版本。
不许将那些并非来自企业IT安全团队，或是未被其认证过系统连接到受信任的网络之中。规避类恶意软件会很容易从未受保护的系统扩散到受信任的网络中。
规避类恶意软件可以被攻击者用木马的方式隐藏在合法的软件之内。为了防止此类攻击的得逞，我们强烈建议使用加强的软件交付和分发机制。企业建立一个应用程序的中央存储库，以便用户从中下载已批准的软件。这种方式始终是一种最佳实践。
如果碰到用户要求被授权去安装那些未被IT安全团对事先验证过的应用程序的情况，应该教育用户只安装那些来自已知的卖家、且有受信任的签名的应用程序。网上提供的、许多看似"无害的"应用程序，其进程往往会嵌入了规避类恶意软件。
避免应用程序下载一下非web类型的资源。从Usenet组、IRC频道、即时通讯的客户端或端对端系统等途径，下载到恶意软件的可能性是非常高的。IRC和即时通讯软件中的网站链接也经常会指向一些恶意软件的下载。
实施针对网络钓鱼攻击的预防教育方案，因为恶意软件通常通过网络钓鱼攻击来进行传播。
利用威胁情报源与反恶意软件技术相结合。这种结合将有助于加快威胁的检测。
**结论**
恶意软件为了执行其恶意操作，必须保持隐蔽且不会被检测到。随着信息安全技术变得越来越复杂，规避技术的复杂程度也有所跟进。这种竞争催生了一个强大的、且具有最好规避技术的地下市场，同时也包括一些完全无法被检测到的恶意软件。它们其中一些服务甚至使用到了信息安全行业至今所未知的规避技术。
恶意软件的规避技术将继续发展，而且如今已经被部署到了攻击的任何阶段。如前面的Dridex和Locky所示，它们中的一些虽使用相同的技术来传播，但都能够规避分析与检测。而传统的规避技巧仍被一些知名的恶意软件所广泛使用着，并发挥着效力。
为了防止规避类恶意软件，我们必须首先了解它们。我们必须研究每一个案例，以探究安全技术为什么没能成功阻止攻击的深层原因。