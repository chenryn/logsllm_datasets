like protocols (see Section 6.2). In this case, R0(n) is true
only when n is less than a given threshold t.
Another useful tool concerns RFID protocols which have
been “enriched” with an extra round from the reader to the
tag which does not modify the tag state.
Lemma 2. Let S and S0 be two RFID protocols in which
S0 is enriched from S by simply adding an extra message
from the reader to the tag for mutual authentication. We
assume that the ﬁnal message does not modify the tag state.
If S is correct, then S0 is correct as for the reader output.
We further recall the following lemma form [14].
Lemma 3. We consider an RFID scheme with the prop-
erty that whenever a legitimate tag and the reader have some
matching conversation, the reader does not output ⊥. If the
scheme oﬀers tag authentication, then narrow-forward (resp.
narrow-weak) privacy implies forward (resp. weak) privacy.
4.
IMPOSSIBILITY RESULT
We ﬁrst show that our basic model for tags does not leave
any room for privacy whenever corruption is allowed.
Theorem 1. In the basic model where corruption reveals
the entire tag state, no RFID scheme providing secure reader
authentication is narrow-forward private.
Proof. We consider the following narrow-forward adver-
sary.
1: create two legitimate tags ID0 and ID1
2: draw one at random and get vtag
3: execute a protocol between vtag and the reader but stops
before the last SendTag(vtag, m) query (if the protocol
makes it unclear which message is the last one, just guess
it) and stores m
4: free vtag
5: draw tags ID0 and ID1
6: corrupt them and get their states S0 and S1
7: set a bit b such that simulating a tag of state Sb with
the incoming message m leads to output OK (if no or
both Sb work, set b to a random bit)
8: get T and output whether T (vtag) = IDb
Assuming that the SendTag query is really the last one, due
to reader authentication we know that the tag outputs OK
with negligible probability when fed with message diﬀerent
from m or with a non-ﬁnal message m and ⊥ with negli-
gible probability when fed with the ﬁnal message m. So,
if p is the probability for guessing the last query right, the
2 (1− p) = 1+p
adversary wins with probability close to p + 1
2 .
For any blinded adversary, tags run no protocol so there
is a negligible probability for getting an m leading to OK,
the probability for winning is close to 1
2 . Hence, the advan-
tage is p/2 which is non-negligible for any blinder. So, the
adversary is signiﬁcant.
To ﬁx this impossibility problem, we must change the tag
model. Indeed, from now on we assume that some tempo-
rary memory is automatically erased from the tag as soon
as the tag is put back in the set of free tags. This is quite
a reasonable assumption since temporary memory requires
power to be maintained. It further thwart the previous at-
tack since step 4 will ﬂush out the information about the
internal state which is needed in step 7.
5. CASE STUDIES
In this section, we study several protocols based on sym-
metric cryptography only. We notice that they all fail to
provide either weak privacy or narrow-forward privacy. Our
results do not contradict the security and privacy results
from their authors. As a matter of fact, this was already
made clear from their papers. Our point is that all proto-
cols so far are constant in not achieving both properties. It
thus seems to be hard to address weak privacy and narrow-
forward privacy at the same time by using only symmetric
cryptography. So far, we do not know whether this is feasible
or not.
5.1 Weak Privacy Failures
In [12], Tsudik proposed YA-TRAP and YA-TRAP*, two
authentication protocols. These protocols are both based
on timestamps, which makes the system vulnerable to de-
nial of service attacks.
In YA-TRAP, the reader sends a
random challenge Rr, together with a reader timestamp Tr.
The tag checks Tr, and if it is valid (reader’s timestamp
should be higher than tag’s timestamp, but should be lower
than the maximum value Tmax), it updates its timestamp Tt,
and computes the response to the reader’s challenge, using
a MAC and its speciﬁc secret Ki. For the authentication,
it picks a random challenge Rt, and computes a MAC us-
ing the two random challenges (Rr, Rt) and Ki. The reader
veriﬁes the two MACs in the database.
For YA-TRAP*, Tsudik introduced a denial of service re-
sistance, which in fact only limits the period in which the
tag is out of service. As the signiﬁcant adversaries for weak
privacy for the two protocols are similar, we present the one
for YA-TRAP for more readability.
We can perform the same kind of attack as the one of
Juels-Weis against the Modiﬁed Ohkubo-Suzuki-Kinoshita
protocol [6]. The diﬀerence appears in the manners in which
the tag is desynchronized with the reader: in the initial case
(Juels-Weis attack) it is desynchronized by several fake au-
thentication request, while in this case it can be easily desyn-
chronized by sending as the timestamp, the maximum pos-
sible value. In this case, the tag will update its timestamp
value to the maximum possible value, so future authentica-
tion requests will clearly fail. The formal attack is:
1: create two legitimate tags ID0 and ID1
2: (vtag0,.) ← GetTag(ID0)
3: SendTag(vtag0, Tmax, Rr)
4: Free(vtag0)
5: draw one tag at random and get vtag
6: π ← Launch
7: Execute(vtag)
8: x ← Result(π)
9: output whether T (vtag) = IDx
This is clearly a signiﬁcant adversary for weak privacy.
Thus, YA-TRAP is not weak private, and furthermore nei-
ther is YA-TRAP*. It can be observed that the tag speciﬁc
secret Ki is not updated, so narrow-forward privacy is not
achieved either.
Due to the Juels-Weis attack [6] on OSK [10, 11], the
protocol based on OSK from Section 6 does not achieve weak
privacy. (See [14].)
5.2 Narrow-Forward Privacy Failures
Our OSK-based protocol from Section 6 achieves narrow-
forward privacy but not weak privacy because the tag state
is updated before the tag authenticated the reader. If we
now consider the same protocol in which the tag state is up-
dated after the reader authentication, we show that narrow-
forward privacy is no longer achieved. Let us consider the
following adversary.
1: create two legitimate tags ID0 and ID1
2: (vtag0,.) ← GetTag(ID0)
3: π ← Launch
4: a ← SendReader(π)
5: c ← SendTag(vtag0, a)
6: Free(vtag0)
7: d ← SendReader(π, c)
8: draw one tag at random and get vtag
9: S ← Corrupt (vtag)
10: if d = F 0(S, a) then
x ← 0
11:
12: else
x ← 1
13:
14: end if
15: output whether T (vtag) = IDx
We have Pr[A wins] ≈ 1. For any blinder B, Pr[AB wins] =
1
2 . Therefore the adversary is a signiﬁcant narrow-forward
adversary (no active action after corruption and no Result
query), so this protocol would not be narrow-forward pri-
vate.
We now present the attack against the O-FRAP proto-
col [3]. This protocol is initiated by the reader which sends
a random value rsys. The tag uses a pseudo-random func-
tion F to compute four values ν1, ν2, ν3, ν4 from the tag’s key
ka
tag, rsys and a tag’s random value rtag. The ﬁrst value, ν1
is used to update rtag, the second one, ν2 is sent by the tag
to the reader in order to authenticate itself; ν3 is sent by the
reader, to authenticate itself for the tag and ν4 is used to
update the tag’s internal key ka
tag. The reader keeps a copy
of the previous value of the tag key in order to be able to
authenticate the tag, even if for any reason, the tag did not
update its key. The problem appears when the last message
of the protocol (that authenticate the reader) is blocked. We
present a signiﬁcant narrow-forward adversary against this
protocol:
1: create two legitimate tags ID0 and ID1
2: draw one at random and get vtag
3: (rtag, ν2) ← SendTag(rsys)
4: Free(vtag)
5: (vtag0,.) ← GetTag(ID0)
6: K ← Corrupt (vtag0)
7: if (., ν2, ., .) = F (K, rsys, rtag) then
x ← 0
8:
9: else
x ← 1
10:
11: end if
12: output whether T (vtag) = IDx
We have Pr[A wins] ≈ 1. For any blinder B, Pr[AB wins] =
1
2 . Therefore the adversary is a signiﬁcant narrow-forward
Tag
state: S
pick b ∈ {0, 1}β
c = FS(0, a, b)
check d = FS(1, a, b)
output: OK iﬀ check
(S = K)
d
System
{. . . , (ID, K), . . .}
a
b,c
←−−−−−−−−−−−−−−− pick a ∈ {0, 1}α
−−−−−−−−−−−−−−−→ ﬁnd (ID, K) s.t. c = FK (0, a, b)
if not found, set K to random
←−−−−−−−−−−−−−−− d = FK (1, a, b)
output: ID or ⊥ if not found
Figure 1: A Weak-Private RFID Scheme based on PRF.
adversary (no active action after corruption and no Result
query), so the scheme is not narrow-forward private.
pick a random r1
SendTag(vtag0, r1)
wait for the tag’s response
pick a random σ1
SendTag(vtag0, σ1)
In [7], Lim and Kwon proposed an authentication pro-
tocol that we will call LK. It is based on the OSK key
chain protocol.
In order to avoid key desynchronization,
they introduce a second key chain, which is updated by
the reader and veriﬁed by the tag. The problem appears
when an adversary queries a tag more than m times: the
tag state becomes static until the ﬁrst correct authentica-
tion with the reader. During this time, there exists a sig-
niﬁcant narrow-forward adversary A, which we present be-
low:
1: create two legitimate tags ID0 and ID1
2: (vtag0,.) ← GetTag(ID0)
3: for i = 1 to m + 1 do
4:
5:
6:
7:
8:
9: end for
10: π ← Launch
11: r1 ← SendReader(π)
12: (ti, r2, σ1) ← SendTag(vtag0, a)
13: Free(vtag0)
14: draw one tag at random and get vtag
15: si ← Corrupt(vtag)
16: if σ1 = ext(f (si, r1 k r2), l1) then
x ← 0
17:
18: else
x ← 1
19:
20: end if
21: output whether T (vtag) = IDx
We have Pr[A wins] ≈ 1. For any blinder B, we have
Pr[AB wins] = 1
2 . Therefore the adversary is a signiﬁcant
narrow-forward adversary (no active action after corruption
and no Result query), so LK protocol is not narrow-forward
private.
6. ENRICHED PROTOCOLS
6.1 Weak Privacy based on PRF
A pseudorandom function family (PRF) is a family of
functions (Fs,K )K∈{0,1}k(s) from {0, 1}δ(s) to {0, 1}γ(s) such
that k, δ, γ are polynomially bounded, 2−δ(s), and 2−γ(s) are
negligible, Fs,K (x) is computable in polynomial time, and
any distinguisher with polynomial complexity has a negligi-
ble advantage for distinguishing an oracle simulating Fs,K
initialized with a random K from an oracle initialized with
a truly random function. (For more readability we omit the
parameter s.)
We enrich the protocol from [14] based on a pseudorandom
function to achieve security and weak privacy with an extra
round. We follow Fig. 1 with α = β = δ−1
2 . The tag setup
SetupTag(ID) picks a random k-bit key K and sets S = K.
1. The reader picks a random α-bit string a and sends it
to the tag.
2. The tag with state S sends a random β-bit string b
and c = FS(0, a, b) to the reader.
3. The reader looks for (ID, K) in the database such that
c = FK (0, a, b), gets ID, and sends back d = FK (1, a, b).
(If no entry is found, d is computed with a random K.)
4. The reader checks d to authenticate the reader.
The protocol is equivalent to the ISO/IEC 9798-2 3-pass
mutual authentication protocol that is used in [5] and to
the CR building block of [8]. It originally comes from the
variant from Weis et al. [15].
Theorem 2. If F is a PRF, the above RFID scheme is
secure and weak private.
The original scheme from [14] is not narrow-forward. The