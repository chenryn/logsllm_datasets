### Trusted Systems and CPU Extensions

Trusted systems often require additional hardware support, such as trusted storage, secure counters, and secure peripherals. However, despite these needs, CPU designers continue to propose extensions aimed at building trusted systems that still face significant limitations. This section aims to highlight these limitations in the context of Intel Software Guard Extensions (SGX), a new and emerging technology.

#### Intel SGX Shortcomings

**12.1 Intel SGX Overview**

Intel SGX [25] is a set of extensions for Intel processors designed to create a sandboxed environment for running application-level code isolated from the rest of the system. Similar to ARM TrustZone's secure world, Intel SGX allows applications to create enclaves that are protected from the operating system and other platform software. All memory allocated to an enclave is hardware-encrypted, unlike the secure world in ARM. However, SGX does not provide I/O support; all interrupts are handled by untrusted code.

**Shortcomings of Intel SGX for Trusted Systems:**

1. **Lack of Trusted Storage:**
   - While code executing inside an enclave can encrypt its state, encryption alone cannot protect against rollback attacks. The current Intel SGX specification lacks provisions for rollback protection of persisted state.

2. **Lack of Secure Counter:**
   - A secure counter is essential for building secure systems. For example, a rollback-resilient storage system could be constructed using encryption and a secure counter. Unfortunately, it is challenging for a CPU to offer a secure counter without additional hardware support, such as an eMMC storage controller with an RPMB partition.

3. **Lack of Secure Clock:**
   - SGX does not specify a secure clock. Providing a secure clock is difficult without extra hardware assistance.

4. **Side-Channel Dangers:**
   - SGX enclaves only protect code running in ring 3. An untrusted OS manages resource tasks, which opens up a large surface for side-channel attacks. Recent research has demonstrated several such attacks against Intel SGX [57].

### Related Work

Previous efforts closely related to our work include Nokia OnBoard credentials (ObC), Mobile Trusted Module (MTM), and earlier software implementations of TPMs.

- **Nokia OnBoard Credentials (ObC):**
  - ObC [29] is a trusted execution runtime environment that leverages Nokiaâ€™s implementation of ARM TrustZone. It can execute programs written in a modified variant of the LUA scripting language or in the underlying runtime bytecode. Different scripts running in ObC are protected from each other by the underlying LUA interpreter. A more recent effort ported the .NET framework to TrustZone [45, 46] using techniques similar to ObC.

- **fTPM vs. ObC:**
  - While fTPM serves as the reference implementation of a firmware TPM for ARM TrustZone, ObC is proprietary to Nokia. Third-party code must be signed by Nokia to run inside TrustZone. In contrast, fTPM offers TPM 2.0 primitives to any application. Although TPM primitives are less general than a full scripting language, both researchers and industry have found them useful in many secure systems. Recognizing the flexibility of the TPM platform, ObC now offers primitives more compatible with the TPM specification [15].

- **Mobile Trusted Module (MTM):**
  - MTM [51] is a specification similar to a TPM but tailored for mobile devices. Previous work explored possible implementations of MTM for mobile devices equipped with secure hardware like ARM TrustZone, smartcards, and Java SecureElements [12, 13]. These works acknowledged the limitations of ARM TrustZone for implementing MTM as future work [12]. However, MTMs have not progressed beyond the specification stage in the Trusted Computing Group. If MTMs were to become a reality, our techniques would remain relevant for building a firmware MTM.

- **Recent Articles and Implementations:**
  - A recent article [34] provides a high-level description of the work needed to implement TPM 2.0 in both hardware and software. Like the fTPM, it highlights the need for a replay-protected memory block partition to guard against replay attacks. However, this article appeared after the fTPM was already in use in mobile devices, and it is unclear if any implementation of their architecture exists.
  - IBM maintains a software implementation of TPM 1.2 [24], and an independent effort implemented a TPM 1.2 emulator without leveraging any secure hardware [50]. This emulator was intended for debugging and testbeds. We are unaware of efforts to integrate these earlier implementations into mobile devices.

- **Virtualized TPM Implementations:**
  - Virtual TPMs are necessary in virtualized environments where multiple guest operating systems might want to share the physical TPM without trusting each other. Several designs of virtual TPMs have been proposed [7, 16].

- **Additional Efforts:**
  - A recent survey [4] describes additional efforts in building trusted runtime execution environments for mobile devices based on various forms of hardware, including physically uncloneable functions, smartcards, and embedded devices. The GlobalPlatform [20] consortium has also started to develop a standard for trusted runtime execution environments on various platforms, including ARM [3].

### Conclusions

This paper demonstrates that the limitations of CPU-based security architectures, such as ARM TrustZone, can be overcome to build software systems with security guarantees similar to those of dedicated trusted hardware. We use three different approaches to address these challenges: requiring additional hardware support, making design compromises without affecting security, and slightly changing command semantics.

We describe a software-only implementation of a TPM chip that requires no application-level changes or changes to OS components (other than drivers). Our implementation is the reference implementation of TPM 2.0 used in millions of smartphones and tablets.

### Acknowledgements

We would like to thank Andrew Baumann, Weidong Cui, Roxana Geambasu, Jaeyeon Jung, and Angelos Keromytis for feedback on earlier drafts of this paper. We are also grateful to Jiajing Zhu for her help with the TPM 2.0 simulator, and numerous other collaborators who contributed to the firmware TPM effort. Finally, we would like to thank the anonymous reviewers for their feedback on the submission.

### References

[References listed here, formatted as in the original text]

---

This version of the text is more structured, coherent, and professional, with clear headings and subheadings to guide the reader through the content.