cient in many practical scenarios. As described earlier
in Section 3.2, trusted systems need additional hardware
support, such as support for trusted storage, secure coun-
ters, and secure peripherals.
Unfortunately, CPU designers continue to put forward
CPU extensions aimed at building trusted systems that
suffer from similar limitations. This section’s goal is to
describe these limitations in the context of a new, up-
and-coming technology called Intel Software Guard Ex-
tensions (SGX). In the absence of additional hardware
support for trusted systems, our brief discussion of SGX
will reveal shortcomings similar to those of TrustZone.
Intel SGX Shortcomings
12.1
Intel SGX [25] is a set of extensions to Intel processors
designed to build a sandboxing mechanism for running
application-level code isolated from the rest of the sys-
tem. Similar to ARM TrustZone’s secure world, with In-
tel SGX applications can create enclaves protected from
the OS and the rest of the platform software. All memory
USENIX Association  
25th USENIX Security Symposium  853
13
allocated to an enclave is hardware encrypted (unlike the
secure world in ARM). Unlike ARM TrustZone, SGX
does not offer any I/O support; all interrupts are handled
by the untrusted code.
SGX has numerous shortcomings for trusted systems
such as the fTPM:
1. Lack of trusted storage. While code executing inside
an enclave can encrypt its state, encryption cannot pro-
tect against rollback attacks. Currently, the Intel SGX
speciﬁcation lacks any provision to rollback protection
against persisted state.
2. Lack of a secure counter. A secure counter is im-
portant when building secure systems. For example, a
rollback-resilient storage system could be built using en-
cryption and a secure counter. Unfortunately, it is difﬁ-
cult for a CPU to offer a secure counter without hardware
assistance beyond the SGX extensions (e.g., an eMMC
storage controller with an RPMB partition).
3. Lack of secure clock. SGX leaves out any speciﬁ-
cation of a secure clock. Again, it is challenging for the
CPU to offer a secure clock without extra hardware.
4. Side-channel dangers. SGX enclaves only protect
code running in ring 3. This means that an untrusted
OS is responsible for resource management tasks, which
opens up a large surface for side-channel attacks. Indeed,
recent work has demonstrated a number of such attacks
against Intel SGX [57].
13 Related Work
Previous efforts closest to ours are Nokia OnBoard cre-
dentials (ObC), Mobile Trusted Module (MTM), and
previous software implementations of TPMs. ObC [29]
is a trusted execution runtime environment leveraging
Nokia’s implementation of ARM TrustZone. ObC can
execute programs written in a modiﬁed variant of the
LUA scripting language or written in the underlying run-
time bytecode. Different scripts running in ObC are
protected from each other by the underlying LUA in-
terpreter. A more recent similar effort ported the .NET
framework to TrustZone [45, 46] using techniques simi-
lar to ObC.
While the fTPM serves as the reference implementa-
tion of a ﬁrmware TPM for ARM TrustZone, ObC is a
technology proprietary to Nokia. Third-parties need their
code signed by Nokia to allow it to run inside TrustZone.
In contrast, the fTPM offers TPM 2.0 primitives to any
application. While TPM primitives are less general than
a full scripting language, both researchers and industry
have already used TPMs in many secure systems demon-
strating its usefulness. Recognizing the TPM platform’s
ﬂexibility, ObC appears to have recently started to offer
primitives more compatible with those of the TPM spec-
iﬁcation [15].
The Mobile Trusted Module (MTM) [51] is a speciﬁ-
cation similar to a TPM but aimed solely at mobile de-
vices. Previous work investigated possible implementa-
tions of MTM for mobile devices equipped with secure
hardware, such as ARM TrustZone, smartcards, and Java
SecureElements [12, 13]. These related works acknowl-
edged upfront that the limitations of ARM TrustZone for
implementation MTM remain future work [12]. Unfortu-
nately, MTMs have not gone past the speciﬁcation stage
in the Trusted Computing Group. As a result, we are un-
aware of any systems that make use of MTMs. If MTMs
were to become a reality, our techniques would remain
relevant in building a ﬁrmware MTM.
A more recent article presents a high-level description
of the work needed to implement TPM 2.0 both in hard-
ware and in software [34]. Like the fTPM, the article
points out the need of using a replay-protected memory
block partition to protect against replay attacks. How-
ever, this article appeared much later, after the fTPM was
launched in mobile devices. It is unclear whether any im-
plementation of their architecture exists.
IBM has been maintaining a software implementation
of TPM 1.2 [24]. An independent effort implemented
a TPM 1.2 emulator without leveraging any secure hard-
ware [50]. This emulator was aimed at debugging scenar-
ios and testbeds. We are unaware of efforts to integrate
any of these earlier implementations into mobile devices.
Another area of related work is building virtualized
TPM implementations. Virtual TPMs are needed in vir-
tualized environments where multiple guest operating
systems might want to share the physical TPM without
having to trust each other. Several designs of virtual
TPMs have been proposed [7, 16].
Finally, a recent survey describes additional efforts in
building trusted runtime execution environments for mo-
bile devices based on various forms of hardware, includ-
ing physically uncloneable functions, smartcards, and
embedded devices [4]. A recent industrial consortium
called GlobalPlatform [20] has also started to put to-
gether a standard for trusted runtime execution environ-
ments on various platforms, including ARM [3].
14 Conclusions
This paper demonstrates that the limitations of CPU-
based security architectures, such as ARM TrustZone,
can be overcome to build software systems with secu-
rity guarantees similar to those of dedicated trusted hard-
ware. We use three different approaches to overcome
these challenges: requiring additional hardware support,
making design compromises without affecting security,
and slightly changing command semantics.
This paper describes a software-only implementation
of a TPM chip. Our software-only TPM requires no
854  25th USENIX Security Symposium 
USENIX Association
14
application-level changes or changes to OS components
(other than drivers). Our implementation is the reference
implementation of TPM 2.0 used in millions of smart-
phones and tablets.
Acknowledgements We would like to thank Andrew
Baumann, Weidong Cui, Roxana Geambasu, Jaeyeon
Jung, and Angelos Keromytis for feedback on earlier
drafts of this paper. We are also grateful to Jiajing Zhu
for her help with the TPM 2.0 simulator, and numerous
other collaborators who contributed to the ﬁrmware TPM
effort. Finally, we would like to thank the anonymous re-
viewers for their feedback on the submission.
References
[1] ARM Security Technology – Building a Secure System using
TrustZone Technology. ARM Technical White Paper, 2005-2009.
[2] Virtualization is Coming to a Platform Near You. ARM Technical
White Paper, 2010-2011.
[3] ARM.
GlobalPlatform based Trusted Execution Environ-
http://community.arm.
ment and TrustZone Ready.
com/servlet/JiveServlet/previewBody/8376-
102-1-14233/GlobalPlatform%20based%
20Trusted%20Execution%20Environment%20and%
20TrustZone%20Ready%20-%20Whitepaper.pdf.
[4] ASOKAN, N., EKBERG, J.-E., KOSTIANEN, K., RAJAN, A.,
ROZAS, C., SADEGHI, A.-R., SCHULZ, S., AND WACHS-
MANN, C. Mobile Trusted Computing. Proceedings of IEEE
102, 1 (2014), 1189–1206.
[5] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding Ap-
plications from an Untrusted Cloud with Haven. In Proc. of 11th
USENIX Symposium on Operating Systems Design and Imple-
mentation (OSDI) (Broomﬁeld, CO, 2014).
[6] BECHER, M., DORNSEIF, M., AND KLEIN, C. N. FireWire - all
your memory are belong to us. In Proc. of CanSecWest Applied
Security Conference (2005).
[7] BERGER, S., CCERES, R., GOLDMAN, K. A., PEREZ, R.,
SAILER, R., AND VAN DOORN, L. vtpm: Virtualizing the trusted
platform module. In Proc. of the 15th USENIX Security Sympo-
sium (2006).
[8] BOILEAU, A. Hit by a Bus: Physical Access Attacks with
Firewire. In Proc. of 4th Annual Ruxcon Conference (2006).
[9] CHEN, C., RAJ, H., SAROIU, S., AND WOLMAN, A. cTPM:
A Cloud TPM for Cross-Device Trusted Applications. In Proc.
of 11th USENIX Symposium on Networked Systems Design and
Implementation (NSDI) (Seattle, WA, 2014).
[10] COLP, P., ZHANG, J., GLEESON, J., SUNEJA, S., DE LARA,
E., RAJ, H., SAROIU, S., AND WOLMAN, A. Protecting Data
on Smartphones and Tablets from Memory Attacks. In Proc. of
20th International Conference on Architectural Support for Pro-
gramming Languages and Operating Systems (ASPLOS) (Istan-
bul, Turkey, 2015).
[11] DATALIGHT. What is eMMC. http://www.datalight.
com/solutions/technologies/emmc/what-is-
emmc.
[12] DIETRICH, K., AND WINTER, J.
Implementation Aspects of
Mobile and Embedded Trusted Computing. Proc. of 2nd Interna-
tional Conference on Trusted Computing and Trust in Informa-
tion Technologies (TRUST), LNCS 5471 (2009), 29–44.
[13] DIETRICH, K., AND WINTER, J. Towards Customizable, Ap-
plication Speciﬁc Mobile Trusted Modules. In Proc. of 5th ACM
Workshop on Scalable Trusted Computing (STC) (Chicago, IL,
2010).
[14] ECRYPTFS. eCryptfs – The enterprise cryptographic ﬁlesystem
for Linux. http://ecryptfs.org/.
[15] EKBERG, J.-E. Mobile information security with new standards:
GlobalPlatform/TCG/Nist-root-of-trust. Cyber Security and Pri-
vacy, EU Forum, 2013.
[16] ENGLAND, P., AND L ¨OSER, J. Para-virtualized tpm sharing.
Proc. of 1st International Conference on Trusted Computing and
Trust in Information Technologies (TRUST), LNCS 4968 (2008),
119–132.
[17] EPN SOLUTIONS. Analysis tools for DDR1, DDR2, DDR3,
embedded DDR and fully buffered DIMM modules. http:
//www.epnsolutions.net/ddr.html. Accessed: 2014-
12-10.
[18] FUTUREPLUS
800
bus
SYSTEM.
analysis
http://www.futureplus.com/download/
DDR2
probe.
datasheet/fs2334_ds.pdf, 2006.
[19] GILBERT, P., JUNG, J., LEE, K., QIN, H., SHARKEY, D.,
SHETH, A., AND COX, L. P. YouProve: Authenticity and Fi-
deltiy in Mobile Sensing. In Proc. of 10th International Confer-
ence on Mobile Systems, Applications, and Services (MobiSys)
(Lake District, UK, 2012).
[20] GLOBALPLATFORM. Technical Overview. http://www.
globalplatform.org/specifications.asp.
[21] GOGNIAT, G., WOLF, T., BURLESON, W., DIGUET, J.-P.,
BOSSUET, L., AND VASLIN, R. Reconﬁgurable hardware for
high-security/high-performance embedded systems: The SAFES
perspective. IEEE Transactions on Very Large Scale Integration
(VLSI) Systems 16, 2 (2008), 144–155.
[22] GOOGLE.
The Chromium Projects.
http://www.
chromium.org/developers/design-documents/
tpm-usage.
[23] HALDERMAN, J. A., SCHOEN, S. D., HENINGER, N., CLARK-
SON, W., PAUL, W., CALANDRINO, J. A., FELDMAN, A. J.,
APPELBAUM, J., AND FELTEN, E. W. Lest we remember: Cold
boot attacks on encryption keys.
In Proc. of the 17th USENIX
Security Symposium (2008).
[24] IBM.
Software TPM Introduction. http://ibmswtpm.
sourceforge.net/.
Intel Software Guard Extensions Programming Ref-
[25] INTEL.
erence.
https://software.intel.com/sites/
default/files/managed/48/88/329298-002.pdf,
2014.
[26] JACKSON, W.
Engineer shows how to crack a ’secure’
TPM chip. http://gcn.com/Articles/2010/02/02/
Black-Hat-chip-crack-020210.aspx, 2010.
[27] KOCKER, P. C. Timing Attacks on Implementations of Difﬁe-
Hellman, RSA, DSS, and Other Systems. In Proc. of 16th Annual
International Cryptology Conference (CRYPTO) (Santa Barbara,
CA, 1996).
[28] KOSTIAINEN, K., ASOKAN, N., AND EKBERG, J.-E. Practi-
cal Property-Based Attestation on Mobile Devices. Proc. of 4th
International Conference on Trusted Computing and Trust in In-
formation Technologies (TRUST), LNCS 6470 (2011), 78–92.
[29] KOSTIAINEN, K., EKBERG,
J.-E., ASOKAN, N., AND
RANTALA, A. On-board Credentials with Open Provisioning. In
Proc. of the 4th International Symposium on Information, Com-
puter, and Communications Security (ASIA CCS) (2009).
[30] KOTLA, R., RODEHEFFER, T., ROY, I., STUEDI, P., AND
WESTER, B. Pasture: Secure Ofﬂine Data Access Using Com-
modity Trusted Hardware. In Proc. of 10th USENIX Symposium
on Operating Systems Design and Implementation (OSDI) (Hol-
lywoood, CA, 2012).
[31] LIU, H., SAROIU, S., WOLMAN, A., AND RAJ, H. Software
Abstractions for Trusted Sensors. In Proc. of 10th International
USENIX Association  
25th USENIX Security Symposium  855
15
//www.cs.dartmouth.edu/˜pkilab/sparks/.
[50] STRASSER, M., AND STAMER, H. A Software-Based Trusted
Platform Module Emulator. Proc. of 1st International Confer-
ence on Trusted Computing and Trust in Information Technolo-
gies (TRUST), LNCS 4968 (2008), 33–47.
[51] TRUSTED COMPUTING GROUP. Mobile Trusted Module Speci-
ﬁcation. http://www.trustedcomputinggroup.org/
resources/mobile_phone_work_group_mobile_
trusted_module_specification.
[52] TRUSTED COMPUTING GROUP.
TCPA Main Speciﬁcation
Version 1.1b. http://www.trustedcomputinggroup.
org/files/resource_files/64795356-1D09-
3519-ADAB12F595B5FCDF/TCPA_Main_TCG_
Architecture_v1_1b.pdf.
[53] TRUSTED COMPUTING GROUP. TPM 2.0 Library Speciﬁcation
FAQ.
http://www.trustedcomputinggroup.org/
resources/tpm_20_library_specification_faq.
TPM Library Speciﬁca-
http://www.trustedcomputinggroup.org/
[54] TRUSTED COMPUTING GROUP.
tion.
resources/tpm_library_specification.
[55] TRUSTED COMPUTING GROUP.
ﬁcation Level 2 Version 1.2, Revision 116.
//www.trustedcomputinggroup.org/resources/
tpm_main_specification.
TPM Main Speci-
http:
[56] WOLMAN, A., SAROIU, S., AND BAHL, V. Using Trusted Sen-
sors to Monitor Patients’ Habits. In Proc. of 1st USENIX Work-
shop on Health Security and Privacy (HealthSec) (Washington,
DC, 2010).
[57] XU, Y., CUI, W., AND PEINADO, M. Controlled-Channel At-
tacks: Deterministic Side Channels for Untrusted Operating Sys-
tems. In Proc. of the 36th IEEE Symposium on Security and Pri-
vacy (Oakland) (2015).
[58] ZHANG, F., CHEN, J., CHEN, H., AND ZANG, B. CloudVisor:
Retroﬁtting Protection of Virtual Machines in Multi-tenant Cloud
with Nested Virtualization. In Proc. of Symposium on Operating
Systems Principles (SOSP) (Cascais, Portugal, 2011).
Conference on Mobile Systems, Applications, and Services (Mo-
biSys) (Lake District, UK, 2012).
[32] MCCUNE, J. M., LI, Y., QU, N., ZHOU, Z., DATTA, A.,
GLIGOR, V., AND PERRIG, A. TrustVisor: Efﬁcient TCB Re-
duction and Attestation. In Proc. of IEEE Symposium on Security
and Privacy (Oakland, CA, May 2010).
[33] MCCUNE, J. M., PARNO, B., PERRIG, A., REITER, M. K.,
AND ISOZAKI, H. Flicker: An Execution Infrastructure for TCB
Minimization.
In Proc. of the ACM European Conference on
Computer Systems (EuroSys) (Glasgow, UK, 2008).
[34] MCGILL, K. N. Trusted Mobile Devices: Requirements for a
Mobile Trusted Platform Module. Johns Hopkings Applied Phys-
ical Laboratory Technical Digest 32, 2 (2013).
[35] MICROSOFT.
http:
//msdn.microsoft.com/en-us/library/windows/
desktop/hh848061(v=vs.85).aspx.
launch antimalware.
Early
[36] MICROSOFT.
HealthAttestation CSP.
https://msdn.
microsoft.com/en-us/library/dn934876%28v=
vs.85%29.aspx?f=255&MSPPError=-2147217396.
[37] MICROSOFT. Help protect your ﬁles with BitLocker Driver En-
cryption.
http://windows.microsoft.com/en-us/
windows-8/using-bitlocker-drive-encryption.
and Evaluating Virtual
http://www.microsoft.com/en-
Smart Cards.
us/download/details.aspx?id=29076.
[38] MICROSOFT.
Understanding
[39] M ¨ULLER, T., AND SPREITZENBARTH, M. FROST - foren-
sic recovery of scrambled telephones.
In Proc. of the Interna-
tional Conference on Applied Cryptography and Network Secu-
rity (ACNS) (2013).
[40] NIST. Digital Signature Standard (DSS). http://nvlpubs.
nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf.
[41] PARNO, B., LORCH, J. R., DOUCEUR, J. R., MICKENS, J.,
AND MCCUNE, J. M. Memoir: Practical State Continuity for
Protected Modules. In Proc. of IEEE Symposium on Security and
Privacy (Oakland, CA, 2011).
[42] PIEGDON, D. R. Hacking in physically addressable memory -
a proof of concept. Presentation to the Seminar of Advanced
Exploitation Techniques, 2006.
[43] RAJ, H., ROBINSON, D., TARIQ, T., ENGLAND, P., SAROIU,
S., AND WOLMAN, A. Credo: Trusted Computing for Guest
VMs with a Commodity Hypervisor. Tech. Rep. MSR-TR-2011-
130, Microsoft Research, 2011.
[44] RAJ, H., SAROIU, S., WOLMAN, A., AIGNER, R.,
JEREMIAH COX, A. P. E., FENNER, C., KINSHUMANN, K.,
LOESER, J., MATTOON, D., NYSTROM, M., ROBINSON, D.,
SPIGER, R., THOM, S., AND WOOTEN, D. fTPM: A Firmware-
based TPM 2.0 Implementation. Tech. Rep. MSR-TR-2015-84,
Microsoft, 2015.
[45] SANTOS, N., RAJ, H., SAROIU, S., AND WOLMAN, A. Trusted
Language Runtime (TLR): Enabling Trusted Applications on
Smartphones. In Proc. of 12th Workshop on Mobile Computing
Systems and Applications (HotMobile) (Phoenix, AZ, 2011).
[46] SANTOS, N., RAJ, H., SAROIU, S., AND WOLMAN, A. Using
ARM TrustZone to Build a Trusted Language Runtime for Mo-
bile Applications. In Proc. of 19th International Conference on
Architectural Support for Programming Languages and Operat-
ing Systems (ASPLOS) (Salt Lake City, UT, 2014).
[47] SANTOS, N., RODRIGUES, R., GUMMADI, K. P., AND
SAROIU, S. Policy-Sealed Data: A New Abstraction for Build-
ing Trusted Cloud Services. In Proc. of the 21st USENIX Security
Symposium (Bellevue, WA, 2012).
[48] SAROIU, S., AND WOLMAN, A. I Am a Sensor and I Approve
This Message. In Proc. of 11th International Workshop on Mo-
bile Computing Systems and Applications (HotMobile) (Annapo-
lis, MD, 2010).
[49] SPARKS, E., AND SMITH, S. W. TPM Reset Attack. http:
856  25th USENIX Security Symposium 
USENIX Association
16