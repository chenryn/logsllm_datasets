###  4.1 自定义后门
所谓“敌在本能寺”， 有些厂商在开发时为了方便调试， 会预留关闭SElinux的后门接口， 如果这类后门在正式发布前没有删除，
就有可能被攻击者利用来关闭SElinux。
###  4.2 内核漏洞
SElinux主要限制用户态的操作，如果攻击者通过内核漏洞获得任意地址读写的能力，就可以通过覆写全局变量selinux_enforcing的方式将SElinux关闭。  
为此，三星使用自研的RKP(Real-time Kernel Protection)机制，将敏感的全局变量放置在受保护的kdp_ro节
，一定程度上缓解了此类攻击。
###  4.3 策略过于宽泛
SELinux中同样存在人引入的问题，如果将敏感服务 开放给普通用户，或者对System
APP、Property的权限划分不细致，就会导致受到攻击时的影响范围被扩大。
###  4.4 服务功能与SElinux策略不对齐
在Android系统中有些区域需要频繁的写入各类数据，如 /data/local/tmp、/sdcard等，因此SElinux不会对这些位置做严格的限制，
普通用户权限就可以读写其中的数据。  
原则上这些目录是不可以存放敏感数据的，如果研发人员将一些重要文件保存在这些目录下（如配置文件、隐私信息、升级固件等），就会存在被攻击者窃取篡改的风险。
## 五、SEAndroid关闭方式
上面介绍的都是在运行时绕过SElinux的方式，但在日常工作中还存在这样一种场景，我们需要在一台已解锁的Android设备上获取Root权限来进行测试；目前高版本Android
上有一些优秀的Root工具，例如Magisk、KernelSU等，但使用自动化工具终究是无法了解底层原理，
如果要手动ROOT设备，关闭SElinux就是十分关键的一步， 下面来介绍几种手动关闭SElinux的方法。
###  5.1 Patch Boot
下载Android设备对应的全量Rom包，解开Boot分区后可以发现其布局如下
    header # 内核运行参数 & 其他信息
    kernel # Linux 内核
    ramdisk.cpio # boot分区
header 的结构如下， 其中cmdline 会传递给内核作为启动参数，
因此我们可以通过修改cmdline的方式，传入关闭SElinux的命令enforcing=0 androidboot.selinux=permissive。
    cmdline=
    os_version=12.0.0
    os_patch_level=2021-12
不过在高版本Android系统中，很多厂商不再解析cmdline，通用性较差。
###  5.2 Patch Init
init是Linux Kernel启动后运行的第一个用户态进程，其功能主要是完成初始化、解析执行init.rc 中定义的各种服务， 过程主要分为四个步骤：  
FirstStateMain->SetupSelinux->SecondStageMain->ueventd_main
其中SetupSelinux阶段的关键函数如下：
  * · LoadSelinuxPolicy：加载sepolicy策略
  * · selinux_android_restorecon：重载sepolicy策略
  * · SelinuxSetEnforcement：设置SElinux开关
显然关键在于SelinuxSetEnforcement函数，其内部实现如下。
    void SelinuxSetEnforcement() {
        bool kernel_enforcing = (security_getenforce() == 1);
        bool is_enforcing = IsEnforcing();
        if (kernel_enforcing != is_enforcing) {
            if (security_setenforce(is_enforcing)) {
                PLOG(FATAL)  参考：
>
>   * 
>