Plugins can fail in ways that aren't the fault of the code being compiled.
This could be an internal error in the plugin (which is still different from
an ICE in Rust itself), or something like failure to load an external
configuration file.
Ideally, plugins would call the usual methods like `bug`, `err`, `span_bug`,
etc., and the resulting messages would include the name of the plugin crate.
Unfortunately we can't do this by setting session state about which plugin is
running, because they can call back into `librustc` and errors there shouldn't
be reported as plugin errors. We could introduce `plugin_bug`, `plugin_err`,
`plugin_span_bug`, etc, but this API duplication is ugly, and you have to
remember to use different methods when writing plugins.
The nicer (though harder-to-implement) solution is to have these functions
walk the stack and then look at which shared object their caller was defined
in. In glibc this can be done with `backtrace()` and `dladdr()`, but I don't
know how hard it is on other platforms.
Whatever we do, we should also make these error methods accessible from the
`Registry`, for use handling errors that occur during plugin initialization.