4. SECURITY ANALYSIS
4.1 User-server interaction
The implementation of the protocol should be carefully
designed to satisfy the following requirement:
Implementation requirement 1. A user that enters a
username/password pair and does not present a valid cookie
receives one of the following two feedbacks from the server:
• Feedback 0: “The username/password pair is invalid.
• Feedback 1: “Please answer an RTT” (and then you
will be told whether the username/password pair you
entered is correct)
The choice of the feedback must be a deterministic function
of the username/password pair, and divides the set of all
such pairs into exactly two subsets, S0, S1. The feedback
that the user receives must be the same for all pairs in the
subset S1 (regardless of whether the pair is valid or not).
The requirement implies that the decision whether or not
to require an RTT in the case that a wrong password is en-
tered, must be a deterministic function of the username and
password. Namely, for a fraction p of the wrong passwords
an RTT is always required, and for a 1 − p fraction of the
wrong passwords an RTT is never required. If this was not
the case, then an adversary could have simply tried each
password several times (e.g. c times). If this is the correct
password then the adversary is required to pass an RTT in
all attempts, whereas if the password is wrong the probabil-
ity that an RTT is required in all attempts is pc, which can
be made arbitrarily small.
Another aspect of the implementation which requires care-
ful analysis, is that the delay between the time that the pass-
word is entered and the time that the RTT is served should
be the same whether the password is correct or not. (Ex-
tra care should be taken to make sure that this requirement
is satisﬁed when the RTT that corresponds to the correct
password is cached.) If this requirement is not satisﬁed then
the attacker could use a timing attack to decide whether the
password entered is correct or not.
4.2 Analysis for a single account
The main feature of the protocol that is relevant for the
security analysis is that for a p fraction of the incorrect
passwords, as well as for the correct password, the attacker
must solve an RTT before it receives a yes/no answer that
distinguishes the correct password from the incorrect ones.
Suppose that the set of all passwords includes N passwords.
The attacker can identify, without answering any RTT, that
the correct password is a member of a subset of size p(N −
1) + 1 ≈ pN of the passwords – these are the passwords for
which it does not receive an immediate “reject” answer but
is rather asked to solve an RTT. Given that the implemen-
tation requirement is satisﬁed, there is only one way that
the attacker can receive additional information about the
passwords – by choosing a password value that it wants to
verify and paying with an “RTT solution” in order to learn
whether it is the correct value of the password.
Let us assume for simplicity that all password values have
the same probability of being the correct password. (This
is the case if passwords are chosen at random by the server.
Even if the passwords are chosen by the user we can limit P
in our analysis to the set of passwords that occur with high
probability, and assume that the password is chosen among
them with uniform probability. The analysis for the case of
a non-uniform probability distribution of passwords is sim-
ilar.) We can model the attacker as playing the following
game: it receives pN identical envelopes, and it knows that
a winning ticket is hidden in exactly one of them, chosen
uniformly at random. In order to open an envelope it has
to pay one coin (i.e. RTT solution).
Its goal is to mini-
mize its expected payment until it ﬁnds the winning ticket.
The analysis of this game is simple. The expected number of
coins that have to be paid (i.e. RTTs that have to be solved)
is pN/2. If the attacker pays c coins (i.e. solves c RTTs), it
ﬁnds the winning ticket (password) with probability c/(pN ).
Analysis for multiple accounts. Assume that the adver-
sary knows (cid:11) user names, that passwords are chosen uni-
formly at random, and the the goal of the adversary is to
break into any one of the user’s accounts. Without answer-
ing any RTTs the adversary can learn, for every account,
the subset of pN passwords for which an RTT is required.
It knows that the passwords were chosen uniformly at ran-
dom, and that the correct passwords are in these subsets.
In a diﬀerent formulation, it is given (cid:11) sets of pN envelopes,
and it knows that each set has one envelope with a winning
ticket. Again, it can choose which envelopes to open but is
required to pay one coin per envelope. Since the sets are
independent of each other, the adversary’s best strategy is
to treat each set independently, giving essentially the same
results as for a single account.
4.3 Setting the parameters
Assume that we want to make the expected cost for the
attacker so high that breaking into accounts does not make
sense ﬁnancially. The design of the protocol should follow
the following steps:
• First, we have to estimate the beneﬁt that the attacker
gains from breaking into an account. This value diﬀers
of course between diﬀerent servers and accounts.
• We must estimate the size of the domain of passwords
that are likely to be used. This is easy if the passwords
are chosen by the server (e.g. as random 4 digit num-
bers), and is more complicated if users are allowed to
pick their own passwords.
• We must estimate the cost of solving a single RTT by
a potential attacker. An attacker could use three dif-
ferent methods of solving RTTs: The ﬁrst and trivial
method is to guess the answer of the RTT. The second
method of breaking RTTs is by employing low paid
human workers whose job is to solve RTTs, and im-
plementing a system that performs a dictionary attack,
166receives RTT queries and forwards them to the human
workers. The third method is to invest resources in de-
signing an automated program that breaks RTTs, and
then run servers that perform this attack (we hope that
this approach would not be successful, but we should
at least estimate the costs of an attacker that wishes
to mount an automated attack.)
• We should set the value of p to make the cost of break-
ing into an account higher than the potential gain from
the break.
(Of course, if the attacker believes that
breaking into a speciﬁc account could be highly bene-
ﬁcial we cannot prevent it from targeting this account.
We can hope, however, to make the cost of breaking
into an account suﬃciently high so that the beneﬁt
from breaking into an “average” account does not jus-
tify the required investment.)
As an example we try to quantify the security of accounts
in a speciﬁc system, relevant to the three attack scenarios
described above.
Assume that accounts are secured with a password with
N = 106 possible values (e.g. the password is a random six
digit number, or a random choice of two words from a corpus
of 1000 popular words), and that we set p to be p = 0.1.
For the ﬁrst scenario assume that there are 1000 possible
answers to the RTT query, and only one of them is correct.
(For example, the RTT displays a distorted image of a word
from a set of 1000 words. The set of possible answers can of
course be made much larger.) Then the expected number of
attempts that the attacker must do in order to break a single
account is 0.5 · 106 · 0.1 · 1000 = 5 ∗ 107, which is very high.
At a rate of a 100 login attempts per second the attacker
should invest 5 ∗ 105 seconds (about one week) in order to
break into a single account.
Assume now that an RTT can be broken in 3 seconds,
either by human users, or by an automated program (we
believe that a plausible scenario is that even if attackers
could design automated programs that break RTTs, their
running time would not be negligible). In this case the ex-
pected number of seconds that have to be invested in order
to ﬁnd the password is 150, 000, which is equal to about 42
hours (about 5 days of human work in 8 hour shifts).
4.4 What happens if the RTT is broken? –
dynamic setting of system parameters
Since our experience with RTTs is relatively new, we can-
not be sure that RTTs that are considered secure today will
still be secure in the future. In particular, we must assume
that once RTTs are used to secure something of value they
will become the target of many hacking attempts, and at-
tackers might ﬁnd a way of eﬃciently breaking RTTs. We
should therefore be prepared for the event that RTTs that
are used by the system are broken. The analysis below also
applies to the situation where an adversary is not able to
technically break the RTT, but can obtain a large amount
of human help to answer RTTs.
Identifying a successful attack. The ﬁrst challenge is iden-
tifying that attackers are able to break the RTTs that are
used by the system. The following techniques will help to
identify large scale break-in attempts. During normal oper-
ation we can expect a certain fraction of login attempts to
pass the RTT but fail in the password entry. These are
mostly due to users that mistype their passwords, or to
amateurs that run manual dictionary attacks. When the
RTT is broken by an automated program, or possibly by
attackers that organize “sweatshops” of low paid workers
that are solving RTTs, this fraction should go up noticeably
(once the RTT is broken the attackers can pass this test,
but should still ﬁnd it hard to guess the correct password).
When the system recognizes that the fraction of unsuccess-
ful login attempts that solve the RTT increases, it should
assume that the RTT is broken.
Countermeasures. Once it is recognized that attackers can
break the RTT, the ﬁrst line of defense should be increas-
ing the fraction p of login attempts for which an RTT is
required. (At an extreme, the system can require more than
one RTT to be solved for every login attempt, until it ﬁnds a
diﬀerent solution against the attack. This corresponds to a
value p greater than 1, in terms of calculating the expected
number of RTTs that have to be broken). This step requires
the attacker to solve more RTTs for every account that it
attempts to break. If the attack is conducted using human
workers, or is computationally intensive, then the operation
of the attacker is slowed down until it recruits more human
workers or installs more RTT breaking servers. We should
therefore examine whether the fraction of login attempts
that pass the RTT but fail the password entry decreases
when p is increased. If this is not the case, then we should
assume that the attacker has found a scalable way of break-
ing RTTs. The system must therefore change the RTT that
is being used, in hope that the attacker does not have an
eﬃcient way of solving it. (This change does not slow down
human attackers, but we believe, based on the quantitative
analysis presented above, that the cost of human attacks is
too high for them to be eﬀective, e.g. requires almost a week
of human work per account.) The operators of the system
must therefore have a set of diﬀerent RTT tests. Once a
successful automated attack is detected the system should
switch to a new test, preferably taken from a new domain
and suﬃciently diﬀerent from the existing test.
Additional security against attacks on individual accounts
can be provided in the following way. When the server no-
tices that there is a high number of failed login attempts to
one (or a small number of) accounts, a ﬂag is raised warning
the security administrator that with high probability an at-
tack is mounted on these accounts. The system could then
increase, for these individual accounts, the fraction of lo-
gin attempts that require RTTs, or even change the type of
RTTs that should be solved, in order to slow down an at-
tacker. The administrator may also contact the user via an
out-of-band channel, such as email or phone, to agree on an
alternative login method. The key advantages of the RTT
scheme in this case are that (1) the security administrator is
given signiﬁcantly more time to react than in ”conventional”
schemes where an account can be locked within seconds (e.g.
after 5 unsuccessful login attempts), and that (2) a legiti-
mate user will still be able to login to his account during
this time period.
4.5 Protecting against cookie theft
Cookies contain data that is stored by a server on a client’s
machine, and can only be retrieved by the server that gen-
erated it. There are, however, known attacks that enable
hackers to steal cookies from the machines of unsuspecting
167users. The protocol we described uses cookies to identify
machines from which users have been successfully identiﬁed
in the past. If a login to a user’s account originates from a
machine that stores a cookie that contains this user’s data
then the login procedure does not require solving an RTT.
This feature, together with the known weaknesses that en-
able cookie theft, pose a security threat: once hackers ob-
tain the cookie of a user they can mount a dictionary attack
against his account, without being required to answer RTTs.
We describe here a simple procedure that ensures that
hackers cannot substantially beneﬁt from obtaining cookies
of other users. The procedure requires the server to keep
a counter for every cookie that it stores in users’ machines.
When it receives a cookie as part of a login attempt, and the
login attempt fails, it increases the value of the counter of
this speciﬁc cookie. When the counter reaches some preset
value, say 100, a ﬂag is set, causing the server to ignore this
cookie in future login attempts. This means that when the
user tries to login in the future, and sends the same cookie,
the login procedure continues as if no cookie was sent, and
the user is required to pass an RTT. When the user succeeds
in authenticating himself, a new cookie is generated and is
stored on the user’s machine with a counter set to 0 (and
the previous cookie remains useless).
The eﬀect of this procedure is that an attacker that ob-
tains a cookie is able to check a limited number of passwords
(e.g. 100) without having to answer RTTs. The advan-
tage it obtains compared to its normal operation (with, say
p = 0.1), is negligible: there are about 10 additional pass-
words that it can check without solving an RTT (out of the
100 login attempts that the attacker runs using the cookie,
we expect that 90 would not have required an RTT even if
no cookie was present, since p = 0.1). The eﬀect on usability
is negligible, too. The user has to pass an additional RTT
in the rare case that he fails in one hundred login attempts,
or when a cookie is stolen from one of his machines and is
used for a dictionary attack.
4.6 Account locking after unsuccessful login
attempts
As described in Section 1.1, a common measure against
dictionary attacks is to lock users’ accounts after a certain
number of unsuccessful login attempts. We described in
Section 1.1 the disadvantages of this measure in terms of
vulnerability to denial of service attacks, and the cost of
customer service calls.
When a system implements the protocols described in this
paper, it can substantially increase the threshold of unsuc-
cessful login attempts that cause an account to lock. Con-
sider a system where passwords have N possible values, and
the password is chosen among them uniformly at random.
Assume that the system has m accounts whose identities are
known to the attacker, that it does not implement the RTT
method, and that an account is locked after L unsuccessful
login attempts. Then the expected number of accounts that
an attacker can break into is m· L/N . Assume now that the
RTT scheme is used, that an RTT instance has S possible
equiprobable answers (say, S = 1000), and that the attacker
cannot answer an RTT better than guessing the answer at
random. Then the eﬀective size of the password space is
increased to N · p · S, where p is the fraction of incorrect
passwords for which an RTT is required (say, p = 0.1). This
means that the threshold L that causes an account to be
locked can be increased by a factor of S · p = 100 without
changing the expected number of accounts that the adver-
sary can break into.
The system could start its operation using the higher ac-
count lock threshold, and work while monitoring the per-
centage of login attempts that pass the RTT test and fail
the password. When the server observes that this ﬁgure in-
creases it should suspect that an attacker is able to break the
RTT, and implement the countermeasures described in Sec-
tion 4.4. In addition, it should decrease the threshold that