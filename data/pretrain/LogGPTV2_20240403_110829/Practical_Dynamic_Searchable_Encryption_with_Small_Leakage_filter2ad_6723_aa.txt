title:Practical Dynamic Searchable Encryption with Small Leakage
author:Emil Stefanov and
Charalampos Papamanthou and
Elaine Shi
Practical Dynamic Searchable Encryption
with Small Leakage
Emil Stefanov
UC Berkeley
PI:EMAIL
Charalampos Papamanthou
University of Maryland
PI:EMAIL
Elaine Shi
University of Maryland
PI:EMAIL
Abstract—Dynamic Searchable Symmetric Encryption
(DSSE) enables a client to encrypt his document collection
in a way that it is still searchable and efﬁciently updatable.
However, all DSSE constructions that have been presented in
the literature so far come with several problems: Either they
leak a signiﬁcant amount of information (e.g., hashes of the
keywords contained in the updated document) or are inefﬁcient
in terms of space or search/update time (e.g., linear in the
number of documents).
In this paper we revisit the DSSE problem. We propose
the ﬁrst DSSE scheme that achieves the best of both worlds,
i.e., both small leakage and efﬁciency. In particular, our DSSE
scheme leaks signiﬁcantly less information than any other
previous DSSE construction and supports both updates and
searches in sublinear time in the worst case, maintaining at
the same time a data structure of only linear size. We ﬁnally
provide an implementation of our construction, showing its
practical efﬁciency.
I.
INTRODUCTION
Searchable Symmetric Encryption (SSE) [31] enables
a client to encrypt her document collection in a way that
keyword search queries can be executed on the encrypted
data via the use of appropriate “keyword tokens”. With
the advent of cloud computing (and the emerging need
for privacy in the cloud), SSE schemes found numerous
applications, e.g., searching one’s encrypted ﬁles stored
at Amazon S3 or Google Drive, without
leaking much
information to Amazon or Google. However, the majority of
SSE constructions that have been presented in the literature
work for static data: Namely there is a setup phase that
produces an encrypted index for a speciﬁc collection of
documents and after that phase, no additions or deletions of
documents can be supported (at least in an efﬁcient manner).
Due to various applications that the dynamic version of
SSE could have, there has recently been some progress on
Permission(cid:1)to(cid:1)freely(cid:1)reproduce(cid:1)all(cid:1)or(cid:1)part(cid:1)of(cid:1)this(cid:1)paper(cid:1)for(cid:1)noncommercial(cid:1)
purposes(cid:1) is(cid:1) granted(cid:1) provided(cid:1) that(cid:1) copies(cid:1) bear(cid:1) this(cid:1) notice(cid:1) and(cid:1) the(cid:1) full(cid:1)
citation(cid:1)on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1) Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)
prohibited(cid:1)without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-
named(cid:1) author(cid:1) (for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1)
employer(cid:1)if(cid:1)the(cid:1)paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.(cid:1)
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:19)(cid:26)(cid:25)
Dynamic Searchable Symmetric Encryption (DSSE) [12],
[20], [21], [36]. In a DSSE scheme, encrypted keyword
searches should be supported even after documents are
arbitrarily inserted into the collection or deleted from the
collection. However, to assess the quality of a DSSE scheme,
one must precisely specify the information leakage during
searches and updates.
Minimizing the leakage for DSSE can be achieved by
using ORAM [3], [10], [13], [15], [17]–[19], [23]–[25], [27],
[30], [35], [37], [38] to hide every memory access during
searches and updates. However, applying ORAM is costly
in this setting (see Section II). In order to avoid expensive
ORAM techniques, one could allow for some extra leakage.
Ideally, the DSSE leakage should only contain:
a) The hashes of keywords we are searching for, referred
to as search pattern in the literature [9].
b) The matching document identiﬁers of a keyword search
and the document identiﬁers of the added/deleted docu-
ments, referred to as access pattern in the literature [9].
c) The current number of document-keyword pairs stored
in our collection, which we call size pattern.
Note that the above DSSE leakage implies a strong property
called forward privacy: If we search for a keyword w and
later add a new document containing keyword w, the server
does not learn that the new document has a keyword we
searched for in the past. It also implies backward privacy,
namely queries cannot be executed over deleted documents.
Unfortunately, existing sublinear DSSE schemes [20],
[21], [36] not only fail to achieve forward and backward
privacy, but also leak a lot of additional information during
updates such as the keyword hashes shared between docu-
ments (not just the hashes of the queried keywords). Our
main contribution is the construction of a new sublinear
DSSE scheme whose leakage only contains (a), (b) and (c)
from above (but, like any other existing scheme, it does not
achieve backward privacy). In particular:
1) Our DSSE scheme has small leakage: Apart from the
search, access and size patterns, it also leaks (during
searches) the document identiﬁers that were deleted in
the past and match the keyword. As such, our scheme
achieves forward privacy (but not backward privacy).
2) Our DSSE scheme is efﬁcient: Its worst-case search
complexity is O(min{↵ +log N, m log3 N}), where N
is the size of the document collection (speciﬁcally, the
number of document-keyword pairs), m is the number
of documents containing the keyword we are searching
for and ↵ is the number of times this keyword was
historically added to the collection (i.e., for ↵ =⇥( m)
the search complexity is O(m + log N ); in any other
case it cannot go beyond O(m log3 N )). The scheme’s
worst-case update complexity is O(k log2 N ), where
k is the number of unique keywords contained in the
document of the update (insertion or deletion). Finally,
the space of our data structure is optimal (i.e., O(N )).
To the best of our knowledge, no other DSSE scheme in
the literature achieves Properties (1) and (2) simultaneously.
See the paragraph of Section II that refers to DSSE related
work for details. Further contributions of our work include:
3) Our DSSE scheme is the ﬁrst one to support dynamic
keywords. As opposed to previous DSSE schemes
that require storing information about all the possible
keywords that may appear in the documents (i.e., all the
dictionary), our scheme stores only information about
the keywords that currently appear in the documents.
4) We implement our DSSE scheme on memory and we
in practice,
show that our scheme is very efﬁcient
achieving a query throughput of 100,000 search queries
per second (for result size equal to 100). To achieve
practical efﬁciency, our implementation is fully parallel
and asynchronous and we can parallelize queries along
with updates at the same time.
Technical highlights. Our technique departs from existing
index-based techniques for SSE (e.g., [9], [20], [21], [31],
[36]) that use an encrypted inverted index data structure.
Instead it stores document-keyword pairs in a hierarchical
structure of logarithmic levels, which is reminiscent of algo-
rithmic techniques used in the ORAM literature (e.g., [15],
[16], [32], [34], [37]). A similar structure was also recently
used by the authors to construct very efﬁcient dynamic
Proofs of Retrievability [33].
Speciﬁcally, in our scheme, when a document x contain-
ing keyword w is added to our collection, we store in a hash
table an encryption of the tuple (w, x, add, i), where i is a
counter indicating that x is the i-th document containing
keyword w. When a document x containing keyword w
is deleted from our collection, an encryption of the tuple
(w, x, del, i) is stored. During the encrypted search for a
certain keyword w, all hash table keys of addition/deletion
entries referring to w are retrieved (and decrypted) via an
appropriate token for w (generated by the client).
Storing both addition and deletion entries can however
lead to linear worst-case complexity for search, e.g., ﬁrst we
add some documents containing keyword w, then we delete
all documents containing w and then we search for keyword
w. In this case the search will have to iterate through all
the addition/deletion entries in order to conclude that no
document contains keyword w.
To avoid this scenario, we need to rebuild the data struc-
ture periodically (so that opposite entries can be canceled
out), which is again a linear cost. To reduce that rebuilding
cost from linear to logarithmic, we use the multilevel struc-
ture that we mentioned above (instead of storing everything
in a ﬂat hash table). Forward privacy is derived from the fact
that every time we rebuild a level of the above data structure,
we use a fresh key for encrypting the entries within the new
level—this makes old tokens unusable within the new level.
II. RELATED WORK
Static SSE.
In the static setting, Curtmola et al. [9] gave
the ﬁrst index-based SSE constructions to achieve sublinear
search time. A similar construction was also described by
Chase and Kamara [8], but with higher space complexity.
Finally, recent work by Kurosawa et al. [22] shows how
to construct a (veriﬁable) SSE scheme that is universally
composable (UC). While UC-security is a stronger notion
of security, their construction requires linear search time.
Finally, Cash et al. [5] recently presented an SSE scheme
for conjunctive queries over static data. An extension of this
protocol that allows the data owner to authorize third parties
to search in the encrypted static database was recently also
proposed by Cash et al. [6].
Dynamic SSE. Song et al. [31] were the ﬁrst to explicitly
consider the problem of searchable encryption and presented
a scheme with search time that is linear in the size of the data
collection. Their construction supports insertions/deletions
of ﬁles in a straightforward way. Goh [12] proposed a
dynamic solution for SSE, which again requires linear search
time and results in false positives. Chang and Mitzen-
macher [7] proposed a construction with linear search time
but without false positives—their solution also achieves
forward privacy.
The recently introduced dynamic scheme of Kamara et
al. [21] was the ﬁrst one with sublinear search time, but it
does not achieve forward privacy and reveals hashes of the
unique keywords contained in the document of the update.
The scheme of Kamara and Papamanthou [20] overcomes
the above limitation (still not achieving forward privacy) by
increasing the space of the used data structure.
Finally, the work of van Liesdonk et al. [36] has the
limitations of both [21] and [20], with leaky updates and a
large index. Also, the number of updates supported by their
scheme is not arbitrary.
Dynamic SSE through ORAM. The DSSE problem can
be solved by using oblivious RAM (ORAM) [3], [10], [13],
[15], [17]–[19], [23]–[25], [27], [30], [35], [37], [38] as a
black box. ORAM provides the strongest levels of security,
namely the server only learns the size of the document
collection.
However, ORAM schemes are less efﬁcient in practice
due to a big overhead in terms of bandwidth. The ORAM
schemes that achieve low bandwidth (e.g.,
[32], [34], [35]
rely on the block sizes being relatively large (e.g., 4 KB).
2
In order to handle small block sizes such as document-
keyword pairs, those ORAM techniques would end up using
a lot more client storage (because the ORAM would consist
of many more but smaller blocks). Those schemes can be
re-parameterized to use less client storage (e.g., by using
recursion as in [34], [35]), but that would drastically increase
bandwidth and might in some cases result in multiple round-
trips of communication.
Other related work. Related to searchable encryption is
also functional encryption [4], [11], [28], where one encrypts
the documents in a way that one can issue tokens that would
allow testing whether a speciﬁc keyword is contained in
the document, without decrypting the document. However
such solutions incur linear cost for search (however it is
straightforward to address updates). Aiming at more efﬁcient
schemes, Boneh et al. [2] presented functional encryption
schemes for speciﬁc functionalities such as keyword search
and Shi et al. [29] presented functional encryption schemes
for multidimensional queries, with linear cost for searches.
III. PRELIMINARIES
The notation ((c out, s out)   protocol((c in, s in)) is
used to denote a protocol between a client and a server,
where c in and c out are the client’s input and output; s in
and s out are the server’s input and output.
Deﬁnition 1 (DSSE scheme). A dynamic searchable sym-
metric encryption (DSSE) scheme is a suite of three proto-
cols that are executed between a client and a server with
the following speciﬁcation:
• (st, D)   Setup((1 , N ), (1 ,?)). On input the secu-
rity parameter   and the number of document-keyword
pairs N, it outputs a secret state st (to be stored by
the client) and a data structure D (to be stored by the
server);
• ((st0,I),?)   Search((st, w), D). The client input’s
include its secret state st and a keyword w; and server’s
input is its data structure D. At the end of the Search
protocol, the client outputs a possibly updated state st0
and the set of document identiﬁers I that contain the
keyword w. The server outputs nothing.
• (st0, D0)   Update((st, upd), D). The client has input
st, and an update operation upd := (add, id, w) or
upd := (del, id, w) where id is the document identiﬁer
to be added or removed, and w := (w1, w2, . . . , wk)
is the list of unique keywords in the document. The
server’s input
is its data structure D. The Update
protocol adds (or deletes) the document to (or from)
D, and results in an updated client secret state st0 and
an updated server data structure D0.
We note that in our construction, Setup and Search can
be performed non-interactively, i.e., involving only a single-
round trip between the server and client. In our construction
the Update protocol is interactive, but the client can always
answer a search query in a single round by storing a
small buffer of documents currently being updated in the
background until the updates ﬁnish.
A. Security Deﬁnition
We deﬁne security using the standard simulation model
of secure computation [14], requiring that a real-world
execution “simulates” an ideal-world (reactive) functionality.
For clarity of presentation, we ﬁrst present a scheme secure
in the semi-honest model, where the adversary (i.e., server)
faithfully follows the prescribed protocol, but is curious.
Then, in Section VI we show how to make our protocol
work in the malicious model as well. We now deﬁne the
following experiments:
Ideal-world execution IDEALF,S,Z. An environment Z
sends the client a message “setup”. The client then sends
an ideal functionality F a message “setup”. The ideal-world
adversary S (also referred to as a simulator) is notiﬁed of
N, an upper bound on the number of document-keyword
pairs.
In each time step, the environment Z speciﬁes a search
or update operation to the client. For a search operation, Z
picks a keyword w to search. For an update operation, Z
picks upd := (add, id, w) or upd := (del, id, w). The client
sends the search or update operation to the ideal functional-
ity F. F notiﬁes S of leaks(w) for a search operation, and
leaku(upd) for an update operation (see Section III-B for the
deﬁnition of the leakage functions). S sends F either abort
or continue. As a result, the ideal-functionality F sends the