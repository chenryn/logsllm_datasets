Figure 12 shows the number of events and number of messages
per day during these two weeks for dataset A (the numbers are nor-
malized by a ﬁxed factor due to proprietary information). Again,
we obverse the three orders of magnitude compression. In addi-
tion, the number of events per day is relatively stable across days
481Table 7: Effectiveness (compression ratio) of three digest
methodologies. T: temporal based, R: rule based, C: cross
router
Methodology
Ratio (Dataset A)
T
T+R
T+R+C
1.63 × 10−2
5.15 × 10−3
3.27 × 10−3
Ratio (Dataset B)
9.08 × 10−3
2.26 × 10−3
0.91 × 10−3
# messages
# events
# active rules
l
)
e
a
c
s
g
o
l
(
s
t
n
u
o
c
d
e
z
i
l
a
m
r
o
N
 1
 0.1
 0.01
 0.001
 0.0001
 0
 2
 4
 6
 8
 10
 12
 14
 16
Days
Figure 12: Number of event digests and active rules per day for
dataset A.
Number of messages
Number of events
s
t
n
e
v
e
/
s
e
g
a
s
s
e
m
f
o
r
e
b
m
u
n
e
h
T
 1
 0.1
 0.01
 0.001
 0.0001
 1e-05
Router
Figure 13: The digest result per router of dataset A.
for both datasets. In addition to the events digest, SyslogDigest also
tracks the association rules that are used in message grouping (we
call them “active rules”). The number of active rules is also stable:
100 ∼ 200 per day. The observations on dataset B is similar and
omitted due to space limit.
Figure 13 show normalized number of raw messages and num-
ber of events on each individual router for datasets A2. We observe
that the distribution of events across routers are less skew than that
of raw syslog messages. In addition, routers that have more sys-
log messages usually have a better compression ratio. The best
compression ratio is achieved on the router which has the largest
number of raw message.
In order to verify that SyslogDigest system does not miss impor-
tant network events during extraction, we compare the event digests
output by SyslogDigest with known network events obtained from
the trouble tickets. We obtained trouble tickets for both dataset A
2Due to page limitation, very similar result for dataset B is not
shown here
and dataset B, each of which is associated with a unique case iden-
tiﬁer, timestamp of which the ticket is created and/or updated, and
type and location of the event. While an extensive and systematic
evaluation is undergoing, we show our preliminary results in this
paper. In our preliminary evaluation, we rank the tickets based on
the number of times a ticket is investigated and the corresponding
record is updated. The intuition is that the more times that a ticket
is investigated, the more likely the corresponding event is more im-
portant (and/or complicated). Hence, we use the number of times
a ticket is investigated and updated as an approximation of the im-
portant of an event. We select the top 30 tickets regarding dataset B
and correlate them with event digests output by SyslogDigest. We
say there is match between a trouble ticket and an event digest if
(i) the duration of the event digest covers the creation time of the
trouble ticket and (ii) the event location of speciﬁed in the event
digest is consistent with that described in the trouble ticket (at the
state level, e.g. TX, GA, etc.). We found that all 30 tickets match
with event digests that are ranked as top 5% or even higher by Sys-
logDigest. This initial evaluation shows that SyslogDigest does not
miss important incidents.
6. APPLICATIONS
In this section, we demonstrate that SyslogDigest can be used an
essential building block for many critical applications in network
operations, such as troubleshooting and network health monitoring
and visualization.
6.1 Complex network troubleshooting
Router syslog is one of the most important data source for net-
work troubleshooting, and SyslogDigest provides network opera-
tors the gist of the syslogs – high-level network events. This is
very important especially for diagnosing complex events that in-
volve protocol interactions across multiple network layers and lo-
cations.
We next examine a real-world example on PIM neighbor loss
event in the IPTV network – an event that was identiﬁed by Sys-
logDigest and is intriguingly complex.
In the commercial IPTV network, live TV streams are delivered
using native IP multicast (i.e., PIM in this example). A change
or loss of PIM neighbor session (e.g., caused by link failures) can
disrupt delivery of IPTV data streams. Hence, there are several
mechanisms implemented in the layer 2 and layer 3 network to en-
hance the service reliability. Particularly, two static layer 2 paths
are conﬁgured between each pair of routers on the multicast tree –
the primary path is the single-hop one directly connecting these
two routers and the secondary path is a multi-hop path through
routers in different VHOs. When there is a physical link failure on
the primary path, the secondary path will be used to deliver IPTV
data streams through the MPLS tunnels. The fast re-route (FRR) is
done in layer 2 so that layer 3 routing (i.e., OSPF) is oblivious of
this fail-over event, avoiding lengthy route-reconvergence impact-
ing the PIM neighbor session. In this design, PIM neighbor session
should only be impacted when there are dual failures on both pri-
mary path and secondary path. Such dual failures are extremely
rare in operational networks.
In a troubleshooting task, operators investigated a PIM neighbor
session ﬂap event between a pair of nodes in two VHOs. The event
was somewhat unexpected because the PIM neighbor session loss
appeared to be triggered by a single link failure on the primary path
between two routers. In theory, the PIM neighbor session should
not be impacted. The event signature output by SyslogDigest re-
vealed that the secondary path had not been set up successfully
and was undergoing connection retries every ﬁve minutes. Con-
482Figure 14: Visualization based on SyslogDigest output.
Figure 15: Visualization based on raw syslog data.
sequently, the PIM neighbor session was immediately interrupted
when the primary path failed. In the event signature, hundreds of
syslog messages recorded on a dozen of routers in multiple VHOs
are associated to this SyslogDigest event. These syslog messages
are of 15 distinct error codes involving 6 network protocols across
three network layers.
If without SyslogDigest, it would easily take operators hours
to manually identify these messages among tens of thousands of
syslogs recorded at these routers and close in time to the PIM
loss event. As a matter of fact, it is not clear what time duration
should the network operators focus on in searching for related sys-
logs, simply because different protocols operate (or react to net-
work changes) at different time granularities (ranging from sub-
seconds to minutes or longer). In this particular event, the syslog
messages that indicates a failure in setting up the secondary path,
i.e., the connection retries, are several minutes apart from the link
failure. Without knowing the exact protocols and timer involved,
it is difﬁcult to ﬁnd the right time window to focus on – a short
window (e.g., ±60 seconds) would risk missing the failure infor-
mation of the secondary path, while a long window (e.g., ±3600
seconds) would certainly increase the amount of syslogs to be ana-
lyzed, slowing down operators’ investigation.
By contrast, SyslogDigest was able to uncover the complete
stream of this complex event. This is because SyslogDigest
“learns” both the types and the co-occurrence time patterns of re-
lated syslog messages, and consequently associate such syslogs to-
gether when they do co-occur.
Furthermore, even with other automated troubleshooting sys-
tems (e.g., [8]) in place, working with pre-processed high-level
events can greatly improve the efﬁciency compared to working with
large numbers of raw syslog events.
6.2 Network health monitoring and visualiza-
tion
It is imperative for network operators to keep track of “what hap-
pened in my network?". Visualization is often an effective way to
achieve this as operators are able to “see” what happened in the
network and how things evolve over time. The digest events from
SyslogDigest can greatly improve network health visualization.
Figures 14 and 15 show the snapshots of network status map
at 2009/12/5 16:00:00 (in 10 minute updating window) using Sys-
logDigest and using raw syslog messages, respectively. Network
topology and link load status are removed from the graph to protect
proprietary information. The circles in the map indicate events (or
messages) observed at these routers with larger circles indicating
more events (or messages) observed. We observe that only a small
number of events took place in the network then, while the corre-
sponding syslog messages range from dozens to a couple of hun-
dreds on each of these routers. Making sense of the raw syslogs
visualization requires decoding plenty of supplement information
(e.g., the pie chart shown in Figure 15 reporting the mixture of sys-
log types and counts for all events on the router). It is worth noting
that high syslog message counts do not necessarily imply more net-
work events or “bigger trouble” – the big circle in Figure 15 was
one moderate level event compare to others in Figure 14. Visualiza-
tion the raw syslog messages can potentially mislead operators to
focus on routers with more messages and delay their investigation
on more sever issues.
7. RELATED WORK
Commercial softwares, like NetCool [2] Lonix [1], that are capa-
ble of parsing and making log data. These tools, however, require
intensive domain knowledge to describe the format of logs. Xu et
al. propose a general methodology to mine the console logs and to
automatically detect system running time problem [19]. But they
assume that they have the access to source code which generate the
logs. It is not a practical assumption in the environment of router
syslogs.
Troubleshooting network problems is one of the most important
management tasks. Many approaches have been proposed recent
years [12, 11, 17, 7, 14, 13, 10]. The general idea is to apply ad-
vanced statistical methodologies to multiple raw data sources. Our
system is not speciﬁcally designed for troubleshooting, but as il-
lustrated in Section 6, it can beneﬁt complex troubleshooting task
signiﬁcantly.
Rule learning has been widely applied in acquiring insight on
different network problems. Kandula et al. [9] mine the rules in
edge networks based on the network trafﬁc data. Brauckhoff et
al. [4] use association rule mining techniques to extract anomaly
in backbone network. Their data sources, detailed mining method-
ologies and utilities of ﬁnal mining results are different from our
system. Yamanishi et al. [20] provides a dynamic syslog mining
technique on server syslogs. They focus on generating predicative
alarm for system failures. Our goal is more broad – to represent the
network events. Moreover, their syslog data are essentially logs on
the end host devices, rather than router syslogs.
The idea of extracting high level information from raw data has
been used in network trafﬁc analysis. A few tools aggregate traf-
ﬁc volumes and visualize the resulting aggregates. For example,
FlowScan [16] analyzes and reports on Internet Protocol (IP) ﬂow
483data exported by routers, based on the application, the IP preﬁx,
or the AS identiﬁer. eXpose [9] identiﬁes temporally correlated
clusters of ﬂows. NICE [14] is a correlation tool focusing on the
chronic network conditions. In comparison, our system is the ﬁrst
one used for extracting network events from logs.
8. CONCLUSION
In this paper, we develop a system called SyslogDigest that
groups massive volume of syslog messages into small number of
meaningful network events using data mining techniques. Sys-
logDigest systematically identiﬁes signatures of syslog messages,
learns association rules that capture network behaviors over time,
groups related raw syslog messages across multiple routers into
network events, and labels and prioritizes network events appropri-
ately. We evaluated SyslogDigest using real syslog data collected
from two large operational networks and demonstrated how Sys-
logDigest can be applied on complex network troubleshooting and
network health monitoring and visualization. Though we focused
on syslog data in this paper, our techniques can also be applied
on other network data. We believe SyslogDigest will be an essen-
tial building block for many network management tools. Applying
SyslogDigest on other network data and integrating it into various
network management tools are among our future work.
9. REFERENCES
[1] Emc lonix website. http://www.emc.com/
products/family/ionix-family.htm.
[2] Ibm netcool website. http://www-01.ibm.com/
software/tivoli/welcome/netcool.
[3] Rakesh Agrawal, Tomasz Imielinski, and Arun Swami.
Mining association rules between sets of items in large
databases. In Proc. ACM SIGMOD, 1993.
[4] Daniela Brauckhoff, Xenofontas Dimitropoulos, Arno
Wagner, and Kavè Salamatian. Anomaly extraction in
backbone networks using association rules. In Proc. ACM
IMC, 2009.
[5] Peter J. Brockwell and Richard A. Davis. Introduction to
Time Series and Forecasting. Springer, 2002.
[6] R. Gerhards and Adiscon GmbH. The Syslog Protocol. In
IETF RFC, 2009.
[7] Yiyi Huang, Nick Feamster, Anukool Lakhina, and Jim (Jun)
Xu. Diagnosing network disruptions with network-wide
analysis. SIGMETRICS Perform. Eval. Rev., 35(1):61–72,
2007.
[8] Charles R. Kalmaneka, Zihui Ge, Seungjoon Lee, Carsten
Lund, Dan Pei, Joseph Seidel, Jacobus Van der Merwe, and
Jennifer Yates. Darkstar: Using exploratory data mining to
raise the bar on network reliability and performance. In Proc.
the 7th international workshop on Design of Reliable
Communication Networks (DRCN), October 2009.
[9] Srikanth Kandula, Ranveer Chandra, and Dina Katabi.
What’s going on? learning communication rules in edge
networks. In Proc. ACM SIGCOMM, 2008.
[10] Srikanth Kandula, Ratul Mahajan, Patrick Verkaik, Sharad
Agarwal, Jitendra Padhye, and Paramvir Bahl. Detailed
diagnosis in enterprise networks. In Proc. ACM SIGCOMM,
2009.
[11] R. R. Kompella, J. Yates, A. Greenberg, and A. C. Snoeren.
Detection and localization of network blackholes. In Proc.
INFOCOM, 2007.
[12] Anukool Lakhina, Mark Crovella, and Christophe Diot.
Mining anomalies using trafﬁc feature distributions. In
SIGCOMM ’05: Proceedings of the 2005 conference on
Applications, technologies, architectures, and protocols for
computer communications, pages 217–228, New York, NY,
USA, 2005. ACM.
[13] A. Mahimkar, Z. Ge, , A. Shaikh, J. Wang J. Yates, Y. Zhang,
, and Q. Zhao. Towards automated performance diagnosis in
a large iptv network. In Proc. ACM SIGCOMM, 2009.
[14] A. Mahimkar, J. Yates, Y. Zhang, A. Shaikh, J. Wang, Z. Ge,
and C. T. Ee. Troubleshooting chronic conditions in large ip
networks. In Proc. ACM CoNEXT, 2008.
[15] Ajay Mahimkar, Han Hee Song, Zihui Ge, Aman Shaikh, Jia
Wang, Jennifer Yates, Yin Zhang, and Joanne Emmons.
Detecting the performance impact of upgrades in large
operational networks. In Proc. ACM SIGCOMM, 2010.
[16] Dave Plonka. Flowscan: A network trafﬁc ﬂow reporting and
visualization tool. In Proc. USENIX System Admin. Conf.,,
2000.
[17] M. Tariq, A. Zeitoun, V. Valancius, N. Feamster, and
M. Ammar. Answering what-if deployment and
conﬁguration questions with wise. In Proc. SIGCOM, 2008.
[18] Yinglian Xie, Fang Yu, Kannan Achan, Rina Panigrahy,
Geoff Hulten, and Ivan Osipkov. Spamming botnets:
Signatures and characteristics. In Proc. ACM SIGCOMM,
2008.
[19] Wei Xu, Ling Huang, Armando Fox, David Patterson, and
Michael I. Jordan. Detecting large-scale system problems by
mining console logs. In SOSP ’09: Proceedings of the ACM
SIGOPS 22nd symposium on Operating systems principles,
pages 117–132, New York, NY, USA, 2009. ACM.
[20] Kenji Yamanishi and Yuko Maruyama. Dynamic syslog
mining for network failure monitoring. In Proc. ACM KDD,
August 2005.
[21] Nong Ye, S. Vilbert, and Qiang Chen. Computer intrusion
detection through EWMA for autocorrelated and
uncorrelated data. In IEEE transactions on reliability,
October 2003.
484