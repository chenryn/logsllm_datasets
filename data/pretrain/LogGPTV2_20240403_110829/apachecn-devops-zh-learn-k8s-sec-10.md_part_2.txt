     count/jobs.batch            0     5k
     pods                        0     1500
     services                    0     500
    ```
5.  现在，如果我们尝试创建两个使用`1` CPU 的 PODS，第二个请求将失败，并出现以下错误:
    ```
    $ kubectl apply -f nginx-cpu-1.yaml --namespace demo
    Error from server (Forbidden): error when creating "nginx-cpu-1.yaml": pods "demo-1" is forbidden: exceeded quota: compute-resources, requested: requests.cpu=1, used: requests.cpu=1, limited: requests.cpu=1
    ```
资源配额确保命名空间 Kubernetes 对象的服务质量。
## 限定语
我们在 [*第七章*](07.html#_idTextAnchor186)*认证、授权和准入控制*中讨论了`LimitRanger`准入控制。集群管理员可以利用限制范围来确保行为不端的 PODS、容器或`PersistentVolumeClaims`不会消耗所有可用资源。
要使用极限范围，启用`LimitRanger`进气控制器:
```
$ ps aux | grep kube-api
root      3708  6.7  8.7 497216 345256 ?       Ssl  01:44   0:10 kube-apiserver --advertise-address=192.168.99.116 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/var/lib/minikube/certs/ca.crt --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota
```
使用 LimitRanger，我们可以对存储和计算资源实施`default`、`min`和`max`限制。集群管理员为容器、容器和持久卷声明等对象创建一个限制范围。对于任何对象创建或更新的请求，限制范围接纳控制器验证该请求没有违反任何限制范围。如果请求违反任何限制范围，将发送 403 禁止响应。
让我们看一个简单的极限范围的例子:
1.  创建将应用限制范围的命名空间:
    ```
    $kubectl create namespace demo
    ```
2.  为名称空间定义一个`LimitRange`:
    ```
    $ cat limit_range.yaml
    apiVersion: "v1"
    kind: "LimitRange"
    metadata:
      name: limit1
      namespace: demo
    spec:
      limits:
      - type: "Container"
        max:
          memory: 512Mi
          cpu: 500m
        min:
          memory: 50Mi
          cpu: 50m
    ```
3.  验证`limitrange`是否适用:
    ```
    $ kubectl get limitrange -n demo
    NAME     CREATED AT
    limit1   2020-04-30T02:06:18Z
    ```
4.  Create a pod that violates the limit range:
    ```
    $cat nginx-bad.yaml
    apiVersion: v1
    kind: Pod
    metadata:
      name: nginx-bad
    spec:
      containers:
      - name: nginx-bad
        image: nginx-bad
        resources:
          limits:
            memory: "800Mi"
            cpu: "500m"
    ```
    此请求将被拒绝:
    ```
    $ kubectl apply -f nginx-bad.yaml -n demo
    Error from server (Forbidden): error when creating "nginx-bad.yaml": pods "nginx-bad" is forbidden: maximum memory usage per Container is 512Mi, but limit is 800M
    ```
如果一个限制程序指定了一个中央处理器或内存，所有的容器和容器都应该有中央处理器或内存请求或限制。当应用编程接口服务器收到创建或更新对象的请求时，而不是在运行时，LimitRanger 会工作。如果一个 Pod 在应用极限之前有违反极限，它将继续运行。理想情况下，应该在创建命名空间时对其进行限制。
现在，我们已经了解了一些可用于主动资源管理的功能，现在我们换个话题，看看可以帮助我们监控集群并在情况恶化之前通知我们的工具。
# Kubernetes 资源监测
正如我们之前讨论的，资源监控是确保集群中服务可用性的重要步骤。资源监控发现集群中服务不可用的早期迹象或症状。资源监控通常辅以警报管理，以确保一旦观察到群集中的任何问题或与任何问题相关的症状，就会通知利益相关者。
在本节中，我们首先看一下 Kubernetes 提供的一些内置监视器，包括 Kubernetes 仪表板和 Metrics Server。我们看看如何设置它，并讨论如何有效地使用这些工具。接下来，我们看看一些开源工具，它们可以插入到你的 Kubernetes 集群中，并提供比内置工具更深入的洞察力。
## 内置监视器
让我们来看看 Kubernetes 提供的一些用于监控 Kubernetes 资源和对象的工具——Metrics Server 和 Kubernetes Dashboard。
### 忽必烈的控制板
Kubernetes Dashboard 为集群管理员创建、管理和监控集群对象和资源提供了一个 web UI。集群管理员还可以使用仪表板创建 Pod 、服务和 daemmonsets。仪表板显示集群的状态和集群中的任何错误。
Kubernetes Dashboard 提供集群管理员管理集群内的资源和对象所需的所有功能。鉴于仪表板的功能，对仪表板的访问应该仅限于集群管理员。仪表板具有从 1.7.0 版开始的登录功能。2018 年，在仪表板中发现了一个权限升级漏洞(CVE-2018-18264)，该漏洞允许未经身份验证的用户登录仪表板。这个问题没有已知的公开漏洞，但是这个简单的漏洞可能会对许多 Kubernetes 发行版造成严重破坏。
当前登录功能允许使用服务帐户和`kubeconfig`登录。建议使用服务帐户令牌来访问 Kubernetes 仪表板:
![Figure 10.1 – Kubernetes Dashboard ](img/B15566_10_001.jpg)
图 10.1-无间隙仪表板
要允许服务帐户使用 Kubernetes 仪表板，您需要向服务帐户添加`cluster-admin`角色。让我们看一个如何使用服务帐户访问 Kubernetes 仪表板的示例:
1.  在默认名称空间中创建服务帐户:
    ```
    $kubectl create serviceaccount dashboard-admin-sa
    ```
2.  将`cluster-admin`角色与服务帐户关联:
    ```
    $kubectl create clusterrolebinding dashboard-admin-sa --clusterrole=cluster-admin --serviceaccount=default:dashboard-admin-sa
    ```
3.  获取服务账户的令牌:
    ```
    $ kubectl describe serviceaccount dashboard-admin-sa
    Name:                dashboard-admin-sa
    Namespace:           default
    Labels:              
    Annotations:         
    Image pull secrets:  
    Mountable secrets:   dashboard-admin-sa-token-5zwpw
    Tokens:              dashboard-admin-sa-token-5zwpw
    Events:              
    ```
4.  使用以下命令获取服务帐户的令牌:
    ```
    $ kubectl describe secrets dashboard-admin-sa-token-5zwpw
    Name:         dashboard-admin-sa-token-5zwpw
    Namespace:    default
    Labels:       
    Annotations:  kubernetes.io/service-account.name: dashboard-admin-sa
                  kubernetes.io/service-account.uid: 83218a92-915c-11ea-b763-42010a800022
    Type:  kubernetes.io/service-account-token
    Data
    ====
    ca.crt:     1119 bytes
    namespace:  7 bytes
    token:      
    ```
5.  使用服务帐户令牌登录仪表板:
![Figure 10.2 – Kubernetes dashboard login ](img/B15566_10_002.jpg)
图 10.2-固定仪表板登录
使用 Kubernetes 仪表板，管理员可以深入了解资源可用性、资源分配、Kubernetes 对象和事件日志:
![Figure 10.3 – Kubernetes Dashboard – resource allocation ](img/B15566_10_003.jpg)
图 10.3–Kubernetes 仪表板–资源分配
前面的屏幕截图显示了节点上针对资源请求和限制的资源分配。以下屏幕截图突出显示了 Kubernetes 仪表板上某个节点的事件:
![Figure 10.4 – Kubernetes Dashboard – event logs ](img/B15566_10_004.jpg)
图 10.4–Kubernetes 仪表板–事件日志
Kubernetes Dashboard 作为主节点上的容器运行。您可以通过枚举主节点上的 Docker 容器看到这一点:
```
$ docker ps | grep dashboard
a963e6e6a54b        3b08661dc379           "/metrics-sidecar"       4 minutes ago       Up 4 minutes                            k8s_dashboard-metrics-scraper_dashboard-metrics-scraper-84bfdf55ff-wfxdm_kubernetes-dashboard_5a7ef2a8-b3b4-4e4c-ae85-11cc8b61c1c1_0
c28f0e2799c1        cdc71b5a8a0e           "/dashboard --insecu…"   4 minutes ago       Up 4 minutes                            k8s_kubernetes-dashboard_kubernetes-dashboard-bc446cc64-czmn8_kubernetes-dashboard_40630c71-3c6a-447b-ae68-e23603686ede_0
10f0b024a13f        k8s.gcr.io/pause:3.2   "/pause"                 4 minutes ago       Up 4 minutes                            k8s_POD_dashboard-metrics-scraper-84bfdf55ff-wfxdm_kubernetes-dashboard_5a7ef2a8-b3b4-4e4c-ae85-11cc8b61c1c1_0
f9c1e82174d8        k8s.gcr.io/pause:3.2   "/pause"                 4 minutes ago       Up 4 minutes                            k8s_POD_kubernetes-dashboard-bc446cc64-czmn8_kubernetes-dashboard_40630c71-3c6a-447b-ae68-e23603686ede_0
```
仪表板进程使用主节点上的一组参数运行:
```
$ ps aux | grep dashboard
dbus     10727  0.9  1.1 136752 46240 ?        Ssl  05:46   0:02 /dashboard --insecure-bind-address=0.0.0.0 --bind-address=0.0.0.0 --namespace=kubernetes-dashboard --enable-skip-login --disable-settings-authorizer
docker   11889  0.0  0.0  11408   556 pts/0    S+   05:51   0:00 grep dashboard
```
使用以下参数确保仪表板容器正在运行:
*   **禁用不安全端口** : `--insecure-port`启用 Kubernetes 仪表板通过 HTTP 接收请求。确保在生产环境中禁用。
*   **禁用不安全地址** : `--insecure-bind-address`应禁用，以避免出现可通过 HTTP 访问 Kubernetes 仪表板的情况。
*   **将地址绑定到本地主机** : `--bind-address`应设置为`127.0.0.1`以防止主机通过互联网连接。
*   **启用 TLS** :使用`tls-cert-file`和`tls-key-file`通过安全通道访问仪表盘。
*   **确保启用令牌认证模式**:可以使用`--authentication-mode`标志指定认证模式。默认设置为`token`。确保仪表板不使用基本身份验证。
*   **禁用不安全登录**:当仪表盘通过 HTTP 可用时，使用不安全登录。默认情况下，应禁用此功能。
*   **禁用跳过登录**:跳过登录允许未经认证的用户访问 Kubernetes 仪表盘。`--enable-skip-login`启用跳过登录；这不应该出现在生产环境中。
*   **禁用设置授权者** : `--disable-settings-authorizer`允许未经认证的用户访问设置页面。在生产环境中应禁用。
### 度量服务器
度量服务器使用每个节点上每个`kubelet`公开的摘要应用编程接口聚合集群使用数据。使用`kube-aggregator`注册`kube-apiserver`。度量服务器通过度量应用编程接口公开收集的度量，这些度量由水平容器自动缩放器和垂直容器自动缩放器使用。用于调试集群的`kubectl top`也使用了 Metrics API。度量服务器是专门为自动缩放而设计的。
默认情况下，在某些 Kubernetes 发行版上启用了度量服务器。您可以使用以下命令在`minikube`上启用它:
```
$ minikube addons enable metrics-server
```
您可以使用以下命令检查度量服务器是否已启用:
```
$ kubectl get apiservices | grep metrics
v1beta1.metrics.k8s.io                 kube-system/metrics-server   True        7m17s
```
一旦启用了度量服务器，就需要一些时间来查询概要应用编程接口并关联数据。您可以使用`kubectl top node`查看当前指标:
```
$ kubectl top node
NAME       CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%
minikube   156m         7%     1140Mi          30%
$ kubectl top pod
NAME         CPU(cores)   MEMORY(bytes)
nginx-good   0m           2Mi
```
与其他服务和组件类似，度量服务器也有配置参数。在生产集群中，确保度量服务器不使用`--kubelet-insecure-tls`标志，该标志允许度量服务器跳过 CA 对证书的验证。
## 第三方监控工具
第三方监控工具将集成到 Kubernetes 中，为 Kubernetes 资源的健康状况提供更多功能和见解。在本节中，我们将讨论 Prometheus 和 Grafana，它们是开源社区中最流行的监控工具。
## 普罗米修斯和格拉夫纳
普罗米修斯是一个由 SoundCloud 开发并被 CNCF 采用的开放源代码工具和数据收集框架。普罗米修斯可以用来查看不同数据点的时间序列数据。普罗米修斯使用牵引系统。它发送一个名为 scrape 的 HTTP 请求，从系统组件中获取数据，包括应用编程接口服务器、`node-exporter`和`kubelet`。对刮擦的响应和度量标准存储在普罗米修斯服务器上的定制数据库中。
让我们看看如何设置普罗米修斯来监控 Kubernetes 的命名空间:
1.  创建名称空间:
    ```
    $kubectl create namespace monitoring
    ```
2.  Define a cluster role to read Kubernetes objects such as pods, nodes, and services and add the role binding to a service account. In this example, we are using the default service account:
    ```
    $ cat prometheus-role.yaml
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      name: prometheus
    rules:
    - apiGroups: [""]
      resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
      verbs: ["get", "list", "watch"]
    - apiGroups:
      - extensions
      resources:
      - ingresses
      verbs: ["get", "list", "watch"]
    - nonResourceURLs: ["/metrics"]
      verbs: ["get"]
    $ kubectl create -f prometheus-role.yaml
    clusterrole.rbac.authorization.k8s.io/prometheus created
    ```
    现在，我们创建一个角色绑定，将角色与默认服务帐户相关联: