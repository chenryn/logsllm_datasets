title:Multilayer ROP Protection Via Microarchitectural Units Available
in Commodity Hardware
author:Mateus Tymburib&apos;a and
Hugo Sousa and
Fernando Magno Quintão Pereira
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Multilayer ROP Protection via Microarchitectural
Units Available in Commodity Hardware
Mateus Tymburib´a∗†
Hugo Ara´ujo de Sousa† and Fernando Magno Quint˜ao Pereira†
∗Department of Computer Science (DECOM)
†Department of Computer Science (DCC)
CEFET-MG
Belo Horizonte, Brazil
PI:EMAIL
UFMG
{mateustymbu,hugosousa,fernando}@dcc.ufmg.br
Belo Horizonte, Brazil
Abstract—This paper presents a multilayer protection ap-
proach to guard programs against Return-Oriented Program-
ming (ROP) attacks. Upper layers validate most of a program’s
control ﬂow at a low computational cost; thus, not compromising
runtime. Lower layers provide strong enforcement guarantees
to handle more suspicious ﬂows; thus, enhancing security. Our
multilayer system combines techniques already described in the
literature with veriﬁcations that we introduce in this paper. We
argue that modern versions of x86 processors already provide the
microarchitectural units necessary to implement our technique.
We demonstrate the effectiveness of our multilayer protection
on a extensive suite of benchmarks, which includes: SPEC
CPU2006; the three most popular web browsers; 209 benchmarks
distributed with LLVM and four well-known systems shown to
be vulnerable to ROP exploits. Our experiments indicate that
we can protect programs with almost no overhead in practice,
allying the good performance of lightweight security techniques
with the high dependability of heavyweight approaches.
Index Terms—ROP, Architecture, Layers, RAS, LBR, CFI
I. INTRODUCTION
Return-Oriented Programming (ROP) is a form of software
exploitation. It consists in chaining sequences of binary in-
structions of a program to force actions not originally intended
by developers of that program [1]. Notorious malware such
as Conﬁcker [2], [3] and Duqu [4] use ROP. Additionally,
the CVE database contains several examples of vulnerabilities
recently exploited by ROP artifacts [5]–[7]. The damage that
these exploits have caused has been extensively covered by the
media; nevertheless, the research community tends to believe
that current protection techniques can prevent most ROP
attacks from succeeding [8], [9]. Even recent demonstrations
of successful attacks are tailored to particular applications or
protection measures, being unlikely to work in general [10]–
[12]. And yet, ROP remains a threat. Performance, in this
case, is to be blamed: effective protection techniques tend to
slowdown programs beyond acceptable levels; hence, they are
not used in practice.
The majority of anti-ROP protection techniques used in
practice are based on Control Flow Integrity (CFI). Compilers
such as clang or gcc implement different forms of CFI,
but they all have in common the fact that they attempt to
prevent unwanted program ﬂows from happening. The ﬁrst
implementation of CFI incurred an overhead of 21% [13]. Said
overhead has been since reduced, but it remains noticeable.
As pointed by Burow et al. [8], effective CFI requires the
validation of every type of indirect branch, including return
instructions. Such veriﬁcation has a cost. A quick survey over
recent implementations of CFI reveals an overhead between 2
and 18%. This range includes SafeDispatch [14], T-VIP [15],
VTV/IFCC [16], vfGuard [17], and VTint [18]. These ap-
proaches implement a version of CFI known as forward-
only. More general techniques, that verify targets of return
instructions, tend to be expensive because these instructions
are more frequent than indirect calls and jmps. Techniques
that guard return instructions, such as the original CFI [13],
MoCFI [19], Lockdown [20], PathArmor [9] and PittyPat [21]
present overheads ranging from 7 to 21%.
recent ROP-based exploits
This observation: “effective CFI is computationally too
expensive to be practical”, has been key for the demonstration
of
[22]–[24]. Additionally,
two other factors contribute to make it difﬁcult to design
the
and implement a deﬁnitive CFI mechanism. First,
more constrained the implementation of CFI,
the more
false positives it raises, often rendering the execution of
authentic programs an impractical task. Second, it has been
demonstrated recently that even these more restrictive versions
of CFI can be surpassed by determined attackers. Carlini et
al. [23] have shown how to circumvent fully-precise CFI, and
Veen et al. [24] have shown how to bypass context-sensitive
CFI. Therefore, the design and implementation of a system
that prevents ROP attacks from succeeding with efﬁciency
and effectiveness remains an open problem.
Our Thesis. Efﬁciency and effectiveness do not need
to coexist in a single protection technique. Rather, we can
achieve them by combining existing approaches in layers. This
view implies a change of perspective: instead of focusing on
malicious execution streams as previous work does [9], [13]–
[21], we ﬁrst certify authentic streams. Upper layers cheaply
certify most of the program ﬂows and drastically reduce
the number of tests executed in lower layers, which check
eccentric codes via more expensive veriﬁcations. This novel
multilayer system can be implemented using components that
exist in current versions of the x86 architecture.
Our Contribution. As a proof of concept, we propose a
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00042
315
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:59 UTC from IEEE Xplore.  Restrictions apply. 
three-layered defense system to prevent code reuse attacks that
divert return instructions. The ﬁrst layer (Layer 1), explained
in Section III-A, uses the hardware branch predictors to
ﬁlter authentic execution ﬂows. If the target of a return
instruction is correctly predicted, then it is considered valid.
This observation has already motivated previous work, which
we revisit in Section V. Our Layer 1 ﬁlters out most of the
valid program ﬂows, because the branch predictor is very
accurate, even when applied onto indirect branches, as we
show in Section IV-C. Therefore, few branches slip from
the ﬁrst to the second layer, where more expensive checks
happen. Layer 2, the subject of Section III-B, implements an
original detection strategy that reduces the quantity of gadgets
available to attackers. It extends Kiriansky et al.’s concept
of call-preceded return address veriﬁcation [25]. However,
in addition to checking if a return address is preceded by
a call instruction, we also verify if that call is valid.
This new step was necessary: Carlini et al. [23] have already
showed that Kiriansky’s method is not difﬁcult to circumvent.
Our third layer, the subject of Section III-C, avoids false
positives related to the veriﬁcation of return addresses. The
goal of this layer is to reduce the number of false alarms that
would be raised by genuine control ﬂows.
Our Results. We evaluate our ideas in Section IV. Our
model imposes a small execution time overhead of 0.57%
in a set of benchmarks composed by all 29 programs from
SPEC CPU2006 [26] plus 209 benchmarks from the LLVM
Test Suite [27]. The main reason for this reduced overhead
is the high hit rate of branch prediction based on the Return
Address Stack: 99%. The new check introduced in Layer 2
to validate call instructions that precede return addresses is
also effective. It reduces by almost 35x the number of gadgets
available to build an attack, when compared to a previous
protection mechanism [25]. We analyzed the number of false
positives that slip through our ﬁrst two layers of protection.
In this experiment, we enriched our benchmark suite with
the three most popular desktop browsers and four vulnerable
applications for which there are known ROP exploits. Only
3.14% of all return addresses are considered invalid in these
benchmarks. We demonstrate that the cost to treat these false
positives bears no impact in the execution time of programs.
A Design Based on Microarchitectural Units. We demon-
strate the viability of our ideas using a prototype implemented
in software, via Pin [28]; however, an important part of this
work is to show that all these layers could be built at the
hardware level, via microarchitectural units already in place
in modern versions of x86 processors. Such units include
the branch prediction machinery, branch recording structures,
and executable space protection mechanisms. To support this
claim, the description of every protection layer contains a
discussion on how it can be implemented in today’s hardware.
The change of perspective mentioned in our Thesis fosters
a very modular design. It is conceptually possible to replace
the second layer of our model with other techniques that
validate branches, as long as the necessary architectural units
are in place. One candidate that ﬁts well our second layer
is Intel’s Control-ﬂow Enforcement Technology (CET) [29] –
a technique that also thwarts Jump-Oriented [30], [31] (JOP)
and Call-Oriented [23], [32] (COP) Programming attacks. The
basic principle is the same: the high-accuracy of the branch
predictor leaves less jmps and calls to be veriﬁed by CET.
And, similar to the Return Address Stack, the call and jmp
predictors cannot be tampered with, as they are based on the
previous execution of the instruction. When a call or jmp
is executed for the ﬁrst time, the branch predictor always
misses and, therefore, forces the validation of that instruction
in Layer 2. To demonstrate modularity, in Section IV, we show
empirically the beneﬁts of implementing Layer 2 using CET.
II. RETURN-ORIENTED PROGRAMMING
they can control
ROPs are built around chains of gadgets. A gadget is a
sequence of instructions that ends with an indirect branch
– usually a return instruction. ROPs are used after the ex-
ploitation of several kinds of vulnerabilities [33], such as
buffer-overﬂows, integer-overﬂows and uses-after-free. Once
attackers exploit such vulnerabilities,
the
execution ﬂow of the vulnerable application overwriting its
function stack with addresses of several gadgets, which will
execute in sequence. After one gadget ﬁnishes its execution,
its ﬁnal indirect branch sends the program ﬂow to the next
gadget whose address has been stacked by the attacker.
These gadgets can be chained to bypass typical OS-level
protections, such as Write⊕Execute. Once it is disabled, at-
tackers can execute code from memory pages marked as data.
For instance, Windows, depending on its conﬁguration, lets
a process disable Data Execution Prevention (DEP) via the
routine SetProcessDEPPolicy. To invoke this function,
an attacker can use sequences of gadgets to prepare its argu-
ments. Tutorials and examples of ROP-based attacks abound
in the Internet. For instance,
in September 17th of 2011,
Blake et al. [34] demonstrated how to hijack control of My
MP3 Player v3.0 by disabling the DEP in Windows XP
SP3. This particular attack used 10 gadgets. Figure 1 shows
a snapshot of the stack during the actual exploitation of My
MP3 Player.
The greatest challenge that attackers face when performing
a ROP-based exploitation is to ﬁnd gadgets free of side effects
to avoid spoiling values previously prepared by the attackers
themselves. Nevertheless, there are tools that ﬁnd gadgets out
of the binary representation of programs. As an example,
Q [35], Mayhem [36] and Mona [37] give an attacker the
means to automatically discover gadgets in a binary ﬁle.
III. LAYERS OF PROTECTION
This paper shows that it is possible to combine different
anti-ROP mechanisms in layers, so that lower-level layers
(costly but effective) are only used when cheap higher-level
layers have already ﬁltered most of the authentic indirect
branch ﬂows. Figure 2 shows an abstract view of the multilayer
protection mechanism that we advocate. Our key idea is to
316
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:59 UTC from IEEE Xplore.  Restrictions apply. 
Stack after buffer 
overflow has 
overwritten data
0x5D09398C
0xFFFFFFFF
Gadgets
0x...
RETN
0x5D09398C
POP EBX
0x77129028
0x77129028
RETN
0x77129444
0x7C862144
0x77121C36
0x77121C37
0x77121AD4
0x77121C37
0x77148CF7
0x77129444
POP EBP
RETN
0x77121AD4
POP ESI
RETN
0x...
INC EBX
RETN
0x77121C36
POP EDI
RETN
0x77148CF7
PUSHAD
RETN
Figure 1. Stack of My MP3 Player during ROP-based attack.
certify the validity of indirect branches – the cornerstone of
modern ROP exploits – in layers. The targets of the vast
majority of these branches will be certiﬁed in our ﬁrst layer,
described in Section III-A. The few targets that we cannot
validate at this level will undergo a further veriﬁcation step
in our second layer, to be explained in Section III-B. A third
layer will ﬁlter this stream of branches even further, using the
methodology described in Section III-C.
unverified 
targets
unverified 
targets
unverified 
targets
unverified targets
...
cmp BYTE PTR DS:[7C97B094], 0
mov esi, DWORD PTR SS:[ebp+8]
mov DWORD PTR SS:[ebp-4], eax
jnz ntdll.7C90FED6
test BYTE PTR DS:[esi+10],10
je ntdll.7C90FED6
pop esi
leave
retn 4
Indirect Branch Predictor
Very light runtime overhead
Weak safety guarantees
Return Address Validator
Light runtime overhead
Moderate guarantees
False Positive Filter
Moderate (<1%) runtime overhead
Strong guarantees
OS Sandbox
Heavy runtime overhead
Very strong guarantees
Figure 2. Abstract overview of our multilayer protection mechanism.
If we cannot verify the target of a branch into these three
layers, then multiple actions are possible. The most immediate
of them would be to interrupt the program. However, a better
compromise is to move the program into a safe mode; safety,
317
in this case, can be achieved via sandboxing at the operating
system level. Section III-D discusses this possibility; however,
we emphasize that the implementation of sandboxing, a well-
researched theme, is not part of the scope of this paper. Our
idea is to ﬁlter out most of the indirect branch targets at
a low computational cost. For the few that remain, we can
afford the heavy price of stronger enforcement. As we show
in Section IV-B, the proportion of targets that escape from one
sieve to the next is tiny.
A. First level: Branch predictors
The ﬁrst layer of protection relies on the branch predictors
to validate targets of indirect branches. Modern computer
architectures try to predict the target of indirect branch in-
structions to avoid stalls in the pipeline. For instance, current
implementations of x86 use the so called Return Address Stack
(RAS) to predict the address targeted by returns. Whenever
a function is invoked through a call instruction, the address
immediately following this invocation point is pushed onto
the RAS. When a return operation executes, the predictor
attempts to guess its target as the address on top of the RAS.
Correct predictions designate legitimate program ﬂows; thus,
these branch targets should not be further veriﬁed. This modus
operandi is simple, yet very effective and costless.
The use that we make of the RAS resembles a technique
known as Shadow Stack [38]. A shadow stack does exactly
what the RAS does: matches the target of returns against
the addresses following call instructions, in a stack-like
fashion. However, shadow stacks were conceived before the
they
RAS became part of current x86 processors; hence,
could not beneﬁt from this hardware. We claim that
the
shadow stack can be implemented at zero-overhead, at the
hardware level, by capitalizing on the RAS infrastructure.
Although we do not treat ROP attacks based on the other
types of indirect branches (indirect calls and jmps) in
this work, we show that their predictors have characteristics
of efﬁciency and effectiveness similar to those exhibited by
the RAS. This makes them perfect candidates to compose
the ﬁrst
the abuse of other
indirect branches. In Section IV-B1, we show the hit rate of
these predictors, in addition to the hit rate reached by the RAS.
layer of protection against
Implementation: The implementation of this protection layer
only requires one extra comparison at the level of the branch
predictor. This check can be fully implemented in hardware
with no impact on the execution time of programs, since it
does not directly impact the instructions pipeline.
Prototype: In Section IV we use hardware performance coun-
ters available in current x86 architectures to evaluate the hit
rate of branch predictors. The defense mechanisms proposed
in this paper do not depend on the availability of hardware
counters –we use such devices for evaluation only.
B. Second level: valid call
Not every return address that is mispredicted indicates a
ROP attack. Mispredictions happen due to overﬂows in the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:59 UTC from IEEE Xplore.  Restrictions apply. 
0x...35FE
...
0x...35FF
predecessor
0x...3600
0x...3601
ret target
...
...
ret
...
3
equal?
N
direct?
Y
call?
1
N
(cid:1)
2
top
Y
LBR
Y
Y
N
N
2
executable?
✓
Layer 2
Layer 3
Figure 3. The second protection layer.
RAS buffer, an incident caused by very long sequences of
function invocations, or context switches between processes
that compete for the CPU. If the target of a return is
mispredicted, then we resort to further validation.