## xfs logdev 完美解决cgroup iops限制时ext4 data=writeback才能解决的问题    
### 作者                                                                                     
digoal                                   
### 日期                                     
2016-01-07                                  
### 标签                                   
PostgreSQL , xfs , ext4 , cgroup , iops , iohang , writeback , ordered , xfs logdev  
----                                  
## 背景                                 
Linux下面ext4和xfs都是带journal的文件系统，在写metadata前，必须先写metadata的journal。  
（journal类似数据库的REDO LOG，可用于灾难恢复）  
metadata则包含了文件系统的inodes, directories, indirect blocks信息。创建文件（含目录），改变文件大小，改变文件修改时间都涉及metadata的写操作。  
在ext4,xfs文件系统中，metadata的journal操作是串行的，这点和redo log也类似。  
cgroup的blkio模块，可以控制进程对指定块设备的读，写IOPS，吞吐率等。  
当我们对iops进行限制时，由于"metadata的journal操作是串行的"，可能遇到相互干扰的问题。  
例如：  
有1个块设备，找到它的major,minor号。  
```  
#ll /dev/mapper/aliflash-lv0*  
lrwxrwxrwx 1 root root 7 Jan  7 11:12 /dev/mapper/aliflash-lv01 -> ../dm-0  
#ll /dev/dm-0  
brw-rw---- 1 root disk 253, 0 Jan  7 11:22 /dev/dm-0  
```  
在这个块设备上创建xfs或ext4文件系统，并挂载到/data01。  
初始化两个PostgreSQL数据库实例，分别放在/data01不同目录中。  
限制其中一个PostgreSQL集群对（253:0）这个块设备的写IOPS到100。  
```  
ps -ewf|grep postgres  
digoal 24259     1  0 12:58 pts/4    00:00:00 /home/digoal/pgsql9.5/bin/postgres  -- 监听1921  
digoal 24260 24259  0 12:58 ?        00:00:00 postgres: logger process              
digoal 24262 24259  0 12:58 ?        00:00:00 postgres: checkpointer process        
digoal 24263 24259  0 12:58 ?        00:00:00 postgres: writer process              
digoal 24264 24259  0 12:58 ?        00:00:00 postgres: wal writer process          
digoal 24265 24259  0 12:58 ?        00:00:00 postgres: autovacuum launcher process     
digoal 24266 24259  0 12:58 ?        00:00:00 postgres: stats collector process     
digoal 24293     1  0 12:58 pts/4    00:00:00 /home/digoal/pgsql9.5/bin/postgres -D /data01/digoal/pg_root  -- 监听1922  
digoal 24294 24293  0 12:58 ?        00:00:00 postgres: logger process                                          
digoal 24296 24293  0 12:58 ?        00:00:20 postgres: checkpointer process                                    
digoal 24297 24293  0 12:58 ?        00:00:00 postgres: writer process                                          
digoal 24298 24293  0 12:58 ?        00:00:00 postgres: wal writer process                                      
digoal 24299 24293  0 12:58 ?        00:00:00 postgres: autovacuum launcher process                             
digoal 24300 24293  0 12:58 ?        00:00:00 postgres: stats collector process   
```  
限制1921实例的IOPS  
```  
cd /sys/fs/cgroup/blkio/  
mkdir cg1  
cd cg1  
echo "253:0 100" > blkio.throttle.write_iops_device  
echo 24259 > tasks  
echo 24260 > tasks  
echo 24262 > tasks  
echo 24263 > tasks  
echo 24264 > tasks  
echo 24265 > tasks  
echo 24266 > tasks  
```  
开启一个会大量修改metadata的压测。使用create database即可。  
（create database会大量的COPY模板库的数据文件，调用fsync。从而产生大量的metadata修改的动作，触发metadata journal的修改。）  
```  
vi test.sh  
#!/bin/bash  
for ((i=0;i./conn 2>&1  
```  
连接第二个数据库实例  
```  
postgres@digoal-> strace -T psql -h 127.0.0.1 -p 1922  
execve("/opt/pgsql/bin/psql", ["psql", "-h", "127.0.0.1", "-p", "1922"], [/* 34 vars */]) = 0   
brk(0)                                  = 0x1747000   
...  
poll([{fd=3, events=POLLIN|POLLERR}], 1, -1) // 会卡在这里  
```  
此时在系统中可以看到startup进程，是postmaster fork出来的，注意这个进程号，和后面的conn文件对应起来。  
```  
[root@digoal postgresql-9.4.4]# ps -efw|grep start  
postgres 46147 24293  0 19:43 ?        00:00:00 postgres: postgres postgres 127.0.0.1(17947) startup  
strace -T psql -h 127.0.0.1 -p 1922的输出截取：  
setsockopt(3, SOL_SOCKET, SO_KEEPALIVE, [1], 4) = 0   
connect(3, {sa_family=AF_INET, sin_port=htons(1922), sin_addr=inet_addr("127.0.0.1")}, 16) = -1 EINPROGRESS (Operation now in progress)   
poll([{fd=3, events=POLLOUT|POLLERR}], 1, -1) = 1 ([{fd=3, revents=POLLOUT}])   
getsockopt(3, SOL_SOCKET, SO_ERROR, [0], [4]) = 0   
getsockname(3, {sa_family=AF_INET, sin_port=htons(17947), sin_addr=inet_addr("127.0.0.1")}, [16]) = 0   
poll([{fd=3, events=POLLOUT|POLLERR}], 1, -1) = 1 ([{fd=3, revents=POLLOUT}])   
sendto(3, "\0\0\0\10\4\322\26/", 8, MSG_NOSIGNAL, NULL, 0) = 8   
poll([{fd=3, events=POLLIN|POLLERR}], 1, -1) = 1 ([{fd=3, revents=POLLIN}])   
recvfrom(3, "N", 16384, 0, NULL, NULL)  = 1   
poll([{fd=3, events=POLLOUT|POLLERR}], 1, -1) = 1 ([{fd=3, revents=POLLOUT}])   
sendto(3, "\0\0\0T\0\3\0\0user\0postgres\0database\0p"..., 84, MSG_NOSIGNAL, NULL, 0) = 84   
poll响应时间达到了67秒  
poll([{fd=3, events=POLLIN|POLLERR}], 1, -1) = 1 ([{fd=3, revents=POLLIN}])   , 响应时间达到了67秒  
recvfrom(3, "R\0\0\0\10\0\0\0\0S\0\0\0\32application_name\0p"..., 16384, 0, NULL, NULL) = 322   
```  
当建立连接后，查看postmaster进程的跟踪情况。可以看到startup进程46147，这个进程调用write花了66秒，因为这次调用write时触发了写修改metadata的动作。  
```  
[root@digoal ~]# grep "pid 46147" conn|less  
[pid 46147] mmap(NULL, 528384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0f1403d000   
[pid 46147] unlink("global/pg_internal.init.46147") = -1 ENOENT (No such file or directory)   
[pid 46147] open("global/pg_internal.init.46147", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 14   
[pid 46147] fstat(14, {st_mode=S_IFREG|0600, st_size=0, ...}) = 0   
[pid 46147] mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0f1403c000   
[pid 46147] write(14, "f2W\0008\1\0\0\0\0\0\0\200\6\0\0\0\0\0\0U2\0\0\0\0\0\0\0\0\0\0"..., 4096   
[pid 46147]  )       = 4096   
[pid 46147] --- SIGALRM (Alarm clock) @ 0 (0) ---  
```  
找到对应的代码：  
write_relcache_init_file@src/backend/utils/cache/relcache.c  
重新跟踪这个c文件：  
```  
[root@digoal ~]# cat trc.stp   
global f_start[999999]  
probe process("/opt/pgsql/bin/postgres").function("*@/opt/soft_bak/postgresql-9.4.4/src/backend/utils/cache/relcache.c").call {   
  f_start[execname(), pid(), tid(), cpu()] = gettimeofday_ms()  
}  
probe process("/opt/pgsql/bin/postgres").function("*@/opt/soft_bak/postgresql-9.4.4/src/backend/utils/cache/relcache.c").return {   
  t=gettimeofday_ms()  
  a=execname()  
  b=cpu()  
  c=pid()  
  d=pp()  
  e=tid()  
  if (f_start[a,c,e,b] && t-f_start[a,c,e,b]>1) {  
#    printf("time:%d, execname:%s, pp:%s, par:%s\n", t - f_start[a,c,e,b], a, d, $$locals$$)  
    printf("time:%d, execname:%s, pp:%s\n", t - f_start[a,c,e,b], a, d)  
  }  
}  
```  
因为startup进程是动态生成的，所以只能这样跟踪：  
```  
[root@digoal ~]# cat t.sh  
#!/bin/bash  
for ((i=0;i strace -T psql -h 127.0.0.1 -p 1922  
[root@digoal ~]# . ./t.sh  
Pass 1: parsed user script and 111 library script(s) using 209296virt/36828res/3172shr/34516data kb, in 180usr/20sys/199real ms.  
Pass 2: analyzed script: 102 probe(s), 7 function(s), 4 embed(s), 1 global(s) using 223800virt/51400res/4172shr/49020data kb, in 80usr/60sys/142real ms.  
Pass 3: translated to C into "/tmp/stapbw7MDq/stap_b17f8a3318ccf4b972f4b84491bbdc1e_54060_src.c" using 223800virt/51744res/4504shr/49020data kb, in 10usr/40sys/57real ms.  
Pass 4: compiled C into "stap_b17f8a3318ccf4b972f4b84491bbdc1e_54060.ko" in 1440usr/370sys/1640real ms.  
Pass 5: starting run.  
time:6134, execname:postgres, pp:process("/opt/pgsql9.4.4/bin/postgres").function("write_item@/opt/soft_bak/postgresql-9.4.4/src/backend/utils/cache/relcache.c:4979").return  
time:3, execname:postgres, pp:process("/opt/pgsql9.4.4/bin/postgres").function("write_item@/opt/soft_bak/postgresql-9.4.4/src/backend/utils/cache/relcache.c:4979").return  
time:6, execname:postgres, pp:process("/opt/pgsql9.4.4/bin/postgres").function("write_item@/opt/soft_bak/postgresql-9.4.4/src/backend/utils/cache/relcache.c:4979").return  
......  
```  
以上问题怎么解决？如何隔离数据库实例的IOPS不会产生相互干扰呢？  