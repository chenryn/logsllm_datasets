and strengthen the informal folklore claim of Andreeva and Stam [3]
that the plain MD transform preserves collision resistance assuming
it is hard to find a pre-image of the initial vector.
It is important to emphasize here that our proof assumes only the
constrained collision resistance of the compression function and,
thus, this use of MD may similarly enjoy collision resistance even
after a collision is found in the underlying compression function.
We leave it to others to decide when this gain in efficiency is worth
the security tradeoff required in assuming an additional security
property of the hash function.
It will be convenient to first prove a lemma we will use in our
proof. The lemma establishes that any collision in the MD transform
must necessarily give either a collision in the underlying compres-
sion function or a pre-image of s in that compression function.
This builds on Lemma 5.2 to classify MD collisions by additionally
considering what happens when the splitting function is not neces-
sarily suffix-free. It again is not a computational statement; it is a
fact about the structure of collisions for the MD transform.
Lemma 7.1. Let h be a compression function, Split be a splitting
function with Split.Bl = h.Bl∗, and S ⊆ h.Out be a set of possible
starting points. Let H = MD[h, Split, S]. Let k ∈ h.Keys, s ∈ S and
suppose M1, M2 ∈ Split.Inp form a collision for H(k,s). Then at least
one of the following two conditions holds:
(1) On inputs (k, s), M1, M2, the algorithm Bccr shown in Fig. 9
returns ((m1, c1),(m2, c2), a1, a2) such that (m1, c1),(m2, c2)
form a collision for hHk and both (c1 ∈ {s, hHk(a1)}) and
(c2 ∈ {s, hHk}) hold.
(2) On input (k, s), M1, M2, algorithm Bpre of Fig. 11 returns a
pre-image for s under hHk.
Proof. (of Lemma 7.1) Let m1 = Split(M1), m2 = Split(M2),
n1 = |m1|, and n2 = |m2|, as defined in algorithms Bccr and Bpre.
As detailed in the proof of Theorem 6.4 and from Lemma 5.2, if
m1 ̸⊒ m2 and m2 ̸⊒ m1, then the first condition holds. So suppose
without loss of generality that m1 ⊒ m2. Note it then must hold
that n1 ≥ n2.
First suppose there exists an i ∈ {0, . . . , n2−1} such that(m1[n1−
i], c1[n1 − i]) (cid:44) (m2[n2 − i], c2[n2 − i]). Let j be the smallest such
value. It will then hold that c1[n1 − (j − 1)] = c2[n2 − (j − 1)], so
(m1[n1 − j], c1[n1 − j]) and (m2[n2 − j], c2[n2 − j]) form a collision
for hk. During the execution of Bccr it will then return this collision
when i = j in the for loop (or after the for loop in the case that
j = n2 − 1). The same reasoning as in the proof of Theorem 6.4 tells
us that the condition (c1 ∈ {s, hHk(a1)}) and (c2 ∈ {s, hHk}) will
hold of the values returned by Bccr.
Algorithm Bpre((k, s), M1, M2)
m1 ← Split(M1); n1 ← |m1|
m2 ← Split(M2); n2 ← |m2|
b ← argmaxd(nd)
For i = 1, . . . , nb − n3−b do
Return (mb[nb − n3−b], cb[nb − n3−b])
Adversary Bh(k, s)
(M1, M2) ←$ AH(k, s)
Return Bpre(k, s)
cb[i + 1] ← hk((mb[i], cb[i]))
Figure 11: Adversary Bh for Theorem 7.2.
Now suppose (m1[n1 −i], c1[n1 −i]) (cid:44) (m2[n2 −i], c2[n2 −i]) for
all i ∈ {0, . . . , n2 − 1}. This implies, in particular, that c1[n1 − (n2 −
1)] = c2[n2 − (n2 − 1)] = s. Note it must then hold that n1 > n2
(because otherwise we would have m1 = m2 contradicting the fact
that M1 (cid:44) M2). Hence, hk((m1[n1 − n2], c1[n1 − n2])) = s. Noting
then that (m1[n1 − n2], c1[n1 − n2]) will be returned by Bpre, we
have that in all cases at least one of the two conditions of the lemma
hold as desired.
□
Having established the above lemma we can move on to the
main result of this section, that Split being merely injective (and
not necessarily suffix-free) suffices to prove that the MD transform
gives collision resistance if it is hard to find a pre-image for a
starting point randomly chosen from S. Mirroring Theorem 6.4, we
will in fact show the result assuming only the weaker notion of
constrained collision resistance for the compression function h.
Theorem 7.2. Let h be a compression function, let Split be an
injective splitting function with Split.Bl = h.Bl∗ and let S ⊆ h.Out
be a set of possible starting points. Let H = MD[h, Split, S]. Given
an adversary AH, let Ah be the adversary of Fig. 9 and Bh be the
adversary of Fig. 11. Then
Advcr
H(AH) ≤ AdvRccrS
h
(Ah) + AdvRpreS
h
(Bh).
(5)
The time complexity of Ah is about that of AH plus that of Bccr. The
memory complexity of Ah is the maximum of that of AH and that
of Bccr. The time complexity of Bh is about that of AH plus that of
Bpre. The memory complexity of AH is the maximum of that of AH
and that of Bpre.
Stating that Split is injective is redundant (splitting functions
are required to be injective), but we state this explicitly above to
emphasize that injectivity is the only property we assume of Split.
The theorem proceeds fairly easily from Lemma 7.1 because the
adversaries simply run Bccr and Bpre.
Proof. (of Theorem 7.2) Consider the view of adversary AH
F (AH). In each, it consists of a
when run by either Ah, Bh, or in Gcr
key k and starting point s, both of which were chosen uniformly
at random from their respective sets. From Lemma 7.1, we know
if AH successfully finds a collision in H for (k, s) it must be the
case that one of Ah or Bh will be successful in their respective
games (because they simply run Bccr and Bpre, respectively). Then
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA901we have the following inequality, that establishes the result,
Advcr
H(AH) = Pr[Gcr
F (AH)]
≤ Pr[GRccrS
= AdvRccrS
h
(Ah)] + Pr[GRpreS
(Ah) + AdvRpreS
(Bh)]
(Bh).
h
h
h
The claims on the time and memory complexities of the adversaries
are clear.
□
8 ASSUMPTION OF PRE-IMAGE RESISTANCE
We showed that the MD transform can be simplified by additionally
assuming that the compression function h satisfies a pre-image
resistance property. To help understand this result we restate some
results for the literature in our language, as well as prove some new
results to understand how strong of an assumption this is.
The notion of RpreS, defined in Fig. 1, with S = h.Out has been
considered under several different names. In [13], Brown refers to it
as both one-wayness and pre-image resistance and uses it as one of
several assumptions on a hash function to prove a digital signature
scheme is secure. BRS [12] refer to it as inversion resistance and
analyze the security of hash functions in an idealized model. In [21],
Laccetti and Schmid refer to it as pre-image resistance and analyze
the success probability of a brute force attack. In [32], Stinson refers
to it as the pre-image problem and bounds the advantage of an
adversary in the random oracle model as well as giving reductions
between it and some other security notions. Andreeva and Stam [3]
refer to it as range-oriented pre-image finding and relate its security
to various other notions of pre-image resistance. Finally, DRS [18]
refer to it as a variant of pre-image resistance and cite [17] for the
definition, though the latter actually considers a weaker notion.
The notion of RpreS0 (where S0 = {0} is the singleton set con-
taining only some fixed zero string) is considered by both [13] and
[32], where it is referred to, respectively, as zero-finder-resistance
and the zero pre-image problem.
The everywhere pre-image resistant (ePre) security notion of
(A)
[28] defines the advantage of an adversary as maxS∈SAdvRpreS
where Sis defined as the set of all sets S ⊆ {0, 1}∗ with |S| = 1. They
consider the relationship between this and six other security no-
tions. In their framework, this is equivalent to a definition in which
s is chosen from an arbitrary adversarially chosen distribution. This
is the case when only reasoning about worst case adversaries, but
is not equivalent when one worries about explicit reductions, as
we do.
Most of these works [12, 13, 17, 18, 21, 32] were interested only
in keyless hash functions while [28] was interested only in keyed
hash functions. We intentionally model both situations.
Negative Results. Pre-image resistance and collision resistance
are not, in general, implied by each other. To see that pre-image
resistance does not imply collision resistance, consider the hash
function g which on any input x returns its randomly chosen key
k as output. This is trivially pre-image resistant but not collision
resistant as formalized by the following proposition.
F
gk(x)
Return k
adversary Bg(k, s)
Return (x1, x2)
hk((m, c))
If ((m, c[1]) = (0, 0))
Return c
r ← h′
Return 1||r
adversary Bh(k, s)
Return (0, s)
((m, c))
k
k
f(k,p)(x)
y ← f′
(x)
Return y⊕p
adversary Bf′(k, s′)
s ←$ S; p ← s⊕s′
x ←$ A((k, p), s)
Return x
Figure 12: Compression functions and adversaries used for
Proposition 8.1, Proposition 8.2, and Proposition 8.4.
Additionally, if x1, x2 are two distinct elements of g.Inp, then the
adversary Bg shown in Fig. 12 satisfies Advcr
g (Bg) = 1.
Proof. (of Proposition 8.1) The first part of this claim holds
because the only way that a pre-image of the chosen s ∈ S will
even exist is if k happens to equal it. This happens with an exact
probability of 1/|Out|. The second part of this claim holds because
two distinct elements of g.Inp always form a collision for gk.
□
It is also the case that pre-image resistance is not implied by
collision-resistance. This is already implicit in our work from the
combination of Theorem 7.2 and Theorem 5.6 for S = h.Out or
Proposition 5.5 for S = {0}. As noted there, those techniques could
be used to show the same result for any “reasonable” choice of S.
For concreteness, we extract out the core idea of these theorems.
First consider S = {s} for some fixed string s and a hash function
h′ whose output space is all bit strings of the same length as s. Then
define h by hk(x) = h′
(0)⊕s, where 0 is some fixed string
in the input space of h. Then any collision in h is a collision in h′
and 0 is trivially a pre-image of s. So h is not S pre-image resistant,
but it is collision resistant (assuming h′ was).
(x)⊕h′
The following proposition establishes the result for a particular,
larger S = h.Out and can easily be extended to any reasonable
choice of a “large” S.
k
k
Proposition 8.2. Let a ∈ N. Let h′ be a family of functions
with h′.Inp = {0, 1} × {0, 1}a and h′.Out = {0, 1}a−1. Then let h
be the compression function shown in Fig. 12 with h.Inp = h′.Inp,
h.Out = {0, 1}a, and h.Keys = h′.Keys. Then for all adversaries A,
h′(A). Furthermore, letting S = h.Out, we can build
Advcr
an efficient adversary Bh (shown in Fig. 12) satisfying,
h (A) ≤ Advcr
AdvRpreS
h
(Bh) ≥ 1/2.
Proof. (of Proposition 8.2) To see that the first claim of the
above statement holds, note that no collisions in h are possible
unless the if statement evaluates to false for both inputs of the
collision. In this case, a collision for h is immediately a collision
for h′. To see that the second claim holds, observe that for half
the choices of s ∈ S, specifically those whose first bit are 0, the
compression function hk returns s when given as input (0, s). □
Proposition 8.1. Let Out be a set. Let g be the hash function
shown in Fig. 12 where g.Keys = g.Out = Out and g.Inp is arbitrary.
(Ag) ≤ 1/|Out|.
Let S ⊆ Out. Then for any A it holds that AdvRpreS
g
Positive Results. We just showed that pre-image resistance is
not, in general, implied by collision resistance. This implies that
the pre-image resistance assumed for Theorem 7.2 is necessarily
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA902Adversary A1(k, s)
x ← A(k, s)