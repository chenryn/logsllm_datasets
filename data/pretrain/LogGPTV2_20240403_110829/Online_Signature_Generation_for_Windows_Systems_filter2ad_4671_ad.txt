attack input can overﬂow a stack buffer and overwrite the
return address or SEH.
Steamcast 0.9.75 and prior versions have a stack buffer
overﬂow vulnerability (CVE-2008 0550) that enables attacks
using the http User-Agent ﬁeld to overwrite return address.
POP Peeper 3.4.0.0 is vulnerable in its “From” ﬁeld. This
vulnerability can lead to stack buffer overﬂow that can be
used to overwrite the return address/SEH.
TalkativeIRC 0.4.4.16 has a vulnerability (BugTraq Id
34141) that allows the return address and SEH handler to
be overwritten by supplying an excessively long value for
the “PRIVMSG” ﬁeld.
As mentioned in Section II, the advent of memory exploit
defenses on modern Windows systems have made heap
overﬂows difﬁcult, thus prompting attackers to focus on
stack overﬂows. This explains why our real-world exploits
were all stack overﬂows.
In all 6 real world cases, our experiments identiﬁed the
vulnerable buffer and generated blocking signatures. In 2 of
these 6 cases, a gap is identiﬁed, and it makes the signature
more precise.
A. False Positives
It is important for signatures to have very low (if not zero)
false positive rate. Since our signature generation mechanism
was able to infer the buffer bound from the location of the
corruption target and/or the gap, we believe that they will
not lead to false positives. Our experimental results support
this claim as well: as shown in Figure 3, there is a large
difference between maximum benign size and minimum
attack size of vulnerable ﬁelds. In addition, we performed
a false positive analysis by running the Apache and FTP
servers with signatures turned on, and did not experience
any false positives.
B. False Negatives
It is desirable to avoid false negatives, but we consider
them to be less serious than false positives, provided that the
signature can be reﬁned, and false positives avoided after a
small number of reﬁnement steps. We already described such
a reﬁnement technique that converges in at most log mmax
steps, where mmax is the largest size of vulnerable ﬁeld
across all benign inputs.
Experimentally, our evaluation shows a large difference
between mmax and the signature length for 4 out of 6 real-
world exploits. For the remaining two, the difference, though
not as large, still remains signiﬁcant.
False negatives may also occur because the underlying
vulnerability is too complex to be addressed using the simple
signature format that we use — in this case, it is likely that
signature generation will fail, a limitation noted earlier.
C. Performance
Runtime overhead. The main runtime overhead is to cap-
ture and ﬁlter inputs at “detoured” input functions, as well
as malloc-related functions. Since the intercepted inputs are
maintained in memory, and ﬁltering is based on length,
malloc related logging only involves keeping start and size
information in a table, the runtime overhead is relatively
small. We measured this overhead for the freeFTPd server
version 1.0.8. In particular, we measured the download time
for 6 ﬁles of sizes are 1.7KB, 17KB, 110KB, 7.9MB, 23MB
and 29MB. For base line test, the original application ran
without any protection (no interception or any protection
component attached). We fetched the same set of ﬁles from
the FTP server, repeated 5 times, cleaning up cache between
runs, and then calculating the average CPU time (sum of
kernel cpu time and user cpu time) used. The baseline
CPU time was 212.2ms. We repeated the same action with
protections turned on, and the CPU time was 220ms. The
overall overhead was thus about 4%.
Signature generation time. Security analysis is performed
only at crash time, and hence its performance overhead is
296
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:07 UTC from IEEE Xplore.  Restrictions apply. 
not a serious concern. For this reason, we have not done
signiﬁcant performance optimization on signature generation
as yet. Nevertheless, we target
the overhead to be low
enough — roughly in the sub-second range.
Signature generation is fastest in the case of /GS and
/SafeSEH protections. In these cases, the CTI phase searches
only a few locations, and correspondingly, the number of
calls to approximate string matching are also small. As
a result, signature generation is very fast, taking about a
millisecond in our experiments.
If the exception is caused by ASR or NX and it involves
a stack overﬂow, then the search takes longer, as the entire
stack may need to be scanned. In our experiments, this case
typically takes about 100 milliseconds.
If the exception involves heap corruption, then a much
larger number of locations are scanned by our current
implementation. Due to the rarity of heap overﬂows, this
case has not been optimized at all, and hence takes about
800ms.
The measurements for both runtime overhead and signa-
ture generation time were performed on a VirtualPC 2007
with a guest Windows XP SP2 guest OS and 256MB RAM
running on a DELL M4300 with 2GB RAM and Windows
XP SP2 host OS.
VI. RELATED WORK
Windows Error Report is the ﬁrst step for application
crash response provided by Microsoft. Abouchaev et al
[1] present an excellent bug ﬁx guideline for Microsoft
internal developers regarding crash and exploitability. Ac-
cording to this document, different types of exceptions have
different potentials for exploitability. Based on this work,
an exploitable crash analyzer built as a Windows debugger
extension is developed [17]. The tool provides crash cat-
egorization and exploitability assessment. It is targeted at
developers and is mainly used in Microsoft internal fuzz
testing to identify vulnerabilities. The tool assumes that the
information in the faulting instruction is controlled by an
attacker, but does not attempt to relate crash back to input.
Slowinska and Bos [20] identiﬁed the “gap” problem and
proposed adding a new dimension — timestamp — to taint
analysis to solve the problem. Though their approach may
be more general, it is not applicable for online usage due to
high overhead of taint-tracking.
Researchers have used program structural constraints for
automated security debugging in Linux debugging environ-
ment [9]. It may be possible to apply program structural
constraints to enhance our initial corruption target identiﬁ-
cation if these constraints can be identiﬁed reliably without
access to source code.
There have been a number of research efforts on gen-
erating blocking signatures for network worms. Much of
this work focused on “content-based signatures,” where the
signature captured characteristics of the attack payload. The
problem with such signatures is that attackers can easily
evade these signatures since they have full control over
the payload. In contrast, the underlying vulnerabilities are
dependent on the implementation details of a victim applica-
tion. Attackers have no control over these vulnerabilities, and
have very little choice in terms of the methods for exploiting
them. Thus, signature generation techniques that focus on
vulnerabilities can be much more resistant to evasion.
Brumley et al [2] developed an approach for gener-
ating vulnerability oriented signatures based on symbolic
execution techniques. While the techniques work well to
capture features that are closely related to the program paths
exercised by an exploit, generalization of the technique to
the case where other vulnerable paths are considered remains
to be a challenge. As a result, for real-world applications,
the signatures generated by this technique are not general
enough.
Unlike [2], which relies on a whitebox approach for
signature generation, COVERS [10] uses a blackbox tech-
nique that exploits the features of buffer overﬂow exploits to
generate vulnerability oriented signatures for them. Another
difference between [2] and [10] is that
the latter aims
to generate signatures very quickly so that they could be
deployed immediately, thus preserving server availability.
The work presented in this paper is similar to COVERS in
its use of post-crash memory analysis, but differs from it in
several signiﬁcant ways. First, COVERS uses exact matching
only, so it can fail to generate signatures when a “gap” is
present. Second, the approach presented in this paper is able
to reason about likely buffer lengths, and generate signatures
based on these. In contrast, COVERS signatures are based
only on comparing the sizes of benign and attack inputs,
and are hence less accurate. Finally, COVERS is focused
on Linux, whereas the work presented in this paper targets
Windows.
Several researchers have focused on developing tech-
niques to generalize signatures. PacketVaccine [21] uses a
randomization-based approach to generate variants of an
exploit and uses these variants to ensure that a generalized
signature is generated. ShieldGen [7] develops a more sys-
tematic approach for generating attack variants by exploiting
a precise speciﬁcation of underlying network protocols. Both
these techniques are complementary to our approach, and
represent a different tradeoff in terms of speed of signature
generation versus generality.
VII. CONCLUSION
We presented a new signature generation technique for
Windows-based applications that is light-weight enough to
be deployed on production systems. The online nature of our
system enables it to provide protection from a wide range
of memory corruption exploits, including those involving
unknown vulnerabilities, or known vulnerabilities but un-
known exploits. In contrast, most previous techniques need
297
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:07 UTC from IEEE Xplore.  Restrictions apply. 
to be run in sandboxed environments, and need working
exploits to generate signatures. Our technique uses taint-
inference [14] rather than heavy-weight taint analysis. It uses
an innovative post-crash analysis of victim process memory
and approximate substring matching to reason about likely
lengths of vulnerable buffers, and uses this information
to improve signature accuracy. Moreover, our technique is
able to handle “gaps” that are commonly associated with
Windows exploits, and posed a challenge to many previous
signature generation techniques. Our experimental results are
promising, and demonstrate that the approach can generate
accurate signatures for many real-world servers.
VIII. ACKNOWLEDGEMENTS
We would like to thank Mark Cornwell for his contribu-
tions in testing and evaluation.
REFERENCES
[1] A. Abouchaev, D. Hasse, S. Lambert, and G. Wroblewski.
CRASH COURSE-Analyze Crashes To Find Security Vul-
nerabilities In Your Apps. MSDN Magazine-Louisville, pages
60–69, 2007.
[2] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. To-
wards automatic generation of vulnerability-based signatures.
In Proceedings of the 2006 IEEE Symposium on Security and
Privacy, pages 2–16. IEEE Computer Society Washington,
DC, USA, 2006.
[3] Shuo Chen, Jun Xu, and Emre Can Sezer. Non-control-
In USENIX Security
hijacking attacks are realistic threats.
Symposium, 2005.
[4] M. Costa, M. Castro, L. Zhou, L. Zhang, and M. Peinado.
In
Bouncer: Securing software by blocking bad input.
Proceedings of
twenty-ﬁrst ACM SIGOPS symposium on
Operating systems principles, pages 117–130. ACM New
York, NY, USA, 2007.
[5] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou,
L. Zhang, and P. Barham. Vigilante: End-to-end containment
of internet worms. ACM SIGOPS Operating Systems Review,
39(5):133–147, 2005.
[6] Crispin Cowan, Calton Pu, Dave Maier, Jonathan Walpole,
Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, Qian
Zhang, and Heather Hinton. StackGuard: Automatic adap-
tive detection and prevention of buffer-overﬂow attacks.
In
USENIX Security Symposium, pages 63–78, San Antonio,
Texas, January 1998.
[7] W. Cui, M. Peinado, H.J. Wang, and M.E. Locasto. Shieldgen:
Automatic data patch generation for unknown vulnerabilities
with informed probing. In IEEE Symposium on Security and
Privacy, 2007. SP’07, pages 252–266, 2007.
[8] G. Hunt and D. Brubacher. Detours: Binary interception of
Win32 functions. In Proceedings of the 3rd USENIX Windows
NT Symposium, pages 135–143, 1999.
[9] C. Kil, E.C. Sezer, P. Ning, and X. Zhang. Automated
Security Debugging Using Program Structural Constraints.
In Computer Security Applications Conference, 2007. ACSAC
2007. Twenty-Third Annual, pages 453–462, 2007.
[10] Z. Liang and R. Sekar. Fast and automated generation of
attack signatures: A basis for building self-protecting servers.
In Proceedings of the 12th ACM conference on Computer and
communications security, pages 213–222. ACM New York,
NY, USA, 2005.
[11] D. Litchﬁeld. Defeating the Stack Based Buffer Overﬂow
Prevention Mechanism of Microsoft Windows 2003 Server.
NGSSoftware Ltd, http://www.nextgenss.com, 2003.
[12] Microsoft.
http://msdn.microsoft.com/en-us/library/cc267863.aspx.
Debugger Engine
and Extension APIs.
[13] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature generation of
exploits on commodity software. In Network and Distributed
System Security Symposium (NDSS), 2005.
[14] R. Sekar. An Efﬁcient Black-box Technique for Defeating
Web Application Attacks. NDSS, 2009.
[15] H. Shacham. The geometry of innocent ﬂesh on the bone:
Return-into-libc without function calls (on the x86).
In
Proceedings of the 14th ACM conference on Computer and
communications security, pages 552–561. ACM New York,
NY, USA, 2007.
[16] Hovav Shacham, Matthew Page, Ben Pfaff, Eu-Jin Goh,
Nagendra Modadugu, and Dan Boneh. On the effectiveness
of address-space randomization.
In ACM Conference on
Computer and Communication Security (CCS), pages 298–
307, Washington, DC, October 2004.
[17] J. Shirk and D. Weinstein. Automated Real-time and Post
In
Mortem Security Crash Analysis and Categorization.
CanSecWest, 2009.
[18] skape. Reducing the Effective Entropy of GS Cookies.
http://www.uninformed.org/?v=all&a=32&t=txt, 2007.
[19] Skywing skape. Bypassing Windows Hardware-enforced
DEP. http://www.uninformed.org/?v=2&a=4&t=txt, 2005.
[20] A. Slowinska and H. Bos. The age of data: pinpointing
guilty bytes in polymorphic buffer overﬂows on heap or stack.
In 23rd Annual Computer Security Applications Conference
(ACSAC07).
[21] X.F. Wang, Z. Li, J. Xu, M.K. Reiter, C. Kil, and J.Y. Choi.
Packet vaccine: Black-box exploit detection and signature
generation. In Proceedings of the 13th ACM conference on
Computer and communications security, pages 37–46. ACM
New York, NY, USA, 2006.
298
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:07 UTC from IEEE Xplore.  Restrictions apply.