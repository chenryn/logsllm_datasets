### Stack Buffer Overflow Vulnerabilities and Exploits

Stack buffer overflows can lead to the overwriting of the return address or Structured Exception Handling (SEH) records. This section examines several real-world examples of such vulnerabilities and their exploitation.

#### Vulnerable Applications
- **Steamcast 0.9.75 and Prior Versions (CVE-2008-0550)**: A stack buffer overflow vulnerability exists in the HTTP User-Agent field, allowing an attacker to overwrite the return address.
- **POP Peeper 3.4.0.0**: The "From" field is vulnerable to a stack buffer overflow, which can be used to overwrite the return address or SEH.
- **TalkativeIRC 0.4.4.16 (BugTraq ID 34141)**: An excessively long value in the "PRIVMSG" field can overwrite the return address and SEH handler.

#### Shift in Attack Focus
Modern Windows systems have implemented memory exploit defenses, making heap overflows more difficult. Consequently, attackers have shifted their focus to stack overflows, as seen in the real-world exploits discussed.

### Experimental Results
In all six real-world cases, our experiments identified the vulnerable buffer and generated blocking signatures. In two of these cases, a gap was identified, enhancing the precision of the signatures.

### Evaluation of Signatures
#### False Positives
It is crucial for signatures to have a very low, if not zero, false positive rate. Our signature generation mechanism infers buffer bounds from the corruption target location and/or the gap, minimizing the risk of false positives. Experimental results support this, showing a significant difference between the maximum benign size and the minimum attack size of vulnerable fields. Additionally, running Apache and FTP servers with signatures enabled did not result in any false positives.

#### False Negatives
False negatives are less critical than false positives, provided that the signature can be refined to avoid false positives after a few refinement steps. Our refinement technique converges in at most \(\log m_{\text{max}}\) steps, where \(m_{\text{max}}\) is the largest size of the vulnerable field across all benign inputs. For four out of six real-world exploits, there was a large difference between \(m_{\text{max}}\) and the signature length. For the remaining two, the difference, though smaller, remained significant. Complex vulnerabilities may also cause signature generation to fail, a noted limitation.

#### Performance
- **Runtime Overhead**: The main overhead involves capturing and filtering inputs at "detoured" input functions and malloc-related functions. Intercepts are maintained in memory, and filtering is based on length. Malloc-related logging only requires start and size information, resulting in minimal overhead. For the freeFTPd server version 1.0.8, the overall overhead was about 4%.
- **Signature Generation Time**: Security analysis is performed only at crash time, so performance overhead is not a major concern. Signature generation is fastest with /GS and /SafeSEH protections, taking about a millisecond. For ASR or NX stack overflows, the search takes longer, typically around 100 milliseconds. Heap corruption, being rare, has not been optimized and takes about 800 milliseconds.

### Related Work
- **Windows Error Report**: Microsoft's first step in application crash response. Abouchaev et al. [1] provide guidelines for developers regarding crash and exploitability. An exploitable crash analyzer [17] categorizes and assesses exploitability.
- **Gap Problem**: Slowinska and Bos [20] proposed adding a timestamp dimension to taint analysis to solve the "gap" problem, but it is not suitable for online usage due to high overhead.
- **Program Structural Constraints**: Researchers have used these constraints for automated security debugging in Linux [9], which could enhance initial corruption target identification.
- **Blocking Signatures for Network Worms**: Previous work focused on content-based signatures, which are easily evaded. Brumley et al. [2] developed a symbolic execution approach, but generalization remains a challenge. COVERS [10] uses a blackbox technique for quick signature generation, but it is limited to exact matching and lacks accuracy in handling gaps.
- **Generalized Signatures**: PacketVaccine [21] and ShieldGen [7] use randomization and systematic approaches, respectively, to generate generalized signatures, complementing our approach.

### Conclusion
We presented a lightweight signature generation technique for Windows-based applications, deployable on production systems. The online nature of our system provides protection against a wide range of memory corruption exploits, including those involving unknown vulnerabilities. Our technique uses taint-inference and post-crash analysis to improve signature accuracy and handle gaps, demonstrating promising experimental results.

### Acknowledgements
We thank Mark Cornwell for his contributions in testing and evaluation.

### References
[1] A. Abouchaev, D. Hasse, S. Lambert, and G. Wroblewski. CRASH COURSE—Analyze Crashes To Find Security Vulnerabilities In Your Apps. MSDN Magazine-Louisville, pages 60–69, 2007.
[2] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. Towards automatic generation of vulnerability-based signatures. In Proceedings of the 2006 IEEE Symposium on Security and Privacy, pages 2–16. IEEE Computer Society Washington, DC, USA, 2006.
[...]
[21] X.F. Wang, Z. Li, J. Xu, M.K. Reiter, C. Kil, and J.Y. Choi. Packet vaccine: Black-box exploit detection and signature generation. In Proceedings of the 13th ACM conference on Computer and communications security, pages 37–46. ACM New York, NY, USA, 2006.