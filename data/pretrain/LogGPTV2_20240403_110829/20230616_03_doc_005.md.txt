# PostgreSQL 对象权限管理

## 目标
- 概述 PostgreSQL 对象权限
- 介绍如何在 PostgreSQL 中授权和回收对象权限

## 对象权限概述
- **所有者权限**：每个数据库对象都有一个所有者，默认情况下，所有者拥有该对象的所有权限。
- **角色与权限**：在 PostgreSQL 中，所有的权限都与角色相关联。
- **超级用户特权**：对超级用户 `postgres` 不进行权限检查。其他用户则需遵循 ACL（访问控制列表）规则。
- **初始权限设置**：对于数据库对象，只有所有者和超级用户可以执行任何操作，其余用户需要通过 ACL 进行权限验证。

### 对象级别的权限
- **表级权限**
- **列级别权限**
- **序列权限**
- **类型域的权限**（自定义带约束的数据类型）
- **FDW 权限**（Foreign Data Wrapper）
- **FS 权限**（文件系统权限）
- **函数权限**

使用 `\h GRANT` 可以显示所有可设置的访问权限。

### 对象权限列表
- `rolename=xxxx`：授予给特定角色的权限
- `=xxxx`：授予给 PUBLIC 的权限
- `r`：SELECT（读取）
- `w`：UPDATE（写入）
- `a`：INSERT（追加）
- `d`：DELETE
- `D`：TRUNCATE
- `x`：REFERENCES
- `t`：TRIGGER
- `X`：EXECUTE
- `U`：USAGE
- `C`：CREATE
- `c`：CONNECT
- `T`：TEMPORARY
- `arwdDxt`：ALL PRIVILEGES（适用于表，其他对象有所不同）
- `*`：授予选项
- `/yyyy`：授予此权限的角色

### 对象权限含义
- **SELECT**：允许从指定表、视图或序列中选择数据。也允许使用 `COPY TO` 命令。对于序列，此权限还允许使用 `currval` 函数。对于大对象，此权限允许读取对象。
- **INSERT**：允许向指定表中插入新行。如果指定了特定列，则只能为这些列分配值（其他列将接收默认值）。也允许使用 `COPY FROM`。
- **UPDATE**：允许更新指定表中的任何列或特定列，需要 SELECT 权限。
- **DELETE**：允许删除指定表中的行，需要 SELECT 权限。
- **TRUNCATE**：允许截断指定表中的数据。
- **REFERENCES**：允许创建引用指定表或特定列的外键约束。
- **TRIGGER**：允许在指定表上创建触发器。
- **CREATE**：允许在数据库中创建新的 schema、表或索引。
- **CONNECT**：允许用户连接到指定数据库。
- **TEMPORARY/TEMP**：允许在使用指定数据库时创建临时表。
- **EXECUTE**：允许使用指定的函数或过程。
- **USAGE**：对于 schema，允许访问其中的对象；对于序列，允许使用 `currval` 和 `nextval` 函数；对于类型和域，允许在创建表、函数等时使用它们。
- **ALL PRIVILEGES**：一次性授予所有可用权限。

## 对象权限管理
### 授权
- **语法**：
  ```sql
  GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
  [, ...] | ALL [ PRIVILEGES ] }
  ON { [ TABLE ] table_name [, ...]
  | ALL TABLES IN SCHEMA schema_name [, ...] }
  TO role_specification [, ...] [ WITH GRANT OPTION ];
  ```

- **示例**：
  - 授权单个权限给用户：
    ```sql
    GRANT SELECT ON tab_name TO role_name;
    ```
  - 授权多个或所有权限给用户：
    ```sql
    GRANT SELECT, UPDATE, INSERT ON tab_name TO role_name;
    GRANT ALL ON tab_name TO role_name;
    ```
  - 授权某模式下所有表的查询权限给用户：
    ```sql
    GRANT SELECT ON ALL TABLES IN SCHEMA schema_name TO role_name;
    ```
  - 授权列权限给用户：
    ```sql
    GRANT SELECT (col1), UPDATE (col1) ON tab_name TO role_name;
    ```
  - 授权所有权限给所有用户：
    ```sql
    GRANT ALL ON tab_name TO public;
    ```

### 查看对象权限
- **查看对象权限数据字典表**：
  ```sql
  SELECT grantor, grantee, privilege_type, is_grantable
  FROM information_schema.table_privileges
  WHERE table_name='t1';
  ```
- **显示对象的访问权限列表**：
  ```sql
  \z 或 \dp [tablename]
  ```

### 回收权限
- **语法**：
  ```sql
  REVOKE { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
  [, ...] | ALL [ PRIVILEGES ] }
  ON { [ TABLE ] table_name [, ...]
  | ALL TABLES IN SCHEMA schema_name [, ...] }
  FROM role_specification [, ...];
  ```

- **示例**：
  - 回收单个权限：
    ```sql
    REVOKE SELECT ON tab_name FROM role_name;
    ```
  - 回收多个或所有权限：
    ```sql
    REVOKE SELECT, UPDATE, INSERT ON tab_name FROM role_name;
    REVOKE ALL ON tab_name FROM role_name;
    ```
  - 回收某模式下所有表的查询权限：
    ```sql
    REVOKE SELECT ON ALL TABLES IN SCHEMA schema_name FROM role_name;
    ```
  - 回收列权限：
    ```sql
    REVOKE SELECT (col1), UPDATE (col1) ON tab_name FROM role_name;
    ```
  - 回收所有权限：
    ```sql
    REVOKE ALL ON tab_name FROM public;
    ```

### 特殊情况
- **禁止用户在指定数据库下对 `public` 模式的 `CREATE` 权限**：
  ```sql
  REVOKE CREATE ON SCHEMA public FROM public;
  ```
- **属主取消自己在指定表上的某些权限**：
  ```sql
  REVOKE UPDATE ON tab_name FROM role_name;
  REVOKE ALL ON tab_name FROM role_name;
  ```
- **属主授权自己在指定表上的某些权限**：
  ```sql
  GRANT ALL ON tab_name TO role_name;
  ```

### 赋予角色默认权限
- 批量权限赋予

### 对象易主管理
- **转移单个表的属主**：
  - 需要超级用户或原属主（且原属主必须是被授权用户的成员）：
    ```sql
    ALTER TABLE table_name OWNER TO new_owner;
    ```
- **转移当前数据库表的属主**：
  - 需要超级用户操作（如果属主是 `postgres`，则不允许，因为其中包含数据字典表，只能用第一种方式单表修改）：
    ```sql
    REASSIGN OWNED BY old_role TO new_role;
    ```

## 总结
- **PostgreSQL 对象权限概述**
- **PostgreSQL 对象权限授权与回收**

## 练习
1. 新建两个普通用户 `a` 和 `b`，新建一个数据库 `db` 并将所有者设置为 `a`。使用 `a` 在 `db` 中创建一个 schema `s`，并在 `s` 中创建一张表 `tbl`。请赋予最小权限使得 `b` 可以访问 `db.s.tbl` 的数据。
2. 请将未来 `a` 在 `db.s` 中创建的表的查询权限都默认赋予给 `b`。