    .text:0000000000000ABB __afl_forkserver:
    .text:0000000000000ABB                 push    rdx
    .text:0000000000000ABC                 push    rdx
    .text:0000000000000ABD                 mov     rdx, 4          ; n
    .text:0000000000000AC4                 lea     rsi, __afl_temp ; buf
    .text:0000000000000ACB                 mov     rdi, 0C7h       ; fd
    .text:0000000000000AD2                 call    _write
    .text:0000000000000AD7                 cmp     rax, 4
    .text:0000000000000ADB                 jnz     __afl_fork_resume
## __afl_fork_wait_loop
`fork server`直到从状态管道`read`到4个字节表明`fuzzer`准备好了
    text:0000000000000AE1                  mov     rdx, 4          ; nbytes
    .text:0000000000000AE8                 lea     rsi, __afl_temp ; buf
    .text:0000000000000AEF                 mov     rdi, 0C6h       ; status
    .text:0000000000000AF6                 call    _read
    .text:0000000000000AFB                 cmp     rax, 4
    .text:0000000000000AFF                 jnz     __afl_die
    .text:0000000000000B05                 call    _fork
    .text:0000000000000B0A                 cmp     rax, 0
    .text:0000000000000B0E                 jl      __afl_die
    .text:0000000000000B14                 jz      short __afl_fork_resume
记录子进程的pid，一旦子进程执行完了，通过状态管道发送到`fuzzer`继续执行
    .text:0000000000000B16                 mov     cs:__afl_fork_pid, eax
    .text:0000000000000B1C                 mov     rdx, 4          ; n
    .text:0000000000000B23                 lea     rsi, __afl_fork_pid ; buf
    .text:0000000000000B2A                 mov     rdi, 0C7h       ; fd
    .text:0000000000000B31                 call    _write
    .text:0000000000000B36                 mov     rdx, 0          ; options
    .text:0000000000000B3D                 lea     rsi, __afl_temp ; stat_loc
    .text:0000000000000B44                 mov     rdi, qword ptr cs:__afl_fork_pid ; pid
    .text:0000000000000B4B                 call    _waitpid
    .text:0000000000000B50                 cmp     rax, 0
    .text:0000000000000B54                 jle     __afl_die
    .text:0000000000000B5A                 mov     rdx, 4          ; n
    .text:0000000000000B61                 lea     rsi, __afl_temp ; buf
    .text:0000000000000B68                 mov     rdi, 0C7h       ; fd
    .text:0000000000000B6F                 call    _write
    .text:0000000000000B74                 jmp     __afl_fork_wait_loop
用伪代码更能看清楚逻辑
    if ( write(0xC7, &_afl_temp, 4uLL) == 4 )
          {
            while ( 1 )
            {
              v25 = 0xC6;
              if ( read(0xC6, &_afl_temp, 4uLL) != 4 )
                break;
              LODWORD(v26) = fork();
              if ( v26  A->B->C->D->A-B
可以用[A,B] [B,C] [C,D]
[D,A]四个二元组表示，只需要记录跳转的源地址和目标地址。并且[A,B]执行了两次，其余执行了一次，这里用hash映射在一张map中。
接下来代码具体讲讲。
之前在`__afl_maybe_log`后面还有`_afl_store`这个函数
    .text:0000000000000960 __afl_store:                            ; CODE XREF: __afl_maybe_log+4F↓j
    .text:0000000000000960                                         ; __afl_maybe_log+309↓j
    .text:0000000000000960                 xor     rcx, cs:__afl_prev_loc
    .text:0000000000000967                 xor     cs:__afl_prev_loc, rcx
    .text:000000000000096E                 shr     cs:__afl_prev_loc, 1
    .text:0000000000000975                 inc     byte ptr [rdx+rcx]
对应的伪代码。`COMPILE_TIME_RANDOM`就是`add_instrumentation`中`fprintf`中`R(MAP_SIZE)`,也是在执行`call
__afl_maybe_log`汇编前`rcx`中保存的随机数，这个随机数代表分支
    cur_location = ;       //随机数当前分支
    shared_mem[cur_location ^ prev_location]++;  //前一分支和当前分支锁表示的随机数异或表示二元tuple映射map
    prev_location = cur_location >> 1;          //将当前分支再记录
为什么当前分支最后需要向右移一位？比如`A->A`或者`A->B->A`这种不右移异或为0
并且共享内存的`MAP_SIZE=64K`碰撞概率缩小很多。下面是官方给的
    Branch cnt | Colliding tuples | Example targets
    ------------+------------------+-----------------          1,000 | 0.75%            | giflib, lzo
          2,000 | 1.5%             | zlib, tar, xz
          5,000 | 3.5%             | libpng, libwebp
         10,000 | 7%               | libxml
         20,000 | 14%              | sqlite
         50,000 | 30%              | -
# 分支信息处理
共享内存还有个变量`trace_bits`来记录分支执行次数
    classify_counts((u32*)trace_bits);
fuzzer主要将每个分支处理次数归入下面这个表中
    static const u8 count_class_lookup8[256] = {
      [0]           = 0, 
      [1]           = 1, 
      [2]           = 2, 
      [3]           = 4, 
      [4 ... 7]     = 8, 
      [8 ... 15]    = 16,
      [16 ... 31]   = 32,
      [32 ... 127]  = 64,
      [128 ... 255] = 128
    };
比如执行了4-7次的其计数为8，最后用一个hash还判断新测试用例分支数增加没有
    u32 cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);
# 参考链接