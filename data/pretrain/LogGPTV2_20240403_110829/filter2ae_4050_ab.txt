    ip                         city                          port
    180.*.*.181                Beijing                       80
    180.*.*.104                Beijing                       80
    182.*.*.7                  Beijing                       80
    182.*.*.114                Beijing                       80
    182.*.*.45                 Beijing                       80
    182.*.*.79                 Beijing                       80
    182.*.*.131                Beijing                       80
    182.*.*.183                Beijing                       80
    182.*.*.41                 Beijing                       80
    total: 9
**保存数据**
根据不同的需求我们需要导出格式不尽相同的数据，在 `ZoomEye-python` 提供了两种保存方式：一种是行 json ，另外一种是`ZoomEye
API`返回的元数据，同时支持筛选。
保存行 json 时，可以指定自己想要的字段，语法与上面的 `filter` 一致，同样支持正则表达式。
    # 保存筛选数据
    $ zoomeye search "app:"飞致云堡垒机"" -save "city=Beijing,port"
    save file to /app:飞致云堡垒机_9_1610962280.json successful!
    $ cat app:飞致云堡垒机_9_1610962280.json
    {'ip': '180.*.*.181', 'city': 'Beijing', 'port': 80}
    {'ip': '180.*.*.104', 'city': 'Beijing', 'port': 80}
    {'ip': '182.*.*.7', 'city': 'Beijing', 'port': 80}
    {'ip': '182.*.*.114', 'city': 'Beijing', 'port': 80}
    {'ip': '182.*.*.45', 'city': 'Beijing', 'port': 80}
    {'ip': '182.*.*.79', 'city': 'Beijing', 'port': 80}
    {'ip': '182.*.*.131', 'city': 'Beijing', 'port': 80}
    {'ip': '182.*.*.183', 'city': 'Beijing', 'port': 80}
    {'ip': '182.*.*.41', 'city': 'Beijing', 'port': 80}
在没有指定字段时，将保存从 `ZoomEye API` 获取的元数据。
    # 保存元数据
    $ zoomeye search "app:"飞致云堡垒机"" -save
    save file to /app:飞致云堡垒机_20_1610962433.json successful!
    $ cat app:飞致云堡垒机_20_1610962433.json
    {"total": 7748, "matches": [{"geoinfo": {"city": {"geoname_id": null, "names": {"zh-CN": "\u5361\u6885\u7533", "en": "Kamyshin"}}, "country": {"geoname_id": null, "code": "RU", "names": {"zh-CN": "\u4fc4\u7f57\u65af", "en": "Russian Federation"}}, "isp": "abrikosnet.ru", ......
**导入数据**
`ZoomEye-python` 能够对保存的 `ZoomEye API` 元数据进行载入并对其进行筛选、搜索等操作，如：
    $ zoomeye search app:飞致云堡垒机_20_1610962433.json
    ip:port                service          country          app                 banner
    46.*.*.254:80         http              Russian Federation  Tornado httpd    HTTP/1.1 302 FOUND\r\nContent-...
    139.*.*.11:6080       http              China               nginx            HTTP/1.1 200 OK\x0d\nServer: n...
    180.*.*.202:8880      http              China               nginx            HTTP/1.1 200 OK\r\nServer: ngi...
    180.*.*.181:80        nagios-nsca       China               Nagios NSCA      HTTP/1.1  200 OK\nEtag: W/"600...
    180.*.*.104:80        nagios-nsca       China               Nagios NSCA      HTTP/1.1  200 OK\nContent-Type...
    180.*.*.195:80        http              China                                HTTP/1.1  200 OK\nContent-Leng...
    180.*.*.118:80        nagios-nsca       China               Nagios NSCA      HTTP/1.1  200 OK\nCache-Contro...
    180.*.*.120:80        nagios-nsca       China               Nagios NSCA      HTTP/1.1  200 OK\nDate: Mon, 1...
    180.*.*.212:80        http              China                                HTTP/1.1  200 OK\nDate: Mon, 1...
    180.*.*.119:80        nagios-nsca       China               Nagios NSCA      HTTP/1.1  200 OK\nAccept-Range...
    101.*.*.237:8888      http              China               nginx            HTTP/1.1 200 OK\r\nServer: ngi...
    175.*.*.71:443        https             China               nginx            HTTP/1.1 200 OK\r\nServer: ngi...
    182.*.*.7:80          nagios-nsca       China               Nagios NSCA      HTTP/1.1  200 OK\nStrict-Trans...
    182.*.*.114:80        nagios-nsca       China               Nagios NSCA      HTTP/1.1  200 OK\nDate: Mon, 1...
    182.*.*.45:80         nagios-nsca       China               Nagios NSCA      HTTP/1.1  200 OK\nAccept-Range...
    182.*.*.79:80         nagios-nsca       China               Nagios NSCA      HTTP/1.1  200 OK\nDate: Mon, 1...
    52.*.*.175:80         http              China               nginx            HTTP/1.1 302 Found\r\nServer: ...
    182.*.*.131:80        http              China                                HTTP/1.1  200 OK\nExpires: Tue...
    182.*.*.183:80        nagios-nsca       China               Nagios NSCA      HTTP/1.1  200 OK\nLast-Modifie...
    182.*.*.41:80         http              China                                HTTP/1.1  200 OK\nAccept-Range...
    total: 20
#### 2\. SDK
在 `ZoomEye-python` 中提供了一下接口：
    1.login()
      使用 username/password 进行认证
    2.dork_search(dork, page=0, resource="host", facets=None)
      根据 dork 搜索指定页的数据
    3.multi_page_search(dork, page=1, resource="host", facets=None)
      根据 dork 搜索多页数据
    4.resources_info()
      获取当前用户的信息
    5.show_count()
      获取当前 dork 下全部匹配结果的数量
    6.dork_filter(keys)
      从搜索结果中提取指定字段的数据
    7.get_facet()
      从搜索结果中获取全量数据的聚合结果
    8.history_ip(ip)
      查询某个 ip 的历史数据信息
    9.show_site_ip(data)
      遍历 web-search 结果集，并输出域名和ip地址
    10.show_ip_port(data)
      遍历 host-search 结果集，并输出ip地址和端口
##### 使用实例
**使用 username/password 初始化**
    $ python3
    >>> import zoomeye.sdk as zoomeye
    >>> dir(zoomeye)
    ['ZoomEye', 'ZoomEyeDict', '__builtins__', '__cached__', '__doc__',
    '__file__', '__loader__', '__name__', '__package__', '__spec__',
    'fields_tables_host', 'fields_tables_web', 'getpass', 'requests',
    'show_ip_port', 'show_site_ip', 'zoomeye_api_test']
    >>> # Use username and password to login
    >>> zm = zoomeye.ZoomEye()
    >>> zm.username = 'PI:EMAIL'
    >>> zm.password = 'password'
    >>> print(zm.login())
    ....JIUzI1NiIsInR5cCI6IkpXVCJ9.....
    >>> data = zm.dork_search('apache country:cn')
    >>> zoomeye.show_site_ip(data)
    213.***.***.46.rev.vo***one.pt ['46.***.***.213']
    me*****on.o****e.net.pg ['203.***.***.114']
    soft********63221110.b***c.net ['126.***.***.110']
    soft********26216022.b***c.net ['126.***.***.22']
    soft********5084068.b***c.net ['126.***.***.68']
    soft********11180040.b***c.net ['126.***.***.40']
    ...
**使用 APIKEY 初始化**
    $ python3
    >>> import zoomeye.sdk as zoomeye
    >>> zm = zoomeye.ZoomEye()
    >>> zm.api_key = "01234567-acbd-00000-1111-22222222222"
    >>> zm.dork_search("apache country:cn")
    ...
**搜索**
如上所示，使用 `dork_search()` 函数进行搜索，`dork_search` 提供了 page，resource，facets
参数用来获取指定页数，Web/Host 设备以及对数据总量的聚合统计。其中 resource 默认为 host 设备，facets 为 None。
    data = zm.dork_search('telnet', facets='app')
    zm.get_facet()
    {'product': [{'name': '', 'count': 28323128}, {'name': 'BusyBox telnetd', 'count': 10180912}, {'name': 'Linux telnetd', ......
同时 SDK 还提供了获取多页数据的函数 `multi_page_search` ，`multi_page_search()` 与
`dork_search()` 的区别在于：`multi_page_search` 中的 page 为获取数据的页数，而 `dork_search` 中的
page 为第几页的数据。
**筛选**
为了更加容易的获取数据，`SDK` 提供了帮助用户筛选的数据的函数 `dork_filter` ，用于获取指定字段的数据，如：
    data = zm.dork_search("telnet")
    zm.dork_filter("ip,port")
    [['180.*.*.166', 5357], ['180.*.*.6', 5357], ......
根据 `ZoomEye API` 提供的接口，分别为 `/host/search` 和 `/web/search`
，这两个接口返回的数据有一定的区别。因此在进行筛选时请根据指定的搜索类型填入正确的字段。
`/web/search` 包含的字段有：app / headers / keywords / title / ip / site / city /
country `/host/search` 包含的字段有：app / version / device / ip / port / hostname /
city / country / asn / banner
### 0x05 Knownsec 404 Team星链计划
`ZoomEye-python` 是 `Knownsec 404 Team星链计划` 中的一员。
“404星链计划”是知道创宇404实验室于2020年8月开始的计划，旨在通过开源或者开放的方式， **长期维护**
并推进涉及安全研究各个领域不同环节的工具化，就像星链一样，将立足于不同安全领域、不同安全环节的研究人员链接起来。
其中不仅限于突破安全壁垒的大型工具，也会包括涉及到优化日常使用体验的各种小工具，除了404本身的工具开放以外，也会不断收集安全研究、渗透测试过程中的痛点，希望能通过“404星链计划”改善安全圈内工具庞杂、水平层次不齐、开源无人维护的多种问题，营造一个更好更开放的安全工具促进与交流的技术氛围。
### 0x06 项目地址
`ZoomEye-python` 完全开源，任何人可以在此基础上修改或提交代码。
GitHub：
* * *