ing miner’s ability to mine simultaneously on multiple
blockchains, a problem solved by He et al. [59] in a
scheme we call Lazy-PoET. Our analysis, however, re-
veals that even Lazy-PoET suffers from what we call
the stale-chip problem. Miners are better off maintain-
ing farms of cheap, outdated CPUs just for mining than
using new CPUs for otherwise useful goals.
We consider instead an approach in which operators
utilize their CPUs while mining, making newer CPUs
more attractive due to the added revenue from the useful
work done. We call this scheme Busy PoET. We ﬁnd that
it improves on Lazy Poet, but remains highly wasteful.
This observation leads to another approach, Proof of
Potential Work (PoPW). PoPW is similar to Busy-PoET,
but reduces mining time according to the speed of the
CPU (its potential to do work), and thus rewards use
of newer CPUs. Although PoPW would greatly reduce
waste, SGX does not allow an enclave to securely re-
trieve its CPU model, making PoPW theoretical only.
We conclude that PoUW incurs the smallest amount
of waste among the options under study. For full de-
tails on our model, parameter choices, and analyses of
the various mining schemes, we refer the reader to the
full version [76].
7 Related Work
Proof-of-Work (PoW) systems [12, 29, 46] as well as
techniques to reduce their associated waste.3
An approach similar to PoET [41], possibly originat-
ing with Dryja [27], is to limit power waste by so-called
Proof-of-Idle. Miners buy mining equipment and get
paid for proving that their equipment remains idle. Be-
yond the technical challenges, as in PoET, an operator
with a set budget could redirect savings from power to
purchase more idle machines, producing capital waste.
Alternative approaches, like PoUW, aim at PoW pro-
ducing work useful for a secondary goal. Permacoin [58]
repurposes mining resources as a distributed storage net-
work, but recycles only a small fraction of mining re-
sources. Primecoin [49] is an active cryptocurrency
whose “useful outputs” are Cunningham and Bi-twin
chains of prime numbers, which have no known utility.
Gridcoin [36, 35], an active cryptocurrency whose min-
ers work for the BOINC [9] grid-computing network, re-
lies on a central entity. FoldingCoin [65] rewards par-
ticipants for work on a protein folding problem, but as a
layer atop, not integrated with, Bitcoin.
Proof-of-Stake [71, 14, 48, 16] is a distinct approach in
which miners gain the right to generate blocks by com-
mitting cryptocurrency funds. It is used in experimen-
tal systems such as Peercoin [50] and Nxt [23]. Unlike
PoW, however, in PoS, an attacker that gains majority
control of mining resources for a bounded time can con-
trol the system forever. PoS protocols also require that
funds, used as stake, remain frozen (and unusable) for
some time. To remove this assumption, Bentov et al. [15]
and Duong et al. [28] propose hybrid PoW / PoS sys-
tems. These works, and the line of hybrid blockchain
systems starting with Bitcoin-NG [32, 51, 63], can all
utilize PoUW as a low-waste alternative to PoW.
Another line of work on PoW for cryptocurrencies
aims at PoWs that resist mining on dedicated hard-
ware and prevent concentration of mining power, e.g.,
via memory-intensive hashing as in Scrypt [54] and
Ethereum [19]. Although democratization of mining
power is not our focus here, PoUW in fact achieves this
goal by restricting mining to general-use CPUs.
SGX. Due to the complexity of the x86-64 architecture,
several works [24, 70, 73] have exposed security prob-
lems in SGX, such as side-channel attacks [73]. Tramer
et al. [70] consider the utility of SGX if its conﬁdentiality
guarantees are broken. Similar practical concerns moti-
vate REM’s tolerance mechanism of compromised SGX
chips.
Ryoan [38] is a framework that allows a server to
run code on private client data and return the output to
Cryptocurrencies and Consensus. Modern decentral-
ized cryptocurrencies have stimulated strong interest in
3“Permissioned” systems, as supported in, e.g., Hyperledger [20]
and Stellar [56], avoid waste by using traditional consensus protocols
at the cost of avoiding decentralization.
USENIX Association
26th USENIX Security Symposium    1439
the client. The (trusted) Ryoan service instruments the
server operator’s code to prevent leakage of client data.
In contrast, in REM, the useful-workload code is instru-
mented in an untrusted environment, and an attestation
of its validity is produced within a trusted environment.
Haven [13] runs non-SGX applications by incorporat-
ing a library OS into the enclave. REM, in contrast, takes
code amenable to SGX compilation and enforces cor-
rect instrumentation. In principle, Haven could allow for
non-SGX code to be adapted for PoUW.
Zhang et al. [75] and Juels et al. [47] are the ﬁrst works
we are aware of to pair SGX with cryptocurrencies. Their
aim is to augment the functionality of smart contracts,
however, and is unrelated to the underlying blockchain
layer in which REM operates.
8 Conclusion
We presented REM, which supports permissionless
blockchain consensus based on a novel mechanism
called Proof of Useful Work (PoUW). PoUW leverages
Intel SGX to signiﬁcantly reduce the waste associated
with Proof of Work (PoW), and builds on and reme-
dies shortcomings in Intel’s innovative PoET scheme.
PoUW and REM are thus a promising basis for partially-
decentralized blockchains, reducing waste given certain
trust assumptions in a hardware vendor such as Intel.
Using a rigorous analytic framework, we have shown
how REM can achieve resilience against compromised
nodes with minimal waste (rejected honest blocks). This
framework extends to PoET and potentially other SGX-
based mining approaches.
Our implementation of REM introduces powerful new
techniques for SGX applications, namely instruction-
counting instrumentation and hierarchical attestation, of
potential interest beyond REM itself. They allow REM
to accommodate essentially any desired workloads, per-
mitting ﬂexible adaptation in a variety of settings.
Our framework for economic analysis offers a general
means for assessing the true utility of mining schemes,
including PoW and partially-decentralized alternatives.
Beyond illustrating the beneﬁts of PoUW and REM, it
allowed us to expose risks of approaches such as PoET in
the use of stale chips, and propose improved variants, in-
cluding Proof of Potential Work (PoPW). We found that
small changes to the TEE framework would be signiﬁ-
cant for reduced-waste blockcain mining. In particular,
allowing for secure instruction (or cycle) counting would
reduce PoUW overhead, and a secure chip-model read-
ing instruction would allow for PoPW implementation.
We reported on a complete implementation of REM,
swapped in for the consensus layer in Bitcoin core in
a prototype system. Our experiments showed mini-
mal performance impact (5-15%) on example bench-
marks. In summary, our results show that REM is practi-
cally deployable and promising path to fair and environ-
mentally friendly blockchains in partially-decentralized
blockchains.
Acknowledgements
This work is funded in part by NSF grants CNS-
1330599, CNS-1514163, CNS-1564102, CNS-1601879,
CNS-1544613, and No. 1561209, ARO grant W911NF-
16-1-0145, ONR grant N00014-16-1-2726, and IC3
sponsorship from Chain, IBM, and Intel.
References
[1] A Genetic Algorithm for Predicting Protein Folding in the 2D HP
Model. https://github.com/alican/GeneticAlgorithm.
Accessed: 2016-11-11.
[2] A Lossless, High Performance Implementation of the Zlib (RFC
1950) and Deﬂate (RFC 1951) Algorithm. https://code.
google.com/archive/p/miniz/. Accessed: 2017-2-16.
[3] Attestation Service for
Intel Software Guard Extensions
(Intel SGX): API Documentation. Revision 2.0. Section
4.2.2.
https://software.intel.com/sites/default/
files/managed/7e/3b/ias-api-spec.pdf.
Accessed:
2017-2-21.
[4] Intel(R) Software Guard Extensions for Linux OS. https://
github.com/01org/linux-sgx. Accessed: 2017-2-16.
[5] Intel
Software
Guide.
Guard
Extensions
Enclave
https://software.intel.
Writer’s
com/sites/default/files/managed/ae/48/
Software-Guard-Extensions-Enclave-Writers-Guide.
pdf. Accessed: 2017-2-16.
[6] Sawtooth-core source code (validator). https://github.com/
hyperledger/sawtooth-core/tree/0-7/validator/
sawtooth_validator/consensus/poet1. Accessed: 2017-
2-21.
[7] Single-ﬁle C implementation of the SHA-3 implementation with
https://
Init/Update/Finalize hashing (NIST FIPS 202).
github.com/brainhub/SHA3IUF. Accessed: 2017-2-16.
[8] ANATI, I., GUERON, S., JOHNSON, S., AND SCARLATA, V.
Innovative technology for CPU based attestation and sealing. In
Proceedings of the 2nd International Workshop on Hardware and
Architectural Support for Security and Privacy (2013), vol. 13.
[9] ANDERSON, D. P. Boinc: A system for public-resource com-
puting and storage. In Grid Computing, 2004. Proceedings. Fifth
IEEE/ACM International Workshop on (2004), IEEE, pp. 4–10.
[10] ASPNES, J., JACKSON, C., AND KRISHNAMURTHY, A. Expos-
ing computationally-challenged Byzantine impostors. Depart-
ment of Computer Science, Yale University, New Haven, CT, Tech.
Rep (2005).
[11] AZURE, M.
Blockchain as
a
service.
https:
//web.archive.org/web/20161027013817/https://
azure.microsoft.com/en-us/solutions/blockchain/,
2016.
[12] BACK, A. Hashcash – a denial of service counter-measure.
http://www.cypherspace.org/hashcash/hashcash.pdf,
2002.
1440    26th USENIX Security Symposium
USENIX Association
[13] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding appli-
cations from an untrusted cloud with Haven. ACM Trans. Com-
put. Syst. 33, 3 (Aug. 2015), 8:1–8:26.
[33] EYAL, I., AND SIRER, E. G. Majority is not enough: Bitcoin
mining is vulnerable. In Financial Cryptography and Data Secu-
rity (2014).
[14] BENTOV, I., GABIZON, A., AND MIZRAHI, A. Cryptocurren-
cies without proof of work. CoRR abs/1406.5694 (2014).
[15] BENTOV, I., LEE, C., MIZRAHI, A., AND ROSENFELD, M.
Proof of activity: Extending Bitcoin’s proof of work via proof
of stake. Cryptology ePrint Archive, Report 2014/452, 2014.
http://eprint.iacr.org/2014/452.
[16] BENTOV, I., PASS, R., AND SHI, E.
Snow White: Prov-
ably secure proofs of stake. Cryptology ePrint Archive, Report
2016/919, 2016. http://eprint.iacr.org/2016/919.
[17] BITCOIN COMMUNITY. Bitcoin source. https://github.
com/bitcoin/bitcoin, retrieved Nov. 2016.
[18] BITCOIN COMMUNITY. Bitcoin source. https://github.
com/bitcoin/bitcoin, retrieved Mar. 2015.
[19] BUTERIN, V. A next generation smart contract & decen-
tralized application platform. https://www.ethereum.org/
pdfs/EthereumWhitePaper.pdf/, retrieved Feb. 2015, 2013.
[20] CACHIN, C. Architecture of the Hyperledger blockchain fab-
ric. In Workshop on Distributed Cryptocurrencies and Consensus
Ledgers (2016).
[21] CARLSTEN, M., KALODNER, H., WEINBERG, S. M., AND
NARAYANAN, A. On the instability of Bitcoin without the block
reward. In ACM CCS (2016).
[22] CHANG, C.-C., AND LIN, C.-J. LIBSVM: A library for support
vector machines. ACM Transactions on Intelligent Systems and
Technology 2 (2011), 27:1–27:27. Software available at http:
//www.csie.ntu.edu.tw/~cjlin/libsvm.
[23] COMMUNITY,
T. N.
Nxt whitepaper,
revision 4.
https://web.archive.org/web/20160207083400/
https://www.dropbox.com/s/cbuwrorf672c0yy/
NxtWhitepaper_v122_rev4.pdf, 2014.
[24] COSTAN, V., AND DEVADAS, S. Intel SGX Explained. Cryptol-
ogy ePrint Archive (2016).
[25] DEETMAN, S. Bitcoin could consume as much electricity as
Denmark by 2020. http://tinyurl.com/yc4r9k3k, Mar.
2016.
[26] DONOVAN, A., MUTH, R., CHEN, B., AND SEHR, D. PNacls:
Portable native client executables.
[27] DRYJA, T. Optimal mining strategies. SF Bitcoin-Devs presen-
tation. https://www.youtube.com/watch?v=QN2TPeQ9mnA,
2014.
[28] DUONG, T., FAN, L., VEALE, T., AND ZHOU, H.-S. Securing
Bitcoin-like backbone protocols against a malicious majority of
computing power. Cryptology ePrint Archive, Report 2016/716,
2016. http://eprint.iacr.org/2016/716.
[29] DWORK, C., AND NAOR, M. Pricing via processing or combat-
ting junk mail. In Annual International Cryptology Conference
(1992), Springer, pp. 139–147.
[30] DWYER, J. P., AND HINES, P. Beyond the byzz: Exploring dis-
tributed ledger technology use cases in capital markets and cor-
porate banking. Tech. rep., Celent and MISYS, 2016.
[31] EYAL, I. The miner’s dilemma. In IEEE Symposium on Security
and Privacy (2015), pp. 89–103.
[32] EYAL, I., GENCER, A. E., SIRER, E. G., AND VAN RENESSE,
R. Bitcoin-ng: A scalable blockchain protocol. In 13th USENIX
Symposium on Networked Systems Design and Implementation
(NSDI 16) (2016), pp. 45–59.
[34] GARAY, J. A., KIAYIAS, A., AND LEONARDOS, N. The Bit-
coin backbone protocol: Analysis and applications. In Advances
in Cryptology - EUROCRYPT 2015 - 34th Annual International
Conference on the Theory and Applications of Cryptographic
Techniques (2015), pp. 281–310.
[35] GRIDCOIN. Gridcoin.
https://web.archive.org/web/
20161013081149/http://www.gridcoin.us/, 2016.
[36] GRIDCOIN. Gridcoin (grc) – ﬁrst coin utilizing boinc – ofﬁcial
thread. https://web.archive.org/web/20160909032618/
https://bitcointalk.org/index.php?topic=324118.0,
2016.
[37] HOEKSTRA, M., LAL, R., PAPPACHAN, P., PHEGADE, V., AND
DEL CUVILLO, J. Using innovative instructions to create trust-
In Proceedings of the 2Nd Inter-
worthy software solutions.
national Workshop on Hardware and Architectural Support for
Security and Privacy (New York, NY, USA, 2013), HASP ’13,
ACM, pp. 11:1–11:1.
[38] HUNT, T., ZHU, Z., XU, Y., PETER, S., AND WITCHEL, E.
Ryoan: A distributed sandbox for untrusted computation on se-
cret data. In 12th USENIX Symposium on Operating Systems De-
sign and Implementation (OSDI 16) (GA, Nov. 2016), USENIX
Association, pp. 533–549.
[39] INTEL.
Intel Software Guard Extensions Programming Refer-
ence, 2014.
[40] INTEL.
Intel 64 and IA-32 Architectures Software Developer’s
Manual: Volume 3 (3A, 3B, 3C & 3D): System Programming
Guide, 325384-059us ed., June 2016.
[41] INTEL.
Sawtooth
lake
–
introduction.
https:
//web.archive.org/web/20161025232205/https:
//intelledger.github.io/introduction.html, 2016.
[42] INTEL CORPORATION. Intel® Software Guard Extensions SDK.
https://software.intel.com/en-us/sgx-sdk, 2015.
[43] INTEL CORPORATION.
Intel SGX for Linux. https://01.
org/intel-softwareguard-extensions, 2016.
[44] INTEL CORPORATION. Intel Software Guard Extensions: Intel
https://software.intel.com/
Attestation Service API.
sites/default/files/managed/3d/c8/IAS_1_0_API_
spec_1_1_Final.pdf, 2016.
[45] INTEL CORPORATION.
Intel Attesta-
tion Service. https://software.intel.com/en-us/sgx/
resource-library, 2016.
Public Key for
[46] JAKOBSSON, M., AND JUELS, A. Proofs of work and bread
In Secure Information Networks. Springer,
pudding protocols.
1999, pp. 258–272.
[47] JUELS, A., KOSBA, A., AND SHI, E. The Ring of Gyges: In-
vestigating the future of criminal smart contracts. In ACM CCS
(2016), pp. 283–295.
[48] KIAYIAS, A., KONSTANTINOU, I., RUSSELL, A., DAVID,
B., AND OLIYNYKOV, R.
A provably secure proof-of-
stake blockchain protocol. Cryptology ePrint Archive, Report
2016/889, 2016. http://eprint.iacr.org/2016/889.
[49] KING, S.
[50] KING,
S.,
Primecoin: Cryptocurrency with prime num-
https://web.archive.org/web/
proof-of-work.
ber
20160307052339/http://primecoin.org/static/
primecoin-paper.pdf, 2013.
AND NADAL,
crypto-currency with
peer
//web.archive.org/web/20161025145347/https:
//peercoin.net/assets/paper/peercoin-paper.pdf,
2012.
S.
proof-of-stake.