vista.
[2] Linux
vmsplice
http://isec.pl/
vulnerabilities/isec-0026-vmsplice_to_kernel.txt.
vulnerabilities.
[3] The
story
of
a
simple
and
dangerous
kernel
bug.
http://butnotyet.tumblr.com/post/175132533/the-
story-of-a-simple-and-dangerous-kernel-bug.
[4] OpenBSD’s
IPv6 mbufs
remote kernel buffer overﬂow.
http://www.securityfocus.com/archive/1/462728/
30/0/threaded, 2007.
[5] Microsoft windows TCP/IP IGMP MLD remote buffer over-
ﬂow vulnerability. http://www.securityfocus.com/bid/
27100, 2008.
[6] FUSE: ﬁlesystem in userspace. http://fuse.sourceforge.
net/, 2012.
[7] Green hills integrity. http://www.ghs.com/products/rtos/
integrity.html, 2012.
[8] ALTEKAR, G., BAGRAK, I., BURSTEIN, P., AND SCHULTZ, A.
OPUS: online patches and updates for security. In Proc. of the
14th USENIX Security Symp. (2005), vol. 14, pp. 19–19.
[9] ARNOLD, J., AND KAASHOEK, M. F. Ksplice: Automatic re-
bootless kernel updates. In Proc. of the Fourth European Conf.
on Computer Systems (2009), pp. 187–198.
[10] BAUMANN, A., APPAVOO, J., WISNIEWSKI, R. W., SILVA,
D. D., KRIEGER, O., AND HEISER, G. Reboots are for hard-
ware: Challenges and solutions to updating an operating system
on the ﬂy. In Proc. of the USENIX Annual Tech. Conf. (2007),
pp. 1–14.
[11] BERGER, E. D., ZORN, B. G., AND MCKINLEY, K. S. Recon-
In Proc. of the 17th ACM
sidering custom memory allocation.
SIGPLAN Conf. on Object-oriented Programming, Systems, Lan-
guages, and Applications (2002), pp. 1–12.
[12] BHATKAR, S., DUVARNEY, D. C., AND SEKAR, R. Address
obfuscation: an efﬁcient approach to combat a board range of
In Proc. of the 12th USENIX Security
memory error exploits.
Symp. (2003), p. 8.
[13] BHATKAR, S., AND SEKAR, R. Data space randomization. In
Proc. of the Fifth Int’l Conf. on Detection of Intrusions and Mal-
ware, and Vulnerability Assessment (2008), pp. 1–22.
[14] BHATKAR, S., SEKAR, R., AND DUVARNEY, D. C. Efﬁcient
techniques for comprehensive protection from memory error ex-
ploits. In Proc. of the 14th USENIX Security Symp. (2005), p. 17.
[15] BOJINOV, H., BONEH, D., CANNINGS, R., AND MALCHEV, I.
Address space randomization for mobile devices. In Proc. of the
Fourth ACM Conf. on Wireless network security (2011), pp. 127–
138.
[16] BOYD-WICKIZER, S., AND ZELDOVICH, N. Tolerating mali-
In Proc. of the USENIX Annual
cious device drivers in linux.
Tech. Conf. (2010), pp. 9–9.
[17] C-SKILLS.
Linux udev trickery.
http://c-skills.
blogspot.com/2009/04/udev-trickery-cve-2009-
1185-and-cve.html.
[18] CHEN, H., MAO, Y., WANG, X., ZHOU, D., ZELDOVICH, N.,
AND KAASHOEK, M. Linux kernel vulnerabilities: State-of-the-
In Proc. of the Second Asia-
art defenses and open problems.
Paciﬁc Workshop on Systems (2011).
[19] CHEN, H., YU, J., CHEN, R., ZANG, B., AND YEW, P. POLUS:
a POwerful live updating system. In Proc. of the 29th Int’l Conf.
on Software Engineering (2007), pp. 271–281.
[20] COX, B., EVANS, D., FILIPI, A., ROWANHILL, J., HU,
W., DAVIDSON, J., KNIGHT, J., NGUYEN-TUONG, A., AND
HISER, J. N-variant systems: a secretless framework for security
through diversity. In Proc. of the 15th USENIX Security Symp.
(2006), pp. 105–120.
[21] DALTON, M., KANNAN, H., AND KOZYRAKIS, C. Real-world
buffer overﬂow protection for userspace & kernelspace. In Proc.
of the 17th USENIX Security Symp. (2008), pp. 395–410.
[22] DESIGNER, S. Getting around non-executable stack (and ﬁx).
http://seclists.org/bugtraq/1997/Aug/63.
[23] DURDEN, T. Bypassing PaX ASLR protection.
[24] EDGE, J. Linux ASLR vulnerabilities. http://lwn.net/
Articles/330866/, 2009.
[25] ESSER, S. Exploiting the iOS kernel. In Black Hat USA (2011).
[26] FORREST, S., SOMAYAJI, A., AND ACKLEY, D. Building di-
In Proc. of the 6th Workshop on Hot
verse computer systems.
Topics in Operating Systems (1997), pp. 67–.
[27] GIUFFRIDA, C., CAVALLARO, L., AND TANENBAUM, A. S. We
crashed, now what? In Proc. of the 6th Workshop on Hot Topics
in System Dependability (2010), pp. 1–8.
[28] GRACE, M., WANG, Z., SRINIVASAN, D., LI, J., JIANG, X.,
LIANG, Z., AND LIAKH, S. Transparent protection of com-
modity OS kernels using hardware virtualization. In Proc.of the
6th Conf. on Security and Privacy in Communication Networks
(2010), pp. 162–180.
[29] GUO, P. J., AND ENGLER, D. Linux kernel developer responses
In Proc. of the USENIX Annual
to static analysis bug reports.
Tech. Conf. (2009), pp. 285–292.
[30] GUPTA, D., AND JALOTE, P. On line software version change
using state transfer between processes. Softw. Pract. and Exper.
23, 9 (1993), 949–964.
[31] HAYDEN, C. M., SMITH, E. K., HICKS, M., AND FOSTER,
J. S. State transfer for clear and efﬁcient runtime updates.
In
Proc. of the Third Int’l Workshop on Hot Topics in Software Up-
grades (2011), pp. 179–184.
[32] HERDER, J. N., BOS, H., GRAS, B., HOMBURG, P., AND
TANENBAUM, A. S. Reorganizing UNIX for reliability. In Proc.
of the 11th Asia-Paciﬁc Conf. on Advances in Computer Systems
Architecture (2006), pp. 81–94.
[33] HILDEBRAND, D. An architectural overview of QNX. In Proc.
of the Workshop on Micro-kernels and Other Kernel Architectures
(1992), pp. 113–126.
[34] HU, W., HISER, J., WILLIAMS, D., FILIPI, A., DAVIDSON,
J. W., EVANS, D., KNIGHT, J. C., NGUYEN-TUONG, A., AND
ROWANHILL, J. Secure and practical defense against code-
injection attacks using software dynamic translation. In Proc. of
the Second Int’l Conf. on Virtual Execution Environments (2006),
pp. 2–12.
[35] HUND, R., HOLZ, T., AND FREILING, F. C. Return-oriented
rootkits: bypassing kernel code integrity protection mechanisms.
In Proc. of the 18th USENIX Security Symp. (2009), pp. 383–398.
[36] HUNT, G. C., AND LARUS, J. R. Singularity: rethinking the
software stack. SIGOPS Oper. Syst. Rev. 41, 2 (2007), 37–49.
[37] JANMAR, K. FreeBSD 802.11 remote integer overﬂow. In Black
Hat Europe (2007).
[38] KC, G. S., KEROMYTIS, A. D., AND PREVELAKIS, V. Counter-
ing code-injection attacks with instruction-set randomization. In
Proc. of the 10th ACM Conf. on Computer and Commun. Security
(2003), pp. 272–280.
[39] KIL, C., JUN, J., BOOKHOLT, C., XU, J., AND NING, P. Ad-
dress space layout permutation (ASLP): towards Fine-Grained
randomization of commodity software. In Proc. of the 22nd An-
nual Computer Security Appl. Conf. (2006), pp. 339–348.
[40] KLEIN, G., ELPHINSTONE, K., HEISER, G., ANDRONICK, J.,
COCK, D., DERRIN, P., ELKADUWE, D., ENGELHARDT, K.,
KOLANSKI, R., NORRISH, M., SEWELL, T., TUCH, H., AND
WINWOOD, S. seL4: formal veriﬁcation of an OS kernel.
In
Proc. of the 22nd ACM Symp. on Oper. Systems Prin. (2009),
ACM, pp. 207–220.
[41] LABS, O. K. OKL4 community site. http://wiki.ok-labs.
com/, 2012.
[42] LATTNER, C., AND ADVE, V. LLVM: a compilation framework
for lifelong program analysis & transformation. In Proc. of the
Int’l Symp. on Code Generation and Optimization (2004), p. 75.
[43] LENHARTH, A., ADVE, V. S., AND KING, S. T. Recovery do-
mains: an organizing principle for recoverable operating systems.
In Proc. of the 14th Int’l Conf. on Architectural Support for Pro-
gramming Languages and Operating Systems (2009), pp. 49–60.
[44] LI, J., WANG, Z., BLETSCH, T., SRINIVASAN, D., GRACE,
M., AND JIANG, X. Comprehensive and efﬁcient protection of
kernel control data. IEEE Trans. on Information Forensics and
Security 6, 4 (2011), 1404–1417.
[45] LIAKH, S., GRACE, M., AND JIANG, X. Analyzing and im-
proving linux kernel memory protection: a model checking ap-
In Proc. of the 26th Annual Computer Security Appl.
proach.
Conf. (2010), pp. 271–280.
[46] LIN, Z., RILEY, R. D., AND XU, D. Polymorphing software
In Proc. of the 6th Int’l
by randomizing data structure layout.
Conf. on Detection of Intrusions and Malware, and Vulnerability
Assessment (2009), pp. 107–126.
[47] MAKRIS, K., AND BAZZI, R.
Immediate multi-threaded dy-
namic software updates using stack reconstruction. In Proc. of
the USENIX Annual Tech. Conf. (2009), pp. 397–410.
[48] MAKRIS, K., AND RYU, K. D. Dynamic and adaptive updates
of non-quiescent subsystems in commodity operating system ker-
nels. In Proc. of the Second European Conf. on Computer Systems
(2007), pp. 327–340.
[49] MALIK, A. M., MCINNES, J., AND BEEK, P. V. Optimal basic
block instruction scheduling for Multiple-Issue processors using
constraint programming. In Proc. of the 18th IEEE Int’l Conf. on
Tools with Artiﬁcial Intelligence (2006), pp. 279–287.
driver
frame-
http://msdn.microsoft.com/en-us/windows/
work.
hardware/gg463294, 2010.
[50] MICROSOFT.
Windows User-Mode
[51] NEAMTIU, I., HICKS, M., STOYLE, G., AND ORIOL, M. Prac-
tical dynamic software updating for C. ACM SIGPLAN Notices
41, 6 (2006), 72–83.
[52] NERGAL. The advanced return-into-lib(c) exploits. Phrack Mag-
azine 4, 58 (2001).
[53] NOVARK, G., AND BERGER, E. D. DieHarder: securing the
heap. In Proc. of the 17th ACM Conf. on Computer and Commun.
Security (2010), pp. 573–584.
[54] ONARLIOGLU, K., BILGE, L., LANZI, A., BALZAROTTI, D.,
AND KIRDA, E. G-Free: defeating return-oriented programming
through gadget-less binaries. In Proc. of the 26th Annual Com-
puter Security Appl. Conf. (2010), pp. 49–58.
[55] PALIX, N., THOMAS, G., SAHA, S., CALVES, C., LAWALL, J.,
AND MULLER, G. Faults in linux: ten years later. In Proc. of
the 16th Int’l Conf. on Architectural Support for Programming
Languages and Operating Systems (2011), pp. 305–318.
[56] PERLA, E., AND OLDANI, M. A guide to kernel exploitation:
attacking the core. 2010.
[57] PETRONI,JR., N. L., AND HICKS, M. Automated detection of
persistent kernel control-ﬂow attacks. In Proc. of the 14th ACM
Conf. on Computer and Commun. Security (2007), pp. 103–115.
[58] PORTOKALIDIS, G., AND KEROMYTIS, A. D. Fast and practical
instruction-set randomization for commodity systems. In Proc. of
the 26th Annual Computer Security Appl. Conf. (2010), pp. 41–
48.
[59] RATANAWORABHAN, P., LIVSHITS, B., AND ZORN, B. NOZ-
ZLE: a defense against heap-spraying code injection attacks. In
Proc. of the 18th USENIX Security Symp. (2009), pp. 169–186.
[60] RILEY, R., JIANG, X., AND XU, D. Guest-Transparent preven-
tion of kernel rootkits with VMM-Based memory shadowing. In
Proc. of the 11th Int’l Conf. on Recent Advances in Intrusion De-
tection (2008), pp. 1–20.
[61] ROGLIA, G. F., MARTIGNONI, L., PALEARI, R., AND BR-
USCHI, D. Surgically returning to randomized lib(c). In Proc. of
the 2009 Annual Computer Security Appl. Conf. (2009), pp. 60–
69.
[62] SALAMAT, B., GAL, A., JACKSON, T., MANIVANNAN, K.,
WAGNER, G., AND FRANZ, M. Multi-variant program execu-
tion: Using multi-core systems to defuse Buffer-Overﬂow vulner-
abilities. In Proc. of the 2008 Int’l Conf. on Complex, Intelligent
and Software Intensive Systems (2008), pp. 843–848.
[63] SALAMAT, B., JACKSON, T., GAL, A., AND FRANZ, M. Or-
chestra: intrusion detection using parallel execution and moni-
toring of program variants in user-space. In Proc. of the Fourth
European Conf. on Computer Systems (2009), pp. 33–46.
[64] SCHWARTZ, E. J., AVGERINOS, T., AND BRUMLEY, D. Q: ex-
ploit hardening made easy. In Proc. of the 20th USENIX Security
Symp. (2011), p. 25.
[65] SESHADRI, A., LUK, M., QU, N., AND PERRIG, A. SecVisor: a
tiny hypervisor to provide lifetime kernel code integrity for com-
modity OSes. In Proc. of the 21st ACM Symp. on Oper. Systems
Prin. (2007), pp. 335–350.
[66] SHACHAM, H. The geometry of innocent ﬂesh on the bone:
return-into-libc without function calls (on the x86). In Proc. of
the 14th ACM Conf. on Computer and Commun. Security (2007),
pp. 552–561.
[67] SHACHAM, H., PAGE, M., PFAFF, B., GOH, E., MODADUGU,
N., AND BONEH, D. On the effectiveness of address-space ran-
domization. In Proc. of the 11th ACM Conf. on Computer and
Commun. Security (2004), pp. 298–307.
[68] TEAM, P. Overall description of the PaX project. http://pax.
grsecurity.net/docs/pax.txt, 2008.
[69] WANG, Z., JIANG, X., CUI, W., AND NING, P. Countering ker-
nel rootkits with lightweight hook protection. In Proc. of the 16th
ACM Conf. on Computer and Commun. Security (2009), pp. 545–
554.
[70] WILSON, P. R. Uniprocessor garbage collection techniques.
In Proc. of the Int’l Workshop on Memory Management (1992),
pp. 1–42.
[71] WU, J., CUI, H., AND YANG, J. Bypassing races in live applica-
tions with execution ﬁlters. In Proc. of the 9th USENIX Symp. on
Operating Systems Design and Implementation (2010), pp. 1–13.
[72] XU, H., AND CHAPIN, S. J. Improving address space random-
ization with a dynamic offset randomization technique. In Proc.
of the 2006 ACM Symp. on Applied Computing (2006), pp. 384–
391.
[73] XU, J., KALBARCZYK, Z., AND IYER, R. K. Transparent run-
time randomization for security. In Proc. of the 22nd Int’l Symp.
on Reliable Distributed Systems (2003), pp. 260– 269.
[74] YIN, H., POOSANKAM, P., HANNA, S., AND SONG, D.
HookScout: proactive binary-centric hook detection. In Proc. of
the 7th Int’l Conf. on Detection of Intrusions and Malware, and
Vulnerability Assessment (2010), pp. 1–20.
[75] YOUNG, C., JOHNSON, D. S., SMITH, M. D., AND KARGER,
D. R. Near-optimal intraprocedural branch alignment. In Proc.
of the ACM SIGPLAN Conf. on Programming Language Design
and Implementation (1997), pp. 183–193.
[76] ZHANG, K., AND WANG, X. Peeping tom in the neighborhood:
keystroke eavesdropping on multi-user systems. In Proc. of the
18th USENIX Security Symp. (2009), pp. 17–32.