ings. To combine them, we ﬁrst run a honeyclient on a URL ob-
tained from an external feed.
If the URL leads to exploitation,
the honeyclient outputs an original dialog, which our infrastruc-
ture immediately tries to minimize using our dialog minimization
technique. If minimization succeeds, then it builds a signature on
the URL of the exploit server so that next time a URL for the same
exploit kit is seen a milker is used instead of a honeyclient. Our in-
frastructure periodically visits each exploit server every few hours
and from different IP addresses. Thus, using a milker instead of a
honeyclient quickly adds up in performance gains.
We have used this combination of drive-by download milkers
and honeyclients to collect over 14,000 malware samples during
one year from a single machine. The malware collection results
and their analysis have been introduced in prior work [26]. How-
ever, that work did not present the network dialog minimization
technique at the core of our milkers. In addition, our prior work
only built milkers for two exploit kits (BlackHole 1.x and Phoenix),
while this work builds milkers for 9 (Section 6.1).
Cookie expiration validation. Most web applications generate an
authentication token upon successful validation of a user’s creden-
tials (e.g., username and password) and embed it into a cookie
that is stored in the user’s browser. The user login is typically
protected by HTTPS. However, a signiﬁcant fraction of web ap-
plications (37% of the top 100 Alexa sites) use plain HTTP for
subsequent connections because of performance and compatibility
issues. Since the unencrypted cookie is included in following re-
quests to the server, a network attacker (e.g., on a public WiFi) can
capture the cookie and include it in its own connections to hijack
the session, impersonating the user [1,4,13,14,17,30]. This enables
the adversary to access and change the user’s sensitive information
and to steal the account by changing the user’s password.
To mitigate cookie replay attacks, the web server should expire
the authentication token in the cookie after some time forcing the
user to re-authenticate afterwards (thus minimizing the time win-
dow for an adversary to launch a session-hijacking attack). Here, it
is not enough to delete the cookie in the user’s browser when she
clicks on a logout link. The web application also needs to remove
the authentication token on the server-side, otherwise the attacker
can still replay it, even if the user has (apparently) logged out.
While these problems have been known for over a decade [14,
30], it is necessary to understand if web applications are address-
ing it and how fast. However, manually checking cookie expira-
tion times for many web applications is cumbersome because each
application’s cookie has a different format and may be encrypted.
The most general way to test cookie expiration times is to replay
the cookie periodically until the server stops accepting it. For this,
we use our dialog minimization technique on a valid authenticated
dialog for each application under test and automatically replay the
minimized dialog at ﬁxed intervals.
We have applied our approach to the top 100 Alexa sites that
do not use full HTTPS communication, measuring how many sites
allow cookie replay and for how long (Section 6.2). Our measure-
ments show that 31% of the top 100 Alexa domains still do not
destroy the server-side state when a user clicks the logout link and
that 17% have cookies the live over a month, creating a large op-
portunity window for session hijacking.
C1C2C3M1M3F1F2M4F3F4F5F6F7F8M2C2C3Simplifying user interfaces. Web applications often require the
user to go through several manual steps (e.g., traversing multi-
ple webpages, ﬁlling forms) to reach an interesting state. Net-
work dialog minimization can be used to produce a shortcut to that
state that removes unnecessary steps and which can be automat-
ically replayed. This simpliﬁes application access, e.g., convert-
ing a web based application into a command line tool. Simpliﬁed
user interfaces save user time and also provide beneﬁts for disabled
users [21]. For example, one of our institutions recently moved to
a brand new fully automated building. This building has no manual
switches; tasks like turning on the lights, moving sunblinds, and
setting the temperature of an ofﬁce can only be performed through
a web application that interfaces with a building automation system
(BAS). A simple task like moving the sunblind down when the sun
hits the computer screen, requires accessing three different web-
pages (login, ofﬁce selection, value setting) through a cumbersome
interface. Unfortunately, the web application and the BAS interface
are proprietary and undocumented. Any changes to them requires
expensive work by the BAS manufacturer. We have applied our
dialog minimization technique to generate minimized dialogs for
moving a sunblind up and down, and a command line tool that re-
plays them (Section 6.3). Employees can now perform these tasks
more efﬁciently saving 3 hours per person and year.
Vulnerability analysis. Replaying an attack on a vulnerable net-
worked application is a useful capability that enables testing the
vulnerability and determining which versions are vulnerable [11].
In addition, minimizing a network attack dialog enables under-
standing the conditions leading to exploitation without expensive
code inspection, and the minimized dialog can be used as an ex-
ploit signature [12]. Furthermore, minimization is fundamental to
isolate the real attack when the input is a network trace (e.g., cap-
tured at an IDS) that contains an attack on a vulnerability but also
much other trafﬁc unrelated to the attack. We have applied our
network dialog minimization technique to minimize an attack on
the OpenSBC SIP server (Section 6.4). The minimized dialog still
exploits a patched version of the OpenSBC server unveiling a pre-
viously unknown vulnerability, which has been acknowledged by
the author and assigned an OSVDB identiﬁer [29].
Dialog clustering. Our dialog difﬁng approach deﬁnes a similar-
ity metric between network dialogs that enables clustering multiple
similar dialogs at once. We have evaluated dialog clustering on 60
benign and 91 malicious dialogs (Section 6.5). The benign dialogs
correspond to visiting the top 30 Alexa sites twice, spacing the vis-
its one day apart. Our clustering groups with perfect accuracy and
recall the dialogs from the same site in the same cluster, despite
the many changes between both dialogs due to non-determinism.
The malicious dialogs are obtained by running malware, captur-
ing their C&C communication. Here, the clustering achieves 100%
accuracy and 78% recall. The perfect accuracy enables integrat-
ing our clustering as a ﬁrst step into existing signature generation
tools [31, 33].
3. NETWORK DIALOG TREE
A network dialog may comprise multiple connections, each with
multiple messages on both dialog directions, and each message
with its own ﬁeld hierarchy. The network dialog tree captures this
hierarchical structure. The nodes of the tree correspond to con-
nections, messages, or ﬁelds depending on the depth in the tree.
An edge from a parent node to a child node implies that the child
belongs to the parent, e.g., that a message belongs to a speciﬁc con-
nection or a ﬁeld to a speciﬁc message. Nodes at the same depth
and with the same parent (e.g., all messages in a connection) re-
spect a temporal ordering in which the beginning of a node (e.g.,
the ﬁrst packet in a message or the ﬁrst byte in a ﬁeld) appeared on
the network earlier than the start of the node on its right.
The root represents the complete dialog and is annotated with the
list of peers involved in the dialog (at least two but possibly more),
each peer characterized by an IP address, a DNS domain, or both.
Nodes at depth 1 correspond to connections. Each connection
node has 7 attributes: source and destination peers, source and
destination ports, transport protocol, application protocol, and the
timestamp of the ﬁrst packet. We build UDP “connection” nodes
by grouping all UDP packets between two peers until no trafﬁc is
seen between them for a predeﬁned window of time. The source
peer corresponds to the initiator of the connection. Connections
are ordered using the timestamp of their ﬁrst packet.
Nodes at depth 2 correspond to the messages in the connection.
Each message node is annotated with the peer that sends the mes-
sage, which captures its direction. For UDP connections, each
packet is considered a separate message. Messages in the same
connection are ordered using the timestamp of their ﬁrst packet.
The nodes at depth ≥ 3 correspond to ﬁelds in the message. Each
ﬁeld node is annotated with the range of bytes it occupies in the
message and ﬁelds can only have completely disjoint or completely
enclosed ranges (i.e., ﬁelds cannot partially overlap). Field nodes
can be hierarchical ﬁelds if they have children or leaf ﬁelds other-
wise. The children of a hierarchical ﬁeld cover disjoint parts of the
parent’s range. For example, every HTTP GET message in Figure 2
contains a Request-line ﬁeld that in turn contains 3 other ﬁelds: the
method, the URI, and the protocol version. Field nodes are ordered
using the start offset of the ﬁeld in the message it belongs to (offset
zero is the ﬁrst byte).
Node dependencies. A network dialog tree also captures ﬁeld de-
pendencies, e.g., a ﬁeld may be the length or checksum of another
ﬁeld in the same message. Dependencies can also happen across
messages, e.g., the value of a Cookie ﬁeld received from a web
server in an HTTP response may be sent in a later HTTP request
to the same server. There can also be dependencies across connec-
tions, e.g., the Referer and Location HTTP headers indicate that a
request was originated by a redirection in a previous response.
Protocol knowledge. The network dialog tree is a general ab-
straction that can be used to represent any network dialog regard-
less of the protocols involved. However, only the construction of
the ﬁrst level, i.e., extracting the connections nodes, is protocol-
independent. Extracting the message and ﬁeld levels requires knowl-
edge about the application protocol used in the connection. We
assume the availability of the grammar of each protocol involved.
When the grammar is not available, prior work has shown how to
recover it from an implementation of the protocol [6,10,24,37]. In
this paper, we focus on HTTP and SIP dialogs since these are the
only protocols needed by our applications.
4. DIALOG MINIMIZATION
Minimizing a network dialog is an intuitive process: create a test
dialog by removing some part of the original dialog, replay the test
dialog, and check if the goal is still achieved. If the test passes (i.e.,
the goal is still achieved) the part removed is not needed to achieve
the goal and thus should not be in the minimized dialog. If the test
fails (i.e., goal not achieved), it is needed and should be kept in the
minimized dialog. The main goals are that the minimized dialog
should not contain unnecessary parts and that the number of tests
to produce the minimized dialog should be as small as possible.
Our insight is that network dialog minimization (NDM) is a gen-
eralized version of the problem of minimizing an input that crashes
a program, for which delta debugging is a well known solution [39].
The differences are that (1) NDM deals with remote networked
applications, which we may not control, rather than a local pro-
gram; (2) NDM’s goal is not necessarily crashing the remote ap-
plication, but more generally to drive it to some externally visible
state; and (3) NDM operates on sequences of connections and mes-
sages rather than a ﬁle or a single network packet. We detail how
we address these differences next.
Reset button. The ﬁrst difference is that in input minimization
the analyst controls the program for which the input is being min-
imized. More speciﬁcally, the analyst can restart the program be-
fore each test. Thus, the tests are independent because the program
starts each test in the same initial state. However, NDM deals with
a remote server which we may not control because it may belong
to another party, e.g., an exploit server. This is problematic be-
cause when we perform a test, the remote server may be left in a
state different from its initial state. Thus, the next test starts in a
different server state and the tests are not independent. Without in-
dependent tests, the minimization may produce an incorrect result.
For example, the minimized drive-by download dialog in Figure 3
shows that messages M2 and M4 are both needed to download the
malware. If a test consisted only of message M2 and the next test
only of message M4, the second test would reach the goal thanks
to the server state set by the ﬁrst test, which would be incorrectly
interpreted as only M4 being needed to reach the goal.
The solution to this problem is to deﬁne an application-speciﬁc
reset button that the minimization process can use to reset the re-
mote server to its initial state before each test. We propose one reset
button implementation, applicable to many network server types,
but other implementations are possible.
The intuition behind our reset button is that a network server
handles multiple simultaneous clients by keeping a separate state
machine for each. Thus, if the replayer uses a previously unused IP
address for every test, then at the start of a new test every endpoint
will be in its initial state. For each level of the tree with n nodes,
the minimization may generate up to n2 +3n tests, so that our reset
button may require a large IP address pool. In addition, the remote
application may limit the geographical location of IP addresses it
serves. To identify this case, the minimization ﬁrst conducts a ge-
ographical distribution test (GDT) where it replays the full original
dialog from one IP address in each region.
If some regions are
blocked, the reset button is modiﬁed to utilize only IP addresses in
the allowed regions.
To implement the reset button we use a commercial Virtual Pri-
vate Network (VPN) that offers exit points in more than 50 coun-
tries, each with a pool of IP addresses, totaling more than 45,000
IPs. Each test changes the VPN observable IP. In our applications
we never run out of IP addresses. For very large trees, NDM sup-
ports limiting the minimization to a certain tree depth.
Goal function. The second difference is that NDM minimizes the
original dialog with respect to a goal that may not be crashing the
remote network application. For example, in the drive-by download
dialog in Figure 1 the goal is downloading a malware binary from
the exploit server. NDM takes as input a boolean goal function that
given the responses received from the peers during the test, returns
true if the goal was achieved in the test, false otherwise. The im-
plementation of the goal function is dialog-speciﬁc. In some appli-
cations it is enough to check the received responses, e.g., whether a
response from an exploit server contains an executable. Other goal
functions may be more complex, e.g., for vulnerability analysis it
may check if the application crashed through local monitoring or
by sending a probe to see if the application still responds.
Figure 4: Network dialog minimization architecture.
Dialog tree. The third difference is that NDM does not deal with
minimizing a single input, but rather a sequence of network con-
nections and messages. Our insight is that by encoding a network
dialog as a tree we can use a hierarchical version of delta debugging
to minimize the dialog [25]. Capturing the hierarchical structure
of the network dialog enables applying delta debugging (ddmin)
at each level of the tree. Intuitively, this greatly speeds up mini-
mization because only properly-formatted inputs are produced and
because if a test removes the subtree rooted at one node and the test
passes, then the complete subtree requires no more tests.
Architecture overview. Figure 4 shows the architecture of NDM,
which comprises 3 modules: dialog generation, network delta de-
bugging, and replayer. The dialog generation module runs once.