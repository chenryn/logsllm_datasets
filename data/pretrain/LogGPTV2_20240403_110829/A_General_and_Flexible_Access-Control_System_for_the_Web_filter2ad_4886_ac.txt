or other facts, before the proof can be completed.
The process of fetching additional information and
then retrying the proof process is called iterative
proving. The process does not a(cid:11)ect the server, and
terminates when a proof is successfully generated.
Proof generation can be divided into two phases. In
In the second
the (cid:12)rst phase, facts are gathered.
phase, straightforward prover rules are used to test
if these facts are su(cid:14)cient to prove the challenge. If
so, the proof is returned. Otherwise, the phases are
repeated, (cid:12)rst gathering additional facts and then
reproving, until either a proof is successfully gener-
ated, or until no new facts can be found.
The fact-gathering phase involves the client gather-
ing four basic types of facts.
Self-signed Assumptions The (cid:12)rst type of facts
comes from the client itself. The client can sign
statements with its own private key, and these may
be useful in constructing proofs. Often, for exam-
ple, it is necessary for the client to sign part of the
challenge itself and use this as an assumption in the
proof.
Alice will sign the statement
goal "http://server/midterm.html" "sid"
Applying the signature axiom to this
ment will yield
state-
(key "alice") says
(goal "http://server/midterm.html" "sid")
Armed with this assumption (and no others, so
far), Alice tries to prove the challenge. The at-
tempt fails in the client (i.e., no proof is con-
structed, so nothing is sent to the server); Alice
realizes that this assumption by itself isn’t su(cid:14)-
cient to generate a proof so she tries to collect more
facts. (Steps 6 and 8 of Figure 2.)
Goal-oriented facts The second type of facts
is typically (though not necessarily) provided by
the web server. While generating propositions and
checking proofs are conceptually the two main parts
of the server-side infrastructure, a PCA-enabled
server may want to carry out a number of other
tasks. One of these is managing pieces of the secu-
rity policy. To generate a proof that it is authorized
to access a particular web page, a client will have to
know which principals have access to it. Such infor-
mation, since it describes which principals have di-
rect access to a particular goal, we call goal-oriented
facts.
In our implementation, the server keeps this infor-
mation in access-control lists. Entries from these
lists, encoded in a manner that makes them suitable
for use as assumptions, are provided to the client on
demand. They are not given out indiscriminately,
however. Before providing a goal-oriented fact, the
server uses an additional PCA exchange to check
whether the client is authorized to access the fact.
In our system the client queries the server for goal-
oriented facts for each challenge it needs to prove.
Goals are described by URLs, and the server re-
quires PCA authorization for a directory before it
will return the goal-oriented facts that describe ac-
cess to (cid:12)les/directories inside that directory. The
goal-oriented fact that describes access to the root
directory is freely returned to any client.
In this
way, a client is forced to iteratively prove autho-
rization for each directory level on the server.
Since her (cid:12)rst attempt at generating a proof
didn’t succeed, Alice sends a message to the
server requesting goal-oriented facts about http:
// server/ midterm. html. Upon receiving the re-
quest, the server (cid:12)rst checks whether Alice has
demonstrated that she has access to http: //
server/.
It does this by generating a list of as-
sumptions (there will be only a single assumption
in the list) and then checking whether Alice has
proven it. After determining that Alice is allowed
access to the root directory, the server gives to Al-
ice a signed version of the statement
not (before "server" (8 P.M.))
imp ((localname (key "registrar") "cs101")
says (goal "http://server/midterm.html"
"sig"))
imp (goal "http://server/midterm.html" "sig")
‘If
Alice translates it into, \Server says:
it is
not before 8 P.M., and a CS101 student says it’s
OK to read midterm. html, then it’s OK to read
midterm. html.’ "
Fetching the ACL entry from the server is also de-
scribed by steps 2 through 5 of Figure 2.
the server might not accept.) In this case, the client
adjusts its guess about the server’s clock and begins
the proof generation process again.
In order to use the goal-oriented assumption it re-
ceived from the server, Alice must also know some-
thing about the current time. Since it’s 9 P.M. by
her clock, she guesses that the server believes that
the time is before 9:05 P.M. and after 8:55 P.M.
This corresponds to the assumption
before "server" (9:05 P.M.) and
not (before "server" (8:55 P.M.))
Armed with the self-signed assumption, the goal-
oriented assumption, and the assumption about
time, Alice again tries proving that she can ac-
cess midterm. html. Again, she discovers that she
doesn’t have enough facts to construct a proof. She
knows that Registrar.CS101 can access the (cid:12)le, but
she doesn’t know how to extend the access privi-
lege to herself.
Key-oriented facts The fourth type of
facts
come from hints that are embedded in keys and that
enable facts to be stored on a separate (perhaps cen-
tralized or distributed) server. Concatenated with
each public key is a list of URLs which may contain
facts relevant to that key.
At each fact-fetching step, the client examines all
of the keys referenced in all of the facts already
fetched. Each key is examined for embedded hints.
The client then fetches new facts from all of these
hint URLs. If needed, these new facts will be exam-
ined for additional hint URLs, which will then be
fetched; this process will continue until all needed
facts have been found. In this way, the client does
a breadth-(cid:12)rst search for new facts, alternating be-
tween searching one additional depth level and at-
tempting to construct a proof with the current set
of facts.
Server Time In order to generate proofs which
include expiring statements, the client must make
a guess about the server’s clock. The third type
of facts is the client’s guess about the time which
will be showing on the server’s clock at the instant
of proof checking. If the client makes an incorrect
guess, it might successfully generate a proof which
is rejected by the server. (An incorrect guess about
the server’s clock is the only reason for rejecting a
properly formed proof, since it is the only \fact" the
Although the proof didn’t succeed, Alice can now
use the hints from her facts to try to (cid:12)nd additional
facts that might help the proof. Bob’s server’s key
and the Registrar’s key are embedded in the facts
Alice has collected. In each key is encoded a URL
that describes a location at which the owner of that
key publishes additional facts. Bob’s server’s key,
heretofore given as key "server" actually has the
form key "server;http://server/hints/".
Before giving up, Alice’s prover follows these URLs
to see if it can (cid:12)nd any new facts that might help.
This is shown as step 7 of Figure 2. Following
the hint in the Registrar’s key, Alice downloads
a signed statement which she translates into the
assumption
(key "registrar") says
(before "registrar" (end of semester)
imp ((key "alice") speaksfor
(localname (key "registrar")
"cs101")))
This fact delegates to Alice the right to speak on
behalf of Registrar.CS101: \The Registrar says
that until the end of the semester, whatever Al-
ice says has the same weight as if Registrar.CS101
said it."
Following the hint in Bob’s server’s key, Alice ob-
tains a new fact that tells her the clock skew be-
tween Bob’s server and the Registrar.
Alice now (cid:12)nally has enough facts to generate a
proof that demonstrates that she is authorized to
read http: // server/ midterm. html. Alice makes
a (cid:12)nal request to access http: // server/ midterm.
html, this time including in it the full proof.
3.9 Server: Proof Checking
The Theory. After it learns which proposition it
must prove, the client generates a proof and sends
it to the server. If the proof is correct, the server
allows the client to access the requested web page.
Proofs are checked using Twelf. The proof provided
by the client is encoded as an LF term [13]. The type
(in the programming languages sense) of the term is
the statement of the proof; the body of the term is
the proof’s derivation. Checking that the derivation
is correct amounts to type checking the term that
represents the proof. If the term is well typed, the
client has succeeded in proving the proposition.
As is the case for the client, using Twelf for proof
checking is overkill, since only the type-checking al-
gorithm is used. The proof checker is part of the
trusted computing base of the system. To minimize
the likelihood that it contains bugs that could com-
promise security, it should be as small and simple
as possible. Several minimal LF type checkers have
already been or will shortly be implemented [16, 20];
one of these could serve as the proof checker for our
system.
may need to introduce more that one type annota-
tion per variable, which can lead to exponential in-
crease in the size of the proofs. The implicitly-typed
version is much more concise, but su(cid:11)ers from a dif-
ferent problem: the type-inference algorithm that
the server would need to run is undecidable, which
could cause correct proofs not to be accepted or the
server to be tied up by a complicated proof.
The LF community is currently developing a type
checker for semi-explicitly typed LF terms that
would solve both problems. Its type-inference algo-
rithm will be decidable, and the level of type ascrip-
tion it will require will not cause exponential code
blowup. Until it becomes available, our system will
require proofs to be explicitly typed.
The Practice. Checking the proof provided by
the client, however, is not quite as simple as just
passing it through an LF type checker. The body
of an LF term is the proof of the proposition repre-
sented by its type. If the term has only a type as-
cription but no body, it represents an axiom. That
the axiom may type check does not mean that we
want to allow it as part of the proof. If we were to do
so, the client could respond to a challenge by send-
ing an axiom that asserted the proposition it needed
to prove; obviously we wouldn’t want to accept this
statement as proof of the challenge.
In addition,
the server must verify any digital signatures that
are sent with the proof.
To solve these problems, the server preprocesses the
client’s proof before passing it to a type checker.
The preprocessor (cid:12)rst makes sure that all of the
terms that make up the proof have both a type and
a body. A proof that contains illegal axioms is re-
jected.
Next, two special types of axioms are inserted into
the proof as necessary. The (cid:12)rst type is used to
make propositions about digital signatures, and the
second type is used to make propositions regarding
time. These are required since the proof checker
cannot check digital signatures or time statements
directly. The client inserts into the proof place hold-
ers for the two types of axioms it can use. The server
makes sure that each axiom holds, generates an LF
declaration that represents it, and then replaces the
placeholder with a reference to the declaration.
LF terms can either have explicit type ascriptions
or be implicitly typed. The explicitly-typed version
For digital signatures, the client inserts into the
proof a proposition of the special form \#signature
key, formula, sig". The server checks that sig is a
valid signature made by the key key for the formula
formula. If so, the #signature statement is replaced
by an axiom asserting that key signed formula.
To make statements about time, the client inserts a
proposition of the special form \#now". The pre-
processing stage replaces the #now with an axiom
asserting the current time. Axioms of this form are
necessary when signed propositions include an expi-
ration date, for example.
Once the proof has been parsed to make sure it
contains no axioms and special axioms of these two
forms have been reintroduced, the proof is checked
to make sure it actually proves the challenge. (The
proof might be a perfectly valid proof of some other
challenge!)
If this (cid:12)nal check succeeds, then the
whole proof is passed to an LF type checker; in our
case, this is again Twelf.
If all of these checks succeed, then the challenge is
inserted into the server’s cache of proven proposi-
tions. The server will either allow access to the page
(if this was the last challenge in the server’s list) or
return the next challenge to the client.
The server receives Alice’s request for midterm.
html and generates a list of propositions that need
to be proven before access is granted. Only the
last proposition is unproven, and its proof is in-
cluded in Alice’s request. The server expands the
#signature and #now propositions, and sends the
proof to the type-checker. The proof checks suc-
cessfully, so the server inserts it in its cache; Al-
ice won’t have to prove this proposition again.
Finally, the server checks whether Alice proved
the correct challenge, which she has. There are
no more propositions left to be proven, Alice has
successfully proven that she is authorized to read
http: // server/ midterm. html. The server sends
the requested page to Alice.
4 Optimizations and Performance
Results
4.1 Caching and Modularity
Our authorization protocol involves a number of po-
tentially lengthy operations like transferring data
over the network and verifying proofs. We use
caching on both the client and the server to alle-
viate the performance penalty of these operations.
Client-side One of the inevitable side-e(cid:11)ects of
a security policy that is distributed across multi-
ple hosts is that a client has to communicate with
each of them. Delegation statements in the secu-
rity policy may force this communication to happen
sequentially, since a client might fetch one piece of
data only to discover that it needs another. While
there is little than can be done to improve the worst-
case scenario of a series of sequential fetches over the
network, subsequent fetches of the same facts can
be eliminated by caching them on the client. Some
facts that reside in the cache may expire; but since it
is easy for the client to check whether they are valid,
they can be checked and removed from the cache
out-of-band from the proof-generation process.
Server-side To avoid re-checking proofs, all cor-
rectly proven propositions are cached.
Some of
them may use time-dependent or otherwise ex-
pirable premises{they could be correct when (cid:12)rst
checked but false later.
If such proofs, instead of
being retransmitted and rechecked, are found in
the cache, their premises must still be checked be-
fore authorization is accepted. The proofs are kept
cached as long as the session ID with which they are
associated is kept alive.
Since all proofs are based on a sparse and basic core
logic, they’re likely to need many lemmas and de(cid:12)-
nitions for expressing proofs in a concise way. Many
clients will use these same lemmas in their proofs;
most proofs, in fact, are likely to include the same
basic set of lemmas. We have added to the proof
language a simple module system that allows us to
abstract these lemmas from individual proofs. In-
stead of having to include all the lemmas in each
proof, the module system allows them to be im-
ported with a statement like basiclem = #include
If
http://server/lemmas.elf.
lemma
speaksfor trans,
resides in the
basiclem module, it can now be referenced from the
body of the proof as basiclem.speaksfor trans.
Instead of being managed individually by each
client, abstracting the lemmas into modules allows
them to be maintained and published by a third
party. A company, for instance, can maintain a sin-
gle set of lemmas that all its employees can import
when trying to prove that they are allowed to access
their payroll records.
for example,
the
To make the examples in the previous section more
understandable, we have omitted from them refer-
ences to modules. In reality, each proof sent by a
client to a server would be pre(cid:12)xed by a #include
statement for a module that contained the de(cid:12)ni-
tions of, for example, says, speaksfor, localname
and the lemmas that manipulate them, as well as
more basic lemmas.
Aside from the administrative advantages, an im-
portant practical bene(cid:12)t of abstracting lemmas into
modules is increased e(cid:14)ciency, both in bandwidth
consumed during proof transmission and in re-
sources expended for proof checking.
Instead of
transmitting with each proof several thousands of
lines of lemmas, a client merely inserts a #include
declaration which tells the checker the URL (we cur-
rently support only modules that are accessible via
HTTP) at which the module containing the lemmas
can be found. Before the proof is transmitted from
the client to the server, the label under which the
module is imported is modi(cid:12)ed so that it contains
the hash of the semantic content (that is, a hash
that is somewhat independent of variable names and
formatting) of the imported module. This way the
checker knows not only where to (cid:12)nd the module,
but can also verify that the prover and the checker
agree on its contents.
When the checker is processing a proof and encoun-
ters a #include statement, it (cid:12)rst checks whether a
module with that URL has already been imported.
If it has been, and the hash of the previously im-
ported module matches the hash in the proof, then
proof checking continues normally and the proof can
readily reference lemmas declared in the imported
module. If the hashes do not match or the module
hasn’t been imported, the checker accesses the URL
and fetches the module. A module being imported
is validated by the checker in the same way that a
proof would be. Since they’re identi(cid:12)ed with con-
tent hashes, multiple versions of a module with the
same URL can coexist in the checker’s cache.
The checker takes appropriate precautions to guard
itself against proofs that may contain modules that
endlessly import other modules, cyclical
import