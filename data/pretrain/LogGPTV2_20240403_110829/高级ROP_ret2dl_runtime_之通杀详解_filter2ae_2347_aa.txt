# 高级ROP ret2dl_runtime 之通杀详解
前言：花了好几天研究这几个类型题，发觉了个通用规律，原来越高级的题目利用起来越容易，因为根本不用画太多时间改exp，直接改几个变量就可以直接打成功。。。所以想写篇文章记录下，以前怕高级rop，理解原理并利用后发觉简单了
## ret2dllruntime 原理
先推荐几个地址学习下
  * [ctf-wiki之高级ROP](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop)
  * [ctf-wiki之elf文件基本结构](https://ctf-wiki.github.io/ctf-wiki/executable/elf/elf-structure/)
虽然以上不是我的博客，不过这些个大佬帮助了我，给个链接也是应该的。  
ctf-wiki那个题目我感觉不够经典，还多了个write函数，单一难以泄露才是最经典的题目，所以我选了这个题目来做示例
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      init();
      vuln();
      return 0;
    }
    ssize_t vuln()
    {
      char buf; // [esp+0h] [ebp-28h]
      return read(0, &buf, 0x100u);
    }
很明显的栈溢出  
可没有多余的函数可以泄露，这对于我这千年通过leak进行rop的玩家很不友好，因为这道题我做过，虽然当时没做出也没研究，不过以前欠过的债迟早要还的，在国赛就在遇到了它，国赛的时候我找到了别人的exp，0ctf-2018的题目一把梭了。在赛后好好研究了一下这个题目，发觉这类题型就是改改exp就可以通杀，发觉很舒服做这种题。好了，话不多说，开始正文：  
没有leak，如何做呢，ctf-wiki高级ROP了解一波
## 原理
要想弄懂这个 ROP 利用技巧，需要首先理解 ELF 文件的基本结构，以及动态链接的基本过程，请参考 executable 中 elf
对应的介绍。这里我只给出相应的利用方式。
我们知道在 linux 中是利用_dl_runtime_resolve(link_map_obj, reloc_index)
来对动态链接的函数进行重定位的。那么如果我们可以控制相应的参数以及其对应地址的内容是不是就可以控制解析的函数了呢？答案是肯定的。具体利用方式如下
    控制程序执行 dl_resolve 函数
        给定 Link_map 以及 index 两个参数。
        当然我们可以直接给定 plt0 对应的汇编代码，这时，我们就只需要一个 index 就足够了。
    控制 index 的大小，以便于指向自己所控制的区域，从而伪造一个指定的重定位表项。
    伪造重定位表项，使得重定位表项所指的符号也在自己可以控制的范围内。
    伪造符号内容，使得符号对应的名称也在自己可以控制的范围内。
此外，这个攻击成功的很必要的条件
    dl_resolve 函数不会检查对应的符号是否越界，它只会根据我们所给定的数据来执行。
    dl_resolve 函数最后的解析根本上依赖于所给定的字符串。
注意：
    符号版本信息
        最好使得 ndx = VERSYM[(reloc->r_info) >> 8] 的值为 0，以便于防止找不到的情况。
    重定位表项
        r_offset 必须是可写的，因为当解析完函数后，必须把相应函数的地址填入到对应的地址。
**相信各位看官在看到这里的时候跟我一样懵，因为我也不了解具体原理当时，看着这段话不知道什么意思，所以我就先去了解elf的基本结构以及动态链接的基本过程（PS:我也没完整看完，枯燥乏味，通过调试一点点理解过程的)**  
这里先说下动态延迟绑定机制：  
就是一开始把所有的函数都链接实际是一种浪费，因此采用延迟绑定技术,核心是第一次用的时候进行绑定，没有用到不进行绑定，这样用来加快程序的运行速度  
所以第一次调用的这个函数的时候，程序会去查表，然后利用_dl_runtime_resolve将正确的地址写入got.plt表里，下次查询的时候就直接跳到正确的地址处  
先看下调试部分吧
    ► 0x8048390                    jmp    dword ptr [PI:EMAIL] 
       0x8048396                  push   0
       0x804839b                 jmp    0x8048380
        ↓
       0x8048380                              push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] 
       0x8048386                              jmp    dword ptr [0x804a008] 
        ↓
       0xf7fe96c0        push   eax
       0xf7fe96c1      push   ecx
       0xf7fe96c2      push   edx
       0xf7fe96c3      mov    edx, dword ptr [esp + 0x10]
       0xf7fe96c7      mov    eax, dword ptr [esp + 0xc]
       0xf7fe96cb     call   _dl_fixup 
这是我在read@plt处下断，
  * 你看他第一次调用的时候，PI:EMAIL里存的是下一条指令的地址，也就是0x8048396，
  * 然后将read函数在表里的偏移push进去，这里push的是0，
  * 然后跳到plt0里，将linkmap push进去，然后跳到_dl_runtime_resolve进行解析，解析后的地址将会写入到第一次的PI:EMAIL表里，然后将程序的控制权交给解析出来的地址指向的函数
**而我们的攻击方式就是伪造所谓的表，然后将我们伪造表的偏移当参数传入，这样的话，他就会解析到我们想需要的函数了**  
这只是通俗易懂的说法，实际伪造这个表起来不是那么简单，除非你理解了整个过程  
我将ctf-wiki上的内容摘抄过来了，帮助你们理解，他是进行了完整的解释，我感觉太长了，不过我理解过后看的话，看懂了。。。
## elf部分的关键点（来自ctf-wiki)
动态链接器和程序按照如下方式解析过程链接表和全局偏移表的符号引用。
  1. 当第一次建立程序的内存镜像时，动态链接器将全局偏移表的第二个和第三个项设置为特殊的值，下面的步骤会仔细解释这些数值。
  2. 如果过程链接表是位置独立的话，那么 GOT 表的地址必须在 ebx 寄存器中。每一个进程镜像中的共享目标文件都有独立的 PLT 表，并且程序只在同一个目标文件将控制流交给 PLT 表项。因此，调用函数负责在调用 PLT 表项之前，将全局偏移表的基地址设置为寄存器中。
  3. 这里举个例子，假设程序调用了 name1，它将控制权交给了 lable .PLT1。
  4. 那么，第一条指令将会跳转到全局偏移表中 name1 的地址。初始时，全局偏移表中包含 PLT 中下一条 pushl 指令的地址，并不是 name1 的实际地址。
  5. 因此，程序将一个重定向偏移（reloc_index）压到栈上。重定位偏移是 32 位的，并且是非负的数值。此外，重定位表项的类型为 R_386_JMP_SLOT，并且它将会说明在之前 jmp 指令中使用的全局偏移表项在 GOT 表中的偏移。重定位表项也包含了一个符号表索引，因此告诉动态链接器什么符号目前正在被引用。在这个例子中，就是 name1 了。
  6. 在压入重定位偏移后，程序会跳转到 .PLT0，这是过程链接表的第一个表项。pushl 指令将 GOT 表的第二个表项 (got_plus_4 或者 4(%ebx)，当前 ELF 对象的信息) 压到栈上，然后给动态链接器一个识别信息。此后，程序会跳转到第三个全局偏移表项 (got_plus_8 或者 8(%ebx)，指向动态装载器中_dl_runtime_resolve 函数的指针) 处，这将会将程序流交给动态链接器。
  7. 当动态链接器接收到控制权后，他将会进行出栈操作，查看重定位表项，找到对应的符号的值，将 name1 的地址存储在全局偏移表项中，然后将控制权交给目的地址。
  8. 过程链接表执行之后，程序的控制权将会直接交给 name1 函数，而且此后再也不会调用动态链接器来解析这个函数。也就是说，在 .PLT1 处的 jmp 指令将会直接跳转到 name1 处，而不是再次执行 pushl 指令。
在 Linux 的设计中，第一个之后的 PLT 条目进行了如下的函数调用
_dl_runtime_resolve(link_map_obj, reloc_index)
这里以 32 位为例（64 位类似），具体的过程如下
  * 根据 reloc_index 计算相应的重定位表项：Elf32_Rel *reloc = JMPREL + index
  * 根据得到的重定位表项的 r_info 得到对应的符号在符号表中的索引：(reloc->r_info)>>8
  * 继而得到对应的符号：Elf32_Sym *sym = &SYMTAB[((reloc->r_info)>>8)]
  * 判断符号的类型是否为 R_386_JMP_SLOT：assert (((reloc->r_info)&0xff) == 0x7 )
  * if ((ELFW(ST_VISIBILITY) (sym->st_other), 0) == 0)
    * if (sym->st_other) & 3 == 0 )
    * 判断该符号是否已经解析过了，如果解析过，就不会再去执行 lookup 操作。
  * 得到符号的版本，如果 ndx 为 0 的话，会直接使用 local symbol。
  *     * uint16_t ndx = VERSYM[(reloc->r_info) >> 8]
  *     * r_found_version *version = &l->l_version[ndx]
  * 根据 name 来寻找相应函数在库中的地址。
    * name = STRTAB + sym->st_name
## 解析
刚刚我说了攻击方式，接下来我们就要伪造偏移跟表了  
简单来说，ret2dllruntime这个攻击方式他要利用三个表:
  1. .rel.plt 
  2. .dynsym
  3. .dynstr
  4. 他先从.rel.plt表里找到某个函数在dynsym里的偏移
  5. 然后从.dynsym符号表里找寻该函数在.dynstr表里的偏移
  6. 在从.dynstr表里找到具体的函数对应的字符串，然后将这个字符串解析成函数  
所以如果我们可以找到这个表，改掉这个表里的字符串，按理说也是可以进行调用成功的  
贴张图，这是整体结构部分图
### 第一个表是.rel.plt也就是ELF REL Relocation Table
这个表里有个结构体，存储了写入位置和具体偏移量
    LOAD:0804831C ; ELF REL Relocation Table
    LOAD:0804831C                 Elf32_Rel  ; R_386_GLOB_DAT __gmon_start__
    LOAD:08048324                 Elf32_Rel  ; R_386_COPY stderr
    LOAD:0804832C                 Elf32_Rel  ; R_386_COPY stdin
    LOAD:08048334                 Elf32_Rel  ; R_386_COPY stdout
    LOAD:0804833C ; ELF JMPREL Relocation Table
    LOAD:0804833C                 Elf32_Rel  ; R_386_JMP_SLOT read
    LOAD:08048344                 Elf32_Rel  ; R_386_JMP_SLOT alarm
    LOAD:0804834C                 Elf32_Rel  ; R_386_JMP_SLOT __libc_start_main
    LOAD:08048354                 Elf32_Rel  ; R_386_JMP_SLOT setvbuf
    LOAD:08048354 LOAD            ends
  * 前面是写入的位置，而107代表的是偏移为1的导入函数，07代表的是导入函数的意思，所以你在exp里会看到>8位这种操作，就是去掉07或者增加07
    typedef struct{
               Elf32_Addr r_offset;
               Elf32_Word r_info;
    }Elf32_Rel;
  * 他实际是个结构体，每个都由r_offset和r_info组成，r_info存的也是偏移，是在dynsym表里的偏移,例如read，他在这里是107h就是偏移为1的导入函数，从ELF Symbol Table里找
### 第二个表是.dynsym也就是ELF Symbol Table
    LOAD:080481DC ; ELF Symbol Table
    LOAD:080481DC                 Elf32_Sym 
    LOAD:080481EC                 Elf32_Sym  ; "read"
    LOAD:080481FC                 Elf32_Sym  ; "alarm"
    LOAD:0804820C                 Elf32_Sym  ; "__gmon_start__"
    LOAD:0804821C                 Elf32_Sym 
    LOAD:0804822C                 Elf32_Sym  ; "setvbuf"
    LOAD:0804823C                 Elf32_Sym 
    LOAD:0804824C                 Elf32_Sym 
    LOAD:0804825C                 Elf32_Sym 
    LOAD:0804826C                 Elf32_Sym 
在这个表里查到也就是第一个函数，没毛病，其实这个表每个项也是一个结构体
    typedef struct