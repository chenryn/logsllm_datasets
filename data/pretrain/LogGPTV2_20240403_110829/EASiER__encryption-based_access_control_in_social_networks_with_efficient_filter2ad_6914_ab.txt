Otherwise DecryptNode returns ⊥. The rest of the de-
cryption is the same as CP-ABE. For each child z of a
non-leaf node x, it calculates Fz = e(g0, g1)rqz (0). Let Sx
be a threshold-sized arbitrary set of children of x, such
that Fz 6= ⊥. Then interpolation and pairings are used
to calculate e(g0, g1)αs, and hence retrieve M .
The construction to revoke one or more attributes from
a key is almost similar to the one just described. From
high level, the primary diﬀerence is that, instead of using
a single polynomial in M K, a KA uses a diﬀerent poly-
nomial for each of the attributes she deﬁnes. Each of the
attribute-components in the secret key SK is blinded by the
corresponding polynomial, and the P XK contains a list of
revoked users and the secrets corresponding to the revoked
attributes of each user. The algorithms work as before. Let
Y 0 be the set of attributes that a KA deﬁnes, Y be the set
of revoked attributes where Y ⊆ Y 0, and ty be the number
of users from whom attribute y ∈ Y is revoked.
1 , ∀y ∈ Y 0 Py(0)
M K = β, gα
SK = (cid:16)D, Dj = gr
P XK = ∀y ∈ Y, ∀i ∈ ty : {hui, Py(ui)i}
1 · H(j)rj Pj (0), D00
j = (D0
j)Pj (uk)(cid:17)
4.
IMPLEMENTATION AND EXPERI-
MENTAL EVALUATION
We implemented the constructions in EASiER, as de-
scribed in Section 3. Our implementation involves intro-
ducing new components as well as modifying diﬀerent parts
of the CP-ABE toolkit1. The current implementation sup-
ports complete key revocation. Similar techniques can be
applied to modify it to perform attribute revocation.
The implementation uses MNT curves [11] with a 159-
bit base ﬁeld. All the experiments were carried out on
a 2.40 GHz Intel Core 2 Duo, 3 GB memory, and run-
ning Ubuntu 8.10. We also implemented a Facebook ap-
plication to provide the functionality on a social network.
The prototype Facebook application can be found at http:
//apps.facebook.com/myeasier.
4.1 Performance Analysis
We provide some information on the performance evalu-
ation of EASiER, and compare it with CP-ABE. Though
CP-ABE implementation uses symmetric pairing, we use
asymmetric pairing for both EASiER and CP-ABE in our
implementation. This provides security by preventing key
and ciphertext components exchange. The results are shown
in Figure 2.
Key generation time is linear with number of attributes
both in CP-ABE and EASiER. Since it does an extra expo-
nentiation, and generates an extra component for each at-
tribute in EASiER, the result is justiﬁed. To test encryption
and decryption, we randomly generated 10 diﬀerent policies
for each of the desired number of leaves (1, 5, 10, . . . 100).
Encryption (not shown in the Figure) is also linear with
respect to the number of leaf nodes in the policy. Since
no change was made to CP-ABE encryption, both take the
same amount of time. Decryption (Figure 2b shown with
95% conﬁdence interval) depends on the policy used in en-
cryption and the attributes involved. We generated a de-
cryption key with 100 attributes that satisﬁes all the policies
used. The line marked EASiER-naive shows the decryption
time when no optimization was used. Recursive DecryptN-
ode, and arbitrary number of leaves were used to satisfy the
threshold gates in the policies. The lines marked EASiER,
and CP-ABE show the results when an optimization imple-
mented in CP-ABE was used to ensure that the minimum
number of leaves were used in DecryptNode. The required
time is still below 1 second though recursive DecryptNode
1http://acsc.cs.utexas.edu/cpabe/
was used. We expect better results with further optimiza-
tion.
EASiER involves two extra costs before decryption: re-
keying the proxy and converting the ciphertext components
speciﬁc to the leaves in the policy. We perform an optimiza-
tion by allowing the proxy to pre-calculate a portion of the
λi’s in ProxyRekey. The re-keying results (not shown in
Figure) show that, even for 500 revoked users, the time re-
quired is about 1.4 seconds. This should be compared with
the time required to rekey the rest of a group, i.e., generate
a new key for everyone, when even one person in the group
is revoked.
i = Y
λ0
ui,uj ∈RL,i6=j
uj
(uj − ui)
, and l0
i = λ0
iP (ui)
Conversion primarily involves one exponentiation for each
of the leaf-speciﬁc ciphertext component. It also calculates
λk for the requester uk, and completes the λis for each of
the revoked users. With the optimization, the proxy needs
to do 1 multiplication per revoked user to calculate λi. It
works as follows:
uk
uk
P (ui) = λiP (ui),
li = l0
i
= λ0
i
(uk − ui)
(uk − ui)
∀ ui ∈ RL, uk 6∈ RL
The time to compute the exponentiations dominates the
time to do t multiplications, hence the results are essentially
linear in the number of leaf nodes. Figure 2c shows the con-
version time for 500 revoked users. We expect the proxy to
be more powerful in terms of computing, and hence rekey-
ing, and conversion should be faster in practice. A user re-
questing decryption only faces the conversion time shown in
Figure 2c along with the decryption time mentioned earlier.
Table 1: Component Size
Component
EASiER (bytes)
CP-ABE (bytes)
Public Key
Master Key
Private Key
Ciphertext
Proxy Key
C 00
y
1316
152 + (t + 1)24
128 + (a + 212)n
1316
148
128 + (a + 168)n
168 + 8i + (176 + a)l
168 + 8i + (176 + a)l
24t
124l
NA
NA
4.2 Component Size and Communication
Overhead
Table 1 shows the sizes of the components involved in the
system, calculated based on group members and elements
they consist of. t is the degree of polynomial, n is the num-
ber of attributes in private key, and a is the string length
of an attribute. Elements from G0, G1, G2, and Zp require
44, 124, 124, and 24 bytes respectively to represent. Pub-
lic Key includes a string describing the pairing used (980
bytes).
y, and receiving C 00
Users communicate with the proxy for conversion by send-
ing C 0
y . These are represented using el-
ements from G1. This requires 124 bytes to represent (120
for the actual data, and 4 for the variable size). Hence, con-
version of a ciphertext with l leaf nodes in the policy will
need to transfer 124l bytes each way. The user also sends
uk, and receives λk back. These are represented using Zp
which requires 24 bytes. Therefore, we conclude that the
communication overhead is reasonable for OSN users.
)
d
n
o
c
e
s
(
e
m
T
n
o
i
i
t
a
r
e
n
e
G
y
e
K
e
a
v
i
r
t
P
 7
 6
 5
 4
 3
 2
 1
 0
EASiER
CP-ABE
)
d
n
o
c
e
s
(
e
m
T
n
o
i
i
t
p
y
r
c
e
D
 0
 10  20  30  40  50  60  70  80  90  100
Attributes in Private Key
(a) Key Generation
 1.8
 1.6
 1.4
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
EASiER
CP-ABE
EASiER Naive
)
d
n
o
c
e
s
(
I
i
e
m
T
n
o
s
r
e
v
n
o
C
 0  10  20  30  40  50  60  70  80  90  100
Leaf Nodes in Policy
(b) Decryption
 1.4
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
 0  10  20  30  40  50  60  70  80  90  100
Leaf Nodes in Policy
(c) Conversion in EASiER
Figure 2: EASiER Performance Analysis
5. RELATED WORK
In most of the existing social network privacy architec-
tures settings access control is performed via encryption,
but none of the schemes focus on the issue of eﬃcient user
or attribute revocation. The existing revocation schemes
have their limitations too.
Persona [1]
is the state-of-the-art decentralized archi-
tecture for social network privacy. EASiER is based on
Persona, but it also provides an eﬃcient mechanism for
user/attribute revocation, thereby avoiding the overhead of
re-keying with group members and re-encryption of old data.
In ﬂyByNight [8], users encrypt sensitive messages using
Javascript on the client side, such that the sensitive data
cannot be viewed by the OSN servers. ﬂyByNight relies
on the OSN provider for key management and is vulnera-
ble to active attacks by the provider. The key feature of
NOYB [5], an architecture for OSN is a general cipher and
encoding scheme that preserves the semantic properties of
data such that it can be processed by the social network
provider oblivious to encryption. FaceCloak [9] has a similar
goal, but opts to store the encrypted data on a third-party
server, with fake data stored at the OSN provider.
Liang et al.
[7] propose a proxy-based re-encryption
scheme which can transform a ciphertext encrypted with one
speciﬁc policy to one encrypted with another. It is infeasi-
ble to apply their techniques to our problem, as a separate
proxy key would be required for every possible encryption
policy. Boldyreva et al. [3] propose a revocation scheme for
key-policy ABE where a single key update is broadcast to
all users, but a revoked user maintains access to previously
encrypted data. Finally, Yu et al. [16] deﬁne an architec-
ture for revocation in CP-ABE that requires the re-issuing
of keys and re-encryption of existing data, but delegates this
task to a proxy server, rather than the authority; it also does
not consider the issue of proxy server compromise.
6. CONCLUSION
We present an access control architecture for OSNs,
named EASiER that supports eﬃcient revocation in ABE.
We achieve this revocation scheme by introducing a mini-
mally trusted proxy, leveraging ideas from a group commu-
nication scheme, and combining it with ABE. Although we
showed our approach in an OSN setting, it can be applied to
any context where ABE is implemented. We implemented
the scheme and compared it with Bethencourt et al.’s CP-
ABE. Our results show that EASiER is scalable in terms of
computation and communication for OSNs; accordingly, we
have built a prototype application in the Facebook OSN to
provide such encryption. Our future plans include an inves-
tigation into alternate CP-ABE constructs to be used with
EASiER in order to achieve stronger security guarantees.
7. REFERENCES
[1] R. Baden, A. Bender, N. Spring, B. Bhattacharjee,
and D. Starin. Persona: An online social network with
user-deﬁned privacy. In SIGCOMM, 2009.
[2] J. Bethencourt, A. Sahai, and B. Waters.
Ciphertext-policy attribute-based encryption. In IEEE
S & P, 2007.
[3] A. Boldyreva, V. Goyal, and V. Kumar. Identity-based
encryption with eﬃcient revocation. In CCS, 2008.
[4] R. Gross and A. Acquisti. Information revelation and
privacy in online social networks (the Facebook case).
In WPES, 2005.
[5] S. Guha, K. Tang, and P. Francis. NOYB: Privacy in
online social networks. In WOSN, 2008.
[6] T. N. Jagatic, N. A. Johnson, M. Jakobsson, and
F. Menczer. Social phishing. Commun. ACM,
50(10):94–100, 2007.
[7] X. Liang, Z. Cao, H. Lin, and J. Shao. Attribute based
proxy re-encryption with delegating capabilities. In
ASIACCS, 2009.
[8] M. M. Lucas and N. Borisov. ﬂyByNight: Mitigating
the privacy risks of social networking. In WPES, 2008.
[9] W. Luo, Q. Xie, and U. Hengartner. FaceCloak: An
architecture for user privacy on social networking
sites. In PASSAT, 2009.
[10] A. Mislove, M. Marcon, K. P. Gummadi, P. Druschel,
and B. Bhattacharjee. Measurement and analysis of
online social networks. In IMC, 2007.
[11] A. Miyaji, M. Nakabayashi, and S. Takano. New
explicit conditions of elliptic curve traces for
FR-reduction. IEICE Trans. Fundamentals,
E84-A(5):1234–1243, 2001.
[12] M. Naor and B. Pinkas. Eﬃcient trace and revoke
schemes. In FC, 2001.
[13] M. O’Connor. Facebook revealed private email
addresses last night.
http://gawker.com/5505967/facebook-revealed-
private-email-addresses-last-night, Mar.31 2010.
[14] A. Shamir. How to share a secret. Commun. ACM,
22(11):612–613, 1979.
[15] P. Wong. Conversations about the Internet #5:
Anonymous Facebook employee. The Rumpus, 2010.
[16] S. Yu, C. Wang, K. Ren, and W. Lou. Attribute based
data sharing with attribute revocation. In ASIACCS,
2010.