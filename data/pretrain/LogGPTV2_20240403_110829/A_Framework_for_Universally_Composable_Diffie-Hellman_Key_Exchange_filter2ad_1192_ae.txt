### Optimized Text

---

**Key-Use Functionality (F_MA_key-use)**

The functionality F_MA_key-use manages the forwarding of messages to and from corrupted users (in role `r`) between the I/O tape `tr` and the network tape. It does not grant the adversary access to the cryptographic subroutine `Fcrypto`. This ensures perfect forward secrecy, as the adversary should not gain access to any keys after the session is closed, even if one of the parties is compromised.

**User Corruption Status**

A user `(pid, lsid, r)` can query its corruption status by sending a `Corrupt?` message. If the state `(pid, lsid, r) = ‚ä•`, F_MA_key-use responds immediately with the current corruption status. Otherwise, it first asks the adversary whether they want to corrupt the user by sending a `CorruptUser?` message. If the adversary responds with `true`, F_MA_key-use sets the state to `corrupted` and then returns the updated corruption status to the user.

**Global Session Management**

The adversary can also declare two local sessions to be part of a global session and decide when a user has successfully established a key:

- The adversary may send a `GroupSession` message with parameters `(pid_I, lsid_I)` and `(pid_R, lsid_R)`. If both states are either `started` or `corrupted`, and the users are not yet part of a global session, F_MA_key-use sets their state to `inSession` and stores that they are in the same global session. It then uses the `GetPSK` command of `Fcrypto` to get pointers to an unknown key `k` for the two users. If the key is corrupted, F_MA_key-use requests another key until it gets an uncorrupted one. Finally, it sends `OK` to the adversary.
- The adversary may send a `FinishKE` message to complete the key exchange for an uncorrupted user. This message is accepted only if the user is in a session with its intended partner. F_MA_key-use then sets the state to `exchangeFinished` and outputs `(Established, ptr)`, where `ptr` is the pointer to the previously established session key `k`.

**Unilateral Authentication (F_UA_key-use)**

The functionality F_UA_key-use is similar but models unilateral authentication of the responder only. It provides the same guarantees to the initiator as F_MA_key-use, while allowing the responder to accept any connection without authentication. The differences include:

- Responders do not indicate an intended session partner when starting a key exchange.
- The adversary may instruct F_UA_key-use to output a key for an uncorrupted responder instance that has already started a key exchange, even if the instance is not yet part of a global session.
- If an honest responder instance is instructed to output a session key, no checks regarding the identity of the session partner are performed. Additionally, unless the responder is in a global session with an honest initiator, the session key may be corrupted or marked known.
- Responder instances that have already output a key may still be mapped into a global session if they are not yet part of one and their session key is uncorrupted/unknown. Their session partner will receive the same session key.

**Discussion**

F_MA_key-use assumes that responders know the identity of the initiator at the start of the key exchange. A variant could be defined where the responder learns the identity only at the end. However, the environment can choose the expected identities of peers, so this is not a significant limitation.

Both F_MA_key-use and F_UA_key-use require the corruption status of instances to remain unchanged during the key exchange. This simplifies the use of these functionalities by higher-level protocols, as session keys are typically short-lived, limiting the window for corruption.

These functionalities differ from those proposed in [11] in several important aspects: unilateral authentication, perfect forward secrecy, and support for more cryptographic operations. They also relax strict security requirements, allowing for the analysis of a wider variety of protocols.

### Case Studies

We analyze the ISO 9798-3 protocol and the SIGMA protocol with identity protection, both designed for mutually authenticated key exchange. We also analyze one mode of OPTLS for unilaterally authenticated key exchange, which served as the basis for the key exchange protocol in TLS 1.3 draft-09, and point out a subtle bug in the original game-based proof.

**ISO 9798-3 Protocol**

The ISO 9798-3 protocol, based on Diffie-Hellman key exchange and signatures for mutual authentication, is modeled using two machines, MI and MR, for the initiator and responder roles, respectively. These machines use Fcrypto for all cryptographic operations. Each instance of MI/MR executes the protocol according to Figure 1, ensuring fresh exponents do not collide and deriving a session key of type `unauthenc-key`.

**Security Proof**

The following theorem states that the ISO protocol is a secure, universally composable, mutually authenticated key exchange protocol.

**Theorem 3:**
Let MI and MR be machines modeling the ISO protocol, let Fcrypto and F_crypto be two versions of the ideal crypto functionality with the same parameters, and let F_MA_key-use be the ideal functionality for mutually authenticated key exchanges with parameter `tkey = unauthenc-key`. Then:
\[ \text{MI} | \text{MR} | \text{Fcrypto} \leq_R \text{F_MA_key-use} | \text{F_crypto} \]

**Proof:**
We define a simulator S and show that:
\[ E | \text{MI} | \text{MR} | \text{Fcrypto} \equiv E | S | \text{F_MA_key-use} \]
for all environments \( E \in \text{EnvR(MI | MR | Fcrypto)} \). The simulator S internally simulates the protocol and keeps the corruption statuses synchronized. When initializing Fcrypto, S first initializes F_crypto and ensures the correct behavior of the protocol.

---

This optimized text is more structured, clear, and professional, making it easier to understand the functionalities and their applications.