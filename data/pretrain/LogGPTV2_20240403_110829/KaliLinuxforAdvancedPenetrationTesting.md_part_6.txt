Although IPv4 seems to permit a large address space, freely available IP addresses
were exhausted several years ago, forcing the employment of NAT and DHCP to
increase the number of available addresses. A more permanent solution has been
found in the adoption of an improved IP addressing scheme, IPv6. Although it
constitutes less than five percent of Internet addresses, its usage is increasing, and
penetration testers must be prepared to address the differences between IPv4 and IPv6.
In IPv6, the source and destination addresses are 128 bits in length, yielding 2128
possible addresses, that is, 340 undecillion addresses!
The increased size of the addressable address space presents some problems
to penetration testers, particularly when using scanners that step through the
available address space looking for live servers. However, some features of the
IPv6 protocol have simplified discovery, especially the use of ICMPv6 to identify
active link-local addresses.
It is important to consider IPv6 when conducting initial scans for the
following reasons:
• There is uneven support for IPv6 functionality in testing tools, so the tester
must ensure that each tool is validated to determine its performance and
accuracy in IPv4, IPv6, and mixed networks.
• Because IPv6 is a relatively new protocol, the target network may contain
misconfigurations that leak important data; the tester must be prepared to
recognize and use this information.
• Older network controls (firewalls, IDS, and IPS) may not detect IPv6.
In such cases, penetration testers can use IPv6 tunnels to maintain covert
communications with the network, and exfiltrate the data undetected.
Kali includes several tools developed to take advantage of IPv6 (most comprehensive
scanners, such as nmap, now support IPv6), some of which are as follows; tools that
are particular to IPv6 were largely derived from the THC-IPv6 Attack Toolkit.
Application Description
dnsdict6 Enumerates subdomains to obtain IPv4 and IPv6 addresses (if present)
using a brute force search based on a supplied dictionary file or its own
internal list.
dnsrevenum6 Performs reverse DNS enumeration given an IPv6 address.
[ 53 ]
Identifying the Target – Passive Reconnaissance
The execution of the dnsdict6 command is shown in the following screenshot:
Mapping the route to the target
Route mapping was originally used as a diagnostic tool that allows you to view
the route that an IP packet follows from one host to the next. Using the time to live
(TTL) field in an IP packet, each hop from one point to the next elicits an ICMP
TIME_EXCEEDED message from the receiving router, decrementing the value in
the TTL field by 1. The packets count the number of hops and the route taken.
From an attacker's, or penetration tester's perspective, the traceroute data yields
the following important data:
• The exact path between the attacker and the target
• Hints pertaining to the network's external topology
• Identification of accessing control devices (firewalls and
packet-filtering routers) that may be filtering attack traffic
• If the network is misconfigured, it may be possible to identify
internal addressing
Using a web-based traceroute (www.traceroute.org), it is
possible to trace various geographic origin sites to the target network.
These types of scans will frequently identify more than one different
network connecting to the target, which is information that could be
missed by conducting only a single traceroute from a location close
to the target. Web-based traceroute may also identify multihomed
hosts which connect two or more networks together. These hosts are
an important target for attackers, because they drastically increase the
attack surface leading to the target.
[ 54 ]
Chapter 2
In Kali, traceroute is a command-line program that uses ICMP packets to map the
route; in Windows, the program is tracert.
If you launch traceroute from Kali, it is likely that you will see most hops filtered
(data is shown as * * *). For example, traceroute from the author's present location
to www.google.com would yield the following:
However, if the same request was run using tracert from the Windows command
line, we would see the following:
Not only do we get the complete path, but we can also see that www.google.com is
resolving to a slightly different IP address, indicating that load balancers are in effect
(you can confirm this using Kali's lbd script; however, this activity may be logged by
the target site).
The reason for the different path data is that, by default, traceroute used UDP
datagrams while Windows tracert uses ICMP echo request (ICMP type 8).
Therefore, when completing a traceroute using Kali tools, it is important to use
multiple protocols in order to obtain the most complete path, and to bypass packet-
filtering devices.
[ 55 ]
Identifying the Target – Passive Reconnaissance
Kali provides the following tools for completing route traces:
Application Description
hping3 This is a TCP/IP packet assembler and analyzer. This supports TCP,
UDP, ICMP, and raw-IP and uses a ping-like interface.
intrace This enables users to enumerate IP hops by exploiting existing TCP
connections, both initiated from the local system or network, or from
local hosts. This makes it very useful for bypassing external filters
such as firewalls. intrace is a replacement for the less reliable 0trace
program.
trace6 This is a traceroute program that uses ICMP6.
hping3 is one of the most useful tools due to the control it gives over packet type,
source packet, and destination packet. For example, Google does not allow ping
requests. However, it is possible to ping the server if you send the packet as a TCP
SYN request.
In the following example, the tester attempts to ping Google from the command line.
The returned data identifies that www.google.com is an unknown host; Google is
clearly blocking ICMP-based ping commands. However, the next command invokes
hping3, instructing it to do the following:
1. Send a ping-like command to Google using TCP with the SYN flag set (-S).
2. Direct the packet to port 80; legitimate requests of this type are rarely
blocked (- p 80).
3. Set a count of sending three packets to the target (-c 3).
[ 56 ]
Chapter 2
To execute the previous steps, use the commands as shown in the
following screenshot:
The hping3 command successfully identifies that the target is online, and provides
some basic routing information.
Obtaining user information
Many penetration testers gather user names and e-mail addresses, as this
information is frequently used to log on to targeted systems.
The most commonly employed tool is the web browser, which is used to manually
search the target organization's website as well as third-party sites such as LinkedIn
or Jigsaw.
Some automated tools included with Kali can supplement the manual searches.
E-mail addresses of former employees can still be of use. When
conducting social engineering attacks, directing information requests to
a former employee usually results in a redirect that gives the attacker
the "credibility" of having dealt with the previous employee. In addition,
many organizations do not properly terminate employee accounts, and it
is possible that these credentials may still give access to the target system.
[ 57 ]
Identifying the Target – Passive Reconnaissance
Gathering names and e-mail addresses
The theharvester tool is a Python script that searches through popular search
engines and other sites for e-mail addresses, hosts, and subdomains.
Using theharvester is relatively simple as there are only a few command
switches to set. The options available are:
• -d: This identifies the domain to be searched; usually the domain or
target's website.
• - b: This identifies the source for extracting the data; it must be one of
the following:
Bing, BingAPI, Google, Google-Profiles, Jigsaw, LinkedIn, People123, PGP,
or All
• - l: This limit option instructs theharvester to only harvest data from a
specified number of returned search results.
• -f: This option is used to save the final results to an HTML and an XML file.
If this option is omitted, the results will be displayed on the screen and
not saved.
The following screenshot shows the results of a simple search of the Google indexes
for the domain digitaldefence.ca:
[ 58 ]
Chapter 2
Gathering document metadata
Document metadata refers to the information that is appended to documents so that
applications can manage them during the creation and storage processes. Examples
of metadata typically attached to documents include the following:
• The company or person who owns the application used to create
the document
• The name of the document's author
• The time and date that the document was created
• The date when the file was last printed or modified; in some cases,
it will identify who made the modifications
• The location on the computer network where the document was created
• Some files, especially those created by cameras or mobile devices, may
include geographic tags that identify where the image was created
Metadata is not immediately visible to the end user, so most documents are
published with the metadata intact. Unfortunately, this data leakage can reveal
information that can be used by a tester or attacker to facilitate an attack. At a
minimum, testers and attackers can harvest user names by comparing them to data
in documents; they can identify persons associated with particular data types, such
as annual financial reports or strategic planning.
As mobile devices become more common, the risks associated with geographical
metadata have increased. Attackers look for locations (cottages, hotels, and
restaurants that are frequently visited) as sites that may allow them to launch attacks
against users who have let their guard down outside the corporate perimeter. For
example, if an employee of the target organization regularly posts pictures to a
social media website while waiting for a commuter train, an attacker may target that
employee for a physical attack (theft of the mobile device), wireless attack, or even
peek over the victim's shoulder to note the username and password.
[ 59 ]
Identifying the Target – Passive Reconnaissance
On Kali, the tool Metagoofil performs a Google search to identify and download
a target website's documents (doc, docx, pdf, pptx, xls, and xlsx) and extract
usernames, a software version, path storage names, and a server, or workstation
names, as shown in the following screenshot:
Metagoofil downloads the specified number of documents to a temporary folder,
and extracts and organizes the relevant metadata. It also performs this function
against files that have previously been downloaded and are now stored locally.
One of the first returns of Metagoofil is a list of the users that are found.
The following is a screenshot of a truncated list:
[ 60 ]
Chapter 2
Metagoofil also identifies servers and pathnames of the documents. If certain
documents of interest are localized with a particular user (for example, drafts of
financial reports found on an administrative assistant's workstation), that system
can be targeted later during testing, as shown in the following screenshot:
Profiling users for password lists
So far, you have learned to use passive reconnaissance to collect names and
biographical information for users of the target being tested; this is the same process
used by hackers. The next step is to use this information to create password lists
specific to the users and the target.
Lists of commonly used passwords are available for download, and are stored locally
on Kali in the /usr/share/wordlists directory. These lists reflect the choices of a
large population of users, and it can be time consuming for an application to attempt
to use each possible password before moving on to the next password in the queue.
Fortunately, Common User Password Profiler (CUPP) allows the tester to generate
a wordlist that is specific to a particular user. CUPP was present on Backtrack 5r3;
however, it will have to be downloaded for use on Kali. To obtain CUPP, enter the
following command:
git clone https://github.com/Mebus/cupp.git
This will download CUPP to the local directory.
CUPP is a Python script, and can be simply invoked from the CUPP directory by
entering the following command:
root@kali:~# python cupp.py -i
[ 61 ]
Identifying the Target – Passive Reconnaissance
This will launch CUPP in the interactive mode, which prompts the user for specific
elements of information to use in creating wordlist. An example is shown in the
following screenshot:
When the interactive mode has completed creating wordlist, it is placed in the
CUPP directory.
[ 62 ]
Chapter 2
Summary
The first real step in the attack process or kill chain is to conduct reconnaissance to
identify the target and potential attack routes. Passive reconnaissance assesses data
that is publicly available. This is a stealthy assessment—the IP address or activities
of the attacker are almost indistinguishable from normal access. Nevertheless, this
information can be critical when conducting social engineering attacks, or facilitating
other attack types.
In the next chapter, we will assess the types of reconnaissance that are more active.
Although these techniques produce more information, there is an increased risk of
detection. Therefore, the emphasis will be on advanced stealth techniques.
[ 63 ]
Active Reconnaissance and
Vulnerability Scanning
The objective of the reconnaissance phase is to gather as much information about the
target as possible in order to facilitate the exploitation phase of the kill chain.
We have seen how passive reconnaissance, which is almost undetectable, can yield
a significant amount of information about the target organization and its users.
Active reconnaissance builds on the results of open-source intelligence and passive
reconnaissance, and focuses on using probes to identify the path to the target and
the exposed attack surface of the target. In general, complex systems have a greater
attack surface, and each surface may be exploited and then leveraged to support
additional attacks.
Although active reconnaissance produces more information, and more useful
information, interactions with the target system may be logged, triggering alarms
by protective devices, such as firewalls and intrusion detection systems. As the
usefulness of the data to the attacker increases, so does the risk of detection; this
is shown in the following diagram:
Usefulness of data to Vulnerability
attacker scanning
Operating system,
services,
Infrastructure, application,
host detection, patch-level detection
port scans
OSINT, passive Interaction with target,
reconnaissance chance of detection
Active Reconnaissance and Vulnerability Scanning
To improve the effectiveness of active reconnaissance in providing detailed
information, our focus will be on using stealthy, or difficult to detect, techniques.
In this chapter, you will learn:
• Stealth scanning strategies
• Network infrastructure, host discovery, and enumeration
• Comprehensive reconnaissance applications, especially recon-ng
• Targeted vulnerability scanning
Stealth scanning strategies
The greatest risk of active reconnaissance is the discovery by the target. Using the
tester's time and data stamps, the source IP address, and additional information,
the target can identify the source of the incoming reconnaissance. Therefore, stealth
techniques are employed to minimize the chances of detection.
When employing stealth to support reconnaissance, a tester mimicking the actions of
a hacker will do the following:
• Camouflage tool signatures to avoid detection and triggering an alarm
• Hide the attack within legitimate traffic
• Modify the attack to hide the source and type of traffic
• Make the attack invisible using nonstandard traffic types or encryption
Stealth scanning techniques can include some or all of the following:
• Adjusting source IP stack and tool identification settings
• Modifying packet parameters (nmap)
• Using proxies with anonymity networks (ProxyChains and Tor network)
Adjusting source IP stack and tool
identification settings
Before the penetration tester (or the attacker) begins testing, it must ensure that all
unnecessary services on Kali are disabled or turned off.
[ 66 ]
Chapter 3
For example, if the local DHCP daemon is enabled and is not required, it is possible
for the DHCP to interact with the target system, which could be logged and send
alarms to the target's administrators.
Most testers also disable IPv6 from running on the testing system. This will stop IPv6
from announcing your presence on the target network and ensure that all traffic is
first routed through an IPv4 socks proxy. Disabling IPv6 can be accomplished by
editing the /etc/sysctl.conf file to include the following lines:
#disable ipv6
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable = 1
Some commercial and open source tools (for example, the Metasploit Framework)
tag their packets with an identifying sequence. Although this can be useful in
post-test analysis of a system's event logs (where events initiated by a particular
testing tool can be directly compared to a system's event logs to determine how the
network detected and responded to the attack), it can also trigger certain intrusion
detection systems. Test your tools against a lab system to determine the packets that
are tagged, and either change the tag, or use the tool with caution.
The easiest way to identify tagging is to apply the tool against a newly-created
virtual image as the target, and review system logs for the tool's name. In addition,
use Wireshark to capture traffic between the attacker and target virtual machines,
and then search the packet capture (pcap) files for the any keywords that can be
attributed to the testing tool (name of the tool, vendor, license number, and so on).
The UserAgent in the Metasploit Framework can be changed by modifying the
http_form_field option. From the msfconsole prompt, select the option to use
auxiliary/fuzzers/http/http_form_field, and then set a new useragent, as
shown in the following screenshot:
In this example, UserAgent was set to be Google's indexing spider, the Googlebot.
This is a common automated application that visits and indexes websites, and rarely
attracts attention by the website's owner.
To identify legitimate UserAgents, refer to the examples at
www.useragentstring.com.
[ 67 ]
Active Reconnaissance and Vulnerability Scanning
Modifying packet parameters
The most common approach to active reconnaissance is to conduct a scan against the
target—send defined packets to the target, and then use the returned packets to gain
information. The most popular tool of this type is Network Mapper (nmap).
To use nmap effectively, it must be run with root-level privileges. This is typical of
applications that manipulate packets, which is why Kali defaults to root at the time
of startup.
When attempting to minimize detection, some stealth techniques to avoid detection
and subsequent alarms include the following: