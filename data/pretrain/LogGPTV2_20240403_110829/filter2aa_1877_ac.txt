Argeniss – Information Security & Software
While  researching  the  TapiSrv  issues  with  ProcMon  on  Win2k3  I  noticed  some  strange 
behavior. There were some processes accessing or trying to access the same subkeys and 
values  under  HKEY_CLASSES_ROOT  and  HKEY_USERS\_Classes  registry  keys, 
getting sometimes “NAME NOT FOUND” when trying to access subkyes and values under this 
last key. These subkeys and values were always found under HKEY_CLASSES_ROOT key but 
not  always  under  HKEY_USERS\_Classes  key.  I though  that  this  behavior  was 
because sometimes an application can be installed for only one user and not for all users, if 
this was the case then the information would be on  HKEY_USERS\_Classes key 
and not on HKEY_CLASSES_ROOT key. But that was just a guess.
I  knew  that  HKEY_CLASSES_ROOT  key  is  mostly  used  to  save  information  about 
OLE/COM/DCOM/ActiveX  objects,  processes  read  from  that  key  information  needed  to 
instantiate objects. I looked at the available HKEY_USERS\_Classes keys and I 
found that the keys for Network and Local Service accounts, HKEY_USERS\S-1-5-20_Classes 
and HKEY_USERS\S-1-5-19_Classes respectively, didn’t have any subkeys nor values. This 
was weird. 
One of the process that tried to read values from those registry keys, was svchost.exe running 
DCOM Server Process Launcher service (DcomLaunch), this process runs under Local System 
account. I identified that before a WMI process was ran by DcomLaunch service, this service 
tried to read those registry keys. I saw a possible issue there since HKEY_CLASSES_ROOT key 
can only be modified by highly privileged accounts such Administrators and Local System, but 
HKEY_USERS\_Classes key can also be modified by the account to which the key 
belongs to. It’s worth to mention that HKEY_USERS\S-1-5-20_Classes and HKEY_USERS\S-1-
5-19_Classes can be modified by Network and Local Service accounts respectively. These less 
privileged accounts, Network and Local Service, can modify values that then could be read 
from a high privileged process, in this case DcomLaunch. If DcomLaunch use those values read 
from the mentioned registry keys to perform some actions then that could lead to privilege 
elevation, so there was a possible issue.
I thought that in order to confirm and exploit this possible issue I would have to create the 
same  subkeys  and  values  that  were  read  from  HKEY_CLASSES_ROOT  key  under 
HKEY_USERS\S-1-5-20_Classes key or  HKEY_USERS\S-1-5-19_Classes key, depending which 
of them was being read by DcomLaunch process. Then if these values were used instead of the 
ones read from HKEY_CLASSES_ROOT key I could be able to confirm the issue and exploit it. I 
had a test program that launched a WMI process under Network Service account so I started 
to run tests creating subkeys and values under HKEY_USERS\S-1-5-20_Classes key.
I researched what values were read by DcomLaunch from HKEY_CLASSES_ROOT key and what 
those values were used for. I found that one of the values read was the default value under 
HKEY_CLASSES_ROOT\CLSID\{1F87137D-0E7C-44d5-8C73-4EFFB68962F2}\LocalServer32 
subkey, which was “%systemroot%\system32\wbem\wmiprvse.exe –secured”. wmiprvse.exe 
is the WMI executable file name, I supposed that this value was used to determine what to run 
when WMI was invoked. I thought if I remove the  –secured argument then maybe  WMI 
process won’t be ran protected and I will be able to exploit it again as I did in my previous 
Token  Kidnapping  research.  I  created  HKEY_USERS\S-1-5-20_Classes\CLSID\{1F87137D-
0E7C-44d5-8C73-4EFFB68962F2}\LocalServer32 subkey and set the default value removing “-
secured” argument. ProcMon showed that the new created value was read by DcomLaunch but 
no luck, after removing that argument the WMI process was also ran protected.
Another  value  that  was  accessed  was  AppIDFlags  under  HKEY_CLASSES_ROOT\AppID\
{1F87137D-0E7C-44d5-8C73-4EFFB68962F2} subkey, the value was 0x2. I wondered what 
that value could be used for, searching on MSDN I found some information [3]. 0x2 value is 
used to secure COM servers, this started to look interesting. I though let’s set this value to 0x0 
to  see  what  happens.  I  created  AppIDFlags  value  under  HKEY_USERS\S-1-5-20_Classes\ 
AppID\{1F87137D-0E7C-44d5-8C73-4EFFB68962F2} subkey and set it to 0x0.
After setting the value to 0x0 I ran some tests and my initial thoughts were confirmed, it was 
an issue, I could ran the WMI process unprotected and exploit it as before the Microsoft patch. 
-11-                                       www.argeniss.com
Argeniss – Information Security & Software
Finally I realized that adding AppIDFlags value and setting it to 0x2 was the fix Microsoft 
introduced to patch the old issue on WMI processes [4] and that the new protection could be 
bypassed by exploiting this new issue.
The described issue only affects Windows 2003 and XP since HKEY_USERS\S-1-5-20_Classes 
and HKEY_USERS\S-1-5-19_Classes keys don’t exist anymore on newer Windows versions.
*See Churraskito exploit available with this paper.
Finding more issues
While  I  was  researching  the  already  described  issues,  I  saw  and  realized  about  some 
interesting things. 
There is clearly a design mistake sharing HKEY_USERS\S-1-5-20 and HKEY_USERS\S-1-5-19 
keys between all the processes that run under Network and Local Service accounts. Those 
registry  keys  have  full  control  permissions  for  Network  and  Local  Service  accounts 
respectively, allowing any process running under those accounts to modify those registry keys 
values at will.
For instance a process “X” running under Network Service account can modify some file path 
value with a named pipe while listen on it. Then the process “X” can get an impersonation 
token when another process “Y” running under Network Service account reads that registry 
value and then tries to access the named pipe.
This completely breaks almost all new services protections. It allows access from process “X” 
to  process  “Y”  if  both  run  under  the  same  account  because  once  process  “X”  gets  the 
impersonation token it can be used to access process “Y”.
I also found a couple of minor issues related to high privileged process not dropping privileges 
before trying to access files. HKEY_USERS\UserSID registry key has full control permissions for 
the user to which the key belongs to, meaning that the user can set arbitrary registry values.
Consent.exe (Consent UI for administrative applications) is the program that shows the dialog 
window when you choose to run a program as Administrator in newer Windows versions. This 
program
runs
under
Local
System
account
and
it
reads 
HKEY_USERS\UserSID\AppEvents\Schemes\Apps\.Default\WindowsUAC  registry  key  values. 
These values consist of .WAV file paths that the program uses for playing the sound specified 
by the user for UAC events.  Consent.exe doesn’t drop privileges when accessing the .wav file 
allowing any user with impersonation privileges to impersonate Local System account by using 
the already described named pipe trick.
Windows Defender service has a similar problem as Consent.exe. Windows Defender process 
reads  HKEY_USERS\UserSID\Software\Microsoft\Windows\CurrentVersion\Explorer\User  Shell 
Folder key to get information about different user related folders such as Documents and 
Internet related folders. Windows Defender service runs under Local System account and it 
also doesn’t drop privileges allowing any user with impersonation privileges to impersonate 
Local System account by using the already described named pipe trick.
-12-                                       www.argeniss.com
Argeniss – Information Security & Software
Preventing exploitation
You must avoid running processes under Network Service and Local Service account when 
possible,  try  running  them  as  a  regular  user  with  the  required  privileges.  Examples  of 
processes that commonly run under those accounts and are exposed to attacks are IIS worker 
processes and SQL Server service process.
On IIS don't run ASP .NET web application in full trust, this won't allow web applications to 
impersonate.
On  Windows  7,  Vista  and  2008  R1  &  R2  remove  Users  group  from 
HKLM\Software\Microsoft\Tracing registry key permissions. This will only prevent  exploitation 
from  regular  users  with  impersonation  privileges  but  won't  protect  against  elevation  of 
privileges from Network and Local Service accounts. If you already configured IIS worker 
processes and SQL Server service process to run under regular user accounts then you will be 
safer.
You  must  disable  Telephony  service  (TapiSrv)  if  not  used,  this  will  prevent  elevation  of 
privileges by loading an arbitrary Dll using  lineAddProvider() API on all Windows versions or 
by  editing  HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Telephony\Providers registry 
key on Windows 7, Vista, 2008 R1 & R2.
-13-                                       www.argeniss.com
Argeniss – Information Security & Software
Conclusion
Little and insignificant issues can lead to find more interesting issues. While Windows operating 
systems are becoming the most secure operating systems on earth there are still some issues 
that need attention.
It's possible to elevate privileges on all Microsoft Windows versions, the only requirement is to 
be able to impersonate by the user running the exploit.
On Windows Vista, Windows 2008 R1 & R2 and Windows 7 any user having impersonation 
privileges can elevate privileges and completely compromise the systems bypassing almost all 
new Windows protections. On Windows XP and Windows 2003, Network and Local Service 
accounts can elevate privileges and completely compromise the systems.
Some of the applications that are more susceptible to be exploited are Microsoft Internet 
Information Services 6, 7 & 7.5 and Microsoft SQL Server.
-14-                                       www.argeniss.com
Argeniss – Information Security & Software
Special Thanks
To Mark Russinovich author of Process Explorer and other great Sysinternals tools, without his 
great tools I wouldn't have been able to find most of the vulnerabilities I have found on 
Windows and other software.
-15-                                       www.argeniss.com
Argeniss – Information Security & Software
About the author
Cesar Cerrudo is the founder and CEO of Argeniss, a security consultancy and software firm 
based  in  Argentina.  He  is a security  researcher  and consultant  specializing  in  application 
security.  Regarded  as  a  leading  application  security  researcher,  Cesar  is  credited  with 
discovering and helping to eliminate dozens of vulnerabilities in leading applications including 
Microsoft SQL Server, Oracle Database Server, IBM DB2, Microsoft BizTalk Server, Microsoft 
Commerce Server, Microsoft Windows, Yahoo! Messenger, etc. 
Cesar  has  authored  several  white  papers  on  database,  application  security,  attacks  and 
exploitation techniques and he has been invited to present at a variety of companies and 
conferences including Microsoft, Black Hat, Bellua, CanSecWest, EuSecWest, WebSec, HITB, 
EkoParty, H2HC, FRHACK, Microsoft BlueHat, etc. Cesar collaborates with and is regularly 
quoted in print and online publications such as eWeek, ComputerWorld and other leading 
journals.
-16-                                       www.argeniss.com
Argeniss – Information Security & Software
References
[1] Token Kidnapping
http://www.argeniss.com/research/TokenKidnapping.pdf
[2] Discovering and Exploiting Named Pipe Security Flaws for Fun and Profit
http://www.blakewatts.com/namedpipepaper.html
[3] AppIDFlags
http://msdn.microsoft.com/en-us/library/bb427411(VS.85).aspx
[4] Vulnerabilities in Windows Could Allow Elevation of Privilege
http://www.microsoft.com/technet/security/bulletin/MS09-012.mspx
[5] Exploiting design flaws in the Win32 API for privilege escalation
http://web.archive.org/web/20060904080018/http://security.tombom.co.uk/shatter.html 
-17-                                       www.argeniss.com
Argeniss – Information Security & Software
About Argeniss
Argeniss is a small but very dynamic and creative company created in 2005. Argeniss offers 
information security consulting and software development services in an outsourcing model. 
More than 5 years of experience and satisfied customers prove Argeniss success.
Contact us 
Velez Sarsfield 736 PA
Parana, Entre Rios 
Argentina 
E-mail: info.at.argeniss.dot.com
Tel/Fax: +54 343 4316113
-18-                                       www.argeniss.com