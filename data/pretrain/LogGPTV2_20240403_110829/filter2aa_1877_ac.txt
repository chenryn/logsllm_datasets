### Argeniss – Information Security & Software

#### Introduction
While investigating TapiSrv issues using ProcMon on Windows 2003, I observed some unusual behavior. Several processes were attempting to access or modify the same subkeys and values under the `HKEY_CLASSES_ROOT` and `HKEY_USERS\_Classes` registry keys. Sometimes, these processes would receive a "NAME NOT FOUND" error when trying to access subkeys and values under `HKEY_USERS\_Classes`, even though the same subkeys and values were present in `HKEY_CLASSES_ROOT`.

Initially, I hypothesized that this discrepancy might be due to applications being installed for a single user rather than all users, which would place the information in `HKEY_USERS\_Classes` instead of `HKEY_CLASSES_ROOT`. However, this was just a speculative assumption.

#### Registry Key Analysis
The `HKEY_CLASSES_ROOT` key is primarily used to store information about OLE/COM/DCOM/ActiveX objects. Processes read from this key to instantiate objects. Upon examining the available `HKEY_USERS\_Classes` keys, I found that the keys for the Network and Local Service accounts (`HKEY_USERS\S-1-5-20_Classes` and `HKEY_USERS\S-1-5-19_Classes`, respectively) did not contain any subkeys or values, which was unexpected.

One of the processes attempting to read from these registry keys was `svchost.exe`, running the DCOM Server Process Launcher service (DcomLaunch). This process operates under the Local System account. I noticed that before a WMI process was launched by DcomLaunch, it tried to read from these registry keys. Given that `HKEY_CLASSES_ROOT` can only be modified by highly privileged accounts such as Administrators and Local System, while `HKEY_USERS\_Classes` can be modified by the account to which the key belongs, there was a potential security issue. Specifically, less privileged accounts like Network and Local Service could modify values that would then be read by a high-privileged process, potentially leading to privilege escalation.

#### Exploitation Attempt
To confirm and exploit this potential issue, I decided to create the same subkeys and values under `HKEY_USERS\S-1-5-20_Classes` or `HKEY_USERS\S-1-5-19_Classes` that were being read from `HKEY_CLASSES_ROOT`. If DcomLaunch used these values instead, it would confirm the issue and allow for exploitation.

I started by creating subkeys and values under `HKEY_USERS\S-1-5-20_Classes` and ran tests using a program that launched a WMI process under the Network Service account.

#### Detailed Investigation
I identified that one of the values read by DcomLaunch from `HKEY_CLASSES_ROOT` was the default value under `HKEY_CLASSES_ROOT\CLSID\{1F87137D-0E7C-44d5-8C73-4EFFB68962F2}\LocalServer32`, which was `"%systemroot%\system32\wbem\wmiprvse.exe –secured"`. This value specifies the executable to run when WMI is invoked. I hypothesized that removing the `-secured` argument might allow the WMI process to run unprotected, making it exploitable. However, after creating the subkey and removing the `-secured` argument, the WMI process still ran protected.

Another value accessed was `AppIDFlags` under `HKEY_CLASSES_ROOT\AppID\{1F87137D-0E7C-44d5-8C73-4EFFB68962F2}`, with a value of `0x2`. According to MSDN, this value is used to secure COM servers. I set this value to `0x0` under `HKEY_USERS\S-1-5-20_Classes\AppID\{1F87137D-0E7C-44d5-8C73-4EFFB68962F2}` and confirmed that the WMI process ran unprotected, allowing for exploitation.

#### Impact and Mitigation
This issue affects only Windows 2003 and XP, as the `HKEY_USERS\S-1-5-20_Classes` and `HKEY_USERS\S-1-5-19_Classes` keys do not exist in newer versions of Windows.

To prevent exploitation, it is recommended to avoid running processes under the Network Service and Local Service accounts whenever possible. For example, IIS worker processes and SQL Server service processes should be configured to run under regular user accounts with the necessary privileges. On Windows 7, Vista, and 2008 R1 & R2, removing the Users group from the `HKLM\Software\Microsoft\Tracing` registry key permissions can also help, but it will not protect against privilege elevation from Network and Local Service accounts.

Additionally, disabling the Telephony service (TapiSrv) if not in use can prevent privilege escalation via the `lineAddProvider()` API or by editing the `HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Telephony\Providers` registry key.

#### Conclusion
Small and seemingly insignificant issues can lead to more significant vulnerabilities. While Windows operating systems are becoming increasingly secure, there are still areas that require attention. It is possible to elevate privileges on all Microsoft Windows versions, provided the user has impersonation privileges. On Windows Vista, Windows 2008 R1 & R2, and Windows 7, any user with impersonation privileges can completely compromise the system, bypassing most new Windows protections. On Windows XP and Windows 2003, Network and Local Service accounts can similarly elevate privileges and compromise the system.

Applications like Microsoft Internet Information Services 6, 7, & 7.5 and Microsoft SQL Server are particularly susceptible to such exploits.

#### Special Thanks
Special thanks to Mark Russinovich, the author of Process Explorer and other Sysinternals tools, without which many of these vulnerabilities would not have been discovered.

#### About the Author
Cesar Cerrudo is the founder and CEO of Argeniss, a security consultancy and software firm based in Argentina. He is a renowned security researcher and consultant specializing in application security. Cesar has discovered and helped eliminate numerous vulnerabilities in leading applications, including Microsoft SQL Server, Oracle Database Server, IBM DB2, Microsoft BizTalk Server, Microsoft Commerce Server, Microsoft Windows, Yahoo! Messenger, and others. He has authored several white papers on database and application security, attacks, and exploitation techniques and has presented at various conferences and companies, including Microsoft, Black Hat, Bellua, CanSecWest, EuSecWest, WebSec, HITB, EkoParty, H2HC, FRHACK, and Microsoft BlueHat. Cesar is regularly quoted in print and online publications such as eWeek, ComputerWorld, and other leading journals.

#### References
1. Token Kidnapping: [Link](http://www.argeniss.com/research/TokenKidnapping.pdf)
2. Discovering and Exploiting Named Pipe Security Flaws for Fun and Profit: [Link](http://www.blakewatts.com/namedpipepaper.html)
3. AppIDFlags: [Link](http://msdn.microsoft.com/en-us/library/bb427411(VS.85).aspx)
4. Vulnerabilities in Windows Could Allow Elevation of Privilege: [Link](http://www.microsoft.com/technet/security/bulletin/MS09-012.mspx)
5. Exploiting design flaws in the Win32 API for privilege escalation: [Link](http://web.archive.org/web/20060904080018/http://security.tombom.co.uk/shatter.html)

#### About Argeniss
Argeniss is a dynamic and creative company founded in 2005, offering information security consulting and software development services in an outsourcing model. With over five years of experience and satisfied customers, Argeniss has proven its success.

**Contact Us**
- Address: Velez Sarsfield 736 PA, Parana, Entre Rios, Argentina
- Email: info@argeniss.com
- Tel/Fax: +54 343 4316113

-18-                                       www.argeniss.com