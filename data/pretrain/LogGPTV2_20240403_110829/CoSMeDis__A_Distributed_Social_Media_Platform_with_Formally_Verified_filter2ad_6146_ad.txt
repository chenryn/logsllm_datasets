pst4 = pst5. This public knowledge must be included in the
bound in order for the amended property to hold.
Amendment 2. (P1)’s bound is extended as follows:
(cid:6))
(cid:6)) iff (sl = [] → sl
(cid:6) = []) ∧ corr(sl
B1(sl, sl
where corr(sl
labeled post contents correlated in the above sense.
has its upd-labeled and snd-
(cid:6)) states that sl
(cid:6)
With these two amendments, (P1) is still true—the proof is
amended by keeping the correlation property as an invariant,
but otherwise stays the same.
Now we can deﬁne a matching predicate for secrets: we
take matchS((upd, pst1), pst2) to be false, and matchS((snd,
pst1), pst2) to be true iff pst1 = pst2 (i.e., what
is being
sent coincides with what
is being received). This gives a
corresponding notion of communicating shufﬂe for secrets,
||matchS. We shall simply write || for any of the three shufﬂing
operations—for transitions, observations or secrets.
In summary, we have identiﬁed a communication in-
frastructure, consisting of the predicates match : Trans1 ×
735
Trans2 → Bool, matchO : Obs1 × Obs2 → Bool and matchS :
Sec1 × Sec2 → Bool. As one would expect,
this infras-
tructure is compatible with the secrets and the observa-
in that, whenever match(trn1, trn2) holds, we have
tions,
that isSec1(trn1) and isSec2(trn2) are equivalent, and if they
hold then matchS(getSec1(trn1), getSec2(trn2)) also holds;
and similarly for observations.
An important consequence of having a compatible com-
munication infrastructure is that || commutes with the secret-
and observation-producing functions:
Corollary 1. tr ∈ tr1 || tr2 implies S(tr)∈ S1(tr1) || S2(tr2) and
O(tr) ∈ O1(tr1) || O2(tr2).
(cid:6)
1, sl
(cid:6)
2 for some sl1, sl2, sl
(cid:6)
2, we have that B1(sl1, sl
(cid:6)) to mean that, whenever sl ∈ sl1 || sl2 and sl
The notion of shufﬂing secrets in a communication-aware
fashion is essential for deﬁning a compound bound B. We
(cid:6) ∈
take B(sl, sl
1 || sl
(cid:6)
(cid:6)
1) and
sl
(cid:6)
B2(sl2, sl
2) hold. This is the strongest bound we can hope for
the composite. It performs a “shufﬂing intersection” of B1 and
B2, stating that no matter how we decompose the secrets as a
communicating shufﬂe of component secrets, both component
bounds hold. It speciﬁes an intersection of the amounts of
uncertainty about the secret enforced by the components, i.e., a
union of the amounts of information that is being declassiﬁed:
if each component declassiﬁes one particular aspect of the
overall secret, then the composite declassiﬁes both.
Finally, the natural composed trigger T is “T1 or T2": If
the trigger of either component is ﬁred, then the secrets are
legitimately accessible to observers.
So far, so good: We have deﬁned an attacker model and
a security policy for the compound system—i.e., an instance
of BD Security, which we denote by (P1) || (P2). But can
we prove that it indeed holds for Aut = Aut1 ×match Aut2,
assuming (P1) and (P2) hold for the components?
The challenge of proving (P1) || (P2) is depicted in Fig. 5.
Let tr be a trace of Aut. Suppose it produces the secrets sl
be an alternative sequence
and the observations ol, and let sl
(cid:6)) holds. We know that tr is given
of secrets such that B(sl, sl
by the communicating shufﬂe of some traces tr1 of Aut1 and
tr2 of Aut2, i.e., tr ∈ tr1 || tr2. Say tr1 and tr2 produce the
secrets sl1 and sl2 and the observations ol1 and ol2. In order
to make a connection to the bounds of the components, and
(cid:6)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
B1
sl1 
(cid:6)
1 
sl
S1
S1
tr1

tr(cid:6)
1

O1
O1
ol1 
(cid:6)
sl
sl
B
S
S
tr
tr(cid:6)
O
O
ol
(
sl2
B2
(
(cid:6)
2
sl
S2
S2
*
tr2
*
tr(cid:6)
2
O2
O2
'
ol2
sl1 
S1
tr1

O1
ol1 
ol
(
sl2
S2
)
tr2
O2
(
ol2
sl
S
tr
O
Figure 5: The problem of ﬁnding an alternative composed trace: in context (left) and in isolation (right)
1 and tr(cid:6)
(cid:6)
1) and B2(sl2, sl
2 such that each tr(cid:6)
(cid:6)
i and is observationally equivalent to tri.
1 and tr(cid:6)
therefore take advantage of (P1) and (P2), we invoke Corollary
1, which gives us sl ∈ sl1 || sl2 and ol ∈ ol1 || ol2. Then, by the
(cid:6)
deﬁnition of B, we have B1(sl1, sl
2). By the
security properties of the components, we obtain the alternative
component traces tr(cid:6)
i yields the
secrets sl
So the original problem is reduced to the following: Can
we use tr(cid:6)
2 to construct a suitable alternative trace for
Aut, i.e., a trace tr(cid:6) that produces sl
and is observationally
equivalent to tr? The right side of Fig. 5 shows the problem
(cid:6)
in isolation, where we rename tr(cid:6) to tr, tr(cid:6)
i to sli:
Problem. We are given sl, ol, sli, oli and tri such that Si(tri) =
sli, Oi(tri) = oli, sl ∈ sl1 || sl2 and ol ∈ ol1 || ol2, and need to
ﬁnd tr such that S(tr) = sl and O(tr) = ol.
i to tri and sl
(cid:6)
Thus, we know how to shufﬂe observations and secrets
and are required to shufﬂe entire transitions in a compatible
way. To this end, we clearly need the observation and secret
matching to provide enough information for transition match-
ing. For example, assume that each tri consists of a single
transition, trni, with a communicating action. The only way to
shufﬂe these into a solution tr is if they actually match, i.e.,
match(trn1, trn2) holds. And for proving this, we know that the
observations and secrets of these transitions can be shufﬂed,
hence they do match. Thus, what we would need is that the
communication infrastructure is strong enough so that
the
matching infrastructure in the attacker model contains enough
information for matching transitions: Whenever the actions of
trn1 and trn2 are communicating, for match(trn1, trn2) to hold
it is sufﬁcient that (1) matchO(getObs1(trn1), getObs2(trn2))
holds conditionally on isObs1(trn1) and isObs2(trn2) and (2)
matchS(getSec1(trn1), getSec2(trn2)) holds conditionally on
isSec1(trn1) and isSec2(trn2).
Intuitively, this property requires that the observations and
secrets of communication transitions fully capture their match-
ing behavior. Unfortunately, the communication infrastructure
from (P1) and (P2) in our case study is not strong enough.
Consider a sending and a receiving action for different posts
(other than the secret post PID), not involving any of the
designated observer users (UIDs1 or UIDs2). These actions are
neither observable nor secret. Hence, the preconditions of the
above property are trivially satisﬁed, but still the actions fail to
match, because they refer to different posts. In order to remedy
this, we must strengthen the attackers. For our case study, a
736
reasonable strategy would be to extend the observation power
to communicating actions and their outputs, provided the secret
is not compromised, as follows:
Amendment 3. (P1)’s observations are extended as follows:
• isObs1(σ1, a1, o1, σ(cid:6)
) iff
userOf(a1) ∈ UIDs1 ∨ isCom1(a1)
• getObs1 (σ1, a1, o1, σ(cid:6)
(o1))
where purgeAPID : Act → Act and purgeOPID : Out → Out
purge away from communicating actions and their outputs
the content of PID’s post (which constitutes the secret). The
observations of (P2) are extended analogously.
(a1), purgeOPID
) = (purgeAPID
1
1
The parameters of actions and outputs that do not pertain
to communication or do not manipulate PID’s content are
not affected by purging—this is the case for sendServerReq
and receiveClientReq. By contrast, PID’s content pst is re-
placed by the non-informative ⊥ from everywhere it ap-
(receivePost, NID1, PID, pst, uid1, v) =
pears, e.g., purgeAPID
(receivePost, NID1, PID, ⊥, uid1, v) and purgeOPID
((PID, pst,
uid1, v)) = (PID, ⊥, uid1, v).
• If
Since it was done in a secrecy-sensitive way, this increase
in observation power keeps the properties (P1) and (P2) true.
At the same time, it makes the communication infrastructure
strong, as desired. The reason is that, for each pair of commu-
nication transitions trn1 and trn2:
• If they do not produce secrets,
then purging does not
affect their observations, so match(trn1, trn2) is equivalent
to matchO(getObs1(trn1), getObs2(trn2)).
for part of
they produce secrets,
then matchO(getObs1(trn1),
getObs2(trn2)) caters
the condition re-
quired for match(trn1, trn2); the other part is ensured by
matchS(getSec1(trn1), getSec2(trn2)). For example, say the
action of trn1 is (sendPost, uid1, NID2, PID) and its output
is (PID, pst1, uid1, v1), and the action of trn2 is (receivePost,
NID2, PID, pst2, uid2, v2). Then matching the observations
yields (⊥, uid1, v1) = (⊥, uid2, v2) and matching the secrets
yields pst1 = pst2; together, they yield (pst1, uid1, v1) =
(pst2, uid2, v2), as required for match(trn1, trn2).
Note that Amendment 3 has made all communication
actions observable (to various degrees): isCom1(actOf1(trn1))
implies isObs1(trn1), and similarly for the second component.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
*
*
*
*
t
t
t
t


O
O
)
)
O
O
)
)


O
O
u
u
O
O
t
t
O
O


O
O
*
*
s
s
*
*
t
t
O
O
)
)
O