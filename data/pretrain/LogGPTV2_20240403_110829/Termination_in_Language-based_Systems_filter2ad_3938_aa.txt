title:Termination in Language-based Systems
author:Algis Rudys and
John Clements and
Dan S. Wallach
Termination in Language-based Systems
Algis Rudys
PI:EMAIL
John Clements
PI:EMAIL
Dan S. Wallach
PI:EMAIL
Department of Computer Science, Rice University
Abstract
Language runtime systems are increasingly being em-
bedded in systems to support runtime extensibility via mo-
bile code. Such systems raise a number of concerns when
the code running in such systems is potentially buggy or
untrusted. While sophisticated access controls have been
designed for mobile code and are shipping as part of com-
mercial systems such as Java, there is no support for ter-
minating mobile code short of terminating the entire lan-
guage runtime. This paper presents a concept called “soft
termination” which can be applied to virtually any mobile
code system. Soft termination allows mobile code threads
to be safely terminated while preserving the stability of
the language runtime.
In addition, function bodies can
be permanently disabled, thwarting attacks predicated on
system threads eventually calling untrusted functions. We
present a formal design for soft termination and an imple-
mentation of it for Java, built using Java bytecode rewrit-
ing, and demonstrating reasonable performance (3-25%
slowdowns on benchmarks).
1. Introduction
In recent years, many systems have turned to language
runtime systems for enforcement of security. Language-
based enforcement of security was popularized by Java
and the Java Virtual Machine (JVM), which were adopted
by Netscape for its Navigator 2.0 browser in 1995. Java
promised an environment where untrusted and malicious
code (hereafter called a “codelet”1) could run safely inside
the Web browser, enhancing the user’s Web experience
without jeopardizing the user’s security. Rather than us-
ing kernel-based protection, the JVM would run inside the
same address space as the browser, providing protection
1The term “codelet” is also used in artiﬁcial intelligence, numerical
processing, XML tag processing, and PDA software, all with slightly
different meanings. When we say “codelet,” we refer to a small program
meant to be executed in conjunction with or as an internal component of
a larger program.
and separation as a side-effect of enforcing its type sys-
tem. A combination of static and dynamic type checking
would serve to prevent a malicious codelet from forging
a reference to an arbitrary memory location and subvert-
ing the system. In addition to its applications within Web
browsers, codelets have also been touted for OS kernel ex-
tensions, active networking, extensible databases, agent-
based negotiating systems, and presumably other problem
domains.
The promise of Java may be attractive, but a large num-
ber of security ﬂaws have been discovered in Java since
its release [10, 24]. Signiﬁcant strides have been made
at understanding the type system [1, 27, 11, 12, 8, 9] and
protecting the Java system classes from being manipulated
into violating security [30, 31, 18, 13, 14], but efforts to
control resource exhaustion have lagged behind. A simple
inﬁnite loop will still freeze the latest Web browsers. The
most successful systems to date either run the JVMs in
separate processes or machines [23, 26], surrendering any
performance beneﬁts from running the JVM together with
its host application, or create a process-like abstraction in-
side the JVM [4, 28, 20, 5]. These process abstractions
either complicate memory sharing or make it completely
impossible.
This paper describes a new language runtime-based
mechanism called soft termination. While it is not spe-
ciﬁc to Java, soft termination can be deployed on Java,
and we present a Java-based implementation. Soft termi-
nation is intended to be invoked either by an administra-
tor or by a system resource monitor which has concluded
that a codelet is exceeding its allotted resources and may
no longer be allowed to run. Soft termination provides
semantics similar to the UNIX ps and kill commands
while preserving system integrity after termination, yet re-
quires neither process-like structures nor limits on mem-
ory sharing. Our implementation of soft termination is de-
ﬁned as a code-to-code transformation, and is thus more
easily portable across languages and implementations of
the same language. Soft termination supports two kinds
of program termination: safe thread termination and safe
code disabling. Safe thread termination must deal with
cases where the target thread is currently executing criti-
cal system code that may not necessarily be designed to
respond to an asynchronous signal. Safe codelet disabling
must deal with cases where future threads may invoke
functions of the disabled codelet, yet the codelet should
not be able to “hijack” the thread and continue execution.
In the following sections, we discuss the concept of
soft termination, and present our implementation. Sec-
tion 2 discusses how prior work has addressed these con-
cerns. Section 3 formalizes and describes what we mean
by termination. Section 4 describes our Java-based imple-
mentation of soft termination, and mentions a number of
Java-speciﬁc issues that we encountered. We present per-
formance measurements in section 5. Finally, section 6
describes some experience with using soft termination in
real-world situations.
2. Related work
Systems such as Smalltalk, Pilot, Cedar, Lisp Ma-
chines, and Oberon have taken advantage of language-
based mechanisms to provide OS-like services. Perhaps
as early as the Burroughs B5000 series computers, lan-
guage based mechanisms were used for security purposes.
More recently, language-based enforcement of security
was popularized by Java, originally deployed by Netscape
for its Navigator 2.0 browser in 1995 to run untrusted ap-
plets.
However, these systems provide little or no support for
resource management on the programs they run. A num-
ber of projects have been developed to address this. A
recent Scheme system called MrEd [17] supports thread
termination and management of resources like open ﬁles
but has no way of disabling code from running in future
threads. Some systems, such as PLAN [21], restrict the
language to guarantee that programs will terminate.
In
general, many language systems support interactive de-
bugging, which includes the ability to interrupt a running
program and inspect its state. This can be performed with
operating-system services or by generating inline code to
respond to an external debugger.
Much of the recent research in this area has been fo-
cused on the Java programming language. PERC [25],
for instance, is a Java-derived language that extends Java
to support asynchronous exceptions. A programmer may
specify blocks with provable limits on their runtime and
asynchronous exceptions are deferred until the block com-
pletes execution.
J-Kernel [20] is a system for managing multiple Java
codelets running in the same JVM. It is written entirely
in Java, giving it the advantage of working with multi-
ple JVMs with minimal adjustment. It is implemented as
a transformation on Java bytecode as the bytecodes are
J-Kernel isolates threads to run
loaded by the system.
within speciﬁc codelets; cross-domain calls are supported
via message passing from one codelet thread to another
or to the system. By isolating threads to their codelets, it
becomes safe to arbitrarily deschedule a thread.
JRes [7] is a resource management system for Java.
Bytecode rewriting is used to instrument memory alloca-
tion and object ﬁnalization in order to maintain a detailed
accounting of memory usage. Again, termination is men-
tioned, but no signiﬁcant details are provided.
KaffeOS [2, 3] provides an explicit process-like abstrac-
tion for Java codelets. KaffeOS is implemented as a heav-
ily customized JVM with signiﬁcant changes to the un-
derlying language runtime system and system libraries.
Code termination is supported in the same manner as a
traditional operating system: user codelets are strongly
separated from the kernel by running in separate heaps.
Memory references across heaps are heavily restricted.
Bernadat et. al. [5] and van Doorn [29] describe similar
systems that customize a JVM in order to support better
memory account and security. van Doorn takes advan-
tage of lightweight mechanisms provided by an underly-
ing micro-kernel. KaffeOS provides a style of termination
we call hard termination (see section 3.2). It’s not clear
how termination is supported in the other systems.
3. System design
A large space of possible designs exist for supporting
termination in language runtimes. We ﬁrst consider the
na¨ıve solutions and explain the hard problems raised by
their failings. We then discuss how operating systems per-
form termination and ﬁnally, describe our own system.
3.1. Na¨ıve termination
One na¨ıve solution to termination would be to iden-
tify undesired threads and simply remove them from the
thread scheduler. This technique is used by Java’s depre-
cated Thread.destroy() operation2. Unfortunately,
there are numerous reasons this cannot work in practice.
Critical sections A thread may be in a critical section of
system code, holding a lock, and updating a system
data structure. Descheduling the thread would either
leave the system in a deadlock situation (if the lock
is not released) or leave the system data structures in
an undeﬁned state, potentially destabilizing the entire
system (if the lock is forcibly released).
Boundary-crossing threads In an object-oriented sys-
tem, a program wishing to inspect or manipulate an
2see http://java.sun.com/products/jdk/1.2/docs/
guide/misc/threadPrimitiveDeprecation.html
object invokes methods on that object. When mem-
ory sharing is unrestricted between the system and its
codelets or among the codelets, these method invo-
cations could allow a malicious codelet to “hijack”
the thread from its caller and perhaps never release
it. This is especially a concern if the thread in ques-
tion is performing system functions, such as ﬁnaliz-
ing dead objects prior to garbage collection.
Blocking calls The language runtime system has support
for making native OS system calls. A thread should
not be descheduled while it is blocking on a system
call such as an I/O call.
Another na¨ıve solution is to force an asynchronous ex-
ception, as done by Java’s deprecated Thread.stop()
operation. While this exception will wait for blocking
calls to complete, it may still occur inside a critical sec-
tion of system code. In addition, blocking calls could po-
tentially never return, resulting in a non-terminable thread.
Finally, a workaround is needed to prevent user-level code
from catching the exception.
3.2. Hard termination
Operating systems like Unix support termination by
carefully separating the kernel from the user program.
When a process is executing in user space, the kernel is
free to immediately deschedule all user threads and re-
claim the resources in use.
If the process is executing in the kernel, termination
is normally delayed; a ﬂag is checked when the kernel
is about to return control to the user process.
In cases
where the kernel may perform an operation that could po-
tentially block forever (e.g., reading from the network),
the kernel may implement additional logic to interrupt the
system call. Other system calls, those that complete in a
guaranteed ﬁnite time, need not check whether their user
process has been terminated, as the kernel will handle the
termination signal on the way out. We call such a mecha-
nism a hard termination system because once termination
is signaled, user-level code may be terminated immedi-
ately with no harmful side-effects.
3.3. Soft termination
Unlike a traditional operating system, the boundary be-
tween user and system code in a language runtime is
harder to deﬁne. While all code within the system is gen-
erally tagged with its protection domain, there is nothing
analogous to a system call boundary where termination
signals can be enforced. Furthermore, because a thread
could easily cross from user to system code and back
many times, there may never be a correct time at which
it becomes safe to terminate a thread.
This section introduces a design we call soft termination
and describes the properties we would ﬁnd desirable. We
present an implementation of soft termination based on
code rewriting for a simpliﬁed language and prove that all
programs will terminate when signaled to do so.
3.3.1. Key ideas: Soft termination is based on the idea
that a codelet may be instrumented to check for a termi-
nation condition during the normal course of its operation.
Our goal is to perform these checks as infrequently as nec-
essary — only enough to ensure that a codelet may not
execute an inﬁnite loop. Furthermore, as with the Unix
kernel, we would like the termination of a codelet to not
disturb any system code it may be using at the time it is
terminated, thus preserving system correctness.
The soft
termination checks are analogous to safe
points, which are used in language environments to insert
checks for implementing stack overﬂow detection, pre-
emptive multitasking, inter-process and inter-task com-
munication, barrier synchronization, garbage collection
systems, and debugging functions. A more complete dis-
cussion is provided in Feeley [15]. In Feeley’s terminol-
ogy, our implementation uses “minimal polling.”
3.3.2. Formal design: For our analysis, we begin with a
simple programming language having methods or func-
tions, conditional expressions, and simple exceptions (see
ﬁgures 1 and 2). In our language, a program is a collec-
tion of function deﬁnitions followed by an expression to
be evaluated. A function body contains function/method
calls as well as primitive operations, conditionals, and ex-
expression is assumed
to return a boolean value, indicating whether termina-
tion for the current codelet has been externally (and asyn-
chronously) requested. We write the semantics of our lan-
guage using the same style as Felleisen and Hieb [16].
ceptions. A   CheckTermination
The soft termination transformation,
, is described in
ﬁgure 3. Rule 4 of this transformation inserts the check
for termination before every function invocation. The
other rules describe how the transformation continues re-
cursively on expressions.
nite time, given that   CheckTermination
Proving that a transformed program terminates in a ﬁ-
returns true,
is a straightforward exercise. First, we state without
proof that our language semantics are consistent and well-
formed and that there are no collisions or unbound names
in the name-space (i.e., every reference to a function or
variable can be bound to a single deﬁnition).
Next, we start with all possible expressions M from
ﬁgure 1.
to M, and assuming
CheckTermination is true, we wish to show the program
enters a “locked” state, where termination is guaranteed.
After applying




P
D
M
V
E
ﬁnal states
D
G M
D

  deﬁne   f x
  f M

  f V

error
x
[]
V
true
false
M
c
E M

  if M M M

M
  let   x M

	

  try E M
  if E M M

  try M M
	
  let   x V

V
  throw

  x E

M
  x M

Figure 1. Simple language used for our analysis.
V0
E
error
if f
if f
built-in primitives
built-in primitives
or
is undeﬁned

  f V
  deﬁne   f x

if   deﬁne   f x

M
M



if V
true
false
M

if G
if G
M
M
V
error
 
 


E
E
E
  f V
  f V
  f V
E
E
E
M
E
E
  if true M1 M2
  if false M1 M2
  if V M1 M2
  try V M
  let   x V

  throw

  if   throw
  try   throw
  throw
  xM


eval 











M
M1 M2
M
M
M
E
E
E
  f V
E
E
  let   x V

  x   throw
M
/x


/ x

V
V
V
E
M1
E
E
M2
error
E
E
E
E
E
M
error
E

  throw
  throw
  throw
 V
error




Figure 2. An operational semantics for our language.
G M
D
D
'''
deﬁne
f M
if M M M
try M M
throw
let
V
'')'
+,$
xM
+0$
f x
+,$
+,$
+
'''
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
!#"
!#"
!#"
!#"
!#"
!#"
!#"
!#"
!#"
M
+,$
$-%
'''
M
+,$
M
M
if
M
D
D
M
M
f x
M
!#"
!#"
deﬁne
let
t
if
try
throw
let
x
V
$&!#"
$(')''
!#"
'''
+!."
$/+
'''1*
!#"
$!#"
!#"
$&!."
$/+
$&!."
!#"
!#"
$+
'''
!#"
M
M
M
M
$/+
CheckTermination
$/+
$/+
throw
f t
+3*
'''
+++
+2*
Figure 3. The soft termination transformation.
