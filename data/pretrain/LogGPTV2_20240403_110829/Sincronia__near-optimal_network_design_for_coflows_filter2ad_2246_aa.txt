# Sincronia: Near-Optimal Network Design for Coflows

## Authors
- Saksham Agarwal, Cornell University
- Shijin Rajakrishnan, Cornell University
- Akshay Narayan, MIT
- Rachit Agarwal, Cornell University
- David B. Shmoys, Cornell University
- Amin Vahdat, Google

## Abstract
We present Sincronia, a near-optimal network design for coflows that can be implemented on top of any transport layer (for flows) that supports priority scheduling. Sincronia achieves this using a key technical result: we show that given the "right" ordering of coflows, any per-flow rate allocation mechanism can achieve an average coflow completion time within 4× of the optimal, as long as (co)flows are prioritized according to the ordering.

Sincronia uses a simple greedy mechanism to periodically order all unfinished coflows. Each host sets priorities for its flows based on the corresponding coflow order and offloads flow scheduling and rate allocation to the underlying priority-enabled transport layer. We evaluate Sincronia over a real testbed comprising 16 servers and commodity switches, and through simulations across various workloads. Our results suggest that Sincronia not only provides a practical, near-optimal design but also outperforms state-of-the-art network designs for coflows, sometimes by as much as 8×.

## CCS Concepts
- **Networks** → Network protocol design
- **Theory of Computation** → Scheduling algorithms

## Keywords
- Coflow
- Datacenter Networks
- Approximation Algorithms

*The first two authors contributed equally to the paper.*

## Introduction
Traditionally, networks have used the abstraction of a "flow," which captures a sequence of packets between a single source and a single destination. This abstraction has been a mainstay for decades, optimized for latency and throughput in point-to-point connections, which is critical for traditional applications like file transfers and web access. However, distributed applications running in datacenter networks use programming models (e.g., bulk synchronous programming and partition-aggregate model) that require optimizing performance for a collection of flows rather than individual flows. The network's focus on individual flow performance leads to a fundamental mismatch with the performance objectives of these applications.

The coflow abstraction mitigates this mismatch by allowing distributed applications to express their performance objectives more precisely to the network fabric. For example, many distributed services with stringent performance constraints must block until receiving responses from hundreds or even thousands of remote servers. These services can specify a collection of flows as a coflow, and the network optimizes for the average Coflow Completion Time (CCT). Several recent evaluations show that optimizing for average CCT can significantly improve application-level performance.

Recent efforts in network designs for coflows, both in networking and theory, have shown promise. However, prior designs require a centralized coordinator to perform complex per-flow rate allocations, making them impractical due to the need for detailed network knowledge and frequent reallocation of rates. This makes it difficult to implement these designs in dynamic and large-scale datacenter environments.

This paper introduces Sincronia, a new datacenter network design for coflows that achieves near-optimal average CCT without explicit per-flow rate allocation. The high-level design of Sincronia includes:
- Dividing time into epochs.
- Selecting a subset of unfinished coflows in each epoch.
- Setting priorities for flows based on the corresponding coflow's ordering.
- Offloading flow scheduling and rate allocation to the underlying priority-enabled transport mechanism.
- Greedily ordering newly arrived coflows using a simple algorithm.

Sincronia's minimalistic design is based on a key technical result: with the "right" ordering of coflows, it is possible to achieve average CCT within 4× of the optimal, as long as (co)flow scheduling is "order-preserving." This result shows that any per-flow rate allocation mechanism, when order-preserving, can achieve near-optimal average CCT.

Sincronia overcomes practical challenges in existing network designs by avoiding per-flow rate allocation and being agnostic to the underlying transport layer. It is independent of the network topology, location of congestion, and paths taken by (co)flows. Coflow arrivals and departures do not require explicit rate reallocation, leading to a scalable design. Sincronia also supports coexistence of flows and coflows, ensuring backward compatibility. By being transport-agnostic, Sincronia can be efficiently implemented on top of any existing transport mechanism that supports priority scheduling, including TCP (using DiffServ), pHost, and pFabric.

We have implemented Sincronia on top of TCP with DiffServ for priority scheduling. Our implementation is work-conserving, handles online coflow arrivals, and allows coexistence of flows and coflows. We evaluate Sincronia on a 16-server testbed interconnected with a FatTree topology comprising 20 commodity switches. We also incorporate Sincronia into existing coflow simulators to perform sensitivity analysis against various workloads, number of coflows, network load, and transport mechanisms. Our results show that Sincronia not only provides near-optimal average CCT but also outperforms state-of-the-art network designs for coflows, sometimes by as much as 8×.

## Sincronia Overview
### 2.1 The Coflow Abstraction
Distributed programming frameworks often have structured communication stages between computation stages. In these frameworks, execution of a task cannot begin until all flows in the preceding communication stage have finished. A coflow is a collection of such flows, with a shared performance goal (e.g., minimizing the completion time of the last flow in a coflow).

We assume that coflows are defined such that flows within a coflow are independent. Similar to most existing designs, we focus on a clairvoyant design that assumes information about a coflow (set of flows, sources, destinations, and sizes) is known at coflow arrival time.

### 2.2 Problem Statement and Prior Results
We describe the network model used for our theoretical bounds and the network performance objective.

#### Conceptual Model (for theoretical bounds)
Similar to near-optimal network designs for traditional flows and coflows, we abstract the datacenter network fabric as one big switch interconnecting the servers. In this model, the ingress queues correspond to the NICs, and the egress queues to the last-hop ToR switches. The model assumes that the fabric core can sustain 100% throughput, and only the ingress and egress queues are potential congestion points. Each ingress port has flows from one or more coflows to various egress ports, organized in virtual output queues.

#### Performance Objective
Formally, we assume the network is a big switch comprising \( m \) ingress ports \(\{1, 2, \ldots, m\}\) and \( m \) egress ports \(\{m+1, m+2, \ldots, 2m\}\). All ports have the same bandwidth. We are given a collection of \( n \) coflows \( C = \{1, 2, \ldots, n\} \), indexed by \( c \). Each coflow \( c \) may be assigned a weight \( w_c \) (default weight is 1), has an arrival time \( a_c \), and comprises a set of flows \( F_c \).

\[
\text{Table 1: Notation used in the paper.}
\]

\[
\begin{array}{|c|c|}
\hline
\text{Notation} & \text{Description} \\
\hline
m & \text{Number of ingress and egress ports} \\
n & \text{Number of coflows} \\
c & \text{Coflow index} \\
w_c & \text{Weight of coflow } c \\
a_c & \text{Arrival time of coflow } c \\
F_c & \text{Set of flows in coflow } c \\
\hline
\end{array}
\]

\[
\text{Figure 1: An instance of a coflow scheduling problem, used as a running example in the paper.}
\]

In summary, Sincronia provides a practical, near-optimal network design for coflows by leveraging a simple, order-preserving priority mechanism. Our evaluation demonstrates that Sincronia outperforms existing designs, making it a promising solution for modern datacenter networks.