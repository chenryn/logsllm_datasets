title:Chaser: An Enhanced Fault Injection Tool for Tracing Soft Errors in
MPI Applications
author:Qiang Guan and
Xunchao Hu and
Terence Grove and
Bo Fang and
Hailong Jiang and
Heng Yin and
Nathan DeBardeleben
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Chaser: An Enhanced Fault Injection Tool for
Tracing Soft Errors in MPI Applications
Qiang Guan∗, Xunchao Hu †, Terence Grove¶, Bo Fang‡, Hailong Jiang∗, Heng Yin§, Nathan DeBardeleben¶
∗ Deparment of Computer Science, Kent State University
Email: {qguan, hjiang13}@kent.edu
†DeepBits Technology
Email: PI:EMAIL
‡University of British Columbia
§Department of CSE, University of California, Riverside
Email:PI:EMAIL
Email:PI:EMAIL
¶ Los Alamos National Laboratory
Email:{tagrove, ndebard}@lanl.gov
Abstract—Resilient computation has been an emerging topic
in the ﬁeld of high-performance computing (HPC). In particular,
studies show that tolerating faults on leadership-class supercom-
puters (such as exascale supercomputers) is expected to be one
of the main challenges. In this paper, we utilize dynamic binary
instrumentation and virtual machine based fault injection to
emulate soft errors and study the soft errors’ impact on the
behavior of applications. We propose Chaser, a ﬁne-grained,
accountable, ﬂexible, and efﬁcient fault injection framework built
on top of QEMU. Chaser offers just-in-time fault injection, the
ability to trace fault propagation, and ﬂexible and programable
interfaces. In the case study, we demonstrate the usage of Chaser
on Matvec and a real DOE mini MPI application1.
Index Terms—soft error; MPI;
vulnerability; High Performance Computing.
fault
injection; resilience;
I. INTRODUCTION
Resilient computation has been an emerging topic in the
ﬁeld of high-performance computing (HPC) for several years.
In particular, studies show that tolerating faults on leadership-
class supercomputers (such as exascale supercomputers) is
expected to be one of the main challenges. Due to high error
rates, soft errors [36] pose a serious threat to the prospect of
exascale systems.
The HPC community often lumps all reliability under
the umbrella of “resilience.” However, there are many ways
that failures can affect supercomputers and the applications
running on them. Faults can be transient,
intermittent, or
permanent. They can cause silent data corruptions (SDC),
crash the application, or cause hardware components to fail.
Faults can come from any range of events including (but
not limited to) aging [9], [33], poorly designed components
[13], material impurities/packaging [32], [41], [29], neutron
(“cosmic”) radiation [12], [7], electromagnetic interference
[30], electromigration [24], temperature [6], [23], voltage [11],
1This manuscript is submitted for DSN2020 tool category
1LA-19-27437
[37] extremes/ﬂuctuations, and nefarious tampering/espionage
[31]. Furthermore, faults are not relegated to only being driven
by hardware inﬂuences; software plays at least some non-
trivial part in the rate of faults on computing systems today
[28], [15], [19], [16]. The lack of tools for characterizing and
studying these types of faults was brought up in a recent
governmental position paper on the challenges of resilient
exascale computing[10]. Without proper tools it is unlikely
that key advancements in HPC resilience will occur in time
for next generation systems.
Researchers have built various fault injection tools to char-
acterize the error resilience of applications. Current fault
injection tools typically rely on either source code instrumen-
tation [38], [39], [8], [35] or dynamic binary instrumenta-
tion [18], [26], [25], [40]. Such tools provide the capability
of emulating and injecting faults into targeted programs with
a variety of fault models. However, nearly all fault injectors
treat the application under test as a black box, as the main goal
of fault injection is to characterize the impact of soft errors.
On the other hand, studying error propagation within a
program is considered a critical
task in the dependability
community. When a fault occurs, understanding how it affects
the program’s state and ﬁnal outcome can be valuable to guide
the design and implementation of fault tolerant systems. Prior
studies
[20], [27] have found that with more detailed infor-
mation about error propagation, applications can be optimized
and enhanced in robustness against soft errors. Traditionally,
tracing faults during the execution of a program requires
additional computational/memory resources, which inevitably
incurs signiﬁcant performance overhead. This problem can be
exacerbated in the context of MPI applications, as the fault
might pass the process boundaries, requiring the tracer to
consider both the depth of the program (i.e. the complexity in
the single process), and the width of the program (i.e. across
multiple processes/nodes).
Statistical-based fault injection campaigns generally con-
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00051
355
Authorized licensed use limited to: Middlesex University. Downloaded on October 19,2020 at 21:20:43 UTC from IEEE Xplore.  Restrictions apply. 
sume a large amount of cycles to reach a statistically sig-
niﬁcant estimate of the impact of faults. Additionally, such
campaigns can take hours or days to ﬁnish [10]. For HPC
applications, performance has become a major concern when
running a large number (i.e. thousands) of fault injections.
As such, minimizing the overhead introduced by the fault
injector is critical. Therefore, a ﬂexible, lightweight injection
framework with a dynamically conﬁgurable error tracer is
needed. Such a framework must also be able to record the
footprint of errors in memory and between MPI processes.
In this paper we utilize dynamic binary instrumentation and
virtual machine based fault injection to emulate soft errors. We
can then study the impact that such errors have on the behavior
of targeted applications. We propose Chaser, a ﬁne-grained,
accountable, ﬂexible, and efﬁcient soft error fault injection
framework built on top of DECAF [14]. Chaser provides just-
in-time fault injection, fault propagation tracing, and ﬂexible
fault injection interfaces. More speciﬁcally, Chaser allows the
user to deﬁne which application to inject soft errors into, as
well as when and where these soft errors will be injected, with
various levels of granularity. Researchers can also build dif-
ferent fault injectors using the interfaces exported by Chaser.
We demonstrate the use of Chaser against applications from
Matvec [2] and an MPI-based DOE mini-app CLAMR [1].
Because of the exported fault injection interfaces, the effort of
developing new fault injectors is substantially reduced, only
requiring around 100 lines of code.
Our main contributions are summarized as follows:
1) We propose Chaser, a ﬁne-grained, accountable, ﬂexible,
and efﬁcient soft error fault tracer framework built on
top of DECAF.
2) We implement Chaser and evaluate its performance and
ﬂexibility. Chaser can supervise the process of parallel
fault injection as well as provide tracing functions. Users
can trace the error propagation between parallel MPI
processes as well as between computing nodes.
3) We demonstrate Chaser with CLAMR, a DOE mini
application, to study error propagation using trace logs.
The rest of paper is organized as follows: Section II intro-
duces the design requirements and goals for Chaser and ex-
plains its major components and functions; Section III presents
the implementation of key functions and prototype of Chaser.
Next, evaluation results are presented in Section IV, and the
state-of-the-art studies related to this work are discussed in
Section V. Finally, we present our conclusions in Section VI.
II. CHASER DESIGN
A. Design Requirement
There are challenges in tracing errors in parallel computing
environments dynamically. For instance, the tracing overhead
can also signiﬁcantly lower performance. Therefore, an error
tracer should be able to mark the errors and speciﬁcally track
the trajectory of errors in memory space across the execution
of an application. Secondly, current fault injection tools often
hypervise the injection locally in a single process of MPI
applications due to the performance and management cost.
It is possible for most fault injection tools to locally monitor
error propagation, however, they may be unable to track error-
corrupted messages shared between MPI ranks on different
physical nodes. The tracer tool should be able to coordinate all
MPI processes and notify the MPI processes of the incoming
errors synchronized by other MPI processes.
These incoming errors behave like “injected errors“ and
manifest locally again. An error propagation example is shown
in Fig 1.
Fig. 1: Error propagation example between MPI ranks. The
error injected in rank 0 will begin by propagating locally and
then contaminate the memory of other ranks.
B. Design Goal
The design of Chaser is based on the Parallel Fine-grained
Soft Error Fault Injector (PFSEFI) [18], [17] as an add-on
function. It is designed to achieve the following goals.
a) Fine-grained: The fault tracer should be able to inject
faults into a designated application and instruction after spe-
ciﬁc conditions are met. This allows researchers to construct
various complex fault models to study soft errors’ impact on
the behavior of applications.
b) Accountable: The fault tracer should be able to trace
how injected faults propagate within the application. By pro-
viding detailed information about traces across all MPI ranks,
researchers are able to analyze how faults impact the behavior
of an application in order to propose new resilient algorithms.
c) Flexible: The fault tracer should allow users to cus-
tomize and construct different fault models. This allows re-
searchers to design their own fault propagation experiments
without building the entire system from scratch.
d) Efﬁcient: The fault tracer should introduce minimal
performance overhead to the system, since fault injection and
propagation experiments usually requires a large number of
runs.
C. Chaser Architecture
We propose Chaser, a new fault injection framework, to
satisfy the above design goals. Figure 2 shows the overall
architecture of Chaser. Inside the virtual machine, we run the
target application and conduct fault injection on it externally
via fault injection interfaces. To provide various fault injection
capabilities, Chaser is extensively involved with the dynamic
binary translation process, which is detailed in Section III-A.
Chaser has the following key components:
Authorized licensed use limited to: Middlesex University. Downloaded on October 19,2020 at 21:20:43 UTC from IEEE Xplore.  Restrictions apply. 
356
a) Just-in-time Fault Injection: This component is able
to inject faults into the target process when the predeﬁned
conditions are met. Unlike F-SEFI [18] which rewrites the
dynamic binary translation process for every instruction to
allow fault injection, Chaser only inserts fault injection logic
when that instruction is marked as a targeted instruction by
the user. Since only a tiny portion of targeted processes are
instrumented, this design signiﬁcantly reduces the performance
overhead as demonstrated in Section IV-D. Meanwhile, the
previous works on fault injection [18], [4], [38], [26], [25]
target a speciﬁc task or fault model. This makes customization
of the fault injector very difﬁcult for users. To address this,
Chaser exports its fault injection capabilities as interfaces.
Using the exported interfaces, users can then deﬁne their own
fault models by setting the injection location, target instruction,
etc. Details are further discussed in Section III-B.
b) Fault Propagation Tracing: Chaser traces the prop-
agation of faults via the dynamic tainting technique [42]. It
leverages DECAF’s bitwise tainting [21], [22] and extends
its tainting for ﬂoating point instructions. While instruction
level traces can record the most complete information about
fault propagation, the performance penalty is unacceptable in
practice. In contrast to instruction level tracing, Chaser records
tainted memory access activity only. This design sacriﬁces the
completeness of fault propagation tracing to an acceptable
degree while incurring a reasonable performance overhead.