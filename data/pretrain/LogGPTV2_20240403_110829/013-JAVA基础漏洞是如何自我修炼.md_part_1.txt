2020/7/27 JAVA基础漏洞是如何⾃我修炼
JAVA基础漏洞是如何⾃我修炼
原创 队员编号012 酒仙桥六号部队 6⽉1⽇
这是 酒仙桥六号部队 的第 13 篇⽂章。
全⽂共计3096个字，预计阅读时⻓9分钟。
练⽓期--反射篇
众所周知，⽓是修炼的基础即反射是java的其中的⼀个⾼级特性。正是因为反射的特性
引出了后续的动态代理，AOP，RMI，EJB等功能及技术，在后续再来说下代理，RMI
等及其漏洞原理吧，在之前先来看看反射所有的原理及漏洞，那么，在修炼初期应该注
意什么问题呢？
俗俗俗俗俗俗俗俗俗俗俗俗俗俗俗话话话话话话话话话话话话话话话说说说说说说说说说说说说说说说万万万万万万万万万万万万万万万事事事事事事事事事事事事事事事开开开开开开开开开开开开开开开头头头头头头头头头头头头头头头难难难难难难难难难难难难难难难------------------------------什什什什什什什什什什什什什什什么么么么么么么么么么么么么么么是是是是是是是是是是是是是是是反反反反反反反反反反反反反反反射射射射射射射射射射射射射射射
JAVA反射机制是在运⾏状态中，对于任意⼀个类，都能够知道这个类的所有属性和⽅
法；对于任意⼀个对象，都能够调⽤它的任意⽅法和属性；这种动态获取信息以及动态
调⽤对象⽅法的功能称为java语⾔的反射机制。
在⽇常开发中，经常会遇到访问装载在JVM中类的信息，包括构造⽅法，成员变量，⽅
法，或者访问⼀个私有变量，⽅法。
修修修修修修修修修修修修修修修炼炼炼炼炼炼炼炼炼炼炼炼炼炼炼进进进进进进进进进进进进进进进⾏⾏⾏⾏⾏⾏⾏⾏⾏⾏⾏⾏⾏⾏⾏时时时时时时时时时时时时时时时------------------------------反反反反反反反反反反反反反反反射射射射射射射射射射射射射射射⽅⽅⽅⽅⽅⽅⽅⽅⽅⽅⽅⽅⽅⽅⽅法法法法法法法法法法法法法法法
反射⽅法很多只列举部分重要的来说。
获取class的字节码对象
前⾯说到反射是对运⾏中的类进⾏查询和调⽤，所以⾸先我们需要获取运⾏类的对象，
即字节码对象（可以看看JVM加载原理）。⽅式有三种来看看。
⽅式⼀：
https://mp.weixin.qq.com/s/OMXrFc7uUN8wGv6yHno3Lg 1/16
2020/7/27 JAVA基础漏洞是如何⾃我修炼
Class.forName("类的字符串名称");
⽅式⼆：
简单类名加.class来获取其对应的Class对象；
⽅式三：
Object类中的getClass()⽅法的。
三种区别主要是调⽤者不同，以及静态和动态区别（java是依需求加载，对于暂时不⽤
的可以不加载）。
获取构造函数
getConstructors()//获取所有公开的构造函数
getConstructor(参数类型)//获取单个公开的构造函数
getDeclaredConstructors()//获取所有构造函数
getDeclaredConstructor(参数类型)//获取⼀个所有的构造函数
获取名字
可以反射类名。
getName()//获取全名 例如：com.test.Demo
getSimpleName()//获取类名 例如：Demo
获取⽅法
getMethods()//获取所有公开的⽅法
获取字段
getFields()//获取所有的公开字段
getField(String name)//参数可以指定⼀个public字段
getDeclaredFields()//获取所有的字段
getDeclaredField(String name)//获取指定所有类型的字段
https://mp.weixin.qq.com/s/OMXrFc7uUN8wGv6yHno3Lg 2/16
2020/7/27 JAVA基础漏洞是如何⾃我修炼
设置访问属性
默认为false，设置为true之后可以访问私有字段。
Field.setAccessible(true)//可访问
Field.setAccessible(false)//不可访问
以及Method类的invoke⽅法
invoke(Object obj, Object... args) //传递object对象及参数调⽤该对象对应的
⽅法
打打打打打打打打打打打打打打打怪怪怪怪怪怪怪怪怪怪怪怪怪怪怪修修修修修修修修修修修修修修修炼炼炼炼炼炼炼炼炼炼炼炼炼炼炼———————————————实实实实实实实实实实实实实实实战战战战战战战战战战战战战战战示示示示示示示示示示示示示示示例例例例例例例例例例例例例例例
来看⼀个简单的反射案例，可以执⾏运⾏计算器命令。
通 过 Class.forName 获 取 字 节 码 对 象 ， 调 ⽤ getMethod 获 取 到 Runtime 的
getRuntime⽅法，⽤invoke执⾏⽅法，最后同样的执⾏exec⽅法执⾏calc命令。
说到这，⼤家都熟悉，那么具体的反射漏洞有哪些，我们来看看。
反反反反反反反反反反反反反反反射射射射射射射射射射射射射射射攻攻攻攻攻攻攻攻攻攻攻攻攻攻攻击击击击击击击击击击击击击击击
通过反射来突破单例模式
我们知道单例模式的特点就是单例类只能有⼀个实例，但是不好的代码就可以突破单例
限制，⽐如：
https://mp.weixin.qq.com/s/OMXrFc7uUN8wGv6yHno3Lg 3/16
2020/7/27 JAVA基础漏洞是如何⾃我修炼
运⾏结果：
私有的构造⽅法，类变量，可以看出代码实现了单例的要求，new的时候没有创建对
象，就新建，有的话就返回这个对象，但是通过反射（反序列化也可以突破，这⾥只说
反射）可以直接调⽤private⽅法创建实例。
运⾏结果：
所以我们要在构造⽅法的时候就要判断是不是已经创建过对象，如果有就主动抛出异
常。
https://mp.weixin.qq.com/s/OMXrFc7uUN8wGv6yHno3Lg 4/16
2020/7/27 JAVA基础漏洞是如何⾃我修炼
突破瓶颈---通过反射来突破泛型限制
我们知道泛型的特点就是明确规范参数使⽤的类型，但是不好的代码就可以突破单例限
制。
就会抛出异常。
同样的我们可以通过反射：
https://mp.weixin.qq.com/s/OMXrFc7uUN8wGv6yHno3Lg 5/16
2020/7/27 JAVA基础漏洞是如何⾃我修炼
结果如下。
这种我们就需要添加⿊名单来禁⽌反射，当然也可以绕过。
利⽤反射链的序列化漏洞
以前我们经常能看⻅这种构造的序列化漏洞的⽂章。
先来看看部分实现代码：
1 Transformer[] transformers = new Transformer[] {
2
3 new ConstantTransformer(Runtime.class),
4
5 new InvokerTransformer(
6
7 "getMethod",
8
9 new Class[] {String.class, Class[].class },
10
11 new Object[] {"getRuntime", new Class[0] }
12
13 ),
https://mp.weixin.qq.com/s/OMXrFc7uUN8wGv6yHno3Lg 6/16
2020/7/27 JAVA基础漏洞是如何⾃我修炼
14
15 new InvokerTransformer(
16
17 "invoke",
18
19 new Class[] {Object.class,Object[].class },
20
21 new Object[] {null, null }
22
23 ),
24
25 new InvokerTransformer(
26
27 "exec",
28
29 new Class[] {String[].class },
30
31 new Object[] { commandstring }
32
33 //new Object[] { execArgs }
34
35 )
36
37 };
下⾯是InvokerTransformer类的transform⽅法的源码。
战后总结分析：
https://mp.weixin.qq.com/s/OMXrFc7uUN8wGv6yHno3Lg 7/16