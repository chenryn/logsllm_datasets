# NEUZZ源码阅读笔记（二）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
摸鱼摸了一段时间，跑去弄大创和信安作品赛去了，现在重新回来填坑，抱歉 > 0)
        switch (opt) {
          case 'i': /* input dir */
            if (in_dir) perror("Multiple -i options not supported");
            in_dir = optarg;
            break;
          case 'o': /* output dir */
            if (out_dir) perror("Multiple -o options not supported");
            out_dir = optarg;
            break;
          case 'l': /* file len */
             sscanf (optarg,"%ld",&len);
             /* change num_index and havoc_blk_* according to file len */
             if(len > 7000)
             {
                 num_index[13] = (len - 1);
                 havoc_blk_large = (len - 1);
             }
             else if (len > 4000)
             {
                 num_index[13] = (len - 1);
                 num_index[12] = 3072;
                 havoc_blk_large = (len - 1);
                 havoc_blk_medium = 2048; 
                 havoc_blk_small = 1024;
             }
             printf("num_index %d %d small %d medium %d large %d\n", num_index[12], num_index[13], havoc_blk_small, havoc_blk_medium, havoc_blk_large);
             printf("mutation len: %ld\n", len);
             break;
        default:
            printf("no manual...");
        }
        setup_signal_handlers();
        check_cpu_governor();
        get_core_count();
        bind_to_free_cpu();
        setup_shm();
        init_count_class16();
        setup_dirs_fds();
        if (!out_file) setup_stdio_file();
        detect_file_args(argv + optind + 1);
        setup_targetpath(argv[optind]);
        copy_seeds(in_dir, out_dir);
        init_forkserver(argv+optind);
        start_fuzz(len);   
        printf("total execs %ld edge coverage %d.\n", total_execs, count_non_255_bytes(virgin_bits));
        return;
    }
这里main函数一开始就是在解析命令行，基本上和AFL里面有的参数概念一致
  * `-i`：设定输入种子文件夹
  * `-o`：输出文件夹也就是造成Crash的输入保存文件夹
  * `-l`：设定待测文件的大小，文件`len`由`neuzz_in`中的最大文件镜像头获得，可以使用如下命令获得`ls -lS neuzz_in|head`
我们先看看启动`neuzz.c`的命令行指令
    #./neuzz -i in_dir -o out_dir -l mutation_len [program path [arguments]] @@
    $ ./neuzz -i neuzz_in -o seeds -l 7506 ./readelf -a @@
  * `neuzz_in`：是`nn.py`生成的新测试样例
  * `seeds`：是`neuzz`输出的能产生Crash的输入供给`nn.py`进行训练
####  1.1.1 num_index
然后这里我们重点看一下`-l`选项
    case 'l': /* file len */
        sscanf (optarg,"%ld",&len);
        /* change num_index and havoc_blk_* according to file len */
        if(len > 7000)
        {
            num_index[13] = (len - 1);
            havoc_blk_large = (len - 1);
        }
        else if (len > 4000)
        {
            num_index[13] = (len - 1);
            num_index[12] = 3072;
            havoc_blk_large = (len - 1);
            havoc_blk_medium = 2048; 
            havoc_blk_small = 1024;
        }
        printf("num_index %d %d small %d medium %d large %d\n", num_index[12], num_index[13], havoc_blk_small, havoc_blk_medium, havoc_blk_large);
        printf("mutation len: %ld\n", len);
        break;
这里主要是程序需要根据程序的大小去修改`num_index`和`havoc_blk_*`两个变量，那么这两个变量是什么东西呢
其中`num_index`定义在
    /* more fined grined mutation can have better results but slower*/
    //细化的变异可以产生更好的结果，但速度较慢
    //int num_index[23] = {0,2,4,8,16,32,64,128,256,512,1024,1536,2048,2560,3072, 3584,4096,4608,5120, 5632,6144,6656,7103};
    /* default setting, will be change according to different file length */
    //默认设置，将根据不同的文件长度进行更改
    int num_index[14] = {0,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192};
这些应该是选择需要种子变异的位置，这里14个就是代表有14种位置可以选择变异，细化变异就是指提供更多不同的位置，然后这个index也是将根据不同的文件长度进行更改，具体规则就是
  * 如果文件长度大于7000：index[13]最后一位变为文件长度-1
  * 如果文件长度大于4000小于7000：index[13]最后一位变为文件长度-1，且index[12] = 3072
其实`num_index`是为了实现AFL中的bitflip变异操作，拿到一个原始文件，打头阵的就是bitflip，而且还会根据翻转量/步长进行多种不同的翻转
####  1.1.2 havoc_blk
这里看完了`num_index`我们来看看`havoc_blk_*`这个变量是什么意思，这个变量定义是在
    /* Caps on block sizes for inserion and deletion operations. The set of numbers are adaptive to file length and the defalut max file length is 10000. */
    /* default setting, will be changed later accroding to file len */
    int havoc_blk_small = 2048;
    int havoc_blk_medium = 4096;
    int havoc_blk_large = 8192;
    #define HAVOC_BLK_SMALL     2048
    #define HAVOC_BLK_MEDIUM    4096
    #define HAVOC_BLK_LARGE     7402
这里需要引入AFL中变异的概念，总的来讲，AFL维护了一个队列(queue)，每次从这个队列中取出一个文件，对其进行大量变异，并检查运行后是否会引起目标崩溃、发现新路径等结果。AFL其中一种变异方式就叫做havoc，中文意思是“大破坏”，此阶段会对原文件进行大量变异
havoc，顾名思义，是充满了各种随机生成的变异，是对原文件的“大破坏”。具体来说，havoc包含了对原文件的多轮变异，每一轮都是将多种方式组合（stacked）而成：
  * 随机选取某个bit进行翻转
  * 随机选取某个byte，将其设置为随机的interesting value
  * 随机选取某个word，并随机选取大、小端序，将其设置为随机的interesting value
  * 随机选取某个dword，并随机选取大、小端序，将其设置为随机的interesting value
  * 随机选取某个byte，对其减去一个随机数
  * 随机选取某个byte，对其加上一个随机数
  * 随机选取某个word，并随机选取大、小端序，对其减去一个随机数
  * 随机选取某个word，并随机选取大、小端序，对其加上一个随机数
  * 随机选取某个dword，并随机选取大、小端序，对其减去一个随机数
  * 随机选取某个dword，并随机选取大、小端序，对其加上一个随机数
  * 随机选取某个byte，将其设置为随机数
  * 随机删除一段bytes
  * 随机选取一个位置，插入一段随机长度的内容，其中75%的概率是插入原文中随机位置的内容，25%的概率是插入一段随机选取的数
  * 随机选取一个位置，替换为一段随机长度的内容，其中75%的概率是替换成原文中随机位置的内容，25%的概率是替换成一段随机选取的数
  * 随机选取一个位置，用随机选取的token（用户提供的或自动生成的）替换
  * 随机选取一个位置，用随机选取的token（用户提供的或自动生成的）插入
这里NEUZZ这是提供了一个限制havoc操作的大小，限制插入和删除操作的块大小，默认最大文件长度为10000。然后也会根据文件的长度做出相应的调整
###  1.2 初始环境配置
这里其实和AFL的结构是几乎一致的，主要是为了给还没阅读过AFL源码的朋友再过一遍
####  1.2.1 setup_signal_handlers
顾名思义设置信号量参数，注册必要的信号处理函数，设置信号句柄
    /* Set up signal handlers. More complicated that needs to be, because libc on
       Solaris doesn't resume interrupted reads(), sets SA_RESETHAND when you call
       siginterrupt(), and does other stupid things. */
    void setup_signal_handlers(void) {
      struct sigaction sa;
      sa.sa_handler   = NULL;
      sa.sa_flags     = SA_RESTART;
      sa.sa_sigaction = NULL;
      sigemptyset(&sa.sa_mask);
      /* Various ways of saying "stop". */
      sa.sa_handler = handle_stop_sig;
      sigaction(SIGHUP, &sa, NULL);
      sigaction(SIGINT, &sa, NULL);
      sigaction(SIGTERM, &sa, NULL);
      /* Exec timeout notifications. */
      sa.sa_handler = handle_timeout;
      sigaction(SIGALRM, &sa, NULL);
      /* Things we don't care about. */
      sa.sa_handler = SIG_IGN;
      sigaction(SIGTSTP, &sa, NULL);
      sigaction(SIGPIPE, &sa, NULL);
    }
  * SIGHUP/SIGINT/SIGTERM 
    * hangup/interrupt/software termination signal from kill
    * 主要是”stop”的处理函数
    * handle_stop_sig 
      * 设置stop_soon为1
      * 如果child_pid存在，向其发送SIGKILL终止信号，从而被系统杀死。
      * 如果forksrv_pid存在，向其发送SIGKILL终止信号
  * SIGALRM 
    * alarm clock
    * 处理超时的情况
    * handle_timeout 
      * 如果child_pid>0，则设置child_timed_out为1，并kill掉child_pid
      * 如果child_pid==-1，且forksrv_pid>0，则设置child_timed_out为1，并kill掉forksrv_pid
  * SIGWINCH 
    * Window resize
    * 处理窗口大小的变化信号
    * handle_resize 
      * 设置clear_screen=1
  * SIGUSR1 
    * user defined signal 1，这个是留给用户自定义的信号
    * 这里定义成skip request (SIGUSR1)
    * handle_skipreq 
      * 设置skip_requested=1
  * SIGTSTP/SIGPIPE 
    * stop signal from tty/write on a pipe with no one to read it
    * 不关心的一些信号
    * SIG_IGN
####  1.2.2 check_cpu_governor
这里就主要是在检测CPU的环境配置，检查CPU的管理者
    /* Check CPU governor. */
    static void check_cpu_governor(void) {
      FILE* f;
      u8 tmp[128];
      u64 min = 0, max = 0;
      if (getenv("AFL_SKIP_CPUFREQ")) return;
      f = fopen("/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor", "r");
      if (!f) return;
      printf("Checking CPU scaling governor...\n");
      if (!fgets(tmp, 128, f)) perror("fgets() failed");
      fclose(f);
      if (!strncmp(tmp, "perf", 4)) return;
      f = fopen("/sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq", "r");
      if (f) {
        if (fscanf(f, "%llu", &min) != 1) min = 0;
        fclose(f);
      }
      f = fopen("/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq", "r");
      if (f) {
        if (fscanf(f, "%llu", &max) != 1) max = 0;
        fclose(f);
      }
      if (min == max) return;
      printf("Err: Suboptimal CPU scaling governor\n");
    }
这里NEUZZ已经简化了相关的CPU检查函数，如果是AF的话，会有一系列CPU检查相关的函数，主要是包括以下几个：
  * `static void get_core_count(void)`：获取核心数量
  * `static void bind_to_free_cpu(void)`：构建绑定到特定核心的进程列表。如果什么也找不到，返回-1。假设一个4k cpu的上限
  * `check_crash_handling()`：确保核心转储不会进入程序
  * `check_cpu_governor()`：检查CPU管理者
####  1.2.3 get_core_count
顾名思义，检查CPU核心数
    /* Count the number of logical CPU cores. */
    static void get_core_count(void) {
      u32 cur_runnable = 0;
    #if defined(__APPLE__) || defined(__FreeBSD__) || defined (__OpenBSD__)
      size_t s = sizeof(cpu_core_count);
      /* On *BSD systems, we can just use a sysctl to get the number of CPUs. */
    #ifdef __APPLE__
      if (sysctlbyname("hw.logicalcpu", &cpu_core_count, &s, NULL, 0)  0) {
        cur_runnable = (u32)get_runnable_processes();
    #if defined(__APPLE__) || defined(__FreeBSD__) || defined (__OpenBSD__)
        /* Add ourselves, since the 1-minute average doesn't include that yet. */
        cur_runnable++;
    #endif /* __APPLE__ || __FreeBSD__ || __OpenBSD__ */
        printf("You have %u CPU core%s and %u runnable tasks (utilization: %0.0f%%).\n",
            cpu_core_count, cpu_core_count > 1 ? "s" : "",
            cur_runnable, cur_runnable * 100.0 / cpu_core_count);