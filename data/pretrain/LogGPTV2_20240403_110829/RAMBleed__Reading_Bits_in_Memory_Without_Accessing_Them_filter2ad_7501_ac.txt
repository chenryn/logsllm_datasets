neighboring bits. Furthermore, as not every bit in DRAM can
be Ô¨Çipped via Rowhammer, we also present novel memory
massaging techniques that aim to locate and subsequently
exploit Rowhammer Ô¨Çippable bits. This enables the attacker to
read otherwise inaccessible information such as secret key bits.
Finally, as our techniques only require the attacker to allocate
and deallocate memory and to measure instruction timings,
RAMBleed allows an unprivileged attacker to read secret data
using the default conÔ¨Åguration of many systems (e.g., Ubuntu
Linux), without requiring any special conÔ¨Ågurations (e.g.,
access to pagemap, huge pages, or memory deduplication).
A. The Root Cause of RAMBleed.
RAMBleed exploits a physical phenomenon in DRAM
DIMMs wherein the likelihood of a Rowhammer induced
bit Ô¨Çip depends on the values of the bits immediately above
and below it. Bits only Ô¨Çip when the bits both immediately
above and below them are in their discharged state [13].
This is in agreement with observations by Kim et al. [34]
that hammering with a striped pattern, where rows alternate
between all zeros and all ones, generates many more Ô¨Çips than
with a uniform pattern.
Data-Dependent Bit Flips.
Put simply, bits tend to Ô¨Çip to
the same value of the bits in the adjacent rows. That is, a
charged cell is most likely to Ô¨Çip when it is surrounded by
uncharged cells. This is likely due to capacitors of opposite
charges inducing parasitic currents in one another, which cause
the capacitors to leak charge more quickly [3]. For our attack
to work, is it also crucial that bit Ô¨Çips are inÔ¨Çuenced only by
bits in the same column, and not by the neighboring bits within
the same row. This isolation is what allows us to deduce one
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:51 UTC from IEEE Xplore.  Restrictions apply. 
699
bit at a time. Cojocar et al. [13] experimentally demonstrate
this to be the case.
A Toy Example. To illustrate with a concrete example, we
introduce the notation of an x-y-z conÔ¨Åguration to describe the
situation in which three adjacent bits in the same column have
the values x, y, and z, respectively, where x, y, z ‚àà {0, 1}. The
key reasoning behind our attack is as follows.
‚Ä¢ True Cells. For cells where a one-valued bit is represented
as the cell being charged, the 0-1-0 conÔ¨Åguration is the
most likely to Ô¨Çip, changing to an all zero conÔ¨Åguration (0-
0-0) when rows of the Ô¨Årst and the last zero-valued cells
are hammered. In this case, the surrounding zero-bits in the
aggressor rows enable the bit Ô¨Çip in the victim row.
‚Ä¢ Anti Cells. For cells where a one-valued bit is represented
by an uncharged cell, a 1-0-1 conÔ¨Åguration is more likely
to Ô¨Çip and change to an all one conÔ¨Åguration (1-1-1) when
rows of the Ô¨Årst and the last one-valued cells are hammered.
Notation. We adopt Cocojar et al.‚Äôs [13] terminology of
calling 0-1-0 and 1-0-1 conÔ¨Ågurations ‚Äústripe‚Äù patterns, and
naming 1-1-1 and 0-0-0 conÔ¨Ågurations ‚Äúuniform‚Äù patterns.
Given this data dependency, we now proceed to build a read
side channel in which we read the bits in surrounding rows
by observing Ô¨Çips, or lack thereof, in the attacker‚Äôs row.
B. Memory Scrambling
One potential obstacle to building our read channel
is
that modern memory controllers employ memory scrambling,
which is designed to avoid circuit damage due to resonant
frequency [68] as well as to serve as a mitigation to cold-
boot attacks [22]. Memory scrambling applies a weak stream
cipher to the data prior to sending it to the DRAM. That is,
the memory scrambler XORs the data with the output of a
pseudo-random number generator (PRNG). The seed for the
PRNG depends on the physical address of the data and on a
random number generated at boot time [26, 43]. The PRNG
is cryptographically weak, and given access to the physical
data in the DRAMs, an adversary can reverse engineer it and
recover the contents of the memory [4, 68].
Bypassing Memory Scrambling. Under our threat model
we cannot use the techniques of Yitbarek et al. [68], as we do
not assume physical access. However, we can take advantage
of the weaknesses of the PRNG. In particular, The boot-time
random seed is identical for all rows, and the physical address
bits included in the seed are such that several adjacent rows
can have the same bits in their addresses. Thus, adjacent
rows typically use the same seed, and have the same mask
applied. Applying the same mask across multiple rows means
that adjacent bits either remain unchanged or are all inverted.
Either way, as observed by [13], striped conÔ¨Ågurations remain
striped after scrambling. Hence, writing a striped conÔ¨Åguration
to memory results in a striped conÔ¨Åguration appearing in the
DIMM, maintaining the crucial property that a bit will only
Ô¨Çip if the bits immediately above and below have the opposite
value.
C. Exploiting Data-Dependent Bit Flips
We now show how to exploit the data-dependent bit Ô¨Çips
presented above to read data without accessing it.
A Leaky Memory Layout. We begin by considering the
memory layout presented in Figure 3a, where every DRAM
row contains two 4 KiB pages. In this layout, we assume that
A0, A1, and A2 are the attacker-controlled pages containing
known data, S is a page with the victim‚Äôs secret, and R0 is
an arbitrary page. All three rows reside in the same bank.
Next, note that attacker pages A0 and A2 reside in the same
rows as the copies of S. Since DRAM row-buffers operate
at an 8 KiB granularity, accessing a value in A0 activates the
entire Ô¨Årst row, including the page containing the secret S.
Similarly, accessing a value in A2 activates the entire third row,
again including the page that contains S. Thus, by repeatedly
accessing A0 and A2, the attacker can indirectly use the victim
pages containing S for hammering, despite not having any
permissions to access them.
Hammering. By hammering the attacker-controlled pages A0
and A2, the attacker induces analog disturbance and interaction
between S and A1. Page A1 also belongs to the attacker, who
can therefore detect bit Ô¨Çips in it. From these bit Ô¨Çips, the
attacker can infer the values of bits in S.
Reading Secret Bit Values.
Given a page P , we denote
by P [i] the i-th bit in P , where i ‚àà {0, 1, . . . , 32766, 32767}.
At a high level, given a known Ô¨Çippable bit A1[i] in the page
A1, we can read the corresponding bit S[i] (i.e., the bit at the
same offset within the frame) in S as follows:
1) Initialize. Assuming that the bits are true cells, the attacker
Ô¨Årst populates all of A1 with ones before hammering.
2) Hammer.
The attacker repeatedly reads her own pages
A0 and A2, thereby using the victim‚Äôs secret-containing
pages to perform double-sided hammering on A1.
3) Observe. After hammering, the attacker reads the value of
the bit A1[i], which is accessible to her because the page
A1 is located inside the attacker‚Äôs own private memory
space. We argue that after hammering, the value of A1[i]
is equal to the value of S[i]. Indeed, if S[i] equals 0, then
before hammering A1[i] would have been in the center of a
0-1-0 stripe conÔ¨Åguration. Since A1[i] sits in the center of
a Ô¨Çippable stripe conÔ¨Åguration, A1[i] will Ô¨Çip from one to
zero after hammering. Conversely, if S[i] equal to 1, then
A1[i] will be in the center of a 1-1-1 uniform conÔ¨Åguration,
and will retain its value of 1 after hammering. Thus, in
both cases, the attacker reads A1[i] from her own private
memory after hammering, which directly reveals S[i].
Double-sided RAMBleed.
In the case of anti-cells, the
only change we make is that in step 1, we populate A1 with
zeros instead of ones. Thus, by observing bit Ô¨Çips in her own
pages, the attacker can deduce the values of surrounding cells.
Since the secret S surrounds A1 from both sides, we call this
‚Äúdouble-sided RAMBleed‚Äù.
Single Sided RAMBleed.
Figure 3b presents the memory
layout for what we call ‚Äúsingle-sided RAMBleed‚Äù, which
differs from the double-side case only in the bottom right
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:51 UTC from IEEE Xplore.  Restrictions apply. 
700


	



	













	



	



(a) Double-sided Rambleed. Here, the sampling page (A1) is
(b) Single-sided Rambleed. Here, the sampling page (A1) is
sandwiched between two copies of S.
neighbored by the secret-containing page (S) on a single side.
Fig. 3: Page layout for reading out the victim‚Äôs secret. Each cell represents a 4 KiB page, meaning that each row represents
an 8 KiB row in a DRAM bank. The attacker repeatedly accesses her row activation pages A0 and A2, activating the top and
bottom rows. She then reads out corresponding bits in page S by observing bit Ô¨Çips in the sampling page A1.
frame; instead of another copy of S, an arbitrary page R1
resides below A1. With this conÔ¨Åguration, we can still read
out bits of S by following the same steps as in the double-
sided scenario, albeit with reduced accuracy. The reduction
in accuracy is because the value of R1[i] may differ from
that of S[i]. Assuming a uniform distribution of bits in R1,
in half of the cases, the starting conÔ¨Åguration is one of 1-
1-0 and 0-1-1, which are neither striped nor uniform. With
such conÔ¨Ågurations, bits tend to Ô¨Çip less than with striped
conÔ¨Ågurations introducing uncertainty to the read values. Yet,
in half of the cases R1[i]=S[i], resulting in the same outcome
as for the double-sided RAMBleed scenario.
While double-sided RAMBleed maximizes the disturbance
interactions between the secret bits and A1, it is also more
challenging to execute in practice because it requires two
copies of the same data in memory. Nevertheless, in Sec-
tion VII we show how an attacker can reliably obtain two
copies of S, demonstrating an end-to-end attack on OpenSSH.
V. MEMORY MASSAGING
The descriptions from Section IV assume that the attacker can
place the victim‚Äôs secrets in the layout shown in Figure 3,
where A0‚ÄìA2 are allocated to the attacker, and that
the
attacker knows which bits can Ô¨Çip and in which direction. We
now present novel memory massaging primitives that achieve
both goals without requiring elevated permissions or special
operating system conÔ¨Åguration settings (i.e., avoiding huge
pages, page map access, memory deduplication).
A. Obtaining Physically Consecutive Pages
As we can see in Figure 3, the attack requires pages located
in three consecutive 8 KiB rows in the same bank. While
this task was previously achieved using the Android ION
allocator [61], no such interface is available in non-Android
Linux. Instead, we exploit the Linux buddy allocator [17] to
allocate a 2 MiB block of physically consecutive memory. As
the same-row-index size (See Section II-A) on our system is
256 KiB, we are guaranteed to be able to build the layout of
Figure 3 using some of the pages in the block provided by
the allocator. We now proceed to provide a short overview of
Linux‚Äôs buddy allocator. See Gorman [17] for further details.
Linux Buddy Allocator. Linux uses the buddy allocator to
allocate physical memory upon requests from userspace. The
kernel stores memory in physically consecutive blocks that
are arranged by order, where the nth order block consists of
4096 ¬∑ 2n physically consecutive bytes. The kernel maintains
free lists for blocks of orders between 0 and 10. To reduce
fragmentation, the buddy allocator always attempts to serve
requests using the smallest available blocks. If no small block
is available, the allocator splits the next smallest block into
two ‚Äúbuddy‚Äù halves. These halves are coalesced into one block
when they are both free again.
The user space interface to the buddy allocator, however,
can only make requests for blocks of order 0. If, for example,
a user program requests 16 KiB, the buddy allocator treats
this as four requests for one 4 KiB block each. This means
that irrespective of their size, user space requests are Ô¨Årst
handled from the free list of 0 order blocks. Only once the
allocator runs out of free 0 order blocks, it will start serving
memory requests by splitting larger blocks to generate new 0
order blocks. Thus, while obtaining a virtually consecutive
2 MiB block is trivial and only requires a single memory
allocation, obtaining a physically consecutive block requires
a more careful strategy, which we now describe.
Obtaining a Physically Consecutive 2 MiB Block. We now
exploit the deterministic behavior of the buddy allocator to
coerce the kernel into providing us with physically consecutive
memory, using the following steps:
‚Ä¢ Phase 1: Exhausting Small Blocks.
First, we al-
locate memory using the mmap system call with the
MAP POPULATE Ô¨Çag, which ensures that the kernel ea-
gerly allocates the pages in physical memory, instead of
the default lazy strategy that waits for them to be accessed
Ô¨Årst. Next, we use the /proc/pagetypeinfo interface
to monitor available block sizes in the kernel free lists, and
continue to allocate memory until less than 2 MiB of free
space remains in blocks of order less than 10.
‚Ä¢ Phase 2: Obtaining a Consecutive 2 MiB Block. Once
free space in blocks of order below 10 is less then 2 MiB,
we make two requests of size 2 MiB each. Thus, to serve the
Ô¨Årst request after exhausting the smaller blocks, the kernel
needs to split one of the 10th order blocks (whose size
is 4 MiB each). This leaves more than 2 MiB in the free
list, where all such space comes from the newly-split 4 MiB
block, and is served in-order. Thus, the memory allocated for
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:51 UTC from IEEE Xplore.  Restrictions apply. 
701
the second request consists of consecutive physical memory
blocks, which is exactly what we require.
While the region we obtain in the second allocation is phys-
ically consecutive, this approach does not guarantee that the
obtained area will be 2 MiB-aligned in the physical memory.
Thus, to use the obtained region for Rowhammer, we require
an additional step to recover more information about
the
physical address of the obtained 2 MiB region.1
Recovering Physical Addressing Bits.