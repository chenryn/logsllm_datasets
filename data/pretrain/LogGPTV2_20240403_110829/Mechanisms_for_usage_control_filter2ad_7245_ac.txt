u∈{v :ucmechs|(e reﬁnesEv v .ua∨v .ua=(nil,∅))∧v .m=md}
TRY ((e, j )) ∈ (µ(i))(t) ∧ e ∈ Ev \ {m : Mechanism | m ∈ ucmechs • m.ua} • (e, j )}
− − −plus noninterference constraints − −−
Figure 1: Possible eﬀects of an inhibitor
one per conjunct. First, the eﬀect of applying mechanisms
at most adds events. Second, the resulting trace satisﬁes
always(u.ψ) for all mechanisms u in the system. Third,
those desired usages for which no mechanism was applicable
are transformed into actual usages, unless their transforma-
tion would render a mechanism applicable. The intuition
behind the formalization is that if a desired usage e occurs
and no mechanism with a trigger that is reﬁned by e is ap-
plicable (because all conditions ϕ do not hold), then either
the actual usage is part of the trace, or adding this event
would make one of the mechanisms applicable. We quantify
over all potentially applicable mechanisms even though this
is forbidden by the interference conditions described below;
this is done to cater for relaxations of those conditions.
The motivation for the third case, and its complexity, is
as follows. Consider an inhibitor i with condition i.ϕ =
¬−repmax −(3, Efst (e)), for some event e. This inhibitor en-
sures that e happens at most three times. Consequently,
i.ψ = (Tfst (e) ∧ i.ϕ) ⇒ ¬Efst (e). Let e = (play,{(name,
123 )}) and both e1 = (play,{(name, 123 ), (device, 1 )}) and
e2 = (play, (name, 123 ), (device, 2 )}) be reﬁnements of e.
Furthermore, let s denote a trace with (s, 1) |=f Tfst (e),
(s, 2) |=f Tfst (e), and (s, 3) |=f Tfst (e1) ∧ Tfst (e2) (Fig. 1
(a); for simplicity’s sake, we neither consider maximum re-
ﬁnements here nor do we show the (nil , ∅) events). In other
words, at time 3, there are two concurrent desired play
events on diﬀerent devices. Applying i will add (e, start)
to both s(1) and s(2) because ¬i.ϕ holds at both times, and
adding the events does not invalidate ¬i.ϕ. Furthermore,
(s, 3) |=f − ¬ i.ϕ, i.e., the inhibitor is not applicable at time
3 either.
Now, to satisfy ¬i.ϕ, an inhibitor could simply prohibit
both (e1 , start) and (e2 , start) at time 3 (Fig. 1 (b)). How-
ever, this seems undesirable from the consumer’s perspective
who has agreed to a policy stating that a movie must not
be played more than three (rather than two) times. The
inhibitor could also allow either (e1 , start) or (e2 , start) at
time 3, but not both, also satisfying ¬i.ϕ (Figs. 1 (c) and
(d)). When adding both (e1 , start) and (e2 , start) to s(3),
then the resulting trace would violate ¬i.ϕ (Fig. 1 (e)). Our
deﬁnition of µ ensures that either one from Figs. 1 (c) and
(d) is chosen non-deterministically (choosing none would in-
validate constraint 2). In essence, the problem is that we
have to express that “if, under a given condition, an event
was added, some formula must be true”, where adding the
event may in itself invalidate the condition. The problem is
thus not bound to the fact that we allow for parallel occur-
rences of events that are reﬁnements of the same event.
Mechanisms are underspeciﬁed in that they can add arbi-
(cid:86)
trary events, as long as the respective properties are not vio-
lated. That means that for a trace i, the set {o : Trace • ∀ t :
u∈ucmechs u.ψ ∧ . . .} contains
N • i(t) ⊆ o(t) ∧ (o, t) |=f ±
those traces that look like i, but may contain additional
events and yet satisfy the formula ψ of each mechanism.
We hence require the eﬀect of applying a set of mechanisms
to be minimal, ensured by constraint 3. Constraints 2 and 3
together deﬁne the function µ. Minimal traces need not be
unique. Constraint 4 removes the remaining TRY (·) events
and transforms the desired usages that are not controlled
by any mechanism into the respective actual usages. This
deﬁnes function µ
∗
.
Usage-Controlled Systems. Thus far, the “original”
traces of a system have not been related to the usage-control-
led ones. We also have not provided basic constraints such
as the uniqueness of names, activation signals, etc. This is
now done in the schema UCSystem, which completes our
description of usage control mechanisms. Traces is the set
of traces that are possible in the unprotected system, i.e.,
without any mechanisms in place; we assume all usages to
be desired usages. UCTraces is the set of traces after appli-
cation of the mechanisms given by Es ∪ Ms ∪ Is ∪ Ds—each
of which is equipped with a substitution for the variables oc-
243
(d){TRY((e,start))}{TRY((e,start))}231{TRY((e1,start)),TRY((e2,start))}(a){(e,start), TRY((e,start))}{(e1,start), TRY((e1,start)),TRY((e2,start))}231{(e,start), TRY((e,start))}(c){(e,start), TRY((e,start))}{(e,start), TRY((e,start))}231{TRY((e1,start)),TRY((e2,start))}(b){(e,start), TRY((e,start))}{(e,start), TRY((e,start))} TRY((e1,start)),TRY((e2,start))}{(e1,start),(e2,start),231(e){(e,start), TRY((e,start))} TRY((e1,start)),TRY((e2,start))}{(e2,start),231{(e,start), TRY((e,start))}UCSystem
Traces : P Trace; UCTraces : P Trace; Es : P Executor ; Ms : P Modiﬁer ;
Mechs : CombinedMechanism[Es/E , Ms/M , Is/I , Ds/D]
∀ s : Trace; e : IndEv | s ∈ Traces ∪ UCTraces ∧ e ∈
∀ s : Trace; e : DesIndEv | s ∈ Traces ∪ UCTraces ∧ e ∈
∀ s : Trace; t : N; e : IndEv | s ∈ UCTraces ∧ getclass(e) = usage • e ∈ s(t) ⇒ TRY (e) ∈ s(t)
Traces ⊆ ValidOriginalTraces ∩ TUniqueActivations ∩ ValidNames(Obls); Obls ∈ UniqueObls
UCTraces = {s : Trace | s ∈ Traces • Mechs. µ∗(s)}
ran(s) • ∀ f : Ev • f reﬁnesEv e.1 ⇒ f = e.1
(cid:91)
(cid:91)
Is : P Inhibitor ; Ds : P Delayer ; Obls : P Obligation
ran(s) • ∀ f : Ev • f reﬁnesEv (TRY ∼(e)).1 ⇒ f = (TRY ∼(e)).1
curring in formulae and triggering actions. Obls denotes the
obligations relevant to the system, i.e, those that will poten-
tially be activated. This schema speciﬁes that a UCSystem
has the following properties. (i) If an event occurs in a trace,
all its parameters have been speciﬁed (e.1 denotes the ﬁrst
component of the IndEv e, hence the Ev ; see constraint 1).
(ii) If a desired event occurs in a trace, all the parameters
of the respective event have been speciﬁed. (iii) For all ac-
tual usages, there is a respective desired usage (constraint
3). (iv) A desired nil event takes place in each step, in order
to allow for the activation of mechanisms without triggering
actions. Each ongoing event must be preceded by a cor-
responding start event.
In the original traces, all usages
are desired usages. All this is achieved by the deﬁnition of
set ValidOriginalTraces. (v) Each activation occurs at most
once per trace (TUniqueActivations). (vi) Activation events
must relate to the sets of relevant obligations of the UCSys-
tem, namely Obls (function ValidNames).
Items (iv)-(vi)
motivate the fourth constraint; we omit a deﬁnition of the
conditions for brevity’s sake. (vii) Obligation names must
be unique (UniqueObls). (viii) The set of usage-controlled
traces, UCTraces, consists of the original traces, with all
mechanisms being applied (constraint 6).
4. RELATED WORK
UCON [4] adds the notion of ongoing usage to access
control. UCON assumes that the data never leaves the
data provider’s realm. This facilitates control as there is
no explicit and consequential distinction between providers
and consumers; one consequence is that UCON policies are
device-dependent. This is in contrast to our distributed ap-
proach where data is given away. Possibly closest to our
work is that of Zhang et al.
[5] who deﬁne an obligation
language for UCON where ongoing access models can be
speciﬁed. Since UCON works with (only) one reference
monitor, the fundamental abstraction of mechanisms is not
introduced (even though their onA1 model essentially cor-
responds to our delayers, the onA2 and onA3 models cor-
respond to our executors, and their pre models do what our
inhibitors do). Modiﬁers are not handled. Furthermore, be-
cause of the TLA-based declarative perspective, the authors
specify properties of usage-controlled traces but not how to
enforce them; there is no notion of “active” mechanism like
ours. All cited models have not been applied to any decision
or synthesis problems, and they do not cater for the conﬁg-
uration of mechanisms and the notion of event reﬁnement.
Ligatti et al. propose edit automata for enforcing security
policies [3]. Edit automata are similar to our work in that
they represent trace transformers; our inhibitors have the
same eﬀect as their suppression automata, and our execu-
tors and modiﬁers are similar to their insertion automata.
Delayers are not treated in the theoretical model. The main
diﬀerence with our work is that our approach is logic-based
rather than automaton-based. Edit automata neither cater
for reﬁnements of events nor for concurrent events.
5. CONCLUSIONS
We have presented a model of consumer-side mechanisms
for distributed usage control. This model can be used to
formally check if a set of mechanisms is able to enforce a
given obligation and to check interference of mechanisms
[2]. Our speciﬁcation of mechanisms as trace transformers
is intuitive and allows systems to be speciﬁed independently
of any usage control mechanisms: the system’s deﬁnition
need not encompass the possible eﬀects of any mechanisms.
We believe that the complexity of our formalization of
mechanisms is of an essential, rather than an accidental, na-
ture and reﬂects the complexity inherent in the problem do-
main in its full generality. Restricting usage control to mere
inhibition, omitting parameters in mechanisms, not catering
for usages that extend over more than one time step, ignor-
ing interference of mechanisms, and deﬁning mechanisms as
trace properties rather than trace transformers would sig-
niﬁcantly simplify our model. However, this would be an
over-simpliﬁcation, preventing answers to many relevant and
interesting research and development problems.
The notion of a secure data store is of course critical and
may seem like a strong assumption. However, current trends
in operating systems, hardware, trusted platform technol-
ogy, and approaches to DRM are clear steps towards the
existence of such secure data stores. A second assumption
relates to the “dynamic” scenario: if a provider applies the
decision procedures as described in this paper, then he must
possess trustworthy information about the consumer’s mech-
anisms.
It seems likely that this could also be achieved
using trusted platform technology and attestation mecha-
nisms. We are currently working on the problem of rights
delegation.
6. REFERENCES
[1] M. Hilty, A. Pretschner, D. Basin, C. Schaefer, and
T. Walter. A Policy Language for Usage Control. In
Proc. ESORICS, pages 531–546, 2007.
[2] M. Hilty, A. Pretschner, C. Schaefer, and T. Walter.
Enforcement for Usage Control: A System Model and a
Policy Language for Distributed Usage Control.
Technical Report I-ST-20, DoCoMo Euro-Labs, 2006.
[3] J. Ligatti, L. Bauer, and D. Walker. Edit Automata:
Enforcement Mechanisms for Run-time Security
Policies. Intl. J. of Inf. Security, 4(1-2):2–16, 2 2005.
[4] J. Park and R. Sandhu. The UCON ABC Usage
Control Model. ACM Transactions on Information and
Systems Security, 7:128–174, 2004.
[5] X. Zhang, J. Park, F. Parisi-Presicce, and R. Sandhu.
A logical speciﬁcation for usage control. In Proc.
SACMAT, pages 1–10, 2004.
244