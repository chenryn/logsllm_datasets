## Page 112
timeit工具执行一段代码数次，然后报告最佳运行所花费的时间。下面是在IPytnon中运
def run_re():
#I/usr/bin/env python
例3-15：re非编译代码性能检测
本执行情况进行检测，使你能够看到性能的差异。参见例3-15。
非编译的正则表达式，处理的文件包括50万行文本。我们运行Unix下的timeit工具对脚
在以下的示例中，我们运行了一个简单的包括正则表达式的脚本，脚本中使用了编译和
对象。
例3-16是相同的正则表达式示例，只是这里使用re.compile()来创建一个编译的模式
以下是使用Unix的time工具对相同代码的测试结果：
内重复运行一段相同的代码的原因，是为了减少其他在同一运行时间运行的进程对测试
该示例执行run_re()函数5次，并且报告最佳运行花费了1.93秒/次。timeit在一段时间
行Python的timeit工具来执行这段代码结果：
结果的影响。
importre
8
return (lines, match_count)
infile = open('large_re_file.txt', 'r')
 pattern = 'pDq'
jmjones@dink:~/codes time python re_loop_nocompile.py
5 loops,best. of 3: 1.93 s per loop
In [2]: timeit -n 5 re_loop_nocompile.run_re()
In [1]: import re_loop_nocompile
print'MATCHES::', match_count
print
for line in infile:
match_count=0
sys 0m0.163s
user 0m1.888s
real 0m2.113s
match = re.search(pattern, line)
if match:
第3章
'LINES::
match_count
match_count += 1
lines
=run_re()
www.TopSage.com
X
PDG
---
## Page 113
In [2]: raw_pattern = I'\b[a-z]+\b'
In [1]: import re
例3-17：原始字符串与正则表达式.
符串。例3-17显示了在正则表达式中使用的原始字符串。
正如在这一章前面部分所讨论的，原始字符串可以用于表示不对转义序列进行解析的字
式的习惯。
表明的，它只花费了一半的运行时间。因此，我们强烈建议养成创建编译后的正则表达
使用Unix的time工具运行相同的脚本，
很明显，
在IPython中使用Python的timeit工具运行该脚本，所产生的结果如下：
def run_re():
import re
#!/usr/bin/env python
例3-16：re编译代码性能检测
real 0m0.996s
In [4]: timeit -n 5 re_loop_compile.run_re()
In [3]: import re_loop_compile
sys 0m0.154s
user0m0.836s
print 'MATCHES::', match_count 
print
lines,
return (lines, match_count)
for line in infile:
infile = open('large_re_file.txt', 'r')
re_obj = re.compile(pattern)
编译版本更为优越。正如由Unix的time和Python的timeit工具所测量的结果所
lines += 1
match = re_obj.search(line)
match_count += 1
,bad,
main_
www.TopSage.com
，所产生的结果如下：
文本199
8
PDG
---
## Page 114
对于使用non_raw_pattern匹配字符串的问题，正如下面对单词“little”所做的操作一
界，而non_raw_pattern根本没有任何匹配。raw_pattern将“\b”识别为两个字符，
了单个的小写单词。值得注意的是，raw_patern匹配了在some_string中合适的单词边
Out[6]:[]
In [6]: re.findall(non_raw_pattern, some_string)
[.sp1om,‘,a.‘,ma,‘e.]:[s]ano
In [5]: re.findall(raw_pattern, some_string)
In [4]: some_string = 'a few little words'
In [3]: non_raw_pattern = '\b[a-z]+\b'
匹配。findall()匹配模式返回的数据结构类型将取决于模式是否定义了一个组。
四个主要的也是最经常使用的正则表达式方法（或者称为函数）有findall()，
地利用包含在正则表达式库中的强大功能。
对正则表达式强大功能的这种有限使用就能满足我们的需要了。其他时候，你需要更多
如果想查看完整的由反斜杠定义的转义字符列表，参见《Python Library Reference》
为单词的边界，“\d"表示数字，"\w"表示希腊数字字符），原始字符串是非常有用的。
因此，正如你所看到的，如果希望使用这种反斜杠加指定字符的方法（例如"\b"可以作
该十六进制符号对应于退格字符，即使用转义字符"\b"插入的字符。
样，我们在其前后放置退格字符：
findall()使用非原始字符串模式进行搜索时，不会找到任何退格字符。
的退格字符。正则表式函数findall()可以使用原始字符串模式来查找单词。但是，当
正则表达式模式“\b”匹配词边界。因此在原始（raw）及普通字符串中，我们寻找到
100
比不上使用其他那几个函数那样频繁。findall()可以找到搜索字符串中指定模式的所有
finditer()，match()和search()。你或许也经常使用split()或是sub()，但很可能还是
从例3-14到例3-17，无论是正则表达式，还是我们应用的不同方法都相当简单。有时，
（http://docs.python.org/liblre-syntax.html）中的正则表达式语法一节。
In [7]: some_other_string = 'a few \blittle\b words'
第3章
www.TopSage.com
---
## Page 115
美
In[1]:importre
如果没有在正则表达式模式中定义组，但是却找到了匹配，findall()将返回一个字符串
注意：关于正则表达式的一个快捷提示：分组允许你在一个正则表达式中定义需要提取的文本。
In [
In[
例3-18：findall0简单分组
的简单示例。
个匹配，那么findall()返回一个多元列表。例如，例3-18是一个使用这种模式和字符串
第二个可能被返回的数据结构类型是一个多元列表。如果定义了一个组，并且其中有一
用“r`\bt\w*e\b:”
尾的单词（tire）。因此，所匹配的“tint tire”是正确的。如果希望去除空白，你可以使
它找到一个以“”开始的单词（tint），然后继续查找字符串，直到找到一个以“e”:结
尾的单词。但是命令“,*?”匹配所有字符包括空白。findall()搜索所有可能的匹配。
个元素包含两个单词：tint和tire。正则表达式希望匹配以“t”开始的单词和以“e”结
模式没有定义任何组，
列表。例如：
'ran'
'brown'
'big'
..:A small purple cow jumped to the moon.')
[3]: re_obj.findall('A big brown dog ran down the street.\
[2]: re_obj =re.compile(r"""(A\W+\b(big|small)\b\W+\b
...:re.VERBOSE)
·.：
In [4]: re_obj = re.compile(r'\bt\w*e\b')
In [2]: re_obj = re.compile(r'\bt.*?e\b')
In [1]:import re
3-SECT-5?imagepage=137.
域”的相关内容，或在线访问以下网址：http://safari.oreilly.com/0596528124/regex3-CHP
要获得更多信息，请参见Friedl编著的《MasteringRegularExpressions》中“通用元字符与
**
，因此findall()返回一个字符串列表。有趣的是返回列表的最后一
'tune',
www.TopSage.com
'tire']
文本丨101
---
## Page 116
In [6]: for item in re_iter:
Out[5]: 
In [5]: re_iter
In [4]: re_iter = re_obj.finditer('A big brown dog ran down the street. \
例3-19：finditerO示例
finditer()而不是findall()的同样非常简单的示例。
元素都是一个正则表达式匹配的对象，这将在本章后面进行介绍。例3-19是一个使用
是一个多元列表，而正如其名称所表明的，finditer()返回一个选代。每一次选代的
Finditer()是对findall()的略微修改，不同于findall()之处在于findall()所返回的
则表达式）的可维护性是一个非常不错的工具。
且很难阅读。re.VERBOSE函数允许写一个简单的正则表达式，这对于改善代码（包括正
不去这样做。正则表达式的难点之一是模式的描述，你想要匹配的模式通常会变得巨大
的结尾处插入注释，以记录每一个特殊的正则表达式都完成了什么，但是我们经常选择
式匹配不受分割的影响。在组之外的空白将被忽略掉。verbose允许在正则表达式每一行
式编写正则表达式字符串。这意味着可以非常简单地在整个行上分割正则表达式，而模
列组成。值得注意的是re.compile()的最后一个参数re.VERBOSE。它表示允许以余模
个语句是多元组的第一个元素，因此它是最大、最外层的组。每一个子组由多元元素序
是一个多元列表。这个多元列表的每一个元素是我们在正则表达式中定义的组之一。整
组，内层组匹配“big or small”
匹配以字母“A”开始到结尾的所有字符。在A和结束字符之间的所有字符组成了内层
血）。这似乎是许多正则表达式的常用格式。其次，模式包括明确的组嵌套。外层组
比较长，而且包括了许多非数字字符（如果你长时间盯着这些长字符串，眼晴都会充
尽管非常简单，该示例还是展示了一些重要内容。首先值得注意的是，这个简单模式
102
'street'),
'the'
padung,
'purple',
'the',
,uMOp,
.：
...:print item.groups()
...: print item
第3章
“brown or purple”等。接下来，findall()的返回值
www.TopSage.com
---
## Page 117
In [6]: re_obj.search(search_string, pos=1)
例3-21：search0和match0的开始和结束
始搜索的起始位置与结束位置。参见例3-21。
search()和match()调用接受开始和结束参数，这两个参数定义Python针对某一模式开
search_string子字符串无法在search_string起始位置开始查询。search()调用会创建
尽管search_string包括match()搜索的模式，但不能找到匹配。因为存在匹配的
In [6]:
In [5]: re_obj.match(search_string)
Out[4]: 
In [4]: re_obj.search(search_string)
In [3]: search_string =' FO0'
In [2]: re_obj = re.compile('F00')
In [1]:import re
例3-20：比较match0 与searchO
search()从指定的位置开始搜索，在指定的位置结束搜索。参见例3-20。
的差异是match()从指定位置开始进行匹配，而不会移动到字符串的任何随机位置。但
始搜索和结束搜索的位置，并且都返回一个首次匹配指定模式的匹配对象。两者之间
match()与search()提供了相似的功能。它们对字符串应用一个正则表达式，定义开
一个匹配对象。
而不是对应于匹配文本的简单的字符串列表或是多元列表。
使用finditer()而不是findall()的另一个原因是finditer()的每一项都是一个匹配对象，
存。这也意味着迭代器在访问一个序列中的元素时，在很短的时间内就可以启动。
内存，而是根据需要进行获取。因此，一个迭代器与其对应的列表相比，需要更小的内
说是轻量且功能强大的，尤其是仅需要迭代一些序列时。因为不需要将整个序列加载到
能力，而这在列表中是可以的，如some_list[2:6]。如果不考虑这个限制，迭代器可以
表，却可以这样做，如some_list[3]。这一限制的后果是你不具备将选代器进行分割的
为是错误的。原因之一是在迭代器中不能通过索引来引用某一特定元素，但对于一个列
如果之前曾经接触过选代器，你或许会把它想象成一个根据需要创建的列表。但这样认
('A big brown dog ran down the street.', 'big', 'brown', 'dog', 'ran',
'jumped',
the
www.TopSage.com
文本丨103
---
## Page 118
总之，为了有效地使用正则表达式，养成使用编译后的正则表达式对象的习惯是非
返回的元组相似。groupdict()返回一个命名组字典，组的名字通过正则表达式自身的
groups()返回一个匹配的多元组，每一元素都是模式所指定的组。这个元组与findall()
start()、end()和s pan()定义搜索字符串时模式匹配的开始和结束位置。start()返
片段。start()、end()、span()、group()和groupdict()都是特别有趣的match()方法。
本，而且可以返回一个match()对象。match()对象包含当你搜索文本时各种各样的数据
search()和match()是非常好的工具，因为它们不仅可以显示一个模式是否匹配一段文
进行显示。
果search()在搜索中出现命中
以红色显示，因此你可以循环检查文件中的每一行，看它是否匹配正则表达式，并且如
了显示效果更好，以HTML格式显示且在每一行自动换行。你想要所有的“ERROR”行
的问题是“我的模式匹配吗？”。例如，假设你正在写一段代码来读取logfiles，并且为
个问题：“我的模式第一次匹配的内容是什么？”
findall()和finditer()需要回答这样的问题：“我的模式匹配什么？”。而search()和
式，因为模式在第三个字符位置之后出现。
pos时无法匹配模式。设置结束参数endpos为3将导致search()和match()都无法匹配模
定义起始参数pos不会改变任何事情，但是为match()定义pos参数会让其匹配在不使用
参数pos是一个索引，该索引定义Python在字符串中寻找某一模式的位置。为search()
In[10]:
In [9]: re_obj.match(search_string, pos=1, endpos=3)
In [8]: re_obj.search(search_string, pos=1, endpos=3)
Out[7]: 
In [7]: re_obj.match(search_string, pos=1)
Out[6]: 
1041第3章
望更详细地了解正则表达式库，参见由AlexMartelli编著的《PythoninaNutshell》
记住，finditer()比findall()更具灵活性，因为它返回一个匹配对象的选代。如果希
常重要的。在希望查看模式匹配的文本是什么时，可以使用findall()和finditer()。
回一个整数，该整数代表字符串中模式开始进行匹配操作的位置。end()也返回一个整
，该整数代表模式匹配结束的位置。span()返回一个多元组，包括匹配的开始和结
“ERROR”的情况，你需要对该行进行格式化，用红色
www.TopSage.com
。但是最经常的，也是你真正想知道
。search（）和match（）还需要回答这
---
## Page 119
行传递。
么这么做的有什么作用呢？如果访问http://local2，浏览器会将主机名通过HTTP请求进
这允许在浏览器中输入loca12，并且将其解析为127.0.0.1，这是一个本地主机地址。那
户进行配置。修改/etc/hosts文件，加入如下所示的行：
该文件是将安装在Ubuntu上的Apache2的配置文件略作修改得到的。我们创建了虚拟用
在学习了Python的正则表达式之后，让我们进一步了解Apache的配置文件：
Apache配置文件详解
《DataCrunching》
(O'Reilly）第9章。如果希望查看一些正则表达式的实际应用，参见Greg Wilson编著的
Connection: keep-alive
Keep-Alive: 300
Accept-Charset: IS0-8859-1,utf-8;q=0.7,*;q=0.7
Accept-Language: en-us,en;q=0.5
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.8.1.13)
Host: local2
GET / HTTP/1.1
127.0.0.1
NameVirtualHost127.0.0.1:80
下面是一个HTTP对local2的请求：
ServerSignature On
CustomLog /var/log/apache2/access2.log combined
Loglevel warn
DocumentRoot /var/www2/
ServerSignature On