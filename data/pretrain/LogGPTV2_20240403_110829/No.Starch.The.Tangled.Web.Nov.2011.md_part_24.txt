example:
Hi mom!">
In this scenario, there is no compelling reason for a data: URL to behave
differently than about:blank. In reality, however, it will behave differently in
some browsers and therefore must be used with care.
 WebKit browsers In Chrome and Safari, all data: documents are given a
unique, nonaccessible origin and do not inherit from the parent at all.
 Firefox In Firefox, the origin for data: documents is inherited from the
navigating context, similar to about:blank. However, unlike with about:blank,
manually entering data: URLs or opening bookmarked ones results in
the new document inheriting origin from the page on which the naviga-
tion occurred.
 Opera As of this writing, a shared “empty” origin is used for all data:
URLs, which is accessible by the parent document. This approach is
unsafe, as it may allow cross-domain access to frames created by unre-
lated pages, as shown in Figure 10-1. (I reported this behavior to Opera,
and it likely will be amended soon.)
 Internet Explorer data: URLs are not supported in Internet Explorer
versions prior to 8. The scheme is supported only for select types of sub-
resources in Internet Explorer 8 and 9 and can’t be used for navigation.
Table 10-2 summarizes the current behavior of data: URLs.
Table 10-2: Origin Inheritance for data: URLs
Type of navigation
New page Existing non-same- Location Refresh URL entry or
origin page redirect redirect gesture
Internet (Not supported)
Explorer 6/7
Internet (Not supported for navigation)
Explorer 8/9
Firefox Inherited from caller Unique origin Inherited from
previous page
All WebKit Unique origin (Denied) Unique Unique origin
origin
Opera Shared origin (This is a bug!) (Denied) Inherited
from
parent
168 Chapter 10
Opera
Top-level document: fuzzybunnies.com
frame: data:text/html,...
Cross-domain DOM
access possible
frame: bunnyoutlet.com
frame: data:text/html,...
Figure 10-1: Access between data: URLs in Opera
Inheritance for javascript: and vbscript: URLs
Scripting-related pseudo-URLs, such as javscript:, are a very curious mecha-
nism. Using them to load some types of subresources will lead to code execu-
tion in the context of the document that attempts to load such an operation
(subject to some inconsistent restrictions, as discussed in Chapter 4). An
example of this may be
More interestingly (and far less obviously) than the creation of new
subresources, navigating existing windows or frames to javascript: URLs will
cause the inlined JavaScript code to execute in the context of the navigated
page (and not the navigating document!)—even if the URL is entered man-
ually or loaded from a bookmark.
Given this behavior, it is obviously very unsafe to allow one document
tonavigate any other non-same-origin context to a javascript: URL, as it
would enable the circumvention of all other content-isolation mecha-
nisms: Just load fuzzybunnies.com in a frame, and then navigate that frame
tojavascript:do_evil_stuff() and call it a day. Consequently, such navigation
isprohibited in all browsers except for Firefox. Firefox appears to permit it
for some reason, but it changes the semantics in a sneaky way. When the
origin of the caller and the navigation target do not match, it executes the
javascript: payload in a special null origin, which lacks its own DOM or any of
the browser-supplied I/O functions registered (thus permitting only purely
algorithmic operations to occur).
Origin Inheritance 169
The cross-origin case is dangerous, but its same-origin equivalent is not:
Within a single origin, any content is free to navigate itself or its peers to
javascript: URLs on its own volition. In this case, the javascript: scheme is hon-
ored when following links, submitting forms, calling location.assign(...), and
so on. In WebKit and Opera, Refresh redirection to javascript: will work as well;
other browsers reject such navigation due to vague and probably misplaced
script-injection concerns.
The handling of scripting URLs is outlined in Table 10-3.
Table 10-3: Origin Inheritance for Scripting URLs
Type of navigation
New page Existing Existing Location Refresh URL entry
same-origin non-same- redirect redirect or gesture
page origin page
Internet Inherited Inherited (Denied) (Denied) (Denied) Inherited
Explorer from caller from from
navigated navigated
Firefox Null context (Denied)
page page
All WebKit (Denied) Inherited from
navigated
page
Opera (Denied) Inherited from
navigated
page
On top of these fascinating semantics, there is a yet another twist unique
to the javascript: scheme: In some cases, the handling of such script-containing
URLs involves a second step. Specifically, if the supplied code evaluates prop-
erly, and the value of the last statement is nonvoid and can be converted to a
string, this string will be interpreted as an HTML document and will replace
the navigated page (inheriting origin from the caller). The logic governing
this curious behavior is very similar to that influencing the behavior of data:
URLs. An example of such a document-replacing expression is this:
javascript:"2 + 2 = " + (2+2) + ""
A Note on Restricted Pseudo-URLs
The somewhat quirky behavior of the three aforementioned classes of
URLs—about:blank, javascript:, and data:—are all that most websites need to
be concerned with. Nevertheless, browsers use a range of other documents
with no inherent, clearly defined origin (e.g., about:config in Firefox, a privi-
leged JavaScript page that can be used to tweak the browser’s various under-
the-hood settings, or chrome://downloads in Chrome, which lists the recently
downloaded documents with links to open any of them). These documents
are a continued source of security problems, even if they are not reachable
directly from the Internet.
170 Chapter 10
Because of the incompatibility of these URLs with the boundaries con-
trolled by the same-origin policy, special care must be taken to make sure
that these URLs are sufficiently isolated from other content whenever they
are loaded in the browser as a result of user action or some other indirect
browser-level process. An interesting case illustrating the risk is a 2010 bug
inthe way Firefox handled about:neterror.2 Whenever Firefox can’t correctly
retrieve a document from a remote server (a condition that is usually easy
totrigger with a carefully crafted link), it puts the destination URL in the
address bar but loads about:neterror in place of the document body. Unfortu-
nately, due to a minor oversight, this special error page would be same-origin
with any about:blank document opened by any Internet-originating content,
thereby permitting the attacker to inject arbitrary content into the
about:neterror window while preserving the displayed destination URL.
The moral of this story? Avoid the urge to gamble with the same-origin
policy; instead, play along with it. Note that making about:neterror a hierarchi-
cal URL, instead of trying to keep track of synthetic origins, would have pre-
vented the bug.
Origin Inheritance 171
Security Engineering Cheat Sheet
Because of their incompatibility with the same-origin policy, data:, javascript:, and implicit
orexplicit about:blank URLs should be used with care. When performance is not critical, it is
preferable to seed new frames and windows by pointing them to a server-supplied blank docu-
ment with a definite origin first.
Keep in mind that data: and javascript: URLs are not a drop-in replacement for about:blank,
and they should be used only when absolutely necessary. In particular, it is currently unsafe to
assume that data: windows can’t be accessed across domains.
172 Chapter 10
L I F E O U T S I D E
S A M E - O R I G I N R U L E S
The same-origin policy is the most important mecha-
nism we have to keep hostile web applications at bay,
but it’s also an imperfect one. Although it is meant to
offer a robust degree of separation between any two
different and clearly identifiable content sources, it
often fails at this task.
To understand this disconnect, recall that contrary to what common
sense may imply, the same-origin policy was never meant to be all-inclusive.
Its initial focus, the DOM hierarchy (that is, just the document object exposed
to JavaScript code) left many of the peripheral JavaScript features completely
exposed to cross-domain manipulation, necessitating ad hoc fixes. For exam-
ple, a few years after the inception of SOP, vendors realized that allowing third-
party documents to tweak the location.host property of an unrelated window is
a bad idea and that such an operation could send potentially sensitive data
present in other URL segments to an attacker-specified site. The policy has
subsequently been extended to at least partly protect this and a couple of
other sensitive objects, but in some less clear-cut cases, awkward loopholes
remain.
The other problem is that many cross-domain interactions happen
completely outside of JavaScript and its object hierarchy. Actions such as
loading third-party images or stylesheets are deeply rooted in the design of
HTML and do not depend on scripting in any meaningful way. (In principle,
it would be possible to retrofit them with origin-based security controls, but
doing so would interfere with existing websites. Plus, some think that such a
decision would go against the design principles that made the Web what it is;
they believe that the ability to freely cross-reference content should not be
infringed upon.)
In light of this, it seems prudent to explore the boundaries of the same-
origin policy and learn about the rich life that web applications can lead out-
side its confines. We begin with document navigation—a mechanism that at
first seems strikingly simple but that is really anything but.
Window and Frame Interactions
On the Web, the ability to steer the browser from one website to another
istaken for granted. Some of the common methods of achieving such nav-
igation are discussed throughout Part I of this book; the most notable of
these are HTML links, forms, and frames; HTTP redirects; and JavaScript
window.open(...) and location.* calls.
Actions such as pointing a newly opened window to an off-domain URL
or specifying the src parameter of a frame are intuitive and require no fur-
ther review. But when we look at the ability of one page to navigate another,
existing document—well, the reign of intuition comes to a sudden end.
Changing the Location of Existing Documents
In the simple days before the advent of HTML frames, only one document
could occupy a given browser window, and only that single window would be
under the document’s control. Frames changed this paradigm, however, per-
mitting several different and completely separate documents to be spliced
into a single logical view, coexisting within a common region of the screen.
The introduction of the mechanism also necessitated another step: To sanely
implement certain frame-based websites, any of the component documents
displayed in a window needed the ability to navigate its neighboring frames
or perhaps the top-level document itself. (For example, imagine a two-frame
page with a table of contents on the left and the actual chapter on the right.
Clicking a chapter name in the left pane should navigate the chapter in the
right pane, and nothing else.)
The mechanism devised for this last purpose is fairly simple: One can
specify the target parameter on  links or forms, or provide the
name of a window to the JavaScript method known as window.open(...), in
174 Chapter 11
order to navigate any other, previously named document view. In the mid-
1990s, when this functionality first debuted, there seemed to be no need to
incorporate any particular security checks into this logic; any page could nav-
igate any other named window or a frame displayed by the browser to a new
location at will.
To understand the consequences of this design, it is important to pause
for a moment and examine the circumstances under which a particular doc-
ument may obtain a name to begin with. For frames, the story is simple: In
order to reference a frame easily on the embedding page, virtually all frames
have a name attribute (and some browsers, such as Chrome, also look at id).
Browser windows, on the other hand, are typically anonymous (that is, their
window.name property is an empty string), unless created programmatically;
in the latter case, the name is specified by whoever creates the view. Anony-
mous windows do not necessarily stay anonymous, however. If a rogue appli-
cation is displayed in such a window even briefly, it may set the window.name
property to any value, and this effect will persist.
The aforementioned ability to target windows and frames by name is not
the only way to navigate them; JavaScript programs that hold window handles
pointing to other documents may directly invoke certain DOM methods with-
out knowing the name of their target at all. Attacker-supplied code will not
normally hold handles to completely unrelated windows, but it can traverse
properties such as opener, top, parent, or frames[] in order to locate even distant
relatives within the same navigation flow. An example of such a far-reaching
lookup (and subsequently, navigation) is
opener.opener.frames[2].location.assign("http://www.bunnyoutlet.com/");
These two lookup techniques are not mutually exclusive: JavaScript
programs can first obtain the handle of an unrelated but named window
through window.open(...) and then traverse the opener or frames[] properties
ofthat context in order to reach its interesting relatives nearby.
Once a suitable handle is looked up in any fashion, the originating con-
text can leverage one of several DOM methods and properties in order to
change the address of the document displayed in that view. In every contem-
porary browser, calling the .location.replace(...) method, or assigning a
value to .location or .location.href properties, should do the
trick. Amusingly, due to random implementation quirks, other theoretically
equivalent approaches (such as invoking .location.assign(...) or
.window.open(..., "_self")) may be hit-and-miss.
Okay, so it may be possible to navigate unrelated documents to new
locations—but let’s see what could possibly go wrong.
Frame Hijacking Risks
The ability for one domain to navigate windows created by other sites, or
ones that are simply no longer same-origin with their creator, is usually not
agrave concern. This laid-back design may be an annoyance and may pose
Life Outside Same-Origin Rules 175
some minor, speculative phishing risk,* but in the grand scheme of things, it
is neither a very pronounced issue nor a particularly distinctive one. This is,
perhaps, the reason why the original authors of the relevant APIs have not
given the entire mechanism too much thought.
Alas, the concept of HTML frames alters the picture profoundly: Any
application that relies on frames to build a trusted user interface is at an obvi-
ous risk if an unrelated site is permitted to hijack such UI elements without
leaving any trace of the attack in the address bar! Figure 11-1 shows one such
plausible attack scenario.
Bunny Browser 2000 Bunny Browser 2000
https://fuzzybunnies.com http://bunnyoutlet.com
Welcome to Fuzzy Bunnies 
frame: login.fuzzybunnies.com
Login:
Password: Login frame can be navigated
to an attacker-supplied URL.
Figure 11-1: A historically permitted, dangerous frame navigation scenario: The window
on the right is opened at the same time as a banking website and is actively subverting it.
Georgi Guninski, one of the pioneering browser security researchers,
realized as early as 1999 that by permitting unconstrained frame navigation,
we were headed for some serious trouble. Following his reports, vendors
attempted to roll out frame navigation restrictions mid-2000.1 Their imple-
mentation constrained all cross-frame navigation to the scope of a single
window, preventing malicious web pages from interfering with any other
simultaneously opened browser sessions.
Surprisingly, even this simple policy proved difficult to implement
correctly. It was only in 2008 that Firefox eliminated this class of problems,2
while Microsoft essentially ignored the problem until 2006. Still, these set-
backs aside, we should be fine—right?
Frame Descendant Policy and Cross-Domain Communications
The simple security restriction discussed in the previous session was not,
infact, enough. The reason was a new class of web applications, sometimes
known as mashups, that combined data from various sources to enable users
to personalize their working environment and process data in innovative ways.
Unfortunately for browser vendors, such web applications frequently relied
on third-party gadgets loaded through  tags, and their developers
* One potential attack is this: Open a legitimate website (say, http://trusted-bank.com/) in a new
window, wait for the user to inspect the address bar, and then quickly change the location to an
attacker-controlled but similarly named site (e.g., http://trustea-bank.com/). The likelihood of
successfully phishing the victim may be higher than when the user is navigating to the bad URL
right away.
176 Chapter 11
could not reasonably expect that loading a single frame from a rogue source
would put all other frames on the page at risk. Yet, the simple and elegant
window-level navigation policy amounted to permitting exactly that.