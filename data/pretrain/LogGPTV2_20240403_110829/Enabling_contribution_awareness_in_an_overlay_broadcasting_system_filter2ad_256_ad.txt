e
P
 80
 70
 60
 50
 40
 30
 20
 10
 0
 0
Cont-Aware
Cont-Agnostic
 100
 200
 300
 400
 500
 600
Average Time (sec) between Tree Disconnections
Figure 8: Cumulative distribution of time between
tree reductions for all nodes.
connection attempts may work up to a large backoﬀ time,
meaning they may never attempt to acquire a parent before
they leave the system.
Figure 7 further studies the convergence issues. Each
curve corresponds to the performance for low contributors
staying longer than X minutes, with X being 0, 2, and 5
minutes. The middle curve is the same as the Cont-Aware
curve in Figure 6. As we can see, there is a minor improve-
ment in the performance of the tail when longer-lived nodes
are considered, however the impact of stay time on perfor-
mance is negligible overall.
6.3 Time between Tree Reductions
We wish to show a node’s received bandwidth is not fre-
quently interrupted by measuring the time between reduc-
tions in the number of connected tree. Figure 8 shows the
CDF of time between reductions in the number of connected
trees for all nodes. We truncate the x-axis at 600 seconds,
since nodes with fewer than one reduction in 10 minutes are
considered stable. The higher the curve, the less stable the
system is, since a greater percentage of nodes experience a
smaller time between reductions in the number of connected
tree. Although Cont-Aware appears to produce less consis-
tent performance for all nodes, it does not necessarily imply
users see bad performance due to two reasons.
First, the curve does not distinguish between diﬀerent
types of reductions. For example, a reduction from four
to three trees is treated the same as a reduction from two
to one trees. Table 3 shows a breakdown of diﬀerent types
of reductions in the number of connected trees. We see that
for Cont-Aware, only 2.5% of reductions are from two to one
Table 3: Breakdown of diﬀerent types of reductions in
the number of connected trees.
Reduction
from→to
1 → 0 trees
2 → 1 trees
3 → 2 trees
4 → 3 trees
Cont-Aware
Cont-Agnostic
HC
LC
LC
0.1%
0%
0.8%
4.0%
2.1%
0.3%
15.6% 13.8% 31.6% 2.5%
29.6% 33.1% 16.3% 47.1%
HC
0%
3.1%
)
s
d
n
o
c
e
s
(
e
m
T
n
o
i
i
t
c
e
n
n
o
c
e
R
e
g
a
r
e
v
A
90
80
70
60
50
40
30
20
10
0
80.82
69.83
65.26
53.08
48.35
Cont-Agnostic
Cont-Aware
7.1
HC
LC
OVERALL
Figure 9: Average post-preemption reconnection time
in seconds for nodes in diﬀerent contribution levels.
trees and virtually none from one to zero trees whereas for
Cont-Agnostic, almost 8% of reductions are of these types.
We can also observe that almost all reductions high contrib-
utors in Cont-Awareexperience are from four to three trees,
which have very little impact on application performance.
In contrast, such preferential treatment for high contribu-
tors is not obvious under Cont-Agnostic. Second, we ﬁnd
that 90% of reduction result from preemptions rather than
from parent departures, and Cont-Aware allows preempted
nodes to reconnect much faster. Figure 9 shows a breakdown
of average reconnection time after preemptions. We see that
by considering node contribution, the reconnection time for
both groups of nodes are reduced, and the reconnection time
for high contributors is much shorter than low contributors.
In particular, the reconnection time of high contributors in
Cont-Aware is only 1/11 of that in Cont-Agnostic. In Cont-
Agnostic, a node which is preempted cannot preempt an-
other node. In contrast, since Cont-Aware establishes ﬁner
prioritization levels among nodes, a preempted node can of-
ten quickly ﬁnd a new location in the tree, and the cost of
preemption is much cheaper.
To further understand why Cont-Aware reduces the re-
connection time, Table 4 compares diﬀerent types of pre-
emptions that may occur based Table 1 and how long the
preempted node remains disconnected. In particular, there
are three types of preemptions:
• EN by EN: An Entitled node may be preempted by an-
other Entitled node of higher priority. Such type of preemp-
tion improves the tree structure by accepting a node which
contributes more. The preempted node is also entitled to
the tree and should reconnect quickly.
• EX by EN: An Entitled node may preempt an Excess
node. This type of preemption is not quickly recovered from,
but since the node was not entitled to the tree in which it
was preempted, the loss of performance is less signiﬁcant.
• EX by EX: An Excess node may be preempted by another
Excess node. They take place in order to eﬀect equitable per-
formance. An Excess node receiving many Excess trees will
Table 4: Breakdown of number of preemptions for each
preemption type and the average reconnection times fol-
lowing each type of preemption.
Type
EN by EN
EX by EN
EX by EX
HC LC
307
164
1449
86
19
735
Overall Avg Recon Time
508
1591
784
5.95
50.51
71.44
e
l
i
t
n
e
c
r
e
P
be preempted by an excess receiving few, thereby equalizing
their bandwidth. If a preempted excess was receiving too
many trees, these preemptions should not recover quickly.
In Table 4, we see that the reconnection time following
each type of preemption are consistent with our predictions.
An Entitled node reconnects quickly after a preemption. An
Excess node preempted by an Entitled node does not quickly
reconnect. An Excess node which is receiving in too many
trees and is preempted does not recover quickly at all. We
have also observed that most preemptions among high con-
tributors are of the ﬁrst type, since they are entitled to all
four trees most of the time. These preemptions occur when
few Excess nodes exist in the system. In this case, a Contrib-
utor sometimes will preempt an Entitled-NC. With a recon-
nection time under 6 seconds, such types of preemption are
acceptable. We also see that some high contributor preemp-
tions take place while the high contributor is an Excess in a
tree; this situation primarily occurs at the beginning of the
high contributor’s lifetime, before it begins to contribute.
Most preemptions are of the second type, since under
resource-scarce environments like Slashdot, most Entitled
nodes are required to connect by preempting other nodes.
Since an Entitled node prefers to preempt an Excess node
rather than anther Entitled node, the more trees a node is
entitled to, the more stable it will be. This ensures nodes are
generally connected in their Entitled trees for an extended
period of time.
6.4 Utilization
In resource-scarce Slashdot environment, Cont-Agnostic
utilizes 95% of the resources in average, whereas the utiliza-
tion of Cont-Aware is about 93%, demonstrating that our
heuristics does not adversely impact the eﬃciency of ESM in
locating and leveraging the available resources despite with
numerous backoﬀs and preemptions taking place.
6.5 System Dissection
In this section, we evaluate the impact of various heuris-
tics in Cont-Aware. We wish to demonstrate the value added
by each heuristic and better understand its contribution to
the improved performance.
6.5.1 Smoothing Schemes
The goal of smoothing is to enable hosts to experience less
frequent reductions in the number of connected trees by not
overreacting to global and local transients. In this section,
we study three smoothing policies: No-Smooth, Smooth,
and SmoothDown-Only, and explain why our heuristics pick
SmoothDown-Only over the other two schemes to compute
the estimated number of Entitled trees, Tiest . Using the no-
tations deﬁned in Section 3.1.2, we ﬁrst deﬁne each policy:
• No-Smooth: No smoothing at all (i.e. Tiest = Tisample ),
regardless of how abruptly Tisample changes.
• Smooth: Always smooth by using Equation (2) to calcu-
late Tiest whenever Tisample changes.
 60
 50
 40
 30
 20
 10
 0
 0
No-Smooth
Smooth
SmoothDown-Only
 100
 200
 300
 400
 500
 600
Average Time (sec) between Tree Disconnections
Figure 10: Comparison of time between tree reduc-
tions for high contributors under diﬀerent smooth-
ing schemes.
e
l
i
t
n
e
c
r
e
P
 100
 80
 60
 40
 20
 0
 0
Backoff
No-Backoff
 50
 100
 150
 200
 250
 300
 350
 400
Average Bandwidth Received (kbps)
Figure 11: Cumulative distribution of received band-
width for all nodes under diﬀerent backoﬀ schemes.
• SmoothDown-Only: Smooth by using Equation (2) to
calculate Tiest only when Tisample decreases.
Our results show that, regardless of the smoothing schemes
used, low contributors see similar low time between reduc-
tions in the number of connected trees. Figure 10 plots CDF
of the average time between reductions in the number of con-
nected trees for high contributors. We see that No-Smooth
does not perform well because Tiest ﬂuctuates with Tisample
whereas Smooth is as bad because it does not quickly reward
nodes whose contributions go up. SmoothDown-Only signif-
icantly increases the stability for high-contributors over the
other two scheme because many decreases in Tisample are
caused by transient situations, such as a child departure, in
which case another child will be acquired quickly in highly-
utilized resource-scarce environments.
6.5.2 Backoff Schemes
In this section, we ﬁrst justify why we incorporate the
backoﬀ mechanism in Cont-Aware. Then we investigate why
it is beneﬁcial to adding the scaling factor, Tiexcess , in the
computation of the backoﬀ timer. We ﬁrst deﬁne three vari-
ations of backoﬀ policies:
• No-Backoﬀ: No backoﬀ at all. A disconnected Excess
node immediately attempts to reconnect.
• Backoﬀ: When failing to connect, backoﬀ using the timer
computed by Equation (3).
• Backoﬀ w/o Tiexcess : When failing to connect, back-
oﬀ using timer computed by Equation (3) with Tiexcess re-
moved.
Beneﬁt of Backoﬀ: We now examine whether Excess nodes
e
l
i
t
n
e
c
r
e
P
 100
 80
 60
 40
 20
 0
 0
No-Backoff
Backoff w/o Tiexcess
Backoff
)
s
p
b
k
(
i
i
t
d
e
v
e
c
e
R
h