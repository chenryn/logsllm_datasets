### 6.3 Time between Tree Reductions

To demonstrate that a node’s received bandwidth is not frequently interrupted, we measured the time between reductions in the number of connected trees. Figure 8 shows the cumulative distribution function (CDF) of the time between such reductions for all nodes. The x-axis is truncated at 600 seconds, as nodes with fewer than one reduction in 10 minutes are considered stable. A higher curve indicates less stability, as it signifies that a greater percentage of nodes experience shorter intervals between reductions.

Although Cont-Aware appears to produce less consistent performance for all nodes, this does not necessarily imply poor user experience for two reasons:

1. **Type of Reductions**: The curve does not differentiate between different types of reductions. For example, a reduction from four to three trees is treated the same as a reduction from two to one tree. Table 3 provides a breakdown of different types of reductions. For Cont-Aware, only 2.5% of reductions are from two to one tree, and virtually none from one to zero trees. In contrast, for Cont-Agnostic, almost 8% of reductions are of these types. Additionally, high contributors in Cont-Aware mostly experience reductions from four to three trees, which have minimal impact on application performance.

2. **Preemption and Reconnection Time**: We find that 90% of reductions result from preemptions rather than parent departures. Cont-Aware allows preempted nodes to reconnect much faster. Figure 9 shows the average reconnection time after preemptions for nodes in different contribution levels. By considering node contributions, the reconnection time for both groups of nodes is reduced, and the reconnection time for high contributors is significantly shorter than for low contributors. Specifically, the reconnection time for high contributors in Cont-Aware is only 1/11th of that in Cont-Agnostic.

**Table 3: Breakdown of Different Types of Reductions in the Number of Connected Trees**

| Reduction | Cont-Aware | Cont-Agnostic |
|-----------|------------|---------------|
| 1 → 0     | 0.1%       | 0%            |
| 2 → 1     | 2.5%       | 4.0%          |
| 3 → 2     | 29.6%      | 33.1%         |
| 4 → 3     | 67.8%      | 62.9%         |

**Figure 9: Average Post-Preemption Reconnection Time in Seconds for Nodes in Different Contribution Levels**

- **Cont-Agnostic**: 7.1 seconds
- **Cont-Aware**: 
  - High Contributors (HC): 0.55 seconds
  - Low Contributors (LC): 6.4 seconds

**Table 4: Breakdown of Preemptions and Average Reconnection Times**

| Type        | HC  | LC  | Overall Avg Recon Time (sec) |
|-------------|-----|-----|------------------------------|
| EN by EN    | 307 | 164 | 508                          |
| EX by EN    | 1449| 86  | 1591                         |
| EX by EX    | 19  | 735 | 784                          |
|             |     |     | 5.95 (HC)                    |
|             |     |     | 50.51 (LC)                   |
|             |     |     | 71.44 (Overall)              |

### 6.4 Utilization

In resource-scarce environments like Slashdot, Cont-Agnostic utilizes 95% of the resources on average, whereas Cont-Aware utilizes about 93%. This demonstrates that our heuristics do not adversely impact the efficiency of ESM in locating and leveraging available resources, despite numerous backoffs and preemptions.

### 6.5 System Dissection

#### 6.5.1 Smoothing Schemes

The goal of smoothing is to enable hosts to experience less frequent reductions in the number of connected trees by not overreacting to global and local transients. We studied three smoothing policies: No-Smooth, Smooth, and SmoothDown-Only. 

- **No-Smooth**: No smoothing at all (i.e., \( T_{iest} = T_{isample} \)).
- **Smooth**: Always smooth using Equation (2) whenever \( T_{isample} \) changes.
- **SmoothDown-Only**: Smooth using Equation (2) only when \( T_{isample} \) decreases.

**Figure 10: Comparison of Time Between Tree Reductions for High Contributors Under Different Smoothing Schemes**

- **No-Smooth**: Performs poorly due to fluctuations in \( T_{iest} \).
- **Smooth**: Also performs poorly as it does not quickly reward nodes whose contributions increase.
- **SmoothDown-Only**: Significantly increases stability for high contributors because many decreases in \( T_{isample} \) are caused by transient situations, such as child departures, where another child is acquired quickly in highly-utilized resource-scarce environments.

#### 6.5.2 Backoff Schemes

We justify the incorporation of the backoff mechanism in Cont-Aware and investigate the benefits of adding the scaling factor \( T_{iexcess} \) in the computation of the backoff timer. We define three variations of backoff policies:

- **No-Backoff**: No backoff at all. A disconnected Excess node immediately attempts to reconnect.
- **Backoff**: When failing to connect, backoff using the timer computed by Equation (3).
- **Backoff w/o \( T_{iexcess} \)**: When failing to connect, backoff using the timer computed by Equation (3) with \( T_{iexcess} \) removed.

**Figure 11: Cumulative Distribution of Received Bandwidth for All Nodes Under Different Backoff Schemes**

- **No-Backoff**: Results in frequent connection attempts, leading to congestion.
- **Backoff w/o \( T_{iexcess} \)**: Improves but still results in suboptimal performance.
- **Backoff**: Provides the best performance by effectively managing connection attempts and reducing congestion.

By incorporating these heuristics, Cont-Aware ensures better stability and performance, especially for high contributors, while maintaining efficient resource utilization.