-\> Redirected to slot \[5798\] located at 192.168.4.52:6352
OK
192.168.4.52:6352\> set age 99
-\> Redirected to slot \[741\] located at 192.168.4.51:6351
OK
192.168.4.51:6351\> set school tarena
-\> Redirected to slot \[8455\] located at 192.168.4.52:6352
OK
192.168.4.52:6352\> keys \*
1\) \"name\"
2\) \"school\"
192.168.4.52:6352\> get name
\"bob\"
192.168.4.52:6352\> get age
-\> Redirected to slot \[741\] located at 192.168.4.51:6351
\"99\"
## 2.8哈希槽0-16383
192.168.4.51:6351\> set x 999
-\> Redirected to slot \[16287\] located at 192.168.4.53:6353
OK
当客户端存数据时候通过crc16算法,计算哈希值
set x 999 计算的结果为16287 (将x crc16算法做
hash计算得到数字,用这个数字%16384(取余) 得到16287
192.168.4.51:6351\> get x
999
当客户端取数据时候通过crc16算法,计算哈希值
get x 计算的结果为16287 (将x crc16算法做
hash计算得到数字,用这个数字%16384(取余) 得到16287,集群找16287槽
Redis 集群中内置了 16384 个哈希槽(0-16383)，当需要在 Redis
集群中放置一个 key-value时，redis 先对 key 使用 crc16
算法算出一个结果，然后把结果对 16384 求余数，这样每个 key
都会对应一个编号在 0-16383 之间的哈希槽，redis
会根据节点数量大致均等的将哈希槽映射到不同的节点。
Redis 集群没有使用一致性hash, 而是引入了哈希槽的概念。
Redis
集群有16384个哈希槽,每个key通过CRC16校验后对16384取模来决定放置哪个槽.集群的每个节点负责一部分hash槽。这种结构很容易添加或者删除节点，并且无论是添加删除或者修改某一个节点，都不会造成集群不可用的状态
使用哈希槽的好处就在于可以方便的添加或移除节点。
当需要增加节点时，只需要把其他节点的某些哈希槽挪到新节点就可以了；
当需要移除节点时，只需要把移除节点上的哈希槽挪到其他节点就行了；
在这一点上，我们以后新增或移除节点的时候不用先停掉所有的 redis 服务。
## 2.9集群工作过程
## 2.10测试集群的高可用功能
高可用功能.当主库宕机时,对应的从库自动升级为主库
当从库顶替主库成为主库后,又宕机了,那么整个集群也就挂掉了
测试方法:停止任意一台主库的redis服务,查看集群信息(停止52)
# 三 管理redis集群(管理机51上操作)
## 3.1 向集群里添加新redis服务器
使用脚本的add-node 命令
### 3.1.1 添加master 角色
**添加redis服务器**
\[root@sql51 \~\]# redis-trib.rb del-node 要添加的主机ip:端口
任意主机:端口
\[root@sql51 \~\]# redis-trib.rb add-node 192.168.4.58:6358
192.168.4.51:6351
> #如不指定角色 默认是添加主库
\>\>\> Send CLUSTER MEET to node 192.168.4.58:6358 to make it join the
cluster.
\[OK\] New node added correctly.
**查看集群主库信息**
\[root@sql51 \~\]# redis-trib.rb info 192.168.4.51:6351 #查看
192.168.4.51:6351 (412a7982\...) -\> 2 keys \| 5461 slots \| 1 slaves.
192.168.4.58:6358 (c2e039c3\...) -\> 0 keys \| 0 slots \| 0 slaves.
#存有0个变量
192.168.4.53:6353 (c269f171\...) -\> 1 keys \| 5461 slots \| 1 slaves.
192.168.4.52:6352 (d63724ee\...) -\> 2 keys \| 5462 slots \| 1 slaves.
\[OK\] 5 keys in 4 masters.
0.00 keys per slot on average.
**分配hash slot(哈希槽)**
\[root@sql51 \~\]# redis-trib.rb reshard 192.168.4.58:6358 #任意集群中ip
\>\>\> Performing Cluster Check (using node 192.168.4.58:6358)
M: c2e039c3a388e62ec6c02a8af3b5a8bd53040a65 192.168.4.58:6358
slots: (0 slots) master
0 additional replica(s)
S: 6e4b41e1b1e86faa68fe179aa1ab6ff7c0a6385e 192.168.4.54:6354
slots: (0 slots) slave
replicates c269f171a53cfbdf3aa5f4f2387731ca7af2f8d8
S: 1dc26eb0d3c281ee74a50dc9d8544bc3557f4411 192.168.4.55:6355
slots: (0 slots) slave
replicates 412a79829c7d0eed812b24959ca123b58990d60e
M: d63724ee3c6990a98d41b432ee913796245f4999 192.168.4.52:6352
slots:5461-10922 (5462 slots) master
1 additional replica(s)
M: c269f171a53cfbdf3aa5f4f2387731ca7af2f8d8 192.168.4.53:6353
slots:10923-16383 (5461 slots) master
1 additional replica(s)
M: 412a79829c7d0eed812b24959ca123b58990d60e 192.168.4.51:6351
slots:0-5460 (5461 slots) master
1 additional replica(s)
S: 705304b8c3a9187d29430f6d6df6bfaf32138168 192.168.4.56:6356
slots: (0 slots) slave
replicates d63724ee3c6990a98d41b432ee913796245f4999
\[OK\] All nodes agree about slots configuration.
\>\>\> Check for open slots\...
\>\>\> Check slots coverage\...
\[OK\] All 16384 slots covered.
How many slots do you want to move (from 1 to 16384)? 4096
What is the receiving node ID? c2e039c3a388e62ec6c02a8af3b5a8bd53040a65
Please enter all the source node IDs.
Type \'all\' to use all the nodes as source nodes for the hash slots.
Type \'done\' once you entered all the source nodes IDs.
Source node #1:all
Do you want to proceed with the proposed reshard plan (yes/no)?yes
\[root@sql51 \~\]# redis-trib.rb check 192.168.4.58:6358
\>\>\> Performing Cluster Check (using node 192.168.4.58:6358)
M: c2e039c3a388e62ec6c02a8af3b5a8bd53040a65 192.168.4.58:6358
slots:0-1364,5461-6826,10923-12287 (4096 slots) master
0 additional replica(s) #再次查看发现4.58有4096个hash slot
### 3.1.2 添加slave 角色
没有指定\[\--master-id id值\],默认谁的主库最少,自动添加为谁的从库
Add-node \--slave \[\--master-id id值\] ip地址:端口 192.168.4.51:6351
\[root@sql51 \~\]# redis-trib.rb add-node \--slave 192.168.4.57:6357
192.168.4.51:6351
\>\>\> Send CLUSTER MEET to node 192.168.4.57:6357 to make it join the
cluster.
Waiting for the cluster to join.
\>\>\> Configure node as replica of 192.168.4.58:6358.
\[OK\] New node added correctly.
\[root@sql51 \~\]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (412a7982\...) -\> 0 keys \| 4096 slots \| 1 slaves.
192.168.4.58:6358 (c2e039c3\...) -\> 3 keys \| 4096 slots \| 1 slaves.
#有了从库
192.168.4.53:6353 (c269f171\...) -\> 1 keys \| 4096 slots \| 1 slaves.
192.168.4.52:6352 (d63724ee\...) -\> 1 keys \| 4096 slots \| 1 slaves.
\[OK\] 5 keys in 4 masters.
0.00 keys per slot on average.
\[root@sql51 \~\]# redis-trib.rb check 192.168.4.57:6357
\>\>\> Performing Cluster Check (using node 192.168.4.57:6357)
S: f5251bebf750c5beaa48fbbed03e880889e07fcd 192.168.4.57:6357
slots: (0 slots) slave
replicates c2e039c3a388e62ec6c02a8af3b5a8bd53040a65
## 3.2 移除集群中的redis服务器
### 3.2.1 移除slave角色(57)
\[root@sql51 \~\]# redis-trib.rb del-node 任意主机:端口 被移除的主机id
\[root@sql51 \~\]# redis-trib.rb del-node 192.168.4.51:6351
f5251bebf750c5beaa48fbbed03e880889e07fcd #57的id
\>\>\> Removing node f5251bebf750c5beaa48fbbed03e880889e07fcd from
cluster 192.168.4.51:6351
\>\>\> Sending CLUSTER FORGET messages to the cluster\...
\>\>\> SHUTDOWN the node.
\[root@sql51 \~\]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (412a7982\...) -\> 0 keys \| 4096 slots \| 1 slaves.
192.168.4.58:6358 (c2e039c3\...) -\> 3 keys \| 4096 slots \| 0 slaves.
#0个从服务
192.168.4.53:6353 (c269f171\...) -\> 1 keys \| 4096 slots \| 1 slaves.
192.168.4.52:6352 (d63724ee\...) -\> 1 keys \| 4096 slots \| 1 slaves.
\[OK\] 5 keys in 4 masters.
0.00 keys per slot on average.
### 3.2.2 移除master角色
#### 重新分片:释放占用的hash槽
\[root@sql51 \~\]#redis-trib.rb reshard 192.168.4.51:6351
\[OK\] All 16384 slots covered.
How many slots do you want to move (from 1 to 16384)? 4096
What is the receiving node ID? 412a79829c7d0eed812b24959ca123b58990d60e
#接受哈希槽的主机id(51)
Please enter all the source node IDs.
Type \'all\' to use all the nodes as source nodes for the hash slots.
Type \'done\' once you entered all the source nodes IDs.
Source node #1:c2e039c3a388e62ec6c02a8af3b5a8bd53040a65
> #要移除的主机id(58)
Source node #2:done #只移除一个主机的最后写done
\[root@sql51 \~\]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (412a7982\...) -\> 3 keys \| 8192 slots \| 1 slaves.
192.168.4.58:6358 (c2e039c3\...) -\> 0 keys \| 0 slots \| 0 slaves.
192.168.4.53:6353 (c269f171\...) -\> 1 keys \| 4096 slots \| 1 slaves.
192.168.4.52:6352 (d63724ee\...) -\> 1 keys \| 4096 slots \| 1 slaves.
#### 再删除
\[root@sql51 \~\]# redis-trib.rb del-node 任意主机:端口 被移除的主机id
\[root@sql51 \~\]# redis-trib.rb del-node 192.168.4.51:6351
c2e039c3a388e62ec6c02a8af3b5a8bd53040a65 #被移除的主机id58
\>\>\> Removing node c2e039c3a388e62ec6c02a8af3b5a8bd53040a65 from
cluster 192.168.4.51:6351
\>\>\> Sending CLUSTER FORGET messages to the cluster\...
\>\>\> SHUTDOWN the node.
\[root@sql51 \~\]# redis-trib.rb info 192.168.4.51:6351 #没有58了
192.168.4.51:6351 (412a7982\...) -\> 3 keys \| 8192 slots \| 1 slaves.
192.168.4.53:6353 (c269f171\...) -\> 1 keys \| 4096 slots \| 1 slaves.
192.168.4.52:6352 (d63724ee\...) -\> 1 keys \| 4096 slots \| 1 slaves.
\[OK\] 5 keys in 3 masters.
0.00 keys per slot on average.
#### 扩展:平均分片
\[root@sql51 \~\]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (412a7982\...) -\> 3 keys \| 8192 slots \| 1 slaves.
192.168.4.53:6353 (c269f171\...) -\> 1 keys \| 4096 slots \| 1 slaves.
192.168.4.52:6352 (d63724ee\...) -\> 1 keys \| 4096 slots \| 1 slaves.
\[OK\] 5 keys in 3 masters.
0.00 keys per slot on average.
\[root@sql51 \~\]# redis-trib.rb rebalance 192.168.4.51:6351
\>\>\> Performing Cluster Check (using node 192.168.4.51:6351)
\[OK\] All nodes agree about slots configuration.
\>\>\> Check for open slots\...
\>\>\> Check slots coverage\...
\[OK\] All 16384 slots covered.
\>\>\> Rebalancing across 3 nodes. Total weight = 3
Moving 1366 slots from 192.168.4.51:6351 to 192.168.4.53:6353
Moving 1365 slots from 192.168.4.51:6351 to 192.168.4.52:6352
\[root@sql51 \~\]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (412a7982\...) -\> 1 keys \| 5461 slots \| 1 slaves.
192.168.4.53:6353 (c269f171\...) -\> 3 keys \| 5462 slots \| 1 slaves.
192.168.4.52:6352 (d63724ee\...) -\> 1 keys \| 5461 slots \| 1 slaves.
\[OK\] 5 keys in 3 masters.
0.00 keys per slot on average.
## 3.3 把移除的redis服务器再添加到集群
### 清除原有的集群信息
移除之后的服务器是没有服务了,需要重新启动,
且集群信息文件还存在,还记录着之前的集群信息,必须清除才能新添加
\[root@sql58 \~\]# netstat -untlp \|grep redis
\[root@sql58 \~\]# ls /var/lib/redis/6379/
dump.rdb nodes-6358.conf
\[root@sql58 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@sql58 \~\]# redis-cli -h 192.168.4.58 -p 6358 #此处不需要 - c
192.168.4.58:6358\> cluster info
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:7
cluster_size:3
cluster_current_epoch:12
cluster_my_epoch:9
cluster_stats_messages_ping_sent:192
cluster_stats_messages_sent:192
cluster_stats_messages_pong_received:192
cluster_stats_messages_received:192
192.168.4.58:6358\> claster reset
(error) ERR unknown command \'claster\'
192.168.4.58:6358\> cluster reset #清除重置集群信息
OK
192.168.4.58:6358\> cluster info #查看集群信息
cluster_state:fail
cluster_slots_assigned:0
cluster_slots_ok:0
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:1
cluster_size:0
cluster_current_epoch:12
cluster_my_epoch:9
cluster_stats_messages_ping_sent:244
cluster_stats_messages_sent:244
cluster_stats_messages_pong_received:244
cluster_stats_messages_received:244
### 管理主机再添加master主机
\[root@sql51 \~\]# redis-trib.rb del-node 要添加的主机ip:端口
集群任意主机:端口
#未指定master \| slave 默认是添加为master主
\[root@sql51 \~\]# redis-trib.rb add-node 192.168.4.58:6358
192.168.4.52:6352
\>\>\> Adding node 192.168.4.58:6358 to cluster 192.168.4.52:6352
\>\>\> Performing Cluster Check (using node 192.168.4.52:6352)
\...\...
\[OK\] All nodes agree about slots configuration.
\>\>\> Check for open slots\...
\>\>\> Check slots coverage\...
\[OK\] All 16384 slots covered.
\>\>\> Send CLUSTER MEET to node 192.168.4.58:6358 to make it join the
cluster.
\[OK\] New node added correctly.
\[root@sql51 \~\]# redis-trib.rb check 192.168.4.58:6358
\>\>\> Performing Cluster Check (using node 192.168.4.58:6358)
M: c2e039c3a388e62ec6c02a8af3b5a8bd53040a65 192.168.4.58:6358
slots: (0 slots) master
0 additional replica(s)
\...\....
### 管理主机再添加slave主机
启动服务后清除重置集群信息,再添加slave主机
\[root@sql57 \~\]# netstat -untlp \| grep redis
\[root@sql57 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@sql57 \~\]# netstat -untlp \| grep redis
tcp 0 0 192.168.4.57:6357 0.0.0.0:\* LISTEN 3336/redis-server 1
tcp 0 0 192.168.4.57:16357 0.0.0.0:\* LISTEN 3336/redis-server 1
\[root@sql57 \~\]# redis-cli -h 192.168.4.47 -p 6357
Could not connect to Redis at 192.168.4.47:6357: No route to host
Could not connect to Redis at 192.168.4.47:6357: No route to host
not connected\>
\[root@sql57 \~\]# redis-cli -h 192.168.4.57 -p 6357
192.168.4.57:6357\> cluster reset
OK
192.168.4.57:6357\> cluster info
cluster_state:fail #状态是失败
cluster_slots_assigned:0
cluster_slots_ok:0
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:1
cluster_size:0
cluster_current_epoch:12