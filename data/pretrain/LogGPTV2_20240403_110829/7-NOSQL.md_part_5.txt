### 优化后的文本

---

#### 重定向到槽 [5798] 位于 192.168.4.52:6352
```
OK
192.168.4.52:6352> set age 99
```

#### 重定向到槽 [741] 位于 192.168.4.51:6351
```
OK
192.168.4.51:6351> set school tarena
```

#### 重定向到槽 [8455] 位于 192.168.4.52:6352
```
OK
192.168.4.52:6352> keys *
1) "name"
2) "school"
192.168.4.52:6352> get name
"bob"
192.168.4.52:6352> get age
```

#### 重定向到槽 [741] 位于 192.168.4.51:6351
```
"99"
```

### 2.8 哈希槽 0-16383
```
192.168.4.51:6351> set x 999
```

#### 重定向到槽 [16287] 位于 192.168.4.53:6353
```
OK
```

当客户端存储数据时，通过 CRC16 算法计算哈希值。例如：
```
set x 999
```
计算结果为 16287（将 `x` 通过 CRC16 算法计算得到的数字对 16384 取余数）。

```
192.168.4.51:6351> get x
999
```

当客户端获取数据时，同样通过 CRC16 算法计算哈希值。例如：
```
get x
```
计算结果为 16287（将 `x` 通过 CRC16 算法计算得到的数字对 16384 取余数），集群会查找槽 16287。

Redis 集群中内置了 16384 个哈希槽（0-16383）。当需要在 Redis 集群中放置一个键值对时，Redis 先对键使用 CRC16 算法算出一个结果，然后对该结果取模 16384，这样每个键都会对应一个编号在 0-16383 之间的哈希槽。Redis 会根据节点数量大致均等地将哈希槽映射到不同的节点上。

Redis 集群没有使用一致性哈希，而是引入了哈希槽的概念。每个节点负责一部分哈希槽。这种结构使得添加或移除节点变得非常方便。

- 当需要增加节点时，只需要把其他节点的某些哈希槽挪到新节点。
- 当需要移除节点时，只需要把该节点上的哈希槽挪到其他节点。

这样，在新增或移除节点时，无需停止所有 Redis 服务。

### 2.9 集群工作过程
### 2.10 测试集群的高可用功能

高可用功能：当主库宕机时，对应的从库会自动升级为主库。如果新的主库再次宕机，整个集群将不可用。

测试方法：停止任意一台主库的 Redis 服务，查看集群信息（例如停止 52 节点）。

## 三、管理 Redis 集群（在管理机 51 上操作）

### 3.1 向集群里添加新的 Redis 服务器

#### 3.1.1 添加 Master 角色

**添加 Redis 服务器**
```bash
[root@sql51 ~]# redis-trib.rb add-node 192.168.4.58:6358 192.168.4.51:6351
```
如果不指定角色，默认是添加为主库。

```
>>> Send CLUSTER MEET to node 192.168.4.58:6358 to make it join the cluster.
[OK] New node added correctly.
```

**查看集群主库信息**
```bash
[root@sql51 ~]# redis-trib.rb info 192.168.4.51:6351
```

**分配哈希槽**
```bash
[root@sql51 ~]# redis-trib.rb reshard 192.168.4.58:6358
```

```
>>> Performing Cluster Check (using node 192.168.4.58:6358)
...
[OK] All 16384 slots covered.
How many slots do you want to move (from 1 to 16384)? 4096
What is the receiving node ID? c2e039c3a388e62ec6c02a8af3b5a8bd53040a65
Please enter all the source node IDs.
Type 'all' to use all the nodes as source nodes for the hash slots.
Type 'done' once you entered all the source nodes IDs.
Source node #1: all
Do you want to proceed with the proposed reshard plan (yes/no)? yes
```

#### 3.1.2 添加 Slave 角色

如果没有指定 `--master-id`，默认会自动添加到主库最少的节点上。
```bash
[root@sql51 ~]# redis-trib.rb add-node --slave 192.168.4.57:6357 192.168.4.51:6351
```

```
>>> Send CLUSTER MEET to node 192.168.4.57:6357 to make it join the cluster.
Waiting for the cluster to join.
>>> Configure node as replica of 192.168.4.58:6358.
[OK] New node added correctly.
```

### 3.2 移除集群中的 Redis 服务器

#### 3.2.1 移除 Slave 角色（57）
```bash
[root@sql51 ~]# redis-trib.rb del-node 192.168.4.51:6351 f5251bebf750c5beaa48fbbed03e880889e07fcd
```

```
>>> Removing node f5251bebf750c5beaa48fbbed03e880889e07fcd from cluster 192.168.4.51:6351
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.
```

#### 3.2.2 移除 Master 角色

**重新分片：释放占用的哈希槽**
```bash
[root@sql51 ~]# redis-trib.rb reshard 192.168.4.51:6351
```

```
[OK] All 16384 slots covered.
How many slots do you want to move (from 1 to 16384)? 4096
What is the receiving node ID? 412a79829c7d0eed812b24959ca123b58990d60e
Please enter all the source node IDs.
Type 'all' to use all the nodes as source nodes for the hash slots.
Type 'done' once you entered all the source nodes IDs.
Source node #1: c2e039c3a388e62ec6c02a8af3b5a8bd53040a65
Source node #2: done
```

**删除节点**
```bash
[root@sql51 ~]# redis-trib.rb del-node 192.168.4.51:6351 c2e039c3a388e62ec6c02a8af3b5a8bd53040a65
```

```
>>> Removing node c2e039c3a388e62ec6c02a8af3b5a8bd53040a65 from cluster 192.168.4.51:6351
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.
```

### 3.3 把移除的 Redis 服务器再添加到集群

#### 清除原有的集群信息
移除之后的服务器需要重新启动，并清除之前的集群信息。
```bash
[root@sql58 ~]# netstat -untlp | grep redis
[root@sql58 ~]# ls /var/lib/redis/6379/
dump.rdb nodes-6358.conf
[root@sql58 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@sql58 ~]# redis-cli -h 192.168.4.58 -p 6358
192.168.4.58:6358> cluster reset
OK
192.168.4.58:6358> cluster info
cluster_state: fail
cluster_slots_assigned: 0
cluster_slots_ok: 0
cluster_slots_pfail: 0
cluster_slots_fail: 0
cluster_known_nodes: 1
cluster_size: 0
cluster_current_epoch: 12
cluster_my_epoch: 9
cluster_stats_messages_ping_sent: 244
cluster_stats_messages_sent: 244
cluster_stats_messages_pong_received: 244
cluster_stats_messages_received: 244
```

#### 管理主机再添加 Master 主机
```bash
[root@sql51 ~]# redis-trib.rb add-node 192.168.4.58:6358 192.168.4.52:6352
```

```
>>> Adding node 192.168.4.58:6358 to cluster 192.168.4.52:6352
>>> Performing Cluster Check (using node 192.168.4.52:6352)
...
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
>>> Send CLUSTER MEET to node 192.168.4.58:6358 to make it join the cluster.
[OK] New node added correctly.
```

#### 管理主机再添加 Slave 主机
启动服务后清除重置集群信息，再添加 Slave 主机。
```bash
[root@sql57 ~]# netstat -untlp | grep redis
[root@sql57 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@sql57 ~]# netstat -untlp | grep redis
tcp 0 0 192.168.4.57:6357 0.0.0.0:* LISTEN 3336/redis-server 1
tcp 0 0 192.168.4.57:16357 0.0.0.0:* LISTEN 3336/redis-server 1
[root@sql57 ~]# redis-cli -h 192.168.4.57 -p 6357
192.168.4.57:6357> cluster reset
OK
192.168.4.57:6357> cluster info
cluster_state: fail
cluster_slots_assigned: 0
cluster_slots_ok: 0
cluster_slots_pfail: 0
cluster_slots_fail: 0
cluster_known_nodes: 1
cluster_size: 0
cluster_current_epoch: 12
```

---