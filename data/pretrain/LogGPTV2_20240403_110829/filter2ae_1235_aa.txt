作者：陈独秀
题目下载链接:
这次实验的题目为Reversing.kr网站中的一道题目。
题目要求:
    ReversingKr KeygenMe
    Find the Name when the Serial is 76876-77776
    This problem has several answers.
    Password is ***p
这是一道典型的 _用户名-序列号_ 形式的题目，序列号已经给出，且用户名的最后一位为p。
#### z3 求解器是什么？
    z3是由微软公司开发的一个优秀的SMT求解器（也就定理证明器），它能够检查逻辑表达式的可满足性。
通俗讲，就是解方程。比如使用z3解二元一次方程：
    x-y == 3
    3x-8y == 4
z3代码如下: ipython 交互
    In [130]: from z3 import *
    In [131]: x = Int('x')
    In [132]: y = Int('y')
    In [133]: solver = Solver()
    In [134]: solver.add(x-y == 3)
    In [135]: solver.add(3*x-8*y == 4)
    In [136]: solver.check()
    Out[136]: sat
    In [137]: solver.model()
    Out[137]: [y = 1, x = 4]
z3 难道就只能用来解小学方程吗？当然不是！来看题。
#### 0x0 定位
界面有两个输入框，无按钮，直接对GetWindowTextW下断后两次向上回溯即可到达核心逻辑函数，下面为该函数的代码。
    signed int __stdcall sub_FA1740(int a1)
    {
      int v1; // edi
      int v3; // esi
      int v4; // esi
      __int16 v5; // bx
      unsigned __int8 v6; // al
      unsigned __int8 v7; // ST2C_1
      unsigned __int8 v8; // al
      unsigned __int8 v9; // bl
      wchar_t *v10; // eax
      __int16 v11; // di
      wchar_t *v12; // eax
      __int16 v13; // di
      wchar_t *v14; // eax
      __int16 v15; // di
      wchar_t *v16; // eax
      __int16 v17; // di
      wchar_t *v18; // eax
      __int16 v19; // di
      unsigned __int8 v20; // al
      unsigned __int8 v21; // ST2C_1
      unsigned __int8 v22; // al
      unsigned __int8 v23; // bl
      wchar_t *v24; // eax
      __int16 v25; // di
      wchar_t *v26; // eax
      __int16 v27; // di
      wchar_t *v28; // eax
      __int16 v29; // di
      wchar_t *v30; // eax
      __int16 v31; // di
      wchar_t *v32; // eax
      __int16 v33; // si
      unsigned __int8 v34; // [esp+10h] [ebp-28h]
      unsigned __int8 v35; // [esp+10h] [ebp-28h]
      unsigned __int8 v36; // [esp+11h] [ebp-27h]
      unsigned __int8 v37; // [esp+11h] [ebp-27h]
      unsigned __int8 v38; // [esp+13h] [ebp-25h]
      unsigned __int8 v39; // [esp+13h] [ebp-25h]
      unsigned __int8 v40; // [esp+14h] [ebp-24h]
      unsigned __int8 v41; // [esp+14h] [ebp-24h]
      unsigned __int8 v42; // [esp+19h] [ebp-1Fh]
      unsigned __int8 v43; // [esp+19h] [ebp-1Fh]
      unsigned __int8 v44; // [esp+1Ah] [ebp-1Eh]
      unsigned __int8 v45; // [esp+1Ah] [ebp-1Eh]
      unsigned __int8 v46; // [esp+1Bh] [ebp-1Dh]
      unsigned __int8 v47; // [esp+1Bh] [ebp-1Dh]
      unsigned __int8 v48; // [esp+1Ch] [ebp-1Ch]
      unsigned __int8 v49; // [esp+1Ch] [ebp-1Ch]
      int username; // [esp+20h] [ebp-18h]
      int serial; // [esp+24h] [ebp-14h]
      char v52; // [esp+28h] [ebp-10h]
      int v53; // [esp+34h] [ebp-4h]
      ATL::CStringT>>::CStringT>>(&username);
      v1 = 0;
      v53 = 0;
      ATL::CStringT>>::CStringT>>(&serial);
      ATL::CStringT>>::CStringT>>(&v52);
      LOBYTE(v53) = 2;
      CWnd::GetWindowTextW(a1 + 304, &username);
      if ( *(username - 12) == 4 )
      {
        v3 = 0;
        while ( ATL::CSimpleStringT::GetAt(&username, v3) >= 'a'
             && ATL::CSimpleStringT::GetAt(&username, v3) = 4 )
          {
    LABEL_7:
            v4 = 0;
            while ( 1 )
            {
              if ( v1 != v4 )
              {
                v5 = ATL::CSimpleStringT::GetAt(&username, v4);
                if ( ATL::CSimpleStringT::GetAt(&username, v1) == v5 )
                  goto LABEL_2;
              }
              if ( ++v4 >= 4 )
              {
                if ( ++v1 ::GetAt(&serial, 5) == '-' )
                {
                  v6 = ATL::CSimpleStringT::GetAt(&username, 0);
                  v7 = (v6 & 1) + 5;
                  v48 = ((v6 >> 4) & 1) + 5;
                  v42 = ((v6 >> 1) & 1) + 5;
                  v44 = ((v6 >> 2) & 1) + 5;
                  v46 = ((v6 >> 3) & 1) + 5;
                  v8 = ATL::CSimpleStringT::GetAt(&username, 1);
                  v34 = (v8 & 1) + 1;
                  v40 = ((v8 >> 4) & 1) + 1;
                  v36 = ((v8 >> 1) & 1) + 1;
                  v9 = ((v8 >> 2) & 1) + 1;
                  v38 = ((v8 >> 3) & 1) + 1;
                  v10 = ATL::CSimpleStringT::GetBuffer(&v52);
                  itow_s(v7 + v9, v10, 10u, 10);
                  v11 = ATL::CSimpleStringT::GetAt(&v52, 0);
                  if ( ATL::CSimpleStringT::GetAt(&serial, 0) == v11 )
                  {
                    ATL::CSimpleStringT::ReleaseBuffer(&v52, -1);
                    v12 = ATL::CSimpleStringT::GetBuffer(&v52);
                    itow_s(v46 + v38, v12, 10u, 10);
                    v13 = ATL::CSimpleStringT::GetAt(&serial, 1);