### RPS（每秒请求数）的解释及其对用户的意义

RPS（每秒请求数）通常被解释为“所需的总体服务容量”。尽管这一定义对于设计和支持服务的工程师来说是有意义的，但对于用户而言却并不直观。用户无法了解当前有多少容量正在被其他用户使用，也无法确定在1000个RPS中他们可以使用的具体份额。

因此，将1000 RPS视为一个展示当前服务容量的值更为合理。如果服务或硬件性能发生变化，SLA中的数值也应相应更新。若要明确限制传入流量，可以在SLA中加入以下条款：
> 在每个日历年中，99.9%的请求应在200毫秒内送达，并且单个用户账户的请求数每秒不应超过1000次。

这样一来，该数值就变得对用户可衡量，且独立于硬件和软件的具体性能。我们能够基于此计算出可以服务多少用户，并在增加容量或更改软件时无需调整SLA。

### 为内部组件设定SLA

当服务不是直接面向最终用户的，它是否也应该拥有自己的SLA？答案是肯定的。为了阐明这一点，让我们以一个虚构的消息分发服务为例。该服务由以下四个主要组件构成：

- **数据接收器**：负责接受和注册消息。
- **数据转换器**：利用来自不同外部源的数据调整消息内容。
- **分发器**：将消息传递到多个终端点。
- **使用者**：通过“发布者+订阅者”模型从终端点接收数据。

![消息分发服务组件关系](media/rId30.png){width="3.6120395888014in" height="1.3612029746281715in"}

#### 消息分发服务组件关系

假设有一天，一位顶级项目经理提出了如下需求：“我们正在进行的一个项目现在正使用消息分发服务。有时我们需要在短时间内发送大量数据。请问我们能否按现有方式继续使用这项服务，或者需要如何调整其容量来应对新的通信流量？”

解决这个问题的第一步是获取实际的数据量。假设预测的流量将是已知最大峰值时间值的三倍。然而，仅凭这一点还不足以判断我们是否能够处理这种增长。原因在于，即使我们知道服务在高峰时段处理的数据量，仍需确定达到服务容量限制的故障点，以便与预测进行对比。

我们的消息分发服务由多个组件组成。其中最慢的那个组件决定了整体服务能力，正如俗语所说，“链条的强度取决于最弱的一环”。因此，接下来的任务是建立一个性能测试环境并识别故障点。在性能测试期间逐步增加流量，直到响应质量低于规定阈值。此时，服务开始响应变慢甚至产生错误，由此可以确定哪个组件是瓶颈。

如果一切正常，我们可以宣布无需任何更改；但若事先未计划好这种增长，则可能意味着之前分配的资源中有三分之二从未被充分利用，这会引发成本效益的问题。

测试结果表明，我们只能处理预期增长的一半。因此，根据新需求，至少需要将吞吐量翻倍。

这是一个相对简单的任务。传统上，系统管理员会确定关键系统资源（如CPU、内存、磁盘、网络I/O等）的使用情况，并据此请求新的硬件。但是，从SRE的角度来看，我们还需要考虑特定于服务的限制，例如每个组件的时间约束。这些约束确保了消息在各组件间传输的时间不超过定义值。否则，在流量增长期间，某些消息可能会延迟或滞留在某个中间环节，从而导致问题。

为此，我们应该用准确的时间来表达整个服务完成所需的时间，并将其分配给各个组件。这样，就可以修正性能测试过程中故障点的含义。我们需要的是每个组件能够在不超出时间限制的情况下处理的消息数量，而非仅仅关注不会出错的消息数。这些时间约束实际上就是所谓的SLI（服务水平指标），它们与可用性和响应时间一起构成了每个组件的SLA。

我们现在有两种性质的SLA。一种涵盖了整个服务并与客户接触，用于观察整体服务行为；另一种则是针对每个组件的SLA，虽然不呈现给最终用户，但它帮助我们确定组件之间的关系，快速识别出影响整体服务的瓶颈，并用于精确缩放组件。在性能测试期间，SLI的值可以（并且应该）作为识别正确断点的依据。

回到扩展话题。我们之前提到需要将吞吐量翻倍。现在，由于添加了新要求，这个说法需要修改，因为测试过程已经改变，结果可能有所不同。

预计输入将首先由“数据接收器”组件接收。了解预期流量和组件性能指标的具体值后，我们可以估算所需的容量调整。通过计算现在的潜在最大容量、处理预期最大流量所需的容量，然后找到两者之间的增量。但请注意，这仅适用于“数据接收器”，因为预测的输入仅定义了此组件的大小。

另外需要注意的是，组件吞吐量翻倍并不一定意味着需要将其队列也翻倍。并非所有组件都能线性扩展，因此对于某些组件，只需添加几台计算机即可；而对于其他组件，则可能需要添加多于两倍的主机。

至于下一个组件，我们可以同样计算其当前容量，但我们不知道它将从前一个组件接收到多少数据。我们可以假设其流量会根据前一个组件输入的增长而增加，但这只是一个假设，可能与实际情况不符。

了解组件的作用后，我们可以通过一组实验来确定组件的输入和输出比率。然后，可以从最初预测的量中估算每个单独组件的输入数据量。例如，如果“数据转换”组件的输入/输出比为1:2，“数据接收器”的输入/输出比为1:1，则意味着对于每个原始一兆字节的消息，“分发服务器”将获得两兆字节。

最后，关于瓶颈组件。瓶颈是在流量增长时最先遇到困难的组件。即使我们将每个组件扩展到最佳性能和吞吐量，仍可能出现瓶颈。这是因为有些组件会被过度扩展，而另一些则可能接近其最大容量。瓶颈是当前负载与最大可用容量之间差异最小的组件，因此对流量变化非常敏感，并且将是首先超载的组件。

举个例子，假设预测的负载峰值为1000 RPS，重新调整后的组件容量如下：
- 数据接收器：1300 RPS
- 数据转换器：1250 RPS
- 数据分发器：1100 RPS

在这种情况下，分发服务器是瓶颈，因为它的性能最接近预测的峰值。尽管数据接收器功能强大，但在负载超过1100 RPS时也将出现问题。下一个瓶颈是数据转换器，因为它是最接近当前瓶颈的组件。

综上所述，我们现在知道了以下几点：
- 通过设置合理的SLA，可以更好地管理和扩展服务。
- 需要考虑每个组件的时间约束和性能指标。
- 识别瓶颈并对其进行优化是提高整体服务性能的关键。