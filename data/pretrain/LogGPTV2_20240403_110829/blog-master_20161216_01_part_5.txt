                     Worker 10: actual time=22.156..6313.278 rows=8281676 loops=1    
                       Buffers: shared hit=179 read=160049    
                     Worker 11: actual time=0.071..6232.342 rows=6407492 loops=1    
                       Buffers: shared hit=94 read=123127    
 Planning time: 0.210 ms    
 Execution time: 8886.857 ms    
(66 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select corr(c2,c1), covar_pop(c2,c1), covar_samp(c2,c1), regr_avgx(c2,c1), regr_avgy(c2,c1), regr_intercept(c2,c1), regr_r2(c2,c1), regr_slope(c2,c1), regr_sxx(c2,c1), regr_sxy(c2,c1), regr_syy(c2,c1) from normal;    
                                  QUERY PLAN     
----------------------------------------------------------------------------------------    
 Finalize Aggregate  (cost=2693910.67..2693910.68 rows=1 width=88) (actual time=4306.842..4306.842 rows=1 loops=1)    
   Output: corr((c2)::double precision, (c1)::double precision), covar_pop((c2)::double precision, (c1)::double precision), covar_samp((c2)::double precision, (c1)::double precision), regr_avgx((c2)::double precision, (c1)::double precis    
ion), regr_avgy((c2)::double precision, (c1)::double precision), regr_intercept((c2)::double precision, (c1)::double precision), regr_r2((c2)::double precision, (c1)::double precision), regr_slope((c2)::double precision, (c1)::double pre    
cision), regr_sxx((c2)::double precision, (c1)::double precision), regr_sxy((c2)::double precision, (c1)::double precision), regr_syy((c2)::double precision, (c1)::double precision)    
   Buffers: shared hit=2540 read=1923045    
   ->  Gather  (cost=2693910.31..2693910.32 rows=12 width=352) (actual time=4306.598..4306.785 rows=13 loops=1)    
         Output: (PARTIAL corr((c2)::double precision, (c1)::double precision)), (PARTIAL covar_pop((c2)::double precision, (c1)::double precision)), (PARTIAL covar_samp((c2)::double precision, (c1)::double precision)), (PARTIAL regr_avg    
x((c2)::double precision, (c1)::double precision)), (PARTIAL regr_avgy((c2)::double precision, (c1)::double precision)), (PARTIAL regr_intercept((c2)::double precision, (c1)::double precision)), (PARTIAL regr_r2((c2)::double precision, (    
c1)::double precision)), (PARTIAL regr_slope((c2)::double precision, (c1)::double precision)), (PARTIAL regr_sxx((c2)::double precision, (c1)::double precision)), (PARTIAL regr_sxy((c2)::double precision, (c1)::double precision)), (PARTI    
AL regr_syy((c2)::double precision, (c1)::double precision))    
         Workers Planned: 12    
         Workers Launched: 12    
         Buffers: shared hit=2540 read=1923045    
         ->  Partial Aggregate  (cost=2693910.31..2693910.32 rows=1 width=352) (actual time=4299.116..4299.116 rows=1 loops=13)    
               Output: PARTIAL corr((c2)::double precision, (c1)::double precision), PARTIAL covar_pop((c2)::double precision, (c1)::double precision), PARTIAL covar_samp((c2)::double precision, (c1)::double precision), PARTIAL regr_avgx    
((c2)::double precision, (c1)::double precision), PARTIAL regr_avgy((c2)::double precision, (c1)::double precision), PARTIAL regr_intercept((c2)::double precision, (c1)::double precision), PARTIAL regr_r2((c2)::double precision, (c1)::do    
uble precision), PARTIAL regr_slope((c2)::double precision, (c1)::double precision), PARTIAL regr_sxx((c2)::double precision, (c1)::double precision), PARTIAL regr_sxy((c2)::double precision, (c1)::double precision), PARTIAL regr_syy((c2    
)::double precision, (c1)::double precision)    
               Buffers: shared hit=32 read=1923045    
               Worker 0: actual time=4297.157..4297.157 rows=1 loops=1    
                 Buffers: shared hit=3 read=143194    
               Worker 1: actual time=4297.827..4297.827 rows=1 loops=1    
                 Buffers: shared hit=3 read=159914    
               Worker 2: actual time=4299.110..4299.110 rows=1 loops=1    
                 Buffers: shared hit=1 read=146417    
               Worker 3: actual time=4298.043..4298.043 rows=1 loops=1    
                 Buffers: shared hit=3 read=160742    
               Worker 4: actual time=4298.538..4298.538 rows=1 loops=1    
                 Buffers: shared hit=1 read=89259    
               Worker 5: actual time=4298.588..4298.588 rows=1 loops=1    
                 Buffers: shared hit=3 read=149895    
               Worker 6: actual time=4299.038..4299.038 rows=1 loops=1    
                 Buffers: shared hit=3 read=154132    
               Worker 7: actual time=4299.327..4299.327 rows=1 loops=1    
                 Buffers: shared hit=2 read=150503    
               Worker 8: actual time=4298.151..4298.151 rows=1 loops=1    
                 Buffers: shared hit=3 read=160307    
               Worker 9: actual time=4299.438..4299.438 rows=1 loops=1    
                 Buffers: shared hit=2 read=151403    
               Worker 10: actual time=4299.447..4299.447 rows=1 loops=1    
                 Buffers: shared hit=3 read=159475    
               Worker 11: actual time=4298.857..4298.857 rows=1 loops=1    
                 Buffers: shared hit=2 read=137020    
               ->  Parallel Seq Scan on public.normal  (cost=0.00..2006410.33 rows=8333333 width=8) (actual time=0.045..2197.153 rows=7692308 loops=13)    
                     Output: c2, c1    
                     Buffers: shared hit=32 read=1923045    
                     Worker 0: actual time=0.049..2196.906 rows=7446240 loops=1    
                       Buffers: shared hit=3 read=143194    
                     Worker 1: actual time=0.042..2221.352 rows=8315684 loops=1    
                       Buffers: shared hit=3 read=159914    
                     Worker 2: actual time=0.046..2220.055 rows=7613736 loops=1    
                       Buffers: shared hit=1 read=146417    
                     Worker 3: actual time=0.047..2213.939 rows=8358740 loops=1    
                       Buffers: shared hit=3 read=160742    
                     Worker 4: actual time=0.050..2117.906 rows=4641520 loops=1    
                       Buffers: shared hit=1 read=89259    
                     Worker 5: actual time=0.045..2200.762 rows=7794696 loops=1    
                       Buffers: shared hit=3 read=149895    
                     Worker 6: actual time=0.039..2217.515 rows=8015020 loops=1    
                       Buffers: shared hit=3 read=154132    
                     Worker 7: actual time=0.040..2205.260 rows=7826260 loops=1    
                       Buffers: shared hit=2 read=150503    
                     Worker 8: actual time=0.051..2210.629 rows=8336120 loops=1    
                       Buffers: shared hit=3 read=160307    
                     Worker 9: actual time=0.050..2193.906 rows=7873060 loops=1    
                       Buffers: shared hit=2 read=151403    
                     Worker 10: actual time=0.045..2195.646 rows=8292856 loops=1    
                       Buffers: shared hit=3 read=159475    
                     Worker 11: actual time=0.044..2191.400 rows=7125144 loops=1    
                       Buffers: shared hit=2 read=137020    
 Planning time: 0.324 ms    
 Execution time: 4345.409 ms    
(64 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select corr(c2,c1), covar_pop(c2,c1), covar_samp(c2,c1), regr_avgx(c2,c1), regr_avgy(c2,c1), regr_intercept(c2,c1), regr_r2(c2,c1), regr_slope(c2,c1), regr_sxx(c2,c1), regr_sxy(c2,c1), regr_syy(c2,c1) from normal where c1+c2+c3+c4+c5+c6+c7+c8 >10000000 and c9+c10+c11+c12+c13+c14+c15+c16 >10000000 and c17+c18+c19+c20+c21+c22+c23+c24 >10000000 and c25+c26+c27+c28+c29+c30+c31 >10000000;    
                   QUERY PLAN     
-------------------------------------------------------------    
 Finalize Aggregate  (cost=2660731.72..2660731.73 rows=1 width=88) (actual time=17908.499..17908.499 rows=1 loops=1)    
   Output: corr((c2)::double precision, (c1)::double precision), covar_pop((c2)::double precision, (c1)::double precision), covar_samp((c2)::double precision, (c1)::double precision), regr_avgx((c2)::double precision, (c1)::double precis    
ion), regr_avgy((c2)::double precision, (c1)::double precision), regr_intercept((c2)::double precision, (c1)::double precision), regr_r2((c2)::double precision, (c1)::double precision), regr_slope((c2)::double precision, (c1)::double pre    
cision), regr_sxx((c2)::double precision, (c1)::double precision), regr_sxy((c2)::double precision, (c1)::double precision), regr_syy((c2)::double precision, (c1)::double precision)    
   Buffers: shared hit=2956 read=1922629    
   ->  Gather  (cost=2660731.35..2660731.36 rows=12 width=352) (actual time=17908.274..17908.442 rows=13 loops=1)    
         Output: (PARTIAL corr((c2)::double precision, (c1)::double precision)), (PARTIAL covar_pop((c2)::double precision, (c1)::double precision)), (PARTIAL covar_samp((c2)::double precision, (c1)::double precision)), (PARTIAL regr_avg    
x((c2)::double precision, (c1)::double precision)), (PARTIAL regr_avgy((c2)::double precision, (c1)::double precision)), (PARTIAL regr_intercept((c2)::double precision, (c1)::double precision)), (PARTIAL regr_r2((c2)::double precision, (    
c1)::double precision)), (PARTIAL regr_slope((c2)::double precision, (c1)::double precision)), (PARTIAL regr_sxx((c2)::double precision, (c1)::double precision)), (PARTIAL regr_sxy((c2)::double precision, (c1)::double precision)), (PARTI    
AL regr_syy((c2)::double precision, (c1)::double precision))    
         Workers Planned: 12    
         Workers Launched: 12    
         Buffers: shared hit=2956 read=1922629    
         ->  Partial Aggregate  (cost=2660731.35..2660731.36 rows=1 width=352) (actual time=17901.359..17901.360 rows=1 loops=13)    
               Output: PARTIAL corr((c2)::double precision, (c1)::double precision), PARTIAL covar_pop((c2)::double precision, (c1)::double precision), PARTIAL covar_samp((c2)::double precision, (c1)::double precision), PARTIAL regr_avgx    
((c2)::double precision, (c1)::double precision), PARTIAL regr_avgy((c2)::double precision, (c1)::double precision), PARTIAL regr_intercept((c2)::double precision, (c1)::double precision), PARTIAL regr_r2((c2)::double precision, (c1)::do    
uble precision), PARTIAL regr_slope((c2)::double precision, (c1)::double precision), PARTIAL regr_sxx((c2)::double precision, (c1)::double precision), PARTIAL regr_sxy((c2)::double precision, (c1)::double precision), PARTIAL regr_syy((c2    
)::double precision, (c1)::double precision)    
               Buffers: shared hit=448 read=1922629    
               Worker 0: actual time=17899.397..17899.397 rows=1 loops=1    
                 Buffers: shared hit=36 read=160403    
               Worker 1: actual time=17897.914..17897.914 rows=1 loops=1    
                 Buffers: shared hit=36 read=147653    
               Worker 2: actual time=17902.875..17902.875 rows=1 loops=1    
                 Buffers: shared hit=36 read=146007    
               Worker 3: actual time=17900.001..17900.001 rows=1 loops=1    
                 Buffers: shared hit=39 read=157261    
               Worker 4: actual time=17898.566..17898.567 rows=1 loops=1    
                 Buffers: shared hit=38 read=134255    
               Worker 5: actual time=17900.642..17900.642 rows=1 loops=1    
                 Buffers: shared hit=37 read=159029    
               Worker 6: actual time=17900.981..17900.981 rows=1 loops=1    
                 Buffers: shared hit=40 read=138712    
               Worker 7: actual time=17901.223..17901.223 rows=1 loops=1    
                 Buffers: shared hit=38 read=153789    
               Worker 8: actual time=17901.659..17901.659 rows=1 loops=1    
                 Buffers: shared hit=21 read=151719    
               Worker 9: actual time=17901.866..17901.866 rows=1 loops=1    
                 Buffers: shared hit=35 read=156533    
               Worker 10: actual time=17902.572..17902.572 rows=1 loops=1    
                 Buffers: shared hit=22 read=141011    
               Worker 11: actual time=17902.910..17902.910 rows=1 loops=1    
                 Buffers: shared hit=36 read=115668    
               ->  Parallel Seq Scan on public.normal  (cost=0.00..2652243.67 rows=102881 width=8) (actual time=83.482..15697.798 rows=7582418 loops=13)    
                     Output: c2, c1    
                     Filter: ((((((((normal.c25 + normal.c26) + normal.c27) + normal.c28) + normal.c29) + normal.c30) + normal.c31) > 10000000) AND ((((((((normal.c1 + normal.c2) + normal.c3) + normal.c4) + normal.c5) + normal.c6) + norm    
al.c7) + normal.c8) > 10000000) AND ((((((((normal.c9 + normal.c10) + normal.c11) + normal.c12) + normal.c13) + normal.c14) + normal.c15) + normal.c16) > 10000000) AND ((((((((normal.c17 + normal.c18) + normal.c19) + normal.c20) + normal    
.c21) + normal.c22) + normal.c23) + normal.c24) > 10000000))    
                     Rows Removed by Filter: 9984    
                     Buffers: shared hit=448 read=1922629    
                     Worker 0: actual time=81.491..15776.184 rows=8228324 loops=1    
                       Buffers: shared hit=36 read=160403    
                     Worker 1: actual time=80.040..15716.340 rows=7616232 loops=1    
                       Buffers: shared hit=36 read=147653    
                     Worker 2: actual time=85.006..15665.457 rows=7472920 loops=1    
                       Buffers: shared hit=36 read=146007    
                     Worker 3: actual time=82.124..15821.147 rows=8068060 loops=1    
                       Buffers: shared hit=39 read=157261    
                     Worker 4: actual time=80.735..15647.702 rows=6913452 loops=1    
                       Buffers: shared hit=38 read=134255    
                     Worker 5: actual time=82.749..15751.494 rows=8155212 loops=1    
                       Buffers: shared hit=37 read=159029    
                     Worker 6: actual time=83.127..15672.475 rows=7102940 loops=1    
                       Buffers: shared hit=40 read=138712    
                     Worker 7: actual time=83.315..15765.036 rows=7886133 loops=1    
                       Buffers: shared hit=38 read=153789    
                     Worker 8: actual time=83.724..15737.637 rows=7773376 loops=1    
                       Buffers: shared hit=21 read=151719    
                     Worker 9: actual time=84.043..15728.456 rows=8022040 loops=1    
                       Buffers: shared hit=35 read=156533    
                     Worker 10: actual time=84.724..15662.665 rows=7215416 loops=1    
                       Buffers: shared hit=22 read=141011    
                     Worker 11: actual time=85.017..15482.116 rows=5894720 loops=1    
                       Buffers: shared hit=36 read=115668    
 Planning time: 0.232 ms    
 Execution time: 17913.434 ms    
(66 rows)    
```    
![pic](20161216_01_pic_008.png)      
## 小结  
在数据分析领域，单一的功能是远远不能满足大数据量的存储，计算需求的，需要多年的技术和用户的积累。      
需要多方面的组合拳，才能发挥数据库的能力，让数据真正产生价值。     
更需要理论的支撑    
PostgreSQL起源于伯克利大学，在全球各大领域，上至天文，下至地理，有着非常丰富的用户群体，伴随工业界和学术界的发展，经历了43的进化，有许多特性是非常值得学习，也是真正能让数据发挥价值的。    
比如本文提到的    
1\. 列存储，可以提高压缩比，帮助用户节约资源。同时对少量列的分析挖掘需求也有明显的性能提升效果。     
2\. LLVM，在大数据量的，多表达式运算场景中，可以动态生成执行码，减少函数间的跳转，大幅提升CPU运算效率。    
3\. 多核并行计算，可以充分利用硬件的资源，发挥最大能效。     
还有很多值得提到的特性比如    
1\. BRIN索引，在流式数据，时序数据的检索中起到了巨大的作用，使用很小的索引就可以帮助用户快速的检索线性相关性很棒的字段。     
2\. MADLib机器学习库，内置了几百种机器学习算法库，覆盖了绝大多数的挖掘场景需求。     