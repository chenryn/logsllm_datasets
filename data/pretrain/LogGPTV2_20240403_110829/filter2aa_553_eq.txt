7.a.用fprintf()储存8238201时，将其视为7个字符，保存在7字节中。用
fwrite()储存时，使用该数的二进制表示，将其储存为一个4字节的整数。
b.没有区别。两个函数都将其储存为一个单字节的二进制码。
8.第1条语句是第2条语句的速记表示。第3条语句把消息写到标准错误
上。通常，标准错误被定向到与标准输出相同的位置。但是标准错误不受标
准输出重定向的影响。
9.可以在以"r+"模式打开的文件中读写，所以该模式最合适。"a+"只允
许在文件的末尾添加内容。"w+"模式提供一个空文件，丢弃文件原来的内
容。
A.14 第14章复习题答案
1.正确的关键是 struct，不是 structure。该结构模板要在左花括号前面有
1505
一个标记，或者在右花括号后面有一个结构变量名。另外，*togs后面和模
板结尾处都少一个分号。
2.输出如下：
6 1
22 Spiffo Road
S p
3.
struct month {
char name[10];
char abbrev[4];
int days;
int monumb;
};
4.
struct month months[12] =
{
{ "January", "jan", 31, 1 },
{ "February", "feb", 28, 2 },
{ "March", "mar", 31, 3 },
1506
{ "April", "apr", 30, 4 },
{ "May", "may", 31, 5 },
{ "June", "jun", 30, 6 },
{ "July", "jul", 31, 7 },
{ "August", "aug", 31, 8 },
{ "September", "sep", 30, 9 },
{ "October", "oct", 31, 10 },
{ "November", "nov", 30, 11 },
{ "December", "dec", 31, 12 }
};
5.
extern struct month months [];
int days(int month)
{
int index, total;
if (month  12)
return(-1); /* error signal */
else
{
1507
for (index = 0, total = 0; index title.last
c.下面是一个版本：
#include 
#include "starfolk.h"   /* 让结构定义可用 */
void prbem (const struct bem * pbem )
{
printf("%s %s is a %d-limbed %s.\n", pbem->title.first,
pbem->title.last, pbem->limbs, pbem->type);
}
8.a.willie.born
b.pt->born
c.scanf("%d", &willie.born);
d.scanf("%d", &pt->born);
e.scanf("%s", willie.name.lname);
1509
f.scanf("%s", pt->name.lname);
g.willie.name.fname[2]
h.strlen(willie.name.fname) + strlen(willie.name.lname)
9.下面是一种方案：
struct car {
char name[20];
float hp;
float epampg;
float wbase;
int year;
};
10.应该这样建立函数：
struct gas {
float distance;
float gals;
float mpg;
};
struct gas mpgs(struct gas trip)
{
1510
if (trip.gals > 0)
trip.mpg = trip.distance / trip.gals;
else
trip.mpg = -1.0;
return trip;
}
void set_mpgs(struct gas * ptrip)
{
if (ptrip->gals > 0)
ptrip->mpg = ptrip->distance / ptrip->gals;
else
ptrip->mpg = -1.0;
}
注意，第1个函数不能直接改变其主调程序中的值，所以必须用返回值
才能传递信息。
struct gas idaho = {430.0, 14.8};  // 设置前两个成员
idaho = mpgs(idaho);        // 重置数据结构
但是，第2个函数可以直接访问最初的结构：
struct gas ohio = {583, 17.6};   //设置前两个成员
1511
set_mpgs(&ohio);          // 设置第3个成员
11.enum choices {no, yes, maybe};
12.char * (*pfun)(char *, char);
13.
double sum(double, double);
double diff(double, double);
double times(double, double);
double divide(double, double);
double (*pf1[4])(double, double) = {sum, diff, times, divide};
或者用更简单的形式，把代码中最后一行替换成：
typedef double (*ptype) (double, double);
ptype pfl[4] = {sum,diff, times, divide};
调用diff()函数：
pf1[1](10.0, 2.5);   // 第1种表示法
(*pf1[1])(10.0, 2.5); // 等价表示法
A.15 第15章复习题答案
1.a.00000011
b.00001101
c.00111011
1512
d.01110111
2.a.21, 025, 0x15
b.85, 0125, 0x55
c.76, 0114, 0x4C
d.157, 0235, 0x9D
3.a.252
b.2
c.7
d.7
e.5
f.3
g.28
4.a.255
b.1 (not false is true)
c.0
d.1 (true and true is true)
e.6
f.1 (true or true is true)
g.40
1513
5.掩码的二进制是1111111；十进制是127；八进制是0177；十六进制是
0x7F。
6.bitval * 2和bitval  (Y) && (X) % 2 == 0 ? 1 : 0 )
5.#define PR(X,Y) printf(#X " is %d and " #Y " is %d\n", X,Y)
（因为该宏中没有运算符（如，乘法）作用于X和Y，所以不需要使用
圆括号。）
6.a.#define QUARTERCENTURY 25
b.#define SPACE ' '
c.#define PS() putchar(' ')或#define PS() putchar(SPACE)
d.#define BIG(X) ((X) + 3)
e.#define SUMSQ(X,Y) ((X)*(X) + (Y)*(Y))
1515
7.试试这样：#define P(X) printf("name: "#X"; value: %d; address: %p\n",
X, &X) （如果你的实现无法识别地址专用的%p转换说明，可以用%u或%lu
代替。）
8.使用条件编译指令。一种方法是使用#ifndef：
#define _SKIP_ /* 如果不需要跳过代码，则删除这条指令 */
#ifndef _SKIP_
/* 需要跳过的代码 */
#endif
9.
#ifdef PR_DATE
printf("Date = %s\n", _ _DATE_ _);
#endif
10.第1个版本返回x*x，这只是返回了square()的double类型值。例如，
square(1.3)会返回1.69。第2个版本返回 (int)(x*x)，计算结果被截断后返回。
但是，由于该函数的返回类型是double，int类型的值将被升级为double类型
的值，所以1.69将先被转换成1，然后被转换成1.00。第3个版本返回(int)
(x*x+0.5)。加上 0.5可以让函数把结果四舍五入至与原值最接近的值，而不
是简单地截断。所以，1.69+0.5得2.19，然后被截断为2，然后被转换成
2.00；而1.44+0.5得1.94，被截断为1，然后被转换成1.00。
11.这是一种方案: #define BOOL(X) _Generic((X), _Bool : "boolean",
default : "not boolean")12.应该把argv参数声明为char *argv[]类型。命令行参
数被储存为字符串，所以该程序应该先把argv[1]中的字符串转换成double类
型的值。例如，用stdlib.h库中的atof()函数。程序中使用了sqrt()函数，所以
应包含math.h头文件。程序在求平方根之前应排除参数为负的情况（检查参
1516
数是否大于或等于0）。
13.a.qsort( (void *)scores, (size_t) 1000, sizeof (double), comp);
b.下面是一个比较使用的比较函数：
int comp(const void * p1, const void * p2)
{
/* 要用指向int的指针来访问值 */
/* 在C中是否进行强制类型转换都可以，在C++中必须进行强制类型转
换 */
const int * a1 = (const int *) p1; const int * a2 = (const int *)
p2;
if (*a1 > *a2)
return -1;
else if (*a1 == *a2)
return 0;
else
return 1;