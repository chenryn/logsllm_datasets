口DROP DATABASE语句只会根据表和其他数据库对象所使用的文件扩展名来删除文件。如
CREATEDATABASEdb_name语句会在数据目录下创建一个名为db_name的数据库目录
SHOWDATABASES语句可以列出位于数据目录里的目录名称。
样才能确保InnoDB存储引擎会更新其数据字典，并从表空间里删除该表的内容。
容存储在那里。如果数据库包含InnoDB表，则必须使用DROP DATABASE语句来删除，这
InnoDB存储引擎会在其系统表空间里维护一个数据字典条目，并且也顺便会将该表的内
删除数据库目录的办法无法安全地删除数据库里的InnoDB表。对于每一个InnoDB表，
题，可以先手动删除多余的文件和子目录，然后再次执行DROPDATABASE语句。
种后果是，该数据库的名字仍会显示在SHOW DATABASE语句的输出结果里。为解决此问
下，数据库目录不会被删除，并且DROP DATABASE语句会返回一个错误。这种情况的一
果你在数据库目录里创建了其他文件或子目录，那么服务器不会删除它们。在这种情况
第11章MySQL数据目录
·表在文件系统里的表示
如
---
## Page 421
db_name语句的输出结果与 db_name的数据库目录里的那个.frm文件的基本名列表相同。
11.2.5SQL语句与表文件操作的对应关系
字。例如，触发器mytrig有一个mytrig.TRN文件，其中包含了表名mytbl。
触发器还有一个根据触发器来命名的.TRN文件，其中包含与这个触发器相关联的那个表的名
果一个表有多个触发器，那么服务器会把它们的所有定义集中存储在同一个.TRG文件里。每个
个名为mytbl的表关联在一起，那么存储它的文件将是mytbl.TRG，而不是mytrig.TRG。
件的基本名与触发器所属的那个表的名字一样。例如，有一个名为 mytrig 的触发器，它与一
和视图的名字一样，因此一个名为 myview的视图是由一个名为 myview.frm的文件表示的。
11.2.4视图和触发器在文件系统里的表示
内容为空。
内容也会随之丢失。在服务器重启之后，这个表仍然存在（因为它的.frm 文件存在)，只是其
表的数据和索引全部存储在内存里，而不是存储在磁盘里。当服务器关闭时，MEMORY表的
的.frm文件。除此以外，文件系统里就没有其他与之对应的东西了，因为服务器会把MEMORY
的MyISAM表将有以下3个文件。
中每个文件的基本名都等同于表名，其扩展名则表明了该文件的用途。例如，一个名为 mytbl
系统表空间也是必需的。
有关的信息。这个字典会保存在系统表空间里，因此，即使你使用独立表空间来存储表的内容，
了表结构的定义。对于表的内容，InnoDB提供了两种表示方式，它们都是基于表空间实现的。
存储引擎在功能和行为方面有何差异”有关的更多信息请参考2.6.1节。
件的名字和结构会因存储引擎的不同而有所差异。
责创建.frm文件，而各个存储引擎会创建一些附加文件，用于保存数据行和索引信息。这些文
InnoDB是默认存储引擎。在数据库目录里，每个InnoDB表都有一个.frm文件，其中包含
在创建MySQL所支持的任意类型的表时，需要执行CREATE TABLE语句来定义表的结构，
每一种存储引擎都使用了一个.frm 文件来存储表格式（定义），因此 SHOW TABLE FROM
每个触发器存储在一个.TRG文件里，其中包含着触发器的定义和其他相关属性。触发器
接下来会对几种具有代表性的存储引擎如何在磁盘上存储文件的特点进行讨论。与“这些
每个视图只有一个.frm文件，其中包含着该视图的定义和其他相关属性。该文件的基本名
在包含视图和触发器对象的数据库目录里，有与对象相关联的文件。
MEMORY表是一种内存表。每个MEMORY表在数据库目录里都只有一个描述其格式
 mytbl.MYI。
mytbl.frm。格
系统表空间还有另一个用途。InnoDB在其内部维护着一个数据字典，其中包含了与每个表
口
口
口系统表空间。这种表空间由数据目录里的一个或多个大文件构成。表空间的这些组成文
mytbl.MYD。
数据和索引的.ibd文件。
每个InnoDB表在数据库目录里都会有两个与表特定相关的文件，即.frm文件和包含表
独立表空间。通过配置，InnoDB可以实现每个表一个表空间的存储模式。在这种情况下，
关的文件是.frm文件。
认情况下，InnoDB 会将其表存储到这个系统表空间里。对于这类表，唯一与表特定相
件共同形成了一个在逻辑上连续不断的存储区域，其大小为各个组成文件大小之和。默
，索引文件，其中包含该表的所有索引信息。
数据文件，
格式文件，其中包含对该表结构的描述。
，其中存储了该表各行的内容。
11.2数据目录结构
401
文
---
## Page 422
至少会与一个.frm文件相对应。因此，在命名MySQL标识符的时候还要考虑以下限制。
库都是以数据库目录的形式进行表示的，并且不管使用何种存储引擎，每个表在文件系统里都
件系统的命名规则，因为数据库名和表名都对应着目录名和文件名：在文件系统里，每个数据
节中详细列出了这些规则，这里再简要概括一下。
11.2.6
才能在删除文件的同时更新其数据字典。
储引擎还是没有机会更新数据字典。因此，必须使用DROP TABLE语句，这样InnoDB存储引擎
己的.ibd 文件。但是，通过删除这些文件的方式来删除表，仍然是不正确的，因为InnoDB有
表的数据和索引“搁置”在系统表空间里。
底删除该表。InnoDB 数据字典只能由InnoDB自己更新，并且如果只删除.frm文件，则会导致
储在系统表空间里的InnoDB表，总是有一个.frm文件与之对应，但是删除这个文件并不能彻
以文件系统里的文件来表示的，因此没有与DROPTABLE语句等效的文件系统命令。例如，
式手动删除该表。对于其他的存储引擎，如 InnoDB或MEMORY，由于表的部分内容可能不是
间标记为空闲。
那么 InnoDB存储引擎还会更新它的数据字典，并在 InnoDB系统表空间里把与该表相关联的空
新引擎会使用用于表示表的那些文件的恰当类型重新写入那些内容。
处理。如果ALTERTABLE语句更改了表的存储引擎，那么表的内容也会被转换到新的存储引擎，
和DROPINDEX时，也会发生这种情况，因为服务器会把它们当作ALTER TABLE的等效语句来
其结构的更改；同时，服务器还会修改表的内容（即数据和索引I）。在执行语句CREATE INDEX
个登录账户进行访问。
表而创建的所有文件的所有者和访问模式，都被设置成了只允许用来运行MySQL服务器的那
个.MYI 索引文件；而CSV 存储引擎会创建一个.CSV数据文件。在Unix系统里，为表示这个
InnoDB表空间里对其数据和索引信息进行初始化。MyISAM会创建一个.MYD数据文件和一
务器会为新表创建一个.frm文件，在其中存储该表定义的内部编码，并且会告知相应的存储引
ENGINE子句，那么MySQL 将使用默认存储引擎（如果你未更改，则为InnoDB 存储引擎)。服
402
对于某些存储引擎，如MyISAM，
去创建与该表相关联的其他文件。例如，InnoDB 会创建一个数据字典条目，并在相应的
如果InnoDB表有其自己的独立表空间，那么它会在数据库目录里表示成.frm文件和其自
MySQL实现DROP TABLE语句的方式是，删除那些表示表的文件。如果是删除InnoDB表，
当执行 ALTERTABLE 语句时，服务器会对表的.frm文件重新编码，以反映出这条语句对
口底层文件系统是否区分大小写，会对数据库和表的命名与引用产生影响。如果文件系统
口MySQL允许的数据库名和表名的最大长度为64个字符，但这些名字的长度都不得超过操
此外，MySQL服务器所在主机的操作系统也可能对标识符施加其他限制。这些限制源于文
用反引号引起来的标识符可以包含其他字符（如odd?name！）。如果使用SQL保留字作
口不加引号的标识符可以由大小写形式的字母a-z、数字0-9、美元符号“s”、下划线“_”
在命名数据库和其他对象（如表）的标识符时，MySQL有一套自己的标识符命名规则。2.2
口
作系统所允许的最大长度。
以及范围在U+0080到U+FFFF之间的Unicode扩展字符构成。
标识符的最大长度为64个字符。
么这些标识符既可以用反引号，也可以用双引号。
为标识符，则也需要使用反引号将其引起来。如果启用了SQL的ANSI_QUOTES模式，那
操作系统对数据库对象名字的约束
第11章MySQL数据目录
，可以通过在表相对应的那个数据库目录里删除文件的方
用于表明想要使用哪种存储引擎。如果省略
存
存
---
## Page 423
文件文件组成，其中每个文件都可以达到最大长度。另一种突破文件大小限制的方法是，在
系统表空间的总长度很容易超过文件的最大长度。为解决此问题，可以把表空间配置为由多个
文件，也会受这种限制的影响。这种限制也适用于构成InnoDB表空间的那些文件。不过，InnoDB
定具体的界限。
11.2.7
字将全部为小写。
重新创建它们。
简单的办法是先转储这些数据库，然后在设置了lower_case_table_names系统变量之后，
重新命名表。）如果你有很多表需要重新命名，或者有许多数据库的名字包含大写字母，那么
设置lower_case_table_names 系统变量。（可以用ALTER TABLE或 RENAME TABLE 语句来
为避免出现这个问题，可以先把名字里有大写字母的表全部重新命名为小写字母形式，然后再来
系统变量设置为1。如果在设置此变量之前，已经创建了数据库或表，而且其名字里包含有大写
必须在开始创建数据库或表之前（而不是之后)通过服务器配置，将lower_case_table_names
来，在系统间移动数据库和表会变得更容易。不过，这里提醒一下，如果打算使用这种策略，则
lower_case_table_names 系统变量设置为1，这个设置有下面两个效果。
法是，固定使用一种大小写形式的名字。另一种办法是，在启动服务器时，将
odd@PI:EMAIL。与表相关联的其他文件的命名方式与此类似。
和“!”的编码值为003f 和0021，那么odd?name！表所对应的.frm文件的名字即为
的所有字符在文件名里都将被应映射成，“@”后
在SQL语句里出现的那些名字当中，使用像“”和“\”这样的字符：在数字和拉丁字母以外
操作系统对文件的最大长度有限制。那些用于表示表的文件，如MyISAM表的.MYD和.MYI
在 MySQL 里，表的长度是有限的，不过表的长度受很多方面的限制，因此很难精准地确
lower_case_table_names 实际上还有另外几个可取值，详细信息请参阅附录 D。
由于设置了lower_case_table_names，所有的数据库和表在重新创建之后在磁盘里的名
（1）用mysqldump工具将各个数据库转储出来：
之前提到过，文件系统区分大小写会对数据库和表的命名产生影响。解决此问题的一种办
%mysqldb_name.sgl
这两种做法的结果是，不管文件系统是否区分大小写，所有名字都不会区分大小写。如此一
口在为某个表创建相应的磁盘文件之前，服务器会先把该表的名字转换为小写。
MySQL服务器会对标识符里可能导致文件名出现问题的特殊字符进行编码。这个编码允许
(3）
口
小写。
在语句里引用这个表时，服务器会在试图到磁盘上查找这个表之前，把它的名字转换为
分大小写的服务器上，则需要对此问题引起注意。
关闭服务器，重新配置它，将lower_case_table_names设置为1，然后重启服务器。
务
统），那么文件名abc和ABC所指的就是同一个文件。如果在某个文件名区分大小写的服
文
区分大小写（对于Unix系统通常是这样），那么文件名abc和ABC所指的就是两个不同的
影响表最大长度的因素
器上开发了一个数据库，并且可能需要把这个数据库移动或复制到另一个文件名不区
件。如果文件系统不区分大小写（如Windows系统或者MacOSX系统的扩展文件系
后面紧跟一个编码后的字符值。例如，字符“？”
11.2数据目录结构
403
更
来
---
## Page 424
一个。MySQL服务器会智能地缓存这些文件描述符，但是对于一个繁忙的服务器，在同时为大
描述符。如果某个表由多个文件表示，那么打开这个表将需要多个文件描述符，而不是只需要
据库表的）的操作更是如此。
结构。同时，这种结构也隐含着会有一些性能方面的问题，特别是对于打开文件（用于表示数
11.2.8数据目录结构对系统性能的影响
请参考12.5.3.1节。
件的大小上限，并且还有可用的磁盘空间，那么它便能继续增大。与配置指导有关的更多信息
种做法是，使最后那个表空间组件可以自动扩展，这样，只要这个表空间组件没有超过系统文
填满时，InnoDB表则不能再增大，除非往这个表空间里增加另外的组件，使之变得更大。另-
配了多少表空间。只要表空间未被填满，任何InnoDB 表都可以不断增大。相反，当表空间
们都共用同一个空间，这样一来，每个表不仅要受限于表空间的长度，还要受限于为其他表分
表空间可以跨多个文件，因而可以变得非常大。但是，很有可能你会拥有许多InnoDB 表，
度的因素将是MySQL，即那个内部数据指针大小。这个因素是你可以控制的。
那么表文件的有效上值也将为2GB。另外，如果系统支持大于256TB的文件，那么决定表长
时
能由那些因素中的最小值来确定。假设，你想创建一个MyISAM表。当使用默认数据指针大小
行总数将不超过索引中唯一值的数目。
类型允许有更多的行。更一般的情况是，
UNSIGNED，其所能容纳的最大值为255，那么表可能具有的最大行数也将是255。更大的整数
量索引的表，则很可能会是索引文件先到达上限。
上限造成影响。对于没有索引或者索引比较少的表，
那么这个表的长度就会达到上限。对于MyISAM表，
引擎的不同而有所区别。例如：
样大。与配置指导有关的更多信息请参考12.5.3.1节。
InnoDB表空间里使用磁盘里的原始分区。磁盘原始分区上的表空间组件可以与磁盘分区本身一
404
对于那些使用其自己的文件来单独表示各个表的存储引擎，每次打开表都会需要一个文件
寸，MySQL允许数据和索引文件各自达到256TB。但是，如果操作系统限制文件大小为2GB，
AUTO_INCREMENT列会隐式限制表所能拥有的行数。例如，若列的类型为TINYINT
除了操作系统的限制以外，MySQL对于表的长度还有其自己的内部限制。这些限制因存储
MySQL数据目录的结构比较容易理解，因为它以一种很自然的方式使用了文件系统的分层
对于存储在系统表空间里的InnoDB表，单个的InnoDB表可以增大到与表空间一样大，
为了确定实际可能达到的最大表长度，必须考虑到所有可能的因素。有效的最大表长度可
对于使用不同文件表示数据和索引的存储引擎，
口
口
度，可以设置myisam_data_pointer_size系统变量，新设置会对此后创建的表生效
使用 ALTER TABLE语句来增大这些选项值。如果想要直接更改默认的 MyISAM指针定
65 536TB。（与CREATETABLE语句有关的描述信息请参考附录E。）这些选项会）
候，如果使用了AVG_ROW_LENGTH和 MAX_ROWS 选项，这些文件的大小上限将可达至
对于MyISAM表，.MYD 和.MYI文件的最大长度默认为256TB。但是，在创建表的时
MyISAM表增长到其最大长度，并且出现了与表操作有关的135或136号错误时，可以
MySQL内部的行指针宽度产生影响，而这个宽度则决定着表所能容纳的最大行数。
此时，InnoDB表的长度将受限于操作系统的文件大小上限。
InnoDB配置为使用独立表空间，则每个InnoDB表的内容将存储在其自己的.ibd文件里。
表空间的最大长度也是存储在表空间里的单个InnoDB表的长度上限。如果把存储引擎
对于InnoDB存储引擎，InnoDB系统表空间的最大长度为40亿页，其中每页的大小为16KB。
第11章MySQL数据目录
，如果表包含PRIMARYKEY或UNIQUE索引，那么它的
，很可能是数据文件先到达上限。对于有大
，其索引情况也会对哪种类型的文件先到
只要其中有一个文件达到文件大小上限
它
司
达
被
分
当
---
## Page 425
它们自己的日志或其他文件。例如，InnoDB存储引擎便是如此。
的文件。下面这张表格只列出了服务器级的状态文件和日志文件。个别存储引擎可能还会创建
务器主机名称继承来的。二进制日志和中继日志都会被创建为一组带编号（用 nnmnnn 表示)
这些文件的默认位置为服务器的数据目录，其中许多默认名是从在表中表示为HOSTNANME的服
11.2.9MySQL状态文件和日志文件
地讲，对于它所打开的任何表，在它读取这个表的.frm文件时，只需打开一个描述符。
组成文件，InnoDB只需要一个描述符即可（在服务器进程存活期间，这是个恒定的值），简单
要的磁盘文件数量，从而也会大量减少打开表所需的文件描述符数量。对于表空间里的每一个
联，并且会把所有 InnoDB 表的数据和索引信息都存储在一起。这样可以减少表示这些表所需
InnoDB系统表空间里。在这种情况下，InnoDB存储引擎只会与每个表仅有的.frm文件相关
式合并表的原因如下。
于哪一个用户即可。如果这样能显著减少表的数量，那么应用程序的性能将会得到提高。
同的结构。如果想要把这些表组合为一个表，可能只需在其中增加一列，用于标识每一个行属
根本不需要这么多表。为每个用户创建一个表的应用程序，会产生许多表，而这些表都拥有