最后还有一个http post传输base64编码处理，所以抓包看到的也是base64编码。
### IDP收到AuthnRequest的处理
在`mujina.idp.SAMLMessageHandler#extractSAMLMessageContext`中对SP发送的AuthnRequest进行了提取并校验:
对AuthnRequest校验的安全策略只检测IssueInstant是否过期，没有其他策略。然后还有validatorSuites检测，可以看到有两种类型的validator，每个下面有多个标签对应的具体validator。不过测试发现这里IDP没有对AuthnRequest进行证书校验、签名校验、摘要校验的操作。
### IDP生成AuthnResponse
对Assertion签名，调用栈如下:
    calculateDigest:719, Reference (org.apache.xml.security.signature)
    generateDigestValue:406, Reference (org.apache.xml.security.signature)
    generateDigestValues:206, Manifest (org.apache.xml.security.signature)
    sign:609, XMLSignature (org.apache.xml.security.signature)
    signObject:77, Signer (org.opensaml.xml.signature)
    signAssertion:153, SAMLBuilder (mujina.saml)
    sendAuthnResponse:123, SAMLMessageHandler (mujina.idp)
    doSSO:77, SsoController (mujina.idp)
    singleSignOnServicePost:55, SsoController (mujina.idp)
摘要内容如下:
摘要内容:
    http://mock-idp111111http://mock-spurn:oasis:names:tc:SAML:2.0:ac:classes:Passwordhttp://mock-idpJohn Doe111111sdsdsdsdJohn PI:EMAIL@example.comexample.com
这里也是采用了和之前SP生成AuthnRequest相同的transform算法，所以排除了Signature标签以及进行了规范化处理。后面还会对SingedInfo进行签名，和AuthnRequest签名方式一样的方式，签名的私钥在application.yml文件中有配置。
后面还会对Response标签进行一次摘要和签名:
    calculateDigest:719, Reference (org.apache.xml.security.signature)
    generateDigestValue:406, Reference (org.apache.xml.security.signature)
    generateDigestValues:206, Manifest (org.apache.xml.security.signature)
    sign:609, XMLSignature (org.apache.xml.security.signature)
    signObject:77, Signer (org.opensaml.xml.signature)
    signMessage:193, BaseSAML2MessageEncoder (org.opensaml.saml2.binding.encoding)
    signMessage:97, HTTPPostSimpleSignEncoder (org.opensaml.saml2.binding.encoding)
    doEncode:109, HTTPPostEncoder (org.opensaml.saml2.binding.encoding)
    encode:52, BaseMessageEncoder (org.opensaml.ws.message.encoder)
    sendAuthnResponse:145, SAMLMessageHandler (mujina.idp)
    doSSO:77, SsoController (mujina.idp)
    singleSignOnServicePost:55, SsoController (mujina.idp)
摘要内容:
    http://mock-idphttp://mock-idpXUf3yZB7j4wKYhl3K7Cp4dhfe/E0qKs3a8at+WjZ4Sc=i97x4tGq3whwLpqCIXRsLAy2pn0Wx0+yuHBreiMTwGm4Ekao3DfFvzSfPN5rMVATV59ntBonmUayrZExxsEyVm2xMSFBBEx0JO2stJ6dx2XXPgIiHr7tV5oH9V9wK5OwG1rAHRDMyg4IBCQzLlQrrBZwMCAu/G9FaSw0vBq/COSS8YBrW5/vBH4tS9/NdtTQiXiDoXnGSVYZvXtE0W5anNAUiDytmQhai4dy4Yim/rtKRjIXJVAWD9djCcuR7N//7MWRw1XjWlr1RTwm2TtVvGEY5FL5fVRjdsXJdcc7HNq3UUMQnBpY5RKe+xhri8oZqBc6dmyF96PEUY54EVTdWw==111111http://mock-spurn:oasis:names:tc:SAML:2.0:ac:classes:Passwordhttp://mock-idpJohn Doe111111sdsdsdsdJohn PI:EMAIL@example.comexample.com
**注意此时摘要包含了Assertion以及Assertion所有子标签，Response中的Signature标签也因为应用了和之前相同的transform，所以不包含在摘要中**
。后面还会对SingedInfo进行签名后，最终的xml就是抓包看到的样子。
#### SP收到AuthnResponse的处理
    evaluate:51, BasicSecurityPolicy (org.opensaml.ws.security.provider)
    processSecurityPolicy:132, BaseMessageDecoder (org.opensaml.ws.message.decoder)
    decode:83, BaseMessageDecoder (org.opensaml.ws.message.decoder)
    decode:70, BaseSAML2MessageDecoder (org.opensaml.saml2.binding.decoding)
    retrieveMessage:105, SAMLProcessorImpl (org.springframework.security.saml.processor)
    retrieveMessage:172, SAMLProcessorImpl (org.springframework.security.saml.processor)
    attemptAuthentication:85, SAMLProcessingFilter (org.springframework.security.saml)
    doFilter:223, AbstractAuthenticationProcessingFilter (org.springframework.security.web.authentication)
    doFilter:213, AbstractAuthenticationProcessingFilter (org.springframework.security.web.authentication)
主要的校验点是两个securityPolicies:
`SAML2HTTPPostSimpleSignRule`是校验post传输中数据的签名，这个很好理解。
`SAMLProtocolMessageXMLSignatureSecurityPolicyRule`是校验Saml
Response中的签名，首先会从本地提取IDP的证书(在`classpath:metadata/mujina.local.idp.metadata.xml`中有配置)，这里并没有从传过来的Response中提取证书，而是用配置好的信任的证书:
调用栈如下:
    checkSignatureValue:723, XMLSignature (org.apache.xml.security.signature)
    validate:69, SignatureValidator (org.opensaml.xml.signature)