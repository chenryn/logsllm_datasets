Under the controls tag, we can see that a prefix doesn’t exist for the
`Microsoft.PerformancePoint.Scorecards` namespace. However, if we check the
SafeControl tags, it is indeed listed with all types from that namespace
permitted.
    ...
Now that we know we can instantiate classes from that namespace, let’s dive
into the code to inspect the `ExcelDataSet` type:
    namespace Microsoft.PerformancePoint.Scorecards
    {
     [Serializable]
     public class ExcelDataSet
    {
The first thing I noticed is that it’s serializable, so I know that it can
infact be instantiated as a control and the default constructor will be called
along with any public setters that are not marked with the
`System.Xml.Serialization.XmlIgnoreAttribute` attribute. SharePoint uses
`XmlSerializer` for creating objects from controls so anywhere in the code
where attacker supplied data can flow into `TemplateControl.ParseControl`, the
`ExcelDataSet` type can be leveraged.
One of the properties that stood out was the `DataTable` property since it
contains a public setter and uses the type `System.Data.DataTable`. However,
on closer inspection, we can see that the `XmlIgnore` attribute is being used,
so we can’t trigger the deserialization using this setter.
    [XmlIgnore]
    public DataTable DataTable
    {
     get
     {
      if (this.dataTable == null && this.compressedDataTable != null)
      {
       this.dataTable = (Helper.GetObjectFromCompressedBase64String(this.compressedDataTable, ExcelDataSet.ExpectedSerializationTypes) as DataTable);
       if (this.dataTable == null)
       {
        this.compressedDataTable = null;
       }
      }
      return this.dataTable;
     }
     set
     {
      this.dataTable = value;
      this.compressedDataTable = null;
     }
    }
The above code does reveal the partial answer though, the getter calls
`GetObjectFromCompressedBase64String` using the `compressedDataTable`
property. This method will decode the supplied base64, decompress the binary
formatter payload and call BinaryFormatter.Deserialize with it. However, the
code contains expected types for the deserialization, one of which is
`DataTable`, So we can’t just stuff a generated
[TypeConfuseDelegate](https://github.com/pwntester/ysoserial.net/blob/master/ysoserial/Generators/TypeConfuseDelegateGenerator.cs)
here.
    private static readonly Type[] ExpectedSerializationTypes = new Type[]
    {
        typeof(DataTable),
        typeof(Version)
    };
Inspecting the `CompressedDataTable` property, we can see that we have no
issues setting the `compressedDataTable` member since it’s using
`System.Xml.Serialization.XmlElementAttribute` attribute.
    [XmlElement]
    public string CompressedDataTable
    {
     get
     {
      if (this.compressedDataTable == null && this.dataTable != null)
      {
       this.compressedDataTable = Helper.GetCompressedBase64StringFromObject(this.dataTable);
      }
      return this.compressedDataTable;
     }
     set
     {
      this.compressedDataTable = value;
      this.dataTable = null;
     }
    }
Putting it (almost all) together, I could register a prefix and instantiate
the control with a base64 encoded, compressed and serialized, albeit,
dangerous `DataTable`:
    PUT /poc.aspx HTTP/1.1
    Host: 
    Authorization: 
    Content-Length: 1688
However, I couldn’t figure out a way to trigger the `DataTable` property
getter. I know I needed a way to use the `DataSet`, but I just didn’t know how
too.
### Many Paths Lead to Rome
The fustration! After going for a walk with my dog, I decided to think about
this differently and I asked myself what other sinks are available. Then I
remembered that the `DataSet.ReadXml` sink was also a source of trouble, so I
checked the code again and found this valid code path:
    Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView.GetDataSet()
    Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView.PopulateDataSetFromCache(DataSet)
Inside of the `ContactLinksSuggestionsMicroView` class we can see the
`GetDataSet` method:
    protected override DataSet GetDataSet()
    {
        base.StopProcessingRequestIfNotNeeded();
        if (!this.Page.IsPostBack || this.Hidden)                                                                       // 1
        {
            return null;
        }
        DataSet dataSet = new DataSet();
        DataTable dataTable = dataSet.Tables.Add();
        dataTable.Columns.Add("PreferredName", typeof(string));
        dataTable.Columns.Add("Weight", typeof(double));
        dataTable.Columns.Add("UserID", typeof(string));
        dataTable.Columns.Add("Email", typeof(string));
        dataTable.Columns.Add("PageURL", typeof(string));
        dataTable.Columns.Add("PictureURL", typeof(string));
        dataTable.Columns.Add("Title", typeof(string));
        dataTable.Columns.Add("Department", typeof(string));
        dataTable.Columns.Add("SourceMask", typeof(int));
        if (this.IsInitialPostBack)                                                                                      // 2
        {
            this.PopulateDataSetFromSuggestions(dataSet);
        }
        else
        {
            this.PopulateDataSetFromCache(dataSet);                                                                  // 3
        }
        this.m_strJavascript.AppendLine("var user = new Object();");
        foreach (object obj in dataSet.Tables[0].Rows)
        {
            DataRow dataRow = (DataRow)obj;
            string scriptLiteralToEncode = (string)dataRow["UserID"];
            int num = (int)dataRow["SourceMask"];
            this.m_strJavascript.Append("user['");
            this.m_strJavascript.Append(SPHttpUtility.EcmaScriptStringLiteralEncode(scriptLiteralToEncode));
            this.m_strJavascript.Append("'] = ");
            this.m_strJavascript.Append(num.ToString(CultureInfo.CurrentCulture));
            this.m_strJavascript.AppendLine(";");
        }
        StringWriter stringWriter = new StringWriter(CultureInfo.CurrentCulture);
        dataSet.WriteXml(stringWriter);
        SPPageContentManager.RegisterHiddenField(this.Page, "__SUGGESTIONSCACHE__", stringWriter.ToString());
        return dataSet;