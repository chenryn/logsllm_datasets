I've run into some unexpected behavior when using `numpy.matmul`. For shape
(2,2) array `ar1` and shape (2,N) array `ar2`, the function's behavior appears
to change unexpectedly with the dimension N.
### Reproducing code example:
    import numpy as np
    ar1 = np.array([[1,0.1],[-0.1,1]])
    ar2 = np.vstack([np.ones(100),np.zeros(100)])
    ans1 = np.matmul(ar1,ar2[:,:7])
    ans2 = np.matmul(ar1,ar2[:,:8])
In the code above, ans1 gives the expected result of
    array([[ 1. ,  1. ,  1. ,  1. ,  1. ,  1. ,  1. ],
           [-0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1]])
Similarly, I get the expected result when slicing ar2 with ar2[:,:i] for any
`i  8`, the behavior becomes stranger. E.g. `i = 10`
yields:
    array([[ 1.1,  1.1,  1.1,  1.1,  0. ,  0. ,  0. ,  0. ,  1. ,  1. ],
           [ 0.9,  0.9,  0.9,  0.9,  0. ,  0. ,  0. ,  0. , -0.1, -0.1]])
and `i=20` yields:
    array([[ 1.1,  1.1,  1.1,  1.1,  0. ,  0. ,  0. ,  0. ,  1.1,  1.1,  1.1,
             1.1,  0. ,  0. ,  0. ,  0. ,  1. ,  1. ,  1. ,  1. ],
           [ 0.9,  0.9,  0.9,  0.9,  0. ,  0. ,  0. ,  0. ,  0.9,  0.9,  0.9,
             0.9,  0. ,  0. ,  0. ,  0. , -0.1, -0.1, -0.1, -0.1]])
Have I misunderstood the intended behavior here? This is definitely not
reproducing standard matrix multiplication. Thanks for any help!
Ben
### Numpy/Python version information:
1.16.4  
3.7.3 (default, Mar 27 2019, 22:11:17)  
[GCC 7.3.0]