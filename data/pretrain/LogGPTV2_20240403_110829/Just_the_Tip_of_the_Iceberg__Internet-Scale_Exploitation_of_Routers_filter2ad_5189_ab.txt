request in transit, by modifying the HTML as a man-in-the-middle.
In the attack reported in this paper, adversaries compromised
the routers’ operating system, and reconfigured the system causing
requests from clients to any website to be rewritten and channeled
Figure 1: Through a MITM attack on routers, adversaries per-
formed cryptojacking on websites visited by users.
"http://www.facebook.com/"
var miner = new CoinHive.Anonymous('', {throttle: 0.1});
miner.start(CoinHive.FORCE_EXCLUSIVE_TAB);
Figure 2: HTML returned by the proxy of an infected router,
with a Coinhive miner and the actual page in an iframe.
to an internal HTTP proxy server running on the device. With the
compromise of the router, the perpetrator installs a script to change
the firewall rules of the device, opening telnet and SSH to the Inter-
net if not already exposed, and introduces a firewall rule to redirect
outgoing requests on port 80 to a proxy port. Finally, it deploys an
HTML page sent by the proxy to each outgoing connection.
While different groups of actors followed slightly different tech-
niques, tactics and procedures as we will show in Section 5, it
meant as shown in Figure 1 from the perspective of the user that
any outgoing connection to port 80 was redirected to the proxy
on port 8080 (1). This served a web page based on a common tem-
plate, shown in Figure 2 for a connection to facebook.com. This
led the client’s browser to fetch two web resources: the outer frame
containing a JavaScript that loaded cryptomining code (2), and
within the frame the actual website the user intended to visit was
displayed (2). The client’s web browser would setup a WebSocket
connection to a WebSocket proxy or to a mining pool in order to
retrieve instructions (3), and spin up WebWorkers to mine for a
specific siteKey (4).
From the perspective of the perpetrator, this design has a number
of advantages. First, as the iframe opens the original page, the user
will at first sight not notice anything wrong, as the requested web
page loads within the borderless iframe. Second, as the interaction
WWWProxyMinerPool1234WebserverWebserverExternalResourcesWebsocketProxyClientWeb WorkersCompromisedRouterwith the loaded website functions normally, the victim will remain
on the Web page for an extended period of time, thus increasing
the time the miner will run in the background. Third, as clicks on
the embedded page do not reload the outer frame, the cryptominer
keeps running during navigation on the visited web page, thus
maximizing mining cycles.
Susceptibility of HTTP(S) connections. While the browser address
would show a connection to the router instead of the requested
URL, the hijack from a usability perspective is both comparatively
frictionless and effective. The original URL is displayed as the title
of the page, and experimentation on recent versions of both mobile
and desktop browsers showed that websites can even be loaded
via HTTPS within the iframe without triggering a warning by the
browser. In this case, the HTTP proxy loads an unencrypted HTTP
page with an iframe showing the secured HTTPS contents. Thus,
unless the rewritten URL raises suspicion with the user, we can
expect the activity to go by relatively unnoticed.
3.3 Vulnerability CVE-2018-14847
The exploited vulnerability in this attack is CVE-2018-14847 and
affected MikroTik RouterOS through version 6.42, allowing “unau-
thenticated remote attackers to read arbitrary files and remote authen-
ticated attackers to write arbitrary files due to a directory traversal
vulnerability in the WinBox interface.” [26]. Of special significance
to the attack is that MikroTik uses RouterOS across their entire
product line, making the vulnerability applicable to a large number
of both consumer and carrier-grade routers. As we will see later,
the vulnerability of carrier-grade devices explains the magnitude
of cryptomining activity that could be realized in this attack.
WinBox is a small Win32 binary that allows for the administra-
tion of RouterOS using a graphical user interface. The functional-
ities of the WinBox interface are almost identical to the console
functions, but some advanced and critical system configurations
changes, like changing the MAC address, cannot be made from the
WinBox GUI. Several WinBox commands did not require authen-
tication, e.g., an attacker could open files for reading while being
unauthenticated, while another allows an attacker to write files to
disk given some authentication [38]. By sending a carefully crafted
package to the WinBox service on port 8291 exploiting one of these
commands, the attacker would retrieve the user credential store
user.dat, and using these credentials drop files to disk to enable a
developer backdoor [38]. Triggered if a specific file, /pckg/option
or flash/nova/etc/devel-login, is present on the system, the
developer mode sets up a root BusyBox shell accessible over port
22 (SSH) or 23 (Telnet) giving complete control over the device.
4 DATASETS
The study was made possible through a combination of three
datasets each covering a different angle of the reported malicious
activity: first, we use the traces from a large network telescope to
trace adversarial scanning activity. Second, we rely on a periodic
crawl for the proxy status page by Censys [10] and Shodan [35] to
discover which routers were infected. And third, we use NetFlow
data to visualize the communication patterns between the infected
routers and the remaining Internet to identify their staging hosts
and quantify the volume and revenue of this large scale exploitation.
Figure 3: Timeline of the cryptojacking campaigns and the
used datasets.
Figure 3 shows a timeline of the main phases of the cryptojack-
ing exploitation of MikroTik routers, together with the timeline
and purpose of the used datasets. While the vulnerability was dis-
covered in April 2018, the MikroTik routers were only exploited
for MITM cryptojacking from middle of July onwards, until in
January 2019 the bulk of the ecosystem was cleaned up. We use
telescope traffic and operator NetFlows already months prior to the
abuse from January 2018 onwards to observe prior knowledge of
the vulnerability and any preparation activities by the adversaries
as discussed in [3, 13], to trace the activities of actors in finding
these devices as well as to identify their installation, maintenance
and monetization strategies. After the monetization through MITM
cryptojacking has emerged in July, we then follow the state of the
compromised devices through the public lists Censys and Shodan
until the general wind-down of these campaigns. Details about each
dataset are presented below, table 1 lists all the datasets collected
within this analysis, and links where they are used later for the
analysis in sections 5 and 6.
4.1 Network Telescope
In order to exploit routers using the WinBox vulnerability, the
attacker must first know where vulnerable routers are located. This
identification and localization could be done in one of two ways:
either the adversary scans the Internet for open ports or banners
that would identify the devices, or obtains a list of devices.
To discover which adversaries are actively scanning the Internet
for devices with the WinBox vulnerability, we rely on a large net-
work telescope of three partially populated /16 networks, through
which a total of approximately 130K dark IP addresses are moni-
tored. In order to discover whether TCP port 8291 is open and to
send a payload triggering CVE-2018-14847, adversaries first need to
complete a TCP handshake. This ensures that perpetrators cannot
spoof their source IP as otherwise the handshake couldn’t complete,
and reveals the location of the adversary or a potential proxy. The
telescope collected approximately 21.7 TB between January 2018
until January 2019, out of which only the small part of 1.6 GB were
probes on port 8291. The size of the used telescope provides tight
approximations of network activity estimations as shown in [4].
JanMarJunSepDecAprFebMayJulAugOctNovJanMarAprFebVulnerability discovered, patch made availableMain exploitation phaseRouters largely cleaned upCVE published20182019FirstCryptojackingNetwork telescope Operator netﬂows identiﬁcation of reconnaissanceidentiﬁcation of reconnaissance/maintenance, monetizationCensys / Shodanidentiﬁcation of infected routerspublic listing of vulnerable routersTable 1: Summary of the datasets and their usage in this analysis.
Dataset
Telescope
Censys
Shodan
NetFlows
Time frame
Jan 2018 – Jan 2019
Jul 2018 – Apr 2019
Jul 2018 – Apr 2019
Jan 2018 – Jan 2019
Size Usage in analysis
1.6 GB
43 GB
236 GB
3.2 TB
Adversarial identification through port scanning (5.1)
Adversarial targeted scanning (5.1), Infections and re-infections (5.2), System architecture (5.3), Monetization configuration (5.4),
Ecosystem (6)
Adversarial use of public datasets (5.1), System architecture (5.3)
Characterization of port scanning (5.1), System architecture (5.3), Evolution of monetization (5.4), Maintenance patterns (5.5),
Revenue and ecosystem (6)
4.2 Active Scans of Censys and Shodan
In addition to Section 3, the exploitation through the rewriting
proxy was unusual as it unnecessarily exposed the web page to the
Internet instead of just presenting it to the users on the inside. Since
RouterOS allows both port 80 and port 8080 to be used by a HTTP
proxy, an Internet-wide survey of these ports made it possible to
discover which MikroTik routers are currently infected as they are
serving the proxy page, and based on the embedded siteKey track
who currently “owns” the device.
Censys. To trace infections and their evolution, we thus rely on
Censys [10], which scans and archives the responses of all IPv4
addresses on a number of common ports, among them 8080 and
80. As the vulnerability became exploited for cryptomining in July
2018, we retrieved these Internet surveys twice a week from July
2018 until the end of the study in April 2019. We identify a router
as a MikroTik system if the proxy header was set to MikroTik
HttpProxy and mark it as infected if it contained scripts or code
for crytomining. The regular expressions used for this detection
step are listed in Appendix A, and resulted in a dataset of 43 GB.
This yielded a total of 1,452,550 unique IPs belonging to an infected
router at some point during the study.
Shodan. A second service that scans devices for open ports is
Shodan [35]. Besides listing ports, the service additionally extracts
banners to link it with known vulnerabilities, and makes it possible
to conveniently search specific devices and credentials. Given the
Internet surveys of Censys, we queried the databases of Shodan
and recorded when a particular IP that could be identified as com-
promised due to the HTTP proxy page including a cryptomining
script appeared in Shodan’s database. Therefore, we queried the
host information endpoint of Shodan’s API with the history flag
enabled and searched for the timestamp when Shodan encountered
the open proxy ports for the first time in their crawls and listed
them with the annotation mikrotik or routeros in their public
search results. For the 1.4M routers, this dataset of historical open
ports and services comprised of 236 GB of records.
4.3 Operator NetFlows
While the aforementioned datasets provide insights into vulnerable
devices and which routers are exploited at a given moment, these
data sources do not reveal anything about the scale of the operation
and how concretely the infrastructure is managed and controlled.
In order to fill this gap, we analyzed NetFlows from the network of
a Tier 1 operator between January 2018 and January 2019, which
were collected at a 1:8192 sampling ratio at each of their edge
routers. For the quantification of traffic volumes in Section 6, the
flow aggregates were scaled up by this sampling ratio.
Anonymization. While the IP addresses of vulnerable MikroTik de-
vices are public knowledge as they appear in both Censys and
Shodan, we need to ensure the privacy of users and their traffic dur-
ing our study. For our analysis, we obtained NetFlow records for all
connections from or to the 1.4M infected MikroTik routers in a tuple
consisting of time, source and destination addresses and ports, as
well as packet size, which allowed us to investigate when and how
the routers made connections. The identity of the other endpoint
is however irrelevant, and was anonymized to a pseudo-random
value. For this, the operator applied the CryptoPan algorithm [43] to
the remote points of the NetFlows, which does a prefix-preserving
deterministic randomization of IPv4 addresses based on AES as a
source of randomness. The algorithm was proven to be semanti-
cally secure by Xu et al. [43] and the key to the data randomization
remained with the Tier 1 operator. The procedure was developed
in collaboration with and approved by relevant departments of
the operator. This protocol will thus allow an analysis whether de-
vices connecting and controlling the vulnerable routers are located
for example in the same /24 network, but not which one. We can
furthermore investigate whether there are specific anonymized IP
addresses that connect to multiple vulnerable or infected routers
to do exploitation or quantify the amount of hijacked flows due
to source/destination port combinations, but cannot tell the iden-
tity of these devices nor the destinations visited by the victims. In
order to help the presentation of the results and elaboration on cer-
tain strategies and patterns, the subsequent discussion will include
anonymized IP addresses, however these do not allow any infer-
ences on networks except that addresses in the same netblock – for
example a /24 – were also in the same subnet in the original trace.
Whenever we use an anonymized IP address in the text, it will be
printed in italic, while the publicly known and thus unanonymized
IP address of an infected router would be shown in regular font.
5 ADVERSARIAL TECHNIQUES, TACTICS
AND PROCEDURES
In this section, we analyze the techniques, tactics and procedures
(TTPs) adversaries use in the exploitation of 1.4M MikroTik routers
and their subsequent abuse. We will split this discussion based on
the stages in the life cycle of a router infection as shown in Figure 4.
This life cycle begins with the identification of candidate victims,
the exploitation of the vulnerability, and methods used to gain a
foothold and consolidate the infection. After a device is compro-
mised, actors will install tools to monetize the exploited routers and
perform maintenance, until the infected system is removed from
the pool due to decommissioning or patching. As we will see in
this section, each of the individual steps can be accomplished in a
variety of ways, and we find adversaries using different techniques
Figure 4: Life cycle of the vulnerable routers.
Table 2: Top 10 most affected Autonomous Systems (AS).
AS
Telekomunikasi Indonesia
Telefonica Brasil S.A
TCI
PTC-Yemennet
BSNL-NIB
Count (%) AS
55,082 (3.8%)
33,589 (2.3%)
21,357 (1.5%)