title:A System Demonstration of ST-TCP
author:Manish Marwah and
Shivakant Mishra and
Christof Fetzer
A System Demonstration of ST-TCP
Manish Marwah
Shivakant Mishra
Campus Box 0430, Boulder, CO 80309-0430
Department of Computer Science,
University of Colorado,
Christof Fetzer
Department of Computer Science,
Dresden University of Technology
Dresden, Germany D-01062
Abstract
ST-TCP (Server fault-Tolerant TCP) is an extension of TCP
to tolerate TCP server failures. Server fault tolerance is
provided by using an active-backup server that keeps track
of the state of a TCP connection. The backup server takes
over the TCP connection if the primary server fails. This
take-over is fast, seamless, and completely transparent to
the client. This paper provides a system demonstration of
a new ST-TCP prototype. The new prototype incorporates
a performance-enhanced architecture and addresses applica-
tion failure scenarios. Five experiments using this prototype
are proposed to demonstrate the following useful features: (1)
Client-transparent, seamless failover; (2) Insigniﬁcant per-
formance overhead of ST-TCP during failure-free periods;
and (3) An ability to tolerate all single crash failures at the
hardware and operating system levels, and, most crash fail-
ures at the application level.
1 Introduction
Web-based services have grown rapidly in the past few
years. Products and services sold over the Internet are a sub-
stantial part of the revenue of many companies. In fact, there
are a signiﬁcant number of companies that solely depend on
the Internet for all their revenues. For these companies in par-
ticular, and all companies in general, service outages can be
very expensive. For example, an hour of service outage re-
sults in an estimated revenue loss of $200K for Amazon Inc.
and $6 million for a brokerage ﬁrm [4]. Thus, any improve-
ments made towards limiting such service outages can have
substantial economic beneﬁts. ST-TCP [2] aims to minimize
these service outages by extending TCP to provide TCP con-
nections that can tolerate server failures.
TCP is the protocol of choice for a wide range of popular
distributed applications such as http, ssh, FTP, sendmail and
Samba. It provides a reliable, ordered, connection oriented,
duplex communication stream. In addition, it also provides
ﬂow and congestion control. However, it does not provide
server fault tolerance. Fault tolerance support at the TCP layer
can be very advantageous, and can prove to be more effective
than at the application layer. To enable fault tolerance in a
TCP based client-server application, cooperation of the client
in implementing server fault tolerance is usually required. If
any changes are made to this fault tolerance mechanism that
affect the client, those changes must be propagated to all the
clients. This may be inconvenient at best, and not possible at
worst, since the clients are typically widely spread out, numer-
ous, and usually not under the control of the organization that
runs the servers. However, if fault tolerance is supported at
the TCP layer (transport layer), clients can be made oblivious
to server fault tolerance. Thus, implementing fault tolerance
in server applications (especially ones that have already been
deployed in the ﬁeld), with fault tolerance support at the TCP
layer, is more effective: no fault-tolerance related changes are
ever required on the clients.
In light of these potential advantages, several research
projects have recently addressed the issue of providing server
fault-tolerance in TCP. These include [7], [6], [5], [3], [1], and
our system ST-TCP[2]. ST-TCP provides server fault toler-
ance with the following important properties: (1) No changes
are required at the client—neither in client-side TCP code,
nor in the client-side application; (2) No functional deviation
and insigniﬁcant performance deviation from standard TCP
behavior during normal (failure-free) operation; (3) Fast and
seamless failover during a server failure; and (4) Tolerate all
single crash failures at the hardware/operating system layer,
and most application crash failures.
In [2], we described an initial design and a prototype im-
plementation of ST-TCP, and presented performance measure-
ments of this initial prototype. In this paper, we describe some
design enhancements made to ST-TCP; we describe in detail
how ST-TCP addresses different failure scenarios, including
application failures, and, ﬁnally, we describe the details of the
ﬁve different experiments that we plan to perform at the con-
ference.
2 Overview of ST-TCP
A schematic of the ST-TCP architecture is shown in Figure
1. It is a primary-backup system with an active backup. The
backup taps the trafﬁc between the client and the primary and
delivers it to a replica of the primary application running on
the backup. The backup uses the same virtual IP address and
port number as the primary. Further, during TCP connection
initialization, the backup changes its initial sequence number
to match that of the primary. This allows it to take over the
client-primary TCP connection in the event of the primary’s
failure. ST-TCP assumes that the primary application is de-
terministic, that is, the primary application and its replica on
the backup go through the same states and produce exactly the
same responses to the client if they are supplied with the same
input TCP stream.
The application on the backup also generates all client re-
sponses, but the network stack on the backup does not send
them to the client. However, the client does receive these
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
1
Client
.
.
.
Client
Backup
Heartbeat
... Gateway
Switch
P
rimary
Figure 1: ST-TCP architecture.
segments from the primary. The acknowledgments sent by
the client in response to these segments serve as acknowledg-
ments for both the primary and the backup In addition, the
primary makes sure that the backup has received a particular
byte from the client before discarding it from its buffer. It uses
extra TCP receive buffer space for this purpose, keeping client
bytes in its buffer until it is notiﬁed of their successful receipt
by the backup.
A heartbeat (HB) mechanism exists between the primary
and the backup for detecting failures. When the backup de-
tects that the primary has failed, it stops suppressing the out-
put segments that it generates for the client and takes over the
client-primary TCP connection. The failover appears seam-
less to the client since it takes a very short time and the same
IP address, port number and sequence numbers are used by
the backup. Before taking over, the backup also powers the
primary down to prevent any danger of dual active servers.
3 Enhancements to ST-TCP
TCP state exchange between primary and backup. In
the earlier architecture of ST-TCP [2], the backup received not
only all trafﬁc from the client to the primary, but also all traf-
ﬁc from the primary to the client. We observed that this leads
to an overloaded NIC (network interface card) or/and CPU on
the backup server. In particular, in some scenarios, the backup
starts lagging behind the primary. In the initial ST-TCP proto-
type, the primary interpreted this situation as the backup being
failed. This performance issue was addressed, to some extent,
in the initial ST-TCP prototype by adding an additional NIC
and CPU. One NIC could be used for the client-primary trafﬁc
while the other could be used for the primary-client trafﬁc.
However, during our experiments, we noted that
the
backup does not need to receive the primary-client trafﬁc at
all. These segments were used by the backup for the follow-
ing purposes:
1. The backup examines the sequence numbers acknowl-
edged by the primary in these segments to determine if it
has missed any client segments that were received by the
primary (and not by the backup).
2. The backup uses these segments as an indication in some
situations that the primary has crashed, e.g., if the pri-
mary app. crashes but the HB stays up.
Both of these requirements can be addressed without
the backup receiving primary-client segments. This can be
achieved by having the following information included in the
heartbeat messages exchanged between the servers - A) the
sequence number of the latest byte received from the client
(LastByteReceived), and B) the sequence number of the
latest byte written to the TCP send buffer by the application
(LastAppByteWritten). The backup can use the infor-
mation in A and B for recognizing conditions mentioned in 1
and 2 above, respectively.
The current design of ST-TCP implements this new mech-
anism and so does not need any additional hardware. Also,
this ensures that the backup does not receive and process any
more trafﬁc than the primary. However, it is required that the
backup machine be preferably faster or at least as fast as the
primary. Further, the workload on the backup should not be
any more than that on the primary. This would ensure that
during normal operation the backup does not excessively lag
behind the primary, which could make the primary suspect
that the backup has failed. Note that the primary lagging be-
hind the backup is not an issue since the client sends and acks
data depending on the primary’s response.
Heartbeat Mechanism. In the earlier architecture of ST-
TCP [2], the heartbeat (HB) mechanism was implemented by
a UDP channel over the IP link. This mechanism created
some scenarios where a single failure could not be correctly
detected. For example, if the backup NIC failed, the backup
would stop receiving regular heartbeat messages and conclude
that the primary has failed. In this situation, it will shut down
the primary and attempt to take over the TCP connection.
To address this problem, in the new ST-TCP architecture,
the HB is exchanged between the primary and the backup over
two diverse links. One is over the IP link as before; the sec-
ond is over a serial link. This secondary link is established by
directly connecting the serial ports of the two machines using
a null-modem cable. These dual HB links allow the primary
and secondary to continue to exchange HB information de-
spite single failures. It also provides a better failure detection
in some scenarios, e.g., the one outlined above.
Heartbeat carries the following information:
(1) Last
byte received from the client (LastByteReceived); (2)
Last ack received from the client (LastAckReceived);
(3) Last byte written by the application to the TCP send
buffer (LastAppByteWritten); and (4) Last byte read
by the application from the TCP receive buffer (LastApp-
ByteRead). In addition, the information about the gener-
ation of a TCP FIN or TCP RST segment is also communi-
cated through the HB. In situations where the primary and the
backup send ping requests to the gateway (see Section 4.3),
the results of these requests are exchanged via the HB.
The serial link uses RS-232 protocol and typically has a
maximum speed of 115.2 kbps. The HB is less than 20 bytes
per TCP connection, and assuming a HB every 200ms, this
translates to a bandwidth of 0.8 kpbs per TCP connection.
Thus, the serial link provides enough bandwidth for around
100 simultaneous TCP connections. If it is expected that the
server will be supporting more connections, then it is best to
use an additional 10/100 mbps Ethernet NIC on the primary
and backup instead of a serial connection. The NICs can be
directly connected by a crossover Ethernet cable.
Application Crash Failure. One limitation of providing
server fault tolerance at the TCP layer is that it may not be
able to adequately handle some server application failures.
In particular, consider a situation where the application run-
ning on one of the servers (primary or backup) crashes, while
its replica running on the other server continues to work cor-
rectly. Server fault tolerance provided at the TCP layer is lim-
ited in its ability to handle all possible scenarios that may arise
under this situation.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
2
In the new ST-TCP design, we have enhanced failure detec-
tion mechanism to detect most application crash failures. All
application crash failures cannot be detected since ST-TCP
is limited to the information available at the transport layer.
Further, since it is a primary-backup system, if the primary
application and its replica differ in their response, e.g., one
produces a FIN and the other does not, additional information
is needed to determine whether the primary or the backup ap-
plication has failed. The various application failure scenarios
including the speciﬁc failure instances that ST-TCP may not
be able to detect are described in the next section.
4 Failure Detection and Recovery
An important goal of ST-TCP is to tolerate all single crash
failures at the server. These failures could be at the hard-
ware, operating system or application level. In the initial ST-