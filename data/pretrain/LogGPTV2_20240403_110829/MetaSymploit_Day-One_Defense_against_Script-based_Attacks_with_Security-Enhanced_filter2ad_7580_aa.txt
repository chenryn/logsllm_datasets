title:MetaSymploit: Day-One Defense against Script-based Attacks with Security-Enhanced
Symbolic Analysis
author:Ruowen Wang and
Peng Ning and
Tao Xie and
Quan Chen
MetaSymploit: Day-One Defense against  
Script-based Attacks with Security-Enhanced 
 Symbolic Analysis
Ruowen Wang, Peng Ning, Tao Xie, and Quan Chen, North Carolina State University
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4MetaSymploit: Day-One Defense Against Script-based Attacks with
Security-Enhanced Symbolic Analysis
Ruowen Wang, Peng Ning, Tao Xie, Quan Chen
Department of Computer Science
North Carolina State University
Raleigh, NC, USA
{rwang9, pning, qchen10}@ncsu.edu, PI:EMAIL
Abstract
A script-based attack framework is a new type of cyber-
attack tool written in scripting languages. It carries var-
ious attack scripts targeting vulnerabilities across differ-
ent systems. It also supports fast development of new at-
tack scripts that can even exploit zero-day vulnerabilities.
Such mechanisms pose a big challenge to the defense
side since traditional malware analysis cannot catch up
with the emerging speed of new attack scripts. In this
paper, we propose MetaSymploit, the ﬁrst system of fast
attack script analysis and automatic signature generation
for a network Intrusion Detection System (IDS). As soon
as a new attack script is developed and distributed, Meta-
Symploit uses security-enhanced symbolic execution to
quickly analyze the script and automatically generate
speciﬁc IDS signatures to defend against all possible at-
tacks launched by this new script from Day One. We im-
plement a prototype of MetaSymploit targeting Metas-
ploit, the most popular penetration framework.
In the
experiments on 45 real attack scripts, MetaSymploit au-
tomatically generates Snort IDS rules as signatures that
effectively detect the attacks launched by the 45 scripts.
Furthermore, the results show that MetaSymploit sub-
stantially complements and improves existing Snort rules
that are manually written by the ofﬁcial Snort team.
1
Introduction
Over the years, with rapid evolution of attacking tech-
niques, script-based attack frameworks have emerged
and become a new threat [2, 3, 6, 39]. A script-based at-
tack framework is an attack-launching platform written
in scripting languages, such as Ruby and Python. Such
framework carries various attack scripts, each of which
exploits one or more vulnerabilities of a speciﬁc applica-
tion across multiple versions. With the high productivity
of using scripting languages, attackers can easily develop
new attack scripts to exploit new vulnerabilities.
To launch an attack, an attacker runs an attack script on
the framework remotely. By probing a vulnerable target
over the network, the attack script dynamically composes
an attack payload, and sends the payload to the target to
exploit the vulnerability. The attack framework also pro-
vides many built-in components with APIs of various at-
tack functionalities to support rapid development of new
attack scripts. Once a zero-day vulnerability is found,
a new attack script can be quickly developed and dis-
tributed in hacking communities, where other attackers
even script kiddies can directly download the new script
to launch attacks exploiting the zero-day vulnerability.
A well-known example of the script-based attack
frameworks is Metasploit [3], the most popular Ruby-
based penetration framework.
It has more than 700
attack scripts targeting various vulnerable applications
on different operating systems (OSes).
It also pro-
vides built-in components for creating new attack scripts.
Metasploit was originally developed for penetration test-
ing using proof-of-concept scripts. But with years of im-
provements, it has become a full-ﬂedged attack frame-
work. Unfortunately, as an open source project, Metas-
ploit can be easily obtained and used by attackers for
illegal purposes. For example, it was reported that the
well-known worm “Conﬁcker” used a payload generated
by Metasploit to spread [5]. A Metasploit attack script
was immediately distributed after a zero-day vulnerabil-
ity was found in Java 7 [32]. A four-year empirical study
shows real malicious network trafﬁc related to Metas-
ploit on a worldwide scale. Moreover, the study shows
that many Metasploit attack scripts are used by attack-
ers almost immediately after the scripts are distributed in
hacking communities [33].
When a new attack script is distributed and captured
by security vendors, the traditional approach to defend
against it is to ﬁrst set up a controlled environment with
a vulnerable application installed. Then security analysts
repeatedly run the script to exploit the environment over
a monitored network, collecting a large number of at-
USENIX Association  
22nd USENIX Security Symposium  65
tack payload samples, and ﬁnally extract common pat-
terns from the samples to generate IDS signatures.
However, with the attack framework, new attack
scripts can be quickly developed and distributed to ex-
ploit the latest vulnerabilities. This poses a great chal-
lenge that the traditional approach can hardly catch up
with the release speed of new attacks, due to the time-
consuming process of setting up test environments and
analyzing attack payload samples.
In our evaluation
(Section 5), we observe that even the latest Snort IDS
rules written by security analysts cannot detect many
Metasploit-based attacks.
In this paper, we propose MetaSymploit, the ﬁrst sys-
tem of fast attack script analysis and automatic IDS sig-
nature generation. As soon as a new attack script is dis-
tributed, MetaSymploit quickly analyzes the attack script
and automatically generates IDS signatures of its attack
payloads, thereby providing defense against new attacks
launched by this script from Day One. Particularly,
MetaSymploit gives the ﬁrst aid to zero-day vulnerabil-
ities whose security patches are not available while the
attack scripts that exploit them are already distributed.
Speciﬁcally, MetaSymploit leverages symbolic execu-
tion while enhancing it with several security features de-
signed for attack script analysis and signature genera-
tion. By treating environment-dependent values as sym-
bolic values, MetaSymploit symbolically executes attack
scripts without interacting with actual environments or
vulnerable applications, thus substantially reducing the
time and cost of the analysis. With path exploration of
symbolic execution, MetaSymploit also explores differ-
ent execution paths in an attack script, exposing different
attack behaviors and payloads that the script produces
under different attack conditions.
To generate signatures of attack payloads, instead of
analyzing large volumes of payload samples, MetaSym-
ploit keeps track of the payload composing process in the
attack script during symbolic execution. MetaSymploit
uses symbolic values to represent variant contents in a
payload (e.g., random paddings), in order to distinguish
constant contents (e.g., vulnerability-trigger bytes) from
variant ones. When the script sends a composed payload
to launch an attack, MetaSymploit captures the payload’s
entire contents, extracts constant contents as patterns and
generates a signature speciﬁc to this payload.
In a case study, we implement a security-enhanced
symbolic execution engine for Ruby, develop MetaSym-
ploit as a practical tool targeting Metasploit, and gener-
ate Snort rules as IDS signatures. Particularly, instead
of heavily modifying the script interpreters, we design
a lightweight symbolic execution engine running on un-
modiﬁed interpreters. This lightweight design can keep
pace with the continuous upgrades of the language syn-
tax and interpreter (e.g., Ruby 1.8/1.9/2.0). Therefore,
our design supports analyzing attack scripts written in
different versions of the scripting language.
We evaluate MetaSymploit using real-world attack
scripts. We assess our automatically generated Snort
rules by launching attacks using 45 real-world Metas-
ploit attack scripts from exploit-db.com, including
one that exploits a zero-day vulnerability in Java 7. Our
rules successfully detect the attack payloads launched by
the 45 scripts. Furthermore, we also compare our rules
with the ofﬁcial Snort rule set written by security ana-
lysts, and have three ﬁndings: (1) the ofﬁcial rule set is
incomplete and 23 of the 45 attack scripts are not cov-
ered by the ofﬁcial rule set; (2) for the scripts covered by
the ofﬁcial rules, our rules share similar but more spe-
ciﬁc patterns with the ofﬁcial ones; (3) our studies also
expose 3 deﬁcient ofﬁcial rules that fail to detect Metas-
ploit attacks. Therefore, MetaSymploit is a helpful com-
plement to improve the completeness and accuracy of ex-
isting IDS signatures to defend against attack scripts.
In summary, we make three major contributions:
1. We point out the security issues of script-based at-
tacks, and propose a scalable approach called Meta-
Symploit that uses security-enhanced symbolic ex-
ecution to automatically analyze attack scripts and
generate IDS signatures for defense.
2. We implement a security-enhanced symbolic execu-
tion engine for Ruby and develop a practical tool for
the popular Metasploit attack framework. Our tool
can generate Snort rules to defend against newly
distributed Metasploit attack scripts from Day One.
3. We demonstrate the effectiveness of MetaSymploit
using recent Metasploit attack scripts in real-world
attack environments, and also show that Meta-
Symploit can complement and improve existing
manually-written IDS signatures.
2 Background
We ﬁrst give the background of how an attack script
works. Generally, when an attack script runs on top of an
attack framework, the script performs four major steps
to launch an attack.
(1) The script probes the version
and runtime environment of the vulnerable target over
the network.
(2) Based on the probing result and the
script’s own hard-coded knowledge base, the script iden-
tiﬁes the speciﬁc vulnerability existing in this target. The
knowledge base is usually a list containing the informa-
tion (e.g., vulnerable return addresses) of all targets that
this script can attack.
(3) Then the script dynamically
composes an attack payload customized for this target.
(4) Finally, the script sends the payload to the target to
exploit the vulnerability.
66  22nd USENIX Security Symposium 
USENIX Association
1 def exploit
connect()
2
preamble = "\x00\x4d\x00\x03\x00\x01"
version = probe_ver()
if version == 5
3
4
5
payload = prep_ark5()
else
payload = prep_ark4()
end
preamble << payload.length
sock.put(preamble) # Required by protocol
sock.get_once()
sock.put(payload) # Send attack payload
sock.get_once()
... # vulnerability triggered
6
7
8
9
10
11
12
13
14
19
20
21
22
23
15
16 end
17 def prep_ark5()
18
payload = shellcode()
payload << rand_alpha(1167 -
payload.length)
payload << "\xe98" + [-1172].pack("V")
payload << "\xeb\xf9"
payload << get_target_ret(5) # Tar_Ver: 5
payload << rand_alpha(4096 -
payload.length)
return payload
24
25 end
Listing 1: The code snippet from a real Metasploit attack script
type77.rb [4] (slightly modiﬁed for better presentation)
Depending on the attack strategy and vulnerability
type, different scripts may have different attack behav-
iors when performing these steps. For example, a brute-
force attack may keep composing and sending payloads
with guessed values until the target is compromised,
while a stealthy attack may carefully clean up the trace
in the target’s log after sending the payload.
Among these steps, composing and sending an attack
payload are the key steps of launching an attack. An at-
tack payload is typically a string of bytes composed with
four elements: (a) special and ﬁxed bytes that can ex-