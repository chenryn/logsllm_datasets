首先，AndroidManifest.xml
文件包含应用程序的软件包名称、版本、组件、访问权限和引用库，以及其他元数据。这是探索应用程序的好起点。从这个文件中，您可以获得有关应用程序组件和权限的信息。
Understanding the components of your target application will provide you
with a good overview of how it works. There are four types of app
components: Activities (declared in `           ` tags),
Services (declared in `           ` tags), BroadcastReceivers
(declared in `           ` tags), and ContentProviders
(declared in `           ` tags).
了解目标应用程序的各个组件将为您提供其工作方式的良好概述。应用程序组件有四种类型：活动（在\标签中声明），服务（在\标签中声明），广播接收器（在\标签中声明）和内容提供程序（在\标签中声明）。
*Activities* are application components that interact with the user. The
windows of Android applications you see are made up of Activities.
*Services* are long-running operations that do not directly interact
with the user, such as retrieving or sending data in the background.
*BroadcastReceivers* allow an app to respond to broadcast messages from
the Android system and other applications. For instance, some
applications download large files only when the device is connected to
Wi-Fi, so they need a way to be notified when the device connects to a
Wi-Fi network. *ContentProviders* provide a way to share data with other
applications.
活动是与用户交互的应用程序组件。您看到的Android应用程序窗口由活动组成。服务是长时间运行的操作，不直接与用户交互，例如在后台检索或发送数据。BroadcastReceiver允许应用程序响应Android系统和其他应用程序的广播消息。例如，一些应用程序仅在设备连接到Wi-Fi时下载大文件，因此它们需要一种方式来在设备连接到Wi-Fi网络时得到通知。ContentProvider提供了一种共享数据与其他应用程序的方法。
The permissions that the application uses, such as the ability to send
text messages and the permissions other apps need to interact with it,
are also declared in this *AndroidManifest.xml* file. This will give you
a good sense [ ]{#c23.xhtml#Page_351 .pagebreak title="351"} of what the
application can do and how it interacts with other applications on the
same device. For more about what you can find in *AndroidManifest.xml* ,
visit
[https://developer.android.com/guide/topics/manifest/manifest-intro/](https://developer.android.com/guide/topics/manifest/manifest-intro/){.LinkURL}
.
应用程序使用的权限（例如发送短信的能力以及其他应用程序与其交互所需的权限）也在此AndroidManifest.xml文件中声明。这将使您了解应用程序的功能以及它如何与同一设备上的其他应用程序交互。有关在AndroidManifest.xml中查找的更多信息，请访问https://developer.android.com/guide/topics/manifest/manifest-intro/。
The *classes.dex* file contains the application source code compiled in
the DEX file format. You can use the various Android hacking tools
introduced later in this chapter to extract and decompile this source
code for analysis. For more on conducting source code reviews for
vulnerabilities, check out [ Chapter 22 ]{.xref
itemid="xref_target_Chapter 22"} .
classes.dex文件包含以DEX文件格式编译的应用程序源代码。您可以使用本章后面介绍的各种Android黑客工具来提取和反编译此源代码以进行分析。有关查找漏洞的源代码评论的更多信息，请查看第22章。
The *resources.arsc* file contains the application's precompiled
resources, such as strings, colors, and styles. The *res* folder
contains the application's resources not compiled into *resources.arsc*
. In the *res* folder, the *res/values/strings.xml* file contains
literal strings of the application.
资源文件resources.arsc包含了应用程序的预编译资源，例如字符串、颜色和样式。res文件夹包含了应用程序中没有编译成resources.arsc的资源。在res文件夹中，res/values/strings.xml文件包含了应用程序中的字面字符串。
The *lib* folder contains compiled code that is platform dependent. Each
subdirectory in *lib* contains the specific source code used for a
particular mobile architecture. Compiled kernel modules are located here
and are often a source of vulnerabilities.
lib文件夹包含平台相关的已编译代码。每个子目录中的lib都包含特定移动架构所使用的源代码。编译的内核模块位于此处，并常常成为漏洞的来源。
The *assets* folder contains the application's assets, such as video,
audio, and document templates. Finally, the *META-INF* folder contains
the *MANIFEST.MF* file, which stores metadata about the application.
This folder also contains the certificate and signature of the APK.
assets文件夹包含应用程序的资源，例如视频、音频和文档模板。最后，META-INF文件夹包含MANIFEST.MF文件，其中存储有关应用程序的元数据。该文件夹还包含APK的证书和签名。
## Tools to Use {#c23.xhtml#h1-501546c23-0004}
Now that you understand the main components of an Android application,
you'll need to know how to process the APK file and extract the Android
source code. Besides using a web proxy to inspect the traffic to and
from your test device, you'll need some tools that are essential to
analyzing Android applications. This section doesn't go into the
specifics of how to use these tools, but rather when and why to use
them. The rest you can easily figure out by using each tool's
documentation pages.
现在，您已经理解了Android应用程序的主要组件，需要知道如何处理APK文件并提取Android源代码。除了使用Web代理检查测试设备的流量之外，您还需要一些必要的工具来分析Android应用程序。本节不涉及如何使用这些工具的具体细节，而是介绍何时以及为什么要使用它们。其余部分您可以通过使用每个工具的文档页面轻松查找到。
### Android Debug Bridge {#c23.xhtml#h2-501546c23-0001}
The *Android Debug Bridge (* *ADB)* is a command line tool that lets
your computer communicate with a connected Android device. This means
you won't have to email application source code and resource files back
and forth between your computer and your phone if you want to read or
modify them on the computer. For example, you can use ADB to copy files
to and from your device, or to quickly install modified versions of the
application you're researching. ADB's documentation is at
[https://developer.android.com/studio/command-line/adb/](https://developer.android.com/studio/command-line/adb/){.LinkURL}
.
Android 调试桥（ADB）是一种命令行工具，可使您的计算机与连接的 Android
设备通信。这意味着如果您想在计算机上阅读或修改应用程序源代码和资源文件，您无需在计算机和手机之间来回发送电子邮件。例如，您可以使用
ADB
将文件复制到和从设备中复制出来，或快速安装正在研究的应用程序的修改版本。ADB
的文档位于 https://developer.android.com/studio/command-line/adb/。
To start using ADB, connect your device to your laptop with a USB cable.
Then turn on *debugging mode* on your device. Whenever you want to use
ADB on a device connected to your laptop over USB, you must enable USB
debugging. This process varies based on the mobile device, but should be
similar to choosing **Settings** [ ▶ ]{.MenuArrow} **System** [ ▶
]{.MenuArrow} **Developer Options** [ ▶ ]{.MenuArrow} **Debugging** .
This will enable you to interact with your device from your laptop via
ADB. On Android version 4.1 and lower, the developer options [
]{#c23.xhtml#Page_352 .pagebreak title="352"} screen is available by
default. In versions of Android 4.2 and later, developer options need to
be enabled by choosing **Settings** [ ▶ ]{.MenuArrow} **About Phone**
and then tapping the **Build number** seven times.
要开始使用 ADB，请用 USB
电缆将设备连接到笔记本电脑。然后在设备上打开调试模式。每当您想要在通过
USB 连接到笔记本电脑的设备上使用 ADB 时，都必须启用 USB
调试。此过程因移动设备而异，但应类似于选择"设置"▶"系统"▶"开发者选项"▶"调试"。这将使您能够通过
ADB 从笔记本电脑与您的设备交互。在 Android 版本 4.1
及以下版本中，默认情况下可用开发者选项屏幕。在 Android 4.2
及以后的版本中，需要通过选择"设置"▶"关于手机"，然后点击"版本号"七次来启用开发者选项。
On your mobile device, you should see a window prompting you to allow
the connection from your laptop. Make sure that your laptop is connected
to the device by running this command in your laptop terminal:
在您的移动设备上，您应该看到一个窗口提示您允许来自笔记本电脑的连接。请确保您的笔记本电脑通过在笔记本电脑终端运行此命令将其连接到设备上：
    adb devices -l
Now you can install APKs with this command:
现在您可以使用此命令安装APK：
    adb install PATH_TO_APK
You can also download files from your device to your laptop by running
the following:
您也可以通过运行以下步骤，从您的设备下载文件到您的笔记本电脑：
    adb pull REMOTE_PATH LOCAL_PATH
Or copy files on your laptop to your mobile device:
将文件从您的笔记本电脑复制到移动设备：
    adb push LOCAL_PATH REMOTE_PATH
### Android Studio {#c23.xhtml#h2-501546c23-0002}
*Android Studio* is software used for developing Android applications,
and you can use it to modify an existing application's source code. It
also includes an *emulator* that lets you run applications in a virtual
environment if you don't have a physical Android device. You can
download and read about Android Studio at
[https://developer.android.com/studio/](https://developer.android.com/studio/){.LinkURL}
.
Android
Studio是用于开发Android应用程序的软件，您可以使用它来修改现有应用程序的源代码。它还包括一个模拟器，允许您在虚拟环境中运行应用程序，如果您没有物理Android设备。您可以在https://developer.android.com/studio/下载和阅读有关Android
Studio的信息。
### Apktool {#c23.xhtml#h2-501546c23-0003}
*Apktool* , a tool for reverse engineering APK files, is essential for
Android hacking and will probably be the tool you use most frequently
during your analysis. It converts APKs into readable source code files
and reconstructs an APK from these files. The Apktool's documentation is
at
[https://ibotpeaches.github.io/Apktool/](https://ibotpeaches.github.io/Apktool/){.LinkURL}
.
Apktool是一个反编译APK文件的工具，对于Android黑客来说非常重要，它可能是你在分析过程中使用最频繁的工具。它将APK转换成可读的源代码文件，并从这些文件中重构APK。Apktool的文档位于https://ibotpeaches.github.io/Apktool/。
You can use Apktool to get individual files from an APK for source code
analysis. For example, this command extracts files from an APK called
*example.apk* :
你可以使用Apktool从APK中获取单个文件以进行源代码分析。例如，以下命令从名为example.apk的APK中提取文件：
    $ apktool d example.apk
Sometimes you might want to modify an APK's source code and see if that
changes the behavior of the app. You can use Apktool to repackage
individual source code files after making modifications. This command
packages the content of the *example* folder into the file *example.apk*
:
有时候，您可能想修改一个APK的源代码，并查看应用程序的行为是否发生了变化。您可以使用Apktool在进行修改后重新打包单个源代码文件。此命令将example文件夹中的内容打包到example.apk文件中：
    $ apktool b example -o example.apk
### [ ]{#c23.xhtml#Page_353 .pagebreak title="353"} Frida {#c23.xhtml#h2-501546c23-0004}
*Frida* ( [https://frida.re/](https://frida.re/){.LinkURL} ) is an
amazing instrumentation toolkit that lets you inject your script into
running processes of the application. You can use it to inspect
functions that are called, analyze the app's network connections, and
bypass certificate pinning.
Frida（https://frida.re/）是一个令人惊叹的仪器工具包，可以让你将脚本注入到应用程序正在运行的进程中。您可以使用它来检查所调用的函数，分析应用程序的网络连接，并绕过证书挂钩。
Frida uses JavaScript as its language, so you will need to know
JavaScript to take full advantage of it. However, you can access plenty
of premade scripts shared online.
Frida使用JavaScript作为其语言，因此您需要了解JavaScript才能充分利用它。但是，您可以访问许多在线共享的现成脚本。
### Mobile Security Framework {#c23.xhtml#h2-501546c23-0005}
I also highly recommend the *Mobile Security Framework* (
[https://github.com/MobSF/Mobile-Security-Framework-MobSF/](https://github.com/MobSF/Mobile-Security-Framework-MobSF/){.LinkURL}
), or the *MobSF* , for all things mobile app testing. This automated
mobile application testing framework for Android, iOS, and Windows can
do both static and dynamic testing. It automates many of the techniques
that I talk about in this chapter and is a good tool to add to your
toolkit once you understand the basics of Android hacking.
我也强烈推荐移动安全框架（https://github.com/MobSF/Mobile-Security-Framework-MobSF/）或称为
MobSF，用于所有移动应用程序测试。这个针对 Android、iOS 和 Windows
的自动化移动应用程序测试框架可以进行静态和动态测试。它自动化了本章中介绍的许多技术，并且是一个很好的工具，在您了解
Android 黑客攻击的基础知识后，添加到您的工具包中。
## Hunting for Vulnerabilities {#c23.xhtml#h1-501546c23-0005}
Now that your mobile hacking environment is set up, it's time to start
hunting for vulnerabilities in the mobile app. Luckily, hacking mobile
applications is not that different from hacking web applications.
现在您的移动设备黑客环境已经设置好，是时候开始在移动应用程序中寻找漏洞了。幸运的是，攻击移动应用程序并不比攻击Web应用程序不同。
To start, extract the application's package contents and review the code
for vulnerabilities. Compare authentication and authorization mechanisms
for the mobile and web apps of the same organization. Developers may
trust data coming from the mobile app, and this could lead to IDORs or
broken authentication if you use a mobile endpoint. Mobile apps also
tend to have issues with session management, such as reusing session
tokens, using longer sessions, or using session cookies that don't
expire. These issues can be chained with XSS to acquire session cookies
that allow attackers to take over accounts even after users log out or
change their passwords. Some applications use custom implementations for
encryption or hashing. Look for insecure algorithms, weak
implementations of known algorithms, and hardcoded encryption keys.
After reviewing the application's source code for potential
vulnerabilities, you can validate your findings by testing dynamically
on an emulator or a real device.
首先，提取应用程序包的内容并检查代码中的漏洞。比较同一组织的移动应用程序和Web应用程序的身份验证和授权机制。开发人员可能会信任来自移动应用程序的数据，这可能会导致IDOR或破损的身份验证，如果您使用移动终端。移动应用程序也往往存在会话管理问题，例如重复使用会话令牌、使用更长的会话或使用不过期的会话cookie。这些问题可以与XSS链接，以获取会话cookie，使攻击者甚至在用户注销或更改密码后仍能接管帐户。有些应用程序使用自定义实现进行加密或哈希。寻找不安全的算法、已知算法的弱实现和硬编码的加密密钥。在审查应用程序的源代码以查找潜在漏洞后，您可以通过在模拟器或实际设备上进行动态测试来验证您的发现。
Mobile applications are an excellent place to search for additional web
vulnerabilities not present in their web application equivalent. You can
hunt for these with the same methodology you used to find web
vulnerabilities: using Burp Suite to intercept the traffic coming out of
the mobile app during sensitive actions. Mobile apps often make use of
unique endpoints that may not be as well tested as web endpoints because
fewer hackers hunt on mobile apps. You can find them by looking for
endpoints that you haven't seen in the organization's web applications.
移动应用程序是搜索与其 Web 应用程序等效物中不存在的额外 Web
漏洞的绝佳场所。您可以使用与查找 Web 漏洞相同的方法来寻找：使用 Burp
Suite
拦截敏感操作期间从移动应用程序中出来的流量。移动应用程序通常使用独特的终端节点，可能没有像
Web
终端节点一样经过充分测试，因为更少的黑客在移动应用程序上搜索。查找这些节点的方法是寻找组织的
Web 应用程序中没有看到的节点。
[ ]{#c23.xhtml#Page_354 .pagebreak title="354"} I recommend testing an