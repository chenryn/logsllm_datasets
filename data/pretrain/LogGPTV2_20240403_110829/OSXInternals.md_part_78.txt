Figure 718.
Figure 718. The skeleton of the nfsiod program
// nfsiod.c
int
main(argc, argv)
{
...
for (i = 0; i flag & NFSSVC_BIOD)
error = nfssvc_iod(p);
...
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 30 of 107
nfssvc_iod() determines the index of the would-be nfsiod in a global array of such daemons. It saves
the index in the uu_nfs_myiod field of the uu_state union within the uthread structure. Thereafter, it
calls nfssvc_iod_continue(), which is nfsiod's continuation function.
// bsd/nfs/nfs_syscalls.c
static int
nfsscv_iod(__unused proc_t p)
{
register int i, myiod;
struct uthread *ut;
// assign my position or return error if too many already running
myiod = -1;
for (i = 0; i uu_state.uu_nfs_myiod = myiod; // stow away for continuation
nfssvc_iod_continue(0):
/* NOTREACHED */
return (0);
}
nfssvc_iod_continue() retrieves the daemon's index from its saved location in the uthread structure,
performs the necessary processing, and blocks on the continuationthat is, on itself.
// bsd/nfs/nfs_syscalls.c
static int
nfssvc_iod_continue(int error)
{
register struct nfsbuf *bp;
register int i, myiod;
struct nfsmount *nmp;
struct uthread *ut;
proc_t p;
// real myiod is stored in uthread, recover it
ut = (struct uthread *)get_bsdthread_info(current_thread());
myiod = ut->uu_state.uu_nfs_myiod;
...
for (;;) {
while (...) {
...
error = msleep0((caddr_t)&nfs_iodwant[myiod],
nfs_iod_mutex,
PWAIT | PCATCH | PDROP,
"nfsidl",
0,
nfssvc_iod_continue);
...
}
if (error) {
...
// must use this function to return to user
unix_syscall_return(error);
}
...
}
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 31 of 107
Continuations are most useful in the cases where no or little state needs to be saved for a thread when it is
blocking. Other examples of the use of continuations in the Mac OS X kernel include continuations for
per-processor idle threads, the scheduler tick thread, the swap-in thread, and the page-out daemon.
7.3. Many Threads of a New System
Mac OS X was not designed from scratch by one team: It came to be as a conglomeration of vastly
different technologies from numerous sources. As a commercial operating system with both legacy and
new-adopter user bases to support initially, with a wide spectrum of user needs, Mac OS X includes an
unusually large number of mechanisms and interfaces. The user-visible process subsystem is a good
example of this phenomenon. Mac OS X has several flavors of user-level threads and processes,
depending on the application environment in use. Examples include the following:
A Mach thread created within the kernel task, for the kernel's own use
 A single-threaded BSD process created using the fork() system call
 A multithreaded BSD process originally created using the fork() system call, followed by the
creation of one or more additional threads created using the Pthreads API
 Multiple Java threads in a Java application created using the java.lang.Thread API
A subprocess created using the Cocoa NSTask API
A thread created using the Cocoa NSThread API
 A Carbon Process Manager (CPM) process created by using the LaunchApplication() Carbon
API call
Preemptively scheduled tasks created in an application using Carbon Multiprocessing Services
Cooperatively scheduled threads created in an application using Carbon Thread Manager
A thread running in the Classic environment
In this section, we will look at specific examples of some of these flavors. At this juncture, the following
general points can be noted regarding threads in Mac OS X.
The kernel knows about only one type of thread: the Mach thread. Thus, any user-visible entity that
runs eventually runs as a Mach thread, although a user library managing that entity may layer
multiple such entities atop one Mach thread, running one of them at a time. Note that within the
kernel, some threads may be specially designated, such as a Blue thread for Classic, a thread
running a virtual machine, a VM-privileged thread, and so on.
A first-class process-like entity visible to the user typically has a corresponding BSD process and,
in turn, a corresponding Mach task.
A first-class thread-like entity visible to the user typically has a corresponding pthread and, in turn,
a corresponding Mach thread.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 32 of 107
We say "typically" and not "always" as it is technically possible to create a Mach task without a BSD
process, and a Mach thread without a pthread. There may be other exceptions; for example, the entire
Classic environment, along with all its Process Manager processes, corresponds to one BSD process.
7.3.1. Mach Tasks and Threads
In previous sections, we saw examples of routines in Mach's task and thread management interfaces. Let
us now use these interfaces in some examples to illustrate their working.
The Mach task and thread client APIs should not be used by user programs. Surely, unless you are
implementing, say, a threading package to replace Pthreads, there is no normally justifiable reason for a
program to create Mach tasks or threads directly.
7.3.1.1. Creating a Mach Task
In this example, we will create a Mach task using the task_create() call. The new task will have no
threads and can optionally inherit memory from its parent task. Recall that Mach tasks do not have parent-
child relationships. Specifically, the task structure does not contain information about either the parent
task or the child tasks, if any, of that task. Parent-child information is maintained at the BSD level.
However, in this case, since we will bypass the BSD layer, there will be no BSD proc structureand
correspondingly no process IDfor the new task. Figure 719 shows the program. When run with no
arguments, or with a single argument 0, it does not inherit the parent task's inheritable address space. In
this case, the task is created with a virtual size of zero, corresponding to an empty address space.
Figure 719. Creating a Mach task
// task_create.c
#include 
#include 
#include 
int
main(int argc, char **argv)
{
kern_return_t kr;
pid_t pid;
task_t child_task;
ledger_t ledgers;
ledger_array_t ledger_array;
mach_msg_type_number_t ledger_count;
boolean_t inherit = TRUE;
task_info_data_t info;
mach_msg_type_number_t count;
struct task_basic_info *task_basic_info;
if (argc == 2)
inherit = (atoi(argv[1])) ? TRUE : FALSE;
// have the kernel use the parent task's ledger
ledger_count = 1;
ledgers = (ledger_t)0;
ledger_array = &ledgers;
// create the new task
kr = task_create(mach_task_self(), // prototype (parent) task
ledger_array, // resource ledgers
ledger_count, // number of ledger ports
inherit, // inherit memory?
&child_task); // port for new task
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 33 of 107
if (kr != KERN_SUCCESS) {
mach_error("task_create:", kr);
exit(1);
}
// get information on the new task
count = TASK_INFO_MAX;
kr = task_info(child_task, TASK_BASIC_INFO, (task_info_t)info, &count);
if (kr != KERN_SUCCESS)
mach_error("task_info:", kr);
else {
// there should be no BSD process ID
kr = pid_for_task(child_task, &pid);
if (kr != KERN_SUCCESS)
mach_error("pid_for_task:", kr);
task_basic_info = (struct task_basic_info *)info;
printf("pid %d, virtual sz %d KB, resident sz %d KB\n", pid,
task_basic_info->virtual_size >> 10,
task_basic_info->resident_size >> 10);
}
kr = task_terminate(child_task);
if (kr != KERN_SUCCESS)
mach_error("task_terminate:", kr);
exit(0);
}
$ gcc -Wall -o task_create task_create.c
$ ./task_create 1
pid_for_task: (os/kern) failure
pid -1, virtual sz 551524 KB, resident sz 4 KB
$ ./task_create 0
pid_for_task: (os/kern) failure
pid -1, virtual sz 0 KB, resident sz 0 KB
Resource Ledgers
Note that task_create() requires an array of ports representing resource ledgers from
which the task is supposed to draw its resources. A resource ledger is a kernel abstraction
used for resource accountingit provides a mechanism to control the use of specific resources
by one or more tasks. Although the Mac OS X kernel implements the ledger interface, the
mechanism is not functional.
A new Mach task is normally created during a fork() or an execve() that follows a vfork(). A user
program should not call task_create().
7.3.1.2. Creating a Mach Thread in an Existing Task
In this example, we will use Mach thread interface functions to create a new thread, set up its machine
state, and set it running. Normally, pthread_create(), which is implemented in the system library, calls
thread_create() to create a Mach thread. Moreover, pthread_create() initializes or associates
various Pthreads-related data items with the thread. Invocations of several functions in the system library
result in these data items being referenced. Since we will directly call thread_create(), there will be no
corresponding pthread. The program shown in Figure 720 creates a thread that executes a trivial function
and exits. Depending on the Mac OS X version, the program may fail when the trivial function calls
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 34 of 107
printf(), since the latter's implementation may reference the calling thread's pthread context, which
would be nonexistent in this case.
Figure 720. Creating a Mach thread
// thread_create.c
#include 
#include 
#include 
#include 
void my_thread_setup(thread_t t);
void my_thread_exit(void);
void my_thread_routine(int, char *);
static uintptr_t threadStack[PAGE_SIZE];
#define EXIT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg ":" , kr); exit((retval)); }
int
main(int argc, char **argv)
{
thread_t th;
kern_return_t kr;
mach_port_name_t mytask, mythread;
mytask = mach_task_self();
mythread = mach_thread_self();
// create new thread within our task
kr = thread_create(mytask, &th);
EXIT_ON_MACH_ERROR("thread_create", kr);
// set up the new thread's user mode execution state
my_thread_setup(th);
// run the new thread
kr = thread_resume(th);
EXIT_ON_MACH_ERROR("thread_resume", kr);
// new thread will call exit
// note that we still have an undiscarded reference on mythread
thread_suspend(mythread);
/* NOTREACHED */
exit(0);
}
void
my_thread_setup(thread_t th)
{
kern_return_t kr;
mach_msg_type_number_t count;
ppc_thread_state_t state;
void *stack = threadStack;
// arguments to my_thread_routine() -- the function run by the new thread
int arg1 = 16;
char *arg2 = "Hello, Mach!"
stack += (PAGE_SIZE - C_ARGSAVE_LEN - C_RED_ZONE);
count = PPC_THREAD_STATE_COUNT;
kr = thread_get_state(th, // target thread
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 35 of 107
PPC_THREAD_STATE, // flavor of thread state
(thread_state_t)&state, &count);
EXIT_ON_MACH_ERROR("thread_get_state", kr);
//// setup of machine-dependent thread state (PowerPC)
state.srr0 = (unsigned int)my_thread_routine; // where to begin execution
state.r1 = (uintptr_t)stack; // stack pointer
state.r3 = arg1; // first argument to my_thread_routine()
state.r4 = (uintptr_t)arg2; // second argument to my_thread_routine()
// "return address" for my_thread_routine()
state.lr = (unsigned int)my_thread_exit;
kr = thread_set_state(th, PPC_THREAD_STATE, (thread_state_t)&state,
PPC_THREAD_STATE_COUNT);
EXIT_ON_MACH_ERROR("my_thread_setup", kr);
}
void