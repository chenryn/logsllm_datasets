Conference, VSTTE 2019, New York City, NY, USA, July 13-14, 2019,
Revised Selected Papers, volume 12031 of Lecture Notes in Computer
Science, pages 161–179. Springer, 2019.
[14] T. A. Henzinger, R. Jhala, R. Majumdar, and K. L. McMillan. Abstrac-
tions from proofs. In Proceedings of the 31st ACM SIGPLAN-SIGACT
Symposium on Principles of Programming Languages, POPL ’04, pages
232–244, New York, NY, USA, 2004. ACM.
[15] E. Hildenbrandt, M. Saxena, N. Rodrigues, X. Zhu, P. Daian, D. Guth,
B. M. Moore, D. Park, Y. Zhang, A. Stefanescu, and G. Rosu. KEVM:
A complete formal semantics of the ethereum virtual machine. In 31st
IEEE Computer Security Foundations Symposium, CSF 2018, Oxford,
United Kingdom, July 9-12, 2018, pages 204–217. IEEE Computer
Society, 2018.
[16] Y. Hirai. Deﬁning the ethereum virtual machine for interactive theorem
In International Conference on Financial Cryptography and
provers.
Data Security, pages 520–535. Springer, 2017.
[17] S. Kalra, S. Goel, M. Dhawan, and S. Sharma. Zeus: Analyzing safety
of smart contracts. In NDSS, pages 1–12, 2018.
[18] B. C. P. Ltd. Parity multisig recovery reconciliation. https://github.com/
bokkypoobah/ParityMultisigRecoveryReconciliation.
[19] L. Luu, D. Chu, H. Olickel, P. Saxena, and A. Hobor. Making smart
contracts smarter. In E. R. Weippl, S. Katzenbeisser, C. Kruegel, A. C.
Myers, and S. Halevi, editors, Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, Vienna, Austria,
October 24-28, 2016, pages 254–269. ACM, 2016.
[20] Z. Manna and A. Pnueli. Temporal veriﬁcation of reactive systems.
Springer Science & Business Media, 2012.
[21] K. L. McMillan. Lazy abstraction with interpolants.
In International
Conference on Computer Aided Veriﬁcation, pages 123–136. Springer,
2006.
[22] MythX. Smart contract weakness classiﬁcation registry. https://github.
com/SmartContractSecurity/SWC-registry.
(not so) smart contracts.
[23] T. of Bits.
not-so-smart-contracts.
https://github.com/crytic/
erc20.
[24] G. A. Oliva, A. E. Hassan, and Z. M. J. Jiang. An exploratory study of
smart contracts in the ethereum blockchain platform. Empirical Software
Engineering, pages 1–41, 2020.
[25] OpenZeppelin. Openzeppelin: Build secure smart contracts in solidity.
https://openzeppelin.com/contracts/.
[26] D. Park, Y. Zhang, M. Saxena, P. Daian, and G. Ros¸u. A formal
veriﬁcation tool for ethereum vm bytecode. In Proceedings of the 2018
26th ACM Joint Meeting on European Software Engineering Conference
and Symposium on the Foundations of Software Engineering, pages 912–
915, 2018.
[27] A. Permenev, D. Dimitrov, P. Tsankov, D. Drachsler-Cohen, and
M. Vechev. Verx: Safety veriﬁcation of smart contracts. In 2020 IEEE
Symposium on Security and Privacy, SP, pages 18–20, 2020.
[28] G. Rosu. December 2017. erc20-k: Formal executable speciﬁcation of
[29] G. Ros,u and T. F. S, erb˘anut˘a. An overview of the k semantic framework.
The Journal of Logic and Algebraic Programming, 79(6):397–434, 2010.
[30] I. Sergey, A. Kumar, and A. Hobor. Temporal properties of smart
In International Symposium on Leveraging Applications of
contracts.
Formal Methods, pages 323–338. Springer, 2018.
[31] I. Sergey, V. Nagaraj, J. Johannsen, A. Kumar, A. Trunov, and K. C. G.
Safer smart contract programming with scilla. Proc. ACM
Hao.
Program. Lang., 3(OOPSLA):185:1–185:30, 2019.
[32] D. Siegel. Understanding the dao attack. CoinDesk. https://www.
coindesk.com/understanding-dao-hack-journalists.
[33] M. Wang, C. Tian, N. Zhang, and Z. Duan. Verifying full regular
temporal properties of programs via dynamic program execution. IEEE
Transactions on Reliability, 68(3):1101–1116, 2018.
[34] Y. Wang, S. Lahiri, S. Chen, R. Pan, I. Dillig, C. Born, I. Naseer,
and K. Ferles.
Formal veriﬁcation of workﬂow policies for smart
contracts in azure blockchain. In Veriﬁed Software. Theories, Tools, and
Experiments: 11th International Conference, VSTTE 2019, New York
City, NY, USA, July 13–14, 2019, Revised Selected Papers, page 87.
Springer Nature, 2019.
[35] Y. Wang, S. K. Lahiri, S. Chen, R. Pan, I. Dillig, C. Born, and
I. Naseer. Formal speciﬁcation and veriﬁcation of smart contracts for
azure blockchain, 2018.
A. SMARTLTL Formal Semantics
APPENDIX
We formalize the semantics of SMARTLTL speciﬁcations in
terms of execution traces of smart contracts. For the purposes
of this paper, an execution trace τ is a sequence of triples of the
form (f, κ, σ) where f is the name of an external function,
κ ∈ {call(x), return, revert}, and σ is a valuation mapping
SMARTLTL terms to their values. In the remainder of this
section, we make the following assumptions about a trace:
First, free variables X occurring in SMARTLTL speciﬁcation
are initialized to a non-deterministic value in σ. Second, we
assume that the trace is pre-processed so that any external call
that occurs within a reverting transaction has a corresponding
revert rather than return.
To facilitate our formalization, we deﬁne some useful oper-
ations over execution traces. First, given a trace τ, we write ˆτ
to denote the last item in the sequence. Next, given an index
or trace element α, we write Preτ (α) (resp. Postτ (α)) to
denote the preﬁx of τ up to and including (resp. after and
not including) α. If a trace element α corresponds to a call,
we write Successτ (α) to indicate that α has a corresponding
return element. Finally, for trace elements that correspond to
568
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
, σ)
σ(v[k]) where ˆτ = ( ,
, σ)
k∈keys(σ(v))
(cid:74)e(cid:75)τ = σ(e) where e is a free variable or Solidity expression and ˆτ = ( ,
(cid:74)old(v)(cid:75)τ = σ(v) where ˆτ = (f, call(x), σ)
(cid:74)old(v)(cid:75)τ = σ(cid:48)(v) where ˆτ = (f, return/revert, σ), Callτ (ˆτ ) = (f, call(x), σ(cid:48))
(cid:74)csum(v)(cid:75)τ =
(cid:74)fsum(f, v, ψ)(cid:75)τ =
(cid:88)
σ(v) where R = {σ | (α = (f, call(x), σ)) ∈ τ, Successτ (α), τ(cid:48) = Preτ (α), (cid:74)ψ(cid:75)τ(cid:48) ≡ True}
(cid:74)ψ(cid:75)H:F0 ≡ True
(cid:74)ψ(cid:75)H:F0 ≡ True
Fig. 16: Evaluation of SMARTLTL terms and predicates. We omit standard boolean/arithmetic operators.
F0 = (f, call(x), σ)
F0 = (f, return, σ)
H, F (cid:15) start(f, ψ)
(cid:88)
σ∈R
H, F (cid:15) ﬁnish(f, ψ)
F0 = (f, revert, σ) α = CallH:F0 (F0)
H, F (cid:15) revert(f, ψ)
(cid:74)ψ(cid:75)H:PreF (α) ≡ True
F = α : τ H : α, τ (cid:15) ϕ
H, F (cid:15) c
ϕ
B. Conformance Checking Theorems
Theorem A.1. A smart contract P satisﬁes the speciﬁcation
(ϕF, ϕP) iff the corresponding B¨uchi contract P × AϕF∧¬ϕP
does not have a feasible inﬁnite trace π such that π ∈ L(B).
Proof. We provide a sketch of the proof here. First, we use
the construction of the B¨uchi Contract to prove that there is a
feasible trace π = (s1, assume(a1)), (s2, assume(a2)), ... ∈
T races(B) iff there is a feasible trace πP = s1, s2, ... ∈
T race(P) and πA = a1, a2, ... ∈ T races(A) such that
πP |= πA. In addition, we establish the construction of A
from ϕF ∧ ¬ϕP is correct from prior work [10].
With this, we can prove that P satisﬁes the speciﬁcation if
L(B) doesn’t have an inﬁnite path. If this were not the case,
then there must be a feasible inﬁnite path π ∈ L(B) but P
satisﬁes the speciﬁcation. We know that there must also be
feasible paths πP ∈ T race(P) and πA ∈ T races(A) such
that πP |= πA. If π ∈ L(B) then so to must πA ∈ L(A) from
the construction of the B¨uchi Contract. There is therefore a
contradiction since a feasible inﬁnite path πP ∈ T race(P)
has a corresponding πA ∈ L(A) such that πP |= πA.
Now assume that L(B) does not have a feasible inﬁnite trace
π ∈ L(B) and P does not satisfy the speciﬁcation. There must
therefore exist a feasible inﬁnite path πP ∈ T races(P ) and
πA ∈ L(A) such that πP |= πA. In addition, we also know
that there must be a path π ∈ T races(B), but π /∈ L(B).
From the construction of the B¨uchi Contract, this must be
due to one of two cases. (1) An external call or return does
not occur inﬁnitely often. For this to occur, πP must spend
inﬁnite time inside a transaction, which violates the Solidity
semantics. Thus πP must not be feasible. (2) All accepting
states visited inﬁnitely often in πA must be outside of an
external call or return. From the semantics of SMARTLTL we
know that atoms are only checked at external call boundaries.
Thus, πP and πA do not violate the speciﬁcation according to
SMARTLTL.
Theorem A.2. If Algorithm 2 returns  for a path π, then
Pπ is a non-terminating program.
Proof. Consider a path π = τ1τ ω
that is not feasible but
Algorithm 2 returns . For this to occur sp(τ2, φ) ⇒ φ,
2
where φ = ∃V .sp(τ1; τ2,(cid:62)), must not indicate that a path is
inﬁnite. When V = ∅, however, sp(τ2, φ) ⇒ φ is equivalent
to checking the Hoare triple {φ} τ2 {φ} which does prove that
2 is inﬁnite. Thus the deﬁnition of V must be incorrect.
τ1τ ω
For this to occur, there must be a variable v ∈ V that is
relevant to the feasibility of τ1τ ω
2 . From the construction of V
on lines 5–6 of Algorithm 2, v must also not be read by any of
the transactions in τ2. It is therefore the case that v does not
introduce any dependencies between subsequent executions
of transactions from τ2. Since we want to determine if the
transactions in τ2 can be executed inﬁnitely often, v must
(H : PreF (k)), PostF (k) (cid:15) ϕ2
∀i < k. (H : PreF (i)), PostF (i) (cid:15) ϕ1
H, F (cid:15) ϕ1 U ϕ2
[], τ (cid:15) ϕ
τ (cid:15) ϕ
Fig. 17: Semantics of SMARTLTL formulas
either returns or reverts, we use the notation Callτ (α) to denote
the corresponding call event to f.
Since SMARTLTL expressions allow aggregating values
over the entire history of the contract execution (e.g., recall the
fsum construct), SMARTLTL expressions and predicates are
evaluated over execution trace preﬁxes rather than valuations.
Speciﬁcally, given a SMARTLTL expression e and a trace
preﬁx τ, we write (cid:74)e(cid:75)τ to denote the result of evaluating e
is given in Figure 17. Since the temporal operators dand U are
Figure 17 presents the semantics of formulas in our spec-
iﬁcation language. Given a formula ϕ and a trace τ, we say
that τ is a model of ϕ, written τ |= ϕ, if ϕ evaluates to true
under τ. Our entailment relation |= for SMARTLTL formulas
as deﬁned in Figure 16.
functionally complete, Figure 17 omits the semantics of the
remaining temporal operators, which can be desugared using
known techniques into next and until operators [20].
Unlike standard LTL where the semantics of a formula is
deﬁned in terms of a single trace, Figure 17 uses an auxiliary
judgment of the form H,F (cid:15) ϕ that utilizes a pair of
traces (H,F) where H represents the “history” (excluding the
present) and F represents the “future” (including the present).
We deﬁne our semantics in this manner because the evaluation
of SMARTLTL expressions and predicates requires having
access to the entire execution history up until the current time.
Given a full speciﬁcation ς ≡ (ϕF, ϕP) consisting of fairness
assumptions ϕF and property ϕP, we say that an execution
trace τ satisﬁes ς, denoted τ |= ς, if and only if (a) either
τ (cid:54)|= ϕF, or (b) τ |= ϕP. Finally, given a Solidity contract
P and SMARTLTL speciﬁcation ς, we say that P satisﬁes
the speciﬁcation, written P |= ς, if, for all feasible execution
traces τ of P, we have τ |= ς.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
569
SMARTPULSE
Vulnerable
Time (s)
Fixed
Time (s)
SMARTPULSE-NOK
Fixed
Time (s)
Unknown
and EPXCrowdsale. In addition, all Auction properties are also
evaluated against ValidatorAuction and SimpleAuction.
Benchmark
Reentrancy
Unprotected Fn.
Int Overﬂow
Int Underﬂow
Gas DOS
Revert DOS
Push DOS
Unchecked Send
Locked Funds
17.5
11.4
5.9
10.6
842.5
9.3
277.1
9.1
17.2
Vulnerable
Time (s)
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
80.2
15.6
2.3
88.5
51.0
4.9
317.9
4.2
15.2
15.2
2.3
81.8
50.8
5.2
371.2
4.1
14.4
TABLE V: Ablation study of SMARTPULSE on attack generation
benchmarks. Here, Unknown indicates that
the veriﬁer returned
Unknown as its result.
therefore be irrelevant. Since v cannot be both relevant and
irrelevant, there is a contradiction.
C. Ablation Study
In this section we evaluate the beneﬁts of adding domain
knowledge to the veriﬁcation process. To do so, we created
a version of SMARTPULSE without any of the additions
described in Section VII, called SMARTPULSE-NOK. We then
evaluated these two tools on the set of attack generation
benchmarks from Section IX-D with the powerful adversary
model.
The results of the evaluation are given in Table V. Here, we
consider two variants of each benchmarks: (1) the vulnerable
version, and (2) the ﬁxed version that satisﬁes the corre-
sponding property. The columns named “Vulnerable Time”
(resp. “Fixed Time”) give the amount of time required for the
given tool to ﬁnd a violation of (resp. to verify) the property
for the vulnerable (resp. ﬁxed) variant of each benchmark.
These results show that SMARTPULSE-NOK is not able to
ﬁnd the violation in any of the vulnerable contracts and veriﬁes
fewer of the ﬁxed contracts than SMARTPULSE. In addition,
for the contracts veriﬁed by both tools, SMARTPULSE and
SMARTPULSE-NOK have similar runtimes.
In all cases, SMARTPULSE-NOK is unable to ﬁnd a vio-
lation of the property in the vulnerable contract. For all but
the Reentrancy violation, SMARTPULSE-NOK considers the
same feasible path τ1τ ω
2 as SMARTPULSE, however it fails
to prove its feasibility. This result highlights the usefulness
of our non-termination checker when proving feasibility (see
Section VII-D).
For the Reentrancy pattern, SMARTPULSE-NOK is unable
to ﬁnd a violation in the vulnerable contract, and it is also
unable to verify the ﬁxed contract. In both cases, the problem
is that SMARTPULSE-NOK ﬁnds a spurious path τ1τ ω
2 but fails
to prove it is infeasible – i.e., it fails to prove termination. Even
though SMARTPULSE also uses the same method for ﬁnding
ranking functions, it does not need to prove the infeasibility
2 due to the way the B¨uchi contract is
of the same path τ1τ ω
constructed.
D. Liveness Properties
This section contains the properties veriﬁed in Section IX-A,
which are shown in Table VI. Here the column labeled “Con-
tract” identiﬁes the contract the property is veriﬁed against
and column labeled “Property” gives an English description
of the property. Each contract and their associated properties
labeled with (cid:63) was taken from prior work and the remaining
properties were written by us. In Section IX-A, all Crowdfund-
ing properties are also evaluated against RefundableCrowdsale
570
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
Contract
RefundEscrow
EscrowVault
Crowdfunding(cid:63)
Property
If a user withdraws funds after refunds are enabled, they will eventually be sent the sum of their deposits.
If the beneﬁciary withdraws after the escrow is ended, they will eventually be sent the sum of all deposits.
If a user requests a refund after refunds are enabled, they will eventually be sent the sum of their deposits.
If the escrow is closed, the beneﬁciary will only be sent the sum of all deposits.
The contract’s accounted funds do not decrease unless the campaign has been funded or the deadline has expired.
The contract preserves records of individual donations by backers, unless they interact with it.
If the campaign fails, the backers can eventually get their refund.
RefundableCrowdsale A user who claims a refund after the crowdsale is ﬁnalized will eventually be sent the sum they spent on tokens.
EPXCrowdsale
Auction(cid:63)
ValidatorAuction
SimpleAuction
RockPaperScissors(cid:63)
If the crowdsale is closed and the goal has been reached, the beneﬁciary is eventually sent all funds used to buy tokens.
If a user issues a refund, they are eventually sent the sum they spent on tokens
If funds are released to the beneﬁciary and they attempt to claim them, they will be sent the all funds used to buy tokens.
The balance should be greater than or equal to the sum of the highest bid and all pending returns.
For some account a, the contract should track the sum of all transfers a has made with the contract.
Anyone other than the highest bidder should be able to retrieve the full amount of their bids from the contract exactly once.
If the auction is closed and a user requests a withdraw, they will eventually be sent the sum of their bids.
If a user withdraws in the DepositP ending state, they will eventually be sent the sum of their bids minus the lowest price.
If a user attempts to withdraw in the state F ailed, they will eventually be sent the sum of their bids.
If a user’s bid is outbid, they will eventually be sent back at least the value of that bid.
If the auction is ended and at least one bid was made, the beneﬁciary is sent the value of the highest bid.
No other party besides player 1, player 2 or the owner can be awarded the prize, which is equal to the contract’s balance.
Player 1 can only submit a valid choice once and the contract will not accept an invalid choice.
Player 2 can only submit a valid choice once and the contract will not accept an invalid choice.
TABLE VI: Liveness Properties. Note, all Crowdfunding properties are also evaluated against RefundableCrowdsale and
EPXCrowdsale, and all Auction properties are also evaluated against ValidatorAuction and SimpleAuction.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
571