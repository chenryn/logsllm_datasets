For each test program, its Lisbon version is able to de-
tect the exploit sent to it and raise an alert successfully.
Since applications such as SHOUTcast and peercast are dis-
tributed only in binary format, approaches such as White-
listing and FormatGuard cannot protect them. In addition,
these binaries are generated in such a way that the frame
pointer is omitted. As a result, Libsafe would not work for
them, either.
In addition to the ability to deal with binaries directly,
Lisbon is also more complete than existing approaches. Un-
like white-listing, Lisbon can detect read accesses to mem-
ory locations beyond the input argument list. This could
prevent attackers from getting sensitive information embed-
ded in the victim applications. Unlike FormatGuard, Lisbon
can also protect vprintf-like functions even when they are
encapsulated by multiple layers of wrapper functions. For
example, Proftpd’s vulnerability happens within a wrapper
function that eventually calls vsnprintf.
5.2. Performance Overhead
Macro-benchmark Testing. We used two machines in
performance overhead measurements. The machine used
for micro-benchmark evaluation is used as the server for
macro-benchmark tests. This machine runs Windows XP
SP1 with PentiumIII 1.2GHz CPU and 256MB memory.
The client machine for macro-benchmarking is a 1.0GHz
Celeron machine with 128MB memory and runs RedHat
Linux 7.2.
To measure the performance overhead of Lisbon when
it is applied to real applications, we used the same set of
test programs as in the effectiveness test. We set up an iso-
lated network that connects the server and the client directly
using a 100Mbps Ethernet link. The client machine contin-
uously sends 1000 requests to the server, on which the test
applications run. The throughput of a server application is
calculated by dividing 1000 by the time interval between
when the ﬁrst request is issued and when the response of the
last request is received. The latency is calculated by taking
the average of the response times of these 1000 requests.
To test the streaming and ftp servers, the client machine
continuously fetches a 1-KByte ﬁle from the server. For the
Pﬁnger client, it repeatedly ﬁngers a user on the server. All
these requests were sent back-to-back. During these tests,
Table 3. The run-time performance overhead
of Lisbon for macro-benchmark programs
Application
SHOUTcast
ProFTPD
Peercast
Pﬁnger
Throughput
Penalty
99.8%
98.0%
99.6%
N/A
Latency
Penalty
0.3%
1.6%
0.4%
0.0%
only legitimate requests were used. For comparison, we ran
each test application twice, once with the original binary
and the other with the Lisbon version.
Table 3 shows that Lisbon’s performance overhead for
these test applications is so small that it is almost negli-
gible. This overhead includes the overhead due to BIRD.
There are several reasons why Lisbon’s overhead is so low.
First, because BIRD can statically disassemble most of the
instructions in these test applications, the performance over-
head due to dynamic disassembling is very small. Second,
printf-like functions are invoked infrequently, and Lisbon’s
transformation only takes effects when these functions are
called. As stated in [18, 6], applications using printf-like
functions heavily are rare in practice. Third, for the test ap-
plications the ﬁle system or network I/O overheads typically
dominate the CPU overhead. Finally, Lisbon exploits the
debug register hardware in the X86 architecture to minimize
the list bound checking cost. These factors together sug-
gest that the run-time overhead of Lisbon , even for printf-
intensive applications such as man2html, is unlikely to be
an issue in practice. To be fair, the performance overhead of
most other previously proposed approaches to format string
attack prevention is also quite small.
Micro-benchmark Testing. We also use the micro-
benchmark programs in [18] to evaluate the absolute perfor-
mance cost of Lisbon. These programs print a six-character
string without any speciﬁer, with two %d speciﬁers, or with
two %n speciﬁers. The ﬁrst three use the sprintf func-
tion, which is the lightest-weight among printf-like func-
tions. The latter three use the vsprintf function. The
latency measurements for these six programs under Format-
Guard, White-listing and Lisbon are also shown in Table 4.
The numbers for FormatGuard and White-listing are taken
from their respective papers.
Because Lisbon needs to make a system call to set up the
debug registers, the user/kernel mode transition is very ex-
pensive when compared with the overhead associated with
the sprintf and vsprintf function. That is why Lis-
bon’s overhead is much higher than the other two. Be-
cause Lisbon does not require interpretation of the format
string, its absolute performance overhead is independent of
the length of and the number of conversion speciﬁers in
the format string. On the other hand, for the absolute per-
405405
formance overhead of both FormatGuard and White-listing
grows proportionally with the length of and the number of
conversion speciﬁers in the format string because they need
to interpret the format string. This is why the percentage
overhead of the “sprintf with no speciﬁers” case is lower
than that of the “sprintf with 2 %d speciﬁers” case for both
FormatGuard and White-listing, but is actually much higher
for Lisbon.
Table 4. Latency penalty comparison for
FormatGuard, White-listing and Lisbon on
micro-benchmarks
Benchmark
sprintf with no speciﬁers
sprintf with 2 %d speciﬁers
sprintf with 2 %n speciﬁers
vsprintf with no speciﬁers
vsprintf with 2 %d speciﬁers
vsprintf with 2 %n speciﬁers
Format-
Guard
7.5%
20.9%
38.1%
cannot handle
cannot handle
cannot handle
White-
listing
10.2%
28.6%
60.0%
26.4%
39.8%
74.7%
Lisbon
217.7%
67.9%
142.3%
223.4%
63.2%
154.7%
Because Lisbon’s absolute performance overhead is
ﬁxed, its percentage overhead decreases as the baseline
overhead increases. Since sprintf itself takes less time
than printf and fprintf, the relative overhead of Lis-
bon should be smaller for other printf-like functions. To
evaluate the relative overhead of Lisbon when different
printf-like functions are used, we try different printf-like
functions using the same input: a ten-character string with
two %d speciﬁers as the format string. The latency re-
sults are shown in Table 5. As expected, the relative over-
head of Lisbon decreases with the increase in the inherent
amount of processing inside the printf-like function it pro-
tects. Among these printf-like functions, printf and vprintf
is the most time-consuming because they both need to make
system calls to interact with the video hardware.
Table 5. Latency measurements for differ-
ent variadic functions with the same format
string and input arguments.
Benchmark
printf with 10 chars and 2 %d speciﬁers
sprintf with 10 chars and 2 %d speciﬁers
fprintf with 10 chars and 2 %d speciﬁers
vprintf with 10 chars and 2 %d speciﬁers
vsprintf with 10 chars and 2 %d speciﬁers
vfprintf with 10 chars and 2 %d speciﬁers
Lisbon
Overhead
2.0%
52.5%
34.3%
2.1%
57.3%
44.0%
Although micro-benchmarking results provide a better
understanding of the source of performance overhead, they
do not reﬂect the real performance impacts of Lisbon, which
should be measured by macro-benchmarking results from
real network applications.
6. Limitations
One major restriction of Lisbon is that it assumes that
the protected variadic function never skips any of its input
arguments. This assumption holds for all known printf-like
functions on the Windows platform because they follow the
C99 standard [10]. However, for arbitrary variadic func-
tions, there is no guarantee that they will not skip any of the
input arguments. In addition, Lisbon assumes the va list
structure used in a vprintf-like function resides in the stack
frame of some upstream caller function. This assumption is
true for all known vprintf-like functions that are vulnerable
to format string attack. However, in general, a va list
structure could also reside in the heap. In that case, Lis-
bon needs to traverse the va list to identify its bound,
and therefore may become application-speciﬁc. Finally,
the current BIRD prototype cannot instrument Windows bi-
naries employing self-modifying code, for example, those
protected by such packers as UPX or ASprotect. There-
fore, Lisbon cannot protect them either. Despite the above
limitations, we believe Lisbon still represents a signiﬁcant
advance in protecting Win32/X86 binaries from published
format string attacks.
7. Conclusion
Format string attack is possible because the attacker
tricks a printf-like function into accessing more arguments
than is prepared by its caller, and eventually is able to read
or modify the victim application’s address space. This paper
describes the design, implementation and evaluation of the
ﬁrst known tool that can protect Win32 binaries from for-
mat string vulnerabilities that have been discovered in real
programs so far. This tool, called Lisbon, features a novel
input argument list bound checking mechanism to detect
format string attacks. Experiments on the ﬁrst Lisbon pro-
totype, which is built for the Windows XP/2000 platform,
show that Lisbon can indeed stop known format string at-
tacks, and its run-time performance overhead is negligible,
less than 2%. Compared with previous format string attack
prevention systems, Lisbon is novel in the following ways:
• By casting format string attack prevention into an argu-
ment list bound checking problem, Lisbon does not re-
quire interpretation of format string argument and thus
can potentially be applied to similar attacks against
functions that access input arguments in the same way
as printf.
• By exploiting the debug register hardware in modern
processors, Lisbon reduces the run-time performance
overhead associated with list bound checking to the
minimum.
406406
• Lisbon leverages the BIRD infrastructure for binary
analysis and transformation and is the ﬁrst known sys-
tem that can directly protect Windows binaries from
format string attacks without accessing their source
code.
Although there are already numerous approaches to
thwarting memory corruption attacks, perhaps the most ef-
fective approach is to stop the attacker from tampering the
victim application’s address space in the ﬁrst place. Ar-
ray bound checking stops buffer overﬂow attacks, argu-
ment list bound checking stops format string attacks, and
arithmetic overﬂow checking stops integer overﬂow attacks.
Our long-term goal is to develop a comprehensive security-
enhancing compiler that can immunize network applica-
tions from memory corruption attacks by transparently in-
serting these checks to their source code and/or binary
code. This overﬂow-preventing compiler will be built on the
CASH compiler [2] and the Lisbon technology presented in
this paper.
References
[1] M. Baumer. The pﬁnger server and client. http://www.
xelia.ch/unix/pfinger/about.
[2] L. chung Lam and T. cker Chiueh. Checking array bound vi-
olation using segmentation hardware. In International Con-
ference on Dependable Systems and Networks (DSN’05),
pages 388–397, 2005.
[3] M. Corporation.
Microsoft
portable
executable
speciﬁcation.
common
and
http://www.microsoft.com/whdc/system/
platform/firmware/PECOFF.mspx.
format
object
ﬁle
[4] N. Corporation. Shoutcast: Free internet radio. http://
www.shoutcast.com.
[5] S. Corporation.
Shoutcast remote format string vulner-
http://www.symantec.com/avcenter/
ability.
attack_sigs/s21253.html.
[6] C. Cowan, M. Barringer, S. Beattie, G. Kroah-Hartman,
M. Frantzen, and J. Lokier. Formatguard: Automatic pro-
tection from printf format string vulnerabilities. In Proc. of
the 10th Usenix Security Symposium, Aug 2001.
[7] C. Cowan, C. Pu, D. Maier, H. Hinton, P. Bakke, S. Beattie,
A. Grier, P. Wagle, and Q. Zhang. StackGuard: Automatic
Adaptive Detection and Prevention of Buffer-Overﬂow At-
tacks.
In 7th USENIX Security Conference, pages 63–77,
San Antonio, TX, January 1998.
[8] C. Cowan, P. Wagle, C. Pu, S. Beattie, and J. Walpole.
Buffer overﬂows: Attacks and defenses for the vulnerability
of the decade. In DARPA Information Survivability Confer-
ence and Exposition (DISCEX), pages 119–129, Jan 2000.
[9] A. DeKok.
source ﬁles.
ca/aland/pscan/, July 2000.
Pscan: A limited problem scanner for c
http://www.striker.ottawa.on.
[10] I. O. for Standardization. Iso/iec 9899: Programming lan-
guages - c (c99 standard). http://www.open-std.
org/JTC1/SC22/WG14/www/standards.
[11] F. S. Foundation.
The c preprocessor.
http:
//www.cs.utah.edu/dept/old/texinfo/
cpp/cpp_toc.html.
[12] F. S. Foundation. Gcc: the gnu compiler collection. http:
//gcc.gnu.org/.
[13] Intel.
Intel architecture software developer’s man-
http://developer.intel.com/design/
ual.
pentium/manuals/.
[14] R. W. M. Jones and P. H. J. Kelly. Backwards-compatible
bounds checking for arrays and pointers in c programs. In
Automated and Algorithmic Debugging, pages 13–26, 1997.
[15] B. W. Kernighan and D. M. Ritchie. The C Programming
Language, 2nd edition. Prentice-Hall, 1988.
[16] MSDN. Microsoft msdn library.
http://msdn.
microsoft.com/library/.
[17] S. S. Muchnick. Advanced Compiler Design and Implemen-
tation. Morgan Kaufmann, 1997.
[18] S. Nanda, W. Li, L. chung Lam, and T. cker Chiueh. Bird:
Binary interpretation using runtime disassembly.
In Pro-
ceedings of the 4th IEEE/ACM Conference on Code Gen-
eration and Optimization (CGO’06), March 2006.
[19] M. F. Ringenburg and D. Grossman. Preventing format-
string attacks via automatic and efﬁcient dynamic checking.
In Proceedings of the 12th ACM conference on Computer
and communication security. ACM Press, 2005.
[20] T. Robbins. Libformat: A linux library that prevents format
string attacks. http://www.securityfocus.com/
tools/1818, November 2001.
[21] Scut and T. Teso. Exploiting format string vulnerabilities.
http://julianor.tripod.com/teso-fs1-1.
pdf, March 2001.
[22] SecuriTeam.
string vulnerability.
http://www.securiteam.com/securitynews/
5KP0U0AFQA.html.
Peercast
format
[23] SecuriTeam.
Pﬁnger
format
string
vulnerability.
http://www.securiteam.com/unixfocus/
6K00N1P3FQ.html.
[24] SecurityFocus. Proftpd shutdown message format string
http://www.securityfocus.com/
vulnerability.
bid/14381/info.
[25] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner. Detect-
ing format string vulnerabilities with type qualiﬁers. In In
Proccedings of the 10th USENIX Security Symposium, pages
201–220, Aug 2001.
[26] T. P. P. Team.
Peercast p2p radio.
http://www.
peercast.org.
[27] T. P. P. Team. Proftpd: Highly conﬁgurable gpl-licensed ftp
server software. http://www.proftpd.org.
[28] T. Tsai and N. Singh.
Libsafe 2.0:
string vulnerability exploits.
of
//www.research.avayalabs.com/project/
libsafe/doc/whitepaper-20.pdf%, Feb 2001.
format
Detection
http:
[29] US-CERT.
Format string input validation error in wu-
ftpd site exec() function. http://www.kb.cert.org/
vuls/id/29823.
407407