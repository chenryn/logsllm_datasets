# Building an Android IDS on the Network Level

## Speaker Information
- **Name:** Jaime Sanchez
- **Affiliation:** segofensiva
- **Website:** [www.seguridadofensiva.com](http://www.seguridadofensiva.com)
- **Contact:** PI:EMAIL

### About the Speaker
- Passionate about computer security.
- Holds a degree in Computer Engineering and an Executive MBA.
- Conducts security research and works as an independent consultant in his free time.
- From Spain.
- Has presented at various conferences, including:
  - RootedCON in Spain
  - Nuit Du Hack in Paris
  - Black Hat Arsenal USA
  - Upcoming: DerbyCON and Hacktivity

## Presentation Overview

### Introduction to the Topic
- **Popularity and Security Risks:**
  - Being popular is not always a good thing.
  - Mobile malware and threats are on the rise.
  - Over 100 million Android phones were shipped in the second quarter of 2022 alone.
  - Such large targets are difficult for attackers to resist.

- **Why Build an Android IDS?**
  - **USSD Exploit:** Vulnerabilities that can be exploited through USSD codes.
  - **Webkit Vulnerabilities:** Weaknesses in the Webkit browser engine.
  - **Targeted Malware:** Customized malware designed to attack specific users or devices.
  - **Meterpreter for Android:** A powerful tool for post-exploitation activities.

### First Approach: Analyzing Traffic Flows
- **Creating a VPN Tunnel:**
  - Establish a VPN tunnel between the Android device and a remote computer to analyze traffic flows.
- **Configuring Snort:**
  - Set up and launch Snort on the remote machine to detect suspicious traffic.
- **Using tcpdump:**
  - Capture traffic using tools like tcpdump for later analysis.

#### Diagram:
```
Android Device (eth0: WiFi, rmnet0: 3G) <--> VPN <--> Remote Machine (snort, tcpdump)
```

### Challenges and Solutions
- **Problems:**
  - Various issues may arise during the implementation, such as performance bottlenecks and configuration complexities.

- **OSfooler:**
  - A practical approach presented at Black Hat Arsenal USA 2013.
  - Used to detect and defeat active and passive remote OS fingerprinting from tools like nmap, p0f, or commercial appliances.

### Kernel Space vs. User Space
- **Kernel Space:**
  - Reserved for running the kernel, kernel extensions, and most device drivers.
- **User Space:**
  - Refers to programs and libraries that interact with the kernel, such as software for input/output and file system manipulation.

### How I Met Your Packet
- **Packet Flow:**
  - Incoming packets pass through the NIC memory, DMA engine, and interrupt handlers.
  - Packets are then processed by the kernel and passed to the IP layer and TCP process.
  - Finally, they reach the application layer.

#### Diagram:
```
NIC Memory -> DMA Engine -> Interrupt -> Ring Buffer -> Interrupt Handler
-> NIC Memory -> Kernel (Packet Data) -> IP Layer -> TCP Process -> TCP recv Buffer
-> Application
```

### Implementing NFQUEUE
- **NFQUEUE Extension:**
  - Consists of a kernel module and an optional extension to iptables for new command-line options.
- **Components:**
  - **Queue Handler:** Manages the mechanics of passing packets between the kernel and userspace.
  - **Userspace Application:** Receives, manipulates, and issues verdicts on packets.
- **Configuration:**
  - Default maximum queue length is 1024. Once this limit is reached, new packets will be dropped until the queue length falls below the limit.
  - Example command: `iptables -A INPUT -j NFQUEUE --queue-num 0`

### Conclusion
- **Objective:**
  - The goal is to process traffic before it is processed inside the Android device.
  - Redirect all network packets from Kernel Space to User Space for analysis and detection.

This presentation aims to provide a comprehensive guide on building an Android Intrusion Detection System (IDS) at the network level, highlighting the importance of security in the face of increasing mobile threats.