pleted ﬁlenames if they contain any characters in rl_filename_quote_characters
and rl_filename_quoting_desired is set to a non-zero value.
[Variable]
int rl_filename_quoting_desired
Non-zero means that the results of the matches are to be quoted using double quotes
(or an application-speciﬁc quoting mechanism) if the completed ﬁlename contains
any characters in rl_filename_quote_chars. This is always non-zero when comple-
tion is attempted, and can only be changed within an application-speciﬁc completion
function. The quoting is eﬀected via a call to the function pointed to by rl_filename_
quoting_function.
Chapter 2: Programming with GNU Readline
47
[Variable]
int rl_attempted_completion_over
If
an
application-speciﬁc
completion
function
assigned
to
rl_attempted_
completion_function sets this variable to a non-zero value, Readline will not
perform its default ﬁlename completion even if the application’s completion function
returns no matches. It should be set only by an application’s completion function.
[Variable]
int rl_sort_completion_matches
If an application sets this variable to 0, Readline will not sort the list of completions
(which implies that it cannot remove any duplicate completions). The default value is
1, which means that Readline will sort the completions and, depending on the value
of rl_ignore_completion_duplicates, will attempt to remove duplicate matches.
[Variable]
int rl_completion_type
Set to a character describing the type of completion Readline is currently attempt-
ing; see the description of rl_complete_internal() (see Section 2.6.2 [Completion
Functions], page 42) for the list of characters. This is set to the appropriate value
before any application-speciﬁc completion function is called, allowing such functions
to present the same interface as rl_complete().
[Variable]
int rl_completion_invoking_key
Set to the ﬁnal character in the key sequence that invoked one of the completion
functions that call rl_complete_internal(). This is set to the appropriate value
before any application-speciﬁc completion function is called.
[Variable]
int rl_inhibit_completion
If this variable is non-zero, completion is inhibited. The completion character will be
inserted as any other bound to self-insert.
2.6.4 A Short Completion Example
Here is a small application demonstrating the use of the GNU Readline library. It is called
fileman, and the source code resides in ‘examples/fileman.c’. This sample application
provides completion of command names, line editing features, and access to the history list.
Chapter 2: Programming with GNU Readline
48
/* fileman.c -- A tiny application which demonstrates how to use the
GNU Readline library.
This application interactively allows users
to manipulate files and their modes. */
#ifdef HAVE_CONFIG_H
#
include 
#endif
#include 
#ifdef HAVE_SYS_FILE_H
#
include 
#endif
#include 
#ifdef HAVE_UNISTD_H
#
include 
#endif
#include 
#include 
#include 
#if defined (HAVE_STRING_H)
#
include 
#else /* !HAVE_STRING_H */
#
include 
#endif /* !HAVE_STRING_H */
#ifdef HAVE_STDLIB_H
#
include 
#endif
#include 
#include 
#include 
extern char *xmalloc PARAMS((size_t));
/* The names of functions that actually do the manipulation. */
int com_list PARAMS((char *));
int com_view PARAMS((char *));
int com_rename PARAMS((char *));
int com_stat PARAMS((char *));
int com_pwd PARAMS((char *));
int com_delete PARAMS((char *));
int com_help PARAMS((char *));
int com_cd PARAMS((char *));
int com_quit PARAMS((char *));
/* A structure which contains information on the commands this program
can understand. */
typedef struct {
char *name; /* User printable name of the function. */
rl_icpfunc_t *func; /* Function to call to do the job. */
char *doc; /* Documentation for this function.
*/
} COMMAND;
Chapter 2: Programming with GNU Readline
49
COMMAND commands[] = {
{ "cd", com_cd, "Change to directory DIR" },
{ "delete", com_delete, "Delete FILE" },
{ "help", com_help, "Display this text" },
{ "?", com_help, "Synonym for ‘help’" },
{ "list", com_list, "List files in DIR" },
{ "ls", com_list, "Synonym for ‘list’" },
{ "pwd", com_pwd, "Print the current working directory" },
{ "quit", com_quit, "Quit using Fileman" },
{ "rename", com_rename, "Rename FILE to NEWNAME" },
{ "stat", com_stat, "Print out statistics on FILE" },
{ "view", com_view, "View the contents of FILE" },
{ (char *)NULL, (rl_icpfunc_t *)NULL, (char *)NULL }
};
/* Forward declarations. */
char *stripwhite ();
COMMAND *find_command ();
/* The name of this program, as taken from argv[0]. */
char *progname;
/* When non-zero, this global means the user is done using this program. */
int done;
char *
dupstr (s)
char *s;
{
char *r;
r = xmalloc (strlen (s) + 1);
strcpy (r, s);
return (r);
}
main (argc, argv)
int argc;
char **argv;
{
char *line, *s;
progname = argv[0];
initialize_readline (); /* Bind our completer. */
/* Loop reading and executing lines until the user quits. */
for ( ; done == 0; )
{
line = readline ("FileMan: ");
if (!line)
break;
/* Remove leading and trailing whitespace from the line.
Then, if there is anything left, add it to the history list
and execute it. */
Chapter 2: Programming with GNU Readline
50
s = stripwhite (line);
if (*s)
{
add_history (s);
execute_line (s);
}
free (line);
}
exit (0);
}
/* Execute a command line. */
int
execute_line (line)
char *line;
{
register int i;
COMMAND *command;
char *word;
/* Isolate the command word. */
i = 0;
while (line[i] && whitespace (line[i]))
i++;
word = line + i;
while (line[i] && !whitespace (line[i]))
i++;
if (line[i])
line[i++] = ’\0’;
command = find_command (word);
if (!command)
{
fprintf (stderr, "%s: No such command for FileMan.\n", word);
return (-1);
}
/* Get argument to command, if any. */
while (whitespace (line[i]))
i++;
word = line + i;
/* Call the function. */
return ((*(command->func)) (word));
}
/* Look up NAME as the name of a command, and return a pointer to that
command.
Return a NULL pointer if NAME isn’t a command name. */
COMMAND *
find_command (name)
char *name;
{
Chapter 2: Programming with GNU Readline
51
register int i;
for (i = 0; commands[i].name; i++)
if (strcmp (name, commands[i].name) == 0)
return (&commands[i]);
return ((COMMAND *)NULL);
}
/* Strip whitespace from the start and end of STRING.
Return a pointer
into STRING. */
char *
stripwhite (string)
char *string;
{
register char *s, *t;
for (s = string; whitespace (*s); s++)
;
if (*s == 0)
return (s);
t = s + strlen (s) - 1;
while (t > s && whitespace (*t))
t--;
*++t = ’\0’;
return s;
}
/* **************************************************************** */
/*
*/
/*
Interface to Readline Completion
*/
/*
*/
/* **************************************************************** */
char *command_generator PARAMS((const char *, int));
char **fileman_completion PARAMS((const char *, int, int));
/* Tell the GNU Readline library how to complete.
We want to try to complete
on command names if this is the first word in the line, or on filenames
if not. */
initialize_readline ()
{
/* Allow conditional parsing of the ~/.inputrc file. */
rl_readline_name = "FileMan";
/* Tell the completer that we want a crack first. */
rl_attempted_completion_function = fileman_completion;
}
/* Attempt to complete on the contents of TEXT.
START and END bound the
region of rl_line_buffer that contains the word to complete.
TEXT is
the word to complete.
We can use the entire contents of rl_line_buffer
in case we want to do some simple parsing.
Return the array of matches,
or NULL if there aren’t any. */
char **
Chapter 2: Programming with GNU Readline
52
fileman_completion (text, start, end)
const char *text;
int start, end;
{
char **matches;
matches = (char **)NULL;
/* If this word is at the start of the line, then it is a command
to complete.
Otherwise it is the name of a file in the current
directory. */
if (start == 0)
matches = rl_completion_matches (text, command_generator);
return (matches);
}
/* Generator function for command completion.
STATE lets us know whether
to start from scratch; without any state (i.e. STATE == 0), then we
start at the top of the list. */
char *
command_generator (text, state)
const char *text;
int state;
{
static int list_index, len;
char *name;
/* If this is a new word to complete, initialize now.
This includes