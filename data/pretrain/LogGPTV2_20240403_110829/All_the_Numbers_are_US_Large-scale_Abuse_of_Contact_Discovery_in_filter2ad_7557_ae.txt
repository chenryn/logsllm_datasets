can be partitioned based on number preﬁxes into continents,
countries, states, or even regions. This limits the service
provider to learning only incomplete information about a user’s
social graph [37]. There are limitations to the practicality of
this approach, mainly that users with diverse contacts will
incur a heavy performance penalty by having to match with
many partitions. For example, when partitioning based on
country preﬁxes, a German WhatsApp user with a single
contact from the US would have to additionally transfer more
than 200 MiB (based on our estimates of registered US users,
cf. § IV-H).13 Also, the mere fact that a user checks contacts
from a speciﬁc country might be privacy-sensitive.
Strengthened Hashing-based Protocols. Given the current
scalability issues of PSI protocols, a ﬁrst step could be to patch
the currently deployed hashing-based protocols. One could
introduce a global salt for such protocols to prevent reusable
rainbow tables (cf. § III-C). Rotating the salt in short intervals
also makes hash databases (cf. § III-A) less attractive.
Another alternative is to increase the calculation time of each
hash, either by performing multiple rounds of the hash function
or by using hash functions like bcrypt [66] or Argon2 [6],
which are speciﬁcally designed to resist brute-force attacks.
Existing benchmarks show that with bcrypt only 2.9 kHashes/s
and with Argon2 only 2.6 Hashes/s can be computed on a GPU
compared to 794.6 MHashes/s with SHA-1 [31].
These measures will not be sufﬁcient against very powerful
adversaries, but can at least increase the costs of hash reversal
attacks by a factor of even millions. However, the performance
penalty will also affect clients when hashing their contacts, as
well as the server, when updating the database.
Alternative Identiﬁers. It should be possible for privacy-
concerned users to provide another form of identiﬁer (e.g.,
a user name or email address, as is the standard for social
networks) instead of their phone number. This increases the
search space for an attacker and also improves resistance
of hashes against reversal. Especially random or user-chosen
identiﬁers with high entropy would offer better protection.
However, this requires to share additional data when exchanging
contact information and therefore reduces usability. Signal
nevertheless plans to introduce alternative identiﬁers [51].
Selective Contact Permissions. iOS and Android require
apps to ask for permission to access the user’s address book,
which is currently an all or nothing choice. Mobile operating
systems could implement a functionality in their address book
apps to allow users to declare certain contacts as “sensitive”
or “private”, e.g., via a simple check box. Mobile messengers
13The PSI protocols of [37] initially transfer 4.19 MB per 1 M users.
then are not able to access such protected contacts and therefore
cannot leak them to the service provider.
Also the existing groups in the address book could be
extended for this, e.g., declare the group of health-related
contacts as sensitive and do not use them for contact discovery.
There already exist wrapper apps for speciﬁc messengers with
similar functionality (e.g., WhatsBox [3] for WhatsApp), but a
system-wide option would be preferable.
Furthermore, users may hide contacts they deem sensi-
tive (e.g., doctors) by not storing them in the phone’s address
book if messengers have access permissions. Alternatively,
users can revoke access permissions for such applications.
B. Crawling Mitigations
In the following, we discuss several possible mitigation
strategies that have the potential to increase resilience against
crawling attacks. Furthermore, since many messenger apps
give users the possibility to add additional information to their
proﬁle, we also discuss countermeasures that can prevent, or
at least limit, the exposure of sensitive private information
through the scraping of user proﬁles.
Stricter Rate Limits. Rate limits are a trade-off between
user experience and protection of the service. If set too low,
users with no malicious intent but unusual usage patterns (e.g.,
a large number of contacts) will exceed these limits and suffer
from a bad user experience. This is especially likely for services
with a large and diverse user base.
However, we argue that private users have no more
than 10,000 contacts in their address book (Signal states similar
numbers [37] and Google’s contact management service limits
the maximum number to 25,000 [28]). Therefore, the contact
discovery service should not allow syncing more numbers than
in this order of magnitude at any point in time. Exceptions could
be made for businesses, non-proﬁt organizations, or celebrities
after performing extended validation.
We furthermore argue that private users do not change many
of their contacts frequently. The operators of Writethat.name
observed that even professional users have only about 250
new contacts per year [83]. Therefore, service providers
could penalize users when detecting frequent contact changes.
Additional total limits for the number of contacts can detect
accounts crawling at slow rates.
Facebook (WhatsApp’s parent company) informed us during
responsible disclosure that they see legitimate use cases where
users synchronize more contacts (e.g., enterprises with 200,000
contacts)14. We recommend to handle such business customers
differently than private users. In response to our ﬁndings
showing that data scraping is currently possible even at a
country level scale (cf. § IV), Facebook informed us that they
have improved WhatsApp’s contact synchronization feature to
detect such attacks much earlier (cf. § VIII).
Limiting Exposure of Sensitive Information. Since pre-
venting enumeration attacks entirely is impossible, the infor-
mation collected about users through this process should be
kept minimal. While Signal behaves exemplarily and reveals
no public proﬁle pictures or status information, WhatsApp
14This deﬁnition of “legitimate” is interesting, since WhatsApp’s terms of
service prohibit non-personal use of their services [81].
11
and Telegram should set corresponding default settings. Further-
more, users themselves may take actions to protect themselves
from exposure of private information by thinking carefully
what information to include into public ﬁelds, such as proﬁle
pictures and status text, and checking whether there are privacy
settings that can limit the visibility of this information.
Mutual Contacts. Mobile messengers could offer a setting
for users to let them only be discovered on the service by
contacts in their address book to prevent third parties from
obtaining any information about them.
VII. RELATED WORK
We review related work from four research domains: PSI
protocols, enumeration attacks, user tracking, and hash reversal.
A. Private Set Intersection (PSI)
PSI protocols can be used for mobile private contact
discovery to hinder hash reversal attacks (cf. § III). Most PSI
protocols consider a scenario where the input sets of both
parties have roughly the same size (e.g., [43], [60], [61], [62],
[63], [64]). However, in contact discovery, the provider has
orders of magnitude more entries in the server database than
users have contacts in their address book. Thus, there has been
research on unbalanced PSI protocols, where the input set of
one party is much larger than the other [10], [11], [37], [41].
Today’s best known protocols [37] also provide efﬁcient im-
plementations with reasonable runtimes on modern smartphones.
Unfortunately, their limitation is the amount of data that needs
to be transferred to the client in order to obtain an encrypted
representation of the server’s database: for 228 registered
users (the estimated number of active users on Telegram [15])
it is necessary to transfer ≈1 GiB, for 231 registered users (a bit
more than the estimated number of users on WhatsApp [15])
even ≈8 GiB are necessary. Moreover, even PSI protocols
cannot prevent enumeration attacks, as discussed in § VI-A.
The Signal developers concluded that current PSI protocols
are not practical for deployment [49], and also argue that
the required non-collusion assumption for more efﬁcient
solutions with multiple servers [37] is unrealistic. Instead, they
introduced a beta version [49] that utilizes Intel Software Guard
Extensions (SGX) for securely performing contact discovery in
a trusted execution environment. However, Intel SGX provides
no provable security guarantees and there have been many
severe attacks (most notably “Foreshadow” [9]). Given the
scope of such attacks and that ﬁxes often require hardware
changes, the Intel SGX-based contact discovery service is less
secure than cryptographic PSI protocols.
B. Enumeration Attacks
Popular applications for enumeration attacks include, e.g.,
ﬁnding vulnerable devices by scanning all IPv4 addresses and
ports. In the following, we focus on such attacks on social
networks and mobile messengers.
For eight popular social networks, Balduzzi et al. [4] fed
about 10 million cleverly generated email addresses into the
search interface, allowing them to identify 1.2 million user
proﬁles without experiencing any form of countermeasure.
After crawling these proﬁles with methods similar to [5],
they correlated the proﬁles from different networks to obtain
a combined proﬁle that
in many cases contained friend
lists, location information, and sexual preferences. Upon the
responsible disclosure of their ﬁndings, Facebook and XING
quickly established reasonable rate limits for search queries. We
hope for similar deployment of countermeasures by responsively
disclosing our ﬁndings on mobile messengers (cf. § VIII).
Schrittwieser et al. [53], [71] were the ﬁrst to investigate
enumeration attacks on mobile messengers, including Whats-
App. For the area code of San Diego, they automatically
tested 10 million numbers within 2.5 hours without noticing
severe limitations. Since then, service providers established at
least some countermeasures. We revisit enumeration attacks at
a substantially larger scale (cf. § IV) and demonstrate that the
currently deployed countermeasures are insufﬁcient to prevent
large-scale enumeration attacks.
For the Korean messenger KakaoTalk, enumeration attacks
were demonstrated in [38], [39]. The authors automatically
collected ≈50,000 user proﬁles by enumerating 100,000 number
sequences that could potentially be phone numbers. They
discovered a method to obtain the user names associated with
these proﬁles and found that ≈70 % of users chose their real
name (or at least a name that could be a real name), allowing
identiﬁcation of many users. As countermeasures, the authors
propose the detection of certain known misuse patterns as well
as anomaly detection for repeated queries. In contrast, in § IV
we automatically perform enumeration attacks at a much larger
scale on popular messaging applications used world-wide. By
testing only valid mobile phone numbers, we increase the
efﬁciency of our attacks. We propose further mitigations in § VI.
In [12], the authors describe a simple Android-based system
to automatically conduct enumeration attacks for different
mobile messengers by triggering and recording API calls via the
debug bridge. In their evaluation, they enumerate 100,000 Chi-
nese numbers for WeChat and correlate the results with other
messengers. We perform evaluations of different messengers at a
larger scale, also assessing currently deployed countermeasures
against enumeration attacks (cf. § IV).
Gupta et al. [29], [30] obtained personal information from
reverse-lookup services, which they correlated with public
proﬁles on social networks like Facebook, in order to then run
personalized phishing attacks on messengers like WhatsApp.
From about 1 million enumerated Indian numbers, they were
able to target about 250,000 users across different platforms.
Enumeration attacks were also used to automatically har-
vest Facebook proﬁles associated with phone numbers even
when the numbers are hidden in the proﬁles [40]. The authors
experienced rather strict countermeasures that limit the number
of possible queries to 300 before a “security check” in form of
a CAPTCHA is triggered. By automatically creating many fake
accounts and setting appropriately slow crawling rates, it was
still possible to test around 200,000 Californian and Korean
phone numbers within 15 days, leading to a success rate of 12 %
and 25 %, respectively. While acquiring phone numbers is more
cumbersome than generating email addresses, we nevertheless
report much faster enumeration attacks that harvest proﬁles of
mobile messenger users (cf. § IV).
In 2017, Loran Kloeze developed the Chrome exten-
sion “WhatsAllApp” that allows to misuse WhatsApp’s web
interface for enumeration attacks and collecting proﬁle pictures,
display names, and status information [42]. After disclosing his
approach, Facebook pointed out (non-default) privacy settings
12
available to the user to hide this information, and stated
that WhatsApp detects abuse based on measures that identify
and block data scraping [19]. In § IV, we investigate the
effectiveness of their measures and ﬁnd that we can perform
attacks at a country-level scale, even with few resources. We
also observe that few users change the default settings.
There exist other open-source projects that enable auto-
mated crawling of WhatsApp users and extracting personal
information, e.g., [24], [65]. However, frequent changes of
the WhatsApp API and code often break these tools, which
are mostly abandoned after some time, or cease operation after
receiving legal threats [34].
C. User Tracking
In 2014, Buchenscheit et al. [8] conducted a user study
where they tracked online status of participants for one month,
which allowed them to infer much about the participants’ daily
routines and conversations (w.r.t. duration and chat partners).
Other user studies report the “Last Seen” feature as the users’
biggest privacy concern in WhatsApp [13], [69].
Researchers also monitored the online status of 1,000 ran-
domly selected users from different countries for 9 months [72].
They published statistics on the observed behavior w.r.t. the
average usage time per day and the usage throughout the day.
Despite the clearly anomalous usage patterns of the monitoring,
the authors did not experience any countermeasures.
“WhatsSpy” is an open-source tool
that monitors the
online status, proﬁle pictures, and status messages of selected
numbers—provided the default privacy options are set [87].
It abuses the fact that WhatsApp indicates whether a user is
online [88], even when the “Last Seen” feature is disabled. The
tool was discontinued in 2016 to prevent low-level abuse [89],
since the developer found more than 45,000 active installations
and companies trying to use the prototype commercially.
In this context, our user database crawling attacks could be
used to efﬁciently ﬁnd new users to track and our discovery
of Telegram’s importer_count label gives even more
monitoring possibilities (cf. § IV).
D. Hash Reversal
Reversing hashes is mostly used for “recovering” passwords,
which are commonly stored only in hashed form. Various hash
reversal tools exist, either relying on brute-forcing [59], [74] or
rainbow tables [68]. The practice of adding a unique salt to each
hash makes reversal hard at a large scale, but is not suitable
for contact discovery [37], [48]. In contrast, our mitigation
proposed in § VI-A uses a global salt.
It is well known that hashing of personally identiﬁable
information (PII), including phone numbers, is not sufﬁcient
due to the small pre-image space [20], [48]. The PSI literature
therefore has proposed many secure alternatives for match-
ing PII, which are currently orders of magnitudes slower than
insecure hashing-based protocols (cf. § VII-A).
In [50],
the authors show that
the speciﬁc structure
of PII makes attacks much easier in practice. Regarding
phone numbers, they give an upper bound of 811 trillion
possible numbers world-wide, for which brute-forcing takes
around 11 days assuming SHA-256 hashes and a hash rate
of 844 MH/s. For speciﬁc countries, they also run experiments
showing that reversing an MD5 or SHA-256 hash for a German
phone number takes at most 2.5 hours. In § II, we give much
more accurate estimations for the amount of possible (mobile)
phone numbers and show in § III that using novel techniques
and optimizations, hash reversal is much faster and can even
be performed on-the-ﬂy.
VIII. CONCLUSION
Mobile contact discovery is a challenging topic for privacy
researchers in many aspects. In this paper, we took an attacker’s
perspective and scrutinized currently deployed contact discovery
services of three popular mobile messengers: WhatsApp, Signal,
and Telegram. We revisited known attacks and using novel
techniques we quantiﬁed the efforts required for curious service
providers and malicious users to collect sensitive user data at
a large scale. Shockingly, we were able to demonstrate that
still almost nothing prevents even resource-constraint attackers
from collecting data of billions of users that can be abused
for various purposes. While we proposed several technical
mitigations for service providers to prevent such attacks in the
future, currently the most effective protection measure for users
is to revise the existing privacy settings. Thus, we advocate to
raise awareness among regular users about the seriousness of
privacy issues in mobile messengers and educate them about
the precautions they can take right now.
Responsible Disclosure. In our paper, we demonstrate
methods that allow to invade the privacy of billions of mobile
messenger users by using only very few resources. We therefore
initiated the ofﬁcial responsible disclosure process with all
messengers we investigated (WhatsApp, Signal, and Telegram)
before the paper submission and shared our ﬁndings to prevent
exploitation by maleﬁcent imitators.
Signal acknowledged the issue of enumeration attacks
as not fully preventable, yet nevertheless adjusted their rate
limits in the weeks following our disclosure and implemented
further defenses against crawling. Facebook acknowledged and
rewarded our ﬁndings as part of their bug bounty program, and
has deployed improved defenses for WhatsApp’s contact syn-
chronization. Telegram responded to our responsible disclosure
by elaborating on additional data scraping countermeasures
beyond the rate limits detected by us. They are allegedly
triggered when attackers use existing databases of active phone