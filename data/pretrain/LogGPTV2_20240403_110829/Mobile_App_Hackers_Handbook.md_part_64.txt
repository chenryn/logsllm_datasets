John Smith
CEO
28/12/1970
Adam Peters
Consultant
03/04/1987
Jacob Matthews
Accountant
06/11/1981
Given a file like this, you may want to compile a list of all employees whom are detailed in the document. To do
this, you might use something similar to the following code:
XmlReader reader = XmlReader.Create("Assets/XMLFile2.xml");
// parse the XML file
XDocument xmlDoc = XDocument.Load(reader);
var q = from c in xmlDoc.Descendants("employee")
select (string)c.Element("name") + (string)c.Element("title");
string allEmployees = "";
// concatenate all detailed employees together into a string
foreach (string name in q) {
allEmployees += name + ". ";
}
// show in message box
MessageBox.Show(allEmployees);
As expected, you’ll get the message box listing the names of all the employees in the XML file. (See Figure
11.11.)
Figure 11.11 Names parsed out from the XML document
Using LINQ to query XML documents can prove to be very convenient and powerful due to its systematic and
logical nature.
Although in the previous example we used XDocument.Load() to parse an XML document from disk, you would
use XDocument.Parse()to parse XML documents that are contained within string objects. Also other overloads of
the Load() method exist. (See the XDocument documentation for more details; http://msdn .microsoft.com/en-
us/library/system.xml.linq.xdocument(v=vs.110).aspx.)
So what about the classic XML security problem—DTD (Document Type Definition) parsing? And parsing of
DTDs that resolve to external entities?
Fortunately for developers, XDocument’s DTD parsing settings are secure by default; that is, DTD parsing is set to
prohibited, unless the developer explicitly enables it on her XDocument object.
In real-world apps, however, DTD parsing is sometimes enabled, for a few possible reasons:
Code fragments are copied in from other sources because they just work. Examples include code solutions
found on resources such as Internet forums, including Stack Overflow.
Documents being parsed simply rely on DTDs being resolved, so to correctly parse documents, developers
bite the bullet and simply enable DTD parsing to avoid breaking their apps.
When apps use XDocument for XML parsing and their documents require the use of DTDs, the setting must be
enabled with code like this:
var settings = new XmlReaderSettings { DtdProcessing =
DtdProcessing.Parse };
XmlReader reader = XmlReader.Create("myFile.xml", settings);
// parse the XML file
XDocument xmlDoc = XDocument.Load(reader);
If you come across an app that does have DTD parsing enabled, two general issues have a security impact: entity
expansion denial-of-service attacks (otherwise known as a “billion laughs”), and external entity resolution
attacks (XXE). We discuss these next.
Entity Expansion Denial-of-Service Attacks
The XML standard allows for nested entities in inline DTDs. A side effect of resolving nested entities is that
creating a relatively small piece of XML that effectively acts as an XML bomb is possible.
Consider the following piece of XML, from an MSDN blog article on XML DoS and external entity attacks
(located at http://msdn.microsoft.com/en-us/magazine/ee335713.aspx):
]>
&lol9;
The entity lol9 is made up of ten lol8 entities, which itself is made up of ten lol7 entities, which in turn is
made up of ten lol6 entities and so on and so forth, until all entities have been expanded to lol strings.
Visualizing how this actually adds up to a lot of entity expansions is easy. In fact, this small piece of XML ends
up resolving to one billion lol strings, hence the name “billion laughs,” and this data consumes around 3GB in
memory. In addition to consuming vast amounts of the runtime’s heap space, the series of operations are also
resource intensive in terms of processor usage.
You can demonstrate this to yourself by having the following logic in a test application, and then running it on
the device from Visual Studio:
string lol = "]>&lol9;";
var settings = new XmlReaderSettings { DtdProcessing =
DtdProcessing.Parse };
byte[] data = Encoding.UTF8.GetBytes(lol);
MemoryStream stm = new MemoryStream(data, 0, data.Length);
XmlReader xmlReader = XmlReader.Create(stm, settings);
// parse the XML file
XDocument xmlDoc = XDocument.Load(xmlReader);
Eventually, after several minutes, the app will throw an unhandled System .OutOfMemory exception, and the
application will crash. (See Figure 11.12.)
Figure 11.12 Out-of-memory exception reported by Visual Studio due to a “billion laughs” attack
Now, obviously because we’re talking about applications running on mobile devices and not on server platforms,
the possibility of a DoS occurring on a mobile app may seem a little bit unlikely. In many cases, this may be
true, but if an app pulls an XML bomb of this kind from the Internet, saves it to disk, and then attempts to parse
it every time the app runs, users have a much more annoying problem, especially if the app is critical to their
work or otherwise important to them. A persistent DoS like this could result in users’ having to reinstall the app,
and perhaps losing important data associated with it.
External Entity Expansion Attacks
External entity expansion attacks (XXEs) are decidedly more interesting than XML bomb DoS attacks,
particularly because they often allow the disclosure of files from the host being attacked.
XDocument is no exception; as long as DTD parsing has been enabled on the XDocument object being used for
parsing, file disclosure attacks are sometimes possible. However, restrictions are imposed by Windows Phone’s
sandboxing model. We’ll run through those now with real code and outputs so that you are aware of when file
disclosure attacks via XXE are possible, and when they’re not, in Windows Phone 8.x apps.
Consider a sample application that contains the following vulnerable code:
var settings = new XmlReaderSettings { DtdProcessing =
DtdProcessing.Parse };
XmlReader xmlReader = XmlReader.Create("Assets/XMLFile.xml", settings);
// parse the XML file
XDocument xmlDoc = XDocument.Load(xmlReader);
var q = from c in xmlDoc.Descendants("someTag") select(string)
c.Element("foo");
string secretContents = "";
// concatenate all detailed employees together into a string
foreach (string data in q) {
secretContents += data + ". ";
}
// show in message box
MessageBox.Show(secretContents);
With a bit of analysis, you can easily see that this code parses an XML file called XMLFile1.xml, parses out the
values of any  tags found within the document, and displays them in a message box.
Now create a new XML file (called XMLFile1.xml) in the Assets directory of your application. Insert the following
contents (via Visual Studio’s Solution Explorer):
]>
&xxe;
This XML file causes the parser to attempt to resolve an external entity that clearly lies outside the app’s
sandbox. Run your app and you’ll receive a System .Xml.XmlException with a reason string reading:
"An error has occurred while opening external entity
'file:///C:/secretFile.txt': --> System.Xml.XmlException:
Cannot open 'file:///C:/secretFile.txt'. The Uri parameter
must be a relative path pointing to content inside the
Silverlight application's XAP package ..."
Replace your XML file’s content with the following, and run your app again:
]>
&xxe;
Your app will receive a very similar exception; more specifically, with a reason string reading:
"An error has occurred while opening external entity
'http://www.google.co.uk/abcd': --> System.Xml.XmlException:
Cannot open 'http://www.google.co.uk/abcd'. The Uri parameter
must be a relative path pointing to content inside the
Silverlight application's XAP package ..."
The message delivered with the exception summarizes a serious limitation in file-stealing capabilities as a result
of sandboxing: only files that reside in the app’s Install directory can be stolen (that is, C:\Data\Programs\
{GUID}\Install). This is the directory where the app’s executables, manifest, and other pre-packaged assets are
placed by the OS when the app is installed, and this directory and its subdirectories are read-only by Windows
Phone sandboxing restrictions.
Files in the app’s isolated storage (C:\Data\Users\DefApps\APPDATA\{GUID}) are not accessible as external
entities. Unfortunately for attackers, this means that stealing files stored at runtime by apps is not possible. It is
possible to reference the app’s pre-packaged files only as external entities.
This rules out interesting files stored by apps, such as cache, cookies, and key and credential files. However,
some applications may pre-package interesting files such as certificates or credential files, which would be in the
application’s Install directory (or a subdirectory), and would therefore be viable targets for theft via XXE.
With the understanding that sandboxing restrictions apply to external entity resolutions, even with a good target
file identified, the problem still exists of how, as an attacker, to exfiltrate the file from off the device to an
attacker-controlled box.
Whether this is possible depends on what the application does with the parsed entity. Some apps may, at some
point, send parts of the parsed XML document back to the developer’s server or another server. In this case, the
possibility exists for would-be attackers to intercept or otherwise receive the resolved external entity file’s
contents.
In any case, as demonstrated here, the XDocument will indeed parse files as external entities. In your sample
vulnerable app, place the following XML contents in Assets/XMLFile.xml (via Solution Explorer),
]>
&xxe;
and create a file named secret.txt, also in the Assets folder, again via Solution Explorer, and insert “secret
data” using the text editor.
Upon running your sample vulnerable app identical to the one laid out previously in this section, the API parses
the external element (xxe), and the LINQ query fills the secretContents string object with the resolved data: the
contents of secret.txt. The message box shown in Figure 11.13 should appear.
Figure 11.13 Result of external entity resolution of the “secret file” in a message box
An attacker’s ability to exfiltrate data from the device will generally depend on whether the app somehow
transmits the data (from the resolved external entity) elsewhere via the network at some point, or uses it in a
way that may otherwise be accessible to an attacker; for example, in a JavaScript DOM that may be
compromised by an attacker via WebBrowser script injection.
Attacking Databases
This section takes a look at how database interactions can sometimes be exploited in Windows Phone 8.x
applications. We say “database interactions” instead of just “SQL injection” because we want to first briefly
mention the LINQ to SQL API—Windows Phone 8.x’s standard way of accessing local databases. We’ll then
move onto SQL injection bugs and how they can be introduced via common (third-party) database libraries.
LINQ to SQL
LINQ to SQL is now used for all (native) database operations in Windows Phone applications, including defining
schemas, reading to, writing to, and otherwise manipulating local databases. Windows Phone 8.x does not
support any of the traditional SQL-based APIs at all. You can find WP8.x-specific aspects at the MSDN page
located at http://msdn.microsoft.com/en-us/library/windows/apps/hh202872(v=vs.105).aspx.
LINQ to SQL adds a layer between LINQ and TSQL that ultimately means that SQL injection in apps using
Windows Phone 8.x’s native database capabilities is not possible.
Therefore, if the app is using LINQ to SQL, it is safe from SQL injection.
SQLite and SQLCipher
Despite using LINQ to SQL–style interaction with databases, some developers still prefer to interact with their
databases with SQL.
In addition to being popular in general, SQLite has also found popularity and frequent usage among Windows
Phone developers. The reasons possibly include familiarity and known reliability, but whatever the reasons,
seeing SQLite being used for local data storage in Phone Store apps is common.
SQLite provides versions of its engine that work on both Windows Phone 8 and 8.1. The package SQLite
provides is a native library. Krueger Systems developed a set of wrappers called sqlite-net
(https://github.com/praeclarum/sqlite-net) that allows the native SQLite API to be accessed from C# code;
however, sqlite-net doesn’t support the Windows Phone SQLite library.
Fortunately, Peter Huene created a set of native wrappers named sqlite-net-wp8
(https://github.com/peterhuene/sqlite-net-wp8) that allow sqlite-net to integrate with the Windows Phone
version of SQLite.
The Windows Phone SQLite engine is installable in Visual Studio via Tools Extensions and Updates, and sqlite-
net is available as a NuGet package, also installable in Visual Studio via the Package Manager Console. General
instructions for how to install SQLite for Windows Phone into your Visual Studio instance, as well as how to
install sqlite-net and sqlite-net-wp8 code wrappers to your projects, are available at
http://blogs.windows.com/buildingapps/2013/03/12/using-the-sqlite-database-engine-with-windows-
phone-8-apps/. Following this guide before reading on is recommended if you want to follow the examples in
this section.
SQLCipher (http://sqlcipher.net/blog/2014/1/13/introducing-sqlcipher- for-windows-phone-8-and-
windows-runtim.html) is based closely on sqlite-net. As the name suggests, it adds cryptography capabilities to
SQLite databases. Because its API is so close to that provided by sqlite-net, the contents of this section are also
applicable to apps that use SQLCipher for their databases.
The wrapper API provides safe methods for querying and otherwise manipulating databases without having to
actually deal with SQL queries directly, and the API also caters for parameterization to be used when SQL
queries are being constructed manually.
API provides the following methods for raw SQL statement execution:
db.CreateCommand()
db.Execute()
db.ExecuteScalar()
db.Query()
db.Query()
db.DeferredQuery()
db.DeferredQuery()
For instance, Query() can be used safely; that is, by utilizing parameterization, but it can also be used