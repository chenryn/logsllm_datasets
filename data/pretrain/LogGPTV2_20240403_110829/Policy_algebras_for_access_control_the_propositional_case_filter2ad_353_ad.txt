neered security policies.
8. CONCLUSIONS
We present a propositional algebra to capture policy op-
erators such as union, intersection, sequential composition,
recursive closure under rules, adding provisions etc used in
composing security policies for access control. An autho-
rization state, which consists of assigning sets of access per-
missions/denials sets to subject-object pairs is paramount in
our semantics. We have made two design choices. The ﬁrst
is to assign sets of permissions, as opposed to permissions
per (subject, object) pair. This choice enables us to model
policies such as separation of duty. The second choice was to
add non-determinism in assigning these sets of permissions
or denials. This choice allows us to model preference-free
sets of permissions—a possibilistic semantics in the sense of
McLean [16]—in discretionary access control.
One way policy models could be useful is if they give rise to
some algorithms to determine if two policy compositions re-
sult in granting or denying exactly the same accesses, which
we call semantic equivalence. In order to answer this ques-
tion, we developed some algebraic identities that can be used
to identify equivalent policies. A second way policy mod-
els can be used is if they give rise to some algorithms to
determine if composite policies are complete, consistent or
deterministic, given that the components stratify some or
all of these properties. We have categorized the operators
that preserve determinacy, consistency and completeness,
and shown how some of these categorizations can be used
to derive suﬃcient conditions for components.
The work reported here is being improved in many ways.
We are developing a predicate version in which properties
are not left as abstract symbols, but are created from rela-
tion, function, variable and constant symbols over subjects,
objects and accesses. Doing so will enable us to reason
more about the restriction operator (|) and the provision-
ing operator (:). Notice that having a richer language for
restrictions and provisions would adversely eﬀect the com-
putability of the algebra, and we want to strike a balance
between them so that we have reasonable expressibility at
an aﬀordable cost of complexity. The second improvement
is in the area of the basic automata model. Although our
framework can model a single (subject, object) pair being
given a non-deterministic choice in selecting between two
sets of access permissions,
it cannot model the following
types of access permissions. Say a policy wants to assign
(s1, o1) the permission set A and (s2, o2) the permission set
B simultaneously, or none at all. If we extend out set based
non-deterministic automatons to and-or computation trees,
as they were advocated in [6], we can model such requests.
The advantage of this addition is that we can not only model
sets of permissions, but also specify which combinations of
them are valid. Notice that this form of computation trees
has been successfully used in Statecharts [8] to model soft-
ware design. To the best of our knowledge, Statecharts have
not been used for composing security policies.
9. REFERENCES
[1] B. Alpern and F. B. Schneider. Deﬁning liveness.
Information Processing Letters, 21(4):181–185,
October 1985.
[2] B. Alpern and F. B. Schneider. Recognizing safety and
liveness. Distributed Computing, 2:117–126, 1987.
[3] Y. Bai and V. Varadarajan. A logic for state
transformations in authorization policies. In Proc.
10th IEEE Computer Security Foundations Workshop,
pages 173–182, 1997.
[4] B. T. Blaustein et al. A model of secure federated
data management. Technical report, The MITRE
Corporation, 1991.
[5] P. Bonatti, S. D. C. di Vimercati, and P. Samarati. A
modular approach to composing access control
policies. In Proc. 7th ACM Conf. on Communications
and Security, pages 164–173, August 2000.
[6] A. Chanrda, D. Kozen, and L. Stockmeyer.
Alternation. Journal of the ACM, 28(1):114–133, 1981.
[7] V. D. Gilgor, S. I. Gavrila, and D. Ferraiolo. On the
formal deﬁnition of separation-of-duty policies and
their compositions. In IEEE Computer Society
Symposium on Research in Security and Privacy,
pages 173–181, 1998.
[8] D. Harel. Statecharts: A visual formalism for complex
systems. Science of Computer Programming,
8:231–274, 1987.
[9] S. Jajodia, M. Kudo, and V. S. Subrahmanian.
Provisional authorizations. In A. Ghosh, editor,
Recent Advances in Secure and Private E-Commerce.
45Kluwer Academic Publishers, Boston, 2001.
[10] S. Jajodia, P. Samarati, M. L. Sapino, and V. S.
Subrahmanian. Flexible support for multiple access
control policies. ACM Transactions on Database
Systems, June 2001.
[11] S. Jajodia, P. Samarati, and V. S. Subrahmanian. A
logical language for expressing authorizations. In Proc.
IEEE Symp. on Security and Privacy, pages 31–42,
Oakland, CA, May 1997.
[12] S. Jajodia, P. Samarati, V. S. Subrahmanian, and
E. Bertino. A uniﬁed framework for enforcing multiple
access control policies. In Proc. ACM SIGMOD Int’l.
Conf. on Management of Data, pages 474–485,
Tucson, AZ, May 1997.
[13] D. C. Kozen. Language based security. Technical
Report TR- 99-1775, Department of Computer
Science, Cornell University, 1999.
[14] J. McLean. A general theory of composition for trace
sets closed under selective interleaving functions. In
Proc. IEEE Symp. on Security and Privacy, pages
79–93, Oakland, CA, May 1994.
[15] J. McLean. A general theory of composition for a class
of “possibilistic” properties. IEEE Transactions on
Software Enginerring, 22(1):53–67, January 1996.
[16] J. McLean. Algebra of security. In Proc. IEEE Symp.
on Security and Privacy, pages 2–7, Oakland, CA,
May 1998.
[17] F. B. Schneider. Enforceable security policies.
Technical Report TR 98-1664, Department of
Computer Science, Cornell University, 1998.
[18] R. T. Simon and M. E. Zurko. Separation of duty in
role-based environments. In Proc. 10th IEEE
Computer Security Foundations Workshop, pages
183–194, 1997.
APPENDIX
Proof of Theorem 1:
Due to lack of space, we prove properties (1) - (6) only.
Suppose M is an interpretation.
1. Inclusion of unions:
(a) p ⊆ (p∪p). Suppose (((s1, o1, A1), T1), ((s1, o1, A2), T2) ∈
M (p)
then (((s1, o1, A1), T1), ((s1, o1, A2∪A2), T2) ∈ M (p∪
P ).
(a) (p1 ∪ p2) ∪ p3 = p1 ∪ (p2 ∪ p3).
2. Associativity of unions, intersections and compositions:
This follows from (A1 ∪ A2) ∪ A3 = A1 ∪ (A2 ∪ A3)
for sets A1, A2, A3.
This follows from (A1 ∩ A2) ∩ A3 = A1 ∩ (A2 ∩ A3)
for sets A1, A2, A3.
(b) (p1 ∩ p2) ∩ p3 = p1 ∩ (p2 ∪ p3).
(c) (p1; p2); p3 = p1; (p2; p3).
This follows from the associativity of relational com-
positions.
3. Commutativity of unions and intersections:
(a) p1 ∪ p2 = p2 ∪ p1.
(b) p1 ∩ p2 = p2 ∩ p1.
This follows from A1∪A2 = A2∪A1 for sets A1, A2.
This follows from A1∩A2 = A2∩A1 for sets A1, A2.
4. Distributivity of unions and intersections:
(a) p1 ∪ (p2 ∩ p3) = (p1 ∪ p2) ∩ (p1 ∪ p3).
(b) p1 ∩ (p2 ∪ p3) = (p1 ∩ p2) ∪ (p1 ∩ p3).
This follows from A1 ∪ (A2 ∩ A3) = (A1 ∪ A2) ∩
(A1 ∪ A3) for sets A1, A2, A3.
This follows from A1 ∪ (A2 ∩ A3) = (A1 ∪ A2) ∩
(A1 ∪ A3) for sets A1, A2, A3.
5. Right distributivity of composition over unions and in-
tersections:
(a) p1; (p2 ∩ p3) = (p1; p2) ∩ (p1; p3).
(cid:3)
), T2) ∈ M (p1; (p2∩
Suppose (((s1, o1, A), T1), ((s1, o1, A
p3))
Then, there are sets of authorizations A1, A2, A3
satisfying the conditions:
• (((s1, o1, A), T1), ((s1, o1, A1), T ) ∈ M (p1)
• (((s1, o1, A1), T ), ((s1, o1, A2∩A3), T2) ∈ M (p2∩
p3)
Consequently,
• (((s1, o1, A), T1), ((s1, o1, A2), T2) ∈ M (p1; P2)
• (((s1, o1, A), T1), ((s1, o1, A3), T2) ∈ M (p1; P3)
• Hence, (((s1, o1, A), T1), ((s1, o1, A2∩A3), T2) ∈
This shows p1; (p2 ∩ p3) ⊆ (p1; p2) ∩ (p1; p3). Con-
verse can also be argued similarly.
(b) p1; (p2 ∪ p3) = (p1; p2) ∪ (p1; p3).
M ((p1; P2) ∩ (p1; P3))
(cid:3)
), T2) ∈ M (p1; (p2∪
Suppose (((s1, o1, A), T1), ((s1, o1, A
p3))
Then, there are sets of authorizations A1, A2, A3
satisfying the conditions:
• (((s1, o1, A), T1), ((s1, o1, A1), T ) ∈ M (p1)
• (((s1, o1, A1), T ), ((s1, o1, A2∪A3), T2) ∈ M (p2∪
p3)
Consequently,
• (((s1, o1, A), T1), ((s1, o1, A2), T2) ∈ M (p1; P2)
• (((s1, o1, A), T1), ((s1, o1, A3), T2) ∈ M (p1; P3)
• Hence, (((s1, o1, A), T1), ((s1, o1, A2∪A3), T2) ∈
This shows p1; (p2 ∪ p3) ⊆ (p1; p2) ∪ (p1; p3). Con-
verse can also be argued similarly.
M ((p1; P2) ∪ (p1; P3))
6. Properties of the diﬀerence operator:
(c) ¬(p1 − p2) = (¬p1) − (¬p2).
(a) (p − p) = (cid:9)p.
(b) p1 − (p2 ∪ p3) = (p1 − p2 − p3).
Follows from A − A = ∅ for sets A.
Follows from A1 − (A2 ∪ A3) = (A1 − A2 − A3) for
sets A1, A2, A3.
Suppose (((s1, o1, A1), T1), ((s1, o1, A2), T2) ∈ M (¬(p1−
p2)), and −a ∈ A2 be an authorization. Then
+a ∈ A2,1 − A2,1 where
i. (((s1, o1, A1), T1), ((s1, o1, A2,1), T2) ∈ M (p1) and
ii. (((s1, o1, A1), T1), ((s1, o1, A2,2), T2) ∈ M (p2).
iii. Hence (((s1, o1, A1), T1), ((s1, o1,¬A2,1), T2) ∈
iv. (((s1, o1, A1), T1), ((s1, o1,¬A2,2), T2) ∈ M (p2).
v. Hence −a ∈ ¬A2,1 but −a (cid:18)∈ ¬A2,2, as +a (cid:18)∈
vi. A similar argument holds in case +a ∈ A2.
M (¬p1) and
A2,2.
46Here, we deﬁne ¬A = {−a : +a ∈ A}∪{+a : −a ∈
A}.
(d) (cid:9)(p1 − p2) = (cid:9)p1.
Proof of Theorem 2:
Suppose M is an interpretation.
1. If p is deterministic, to show that (p ∪ p) = p, and
(p ∩ p) = p.
Suppose (((s1, o1, A1), T1), ((s1, o1, A2), T2) ∈ M (p). Then
A1 = A2, because p is deterministic, consequently,
(((s1, o1, A1), T1), ((s1, o1, A2), T2) ∈ M (p∪p), M (p∩p),
implying (p ∪ p) = (p ∩ p) = p.
2. For any policy p, (cid:9)p is a deterministic policy.
(cid:3)
(cid:3)(cid:3)
(cid:3)(cid:3)
((s
(cid:3)
, A
)) ∈ M (p1 ∪ p2).
= B1 ∪ B2 for some
This is true because if for any (((s1, o1, A1), T1),
((s1, o1, A2), T2) ∈ M ((cid:9)p), A2 = ∅, making (cid:9)p deter-
ministic.
3. If p1, p2 are deterministic policies, to show that (p1∪p2),
(p1 ∩ p2), (p1; p2), ¬p1 are deterministic.
• Suppose (((s, o, A), T ), ((s
(cid:3)
(cid:3)
), T
, o
(cid:3)(cid:3)
(cid:3)(cid:3)
, o
, A
), T
= A1 ∪ A2 and A
• Then A
(cid:3)
• (((s, o, A), T ), ((s
(cid:3)
(cid:3)
, Ai), T
)) ∈ M (pi).
(cid:3)
• Because p1, p2 are deterministic, we get that Ai =
(cid:3)(cid:3)
(cid:3)(cid:3)
= o
, implying that p1 ∪ p2 is
• Consequently, A
(cid:3)(cid:3)
• Similar arguments hold for p1 ∩ p2 and ¬p1.
Ai, Bi , (i = 1, 2) where
)), (((s, o, A), T ),
(cid:3)
and o
(cid:3)
Bi and s
= s
deterministic.
(cid:3)(cid:3)
(cid:3)(cid:3)
, o
((s
, Bi), T
.
= A
)), (((s, o, A), T ),
(cid:3)
(cid:3)
, o
(cid:3)
47