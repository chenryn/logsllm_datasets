nated and how much it reduced malware coverage. Table 5 shows the baseline
and more liberal settings for each heuristic. Using all baseline settings, the run
covered 1194 malware ﬁles with 206 signatures and 0 false positives.
Table 5 shows that almost all of these heuristics are necessary to reduce the FP
rate to zero. Among the tunable heuristics, position deviation performs the best,
eliminating the second most FPs with the lowest impact on coverage. The group
ratio also performs well. Requiring a second common signature does not seem to
help at all. The library heuristics perform very well, barely impacting coverage at
all. Other heuristics show signiﬁcantly decreased marginal discrimination power,
which captures an important point: if two heuristics eliminate the same FPs,
they will show good raw discrimination power, but poor marginal discrimination
power.
6.3 Single-Component Signature Generation Time
The most time-consuming step in Hancock’s string signature generation process
is goodware model generation, which, for the model used in the above exper-
iments, took approximately one week and used up all 128 GBytes of available
memory in the process of its creation. Fortunately, this step only needs to be
done once. Because the resulting model is much smaller than the available mem-
ory in the testbed machine, using the model to estimate a signature candidate’s
occurrence probability does not require any disk I/O.
The three high-level steps in Hancock at run time are malware pre-processing
(including unpacking and disassembly), picking candidate signatures, and apply-
ing diversity-based heuristics to arrive at the best ones. Among them, malware
pre-processing is the most expensive step, but is also quite amenable to paral-
lelization. The two main operations in malware pre-processing are recursively
unpacking malware ﬁles and disassembling both packed and unpacked ﬁles us-
ing IDA Pro. Both use little memory, so we parallelized them to use 15 of our
machines 16 cores. For the 2007-2008 data set, because of the huge number
of packed malware ﬁles and the decreasing marginal return of analyzing them,
Hancock disassembled only 5,506 packed ﬁles. Pre-processing took 71 hours.
Picking candidate signatures took 145 minutes and 37.4 GB of RAM. 15 min-
utes and 34.3 GB of RAM went to loading the goodware model. The remainder
was for scanning malware ﬁles and picking and storing candidate signatures in
memory and then on disk.
Automatic Generation of String Signatures for Malware Detection
117
Table 6. Multi-Component Signature results
# components Permitted component FPs Coverage # Signatures # FPs
2
2
3
3
4
4
5
5
6
6
1
0
1
0
1
0
1
0
1
0
28.9%
23.3%
26.9%
24.2%
26.2%
18.1%
26.2%
17.9%
25.9%
17.6%
76
52
62
44
54
43
54
43
51
41
7
2
1
0
0
0
0
0
0
0
Generating the ﬁnal signature set took 420 minutes and 6.07 GB of RAM.
Most of this time was spent running IDA Pro against byte sequences surrounding
the ﬁnal signatures to output their assembly representation. Without this step,
the ﬁnal signature generation step would have taken only a few minutes.
6.4 Multi-Component Signatures
We tested MCS signatures with 2 to 6 components, with each part being 16 bytes
long. We used a 3.0 GB goodware set to select component candidates and tested
for false positives with a 34.9 GB set of separate goodware.2 Table 6 shows the
coverage and false positive rates when 0 or 1 components could be found in the
smaller goodware set.
We ﬁrst observe that permitting a single component of an MCS to be an FP
in our small goodware set consistently results in higher coverage. However, from
2- and 3-component signatures, we also see that allowing a single component
FP results in more entire MCS FPs, where all signature components occur in a
single goodware ﬁle.
We can trade oﬀ coverage and FP rate by varying the number of signatures
components and permitted component FPs. Three to ﬁve part signatures with 0
or 1 allowed FPs seems to provide the best tradeoﬀ between coverage and FPs.
Since we applied so few heuristics to get these results, beyond requiring the
existence of the multiple, disjoint signature components which make up the sig-
nature, it is perhaps surprising that we have so few MCS FPs. We explain this
by observing that although we do not limit MCS components to code bytes,
we do apply all the library code reducing heuristics through IDA disassembly
described in Section 3.2.
Also, the way in which signature components are selected from contiguous
runs of identical bytes may reduce the likelihood of FPs. If a long, identical byte
sequence exists in a set of ﬁles, the 16 byte signature component with lowest
2 This ﬁnal goodware set was smaller than in SCS tests because of the diﬃculty of
identifying shorter, 16-byte sequences.
118
K. Griﬃn et al.
probability will be selected. Moreover, no other signature component will be
selected from the same run of identical bytes. Thus, if malware shares an identical
uncommon library (which we fail to identify as a library) linked in contiguously
in the executable, at most one signature component will be extracted from this
sequence of identical bytes. The other components must come from some other
shared code or data.
Finding candidate signatures took 1,278 minutes and 117 GB of RAM. Picking
the ﬁnal signature sets took 5 to 17 minutes and used 9.0 GB of RAM.
7 Discussion
The main limitation of the current version of Hancock is its low coverage, which is
also the biggest surprise in this project. One potential explanation for this result
is that malware authors have recently evolved their malware distribution strat-
egy from a “few malware families each with many variants” model to a “many
malware families each with few variants” model, so as to keep each distributed
malware sample eﬀective for as long as possible. Because Hancock is designed to
generate string signatures that correspond to common byte sequences shared by
variants of the same malware family, if the average number of variants in each
family is decreased, it is more diﬃcult for Hancock to generate signature with
good coverage while keeping the false positive rate in check, especially when
state-of-the-art malware classiﬁcation technology is still quite primitive.
To generate new malware families, malware authors use sophisticated pack-
ing and/or metamorphic transformation tools. The current version of Hancock
cannot do much for binaries created by these tools. The static unpack engine
Hancock uses is used in Symantec’s anti-virus products. Still it cannot handle
many packers or metamorphic transformation tools. For example, in the largest
test described in Section 6.2, Hancock has to ignore 59% of the input malware
set because it found them to be packed and could not unpack them. Among the
remaining 41%, some of them are probably packed (perhaps partially), but are
not detected by Hancock. For such malware ﬁles, Hancock won’t create string
signatures for them because they do not share common byte sequences with
other malware ﬁles.
In the future, we plan to incorporate dynamic unpacking techniques, such
as Justin [16], to reduce the impact of packers on Hancock’s coverage. It is
also possible to mitigate the packer problem by blacklisting binaries packed by
certain packers. We did not spend much eﬀort investigating metamorphic trans-
formation tools in the Hancock project, because string signature-based malware
identiﬁcation may not be eﬀective for metamorphic binaries. Instead, behavior-
based malware identiﬁcation may be a more promising solution. Nonetheless,
systematically studying modern metamorphic tools and devising a taxonomi-
cal framework to describe them will be very useful contributions to the ﬁeld of
malware analysis.
Another signiﬁcant limitation of Hancock is its lack of dynamic analysis, which
forces it to give up on packed or metamorphically transformed binaries that it
Automatic Generation of String Signatures for Malware Detection
119
cannot recognize or restore. The rationale for the design decision of employing
only static analysis in Hancock is that it cannot aﬀord the run-time performance
cost associated with dynamic analysis given the current and future malware ar-
rival rate. In addition, even state-of-the-art dynamic analysis techniques cannot
solve all the packer or metamorphism problems for Hancock.
Although many of Hancock’s heuristics can be evaded, in general this is a
much smaller concern than the problem that malware authors avoid using known
string signatures in their binaries. Attackers can (and do) test newly generated
malware ﬁles against popular anti-virus products. In contrast, even if malware
authors create malware ﬁles that do not contain byte sequences that Hancock
may use as signatures, there is no easy way to test the eﬀectiveness of these
malware ﬁles against Hancock’s signature generation algorithms, because it is
not publicly available and because it has so many empirical built-in parameters.
In theory, security by obscurity is not a foolproof solution; in practice, it is very
diﬃcult, if not infeasible, to evade Hancock’s signature generation heuristics.
8 Conclusion
Given a set of malware ﬁles, an ideal string signature generation system should
be able to automatically generate signatures in such a way that the number
of signatures required to cover the malware set is minimal and the probability
of these signatures appearing in goodware programs is also minimal. The main
technical challenge of building such string signature generation systems is how
to determine how FP-prone a byte sequence is without having access to even
a sizeable portion of the world’s goodware set. This false positive problem is
particularly challenging because the goodware set is constantly growing, and is
potentially unbounded. In the Hancock project, we have developed a series of
signature selection and ﬁltering techniques that collectively could remove most,
if not all, FP-prone signature candidates, while maintaining a reasonable cover-
age of the input malware set. In summary, the Hancock project has made the
following research contributions in the area of malware signature generation:
– A scalable goodware modeling technique that prunes away unimportant
nodes according to their relative information gain and merges sub-models
so as to scale to very large training goodware sets,
– A set of diversity-based techniques that eliminate signature candidates when
the set of malware programs they cover exhibit high diversity, and
– The ﬁrst known string signature generation system that is capable of creat-
ing multi-component string signatures which have been shown to be more
eﬀective than single-component string signatures.
Although Hancock represents the state of the art in string signature generation
technology, there is still room for further improvement. The overall coverage
of Hancock is lower than what we expected when we started the project. How
to improve Hancock’s coverage without increasing the FP rate of its signatures
is worth further research. Although the multi-component signatures that Han-
cock generates are more eﬀective than single-component signatures, their actual
120
K. Griﬃn et al.
run-time performance impact is unclear and requires more thorough investiga-
tion. Moreover, there could be other forms of multi-component signatures that
Hancock does not explore and therefore deserve additional research eﬀorts.
This paper omitted discussion of several additional heuristics explored in
project Hancock. See [17] for more details.
References
1. PEiD, http://www.peid.info
2. Clam AntiVirus: Creating signatures for ClamAV (2007),
http://www.clamav.net/doc/latest/signatures.pdf
3. Arnold, W., Tesauro, G.: Automatically generated win32 heuristic virus detection.
In: Proceedings of Virus Bulletin Conference (2000)
4. Jacob, G., Debar, H., Filiol, E.: Behavioral detection of malware: from a survey
towards an established taxonomy. Journal in Computer Virology 4(3) (2008)
5. Singh, S., Estan, C., Varghese, G., Savage, S.: Automated worm ﬁngerprinting. In:
OSDI 2004: Proceedings of the 6th conference on Symposium on Opearting Systems
Design & Implementation, Berkeley, CA, USA, p. 4. USENIX Association (2004)
6. Kim, H.: Autograph: Toward automated, distributed worm signature detection. In:
Proceedings of the 13th Usenix Security Symposium, pp. 271–286 (2004)
7. Kreibich, C., Crowcroft, J.: Honeycomb: creating intrusion detection signatures
using honeypots. SIGCOMM Comput. Commun. Rev. 34(1), 51–56 (2004)
8. Newsome, J., Karp, B., Song, D.: Polygraph: Automatically generating signatures
for polymorphic worms. In: SP 2005: Proceedings of the 2005 IEEE Symposium
on Security and Privacy, Washington, DC, USA, pp. 226–241. IEEE Computer
Society, Los Alamitos (2005)
9. Li, Z., Sanghi, M., Chen, Y., Kao, M., Chavez, B.: Hamsa: fast signature genera-
tion for zero-day polymorphic worms with provable attack resilience. In: SP 2006:
Proceedings of the 2006 IEEE Symposium on Security and Privacy, Oakland06,
pp. 32–47. IEEE Computer Society, Los Alamitos (2006)
10. Tang, Y., Chen, S.: Defending against internet worms: A signature-based approach.
In: Proceedings of IEEE INFOCOM 2005 (2005)
11. Christodorescu, M., Jha, S., Seshia, S., Song, D., Bryant, R.: Semantics-aware mal-
ware detection. In: Proceedings of the IEEE Symposium on Security and Privacy
(2005)
12. Yegneswaran, V., Giﬃn, J.T., Barford, P., Jha, S.: An architecture for generating
semantics-aware signatures. In: SSYM 2005: Proceedings of the 14th conference on
USENIX Security Symposium, Berkeley, CA, USA, p. 7. USENIX Association (2005)
13. Kephart, J.O., Arnold, W.C.: Automatic extraction of computer virus signatures.
In: Proceedings of the 4th Virus Bulletin International Conference (1994)
14. Begleiter, R., El-Yaniv, R., Yona, G.: On prediction using variable order markov
models. Journal of Artiﬁcial Intelligence Research 22, 384–421 (2004)
15. Guilfanov,
I.: Fast library identiﬁcation and recognition technology (1997),
http://www.hex-rays.com/idapro/flirt.htm
16. Guo, F., Ferrie, P., Chiueh, T.: A study of the packer problem and its solutions.
In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID 2008. LNCS, vol. 5230,
pp. 98–115. Springer, Heidelberg (2008)
17. Griﬃn, K., Schneider, S., Hu, X., Chiueh, T.: Automatic generation of string sig-
natures for malware detection (2009),
http://www.ecsl.cs.sunysb.edu/tr/TR236.pdf