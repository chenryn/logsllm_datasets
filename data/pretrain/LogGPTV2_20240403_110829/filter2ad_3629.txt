title:Vroom: Accelerating the Mobile Web with Server-Aided Dependency Resolution
author:Vaspol Ruamviboonsuk and
Ravi Netravali and
Muhammed Uluyol and
Harsha V. Madhyastha
Vroom: 
Accelerating the Mobile Web with 
Server-Aided Dependency Resolution
Vaspol Ruamviboonsuk1, Ravi Netravali2, 
Muhammed Uluyol1, Harsha V. Madhyastha1
1University of Michigan, 2MIT
1
Mobile Web Dominant ...
but Slow...
“9.85s to load median mobile 
retail sites” - Keynote Systems
“Average load time 14s on 
4G” - DoubleClick
Ref: http://gs.statcounter.com/press/mobile-and-tablet-internet-usage-exceeds-desktop-for-first-time-worldwide
2
Problem: Slow web page loads
5s
10s10s
Mobile Optimized Popular Pages, 
State of the Art Phone, Good LTE network
3
Simple Example Page
Dependency Graph
a.com/index.html
  …
  … 
var img = new Image();
img.src = “b.com/img.jpg”;
document.body.appendChild(img);
a.com/script.js
index.html
script.js
img.jpg
4
Loading a Web Page
index.html
script.js
img.jpg
Dependency Graph
Parse HTML
Execute script.js
Onload
GET 
a.com
HTML
GET 
script.js
script.js
GET 
img.jpg
img.jpg
Client
a.com
b.com
5
Waiting on CPU blocks network and vice versa
Parse HTML
Execute script.js
Onload
Key to fast page loads: 
Fully utilize CPU/network
Client
Network
Utilization
CPU
Utilization
6
Proxy Based Solution
GET a.com/index.html
Client
Web servers must aid client in 
Stream downloaded 
Proxy
resources
discovering resources
Fetch resources
Shortcomings
● Client must trust HTTPS content pushed by proxy
● Proxy needs access to user’s cookies for all domains
a.com
b.com
c.com
7
Challenges to approach
1. How can web servers discover dependencies?
2. How do web servers inform clients of discovered 
dependencies?
3. How should clients use input from servers?
8
Challenges to approach
1. How can web servers discover dependencies?
2. How do web servers inform clients of discovered 
dependencies?
3. How should clients use input from servers?
9
Inefficient Page Load
index.html
script.js
img.jpg
Dependency Graph
Parse HTML
Execute script.js
Onload
GET 
a.com
HTML
GET 
script.js
script.js
GET 
img.jpg
img.jpg
Client
a.com
b.com
10
HTTP/2 Push
Dependency Graph
index.html
script.js
img.jpg
Parse HTML
Execute script.js
Onload
GET 
a.com
HTML
GET 
script.js
script.js
script.js
GET 
img.jpg
img.jpg
Client
a.com
b.com
11
Push Only Load
Dependency Graph
index.html
script.js
img.jpg
Parse HTML
Execute script.js
Onload
GET 
a.com
HTML
script.js
GET 
img.jpg
img.jpg
Client
a.com
b.com
12
Dependency Hints
index.html
script.js
img.jpg
Dependency Graph
Parse HTML
Execute script.js
Onload
GET 
a.com
HTML &
b.com/img.jpg
img.jpg
GET 
img.jpg
GET 
img.jpg
img.jpg
Client
a.com
b.com
13
Challenges to approach
1. How can web servers discover dependencies?
2. How do web servers inform clients of discovered 
dependencies?
● HTTP/2 Push + Dependency Hints
3. How should clients use input from servers?
14
Strawman Dependency Resolution
GET https://foo.com
Response + Push and Hints
foo.com
a.com
b.com
c.com
Drawbacks
● Back-to-back loads differ
● Server cannot account for personalization
15
Combined Offline-Online Discovery
GET https://foo.com
Response +
Push and Hints
foo.com
+
Parse
HTML 
Response
...
t0
t1
t2
● Stable dependencies: Intersection of offline loads
● Dynamic Content: Online Parsing of HTML
16
Personalized Dependencies from Third-party Domains
Start
Personalized 
Content?
17
Challenges to approach
1. How do web servers discover dependencies?
● Combine offline and online + Defer to third parties
2. How do web servers inform clients of discovered 
dependencies?
● HTTP/2 Push + Dependency Hints
3. How do clients use input from servers?
18
Need for Scheduling
● No speedup with “Push All + Fetch ASAP”
○ Contention for access link bandwidth stalls processing
● Prioritize pushes and fetches of HTML, CSS, and JS
○ Schedule in order of processing
○ Account for 20% of bytes on average
19
Vroom scheduler in action
Fetch all HTML, JS, CSS 
Fetch other dependencies
Parse HTML and CSS, Execute JS
T=0
Onload
20
Results overview
● Accuracy of dependency discovery
○ Median: 0% false positives and < 5% false negatives
● Improvements in client perceived performance
○ Speedup over status quo
○ Simple strawmans don't suffice
○ Speedup even with warm caches
21
Results overview
● Accuracy of dependency discovery
○ Median: 0% false positives and < 5% false negatives
● Improvements in client perceived performance
○ Speedup over status quo
○ Simple strawmans don't suffice
○ Speedup even with warm caches
22
Evaluation Setup
23
Vroom makes page loads much faster
10s
Alexa top 50 news and 50 sports sites
24
Vroom makes page loads much faster
7.5s
10s
25
Vroom makes page loads much faster
5s
7.5s
7.5s
10s
10s
26
Vroom makes page loads much faster
5s
7.5s
10s
27
Vroom makes page loads much faster
Visual Improvement
5s
● Vroom also significantly reduces above-the-fold time
7.5s
10s
Incremental Deployment
● Most of Vroom’s benefits achievable with first-party adoption
28
Conclusion
● Vroom: End-to-end solution that fully utilizes CPU/Network
● Decouples dependency discovery from parsing and execution
● Decreases median page load time by 5s for popular sites
29