title:Tappan Zee (north) bridge: mining memory accesses for introspection
author:Brendan Dolan-Gavitt and
Tim Leek and
Josh Hodosh and
Wenke Lee
Tappan Zee (North) Bridge: Mining Memory Accesses for
Introspection
Brendan Dolan-Gavitt
Georgia Tech
PI:EMAIL
Tim Leek
MIT Lincoln Laboratory
PI:EMAIL
Josh Hodosh
MIT Lincoln Laboratory
PI:EMAIL
Wenke Lee
Georgia Tech
PI:EMAIL
ABSTRACT
The ability to introspect into the behavior of software at
runtime is crucial for many security-related tasks, such as
virtual machine-based intrusion detection and low-artifact
malware analysis. Although some progress has been made in
this task by automatically creating programs that can pas-
sively retrieve kernel-level information, two key challenges
remain. First, it is currently diﬃcult to extract useful infor-
mation from user-level applications, such as web browsers.
Second, discovering points within the OS and applications
to hook for active monitoring is still an entirely manual
process.
In this paper we propose a set of techniques to
mine the memory accesses made by an operating system
and its applications to locate useful places to deploy active
monitoring, which we call tap points. We demonstrate the
eﬃcacy of our techniques by ﬁnding tap points for useful
introspection tasks such as ﬁnding SSL keys and monitor-
ing web browser activity on ﬁve diﬀerent operating systems
(Windows 7, Linux, FreeBSD, Minix and Haiku) and two
processor architectures (ARM and x86).1
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Design, Security
Keywords
Introspection; active monitoring; reverse engineering
1This work is sponsored by the Assistant Secretary of De-
fense for Research & Engineering under Air Force Contract
#FA8721-05-C-0002. Opinions, interpretations, conclusions
and recommendations are those of the author and are not
necessarily endorsed by the United States Government.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516697 .
1.
INTRODUCTION
Many security applications have a need to inspect the in-
ternal workings of software. Host-based intrusion detection
systems, malware analyses, and digital forensics all depend
to some degree on being able to obtain information about
software that is by design undocumented and hidden from
public view. Thus, to operate correctly, security software is
typically built on reverse engineering, the art and practice of
elucidating the undocumented principles on which software
is built.
Unfortunately, reverse engineering is expensive, time con-
suming, and requires a high degree of expertise. The prob-
lem is exacerbated by the fact that, to protect against tam-
pering, security applications are often hosted in environ-
ments separated from the target being inspected, such as
a separate virtual machine. Because of this, their visibility
into the target is often limited to low-level features such as
memory and CPU state, and any higher-level information
must be reconstructed based on reverse engineered knowl-
edge.
This problem, which we will refer to as the introspection
problem, has been approached by a number of recent re-
search eﬀorts such as Virtuoso [11] and VMST [12]. Exist-
ing systems, however, have a number of limitations. First,
they focus on retrieving kernel-level information. However,
a great deal of security-relevant information exists only at
user-level, such as URLs being visited by the browser, in-
stant messages and emails sent by desktop clients, and sys-
tem and application log messages. Second, they require that
the desired information be accessible through some public in-
terface (a public API in the case of Virtuoso, and a userland
program or kernel module in the case of VMST). This means
that some security-relevant information may be inaccessible
to such tools. Finally, Payne et al. [25] argue that many
security applications need some form of active monitoring;
that is, they need to be notiﬁed when certain system events
occur. Current solutions to the introspection problem pro-
vide no way of locating places in the system where it would
be useful to interpose.
In this paper, we attempt to address the limitations of past
solutions by examining a rich source of information about
system and application activity: memory accesses observed
at runtime. Our key insight is that a memory accesses made
at diﬀerent points in a program can be treated as streams
of related information. For example, when visiting a URL,
a web browser must write to memory the URL that is be-
839ing visited, and it will generally do so at the same point
in the program. By intercepting memory accesses made at
this program point we can observe all URLs visited. These
program points, which we call tap points, provide a natural
place to interpose to extract security-relevant information,
and could be integrated into an active monitoring system
such as Lares [25].
There are several challenges that must be overcome to
make use of tap points. The ﬁrst is the sheer amount of
data that must be sifted through.
In ten minutes’ worth
of execution on a Windows 7 system, for example, we ob-
served a total of 18.9 million unique tap points which read
and wrote a total of 32.8 gigabytes of data. To overcome
this challenge, we make use of techniques from information
retrieval and machine learning, described in Section 4, to
quickly zero in on the tap points that read or write informa-
tion relevant to introspection.
Second, simply setting up an environment in which one
can observe every memory access made by the whole sys-
tem (OS and applications) poses a challenge. Whole-system
emulators such as QEMU [4] provide the necessary basis for
such instrumentation, but intercepting and analyzing every
memory access online is not practical: the resulting sys-
tem is so slow that network connections time out and the
guest OS may think that programs have become unrespon-
sive. To solve this problem, we add record and replay to
QEMU, which allows executions to be recorded with low
overhead. Our heavyweight analyses are then run on the
replayed execution to analyze every memory access made
without perturbing the system under inspection. We de-
scribe our system, Tappan Zee Bridge (TZB),2 in detail in
Section 5.
Finally, previous systems have required signiﬁcant eﬀort
to support new architectures. This problem has become
more pressing in recent years, as ARM-based devices such
as smartphones have exploded in popularity. Because TZB
looks at memory accesses, rather than inspecting binary
code, it naturally supports a wide variety of architectures
with minimal eﬀort. To demonstrate this, our evaluation
includes the ARM architecture in addition to x86, and the
techniques we describe easily generalize to other architec-
tures.
The remainder of this paper is structured as follows. Sec-
tion 2 precisely deﬁnes what a tap point is. We then ex-
plore that deﬁnition and its impact on the scope of our work
and the assumptions it rests on in Section 3. Section 4 de-
scribes techniques for ﬁnding tap points of interest. We
then discuss our system, Tappan Zee Bridge (TZB), which
implements these techniques, as well as PANDA (Platform
for Architecture-Neutral Dynamic Analysis), a new dynamic
analysis platform on which TZB is built, in Section 5. We
evaluate TZB in Section 6, and show that it is capable of
ﬁnding tap points useful for introspection in a wide variety of
applications, operating systems, and architectures. Finally,
we describe the limitations of our approach in Section 7, re-
lated work in this area in Section 8, and oﬀer concluding
remarks in Section 9.3
Figure 1: Three diﬀerent ways of deﬁning a tap
point: (a) as a single stream of information from the
CPU to RAM ; (b) split up according to program
and location within program ; (c) split up accord-
ing to program, location within program, and calling
context.
2. DEFINING TAP POINTS
At the heart of our approach is an abstraction on top of
memory accesses made by the CPU, the tap point. A tap
point is a point in a system at which we wish to capture a
series of memory accesses for introspection purposes; how-
ever, the exact deﬁnition of “a point in a system” will make
a great deal of diﬀerence in how eﬀective our approach can
be.
A naive approach to deﬁning tap points would be to sim-
ply group memory accesses by the program counter that
made them (e.g., EIP/RIP on x86 and R15 on ARM). This
approach fails in two common cases: ﬁrst, memory accesses
made by bulk copy functions, such as memcpy and strcpy,
would all be grouped together, which would commingle data
from diﬀerent parts of the program into the same tap point.
In addition, looking only at the program counter would con-
ﬂate accesses from diﬀerent programs.
Instead, we deﬁne tap points as the triple
(caller, program counter, address space)
Including the caller and the address space (the CR3 register
on x86, and the CP15 c2 register on ARM) separates out
memory accesses into streams that should, in general con-
tain the same type of data.4 Figure 1 shows the eﬀect of
choosing various deﬁnitions of a tap point when looking for
the place where the browser writes the URL entered by the
user (“google.com”). At the coarsest granularity (a), one can
simply look at all writes from the CPU to RAM; however,
the desired information is buried among reams of irrelevant
data. Separating out tap points by program and program
counter (b) is better, but still combines uses of strcpy that
contain diﬀerent information — in this case, a ﬁlename and
a URL. By including the calling context (c), we can ﬁnally
obtain a tap point that contains just the desired information.
2So named because the northbridge on Intel architectures
traditionally carried data between the CPU and RAM.
3All software described in this paper (i.e. PANDA and TZB)
is open source and can be downloaded at http://github.
com/moyix/panda/.
4Making use of tap points deﬁned this way in the real world
is slightly more diﬃcult, since a program’s address space
will diﬀer and its code may be relocated by ASLR. These
complications can be overcome with a minor amount of en-
gineering, however.
00a3bdgoogle.comr2ab.tmpa2bcgoogle.comr2ab.tmp00a3bda2bcstrcpymemcpygoogle.com00a3bda2bcstrcpy←open_urlmemcpyr2ab.tmpstrcpy←open_ﬁle(a)(b)(c)840It is possible that some tap points may require deeper in-
formation about the calling context (for example, if an ap-
plication has its own wrapper around memcpy), but in prac-
tice we have found that just one level of calling context is
usually suﬃcient. In addition, because TZB uses a whole-
system emulator that can watch every call and return, we
can obtain the call stack to an arbitrary depth for any tap
point. This makes it easy to add extra context for a given
tap point, if it is found that doing so separates out the de-
sired information. Examples of tap points that require more
than one level of callstack information are given in Sections
6.1.2 and 6.1.3.
Conversely, one might wonder whether this deﬁnition of
a tap point may split up data that should logically be kept
together. To mitigate this problem case, we introduce the
idea of correlated tap points: we can run a pass over the
recorded execution that notices when two tap points write
to adjacent locations in memory in a short period of time
(currently 5 memory accesses). The idea is that these tap
points may be more usefully considered jointly; for example,
a single data structure may have its ﬁelds set by successive
writes. These writes would come from diﬀerent program
counters, and hence would be split into diﬀerent tap points,
but it may be more useful to examine the data structure as a
whole. By noticing this correlation we can analyze the data
from the combined tap point.
3. SCOPE AND ASSUMPTIONS
The goal of Tappan Zee Bridge is to ﬁnd points at which
to interpose for active monitoring. More precisely, our goal
is to speed the current entirely manual process by which
applications or operating systems are reverse engineered in
order to locate tap points for active monitoring. It should
be noted that we do not aim to surpass those manual ef-
forts. We have no automatic way, for instance, of knowing
for certain if a tap point will fail to output crucial data or,
alternately, spew out superﬂuous information under some
future conditions. This is a separate problem to which we
see no ready solution. Static analysis of candidate tap points
or extensive testing are good stop-gaps, but nothing short of
fully understanding enormous binary code bases can really
give complete assurance that a tap point won’t miss or cause
false alarms in the future.
In this section, we explore how our deﬁnition of a tap
point and our focus on active monitoring shape the scope of
our work.
First and most obviously, our focus on memory accesses
necessarily limits our scope to information that is read from
or written to RAM at some point. Although this is quite
broad, there are notable exceptions. For example, TRE-
SOR [24] performs AES encryption without storing the key
or encryption states in RAM by making clever use of the x86
debug registers and the AES-NI instruction set. Aside from
such special cases, however, this assumption is not particu-
larly limiting.
Second, our goal of ﬁnding tap points suitable for active
monitoring motivates a design that treats memory accesses
at tap points as sources of streaming data. Our algorithms,
therefore, typically work in a streaming fashion as the sys-
tem executes, remembering only a ﬁxed amount of state for
each tap point. Although this is a natural ﬁt for active mon-
itoring, where events should be reported as soon as possible,
Figure 2: Patterns of memory access that we might
wish to monitor using TZB.
it makes handling data whose spatial order in memory diﬀers
from its temporal order as it is accessed more diﬃcult.
Third, the encoding of the data sought must be to some
extent guessable. For example, to search for a string, one
must know what encodings are likely to be used by the sys-
tem to represent strings.
In general this is not a severe
limitation, but it does come up; we discuss one such case in
Section 6.2.2.
Finally, the use of calling context in the deﬁnition of a tap
point raises the question of how much context is necessary or
useful. Our current system uses only the most recent caller,