Summary: REGEXNET is resilient against all kinds of—
i.e., reﬂected vs. stored and normal vs. adaptive—ReDoS
attacks against different vulnerable regular expressions in
terms of throughput and latency.
B. RQ2: Recovery Speed under Known and Unknown Attacks
In this research question, we evaluate how fast REGEXNET
can recover web services under ReDoS attacks, especially
those zero-day ones. Note that REGEXNET uses a combination
of ofﬂine and online training—the DNN model is trained
with known attacks ofﬂine, and continuously updated with an
online feedback loop for zero-day attacks. We show how this
combination enables REGEXNET to quickly react to ReDoS
attacks on both known and unknown vulnerabilities.
In this experiment, the adversary launches a dynamic Re-
DoS attack that
targets at different ReDoS vulnerabilities
over time. Speciﬁcally, at time 10 seconds, it begins to send
malicious requests which target the vulnerability in the fresh
module for 20 seconds. Then it pauses for 10 seconds, and at
time 40 seconds, it changes to send malicious requests on the
vulnerability in the charset module for 20 seconds. After
another pause of 10 seconds, it changes to send malicious
requests on the ua-parser-js module for 20 seconds.
During the attack, the malicious load is set to 60 RPM, and
the maximum message size is set to 30 KB for fresh and
charset and 128 B for ua-parser-js. Fig. 9(a) shows
the system throughput without REGEXNET under this dynamic
attack. We can see that the throughput drops signiﬁcantly when
the adversary generates malicious requests targeted at the three
vulnerabilities during time 10–30 seconds, 40–60 seconds, and
70–90 seconds. The extra duration with low throughput for
60–65 seconds is due to the queued malicious attacks.
Only with ofﬂine training, the system is able to handle
known attacks, but cannot handle unknown ones. Fig. 9(b)
shows
the system throughput with
REGEXNET, which is only trained with the vulnerability of the
fresh module ofﬂine, but do not do any adaptation online.
the time series of
Fig. 10.
REGEXNET and Rampart respectively.
System performance under different malicious loads, with
At time 10-30 seconds, the attack on the fresh module
is launched, and REGEXNET is able to recover the system
throughput to 44K RPM, as REGEXNET has already learned
the attack pattern by ofﬂine training. For the attack on the
charset module , although REGEXNET has not been trained
on this module, because the attack pattern of the charset
module is similar to that of the fresh module, REGEXNET
is still able to recover the system. However, at time 70-90
seconds, because the attack pattern of the ua-parser-js
module is different and the system does not train the model
online, the system cannot handle this unknown attack and the
performance drops to 24K RPM.
With online training, the system is able to adapt to unknown
attacks. Fig. 9(c) shows the time series of the system through-
put with REGEXNET, using only online training to handle
attacks. With the online feedback loop, REGEXNET can learn
the patterns of all three attacks, even if the model has not been
trained for them ofﬂine. The system throughput can achieve
about 40K RPM if the dynamic, zero-day attack happens. For
all the three vulnerabilities, REGEXNET can use its online
feedback loop to recover the system throughput in sub-minute.
Finally, we show the beneﬁts of both ofﬂine and online
training. Fig. 9(d) shows the time series of the system through-
put with REGEXNET, which is trained with the vulnerability
of the fresh module ofﬂine, and uses the online feedback
loop to update the model at runtime. Because the attack pattern
of the fresh module at time 10-30 seconds has already been
learned by REGEXNET ofﬂine, the system is able to directly
recover, without the delay to collect data and update the model
as in Fig. 9(c). Since the attack pattern of the charset
module is similar to that of the fresh module, the system is
also able to quickly recover. At time 70-90 seconds, the attack
pattern of the ua-parser-js module is different and has
not been learned. REGEXNET quickly learns the attack and
shows nearly no performance loss.
Summary: REGEXNET can quickly recover web services
under zero-day ReDoS attacks within a minute.
C. RQ3: Comparison with State of the Art
In this research question, we compare REGEXNET with
the state-of-the-art reactive defense, Rampart [11], against
reﬂected ReDoS attacks. While Rampart
is able to block
future attacks by recording some information from malicious
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1584
020406080100Time (s)0k20k40k60kThroughput (RPM)freshcharsetua-parser-js020406080100Time (s)0k20k40k60kThroughput (RPM)freshcharsetua-parser-js020406080100Time (s)0k20k40k60kThroughput (RPM)freshcharsetua-parser-js020406080100Time (s)0k20k40k60kThroughput (RPM)freshcharsetua-parser-js020406080100Malicious Load (RPM)0.00.20.40.60.81.0Throughput (Normalized)RegexNetRampart(a) Throughput vs. malicious load.
(b) Latency vs. malicious load.
Fig. 11. System performance under different malicious loads, with and
without REGEXNET.
(a) Throughput vs. message size.
(b) Latency vs. message size.
Fig. 12. System performance under different message sizes, with and without
REGEXNET.
requests like IP addresses, the attacker could easily circumvent
Rampart by using different IPs for each malicious request.
Consequently, Rampart can only detect ongoing attacks and
stop them, and thus performs worse than REGEXNET.
Fig. 10 shows this result. The numbers of CPU cores for
Node.js and PHP are both set to 1. For a fair comparison,
we use normalized throughput, because they have different
implementations (Node.js vs. PHP). In addition, the maximum
message size is set to 30 KB for REGEXNET and 40 KB
for Rampart, because such malicious requests consume ap-
proximately the same CPU time for each implementation. We
can see that the throughput of Rampart decreases signiﬁcantly
when the malicious load increases, and drops to one-tenth with
a malicious load of 100 RPM. On the contrary, the throughput
of REGEXNET drops little even with high malicious load.
Summary: REGEXNET signiﬁcantly outperforms Ram-
parts as the malicious load increases.
D. RQ4: Different Malicious Payloads and Message Sizes
In this research question, we evaluate the throughputs and
latencies of REGEXNET under different malicious payloads
and message sizes Speciﬁcally, we inject a ReDoS attack on
the fresh module, and measure the throughput and latency
without and with REGEXNET.
Effectiveness under different malicious loads. Fig. 11 shows
the throughput and latency of the web service under different
malicious loads. The maximum message size is set to 30
KB. When there is no malicious load,
the throughput of
REGEXNET is nearly the same as that of the baseline (i.e.,
without REGEXNET). It means that the shim layer introduces
negligible overhead. The throughput of the baseline drops to
one-third when the malicious load is just 40 RPM, and drops
to almost 0 when the malicious load is 60 RPM. Accordingly,
the latency of the baseline grows quickly with the increase of
the malicious load. This result conﬁrms the serious damage
that can be caused by ReDoS attacks in previous work [4],
[5], as an adversary only needs a small number of malicious
requests to take down a web service. Note that we do not
show latencies for malicious loads greater than 60, because in
this case the server is overloaded and the latency will increase
to arbitrarily large. In comparison, REGEXNET can maintain
throughput and latency even under a heavy malicious load.
Effectiveness under different message sizes. Fig. 12 shows
the system performance under different maximum message
sizes. The load of malicious requests is set to 60 RPM. The
adversary uses a uniform distribution to choose a size close
to but no greater than the maximum message size for each
malicious request. We avoid setting the size to the maximum
size for all malicious requests as this would make the attack
easily identiﬁable. As it takes super-linear time for the regular
expression engine to match a malicious request, the bigger
the message size is, the longer CPU time the request is going
to consume. This intuition is conﬁrmed by the behavior of
the baseline. The throughput of the baseline halves when the
message size is 20KB, and drops to almost 0 when the message
size is 30 KB. The latency also increases signiﬁcantly. Similar
to Fig. 11(b), we do not show latency for message sizes greater
than 30 KB due to an arbitrarily large value. REGEXNET
can maintain high throughput and low latency even when
the message size is 50 KB. We want to emphasize that the
vulnerability in the fresh module is quadratic, so it requires
a relatively large message size to take down the service. It is
possible that a web service can limit the request size to handle
such attacks. However, limiting the request size is not always
an option, as some web services do allow large requests,
e.g., receiving product reviews on e-commerce sites, and more
importantly, there are vulnerabilities that are exponential.
Summary: The throughput of REGEXNET decreases
very slowly and the latency stays almost the same as
the malicious load and message sizes increase.
E. RQ5: DNN’s Accuracy
In this research question, we evaluate the accuracy of the
DNN model adopted by REGEXNET. We ﬁrst create datasets
to test the accuracy of the classiﬁer in typical scenarios, and
then test the classiﬁer with imbalanced and polluted datasets.
Dataset generation. For each vulnerable module, the dataset
contains a training dataset and a test dataset, both of which
consist of samples labeled as benign or malicious. We insert
the corresponding ﬁeld into the header of a basic HTTP
request. For malicious samples, the content of the ﬁeld is
attacking content, which is crafted manually or generated by
ReScue [13]. For benign samples, the content of the ﬁeld is a
random string. The composition of the training dataset depends
on the experiment. The test dataset consists of 100 benign
samples and 100 malicious samples. Each iteration is to train
the model with a batch of size 64. Each batch consists of 32
malicious samples and 32 benign samples, which are selected
randomly from the training dataset and allow duplication.
Accuracy over imbalanced datasets. A typical scenario of
REGEXNET is to train the classiﬁer with real-time feedback,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1585
020406080100Malicious Load (RPM)0k20k40k60kThroughput (RPM)RegexNetBaseline020406080100Malicious Load (RPM)101102103Latency (ms)RegexNetBaseline01020304050Message Size (KB)0k20k40k60kThroughput (RPM)RegexNetBaseline01020304050Message Size (KB)101102103Latency (ms)RegexNetBaseline(a) fresh
(b) ua-parser-js
Fig. 13. Classiﬁcation accuracy for imbalanced datasets.
where there are a large number of benign samples and a small
number of malicious samples. To simulate such a scenario, we
test the accuracy of the classiﬁer over an imbalanced training
dataset, which consists of 1024 benign samples and a few
malicious samples. We test the classiﬁer for two vulnerable
modules, fresh and ua-parser-js. Fig. 13 shows that
the accuracy on the test dataset increases when the training
proceeds, and each curve means different numbers of mali-
cious samples in the training dataset. Since randomness plays
an important role in such a small number of iterations, the
reported accuracy is averaged over 100 runs. For fresh in
Fig. 13(a), the accuracy increases to more than 90% within
5 iterations for 8 or more malicious samples. Even for only
1 malicious sample, it can quickly converge to an accuracy
of more than 80%. For ua-parser-js in Fig. 13(b), the
accuracy increases to more than 90% in about 3 iterations
with 32 or more malicious samples. In addition, the accuracy
is more than 80% for only 8 malicious samples. However, the
curve for only 1 malicious sample shows overﬁtting and low
accuracy, because the pattern of the attacking messages of
ua-parser-js is more complicated than that of fresh.
In conclusion, this ﬁgure shows that the classiﬁer is able
to achieve high accuracy with a small number of malicious
samples, and the convergence takes only a couple of iterations.
Accuracy over polluted datasets. A challenging scenario is
that the attacker tries to pollute the training dataset. This can
be achieved by sending pollution requests which have the
same pattern as malicious requests but does not exceed the
running time due to the small size. For example, for fresh
module, a malicious request requires more than 20K spaces to
consume a signiﬁcant amount of CPU time, while a pollution
request might contain only thousands of spaces. Consequently,
the running time of these pollution requests does not exceed
the threshold, and will be labeled as benign to pollute the
training dataset. To show the performance of REGEXNET
under this type of attack, we add such pollution samples to
the training dataset and test the accuracy of the classiﬁer.
We use fresh module in this experiment. Similar to the
imbalanced dataset, we generate malicious requests and benign
requests to form the dataset. Besides, we generate pollution
requests as stated above, and mark them as benign samples.
The training dataset consists of 896 purely benign samples,
128 pollution samples (labeled as benign) and 32 malicious
samples. The validation dataset consists of 100 purely benign
samples and 100 malicious samples. Fig. 14 shows the result
of the classiﬁer over the polluted dataset. Each curve means a
different size for pollution requests. For example, 1K means
Fig. 14. Classiﬁcation accuracy for polluted datasets.
the size of the pollution requests is about 1K. We can see that
all curves for polluted datasets are very close to the curve for
No Pollution, which means that pollution does not affect the
training. In other words, REGEXNET is able to classify benign
and malicious requests under such pollutions.
Summary: The DNN used in REGEXNET is with >95%
accuracy even with imbalanced or polluted training
dataset and converges quickly under a few iterations.
VII. DISCUSSION
In this section, we discuss a few common questions that
is, all
people may have for REGEXNET.
HTTPS trafﬁc. REGEXNET is able to handle HTTPS traf-
ﬁc just like HTTP ones. The reason is that REGEXNET is
deployed at the load balancer of a website, a module for
distributing web requests at the application layer higher than
the transportation layer. That
the encrypted trafﬁc,
e.g., those transmitted in HTTPS, has already been decrypted
and available for analysis. Particularly, our implementation of
REGEXNET adopts HAProxy, an open-source load balancer
that supports the distribution of TLS/SSL connections.
Character encodings in malicious requests. REGEXNET
is able to detect malicious ReDoS attacks even if malicious
contents are encoded, e.g., replacing spaces with “%20”. The
reason is that after a few requests, the online feedback loop
of REGEXNET, just like in the case of an adaptive attack, will
capture the encoded attack pattern and update the DNN-based
detection module for the detection.
Cross-request states. REGEXNET does not change or affect
any cross-request states, especially those in the same session.
Even if only one request belonging to a session is migrated
and isolated, the request can still be correctly processed in
the sandbox. The reason is that even without REGEXNET,