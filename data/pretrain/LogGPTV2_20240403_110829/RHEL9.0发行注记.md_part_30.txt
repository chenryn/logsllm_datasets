    (`xccdf_org.ssgproject.content_profile_stig`{.literal})
-   DISA STIG with GUI for RHEL 9
    (`xccdf_org.ssgproject.content_profile_stig_gui`{.literal})
:::
在每个配置集中，以下两条规则会受到影响：
``` screen
Title: Set SSH Client Alive Count Max to zero
CCE Identifier: CCE-90271-8
Rule ID: xccdf_org.ssgproject.content_rule_sshd_set_keepalive_0
Title: Set SSH Idle Timeout Interval
CCE Identifier: CCE-90811-1
Rule ID: xccdf_org.ssgproject.content_rule_sshd_set_idle_timeout
```
当应用到 SSH
服务器时，每个规则都会配置一个选项（`ClientAliveCountMax`{.literal} 和
`ClientAliveInterval`{.literal}），它们不再像之前一样运作。因此，当
OpenSSH 达到这些规则配置的超时时，OpenSSH 不再断开空闲的 SSH
用户。作为临时解决方案，这些规则已从 DISA STIG for RHEL 9 和 RHEL 9
配置集的 DISA STIG 中临时删除，直到开发解决方案为止。
([BZ#2038978](https://bugzilla.redhat.com/show_bug.cgi?id=2038978){.link})
[]{#known-issues.html#BZ-2070655}
::: title
**`fagenrules --load`{.literal} 无法正常工作**
:::
`fapolicyd`{.literal} 服务无法正确处理信号挂起(SIGHUP)。因此，在收到
SIGHUP 信号后 `fapolicyd`{.literal}
会终止。因此，`fagenrules --load`{.literal}
命令无法正常工作，规则更新需要手动重启
`fapolicyd`{.literal}。要临时解决这个问题，在规则中的任何更改时重启
`fapolicyd`{.literal} 服务，因此 `fagenrules --load`{.literal}
可以正常工作。
([BZ#2070655](https://bugzilla.redhat.com/show_bug.cgi?id=2070655){.link})
:::
::: section
::: titlepage
# []{#known-issues.html#known-issue_networking}网络 {.title}
:::
[]{#known-issues.html#BZ-1931284}
::: title
**内核命令行中的空 `rd.znet`{.literal} 选项会导致网络配置失败**
:::
内核中的 `rd.znet`{.literal}
选项没有任何参数，如网络类型或子频道无法配置网络。要临时解决这个问题，可完全从命令行中删除
`rd.znet`{.literal}
选项，或者指定相关的网络类型、子频道和其他相关选项。有关这些选项的详情请参考
`dracut.cmdline(7)`{.literal} man page。
(BZ#1931284)
[]{#known-issues.html#BZ-2013650}
::: title
**更新会话密钥失败会导致连接中断**
:::
内核传输层安全(kTLS)协议不支持更新会话密钥，这些密钥由对称密码使用。因此，用户无法更新密钥，从而导致连接中断。要临时解决这个问题，请禁用
kTLS。因此，解决这一问题，可以成功更新会话密钥。
(BZ#2013650)
[]{#known-issues.html#BZ-2082303}
::: title
**默认情况下不安装 `initscripts`{.literal} 软件包**
:::
默认情况下，不会安装 `initscripts`{.literal} 软件包。因此，if
`up`{.literal} 和 `ifdown`{.literal} 工具不可用。或者，使用
`nmcli 连接 up`{.literal} 和 `nmcli connection down`{.literal}
命令来启用和禁用连接。如果推荐的替代方法无法为您报告问题并安装
`NetworkManager-initscripts-updown`{.literal} 软件包，该软件包为
`ifup`{.literal} 和 `ifdown`{.literal} 工具提供了一个 NetworkManager
解决方案。
([BZ#2082303](https://bugzilla.redhat.com/show_bug.cgi?id=2082303){.link})
[]{#known-issues.html#BZ-2079849}
::: title
**在 Alibaba Cloud 中启动 nm-cloud-setup 服务后，实例的主要 IP
地址会改变**
:::
在 Alibaba Cloud 中启动实例后，`nmn-cloud-setup`{.literal} 服务会将主 IP
地址分配给实例。但是，如果您为实例分配多个二级 IP 地址并启动
`nm-cloud-setup`{.literal} 服务，则前一个主 IP
地址被替换为已经分配的二级 IP
地址之一。返回的元数据列表会验证相同的。要临时解决这个问题，请手动配置二级
IP 地址以避免主 IP 地址更改。因此，实例同时保留 IP 地址和主 IP
地址不会改变。
([BZ#2079849](https://bugzilla.redhat.com/show_bug.cgi?id=2079849){.link})
:::
::: section
::: titlepage
# []{#known-issues.html#known-issue_kernel}内核 {.title}
:::
[]{#known-issues.html#BZ-1894783}
::: title
**`kdump`{.literal} 无法在 RHEL 9 内核中启动**
:::
RHEL 9 内核没有将 `crashkernel=auto`{.literal}
配置为默认值。因此，`kdump`{.literal} 服务默认无法启动。
要临时解决这个问题，请将 `crashkernel=`{.literal} 选项配置为所需的值。
例如，要使用 `grubby`{.literal} 实用程序保留 256 MB 内存，请执行：
``` screen
grubby --args crashkernel=256M --update-kernel ALL
```
因此，RHEL 9 内核会启动 `kdump`{.literal}，并使用配置的内存大小值转储
`vmcore`{.literal} 文件。
(BZ#1894783)
[]{#known-issues.html#BZ-2017401}
::: title
**`kdump`{.literal} 机制无法捕获 LUKS 加密目标中的 `vmcore`{.literal}
文件**
:::
当在使用 Linux Unified Key Setup(LUKS)加密分区的系统中运行
`kdump`{.literal}
时，系统需要特定的可用内存。当可用内存小于所需内存量时，`systemd-cryptsetup`{.literal}
服务将无法挂载分区。因此，第二个内核无法在 LUKS
加密目标上捕获崩溃转储文件(`vmcore`{.literal})。
使用 `kdumpctl estimate`{.literal} 命令，您可以查询
`推荐的 crashkernel 值`{.literal}，这是
`kdump`{.literal}所需的推荐内存大小
要解决这个问题，请按照以下步骤在 LUKS 加密目标中为 `kdump`{.literal}
配置所需的内存：
::: orderedlist
1.  输出估计 `crashkernel`{.literal} 值：
    ``` screen
    # kdumpctl estimate
    ```
2.  通过增大 `crashkernel`{.literal} 值来配置所需的内存量：
    ``` screen
    # grubby --args=”crashkernel=652M” --update-kernel=ALL
    ```
3.  重启系统以使更改生效。
    ``` screen
    # reboot
    ```
:::
因此，`kdump`{.literal} 在带有 LUKS 加密分区的系统中可以正常工作。
(BZ#2017401)
[]{#known-issues.html#BZ-2065013}
::: title
**在引导时分配崩溃内核内存失败**
:::
在某些 Ampere Altra 系统中，在可用内存低于 1GB 时为 `kdump`{.literal}
用量分配崩溃内核内存会失败。因此，`kdumpctl`{.literal} 命令无法启动
`kdump`{.literal} 服务，因为所需内存大于可用内存。
要解决这个问题，至少将 `crashkernel`{.literal} 参数的值降低为
240M，以满足 `kdump`{.literal} 的大小要求，如下所示：
``` screen
# crashkernel=240M
```
因此，为 `kdump`{.literal} 分配崩溃内核内存在 Ampere Altra
系统中可以正常工作。
([BZ#2065013](https://bugzilla.redhat.com/show_bug.cgi?id=2065013){.link})
[]{#known-issues.html#BZ-2000616}
::: title
**KTLS 不支持将 TLS 1.3 卸载到 NIC**
:::
内核传输层安全(kTLS)不支持将 TLS 1.3 卸载到 NIC。因此，即使 NIC 支持 TLS
卸载，软件加密也会与 TLS 1.3
一起使用。要临时解决这个问题，如果需要卸载，禁用 TLS
1.3。因此，您只能卸载 TLS 1.2。当使用 TLS 1.3 时，性能较低，因为无法卸载
TLS 1.3。
(BZ#2000616)
:::
::: section
::: titlepage
# []{#known-issues.html#known-issue_boot-loader}引导装载程序 {.title}
:::
[]{#known-issues.html#BZ-1969362}
::: title
**新内核丢失了以前的命令行选项**
:::
GRUB
引导装载程序不会将之前配置的内核命令行选项应用到新内核。因此，当您升级内核软件包时，因为缺少选项，系统在重启后可能会改变。
要临时解决这个问题，请在每次内核升级后手动添加所有自定义内核命令行选项。因此，内核会如预期应用自定义选项，直到下一个内核升级为止。
([BZ#1969362](https://bugzilla.redhat.com/show_bug.cgi?id=1969362){.link})
:::
::: section
::: titlepage
# []{#known-issues.html#known-issue_file-systems-and-storage}文件系统和存储 {.title}
:::
[]{#known-issues.html#BZ-2033080}
::: title
**NVMe/TCP 不支持设备映射器多路径**
:::
使用带有 `nvme-tcp`{.literal} 驱动程序的设备映射器多路径可能会导致 Call
Trace 警告和系统不稳定。要临时解决这个问题，NVMe/TCP 用户必须启用原生
NVMe 多路径，且不能在 NVMe 中使用 `device-mapper-multipath`{.literal}
工具。
默认情况下，RHEL 9 中启用了原生 NVMe 多路径。如需更多信息，[请参阅在
NVMe 设备
上启用多路径](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_storage_devices/index#native-nvme-multipathing-and-dm-multipath_enabling-multipathing-on-nvme-devices){.link}。
(BZ#2033080)
[]{#known-issues.html#BZ-2011699}
::: title
**`blk-availability systemd`{.literal} 服务取消激活复杂设备堆栈**
:::
在 `systemd`{.literal}
中，默认块取消激活代码并不总是正确处理虚拟块设备的复杂堆栈。在一些配置中，在关闭过程中可能无法删除虚拟设备，从而导致错误信息被记录。要临时解决这个问题，请执行以下命令取消激活复杂块设备堆栈：
``` literallayout
# systemctl enable --now blk-availability.service
```
因此，在关闭过程中可以正确地取消激活复杂的虚拟设备堆栈，且不会生成错误消息。
(BZ#2011699)
[]{#known-issues.html#BZ-2069758}
::: title
**support `_speeds`{.literal}无效的 `sysfs`{.literal} 值**
:::
`qla2xxx`{.literal} 驱动程序报告 20Gb/s，而不是预期的 64Gb/s 作为
`sysfs supported_speeds`{.literal} 属性中支持的端口速度之一：
``` literallayout
$ cat /sys/class/fc_host/host12/supported_speeds
16 Gbit, 32 Gbit, 20 Gbit
```
因此，如果 HBA 支持 64Gb/s 链接速度，`sysfs support_speeds`{.literal}
值不正确。这只会影响 `sysfs`{.literal} 的 `supported_speeds`{.literal}
值，端口在预期的协商链接率中运行。
(BZ#2069758)