# 【系列分享】QEMU内存虚拟化源码分析
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[Terenceli @ 360 Gear
Team](http://bobao.360.cn/member/contribute?uid=2612165517)
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**传送门**
[**【系列分享】探索QEMU-KVM中PIO处理的奥秘**](http://bobao.360.cn/learning/detail/4079.html)
内存虚拟化就是为虚拟机提供内存，使得虚拟机能够像在物理机上正常工作，这需要虚拟化软件为虚拟机展示一种物理内存的假象，内存虚拟化是虚拟化技术中关键技术之一。qemu+kvm的虚拟化方案中，内存虚拟化是由qemu和kvm共同完成的。qemu的虚拟地址作为guest的物理地址，一句看似轻描淡写的话幕后的工作确实非常多，加上qemu本身可以独立于kvm，成为一个完整的虚拟化方案，所以其内存虚拟化更加复杂。本文试图全方位的对qemu的内存虚拟化方案进行源码层面的介绍。本文主要介绍qemu在内存虚拟化方面的工作,之后的文章会介绍内存kvm方面的内存虚拟化。
**零. 概述**
内存虚拟化就是要让虚拟机能够无缝的访问内存，这个内存哪里来的，qemu的进程地址空间分出来的。有了ept之后，CPU在vmx non-root状态的时候进行内存访问会再做一个ept转换。在这个过程中，qemu扮演的角色。1. 首先需要去申请内存用于虚拟机； 2.
需要将虚拟1中申请的地址的虚拟地址与虚拟机的对应的物理地址告诉给kvm，就是指定GPA->HVA的映射关系；3.
需要组织一系列的数据结构去管理控制内存虚拟化，比如，设备注册需要分配物理地址，虚拟机退出之后需要根据地址做模拟等等非常多的工作，由于qemu本身能够支持tcg模式的虚拟化，会显得更加复杂。
首先明确内存虚拟化中QEMU和KVM工作的分界。KVM的ioctl中，设置虚拟机内存的为KVM_SET_USER_MEMORY_REGION，我们看到这个ioctl需要传递的参数是:
    /* for KVM_SET_USER_MEMORY_REGION */
    struct kvm_userspace_memory_region {
        __u32 slot;
        __u32 flags;
        __u64 guest_phys_addr;
        __u64 memory_size; /* bytes */
        __u64 userspace_addr; /* start of the userspace allocated memory */
    };
这个ioctl主要就是设置GPA到HVA的映射。看似简单的工作在qemu里面却很复杂，下面逐一剖析之。
**一. 相关数据结构**
首先，qemu中用AddressSpace用来表示CPU/设备看到的内存，一个AddressSpace下面包含多个MemoryRegion，这些MemoryRegion结构通过树连接起来，树的根是AddressSpace的root域。
    struct AddressSpace {
        /* All fields are private. */
        struct rcu_head rcu;
        char *name;
        MemoryRegion *root;
        int ref_count;
        bool malloced;
        /* Accessed via RCU.  */
        struct FlatView *current_map;
        int ioeventfd_nb;
        struct MemoryRegionIoeventfd *ioeventfds;
        struct AddressSpaceDispatch *dispatch;
        struct AddressSpaceDispatch *next_dispatch;
        MemoryListener dispatch_listener;
        QTAILQ_HEAD(memory_listeners_as, MemoryListener) listeners;
        QTAILQ_ENTRY(AddressSpace) address_spaces_link;
    };
    struct MemoryRegion {
        Object parent_obj;
        /* All fields are private - violators will be prosecuted */
        /* The following fields should fit in a cache line */
        bool romd_mode;
        bool ram;
        bool subpage;
        bool readonly; /* For RAM regions */
        bool rom_device;
        bool flush_coalesced_mmio;
        bool global_locking;
        uint8_t dirty_log_mask;
        RAMBlock *ram_block;
        ...
        const MemoryRegionOps *ops;
        void *opaque;
        MemoryRegion *container;
        Int128 size;
        hwaddr addr;
        ...
        MemoryRegion *alias;
        hwaddr alias_offset;
        int32_t priority;
        QTAILQ_HEAD(subregions, MemoryRegion) subregions;
        QTAILQ_ENTRY(MemoryRegion) subregions_link;
        QTAILQ_HEAD(coalesced_ranges, CoalescedMemoryRange) coalesced;
        ...
    };
MemoryRegion有多种类型，可以表示一段ram，rom，MMIO，alias，alias表示一个MemoryRegion的一部分区域，MemoryRegion也可以表示一个container，这就表示它只是其他若干个MemoryRegion的容器。在MemoryRegion中，'ram_block'表示的是分配的实际内存。
    struct RAMBlock {
        struct rcu_head rcu;
        struct MemoryRegion *mr;
        uint8_t *host;
        ram_addr_t offset;
        ram_addr_t used_length;
        ram_addr_t max_length;
        void (*resized)(const char*, uint64_t length, void *host);
        uint32_t flags;
        /* Protected by iothread lock.  */
        char idstr[256];
        /* RCU-enabled, writes protected by the ramlist lock */
        QLIST_ENTRY(RAMBlock) next;
        int fd;
        size_t page_size;
    };
在这里，'host'指向了动态分配的内存，用于表示实际的虚拟机物理内存，而offset表示了这块内存在虚拟机物理内存中的偏移。每一个ram_block还会被连接到全局的'ram_list'链表上。Address,
MemoryRegion, RAMBlock关系如下图所示。
AddressSpace下面root及其子树形成了一个虚拟机的物理地址，但是在往kvm进行设置的时候，需要将其转换为一个平坦的地址模型，也就是从0开始的。这个就用FlatView表示，一个AddressSpace对应一个FlatView。
    struct FlatView {
        struct rcu_head rcu;
        unsigned ref;
        FlatRange *ranges;
        unsigned nr;
        unsigned nr_allocated;
    };
在FlatView中，FlatRange表示按照需要被切分为了几个范围。
在内存虚拟化中，还有一个重要的结构是MemoryRegionSection，这个结构通过函数section_from_flat_range可由FlatRange转换过来。
    struct MemoryRegionSection {
        MemoryRegion *mr;
        AddressSpace *address_space;
        hwaddr offset_within_region;
        Int128 size;
        hwaddr offset_within_address_space;
        bool readonly;
    };
MemoryRegionSection表示的是MemoryRegion的一部分。这个其实跟FlatRange差不多。这几个数据结构关系如下：
为了监控虚拟机的物理地址访问，对于每一个AddressSpace，会有一个MemoryListener与之对应。每当物理映射（GPA->HVA)发生改变时，会回调这些函数。所有的MemoryListener都会挂在全局变量memory_listeners链表上。同时，AddressSpace也会有一个链表连接器自己注册的MemoryListener。
    struct MemoryListener {
        void (*begin)(MemoryListener *listener);
        void (*commit)(MemoryListener *listener);
        void (*region_add)(MemoryListener *listener, MemoryRegionSection *section);
        void (*region_del)(MemoryListener *listener, MemoryRegionSection *section);
        void (*region_nop)(MemoryListener *listener, MemoryRegionSection *section);
        void (*log_start)(MemoryListener *listener, MemoryRegionSection *section,
                          int old, int new);
        void (*log_stop)(MemoryListener *listener, MemoryRegionSection *section,
                         int old, int new);
        void (*log_sync)(MemoryListener *listener, MemoryRegionSection *section);
        void (*log_global_start)(MemoryListener *listener);
        void (*log_global_stop)(MemoryListener *listener);
        void (*eventfd_add)(MemoryListener *listener, MemoryRegionSection *section,
                            bool match_data, uint64_t data, EventNotifier *e);
        void (*eventfd_del)(MemoryListener *listener, MemoryRegionSection *section,
                            bool match_data, uint64_t data, EventNotifier *e);
        void (*coalesced_mmio_add)(MemoryListener *listener, MemoryRegionSection *section,
                                   hwaddr addr, hwaddr len);
        void (*coalesced_mmio_del)(MemoryListener *listener, MemoryRegionSection *section,
                                   hwaddr addr, hwaddr len);
        /* Lower = earlier (during add), later (during del) */
        unsigned priority;
        AddressSpace *address_space;
        QTAILQ_ENTRY(MemoryListener) link;
        QTAILQ_ENTRY(MemoryListener) link_as;
    };
为了在虚拟机退出时，能够顺利根据物理地址找到对应的HVA地址，qemu会有一个AddressSpaceDispatch结构，用来在AddressSpace中进行位置的找寻，继而完成对IO/MMIO地址的访问。
    struct AddressSpaceDispatch {
        struct rcu_head rcu;
        MemoryRegionSection *mru_section;
        /* This is a multi-level map on the physical address space.
         * The bottom level has pointers to MemoryRegionSections.
         */
        PhysPageEntry phys_map;
        PhysPageMap map;
        AddressSpace *as;
    };
这里面有一个PhysPageMap，这其实也是保存了一个GPA->HVA的一个映射，通过多层页表实现，当kvm
exit退到qemu之后，通过这个AddressSpaceDispatch里面的map查找对应的MemoryRegionSection，继而找到对应的主机HVA。这几个结构体的关系如下：
下面对流程做一些分析。
**二. 初始化**
首先在main->cpu_exec_init_all->memory_map_init中对全局的memory和io进行初始化，system_memory作为address_space_memory的根MemoryRegion，大小涵盖了整个64位空间的大小，当然，这是一个pure
contaner,并不会分配空间的，system_io作为address_space_io的根MemoryRegion，大小为65536，也就是平时的io
port空间。
    static void memory_map_init(void)
    {
        system_memory = g_malloc(sizeof(*system_memory));
        memory_region_init(system_memory, NULL, "system", UINT64_MAX);
        address_space_init(&address_space_memory, system_memory, "memory");
        system_io = g_malloc(sizeof(*system_io));
        memory_region_init_io(system_io, NULL, &unassigned_io_ops, NULL, "io",
                              65536);
        address_space_init(&address_space_io, system_io, "I/O");
    }
在随后的cpu初始化之中，还会初始化多个AddressSpace，这些很多都是disabled的，对虚拟机意义不大。重点在随后的main->pc_init_v2_8->pc_init1->pc_memory_init中，这里面是分配系统ram，也是第一次真正为虚拟机分配物理内存。整个过程中，分配内存也不会像MemoryRegion那么频繁，mr很多时候是创建一个alias，指向已经存在的mr的一部分，这也是alias的作用，就是把一个mr分割成多个不连续的mr。真正分配空间的大概有这么几个，pc.ram,
pc.bios, pc.rom, 以及设备的一些ram, rom等，vga.vram, vga.rom, e1000.rom等。
分配pc.ram的流程如下：
    memory_region_allocate_system_memory
    allocate_system_memory_nonnuma
    memory_region_init_ram
    qemu_ram_alloc
    ram_block_add
    phys_mem_alloc
    qemu_anon_ram_alloc
    qemu_ram_mmap
    mmap
可以看到，qemu通过使用mmap创建一个内存映射来作为ram。
继续pc_memory_init，函数在创建好了ram并且分配好了空间之后，创建了两个mr
alias，ram_below_4g以及ram_above_4g，这两个mr分别指向ram的低4g以及高4g空间，这两个alias是挂在根system_memory
mr下面的。以后的情形类似，创建根mr，创建AddressSpace，然后在根mr下面加subregion。
**三. 内存的提交**
当我们每一次更改上层的内存布局之后，都需要通知到kvm。这个过程是通过一系列的MemoryListener来实现的。首先系统有一个全局的memory_listeners，上面挂上了所有的MemoryListener，在address_space_init->address_space_init_dispatch->memory_listener_register这个过程中完成MemoryListener的注册。
    void address_space_init_dispatch(AddressSpace *as)
    {
        as->dispatch = NULL;
        as->dispatch_listener = (MemoryListener) {
            .begin = mem_begin,
            .commit = mem_commit,
            .region_add = mem_add,
            .region_nop = mem_add,
            .priority = 0,
        };
        memory_listener_register(&as->dispatch_listener, as);
    }
这里有初始化了listener的几个回调，他们的的调用时间之后讨论。
值得注意的是，并不是只有AddressSpace初始化的时候会注册回调，kvm_init同样会注册回调。
    static int kvm_init(MachineState *ms)
    {
        ...
        kvm_memory_listener_register(s, &s->memory_listener,
                                     &address_space_memory, 0);
        memory_listener_register(&kvm_io_listener,
                                 &address_space_io);
        ...
    }
    void kvm_memory_listener_register(KVMState *s, KVMMemoryListener *kml,
                                      AddressSpace *as, int as_id)
    {
        int i;
        kml->slots = g_malloc0(s->nr_slots * sizeof(KVMSlot));
        kml->as_id = as_id;
        for (i = 0; i nr_slots; i++) {
            kml->slots[i].slot = i;
        }
        kml->listener.region_add = kvm_region_add;
        kml->listener.region_del = kvm_region_del;
        kml->listener.log_start = kvm_log_start;
        kml->listener.log_stop = kvm_log_stop;
        kml->listener.log_sync = kvm_log_sync;
        kml->listener.priority = 10;
        memory_listener_register(&kml->listener, as);
    }
在这里我们看到kvm也注册了自己的MemoryListener。
在上面看到MemoryListener之后，我们看看什么时候需要更新内存。 进行内存更新有很多个点，比如我们新创建了一个AddressSpace
address_space_init，再比如我们将一个mr添加到另一个mr的subregions中memory_region_add_subregion,再比如我们更改了一端内存的属性memory_region_set_readonly，将一个mr设置使能或者非使能memory_region_set_enabled,
总之一句话，我们修改了虚拟机的内存布局/属性时，就需要通知到各个Listener，这包括各个AddressSpace对应的，以及kvm注册的，这个过程叫做commit，通过函数memory_region_transaction_commit实现。
    void memory_region_transaction_commit(void)
    {
        AddressSpace *as;