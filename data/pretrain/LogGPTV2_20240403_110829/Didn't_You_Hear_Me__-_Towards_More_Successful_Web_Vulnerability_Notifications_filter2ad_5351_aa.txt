title:Didn't You Hear Me? - Towards More Successful Web Vulnerability Notifications
author:Ben Stock and
Giancarlo Pellegrino and
Frank Li and
Michael Backes and
Christian Rossow
Didn’t You Hear Me? — Towards More Successful
Web Vulnerability Notiﬁcations
Ben Stock∗, Giancarlo Pellegrino∗‡, Frank Li†, Michael Backes∗, and Christian Rossow∗
∗CISPA, Saarland University
‡Stanford University
†UC Berkeley
to a signiﬁcant
Abstract—After treating the notiﬁcation of vulnerable par-
ties as mere side-notes in research, the security community
has recently put more focus on how to conduct vulnerability
disclosure at scale. The ﬁrst works in this area have shown
that while notiﬁcations are helpful
fraction
of operators, the vast majority of systems remain unpatched.
In this paper, we build on these previous works, aiming to
understand why the effects are not more signiﬁcant. To that
end, we report on a notiﬁcation experiment targeting more than
24,000 domains, which allowed us to analyze what technical and
human aspects are roadblocks to a successful campaign. As part
of this experiment, we explored potential alternative notiﬁcation
channels beyond email, including social media and phone. In
addition, we conducted an anonymous survey with the notiﬁed
operators, investigating their perspectives on our notiﬁcations.
We show the pitfalls of email-based communications, such as
the impact of anti-spam ﬁlters, the lack of trust by recipients,
and the hesitation in ﬁxing vulnerabilities despite awareness.
However, our exploration of alternative communication channels
did not suggest a more promising medium. Seeing these results,
we pinpoint future directions in improving security notiﬁcations.
I.
INTRODUCTION
Large-scale discovery of vulnerabilities on the Internet has
become frequent over the last few years. With the widespread
adoption of content management systems such as WordPress,
Joomla, or Drupal, vulnerabilities in these programs result in
a large number of vulnerable Web sites. In addition, insecure
conﬁgurations may allow attackers to exploit systems, such as
retrieving sensitive data like cryptographic key material [3].
For researchers and attackers alike, detection of such issues
is often fairly straightforward: given a seed list of domains or
hosts, they can efﬁciently scan for existing security issues.
Considering the relative ease by which miscreants can
identify and exploit vulnerable systems, it is vital to quickly
and effectively inform affected parties. For example, the Dru-
pageddon ﬂaw in 2014 [11] allowed attackers to backdoor
thousands of hosts within seven hours after the vulnerability
had become publicly known. Thus, the security community
must focus not only on discovering vulnerabilities, but also on
determining effective ways of notifying those vulnerable.
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23171
www.ndss-symposium.org
How to properly perform such notiﬁcation is non-trivial,
particularly considering the heterogeneity of Web site and
system administrators. Two of our recent works [19, 25]
independently studied how vulnerability notiﬁcations can be
conducted at scale, i.e., for a large number of vulnerable Web
sites and network services. Our results show that such large-
scale notiﬁcations have promise in spurring remediation, but
currently to an unsatisfactory degree. Both studies identiﬁed
that a roadblock to success was the reachability of correct
contacts. By tracking which administrators viewed detailed
technical vulnerability reports, the studies also found another
challenge: even after viewing such reports, a large fraction of
administrators still did not take corrective steps.
We continue this line of research and aim to better un-
derstand inﬂuencing factors for the success of a large-scale
notiﬁcation campaign. Speciﬁcally, we investigate what impact
technical measures such as spam ﬁlters have on the initial
email delivery’s success. Based on the insights from prior
work, the delivery status remains unknown for large body of
sent emails. We therefore investigate whether this unknown
state is caused solely by mail servers which mark emails as
spam, or if the reason is non-technical, i.e., caused by admin-
istrators who do not follow up on the provided information.
To achieve this goal, we conducted an automated large-scale
notiﬁcation for two types of Web vulnerabilities using different
types and formats of notiﬁcation emails.
Although emails are a convenient way of disseminating
vulnerability information at scale, it is unclear how they com-
pare with other channels, which cannot be as easily automated
as email sending. To that end, we investigate the feasibility
of using channels that require additional costs (e.g., physical
mail), rely on manual acquisition of contacts points (e.g., social
media), or even demand high-effort interactions (e.g., calling
site owners). We analyze how these alternative disclosure
channels compare to a fully-automated approach via email.
Apart from the technical feasibility of conducting notiﬁca-
tions, it is also important to understand how the users perceive
notiﬁcations, e.g., whether they discard the messages due to a
lack of trust. To understand more about the administrators’
perspectives, we conducted an anonymous survey with the
site owners we previously notiﬁed about security issues, and
summarize the most important insights from their feedback.
Since the ﬁeld of vulnerability notiﬁcation at scale is still
in its infancy, our work not only aims at tackling the previously
described research questions, but also identiﬁes areas in which
further research should be conducted to improve the quality
and success of large-scale vulnerability disclosure.
Contributions and Outline
To summarize, our paper makes the following contributions:
• After presenting our methodology in Section II, we report
on the results of an automated notiﬁcation campaign for
more than 24,000 domains, affected by two distinctly
different types of vulnerabilities (Section III).
• With the data gathered from the notiﬁcation campaign, in
Section IV we analyze in-depth the technical and human
aspects of a notiﬁcation campaign, and provide insights
into parameters for the success of such a campaign.
• In Section V, we report on an experiment
involving
manual communication channels and how these compare
to a fully automated email approach.
• By characterizing the responses to the anonymous survey
we distributed to notiﬁed operators, in Section VI we
discuss the administrators’ perspectives on notiﬁcations
and highlight ways of improving the notiﬁcation process.
• Finally, based on our study as well as the prior work, we
outline directions for promising research to ensure that
vulnerability notiﬁcations can become more effective in
the future (Section VII).
II. METHODOLOGY
The goal of our study is to illuminate what factors may
inﬂuence the success of large-scale notiﬁcations on security
issues. To accomplish this, we conducted controlled multi-
variate notiﬁcation experiments. In this section, we present
our experiment methodology. We ﬁrst describe the security
issues we distributed notiﬁcations for and then outline our
procedure for conducting automated notiﬁcation campaigns.
Following these campaigns, we explored manual notiﬁcations
along different communication channels to investigate alter-
native methods to automated email notiﬁcations. Finally, we
distributed an anonymous survey to notiﬁed contacts to gain
insight on the characteristics of respondents, their views on our
notiﬁcations, and shortcomings in our process. For additional
data, such as the notiﬁcation messages and survey we used,
please see our GitHub repository [1].
A. Targeted Security Issues
Similar to our prior work [25], we focused on security
issues on Web sites that could be easily detected without
interfering with normal server operations. Our ﬁrst two security
issues were recent (at the time of the experiments) cross-
site scripting (XSS) vulnerabilities in WordPress, CVE-2016-
4566 and CVE-2016-4567. Both vulnerabilities impact im-
ported modules and reside in static ﬁles, allowing us to detect
vulnerable sites by downloading the affected resources and
comparing the ﬁle hashes to known vulnerable ones. As these
issues were ﬁxed in several branches of WordPress, affected
webmasters merely needed to update WordPress to the latest
version in their currently used branch. We refer to the data set
collected for these Web sites as WP throughout the paper.
Our other security issue was publicly accessible Git repos-
itories. Since Git is a distributed versioning system, every
machine that has checked out a repository has a copy of its
complete history. By default, Git stores both conﬁgurations and
the actual repository data in the .git directory. If publicly
accessible, an attacker can reconstruct the complete repository
2
and inspect the source code, potentially uncovering hardcoded
secrets such as database logins, API credentials, and crypto-
graphic keys. To detect if a site contained such a repository
in its public Web directory, we checked for access to the
ﬁle .git/config. Some Web sites may have intentionally
exposed a repository as public. To avoid notifying those
webmasters, we inspected the .git/refs/heads/master
ﬁle, which contains the hash of the last commit. We searched
for the existence of that commit hash on Github, the most
widely used Git hosting platform, and only marked a site as
vulnerable if no public commit was identiﬁed. Although this
approach does not eliminate all false positives, we believe
that it removes a large fraction of them without requiring
us to download the Git repositories and check for sensitive
information. We refer to the data set collected for these sites
as Git throughout the paper.
We initially also identiﬁed Web sites with publicly accessi-
ble core dump ﬁles, which can contain sensitive data dumped
from a crashed process’s memory. However, in the course of
our notiﬁcation campaign, we discovered that a single hosting
provider was responsible for approximately 30% of affected
domains. Given the limited data set of 790 domains that were
affected by core dumps in total, we excluded this data set as
the impact of this single hosting provider was too large to
allow for a meaningful analysis.
Finally, to allow for a sound analysis, we only considered
domains which were vulnerable to exactly one type of ﬂaw,
e.g., domains with WordPress vulnerabilities and a publicly
accessible Git repository were excluded from our experiments
(682 domains in total).
B. Automated Notiﬁcation Experiments
The ﬁrst component of our study was an automated email
notiﬁcation campaign. Here, we detail which email contacts
we used and what notiﬁcation messages we sent.
Notiﬁcation Contacts — Previous notiﬁcation studies [19,
25] used both direct and indirect (e.g., intermediaries such
as CERTs) communication channels. Indirect channels were
found to be less effective, as many intermediaries did not
forward the provided information. As a result, we chose to only
focus on direct channels for Web sites, such as those used in
[25]. While the prior studies measured the effectiveness of each
channel in isolation, we instead sent notiﬁcations for a given
domain to both available channels, summarized as follows:
Domain WHOIS Information — The Domain WHOIS database
contains a wide array of information about domain names,
which can be queried from anyone. However, WHOIS docu-
ments are structured for human readability and do not have
a consistent format. Furthermore, WHOIS providers may rate
limit database queries and can employ CAPTCHAs to prevent
data scraping. Instead of parsing the output, we used the
WhoisXML API (whoisxmlapi.com) for the domains in
our data set to extract contact emails in February 2017.
Generic Email Addresses — Generic email addresses are
standardized email usernames to be used when contacting
personnel of an organization, as deﬁned in RFC 2142 [8].
Amongst these, we selected security or administrator oriented
addresses: security@, abuse@, and webmaster@. We
additionally included info@ in hopes of potentially reaching
a front ofﬁce for the organizations we contacted.
Notiﬁcation Messages — In our analysis, we aim to under-
stand whether different types of messages impact the success
of a notiﬁcation campaign. Thus, we used six different types
of messages, which we describe below.
Plaintext Emails — The ﬁrst group of messages were three
different kinds of plaintext emails.
Regular Sender (Plain): The ﬁrst type of message was
a plaintext email according to RFC 2822 [24]. The email
sender and the displayed sender name was Ben Stock
.
The message contained a list describing the identiﬁed
security issues and instructions to retrieve a detailed technical
vulnerability report (see our GitHub repository [1]). Such
reports could be retrieved either with an email reply or on our
Web interface (linked to in our email). Access to the report
was secured with a secret token. To retrieve the report via
email, this token needed to be extracted from the message and
put in the subject when replying to our mail bot. Similarly,
the token was contained in the URL to our Web interface,
allowing us to determine when a report was accessed.
S/MIME Email (S/MIME): Considering the potential sen-
sitivity of vulnerability notiﬁcation messages, unsigned mes-
sages may cause distrust and raise concerns about sender
intentions. To determine whether a veriﬁable sender has any
impact on the success of our campaign, we used the same email
text as Plain, but signed with a valid S/MIME certiﬁcate [23].
To ensure that our programmatically generated signature was
correct, we veriﬁed that the signature was correctly interpreted
by the Thunderbird, Apple Mail, and Microsoft Outlook.
Mailbot (Mailbot): The third variant of a plaintext email
contained the same messages as Plain and S/MIME. However,
to investigate whether the sender name has any impact, we
modiﬁed the sender email address and displayed name to be
Vulnerability Notification . As
in Plain, we did not sign emails.
HTML-based Emails — The second group of messages were
two types of HTML-based emails.
HTML Email with External Resource (Tracking): Previous
work [19, 25] observed that a substantial portion of notiﬁed
contacts who did not take action remained in an unknown
state. While no remediation was observed,
it was unclear
whether the message was not received by an appropriate party,
or instead ignored. To better understand whether recipients
receive a notiﬁcation but choose to not act on it, we crafted
an HTML email as depicted in Figure 1. The message content
itself matched Plain, but we added the logo of our institution.
Instead of directly attaching the image, we linked to an image
hosted on our own server. The image URL was unique for
each recipient, allowing us to learn that the email was indeed
opened. Note that for each recipient, we only record the single
bit of information on whether the image was loaded. We do not
log IP addresses or any other potentially personal identiﬁers.
However, if the resource request arrived from a blacklisted set
of IP address associated with anti-virus and other services that
scan URLs in emails in transit, we do not factor that request
when marking a recipient as having read our message.
Fig. 1. Template of the HTML emails
HTML Email (HTML): While the tracking logo allowed us
to learn that an email was indeed opened, mail clients that
do not automatically retrieve external resources actively warn
users about the privacy risks. To understand if these messages
would have a negative inﬂuence on our campaign, we created
another HTML email template with the image as an attachment
(hence it does not trigger external resource warnings).
Tone — In the ﬁnal message group, we varied the message
tone compared to the previous message types.
Friendly (Friendly): We selected to establish ﬁrst contact
with a friendlier non-technical message, excluding any links
and detailed information about the security issues. Instead, we
informed the recipient that we had discovered a security issue,
asking them to provide an email address in charge of handling
such reports. We also added our institution’s default email
signature with contact details to allow for recipients to vet us as
a sender (see our GitHub repository [1]). When we received
the correct point of contact, we manually sent the complete
report information, as accessible via our Web interface.
When designing this ﬁnal message type, we had no ex-
pectations about whether it would be perceived better, or if it
would raise suspicion in the recipients. However, we consider
it important to measure if such a change in tone can make a
difference.
Measurements — To compare the effectiveness of the various
message types, we collected the following measurements:
Fixed Domains Over Time — We monitored the Web sites
detected as affected by a security issue, and determined if and
when the site remediated. Our monitoring system checked for
the security issue using the same method as used for detection,
visiting each site daily. Temporary network and server outages
can result in incorrect detection of remediation. Thus, after ﬁrst
detecting a site as ﬁxed on a given date, we continued checking
3
for the following seven days and consider the domain ﬁxed on
that date if it did not appear affected again.
Report Access — Our notiﬁcation recipients could access a