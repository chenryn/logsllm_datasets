**Title: Didn't You Hear Me? - Towards More Successful Web Vulnerability Notifications**

**Authors:**
- Ben Stock
- Giancarlo Pellegrino
- Frank Li
- Michael Backes
- Christian Rossow

**Affiliations:**
- *CISPA, Saarland University*
- *Stanford University (Giancarlo Pellegrino)*
- *UC Berkeley (Frank Li)*

---

**Abstract:**

In recent years, the security community has shifted its focus from merely noting vulnerability notifications to understanding how to conduct large-scale vulnerability disclosures effectively. Initial studies have shown that while notifications are beneficial for a significant fraction of operators, the majority of systems remain unpatched. This paper builds on previous work to explore why the impact of these notifications is not more substantial.

We conducted a notification experiment targeting over 24,000 domains, analyzing both technical and human factors that hinder successful campaigns. We also explored alternative notification channels, such as social media and phone, in addition to traditional email. Furthermore, we conducted an anonymous survey with notified operators to gain insights into their perspectives on our notifications.

Our findings highlight the challenges of email-based communications, including the impact of anti-spam filters, lack of trust by recipients, and reluctance to fix vulnerabilities despite awareness. However, our exploration of alternative communication channels did not reveal a more effective medium. Based on these results, we identify future directions for improving security notifications.

---

**1. Introduction**

The large-scale discovery of vulnerabilities on the Internet has become increasingly common, particularly with the widespread use of content management systems like WordPress, Joomla, and Drupal. These systems' vulnerabilities can result in a significant number of vulnerable websites. Additionally, insecure configurations can expose sensitive data, such as cryptographic keys [3].

Both researchers and attackers can easily detect and exploit these vulnerabilities. Therefore, it is crucial to quickly and effectively inform affected parties. For example, the Drupageddon flaw in 2014 [11] allowed attackers to backdoor thousands of hosts within seven hours after the vulnerability was publicly disclosed. Thus, the security community must not only focus on discovering vulnerabilities but also on developing effective ways to notify those at risk.

Properly performing such notifications is non-trivial, especially given the heterogeneity of website and system administrators. Our recent works [19, 25] independently studied large-scale vulnerability notifications, finding that while they show promise, the current success rate is unsatisfactory. A major challenge is reaching the correct contacts, and even when detailed technical reports are viewed, many administrators do not take corrective action.

This paper continues this research by examining the factors that influence the success of large-scale notification campaigns. We investigate the impact of technical measures, such as spam filters, on email delivery and explore alternative notification channels. We also conducted an anonymous survey to understand administrators' perspectives and identify areas for future research to improve the effectiveness of vulnerability notifications.

---

**Contributions and Outline:**

- **Section II: Methodology** - We present our methodology, including the targeted security issues and the procedure for conducting automated and manual notification campaigns.
- **Section III: Results of Automated Notification Campaign** - We report on the results of an automated notification campaign targeting over 24,000 domains affected by two distinct types of vulnerabilities.
- **Section IV: Analysis of Technical and Human Aspects** - We provide an in-depth analysis of the technical and human factors that influence the success of a notification campaign.
- **Section V: Experiment with Manual Communication Channels** - We compare the effectiveness of manual communication channels, such as social media and phone, with fully automated email approaches.
- **Section VI: Survey Results** - We discuss the responses to our anonymous survey, highlighting administrators' perspectives and suggesting ways to improve the notification process.
- **Section VII: Future Directions** - Based on our study and prior work, we outline promising research directions to enhance the effectiveness of vulnerability notifications.

---

**2. Methodology**

**2.1 Targeted Security Issues**

Similar to our prior work [25], we focused on easily detectable security issues on websites that do not interfere with normal server operations. The first two issues were recent cross-site scripting (XSS) vulnerabilities in WordPress, CVE-2016-4566 and CVE-2016-4567. These vulnerabilities affect imported modules and can be detected by comparing file hashes. Affected webmasters needed to update WordPress to the latest version in their current branch.

The second issue was publicly accessible Git repositories. By default, Git stores configurations and repository data in the .git directory. If publicly accessible, an attacker can reconstruct the complete repository and potentially uncover hardcoded secrets. To detect this, we checked for access to the .git/config file and the .git/refs/heads/master file, ensuring no public commit was identified.

We initially identified websites with publicly accessible core dump files, but excluded them due to a single hosting provider's significant impact. We only considered domains vulnerable to exactly one type of flaw.

**2.2 Automated Notification Experiments**

Our study included an automated email notification campaign. We used domain WHOIS information and generic email addresses (e.g., security@, abuse@, webmaster@, info@) to contact administrators. We sent six different types of messages:

- **Plaintext Emails:**
  - Regular Sender (Plain): A plaintext email according to RFC 2822, containing a list of identified security issues and instructions to retrieve a detailed technical report.
  - S/MIME Email (S/MIME): The same email text, but signed with a valid S/MIME certificate.
  - Mailbot (Mailbot): The same message, but with the sender name modified to "Vulnerability Notification."

- **HTML-based Emails:**
  - HTML Email with External Resource (Tracking): An HTML email with a unique image URL to track if the email was opened.
  - HTML Email (HTML): An HTML email with the image attached to avoid external resource warnings.

- **Tone Variation:**
  - Friendly (Friendly): A friendlier, non-technical message asking for the correct point of contact and providing our institutionâ€™s contact details.

We monitored the fixed domains over time and tracked report access to compare the effectiveness of different message types.

---

This revised version aims to make the text more clear, coherent, and professional, while maintaining the original content and structure.