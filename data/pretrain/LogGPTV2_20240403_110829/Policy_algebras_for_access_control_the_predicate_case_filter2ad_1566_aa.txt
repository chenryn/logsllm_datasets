# Policy Algebras for Access Control: The Predicate Case

**Authors:**
- Duminda Wijesekera
- Sushil Jajodia

**Contact:**
- Duminda Wijesekera: [PI:EMAIL]
- Sushil Jajodia: [PI:EMAIL]

**Institution:**
- Center for Secure Information Systems
- George Mason University
- Fairfax, VA 22030–4444

## Abstract
This paper introduces an algebraic framework for composing access control policies of collaborating organizations. To maintain conceptual coherence and a common basis for comparison, we propose a multi-level abstraction framework. In our previous work [21, 22], we presented a propositional version of the algebra that supports the manipulation of uninterpreted policies. This paper extends the algebra to the many-sorted first-order predicate case, enabling reasoning about first-order properties of security policies from their components. We demonstrate how to compose and reason about security properties, such as those used in role-based access control (RBAC) models, which are typically specified using second-order (set) quantifiers in languages like RCL2000 [1]. Additionally, we show how different application-specific notions of consistency and completeness can be formulated in our many-sorted first-order logic and propose a Hoare calculus for reasoning about them.

## 1. Introduction
There has been renewed interest in security policies and their compositions over the past few years [6, 21, 22]. Bonatti et al. [6] proposed a set-based approach influenced by logic programming to create a comprehensive framework for composing access control policies. In [21], we extended their work by adding more operators and allowing non-determinism. However, the work in [21] had two limitations: 
1. Atomic policies were treated axiomatically, limiting the ability to analyze realistic atomic constructs.
2. Reasoning was restricted to propositional logic, reducing the ability to distinguish between general properties and specific instances.

This paper addresses these limitations by extending the framework to many-sorted first-order reasoning. 

**Acknowledgments:**
This work was partially supported by the National Science Foundation under grant CCR-0113515.

**Permissions:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

**Conference:**
CCS'02, November 17-21, 2002, Washington, DC, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.

Access control policy specifications are categorized as discretionary, mandatory, or role-based, and are influenced by underlying models [8]. Flexible authorization models [12, 13] have been introduced to address the inflexibility of traditional models. These models transfer model-specific assumptions, such as the closed world or open world assumptions, to be specifiable by policies. This makes both consistency and completeness application-dependent definitions, respectively, as the absence of over and under specification. We show how application-specific notions of consistency and completeness can be defined as sentences in our many-sorted first-order language, facilitating the use of algebraic identities to reason about them.

Our algebra also provides first-order reasoning for role-based access control (RBAC) policies. In RBAC, roles correspond to sets of permissions assigned to subjects, and constraints ensure that only consistent subject-to-role and role-to-permission assignments are considered. RBAC policy specification languages like RCL2000 [1] use second-order quantifiers. We demonstrate that a carefully crafted many-sorted first-order language is sufficient to reason about known RBAC policies, avoiding the incompleteness issues associated with full second-order reasoning [9, 5].

When consistency and completeness become application-dependent and definable as sentences, Floyd-Hoare reasoning can be used to derive consistency and completeness of compositions from their constituents. Our ongoing research focuses on developing a fully-abstract and complete Hoare logic for RBAC specifications, and we present some consistent Hoare-style proof rules for our algebraic operators.

**Organization:**
- Section 2: Related Work
- Section 3: Syntax of the Policy Algebra
- Section 4: Semantics of Policies
- Section 5: Example Policies
- Section 6: Consistency and Completeness
- Section 7: Preliminary Work on a Hoare Logic for Policy Compositions
- Section 8: Concluding Remarks

## 2. Related Work
To the best of our knowledge, McLean [15, 16, 17] first suggested using algebraic (set-theoretic) constructs for composing access and information flow control policies. He referred to non-determinism as possibilistic semantics and the sequencing operator as the cascading operator.

Bai and Varadarajan [4] present a logic-based model for access control policies, modeling a given state of a security policy as a collection (C, M), where C is a finite set of first-order formulas over a language consisting of ground atoms, and M is a Herbrand interpretation. They view C as the non-changeable part of the policy and M as changeable facts. Their definition of transformation, syntactically given as [P re(tran) | P ost(tran)], means that if the facts h1, ..., hm held before the state transformation, then the transformation is eligible to be applied, and the post conditions l1, ..., ln must hold afterward. Because this work uses the closed world assumption, each transformation can have multiple states satisfying the post conditions and the invariant part. They suggest priority-based methods to choose one among competing states. Although our work does not use the closed world assumption and does not derive states from post conditions, we can model these state transformations followed by the selection of the appropriate end state as a composition of policies.

Bonatti et al. [6] present a framework for composing access control policies. The fundamental difference between their modeling and ours is that they formulate an access control policy as a set of ground terms over an alphabet for (subject, object, action) terms, whereas we model policies as non-deterministic transformers (relations) over states. Further, Bonatti et al. have Horn clause rules to derive consequences of policies, and the algebra of policies is captured by having a collection of operators such as union, intersection, closure under rules, scoping restrictions, etc. In addition, Bonatti et al. [6] have policy variables for yet to be specified policies in policy expressions that can be replaced by a collection of (subject, object, action) triples supplied by an environment. [6] does not explicitly support negative authorizations; however, it is possible to model hybrid policies such as denials take precedence policy as p+ − p−, where p+ and p− contain positive and negative authorization terms, respectively.

Although there are many access control-related works based on automatons, we compare our work with [20]. This work formulates policies related to access control, information flow, and resource availability as automatons. An enforceable security policy is defined as a safety property, and it is shown how these can be enforced by reference monitors. This work shows how to reverse engineer an access control matrix-based security enforcement mechanism as an automaton and argues that it is possible to compose policies by composing automatons, independent of their implementation mechanisms.

## 3. Syntax
There are four basic sorts of terms: subjects, objects, actions, and roles. In addition, we use some predicates, set membership symbols, logical connectives, and quantifiers to form formulas and sentences.

**Definition 1 (Restricted Second-Order Syntax):**
- **Terms:** There are countable sets of constants for subjects, objects, signed actions, and roles given respectively as Cs = {si : i ∈ N}, Co = {oi : i ∈ N}, Ca = {+ai : i ∈ N} ∪ {−ai : i ∈ N}, and Cr = {ri : i ∈ N}. There is a countable collection of set constants Cset = {PLi : i ∈ N}, and two unary function symbols subPerm and rolePerm whose inputs are subject and role terms and outputs are sets of (object,action) pairs. We use countable sets of variables ranging over subjects, objects, actions, roles, and sets of (subject,object) pairs given respectively as Vs = {xsi : i ∈ N}, Vo = {xoi : i ∈ N}, Va = {xai : i ∈ N}, Vr = {xri : i ∈ N}, and {Xi : i ∈ N}. We use abbreviations Ts = Cs ∪ Vs, To = Co ∪ Vo, Ta = Ca ∪ Va, and Tr = Cr ∪ Vr for subject, object, action, and role terms, respectively. We use xs, ts for subject variables and terms, and similar notation for variables and terms of other sorts.
- **Predicates:** There are four unary predicates scopeS, scopeO, scopeA, and scopeR satisfied by subject, object, action, and role terms that are in scope, and a binary predicate playsRole where the first and second arguments are respectively subject and role terms. In addition, there are three partial ordering relations ≤S, ≤O, and ≤R on subject, object, and role terms, respectively. There are three binary predicates conUsr, conRole, and conPerm to model subject-subject, role-role, and permission-permission conflicts. The first two are binary, and the third one is 4-ary. Both parameters of conUsr are subject terms, and both parameters of conRole are role terms. The four parameters of conPerm are object, action, object, and action terms, respectively.
- **Formulas and Sentences:** We use logical connectives ∨, ∧, →, ¬, individual quantifiers ∀, ∃ over all four sorts, set quantifiers ∀X, ∃X, and the membership symbol ∈ over the set sort to construct formulas and sentences of our restricted second-order language.

**Definition 2 (Atomic Policies):**
The following statements are called basic constructs:
1. assignP(xsi, xoj, xak), revokeP(xsi, xoj, xak)
2. assignRP(xri, xoj, xak), revokeRP(xri, xoj, xak)
3. assignR(xsi, xrj), revokeR(xsi, xrj)
4. addUsr(xsi), rmUsr(xsi), addRole(xri), rmRole(xri), addObj(xoi), rmObj(xoi), addAct(xai), rmAct(xai)

We say that (α ← φ) is an atomic construct if α is a basic construct and φ is a formula whose only free variables are those that appear in α.

As stated in Definition 2, there are four basic constructs: assignP, assignRP, revokeP, and revokeRP for assigning and revoking permissions from subjects and roles, respectively. The distinction between granting or revoking permissions from subjects and roles is necessary. assignR assigns subjects to roles, and revokeR retracts such assignments. There are basic constructs for adding and removing subjects, objects, roles, and actions given respectively as addUsr, rmUsr, addRole, rmRole, addObj, rmObj, addAct, and rmAct.

An atomic construct is of the form (Basic Construct ← Formula) where free variables occurring in the conditional must appear in the basic construct. The intent of an atomic construct is that if the condition evaluates to true in a state, then the corresponding basic construct is applied.