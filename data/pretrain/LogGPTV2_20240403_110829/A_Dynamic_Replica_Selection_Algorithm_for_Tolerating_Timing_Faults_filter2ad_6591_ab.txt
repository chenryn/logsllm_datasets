selection algorithm. 
5.1. Factors Influencing the Response Time 
Figure 2 shows the stages along the path traversed  by  a 
typical  request  from an AQuA  client that has specific tim- 
ing  constraints.  In  Stagel, an  AQuA client invokes a re- 
mote  method  using  CORBAs  IIOP  [15].  The request  is 
then  intercepted  by  a protocol  handler  in  the  AQuA  gate- 
way. The handler marshals the request into a Maestro mes- 
sage, and in Stage2 presents it to the MaestroEnsemble pro- 
tocol stack, from where it is transmitted across the network 
to the server gateway.  This gateway-to-gateway communi- 
cation  may  use point-to-point  or multicast communication 
depending on the number of replicas to which the client re- 
quest is forwarded.  In Stage3, the protocol handler  in  the 
server gateway  receives  the  Maestro message, demarshals 
it into a CORBA message, and enqueues it in  the request 
queue  of  the  server  application  using  CORBAs  dynamic 
invocation  interface  (DII) [15].  The server uses  FIFO or- 
dering  for  servicing the  requests  in  the  queue.  After the 
server  services the request  in  Stage4, it sends its response 
to  the client.  The protocol  handler in  the  server  gateway 
intercepts  this  response  and forwards it to the  client  gate- 
way along the MaestroEnsemble protocol stack. The client 
gateway  delivers  the  earliest response it receives  for a re- 
quest by  making a CORBA upcall to the AQuA client. We 
conducted  experiments to  determine  the  factors that  have 
109 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:31 UTC from IEEE Xplore.  Restrictions apply. 
Stage3 
Figure 2. Stages along the path traversed by 
a request in AQuA 
a significant impact on a replica’s response time in AQuA. 
Based on our off-line analysis, we concluded that a replica’s 
response time in AQuA is mainly affected by the following 
factors: 
Gateway-to-Gateway Delay:  the  time for an  AQuA  re- 
quest or response embedded within a Maestro message 
to  travel  between  two AQuA  gateways,  as  in  Stage2 
of  Figure  2.  From the  figure,  we  see  that  this  delay 
includes the  time  for a message to  travel  through  the 
Ensemblehlaestro protocol stack and the time for it to 
travel  on  the  wire  across  the  LAN. This delay  is  in- 
curred on both the request and response paths and the 
two delays together make up the two-way gateway-to- 
gateway delay. For a message of a given size, this de- 
lay varies mainly with the load on the network and the 
number of group members involved in the communi- 
cation. 
Queuing Delay:  the  time  that  a  request  spends  waiting 
in  the request  queue  of  the  server.  This time  varies 
with  the  speed at which  the requests are serviced.  It 
also varies with the number of previously  outstanding 
requests  in  the  queue, because  the  server  uses  FIFO 
scheduling to service its request queue. 
Service Time: the time spent by  the server to process the 
request after dequeuing it from the request queue. For 
requests  that  are  of  the  same kind,  this  time  mainly 
varies with the load on the host. 
In addition to the above sources of delay, a response from 
a  replica  may  suffer an  unacceptable  delay  if  the  replica 
crashes before responding. 
5.2. Gateway Information Repository 
For  each  replica,  we  regularly  monitor  the  above per- 
formance parameters at runtime, and maintain  the recently 
measured values in a distributed information repository. An 
online model then uses these measurements to estimate the 
response  time of  a replica  during replica selection.  Since 
this information changes rapidly  with time, the smaller the 
time to update the information repository, the more current 
and accurate is the information provided by the repository. 
This in  turn  facilitates better  selection  decisions.  Further, 
since the  information lookup is  done by  the  scheduler for 
each request, it is important that the lookup time be as small 
as possible. 
As mentioned in Section 2, an AQuA client uses different 
gateway handlers to communicate with different servers. In 
other words, the gateway handler identifies the server group 
with  which  a client is communicating.  Thus, a client that 
is  communicating with  multiple  servers  would  have mul- 
tiple  handlers loaded  in  its  gateway.  We  leverage this  de- 
sign and associate an information service with each timing 
fault handler  within  a client’s gateway.  Although this  de- 
sign  has the drawback that  the  replica-related information 
is redundantly stored at multiple client gateways, it has sev- 
eral advantages compared to a  global  information  service, 
which  would  avoid  this  drawback.  First,  having  a  repos- 
itory  local  to  each client  handler  avoids  a  single  point  of 
failure. Second, it avoids the overhead of making a call to a 
remote information service.  Third, allowing each gateway 
handler to access its local repository  avoids the need to en- 
force concurrency control, which would otherwise result in 
high access overheads. Finally, since a repository local to a 
handler only caches information relevant to the service as- 
sociated with that handler, the search space is  smaller, and 
as a result  it takes less time to access information. 
The  gateway  information repository  within  each  client 
handler  stores  the  list  of  replicas  offering  the  service  as- 
sociated  with  the  handler.  For  each  of  these  replicas,  it 
stores  the  current  number  of  outstanding  requests  in  the 
replica’s request queue and the most recently measured two- 
way  gateway-to-gateway delay  between the  client  and the 
replica. In addition, the repository also stores a service firlie 
vector  and  a  queuing delay  vector  for  each  replica.  The 
former records the service time while the latter records the 
queuing delay for the most recent 1 requests serviced by that 
replica.  Thus,  1  can  be  considered  as  the  size  of  a  slid- 
ing  window  of  requests,  and its  value  is  chosen so that  it 
includes a reasonable  number of recent requests but elimi- 
nates obsolete measurements. The next subsection explains 
how these parameters are used in the selection of the repli- 
cas. 
5.3. Model-Based Replica Selection Algorithm 
Using the performance measurements collected above as 
inputs, the local scheduler that is part of a timing fault han- 
dler builds a model to predict the probability that a subset of 
110 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:31 UTC from IEEE Xplore.  Restrictions apply. 
replicas will be able to meet a client’s timing requirements. 
The selection is then done based on this resultant probabil- 
ity. We first define the notation we use to present the model: 
M  = { m l ,  m2, ..., m,}  is the set of  replicas offering 
the service requested by a client. The scheduler obtains 
this set from its local information repository. 
R  = { R I ,  R2, .. . , Rn}, Ri is the random variable de- 
noting  the  time  to  receive:a response  from  a  replica 
mi  E M ,  after a request  was transmitted to it. 
Pc(t) is the probability  with  which  the client wants  a 
response for its request by time t, as described in Sec- 
tion 4. 
We  now need  to determine the probability  that a response 
from a subset K  M ,  consisting of k  > 0 replicas, will 
arrive by the client’s deadline, t ,  and thereby  avoid the oc- 
currence of a timing failure.  We denote this probability  by 
P K ( ~ ) .  As stated  earlier in  Section 4, each replica  in  the 
subset independently  processes a request and sends back its 
response.  However,  only  the first  response received  for a 
request is delivered to the client. So a timing failure occurs 
only  if  no response was received  from any  of  the replicas 
in the set K  within t  time units  after the request  was sent. 
Computing the distribution  of  the  time until  a response is 
received  is straightforward if  we assume that the response 
times of individual’replicas are independent of one another. 
While this is not strictly the case in a shared network where 
the network delays may be correlated, we believe it is a rea- 
sonable assumption to make, since the network delay is usu- 
ally a small fraction of the replica’s response time in a LAN 
environment. We use this independence assumption to com- 
pute the probability, P K ( t ) ,  for the replicas in subset K ,  as 
follows: 
P K ( ~ ) ,  = 1 - P ( n o  replica in K responds before t) 
PK(t) = 1 - 
P(R, > t )  
m , E K  
n 
PK(t) = 1 - 
(1 - FR, ( t ) )  
(1) 
m , E K  
where FR, ( t )  is the response time distribution  function for 
replica m,. 
5.3.1.  Computing  the  Response  Time  Distribution. 
Given the above model, we  now explain how we compute 
the value  of  FR, ( t )  for a replica  m,.  Henceforth, we  will 
use the subscript i to refer to the replica m,. Based  on the 
analysis presented  in  Section  5.1,  we  define  the  response 
time random variable, R,, using Equation 2 below. 
where S, is the random variable  denoting the service time 
for a request  serviced by m,; Wi  is the random variable de- 
noting  the queuing delay experienced by  a request  waiting 
to be serviced by m,; and T, is the random variable denoting 
the  two-way  gateway-to-gateway delay between  the client 
and replica mi. For each request, we experimentally mea- 
sure the  values  of  the  service time,  S,,  as described  later 
in  Section 5.4, and record  the  values  of  the  most  recent 1 
requests in the service time vector in the information repos- 
itory. We do the same for the queuing delay, Wi, and record 
its  recent  values  in  the  queuing d e l q  vector in  the  infor- 
mation  repository.  Thus, these  vectors  represent  a  sliding 
window,  L, of  size 1,  over which  the  performance history 
is recorded.  For the gateway-to-gateway delay, T,, we d e -  
cided to  use  its  most  recently  measured  value  rather  than 
recording its  history  over a period  of  time.  This decision 
was based on the observation that the traffic in a LAN does 
not  frequently  fluctuate like the other two parameters.  We 
verified  this observation  to be true for the environment we 
used.  For  environments in  which  this  observation  is  not 
true, it  would  be simple to extend our approach  to record 
the  value  of  the  gateway-to-gateway delay  over a  sliding 
window as  we do above for the  service time and  queuing 
delay. 
Given that we can measure the performance parameters 
and record them at runtime, we can now compute the value 
of the distribution  function FR, ( t )  for a replica  mi. To do 
this, we first compute the probability  mass function  (pmf) 
of S, and W, based on the relative frequency of their values 
recorded  in the sliding window, L. We then use the p m  f of 
S,, the pnzf  of  W,, and the recently  recorded  value of T, 
to compute the p m  f  of  the response time R, as a discrete 
convolution  of  Wi,  S,,  and Ti.  The pmf of  R, can  then 
be  used  to  compute  the  value  of  the  distribution  function 
FRi (t). 
5.3.2. Replica Selection Algorithm.  Given  the  ability  to 
compute the probability  that an individual replica will meet 
a  client’s time  constraint, we  now  describe the  algorithm 
that  applies Equation  1  to  select a set of  replicas  that  can 
meet this time constraint with the probability  the client has 
requested.  The  selection  algorithm  is  outlined  in  Algo- 
rithm  l .  The algorithm first sorts the replicas in decreasing 
order of the probability  that they  can individually  meet  the 
client’s response time  requirement.  In  Line 4, it  includes 
the first element of this sorted replica list in the selected set, 
K .  It  then  considers the  remaining replicas  in  this  list  in 
sorted order, including each replica in  the candidate set X ,  
until it includes enough replicas  in  X  such that the condi- 
tion P.y(t) 2 Pc(t) is satisfied,  where P,y(t) can be com- 
puted  using  Equation  1.  In  Line  1 1 ,  we extend  this candi- 
date set X by  including the  first element, mo, which  was 
selected in Line 4, to form the final selected set of replicas, 
111 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:31 UTC from IEEE Xplore.  Restrictions apply. 
K .  Thus, we  include the replica, mo, that has the highest 
value of FRO ( t ) ,  in the final selected set, although we do not 
consider it when  testing the condition in Line  IO.  We now 
explain the reason for this. 
Since replicas may  crash, our goal is  to choose a set of 
replicas  that  can  meet  a  client’s time  constraint  with  the 
probability  the client has requested, even when  one of the 
replicas in  the selected set crashes before servicing the re- 
quest.  Our intuition  is that if  we can choose a set of  repli- 
cas that can satisfy the timing constraint with the specified 
probability despite the failure of the member, mo, which has 
the highest probability of meeting the client’s deadline, then 
such a set should be able to handle the failure of any other 
member in the set.  The loop in Lines 6-14 of Algorithm 1 
attempts to find such a subset, X, that satisfies the condition 
in Line  IO by  excluding the member mo. If  it finds such a 
set, it extends the set to include mo  to form the final set, K .  
If, however, it is unable to find such a set, then it returns the 
complete set of available replicas, 11.1. We now justify  that 
the set K  found by  Algorithm  1 does indeed handle single 
replica crashes.  Let 90 = 1 - F R , , ( ~ ) ,  where FR,,(~) is the 
distribution  function of the first  member in  the sorted list. 
Since F R ~  
( t )  2 FR, ( t ) ,  Vz,  we have, 
Algorithm 1 ReDlica Selection Algorithm 
Require:  V = {set of replicas and their cor- 
responding distribution function} 
Require:  Client Inputs: 
t : client’s deadline, 
Pc(t): probability that this deadline should be met 