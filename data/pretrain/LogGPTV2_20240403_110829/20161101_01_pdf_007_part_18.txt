PostgreSQL 事务隔离级别测试6
 digoal=# insert into iso_test values (2,'test');
 INSERT 0 1
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | vir
 tualtransaction | pid | mode | granted | fastpath
 ----------------+---------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+----
 ----------------+-------+------------------+---------+----------
 idx_iso_test_1 | relation | 16384 | 93017 | | | | | | | | 1/1
 57996 | 12186 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/1
 57996 | 12186 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/1
 57996 | 12186 | RowExclusiveLock | t | t
 | virtualxid | | | | | 1/157996 | | | | | 1/1
 57996 | 12186 | ExclusiveLock | t | t
 idx_iso_test_1 | relation | 16384 | 93017 | | | | | | | | 2/6
 433314 | 12222 | AccessShareLock | t | t
PostgreSQL 事务隔离级别测试6
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6
 433314 | 12222 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6
 433314 | 12222 | RowExclusiveLock | t | t
 | virtualxid | | | | | 2/6433314 | | | | | 2/6
 433314 | 12222 | ExclusiveLock | t | t
 | transactionid | | | | | | 316732567 | | | | 1/1
 57996 | 12186 | ExclusiveLock | t | f
 | transactionid | | | | | | 316732568 | | | | 2/6
 433314 | 12222 | ExclusiveLock | t | f
 iso_test | tuple | 16384 | 92992 | 0 | 100 | | | | | | 1/1
 57996 | 12186 | SIReadLock | t | f
 iso_test | tuple | 16384 | 92992 | 0 | 10 | | | | | | 2/6
 433314 | 12222 | SIReadLock | t | f
 idx_iso_test_1 | page | 16384 | 93017 | 1 | | | | | | | 1/1
 57996 | 12186 | SIReadLock | t | f
 idx_iso_test_1 | page | 16384 | 93017 | 1 | | | | | | | 2/6
 433314 | 12222 | SIReadLock | t | f
 (14 rows)
PostgreSQL 事务隔离级别测试6
 digoal=# commit;
 COMMIT
 digoal=# commit;
 ERROR: could not serialize access due to read/write dependencies among transactions
 DETAIL: Reason code: Canceled on identification as a pivot, during commit attempt.
 HINT: The transaction might succeed if retried.
 索引页用了同一个, 并且被插入语句更新了. 所以发生了冲突
 如果其中一个插入的值不在1号索引页则没有问题, 例如
 digoal=# begin ISOLATION LEVEL SERIALIZABLE;
 BEGIN
 digoal=# select sum(id) from iso_test where id=100;
 -[ RECORD 1 ]
 sum | 100
PostgreSQL 事务隔离级别测试6
 digoal=# insert into iso_test values (1,'test');
 INSERT 0 1
 digoal=# commit;
 COMMIT
 digoal=# begin ISOLATION LEVEL SERIALIZABLE;
 BEGIN
 digoal=# select sum(id) from iso_test where id=10;
 -[ RECORD 1 ]
 sum | 10
 digoal=# insert into iso_test values (200000,'test');
 INSERT 0 1
 digoal=# commit;
 COMMIT
 (200000,'test') 这个索引页不在1号, 在275
 idx_iso_test_1 | page | 16384 | 93017 | 275 | | | | | | | 2/6433
 316 | 12222 | SIReadLock | t | f
PostgreSQL 事务隔离级别测试6
 注意事项
 PostgreSQL 的 hot_standby节点不支持串行事务隔离级别, 只能支持read committed和repeatable read隔离级别.
PostgreSQL锁的介绍
 锁对象的类型
 relation, extend, page, tuple, transactionid, virtualxid, object, userlock, or advisory
 src/include/storage/lock.h
 /*
 * LOCKTAG is the key information needed to look up a LOCK item in the
 * lock hashtable. A LOCKTAG value uniquely identifies a lockable object.
 *
 * The LockTagType enum defines the different kinds of objects we can lock.
 * We can handle up to 256 different LockTagTypes.
 */
 typedef enum LockTagType
 {
 LOCKTAG_RELATION, /* whole relation */
 /* ID info for a relation is DB OID + REL OID; DB OID = 0 if shared */
 LOCKTAG_RELATION_EXTEND, /* the right to extend a relation */
 /* same ID info as RELATION */
 LOCKTAG_PAGE, /* one page of a relation */
 /* ID info for a page is RELATION info + BlockNumber */
PostgreSQL锁的介绍
 LOCKTAG_TUPLE, /* one physical tuple */
 /* ID info for a tuple is PAGE info + OffsetNumber */
 LOCKTAG_TRANSACTION, /* transaction (for waiting for xact done) */
 /* ID info for a transaction is its TransactionId */
 LOCKTAG_VIRTUALTRANSACTION, /* virtual transaction (ditto) */
 /* ID info for a virtual transaction is its VirtualTransactionId */
 LOCKTAG_OBJECT, /* non-relation database object */
 /* ID info for an object is DB OID + CLASS OID + OBJECT OID + SUBID */
 /*
 * Note: object ID has same representation as in pg_depend and
 * pg_description, but notice that we are constraining SUBID to 16 bits.
 * Also, we use DB OID = 0 for shared objects such as tablespaces.
 */
 LOCKTAG_USERLOCK, /* reserved for old contrib/userlock code */
 LOCKTAG_ADVISORY /* advisory user locks */
 } LockTagType;
PostgreSQL锁的介绍
 锁模式1(标准锁和用户锁方法支持的模式都在这里)
 /*
 * These are the valid values of type LOCKMODE for all the standard lock
 * methods (both DEFAULT and USER).
 */
 #define NoLock 0 /* NoLock is not a lock mode, but a flag value meaning "don't get a lock" */
 #define AccessShareLock 1 /* SELECT */
 #define RowShareLock 2 /* SELECT FOR UPDATE/FOR SHARE */
 #define RowExclusiveLock 3 /* INSERT, UPDATE, DELETE */
 #define ShareUpdateExclusiveLock 4 /* VACUUM (non-FULL),ANALYZE, CREATE
 * INDEX CONCURRENTLY */
 #define ShareLock 5 /* CREATE INDEX (WITHOUT CONCURRENTLY) */
 #define ShareRowExclusiveLock 6 /* like EXCLUSIVE MODE, but allows ROW
 * SHARE */
 #define ExclusiveLock 7 /* blocks ROW SHARE/SELECT...FOR
 * UPDATE */
 #define AccessExclusiveLock 8 /* ALTER TABLE, DROP TABLE, VACUUM
 * FULL, and unqualified LOCK TABLE */
PostgreSQL锁的介绍
 锁模式冲突表
PostgreSQL锁的介绍
 行锁模式
 src/include/access/heapam.h
 /*
 * Possible lock modes for a tuple.
 */
 typedef enum LockTupleMode
 {
 /* SELECT FOR KEY SHARE */
 LockTupleKeyShare,
 /* SELECT FOR SHARE */
 LockTupleShare,
 /* SELECT FOR NO KEY UPDATE, and UPDATEs that don't modify key columns */
 LockTupleNoKeyExclusive,
 /* SELECT FOR UPDATE, UPDATEs that modify key columns, and DELETE */
 LockTupleExclusive
 } LockTupleMode;
PostgreSQL锁的介绍
 行锁模式冲突表
 src/backend/access/heap/README.tuplock
 KEY UPDATE UPDATE SHARE KEY SHARE
 KEY UPDATE conflict conflict conflict conflict
 UPDATE conflict conflict conflict
 SHARE conflict conflict
 KEY SHARE conflict
 例子
 http://blog.163.com/digoal@126/blog/static/16387704020130305109687/
PostgreSQL锁的介绍
 串行锁模式
 SIReadLock
 src/backend/storage/lmgr/README-SSI
 http://www.postgresql.org/docs/9.3/static/transaction-iso.html#XACT-SERIALIZABLE
PostgreSQL锁的介绍
 PostgreSQL获取锁的宏定义
 /*
 * These macros define how we map logical IDs of lockable objects into
 * the physical fields of LOCKTAG. Use these to set up LOCKTAG values,
 * rather than accessing the fields directly. Note multiple eval of target!
 */
 #define SET_LOCKTAG_RELATION(locktag,dboid,reloid) \
 ((locktag).locktag_field1 = (dboid), \
 (locktag).locktag_field2 = (reloid), \
 (locktag).locktag_field3 = 0, \
 (locktag).locktag_field4 = 0, \
 (locktag).locktag_type = LOCKTAG_RELATION, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
PostgreSQL锁的介绍
 #define SET_LOCKTAG_RELATION_EXTEND(locktag,dboid,reloid) \
 ((locktag).locktag_field1 = (dboid), \
 (locktag).locktag_field2 = (reloid), \
 (locktag).locktag_field3 = 0, \
 (locktag).locktag_field4 = 0, \
 (locktag).locktag_type = LOCKTAG_RELATION_EXTEND, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
 #define SET_LOCKTAG_PAGE(locktag,dboid,reloid,blocknum) \
 ((locktag).locktag_field1 = (dboid), \
 (locktag).locktag_field2 = (reloid), \
 (locktag).locktag_field3 = (blocknum), \
 (locktag).locktag_field4 = 0, \
 (locktag).locktag_type = LOCKTAG_PAGE, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
PostgreSQL锁的介绍
 #define SET_LOCKTAG_TUPLE(locktag,dboid,reloid,blocknum,offnum) \
 ((locktag).locktag_field1 = (dboid), \
 (locktag).locktag_field2 = (reloid), \
 (locktag).locktag_field3 = (blocknum), \
 (locktag).locktag_field4 = (offnum), \
 (locktag).locktag_type = LOCKTAG_TUPLE, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
 #define SET_LOCKTAG_TRANSACTION(locktag,xid) \
 ((locktag).locktag_field1 = (xid), \
 (locktag).locktag_field2 = 0, \
 (locktag).locktag_field3 = 0, \
 (locktag).locktag_field4 = 0, \
 (locktag).locktag_type = LOCKTAG_TRANSACTION, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
PostgreSQL锁的介绍
 #define SET_LOCKTAG_VIRTUALTRANSACTION(locktag,vxid) \
 ((locktag).locktag_field1 = (vxid).backendId, \
 (locktag).locktag_field2 = (vxid).localTransactionId, \
 (locktag).locktag_field3 = 0, \
 (locktag).locktag_field4 = 0, \
 (locktag).locktag_type = LOCKTAG_VIRTUALTRANSACTION, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
 #define SET_LOCKTAG_OBJECT(locktag,dboid,classoid,objoid,objsubid) \
 ((locktag).locktag_field1 = (dboid), \
 (locktag).locktag_field2 = (classoid), \
 (locktag).locktag_field3 = (objoid), \
 (locktag).locktag_field4 = (objsubid), \
 (locktag).locktag_type = LOCKTAG_OBJECT, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
PostgreSQL锁的介绍
 #define SET_LOCKTAG_ADVISORY(locktag,id1,id2,id3,id4) \
 ((locktag).locktag_field1 = (id1), \
 (locktag).locktag_field2 = (id2), \
 (locktag).locktag_field3 = (id3), \
 (locktag).locktag_field4 = (id4), \
 (locktag).locktag_type = LOCKTAG_ADVISORY, \
 (locktag).locktag_lockmethodid = USER_LOCKMETHOD)
PostgreSQL advisory锁介绍