Parameters
buf
buf contains the encoded string that will be translated to the specified character
set and encoded by TEXT_ENCODE.
encode_charset
encode_charset specifies the character set to which the value will be translated
before encoding. The default value is NULL.
encoding
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 265
Database Compatibility for Oracle® Developers
Built-in Package Guide
encoding specifies the encoding type used by TEXT_ENCODE. Specify:
 UTL_ENCODE.BASE64 to specify base-64 encoding.
 UTL_ENCODE.QUOTED_PRINTABLE to specify quoted printable encoding.
This is the default.
Examples
The following example uses the TEXT_ENCODE and TEXT_DECODE functions to first
encode, and then decode a string:
edb=# SELECT UTL_ENCODE.TEXT_ENCODE('What is the date?', 'BIG5',
UTL_ENCODE.BASE64) FROM DUAL;
text_encode
--------------------------
V2hhdCBpcyB0aGUgZGF0ZT8=
(1 row)
edb=# SELECT UTL_ENCODE.TEXT_DECODE('V2hhdCBpcyB0aGUgZGF0ZT8=', 'BIG5',
UTL_ENCODE.BASE64) FROM DUAL;
text_decode
-------------------
What is the date?
(1 row)
3.19.9 UUDECODE
Use the UUDECODE function to translate and decode a uuencode encoded string to the RAW
value that was originally encoded by the UUENCODE function. The signature is:
UUDECODE(r IN RAW)
This function returns a RAW value.
Note: If you are using the Advanced Server UUDECODE function to decode uuencoded
data that was created by the Oracle implementation of the UTL_ENCODE.UUENCODE
function, then you must first set the Advanced Server configuration parameter
utl_encode.uudecode_redwood to TRUE before invoking the Advanced Server
UUDECODE function on the Oracle-created data. (For example, this situation may occur if
you migrated Oracle tables containing uuencoded data to an Advanced Server database.)
The uuencoded data created by the Oracle version of the UUENCODE function results in a
format that differs from the uuencoded data created by the Advanced Server UUENCODE
function. As a result, attempting to use the Advanced Server UUDECODE function on the
Oracle uuencoded data results in an error unless the configuration parameter
utl_encode.uudecode_redwood is set to TRUE.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 266
Database Compatibility for Oracle® Developers
Built-in Package Guide
However, if you are using the Advanced Server UUDECODE function on uuencoded data
created by the Advanced Server UUENCODE function, then
utl_encode.uudecode_redwood must be set to FALSE, which is the default setting.
Parameters
r
r contains the uuencoded string that will be translated to RAW.
Examples
Note: Before executing the following example, invoke the command:
SET bytea_output = escape;
This command instructs the server to escape any non-printable characters, and to display
BYTEA or RAW values onscreen in readable form. For more information, please refer to
the Postgres Core Documentation available at:
https://www.postgresql.org/docs/11/static/datatype-binary.html
The following example uses UUENCODE and UUDECODE to first encode and then decode a
string:
edb=# SET bytea_output = escape;
SET
edb=# SELECT UTL_ENCODE.UUENCODE('What is the date?') FROM DUAL;
uuencode
--------------------------------------------------------------------
begin 0 uuencode.txt\01215VAA="!I<R!T:&4@9&%T93\\`\012`\012end\012
(1 row)
edb=# SELECT UTL_ENCODE.UUDECODE
edb-# ('begin 0 uuencode.txt\01215VAA="!I<R!T:&4@9&%T93\\`\012`\012end\012')
edb-# FROM DUAL;
uudecode
-------------------
What is the date?
(1 row)
3.19.10 UUENCODE
Use the UUENCODE function to translate RAW data into a uuencode formatted encoded
string. The signature is:
UUENCODE(r IN RAW, type IN INTEGER DEFAULT 1, filename IN
VARCHAR2 DEFAULT NULL, permission IN VARCHAR2 DEFAULT NULL)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 267
Database Compatibility for Oracle® Developers
Built-in Package Guide
This function returns a RAW value.
Parameters
r
r contains the RAW string that will be translated to uuencode format.
type
type is an INTEGER value or constant that specifies the type of uuencoded string
that will be returned; the default value is 1. The possible values are:
Value Constant
1 complete
2 header_piece
3 middle_piece
4 end_piece
filename
filename is a VARCHAR2 value that specifies the file name that you want to
embed in the encoded form; if you do not specify a file name, UUENCODE will
include a filename of uuencode.txt in the encoded form.
permission
permission is a VARCHAR2 that specifies the permission mode; the default
value is NULL.
Examples
Note: Before executing the following example, invoke the command:
SET bytea_output = escape;
This command instructs the server to escape any non-printable characters, and to display
BYTEA or RAW values onscreen in readable form. For more information, please refer to
the Postgres Core Documentation available at:
https://www.postgresql.org/docs/11/static/datatype-binary.html
The following example uses UUENCODE and UUDECODE to first encode and then decode a
string:
edb=# SET bytea_output = escape;
SET
edb=# SELECT UTL_ENCODE.UUENCODE('What is the date?') FROM DUAL;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 268
Database Compatibility for Oracle® Developers
Built-in Package Guide
uuencode
--------------------------------------------------------------------
begin 0 uuencode.txt\01215VAA="!I<R!T:&4@9&%T93\\`\012`\012end\012
(1 row)
edb=# SELECT UTL_ENCODE.UUDECODE
edb-# ('begin 0 uuencode.txt\01215VAA="!I<R!T:&4@9&%T93\\`\012`\012end\012')
edb-# FROM DUAL;
uudecode
-------------------
What is the date?
(1 row)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 269
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.20 UTL_FILE
The UTL_FILE package provides the capability to read from, and write to files on the
operating system’s file system. Non-superusers must be granted EXECUTE privilege on
the UTL_FILE package by a superuser before using any of the functions or procedures in
the package. For example the following command grants the privilege to user mary:
GRANT EXECUTE ON PACKAGE SYS.UTL_FILE TO mary;
Also, the operating system username, enterprisedb, must have the appropriate read
and/or write permissions on the directories and files to be accessed using the UTL_FILE
functions and procedures. If the required file permissions are not in place, an exception is
thrown in the UTL_FILE function or procedure.
A handle to the file to be written to, or read from is used to reference the file. The file
handle is defined by a public variable in the UTL_FILE package named,
UTL_FILE.FILE_TYPE. A variable of type FILE_TYPE must be declared to receive the
file handle returned by calling the FOPEN function. The file handle is then used for all
subsequent operations on the file.
References to directories on the file system are done using the directory name or alias
that is assigned to the directory using the CREATE DIRECTORY command. The
procedures and functions available in the UTL_FILE package are listed in the following
table:
Function/Procedure Return Description
Type
FCLOSE(file IN OUT) n/a Closes the specified file identified by file.
FCLOSE_ALL n/a Closes all open files.
FCOPY(location, filename, n/a Copies filename in the directory identified by
dest_dir, dest_file [, start_line
location to file, dest_file, in directory,
[, end_line ] ])
dest_dir, starting from line, start_line, to
line, end_line.
FFLUSH(file) n/a Forces data in the buffer to be written to disk in
the file identified by file.
FOPEN(location, filename, FILE_TYPE Opens file, filename, in the directory identified
open_mode [, max_linesize ])
by location.
FREMOVE(location, filename) n/a Removes the specified file from the file system.
FRENAME(location, filename, n/a Renames the specified file.
dest_dir, dest_file [, overwrite
])
GET_LINE(file, buffer OUT) n/a Reads a line of text into variable, buffer, from
the file identified by file.
IS_OPEN(file) BOOLEAN Determines whether or not the given file is open.
NEW_LINE(file [, lines ]) n/a Writes an end-of-line character sequence into the
file.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 270
Database Compatibility for Oracle® Developers
Built-in Package Guide
Function/Procedure Return Description
Type
PUT(file, buffer) n/a Writes buffer to the given file. PUT does not
write an end-of-line character sequence.
PUT_LINE(file, buffer) n/a Writes buffer to the given file. An end-of-line
character sequence is added by the PUT_LINE
procedure.
PUTF(file, format [, arg1 ] [, n/a Writes a formatted string to the given file. Up to
...])
five substitution parameters, arg1,...arg5 may
be specified for replacement in format.
Advanced Server's implementation of UTL_FILE is a partial implementation when
compared to Oracle's version. Only those functions and procedures listed in the table
above are supported.
UTL_FILE Exception Codes
If a call to a UTL_FILE procedure or function raises an exception, you can use the
condition name to catch the exception. The UTL_FILE package reports the following
exception codes compatible with Oracle databases:
Exception Code Condition name
-29283 invalid_operation
-29285 write_error
-29284 read_error
-29282 invalid_filehandle
-29287 invalid_maxlinesize
-29281 invalid_mode
-29280 invalid_path
3.20.1 Setting File Permissions with utl_file.umask
When a UTL_FILE function or procedure creates a file, there are default file permissions
as shown by the following.
-rw------- 1 enterprisedb enterprisedb 21 Jul 24 16:08 utlfile
Note that all permissions are denied on users belonging to the enterprisedb group as
well as all other users. Only the enterprisedb user has read and write permissions on
the created file.
If you wish to have a different set of file permissions on files created by the UTL_FILE
functions and procedures, you can accomplish this by setting the utl_file.umask
configuration parameter.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 271
Database Compatibility for Oracle® Developers
Built-in Package Guide
The utl_file.umask parameter sets the file mode creation mask or simply, the mask,
in a manner similar to the Linux umask command. This is for usage only within the
Advanced Server UTL_FILE package.
Note: The utl_file.umask parameter is not supported on Windows systems.
The value specified for utl_file.umask is a 3 or 4-character octal string that would be
valid for the Linux umask command. The setting determines the permissions on files
created by the UTL_FILE functions and procedures. (Refer to any information source
regarding Linux or Unix systems for information on file permissions and the usage of the
umask command.)
The following is an example of setting the file permissions with utl_file.umask.
First, set up the directory in the file system to be used by the UTL_FILE package. Be sure
the operating system account, enterprisedb or postgres, whichever is applicable,
can read and write in the directory.
mkdir /tmp/utldir
chmod 777 /tmp/utldir
The CREATE DIRECTORY command is issued in psql to create the directory database
object using the file system directory created in the preceding step.
CREATE DIRECTORY utldir AS '/tmp/utldir';
Set the utl_file.umask configuration parameter. The following setting allows the file
owner any permission. Group users and other users are permitted any permission except
for the execute permission.
SET utl_file.umask TO '0011';
In the same session during which the utl_file.umask parameter is set to the desired
value, run the UTL_FILE functions and procedures.
DECLARE
v_utlfile UTL_FILE.FILE_TYPE;
v_directory VARCHAR2(50) := 'utldir';
v_filename VARCHAR2(20) := 'utlfile';
BEGIN
v_utlfile := UTL_FILE.FOPEN(v_directory, v_filename, 'w');
UTL_FILE.PUT_LINE(v_utlfile, 'Simple one-line file');
DBMS_OUTPUT.PUT_LINE('Created file: ' || v_filename);
UTL_FILE.FCLOSE(v_utlfile);
END;
The permission settings on the resulting file show that group users and other users have
read and write permissions on the file as well as the file owner.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 272
Database Compatibility for Oracle® Developers
Built-in Package Guide
$ pwd
/tmp/utldir
$ ls -l
total 4
-rw-rw-rw- 1 enterprisedb enterprisedb 21 Jul 24 16:04 utlfile
This parameter can also be set on a per role basis with the ALTER ROLE command, on a
per database basis with the ALTER DATABASE command, or for the entire database server
instance by setting it in the postgresql.conf file.
3.20.2 FCLOSE
The FCLOSE procedure closes an open file.
FCLOSE(file IN OUT FILE_TYPE)
Parameters
file
Variable of type FILE_TYPE containing a file handle of the file to be closed.
3.20.3 FCLOSE_ALL
The FLCLOSE_ALL procedures closes all open files. The procedure executes successfully
even if there are no open files to close.
FCLOSE_ALL
3.20.4 FCOPY
The FCOPY procedure copies text from one file to another.
FCOPY(location VARCHAR2, filename VARCHAR2,
dest_dir VARCHAR2, dest_file VARCHAR2
[, start_line PLS_INTEGER [, end_line PLS_INTEGER ] ])
Parameters
location
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 273
Database Compatibility for Oracle® Developers
Built-in Package Guide
Directory name, as stored in pg_catalog.edb_dir.dirname, of the directory
containing the file to be copied.
filename
Name of the source file to be copied.
dest_dir
Directory name, as stored in pg_catalog.edb_dir.dirname, of the directory
to which the file is to be copied.
dest_file
Name of the destination file.
start_line
Line number in the source file from which copying will begin. The default is 1.
end_line
Line number of the last line in the source file to be copied. If omitted or null,
copying will go to the last line of the file.
Examples
The following makes a copy of a file, C:\TEMP\EMPDIR\empfile.csv, containing a
comma-delimited list of employees from the emp table. The copy, empcopy.csv, is then
listed.
CREATE DIRECTORY empdir AS 'C:/TEMP/EMPDIR';
DECLARE
v_empfile UTL_FILE.FILE_TYPE;
v_src_dir VARCHAR2(50) := 'empdir';
v_src_file VARCHAR2(20) := 'empfile.csv';
v_dest_dir VARCHAR2(50) := 'empdir';
v_dest_file VARCHAR2(20) := 'empcopy.csv';
v_emprec VARCHAR2(120);
v_count INTEGER := 0;
BEGIN
UTL_FILE.FCOPY(v_src_dir,v_src_file,v_dest_dir,v_dest_file);
v_empfile := UTL_FILE.FOPEN(v_dest_dir,v_dest_file,'r');
DBMS_OUTPUT.PUT_LINE('The following is the destination file, ''' ||
v_dest_file || '''');
LOOP
UTL_FILE.GET_LINE(v_empfile,v_emprec);
DBMS_OUTPUT.PUT_LINE(v_emprec);
v_count := v_count + 1;
END LOOP;
EXCEPTION
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 274
Database Compatibility for Oracle® Developers
Built-in Package Guide
WHEN NO_DATA_FOUND THEN
UTL_FILE.FCLOSE(v_empfile);
DBMS_OUTPUT.PUT_LINE(v_count || ' records retrieved');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;
The following is the destination file, 'empcopy.csv'
7369,SMITH,CLERK,7902,17-DEC-80,800,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81,1600,300,30
7521,WARD,SALESMAN,7698,22-FEB-81,1250,500,30
7566,JONES,MANAGER,7839,02-APR-81,2975,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81,1250,1400,30
7698,BLAKE,MANAGER,7839,01-MAY-81,2850,,30
7782,CLARK,MANAGER,7839,09-JUN-81,2450,,10
7788,SCOTT,ANALYST,7566,19-APR-87,3000,,20
7839,KING,PRESIDENT,,17-NOV-81,5000,,10
7844,TURNER,SALESMAN,7698,08-SEP-81,1500,0,30
7876,ADAMS,CLERK,7788,23-MAY-87,1100,,20
7900,JAMES,CLERK,7698,03-DEC-81,950,,30
7902,FORD,ANALYST,7566,03-DEC-81,3000,,20
7934,MILLER,CLERK,7782,23-JAN-82,1300,,10
14 records retrieved
3.20.5 FFLUSH
The FFLUSH procedure flushes unwritten data from the write buffer to the file.
FFLUSH(file FILE_TYPE)
Parameters
file
Variable of type FILE_TYPE containing a file handle.
Examples
Each line is flushed after the NEW_LINE procedure is called.
DECLARE
v_empfile UTL_FILE.FILE_TYPE;
v_directory VARCHAR2(50) := 'empdir';
v_filename VARCHAR2(20) := 'empfile.csv';
CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
v_empfile := UTL_FILE.FOPEN(v_directory,v_filename,'w');
FOR i IN emp_cur LOOP
UTL_FILE.PUT(v_empfile,i.empno);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.ename);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.job);
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 275
Database Compatibility for Oracle® Developers
Built-in Package Guide
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.mgr);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.hiredate);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.sal);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.comm);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.deptno);
UTL_FILE.NEW_LINE(v_empfile);
UTL_FILE.FFLUSH(v_empfile);
END LOOP;
DBMS_OUTPUT.PUT_LINE('Created file: ' || v_filename);
UTL_FILE.FCLOSE(v_empfile);
END;
3.20.6 FOPEN
The FOPEN function opens a file for I/O.
filetype FILE_TYPE FOPEN(location VARCHAR2,
filename VARCHAR2,open_mode VARCHAR2
[, max_linesize BINARY_INTEGER ])
Parameters
location
Directory name, as stored in pg_catalog.edb_dir.dirname, of the directory
containing the file to be opened.
filename
Name of the file to be opened.
open_mode
Mode in which the file will be opened. Modes are: a - append to file; r - read