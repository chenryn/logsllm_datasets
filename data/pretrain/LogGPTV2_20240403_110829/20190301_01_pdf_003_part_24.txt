### Parameters

- **buf**: Contains the encoded string that will be translated to the specified character set and then encoded by `TEXT_ENCODE`.
- **encode_charset**: Specifies the character set to which the value will be translated before encoding. The default value is `NULL`.
- **encoding**: Specifies the encoding type used by `TEXT_ENCODE`. You can specify:
  - `UTL_ENCODE.BASE64` for base-64 encoding.
  - `UTL_ENCODE.QUOTED_PRINTABLE` for quoted printable encoding. This is the default.

### Examples

The following example demonstrates how to use the `TEXT_ENCODE` and `TEXT_DECODE` functions to encode and then decode a string:

```sql
edb=# SELECT UTL_ENCODE.TEXT_ENCODE('What is the date?', 'BIG5', UTL_ENCODE.BASE64) FROM DUAL;
 text_encode 
--------------
 V2hhdCBpcyB0aGUgZGF0ZT8=
(1 row)

edb=# SELECT UTL_ENCODE.TEXT_DECODE('V2hhdCBpcyB0aGUgZGF0ZT8=', 'BIG5', UTL_ENCODE.BASE64) FROM DUAL;
 text_decode 
-------------------
 What is the date?
(1 row)
```

### 3.19.9 UUDECODE

Use the `UUDECODE` function to translate and decode a uuencoded string to its original `RAW` value. The function signature is:

```sql
UUDECODE(r IN RAW)
```

This function returns a `RAW` value.

**Note**: If you are using the Advanced Server `UUDECODE` function to decode uuencoded data created by the Oracle implementation of the `UTL_ENCODE.UUENCODE` function, you must first set the Advanced Server configuration parameter `utl_encode.uudecode_redwood` to `TRUE` before invoking the `UUDECODE` function on the Oracle-created data. For example, this situation may occur if you migrated Oracle tables containing uuencoded data to an Advanced Server database.

The uuencoded data created by the Oracle version of the `UUENCODE` function results in a format that differs from the uuencoded data created by the Advanced Server `UUENCODE` function. As a result, attempting to use the Advanced Server `UUDECODE` function on Oracle uuencoded data will result in an error unless the configuration parameter `utl_encode.uudecode_redwood` is set to `TRUE`.

If you are using the Advanced Server `UUDECODE` function on uuencoded data created by the Advanced Server `UUENCODE` function, then `utl_encode.uudecode_redwood` must be set to `FALSE`, which is the default setting.

#### Parameters

- **r**: Contains the uuencoded string that will be translated to `RAW`.

#### Examples

Before executing the following example, run the command:

```sql
SET bytea_output = escape;
```

This command instructs the server to escape any non-printable characters and display `BYTEA` or `RAW` values in a readable form. For more information, refer to the Postgres Core Documentation available at: [https://www.postgresql.org/docs/11/static/datatype-binary.html](https://www.postgresql.org/docs/11/static/datatype-binary.html).

```sql
edb=# SET bytea_output = escape;
SET
edb=# SELECT UTL_ENCODE.UUENCODE('What is the date?') FROM DUAL;
 uuencode 
--------------------------------------------------------------------
 begin 0 uuencode.txt\01215VAA="!I<R!T:&4@9&%T93\\`\012`\012end\012
(1 row)

edb=# SELECT UTL_ENCODE.UUDECODE('begin 0 uuencode.txt\01215VAA="!I<R!T:&4@9&%T93\\`\012`\012end\012') FROM DUAL;
 uudecode 
-------------------
 What is the date?
(1 row)
```

### 3.19.10 UUENCODE

Use the `UUENCODE` function to translate `RAW` data into a uuencoded formatted string. The function signature is:

```sql
UUENCODE(r IN RAW, type IN INTEGER DEFAULT 1, filename IN VARCHAR2 DEFAULT NULL, permission IN VARCHAR2 DEFAULT NULL)
```

This function returns a `RAW` value.

#### Parameters

- **r**: Contains the `RAW` string that will be translated to uuencode format.
- **type**: An `INTEGER` value or constant that specifies the type of uuencoded string that will be returned. The default value is `1`. Possible values are:
  - `1`: `complete`
  - `2`: `header_piece`
  - `3`: `middle_piece`
  - `4`: `end_piece`
- **filename**: A `VARCHAR2` value that specifies the file name to be embedded in the encoded form. If not specified, `UUENCODE` will include a filename of `uuencode.txt` in the encoded form.
- **permission**: A `VARCHAR2` value that specifies the permission mode. The default value is `NULL`.

#### Examples

Before executing the following example, run the command:

```sql
SET bytea_output = escape;
```

This command instructs the server to escape any non-printable characters and display `BYTEA` or `RAW` values in a readable form. For more information, refer to the Postgres Core Documentation available at: [https://www.postgresql.org/docs/11/static/datatype-binary.html](https://www.postgresql.org/docs/11/static/datatype-binary.html).

```sql
edb=# SET bytea_output = escape;
SET
edb=# SELECT UTL_ENCODE.UUENCODE('What is the date?') FROM DUAL;
 uuencode 
--------------------------------------------------------------------
 begin 0 uuencode.txt\01215VAA="!I<R!T:&4@9&%T93\\`\012`\012end\012
(1 row)

edb=# SELECT UTL_ENCODE.UUDECODE('begin 0 uuencode.txt\01215VAA="!I<R!T:&4@9&%T93\\`\012`\012end\012') FROM DUAL;
 uudecode 
-------------------
 What is the date?
(1 row)
```

### 3.20 UTL_FILE

The `UTL_FILE` package provides the capability to read from and write to files on the operating system's file system. Non-superusers must be granted `EXECUTE` privilege on the `UTL_FILE` package by a superuser before using any of the functions or procedures in the package. For example, the following command grants the privilege to user `mary`:

```sql
GRANT EXECUTE ON PACKAGE SYS.UTL_FILE TO mary;
```

Additionally, the operating system username, `enterprisedb`, must have the appropriate read and/or write permissions on the directories and files to be accessed using the `UTL_FILE` functions and procedures. If the required file permissions are not in place, an exception will be thrown in the `UTL_FILE` function or procedure.

A handle to the file to be written to or read from is used to reference the file. The file handle is defined by a public variable in the `UTL_FILE` package named `UTL_FILE.FILE_TYPE`. A variable of type `FILE_TYPE` must be declared to receive the file handle returned by calling the `FOPEN` function. The file handle is then used for all subsequent operations on the file.

References to directories on the file system are done using the directory name or alias assigned to the directory using the `CREATE DIRECTORY` command. The procedures and functions available in the `UTL_FILE` package are listed in the following table:

| Function/Procedure | Return Type | Description |
|--------------------|-------------|-------------|
| `FCLOSE(file IN OUT)` | n/a | Closes the specified file identified by `file`. |
| `FCLOSE_ALL` | n/a | Closes all open files. |
| `FCOPY(location, filename, dest_dir, dest_file [, start_line [, end_line ]])` | n/a | Copies `filename` in the directory identified by `location` to `dest_file` in `dest_dir`, starting from `start_line` to `end_line`. |
| `FFLUSH(file)` | n/a | Forces data in the buffer to be written to disk in the file identified by `file`. |
| `FOPEN(location, filename, open_mode [, max_linesize])` | `FILE_TYPE` | Opens `filename` in the directory identified by `location`. |
| `FREMOVE(location, filename)` | n/a | Removes the specified file from the file system. |
| `FRENAME(location, filename, dest_dir, dest_file [, overwrite])` | n/a | Renames the specified file. |
| `GET_LINE(file, buffer OUT)` | n/a | Reads a line of text into variable `buffer` from the file identified by `file`. |
| `IS_OPEN(file)` | `BOOLEAN` | Determines whether or not the given file is open. |
| `NEW_LINE(file [, lines])` | n/a | Writes an end-of-line character sequence into the file. |
| `PUT(file, buffer)` | n/a | Writes `buffer` to the given file. `PUT` does not write an end-of-line character sequence. |
| `PUT_LINE(file, buffer)` | n/a | Writes `buffer` to the given file. An end-of-line character sequence is added by the `PUT_LINE` procedure. |
| `PUTF(file, format [, arg1 ] [, ...])` | n/a | Writes a formatted string to the given file. Up to five substitution parameters, `arg1,...arg5`, may be specified for replacement in `format`. |

Advanced Server's implementation of `UTL_FILE` is a partial implementation compared to Oracle's version. Only the functions and procedures listed in the table above are supported.

#### UTL_FILE Exception Codes

If a call to a `UTL_FILE` procedure or function raises an exception, you can use the condition name to catch the exception. The `UTL_FILE` package reports the following exception codes compatible with Oracle databases:

| Exception Code | Condition Name |
|----------------|----------------|
| `-29283` | `invalid_operation` |
| `-29285` | `write_error` |
| `-29284` | `read_error` |
| `-29282` | `invalid_filehandle` |
| `-29287` | `invalid_maxlinesize` |
| `-29281` | `invalid_mode` |
| `-29280` | `invalid_path` |

### 3.20.1 Setting File Permissions with `utl_file.umask`

When a `UTL_FILE` function or procedure creates a file, there are default file permissions as shown below:

```
-rw------- 1 enterprisedb enterprisedb 21 Jul 24 16:08 utlfile
```

Note that all permissions are denied on users belonging to the `enterprisedb` group as well as all other users. Only the `enterprisedb` user has read and write permissions on the created file.

If you wish to have a different set of file permissions on files created by the `UTL_FILE` functions and procedures, you can accomplish this by setting the `utl_file.umask` configuration parameter.

The `utl_file.umask` parameter sets the file mode creation mask, similar to the Linux `umask` command. This is for usage only within the Advanced Server `UTL_FILE` package.

**Note**: The `utl_file.umask` parameter is not supported on Windows systems.

The value specified for `utl_file.umask` is a 3 or 4-character octal string that would be valid for the Linux `umask` command. The setting determines the permissions on files created by the `UTL_FILE` functions and procedures. (Refer to any information source regarding Linux or Unix systems for information on file permissions and the usage of the `umask` command.)

The following is an example of setting the file permissions with `utl_file.umask`:

1. Set up the directory in the file system to be used by the `UTL_FILE` package. Ensure the operating system account, `enterprisedb` or `postgres`, can read and write in the directory.

   ```sh
   mkdir /tmp/utldir
   chmod 777 /tmp/utldir
   ```

2. Issue the `CREATE DIRECTORY` command in `psql` to create the directory database object using the file system directory created in the preceding step.

   ```sql
   CREATE DIRECTORY utldir AS '/tmp/utldir';
   ```

3. Set the `utl_file.umask` configuration parameter. The following setting allows the file owner any permission. Group users and other users are permitted any permission except for the execute permission.

   ```sql
   SET utl_file.umask TO '0011';
   ```

4. In the same session during which the `utl_file.umask` parameter is set to the desired value, run the `UTL_FILE` functions and procedures.

   ```sql
   DECLARE
       v_utlfile UTL_FILE.FILE_TYPE;
       v_directory VARCHAR2(50) := 'utldir';
       v_filename VARCHAR2(20) := 'utlfile';
   BEGIN
       v_utlfile := UTL_FILE.FOPEN(v_directory, v_filename, 'w');
       UTL_FILE.PUT_LINE(v_utlfile, 'Simple one-line file');
       DBMS_OUTPUT.PUT_LINE('Created file: ' || v_filename);
       UTL_FILE.FCLOSE(v_utlfile);
   END;
   ```

The permission settings on the resulting file show that group users and other users have read and write permissions on the file as well as the file owner.

```sh
$ pwd
/tmp/utldir
$ ls -l
total 4
-rw-rw-rw- 1 enterprisedb enterprisedb 21 Jul 24 16:04 utlfile
```

This parameter can also be set on a per role basis with the `ALTER ROLE` command, on a per database basis with the `ALTER DATABASE` command, or for the entire database server instance by setting it in the `postgresql.conf` file.

### 3.20.2 FCLOSE

The `FCLOSE` procedure closes an open file.

```sql
FCLOSE(file IN OUT FILE_TYPE)
```

#### Parameters

- **file**: Variable of type `FILE_TYPE` containing a file handle of the file to be closed.

### 3.20.3 FCLOSE_ALL

The `FCLOSE_ALL` procedure closes all open files. The procedure executes successfully even if there are no open files to close.

```sql
FCLOSE_ALL
```

### 3.20.4 FCOPY

The `FCOPY` procedure copies text from one file to another.

```sql
FCOPY(location VARCHAR2, filename VARCHAR2, dest_dir VARCHAR2, dest_file VARCHAR2 [, start_line PLS_INTEGER [, end_line PLS_INTEGER ] ])
```

#### Parameters

- **location**: Directory name, as stored in `pg_catalog.edb_dir.dirname`, of the directory containing the file to be copied.
- **filename**: Name of the source file to be copied.
- **dest_dir**: Directory name, as stored in `pg_catalog.edb_dir.dirname`, of the directory to which the file is to be copied.
- **dest_file**: Name of the destination file.
- **start_line**: Line number in the source file from which copying will begin. The default is `1`.
- **end_line**: Line number of the last line in the source file to be copied. If omitted or null, copying will go to the last line of the file.

#### Examples

The following example makes a copy of a file, `C:\TEMP\EMPDIR\empfile.csv`, containing a comma-delimited list of employees from the `emp` table. The copy, `empcopy.csv`, is then listed.

```sql
CREATE DIRECTORY empdir AS 'C:/TEMP/EMPDIR';

DECLARE
    v_empfile UTL_FILE.FILE_TYPE;
    v_src_dir VARCHAR2(50) := 'empdir';
    v_src_file VARCHAR2(20) := 'empfile.csv';
    v_dest_dir VARCHAR2(50) := 'empdir';
    v_dest_file VARCHAR2(20) := 'empcopy.csv';
    v_emprec VARCHAR2(120);
    v_count INTEGER := 0;
BEGIN
    UTL_FILE.FCOPY(v_src_dir, v_src_file, v_dest_dir, v_dest_file);
    v_empfile := UTL_FILE.FOPEN(v_dest_dir, v_dest_file, 'r');
    DBMS_OUTPUT.PUT_LINE('The following is the destination file, ''' || v_dest_file || '''');
    LOOP
        UTL_FILE.GET_LINE(v_empfile, v_emprec);
        DBMS_OUTPUT.PUT_LINE(v_emprec);
        v_count := v_count + 1;
    END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        UTL_FILE.FCLOSE(v_empfile);
        DBMS_OUTPUT.PUT_LINE(v_count || ' records retrieved');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;
```

Output:

```
The following is the destination file, 'empcopy.csv'
7369,SMITH,CLERK,7902,17-DEC-80,800,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81,1600,300,30
7521,WARD,SALESMAN,7698,22-FEB-81,1250,500,30
7566,JONES,MANAGER,7839,02-APR-81,2975,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81,1250,1400,30
7698,BLAKE,MANAGER,7839,01-MAY-81,2850,,30
7782,CLARK,MANAGER,7839,09-JUN-81,2450,,10
7788,SCOTT,ANALYST,7566,19-APR-87,3000,,20
7839,KING,PRESIDENT,,17-NOV-81,5000,,10
7844,TURNER,SALESMAN,7698,08-SEP-81,1500,0,30
7876,ADAMS,CLERK,7788,23-MAY-87,1100,,20
7900,JAMES,CLERK,7698,03-DEC-81,950,,30
7902,FORD,ANALYST,7566,03-DEC-81,3000,,20
7934,MILLER,CLERK,7782,23-JAN-82,1300,,10
14 records retrieved
```

### 3.20.5 FFLUSH

The `FFLUSH` procedure flushes unwritten data from the write buffer to the file.

```sql
FFLUSH(file FILE_TYPE)
```

#### Parameters

- **file**: Variable of type `FILE_TYPE` containing a file handle.

#### Examples

Each line is flushed after the `NEW_LINE` procedure is called.

```sql
DECLARE
    v_empfile UTL_FILE.FILE_TYPE;
    v_directory VARCHAR2(50) := 'empdir';
    v_filename VARCHAR2(20) := 'empfile.csv';
    CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
    v_empfile := UTL_FILE.FOPEN(v_directory, v_filename, 'w');
    FOR i IN emp_cur LOOP
        UTL_FILE.PUT(v_empfile, i.empno);
        UTL_FILE.PUT(v_empfile, ',');
        UTL_FILE.PUT(v_empfile, i.ename);
        UTL_FILE.PUT(v_empfile, ',');
        UTL_FILE.PUT(v_empfile, i.job);
        UTL_FILE.PUT(v_empfile, ',');
        UTL_FILE.PUT(v_empfile, i.mgr);
        UTL_FILE.PUT(v_empfile, ',');
        UTL_FILE.PUT(v_empfile, i.hiredate);
        UTL_FILE.PUT(v_empfile, ',');
        UTL_FILE.PUT(v_empfile, i.sal);
        UTL_FILE.PUT(v_empfile, ',');
        UTL_FILE.PUT(v_empfile, i.comm);
        UTL_FILE.PUT(v_empfile, ',');
        UTL_FILE.PUT(v_empfile, i.deptno);
        UTL_FILE.NEW_LINE(v_empfile);
        UTL_FILE.FFLUSH(v_empfile);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Created file: ' || v_filename);
    UTL_FILE.FCLOSE(v_empfile);
END;
```

### 3.20.6 FOPEN

The `FOPEN` function opens a file for I/O.

```sql
filetype FILE_TYPE FOPEN(location VARCHAR2, filename VARCHAR2, open_mode VARCHAR2 [, max_linesize BINARY_INTEGER ])
```

#### Parameters

- **location**: Directory name, as stored in `pg_catalog.edb_dir.dirname`, of the directory containing the file to be opened.
- **filename**: Name of the file to be opened.
- **open_mode**: Mode in which the file will be opened. Modes are:
  - `a`: Append to file.
  - `r`: Read from file.
  - `w`: Write to file (overwrite existing file).
  - `w+`: Write to file (create new file if it does not exist).
  - `r+`: Read and write to file (file must already exist).
  - `a+`: Append and read from file (create new file if it does not exist).
- **max_linesize**: Maximum line size in bytes. The default value is `32767`.

#### Examples

```sql
DECLARE
    v_empfile UTL_FILE.FILE_TYPE;
    v_directory VARCHAR2(50) := 'empdir';
    v_filename VARCHAR2(20) := 'empfile.csv';
BEGIN
    v_empfile := UTL_FILE.FOPEN(v_directory, v_filename, 'w');
    -- Perform file operations
    UTL_FILE.FCLOSE(v_empfile);
END;
```