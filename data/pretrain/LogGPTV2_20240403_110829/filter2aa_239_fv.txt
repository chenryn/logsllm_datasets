      Book theBook = this.DataContext as Book;
      if (theBook ! = null)
      {
        MessageBox.Show(theBook.Title, theBook.Isbn)
;
      }
    }
34.7.4 更改通知
使用当前的双向绑定，可以读写对象中的数据。但如果数据不由用户修改，而是直接
在代码中修改，用户界面就接收不到更改信息。只要在用户控件中添加一个按钮，并实现
Click事件处理程序OnChangeBook，就可以验证这一点（代码文件
BooksDemoLib/Controls/BookUC.xaml）。
在处理程序的实现代码中，数据上下文中的图书变化了，但用户界面没有显示这个变
化（代码文件BooksDemoLib/Controls/BookUC.xaml.cs）。
    private void OnChangeBook(object sender, RoutedEventArgs e)
    {
      Book theBook = this.DataContext as Book;
      if (theBook ! = null)
      {
        theBook.Title = "Professional C# 6";
        theBook.Isbn = "978-0-470-31442-5";
      }
    }
为了把更改信息传递给用户界面，实体类必须实现INotifyPropertyChanged接口。这里
不是实现每个需要这个接口的类，而只需要创建BindableObject抽象基类。这个基类实现
了接口INotifyPropertyChanged。该接口定义了PropertyChanged事件，该事件在
OnPropertyChanged方法中触发。为了便于在派生类的属性设置器中触发该事件，
SetProperty方法修改了该属性，调用OnPropertyChanged方法，来触发该事件。这个方法在
C#中通过CallerMemberName属性来使用调用者信息。propertyName参数通过这个属性定
义为可选参数，C#编译器就会通过这个参数传递属性名，所以不需要在代码中添加硬编
码字符串（代码文件BooksDemoLib/Models/BindableObject.cs）：
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;
    namespace BooksDemo.Model
    {
      public abstract class BindableObject : INotifyPropertyChanged
      {
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
        PropertyChanged? .Invoke(this,
          new PropertyChangedEventArgs(propertyName));
        }
        protected void SetProperty(ref T item, T value,
          [CallerMemberName] string propertyName = null)
        {
        if (! EqualityComparer.Default.Equals(item, value))
        {
          item = value;
          OnPropertyChanged(propertyName);
        }
        }
      }
    }
  注意： 调用者信息参见第14章。
类Book现在改为派生自基类BindableObject，来继承INotifyPropertyChanged接口的实
现代码。属性设置器改为调用SetProperty方法，如下所示（代码文件
BooksDemoLib/Data/Book.cs）：
      using System.ComponentModel;
      using System.Collections.Generic;
      namespace Wrox.ProCSharp.WPF.Data
      {
        public class Book : BindableObject
        {
          public Book(string title, string publisher, string isbn,
                  params string[] authors)
          {
          Title = title;
          Publisher = publisher;
          Isbn = isbn;
          Authors = authors;
          }
          public Book()
          : this("unknown", "unknown", "unknown")
          {
          }
          private string _title;
          public string Title {
          get
          {
            return _title;
          }
          set
          {
            SetProperty(ref _title, value);
          }
          }
          private string _publisher;
          public string Publisher
          {
          get
          {
            return _publisher;
          }
          set
          {
            SetProperty(ref _publisher, value);
          }
          }
          private string _isbn;
          public string Isbn
          {
          get
          {
            return _isbn;
          }
          set
          {
            SetProperty(ref _isbn, value);
          }
          }
          public string[] Authors { get; }
          public override string ToString() => Title;
        }
      }
进行了这个修改后，就可以再次启动应用程序，以验证用户界面从事件处理程序中接
收到更改信息。
34.7.5 对象数据提供程序
除了在代码隐藏中实例化对象之外，还可以用XAML定义对象实例。为了在XAML中
引用代码隐藏中的类，必须引用在XML根元素中声明的名称空间。XML特性
xmlns:local=“clr-namespace:Wrox.ProCSharp.WPF”将.NET名称空间Wrox.ProCSharp.WPF赋
予XML名称空间别名local。
现在，在DockPanel资源中用Book元素定义Book类的一个对象。给XML特性Title、
Publisher和Isbn赋值，就可以设置Book类的属性值。x:Key="theBook"定义了资源的标识
符，以便引用book对象：
  注意： 如果要引用的.NET名称空间在另一个程序集中，就必须把该程序集添
加到XML声明中。
            xmlsn:sys="clr-namespace:System; assembly=mscorlib"
在TextBox元素中，用Binding标记扩展定义Source, 
Binding标记扩展引用theBook资
源。
因为所有TextBox元素都包含在同一个控件中，所以可以用父控件指定DataContext属
性，用TextBox绑定元素设置Path属性。因为Path属性是默认的，所以也可以在下面的代
码中删除Binding标记扩展：
除了直接在XAML代码中定义对象实例外，还可以定义一个对象数据提供程序，该提
供程序引用类，以调用方法。为了使用ObjectDataProvider，最好创建一个返回要显示的对
象的工厂类，如下面的BooksRepository类所示（代码文件
BooksDemoLib/Models/BooksRepository.cs）：
    using System.Collections.Generic;
    namespace BooksDemo.Models
    {
      public class BooksRepository
      {
        private List books = new List();
        public BooksRepository()
        {
        books.Add(new Book
        {
          Title = "Professional C# 5.0 and .NET 4.5.1",
          Publisher = "Wrox Press",
          Isbn = "978-1-118-83303-2"
        });
        }
        public Book GetTheBook() => books[0];
      }
    }
ObjectDataProvider元素可以在资源部分中定义。XML特性ObjectType定义了类的名
称，MethodName指定了获得book对象要调用的方法的名称（代码文件
BooksDemoLib/Controls/BookUC.xaml）：
用ObjectDataProvider类指定的属性如表34-9所示。
表34-9
ObjectDataProvider
说明
ObjectType
ObjectType属性定义了要创建的实例类型
ConstrutorParameters
使用ConstructorParameters集合可以在类中添加创建实例的
参数
MethodName
MethodName属性定义了由对象数据提供程序调用的方法的
名称
MethodParameters
使用MethodParameters属性，可以给通过MethodName属性
定义的方法指定参数
ObjectInstance
使用ObjectInstance属性，可以获取和设置由
ObjectDataProvider类使用的对象。例如，可以用编程方式指
定已有的对象，而不是定义ObjectType以便用
ObjectDataProvider实例化一个对象
Data
使用Data属性，可以访问用于数据绑定的底层对象。如果定
义了MethodName，则使用Data属性，可以访问从指定的方
法返回的对象
34.7.6 列表绑定
绑定到列表上比绑定到简单对象上更常见，这两种绑定非常类似。可以从代码隐藏中
将完整的列表赋予DataContext，也可以使用ObjectDataProvider访问一个对象工厂，以返
回一个列表。对于支持绑定到列表上的元素（如列表框），会绑定整个列表。对于只支持
绑定一个对象上的元素（如文本框），只绑定当前项。
使用BooksRepository类，现在返回一个Book对象列表（代码文件
BooksDemoLib/Models/BooksRepository. cs）：
    public class BooksRepository
    {
      private List _books = new List();
      public BooksRepository()
      {
        _books.Add(new Book("Professional C# 5.0 and .NET 4.5.1", "Wrox Press",
                      "978-1-118-83303-2", "Christian Nagel", "Jay Glynn",
                      "Morgan Skinner"));
        _books.Add(new Book("Professional C# 2012 and .NET 4.5", "Wrox Press",
                      "978-0-470-50225-9", "Christian Nagel", "Bill Evjen",
                      "Jay Glynn", "Karli Watson", "Morgan Skinner"));
        _books.Add(new Book("Professional C# 4 with .NET 4", "Wrox Press",
                      "978¨C0-470-19137-8", "Christian Nagel", "Bill Evjen",
                      "Jay Glynn", "Karli Watson", "Morgan Skinner"));
        _books.Add(new Book("Beginning Visual C# 2010", "Wrox Press",
                      "978-0-470-50226-6", "Karli Watson", "Christian Nagel",
                      "Jacob Hammer Pedersen", "Jon D. Reid",
                      "Morgan Skinner", "Eric White"));
        _books.Add(new Book("Windows 8 Secrets", "Wiley", "978-1-118-20413-9",
                      "Paul Thurrott", "Rafael Rivera"));
        _books.Add(new Book("C# 5 All-in-One for Dummies", "For Dummies",
                      "978-1-118-38536-5", "Bill Sempf", "Chuck Sphar"));
      }
      public IEnumerable GetBooks() => _books;
    }
要使用列表，应新建一个BooksUC用户控件。这个控件的XAML代码包含的标签和文
本框控件可以显示一本书的值，它包含的列表框控件可以显示一个图书列表。
ObjectDataProvider调用BookFactory的GetBooks（）方法，这个提供程序用于指定
DockPanel的DataContext。DockPanel把绑定的列表框和文本框作为其子控件。列表框和文
本框都通过数据绑定使用DockPanel的DataContext（代码文件
BooksDemoLib/Controls/BooksUC.xaml）。
            <Label Content="Publisher" Grid.Row="1" Grid.Column="0" Margin="10,0,
5,0"