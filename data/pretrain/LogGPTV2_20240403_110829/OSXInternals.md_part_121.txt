file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 88 of 153
EXC_BREAKPOINT SIGTRAP
EXC_EMULATION SIGEMT
EXC_SOFTWARE EXC_UNIX_ABORT SIGABRT
EXC_SOFTWARE EXC_UNIX_BAD_PIPE SIGPIPE
EXC_SOFTWARE EXC_UNIX_BAD_SYSCALL SIGSYS
EXC_SOFTWARE EXC_SOFT_SIGNAL SIGKILL
The difference between SIGBUS and SIGSEGV must be carefully noted. Both correspond to a bad memory
access, but for different reasons. A SIGBUS (bus error) occurs when the memory is valid in that it is
mapped, but the victim is not allowed to access it. Accessing page 0, which is normally mapped into each
address space with all access to it disallowed, will result in a SIGBUS. In contrast, a SIGSEGV
(segmentation fault) occurs when the memory address is invalid in that it is not even mapped.
The automatic conversion of Mach exceptions to signals does not preclude user-level handling of the
Mach exceptions underlying those signals. If there exists a task-level or thread-level exception handler, it
will receive the exception message instead of ux_handler(). Thereafter, the user's handler can handle the
exception entirely, performing any cleanup or corrective actions, or it may forward the initial exception
message to ux_handler(), which would cause the exception to be converted to a signal after all. This is
what the GNU debugger (GDB) does.
Moreover, instead of forwarding the initial exception message, a user's exception handler can also send a
new message to ux_handler(). This would require send rights to ux_exception_port, which is the
original task exception port before the task-level or thread-level exception handler is installed by the user.
A rather convoluted way of sending a software signal to a process would be to package and send the
relevant information in a Mach exception message. (The exception type, code, and subcode would be
EXC_SOFTWARE, EXC_SOFT_SIGNAL, and the signal number, respectively.)
9.8.9. Exceptions, Signals, and Debugging
Even though signal mechanisms in modern Unix systems have greatly improved, the relative cleanliness
of Mach's exception-handling mechanism is still evident, especially when it comes to debugging. Since
exceptions are essentially queued messages, a debugger can receive and record all exceptions that have
occurred in a program since it was last examined. Multiple excepting threads can remain suspended until
the debugger has dequeued and examined all exception messages. Such examination may include
retrieving the victim's entire exception context. These features allow a debugger to determine a program's
state more precisely than traditional signal semantics would allow.
Moreover, an exception handler runs in its own thread, which may be in the same task or in a different
task altogether. Therefore, exception handlers do not require the victim thread's resources to run. Even
though Mac OS X does not support distributed Mach IPC, Mach's design does not preclude exception
handlers from running on a different host.
We saw that exception handlers can be designated in a fine-grained manner, as each exception type can
have its own handler, which may further be per-thread or per-task. It is worthwhile to note that a thread-
level exception handler is typically suitable for error handling, whereas a task-level handler is typically
suitable for debugging. Task-level handlers also have the debugger-friendly property that they remain in
effect across a fork() because task-level exception ports are inherited by the child process.
9.8.10. The ptrace() System Call
Mac OS X provides the ptrace() system call for process tracing and debugging, although certain ptrace
() requests that are supported on FreeBSD are not implemented on Mac OS X, for example, PT_READ_I,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 89 of 153
PT_READ_D, PT_WRITE_I, PT_WRITE_D, PT_GETREGS, PT_SETREGS, and several others. Operations
equivalent to those missing from the Mac OS X implementation of ptrace() can be typically performed
through Mach-specific routines. For example, reading or writing program memory can be done through
Mach VM routines.[14] Similarly, thread registers can be read or written through Mach thread routines.
[14] Note, however, that the Mach VM routines are not optimal for operating on small
amounts of data.
Moreover, ptrace() on Mac OS X provides certain requests that are specific to Mac OS X, such as those
listed here.
 PT_SIGEXC Deliver signals as Mach exceptions.
 PT_ATTACHEXC Attach to a running process and also apply the effects of PT_SIGEXC to it.
 PT_THUPDATE Send a signal to the given Mach thread.
If PT_SIGEXC is applied to a process, when there is a signal to be delivered, issignal()
[bsd/dkern/kern_sig.c] calls do_bsdexception() [bsd/kern/kern_sig.c] to generate a Mach
exception message instead. The exception's type, code, and subcode are EXC_SOFTWARE,
EXC_SOFT_SIGNAL, and the signal number, respectively. do_bsdexception(), which is analogous to the
doexception() function we saw in Section 9.7.2, calls bsd_exception() [osfmk/kern/exception.c].
The latter calls one of the exception_raise functions.
9.9. Pipes
Ever since pipes were introduced in Third Edition UNIX (1973), they have been an integral feature of
Unix systems. The Unix program-stream redirection facility uses pipes. Therefore, Unix shells use pipes
extensively. Mac OS X provides the pipe() system call, which allocates and returns a pair of file
descriptors: The first is the read end, and the second is the write end. The two descriptors can provide an
I/O stream between two processes, thus serving as an IPC channel. However, pipes have several
limitations, some of which may be rather severe for certain applications.
Pipes are possible only between related processesthat is, those with a common ancestor.
The kernel buffer corresponding to a pipe consumes kernel memory.
Pipes support only untyped byte streams.
Historically, pipes have allowed only unidirectional data flow. The Single UNIX Specification
allows but does not require full-duplex pipes.
 Only writes below PIPE_BUF bytes in size are guaranteed to be atomic. PIPE_BUF is 512 bytes on
Mac OS X. The fpathconf() system call can be used to retrieve the value of PIPE_BUF given a
pipe descriptor.
You can use pipes only for local (non-networked) communication.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 90 of 153
Bidirectional Pipes
Not all of the shortcomings with pipes are universal. Certain operating systemsfor example,
FreeBSD and Solarisimplement bidirectional pipes, wherein the pair of descriptors returned
by the pipe system call is such that data written to one can be read on the other. Although the
Mac OS X pipe implementation is based on FreeBSD's, Mac OS X 10.4 does not provide
bidirectional pipes.
Moreover, it is possible to send a pipe descriptor to another, unrelated process through file
descriptor passing, which is supported on Mac OS X. We will see an example of descriptor
passing in Section 9.11.
Pipes are also called unnamed pipes, since there also exist named pipes (see Section 9.10). The kernel's
internal file descriptor type for a pipe descriptor is DTYPE_PIPE. Descriptors for other IPC mechanisms,
such as sockets, POSIX semaphores, and POSIX shared memory, have their own descriptor types. Table
98 shows the various descriptor types used in the kernel.
Table 98. File Descriptor Types Used in the Kernel
Descriptor Type Notes
DTYPE_VNODE File
DTYPE_SOCKET Socket-based communication end point
DTYPE_PSXSHM POSIX shared memory
DTYPE_PSXSEM POSIX semaphore
DTYPE_KQUEUE Kqueue
DTYPE_PIPE Pipe
DTYPE_FSEVENTS File system event notification descriptor
9.10. Named Pipes (Fifos)
A named pipealso called a fifois an abstraction that provides the functionality of an unnamed pipe but
uses the file system namespace to represent the pipe, allowing readers and writers to open the fifo file like
a regular file. A fifo can be created using the mkfifo() system call or through the mkfifo command-line
program.
If a fifo is opened for reading, the open() call will block if there are no writersthat is, if somebody else
does not have the fifo open for writing. Conversely, if a fifo is opened for writing, the open() will block
if there are no readers. It is possible to open a fifo in nonblocking mode by specifying the O_NONBLOCK
flag in the open() call. A nonblocking open for reading will return immediately, with a valid file
descriptor, even if there are no writers. A nonblocking open for writing, however, will return immediately
with an ENXIO error if there are no readers.
The Mac OS X implementation of fifos internally uses local (Unix Domain) stream socketsthat is, sockets
of type SOCK_STREAM in the AF_LOCAL domain.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 91 of 153
Although a fifo has physical existence on a file system, it must be different from a regular file for the
kernel to treat it as a communication channel with properties that regular files do not have. This is indeed
the case: Fifos are conceptually similar to block or character special files in how the file system treats
them. Consider a fifo on an HFS Plus volume. The mkfifo() system call simply calls the create operation
exported by the HFS Plus file system, additionally setting the type of the vnode as VFIFO. The file type is
stored as part of the BSD information structure (struct HFSPlusBSDInfo), which in turn is part of the
on-disk file metadata. Thereafter, whenever the fifo file is being looked up (typically for opening), the
corresponding vnode's file system operations table pointer is switched by HFS Plus to point to another
table, some (but not all) of whose operations are that of the fifo file system (fifofs).
Block and character devices on HFS Plus are handled similarly, except the special file system (specfs) is
used instead of fifofs. We will see more of fifofs and specfs in Chapter 11. Chapter 12 is entirely
dedicated to HFS Plus.
This way, opening a fifo file results in fifo_open() [bsd/miscfs/fifofs/fifo_vnops.c] being called.
On the first open of a fifo, fifo_open() creates two AF_LOCAL stream sockets: one for reading and the
other for writing. Similarly, several other system calls, in particular read() and write(), eventually
resolve to fifofs functions.
9.11. File Descriptor Passing
On a Unix system, a file descriptor is an integer that represents an open file in a process.[15] Each file
descriptor is an index into the process's kernel-resident file descriptor table. The descriptor is local to the
process in that it is meaningful only in the process that acquired the descriptorsay, by opening a file. In
particular, a process A cannot access a file that is open in another process B by simply using the value of
the descriptor representing that file in B.
[15] Section 11.5 discusses the kernel handling of file descriptors.
Many Unix systems support sending file descriptors from one process to another, unrelated process over
an AF_LOCAL socket. Mac OS X also provides this IPC mechanism. Figure 941 shows details of the
program-visible message buffer data structure involved in sending one or more file descriptors through the
sendmsg() system call.
Figure 941. Program-visible data structures involved in file descriptor passing
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 92 of 153
The msghdr structure encapsulates several parameters to sendmsg() and recvmsg(). It can contain a
pointer to a control buffer, which is ancillary data laid out as a control message structure consisting of a
header (struct cmsghdr) and data (immediately following the header). In our case, the data is a file
descriptor. Note that we have shown the msg_control field to point to a control buffer with one control
message. In theory, the buffer could contain multiple control messages, with msg_controllen adjusted
accordingly. The control buffer would then be a sequence of cmsghdr structures, each containing its
length. The Mac OS X implementation supports only one control message per control buffer.
Protocol processing for sendmsg() [bsd/kern/uipc_syscalls.c] eventually results in a call to
uipc_send() [bsd/kern/uipc_usrreq.c], which is passed a pointer to a control mbuf if the original call
to sendmsg() contained a valid control buffer pointer. If so, uipc_send() calls unp_internalize()
[bsd/kern/uipc_usrreq.c] to internalize the ancillary datait iterates over the list of file descriptors in
the buffer and converts each to its corresponding file structure (struct fileglob
[bsd/sys/file_internal.h]). unp_internalize() requires that the cmsg_level and cmsg_type fields
be set to SOL_SOCKET and SCM_RIGHTS, respectively. SCM_RIGHTS specifies that the control message data
contains access rights.
When such a message is received, the list of file structures is externalized by a call to unp_externalize
() [bsd/kern/uipc_usrreq.c]; for each file structure, a local file descriptor in the receiving process is
consumed to represent an open file. After a successful recvmsg(), the receiver can use such file
descriptors normally.
File descriptor passing has many conceptual parallels with passing port rights in a Mach IPC message.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 93 of 153
Let us look at a programming example of descriptor passing. We will write a descriptor-passing server
that serves a given file over an AF_LOCAL socket connection. A client will connect to this server, receive
the file descriptor, and then use the descriptor to read the file. The socket's address and the format of the
control message are specified in a common header file that will be shared between server and client
implementations. Figures 942, 943, and 944 show the common header file, the server's implementation,
and the client's implementation.
Figure 942. Common header file for the descriptor-passing client-server implementation
// fd_common.h
#ifndef _FD_COMMON_H_
#define _FD_COMMON_H_
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define SERVER_NAME "/tmp/.fdserver"
typedef union {
struct cmsghdr cmsghdr;
u_char msg_control[CMSG_SPACE(sizeof(int))];
} cmsghdr_msg_control_t;
#endif // _FD_COMMON_H_
Figure 943. Implementation of the descriptor-passing server
// fd_sender.c
#include "fd_common.h"
int setup_server(const char *name);
int send_fd_using_sockfd(int fd, int sockfd);
int
setup_server(const char *name)
{
int sockfd, len;
struct sockaddr_un server_unix_addr;
if ((sockfd = socket(AF_LOCAL, SOCK_STREAM, 0)) cmsg_len = CMSG_LEN(sizeof(int)); // data byte count
cmsghdrp->cmsg_level = SOL_SOCKET; // originating protocol
cmsghdrp->cmsg_type = SCM_RIGHTS; // protocol-specified type
// CMSG_DATA() returns a pointer to the data array associated with
// the cmsghdr structure pointed to by cmsghdrp
*((int *)CMSG_DATA(cmsghdrp)) = fd;
if ((ret = sendmsg(sockfd, &msg, 0)) \n", argv[0]);
exit(1);
}
if ((sockfd = setup_server(SERVER_NAME)) < 0) {
fprintf(stderr, "failed to set up server\n");
exit(1);
}
if ((fd = open(argv[1], O_RDONLY)) < 0) {
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 95 of 153
perror("open");
close(sockfd);
exit(1);
}
listen(sockfd, 0);
for (;;) {
len = sizeof(client_unix_addr);
csockfd = accept(sockfd, (struct sockaddr *)&client_unix_addr, &len);
if (csockfd < 0) {
perror("accept");
close(sockfd);
exit(1);
}
if ((send_fd_using_sockfd(fd, csockfd) < 0))
fprintf(stderr, "failed to send file descriptor (fd = %d)\n", fd);
else
fprintf(stderr, "file descriptor sent (fd = %d)\n", fd);
close(sockfd);
close(csockfd);
break;