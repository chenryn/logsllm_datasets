title:Mining Multivariate Discrete Event Sequences for Knowledge Discovery
and Anomaly Detection
author:Bin Nie and
Jianwu Xu and
Jacob Alter and
Haifeng Chen and
Evgenia Smirni
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Mining Multivariate Discrete Event Sequences
for Knowledge Discovery and Anomaly Detection
Bin Nie
William and Mary
Williamsburg, VA
PI:EMAIL
Jianwu Xu
NEC Laboratories America
Princeton, NJ
PI:EMAIL
Jacob Alter
William and Mary
Williamsburg, VA
PI:EMAIL
Haifeng Chen
NEC Laboratories America
Princeton, NJ
PI:EMAIL
Evgenia Smirni
William and Mary
Williamsburg, VA
PI:EMAIL
Abstract—Modern physical systems deploy large numbers of
sensors to record at different time-stamps the status of different
systems components via measurements such as temperature,
pressure, speed, but also the component’s categorical state.
Depending on the measurement values, there are two kinds of
sequences: continuous and discrete. For continuous sequences,
there is a host of state-of-the-art algorithms for anomaly detection
based on time-series analysis, but there is a lack of effective
methodologies that are tailored speciﬁcally to discrete event
sequences.
This paper proposes an analytics framework for discrete
event sequences for knowledge discovery and anomaly detection.
During the training phase, the framework extracts pairwise rela-
tionships among discrete event sequences using a neural machine
translation model by viewing each discrete event sequence as
a “natural
language”. The relationship between sequences is
quantiﬁed by how well one discrete event sequence is “trans-
lated” into another sequence. These pairwise relationships among
sequences are aggregated into a multivariate relationship graph
that clusters the structural knowledge of the underlying system
and essentially discovers the hidden relationships among discrete
sequences. This graph quantiﬁes system behavior during normal
operation. During testing, if one or more pairwise relationships
are violated, an anomaly is detected. The proposed framework
is evaluated on two real-world datasets: a proprietary dataset
collected from a physical plant where it is shown to be effective in
extracting sensor pairwise relationships for knowledge discovery
and anomaly detection, and a public hard disk drive dataset
where its ability to effectively predict upcoming disk failures is
illustrated.
Index Terms—anomaly detection, categorical event sequences,
discrete event sequences, rare events, unsupervised learning,
physical plant failures, disk failures
I. INTRODUCTION
Today’s information technology systems consist of many
heterogeneous components working concurrently. Similarly,
a typical industrial plant contains heat-generating units, tur-
bine/generator units, condensers, and pump systems. Hundreds
to thousands of sensors of various types may be deployed
in these components to monitor a host of system attributes.
The collected data are analyzed to obtain system status; this
may include being fed into log analytics engines to learn
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00067
552
An additional challenge is that anomalies are typically very
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:40 UTC from IEEE Xplore.  Restrictions apply. 
about system structure, detect anomalous behavior, aid sys-
tem administration and maintenance, and/or diagnose system
failures [6], [8], [9], [18], [21], [28] In a physical plant, the
collected sensor data may consist of continuous measurements
(e.g., temperature, pressure, utilization) and/or discrete ones
(e.g., system states such as ON/OFF or command execution
orders). Discrete data typically have a categorical format. For
example, a software controller may record event information
in the form of time stamps that signify the start and completion
of a job.
The challenge here is to use measurements to understand the
joint behavior of different system components [7], [29], [36],
[39]. One way to model joint behavior is to model pairwise
relationships among system components using regression [17].
This has the beneﬁt of using far fewer parameters than
modeling a full joint distribution of the data and can lead
to more readily interpretable results. However, the fact that
different sensors record system states in the form of continuous
time series (i.e., consisting of numerical variables) or discrete
event time sequences (i.e., consisting of categorical variables)
introduces additional difﬁculties as regression models are not
readily applicable to discrete sequences. Categorical variables
cannot be meaningfully assigned to numeric values. For ex-
ample, if a sensor has three levels—low, medium, and high—
these could easily be assigned the values {0, 1, 2} or equiva-
lently {1, 10, 100}. Furthermore, many regression models are
ﬁt based on the assumption of Gaussian error distributions,
which is unhelpful in the case of discrete data.
In practice, a large percentage of signals collected in com-
plex systems are in the format of categorical variables [21].
For example, in a typical physical plant, the percentage of
sensors that produce discrete event sequences can be as high
as 90%. Operation management
technologies designed for
continuous sequences have to either discard the discrete event
sequences or rely on extensive feature engineering efforts to
“translate” discrete sequences in continuous format, which
requires domain-speciﬁc knowledge [46].
rare. For example, for the proprietary dataset used in this paper,
there are only two anomalies in a month. Similarly, for the two
datasets in [45], the number of anomalies is less than three per
month. Such datasets are extremely imbalanced [6], [29], [30]
and the use of supervised learning on those is infeasible as su-
pervised learning would require years of system measurements
to collect enough anomalies in order to achieve good perfor-
mance for the minority class [24], [44], [45]. Unsupervised
learning algorithms such as K-Means [10], [43] and one-class
SVM [35] can be used instead, as they build models based
entirely on samples from normal system operation periods and
detect outliers that fall out of the learned distribution [4], [35],
[43]. Unfortunately, existing unsupervised algorithms require
continuous sequences as input.
In order to resolve the aforementioned challenges, this paper
presents a novel framework for knowledge discovery and
anomaly detection for multivariate discrete event sequences.
In the remaining of this paper and for ease of presentation,
we assume that each discrete event sequence is generated
by a sensor. Knowledge discovery is achieved by mining
the interdependence relationship of sequences during normal
system operating times via the creation of pairwise relation-
ships among sensors generating discrete event sequences. The
pairwise sensor relationships are organized in the form of
a multivariate relationship graph. This directed graph can
be used to cluster sensors into connected components in
subgraphs that capture physical or functional relationships
among sensors. Since the multivariate relationship graph re-
ﬂects normal system operation, when an anomaly occurs,
the relationships among sensor pairs may break down. These
broken relationships serve as signs of abnormal behaviors.
Core to the proposed solution is the identiﬁcation of an
effective metric to quantify the pairwise relationship between
two discrete event sequences. To achieve this, we resort to
neural machine translation (NMT) models [23]. The intuition
is that if we assign a distinct character to each discrete system
state, then discrete event sequences are translated into a list of
letters. We can then derive a sensor “language” by carefully
portioning sequences of characters into words and sentences.
With this transformation, NMT models are able to translate
sentences of the source sensor to sentences of the target
sensor, similar to translating from a source language to a
target one. Translation quality is typically evaluated using the
BiLingual Evaluation Understudy (BLEU) score [31] that can
quantify the relationship between two discrete event sequences
and eventually between the two sensors that produce these
sequences. Based on this quantiﬁcation, we are able to build
the multivariate relationship graph, which can be used to
discover system anomalies.
Our contributions are summarized as follows:
• We design a novel process to quantify pairwise relation-
ships between discrete event sequences by leveraging NMT
models originally designed for natural languages.
• We propose a methodology for discrete event sequences
reported by sensors in real-world systems.
– This methodology is generic. It directly works on cate-
gorical variables and does not rely on domain knowledge,
thus it can be readily applied to any system with discrete
event sequences.
– This methodology is unsupervised. By capturing pairwise
relationships among sensors during normal system op-
eration, we build a multivariate relationship graph that
provides useful information for knowledge discovery and
anomaly detection.
We show the effectiveness of the proposed methodology on a
real world system log of a physical plant that consists of 90%
discrete event sequences. We further validate the proposed
methodology with a public dataset of hard disk drive (HDD)
failures [1] that illustrates how the methodology can work for
continuous time series that are discretized.
II. METHODOLOGY
In this section we describe the data preparation process,
the algorithms used to construct
the pairwise relationship
among the multivariate discrete event sequences, and how this
information can be used for knowledge discovery and anomaly
detection.
Figure 1 gives an overview. The left two boxes present
the process of transforming multivariate discrete event se-
quences into multiple sensor “languages” composed of many
“sentences”. We then leverage NMT models to quantify the
relationships of two sensors by translating sensor “languages”
from one to the other. The next step is to build a mul-
tivariate relationship graph using the pairwise relationships
among sensors. This relationship graph is built based on this
quantiﬁcation (i.e.,
translation scores) and provides useful
information for knowledge discovery (i.e., exploring structures
among various system components) and system-level anomaly
detection (i.e., whether the system encounters an abnormal
state).
A. Construction of Multivariate Relationship Graph
The multivariate discrete event sequences are composed
of multiple event sequences collected from multiple sensors
t , k ∈ [1, 2, ..., N], t ∈ [1, 2, ..., T]},
which are deﬁned as {Xk
where N is the total number of sensors, T is the total length of
the training sequences, and Xk
t is record of a single event for
sensor k (see the leftmost box in Figure 1). Xk
t captures for
sensor k at time t the sensor’s state: e.g., “on” and “off” for a
switch or “status 1”, “status 2”, “status 3” for a recording
unit, a command execution (i.e., “open” and “close” for a
valve), or any other categorical information. The sensor output
is evenly sampled which implies that the intervals between any
two consecutive samples are the same. The cardinality of each
event sequence is limited as the states of the sensor status are
limited.
1) Sensor Encryption: Each event record is processed and
converted into a standard coding schema in order to transform
the sensor event sequences into different “languages” using
the following steps:
• Sequence Filtering: The ﬁrst step removes meaningless
event sequences. If all events in a sequence are identical
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:40 UTC from IEEE Xplore.  Restrictions apply. 
553
(cid:2)(cid:6)(cid:6)(cid:9)(cid:8)(cid:10)(cid:5)(cid:1)(cid:3)(cid:11)(cid:4)(cid:8)(cid:10)(cid:8)(cid:10)(cid:7)
(cid:2)(cid:10)(cid:9)(cid:8)(cid:10)(cid:5)(cid:1)(cid:3)(cid:5)(cid:12)(cid:13)(cid:8)(cid:10)(cid:7)
(cid:8)(cid:28)(cid:19)(cid:27)(cid:18)(cid:29)(cid:11)(cid:25)(cid:18)(cid:11)(cid:27)(cid:14)(cid:1)(cid:3)(cid:18)(cid:26)(cid:12)(cid:25)(cid:14)(cid:27)(cid:14)(cid:1)(cid:4)(cid:29)(cid:14)(cid:21)(cid:27)(cid:1)
(cid:10)(cid:14)(cid:24)(cid:28)(cid:14)(cid:21)(cid:12)(cid:14)(cid:26)
(cid:11)(cid:7)(cid:7)
(cid:11)(cid:7)(cid:7)
(cid:2)(cid:4)
(cid:2)(cid:1)
(cid:11)(cid:10)
(cid:2)(cid:5)
(cid:18)(cid:17)
(cid:11)(cid:7)(cid:7)
(cid:2)(cid:1)(cid:6)(cid:3)
(cid:11)(cid:10)
(cid:2)(cid:3)
(cid:2)(cid:6)(cid:10)(cid:14)(cid:11)(cid:13)(cid:1)(cid:19)
(cid:14)(cid:15)(cid:4)(cid:15)(cid:16)(cid:14)(cid:19)(cid:14)(cid:15)(cid:4)(cid:15)(cid:16)(cid:14)(cid:20)(cid:14)(cid:15)(cid:4)(cid:15)(cid:16)(cid:14)(cid:21)
(cid:18)(cid:17)
(cid:14)(cid:15)(cid:4)(cid:15)(cid:16)(cid:14)(cid:19)(cid:14)(cid:15)(cid:4)(cid:15)(cid:16)(cid:14)(cid:22)
(cid:2)(cid:3)
(cid:2)(cid:6)(cid:10)(cid:14)(cid:11)(cid:13)(cid:1)(cid:20)
(cid:2)(cid:4)
(cid:2)(cid:5)
(cid:11)(cid:12)(cid:6)(cid:10) (cid:5)(cid:9)(cid:11)(cid:14)(cid:6) (cid:5)(cid:9)(cid:11)(cid:14)(cid:6)
(cid:2)(cid:3)
(cid:2)(cid:6)(cid:10)(cid:14)(cid:11)(cid:13)(cid:1)(cid:8)
(cid:2)(cid:4)
(cid:2)(cid:5)
(cid:3)(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)(cid:6)(cid:3)
(cid:18)
(cid:18)
(cid:18)(cid:17)
(cid:11)(cid:12)(cid:6)(cid:10) (cid:5)(cid:9)(cid:11)(cid:14)(cid:6)
(cid:2)(cid:1)(cid:6)(cid:3)
(cid:2)(cid:1)
(cid:27)(cid:25)(cid:11)(cid:21)(cid:26)(cid:15)(cid:22)(cid:25)(cid:20)
(cid:2)
(cid:2)
(cid:2)
(cid:10)(cid:14)(cid:21)(cid:26)(cid:22)(cid:25)(cid:1)(cid:7)(cid:11)(cid:21)(cid:16)(cid:28)(cid:11)(cid:16)(cid:14)(cid:26)
(cid:7)(cid:3)(cid:4)(cid:8)(cid:3)(cid:4)(cid:1)(cid:3)
(cid:8)(cid:11)
(cid:15)(cid:14)
(cid:9)(cid:5)(cid:6)(cid:2)
(cid:13)(cid:16)(cid:14)(cid:4) (cid:13)(cid:16)(cid:14)(cid:5) (cid:13)(cid:16)(cid:14)(cid:4)
(cid:8)(cid:12)
(cid:8)(cid:10)
(cid:2)(cid:8)(cid:10)(cid:13)(cid:11)(cid:12)(cid:1)(cid:16)
(cid:7)(cid:3)(cid:4)(cid:8)(cid:3)(cid:4)(cid:1)(cid:3)
(cid:9)(cid:5)(cid:6)(cid:2)
(cid:13)(cid:17)(cid:14)(cid:4) (cid:13)(cid:17)(cid:14)(cid:5) (cid:13)(cid:17)(cid:14)(cid:6)
(cid:8)(cid:10)
(cid:8)(cid:12)
(cid:2)(cid:8)(cid:10)(cid:13)(cid:11)(cid:12)(cid:1)(cid:17)
(cid:7)(cid:3)(cid:4)(cid:8)(cid:3)(cid:4)(cid:1)(cid:3)
(cid:9)(cid:5)(cid:6)(cid:2)
(cid:13)(cid:9)(cid:14)(cid:4)