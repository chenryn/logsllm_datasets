|                      |   `hp_sw`{.literal}：为使用 Ac                |
|                      | tive/Standby 固件的 HP 存储阵列检查路径状态。 |
|                      |   `rdac`{.literal}：                          |
|                      | 为 LSI/Engenio RDAC 存储控制器检查路径状态。  |
|                      |   `direc                                      |
|                      | tio`{.literal}：使用直接 I/O 读取第一个扇区。 |
|                      |   -----------------------------------         |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    | 多路径设备的额外功能。现有的唯一功能是        |
| features `{.literal} | `queue_if_no_path`{.literal}，它与将          |
|                      | `no_path_retry`{.literal} 设为                |
|                      | `queue`{.literal}                             |
|                      | 一致                                          |
|                      | 。有关使用这个功能可能出现问题的详情，请参考  |
|                      | [第 5.6 节 "有 queue_if_no_path               |
|                      | 功能的问题"](#MPIO_admin-tro                  |
|                      | ubleshoot.html#queueifnopath_issues){.xref}。 |
+----------------------+-----------------------------------------------+
| ` prio `{.literal}   |   --------------------------------------      |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定要获得路径优先值所需调用的默认程序      |
|                      | 及参数。例如：SPC-3 中的 ALUA 字节提供了一个  |
|                      | 可改变的 `prio`{.literal} 值。可能的值包括：  |
|                      |   `const`{.literal}：为所有路径设定优先权 1。 |
|                      |                                               |
|                      |  `emc`{.literal}：为 EMC 阵列生成路径优先权。 |
|                      |   `alua`{.li                                  |
|                      | teral}：根据 SCSI-3 ALUA 设置生成路径优先权。 |
|                      |   `tpg_pref`{.literal}：根据 SCSI-            |
|                      | 3 ALUA 设置生成路径优先权，使用首选端口字节。 |
|                      |   `ont                                        |
|                      | ap`{.literal}：为 NetApp 阵列生成路径优先权。 |
|                      |   `rdac`{.literal}：                          |
|                      | 为 LSI/Engenio RDAC 控制程序生成路径优先权。  |
|                      |   `hp_sw`{.literal}：为 Compaq                |
|                      | /HP 控制程序在激活/等待模式中生成路径优先权。 |
|                      |   `hds`{.literal}：为                         |
|                      |  Hitachi HDS Modular 存储阵列生成路径优先权。 |
|                      |   --------------------------------------      |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    |   -----------------------------------------   |
| failback `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   管理路径组群出错切换。                      |
|                      |   `immediate`{.literal} 值指                  |
|                      | 定立即恢复到包含活跃路径的最高级别路径组群。  |
|                      |   `manual`{.literal} 值指定不需要立           |
|                      | 即恢复，只有在操作者干预的情况下会发生恢复。  |
|                      |   `followover`{.literal} 值指定当路径组的第   |
|                      | 一个路径成为活跃路径时应执行自动恢复。这可让  |
|                      | 节点在另一个节点请求故障修复时不会自动恢复。  |
|                      |   大于 0 的数字值指定推迟出错切换，以秒表示。 |
|                      |   -----------------------------------------   |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` r                  | 如果将其设为                                  |
| r_weight `{.literal} | `priorities`{.literal}，就不会在调用          |
|                      | `selector`{.literal}                          |
|                      | 选择下一个路径前向路径发送                    |
|                      | `rr_min_io`{.literal} 请求，而是由            |
|                      | `rr_min_io`{.literal}                         |
|                      | 乘以路径优先权决定发送的请求数，即由          |
|                      | `prio`{.literal} 功能决定。如果将其设定为     |
|                      | `u                                            |
|                      | niform`{.literal}，则所有路径都有相同的加权。 |
+----------------------+-----------------------------------------------+
| ` no_pa              |   -----------------------                     |
| th_retry `{.literal} | --------------------------------------------- |
|                      |   这个属性的数字值指定系                      |
|                      | 统在禁用队列前应该试图使用失败的路径的次数。  |
|                      |   `fail`{.literal} 值说明立即失败，无需排队。 |
|                      |   `                                           |
|                      | queue`{.literal} 表示固定路径前排队不会停止。 |
|                      |   -----------------------                     |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` r                  | 指定                                          |
| r_min_io `{.literal} | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O 请求数。这个设置值用于运行内核为 2.6.31   |
|                      | 之前的系统。使用新版本的系统应使用            |
|                      | `rr_min_io_rq`{.literal}。默认值为 1000。     |
+----------------------+-----------------------------------------------+
| ` rr_m               | 使用 request-based device-mapper-multipath    |
| in_io_rq `{.literal} | 指定                                          |
|                      | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O                                           |
|                      | 请求数。                                      |
|                      | 这个设置值用于运行当前内核的系统。在使用内核  |
|                      | 2.6.31 版本之前的系统应使用                   |
|                      | `rr_min_io`{.literal}。默认值为 1。           |
+----------------------+-----------------------------------------------+
| ` fast_io_           | 在 FC                                         |
| fail_tmo `{.literal} | 远程                                          |
|                      | 端口发现问题后，无法在那个远程端口设备中执行  |
|                      | I/O 前 SCSI 层要等待的时间。默认值应小于      |
|                      | `dev_loss_tmo`{.literal} 值。将其设定为       |
|                      | `off`{.literal} 则会禁用超时。                |
+----------------------+-----------------------------------------------+
| ` dev_               | 在 FC                                         |
| loss_tmo `{.literal} | 远程端口发现问题后，到从该系统中删除它之前    |
|                      | SCSI                                          |
|                      | 层                                            |
|                      | 要等待的时间。将其设定为无限，则会将其设定为  |
|                      | 2147483647 秒，或者 68 年。                   |
+----------------------+-----------------------------------------------+
| ` flush_on_          | 如果将其设定为                                |
| last_del `{.literal} | `yes`{.literal}，`multipathd`{.command}       |
|                      | 守护进程将                                    |
|                      | 在删除了最后一个到某个设备的路径时禁用排队。  |
+----------------------+-----------------------------------------------+
| ` user_friend        | 如果将其设为                                  |
| ly_names `{.literal} | `yes`{.literal}，即指定该系统应该使用文件     |
|                      | `/etc/multipath/bindings`{.filename}          |
|                      | 为该多路径分配一个持久且唯一的别名，格式为    |
|                      | `mpath`{.literal}*`n`*。如果设定为            |
|                      | `no`{.literal}，即指定该系统应使用 WWID       |
|                      | 作为该多路径的别名。在这两                    |
|                      | 种情况下，您在这里指定的数值将被您在配置文件  |
|                      | `multipaths`{.literal}                        |
|                      | 部分指定的具体设备别名覆盖。默认值为          |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` retain_attached_hw | （红帽企业版 Linux 6.4                        |
| _handler `{.literal} | 及之后的版本）如果将这个参数设定为            |
|                      | `yes`{.literal}，且 scsi                      |
|                      | 层已为该路径设备附加可硬件句柄，multipath     |
|                      | 将不会强制该设备使用                          |
|                      | `mutipath.conf`{.filename} 文件指定的         |
|                      | `hardware_handler`{.literal}。如果该 scsi     |
|                      | 层没有附加硬件句柄，multipath                 |
|                      | 将继续使用其配置的硬件句柄。                  |
+----------------------+-----------------------------------------------+
| ` det                | （红帽企业版 Linux 6.4                        |
| ect_prio `{.literal} | 及之后的版本）如果将这个参数设定为            |
|                      | `yes`{.literal}，multipath                    |
|                      | 将首先检查该设备是否支持                      |
|                      | ALUA，如果支持，则自动为该设备分配            |
|                      | `alua`{.literal} 排序器。如果该设备不支持     |
|                      | ALUA，则按管用方法确定排序器。                |
+----------------------+-----------------------------------------------+
:::
:::
::: para
以下示例显示了多路径配置文件的 `device`{.literal} 条目。
:::
``` screen
#	}
#	device {
#		vendor			"COMPAQ  "
#		product			"MSA1000         "
#		path_grouping_policy	multibus
#		path_checker		tur
#		rr_weight		priorities
#	}
#}
```
:::
:::
[]{#MPIO_admin-troubleshoot.html}
::: chapter
::: titlepage
# [⁠]{#MPIO_admin-troubleshoot.html#MPIO_admin-troubleshoot}第 5 章 DM-Multipath 管理及故障排除 {.title}
:::
::: para
本章提供了在运行的系统中管理 DM-Multipath 的信息，其中包括以下部分：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    重新定义在线多路径设备大小
    :::
-   ::: para
    将 root 设备动单一路径设备移动到多路径设备中
    :::
-   ::: para
    将 swap 设备动单一路径设备移动到多路径设备中。
    :::
-   ::: para
    多路径守护进程
    :::
-   ::: para
    大量 LUN 造成的问题
    :::
-   ::: para
    有 queue_if_no_path 功能的问题
    :::
-   ::: para
    `multipath`{.command} 命令输出
    :::
-   ::: para
    使用 `multipath`{.command} 命令进行多路径查询
    :::
-   ::: para
    `multipath`{.command} 命令选项
    :::
-   ::: para
    用 `dmsetup`{.command} 命令进行多路径查询
    :::
-   ::: para
    使用 `multipathd`{.command} 互动控制台进行故障排除
    :::
:::
::: section
::: titlepage
# [⁠]{#MPIO_admin-troubleshoot.html#online_device_resize}5.1. 重新定义在线多路径设备大小 {.title}
:::
[]{#MPIO_admin-troubleshoot.html#idm139642169836656 .indexterm}
::: para
如果您要重新定义在线多路径设备，请按以下步骤操作。
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    重新定义您的物理设备大小。
    :::
2.  ::: para
    使用以下命令查找 LUN 的路径：
    :::
    ``` screen
    # multipath -l
    ```
3.  ::: para
    重新定义您的路径大小。对于 SCSI 设备，在 `rescan`{.filename}
    文件中写入 1 以便让 SCSI 驱动器重新扫描，如以下命令：
    :::
    ``` screen
    # echo 1 > /sys/block/device_name/device/rescan 
    ```
4.  ::: para
    运行重新定义多路径大小的命令重新定义您的多路径设备大小：
    :::
    ``` screen
    # multipathd -k'resize map mpatha'
    ```
5.  ::: para
    重新定义文件系统大小（假设没有使用 LVM 或者 DOS 分区）：
    :::
    ``` screen
    # resize2fs /dev/mapper/mpatha
    ```
:::
:::
::: section
::: titlepage
# [⁠]{#MPIO_admin-troubleshoot.html#move_root_to_multipath}5.2. 将 root 文件系统从单一路径设备移动到多路径设备中 {.title}
:::
[]{#MPIO_admin-troubleshoot.html#idm139642176275760
.indexterm}[]{#MPIO_admin-troubleshoot.html#idm139642149837856
.indexterm}
::: para
如果您在单一路径设备中安装您的系统，并后来在 root
文件系统中添加了另一个路径，则您需要将您的 root
文件系统移动到多路径设备中。本小节记录了从单一路径移动到多路径设备的过程。
:::
::: para
安装 `device-mapper-multipath`{.literal} 软件包后执行以下步骤：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    执行以下命令创建 `/etc/multipath.conf`{.filename}
    配置文件，载入多路径模块并为 `multipathd`{.command} 将
    `chkconfig`{.command} 设定为 `on`{.literal}：
    :::
    ``` screen
    # mpathconf --enable
    ```
    ::: para
    有关 `mpathconf`{.command} 命令输出的详情请参考 [第 3.1 节 "设置
    DM-Multipath"](#mpio_setup.html#setup_procedure){.xref}。
    :::
2.  ::: para
    编辑 `/etc/multipath.conf`{.filename} 文件的 `blacklist`{.literal}
    和 `blacklist_exceptions`{.literal} 部分，如 [第 4.2 节
    "配置文件黑名单"](#mpio_configfile.html#config_file_blacklist){.xref}
    所述。
    :::
3.  ::: para
    要确定您正确设定了配置文件，您可以运行 `/sbin/multipath`{.command}
    命令，使用 `-v3`{.option} 选项查看该多路径守护进程是否尝试为您的
    root 设备创建多路径设备。该命令会失败，因为 root
    设备正在使用中，但该命令的输出应该显示该 root 设备所在路径列表。
    :::
    ::: para
    您应该可在命令输出中看到有以下格式的行：
    :::
    ``` screen
    WWID  H:B:T:L devname MAJOR:MINOR
    ```
    ::: para
    例如：如果在 `sda`{.literal} 或者它的一个分区中设定您的 root
    文件系统，您可在输出中看到类似如下的行：
    :::
    ``` screen
    ===== paths list =====
    ...
    1ATA     WDC WD800JD-75MSA3                           WD-WMAM9F 1:0:0:0 sda 8:0
    ...
    ```
    ::: para
    在之后的输出结果中，您应该可以看到分配给多路经设备的 root 设备：
    :::
    ``` screen
    time | devname: ownership set to mpathdev
    ```
    ::: para
    例如：输出结果显示如下：
    :::
    ``` screen
    Jun 14 06:48:21 | sda: ownership set to mpatha
    ```
    ::: para
    您将看到一条说明告诉您无法使用该命令的以下格式创建多路经设备：
    :::
    ``` screen
    time | mpathdev: domap (0) failure for create/reload map
    ```
    ::: para
    如上面的示例所示，您可以在命令输出中看到以下行：
    :::
    ``` screen
    Jun 14 06:48:21 | mpatha: domap (0) failure for create/reload map
    ```
4.  ::: para
    要使用 `multipath`{.literal} 重建 `initramfs`{.literal}
    文件系统，请使用附带以下选项的 `dracut`{.command} 命令：
    :::
    ``` screen
    # dracut --force --add multipath --include /etc/multipath /etc/multipath
    ```
5.  ::: para
    如果您的 root 设备不是 LVM 卷，且使用设备名称挂载，则您需要边界
    `fstab`{.filename} 文件切换为适当的多路径设备名称。如果您的 root
    设备是 LVM 设备或者使用 UUID 或者其它属性挂载，就不需要这个步骤。
    :::
    ::: orderedlist
    1.  ::: para
        使用第三步中描述的步骤运行代 `-v3`{.option} 选项
        `/sbin/multipath`{.command} 命令确定 root 设备的 WWID。
        :::
    2.  ::: para
        在 `/etc/multipath.conf`{.filename} 文件中为 root 设备设定别名。
        :::
        ``` screen
        multipaths {
            multipath {