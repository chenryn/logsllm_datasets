addresses.
To provide more comprehensible error reports, UC-
USENIX Association  
24th USENIX Security Symposium  61
KLEE emits a path summary for each error. The path
summary provides a complete listing of the source code
executed along the path, along with the path constraints
added by each line of source. The path constraints are ex-
pressed in a C-like notation and use the available LLVM
debug information to determine the types and names of
each ﬁeld. Below we list example constraints that UC-
KLEE included with error reports for BIND (§ 3.2):
Code:
Constraint:
REQUIRE(VALID_RBTDB(rbtdb));
uc_dns_rbtdb1.common.impmagic == 1380074548
Code:
Constraint:
if (source->is_file)
uc_inputsource1.is_file == 0
if (c == EOF)
uc_var2[uc_var1.current + 1] == 255
Code:
Constraint:
5.3 General KLEE optimizations
We added several scalability improvements to UC-KLEE
that apply more broadly to symbolic execution tools.
To reduce path explosion in library functions such as
strlen, we implemented special versions that avoid
forking paths by using symbolic if-then-else constructs.
We also introduced scores of rules to simplify symbolic
expressions [42]. We elide further details due to space.
5.3.1 Lazy constraints
During our experiments, we faced query timeouts and
low coverage for several benchmarks that we traced to
symbolic division and remainder operations. The worst
cases occurred when an unsigned remainder operation
had a symbolic value in the denominator. To address
this challenge, we implemented a solution we refer to
as lazy constraints. Here, we defer evaluation of expen-
sive queries until we ﬁnd an error. In the common case
where an error does not occur or two functions exhibit
crash equivalence along a path, our tool avoids ever is-
suing potentially expensive queries. When an error is
detected, the tool re-checks that the error path is feasible
(otherwise the error is invalid).
Figure 19(a) shows a simple example. With eager con-
straints (the standard approach), the if-statement at line
2 triggers an SMT query involving the symbolic integer
division operation y / z. This query may be expensive,
depending on the other path constraints imposed on y
and z. To avoid a potential query timeout, UC-KLEE in-
troduces a lazy constraint (Figure 19(b)). On line 1, it
replaces the result of the integer division operation with
a new, unconstrained symbolic value lazy x and adds
the lazy constraint lazy x = y / z to the current path.
At line 2, the resulting SMT query is the trivial expres-
sion lazy x > 10. Because lazy x is unconstrained,
UC-KLEE will take both the true and false branches fol-
lowing the if-statement. One of these branches may vi-
olate the constraints imposed on y and z, so UC-KLEE
must check that the lazy constraints are consistent with
the full set of path constraints prior to emitting any errors
1 :int x = y / z;
2 :if
3 :
(x > 10) /* query: y / z > 10 */
. . .
(a) Eager constraints (standard)
1 :int x = lazy x; /* adds lazy constraint: lazy x = y / z */
2 :if
3 :
(x > 10) /* query: lazy x > 10 */
. . .
(b) Lazy constraints
Figure 19: Lazy constraint used for integer division operation.
to the user (i.e., if the path later crashes).
In many cases,
the delayed queries are more efﬁ-
cient than their eager counterparts because additional
path constraints added after the division operation have
narrowed the solution space considered by the SMT
solver. If our tool determines that the path is infeasible,
it silently terminates the path. Otherwise, it reports the
error to the user.
5.4 Function pointers
Systems such as the Linux kernel, BIND, and OpenSSL
frequently use function pointers within struct types to
emulate object-oriented methods. For example, differ-
ent function addresses may be assigned depending on the
version negotiated for an SSL/TLS connection [20]. This
design poses a challenge for our technique because sym-
bolic inputs contain symbolic function pointers. When
our tool encounters an indirect call through one of these
pointers, it is unclear how to proceed.
We currently require that users specify concrete func-
tion pointers to associate with each type of object (as the
need arises). When our tool encounters an indirect call
through a symbolic pointer, it looks at the object’s debug
type information. If the user has deﬁned function point-
ers for that type of object, our tool executes the speci-
ﬁed function. Otherwise, it reports an error to the user
and terminates the path. The user can leverage these er-
rors to specify function pointers only when necessary.
For BIND, we found that most of these errors could be
eliminated by specifying function pointers for only six
types: three for memory allocation, and three for internal
databases. For OpenSSL, we speciﬁed function pointers
for only three objects: two related to support for multiple
SSL/TLS versions, and one related to I/O.
When running UC-KLEE’s checkers, we optionally al-
low the tool to skip unresolved function pointers, which
allows it to check more code but prevents veriﬁcation
guarantees for the affected functions (see § 4).
6 Related work
This paper builds on prior work in symbolic execu-
tion [4], particularly KLEE [5] and our early work on UC-
KLEE [43]. Unlike our previous work, which targeted
small library routines, this paper targets large systems
62  24th USENIX Security Symposium 
USENIX Association
and supports generalized checking.
Other recent work has used symbolic execution to
check patches. DiSE [39] performs whole program sym-
bolic execution but prunes paths unaffected by a patch.
Differential Symbolic Execution (DSE) [38] and regres-
sion veriﬁcation [21] use abstraction to achieve scala-
bility but may report false differences. By contrast, our
approach soundly executes complete paths through each
patched function, eliminating this source of false posi-
tives. Impact Summaries [2] complement our approach
by soundly pruning paths and ignoring constraints unaf-
fected by a patch.
SymDiff [27] provides a scalable solution to check the
equivalence of two programs with ﬁxed loop unrolling
but relies on imprecise, uninterpreted functions. Differ-
ential assertion checking (DAC) [28] is the closest to our
work and applies SymDiff to the problem of detecting
whether properties that hold in P also hold in P′, a gen-
eralization of crash equivalence. However, DAC suffers
from the imprecisions of SymDiff and reports false dif-
ferences when function calls are reordered by a patch.
Abstract semantic differencing [37] achieves scalability
through clever abstraction but, as with SymDiff, suffers
additional false positives due to over-approximation.
Recent work has used symbolic execution to gener-
ate regression tests exercising the code changed by a
patch [41, 31, 32]. While they can achieve high coverage,
these approaches use existing regression tests as a start-
ing point and greedily redirect symbolic branch decisions
toward a patch, exploring only a small set of execution
paths. By contrast, our technique considers all possible
intermediate program values as input (with caveats).
Dynamic instrumentation frameworks such as Val-
grind [34] and PIN [30] provide a ﬂexible interface for
checkers to examine a program’s execution at runtime
and ﬂag errors. However, these tools instrument a sin-
gle execution path running with concrete inputs, making
them only as effective as the test that supplies the inputs.
Similar to our use of generalized checking in UC-KLEE
is WOODPECKER [8], which uses symbolic execution to
check system-speciﬁc rules. Unlike UC-KLEE, WOOD-
PECKER applies to whole programs, so we expect it
would not scale well to large systems. However, WOOD-
PECKER aggressively prunes execution paths that are re-
dundant with respect to individual checkers, a technique
that would be useful in UC-KLEE.
Prior work in memory leak detection has used static
analysis [45], dynamic proﬁling [24], and binary rewrit-
ing [23]. Dynamic tools such as Purify [23] and Val-
grind [34] detect a variety of memory errors at run-
time, including uses of uninitialized data. CCured [33]
uses a combination of static analysis and runtime checks
to detect pointer errors. Our user input checker re-
lates to prior work in dynamic taint analysis, including
TaintCheck [35] and Dytan [7].
7 Conclusions and future work
We have presented UC-KLEE, a novel framework for
validating patches and applying checkers to individual
C/C++ functions using under-constrained symbolic ex-
ecution. We evaluated our tool on large-scale systems
code from BIND, OpenSSL, and the Linux kernel, and
we found a total of 79 bugs, including two OpenSSL
denial-of-service vulnerabilities.
One avenue for future work is to employ UC-KLEE as
a tool for ﬁnding general bugs (e.g., out-of-bounds mem-
ory accesses) in a single version of a function, rather than
cross-checking two functions or using specialized check-
ers. Our preliminary experiments have shown that this
use case results in a much higher rate of false positives,
but we did ﬁnd a number of interesting bugs, including
the OpenSSL denial-of-service attack for which advisory
CVE-2015-0291 [15, 22, 42] was issued.
In addition, we hope to further mitigate false positives
by using ranking schemes to prioritize error reports, and
by inferring invariants to reduce the need for manual an-
notations. In fact, many of the missing input precondi-
tions can be thought of as consequences of a weak type
system in C. We may target higher-level languages in the
future, allowing our framework to assume many built-in
invariants (e.g., that a length ﬁeld corresponds to the size
of an associated buffer).
Acknowledgements
The authors would like to thank Joseph Greathouse and
the anonymous reviewers for their valuable feedback.
In addition, the authors thank the LibreSSL developers
for their quick responses to our bug reports, along with
Evan Hunt and Sue Graves of ISC for granting us ac-
cess to the BIND git repository before it became public.
This work was supported by DARPA under agreements
1190029-276707 and N660011024088, by the United
States Air Force Research Laboratory (AFRL) through
contract FA8650-10-C-7024, and by a National Science
Foundation Graduate Research Fellowship under grant
number DGE-0645962. The views expressed in this pa-
per are the authors’ own.
References
[1] Alert (TA14-098A): OpenSSL ’Heartbleed’ vulnerability (CVE-
https://www.us-cert.gov/ncas/alerts/
2014-0160).
TA14-098A, April 2014.
[2] BACKES, J., PERSON, S., RUNGTA, N., AND TKACHUK, O.
Regression veriﬁcation using impact summaries. In Proc. of SPIN
Symposium on Model Checking of Software (SPIN) (2013).
[3] BIND. https://www.isc.org/downloads/bind/.
[4] BOYER, R. S., ELSPAS, B., AND LEVITT, K. N. Select – a
formal system for testing and debugging programs by symbolic
execution. ACM SIGPLAN Notices 10, 6 (June 1975), 234–45.
[5] CADAR, C., DUNBAR, D., AND ENGLER, D. KLEE: Unassisted
and automatic generation of high-coverage tests for complex sys-
USENIX Association  
24th USENIX Security Symposium  63
tems programs. In Proc. of Symp. on Operating Systems Design
and Impl (OSDI) (2008).
[6] CHOU, A.
On detecting heartbleed with static analysis.
http://security.coverity.com/blog/2014/Apr/
on-detecting-heartbleed-with-static-analysis.
html, 2014.
[7] CLAUSE, J., LI, W., AND ORSO, A. Dytan: a generic dynamic
In Proc. of Intl. Symp. on Software
taint analysis framework.
Testing and Analysis (ISSTA) (2007).
[8] CUI, H., HU, G., WU, J., AND YANG, J. Verifying systems
rules using rule-directed symbolic execution.
In Proc. of Intl.
Conf. on Architectural Support for Programming Languages and
Operating Systems (ASPLOS) (2013).
[9] CVE-2008-1447: DNS Cache Poisoning Issue (”Kaminsky
bug”). https://kb.isc.org/article/AA-00924.
[10] CVE-2012-3868. https://web.nvd.nist.gov/view/vuln/
detail?vulnId=CVE-2012-3868, Jul 2012.
[11] CVE-2014-0160. https://web.nvd.nist.gov/view/vuln/
detail?vulnId=CVE-2014-0160, April 2014.
[12] CVE-2014-0198. https://web.nvd.nist.gov/view/vuln/
detail?vulnId=CVE-2014-0198, May 2014.
[13] CVE-2014-3513. https://web.nvd.nist.gov/view/vuln/
detail?vulnId=CVE-2014-3513, Oct 2014.
[14] CVE-2015-0206. https://web.nvd.nist.gov/view/vuln/
detail?vulnId=CVE-2015-0206, Jan 2015.
[15] CVE-2015-0291. https://web.nvd.nist.gov/view/vuln/
detail?vulnId=CVE-2015-0291, Mar 2015.
[16] CVE-2015-0292. https://web.nvd.nist.gov/view/vuln/
detail?vulnId=CVE-2015-0292, Mar 2015.
[17] DENG, X., LEE, J., AND ROBBY. Bogor/kiasan: A k-bounded
symbolic execution for checking strong heap properties of open
systems. In Proc. of the 21st IEEE International Conference on
Automated Software Engineering (2006), pp. 157–166.
[18] ENGLER, D., AND DUNBAR, D. Under-constrained execution:
making automatic code destruction easy and scalable. In Proc.
of the Intl. Symposium on Software Testing and Analysis (ISSTA)
(2007).
[19] ENGLER, D., YU CHEN, D., HALLEM, S., CHOU, A., AND
CHELF, B. Bugs as deviant behavior: A general approach to
inferring errors in systems code. In Proc. of the 18th ACM Sym-
posium on Operating Systems Principles (SOSP ’01) (2001).
[20] FREIER, A. RFC 6101: The Secure Sockets Layer (SSL) Protocol
Version 3.0. Internet Engineering Task Force (IETF), Aug 2011.
[21] GODLIN, B., AND STRICHMAN, O. Regression veriﬁcation:
proving the equivalence of similar programs. Software Testing,
Veriﬁcation and Reliability 23, 3 (2013), 241–258.
[22] GOODIN, D. OpenSSL warns of two high-severity bugs, but no
Heartbleed. Ars Technica (March 2015).
[23] HASTINGS, R., AND JOYCE, B. Purify: Fast detection of mem-
ory leaks and access errors. In Proc. of the USENIX Winter Tech-
nical Conference (USENIX Winter ’92) (Dec. 1992), pp. 125–
138.
[24] HAUSWIRTH, M., AND CHILIMBI, T. M. Low-overhead mem-
ory leak detection using adaptive statistical proﬁling. In Proc. of
the Intl. Conf. on Architectural Support for Programming Lan-
guages and Operating Systems (ASPLOS) (2004).
[25] INTERNATIONAL TELECOMMUNICATION UNION. ITU-T Rec-
ommendation X.680: Abstract Syntax Notation One (ASN.1):
Speciﬁcation of basic notation, Nov 2008.
[26] KHURSHID, S., PASAREANU, C. S., AND VISSER, W. Gen-
eralized symbolic execution for model checking and testing. In
Proc. of Intl. Conf. on Tools and Algos. for the Construction and
Analysis of Sys. (2003).
[27] LAHIRI, S., HAWBLITZEL, C., KAWAGUCHI, M., AND RE-
BELO, H. SymDiff: A language-agnostic semantic diff tool for
imperative programs. In Proc. of Intl. Conf. on Computer Aided
Veriﬁcation (CAV) (2012).
[28] LAHIRI, S. K., MCMILLAN, K. L., SHARMA, R., AND HAW-
BLITZEL, C. Differential assertion checking. In Proc. of Joint
Meeting on Foundations of Software Engineering (FSE) (2013).
[29] LATTNER, C., AND ADVE, V. LLVM: A Compilation Frame-
work for Lifelong Program Analysis & Transformation. In Proc.
of the Intl. Symp. on Code Generation and Optimization (CGO)
(2004).
[30] LUK, C.-K., COHN, R., MUTH, R., PATIL, H., KLAUSER, A.,
LOWNEY, G., WALLACE, S., REDDI, V. J., AND HAZELWOOD,
K. Pin: building customized program analysis tools with dy-
namic instrumentation. In Proc. of ACM SIGPLAN Conf. on Pro-
gramming Language Design and Implementation (PLDI) (2005).
[31] MARINESCU, P. D., AND CADAR, C. High-coverage symbolic
patch testing. In Proc. of Intl. SPIN Symp. on Model Checking
Software (2012).
[32] MARINESCU, P. D., AND CADAR, C. KATCH: High-coverage
testing of software patches. In Proc. of 9th Joint Mtg. on Foun-
dations of Software Engineering (FSE) (2013).
[33] NECULA, G. C., MCPEAK, S., AND WEIMER, W. Ccured:
type-safe retroﬁtting of legacy code. In Proc. of Symp. on Princi-
ples of Programming Languages (POPL) (2002).
[34] NETHERCOTE, N., AND SEWARD, J. Valgrind: a framework
for heavyweight dynamic binary instrumentation.
In Proc. of
the ACM SIGPLAN 2007 Conference on Programming Language
Design and Implementation (PLDI ’07) (June 2007), pp. 89–100.
[35] NEWSOME, J., AND SONG, D. Dynamic taint analysis for auto-
matic detection, analysis, and signature generation of exploits on
commodity software. In Proc. of Network and Distributed Sys-
tems Security Symp. (NDSS) (2005).
[36] OpenSSL. https://www.openssl.org/source.
[37] PARTUSH, N., AND YAHAV, E. Abstract semantic differencing
for numerical programs. In Proc. of Intl. Static Analysis Sympo-
sium (SAS) (2013).
[38] PERSON, S., DWYER, M. B., ELBAUM, S., AND P ˘AS ˘AREANU,
C. S. Differential symbolic execution. In Proc. of ACM SIGSOFT
Intl. Symposium on Foundations of Software Engineering (FSE)
(2008), pp. 226–237.
[39] PERSON, S., YANG, G., RUNGTA, N., AND KHURSHID, S. Di-
rected incremental symbolic execution.
In Proc. of ACM SIG-
PLAN Conf. on Programming Language Design and Implemen-
tation (PLDI) (2011).
[40] P ˘AS ˘AREANU, C. S., AND RUNGTA, N. Symbolic PathFinder:
Symbolic execution of java bytecode. In Proc. of the IEEE/ACM
International Conf. on Automated Software Engineering (ASE)
(2010).
[41] QI, D., ROYCHOUDHURY, A., AND LIANG, Z. Test generation
to expose changes in evolving programs. In Proc. of IEEE/ACM
Intl. Conf. on Automated Software Engineering (ASE) (2010).
[42] RAMOS, D. A. Under-constrained symbolic execution: correct-
ness checking for real code. PhD thesis, Stanford University,
2015.
[43] RAMOS, D. A., AND ENGLER, D. R. Practical, low-effort equiv-
alence veriﬁcation of real code. In Proc. of Intl. Conf. on Com-
puter Aided Veriﬁcation (CAV) (2011).
[44] UNANGST, T. Commit e76e308f (tedu): on today’s episode of
things you didn’t want to learn. http://anoncvs.estpak.
ee/cgi-bin/cgit/openbsd-src/commit/lib/libssl?
id=e76e308f, Apr 2014.
[45] XIE, Y., AND AIKEN, A. Context- and path-sensitive memory
leak detection. In Proc. of the Intl. Symp. on Foundations of Soft-
ware Engineering (FSE) (2005).
[46] XIE, Y., AND AIKEN, A. Scalable error detection using boolean
satisﬁability.
In Proc. of the 32nd ACM SIGPLAN-SIGACT
Symp. on Principles of Programming Languages (POPL) (2005),
pp. 351–363.
64  24th USENIX Security Symposium 
USENIX Association