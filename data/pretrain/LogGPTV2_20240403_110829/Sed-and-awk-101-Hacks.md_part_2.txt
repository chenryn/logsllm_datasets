# Sed Command Operations

## Repeat Until End of Input File
- **Repeat** this process until the end of the input file is reached.
  > ![](media/image2.jpeg)
  **Figure**: Illustration of SED execution flow

## Print Pattern Space (p command)
Using the `sed p` command, you can print the current pattern space. You may wonder why you would need the `p` command, as `sed` prints the pattern buffer by default after executing its commands. However, the `p` command allows you to specifically control what is printed to stdout. Typically, when using `p`, you will use the `-n` option to suppress the default printing that occurs in the standard `sed` flow. Otherwise, if you execute `p` as one of the commands, the line will be printed twice.

### Example: Print Each Line Twice
```bash
$ sed 'p' employee.txt
101,John Doe,CEO
101,John Doe,CEO
102,Jason Smith,IT Manager
102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
104,Anand Ram,Developer
105,Jane Miller,Sales Manager
105,Jane Miller,Sales Manager
```

### Example: Print Each Line Once
```bash
$ sed -n 'p' employee.txt
101,John Doe,CEO
102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
105,Jane Miller,Sales Manager
```

#### Specifying an Address Range
If you don't specify an address range before the `sed` command, it matches all lines by default. Here are some examples of specifying an address range:

- **Print only the 2nd line:**
  ```bash
  $ sed -n '2 p' employee.txt
  102,Jason Smith,IT Manager
  ```

- **Print from line 1 through line 4:**
  ```bash
  $ sed -n '1,4 p' employee.txt
  101,John Doe,CEO
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  ```

- **Print from line 2 through the last line:**
  ```bash
  $ sed -n '2,$ p' employee.txt
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Manager
  ```

#### Modify Address Range
You can modify the address range using commas, plus signs, and tildes. For example:
- `n,m` indicates lines `n` through `m`.
- `n,+m` means `m` lines starting with `n`.
- `n~m` indicates every `m`th line starting from `n`.

- **Print only odd-numbered lines:**
  ```bash
  $ sed -n '1~2 p' employee.txt
  101,John Doe,CEO
  103,Raj Reddy,Sysadmin
  105,Jane Miller,Sales Manager
  ```

#### Pattern Matching
You can also specify a pattern (or pattern range) to match, as shown in the following examples:

- **Print lines matching the pattern "Jane":**
  ```bash
  $ sed -n '/Jane/ p' employee.txt
  105,Jane Miller,Sales Manager
  ```

- **Print lines starting from the 1st match of "Jason" until the 4th line:**
  ```bash
  $ sed -n '/Jason/,4 p' employee.txt
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  ```

- **Print lines starting from the 1st match of "Raj" until the last line:**
  ```bash
  $ sed -n '/Raj/,$ p' employee.txt
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Manager
  ```

- **Print lines starting from the line matching "Raj" until the line matching "Jane":**
  ```bash
  $ sed -n '/Raj/,/Jane/ p' employee.txt
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Manager
  ```

- **Print the line matching "Jason" and 2 lines immediately after that:**
  ```bash
  $ sed -n '/Jason/,+2 p' employee.txt
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  ```

## Delete Lines (d command)
Using the `sed d` command, you can delete lines. Note that the lines are only deleted from the output stream; the original input file remains unchanged.

- **Delete all lines:**
  ```bash
  $ sed 'd' employee.txt
  ```

- **Delete only the 2nd line:**
  ```bash
  $ sed '2 d' employee.txt
  101,John Doe,CEO
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Manager
  ```

- **Delete from line 1 through 4:**
  ```bash
  $ sed '1,4 d' employee.txt
  105,Jane Miller,Sales Manager
  ```

- **Delete from line 2 through the last line:**
  ```bash
  $ sed '2,$ d' employee.txt
  101,John Doe,CEO
  ```

- **Delete only odd-numbered lines:**
  ```bash
  $ sed '1~2 d' employee.txt
  102,Jason Smith,IT Manager
  104,Anand Ram,Developer
  ```

- **Delete lines matching the pattern "Manager":**
  ```bash
  $ sed '/Manager/ d' employee.txt
  101,John Doe,CEO
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  ```

- **Delete lines starting from the 1st match of "Jason" until the 4th line:**
  ```bash
  $ sed '/Jason/,4 d' employee.txt
  101,John Doe,CEO
  105,Jane Miller,Sales Manager
  ```

- **Delete lines starting from the 1st match of "Raj" until the last line:**
  ```bash
  $ sed '/Raj/,$ d' employee.txt
  101,John Doe,CEO
  102,Jason Smith,IT Manager
  ```

- **Delete lines starting from the line matching "Raj" until the line matching "Jane":**
  ```bash
  $ sed '/Raj/,/Jane/ d' employee.txt
  101,John Doe,CEO
  102,Jason Smith,IT Manager
  ```

- **Delete lines starting from the line matching "Jason" and 2 lines immediately after that:**
  ```bash
  $ sed '/Jason/,+2 d' employee.txt
  101,John Doe,CEO
  105,Jane Miller,Sales Manager
  ```

#### Useful Delete Examples
- **Delete all empty lines from a file:**
  ```bash
  $ sed '/^$/ d' employee.txt
  ```

- **Delete all comment lines (assuming comments start with #):**
  ```bash
  $ sed '/^#/ d' employee.txt
  ```

## Write Pattern Space to File (w command)
Using the `sed w` command, you can write the current pattern space to a file. By default, the pattern space is printed to stdout. If you want to write to a file but not to the screen, use the `-n` option.

- **Write the content of `employee.txt` to `output.txt` (and display on screen):**
  ```bash
  $ sed 'w output.txt' employee.txt
  101,John Doe,CEO
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Manager
  $ cat output.txt
  101,John Doe,CEO
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Manager
  ```

- **Write the content of `employee.txt` to `output.txt` but not to the screen:**
  ```bash
  $ sed -n 'w output.txt' employee.txt
  $ cat output.txt
  101,John Doe,CEO
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Manager
  ```

- **Write only the 2nd line:**
  ```bash
  $ sed -n '2 w output.txt' employee.txt
  $ cat output.txt
  102,Jason Smith,IT Manager
  ```

- **Write lines 1 through 4:**
  ```bash
  $ sed -n '1,4 w output.txt' employee.txt
  $ cat output.txt
  101,John Doe,CEO
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  ```

- **Write from line 2 through the last line:**
  ```bash
  $ sed -n '2,$ w output.txt' employee.txt
  $ cat output.txt
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Manager
  ```

- **Write only odd-numbered lines:**
  ```bash
  $ sed -n '1~2 w output.txt' employee.txt
  $ cat output.txt
  101,John Doe,CEO
  103,Raj Reddy,Sysadmin
  105,Jane Miller,Sales Manager
  ```

- **Write lines matching the pattern "Jane":**
  ```bash
  $ sed -n '/Jane/ w output.txt' employee.txt
  $ cat output.txt
  105,Jane Miller,Sales Manager
  ```

- **Write lines starting from the 1st match of "Jason" until the 4th line:**
  ```bash
  $ sed -n '/Jason/,4 w output.txt' employee.txt
  $ cat output.txt
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  ```

- **Write lines starting from the 1st match of "Raj" until the last line:**
  ```bash
  $ sed -n '/Raj/,$ w output.txt' employee.txt
  $ cat output.txt
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Manager
  ```

- **Write lines starting from the line matching "Raj" until the line matching "Jane":**
  ```bash
  $ sed -n '/Raj/,/Jane/ w output.txt' employee.txt
  $ cat output.txt
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Manager
  ```

- **Write the line matching "Jason" and the next 2 lines immediately after that:**
  ```bash
  $ sed -n '/Jason/,+2 w output.txt' employee.txt
  $ cat output.txt
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  ```

## Sed Substitute Command
The most powerful command in the stream editor is `substitute`. It has such power and so many options that we give it a whole chapter.

### Syntax
```bash
sed '[address-range|pattern-range] s/original-string/replacement-string/[substitute-flags]' inputfile
```
- **address-range or pattern-range** is optional. If not specified, `sed` will execute the substitute command on all lines.
- **s** -- tells `sed` to execute the substitute command.
- **original-string** -- the string to be searched for in the input file. This can also be a regular expression.
- **replacement-string** -- `sed` will replace `original-string` with this string.
- **substitute-flags** are optional. More on this in the next section.

> Remember that *the original file is not changed;* the substitution takes place in the pattern space buffer which is then printed to stdout.

### Examples
- **Replace all occurrences of "Manager" with "Director":**
  ```bash
  $ sed 's/Manager/Director/' employee.txt
  101,John Doe,CEO
  102,Jason Smith,IT Director
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Director
  ```

- **Replace "Manager" with "Director" only on lines that contain the keyword "Sales":**
  ```bash
  $ sed '/Sales/s/Manager/Director/' employee.txt
  101,John Doe,CEO
  102,Jason Smith,IT Manager
  103,Raj Reddy,Sysadmin
  104,Anand Ram,Developer
  105,Jane Miller,Sales Director
  ```

### Global Flag (g flag)
The `g` flag stands for global. By default, `sed` substitutes only the first occurrence of the `original-string` on each line. Use the `g` flag to change all occurrences.

- **Replace the 1st occurrence of lowercase "a" with uppercase "A":**
  ```bash
  $ sed 's/a/A/' employee.txt
  101,John Doe,CEO
  102,JAson Smith,IT Manager
  103,RAj Reddy,Sysadmin
  104,AnAnd Ram,Developer
  105,JAne Miller,Sales Manager
  ```

- **Replace all occurrences of lowercase "a" with uppercase "A":**
  ```bash
  $ sed 's/a/A/g' employee.txt
  101,John Doe,CEO
  102,JAson Smith,IT MAnAger
  103,RAj Reddy,SysAdmin
  104,AnAnd RAm,Developer
  105,JAne Miller,SAles MAnAger
  ```

### Number Flag (1, 2, 3... flag)
Use the number flag to specify a specific occurrence of the `original-string`. Only the n-th instance of `original-string` will trigger the substitution. Counting starts over on each line, and `n` can be anything from 1 to 512.

- **Replace the 2nd occurrence of lowercase "a" with uppercase "A":**
  ```bash
  $ sed 's/a/A/2' employee.txt
  101,John Doe,CEO
  102,Jason Smith,IT MAnager
  103,Raj Reddy,SysAdmin
  104,Anand RAram,Developer
  105,Janer Miller,SAles Manager
  ```

- **Change only the 2nd occurrence of "locate" to "find" in a file:**
  ```bash
  $ vi substitute-locate.txt
  locate command is used to locate files
  locate command uses database to locate files
  locate command can also use regex for searching
  $ sed 's/locate/find/2' substitute-locate.txt
  locate command is used to find files
  locate command uses database to find files
  locate command can also use regex for searching
  ```

### Print Flag (p flag)
The `p` flag stands for print. When the substitution is successful, it prints the changed line. Combine it with the `-n` option to suppress the default printing of all lines.

- **Print only the line that was changed by the substitute command:**
  ```bash
  $ sed -n 's/John/Johnny/p' employee.txt
  101,Johnny Doe,CEO
  ```

- **Change the 2nd instance of "locate" to "find" and print the result:**
  ```bash
  $ sed -n 's/locate/find/2p' substitute-locate.txt
  locate command is used to find files
  locate command uses database to find files
  ```

### Write Flag (w flag)
The `w` flag stands for write. When the substitution is successful, it writes the changed line to a file. Most people use the `p` flag instead and redirect the output to a file. We include this command for completeness.

- **Write only the line that was changed by the substitute command to `output.txt`:**
  ```bash
  $ sed -n 's/John/Johnny/w output.txt' employee.txt
  $ cat output.txt
  101,Johnny Doe,CEO
  ```

- **Change the 2nd instance of "locate" to "find", write the result to a file, and print all lines:**
  ```bash
  $ sed 's/locate/find/2w output.txt' substitute-locate.txt
  locate command is used to find files
  locate command uses database to find files
  locate command can also use regex for searching
  $ cat output.txt
  locate command is used to find files
  locate command uses database to find files
  ```

This comprehensive guide covers the essential `sed` commands and their usage, providing you with the tools to manipulate text effectively.