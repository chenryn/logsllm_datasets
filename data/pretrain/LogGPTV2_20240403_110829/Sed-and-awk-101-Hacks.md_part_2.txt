-   **Repeat** this again until the end of the input file is reached.
> ![](media/image2.jpeg)
**Fig**: Illustration of SED execution flow
## Print Pattern Space (p command)
Using the sed p command, you can print the current pattern space.
You may wonder why you would need the p command, since by default sed
prints the pattern buffer after executing its commands.
There are reasons, as you will see; the command allows you to
specifically control what is printed to stdout. Usually when p is used
you will use the -n option to suppress the the default printing that
happens as part of the standard sed flow. Otherwise, when execute p
(print) as one of the commands, the line will be printed twice.
> **The following example prints every line of employee.txt twice:**
\$ sed \'p\' employee.txt 101,John Doe,CEO 101,John Doe,CEO
102,Jason Smith,IT Manager 102,Jason Smith,IT Manager 103,Raj
Reddy,Sysadmin
103,Raj Reddy,Sysadmin 104,Anand Ram,Developer 104,Anand Ram,Developer
105,Jane Miller,Sales Manager 105,Jane Miller,Sales Manager
> **Print each line once (functionally the same as \'cat
> employee.txt\'):**
\$ sed -n \'p\' employee.txt 101,John Doe,CEO
102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
Ram,Developer 105,Jane Miller,Sales Manager
#### Specifying an Address Range
If you don\'t specify an address range before the sed command, by
default it matches all the lines. The following are some examples of
specifying an address range before the sed command.
> **Print only the 2nd line:**
>
> \$ sed -n \'2 p\' employee.txt 102,Jason Smith,IT Manager
>
> **Print from line 1 through line 4:**
>
> \$ sed -n \'1,4 p\' employee.txt 101,John Doe,CEO
>
> 102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
> Ram,Developer
>
> **Print from line 2 through the last line (\$ represents the last
> line):**
\$ sed -n \'2,\$ p\' employee.txt 102,Jason Smith,IT Manager 103,Raj
Reddy,Sysadmin 104,Anand Ram,Developer 105,Jane Miller,Sales Manager
#### Modify Address Range
You can modify address range using comma, plus, and tilde.
In the examples above, we saw the use of the comma (,) as part of an
address range specification. Its meaning is clear: n,m indicates n
through m.
The plus (+) may be used in conjunction with the comma, to specify a
number of lines instead of an absolute line number. For example, n,
+m means the m lines starting with n.
The tilde (\~) may also be used in an address range. Its special meaning
is to skip lines between commands. For example, address range n\~m
indicates that sed should start at the nth line and pick up every mth
line from there.
• 1\~2 matches 1,3,5,7, etc.
• 2\~2 matches 2,4,6,8, etc.
• 1\~3 matches 1,4,7,10, etc.
• 2\~3 matches 2,5,8,11, etc.
> **Print only odd numbered lines:**
\$ sed -n \'1\~2 p\' employee.txt 101,John Doe,CEO
103,Raj Reddy,Sysadmin 105,Jane Miller,Sales Manager
#### Pattern Matching
Just as you can specify a numbered address (or address range), you can
also specify a pattern (or pattern range) to match, as shown in the next
few examples.
> **Print lines matching the pattern "Jane":**
\$ sed -n \'/Jane/ p\' employee.txt 105,Jane Miller,Sales Manager
> **Print lines starting from the 1st match of \"Jason\" until the 4th
> line:**
\$ sed -n \'/Jason/,4 p\' employee.txt 102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin 104,Anand Ram,Developer
Note: If there were no matches for \"Jason\" in the 1st 4 lines, this
command would print the lines that match \"Jason\" after the 4th line.
> **Print lines starting from the 1st match of \"Raj\" until the last
> line:**
\$ sed -n \'/Raj/,\$ p\' employee.txt 103,Raj Reddy,Sysadmin
104,Anand Ram,Developer 105,Jane Miller,Sales Manager
> **Print lines starting from the line matching \"Raj\" until the line
> matching \"Jane\":**
\$ sed -n \'/Raj/,/Jane/ p\' employee.txt 103,Raj Reddy,Sysadmin
104,Anand Ram,Developer 105,Jane Miller,Sales Manager
> **Print the line matching \"Jason\" and 2 lines immediately after
> that:**
\$ sed -n \'/Jason/,+2 p\' employee.txt 102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin 104,Anand Ram,Developer
## Delete Lines (d command)
Using the sed d command, you can delete lines. Please note that the
lines are only deleted from the output stream. Just like any other sed
command, the d command doesn\'t modify the content of the original input
file.
By default if you don\'t specify any address range before the sed
command, it matches all the lines. So, the following example will not
print anything, as it matches all the lines in the employee.txt and
deletes them.
sed \'d\' employee.txt
It\'s more useful to specify an address range to be deleted. The
following are some examples:
> **Delete only the 2nd line:**
\$ sed \'2 d\' employee.txt 101,John Doe,CEO
103,Raj Reddy,Sysadmin 104,Anand Ram,Developer 105,Jane Miller,Sales
Manager
> **Delete from line 1 through 4:**
\$ sed \'1,4 d\' employee.txt 105,Jane Miller,Sales Manager
> **Delete from line 2 through the last line:**
\$ sed \'2,\$ d\' employee.txt 101,John Doe,CEO
> **Delete only odd number of lines:**
\$ sed \'1\~2 d\' employee.txt 102,Jason Smith,IT Manager 104,Anand
Ram,Developer
> **Delete lines matching the pattern \"Manager\":**
\$ sed \'/Manager/ d\' employee.txt 101,John Doe,CEO
103,Raj Reddy,Sysadmin 104,Anand Ram,Developer
> **Delete lines starting from the 1st match of \"Jason\" until the 4th
> line:**
\$ sed \'/Jason/,4 d\' employee.txt 101,John Doe,CEO
105,Jane Miller,Sales Manager
If there are no matches for \"Jason\" in the 1st 4 lines, this command
deletes only the lines that match \"Jason\" after the 4th line.
> **Delete lines starting from the 1st match of \"Raj\" until the last
> line:**
\$ sed \'/Raj/,\$ d\' employee.txt 101,John Doe,CEO
102,Jason Smith,IT Manager
> **Delete lines starting from the line matching \"Raj\" until the line
> matching \"Jane\":**
\$ sed \'/Raj/,/Jane/ d\' employee.txt 101,John Doe,CEO
102,Jason Smith,IT Manager
> **Delete lines starting from the line matching \"Jason\" and 2 lines
> immediately after that:**
\$ sed \'/Jason/,+2 d\' employee.txt 101,John Doe,CEO
105,Jane Miller,Sales Manager
#### Useful Delete Examples
The following examples are very helpful in actual day-to-day operations.
> **Delete all the empty lines from a file:**
sed \'/\^\$/ d\' employee.txt
> **Delete all comment lines (assuming the comment starts with**
>
> **#):**
sed \'/\^#/ d\' employee.txt
Note: When you have multiple sed commands, the moment sed encounters the
\'d\' command, the whole line matching the pattern will be deleted, and
no further commands will be executed on the deleted line.
## Write Pattern Space to File (w command)
Using the sed w command, you can write the current pattern space to a
file. By default as per the sed standard flow, the pattern space will be
printed to stdout, so if you want output to file but not screen you
should also use the sed option -n.
The following are some examples.
> **Write the content of employee.txt file to file output.txt (and
> display on screen):**
\$ sed \'w output.txt\' employee.txt 101,John Doe,CEO
102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin 104,Anand Ram,Developer 105,Jane Miller,Sales
Manager
\$ cat output.txt 101,John Doe,CEO
102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
Ram,Developer 105,Jane Miller,Sales Manager
> **Write the content of employee.txt file to output.txt file but not to
> screen:**
\$ sed -n \'w output.txt\' employee.txt
\$ cat output.txt 101,John Doe,CEO
102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
Ram,Developer 105,Jane Miller,Sales Manager
> **Write only the 2nd line:**
\$ sed -n \'2 w output.txt\' employee.txt
\$ cat output.txt
102,Jason Smith,IT Manager
> **Write lines 1 through 4:**
\$ sed -n \'1,4 w output.txt\' employee.txt
\$ cat output.txt 101,John Doe,CEO
102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
Ram,Developer
> **Write from line 2 through the last line:**
\$ sed -n \'2,\$ w output.txt\' employee.txt
\$ cat output.txt
102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
Ram,Developer 105,Jane Miller,Sales Manager
> **Write only odd numbered lines:**
\$ sed -n \'1\~2 w output.txt\' employee.txt
\$ cat output.txt 101,John Doe,CEO 103,Raj Reddy,Sysadmin
105,Jane Miller,Sales Manager
> **Write lines matching the pattern \"Jane\":**
\$ sed -n \'/Jane/ w output.txt\' employee.txt
\$ cat output.txt
105,Jane Miller,Sales Manager
> **Write lines starting from the 1st match of \"Jason\" until the 4th
> line:**
\$ sed -n \'/Jason/,4 w output.txt\' employee.txt
\$ cat output.txt
102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin 104,Anand Ram,Developer
If there are no matches for \"Jason\" in the 1st 4 lines, this command
writes only the lines that match \"Jason\" after the 4th line.
> **Write lines starting from the 1st match of \"Raj\" until the last
> line:**
\$ sed -n \'/Raj/,\$ w output.txt\' employee.txt
\$ cat output.txt 103,Raj Reddy,Sysadmin 104,Anand Ram,Developer
105,Jane Miller,Sales Manager
> **Write lines starting from the line matching \"Raj\" until the line
> matching \"Jane\":**
\$ sed -n \'/Raj/,/Jane/ w output.txt\' employee.txt
\$ cat output.txt 103,Raj Reddy,Sysadmin 104,Anand Ram,Developer
105,Jane Miller,Sales Manager
> **Write the line matching \"Jason\" and the next 2 lines immediately
> after that:**
\$ sed -n \'/Jason/,+2 w output.txt\' employee.txt
\$ cat output.txt
102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
Ram,Developer
Note: You might not use the w command frequently. Most people use UNIX
output redirection, instead, to store the output of sed to a file. For
example: sed \'p\' employee.txt \> output.txt
# Chapter 2. Sed Substitute Command
The most powerful command in the stream editor is **s**ubstitute. It has
such power and so many options that we give it a whole chapter.
## Sed Substitute Command Syntax
sed \'\[address-range\|pattern-range\] s/original-
string/replacement-string/\[substitute-flags\]\' inputfile
In the above sed substitute command syntax:
-   address-range or pattern-range is optional. If you don\'t specify
    > one, sed will execute the substitute command on all lines.
-   s -- tells Sed to execute the substitute command
-   original-string -- this is the string to be searched for in the
    > input file. The original-string can also be a regular expression.
-   replacement-string -- Sed will replace original-string with this
    > string.
-   substitute-flags are optional. More on this in the next section.
> Remember that *the original file is not changed;* the substitution
> takes place in the pattern space buffer which is then printed to
> stdout.
The following are couple of simple sed substitute examples (changes
shown in **bold**).
> **Replace all occurrences of Manager with Director:**
>
> \$ sed \'s/Manager/Director/\' employee.txt 101,John Doe,CEO
>
> 102,Jason Smith,IT **Director**
>
> 103,Raj Reddy,Sysadmin
104,Anand Ram,Developer 105,Jane Miller,Sales **Director**
> **Replace Manager with Director only on lines that contain the keyword
> \'Sales\':**
\$ sed \'/Sales/s/Manager/Director/\' employee.txt 101,John Doe,CEO
102,Jason Smith,IT Manager 103,Raj Reddy,Sysadmin 104,Anand
Ram,Developer 105,Jane Miller,Sales **Director**
Note that the use of the address range caused just one change rather
than the two shown in the previous example.
## Global Flag (g flag)
Sed substitute flag g stands for global. By default sed substitute
command will replace only the 1st occurrence of the {original-string} on
each line. If you want to change all the occurrences of the
{original-string} in the line to the {replacement-string}, you should
use the global flag g.
> **Replace the 1st occurrence of lower case a with upper case A:**
\$ sed \'s/a/A/\' employee.txt 101,John Doe,CEO
102,J**A**son Smith,IT Manager 103,R**A**j Reddy,Sysadmin 104,An**A**nd
Ram,Developer 105,J**A**ne Miller,Sales Manager
> **Replace all occurrences of lower case a with upper case A:**
\$ sed \'s/a/A/g\' employee.txt 101,John Doe,CEO
102,J**A**son Smith,IT M**A**n**A**ger 103,R**A**j Reddy,Sys**A**dmin
104,An**A**nd R**A**m,Developer 105,J**A**ne Miller,S**A**les
M**A**n**A**ger
Note: these examples were applied to the entire file because no address
range was specified.
## Number Flag (1,2,3.. flag)
Use the number flag to specify a specific occurrence of the original-
string. Only the n-th instance of original-string will trigger the
substitution. Counting starts over on each line, and n can be anything
from 1 to 512.
For example, /11 will replace only the 11th occurrence of the original-
string in a line.
The following are few examples.
> **Replace the 2nd occurrence of lower case a to upper case A:**
\$ sed \'s/a/A/2\' employee.txt 101,John Doe,CEO
102,Jason Smith,IT M**A**nager 103,Raj Reddy,Sys**A**dmin 104,Anand
R**A**m,Developer 105,Jane Miller,S**A**les Manager
> **For this example, create the following file with three lines:**
\$ vi substitute-locate.txt
locate command is used to locate files locate command uses database to
locate files
locate command can also use regex for searching
> **In the file you just created, change only the 2nd occurrence of
> locate to find:**
\$ sed \'s/locate/find/2\' substitute-locate.txt locate command is used
to **find** files
locate command uses database to **find** files
locate command can also use regex for searching
Note: On line 3 in the above example, there is only one \"locate\" in
the original substitute-locate.txt file. So, nothing is changed on line
3.
## Print Flag (p flag)
The sed substitute flag p stands for print. When the substitution is
successful, it prints the changed line. Like most print commands in sed,
it is most useful when combined with the -n option to suppress default
printing of all lines.
> **Print only the line that was changed by the substitute command:**
\$ sed -n \'s/John/Johnny/p\' employee.txt 101,Johnny Doe,CEO
In our number flag example, we used /2 to change the 2nd occurrence of
\"locate\" to \"find\". On line 3 of locate.txt there is no 2nd
occurrence and substitution never happened on that line. Adding the p
flag to the command we used before will print the two lines that did
change.
> **Change the 2nd instance of "locate" to "find" and print the
> result:**
\$ sed -n \'s/locate/find/2p\' substitute-locate.txt locate command is
used to **find** files
locate command uses database to **find** files
## Write Flag (w flag)
The sed substitute flag w stands for write. When the substitution is
successful, it writes the changed line to a file. Most people use the p
flag instead, and redirect the output to a file. We include this command
for completeness.
> **Write only the line that was changed by the substitute command to
> output.txt:**
\$ sed -n \'s/John/Johnny/w output.txt\' employee.txt
\$ cat output.txt 101,Johnny Doe,CEO
Just as we showed for the p command, adding w to our example with the
substitute-locate.txt file will send the two lines that were changed to
the output file.
> **Change the 2nd instance of "locate" to "find",write the result to a
> file, print all lines:**
\$ sed \'s/locate/find/2w output.txt\' substitute- locate.txt
locate command is used to **find** files locate command uses database to
**find** files
locate command can also use regex for searching
\$ cat output.txt