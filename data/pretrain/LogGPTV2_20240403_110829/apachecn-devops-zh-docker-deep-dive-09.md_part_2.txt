大部分细节在`services`部分，让我们仔细看看。
服务部分有两个二级键:
*   web-fe
*   redis
这些都定义了应用中的服务(容器)。重要的是要理解 Compose 将把这些都部署为一个容器，并且它将使用键的名称作为容器名称的一部分。在我们的例子中，我们定义了两个键；`web-fe`和`redis`。这意味着 Compose 将部署两个容器，一个名称中有`web-fe`，另一个名称中有`redis`。
在`web-fe`服务的定义中，我们给 Docker 以下指令:
*   `build: .`这告诉 Docker 使用当前目录(`.`)中的`Dockerfile`中的指令构建一个新的映像。新构建的映像将在后面的步骤中用于为此服务创建容器。
*   `command: python app.py`这告诉 Docker 运行一个名为`app.py`的 Python 应用作为容器中的主应用。`app.py`文件必须存在于映像中，并且映像必须包含 Python。Dockerfile 满足了这两个需求。
*   `ports:`告诉 Docker 将容器内的端口 5000(`-target`)映射到主机(`published`)上的端口 5000。这意味着发送到端口 5000 上的 Docker 主机的流量将被定向到容器上的端口 5000。容器内的应用监听端口 5000。
*   `networks:`告诉 Docker 将服务的容器连接到哪个网络。网络应该已经存在，或者在`networks`顶级密钥中定义。如果它是一个覆盖网络，它将需要有`attachable`标志，这样独立的容器就可以连接到它(Compose 部署独立的容器，而不是 Docker Services)。
*   `volumes:`告诉 Docker 将`counter-vol`卷(`source:`)安装到容器内的`/code` ( `target:`)。`counter-vol`卷需要已经存在，或者在文件底部的`volumes`顶层键中定义。
总之，Compose 将指示 Docker 为`web-fe`服务部署一个独立的容器。它将基于与合成文件位于同一目录中的 Dockerfile 构建的映像。该图片将作为容器启动，并作为其主应用运行`app.py`。它将暴露在主机的端口 5000 上，连接到`counter-net`网络，并将卷装入`/code`。
> **注:**从技术上讲，我们不需要`command: python app.py`选项。这是因为应用的 Dockerfile 已经将`python app.py`定义为映像的默认应用。然而，我们在这里展示它，所以你知道它是如何工作的。您也可以使用“编写”来覆盖 Dockerfiles 中设置的 CMD 指令。
`redis`服务的定义更简单:
*   `image: redis:alpine`这告诉 Docker 基于`redis:alpine`映像启动一个名为`redis`的独立容器。该映像将从 Docker Hub 中提取。
*   `networks:`容器将连接到`counter-net`网络。
由于两种服务将部署在同一个`counter-net`网络上，它们将能够通过名称相互解析。这很重要，因为应用被配置为通过名称与 redis 服务通信。
现在我们已经了解了合成文件是如何工作的，让我们部署它吧！
#### 使用撰写部署应用
在本节中，我们将部署上一节的合成文件中定义的应用。为此，您需要来自 https://github.com/nigelpoulton/counter-app:的以下 4 个文件
*   Dockerfile
*   app.py
*   requirements.txt
*   Docker-组合. yml
在本地克隆 Git 回购。
```
$ git clone https://github.com/nigelpoulton/counter-app.git
Cloning into 'counter-app'...
remote: Counting objects: 9, done.
remote: Compressing objects: 100% (8/8), done.
remote: Total 9 (delta 1), reused 5 (delta 0), pack-reused 0
Unpacking objects: 100% (9/9), done.
Checking connectivity... done. 
```
 `克隆回购将创建一个名为`counter-app`的新子目录。这将包含所有必需的文件，并将被视为您的*构建上下文*。撰写还将使用目录的名称(`counter-app`)作为项目名称。我们稍后会看到这一点，但是 Compose 会在所有资源名称前面加上`counter-app_`。
进入`counter-app`目录，检查文件是否存在。
```
$ cd counter-app
$ ls
app.py  docker-compose.yml  Dockerfile  requirements.txt ... 
```
 `让我们快速描述每个文件:
*   `app.py`是应用代码(Python Flask 应用)
*   `docker-compose.yml`是 Docker 编写文件，描述 Docker 应该如何构建和部署应用
*   `Dockerfile`描述如何为`web-fe`服务构建映像
*   `requirements.txt`列出了应用所需的 Python 包
请随意检查每个文件的内容。
`app.py`文件显然是应用的核心。但是`docker-compose.yml`是把所有应用微服务粘在一起的胶水。
让我们使用合成来打开应用。您必须在刚刚从 GitHub 克隆的`counter-app`目录中运行以下所有命令。
```
$ docker-compose up &
[1] 1635
Creating network "counter-app_counter-net" with the default driver
Creating volume "counter-app_counter-vol" with default driver
Pulling redis (redis:alpine)...
alpine: Pulling from library/redis
1160f4abea84: Pull complete
a8c53d69ca3a: Pull complete
web-fe_1  |  * Debugger PIN: 313-791-729 
```
 `应用需要几秒钟才能启动，输出可能会相当冗长。部署完成后，您可能还需要按下`Return`键。
我们将在一秒钟内逐步了解发生了什么，但首先让我们谈谈`docker-compose`命令。
`docker-compose up`是最常见的打开合成应用的方式(我们称合成文件中定义的多容器应用为*合成应用*)。它构建或提取所有必需的映像，创建所有必需的网络和卷，并启动所有必需的容器。
默认情况下，`docker-compose up`期望合成文件的名称为`docker-compose.yml`。如果您的合成文件有不同的名称，您需要用`-f`标志指定它。以下示例将从名为`prod-equus-bass.yml`的编写文件中部署应用
```
$ docker-compose -f prod-equus-bass.yml up 
```
 `使用`-d`标志在后台调出应用也很常见。例如:
```
docker-compose up -d
--OR--
docker-compose -f prod-equus-bass.yml up -d 
```
 `我们的示例将应用放在前台(我们没有使用`-d`标志)，但是我们使用了`&`将终端窗口还给我们。这迫使 Compose 将所有消息输出到终端窗口，我们将在后面引用这些消息。
现在该应用已经构建并运行，我们可以使用正常的`docker`命令来查看 Compose 创建的映像、容器、网络和卷。
```
$ docker image ls
REPOSITORY           TAG        IMAGE ID    CREATED         SIZE
counter-app_web-fe   latest     96..6ff9e   3 minutes ago   95.9MB
python               alpine     01..17a02   2 weeks ago     85.5MB
redis                alpine     ed..c83de   5 weeks ago     26.9MB 
```
 `我们可以看到，作为部署的一部分，构建或提取了三个映像。
`counter-app_web-fe:latest`映像是由`docker-compose.yml`文件中的`build: .`指令创建的。该指令导致 Docker 使用同一目录中的 Dockerfile 构建新映像。它包含 Python Flask 网络应用的应用代码，并且是从`python:alpine`映像构建的。详见`Dockerfile`的内容。
```
FROM python:alpine                   5000/tcp    counter-app_web-fe_1
eb..  "docker-entrypoint.s…"   Up 2 mins  6379/tcp                  counter-app_redis_1 
```
 ``counter-app_web-fe`容器正在运行应用的 web 前端。这正在运行`app.py`代码，并被映射到 Docker 主机上所有接口上的端口`5000`。我们一会儿就能接通。
以下网络和卷列表显示了`counter-app_counter-net`网络和`counter-app_counter-vol`卷。
```
$ docker network ls
NETWORK ID     NAME                      DRIVER    SCOPE
b4c1976d7c27   bridge                    bridge    local
33ff702253b3   counter-app_counter-net   bridge    local
$ docker volume ls
DRIVER     VOLUME NAME
local      counter-app_counter-vol 
```
 `应用成功部署后，您可以将网络浏览器指向端口`5000`上的 Docker 主机，看到应用的辉煌。
![](img/figure9-1.png)
令人印象深刻；-)
点击浏览器的刷新按钮将导致计数器递增。看看 app ( `app.py`)看看计数器数据在 Redis 后端是怎么存储的。
如果您使用`&`启动应用，您将能够在终端窗口中看到`HTTP 200`响应代码。这些表示请求成功，每次加载网页时，您都会看到一个请求。
```
web-fe_1  | 172.20.0.1 - - [29/Apr/2020 10:15:27] "GET / HTTP/1.1" 200 -
web-fe_1  | 172.20.0.1 - - [29/Apr/2020 10:15:28] "GET / HTTP/1.1" 200 - 
```
 `恭喜你。您已经使用 Docker Compose 成功部署了一个多容器应用！
#### 使用撰写管理应用
在本节中，您将看到如何启动、停止、删除和获取由 Docker Compose 管理的应用的状态。您还将看到如何使用我们正在使用的卷直接向应用的 web 前端注入更新。
由于应用已经启动，让我们看看如何将其关闭。为此，将`up`子命令替换为`down`。
```
$ docker-compose down
 1\. Stopping counter-app_redis_1  ...
 2\. Stopping counter-app_web-fe_1 ...
 3\. redis_1   | 1:signal-handler Received SIGTERM scheduling shutdown...
 4\. redis_1   | 1:M 09 Jan 11:16:00.456 # User requested shutdown...
 5\. redis_1   | 1:M 09 Jan 11:16:00.456 * Saving the final RDB snap...
 6\. redis_1   | 1:M 09 Jan 11:16:00.463 * DB saved on disk
 7\. Stopping counter-app_redis_1  ... done
 8\. counter-app_redis_1 exited with code 0
 9\. Stopping counter-app_web-fe_1 ... done
10\. Removing counter-app_redis_1  ... done
11\. Removing counter-app_web-fe_1 ... done
12\. Removing network counter-app_counter-net
13\. [1]+  Done          docker-compose up 
```
 `当您最初用`&`启动应用时，它正在前台运行。这意味着您可以向终端获得详细的输出，让您对事情是如何工作的有极好的了解。让我们来看看每一行都告诉我们什么。
1 号线和 2 号线正在停止这两项服务。这些是在合成文件中定义的`web-fe`和`redis`服务。
第 3 行显示`stop`指令发出`SIGTERM`信号。这被发送到每个容器中的 PID 1 过程。第 4-6 行显示了 Redis 容器优雅地处理信号并关闭自己。第 7 行和第 8 行报告停止操作成功。
第 9 行显示`web-fe`服务成功停止。
第 10 行和第 11 行显示了正在删除的已停止服务。
第 12 行显示`counter-net`网络被移除，第 13 行显示`docker-compose up`进程退出。
需要注意的是`counter-vol`卷被**而不是**删除了。这是因为卷旨在成为长期持久的数据存储。因此，它们的生命周期与它们所服务的应用完全分离。运行`docker volume ls`将显示该卷仍然存在于系统中。如果您向卷中写入了任何数据，这些数据仍然存在。