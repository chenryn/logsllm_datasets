### Data Structures and Section Data in COFF and PE Files

#### Fixed Offsets and Variable Blocks
The data structures described up to and including the optional header are located at fixed offsets from the beginning of the file, or from the PE header if the file contains an MS-DOS stub. The remainder of a COFF object or image file consists of blocks of data that do not necessarily have specific file offsets. Instead, their locations are defined by pointers in the Optional Header or section headers.

#### Exceptions
1. **Section Alignment Less Than Page Size:**
   - For images with a `Section Alignment` value (in the Optional Header) less than the architecture's page size (4K for Intel x86 and MIPS, 8K for Alpha), there are constraints on the file offset of section data, as detailed in the next section.
   
2. **Attribute Certificate and Debug Information:**
   - Attribute certificate and debug information must be placed at the very end of an image file, with the attribute certificate table immediately preceding the debug section. This is because the loader does not map these into memory. This rule does not apply to object files.

### Section Data

#### Initialized Data
- **Initialized Data:** Consists of simple blocks of bytes. Sections containing all zeros do not need to include this data.
- **Location and Size:**
  - The data for each section is located at the file offset specified by the `PointerToRawData` field in the section header.
  - The size of this data in the file is indicated by the `SizeOfRawData` field.
  - If `SizeOfRawData` is less than `VirtualSize`, the remainder is padded with zeros.

#### Image File Requirements
- **Alignment:**
  - In an image file, section data must be aligned on a boundary as specified by the `FileAlignment` field in the optional header.
  - Section data must appear in the order of the RVA values for the corresponding sections, matching the order of the individual section headers in the Section Table.
- **Section Align Less Than Page Size:**
  - For image files where the `Section Align` value in the Optional Header is less than the architecture's page size, the location of section data in the file must match its location in memory when the image is loaded. Thus, the physical offset for section data is the same as the RVA.

### COFF Relocations (Object Only)

#### Overview
- **COFF Relocations:** Object files contain COFF relocations, which specify how the section data should be modified when placed in the image file and subsequently loaded into memory.
- **Image Files:** Do not contain COFF relocations because all symbols referenced have already been assigned addresses in a flat address space. However, image files may contain base relocations in the `.reloc` section unless the image has the `IMAGE_FILE_RELOCS_STRIPPED` attribute. See Section 6.5 for more information.

#### Relocation Records
- **Structure:**
  - Each section in an object file has an array of fixed-length records for COFF relocations. The position and length of the array are specified in the section header.
  - Each element of the array has the following format:

| Offset | Size | Field           | Description                                                                 |
|--------|------|-----------------|------------------------------------------------------------------------------|
| 0      | 4    | VirtualAddress  | Address of the item to which relocation is applied: offset from the beginning of the section plus the section’s RVA/Offset field. |
| 4      | 4    | SymbolTableIndex | Zero-based index into the symbol table, giving the address to be used for the relocation. |
| 8      | 2    | Type            | Indicates the type of relocation. Valid types depend on the machine type. See Section 5.2.1, “Type Indicators.” |

- **Symbol Storage Class:**
  - If the symbol referred to (by the `SymbolTableIndex` field) has storage class `IMAGE_SYM_CLASS_SECTION`, the symbol’s address is the beginning of the section. The section is usually in the same file, except when the object file is part of an archive (library). In that case, the section may be found in any other object file in the archive with the same archive-member name.

### Type Indicators

#### Intel 386™
- **Relocation Types:**
  - `IMAGE_REL_I386_ABSOLUTE`: Ignored.
  - `IMAGE_REL_I386_DIR16`: Not supported.
  - `IMAGE_REL_I386_REL16`: Not supported.
  - `IMAGE_REL_I386_DIR32`: Target’s 32-bit virtual address.
  - `IMAGE_REL_I386_DIR32NB`: Target’s 32-bit relative virtual address.
  - `IMAGE_REL_I386_SEG12`: Not supported.
  - `IMAGE_REL_I386_SECTION`: 16-bit section index of the section containing the target.
  - `IMAGE_REL_I386_SECREL`: 32-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_I386_REL32`: 32-bit relative displacement to the target.

#### MIPS Processors
- **Relocation Types:**
  - `IMAGE_REL_MIPS_ABSOLUTE`: Ignored.
  - `IMAGE_REL_MIPS_REFHALF`: High 16 bits of the target’s 32-bit virtual address.
  - `IMAGE_REL_MIPS_REFWORD`: Target’s 32-bit virtual address.
  - `IMAGE_REL_MIPS_JMPADDR`: Low 26 bits of the target’s virtual address.
  - `IMAGE_REL_MIPS_REFHI`: High 16 bits of the target’s 32-bit virtual address.
  - `IMAGE_REL_MIPS_REFLO`: Low 16 bits of the target’s virtual address.
  - `IMAGE_REL_MIPS_GPREL`: 16-bit signed displacement of the target relative to the Global Pointer (GP) register.
  - `IMAGE_REL_MIPS_LITERAL`: Same as `IMAGE_REL_MIPS_GPREL`.
  - `IMAGE_REL_MIPS_SECTION`: 16-bit section index of the section containing the target.
  - `IMAGE_REL_MIPS_SECREL`: 32-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_MIPS_SECRELLO`: Low 16 bits of the 32-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_MIPS_SECRELHI`: High 16 bits of the 32-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_MIPS_JMPADDR16`: Low 26 bits of the target’s virtual address.
  - `IMAGE_REL_MIPS_REFWORDNB`: Target’s 32-bit relative virtual address.
  - `IMAGE_REL_MIPS_PAIR`: Follows a `REFHI` or `SECRELHI` relocation. Contains a displacement, not an index into the symbol table.

#### Alpha Processors
- **Relocation Types:**
  - `IMAGE_REL_ALPHA_ABSOLUTE`: Ignored.
  - `IMAGE_REL_ALPHA_REFLONG`: Target’s 32-bit virtual address.
  - `IMAGE_REL_ALPHA_REFQUAD`: Target’s 64-bit virtual address.
  - `IMAGE_REL_ALPHA_GPREL32`: 32-bit signed displacement of the target relative to the Global Pointer (GP) register.
  - `IMAGE_REL_ALPHA_LITERAL`: 16-bit signed displacement of the target relative to the Global Pointer (GP) register.
  - `IMAGE_REL_ALPHA_LITUSE`: Reserved for future use.
  - `IMAGE_REL_ALPHA_GPDISP`: Reserved for future use.
  - `IMAGE_REL_ALPHA_BRADDR`: 21-bit relative displacement to the target.
  - `IMAGE_REL_ALPHA_HINT`: 14-bit hints to the processor for the target of an Alpha jump instruction.
  - `IMAGE_REL_ALPHA_INLINE_REFLONG`: Target’s 32-bit virtual address split into high and low 16-bit parts.
  - `IMAGE_REL_ALPHA_REFHI`: High 16 bits of the target’s 32-bit virtual address.
  - `IMAGE_REL_ALPHA_REFLO`: Low 16 bits of the target’s virtual address.
  - `IMAGE_REL_ALPHA_PAIR`: Follows a `REFHI`, `REFQ3`, `REFQ2`, or `SECRELHI` relocation. Contains a displacement, not an index into the symbol table.
  - `IMAGE_REL_ALPHA_MATCH`: Follows `INLINE_REFLONG` relocation. Contains the displacement in bytes of the location for the matching low address.
  - `IMAGE_REL_ALPHA_SECTION`: 16-bit section index of the section containing the target.
  - `IMAGE_REL_ALPHA_SECREL`: 32-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_ALPHA_REFLONGNB`: Target’s 32-bit relative virtual address.
  - `IMAGE_REL_ALPHA_SECRELLO`: Low 16 bits of the 32-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_ALPHA_SECRELHI`: High 16 bits of the 32-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_ALPHA_REFQ3`: Low 16 bits of the high 32 bits of the target’s 64-bit virtual address.
  - `IMAGE_REL_ALPHA_REFQ2`: High 16 bits of the low 32 bits of the target’s 64-bit virtual address.
  - `IMAGE_REL_ALPHA_REFQ1`: Low 16 bits of the target’s 64-bit virtual address.
  - `IMAGE_REL_ALPHA_GPRELLO`: Low 16 bits of the 32-bit signed displacement of the target relative to the Global Pointer (GP) register.
  - `IMAGE_REL_ALPHA_GPRELHI`: High 16 bits of the 32-bit signed displacement of the target relative to the Global Pointer (GP) register.

#### IBM PowerPC Processors
- **Relocation Types:**
  - `IMAGE_REL_PPC_ABSOLUTE`: Ignored.
  - `IMAGE_REL_PPC_ADDR64`: Target’s 64-bit virtual address.
  - `IMAGE_REL_PPC_ADDR32`: Target’s 32-bit virtual address.
  - `IMAGE_REL_PPC_ADDR24`: Low 24 bits of the target’s virtual address.
  - `IMAGE_REL_PPC_ADDR16`: Low 16 bits of the target’s virtual address.
  - `IMAGE_REL_PPC_ADDR14`: Low 14 bits of the target’s virtual address.
  - `IMAGE_REL_PPC_REL24`: 24-bit PC-relative offset to the symbol’s location.
  - `IMAGE_REL_PPC_REL14`: 14-bit PC-relative offset to the symbol’s location.
  - `IMAGE_REL_PPC_ADDR32NB`: Target’s 32-bit relative virtual address.
  - `IMAGE_REL_PPC_SECREL`: 32-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_PPC_SECTION`: 16-bit section index of the section containing the target.
  - `IMAGE_REL_PPC_SECREL16`: 16-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_PPC_REFHI`: High 16 bits of the target’s 32-bit virtual address.
  - `IMAGE_REL_PPC_REFLO`: Low 16 bits of the target’s virtual address.
  - `IMAGE_REL_PPC_PAIR`: Follows a `REFHI` or `SECRELHI` relocation. Contains a displacement, not an index into the symbol table.
  - `IMAGE_REL_PPC_SECRELLO`: Low 16 bits of the 32-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_PPC_SECRELHI`: High 16 bits of the 32-bit offset of the target from the beginning of its section.
  - `IMAGE_REL_PPC_GPREL`: 16-bit signed displacement of the target relative to the Global Pointer (GP) register.

#### Hitachi SuperH Processors
- **Relocation Types:**
  - (Details for SH3 and SH4 processors to be provided.)

This document provides a comprehensive overview of the data structures, section data, and COFF relocations in COFF and PE files, along with the specific relocation types for different processor architectures.