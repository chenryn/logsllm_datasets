### Verification of Initial BP Models
#### Blockchain-Based Business Processes

**2. Solidity-to-CPN Translation**

To illustrate our approach and demonstrate its feasibility, we use the Blind Auction example from [1]. Figure 1 outlines the workflow of the blind auction system. For a comprehensive description of the use case, please refer to the Solidity2CPN document available in this repository: [Solidity2CPN GitHub Repository](https://github.com/garfatta/solidity2cpn).

**Blind Auction Workflow**

- **Place Blinded Request**
- **Reveal Bids**
- **Bid Withdrawal**
- **Blinded Bid**
- **Revealed Withdrawal**
- **Pending**
- **ACK**
- **+ Deposit Bid**
- **+ Key Request Returns**
- **Receive Notification**
- **Start Auction**
- **End Reveal**
- **Bidding Window**
- **Revealing Window**

![Figure 1. Blind Auction Workflow](fig1.png)

The general idea of our approach is to start with a CPN model that represents the general workflow of the smart contract (level-0 model) and then build upon it by embedding submodels that represent the smart contract functions (level-1 models). In the level-0 model, we distinguish between the user's behavior, which models how users interact with the system, and the smart contract's behavior, which represents the system itself. These two parts are connected via communication places. Figure 2 shows the level-0 model for the previously described blind auction use case.

We view a smart contract as a set of statements. A statement can be either a compound, simple, or control statement. A simple statement can be an assignment, variable declaration, sending, or returning statement. A control statement can be a requirement, selection, or loop (e.g., for or while loop).

**2.1 Translation Algorithm**

Our proposed algorithms are structured as follows:

- **extendModel**: Takes the level-0 CPN model as input and builds the extended hierarchical model by calling `insertSubModel` for each transition corresponding to a function in the Solidity smart contract.
- **insertSubModel**: Replaces a transition with its corresponding level-1 submodel and connects it to the level-0 model.
- **createSubModel**: The main algorithm that generates the level-1 submodel for each transition by recursively browsing the body of its corresponding function and creating CPN patterns based on the type of the processed statement.

**Figure 2. Blind Auction - Level-0 Model**

![Figure 2. Blind Auction - Level-0 Model](fig2.png)

**2.2 Application on the Blind Auction Use Case**

Applying the algorithm to the level-0 model of the Blind Auction use case (see Figure 2) results in a hierarchical CPN model with level-1 submodels created by the execution of `createSubModel`. Figure 3 shows the submodel corresponding to the `withdraw` transition in the level-0 model. The rest of the submodels can be found in the online Solidity2CPN document (See footnote 1).

**Figure 3. Submodel of Transition `withdraw`**

![Figure 3. Submodel of Transition `withdraw`](fig3.png)

### 3. Smart Contract Verification via CPN Tools

With the CPN model established for a smart contract, verifying properties of the smart contract reduces to verifying properties on the CPN model. We have implemented the CPN model for our Blind Auction use case using CPN Tools, which leverages explicit model checking techniques, and investigated its potential for verifying behavioral and contract-specific properties.

Table 1 presents state space analysis statistics for different initial marking values. Note that unprovided values indicate that the state space generation did not complete after several hours of execution, due to the well-known state space explosion problem associated with explicit state space exploration.

**Table 1. State Space Analysis Results for Different Initial Markings**

| Bidders | Possible Bids | Possible Secret Keys | Possible Deposits | State Space Generation Time (s) | #Nodes | #Arcs | #Dead Markings |
|---------|---------------|----------------------|-------------------|---------------------------------|--------|-------|----------------|
| 1       | 1             | 1                    | 1                 | 4 (Without Hierarchy)           | 24     | 26    | 3              |
| 2       | 1             | 1                    | 1                 | 4 (Without Hierarchy)           | 235    | 378   | 10             |
| 3       | 1             | 1                    | 1                 | 6 (Without Hierarchy)           | 3118   | 7106  | 35             |
| 4       | 1             | 1                    | 1                 | 252 (Without Hierarchy)         | 47621  | 145062| 124            |
| 5       | 1             | 1                    | 1                 | -                               | -      | -     | -              |
| 1       | 2             | 2                    | 2                 | 4 (Without Hierarchy)           | 484    | 555   | 49             |
| 1       | 3             | 3                    | 3                 | 30 (Without Hierarchy)          | 19984  | 22980 | 1999           |
| 1       | 4             | 4                    | 4                 | -                               | -      | -     | -              |

The state space report generated by CPN Tools allows the deduction of several general behavioral properties. For instance, in our use case application, the report confirms the boundedness of all the places in the modeled system. More specific properties can be verified by formulating CTL properties. For example, we can formulate a termination property to check the model’s capability to always reach a terminal state (a dead marking) where certain conditions are met. The definition of such a property is included in the Solidity2CPN document.

### 4. Conclusion

The goal of our work is to propose a formal approach for the verification of smart contracts. In this context, we present a translation algorithm that generates a hierarchical CPN model representing a given Solidity smart contract, including both its control-flow and data aspects. CTL properties are then verified on the CPN model to check corresponding properties on the smart contract, unrestrictedly to certain predefined vulnerabilities.

Based on the results presented in this paper, it can be concluded that CPN Tools has limited potential for verifying properties on CPN models of smart contracts due to the state space explosion problem. However, we do prove that using CPNs as a representation formalism is promising because it allows the consideration of the data aspect, enabling the formulation of contract-specific properties. To overcome the encountered limitations, we intend to investigate the potential of Helena [6] as an analyzer for High-Level Nets. This tool offers on-the-fly verification of LTL properties, which, unlike the verification of CTL properties offered by CPN Tools, does not always require the generation of the entire state space. To further improve the tool’s performance, we also plan to enhance Helena’s model checker by incorporating an extension to an existing technique previously developed to address the state space explosion problem in regular Petri nets [9] and applying it to CPNs.

### References

1. Solidity documentation. https://solidity.readthedocs.io/en/latest/
2. Formal verification for solidity contracts - ethereum community forum, October 2015. https://forum.ethereum.org/discussion/3779/formal-verification-for-solidity-contracts
3. Amani, S., Bégel, M., Bortin, M., Staples, M.: Towards verifying Ethereum smart contract bytecode in Isabelle/HOL. In: Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs, pp. 66–77 (2018)
4. Bhargavan, K., et al.: Formal verification of smart contracts: short paper. In: Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security, PLAS@CCS 2016, Vienna, Austria, 24 October 2016, pp. 91–96 (2016)
5. Chen, T., Li, X., Luo, X., Zhang, X.: Under-optimized smart contracts devour your money. In: IEEE 24th International Conference on Software Analysis, Evolution and Reengineering, SANER 2017, Austria, 20–24 February 2017, pp. 442–446 (2017)
6. Evangelista, S.: High-level Petri nets analysis with Helena. In: Ciardo, G., Darondeau, P. (eds.) ICATPN 2005. LNCS, vol. 3536, pp. 455–464. Springer, Heidelberg (2005). https://doi.org/10.1007/11494744_26
7. Jensen, K., Kristensen, L.M.: Coloured Petri Nets: Modelling and Validation of Concurrent Systems, 1st edn. Springer, Heidelberg (2009). https://doi.org/10.1007/b95112
8. Kalra, S., Goel, S., Dhawan, M., Sharma, S.: ZEUS: analyzing safety of smart contracts. In: 25th Annual Network and Distributed System Security Symposium, NDSS 2018, San Diego, California, USA, 18–21 February 2018 (2018)
9. Klai, K., Poitrenaud, D.: MC-SOG: an LTL model checker based on symbolic observation graphs. In: 29th International Conference Applications and Theory of Petri Nets, PETRI NETS 2008, China, 23–27 June, Proceedings, pp. 288–306 (2008)
10. López-Pintado, O., García-Bañuelos, L., Dumas, M., Weber, I., Ponomarev, A.: Caterpillar: a business process execution engine on the Ethereum blockchain. Softw. Pract. Exp. 49(7), 1162–1193 (2019)
11. Luu, L., Chu, D., Olickel, H., Saxena, P., Hobor, A.: Making smart contracts smarter. In: Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, Vienna, Austria, 24–28 October 2016, p. 254–269 (2016)
12. Mavridou, A., Laszka, A., Stachtiari, E., Dubey, A.: VeriSolid: correct-by-design smart contracts for Ethereum. In: Financial Cryptography and Data Security - 23rd International Conference, St. Kitts and Nevis, 18–22 February 2019, p. 446–465 (2019)
13. Mendling, J., Weber, I.: Blockchains for business process management - challenges and opportunities. EMISA Forum 38(1), 22–23 (2018)
14. Torres, C.F., Schütte, J., State, R.: Osiris: hunting for integer bugs in Ethereum smart contracts. In: Proceedings of the 34th Annual Computer Security Applications Conference, ACSAC 2018, PR, USA, 03–07 December 2018, p. 664–676 (2018)

### Formal Quality of Service Analysis in the Service Selection Problem

**Agustín Eloy Martinez-Suné**
Departamento de Computación, Universidad de Buenos Aires, Buenos Aires, Argentina
Email: agustin.martinez@uba.ar

**Abstract**

The Service Selection problem has attracted significant attention from the Service-Oriented community over the past few decades. Rapidly evolving cloud computing technologies foster the vision of a Service-Oriented Computing paradigm where multiple providers offer specific functionalities as services that compete against each other to be automatically selected by service consumers. We present a research program that focuses on Quality of Service (QoS)-aware Service Selection. We discuss our vision and research methodology in the context of the state of the art of the topic and review the main contributions of our approach.

**1. Introduction**

One of the main characteristics of the Service-Oriented Computing paradigm is the capability of building complex applications by composing web services as fundamental building blocks [3]. The emergence of this paradigm has been accompanied by an increasing number of globally available computational resources and communication infrastructure, and also by a deep transformation of the business models associated with the construction of software systems. Providers of cloud computing platforms such as Amazon Web Services and Google Cloud rely on this type of infrastructure to offer a wide variety of options to developers and web service providers, where a distinctive feature is the high level of granularity with which companies can optimize the use of these resources to better suit their business goals. Pricing schemes that depend on the amount of time a computational resource is used or the amount of memory available are some examples of the attributes used as knobs. Emerging technologies such as serverless computing or Function as a Service (FaaS) open up even more possibilities for the vision of a Service-Oriented Computing paradigm.

From an academic point of view, one of the issues that has driven a lot of attention from the Service-Oriented community in the past few decades is the Service Selection problem [3, pt. II]. Stated in general terms, this is the problem of selecting the most appropriate web service(s), from a pool of available ones, that best match(es) the functional and non-functional requirements and constraints specified by the client. Such a procedure is referred to as the determination of a Service Level Agreement (SLA) between the service consumer and the provider. In this research project, we focus on Quality of Service (QoS)-aware service selection: given multiple providers offering services that are satisfactory in terms of the functional requirements, how can we decide the best match in terms of their QoS, non-functional, characteristics.

The rest of this paper is structured as follows: Section 2 gives a clear statement of the problem and introduces the main questions that guide our research, Section 3 reviews the state of the art and puts our approach in context, Section 4 reviews the main contributions of our approach, and finally, Section 5 presents some concluding remarks.

**2. Problem Definition**

Our research problem can be stated more clearly in the following way:

**Definition 1 (QoS-aware service selection problem)**: Given a set \( S = \{s_1, s_2, \ldots, s_n\} \) of QoS profiles, each describing the Quality of Service aspects of different services being offered, and given a QoS requirement \( R_q \) describing what the client needs (or prefers) in terms of QoS:
- Choose a service \( s \in S \) that fulfills (or best suits) the client needs \( R_q \).

The reader might be familiar with different variations of this problem, such as the service ranking problem, where the goal is to obtain an ordering of \( S \), instead of just one particular element of it; or the problem in the context of web services composition, where the goal usually is to choose multiple services such that, if composed according to a given plan, the aggregated Quality of Service satisfies predefined needs or established criteria. Some variations of the problem will drive important research questions, but the core challenges are captured by Definition 1. Some of the research questions that immediately arise from the problem statement are:
- What is the appropriate representation for the QoS profile and the QoS requirements?
- What is the appropriate analysis procedure to automatically find the right service?