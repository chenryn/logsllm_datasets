### Table V: Scheduling Decisions and Partition Switches

Table V presents the number of scheduling decisions and partition switches per unit time, measured by running 5, 10, and 20-partition systems. The results show that under NoRandom, the rate of decisions increases proportionally with the system size. However, this is not the case with TimeDice. This discrepancy can be attributed to the quantum-based randomization (MIN INV SIZE = 1 ms in Algorithm 3). Scheduling decisions are also triggered by events such as task arrival/completion and budget depletion. In theory, TimeDice may introduce up to 1000 additional scheduling points, which aligns with the observed trend in Table V.

### Comparison to BLINDER

BLINDER [11] cannot defend against the type of covert channel described in this paper because it assumes that all precise time sources must be eliminated. If this assumption is not met, partitions can detect interference from other partitions through physical time, as demonstrated in Section III. For example, a networking operation, such as remote logging by the data logging partition in Fig. 5, can serve as an external time source. Unlike BLINDER, TimeDice can be applied to systems where such time sources exist.

Although the result is self-evident, we implemented the BLINDER algorithm and re-performed the feasibility test in Section III. For the base configuration and 10,000 samples, the accuracy for the response time-based and learning-based approaches was 95.67% and 97.73%, respectively, which is the same as what NoRandom achieved. This indicates that BLINDER cannot effectively defend against the covert channel presented in this paper.

### Covert Channel Defense

Can TimeDice defend against the type of covert channel considered in [11]? The covert channel that BLINDER defends against relies on the order between two local tasks, τR,1 and τR,2, in the receiver partition, as shown in Fig. 18(a) and (b). The order is influenced by the length of the sender's preemption. With TimeDice, a long preemption by the sender (i.e., X=1) is likely to be split randomly, as illustrated in Fig. 18(d), making it difficult for the receiver to correctly predict the sender's signal.

Even if all precise time sources were eliminated, BLINDER requires each partition to faithfully implement its local-schedule transformation algorithm, implying that partition-local schedulers must be trustworthy. Therefore, BLINDER cannot be applied to systems where local schedulers are not modifiable (e.g., partitions supplied as binary executables). In contrast, TimeDice can be applied to such systems because it is a global-schedule transformation technique, requiring only the system integrator to be trustworthy.

While TimeDice allows the existence of physical time sources, it cannot reduce the channel capacity to zero, as shown in Fig. 15. This means that communication over the covert timing channel is still possible but at a slower rate. Thus, TimeDice is particularly useful when the value of information leaked through the channel diminishes faster than the communication speed.

### Related Work

Real-time hierarchical scheduling has been primarily studied for isolation mechanisms and modular schedulability analysis [15, 33, 37], with little attention paid to the security implications of time-partitioning schemes. Yoon et al. [11] addressed an algorithmic timing channel through hierarchical scheduling that exploits changes in the order of partition-local tasks. As detailed in Section V-C, BLINDER can only be used when no precise time sources are available. Fuzzy-time [12, 13] and Virtual time [38, 39] make system clocks imprecise, potentially degrading application usability. In contrast, TimeDice adds noise to the execution timing, not to the time source.

Scheduler timing channels have been studied mainly at the task level. Son et al. [40] showed that rate monotonic scheduling is vulnerable to covert timing channels due to its scheduling constraints. Völker et al. [41] mitigated such channels by making task executions deterministic, such as switching to an idle thread if a task stops early. Chen et al. [42] demonstrated a different threat against fixed-priority scheduling, where an observer task infers the timings of certain tasks by observing its own execution intervals. Such attacks are possible due to the timing determinism of real-time systems [7, 43]. However, this predictability can also enhance the security of real-time systems. For instance, periodic Controller Area Network (CAN) messages can be used to fingerprint electronic control units and detect intrusion into in-vehicle networks [9, 44, 45].

Covert timing channels have been extensively studied in the network domain. These channels leak information by modulating packet intervals [46, 47]. A straightforward solution is to add random delays to network packets [48, 49]. Randomization is a key component of moving target defense (MTD) techniques [50, 51]. Davi et al. [52] used address space layout randomization (ASLR) [53] to randomize program code on the fly, deterring code-reuse attacks. Crane et al. [54] improved code randomization by enforcing execute-only memory to prevent code leakage. Kc et al. [55] created process-specific instruction sets that are hard for adversaries to infer. Zhang et al. [56] addressed information leakage through cache side-channels by randomly evicting cache lines and permuting memory-to-cache mappings. Jafarian et al. [57] considered MTD in software-defined networking (SDN), where the controller randomly assigns (virtual) IP addresses to hosts to hinder adversaries from discovering targets.

### Conclusion

In this paper, we have demonstrated techniques that exploit priority-based time-partitioning to create a covert timing channel between real-time partitions. We presented TimeDice, an online algorithm that reduces observable determinism in partition schedules by randomly allowing priority inversions while guaranteeing CPU budgets allocated to partitions. Our results show that TimeDice significantly enhances security against timing-based algorithmic covert channels, especially when the system is configured in a way favorable to an adversary. TimeDice will enable modern real-time systems to integrate advanced functionalities from a rich software ecosystem while increasing the level of security.

### Acknowledgments

The authors would like to thank the anonymous reviewers and the shepherd, Le Guan, for their valuable comments and suggestions. This work is supported in part by NSF grants 1945541 and 2019285, the Defense Advanced Research Projects Agency (DARPA), and Naval Information Warfare Center Pacific (NIWC Pacific) under Contract No. N66001-21-C-4018. Any opinions, findings, and conclusions or recommendations expressed here are those of the authors and do not necessarily reflect the views of their employers or sponsors.

### References

[References listed as in the original text]

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the text is more accessible and easier to understand.