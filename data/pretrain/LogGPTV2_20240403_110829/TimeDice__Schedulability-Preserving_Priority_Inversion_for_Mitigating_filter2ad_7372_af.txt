case. Table V shows the numbers of scheduling decisions
and partition switches per unit
time measured by running
the 5, 10, 20-partition systems. One thing to notice from
the results is that while the rate of decisions proportionally
increases with the system size under NoRandom, it does not with
TimeDice. This is due to the quantum-based randomization
(i.e., MIN INV SIZE = 1 ms in Algorithm 3). Recall that
scheduling decisions are also made upon certain events such
as task arrival/completion and budget depletion. In theory,
TimeDice may demand 1000 additional scheduling points,
which matches the trend shown in the results in Table V.
C. Comparison to BLINDER
BLINDER [11] cannot defend against
the type of covert
channel presented in this paper because it requires a rather
strong assumption that every precise time source must be
eliminated. Otherwise, as demonstrated in Sec. III, partitions
can directly perceive (from the physical time) interference from
other partitions. Even a networking operation (e.g., the data
logging partition in Fig. 5 performing a remote logging) can
serve as an external time source. Unlike BLINDER, TIMEDICE
can be applied to such a system.
Although the result
is self-evident, we implemented the
BLINDER algorithm and performed the feasibility test in Sec. III
again. For the base conﬁguration and 10,000 samples for proﬁl-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:56 UTC from IEEE Xplore.  Restrictions apply. 
462
(cid:1)(cid:5)(cid:1)(cid:2)
(cid:1)(cid:4)(cid:1)(cid:2)(cid:1)(cid:4)(cid:1)(cid:3)
(cid:1)(cid:5)(cid:1)(cid:2)
(cid:1)(cid:4)(cid:1)(cid:2)(cid:1)(cid:4)(cid:1)(cid:3)
(cid:4)(cid:1)(cid:2)(cid:3)
(cid:4)(cid:1)(cid:2)(cid:3)
(cid:5)(cid:1)(cid:2)(cid:3)
(cid:6)(cid:1)(cid:2)(cid:3)
(a) Without TimeDice, X=0
(cid:1)(cid:5)(cid:1)(cid:2)
(cid:1)(cid:4)(cid:1)(cid:2)(cid:1)(cid:4)(cid:1)(cid:3)
(cid:1)(cid:5)(cid:1)(cid:2)
(cid:1)(cid:4)(cid:1)(cid:2)(cid:1)(cid:4)(cid:1)(cid:3)
(cid:4)(cid:1)(cid:2)(cid:3)
(cid:5)(cid:1)(cid:2)(cid:3)
(b) Without TimeDice, X=1
(cid:6)(cid:1)(cid:2)(cid:3)
(cid:5)(cid:1)(cid:2)(cid:3)
(cid:6)(cid:1)(cid:2)(cid:3)
(c) With TimeDice, X=0
(cid:4)(cid:1)(cid:2)(cid:3)
(cid:5)(cid:1)(cid:2)(cid:3)
(cid:6)(cid:1)(cid:2)(cid:3)
(d) With TimeDice, X=1
Fig. 18: The covert channel scenario from BLINDER [11]. The
sender τS,1 varies its length to signal X = 0 or 1. The receiver’s
inference is based on the order between τR,1 and τR,2.
ing, the accuracy is 95.67% and 97.73% for the response time-
based and learning-based approaches, respectively, which are
the same as what NoRandom achieved, indicating that BLINDER
cannot defend against the covert channel presented in this paper.
Conversely, can TIMEDICE defend against the type of covert
channel considered in [11]? The covert channel that BLINDER
defends against uses the order between two local tasks, τR,1 and
τR,2, in the receiver partition as shown in Fig. 18(a) and (b).
The order between τR,1 and τR,2 is inﬂuenced by the length of
the sender’s preemption. With TIMEDICE, a long preemption by
the sender (i.e., X=1) is likely to be split in a random manner
as shown in Fig. 18(d); hence the receiver is likely to make a
wrong prediction on the sender’s signal.
Even if every source of precise time were eliminated,
BLINDER requires each partition to faithfully implement the
BLINDER’s local-schedule transformation algorithm. Hence,
partition-local schedulers should be trustworthy. Therefore,
BLINDER cannot be applied to systems where local schedulers
are not modiﬁable (e.g., partition supplied as a binary exe-
cutable). On the other hand, TIMEDICE can be applied to such
systems because it is a global-schedule transformation tech-
nique; hence, only the system integrator needs to be trustworthy.
As TIMEDICE allows the existence of physical time sources,
it cannot reduce the channel capacity to zero (as shown in
Fig. 15). This implies that communication over covert timing
channel is still possible but at a slow rate. Hence, TIMEDICE is
useful when the value of information leaked through a channel
is transient – i.e., it diminishes faster than communication speed.
VI. RELATED WORK
Real-time hierarchical scheduling has been studied mostly
by means of isolation mechanism for temporal reasoning, i.e.,
modular schedulability analysis [15], [33], [37], whereas little
to no attention has been paid to the security implication of time-
partitioning schemes. Yoon et al. [11] address an algorithmic
timing channel through hierarchical scheduling that exploits
changes in the order of partition-local tasks. As explained in
detail in Sec. V-C, BLINDER can be used only when no precise
time sources are available. Fuzzy-time [12], [13] and Virtual
time [38], [39] make system clocks imprecise, which may
degrade the usability of applications. In contrast, TIMEDICE
adds noise to the execution timing, not to the time source.
Scheduler timing channels have been studied mainly at the
task levels. Son et al. [40] showed that the rate monotonic
scheduling is exposed to covert
timing channel due to its
scheduling timing constraints. V¨olp et al. [41] close such
a channel by making the task executions deterministic: e.g.,
switching to an idle thread if a task stops early. Chen et
al. [42] demonstrated a different type of threat against ﬁxed-
priority scheduling; an observer task infers the timings (e.g.,
future arrival
times) of certain tasks by observing its own
execution intervals. Such an attack is possible because of the
timing determinism of real-time systems [7], [43]. However,
such timing predictability can also help improve the security of
real-time systems. For instance, one can ﬁngerprint electronic
control units using periodic Controller Area Network (CAN)
messages to detect intrusion into in-vehicle network such as
message replay and injection attacks [9], [44], [45].
Covert timing channels have been studied extensively in the
network domain. A covert network timing channel leaks infor-
mation by modulating intervals between packets [46], [47]. A
straightforward solution is to control the network trafﬁc by, for
example, adding random delays to network packets [48], [49].
Randomization is in fact a critical ingredient for moving target
defense (MTD) techniques [50], [51]. Davi et al. [52] used
address space layout randomization (ASLR) [53] to randomize
program code on the ﬂy for each run to deter code-reuse attacks.
Crane et al. [54] improved code randomization by enforcing
execute-only memory to eliminate code leakage that allows an
attacker to learn about the address space layout. Kc et al. [55]
took a ﬁner-grained approach that creates a process-speciﬁc
instruction set that
is hard to be inferred by an adversary.
Zhang et al. [56] addressed the problem of information leakage
through cache side-channels by randomly evicting cache lines
and permuting memory-to-cache mappings. Jafarian et al. [57]
considered MTD in software-deﬁned networking (SDN),
in
which the controller randomly assigns (virtual) IP addresses to
hosts in order to hinder adversaries from discovering targets.
VII. CONCLUSION
In this paper, we have demonstrated techniques that exploit
a priority-based time-partitioning to create a covert
timing
channel between real-time partitions. As a solution, we have
presented TIMEDICE, an online algorithm that reduces observ-
able determinism in partition schedules by randomly allowing
priority inversions while guaranteeing CPU budgets allocated to
partitions. We have shown that TIMEDICE signiﬁcantly raises
the bar against the timing-based algorithmic covert channel and
that it is more effective when the system is conﬁgured in a
favorable way to an adversary. TIMEDICE will allow modern
real-time systems to employ advanced functionalities enabled
by a rich software ecosystem by increasing the level of security
in the integration of real-time applications.
ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers and
the shepherd, Le Guan, for their valuable comments and sug-
gestions. This work is supported in part by NSF grants 1945541
and 2019285, the Defense Advanced Research Projects Agency
(DARPA) and Naval Information Warfare Center Paciﬁc (NIWC
Paciﬁc) under Contract No. N66001-21-C-4018. Any opinions,
ﬁndings, and conclusions or recommendations expressed here
are those of the authors and do not necessarily reﬂect the views
of their employers or sponsors.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:56 UTC from IEEE Xplore.  Restrictions apply. 
463
REFERENCES
[1] Avionics Application Software Standard Interface: ARINC Speciﬁcation
653P1-3, Aeronautical Radio, Inc., 2010.
[2] “QNX Hypervisor,”
https://blackberry.qnx.com/en/software-solutions/
embedded-software/industrial/qnx-hypervisor.
[3] “LynxOS-178,”
https://www.lynx.com/products/lynxos-178-do-178c-
certiﬁed-posix-rtos.
[4] “Wind River VxWorks 653 Platform,” https://www.windriver.com/
products/vxworks/certiﬁcation-proﬁles/#vxworks 653.
[5] “QNX Platform for Digital Cockpits,” https://blackberry.qnx.com/content/
dam/qnx/products/bts-digital-cockpits-product-brief.pdf.
[6] “Wind River Helix Virtualization Platform,” https://www.windriver.com/
products/helix-platform/.
[7] S. Vadineanu and M. Nasri, “Robust and accurate period inference using
the IEEE Real-Time
regression-based techniques,” in Proceedings of
Systems Symposium, 2020.
[8] M.-K. Yoon, S. Mohan, C.-Y. Chen, and L. Sha, “TaskShufﬂer: A schedule
randomization protocol for obfuscation against timing inference attacks in
real-time systems,” in Proceedings of the IEEE Real-Time and Embedded
Technology and Applications Symposium, 2016.
[9] K.-T. Cho and K. G. Shin, “Fingerprinting electronic control units for ve-
hicle intrusion detection,” in Proceedings of the 25th USENIX Conference
on Security Symposium, 2016.
[10] M. Vassena, G. Soeller, P. Amidon, M. Chan, J. Renner, and D. Stefan,
“Foundations for parallel information ﬂow control runtime systems,” in
Proceedings of International Conference on Principles of Security and
Trust, 2019.
[11] M.-K. Yoon, M. Liu, H. Chen, J.-E. Kim, and Z. Shao, “Blinder: Partition-
oblivious hierarchical scheduling,” in Proceedings of the 30th USENIX
Security Symposium, 2021.
[12] W.-M. Hu, “Reducing timing channels with fuzzy time,” Journal of
computer security, vol. 1, no. 3-4, pp. 233–254, 1992.
[13] B. C. Vattikonda, S. Das, and H. Shacham, “Eliminating ﬁne grained
timers in xen,” in Proceedings of the 3rd ACM Workshop on Cloud
Computing Security, 2011.
[14] J.-E. Kim, T. Abdelzaher, and L. Sha, “Budgeted generalized rate mono-
tonic analysis for the partitioned, yet globally scheduled uniprocessor
model,” in Proceedings of
the 21st IEEE Real-Time and Embedded
Technology and Applications Symposium, 2015.
[15] I. Shin and I. Lee, “Periodic resource model for compositional real-
time guarantees,” in Proceedings of the 24th IEEE Real-Time Systems
Symposium, 2003.
[16] B. Sprunt, L. Sha, and J. Lehoczky, “Aperiodic task scheduling for hard-
real-time systems,” Journal of Real-Time Systems, vol. 1, pp. 27–60, 1989.
https://www.lynx.com/products/lynxsecure-separation-
[17] “LynxSecure,”
kernel-hypervisor.
[18] S. Xi, J. Wilson, C. Lu, and C. Gill, “Rt-xen: Towards real-time hyper-
visor scheduling in xen,” in Proceedings of the 9th ACM International
Conference on Embedded Software, 2011.
[19] J. M. Calandrino, H. Leontyev, A. Block, U. C. Devi, and J. H. Anderson,
“LITMUSRT: A testbed for empirically comparing real-time multipro-
cessor schedulers,” in Proceedings of the 27th IEEE Real-Time Systems
Symposium, 2006.
[20] L. Sha, R. Rajkumar, and J. P. Lehoczky, “Priority inheritance protocols:
An approach to real-time synchronization,” IEEE Trans. Comput., vol. 39,
no. 9, pp. 1175–1185, Sep. 1990.
[21] R. Rajkumar, L. Sha, and J. Lehoczky, “Real-time synchronization proto-
cols for multiprocessors,” in Proceedings of the IEEE Real-Time Systems
Symposium, 1988.
[22] N. Audsley, A. Burns, M. Richardson, K. Tindell, and A. J. Wellings, “Ap-
plying new scheduling theory to static priority pre-emptive scheduling,”
Software Engineering Journal, vol. 8, pp. 284–292, 1993.
[23] Information Assurance Directorate (National Security Agency), “U.s.
government protection proﬁle for separation kernels in environments
requiring high robustness,” 2007.
[24] J. Alves-Foss, P. W. Oman, C. Taylor, and S. Harrison, “The mils
architecture for high-assurance embedded systems.” International Journal
of Embedded Systems, vol. 2, no. 3/4, pp. 239–247, 2006.
[25] M. Quigley, K. Conley, B. P. Gerkey, J. Faust, T. Foote, J. Leibs,
R. Wheeler, and A. Y. Ng, “Ros: an open-source robot operating system,”
in ICRA Workshop on Open Source Software, 2009.
[26] C. Cortes and V. Vapnik, “Support-vector networks,” Mach. Learn.,
vol. 20, no. 3, p. 273–297, Sep. 1995.
[27] Q. Ge, Y. Yarom, D. Cock, and G. Heiser, “A survey of microarchitectural
timing attacks and countermeasures on contemporary hardware,” Journal
of Cryptographic Engineering, vol. 8, no. 1, pp. 1–27, 2018.
[28] V. Kiriansky, I. Lebedev, S. Amarasinghe, S. Devadas, and J. Emer,
“DAWG: A Defense Against Cache Timing Attacks in Speculative Exe-
cution Processors,” in Proceedings of the 51st IEEE/ACM International
Symposium on Microarchitecture, 2018.
[29] P. Kocher, J. Horn, A. Fogh, , D. Genkin, D. Gruss, W. Haas, M. Hamburg,
M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, “Spectre
attacks: Exploiting speculative execution,” in Proceedings of 40th IEEE
Symposium on Security and Privacy, 2019.
[30] M. Joseph and P. K. Pandya, “Finding response times in a real-time
system.” The Computer Journal, vol. 29, no. 5, pp. 390–395, 1986.
[31] C. A. Waldspurger and W. E. Weihl, “Lottery scheduling: Flexible
the 1st
Proportional-Share resource management,” in Proceedings of
Symposium on Operating Systems Design and Implementation, 1994.
[32] C. L. Liu and J. W. Layland, “Scheduling algorithms for multiprogram-
ming in a hard real-time environment,” Journal of the ACM, vol. 20, no. 1,
pp. 46–61, January 1973.
[33] R. I. Davis and A. Burns, “Hierarchical ﬁxed priority pre-emptive schedul-
ing,” in Proceedings of the 24th IEEE Real-Time Systems Symposium,
2005.
[34] J. K. Strosnider, J. P. Lehoczky, and L. Sha, “The deferrable server
algorithm for enhanced aperiodic responsiveness in hard real-time envi-
ronments,” IEEE Trans. Comput., vol. 44, no. 1, pp. 73–91, Jan. 1995.
[35] “Intel NUC Kit NUC7i5BNK,” https://www.intel.com/content/www/us/
en/products/boards-kits/nuc/kits/nuc7i5bnk.html.
[36] C. E. Shannon, “A mathematical theory of communication,” The Bell
System Technical Journal, vol. 27, no. 3, pp. 379–423, 1948.
[37] L. Almeida and P. Pedreiras, “Scheduling within temporal partitions:
response-time analysis and server design,” in Proceedings of the 4th ACM
International Conference on Embedded Software, 2004.
[38] P. Li, D. Gao, and M. K. Reiter, “Stopwatch: a cloud architecture for
timing channel mitigation,” ACM Transactions on Information and System
Security (TISSEC), vol. 17, no. 2, pp. 1–28, 2014.
[39] W. Wu, E. Zhai, D. I. Wolinsky, B. Ford, L. Gu, and D. Jackowitz, “Ward-
ing off timing attacks in deterland,” in Proceedings of the Conference on
Timely Results in Operating Systems, 2015.
[40] J. Son and J. Alves-Foss, “Covert timing channel analysis of rate mono-
tonic real-time scheduling algorithm in mls systems,” in Proceedings of
the IEEE Information Assurance Workshop, 2006.
[41] M. V¨olp, C.-J. Hamann, and H. H¨artig, “Avoiding Timing Channels in
Fixed-priority Schedulers,” in Proceedings of the ACM Symposium on
Information, Computer and Communications Security, 2008.
[42] C.-Y. Chen, S. Mohan, R. Pellizzoni, R. Bobba, and N. Kiyavash, “A
novel side-channel in real-time scheduler,” in Proceedings of the IEEE
Real-Time and Embedded Technology and Applications Symposium, 2019.
[43] M. Salem, M. Crowley, and S. Fischmeister, “Anomaly detection using
inter-arrival curves for real-time systems,” in Proceedings of the 28th
Euromicro Conference on Real-Time Systems, 2016.
[44] X. Ying, G. Bernieri, M. Conti, and R. Poovendran, “Tacan: Transmitter
authentication through covert channels in controller area networks,” in
Proceedings of the 10th ACM/IEEE International Conference on Cyber-
Physical Systems, 2019.
[45] C. Young, H. Olufowobi, G. Bloom, and J. Zambreno, “Automotive
intrusion detection based on constant can message frequencies across
vehicle driving modes,” in Proceedings of ACM Workshop on Automotive
Cybersecurity, 2019.
[46] S. Cabuk, C. E. Brodley, and C. Shields, “Ip covert timing channels:
Design and detection,” in Proceedings of the 11th ACM Conference on
Computer and Communications Security, 2004.
[47] J. Xing, Q. Kang, and A. Chen, “Netwarden: Mitigating network covert
the 29th
channels while preserving performance,” in Proceedings of
USENIX Security Symposium, 2020.
[48] A. Belozubova, A. Epishkina, and K. Kogos, “Random delays to limit
timing covert channel,” in Proceedings of European Intelligence and
Security Informatics Conference, 2016.
[49] Y. Wang, P. Chen, Y. Ge, B. Mao, and L. Xie, “Trafﬁc controller: A prac-
tical approach to block network covert timing channel,” in Proceedings
of the International Conference on Availability, Reliability and Security,
2009.
[50] S. Jajodia, A. K. Ghosh, V. Swarup, C. Wang, and X. S. Wang, Moving tar-
get defense: creating asymmetric uncertainty for cyber threats. Springer
Science & Business Media, 2011, vol. 54.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:56 UTC from IEEE Xplore.  Restrictions apply. 
464
[51] H. Okhravi, T. Hobson, D. Bigelow, and W. Streilein, “Finding focus in
the blur of moving-target techniques,” IEEE Security & Privacy, vol. 12,
no. 2, pp. 16–26, 2014.
[52] L. V. Davi, A. Dmitrienko, S. N¨urnberger, and A.-R. Sadeghi, “Gadge me
if you can: Secure and efﬁcient ad-hoc instruction-level randomization
for x86 and arm,” in Proceedings of the 8th ACM SIGSAC Symposium on
Information, Computer and Communications Security, 2013.
[53] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh,
“On the effectiveness of address-space randomization,” in Proceedings of
the 11th ACM Conference on Computer and Communications Security,
2004.
[54] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz, “Readactor: Practical code randomization
resilient to memory disclosure,” in Proceedings of the IEEE Symposium
on Security and Privacy, 2015.
[55] G. S. Kc, A. D. Keromytis, and V. Prevelakis, “Countering code-injection
attacks with instruction-set randomization,” in Proceedings of the 10th
ACM Conference on Computer and Communications Security, 2003.
[56] T. Zhang and R. B. Lee, “New models of cache architectures characteriz-
ing information leakage from cache side channels,” in Proceedings of the
Annual Computer Security Applications Conference, 2014.
[57] J. H. Jafarian, E. Al-Shaer, and Q. Duan, “Openﬂow random host
mutation: Transparent moving target defense using software deﬁned net-
working,” in Proceedings of the 1st Workshop on Hot Topics in Software
Deﬁned Networks, 2012.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:56 UTC from IEEE Xplore.  Restrictions apply. 
465