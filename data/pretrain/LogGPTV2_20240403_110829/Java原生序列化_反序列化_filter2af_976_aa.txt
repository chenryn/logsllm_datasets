# Java原生序列化/反序列化
## **Java IO**
在学习Java反序列化之前我们先要了解一下Java的输入输出流：
java的IO流分为了 **文件IO流（FileInput/OutputStream）和对象IO流（ObjectInput/OutputStream）**
，从名字上就可以看出来一个是用来对文件进行输入和输出，一个是对对象进行输入和输出。
流的传输过程：
首先不管是输入还是输出，传输的两端都是文件和java的运行程序，所以如果想要在这二者之间进行传输，我们就需要将他们两个之间搭起来一个可以传输的通道，这样就可以实现流的传输。
  * 输出流（OutputStream）：
如果我们想对一个文件进行写入操作，那么实质上是在java程序中将流（想要写入的内容）输出到目的文件中，所以流的方向是从java输出到文件，举个对文件写入一个对象的例子：
    ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("filename"));
    oos.writeObject(obj);
首先用`new FileOutputStream`创建一个文件输出流，再用`new
ObjectOutputStream`创建一个对象输出流（因为oos是对象输出流类型），这时我们就可以在java程序中向外（文件）输出流（内容）了，画成图大概是这样：
当我们要给这个文件传一个obj对象时，就会从java程序顺着这条通道进入到file中。
  * 输入流（InputStream）
其实输入流和输出流构建出传输通道的方法几乎是一样的，区别就是流的输出方向是从file指向了java程序，所以如果想要read这个文件我们就要用输入流将file输入到java程序中进行读取。
## **Java序列化和反序列化的过程**
首先为什么要进行序列化和反序列化，在程序运行结束后，这个程序里的对象都会被删除，并且对象的构成很复杂，传输起来非常不方便。如果我们想要让某些对象持久的保存下来并利于传输，我们就可以将这些对象进行序列化成一串数据，保存在某个地方，在需要用到这个对象时再反序列化让这一串数据还原成一个对象。看到一个很生动的比喻，想把一张桌子搬进门里，如果不能通过，我们就可以将这个桌子拆开（序列化），在搬进去之后再将桌子组装回去（序列化），这就是序列化和反序列化。
与php反序列化不同的是php序列化和反序列化提供了关键字`serialize和unserialize`，但java并没有这种api，我们刚才提到了Java的IO，那么它和Java的序列化和反序列化之间有什么关系呢，我们刚才说序列化就是将对象转换为一串字节数据并保存起来，那么这个过程的实现其实就是依靠java的输出，将这个对象从java程序里以字节数据流的形式输出到java的外部，相对的反序列化其实就是依靠java的输入，将java外的字节数据流输入到java程序中，最终经过一些处理还原为对象。也就是说java中的序列化和反序列化是需要开发人员自己写出整个过程。这里提供两段使用javaIO进行序列化和反序列化的代码（如果要完成整个序列化和反序列化的过程，还需要其他方法参与构建，如readObject和writeObject，下面会提到），假设ser.bin是我们用来储存序列化后字节数据流的文件：
    /** 要序列化和反序列化的类 **/
    import java.io.Serializable;
    public class Person implements Serializable {
        private String name;
        private int age;
        public Person(){
        }
        // 构造函数
        public Person(String name, int age){
            this.name = name;
            this.age = age;
        }
        @Override
        public String toString(){
            return "Person{" +
                    "name='" + name + '\\'' +
                    ", age=" + age +
                    '}';
        }
    }
    /** 序列化 **/
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.ObjectOutput;
    import java.io.ObjectOutputStream;
    public class SerializationTest {
        public static void serialize(Object obj) throws IOException{
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("ser.bin"));
            oos.writeObject(obj);
        }
        public static void main(String[] args) throws Exception{
            Person person = new Person("aa",22);
            System.out.println(person);
            serialize(person);
        }
    }
    /** 反序列化 **/
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.io.ObjectInputStream;
    public class UnserializeTest {
        public static Object unserialize(String Filename) throws IOException, ClassNotFoundException{
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));
            Object obj = ois.readObject();
            return obj;
        }
        public static void main(String[] args) throws Exception{
            Person person = (Person)unserialize("ser.bin");
            System.out.println(person);
        }
    }
输出后可以发现在序列化之前输出对象person和在反序列化后输出都调用了`__toString`，成功构造了序列化和反序列化。
## **php和Java反序列化之间的区别**
在php的序列化和反序列化中提供了serialize和unserialize函数，可以直接将对象序列化为一串数据或直接将一串数据反序列化为一个对象，程序员在这个过程中是无法参与的，但在Java中，需要程序员自己来构建序列化和反序列化的过程，php在反序列化时会自动触发`__wakeup`函数，java在反序列化时会自动触发`readObject`方法，虽然都是在反序列化时触发，但二者之间有一些细微的差别。
php反序列化（对一个数据库链接对象反序列化）：
    dsn = dsn;
            $this->username = username;
            $this->password = password;
            $this->connect();
        }
        private function connect()
        {
            $this->link = new PDO($this->dsn, $this->username, $this->password);
        }
    }
如果我们直接输出序列化后的这个Connection类的对象，发现输出为null，那么在反序列化时也是null，因为在php中资源类型的对象默认不会写入序列化数据中。
如果我们将代码改成下面这样就可以在序列化后在`$link`中拿到一个数据库连接了：
    dsn = dsn;
            $this->username = username;
            $this->password = password;
            $this->connect();
        }
        private function connect()
        {
            $this->link = new PDO($this->dsn, $this->username, $this->password);
        }
        public function __sleep()
        {
                return array('dsn', 'username', 'password');
        }
        public function __wakeup()
        {
            $this->connect();
        }
    }
Connection的对象被反序列化后调用`__wakeup`，执行connect函数连接数据库，所以`__wakeup`的作用其实是反序列化后执行一些初始化操作，但在php中很少利用序列化数据传输资源类型的对象，而其他类型的对象在反序列化的时候已经把值写死了，所以php的反序列化漏洞中很少是由`__wakeup`这个方法触发的，通常触发在`__destruct`中。
Java反序列化：
    import java.io.IOException;
    import java.io.Serializable;
    public class Person implements Serializable {
        private String name;
        private int age;
        Person(String name,int age)
        {
            this.name = name;
            this.age = age;
        }
        private void writeObject(java.io.ObjectOutputStream s) throws IOException {
            s.defaultWriteObject();
            s.writeObject("This is a Object");
        }
        private void writeObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
            s.defaultReadObject();
            String message = (String) s.readObject();
            System.out.println(message);
        }
    }
在`writeObject`中，当传入的对象完成了从`ObjectOutputStream`中继承来的`defaultWriteObject`后，向流内写入了一个"This
is a
Object"，因此会在序列化后触发改方法，将字符串写入输出流的对象中，用知识星球里提到的工具SerializationDumper可以看到这个字符串被写到了objectAnnotation位置，在反序列化还原对象时就会将这个字符串输出。
反序列化的过程是根据开发者的想法来实现的，所以总结一下`__wakeup`和`readObject`的不同就是：`readObject`倾向于解决"反序列化时如何还原一个完整对象"这个问题，而PHP的`__wakeup`更倾向于解决反序列化后如何初始化这个对象的问题。
# 反射+URLDNS
# **Java反射篇**
如果我们有一个类，那么我们可以通过实例化该类的对象并调用其中的方法，或者我们也可以直接调用该类中的静态方法，这是我们在一般情况下调用一个方法时的过程，但是在不同的语言中也有不同的方法可以拿到某一个类中的所有内容，在java中我们可以通过“反射”来拿到某一个类中的具体内容
如果把通过new对象并且调用其中的方法的过程叫做“正射”，那么不使用new来创建对象并调用其中方法的过程就叫做“反射”
## **反射常用到的方法**
在java的lang包中有一个静态Class类
在java程序运行并编译加载一个类时，java.lang.Class就会实例化出一个对象，这个对象储存该类的所有信息
因此我们可以通过一些方法来获取到这个类的信息 先了解一些方法
  * `Class.forName(classname)` 获取classname类中的所有属性包括类名 比如`Class clazz = Class.forName("java.lang.Runtime");`
那么类clazz中就得到了java.lang.Runtime中的所有属性
  * `Class.newInstance()`实例化对象，并触发该类的构造方法 下面会详细解释
  * `Class.getMethod(method name,arg)` 获取一个对象中的public方法，由于java支持方法的重载，所以需要第二参数作为获取的方法的形参列表，这样就可以确定获取的是哪一个方法
  * `Method.invoke`() 执行方法，如果是一个普通方法，则invoke的第一个参数为该方法所在的对象，如果是静态方法则第一个参数是null或者该方法所在的类 第二个参数为要执行方法的参数
`forName`并不是唯一获取一个类的方式，其他方式还有：
  * obj.getClass() 如果上下文中存在某个类的实例obj，那我们可以直接通过obj.getClass来获取它的类
  * Y1.class 如果已经加载了一个类Y1，只是想获取到它由java.lang.class所创造的对象，那么就直接使用这种方法获取即可，这种方法并不属于反射
  * Class.Forname 如果知道某个类的名字，想获取到这个类，就可以使用forName来获取
### **关于forname**
默认情况下 `forName`的第一个参数是类名，第二个参数表示是否初始化，第三个参数就是ClassLoader
ClassLoader是一个“加载器”，告诉java虚拟机如何加载这个类，java默认的ClassLoader就是根据类名加载类，这个类名必须是完整路径，比如上面提到的java.lang.Runtime
第二个参数`initialize`用于forname时的初始化，一般我们会认为初始化就是加载类的构造函数，其实并不是，这里提到的初始化有以下过程：
看下面这个类：