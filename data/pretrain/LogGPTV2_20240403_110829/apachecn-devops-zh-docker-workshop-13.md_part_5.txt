    ```
    ./prometheus --config.file=prometheus.yml
    ```
2.  打开你系统的`/etc/hosts`文件，给`127.0.0.1`的主机 IP 加一个域名。不幸的是，您将无法使用您用来访问普罗米修斯的本地主机 IP 地址来自动为格拉夫纳提供数据源。诸如`127.0.0.1`、`0.0.0.0`或使用本地主机的 IP 地址将不会被识别为 Grafana 的数据源。根据您的系统，您可能已经在`hosts`文件中添加了许多不同的条目。您通常会将`127.0.0.1`的 IP 地址列为第一批引用`localhost`域的 IP 地址之一，并将`prometheus`修改为这一行，如下图所示:
    ```
    1 127.0.0.1       localhost prometheus
    ```
3.  保存`hosts`文件。打开你的网络浏览器，输入网址`http://prometheus:9090`。普罗米修斯表情浏览器现在应该显示了。您不再需要提供系统 IP 地址。
4.  要自动配置您的 Grafana 映像，您需要从您的主机系统挂载一个`provisioning`目录。创建一个供应目录，并确保该目录包含用于`dashboards`、`datasources`、`plugins`和`notifiers`的额外目录，如下命令所示:
    ```
    mkdir -p provisioning/dashboards provisioning/datasources provisioning/plugins provisioning/notifiers
    ```
5.  在`provisioning/datasources`目录下创建一个名为`automatic_data.yml`的文件。用文本编辑器打开文件，输入以下详细信息，告诉 Grafana 它将使用哪些数据来提供仪表板和可视化效果。以下详细信息只是简单地命名数据源、提供数据类型以及在哪里查找数据。在这种情况下，这是你的新普罗米修斯域名:
    ```
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus:9090
      access: direct
    ```
6.  Now, create a file, `automatic_dashboard.yml`, in the `provisioning/dashboards` directory. Open the file with your text editor and add the following details. This simply provides the location of where future dashboards can be stored on startup:
    ```
    apiVersion: 1
    providers:
    - name: 'Prometheus'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /etc/grafana/provisioning/dashboards
    ```
    你已经做了足够多的工作来树立我们的格拉夫娜·多克形象。您正在使用作为`grafana/grafana`提供的受支持的 Grafana 映像。
    注意
    我们还没有任何代码可以添加为仪表板，但是在下面的步骤中，您将创建一个基本的仪表板，该仪表板将在本练习的后面自动配置。如果你想的话，你也可以在网上搜索 Grafana 用户创建的现有仪表板，并提供给他们。
7.  Run the following command to pull and start up the Grafana image. It mounts your provisioning directory to the `/etc/grafana/provisioning` directory on your Docker image using the `-v` option. It also uses the `-e` option to set the administration password to `secret` using the `GF_SECURITY_ADMIN_PASSWORD` environment variable, which will mean you won't need to reset the administration password each time you log in to a newly started container. Finally, you also use `-p` to expose port `3000` of your image to port `3000` of our system:
    ```
    docker run --rm -d --name grafana -p 3000:3000 -e "GF_SECURITY_ADMIN_PASSWORD=secret" -v ${PWD}/provisioning:/etc/grafana/provisioning grafana/grafana
    ```
    注意
    虽然使用 Grafana Docker 映像很方便，但每次映像重新启动时，您都会丢失所有更改和仪表板。这就是为什么我们将提供安装，同时演示如何使用 Grafana。
8.  You have started up the image on port `3000`, so you should now be able to open a web browser. Enter the URL `http://0.0.0.0:3000` in your web browser. It should display the welcome page for Grafana. To log in to the application, use the default administrator account that has a username of `admin` and the password we specified as the `GF_SECURITY_ADMIN_PASSWORD` environment variable:
    ![Figure 13.16: The Grafana login screen ](img/B15021_13_16.jpg)
    图 13.16:格拉夫纳登录屏幕
9.  When you log in, you'll be presented with the Grafana Home Dashboard. Click the plus symbol on the left of the screen and select `Dashboard` to add a new dashboard:
    ![Figure 13.17: The Grafana welcome screen ](img/B15021_13_17.jpg)
    图 13.17:格拉夫纳欢迎屏幕
    注意
    您的 Grafana 界面很可能会显示在黑暗的默认主题中。我们已经将我们的主题改为浅色，以便于阅读。要在您自己的 Grafana 应用上更改此首选项，您可以单击屏幕左下方的用户图标，选择`Preferences`，然后搜索`UI Theme`。
10.  点击`Add new panel`按钮。
11.  To add a new query using `Prometheus` data, select `Prometheus` as the data source from the drop-down list:
    ![Figure 13.18: Creating our first dashboard in Grafana ](img/B15021_13_18.jpg)
    图 13.18:在格拉夫纳创建我们的第一个仪表板
12.  In the metrics section, add the PromQL query `sum (rate (container_cpu_usage_seconds_total{image!=""}[1m])) by (name)`. The query will provide the details of all the containers running on your system. It will also provide the CPU usage of each overtime. Depending on the amount of data you have, you may want to set `Relative time` to `15m` in the `Query options` drop down menu.
    本示例使用`15m`来确保您有足够的数据用于图表，但是这个时间范围可以设置为您想要的任何值:
    ![Figure 13.19: Adding dashboard metrics ](img/B15021_13_19.jpg)
    图 13.19:添加仪表板指标
13.  Select the `Show options` button to add a title to your dashboard panel. In the following image, the title of your panel is set as `CPU Container Usage`:
    ![Figure 13.20: Adding a dashboard title ](img/B15021_13_20.jpg)
    图 13.20:添加仪表板标题
14.  Click the save icon at the top of the screen. This will give you the option to name the dashboard— `Container Monitoring` in this instance. When you click `Save`, you will then be taken to your completed dashboard screen, similar to the one here:
    ![Figure 13.21: Dashboard screen ](img/B15021_13_21.jpg)
    图 13.21:仪表板屏幕
15.  At the top of the dashboard screen, to the left of the save icon, you will have the option to export your dashboard in `JSON` format. If you do this, you can use this `JSON` file to add to your provisioning directory. It will help you install the dashboard into your Grafana image when you run it. Select `Export` and save the file to the `/tmp` directory where the name of the file will default to something similar to the name of the dashboard and the timestamp data. In this example, it saved the `JSON` file as `Container Monitoring-1579130313205.json`. Also make sure the `Export for sharing externally` option is not turned on, as shown in the image below:
    ![Figure 13.22: Exporting your dashboard as JSON ](img/B15021_13_22.jpg)
    图 13.22:将仪表板导出为 JSON
16.  要将仪表板添加到您的配置文件中，您需要首先停止 Grafana 映像的运行。使用以下`docker kill`命令进行操作:
    ```
    docker kill grafana
    ```
17.  将您在*步骤 15* 中保存的仪表板文件添加到`provisioning/dashboards`目录，并将文件`ContainerMonitoring.json`命名为副本的一部分，如下命令所示:
    ```
    cp /tmp/ContainerMonitoring-1579130313205.json provisioning/dashboards/ContainerMonitoring.json
    ```
18.  Start the Grafana image again and log in to the application using the default administration password:
    ```
    docker run --rm -d --name grafana -p 3000:3000 -e "GF_SECURITY_ADMIN_PASSWORD=secret" -v ${PWD}/provisioning:/etc/grafana/provisioning grafana/grafana
    ```
    注意
    通过以这种方式配置仪表板和数据源，这意味着您将不再能够从 Grafana web 界面创建仪表板。从现在开始创建仪表板时，您将看到一个选项，可以将仪表板保存为 JSON 文件，就像我们在导出仪表板时所做的那样。
19.  Log in to the home dashboard now. You should see the `Container Monitoring` dashboard available as a recently accessed dashboard, but if you click the home icon at the top of the screen, it will also show it available in the `General` folder of your Grafana installation:
    ![Figure 13.23: Container monitoring dashboard available and provisioned ](img/B15021_13_23.jpg)
图 13.23:容器监控仪表板可用并已配置
我们现在已经设置了一个功能齐全的仪表板，当我们运行 Grafana Docker 映像时，它会自动加载。如您所见，Grafana 提供了一个专业的用户界面来帮助我们监控正在运行的容器的资源使用情况。
这就把我们带到了本节的最后，我们向您展示了如何使用 Prometheus 来收集您的指标，以帮助监控您的容器应用是如何运行的。以下活动将利用您在前面几节中学到的知识来进一步扩展您的安装和监控。
## 活动 13.01:创建 Grafana 仪表板来监控系统内存
在前面的练习中，您已经设置了一个快速仪表板来监控我们的 Docker 容器正在使用的系统 CPU。正如您在上一章中看到的，监控我们的运行容器所使用的系统内存也很重要。在本练习中，您将被要求创建一个 Grafana 仪表板，该仪表板将监控我们正在运行的容器所使用的系统内存，并将其添加到我们的`Container Monitoring`仪表板中，确保在我们的 Grafana 映像启动时可以对其进行配置:
完成本活动所需的步骤如下:
1.  确保普罗米修斯正在监控您的环境，并且您的系统上安装了 Grafana。确保您使用 Grafana 搜索普罗米修斯上存储的时间序列数据。
2.  创建一个 PromQL 查询来监控正在运行的 Docker 容器所使用的容器内存。
3.  将新仪表板保存在`Container Monitoring`仪表板上。
4.  当您启动 Grafana 容器时，确保新的和改进的`Container Monitoring`仪表板现在可用并已配置好。
**预期输出**:
启动 Grafana 容器时，您应该会在仪表板顶部看到新创建的`Memory Container usage`面板:
![Figure 13.24: New dashboard panel displaying memory usage ](img/B15021_13_24.jpg)
图 13.24:显示内存使用情况的新仪表板面板
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor353)找到。
下一个活动将确保您可以放心使用出口商，并向普罗米修斯添加新的目标，以开始在您的全景徒步应用中跟踪额外的指标。
## 活动 13.02:配置全景徒步应用向普罗米修斯展示指标
您的指标监控环境开始变得非常好，但是在您的全景徒步应用中有一些应用可以提供额外的细节和指标来监控，例如，在您的数据库上运行的 PostgreSQL 应用。选择全景徒步旅行应用中的一个应用，向您的普罗米修斯环境展示指标:
要完成本活动，您必须采取以下步骤:
1.  确保普罗米修斯正在您的系统上运行并收集指标。
2.  选择一个作为全景徒步应用的一部分运行的服务或应用，并研究如何公开指标供普罗米修斯收集。
3.  实现对应用或服务的更改。
4.  测试您的更改，并验证指标是否可供收集。
5.  在普罗米修斯上配置一个新目标来收集新的全景徒步应用指标。
6.  验证您能够在普罗米修斯上查询您的新指标。
成功完成活动后，您应该会看到普罗米修斯`Targets`页面上显示的`postgres-web`目标:
![Figure 13.25: New postgres-web Targets page displayed on Prometheus ](img/B15021_13_25.jpg)
图 13.25:普罗米修斯上显示的新 postgres-web 目标页面
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor354)找到。
# 总结
在这一章中，我们花了很长时间来研究度量和监控我们的容器应用和服务。我们首先讨论了为什么您需要对度量监控有一个清晰的策略，以及为什么您需要在项目开始开发之前做很多决定。然后我们介绍了普罗米修斯，并概述了它的历史，它是如何工作的，以及为什么它在很短的时间内变得越来越受欢迎。然后是时候重新开始工作了，我们将普罗米修斯安装到我们的系统上，开始熟悉使用网络界面，开始从 Docker 收集指标(有一些小的变化)，并通过使用`cAdvisor`，在运行的容器上收集指标。
普罗米修斯使用的查询语言有时会有点混乱，所以我们花了一些时间来探索 PromQL，然后才考虑使用导出器来收集更多的指标。我们通过将 Grafana 集成到我们的环境中，显示来自普罗米修斯的时间序列数据，并对我们收集的数据创建有用的仪表板和可视化来完成这一章。
我们的下一章将继续监控主题，从正在运行的容器中收集和监控日志数据。*