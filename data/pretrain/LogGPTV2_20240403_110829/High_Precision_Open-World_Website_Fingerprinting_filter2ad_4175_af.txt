at that time as Tor equalized cell sizes. In particular, Herrmann
et al. [8] showed that their attack, as well as Liberatore and
Levine’s attack [13], did not succeed against Tor, though their
attacks were able to beat SSH and selected VPNs. Lu et
al. [15], Panchenko et al. [20] and Cai et al. [3] were some of
the ﬁrst to show success against Tor. Attack accuracy was
improved and computational time was decreased by Wang
et al. [29], Hayes et al. [7], another work by Panchenko et
al. [19], and more recently with deep learning by Rimmer et
al. [23] and Sirinam et al. [25]. These works also attempted
to lower the false positive rate for open-world effectiveness.
Some previous WF works have discussed the base rate
fallacy, though they did not include the base rate in their
analysis or experiments. Panchenko et al. [19] discussed issues
with precision, though their attack was not precise (as seen in
our results as well), and they found that WF attacks generally
would fail in the large open world if they are not precise.
This important point underlines our paper’s motivation. Hayes
et al. [7] are able to achieve a more precise attack using the k-
neighbors strategy, as did an earlier work by Wang et al. [29].
We showed that our POs are more effective and can be applied
to any attack.
VII. CONCLUSION AND FUTURE WORK
This work tackles the open problem of open-world website
ﬁngerprinting (OWF). We found that OWF classiﬁers were
REFERENCES
[1] BISSIAS, G. D., LIBERATORE, M., JENSEN, D., AND LEVINE, B. N.
Privacy Vulnerabilities in Encrypted HTTP Streams. In Privacy Enhanc-
ing Technologies (2006), Springer, pp. 1–11.
[2] CAI, X., NITHYANAND, R., WANG, T., GOLDBERG, I., AND JOHN-
SON, R. A Systematic Approach to Developing and Evaluating Website
Fingerprinting Defenses. In Proceedings of the 21st ACM Conference
on Computer and Communications Security (2014).
[3] CAI, X., ZHANG, X. C., JOSHI, B., AND JOHNSON, R. Touching from a
Distance: Website Fingerprinting Attacks and Defenses. In Proceedings
of the 19th ACM Conference on Computer and Communications Security
(2012), pp. 605–616.
[4] CHANG, C.-C., AND LIN, C.-J. LIBSVM: a library for support vector
machines. ACM Transactions on Intelligent Systems and Technology
(TIST) 2, 3 (2011), 27.
Trafﬁc Analysis of SSL-Encrypted
Web Browsing. http://www.cs.berkeley.edu/∼daw/teaching/cs261-f98/
projects/ﬁnal-reports/ronathan-heyning.ps, 1998.
[5] CHENG, H., AND AVNUR, R.
[6] DINGLEDINE, R., MATHEWSON, N., AND SYVERSON, P. Tor: The
In Proceedings of the 13th USENIX
second-generation onion router.
Security Symposium (2004).
[7] HAYES, J., AND DANEZIS, G. k-Fingerprinting: A Robust Scalable
Website Fingerprinting Technique. In Proceedings of the 25th USENIX
Security Symposium (2016).
[8] HERRMANN, D., WENDOLSKY, R., AND FEDERRATH, H. Website
Fingerprinting: Attacking Popular Privacy Enhancing Technologies with
In Proceedings of the 2009
the Multinomial Na¨ıve-Bayes Classiﬁer.
ACM Workshop on Cloud Computing Security (2009), pp. 31–42.
[9] HINTZ, A. Fingerprinting Websites Using Trafﬁc Analysis. In Privacy
Enhancing Technologies (2003), Springer, pp. 171–178.
[10] JANSEN, R., JUAREZ, M., GALVEZ, R., ELAHI, T., AND DIAZ, C.
Inside job: Applying trafﬁc analysis to measure Tor from within.
In Proceedings of the 25th Network and Distributed System Security
Symposium (2018).
[11] JUAREZ, M., AFROZ, S., ACAR, G., DIAZ, C., AND GREENSTADT, R.
A Critical Evaluation of Website Fingerprinting Attacks. In Proceedings
of the 21st ACM Conference on Computer and Communications Security
(2014).
[12] JUAREZ, M., IMANI, M., PERRY, M., DIAZ, C., AND WRIGHT, M.
In Computer
Toward an Efﬁcient Website Fingerprinting Defense.
Security–ESORICS 2016. Springer, 2016, pp. 27–46.
[13] LIBERATORE, M., AND LEVINE, B. N.
Inferring the Source of En-
crypted HTTP Connections. In Proceedings of the 13th ACM Conference
on Computer and Communications Security (2006), pp. 255–263.
[14] LINUX FOUNDATION. Let’s Encrypt Stats — Percentage of Web Pages
Loaded by Firefox Using HTTPS. https://letsencrypt.org/stats, 2018.
Accessed Dec. 2018.
[15] LU, L., CHANG, E.-C., AND CHAN, M. C. Website Fingerprinting and
Identiﬁcation Using Ordered Feature Sequences. In Computer Security–
ESORICS 2010. Springer, 2010, pp. 199–214.
[16] NATIONAL RESEARCH COUNCIL. Strengthening forensic science in the
United States: a path forward. National Academies Press, 2009.
[17] NITHYANAND, R., CAI, X., AND JOHNSON, R. Glove: A Bespoke
the 13th ACM
In Proceedings of
Website Fingerprinting Defense.
Workshop on Privacy in the Electronic Society (2014).
[18] OVERDORF, R., JUAREZ, M., ACAR, G., GREENSTADT, R., AND
DIAZ, C. How Unique is Your .onion?: An Analysis of the Finger-
In Proceedings of the 24th ACM
printability of Tor Onion Services.
Conference on Computer and Communications Security (2017).
[19] PANCHENKO, A., LANZE, F., ZINNEN, A., HENZE, M., PENNEKAMP,
J., WEHRLE, K., AND ENGEL, T. Website Fingerprinting at Internet
In Proceedings of the 23rd Network and Distributed System
Scale.
Security Symposium (2016).
[20] PANCHENKO, A., NIESSEN, L., ZINNEN, A., AND ENGEL, T. Website
Fingerprinting in Onion Routing Based Anonymization Networks.
In
Proceedings of the 10th ACM Workshop on Privacy in the Electronic
Society (2011), pp. 103–114.
[21] PERRY, M. A Critique of Website Trafﬁc Fingerprinting Attacks. https:
//blog.torproject.org/blog/critique-website-trafﬁc-ﬁngerprinting-attacks,
November 2013. Accessed Feb. 2015.
[22] PIETRASZEK, T. Using adaptive alert classiﬁcation to reduce false
In Recent Advances in Intrusion
positives in intrusion detection.
Detection (2004), pp. 102–124.
[23] RIMMER, V., PREUVENEERS, D., JUAREZ, M., VAN GOETHEM, T.,
AND JOOSEN, W. Automated website ﬁngerprinting through deep
learning.
[24] SAKS, M. J., AND KOEHLER, J. J. The coming paradigm shift in
forensic identiﬁcation science. Science 309, 5736 (2005), 892–895.
[25] SIRINAM, P., IMANI, M., JUAREZ, M., AND WRIGHT, M. Deep
ﬁngerprinting: Undermining website ﬁngerprinting defenses with deep
learning. In Proceedings of the 25th ACM Conference on Computer and
Communications Security (2018), ACM, pp. 1928–1943.
[26] SUN, Q., SIMON, D. R., WANG, Y.-M., RUSSELL, W., PADMANAB-
HAN, V. N., AND QIU, L. Statistical Identiﬁcation of Encrypted Web
In Proceedings of the 2002 IEEE Symposium on
Browsing Trafﬁc.
Security and Privacy (2002), IEEE, pp. 19–30.
[27] SWETS, J. A. Roc analysis applied to the evaluation of medical imaging
techniques. Investigative radiology 14, 2 (1979), 109–121.
[28] WANG, T. Website Fingerprinting: Attacks and Defenses. PhD thesis,
University of Waterloo, 2016.
[29] WANG, T., CAI, X., NITHYANAND, R., JOHNSON, R., AND GOLD-
BERG, I. Effective Attacks and Provable Defenses for Website Fin-
In Proceedings of the 23rd USENIX Security Symposium
gerprinting.
(2014).
[30] WANG, T., AND GOLDBERG, I.
Improved Website Fingerprinting on
In Proceedings of the 12th ACM Workshop on Privacy in the
Tor.
Electronic Society (2013), pp. 201–212.
[31] WANG, T., AND GOLDBERG, I. On Realistically Attacking Tor with
In Privacy Enhancing Technologies (2016),
Website Fingerprinting.
Springer.
[32] WANG, T., AND GOLDBERG, I. Walkie-Talkie: An Efﬁcient Defense
Against Passive Website Fingerprinting Attacks. In Proceedings of the
26th USENIX Security Symposium (2017).
APPENDIX
Here we describe each of the six previously published
attacks we tested with our POs. The attacks are Bi-XCor [1],
Pa-SVM [20], Ca-OSAD [3], Wa-kNN [29], Ha-kFP [7] and
Pa-CUMUL [19]. We describe how each classiﬁer represents
packet sequences P as R(P ), the distance d(P, P (cid:48)) between
two packet sequences P and P (cid:48), the training and the testing
procedures. We describe the testing procedure by specifying
match (as explained in Section III-B); each classiﬁer assigns
the element to the class that scores the highest with match.
We denote packet sequences as P = (cid:104)p1, p2, . . . , pn(cid:105), where
pi = (ti, (cid:96)i), ti is the interpacket time between pi−1 and pi,
and (cid:96)i is the byte length of packet pi, with positive packet
lengths representing outgoing packets from the client and
negative packet lengths representing incoming packets to the
client. With Tor cells, (cid:96)i ∈ {−1, 1} as all cells have the
same size. P represents the WF attacker’s information, and
he attempts to deduce which web page it came from.
Bi-XCor
Representation. We split R(P ) = (Rt(P ), R(cid:96)(P )), where:
Rt(P ) = (cid:104)t1, t2, . . . , tn(cid:105)
R(cid:96)(P ) = (cid:104)(cid:96)1, (cid:96)2, . . . , (cid:96)n(cid:105)
Distance. Consider two lists a and b with mean ¯a, ¯b and
standard deviation σa, σb respectively. We deﬁne the cross-
correlation function X(a, b) between them:
(cid:80)min(|a|,|b|)
(ai − ¯a)(bi − ¯b)
i=1
min(|a|,|b|) · σa · σb
X(a, b) =
We have:
d(P, P (cid:48)) = 2 − X(Rt(P ), Rt(P (cid:48))) − X(R(cid:96)(P ), R(cid:96)(P (cid:48)))
represent
Training. We
each class C as R(C) =
(Rt(C), R(cid:96)(C)), where the i-th element of Rt(C) is the mean
of all ti for training packet sequences from class C, and
similarly for R(cid:96)(C).
Testing.
match(P, C) = d(R(P ), R(C))
Pa-SVM
Representation. We extract a number of features from each
packet sequence related to packet ordering, directions, and
sizes: R(P ) =. To see the list of features,
refer to the original work [20] or our code.
Distance. We use the radial basis function with γ = 2−25
to compute distances between the feature representations of
packet sequences. The distance is:
d(P, P (cid:48)) = 1 − e−γ||R(P )−R(P (cid:48))||2
Training. We train an SVM on the above pairwise distances
by ﬁnding support vectors which separate classes.
Testing. The matching function uses one-against-one SVM
classiﬁcation as described in Section III-B.
Ca-OSAD
Representation.
R(P ) = {(cid:96)1, (cid:96)2, . . .}
Distance. We compute the pairwise distance between packet
sequences P and P (cid:48) as:
d(P, P (cid:48)) = 1 − e−2·OSAD(P,P (cid:48))2/ min(|P|,|P (cid:48)|)
In the above, OSAD(P, P (cid:48)) is the Optimal String Align-
ment Distance between R(P ) and R(P (cid:48)).
Training. We train an SVM using the custom kernel calculated
from the above pairwise distances.
Testing. The matching function uses one-against-one SVM
classiﬁcation as described in Section III-B.
Wa-kNN
Representation. We extract a number of features from each
packet sequence related to packet ordering, directions, and
sizes: R(P ) =. To see the list of features,
refer to the original work [29] or our code.
Distance. We use a weighted L1-distance between P and P (cid:48):
|F|(cid:88)
d(P, P (cid:48)) =
wi|fi − f(cid:48)
i|
1) d(P, C) =(cid:80)
2) d(P, C) =(cid:80)
3) d(P, C) =(cid:80)
P (cid:48)∈C d(P, P (cid:48))/|C|.
P (cid:48)∈C[:5] d(P, P (cid:48))/|C|.
P (cid:48)∈C[:25] d(P, P (cid:48))/|C|.
i=1
Training. We learn weights wi that optimize the accuracy of
the weighted distance.
4) d(P, C) = d(P, C[1]).
5) d(P, C) = d(P, C[5]).
6) d(P, C) = d(P, C[25]).
Testing.
Ha-kFP
match(P, C) = min
P (cid:48)∈C
d(P, P (cid:48))
1000(cid:88)
Representation. We extract features from each packet se-
quence, similar to Wa-kNN. To see the list of features, refer
to the original work [7] or our code.
Distance. Ha-kFP does not produce a distance.
Training. We train a Random Forest classiﬁer with 1000
decision trees, where each tree draws a random sample of
the input elements with replacement, resulting in a sample of
equal size to the input. Each leaf L of a decision tree records
L(x), the number of training samples of each class that fell
in that leaf, for class x.
Testing.
If P falls in leaf L for decision tree i, we calculate
matchi(P, C) = L(C)/(cid:80)
x L(x). Then
match(P, C) =
matchi(P, C)
Pa-CUMUL
i=1
Representation. We extract features from each packet se-
quence, based on total size, time, and 100 linear interpolations
of aggregated packet sizes. To see the list of features, refer to
the original work [19] or our code.
Distance. We use the radial basis function with γ = 2−28
to compute distances between the feature representations of
packet sequences. The distance is:
d(P, P (cid:48)) = 1 − e−γ||R(P )−R(P (cid:48))||2
Training. We train an SVM on the above pairwise distances
by ﬁnding support vectors which separate classes.
Testing. The matching function uses one-against-one SVM
classiﬁcation as described in Section III-B.
Distances
For our distance-based POs, we derived a distance between
packet sequences P, P (cid:48) based on ﬁve previous WF attacks:
Bi-XCor, Pa-SVM, Ca-OSAD, Wa-kNN and Pa-CUMUL.
The distance is equivalent to d(P, P (cid:48)) as written above for
each WF attack. Then, we derived a distance between packet
sequences P and classes C based on the distance between
packet sequences as follows. We denote C[: N ] to mean the
N closest elements to P in C, and C[N ] to mean the N-th
closest element to P in C.
DATA COLLECTION
We collected the Wikipedia data set (100x100+10000) as
follows. For the non-monitored pages, we started from one
of ﬁve pages: the main page, the portal of current events,
the “United States” page, the “India” page, and the “World
War II” page. Then, we randomly traversed links on the page
to other Wikipedia articles, avoiding special pages and pages
corresponding to dates. The random walk lasted for a uniform
length between 1 to 20 steps, after which we would restart
at one of the above ﬁve pages. This was meant to simulate
a client who surfed Wikipedia pages starting from a topic
of interest. For the monitored pages, we manually chose ten
politically/culturally sensitive topics, and for each topic we
manually chose ten relevant pages. We share the list of all
pages in our data set:
https://github.com/OpenWF/openwf.git
We collected the different data set used in Section IV-C as
follows. For AJAX1 and AJAX2, we visited reddit.com
and scrolled down. AJAX1 scrolls down every 1 to 5 seconds
for up to 1000 pixels; AJAX2 scrolls down every 1 to 10
seconds for up to 500 pixels. Each stops after 20 to 40 seconds.
LINKS1 and LINKS2 are based on en.wikipedia.org,
and follows a random walk. LINKS1 visits a new link every 1
to 5 seconds; LINKS2 visits a new link every 1 to 10 seconds,
and each stops after 20 to 40 seconds. All randomness is
uniform.