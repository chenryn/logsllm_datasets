### 问题描述

在使用 Glide 4.0.0-SNAPSHOT 版本时，遇到了一个与设备和 Android 版本无关的崩溃问题。虽然我无法复现这个问题，但从崩溃报告的数量来看，它似乎并不罕见。

### 问题场景

该问题发生在从 Activity A 返回到 Activity B 的过程中。Activity B 包含动画，并且在返回后不久就改变了 ImageView 的可见性状态。

### 代码示例

```java
public void setState(State state) {
    mState = state;
    if (state == State.WORKING) {
        setVisibility(View.VISIBLE);
        mIntroContainer.setVisibility(View.GONE);
        mEmptyContainer.setVisibility(View.GONE);
        mWorkingContainer.setVisibility(View.VISIBLE); //  android:id="@+id/working_overlay"
        
        Glide.with(getContext())
            .load(COFFEE_ANIM_ASSET)
            .apply(RequestOptions.formatOf(DecodeFormat.PREFER_RGB_565))
            .apply(RequestOptions.placeholderOf(R.drawable.sdmanimation))
            .into(mWorkingAnimation); // android:id="@+id/iv_working_animation"
    } else {
        Glide.with(getContext()).clear(mWorkingAnimation);
        mWorkingContainer.setVisibility(View.GONE);
        if (state == State.INTRO) {
            setVisibility(View.VISIBLE);
            mEmptyContainer.setVisibility(View.GONE);
            mIntroContainer.setVisibility(View.VISIBLE);
        } else if (state == State.NORESULTS) {
            setVisibility(View.VISIBLE);
            mIntroContainer.setVisibility(View.GONE);
            mEmptyContainer.setVisibility(View.VISIBLE);
        } else if (state == State.GONE) {
            setVisibility(View.GONE);
            mIntroContainer.setVisibility(View.GONE);
            mEmptyContainer.setVisibility(View.GONE);
        }
    }
}
```

### 崩溃堆栈跟踪

```
Caused by: java.lang.NullPointerException: Attempt to read from field 'int com.bumptech.glide.gifdecoder.GifHeader.frameCount' on a null object reference
    at com.bumptech.glide.gifdecoder.GifDecoder.getFrameCount(GifDecoder.java:262)
    at com.bumptech.glide.load.resource.gif.GifFrameLoader.getFrameCount(GifFrameLoader.java:139)
    at com.bumptech.glide.load.resource.gif.GifDrawable.startRunning(GifDrawable.java:166)
    at com.bumptech.glide.load.resource.gif.GifDrawable.start(GifDrawable.java:154)
    at com.bumptech.glide.request.target.ImageViewTarget.onStart(ImageViewTarget.java:102)
    at com.bumptech.glide.manager.TargetTracker.onStart(TargetTracker.java:31)
    at com.bumptech.glide.RequestManager.onStart(RequestManager.java:245)
    at com.bumptech.glide.manager.ActivityFragmentLifecycle.onStart(ActivityFragmentLifecycle.java:51)
    at com.bumptech.glide.manager.SupportRequestManagerFragment.onStart(SupportRequestManagerFragment.java:175)
    at android.support.v4.app.Fragment.performStart(Fragment.java:1986)
    at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1102)
    at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1248)
    at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1230)
    at android.support.v4.app.FragmentManagerImpl.dispatchStart(FragmentManager.java:2047)
    at android.support.v4.app.FragmentController.dispatchStart(FragmentController.java:176)
    at android.support.v4.app.FragmentActivity.onStart(FragmentActivity.java:553)
    at eu.thedarken.sdm.SDMServiceActivity.onStart(SDMServiceActivity.java:79)
    at eu.thedarken.sdm.SDMMainActivity.onStart(SDMMainActivity.java:155)
    at android.app.Instrumentation.callActivityOnStart(Instrumentation.java:1236)
    at android.app.Activity.performStart(Activity.java:6006)
    at android.app.Activity.performRestart(Activity.java:6063)
    at android.app.Activity.performResume(Activity.java:6068)
    at android.app.ActivityThread.performResumeActivity(ActivityThread.java:2975)
    at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3017)
    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1347)
    at android.os.Handler.dispatchMessage(Handler.java:102)
    at android.os.Looper.loop(Looper.java:135)
    at android.app.ActivityThread.main(ActivityThread.java:5254)
    at java.lang.reflect.Method.invoke(Native Method)
    at java.lang.reflect.Method.invoke(Method.java:372)
    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:903)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:698)
```

### 分析

从堆栈跟踪中可以看出，崩溃的原因是 `GifHeader` 对象为 `null`，导致在尝试读取 `frameCount` 字段时抛出 `NullPointerException`。这可能是由于某些情况下 GIF 资源未能正确加载或初始化所致。

### 解决方案建议

1. **检查资源文件**：确保 `COFFEE_ANIM_ASSET` 和 `R.drawable.sdmanimation` 文件存在且有效。
2. **添加空值检查**：在调用 `Glide` 加载资源之前，添加对 `mWorkingAnimation` 的空值检查。
3. **异步加载**：考虑使用异步加载的方式，避免在 UI 线程上直接处理可能导致崩溃的操作。

```java
public void setState(State state) {
    mState = state;
    if (state == State.WORKING) {
        setVisibility(View.VISIBLE);
        mIntroContainer.setVisibility(View.GONE);
        mEmptyContainer.setVisibility(View.GONE);
        mWorkingContainer.setVisibility(View.VISIBLE); //  android:id="@+id/working_overlay"

        if (mWorkingAnimation != null) {
            Glide.with(getContext())
                .load(COFFEE_ANIM_ASSET)
                .apply(RequestOptions.formatOf(DecodeFormat.PREFER_RGB_565))
                .apply(RequestOptions.placeholderOf(R.drawable.sdmanimation))
                .into(mWorkingAnimation); // android:id="@+id/iv_working_animation"
        }
    } else {
        if (mWorkingAnimation != null) {
            Glide.with(getContext()).clear(mWorkingAnimation);
        }
        mWorkingContainer.setVisibility(View.GONE);
        if (state == State.INTRO) {
            setVisibility(View.VISIBLE);
            mEmptyContainer.setVisibility(View.GONE);
            mIntroContainer.setVisibility(View.VISIBLE);
        } else if (state == State.NORESULTS) {
            setVisibility(View.VISIBLE);
            mIntroContainer.setVisibility(View.GONE);
            mEmptyContainer.setVisibility(View.VISIBLE);
        } else if (state == State.GONE) {
            setVisibility(View.GONE);
            mIntroContainer.setVisibility(View.GONE);
            mEmptyContainer.setVisibility(View.GONE);
        }
    }
}
```

通过这些改进，可以减少因空指针异常导致的崩溃问题。