title:Origin-sensitive Control Flow Integrity
author:Mustakimur Khandaker and
Wenqing Liu and
Abu Naser and
Zhi Wang and
Jie Yang
Origin-sensitive Control Flow Integrity
Mustakimur Rahman Khandaker, Wenqing Liu, Abu Naser, Zhi Wang, and 
Jie Yang, Florida State University
https://www.usenix.org/conference/usenixsecurity19/presentation/khandaker
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Origin-sensitive Control Flow Integrity
Mustakimur Rahman Khandaker
Wenqing Liu
Abu Naser
Florida State University
PI:EMAIL
Florida State University
PI:EMAIL
Florida State University
PI:EMAIL
Zhi Wang
Florida State University
PI:EMAIL
Jie Yang
Florida State University
PI:EMAIL
Abstract
CFI is an eﬀective, generic defense against control-ﬂow hijack-
ing attacks, especially for C/C++ programs. However, most
previous CFI systems have poor security as demonstrated by
their large equivalence class (EC) sizes. An EC is a set of
targets that are indistinguishable from each other in the CFI
policy; i.e., an attacker can “bend” the control ﬂow within an
EC without being detected. As such, the large ECs denote the
weakest link in a CFI system and should be broken down in
order to improve security.
An approach to improve the security of CFI is to use
contextual information, such as the last branches taken, to
reﬁne the CFI policy, the so-called context-sensitive CFI.
However, contexts based on the recent execution history are
often inadequate in breaking down large ECs due to the limited
number of incoming execution paths to an indirect control
transfer instruction (ICT).1
In this paper, we propose a new context for CFI, origin
sensitivity, that can eﬀectively break down large ECs and
reduce the average and largest EC size. Origin-sensitive CFI
(OS-CFI) takes the origin of the code pointer called by an
ICT as the context and constrains the targets of the ICT with
this context. It supports both C-style indirect calls and C++
virtual calls. Additionally, we leverage common hardware
features in the commodity Intel processors (MPX and TSX)
to improve both security and performance of OS-CFI. Our
evaluation shows that OS-CFI can substantially reduce the
largest and average EC sizes (by 98% in some cases) and has
strong performance – 7.6% overhead on average for all C/C++
benchmarks of SPEC CPU2006 and NGINX.
1 Introduction
The foundation of our software stacks is built on top of the un-
safe C/C++ programming languages. C/C++ provides strong
1We use ICT to denote forward indirect control transfers, excluding returns.
An ICT can be either C-style indirect calls or virtual calls.
performance, direct access to resources, and rich legacy. How-
ever, they lack security and safety guarantees of more modern
programming languages, such as Rust and Go. Vulnerabilities
in C/C++ can lead to serious consequences, especially for
low-level software. Many defenses have been proposed to
retroﬁt security into C/C++ programs. Control-ﬂow integrity
(CFI) is a generic defense against most, if not all, control-ﬂow
hijacking attacks. It enforces the policy that run-time control
ﬂows must follow valid paths in the program’s control-ﬂow
graph (CFG). Since its introduction in the seminal work by
Abadi et al. [2], there has been a long stream of research in
CFI [1,3,6,9,11–14,16,17,21,25,28,29,31,38,40,41,43,44].
Many earlier systems aim at improving the performance by
trading security for eﬃciency [25, 41, 43, 44], making them
vulnerable to various attacks [6, 13, 15, 16]. Recent work
focuses more on improving the precision and security of
CFI [14,17,21,38], which can roughly be quantiﬁed by the
average and largest equivalence class (EC) sizes [21]. An EC
is a set of targets indistinguishable from each other in the CFI
policy; i.e., CFI cannot detect control ﬂow hijacking within an
EC. It has been demonstrated the control ﬂow can be “bent”
within the ECs without being detected, compromising the
protection [6]. Therefore, there is a pressing need to further
constrain the leeway of such attacks by reducing the average
and largest EC sizes .
One way to improve the security of CFI is to reﬁne the CFG
with contextual information, the so-called context-sensitive
CFI. Likewise, traditional CFI systems are context-insensitive
because they do not collect and use the context information
for validating the targets of an ICT. There are many choices
of the contextual information. Existing context-sensitive CFI
systems use the recent execution history as the context. For
example, PathArmor uses the last few branches recorded
by Intel processor’s Last Branch Record (LBR) [38]; while
PittyPat uses the detailed execution paths recorded by Intel
processor trace (PT) [14]. Both PathArmor and PittyPat are
said to be path-sensitive since they use execution paths as the
context. A path-sensitive CFI policy essentially speciﬁes that
if the execution comes from this speciﬁc path, the ICT can
USENIX Association
28th USENIX Security Symposium    195
only go to that set of targets. There are often multiple paths
leading to an ICT. Consequently, the target set of the ICT can
be divided into smaller sets by those paths. Another common
choice of the context is the call stack [21]. Since the call stack
can be represented by its return addresses, such a system is
often called call-site sensitive. If the context consists of only
one level of return address, it is denoted as 1-call-site sensitive.
Similarly, 2-call-site sensitive CFI uses two levels of return
addresses as the context.
Execution history based context can substantially reduce
the average EC size, but is much less capable in reducing
the largest EC size. Unfortunately, the largest EC gives the
attacker most leeway in manipulating the control ﬂow without
risking detection. For example, PittyPat reports the largest EC
size of 218 in SPEC CPU2006, even though it is equipped
with the detailed execution history [14]. The fundamental
weakness of such context is that most programs only have
a small number of execution paths that reach an ICT; i.e.,
the in-degree of a node (representing an ICT) in the CFG is
usually small. If an ICT has hundreds of possible targets, at
least one of the ECs will be relatively large. Therefore, such
context is more capable in handling small to medium-sized
ECs but insuﬃcient for large ones. To address that, we need a
more distributed context that is not concentrated on the ICT.
In this paper, we propose a new type of context for CFI,
origin sensitivity. Origin-sensitive CFI (OS-CFI) takes the
origin of the code pointer called by an ICT as the context. It
supports both C-style indirect calls and C++ virtual calls with
slightly diﬀerent deﬁnitions for them: the origin for the former
is the code location where the called function pointer is most
recently updated; that for the latter is the location where the
receiving object (i.e.,the object for which the virtual function is
called) is created. As usual,returns are protected by the shadow
stack, implemented either in software [10,23] or hardware [19].
Our measurement shows that origin sensitivity is particularly
eﬀective in breaking down large ECs. For example, it can
reduce the largest EC size of a SPEC CPU2006 benchmark
from 168 to 2, a reduction of 99% (see Table 1).
We have implemented a prototype of OS-CFI for C and
C++ programs. The prototype enforces an adaptive CFI policy
that automatically selects call-site or origin sensitivity to
protect an ICT in order to improve the system performance
without sacriﬁcing security. Its CFG is built by piggybacking
on the analysis of a demand-driven, context-, ﬂow-, and ﬁeld-
sensitive static points-to analysis based on SVF (Static Value-
Flow Graph) [36]. Its reference monitors are implemented
securely and eﬃciently by leveraging the common hardware
features in the commodity Intel processors (MPX and TSX).
Our evaluation with SPEC CPU2006, NGINX, and a few
real-world exploits shows that the prototype can signiﬁcantly
reduce the average and largest EC sizes, and incurs only a
small performance overhead: 7.6% on average for the SPEC
CPU2006 and NGINX benchmarks.
• We propose the concept of origin sensitivity that can sub-
stantially reduce both the average and largest EC sizes to
improve the security of CFI. Origin sensitivity is applicable
to both C-style ICTs and C++ virtual calls. Both types of
ICTs are equally important to protect C++ programs.
• We have built a prototype of OS-CFI with the following
design highlights: we re-purpose the bound table of MPX to
securely store and retrieve origins, and use TSX to protect
the integrity of reference monitors; we piggyback on the
analysis of SUPA, a precise static points-to algorithm, to
built the origin-sensitive CFGs.
• We thoroughly evaluated the security and performance of
the prototype with SPEC CPU2006, NGINX, and a few real-
world exploits. In particular, we carefully studied the CFGs
generated from the points-to analysis and revealed a number
of its issues. Detailed CFG generation and measurement are
often overlooked in the evaluation of previous CFI systems.
2 Origin Sensitivity
In this section, we ﬁrst introduce the initial deﬁnition of origin
sensitivity that is simple, powerful, but potentially ineﬃcient.
We then derive a more viable but still eﬀective deﬁnition.
2.1 A Simple Deﬁnition
OS-CFI takes the origin of the code pointer called by an ICT
as the context. If the ICT is a virtual call, the origin is deﬁned
as the code location where the receiving object is created,
i.e., where its constructor is called; 2 The context of a C-style
ICT is similarly deﬁned. A typical example of this type of
ICT is an indirect call to a function pointer. The origin of
the function pointer is deﬁned as the instruction that initially
takes the function address stored in the function pointer.
Next, we use a real-world example from 471.omnetpp
in SPEC CPU2006 to illustrate the concept of the origin
(Fig. 1). 471.omnetpp is a discrete event simulator for large
Ethernet networks, written in the C++ programming language.
It relies heavily on macros to initialize many objects of the
simulated network. Line 1 - 10 shows how simulated networks
are initialized: it creates an ExecuteOnStartup object for
each network to call the network’s initialization code; The
constructor of ExecuteOnStartup sets the private mem-
ber code_to_exec (a function pointer) and adds itself to a
linked list (Line 18 - 23). When the program starts, it calls
all the queued code_to_exec function pointers (setup →
executeAll → execute).
The ICT at Line 25 has the largest EC of this program with
168 targets. Call-site sensitivity is not useful here because there
is only one call stack to the ICT. Processor-trace-based path
2If the object is a global variable, its constructor is conceptually added to
a compiler-synthesized function that is called before entering main().
In summary, this paper makes the following contributions:
196    28th USENIX Security Symposium
USENIX Association
Execution history based context is limited by the in-degree
of an ICT node in the CFG. Assuming the ICT node has n valid
targets and m incoming edges, there exists at least one EC with
more than (cid:100) n
m(cid:101) targets (the pigeonhole principle). For example,
the in-degree of the ICT in Fig. 1 is only one for call-site
sensitivity; Call-site sensitivity thus cannot reduce this EC at
all. The in-degree of this ICT for PathArmor is only 16 because
LBR can only record 16 most recent branches. In contrast,
origins are associated with the data ﬂow of the program. It
traces how function addresses are propagated in the program.
Because of this, origin sensitivity can uniquely identify and
verify a single target for each ICT. Moreover, this example
clearly demonstrates that CFI systems for C++ programs must
fully support C-style ICTs because many C++ programs use
them (they may even have the largest ECs). Protection of
virtual calls alone provides only minimal security.
2.2 A Hybrid Deﬁnition
The previous deﬁnition of origin sensitivity is conceptually
simple but powerful because it can identify a unique target at
run-time for each ICT. However, we need to track origins as
function addresses are propagated throughout the program in
a way similar to how taint is propagated – the origin is the
source of the taint, and the ICT is the sink. It is well-known that
taint analysis has high overhead, even though the performance
of origin tracking could be much better because function
addresses are usually not as widespread as the regular data
(e.g., a network packet) [23]. This problem is more severe for
C-style ICTs because function pointers are frequently copied
or passed as arguments. It will not aﬀect virtual calls as much
for the following reason: the origin of a virtual call is the
location where the receiving object’s constructor is called. If
an object is copied to another object, we essentially create a
new object using its class’ copy constructor or copy assignment
operator. This creates a new origin for that object. There is
thus no need to propagate the origin for objects.
To address the challenge, we propose a hybrid deﬁnition
of origin sensitivity that combines the origin with call-site
sensitivity. More speciﬁcally, we relax the deﬁnition of the
origin as the code location where the related code pointer is
most recently updated. In Fig. 1, the only function pointer
is code_to_exec in the ExecuteOnStartup class. It is last
updated in the class’ constructor at Line 19; i.e., the origin
of code_to_exec is just Line 19. Clearly, one origin cannot
tell Line 9 and 10 (and other places not shown) apart. This
can be solved by adding the call-site information to the origin.
The origin can now be represented as a tuple of (CS, Io).
Io is the instruction that last updates the code pointer; CS
is the immediate caller of the origin function (the function
that contains Io). Under this new deﬁnition, the ICT at Line
25 has two origins: (Line 9, Line 19) and (Line 10, Line 19).
Note how the two elements of the origin complement each
other: Io moves the context oﬀ the current execution path
Figure 1: Example to illustrate origin sensitivity
sensitivity can distinguish individual calls to code_to_exec
(because it records each iteration of the while loop); but it is
diﬃcult to decide which target is valid because that depends
on the unspeciﬁed order in which the constructors are called.
Origin sensitivity can handle this case perfectly: the origin of
code_to_exec is where the related function addresses are
initially taken. For example, the macro at Line 9 creates a
new function called __smallLAN__net_code and passes its
address to the constructor of object __smallLAN__net_reg.
Therefore, Line 9 becomes the origin of this function address.
The origin is propagated through the program along with the
function address when it is assigned to variables or passed as
an argument, in a way similar to how the taint is propagated
in taint analysis [33]. At the ICT, the origin is used to verify
the target. Because only one function address can be taken at
each origin, only one target is possible at the ICT. In other
words, origin sensitivity ideally can reduce the EC size for
this ICT from 168 to 1. The same security guarantee can be
achieved for virtual calls because only one class of objects
can be created at an origin (Section 2.2).
USENIX Association
28th USENIX Security Symposium    197
1#defineEXECUTE_ON_STARTUP(NAME,CODE)\2staticvoid__##NAME##_code(){CODE;}\3staticExecuteOnStartup__##NAME##_reg(__##NAME##_code);45#defineDefine_Network(NAME)\6EXECUTE_ON_STARTUP(NAME##__net,\7(newNAME(#NAME))->setOwner(&networks);)89Define_Network(smallLAN);10Define_Network(largeLAN);1112classExecuteOnStartup{13private:14void(*code_to_exec)();15ExecuteOnStartup*next;16staticExecuteOnStartup*head;17public:18ExecuteOnStartup(void(*_code_to_exec)()){19code_to_exec=_code_to_exec;20//addtolist21next=head;22head=this;23}24voidexecute(){25code_to_exec();26}27staticvoidexecuteAll(){28ExecuteOnStartup*p=ExecuteOnStartup::head;29while(p){30p->execute();31p=p->next;32}33}34};35voidcEnvir::setup(...){36try{37ExecuteOnStartup::executeAll();38}39}Language Context-insensitive
Benchmarks
445.gobmk
400.perlbench
403.gcc
464.h264ref
471.omnetpp
483.xalancbmk
453.povray
C
C
C
C
C++
C++
C++
EC L
427
173
54
10
168
38
11
1-call-site
2-call-site
EC L
427
120
54
2
168
38
11
Reduce by
0
31%
0
80%
0
0
0
EC L
427
113
54
2
168
38
11
Reduce by
0
35%
0
80%
0
0