Description:  
The signature of the following methods changed from (0.21.4)
      post>(url: string, data?: any, config?: AxiosRequestConfig): Promise;
      put>(url: string, data?: any, config?: AxiosRequestConfig): Promise;
      patch>(url: string, data?: any, config?: AxiosRequestConfig): Promise;
to (0.22.0)
      post>(url: string, data?: T, config?: AxiosRequestConfig): Promise;
      put>(url: string, data?: T, config?: AxiosRequestConfig): Promise;
      patch>(url: string, data?: T, config?: AxiosRequestConfig): Promise;
breaking every usage of the method, when using generics, e.g.:
    type RequestData = {
      input: string;
    };
    type ResponseData = {
      value: string;
    };
    async function test(): Promise {
      const requestData: RequestData = { input: "input" }
      const {data} = await axios.post("https://some-endpoint.com/v1/endpoint", requestData);
      console.log(data.value);
    }
The new generics will now cause compile errors, since `RequestData` and
`ResponseData` are not the same type.
The following workaround helps:
    async function test(): Promise {
      const requestData: RequestData = { input: "input" }
      const {data} = await axios.post>("https://some-endpoint.com/v1/endpoint", requestData);
      console.log(data.value);
    }
These changes seem arbitrary, and possibly done by mistake, as it is very
unlikely, that a Post-Request has **exactly** the same type for its payload,
as it has for its response.