# Fuzzing with Nuatilus
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 在学习了`Fishing for Deep Bugs with
> Grammars`后迫不及待的想要上手试试Nautilus去fuzz一些CTF中遇到的解释器类型的题目。正好项目也给出了一个target，下面记录了我的实践过程。
## 静态分析 && 动态分析
在拿到一个target尤其是解释器类型的题目后，一般最好不要直接上fuzz，先分析下程序逻辑，理清程序在哪里读取了我们的输入，在哪里对输入进行了检查，在哪里执行我们的输入，以及尝试去发现一些可疑的逻辑使得我们能更有针对性的制定fuzz策略。
    [$] file fuzzing-5th          
    fuzzing-5th: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, stripped
首先明确target是x86下的32位程序，接着ida配合gdb调试分析。
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      unsigned int v3; // eax
      _DWORD v5[30]; // [esp-7Ch] [ebp-84h] BYREF
      int (__cdecl **v6)(_DWORD, char *, int); // [esp-4h] [ebp-Ch] BYREF
      signal(14, (__sighandler_t)sub_AA40);
      alarm(0x3Cu);
      setvbuf(stdout, 0, 2, 0);
      v3 = time(0);
      srand(v3);
      v6 = (int (__cdecl **)(_DWORD, char *, int))(&`vtable for'CIOStdioConnection + 2);
      sub_DF0((int)v5);
      sub_F00((int)v5);
      sub_1000(v5, &v6);
      sub_E80((int)v5);
      return 0;
    }
main函数中v6被赋予了一个貌似虚表函数指针，后面应该会调用，先往下看。  
`sub_DF0((int)v5)`v5是一段栈上的数组，`sub_DF0`对v5进行了一系列的赋值
    int __cdecl sub_DF0(int a1)
    {
      int result; // eax
      func1((_DWORD *)(a1 + 4));
      func2(a1 + 16, a1);
      *(_DWORD *)(a1 + 0x60) = 0;
      result = func3(a1 + 100);
      *(_DWORD *)(a1 + 0x74) = 0;
      return result;
    }
func1对v5[1]，v5[2]，v5[3]赋值
    before:
    pwndbg> x/80wx 0xffffcd44
    0xffffcd44:    0x00000001    0xf7ffd940    0xf7caef5e    0xf7c34000
    0xffffcd54:    0x00000000    0x00000000    0xf7ffd000    0x00000000
    0xffffcd64:    0x00004a00    0xf7c64589    0xf7e0f808    0xf7fb0d20
    0xffffcd74:    0xffffce64    0xf7c64589    0x565658fa    0x5656cff4
    0xffffcd84:    0xf7e0c000    0x00000001    0x565559ed    0xf7e0c3fc
    0xffffcd94:    0xf7c646bb    0x5656cff4    0x56565871    0xf7ed1330
    0xffffcda4:    0xf7c646bb    0x5656cff4    0xf7c64785    0xf7fe59c0
    0xffffcdb4:    0x00000000    0x56565859    0x5656cee0    0x00000000
    after:
    pwndbg> x/80wx 0xffffcd44
    0xffffcd44:    0x00000001    0xffffcd49    0xffffcd48    0x00000000
    0xffffcd54:    0x00000000    0x00000000    0xf7ffd000    0x00000000
    0xffffcd64:    0x00004a00    0xf7c64589    0xf7e0f808    0xf7fb0d20
    0xffffcd74:    0xffffce64    0xf7c64589    0x565658fa    0x5656cff4
    0xffffcd84:    0xf7e0c000    0x00000001    0x565559ed    0xf7e0c3fc
    0xffffcd94:    0xf7c646bb    0x5656cff4    0x56565871    0xf7ed1330
    0xffffcda4:    0xf7c646bb    0x5656cff4    0xf7c64785    0xf7fe59c0
    0xffffcdb4:    0x00000000    0x56565859    0x5656cee0    0x00000000
func2就是对v5[4]到v5[23]赋值
    pwndbg> x/80wx 0xffffcd44
    0xffffcd44:    0x00000001    0xffffcd49    0xffffcd48    0x00000000
    0xffffcd54:    0x00000000    0x00000000    0xffffcd59    0xffffcd5c
    0xffffcd64:    0x00000004    0xffffcd4d    0xffffcd68    0x0000001c
    0xffffcd74:    0xffffcd75    0xffffcd74    0x00000000    0xffffcd81
    0xffffcd84:    0xffffcd80    0x00000000    0xffffcd8d    0xffffcd8c
    0xffffcd94:    0x00000000    0x00000000    0x00000000    0xffffcd44
    0xffffcda4:    0xf7c646bb    0x5656cff4    0xf7c64785    0xf7fe59c0
    0xffffcdb4:    0x00000000    0x56565859    0x5656cee0    0x00000000
之后v5[24]赋值为0，func3对v5[25]到v5[28]赋值，最后v5[29]为0。
    pwndbg> x/80wx 0xffffcd44
    0xffffcd44:    0x00000001    0xffffcd49    0xffffcd48    0x00000000
    0xffffcd54:    0x00000000    0x00000000    0xffffcd59    0xffffcd5c
    0xffffcd64:    0x00000004    0xffffcd4d    0xffffcd68    0x0000001c
    0xffffcd74:    0xffffcd75    0xffffcd74    0x00000000    0xffffcd81
    0xffffcd84:    0xffffcd80    0x00000000    0xffffcd8d    0xffffcd8c
    0xffffcd94:    0x00000000    0x00000000    0x00000000    0xffffcd44
    0xffffcda4:    0x00000000    0xffffcda9    0xffffcda8    0x00000000
    0xffffcdb4:    0x00000000    0x00000000    0x5656cee0    0x00000000
对v5辅助完后调用`sub_F00((int)v5)`：
    int __cdecl sub_F00(int v5)
    {
      _DWORD *v1; // eax
      int i; // edx
      char v3; // al
      int v4; // edx
      v1 = (_DWORD *)operator new(17352u);
      for ( i = 0; i != 4080; ++i )
        v1[i + 3] = 0;
      *v1 = 0;
      v1[1] = 0;
      *(_DWORD *)(v5 + 116) = v1;
      v3 = sub_C3E0(v5 + 16, (int)v1);
      v4 = 0;
      if ( v3 )
      {
        v4 = 1;
        *(_DWORD *)(v5 + 112) = *(_DWORD *)(v5 + 116);
      }
      return v4;
    }
大体行为是先new了一个0x43c8大小的对堆块，堆块前4080*4大小的内存置0，然后将堆块指针ptr赋值给v5[29]，v5[22]，v5[28]。
    pwndbg> x/80wx 0xffffcd44
    0xffffcd44:    0x00000001    0xffffcd49    0xffffcd48    0x00000000
    0xffffcd54:    0x00000000    0x00000000    0xffffcd59    0xffffcd5c
    0xffffcd64:    0x00000004    0xffffcd4d    0xffffcd68    0x0000001c
    0xffffcd74:    0xffffcd75    0xffffcd74    0x00000000    0xffffcd81
    0xffffcd84:    0xffffcd80    0x00000000    0xffffcd8d    0xffffcd8c
    0xffffcd94:    0x00000000    0x00000000    0x56572b70    0xffffcd44
    0xffffcda4:    0x00000000    0xffffcda9    0xffffcda8    0x00000000
    0xffffcdb4:    0x56572b70    0x56572b70    0x5656cee0    0x00000000
简单的跟了一下堆栈之后感觉依然很迷，继续往下分析`sub_1000(v5, &v6);`
    int __cdecl sub_1000(_DWORD *v5, int (__cdecl ***v6)(_DWORD, char *, int))
    {
      int result; // eax
      int i; // edi
      int (__cdecl **v4)(_DWORD, char *, int); // eax
      int ret; // eax
      char buf[1025]; // [esp+2Bh] [ebp-421h] BYREF
      unsigned int v7; // [esp+42Ch] [ebp-20h]
      v7 = __readgsdword(0x14u);
      result = 0;
      if ( v6 )
      {
        v5[24] = v6;
        for ( i = 0; ; ++i )
        {
          v4 = *v6;
          *v5 = i + 1;
          ret = (*v4)(v6, buf, 0x400);              // call io
          if ( ret  0
            t = t - 1
            s = s + 1
        if s == x
            return 555
        return x
    run a(1)
    RESULT: 1 (1)
    run a(5)
    RESULT: 555 (22B)
即可以定义函数，在函数内可以定义局部变量，使用if和while语法，执行算术运算以及通过return返回。  
其执行部分为：
    v17 = sub_101D0((int)a2, v8);
      result = exec(a1, v17, (int)a2, (_DWORD *)a3, v5);
      if ( (_BYTE)result )
      {
        v18 = a1;
        result = *((_DWORD *)a1 + 5);
        if ( (result & 1) == 0 )
        {
          if ( result )
          {
            if ( *(_DWORD *)result )
            {
              if ( *(_DWORD *)result != 4 )
              {
                v10 = "Invalid run expression";
                goto LABEL_20;
              }
              v19 = *(_DWORD *)(result + 24);