needs to verify the authenticity of the underlying packet
stream. For each Hj ∈ STRIP(V), the receiver needs to
verify the authenticity of all the packets claiming to be in
block j. Recall pj
i is annotated with its speciﬁc position i
in block j, so the receiver can authenticate p j
i by verifying
h(pj
i ) is equal to the i-th value in the hash string H j.
The above description implicitly assumes the adver-
sary mounts the strong pollution attack described in Sec-
tion 3.4.3 (injecting accumulated random symbol/witness
pairs). However, the adversary may also mount a cut-and-
paste attack where she injects invalid packets augmented
with symbol/witness pairs stripped from the valid pack-
ets. In the ﬁnal step of veriﬁcation described in the pre-
vious paragraph, the receiver may have multiple packets,
say p(cid:1)j
for a position i that are augmented with
the same valid symbol. In this case, the receiver will com-
pute the hash of each of these packets and compare with
the i-th position in the hash string Hj to ﬁnd the authentic
packet.
i , p(cid:1)(cid:1)j
, p(cid:1)(cid:1)(cid:1)j
i
i
For each block, if no more than t out of n authentic
packets are lost in transmission, PRABS can authenticate
all received packets in the block regardless of the pattern
of loss. Furthermore, in contrast to SAIDA, PRABS is
resistant to pollution attacks. The operation of a PRABS
sender and receiver is detailed in Figure 5.
4.4. Practical considerations
Earlier in Section 3, we presented DISTILLATION DE-
CODE as a batch algorithm, where we ﬁrst collect symbols
and then apply the decoding algorithm to all the symbols.
p1
p2
p3
j ||
||
h(p1)
h(p2)
||
||
h(p3)
pn
||
h(pn)
Hj
s1
s2
s3
sn
DISTILLATION ENCODE
p1
p2
p3
pn
(a) PRABS sender. For block j, the PRABS sender
executes DISTILLATION ENCODE on the authentica-
tion string Hj = j||p1||p2|| . . .||pn for the block
and augments each packet with a distillation code
symbol.
r1
r2
r3
r4
rm
DISTILLATION DECODE
PARTITION SYMBOLS
Q1
Q2
Qk
ERASURE DECODE ERASURE DECODE
ERASURE DECODE
VALIDATE(·)
VALIDATE(·)
VALIDATE(·)
X
X
Hj = j||h(p1)||h(p2)||···||h(pn)
(b) PRABS receiver. The PRABS receiver extracts
the distillation code symbols from the received pack-
ets and executes DISTILLATION DECODE. The de-
coder validates the resulting reconstructions, and if
sufﬁciently many valid packets were received, outputs
the valid authentication string Hj for the block. Fi-
nally, the receiver uses Hj to authenticate each of the
received packets.
Figure 5. Pollution Resistant Authenticated Block Streams (PRABS)
In practice, and in particular for PRABS, it is more efﬁ-
cient to implement DISTILLATION DECODE as an on-line
algorithm, where the partitions are created dynamically as
symbols arrive over the network. When the size of a par-
tition reaches n − t, it is erasure decoded and validated.
The chief motivation for the on-line algorithm is to
avoid the tough decision of when to apply the batch de-
coding algorithm. Ideally in the batch algorithm, the re-
ceiver should not execute DISTILLATION DECODE until
it is conﬁdent it has ﬁnished receiving all the packets in a
particular block. The on-line decoding algorithm avoids
this problem by treating each partition independently and
decoding it only when it becomes sufﬁciently large. The
only remaining problem is when to release the memory al-
located for partitions that never reach n − t symbols. We
address this problem in Section 4.5.3.
4.5. Security analysis
We analyze the security of PRABS in terms of packet
authenticity, replay protection, and resistance to pollution
attacks using our threat model introduced in Section 2.5.
4.5.1 Authenticity
Claim 1. If a receiver in PRABS receives any n − t valid
packets from block j, it can verify the authenticity of all
packets in block j.
Proof. We assume RSA signature generation and veriﬁca-
tion guarantees authenticity of signed messages, and every
receiver has obtained an authentic copy of the legitimate
sender’s public key. We also assume h(·) is collision-
resistant hash function. Then by the authenticity prop-
erty of distillation codes (Section 3.4.1 and Theorem 3 in
Appendix A), every output of DISTILLATION DECODE is
guaranteed to be authentic.
Therefore, if a receiver receives any n − t valid pack-
ets from block j, then the modiﬁed version of DISTILLA-
TION DECODE in Section 4.3 will output the authenticate
hash string Hj = j||h(pj
n) of block j.
Given any candidate packet ¯pj
i from block j, a receiver can
verify its authenticity by checking whether h(¯p j
i ) is equal
to the i-th hash entry in the hash string H j. An adversary
i (cid:4)= pj
able to cause a receiver to accept a forged packet ¯p j
implies she is able to ﬁnd a collision on h(·) at pj
i .
2)|| . . .||h(pj
1)||h(pj
i
4.5.2 Message reordering and replay
Claim 2. No valid packet in PRABS will be accepted by
a receiver more than once, and for all authenticated re-
ceived packets, a receiver can reconstruct the order in
which they were sent.
Proof. Let j designate a packet’s block and i designate its
position in that block. Since there is a one-to-one mapping
from (j, i) to the valid packets, after Hj is reconstructed
and pj
i is authenticated and accepted, all future copies of
pj
i can be rejected.
(j, i) also determines a packet’s order in the stream.
Although an adversary can reorder the delivery of pack-
ets, after a receiver authenticates pj
i , it can determine the
proper position of pj
i in the stream.
4.5.3 DoS-resistance
Computational DoS-resistance For
computational
DoS-resistance, we consider the three expensive oper-
ations in PRABS: hash function applications, erasure
decodings, and signature veriﬁcations.
Claim 3. Let b be the bandwidth of PRABS in blocks per
second. Then the most computation an adversary can
cause for receivers with a pollution attack with attack fac-
tor f is b · (f + 1) · (n · (log(n) + 1) + n) hash function
n−t(cid:7) + 1) erasure decodings and
applications and b · ((cid:6) f·n
signature veriﬁcations.
Proof. The denial-of-service resistance of PRABS relies
on the DoS-resistance properties of distillation codes. For
each packet a PRABS receiver receives, it extracts one
distillation code symbol and uses it as input to DISTIL-
LATION DECODE. Then by Theorem 2, the adversary can
cause the receiver to execute b · (f + 1) · n · (log(n) + 1)
n−t(cid:7) + 1) erasure de-
hash function applications and b· ((cid:6) f·n
codings and signature veriﬁcations.
In addition, a receiver must check the authenticity of
i . This requires checking whether
i ) is equal to the i-th hash entry in Hj, resulting in at
each received packet pj
h(pj
most b · (f + 1) · n hash function applications.
Thus, with a legitimate trafﬁc rate of b blocks per sec-
ond and attack factor f , the most computation an ad-
versary can cause for receivers with a pollution attack is
b · (f + 1) · (n · (log(n) + 1) + n) hash function applica-
n−t(cid:7) + 1) erasure decodings and signature
tions and b · ((cid:6) f·n
veriﬁcations.
For example, consider the scenario of a 1Mb per second
stream with b = 1, n = 128, and 1024 byte packets. With
t = 64, hash outputs of 80 bits, and 1024 bit RSA signa-
tures, |(Hj||GHj )| ≈ 1408 bytes, and the resulting era-
sure code symbols are approximately 22 bytes. For f =
10, this requires receivers to execute to at most 11,264
22-byte SHA1 hashes per second, 1408 1024-byte SHA1
hashes per second, and 21 erasure decodings and signa-
ture veriﬁcations per second. This is relatively insigniﬁ-
cant: with these parameters, a 2.4GHz Pentium 4 machine
running Linux can compute on average 540,000 22-byte
SHA1 hashes per second, 70,000 1024-byte SHA1 hashes
per second, 1700 RSA-1024 signature veriﬁcations per
second, and 3700 (128,64) Reed-Solomon decoding oper-
ations per second. We verify this analysis experimentally
in Section 5 with an implementation of PRABS.
PRABS is resistant to signature ﬂooding attacks be-
cause a signature is distributed among the all packets in
the block. To cause a single additional veriﬁcation oper-
ation, an adversary must inject at least n − t packets. In
contrast to hash graphs and the Wong-Lam scheme, ad-
versaries can cause an additional veriﬁcation operation by
injecting a single packet.
State-holding DoS-resistance
In addition to computa-
tional DoS attacks, adversaries can launch state-holding
DoS attacks against receivers, attempting to exhaust mem-
ory resources. For example, an adversary could accu-
mulate and inject sets of less than n − t invalid pack-
ets (symbols) for block sequence numbers far into the
future. A naive PRABS receiver will allocate space for
these packets and symbols and wait to receive sufﬁciently
many symbols to reconstruct the authentication informa-
tion. For invalid block sequence numbers much greater
than the current valid block sequence number, this attack
causes receivers to allocate large amounts of memory held
until the valid sequence numbers catch up to the invalid
sequence numbers.
One solution to this attack is to limit the amount of
memory allocated to PRABS receivers and enforce some
reclamation policy on packet (symbol) buffers. However,
choosing a reclamation policy can be tricky. We need to
be careful legitimate packets awaiting authentication are
not freed prematurely by some clever injection of attack
trafﬁc.
To prove PRABS is resistant to these state-holding
attacks on memory resources, we show an upper bound
on the memory requirements for PRABS receivers to
achieve the same authentication rate of valid packets
under attack as when there is no attack. In our proof, we
assume an upper bound d on the maximum end-to-end
latency delay imposable by an adversary, and the same
upper bound on non-malicious delays normally occurring
within the network. We assume the sending rate of the
stream is r, and the attacker can inject trafﬁc at a rate up
to f · r.
Claim 4. For a rate r stream sending n packets each of
size m, attack factor f , and maximum packet delay of d
seconds, if a PRABS receiver allocates at least r · (n ·
m/r + d)· (f + 1) bytes of memory, it will not discard any
packet that would have been authenticated had there been
an inﬁnite amount of memory available.
Proof. Suppose the PRABS receiver manages its r · (n ·
m/r + d) · (f + 1) byte packet cache with a FIFO re-
placement policy. We will show that no packet that would
have been accepted had there been an inﬁnite sized cache
will be discarded. This property will allow us to conclude
that a bounded cache does not affect whether a packet is
accepted or not.
Suppose that there is a legitimate packet p that is about
to be evicted from the cache that would have been ac-
cepted with an inﬁnitely sized cache. Since the receiver
has not authenticated p, p’s partition contains fewer than
n − t symbols. For it to be accepted at some later time,
the PRABS decoder must receive at least one more packet
from its block, since all packets from the same block share
accumulator values. But, we know that p has resided in the
cache for at least (n · m/r + d) seconds. This is because
the cache uses a FIFO replacement policy, its total cache
size is r·(n·m/r)·(f +1), and trafﬁc arrives at a rate less
than (f +1)·r. But, the longest transit delay for a packet is
d, and the encoder sends all packets from the same block
within n·m/r seconds. Thus, the encoder will not receive
any other packet from p’s group after n· m/r + d seconds.
Since p will never be accepted after n · m/r + d seconds,
our assumption that p would have been accepted at some
later time is false, and it is safe to discard p.
4.6. Securely using smaller hash digests with
UOWHFs
Using a hash function with an 80 bit output to con-
struct the Merkle hash tree in our distillation code results
in 10·log(n) bytes of overhead per symbol. In this section,
we describe an application of UOWHFs that leverages the
real-time nature of multicast to reduce this overhead by
close to a factor of two without affecting authentication
security. This optimization has no signiﬁcant effect on
PRABS’s resistance to pollution attacks.
Recall that with the target collision-resistance (TCR)
model for UOWHFs (Section 2.6), the sender chooses
a particular hash function from a family of TCR hash
functions and informs the receivers of the choice before
transmission begins. If we assume h(·) is a random or-
acle, we can construct a TCR hash function by choosing
a random salt r and using the ﬁrst k bits of output from
hr(x)  h(r||x||r). This is called the envelope method
[13]. Assuming h(·) and k are agreed in advance, the
sender only needs to inform the receivers of the random
value r.
To reduce the overhead of distillation code symbols, we
would like to to use a hash function with a shorter out-
put, say 40 bits, for constructing the Merkle trees. Un-
fortunately, shortening the hash output reduces collision-
resistance. A 40 bit output provides only about O(2 40)
security, and an adversary is likely to ﬁnd a collision on
hr(·) during the lifetime of a long lived stream. However,
there is no reason to necessarily use the same hash func-
tion for every block in PRABS. By revealing a new salt
value r at the start of each block’s transmission, there is
a small bounded amount of time where ﬁnding a collision
on hr(·) is useful. After the receivers have successfully
received and decoded the valid authentication information
for a block, pollution attacks against that particular block
become impossible.
To take advantage of this optimization, the encoder and
decoder need relatively few changes. The encoder selects
a random salt rj for block j and uses hrj (·) in the con-
struction of the Merkle hash tree in Step 3 of DISTIL-
LATION ENCODE. To inform receivers of the salt value
rj, the encoder augments each distillation code symbol in
block j with the salt value rj.
To decode, in Step 2a of PARTITION SYMBOLS, the de-
coder parses each distillation code symbol as (r j , s(cid:1), w),
and recovers the accumulator value a = Recover(s(cid:1), w)
using hrj (·) as the underlying hash function. To prevent
adversaries from breaking the accumulator by ﬁnding col-
lisions using different salt values, Step 2b of PARTITION
SYMBOLS(·) can partition based on both the accumulator
value and the advertised salt value.
Security Analysis Since we are shortening only the out-
put of the hash function used in the Merkle tree, and not
the output of the hash function used in the authentication
string Hj, this change only affects DoS-resistance and not
packet authenticity.
For an adversary to launch a successful pollution attack,
she must ﬁnd a collision on hrj (·) in the Merkle tree over
the symbols in block j. If the length of salt values is suf-
ﬁciently long to prevent long running attacks that iterate
over all possible values of rj, then the adversary must wait
until the sender discloses rj before she tries to ﬁnd a col-
lision in the Merkle tree.
Since collisions are useless after the receivers have re-
ceived all the legitimate packets in a block, if we assume
adversaries can delay packets by at most d seconds and
each block requires c seconds to send, then we must se-
lect k such that given r, adversaries have low probability
in ﬁnding a collision on hr(·) in d + c seconds. After this
time, receivers have presumably received and accepted all
the valid packets from the block, and further packets from
that block are rejected.
For block size n, the adversary wins if she ﬁnds a col-
lision on any of the n symbols in a block. If an adver-
sary hashes 2k−log(n) random values, then she will ﬁnd a
collision on one of the symbols with non-negligible prob-
ability. For block size n, we must choose k such that
2k−log(n) is an intractable amount of work for massively
parallelized adversaries to complete in d + c seconds.
Suppose n = 128, one block is transmitted per second,
and the maximum adversarial delay is 10 seconds. Given
that a 2.4GHz Pentium IV machine can compute roughly
540,000 instances of 22-byte hash function operations per
second, choosing k = 40 bits requires roughly 1450 ma-
chines to complete the necessary work before the receivers
have ﬁnished receiving the block.