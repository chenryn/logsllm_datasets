Time: 244.817 ms  
digoal=> explain analyze execute p_test(1);  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=20637.01..20637.02 rows=1 width=0) (actual time=244.380..244.380 rows=1 loops=1)  
   ->  Seq Scan on test  (cost=0.00..19387.01 rows=500001 width=0) (actual time=0.012..166.055 rows=500000 loops=1)  
         Filter: (id = 1)  
         Rows Removed by Filter: 1  
 Total runtime: 244.432 ms  
(5 rows)  
Time: 245.028 ms  
digoal=> explain analyze execute p_test(1);  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=20637.01..20637.02 rows=1 width=0) (actual time=244.029..244.029 rows=1 loops=1)  
   ->  Seq Scan on test  (cost=0.00..19387.01 rows=500001 width=0) (actual time=0.011..166.128 rows=500000 loops=1)  
         Filter: (id = 1)  
         Rows Removed by Filter: 1  
 Total runtime: 244.081 ms  
(5 rows)  
Time: 244.701 ms  
```  
传入参数2, 使用了generic plan, 而没有执行custom plan.(本来参数2应该走索引.)  
```  
digoal=> explain analyze execute p_test(2);  
                                                   QUERY PLAN                                                      
-----------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=20637.01..20637.02 rows=1 width=0) (actual time=115.265..115.265 rows=1 loops=1)  
   ->  Seq Scan on test  (cost=0.00..19387.01 rows=500001 width=0) (actual time=115.257..115.257 rows=1 loops=1)  
         Filter: (id = $1)  
         Rows Removed by Filter: 500000  
 Total runtime: 115.317 ms  
(5 rows)  
Time: 116.046 ms  
```  
下面把前5次的参数改成2, 主要说明choose_custom_plan的 plansource->generic_cost  psql digoal digoal  
psql (9.2.1)  
Type "help" for help.  
digoal=> prepare p_test(int) as select count(*) from test where id=$1;  
PREPARE  
digoal=> explain analyze execute p_test(2);  
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=1.41..1.42 rows=1 width=0) (actual time=0.083..0.084 rows=1 loops=1)  
   ->  Index Only Scan using idx_test_1 on test  (cost=0.00..1.40 rows=1 width=0) (actual time=0.074..0.075 rows=1 loops=1)  
         Index Cond: (id = 2)  
         Heap Fetches: 1  
 Total runtime: 0.200 ms  
(5 rows)  
digoal=> explain analyze execute p_test(2);  
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=1.41..1.42 rows=1 width=0) (actual time=0.026..0.026 rows=1 loops=1)  
   ->  Index Only Scan using idx_test_1 on test  (cost=0.00..1.40 rows=1 width=0) (actual time=0.021..0.022 rows=1 loops=1)  
         Index Cond: (id = 2)  
         Heap Fetches: 1  
 Total runtime: 0.074 ms  
(5 rows)  
digoal=> explain analyze execute p_test(2);  
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=1.41..1.42 rows=1 width=0) (actual time=0.021..0.021 rows=1 loops=1)  
   ->  Index Only Scan using idx_test_1 on test  (cost=0.00..1.40 rows=1 width=0) (actual time=0.017..0.018 rows=1 loops=1)  
         Index Cond: (id = 2)  
         Heap Fetches: 1  
 Total runtime: 0.065 ms  
(5 rows)  
digoal=> explain analyze execute p_test(2);  
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=1.41..1.42 rows=1 width=0) (actual time=0.020..0.020 rows=1 loops=1)  
   ->  Index Only Scan using idx_test_1 on test  (cost=0.00..1.40 rows=1 width=0) (actual time=0.016..0.016 rows=1 loops=1)  
         Index Cond: (id = 2)  
         Heap Fetches: 1  
 Total runtime: 0.063 ms  
(5 rows)  
digoal=> explain analyze execute p_test(2);  
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=1.41..1.42 rows=1 width=0) (actual time=0.020..0.020 rows=1 loops=1)  
   ->  Index Only Scan using idx_test_1 on test  (cost=0.00..1.40 rows=1 width=0) (actual time=0.016..0.017 rows=1 loops=1)  
         Index Cond: (id = 2)  
         Heap Fetches: 1  
 Total runtime: 0.061 ms  
(5 rows)  
```  
第六次传入参数1, 走的是custom plan.   
```  
digoal=> explain analyze execute p_test(1);  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=20637.01..20637.02 rows=1 width=0) (actual time=343.385..343.385 rows=1 loops=1)  
   ->  Seq Scan on test  (cost=0.00..19387.01 rows=500001 width=0) (actual time=0.053..253.714 rows=500000 loops=1)  
         Filter: (id = 1)  
         Rows Removed by Filter: 1  
 Total runtime: 343.458 ms  
(5 rows)  
```  
下面来解释一下原因 :   
1\ 第6次执行时,   
```  
num_custom_plans = 5  
total_custom_cost = 7.1      /* (1.42*5) */  
```  
generic_cost等于多少呢? 还是-1(初始值) , 从后面使用gdb跟踪的结果可以看到.   
因此choose_custom_plan的执行结果为true. 也就是选择custom plan, 因此需要额外的plan 优化选择过程.  
到第7次执行时会变成20637.   
GDB跟踪举例 :   
首先确保编译PostgreSQL使用了enable-debug :   
```  
ocz@db-172-16-3-150-> pg_config --configure  
'--prefix=/home/ocz/pgsql9.2.1' '--with-pgport=9201' '--with-perl' '--with-python' '--with-tcl' '--with-openssl' '--with-pam' '--without-ldap' '--with-libxml' '--with-libxslt' '--enable-thread-safety' '--with-wal-blocksize=16' '--enable-debug' '--with-ossp-uuid' '--with-libs=/opt/uuid-1.6.2/lib'  
```  
开始测试 :   
终端1 :   
```  
digoal=> prepare p_test(int) as select count(*) from test where id=$1;  
PREPARE  
digoal=> explain analyze execute p_test(2);  
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=1.41..1.42 rows=1 width=0) (actual time=0.113..0.113 rows=1 loops=1)  
   ->  Index Only Scan using idx_test_1 on test  (cost=0.00..1.40 rows=1 width=0) (actual time=0.102..0.103 rows=1 loops=1)  
         Index Cond: (id = 2)  
         Heap Fetches: 1  
 Total runtime: 0.269 ms  
(5 rows)  
digoal=> select pg_backend_pid();  
 pg_backend_pid   
----------------  
          10921  
(1 row)  
```  
终端2 :   
```  
ocz@db-172-16-3-150-> gdb  
GNU gdb (GDB) Red Hat Enterprise Linux (7.0.1-37.el5)  
Copyright (C) 2009 Free Software Foundation, Inc.  
License GPLv3+: GNU GPL version 3 or later   
This is free software: you are free to change and redistribute it.  
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"  
and "show warranty" for details.  
This GDB was configured as "x86_64-redhat-linux-gnu".  
For bug reporting instructions, please see:  
.  
绑定进程号.  
(gdb) attach 10921  
Attaching to process 10921  
设置断点  
(gdb) break choose_custom_plan  
Breakpoint 1 at 0x6ee730: file plancache.c, line 850.  
执行到断点位置  
(gdb) continue  
Continuing.  
```  
终端1 :   
```  
digoal=> explain analyze execute p_test(2);  
```  
终端2 :   
```  
到达断点,  
Breakpoint 1, choose_custom_plan (plansource=0x14477350, boundParams=0x144b1678) at plancache.c:850  
850             if (boundParams == NULL)  
进入单步模式  
(gdb) step  
854             if (plansource->cursor_options & CURSOR_OPT_GENERIC_PLAN)  
(gdb)   
856             if (plansource->cursor_options & CURSOR_OPT_CUSTOM_PLAN)  
(gdb)   
860             if (plansource->num_custom_plans total_custom_cost  
(gdb) print plansource->total_custom_cost  
$1 = 1.4174  
继续下一轮  
(gdb) continue  
Continuing.  
```  
终端1 :   
```  
digoal=> explain analyze execute p_test(2);  
```  
终端2 :   
```  
Breakpoint 1, choose_custom_plan (plansource=0x14477350, boundParams=0x144b1678) at plancache.c:850  
850             if (boundParams == NULL)  
(gdb) step  
854             if (plansource->cursor_options & CURSOR_OPT_GENERIC_PLAN)  
(gdb)   
856             if (plansource->cursor_options & CURSOR_OPT_CUSTOM_PLAN)  
(gdb)   
860             if (plansource->num_custom_plans total_custom_cost  
$2 = 2.8348  
此时还未生成generic plan, 所以generic_cost=-1  
(gdb) print plansource->generic_cost  
$3 = -1  
(gdb) continue  
Continuing.  
```  
终端1 :   
```  
digoal=> explain analyze execute p_test(2);  
```  
略去中间几步, 下面是第6次和第7次执行SQL时跟踪到的结果, 说明第6次执行完后生成了generic plan.   
终端2 :   
```  
Breakpoint 1, choose_custom_plan (plansource=0x143998c0, boundParams=0x1439aff8) at plancache.c:850  
850             if (boundParams == NULL)  
(gdb) step  
854             if (plansource->cursor_options & CURSOR_OPT_GENERIC_PLAN)  
(gdb)   
856             if (plansource->cursor_options & CURSOR_OPT_CUSTOM_PLAN)  
(gdb)   
860             if (plansource->num_custom_plans generic_cost  
$4 = -1  
(gdb) print plansource->total_custom_cost  
$5 = 7.0869999999999997  
(gdb) print plansource->num_custom_plans  
$6 = 5  
(gdb) continue  
Continuing.  
Breakpoint 1, choose_custom_plan (plansource=0x143998c0, boundParams=0x1439aff8) at plancache.c:850  
850             if (boundParams == NULL)  
(gdb) continue  
Continuing.  
Breakpoint 1, choose_custom_plan (plansource=0x143998c0, boundParams=0x1439abe8) at plancache.c:850  
850             if (boundParams == NULL)  
(gdb) step  
854             if (plansource->cursor_options & CURSOR_OPT_GENERIC_PLAN)  
(gdb)   
856             if (plansource->cursor_options & CURSOR_OPT_CUSTOM_PLAN)  
(gdb)   
860             if (plansource->num_custom_plans generic_cost  
$7 = 20637.024999999998  
(gdb) print plansource->total_custom_cost  
$8 = 8.5044000000000004  
(gdb) print plansource->num_custom_plans  
$9 = 6  
```  
generic_cost = 20637.024999999998 对应id=1的执行计划得到的cost, 如下 :  
```  
digoal=> explain analyze execute p_test(1);  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=20637.01..20637.02 rows=1 width=0) (actual time=433.100..433.100 rows=1 loops=1)  
   ->  Seq Scan on test  (cost=0.00..19387.01 rows=500001 width=0) (actual time=0.133..344.716 rows=500000 loops=1)  
         Filter: (id = 1)  
         Rows Removed by Filter: 1  
```  
为什么id=1的执行计划作为generic plan了. 因为id=1的值在test表的出现频率最高.   
通过pg_stats视图可以看到. 如下 :   
```  
digoal=> \d pg_stats  
          View "pg_catalog.pg_stats"  
         Column         |   Type   | Modifiers   
------------------------+----------+-----------  
 schemaname             | name     |   
 tablename              | name     |   
 attname                | name     |   
 inherited              | boolean  |   
 null_frac              | real     |   
 avg_width              | integer  |   
 n_distinct             | real     |   
 most_common_vals       | anyarray |   
 most_common_freqs      | real[]   |   
 histogram_bounds       | anyarray |   
 correlation            | real     |   
 most_common_elems      | anyarray |   
 most_common_elem_freqs | real[]   |   
 elem_count_histogram   | real[]   |   
digoal=> \x  
Expanded display is on.  
digoal=> select * from pg_stats where schemaname='digoal' and tablename='test' and attname='id';  
-[ RECORD 1 ]----------+-------  
schemaname             | digoal  
tablename              | test  
attname                | id  
inherited              | f  
null_frac              | 0  
avg_width              | 4  
n_distinct             | 1  
most_common_vals       | {1}  
most_common_freqs      | {1}  
histogram_bounds       |   
correlation            | 1  
most_common_elems      |   
most_common_elem_freqs |   
elem_count_histogram   |   
注意这两项 :   
most_common_vals       | {1}  
most_common_freqs      | {1}  
采样出来它的出现频率是100%  
```  
## 其他  
1\. 使用SPI_prepare_cursor, 通过设置flag [CURSOR_OPT_GENERIC_PLAN or CURSOR_OPT_CUSTOM_PLAN] 可以强制指定使用custom plan还是generic plan.   
2\. generic plan的生命周期 :   
The statement returned by SPI_prepare can be used only in the current invocation of the procedure, since SPI_finish frees memory allocated for such a statement.   
But the statement can be saved for longer using the functions SPI_keepplan or SPI_saveplan. 一般不推荐使用SPI_saveplan, 因为数据会重复.  
SPI_finish释放gplan :   
```  
/*  
 * ReleaseGenericPlan: release a CachedPlanSource's generic plan, if any.  
 */  
static void  
ReleaseGenericPlan(CachedPlanSource *plansource)  
{  
        /* Be paranoid about the possibility that ReleaseCachedPlan fails */  
        if (plansource->gplan)  
        {  
                CachedPlan *plan = plansource->gplan;  
                Assert(plan->magic == CACHEDPLAN_MAGIC);  
                plansource->gplan = NULL;  
                ReleaseCachedPlan(plan, false);  
        }  