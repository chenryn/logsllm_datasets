        ++*(_DWORD *)(v10 + 20);
        v11 = (__int64)ExpInterlockedPopEntrySList((PSLIST_HEADER)v10);
        if ( !v11 )
        {
          ++*(_DWORD *)(v10 + 24);
          v11 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD, __int64))(v10 + 48))(// srvnet!PplGenericAllocateFunction
                  *(unsigned int *)(v10 + 36),
                  *(unsigned int *)(v10 + 44),
                  *(unsigned int *)(v10 + 40),
                  v10);
        }
        v5 = 2;
      }
      if ( !v11 )
        return v11;
      *(_WORD *)(v11 + 16) |= v5;
      *(_WORD *)(v11 + 18) = v3;
      *(_WORD *)(v11 + 20) = v2;
      if ( a2 )
      {
        v16 = *(_DWORD *)(a2 + 36);
        if ( v16 >= *(_DWORD *)(v11 + 32) )
          v16 = *(_DWORD *)(v11 + 32);
        v17 = *(void **)(v11 + 24);
        *(_DWORD *)(v11 + 36) = v16;
        memmove(v17, *(const void **)(a2 + 24), v16);
        v18 = *(_WORD *)(a2 + 22);
        if ( v18 )
        {
          *(_WORD *)(v11 + 22) = v18;
          memmove((void *)(v11 + 100), (const void *)(a2 + 100), 16i64 * *(unsigned __int16 *)(a2 + 22));
        }
      }
      else
      {
        *(_DWORD *)(v11 + 36) = 0;
      }
      return v11;
    }
可以看到，进来就会判断Size参数的大小，如果小于0x1100则会走下面的路径，最终申请0x1278大小的内存
    srvnet!SrvNetAllocateBuffer
    -> srvnet!PplGenericAllocateFunction
    -> srvnet!SrvNetBufferLookasideAllocate
    -> srvnet!SrvNetAllocateBufferFromPool
    -> ExAllocatePoolWithTag
内存也会在`SrvNetAllocateBufferFromPool`函数里面初始化，下面是初始化的部分，注释基于之前的参数小于0x1100
    unsigned __int64 __fastcall SrvNetAllocateBufferFromPool(__int64 a1, unsigned __int64 a2)
    {
      unsigned int v2; // esi
      unsigned __int64 v3; // rdi
      SIZE_T v4; // rax
      unsigned __int64 v5; // rbp
      __int64 v6; // rax
      SIZE_T Size; // rbx
      char *alloc_ptr; // rdx
      signed __int32 v9; // ecx
      int v10; // eax
      unsigned __int64 v11; // r9
      unsigned __int64 v12; // rdi
      unsigned __int64 v13; // r8
      int v14; // edx
      __int64 v15; // r9
      unsigned __int64 v16; // rdx
      __int64 v17; // r8
      unsigned __int64 result; // rax
      v2 = a2;
      if ( a2 > 0xFFFFFFFF )
        return 0i64;
      if ( (unsigned __int64)(unsigned int)a2 + 88  0xFFFFFFFF )
      {
        return 0i64;
      }
      alloc_ptr = (char *)ExAllocatePoolWithTag((POOL_TYPE)0x200, Size, '00SL');// 0x1278
      if ( !alloc_ptr )
      {
        _InterlockedIncrement((volatile signed __int32 *)&WPP_MAIN_CB.Dpc.SystemArgument2);
        return 0i64;
      }
      v9 = Size + _InterlockedExchangeAdd((_DWORD *)&WPP_MAIN_CB.Dpc.SystemArgument1 + 1, Size);
      if ( (int)Size > 0 )
      {
        do
          v10 = HIDWORD(WPP_MAIN_CB.Dpc.SystemArgument2);
        while ( v9 > SHIDWORD(WPP_MAIN_CB.Dpc.SystemArgument2)
             && v10 != _InterlockedCompareExchange(
                         (_DWORD *)&WPP_MAIN_CB.Dpc.SystemArgument2 + 1,
                         v9,
                         SHIDWORD(WPP_MAIN_CB.Dpc.SystemArgument2)) );
      }
      v11 = (unsigned __int64)(alloc_ptr + 0x50);
      v12 = (unsigned __int64)&alloc_ptr[v2 + 87] & 0xFFFFFFFFFFFFFFF8ui64;// 申请的内存(0x1278大小)偏移0x1150处返回
                                                    // if (size > 12) + 6);
      *(_WORD *)(v13 + 0xA) = 0;
      *(_QWORD *)(v13 + 0x20) = v11 & 0xFFFFFFFFFFFFF000ui64;
      *(_DWORD *)(v13 + 0x2C) = v14;
      *(_DWORD *)(v13 + 0x28) = v2;
      MmBuildMdlForNonPagedPool(*(PMDL *)(v12 + 56));
      MmMdlPageContentsState(*(_QWORD *)(v12 + 56), 1i64);
      *(_WORD *)(*(_QWORD *)(v12 + 56) + 10i64) |= 0x1000u;
      v15 = *(_QWORD *)(v12 + 0x50);
      v16 = *(_QWORD *)(v12 + 0x18) & 0xFFFFFFFFFFFFF000ui64;
      v17 = *(_QWORD *)(v12 + 0x18) & 0xFFFi64;
      result = v12;
      *(_QWORD *)v15 = 0i64;
      *(_WORD *)(v15 + 8) = 8 * (((v17 + (unsigned __int64)v2 + 0xFFF) >> 12) + 6);
      *(_WORD *)(v15 + 0xA) = 0;
      *(_QWORD *)(v15 + 0x20) = v16;
      *(_DWORD *)(v15 + 0x2C) = v17;
      *(_DWORD *)(v15 + 0x28) = v2;
      *(_WORD *)(*(_QWORD *)(v12 + 80) + 10i64) |= 4u;
      return result;
    }
由于懒得自己画结构图，下面就又参考一个画的非常好的图片，图片来自[这里](https://mp.weixin.qq.com/s/Xlfr8AIB43RuJ9lveqUGOA)，可以看到`SrvNetAllocateBuffer`函数返回的结构`+0x18`偏移指向`User
Buffer`，这个缓冲区就用于存放解压之后的数据，其大小就是我们可控的溢出大小
下图左边则是我们构造的压缩包，右边则是实际申请的内存布局，`Raw Data`是不需要压缩的数据，`Compressed
Data`是需要压缩的数据，后面`SmbCompressionDecompress`函数就主要负责解压我们传入的数据`Compressed
Data`，返回解压之后的数据到右图`Decompressed Data`处，正常情况下是没有溢出的
调试结果如下，下面为 `SrvNetAllocateBuffer` 函数的返回值，该地址偏移0x18处的地址至该地址的距离正好为
`0xffffb31b2d5dd150 - 0xffffb31b2d5dc050 = 0x1100`
    2: kd> dd ffffb31b2d5dc050 + 1100
    ffffb31b`2d5dd150  00000000 00000000 00001000 0077006f
    ffffb31b`2d5dd160  00000000 00000002 (2d5dc050 ffffb31b) -> +0x18
但由于整数溢出，User Buffer空间变小，不足以容纳预期的大小，就会导致溢出
利用溢出就需要知道这个地方是如何拷贝的，就需要深入研究`SmbCompressionDecompress`解压缩函数的实现，下面是调用链
    srv2!Srv2DecompressData 
    -> srvnet!SmbCompressionDecompress
    -> nt!RtlDecompressBufferEx2
    -> nt!RtlDecompressBufferXpressLz
    -> qmemcpy
在解压时覆盖后面 `Srvnet Buffer Header` 结构体中的User
Buffer指针，也就是前面提过的0x18偏移处的指针，这就会导致将`Raw
Data`的数据拷贝到我们指定的地方，那也就是任意写，本地提权任意写的话直接写`SEP_TOKEN_PRIVILEGES`就行，作者也是这个想法，之后的操作就是提权的常规操作了，也没什么好介绍的了
    // SEP_TOKEN_PRIVILEGES
    *(uint64_t*)(buffer + 0x1108) = ktoken + 0x40; /* where we want to write */
    // Raw Data
    *(uint64_t*)(packet + sizeof(buf)) = 0x1FF2FFFFBC;
    *(uint64_t*)(packet + sizeof(buf) + 0x8) = 0x1FF2FFFFBC;
## CVE-2020-1206
对于0796想要远程利用，就得有一个信息泄露的洞，仔细回想前面这个0796，你会发现可控的东西实在是太多了，这也就衍生出了`CVE-2020-1206`，实际上原理非常简单，还是一个地方，我们将offset设置为0，OriginalSize设置为一个比较大的值，那也就可以越界读到后面的数据，比如下图，如果能设置为1的话实际就解压出1字节的数据，后面紧跟着一堆泄露的东西，这样就可以泄露出内核信息，配合之前的任意写，就可以实现RCE，当然没有说的那么简单，感兴趣的朋友可以参考[这里](https://blog.zecops.com/vulnerabilities/smbleedingghost-writeup-part-iii-from-remote-read-smbleed-to-rce/)
# 总结
前面主要总结的是0796这个洞的学习过程，有很多写的很好的文章，我都放在前面超链接里面了，SMB的攻击面还是比较清晰的，前段时间k0shl师傅在SMB里面也找到了一个信息泄露的洞，简单看了一下patch是一个UAF，涉及到`SMB2
SET_INFO`消息，k0哥也在[博客](https://blogs.360.cn/post/CVE-2020-17140-Analysis.html)里面分析了，下面是patch前代码
    signed __int64 __fastcall Smb2UpdateLeaseFileName(__int64 a1, _WORD *a2, unsigned int a3)
    {
          [...]
          v12 = (unsigned __int16)v4 + 2 * v11; //  *(unsigned __int16 *)(v6 + 0x18A) )// <------ if file name is longer than old
            {
              v13 = ExAllocatePoolWithTag((POOL_TYPE)0x200, v12, 0x6C32534Cu); // <------ allocate a new buffer
              if ( !v13 )
              {
                v3 = -1073741670;
                goto LABEL_16;
              }
              if ( *(_BYTE *)(v6 + 114) )  // <------- [1]
                ExFreePoolWithTag(*(PVOID *)(v6 + 400), 0);// <------ free old buffer
              if ( v11 )
                memmove(v13, *(const void **)(v6 + 400), 2i64 * v11); // <------- copy free buffer,trigger use after free.
              *(_WORD *)(v6 + 394) = v12;
              *(_QWORD *)(v6 + 400) = v13;
              *(_BYTE *)(v6 + 114) = 1; // <------- [2]
            }
           memmove((void *)(*(_QWORD *)(v6 + 400) + 2i64 * v11), v5, (unsigned __int16)v4);// <------- copy new lease name
          [...]
    }
下面是patch之后代码，我就不过多分析了，感兴趣的朋友可以自行研究构造
    signed __int64 __fastcall Smb2UpdateLeaseFileName(__int64 a1, _WORD *a2, unsigned int a3)
    {
      [...]
      if ( v12 )
        memmove(v15, *(const void **)(v6 + 0x190), 2i64 * v12);
      if ( *(_BYTE *)(v6 + 0x72) )
        ExFreePoolWithTag(*(PVOID *)(v6 + 0x190), 0);
      [...]
    }