# CONIKS: Bringing Key Transparency to End Users

**Authors:**
- Marcela S. Melara, Aaron Blankstein, Edward W. Felten, Michael J. Freedman (Princeton University)
- Joseph Bonneau (Stanford University and The Electronic Frontier Foundation)

**Publication:**
- Proceedings of the 24th USENIX Security Symposium
- August 12â€“14, 2015, Washington, D.C.
- ISBN: 978-1-939133-11-3
- [Link to Paper](https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/melara)

## Abstract

We introduce CONIKS, an end-user key verification service designed for integration into end-to-end encrypted communication systems. Building on transparency log proposals for web server certificates, CONIKS addresses specific challenges in key verification for end users. It eliminates the need for global third-party monitors, enabling users to efficiently monitor their own key bindings with minimal data downloads. CONIKS also allows collective auditing of providers for non-equivocation and maintains a high level of privacy, hiding usernames and even the total number of users.

## 1. Introduction

Billions of users now rely on online services for sensitive communication. While much of this traffic is transmitted over SSL/TLS, it is not typically end-to-end encrypted, meaning service providers still have access to plaintext data. This exposes users to security risks from certificate authorities, data collection by providers, and government surveillance. Recent deployments of end-to-end encryption by services like Apple iMessage and WhatsApp have improved security but still rely on centralized key directories, which are vulnerable to technical compromise and legal pressure.

Despite its importance, secure key verification for end users remains an unsolved problem. Manual key verification, as seen in PGP email encryption, is error-prone and cumbersome. The EFF's Secure Messaging Scorecard found that none of the 40 evaluated secure messaging apps had a practical and secure system for contact verification.

To address this, we present CONIKS, a deployable and privacy-preserving system for end-user key verification.

### Key Directories with Consistency

CONIKS retains the model of service providers issuing authoritative name-to-key bindings within their namespaces but ensures that users can automatically verify the consistency of these bindings. This means that given an authenticated binding issued by `foo.com` for `PI:EMAIL`, any user can verify that this binding is consistent with what other parties observe. CONIKS does not automate the verification of key ownership but ensures that if a key binding changes, the user will be alerted.

### Transparency Solutions for Web PKI

Several proposals aim to make the complete set of valid PKIX (SSL/TLS) certificates visible using public authenticated data structures, often called transparency logs. These systems ensure that while publication does not guarantee a certificate's correctness, the domain owner can promptly detect and report any maliciously issued certificates.

However, these systems assume complete public visibility of names and keys, and rely on third-party monitors. For end-user key verification, these assumptions do not hold, as there are many small communication providers who may want to keep their users' information private.

### Key Contributions of CONIKS

1. **Efficient Monitoring:**
   - Previous schemes require third-party monitors to track the entire log, which is impractical for individual users. CONIKS uses an efficient data structure, a Merkle prefix tree, allowing users to monitor their own entry with a small proof (logarithmic in the total number of users). This enables automatic monitoring without relying on third parties.

2. **Privacy-Preserving Key Directories:**
   - In prior systems, third-party monitors must view the entire system log, revealing all users and their keys. CONIKS, however, is privacy-preserving. Clients can only query for individual usernames, and responses leak no information about other users or their key data. CONIKS also supports obfuscating the number of users and updates in a directory.

### CONIKS in Practice

We have developed a prototype CONIKS system, including an application-agnostic CONIKS server and an example CONIKS Chat application integrated into the OTR plugin for Pidgin. Our clients automatically monitor their directory entries by regularly downloading consistency proofs from the CONIKS server, requiring no explicit user action except for notifications of new key bindings.

CONIKS is also efficient in terms of bandwidth, computation, and storage. Clients need to download approximately 17.6 kB per day, and key binding verification takes milliseconds. Our prototype server can support 10 million users (with 1% changing keys daily) on a commodity machine.

## 2. System Model and Design Goals

### 2.1 Participants and Assumptions

CONIKS includes four main types of participants: identity providers, clients, auditors, and users.

- **Identity Providers:** Run CONIKS servers and manage disjoint namespaces, each with its own set of name-to-key bindings. We assume a separate PKI exists for distributing providers' public keys, used to sign bindings and transform users' names for privacy.
- **Clients:** Run CONIKS client software on trusted devices, monitoring the consistency of their users' bindings. At least one client per user must have a reasonably accurate clock and secure local storage.
- **Auditors:** Track the chain of signed "snapshots" of the key directory, publishing and gossiping with other auditors to ensure global consistency. Clients serve as auditors for their own identity provider, and third-party auditors can also participate.
- **Users:** CONIKS aims to provide good baseline security accessible to nearly all users, with opportunities for advanced users to upgrade their security within the same system.

### 2.2 Design Goals

#### Security Goals

- **G1: Non-equivocation:** Identity providers cannot equivocate by presenting different views of name-to-key bindings to different users. Any equivocation will be detected by auditors with high probability.
- **G2: No spurious keys:** If an identity provider inserts a malicious key binding, the client will rapidly detect and alert the user. For strict users, all key changes must be signed by the previous key, preventing acceptance of malicious bindings.

#### Privacy Goals

- **G3: Privacy-preserving consistency proofs:** CONIKS servers do not reveal any information about their bindings to allow consistency verification. An adversary cannot learn about other users or their key data from consistency proofs.
- **G4: Concealed number of users:** Identity providers can insert dummy entries to conceal the exact number of users, exposing only an upper bound.

#### Deployability Goals

- **G5: Strong security with human-readable names:** Users only need to know their contacts' usernames for end-to-end encryption, enabling seamless integration into communication systems.
- **G6: Efficiency:** Computational and communication overhead should be minimized, scaling logarithmically with the number of users.

## 3. Core Data Structure Design

At a high level, CONIKS identity providers manage a directory of verifiable bindings of usernames to public keys using a Merkle prefix tree. This data structure allows efficient and privacy-preserving consistency verification, ensuring that users can monitor their key bindings with minimal overhead.