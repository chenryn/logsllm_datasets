−
o t h e r
6 4
−
∗
−
6 4
6 4
1 2 8
signature
1 2 8
Figure 2: Main signatures distribution
in our dataset, we decide to keep only the best signature (i.e.,
the complete one). We therefore replace each weakly inco-
herent signatures by the complete one. After this operation,
around 17.5% of the entire set of IP addresses collected in
our campaign were still associated to incomplete signatures
(of the type ). Most of them (i.e., 10.19%) are
seen by several VPs, while the remaining IP addresses (i.e.,
7.31%) are seen by a single VP. This latter value could be
further reduced by trying to ping those IP addresses from
other VPs.
Incoherent signatures may be explained by some artifacts
(due to their extremely low proportion). Some middleboxes
may rewrite the TTL ﬁeld [17, 18, 19], or the same IP ad-
dress may correspond to diﬀerent nodes depending on the
network location (anycast address). There is also the pre-
viously mentioned possible ambiguity between iTTL values
32 and 64.
2.4 Signatures Distribution
While many diﬀerent platforms could correspond to the
same signature, we know the signature of some well known
platforms (to this purpose, we performed a bunch of tests
in an emulation lab). For instance, Cisco routers generate
signature  while, for Juniper routers, we have
 with Junos and  with JunosE.
Some Brocade and Alcatel equipment together with some
Linux boxes result in a  signature. Although these
signatures encompass the main router platforms, it would be
very interesting to have a more complete correspondence be-
tween platforms and signatures. Obviously, when restricted
to our 2-tuple, several very diﬀerent platforms may have the
same signature. So a more accurate signature, i.e., an n-
tuple with n > 2, would be helpful. We already did some
preliminary work analyzing signatures extended with other
types of message (destination-unreachable in particular)
or some other criterion, such as the ICMP messages size.
However, since most routers come from a few major ven-
dors, we cannot expect to partition the network nodes into
a very ﬁne-grained classiﬁcation using this type of ﬁnger-
printing. This is why, in this study, we only consider this
basic 2-tuple as a proof of concept that may be generalized
by further study.
Fig. 2 illustrates the distribution of the main router sig-
natures. The ﬁrst class , that includes Cisco
routers is largely dominant, corresponding to more than 50%
of nodes. The fourth class , that includes sev-
eral vendors or OSes (including Linux), and the third class
 that includes Juniper routers running JunOS
371propagate
IP→ MPLS
R1
Ingress
LER
Monitor
R2
IH
R3
LSP
R4
LH
Destination
propagate
MPLS→ IP
R5
Egress
LER
Explicit
Implicit
Opaque
Invisible
1. R1
2. R2 - MPLS
3. R3 - MPLS
4. R4 - MPLS
5. R5
6. Destination
1. R1
2. R2
3. R3
4. R4
5. R5
6. Destination
1. R1
2. R4 - MPLS
3. R5
4. Destination
1. R1
2. R4
3. R5
4. Destination
Figure 3: Example of MPLS tunnel
n
o
i
t
r
o
p
o
r
p
1.0
0.8
0.6
0.4
0.2
0.0
0
50
100
150
200
vantage point
Figure 4: Proportion of paths,
per VP, having at least one
MPLS tunnel
have about 11% each. The second most frequent class , with about 15%, corresponds to an incomplete sig-
nature and is probably mostly made of nodes belonging, ac-
tually, to  or  but did not respond
to ping for various reasons [16]. The class ,
including Juniper platforms running the JunosE system, is
around 3% while the remaining classes are either incomplete
or very rare. Therefore, at a global scale, our ﬁngerprinting
technique seems to reﬂect the market distribution.
To summarize, we ﬁrst observe, that among diﬀerent brands
and OSes, routing devices use distinct iTTL values, and,
second, we also notice that a single device can use multiple
iTTL values (at least, this is the case for Juniper routers).
We now focus on a speciﬁc use case illustrating the technical
interest of a classiﬁcation based on such observations.
3. MPLS USE CASE
Multiprotocol Label Switching (MPLS) [20] is increasingly
deployed by ISPs to provide attractive services such as vir-
tual private networks and traﬃc engineering. It is therefore
interesting to have some insights on MPLS technologies in
the Internet. However, MPLS tunnels may hide IP-level in-
formation by masking MPLS routers from traceroute. We
propose to use our ﬁngerprinting method to reﬁne informa-
tion on our previous tunnels deployment analysis [10]. We
will show, using MPLS as an example, that our method
could be used to determine whether a feature (here MPLS
characteristics) is independent of the router type. Moreover,
our ﬁngerprinting method may also be extended to check if
a given sample of routers is representative of the Internet
heterogeneity.
3.1 MPLS Tunnels Signatures
The MPLS architecture is based on labels: an IP router
inserts one or more 32-bit label stack entries (LSE – that
contains a label, a TTL ﬁeld called LSE-TTL, and a type-
of-service ﬁeld) into a packet, before the IP header, that de-
termines the forwarding actions made by subsequent MPLS
Label Switching Routers (LSRs) in the network. A series of
LSRs connected together form a Label Switched Path (LSP).
In an MPLS network, packets are forwarded using an ex-
act match lookup of the 20-bit label found in the LSE. At
each MPLS hop, the label of the incoming packet is replaced
by a corresponding outgoing label found in an MPLS switch-
ing table.
Fig. 3 illustrates the general behavior of an MPLS tunnel.
Router R1 is the entry of the MPLS tunnel and is the ﬁrst
router to push an MPLS label; we call this router the ingress
Label Edge Router (LER). Router R2 is the ﬁrst LSR where
the incoming packet includes a LSE; we call this router the
ingress hop (IH). Router R4 is the last router that pops the
MPLS label; we call this router the last hop (LH). At least
for Cisco routers, most of the time the LH router is located
one hop before the egress LER due to the use of penultimate
hop popping (PHP) [20].
Similarly to the IP-TTL, the LSE-TTL ﬁeld is decre-
mented by LSR that may send ICMP time-exceeded mes-
sages when the LSE-TTL expires. In order to debug net-
works where MPLS is deployed, routers may also implement
RFC4950 [21], an extension to ICMP that specify that a LSR
should embed the MPLS label stack of the incoming packet
into an ICMP time-exceeded message. The ﬁrst MPLS
router of an LSP may copy the IP-TTL value to the LSE-
TTL ﬁeld rather than setting the LSE-TTL to an arbitrary
value such as 255. That is the ingress LER uses TTL prop-
agation. During a traceroute, LSRs along the LSP will
reveal themselves via ICMP messages even if they do not
implement RFC4950. Operators conﬁgure this action using
the ttl-propagate option provided by the router OS.
Based on those two MPLS transparency features, we pre-
viously proposed an MPLS taxonomy made of two-by-two
classes [10]. Fig. 3 illustrates those classes that are: explicit
tunnels (i.e., ttl-propagate and RFC4950 are enabled), im-
plicit tunnels (i.e., the router that pushes the MPLS label
enables the ttl-propagate option but LSRs do not imple-
ment RFC4950), opaque tunnels (i.e., the LH implements
RFC4950 but the ingress LER does not enable the ttl-
propagate option), and, ﬁnally, invisible tunnels (i.e., the
ingress LER does not enable the ttl-propagate option and
RFC4950 is not implemented by the LH router). Our previ-
ous work provides MPLS signatures detection for revealing
implicit and opaque tunnels based on three main patterns:
1. the quoted IP-TTL (qTTL) in ICMP time-exceeded
messages4. A qTTL > 1 will likely reveal the ttl-
propagate option at the ingress LER of an LSP. For
each subsequent traceroute probe within an LSP, the
4These kind of replies should contain the quotation of the
original IP header triggering the error message. Look at
RFC 792 and 1812.
3722 5 5
−
2 5 5
−
∗
2 5 5
6 4
−
1 2 8
−
6 4
−
−
−
6 4
1 2 8
6 4
signature
1 2 8
(a) Main tunnel classes
explicit
implicit
opaque
∗
∗
o t h e r
qTTL
uturn
o t h e r
∗
∗
f
d
p
0.5
0.4
0.3
0.2
0.1
0.0
2 5 5
2 5 5
−
2 5 5
−
∗
2 5 5
6 4
−
6 4
−
∗
−
1 2 8
−
6 4
6 4
1 2 8
signature
1 2 8
MPLS
non MPLS
∗
−
o t h e r
Figure 5: Signature distribution among MPLS and
non MPLS routers
qTTL will be one greater resulting in an increasing
sequence of qTTL values in traceroute;
2. #hops diﬀerences with the IP-TTL in echo-reply mes-
sages (uturn).
It relies on the fact that LSRs along
an LSP present an original label stack default rout-
ing behavior: when the LSE-TTL expires, an LSR
ﬁrst sends the time-exceeded reply to the Egress LER
which then forwards the reply on its own to the prob-
ing source 5, while an LSR replies to other probes using
its own IP routing table if available.
n
o
i
t
r
o
p
o
r
p
n
o
i
t
r
o
p
o
r
p
0.6
0.5
0.4
0.3
0.2
0.1
0.0
2 5 5
0.5
0.4
0.3