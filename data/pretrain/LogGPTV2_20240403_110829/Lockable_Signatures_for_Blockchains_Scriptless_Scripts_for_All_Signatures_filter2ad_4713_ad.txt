0
,∀i ∈ [n − 1]
0 }i∈[n],{σi}i∈[n−1])
Fig. 4: Chained Aggregate Extraction experiment
Deﬁnition 2 (Chained Aggregate Extraction Problem): The
chained aggregate extraction problem for a bilinear pairing
group G0, G1, Gt of order q is said to be hard if there exists
a negligible function negl, for all λ ∈ N and n = poly(λ) for
some polynomial poly, and all PPT adversaries A, it holds that,
Pr(cid:2)ExpChAgExtA,G0,G1,Gt(1λ) = 1(cid:3) ≤ negl(λ)
where ExpChAgExt is deﬁned in Figure 4.
In Theorem 3.1 we show that the chained aggregate extraction
problem is equivalent to the aggregate extraction problem, when
k = 2, where k denotes the number of signatures aggregated
with each other into a single value. Formal security proof of
the theorem can be found in Appendix B.
Theorem 3.1: For k = 2, the aggregate extraction assumption
(Deﬁnition 8) is equivalent to the Chained Aggregate Extraction
assumption (Deﬁnition 2).
Corollary 1: The Chained Aggregate Extraction assumption
is equivalent to the CDH assumption.
I V. L O C K A B L E S I G N AT U R E S
A lockable signature scheme allows one to lock a signature
(referred to as the locked signature) on a message with respect to
another signature (referred to as the locking signature), possibly
on a different message. The two signatures can verify against
two different public keys. To learn the locked signature, one
has to know the locking signature and otherwise the locked
signature is computationally hidden.
A. Deﬁnitions
Below we formally deﬁne the interfaces, notion of correctness
and the properties of interest of a lockable signature.
Deﬁnition 3 (Lockable Signatures): A Lockable signature
scheme LS is deﬁned with respect to a signature scheme ΠDS
and consists of PPT algorithms (Lock, Unlock) deﬁned below.
(cid:96)k ← Lock(sk , m, ˜sk , ˜m): The lock algorithm takes as input
two secret keys (sk , ˜sk ) and two messages (m, ˜m) and returns
a lock (cid:96)k.
σ ← Unlock(pk , m, ˜pk , ˜m, ˜σ, (cid:96)k ): The unlock algorithm takes
as input two public keys (pk , ˜pk ), a pair of messages (m, ˜m),
a signature ˜σ, and a lock (cid:96)k, and outputs a signature σ.
Deﬁnition 4 (Correctness): A lockable signature scheme LS
is correct if for all λ ∈ N, all pairs of messages (m, ˜m) ∈
{0, 1}λ, for all key pairs (pk , sk ) and ( ˜pk , ˜sk ) in the image
of KGen it holds that
Vf(pk , m, Unlock(pk , m, ˜pk , ˜m, ˜σ, (cid:96)k )) = 1
where (cid:96)k ← Lock(sk , m, ˜sk , ˜m) and ˜σ ← Sign( ˜sk , ˜m).
Below we deﬁne the security notions for lockable signatures.
As discussed before, we consider without loss of generality
only signatures where the signing algorithm is deterministic. In
all of the security notions, we assume that the Lock algorithm
is executed honestly. Looking ahead to our main protocol, this
assumption is justiﬁed by the fact that the algorithm is always
executed as part of an MPC protocol where at least one of the
participants is honest.
Unlockability. The unlockability property ensures that a cor-
rectly generated lock can be unlocked to reveal a valid locked
signature, when provided with a valid locking signature. We
capture this intuition in the form of an experiment EUn-CMA
in Figure 5. Here the adversary gets to choose the messages
(m, ˜m) while it has access to a signing oracle for the key
˜sk. The experiment generates a lock (cid:96)k honestly by running
Lock(sk , m, ˜sk , ˜m) and gives the lock to the adversary. The
adversary returns a candidate locking signature σ∗ which is
used to unlock the lock (cid:96)k and obtain a candidate locked
signature σ(cid:48). The adversary wins the experiment if σ∗ is a
valid signature on the message ˜m under ˜pk (condition b0)
while σ(cid:48) is an invalid signature on the message m under pk
(condition b1). A lockable signature scheme is said to satisfy
unlockability if the adversary wins the above experiment at
most with negligible probability in the security parameter.
Deﬁnition 5 (Unlockability): A lockable signature LS is
unlockable if there exists a negligible function negl such that
for all λ ∈ N and for all PPT adversaries A it holds that
Pr[EUn-CMAA,LS(λ) = 1] ≤ negl(λ)
where the experiment EUn-CMA is deﬁned in Figure 5.
Hiding. The hiding property ensures that a correctly generated
lock reveals no information about the locked or the locking
signature. We capture this intuition in the form of an experiment
EHi-CMA in Figure 5. Here the adversary gets to choose two
messages (m, ˜m) while having access to signing oracles with
respect to both keys sk and ˜sk. The experiment chooses a bit
b uniformly random and if b = 0, it generates a lock correctly
using Lock(sk , m, ˜sk , ˜m). If b = 1, the experiment uses a
simulator Sim that only takes as input the public keys pk , ˜pk
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
944
EUn-CMAA,LS(λ)
Q := ∅
(pk , sk ) ← ΠDS .KGen(1λ)
( ˜pk , ˜sk ) ← ΠDS .KGen(1λ)
(m, ˜m, state) ← ASignO( ˜sk ,·)(sk , ˜pk )
(cid:96)k ← Lock(sk , m, ˜sk , ˜m)
∗ ← ASignO( ˜sk ,·)(state, (cid:96)k )
(cid:48) ← Unlock(pk , m, ˜pk , ˜m, σ
σ
∗
b0 := ΠDS .Vf( ˜pk , ˜m, σ
) = 1
(cid:48)
) (cid:54)= 1
b1 := ΠDS .Vf(pk , m, σ
return b0 ∧ b1
, (cid:96)k )
σ
∗
EHi-CMAA,LS(λ)
Q := ∅
(pk , sk ) ← ΠDS .KGen(1λ)
( ˜pk , ˜sk ) ← ΠDS .KGen(1λ)
O := {SignO(sk , ·), SignO( ˜sk , ·)}
(m, ˜m, state) ← AO
b ← {0, 1}
if b = 0 then
(pk , ˜pk )
(cid:96)k ← Lock(sk , m, ˜sk , ˜m)
(state, (cid:96)k )
else (cid:96)k ← Sim(pk , ˜pk )
∗ ← AO
b
∗
b0 := (b = b
)
b1 := ( ˜m /∈ Q)
return b0 ∧ b1
SignO(sk , m)
σ ← ΠDS .Sign(sk , m)
return σ
SignO( ˜sk , m)
σ ← ΠDS .Sign( ˜sk , m)
Q := Q ∪ { ˜m}
return σ
Fig. 5: Experiments for unlockability and hiding of lockable
signatures
(corresponding to sk and ˜sk, respectively) and outputs a lock
(cid:96)k. The adversary is given (cid:96)k and outputs a guess b∗. The
adversary wins the experiment if the guess was correct, i.e.
b = b∗ (condition b0) and if ˜m was never queried before to
the signing oracle with respect to ˜sk. The latter condition is
necessary to avoid trivial attacks where the adversary uses a
signature on ˜m to run the unlocking algorithm. A lockable
signature is said to satisfy hiding if the adversary wins the
above experiment with probability negligibly close to 1/2.
Deﬁnition 6 (Hiding): A lockable signature LS is hiding
if there exists a negligible function negl and a simulator Sim
such that for all λ ∈ N and all PPT adversaries A it holds that
Pr[EHi-CMAA,LS(λ) = 1] ≤ 1/2 + negl(λ)
where the experiment EHi-CMA is deﬁned in Figure 5.
B. Constructions of Lockable Signatures
In the following we describe our generic and BLS-based
construction of a lockable signatures.
Lock(sk , m, ˜sk , ˜m)
σ ← ΠDS .Sign(sk , m)
˜σ ← ΠDS .Sign( ˜sk , ˜m)
(cid:96)k := σ ⊕ H(˜σ)
return (cid:96)k
Lock(sk , m, ˜sk , ˜m)
σ ← ΠBLS.Sign(sk , m)
˜σ ← ΠBLS.Sign( ˜sk , ˜m)
(cid:96)k := ΠBLS.Agg(σ, ˜σ)
return (cid:96)k
return (cid:96)k /˜σ
Unlock(pk , m, ˜pk , ˜m, ˜σ, (cid:96)k )
Unlock(pk , m, ˜pk , ˜m, ˜σ, (cid:96)k )
return (cid:96)k ⊕ H(˜σ)
Fig. 6: Generic (left) and BLS-based (right) constructions of
Lockable Signatures
Generic Construction. Let ΠDS := (KGen, Sign, Vf) be a
digital signature scheme (with deterministic signing algorithm)
and let H : {0, 1}λ → {0, 1}λ be a hash function. Our generic
construction of lockable signature is speciﬁed in Figure 6 (left).
In our construction, a lock is an xor of the locked signature σ
and the hash of the locking signature ˜σ. Provided the hash of the
locking signature H(˜σ) is a random string with high entropy,
we can see that intuitively the locked signature σ is hidden
inside the lock, similar to a one-time pad. The release procedure
is an xor of H(˜σ) and the lock, similar to the decryption of a
one-time pad.
In the theorem below, we prove that our generic construction
satisﬁes unlockability (Deﬁnition 5) and hiding (Deﬁnition 6),
as deﬁned before. In favor of a simpler analysis, we model
the hash function H as a random oracle, however we note
that one could also set H to be a hardcore function [50] (for
polynomially-many bits) and security would follow with a
similar argument. We defer the proof to the full version due
to space constraints.
Theorem 4.1 (Unlockability & Hiding): Let ΠDS =
(KGen, Sign, Vf) be a strongly unforgeable digital signature
scheme. Then LS := (Lock, Unlock) is unlockable and hiding
in the random oracle model.
BLS-Based Construction. We present an alternative construc-
tion of lockable signatures LS := (Lock, Unlock) for the
BLS signature scheme ΠBLS := (KGen, Sign, Vf, Agg, VfAgg)
in Figure 6 (right). While this scheme satisﬁes a weaker notion
of hiding (as deﬁned in Appendix A), it will allow us to
construct a much more efﬁcient PCN, without the need to resort
to complex cryptographic machinery. Intuitively, a lockable
signature consists of an aggregate of two signatures, and the
security comes from the hardness of extracting signatures from
aggregates.
Unlockability follows unconditionally from the uniqueness
of BLS signatures. The scheme only satisﬁes a weaker notion
of hiding (i.e. only the search version of the problem is
hard), which is captured by the chained aggregate extraction
assumption (Deﬁnition 2). Loosely speaking, weak hiding
ensures that an adversarial party cannot extract a valid signature
from a lock, before the corresponding locking signature is
revealed. In our protocol (see Section V-C), this is sufﬁcient
to ensure that an adversarial party in the payment path cannot
steal the funds of honest parties in the same path.
V. PAY M E N T C H A N N E L N E T W O R K S
In this section we describe two constructions for Payment
Channel Networks (PCNs) from lockable signatures: The ﬁrst
construction is generic, i.e. individual payment channels in
the payment path can be based on any signature scheme. Our
second construction is an efﬁcient instantiation of the generic
construction, tailored for the case where the individual payment
channels are based on BLS signatures.
A. Deﬁnition of PCN
We recall the notion of a PCN as an ideal functionality
FPCN as proposed in [2]. Payment channels in the chain B
are of the form (c(cid:104)u0,u1(cid:105), v, t, f ), where c(cid:104)u0,u1(cid:105) is a unique
channel identiﬁer for the channel between users u0 and u1,
v is the capacity of the channel, t is the expiration time of
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
945
the channel and f is the associated fee. Note that any two
users may have multiple channels open simultaneously. The
functionality maintains two additional internal lists L (to keep
track of the closed channels) and P (to record the off-chain
payments in an open channel). Entries in P are of the form
(c(cid:104)u0,u1(cid:105), v, t, h), where c(cid:104)u0,u1(cid:105) is the corresponding identiﬁer,
v is the amount of credit used, t is the expiration time of the
channel, and h is the identiﬁer of the entry.
The functionality provides the users with interfaces open,
close, and pay, which are used to open a channel, close the
channel, and make payments using the channel, respectively.
FPCN initializes a pair of empty lists P,L. Users can query
FPCN to open channels and close them to any valid state
in P. On input a value v and a set of payment channels
c(cid:104)u0,u1(cid:105), . . . , c(cid:104)un,un+1(cid:105) from some user u0, FPCN checks
whether the path has enough capacity (step 1) and initiates the
payment. Each intermediate user can either allow the payment
or deny it. Once the payment has reached the receiver, each
user can again decide to interrupt the ﬂow of the payment (step
2), i.e. pay instead of the sender. Finally FPCN informs the
involved nodes of the success of the operation (step 3) and
adds the updated state to P for the corresponding channels.
In terms of off-chain privacy, we model a slightly weaker
notion than the functionality from [2]: Each user ui, in addition
to learning the channel identiﬁers c(cid:104)ui−1,ui(cid:105) and c(cid:104)ui,ui+1(cid:105) of
its neighbours ui−1 and ui+1, also learns the channel identiﬁers
c(cid:104)ui−2,ui−1(cid:105) and c(cid:104)ui+1,ui+2(cid:105) of its neighbours’ neighbours ui−2
and ui+2. In other words, any intermediate user ui learns the
identity of the sender u0 and of the two nodes that precede
and succeed him in the payment path. For completeness, we
describe the modiﬁed ideal functionality in Figure 9.
B. Construction I: PCNs for all Signatures
We now describe our generic construction of PCN using
lockable signatures. Consider the setting where party P1 wants
to send v coins to party Pn via off-chain payments. We denote
by j-PC a payment channel involving j-many parties, i.e.
where the secret key is shared among j users. We assume
that neighbouring parties in P1, . . . , Pn have payment channels
between them, namely, Pi has a payment channel 2-PCi with
Pi+1 for i ∈ [n − 1]. Using this network of payment channels,
P1 wishes to route v coins to Pn.
For ease of understanding, we make the following simplifying
assumptions: First, we assume the participation fee for each
party in the payment path fi := 0. Second, we assume that
every payment channel 2-PCi (for i ∈ [n − 1]) in the path
from P1 to Pn is based on the same signature scheme ΠDS.
Our construction can be easily tweaked to support a different
signature scheme for each payment channel in the payment path,
provided that the signature schemes satisfy the requirements
necessary to construct a lockable signature (namely, strong
unforgeability and deterministic signing).
1) Overview: Our protocol assumes the existence of the
following cryptographic tools: (i) A digital signature scheme
ΠDS with the corresponding lockable signature algorithms LS,
(ii) a UC-secure commitment scheme (Commit, Open) with
unique openings, and (iii) a UC-secure MPC protocol Γ for
general functions.
We also assume the transaction expiry functionality from
the underlying blockchain that invalidates a transaction if the
transaction is unspent and a pre-speciﬁed time has passed.
In Section V-D we discuss how this can be realized in practice.
Our generic PCN protocol formally described in Figure 7,
proceeds in three phases, namely, a (one-time) setup phase, a
lock phase and a release phase.
Setup Phase. The sender P1 plays the role of a (special) party
P0 and sets up a local 3-party payment channel with each
successive pair of users. To do this, party P0 along with parties
Pi and Pi+1 (for i ∈ [n − 1]), run an MPC protocol Γ to
generate (i) a new joint public key pk i, (ii) a commitment ci to
the corresponding secret key sk i, (iii) a 3-out-of-3 share of the
secret key sk i and the opening information di (corresponding
to the commitment ci). The commitment ci will force the
parties to use consistent inputs (i.e. shares of the secret key)
in the MPC run during the locking phase. Once the MPC
successfully terminates, party Pi and Pi+1 jointly generate a
transaction tx Setup,i that transfers v coins from 2-PCi (sending
address) to the newly generated joint key pk i, referred to as
3-PCi (recipient address).