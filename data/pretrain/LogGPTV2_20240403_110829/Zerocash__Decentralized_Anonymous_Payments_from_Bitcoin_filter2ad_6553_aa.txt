title:Zerocash: Decentralized Anonymous Payments from Bitcoin
author:Eli Ben-Sasson and
Alessandro Chiesa and
Christina Garman and
Matthew Green and
Ian Miers and
Eran Tromer and
Madars Virza
2014 IEEE Symposium on Security and Privacy
Zerocash: Decentralized Anonymous Payments from Bitcoin
Eli Ben-Sasson∗, Alessandro Chiesa†, Christina Garman‡, Matthew Green‡, Ian Miers‡, Eran Tromer§, Madars Virza†
∗Technion, PI:EMAIL
†MIT, {alexch, madars}@mit.edu
‡Johns Hopkins University, {cgarman, imiers, mgreen}@cs.jhu.edu
§Tel Aviv University, PI:EMAIL
Abstract—Bitcoin is the ﬁrst digital currency to see widespread
adoption. While payments are conducted between pseudonyms,
Bitcoin cannot offer strong privacy guarantees: payment trans-
actions are recorded in a public decentralized ledger, from
which much information can be deduced. Zerocoin (Miers et
al., IEEE S&P 2013) tackles some of these privacy issues by
unlinking transactions from the payment’s origin. Yet, it still
reveals payments’ destinations and amounts, and is limited in
functionality.
In this paper, we construct a full-ﬂedged ledger-based digital
currency with strong privacy guarantees. Our results leverage
recent advances in zero-knowledge Succinct Non-interactive AR-
guments of Knowledge (zk-SNARKs).
First, we formulate and construct decentralized anonymous
payment schemes (DAP schemes). A DAP scheme enables users to
directly pay each other privately: the corresponding transaction
hides the payment’s origin, destination, and transferred amount.
We provide formal deﬁnitions and proofs of the construction’s
security.
Second, we build Zerocash, a practical instantiation of our
DAP scheme construction. In Zerocash, transactions are less than
1 kB and take under 6 ms to verify — orders of magnitude more
efﬁcient than the less-anonymous Zerocoin and competitive with
plain Bitcoin.
Keywords: Bitcoin, decentralized electronic cash, zero knowledge
I. INTRODUCTION
Bitcoin is the ﬁrst digital currency to achieve widespread
adoption. The currency owes its rise in part to the fact that,
unlike traditional e-cash schemes [1, 2, 3], it requires no trusted
parties. Instead of appointing a central bank, Bitcoin leverages a
distributed ledger known as the block chain to store transactions
made between users. Because the block chain is massively
replicated by mutually-distrustful peers, the information it
contains is public.
While users may employ many identities (or pseudonyms)
to enhance their privacy, an increasing body of research shows
that anyone can de-anonymize Bitcoin by using information in
the block chain [4, 5, 6], such as the structure of the transaction
graph as well as the value and dates of transactions. As a result,
Bitcoin fails to offer even a modicum of the privacy provided
by traditional payment systems, let alone the robust privacy of
anonymous e-cash schemes.
While Bitcoin is not anonymous itself, those with sufﬁcient
motivation can obfuscate their transaction history with the help
of mixes (also known as laundries or tumblers). A mix allows
users to entrust a set of coins to a pool operated by a central
party and then, after some interval, retrieve different coins
(with the same total value) from the pool. Yet, mixes suffer
from three limitations:
(i) the delay to reclaim coins must be
large to allow enough coins to be mixed in; (ii) the mix can
trace coins; and (iii) the mix may steal coins.1 For users with
“something to hide,” these risks may be acceptable. But typical
legitimate users (1) wish to keep their spending habits private
from their peers, (2) are risk-averse and do not wish to expend
continual effort in protecting their privacy, and (3) are often
not sufﬁciently aware of their compromised privacy.
To protect their privacy, users thus need an instant, risk-free,
and, most importantly, automatic guarantee that data revealing
their spending habits and account balances is not publicly
accessible by their neighbors, co-workers, and merchants.
Anonymous transactions also guarantee that the market value
of a coin is independent of its history, thus ensuring legitimate
users’ coins remain fungible.2
Zerocoin: a decentralized mix. Miers et al. [8] proposed
Zerocoin, which extends Bitcoin to provide strong anonymity
guarantees. Like many e-cash protocols (e.g., [2]), Zerocoin
employs zero-knowledge proofs to prevent transaction graph
analyses. Unlike earlier practical e-cash protocols, however,
Zerocoin does not rely on digital signatures to validate coins,
nor does it require a central bank to prevent double spending.
Instead, Zerocoin authenticates coins by proving, in zero-
knowledge, that they belong to a public list of valid coins
(which can be maintained on the block chain). Yet, rather than
a full-ﬂedged anonymous currency, Zerocoin is a decentralized
mix, where users may periodically “wash” their bitcoins via
the Zerocoin protocol. Routine day-to-day transactions must
be conducted via Bitcoin, due to reasons that we now review.
The ﬁrst reason is performance. Redeeming zerocoins
requires double-discrete-logarithm proofs of knowledge, which
have size that exceeds 45 kB and require 450 ms to verify (at
the 128-bit security level).3 These proofs must be broadcast
1CoinJoin [7], an alternative proposal, replaces the central party of a mix
with multi-signature transactions that involve many collaborating Bitcoin users.
CoinJoin can thus only mix small volumes of coins amongst users who are
currently online, is prone to denial-of-service attacks by third parties, and
requires effort to ﬁnd mixing partners.
2While the methods we detail in this paper accomplish this, the same
techniques open the door for privacy preserving accountability and oversight
(see Section X).
3These published numbers [8] actually use a mix of parameters at both
128-bit and 80-bit security for different components of the construction. The
cost is higher if all parameters are instantiated at the 128-bit security level.
© 2014, Eli Ben-Sasson. Under license to IEEE.
DOI 10.1109/SP.2014.36
459
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
through the network, veriﬁed by every node, and permanently
stored in the ledger. The entailed costs are higher, by orders
of magnitude, than those in Bitcoin and can seriously tax a
Bitcoin network operating at normal scale.
In this work we address the aforemen-
The second reason is functionality. While Zerocoin consti-
tutes a basic e-cash scheme, it lacks critical features required
of full-ﬂedged anonymous payments. First, Zerocoin uses
coins of ﬁxed denomination: it does not support payments
of exact values, nor does it provide a means to make change
following a transaction (i.e., divide coins). Second, Zerocoin
has no mechanism for one user to pay another one directly
in “zerocoins.” And third, while Zerocoin provides anonymity
by unlinking a payment transaction from its origin address, it
does not hide the amount or other metadata about transactions
occurring on the network.
Our contribution.
tioned issues via two main contributions.
(1) We introduce the notion of a decentralized anonymous
payment scheme, which formally captures the functionality and
security guarantees of a full-ﬂedged decentralized electronic
currency with strong anonymity guarantees. We provide a con-
struction of this primitive and prove its security under speciﬁc
cryptographic assumptions. The construction leverages recent
advances in the area of zero-knowledge proofs. Speciﬁcally, it
uses zero-knowledge Succinct Non-interactive ARguments of
Knowledge (zk-SNARKs) [9, 10, 11, 12, 13, 14, 15, 16].
(2) We achieve an implementation of the above primitive, via
a system that we call Zerocash. Compared to Zerocoin, our
system (at 128 bits of security):
• Reduces the size of transactions spending a coin by 97.7%.
• Reduces the spend-transaction veriﬁcation time by 98.6%.
• Allows for anonymous transactions of variable amounts.
• Hides transaction amounts and the values of coins held by
users.
• Allows for payments to be made directly to a user’s ﬁxed
address (without user interaction).
To validate our system, we measured its performance and
established feasibility by conducting experiments in a test
network of 1000 nodes (approximately 1
16 of the unique IPs
in the Bitcoin network and 1
3 of the nodes reachable at any
given time [17]). This inspires conﬁdence that Zerocash can
be deployed as a fork of Bitcoin and operate at the same
scale. Thus, due to its signiﬁcantly improved functionality and
performance, Zerocash makes it possible to entirely replace
traditional Bitcoin payments with anonymous alternatives.
Concurrent work. The idea of using zk-SNARKs in the
setting of Bitcoin was ﬁrst presented by one of the authors
at Bitcoin 2013 [18]. In concurrent work, Danezis et al. [19]
suggest using zk-SNARKs to reduce proof size and veriﬁcation
time in Zerocoin; see Section IX for a comparison.
A. zk-SNARKs
We now sketch in more technical terms the deﬁnition of
a zk-SNARK; see Section II for more details. A zk-SNARK
is a non-interactive zero-knowledge proof of knowledge that
460
is succinct, i.e., for which proofs are very short and easy to
verify. More precisely, let L be an NP language, and let C be a
nondeterministic decision circuit for L on a given instance size
n. A zk-SNARK can be used to prove and verify membership
in L, for instances of size n, as follows. After taking C as
input, a trusted party conducts a one-time setup phase that
results in two public keys: a proving key pk and a veriﬁcation
key vk. The proving key pk enables any (untrusted) prover
to produce a proof π attesting to the fact that x ∈ L, for an
instance x (of size n) of his choice. The non-interactive proof
π is zero knowledge and a proof of knowledge. Anyone can
use the veriﬁcation key vk to verify the proof π; in particular
zk-SNARK proofs are publicly veriﬁable: anyone can verify π,
without ever having to interact with the prover that generated
π. Succinctness requires that (for a given security level) π has
constant size and can be veriﬁed in time that is linear in |x|
(rather than linear in |C|).
B. Decentralized anonymous payment schemes
We construct a decentralized anonymous payment (DAP)
scheme, which is a decentralized e-cash scheme that allows
direct anonymous payments of any amount. See Section III for
a formal deﬁnition. Here, we outline our construction in six
incremental steps; the construction details are in Section IV.
Our construction functions on top of any ledger-based base
currency, such as Bitcoin. At any given time, a unique valid
snapshot of the currency’s ledger is available to all users.
The ledger is a sequence of transactions and is append-
only. Transactions include both the underlying currency’s
transactions, as well as new transactions introduced by our
construction. For concreteness, we focus the discussion below
on Bitcoin (though later deﬁnitions and constructions are
stated abstractly). We assume familiarity with Bitcoin [20]
and Zerocoin [8].
Step 1: user anonymity with ﬁxed-value coins. We ﬁrst
describe a simpliﬁed construction, in which all coins have
the same value of, e.g., 1 BTC. This construction, similar
to the Zerocoin protocol, shows how to hide a payment’s
origin. In terms of tools, we make use of zk-SNARKs (recalled
above) and a commitment scheme. Let COMM denote a
statistically-hiding non-interactive commitment scheme (i.e.,
given randomness r and message m, the commitment is
c := COMMr(m); subsequently, c is opened by revealing
r and m, and one can verify that COMMr(m) equals c).
In the simpliﬁed construction, a new coin c is minted as
follows: a user u samples a random serial number sn and a
trapdoor r, computes a coin commitment cm := COMMr(sn),
and sets c := (r, sn, cm). A corresponding mint transaction
txMint, containing cm (but not sn or r), is sent to the ledger;
txMint is appended to the ledger only if u has paid 1 BTC
to a backing escrow pool (e.g., the 1 BTC may be paid via
plaintext information encoded in txMint). Mint transactions
are thus certiﬁcates of deposit, deriving their value from the
backing pool.
Subsequently, letting CMList denote the list of all coin
commitments on the ledger, u may spend c by posting a spend
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
transaction txSpend that contains (i) the coin’s serial number
sn; and (ii) a zk-SNARK proof π of the NP statement “I know
r such that COMMr(sn) appears in the list CMList of coin
commitments”. Assuming that sn does not already appear on
the ledger (as part of a past spend transaction), u can redeem
the deposited amount of 1 BTC, which u can either keep for
himself, transfer to someone else, or immediately deposit into
a new coin. (If sn does already appear on the ledger, this is
considered double spending, and the transaction is discarded.)
User anonymity is achieved because the proof π is zero-
knowledge: while sn is revealed, no information about r
is, and ﬁnding which of the numerous commitments in
CMList corresponds to a particular spend transaction txSpend is
equivalent to inverting f (x) := COMMx(sn), which is assumed
to be infeasible. Thus, the origin of the payment is anonymous.
Step 2: compressing the list of coin commitments.
In the
above NP statement, CMList is speciﬁed explicitly as a list of
coin commitments. This naive representation severely limits
scalability because the time and space complexity of most
protocol algorithms (e.g., the proof veriﬁcation algorithm)
grows linearly with CMList. Moreover, coin commitments
corresponding to already spent coins cannot be dropped from
CMList to reduce costs, since they cannot be identiﬁed (due to
the same zero-knowledge property that provides anonymity).
As in [3], we rely on a collision-resistant hash function CRH
to avoid an explicit representation of CMList. We maintain
an efﬁciently updatable append-only CRH-based Merkle tree
Tree(CMList) over the (growing) list CMList. Letting rt denote
the root of Tree(CMList), it is well-known that updating rt to
account for insertion of new leaves can be done with time and
space proportional to the tree depth. Hence, the time and space
complexity is reduced from linear in the size of CMList to
logarithmic. With this in mind, we modify the NP statement to
the following one: “I know r such that COMMr(sn) appears as
a leaf in a CRH-based Merkle tree whose root is rt”. Compared
with the naive data structure for CMList, this modiﬁcation
increases exponentially the size of CMList which a given
zk-SNARK implementation can support (concretely, using trees
of depth 64, Zerocash supports 264 coins).
Step 3: extending coins for direct anonymous payments.
So far, the coin commitment cm of a coin c is a commitment
to the coin’s serial number sn. However, this creates a problem
when transferring c to another user. Indeed, suppose that a user
uA created c, and uA sends c to another user uB. First, since
uA knows sn, the spending of c by uB is both not anonymous
(since uA sees when c is spent, by recognizing sn) and risky
(since uA could still spend c ﬁrst). Thus, uB must immediately
spend c and mint a new coin c(cid:48) to protect himself. Second, if
uA in fact wants to transfer to uB, e.g., 100 BTC, then doing
so is both unwieldy (since it requires 100 transfers) and not
anonymous (since the amount of the transfer is leaked). And
third, transfers in amounts that are not multiples of 1 BTC (the
ﬁxed value of a coin) are not supported. Thus, the simpliﬁed
construction described is inadequate as a payment scheme.
We address this by modifying the derivation of a coin
461
commitment, and using pseudorandom functions to target
payments and to derive serial numbers, as follows. We use three
pseudorandom functions (derived from a single one). For a
x (·).
seed x these are denoted PRFaddr
We assume that PRFsn is moreover collision-resistant.
x (·), and PRFpk
(·), PRFsn
x
To provide targets for payments, we use addresses: each
user u generates an address key pair (apk, ask). The coins of
u contain the value apk and can be spent only with knowledge
of ask. A key pair (apk, ask) is sampled by selecting a random
seed ask and setting apk := PRFaddr
(0). A user can generate
and use any number of address key pairs.
ask
Next, we re-design minting to allow for greater functionality.
To mint a coin c of a desired value v, the user u ﬁrst samples ρ,
which is a secret value that determines the coin’s serial number
as sn := PRFsn
(ρ). Then, u commits to the tuple (apk, v, ρ) in
two phases: (a) u computes k := COMMr(apk(cid:107)ρ) for a random
ask
r; and then (b) u computes cm := COMMs(v(cid:107)k) for a random
s. The minting results in a coin c := (apk, v, ρ, r, s, cm) and a
mint transaction txMint := (v, k, s, cm). Crucially, due to the
nested commitment, anyone can verify that cm in txMint is
a coin commitment of a coin of value v (by checking that
COMMs(v(cid:107)k) equals cm) but cannot discern the owner (by
learning the address key apk) or serial number (derived from
ρ) because these are hidden in k. As before, txMint is accepted
by the ledger only if u deposits the correct amount, in this
case v BTC.
2
1
pk , aold
, with total value vnew
Coins are spent using the pour operation, which takes a set
of input coins, to be consumed, and “pours” their value into a
set of fresh output coins — such that the total value of output
coins equals the total value of the input coins. Suppose that
u, with address key pair (aold
sk ), wishes to consume his
pk , vold, ρold, rold, sold, cmold) and produce two
coin cold = (aold
2 = vold,
new coins cnew
and cnew