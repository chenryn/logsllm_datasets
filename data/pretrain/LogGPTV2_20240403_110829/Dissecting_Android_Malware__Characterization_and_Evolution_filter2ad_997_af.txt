1 100.0 1 100.0 1 100.0
1 100.0
RogueLemon
RogueSPPush
SMSReplicator
2
9
1
SndApps
Spitmo
Tapsnake
Walkinwat
YZHC
zHash
Zitmo
Zsone
10 10 100.0 6
60.0 0
0.0
4
40.0
1
2
1
22
1 100.0 1 100.0 1 100.0
1 100.0
0
0
1
0.0
0.0
4.5
2 100.0 1
50.0
1
50.0
1 100.0 1 100.0
1 100.0
1
4.5
3
13.6
10 45.4
11 11 100.0 11 100.0 2
18.1
11 100.0
1
1 100.0 1 100.0 1 100.0
1 100.0
12 12 100.0 12 100.0 5
41.6
12 100.0
Detected Samples
(out of 1260)
689
(54.7%)
1003
(79.6%)
254
966
(20.2%)
(76.7%)
round. In the second round, we will wait for 60 seconds
to make sure that there is enough time for these security
software to scan the malware.
The scanning results are shown in Table VII. In the table,
the ﬁrst two columns list the malware family and the number
of the samples in this malware family. The rest columns
show the number of samples as well as the percentage being
detected by the corresponding security software. At the end
of the table, we show the number of detected samples for
each anti-virus software and its corresponding detection rate.
The results are not encouraging: Lookout detected 1003
malware samples in 39 families; TrendMicro detected 966
106
samples in 42 families; AVG detected 689 samples in 32
families; and Norton detected the least samples (254) in 36
families.
Apparently,
these security software take different ap-
proaches in their design and implementation, which lead
to different detection ratio even for the same malware
family. For example, AVG detects all ADRD samples in our
dataset, while Lookout detects 59.0% of them. Also, Lookout
detects most of DroidKungFu3 samples and all DroidKungFu4
samples while AVG can detect none of them (0.0%) or few
of them (4.1%).
There are some malware families that completely fail
these four mobile security software. Examples are BeanBot,
CoinPirate, DroidCoupon, DroidKungFuSapp, NickyBot and
RogueLemon. One reason is that
they are relatively new
(discovered from August to October 2011). Therefore, ex-
isting mobile anti-virus companies may not get a chance to
obtain a copy of these samples or extract their signatures.
From another perspective, this does imply that they are still
taking traditional approaches to have a signature database
that represents known malware samples. As a result, if the
sample is not available, it is very likely that it will not be
detected.
VI. DISCUSSION
Our characterization of existing Android malware and an
evolution-based study of representative ones clearly reveal a
serious threat we are facing today. Unfortunately, existing
popular mobile security software still
lag behind and it
becomes imperative to explore possible solutions to make
a difference.
First, our characterization shows that most existing An-
droid malware (86.0%) repackage other legitimate (popular)
apps, which indicates that we might be able to effectively
mitigate the threat by policing existing Android Markets for
repackaging detection. However, the challenges lie in the
large volume of new apps created on a daily basis as well as
the accuracy needed for repackaging detection. In addition,
the popularity of alternative Android Markets will also add
signiﬁcant challenges. Though there is no clear solution in
sight, we do argue for a joint effort involving all parties in
the ecosystem to spot and discourage repackaged apps.
Second, our characterization also indicates that more than
one third (36.7%) of Android malware enclose platform-
level exploits to escalate their privilege. Unfortunately, the
open Android platform has the well-known “fragmentation”
problem, which leads to a long vulnerable time window
of current mobile devices before a patch can be actually
deployed. Worse,
lacks many
desirable security features. ASLR was not added until very
recently in Android 4.0. Other security features such as
TrustZone and eXecute-Never need to be gradually rolled
out to raise the bar for exploitation. Moreover, our analysis
reveals that the dynamic loading ability of both native code
the current platform still
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply. 
and Dalvik code are being actively abused by existing
malware (e.g., DroidKungFu and AnserverBot). There is a
need to develop effective solutions to prevent them from
being abused while still allowing legitimate uses to proceed.
Third, our characterization shows that existing malware
(45.3%) tend to subscribe to premium-rate services with
background SMS messages. Related to that, most existing
malware intercept incoming SMS messages (e.g., to block
billing information or sidestep the second-conﬁrmation re-
quirement). This problem might be rooted in the lack of ﬁne-
grain control of related APIs (e.g., sendTextMessage).
Speciﬁcally, the coarse-grained Android permission model
can be possibly expanded to include additional context
information to better facilitate users to make sound and
informed decisions.
Fourth, the detection results of existing mobile security
software are rather disappointing, which does raise a chal-
lenging question on the best model for mobile malware de-
tection. Speciﬁcally, the unique runtime environments with
limited resources and battery could preclude the deployment
of sophisticated detection techniques. Also, the traditional
content-signature-based approaches have been demonstrated
not promising at all. From another perspective, the presence
of centralized marketplaces (including alternative ones) does
provide unique advantages in blocking mobile malware from
entering the marketplaces in the ﬁrst place.
Last but not least, during the process of collecting mal-
ware samples into our current dataset, we felt confusions
from disorganized or confusing naming schemes. For ex-
ample, BaseBridge has another name AdSMS (by different
anti-virus companies); ADRD is the alias of Hongtoutou; and
LeNa is actually a DroidKungFu variant. One possible solution
may follow the common naming conventions used in desktop
space, which calls for the cooperation from different mobile
security software vendors.
VII. RELATED WORK
Smartphone security and privacy has recently become
a major concern. TaintDroid [34] and PiOS [35] are two
systems that expose possible privacy leaks on Android and
iOS, respectively. Comdroid [36] [37] and Woodpecker [38]
expose the confused deputy problem [39] on Android. Ac-
cordingly, researches have proposed several possible solu-
tions [37] [40] [41] to this issue. Stowaway [42] exposes
the over-privilege problem (where an app requests more
permissions than it uses) in existing apps. Schrittwieser et
al. [43] reports that certain security ﬂaws exist in recent
network-facing messaging apps. Traynor et al. [44] charac-
terizes the impact of mobile botnet on the mobile network.
AdRisk [45] systematically identiﬁes potential risks from
in-app advertisement libraries. Our work is different from
them with a unique focus on systematically characterizing
existing Android malware in the wild.
To improve the smartphone security and privacy, a
number of platform-level extensions have been proposed.
Speciﬁcally, Apex [46], MockDroid [47], TISSA [48] and
AppFence [49] extend the current Android framework to
provide ﬁnd-grained controls of system resources accessed
by untrusted third-party apps. Saint [50] protects the exposed
interfaces of an app to others by allowing the app developers
to deﬁne related security policies for runtime enforcement.
Kirin [51] blocks the installation of suspicious apps by
examining the existence of certain dangerous permission
combination. L4Android [52] and Cells [53] run multiply
OSes on a single smartphone for improved isolation and
security. Note that none of them characterizes (or studies
the evolution of) existing Android malware, which is the
main focus of this work.
Among the most related, Felt et al. [54] surveys 46
malware samples on three different mobile platforms, i.e.,
iOS, Android and Symbian, analyzes their incentives, and
discusses possible defenses. In contrast, we examine a much
larger dataset (with 1, 260 malware samples in 49 different
families) on one single popular platform – Android. The
size of our dataset is instrumental to systematically charac-
terizing malware infection behavior and understanding their
evolution. Moreover, the subsequent test of existing mobile
security software further necessitates a change for effective
anti-mobile-malware solutions.
From another perspective, Becher et al. [55] provides
a survey of mobile network security, from the hardware
layer to the user-centric attacks. DroidRanger [56] detects
malicious apps in existing ofﬁcial and alternative Android
Markets. DroidMOSS [57] uses the fuzzy hashing to de-
tect the repackaged apps (potential malware) in third-party
android markets. Enck et al. [58] studies 1, 100 top free
(benign) Android apps to better understand the security
characteristics of these apps. Our work differs from them by
focusing on 1, 260 malicious apps (accumulated from more
than one year effort) and presenting a systematic study of
their installation, activation, and payloads.
VIII. CONCLUSION
In this paper, we present a systematic characterization
of existing Android malware. The characterization is made
possible with our more than one-year effort in collecting
1260 Android malware samples in 49 different families,
which covers the majority of existing Android malware,
ranging from its debut in August 2010 to recent ones in Oc-
tober 2011. By characterizing these malware samples from
various aspects, our results show that (1) 86.0% of them
repackage legitimate apps to include malicious payloads; (2)
36.7% contain platform-level exploits to escalate privilege;
(3) 93.0% exhibit
the bot-like capability. A further in-
depth evolution analysis of representative Android malware
shows the rapid development and increased sophistication,
posing signiﬁcant challenges for their detection. Sadly, the
107
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply. 
evaluation with four existing mobile anti-virus software
shows that the best case detects 79.6% of them while the
worst case detects only 20.2%. These results call for the
need to better develop next-generation anti-mobile-malware
solutions.
ACKNOWLEDGMENT
We would like to thank our shepherd, Patrick Traynor, and
the anonymous reviewers for their comments that greatly
helped improve the presentation of this paper. We also
want to thank Michael Grace, Zhi Wang, Wu Zhou, Deepa
Srinivasan, Minh Q. Tran, and Lei Wu for the helpful
discussion. This work was supported in part by the US
National Science Foundation (NSF) under Grants 0855297,
0855036, 0910767, and 0952640. Any opinions, ﬁndings,
and conclusions or recommendations expressed in this ma-
terial are those of the authors and do not necessarily reﬂect
the views of the NSF.
REFERENCES
[1] (2011) Smartphone Shipments Tripled Since ’08. Dumb
Phones Are Flat. http://tech.fortune.cnn.com/2011/11/01/
smartphone-shipments-tripled-since-08-dumb-phones-are-
ﬂat.
[2] Number of the Week: at Least 34% of Android Malware Is
Stealing Your Data. http://www.kaspersky.com/about/news/
virus/2011/Number of the Week at Least 34 of Android
Malware Is Stealing Your Data.
[3] Malicious Mobile Threats Report 2010/2011. http://www.
juniper.net/us/en/company/press-center/press-releases/2011/
pr 2011 05 10-09 00.html.
[4] Security Alert: AnserverBot, New Sophisticated Android Bot
Found in Alternative Android Markets. http://www.csc.ncsu.
edu/faculty/jiang/AnserverBot/.
[5] Security Alert: New Stealthy Android Spyware – Plankton –
Found in Ofﬁcial Android Market. http://www.csc.ncsu.edu/
faculty/jiang/Plankton/.
[6] Lookout Mobile Security. https://www.mylookout.com/.
[7] NetQin Mobile Security. http://www.netqin.com/en/.
[8] AVG Mobilation.
android.tpl-crp.
http://free.avg.com/us-en/antivirus-for-
[9] Symantec. http://www.symantec.com/.
[10] Fortinet. http://www.fortinet.com/.
[11] TrendMicro. http://www.virustotal.com/.
[12] Security Alerts. http://www.csc.ncsu.edu/faculty/jiang/.
[13] One Year Of Android Malware
(Full List). http://
paulsparrows.wordpress.com/2011/08/11/one-year-of-
android-malware-full-list/.
[14] Security Alert: New DroidKungFu Variant – AGAIN! –
Found in Alternative Android Markets. http://www.csc.ncsu.
edu/faculty/jiang/DroidKungFu3/.
[15] Android.Bgserv Found on Fake Google Security Patch.
http://www.symantec.com/connect/blogs/androidbgserv-
found-fake-google-security-patch.
[16] WAPS. http://www.waps.cn/.
[17] GGTracker Technical Tear Down. http://blog.mylookout.
com/wp-content/uploads/2011/06/GGTracker-Teardown
Lookout-Mobile-Security.pdf.
[18] Malicious QR Codes Pushing Android Malware. https://www.
securelist.com/en/blog/208193145/Its time for malicious
QR codes.
[19] First SpyEye Attack on Android Mobile Platform now in
the Wild. https://www.trusteer.com/blog/ﬁrst-spyeye-attack-
android-mobile-platform-now-wild.
[20] ZeuS-in-the-Mobile
- Facts
and Theories. http://www.
securelist.com/en/analysis/204792194/ZeuS in the Mobile
Facts and Theories.
[21] QR code. http://en.wikipedia.org/wiki/QR code.
[22] Using QR tags to Attack SmartPhones (Attaging). http://
kaoticoneutral.blogspot.com/2011/09/using-qr-tags-to-
attack-smartphones 10.html.
[23] Asroot.
tar.gz.
http://milw0rm.com/sploits/android-root-20090816.
[24] android
trickery.
android-trickery.html.
http://c-skills.blogspot.com/2010/07/
[25] Droid2. http://c-skills.blogspot.com/2010/08/droid2.html.
[26] Zimperlich
sources.
http://c-skills.blogspot.com/2011/02/
zimperlich-sources.html.
[27] adb trickery #2. http://c-skills.blogspot.com/2011/01/adb-
trickery-again.html.
[28] yummy yummy, GingerBreak! http://c-skills.blogspot.com/
2011/04/yummy-yummy-gingerbreak.html.
[29] Revolutionary - zergRush local root 2.2/2.3. http://forum.xda-
developers.com/showthread.php?t=1296916.
[30] Security Alert: New Sophisticated Android Malware Droid-
KungFu Found in Alternative Chinese App Markets. http://
www.csc.ncsu.edu/faculty/jiang/DroidKungFu.html.
[31] LeNa (Legacy Native) Teardown. http://blog.mylookout.
com/wp-content/uploads/2011/10/LeNa-Legacy-Native-
Teardown Lookout-Mobile-Security1.pdf.
[32] DroidKungFu Utilizes an Update Attack. http://www.f-secure.
com/weblog/archives/00002259.html.
[33] An Analysis of the AnserverBot Trojan. http://www.csc.ncsu.
edu/faculty/jiang/pubs/AnserverBot Analysis.pdf.
108
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply. 
[34] W. Enck, P. Gilbert, B.-g. Chun, L. P. Cox, J. Jung, P. Mc-
Daniel, and A. N. Sheth, “TaintDroid: An Information-Flow
Tracking System for Realtime Privacy Monitoring on Smart-
phones,” in Proceedings of the 9th USENIX Symposium on
Operating Systems Design and Implementation, 2010.
[35] M. Egele, C. Kruegel, E. Kirda, and G. Vigna, “PiOS:
Detecting Privacy Leaks in iOS Applications,” in Proceedings
of the 18th Annual Symposium on Network and Distributed
System Security, 2011.
[36] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “An-
alyzing Inter-Application Communication in Android,” in
9th Annual International Conference on Mobile Systems,
Applications, and Services, 2011.
[37] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin,
“Permission Re-Delegation: Attacks and Defenses,” in Pro-
ceedings of the 20th USENIX Security Symposium, 2011.
[38] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, “Systematic De-
tection of Capability Leaks in Stock Android Smartphones,”
in Proceedings of the 19th Annual Symposium on Network
and Distributed System Security, 2012.
[39] N. Hardy, “The Confused Deputy: (or why capabilities might
have been invented),” ACM SIGOPS Operating Systems Re-
view, vol. 22, October 1998.
[40] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach,
“QUIRE: Lightweight Provenance for Smart Phone Operat-
ing Systems,” in Proceedings of the 20th USENIX Security
Symposium, 2011.
[41] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi,
and B. Shastry, “Towards Taming Privilege-Escalation At-
tacks on Android,” in Proceedings of the 19th Annual Sym-
posium on Network and Distributed System Security, 2012.
[42] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner,
“Android Permissions Demystied,” in Proceedings of the 18th
ACM Conference on Computer and Communications Security,
2011.
[43] S. Schrittwieser, P. Frhwirt, P. Kieseberg, M. Leithner,
M. Mulazzani, M. Huber, and E. Weippl, “Guess Who’s Tex-
ting You? Evaluating the Security of Smartphone Messaging
Applications,” in Proceedings of the 19th Annual Symposium
on Network and Distributed System Security, 2012.
[44] P. Traynor, M. Lin, M. Ongtang, V. Rao, T. Jaeger, P. Mc-
Daniel, and T. L. Porta, “On Cellular Botnets: Measuring the
Impact of Malicious Devices on a Cellular Network Core,” in
Proceedings of the 16th ACM Conference on Computer and
Communications Security, 2009.
[45] M. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, “Unsafe
Exposure Analysis of Mobile In-App Advertisements,” in
Proceedings of the 5th ACM Conference on Security and
Privacy in Wireless and Mobile Networks, 2012.
[46] M. Nauman, S. Khan, and X. Zhang, “Apex: Extending
Android Permission Model and Enforcement with User-
Deﬁned Runtime Constraints,” in Proceedings of the 5th ACM
Symposium on Information, Computer and Communications
Security, 2010.
[47] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan, “Mock-
Droid: Trading Privacy for Application Functionality on
Smartphones,” in Proceedings of the 12th International Work-
shop on Mobile Computing System and Applications, 2011.
[48] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh, “Taming
Information-Stealing Smartphone Applications (on Android),”
in Proceeding of the 4th International Conference on Trust
and Trustworthy Computing, 2011.
[49] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall,
“These Aren’t the Droids You’re Looking For: Retroﬁtting
Android to Protect Data from Imperious Applications,” in
Proceedings of the 18th ACM Conference on Computer and
Communications Security, 2011.
[50] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel,
“Semantically Rich Application-Centric Security in Android,”
in Proceedings of the 25th Annual Computer Security Appli-
cations Conference.
[51] W. Enck, M. Ongtang, and P. McDaniel, “On Lightweight
Mobile Phone Application Certiﬁcation,” in Proceedings of
the 16th ACM Conference on Computer and Communications
Security, 2009.
[52] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and
M. Peter, “L4Android: A Generic Operating System Frame-
work for Secure Smartphones,” in Proceedings of the 1st
Workshop on Security and Privacy in Smartphones and Mo-
bile Devices, 2011.
[53] J. Andrus, C. Dall, A. Van’t Hof, O. Laadan, and J. Nieh,
“Cells: A Virtual Mobile Smartphone Architecture,” in Pro-
ceedings of the 23rd ACM Symposium on Operating Systems
Principles, 2011.
[54] A. Porter Felt, M. Finifter, E. Chin, S. Hanna, and D. Wagner,
“A Survey of Mobile Malware In The Wild,” in Proceedings
of the 1st Workshop on Security and Privacy in Smartphones
and Mobile Devices, 2011.
[55] M. Becher, F. C. Freiling, J. Hoffmann, T. Holz, S. Uellen-
beck, and C. Wolf, “Mobile Security Catching Up? Revealing
the Nuts and Bolts of the Security of Mobile Devices,” in
Proceedings of the 32nd IEEE Symposium on Security and
Privacy, 2011.
[56] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang, “Hey, You, Get
off of My Market: Detecting Malicious Apps in Ofﬁcial
and Alternative Android Markets,” in Proceedings of
the
19th Annual Symposium on Network and Distributed System
Security, 2012.
[57] W. Zhou, Y. Zhou, X. Jiang, and P. Ning, “DroidMOSS:
Detecting Repackaged Smartphone Applications in Third-
Party Android Marketplaces,” in Proceedings of the 2nd ACM
Conference on Data and Application Security and Privacy,
2012.
[58] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A
Study of Android Application Security,” in Proceedings of
the 20th USENIX Security Symposium, 2011.
109
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply.