63 66 74 77 83 84 87
8 11 13 18 23 25 32 34 42 43
46 50 54 55 63 64 66 70 72
73 74 75 76 77 78 79 80 81
82 83 84 85 95 97
5 8 23 25 35 42 64 66 70 77
80 83 84 97 99
10 37
19 27 31 91
28 60
12 37 40 86
27 38 44 56 57
59 90 100
28 60 65
2
2
12
22 67 90
65
19 22 27 31 38
44 48 56 57 59
67 90 91 100
19 27 100
28 60
Table 2: Summary of protections in mobile games
4.2.1 Local Resource Protection
Local resource protection prevents hackers from editing
local resources. To protect against memory editing tools
(e.g., GameKiller), developers use diﬀerent approaches such
as encrypting the sensitive variables and detecting memory
editing operations. To protect against ﬁle editing tools (e.g.,
CheatDroid), developers often encrypt sensitive values be-
fore writing them into ﬁles. Overall, we observe that 34%
of the studied games have local resource protection in place.
For games with proper local resource protections, it is hard
389
to use the general hacking tools to modify memory or lo-
cal ﬁles because these tools can eﬀectively get correct values
from the memory. Attackers need to use more advanced
analyses such as traﬃc analysis to modify traﬃc or decom-
pilation to ﬁgure out the protections.
4.2.2 Network Protections
Although mobile games only generate a small amount of
network traﬃc, developers do want to protect the traﬃc
from hackers, because it often carries sensitive data, which,
if controlled by the hacker, would void the eﬀort of local
resource protection. The most basic protection is using
standard HTTPS for network communication, which we ob-
served in 26% of the studied games. While HTTPS provides
some protection, it is not eﬀective against an attacker using
a web proxy with a fake certiﬁcate to decrypt the HTTPS
traﬃc. A more eﬀective approach is to make the traﬃc
obscure for the hacker. For example, some studied games
use non-public encoding or encryption, do certiﬁcate pin-
ning or maintain a list of approved certiﬁcates. There are
also games whose traﬃc cannot be captured by the proxy
and games that sign their packets.
4.2.3 Code Obfuscation and Hiding
The goal of code obfuscation and hiding is to increase the
barrier for the hacker to reverse-engineer the game’s internal
logic. Our study shows that 24% of games use code obfusca-
tion or hiding at diﬀerent sophistication levels, ranging from
obfuscating class names and variable games to dynamic li-
brary downloading.
4.2.4 Compilation into Native Code
We also observed 48% of studied games contain compo-
nents that are compiled into native code as opposed to Java
byte-code. This approach creates barriers for hackers be-
cause decompiling native code is much harder than Java
byte-code. Although there are existing decompilers for na-
tive code, the decompilation quality is usually far from sat-
isfactory, thus reverse-engineering the logic is still very time-
consuming.
4.2.5 Client-Server Sync
The goal of client-server sync is to keep the client-side
state in sync with that of the server. We only found 25
games that implement this protection . Client-server sync, if
eﬀectively implemented, is considerably secure against most
hacks that we are aware of. However, a correct implementa-
tion requires an insightful design consideration about how to
partition the game logic between the client and the server,
so that important computations are not solely performed on
the client side. We found several examples of games that
attempt client-server sync but are still vulnerable, including
Trivia Crack and Dragon City.
4.3 Real-world deployments of the protections
Table 2 shows the 100 games in a grid, in which each row is
one of the ﬁve protection mechanisms discussed above, and
each column is one of the popular game engines. Note that
it is fairly common for a game to deploy multiple protection
mechanisms, so an index may appear in multiple cells in a
column. From the table, we can see that games developed
using diﬀerent game engines have diﬀerent tendencies of ap-
plying the protection mechanisms. For example, games de-
veloped using Android SDK/NDK tend to apply obfuscation
more often due to native support in the development envi-
ronments. Conversely, games developed using Unity3D do
not deploy code obfuscation very often, because developers
have to implement their own techniques. We also observed
that client-server sync is most often applied on multi-player
games that have frequent network communications.
The deployments of the protections are also related to the
vendors of the games. For example, large vendors tend to
adopt better protections. Out of the 100 apps we studied,
ten vendors such as EA games, Supercell develop more than
one app (32 apps in total). These games from larger vendors
are more likely to deploy full client-server sync (34.4%) than
games from smaller vendors (10.3%). These larger vendors
also tend to use one developing platform over their games.
Six companies utilize the same platform for their 17 games.
Using the same platform makes it easier for the vendor to
share the same protection techniques across games. How-
ever, the protections adopted are still diﬀerent because of
other factors. Since the majority of games (68%) are from
small vendors that do not have good resources for security
development, we envision the analysis of protection tech-
niques and suggestions for best practices would beneﬁt them
tremendously.
It is worth noting that even for games adopting the same
set of protections, resilience against hacking still varies con-
siderably across games. Understanding how eﬀectively the
games implement their protections requires a much deeper
investigation about individual games. In the next section,
we present several representative cases, including games that
are trivial to hack and ones that are much more secure.
5. CASE STUDIES OF REAL-WORLD PRO-
TECTIONS IN MOBILE GAMES
In order to obtain a deeper understanding about how ef-
fectively developers implement protection mechanisms, we
conducted a number of case studies, in which we took the
game hacker’s perspective and used hacking tools with dif-
ferent levels of sophistication. Our analysis uses the catego-
rization introduced in Section 4.
5.1 Local Resources Protection
We observed diﬀerent approaches for local resource pro-
tections. Most of them aim at protecting the memory, but
there are a few approaches for local ﬁle protection. Exam-
ples of local ﬁle protection techniques include encrypting or
encoding local ﬁles. Note that it only makes sense to protect
both local ﬁles and memory, because protecting one with-
out the other would be too trivial to break. Unfortunately,
this mistake was made by a number of games. For example,
Jelly Jump and 94% only protect memory, while AdVenture
Capitalist and ZigZag only protect local ﬁles.
5.1.1 Basic Memory Protection
We observed several games that encrypt sensitive values
before storing them . An example is Subway Surfers, a pop-
ular game with over 100,000,000 downloads. In the game,
the main character runs on railways to collect coins while
avoiding incoming trains. Gamers can buy equipments with
coins, which are, therefore, an important resource that the
game developers want to protect. We used general memory
editing tools attempting to modify the number of coins but
390
public int amountOfCoins
{
get
{
return Utils.XORValue(this._xoredAmount);
}
set
{
int num = Utils.XORValue(this._xoredAmount);
if (num != value)
{
this._xoredAmount= Utils.XORValue(value);
Action action = this.onCoinsChanged;
}
}
}
public static int XORValue(int value)
{
return value ^ Utils.GetXorRandomValue();
}
Figure 1: Subway surfers computes the XOR of the coin
number with a random number when updating the coin
number (code is simpliﬁed for display purpose).
did not succeed. We then decompiled the game with ILSpy
to analyze the coin counting logic, and we eventually realized
that the developers XOR the coin number with a random
number so that a hacker cannot simply search for the coin
value in memory. The details are shown in Figure 1.
5.1.2 Local File Protection
We also used decompliers such as dex2jar, ILSpy, and JD-
GUI to identify games that protect sensitive values in lo-
cal ﬁles . ZigZag is a game in which the gamer tries to
move balls forward and still keeps balls on the pathway by
changing the directions of balls. It enables in-app purchases
for more balls. ZigZag stores level number in SharedRefer-
ences (a common local ﬁle for storing values), but we can-
not modify it directly. By studying its decompiled code,
we found that ZigZag used CryptoPlayerPrefs (XOR or
Rijndael) before saving values to SharedPreferences. We
decompile the app and track the function for storing val-
ues locally to identify the encryption key. Then we realized
that the key is hashed from a variable name. Even without
the encryption key, a game hacker can still modify scores
because ZigZag does not implement memory protection for
updating two sensitive variables GameController.score and
GameController.bestScore. Attackers can just search the
score number in the memory and modify the score.
5.2 Network Protections
A majority of mobile games allow the gamer to play mostly
oﬄine and only communicate with servers in speciﬁc situa-
tions such as updating high scores, purchasing equipment,
sending awards, and socializing with friends. These opera-
tions are essential to the games, so the traﬃc should be well
protected. We observed diﬀerent approaches of protecting
traﬃc with diﬀerent levels of eﬀectiveness. Following are
our case studies to explain what developers implement in
the real world.
5.2.1 Basic HTTPS
The ﬁrst level of network protection is using HTTPS alone.
It is not eﬀective against game hacks, because the hacker can
(cid:202)(cid:195)(cid:195)(cid:196)(cid:196)(cid:200)(cid:195)(cid:193)(cid:196)(cid:199)(cid:201)(cid:198)(cid:197)(cid:200)(cid:200)(cid:198)(cid:201)(cid:193)(cid:200)
(cid:47)(cid:69)(cid:93)(cid:103)(cid:73)(cid:3)(cid:107)(cid:100)(cid:71)(cid:60)(cid:106)(cid:73)(cid:3)(cid:165)(cid:106)(cid:60)(cid:90)(cid:100)(cid:73)(cid:103)(cid:73)(cid:71)(cid:166)
(cid:193)(cid:3)(cid:81)(cid:104)(cid:3)(cid:69)(cid:80)(cid:60)(cid:91)(cid:79)(cid:73)(cid:71)(cid:3)(cid:106)(cid:93)(cid:3)(cid:202)(cid:195)(cid:195)(cid:196)(cid:196)(cid:200)(cid:195)(cid:193)(cid:196)(cid:199)(cid:201)(cid:198)(cid:197)(cid:200)(cid:200)(cid:198)(cid:201)(cid:193)(cid:200)
(cid:47)(cid:73)(cid:103)(cid:112)(cid:73)(cid:103)(cid:3)(cid:60)(cid:69)(cid:69)(cid:73)(cid:100)(cid:106)(cid:104)(cid:3)(cid:106)(cid:80)(cid:73)(cid:3)(cid:78)(cid:60)(cid:88)(cid:73)(cid:3)(cid:104)(cid:69)(cid:93)(cid:103)(cid:73)
(cid:23)(cid:93)(cid:93)(cid:79)(cid:89)(cid:73)(cid:3)
(cid:47)(cid:73)(cid:103)(cid:112)(cid:73)(cid:103)
Figure 2: Modifying traﬃc in Rock Hero to rank high in the
leader board.
use a standard HTTPS proxy to decrypt the traﬃc. Note
that the attacker would intentionally ignore and bypass any
certiﬁcate errors.
The game Rock Heroes uses Google’s leader board – it
sends the high score to Google’s server to update the leader
board using HTTPS. However, the gamer can use a proxy
to modify the traﬃc and set an arbitrary high score on the
leader board, as shown in Figure 2. Although Google claims
that they have protections for fake high score [20], we did
not observe the eﬀects of such protections. Instead, we were
able to conﬁrm at least three gamers who are hackers in the
leader board, as their scores are impossibly high. According
to our analysis, the variable for the in-game score is of type
Int32. However, Google’s submitScore API for their leader
board takes a score of type Int64. We have conﬁrmed that
the traﬃc was modiﬁed so that arbitrary scores under 263−1
can be successfully set. Most notably, and somewhat to
our surprise, the leader board already showed three other
instances of high scores equal to 263 − 1.
5.2.2 HTTPS with Additional Protections
A few game developers attempt to place additional barri-
ers so that gamers cannot use a proxy to hack them easily.
These techniques include certiﬁcate pinning to block unau-
thorized certiﬁcates and encrypting inside HTTPS payload
to block hackers from decrypting their HTTPS traﬃc. Cer-
tain games, such as Game of War, have their predeﬁned
valid certiﬁcate list hardcoded in the apk. If the signer of
a server certiﬁcate is not in this list, the game will refuse
to communicate. This approach can be somewhat eﬀective,
because it forces the hacker to investigate how to bypass
the certiﬁcate veriﬁcation. However, a knowledgeable and
more persistent hacker can still succeed. For example, we
were able to hook and override certain Java and Apache SSL
libraries to bypass these certiﬁcate veriﬁcations.
5.2.3 Message Signing
Besides using HTTPS (or SSL), some games sign their
messages in order to protect the integrity and authenticity
of the communication. The eﬀectiveness depends on how
well the signing key is protected. Typically for a multi-
391
(cid:20)(cid:22)(cid:22)(cid:25)(cid:19)(cid:20)(cid:3)(cid:38)(cid:82)(cid:76)(cid:81)(cid:86)
(cid:194)(cid:143)(cid:3)(cid:13)(cid:93)(cid:81)(cid:91)(cid:3)(cid:69)(cid:93)(cid:89)(cid:89)(cid:73)(cid:69)(cid:106)(cid:81)(cid:93)(cid:91)(cid:3)(cid:103)(cid:73)(cid:102)(cid:107)(cid:73)(cid:104)(cid:106)
(cid:195)(cid:143)(cid:3)(cid:13)(cid:93)(cid:81)(cid:91)(cid:3)(cid:69)(cid:93)(cid:89)(cid:89)(cid:73)(cid:69)(cid:106)(cid:81)(cid:93)(cid:91)(cid:3)(cid:103)(cid:73)(cid:104)(cid:100)(cid:93)(cid:91)(cid:104)(cid:73)
(cid:196)(cid:143)(cid:3)(cid:12)(cid:107)(cid:81)(cid:89)(cid:71)(cid:81)(cid:91)(cid:79)(cid:3)(cid:81)(cid:91)(cid:78)(cid:93)(cid:103)(cid:90)(cid:60)(cid:106)(cid:81)(cid:93)(cid:91)(cid:3)(cid:103)(cid:73)(cid:102)(cid:107)(cid:73)(cid:104)(cid:106)
(cid:20)(cid:23)(cid:28)(cid:25)(cid:19)(cid:20)(cid:3)(cid:38)(cid:82)(cid:76)(cid:81)(cid:86)
(cid:197)(cid:143)(cid:3)(cid:12)(cid:107)(cid:81)(cid:89)(cid:71)(cid:81)(cid:91)(cid:79)(cid:3)(cid:81)(cid:91)(cid:78)(cid:93)(cid:103)(cid:90)(cid:60)(cid:106)(cid:81)(cid:93)(cid:91)(cid:3)(cid:103)(cid:73)(cid:104)(cid:100)(cid:93)(cid:91)(cid:104)(cid:73)
(cid:24)(cid:33)(cid:4)(cid:13)(cid:3)(cid:3)(cid:31)(cid:73)(cid:115)
Figure 3: Debugging Dragon City to identify the HMAC
key.
(cid:47)(cid:81)(cid:79)(cid:91)(cid:3)(cid:106)(cid:80)(cid:73)(cid:3)(cid:100)(cid:60)(cid:69)(cid:88)(cid:73)(cid:106)(cid:3)(cid:113)(cid:81)(cid:106)(cid:80)(cid:3)(cid:106)(cid:80)(cid:73)(cid:3)(cid:103)(cid:73)(cid:69)(cid:93)(cid:112)(cid:73)(cid:103)(cid:73)(cid:71)(cid:3)(cid:88)(cid:73)(cid:115)
Figure 5: Army of Toys exchanges messages between server
and client to update the coin collection event. Developers
compute how many coins the gamer can collect in the server
and sends to the client to update the coins. Client also
updates building information from the server.
(cid:13)(cid:80)(cid:60)(cid:91)(cid:79)(cid:73)(cid:3)(cid:106)(cid:80)(cid:73)(cid:3)(cid:23)(cid:93)(cid:89)(cid:71)(cid:3)(cid:91)(cid:107)(cid:90)(cid:68)(cid:73)(cid:103)
Figure 4: We change the gold quantity and sign the modiﬁed
packet with the recovered key in Dragon City.
(cid:33)(cid:73)(cid:104)(cid:104)(cid:60)(cid:79)(cid:73)(cid:3)(cid:194)(cid:143)(cid:3)(cid:13)(cid:93)(cid:81)(cid:91)(cid:3)(cid:69)(cid:93)(cid:89)(cid:89)(cid:73)(cid:69)(cid:106)(cid:81)(cid:93)(cid:91)(cid:3)(cid:103)(cid:73)(cid:102)(cid:107)(cid:73)(cid:104)(cid:106)
(cid:48)(cid:13)(cid:43)(cid:3)(cid:100)(cid:60)(cid:115)(cid:89)(cid:93)(cid:60)(cid:71)(cid:3)
(cid:71)(cid:73)(cid:69)(cid:93)(cid:71)(cid:81)(cid:91)(cid:79)
player battle game such as Dragon City, an update from the
client to the server contains only the start state of the battle
state and the end result. The update message is protected
by an HMAC, such as SHA-256 HMAC. In other words, the
gold collecting result or battle result is computed exclu-
sively on the client side, so the server has no way to detect
a hack if the signature is faked. We decompiled the code
by dex2jar, but found that the important logic was inside
the native libraries. We tried to debug the native libraries
as follows. We ﬁrst used the command ‘ndk-which nm’ -
D -demangle libgame.so to list the memory addresses of
functions, then we identiﬁed the function for computing
packet signatures. Among the four libraries (libcocs2d.so,
libdc.so, libgnustl_shared.so and libhydra.so), we found
the hmac_sha256 function inside libhydra.so to be a strong
candidate. We veriﬁed our estimation by setting a stop point
at hmac_sha256 and recovered the parameters, as shown in
Figure 3. R0 and R1 are the static HMAC keys, R2 is the
request content, and R3 is the length of the packet. After
recovering the key, we tried to modify the coin number from
209 to 500 and signed the modiﬁed packet with the HMAC
key. As the signature was valid, the server sent a success
response and we updated a fake coin number. Similarly, we
can modify the game result with the recovered key, as is
shown in Figure 4.
5.2.4 Communicating using Customized Protocol
Besides HTTP/HTTPS, some apps also use customized
protocol to send data. Such traﬃc is harder to analyze than
that HTTP/HTTPS traﬃc because it is more ﬂexible; for
example, message format and encoding can be deﬁned by
the game developer. Moreover, games that send customized
encoded traﬃc usually use client-server sync as well, which
we will discuss in Section 5.5.
392
(cid:106)(cid:93)(cid:106)(cid:60)(cid:89)(cid:3)(cid:89)(cid:73)(cid:91)(cid:79)(cid:106)(cid:80)(cid:143)(cid:3)(cid:199)(cid:201)
(cid:106)(cid:93)(cid:106)(cid:60)(cid:89)
(cid:90)(cid:104)(cid:79)(cid:25)(cid:71)(cid:143)(cid:3)(cid:193)
(cid:104)(cid:73)(cid:104)(cid:104)(cid:81)(cid:93)(cid:91)(cid:143)(cid:3)
(cid:194)(cid:69)(cid:198)(cid:71)(cid:71)(cid:73)(cid:194)(cid:199)(cid:69)(cid:198)(cid:69)(cid:197)(cid:71)(cid:71)(cid:73)(cid:195)(cid:197)(cid:194)(cid:69)(cid:198)(cid:73)(cid:68)(cid:199)(cid:194)(cid:194)(cid:78)
(cid:197)(cid:196)(cid:197)(cid:199)(cid:193)(cid:60)
(cid:90)(cid:73)(cid:104)(cid:104)(cid:60)(cid:79)(cid:73)(cid:104)(cid:144)(cid:13)(cid:93)(cid:107)(cid:91)(cid:106)(cid:143)(cid:3)(cid:194)
(cid:90)(cid:73)(cid:104)(cid:104)(cid:60)(cid:79)(cid:73)(cid:3)(cid:106)(cid:115)(cid:100)(cid:73)(cid:143)(cid:3)
(cid:33)(cid:104)(cid:79)(cid:162)(cid:13)(cid:195)(cid:23)(cid:162)(cid:23)(cid:60)(cid:106)(cid:80)(cid:73)(cid:103)(cid:46)(cid:73)(cid:104)(cid:93)(cid:107)(cid:103)(cid:69)(cid:73)