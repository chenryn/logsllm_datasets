### 操作二：提高提交说明的质量提交说明是提高代码审查的利器，好的格式应该包含以下几个方面：-   **标题**，简明扼要地描述这个提交。这部分最好在 70    个字符之内，以确保在单行显示的时候能够显示完整。比如，在命令行常用的    git log \--oneline 输出结果要能显示完全。-   **详细描述**，包括提交的目的、选择这个方法的原因，以及实现细节的总结性描述。这三个方面的内容最能帮助审查者阅读代码。-   **测试情况**，描述的是你对这个提交做了什么样的测试验证，具体包括正常情况的输出、错误情况的输出，以及性能、安全等方面的专项测试结果。这部分内容，可以增加审查者对提交代码的了解程度以及信心。-   **与其他工具和系统相关的信息**，比如相关任务    ID、相关的冲刺（sprint，也可翻译为"迭代"）链接。这些信息对工具的网状互联提供基础信息，非常重要。这里还有一个 Git 的技巧是，**你可以使用 Git 的提交说明模板（CommitMessageTemplate），来帮助团队使用统一的格式**。比如，可以像下面这个例子一样，使用git config \--global commit.template 命令来设置模板。    
# 配置文件：提交说明模板文件 ~/.git_commit_msg.txt> cat .git_commit_msg.txt    Summary:  Test:  Task ID:  
# 设置上述文件为提交说明模板。> git config --global commit.template ~/.git_commit_msg.txt    
# 使用实例：之后 git commit 命令自动使用上述模板> git add app.js > git commit   Summary:  Test:  Task ID:  
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
## On branch master
# Your branch is up to date with 'origin/master'.
## Changes to be committed:
#       modified通过制定严格的提交说明格式来规范其质量，可以方便审查者查理解被审查代码的意图、实现思路，并通过测试情况，加快对代码的理解，提高对代码质量的信心，从而大大提高审查者的效率。同时，严格的提交说明格式及好的说明质量也可以督促开发者提高代码质量。所以说，它是一个简单、直观且有效的代码审查落地实践。下面，我就给出一个之前我在一个公司逐步提高提交说明要求的一个具体例子，供你参考。当时的情况是，大家的提交说明非常简短，很多只包含一句话。比如，功能提交常常写个"实现A、B 功能"；Bug修复提交则更简单，通常就三个字母"Fix"。针对这个情况，我采取了以下三个步骤：**第一步**，规定提交说明一定要包括标题、描述和测试情况三部分，但暂时还不具体要求必须写多少字。比如，测试部分可以简单写一句"没有做测试"，但一定要写。如果格式不符合要求，审查者就直接打回。这个格式要求工作量很小，比较容易做到，两个星期后整个团队就习惯了。虽然只是在提交说明里增加了简单描述，也已经为审查者和后续工作中进行问题排查提供一些必要信息，所以大家也比较认可这个操作。**第二步**，要求提交说明必须详细写明测试情况。如果没有做测试一定要写出具体理由，否则会被直接打回。这样做，不但为审查者提供了方便，还促进了开发人员的自测。整个团队在一个多月后，也养成了详细描述测试情况的习惯。**第三步**，逐步要求提交的原子性。我要求每一个提交要在详细描述部分描述具体实现了哪些功能。如果一个提交同时实现了多个功能，那就必须解释为什么不能拆开提交；如果解释不合理的话，提交直接被打回。这一步实施起来比较困难，原因包括大家对功能拆分不习惯或者不熟悉、对 Git操作不熟悉。针对这些问题，我通过内部培训来提高团队的 Git能力。同时，我先在一个小团队内集中精力实践提交的原子性，通过我的直接参与来快速提高这个小团队的能力。然后，再让这个团队帮助其他团队提高。大概三个月以后，整个团队在提交原子性方面提高了很多，代码审查也就真正有效地做起来了。可以看到，在这个过程中，提交说明起到了抓手的作用，有效地帮助团队推进开发自测，以及提高代码原子性。好了，以上内容就是成功推进代码审查的两个关键操作，即提高提交的原子性，以及使用提交说明做抓手。最后，我们再来看看成功推行代码审查在文化方面的两个原则。