            }
            if (this.label != null) {
                this.addParameter("label", this.findString(this.label));
            } else if (providedLabel != null) {
                this.addParameter("label", providedLabel);
            }
            if (this.labelSeparator != null) {
                this.addParameter("labelseparator", this.findString(this.labelSeparator));
            }
            if (this.labelPosition != null) {
                this.addParameter("labelposition", this.findString(this.labelPosition));
            }
            if (this.requiredPosition != null) {
                this.addParameter("requiredPosition", this.findString(this.requiredPosition));
            }
            if (this.errorPosition != null) {
                this.addParameter("errorposition", this.findString(this.errorPosition));
            }
            if (this.requiredLabel != null) {
                this.addParameter("required", this.findValue(this.requiredLabel, Boolean.class));
            }
            if (this.disabled != null) {
                this.addParameter("disabled", this.findValue(this.disabled, Boolean.class));
            }
            if (this.tabindex != null) {
                this.addParameter("tabindex", this.findString(this.tabindex));
            }
            if (this.onclick != null) {
                this.addParameter("onclick", this.findString(this.onclick));
            }
            if (this.ondblclick != null) {
                this.addParameter("ondblclick", this.findString(this.ondblclick));
            }
            if (this.onmousedown != null) {
                this.addParameter("onmousedown", this.findString(this.onmousedown));
            }
            if (this.onmouseup != null) {
                this.addParameter("onmouseup", this.findString(this.onmouseup));
            }
            if (this.onmouseover != null) {
                this.addParameter("onmouseover", this.findString(this.onmouseover));
            }
            if (this.onmousemove != null) {
                this.addParameter("onmousemove", this.findString(this.onmousemove));
            }
            if (this.onmouseout != null) {
                this.addParameter("onmouseout", this.findString(this.onmouseout));
            }
            if (this.onfocus != null) {
                this.addParameter("onfocus", this.findString(this.onfocus));
            }
            if (this.onblur != null) {
                this.addParameter("onblur", this.findString(this.onblur));
            }
            if (this.onkeypress != null) {
                this.addParameter("onkeypress", this.findString(this.onkeypress));
            }
            if (this.onkeydown != null) {
                this.addParameter("onkeydown", this.findString(this.onkeydown));
            }
            if (this.onkeyup != null) {
                this.addParameter("onkeyup", this.findString(this.onkeyup));
            }
            if (this.onselect != null) {
                this.addParameter("onselect", this.findString(this.onselect));
            }
            if (this.onchange != null) {
                this.addParameter("onchange", this.findString(this.onchange));
            }
            if (this.accesskey != null) {
                this.addParameter("accesskey", this.findString(this.accesskey));
            }
            if (this.cssClass != null) {
                this.addParameter("cssClass", this.findString(this.cssClass));
            }
            if (this.cssStyle != null) {
                this.addParameter("cssStyle", this.findString(this.cssStyle));
            }
            if (this.cssErrorClass != null) {
                this.addParameter("cssErrorClass", this.findString(this.cssErrorClass));
            }
            if (this.cssErrorStyle != null) {
                this.addParameter("cssErrorStyle", this.findString(this.cssErrorStyle));
            }
            if (this.title != null) {
                this.addParameter("title", this.findString(this.title));
            }
            if (this.parameters.containsKey("value")) {
                this.parameters.put("nameValue", this.parameters.get("value"));
            } else if (this.evaluateNameValue()) {
                Class valueClazz = this.getValueClassType();
                if (valueClazz != null) {
                    if (this.value != null) {
                        this.addParameter("nameValue", this.findValue(this.value, valueClazz));
                    } else if (name != null) {
                        String expr = this.completeExpressionIfAltSyntax(name);
                        this.addParameter("nameValue", this.findValue(expr, valueClazz));
                    }
                } else if (this.value != null) {
                    this.addParameter("nameValue", this.findValue(this.value));
                } else if (name != null) {
                    this.addParameter("nameValue", this.findValue(name));
                }
            }
            Form form = (Form)this.findAncestor(Form.class);
            this.populateComponentHtmlId(form);
            if (form != null) {
                this.addParameter("form", form.getParameters());
                if (name != null) {
                    List tags = (List)form.getParameters().get("tagNames");
                    tags.add(name);
                }
            }
            if (this.tooltipConfig != null) {
                this.addParameter("tooltipConfig", this.findValue(this.tooltipConfig));
            }
            if (this.tooltip != null) {
                this.addParameter("tooltip", this.findString(this.tooltip));
                Map tooltipConfigMap = this.getTooltipConfig(this);
                if (form != null) {
                    form.addParameter("hasTooltip", Boolean.TRUE);
                    Map overallTooltipConfigMap = this.getTooltipConfig(form);
                    overallTooltipConfigMap.putAll(tooltipConfigMap);
                    Iterator i$ = overallTooltipConfigMap.entrySet().iterator();
                    while(i$.hasNext()) {
                        Object o = i$.next();
                        Entry entry = (Entry)o;
                        this.addParameter((String)entry.getKey(), entry.getValue());
                    }
                } else {
                    LOG.warn("No ancestor Form found, javascript based tooltip will not work, however standard HTML tooltip using alt and title attribute will still work");
                }
                String jsTooltipEnabled = (String)this.getParameters().get("jsTooltipEnabled");
                if (jsTooltipEnabled != null) {
                    this.javascriptTooltip = jsTooltipEnabled;
                }
                String tooltipIcon = (String)this.getParameters().get("tooltipIcon");
                if (tooltipIcon != null) {
                    this.addParameter("tooltipIconPath", tooltipIcon);
                }
                if (this.tooltipIconPath != null) {
                    this.addParameter("tooltipIconPath", this.findString(this.tooltipIconPath));
                }
                String tooltipDelayParam = (String)this.getParameters().get("tooltipDelay");
                if (tooltipDelayParam != null) {
                    this.addParameter("tooltipDelay", tooltipDelayParam);
                }
                if (this.tooltipDelay != null) {
                    this.addParameter("tooltipDelay", this.findString(this.tooltipDelay));
                }
                if (this.javascriptTooltip != null) {
                    Boolean jsTooltips = (Boolean)this.findValue(this.javascriptTooltip, Boolean.class);
                    this.addParameter("jsTooltipEnabled", jsTooltips.toString());
                    if (form != null) {
                        form.addParameter("hasTooltip", jsTooltips);
                    }
                    if (this.tooltipCssClass != null) {
                        this.addParameter("tooltipCssClass", this.findString(this.tooltipCssClass));
                    }
                }
            }
            this.evaluateExtraParams();
        }
在该函数中的if....else判断语句之外还调用了populateComponentHtmlId方法，之后更进去查看一番：  
之后跟进findStringIfAltSyntax，此时的altSyntax默认为true，所以执行findString(expr)，感觉是不是和之前的第一次解析有点像呢？  
之后继续跟进，发现回去调用findValue()，这里的this为Anchor，和第一次表达式解析完全相同，我们这里还是继续跟进一下吧：  
之后调用containsExpression(expr):  
满足条件返回true，所以再一次的调用了TextParseUtil.translateVariables：  
之后和第一次表达式解析一样一直往下面跟，最后来到org\apache\struts\struts2-core\2.5.16\struts2-core-2.5.16.jar!\com\opensymphony\xwork2\util\OgnlTextParser.class的evaluate方法中，在这里依旧会执行一次表达式解析，不过和第一次不一样的是var的值从id变为了8
_8，而结果o也从%{8_ 8}变为了64，从而导致OGNL表达式二次解析：  
## 文末小结
每次Struts2被爆出新的安全漏洞时，都会包含新的OGNL表达式代码执行点和对Struts2沙盒加强防护的绕过，所以每一轮补丁除了修复OGNL表达式的执行点，也会再次强化沙盒，补丁主要通过struts-default.xml来限制OGNL使用到的类和包，以及修改各种Bean函数的访问控制符来实现，在Struts2.5.22的Struts-default.xml中可以看到在这里限制java.lang.Class,
java.lang.ClassLoader，java.lang.ProcessBuilder这几个类访问，导致漏洞利用时无法使用构造函数、进程创建函数、类加载器等方式执行代码，同时也限制com.opensymphony.xwork2.ognl这个包的访问，导致漏洞利用时无法访问和修改_member_access，context等变量，具体如下所示：
关于其绕过(S2-061)的分析后期再找时间献上~
## 安全建议
升级到struts最新版本
## 参考链接