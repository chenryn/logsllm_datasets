法也是有用的。它是一-个有效的寻找循环转换机会的工具。在本节中，我们描述了三种在单处
据局部性所带来的损失。
能降低。在带有公共内存总线的多处理器系统的背景下，对总线的竞争会进一步加剧低劣的数
相关。高速缓存中的脱靶可能要花费几十个时钟周期，因此高速缓存的高脱靶率会使处理器性
最后，时间分划不等式如下，其中c;dc2d和e2为未知量:
数组收缩优化给出了另一个在存储和并行性之间进行折衷处理的例子。这种折衷方案首先
因此，即使我们的目标是优化顺序执行，使用并行化技术找出这些相关的运算并把它们放到
仿射分划算法把所有相互依赖的运算放到一起。通过串行执行这些分划，我们提高了计算
3）除了提高计算结果的时间局部性，我们也需要优化计算结果的空间局部性，同时优化只
 2）数组收缩(array contraction)技术降低了一个数组的维度，且降低了被访问内存位置的数
1）我们试图在计算结果生成之后尽快地使用它们，以提高计算结果的时间局部性。提高时
我们将看到，即使我们只是希望提高单处理器系统的数据局部性，用于并行化的仿射分划算
560
不管一个处理器是不是某个多处理器系统的一部分，它的性能和它的高速缓存的行为密切
2）对于情况②，即=i且
a)源程序
a)源程序
图11-63把内层循环的4 个实例交织执行
图 11-64交织语句的转换
for (ii=0; ii
for (i=ii; i
b)转换得到的代码
b)转换后的代码
563
也
分
---
## Page 580
执行时，我们需要把变量 AP、AM、T扩展为数组，以便一次存放B 个结果。
交织内层循环，得到图11-67中的代码。请注意，当我们把来自下标为的循环的 B个迭代交错
兴趣的是交织执行来自一个具有连续i值的分划块中的对 DW的运算。
间局部性，而下标为k的循环具有组复用性。下标为k的循环已经是最内层循环了，因此我们感
k+1,j,订的空间局部性很差。根据11.5 节中讨论的复用分析可知，下标变量为的循环具有空
我们观察到，图11-62 的代码的最内层循环中的引用 DW[1,k,j,]、DW[1,k-1,j,]和 DW[1,
例11.70
的原执行顺序，而是按照图11-65b 中显示的顺序执行。
我们应用这个转换来交织这个循环中的语句，得到图11-66 中的代码，然后应用这个转换来
我们使用s;(j)来表示语句s在第j个选代中的运行。代码的执行不是按照图 11-65a中显示
564
图 11-66对图 11-23 的代码进行分划、数组收缩、内层循环交错和分块后所得的部分代码
我们现在回到多网格的例子，说明如何利用外层并行循环的选代之间的数据复用。
for （j = 2， j (
G
(0):
for (ii
a)原来的顺序
$2(0),
:
for
for
(i = ii; i <= min(ii+b-1,il);i++)
(i = ii; i <= min(ii+b-1,il);i++){
AP[ib] 
9
图11-65