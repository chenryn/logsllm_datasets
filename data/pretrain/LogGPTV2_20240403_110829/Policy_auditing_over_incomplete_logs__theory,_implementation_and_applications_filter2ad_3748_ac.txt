below. This function relies on a given function sat(L, P )
that computes the set of substitutions σ such that L |= P σ.
The latter function is application-dependent, as described in
= {•}
= {}
Section 4.(cid:100)sat(L, p(t1, . . . , tn)) = sat(L, p(t1, . . . , tn))
(cid:100)sat(L,(cid:62))
(cid:100)sat(L,⊥)
= (cid:83)
(cid:100)sat(L, c1 ∧ c2)
σ∈(cid:99)sat(L,c1) σ +(cid:100)sat(L, c2σ)
= (cid:100)sat(L, c1) ∪(cid:100)sat(L, c2)
(cid:100)sat(L, c1 ∨ c2)
(cid:100)sat(L,∃x.c)
= (cid:100)sat(L, c)\{x}
For atoms, the deﬁnition of (cid:100)sat coincides with that of
sat. Since (cid:62) must always be true, (cid:100)sat(L,(cid:62)) contains only
satisﬁed, (cid:100)sat(L,⊥) is empty (denoted {}). For c1 ∧ c2,
the empty substitution (denoted •). Since ⊥ can never be
(x fresh)
the set of satisfying instances is obtained by taking those of
reduce(L, P )
=
 (cid:62) if L(P ) = tt
⊥ if L(P ) = ff
if L(P ) = uu
P
reduce(L,(cid:62))
reduce(L,⊥)
reduce(L, ϕ1 ∧ ϕ2)
reduce(L, ϕ1 ∨ ϕ2)
= (cid:62)
= ⊥
= reduce(L, ϕ1) ∧ reduce(L, ϕ2)
= reduce(L, ϕ1) ∨ reduce(L, ϕ2)
reduce(L,∀(cid:126)x.(c ⊃ ϕ)) = let{σ1, . . . , σn} ←(cid:100)sat(L, c)
i=1
{(cid:126)ti ← σi((cid:126)x)}n
S ← {(cid:126)t1, . . . , (cid:126)tn}
{ψi ← reduce(L, ϕ[(cid:126)ti/(cid:126)x])}n
ψ(cid:48) ← ∀(cid:126)x.((c ∧ (cid:126)x (cid:54)∈ S) ⊃ ϕ)
return
ψ1 ∧ . . . ∧ ψn ∧ ψ(cid:48)
i=1
reduce(L,∃(cid:126)x.(c ∧ ϕ)) = let{σ1, . . . , σn} ←(cid:100)sat(L, c)
i=1
{(cid:126)ti ← σi((cid:126)x)}n
S ← {(cid:126)t1, . . . , (cid:126)tn}
{ψi ← reduce(L, ϕ[(cid:126)ti/(cid:126)x])}n
ψ(cid:48) ← ∃(cid:126)x.((c ∧ (cid:126)x (cid:54)∈ S) ∧ ϕ)
return
ψ1 ∨ . . . ∨ ψn ∨ ψ(cid:48)
i=1
Figure 1: Deﬁnition of reduce(L, ϕ)
c1 (denoted σ above), and conjoining those with satisfying
instances of c2σ (the operation σ + Σ appends σ to every
substitution in Σ). The set of satisfying instances of c1 ∨ c2
is the union of the satisfying instances of c1 and c2. Satisfy-
ing instances of ∃x.c are obtained by taking those of c, and
removing the substitutions for x (Σ\{x} removes x from the
domain of every substitution in Σ).
Example 3.1. We illustrate iterative audit on the policy
ϕpol from Example 2.1. For notational convenience, let (cid:126)x
denote the sequence of variables p1, p2, m, u, q, t, τ and de-
ﬁne c((cid:126)x) and ϕ((cid:126)x) by pattern matching as the restriction
and formula satisfying ϕpol = ∀(cid:126)x. c((cid:126)x) ⊃ ϕ((cid:126)x). Intuitively,
ϕ(p1, p2, m, u, q, t, τ ) is the formula that must be satisﬁed if
p1 sends to p2 the message m at time τ and m is tagged
as containing attribute t about principal q for purpose u.
Further, deﬁne ϕ2 and ϕ3 by pattern matching as follows:
ϕ((cid:126)x) = attr in(t, phi) ∨ ϕ2(p2, q, τ, u) ∨ ϕ3(τ, q, p1, p2, t).
Consider a structure L with the following information:
(1) Alice sends to Bob the message M at time 4, tagged as
time 2. This information implies that (cid:100)sat(L, c((cid:126)x)) = {σ},
containing information about Charlie’s address for the pur-
pose of billing, (2) Charlie authorized this transmission at
where σ = [(cid:126)x (cid:55)→ (Alice, Bob, M, billing, Charlie, address, 4)].
Applying the deﬁnition of reduce, we obtain reduce(L, ϕpol) =
ψ1 ∧ ϕ(cid:48)
pol = ∀(cid:126)x. (c((cid:126)x)
∧ (cid:126)x (cid:54)∈ {σ}) ⊃ ϕ((cid:126)x).
pol where ψ1 = reduce(L, ϕ((cid:126)x)σ) and ϕ(cid:48)
Since ϕ((cid:126)x) is a disjunction of three formulas, the third of
which is ϕ3(τ, q, p1, p2, t), ψ1 is also a disjunction of three
formulas, the third of which is reduce(L, ϕ3(τ, q, p1, p2, t)σ).
It can easily be shown using (2) that this third disjunct is (cid:62),
so ψ1 also simpliﬁes to (cid:62). This indicates that there is no vi-
olation of the policy so far, which should be intuitively clear
from the description of the structure L and an inspection of
the policy ϕpol. Succinctly, we have reduce(L, ϕpol) = ϕ(cid:48)
pol.
Next, consider an extension L(cid:48) which adds new informa-
tion: (3) Alice sends to Bob a message M(cid:48) at time 5, tagged
as containing Dan’s lab report for the purpose of surgery,
(4) L(cid:48)(consents(Dan, a, τ(cid:48))) = ff for every action a and
every time τ(cid:48) (in particular, Dan has not consented to Al-
ice’s transmission), and (5) L(cid:48)(doctorOf(Bob, Dan, 5)) = ff
(so Bob is not Dan’s doctor at time 5). Then, the restric-
c((cid:126)x) ∧ (cid:126)x (cid:54)∈ {σ} satisﬁes (cid:100)sat(L(cid:48), c(cid:48)((cid:126)x)) = {σ(cid:48)}, where σ(cid:48) =
tion in the top-level universal quantiﬁer of ϕ(cid:48)
pol, i.e., c(cid:48)((cid:126)x) =
[(cid:126)x (cid:55)→ (Alice, Bob, M(cid:48), surgery, Dan, labreport, 5)]. Hence,
reduce(L(cid:48), ϕ(cid:48)
pol, where ψ2 = reduce(L(cid:48), ϕ((cid:126)x)σ(cid:48))
and ϕ(cid:48)(cid:48)
pol enforces the policy on transmissions other than the
two already considered. Calculation using (4) and (5) yields
ψ2 = attr in(labreport, phi), meaning that Alice’s trans-
mission of Bob’s record satisﬁes the policy only if labreport
is not a form of phi (protected health information). The
same conclusion may also be expected from an informal in-
spection of the policy.
pol) = ψ2 ∧ ϕ(cid:48)(cid:48)
Reporting Causes of Policy Violations. From what
we have presented so far, it may appear that the output
of reduce(L, ϕ) can only say that there has been a policy
violation but cannot indicate which instances of quantiﬁers
in ϕ have led to the violation. For instance, consider the
policy ϕpol = ∀(cid:126)x. (c((cid:126)x) ⊃ ϕ((cid:126)x)) deﬁned in the beginning
of Example 3.1.
If c((cid:126)a) is true for some instance (cid:126)a of (cid:126)x
on structure L, but ϕ((cid:126)a) is false, then reduce(L, ϕpol) will
evaluate to ⊥, indicating a violation of the policy. However,
this output does not indicate the instance (cid:126)a which actually
causes the violation.
Violating instances of a policy can be reported in the out-
put of reduce by slightly rewriting the policy formula (but
without changing the the reduce algorithm). The idea is
straightforward and easily illustrated with the example of
ϕpol. Consider a new predicate violated((cid:126)x) which means
that the list of terms (cid:126)x causes a violation of the policy ϕpol.
Further, and importantly, assume that violated is unin-
terpreted, i.e., for all (cid:126)t, L(violated((cid:126)t)) = uu (in our im-
plementation, we call such uninterpreted predicates subjec-
tive or SUBJ; see Section 4). Consider the revised policy
pol = ∀(cid:126)x.(c((cid:126)x) ⊃ (violated((cid:126)x) ∨ ϕ((cid:126)x))). Intuitively, ϕ(cid:48)
ϕ(cid:48)
pol
says that for all instances (cid:126)a of (cid:126)x, if c((cid:126)a) is true, then ei-
ther (cid:126)a violates the policy or ϕ((cid:126)a) is true. This is also the
intended meaning of ϕpol, so replacing it with ϕ(cid:48)
pol does
not change the meaning of the policy itself. However, when
reduce is executed on ϕ(cid:48)
pol instead of ϕpol, the top-level of
the output contains violated( (cid:126)a1) ∧ . . . ∧ violated( (cid:126)an),
where (cid:126)a1, . . . , (cid:126)an are exactly those instances of (cid:126)x for which
c is true and ϕ is false. So, all instances of the quantiﬁer (cid:126)x
that cause policy violation can be read from the output of
reduce on the revised policy ϕ(cid:48)
pol. The technique illustrated
by this example generalizes easily; any quantiﬁed formula
(either universal or existential) can be modiﬁed by adding
a new uninterpreted predicate to cause reduce to report all
instances of quantiﬁed variables that violate the formula.
3.2 Properties of the Audit Algorithm
The function reduce is partially
Partial Correctness.
correct: If reduce(L, ϕ) = ψ, then in all extensions of L, ϕ
and ψ are logically equivalent.
Theorem 3.2 (Partial correctness of reduce). If reduce(L, ϕ)
= ψ and L ≤ L(cid:48), then (1) L(cid:48) |= ϕ iﬀ L(cid:48) |= ψ and (2) L(cid:48) |= ϕ
iﬀ L(cid:48) |= ψ.
L1−−→ ϕ1 . . .
Partial correctness of iterative audit is an immediate corol-
lary of Theorem 3.2. We can prove by induction on n that
Ln−−→ ϕn, then for all structures L(cid:48) satisfying
if ϕ0
Ln ≤ L(cid:48), L(cid:48) |= ϕn iﬀ L(cid:48) |= ϕ0 and L(cid:48) |= ϕn iﬀ L(cid:48) |= ϕ0.
Let (cid:96) ϕ mean that ϕ passes the mode check.
Totality.
The following theorem states that reduce is deﬁned on every
such ϕ and, further, that the output also passes the mode
check.
Theorem 3.3 (Totality of reduce). If (cid:96) ϕ then there is a ψ
such that reduce(L, ϕ) = ψ and (cid:96) ψ.
The function reduce(L, ϕ) can be imple-
Complexity.
mented using auxiliary space polynomial in the size of the
formula ϕ, and in time polynomial in the maximum num-
ber of substitutions returned by sat (denoted |L|) where
the degree of the polynomial is proportional to the size of
the formula ϕ. This analysis assumes that computation of
each output returned by sat takes unit time which, in turn
means that ﬁnding a single row in a system log and reading
it takes unit time. In practice, |L| is bounded by the size of
the system logs, so the execution time of reduce for a ﬁxed
policy is polynomial in the size of the system logs.
Theorem 3.4 (Complexity of reduce). Assuming that com-
puting each output returned by sat takes unit time, the algo-
rithm reduce(L, ϕ) lies in the intersection of the complexity
classes TIME(|L|O(|ϕ|)) and PSPACE(|ϕ|).
If reduce(L, ϕ) = ψ then ψ is minimal with
Minimality.
respect to ϕ and L, i.e., an atom occurs in ψ only if it occurs
in ϕ and its valuation in L is unknown. Unfortunately, owing
to quantiﬁcation, there is no standard deﬁnition of the set of
atoms of a formula of ﬁrst-order logic. In the following, we
provide one natural deﬁnition of the atoms of a formula and
characterize minimality with respect to it. For a formula ϕ
that passes the mode check, we deﬁne the set of atoms of ϕ
with respect to a structure L as follows.
atoms(L, P )
atoms(L,(cid:62))
atoms(L,⊥)
atoms(L, ϕ1 ∧ ϕ2)
atoms(L, ϕ1 ∨ ϕ2)
atoms(L,∀(cid:126)x.(c ⊃ ϕ)) = (cid:83)
atoms(L,∃(cid:126)x.(c ∧ ϕ)) = (cid:83)
= {P}
= {}
= {}
= atoms(L, ϕ1) ∪ atoms(L, ϕ2)
= atoms(L, ϕ1) ∪ atoms(L, ϕ2)
σ∈(cid:99)sat(L,c) atoms(L, ϕσ)
σ∈(cid:99)sat(L,c) atoms(L, ϕσ)
Theorem 3.5 (Minimality). If (cid:96) ϕ and reduce(L, ϕ) = ψ,
then atoms(L, ψ) ⊆ atoms(L, ϕ) ∩ {P | L(P ) = uu}.
4.
IMPLEMENTATION
We have implemented the iterative algorithm reduce(L, ϕ)
described in Section 3 as well as the mode analysis on for-
mulas. The implementation is written in Standard ML.
This section describes the implementation of reduce(L, ϕ)
and syntax-directed optimizations on it. Section 5 reports
on the implementation’s experimental evaluation.
4.1 Application-Speciﬁc Structures
Our implementation of reduce closely follows its abstract
deﬁnition from Section 3.1. The implementation must be in-
stantiated for a speciﬁc application by providing enough in-
formation to deﬁne a structure L, speciﬁcally, the two func-
tions sat(L, P ) and L(P ), on which reduce relies. This infor-
mation includes audit logs (e.g., transmission or access logs)
and relevant system databases (e.g., the roles database), and
is structured into ﬁve diﬀerent components that we describe
next. Later, we describe how these four components are
used to deﬁne sat(L, P ) and L(P ).
First, the implementation of reduce must be told how each
predicate is veriﬁed. This is called the category of the pred-
icate, and is provided to the implementation through a ﬁle
in a custom syntax. Our current implementation supports
the following three common categories, but can be extended
modularly to include other forms of veriﬁcation if needed.
A. DB (Database): The predicate maps directly to a ta-
ble in a relational database and is computed by looking
up the table. The name of the table and the column
name corresponding to each argument of the predicate
must also be provided. We assume that audit logs are
also represented as database tables, so predicates cor-
responding to these logs (e.g., send from Example 2.1)
are also in the category DB.
B. EVAL (Evaluable): The predicate is veriﬁed through a
given computable function (e.g., mult(x, y, z) meaning
x = yz would lie in this category).
C. SUBJ (Subjective): The predicate has no mechanized
deﬁnition; it is checked by a human auditor.
To illustrate, the predicates send and consents in Exam-
ple 2.1 are DB because they correspond to tables in the