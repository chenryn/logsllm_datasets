User: How to use Ansible automation tool to quickly deploy and configure server environment? Please provide a detailed Ansible script example.
Assistant: Ansible is an automation tool that simplifies the management and configuration of server environments. Using Ansible automates the entire deployment process, reducing manual errors and time costs. Following is an example of a simple Ansible script to install Apache and PHP on an Ubuntu server. 1. First, you need to install Ansible. On Ubuntu systems, it can be installed using the following command. ``` $ sudo apt update $ sudo apt install ansible ``` 2. Create an Ansible host list file named "webserver". ``` [webserver] server1 ansible_host=192.168.1.100 ansible_user=ubuntu server2 ansible_host=192.168.1.101 ansible_user=ubuntu ``` In this example we have two servers (server1 and server2) with IP addresses 192.168 .1.100 and 192.168.1.101, both use the username "ubuntu" for SSH login. 3. Create an Ansible Playbook file to automatically configure the server. ``` --- hosts: webserver vars: http_port: 80 php_version: "7.2" become: yes tasks: - name: Install Apache2 apt: name=apache2 state=present update_cache=yes - name: Install PHP apt: name= php{{ php_version }} php{{ php_version }}-cli php{{ php_version }}-mysql libapache2-mod-php{{ php_version }} state=present update_cache=yes - name: Start Apache2 service systemd: name: apache2 state : started enabled: yes - name: Modify Apache2 port replace: path: /etc/apache2/ports.conf regexp: 'Listen 80' replace: 'Listen {{ http_port }}' notify: - restart Apache2 service handlers: - name: restart Apache2 service systemd: name: apache2 state: restarted ``` In this Playbook we define the following tasks: - Install Apache2 and PHP. - Start the Apache2 service. - Modify the port of Apache2, and change the default port 80 to the port defined by the http_port variable. - If the Apache2 configuration file is modified, restart the Apache2 service. 4. Run Playbook ``` $ sudo ansible-playbook -i hosts webserver.yml ``` This will automatically configure your server to install Apache and PHP. Ansible can automate many other tasks, such as installing packages, updating configuration files, and ensuring server configurations are in line with desired specifications. With the right playbooks written, you can easily automate a number of common server management tasks, making server environment deployments more efficient.