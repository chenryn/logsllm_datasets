# 十三、持续交付 ECS 应用
**持续交付**是为发布软件创建一个可重复且可靠的流程的实践，这样您就可以以更低的成本和风险频繁地按需将新功能部署到生产中。采用连续交付有许多好处，今天，越来越多的组织正在采用它，以更快地将功能推向市场，提高客户满意度，并降低软件交付成本。
实现连续交付需要软件交付端到端生命周期的高度自动化。到目前为止，在本课程中，您已经使用了许多支持自动化和持续交付的技术。例如，Docker 固有地带来高度自动化，并促进可重复和一致的构建过程，所有这些都是持续交付的关键组成部分。`todobackend`存储库中的 make 工作流更进一步，为 Docker 映像自动执行完整的测试、构建和发布工作流。在本课程中，我们还广泛使用了 CloudFormation，它为我们提供了以完全自动化的方式创建、更新和销毁完整 AWS 环境的能力，并允许我们以可靠和一致的方式轻松部署新功能(以新 Docker 映像的形式)。持续交付将所有这些特性和功能结合在一起，为软件变更的交付创建了一个端到端的过程，从开发和提交源代码到回归测试和部署到生产。为了实现这种级别的端到端编排和自动化，我们需要采用为此目的而设计的新工具，AWS 提供了许多协同工作来实现这一点的服务，包括 AWS 代码管道、代码构建和云信息。
在本章中，您将学习如何实现端到端连续交付管道(使用代码管道、代码构建和云信息)，该管道将持续测试、构建和发布 Docker 映像，然后将您新构建的 Docker 映像持续部署到非生产环境中。该管道还将通过自动创建变更集来支持生产环境中的受控发布，这些变更集在将新变更部署到生产环境之前必须经过审查和批准。
本章将涵盖以下主题:
*   介绍代码管道和代码构建
*   创建自定义代码构建容器
*   向应用存储库添加代码构建支持
*   使用代码管道创建连续集成管道
*   使用代码管道创建持续部署管道
*   持续将您的应用交付到生产环境中
# 技术要求
下面列出了完成本章的技术要求:
*   对 AWS 帐户的管理员访问权限。
*   根据第 3 章中的说明配置的本地 AWS 配置文件。
*   AWS 命令行界面版本 1.15.71 或更高版本
*   本章继续第 12 章，因此它要求您已成功完成第 12 章中定义的所有配置任务。
*   本章要求您将`todobackend`和`todobackend-aws`存储库发布到您拥有管理权限的 GitHub 帐户。
以下 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch13](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch13)
查看以下视频，了解《行动守则》:
[http://bit.ly/2BVGMYI](http://bit.ly/2BVGMYI)
# 介绍代码管道和代码构建
**CodePipeline** 和 **CodeBuild** 是 AWS 开发人员工具组合中的两项服务，与我们在本书中广泛使用的 CloudFormation 服务一起，为创建完整和全面的持续交付解决方案提供了构建模块，从而为您的应用从开发到生产铺平了道路。
CodePipeline 允许您创建复杂的管道来获取应用的源代码、构建、测试和发布应用工件，然后将应用部署到非生产和生产环境中。这些管道的顶层构建块是阶段，必须始终从包含管道的一个或多个源材料的源阶段开始，例如应用的源代码存储库。然后，每个阶段都可以由一个或多个动作组成，这些动作会产生一个工件，稍后可以在您的管道中使用，或者实现期望的结果，例如部署到环境中。您可以按顺序或并行定义动作，这允许您编排几乎任何您想要的场景；例如，我使用 CodePipeline 以一种高度可控的方式编排了完整、复杂、多应用环境的部署，这种方式易于可视化和管理。
每个 CodePipeline 管道都必须定义至少两个阶段，我们最初会看到一个这样的例子，当我们创建一个连续的集成管道时，包括一个源阶段(从源代码存储库中收集应用源代码)和一个构建阶段(从源阶段收集的应用源中测试、构建和发布应用工件)。
这里需要理解的一个重要概念是工件的概念。代码管道中的许多动作消耗输入工件并产生输出工件，一个动作消耗前一个动作的输出的能力是代码管道如何工作的本质。
例如，下图说明了我们将创建的初始连续集成管道:
![](img/27880320-80ab-4e17-8106-8fc29ba82459.png)
Continuous integration pipeline
在上图中，**源阶段**包括一个链接到 todobackend 和 GitHub 存储库的单个**源操作**。每当将更改提交到您的 GitHub 存储库中时，此操作将下载最新的源代码，并将生成一个输出工件，该工件将压缩您的源代码，并使其可用于随后的构建阶段。**构建阶段**有一个单独的**构建动作**，它将您的源动作输出工件作为输入，然后测试、构建和发布 Docker 映像。上图中的**构建操作**由 AWS CodeBuild 服务执行，该服务是一个完全托管的构建服务，提供基于容器的构建代理，用于按需运行构建作业。代码管道确保向代码构建构建作业提供一个包含应用源代码的输入工件，这允许代码构建运行您的本地测试、构建和发布工作流。
到目前为止，我们已经讨论了代码管道中源代码和构建阶段的概念；您将在管道中使用的另一个常见阶段是部署阶段，在这个阶段，您将应用工件部署到目标环境中。下图说明了如何扩展上图中所示的管道来持续部署应用:
![](img/a2ac7b82-63b4-4d97-a803-2126e603a611.png)
Continuous deployment pipeline
在上图中，增加了一个新的阶段(称为**开发阶段**)；它利用 CodePipeline 与 CloudFormation 的集成，将您的应用部署到非生产环境中，我们称之为开发(dev)。因为我们使用 cloud information 进行部署，所以我们需要提供一个 cloud information 栈来进行部署，这是通过在源阶段添加 todobackend 存储库作为另一个源操作来实现的。**部署动作**还需要另一个输入工件，它定义了要部署的 Docker 映像的标签，并且在构建阶段作为 CodeBuild 构建动作的输出工件(称为`ApplicationVersion`)提供。如果现在这没有太大意义，不要担心；我们将在本章中介绍所有的细节并设置这些管道，但重要的是至少要理解阶段、动作的概念，以及工件如何在它们之间传递以实现您想要的结果。
最后，CodePipeline 可以支持部署到多个环境中，本章的最后一节将扩展我们的管道，以在生产环境中执行受控发布，如下图所示:
![](img/d3186f6c-4547-4471-9e0e-a4d4fa6b7191.png)
Continuous delivery pipeline
在上图中，一个新的阶段(称为**生产阶段**)被添加到管道中，只有当您的应用已经成功部署到您的开发环境中时，该阶段才能被执行。与开发阶段的持续部署方法不同，开发阶段会立即部署到您的开发环境中，生产阶段首先创建一个云信息变更集，该变更集标识作为部署的一部分将进行的所有变更，然后触发手动批准操作，该操作要求有人审查变更集并批准或拒绝变更。假设变更被批准，那么生产阶段将把变更部署到生产环境中，并且这些动作集合将共同提供对生产(或其他受控)环境中受控释放的支持。
现在，您已经对代码管道有了一个高层次的概述，让我们从创建我们在第一个图表中讨论的连续集成管道开始。在我们可以构建这个管道之前，我们需要构建一个定制的构建容器，以满足 todobackend 存储库中定义的 Docker 工作流的要求，我们还需要添加对 CodeBuild 的支持，之后我们就可以在 CodePipeline 中创建我们的管道了。
# 创建自定义代码构建容器
AWS CodeBuild 提供了一个构建服务，它使用容器构建代理来执行您的构建。CodeBuild 提供了许多针对特定应用语言和/或平台的 AWS 精选映像，例如 [Python、Java、PHP 和更多](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html)。CodeBuild 确实提供了一个为构建 Docker 映像而设计的映像；但是，这个映像有些有限，因为它不包括像 AWS CLI、GNU make 和 Docker Compose 这样的工具，而我们构建 todobackend 应用需要所有这些工具。
虽然您可以运行预构建步骤，在代码构建中安装额外的工具，但是这种方法会降低构建的速度，因为额外工具的安装会发生在每个构建中。CodeBuild 确实支持使用您自己的自定义映像，这允许您预打包应用构建所需的所有工具。
对于我们的用例，代码构建构建环境必须包括以下内容:
*   如果构建支持多容器环境来运行集成和验收测试，那么可以访问 Docker 守护程序
*   复合 Docker
*   GNU 制造
*   AWS CLI
您可能想知道如何满足第一个要求，因为您的代码构建运行时环境位于一个独立的容器中，无法直接访问运行它的底层基础架构。Docker 确实支持 Docker ( **DinD** )中的 **Docker 概念，其中 Docker 守护程序在 Docker 容器内部运行，允许您使用 Docker Compose 等工具安装可以构建 Docker 映像和编排多容器环境的 Docker 客户端。**
Docker 在 Docker 中的实践[有些争议](http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/)，是使用 Docker 更像虚拟机而不是容器的一个例子。然而，为了运行构建，这种方法是完全可以接受的。
# 定义自定义代码构建容器
首先，我们需要构建我们的定制代码构建映像，我们将在一个名为`Dockerfile.codebuild`的 Dockerfile 中定义它，该文件位于 todobackend-aws 存储库中。
以下示例显示了 Dockerfile:
```
FROM docker:dind
RUN apk add --no-cache bash make python3 && \
    pip3 install --no-cache-dir docker-compose awscli
```
因为 Docker 在 Docker 映像中发布了一个 Docker，所以我们可以简单地根据这个映像进行定制；我们免费提供 Docker 中的 Docker 功能。DinD 映像基于 Alpine Linux，并且已经包含所需的 Docker 守护程序和 Docker 客户端。接下来，我们将添加构建所需的特定工具。这包括 bash shell、GNU make 和 Python 3 运行时，这是安装 Docker Compose 和 AWS CLI 所必需的。
现在，您可以使用`docker build`命令在本地构建该映像，如下所示:
```
> docker build -t codebuild -f Dockerfile.codebuild .
Sending build context to Docker daemon 405.5kB
Step 1/2 : FROM docker:dind
dind: Pulling from library/docker
ff3a5c916c92: Already exists
1a649ea86bca: Pull complete
ce35f4d5f86a: Pull complete
d0600fe571bc: Pull complete
e16e21051182: Pull complete
a3ea1dbce899: Pull complete
133d8f8629ec: Pull complete
71a0f0a757e5: Pull complete
0e081d1eb121: Pull complete
5a14be8d6d21: Pull complete
Digest: sha256:2ca0d4ee63d8911cd72aa84ff2694d68882778a1c1f34b5a36b3f761290ee751
Status: Downloaded newer image for docker:dind
 ---> 1f44348b3ad5
Step 2/2 : RUN apk add --no-cache bash make python3 && pip3 install --no-cache-dir docker-compose awscli
 ---> Running in d69027d58057
...
...
Successfully built 25079965c64c
Successfully tagged codebuild:latest
```
上例中的命令创建名为`codebuild`的新建 Docker 映像。目前这还可以，但是我们需要将这个代码构建发布到**弹性容器注册中心** ( **ECR** ，这样它就可以用于代码构建了。
# 为自定义代码构建容器创建存储库
现在，您已经构建了一个自定义的代码构建映像，您需要将映像发布到代码构建可以从中提取映像的位置。如果您正在使用 ECR，您通常会将此映像发布到 ECR 中的存储库中，这就是我们将采取的方法。
首先，您需要在`todobackend-aws`文件夹的根目录下向`ecr.yml`文件添加一个新的存储库，该文件夹是您在本章前面创建的:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: ECR Resources
Resources:
  CodebuildRepository:
 Type: AWS::ECR::Repository
 Properties:
RepositoryName: docker-in-aws/codebuild
 RepositoryPolicyText:
 Version: '2008-10-17'
 Statement:
 - Sid: CodeBuildAccess