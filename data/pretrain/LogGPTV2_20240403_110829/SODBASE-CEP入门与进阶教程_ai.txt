15.13.
14.private String[] myParams; 
15.
16.    @Override 
17.publicvoid run() 
18.    { 
19.        running=true; 
20.while(running) 
21.        { 
22.        // get the data 
23.
24.        // generate the event 
25.        PrimitiveEvent primitiveEvent = new PrimitiveEvent(); 
26.        ValueType valueType = new ValueType("value1", "string"); 
27.        primitiveEvent.getAttributeMap().put("attrbute1", valueType); 
28.        valueType = new ValueType("value2", "double"); 
29.        primitiveEvent.getAttributeMap().put("attrbute2", valueType)
; 
30.
31.long timestamp = new Date().getTime(); 
32.        primitiveEvent.setStart_ts(timestamp); 
33.        primitiveEvent.setEnd_ts(timestamp); 
34.
35.        //put to the stream 
36.        putEventToStream(primitiveEvent); 
37.        } 
北京速德贝斯科技有限公司 WWW.SODBASE.COM北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
39.
40.    @Override 
41.publicvoid setUp() 
42.    { 
43.        /** 
44.         * configured in CEP model file (XML), or in .soddata* file,
45.         * or directly manupulate GraphModelData object 
46.         * 
47.         * The first parameter should be the stream name that this i
nput adaptor binds. 
48.         */ 
49.        myParams = getParams();49.        myParams = getParams(); 
50.
51.    } 
52.
53.privateboolean running = true; 
54.    @Override 
55.publicboolean isRunning() 
56.    { 
57.return running; 
58.        //return running state for monitoring 
59.    } 
60.
61.
62.    @Override 
63.publicvoid stopInputStream() 
64.    { 
65.        running=false; 
66.        // stop input, release 
67.
68.    } 
69.} 
2.输出适配器67.
68.    } 
69.} 
2.输出适配器
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
1.package com.example; 
2.
3.import java.util.List; 
4.
5.import zstreamplus.eventbuffer.Event; 
6.import zstreamplus.eventbuffer.PrimitiveEvent; 
7.
8.import com.sodbase.outputadaptor.OptimizedOutputAdaptorI; 
9.
10.
11.publicclass MyOutputAdaptor extends OptimizedOutputAdaptorI 
12.{ 
13.    String[] myParameters;12.{ 
13.    String[] myParameters; 
14.
15.    @Override 
16.publicvoid output(List eventlist) 
17.    { 
18.while (eventlist.size() > 0) 
19.        { 
20.            Event e = eventlist.remove(0); 
21.
22.if (e instanceof PrimitiveEvent) 
23.            { 
24.                //do something here 
25.            } else
26.            { 
27.
28.            } 
29.        } 
30.    } 
31.
32.29.        } 
30.    } 
31.
32.
33.    @Override 
34.publicvoid setUp() 
35.    { 
36.        /** 
37.         * configured in CEP model file (XML), or in .soddata* file,
38.         * or directly manupulate GraphModelData object 
39.         */ 
40.        myParameters=getParams(); 
41.    } 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
43.    @Override 
44.publicvoid stopOutput() 
45.    {44.publicvoid stopOutput() 
45.    { 
46.        //release the resources 
47.    } 
48.
49.} 
SODBASE CEP 允许使用各类型的自定义时钟。例如，一些应用里会用到第三 方系统生成的时间戳，另外，有的系统并不是按通常意义的时钟如最小单位毫
秒来计时。每个事件都有两个时间戳：开始时间和结束时间。基本事件的开始 时间和结束时间相等。控制时钟，在 SODBASE CEP 引擎中，可以通过设置 事件的时间戳属性来实现。
1.示例操作步骤
功能：5 秒的时间窗口输出数据，但如果没到 5 秒输入数据积达到 10 个，也输出。应用场景为在批量入库时，如果时间设置的过大，入库不及时，设置的过小，又入
库太频繁，所以同时给时间和数量两个判断条件。
（1）下载  2.0.20 或以上版本，解压（1）下载  2.0.20 或以上版本，解压
（2）下载  onbatch.sod,onbatchinput.sod 
（3）双击 cepstudio.exe 打开 SODBASE Studio，导入上一步下载的模型文件
（4）点击 onbatch，工作面板右键测试运行，启动模型
点击 onbatchinput，工作面板右键测试运行，启动模拟数据源
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
输出
[plain]  
1.*******ComplexEvent******** 
2.0 se name: IBM, price: 52, timestamp: 1435240395390, type: data 0 
3.[ 
4.1 data name: Google, price: 14, timestamp: 1435240395593, type: data1 
5.2 data name: Google, price: 95, timestamp: 1435240395796, type: data
 2 
6.3 data name: Google, price: 72, timestamp: 1435240396000, type: data
 3 
7.4 data name: Sun, price: 5, timestamp: 1435240396203, type: data 4 
8.5 data name: Sun, price: 4, timestamp: 1435240396406, type: data 5 
9.6 data name: Sun, price: 15, timestamp: 1435240396593, type: data 610.7 data name: Google, price: 42, timestamp: 1435240396796, type: data
 7 
11.8 data name: Google, price: 84, timestamp: 1435240397000, type: data
 8 
12.] 
13.9 ee name: Google, price: 8, timestamp: 1435240397203, type: data 9 
14.
15.*******ComplexEvent******** 
16.10 se name: Google, price: 74, timestamp: 1435240397406, type: data 
10 
17.[ 
18.11 data name: Sun, price: 19, timestamp: 1435240397593, type: data 11 
19.12 data name: Sun, price: 21, timestamp: 1435240397796, type: data 1
2 
20.13 data name: Sun, price: 1, timestamp: 1435240398000, type: data 13
21.14 data name: Google, price: 46, timestamp: 1435240398203, type: dat
a 14 
22.15 data name: Google, price: 34, timestamp: 1435240398406, type: dat
a 15 
23.16 data name: Sun, price: 6, timestamp: 1435240398609, type: data 16
北京速德贝斯科技有限公司 WWW.SODBASE.COM北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
24.17 data name: IBM, price: 13, timestamp: 1435240398796, type: data 1
7 
25.18 data name: IBM, price: 35, timestamp: 1435240399000, type: data 1
8 
26.] 
27.19 ee name: Google, price: 20, timestamp: 1435240399203, type: data 
19 
28....... 
2.工作原理
2.1 时间戳设置修改方法
Java API 中，Event 类和它的子类 PrimitiveEvent,ComplexEvent 都有两个 long 类型的属性 start_ts，end_ts。通过 setStart_ts(long start_ts)和 setEnd_ts(long end_ts)
就可以设置时间戳。基本事件 PrimitiveEvent 的开始时间 start_ts 和结束时间 end_ts
应相等。另外，新版本中在类 SQL 语句中通过 SELECT 语句 AS _start_time_或
AS _end_time_可以设置输出事件的时间戳。
	2.2 读取方法 
同理，在 Java API 中用 getStart_ts()和 getEnd_ts()可以获取一个事件的时间戳。
在 EPL 类 SQL 语句中可以用_start_time_和_end_time_属性来读取事件的时间戳。
2.3 示例的类 SQL 语句
这里的股票数据输入用到了将递增序列作为时间戳，而毫秒时间戳作为 timestamp属性值。具体类 SQL 语句 onbatch 如下。
[sql] view plaincopy 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
1.CREATE QUERY onbatch 
2.SELECT * 
3.FROM se:onbatchinput,data:onbatchinput,ee:onbatchinput 
4.PATTERN se;data^*;ee 
5.WHERE or(count(data.name)=8,ee.timestamp-se.timestamp>=5000) 
6.WITHIN 10 
7.BATCHMODE 
股票数据中原是用毫秒作时间戳，我们通过一个 SELECT 语句将时间戳改为递
增序列
[sql]  
1.CREATE QUERY onbatchinput[sql]  
1.CREATE QUERY onbatchinput 
2.SELECT T1.price AS price,T1.nameASname,autoincrement('onbatch.inc1
','0') AS _end_time_,T1._end_time_ AStimestamp,'data' AS type 
3.FROM T1:stock 
4.PATTERN T1 
5.WITHIN 0 
autoincrement('onbatch.inc1','0')用了产生递增序列的系统内部函数，建立一个系统
级别的 long 型全局计数器''conbatch.inc1',初始值为 0,每调用一次增加 1。这里是做
Demo 用，建议读者使用自定义函数实现递增序列，更容易控制和隔离。在 onbatch
有输出时也可以将计数器清零。
北京速德贝斯科技有限公司 WWW.SODBASE.COM