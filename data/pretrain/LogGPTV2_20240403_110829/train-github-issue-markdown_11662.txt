ProvidePlugin can only be used for default exports, the example in the doc is
jQuery.
    new webpack.ProvidePlugin({
        $: "jquery"
    })
However if you're using libraries with named exports, like `preact` you're out
of luck
Hello world with preact:
    import { h, render } from 'preact';
    render(
        Hello, world!,
        document.body
    );
The variable `h` is never used in the source file but it's needed because
babel transpiles jsx into `h()` calls.
Ideally one would only write `import { render } from 'preact';` and then use
`ProvidePlugin` to inject the import for `h`.
Maybe something like
    new webpack.ProvidePlugin({
        h: ["preact", "h"]   // <- module name becomes an array
    })
The preact-boilerplate imports `h` in every file and then defines an eslint
rule to disable the unused error `"no-unused-vars": [0, { "varsIgnorePattern":
"^h$" }]`.
rollup-plugin-inject allows named exports