同样提供了对标准通用标记语言( Standard Generalized Markup Language ,
SGML )的支持.
所有这些格式都有着相同的结构, 因为 HTML 和 XML 都来自 SGML . 每个文档
都是由起始标签( start tags ), 结束标签( end tags ), 文本(又叫字符数据),
以及实体引用( entity references )构成:
This is a header
This is the body text. The text can contain
plain text (&quot;character data&quot;), tags, and
entities.
在这个例子中,  ,  , 以及  是起始标签. 每个起始
标签都有一个对应的结束标签, 使用斜线 "/ " 标记. 起始标签可以包含多个
属性, 比如这里的 name 属性.
起始标签和它对应的结束标签中的任何东西被称为 元素( element ) . 这里
document 元素包含 header 和 body 两个元素.
&quot; 是一个字符实体( character entity ). 字符实体用于在文本区域中表
示特殊的保留字符, 使用 & 指示. 这里它代表一个引号, 常见字符实体还有 "
 ( &gt; ) " .
虽然 XML , HTML , SGML 使用相同的结构块, 但它们还有一些不同点. 在 XML
中, 所有元素必须有起始和结束标签, 所有标签必须正确嵌套( well-formed ).
而且 XML 是区分大小写的, 所以  和  是不同的元素类
型.
HTML 有很高灵活性, HTML 语法分析器一般会自动补全缺失标签; 例如, 当遇
到一个以  标签开始的新段落, 却没有对应结束标签, 语法分析器会自动添
加一个  标签. HTML 也是区分大小写的. 另一方面, XML 允许你定义任何
元素, 而 HTML 使用一些由 HTML 规范定义的固定元素.
SGML 有着更高的灵活性, 你可以使用自己的声明( declaration ) 定义源文件
如何转换到元素结构, DTD ( document type description , 文件类型定义)可
以用来检查结构并补全缺失标签. 技术上来说, HTML 和 XML 都是 SGML 应用,
有各自的 SGML 声明, 而且 HTML 有一个标准 DTD .
Python 提供了多个 makeup 语言分析器. 由于 SGML 是最灵活的格式, Python
的 sgmllib 事实上很简单. 它不会去处理 DTD , 不过你可以继承它来提供更
复杂的功能.
Python 的 HTML 支持基于 SGML 分析器. htmllib 将具体的格式输出工作交给
formatter 对象. formatter 模块包含一些标准格式化标志.
Python 的 XML 支持模块很复杂. 先前是只有与 sgmllib 类似的 xmllib , 后
来加入了更高级的 expat 模块(可选). 而最新版本中已经准备废弃 xmllib ,
启用 xml 包作为工具集.
5.1.2. 配置文件
ConfigParser 模块用于读取简单的配置文件, 类似 Windows 下的 INI 文件.
netrc 模块用于读取 .netrc 配置文件, shlex 模块用于读取类似 shell 脚本
语法的配置文件.
5.1.3. 压缩档案格式
Python 的标准库提供了对 GZIP 和 ZIP ( 2.0 及以后) 格式的支持. 基于
zlib 模块, gzip 和 zipfile 模块分别用来处理这类文件.
5.2. xmllib 模块
xmllib 已在当前版本中申明不支持.
xmlib 模块提供了一个简单的 XML 语法分析器, 使用正则表达式将 XML 数据
分离, 如 Example 5-1 所示. 语法分析器只对文档做基本的检查, 例如是否只
有一个顶层元素, 所有的标签是否匹配.
XML 数据一块一块地发送给 xmllib 分析器(例如在网路中传输的数据). 分析
器在遇到起始标签, 数据区域, 结束标签, 和实体的时候调用不同的方法.
如果你只是对某些标签感兴趣, 你可以定义特殊的 start_tag 和 end_tag 方
法, 这里 tag 是标签名称. 这些 start 函数使用它们对应标签的属性作为参
数调用(传递时为一个字典).
5.2.0.1. Example 5-1. 使用 xmllib 模块获取元素的信息
File: xmllib-example-1.py
import xmllib
class Parser(xmllib.XMLParser):
# get quotation number
def _ _init_ _(self, file=None):
xmllib.XMLParser._ _init_ _(self)
if file:
self.load(file)
def load(self, file):
while 1:
s = file.read(512)
if not s:
break
self.feed(s)
self.close()
def start_quotation(self, attrs):
print "id =>", attrs.get("id")
raise EOFError
try:
c = Parser()
c.load(open("samples/sample.xml"))
except EOFError:
pass
id => 031
Example 5-2 展示了一个简单(不完整)的内容输出引擎( rendering engine ).
分析器有一个元素堆栈( _ _tags ), 它连同文本片断传递给输出生成器. 生成
器会在 style 字典中查询当前标签的层次, 如果不存在, 它将根据样式表创建
一个新的样式描述.
5.2.0.2. Example 5-2. 使用 xmllib 模块
File: xmllib-example-2.py
import xmllib
import string, sys
STYLESHEET = {
# each element can contribute one or more style elements
"quotation": {"style": "italic"},
"lang": {"weight": "bold"},
"name": {"weight": "medium"},
}
class Parser(xmllib.XMLParser):
# a simple styling engine
def _ _init_ _(self, renderer):
xmllib.XMLParser._ _init_ _(self)
self._ _data = []
self._ _tags = []
self._ _renderer = renderer
def load(self, file):
while 1:
s = file.read(8192)
if not s:
break
self.feed(s)
self.close()
def handle_data(self, data):
self._ _data.append(data)
def unknown_starttag(self, tag, attrs):
if self._ _data:
text = string.join(self._ _data, "")
self._ _renderer.text(self._ _tags, text)
self._ _tags.append(tag)
self._ _data = []
def unknown_endtag(self, tag):
self._ _tags.pop()
if self._ _data:
text = string.join(self._ _data, "")
self._ _renderer.text(self._ _tags, text)
self._ _data = []
class DumbRenderer:
def _ _init_ _(self):
self.cache = {}
def text(self, tags, text):
# render text in the style given by the tag stack
tags = tuple(tags)
style = self.cache.get(tags)
if style is None:
# figure out a combined style
style = {}
for tag in tags:
s = STYLESHEET.get(tag)
if s:
style.update(s)
self.cache[tags] = style # update cache
# write to standard output
sys.stdout.write("%s =>\n" % style)
sys.stdout.write(" " + repr(text) + "\n")
#
# try it out
r = DumbRenderer()
c = Parser(r)
c.load(open("samples/sample.xml"))
{'style': 'italic'} =>
'I\'ve had a lot of developers come up to me and\012say,
"I haven\'t had this much fun in a long time. It sure
beats\012writing '
{'style': 'italic', 'weight': 'bold'} =>
'Cobol'
{'style': 'italic'} =>
'" -- '
{'style': 'italic', 'weight': 'medium'} =>
'James Gosling'
{'style': 'italic'} =>
', on\012'
{'weight': 'bold'} =>
'Java'
{'style': 'italic'} =>
'.'
5.3. xml.parsers.expat 模块
(可选) xml.parsers.expat 模块是 James Clark's Expat XML parser 的接口.
Example 5-3 展示了这个功能完整且性能很好的语法分析器.
5.3.0.1. Example 5-3. 使用 xml.parsers.expat 模块
File: xml-parsers-expat-example-1.py
from xml.parsers import expat
class Parser:
def _ _init_ _(self):
self._parser = expat.ParserCreate()
self._parser.StartElementHandler = self.start
self._parser.EndElementHandler = self.end
self._parser.CharacterDataHandler = self.data
def feed(self, data):
self._parser.Parse(data, 0)
def close(self):
self._parser.Parse("", 1) # end of data
del self._parser # get rid of circular references
def start(self, tag, attrs):
print "START", repr(tag), attrs
def end(self, tag):
print "END", repr(tag)
def data(self, data):
print "DATA", repr(data)
p = Parser()
p.feed("data")
p.close()
START u'tag' {}
DATA u'data'
END u'tag'
注意即使你传入的是普通的文本, 这里的分析器仍然会返回 Unicode 字符串.
默认情况下, 分析器将源文本作为 UTF-8 解析. 如果要使用其他编码, 请确保
XML 文件包含 encoding 说明. 如 Example 5-4 所示.
5.3.0.2. Example 5-4. 使用 xml.parsers.expat 模块读取 ISO Latin-1 文
本
File: xml-parsers-expat-example-2.py
from xml.parsers import expat
class Parser:
def _ _init_ _(self):
self._parser = expat.ParserCreate()
self._parser.StartElementHandler = self.start
self._parser.EndElementHandler = self.end
self._parser.CharacterDataHandler = self.data
def feed(self, data):
self._parser.Parse(data, 0)
def close(self):
self._parser.Parse("", 1) # end of data
del self._parser # get rid of circular references
def start(self, tag, attrs):
print "START", repr(tag), attrs
def end(self, tag):
print "END", repr(tag)
def data(self, data):
print "DATA", repr(data)
p = Parser()
p.feed("""\
fredrik lundh
link?ping
"""
)
p.close()
START u'author' {}
DATA u'\012'
START u'name' {}
DATA u'fredrik lundh'
END u'name'
DATA u'\012'
START u'city' {}
DATA u'link\366ping'
END u'city'
DATA u'\012'
END u'author'
5.4. sgmllib 模块
sgmllib 模块, 提供了一个基本的 SGML 语法分析器. 它与 xmllib 分析器基
本相同, 但限制更少(而且不是很完善). 如 Example 5-5 所示.
和在 xmllib 中一样, 这个分析器在遇到起始标签, 数据区域, 结束标签以及
实体时调用内部方法. 如果你只是对某些标签感兴趣, 那么你可以定义特殊的
方法.
5.4.0.1. Example 5-5. 使用 sgmllib 模块提取 Title 元素
File: sgmllib-example-1.py
import sgmllib
import string
class FoundTitle(Exception):
pass
class ExtractTitle(sgmllib.SGMLParser):
def _ _init_ _(self, verbose=0):
sgmllib.SGMLParser._ _init_ _(self, verbose)
self.title = self.data = None
def handle_data(self, data):
if self.data is not None:
self.data.append(data)
def start_title(self, attrs):
self.data = []
def end_title(self):
self.title = string.join(self.data, "")
raise FoundTitle # abort parsing!
def extract(file):
# extract title from an HTML/SGML stream
p = ExtractTitle()
try:
while 1:
# read small chunks
s = file.read(512)
if not s:
break
p.feed(s)
p.close()
except FoundTitle:
return p.title
return None
#
# try it out
print "html", "=>", extract(open("samples/sample.htm"))
print "sgml", "=>", extract(open("samples/sample.sgm"))
html => A Title.
sgml => Quotations
重载 unknown_starttag 和 unknown_endtag 方法就可以处理所有的标签. 如
Example 5-6 所示.
5.4.0.2. Example 5-6. 使用 sgmllib 模块格式化 SGML 文档
File: sgmllib-example-2.py
import sgmllib
import cgi, sys
class PrettyPrinter(sgmllib.SGMLParser):
# A simple SGML pretty printer
def _ _init_ _(self):
# initialize base class
sgmllib.SGMLParser._ _init_ _(self)
self.flag = 0
def newline(self):
# force newline, if necessary
if self.flag:
sys.stdout.write("\n")
self.flag = 0
def unknown_starttag(self, tag, attrs):
# called for each start tag
# the attrs argument is a list of (attr, value)
# tuples. convert it to a string.
text = ""
for attr, value in attrs:
text = text + " %s='%s'" % (attr, cgi.escape(value))
self.newline()
sys.stdout.write("\n" % (tag, text))
def handle_data(self, text):
# called for each text section
sys.stdout.write(text)
self.flag = (text[-1:] != "\n")
def handle_entityref(self, text):
# called for each entity
sys.stdout.write("&%s;" % text)
def unknown_endtag(self, tag):
# called for each end tag
self.newline()
sys.stdout.write("" % tag)
#
# try it out
file = open("samples/sample.sgm")
p = PrettyPrinter()
p.feed(file.read())
p.close()
Quotations
eff-bot, June 1997
Nobody expects the Spanish Inquisition! Amongst
our weaponry are such diverse elements as fear, surprise,
ruthless efficiency, and an almost fanatical devotion to
Guido, and nice red uniforms &mdash; oh, damn!
Example 5-7 检查 SGML 文档是否是如 XML 那样 "正确格式化", 所有的元素
是否正确嵌套, 起始和结束标签是否匹配等.
我们使用列表保存所有起始标签, 然后检查每个结束标签是否匹配前个起始标
签. 最后确认到达文件末尾时没有未关闭的标签.
5.4.0.3. Example 5-7. 使用 sgmllib 模块检查格式
File: sgmllib-example-3.py
import sgmllib