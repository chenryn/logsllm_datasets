创建并填充新的mismatch_category数据库表。
使用一个MySQL工具，执行上一页的CREATETABLESQL命令，向Mismatch数据库增
加一个名为mismatch_category的新表。然后执行INSERT语句在这个表中填充类别
数据。现在运行两个ALTER语句修改mismatch_topic表，增加一个category_id
列。最后，使用uPDATE更新mismatch_topic表中的各行，使其category_id列指
向mismatch_category表中相应的类别。
现在对各个表运行SELECT，确认一切正确。
Mismatch真的规范吗？
没错，确实如此。如果对各个Mismatch表应用前面的3个规范性规则，
①确保列具有原子性。
你会发现它能顺利地通过检查。不过，即使未能通过检查，也没有什
②每个表有自己的主键。
么损失。就像有形形色色的人一样，数据库也有不同程度的规范性。
③确保非键的列不相互依赖。
重要的是，应当着力设计完全规范的数据库，只是在有非常充分的理
由违反规则时才允许不太规范的特例情况。
所有这些表都有一个数
值主键来确保唯一性。
mismatch user
Pasn
在整个数据库中，用户的名字都
以最原子的形式存储，绝对不会
mismatch_category
username
在多个列中重复。
password
2
join_date
1name
first_name
last_name
mismatch_response
gender
mismatch_topic
birthdate
response_idO
topic_id
2
city
1
response
name
7state
user id
category_id
picture
topicid
如果没有假想的乙炉编码依赖性，用户的位置列不再有依
赖性问题。
470
第8章
---
## Page 507
控制你的数据，世界在你手中
难运新的Mismateh表设计不会
影响问卷脚本代码中已有的查
海吗？
mismatch_category
category_idO
name
// Grab the response data from the database to generate the form
$query-"SELECT response_id, topic_id, response FROM mismatch_response
$data = mysqli_query($dbc, $query) ;
$responses = array();
while ($row = mysqli_fetch_array($data))(
// Look up the topic name for the response from the topic table
$query2 = "SELECT name, category FROM mismatch_topic ",
"WHERE topic_id -".$row['topic_id']."·";
$data2-mysqli_query($dbc,$query2);
if (mysqli_num_rows($data2) == 1) (
$row2 = mysqli_fetch_array($data2);
$row['category_name′]= $row2['category*];
array_push ($responses, $row) ;
确实。实际上，由于一些表会受到数据库结构调整的影响，大多数
questionnaire.php
结构调整都要求修改涉及这些表的查询。
在这里，修改数据库设计来增加新的mismatch_category表会影
响到所有涉及mismatch_topic表的查询。这是因为，原先的数据
库设计将类别直接存储在mismatch_topic表中。由于现在类别分
离到其自己的表中（我们知道这是出于规范化考虑的一个好想法），
就有必要重新查看这些查询，改写为使用一个另加的mismatch_
PDG
category表。
你现在的位置
471
---
## Page 508
肯定有一种更好的方法来完成查询！
查询中的查询中的查询······
规范化数据库会导致一个问题，查询往往需要子查询，因为你必须得
更多的表往往导致
到多个表中的数据。这可能会变得很混乱。请考虑这个新版本的查询，
更混乱的查询。
它要构建响应数据来生成Mismatch问卷表单。
//Grab the response data from the database to generate the form
"WHERE user id=".S SESSION['user id'].";
$data-mysqli_query（$dbc, Squery);
Sresponses=array();
while (Srow = mysqli_fetch_array($data))(
//Look up the topicname for the response from the topic table
我们在从3个不同
$query2="sELECT name,category_id FROMmismatch_topic".
"WHERE topic_id="".$row['topic_id'].
的表中抽取数据，
$data2=mysqli_query（$dbc,$query2）;
这需要3个壹询。
if（mysqli_num_rows（Sdata2）-=1）（
$row2-mysqli fetch_array（Sdata2);
$row['topic_name']=$row2['name'];
$query3="SELECT name FROM mismatch_category".
$data3-mysqli_query(Sdbc,Squery3）;
if（mysqli_num_rows（$data3）==1）（
$row3=mgsqli_fetch_array（$data3);
eu,]nox=.aeuxobyeo,]mo
array_gush($responses, $row);
这个新查询使用categoty_
要记住，这个函数告诉你壹询
id键从类别表中获取类
返图多少个数据行。
别名。
mismatch_response
mismatch_topic
mismatch_category
response_idO
topic_id
response
name
name
topic_id
26
Love
27
2
Love
Gold chains
28
3
Love
Body piercings
Appearance
Love
这个重复数据不金带来
29
V
Cowboybools
Love
问题，因为这是从其来
这是临时响应数组
30
5
Long hair
Hate
源表抽取的，并不是重
用于生成Mismatch问
31
6
RealityTV
32
Professional wrestling
Entertair
复存储。
卷表单。
7
Love
33
8
Love
Horror movies
Entertai
472
第8章
---
## Page 509
控制你的数据，世界在你手中
下面完全联手
哎呀！能不能对所有这些嵌套查询做点什么？解决方案就是利用一个
联接可以利用一
称为联接（join）的SQL特性。使用这个特性，我们只用一个查询就
个查询外多个表
可以从多个表获取结果。有多种不同类型的联接，不过最常用的是内
获取结果。
联接，它根据一个条件从两个表中选择行。在一个内联接中，查询结
果只包含满足这个条件的行。
壹询送择了主题D和类别名，这些列
分别位于两个不同的表中。
SELECT mismatch_topic.topic_id,
mismatch_category.name
FROM mismatch_topic
INNER JOIN mismatch_category
ON (mismatch_topic.category_id = mismatch_category.category_id)
类别表通过一个内联接（NNER
R
2O3N）联接到主题表。
联接的条件是，对于返回的各个数
据行，类别D必须匹配。
这一列控制
mismatch_category
mismatch_topic
着联接！
nome
celegoery_O
pO
Talfoos
、
1
Appearance
1
2
Entertainment
2
Gold chains
Body piercings
1
3
Food
3
1
4
People
4
Cowboy bools
1
5
Activities
5
Long hair
6
Reality TV
2
7
Professional wrestling
2
Horrormovies
2
结果的第二列包含
Easy listening music
类别表中对应各个
9
The opera
2
2
10
Appe
主题加的类别名。
Sushi
3
3
Appe
4
5
App
结果的第一列包舍主题表
6
中的主题0。
这个内联接成功地合并了两个表中的数据，而之前这需要两个不同的
得到的数据包含了两个不同
查询才能做到。查询结果包含了两个表中的数据列。
表中的列！
你现在的位置
473
---
## Page 510
使用点记法
围
连接
连接点
由于联接涉及多个表，所以要非常清楚联接中所引用的各个列，这一点记法允许在联接
点很重要。更具体地讲，必须明确每一列相应的表，避免出现混乱一
中引用一个列所属，
表通常会有同名的列，特别是作为键的列。为此，只需在列名前加上
表名和一个点号。例如，以下是原先构建主题ID和类别名结果集的
的表。
INNERJOIN查询：
点号！
这是表中的列名，与表名之间用一
这是表名。
个点号（.）分隔。
SELECT mismatch_topic.topic_id,mismatch_category.name
FROM mismatch_topic
K
这是另一个使用点记法
的表/列引用。
INNER JoIN mismatch_category
ON （mismatch_topic.category_id =mismatch_category.category_id)
这里点号真正发挥了作用，列名是相同的
如果没有表名金导致混乱。
列名本身根本无法告诉我们它
属于哪个表。
如果在这个查询中未指定与列关联的表，就会很含糊。实际上，查
询的oN部分根本无法理解，因为它会查看category_id列是否等于
category_id
它自己，以为还是在mismatchtopic表中。出于这个原因，构建
JOIN查询时通常最好明确地指定与列关联的表。
在20N壹询中，这个
列名是有二义性的！
不要忘记点号！
mismatch_topic.category_id
mismatch_topic
mismatch_category
指定表会得到一个更
明确的10N壹询。
Taltoos
1
2
Goldchains
2
Entertain
3
Body piercings
3
Food
474
8第
---
## Page 511
控制你的数据，世界在你手中
当然还可以利用内联接做更多工作
内联接并不仅限于结合两个表的数据。由于内联接最终仍是一个查询，
INNERJOIN可以
所以依然可以使用规范的查询构造进一步地控制结果。例如，如果希
在条件中使用比
望从一个联接结果集中获取一个特定的行，可以在INNERJOIN查询
后面加上一个WHERE语句抽出那一行。
较操作符来结合两
SELECT mismatch_topic.topic_id, mismatch_category.name
个表的数据行。
FROM mismatch_topic
INNER JOIN mismatch_category
ON (mismatch_topic.category_id = mismatch_category.category_id)
WHERE mismatch_topic.name ='Horror movies
那么这个查询到底会返回什么？首先，要记住WHERE子句相当于缩
小前面查询的范围。换句话说，它进一步限制了原INNERJOIN查
作为WHERE语句的一部
分，这一列会绵小结果
询返回的行。可以回顾一下，以下是没有WHERE时内联接的结果：
范围。
这两列控制两个
表之间的联接。
Appearance
mismatch_topic
2
Appearance
3
Appearance
topic_idO
主题5D从mismatch_topic
4
name
表抽取。
5
Appearance
类别名由mismatch_category
6
category_id
7
表抽驭。
R
mismatch_category
category_id0
WHERE子句的作用是将这个结果集缩减为一行，这一行的主题名
name
等于Horror
movies'。再来查看mismatchtopic表，看看
这是哪一行。
由于WHERE子句，原JNNER
mismatch_topic
30N结果集缩减为只有这孤独
的一个数据行。
name
calgory_
8Entertainment
7
Professional wrestling
2
8
Horrormovies
2
个
9
Easy listening mu
2
WHERE子句将联接的结果
这一行满足
限制为一行。
WHERE子句。
你现在的位置
475
---