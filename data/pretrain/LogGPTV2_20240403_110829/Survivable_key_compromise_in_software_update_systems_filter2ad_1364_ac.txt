### 3. TUF Update Process

1. **Timestamp Check:**
   - If `timestamp.txt` indicates that `release.txt` has changed, TUF downloads and verifies `release.txt`.

2. **Metadata Comparison:**
   - TUF compares the metadata files listed in the new `release.txt` with those described in the last `release.txt` it has seen.
   - In the absence of optional metadata files, only `root.txt` and `targets.txt` are listed.
   - If `root.txt` has changed, the update process starts over using the new `root.txt`.

3. **File Availability:**
   - TUF provides the software update system with a list of available files according to `targets.txt`.

4. **Target File Download:**
   - The software update system instructs TUF to download a specific target file.
   - TUF downloads and verifies the file, then makes it available to the software update system.

5. **Update Installation:**
   - The software update system installs the update.

### 7.2 Signed Metadata Format

All metadata files in TUF use the canonical JSON format and are enclosed in a signature structure:

```json
{
  "signed": X,
  "signatures": [
    {
      "keyid": K,
      "method": M,
      "sig": S
    },
    ...
  ]
}
```

- **X** is the signed object.
- **K** is the identifier of the key that created the signature.
- **M** is the method used to create the signature.
- **S** is the signature of the canonical encoding of X.

An example key format is:

```json
{
  "keytype": "rsa",
  "keyval": {
    "e": E,
    "n": N
  }
}
```

The signed data of each file contains a creation timestamp (`CREATIONTIME`) and an expiration date (`EXPIRES`). These values are shown in Table 4.

**Note:** The specific file format used is not crucial as long as it is sufficiently expressive and the data can be represented in a canonical form for signing and signature verification purposes.

### 7.3 Roles and Responsibilities

TUF uses a hierarchical role structure to delegate responsibilities. The top-level roles are the root role, targets role, release role, and timestamp role, as shown in Figure 1.

#### Root Role
- **Responsibility:** The root role is the root of trust for the entire repository. It signs the `root.txt` metadata file, which indicates which keys are authorized for each top-level role, including the root role itself.
- **Keys and Thresholds:** The roles "root", "release", "timestamp", and "targets" must be specified, each with a list of `KEYIDs`. The signatures of these keys are trusted to sign on behalf of the corresponding role. The signature threshold for each role is the value `THRESHOLD`.
- **Key Management:** Keys belonging to the root role should be highly protected and used infrequently.

#### Targets Role
- **Responsibility:** The targets role, through the `targets.txt` file, indicates which target files are available from the repository. It shares the responsibility of providing information about the content of updates with the release and timestamp roles.
- **Automated Use:** Depending on the automated use of the release and timestamp roles, the targets role may have full responsibility for the content of updates.
- **Delegation:** The targets role can delegate to other roles the responsibility for providing some or all target files. These delegated roles are specified in the `delegations` object.

#### Delegated Targets Roles (Optional)
- **Responsibility:** If the top-level targets role performs delegation, the resulting delegated roles can provide their own metadata files. For example, if a delegated role is named `foo`, its metadata file is available as `targets/foo.txt`.
- **Format:** The format of the metadata files provided by delegated targets roles is the same as that of `targets.txt`. Delegated targets roles can also further delegate.

#### Release Role
- **Responsibility:** The release role ensures that clients see a consistent repository state. It provides repository state information by indicating the latest versions of all metadata files in `release.txt`, which it signs.
- **Exclusion:** The only metadata file not listed in `release.txt` is `timestamp.txt`, which is always created after `release.txt`.

#### Timestamp Role
- **Responsibility:** The timestamp role provides information about the timeliness of available updates by frequently signing a new `timestamp.txt` file with a short expiration time. This file indicates the latest version of `release.txt`.
- **Automation:** Due to the frequent signing requirement, the timestamp role is often automated and may use a single key stored on a public-facing server.

### 7.4 Key Compromise Analysis

This section analyzes the ability of the design to survive the compromise of one or more roles. The summary is shown in Table 5.

- **Root Role Compromise:**
  - If less than the required threshold of root keys is compromised, clients are not at risk. The compromised keys can be replaced through a new `root.txt` file.
  - If more than the required threshold of root keys is compromised, an attacker can sign a new `root.txt` listing their own keys and provide their own signed metadata to clients.

- **Targets Role Compromise:**
  - If a threshold of targets role keys is compromised, there is no immediate threat to clients unless the timestamp and release roles are also compromised.
  - If less than a threshold of targets role keys are compromised, these keys can be securely and reliably revoked by having the root role sign a new `root.txt` file that does not list the compromised keys.

- **Delegated Targets Role Compromise:**
  - If delegated targets roles are used, they have similar risk properties to the top-level targets role. A compromised delegated role may only affect a subset of clients, and revocation can be done by the delegating role or any other role in the delegation chain.

- **Release Role Compromise:**
  - If a threshold of release role keys is compromised, there is no immediate risk unless the timestamp role is also compromised. Revocation of compromised keys is done through the `root.txt` file.

- **Timestamp Role Compromise:**
  - The compromise of the timestamp role allows freeze attacks on clients. Once detected, the duration of freeze attacks is bounded by the earliest expiration time of any metadata file. Revocation of timestamp keys is done through the `root.txt` file.

### 8. Experience and Discussion

#### 8.1 Integration Experience

We have integrated TUF with two different software update systems:
- **Seattle Application Updater:** A simple application that identifies and downloads new files, saves them to the installation directory, and restarts affected processes. TUF was integrated to handle the download and verification of files.
- **PyPI and easy_install:** A community repository and library management system for Python. PyPI delegates a targets role to each developer, allowing them to provide individual libraries. The large number of delegated roles results in a large `release.txt` file, which is compressed to reduce size.

#### 8.2 Recommendations

- **Number of Keys:** Managing many keys independently is important. If too many keys need to be managed by a small organization, they may be stored together, reducing security.
- **Role Automation:** The timestamp role poses little immediate risk if compromised and is often automated. Careful consideration should be given to the security measures for the root and targets roles.

By following these recommendations and best practices, organizations can balance the security benefits of multiple roles and keys with practical needs.