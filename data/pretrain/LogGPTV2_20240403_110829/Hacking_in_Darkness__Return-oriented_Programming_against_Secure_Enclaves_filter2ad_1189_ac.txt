typical condition because the isolated architecture of SGX
memory requires frequent copying of memory between
the trusted in-enclave area and the untrusted area.
We believe the assumptions we made for the gadgets
targets a typical condition of enclave programs because
without such gadgets, the programs will be broken or run
unconventionally.
Based on the assumption of gadgets, we attempt to find
the useful ROP gadgets without having any knowledge
of the code in the binary, so we called this attack “Dark-”
ROP. To this end, we construct three oracles that give
the attackers a hint of the binary code to find the useful
gadgets: 1) a page-fault-based oracle to find a gadget that
can set the general purpose register values; 2) the EEXIT
oracle can verify which registers are overwritten by the
gadgets found by 1); and 3) the memory oracle that can
find the gadget has a memory copy functionality to inject
data from untrusted space to the enclave or to exfiltrate
the data vice versa. For the details of the oracles, please
refer to §4 for the further descriptions.
By utilizing these three oracles, the Dark-ROP attack
achieves the ability to execute security-critical functions
such as key derivation for data sealing and generating the
correct measurement report for attestation, and arbitrarily
read or write data between the untrusted memory and the
memory of the enclaves.
3.3 Threat Model
To reflect the environment of SGX deployed in the real
world, the Dark-ROP attack is based on the following
assumptions:
1. The target system is equipped with the processor that
supports SGX, and we assume that the hardware is
not vulnerable. Additionally, we also exclude the
case that requires physical access to the machine be-
cause the Dark-ROP attack is a pure software-based
attack.
2. SGX and the enclave application are configured cor-
rectly. That is, we assume that all software settings
that affect the enclave such as BIOS settings and the
setting of page permissions for the enclave etc. are
configured correctly, as described in the Intel man-
ual [19–22] to guarantee the security promised by
SGX if the application has no vulnerability.
3. The application harvests the entire security benefit
of SGX. That is, the application that runs in the
enclave is distributed in an encrypted format and
removing the loader program after launching the
payload, which makes it completely hidden to the
attacker, and the application uses data sealing for pro-
tecting application data as well as remote attestation
to verify the running status of the enclave.
4. However, the application that runs inside the enclave
has an exploitable memory-corruption vulnerability.
5. The attacker has full control of all software of the
system, including the operating system and the un-
trusted application that interacts with the enclave,
etc., except the software that runs inside the enclave.
6. The target application is built with a standard com-
piler (e.g. Visual Studio for SGX, or gcc), with the
standard SDK that is supplied by Intel.
The threat model of Dark-ROP is pragmatic because it
assumes the standard, and secure configuration of SGX
for the attack target, as well as assuming only the software-
level attacker. The extra assumption that we add to the
standard is that the software in the enclave has an ex-
ploitable vulnerability. Since removing all vulnerabilities
from the software is an inextricable challenge, we believe
that the assumptions depict the common best practices of
using of SGX.
4 Attack Design
In this section, we illustrate how an attacker can launch
the ROP attack by overcoming the challenges of the at-
tack in the SGX environment. We first describe how an
attacker can find the gadgets required for the Dark-ROP
attack by exploiting the three oracles that can provide
the hints with respect to the code in the unknown (en-
crypted) binary in the enclave. After that, we demonstrate
a proof-of-concept example that invokes security-critical
functions within the enclave through the vulnerability by
chaining the ROP gadgets.
4.1 Finding gadgets in a hidden enclave
program
To find gadgets from the completely hidden binary in
an enclave, we devised three techniques that can turn an
enclave into an oracle for finding a gadget: 1) Reading
the cr2 register at the page fault handler to find the gadget
with multiple register pops to control the value of registers.
2) Leaking the register values at the page fault handler by
calling the EEXIT leaf function to identify which registers
are changed by 1. 3) Examining the memory outside
the enclave to find a function in the memcpy() family to
perform arbitrary read/write on the enclave.
528    26th USENIX Security Symposium
USENIX Association
examining the value in the cr2 register at the page fault
handler (i.e., AEX handler in this paper).
To turn this into a gadget-finding oracle, we set the
attack stack as in Figure 3. In essence, by exploiting the
memory corruption bug, we set the return address to be
the address that we want to probe whether it is a pop
gadget or not. The probing will scan through the entire
executable address space of the enclave memory. At the
same time, we put several non-executable addresses, all
of which reside in the address space of the enclave, on the
stack.
Because the untrusted operating system manages all
the memory allocations, the attacker knows the coarse-
grained memory map of the enclave (on the left side
of the Figure 3) so that the attacker can easily identify
the non-executable enclave memory pages (e.g., enclave
stack or heap pages). We call this memory region as
PF_region and, PF_R array in the code contains the list of
non-executable page addresses.
For
instance, we put 0xf7741000, 0xf7742000,
0xf7743000, and 0xf7744000, etc. on the enclave stack
to set the register values if it is a pop gadget (see at the
bottom of the Figure 3. For example, if the gadget at the
return address is pop rdx; ret;, then 0xf7741000 will be
stored into the rdx register, and the processor will attempt
to return to the address of 0xf7742000. However, the ad-
dress 0xf7742000 is a non-executable address; returning
to such an address will cause the processor to generate the
page fault. Then, the AEX handler will catch this page
fault. At the AEX handler, the attacker is able to distin-
guish the number of pops in the gadget by examining the
value in the cr2 register. In the case of the example, the
value is 0xf7742000, the second value on the stack, which
means that the gadget has only one pop before the return
because the first value, 0xf7741000, is popped. Taking
another example, when the gadget has three pops, the first
three values on the stack will be removed so that the value
in the cr2 register will be 0xf7743000.
Using this method, the attacker can identify the num-
ber of pops before the return on the gadgets. How-
ever, the oracle does not allow the attacker to figure out
which registers are being popped. Moreover, the gadget
found by this method could not be a pop gadget because
the page fault can be triggered in other cases such as
pop rax; mov rbx,QWORD PTR [rax+0x4] (fault by mov
instruction). In the next oracle, we will remove the uncer-
tainty of the gadgets found by this oracle.
Identifying the gadgets and the registers on EEXIT.
The second oracle we build is for identifying pop gadgets
among the gadget candidates found from the first AEX
oracle. The second oracle exploits the fact that the values
in registers are not automatically cleared by the hardware
on the execution of the EEXIT leaf function. As a result,
Figure 3: An overview of page fault oracle and the AEX handler.
The workflow for identifying pop gadgets by using the page
fault oracle is as follows: (1) The attacker sets an arbitrary
address in the code section on the stack to probe if the address
is for a pop gadget (e.g. 0xF7501200 in the figure) and then set
several non-executable addresses in PF_region. (2) Because the
probed address in the figure contains a single pop and a return
instruction, the processor attempts to pop the first address in
PF_region (i.e., PF_region_0) then return to the second address
on the stack, PF_region_1 (i.e., 0xF7742000). (3) Returning to
the PF_region_1 address emits the page fault exception because
the address is non-executable. (4) At the exception handler,
the attacker can locate this address from the cr2 register in the
exception context so that the attacker can identify that only one
pop is in the gadget.
Page fault oracle for changing register values. We
first find gadgets that can set a value to a specific
register from the values in the stack. For instance,
a pop gadget like pop rbx; pop rcx; pop rdx; retq;
can change the value of the rbx, rcx, and rdx registers at
once if values are set at the attack stack by exploiting a
buffer overflow vulnerability.
To find such gadgets, we turn the Asynchronous En-
clave Exit (AEX) and page fault handler into an oracle
for detecting the gadgets. An interesting property of the
Intel processor is that when a page fault exception arises,
the cr2 register stores the address of the page that gen-
erated the fault. On the other hand, if a page fault arises
in the enclave, the AEX happens and it clears the least
12 significant bits of the cr2 register and overwrites the
General Purpose Registers (GPRs) with the synthesized
value to protect its execution context. Therefore, for the
page fault that arises in the enclave, we can identify which
address triggered the page fault in a page granularity by
USENIX Association
26th USENIX Security Symposium    529
0xF7501200: pop rdx0xF7501201: retAddressAccessPermissionAPPLICATION0x400000-0x408000r-x0x607000-0x608000r--……ENCLAVE0xF7500000-0xF752b000(Code)r-x……0xF7741000-0xF7841000rw-0xF7842000-0xF7882000rw-0xF7883000-0xF7884000rw-……Buf[100]Ret_addr(0xF7501200)PF_Region_0(0xF7741000)PF_Region_1(0xF7742000)PF_Region_2(0xF7743000)PF_Region_3(0xF7744000)……Memory mapEnclave StackAEX_handlerin page fault handlerCandidate gadget in enclave code section①Return to candidate gadget④uint64_t PF_R[10] = {0xF7741000, 0xF7742000, 0xF7743000, 0xF7744000, ……}AEX_handler(unsigned long CR2, pt_regs*regs){// Indicate exception within enclaveif( regs→ax == 0x03)  {if (CR2 == 0)gadget = CRASH;else {intcount = 0;foreach(uint64_t fault_addrin PF_R) {// verify number of popsif (fault_addr== CR2) {number_of_pops= count; break;}count++;}……②Return to non-executable area (PF_Region_1)③AEX(page fault)LoadPF_Region_1 as return address Figure 4: An overview of searching an ENCLU gadget and the
behavior of EEXIT. (1) The attacker chains multiple pop gadgets
found in Figure 3, as many as possible, and put the value 0x4
as the number of pops in the gadget. (2) If the probing address
(the last return address) contains the ENCLU instruction, then it
will invoke EEXIT and jump to the address specified in rbx (i.e.,
0x4 because of the pop gadgets). (3) The execution of EEXIT
generates the page fault because the exit address in rbx (0x4)
does not belong to the valid address region. (4) At the page
fault handler, the attacker can be notified that EEXIT is invoked
accordingly by examining the error code and the value of the
rax register. The error code of EEXIT handler contains the value
that indicates the cause of page fault. In this case, the page fault
is generated by pointing an invalid address 0x4 as jump address
(i.e., the value of rbx register). So if the error code contains the
flags for PF_PROT (un-allocated), PF_USER (userspace memory),
and PF_INSTR (fault on execution), and the value of rax is 0x4
(the value for EEXIT leaf function), then the attacker can assume
the probed address is where the ENCLU instruction is located.
the attacker can identify the values of the registers that
were changed by the pop gadget that is executed prior to
EEXIT. This helps the attacker to identify the pop gadgets
among the candidates and the registers that are popped by
the gadgets.
To build this oracle, we need to find the ENCLU instruc-
tion first because the EEXIT leaf function can only be in-
voked by the instruction by supplying the index at the rax
register as 0x4. Then, at the EEXIT handler, we identify
the pop gadgets and the registers popped by the gadget.
To find the ENCLU instruction, we take the following strat-
egy. First, for all of the pop gadget candidates, we set
them as return addresses of a ROP chain. Second, we put
0x4, the index of the EEXIT leaf function, as the value to
be popped on that gadgets. For example, if the gadget has
three pops, we put the same number (three) 0x4 on the
stack right after the gadget address. Finally, we put the
Figure 5: An overview of finding memcpy() gadget. (1) The
attacker exploits a memory corruption bug inside the enclave
and overwrites the stack with a gadget chain. (2) The gadgets in
the chain sets the arguments (rdi, rsi, rdx) as the destination
address (0x80000000) in rdi, the source address (0x75000000)
in rsi, and the size (0x8) in rdx to discover the memcpy() gadget.
(3) On the probing, if the final return address points to the
memcpy() gadget, then it will copy the 8 bytes of enclave code
(0xf7500000) to the pre-allocated address in application memory
(0x80000000), which was initialized with all zero. (4) To check
if the memcpy() gadget is found, the attacker (application code)
compares the contents of the memory region (0x80000000) with
zero after each probing. Any non-zero values in the compared
area results the discovery of the memcpy().
address to scan at the end to probe whether the address is
a ENCLU gadget.
The mechanism behind the scene is like the following.
The value 0x4 is the index for the leaf function EEXIT.
What we aim to change the value for is the rax register
because it is the selector of the EEXIT leaf function. For
the combinations of pop gadget candidates and the address
of probing, the enclave will trigger EEXIT if the address of
a gadget that changes rax and the address of ENCLU sits on
the stack. The attacker can catch this by using an SIGSEGV
handler because the return address of EEXIT (stored in the
rbx register) was not correct so that it will generate the
exception. If the handler is invoked and the value of rax
is 0x4, then the return address placed at the end of the
attack stack points to the ENCLU instruction.
After we find the method to invoke EEXIT, we exploit
the EEXIT gadget to identify which registers are popped by
the pop gadget. This is possible because, unlike AEX, the
processor will not automatically clear the register values
on running the EEXIT leaf function. Thus, if we put a pop
gadget, and put some distinguishable values as its items to
530    26th USENIX Security Symposium
USENIX Association
Host operating systemSUntrusted applicationTrusted EnclaveEEXIT_handler(pt_regs*regs, ulongerror){if(error == (PF_PROT | PF_USER |       PF_INSTR) && regs→ ax == 0x4)//EEXIT happens    }pop gadget #1 (pop; ret)pop gadget #2 (pop; pop; ret)pop gadget #3 (pop; pop; ret)……rax= 0x4rbx= 0x4……r14 = 0x4r15 = 0x4Registersbuf[100]Gadget#10x4Gadget#20x40x4......ENCLU?Enclave stackENCLU ?0x00000004: UNMAPPED0x0000000c: UNMAPPEDApplication address spacerax= 0x4rbx= 0x4……r14 = 0x4r15 = 0x4Registers②①③②Host operating system#define BASE ((void*)0x80000000)uint64_t zero = 0;mmap(BASE, 0x1000, 7, MAP_ANONYMOUS | MAP_FIXED | MAP_PRIVATE , -1, 0);ROP_to_enclave(source_addr, dest_addr, length);if (memcmp( BASE, &zero, 0x8) != 0) { //If memory content is changedprintf(“memcpyfound\n”);}Untrusted applicationTrusted Enclave0xF7511000:          pop rdi; ret0xF7511003:          pop rsi; ret0xF7515158:          pop rdx; retBuf[100]0xF75110000x80000000(destination)0xF7500000(source)0xF75151580x08(len)0xF7510000(memcpy?)Enclave stackApplication code①0xF7510000:          memcpy?0x800000007f  45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 000x8000001800 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00Application address space0xF7500000: 7f  45 4c 46 02 01 01 000xF7500008: 00 00 00 00 00 00 00 00 0xF7500010: 03 00 3e 00 01 00 00 00 0xF7500018: d0 ad 00 00 00 00 00 00 Enclave address space④②③④be popped, for instance, 0x1, 0x2, and 0x3, and then run
the EEXIT at the end, we can identify the popped registers
by the values.
For example, if the pop gadget is pop rdi; pop rsi;
pop rdx; ret, then at the handler, we can see the value
of 0x1 at rdi, value of 0x2 at rsi, value of 0x3 at rdx.
Accordingly, we can determine that the gadget pops the
rdi, rsi, and rdx registers.
By using this oracle, we probe all candidates of pop
gadgets until we can control all six registers that are re-
quired to launch the Dark-ROP attack.