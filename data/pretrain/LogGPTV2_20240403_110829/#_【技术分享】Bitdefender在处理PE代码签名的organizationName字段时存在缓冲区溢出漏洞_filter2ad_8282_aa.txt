# 【技术分享】Bitdefender在处理PE代码签名的organizationName字段时存在缓冲区溢出漏洞
|
##### 译文声明
本文是翻译文章，文章来源：blogs.securiteam.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
翻译：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：110RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、漏洞概要**
本文描述了Bitdefender PE引擎中存在的一个缓冲区溢出漏洞。
Bitdefender提供了“反恶意软件（antimalware）”引擎，该引擎可以集成到其他安全厂商的产品中，Bitdefender在自家产品中（如Bitdefender
Internet Security
2017及以下版本）也使用了该引擎。在安全产品的众多功能中，反恶意软件引擎是核心功能，用于扫描潜在的恶意便携式可执行文件（portable
executable，PE）。
**二、漏洞细节**
PE文件可以使用X.509证书进行签名。签名机制可确保可执行文件内容没被篡改，且文件来自于可信来源。
证书信息存放在PE数据的某个目录中，该目录由IMAGE_NT_HEADERS.IMAGE_OPTIONAL_HEADER字段进行定义。
PE文件中的IMAGE_NT_HEADERS结构体以特征字符“PE”开始：
    typedef struct _IMAGE_NT_HEADERS {
        DWORD Signature; "PE"
        IMAGE_FILE_HEADER FileHeader;
        IMAGE_OPTIONAL_HEADER OptionalHeader;
    } IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;
IMAGE_OPTIONAL_HEADER结构体的最后部分包含若干个类型为IMAGE_DATA_DIRECTORY的DataDirectory结构体：
    WORD                               Magic
    BYTE                                 MajorLinkerVersion
    ...
    DWORD                             LoaderFlags
    DWORD                                   NumberOfRvaAndSizes
    IMAGE_DATA_DIRECTORY    DataDirectory[16]
    ----------------------------------------------------    typedef struct _IMAGE_DATA_DIRECTORY {
        DWORD   VirtualAddress;     // RVA of the data
        DWORD   Size;               // Size of the data
    };
DataDirectory[4]代表的是IMAGE_DIRECTORY_ENTRY_SECURITY，指向一个包含WIN_CERTIFICATE结构体的列表。VirtualAddress字段指的是文件偏移量，而不是RVA（相对虚拟地址，Relative
Virtual Address）。
**WIN_CERTIFICATE结构体** 的定义如下所示：
    typedef struct _WIN_CERTIFICATE {
      DWORD dwLength;
      WORD  wRevision;
      WORD  wCertificateType;
      BYTE  bCertificate[ANYSIZE_ARRAY];
    } WIN_CERTIFICATE, *PWIN_CERTIFICATE;
vsserv.exe是Bitdefender的系统服务，该进程会自动扫描PE文件，通过cevakrnl.rv8模块分析PE文件的数字签名。cevakrnl.rv8模块是一个压缩模块，位于“%ProgramFiles%Common
FilesBitdefenderBitdefender Threat ScannerAntivirus_…Plugins”目录。
Bitdefender服务启动时，会解压cevakrnl.rv8模块，并将其加载为可执行代码。当处理经过签名的PE文件时，cevakrnl.rv8!sub_40ACFF0()函数就会被调用。
    cevakrnl.rv8:040AE691                 lea     eax, [ebp+var_2C]
    cevakrnl.rv8:040AE694                 push    eax             ; &(ebp-0x2C) - object placed on the stack
    cevakrnl.rv8:040AE695                 call    sub_40ACFF0     ; call here
    cevakrnl.rv8!sub_40ACFF0() extracts the IMAGE_DIRECTORY_ENTRY_SECURITY offset and size fields.
    cevakrnl.rv8:040ACFF0 sub_40ACFF0     proc near               ; CODE XREF: sub_40AE5C0+D5p
    cevakrnl.rv8:040ACFF0
    ...
    cevakrnl.rv8:040AD007                 mov     edi, [ebp+arg_0]
    ...
    cevakrnl.rv8:040AD025                 mov     eax, [edi+4]    ; eax = IMAGE_NT_HEADERS
    cevakrnl.rv8:040AD025                                         ; contains at
    cevakrnl.rv8:040AD025                                         ; offset  0x0: DWORD Signature ("PE");
    cevakrnl.rv8:040AD025                                         ; offset  0x4: IMAGE_FILE_HEADER FileHeader;
    cevakrnl.rv8:040AD025                                         ; offset 0x18: IMAGE_OPTIONAL_HEADER32 OptionalHeader;
    cevakrnl.rv8:040AD028                 mov     [ebp+arg_0_bkup], edi
    cevakrnl.rv8:040AD02E                 mov     [ebp+numofcrcs], ecx
    cevakrnl.rv8:040AD034                 mov     [ebp+var_1F0], ecx
    cevakrnl.rv8:040AD03A                 mov     esi, [eax+9Ch]  ; attribute certificate size
    cevakrnl.rv8:040AD03A                                         ; OptionalHeader.DataDirectory+0x24
    cevakrnl.rv8:040AD03A                                         ; = IMAGE_DIRECTORY_ENTRY_SECURITY.Size
    cevakrnl.rv8:040AD040                 mov     edx, [eax+98h]  ; attribute certificate offset
    cevakrnl.rv8:040AD040                                         ; OptionalHeader.DataDirectory+0x20
    cevakrnl.rv8:040AD040                                         ; = IMAGE_DIRECTORY_ENTRY_SECURITY.Offset
    cevakrnl.rv8:040AD040                                         ; "Points to a list of WIN_CERTIFICATE structures, defined in WinTrust.H"
程序会从先前定义的偏移量处读取不超过0x2400个字节的数据，并将该数据载入到堆缓冲区中。
    cevakrnl.rv8:040AD092                 cmp     esi, 2400h      ; maximum size
    cevakrnl.rv8:040AD098                 jbe     short @max
    cevakrnl.rv8:040AD09A                 mov     esi, 2400h
    cevakrnl.rv8:040AD09F @max:                                   ; CODE XREF: sub_40ACFF0+A8j
    ...
    cevakrnl.rv8:040AD0C4                 lea     eax, [ebp+var_1C4]
    cevakrnl.rv8:040AD0CA                 push    eax             ; int
    cevakrnl.rv8:040AD0CB                 push    esi             ; size
    cevakrnl.rv8:040AD0CC
    cevakrnl.rv8:040AD0CC loc_40AD0CC:                            ; CODE XREF: sub_40ACFF0+CEj
    cevakrnl.rv8:040AD0CC                 mov     ebx, [ebp+buf]
    cevakrnl.rv8:040AD0D2                 mov     edi, [ebp+arg_0_bkup]
    cevakrnl.rv8:040AD0D8                 push    ebx             ; buf
    cevakrnl.rv8:040AD0D9                 push    edx             ; offset
    cevakrnl.rv8:040AD0DA                 push    edi             ; int
    cevakrnl.rv8:040AD0DB                 call    readatoffset    ; read all structures
    cevakrnl.rv8:040AD0DB                                         ;   typedef struct _WIN_CERTIFICATE {