**Title: Discovering Semantic Web Services with and Without a Common Ontology Commitment**

**Author:** Jorge Cardoso  
**Affiliation:** Department of Mathematics and Engineering, University of Madeira, Portugal  
**Email:** [PI:EMAIL]  
**Conference:** The 3rd International Workshop on Semantic and Dynamic Web Processes (SDWP 2006)  
**In conjunction with:** 2005 IEEE International Conference on Web Services (ICWS 2006)  
**Location:** Chicago, USA  
**Date:** September 18-22, 2006  
**Pages:** 183-190  
**Publisher:** IEEE Computer Society  
**ISBN:** 0-7695-2681-0

**Abstract:**
The primary challenge in the discovery of semantic web services lies in the vast number of available services, making manual selection impractical. This paper introduces an algorithm for matching semantic web service requests against advertisements, which can be integrated into systems like UDDI. The algorithm evaluates the similarity of inputs and outputs based on ontological concepts, even when there is no common ontology commitment. By considering both common and distinguishing features of these concepts, the algorithm enhances the accuracy and relevance of service discovery.

**1. Introduction**

The proliferation of web services and the evolution towards the Semantic Web present opportunities to automate various internet-related tasks. Applications should be capable of automatically or semi-automatically discovering, invoking, composing, and monitoring web services that offer specific functionalities and properties. In the dynamic environment of e-business, the ability to discover web services on the fly and dynamically create business processes is highly desirable. However, this requires not only syntactic but also semantic, functional, and quality-of-service (QoS) considerations.

This paper presents a semantic matching algorithm based on a feature-based model that determines the similarity between two semantic web services using a distance function. The algorithm considers the common and different features of the ontological concepts that specify the web services' inputs and outputs. The remainder of the paper is structured as follows: Section 2 provides an overview of semantic web service annotation. Section 3 details the matching algorithm. Section 4 describes a ranking algorithm for use in discovery mechanisms. Section 5 discusses related work, and Section 6 concludes the paper.

**2. Enhancing Web Services Using Semantics**

To address the heterogeneity, autonomy, and distribution of web services, new approaches have been developed to describe and advertise them semantically. These semantic web services enable automatic annotation, advertisement, discovery, selection, invocation, composition, and execution of inter-organizational business logic. Three main approaches are WSDL-S, OWL-S, and WSMO.

- **WSDL-S**: This approach maps WSDL elements to ontological concepts, allowing users to define the semantics of a web service for a given domain. Elements such as operations, messages, preconditions, and effects can be annotated with metadata.
- **OWL-S**: A language that semantically describes web services using OWL ontologies. It consists of three parts: the service profile, the service model, and the service grounding.
- **WSMO**: Developed by the Digital Enterprise Research Institute (DERI), WSMO provides ontological specifications for describing semantic web services, aiming to solve application integration problems for web services, enterprise application integration (EAI), and service-oriented architectures (SOA).

The algorithm presented in this paper can be used to discover semantic web services defined with WSDL-S, OWL-S, and WSMO. For simplicity, we focus on input and output parameters, but the algorithm can be adapted to match functional and operational semantics, as well as preconditions and effects.

**3. Matching Algorithm for Semantic Web Services**

This section presents an algorithm for matching the input and output concepts of a semantic web service request and advertisement, represented by an ontology. The algorithm leverages the fact that these concepts may have associated properties and considers their level of generality and relationships within the ontology.

**3.1. Formal Definition of a Semantic Web Service**

A semantic web service is defined as a finite sequence of ontological concepts, sws(c, c). The number of elements can vary depending on the number of concepts used in the match. The functionality and QoS of web services can also be considered when matching requests with advertisements.

**3.2. Comparing Semantic Web Services with a Common Ontology Commitment**

When web service input and output concepts (c and c) are related to a global and unique ontology, comparing a concept involves searching for similar concepts within the ontology. Several techniques can be used to compute the degree of match:

1. **Ontology-Based Approaches**: These methods evaluate the semantic relations among concepts in an ontology.
2. **Corpus-Based Approaches**: These methods use a corpus to establish the statistical co-occurrence of words.
3. **Information Theoretic Approaches**: These methods combine corpora and ontologies, using information content from information theory.
4. **Dictionary-Based Approaches**: These methods use a machine-readable dictionary to discover relations between concepts.

**Example:**
Consider an ontology used to semantically annotate a set of web services. If a semantic web service request R has the input concept StaffRecord (c1) and an advertisement A has the input concept EmployeeRecord (c2), then R matches A (i.e., match(c1, c2) = true) because StaffRecord is a subclass of EmployeeRecord. Conversely, if R has the input concept EmployeeRecord (c2) and A has the input concept StaffRecord (c1), A may not be able to handle the input EmployeeRecord, making the match asymmetric (i.e., match(c2, c1) = false).

**4. Ranking Algorithm**

The ranking algorithm uses the matching function to rank semantic web services based on the degree of match. This can be used by discovery mechanisms to select the most suitable services.

**5. Related Work**

Several studies have explored the use of semantic matching algorithms for web service discovery. These include ontology-based, corpus-based, information theoretic, and dictionary-based approaches. Each method has its strengths and weaknesses, and the choice depends on the specific requirements of the application.

**6. Conclusions**

This paper presents a semantic matching algorithm for discovering semantic web services, even in the absence of a common ontology commitment. By evaluating the similarity of inputs and outputs based on ontological concepts, the algorithm enhances the accuracy and relevance of service discovery. Future work will focus on extending the algorithm to consider additional aspects of web services, such as functional and operational semantics, and preconditions and effects.

---

This optimized version of your text is more structured, clear, and professional, with a consistent format and improved readability.