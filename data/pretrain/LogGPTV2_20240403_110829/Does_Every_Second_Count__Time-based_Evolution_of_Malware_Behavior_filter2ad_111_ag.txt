computing surveys (CSUR), vol. 44, no. 2, pp. 1–42, 2008.
[35] C.-I. Fan, H.-W. Hsiao, C.-H. Chou, and Y.-F. Tseng, “Malware
detection systems based on api log data mining,” in 2015 IEEE 39th
annual computer software and applications conference, vol. 3, 2015.
[36] A. Ferrante, E. Medvet, F. Mercaldo, J. Milosevic, and C. A. Visaggio,
“Spotting the malicious moment: Characterizing malware behavior
using dynamic features,” in 2016 11th International Conference on
Availability, Reliability and Security (ARES).
IEEE, 2016.
[37] P. Ferrie, “Attacks on virtual machine emulators,” Tech. Rep., 2007.
[38] D. Fleck, A. Tokhtabayev, A. Alarif, A. Stavrou, and T. Nykodym,
“Pytrigger: A system to trigger & extract user-activated malware
behavior,” in 2013 International Conference on Availability, Reliability
and Security.
IEEE, 2013, pp. 92–101.
[39] V. Foundation. volatility/win7 sp1 x86 vtypes.py. [Online]. Avail-
https://github.com/volatilityfoundation/volatility/blob/master/
able:
volatility/plugins/overlays/windows/win7 sp1 x86 vtypes.py
[40] M. Fredrikson, S. Jha, M. Christodorescu, R. Sailer, and X. Yan,
“Synthesizing near-optimal malware speciﬁcations from suspicious
behaviors,” in 2010 IEEE Symposium on Security and Privacy, 2010.
[41] M. Hatada, M. Akiyama, T. Matsuki, and T. Kasama, “Empowering
anti-malware research in japan by sharing the mws datasets,” Journal
of Information Processing, vol. 23, no. 5, pp. 579–588, 2015.
[42] S. Hochreiter and J. Schmidhuber, “Long short-term memory,” Neural
Computation, vol. 9, no. 8, pp. 1735–1780, 1997.
[43] S.-W. Hsiao, Y.-N. Chen, Y. S. Sun, and M. C. Chen, “Combining
dynamic passive analysis and active ﬁngerprinting for effective bot
malware detection in virtualized environments,” in International Con-
ference on Network and System Security. Springer, 2013.
[44] D. Inoue, K. Yoshioka, M. Eto, Y. Hoshizawa, and K. Nakao, “Mal-
ware behavior analysis in isolated miniature network for revealing
malware’s network activity,” in 2008 IEEE International Conference
on Communications.
IEEE, 2008, pp. 1715–1721.
[45] ——, “Automated malware analysis system and its sandbox for re-
vealing malware’s internal and external activities,” IEICE transactions
on information and systems, vol. 92, no. 5, pp. 945–954, 2009.
J.-w. Jang, J. Woo, J. Yun, and H. K. Kim, “Mal-netminer: malware
classiﬁcation based on social network analysis of call graph,” in
Proceedings of the 23rd International Conference on World Wide Web,
2014, pp. 731–734.
[46]
[47] C. Jindal, C. Salls, H. Aghakhani, K. Long, C. Kruegel, and G. Vigna,
“Neurlux: Dynamic malware analysis without feature engineering,”
in Proceedings of the 35th Annual Computer Security Applications
Conference, 2019, pp. 444–455.
[48] N. M. Johnson, J. Caballero, K. Z. Chen, S. McCamant, P. Poosankam,
D. Reynaud, and D. Song, “Differential slicing: Identifying causal exe-
cution differences for security applications,” in 2011 IEEE Symposium
on Security and Privacy, 2011, pp. 347–362.
[49] M. G. Kang, H. Yin, S. Hanna, S. McCamant, and D. Song, “Em-
ulating emulation-resistant malware,” in Proceedings of the 1st ACM
Workshop on Virtual Machine Security, 2009, pp. 11–22.
[50] Y. Kawakoya, E. Shioji, M. Iwamura, and J. Miyoshi, “Api chaser:
Taint-assisted sandbox for evasive malware analysis,” Journal of
Information Processing, vol. 27, pp. 297–314, 2019.
[51] S. Kilgallon, L. De La Rosa, and J. Cavazos, “Improving the effec-
tiveness and efﬁciency of dynamic malware analysis with machine
learning,” in 2017 Resilience Week (RWS).
IEEE, 2017, pp. 30–36.
[52] D. Kim, D. Mirsky, A. Majlesi-Kupaei, and R. Barua, “A hybrid static
tool to increase the usability and scalability of dynamic detection of
malware,” in 2018 13th International Conference on Malicious and
Unwanted Software (MALWARE).
IEEE, 2018, pp. 115–123.
[53] D. Kirat, G. Vigna, and C. Kruegel, “Barecloud: bare-metal analysis-
based evasive malware detection,” in 23rd USENIX Security Sympo-
sium, 2014, pp. 287–301.
[54] C. Kolbitsch, E. Kirda, and C. Kruegel, “The power of procrastination:
Detection and mitigation of execution-stalling malicious code,” in
Proceedings of the 18th ACM CCS, 2011, pp. 285–296.
[55] D. Korczynski and H. Yin, “Capturing malware propagations with code
injections and code-reuse attacks,” in Proceedings of the 2017 ACM
SIGSAC Conference on Computer & Communications Security, 2017.
[56] T. K. Lengyel, S. Maresca, B. D. Payne, G. D. Webster, S. Vogl, and
A. Kiayias, “Scalability, ﬁdelity and stealth in the drakvuf dynamic
malware analysis system,” in ACSAC, ser. ACSAC 14. ACM, 2014.
[57] M. Lindorfer, C. Kolbitsch, and P. Milani Comparetti, “Detecting
environment-sensitive malware,” in Recent Advances in Intrusion
Detection. Springer Berlin Heidelberg, 2011, pp. 338–357.
[58] M. Lindorfer, M. Neugschwandtner, L. Weichselbaum, Y. Fratanto-
nio, V. Van Der Veen, and C. Platzer, “Andrubis–1,000,000 apps
later: A view on current Android malware behaviors,” in 2014 third
international workshop on building analysis datasets and gathering
experience returns for security (BADGERS).
IEEE, 2014, pp. 3–17.
[59] S.-T. Liu, H.-c. Huang, and Y.-M. Chen, “A system call analysis
method with mapreduce for malware detection,” in 2011 IEEE 17th
international conference on parallel and distributed systems, 2011.
[60] A. Mantovani, S. Aonzo, X. Ugarte-Pedrero, A. Merlo, and
D. Balzarotti, “Prevalence and Impact of Low-Entropy Packing
Schemes in the Malware Ecosystem,” in NDSS Symposium, ser. NDSS
20, February 2020.
[61] L. Martignoni, R. Paleari, and D. Bruschi, “A framework for behavior-
based malware analysis in the cloud,” in International Conference on
Information Systems Security. Springer, 2009.
[62] T. Mikolov, K. Chen, G. Corrado, and J. Dean, “Efﬁcient estimation of
word representations in vector space,” in Proceedings of International
Conference on Learning Representations (ICLR) Workshop, 2013.
J. Milosevic, A. Ferrante, and M. Malek, “What does the memory say?
towards the most indicative features for efﬁcient malware detection,”
in 2016 13th IEEE Annual Consumer Communications & Networking
Conference (CCNC).
IEEE, 2016, pp. 759–764.
[63]
[65]
[64] N. Miramirkhani, M. P. Appini, N. Nikiforakis, and M. Polychronakis,
“Spotless sandboxes: Evading malware analysis systems using wear-
and-tear artifacts,” in 2017 IEEE Symposium on Security and Privacy
(SP), 2017, pp. 1009–1024.
J. Morales, S. Xu, and R. Sandhu, “Analyzing malware detection
efﬁciency with multiple anti-malware programs,” ASE Science Journal,
vol. 1, no. 2, pp. 56–66, 2012.
J. A. Morales, M. Main, W. Luo, S. Xu, and R. Sandhu, “Building
malware infection trees,” in 2011 6th International Conference on
Malicious and Unwanted Software.
J. A. Morales, R. Sandhu, and S. Xu, “Evaluating detection and treat-
ment effectiveness of commercial anti-malware programs,” in 2010
5th International Conference on Malicious and Unwanted Software.
IEEE, 2010, pp. 31–38.
IEEE, 2011, pp. 50–57.
[66]
[67]
[68] A. Moser, C. Kruegel, and E. Kirda, “Exploring multiple execution
paths for malware analysis,” in 2007 IEEE Symposium on Security
and Privacy (SP ’07), 2007, pp. 231–245.
[69] V. T. Nguyen, A. S. Namin, and T. Dang, “Malviz: An interactive
visualization tool for tracing malware,” in Proceedings of the 27th
ACM SIGSOFT International Symposium on Software Testing and
Analysis, 2018, pp. 376–379.
[70] M. Nunes, P. Burnap, O. Rana, P. Reinecke, and K. Lloyd, “Getting to
the root of the problem: A detailed comparison of kernel and user level
data for dynamic malware analysis,” Journal of Information Security
and Applications, vol. 48, pp. 102–365, 2019.
17
[71] P. O’Kane, S. Sezer, K. McLaughlin, and E. G. Im, “Svm training
phase reduction using dataset feature ﬁltering for malware detection,”
IEEE transactions on information forensics and security, vol. 8, no. 3,
pp. 500–509, 2013.
[72] R. Paleari, L. Martignoni, G. F. Roglia, and D. Bruschi, “A ﬁstful
of red-pills: How to automatically generate procedures to detect
cpu emulators,” in Proceedings of the 3rd USENIX Conference on
Offensive Technologies, ser. WOOT’09. USENIX Association, 2009.
[73] R. Pascanu, J. W. S. W. Stokes, H. Sanossian, M. Marinescu, and
A. Thomas, “Malware classiﬁcation with recurrent networks,” in
Proceedings of IEEE International Conference on Acoustics, Speech
and Signal Processing (ICASSP), 2015.
[74] G. P´ek, B. Bencs´ath, and L. Butty´an, “nEther: In-guest detection
of out-of-the-guest malware analyzers,” in Proceedings of the Fourth
European Workshop on System Security. ACM, 2011, pp. 3:1–3:6.
[75] F. Peng, Z. Deng, X. Zhang, D. Xu, Z. Lin, and Z. Su, “X-force: Force-
executing binary programs for security applications,” in Proceedings
of the 23rd USENIX Conference on Security Symposium, ser. SEC ’14.
USENIX Association, 2014, pp. 829–844.
[76] H. Petritsch, “Understanding and replaying network trafﬁc in Windows
XP for dynamic malware analysis,” Master’s thesis, TU Wien, 2007.
J. Pfoh, C. Schneider, and C. Eckert, “Leveraging string kernels for
malware detection,” in Proceedings of International Conference on
Network and System Security, 2013, pp. 206–219.
[77]
[78] M. Polino, A. Continella, S. Mariani, S. D’Alessio, L. Fontana,
F. Gritti,
anti-
instrumentation-equipped malware,” in International Conference on
Detection of Intrusions and Malware, and Vulnerability Assessment.
Springer, 2017, pp. 73–96.
and S. Zanero,
defeating
“Measuring
and
[79] D. Powers, “Evaluation: From precision, recall and f-factor to roc,
informedness, markedness and correlation,” Journal of Mach Learn
Technologies, vol. 2, pp. 37–63, 2011.
[80] T. Raffetseder, C. Kruegel, and E. Kirda, “Detecting system em-
the 10th International Conference on
ulators,” in Proceedings of
Information Security. Springer Berlin Heidelberg, 2007.
[81] C. Rathnayaka and A. Jamdagni, “An efﬁcient approach for advanced
malware analysis using memory forensic technique,” in 2017 IEEE
Trustcom/BigDataSE/ICESS.
IEEE, 2017, pp. 1145–1150.
[82] C. Rossow, C. J. Dietrich, H. Bos, L. Cavallaro, M. Van Steen, F. C.
Freiling, and N. Pohlmann, “Sandnet: Network trafﬁc analysis of
malicious software,” in Proceedings of the First Workshop on Building
Analysis Datasets and Gathering Experience Returns for Security.
ACM, 2011.
[83] P. Royal, M. Halpin, D. Dagon, R. Edmonds, and W. Lee, “Polyun-
pack: Automating the hidden-code extraction of unpack-executing
malware,” in 2006 22nd Annual Computer Security Applications
Conference (ACSAC’06).
IEEE, 2006, pp. 289–300.
[84] L. Rudman and B. Irwin, “Dridex: Analysis of the trafﬁc and automatic
generation of iocs,” in 2016 Information Security for South Africa
(ISSA).
IEEE, 2016, pp. 77–84.
[85] Z. Salehi, A. Sami, and M. Ghiasi, “Using feature generation from api
calls for malware detection,” Computer Fraud & Security, vol. 2014,
no. 9, 2014.
[86] M. Sebasti´an, R. Rivera, P. Kotzias, and J. Caballero, “Avclass: A tool
for massive malware labeling,” in RAID. Springer, 2016.
[87] G. Severi, T. Leek, and B. Dolan-Gavitt, “Malrec: compact full-trace
malware recording for retrospective deep analysis,” in International
Conference on Detection of Intrusions and Malware, and Vulnerability
Assessment. Springer, 2018, pp. 3–23.
[88] T. Shibahara, T. Yagi, M. Akiyama, D. Chiba, and T. Yada, “Ef-
ﬁcient dynamic malware analysis based on network behavior using
deep learning,” in 2016 IEEE Global Communications Conference
(GLOBECOM).
J. Shirley and D. Evans, “The user is not the enemy: Fighting malware
by tracking user intentions,” in Proceedings of the 2008 New Security
Paradigms Workshop, 2008, pp. 33–45.
IEEE, 2016, pp. 1–7.
[89]
[90] M. Stamatogiannakis, P. Groth, and H. Bos, “Decoupling provenance
capture and analysis from execution,” in 7th USENIX Workshop on
the Theory and Practice of Provenance (TaPP’15), 2015.
[91] B. Sun, A. Fujino, T. Mori, T. Ban, T. Takahashi, and D. Inoue,
“Automatically generating malware analysis reports using sandbox
18
logs,” IEICE TRANSACTIONS on Information and Systems, vol. 101,
no. 11, pp. 2622–2632, 2018.
[92] R. Sun, X. Yuan, P. He, Q. Zhu, A. Chen, A. Gregio, D. Oliveira, and
X. Li, “Learning fast and slow: Propedeutica for real-time malware
detection,” 2017.
[93] T. Teller and A. Hayon, “Enhancing automated malware analysis
machines with memory analysis,” Black Hat USA, 2014.
[94] R. Tian, R. Islam, L. Batten, and S. Versteeg, “Differentiating malware
from cleanware using behavioural analysis,” in 2010 5th international
conference on malicious and unwanted software, 2010, pp. 23–30.
[95] P. Trinius, T. Holz, J. G¨obel, and F. C. Freiling, “Visual analysis of
malware behavior using treemaps and thread graphs,” in 2009 6th
International Workshop on Visualization for Cyber Security, 2009.
[96] X. Ugarte-Pedrero, D. Balzarotti, I. Santos, and P. G. Bringas, “[SoK]
Deep Packer Inspection: A Longitudinal Study of the Complexity of
Run-Time Packers,” in IEEE Symposium on Security and Privacy.
IEEE, 2015.
[97] ——, “RAMBO: Run-time packer Analysis with Multiple Branch
Observation,” July 2016.
[98] X. Ugarte-Pedrero, M. Graziano, and D. Balzarotti, “A close look at a
daily dataset of malware samples,” ACM Transactions on Privacy and
Security (TOPS), vol. 22, no. 1, pp. 6:1–6:30, January 2019.
[99] C. S. Veerappan, P. L. K. Keong, Z. Tang, and F. Tan, “Taxonomy
on malware evasion countermeasures techniques,” in 2018 IEEE 4th
World Forum on Internet of Things (WF-IoT).
IEEE, 2018.
[100] A. Wichmann and E. Gerhards-Padilla, “Using infection markers
as a vaccine against malware attacks,” in 2012 IEEE International
Conference on Green Computing and Communications.
IEEE, 2012.
[101] C. Willems, T. Holz, and F. Freiling, “Toward automated dynamic
malware analysis using cwsandbox,” IEEE Security & Privacy, vol. 5,
no. 2, pp. 32–39, 2007.
[102] T. W¨uchner, M. Ochoa, and A. Pretschner, “Robust and effective
malware detection through quantitative data ﬂow graph metrics,” in
DIMVA. Springer, 2015.
[103] C. Wueest. Does malware still detect virtual machines? [Online].
https://community.broadcom.com/symantecenterprise/
Available:
communities/community-home/librarydocuments/viewdocument?
DocumentKey=3cb6bda8-bcb6-49c6-b9e7-8247466e8441
[104] Xu Chen, J. Andersen, Z. M. Mao, M. Bailey, and J. Nazario, “Towards
an understanding of anti-virtualization and anti-debugging behavior
in modern malware,” in 2008 IEEE International Conference on
Dependable Systems and Networks With FTCS and DCC (DSN), 2008.
[105] L.-K. Yan, M. Jayachandra, M. Zhang, and H. Yin, “V2e: Combining
hardware virtualization and softwareemulation for transparent and
extensible malware analysis,” SIGPLAN Not., vol. 47, no. 7, Mar. 2012.
[106] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda, “Panorama:
capturing system-wide information ﬂow for malware detection and
analysis,” in Proceedings of the 14th ACM conference on Computer
and communications security, 2007, pp. 116–127.
[107] A. Yokoyama, K. Ishii, R. Tanabe, Y. Papa, K. Yoshioka, T. Mat-
sumoto, T. Kasama, D. Inoue, M. Brengel, M. Backes et al., “Sand-
print: ﬁngerprinting malware sandboxes to provide intelligence for
sandbox evasion,” in RAID. Springer, 2016, pp. 165–187.
[108] K. Yoshioka, D. Inoue, M. Eto, Y. Hoshizawa, H. Nogawa, and
K. Nakao, “Malware sandbox analysis for secure observation of
vulnerability exploitation,” IEICE transactions on information and
systems, vol. 92, no. 5, pp. 955–966, 2009.
[109] K. Yoshioka, T. Kasama, and T. Matsumoto, “Sandbox analysis with
controlled internet connection for observing temporal changes of
malware behavior,” in 2009 JWIS, 2009.
[110] H. Zhang, Y. Cole, L. Ge, S. Wei, W. Yu, C. Lu, G. Chen, D. Shen,
E. Blasch, and K. D. Pham, “Scanme mobile: a cloud-based Android
malware analysis service,” ACM SIGAPP Applied Computing Review,
vol. 16, no. 1, pp. 36–49, 2016.
[111] Q. Zhao, Y. Shi, and L. Hong, “Gb-cent: Gradient boosted categorical
embedding and numerical trees,” in Proceedings of the 26th Interna-
tional Conference on World Wide Web, 2017, pp. 1311–1319.
[112] Z.-H. Zhou and J. Feng, “Deep forest: Towards an alternative to deep
neural networks,” in IJCAI, 2017.