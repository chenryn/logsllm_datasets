call to be reentrant if it can be reached in a recursive call to the
calling contract. However, a reentrant call is benign unless it
operates on an inconsistent state of the contract. SECURIFY con-
siders SOLIDITY send and transfer APIs as external calls,
and raisesd violation alerts. Since the gas limit (2,300) for these
APIs is inadequate to mount a reentrancy attack, we refrain from
modeling these APIs in our analysis. Additionally, SECURIFY
failed to identify whether a function containing the external
call is access-protected, e.g., it contains the msg.sender ==
owner check, which prohibits anyone else but only the contract
owner from entering the function. For both the cases above,
though the EXPLORER detected such functions as potentially
unsafe, the benefit of symbolic evaluation became evident as
the REFINER eliminated these alerts in the subsequent phase.
MYTHRIL detects a state variable read after an external call as
malicious reentrancy. However, if that variable is not written in
any other function, that deems the read safe. Since SAILFISH
looks for hazardous access as a pre-requisite of reentrancy, it
does not raise a warning there. However, SAILFISH incurs false
positives due to imprecise static taint analysis. A real-world case
study of such a false positive is presented in Appendix II-C.
To detect TOD attacks, SECURIFY checks for writes to
a storage variable that influences an Ether-sending external
call. We observed that several contracts flagged by SECURIFY
have storage writes inside the contract’s constructor. Hence,
such writes can only happen once during contract creation.
Moreover, several contracts flagged by SECURIFY have
both storage variable writes, and the Ether sending external
call inside methods which are guarded by predicates like
require(msg.sender == owner)—limiting access to
these methods only to the contract owner. Therefore, these
methods cannot be leveraged to launch a TOD attack. SAILFISH
prunes the former case during the EXPLORE phase itself. For
In order
the latter, SAILFISH leverages the REFINE phase, where it finds
no difference in the satisfiability of two different symbolic
evaluation traces. In Appendix II-C, we present a real-world
case where both SECURIFY and SAILFISH incur a false positive
due to insufficient reasoning of contract semantics.
False negative analysis. SECURIFY missed valid reentrancy
bugs because it considers only Ether sending call instructions.
In reality, any call can be leveraged to trigger reentrancy by
transferring control to the attacker if its destination is tainted. To
consider this scenario, SAILFISH carries out a taint analysis to
determine external calls with tainted destinations. Additionally,
SECURIFY missed reentrancy bugs due to lack of support for
destructive write (DW), and delegate-based patterns. False
negatives incurred by MYTHRIL are due to its incomplete state
space exploration within specified time-out. Our manual analysis
did not observe any missed detection by SAILFISH.
Finding zero-day bugs using SAILFISH.
to
demonstrate that SAILFISH is capable of finding zero-day
vulnerabilities, we first identified the contracts flagged only by
SAILFISH, but no other tool. Out of total 401 reentrancy-only
and 721 TOD-only contracts, we manually selected 88 and
107 contracts, respectively. We limited our selection effort only
to contracts that contain at most 500 lines of code, and are
relatively easier to reason about in a reasonable time budget.
Our manual analysis confirms 47 contracts are exploitable (not
just vulnerable)—meaning that they can be leveraged by an
attacker to accomplish a malicious goal, e.g., draining Ether,
or corrupting application-specific metadata, thereby driving the
contract to an unintended state. We present a few vulnerable
patterns, and their exploitability in Appendix II-A.
Exploitability of the bugs. We classified the true alerts emitted
by SAILFISH into the following categories—An exploitable bug
leading to the stealing of Ether, or application-specific metadata
corruption (e.g., an index, a counter, etc.), and a non-exploitable
yet vulnerable bug that can be reached, or triggered (unlike a false
positive), but its side-effect is not persistent. For example, a reen-
trant call (the attacker) is able to write to some state variable V in
an unintended way. However, along the flow of execution, V is
overwritten, and its correct value is restored. Therefore, the effect
of reentrancy did not persist. Another example would be a state
variable that is incorrectly modified during the reentrant call, but
the modification does not interfere with the application logic, e.g.,
it is just written in a log. Out of the 47 zero-day bugs that SAIL-
FISH discovered, 11 allow an attacker to drain Ethers, and for
the remaining 36 contracts, the bugs, at the very least (minimum
impact), allow the attacker to corrupt contract metadata—leading
to detrimental effects on the underlying application. For example,
during our manual analysis, we encountered a vulnerable con-
tract implementing a housing tracker that the allowed addition,
removal, and modification of housing details. If a house owner
adds a new house, the contract mandates the old housing listing
to become inactive, i.e., at any point, there can only be one house
owned by an owner that can remain in an active state. However,
we could leverage the reentrancy bug in the contract in a way so
that an owner can have more than one active listing. Therefore,
these 36 contracts could very well be used for stealing Ethers as
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
172
Tool
SECURIFY
VANDAL
MYTHRIL
OYENTE
SAILFISH
Small Medium
Large
Full
85.51
16.35
917.99
148.35
9.80
642.22
74.77
1,046.80
521.16
80.78
823.48
177.70
1,037.77
675.05
246.89
196.52
30.68
941.04
183.45
30.79
TABLE IV: Analysis times (in seconds) on four datasets.
well, however, we did not spend time and effort to turn those into
exploits as this is orthogonal to our current research goal.
Comparison against SEREUM. Since SEREUM is not publicly
available, we could only compare SAILFISH on the contracts in
their released dataset. SEREUM [50] flagged total 16 contracts
for potential reentrancy attacks, of which 6 had their sources
available in the ETHERSCAN, and therefore, could be analyzed
by SAILFISH. Four out of those 6 contracts were developed
for old SOLIDITY versions (<0.3.x)—not supported by our
framework. We ported those contracts to a supported SOLIDITY
version (0.4.14) by making minor syntactic changes not
related to their functionality. According to SEREUM, of those 6
contracts, only one (TheDAO) was a true vulnerability, while five
others were its false alarms. While SAILFISH correctly detects
TheDAO as unsafe, it raises a false alarm for another contract
(CCRB) due to imprecise modeling of untrusted external call.
RQ1: SAILFISH emits the fewest warnings in the
full dataset, and finds 47 zero-day vulnerabilities. On
our manual analysis dataset, SAILFISH detects all the
vulnerabilities with the lowest false positive rate.
C. Performance analysis
Table IV reports the average analysis times for each of the
small, medium, and large datasets along with the full dataset.
As the data shows, the analysis time increases with the size
of the dataset for all the tools. VANDAL [23] is the fastest
analysis across all the four datasets with an average analysis
time of 30.68 seconds with highest emitted warnings (52.27%).
SECURIFY [54] is approximately 6x more expensive than
VANDAL over the entire dataset. The average analysis time
of MYTHRIL [3] is remarkably high (941.04 seconds), which
correlates with its high number of time-out cases (66.84%). In
fact, MYTHRIL’s analysis time even for the small dataset is as
high as 917.99 seconds. However, another symbolic execution
based tool OYENTE [46] has average analysis time close to
19% to that of MYTHRIL, as it fails to analyze most of the
medium to large contracts due to the unsupported SOLIDITY
version. Over the entire dataset, SAILFISH takes as low as 30.79
seconds with mean analysis times of 9.80, 80.78, and 246.89
seconds for small, medium, and large ones, respectively. The
mean static analysis time is 21.74 seconds as compared to the
symbolic evaluation phase, which takes 39.22 seconds. The value
summary computation has a mean analysis time of 0.06 seconds.
RQ2: While the analysis time of SAILFISH is comparable
to that of VANDAL, it is 6, 31, and 6 times faster than
SECURIFY, MYTHRIL, and OYENTE, respectively.
Fig. 11: Ablation study showing the effectiveness of value-summary
analysis for reentrancy and TOD detection.
D. Ablation study
Beneﬁt of value-summary analysis: To gain a better
understanding of the benefits of the symbolic evaluation
(REFINE) and the value-summary analysis (VSA), we performed
an ablation study by configuring SAILFISH in three distinct
modes: (a) static-only (SO), only the EXPLORER runs, and
(b) static + havoc (St+HV), the REFINER runs, but it havocs
all the state variables after the external call. (c) static + value
summary (St+VS), the REFINER runs, and it is supplied with the
value summary facts that the EXPLORER computes. Figure 11
shows the number of warnings emitted by SAILFISH in each of
the configurations. In SO mode, the EXPLORE phase generates
3,391 reentrancy and 14,485 TOD warnings, which accounts for
3.92% and 16.75% of the contracts, respectively. Subsequently,
St+HV mode brings down the number of reentrancy and TOD
warnings to 2,436 and 10,560, which is a 28.16% and 27.10%
reduction with respect to the SO baseline. Lastly, by leveraging
value summary, SAILFISH generates 2,076 reentrancy and
7,555 TOD warnings in St+VS mode, which is a 14.78%
and 28.46% improvement over St+HV configuration. This
experiment demonstrates that our symbolic evaluation and VSA
are indeed effective to prune false positives. Appendix II-B
presents a real-world case study showing the advantage of VSA.
Additionally, we discuss the relative performance of our VSA
over a path-by-path summary technique in Appendix I.
RQ3: Our symbolic evaluation guided by VSA plays a key
role in achieving high precision and scalability.
IX. LIMITATIONS
Source-code dependency. Although SAILFISH is built on top
of the SLITHER [28] framework, which requires access to the
source code, we do not rely on any rich semantic information
from the contract source to aid our analysis. In fact, our choice
of source code was motivated by our intention to build SAILFISH
as a tool for developers, while enabling easier debugging and
introspection as a side-effect. Our techniques are not tied to
source code, and could be applied directly to bytecode by
porting the analysis on top of a contract decompiler that supports
variable and CFG recovery.
Potential unsoundness. We do not claim soundness with respect
to the detection rules of reentrancy and TOD bugs. Also, the meta-
language our value-summary analysis is based on distills the core
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
173
ReentrancyTOD0283356678500113331416717000Number of warnings33911448524361056020767555StSt+HVSt+VSfeatures of the SOLIDITY language, it is not expressive enough to
model all the complex aspects [41], e.g., exception propagation,
transaction reversion, out-of-gas, etc. In turn, this becomes
the source of unsoundness of the REFINER. Additionally,
SAILFISH relies on SLITHER [28] for static analysis. Therefore,
any soundness issues in SLITHER, e.g., incomplete call graph
construction due to indirect or unresolved external calls, inline
assembly, etc., will be propagated to SAILFISH.
X. RELATED WORK
[3], OYENTE
execution. MYTHRIL
Static analysis. Static analysis tools such as SECURIFY [54],
MADMAX [36], ZEUS [42], SMARTCHECK [52], and
SLITHER [28] detect specific vulnerabilities in smart contracts.
Due to their reliance on bug patterns, they over-approximate pro-
gram states, which can cause false positives and missed detection
of bugs. To mitigate this issue, we identified two complementary
causes of SI bugs—Stale read and Destructive write. While the
former is more precise than the patterns found in the previous
work, the latter, which is not explored in the literature, plays a role
in the missed detection of bugs (Section III). Unlike SAILFISH,
which focuses on SI bugs, MADMAX [36] uses a logic-based
paradigm to target gas-focused vulnerabilities. SECURIFY [54]
first computes control and data-flow facts, and then checks for
compliance and violation signatures. SLITHER [28] uses data-
flow analysis to detect bug patterns scoped within a single func-
tion. The bugs identified by these tools are either local in nature,
or they refrain from doing any path-sensitive reasoning—leading
to spurious alarms. To alleviate this issue, SAILFISH introduces
the REFINE phase that prunes significant numbers of false alarms.
Symbolic
[46],
ETHBMC [32], SMARTSCOPY [30], and MANTICORE [13]
rely on symbolic execution to explore the state-space of the
contract. ETHBMC [32], a bounded model checker, models
EVM transactions as state transitions. TEETHER [44] generates
constraints along a critical path having attacker-controlled
instructions. These tools suffer from the limitation of traditional
symbolic execution, e.g., path explosion, and do not scale
well. However, SAILFISH uses the symbolic execution only for
validation, i.e., it resorts to under-constrained symbolic execution
aided by VSA that over-approximates the preconditions required
to update the state variables across all executions.
Dynamic analysis. While SEREUM [50] and SODA [26]
perform run-time checks within the context of a modified
EVM, TXSPECTOR [59] performs a post-mortem analysis
of transactions. ECFCHECKER [37] detects if the execution
of a smart contract is effectively callback-free (ECF), i.e., it
checks if two execution traces, with and without callbacks, are
equivalent—a property that holds for a contract not vulnerable to
reentrancy attacks. SAILFISH generalizes ECF with the notion of
hazardous access for SI attacks. Thus, SAILFISH is not restricted
to reentrancy, instead, can express all properties that are caused
by state inconsistencies. Dynamic analysis tools [40], [56], [57],
[2], [47] rely on manually-written test oracles to detect violations
in response to inputs generated according to blackbox or greybox
strategies. Though precise, these tools lack coverage—which
is not an issue for static analysis tools, such as SAILFISH.
State inconsistency (SI) notions. SERIF [25] detects reen-
trancy attacks using a notion of trusted-untrusted computation
that happens when a low-integrity code, invoked by a high-
integrity code, calls back into the high-integrity code before re-
turning. Code components are explicitly annotated with informa-
tion flow (trust) labels, which further requires a semantic under-
standing of the contract. Then, they design a type system that uses
those trust labels to enforce secure information flow through the
use of a combination of static and dynamic locks. However, this
notion is unable to capture TOD vulnerabilities, another impor-
tant class of SI bugs. In SAILFISH, we take a different approach
where we define SI bugs in terms of the side-effect, i.e., creation
of an inconsistent state, of a successful attack. Further, we model
the possibility of an inconsistent state resulting from such an
attack through hazardous access. Perez et. al. [48], VANDAL [23],
OYENTE [46] consider reentrancy to be the possibility of being
able to re-enter the calling function. Not only do these tools con-
sider only single-function reentrancy, but also the notion encom-
passes legitimate (benign) reentrancy scenarios [50], e.g., ones
that arise due to withdrawal pattern in SOLIDITY. In addition,
SAILFISH requires the existence of hazardous access, which en-
ables us to account for cross-function reentrancy bugs, as well as
model only malicious reentrancy scenarios. To detect reentrancy,
SECURIFY [54] looks for the violation of the “no write after
external call” (NW) pattern, which is similar to the “Stale Read”
(SR) notion of SAILFISH. Not all the tools that support reentrancy
bugs have support for TOD. While SAILFISH shares its notion of
TOD with SECURIFY, OYENTE marks a contract vulnerable to
TOD if two traces have different Ether flows. Unlike SAILFISH
for which hazardous access is a pre-requisite, OYENTE raises
alarm for independent Ether flows not even related to SI.
XI. CONCLUSION
We propose SAILFISH, a scalable hybrid tool for automatically
identifying SI bugs in smart contracts. SAILFISH combines
lightweight exploration phase followed by symbolic evaluation
aided by our novel VSA. On the ETHERSCAN dataset, SAILFISH
significantly outperforms state of the art analyzers in terms of
precision, and performance, identifying 47 previously unknown
vulnerable (and exploitable) contracts.
XII. ACKNOWLEDGMENTS
We want to thank our anonymous shepherd and anonymous
reviewers for their valuable comments and feedback to improve
our paper. This research is supported by DARPA under
the agreement number HR001118C006, by the NSF under
awards CNS-1704253, and 1908494, by the ONR under award
N00014-17-1-2897, and by the Google Faculty Research Award.