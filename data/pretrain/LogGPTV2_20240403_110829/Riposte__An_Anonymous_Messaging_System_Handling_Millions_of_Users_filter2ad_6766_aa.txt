title:Riposte: An Anonymous Messaging System Handling Millions of Users
author:Henry Corrigan-Gibbs and
Dan Boneh and
David Mazières
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Riposte: An Anonymous Messaging System
Handling Millions of Users
Henry Corrigan-Gibbs, Dan Boneh, and David Mazières
Stanford University
Abstract—This paper presents Riposte, a new system for
anonymous broadcast messaging. Riposte is the ﬁrst such system,
to our knowledge, that simultaneously protects against trafﬁc-
analysis attacks, prevents anonymous denial-of-service by mali-
cious clients, and scales to million-user anonymity sets. To achieve
these properties, Riposte makes novel use of techniques used in
systems for private information retrieval and secure multi-party
computation. For latency-tolerant workloads with many more
readers than writers (e.g. Twitter, Wikileaks), we demonstrate
that a three-server Riposte cluster can build an anonymity set of
2,895,216 users in 32 hours.
Index Terms—anonymity; messaging; privacy; private infor-
mation retrieval;
I. INTRODUCTION
In a world of ubiquitous network surveillance [6], [34], [35],
[39], [62], prospective whistleblowers face a daunting task.
Consider, for example, a government employee who wants to
anonymously leak evidence of waste, fraud, or incompetence
to the public. The whistleblower could email an investigative
reporter directly, but post hoc analysis of email server logs
could easily reveal the tipster’s identity. The whistleblower
could contact a reporter via Tor [27] or another low-latency
anonymizing proxy [31], [53], [59], [71], but this would leave
the leaker vulnerable to trafﬁc-analysis attacks [4], [60], [61].
The whistleblower could instead use an anonymous messaging
system that protects against trafﬁc analysis attacks [14], [38],
[77], but these systems typically only support relatively small
anonymity sets (tens of thousands of users, at most). Protecting
whistleblowers in the digital age requires anonymous messag-
ing systems that provide strong security guarantees, but that
also scale to very large network sizes.
In this paper, we present a new system that attempts to
make trafﬁc-analysis-resistant anonymous broadcast messag-
ing practical at Internet scale. Our system, called Riposte,
allows a large number of clients to anonymously post messages
to a shared “bulletin board,” maintained by a small set of
minimally trusted servers. (As few as three non-colluding
servers are sufﬁcient). Whistleblowers could use Riposte as a
platform for anonymously publishing Tweet- or email-length
messages and could combine it with standard public-key
encryption to build point-to-point private messaging channels.
While there is an extensive literature on anonymity sys-
tems [22], [28], Riposte offers a combination of security and
scalability properties unachievable with current designs. To
the best of our knowledge, Riposte is the only anonymous
messaging system that simultaneously:
1) protects against trafﬁc analysis attacks,
2) prevents malicious clients from anonymously executing
denial-of-service attacks, and
3) scales to anonymity set sizes of millions of users, for
certain latency-tolerant applications.
We achieve these three properties in Riposte by adapting three
different techniques from the cryptography and privacy litera-
ture. First, we defeat trafﬁc-analysis attacks and protect against
malicious servers by using a protocol, inspired by client/server
DC-nets [14], [77], in which every participating client sends
a ﬁxed-length secret-shared message to the system’s servers
in every time epoch. Second, we achieve efﬁcient disruption
resistance by using a secure multi-party protocol to quickly
detect and exclude malformed client requests [29], [41], [78].
Third, we achieve scalability by leveraging a speciﬁc technique
developed in the context of private information retrieval (PIR)
to minimize the number of bits each client must upload to
each server in every time epoch. The tool we use is called a
distributed point function [16], [37]. The novel synthesis of
these techniques leads to a system that is efﬁcient (in terms
of bandwidth and computation) and practical, even for large
anonymity sets.
Our particular use of private information retrieval (PIR)
protocols is unusual: PIR systems [17] allow a client
to
efﬁciently read a row from a database, maintained collectively
at a set of servers, without revealing to the servers which row
it is reading. Riposte achieves scalable anonymous messaging
by running a private information retrieval protocol in reverse:
with reverse PIR, a Riposte client can efﬁciently write into a
database maintained at the set of servers without revealing to
the servers which row it has written [67].
As we discuss later on, a large Riposte deployment could
form the basis for an anonymous Twitter service. Users would
“tweet” by using Riposte to anonymously write into a database
containing all clients’ tweets for a particular time period. In
addition, by having read-only users submit “empty” writes to
the system, the effective anonymity set can be much larger
than the number of writers, with little impact on system
performance.
Messaging in Riposte proceeds in regular time epochs (e.g.,
each time epoch could be one hour long). To post a message,
the client generates a write request, cryptographically splits it
into many shares, and sends one share to each of the Riposte
servers. A coalition of servers smaller than a certain threshold
cannot learn anything about the client’s message or write
location given its subset of the shares.
© 2015, Henry Corrigan-Gibbs. Under license to IEEE.
© 2015, Henry Corrigan-Gibbs. Under license to IEEE.
DOI 10.1109/SP.2015.27
DOI 10.1109/SP.2015.27
321
321
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:16 UTC from IEEE Xplore.  Restrictions apply. 
The Riposte servers collect write requests until the end of
the time epoch, at which time they publish the aggregation
of the write requests they received during the epoch. From
this information, anyone can recover the set of posts uploaded
during the epoch, but the system reveals no information about
who posted which message. The identity of the entire set of
clients who posted during the interval is known, but no one
can link a client to a post. (Thus, each time epoch must be
long enough to ensure that a large number of honest clients
are able to participate in each epoch.)
In this paper, we describe two Riposte variants, which
offer slightly different security properties. The ﬁrst variant
scales to very large network sizes (millions of clients) but
requires three servers such that no two of these servers collude.
The second variant is more computationally expensive, but
provides security even when all but one of the s > 1 servers
are malicious. Both variants maintain their security properties
when network links are actively adversarial, when all but two
of the clients are actively malicious, and when the servers are
actively malicious (subject to the non-collusion requirement
above).
The three-server variant uses a computationally inexpensive
multi-party protocol to detect and exclude malformed client
requests. (Figure 1 depicts this protocol at a high-level.) The
s-server variant uses client-produced zero-knowledge proofs
to guarantee the well-formedness of client requests.
Unlike Tor [27] and other low-latency anonymity sys-
tems [38], [48], [53], [71], Riposte protects against active
trafﬁc analysis attacks by a global network adversary. Prior
systems have offered trafﬁc-analysis-resistance only at the cost
of scalability:
• Mix-net-based systems [15] require large zero-knowledge
proofs of correctness to provide privacy in the face of
active attacks by malicious servers [2], [5], [32], [45],
[65].
• DC-nets-based systems require clients to transfer data
linear in the size of the anonymity set [14], [77] and rely
on expensive zero-knowledge proofs to protect against
malicious clients [20], [44].
We discuss these systems and other prior work in Section VII.
Experiments. To demonstrate the practicality of Riposte for
anonymous broadcast messaging (i.e., anonymous whistle-
blowing or microblogging), we implemented and evaluated the
complete three-server variant of the system. When the servers
maintain a database table large enough to ﬁt 65,536 160-byte
Tweets, the system can process 32.8 client write requests per
second. In Section VI-C, we discuss how to use a table of this
size as the basis for very large anonymity sets in read-heavy
applications. When using a larger 377 MB database table (over
2.3 million 160-byte Tweets), a Riposte cluster can process 1.4
client write requests per second.
Writing into a 377 MB table requires each client to upload
less than 1 MB of data to the servers. In contrast, a two-server
DC-net-based system would require each client to upload more
than 750 MB of data. More generally, to process a Riposte
322322
client request for a table of size L, clients and servers perform
only O(
√
L) bytes of data transfer.
The servers’ AES-NI encryption throughput limits the rate
at which Riposte can process client requests at large table
sizes. Thus, the system’s capacity to handle client write request
scales with the number of available CPU cores. A large
Riposte deployment could shard the database table across k
machines to achieve a near-k-fold speedup.
We tested the system with anonymity set sizes of up
to 2,895,216 clients, with a read-heavy latency-tolerant mi-
croblogging workload. To our knowledge, this is the largest
anonymity set ever constructed in a system defending against
trafﬁc analysis attacks. Prior DC-net-based systems scaled to
5,120 clients [77] and prior veriﬁable-shufﬂe-based systems
scaled to 100,000 clients [5]. In contrast, Riposte scales to
millions of clients for certain applications.
Contributions. This paper contributes:
• two new bandwidth-efﬁcient and trafﬁc-analysis-resistant
anonymous messaging protocols, obtained by running
private information retrieval protocols “in reverse” (Sec-
tions III and IV),
• a fast method for excluding malformed client requests
(Section V),
• a method to recover from transmission collisions in DC-
net-style anonymity systems,
of
• experimental
protocols with
anonymity set sizes of up to 2,895,216 users (Section VI).
evaluation
these
In Section II, we introduce our goals, threat model, and
security deﬁnitions. Section III presents the high-level system
architecture. Section IV and Section V detail our techniques
for achieving bandwidth efﬁciency and disruption resistance
in Riposte. We evaluate the performance of the system in
Section VI, survey related work in Section VII, and conclude
in Section VIII.
II. GOALS AND PROBLEM STATEMENT
In this section, we summarize the high-level goals of the
Riposte system and present our threat model and security
deﬁnitions.
A. System Goals
Riposte implements an anonymous bulletin board using a
primitive we call a write-private database scheme. Riposte
enables clients to write into a shared database, collectively
maintained at a small set of servers, without revealing to the
servers the location or contents of the write. Conceptually, the
database table is just a long ﬁxed-length bitstring divided into
ﬁxed-length rows.
To write into the database, a client generates a write request.
The write request encodes the message to be written and the
row index at which the client wants to write. (A single client
write request modiﬁes a single database row at a time.) Using
cryptographic techniques, the client splits its write request into
a number of shares and the client sends one share to each of the
servers. By construction of the shares, no coalition of servers
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:16 UTC from IEEE Xplore.  Restrictions apply. 
(a) A client submits one share of
its write request
the
two database servers. If the database
has length L, each share has length
O(
to each of
√
L).
(b) The database servers gener-
ate blinded “audit request” mes-
sages derived from their shares
of the write request.
(c) The audit server uses the
audit request messages to
validate the client’s request
and returns an “OK” or “In-
valid” bit
to the database
servers.
(d) The servers apply the write
request to their local database
state. The XOR of the servers’
states contains the clients mes-
sage at the given row.
Fig. 1: The process of handling a single client write request. The servers run this process once per client in each time epoch.
smaller than a particular pre-speciﬁed threshold can learn the
contents of a single client’s write request. While the cluster of
servers must remain online for the duration of a protocol run,
a client need only stay online for long enough to upload its
write request to the servers. As soon as the servers receive a
write request, they can apply it to to their local state.
The Riposte cluster divides time into a series of epochs.
During each time epoch, servers collect many write requests
from clients. When the servers agree that the epoch has ended,
they combine their shares of the database to reveal the clients’
plaintext messages. A particular client’s anonymity set consists
of all of the honest clients who submitted write requests to the
servers during the time epoch. Thus, if 50,000 distinct honest
clients submitted write requests during a particular time epoch,
each honest client is perfectly anonymous amongst this set of
50,000 clients.
The epoch could be measured in time (e.g., 4 hours), in
a number of write requests (e.g., accumulate 10,000 write
requests before ending the epoch), or by some more com-
plicated condition (e.g., wait for a write request signed from
each of these 150 users identiﬁed by a pre-deﬁned list of public
keys). The deﬁnition of what constitutes an epoch is crucial
for security, since a client’s anonymity set is only as large as
the number of honest clients who submit write requests in the
same epoch [73].
When using Riposte as a platform for anonymous mi-
croblogging, the rows would be long enough to ﬁt a Tweet
(140 bytes) and the number of rows would be some multiple
of the number of anticipated users. To anonymously Tweet, a
client would use the write-private database scheme to write its
message into a random row of the database. After many clients
have written to the database, the servers can reveal the clients’
plaintext Tweets. The write-privacy of the database scheme
prevents eavesdroppers, malicious clients, and coalitions of
malicious servers (smaller than a particular threshold) from
learning which client posted which message.
B. Threat Model
Clients in our system are completely untrusted: they may
submit maliciously formed write requests to the system and
may collude with servers or with arbitrarily many other clients
to try to break the security properties of the system.
Servers in our system are trusted for availability. The
failure—whether malicious or benign—of any one server ren-
ders the database state unrecoverable but does not compromise
the anonymity of the clients. To protect against benign failures,
server maintainers could implement a single “logical” Riposte
server with a cluster of many physical servers running a
standard state-machine-replication protocol [54], [66].
For each of the cryptographic instantiations of Riposte,
there is a threshold parameter t that deﬁnes the number
of malicious servers that the system can tolerate while still
maintaining its security properties. We make no assumptions