notify a target account of the current action being executed, in-
dicating the name of the function that initiates the notiﬁcation
(let fn be the function name). After that, the notiﬁed account
has to process the notiﬁcation by triggering the function with
the same name fn through the dispatcher.
Figure 1 provides a concrete example to illustrate the mech-
anism of the apply function (Listing 1). It is known that EOS
is the ofﬁcial token issued by the account eosio.token, who
maintains a table to record the holders and their balances.
Thus, to transfer EOS to a DApp, a user has to request the
transfer function in eosio.token. In step 1 shown in Fig-
ure 1, the code is assigned the value “eosio.token”, which
indicates the account whose smart contract will be invoked;
similarly, the receiver is also set to “eosio.token”, which
represents the receiver of the action (or the notiﬁcation). After
updating the balance table, eosio.token will notify both payer
(step 2) and payee (step 3). Note that the code in both steps re-
main unchanged, as the notiﬁcation will not change the values.
However, the receivers are set to the corresponding partic-
ipants, i.e., account user and account dappeg1, respectively.
Finally, the processing of incoming notiﬁcations depends on
the type of the recipient account. To be speciﬁc, if it is a smart
contract, the notiﬁcation will be handled by the transfer
function through the dispatcher (step 4); otherwise, if it is a
normal account, the notiﬁcation will be simply dropped.
Note that functions we studied in this paper can be divided
into two categories. The ﬁrst category includes functions
that are declared by the ofﬁcial accounts, e.g., the transfer
function in eosio.token. The second category consists of those
declared and implemented by developers. For instance, to
1The two terms, i.e., the dispatcher and the apply function, will be used
interchangeably in the following.
2EOSIO also provides deferred action, which will be executed in a differ-
ent transaction.
USENIX Association
30th USENIX Security Symposium    1273
Figure 1: Transferring EOS from account user to account
dappeg1 within a single transaction.
Figure 2: The general life-cycle of smart contract execution.
Note that “reveal” here is used to represent the processing
logic, while the name can vary in different smart contracts.
achieve the revealing logic in gambling DApps, developers
could arbitrarily name and implement their reveal functions
(see Figure 2, which will be detailed in §3).
2.3 Wasm Bytecode and EOS VM
The EOSIO smart contracts are written in C++ and then com-
piled into Wasm bytecode, which will be executed in the EOS
VM. Wasm is a binary instruction format for a stack-based
virtual machine. Although it is designed to be an open stan-
dard to enable high-performance web applications, it can also
be used to support other environments. Due to its efﬁciency
and portability, besides EOSIO, other popular blockchains
(e.g., Ethereum 2.0 [25]) are going to support Wasm.
An EOSIO Wasm binary is called a module. Inside a mod-
ule, numerous sections exist. Speciﬁcally, in the Function
section, the order of functions is determined, which corre-
sponds to the order of the implementation of functions (in
low-level instructions) in the Code section. All the indexes of
functions that appear in the Element section can be treated as
entries. Additionally, string literals are often used to initialize
the Memory section and stored in the Data section.
In the EOS VM, all the operands and operators are pushed
and popped from a virtual Stack as done in the Ethereum
VM. However, two more particular structures are used to store
data in the EOS VM, i.e., Local and Global. Speciﬁcally,
data stored in the Local section can only be used inside the
scope of the current function, while data stored in the Global
section can be shared globally across functions. Also, EOS
VM has an area called Memory, a random-accessible linear
array of bytes, which can only be accessed by using speciﬁc
instructions, e.g., load and store.
2.4 Threat Model
In this section, we introduce the adversarial threat model of
this paper. Speciﬁcally, the adversary (attacker) in our study
does not require any privileges to launch attacks against EO-
SIO smart contracts. Namely, any non-privileged account that
is capable of interacting with the (up-to-date) deployed EO-
SIO smart contracts, can be used to launch the attacks. Note
that, by default, the adversary can invoke any smart contract
deployed by herself to automatically launch the attacks.
3 Vulnerabilities in EOSIO Smart Contracts
A number of attacks targeting the EOSIO ecosystem (includ-
ing smart contracts) have been observed in the wild, and some
of them have been reported [26, 27]. In this paper, we focus
on four representative loopholes relevant to EOSIO smart con-
tracts, including fake EOS (§3.1), fake receipt (§3.2), rollback
(§3.3) and missing permission check (§3.4).
Before delving into the details, we introduce the general
life cycle of a smart contract execution to facilitate further
discussion. Here we take a gambling DApp as an example, as
depicted in Figure 2. Firstly, the player invokes the transfer
function in eosio.token to take part in the game. Then, on
receiving the notiﬁcation, the DApp will dispatch the request
to transfer through the dispatcher. After that, transfer
will call the reveal function (Note that “reveal” here is just
used to represent the processing logic, and the real function
names may be varied in different smart contracts.) to calculate
a random number to determine if the player hits the jackpot
this round. If it does, the DApp will trigger transfer in
eosio.token to return the prize to the player. Unfortunately,
the attackers can exploit the vulnerabilities in each step to
gain proﬁt. For example, in steps 3 and 4, failing to rigorously
verify the values of the input parameters could be exploited
by attackers. On top of that, this whole betting and revealing
process has the potential to be maliciously rolled back.
3.1 Fake EOS
Anyone can create and issue a token called EOS, as the token
names and symbols are not required to be unique in EOSIO.
Therefore, the incorrect veriﬁcation for code at step 3 in Fig-
ure 2 may lead to vulnerabilities.
Vulnerability Description. As the source code of eo-
sio.token is entirely public, anyone can make a copy of its
source code and issue a token with the identical name and
symbol. However, due to the difference between issuers, if
an attacker transfers the fake EOS to a gambling DApp via
the transfer function of the copied contract, the code of the
notiﬁcation received by the DApp side will not be eosio.token.
Thus, if the DApp happens not to check the value of the code,
then the veriﬁcation in the dispatcher will be bypassed.
To mitigate the above issue, some developers narrow down
the scope of accepted code. As shown in line 6 of Listing 1,
either “self” or “eosio.token” can be taken as the valid input
value of code. However, such a mitigation can also be by-
passed if the attacker directly calls the transfer function.
As the condition “code == self” will always be satisﬁed (see
1274    30th USENIX Security Symposium
USENIX Association
userdappeg1eosio.token!"#!"#Invoke transfer in eosio.token  Code: eosio.token  Action: transfer  Receiver: eosio.tokenNotify payer (user) if the payment succeeds  Code: eosio.token  Action: transfer  Receiver: userNotify payee (dappeg1) if the payment succeeds  Code: eosio.token  Action: transfer  Receiver: dappeg1Dispatch to transfer functionapplytransfer$ActionNotificationapplyFunction$Gambling DAppplayereosio.tokenapplytransferrevealInvoke transfer to take part in gameNotify player (payer)Notify DApp (payee)Dispatch to transfer functionInvoke reveal to calculate jackpotInvoke transfer to return prizeNotify DApp (payer)Notify player (payee)ActionNotificationapplyFunction!"#$%&'(!"#$%&'(§2.2), due to the short-circuit evaluation [28] on line 6, the
transfer function will be invoked even there is no notiﬁca-
tion from eosio.token, which indicates a transferring request.
As these two cases are only related to fake EOS tokens, in
this work, we name both of them as fake EOS vulnerabilities.
3.2 Fake Receipt
If the DApp developer performs a comprehensive check
against the code, the notiﬁcation will then be forwarded by
the dispatcher to transfer, as shown in step 4 in Figure 2.
However, if the developer does not perform a veriﬁcation in
this step, the DApp can also be attacked.
Vulnerability Description. It is necessary to emphasize
that the notiﬁcation can be forwarded, and the code will not
change. Therefore, DApp might be deceived by the attacker
that plays the dual roles (accounts) of an initiator and an ac-
complice at the same time. To be speciﬁc, the initiator invokes
a regular transfer to an accomplice (indicated by to, the argu-
ment of the transfer function) through eosio.token. When
the accomplice is notiﬁed by eosio.token, it will immediately
forward the notiﬁcation to DApp without modiﬁcation. In this
way, the code is not changed, which is still the ofﬁcial issuer:
eosio.token. Therefore, the dispatcher will be unaware of any
anomalies. However, if the parameter to is not checked in
transfer, the DApp will be fooled as the token transfer is
completed between two accounts controlled by the attacker.
It may result in direct ﬁnancial loss for DApp developers.
As the notiﬁcation is triggered by require_recipient,
we name this vulnerability as fake receipt .
3.3 Rollback
In Figure 2, transfer and reveal3 are the key functions. In
the transfer function, DApp handles the bet that is received
along with the player’s transfer; in the reveal function, the
developer often uses various on-chain state as seeds (e.g.,
current_time, indicating the timestamp when the action is
executed) to generate a pseudo-random number4 and ﬁnally
obtains the result by comparing the generated number with the
player’s input via the modulo operation, which is achieved by
the rem operator in Wasm bytecode [29]. Note that, in general,
the rollback cases can only be found in gambling DApps. We
assume it is always there and reachable from the dispatcher.
Vulnerability Description. Even if the developer does a
thorough check on every input parameter and checks the
caller’s permissions before any sensitive actions, a game that
matches the model in Figure 2 may still be attacked. To be spe-
ciﬁc, all the actions are invoked inline (see §2.2), i.e., locating
in a single transaction. Therefore, when the player receives
the notiﬁcation after step 8, he could immediately invoke an-
other inlined action to eosio.token to check his balance. If his
3The “reveal” refers to the semantic meaning as we explained in §2.2
4The “pseudo” is due to all these seeds value are deterministic for lack of
a true randomness source on blockchain temporarily.
balance is reduced, which means he did not win this round,
he can use an assertion statement to force the current action
to fail. We have mentioned in §2.2 that the failure of an action
could lead to reverse of the whole transaction. To this end, the
player can keep trying until he hits the jackpot. We refer to
this malicious rollback as the rollback vulnerability.
3.4 Missing Permission Check
Before performing any sensitive operation, the developer
should check whether the corresponding permission is carried
by the action. For example, before step 5 in Figure 2, the
DApp should check whether the caller could represent the
actual payer to participate in the game.
Vulnerability Description. Permission checking is en-
forced by require_auth(acct) in EOSIO, which is used to
check whether the caller has been authorized by acct to trig-
ger the corresponding function. Note that the inlined actions
inherit the context of their parents, including the permissions
(see §2.2). Therefore, if an attacker carrying insufﬁcient per-
mission invokes a function, in which it performs sensitive
operations via inlined actions and without permission check-
ing, unexpected behaviors would happen. We regard all the
functions lacking of permission checking as the smart con-
tracts with the missing permission check vulnerability.
3.5 The Generality of These Vulnerabilities
Note that these four vulnerabilities we studied are general
vulnerabilities in EOSIO, rather than application-speciﬁc.
Firstly, the fake EOS and fake receipt vulnerabilities impact
the smart contracts with the veriﬁcation of transferring re-
quests. All the transferring requests in EOSIO, however, have
to be processed by the transfer function that is limited
by the notiﬁcation mechanism in EOSIO. According to our
statistics (see Table 3 in §7.2), there are 88.32% of deployed
contracts using the transfer function. In other words, almost
90% of smart contracts can be inﬂuenced by these two vul-
nerabilities. Secondly, though the rollback vulnerability only
affects the gambling DApps due to the mechanism they adopt
(see §3.3), they constitute the most popular DApp category of
EOSIO according to [30, 31]. Therefore, the detection of roll-
back vulnerability applies to a large portion of existing active
DApps. Lastly, the missing permission check vulnerability
may impact all the deployed smart contracts without care-
fully verifying permissions, which may lead to unexpected
database modiﬁcation or leakage of sensitive information. We
will further measure the proportion of smart contract may be
affected by the vulnerabilities in §7.2.
4 Technical Challenges and Our Solutions
We aim to design and implement a static analysis system to
detect vulnerabilities for EOSIO smart contracts. To recover
more semantic information, we use heuristic-based symbolic
execution to perform in-depth analysis. Namely, semantic
USENIX Association
30th USENIX Security Symposium    1275
information will be recovered in the constraints generated by
symbolically executing the paths being analyzed. Thus, we
can identify vulnerabilities with these constraints as patterns.
Comparing with Ethereum Smart Contract Analysis.
Although there exists a number of static analysis tools pro-
posed for Ethereum smart contracts, it is worth noting that
they cannot be applied directly (or even after minor changes)
to EOSIO smart contracts due to the differences between the
two platforms, including VM models (e.g., allowing global
variables), instructions (e.g., supporting ﬂoating-point opera-
tions) and system-level data structures (e.g., using multi-index
table to store persistent data). In brief, these functionalities
provided by EOSIO inevitably affect the design/implementa-
tion of the proposed system. For instance, we have to consider
the side effect imported by external/system libraries (see §4.3
for details). Additionally, the vulnerabilities of EOSIO smart
contracts are totally different from those of Ethereum’s, which
acquire different kinds of context information to support the
detection. For example, the rollback vulnerability requires
multiple actions being included in one transaction. As such,
the detection relies on the propagation of some speciﬁc chain
state variables (will be discussed in §5.3.4).
Comparing with C language based solution. As men-
tioned in §1, the Wasm bytecode can be converted to C code
by the ofﬁcial tool named wasm2c, which enables the analysis
to the corresponding C code by traditional tools like KLEE.
However, there are many limitations to this approach. First,
it has been reported [12] that the memory model adopted
by KLEE [10, 11] may lead to heavy memory consumption
and time consumption, which will inevitably affect the per-
formance or even break the analysis. Second, the conversion
from the Wasm bytecode to C code requires extra efforts. On
the one hand, lots of symbols are missing after the conversion
from Wasm to C by wasm2c. We have to manually re-declare
all the imported functions, which are necessary for the subse-
quent analysis of KLEE. On the other hand, in order to get
accurate results in vulnerability detection, we need to manu-
ally modify the converted C ﬁle to hook some functions, as a
ﬂag, to perform the vulnerability detection. Both of the above
steps must be manually accomplished before analyzing each
contract. Last, lots of the memory-checking code is appended
by wasm2c5, which may lead to extra performance overhead
(around 85% [33]). To sum up, this solution is not applicable,
and we will demonstrate it based on evaluation results in §7.1.
As a result, no available native symbolic analysis frame-
work could be used to analyze the EOSIO Wasm bytecode
directly. Speciﬁcally, we have to overcome several technical
challenges to realize the proposed system. On the one hand,
it is known that symbolic execution based solutions may suf-
fer from inherent shortcomings, path explosion in particular.
On the other hand, when applied to vulnerability detection
for EOSIO smart contracts, there do exist platform-speciﬁc
5Although the checking code could be optimized/disabled, however, it is
not ofﬁcially recommended and this issue is still under discussion [32].
issues, including memory overlap and external/system library
dependency, which will inevitably affect the effectiveness of
symbolic execution further.
4.1 Path Explosion
In EOSIO, the issue of path explosion is mainly due to two
circumstances: executing conditional jump instructions (such
as br_if) and invoking function calls. Speciﬁcally, unlike a
normal conditional jump instruction that only generates two
new branches, the br_table in EOSIO takes an array whose
elements are pointers of destination as the argument. As a
result, a single br_table can lead to n new branches, where