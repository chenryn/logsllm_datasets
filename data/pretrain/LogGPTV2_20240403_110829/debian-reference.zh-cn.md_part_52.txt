else
zenity --info --title=”Check file: $DATA_FILE” --width 640 --height 400 \
--text=”The data is MIME=$(file -ib ”$DATA_FILE”)”
fi
这种使用shell脚本的GUI程序方案只对简单选择的场景有用。如果你写一个其它任何复杂的程序，请考虑在功能更
强的平台上写。
12.2.3 定制 GUI（图形用户界面）文件管理器的行为
GUI（图形用户界面）文件管理器在选定的文件上，能够用外加的扩展软件包来扩展执行一些常见行为。通过增加特
定的脚本，它们也能够用来定制执行非常特殊的行为。
• 对于GNOME，参见NautilusScriptsHowto。
• 对于KDE，参见CreatingDolphinServiceMenus。
• 对于Xfce，参见Thunar-CustomActions和https://help.ubuntu.com/community/ThunarCustomActions。
• 对于LXDE，参见CustomActions。
12.2.4 Perl 短脚本的疯狂
为了处理数据，sh需要生成子进程运行cut、grep、sed等，是慢的。从另外一个方面，perl有内部处理数据能力，
是快的。所以Debian上的许多系统维护脚本使用perl。
让我们考虑下面一行AWK脚本片段和它在Perl中的等价物。
awk ’($2==”1957”) { print $3 }’ |
这等价于下列的任意一行。
perl -ne ’@f=split; if ($f[1] eq ”1957”) { print ”$f[2]\n”}’ |
perl -ne ’if ((@f=split)[1] eq ”1957”) { print ”$f[2]\n”}’ |
perl -ne ’@f=split; print $f[2] if ( $f[1]==1957 )’ |
perl -lane ’print $F[2] if $F[1] eq ”1957”’ |
perl -lane ’print$F[2]if$F[1]eq+1957’ |
最后一个简直就是个迷。它用上了下面列出的这些Perl的特性。
• 空格为可选项。
• 存在从数字到字符串的自动转换。
• 通过命令行选项：perlrun(1)的Perl执行技巧
• Perl特异变量：perlvar(1)
灵活性是Perl的强项。与此同时，这允许我们创建令人困惑和繁乱的代码。所以请小心。
Debian参考手册 220/233
软件包 流行度 大小 说明
gcc V:150,I:553 47 GNUC编译器
libc6-dev V:254,I:572 12051 GNUC库：开发库和头文件
g++ V:55,I:502 14 GNUC++编译器
libstdc++-10-dev
V:17,I:183 17537 GNU标准C++库版本3（开发文件）
cpp V:328,I:728 30 GNUC预处理
gettext V:56,I:262 5817 GNU国际化工具
glade V:1,I:5 1209 GTK用户界面构建器
valac V:0,I:4 724 使用GObject系统类似C#的语言
flex V:8,I:74 1241 LEX兼容的fastlexicalanalyzergenerator
bison V:8,I:80 3116 YACC兼容的解析器生成器
susv2 I:0 16 通过“单一UNIX规范（版本2）”获取（英语文档）
susv3 I:0 16 通过“单一UNIX规范（版本3）”获取（英语文档）
susv4 I:0 16 通过“单一UNIX规范（版本4）”获取（英语文档）
golang I:20 11 Go编程语言编译器
rustc V:3,I:14 8860 Rust系统编程语言
haskell-platform
I:1 12 标准的Haskell库和工具
gfortran V:7,I:64 16 GNUFortran95编译器
fpc I:2 102 自由Pascal
Table12.10: 编译相关软件包列表
12.3 编译型语言代码
这里，包括了第 12.3.3 节和第 12.3.4 节，用来说明类似编译器的程序怎样用C语言来编写，是通过编译高级描述到
C语言。
12.3.1 C
你可以通过下列方法设置适当的环境来编译使用C编程语言编写的程序。
# apt-get install glibc-doc manpages-dev libc6-dev gcc build-essential
libc6-dev软件包，即GNUC库，提供了C标准库，它包含了C编程语言所使用的头文件和库例程。
参考信息如下。
•“info libc”（C库函数参考）
• gcc(1)和“info gcc”
• each_C_library_function_name(3)
• Kernighan&Ritchie，“C程序设计语言”，第二版（PrenticeHall）
12.3.2 简单的 C 程序（gcc）
一个简单的例子“example.c”可以通过如下方式和“libm”库一起编译为可执行程序“run_example”。
$ cat > example.c 
#include 
#include 
Debian参考手册 221/233
int main(int argc, char **argv, char **envp){
double x;
char y[11];
x=sqrt(argc+7.5);
strncpy(y, argv[0], 10); /* prevent buffer overflow */
y[10] = ’\0’; /* fill to make sure string ends with ’\0’ */
printf(”%5i, %5.3f, %10s, %10s\n”, argc, x, y, argv[1]);
return 0;
}
EOF
$ gcc -Wall -g -o run_example example.c -lm
$ ./run_example
1, 2.915, ./run_exam, (null)
$ ./run_example 1234567890qwerty
2, 3.082, ./run_exam, 1234567890qwerty
为了使用 sqrt(3)，必须使用“-lm”链接来自 libc6 软件包的库“/usr/lib/libm.so”。实际的库文件位于
“/lib/”，文件名为“libm.so.6”，它是指向“libm-2.7.so”的一个链接。
请看一下输出文本的最后一段。即使指定了“%10s”，它依旧超出了10个字符。
使用没有边界检查的指针内存操作函数，比如sprintf(3)和strcpy(3),是不建议使用，是为防止缓存溢出泄露而导
致上面的溢出问题。请使用snprintf(3)和strncpy(3)来替代.
12.3.3 Flex —一个更好的 Lex
Flex是兼容Lex的快速语法分析程序生成器。
可以使用“info flex”查看flex(1)的教程。
Manysimpleexamplescanbefoundunder/usr/share/doc/flex/examples/”. 1
12.3.4 Bison —一个更好的 Yacc
在Debian里，有几个软件包提供Yacc兼容的前瞻性的LR解析或LALR解析的生成器。
软件包 流行度 大小 说明
bison V:8,I:80 3116 GNULALR解析器生成器
byacc V:0,I:4 258 伯克利（Berkeley）LALR解析器生成器
btyacc V:0,I:0 243 基于byacc的回溯解析生成器
Table12.11: 兼容Yacc的LALR解析器生成器列表
可以使用“info bison”查看bison(1)的教程。
你需要提供你自己的的”main()” 和”yyerror()”. 通常，Flex 创建的”main()” 调用”yyparse()”，它又调用
了”yylex()”.
Hereisanexampletocreateasimpleterminalcalculatorprogram.
Let’screateexample.y:
/* calculator source for bison */
%{
#include 
extern int yylex(void);
extern int yyerror(char *);
1Sometweaksmayberequiredtogetthemworkunderthecurrentsystem.
Debian参考手册 222/233
%}
/* declare tokens */
%token NUMBER
%token OP_ADD OP_SUB OP_MUL OP_RGT OP_LFT OP_EQU
%%
calc:
| calc exp OP_EQU { printf(”Y: RESULT = %d\n”, $2); }
;
exp: factor
| exp OP_ADD factor { $$ = $1 + $3; }
| exp OP_SUB factor { $$ = $1 - $3; }
;
factor: term
| factor OP_MUL term { $$ = $1 * $3; }
;
term: NUMBER
| OP_LFT exp OP_RGT { $$ = $2; }
;
%%
int main(int argc, char **argv)
{
yyparse();
}
int yyerror(char *s)
{
fprintf(stderr, ”error: ’%s’\n”, s);
}
Let’screate,example.l:
/* calculator source for flex */
%{
#include ”example.tab.h”
%}
%%
[0-9]+ { printf(”L: NUMBER = %s\n”, yytext); yylval = atoi(yytext); return NUMBER; }
”+” { printf(”L: OP_ADD\n”); return OP_ADD; }
”-” { printf(”L: OP_SUB\n”); return OP_SUB; }
”*” { printf(”L: OP_MUL\n”); return OP_MUL; }
”(” { printf(”L: OP_LFT\n”); return OP_LFT; }
”)” { printf(”L: OP_RGT\n”); return OP_RGT; }
”=” { printf(”L: OP_EQU\n”); return OP_EQU; }
”exit” { printf(”L: exit\n”); return YYEOF; } /* YYEOF = 0 */
. { /* ignore all other */ }
%%
Thenexecuteasfollowsfromtheshellprompttotrythis:
$ bison -d example.y
$ flex example.l
$ gcc -lfl example.tab.c lex.yy.c -o example
$ ./example
$ ./example
Debian参考手册 223/233
1 + 2 * ( 3 + 1 ) =
L: NUMBER = 1
L: OP_ADD
L: NUMBER = 2
L: OP_MUL
L: OP_LFT
L: NUMBER = 3
L: OP_ADD
L: NUMBER = 1