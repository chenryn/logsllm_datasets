    :88, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`:54, ModuleContainer (com.baidu.openrasp)`
`:88, ModuleLoader (com.baidu.openrasp)`
**1-2-2 启动engine**
ModuleContainer调用了rasp-engine.jar的入口类EngineBoot
的start方法，start方法中进行了如下操作：加载V8引擎、加载配置与基线检测、初始化插件系统、检测器初始化、插桩、云管理初始化。
    start:49, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`start:49, EngineBoot (com.baidu.openrasp)`
加载V8 JS引擎，V8为native实现，本文这里不关注，具体代码在[openrasp-v8](https://github.com/baidu-security/openrasp-v8)。
    load:9, Loader (com.baidu.openrasp.v8)
    start:57, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
**1-2-2-2 加载配置与基线检测**
大致是初始化本地日志系统，如果用户配置了syslog，则添syslog
appender；还会读取用户配置`openrasp.yml`，赋值相关配置变量，包括hook类的开关等；另外会做一些安全基线检测。这里不是关注点，不多描述。
    loadConfigFromFile:207, Config (com.baidu.openrasp.config)
    init:144, Config (com.baidu.openrasp.config)
    :124, Config (com.baidu.openrasp.config)
    setLogMaxBackup:234, DynamicConfigAppender (com.baidu.openrasp.cloud.syslog)
    initLog4jLogger:133, DynamicConfigAppender (com.baidu.openrasp.cloud.syslog)
    ConfigFileAppender:36, LogConfig (com.baidu.openrasp.messaging)
    loadConfig:118, EngineBoot (com.baidu.openrasp)
    start:63, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    loadClassAndStartAgent:386, InstrumentationImpl (sun.instrument)
    loadClassAndCallPremain:401, InstrumentationImpl (sun.instrument)
`loadConfigFromFile:207, Config (com.baidu.openrasp.config)`
`loadConfig:125, EngineBoot (com.baidu.openrasp)`
**1-2-2-3 初始化插件系统**
    Initialize:66, JS (com.baidu.openrasp.plugin.js)
    start:70, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`Initialize:66, JS (com.baidu.openrasp.plugin.js)`
**1-2-2-3-1 初始化传参变量**
插件JS中，获取到的数据来源于V8引擎的传递，这里先对传递的一些参数变量进行初始化，其中server（系统环境变量）为全局静态保存的数据，parameter、header等则为根据请求动态获取的数据。
    setKeys:39, Context (com.baidu.openrasp.plugin.js)
    Initialize:88, JS (com.baidu.openrasp.plugin.js)
    start:70, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`setKeys:39, Context (com.baidu.openrasp.plugin.js)`
**1-2-2-3-2 执行JS插件**
加载`plugins`目录下“.js”结尾的JS插件。
    UpdatePlugin:239, JS (com.baidu.openrasp.plugin.js)
    UpdatePlugin:218, JS (com.baidu.openrasp.plugin.js)
    Initialize:90, JS (com.baidu.openrasp.plugin.js)
    start:70, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`UpdatePlugin:218, JS (com.baidu.openrasp.plugin.js)`
**1-2-2-3-3 JS插件热部署**
添加文件目录监控器，JS插件目录`plugins`的文件新增、修改、删除都会触发`UpdatePlugin`方法，更新JS插件。文件监控这块底层用的是第三方库`JnotifyWatcher`。
    InitFileWatcher:243, JS (com.baidu.openrasp.plugin.js)
    Initialize:91, JS (com.baidu.openrasp.plugin.js)
    start:70, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`InitFileWatcher:243, JS (com.baidu.openrasp.plugin.js)`
**1-2-2-4 检测器初始化**
当Hook住一些方法后，调用对应检测器，检测器内的代码决定了后面如何进行安全检测，如可以直接在JAVA这边完成安全检测，或将检测逻辑交给JS插件。
检测器初始化中，遍历已经初始化好的检测器JavaBean对象（封装了名称、id、检测方法），放到字典`checkers` 中以备后续使用。
    init:34, CheckerManager (com.baidu.openrasp.plugin.checker)
    start:73, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`init:34, CheckerManager (com.baidu.openrasp.plugin.checker)`
**1-2-2-5 插桩**
`initTransformer`中，实例化`CustomClassTransformer`，该类实现了`ClassFileTransformer`接口（JVM
TI接口）。其中的`restransform`方法用于遍历所有已经加载的类并进行插桩操作，而第一次加载的类直接使用`transform`方法。这里就不另外说明第一次加载的过程情况了，二者后续核心代码一致。可以分别尝试debug命令执行漏洞与XXE漏洞的hook方法来了解二者。
    :76, CustomClassTransformer (com.baidu.openrasp.transformer)
    initTransformer:134, EngineBoot (com.baidu.openrasp)
    start:74, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`:76, CustomClassTransformer (com.baidu.openrasp.transformer)`
**1-2-2-5-1 获取hook点**
`CustomClassTransformer`在实例化时会获取相关Hook类。
    addAnnotationHook:123, CustomClassTransformer (com.baidu.openrasp.transformer)
    :77, CustomClassTransformer (com.baidu.openrasp.transformer)
    initTransformer:134, EngineBoot (com.baidu.openrasp)
    start:74, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`addAnnotationHook:123, CustomClassTransformer
(com.baidu.openrasp.transformer)`：获取`com.baidu.openrasp.hook`包下的`AbstractClassHook`子类，如果子类不是配置文件中忽略的hook（配置文件`Config.getConfig().getIgnoreHooks()`），则将该类放入私有成员`hooks`中（HashSet）。
`:77, CustomClassTransformer
(com.baidu.openrasp.transformer)`：实例化前与实例化所做的操作
**1-2-2-5-2 过滤并hook**
对于已经被加载的类，会经由`retransform`方法到`transform`，而对于第一次加载的类，会直接被`transform`捕获，对于第一次加载的类这里不另外展现，到了`tranform`这里，对于`OpenRASP`来说，二者就没差别了。
`CustomClassTransformer`在实例化后，调用方法`retransform` ->
`transform`，方法中筛选需要hook的类后进行插桩操作。
    transform:155, CustomClassTransformer (com.baidu.openrasp.transformer)
    transform:188, TransformerManager (sun.instrument)
    transform:428, InstrumentationImpl (sun.instrument)
    retransformClasses0:-1, InstrumentationImpl (sun.instrument)