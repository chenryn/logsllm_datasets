高地址
struct 
S;
S
一个字节
：编译器
这称为对齐
回
不仅如此,
d
paddihg
b
C
头检马
int c;
short b;
char
会把?
要低
而是
ebp-0x10
ebp-0xc
ebp-0x8
紧挨在s.b的后面就可以了
没有对齐的问题。s.b占两个字节,
验
所以编译器会在结构体中插入一
char d;
int c;
char a;
return 0;
 printf(
它后面的数字是几就表示它占多少个bit，
unsigned
un
unsigned
unsigned
unsigned
((packed)）
，即使不写未命名的Bit-field，编译器也有可能在两个成员之间插入填充
1S1
_type));
igned
 S.one, s.two,
，以便对齐到4字节边界。以前我们说过x86的Byte Order是小端
values: s=%u,%u,%u,%u,%u,%u\n",
int
int
int
int
int
int
six:8;
four:5;
 one:1
下面这个例子出自王聪的网站（www.wangcong.org）：
S;
:2;
three:10;
two:3;
最小的类型也要占一个字节，
，表示有符号数或无符号数，
's.three,
five
 129, 0x81 };
four
three
，而在结构体中还可以使
，但不表示它像普通
访问效率会比较高，
twoone
低地
件
315
样
---
## Page 316
以看出每个字节分别是多少了。
是u.bitfield,
它的第一个成员，
如：
结构体的内存布局。C语言还有一种类型叫联合体，用关键字union定义，其语法类似于结构体，
样的，那我有什么证据这么说呢？上例的反汇编结果比较繁琐，我们可以通过另一种手段得到这
和前面几个例子不一样，在上例中我没有给出反汇编结果，
的。Bit-field在驱动程序中是很有用的，因为经常需要单独操作设备寄存器中的一个或几个bit，但
编译器可能会排列得很不一样，
field在C标准中没有详细的规定，这跟Byte Order、Bit Order、对齐等问题都有关,
端的，
的
一个联合体的各个成员占用相同的内存空间，
定要小心使用，首先弄清楚每个Bit-field和实际bit的对应关系。
从上图中one和two的排列顺序可以看出，
因为排在结构体前面的成员（靠近低地址一边的成员）取字节中的低位。关于如何排列Bit-
例19.5.联合体
u.byte[7]);
u.bitfield.three
sizeof(demo_
In",
int main(void)
} demo_type;
typedef union
#include 
则把这8个字节看成一个数组。联合体如果用Initializer初始化，则只初始化
return 0;
unsigned char byte[8];
}bitfield;
struct 
u.bitfield.four, u.bitfield.five.
要编写可移植的代码就不能假定Bit-field是按某一种固定方式排列
unsigned
unsigned
unsigned
unsigned
unsigned
unsigned
 int
，联合体的长度等于其中最长成员的长度。比如u这个
int
int
int
int
如果对一
，则把这8个字节看成一个由Bit-field组成的结构体，
5，
four:5;
513，
一个字节再细分，
直接画了个图说这个结构体的布局是这
...........
129, 0x81 }};
........
则字节中的Bit Order也是小
 不同的平台和
316
例
个
---
## Page 317
3.变量的存储布局
1、编写一个程序，
习题 请点评
，测试运行它的平台是大端还是小端字节序。
全国嵌入式人才培训基地
起始页
5.C内联汇编
---
## Page 318
通常C代码中的内联汇编需要和C的变量建立关联，需要用到完整的内联汇编格式:
C语言简洁易读，
5.C内联汇编 请点评
有就填写，
三部分指示汇编指令需要从哪些C操作数获得输入，
件
这种格式由四部分组成，
条指令分隔开，例如：
什么都不做，
Assembly）。最简单的格式是_
了把这两方面的好处都占全了，
而C语言就没有这个概念，所以in/out指令必须用汇编来写。
是对各种平台的抽象，
码。另外，
要经由编译器生成汇编代码，
用C写程序比直接用汇编写程序更简洁,
上一页
，第二部分指示汇编指令的运算结果要输出到哪些C操作数中，C操作数应该是左值表达式，
例19.6.内联汇编
.........
，没有就空着只写个:号。例如：
_asm__(assembler template
asm
，有些平台相关的指令必须手写，在C语言中没有等价的语法，
.........
只是让CPU空转—
int main()
#include 
容易组织规模较大的代码，
: output operands
"moy1
input 
而各种平台特有的-
int a = 10, b;
，第一部分是汇编指令，
$4
 $1,
尽管现代编译器的优化已经做得很好了，
一个指令执行周期。如果需要执行多条汇编指令，则应该用\n\t将
_asm__("assembly code");,
第19章汇编与C之间的关系
全国嵌入式人才培训基地
(b)
 可读性更好，但效率可能不如汇编程序，
一些东西就不会在C语言中出现了，例如x86是端口I/O，
5.C内联汇编
而汇编效率高，
，和上面的例子一样,
，第四部分是在汇编指令中被修改过的寄存器列
* output */
￥
例如
 而且写一些特殊指令必须用汇编，为
optional
optional */
，第二部分和第三部分是约束条
但还是不如手写的汇编代
 因为C语言的语法和概念
*
 因为C程序毕竟
318
下二
、第
各
令
---
## Page 319
4.结构体和联合体
关于内联汇编就介绍这么多，
可见0和1都代表edx寄存器，
我们看一下这个程序的反汇编结果：
用eax保存其它值。
把"%eax"写在第四部分，
表的寄存器的值输出给变量b。在执行这两条指令的过程中，寄存器eax的值被改变了，
器则由编译器自己决定。汇编指令首先把a1所代表的寄存器的值传给eax（为了和%1这种占位符区
输
这个程序将变量a的值赋给b。
80483df:
80483dc:
，告诉编译器在执行这条_asm_语句时eax要被改写，
return 0;
printf("Result: %d, %d\n", a, b); 
"=r"(b)
movl
8
，本书不做深入讨论。
6
"r"(a)指示编译器分配一个寄存器保存变量a的值，
首先把变量a（位于ebp-8的位置）的值传给edx然后执行内联汇编的
do
%eax, %0\n\t"
 f4 
8
:"%eax"
%%eaxln\t'
全国嵌入式人才培训基地
起始页
上一级
￥
/* clobbered register * / 
mov
mov
?
a对应1%），
%edx, -0xc(%ebp)
%eax,
,%edx
 至于1究竟代表哪个寄存
"=r"(b)就表示把o所代
，所以在此期间不要
，作为汇编指令的
6. volatile限定符
所以
319
上二页
---
## Page 320
口接收三个字节存到buf中，
址，所以在这个例子中把它们假想成串口接收寄存器和串口发送寄存器。在main函数中，首先从串
我们用recv和send这两个全局变量来模拟设备寄存器。假设某种平台采用内存映射I/O，
6. volatile限定符 请点评
的反汇编结果：
寄存器和串口接收寄存器位于固定的内存地址,
符。看下面的例子。
现在探讨一下编译器优化会对生成的指令产生什么影响，在此基础上介绍C语言的volatile限定
例19.7.volatile限定符
80483d4:
165958108
80483cf:
80483c6:
80483c1:
80483ba:
80483a9:
80483a2:
int main(void)
unsigned char buf[3];
/* memory buffer */
unsigned
unsigned
send = ~buf[l];
buf[2] = recv;
buf[l] = recv;
buf[0] = recv;
 artificial
return 0;
buf[0]
send
send
send
buf[
 char
 char
Of b6 05 
of
of
of
a2
of
a2
，然后把这三个字节取反，依次从串口发送出去[31。
1c
 b6 05
18 a0
do
b6
b6
1a
 send;
recv:
 device registers */
05
a0
05
=
05
a0
 recv;
recv;
 recv;
第19章汇编与C之间的关系
1b a0 04 08
04
1a
0
6
04
全国嵌入式人才培训基地
08
: a0 0408
6.volatile限定符
8
04
08
movzbl 0x804a01b,%eax
moy
not
mov
movzbl
mov
movzb1 0x804a019,%eax
%al,0x804a018 
%al,0x804a01c
0x804a019,%eax
%al,0x804a01b
%al,0x804a01a
，我们查看这段代码
，串口发送
下二
---
## Page 321
率更高，我们知道读寄存器远比读内存要快。
可以先把内存单元里的值读到寄存器缓存起来，
为什么编译器优化的结果会错呢？因为编译器并不知道0x804a018和0x804a019是设备寄存器的地
把eax的值取反写到内存地址0x804a018了
把buf中的三个字节取反再发送到串口，
从内存地址0x804a019读取，
存地址0x804a019读一个字节到寄存器eax中,
但如果指定优化选项-o编译,