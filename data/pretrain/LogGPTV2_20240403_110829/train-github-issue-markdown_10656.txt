Using joinpath on a UNC path does not always behave as expected (or as I
expect).
In the following example:
  * Case 7 seems like a definite defect.
  * Cases 5 & 6 may be debatable, but I would also argue that `joinpath` should be able to join all the parts of a UNC path even if the first part is not the full server+share part. I can certainly see how it would be useful to have it behave that way.
Code:
    import InteractiveUtils
    InteractiveUtils.versioninfo()
    println()
    @show "1: " * joinpath("D:", "a", "b", "c")
    @show "2: " * joinpath("D:\\", "a", "b", "c")
    @show "3: " * joinpath("D:\\a", "b", "c")
    @show "4: " * joinpath("D:\\a\\", "b", "c")
    println()
    @show "5: " * joinpath("\\\\server", "share", "b", "BAD")   # expect "\\\\server\\share\\b\\BAD"
    @show "6: " * joinpath("\\\\server\\", "share", "b", "BAD") # expect "\\\\server\\share\\b\\BAD"
    @show "7: " * joinpath("\\\\server\\share", "b", "BAD")     # expect "\\\\server\\share\\b\\BAD"
    @show "8: " * joinpath("\\\\server\\share\\", "b", "GOOD")  # expect "\\\\server\\share\\b\\GOOD"
Result:
    Julia Version 1.2.0
    Commit c6da87ff4b (2019-08-20 00:03 UTC)
    Platform Info:
      OS: Windows (x86_64-w64-mingw32)
      CPU: Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz
      WORD_SIZE: 64
      LIBM: libopenlibm
      LLVM: libLLVM-6.0.1 (ORCJIT, broadwell)
    "1: " * joinpath("D:", "a", "b", "c") = "1: D:a\\b\\c"
    "2: " * joinpath("D:\\", "a", "b", "c") = "2: D:\\a\\b\\c"
    "3: " * joinpath("D:\\a", "b", "c") = "3: D:\\a\\b\\c"
    "4: " * joinpath("D:\\a\\", "b", "c") = "4: D:\\a\\b\\c"
    "5: " * joinpath("\\\\server", "share", "b", "BAD") = "5: \\\\server\\sharebBAD"
    "6: " * joinpath("\\\\server\\", "share", "b", "BAD") = "6: \\\\server\\sharebBAD"
    "7: " * joinpath("\\\\server\\share", "b", "BAD") = "7: \\\\server\\sharebBAD"
    "8: " * joinpath("\\\\server\\share\\", "b", "GOOD") = "8: \\\\server\\share\\b\\GOOD"