title:Vanish: Increasing Data Privacy with Self-Destructing Data
author:Roxana Geambasu and
Tadayoshi Kohno and
Amit A. Levy and
Henry M. Levy
Vanish: Increasing Data Privacy with Self-Destructing Data
Roxana Geambasu
Tadayoshi Kohno
Amit A. Levy
Henry M. Levy
University of Washington
{roxana, yoshi, levya, levy}@cs.washington.edu
Abstract
legal
and
technical
landscape
presents
Today’s
formidable challenges to personal data privacy. First,
our increasing reliance on Web services causes personal
data to be cached, copied, and archived by third parties,
often without our knowledge or control. Second, the
disclosure of private data has become commonplace due
to carelessness, theft, or legal actions.
Our research seeks to protect the privacy of past,
archived data — such as copies of emails maintained
by an email provider — against accidental, malicious,
and legal attacks. Speciﬁcally, we wish to ensure that
all copies of certain data become unreadable after a user-
speciﬁed time, without any speciﬁc action on the part of
a user, and even if an attacker obtains both a cached copy
of that data and the user’s cryptographic keys and pass-
words.
This paper presents Vanish, a system that meets this
challenge through a novel integration of cryptographic
techniques with global-scale, P2P, distributed hash ta-
bles (DHTs). We implemented a proof-of-concept Van-
ish prototype to use both the million-plus-node Vuze Bit-
Torrent DHT and the restricted-membership OpenDHT.
We evaluate experimentally and analytically the func-
tionality, security, and performance properties of Vanish,
demonstrating that it is practical to use and meets the
privacy-preserving goals described above. We also de-
scribe two applications that we prototyped on Vanish: a
Firefox plugin for Gmail and other Web sites and a Van-
ishing File application.
1
Introduction
We target the goal of creating data that self-destructs or
vanishes automatically after it is no longer useful. More-
over, it should do so without any explicit action by the
users or any party storing or archiving that data, in such
a way that all copies of the data vanish simultaneously
from all storage sites, online or ofﬂine.
Numerous applications could beneﬁt from such self-
destructing data. As one example, consider the case
of email. Emails are frequently cached, stored, or
archived by email providers (e.g., Gmail, or Hotmail),
local backup systems, ISPs, etc. Such emails may cease
to have value to the sender and receiver after a short pe-
riod of time. Nevertheless, many of these emails are pri-
vate, and the act of storing them indeﬁnitely at interme-
diate locations creates a potential privacy risk. For ex-
ample, imagine that Ann sends an email to her friend
discussing a sensitive topic, such as her relationship with
her husband, the possibility of a divorce, or how to ward
off a spurious lawsuit (see Figure 1(a)). This email
has no value as soon as her friend reads it, and Ann
would like that all copies of this email — regardless of
where stored or cached — be automatically destroyed af-
ter a certain period of time, rather than risk exposure in
the future as part of a data breach, email provider mis-
management [41], or a legal action. In fact, Ann would
prefer that these emails disappear early — and not be
read by her friend — rather than risk disclosure to unin-
tended parties. Both individuals and corporations could
beneﬁt from self-destructing emails.
More generally, self-destructing data is broadly appli-
cable in today’s Web-centered world, where users’ sen-
sitive data can persist “in the cloud” indeﬁnitely (some-
times even after the user’s account termination [61]).
With self-destructing data, users can regain control over
the lifetimes of their Web objects, such as private mes-
sages on Facebook, documents on Google Docs, or pri-
vate photos on Flickr.
Numerous other applications could also beneﬁt from
self-destructing data. For example, while we do not con-
done their actions, the high-proﬁle cases of several politi-
cians [4, 62] highlight the relevance for self-destructing
SMS and MMS text messages. The need for self-
destructing text messages extends to the average user as
well [42, 45]. As a news article states, “don’t ever say
anything on e-mail or text messaging that you don’t want
(a) Example Scenario.
(b) Vanishing Emails plugin for Gmail.
Figure 1: Example Scenario and Vanish Email Screenshot. (a) Ann wants to discuss her marital relationship with her friend,
Carla, but does not want copies stored by intermediate services to be used in a potential child dispute trial in the future. (b) The
screenshot shows how Carla reads a vanishing email that Ann has already sent to her using our Vanish Email Firefox plugin for
Gmail.
to come back and bite you [42].” Some have even argued
that the right and ability to destroy data are essential to
protect fundamental societal goals like privacy and lib-
erty [34, 44].
As yet another example, from a data sanitation per-
spective, many users would beneﬁt from self-destructing
trash bins on their desktops. These trash bins would pre-
serve deleted ﬁles for a certain period of time, but af-
ter a timeout the ﬁles would self-destruct, becoming un-
available even to a forensic examiner (or anyone else,
including the user). Moreover, the unavailability of these
ﬁles would be guaranteed even if the forensic exam-
iner is given a pristine copy of the hard drive from be-
fore the ﬁles self-destructed (e.g., because the machines
were conﬁscated as part of a raid). Note that employ-
ing a whole disk encryption scheme is not sufﬁcient, as
the forensic examiner might be able to obtain the user’s
encryption passwords and associated cryptographic keys
through legal means. Other time-limited temporary ﬁles,
like those that Microsoft Word periodically produces in
order to recover from a crash [17], could similarly beneﬁt
from self-destructing mechanisms.
Observation and Goals. A key observation in these ex-
amples is that users need to keep certain data for only
a limited period of time. After that time, access to that
data should be revoked for everyone — including the le-
gitimate users of that data, the known or unknown enti-
ties holding copies of it, and the attackers. This mech-
anism will not be universally applicable to all users or
data types; instead, we focus in particular on sensitive
data that a user would prefer to see destroyed early rather
than fall into the wrong hands.
Motivated by the above examples, as well as our ob-
servation above, we ask whether it is possible to create a
system that can permanently delete data after a timeout:
1. even if an attacker can retroactively obtain a pristine
copy of that data and any relevant persistent crypto-
graphic keys and passphrases from before that time-
out, perhaps from stored or archived copies;
2. without the use of any explicit delete action by the
user or the parties storing that data;
3. without needing to modify any of the stored or
archived copies of that data;
4. without the use of secure hardware; and
5. without relying on the introduction of any new
external services that would need to be deployed
(whether trusted or not).
A system achieving these goals would be broadly ap-
plicable in the modern digital world as we’ve previously
noted, e.g., for ﬁles, private blog posts, on-line docu-
ments, Facebook entries, content-sharing sites, emails,
messages, etc. In fact, the privacy of any digital content
could potentially be enhanced with self-deleting data.
However, implementing a system that achieves this
goal set is challenging. Section 2 describes many natural
approaches that one might attempt and how they all fall
short. In this paper we focus on a speciﬁc self-deleting
data scheme that we have implemented, using email as
an example application.
Our Approach. The key insight behind our approach
and the corresponding system, called Vanish, is to lever-
age the services provided by decentralized, global-scale
P2P infrastructures and, in particular, Distributed Hash
Tables (DHTs). As the name implies, DHTs are designed
AnnCarlaHotmailGmailHusband's lawyerFuture subpoena archived copy“This message will self-destruct in 16 hours”“Decapsulate this email”Decapsulated email content popup windowto implement a robust index-value database on a col-
lection of P2P nodes [64]. Intuitively, Vanish encrypts
a user’s data locally with a random encryption key not
known to the user, destroys the local copy of the key, and
then sprinkles bits (Shamir secret shares [49]) of the key
across random indices (thus random nodes) in the DHT.
Our choice of DHTs as storage systems for Vanish
stems from three unique DHT properties that make them
attractive for our data destruction goals. First, their huge
scale (over 1 million nodes for the Vuze DHT [28]),
geographical distribution of nodes across many coun-
tries, and complete decentralization make them robust
to powerful and legally inﬂuential adversaries. Second,
DHTs are designed to provide reliable distributed stor-
age [35, 56, 64]; we leverage this property to ensure that
the protected data remains available to the user for a de-
sired interval of time. Last but not least, DHTs have an
inherent property that we leverage in a unique and non-
standard way: the fact that the DHT is constantly chang-
ing means that the sprinkled information will naturally
disappear (vanish) as the DHT nodes churn or internally
cleanse themselves, thereby rendering the protected data
permanently unavailable over time.
In fact, it may be
impossible to determine retroactively which nodes were
responsible for storing a given value in the past.
Implementation and Evaluation. To demonstrate the
viability of our approach, we implemented a proof-of-
concept Vanish prototype, which is capable of using ei-
ther Bittorrent’s Vuze DHT client [3] or the PlanetLab-
hosted OpenDHT [54]. The Vuze-based system can sup-
port 8-hour timeouts in the basic Vanish usage model
and the OpenDHT-based system can support timeouts
up to one week.1 We built two applications on top of
the Vanish core — a Firefox plugin for Gmail and other
Web sites, and a self-destructing ﬁle management appli-
cation — and we intend to distribute all of these as open
source packages in the near future. While prototyping on
existing DHT infrastructures not designed for our pur-
pose has limitations, it allows us to experiment at scale,
have users beneﬁt immediately from our Vanish appli-
cations, and allow others to build upon the Vanish core.
Figure 1(b) shows how a user can decapsulate a vanish-
ing email from her friend using our Gmail plugin (com-
plete explanation of the interface and interactions is pro-
vided in Section 5). Our performance evaluation shows
that simple, Vanish-local optimizations can support even
latency-sensitive applications, such as our Gmail plugin,
with acceptable user-visible execution times.
Security is critical for our system and hence we con-
sider it in depth. Vanish targets post-facto, retroactive at-
tacks; that is, it defends the user against future attacks on
1We have an external mechanism to extend Vuze timeouts beyond
8 hours, which we describe later.
old, forgotten, or unreachable copies of her data. For ex-
ample, consider the subpoena of Ann’s email conversa-
tion with her friend in the event of a divorce. In this con-
text, the attacker does not know what speciﬁc content to
attack until after that content has expired. As a result the
attacker’s job is very difﬁcult, since he must develop an
infrastructure capable of attacking all users at all times.
We leverage this observation to estimate the cost for such
an attacker, which we deem too high to justify a viable
threat. While we target no formal security proofs, we
evaluate the security of our system both analytically and
experimentally. For our experimental attacks, we lever-
age Amazon’s EC2 cloud service to create a Vuze de-
ployment and to emulate attacks against medium-scale
DHTs.
Contributions. While the basic idea of our approach is
simple conceptually, care must be taken in handling and
evaluating the mechanisms employed to ensure its secu-
rity, practicality, and performance. Looking ahead, and
after brieﬂy considering other tempting approaches for
creating self-destructing data (Section 2), the key contri-
butions of this work are to:
self-destructing data (Section 3);
• identify the principal requirements and goals for
• propose a novel method for achieving these goals
that combines cryptography with decentralized,
global-scale DHTs (Section 4);
• demonstrate that our prototype system and appli-
cations are deployable today using existing DHTs,
while achieving acceptable performance, and exam-
ine the tensions between security and availability
for such deployments (Section 5);
• experimentally and analytically evaluate
the
privacy-preservation capabilities of our DHT-based
system (Section 6).
Together, these contributions provide the foundation
for empowering users with greater control over the life-
times of private data scattered across the Internet.
2 Candidate Approaches
A number of existing and seemingly natural approaches
may appear applicable to achieving our objectives. Upon
deeper investigation, however, we ﬁnd that none of these
approaches are sufﬁcient to achieve the goals enumerated
in Section 1. We consider these strawman approaches
here and use them to further motivate our design con-
straints in Section 3.
The most obvious approach would require users to ex-
plicitly and manually delete their data or install a cron
job to do that. However, because Web-mails and other
Web data are stored, cached, or backed up at numer-
ous places throughout the Internet or on Web servers,
this approach does not seem plausible. Even for a self-
destructing trash bin, requiring the user to explicitly
delete data is incompatible with our goals. For example,
suppose that the hard disk fails and is returned for repairs
or thrown out [15]; or imagine that a laptop is stolen and
the thief uses a cold-boot [32] attack to recover its pri-
mary whole-disk decryption keys (if any). We wish to
ensure data destruction even in cases such as these.
Another tempting approach might be to use a stan-
dard public key or symmetric encryption scheme, as pro-
vided by systems like PGP and its open source counter-
part, GPG. However, traditional encryption schemes are
insufﬁcient for our goals, as they are designed to pro-
tect against adversaries without access to the decryption