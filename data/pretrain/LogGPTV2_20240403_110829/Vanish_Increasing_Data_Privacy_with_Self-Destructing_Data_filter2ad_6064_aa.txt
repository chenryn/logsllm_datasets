# Vanish: Enhancing Data Privacy with Self-Destructing Data

**Authors:**
- Roxana Geambasu
- Tadayoshi Kohno
- Amit A. Levy
- Henry M. Levy

**Affiliation:**
University of Washington
{roxana, yoshi, levya, levy}@cs.washington.edu

## Abstract

The current legal and technical landscape presents significant challenges to personal data privacy. First, the increasing reliance on web services causes personal data to be cached, copied, and archived by third parties, often without the user's knowledge or control. Second, the disclosure of private data has become commonplace due to carelessness, theft, or legal actions.

Our research aims to protect the privacy of past, archived data—such as copies of emails maintained by an email provider—against accidental, malicious, and legal attacks. Specifically, we aim to ensure that all copies of certain data become unreadable after a user-specified time, without any specific action on the part of the user, even if an attacker obtains both a cached copy of that data and the user’s cryptographic keys and passwords.

This paper introduces Vanish, a system that meets this challenge through a novel integration of cryptographic techniques with global-scale, peer-to-peer (P2P), distributed hash tables (DHTs). We implemented a proof-of-concept Vanish prototype using both the million-plus-node Vuze BitTorrent DHT and the restricted-membership OpenDHT. We experimentally and analytically evaluate the functionality, security, and performance properties of Vanish, demonstrating that it is practical to use and meets the privacy-preserving goals described above. We also describe two applications that we prototyped on Vanish: a Firefox plugin for Gmail and other websites, and a Vanishing File application.

## 1. Introduction

We aim to create data that self-destructs or vanishes automatically after it is no longer useful. This should occur without any explicit action by the users or any party storing or archiving that data, ensuring that all copies of the data vanish simultaneously from all storage sites, whether online or offline.

Numerous applications could benefit from such self-destructing data. For example, consider the case of email. Emails are frequently cached, stored, or archived by email providers (e.g., Gmail, Hotmail), local backup systems, ISPs, etc. These emails may lose their value to the sender and receiver after a short period. However, many of these emails are private, and the act of storing them indefinitely at intermediate locations creates a potential privacy risk. For instance, imagine Ann sends an email to her friend discussing a sensitive topic, such as her relationship with her husband, the possibility of a divorce, or how to ward off a spurious lawsuit (see Figure 1(a)). This email has no value once her friend reads it, and Ann would like all copies of this email—regardless of where they are stored or cached—to be automatically destroyed after a certain period, rather than risk exposure in the future due to a data breach, email provider mismanagement, or a legal action. In fact, Ann would prefer that these emails disappear early, even before her friend reads them, to avoid disclosure to unintended parties. Both individuals and corporations could benefit from self-destructing emails.

More generally, self-destructing data is broadly applicable in today’s web-centered world, where users’ sensitive data can persist "in the cloud" indefinitely (sometimes even after the user’s account termination). With self-destructing data, users can regain control over the lifetimes of their web objects, such as private messages on Facebook, documents on Google Docs, or private photos on Flickr.

Other applications could also benefit from self-destructing data. For example, while we do not condone their actions, high-profile cases of several politicians highlight the relevance of self-destructing SMS and MMS text messages. The need for self-destructing text messages extends to the average user as well. As a news article states, “don’t ever say anything on email or text messaging that you don’t want to come back and bite you.” Some have argued that the right and ability to destroy data are essential to protect fundamental societal goals like privacy and liberty.

Another example is from a data sanitation perspective. Many users would benefit from self-destructing trash bins on their desktops. These trash bins would preserve deleted files for a certain period, but after a timeout, the files would self-destruct, becoming unavailable even to a forensic examiner (or anyone else, including the user). Moreover, the unavailability of these files would be guaranteed even if the forensic examiner is given a pristine copy of the hard drive from before the files self-destructed (e.g., because the machines were confiscated as part of a raid). Note that employing a whole disk encryption scheme is not sufficient, as the forensic examiner might be able to obtain the user’s encryption passwords and associated cryptographic keys through legal means. Other time-limited temporary files, like those that Microsoft Word periodically produces to recover from a crash, could similarly benefit from self-destructing mechanisms.

### Observation and Goals

A key observation in these examples is that users need to keep certain data for only a limited period. After that time, access to that data should be revoked for everyone, including the legitimate users of that data, known or unknown entities holding copies of it, and attackers. This mechanism will not be universally applicable to all users or data types; instead, we focus on sensitive data that a user would prefer to see destroyed early rather than fall into the wrong hands.

Motivated by the above examples, we ask whether it is possible to create a system that can permanently delete data after a timeout:
1. Even if an attacker can retroactively obtain a pristine copy of that data and any relevant persistent cryptographic keys and passphrases from before that timeout.
2. Without the use of any explicit delete action by the user or the parties storing that data.
3. Without needing to modify any of the stored or archived copies of that data.
4. Without the use of secure hardware.
5. Without relying on the introduction of any new external services that would need to be deployed (whether trusted or not).

A system achieving these goals would be broadly applicable in the modern digital world, e.g., for files, private blog posts, online documents, Facebook entries, content-sharing sites, emails, messages, etc. In fact, the privacy of any digital content could potentially be enhanced with self-deleting data.

However, implementing a system that achieves this goal set is challenging. Section 2 describes many natural approaches that one might attempt and how they all fall short. In this paper, we focus on a specific self-deleting data scheme that we have implemented, using email as an example application.

### Our Approach

The key insight behind our approach and the corresponding system, called Vanish, is to leverage the services provided by decentralized, global-scale P2P infrastructures, particularly Distributed Hash Tables (DHTs). DHTs are designed to implement a robust index-value database on a collection of P2P nodes. Intuitively, Vanish encrypts a user’s data locally with a random encryption key not known to the user, destroys the local copy of the key, and then sprinkles bits (Shamir secret shares) of the key across random indices (thus random nodes) in the DHT.

Our choice of DHTs as storage systems for Vanish stems from three unique DHT properties that make them attractive for our data destruction goals. First, their huge scale (over 1 million nodes for the Vuze DHT), geographical distribution of nodes across many countries, and complete decentralization make them robust to powerful and legally influential adversaries. Second, DHTs are designed to provide reliable distributed storage; we leverage this property to ensure that the protected data remains available to the user for a desired interval of time. Lastly, DHTs have an inherent property that we leverage in a unique and non-standard way: the fact that the DHT is constantly changing means that the sprinkled information will naturally disappear (vanish) as the DHT nodes churn or internally cleanse themselves, thereby rendering the protected data permanently unavailable over time. It may be impossible to determine retroactively which nodes were responsible for storing a given value in the past.

### Implementation and Evaluation

To demonstrate the viability of our approach, we implemented a proof-of-concept Vanish prototype, capable of using either Bittorrent’s Vuze DHT client or the PlanetLab-hosted OpenDHT. The Vuze-based system can support 8-hour timeouts in the basic Vanish usage model, and the OpenDHT-based system can support timeouts up to one week. We built two applications on top of the Vanish core—a Firefox plugin for Gmail and other websites, and a self-destructing file management application—and we intend to distribute all of these as open-source packages in the near future. While prototyping on existing DHT infrastructures not designed for our purpose has limitations, it allows us to experiment at scale, have users benefit immediately from our Vanish applications, and allow others to build upon the Vanish core. Figure 1(b) shows how a user can decapsulate a vanishing email from her friend using our Gmail plugin (a complete explanation of the interface and interactions is provided in Section 5). Our performance evaluation shows that simple, Vanish-local optimizations can support even latency-sensitive applications, such as our Gmail plugin, with acceptable user-visible execution times.

Security is critical for our system, and hence we consider it in depth. Vanish targets post-facto, retroactive attacks; that is, it defends the user against future attacks on old, forgotten, or unreachable copies of her data. For example, consider the subpoena of Ann’s email conversation with her friend in the event of a divorce. In this context, the attacker does not know what specific content to attack until after that content has expired. As a result, the attacker’s job is very difficult, as they must develop an infrastructure capable of attacking all users at all times. We leverage this observation to estimate the cost for such an attacker, which we deem too high to justify a viable threat. While we target no formal security proofs, we evaluate the security of our system both analytically and experimentally. For our experimental attacks, we leverage Amazon’s EC2 cloud service to create a Vuze deployment and to emulate attacks against medium-scale DHTs.

### Contributions

While the basic idea of our approach is conceptually simple, care must be taken in handling and evaluating the mechanisms employed to ensure its security, practicality, and performance. After briefly considering other tempting approaches for creating self-destructing data (Section 2), the key contributions of this work are to:
- Identify the principal requirements and goals for self-destructing data (Section 3).
- Propose a novel method for achieving these goals that combines cryptography with decentralized, global-scale DHTs (Section 4).
- Demonstrate that our prototype system and applications are deployable today using existing DHTs, while achieving acceptable performance, and examine the tensions between security and availability for such deployments (Section 5).
- Experimentally and analytically evaluate the privacy-preservation capabilities of our DHT-based system (Section 6).

Together, these contributions provide the foundation for empowering users with greater control over the lifetimes of private data scattered across the Internet.

## 2. Candidate Approaches

Several existing and seemingly natural approaches may appear applicable to achieving our objectives. Upon deeper investigation, however, we find that none of these approaches are sufficient to achieve the goals enumerated in Section 1. We consider these strawman approaches here and use them to further motivate our design constraints in Section 3.

The most obvious approach would require users to explicitly and manually delete their data or install a cron job to do so. However, because web-mails and other web data are stored, cached, or backed up at numerous places throughout the Internet or on web servers, this approach does not seem plausible. Even for a self-destructing trash bin, requiring the user to explicitly delete data is incompatible with our goals. For example, suppose the hard disk fails and is returned for repairs or thrown out, or imagine a laptop is stolen, and the thief uses a cold-boot attack to recover its primary whole-disk decryption keys (if any). We wish to ensure data destruction even in such cases.

Another tempting approach might be to use a standard public key or symmetric encryption scheme, as provided by systems like PGP and its open-source counterpart, GPG. However, traditional encryption schemes are insufficient for our goals, as they are designed to protect against adversaries without access to the decryption keys.