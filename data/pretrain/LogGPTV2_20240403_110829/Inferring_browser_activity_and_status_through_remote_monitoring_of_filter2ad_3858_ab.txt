### 3.2 Monitoring Script for Cross-Tab Activity Inference

When `tack.com` becomes a background tab, it starts to continuously record changes in the storage footprint size.

1. The victim's web browser fetches the resources of `Site.com` and stores them in the browser cache.
2. The script sends the change log of the storage footprint size to `Attack.com`. The attacker can infer that the victim has visited `Site.com` by comparing the change log with a pre-existing database.

**Figure 4:** This figure describes a monitoring script that records a change log of the storage footprint size. At lines 1–7, the script declares an event handler for the Page Visibility API [30] to determine whether the victim is visiting another website or staying on the attack website. When the victim visits another website via a new tab, the tab of the attack website becomes invisible, and the script starts to recursively call `queryStorageState()` to log the changes in the storage footprint size.

### 3.3 Identifying Non-Cached Websites

We first consider the cross-tab activity inference attack against websites that the victim's web browser has not recently visited (i.e., non-cached or cold). Assuming non-cached websites increases the inference accuracy of our attack because the web browser must fetch their entire resources and store them in local storage.

#### 3.3.1 Data Collection

We prepared attack databases by collecting storage footprints of candidate websites that a victim's web browser is likely to visit on three different platforms: Linux (Ubuntu 12.04), Windows 7, and Android 4.0. The data collection procedure for each front page of the Alexa Top 100 websites is as follows:

1. Using a Chrome web browser, we visit our attack page and then open one of the front pages via a new tab.
2. We monitor temporal changes in the storage footprint size for one minute (since we cannot know for sure when page loading finishes).
3. We send the change log to our attack server.
4. We clear the browser cache for later experiments.

We repeat this procedure 10 times for each front page on each platform, resulting in 1000 change logs of storage footprint size per platform. The average size of storage footprints is approximately 3 KiB. Note that we use Chrome’s default browser settings, without modifying any settings such as cache size and privacy settings.

| OS         | Web Browser   |
|------------|---------------|
| Linux      | Chromium 34   |
| Windows    | Chrome 34     |
| Android    | Chrome 34     |

**Table 1:** Experiment environment.

**Algorithm 1: Matching Algorithm**

**Input:** A storage footprint database \( D \), a victim’s storage footprint \( f_v \)

**Output:** The inferred web page

```plaintext
d_min ← ∞ // the minimum distance
p_c ← none
for each page p in D do
    // a candidate page
    for each storage footprint f_p of p in D do
        // compute a distance
        d = OSB(f_v, f_p)
        if d < d_min then
            d_min ← d
            p_c ← p
return p_c
```

#### 3.3.2 Inference Accuracy

To evaluate the inference accuracy of our cross-tab activity inference attack against non-cached websites, we visited each front page of the Alexa Top 100 websites 10 times on each platform and compared their storage footprints with the attack databases using Algorithm 1. As shown in Figure 5, Linux achieves the highest inference accuracy among the three platforms (97.3%), whereas Windows achieves the lowest (86.3%). We presume that background disk activity (§3.3.3) and wireless network (§3.3.4) contribute to the lower inference accuracy on Windows and Android, respectively.

**Figure 5:** Inference accuracy of cross-tab activity inference attacks against victim web browsers that visit the front pages of Alexa Top 100 sites on Linux (LAN), Android (Wi-Fi), and Windows (LAN). Error bars represent 95% confidence intervals. An attack against Linux showed the best accuracy.

#### 3.3.3 Background Disk Activity

We anticipate that the lower inference accuracy of our attack on Windows compared to Linux and Android is due to frequent background disk activity on Windows. Frequent disk activity, particularly writing activity, can interfere with our cross-tab activity inference attack because it monitors available storage space size. We measured the background disk activity of the three operating systems by monitoring their storage footprints and compared them in terms of idle periods where no changes in storage footprint size are observed. Figure 6 shows the idle period statistics of the three operating systems. The average idle periods for Android, Linux, and Windows are 67 s, 22.5 s, and 1.5 s, respectively. From these results, we conclude that change logs of storage footprint size derived from Windows contain a large amount of noise.

**Figure 6:** Statistics of idle periods that the size of storage footprints maintains in each OS during one hour. Windows suffered from frequent background disk activity.

To exclude the effects of background disk activity, we changed the location of the Chrome browser cache to a separate disk and evaluated the inference accuracy of cross-tab activity inference attacks against Alexa Top 100 websites. We used a Chrome command line switch `--disk-cache-dir` for this experiment. We observe that the inference accuracy on Windows increases by 1.06× when using the separate disk cache, whereas Linux has no benefit (Figure 7). Therefore, the low inference accuracy of cross-tab activity inference attacks on Windows is due to heavy background disk activity.

**Figure 7:** Inference accuracy of cross-tab activity inference with a separate disk cache to ignore background disk activity. The separate disk cache increased the inference accuracy on Windows; namely, Windows suffered from the background disk activity.

#### 3.3.4 Wireless Network

We believe the lower inference accuracy of our attack on Android compared to Linux is due to different network conditions: Wi-Fi versus LAN. Network conditions can affect the inference accuracy of our attack on Android because it typically uses Wi-Fi or cellular networks, which have less stable network latency than a wired LAN. To analyze how network conditions affect the inference accuracy of our cross-tab activity inference attack, we conducted our attack on both Wi-Fi and LAN. Figure 8 shows the inference accuracy of our attack when visiting the front web pages of Alexa Top 100 websites. The inference accuracy of our attack on Wi-Fi is 1.03×–1.05× lower than on LAN. Thus, we conclude that poor network conditions make the inference accuracy on Android worse than on Linux.

**Figure 8:** Accuracy of cross-tab activity inference attacks in wired and Wi-Fi networks. Using Wi-Fi slightly decreased the inference accuracy.

#### 3.3.5 Early Inference

The evaluation of the cross-tab activity inference attack so far has a shortcoming: it monitors changes in storage footprint size for one minute, but attackers cannot guarantee that a victim stays on a web page for more than one minute. To analyze how quickly our attack can infer a web page visited by a victim, we varied the monitoring time from 3 s to 60 s when attacking Alexa Top 100 websites. As shown in Figure 9, when we monitor storage footprint size changes for approximately 5 s on Linux and Windows and for approximately 10 s on Android, the inference accuracy of our attack becomes around 90%. Thus, when conducting cross-tab activity inference attacks, attackers only need to assume a victim who stays on an attack page for more than 10 s.

Interestingly, on Windows, we observe the highest inference accuracy (89%) when monitoring storage footprint size changes for 20 s, with a decrease in inference accuracy as the monitoring time increases (Figure 9). Windows has frequent background disk activity, as explained in §3.3.3, so prolonging the monitoring period decreases the inference accuracy.

**Figure 9:** Accuracy of cross-tab activity inference attacks according to the length of the monitoring time window. In Linux and Android, the inference accuracy became better as the length of the monitoring time window increased, but, in Windows, the inference accuracy became worse due to background disk activity.

### 3.4 Identifying Websites Visited via Tor

Internet users can use an anonymity network (e.g., Tor [42]) to protect their privacy. If a victim uses an anonymity network when visiting websites, the accuracy of our cross-tab activity inference attacks would decrease due to long and unstable network latency. To evaluate how an anonymity network affects the accuracy of our cross-tab activity inference attack, we conducted our attack against websites visited through Tor. We adjusted the `MaxCircuitDirtiness` option of Tor to change the virtual circuit whenever we visit a website. Figure 10 shows the inference accuracy of our attack when visiting the front web pages of Alexa Top 100 websites. The inference accuracy of our attack on Linux and Windows is 80.3% and 73.0%, respectively.

We analyzed why our cross-tab activity inference attack in a Tor network shows lower inference accuracy than in a normal network and identified two reasons. First, Tor can change the geographical location of a victim's web browser (an IP address belonging to a different country). Many websites customize their content according to the visitor's country information, so storage footprints of the browser can be completely changed even when it visits the same website. To overcome this, an attacker should prepare a large storage footprint database that covers a large number of countries. Second, we identify that a web browser on Tor occasionally cannot complete the page load, further reducing the inference accuracy.

**Figure 10:** Inference accuracy of cross-tab activity inference attacks when visiting the front web pages of Alexa Top 100 websites via Tor.