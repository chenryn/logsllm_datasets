title:Defending against Malicious Peripherals with Cinch
author:Sebastian Angel and
Riad S. Wahby and
Max Howald and
Joshua B. Leners and
Michael Spilo and
Zhen Sun and
Andrew J. Blumberg and
Michael Walfish
Defending against Malicious Peripherals  
with Cinch
Sebastian Angel, The University of Texas at Austin and New York University;  
Riad S. Wahby, Stanford University; Max Howald, The Cooper Union and New York University; 
Joshua B. Leners, Two Sigma; Michael Spilo and Zhen Sun, New York University;  
Andrew J. Blumberg, The University of Texas at Austin; Michael Walfish, New York University
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/angel
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Defending against malicious peripherals with Cinch
Sebastian Angel,⋆† Riad S. Wahby,‡ Max Howald,§† Joshua B. Leners,∥
Michael Spilo,† Zhen Sun,† Andrew J. Blumberg,⋆ and Michael Walfish†
⋆The University of Texas at Austin †New York University ‡Stanford University §The Cooper Union ∥Two Sigma
Abstract
Malicious peripherals designed to attack their host com-
puters are a growing problem. Inexpensive and powerful
peripherals that attach to plug-and-play buses have made
such attacks easy to mount. Making matters worse, com-
modity operating systems lack coherent defenses, and
users are often unaware of the scope of the problem.
We present Cinch, a pragmatic response to this threat.
Cinch uses virtualization to attach peripheral devices to
a logically separate, untrusted machine, and includes an
interposition layer between the untrusted machine and
the protected one. This layer regulates interaction with
devices according to user-configured policies. Cinch in-
tegrates with existing OSes, enforces policies that thwart
real-world attacks, and has low overhead.
Introduction
1
Peripheral devices are now powerful, portable, and plenti-
ful. For example, the inexpensive “conference USB sticks”
that we have all received include not only the stored con-
ference proceedings but also a complete computer. Given
this trend, it is easy to create malicious peripheral de-
vices [43, 61, 88, 98]. And yet, it is difficult to defend
against them: commodity machines and operating systems
continue to be designed to trust connected peripherals.
Consider a user who is induced to insert a malicious
USB stick into his or her laptop [91, 135, 148]. There are
now many examples [16, 75, 89] of such devices injecting
malware (most infamously, Stuxnet [94]), by exploiting
vulnerabilities in the host’s drivers or system software.
Another alarming possibility is that, while following
the USB specifications, the malicious device can mas-
querade as a keyboard. The device can then use its
keystroke-producing ability to install a virus or exfiltrate
files [43, 61, 125, 150]. As a last example, a USB de-
vice can eavesdrop on the communication between an-
other device, such as the user’s true keyboard, and the
host [12, 17, 25, 72, 124].
These problems will get worse: on next-generation lap-
tops [5, 10], all ports, including the power port, are USB,
which means that any of the attacks above could be carried
out by a malicious charger. For that matter, your phone
might be compromised right now, if you borrowed a USB
charger from the wrong person.
On the one hand, the concepts needed to solve these
problems have long been understood. For example, in
Rushby’s separation kernel [129] (see also its modern de-
scendants [81, 122]), the operating system is architected
to make different resources of the computer interact with
each other as if they were members of a distributed sys-
tem. More generally, the rich literature on high-assurance
kernels offers isolation, confinement, access control, and
many other relevant ideas. On the other hand, applying
these works in full requires redesigning the operating
system and possibly also the hardware.
Solutions that target device security for today’s com-
modity systems are not adequate for the task, often be-
cause they were designed under different models (§8).
For example, work on device driver containment [80,
83, 93, 95, 96, 105, 112, 114, 127, 143–145, 152] and
reliability [108, 130–132] trusts devices or assumes
they are at worst buggy; the attacks mentioned ear-
lier are largely out of scope. Hotplug control frame-
works [13, 15, 18, 22, 33, 35, 37, 48, 50, 55], of which
a notable example is udev on Linux [56, 110], enable
users to express that certain devices should be denied
access. However, access is all-or-nothing, decisions are
based upon the device’s claimed identity rather than its
ongoing behavior, and a malicious device can disarm the
enforcement mechanism. Qubes [45] protects the OS and
applications from malicious USB devices, but achieves
its strong guarantees at the expense of functionality.
The fundamental issue is that the I/O subsystems in
commodity operating systems do not have an organizing
abstraction that could serve as a natural foundation for
security features. This paper attempts to fill that void.
Our point of departure is a simple suggestion: rather
than design a new framework, why not arrange for at-
tached peripheral devices on commodity operating sys-
tems to appear to the kernel as if they were untrusted
network endpoints? This would create an interposition
point that would allow users and administrators to defend
the rest of the computer, just as firewalls and other net-
work middleboxes defend hosts from untrusted remote
hosts. Our animating hope is that a system based on this
picture would eliminate large classes of vulnerabilities, be
easy to deploy, and enable new functionality. To explore
that vision, this paper describes the design, implemen-
tation, and experimental evaluation of a system called
Cinch. Cinch begins with the following requirements:
• Cinch should make peripheral buses look “remote,” de-
spite the physical coupling, by preventing direct inter-
USENIX Association  
25th USENIX Security Symposium  397
action with the rest of the computer (memory access,
interrupts, etc.).
• Under Cinch, traffic between the “remote” devices
and the rest of the computer should travel through a
narrow choke point. This choke point then becomes a
convenient location for deploying defenses that inspect
and mediate interactions with untrusted devices.
• Cinch should not require modifying bus standards,
motherboards, OSes, or driver stacks. Any of these
would be massive undertakings, would have to be done
for multiple platforms, and would jettison the immense
effort behind today’s installed base.
• Cinch should be portable, in the sense that Cinch itself
should not need to be re-designed or re-implemented
for different operating systems.
• Cinch should be flexible and extensible: users, opera-
tors, and administrators should be able to quickly de-
velop and deploy a wide range of defenses.
• Cinch should impose reasonable overhead in latency
and throughput.
Cinch responds to these requirements with the follow-
ing architecture, focused on USB as a target (§4). Under
Cinch, USB devices attach to an isolated and untrusted
module; this is enforced via hardware support for virtu-
alizing I/O [70, 71]. The untrusted module tunnels USB
traffic to the protected machine, and this tunnel serves as
a choke point for enforcing policy.
To showcase the architecture, we build several example
defenses (§5). These include detecting attacks by match-
ing against a database of attack signatures (§5.1); sani-
tizing inputs by ensuring that messages and device state
transitions comply with protocol and device specifica-
tions (§5.2); sandboxing device functions and enforcing
hotplug policies (§5.3); device authentication and traffic
encryption (§5.4); and logging and remote auditing (§5.5).
Our implementation of Cinch (§6) instantiates both the
untrusted module and the protected machine as separate
virtual machines. As a consequence, Cinch protects any
OS that runs atop the underlying hypervisor. In principle,
these virtualization layers can be reduced or eliminated,
at the cost of development effort and portability (§4.2).
To study Cinch’s effectiveness, we developed exploits
based on existing vulnerabilities [14], performed fuzzing,
and conducted an exercise with a red team whose mem-
bers were kept isolated from Cinch’s development (§7.1–
§7.3). Our conclusion is that Cinch can prevent many
attacks with relatively little operator intervention. We
also find that developing new defenses on Cinch is con-
venient (§7.4). Finally, Cinch’s impact on performance
is modest (§7.5): Cinch adds less than 3 milliseconds of
latency and can handle USB 3 transfers of up to 2.1 Gbps,
which is 38% less than the baseline of 3.4 Gbps.
Cinch is enabled—and inspired—by much prior work
in peripherals management, hardware-assisted virtualiza-
tion, privilege separation, and network security. We delve
into this work in Section 8. For now, we simply state
that although Cinch’s individual elements are mostly bor-
rowed, it is a novel synthesis. That is, its contributions
are not mechanical but architectural. These contributions
are: viewing peripherals as remote untrusted endpoints,
and the architecture that results from this perspective; the
instantiation of that architecture, which uses virtualiza-
tion techniques to target a natural choke point in device
driver stacks; a platform that allows defenses to existing
attacks to be deployed naturally on commodity hardware,
in contrast to the status quo; and the implementation and
evaluation of Cinch.
Cinch is not perfect. First, it shrinks the attack sur-
face that the protected machine exposes to devices, but
introduces new trusted code elsewhere (§4.2). Second,
although Cinch can reduce the universe of possible inputs
to the drivers and OS on the protected machine (by ruling
out noncompliant traffic), a malicious device might still
exploit bugs in how the code handles compliant traffic.
On the other hand, the user can decide which devices get
this opportunity; further, addressing buggy drivers and
system software is a complementary effort (§8). Third,
Cinch does not unilaterally defend against higher-level
threats (data exfiltration, malware, etc.); however, Cinch
creates a platform by which one can borrow and deploy
known responses from network security (§5). Finally,
some of Cinch’s defenses require changes within the
device ecosystem (§9). For example, defending against
masquerading attacks requires device (but not bus) modifi-
cations. However, these changes are limited: in our imple-
mentation, one person prototyped them in less than two
days (§6.3). Importantly, these changes can be used with
unmodified legacy devices via an inexpensive adapter.
Despite its shortcomings, Cinch is a substantial im-
provement over the status quo when considering the mis-
behavior that it rules out and the functionality that it en-
ables. Moreover, we hope that Cinch’s perspective on
device security will be useful in its own right.
2 Background: Universal Serial Bus (USB)
Commodity computing devices (phones, tablets, laptops,
workstations, etc.) have several peripheral buses for plug-
gable devices. These include USB [57, 58], Firewire [1],
and Thunderbolt [54]. Cinch focuses on USB as an initial
target; we make this choice because USB is ubiquitous
and complex, and because it has become a popular lo-
cus of hardware-based attacks. However, our approach
applies to other buses.
Figure 1 depicts the hardware and software architecture
of USB. USB is a family of specifications for connect-
ing and powering peripheral devices. Bandwidth ranges
from 1.5 Mb/s (USB 1.0) to 10 Gb/s (USB 3.1). Example
398  25th USENIX Security Symposium 
USENIX Association
2
Class drivers
HID driver
Mass storage driver
Printer driver
USB Core
Power 
management
Device 
enumeration
Host controller interface (HCI)
Software
Host controller
Root hub
Hub
Hardware
FIGURE 1—The hardware and software of a USB stack (§2).
Both physical devices and drivers are arranged hierarchically;
devices are rooted at the host controller, and drivers are rooted
at the host controller interface. Components in dashed boxes are
logically in the same layer of the USB stack.
devices include storage (e.g., memory sticks), keyboards,
sound cards, video cameras, Ethernet adapters, and smart
card readers. These devices connect to a host (for example,
a laptop or desktop). Some computers can act as either
a device or a host; for example, a smart phone or laptop
can appear as a storage device or power consumer to a
desktop, but as a host to a keyboard.
USB hardware. USB has a tree topology. Each device
has an upstream connection to a hub. Hubs multiplex
communication from one or more downstream devices,
and are themselves devices with an upstream connection
to another hub or to the root of the tree. The root is a host
controller, which connects to the host by, for example,
PCIe. The host controller acts as the bus master: it initiates
all transfers to and from devices, and devices are not
permitted to transmit except when polled by the host
controller. Also, the host controller issues interrupts to
the host and has direct access to host memory via DMA.
USB protocol. The USB specifications [57, 58] define a
protocol stack comprising three layers. The bottom layer
includes electrical specifications and a low-level packet
protocol. The middle layer of the stack includes address-
ing, power management primitives, and high-level com-
munication abstractions. USB devices, comprising one
or more functions, sit at the top of the stack. Functions
act as logically separate peripherals that are exposed by
a single physical device. For example, a phone might ex-
pose a camera function, a network adapter function, and
a storage function. Each of these functions is associated
with its own high-level driver software.
USB driver architecture. The USB specification de-
scribes three layers of software abstraction on the host.
The lowest level, the host controller interface or HCI,
configures and interacts with the host controller hardware
via a local bus (e.g., PCIe). An HCI driver is particular
to a host controller’s hardware interface but exposes a
hardware-independent abstraction to the next software
layer, called core. Core manages device addressing and
power management, and exposes an interface for high-
level drivers to communicate with devices. Core also enu-
merates devices when they are attached, which entails
identifying the device and activating its driver.
The uppermost layer, class drivers, are high-level
drivers that interact with functions (as described above).
These drivers provide an interface between USB devices
and the rest of the OS. For example, a keyboard’s class
driver interacts with the kernel’s input subsystem. Another
example is the mass storage class driver, which talks to
the kernel’s storage subsystem. The USB specification
defines a set of generic classes for a broad range of de-
vices, e.g., keyboards, mice, network interfaces, storage,
cameras, audio, and more. Operating systems generally
include support for a large subset of the generic classes,
allowing devices to leverage preexisting drivers.
3 Causes, threat model, and taxonomy
3.1 Why is USB so vulnerable?
The root of the problem is the implicit assumption that