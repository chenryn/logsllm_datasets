* [通用类](#通用类)
   * [I. 代码实现](#i-代码实现)
      * [1.1 加密算法](#11-加密算法)
         * [1.1.1 【必须】避免使用不安全的对称加密算法](#111-必须避免使用不安全的对称加密算法)
      * [1.2 程序日志](#12-程序日志)
         * [1.2.1 【建议】对每个重要行为都记录日志](#121-建议对每个重要行为都记录日志)
         * [1.2.2 【建议】禁止将未经验证的用户输入直接记录日志](#122-建议禁止将未经验证的用户输入直接记录日志)
         * [1.2.3 【建议】避免在日志中保存敏感信息](#123-建议避免在日志中保存敏感信息)
      * [1.3 系统口令](#13-系统口令)
         * [1.3.1 【必须】禁止使用空口令、弱口令、已泄露口令](#131-必须禁止使用空口令弱口令已泄露口令)
         * [1.3.2 【必须】口令强度要求](#132-必须口令强度要求)
         * [1.3.3 【必须】口令存储安全](#133-必须口令存储安全)
         * [1.3.4 【必须】禁止传递明文口令](#134-必须禁止传递明文口令)
         * [1.3.5 【必须】禁止在不安全的信道中传输口令](#135-必须禁止在不安全的信道中传输口令)
   * [II. 配置&amp;环境](#ii-配置环境)
      * [2.1 Python版本选择](#21-python版本选择)
         * [2.1.1 【建议】使用Python 3.6+的版本](#211-建议使用python-36的版本)
      * [2.2 第三方包安全](#22-第三方包安全)
         * [2.2.2 【必须】禁止使用不安全的组件](#222-必须禁止使用不安全的组件)
      * [2.3 配置信息](#23-配置信息)
         * [2.3.1 【必须】密钥存储安全](#231-必须密钥存储安全)
         * [2.3.2 【必须】禁止硬编码敏感配置](#232-必须禁止硬编码敏感配置)
* [后台类](#后台类)
   * [I. 代码实现](#i-代码实现-1)
      * [1.1 输入验证](#11-输入验证)
         * [1.1.1 【必须】按类型进行数据校验](#111-必须按类型进行数据校验)
      * [1.2 SQL操作](#12-sql操作)
         * [1.2.1 【必须】使用参数化查询](#121-必须使用参数化查询)
         * [1.2.2 【必须】对参数进行过滤](#122-必须对参数进行过滤)
      * [1.3 执行命令](#13-执行命令)
         * [1.3.1 【建议】避免直接调用函数执行系统命令](#131-建议避免直接调用函数执行系统命令)
         * [1.3.2 【必须】过滤传入命令执行函数的字符](#132-必须过滤传入命令执行函数的字符)
         * [1.3.3 【必须】禁止不安全的代码执行](#133-必须禁止不安全的代码执行)
      * [1.4 文件操作](#14-文件操作)
         * [1.4.1 【必须】文件类型限制](#141-必须文件类型限制)
         * [1.4.2 【必须】禁止外部文件存储于可执行目录](#142-必须禁止外部文件存储于可执行目录)
         * [1.4.3 【必须】避免路径穿越](#143-必须避免路径穿越)
         * [1.4.4 【必须】禁用XML外部实体的方法](#144-必须禁用xml外部实体的方法)
         * [1.4.5 【必须】禁用不安全的反序列化函数](#145-必须禁用不安全的反序列化函数)
         * [1.4.6 【建议】避免路径拼接](#146-建议避免路径拼接)
         * [1.4.7 【建议】文件名hash化处理](#147-建议文件名hash化处理)
      * [1.5 网络请求](#15-网络请求)
         * [1.5.1 【必须】限定访问网络资源地址范围](#151-必须限定访问网络资源地址范围)
      * [1.6 响应输出](#16-响应输出)
         * [1.6.1 【必须】设置正确的HTTP响应包类型](#161-必须设置正确的http响应包类型)
         * [1.6.2 【必须】设置安全的HTTP响应头](#162-必须设置安全的http响应头)
         * [1.6.3 【必须】对外输出页面包含第三方数据时须进行编码处理](#163-必须对外输出页面包含第三方数据时须进行编码处理)
      * [1.7 数据输出](#17-数据输出)
         * [1.7.1 【必须】敏感数据加密存储](#171-必须敏感数据加密存储)
         * [1.7.2 【必须】敏感信息必须由后台进行脱敏处理](#172-必须敏感信息必须由后台进行脱敏处理)
         * [1.7.3 【必须】高敏感信息禁止存储、展示](#173-必须高敏感信息禁止存储展示)
         * [1.7.4 【必须】个人敏感信息脱敏展示](#174-必须个人敏感信息脱敏展示)
         * [1.7.5 【必须】隐藏后台地址](#175-必须隐藏后台地址)
      * [1.8 权限管理](#18-权限管理)
         * [1.8.1 【必须】默认鉴权](#181-必须默认鉴权)
         * [1.8.2 【必须】授权遵循最小权限原则](#182-必须授权遵循最小权限原则)
         * [1.8.3 【必须】避免越权访问](#183-必须避免越权访问)
         * [1.8.4 【建议】及时清理不需要的权限](#184-建议及时清理不需要的权限)
      * [1.9 异常处理](#19-异常处理)
         * [1.9.1 【必须】不向对外错误提示](#191-必须不向对外错误提示)
         * [1.9.2 【必须】禁止异常抛出敏感信息](#192-必须禁止异常抛出敏感信息)
      * [1.10 Flask安全](#110-flask安全)
         * [1.10.1 【必须】生产环境关闭调试模式](#1101-必须生产环境关闭调试模式)
         * [1.10.2 【建议】遵循Flask安全规范](#1102-建议遵循flask安全规范)
      * [1.11 Django安全](#111-django安全)
         * [1.11.1 【必须】生产环境关闭调试模式](#1111-必须生产环境关闭调试模式)
         * [1.11.2 【建议】保持Django自带的安全特性开启](#1112-建议保持django自带的安全特性开启)
#  通用类
## I. 代码实现
### 1.1 加密算法
#### 1.1.1 【必须】避免使用不安全的对称加密算法
- DES和3DES已经不再适用于现代应用程序，应改为使用AES。
### 1.2 程序日志
#### 1.2.1 【建议】对每个重要行为都记录日志
- 确保重要行为都记录日志，且可靠保存6个月以上。
#### 1.2.2 【建议】禁止将未经验证的用户输入直接记录日志
- 当日志条目包含未经净化的用户输入时会引发记录注入漏洞。恶意用户会插入伪造的日志数据，从而让系统管理员以为是系统行为。
#### 1.2.3 【建议】避免在日志中保存敏感信息
- 不能在日志保存密码（包括明文密码和密文密码）、密钥和其它敏感信息
### 1.3 系统口令
#### 1.3.1 【必须】禁止使用空口令、弱口令、已泄露口令
#### 1.3.2 【必须】口令强度要求
>  口令强度须同时满足：
>  1. 密码长度大于14位
>  2. 必须包含下列元素：大小写英文字母、数字、特殊字符
>  3. 不得使用各系统、程序的默认初始密码
>  4. 不能与最近6次使用过的密码重复
>  5. 不得与其他外部系统使用相同的密码
#### 1.3.3 【必须】口令存储安全
* 禁止明文存储口令
* 禁止使用弱密码学算法（如DES和3DES）加密存储口令
* 使用不可逆算法和随机salt对口令进行加密存储
#### 1.3.4 【必须】禁止传递明文口令
#### 1.3.5 【必须】禁止在不安全的信道中传输口令
## II. 配置&环境
### 2.1 Python版本选择
#### 2.1.1 【建议】使用Python 3.6+的版本
- 新增的项目应使用 Python 3.6+
> **为什么要这么做？**
> 由于 Python 2 在 [2020 年停止维护](https://www.python.org/doc/sunset-python-2/)，相关组件的漏洞不能得到及时修复与维护
### 2.2 第三方包安全
#### 2.2.2 【必须】禁止使用不安全的组件
### 2.3 配置信息
#### 2.3.1 【必须】密钥存储安全
- 在使用对称密码算法时，需要保护好加密密钥。当算法涉及敏感、业务数据时，可通过非对称算法协商加密密钥。其他较为不敏感的数据加密，可以通过变换算法等方式保护密钥。
#### 2.3.2 【必须】禁止硬编码敏感配置
- 禁止在源码中硬编码AK/SK、IP、数据库账密等配置信息
- 应使用配置系统或KMS密钥管理系统。
#  后台类
## I. 代码实现
### 1.1 输入验证
#### 1.1.1 【必须】按类型进行数据校验
- 所有程序外部输入的参数值，应进行数据校验。校验内容包括但不限于：数据长度、数据范围、数据类型与格式。校验不通过，应拒绝。
- 推荐使用组件：[Cerberus](https://github.com/pyeve/cerberus)、[jsonschema](https://github.com/Julian/jsonschema)、[Django-Validators](https://docs.djangoproject.com/en/dev/ref/validators/)
```python
# Cerberus示例
v = Validator({'name': {'type': 'string'}})
v.validate({'name': 'john doe'})
# jsonschema示例
schema = {
     "type" : "object",
     "properties" : {
         "price" : {"type" : "number"},
         "name" : {"type" : "string"},
     },
}
validate(instance={"name" : "Eggs", "price" : 34.99}, schema=schema)
```
### 1.2 SQL操作
#### 1.2.1 【必须】使用参数化查询
- 使用参数化SQL语句，强制区分数据和命令，避免产生SQL注入漏洞。
```python
# 错误示例
import mysql.connector
mydb = mysql.connector.connect(
... ...
)
cur = mydb.cursor()
userid = get_id_from_user()
# 使用%直接格式化字符串拼接SQL语句
cur.execute("SELECT `id`, `password` FROM `auth_user` WHERE `id`=%s " % (userid,)) 
myresult = cur.fetchall()
```
```python
# 安全示例
import mysql.connector
mydb = mysql.connector.connect(
... ...
)
cur = mydb.cursor()
userid = get_id_from_user()
# 将元组以参数的形式传入
cur.execute("SELECT `id`, `password` FROM `auth_user` WHERE `id`=%s " , (userid,))
myresult = cur.fetchall()
```
* 推荐使用ORM框架来操作数据库，如：使用`SQLAlchemy`。
```python
# 安装sqlalchemy并初始化数据库连接
# pip install sqlalchemy
from sqlalchemy import create_engine
# 初始化数据库连接，修改为你的数据库用户名和密码
engine = create_engine('mysql+mysqlconnector://user:password@host:port/DATABASE')
```
```python
# 引用数据类型
from sqlalchemy import Column, String, Integer, Float
from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()
# 定义 Player 对象:
class Player(Base):
    # 表的名字:
    __tablename__ = 'player'
    # 表的结构:
    player_id = Column(Integer, primary_key=True, autoincrement=True)
    team_id = Column(Integer)
    player_name = Column(String(255))
    height = Column(Float(3, 2))
```
```python
# 增删改查
from sqlalchemy.orm import sessionmaker
# 创建 DBSession 类型: