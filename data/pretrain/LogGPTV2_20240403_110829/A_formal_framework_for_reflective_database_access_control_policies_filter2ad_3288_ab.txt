allow for a form of computational reﬂection in evaluating dis-
tributed queries, in which the locations of a subquery can be
determined based on the results of another subquery. How-
ever, all of these access control systems assume “omniscient
access” (without restrictions) to the policy data.
Hippocratic Databases [3] make a distinction between users
that own a database table and users that own the data con-
tained in the table. Studies [23] show how policies for such
databases might depend on data contained within a table
and touch on the idea of allowing the user to deﬁne arbi-
trary policy logic. But these studies do not further examine
any security implications of this, focusing more on using the
boolean values in query optimization.
Other recent work reveals a trend towards implementing
RDBAC. A proposed extension to the standard SQL grant
syntax limits the conditions under which a grant may be per-
formed, including server conditions like time of day and user
conditions like the names of the user executing the grant and
the user receiving the grant [29]. The paper also addresses
when revocations of a grant may be temporary, and how
often to evaluate the grant conditions. The grants may de-
pend on the state of the database, constituting a reﬂective
system to some degree, although the paper does not deﬁne
a formal syntax or semantics. Several other projects imple-
ment RDBAC to some extent [2, 6, 11, 14, 33], although
none of these projects deﬁne a formal model and all assume
that the policy deﬁner has omniscient access to the database.
Rizvi et al. describe using query rewriting to determine
whether a given query is authorized, without actually chang-
ing the query [28]. In other words, if a query can be rewritten
using authorized views, then it is an authorized query, but
it puts the burden of actually determining how to formulate
the query properly on the user. They call this approach a
“Non-Truman model,” as opposed to a system that performs
query modiﬁcations, which they categorize as a “Truman
model.” They also allow views to be parameterized based
on system values like the name of the user, and because the
policies are deﬁned by the views, this also constitutes a re-
ﬂective model. Non-Truman models provide beneﬁts such as
providing query answers that represent the actual database
state1 and not adding extra execution tasks that may ad-
versely aﬀect the optimization task. There are also several
drawbacks, including burdening the users to formulate cor-
rect queries, and giving undescriptive feedback when a query
is disallowed.
Security issues with optimizing database query plans that
contain user-deﬁned functions have been studied by Kabra
et al. [21]. Na¨ıve optimizers may rearrange the query in
such a way that it executes eﬃciently, but gives user-deﬁned
functions access to sensitive data before any ﬁlters are ap-
plied. Our work will not address this concern; however, this
does constitute a major issue that must be considered for
deployed systems that may use RDBAC with user-deﬁned
functions.
Finally, an extension to the SQL syntax and semantics
for including predicates in grant statements was proposed
by Chaudhuri et al. [10]. These predicates follow the syn-
tax of SQL where clauses; thus, this allows policies to con-
tain arbitrary read-only queries on the database. Queries on
these tables are rewritten based on these policies, constitut-
ing a Truman model. Furthermore, these policies are non-
omniscient; that is, they are in turn rewritten based on the
deﬁner’s view of the database. Their work does not include
formal policy analysis, nor do they allow cyclic policies, or
database updates within policies.
3. DATALOG OVERVIEW
Datalog is a well-recognized language used in deﬁning
query logic. It has a mathematically-deﬁned semantics and
eﬃcient query computation algorithms [5, 13]. Several ex-
tensions to classical Datalog have been proposed; one of par-
ticular interest to this work is allowing Datalog rules to mod-
ify the database [1, 7]. In this section we review the syntax
and semantics of classical Datalog, describe an extension we
will use for this work, and discusses the eﬃciency of evalu-
ating rules.
3.1 Syntax and Semantics
We begin with a brief review of Datalog syntax and se-
mantics as deﬁned in literature such as [5, 13]. We assume
the existence of three types of symbols: variables, constants,
and predicate names. For the purposes of this paper, we
will use the convention of representing variables as alphanu-
meric strings beginning with a capital letter, constants as ei-
ther integers or alphanumeric strings beginning with a lower-
case letter, and predicate names as either non-alphanumeric
1
Truman models, by contrast, perform query rewriting (perhaps with-
out any user knowledge) and may give misleading results, or worse,
may give incorrect answers if part of a larger set diﬀerence or existence
query.
strings or as alphanumeric strings beginning with a lower-
case letter. Whether a particular string refers to a constant
or to a predicate name will be clear from the context, al-
though for readability we will often surround string con-
stants with single-quotes. We also assume that each predi-
cate name is associated with a ﬁxed integer, called its arity.
Following these conventions, X, Y1, and Name are all vari-
ables while p, patients, and alice may be either constants
or predicate names. 1 is a constant. = is a predicate name.
A literal is a string of the form p(t1, t2, ..., tn) where
p is a predicate name with arity n and each ti for 1 ≤ i ≤ n
is either a constant or a variable. We call the sequence (t1,
t2, ..., tn) a tuple with arity n. A variable assignment is
a functional mapping of variables to constants. We will often
use the following shorthand extension:
for some variable
assignment σ, let σ(t) = t if t is a constant. We will also
often use the shorthand notation σ(t1, . . . , tn) to represent
(σ(t1), . . . , σ(tn)). A rule is a statement of the form p :-
q1, q2, ..., qn. where p and each qi for 1 ≤ i ≤ n is a
literal. We call p the head of the rule, and q1, q2, . . . , qn the
body of the rule. A fact is a rule such that the head is a literal
that contains no variables, and the body is empty. A fact
may equivalently be written without the colon and hyphen
separator, e.g. p(t1, ..., tn). A predicate corresponding
to a predicate name is the set of all deﬁned rules such that
the head of the rule is a literal with the given predicate
name. (We also use the term predicate to refer to the set of
tuples inferred from the predicate using Datalog semantics.)
A database is a non-ordered, possibly inﬁnite set of rules.
Example 1. The following rules deﬁne a simple employee
database
employee(‘alice’, 90000, ‘hr’, ‘manager’).
employee(‘bob’, 70000, ‘sales’, ‘clerk’).
employee(‘carol’, 90000, ‘sales’, ‘manager’).
employee(‘david’, 80000, ‘hr’, ‘cpa’).
manager(Person, Dept) :- employee(Person, Salary,
Dept, ‘manager’).
2
Datalog semantics follow a simple inference system, where
predicates over tuples of terms are inductively derived from
facts and repeatedly using rules, where a rule derives the
head if there is an assignment to the variables such that the
body of the rule is conjunctively true with respect to this
assignment. The formal inference rules for Datalog can be
found in much of the Datalog literature [5, 13].
We typically partition the rules of a database into built-in
predicates and database predicates. A built-in predicate is a
predicate with a pre-deﬁned mapping that remains constant
over every database interpretation. The name for a built-in
predicate is usually a non-alphanumeric string. For instance,
the equality predicate is a built-in predicate containing the
rules =(1,1) and =(X,Z) :- =(X,Y),=(Y,Z) (among many
others). A database predicate is any predicate that is not a
built-in predicate. Because the semantics of built-in pred-
icates are constant over every database, we typically omit
rules for built-in predicates when describing a database def-
inition, and only list the database predicates.
3.2 Transaction Datalog
Transaction Datalog [7] augments classical Datalog with
syntax and semantics to allow Datalog rules to modify the
underlying database. Transaction Datalog (hereafter abbre-
viated TD) was designed as a high-level programming lan-
guage to model workﬂows, where programmers can specify
transactions containing both queries and updates, compos-
ing them using sequential and parallel constructs. TD also
has a precise mathematical semantics that includes atomic
updates to databases that prevent nontrivial interference be-
tween transactions and maintain serializability.
For simplicity, we will not consider all of the features pro-
vided by TD. We will restrict ourselves to using only serial
conjunction, and will assume that rules are evaluated in iso-
lation. For a reader familiar with TD, the formal way to
interpret a rule in our framework of the form p :- q1, q2,
..., qn. is to view it as the TD term p :- ⊙ (q1 ⊗ q2 ⊗
...⊗ qn). where ⊗ is the sequential composition operator
and the isolation operator ⊙ isolates the execution of the
rule from other rules. The diﬀerence with full TD does not
indicate incompatibility with our work; indeed, future work
may incorporate the omitted features.
We will now provide the syntax and semantics of TD rules;
the latter will involve state updates that could be applied
to the database in order to evaluate the rule, and will im-
plicitly capture the rollback mechanism in case the rule fails
to evaluate to true, and also capture the atomicity of eval-
uation of rules with respect to other rules. Without loss of
generality, we assume a user-deﬁned set of predicate names
(with corresponding arities) is partitioned into either a set
of base predicate names or a set of derived predicate names,2
with each predicate name renamed as necessary so as not
to conﬂict with the following special database-deﬁned pred-
icate names: for each base predicate name p with arity n,
there exists an assertion predicate name ins.p and a retrac-
tion predicate name del.p, both with arity n. The deﬁnition
of a rule is as before, with the restriction that the literal at
the head of the rule must have either a base predicate name
or a derived predicate name (i.e. not assertion or retrac-
tion predicate names). Additionally, if the name is a base
predicate name, then the rule must be a fact (i.e. the body
must be empty). Since evaluating a rule may change the
database state, it is no longer suﬃcient to deﬁne a single
database model as we did before. Thus, in order to deﬁne
the semantics of predicates in this extension, TD also de-
ﬁnes an inference system for answering queries. The state of
a database is the set of facts for the database’s base predicate
names. A transaction base is the set of rules in a database
that are not in the database state. Because assertion and
retraction predicate names are only deﬁned for base predi-
cate names, this partition of the database rules into the state
and the transaction base eﬀectively separates the part of the
database that remains constant (the transaction base) from
the part that can be modiﬁed (the state).
The inference rules for TD are similar to the inference
rules for Datalog, with the addition of keeping track of the
sequence of database states required to reach the conclu-
sion. Inferring a tuple for a base predicate name does not
change the state; its truth value is simply computed based
on whether or not the tuple exists as a fact in the database.
−→
Inferring a tuple for an assertion predicate ins.p(
t ) or a
−→
retraction predicate del.p(
t ) is always true; however, the
state of the database is changed by inserting or deleting the
−→
t ), respectively. Inferring a tuple for a derived pred-
fact p(
2
This terminology was chosen to be consistent with Datalog liter-
ature. While we will also deﬁne assertion predicates and retraction
predicates with names derived from base predicates, they are not con-
sidered to be derived predicates.
icate is the same as in classical Datalog, with the condition
that the sequence of states in the derivation of the body
of the rule must be continuous. That is, the ﬁnal state of
the derivation for each predicate must be the same as the
initial state of the derivation for the next predicate. Note
that, by deﬁnition, if some clause in the rule fails, we re-
quire that no change be made to the database (which in
eﬀect means that all changes made must be rolled back).
Further, note the deﬁnition precludes non-serializable inter-
ference between rule evaluations.
Example 2. Recall the database from Example 1. As-
suming the existence of the built-in predicate >=, suppose we
add a rule for adding new employees that enforces a min-
imum salary of 50000, such as hire(Name, Salary, Dept,
Pos) :- >=(Salary, 50000), ins.employee(Name, Salary,
Dept, Pos). If P represents the transaction base of the
example database, S represents the original state of the
database, and S ′ represents the state augmented with the
additional
employee(‘emily’, 60000, ‘support’,
‘service’) then we can represent the execution of activat-
ing the hiring rule with the following steps:
fact
1. Infer >=(60000, 50000), with the state sequence hS, Si
(i.e. no change to the database state).
2. Infer ins.employee(‘emily’,
60000,
‘support’,
‘service’) with the state sequence hS, S ′i.
3. Infer hire(‘emily’, 60000, ‘support’, ‘service’)
with the state sequence hS, S, S ′i, using the given rule
for hire.
2
3.3 Query Evaluation
Two natural and important questions to consider about a
given database are: whether there exists a unique answer to
each query, and whether computing the answer to a query is
decidable. Fortunately, there has already been earlier work
on ﬁnding useful cases for both conditions. Datalog rules
without negation always satisfy the ﬁrst condition [34].3 One
simple and well-known categorization for guaranteeing de-
cidability is strong safety [5], which includes two conditions
on rules: the ﬁrst is range-restriction, meaning every vari-
able in the head of the rule appears somewhere in the body
of the rule. The second is that every variable that appears
in a built-in predicate term in the body must also appear as
a variable in a database predicate term in the body. If every
rule in a database is strongly safe, then every query on that
database is safe.4
The complexity of evaluating rules in TD was shown to be
undecidable [8]; however, applying some reasonable restric-
tions to the TD rules gives more encouraging results on exe-
cution complexity. Most signiﬁcantly to our work, allowing
assertions and retractions but disallowing concurrent com-
position (as we do) reduces the complexity to EXPTIME.
Other restricted fragments of TD can be made to further
reduce the complexity [8].
3
In certain cases, negations can be included while still guaranteeing
unique solutions [31]. However, since TD syntax and semantics do not
allow for negations, we will not consider them further for this paper.
4
This is a suﬃcient but not a necessary condition.
1. view.employee(User, Person, Salary, Dept, Pos) :-
employee(Person, Salary, Dept, Pos),
=(User, Person).
2. view.employee(User, Person, null, Dept, Pos) :-
employee(User, _, Dept, ‘manager’),
emloyee(Person, _, Dept, Pos).
3. view.ins.employee(User, Person, Salary, Dept,
Pos) :-
employee(User, _, hr, _),
ins.employee(Person, Salary, Dept, Pos).
4. view.picnic(User, Person, Assignment) :-
employee(Person, Salary, Dept, Pos),
ins.leaked_info(Person, Salary, Dept, Pos),
picnic(Person, Assignment).
Figure 3: Example view predicates
4. DEFINING POLICIES
TD provides a well-developed theoretical foundation for
database logic. We propose the use of TD for enforcing ﬁne-
grained RDBAC.
For each database predicate name p with arity n, we deﬁne
a set of three view predicate names: view.p, view.ins.p,
and view.del.p, each with arity n + 1. The rules for these
predicate names may be deﬁned at the discretion of the
database administrator, but have the interpretation that
view.p(U, T1, ..., Tn) can be derived from the current
database state if and only if user U should be granted read
access to the values of p(T1, ..., Tn). The database state
after the derivation may or may not be the same state as
before the derivation. Similarly, view.ins.p(U, T1, ...,
Tn) (respectively, view.del.p(...)) can be derived from
the current database state if and only if user U should be
allowed to insert (respectively, delete) the fact p(T1, ...,