Removing intermediate container d55a7726e9a7
 ---> 634ab90b168f
Step 6/8 : EXPOSE 80/tcp
 ---> Running in a59f40d3d5df
Removing intermediate container a59f40d3d5df
 ---> d1aadf757f59
Step 7/8 : ENTRYPOINT ["httpd"]
 ---> Running in c7a1ab69356d
Removing intermediate container c7a1ab69356d
 ---> 22a9eb0e6719
Step 8/8 : CMD ["-D", "FOREGROUND"]
 ---> Running in 8ea92151ce22
Removing intermediate container 8ea92151ce22
 ---> da34eaff9541
Successfully built da34eaff9541
Successfully tagged local/apache-php:5
```
我们可以通过运行以下命令来启动一个容器，这次是在港口`9090`:
```
$ docker container run -d -p 9090:80 --name apache-php5 local/apache-php:5
```
再次打开浏览器，但这次转到`http://localhost:9090/`，应该显示我们正在运行 PHP5:
![](img/41bd2e7e-8182-4035-be75-312200013d41.png)
最后，您可以通过运行以下命令来比较映像的大小:
```
$ docker image ls
```
您应该会看到以下终端输出:
![](img/47fc018c-fd1e-4dd5-bc96-1c3d87281a7c.png)
这表明 PHP7 的映像比 PHP5 的映像小很多。让我们讨论一下当我们构建两个不同的容器映像时实际发生了什么。
发生了什么？当 Docker 启动 Alpine Linux 映像来创建我们的映像时，它做的第一件事是设置我们定义的 env，使它们对容器中的所有外壳都可用。
幸运的是，Alpine Linux 中 PHP 的命名方案只是替换了版本号，并为我们需要安装的包维护了相同的名称，这意味着我们运行以下命令:
```
RUN apk add --update apache2 php${PHPVERSION}-apache2 php${PHPVERSION}
```
但实际上解释如下:
```
RUN apk add --update apache2 php7-apache2 php7
```
或者，对于 PHP5，它被解释为以下内容:
```
RUN apk add --update apache2 php5-apache2 php5
```
这意味着我们不必遍历整个 Dockerfile，手动替换版本号。这种方法在从远程网址安装软件包时特别有用，例如软件发布页面。
接下来是一个更高级的例子——一个由哈希公司安装和配置 Consul 的 Dockerfile。在这个 Dockerfile 中，我们使用环境变量来定义我们下载的文件的版本号和 SHA256 哈希:
```
FROM alpine:latest
LABEL maintainer="Russ McKendrick "
LABEL description="An image with the latest version on Consul."
ENV CONSUL_VERSION=1.2.2 CONSUL_SHA256=7fa3b287b22b58283b8bd5479291161af2badbc945709eb5412840d91b912060
RUN apk add --update ca-certificates wget && \
 wget -O consul.zip https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip && \
 echo "$CONSUL_SHA256 *consul.zip" | sha256sum -c - && \
 unzip consul.zip && \
 mv consul /bin/ && \
 rm -rf consul.zip && \
 rm -rf /tmp/* /var/cache/apk/*
EXPOSE 8300 8301 8301/udp 8302 8302/udp 8400 8500 8600 8600/udp
VOLUME [ "/data" ]
ENTRYPOINT [ "/bin/consul" ]
CMD [ "agent", "-data-dir", "/data", "-server", "-bootstrap-expect", "1", "-client=0.0.0.0"]
```
如您所见，Dockerfiles 可能变得相当复杂，使用 env 可以帮助维护。每当新版本的执政官发布时，我只需要更新`ENV`行并将其提交给 GitHub，这将触发新映像的构建——嗯，如果我们将它配置为这样做，它就会这样做；我们将在下一章讨论这个问题。
您可能还注意到，我们在 Dockerfile 中使用了一个我们没有涉及的指令。别担心，我们会看第四章*管理容器*中的`VOLUME`说明。
# 使用多阶段构建
这是我们使用 Dockerfiles 和构建容器映像之旅的最后一部分，我们将研究使用一种相对较新的方法来构建映像。在本章这一部分的前几节中，我们研究了通过包管理器(如 Alpine Linux 的 APK)或者通过从软件供应商下载预编译的二进制文件，将二进制文件直接添加到我们的映像中。
如果我们想要编译我们自己的软件作为构建的一部分呢？从历史上看，我们必须使用包含完整构建环境的容器映像，这可能非常大。这意味着我们可能不得不凑齐一个脚本，运行类似以下过程:
1.  下载构建环境容器映像并启动“构建”容器
2.  将源代码复制到“构建”容器
3.  在“构建”容器上编译源代码
4.  将编译后的二进制文件复制到“构建”容器之外
5.  移除“构建”容器
6.  使用预写的 Dockerfile 构建映像并将二进制文件复制到其中
这是一个很大的逻辑——在一个理想的世界里，它应该是 Docker 的一部分。幸运的是，Docker 社区是这样认为的，实现这一点的功能(称为多阶段构建)是在 Docker 17.05 中引入的。
Dockerfile 包含两个不同的构建阶段。第一个名为`builder`，使用 Docker Hub 的官方 Go 容器映像。这里，我们正在安装一个先决条件，直接从 GitHub 下载源代码，然后将其编译为静态二进制文件:
```
FROM golang:latest as builder
WORKDIR /go-http-hello-world/
RUN go get -d -v golang.org/x/net/html 
ADD https://raw.githubusercontent.com/geetarista/go-http-hello-world/master/hello_world/hello_world.go ./hello_world.go
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .
FROM scratch 
COPY --from=builder /go-http-hello-world/app .
CMD ["./app"] 
```
因为我们的静态二进制文件有一个内置的 web 服务器，所以从操作系统的角度来看，我们真的不需要任何其他东西。正因为如此，我们能够使用`scratch`作为基础映像，这意味着我们所有的映像都将包含我们从构建器映像中复制的静态二进制文件，并且根本不会包含任何`builder`环境。
要构建映像，我们只需要运行以下命令:
```
$ docker image build --tag local:go-hello-world .
```
该命令的输出可以在下面的代码块中找到——有趣的位发生在步骤 5 和 6 之间:
```
Sending build context to Docker daemon 9.216kB
Step 1/8 : FROM golang:latest as builder
latest: Pulling from library/golang
55cbf04beb70: Pull complete
1607093a898c: Pull complete
9a8ea045c926: Pull complete
d4eee24d4dac: Pull complete
9c35c9787a2f: Pull complete
6a66653f6388: Pull complete
102f6b19f797: Pull complete
Digest: sha256:957f390aceead48668eb103ef162452c6dae25042ba9c41762f5210c5ad3aeea
Status: Downloaded newer image for golang:latest
 ---> d0e7a411e3da
Step 2/8 : WORKDIR /go-http-hello-world/
 ---> Running in e1d56745f358
Removing intermediate container e1d56745f358
 ---> f18dfc0166a0
Step 3/8 : RUN go get -d -v golang.org/x/net/html
 ---> Running in 5e97d81db53c
Fetching https://golang.org/x/net/html?go-get=1
Parsing meta tags from https://golang.org/x/net/html?go-get=1 (status code 200)
get "golang.org/x/net/html": found meta tag get.metaImport{Prefix:"golang.org/x/net", VCS:"git", RepoRoot:"https://go.googlesource.com/net"} at https://golang.org/x/net/html?go-get=1
get "golang.org/x/net/html": verifying non-authoritative meta tag
Fetching https://golang.org/x/net?go-get=1
Parsing meta tags from https://golang.org/x/net?go-get=1 (status code 200)
golang.org/x/net (download)
Removing intermediate container 5e97d81db53c
 ---> f94822756a52
Step 4/8 : ADD https://raw.githubusercontent.com/geetarista/go-http-hello-world/master/hello_world/hello_world.go ./hello_world.go
Downloading 393B
 ---> ecf3944740e1
Step 5/8 : RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .
 ---> Running in 6e2d39c4d8ba
Removing intermediate container 6e2d39c4d8ba
 ---> 247fcbfb7a4d
Step 6/8 : FROM scratch
 --->
Step 7/8 : COPY --from=builder /go-http-hello-world/app .
 ---> a69cf59ab1d3
Step 8/8 : CMD ["./app"]
 ---> Running in c99076fad7fb
Removing intermediate container c99076fad7fb
 ---> 67296001bdc0
Successfully built 67296001bdc0
Successfully tagged local:go-hello-world
```
如您所见，在第 5 步和第 6 步之间，我们的二进制文件已经被编译，包含`builder`环境的容器被移除，留给我们一个存储我们的二进制文件的映像。第 7 步将二进制文件复制到一个使用 scratch 启动的新容器中，只留下我们需要的内容。
如果您要运行以下命令，您会明白为什么不在构建环境完整的情况下交付应用是个好主意:
```
$ docker image ls
```
下面我们输出的截图显示`golang`映像为`794MB`；随着我们的源代码和先决条件的增加，大小增加到`832MB`:
![](img/c73e731e-21c0-461b-9e40-0ef64d69cfb5.png)
然而，最终的形象只是`6.56MB`。我相信你会同意这是相当大的节省空间。它还遵循本章前面讨论的最佳实践，只在映像中包含与我们的应用相关的内容，并且非常非常小。
您可以通过使用以下命令启动容器来测试应用:
```
$ docker container run -d -p 8000:80 --name go-hello-world local:go-hello-world
```
该应用可通过浏览器访问，并在每次加载页面时简单地增加一个计数器。要在 macOS 和 Linux 上进行测试，可以使用`curl`命令，如下所示:
```
$ curl http://localhost:8000/
```
这应该会给你类似以下的东西:
![](img/0dd95dc9-af1e-401b-82c8-567ecff6abee.png)
Windows 用户只需在浏览器中访问`http://localhost:8000/`。要停止并删除正在运行的容器，请使用以下命令:
```
$ docker container stop go-hello-world
$ docker container rm go-hello-world
```
如您所见，使用多阶段构建是一个相对简单的过程，并且符合已经开始熟悉的说明。
# 摘要
在本章中，我们深入了解了 Dockerfiles、编写它们的最佳实践、docker 映像构建命令以及我们构建容器的各种方法。我们还了解了环境变量，您可以使用这些变量将 Dockerfile 传递给容器中的各种项目。
在下一章中，既然我们知道了如何使用 Dockerfiles 构建映像，我们将了解 Docker Hub 以及使用注册表服务带来的所有优势。我们还将看看 Docker 注册表，它是开源的，因此您可以滚动自己的位置来存储映像，而无需 Docker Enterprise 的费用，以及第三方注册表服务。
# 问题
1.  对还是错:`LABEL`指令一旦建立就标记你的映像？
2.  `ENTRYPOINT`和`CMD`指令有什么区别？
3.  对还是错:使用`ADD`指令时，不能下载并自动解压缩外部托管的档案？
4.  使用现有容器作为映像基础的有效用途是什么？
5.  `EXPOSE`指令揭示了什么？
# 进一步阅读
您可以在以下网址找到官方 Docker 容器映像的指南:
*   [https://github.com/docker-library/official-img/](https://github.com/docker-library/official-img/)
帮助您从现有安装创建容器的一些工具如下:
*   德波特带:[https://wiki.debian.org/Debootstrap/](https://wiki.debian.org/Debootstrap/)
*   尤姆自举:[https://github . com/doze/尤姆自举/](https://github.com/dozzie/yumbootstrap/)
*   rense:[https://salsa . debian . org/debian/rinse/](https://salsa.debian.org/debian/rinse/)
*   Docker ib 脚本:https://github . com/Moby/Moby/tree/master/IB/
最后，Go HTTP Hello World 应用的完整 GitHub 存储库可以在以下位置找到:
*   [https://github . com/geeta/go-http-hello-world/](https://github.com/geetarista/go-http-hello-world/)