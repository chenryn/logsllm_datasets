and all other data objects speciﬁed by the Visa kernel.
5. Transmit Records:
In response to the terminal’s
READ RECORD command, which is 0x00B2011C00
due to the artiﬁcial AFL, the attacker replies with the
PAN, the expiration date, the Application Usage Control
(AUC), and the issuer country.
3.3 Carrying out the Attack
To demonstrate our PIN bypass attack, we developed a proof-
of-concept Android application, comprising roughly 3,700
lines of Java code. On the merchant side, we used the pay-
ment kit commercialized by SumUp: an EMV and PCI DSS
(Payment Card Industry Data Security Standard) certiﬁed
company licensed under the UK’s Financial Conduct Author-
ity. The kit costs about 50 USD and includes a card reader,
which works with both contact and contactless cards, and a
back-end mobile application available for iOS and Android
devices. The SumUp card reader is PCI PTS (Payment Card
Industry PIN Transaction Security) certiﬁed. Figure 5 dis-
plays the components of our testing environment.
Our attack is implemented using two Android phones, con-
nected through a relay channel built using TCP/IP server-
client communication over WiFi. One phone runs our app
in POS Emulator mode (Device 4 in Figure 5) and the other
phone runs our app in Card Emulator mode (Device 3 in Fig-
ure 5). Both devices must support NFC and run Android 4.4
KitKat (API level 19) or later. Moreover, the Card Emulator
device must support Android’s host-based card emulation [2]
so that the phone can launch the NFC payment service imple-
mented by our app. The actual man-in-the-middle function-
ality runs on the POS Emulator device (although this choice
is irrelevant) and the Card Emulator acts as the proxy for the
relay channel.
Using our app, we successfully bypassed PIN entry for
transactions with four different cards: two Mastercard credit
cards and two Maestro debit cards. A video demonstration of
the attack and other information can be found at [1].
The results of our experiments are summarized in Table 1.
Some of these transactions were performed with the Google
Pay and Apple Pay apps using non-Visa cards. Such trans-
actions do not require PIN veriﬁcation and thus no bypass
is needed, yet they showcase unauthentic uses of the Visa
kernel.
Critical here is that the transactions in Table 1 were all au-
thorized online by the issuer. Moreover, this was without any
186    30th USENIX Security Symposium
USENIX Association
Brand
Card
Visa
Mastercard
Visa Credit
Visa Debit
V Pay
Maestro(1)
Maestro(1) on Google Pay
Maestro(1) on Apple Pay
Maestro(2)
Mastercard Debit(3)(∗)
Mastercard Debit(3) on Google Pay
Mastercard Debit(3) on Apple Pay
Mastercard Credit(4)
Mastercard Credit(5)
Amount
(CHF)
200
100
100
400
1
1
200
10
1
1
100
100
Processed with
the Visa kernel
NA
NA
NA
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Bypassed
PIN
Yes
Yes
Yes
Yes
NA
NA
Yes
NA
NA
NA
Yes
Yes
Legend:
NA: not applicable
(∗): card for which we unsuccessfully attempted our PIN bypass for a 100 CHF transaction but
(1) to (5): each of the ﬁve different physical cards we tested
the terminal requested to insert the card to complete the transaction using the contact chip instead
Table 1: Summary of the transactions during our experiments. All of these transactions were authorized online and were
subsequently debited from the cardholder’s account and credited to the merchant’s account. For some cards, we performed
multiple transactions and we show here the one with the highest value.
adversarial intervention beyond the terminal-card interaction
and despite the different views between the terminal and the
issuer on the AID selected for the transaction. The EMV pro-
tocol does not unambiguously specify what transaction data
is sent to the issuer for authorization. Clearly, since our attack
is possible, the AID and any other kernel-identifying data is
either not sent, or not checked by the issuer. We cannot how-
ever conﬁrm that this is the case for all EMV implementations
in terminals.
Our card brand mixup suggests that merchants (in particu-
lar, their terminals) accepting Visa cards can also be fooled
into accepting other EMV card brands, like Mastercard, even
if they would not normally accept them. This could result in
violations of contracts, market regulations, sanctions, embar-
goes, and credit card fees. Note that our attack could even be
done in collusion with the merchant to evade taxes or fees. An-
other scenario where criminals might exploit our card brand
mixup attack is the following. They might perform a high-
value transaction with their own Mastercard-branded card
turned into a Visa and then request reimbursement, claiming
a terminal malfunction or fraud based on the fact that they do
not own a Visa card. To support their claim, on the purchase
receipt both the ‘Visa’ label and the Visa AID will be printed,
which looks suspicious under scrutiny.
Usability and Scope. Our attack requires minimal hard-
ware to carry out, namely two NFC-enabled Android phones,
which can be purchased for under 300 USD. This represents
a one-time investment for the criminals, and might even be
unnecessary when they can use their own phones. In addi-
tion, the use of this hardware is inconspicuous since only one
phone need be visible during payment and it easily escapes
detection by store clerks since our app’s appearance is very
similar to legitimate payment apps such as Google Pay and
Apple Pay.
For our attack to work, clearly the authorization request
must reach the card issuer. For this, it is necessary that the
merchant’s acquirer routes the request to either:
• a payment network that matches the real card brand,
regardless of what the terminal thinks the brand is, or
• a payment network that handles transactions with cards
of different brands, including Mastercard and Visa.
It is likely that the SumUp acquirer employs the ﬁrst ap-
proach. The second approach is enforced by legal means in
some countries, making the scope of our card brand mixup
attack very broad. For example, in the US, the 2010 federal
law known as the Durbin Amendment [10] legislates that all
domestic debit transactions must be given the choice, if so
opted by the merchant, the cardholder, or the card (through
the AIDs), to be routed to a common payment network,
called the US Common Debit Network. This network for-
wards authorization requests to the card issuer, regardless of
USENIX Association
30th USENIX Security Symposium    187
minals, including two by SIX.2 From our disclosure process
with Mastercard we learned that none of these transactions
were routed to the Mastercard network, and so the SIX ac-
quirer presumably routed the authorization requests to the
Visa payment network, which ﬂagged the card as non-Visa
and declined the transaction.
Clearly the EMV standard should specify an unambiguous,
cryptographic mechanism to detect and avoid mismatches
between the AID and the PAN, in terms of the card brand they
advertise. In the next section we analyze countermeasures
that achieve this.
4 Countermeasures
This section discusses countermeasures to our card brand
mixup attack. After reviewing our previous EMV model and
our new extensions (Sections 4.1 and 4.2 respectively), we
present both formally-veriﬁed countermeasures at the kernel
level (Section 4.3) and countermeasures already implemented
at the network level by Mastercard (Section 4.4).
4.1 Previous EMV Model
To design and verify kernel-level countermeasures to our
attack, we extend our previous model [4] of the EMV con-
tactless protocol. We developed this model focusing on the
following three security properties:
1. The issuer accepts all transactions accepted by the ter-
minal.
2. All accepted transactions are authenticated to the ter-
minal by the card and, if authorized online, the issuer.
3. All accepted transactions are authenticated to the is-
suer by both the card and the terminal.
The ﬁrst property expresses a causality of accept and de-
cline events: whenever the terminal accepts a transaction, so
will the issuer (or equivalently, the issuer will not decline
it). For the authentication properties, we use injective agree-
ment [9, 25]. In short, an agreement property validates that
whenever the agent, whom the transaction must be authen-
ticated to, reaches a state where the transaction is accepted,
then that agent observes the same transaction details as the
authenticating agent does. The transaction details to agree on
for the properties are: the PAN, the AIP, the CVM, the ATC,
the AC data input (i.e., X in Figure 3), the AC itself, and the
IAD.
We specify a generic model of the EMV contactless proto-
col that allows for the analysis of transactions performed with
the Visa and Mastercard kernels. The remaining four kernels
can be modeled by one of these, which is their group repre-
sentative as per the two groups introduced in Section 2.2.3.
Figure 5: Setup of the testing environment for our proof-of-
concept implementation, displaying the following devices:
(1) SumUp Plus Card Reader, (2) mobile phone running the
SumUp app and connected over Bluetooth to the SumUp
reader, (3) Android phone running our app in Card Emulator
mode, (4) Android phone running our app in POS Emulator
mode, and (5) contactless card. Note that the device (2) is not
part of the attacker’s equipment since in an actual store this
device and (1) would be the payment terminal. In this scenario,
the devices (3) and (4) would be the attacker’s equipment and
(5) would be the victim’s card.
the card brand. Thus, if the victim’s card is a Mastercard-
branded debit card issued in the US and the merchant is
also in the US, our attack should be effective by using the
Visa US Common Debit AID 0xA0000000980840 instead of
AIDVisa = 0xA0000000031010 during the application selec-
tion phase. This replacement would also deceive the terminal
into running the ﬂawed Visa kernel.
Other countries like Australia and New Zealand are also
pushing for similar approaches for routing debit transactions
to local payment networks as opposed to global ones. The
Electronic Funds Transfer at Point of Sale (EFTPOS) system
is an example of such an initiative in these countries.
Unsuccessful Attempts. We attempted to execute our at-
tack to pay with a Mastercard card in a Discover and a Union-
Pay transaction, as these two kernels are similar to the Visa
kernel. We did not succeed in either case. In these tests, we
observed that the terminal did not pass the selection phase
and requested us to insert the card or to try with another card.
This suggests that the usage of cards of these brands over
the contactless interface might be restricted in Switzerland,
where we carried out our experiments.
We have performed additional tests on other payment ter-
2https://www.six-group.com/
188    30th USENIX Security Symposium
USENIX Association
Parameter
Brand
Strongest ODA
method supported
by the card
Processing mode
Strongest
CVM supported
by the card
Transaction value
Possible values
- Mastercard
- Visa
- SDA
- DDA
- CDA
- DDA
- EMV
- No PIN
- Online PIN
Comments
Brand of
the card used
Mastercard
cards
only
Visa cards
only
Mastercard
cards