### PostgreSQL 优化与高级用法

#### 扩展管理
- **卸载扩展**:
  ```sql
  DROP EXTENSION 插件名;
  ```

#### 审计
- **审计开关设置**:
  ```sql
  #log_statement = 'none'  -- 可选值: none, ddl, mod, all
  ```
- **DDL 审计 + NOTIFY**:
  - [参考文档1](https://github.com/digoal/blog/blob/master/201709/20170925_02.md)
  - [参考文档2](https://github.com/digoal/blog/blob/master/201412/20141211_01.md)
- **关键表的 DML 审计**:
  - [参考文档1](https://github.com/digoal/blog/blob/master/201206/20120625_01.md)
  - [参考文档2](https://github.com/digoal/blog/blob/master/201408/20140828_01.md)

#### 高级 SQL 用法
- **参考文档**: [链接](https://github.com/digoal/blog/blob/master/201802/20180226_05.md)
- **常用高级特性**:
  - CTE (递归)
  - LATERAL
  - ORDINALITY (SRF)
  - WINDOW
  - SKIP LOCKED
  - DISTINCT ON
  - GROUPING SETS, CUBE, ROLLUP

#### 物化视图
- **创建物化视图**:
  ```sql
  CREATE MATERIALIZED VIEW [IF NOT EXISTS] table_name
  [ (column_name [, ...] ) ]
  [ WITH ( storage_parameter [= value] [, ... ] ) ]
  [ TABLESPACE tablespace_name ]
  AS query
  [ WITH [ NO ] DATA ];
  ```
- **刷新物化视图**:
  ```sql
  REFRESH MATERIALIZED VIEW [CONCURRENTLY] name
  [ WITH [ NO ] DATA ];
  ```

#### 分页
- **方法一：使用游标**:
  ```sql
  DECLARE cur1 CURSOR FOR SELECT * FROM table WHERE xxx ORDER BY xx;
  FETCH 10 FROM cur1;
  ```
- **方法二：使用位点**:
  ```sql
  SELECT * FROM table WHERE xx > 上一次最大点 AND xxxx ORDER BY xx LIMIT ?;
  ```
  - [参考文档1](https://github.com/digoal/blog/blob/master/201605/20160506_01.md)
  - [参考文档2](https://github.com/digoal/blog/blob/master/201509/20150919_02.md)
  - [参考文档3](https://github.com/digoal/blog/blob/master/201402/20140211_01.md)
  - [参考文档4](https://github.com/digoal/blog/blob/master/201206/20120620_01.md)
  - [参考文档5](https://github.com/digoal/blog/blob/master/201102/20110216_02.md)

#### 频繁更新表的优化
- **索引较多且频繁更新**:
  - 设置 `fillfactor`，尽量走 HOT，减少 IO 放大。
  - 使用分区表，降低索引页分裂时的锁冲突带来的性能影响，提高 VACUUM 并发性。
  - [参考文档](https://github.com/digoal/blog/blob/master/201803/20180301_01.md)
- **GIN 索引优化**:
  - 设置足够的 pending list size。
  - [参考文档](https://www.postgresql.org/docs/devel/static/gin-tips.html)
- **避免 freeze 风暴**:
  - [参考文档1](https://github.com/digoal/blog/blob/master/201801/20180117_03.md)
  - [参考文档2](https://github.com/digoal/blog/blob/master/201606/20160612_01.md)

#### 实时数据清洗与转换
- **使用规则 (rule)**:
  - 创建来源表结构:
    ```sql
    CREATE TABLE nt(id int, c1 numeric, c2 numeric);
    ```
  - 创建目标表结构:
    ```sql
    CREATE TABLE nt_geo (id int, geo geometry);
    ```
  - 创建规则:
    ```sql
    CREATE RULE r1 AS ON INSERT TO nt DO INSTEAD INSERT INTO nt_geo VALUES (NEW.id, ST_MakePoint(NEW.c1, NEW.c2));
    ```
  - 插入数据:
    ```sql
    INSERT INTO nt VALUES (1, 1, 1);
    ```

- **JSONB 数据转换**:
  - 源表:
    ```sql
    CREATE TABLE t1 (id int, info text, j jsonb);
    ```
  - 目标表:
    ```sql
    CREATE TABLE t2 (id int, info text, c1 int, c2 int, c3 text);
    ```
  - 创建规则:
    ```sql
    CREATE RULE r1 AS ON INSERT TO t1 DO INSTEAD INSERT INTO t2 VALUES (NEW.ID, NEW.INFO, ((NEW.J)->>'c1')::int, ((NEW.j)->>'c2')::int, (NEW.j)->>'c3');
    ```
  - 插入数据:
    ```sql
    INSERT INTO t1 VALUES (1, 'test', '{"c1":1, "c2":2, "c3":"text"}'::jsonb);
    ```

#### 数据采样
- **行级随机采样**:
  ```sql
  SELECT * FROM test TABLESAMPLE bernoulli (1);
  ```
- **块级随机采样**:
  ```sql
  SELECT * FROM test TABLESAMPLE system (1);
  ```
- **应用**:
  - 估值计算、统计信息、测试环境
  - [参考文档](https://github.com/digoal/blog/blob/master/201709/20170911_02.md)

#### 数据加密
- **pgcrypto 扩展**:
  - [参考文档](https://www.postgresql.org/docs/10/static/pgcrypto.html)
- **加密后的查询加速（等值查询）**:
  - 对称、非对称、混淆加密
  - [参考文档](https://github.com/digoal/blog/blob/master/201802/20180226_01.md)

- **字段加密**:
  - 创建扩展:
    ```sql
    CREATE EXTENSION pgcrypto;
    ```
  - 可逆加密:
    ```sql
    CREATE TABLE userpwd(userid int8 PRIMARY KEY, pwd text);
    INSERT INTO userpwd (userid, pwd) VALUES (1, crypt('this is a pwd source', gen_salt('bf', 10)));
    ```
  - 不可逆加密:
    - [参考文档1](https://github.com/digoal/blog/blob/master/201607/20160727_02.md)
    - [参考文档2](https://github.com/digoal/blog/blob/master/201711/20171127_02.md)

#### 数据脱敏
- [参考文档](https://github.com/digoal/blog/blob/master/201706/20170602_02.md)

#### 约束种类与用法
- **唯一约束**:
  ```sql
  UNIQUE (column_name)
  ```
- **非空约束**:
  ```sql
  NOT NULL
  ```
- **检查约束**:
  ```sql
  CHECK (expression)
  ```
- **外键约束**:
  ```sql
  FOREIGN KEY (column_name) REFERENCES referenced_table (referenced_column)
  ```
- **排他约束**:
  - 例如，空间不相交、范围不相交
  - [参考文档](https://github.com/digoal/blog/blob/master/201712/20171223_02.md)

#### 数据去重
- [参考文档](https://github.com/digoal/blog/blob/master/201706/20170602_01.md)
- **单列去重**
- **多列去重**
- **行去重**
- **多列混合去重**

#### 模糊查询
- **单、双字搜索**:
  ```sql
  CREATE OR REPLACE FUNCTION split_12(text) RETURNS text[] AS $$
  DECLARE
      res text[];
  BEGIN
      SELECT regexp_split_to_array($1, '') INTO res;
      FOR i IN 1..length($1)-1 LOOP
          res := array_append(res, substring($1, i, 2));
      END LOOP;
      RETURN res;
  END;
  $$ LANGUAGE plpgsql STRICT IMMUTABLE;

  CREATE INDEX idx2 ON tbl USING gin (split_12(col));

  SELECT * FROM tbl WHERE split_12(col) @> ARRAY['单字或双字'];
  ```
- **大于 2 个字的模糊查询**:
  - [参考文档](https://github.com/digoal/blog/blob/master/201704/20170426_01.md)
  - 创建扩展:
    ```sql
    CREATE EXTENSION pg_trgm;
    ```
  - 创建索引:
    ```sql
    CREATE INDEX idx ON tbl USING gin (col gin_trgm_ops);
    ```
  - 查询:
    ```sql
    SELECT * FROM tbl WHERE col LIKE '%xxx%';
    ```

#### 多字段范围检索加速
- **使用 range 类型和 GIST 索引**:
  - 开始时间、结束时间范围
  - 经纬度范围
  - DNS 匹配（开始 IP，结束 IP 范围）
  - [参考文档](https://github.com/digoal/blog/blob/master/201206/20120607_01.md)

#### HTAP 架构
- **RDS PG 10 HTAP**:
  - 解决 TP 和 AP 问题
  - 在线架构演进
  - 事务处理
  - 计算资源控制
  - [参考文档1](https://github.com/digoal/blog/blob/master/201610/20161002_01.md)
  - [参考文档2](https://github.com/digoal/blog/blob/master/201812/20181218_01.md)

#### 并行计算资源控制
- **单个并行节点并行度**:
  ```sql
  #max_parallel_workers_per_gather = 2
  ```
- **全局并行度**:
  ```sql
  #max_parallel_workers = 8
  ```
- **强制设置并行度**:
  ```sql
  SET max_parallel_workers_per_gather = 32;
  SET parallel_setup_cost = 0;
  SET parallel_tuple_cost = 0;
  SET min_parallel_table_scan_size = 0;
  SET min_parallel_index_scan_size = 0;
  ALTER TABLE a SET (parallel_workers = 32);
  EXPLAIN SELECT COUNT(*) FROM a;
  ```

#### 批量 DML
- **批量插入**:
  ```sql
  INSERT INTO tbl VALUES (), (), ... ();
  COPY
  ```
- **批量更新**:
  ```sql
  UPDATE tbl FROM tmp SET x = tmp.x WHERE tbl.id = tmp.id;
  ```
- **批量删除**:
  ```sql
  DELETE FROM tbl USING tmp WHERE tmp.id = tbl.id;
  ```

#### 索引接口的选择
- **查看可用索引接口**:
  ```sql
  SELECT * FROM pg_am;
  ```
- **创建索引**:
  - [参考文档1](https://www.postgresql.org/docs/devel/static/sql-createindex.html)
  - [参考文档2](https://github.com/digoal/blog/blob/master/201706/20170627_01.md)
- **自动选择索引接口**:
  - [参考文档](https://github.com/digoal/blog/blob/master/201706/20170617_01.md)

- **常用索引类型**:
  - **BTree**:
    - 支持 `=, >, >=, <, <=, <>`
    - 普通类型 (通过 `btree_gist` 插件支持)
    - 数组类型 (通过 `intarray` 插件支持)
    - 多列组合查询
  - **SPGiST**:
    - 平面几何类型
    - 范围类型
  - **RUM**:
    - 多值类型 (数组、全文检索类型)
    - 普通类型
  - **BRIN**:
    - 适合线性数据、时序数据
    - 普通类型
    - 空间类型
  - **Bloom**:
    - 多列组合等值查询
  - **表达式索引**:
    - 适用于表达式条件
  - **条件索引 (定向索引)**:
    - 强制过滤某些条件
    - 例如：
      ```sql
      CREATE INDEX idx ON tbl (col) WHERE status = 'active';
      ```

#### 多列复合索引字段顺序原则
- [参考文档](https://github.com/digoal/blog/blob/master/201803/20180314_02.md)

#### 非驱动列查询的优化
- [参考文档](https://github.com/digoal/blog/blob/master/201803/20180323_03.md)

#### ADHoc 查询
- **任意组合搜索**:
  - 单值字段、空间字段、时间字段、多值字段
  - [参考文档1](https://github.com/digoal/blog/blob/master/201802/20180207_02.md)
  - [参考文档2](https://github.com/digoal/blog/blob/master/201802/20180208_01.md)
- **单索引复合顺序选择**:
  - 驱动列优先选择等值条件列
- **任意字段组合扫描需求**:
  - 多个 B-tree 索引支持 bitmap scan
  - [参考文档](https://github.com/digoal/blog/blob/master/201702/20170221_02.md)
  - GIN, Bloom, RUM
  - [参考文档](https://github.com/digoal/blog/blob/master/201802/20180228_01.md)

#### 函数稳定性
- **稳定性分类**:
  - `VOLATILE`：每次都会被触发调用
  - `STABLE`：在事务中只调用一次
  - `IMMUTABLE`：执行计划中直接转换为常量
- **索引表达式**:
  - 必须是 `IMMUTABLE` 稳定性的函数或操作符
- **使用索引**:
  - 必须是 `STABLE` 以上稳定性的函数或操作符
  - 例如：
    ```sql
    SELECT * FROM tbl WHERE a = now();
    ```
- **绑定变量**:
  - `STABLE`：每次 `EXECUTE` 被调用
  - `IMMUTABLE`：`PREPARE` 时转换为常量，不再被调用

#### 索引维护
- **重复索引**:
  - PostgreSQL 支持一个字段创建多个相同的索引
- **在线新建索引**:
  - 新建索引
  - 删除旧索引
- **在线创建索引不堵塞**