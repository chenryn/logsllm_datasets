– drop extension 插件名;
审计
• 审计开关
– #log_statement = 'none' # none, ddl, mod, all
• DDL审计+NOTIFY
– https://github.com/digoal/blog/blob/master/201709/20170925_02.md
– https://github.com/digoal/blog/blob/master/201412/20141211_01.md
• 关键TABLE的DML审计
– https://github.com/digoal/blog/blob/master/201206/20120625_01.md
– https://github.com/digoal/blog/blob/master/201408/20140828_01.md
高级用法
SQL
• https://github.com/digoal/blog/blob/master/201802/2
0180226_05.md
– CTE(递归)
– LATERAL
– ORDINALITY (SRF)
– WINDOW
– SKIP LOCKED
– DISTINCT ON
– GROUPING SETS , CUBE , ROLLUP
物化视图
• https://www.postgresql.org/docs/devel/static/sql-creatematerializedview.html
• 预计算，支持索引。
• CREATE MATERIALIZED VIEW [ IF NOT EXISTS ] table_name
• [ (column_name [, ...] ) ]
• [ WITH ( storage_parameter [= value] [, ... ] ) ]
• [ TABLESPACE tablespace_name ]
• AS query
• [ WITH [ NO ] DATA ]
• 刷新物化视图
• REFRESH MATERIALIZED VIEW [ CONCURRENTLY ] name
• [ WITH [ NO ] DATA ]
分页
• 每一页都丝般柔滑的方法
– 1、使用游标
• declare cur1 cursor for select * from table where xxx order by xx;
• fetch 10 from cur1;
• ....
– 2、使用位点，每次取值区间以上一次的最后位点为开始点。
• select * from table where xx>上一次最大点 and xxxx order by xx limit ?;
• https://github.com/digoal/blog/blob/master/201605/20160506_01.md
• https://github.com/digoal/blog/blob/master/201509/20150919_02.md
• https://github.com/digoal/blog/blob/master/201402/20140211_01.md
• https://github.com/digoal/blog/blob/master/201206/20120620_01.md
• https://github.com/digoal/blog/blob/master/201102/20110216_02.md
频繁更新的 优化
TABLE
• 索引较多、并且：
– 频繁insert on conflict\更新、插入+删除
• 设置fillfactor，尽量走HOT，减少IO放大。
• 使用分区表，降低索引页分裂时的锁冲突带来的性能影响。提高vacuum并发
性。
– https://github.com/digoal/blog/blob/master/201803/20180301_01.md
• 对于gin索引，设置足够的pending list size。
– https://www.postgresql.org/docs/devel/static/gin-tips.html
• 同时需要注意freeze风暴。
– https://github.com/digoal/blog/blob/master/201801/20180117_03.md
– https://github.com/digoal/blog/blob/master/201606/20160612_01.md
实时数据清洗、转换
• https://github.com/digoal/blog/blob/master/201706/20170619_02.md
• rule
• 创建来源表结构
– postgres=# create table nt(id int, c1 numeric, c2 numeric);
– CREATE TABLE
• 创建目标表结构
– postgres=# create table nt_geo (id int, geo geometry);
– CREATE TABLE
• 对来源表创建规则或触发器，例如
– postgres=# create rule r1 as on insert to nt do instead insert into nt_geo values (NEW.id,
ST_MakePoint(NEW.c1,NEW.c2));
– CREATE RULE
• 使用来源数据结构，将数据插入来源数据表
– postgres=# insert into nt values (1,1,1);
– INSERT 0 1
实时数据清洗、转换
• rule
• 源表，JSONB非结构化
– postgres=# create table t1 (id int, info text, j jsonb);
• 目标表，结构化
– postgres=# create table t2 (id int, info text, c1 int, c2 int, c3 text);
• 在源表创建规则，自动将JSONB非结构化数据，转换为结构化数据插入
– postgres=# create rule r1 as on insert to t1 do instead insert into t2 values (NEW.ID, NEW.INFO, ((NEW.J)-
>>'c1')::int, ((NEW.j)->>'c2')::int, (NEW.j)->>'c3');
– postgres=# insert into t1 values (1,'test',jsonb '{"c1":1, "c2":2, "c3":"text"}');
– postgres=# select * from t1;
– (0 rows)
– postgres=# select * from t2;
– id | info | c1 | c2 | c3
– ----+------+----+----+------
– 1 | test | 1 | 2 | text
– (1 row)
数据采样
• 使用采样算法
– 行级随机采样(BERNOULLI(百分比))
• select * from test TABLESAMPLE bernoulli (1);
– 块级随机采样(SYSTEM(百分比))
• select * from test TABLESAMPLE system (1);
• https://github.com/digoal/blog/blob/master/201706/2017
0602_02.md
– 采样应用：估值计算、统计信息、测试环境
• https://github.com/digoal/blog/blob/master/201709/2017
0911_02.md
数据加密
• pgcrypto
– https://www.postgresql.org/docs/10/static/pgcrypto.html
• 加密后的查询加速（等值查询）
• 加密
– 对称、非对称、混淆（使用非对称加密需要交换的对
称加密密钥，然后使用对称加密）加密
– https://github.com/digoal/blog/blob/master/201802/2018
0226_01.md
字段加密
• digoal=# create extension pgcrypto;
• 可逆加密
– digoal=# insert into userpwd (userid,pwd) values (1, crypt('this is a
pwd source', gen_salt('bf',10)));
– digoal=# create table userpwd(userid int8 primary key, pwd text);
– CREATE TABLE
• 不可逆加密
– https://github.com/digoal/blog/blob/master/201607/20160727_02.m
d
– https://github.com/digoal/blog/blob/master/201711/20171127_02.m
d
数据脱敏
• https://github.com/digoal/blog/blob/master/
201706/20170602_02.md
约束种类与用法
• 唯一, unique
• 非空, not null
• check, check(exp);
• 外键,
• 排他, (例如, 空间不相交, 地图应用, 范围不相交, 边界限制。)
– https://github.com/digoal/blog/blob/master/201712/20171223_02.md
– CREATE TABLE reservation
– ( during tsrange,
– EXCLUDE USING GIST (during WITH &&)
– );
– CREATE EXTENSION btree_gist;
– CREATE TABLE room_reservation
– ( room text,
– during tsrange,
– EXCLUDE USING GIST (room WITH =, during WITH &&)
– );
数据去重大法
• https://github.com/digoal/blog/blob/master/
201706/20170602_01.md
– 单列去重
– 多列去重
– 行去重
– 多列混合去重
• 窗口、行号、 = any(array())、数组
模糊查询
• 单、双字搜索
– postgres=# create or replace function split_12(text) returns text[] as $$
– declare
– res text[];
– begin
– select regexp_split_to_array($1, '') into res;
– for i in 1..length($1)-1 loop
– res := array_append(res, substring($1, i, 2));
– end loop;
– return res;
– end;
– $$ language plpgsql strict immutable;
– CREATE FUNCTION
– postgres=# select split_12('abc你好');
– split_12
– ------------------------------
– {a,b,c,你,好,ab,bc,c你,你好}
– (1 row)
– create index idx2 on tbl using gin (split_12(col));
–
– select * from tbl where split_12(col) @> array['单字或双字'];
模糊查询
• 大于 2个字
– https://github.com/digoal/blog/blob/master/201
704/20170426_01.md
– create extension pg_trgm;
– create index idx on tbl using gin (col
gin_trgm_ops);
– select * from tbl where col like '%xxx%';
多字段范围检索加速
• 范围查询，联合索引效果并不好。
• 使用 range类型， GIST索引加速。
– 开始时间，结束时间范围
– 经纬度范围
– DNS匹配（开始 IP，结束 IP 范围）
• https://github.com/digoal/blog/blob/master/201206/2
0120607_01.md
一份数据
RDS PG 10 HTAP ( )
一份数据
PG 10
解决TP\AP
在线 架构演进 并 并
行
事务 行
计
问题： 计
OLTP
数据冗余、资源浪费、 算 OLTP
算
同步延迟、 100万+ TPS
不支持DDL、
OLAP OLAP
同步故障、
一致性无法保障
分析库
并行计算资源控制
• 单个并行节点并行度
– #max_parallel_workers_per_gather = 2
• 全局并行度
– #max_parallel_workers = 8
• 并行度算法
– https://github.com/digoal/blog/blob/master/201610/2016
1002_01.md
– https://github.com/digoal/blog/blob/master/201812/2018
1218_01.md
强制设置并行度
• postgres=# set max_parallel_workers_per_gather =32;
不设置强制，则按
• SET
• postgres=# set parallel_setup_cost =0; 表、索引大小、成
• SET
本、自动估算并行
• postgres=# set parallel_tuple_cost =0;
• SET 度
• postgres=# set min_parallel_table_scan_size =0;
• SET
• postgres=# set min_parallel_index_scan_size =0;
• SET
• postgres=# alter table a set (parallel_workers =32);
• ALTER TABLE
• postgres=# explain select count(*) from a;
• QUERY PLAN
• ---------------------------------------------------------------------------------------------------------
• Finalize Aggregate (cost=86811.94..86811.95 rows=1 width=8)
• -> Gather (cost=86811.85..86811.86 rows=32 width=8)
• Workers Planned: 32
• -> Partial Aggregate (cost=86811.85..86811.86 rows=1 width=8)
• -> Parallel Index Only Scan using a_pkey on a (cost=0.43..86030.60 rows=312500 width=0)
• (5 rows)
批量
DML
• https://github.com/digoal/blog/blob/master/201704/2017
0424_05.md
• 批量插入
– insert into tbl values (),(),...();
– copy
• 批量更新
– update tbl from tmp set x=tmp.x where tbl.id=tmp.id;
• 批量删除
– delete from tbl using tmp where tmp.id=tbl.id;
索引接口的选择
select * from pg_am;
https://www.postgresql.org/docs/devel/static/sql-createindex.html
https://github.com/digoal/blog/blob/master/201706/20170627_01.md
自动选择索引接口：
https://github.com/digoal/blog/blob/master/201706/20170617_01.md
索引接口的选择
• BTree
– =, >, >=, ,>,-|-,&
– 普通类型(通过btree_gist 插件支持)：与B-Tree类似，增加空间类型类似操作符
– 数组类型(通过intarray 插件支持)：与GIN类似
– 多列：任意列组合查询
• SPGiST
– 平面几何类型：与GiST类似
– 范围类型：与GiST类似
索引接口的选择
• RUM
– 多值类型(数组、全文检索类型)：包含、相交、相似排序
– 普通类型：与B-Tree类似
• BRIN
– 适合 线性数据、时序数据、（HEAP PAGE之间边界清晰的数据）。
– 普通类型：与B-Tree类似
– 空间类型：包含
• Bloom
– 多列：任意列组合，等值查询
• 表达式索引
– 搜索条件为表达式时。
– where st_makepoint(x,y) op ?
– create index idx on tbl USING gist ( (st_makepoint(x,y)) );
• 条件索引(定向索引)
– 搜索时，强制过滤某些条件时。
– where status='active' and col=? 。
– create index idx on tbl (col) where status='active'; --激活用户占比70%，只针对这些数据进行索引
– 监控系统例子 select x from tbl where temp>60; --99, 1% 异常数据
多列复合索引字段顺序原则
• https://github.com/digoal/blog/blob/master/201803/20180314_02.md
非驱动列查询的优化
• https://github.com/digoal/blog/blob/master/201803/20180323_03.md
查询
ADHoc
• 单值字段、空间字段、时间字段、多值字段 任意组合搜索
– https://github.com/digoal/blog/blob/master/201802/20180207_02.md
– https://github.com/digoal/blog/blob/master/201802/20180208_01.md
• 单索引复合顺序选择
– 驱动列优先选择等值条件列
• 任意字段组合扫描需求，不适合复合索引
– 多个b-tree索引支持bitmap scan
• https://github.com/digoal/blog/blob/master/201702/20170221_02.md
– GIN
– bloom
– rum
• https://github.com/digoal/blog/blob/master/201802/20180228_01.md
函数稳定性
• https://github.com/digoal/blog/blob/master/201212/20121226_01.md
• 稳定性
– volatile，不稳定，每次都会被触发调用。（select * from tbl where id=func(); 有多少记录，就会被触发
多少次调用func(). ）
– stable，稳定，在事务中只调用一次。
– immutable, 超级稳定，执行计划中，直接转换为常量。
• 索引表达式
– 必须是immutable稳定性的函数或操作符
• 使用索引
– 必须是stable以上稳定性的函数或操作符
– select * from tbl where a=now();
– now(), = 都是stable以上操作符。
• 绑定变量
– stable ，每次execute被调用。
– immutable，prepare时转换为常量，不再被调用。
索引维护
• PostgreSQL支持重复索引（例如一个字段，
可以创建多个一样的索引）
– 在线新建索引
– 删除旧索引
在线创建索引 不堵塞