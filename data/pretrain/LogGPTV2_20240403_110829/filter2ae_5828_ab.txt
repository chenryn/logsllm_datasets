会禁止一个函数访问未知类型对象的属性。
static-eval的一个特性是，它允许指定您希望在static-eval表达式中可用的一些变量。例如，在博文的开头，我使用了表达式
_book.price > 100_。在这种情况下，调用静态 eval 的代码将传递 book 变量的值给它，这样就可以在表达式中使用它。
这给了我另一个想法:如果我创建一个匿名函数，其参数的名称与已经定义的变量相同，会发生什么?
因为它不能在定义时知道在运行时参数的值，所以它可能使用变量的初值。那对我很有用。假设我有一个变量book，它的初值是一个对象。那么，下面的表达式可能会达到我的目的。
    (function(book){return book.constructor})("".sub)
当函数被定义时，static-eval会检查 book.constructor 是否是一个合法的表达式。由于 book
最初是一个对象(其类型为object)而不是一个函数，因此允许访问其构造函数，并创建该函数。然而，当我调用这个函数时，book会将传递给函数的值作为参数(这是
_"".sub_ 的另外一个作用)。然后，就成成功的返回 function.constructor 了。
遗憾的是，这也没有起作用，因为作者在修复漏洞的时候已经考虑了这种情况。在分析函数体时，将所有参数的值设置为null，覆盖变量的初值。这段代码是这样做的:
    node.params.forEach(function(key) {
        if(key.type == 'Identifier'){
          vars[key.name] = null;
        }
    });
这段代码在定义函数的 AST 节点上，获取每个 Identifier 类型的参数的名字，并将所有该名称的变量的属性设置为
null。虽然这段代码看起来挺正常，但是它确有一个巨大的漏洞：他没有覆盖所有的分支。试想，如果一个参数的类型不是 Identifier
怎么办？它肯定不能特别智能的说“我不知道这是什么，所以我要禁用他”。相反，它一定会忽略这个参数并且继续检查下面的。这意味着，如果我能让一个函数的参数不再是
Identifier，那么与这个变量名字相同的变量值就不会被覆盖，所以它就可以使用初始值了。这下，我已经很确信我应该找到了一些不得了的东西。剩下的，我只需要找到怎么把
key.type 设置成不同于 Identifier 的类型。
前面说过， static-eval 使用 esprima 库来解析我们输入的代码。根据 esprima 的文档， esprima
根据自己的[标准](https://www.ecma-international.org/ecma-262/7.0/)来解析代码。事实上，ECMAScript 更像是 JavaScript
的一种方言，它的一些特性会使用户更容易接受。
ECMAScript 中加入的一个特性是 函数参数的析构。根据这个特性，下面的代码是允许的：
    function fullName({firstName, lastName}){
        return firstName + " " + lastName;
    }
    console.log(fullName({firstName: "John", lastName: "McCarthy"}))
在上面的表达式中，函数接受的并不是两个参数 (firstName, lastName)。相反，它只接受了一个参数，这个参数具有 firstName 和
lastName 两个属性。上一段代码也同样可以携程下一段代码。
    function fullName(person){
        return person.firstName + " " + person.lastName;
    }
    console.log(fullName({firstName: "John", lastName: "McCarthy"}))
如果我们观察一下 esprima 生成的 AST，我们就会又意想不到的结果。
实际上，这种新语法使函数参数具有与 Identifier 不同的类型 ObjectPattern，因此 static-eval
不会重写这个变量。因此，当我们在执行下面代码时， static-eval 将继续使用 book 的初始值。
    (function({book}){return book.constructor})({book:"".sub})
然后我们就能创建一个函数了。当它被调用时， book 将会是一个函数对象， 因此就能返回一个 function constructor
了，我找到了绕过的方法！前面的表达式返回函数构造函数，所以我只需要调用它来创建一个恶意的函数，然后调用这个创建的函数:
(function({book}){return
book.constructor})({book:"".sub})("console.log(global.process.mainModule.constructor._load(\"child_process\").execSync(\"id\").toString())")()
在本地的的测试环境中，运行了最新版本的 static-eval，这段代码被成功的执行了。现在，我找到了一个 static-eval 绕过方法，能够在
static-eval 环境中执行恶意代码。使其工作的惟一必要条件是具有一个相同名称的已经赋值的变量，该变量具有 constructor
属性。字符串、数字、数组和对象都满足此属性，因此应该很容易实现此条件。
## 我的方法竟然在目标网站上不能执行
不幸的是,在完成所有这些工作并找到一个绕过的漏洞之后，我意识到它在我所测试的站点上无法工作。我的方法的惟一必要条件是具有一个相同名称的已经赋值的变量。我的确满足了这个条件，但是它却还是不能在目标网站上运行。
通过一番研究后， 我发现站点并没有直接使用 static-eval。它是通过 jsonpath 库来调用的 static-eval，JsonPath 与
XPath 的功能类似，之不妥它是用来处理 Json 文件的。在阅读 JsonPath
的文档后，我感觉这是一个比较烂的项目，对于它们应该要做的事情，它们自己都想不清楚。它实现的大多数特性可能是拍脑袋想到的，没有适当地考虑这些特性是否值得添加。遗憾的是，
NodeJS 的生态里面到处都是这样的库。  
**_译者注：这里是作者在发牢骚，大家不必当真_**
JsonPath 有一个特性叫做 表达式过滤器，它能根据指定的表达式来过滤一段文档。比如 _$.store.book[?(@.price <
10)].title_ 将会返回比 $10 便宜的书，然后再得到它们的标题。对于jsonpath npm库，圆括号之间的表达式就是使用 static-eval 运行的。我测试的站点允许我指定一个JSONPath表达式，并使用 static-eval 来解析，所以这里的 RCE 理论上应该是可行的。
如果我们再仔细看看之前传给 Jsonpath 的表达式，我们可以发现传给 static-eval 的表达式其实是 _@.price < 10_。
根据说明文档，@ 是一个包含被过滤文档的变量(通常是一个对象)。然而，根据 ECMAScript 的规范，这并不是一个合法的变量名。 因此，为了使
static-eval 能够正常运行，他们不得不[修改 esprima
的代码](https://github.com/dchester/jsonpath/blob/87f97be392870c469308dd4dc90d2067863ea02a/lib/aesprim.js#L8)，使其判定
@ 为一个合法的变量名。
当你在 static-eval 中创建匿名函数时，它会被嵌入到另一个函数中，该函数接受已经定义的变量作为参数。因此，如果我在 JsonPath
的表达式过滤器中创建一个匿名函数，它将创建一个包装它的函数，该函数接受一个名为 @ 的参数。这是通过直接调用 function constructor
来完成的，而不是通过前面的 esprima 补丁。然后，在定义函数时，它会抛出一个我绕过的错误。这其实 **是库本身的一个bug**
，这使得它在表达式过滤器中定义函数(无论是良性的还是恶意的)时失败。正因为如此，我的旁路技术无法在这个库中工作。
## 总结
即使这次我没有拿到这个网站的漏洞奖励，我仍然深入的研究了 static-eval 这个库。最近，我利用这次学到的知识，成功的绕过了另一个 JS
环境，并且这一次得到了一定的经济上的回报，我将会在我接下来的一篇博客中介绍这一次的绕过技巧。在这里，我再次想要感谢一下 Matt Austin 关于
static-eval
的工作，没有他的[研究](https://maustin.net/articles/2017-10/static_eval)，我是不可能发现这个新漏洞的。
## 时间线
  * 01/02/19 向NodeJS安全团队和static-eval mantainer提交的[漏洞报告](https://licenciaparahackear.github.io/posts/static-eval-sandbox-escape-original-writeup/)。
  * 01/03/19 NodeJS安全团队回复了这个漏洞。他们告诉我，如果库的作者不回复这个漏洞，他们会联系他，并发布一份报告。
  * 02/14/19 漏洞正式发布在官方网站上。
  * 02/15/19 static-eval 库发布了一个新版本，修复了这个漏洞。
  * 02/18/19 static-eval 库更新了它的 README 文件，添加了一个免责声明，不建议用户用来作为沙箱。
  * 02/26/19 static-eval 发布了一个新的修补方案，因为我之前的修补方案有一个 bug。