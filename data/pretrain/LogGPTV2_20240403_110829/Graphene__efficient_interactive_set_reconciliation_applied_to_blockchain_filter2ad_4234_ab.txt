with a followup inv message. Hence, the network cost is 6n
bytes, which is smaller than XThin’s cost of ≈ m log2(f )
+ 6n;
8ln(2)
however, when the receiver is missing transactions, Compact
Blocks has an extra roundtrip time, which may cost more if
enough transactions are missing. Graphene is significantly
lower in cost than Compact Blocks, as we show in Section 5.3.
Recently, Xthinner [48] was proposed as a variant of Xthin
that employs compression techniques on the list of transac-
tions in a block. Since the author states that Xthinner is not
as compact as Graphene, we do not compare against it [8].
1
3 THE GRAPHENE PROTOCOL
The primary goal of Graphene is to reduce the amount of
network traffic resulting from synchronization of a sender
and receiver; we do so in the context of block propagation.
To motivate Graphene, consider a protocol that uses a Bloom
filter alone to encode a block containing n transactions. As-
sume the receiver has a mempool of m transactions that are a
super set of the block. If we set the FPR of the sender’s Bloom
filter to f =
, then we can expect the filter to falsely
include an extra transaction in a relayed block about once
every 144 blocks (once a day in Bitcoin). This approach re-
quires −n log2(f )
bytes, and it is easy to show that it is smaller
8 ln(2)
than Compact Blocks (6n bytes) when m  a with β-assurance (outlined in green in
Fig. 2). We set a so as to minimize the total size of S and
4
I. S and I are sent to the receiver along with the block
header (if not sent in Step 1).
4: Receiver: The receiver creates a candidate set Z of trans-
action IDs that pass through S, including false positives
(purple and dark blue areas in Fig. 2). The receiver also
creates IBLT I′ from Z. She subtracts I △ I′, which eval-
uates to the symmetric difference of the two sets [23].
Based on the result, she adjusts the candidate set, vali-
dates the Merkle root in the block header, and the proto-
col concludes.
In blockchains, the sender knows the transactions for which
no inv message has been exchanged with the receiver (e.g.,
Bitcoin’s filterInventoryKnown data structure); those trans-
actions could be sent at Step 3, and in fact our implementa-
tion does just that. (N.b., the IBLT stores only 8 bytes of each
transaction ID; but full IDs are used for the Bloom filter.)
We use a fast algorithm to select a such that the total
amount of data transmitted over the network is optimally
small; see Section 3.3.1. The count of false positives from
S has an expected mean of (m − x)fS = a, whose variance
comes from a Binomial distribution with parameters (m − x)
and fS. If higher performance is desired that accounts for this
variance, then a∗ should be used to parameterize I instead
of a. We derive a∗ in Section 3.3.1 via a Chernoff bound.
3.2 Graphene Extended
If the receiver does not have all the transactions in the block
(Fig.1-Right), IBLT subtraction in Protocol 1 will not decode.
In that case, the receiver should continue with the following
protocol. Subsequently, we show how this protocol can also
be used for intermittent mempool synchronization. Our con-
tribution is not only the design of this efficient protocol, but
the derivation of parameters that meet a desired decode rate.
PROTOCOL 2: Graphene Extended
1: Receiver: The size of the candidate set is |Z| = z, where
z = x + y, a sum of x true positives and y false positives
(purple and dark blue areas in Fig. 3). Because the
values of x and y are obfuscated within the sum, the
receiver calculates x∗ such that x∗ ≤ x with β-assurance
(green outline in Fig. 3) She also calculates y∗ such that
y∗ ≥ y with β-assurance (green outline in Fig. 4).
2: Receiver: The receiver creates Bloom filter R and adds
all transaction IDs in Z to R. The FPR of the filter is
n−x∗ , where b minimizes the size of R and IBLT J
fR = b
in the next step. She sends R and b.
3: Sender: The sender passes all transaction IDs in the
block through R. She sends all transactions that are not
in R directly to the receiver (red area of Fig. 4)
ninblockandmempoolm−nnotinblockminmempoolGraphene: Set Reconciliation Applied to Blockchain Propagation
UM-CS, 2019-001
Figure 2: [Protocol 1] Passing m mem-
pool transactions through S results in a
FPs (in dark blue). A green outline illus-
trates a∗ > a with β-assurance, ensuring
IBLT I decodes.
Figure 3: [Protocol 2] Passing m trans-
actions through S results in z positives,
obscuring a count of x TPs (purple) and
y FPs (in dark blue). From z, we derive
x∗  m − x with β-assurance (in
yellow), we can derive a bound for the
false positives from S as y∗ > y with β-
assurance outlined in green.
4: Sender:
The sender creates and sends an IBLT J of all
transactions in the block such that b + y∗ items can be
recovered from it. This size accounts for b, the number
of transactions that falsely appear to be in R, and y∗, the
number of transactions that falsely appear to be in S.
5: Receiver: The receiver creates IBLT J′ from the trans-
action IDs in Z. She decodes the subtraction of the two
blocks, J△ J′. From the result, she adjusts set Z, validates
the Merkle root, and the protocol concludes.
As in Protocol 1, we set b so that the summed size of R
and J is optimally small; see Section 3.3.1. We also derive
closed-form solutions for x∗ and y∗; see Section 3.3.2.
3.2.1 Mempool Synchronization.
With a few changes, Protocols 1 and 2 can be used by two
peers to synchronize their mempools. Instead of a block, the
sender places his entire mempool in S and I. The receiver
passes her mempool through S, adding any negatives to H,
the set of transactions that are not in S. Some transactions
that the sender does not have in his mempool will falsely
pass through S, and these are identified by I (assuming that it
decodes); these transactions are also added to H. If I does not
decode, Protocol 2 is executed to find transactions in the sym-
metric difference of the mempools; all missing transactions
among the sender and receiver are exchanged, including
those in set H. The protocol is more efficient if the peer
with the smaller mempool acts as the sender since S will be
smaller. Section 5.3.2 shows that the protocol is efficient.
3.3 Ensuring Probabilistic Data Structure
Success
Cryptocurrencies allow no room for error: the header’s Merkle
root can be validated with an exact set of transactions only.
Yet, Graphene is a probabilistic solution, and if its failure rate
is high, resources are wasted on recovery. In this section, we
derive the parameters for Graphene that ensure a tunable,
very high success rate.
3.3.1 Parameterizing Bloom filter S and IBLT I.
Graphene sends the least amount of data over the network
when the sum of the Bloom filter S and IBLT I is minimal. Let
T = TBF +TI be the summed size of the Bloom filter and IBLT.
The size of a Bloom filter in bytes, TBF , with false positive
rate fS and n items inserted is TBF = −n ln(fS)
[11]. Recall
8 ln2 2
that we recover up to a∗ items from the IBLT, where a∗ > a
with β-assurance. As we show in Section 3.3.1, a∗ = (1 + δ)a,
where δ is parameterized by β. An IBLT’s size is a product of
the number of items recovered from a symmetric difference
and a multiplier τ that ensures recovery at a desired success
rate. Therefore, given the cost of r bytes per cell, TI is
When we set fS = a
and IBLT in bytes is
TI = rτ(1 + δ)a.
(1)
m−n , then the total size of the Bloom filter
T(a) = −n ln( a
m−n)
8 ln2 2
(2)
The value of a that minimizes T is either: a = 1; a = m − n;
or the value of a where the derivative of Eq. 2 with respect
to a is equal to zero, which is
+ rτ(1 + δ)a.
a ≈ n/(8rτ ln2 2).
(3)
Eq. 3 is approximate as δ is a function of a rather than a
constant. The exact value is closed form but we omit it for
clarity. Furthermore, implementations of Bloom filters and
IBLTs involve non-continuous ceiling functions. As a result,
Eq. 3 is accurate only for a ≥ 100; otherwise the critical
point a′ produced by Eq. 3 can be inaccurate enough that
T(a′) is as much as 20% higher than its true minimum value.
Graphene exceeds the performance of previous work when
Eq. 3 is used to select a. However, implementations that
desire strictly optimal performance should take an extra step.
5
ninblockandmempoolaFPsfromSminmempoolm−nnotm−nnotm−nnotinblockinblockinblocka∗>aa∗>aa∗>aninblockxinblockandmempoolminmempoolm−xnotm−xnotm−xnotinblockinblockinblockyFPsfromSx∗yy∗>yy∗>yUM-CS, 2019-001
A. Pinar Ozisik, Brian Levine, George Bissias, Gavin Andresen, Darren Tapp, and Sunny Katkuri
If Eq. 3 results in a value of a less than 100, its size should
be computed using accurate ceiling functions and compared
against all points a  a
holds with β-assurance, i.e. a∗ > a with probability at least β.
Define A1, . . . , Am−n to be independent Bernoulli trials such
that Pr[Ai = 1] = fS, A =m−n
i =1 Ai, and µ = E[A].
THEOREM 1: Let m be the size of a mempool that con-
tains all n transactions from a block. If a is the number
of false positives that result from passing the mempool
through Bloom filter S with FPR fS , then a∗ ≥ a with
probability β when
a∗ =(1 + δ)a,
where δ =1
2(s +√s2 + 8s) and s =− ln(1−β)
a
.
(4)
A full proof appears in Appendix A. According to Theorem 1,
if the sender sends a Bloom filter with FPR fS = a
m−n , then
with β-assurance, no more than a∗ false positives will be gen-
erated by passing elements from Z though S. To compensate
for the variance in false positives, IBLT I is parametrized by
a symmetric difference of a∗ = (1 + δ)a items. It will decode
subject to its own error rate (see Section 4), provided that