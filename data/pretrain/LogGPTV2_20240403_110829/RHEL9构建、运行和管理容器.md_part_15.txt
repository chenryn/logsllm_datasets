::: section
::: titlepage
# []{#assembly_running-special-container-images_building-running-and-managing-containers.html#proc_running-rsyslog-with-runlabels_assembly_running-special-container-images}使用 runlabels 运行 rsyslog {.title}
:::
创建 `rhel8/rsyslog`{.literal} 容器镜像来运行 `rsyslogd`{.literal}
守护进程的容器化版本。`rsyslog`{.literal} 镜像包含以下
runlabels：`install`{.literal}、`run`{.literal} 和
`uninstall`{.literal}。以下流程介绍了安装、运行和卸载
`rsyslog`{.literal} 镜像的步骤：
::: orderedlist
**流程**
1.  拉取 `rsyslog`{.literal} 镜像：
    ``` screen
    # podman pull registry.redhat.io/rhel8/rsyslog
    ```
2.  为 `rsyslog`{.literal} 显示 `install`{.literal} runlabel：
    ``` screen
    # podman container runlabel install --display rhel8/rsyslog
    command: podman run --rm --privileged -v /:/host -e HOST=/host -e IMAGE=registry.redhat.io/rhel8/rsyslog:latest -e NAME=rsyslog registry.redhat.io/rhel8/rsyslog:latest /bin/install.sh
    ```
    此时该命令会为主机打开权限，将主机 root 文件系统挂载到容器中的
    `/host`{.literal}，并运行 `install.sh`{.literal} 脚本。
3.  为 `rsyslog`{.literal} 运行 `install`{.literal} runlabel:
    ``` screen
    # podman container runlabel install rhel8/rsyslog
    command: podman run --rm --privileged -v /:/host -e HOST=/host -e IMAGE=registry.redhat.io/rhel8/rsyslog:latest -e NAME=rsyslog registry.redhat.io/rhel8/rsyslog:latest /bin/install.sh
    Creating directory at /host//etc/pki/rsyslog
    Creating directory at /host//etc/rsyslog.d
    Installing file at /host//etc/rsyslog.conf
    Installing file at /host//etc/sysconfig/rsyslog
    Installing file at /host//etc/logrotate.d/syslog
    ```
    这会在 `rsyslog`{.literal} 镜像稍后要使用的主机系统上创建文件。
4.  为 `rsyslog`{.literal} 显示 `run`{.literal} runlabel：
    ``` screen
    # podman container runlabel run --display rhel8/rsyslog
    command: podman run -d --privileged --name rsyslog --net=host --pid=host -v /etc/pki/rsyslog:/etc/pki/rsyslog -v /etc/rsyslog.conf:/etc/rsyslog.conf -v /etc/sysconfig/rsyslog:/etc/sysconfig/rsyslog -v /etc/rsyslog.d:/etc/rsyslog.d -v /var/log:/var/log -v /var/lib/rsyslog:/var/lib/rsyslog -v /run:/run -v /etc/machine-id:/etc/machine-id -v /etc/localtime:/etc/localtime -e IMAGE=registry.redhat.io/rhel8/rsyslog:latest -e NAME=rsyslog --restart=always registry.redhat.io/rhel8/rsyslog:latest /bin/rsyslog.sh
    ```
    这表明，在启动 `rsyslog`{.literal} 容器来运行 `rsyslogd`{.literal}
    守护进程时，该命令会向主机开放特权，并在容器内挂载来自主机的特定的文件和目录。
5.  为 `rsyslog`{.literal} 执行 `run`{.literal} runlabel：
    ``` screen
    # podman container runlabel run rhel8/rsyslog
    command: podman run -d --privileged --name rsyslog --net=host --pid=host -v /etc/pki/rsyslog:/etc/pki/rsyslog -v /etc/rsyslog.conf:/etc/rsyslog.conf -v /etc/sysconfig/rsyslog:/etc/sysconfig/rsyslog -v /etc/rsyslog.d:/etc/rsyslog.d -v /var/log:/var/log -v /var/lib/rsyslog:/var/lib/rsyslog -v /run:/run -v /etc/machine-id:/etc/machine-id -v /etc/localtime:/etc/localtime -e IMAGE=registry.redhat.io/rhel8/rsyslog:latest -e NAME=rsyslog --restart=always registry.redhat.io/rhel8/rsyslog:latest /bin/rsyslog.sh
    28a0d719ff179adcea81eb63cc90fcd09f1755d5edb121399068a4ea59bd0f53
    ```
    `rsyslog`{.literal}
    容器会开放特权，挂载其需要的来自主机的内容，并在后台(`-d`{.literal})运行
    `rsyslogd`{.literal} 守护进程。`rsyslogd`{.literal}
    守护进程开始收集日志消息，并将信息定向到 `/var/log`{.literal}
    目录中的文件。
6.  显示 `rsyslog`{.literal} 的 `uninstall`{.literal} runlabel：
    ``` screen
    # podman container runlabel uninstall --display rhel8/rsyslog
    command: podman run --rm --privileged -v /:/host -e HOST=/host -e IMAGE=registry.redhat.io/rhel8/rsyslog:latest -e NAME=rsyslog registry.redhat.io/rhel8/rsyslog:latest /bin/uninstall.sh
    ```
7.  为 `rsyslog`{.literal} 运行 `uninstall`{.literal} runlabel：
    ``` screen
    # podman container runlabel uninstall rhel8/rsyslog
    command: podman run --rm --privileged -v /:/host -e HOST=/host -e IMAGE=registry.redhat.io/rhel8/rsyslog:latest -e NAME=rsyslog registry.redhat.io/rhel8/rsyslog:latest /bin/uninstall.sh
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在这种情况下, `uninstall.sh`{.literal} 脚本只删除
`/etc/logrotate.d/syslog`{.literal} 文件。它不会清理配置文件。
:::
:::
:::
[]{#assembly_porting-containers-to-openshift-using-podman_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_porting-containers-to-openshift-using-podman_building-running-and-managing-containers.html#assembly_porting-containers-to-openshift-using-podman_building-running-and-managing-containers}第 11 章 使用 Podman 将容器传送到 OpenShift {.title}
:::
本章描述了如何使用 YAML(\"YAML Ain\'t Markup Language\")格式生成容器和
pod 的可移植描述。YAML 是一种用于描述配置数据的文本格式。
YAML 文件为：
::: itemizedlist
-   可读。
-   易于生成。
-   可在环境间移植（例如，RHEL 和 OpenShift 之间）。
-   可移植编程语言。
-   方便使用（不需要在命令行中添加所有参数）。
:::
使用 YAML 文件的原因：
::: orderedlist
1.  您可以使用最小输入来重新运行本地编配的容器和
    pod，这对于迭代开发非常有用。
2.  您可以在另一台机器上运行相同的容器和 pod。例如，要在 OpenShift
    环境中运行应用程序并确保应用程序正常工作。您可以使用
    `podman generate kube`{.literal} 命令来生成 Kubernetes YAML
    文件。然后，在将生成的 YAML 文件传送到 Kubernetes 或 OpenShift
    环境之前，您可以使用 `podman play`{.literal} 命令来测试本地系统上
    pod 和容器的创建情况。使用 `podman play`{.literal}
    命令，您也可以重新创建最初在 OpenShift 或 Kubernetes 环境中创建的
    pod 和容器。
:::
::: section
::: titlepage
# []{#assembly_porting-containers-to-openshift-using-podman_building-running-and-managing-containers.html#proc_generating-a-kubernetes-yaml-file-using-podman_assembly_porting-containers-to-openshift-using-podman}使用 Podman 生成 Kubernetes YAML 文件 {.title}
:::
此流程描述了如何创建带有一个容器的 pod，并使用
`podman generate kube`{.literal} 命令生成 Kubernetes YAML 文件。
::: itemizedlist
**先决条件**
-   pod 已创建。详情请参阅[创建
    pod](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/building_running_and_managing_containers/index#creating-pods_building-running-and-managing-containers){.link}。
:::
::: orderedlist
**流程**
1.  列出与其关联的所有 pod 和容器：
    ``` literallayout
    $ podman ps -a --pod
    CONTAINER ID  IMAGE                                       COMMAND    CREATED                 STATUS                     PORTS  NAMES               POD
    5df5c48fea87  registry.access.redhat.com/ubi8/ubi:latest  /bin/bash  Less than a second ago  Up Less than a second ago         myubi               223df6b390b4
    3afdcd93de3e  k8s.gcr.io/pause:3.1                                   Less than a second ago  Up Less than a second ago         223df6b390b4-infra  223df6b390b4
    ```
2.  使用 pod 名称或 ID 来生成 Kubernetes YAML 文件：
    ``` literallayout
    $ podman generate kube mypod > mypod.yaml
    ```
    请注意，`podman generate`{.literal}
    命令不反映任何可能附加到容器的逻辑卷管理器(LVM)逻辑卷或物理卷。
3.  显示 `mypod.yaml`{.literal} 文件：
    ``` literallayout
    $ cat mypod.yaml
    # Generation of Kubernetes YAML is still under development!
    #
    # Save the output of this file and use kubectl create -f to import
    # it into Kubernetes.
    #
    # Created with podman-1.6.4
    apiVersion: v1
    kind: Pod
    metadata:
      creationTimestamp: "2020-06-09T10:31:56Z"
      labels:
    app: mypod
      name: mypod
    spec:
      containers:
      - command:
            - /bin/bash
            env:
            - name: PATH
                  value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            - name: TERM
                  value: xterm
            - name: HOSTNAME
            - name: container
                  value: oci
            image: registry.access.redhat.com/ubi8/ubi:latest
            name: myubi
            resources: {}
            securityContext:
                  allowPrivilegeEscalation: true
                  capabilities: {}
                  privileged: false
                  readOnlyRootFilesystem: false
            tty: true
            workingDir: /
    status: {}
    ```
:::
::: itemizedlist
**其他资源**
-   `man podman-generate-kube`{.literal}
-   [Podman：在本地容器运行时中管理 pod
    和容器](https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/){.link}
    文章
:::
:::
::: section
::: titlepage
# []{#assembly_porting-containers-to-openshift-using-podman_building-running-and-managing-containers.html#proc_generating-a-kubernetes-yaml-file-in-openshift-environment_assembly_porting-containers-to-openshift-using-podman}在 OpenShift 环境中生成 Kubernetes YAML 文件 {.title}
:::
在 OpenShift 环境中，使用 `oc create`{.literal} 命令来生成描述应用程序的
YAML 文件。
::: itemizedlist
**流程**
-   为您的 `myapp`{.literal} 应用程序生成 YAML 文件：
    ``` literallayout
    $ oc create myapp --image=me/myapp:v1 -o yaml --dry-run > myapp.yaml
    ```
    `oc create`{.literal} 命令创建并运行 `myapp`{.literal} 镜像。使用
    `--dry-run`{.literal} 选项打印对象，并重定向到
    `myapp.yaml`{.literal} 输出文件。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在 Kubernetes 环境中，您可以使用带有同样标志的
`kubectl create`{.literal} 命令。
:::
:::
::: section
::: titlepage
# []{#assembly_porting-containers-to-openshift-using-podman_building-running-and-managing-containers.html#proc_starting-containers-and-pods-with-podman_assembly_porting-containers-to-openshift-using-podman}使用 Podman 启动容器和 pod {.title}
:::
使用生成的 YAML 文件，您可以在任何环境中自动启动容器和
pod。请注意，不能由 Podman 生成 YAML 文件。`podman play kube`{.literal}
命令允许您根据 YAML 输入文件重新创建 pod 和容器。
::: orderedlist
**流程**
1.  从 `mypod.yaml`{.literal} 文件创建 pod 和容器：
    ``` literallayout
    $ podman play kube mypod.yaml
    Pod:
    b8c5b99ba846ccff76c3ef257e5761c2d8a5ca4d7ffa3880531aec79c0dacb22
    Container:
    848179395ebd33dd91d14ffbde7ae273158d9695a081468f487af4e356888ece
    ```
2.  列出所有 pod:
    ``` literallayout
    $ podman pod ps
    POD ID         NAME    STATUS    CREATED          # OF CONTAINERS   INFRA ID
    b8c5b99ba846   mypod   Running   19 seconds ago   2                 aa4220eaf4bb
    ```
3.  列出与其关联的所有 pod 和容器：
    ``` literallayout
    $ podman ps -a --pod
    CONTAINER ID  IMAGE                                       COMMAND    CREATED             STATUS                 PORTS  NAMES               POD
    848179395ebd  registry.access.redhat.com/ubi8/ubi:latest  /bin/bash  About a minute ago  Up About a minute ago         myubi               b8c5b99ba846
    aa4220eaf4bb  k8s.gcr.io/pause:3.1                                   About a minute ago  Up About a minute ago         b8c5b99ba846-infra  b8c5b99ba846
    ```
    `podman ps`{.literal} 命令中的 pod ID 与 `podman pod ps`{.literal}
    命令中的 pod ID 相匹配。
:::
::: itemizedlist
**其他资源**
-   `man podman-play-kube`{.literal}
-   [Podman 现在可以轻松过渡到 Kubernetes 和
    CRI-O](https://developers.redhat.com/blog/2019/01/29/podman-kubernetes-yaml){.link}
    的文章
:::
:::
::: section
::: titlepage
# []{#assembly_porting-containers-to-openshift-using-podman_building-running-and-managing-containers.html#proc_starting-containers-and-pods-in-openshift-environment_assembly_porting-containers-to-openshift-using-podman}在 OpenShift 环境中启动容器和 pod {.title}
:::
您可以使用 `oc create`{.literal} 命令在 OpenShift 环境中创建 pod
和容器。
::: itemizedlist
**流程**
-   从 OpenShift 环境中的 YAML 文件创建 pod:
    ``` literallayout
    $ oc create -f mypod.yaml
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在 Kubernetes 环境中，您可以使用带有同样标志的
`kubectl create`{.literal} 命令。
:::
:::
:::
[]{#assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers.html#assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers}第 12 章 使用 Podman 将容器移植到 systemd {.title}
:::
Podman(Pod
Manager)是一个功能齐全的容器引擎，是一个简单的无守护进程的工具。Podman
提供了一个类似 Docker-CLI 的命令行，可简化从其他容器引擎的过渡，并允许对
pod、容器和镜像的管理。
Podman 最初的设计目的不是为了启动整个 Linux
系统，或管理诸如启动顺序、依赖关系检查和失败服务的恢复等服务。这是像
systemd 这样成熟的初始化系统的任务。红帽已成为将容器与 systemd
集成的领导者，因此由 Podman 构建的 OCI 和 Docker 格式容器可以用与 Linux
系统中管理其他服务和功能的一样的方法来管理。您可以使用 systemd
初始化服务来处理 pod 和容器。您可以使用
`podman generate systemd`{.literal} 命令为容器和 pod 生成 systemd
单元文件。
使用 systemd 单元文，您可以：
::: itemizedlist
-   设置容器或 pod 以作为 systemd 服务启动。
-   定义容器化服务运行的顺序，并检查依赖项（例如，确保另一个服务正在运行、文件可用或已挂载资源）。
-   使用 `systemctl`{.literal} 命令控制 systemd 系统的状态。
:::
本章介绍了如何使用 systemd 单元文件生成容器和 pod 的可移植描述。
::: section
::: titlepage
# []{#assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers.html#proc_enabling-systemd-services_assembly_porting-containers-to-systemd-using-podman}启用 systemd 服务 {.title}
:::
启用服务时，您可以有不同的选项。
::: itemizedlist
**流程**