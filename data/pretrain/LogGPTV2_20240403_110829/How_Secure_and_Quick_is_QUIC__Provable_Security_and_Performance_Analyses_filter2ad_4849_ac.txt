### QUIC Connection Establishment and Security Model

#### 1-RTT Connection Establishment

**Summary:**
The QUIC 1-RTT connection establishment involves an initial key agreement, followed by the exchange of data, and a subsequent key agreement for secure communication. The process is summarized in Figure 1.

**Detailed Steps:**

1. **Initial Key Agreement:**
   - **Client (C) to Server (S):**
     - \( m_1 \leftarrow c_{\text{i}}\text{hello}(pk_j) \)
   - **Server (S) to Client (C):**
     - \( m_2 \leftarrow s_{\text{reject}}(m_1) \)
     - \( m_2 \) contains:
       - A source-address token (STK) used for future 0-RTT connections.
       - The server's current state \( scfgt_{\text{pub}} \), which includes Difﬁe-Hellman (DH) public values, an expiration date, and a signature over the public values using the server’s secret key \( sk \).
   - **Client (C) to Server (S):**
     - \( m_3 \leftarrow c_{\text{hello}}(m_2) \)
     - The client generates a nonce and its own DH values.
   - **Key Derivation:**
     - Both C and S derive the initial key material \( ik \) by running \( \text{get\_i\_key\_c}(m_3) \) and \( \text{get\_i\_key\_s}(m_3) \) respectively.

2. **Initial Data Exchange:**
   - C and S exchange their initial data \( M_c \) and \( M_s \) using AEAD with the initial key \( ik \).
   - Sequence numbers \( sqnc \) and \( sqns \) are used to track packets sent by C and S, respectively.

3. **Key Agreement:**
   - **Server (S) to Client (C):**
     - \( m_6 \leftarrow s_{\text{hello}}(m_3, ik, sqn) \)
     - S generates new DH values and sends them to C.
   - **Key Derivation:**
     - Both C and S derive the session key material \( k \) by running \( \text{get\_key\_c}(m_6) \) and \( \text{get\_key\_s}(m_6) \).

4. **Data Exchange:**
   - C and S use the session key \( k \) to encrypt and authenticate their remaining data.

**Key Functions:**

- **s_reject(m):**
  - Generates a rejection message containing the STK and other necessary information.
  - Returns: \( (IP_s, IP_c, port_s, port_c, cid, 1, scfgt_{\text{pub}}, stk) \)

- **c_hello(m):**
  - Generates a hello message with the client's DH values and nonce.
  - Returns: \( (pkt\_info, cid, 2, stk, scid, nonc, pubc) \)

- **get_i_key_c(m) and get_i_key_s(m):**
  - Derive the initial key material from the exchanged messages.

- **pak(κ, sqn, m):**
  - Encrypts and authenticates a packet using the given key and sequence number.

- **process_packets(κ, p1, ..., pv):**
  - Decrypts and processes a series of packets.

- **s_hello(m3, ik, sqn):**
  - Generates a new set of DH values and sends them to the client.

- **get_key_c(m) and get_key_s(m):**
  - Derive the session key material from the exchanged messages.

#### 0-RTT Connection Establishment

If the client has previously established a connection with the server within the time period \( \tau_t \), it can initiate a 0-RTT connection request:

- **Client (C) to Server (S):**
  - \( m_3 \leftarrow c_{\text{hello}}(stk, scfgt_{\text{pub}}) \)
  - The client sends a hello message containing the previously obtained STK and SCID, along with new CID, nonce, and DH public value.

- **Server (S) Verification:**
  - S verifies the freshness of the nonce, the validity of the STK, and the SCID.
  - If verification fails, S reverts to the 1-RTT case.
  - If verification succeeds, the rest of the protocol proceeds as in the 1-RTT case, with adjusted sequence numbers.

#### Security Model

We define the security model for QUIC (QACCE) as an extension of the Authenticated and Confidential Channel Establishment (ACCE) security model for TLS. Our model addresses the following:

- **Strong Attacker:**
  - Can initiate concurrent rounds of the protocol.
  - Can see, drop, or modify exchanged communications.
  - Can corrupt servers and control clients.

- **Security Goals:**
  - Secure channel: Data is exchanged privately and authentically.
  - Key security and unilateral authentication.
  - Protection against IP spoofing attacks.

- **Formal Definition:**
  - Captures server impersonation, secure channel attacks, eavesdropping, man-in-the-middle attacks, forgeries, and DDoS attacks.
  - Ensures forward secrecy.

In Section VI-B, we discuss how our formal model captures these security aspects and the differences from existing models.