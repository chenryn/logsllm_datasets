isting USB fuzzers are inefﬁcient (e.g., dumb fuzzers like
vUSBf), not portable (e.g., syzkaller usb-fuzzer), and only
reach probe functions of drivers. We propose USBFuzz, a
ﬂexible and modular framework to fuzz USB drivers in OS
kernels. USBFuzz is portable to fuzz USB drivers on differ-
ent OSes, leveraging coverage-guided fuzzing on Linux and
dumb fuzzing on other kernels where coverage collection is
not yet supported. USBFuzz enables broad fuzzing (targeting
the full USB subsystem and a wide range of USB drivers) and
focused fuzzing on a speciﬁc device’s driver.
Based on the USBFuzz framework, we applied coverage-
guided fuzzing (the state-of-art fuzzing technique) on the
Linux kernel USB stack and drivers. In a preliminary evalu-
ation on nine recent versions of the Linux kernel, we found
16 new memory bugs in kernels which have been extensively
fuzzed. Reusing the generated seeds from the Linux campaign,
we leverage USBFuzz for dumb fuzzing on USB drivers in
the FreeBSD, MacOS and Windows. To date we have found
one bug in FreeBSD, three bugs on MacOS and four bugs
on Windows. Last, focusing on a USB webcam driver, we
performed focused fuzzing and found another bug in the
XHCI driver of the Linux kernel. So far we have ﬁxed 11
2572    29th USENIX Security Symposium
USENIX Association
new bugs and received 10 CVEs. USBFuzz is available at
https://github.com/HexHive/USBFuzz.
Acknowledgments
We thank our shepherd and the anonymous reviewers for their
insightful comments. This project has received funding from
the European Research Council (ERC) under the European
Union’s Horizon 2020 research and innovation program (grant
agreement No. 850868). This material is based upon work
supported by ONR under Award No. ONR award N00014-18-
1-2674 and by NSF under award number CNS-1801601.
References
[1] Sebastian Angel, Riad S Wahby, Max Howald, Joshua B
Leners, Michael Spilo, Zhen Sun, Andrew J Blumberg,
and Michael Walﬁsh. Defending against Malicious Pe-
ripherals with Cinch. In USENIX Security Symposium,
pages 397–414, 2016.
[2] MIDI Association. Basics of USB-MIDI. https://
www.midi.org/articles-old/basic-of-usb, 2018.
[10] Jake Corina, Aravind Machiry, Christopher Salls, Yan
Shoshitaishvili, Shuang Hao, Christopher Kruegel, and
Giovanni Vigna. Difuze: interface aware fuzzing for
kernel drivers. In Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security,
pages 2123–2138. ACM, 2017.
[11] die.net.
lsusb(8) - linux man page.
linux.die.net/man/8/lsusb, 2018.
https://
[12] Ellisys.
Explorer 200 - Hardware
trigger.
https://www.ellisys.com/products/usbex200/
trigger.php.
[13] GoodFET.
Goodfet-facedancer21.
http:
//goodfet.sourceforge.net/hardware/
facedancer21/, 2018.
[14] Google.
External usb fuzzing for linux kernel.
https://github.com/google/syzkaller/blob/
master/docs/linux/external_fuzzing_usb.md,
2018.
[15] Google.
Found linux kernel usb bug.
https:
//github.com/google/syzkaller/blob/usb-
fuzzer/docs/linux/found_bugs_usb.md, 2018.
[3] SD Association. SD Standard overview. https://
www.sdcard.org/developers/overview/, 2020.
[16] Google.
Syzkaller - kernel fuzzer.
github.com/google/syzkaller, 2018.
https://
[4] Fabrice Bellard. QEMU, a Fast and Portable Dynamic
Translator. In Proceedings of the Annual Conference on
USENIX Annual Technical Conference, 2005.
[5] Silas Boyd-Wickizer and Nickolai Zeldovich. Tolerating
Malicious Device Drivers in Linux. In USENIX annual
technical conference. Boston, 2010.
[6] Hartley Brody. USB Rubber Ducky Tutorial: The Miss-
ing Quickstart Guide to Running Your First Keystroke
Payload Hack.
https://blog.hartleybrody.com/
rubber-ducky-guide/, 2017.
[7] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun
Zuo, Zhiqiang Lin, XiaoFeng Wang, Wing Cheong
Lau, Menghan Sun, Ronghai Yang, and Kehuan Zhang.
IoTFuzzer: Discovering Memory Corruptions in IoT
Through App-based Fuzzing. In NDSS, 2018.
[8] Vitaly Chipounov, Volodymyr Kuznetsov, and George
Candea. S2E: A platform for in-vivo multi-path analysis
of software systems. Acm Sigplan Notices, 46(3):265–
278, 2011.
[9] Catalin Cimpanu. List of 29 Different Types of USB At-
tacks. https://www.bleepingcomputer.com/news/
security/heres-a-list-of-29-different-
types-of-usb-attacks/, 2019.
[17] Google.
KASAN-Linux usb-fuzzer.
//github.com/google/kasan/tree/usb-fuzzer,
2020.
https:
[18] NCC Group.
nccgroup/umap2.
Umap2.
https://github.com/
[19] NCC Group.
AFL/QEMU fuzzing with full-
system emulation. https://github.com/nccgroup/
TriforceAFL, 2018.
[20] Intel.
Intel
virtualization
technology.
https://www.intel.com/content/www/us/en/
virtualization/virtualization-technology/
intel-virtualization-technology.html, 2018.
[21] Dae R Jeong, Kyungtae Kim, Basavesh Shivakumar,
Byoungyoung Lee, and Insik Shin. Razzer: Finding
In Symposium on
kernel race bugs through fuzzing.
Security and Privacy. IEEE, 2019.
[22] Dave Jones. Trinity: Linux system call fuzzer. https:
//github.com/kernelslacker/trinity, 2018.
[23] Samy Kamkar. USBdriveby: Exploiting USB in style.
http://samy.pl/usbdriveby/, 2014.
[24] Sylvester Keil and Clemens Kolbitsch. Stateful fuzzing
of wireless device drivers in an emulated environment.
Black Hat Japan, 2007.
USENIX Association
29th USENIX Security Symposium    2573
[25] Linux kernel document. The kernel address sanitizer
(kasan). https://www.kernel.org/doc/html/v4.12/
dev-tools/kasan.html, 2018.
[26] Linux kernel document. Kerneladdresssanitizer. https:
//github.com/google/kasan/wiki, 2018.
[27] David Kierznowski. BadUSB 2.0: Exploring USB Man-
In-The-Middle Attacks, 2015.
[28] knowledge
ar5212.
whirlpool.net.au/wiki/ar5212.
base.
https://
[29] Andrey Konovalov.
CVE-2016-2384: Exploit-
ing a double-free in the USB-MIDI Linux kernel
driver. https://xairy.github.io/blog/2016/cve-
2016-2384, 2016.
[30] Volodymyr Kuznetsov, Vitaly Chipounov, and George
Candea. Testing closed-source binary device drivers
with DDT. In USENIX Annual Technical Conference,
2010.
[31] Jon Larimer.
Beyond Autorun: Exploiting vul-
https:
nerabilities with removable
//media.blackhat.com/bh-dc-11/Larimer/
BlackHat_DC_2011_Larimer_Vulnerabiliters_w-
removeable_storage-wp.pdf, 2011.
storage.
[32] LXR.
Linux source
code.
https://
elixir.bootlin.com/linux/latest/source/
drivers/media/mc/mc-entity.c#L666, 2020.
[33] Richard McNally, Ken Yiu, Duncan Grove, and Damien
Gerhardy. Fuzzing: the state of the art. Technical report,
DEFENCE SCIENCE AND TECHNOLOGY ORGAN-
ISATION EDINBURGH (AUSTRALIA), 2012.
[34] Microsoft.
Lifecam vx-800.
https:
//www.microsoft.com/accessories/en-us/d/
lifecam-vx-800, 2018.
[35] Microsoft. Microsoft security bulletin ms17-011
https://docs.microsoft.com/en-us/
- critical.
security-updates/SecurityBulletins/2017/
ms17-011, 2018.
[36] Nir Nissim, Ran Yahalom, and Yuval Elovici. USB-
based attacks. Computers & Security, 70:675–688,
2017.
[37] NVD. Common vulnerabilities and exposures:cve-
https://cve.mitre.org/cgi-bin/
2016-2384.
cvename.cgi?name=CVE-2016-2384, 2018.
[39] Alex Plaskett.
Biting the Apple that Feeds you.
https://labs.mwrinfosecurity.com/assets/
BlogFiles/mwri-44con-biting-the-apple-
that-feeds-you-2017-09-25.pdf, 2018.
[40] Alex Plaskett. MacOS Kernel Fuzzer.
github.com/mwrlabs/OSXFuzz, 2018.
https://
[41] NSA Playset. TURNIPSCHOOL NSA Playset. http:
//www.nsaplayset.org/turnipschool, 2019.
[42] Matt Porter. Kernel USB Gadget Conﬁgfs Inter-
https://events.static.linuxfound.org/
face.
sites/events/files/slides/USB%20Gadget%
20Configfs%20API_0.pdf, 2018.
[43] Spice Project.
usbredir.
https://www.spice-
space.org/usbredir.html, 2018.
[44] Syzkaller Project. report.go. https://github.com/
google/syzkaller/blob/master/pkg/report/
report.go.
[45] USBGuard project.
USB Guard.
usbguard.github.io/, 2018.
[46] USB/IP Project.
USB/IP PROJECT.
usbip.sourceforge.net/.
https://
http://
[47] Matthew J Renzelmann, Asim Kadav, and Michael M
Swift. SymDrive: testing drivers without devices. In
Presented as part of the 10th USENIX Symposium on
Operating Systems Design and Implementation (OSDI
12), pages 279–292, 2012.
[48] Sergej Schumilo, Cornelius Aschermann, Robert Gaw-
lik, Sebastian Schinzel, and Thorsten Holz.
kaﬂ:
Hardware-assisted feedback fuzzing for OS kernels. In
Usenix Security Symposium, 2017.
[49] Sergej Schumilo, Ralf Spenneberg, and Hendrik
Schwartke. Don’t trust your usb! how to ﬁnd bugs in
usb device drivers. Blackhat Europe, 2014.
[50] Dokyung Song, Felicitas Hetzelt, Dipanjan Das, Chad
Spensky, Yeoul Na, Stijn Volckaert, Giovanni Vigna,
Christopher Kruegel, Jean-Pierre Seifert, and Michael
Franz. PeriScope: An Effective Probing and Fuzzing
Framework for the Hardware-OS Boundary. In 2019
Network and Distributed Systems Security Symposium
(NDSS). Internet Society, 2019.
[38] James Patrick-Evans, Lorenzo Cavallaro, and Johannes
Kinder. POTUS: Probing Off-The-Shelf USB Drivers
with Symbolic Fault Injection. In 11th USENIX Work-
shop on Offensive Technologies (WOOT 17), 2017.
[51] Alan Stern. Dummy/Loopback USB host and device em-
ulator driver. https://elixir.bootlin.com/linux/
v3.14/source/drivers/usb/gadget/dummy_hcd.c,
2018.
2574    29th USENIX Security Symposium
USENIX Association
[52] syzkaller team.
Found bugs by syzkaller in
bsd.
https://github.com/google/syzkaller/
blob/master/docs/openbsd/found_bugs.md, 2018.
Documentation/admin-guide/kernel-
parameters.txt, 2018.
[53] syzkaller team.
Found bugs by syzkaller in
https://github.com/google/syzkaller/
linux.
blob/master/docs/linux/found_bugs.md, 2018.
[54] syzkaller team.
https://github.com/
google/syzkaller/blob/usb-fuzzer/sys/linux/
vusb_ids.txt, 2018.
vusb ids.
[55] syzkaller
team.
vusb.txt at google/syskaller.
https://github.com/google/syzkaller/blob/
master/sys/linux/vusb.txt, 2018.
[56] QEMU team. Device speciﬁcation for inter-vm shared
memory device. https://github.com/qemu/qemu/
blob/master/docs/specs/ivshmem-spec.txt,
2018.
[57] Qemu Team. Qemu: the fast! processor emulator.
https://www.qemu.org/, 2018.
[58] Dave Jing Tian, Adam Bates, and Kevin Butler. Defend-
ing against malicious USB ﬁrmware with GoodUSB.
In Proceedings of the 31st Annual Computer Security
Applications Conference, pages 261–270, 2015.
[59] Dave Jing Tian, Grant Hernandez, Joseph I Choi,
Vanessa Frost, Peter C Johnson, and Kevin RB Butler.
LBM: A Security Framework for Peripherals within
the Linux Kernel. In LBM: A Security Framework for
Peripherals within the Linux Kernel, page 0, 2019.
[60] Dave Jing Tian, Nolen Scaife, Adam Bates, Kevin Butler,
and Patrick Traynor. Making USB Great Again with
In 25th USENIX Security Symposium
USBFILTER.
(USENIX Security 16), pages 415–430, 2016.
[61] Jing Tian, Nolen Scaife, Deepak Kumar, Michael Bailey,
Adam Bates, and Kevin Butler. SoK:" Plug & Pray"
Today–Understanding USB Insecurity in Versions 1
Through C. In 2018 IEEE Symposium on Security and
Privacy (SP), pages 1032–1047. IEEE, 2018.
[62] Linus Torvalds.
Kernel parameters.
https:
//github.com/torvalds/linux/blob/master/
[63] Ubuntu. Package: streamer (3.103-3build1). https:
//packages.ubuntu.com/xenial/streamer, 2019.
[64] Linux USB. A list of usb id’s. http://www.linux-
usb.org/usb.ids, 2019.
[65] usbkill.org.
Ofﬁcial usb killer site.
https://
usbkill.com/, 2019.
[66] Rijnard Van Tonder and Herman A Engelbrecht. Lower-
ing the USB Fuzzing Barrier by Transparent Two-Way
Emulation. In WOOT, 2014.
[67] Dmitry Vyukov.
kernel: add kcov code coverage.
https://lwn.net/Articles/671640/, 2018.
[68] Wikipedia.
Extensible Host Controller
In-
https://en.wikipedia.org/wiki/
terface.
Extensible_Host_Controller_Interface, 2018.
[69] Wikipedia.
USB On-The-Go.
https:
//en.wikipedia.org/wiki/USB_On-The-Go, 2018.
[70] Wikipedia.
Wireless USB.
https://
en.wikipedia.org/wiki/Wireless_USB, 2019.
[71] Jonas Zaddach, Luca Bruno, Aurelien Francillon, Da-
vide Balzarotti, et al. AVATAR: A Framework to Sup-
port Dynamic Security Analysis of Embedded Systems’
Firmwares. In NDSS, 2014.
[72] Michal Zalewski. American Fuzzy Lop. http://
lcamtuf.coredump.cx/afl/, 2017.
[73] Michal Zalewski. The bug-o-rama trophy case. http:
//lcamtuf.coredump.cx/afl/#bugs, 2017.
[74] Google
Project Zero.
Uniscribe
Fuzzing.
dows
googleprojectzero.blogspot.com/2017/04/
notes-on-windows-uniscribe-fuzzing.html,
2018.
Notes
on Win-
https://
USENIX Association
29th USENIX Security Symposium    2575