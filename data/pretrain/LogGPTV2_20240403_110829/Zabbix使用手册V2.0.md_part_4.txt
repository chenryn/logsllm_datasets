ne: 不相等
gt: 大于
ge: 大于等于
lt: 小于
le: 小于等于
like: 内容匹配
对于整数和浮点型监控项目支持eq(默认),ne,gt,ge,lt,le；对于string、text、log监控项支
持like(默认),eq,ne
例子:
count(600): 最近10分钟的值的个数
count(600,12): 最近10分钟，值等于12的个数
count(600,12,"gt"): 最近10分钟，值大于12的个数
count(#10,12,"gt"): 最近的10个值中，值大于12的个数
count(600,12,"gt",86400): 24小时之前的前10分钟数据中，值大于12的个数
count(600,,,86400): 24小时之前的前10分钟数据的值的个数
#num参数从Zabbix 1.6.1起开始支持, time shift参数和字符串操作支持从Zabbix 1.8.2开
始支持
date
 参数: 直接忽略掉后边的参数
 支持值类型: 所有(any)
 描述: 返回当前日期(格式为YYYYMMDD), 例如20031025
dayofmonth
 参数: 直接忽略掉后边的参数
 支持值类型: 所有(any)
 描述: 返回当前是本月第几天(数值范围:1-31)，该函数从Zabbix1.8.5起开始支持
dayofweek
 参数: 直接忽略掉后边的参数
 支持值类型: 所有(any)
 描述: 返回当前是本周的第几天(数值返回:1-7)，星期一是 1，星期天是7
delta
 参数: 秒或#num
 支持值类型:float, int
 描述: 返回指定时间间隔内的最大值与最小值的差值(max()-min())。时间间隔作为第
一个参数可以是秒或者收集值的数目. 从 Zabbix 1.8.2开始，支持可选的第二个参数
time_shift.
diff
 参数: 忽略
 支持值类型:float, int,str,text,log
 描述: 返回值为1 表示最近的值与之前的值不同，0为其他情况
fuzzytime
 参数: 秒
 支持值类型:float, int
 描述: 返回值为1表示监控项值的时间戳与Zabbix Server的时间多N秒, 0为其他.
常使用system.localtime来检查本地时间是否与Zabbix server时间相同.
iregexp
 参数: 第一个为字符串，第二个为秒或#num
 支持值类型:str,log,text
 描述: 与regexp类似，区别是不区分大小写
last
 参数: 秒或#num
 支持值类型:float, int,str,text,log
 描述: 最近的值，如果为秒，则忽略，#num表示最近第N个值，请注意当前的#num
和其他一些函数的#num的意思是不同的
例子:
last(0) 等价于 last(#1)
last(#3) 表示最近**第**3个值(并不是最近的三个值)
本函数也支持第二个参数**time_shift**，例如
last(0,86400) 返回一天前的最近的值
如果在history中同一秒中有多个值存在，Zabbix不保证值的精确顺序
#num从Zabbix 1.6.2起开始支持, timeshift从1.8.2其开始支持,可以查询 avg()函数获取它
的使用方法
logeventid
 参数:string
 支持值类型:log
 描述: 检查最近的日志条目的 Event ID 是否匹配正则表达式. 参数为正则表达
式,POSIX扩展样式. 当返回值为0时表示不匹配，1表示匹配。 该函数从Zabbix 1.8.5
起开始支持.
logseverity
 参数: 忽略
 支持值类型:log
 描述: 返回最近日志条目的日志等级(log severity). 当返回值为0时表示默认等级，
N为具体对应等级(整数，常用于Windowseventlogs).Zabbix日志等级来源于Windows
eventlog的Information列.
logsource
 参数:string
 支持值类型:log
 描述: 检查最近的日志条目是否匹配参数的日志来源. 当返回值为0时表示不匹配，
1表示匹配。通场用于Windows eventlogs监控. 例如 logsource["VMWareServer"]
max
 参数: 秒或#num
 支持值类型:float, int
 描述: 返回指定时间间隔的最大值. 时间间隔作为第一个参数可以是秒或收集值的
数目(前缀为#). 从Zabbix 1.8.2开始，函数支持第二个可选参数 time_shift，可以查看
avg()函数获取它的使用方法.
min
 参数: 秒或#num
 支持值类型:float, int
 描述: 返回指定时间间隔的最小值. 时间间隔作为第一个参数可以是秒或收集值的
数目(前缀为#). 从Zabbix 1.8.2开始，函数支持第二个可选参数 time_shift，可以查看
avg()函数获取它的使用方法.
nodata
 参数: 秒
 支持值类型:any
 描述: 当返回值为1表示指定的间隔(间隔不应小于30秒)没有接收到数据, 0表示其
他.
now
 参数: 忽略
 支持值类型:any
 描述: 返回距离Epoch(1970年1月1日 00:00:00 UTC)时间的秒数
prev
 参数: 忽略
 支持值类型:float, int,str,text,log
 描述:返回之前的值，类似于 last(#2)
regexp
 参数: 第一个参数为string, 第二个参数为秒或#num
 支持值类型:str,log,text
 描述: 检查最近的值是否匹配正则表达式，参数的正则表达式为POSIX扩展样式,
第二个参数为秒数或收集值的数目，将会处理多个值. 本函数区分大小写。当返回值为1
时表示找到，0为其他.
str
 参数: 第一个参数为string, 第二个参数为秒或#num
 支持值类型:str,log,text
 描述: 查找最近值中的字符串。第一个参数指定查找的字符串，大小写敏感。第二
个可选的参数指定秒数或收集值的数目，将会处理多个值。 当返回值为1时表示找到，
0为其他.
strlen
 参数: 秒或#num
 支持值类型:str,log,text
 描述: 指定最近值的字符串长度(并非字节), 参数值类似于last函数. 例如strlen(0)
等价于strlen(#1),strlen(#3)表示最近的第三个值, strlen(0,86400)表示一天前的最近的
值. 该函数从Zabbix 1.8.4起开始支持
sum
 参数: 秒或#num
 支持值类型:float, int
 描述: 返回指定时间间隔中收集到的值的总和. 时间间隔作为第一个参数支持秒或
收集值的数目(以#开始). 从Zabbix1.8.2开始，本函数支持time_shift作为第二个参数。
可以查看avg函数获取它的用法
time
 参数: 忽略
 支持值类型:any
 描述: 返回当前时间，格式为HHMMSS，例如123055
触发器的故障等级
触发器严重性定义了一个触发器的重要程度。zabbbix支持下列触发器严重性：
严重性（SEVERITY） 定义（DEFINITION） 颜色（COLOUR）
未 分 类 （ Not
未知严重性（Unknownseverity） 灰色（Grey）
classified）
信息（Information） 信息（Forinformationpurposes） 亮绿（Lightgreen）
警告（Warning） 因此注意（Bewarned） 黄色（Yellow）444444
平均（Average） 平均问题（Averageproblem） 橘黄（Orange）
重要的事情发生（Something important has
高（High） 红（Red）
happened）
灾难（Disaster） 灾难，资产损失等（Disaster.Financiallosses,etc）亮红（Brightred）
5.7 添加 Actions
Action是告警动作，当触发器条件被满足时，就会执行指定的action。
通过Configuration->Actions->CreateAction来创建Action
Eventsource:来源
triggers，即所有的triggers条件满足时都会执行这个action
Discovery:自动发现模块
Autoregistration：事件产生记录
Escalations：告警是否升级，及升级时间
Subject、Message：告警标题和内容 ，此处可引用 zabbix 的宏变量；例如
{{HOSTNAME}:{TRIGGER.KEY}.last(0)}表示最后一次采集值，更多宏变量参考:
http://www.zabbix.com/documentation/2.0/manual/config/macros/usermacros
RecoveryMessage：告警恢复信息，不勾选系统会用默认的，勾选后自定义
Conditions：trigger产生的条件，条件可以多选
Operation：选择media 及user
更多资料参考
http://www.zabbix.com/documentation/2.0/manual/config/notifications/action
另请参考3.27章节
5.8 添加 Medias
Media，即告警方式，Zabbix 可以提供四类 Media：Email/SMS/Jabber/Script，通过
Administrator->MediaType来修改或新增告警方式
Email方式最常用的，填入相关的SMTP信息，即可通过邮件方式发送告警。
其中type有以下几种方式
Email 方式用邮件
Script方式可以通过自己编写程序或脚本的方式发送告警信息。
SMS方式要在server主机上接入短信modem。
Jabber方式是一种linux下的即时通讯工具,通过Jabber发送即时消息。
5.9 添加 Users
在Administrator->Users 可以添加用户和用户组
通过UserGroup可以限制用户的权限，zabbix自带的用户组的权限限制基本能满足我
们的要求。
创建用户时可以根据用户的不同作用划分到不同的组，media中填入告警接受地址及告
警接受时间等信息。
Type：报警类型
Sendto ：收件人地址，可以增加多个
用户权限的控制
5.10 添加 WEB Monitorings
WebMonitoring是用来监控web程序的，可以监控到web程序的下载速度、返回码及
响应时间，还支持把一组连续的web动作作为一个整体来监控。
下面我们以监控登陆zabbix的web程序为例，来展示如何使用webmonitoring。
Configuration->web->CreateScenario 创建一个Scenario(注：必须选择host后才能创建
scenario，zabbix的所有items都必须创建在hosts上)
图表 1
Application：选择这个scenario所在的application组
Name：scenario的名字
Basicauthentication：鉴权
Updateinterval：监控频率，s为单位
Agent：选择要使用的浏览器客户端，可能同样的web程序对不同的客户端展示的内容
会不一样
Status：默认为active
Variables：变量定义，这里定义的变量可在后续的steps中使用，这里我们定义了用户
和密码的变量
Steps：web 程序的各个步骤，选择add新增一个Login的step，来模拟用户登陆，传递
用户和密码给index.php页面
图表 2
URL：监控的web页面(注:必须是全路径带页面名)
Post:传递给页面的参数，多个参数之间用&连接，此处可引用前面定义的变量
Timeout：超时时间
Required：页面中能匹配到字符,匹配不到即认为错误
Statuscodes:页面返回码
添加完step后，我们在Monitoring->web页面即能看到监控的状态和图示
图表 3
创建完scenario后，zabbixserver会自动创建相关的items，所以我们只需为这些items
添加triggers即可让webscenario出错时产生告警
Configuration->hosts->点击 scenario 所在的 host条目的 trigger，直接 create trigger，在
selectitems的时候就可以看到系统自动创建的items（注：自动创建的items在host的items
列表中直接是看不到的，需要在创建trigger时选择items时才能看到）
图表 4
可以在items列表中看到，系统为每个step创建了3个item，DownloadSpeed/Response
Code/ResponseTime,为整个scenario创建了一个test.fail的item，可以分别为其创建trigger
下例我们创建一个Login页面返回码的trigger，大于等于400即为错误
图表 5
再创建一个整个scenario所有step运行是否成功的trigger，采集值为0表示整个scenario
的所有step都执行成功了，第几步的step执行失败就返回数字几，且后续的step都不会继
续执行下去。
图表 6
这样，一个完整的webmonitoring就配置完成了。
Webmonitoring还有更多强大的功能，未能一一研究了解，有待挖掘
5.11 添加 Graphs
Zabbix的Graphs功能很强大，可以为每一个item绘制图表，也可以把多个items绘制
在一张图表内。
通过configuration->hosts选择要绘制图表的host，点击graphs，creategraphs即可创建
图表。
注意，此处选择的数据如果为多项，则多项数据呈现在一张图表上面
（此处对中文的支持不好，建议在监控过程中全部使用英文字符）
Graphtype：图表样式，有线状、柱状、饼状
还可以自定义图表大小，及Y轴最大最小值
通过additems可以添加在同一个图表中展示的多个items（注：注意每个item的颜色及
取值范围，范围相差太大图表会显示不全）
配置好的graphs在monitoring->graphs中查看
在monitoring->lastdata下能快速查看每个host的每个item的graph
5.12 添加 Screens
Screen将多种信息放在一起展示，便于集中展示某个host的多个信息，或是比较多个
hosts的同一种信息,这些信息可以为graphs、maps、serverinfos等等，几乎涵盖zabbix所有
的监控信息。
通过configuration->screen->creatscreen来创建，创建时定义screen的行数和列数，点击
对应单元格内的change，添加相应的信息
点击change添加图像
选择图像类型，对齐方式等
通过monitoring-screen，可以查看之前配置好的信息
5.13 添加 Maps
这里可以添加关于主机的拓扑图：configration-maps,在右上角可以 create maps 或者
importmap
这里我们点击cratemaps 点save保存。
双击
上面加号和减号可以增加主机 link说明主机的连接情况，可以进行自定义。
5.14 添加 MySQL 监控
Zabbix自带有MySQL的监控模板，可以做一些简单的监控。
1、更改agentd配置