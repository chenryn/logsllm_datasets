SDIO wireless cards
“sound cards” over I2S
GSM modems are really just pretending to be Hayes AT 
modems.
Power management, LED management, cameras, etc.
“We need an Ethernet PHY” becomes “We hooked an 
Ethernet PHY up over USB” 
Linux doesn’t care if they’re on-die or not, it’s all the same 
bus. 
Not 
GPIO!
GPIO
Sometimes, all the fancy LEDs on your device aren’t GPIO pins on the SoC. Instead, 
they’re an external peripheral. This is a Nextbit Robin, where the flash LED is a part of 
the camera hardware and the LEDs on the back are actually controlled by a TI LED 
controller that has its own tiny ISA. 
27
Bootloader
One Bootloader To Rule Them All: Das U-Boot
Uses a simple scripting language
Can pull from TFTP, HTTP, etc.
Might be over Telnet, Serial, BT UART, etc.
Some don’t use U-Boot, use Fastboot or other loaders
Android devices are a clusterfuck of options
Without the bootloader, you’d be nowhere, though. U-Boot is by far the most 
common bootloader for embedded devices, with routers and the like being the most 
common users. Phones and such are a whole different show, with a whole variety of 
options kicking around. Chances are, however, if it’s not a phone it probably uses U-
Boot.
28
Life and death of an SoC*
DFU 
Check
• First chance to load fresh code onto device, use for bootstrapping and 
recovery
IPL
• Does signature checking of early boot image
• Probably SoC vendor provided
Bootloader
• Early UART/network wakeup is likely here.
Load Kernel 
into RAM
• Some devices are dumb and load multiple kernels until one fails or they run out
• U-Boot is really running a script here.
Start kernel
• Kernel has to wake up (or re-wake) devices it wants. It can’t make any guarantees. 
Userland 
• Home of the party. 
• Where the fun attacks are
* Some restrictions apply
The bootloader’s job comes right after the IPL: Its job is to wake up any devices that 
haven’t been as needed such as storage, load the kernel into memory, and kick it off. 
We’ve seen this dance before. This, as it turns out, is a whole lot cleaner on ARM 
than it is on Intel’s clusterfuck of a design.
29
Life and death of an SoC*
DFU 
Check
• First chance to load fresh code onto device, use for bootstrapping and 
recovery
Early 
Boot
• Does signature checking of early boot image
• Probably SoC vendor provided
U-Boot
• Early UART/network wakeup is likely here.
Load Kernel 
into RAM
• Some devices are dumb and load multiple kernels until one fails or they run out
• U-Boot is really running a script here.
Start kernel
• Kernel has to wake up (or re-wake) devices it wants. It can’t make any guarantees. 
Userland 
• Home of the party. 
• Where the fun attacks are
* Some restrictions apply
The real fun is when you can attack the earliest part of the boot sequence, the DFU or 
Device Firmware Update sequence. DFU mode is how fresh code is loaded on without 
any consent from the higher levels of the environment. This is also the place that 
most – if not every – OEM puts the most time into: Keeping someone else from fixing 
their problems becomes a steady stream of new devices. U-Boot and the userland are 
the other two fun parts of this, for the obvious reasons.
30
Root Filesystem: Home to 
All
A root filesystem contains the bare minimum to boot Linux: Any 
shared object libraries, binaries, or other content that is necessary for 
what that device is going to do
Fluid content that needs to be changed or which is going to be fetched 
regularly is often stored on a Ramdisk; this might be loaded during 
init's early startup from a tarball.
This is a super common thing to miss because it's a tmpfs outside of 
/tmp
this is a super common way of keeping / “small”
This often leads to rootfs extractions via tar that seem "too big“ 
There are sometimes multiple root filesystems overlaid upon each 
other
Android uses this to some extent: /system is where many things 
really are
Might be from NFS, might try NFS first, etc.
A device with no code to run is a device without a purpose. We need a root 
filesystem.  Sometimes you get several, overlaid upon one another. Android does this 
and so does your LiveCD. 
31
Attacking these 
devices
So how do we go about attacking these sorts of devices? 
32
Step 0: Scope out your 
device
Get to know what makes the device 
tick
Version of Linux
Rough software stack
Known vulnerabilities
Debug shells, backdoors, admin 
shells, etc.
ARM executables are fairly generic
Kobo updates are very, VERY generic 
and the Kobo userland is very aware 
of this.
Hardware vendors are lazy: many 
devices likely similar to kin-devices
Possibly able to find update for 
similar device by same OEM
Always. Always start with step 0: Get to know the device. Figure out what makes it 
go. Remember that ARM executables are really generic, and this is used by many 
vendors to ship the same code to different platforms. Vendors are lazy: they want to 
produce the most devices with the least amount of work possible. 
33
Don’t Reinvent The Wheel
Since so many embedded linux devices are similar, or run similarly 
outdated software, you may well have some of your work cut out 
for you
OWASP has a whole task set devoted to IoT security:
https://www.owasp.org/index.php/OWASP_Internet_of_Things_Pr
oject
Tools like Firmwalker (https://github.com/craigz28/firmwalker) and 
Routersploit (https://github.com/threat9/routersploit) are already 
built and ready. Sometimes, thinking like a skid can save time and 
energy for other things, like beer!
Firmware Security blog is a great place to look, including a 
roundup of stuff (https://firmwaresecurity.com/2018/06/03/list-of-
iot-embedded-os-firmware-tools/ )
Don’t reinvent the wheel. Tools like Firmwalker and Routersploit, as well as the 
information on the OWASP IoT Security task set are meant to help streamline finding 
the information you need out of filesystems, updates, etc. If these sorts of things start 
really getting interesting, go read the roundups by the firmware Security blog. 
34
Option 1: It’s a UNIX 
system, I know this
If you can get a shell, 
sometimes just beating 
against your target can be fun
Limited to only what is on the 
target (or what you can get to 
the target)
Can feel a bit like going into 
the wild with a bowie knife 
and a jar full of your own piss
Debugger? Fuzzer? Compiler?
What are those?
So, Option 1 is to treat it like any other UNIX system. Straight forward if you have a 
shell, you can start poking around. Often, however, you’re already going to have a 
root shell or something very close to it, as well as only a handful of tools. You’re not 
regularly going to get a debugger, compiler, even manpages. These devices are 
stripped to the bone. 
35
Option 2: Black-Box it
Lots of fun once you’re 
used to it or live service 
attacks. 
Safe: Never directly 
exposes you to “secrets” 
(IP)
You don’t have the bowie 
knife, just two jars of piss.
Option 2 is to black box the thing. This is turns your attack into any other 
straightforward service attack where you have no control over the device itself.
IANAL, but it would seem that this has less likelihood of you stumbling upon 
something vendor-secret, such as leftover binaries not pulled from the development 
process. .Again, IANAL. If you think you might possibly have an inkling that you need a 
lawyer, get a fucking lawyer. 
36
These options suck
These options fucking suck though.
It’s always better when you can investigate the whole goddamn binary. 
37
Option 3: Reverse it
Pull out IDA/Radare
Grab a beer
Learn you a new ISA
The way of reversing IoT 
things that don’t run Linux!
… but how the fuck do you 
get the binaries?
So the obvious answer is to reverse it. Already familiar with cracking open X86 
executables in IDA? Radare? Time to learn a new ISA, grab a beer, and play the same 
game but with hot fresh binaries. 
If your target executable talks with an external device that you can’t emulate, this is 
probably your stop.
But how the fuck do we get the binaries? We’ll get to that. 
38
Yeah but I’m fucking 
lazy, asshole.
I don’t want to learn 
IDA. I want to fuzz.
But I’m a lazy asshole, you say: I need that sweet sweet kernel debugger and AFL and 
the rest of my skid-cum-kernel-hacker tools! 
39
Option 4: Emulate It
You have every tool at your 
disposal
Hot damn is that a 
debugger?
Oh shit waddup it’s fuzzy 
boiii
Once again, how the fuck 
do you get your binary of 
choice?
You emulate it! Emulation is a perfectly reasonable approach to many of these 
challenges. You’ve got all your normal tools in most cases, or you can at least cross-
compile them. 
But the issue still stands – how the ever fuck do you get your target binary? 
40
Getting root(fs)
Let’s get root, then. 
This can range from surprisingly easy to frustratingly hard, depending on the 
environment. Keep in mind rule 0 through this whole thing: Someone else has done 
something similar, probably. A few hours of googling and reading could save you 
many, many hours of head-scratching and anguished screams as you question the 
lineage of the engineers who designed a device. 
41
Easy Mode: Update 
Packages
Updates for devices are the easiest way to extract a root filesystem
Sometimes little more than a filesystem/partition layout that 
gets dd’d right to disk
Android updates are ZIPs containing some executables, a script, 
and some filesystems
Newer android updates (small ones) are very regularly "delta" 
updates: These touch a known filesystem directly, and are very 
small but don't contain a full filesystem.
Sometimes, rarely, they're an *actual executable* that gets run on 
the device
Probably isn't signed
Probably fetched over HTTP
Downside: They’re occasionally very hard to find or are 
incremental, incomplete patches. Sometimes they’re encrypted. 
So, easy mode is, most often, updates! Updates can be the most direct way to get the 
binaries of interest, especially if there’s some new feature that’s being rolled out. 
Often, these updates contain whole filesystems, but sometimes they’re executables 
or binary patches against the blocks themselves. Sometimes, the bastards encrypt or 
obfuscate updates.
42
Medium: In-Vivo 
extraction
You need a shell
Can you hijack an administrative interface? 
Some ping functions can be hijacked into shells
Sometimes it’s literally “telnet to the thing”
Refer to step 0 for more
You need some kind of packer (cpio, tar, etc)
Find is a builtin for most busybox implementations. 
You need some way to put it somewhere (netcat, curl, etc)
You might have an HTTPD to fall back on
Need to do reconnaissance on your device
Might need some creativity
Wireshark, Ettercap, Fiddler, etc
Next up is the Fuck it, we’re doing it live of getting files off a device. This will require a 
certain amount of creativity on your part as you’re living in a very barebones 
envinonment. Take the easiest way out possible. 
43
Demo: Router firmware 
extraction (Actiontec 
Router)
So let’s see what this looks like. 
44
45
What did we get?
Hot damn, those look like filesystems. 
46
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
Next up is direct, complete extraction at the raw block level outside of the native 
environment. This could be as simple as pulling the SD card out and dumping that
47
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
And you’re looking at me like “okay asshole, tell me something I don’t know”. 
48
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
But the number of devices that have these is astoundingly large. These are all 
devices, a game console, an “anonymity device” a first generation Kindle and a Kobo 
H2O. Many of these devices are just a Raspberry Pi with some added hardware on 
top. 
49
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the 
data lines, but it can be done!
You will need to understand how the disk is laid out