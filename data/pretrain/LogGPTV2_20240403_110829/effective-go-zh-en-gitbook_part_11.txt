口的联合体 （它们必须是不相交的方法集）。只有接口能被嵌入到接口中。
The same basic idea applies to structs, but with more far-reaching implications. The bufio
package has two struct types, bufio.Reader and bufio.Writer, each of which of course
implements the analogous interfaces from package io. And bufio also implements a buffered
reader/writer, which it does by combining a reader and a writer into one struct using
embedding: it lists the types within the struct but does not give them field names.
同样的基本想法可以应用在结构体中，但其意义更加深远。bufio 包中有 bufio.Reader 和
bufio.Writer 这两个结构体类型， 它们每一个都实现了与 io 包中相同意义的接口。此外，
bufio 还通过结合 reader/writer 并将其内嵌到结构体中，实现了带缓冲的 reader/writer：它列
出了结构体中的类型，但并未给予它们字段名。
// ReadWriter stores pointers to a Reader and a Writer.
// It implements io.ReadWriter.
type ReadWriter struct {
*Reader // *bufio.Reader
*Writer // *bufio.Writer
}
// ReadWriter 存储了指向 Reader 和 Writer 的指针。
// 它实现了 io.ReadWriter。
type ReadWriter struct {
*Reader // *bufio.Reader
*Writer // *bufio.Writer
}
The embedded elements are pointers to structs and of course must be initialized to point to
valid structs before they can be used. The ReadWriter struct could be written as
内嵌的元素为指向结构体的指针，当然它们在使用前必须被初始化为指向有效结构体的指
针。 ReadWriter 结构体和通过如下方式定义：
85
内嵌
type ReadWriter struct {
reader *Reader
writer *Writer
}
but then to promote the methods of the fields and to satisfy the io interfaces, we would also
need to provide forwarding methods, like this:
但为了提升该字段的方法并满足 io 接口，我们同样需要提供转发的方法， 就像这样：
func (rw *ReadWriter) Read(p []byte) (n int, err error) {
return rw.reader.Read(p)
}
By embedding the structs directly, we avoid this bookkeeping. The methods of embedded
types come along for free, which means that bufio.ReadWriter not only has the methods of
bufio.Reader and bufio.Writer, it also satisfies all three interfaces: io.Reader, io.Writer, and
io.ReadWriter.
而通过直接内嵌结构体，我们就能避免如此繁琐。 内嵌类型的方法可以直接引用，这意味着
bufio.ReadWriter 不仅包括 bufio.Reader 和 bufio.Writer 的方法，它还同时满足下列三个接
口： io.Reader、io.Writer 以及 io.ReadWriter。
There's an important way in which embedding differs from subclassing. When we embed a
type, the methods of that type become methods of the outer type, but when they are invoked
the receiver of the method is the inner type, not the outer one. In our example, when the
Read method of a bufio.ReadWriter is invoked, it has exactly the same effect as the
forwarding method written out above; the receiver is the reader field of the ReadWriter, not
the ReadWriter itself.
还有种区分内嵌与子类的重要手段。当内嵌一个类型时，该类型的方法会成为外部类型的方
法， 但当它们被调用时，该方法的接收者是内部类型，而非外部的。在我们的例子中，当
bufio.ReadWriter 的 Read 方法被调用时， 它与之前写的转发方法具有同样的效果；接收者
是 ReadWriter 的 reader 字段，而非 ReadWriter 本身。
Embedding can also be a simple convenience. This example shows an embedded field
alongside a regular, named field.
内嵌同样可以提供便利。这个例子展示了一个内嵌字段和一个常规的命名字段。
type Job struct {
Command string
*log.Logger
}
86
内嵌
The Job type now has the Log, Logf and other methods of *log.Logger . We could have
given the Logger a field name, of course, but it's not necessary to do so. And now, once
initialized, we can log to the Job:
Job 类型现在有了 Log、Logf 和 *log.Logger 的其它方法。我们当然可以为 Logger 提供一
个字段名，但完全不必这么做。现在，一旦初始化后，我们就能记录 Job 了：
job.Log("starting now...")
The Logger is a regular field of the Job struct, so we can initialize it in the usual way inside
the constructor for Job, like this,
Logger 是 Job 结构体的常规字段， 因此我们可在 Job 的构造函数中，通过一般的方式来初
始化它，就像这样：
func NewJob(command string, logger *log.Logger) *Job {
return &Job{command, logger}
}
or with a composite literal,
或通过复合字面：
job := &Job{command, log.New(os.Stderr, "Job: ", log.Ldate)}
If we need to refer to an embedded field directly, the type name of the field, ignoring the
package qualifier, serves as a field name, as it did in the Read method of our ReaderWriter
struct. Here, if we needed to access the *log.Logger of a Job variable job, we would write
job.Logger, which would be useful if we wanted to refine the methods of Logger.
若我们需要直接引用内嵌字段，可以忽略包限定名，直接将该字段的类型名作为字段名， 就
像我们在 ReaderWriter 结构体的 Read 方法中做的那样。 若我们需要访问 Job 类型的变量
job 的 *log.Logger ， 可以直接写作 job.Logger。若我们想精炼 Logger 的方法时， 这会非
常有用。
func (job *Job) Logf(format string, args ...interface{}) {
job.Logger.Logf("%q: %s", job.Command, fmt.Sprintf(format, args...))
}
Embedding types introduces the problem of name conflicts but the rules to resolve them are
simple. First, a field or method X hides any other item X in a more deeply nested part of the
type. If log.Logger contained a field or method called Command, the Command field of Job
would dominate it.
87
内嵌
内嵌类型会引入命名冲突的问题，但解决规则却很简单。首先，字段或方法 X 会隐藏该类型
中更深层嵌套的其它项 X。若 log.Logger 包含一个名为 Command 的字段或方法，Job 的
Command 字段会覆盖它。
Second, if the same name appears at the same nesting level, it is usually an error; it would
be erroneous to embed log.Logger if the Job struct contained another field or method called
Logger. However, if the duplicate name is never mentioned in the program outside the type
definition, it is OK. This qualification provides some protection against changes made to
types embedded from outside; there is no problem if a field is added that conflicts with
another field in another subtype if neither field is ever used.
其次，若相同的嵌套层级上出现同名冲突，通常会产生一个错误。若 Job 结构体中包含名为
Logger 的字段或方法，再将 log.Logger 内嵌到其中的话就会产生错误。然而，若重名永远不
会在该类型定义之外的程序中使用，那就不会出错。 这种限定能够在外部嵌套类型发生修改
时提供某种保护。 因此，就算添加的字段与另一个子类型中的字段相冲突，只要这两个相同
的字段永远不会被使用就没问题。
88
并发
Concurrency
并发
Share by communicating
通过通信共享内存
Concurrent programming is a large topic and there is space only for some Go-specific
highlights here.
并发编程是个很大的论题。但限于篇幅，这里仅讨论一些 Go 特有的东西。
Concurrent programming in many environments is made difficult by the subtleties required to
implement correct access to shared variables. Go encourages a different approach in which
shared values are passed around on channels and, in fact, never actively shared by
separate threads of execution. Only one goroutine has access to the value at any given
time. Data races cannot occur, by design. To encourage this way of thinking we have
reduced it to a slogan:
在并发编程中，为实现对共享变量的正确访问需要精确的控制，这在多数环境下都很困难。
Go 语言另辟蹊径，它将共享的值通过信道传递，实际上，多个独立执行的线程从不会主动共
享。 在任意给定的时间点，只有一个 Go 程能够访问该值。数据竞争从设计上就被杜绝了。
为了提倡这种思考方式，我们将它简化为一句口号：
Do not communicate by sharing memory; instead, share memory by communicating.
不要通过共享内存来通信，而应通过通信来共享内存。
This approach can be taken too far. Reference counts may be best done by putting a mutex
around an integer variable, for instance. But as a high-level approach, using channels to
control access makes it easier to write clear, correct programs.
这种方法意义深远。例如，引用计数通过为整数变量添加互斥锁来很好地实现。 但作为一种
高级方法，通过信道来控制访问能够让你写出更简洁，正确的程序。
One way to think about this model is to consider a typical single-threaded program running
on one CPU. It has no need for synchronization primitives. Now run another such instance; it
too needs no synchronization. Now let those two communicate; if the communication is the
synchronizer, there's still no need for other synchronization. Unix pipelines, for example, fit
89
并发
this model perfectly. Although Go's approach to concurrency originates in Hoare's
Communicating Sequential Processes (CSP), it can also be seen as a type-safe
generalization of Unix pipes.
我们可以从典型的单线程运行在单 CPU 之上的情形来审视这种模型。它无需提供同步原语。
现在考虑另一种情况，它也无需同步。现在让它们俩进行通信。若将通信过程看做同步着，
那就完全不需要其它同步了。例如，Unix 管道就与这种模型完美契合。 尽管 Go 的并发处理
方式来源于 Hoare 的通信顺序处理（CSP）， 它依然可以看做是类型安全的 Unix 管道的实
现。
Goroutines
Go 程
They're called goroutines because the existing terms—threads, coroutines, processes, and
so on—convey inaccurate connotations. A goroutine has a simple model: it is a function
executing concurrently with other goroutines in the same address space. It is lightweight,
costing little more than the allocation of stack space. And the stacks start small, so they are
cheap, and grow by allocating (and freeing) heap storage as required.
我们称之为 Go 程 是因为现有的术语—线程、协程、进程等等—无法准确传达它的含义。 Go
程具有简单的模型：它是与其它 Go 程并发运行在同一地址空间的函数。它是轻量级的， 所
有小号几乎就只有栈空间的分配。而且栈最开始是非常小的，所以它们很廉价， 仅在需要时
才会随着堆空间的分配（和释放）而变化。
Goroutines are multiplexed onto multiple OS threads so if one should block, such as while
waiting for I/O, others continue to run. Their design hides many of the complexities of thread
creation and management.
Go 程在多线程操作系统上可实现多路复用，因此若一个线程阻塞，比如说等待 I/O， 那么其
它的线程就会运行。Go 程的设计隐藏了线程创建和管理的诸多复杂性。
Prefix a function or method call with the go keyword to run the call in a new goroutine. When
the call completes, the goroutine exits, silently. (The effect is similar to the Unix shell's &
notation for running a command in the background.)
在函数或方法前添加 go 关键字能够在新的 Go 程中调用它。当调用完成后， 该 Go 程也会安
静地退出。（效果有点像 Unix Shell 中的 & 符号，它能让命令在后台运行。）
go list.Sort() // run list.Sort concurrently; don't wait for it.
go list.Sort() // 并发运行 list.Sort，无需等它结束。
90
并发
A function literal can be handy in a goroutine invocation.
函数字面在 Go 程调用中非常有用。
func Announce(message string, delay time.Duration) {
go func() {
time.Sleep(delay)
fmt.Println(message)
}() // Note the parentheses - must call the function.
}
func Announce(message string, delay time.Duration) {
go func() {
time.Sleep(delay)
fmt.Println(message)
}() // 注意括号 - 必须调用该函数。
}
In Go, function literals are closures: the implementation makes sure the variables referred to
by the function survive as long as they are active.
在 Go 中，函数字面都是闭包：其实现在保证了函数内引用变量的生命周期与函数的活动时间
相同。
These examples aren't too practical because the functions have no way of signaling
completion. For that, we need channels.
这些函数没什么实用性，因为它们没有实现完成时的信号处理。因此，我们需要信道。
Channels
信道
Like maps, channels are allocated with make, and the resulting value acts as a reference to
an underlying data structure. If an optional integer parameter is provided, it sets the buffer
size for the channel. The default is zero, for an unbuffered or synchronous channel.
信道与映射一样，也需要通过 make 来分配内存。其结果值充当了对底层数据结构的引用。
若提供了一个可选的整数形参，它就会为该信道设置缓冲区大小。默认值是零，表示不带缓
冲的或同步的信道。
ci := make(chan int) // unbuffered channel of integers
cj := make(chan int, 0) // unbuffered channel of integers
cs := make(chan *os.File, 100) // buffered channel of pointers to Files
91
并发
ci := make(chan int) // 整数类型的无缓冲信道
cj := make(chan int, 0) // 整数类型的无缓冲信道
cs := make(chan *os.File, 100) // 指向文件指针的带缓冲信道
Unbuffered channels combine communication—the exchange of a value—with
synchronization—guaranteeing that two calculations (goroutines) are in a known state.
无缓冲信道在通信时会同步交换数据，它能确保（两个 Go 程的）计算处于确定状态。
There are lots of nice idioms using channels. Here's one to get us started. In the previous
section we launched a sort in the background. A channel can allow the launching goroutine
to wait for the sort to complete.
信道有很多惯用法，我们从这里开始了解。在上一节中，我们在后台启动了排序操作。 信道
使得启动的 Go 程等待排序完成。
c := make(chan int) // Allocate a channel.
// Start the sort in a goroutine; when it completes, signal on the channel.
go func() {
list.Sort()
c <- 1 // Send a signal; value does not matter.
}()
doSomethingForAWhile()
<-c // Wait for sort to finish; discard sent value.
c := make(chan int) // 分配一个信道
// 在 Go 程中启动排序。当它完成后，在信道上发送信号。
go func() {
list.Sort()
c <- 1 // 发送信号，什么值无所谓。
}()
doSomethingForAWhile()
<-c // 等待排序结束，丢弃发来的值。
Receivers always block until there is data to receive. If the channel is unbuffered, the sender
blocks until the receiver has received the value. If the channel has a buffer, the sender
blocks only until the value has been copied to the buffer; if the buffer is full, this means
waiting until some receiver has retrieved a value.
接收者在收到数据前会一直阻塞。若信道是不带缓冲的，那么在接收者收到值前， 发送者会
一直阻塞；若信道是带缓冲的，则发送者仅在值被复制到缓冲区前阻塞； 若缓冲区已满，发
送者会一直等待直到某个接收者取出一个值为止。
92
并发
A buffered channel can be used like a semaphore, for instance to limit throughput. In this
example, incoming requests are passed to handle, which sends a value into the channel,
processes the request, and then receives a value from the channel to ready the
“semaphore” for the next consumer. The capacity of the channel buffer limits the number of
simultaneous calls to process.
带缓冲的信道可被用作信号量，例如限制吞吐量。在此例中，进入的请求会被传递给
handle，它从信道中接收值，处理请求后将值发回该信道中，以便让该 “信号量” 准备迎接下
一次请求。信道缓冲区的容量决定了同时调用 process 的数量上限，因此我们在初始化时首
先要填充至它的容量上限。
var sem = make(chan int, MaxOutstanding)
func handle(r *Request) {
sem <- 1 // Wait for active queue to drain.