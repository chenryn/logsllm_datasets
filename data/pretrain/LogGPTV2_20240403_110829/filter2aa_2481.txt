# Spring Part 2: SpringMVC

在审查了一些Spring项目后，我决定从开发者的角度重新审视Spring。本文是对之前发布的《Spring Part 1 四天学习总结》的补充。链接如下：
- [Spring Part 1 四天学习总结](https://mp.weixin.qq.com/s/Qqu11XiZkWchhQ15y0J0_A)

## 一、SpringMVC的基本概念

### 1. 三层架构
- **表现层**：负责与用户交互。
- **业务层**：处理业务逻辑。
- **持久层**：负责数据的存储和访问。

### 2. MVC模式
MVC（Model-View-Controller）是一种用于设计Web应用程序表现层的模式。它包括三个主要组件：
- **模型 (Model)**：负责数据处理和业务逻辑。
- **视图 (View)**：负责展示数据。
- **控制器 (Controller)**：负责处理用户请求并协调模型和视图之间的交互。

### 3. SpringMVC
SpringMVC是基于Java实现MVC设计模式的一种轻量级Web框架，属于Spring Framework的一部分，并已整合到Spring Web Flow中。SpringMVC提供了一套完整的MVC模块，支持可插拔的MVC架构，使得开发者可以选择使用SpringMVC或集成其他MVC框架（如Struts1、Struts2等）。随着Spring 3.0的发布，SpringMVC已成为最优秀的MVC框架之一，支持RESTful编程风格的请求。

### 4. SpringMVC的优势
1. **清晰的角色划分**：前端控制器（DispatcherServlet）、处理器映射（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）、控制器（Controller）、验证器（Validator）、命令对象（Command Object）、表单对象（Form Object）。
2. **灵活的扩展点**：分工程度高，扩展性好。
3. **POJO作为命令对象**：无需继承特定API，可以直接作为业务对象使用。
4. **无缝集成**：与其他Spring框架无缝集成。
5. **可适配**：通过HandlerAdapter支持任意类作为处理器。
6. **可定制性**：HandlerMapping、ViewResolver等可以非常简单地进行定制。
7. **强大的数据验证、格式化和绑定机制**。
8. **易于单元测试**：利用Spring提供的Mock对象进行Web层单元测试。
9. **本地化和主题支持**：便于国际化和主题切换。
10. **强大的JSP标签库**：简化JSP编写。

### 5. SpringMVC与Struts2的对比
#### 共同点
- 都是基于MVC模型的表现层框架。
- 底层都依赖原始Servlet API。
- 处理请求的机制都是一个核心控制器。

#### 区别
- **入口不同**：SpringMVC的入口是Servlet，而Struts2是Filter。
- **设计方式不同**：SpringMVC基于方法设计，而Struts2基于类。
- **性能差异**：SpringMVC稍微快一些，因为它每次执行不需要创建新的动作类。
- **简洁性和支持**：SpringMVC更加简洁，支持JSR303，处理AJAX请求更方便。
- **页面开发效率**：Struts2的OGNL表达式使页面开发效率更高，但执行效率不如JSTL。

## 二、SpringMVC的请求响应流程
1. **服务器启动**：应用被加载，读取web.xml中的配置，创建Spring容器并初始化对象。
2. **浏览器发送请求**：请求被DispatcherServlet捕获，根据请求URL匹配@RequestMapping注解的内容。
3. **匹配成功**：执行对应的方法，该方法有一个返回值。
4. **查找视图**：根据方法的返回值，借助InternalResourceViewResolver找到对应的结果视图。
5. **渲染视图**：将结果视图渲染后响应给浏览器。

## 三、一些类的简单理解
### 1. DispatcherServlet：前端控制器
- **作用**：接收用户请求，转发请求到相应的处理器。
- **特点**：降低了组件间的耦合性，是整个流程控制的中心。

### 2. HandlerMapping：处理器映射器
- **作用**：根据用户请求找到对应的处理器。
- **实现方式**：配置文件方式、实现接口方式、注解方式等。

### 3. Handler：处理器
- **作用**：具体业务控制器，处理用户的请求。
- **特点**：由DispatcherServlet转发请求到Handler。

### 4. HandlerAdapter：处理器适配器
- **作用**：通过适配器模式执行处理器。
- **特点**：可以通过扩展适配器支持更多类型的处理器。

### 5. View Resolver：视图解析器
- **作用**：将处理结果生成视图。
- **过程**：根据逻辑视图名解析成物理视图名，生成视图对象，渲染视图并将结果展示给用户。

### 6. View：视图
- **支持类型**：jstlView、freemarkerView、pdfView等。
- **常用视图**：jsp。
- **特点**：通常需要通过页面标签或模板技术将模型数据展示给用户，由程序员根据业务需求开发具体的页面。

希望这些内容能帮助你更好地理解和使用SpringMVC。接下来，我计划继续学习源码分析，并简要回顾一下Spring Boot的相关知识，以查漏补缺。