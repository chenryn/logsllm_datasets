title:Automated System Design for Availability
author:G. John Janakiraman and
Jose Renato Santos and
Yoshio Turner
Automated System Design for Availability
G. (John) Janakiraman
Jose Renato Santos
Hewlett-Packard Laboratories
{john.janakiraman,joserenato.santos,yoshio.turner}@hp.com
Yoshio Turner
Abstract
Large-scale systems experience frequent failures which
can result in unacceptably high service downtime or appli-
cation execution time. To meet performance and availability
requirements, the user must perform a complex design task in-
cluding the selection and conﬁguration of hardware and soft-
ware components and mechanisms for handling failures. We
believe users should be relieved of this burden by automating
the design process in order to generate cost-effective solu-
tions from high-level application requirements. In this paper,
we present Aved, a proof of concept design automation engine
which is a ﬁrst step toward this goal. We describe how infras-
tructure choices, application models, and user requirements
are represented with Aved to automate design space search
and reason about design alternatives. We additionally present
examples to illustrate how Aved can generate a complete pic-
ture of the cost-availability and cost-performance tradeoffs
for the infrastructure design.
1. Introduction
The computing infrastructure which supports a service or
application must be designed carefully to meet requirements
for service performance and availability. In large-scale sys-
tems, these requirements must be met despite the occurence
of frequent failures of hardware and software components.
For enterprise services, such failures can result in unaccept-
ably high levels of service unavailability. For applications,
component failures can result in lost computation which must
be re-executed, potentially leading to unacceptably long ap-
plication execution time.
To meet service availability and performance require-
ments, a complex design task must be performed to judi-
ciously select and conﬁgure hardware and software compo-
nents, and also mechanisms for handling failures. The design
space that must be explored can be large and consist of multi-
ple dimensions such as choice of hardware components, soft-
ware conﬁgurations such as state checkpointing interval, use
of redundancy through active, standby, or cold sparing, re-
dundancy in network paths, and the use of software rejuve-
nation techniques. Each choice presents a different tradeoff
among availability, performance, and cost of ownership. The
problem is to ﬁnd a solution from this multi-dimensional de-
sign space that provides the best cost-beneﬁt tradeoff to
the user. This tradeoff can be modeled with a utility func-
tion of cost, performance, and availability. In a simple case,
the problem can be reduced to ﬁnding a minimum cost solu-
tion that meets the user’s availability and performance goals
speciﬁed as simple thresholds.
In current practice, users explore the design space by
drawing on their expertise and experience to manually gen-
erate system design alternatives. To evaluate the availability
of the generated design alternatives, users invoke an availabil-
ity modeling tool [4][2][12], and databases of component fail-
ure rates and repair times, in order to predict service down-
time.
We believe that users should be relieved of the burden of
low-level infrastructure design and conﬁguration. Instead, the
design process should be automated, freeing users to focus
on service and application logic. An automated system de-
sign engine should require users to specify only high-level ap-
plication requirements, and the engine should automatically
generate cost-effective solutions that satisfy the requirements.
An automated design process may generate optimal designs
more rapidly than a human user. In addition, it may improve
solution quality by covering a wider range of design alterna-
tives than is usually feasible with a manual approach. More-
over, automated design can quickly generate a complete char-
acterization of the tradeoffs of cost, availability, and perfor-
mance for the infrastructure design.
In this paper, we present Aved, a proof of concept auto-
mated system design engine which is a ﬁrst step toward this
goal. Aved currently targets the automated design of clustered
systems to support multi-tier enterprise services (e.g., an In-
ternet service with web, application, and database tiers) and to
support parallel compute-intensive applications (e.g., scien-
tiﬁc applications). Aved automatically generates designs and
evaluates them inside an execution loop that iterates to ﬁnd a
design that meets availability and performance requirements
at minimum cost. To evaluate generated designs, Aved inter-
faces to an external availability modeling tool, which is used
to predict service uptime. The predictions are predicated on
the use of best practice IT management [11] and thus pro-
vide an upper limit on the availability that can be achieved.
For applications that must recover lost work after component
failures, Aved additionally invokes a model to predict appli-
cation execution time, taking into account re-execution of lost
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
computations.
Aved can improve the design process compared to tra-
ditional manual approaches. In addition, Aved is useful for
emerging utility computing environments [7][13][8][15][3].
In these environments, a user who wishes to deploy an appli-
cation or a service can issue a request to a computing utility,
which in response automatically allocates and conﬁgures ap-
propriate resources from pools of compute, storage, and net-
working resources to create a secure, virtualized computing
environment that realizes the service. A more ambitious goal
for utility computing is to automatically manage the provi-
sioned service throughout its lifetime by dynamically tuning
the design and deployment of the service’s computing infras-
tructure in response to changes in service workload, compo-
nent failures, etc. In this vision, the computing utility would
continuously manage the service infrastructure to ensure that
service availability and performance are at levels that are
adequate for the user. A critical component of such a self-
managing computing utility is an automated design engine,
as exempliﬁed by Aved, which would design a service’s com-
puting infrastructure and dynamically re-design it whenever
necessary throughout the service’s lifetime.
The key challenge in creating a design engine such as Aved
is to devise practical techniques for modeling and searching
the design space. The design space model used by Aved must
describe application characteristics and the various infrastruc-
ture choices. The model must represent the impact of different
infrastructure options on system attributes that can affect ser-
vice performance or availability. The infrastructure options
include the components that can be used in a design and
how they can be conﬁgured, composed, and interconnected
to form a complete system. The infrastructure options also
include the various combinations and conﬁgurations of avail-
ability mechanisms that can be used to reduce downtime or
lost computation. For Aved to be practical, the model must
not be so complex that it is infeasible to specify. However,
the system model must also be powerful enough to represent
infrastructure choices for a large and important class of ser-
vices and applications.
The next section presents an overview of Aved. Section 3
describes the design space model used by Aved. Section 4
discusses availability evaluation of designs and how Aved
searches the design space. Section 5 presents examples to il-
lustrate how Aved can be used to generate a complete picture
of the cost-availability and cost-performance tradeoffs for the
infrastructure design. Finally, Section 6 summarizes related
work.
2. Overview of Aved
The overall architecture of Aved is shown in Fig. 1. Aved
takes as input service requirements which specify the desired
performance and availability levels for the service or appli-
Infrastructure Model
Service Model
Service Requirement
Design Generator
final
design
candidate
design
Translator
Translator
AVED
Availability
Evaluation
Engine
availability
estimate
availability
model
final design
Output
Figure 1. Aved architecture
cation, and a design space model which describes the entire
space of choices about the computing infrastructure for the
service/application. The design space model consists of an in-
frastructure model that describes the building blocks that can
be selected and conﬁgured as part of a design, and a service
model that describes how the service or application would be-
have on the building blocks. Whereas a user would provide a
different service model for each new service or application to
be deployed, the infrastructure model could be maintained in
a repository and be used for all services and applications.
Aved searches the design space by generating and evaluat-
ing a series of individual designs. Each design is obtained by
resolving all the design choices that are deﬁned in the design
space model (e.g., selecting the type of resource, the number
of resources, the conﬁguration of availability mechanisms,
etc.). Aved evaluates each design that it generates by feed-
ing an availability model of the design to an external avail-
ability evaluation engine. After searching the design space,
Aved outputs the minimum cost design that satisﬁes the ser-
vice requirements.
The service requirements inputs to Aved are speciﬁed dif-
ferently depending on the type of application. Aved currently
targets the design of cluster systems to support two types of
applications: multi-tier enterprise services and parallel sci-
entiﬁc applications. For enterprise services that are intended
to service client requests indeﬁnitely, the service require-
ments include a performance metric and an availability met-
ric. The performance metric is speciﬁed as the desired min-
imum throughput in service-speciﬁc units such as requests
per second for the expected type of request, and the avail-
ability metric is speciﬁed as the maximum annual downtime
allowed. We use the term annual downtime or simply down-
time to indicate the expected time a service will be unavail-
able in a year. We consider a service to be unavailable when-
ever the number of active resources is not sufﬁcient to meet
the service performance requirement.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
Service
Resource
Component
3.1. Infrastructure Model
Tier 
Tier 
Tier 
Component
Component
Component
Failure
mode
Failure
mode
Failure
mode
Figure 2. Design model
For jobs, such as scientiﬁc applications, that execute a ﬁ-
nite computation, the critical metric for users is the expected
time to complete the job. Therefore, the service requirements
speciﬁed to Aved for these applications include only a per-
formance requirement, expressed as job execution time. Al-
though Aved considers the effects of availability metrics such
as downtime on the time it takes to complete a job success-
fully, the values of these availability metrics are irrelevant to
the end user as long as the job completion time requirement
is satisﬁed.
3. Design Space Model
A high level representation of a design model is shown in
Fig. 2. A service or application is composed of one or more
tiers. A service is considered up if and only if all tiers are up;
otherwise the service is considered down. Each tier is com-
posed of a set of resources, which must be selected by Aved.
A resource is the basic unit of allocation of infrastructure ele-
ments to a service or application. Currently, we assume all re-
sources within a tier are identical, but different tiers can use
different types of resources. During operation, a resource can
be in one of two operational modes: active or spare mode.
A resource is active if it is being used to support the service
workload, and is in spare mode if it is set aside to replace an
active resource upon its failure. A resource consists of a set of
components. A component is an element that can fail and thus
is the basic unit of fault management. A resource fails if any
of its components fails. Components can correspond to hard-
ware elements (e.g., an IA-32 compute node) or software ele-
ments (e.g., an operating system, or an application software).
Each component can have multiple failure modes which indi-
cate different ways in which a component can fail. For exam-
ple, a hardware element can experience a permanent failure
that requires component repair or replacement, or it can suf-
fer a temporary failure that can be ﬁxed by simply resetting
the component.
The design space model used by Aved must represent the
different choices to select designs. Sections 3.1 and 3.2 ex-
plain how these choices are represented in the infrastructure
and service models used by Aved.
The infrastructure model describes availability and cost at-
tributes of the possible building blocks of designs. It describes
various types of components, their failure modes, availabil-
ity mechanisms and their conﬁguration options and impacts,
and the composition of components into resources. The in-
frastructure model is speciﬁed as a structured list of attribute-
value pairs. An example infrastructure model speciﬁcation is
shown in Fig. 3.
3.1.1. Components To properly balance modeling preci-
sion against speciﬁcation simplicity, we limit the granularity
of component description. For example, a computer’s hard-
ware is modeled as a single component, but low-level details
such as the number of redundant fans in the computer are not
modeled explicitly. The speciﬁcation of a component type de-
scribes its failure modes, the component’s cost, and option-
ally the maximum number of instances of the component type
that can be used in a design. Each failure mode is described by
its Mean Time Between Failures (MTBF), the time required
to detect the failure of this type, and the Mean Time To Repair
(MTTR) the component after the failure is detected. Applica-
tion software component types optionally have an attribute
loss window that represents the maximum amount of compu-
tation that may have to be re-executed to regenerate lost re-
sults or application state upon each failure event. For applica-
tions of ﬁnite duration, the loss window size critically affects
the expected job completion time. In the worst case, the loss
window equals the total job, but it may also be a fraction of
the job, if the job has well deﬁned points at which it saves in-
termediate results1. A component has a cost attribute which
includes the component’s annual operational cost (energy, an-
nual software license, etc.) and the initial (capital) cost of the
component annualized by dividing by its useful lifetime in
years. A component instance in a design can be conﬁgured in
one of two operational modes: inactive (powered-off) or ac-
tive. All components of an active resource must be in active
mode, but spare resources can have some or all resources in
inactive mode. The model allows deﬁning a component’s cost
as a function of its operational mode to model cases where,
for example, electricity costs are incurred only when a hard-
ware component is powered on, or where inactive mode soft-
ware components are free of license costs. By using inactive
components in spare resources, the infrastructure cost can be
reduced, but the failover time is usually increased due to the
time required to activate the components.
3.1.2. Availability Mechanisms Availability mecha-
nisms are modeled as conﬁgurable operators that spec-
ify or modify the values of other attributes of the design
1
loss window can be deﬁned either in units of application work or in units
of time. If necessary, Aved will convert from one unit to the other using
the performance model of the application.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 