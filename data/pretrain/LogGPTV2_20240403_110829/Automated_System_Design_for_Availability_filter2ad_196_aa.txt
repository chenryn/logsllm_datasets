# Automated System Design for Availability

## Authors
- G. (John) Janakiraman
- Jose Renato Santos
- Yoshio Turner

**Hewlett-Packard Laboratories**
- {john.janakiraman, joserenato.santos, yoshio.turner}@hp.com

## Abstract
Large-scale systems frequently experience failures that can lead to unacceptably high service downtime or extended application execution times. To meet performance and availability requirements, users must perform a complex design task, including the selection and configuration of hardware and software components, as well as mechanisms for handling failures. We propose automating this design process to relieve users of this burden and generate cost-effective solutions from high-level application requirements. In this paper, we introduce Aved, a proof-of-concept design automation engine. We describe how Aved represents infrastructure choices, application models, and user requirements to automate the design space search and evaluate design alternatives. We also provide examples illustrating how Aved can generate a comprehensive view of the cost-availability and cost-performance tradeoffs in infrastructure design.

## 1. Introduction
The computing infrastructure supporting a service or application must be carefully designed to meet performance and availability requirements. In large-scale systems, these requirements must be met despite frequent hardware and software component failures. For enterprise services, such failures can result in unacceptably high levels of service unavailability. For applications, component failures can lead to lost computation, necessitating re-execution and potentially causing unacceptably long application execution times.

To meet service availability and performance requirements, a complex design task is required to select and configure hardware and software components, and to implement failure-handling mechanisms. The design space is large and multidimensional, encompassing choices such as hardware components, software configurations (e.g., state checkpointing intervals), redundancy (active, standby, or cold sparing), network path redundancy, and software rejuvenation techniques. Each choice presents a different tradeoff among availability, performance, and cost. The goal is to find a solution in this multidimensional design space that provides the best cost-benefit tradeoff to the user. This tradeoff can be modeled using a utility function of cost, performance, and availability. In a simple case, the problem can be reduced to finding a minimum-cost solution that meets the user’s specified availability and performance goals.

Currently, users explore the design space by leveraging their expertise and experience to manually generate system design alternatives. They use availability modeling tools and databases of component failure rates and repair times to predict service downtime. We believe that users should be relieved of the burden of low-level infrastructure design and configuration. Instead, the design process should be automated, allowing users to focus on service and application logic. An automated system design engine should require users to specify only high-level application requirements, and the engine should automatically generate cost-effective solutions that satisfy these requirements. Automated design can generate optimal designs more rapidly than human users, cover a wider range of design alternatives, and quickly characterize the tradeoffs between cost, availability, and performance.

In this paper, we present Aved, a proof-of-concept automated system design engine. Aved targets the automated design of clustered systems to support multi-tier enterprise services (e.g., an Internet service with web, application, and database tiers) and parallel compute-intensive applications (e.g., scientific applications). Aved automatically generates and evaluates designs in an iterative loop to find a design that meets availability and performance requirements at minimum cost. It interfaces with an external availability modeling tool to predict service uptime, assuming best practice IT management. For applications that must recover lost work after component failures, Aved also predicts application execution time, accounting for re-execution of lost computations.

Aved improves the design process compared to traditional manual approaches and is useful in emerging utility computing environments. In these environments, a user who wishes to deploy an application or service can request a computing utility, which automatically allocates and configures appropriate resources from pools of compute, storage, and networking resources to create a secure, virtualized computing environment. A more ambitious goal for utility computing is to dynamically manage the provisioned service throughout its lifetime, tuning the design and deployment of the service’s computing infrastructure in response to changes in workload, component failures, etc. A critical component of such a self-managing computing utility is an automated design engine like Aved, which would design and re-design the service’s computing infrastructure as needed.

The key challenge in creating a design engine like Aved is to develop practical techniques for modeling and searching the design space. The design space model used by Aved must describe application characteristics and various infrastructure choices, representing the impact of different infrastructure options on system attributes that affect service performance or availability. The model must be neither too complex to specify nor too simplistic to represent a wide range of services and applications.

## 2. Overview of Aved
The overall architecture of Aved is shown in Figure 1. Aved takes as input service requirements specifying the desired performance and availability levels for the service or application, and a design space model describing the entire space of choices for the computing infrastructure. The design space model consists of an infrastructure model, which describes the building blocks that can be selected and configured, and a service model, which describes how the service or application behaves on these building blocks. While the service model is specific to each new service or application, the infrastructure model can be maintained in a repository and used for all services and applications.

Aved searches the design space by generating and evaluating a series of individual designs. Each design is obtained by resolving all the design choices defined in the design space model (e.g., selecting the type of resource, the number of resources, the configuration of availability mechanisms, etc.). Aved evaluates each generated design by feeding an availability model of the design to an external availability evaluation engine. After searching the design space, Aved outputs the minimum-cost design that satisfies the service requirements.

The service requirements inputs to Aved are specified differently depending on the type of application. Aved currently targets the design of cluster systems to support two types of applications: multi-tier enterprise services and parallel scientific applications. For enterprise services, the service requirements include a performance metric (specified as the desired minimum throughput in service-specific units such as requests per second) and an availability metric (specified as the maximum annual downtime allowed). For jobs, such as scientific applications, the critical metric is the expected time to complete the job. Therefore, the service requirements specified to Aved for these applications include only a performance requirement, expressed as job execution time. Although Aved considers the effects of availability metrics on job completion time, the values of these metrics are irrelevant to the end user as long as the job completion time requirement is satisfied.

## 3. Design Space Model
A high-level representation of a design model is shown in Figure 2. A service or application is composed of one or more tiers. A service is considered up if and only if all tiers are up; otherwise, the service is down. Each tier is composed of a set of resources, which must be selected by Aved. A resource is the basic unit of allocation of infrastructure elements to a service or application. Currently, we assume all resources within a tier are identical, but different tiers can use different types of resources. During operation, a resource can be in one of two operational modes: active or spare mode. A resource is active if it is being used to support the service workload, and is in spare mode if it is set aside to replace an active resource upon its failure. A resource consists of a set of components. A component is an element that can fail and is the basic unit of fault management. A resource fails if any of its components fail. Components can correspond to hardware elements (e.g., an IA-32 compute node) or software elements (e.g., an operating system or application software). Each component can have multiple failure modes, indicating different ways in which a component can fail. For example, a hardware element can experience a permanent failure requiring repair or replacement, or a temporary failure that can be fixed by resetting the component.

The design space model used by Aved must represent the different choices for selecting designs. Sections 3.1 and 3.2 explain how these choices are represented in the infrastructure and service models used by Aved.

### 3.1. Infrastructure Model
The infrastructure model describes the availability and cost attributes of the possible building blocks of designs. It includes various types of components, their failure modes, availability mechanisms and their configuration options and impacts, and the composition of components into resources. The infrastructure model is specified as a structured list of attribute-value pairs. An example infrastructure model specification is shown in Figure 3.

#### 3.1.1. Components
To balance modeling precision against specification simplicity, we limit the granularity of component description. For example, a computer's hardware is modeled as a single component, but low-level details such as the number of redundant fans are not explicitly modeled. The specification of a component type describes its failure modes, cost, and optionally the maximum number of instances of the component type that can be used in a design. Each failure mode is described by its Mean Time Between Failures (MTBF), the time required to detect the failure, and the Mean Time To Repair (MTTR) the component after the failure is detected. Application software component types may have an attribute called "loss window," which represents the maximum amount of computation that may need to be re-executed to regenerate lost results or application state upon each failure event. For finite-duration applications, the loss window size critically affects the expected job completion time. In the worst case, the loss window equals the total job, but it may also be a fraction of the job if the job has well-defined points at which it saves intermediate results. A component has a cost attribute that includes the component's annual operational cost (energy, annual software license, etc.) and the initial (capital) cost of the component, annualized by dividing by its useful lifetime in years. A component instance in a design can be configured in one of two operational modes: inactive (powered-off) or active. All components of an active resource must be in active mode, but spare resources can have some or all components in inactive mode. The model allows defining a component's cost as a function of its operational mode to model cases where, for example, electricity costs are incurred only when a hardware component is powered on, or where inactive mode software components are free of license costs. By using inactive components in spare resources, the infrastructure cost can be reduced, but the failover time is usually increased due to the time required to activate the components.

#### 3.1.2. Availability Mechanisms
Availability mechanisms are modeled as configurable operators that specify or modify the values of other attributes of the design. These mechanisms can include redundancy, state checkpointing, and software rejuvenation. The model allows for the configuration of these mechanisms and the representation of their impact on the design's availability and cost.

## 4. Availability Evaluation and Design Space Search
Aved evaluates the availability of generated designs by interfacing with an external availability modeling tool. This tool predicts service uptime based on the use of best practice IT management, providing an upper limit on the achievable availability. For applications that must recover lost work after component failures, Aved also predicts application execution time, taking into account the re-execution of lost computations.

Aved searches the design space by generating and evaluating a series of individual designs. The search process iterates until a design is found that meets the specified performance and availability requirements at the minimum cost. The availability evaluation and design space search are integrated into a feedback loop, allowing Aved to refine and optimize the design iteratively.

## 5. Examples
We provide examples to illustrate how Aved can generate a complete picture of the cost-availability and cost-performance tradeoffs in infrastructure design. These examples demonstrate the effectiveness of Aved in finding optimal designs and characterizing the tradeoffs between different design alternatives.

## 6. Related Work
This section summarizes related work in the field of automated system design and availability modeling. We discuss existing approaches and highlight the unique contributions of Aved in addressing the challenges of designing large-scale, highly available systems.

---

**Figure 1. Aved Architecture**

**Figure 2. Design Model**

**Figure 3. Example Infrastructure Model Specification**

---

**Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN'04)**
- **0-7695-2052-9/04 $ 20.00 © 2004 IEEE**
- **Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 12:29:53 UTC from IEEE Xplore. Restrictions apply.**