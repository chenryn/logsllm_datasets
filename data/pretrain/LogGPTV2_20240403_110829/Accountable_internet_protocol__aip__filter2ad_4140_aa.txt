title:Accountable internet protocol (aip)
author:David G. Andersen and
Hari Balakrishnan and
Nick Feamster and
Teemu Koponen and
Daekyeong Moon and
Scott Shenker
Accountable Internet Protocol (AIP)
David G. Andersen1, Hari Balakrishnan2, Nick Feamster3,
Teemu Koponen4, Daekyeong Moon5, and Scott Shenker5
1 Carnegie Mellon University, 2 MIT, 3 Georgia Tech, 4 ICSI & HIIT, 5 University of California, Berkeley
ABSTRACT
This paper presents AIP (Accountable Internet Protocol), a network
architecture that provides accountability as a ﬁrst-order property.
AIP uses a hierarchy of self-certifying addresses, in which each
component is derived from the public key of the corresponding
entity. We discuss how AIP enables simple solutions to source
spooﬁng, denial-of-service, route hijacking, and route forgery. We
also discuss how AIP’s design meets the challenges of scaling, key
management, and trafﬁc engineering.
Categories and Subject Descriptors
C.2.6 [Internetworking]; C.2.1 [Computer-Communication
Networks]: Network Architecture and Design
General Terms
Design, Security
Keywords
Internet architecture, accountability, address, security, scalability
1 Introduction
We begin by belaboring, with a short list of examples, the trite but
true observation that the Internet is rife with vulnerabilities at the IP
layer. As amply demonstrated by recent events [7, 27, 37], even a
single misconﬁgured router can wreak widespread havoc on packet
delivery. Hijacked routes are routinely used to send untraceable
spam [32]. Denial-of-service attacks are so commonplace that they
hardly make the news any more. Malicious or compromised hosts
spoof their source addresses with impunity, because there is little
chance of their being detected.
There is no shortage of proposed ﬁxes to these well-known prob-
lems. These solutions, however, often come with one or more of the
following problematic requirements:
• Complicated mechanisms: e.g., the “capabilities” approach
to denial-of-service involves fairly intricate mechanisms that
fundamentally change the free-access model of the Internet.
• External sources of trust: e.g., S-BGP [19] and similar ap-
proaches to BGP security require a trusted certiﬁcate authority
and a trusted address registry.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’08, August 17–22, 2008, Seattle, Washington, USA.
Copyright 2008 ACM 978-1-60558-175-0/08/08 . . . $5.00.
• Operator vigilance: e.g., using ﬁltering to prevent spooﬁng
requires network operators to keep ﬁlters properly conﬁgured.
The fact that addressing core vulnerabilities requires signiﬁcant
additional mechanism, external support, or both, suggests that per-
haps we are trying to build castles on quicksand. That is, the problem
lies not with these proposals in themselves, which represent the best
our ﬁeld has to offer, but with the foundation upon which they were
built. In this paper we ask: what changes to the architecture would
provide a ﬁrmer foundation for IP-layer security?
We believe that many of the vulnerabilities listed above are due
to the lack of accountability: the Internet architecture has no fun-
damental ability to associate an action with the responsible entity.
Real-world security depends on accountability (imagine, if you will,
a world where all actions could be taken anonymously), and we
think the same applies to the Internet. We thus propose the Account-
able Internet Protocol (AIP) as a replacement for the current IP. Our
proposal retains the simplicity of the current Internet; in fact, our
addressing structure (two or more levels of ﬂat addressing) is much
closer to the Internet’s original incarnation than today’s CIDR-based
reliance on aggregation. Where our proposal differs from both the
current and past Internet is our use of self-certifying addresses for
both domains and hosts. This approach, which we ﬁrst proposed in
a position paper [2], allows hosts and domains to prove they have
the address they claim to have without relying on any global trusted
authority. We present the basic AIP design in Section 2. In Section
3, we show how this foundation enables us to deal with the prob-
lems of source spooﬁng, route spooﬁng, and denial-of-service (DoS)
without extensive additional mechanisms, external sources of trust,
or extreme operator vigilance.
The AIP approach is not without its challenges. Signiﬁcant con-
cern has been expressed in the IRTF and elsewhere about the scala-
bility of the current addressing structure [28]. AIP appears to make
the problem worse, in that its reliance on ﬂat addresses makes CIDR-
like aggregation impossible. In Section 4 we argue that AIP poses
no threat to the long-term scalability of the Internet. It may be true
that AIP could not be deployed on the current router infrastructure,
but here we are more concerned with long-term technology trends
than short-term infrastructure realities. We realize that our carefree
attitude towards scaling is likely to be controversial, but we hope it
represents the beginning of a dialogue on this matter.
Any design that relies heavily on public key cryptography must
provide mechanisms to protect against, detect, and deal with key
compromise. It turns out that the most subtle issue here is how hosts
and domains can detect the presence of an imposter, and we describe
this problem and our solution in Section 5.
Finally, any change to addressing must be amenable to trafﬁc
engineering. We describe in Section 6 how AIP provides operators
(of both transit ISPs and stub networks alike) sufﬁcient tools to
accomplish their trafﬁc engineering goals.
2 AIP Design
This section describes the salient features of AIP, starting with the
structure of AIP addresses. We then discuss how AIP interacts with
the rest of the internetwork architecture, including forwarding and
routing, end-to-end (TCP) connections, and DNS.
2.1 Basic Structure and Function
AIP eschews the use of preﬁxes and CIDR-style addresses, returning
to a hierarchical addressing format with two or more components.
AIP may thus be viewed as a simple generalization of the Internet’s
original two-level hierarchical addressing structure where each ad-
dress had a network and a host component and routers inspected only
the (ﬂat) network portion until the packet reached the destination
network.
Unfortunately, addressing has become more complicated with
the advent of autonomous systems (used in BGP routing) and class-
less routing (CIDR), with no clean mechanism to map autonomous
systems to preﬁxes. To redress this shortcoming, AIP removes the
distinction between an autonomous system identiﬁer and the set of
routes (preﬁxes) it can advertise, using the same handle to name
both.
The AIP design assumes there are some number of independently
administered networks (as is the case today), operated by distinct
administrative units. Each administrative unit decomposes its net-
work into one or more accountability domains (ADs), each with a
unique identiﬁer. Each host is also assigned a globally unique end-
point identiﬁer (EID). Analogous to the original Internet addressing
structure, the AIP address of a host currently homed in some AD
would have an address of the form AD:EID.
To handle the case of a host that attaches multiple times to the
same AD (e.g., with both a wireless and a wired Ethernet connec-
tion), the ﬁnal eight bits of the EID are interface bits that give each
interface a unique identiﬁer: EIDif1, EIDif2, etc.
Each AD is visible in the wide-area routing protocol, so one might
think of each AD as corresponding to a BGP preﬁx in the current
Internet. Some ADs might be quite large, preferring to organize
themselves hierarchically internally. To support this requirement,
AIP supports multiple levels in the hierarchy, so in general an AIP
address would have the form AD1:AD2:...:ADk:EID.
Eliminating structure in the AD and EID allows us to make them
self-certifying [26]. The notion of a self-certifying name is straight-
forward: the name of an object is the public key (or, for convenience,
the hash of the public key) that corresponds to that object. In AIP,
the AD is the hash of the public key of the domain, while the EID
is the hash of the public key of the corresponding host. Although
higher layers have used self-certifying naming (e.g., hosts, data, and
services) [26, 43], and HIP [29] uses such addresses in a shim layer
between the IP and transport layer, AIP is the ﬁrst architecture to
our knowledge that uses fully self-certifying addresses at the in-
ternetwork layer itself. One result of self-certiﬁcation is that each
hierarchical component in an AIP address is 160 bits long (Figure 1).
Our use of self-certifying addresses follows from a simple line
of reasoning. Accountability requires a veriﬁable identity, and in
a network setting the only practical method of veriﬁcation uses
cryptographic signatures. To use such signatures, identiﬁers must
be bound to their public key. Security, however, should not rely on
extensive manual conﬁguration or globally trusted authorities, so the
keys must be intrinsic to the identiﬁers. Thus, we believe that self-
Figure 1: The structure of an AIP address. For AD addresses,
the interface bits are set to zero.
Figure 2: The AIP packet header.
certiﬁcation is an indispensable aspect of providing accountability
at the network layer.
Existing schemes (e.g., S-BGP [19]) implement this binding be-
tween identiﬁers and their public keys using registries that map iden-
tiﬁers to their public keys (a PKI). Unfortunately, these registries
must be both up-to-date (via manual conﬁguration) and globally
trusted. Unfortunately, experience with Internet address registries
suggests that one cannot rely on manual conﬁguration to keep reg-
istries accurate and up-to-date [13, 16, 36]. Self-certifying address-
ing frees security mechanisms from undesirable trust relationships
or manual conﬁguration. Existing IP and transport security mecha-
nisms (e.g., IPsec [18]) could also use AIP’s self-certifying address
structure to securely establish the identity of a remote host without
relying on an external infrastructure.
Because AIP uses cryptographic primitives whose strength may
degrade over time, each AIP address (Figure 1) contains a version
number that indicates what signature scheme incarnation was used
to generate the address. In Section 5, we discuss how this ﬁeld
may be used to accommodate the gradual evolution of the digital
signatures used in AIP to cope with the (inevitable) weakening of
earlier schemes.
2.2 Forwarding and Routing
Packets contain the destination’s AD:EID, as shown in Figure 2.
Until the packet reaches the destination AD, routers use only the
destination AD to forward the packet. Upon reaching the destination
AD, routers forward the packet using only its EID.
Forwarding to a destination that has more than one AD proceeds
identically to reach the ﬁrst AD in the destination AD stack: interme-
diate domains examine only the next hop destination AD. The desti-
nation AD’s border router examines the additional destination ADs
ﬁelds and replaces the next hop destination AD with that pointed to
in the destination ADs stack by the next-dest ﬁeld, and increments
the next-dest pointer. Most routers therefore examine only the dest
Crypto vers(8)Public key hash(144)Interface(8)Vers(4)... standard IP headers ......random pkt id(32)#dests(4)next-dest (4)#srcs(4)Source EID(160 bits)Source AD (top-level) (160bits)Dest EID(160 bits)Dest AD (next hop)(160 bits)Dest AD stack(N*160 bits)Source AD stack(M*160 bits)AD ﬁeld (placing the burden of hierarchical routing only on those
domains with an internal hierarchy), but the entire destination stack
is preserved for the recipient to examine.
Interdomain routing: In AIP, interdomain routing occurs in much
the same way that it does today (and can beneﬁt from any future
improvements to BGP or use a different inter-domain routing proto-
col). Today’s Internet uses preﬁxes as the routing objects; in contrast,
AIP’s routing objects are AD identiﬁers, so interdomain routing oc-
curs entirely at the AD granularity. BGP advertisements are for the
ADs. Routers in an AD maintain routing information on a per-AD
basis; i.e., an AIP routing table maps AD numbers to “next hop”
locations but does not maintain any information about EIDs in other
ADs. Each router also participates in an interior routing protocol
(e.g., OSPF) to maintain routing information to the EIDs within the
AD. We expect the internal routing protocols to handle at most a
few tens of thousands of ﬂat entries, a capability well in line with
modern switches.
Although routing is done on a per-AD basis, path descriptions
might be done on a larger granularity. AIP continues to support
the notion of an autonomous system (AS) because an organization
may not wish to advertise its internal AD structure through its BGP
routes for various reasons, including: (1) describing paths on such a
ﬁne granularity might increase routing churn; (2) peering with an
AS (e.g., AT&T) is simpler than peering with ﬁve sub-ASes (AT&T-
chicago, AT&T-nyc, etc.); (3) conﬁguring policy may be easier at
the granularity of an AS; etc. The path descriptors in BGP could use
a separate set of self-certifying identiﬁers that would identify the
organizational entity (such as an AS) but not the smaller AD. These
path descriptors are also 160-bit self-certifying AIP addresses, but
they have no EIDs contained within them as an AD would—they are
used purely for routing to the destination AD.
2.3 DNS and Mobility
The domain name system would include an AIP-record containing
the AIP address(es) for a hostname. A host might have multiple
addresses if it had direct upstream connectivity to multiple domains
ADi; the host would then have addresses ADi:EID in its AIP-record
for each domain. If a host had multiple interfaces, an entry would
appear as AIP addresses returned in the AIP-record.1
Mobility support is based on the self-certifying endpoint identiﬁer
(EID) part of the addresses and the use of an end-to-end mobility
protocol. Transport protocols on top of the AIP layer bind to the
source and destination EIDs, which remain unchanged while hosts
roam from one AD to another, even though the AD part of the ad-
dresses changes. Thus, to keep trafﬁc ﬂowing it is sufﬁcient for a
roaming host to instruct its remote hosts to migrate their trafﬁc from
an old address to the new one. For that purpose, AIP adopts the
mechanisms of TCP Migrate [38] and HIP [29].
For initial rendezvous, mobile AIP hosts maintain their current
location (AD) in DNS. AIP’s self-certifying structure again simpliﬁes
handling dynamic DNS: the DNS server can be conﬁgured to allow
an EID to update an existing host → AD:EID binding that currently
points to that EID. The server and DNS operators do not need to
maintain a separate update key to control dynamic updates. The
same keying advantages apply to a faster-moving host that wished
to use a “home agent” to relay trafﬁc to it.
1To achieve the full beneﬁts of AIP, the DNS records would best be served using a
secure DNS variant to prevent an attacker from directing clients to alternate destinations
by modifying DNS responses. Most of AIP’s other advantages, including anti-spooﬁng,
secure BGP, and shut-off techniques, do not depend at all on DNS.
3 Uses of Accountability
Given AIP’s basic design, we now describe how this accountability
foundation can be used to provide better network-layer security.
3.1 Source Accountability: Detecting & Preventing
Source Spooﬁng
Source address spooﬁng refers to the problem of a host using a source
address that has been assigned to another host. If a source uses a
spoofed address at which it cannot receive packets, then higher-layer
protocols that use a three-way handshake before instantiating any
state or expending computation will not be signiﬁcantly affected.
Not all higher-layer protocols use such a mechanism, so detecting
this situation will be useful. A harder-to-detect form of spooﬁng
occurs when a malicious or compromised host uses a source address
at which it can to receive packets. Such attacks have been observed
in the Internet [39] and are used, e.g., to send spam [33]. These
attacks can arise because of spurious route propagation or because
the spooﬁng host is on a shared network (e.g., wireless). We are
interested in detecting both forms of spooﬁng. We are also interested
in limiting the damage that can be caused by address minting, in