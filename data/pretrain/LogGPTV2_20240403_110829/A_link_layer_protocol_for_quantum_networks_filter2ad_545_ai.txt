49.13 (1.29)
4.16 (0.26)
RL_CK (s)
55.58 (0.14)
33.88 (0.66)
57.24 (1.00)
2.65 (0.35)
60.59 (0.42)
114.89 (2.57)
17.58 (0.30)
9.04 (0.19)
30.86 (1.94)
3.34 (0.43)
11.46 (0.27)
0.73 (0.02)
51.34 (2.33)
35.91 (1.05)
38.90 (3.65)
4.51 (0.62)
85.99 (3.70)
59.92 (4.15)
21.90 (0.72)
55.94 (1.93)
102.23 (4.17)
5.18 (0.70)
50.85 (1.38)
8.22 (0.58)
RL_MD (s)
55.11 (2.83)
264.28 (35.75)
62.55 (2.43)
129.30 (3.51)
61.80 (2.76)
299.28 (37.25)
23.04 (3.21)
76.02 (12.51)
39.33 (4.09)
204.78 (9.54)
12.38 (0.26)
61.19 (0.97)
43.41 (5.79)
238.09 (21.00)
37.97 (2.67)
47.64 (2.75)
85.98 (5.24)
236.03 (21.62)
21.27 (1.63)
277.08 (19.97)
104.88 (2.69)
38.91 (4.89)
47.39 (0.33)
34.39 (0.61)
Table 5: Relative difference (Rel. Diff.) for the metrics: fidelity (Fid.), throughput (Throughp.) scaled latency
(Laten.) and number of generated entangled pairs (Nr. pairs), between two identical scenarios except that the
probability of losing a classical message (ploss) is zero for one and between 10−10 and 10−4 for the other. The relative
difference is maximized over three simulation runs (281 - 3973 s simulated time and 70 h wall time each) with
requests of priority either NL, CK or MD (f = 0.99, kmax = 3), with equal ploss.
ploss Max Rel. Diff. Fid. Max Rel. Diff. Throughp. Max Rel. Diff. Laten. Max Rel. Diff. Nr pairs
10−4
10−5
10−6
10−7
10−8
10−9
10−10
0.026
0.008
0.047
0.020
0.020
0.021
0.077
0.005
0.004
0.016
0.040
0.007
0.004
0.018
0.027
0.012
0.037
0.026
0.023
0.026
0.075
0.629
0.469
0.332
0.576
0.623
0.338
0.742
33
Dahlberg, Skrzypczyk, et al.
D UNDER THE HOOD
We now provide some more details on the simulation, numerical methods and the underlying NV platform. We remark that
physical models for different parts of the NV platform are well established and validated [12]. The validation performed here is
thus only about how the combined system performing entanglement generation matched with our simulation.
D.1 The simulated network
To understand our simulation we perform a full implementation of the MHP and EGP, running on simulated quantum hardware.
To achieve this, we start by defining basic components in NetSquid, which, inspired by NS-3, is entirely modular and can be
used to construct complex simulation scenarios by combining component elements. The components in the simulation are
as follows, and our simulation could easily be configured to examine the performance of our protocol on other underlying
hardware platforms such as Ion Traps.
• A QuantumProcessingDevice, which is a general component we defined in NetSquid. Abstractly, such a QuantumPro-
cessingDevice is described by the following:
(1) A number of communication and memory qubits. Each such qubit is associated with a noise-model that describes how
quantum information decoheres over time when kept in the memory itself. Concrete parameters for the NV platform
are given in Section D.2.
(2) Possible one or two-qubit quantum gates to be performed on each (pair of) qubit(s), the time required to execute the
gate, as well as a noise-model associated with each such gate that may differ from qubit to qubit. For the NV platform
we will only need to consider the gates given in Section D.2.2.
(3) With each communication qubit we associate a trigger that allows the generation of entanglement between this
communication qubit and a traveling qubit (a photon). Such an operation only succeeds with some probability of
success, requires a certain amount of time, and can also be noisy. For the NV platform, we explain this in Section D.4.
(4) Readout - i.e. measurement of a qubit. This takes a certain amount of time, and does again carry a noise-model. For
• A FiberConnection, which is a general NetSquid component that allows us to simulate optical fibers, including photon
• A HeraldingStation, which automatically measures incoming photons in a certain time interval. This process is again
• ClassicalConnection, which we use to transmit classical messages allowing us to simulate, for example, losses on the
• Node, which includes a QuantumProcessingDevice, and enjoys fiber connections with the HeraldingStation or other
nodes. Each Node can run programs in the same way that they could be run on e.g. a computer or microcontroller,
allowing these Programs to make use of - for example - the QuantumProcessing Device. This allows us to perform a full
implementation (here in Python) of the MHP and EGP including all subsystems in the same way as the program will
later run on an actual microcontroller (however, in C).
channel. Section D.6.1 explains the model considered here.
subject to several possible errors explained in Section D.5.
NV, we explain this in Section D.3.4.
loss per km.
We briefly review properties of the nitrogen-vacancy (NV) centre in diamond [12] and how they affect the design and
performance of our protocol. We will also highlight how this can be modeled in simulation. Important to the design and
performance of our protocol is how long operations on qubits stored in the NV-center take. Additionally, the coherence time, i.e.
how long a qubit can be stored, has an impact on our protocol. We summarize typical values for the noise-level and execution
time of the allowed operations of a NV-center together with coherence times. These are the values we used in our simulation.
Note however that these values can vary significantly between samples.
D.2 Qubits on the NV Platform
A NV centre is formed by replacing a carbon atom in a diamond lattice with a nitrogen atom and removing a neighboring
carbon (vacancy). This structure traps electrons which together form a spin-1 system. Two of the levels of the collective
spin-1 state can be used as a communication qubit in a quantum network. Around the NV centre there is also a natural
abundance of carbon-13 atoms which interact with the communication qubit (electron spin). The surrounding carbon spins
can be addressed using the communication qubit and can thus be used as memory qubits. We here consider a situation with
only one communication qubit, and one memory qubit.
34
A Link Layer Protocol for Quantum Networks
(Unsquared) fidelity Duration/time Experimentally realized
Electron T1
Electron T ∗
2
Carbon T1
Carbon T ∗
2
Electron single-qubit gate
E-C controlled-√X-gate (E=control)
Carbon Rot-Z-gate
Electron initialization in |0⟩
Carbon initialization in |0⟩
Electron readout
-
-
-
-
1.0
0.992
0.999
0.95
0.95
2.86 ms
1.00 ms
∞
3.5 ms
5 ns
500 µs
20 µs
2 µs
310 µs
3.7 µs
> 1h[3]
1.46 s[3]
> 6m [21]
≈ 10ms [21]
> 0.995 (100 ns) [60]
0.992 (500-1000 µs) fig 2 in [60]
1.0 (20 µs) [93]
0.99 (2 µs) [82]
0.95 (300 µs) [32]
0.95 (|0⟩), 0.995 (|1⟩) (3-10 µs) [53]
0.95 (|0⟩), 0.995 (|1⟩)
Table 6: Gates and coherence times used in simulation. Values used in the simulation corresponding to Lab. We
remark that since these are custom chips, no two are exactly identical. Individual values have since seen signifi-
cant improvements (Experimentally realized), but not been realized simultaneously for producing entanglement
that would allow a direct comparison to simulation. We have thus focused in simulation only what enables a
comparison to data gathered from entanglement generation on hardware.
D.2.1 Noise model - Free evolution of the electronic and nuclear spins. Noise in experimental implementations is described
in terms of T1, T2, T ∗
2 times, where Section A.4 serves to provide intuition on how our quantity of interest - the fidelity to the
maximally entangled target state |Ψ+⟩ - depends on their values. Table 6 lists values used in simulation (reflecting Lab), and
state of the art for the communication qubit (Electron), and memory qubit (Carbon).
D.2.2 Quantum gates.
Procedure and parallelism constraints. Quantum gates can be realized by applying microwave pulses. Of specific interest that
affects the throughput is the duration of such operations given in Table 6. While not absolutely necessary for the understanding
of the simulation, we briefly sketch how operations are performed also on the carbons to illustrate one feature of this system
that is relevant for the performance of our protocols - namely the parallelism of the allowed gate operations. We remark that
operations on the carbon spins are performed using the following pulse sequence
(τ − π − 2τ − π − τ)N/2
,
(21)
where π is a microwave-π-pulse on the electron spin, 2τ is the time between the pulses and N is the total number of pulses.
The target carbon spin can be chosen by picking τ such that it is precisely in resonance with the target carbon spin’s hyperfine
interaction with the electron spin. If the electron spin is in the state |0⟩ (|1⟩) the target carbon spin will rotate around the
X-axis of the Bloch sphere in the positive (negative) direction, with an angle θ which depends on the total number of pulses
N . This means that one can perform quantum gates on the carbon that are controlled by the state of the electron spin. The
effective unitary operation (E=control) on the electron and the target carbon spin is then given as
(cid:18)RX(θ)
0
(cid:19)
0
RX(−θ)
,
(22)
where RX(θ) = exp(iθ/2X) denotes a rotation around the X-axis of an angle θ. Not only does the pulse sequence (21) manipulate
the carbon spin, but it also decouples the electron from its environment, thereby prolonging its coherence time and is thus also
called dynamical decoupling, allowing longer memory lifetimes (Figure 9a). We thus see a limit to the amount of parallelism
when operating on the carbon and the electron spin.
Other quantum gates are however simpler: Since the carbon continuously precess around the Z axis of the Bloch sphere,
rotations around Z (Carbon Rot-Z) are simply done by waiting a correct amount of time. Thus, also controlled rotations around
other axes than X can be performed by correctly interspersed waiting times during the pulse sequence above.
35
method):
where
Unoisy (ρ) = N f
dephas ◦ Uperfect (ρ) ,
Np
dephas : ρ (cid:55)→ f ρ + (1 − f )ZρZ
D.3 Gates and their noise
In this section we collect parameters for noise and delays of gates used in our simulation. Table 6 summarize the possible
gates that can be performed on the electron and carbon spins in the NV system, together with decoherence times. Section D.4
describes how the noise occurring from entanglement generation attempts is modeled.
Here the E-C controlled-X rotates the carbon spin around the X-axis in the positive (negative) direction if the electron is in
the |0⟩ (|1⟩) state. Furthermore, note that there is an asymmetry in reading out the |0⟩-state and the |1⟩-state of the electron.
D.3.1 Modeling noisy operations. Noise in gate operations is modeled by applying noise after a perfect gate (a standard
Dahlberg, Skrzypczyk, et al.
is the dephasing channel in Z and f is the gate fidelity as given in table 6. States are initialized as Np
depol(|0⟩⟨0|), where
Np
depol : ρ (cid:55)→ f ρ +
1 − f
3
[XρX + YρY + ZρZ]
denotes the depolarization channel by.
D.3.2 How the electron spin is initialized. Initialization of the electron spin means setting the state to |0⟩ [82]. Initialization
of the electron spin is done by performing optical pumping, in which light shines onto the electron, thereby bringing its
quantum state in a higher energy level, given it was in |1⟩, after which it falls back to either |0⟩ or |1⟩ with a given probability.
If the electron falls down to the state |0⟩ is will stay there, thus after many repetitions of this process, the electron is with high
confidence in the state |0⟩. For our discussion here, it will be relevant to remark that this operation takes time (Table 6), and
we will need to perform it repeatedly as the first step in producing entanglement.
D.3.3 Moving a qubit to memory. When moving a qubit from the communication qubit to the memory qubit, the memory
qubit needs to already be initialized. Initialization of the carbon is done by effectively swapping the |0⟩ state from the electron
to the carbon and cannot therefore be performed while having an entangled state in the electron. For this reason, initialization
of the carbon (310 µs) needs to be performed before a photon is emitted from the electron during an entanglement generation
attempt. However, it is not necessary to re-initialize the carbon before every entanglement generation attempt but simply
periodically depending on the coherence time. In our simulation we assumed T 1 to be 3500 µs and thus re-initialize the carbon
every 3500 µs (every 350th MHP cycle).
Swapping a state in the electron to the carbon can be done by 2 E-C controlled-√X-gates and single qubit gates (total time
1040 µs) [60].
D.3.4 How a measurement (readout) is performed.
Readout of the communication qubit. First, we are again interested in the time to perform this operation given in Table 6
which will be relevant in the MD use case. Evidently, also a readout can be noisy, where we here remark that the noise is
asymmetric in that the probability of incorrectly obtaining measurement outcome 0 is much lower than incorrectly getting
outcome 1.
Reading out a memory qubit. We again remark that next to timing constraints (Table 6), we have limited parallelism on the
current NV platform, since we need the electron spin to readout the memory qubit. Reading out the nuclear spin is done by
performing the following steps:
(1) initialize the electron spin,
(2) apply an effective controlled NOT operation with the nuclear spin as control (consisting of one E-C controlled-√X-gate
(3) measure (readout) the electron spin.
and single-qubit gates),
The reason why a controlled NOT is sufficient, rather than a full swap, is the following: If the nuclear spin is in state
α |0⟩ + β |1⟩, then after the CNOT, the combined state is α |00⟩EC + β |11⟩EC. The reduced state [76] of the electron is then
|α|2 |0⟩⟨0| + |β|2 |1⟩⟨1|, so measuring in the standard basis yields the same statistics as measuring α |0⟩ + β |1⟩ in the same basis.
36
A Link Layer Protocol for Quantum Networks
(23)
Readout noise. Readout is modeled by performing a POVM measurement with the following Kraus operators (see [76] for
definition)
(cid:18)(cid:112)f0
0
(cid:19)
(cid:112)1 − f1
0
(cid:18)(cid:112)1 − f0
0
(cid:19)
(cid:112)f1
0
M0 =
, M1 =
where f0 (f1) is the readout fidelity of the |0⟩-state (|1⟩) as given in table 6
D.4 Physical Entanglement Generation and Noise
We here consider the single-click scheme of Lab. To understand timing and quality, as well as parameter choices let us give a
high-level overview of the single-click scheme: A microwave pulse is used to prepare the communication qubit in the state
√1 − α |1⟩ (max. 5.5µs for A and B), where |0⟩ is also called the bright state, and α the bright state population. A
√
α |0⟩ +