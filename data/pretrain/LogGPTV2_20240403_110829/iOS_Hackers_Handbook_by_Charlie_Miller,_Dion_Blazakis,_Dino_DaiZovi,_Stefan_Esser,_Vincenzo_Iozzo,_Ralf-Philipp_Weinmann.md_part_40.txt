register int zindex;
register vm_size_t allocsize;
vm_map_t alloc_map = VM_MAP_NULL;
/*
* If size is too large for a zone, then use kmem_alloc.
*/
if (size >= kalloc_max_prerounded) {
...
}
/* compute the size of the block that we will actually allocate */
allocsize = KALLOC_MINSIZE;
zindex = first_k_zone;
while (allocsize free_elements; \
if ((ret) != (type) 0) { \
if (check_freed_element) { \
if (!is_kernel_data_addr(((vm_offset_t *)(ret))[0]) || \
((zone)->elem_size >= (2 * sizeof(vm_offset_t)) && \
((vm_offset_t *)(ret))[((zone)->elem_size/sizeof(vm_offset_t))-1]\
!= ((vm_offset_t *)(ret))[0])) \
panic(“a freed zone element has been modifi ed”); \
if (zfree_clear) { \
unsigned int ii; \
for (ii = sizeof(vm_offset_t) / sizeof(uint32_t); \
ii elem_size/sizeof(uint32_t) \
- sizeof(vm_offset_t) / sizeof(uint32_t); ii++) \
if (((uint32_t *)(ret))[ii] != (uint32_t)0xdeadbeef) \
panic(“a freed zone element has been modifi ed”); \
} \
} \
(zone)->count++; \
(zone)->sum_count++; \
(zone)->free_elements = *((vm_offset_t *)(ret)); \
} \
MACRO_END
The majority of the macro performs checks of the free element and the freelist.
These checks are meant to detect kernel heap corruption, but are conditionally
executed and not activated by default. To activate them, the iOS kernel must be
booted with the special boot arguments –zc and –zp. From the latest source code
of Mac OS X Lion, it seems that Apple was experimenting with activating these
cc0099..iinndddd 229900 44//1166//22001122 55::4477::1100 PPMM
Chapter 9 n Kernel Debugging and Exploitation 291
features by default. For now they are still deactivated, which is most probably
due to performance reasons.
Because there are no activated security checks in an iOS kernel by default and
because the freelist is stored inbound, the exploitation of heap overfl ows within
the iOS kernel is very similar to exploitation on other platforms from many years
ago. By overfl owing the end of an allocated block into an adjacent free block, it is
possible to overwrite and therefore replace the pointer to the next element in the
freelist. When the overwritten free block later becomes the head of the freelist, the
next invocation of zalloc()returns it and makes the overwritten pointer the new
head of the freelist. The next allocation that follows therefore returns an attacker-
supplied pointer. Because this pointer can point anywhere in memory, this can
lead to arbitrary memory overwrites, depending on how the kernel code uses the
returned memory. In the public exploit for the ndrv vulnerability this is used to
overwrite the system call handler 207, which allows arbitrary kernel code execution.
Kernel Heap Feng Shui
Just like in user space heap exploitation, the biggest problem when exploiting
a heap is that it is initially in an unknown state at the time of exploitation. This
is bad, because successfully exploiting a heap overfl ow requires you to control
the position of the overfl owing block in relation to a free block that will be
overwritten. To achieve this, several different techniques have been developed.
Traditionally, heap spraying was used in heap overfl ow exploits to fi ll the heap
with enough blocks, so that the probability of overwriting int eresting blocks
was very high. This was very unreliable and had to be improved. Therefore,
a more sophisticated technique was developed, which allows for far more
r eliable exploits. This technique is now widely known as heap feng shui, and
was discussed in Chapter 7.
Recall that this technique is a simple multi-step process that tries to bring a
heap into an attacker-controlled state. To execute this process within a kernel
exploit, you fi rst need a way to allocate and deallocate memory blocks of arbitrary
sizes from user space. This means you need to scan all the reachable kernel func-
tionality for functions that allow you to allocate and free an attacker-supplied
amount of memory. For the ndrv_setspec() vulnerability you can fi nd these
within the same fi le. The function ndrv_connect() is the handler that is called
when an ndrv socket is connected. It allows you to allocate different amounts
of kernel memory by supplying socket names of different lengths.
static int
ndrv_connect(struct socket *so, struct sockaddr *nam, __unused struct proc *p)
{
struct ndrv_cb *np = sotondrvcb(so);
if (np == 0)
cc0099..iinndddd 229911 44//1166//22001122 55::4477::1100 PPMM
292 Chapter 9 n Kernel Debugging and Exploitation
return EINVAL;
if (np->nd_faddr)
return EISCONN;
/* Allocate memory to store the remote address */
MALLOC(np->nd_faddr, struct sockaddr_ndrv*,
nam->sa_len, M_IFADDR, M_WAITOK);
if (np->nd_faddr == NULL)
return ENOMEM;
bcopy((caddr_t) nam, (caddr_t) np->nd_faddr, nam->sa_len);
soisconnected(so);
return 0;
}
The opposite operation, the deallocation from user space, is reachable by calling
close() on the connected socket, to disconnect it again. This is implemented
in the ndrv_do_disconnect() function:
static int
ndrv_do_disconnect(struct ndrv_cb *np)
{
struct socket * so = np->nd_socket;
#if NDRV_DEBUG
kprintf(“NDRV disconnect: %x\n”, np);
#endif
if (np->nd_faddr)
{
FREE(np->nd_faddr, M_IFADDR);
np->nd_faddr = 0;
}
if (so->so_state & SS_NOFDREF)
ndrv_do_detach(np);
soisdisconnected(so);
return(0);
}
Now that you have established how to allocate and deallocate kernel memory
from user space, you can use this for executing the heap feng shui technique.
This technique assumes that you start with a heap in an unknown state, which
basically means there are a number of allocated blocks and a number of empty
holes of different sizes. Neither the position of the allocated blocks, nor the
number of holes, is known. An exploit based on the heap feng shui technique
then proceeds as follows:
1. Allocate enough memory blocks so that all “holes” get closed. The exact
number of required allocations is usually unknown.
cc0099..iinndddd 229922 44//1166//22001122 55::4477::1100 PPMM
Chapter 9 n Kernel Debugging and Exploitation 293
2. Allocate more memory blocks so that these will all be adjacent to each
other in memory.
3. Free two adjacent memory blocks. The order depends on the freelist
implementation. The next allocation should return the block that comes
fi rst in memory.
4. Trigger a vulnerable kernel function that will allocate the fi rst of the two
blocks and overfl ow into the following free block.
5. Trigger some kernel functionality that allocates the overwritten free block
and makes the overwritten pointer the head of the freelist.
6. Trigger more functionality that will allocate memory, and therefore use
the attacker-supplied pointer instead of a real memory block.
7. Use this arbitrary memory overwrite to overwrite some function pointer,
like an unused handler in the system call table.
8. Trigger the overwritten system call to execute arbitrary code in kernel
space.
Although the fi rst step is based on a guessed amount of allocations, exploits
based on heap feng shui are usually very stable. However, within Mac OS X
and iOS there exists a gift from kernel space that helps to improve on this little
uncertainty.
Detecting the State of the Kernel Heap
Both Mac OS X and iOS come with a very interesting and useful mach trap
called host_zone_info(). This method can be used to query information about
the state of all registered zones from the kernel’s zone allocator. This function
is not limited to the root user and is used, for example, internally by the /usr/
bin/zprint utility that comes preinstalled with Mac OS X. For every zone, it
returns information in the form of a fi lled out zone_info struct:
typedef struct zone_info {
integer_t zi_count; /* Number of elements used now */
vm_size_t zi_cur_size; /* current memory utilization */
vm_size_t zi_max_size; /* how large can this zone grow */
vm_size_t zi_elem_size; /* size of an element */
vm_size_t zi_alloc_size; /* size used for more memory */
integer_t zi_pageable; /* zone pageable? */
integer_t zi_sleepable; /* sleep if empty? */
integer_t zi_exhaustible; /* merely return if empty? */
integer_t zi_collectable; /* garbage collect elements? */
} zone_info_t;
Although the information that can be retrieved through this mach trap
does not leak any internal kernel memory addresses, it still allows a deep
cc0099..iinndddd 229933 44//1166//22001122 55::4477::1100 PPMM
294 Chapter 9 n Kernel Debugging and Exploitation
insight into the state of the kernel zone allocator. The fi eld zi_count contains
the number of currently allocated memory blocks in a zone. Because certain
kernel structures are stored in their own zones, this counter might also allow
you to deduce other information such as the number of running processes
or open fi les.
For a kernel heap overfl ow, it is more interesting to subtract this value from
the maximum number of elements. The maximum number is calculated by
dividing the current size zi_cur_size by the size of a single element zi_elem_
size. This number reveals the number of free blocks in a zone, which is equal
to the number of memory holes that need to be closed for the heap feng shui
technique. In iOS and Mac OS X, it is therefore possible to calculate the exact
number of necessary allocations that close all holes in a zone.
When the maximum number of elements within a zone is exhausted, the zone
is grown by adding a new block of zi_alloc_size bytes. This freshly allocated
memory block is then divided into the separate memory blocks and each is put
into the zone’s freelist. This is important because it reverses the order of alloca-
tion, and also means that only memory blocks that were added within the same
grow operation will be adjacent to each other in the zone.
Exploiting the Kernel Heap Buffer Overfl ow
Now that you know the theory behind kernel heap buffer overfl ow exploitation,
it is time to get back to the example vulnerability and explain its exploitation.
You have to remember that the actual heap-based buffer overfl ow is caused by
repeatedly calling the ndrv_to_ifnet_demux() function until you overfl ow the
actual buffer and exit the loop by triggering one of the internal error conditions:
int
ndrv_to_ifnet_demux(struct ndrv_demux_desc* ndrv,
struct ifnet_demux_desc* ifdemux)
{
bzero(ifdemux, sizeof(*ifdemux));
if (ndrv->type length > 28)
{
return EINVAL;
}
ifdemux->type = ndrv->type;
ifdemux->data = ndrv->data.other;
cc0099..iinndddd 229944 44//1166//22001122 55::4477::1100 PPMM