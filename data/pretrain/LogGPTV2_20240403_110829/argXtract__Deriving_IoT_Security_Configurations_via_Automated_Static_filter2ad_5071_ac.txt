0 x182b4 :
0 x182b6 :
0 x182b8 :
0 x182ba :
0 x182bc :
0 x182be :
0 x182c0 :
0 x182c2 :
0 x182c4 :
0 x182c6 :
0 x182c8 :
0 x182ca :
0 x182cc :
0 x182ce :
0 x182d0 :
0 x182d2 :
0 x182d4 :
bl 0x182b0
{r4 , pc }
r3 , r1
r2 , #0 x20
#0 x182c0
r0 , r1
r2 , #0 x20
r0 , r2
r1 , #0
push r4, lr ;start
cmp
blt
mov
subs
lsrs
movs
pop
mov
lsrs
lsrs
movs
subs
lsls
orrs
mov
pop
nop
ldrb
r3 , r2
r0 , r2
r4 , #0 x20
r2 , r4 , r2
r1 , r2
r0 , r1
r1 , r3
{r4 , pc }
r2 , [ r0 ]
0 x18228 :
...
0x182b0:
0 x182b2 :
0 x182b4 :
0 x182b6 :
0 x182b8 :
0 x182ba :
0 x182bc :
0x182be:
0 x182c0 :
0 x182c2 :
0 x182c4 :
0 x182c6 :
0 x182c8 :
0 x182ca :
0 x182cc :
0 x182ce :
0x182d0:
0 x182d2 :
0 x182d4 :
bl
0 x182b0
r3 , r1
r2 , #0 x20
#0 x182c0
r0 , r1
r2 , #0 x20
r0 , r2
r1 , #0
push r4, lr ;start
cmp
blt
mov
subs
lsrs
movs
pop r4, pc ;end?
mov
lsrs
lsrs
movs
subs
lsls
orrs
mov
pop {r4, pc} ;end?
nop
ldrb
r3 , r2
r0 , r2
r4 , #0 x20
r2 , r4 , r2
r1 , r2
r0 , r1
r2 , [ r0 ]
r1 , r3
(a) Capstone disassembly (starting point).
(b) Identify function blocks using b, bl.
(c) Mark potential exit points.
0 x18228 :
...
0x182b0:
0 x182b2 :
0x182b4:
0 x182b6 :
0 x182b8 :
0 x182ba :
0 x182bc :
0x182be:
0 x182c0 :
0 x182c2 :
0 x182c4 :
0 x182c6 :
0 x182c8 :
0 x182ca :
0 x182cc :
0 x182ce :
0x182d0:
0 x182d2 :
0 x182d4 :
bl
0 x182b0
r3 , r1
r0 , r1
r2 , #0 x20
r2 , #0 x20
r0 , r2
r1 , #0
push r4, lr ;start
cmp
blt #0x182c0
mov
subs
lsrs
movs
pop r4, pc ;end?
mov
lsrs
lsrs
movs
subs
lsls
orrs
mov
pop {r4, pc} ;end?
nop
ldrb
r3 , r2
r0 , r2
r4 , #0 x20
r2 , r4 , r2
r1 , r2
r0 , r1
r2 , [ r0 ]
r1 , r3
0 x18228 :
...
0x182b0:
0 x182b2 :
0 x182b4 :
0 x182b6 :
0 x182b8 :
0 x182ba :
0 x182bc :
0 x182be :
0 x182c0 :
0 x182c2 :
0 x182c4 :
0 x182c6 :
0 x182c8 :
0 x182ca :
0 x182cc :
0 x182ce :
0x182d0:
0 x182d2 :
0 x182d4 :
bl
0 x182b0
{r4 , pc }
r3 , r1
r2 , #0 x20
#0 x182c0
r0 , r1
r2 , #0 x20
r0 , r2
r1 , #0
push r4, lr ;start
cmp
blt
mov
subs
lsrs
movs
pop
mov
lsrs
lsrs
movs
subs
lsls
orrs
mov
pop {r4, pc} ;end?
nop
ldrb
r3 , r2
r0 , r2
r4 , #0 x20
r2 , r4 , r2
r1 , r2
r0 , r1
r2 , [ r0 ]
r1 , r3
0 x18228 :
...
0x182b0:
0 x182b2 :
0 x182b4 :
0 x182b6 :
0 x182b8 :
0 x182ba :
0 x182bc :
0 x182be :
0 x182c0 :
0 x182c2 :
0 x182c4 :
0 x182c6 :
0 x182c8 :
0 x182ca :
0 x182cc :
0 x182ce :
0 x182d0 :
0 x182d2 :
0x182d4:
bl
0 x182b0
{r4 , pc }
r3 , r1
r2 , #0 x20
#0 x182c0
r0 , r1
r2 , #0 x20
r0 , r2
r1 , #0
push r4, lr ;start
cmp
blt
mov
subs
lsrs
movs
pop
mov
lsrs
lsrs
movs
subs
lsls
orrs
mov
pop
nop
ldrb r2, [r0] ;start
r3 , r2
r0 , r2
r4 , #0 x20
r2 , r4 , r2
r1 , r2
r0 , r1
r1 , r3
{r4 , pc }
(d) Identify instructions that skip exits.
(e) Remove skipped exit instructions.
(f) Identify suitable start for next function.
Figure 6: Process used by argXtract for identifying function start addresses.
branch-and-link (bl) and branch (b) instructions are added to this
set, subject to satisfying requirements regarding function prologues.
Next, a function boundary estimation algorithm is executed against
each block of instructions between two addresses in the sorted set.
The algorithm operates on the basic principle that, while a function
may have multiple exit instructions due to conditional executions,
it must have mechanisms for bypassing all but one of the exit points.
This could be via conditional branch instructions or a switch/branch
table (as identified in ยง3.2). argXtract determines all potential exit
points (e.g., data, pop, bx lr, unconditional branches to lower ad-
dresses or outside the current block) within the block of instructions
that is being analysed and marks the exit point that cannot be by-
passed as the ultimate function exit. The next valid instruction is
determined to be the beginning of the next function. This procedure
is performed iteratively to obtain the final list of function blocks.
We further illustrate this algorithm using the code example in
Figure 5 as reference. This reference code contains two functions, de-
noted as functionB and functionC. Of these, functionB is called
via a bl instruction at 0x18228, while functionC is called indirectly
via a blx call (which means the starting address of functionC
cannot be identified without some level of register tracing). Fig-
ure 6a depicts the equivalent assembly code obtained using the
Capstone [62] disassembler against the stripped version of the bi-
nary. To estimate function boundaries for this disassembly, we first
identify high-confidence function starts, including targets of bl in-
structions. This will result in 0x182b0 being identified as a function
start (Figure 6b). This corresponds to functionB. We next apply our
function boundary estimation algorithm to the block of assembly
instructions beginning at 0x182b0 as follows:
(i) Mark out possible exit points, such as pop, load-to-PC and bx
lr instructions, as well as data. As shown in Figure 6c, there are
two potential exit points, at addresses 0x182be and 0x182d0.