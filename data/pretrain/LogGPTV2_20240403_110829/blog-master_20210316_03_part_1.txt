## PostgreSQL 14 preview - libpq驱动 支持pipeline 模式, SQL请求支持异步化通信, 大幅度提升性能, 降低RT   
### 作者      
digoal      
### 日期      
2021-03-16      
### 标签      
PostgreSQL , pipeline , 异步 , libpq   
----      
## 背景      
https://www.postgresql.org/docs/devel/libpq-pipeline-mode.html  
pipeline为异步请求模式, 如果client要与数据库进行一连串的SQL交互, 而且这些SQL的返回结果没有前后依赖, 那么可以使用pipeline模式, 发起SQL1后不需要等SQL1的结果即可发起SQL2的请求.   
在网络延迟很高的场景使用pipeline模式性能提升非常明显, 而SQL有前后依赖的场景不适合pipeline模式.  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=acb7e4eb6b1c614c68a62fb3a6a5bba1af0a2659  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=9aa491abbf07ca8385a429385be8d68517384fdf  
```  
Implement pipeline mode in libpq  
author	Alvaro Herrera 	  
Mon, 15 Mar 2021 21:13:42 +0000 (18:13 -0300)  
committer	Alvaro Herrera 	  
Mon, 15 Mar 2021 21:13:42 +0000 (18:13 -0300)  
commit	acb7e4eb6b1c614c68a62fb3a6a5bba1af0a2659  
tree	ff5dccb6a8372d0373a442841d8df4333a234eaa	tree  
parent	146cb3889c3ccb3fce198fe7464a1296a9e107c3	commit | diff  
Implement pipeline mode in libpq  
Pipeline mode in libpq lets an application avoid the Sync messages in  
the FE/BE protocol that are implicit in the old libpq API after each  
query.  The application can then insert Sync at its leisure with a new  
libpq function PQpipelineSync.  This can lead to substantial reductions  
in query latency.  
Co-authored-by: Craig Ringer   
Co-authored-by: Matthieu Garrigues   
Co-authored-by: Álvaro Herrera   
Reviewed-by: Andres Freund   
Reviewed-by: Aya Iwata   
Reviewed-by: Daniel Vérité   
Reviewed-by: David G. Johnston   
Reviewed-by: Justin Pryzby   
Reviewed-by: Kirk Jamison   
Reviewed-by: Michael Paquier   
Reviewed-by: Nikhil Sontakke   
Reviewed-by: Vaishnavi Prabakaran   
Reviewed-by: Zhihong Yu   
Discussion: https://postgr.es/m/CAMsr+YFUjJytRyV4J-16bEoiZyH=4nj+sQ7JP9ajwz=PI:EMAIL  
Discussion: https://postgr.es/m/CAJkzx4T5E-2cQe3dtv2R78dYFvz+PI:EMAIL  
```  
pgbench 率先支持pipeline使用,   
```  
Add libpq pipeline mode support to pgbench  
author	Alvaro Herrera 	  
Mon, 15 Mar 2021 21:33:03 +0000 (18:33 -0300)  
committer	Alvaro Herrera 	  
Mon, 15 Mar 2021 21:33:03 +0000 (18:33 -0300)  
commit	9aa491abbf07ca8385a429385be8d68517384fdf  
tree	4dbfcf06d0b125fdcb4f3568bdc840f3c2d4c20d	tree  
parent	acb7e4eb6b1c614c68a62fb3a6a5bba1af0a2659	commit | diff  
Add libpq pipeline mode support to pgbench  
New metacommands \startpipeline and \endpipeline allow the user to run  
queries in libpq pipeline mode.  
Author: Daniel Vérité   
Reviewed-by: Álvaro Herrera   
Discussion: https://postgr.es/m/PI:EMAIL  
```  
```  
+       
+      \gset and \aset cannot be used in  
+      pipeline mode, since the query results are not yet available by the time  
+      the commands would need them.  
+       
+  
       The following example puts the final account balance from the first query  
       into variable abalance, and fills variables  
@@ -1270,6 +1276,22 @@ SELECT 4 AS four \; SELECT 5 AS five \aset  
+  
+     
+    \startpipeline  
+    \endpipeline  
+  
+      
+        
+        These commands delimit the start and end of a pipeline of SQL  
+        statements.  In pipeline mode, statements are sent to the server  
+        without waiting for the results of previous statements.  See  
+         for more details.  
+        Pipeline mode requires the use of extended query protocol.  
+       
+      
+     
```  
pgbench的pipeline使用方法;  
```  
\startpipeline  
-- 把多条SQL放这, 不需要等SQL结果返回即可连续发射  
-- sql1  
-- sql2  
-- sql3  
...  
\endpipeline  
-- 外面的sql又可以继续使用非pipeline的模式  
```  
例子  
```  
pgbench -M prepared -n -r -P 1 -f ./t.sql -c 16 -j 16 -T 5  
progress: 1.0 s, 2893.0 tps, lat 5.376 ms stddev 11.833  
progress: 2.0 s, 3126.0 tps, lat 5.110 ms stddev 16.975  
progress: 3.0 s, 3106.0 tps, lat 5.179 ms stddev 17.444  
progress: 4.0 s, 3003.0 tps, lat 5.298 ms stddev 17.140  
progress: 5.0 s, 2982.0 tps, lat 5.366 ms stddev 17.016  
pgbench (PostgreSQL) 14.0  
transaction type: ./t.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 16  
duration: 5 s  
number of transactions actually processed: 15128  
latency average = 5.278 ms  
latency stddev = 16.270 ms  
initial connection time = 14.798 ms  
tps = 3029.043417 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set size 10000000  
         0.001  \set r random_zipfian(1, :size, 2)  
         0.001  \set k permute(:r, :size)  
         0.078  begin;  
         0.111  insert into tbl values (:r, :k);  
         0.093  insert into tbl values (:r, :k);  
         0.083  insert into tbl values (:r, :k);  
         0.071  insert into tbl values (:r, :k);  