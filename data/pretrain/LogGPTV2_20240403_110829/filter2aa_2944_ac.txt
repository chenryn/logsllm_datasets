Atchue, Stuart Perks, Teddy Hagos, Ubaldo Pescatore, Vishal Singh, Willhelm Lehman,
and Zoheb Ainapore: your suggestions helped make this a better book.
xv
about this book
Who should read this book
API Security in Action is written to guide you through the techniques needed to secure
APIs in a variety of environments. It begins by covering basic secure coding tech-
niques and then looks at authentication and authorization techniques in depth.
Along the way, you’ll see how techniques such as rate-limiting and encryption can be
used to harden your APIs against attacks.
 This book is written for developers who have some experience in building web
APIs and want to improve their knowledge of API security techniques and best prac-
tices. You should have some familiarity with building RESTful or other remote APIs
and be confident in using a programming language and tools such as an editor or
IDE. No prior experience with secure coding or cryptography is assumed. The book
will also be useful to technical architects who want to come up to speed with the latest
API security approaches.
How this book is organized: A roadmap
This book has five parts that cover 13 chapters.
 Part 1 explains the fundamentals of API security and sets the secure foundation for
the rest of the book.
■
Chapter 1 introduces the topic of API security and how to define what makes an
API secure. You’ll learn the basic mechanisms involved in securing an API and
how to think about threats and vulnerabilities.
ABOUT THIS BOOK
xvi
■
Chapter 2 describes the basic principles involved in secure development and
how they apply to API security. You’ll learn how to avoid many common soft-
ware security flaws using standard coding practices. This chapter also intro-
duces the example application, called Natter, whose API forms the basis of code
samples throughout the book.
■
Chapter 3 is a whirlwind tour of all the basic security mechanisms developed in
the rest of the book. You’ll see how to add basic authentication, rate-limiting,
audit logging, and access control mechanisms to the Natter API.
Part 2 looks at authentication mechanism for RESTful APIs in more detail. Authenti-
cation is the bedrock upon which all other security controls build, so we spend some
time ensuring this foundation is firmly established.
■
Chapter 4 covers traditional session cookie authentication and updates it for
modern web API usage, showing how to adapt techniques from traditional web
applications. You’ll also cover new developments such as SameSite cookies.
■
Chapter 5 looks at alternative approaches to token-based authentication, cover-
ing bearer tokens and the standard Authorization header. It also covers using
local storage to store tokens in a web browser and hardening database token
storage in the backend.
■
Chapter 6 discusses self-contained token formats such as JSON Web Tokens and
alternatives.
Part 3 looks at approaches to authorization and deciding who can do what.
■
Chapter 7 describes OAuth2, which is both a standard approach to token-based
authentication and an approach to delegated authorization.
■
Chapter 8 looks in depth at identity-based access control techniques in which the
identity of the user is used to determine what they are allowed to do. It covers
access control lists, role-based access control, and attribute-based access control.
■
Chapter 9 then looks at capability-based access control, which is an alternative
to identity-based approaches based on fine-grained keys. It also covers maca-
roons, which are an interesting new token format that enables exciting new
approaches to access control.
Part 4 is a deep dive into securing microservice APIs running in a Kubernetes
environment.
■
Chapter 10 is a detailed introduction to deploying APIs in Kubernetes and best
practices for security from a developer’s point of view.
■
Chapter 11 discusses approaches to authentication in service-to-service API calls
and how to securely store service account credentials and other secrets.
Part 5 looks at APIs in the Internet of Things (IoT). These APIs can be particularly
challenging to secure due to the limited capabilities of the devices and the variety of
threats they may encounter.
ABOUT THIS BOOK
xvii
■
Chapter 12 describes how to secure communications between clients and ser-
vices in an IoT environment. You’ll learn how to ensure end-to-end security
when API requests must travel over multiple transport protocols.
■
Chapter 13 details approaches to authorizing API requests in IoT environ-
ments. It also discusses offline authentication and access control when devices
are disconnected from online services.
About the code
This book contains many examples of source code both in numbered listings and in
line with normal text. In both cases, source code is formatted in a fixed-width font
like this to separate it from ordinary text. Sometimes code is also in bold to high-
light code that has changed from previous steps in the chapter, such as when a new
feature adds to an existing line of code.
 In many cases, the original source code has been reformatted; we’ve added line
breaks and reworked indentation to accommodate the available page space in the
book. In rare cases, even this was not enough, and listings include line-continuation
markers (➥). Additionally, comments in the source code have often been removed
from the listings when the code is described in the text. Code annotations accompany
many of the listings, highlighting important concepts.
 Source code is provided for all chapters apart from chapter 1 and can be down-
loaded from the GitHub repository accompanying the book at https://github.com/
NeilMadden/apisecurityinaction or from Manning. The code is written in Java but has
been written to be as neutral as possible in coding style and idioms. The examples
should translate readily to other programming languages and frameworks. Full details
of the required software and how to set up Java are provided in appendix A.
liveBook discussion forum
Purchase of API Security in Action includes free access to a private web forum run by
Manning Publications where you can make comments about the book, ask technical
questions, and receive help from the author and from other users. To access the
forum, go to https://livebook.manning.com/#!/book/api-security-in-action/discussion.
You can also learn more about Manning’s forums and the rules of conduct at https://
livebook.manning.com/#!/discussion.
 Manning’s commitment to our readers is to provide a venue where a meaningful
dialogue between individual readers and between readers and the author can take
place. It is not a commitment to any specific amount of participation on the part of
the author, whose contribution to the forum remains voluntary (and unpaid). We sug-
gest you try asking the author some challenging questions lest his interest stray! The
forum and the archives of previous discussions will be accessible from the publisher’s
website as long as the book is in print.
ABOUT THIS BOOK
xviii
Other online resources
Need additional help?
■
The Open Web Application Security Project (OWASP) provides numerous
resources for building secure web applications and APIs. I particularly like the
cheat sheets on security topics at https://cheatsheetseries.owasp.org.
■
https://oauth.net provides a central directory of all things OAuth2. It’s a great
place to find out about all the latest developments.
xix
about the author
NEIL MADDEN is Security Director at ForgeRock and has an in-depth knowledge of
applied cryptography, application security, and current API security technologies. He
has worked as a programmer for 20 years and holds a PhD in Computer Science.
xx
about the cover illustration
The figure on the cover of API Security in Action is captioned “Arabe du désert,” or
Arab man in the desert. The illustration is taken from a collection of dress costumes
from various countries by Jacques Grasset de Saint-Sauveur (1757–1810), titled Cos-
tumes de Différents Pays, published in France in 1788. Each illustration is finely drawn
and colored by hand. The rich variety of Grasset de Saint-Sauveur’s collection
reminds us vividly of how culturally apart the world’s towns and regions were just
200 years ago. Isolated from each other, people spoke different dialects and lan-
guages. In the streets or in the countryside, it was easy to identify where they lived and
what their trade or station in life was just by their dress. The way we dress has changed
since then and the diversity by region, so rich at the time, has faded away. It is now hard
to tell apart the inhabitants of different continents, let alone different towns, regions,
or countries. Perhaps we have traded cultural diversity for a more varied personal
life—certainly for a more varied and fast-paced technological life. At a time when it is
hard to tell one computer book from another, Manning celebrates the inventiveness
and initiative of the computer business with book covers based on the rich diversity of
regional life of two centuries ago, brought back to life by Grasset de Saint-Sauveur’s
pictures.
Part 1
Foundations
This part of the book creates the firm foundation on which the rest of the
book will build.
 Chapter 1 introduces the topic of API security and situates it in relation to
other security topics. It covers how to define what security means for an API and
how to identify threats. It also introduces the main security mechanisms used in
protecting an API.
 Chapter 2 is a run-through of secure coding techniques that are essential to
building secure APIs. You’ll see some fundamental attacks due to common cod-
ing mistakes, such as SQL injection or cross-site scripting vulnerabilities, and
how to avoid them with simple and effective countermeasures.
 Chapter 3 takes you through the basic security mechanisms involved in API
security: rate-limiting, encryption, authentication, audit logging, and authoriza-
tion. Simple but secure versions of each control are developed in turn to help
you understand how they work together to protect your APIs.
 After reading these three chapters, you’ll know the basics involved in secur-
ing an API.
3
What is API security?
Application Programming Interfaces (APIs) are everywhere. Open your smartphone or
tablet and look at the apps you have installed. Almost without exception, those
apps are talking to one or more remote APIs to download fresh content and mes-
sages, poll for notifications, upload your new content, and perform actions on
your behalf. 
 Load your favorite web page with the developer tools open in your browser, and
you’ll likely see dozens of API calls happening in the background to render a page
that is heavily customized to you as an individual (whether you like it or not). On
the server, those API calls may themselves be implemented by many microservices
communicating with each other via internal APIs.
 Increasingly, even the everyday items in your home are talking to APIs in the
cloud—from smart speakers like Amazon Echo or Google Home, to refrigerators,
This chapter covers
 What is an API?
 What makes an API secure or insecure?
 Defining security in terms of goals
 Identifying threats and vulnerabilities
 Using mechanisms to achieve security goals
4
CHAPTER 1
What is API security?
electricity meters, and lightbulbs. The Internet of Things (IoT) is rapidly becoming a
reality in both consumer and industrial settings, powered by ever-growing numbers of
APIs in the cloud and on the devices themselves.
 While the spread of APIs is driving ever more sophisticated applications that
enhance and amplify our own abilities, they also bring increased risks. As we become
more dependent on APIs for critical tasks in work and play, we become more vulnera-
ble if they are attacked. The more APIs are used, the greater their potential to be
attacked. The very property that makes APIs attractive for developers—ease of use—
also makes them an easy target for malicious actors. At the same time, new privacy and
data protection legislation, such as the GDPR in the EU, place legal requirements on
companies to protect users’ data, with stiff penalties if data protections are found to
be inadequate.
This book is about how to secure your APIs against these threats so that you can confi-
dently expose them to the world. 
1.1
An analogy: Taking your driving test
To illustrate some of the concepts of API security, consider an analogy from real life:
taking your driving test. This may not seem at first to have much to do with either APIs
or security, but as you will see, there are similarities between aspects of this story and
key concepts that you will learn in this chapter.
 You finish work at 5 p.m. as usual. But today is special. Rather than going home to
tend to your carnivorous plant collection and then flopping down in front of the TV,
you have somewhere else to be. Today you are taking your driving test.
 You rush out of your office and across the park to catch a bus to the test center. As
you stumble past the queue of people at the hot dog stand, you see your old friend
Alice walking her pet alpaca, Horatio. 
 “Hi Alice!” you bellow jovially. “How’s the miniature recreation of 18th-century
Paris coming along?”
 “Good!” she replies. “You should come and see it soon.”
GDPR
The General Data Protection Regulation (GDPR) is a significant piece of EU law that
came into force in 2018. The aim of the law is to ensure that EU citizens’ personal
data is not abused and is adequately protected by both technical and organizational
controls. This includes security controls that will be covered in this book, as well as
privacy techniques such as pseudonymization of names and other personal informa-
tion (which we will not cover) and requiring explicit consent before collecting or shar-
ing personal data. The law requires companies to report any data breaches within 72
hours and violations of the law can result in fines of up to €20 million (approximately
$23.6 million) or 4% of the worldwide annual turnover of the company. Other jurisdic-
tions are following the lead of the EU and introducing similar privacy and data protec-
tion legislation. 
5
An analogy: Taking your driving test
 She makes the universally recognized hand-gesture for “call me” and you both
hurry on your separate ways.
 You arrive at the test center a little hot and bothered from the crowded bus jour-
ney. If only you could drive, you think to yourself! After a short wait, the examiner
comes out and introduces himself. He asks to see your learner’s driving license and
studies the old photo of you with that bad haircut you thought was pretty cool at the
time. After a few seconds of quizzical stares, he eventually accepts that it is really you,
and you can begin the test.
LEARN ABOUT IT
Most APIs need to identify the clients that are interacting
with them. As these fictional interactions illustrate, there may be different
ways of identifying your API clients that are appropriate in different situa-
tions. As with Alice, sometimes there is a long-standing trust relationship
based on a history of previous interactions, while in other cases a more formal
proof of identity is required, like showing a driving license. The examiner
trusts the license because it is issued by a trusted body, and you match the
photo on the license. Your API may allow some operations to be performed
with only minimal identification of the user but require a higher level of iden-
tity assurance for other operations.
You failed the test this time, so you decide to take a train home. At the station you buy
a standard class ticket back to your suburban neighborhood, but feeling a little devil-
may-care, you decide to sneak into the first-class carriage. Unfortunately, an attendant
blocks your way and demands to see your ticket. Meekly you scurry back into standard
class and slump into your seat with your headphones on.
 When you arrive home, you see the light flashing on your answering machine.
Huh, you’d forgotten you even had an answering machine. It’s Alice, inviting you to
the hot new club that just opened in town. You could do with a night out to cheer you
up, so you decide to go.
 The doorwoman takes one look at you. 
 “Not tonight,” she says with an air of sniffy finality.
 At that moment, a famous celebrity walks up and is ushered straight inside.
Dejected and rejected, you head home. 
 What you need is a vacation. You book yourself a two-week stay in a fancy hotel.
While you are away, you give your neighbor Bob the key to your tropical greenhouse
so that he can feed your carnivorous plant collection. Unknown to you, Bob throws a
huge party in your back garden and invites half the town. Thankfully, due to a miscal-
culation, they run out of drinks before any real damage is done (except to Bob’s repu-
tation) and the party disperses. Your prized whisky selection remains safely locked
away inside. 
LEARN ABOUT IT
Beyond just identifying your users, an API also needs to be
able to decide what level of access they should have. This can be based on who
they are, like the celebrity getting into the club, or based on a limited-time
6
CHAPTER 1
What is API security?
token like a train ticket, or a long-term key like the key to the greenhouse that
you lent your neighbor. Each approach has different trade-offs. A key can be
lost or stolen and then used by anybody. On the other hand, you can have dif-
ferent keys for different locks (or different operations) allowing only a small
amount of authority to be given to somebody else. Bob could get into the
greenhouse and garden but not into your house and whisky collection. 
When you return from your trip, you review the footage from your comprehensive
(some might say over-the-top) camera surveillance system. You cross Bob off the
Christmas card list and make a mental note to ask someone else to look after the
plants next time. 
 The next time you see Bob you confront him about the party. He tries to deny it at
first, but when you point out the cameras, he admits everything. He buys you a lovely
new Venus flytrap to say sorry. The video cameras show the advantage of having good
audit logs so that you can find out who did what when things go wrong, and if neces-
sary, prove who was responsible in a way they cannot easily deny. 
DEFINITION
An audit log records details of significant actions taken on a sys-
tem, so that you can later work out who did what and when. Audit logs are
crucial evidence when investigating potential security breaches.
You can hopefully now see a few of the mechanisms that are involved in securing an
API, but before we dive into the details let’s review what an API is and what it means
for it to be secure. 
1.2
What is an API?
Traditionally, an API was provided by a software library that could be linked into an
application either statically or dynamically at runtime, allowing reuse of procedures
and functions for specific problems, such as OpenGL for 3D graphics, or libraries for
TCP/IP networking. Such APIs are still common, but a growing number of APIs are
now made available over the internet as RESTful web services.
 Broadly speaking, an API is a boundary between one part of a software system and
another. It defines a set of operations that one component provides for other parts of
the system (or other systems) to use. For example, a photography archive might pro-
vide an API to list albums of photos, to view individual photos, add comments, and so
on. An online image gallery could then use that API to display interesting photos,
while a word processor application could use the same API to allow embedding
images into a document. As shown in figure 1.1, an API handles requests from one or
more clients on behalf of users. A client may be a web or mobile application with a
user interface (UI), or it may be another API with no explicit UI. The API itself may
talk to other APIs to get its work done.
 A UI also provides a boundary to a software system and restricts the operations that
can be performed. What distinguishes an API from a UI is that an API is explicitly
designed to be easy to interact with by other software, while a UI is designed to be easy
7
What is an API?
for a user to interact with directly. Although a UI might present information in a rich
form to make the information pleasing to read and easy to interact with, an API typi-
cally will present instead a highly regular and stripped-back view of the raw data in a
form that is easy for a program to parse and manipulate.
1.2.1
API styles
There are several popular approaches to exposing remote APIs:
 Remote Procedure Call (RPC) APIs expose a set of procedures or functions that
can be called by clients over a network connection. The RPC style is designed to
resemble normal procedure calls as if the API were provided locally. RPC APIs
often use compact binary formats for messages and are very efficient, but usu-
ally require the client to install specific libraries (known as stubs) that work with
a single API. The gRPC framework from Google (https://grpc.io) is an example
of a modern RPC approach. The older SOAP (Simple Object Access Protocol)
framework, which uses XML for messages, is still widely deployed.
 A variant of the RPC style known as Remote Method Invocation (RMI) uses object-
oriented techniques to allow clients to call methods on remote objects as if
they were local. RMI approaches used to be very popular, with technologies
such as CORBA and Enterprise Java Beans (EJBs) often used for building large
Users
Clients
Web
IoT
Mobile
Request
Response
Upstream
APIs
Backend
APIs
Backend
APIs
Backend
APIs
UI
Business
logic
Your API
Figure 1.1
An API handles requests from clients on behalf of users. Clients may be web browsers, 
mobile apps, devices in the Internet of Things, or other APIs. The API services requests according 
to its internal logic and then at some point returns a response to the client. The implementation of 
the API may require talking to other “backend” APIs, provided by databases or processing systems.
8
CHAPTER 1
What is API security?
enterprise systems. The complexity of these frameworks has led to a decline in
their use.
 The REST (REpresentational State Transfer) style was developed by Roy Fielding to
describe the principles that led to the success of HTTP and the web and was later
adapted as a set of principles for API design. In contrast to RPC, RESTful APIs
emphasize standard message formats and a small number of generic operations
to reduce the coupling between a client and a specific API. Use of hyperlinks to
navigate the API reduce the risk of clients breaking as the API evolves over time.
 Some APIs are mostly concerned with efficient querying and filtering of large
data sets, such as SQL databases or the GraphQL framework from Facebook
(https://graphql.org). In these cases, the API often only provides a few opera-
tions and a complex query language allows the client significant control over
what data is returned.
Different API styles are suitable for different environments. For example, an organiza-
tion that has adopted a microservices architecture might opt for an efficient RPC frame-
work to reduce the overhead of API calls. This is appropriate because the organization