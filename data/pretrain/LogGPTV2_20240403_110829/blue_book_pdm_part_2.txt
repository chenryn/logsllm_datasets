```
[tool.pdm.dev-dependencies]
# The next ones are required to manually solve the dependencies issues
dependencies = [
    # Until flakeheaven supports flake8 5.x
    # https://github.com/flakeheaven/flakeheaven/issues/132
    "flake8>=4.0.1,=3.10"
```
If you get lost in understanding your dependencies, you can try using
[`pydeps`](https://github.com/thebjorn/pydeps) to get your head around it.
## [Building packages](https://pdm.fming.dev/usage/project/)
PDM can act as a PEP 517 build backend, to enable that, write the following
lines in your `pyproject.toml`.
```toml
[build-system]
requires = [ "pdm-pep517",]
build-backend = "pdm.pep517.api"
```
`pip` will read the backend settings to install or build a package.
### [Choose a Python interpreter](https://pdm.fming.dev/usage/project/#choose-a-python-interpreter)
If you have used `pdm init`, you must have already seen how PDM detects and
selects the Python interpreter. After initialized, you can also change the
settings by `pdm use `. The argument can be either a
version specifier of any length, or a relative or absolute path to the python
interpreter, but remember the Python interpreter must conform with the
`python_requires` constraint in the project file.
#### [How `requires-python` controls the project](https://pdm.fming.dev/usage/project/#how-requires-python-controls-the-project)
PDM respects the value of `requires-python` in the way that it tries to pick
package candidates that can work on all python versions that `requires-python`
contains. For example, if `requires-python` is `>=2.7`, PDM will try to find the
latest version of `foo`, whose `requires-python` version range is a **superset**
of `>=2.7`.
So, make sure you write `requires-python` properly if you don't want any
outdated packages to be locked.
### [Custom file generation](https://pdm.fming.dev/latest/pyproject/build/#custom-file-generation)
Warning: this method only works if you install the package with `pdm` if you use `pip` or any other package manager the `build.py` script won't be called. Thus a more generic approach is to run the initialization steps in a `your_command init` step or run the checks on each command.
During the build, you may want to generate other files or download resources from the internet. You can achieve this by the setup-script build configuration:
```toml`
[tool.pdm.build]
setup-script = "build.py"
```
In the `build.py` script, pdm-pep517 looks for a build function and calls it with two arguments:
* `src`: the path to the source directory
* `dst`: the path to the distribution directory
Example:
```python
# build.py
def build(src, dst):
    target_file = os.path.join(dst, "mypackage/myfile.txt")
    os.makedirs(os.path.dirname(target_file), exist_ok=True)
    download_file_to(dst)
```
The generated file will be copied to the resulted wheel with the same hierarchy, you need to create the parent directories if necessary.
### [Build distribution artifacts](https://pdm.fming.dev/usage/project/#build-distribution-artifacts)
```console
$ pdm build
- Building sdist...
- Built pdm-test-0.0.0.tar.gz
- Building wheel...
- Built pdm_test-0.0.0-py3-none-any.whl
```
## [Publishing artifacts](https://github.com/branchvincent/pdm-publish)
The artifacts can then be uploaded to PyPI by
[twine](https://pypi.org/project/twine) or through the `pdm-publish` plugin. The
main developer [didn't thought](https://github.com/pdm-project/pdm/issues/22) it
was worth it, so branchvincent made the plugin (I love this possibility).
Install it with `pdm plugin add pdm-publish`.
Then you can upload them with;
```bash
# Using token auth
pdm publish --password token
# To test PyPI using basic auth
pdm publish -r testpypi -u username -P password
# To custom index
pdm publish -r https://custom.index.com/
```
If you don't want to use your credentials in plaintext on the command, you can
use the environmental variables `PDM_PUBLISH_PASSWORD` and `PDM_PUBLISH_USER`.
## [Build a docker](https://pdm.fming.dev/latest/usage/advanced/#use-pdm-in-a-multi-stage-dockerfile)
It is possible to use PDM in a multi-stage Dockerfile to first install the project and dependencies into `__pypackages__` and then copy this directory into the final stage, adding it to `PYTHONPATH`.
```docker
# build stage
FROM python:3.11-slim-bookworm as builder
# install PDM
RUN pip install -U pip setuptools wheel
RUN pip install pdm
# copy files
COPY pyproject.toml pdm.lock README.md /project/
COPY src/ /project/src
# install dependencies and project into the local packages directory
WORKDIR /project
RUN mkdir __pypackages__ && pdm sync --prod --no-editable
# run stage
FROM python:3.11-slim-bookworm
# retrieve packages from build stage
ENV PYTHONPATH=/project/pkgs
COPY --from=builder /project/__pypackages__/3.11/lib /project/pkgs
# retrieve executables
COPY --from=builder /project/__pypackages__/3.11/bin/* /bin/
# set command/entrypoint, adapt to fit your needs
CMD ["python", "-m", "project"]
```
## [Show the current Python environment](https://pdm.fming.dev/usage/project/#show-the-current-python-environment)
```console
$ pdm info
PDM version:        1.11.3
Python Interpreter: /usr/local/bin/python3.9 (3.9)
Project Root:       /tmp/tmp.dBlK2rAn2x
Project Packages:   /tmp/tmp.dBlK2rAn2x/__pypackages__/3.9
```
```console
$ pdm info --env
{
  "implementation_name": "cpython",
  "implementation_version": "3.9.8",
  "os_name": "posix",
  "platform_machine": "x86_64",
  "platform_release": "4.19.0-5-amd64",
  "platform_system": "Linux",
  "platform_version": "#1 SMP Debian 4.19.37-5+deb10u1 (2019-07-19)",
  "python_full_version": "3.9.8",
  "platform_python_implementation": "CPython",
  "python_version": "3.9",
  "sys_platform": "linux"
}
```
## [Manage project configuration](https://pdm.fming.dev/usage/project/#configure-the-project)
Show the current configurations:
```console
pdm config
```
Get one single configuration:
```console
pdm config pypi.url
```
Change a configuration value and store in home configuration:
```console
pdm config pypi.url "https://test.pypi.org/simple"
```
By default, the configuration are changed globally, if you want to make the
config seen by this project only, add a `--local` flag:
```console
pdm config --local pypi.url "https://test.pypi.org/simple"
```
Any local configurations will be stored in `.pdm.toml` under the project root
directory.
The configuration files are searched in the following order:
1. `/.pdm.toml` - The project configuration.
1. `~/.pdm/config.toml` - The home configuration.
If `-g/--global` option is used, the first item will be replaced by
`~/.pdm/global-project/.pdm.toml`.
You can find all available configuration items in
[Configuration Page](#configuration).
## [Run Scripts in Isolated Environment](https://pdm.fming.dev/usage/project/#run-scripts-in-isolated-environment)
With PDM, you can run arbitrary scripts or commands with local packages loaded:
```bash
pdm run flask run -p 54321
```
PDM also supports custom script shortcuts in the optional `[tool.pdm.scripts]`
section of `pyproject.toml`.
You can then run `pdm run ` to invoke the script in the context
of your PDM project. For example:
```toml
[tool.pdm.scripts]
start_server = "flask run -p 54321"
```
And then in your terminal:
```bash
$ pdm run start_server
Flask server started at http://127.0.0.1:54321
```
Any extra arguments will be appended to the command:
```bash
$ pdm run start_server -h 0.0.0.0
Flask server started at http://0.0.0.0:54321
```
PDM supports 3 types of scripts:
### [Normal command](https://pdm.fming.dev/usage/project/#normal-command)
Plain text scripts are regarded as normal command, or you can explicitly specify
it:
```toml
[tool.pdm.scripts.start_server]
cmd = "flask run -p 54321"
```
In some cases, such as when wanting to add comments between parameters, it might
be more convenient to specify the command as an array instead of a string:
```toml
[tool.pdm.scripts.start_server]
cmd = [ "flask", "run", "-p", "54321",]
```
### [Shell script](https://pdm.fming.dev/usage/project/#shell-script)
Shell scripts can be used to run more shell-specific tasks, such as pipeline and
output redirecting. This is basically run via `subprocess.Popen()` with
`shell=True`:
```toml
[tool.pdm.scripts.filter_error]
shell = "cat error.log|grep CRITICAL > critical.log"
```
### [Call a Python function](https://pdm.fming.dev/usage/project/#call-a-python-function)
The script can be also defined as calling a python function in the form
`:`:
```toml
[tool.pdm.scripts.foobar]
call = "foo_package.bar_module:main"
```
The function can be supplied with literal arguments:
```toml
[tool.pdm.scripts.foobar]
call = "foo_package.bar_module:main('dev')"
```
### [Environment variables support](https://pdm.fming.dev/usage/project/#environment-variables-support)
All environment variables set in the current shell can be seen by `pdm run` and
will be expanded when executed. Besides, you can also define some fixed
environment variables in your `pyproject.toml`:
```toml
[tool.pdm.scripts.start_server]
cmd = "flask run -p 54321"
[tool.pdm.scripts.start_server.env]
FOO = "bar"
FLASK_ENV = "development"
```
Note how we use [TOML's syntax](https://github.com/toml-lang/toml) to define a
compound dictionary.
A dotenv file is also supported via `env_file = ""` setting.
For environment variables and/or dotenv file shared by all scripts, you can
define `env` and `env_file` settings under a special key named `_` of
`tool.pdm.scripts` table:
```toml
[tool.pdm.scripts]
start_server = "flask run -p 54321"
migrate_db = "flask db upgrade"
[tool.pdm.scripts._]
env_file = ".env"
```
Besides, PDM also injects the root path of the project via `PDM_PROJECT_ROOT`
environment variable.
### [Load site-packages in the running environment](https://pdm.fming.dev/usage/project/#load-site-packages-in-the-running-environment)
To make sure the running environment is properly isolated from the outer Python
interpreter, site-packages from the selected interpreter WON'T be loaded into
`sys.path`, unless any of the following conditions holds:
1. The executable is from `PATH` but not inside the `__pypackages__` folder.
1. `-s/--site-packages` flag is following `pdm run`.
1. `site_packages = true` is in either the script table or the global setting
   key `_`.
Note that site-packages will always be loaded if running with PEP 582
enabled(without the `pdm run` prefix).
### [Show the list of scripts shortcuts](https://pdm.fming.dev/usage/project/#show-the-list-of-scripts-shortcuts)
Use `pdm run --list/-l` to show the list of available script shortcuts:
```bash
$ pdm run --list
Name        Type  Script           Description
----------- ----- ---------------- ----------------------
test_cmd    cmd   flask db upgrade
test_script call  test_script:main call a python function
test_shell  shell echo $FOO        shell command
```
You can add an `help` option with the description of the script, and it will be
displayed in the `Description` column in the above output.
## [Manage caches](https://pdm.fming.dev/usage/project/#manage-caches)
PDM provides a convenient command group to manage the cache, there are four
kinds of caches:
- `wheels/` stores the built results of non-wheel distributions and files.
- `http/` stores the HTTP response content.
- `metadata/` stores package metadata retrieved by the resolver.
- `hashes/` stores the file hashes fetched from the package index or calculated
  locally.
- `packages/` The centrialized repository for installed wheels.
See the current cache usage by typing `pdm cache info`. Besides, you can use
`add`, `remove` and `list` subcommands to manage the cache content.
## [Manage global dependencies](https://pdm.fming.dev/usage/project/#manage-global-project)
Sometimes users may want to keep track of the dependencies of global Python
interpreter as well. It is easy to do so with PDM, via `-g/--global` option
which is supported by most subcommands.
If the option is passed, `~/.pdm/global-project` will be used as the project
directory, which is almost the same as normal project except that
`pyproject.toml` will be created automatically for you and it doesn't support