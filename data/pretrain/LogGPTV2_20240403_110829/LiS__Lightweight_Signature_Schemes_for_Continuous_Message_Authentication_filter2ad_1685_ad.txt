busy waters and harbors. Our LiS2 can be a solution to broadcast
authenticated AIS information to different verifiers, such as other
vessels, lighthouses, or buoys, at a fast speed as required in the
standard (i.e., < 27ms).
Critical Infrastructures. Our daily life may become a dreadful
mess when we do not have various critical infrastructures like
smart grids, water plants, and transportation systems. At the core
of these systems, usually Programmable Logic Controllers (PLCs)
are used to control the physical processes directly. To make sure
that the PLCs are running correctly and are controlling the pro-
cesses, supervisory control and data acquisition (SCADA) systems
in a control center monitor the processes remotely in real-time. It is,
therefore, crucial for SCADA to verify the authenticity of the data
obtained from PLCs. One can integrate LiS1/LiS2 into the firmware
of PLCs and authenticate each data sent to the SCADA. Depending
on whether the inputs of the signer can be adaptively affected by
the adversaries, one can choose to use LiS1 or LiS2. Apparently,
LiS1/LiS2 can be applied to sensors as well, because, as its nature,
a sensor continuously reports its measurement to a server. In this
case, having a lightweight signature integrated will prove the au-
thenticity of the sensor data to the server so that this can prevent
sensor data injection attacks via digital channels [5, 26]. In the
meantime, with our VSR replenishment scheme, the verification
Table 2: The Runtime of Sign and Verify
LiSSAR
LiSVSR
LiSSAR
LiSVSR
1
1
2
2
Sign
7.32µs
7.32µs
11.06µs
11.06µs
Verify
0.59 ms
Figure 9
0.59 ms
0.35 ms
0.35
VAR
)
s
m
(
e
m
i
t
n
u
R
0.3
0.25
0
20
40
60
80
100
Number of Skipped Time-slots in Verification
Figure 9: Runtime of LiS1.Verify.
keys of PLCs can be easily replenished by a trusted SCADAs (or
other local servers) themselves.
8 COMPARISON AND BENCHMARK
Comparison. Here we compare the security features and perfor-
mance between our signature schemes and some related works,
including Schnorr [9], Yao and Zhao’s Γ-1 and Γ-2 [12], and SEMECS
[13]. Let ‘CMAu’ and ‘PV’ denote continuous message authenti-
cation and public verifiability, respectively. And let ‘SKR’ denote
signer key replenishment (i.e., whether it needs to replenish signing
key), and ‘VKR’ denote verifier key replenishment. Note that our
concrete signature schemes LiS1 and LiS2 can have further variants
with different verification key replenishment solutions. So we use
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan727Table 3: Comparison
Key Size
Verifier
1|Zp |
(ℓ + 1) · |Zp |
(2ℓ + 1) · |Zp |
(2ℓ + 1)|Zq |
1.44ℓ · ϵ+1|Zp |
1|Zp |+3|Zq |
1.44ℓ · ϵ+1|Zp |
1|Zp |+3|Zq |
KGen
1E
ℓ · (1E + 1M + 1H)
ℓ · (1E + 1M + 1H)
ℓ(4H + 1E)
ℓ(2E+1BF+1U)+1E
3E+1U
ℓ(2E+1BF+1H)
3E
Computation Cost
Signer
1A+1M+1E+1H
Signature Size
Verifier
1|Zq |+1|Zp |
2E+1H
1E+1M+1H 1|Zq |+1|Zp |
1E+1M+1H 1|Zq |+1|Zp |
2E+3H
2E+1BF
2E+ 1H
2|Zq |
1|Zq |
1|Zq |
1|Zq | + ℓr
1|Zq | + ℓr
2E+1H+1BF
2E+2H
1M+1A+1H
1M+1A+1H
1A+1M+3H
3A+2M
3A+2M + ℓ·U
3A+2M+2H
3A+2M+2H
Properties
Signer
SKR VKR CMAu PV
Security
√
1|Zq |
×
×
SEUF-CMA
√ 2ℓ · |Zp |
√
×
SEUF-CMA
√ 3ℓ · |Zp |
√
×
SEUF-CMA
√
√
|Zq |
×
SEUF-CMA
√
√
5|Zq |
SEUF-wCMA ×
SEUF-wCMA ×
×
×
5|Zp |
√
√
4|Zq |
×
SEUF-CMA
×
×
×
4|Zp |
SEUF-CMA
√
×
×
×
√
√
√
√
Schnorr [9]
Γ-1 [12]
Γ-2 [12]
SEMECS [13]
LiSSAR
LiSVSR
LiSSAR
LiSVSR
1
1
2
2
)
s
(
e
m
i
t
n
u
R
102
10−1
10−4
SAR
VAR
103
104
105
106
107
Number of Signatures to be Verified
Figure 10: Runtime of KGen.
)
B
M
(
e
z
i
S
101
10−1
10−3
ϵ = 10
ϵ = 30
ϵ = 50
ϵ = 70
103
104
105
106
107
Number of Signatures to be Verified
Figure 11: Size of Verification Key of LiS with SAR.
the superscripts ‘SAR’ and ‘VSR’ to indicate them, respectively. We
use ‘A’, ‘M’, ‘E’, ‘I’, ‘U’, and ‘H’ to denote addition, scalar multiplica-
tion, exponentiation, inversion, universal hash function, and hash
function, respectively. ‘SEUF-(w)CMA’ stands for strong existential
unforgeability (weak) chosen message attacks.
The comparison is presented in Table 3. Comparing with Yao and
Zhao’s online/offline signatures, our schemes have a much shorter
key size for either the signer or the verifier. Besides, our schemes
do not need to replenish the signing keys. Although our signing
algorithm is slightly more expensive than the online/offline signa-
tures, our signature schemes still have a practical performance. Also,
compared with Schnorr’s signature, our signing algorithm is more
2
1
efficient as Schnorr’s signature requires modular exponentiation,
which does not fit any resource-constrained devices in CPS [27].
Although our schemes’ the key size of the signer is slightly longer
than that of SEMECS [13], we outperform SEMECS with respect to
the other performance metrics.
and LiSVSR
Our LiSVSR
have near optimal storage costs (implied
by the optimal key size) for both signer and verifier so that they
well fit cyber-physical systems (such as smart grids) which do not
require public verifiability.
Implementations and Evaluations. In this section, we show the
practicality of our proposed family of lightweight signature schemes
LiS = (LiS1, LiS2). All benchmark results reported in Table 2 were
obtained on an Intel Core i7-4770K from the server side, and a
Raspberry Pi 3 from the client side. The operating system of the
server is Ubuntu 16.04, which runs in a VMWare virtual machine,
and only one core of the CPU is used. Note that we set |p| = 1024
and |q| = 320, and use SHA2 [22] to implement the hash function h
in LiS2. The implementation of SHA2 is taken from the highly opti-
mized MIRACL library [28]. We benchmarked the Bloom filter with
different error parameters (i.e., 10−3
, 10−12), and they
resulted in similar performance. Hence, we fix the parameter 10−9
(as an example) to show the computational cost of our signature
schemes.
, 10−6
, 10−9
The performance of the Sign and Verify algorithms of LiS1 are
presented in Table 2 and Figure 9. Notice that in LiSV SR1
, if the
signer does not send signatures in a few time slots, then the verifier
will have to fast forward the universal hash function to skip these
time slots and generate the correct dummy randomness for next
signature verification (see Figure 8 for details). The size of hash
input is 1KB for testing3. We stress that hashing 1KB only takes 0.32
microseconds (µs) on the server (which is much faster than other
operations such as modular exponentiation), so we will omit it while
calculating the performance on the server side. The performances
of the KGen algorithms are shown in Figure 10. Also, the size of
verification keys is shown in Figure 11 with various parameters.
From our benchmark results, we can see that the Sign algorithm
is very efficient for the embedded devices since it only takes 7.32
or 11.06 milliseconds. And the Verify algorithm is practical as well,
such that it will not slow the processes in a CPS. On the one hand,
the cost of KGen and the size of the verification key for SAR are
linear with the number of signatures to be verified. For 10 million
3The cost of the hash function is linear with the size of the hashing message. Here we
just compute the hash value of 1KB as a reference.
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan728signatures, the verification key is about 10 MB, which is acceptable
for most of the verifiers (even if it is a modern smartphone). On
the other hand, it takes about four months to generate 10 million
signatures for authentication if we assume the signature generation
time intervals are 1s. Similarly, it will also take four months for
the verifier to consume all the signatures in the Bloom filter, so we
have more than enough time to replenish the next Bloom filter in
practice. In the case of VSR, the verification key is just a constant
with dozens of bytes.
9 RELATED WORK
Broadcast Authentication. A research topic that is related to
our work is broadcast authentication (BA), which is widely used
to authenticate broadcast messages from resource-constrained de-
vices. One of the main motivations of BA is to authenticate the
timely delivery of messages, so most of the existing BA protocols are
time-constrained. A typical example of BA is the standardized pro-
tocol called Timed Efficient Stream Loss-Tolerant Authentication
(TESLA) [29] for broadcast authentication in wireless networks.
TESLA leverages on a symmetric message authentication code
(MAC) mechanism for authentication and a time-based chain struc-
ture to pre-compute the secrets of MAC disclosed later. Whereas,
the message and its corresponding MAC is sent to the receiver
immediately upon creation, while the secret key is dispatched af-
ter a pre-determined interval of time. However, a drawback of
TESLA and its variants [30–32] is the usage of symmetric key cryp-
tographic technique (i.e., MAC) so that the corruption of either
key share would affect the security of the whole cryptosystem.
To overcome such a drawback of TESLA, researchers [33–35] ap-
peal to lightweight public key based cryptographic building blocks
(such as (one-time) digital signature) to construct BA protocols.
Recently, Afianti et al. [36] proposed a BA scheme which mixed
many cryptographic methods including signature, MAC, encryp-
tion, and a new dynamic cipher puzzle scheme. However, the above
public key based solutions need either ecliptic-curve multiplica-
tions or many cryptographic hash operations that are too heavy