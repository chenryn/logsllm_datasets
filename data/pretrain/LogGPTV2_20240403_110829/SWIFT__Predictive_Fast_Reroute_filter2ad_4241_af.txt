### BGP Burstiness

Several studies [15, 23, 45, 48] have focused on bursts of BGP messages to analyze per-prefix instabilities and dynamics. These works define an update burst as a sequence of messages related to a single prefix observed within a specified timeout period. In contrast, our focus with SWIFT is on events that generate concurrent withdrawals for distinct prefixes.

### Fast Data-Plane Updates

Various techniques can expedite forwarding rule modifications in response to local failures. For example, MPLS fast reroute [51], IP fast reroute [11, 60], and PIC [25] can react within sub-second timescales by pre-provisioning backup entries and selectively activating them at runtime. SDN approaches, such as FatTire [56], support similar use cases in OpenFlow. However, none of these methods can rapidly reroute traffic in the event of remote failures, which is a capability provided by SWIFT.

### Conclusion

We introduced SWIFT, the first fast-reroute framework designed to handle remote outages. SWIFT's key contributions are:
1. A fast and accurate inference algorithm.
2. A novel encoding scheme.

We evaluated SWIFT using a fully functional implementation and real BGP data. Our results indicate that SWIFT is highly efficient in practice, achieving a prediction accuracy and encoding efficiency both above 90%. Additionally, it can boost the convergence performance of a Cisco router by up to 98%.

### Acknowledgements

We are grateful to the SIGCOMM reviewers and our shepherd, Kun Tan, for their insightful comments and suggestions. We thank Derk Valenkamp and Paul Stark from the ICT-Networks team at ETH Zürich for providing access and support to their networking equipment. We also thank Alexander Gall, Chris Welti, and Simon Leinen for providing BGP data and logs. Finally, we appreciate the useful comments from Jennifer Rexford and Olivier Bonaventure on an earlier version of the paper. This work was partially supported by the US Department of Homeland Security Science and Technology Directorate, Cyber Security Division (DHS S&T/CSD), via contract HHSP 233201600012C.

### SWIFT: Predictive Fast Reroute

(a) A SWIFT-enabled Cisco router converges 98% faster.
(b) Alternative SWIFT implementation on existing routers.

**Figure 9:** While a recent router takes 110 seconds to converge upon a large remote outage (left), the corresponding SWIFT-enabled router (using the alternative deployment scheme depicted on the right) converges within 2 seconds.

Upon detecting a burst from a peer, the SWIFT controller runs the inference algorithm (§4) and provisions data-plane rules to the SDN switch for rerouting the traffic. Our SWIFT controller uses ExaBGP [7] to maintain BGP sessions.

### Methodology

We replicated the topology in Fig. 1(a) using a recent router (Cisco Nexus 7k C7018, running NX-OS v6.2) acting as AS 1, connected to its peers via a laptop running a software-based OpenFlow switch (OpenVSwitch 2.1.3). We configured AS 6 to announce 290k prefixes. After failing the link (5, 6), we measured the downtime using the same technique as in §2 (sending traffic to 100 randomly selected IP addresses).

**A 98% Speed-Up:** Fig. 9(a) shows the downtime observed by the SWIFT-enabled and non-SWIFT-enabled Cisco routers. While the vanilla Cisco router takes 109 seconds to converge, the SWIFT-enabled router consistently converges within 2 seconds, resulting in a 98% speed-up.

### Related Work

#### Root Cause Analysis (RCA)

Many prior works aim to identify the root cause of failures, whether in the Internet [14, 15, 19, 23, 35, 38, 39, 67–69] or within a network [20, 40, 58, 66]. The SWIFT inference algorithm differs from previous works in both objectives and scope. To enable fast rerouting, SWIFT inference must be extremely quick (in seconds or sub-seconds), while previous works typically focus on longer timescales (minutes). Additionally, SWIFT deals with specific types of failures that generate large bursts of BGP withdrawals and relies solely on BGP messages reaching a single vantage point (the SWIFT-enabled router). In contrast, previous RCA efforts often use active measurements and multiple vantage points, focusing on pinpointing different problems such as per-prefix path changes [35] or failures on the reverse path [38].

Another significant difference is that SWIFT uses its fast RCA core to repair Internet connectivity issues almost in real time. This goes beyond previous contributions, like [33], which only show how to detect (not repair) path problems using passive packet-level traces from a single vantage point.

#### BGP Convergence

Slow BGP convergence is a well-known problem [17, 22, 29, 43, 44, 47]. Most prior work aimed at reducing BGP convergence time within a single domain, for instance, upon planned maintenance. SWIFT addresses this issue by providing a predictive and fast-rerouting solution for remote outages.

### References

[1] TCP Behavior of BGP. (2012). https://archive.psg.com/121009.nag-bgp-tcp.pdf.
[2] 5-minute outage costs Google $545,000 in revenue. (2013). http://venturebeat.com/2013/08/16/3-minute-outage-costs-google-545000-in-revenue/.
[3] Cisco Systems. BGP PIC Edge and Core. (2015). http://www.cisco.com/c/en/us/td/docs/routers/7600/ios/15S/configuration/guide/7600_15_0s_book/BGP.html.
[4] Amazon.com went down for about 20 minutes, and the world freaked out. (2016). http://mashable.com/2016/03/10/amazon-is-down-2/.
[5] CIDR report. (2016). http://www.cidr-report.org/as2.0/.
[6] Cisco Umbrella 1 Million. (2016). https://blog.opendns.com/2016/12/14/cisco-umbrella-1-million/.
[7] ExaBGP. (2016). https://github.com/Exa-Networks/exabgp.
[8] Google cloud outage highlights more than just networking failure. (2016). http://bit.ly/1MFO2Ye.
[9] RIPE RIS Raw Data. (2016). https://www.ripe.net/data-tools/stats/ris/.

...

### Appendix

#### Detailed Inference Algorithm

Algorithm 1 depicts our implementation of the SWIFT link inference algorithm. The algorithm is launched during a burst of BGP withdrawals and takes as parameters G (the AS graph seen when the algorithm is launched), GW (the graph of withdrawn AS paths), and Wtotal (the current size of the burst). G and GW are weighted based on the number of prefixes traversing (resp. that traversed before the burst and are now withdrawn) their links. For each node in GW, the algorithm sorts its outgoing links based on their individual FS score. It then repeatedly merges the outgoing links, starting from the one with the highest FS score, and recomputes the new FS score of this set of links. As soon as merging a new outgoing link would decrease the FS score, the algorithm stops and returns the inferred failed link.