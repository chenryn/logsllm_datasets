1.  在 Kubernetes 主文件中，创建一个新文件夹:
    ```
    $ mkdir nginx_kube_example
    $ cd nginx_kube_example
    ```
2.  In the editor of your choice, create the `.yaml` file that will be used to deploy the nginx pods:
    ```
    $ vi nginx_pod.yaml
    ```
    将以下内容复制到文件中:
    ```
    apiVersion: v1
    kind: ReplicationController
    metadata:
     name: nginx
    spec:
     replicas: 2
     selector:
     app: nginx
     template:
     metadata:
     name: nginx
     labels:
     app: nginx
     spec:
     containers:
     - name: nginx
     image: nginx
     ports:
     - containerPort: 80
    ```
3.  使用`kubectl` :
    ```
    $ kubectl create -f nginx_pod.yaml
    ```
    创建 nginx Pod 
4.  In the preceding pod creation process, we created two replicas of the nginx pod, and its details can be listed using the following command:
    ```
    $ kubectl get pods
    ```
    以下是生成的输出:
    ```
    NAME          READY     REASON    RESTARTS   AGE
    nginx-karne   1/1       Running   0          14s
    nginx-mo5ug   1/1       Running   0          14s
    ```
    要列出集群上的复制控制器，请使用`kubectl get`命令:
    ```
    $ kubectl get rc
    ```
    以下是生成的输出:
    ```
    CONTROLLER   CONTAINER(S)   IMAGE(S)   SELECTOR    REPLICAS
    nginx        nginx          nginx      app=nginx   2
    ```
5.  The container on the deployed minion can be listed using the following command:
    ```
    $ docker ps
    ```
    以下是生成的输出:
    ```
    CONTAINER ID        IMAGE                                   COMMAND                CREATED             STATUS              PORTS               NAMES
    1d3f9cedff1d        nginx:latest                            "nginx -g 'daemon of   41 seconds ago      Up 40 seconds       k8s_nginx.6171169d_nginx-karne_default_5d5bc813-3166-11e5-8256-ecf4bb2bbd90_886ddf56
    0b2b03b05a8d        nginx:latest                            "nginx -g 'daemon of   41 seconds ago      Up 40 seconds
    ```
6.  Deploy the nginx service using the following .`yaml` file in order to expose the nginx pod on host port `82`:
    ```
    $ vi nginx_service.yaml
    ```
    将以下内容复制到文件中:
    ```
    apiVersion: v1
    kind: Service
    metadata:
     labels:
     name: nginxservice
     name: nginxservice
    spec:
     ports:
     # The port that this service should serve on.
     - port: 82
     # Label keys and values that must match in order to receive traffic for this service.
     selector:
     app: nginx
     type: LoadBalancer
    ```
7.  使用`kubectl create`命令创建 nginx 服务:
    ```
    $kubectl create -f nginx_service.yaml
    services/nginxservice
    ```
8.  The nginx service can be listed using the following command:
    ```
    $ kubectl get services
    ```
    以下是生成的输出:
    ```
    NAME           LABELS                                    SELECTOR    IP(S)          PORT(S)
    kubernetes     component=apiserver,provider=kubernetes         192.168.3.1    443/TCP
    nginxservice   name=nginxservice                         app=nginx   192.168.3.43   82/TCP
    ```
9.  Now, the nginx server's test page can be accessed on the following URL via the service:
    `http://192.168.3.43:82`
# 中间层
中间层是一个软件解决方案，它提供了管理服务器基础设施的方法，并且基本上扩展了 Apache 中间层的集群管理能力。中间层也推出了 **DCOS** ( **数据中心操作系统**)，用于通过跨越所有机器并将它们视为一台计算机来管理数据中心，提供了一种高度可扩展和弹性的方式在其上部署应用。DCOS 可以安装在任何公共云或您自己的私有数据中心，从 AWS、GCE、微软 Azure 到 VMware。马拉松是 Mesos 的框架，旨在启动和运行应用；它可以替代 init 系统。马拉松提供了各种功能，如高可用性、应用运行状况检查和服务发现，这些功能可以帮助您在 Mesos 集群环境中运行应用。
本课程介绍如何创建单节点 Mesos 集群。
## Docker 容器
Mesos 可以使用马拉松框架运行和管理 Docker 容器。
在本练习中，我们将使用 CentOS 7 部署一个 Mesos 集群:
1.  Install Mesosphere and Marathon using the following command:
    ```
    # sudo rpm -Uvh http://repos.mesosphere.com/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm
    # sudo yum -y install mesos marathon
    ```
    Apache Mesos 使用 Zookeeper 进行操作。Zookeeper 充当中间层架构中的主选举服务，并存储中间层节点的状态。
2.  通过指向 Zookeeper 的 RPM 存储库来安装 Zookeeper 和 Zookeeper 服务器包，如下所示:
    ```
    # sudo rpm -Uvh http://archive.cloudera.com/cdh4/one-click-install/redhat/6/x86_64/cloudera-cdh-4-0.x86_64.rpm
    # sudo yum -y install zookeeper zookeeper-server
    ```
3.  Validate Zookeeper by stopping and restarting it:
    ```
    # sudo service zookeeper-server stop
    # sudo service zookeeper-server start
    ```
    Mesos 使用一个简单的架构来给你一个跨机器集群的智能任务分配，而不用担心它们被安排在哪里。
4.  通过启动`mesos-master`和`mesos-slave`过程配置阿帕奇 Mesos，如下所示:
    ```
    # sudo service mesos-master start
    # sudo service mesos-slave start
    ```
5.  Mesos will be running on port `5050`. As shown in the following screenshot, you can access the Mesos interface with your machine's IP address, here, `http://192.168.10.10:5050`:
    ![Docker containers](img/00029.jpeg)
6.  使用`mesos-execute`命令测试介子:
    ```
    # export MASTER=$(mesos-resolve `cat /etc/mesos/zk` 2>/dev/null)
    # mesos help
    # mesos-execute --master=$MASTER --name="cluster-test" --command="sleep 40"
    ```
7.  With the `mesos-execute` command running, enter *Ctrl* + *Z* to suspend the command. You can see how it appears in the web UI and command line:
    ```
    # hit ctrl-z
    # mesos ps --master=$MASTER
    ```
    中间层栈使用马拉松来管理流程和服务。它可以替代传统的初始化系统。它简化了集群环境中应用的运行。下图显示了带有马拉松的中间层主从拓扑:
    ![Docker containers](img/00030.jpeg)
    马拉松可以用来启动其他的 Mesos 框架；由于它是为长时间运行的应用设计的，它将确保它启动的应用将继续运行，即使它们运行的从节点出现故障。
8.  Start the Marathon service using the following command:
    ```
    # sudo service marathon start
    ```
    您可以在`http://192.168.10.10:8080`查看马拉松图形用户界面。