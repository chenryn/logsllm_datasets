all EQC targets, not just veriﬁers—so it generalizes lessons
from these works to a wider range of constraint systems.
Symbolic execution (symex) tools [93, 94] combine SMT
compilation of a single program path with, typically, either
concrete execution or forking strategies [37, 40, 95–102]; some
systems use a hybrid of symex and model checking [26].
After SMT compilation, different tools proceed differently:
many [37] fork execution at each conditional jump, some
use a mixture of concrete and symbolic (concolic) execu-
tion [40, 98], some combine static analysis and symex [101],
some combine symex and fuzzing [40, 100], and more. In
each case, the symbolic tool relies on a core component that
compiles programs to SMT.
Optimization Languages. A variety of tools translate from
high-level modeling languages to ILPs, including AMPL [31]
and Pyomo [32]. ILPs themselves are solved by a variety of
tools including Gurobi [103] and CBC [104].
3. Design
CirC is designed to make new compilers easy to build:
it should be easy for designers to add support for new input
languages and new target EQCs. In CirC (as in LLVM), de-
signers do so with new front-ends (e.g., for C) and new back-
ends (e.g., for R1CS). Front-ends target CirC’s intermediate
representation (IR) and back-ends lower from IR to a target
representation (Fig. 2).
In this section we present CirC’s IR, which is a repre-
sentation of an abstract EQC. We also present Circify, a
language-independent library for writing new CirC front-ends.
Section 4 discusses speciﬁc front-ends and back-ends.
3.1. CirC-IR
CirC’s IR is a rich circuit language and is thus state-free
and non-uniform; conceptually, this IR represents an abstract
EQC. It’s based on the SMT-LIB standard (§2.3), limited
to booleans, ﬂoating-point numbers, bit-vectors, and arrays.
These theories cover common primitive types in high-level
languages, but one can extend the IR with other theories. For
example, we have built an extension to the IR that adds a
notion of ﬁnite ﬁelds, since this type underlies R1CS (§2.2).
1 uint8_t cond_add(uint8_t x, uint8_t y, uint8_t z) {
2
if (x == 0)
y = y + z;
else if (y == 1)
y = y + z + z;
return y;
3
4
5
6
7 }
Figure 3. A small C program.
3.2. Circify: managing state when compiling to
CirC-IR
To support a new language, the ﬁrst step is to build a
front-end from that language to CirC-IR.
Building a front-end from scratch is hard. For example,
consider the C program in Figure 3. This program includes
variable mutations and conditional branches, two semantic
phenomena that cannot be directly represented in CirC-IR be-
cause EQCs do not support mutation or branching. Other chal-
lenges include functions with early returns, loops with break
or continue statements, and random-access memory, e.g.,
to access an array at a data-dependent index [11, 41, 53, 66].
While semantics of front-end languages differ in the details,
these challenges are similar across many languages. Taking
a broad view, we identify state as the key issue in these
challenges—the state of variables, the state of memory, and
even the state of the program counter. To help different lan-
guage front-ends overcome challenges related to state, CirC
provides Circify, a language-independent library for ex-
pressing state updates in CirC-IR.
Circify makes building front-ends easier. To construct a
front-end, a developer essentially writes an interpreter for the
source language using the Circify library.5 In particular,
Circify is responsible for managing the interpreter’s execu-
tion environment: interactions with variables (e.g., declarations
or mutations), functions (e.g., entry or returns), control ﬂow
(e.g., branches or breaks), lexical scopes, and even arrays (e.g.,
initializations, accesses), are delegated to Circify functions.
Circify automatically handles the details of expressing
stateful semantics in EQCs.
In the rest of this section, we describe Circify’s support
for variables and conditional branching. This is only a small
subset of Circify’s functionality, but it gives intuition for
how Circify and a language-speciﬁc interpreter interact.
At a high level, Circify handles variable mutation by
transforming the program into static single assignment form
using a standard technique [105]: each time the source pro-
gram assigns a new value to a variable, Circify creates a
fresh version of that variable in CirC-IR, then constrains this
version to be equal to the new value. For example, “x = 1”
turns into “x_i = 1” for the next unused version number i.
This naive approach works for straight-line code, but han-
dling control ﬂow requires a technique called guarding [66],
which works as follows: Circify records the conditions that
must hold for any given program path to execute, and then
guards all assignments on that path with those conditions. For
example, consider the assignment on line 3 of Figure 3: this
assignment only executes when x = 0. To achieve this, Cir-
cify uses an if-then-else (ITE) guard term, which evaluates
5. This is vaguely reminiscent of Serval [88]).
2252
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
1 data CVal = Bool IR.Bool
2
| Uint IR.BitVec
| Sint IR.BitVec
| Struct String [(String, CVal)]
-- arrays, array pointers, ...
3
4
5
Figure 4. C’s V-type, in Haskell. The IR module contains the CirC-IR
deﬁnition.
Interpreter
getVar (“x”)
Circify
Lang. def’n. intf.
x0
enterBranch (x0 = 0)
getVar (“y”), getVar (“z”)
y0, z0
mutVar (“y”, y0 + z0)
ite (x0 = 0, y0 + z0, y0)
ITE(x0 = 0, y0 + z0, y0)
assign (cs, “y1”,
ITE(x0 = 0, y0 + z0, y0))
cs.assert(y1 =
ITE(x0 = 0, y0 + z0, y0))
y1
exitBranch ()
enterBranch (x0 (cid:54)= 0)
Figure 5. Interactions between the ZoKrates front-end, Circify, and the
front-end’s language deﬁnition. Quotes denote strings, boldface denotes lan-
guage values or CirC-IR terms.
to the new value (y + z) when the condition is true (i.e.,
when x is zero), and to the old value (y) otherwise.
Much of this guarded versioning machinery is language-
independent. The only language-dependent pieces are: a deﬁ-
nition of language values, a function that assigns values, and
a function that constructs ITE terms over values. Together,
these three pieces comprise Circify’s language deﬁnition
interface, which Circify’s language-independent function-
ality uses to manipulate source language values. Simplifying
slightly, that interface comprises one type and two functions:
• V: a CirC-IR embedding of language values,
• assign(cs, id, v ∈ V): adds constraints to cs that assign (the
• ite(c, t ∈ V, f ∈ V) → V: takes a CirC-IR boolean c and
two language values t and f, and returns a language value
that equals t when c is true and f otherwise.
next version of) the variable id to value v, and
An example: Circify for C. Figure 4 shows part of our
C front-end’s V-type, CVal, a recursive data type. Its base
constructors wrap CirC-IR booleans and ﬁxed-width integers
(lines 1-3); there is also a recursive constructor for named
structures (line 4). The corresponding assign and ite deﬁnitions
are direct when their value arguments are non-recursive: they
simply emit an IR assignment or an IR ITE term for the
wrapped CirC-IR value. For values with recursive constructors,
these functions recursively deconstruct the values, emitting IR
assignments or IR ITE terms for each sub-value. For example,
calling assign with a v that is structure results in recursive
assign calls to each of the ﬁeld in the structure.
After deﬁning the Circify language deﬁnition interface
for C, completing the front-end requires (1) writing a parser
for the C source text, and (2) writing an interpreter that
2253
uses Circify’s functionality to translate stateful C code
into CirC-IR. As an example, consider the cond_add C
function in Figure 3. Figure 5 depicts the interpreter’s calls
to Circify, and Circify’s corresponding calls to the C
language deﬁnition interface as the interpreter steps through
this function line-by-line. After argument declarations (not
shown), the interpreter requires a few steps to interpret line 2.
First, it uses the Circify getVar function to retrieve the
IR representation of x’s current value; the result in this case is
x’s initial version, x0. Next, the interpreter builds the symbolic
condition x0 = 0, and uses Circify’s enterBranch to
indicate that subsequent calls are conditionally executed (only
when x0 = 0) until a matching exitBranch.
For line 3, the interpreter ﬁrst gets the values of y and z,
then calls Circify’s mutVar to set y to y0 + z0. Behind
the scenes, this causes Circify to use the functions provided
by the language deﬁnition interface. Speciﬁcally, Circify
invokes the ite function to build a new term that is conditioned
on the current path (where x0 = 0), then uses the assign
function to bind the next version of y (i.e., y1) to that term.
Finally, the interpreter exits the branch and enters the
alternative branch, i.e., the one corresponding to the x (cid:54)= 0
condition. The rest of the interpretation process is similar:
the interpreter walks the program, using Circify functions
to handle variable interactions and branching. In the next
paragraphs, we describe how the interpreter uses Circify
to handle other stateful operations.
Breakable blocks: the foundation for exceptional control
ﬂow. Most imperative languages include exceptional control
ﬂow (e.g., early returns). CirC supports exceptional control
ﬂow through a construct that we call the breakable block. A
breakable block comprises a sequence (block) of statements;
within that block, a break directs control ﬂow to the end of
the block. Early returns, loop breaks, continues, and try-catch
blocks can all be implemented using breakable blocks, but the
construct cannot simulate all control ﬂow (e.g., gotos).
i branchi∧(cid:86)
conjunction of enclosing branch conditions: c =(cid:86)
c =(cid:86)
We implement breakable blocks in CirC by extending the
guarding system. Recall that CirC guards the side-effects of
side-effect inducing statements on a condition c equal to the
i branchi.
For each breakable block i, Circify also stores the condition
under which the block has been broken out of as breaki.
Then, Circify guards side effects within the block under
i ¬breaki, and when Circify encounters
a break for block j, it updates breakj to (breakj ∨ c).
Scopes & functions. Circify supports function-local vari-
ables and lexical scoping rules. Circify exposes methods
for entering and exiting lexical scopes; variable lookups are
informed by this scoping structure. Circify also supports
function scopes; these hide the variables of enclosing scopes.
To compile a program to an EQC, the compiler must
inline all functions. Circify helps compiler-writers with
this task by supporting function scopes and return statements
(implemented using breakable blocks).
Early returns, breaks, and continues. Recall that a break-
able block is a sequence (block) of statements that can be
interrupted by a break, which (conditionally) jumps to the
end of the block. Circify implements returns by setting
the return value and jumping to the end of a breakable block
containing the function body. Similarly, one can implement
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
1 n = getBound(loop)
2 circify.enterBreakable(loop.label)
3 for i in {0, .., n-1}:
4
cond = compileExpr(loop.cond).asBool()
circify.enterBranch(cond)
circify.enterScope()
# may contain: circify.break(label)
compileStmt(loop.body)
circify.exitScope()
5
6
7
8
9
10 for i in {0, .., n-1}:
circify.exitBranch()
11
12 circify.exitBreakable()
Figure 6. Pseudocode for loop-handling in a Circify-based compiler.
serialize their
loop breaks by jumping to the end of a breakable block
containing the whole loop, and continues by jumping to the
end of a breakable block containing just the loop body.
An example: loops with lexical scopes and breaks. Circuits
are non-uniform, so circuit compilers must unroll loops. In
CirC, front-ends implement unrolling. Figure 6 shows pseudo-
code for how a front-end might unroll a while-loop. First, the
front-end decides how many times to unroll the loop (line 1);
this information may come from a programmer annotation or
an SMT-assisted analysis (§7.1). In each unrolling, the front-
end branches on the loop’s condition (lines 3, 4) and enters a
lexical scope (line 5). It then compiles the loop body; within
the body, loop breaks target the breakable block that begins
on line 2 and ends on line 12. Finally, the front-end exits the
lexical scope (line 9) and the branches (line 11).
Stack Arrays. Circify supports accesses to dynamic lo-
cations within statically-known stack arrays of bit-vectors.
Compiler developers must
types as bit-
vectors to use stack arrays. Circify supports allocat-
ing stack arrays (using “circify.alloc(addr_bits,
val_bits, size)”); allocation returns a concrete alloca-
tion identiﬁer, id. Loads and stores use id to indicate which
array to access. Load operations take a concrete id and a
CirC-IR offset; they return an IR value. Store operations take
a concrete id, an IR offset, and an IR value. The effect of a
store operation is guarded on the current path condition.
References. Circify supports ﬁxed references to (poten-
tially out-of-scope) variables, similar to C++. References are
modeled as a kind of location, similar to a variable. Refer-
ences can be created to any variable, and Circify allows
new values to be written to references. Circify’s reference
system is useful for capturing C pointers with ﬁxed referents,
e.g., pointers used as output arguments.
An example: functions and references. Figure 7 shows an
example of how a front-end uses Circify’s reference and
function support. This example calls a function with signature
int f(bool& out, int a, int b). Line 1 creates a
reference to callee variable mybool, line 2 enters the new
function scope, and line 3 binds the function-local variable
out to the reference. Lines 4 and 5 set function-local variables
a and b to constants. We elide the function body (line 6); note
that is may include early return statements. Finally, line 7 exits
the function and fetches the return value.
Together, Circify’s features provide a useful framework
for constructing front-ends for new languages. Once a lan-
guage designer has used Circify to attach a front-end to
1 ref = circify.mkRef("mybool")
2 circify.enterFn("f", CTy::Int)
3 circify.declAssign("out", ref)
4 circify.declAssign("a", cInt(5))
5 circify.declAssign("b", cInt(6))
6 # ... fn body, including circify.return(val)
7 retVal = circify.exitFn()
Figure 7. Pseudocode for references and function calls.
CirC, they can create their own optimizations over CirC-IR or
use any existing ones.
3.3. IR Optimization
Once a front-end has compiled its input to CirC-IR, the
optimization phase begins. CirC includes a large suite of CirC-
IR–based optimizations that language designers can selectively
apply, depending on their input language and target circuit.
Many optimizations are standard, e.g., constant-folding, n-ary