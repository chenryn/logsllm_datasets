web sockets protocol instead of getting an HTTP response and closing the
socket.
websocket 是由用户代理发送一条“切换到 web sockets”特殊 HTTP 请求开始的。HTTP
请求所使用的 TCP 连接仍然保持开启状态，而不是在获取到一个 HTTP 响应后关闭，同时
用户代理和服务器端则切换到使用 web sockets 协议。
Note that it is still the browser or user agent that initiates the Web socket
connection. The browser does not run a TCP server of its own. While the
specification is complex, the protocol is designed to be fairly easy to
use. The client opens an HTTP connection and then replaces the HTTP protocol
with its own WS protocol, re-using the same TCP connection.
值得注意的是，仍然是由浏览器或者用户代理来发起一条 Web socket 连接的。浏览器自
身并没有运行一个 TCP 服务器？？虽然规范很复杂,但协议还是设计得相当易用的。客户
端开启一条 HTTP 连接，接着用 WS 协议取代 HTTP 协议，重用了同一条 TCP 连接。
15.2 Web socket server Web socket 服务器端
A web socket server starts off by being an HTTP server, accepting TCP
conections and handling the HTTP requests on the TCP connection. When a
request comes in that switches that connection to a being a web socket
connection, the protocol handler is changed from an HTTP handler to a
WebSocket handler. So it is only that TCP connection that gets its role
changed: the server continues to be an HTTP server for other requests, while
the TCP socket underlying that one connection is used as a web socket.
web socket 服务器端最初是 HTTP 服务器端，接受 TCP 连接，处理该连接上的 HTTP 请
求。当将该连接变换成 web socket 连接的请求到来之后，协议处理器从一个 HTTP 处理
器转变成 WebSocket 处理器。所以仅仅是 TCP 连接的角色变化了：当前连接所有的 TCP
socket 被当成 web socket 来使用;对于其它请求而言，服务器仍然是一个 HTTP 服务器。
One of the simple servers HHTP we discussed in Chapter 8: HTTP registered
varous handlers such as a file handler or a function handler. To handle
web socket requests we simply register a different type of handler - a web
socket handler. Which handler the server uses is based on the URL pattern.
For example, a file handler might be registered for "/", a function handler
for "/cgi-bin/..." and a web sockets handler for "/ws".
在章节 8: HTTP 里我们讨论的一个简单的服务器注册了各式各样的处理器，例如文件处
理器、函数处理器等。为了处理 web socket 请求，我们仅需另外注册一种类型的处理器
-web socket 处理器。服务器基于 URL 模式来选出对应处理器。例如，"/"为文件处理器，
"/cgi-bin/..."为函数处理器，"/ws"为 web sockets 处理器。
An HTTP server that is only expecting to be used for web sockets might run
by
如下将运行一个仅用于 web sockets 的 HTTP 服务器
func main() {
http.Handle("/", websocket.Handler(WSHandler))
err := http.ListenAndServe(":12345", nil)
checkError(err)
}
A more complex server might handle both HTTP and web socket requests simply
by adding in more handlers.
通过添加更多的处理器，一个更为复杂的服务器可以同时处理 HTTP 请求和 web socket
请求。
15.3 The Message object Message 对象
HTTP is a stream protocol. Web sockets are frame-based. You prepare a block
of data (of any size) and send it as a set of frames. Frames can contain
either strings in UTF-8 encoding or a sequence of bytes.
HTTP 是流协议。Web sockets 是基于帧的。你可以生成任意大小的一块数据，将其作为
一组帧来发送。帧可以包含 UTF-8 编码的字符串或者字节序列。
The simplest way of using web sockets is just to prepare a block of data
and ask the Go websocket library to package it as a set of frame data, send
them across the wire and receive it as the same block. The websocket package
contains a convenience object Message to do just that. The Message object
has two methods, Send and Receive which take a websocket as first parameter.
The second parameter is either the address of a variable to store data in,
or the data to be sent. Code to send string data would look like
最简单的使用 web sockets 的方法就是准备好数据块然后让 Go 的 websocket 库将其封
装成一组帧数据，通过网络线路发送，然后接收生成同样的数据块。websocket 包里有个
很好使的 Message 对象来做这些。Message 对象有 Send 和 Receive 两个方法，它们的第一
个参数是一个 websocket 对象，第二个参数是存放数据的地址。发送字符串数据的代码
示例如下
msgToSend := "Hello"
err := websocket.Message.Send(ws, msgToSend)
var msgToReceive string
err := websocket.Message.Receive(conn, &msgToReceive)
Code to send byte data would look like
发送字节序列的代码示例如下
dataToSend := []byte{0, 1, 2}
err := websocket.Message.Send(ws, dataToSend)
var dataToReceive []byte
err := websocket.Message.Receive(conn, &dataToReceive)
An echo server to send and receive string data is given below. Note that
in web sockets either side can initiate sending of messages, and in this
server we send messages from the server to a client when it connects
(send/receive) instead of the more normal receive/send server. The server
is
下面将给出一个发送和接收字符串数据的 echo 服务器代码。值得注意的是，在 web
sockets 协议里，各边都可以发起消息的发送。这回，当客户端连接后，服务器端先向客
户端发送消息(发送/接收)，而不是传统的接收/发送。服务器端代码如下
/* EchoServer
*/
package main
import (
"fmt"
"net/http"
"os"
// "io"
"code.google.com/p/go.net/websocket"
)
func Echo(ws *websocket.Conn) {
fmt.Println("Echoing")
for n := 0; n < 10; n++ {
msg := "Hello " + string(n+48)
fmt.Println("Sending to client: " + msg)
err := websocket.Message.Send(ws, msg)
if err != nil {
fmt.Println("Can't send")
break
}
var reply string
err = websocket.Message.Receive(ws, &reply)
if err != nil {
fmt.Println("Can't receive")
break
}
fmt.Println("Received back from client: " + reply)
}
}
func main() {
http.Handle("/", websocket.Handler(Echo))
err := http.ListenAndServe(":12345", nil)
checkError(err)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
A client that talks to this server is
和服务器端进行会话的客户端代码如下
/* EchoClient
*/
package main
import (
"code.google.com/p/go.net/websocket"
"fmt"
"io"
"os"
)
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "ws://host:port")
os.Exit(1)
}
service := os.Args[1]
conn, err := websocket.Dial(service, "", "http://localhost")
checkError(err)
var msg string
for {
err := websocket.Message.Receive(conn, &msg)
if err != nil {
if err == io.EOF {
// graceful shutdown by server
break
}
fmt.Println("Couldn't receive msg " + err.Error())
break
}
fmt.Println("Received from server: " + msg)
// return the msg
err = websocket.Message.Send(conn, msg)
if err != nil {
fmt.Println("Coduln't return msg")
break
}
}
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
The url for the client running on the same machine as the server should
be ws://localhost:12345/
当客户端和服务器端运行在同一台机器上时，客户端所需的 url 参数
是 ws://localhost:12345/。
15.4 The JSON object JSON 对象
It is expected that many websocket clients and servers will exchange data
in JSON format. For Go programs this means that a Go object will be marshalled
into JSON format as described in Chapter 4: Serialisation and then sent
as a UTF-8 string, while the receiver will read this string and unmarshal
it back into a Go object.
正如所预期的那样，许多 websocket 客户端和服务器端希望通过 JSON 格式来进行数据交
换。在 Go 程序里，这意味着 Go 中的对象将编组成 JSON 格式（在章节 4: Serialisation
里有描述）然后以 UTF-8 字符串发送；而接收方将读取该字符串然后将其解组成 Go 对象。
The websocket convenience object JSON will do this for you. It has
methods Send and Receive for sending and receiving data, just like
the Message object.
websocket 里的 JSON 对象将很方便地为你做这些。它带有 Send 和 Receive 两个方法来发
送接收数据，正如 Message 对象。
A client that sends a Person object in JSON format is
下面这个客户端将以 JSON 格式来发送 Person 对象
/* PersonClientJSON
*/
package main
import (
"code.google.com/p/go.net/websocket"
"fmt"
"os"
)
type Person struct {
Name string
Emails []string
}
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "ws://host:port")
os.Exit(1)
}
service := os.Args[1]
conn, err := websocket.Dial(service, "",
"http://localhost")
checkError(err)
person := Person{Name: "Jan",
Emails: []string{"PI:EMAIL", "PI:EMAIL"},
}
err = websocket.JSON.Send(conn, person)
if err != nil {
fmt.Println("Couldn't send msg " + err.Error())
}
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
and a server that reads it is
读取该数据的服务器端
/* PersonServerJSON
*/
package main
import (
"code.google.com/p/go.net/websocket"
"fmt"
"net/http"
"os"
)
type Person struct {
Name string
Emails []string
}
func ReceivePerson(ws *websocket.Conn) {
var person Person
err := websocket.JSON.Receive(ws, &person)
if err != nil {
fmt.Println("Can't receive")
} else {
fmt.Println("Name: " + person.Name)
for _, e := range person.Emails {
fmt.Println("An email: " + e)
}
}
}
func main() {
http.Handle("/", websocket.Handler(ReceivePerson))
err := http.ListenAndServe(":12345", nil)
checkError(err)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
15.5 The Codec type Codec 类型
The Message and JSON objects are both instances of the type Codec. This type
is defined by
Message 对象和 JSON 对象都是 类型 Codec 的实例。该类型的定义如下
type Codec struct {
Marshal func(v interface{}) (data []byte, payloadType byte, err os.Error)
Unmarshal func(data []byte, payloadType byte, v interface{}) (err os.Error)
}
The type Codec implements the Send and Receive methods used earlier.
Codec 类型实现了前面提及的 Send 和 Receive 方法。
It is likely that websockets will also be used to exchange XML data. We
can build an XML Codec object by wrapping the XML marshal and unmarshal
methods discussed in Chapter 12: XML to give a suitable Codecobject.
websocket同样可能被用来交换XML数据。我们可以通过包含章节 12: XML里提及的XML
marshal 和 unmarshal 函数来创建一个合适的 Codec 对象。
We can create a XMLCodec package in this way:
我们将以这种方式来创建 XMLCodec 包
package xmlcodec
import (
"encoding/xml"
"code.google.com/p/go.net/websocket"
)
func xmlMarshal(v interface{}) (msg []byte, payloadType byte, err error) {
//buff := &bytes.Buffer{}
msg, err = xml.Marshal(v)
//msgRet := buff.Bytes()
return msg, websocket.TextFrame, nil
}
func xmlUnmarshal(msg []byte, payloadType byte, v interface{}) (err error) {
// r := bytes.NewBuffer(msg)
err = xml.Unmarshal(msg, v)
return err
}
var XMLCodec = websocket.Codec{xmlMarshal, xmlUnmarshal}
We can then serialise Go objects such as a Person into an XML document and
send it from a client to a server by
接下来我们就可以序列化像 Person 这样的 Go 对象到 XML 文档，然后发送给服务器端
/* PersonClientXML
*/
package main
import (
"code.google.com/p/go.net/websocket"
"fmt"
"os"
"xmlcodec"
)
type Person struct {
Name string
Emails []string
}
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "ws://host:port")
os.Exit(1)
}
service := os.Args[1]
conn, err := websocket.Dial(service, "", "http://localhost")
checkError(err)
person := Person{Name: "Jan",
Emails: []string{"PI:EMAIL", "PI:EMAIL"},
}
err = xmlcodec.XMLCodec.Send(conn, person)
if err != nil {