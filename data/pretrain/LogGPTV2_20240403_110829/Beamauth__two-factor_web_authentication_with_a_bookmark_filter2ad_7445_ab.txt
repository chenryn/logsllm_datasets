does not trigger a page reload : the page simply scrolls to
the position indicated by the new fragment identiﬁer (or,
again, does nothing if no such position exists). In the two
dominant browsers, Internet Explorer and Firefox, this ab-
sence of reload remains true no matter how the initial URL
was loaded, regardless of the cache preferences on the down-
loaded page: even a page with strict no-cache HTTP headers
that results from a POST operation is not reloaded when only
the fragment identiﬁer changes. Thus, all page state, be it
local JavaScript variables or HTML form inputs entered by
the user, remains unaﬀected when the fragment identiﬁer
changes.
There are small exceptions to these otherwise consistent
rules. In Opera, changing the fragment identiﬁer on a page
that results from a POST does, in fact, trigger a reload, this
time as a GET. In Safari, a change in fragment identiﬁer
triggered by an external source, e.g. clicking a bookmark
or manually entering a new fragment identiﬁer rather than
clicking a link within the web page itself, does trigger a
reload even if the primary URL does not change. Because
these two browsers make up a notable 5% of web users [49],
we special-case their support with extra server-side over-
head: any form parameters are stored in a server-side ses-
sion, so that the user can always end up at a GET URL
without any URL parameters.
2.2 JavaScript Features
Fragment Identiﬁers. In all browsers, window.location.
hash is a read/write JavaScript variable that corresponds to
the fragment identiﬁer as it appears in the browser’s address
bar. Changing the value of this variable updates the address
bar without reloading the page, scrolls the viewport to the
appropriate location (if it exists), and results in the new
URL being added to the browser’s history.
When we want to change the value of this fragment identi-
ﬁer without leaving a trace in the browser history, for exam-
ple to clear a secret token from view, we use a slightly diﬀer-
ent mechanism. The JavaScript function window.location.
replace() updates the URL (including the fragment iden-
tiﬁer) without adding the previous URL to the history. It is
as if the previous URL was never visited.
JavaScript Bookmark. It is tempting, for our purposes,
to use a JavaScript bookmark, also known as a bookmarklet
or favelet, which is eﬀectively a small piece of JavaScript
code that is executed when the bookmark is clicked. Some
early prototypes of this work were implemented accordingly.
Unfortunately, this code cannot be expected to behave cor-
rectly, because the bookmark’s JavaScript is executed in the
context of the current page. A malicious page might override
any command, even the standard JavaScript API, thereby
completely altering the behavior of the bookmark code and
likely revealing the secret token to the attacker. (Some vari-
ables are declared constant in the JavaScript speciﬁcation
and should provide a safe baseline for such techniques, but
most browsers do not respect these constraints, and it is
risky to rely on consistent JavaScript behavior across all
browsers for security purposes.)
2.3 Web Authentication Security
We brieﬂy review the types of attacks that web users most
often face when performing online authentication and how
current HTTP security features address them.
1. passive sniﬃng: users often access web sites over
open or insecure wi-ﬁ access points, unswitched local
wired networks, or corporate proxies. The URLs they
request and the content they receive are easily snif-
fable when SSL is not used. The damage from these
kinds of attacks is unclear, as most non-SSL-using web
sites are small providers. However, the threat is well
understood: while the W3C does not mandate SSL,
the W3C’s technical advisory group is considering rec-
ommending that login credentials never be sent in the
clear [40].
2. social engineering: users are easily fooled by mali-
cious sites that visually spoof legitimate sites to steal
credentials. Financial institutions are the typical tar-
get, though other e-commerce sites are also targeted
when there is an eventual ﬁnancial gain. Users gener-
ally don’t check the URL or even the SSL padlock of
their connections [11]. The damage from these attacks
is well documented and signiﬁcant [19], and carrying
out such an attack is fairly trivial.
The most advanced type of attack in this category is
the pharming attack, where a DNS record or even an
IP address is spoofed to make the user believe she is
visiting the correct site. This type of attack is on the
rise via malicious open wi-ﬁ base stations, which users
tend to trust in their thirst for Internet access “on the
go.” Even when an incorrect SSL certiﬁcate raises a
ﬂag, users tend to ignore the warning [11]. This prob-
lem may be somewhat alleviated with Internet Ex-
plorer 7’s strong disincentive to visit inconsistent SSL
sites. However, to our knowledge, there is no reliable
data yet as to whether user behavior is signiﬁcantly
aﬀected.
3. desktop compromise: a surprisingly high number of
desktop computers are compromised with malware [29].
Users of these compromised machines have zero guar-
antee of any security: all security indicators may be
faked, and all host names may be hijacked. SSL is use-
less. Damage from these attacks is signiﬁcant, though
carrying out such an attack is typically more involved
than either passive sniﬃng or social engineering.
SSL is not enough. It is clear that SSL is not enough to
protect against desktop compromise attacks. It is also rela-
tively well understood that, for high-value applications, SSL
is still not enough to protect against social engineering at-
tacks, as evidenced by the depressingly high success of such
social engineering attacks. The key issue is that, even with
SSL, the web remains treacherous: a momentary lapse in
judgment, and Alice may be tricked into thinking that two
‘v’s are actually a ‘w’ [11]. As a result, some suggest that
high-value sites resort to two-factor authentication, where
at least one factor is not easily stolen from an inattentive
user.
2.4 Goals of Our Proposal
We aim to make it more diﬃcult to carry out social en-
gineering attacks against customers of high-value web sites.
High-value web sites should have an easy and relatively se-
cure way to implement two-factor authentication without
resorting to browser plugins or physical tokens. We speciﬁ-
cally aim to provide a “safety net” for users, so that a mo-
ment of inattention will not immediately result in identity
theft. In other words, we are attempting to make phishing
signiﬁcantly more diﬃcult for the attacker. Importantly, we
also aim aim to not interfere with other proposals that may
help address sophisticated pharming attacks, which we do
not address.
3. THE BEAMAUTH PROTOCOL
We consider high-value web sites, including in particular
the single-sign-on use case in its many forms, where Alice
is sent to her login page by a third-party web site, some-
times called the relying party because it relies on an authen-
tication process performed by another party. For example,
Flickr sends its users to Yahoo for authentication, and any
web application can use Yahoo in the same way with Yahoo
BBauth [51]. A growing number of web applications use
OpenID [39] for authentication, where the relying party is
expected to redirect Alice to her OpenID server. A number
of university networks also use this same technique: Har-
vard University’s PIN system [21] and Stanford’s WebLogin
system [44] are two prominent examples, where peripheral
sites send users to the central login site which, after authen-
tication, redirects the users back to the peripheral site with
an authentication token.
In all of these cases, phishing is of great concern, since
Alice is sent to her login page by the site requesting authen-
tication. It has been noted in particular that OpenID may
make phishing easier because Alice explicitly discloses her
identity provider, and thus the identity provider’s look-and-
feel, to a potentially evil site [7, 30]. We aim to mitigate
phishing attacks in this widespread scenario.
3.1 The Bookmark
With BeamAuth, we transform a typical browser book-
mark into a second factor for web-based authentication, us-
ing a secret token in the bookmarked URL’s fragment iden-
tiﬁer:
http://site.com/login#[username|secret_token]
The User Login Ritual. Alice may reach a site she wishes
to visit either by normal navigation (e.g. entering a URL in
the address bar, clicking a link, etc.), or by choosing one of
her bookmarks. Assuming Alice has already set up her Bea-
mAuth bookmark at a particular site, we consider her login
ritual when she happens upon the login page by navigation
or manual URL entering, and we note that it is only slightly
more complicated than the typical username/password pro-
cess:
1. The web site prompts Alice: “click your BeamAuth
Bookmark.”
2. Alice clicks her bookmark, which updates the login
page with her username, and the page now prompts
her for her password.
3. Alice enters her password and clicks “Submit.”
4. If both the bookmark token and the password are cor-
rect, Alice is correctly logged in.
Note how, by including Alice’s username in her bookmark,
this process may be immediately advantageous to Alice: she
has less typing to do. This optimization should probably
not be used if Alice’s username has some external secret sig-
niﬁcance, e.g. a social security number, as an attacker who
gains momentary physical access to Alice’s machine could
then read this data easily.
Interestingly, if Alice chooses to use her bookmark as one
might expect – to reach her site in the ﬁrst place – the login
ritual skips immediately to Step 3. The two-factor protec-
tion remains, and Alice’s username is also ﬁlled in automat-
ically.
Setting up the Bookmark. To set up the BeamAuth book-
mark within her browser, Alice must follow an initial au-
thentication process that is inherently more involved than
the everyday login. This should be done using a second-
channel authentication mechanism, using, for example, a cell
phone SMS [50], or an email mail-back [16]. We speciﬁcally
recommend the email mail-back option, as it requires only
an email client, which can easily provide a clickable URL
containing a veriﬁcation code that sends Alice right back to
her browser. Many web sites already perform a mail-back
veriﬁcation to ensure that the user’s email address is correct:
BeamAuth can easily bootstrap oﬀ this existing process.
When Alice clicks on this veriﬁcation URL, the web page
she reaches provides her with a link that she can easily drag-
and-drop onto her bookmarks/favorites toolbar. Of course,
the veriﬁcation link sent via email should be secure in au-
thentication and in content:
the veriﬁcation code in the
URL should never be sent in the clear. This can be achieved
using SSL, so that a veriﬁcation URL sent by email looks
like:
https://site.com/confirm?vc=
It can even be done by placing the actual token in the frag-
ment identiﬁer, so that the token is truly never sent over the
network, never logged by the web server, etc.:
The get-bookmark page is then a simple HTML template
with bundled JavaScript that ﬁlls in the template on the
client side by extracting the secret token in the fragment
identiﬁer:
bookmark_link.href =
‘https://site.com/login’ + window.location.hash;
Re-Initialization and Multiple Computers. Though it is
less likely than a cookie deletion, it is certainly possible that
Alice will delete her BeamAuth bookmark by mistake. It is
also very likely that Alice uses more than one browser, on
more than one computer. All of these cases amount to the
same problem: how often does Alice need to perform the
initialization procedure, and will this be an impediment to
using BeamAuth? Signiﬁcant user testing will be required
to answer these questions, but a few signs indicate that, for
high-value sites, the situation may well be acceptable.
The simplest approach is to instruct Alice to keep the
signup email around until she has set up all of her web
browsers. She can visit the setup page and install the Bea-
mAuth bookmark once on every browser she uses. If she loses
the signup email, the BeamAuth-protected web site can lead
Alice through a sequence of veriﬁcation questions—similar
to SiteKey [3]—and eventually send her a new copy of the
signup email. Note that the token is always sent via a sec-
ond channel, even if the veriﬁcation questions are answered
via the primary web channel.
Note also that bookmark synchronization is useful for
many other purposes, not just BeamAuth. Google’s Browser-
Sync [18] provides encrypted bookmark synchronization for
Firefox, while Sync2It [45] provides the same functionality
for all browsers, and Apple’s dotMac [13] provides it for Sa-
fari. Any of these solutions is a good way to enable Alice to
initialize one browser and synchronize the BeamAuth book-
mark to all of her other browsers. Though BeamAuth makes
special use of the fragment identiﬁer, the “secret sauce” is in
the site’s JavaScript, not in the bookmark itself: the Bea-
mAuth bookmark will be synchronized just like any other.
3.2 The Mechanism
A BeamAuth login page contains JavaScript that regu-
larly polls the value of the fragment identiﬁer (entirely lo-
cally, causing neither network activity nor server-side pro-
cessing). When Alice clicks her bookmark, the URL is up-
dated (without reloading) to include the token [username|
secret_token], and the BeamAuth JavaScript poller reads
this token from the fragment identiﬁer. It then ﬁlls in the
login form with Alice’s username, and saves the secret token
into a local variable. The JavaScript then clears the frag-
ment identiﬁer so that the secret token is no longer visible
in the URL address bar nor the browser’s history.
When Alice submits the form with her password, the Bea-
mAuth JavaScript code intercepts the form submit, HMAC’s
the password with the secret token, and securely submits
this resulting credential to the server. Security of this trans-
fer is ensured either via SSL or, if SSL is not available, using
some kind of challenge-response approach such as that im-
plemented by Yahoo [15].
Interestingly, the server need only store
//site.com/get-bookmark#[username|secret_token]
hmacsecret token (password)
https:
never the password in the clear. This is eﬀectively the same
thing as keeping passwords stored hashed with a salt, a
common recommendation for any password-based login sys-
tem, except the salt-and-hash operation is performed on the
client side in JavaScript, with the salt provided via a sec-
ond channel—the bookmark. The security of this setup is
not weakened, because we expect that the transfer of the re-
sulting hmacsecret token (password) will be secured either by