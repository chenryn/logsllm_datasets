65
            return ds;
66
        }catch (Exception e){
67
            throw new RuntimeException(e);
68
        }
69
    }
70
}
71
3.基于XML配置的AOP实现 
3.1 spring中基于XML的AOP配置步骤
1、把通知Bean也交给spring来管理
2、使⽤aop:conﬁg标签表明开始AOP的配置
3、使⽤aop:aspect标签表明配置切⾯
      id属性：是给切⾯提供⼀个唯⼀标识
      ref属性：是指定通知类bean的Id。
4、在aop:aspect标签的内部使⽤对应标签来配置通知的类型
我们现在示例是让printLog⽅法在切⼊点⽅法执⾏之前之前：所以是前置通知
aop:before：表示配置前置通知
method属性：⽤于指定Logger类中哪个⽅法是前置通知
pointcut属性：⽤于指定切⼊点表达式，该表达式的含义指的是对业务层中哪些⽅法增强
3.2 切⼊点表达式的写法
关键字：execution(表达式)
表达式：
访问修饰符  返回值  包名.包名.包名...类名.⽅法名(参数列表)
标准的表达式写法：
public void com.itheima.service.impl.AccountServiceImpl.saveAccount()
访问修饰符可以省略
void com.itheima.service.impl.AccountServiceImpl.saveAccount()
返回值可以使⽤通配符，表示任意返回值
* com.itheima.service.impl.AccountServiceImpl.saveAccount()
包名可以使⽤通配符，表示任意包。但是有⼏级包，就需要写⼏个*.
* *.*.*.*.AccountServiceImpl.saveAccount())
包名可以使⽤..表示当前包及其⼦包
* *..AccountServiceImpl.saveAccount()
类名和⽅法名都可以使⽤*来实现通配
* *..*.*()
参数列表：
可以直接写数据类型：
基本类型直接写名称           int
引⽤类型写包名.类名的⽅式   java.lang.String
可以使⽤通配符表示任意类型，但是必须有参数
可以使⽤..表示有⽆参数均可，有参数可以是任意类型
全通配写法：
* *..*.*(..)
实际开发中切⼊点表达式的通常写法：
切到业务层实现类下的所有⽅法
* com.itheima.service.impl.*.*(..)
3.3 例⼦
测试AOP的配置
import com.itheima.service.IAccountService;
1
import org.springframework.context.ApplicationContext;
2
import org.springframework.context.support.ClassPathXmlApplicationContext;
3
xml⽂件
4
/**
5
 * 测试AOP的配置
6
 */
7
public class AOPTest {
8
9
    public static void main(String[] args) {
10
        //1.获取容器
11
        ApplicationContext ac = new 
ClassPathXmlApplicationContext("bean.xml");
12
        //2.获取对象
13
        IAccountService as = 
(IAccountService)ac.getBean("accountService");
14
        //3.执行方法
15
        as.saveAccount();
16
        as.updateAccount(1);
17
        as.deleteAccount();
18
    }
19
}
20
1
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
4.环绕通知
环绕通知
问题：
     当我们配置了环绕通知之后，切⼊点⽅法没有执⾏，⽽通知⽅法执⾏了。
分析：
     通过对⽐动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切⼊点⽅法调⽤，
⽽我们的代码中没有。
解决：
     Spring框架为我们提供了⼀个接⼝：ProceedingJoinPoint。该接⼝有⼀个⽅法proceed()，
此⽅法就相当于明确调⽤切⼊点⽅法。
     该接⼝可以作为环绕通知的⽅法参数，在程序执⾏时，spring框架会为我们提供该接⼝的实
现类供我们使⽤。
spring中的环绕通知：
     它是spring框架为我们提供的⼀种可以在代码中⼿动控制增强⽅法何时执⾏的⽅式。
/**
1
 * 用于记录日志的工具类，它里面提供了公共的代码
2
 */
3
public class Logger {
4
5
    /**
6
     * 前置通知
7
     */
8
    public  void beforePrintLog(){
9
        System.out.println("前置通知Logger类中的beforePrintLog方法开始记录日志
了。。。");
10
    }
11
12
    /**
13
     * 后置通知
14
     */
15
    public  void afterReturningPrintLog(){
16
        System.out.println("后置通知Logger类中的afterReturningPrintLog方法开
始记录日志了。。。");
17
    }
18
    /**
19
     * 异常通知
20
     */
21
    public  void afterThrowingPrintLog(){
22
        System.out.println("异常通知Logger类中的afterThrowingPrintLog方法开始
记录日志了。。。");
23
    }
24
25
    /**
26
     * 最终通知
27
     */
28
    public  void afterPrintLog(){
29
5.基于注解配置的AOP实现 
@Aspect、@Before、@AfterReturning、@AfterThrowing、@After、@Around
        System.out.println("最终通知Logger类中的afterPrintLog方法开始记录日志
了。。。");
30
    }
31
32
    public Object aroundPringLog(ProceedingJoinPoint pjp){
33
        Object rtValue = null;
34
        try{
35
            Object[] args = pjp.getArgs();//得到方法执行所需的参数
36
37
            System.out.println("Logger类中的aroundPringLog方法开始记录日志
了。。。前置");
38
39
            rtValue = pjp.proceed(args);//明确调用业务层方法（切入点方法）
40
41
            System.out.println("Logger类中的aroundPringLog方法开始记录日志
了。。。后置");
42
43
            return rtValue;
44
        }catch (Throwable t){
45
            System.out.println("Logger类中的aroundPringLog方法开始记录日志
了。。。异常");
46
            throw new RuntimeException(t);
47
        }finally {
48
            System.out.println("Logger类中的aroundPringLog方法开始记录日志
了。。。最终");
49
        }
50
    }
51
}
52
import org.aspectj.lang.ProceedingJoinPoint;
1
import org.aspectj.lang.annotation.*;
2
import org.springframework.stereotype.Component;
3
4
/**
5
 * 用于记录日志的工具类，它里面提供了公共的代码
6
 */
7
@Component("logger")
8
@Aspect//表示当前类是一个切面类
9
public class Logger {
10
11
    @Pointcut("execution(* com.itheima.service.impl.*.*(..))")
12
    private void pt1(){}
13
14
    /**
15
     * 前置通知
16
     */
17
//    @Before("pt1()")
18
    public  void beforePrintLog(){
19
        System.out.println("前置通知Logger类中的beforePrintLog方法开始记录日志
了。。。");
20
    }
21
22
    /**
23
     * 后置通知
24
     */
25
//    @AfterReturning("pt1()")
26
    public  void afterReturningPrintLog(){
27
        System.out.println("后置通知Logger类中的afterReturningPrintLog方法开
始记录日志了。。。");
28
    }
29
    /**
30
     * 异常通知
31
     */
32
//    @AfterThrowing("pt1()")
33
    public  void afterThrowingPrintLog(){
34
        System.out.println("异常通知Logger类中的afterThrowingPrintLog方法开始
记录日志了。。。");
35
    }
36
37
    /**
38
     * 最终通知
39
     */
40
//    @After("pt1()")
41
    public  void afterPrintLog(){
42
        System.out.println("最终通知Logger类中的afterPrintLog方法开始记录日志
了。。。");
43
    }
44
45
    /**
46
     * 环绕通知
47
     * 问题：
48
     *      当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。
49
     * 分析：
50
     *      通过对比动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切入点
方法调用，而我们的代码中没有。
51
     * 解决：
52
     *      Spring框架为我们提供了一个接口：ProceedingJoinPoint。该接口有一个方
法proceed()，此方法就相当于明确调用切入点方法。
53
     *      该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供
该接口的实现类供我们使用。
54
     *
55
     * spring中的环绕通知：
56
     *      它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方
式。
57
bean.xml
6.使⽤Conﬁguration类配置注解
五、参考资料
     */
58
    @Around("pt1()")
59
    public Object aroundPringLog(ProceedingJoinPoint pjp){
60
        Object rtValue = null;
61
        try{
62
            Object[] args = pjp.getArgs();//得到方法执行所需的参数
63
64
            System.out.println("Logger类中的aroundPringLog方法开始记录日志
了。。。前置");
65
66
            rtValue = pjp.proceed(args);//明确调用业务层方法（切入点方法）
67
68
            System.out.println("Logger类中的aroundPringLog方法开始记录日志
了。。。后置");
69
70
            return rtValue;
71
        }catch (Throwable t){
72
            System.out.println("Logger类中的aroundPringLog方法开始记录日志
了。。。异常");
73
            throw new RuntimeException(t);
74
        }finally {
75
            System.out.println("Logger类中的aroundPringLog方法开始记录日志
了。。。最终");
76
        }
77
    }
78
}
79
《Spring 5开发⼤全》
https://www.bilibili.com/video/BV1mE411X7yp?p=92&t=170