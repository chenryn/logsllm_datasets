title:Aquila: a practically usable verification system for production-scale
programmable data planes
author:Bingchuan Tian and
Jiaqi Gao and
Mengqi Liu and
Ennan Zhai and
Yanqing Chen and
Yu Zhou and
Li Dai and
Feng Yan and
Mengjing Ma and
Ming Tang and
Jie Lu and
Xionglie Wei and
Hongqiang Harry Liu and
Ming Zhang and
Chen Tian and
Minlan Yu
Aquila: A Practically Usable Verification System for
Production-Scale Programmable Data Planes
Bingchuan Tian★†△, Jiaqi Gao§†△, Mengqi Liu†, Ennan Zhai†, Yanqing Chen★, Yu Zhou†, Li Dai†, Feng Yan†,
Mengjing Ma†, Ming Tang†, Jie Lu†, Xionglie Wei†, Hongqiang Harry Liu†, Ming Zhang†, Chen Tian★, Minlan Yu§
†Alibaba Group
§Harvard University
★Nanjing University
ABSTRACT
This paper presents Aquila, the first practically usable verification
system for Alibaba’s production-scale programmable data planes.
Aquila addresses four challenges in building a practically usable
verification: (1) specification complexity; (2) verification scalabil-
ity; (3) bug localization; and (4) verifier self validation. Specifically,
first, Aquila proposes a high-level language that facilitates easy ex-
pression of specifications, reducing lines of specification codes by
tenfold compared to the state-of-the-art. Second, Aquila constructs
a sequential encoding algorithm to circumvent the exponential
growth of states associated with the upscaling of data plane pro-
grams to production level. Third, Aquila adopts an automatic and
accurate bug localization approach that can narrow down suspects
based on reported violations and pinpoint the culprit by simulating
a fix for each suspect. Fourth and finally, Aquila can perform self
validation based on refinement proof, which involves the construc-
tion of an alternative representation and subsequent equivalence
checking. To this date, Aquila has been used in the verification of
our production-scale programmable edge networks for over half
a year, and it has successfully prevented many potential failures
resulting from data plane bugs.
CCS CONCEPTS
• Software and its engineering → Formal methods; • Net-
works → Programmable networks.
KEYWORDS
Formal Methods; Programmable Switches; P4 Verification
ACM Reference Format:
Bingchuan Tian, Jiaqi Gao, Mengqi Liu, Ennan Zhai, Yanqing Chen, Yu
Zhou, Li Dai, Feng Yan, Mengjing Ma, Ming Tang, Jie Lu, Xionglie Wei,
Hongqiang Harry Liu, Ming Zhang, Chen Tian and Minlan Yu. 2021. Aquila:
A Practically Usable Verification System for Production-Scale Programmable
Data Planes. In ACM SIGCOMM 2021 Conference (SIGCOMM ’21), August
23–27, 2021, Virtual Event, USA. ACM, New York, NY, USA, 16 pages. https:
//doi.org/10.1145/3452296.3472937
△Both authors contributed equally to the paper.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8383-7/21/08...$15.00
https://doi.org/10.1145/3452296.3472937
1 INTRODUCTION
As a prominent online service provider, Alibaba operates a global
network infrastructure serving over one billion customers, offering
diverse services including cloud, e-commerce, and video. In order
to provide end users with faster services (e.g., IoT and CDN) at rea-
sonable costs, Alibaba has built and is operating a large number of
edge networks, each consisting of hundreds of light-weight servers
with tight space constraints and CPU compute limitations. As ser-
vices today constantly evolve in size, it is becoming increasingly
difficult for these resource-constrained edge networks to handle
the ever-growing traffic, a situation that could severely undermine
the performance of business services. This prompted us to look into
solutions to offload a group of network functions (e.g., load balanc-
ing, firewall, and NAT) from the server, with a goal to conserve
CPU resources for better performance.
Recent advances in programmable switching ASICs have equipped
us with the ability to implement network functions in the data plane
using P4 language, opening up new cost-effective solutions to sig-
nificantly improve the performance of our edge networks, in terms
of both functionality and efficiency as well as flexibility. First, we
can offload a group of network functions from the edge servers to
the switch data plane to significantly save on the constrained server
CPU resources. Second, we can implement the network functions
on programmable ASICs at Tbps speeds for packets. Finally, we can
introduce additional flexibility in network function updates as the
business evolves, by directly programming the switch data plane.
Given these advantages, we have widely adopted programmable
switches in our edge networks.
Nevertheless, the deployment of programmable switches also
inevitably introduces new challenges. Given the evolving scale and
diversity of our services, the data plane programs in our edge net-
works are greatly increasing in complexity. The data plane program
of each switch consists of thousands lines of P4 code in multiple
pipelines, each pipeline holding a number of network functions. Net-
work functions across different pipelines are tangled with various
packet paths, resulting in complex function chain logical relations
within a single programmable device. Therefore, it has become a
great challenge for our network engineers to ensure the correctness
of data plane programs of such complexity.
Among methods of checking correctness, testing (e.g., p4pktgen [36])
is the most straightforward. However, it is too expensive and com-
plicated to test programmable devices with diverse packet formats
and operations [30, 48]. A number of previous efforts have focused
on the rigorous verification of programmable data planes, such
as p4v [30], Vera [48], bf4 [11], p4-assert [35], and p4-NOD [32].
While these state-of-the-art efforts work well in principle, in re-
ality in our situation, they fail to address a number of technical
obstacles and limitations that affect the practical usage experience
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Tian et al.
of our engineers. Under the existing methods, our engineers have
encountered drawbacks in both specification expression and ver-
ification efficiency, as well as violation localization and verifier
self-validation.
Alibaba therefore decided to build a verification system that
not only provides a rigorous guarantee on the correctness of our
production-scale programmable data planes, but also meets the
practical usage requirements of our network engineers. A practi-
cally usable verification system that satisfies our purpose should
holistically and simultaneously achieve the following features: first,
it should enable our network engineers to express their correctness
specifications with ease; second, it should be able to efficiently ver-
ify the production-scale data plane programs within few minutes;
third, upon detection of a violation, it should be able to automat-
ically and accurately localize the bugs in the data planes and the
table entries; and fourth, the system should have the ability to
self-validate its own implementation correctness, thus delivering
confidence in its verification results.
This paper shares our real-life experience with building a prac-
tically usable verification system, Aquila, as shown in Figure 1,
for Alibaba’s production-scale programmable data planes. To sat-
isfy the aforementioned feature requirements, we have specifically
addressed the following challenges.
Challenge 1: Specification complexity. Properties in our pro-
duction context are complex and related to specific service purposes,
such as “for each packet with headers ‘eth, optional vlan, ipv4 (or
ipv6), tcp’, the tcp header remains unchanged after passing through
the switch” as shown in Figure 3. This requires encapsulations of
commonly-used property assertions and comprehensive property
supports, enabling our engineers to describe their intent with ease.
However, prior work does not meet the above requirements. First,
the state of the art employed low-level specification languages, e.g.,
first-order logic, and both Vera and p4v, for example, need 20+ lines
of specifications to express just a single (above-mentioned) prop-
erty. While a recent work bf4 [11] has focused on automatically
inferring annotations for undefined behaviors, e.g., invalid header
and out-of-register checking, it is unable to infer properties related
to specific services (called service-specific properties), such as “the
DSCP value of each packet destinating 10/8 should be changed to
three”. In our network, service-specific properties account for 90%
of our specifications. Second, existing tools fail to support impor-
tant properties (e.g., multi-pipeline control, recirculation, deparsing,
and checksum), which are widely used in our production.
We, therefore, propose a new specification language, LPI, that
encapsulates commonly-used properties with declarative grammar
and supports comprehensive properties for parser, MAUs (match-
action units) and switch architecture, such as multi-pipeline, header
parsing/deparsing, and recirculation. LPI reduces lines of specifica-
tions by tenfold compared to previous low-level languages.
Challenge 2: Verification scalability. Our production-scale P4
programs typically contain (1) many network functions, each with
thousands lines of P4 code, across multiple pipelines, and (2) com-
plex parser programs with thousands of dependencies across states.
Such a complexity results in the exponential growth of states and
program branches to be verified, outgrowing a solver’s compute
capability. For example, when our engineers used p4v and Vera to
Figure 1: Aquila’s practically usable workflow.
check an INT-enabled switch.p4, which is just a part of our CDN
P4 program (in Figure 2), p4v crashed due to the state explosion
of encoded formula, and Vera triggered a timeout, let alone check-
ing the entire program. To address the scalability challenge, we
propose a novel sequential encoding algorithm to circumvent the
exponential growth of states associated with the upscaling of data
plane programs to production level. Our experiments show our
approach verifies our production-scale programs in an efficient
way (see Table 3 and Figure 11).
Challenge 3: Bug localization. While verification can tell specifi-
cations are violated, it is non-trivial to automatically, accurately find
the root cause in the production P4 program, because a violation
might be caused by diverse root causes, especially in P4 context,
such as incorrect table entries and table action missing. Aquila
proposes a novel algorithm that narrows down suspect variables
and actions based on reported violations and pinpoints the culprit
by simulating a fix for each suspect. Our experiments show that
this approach can accurately find out the root causes in real-world
buggy P4 programs, saving a lot of debugging time.
Challenge 4: Verifier self validation. Verifer implementation er-
rors are headache in practice, since they badly affect the accuracy of
verification results. We did incur bugs during Aquila development.
To identify Aquila implementation errors, we build a self validator
based on refinement proof [33, 39], which checks the GCL (guarded
command language) semantic equivalence between Aquila and
alternative. We successfully identified errors in the Aquila develop-
ment such as incorrect encoding and language misunderstanding.
Real-world evaluation. Aquila has been used to verify our pro-
grammable edge networks for half a year, and successfully detected
many bugs, preventing service downtime. After Aquila is used, no
failures resulting from data plane bugs occurred so far.§7 shares real
cases we met in practice. §8 compares Aquila with the state-of-the-
art verification tools, e.g., p4v and Vera, by verifying open-source
and production P4 programs. Aquila outperforms these tools in
verification scalability and specification expressing.
2 OVERVIEW
Alibaba has a global network infrastructure to support its world-
wide online services, including cloud, e-commerce, and video, which
have more than one billion users. By Jan. 2021, we have built many
edge networks—consisting of O(100) PoP (point of presence) nodes
and O(1000) edge sites in total—to ensure to offer end users fast,
high-quality services. To offer high throughput (Tbps speeds) and
save CPU resources, our edge networks have widely deployed pro-
grammable switches to offload a group of network functions (e.g.,
load balancing, firewall and DDoS defense) from software to pro-
grammable switching ASIC hardware.
NetworkEngineerVerification (§4)No ViolationDebugging ReportViolationSelf Validator (§6)AquilaBug Localization (§5)Specification (§3)SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Figure 3: Specification comparison with prior work. This ex-
ample describes a real property: for each packet with head-
ers ‘eth, optional vlan, ipv4 (or ipv6), tcp’, the tcp header re-
mains unchanged after passing through the switch.
1
2
3
4
5
6
7
8
9
10
action a1() { ig_md.ttl = ipv4.ttl; }
action a2() { ig_md.drop = 1; }
action a3() { ipv4.ttl = ig_md.ttl; }
apply {
a1();
if(ig_md.ttl == 0) { a2(); }
// ig_md.ttl = ig_md.ttl - 1; //bug: statement missing
...
a3();
} // Specification: assert ipv4.ttl == @ipv4.ttl - 1
Figure 4: A bug example in switch.p4 (pipeline 0).
data plane, shown in Figure 2, such as (i) is a specified packet
processed according to the sequence shown in Figure 2, and (ii)
whether table 𝑎 in the egress scheduler is only hit by a specified
packet. Existing tools (e.g., Vera [48] and p4v [30]) only provide
low-level languages, which are hard to express our intent. Figure 3
shows an example snippet that expresses a real property: for each
packet with headers ‘eth, optional vlan, ipv4 (or ipv6), tcp’, the tcp
header remains unchanged after passing through the switch. We
can observe that p4v and Vera describe such a simple property with
many lines of specifications.
(2) Verification. Our production P4 programs, e.g., Figure 2, are
large and complex. Existing verification approaches are not scalable
to check them. For example, when we used p4v and Vera to check
switch.p4 in Figure 2, they triggered out-of-memory and timeout,
respectively, let alone the entire hyper-converged program.
(3) Bug localization. Manually localizing bugs in the production
program, as shown in Figure 2, is time-consuming, even though
we know the specification is violated. Many bug localization tools
for general-purpose languages like C and Haskell [7, 27, 40, 44, 53]
have been proposed. These tools, in principle, extract a counterex-
ample when violation occurs and then find root causes iteratively
negating counterexamples. However, these efforts do not work in
P4 debugging context due to two limitations. (i) Bugs resulting from
statement missing (e.g., the bug in Figure 4), commonly existed in
our hyper-converged programs, cannot be localized by prior work.
(ii) These general-purpose language debugging tools cannot localize
the bugs in P4-specific semantics. For example, P4 parser supports
Figure 2: An example hyper-converged data plane within a
single edge switch for Alibaba’s CDN service.
Figure 2 shows a real example of a single programmable switch in
our edge network. We call such an architecture involving multiple
P4 functions in a single programmable switch as hyper-converged
data plane. In this example, this switch uses P416 to implement
four functions (switch, load balancer, scheduler and firewall) across
its four pipelines, respectively. Pipeline 1 and 3 employ pipeline
recirculation to allow packets to go through the ingress and egress
programs multiple times. Note that we can also implement multiple