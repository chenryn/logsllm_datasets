```
// 结果
// 1 |
```
#### websocket
是的，你完全可以创建一个 websocket 连接然后把它暴露给流：
```
import { webSocket } from 'rxjs/webSocket'; 
let socket$ = webSocket('ws://localhost:8081');
// 接收消息
socket$.subscribe(
  (msg) => console.log('message received: ' + msg),
  (err) => console.log(err),
  () => console.log('complete') * );
// 发送消息
socket$.next(JSON.stringify({ op: 'hello' }));
```
把 websocket 功能添加到你的应用中真的很简单。*websocket* 创建一个 subject。这意味着你可以订阅它，通过调用 `next` 来获得消息和发送消息。
#### ajax
如你所知：类似于 websocket，提供 AJAX 查询的功能。你可能用了一个带有 AJAX 功能的库或者框架。或者你没有用，那么我建议使用 fetch（或者必要的话用 polyfill），把返回的 promise 封装到一个 observable 对象中（参考稍后会讲到的 `defer` 函数）。
### 定制流
有时候已有的函数用起来并不是足够灵活。或者你需要对订阅有更强的控制。
#### 主题（`Subject`）
`Subject` 是一个特殊的对象，它使得你的能够把数据发送到流中，并且能够控制数据。`Subject` 本身就是一个可观察对象，但如果你想要把流暴露给其它代码，建议你使用 `asObservable` 方法。这样你就不能意外调用原始方法。
```
const subject = new Subject();
const observable = subject.asObservable();
observable.subscribe();
subject.next(1);
subject.next(2);
subject.complete();
```
```
// 结果
// 1 2 |
```
注意在订阅前发送的值将会“丢失”：
```
const subject = new Subject();
const observable = subject.asObservable();
subject.next(1);
observable.subscribe(console.log);
subject.next(2);
subject.complete();
```
```
// 结果
// 2
```
除了常规的 `Subject`，RxJS 还提供了三种特殊的版本。
`AsyncSubject` 在结束后只发送最后的一个值。
```
const subject = new AsyncSubject();
const observable = subject.asObservable();
observable.subscribe(console.log);
subject.next(1);
subject.next(2);
subject.complete();
```
```
// 输出
// 2
```
`BehaviorSubject` 使得你能够提供一个（默认的）值，如果当前没有其它值发送的话，这个值会被发送给每个订阅者。否则订阅者收到最后一个发送的值。
```
const subject = new BehaviorSubject(1);
const observable = subject.asObservable();
const subscription1 = observable.subscribe(console.log);
subject.next(2);
subscription1.unsubscribe();
```
```
// 输出
// 1
// 2
```
```
const subscription2 = observable.subscribe(console.log);
// 输出
// 2
```
`ReplaySubject` 存储一定数量、或一定时间或所有的发送过的值。所有新的订阅者将会获得所有存储了的值。
```
const subject = new ReplaySubject();
const observable = subject.asObservable();
subject.next(1);
observable.subscribe(console.log);
subject.next(2);
subject.complete();
```
```
// 输出
// 1
// 2
```
你可以在 [ReactiveX 文档](http://reactivex.io/documentation/subject.html)（它提供了一些其它的连接） 里面找到更多关于 `Subject` 的信息。[Ben Lesh](https://medium.com/@benlesh) 在 [On The Subject Of Subjects](https://medium.com/@benlesh/on-the-subject-of-subjects-in-rxjs-2b08b7198b93) 上面提供了一些关于 `Subject` 的理解，[Nicholas Jamieson](https://medium.com/@cartant) 在 [in RxJS: Understanding Subjects](https://blog.angularindepth.com/rxjs-understanding-subjects-5c585188c3e1) 上也提供了一些理解。
#### 可观察对象
你可以简单地用 new 操作符创建一个可观察对象。通过你传入的函数，你可以控制流，只要有人订阅了或者它接收到一个可以当成 `Subject` 使用的观察者，这个函数就会被调用，比如，调用 `next`、`complet` 和 `error`。
让我们回顾一下列表示例：
```
const myList = new List();
myList.add(1);
myList.add(3);
new Observable(observer => {
  for (let i = 0; i {
  // 流式化
  return () => {
                 //clean up
               };
})
.subscribe();
```
#### 继承可观察对象
在有可用的操作符前，这是一种实现自定义操作符的方式。RxJS 在内部扩展了 *可观察对象* 。`Subject` 就是一个例子，另一个是 `publisher` 操作符。它返回一个 `ConnectableObservable` 对象，该对象提供额外的方法 `connect`。
#### 实现 `Subscribable` 接口
有时候你已经用一个对象来保存状态，并且能够发送值。如果你实现了 `Subscribable` 接口，你可以把它转换成一个可观察对象。`Subscribable` 接口中只有一个 `subscribe` 方法。
```
interface Subscribable {  subscribe(observerOrNext?: PartialObserver | ((value: T) => void), error?: (error: any) => void, complete?: () => void): Unsubscribable}
```
### 结合和选择现有的流
知道怎么创建一个独立的流还不够。有时候你有好几个流但其实只需要一个。有些函数也可作为操作符，所以我不打算在这里深入展开。推荐看看 [Max NgWizard K](https://medium.com/@maximus.koretskyi) 所写的一篇 [文章](https://blog.angularindepth.com/learn-to-combine-rxjs-sequences-with-super-intuitive-interactive-diagrams-20fce8e6511)，它还包含一些有趣的动画。
还有一个建议：你可以通过拖拽元素的方式交互式的使用结合操作，参考 [RxMarbles](http://rxmarbles.com/#merge)。
#### ObservableInput 类型
期望接收流的操作符和函数通常不单独和可观察对象一起工作。相反，它们实际上期望的参数类型是 ObservableInput，定义如下：
```
type ObservableInput = SubscribableOrPromise | ArrayLike | Iterable;
```
这意味着你可以传递一个 promises 或者数组却不需要事先把他们转换成可观察对象。
#### defer
主要的目的是把一个 observable 对象的创建延迟（`defer`）到有人想要订阅的时间。在以下情况，这很有用：
* 创建可观察对象的开销较大
* 你想要给每个订阅者新的可观察对象
* 你想要在订阅时候选择不同的可观察对象
* 有些代码必须在订阅之后执行
最后一点包含了一个并不起眼的用例：Promises（`defer` 也可以返回一个 promise 对象）。看看这个用到了 fetch API 的例子：
```
function getUser(id) {
  console.log("fetching data");
  return fetch(`https://server/user/${id}`);
}
const userPromise = getUser(1);
console.log("I don't want that request now");
// 其它地方
userPromise.then(response => console.log("done");
```
```
// 输出
// fetching data
// I don't want that request now
// done
```
只要流在你订阅的时候执行了，promise 就会立即执行。我们调用 `getUser` 的瞬间，就发送了一个请求，哪怕我们这个时候不想发送请求。当然，我们可以使用 `from` 来把一个 promise 对象转换成可观察对象，但我们传递的 promise 对象已经创建或执行了。`defer` 让我们能够等到订阅才发送这个请求：
```
const user$ = defer(() => getUser(1));
console.log("I don't want that request now");
// 其它地方
user$.subscribe(response => console.log("done");
```
```
// 输出
// I don't want that request now
// fetching data
// done
```
#### iif
`iif` 包含了一个关于 `defer` 的特殊用例：在订阅时选择两个流中的一个：
```
iif(
  () => new Date().getHours()  
> 实际上 [iif](https://rxjs-dev.firebaseapp.com/api/index/iif) 能够轻松地用 [defer](https://rxjs-dev.firebaseapp.com/api/index/defer) 实现，它仅仅是出于方便和可读性的目的。
> 
> 
> 
#### onErrorResumeNext
开启第一个流并且在失败的时候继续进行下一个流。错误被忽略掉。
```
const stream1$ = of(1, 2).pipe(
  tap(i => { if(i>1) throw 'error'}) //fail after first element
);
const stream2$ = of(3,4);
onErrorResumeNext(stream1$, stream2$)
  .subscribe(console.log);
```
```
// 结果
// 1 3 4 |
```
如果你有多个 web 服务，这就很有用了。万一主服务器开启失败，那么备份的服务就能自动调用。
#### forkJoin
它让流并行运行，当流结束时发送存在数组中的最后的值。由于每个流只有最后一个值被发送，它一般用在只发送一个元素的流的情况，就像 HTTP 请求。你让请求并行运行，在所有流收到响应时执行某些任务。
```
function handleResponses([user, account]) {
  // 执行某些任务
}
forkJoin(
  fetch("https://server/user/1"),
  fetch("https://server/account/1")
)
.subscribe(handleResponses);
```
#### merge / concat
发送每一个从可观察对象源中发出的值。
`merge` 接收一个参数，让你定义有多少流能被同时订阅。默认是无限制的。设为 1 就意味着监听一个源流，在它结束的时候订阅下一个。由于这是一个常见的场景，RxJS 为你提供了一个显示的函数：`concat`。
```
merge(
  interval(1000).pipe(mapTo("Stream 1"), take(2)),
  interval(1200).pipe(mapTo("Stream 2"), take(2)),
  timer(0, 1000).pipe(mapTo("Stream 3"), take(2)),
  2 //two concurrent streams
)
.subscribe();
// 只订阅流 1 和流 2
// 输出
// Stream 1 -> after 1000ms
// Stream 2 -> after 1200ms
// Stream 1 -> after 2000ms
// 流 1 结束后，开始订阅流 3
// 输出
// Stream 3 -> after 0 ms
// Stream 2 -> after 400 ms (2400ms from beginning)
// Stream 3 -> after 1000ms
merge(
  interval(1000).pipe(mapTo("Stream 1"), take(2)),
  interval(1200).pipe(mapTo("Stream 2"), take(2))
  1
)
// 等效于
concat(
  interval(1000).pipe(mapTo("Stream 1"), take(2)),
  interval(1200).pipe(mapTo("Stream 2"), take(2))
)
// 输出
// Stream 1 -> after 1000ms
// Stream 1 -> after 2000ms
// Stream 2 -> after 3200ms
// Stream 2 -> after 4400ms
```
#### zip / combineLatest
`merge` 和 `concat` 一个接一个的发送所有从源流中读到的值，而 `zip` 和 `combineLatest` 是把每个流中的一个值结合起来一起发送。`zip` 结合所有源流中发送的第一个值。如果流的内容相关联，那么这就很有用。
```
zip(
  interval(1000),
  interval(1200),
)
.subscribe();
```
```
// 结果
// [0, 0] [1, 1] [2, 2] ...
```
`combineLatest` 与之类似，但结合的是源流中发送的最后一个值。直到所有源流至少发送一个值之后才会触发事件。这之后每次源流发送一个值，它都会把这个值与其他流发送的最后一个值结合起来。
```
combineLatest(
  interval(1000),
  interval(1200),
)
.subscribe();
```
```
// 结果
// [0, 0] [1, 0] [1, 1] [2, 1] ...
```
两个函数都让允许传递一个选择器函数，把元素结合成其它对象而不是数组：
```
zip(
  interval(1000),
  interval(1200),
  (e1, e2) -> e1 + e2
)
.subscribe();
```
```
// 结果
// 0 2 4 6 ...
```
#### race
选择第一个发送数据的流。产生的流基本是最快的。
```
race(
  interval(1000),
  of("foo")
)
.subscribe();
```
```
// 结果
// foo |
```
由于 `of` 立即产生一个值，因此它是最快的流，然而这个流就被选中了。
### 总结
已经有很多创建可观察对象的方式了。如果你想要创造响应式的 API 或者想用响应式的 API 结合传统 API，那么了解这些方法很重要。
我已经向你展示了所有可用的方法，但它们其实还有很多内容可以讲。如果你想更加深入地了解，我极力推荐你查阅 [文档](http://reactivex.io/documentation/operators.html#creating) 或者阅读相关文章。
[RxViz](https://rxviz.com/) 是另一种值得了解的有意思的方式。你编写 RxJS 代码，产生的流可以用图形或动画进行显示。
---
via: 
作者：[Oliver Flaggl](https://blog.angularindepth.com/@abetteroliver) 译者：[BriFuture](https://github.com/BriFuture) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出