### Overview of .NET Deserialization Vulnerabilities

#### JavaScriptSerializer
- **Namespace**: `System.Web.Script.Serialization.JavaScriptSerializer`
- **Default Behavior**: Does not include type discriminator information.
- **Type Resolver**: Can be used to include this information.
- **Weak Type Control**: Post-deserialization cast operation.
- **During Deserialization**:
  - Calls setters.
- **Security Considerations**:
  - Can be used securely as long as a type resolver is not used or the type resolver is configured to whitelist valid types.

```csharp
JavaScriptSerializer sr = new JavaScriptSerializer(new SimpleTypeResolver());
string reqdInfo = apiService.authenticateRequest();
reqdDetails det = (reqdDetails)(sr.Deserialize(reqdInfo));
```

#### DataContractJsonSerializer
- **Namespace**: `System.Runtime.Serialization.Json.DataContractJsonSerializer`
- **Behavior**:
  - Performs a strict type graph inspection and whitelist creation.
  - If the attacker can control the expected type used to configure the deserializer, they can gain code execution.
- **During Deserialization**:
  - Invokes setters and serialization constructors.
- **Security Considerations**:
  - Can be used securely as long as the expected type cannot be controlled by users.

```csharp
var typename = cookie["typename"];
var serializer = new DataContractJsonSerializer(Type.GetType(typename));
var obj = serializer.ReadObject(ms);
```

#### Json.NET
- **Type Discriminators**: Not included unless `TypeNameHandling` setting other than `None` is used.
- **Behavior**:
  - Inspects the Expected Type’s Object Graph.
  - Invokes setters, serialization callbacks, and type converters.
- **Security Considerations**:
  - Use `SerializationBinder` to whitelist Types if `TypeNameHandling` is required.

```csharp
public class Message { 
    [JsonProperty(TypeNameHandling = TypeNameHandling.All)] 
    public object Body { get; set; } 
}
```

### Example: Breeze (CVE-2017-9424)
- **Fixed in Version**: Breeze 1.6.5 onwards.
- **Serializer Settings**: 
  - http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/com/sun/rowset/JdbcRowSetImpl.java/
- **Unsafe Deserialization & Entrypoint**:
  - https://github.com/Breeze/breeze.server.net/blob/master/AspNet/Breeze.ContextProvider/ContextProvider.cs

### Related Research
- **Java Unmarshaller Security**:
  - Author: Moritz Bechler
  - Parallel research published on May 22, after our research was accepted for BlackHat.
  - Focuses exclusively on Java.
  - Overlaps with our research on Jackson and JSON-IO libraries, and includes the `JdbcRowSetImpl.setAutoCommit` gadget.
  - https://github.com/mbechler/marshalsec

### .NET Formatters
- **Introduction**:
  - Attacks on .NET formatters are not new.
  - James Forshaw introduced them at BlackHat 2012 for `BinaryFormatter` and `NetDataContractSerializer`.
  - Goals:
    - Raise awareness about the perils of .NET deserialization.
    - Present new vulnerable formatters scenarios.
    - Present new gadgets.
  - Need new gadgets that work with formatters other than `BinaryFormatter`.

#### PSObject Gadget (CVE-2017-8565)
- **Bridges to Custom Deserializer**:
  - https://github.com/stangelandcl/pash-1/blob/master/System.Management.Automation/System.Management.Automation/PSObject.cs
- **Capabilities**:
  - Call the constructor of any public Type with one argument (attacker-controlled).
  - Call any setters of public properties for the attacker-controlled type.
  - Call the static public `Parse(string)` method of the attacker-controlled type.
  - https://github.com/stangelandcl/pash-1/blob/master/System.Management.Automation/System.Management.Automation/LanguagePrimitives.cs

#### XAML Payload
- **Example**:
  - `System.Windows.Markup.XamlReader.Parse()` -> `Process.Start("calc")`

### .NET Native Formatters
| Name | Format | Additional Requirements | Comments |
|------|--------|-------------------------|----------|
| BinaryFormatter | Binary | No | ISerializable gadgets |
| SoapFormatter | SOAP XML | No | ISerializable gadgets |
| NetDataContractSerializer | XML | No | ISerializable gadgets |
| JavaScriptSerializer | JSON | Insecure TypeResolver | Setters gadgets |
| DataContractSerializer | XML | Control of expected Type or knownTypes or weak DataContractResolver | Setters gadgets, Some ISerializable gadgets |
| DataContractJsonSerializer | JSON | Control of expected Type or knownTypes | Setters gadgets, Some ISerializable gadgets |
| XmlSerializer | XML | Control of expected Type | Quite limited; does not work with interfaces |
| ObjectStateFormatter | Text, Binary | No | Uses BinaryFormatter internally; TypeConverters gadgets |
| LosFormatter | Text, Binary | No | Uses ObjectStateFormatter internally |
| BinaryMessageFormatter | Binary | No | Uses BinaryFormatter internally |
| XmlMessageFormatter | XML | Control of expected Type | Uses XmlSerializer internally |

### Example: NancyFX (CVE-2017-9785)
- **Fixed in Version**: 1.4.4 / 2.0-dangermouse onwards.
- **CSRF Cookie**:
  - Latest stable version used a `BinaryFormatter` serialized cookie (1.x).
  - Pre-released 2.x used a custom JSON parser to make it compatible with .NET Core first versions.
  - Pre-auth Remote Code Execution in both versions.

### Generalizing the Attacks
- **Requirements for Arbitrary Code Execution**:
  1. Attacker can control the type to be instantiated upon deserialization.
  2. Methods are called on the reconstructed objects.
  3. Gadget space is big enough to find types we can chain to get RCE.
- **Examples**:
  - **FsPickler (xml/binary)**: A fast, multi-format messaging serializer for .NET. Includes arbitrary Type discriminators, invokes setters, and ISerializable constructor and callbacks.
  - **SharpSerializer**: XML and binary serialization for .NET and Silverlight. Includes arbitrary Type discriminators and invokes setters.
  - **Wire/Hyperion**: A high-performance polymorphic serializer for the .NET framework used by Akka.NET. JSON.NET with `TypeNameHandling = All` or custom binary one, includes Type discriminators, and invokes setters and ISerializable constructor and callbacks.

### Beware of Rolling Your Own Format
- **NancyFX**:
  - Custom JSON parser replacing `BinaryFormatter` (Pre-released 2.x) to make it compatible with .NET Core first versions.
- **DotNetNuke CMS (DNN Platform)**:
  - Wraps `XmlSerializer` around a custom XML format which includes the type to be used to create the `XmlSerializer`.

### Overcoming XmlSerializer Constraints
- **Constraints**:
  - Types with interface members cannot be serialized.
- **Workarounds**:
  - `System.Windows.Data.ObjectDataProvider` is `XmlSerializer` friendly.
  - `XamlReader.Load(String)` -> RCE
  - `ObjectStateFormatter.Deserialize(String)` -> RCE
  - `DotNetNuke.Common.Utilities.FileSystemUtils.PullFile(String)` -> WebShell
  - `DotNetNuke.Common.Utilities.FileSystemUtils.WriteFile(String)` -> Read files
  - Use a parametrized Type to “teach” `XmlSerializer` about runtime types.

### Example: DotNetNuke (CVE-2017-9822)
- **Fixed in Version**: DNN Platform 9.1.1 or EVOQ 9.1.1 onwards.
- **Source**:
  - https://github.com/dnnsoftware/Dnn.Platform/blob/a142594a0c18a589cb5fb913a022eebe34549a8f/DNN%20Platform/Library/Services/Personalization/PersonalizationController.cs#L72
- **Sink**:
  - https://github.com/dnnsoftware/Dnn.Platform/blob/a142594a0c18a589cb5fb913a022eebe34549a8f/DNN%20Platform/Library/Common/Utilities/XmlUtils.cs#L201

### Wrap-Up
- **Main Takeaways**:
  - Do not deserialize untrusted data!
  - If you really need to, ensure the security of the chosen library.
  - Avoid libraries without strict Type control.
  - Type discriminators are necessary but not sufficient conditions.
  - Never use user-controlled data to define the deserializer's expected Type.
  - Do not roll your own format.

Thank you!

Alvaro Muñoz (@pwntester) & Oleksandr Mirosh