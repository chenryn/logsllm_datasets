(1 row)  
postgres=# select * from c;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:31:34.491555  
  2 | 2013-02-04 15:32:19.168515  
(2 rows)  
SESSION A :   
postgres=# insert into a (id, crt_time) values (4, clock_timestamp()) returning id,crt_time;  
 id |          crt_time            
----+----------------------------  
  4 | 2013-02-04 15:34:35.589298  
(1 row)  
INSERT 0 1  
postgres=# select txid_current();  
 txid_current   
--------------  
         1694  
(1 row)  
postgres=# commit;  
COMMIT  
-- 本例的第5个还原点.(recovery_target_xid='1694')  
postgres=# select * from a;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:30:44.091741  
  2 | 2013-02-04 15:31:19.57222  
  3 | 2013-02-04 15:32:00.226317  
  4 | 2013-02-04 15:34:35.589298  
(4 rows)  
postgres=# select * from b;  
 id |         crt_time            
----+---------------------------  
  1 | 2013-02-04 15:31:05.93215  
(1 row)  
postgres=# select * from c;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:31:34.491555  
  2 | 2013-02-04 15:32:19.168515  
(2 rows)  
SESSION B :   
postgres=# begin;  
BEGIN  
postgres=# insert into b (id, crt_time) values (2, clock_timestamp()) returning id,crt_time;  
 id |          crt_time            
----+----------------------------  
  2 | 2013-02-04 15:35:02.348599  
(1 row)  
INSERT 0 1  
SESSION C :   
postgres=# begin;  
BEGIN  
postgres=# insert into c (id, crt_time) values (3, clock_timestamp()) returning id,crt_time;  
 id |          crt_time            
----+----------------------------  
  3 | 2013-02-04 15:35:18.284565  
(1 row)  
INSERT 0 1  
postgres=# select txid_current();  
 txid_current   
--------------  
         1698  
(1 row)  
postgres=# commit;  
COMMIT  
-- 本例的第6个还原点.(recovery_target_xid='1698')  
postgres=# select * from a;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:30:44.091741  
  2 | 2013-02-04 15:31:19.57222  
  3 | 2013-02-04 15:32:00.226317  
  4 | 2013-02-04 15:34:35.589298  
(4 rows)  
postgres=# select * from b;  
 id |         crt_time            
----+---------------------------  
  1 | 2013-02-04 15:31:05.93215  
(1 row)  
postgres=# select * from c;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:31:34.491555  
  2 | 2013-02-04 15:32:19.168515  
  3 | 2013-02-04 15:35:18.284565  
(3 rows)  
SESSION B :   
postgres=# select txid_current();  
 txid_current   
--------------  
         1697  
(1 row)  
postgres=# rollback;  
ROLLBACK  
-- 本例的第7个还原点.(recovery_target_xid='1697')  
postgres=# select * from a;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:30:44.091741  
  2 | 2013-02-04 15:31:19.57222  
  3 | 2013-02-04 15:32:00.226317  
  4 | 2013-02-04 15:34:35.589298  
(4 rows)  
postgres=# select * from b;  
 id |         crt_time            
----+---------------------------  
  1 | 2013-02-04 15:31:05.93215  
(1 row)  
postgres=# select * from c;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:31:34.491555  
  2 | 2013-02-04 15:32:19.168515  
  3 | 2013-02-04 15:35:18.284565  
(3 rows)  
SESSION E :   
postgres=# checkpoint;  
select pg_switch_xlog();  
checkpoint;  
select pg_switch_xlog();CHECKPOINT  
postgres=# select pg_switch_xlog();  
 pg_switch_xlog   
----------------  
 0/5002CB0  
(1 row)  
postgres=# checkpoint;  
CHECKPOINT  
postgres=# select pg_switch_xlog();  确保已归档  
 pg_switch_xlog   
----------------  
 0/60000D8  
(1 row)  
```  
4\.   
关闭数据库 :   
```  
ocz@db-172-16-3-150-> pg_ctl stop -m fast  
waiting for server to shut down.... done  
server stopped  
```  
5\.   
## 还原测试  
### 注意  
1\. 每测试1个还原点后, 测试下一个还原点时重新从基础备份开始.   
2\. 还原前修改postgresql.conf的archive_command. 以免启动数据库后覆盖以前的arch.  
```  
archive_command = 'cp %p /data05/ocz/pgbak/archnew/%f'  
```  
## 1  
还原到第1个还原点, recovery_target_name='test1',  
recovery_target_inclusive对于还原目标是restore name的无效, 这个在上一篇BLOG中已经讲过了.  
recovery.conf  
```  
restore_command = 'cp /data05/ocz/pgbak/arch/%f %p'  
recovery_target_name = 'test1'  
recovery_target_timeline = 'latest'  
pause_at_recovery_target = false  
```  
启动后  
```  
postgres=# create extension pageinspect;  
CREATE EXTENSION  
```  
能看到么?  
```  
postgres=# select * from a;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from b;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from c;  
 id | crt_time   
----+----------  
(0 rows)  
-- 使用pageinspect可以看到tuple哦!  
postgres=# select * from heap_page_items(get_raw_page('a',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1694 |      0 |        0 | (0,1)  |           2 |       2560 |     24 |        |        
  2 |   8112 |        1 |     40 |   1694 |      0 |        0 | (0,2)  |           2 |       2560 |     24 |        |        
(2 rows)  
postgres=# select * from heap_page_items(get_raw_page('b',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1695 |      0 |        0 | (0,1)  |           2 |       2560 |     24 |        |        
(1 row)  
postgres=# select * from heap_page_items(get_raw_page('c',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1696 |      0 |        0 | (0,1)  |           2 |       2560 |     24 |        |        
(1 row)  
```  
为什么查看不到呢?  
解释t_infomask :   
```  
2560 = 0x0A00 由如下mask组成 :   
#define HEAP_XMIN_INVALID               0x0200  /* t_xmin invalid/aborted */  
#define HEAP_XMAX_INVALID               0x0800  /* t_xmax invalid/aborted */  
```  
因为xmin 和xmax invalid的掩码都被设置了, 所以处理这些记录的事务还未提交或者已经abort. 当然是看不到的.  
解释t_xmin :   
就是插入这些记录的事务号. 在本例中已经使用txid_current显示出来, 大家可以对照去理解。  
如果是已提交的事务, 应该有这两个标记之一 :   
```  
#define HEAP_XMIN_COMMITTED             0x0100  /* t_xmin committed */  
#define HEAP_XMAX_COMMITTED             0x0400  /* t_xmax committed */  
```  
## 2  
还原到第2个还原点, recovery_target_inclusive = false  
recovery.conf  
```  
restore_command = 'cp /data05/ocz/pgbak/arch/%f %p'  
recovery_target_xid = '1696'  
recovery_target_inclusive = false  
recovery_target_timeline = 'latest'  
pause_at_recovery_target = false  
```  
启动后  
```  
postgres=# create extension pageinspect;  
CREATE EXTENSION  
postgres=# select * from heap_page_items(get_raw_page('a',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1694 |      0 |        0 | (0,1)  |           2 |       2048 |     24 |        |        
  2 |   8112 |        1 |     40 |   1694 |      0 |        0 | (0,2)  |           2 |       2048 |     24 |        |        
  3 |   8072 |        1 |     40 |   1694 |      0 |        0 | (0,3)  |           2 |       2048 |     24 |        |        
(3 rows)  
postgres=# select * from heap_page_items(get_raw_page('b',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1695 |      0 |        0 | (0,1)  |           2 |       2048 |     24 |        |        
(1 row)  
postgres=# select * from heap_page_items(get_raw_page('c',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1696 |      0 |        0 | (0,1)  |           2 |       2048 |     24 |        |        
  2 |   8112 |        1 |     40 |   1696 |      0 |        1 | (0,2)  |           2 |       2048 |     24 |        |        
(2 rows)  
-- 注意这里的t_infomask是, 2048 = 0x0800  
-- 也就是标记了HEAP_XMAX_INVALID, 但是未标记HEAP_XMIN_INVALID以及HEAP_XMIN_COMMITTED, 所以还是不可见的.  
postgres=# select * from a;  