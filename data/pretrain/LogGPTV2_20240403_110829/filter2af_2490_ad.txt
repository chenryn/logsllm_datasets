        if (ch >= 0x20 && ch = 0x20 && ch  _no_seAms  
>  _NoR_nEe  
>  Dlework
flag: **RCTF{Without_no_seAms_NoR_nEeDlework}**
### **simple re**
校验函数sub_401482.
穷举第一段24个字符:
    #include 
    #include 
    int main()
    {
        uint32_t aa[6], bb[6], cc[6], j;
        uint64_t n, m;
        char *p;
        int i;
        bb[0] = 0x556E4969;
        bb[1] = 0x2E775361;
        bb[2] = 0x893DAE7;
        bb[3] = 0x96990423;
        bb[4] = 0x6CF9D3E9;
        bb[5] = 0xA505531F;
        aa[0] = 0x54A0B9BD;
        aa[1] = 0x4B818640;
        aa[2] = 0x8EB63387;
        aa[3] = 0xA9EABEFD;
        aa[4] = 0xB8CDF96B;
        aa[5] = 0x113C3052;
        for (i = 0; i  cc[0] == 4D5F6F35  
>  cc[1] == 5F796E40  
>  cc[2] == 69376E61  
>  cc[3] == 7665525F  
>  cc[4] == 69737233  
>  cc[5] == 545F676E  
>  5o_M@ny_an7i_Rev3rsing_T
穷举第二段8个字符:
    #include 
    #include 
    uint32_t foo1(uint16_t a1, uint16_t a2)
    {
        uint16_t v2; // ST16_2
        uint16_t i; // [rsp+0h] [rbp-18h]
        uint16_t v5; // [rsp+4h] [rbp-14h]
        v5 = a1;
        for (i = a2; i & v5; i = 2 * (i & v2))
        {
            v2 = v5;
            v5 ^= i;
        }
        return i | v5;
    }
    uint32_t foo2(uint32_t x, uint32_t y, uint32_t n)
    {
        uint32_t yy; // [rsp+4h] [rbp-18h]
        uint64_t v5; // [rsp+Ch] [rbp-10h]
        uint64_t v6; // [rsp+14h] [rbp-8h]
        yy = y;
        v6 = 1LL;
        v5 = x;
        while (yy)
        {
            if (yy & 1)
                v6 = v5 * v6 % n;
            v5 = v5 * v5 % n;
            yy >>= 1;
        }
        return v6;
    }
    int main()
    {
        char buf[8];
        int i1, i2, i3, i4, i5, i6, i7, i8, i, j, v;
        uint32_t *p1;
        uint16_t *p2, *p3;
        p1 = (uint32_t *)(buf + 0);
        p2 = (uint16_t *)(buf + 4);
        p3 = (uint16_t *)(buf + 6);
        for (i1 = 0x20; i1  0x20)
                                        {
                                            buf[3] = i8;
                                            if (foo2(*p1, *p2, 0xF64BB17D) == 0x6F82C8DC)
                                            {
                                                for (i = 0; i  echn!qu3
第33个字符's'
flag: **RCTF{5o_M@ny_an7i_Rev3rsing_Techn!qu3s}**
### **babyre2**
    uint64_t data[8] =
    {
    0x2B7192452905E8FB,
    0x7BA58F82BD898035,
    0xA3112746582E1434,
    0x163F756FCC221AB0,
    0xECC78E6FB9CBA1FE,
    0xDCDD8B49EA5D7E14,
    0xA2845FE0B3096F8E,
    0xAAAAAAAAAA975D1C,
    };
    uint64_t mull[8] =
    {
    0x20656D6F636C6557,
    0x2046544352206F74,
    0x6548202138313032,
    0x2061207369206572,
    0x6320455279626142,
    0x65676E656C6C6168,
    0x756F7920726F6620,
    0xFFFFFFFFFFFF002E,
    };
    uint64_t modd = 0xFFFFFFFFFFFFFFC5;
    (input[i] * mull[i]) % modd = data[i]
(A * mull) % modd = data 化成 A % modd = data*mull^(-1)
再A=data*mull^(-1) modd，然后上脚本
    #-*- coding:utf-8 -*-    flag = ""
    def     gcd(a,b):
            while a!=0:
                a,b = b%a,a
            return b
    #定义一个函数，参数分别为a,n，返回值为b
    def     findModReverse(a,m):#这个扩展欧几里得算法求模逆
            if gcd(a,m)!=1:
                return None
            u1,u2,u3 = 1,0,a
            v1,v2,v3 = 0,1,m
            while v3!=0:
                q = u3//v3
                v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
            return u1%m
    print findModReverse(3,11)
    d = 0xFFFFFFFFFFFFFFC5
    a = [0x20656D6F636C6557,0x2046544352206F74,0x6548202138313032,0x2061207369206572,0x6320455279626142,0x65676E656C6C6168,0x756F7920726F6620,0xFFFFFFFFFFFF002E]
    a_re = []
    for i in a:
        num = findModReverse(i,d)
        #print hex(num)
        a_re.append(num)
    data = [0x2B7192452905E8FB,0x7BA58F82BD898035,0xA3112746582E1434,0x163F756FCC221AB0,0xECC78E6FB9CBA1FE,0xDCDD8B49EA5D7E14,0xA2845FE0B3096F8E,0xAAAAAAAAAA975D1C]
    #for j in range(len(a)):
    for k in range(len(a)):
        #print k
        num = (a_re[k] * data[k]) % d
        print hex(num),hex(num)[2:-1].decode('hex')
        flag += hex(num)[2:-1].decode('hex')[::-1]
    print flag
## 0x04 Crypto
### **cpushop**
nc连接是个cpu商店，flag很贵买不起，支付时验证了order，order的sign由一个随机signkey和订单信息生成，可能存在哈希长度拓展攻击，通过修改价格买下flag  
(打扰了，signkey的长度为random.randint(8,32))  
通过哈希长度拓展攻击来修改订单价格  
    from pwn import *
    import os
    import hashpumpy
    s=remote('cpushop.2018.teamrois.cn',43000)
    s.recvuntil('Command:')
    s.sendline('1')
    s.recvuntil('Command:')
    s.sendline('2')
    s.recvuntil('Product ID:')
    s.sendline('9')
    s.recvuntil('Your order:')
    s.recvline()
    a=s.recvline()
    timestamp=a[35:51]
    sign=a[57:-1]
    print a
    print timestamp
    print sign,len(sign)
    for i in range(8,32):
    hax=hashpumpy.hashpump(sign,'product=Flag&price=99999&timestamp='+timestamp,'&product=Flag&price=9&timestamp='+timestamp,i)
        #print hax
        payload=hax[1]+'&sign='+hax[0]
        #print payload
        s.recvuntil('Command:')
        s.sendline('3')
        s.recvuntil('Your order:')
        s.sendline(payload)
        pp=s.recvline()
        print pp
        if "Order" not in pp:
            s.interactive()
    s.interactive()
### **ECDH**
查阅资料得到：
和几个关键字：ECDH、secp128r1、AES、ECB  
github项目有4个函数：生成密钥、计算共享密钥、签名、验证签名
首先要问Alice和bob的公钥，然后交换给对方，Alice才会说出密文，Bob只会把密文告诉Alice
大概就是用中间人攻击获取明文
emm。。现在会生成密钥对了，但是不知道怎么解密。。
使用自己的私钥和Bob的公钥生成的共享密钥 解  
Alice发出的密文：失败（其实是可以成功，就是要自己写脚本）
**过程：**
生成自己的密钥对  
找bob要pubkey，顺便把自己的pubkey作为alice的pubkey给bob  
结合自己的prikey和bob的pubkey生成shared_key  
找bob把flag发给alice，再去alice那边接收密文  
用shared_key作为密钥，用AES的ECB模式解密Alice给的密文  
    # -*- coding: utf-8 -*-    # aes_decrypt.py
    from Crypto.Cipher import AES
    from binascii import b2a_hex, a2b_hex
    class AESCrypto():
        def __init__(self,key):
            self.key = key
            self.mode = AES.MODE_ECB
        def decrypt(self,text):
            cryptor = AES.new(self.key,self.mode,b'0000000000000000')
            plain_text  = cryptor.decrypt(a2b_hex(text))
            return plain_text
    if __name__ == '__main__':
        p_secret = '841747f83b3367c2331069ef167d0179'
        print "key:       ",p_secret
        pc = AESCrypto(a2b_hex(p_secret))
        e = '1d6002b9d8d721039c602a8c46fb4e2ea96d1bacf28e3c41635ea493df02f80e'
        d = pc.decrypt(e)
        print "ciphertext:",e
        print "decrypt:   ",d