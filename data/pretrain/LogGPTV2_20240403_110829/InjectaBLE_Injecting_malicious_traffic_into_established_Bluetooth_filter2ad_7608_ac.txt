A frame transmitted in the previously mentioned receive
window being considered as a Master packet by the Slave,
this feature allows a race condition attack, in which an attacker
can inject an arbitrary frame in an established connection by
transmitting it at the beginning of the receive window.
For this injection to be successful, the attacker has ﬁrst
to be synchronised with the connection: as mentioned in the
related work, multiple approaches already exist to passively
sniff a connection. Second, the attacker must forge a valid
frame to inject. It will be considered as new data by the
Slave if its Sequence Number (denoted as SNa) equals the
Next Expected Sequence Number counter of the Slave’s Link
Layer (denoted as N ESNs). Similarly, the NESN bit in the
attacker frame (denoted as N ESNa) should indicate that the
previous frame transmitted by the Slave (denoted as SNs) was
successfully received. Thus, the attacker should have observed
in the connection event preceding the injection attempt a frame
transmitted by the Slave and extracted the SNs and N ESNs
bits. The SNa and N ESNa bits of the injected frame are then
set according to the equation 6.
(cid:2)
SNa = N ESNs
N ESNa = (SNs + 1) mod 2
(6)
Third, the attacker has to calculate the receive window to
transmit the injected frame as soon as possible during this
window. He/she can use equation 5 to estimate the window
widening. The Master’s Sleep Clock Accuracy can be extracted
from the CONNECT REQ packet or from control packets em-
bedding this information (e.g. LL CLOCK ACCURACY REQ
or LL CLOCK ACCURACY RSP). The Slave’s Sleep Clock
Accuracy can be estimated at 20 ppm, which is the worst case
from the attacker’s perspective.
D. Checking the injection success
In order to perform various attacks requiring the injection of
multiple frames, the attacker must be able to identify whether
the injection of each frame is successful or not. This is not
straightforward as even a successful injection does not always
provoke an observable change in the behaviour of the Slave
receiving the frame. Therefore, we need an heuristic that only
relies on the observation of the parameters of the Link Layer,
to indicate whether the injection is successful or not.
An injected frame is considered as valid by the Slave if:
• the injected frame is transmitted before the Master’s one
during the receive window,
• the CRC of the injected frame equals the calculated one.
Let’s consider an injection attempt with ta the start time
of the injected frame transmission (i.e., the beginning of the
attack), da the transmission duration of the injected frame and
tm the beginning of the legitimate Master’s frame transmis-
sion.
An injection attempt may result in three different situations,
as illustrated by ﬁgure 5:
a) the injected frame is transmitted in the receive window
before the start of transmission of the legitimate frame
(ta + da < tm)
b) the injected frame is transmitted in the receive window,
but the end of the frame collides with the legitimate
frame (ta + da ≥ tm)
frame (ta ≥ tm)
c) the legitimate frame is transmitted before the injected
In situation a), the injection attempt is successful, because
the two conditions are met. Situation b) can result in a suc-
cessful injection if the collision does not corrupt the injected
frame, otherwise the CRC is invalid and the injection attempt
fails. Indeed, a collision might not result in a corruption when
the power of the injected signal is by far superior to the
power of the legitimate signal from the Slave’s perspective.
It can also happen if the modiﬁcation resulting from the
superposition of two signals doesn’t change the result of the
heuristic used by the demodulator to demodulate the injected
signal. This is possible in some conﬁgurations, depending
on the phase difference between the injected and legitimate
signals from the Slave’s perspective, along with the previously
mentioned power difference. Situation c) leads to a failed
injection attempt, because the ﬁrst condition is not fulﬁlled.
Since an injection attempt may or may not be successful
depending on the situation, the attacker can build an heuristic
allowing him to know if a given injection was successful. This
heuristic is based on the two previously mentioned conditions:
• the injected frame is transmitted before the Master’s one
during the receive window: a direct observation of the
legitimate packet transmitted by the Master is usually not
possible because the attacker transmits its own injected
packet at the same time. However, the Slave’s response
can be used to infer this information indirectly. Indeed, if
the injected frame was transmitted before the legitimate
one, the Slave will consider the start of transmission of
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:32 UTC from IEEE Xplore.  Restrictions apply. 
393
a)
Receive window
b)
Receive window
c)
Receive window
Minj
da
M
Minj
da
M
Minj
M
da
ta
ta+da
tm
ta
tm
ta+da
tm
ta
ta+da
Fig. 5: Three possible outcomes of an injection attempt
the injected frame as the new anchor point. Consequently,
the Slave will transmit its own frame 150 μs after the end
of transmission of the injected frame. If ts is the start of
transmission of the Slave’s response, this requirement can
be expressed as :
ta + da + 150 − 5 < ts < ta + da + 150 + 5
We empirically estimated a window width of 10μs,
resulting in the 5μs in the above formula. This estimation
has been established by injecting some speciﬁc packets
that have an observable impact on the Slave device (e.g.
transmitting a response, terminating the connection ...).
• the CRC of the injected frame equals the computed
one: similarly, the attacker cannot directly check if a
collision occurs and corrupts the injected frame during the
transmission because he/she cannot listen to the channel
during the injection. However, the Slave’s response can
also be used to infer this information, because if the frame
was received by the Slave with a CRC ﬁeld that does
not match the calculated one, the Slave will not change
its nextExpectedSeqNum counter to indicate that the last
received frame must be transmitted again, resulting in a
NESN ﬁeld equal to the one used in the previous frame
transmitted by the Slave. IfSN (cid:2)
s is the SN ﬁeld of Slave’s
response and N ESN(cid:2)
s is the NESN ﬁeld of the Slave’s
reponse, this requirement can be expressed as:
((SNa + 1) mod 2 = N ESN(cid:2)
s) ∧ (N ESNa = SN(cid:2)
s)
the global heuristic that allows the attacker to
detect the success of the injection can be expressed by the
propositional formula 7:
Finally,
(ta + da + 150 − 5 < ts < ta + da + 150 + 5)∧
s) ∧ (N ESNa = SN(cid:2)
s)
((SNa + 1) mod 2 = N ESN(cid:2)
(7)
with ta the start of the transmission of the injected frame,
da the duration of the transmission of the injected frame, ts
the start of transmission of the Slave’s response, SN(cid:2)
s the SN
ﬁeld of the Slave’s response, N ESN(cid:2)
s the NESN ﬁeld of the
Slave’s response.
E. Implementation
We have developed a proof of concept in order to easily
perform the InjectaBLE attack and evaluate it. It has been im-
plemented on a development dongle embedding a nRF52840
chip from Nordic Semiconductor. This chip natively supports
BLE 5.0 and allows a low level access to the Radio peripheral,
which eases the implementation.
The dongle communicates with the Host using a cus-
tom USB protocol, allowing to transmit commands to the
embedded software. A lightweight BLE sniffer has been
implemented, based on previous works [8], [19] and [17]
on BLE connection eavesdropping. When a new connection
is detected by the sniffer, it synchronises with the channel
hopping algorithm and transmits the received packets to the
Host. Then, if a speciﬁc command is transmitted to the dongle,
it starts the injection process and tries to inject the malicious
frame deﬁned in the command:
• before the injection,
the window widening in use is
estimated using formula 5.
• the dongle performs an injection attempt as soon as
possible during the window previously deﬁned.
• the heuristic deﬁned in formula 7 is then used to check
whether the injection was successful or not.
• if the injection attempt fails, a new one is prepared.
• if the injection attempt succeeds, a notiﬁcation is trans-
mitted to the Host indicating the number of injection
attempts before a successful injection.
Based on this main feature, the dongle also exposes an API
allowing to perform the various scenarios described in Section
VI. A minimal BLE stack has also been implemented, to mimic
the behaviour of the different roles involved in the connection.
VI. ATTACK SCENARIOS
This Section describes and illustrates four main scenarios
allowing an attacker to achieve interesting offensive objectives,
such as illegitimately using a device functionality, hijacking
any device involved in the connection or performing a Man-
in-the-Middle attack during an established connection.
A. Scenario A: illegitimately using a device functionality
This ﬁrst attack scenario can be considered as the straight-
forward application of the injection attack. Indeed, IoT devices
based on BLE usually implement the Slave role, so our injec-
tion approach may be used to trigger a speciﬁc functionality
exposed by the targeted device. More speciﬁcally, injecting
ATT Requests allows the attacker to interact with the ATT
server, which is used in BLE as a generic application layer.
Note that any ATT request supported by the target device could
be possibly injected.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:32 UTC from IEEE Xplore.  Restrictions apply. 
394
For example, an attacker could inject a Read Request
targeting a speciﬁc handle: if the injection is successful, the
Slave will generate and transmit a Read Response containing
the data. It may allow him to extract interesting information
from a given characteristic: depending on the type of device,
this could have a critical impact on conﬁdentiality. Similarly,
an attacker could inject a Write Request or a Write Command
to a given device. These ATT requests allow to modify the
value of a given characteristic: as a consequence, the attacker
is able to trigger a speciﬁc behaviour of the device, which
could result in a critical impact on integrity or availability.
To illustrate the impact of this attack scenario, we have per-
formed injection attacks targeting three commercial devices: a
lightbulb, a keyfob and a smartwatch. We reverse engineered
these devices to identify the type of ATT requests and the
corresponding payloads used to trigger their main features.
We then forged and injected malicious trafﬁc triggering the
following features:
• lightbulb: turning the bulb on and off, changing its colour,
changing its brightness,
• keyfob: making the keyfob ring,
• smartwatch: transmitting a forged SMS to the watch.
B. Scenario B: hijacking the Slave role
This second attack scenario is aimed at hijacking the Slave
role. If this attack succeeds, the Slave is forced to exit the
connection, allowing the attacker to replace it without breaking
the connection from the Master’s perspective.
This attack scenario is based on the injection of a Link-
layer control packet: these packets are used by devices to
control the connections. More speciﬁcally, the attack is based
on the injection of a LL TERMINATE IND packet that is used
by a device to indicate to the other one that the connection
should be terminated. Since the packet injection is ignored
by the Master and accepted by the Slave, it forces the Slave
to exit the connection. However, the Master is not aware of
the fact that the legitimate Slave is not present anymore: this
situation allows the attacker to imitate the Slave behaviour in
order to hijack the connection. To do so, the attacker must
wait during the inter-frame spacing (150 μs) after the end
of transmission of a Master’s packet before transmitting its
frame, and carefully set the SN and NESN ﬁelds. This attack
scenario is illustrated in ﬁgure 6.
This scenario has been successfully implemented for the
three previously mentioned devices. All of them exposed
a characteristic corresponding to the Device Name which
allowed us to transmit a forged value ”Hacked” when a Read
Request targeting this characteristic was received. Let us note
that such a scenario may have critical consequences depending
on the type of target: as an example, an insulin pump or a
pacemaker could be hijacked, allowing the attacker to transmit
fake health data.
C. Scenario C and D: hijacking the Master, the Slave or both
of them simultaneously (Man-in-the-Middle attack)
We have explored two other attack scenarios, based on
the same approach. The scenario C consists in hijacking the
Master role. While this kind of hijacking attack was already
possible using the BTLEJack tool [9], its strategy is based on
jamming and can easily be detected by a monitoring system.
Our approach only requires the injection of a single malicious
frame, making it more discrete and reliable. Scenario D
allowed us to carry out a Man-in-the-Middle attack without
interrupting the connection. Indeed, previous approaches to
perform Man-in-the-Middle attacks [7], [15] could only be
used before the initiation of the connection, which limits
drastically their usability. In other words, using our strategy,
an attacker could establish a Man-in-the-Middle attack at any
time, even if a connection is already established between
two legitimate devices. This strategy is critical as long term
connections are very common in BLE communications, and
massively used by devices such as smartwatches or trackers.
These two scenarios use a similar approach, which is
based on the injection of a CONNECTION UPDATE PDU as
described in Section III-B: it can be used by the Master at any
time during the connection in order to modify the parameters
of the channel selection algorithm, and especially the Hop
Interval. The attack relies on a simple idea:
the attacker
injects a forged CONNECTION UPDATE PDU containing
arbitrary parameters, indicating to the Slave that the connection
parameters will change at a given time. When that time is
reached, the Slave waits during the window offset speciﬁed
by the attacker, ignoring the legitimate Master’s frame, then
uses the new parameters while the Master continues to use the
old ones, allowing the attacker to synchronise with the Slave
and hijack the Master role or to synchronise with both of
them, resulting in a Man-in-the-Middle. In the ﬁrst case (e.g.
Master hijacking) the legitimate Master no longer receives any
response after the time at which the parameters are changed, so
it leaves the connection due to timeout. Note that this approach
is particularly powerful because it could also be used to hijack
the Slave role, in a similar way to scenario B, since the attacker
knows both the old and the new parameters. This approach is
illustrated in ﬁgure 7.
We evaluated experimentally the Master hijacking using the
three previously mentioned devices: with the Master’s role
successfully hijacked, it allowed us to trigger the same features
as in scenario A. Similarly, scenario D was evaluated on our
three commercial devices, allowing us to arbitrarily modify the
data exchanged between the legitimate devices: for example,
a SMS transmitted by the smartphone to the smartwatch has
been modiﬁed on the ﬂy, or the RGB values describing the
colour of the lightbulb have also been altered on the ﬂy.
VII. SENSITIVITY ANALYSIS
We conducted several experiments to validate our attack.
The objective was twofold: test its feasibility in a realistic
environment and analyse the impact of different parameters
upon the attack success rate. We focused on three main
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:32 UTC from IEEE Xplore.  Restrictions apply. 
395
Connection event #n
Connection event #n+1
Connection event #n+2
Connection ev.
HopInterval x 1250μs
HopInterval x 1250μs
HopInterval x 1250μs
Receive window
TERMINATE 
IND
M
S
150μs
150μs
M
S
M
S
M
Injection attempt
The slave exits the
connection
The attacker imitates the slave's behaviour
Fig. 6: Description of the slave hijacking
Connection event #(instant)
HopIntervalold x 1250μs
Connection event #(instant+1)                    
HopIntervalold x 1250μs
Connection event #n
HopIntervalold x 1250μs
...
M
S
M
S
Receive window
CONNECT 
UPDATE 
M
S
Injection attempt
WinOffset x 1250 μs
Connection event #
(instant)
HopIntervalnew x 1250μs
WinSize x 1250 μs
Connection event #
(instant-1)
HopIntervalnew x 1250μs
M
S
M
S