is that if a connection is down between two relay nodes,
say a middle relay and an exit relay, the middle relay
will pick a different exit relay to establish the next con-
nection. If an attacker can dictate which connections are
down (via reset attacks), then the attacker can potentially
force the use of certain exit relays.
7.2 TCP Hijacking Case Study
Our attack does not require any assistance from client-
side or server-side malware or puppet (which are re-
quired in prior studies [23, 14]). Therefore, our target
is any long-lived TCP connection that does not use SS-
L/TLS. There are several attractive targets: video, ad-
vertisements, news, and Internet chat rooms (e.g., IRC).
Depending on the implementation, one can envision the
following possibilities: 1) the client periodically initiates
a request and asks for responses, or 2) the server proac-
Figure 13: USAToday screenshot with phishing registration
window
tively pushes notiﬁcation messages. In both cases, our
attack can inject malicious messages to the client and
induce a variety of classic attacks such as phishing or
cross-site scripting.
Here, we pick a news website www.usatoday.com
which has a long-lived TCP connection that periodically
retrieves news updates every 30 seconds. This gives am-
ple idle time for our sequence number and ACK number
inference. The attacker machine and the victim client are
Ubuntu 14.04 hosts in our lab (as in the other case stud-
ies). Once the numbers are inferred, we perform a de-
synchronization attack [4] by sending a spoofed request
to the server that will force it to send a response to the
client. Since the request was never sent by the client, it
will not accept the response as the response packet con-
tains an invalid ACK number (acknowledging data that
have not been sent). Later, when the client itself initi-
ates a real request, the server would no longer accept it
as the packet is considered to be data with an old se-
quence number. Now that the client and server become
de-synchronized, the attacker no longer needs to worry
about a race condition where the response to the victim
client is sent back by the server ﬁrst. During all this, the
attacker simply sends spoofed responses periodically ev-
ery few seconds with ACK numbers properly acknowl-
edging the client’s requests. If such spoofed responses
arrive before the client sends a request, they will simply
be dropped without any adverse effect (because the ACK
numbers are acknowledging data that has not been trans-
mitted yet).
We implement the attack end to end, and successfully
hijack the connection and inject a phishing registration
window to solicit email and passwords at the top of the
webpage as shown in Figure 13. We repeat the experi-
ment 10 times and summarize our results in Table 3. The
attack ﬁrst infers sequence and ACK numbers before in-
jecting the malicious payload. Success rate 2 quantiﬁes
the rate of inferring the sequence and ACK numbers cor-
rectly. However, USAToday occasionally switches the
222  25th USENIX Security Symposium 
USENIX Association
14
Success
rate 2
9/10
Avg # of rounds
with loss
2.22
BW
(pkts)
5000
Success
rate 1
7/10
Success rate 1 = success rate of injecting the phishing registration window
Success rate 2 = success rate of inferring the correct sequence and ACK number
Avg % of
rounds with loss
3.63%
Time Cost
(s)
81.05
Table 3: USAToday injection results
HTTP request from one type to another and therefore
the injected payload will not match the request. Success
rate 1 quantiﬁes the rate of injecting the response that
matches the request, which is strictly lower than success
rate 2, but is still reasonable in our experiments. In addi-
tion, the time to succeed is longer than in the case of SSH
and Tor experiments mostly because of the extra steps of
ACK number inference and data injection.
8 Discussion and Defenses
Vulnerabilities in other OSes: We examine if the
studied vulnerability exist in the latest Windows and
FreeBSD OSes (The latter TCP stack is also used by
Mac OS X). In brief, these OSes are not vulnerable to
the attack. First of all, neither Windows nor FreeBSD
has implemented all three conditions that trigger chal-
lenge ACKs according to RFC 5961. More importantly,
the ACK throttling is not found for Windows or MAC OS
X. Ironically, not implementing the RFC fully, in fact is
safer in this case.
Defenses. As highlighted earlier, the root cause of all the
attacks described is the side channel associated with the
global challenge ACK count. This side channel can leak
various types of information about an ongoing TCP con-
nection. In general, as asserted in previous studies [21],
network protocols are not designed rigorously to guaran-
tee the non-interference property. In our study, we dis-
cover that the design and implementation of RFC 5961
has actually introduced an information ﬂow that leaks
TCP connection state through the shared challenge ACK
counter, and is highly exploitable.
The best defense strategy is to eliminate the side chan-
nel (the global challenge ACK count) altogether. One
can still enable the per-connection rate limit as long as
each connection has a completely separate counter that
does not interfere with those of other connections. The
downside of this strategy is that if the number of connec-
tions in a system increases, the aggregate challenge ACK
count can go up without any bound. There is currently no
evidence to suggest that this worst case scenario is likely
to ever happen. However, if one is really concerned about
wasting resources on sending challenge ACKs, we sug-
gest a second solution which is adding noise to the chan-
nel. This is a common defense strategy in mitigating side
channel attacks [10, 27]. Speciﬁcally, instead of having
a ﬁxed global challenge ACK count of 100 in all inter-
vals, we can add random values (either positive or nega-
tive) for each interval. This will essentially confuse the
attacker during the search process. In fact, even if the
attacker repeats the probe many times, the result will al-
ways differ over time. To ensure that the added random-
ness is theoretically sound, one can even apply differ-
ential privacy to systematically introduce noise, as was
done recently in [28]. We leave the design of the exact
scheme to add randomness to future work. We also plan
to propose the defenses to the Linux community.
9 Related Work
Previous work on off-path TCP sequence number infer-
ence heavily relies on executing malicious code on the
client side [22, 23, 14, 16, 17, 1], either in the form of
malware [22, 23] or malicious javascript [14, 16, 17].
They share the same scheme of “guess-then-check”
based on some side channels observable by the mali-
cious code on the client side. They include OS packet
counters [22, 23, 9], global IPID [14, 1], and HTTP re-
sponses [16]. In contrast, our off-path TCP attack elim-
inates the requirement completely, which makes the at-
tack much more dangerous. The only prior study that
shares the same threat model is the one reported by lkm
in phrack magazine in 2007 [1]. The authors exploit the
well-known global IPID side channel on Windows hosts
to perform such attacks. Unfortunately, the IPID side
channel is extremely noisy and the attack can take close
to 20 minutes to succeed, as reported by the authors. Fur-
thermore, as reported in [14], the success rate of such an
attack is very low, unless the attacker has a low latency to
the victim (e.g., on the same LAN). In comparison, our
newly reported attack ﬁnishes much faster and is signiﬁ-
cantly more reliable.
Besides the TCP sequence number, it has been shown
that other types of information can be inferred by an off-
path or blind attacker
[12, 21, 11, 29, 5, 15]. For in-
stance, Ensaﬁ et al. [12] show that, by leveraging the
SYN cache and RST rate limit on FreeBSD, one can infer
if a port is open on a target host through bouncing scans
off of a “zombie” FreeBSD host. Knockel et al. [21]
demonstrate the use of a new per-destination IPID side
channel that can leak the number of packets sent be-
tween two arbitrary hosts on several major operating sys-
tems with a bootstrapping time of an hour on average.
Alexander et al. [5] can infer the RTT between two ar-
bitrary hosts with reasonable accuracy within minutes.
Gilad et al. [15] are also able to infer if two hosts have es-
tablished a TCP connection identiﬁed by a speciﬁc four-
tuple, by utilizing the same noisy global IPID side chan-
nel. Compared to the newly discovered side channel, it
has the following limitations: 1) requires the presence
of stateful ﬁrewall or NAT which may not be univer-
sally present; 2) has a low success rate even when the
USENIX Association  
25th USENIX Security Symposium  223
15
tests are repeated multiple times (e.g., for more than a
minute). Utilizing the new side channel, we can do this
much faster.
Many of the side channels can be abused and cause
unwanted information leakage. However, in some cases,
they can also be used legitimately for network measure-
ments. For instance, the global IPID side channel has
been used to infer a network’s port blocking policy [24].
The same side channel has also been used to count how
many hosts are behind a NAT [6].
In addition, even
though commonly considered a vulnerability, ISPs that
allow IP spooﬁng are still prevalent according to the lat-
est reports in 2009 [7] and 2013 [8]. Further, very re-
cently, IP spooﬁng has also been used in legitimate ap-
plications such as reverse traceroute [20], detecting Inter-
domain Path changes [19], and detecting routing policy
violations [13].
10 Conclusions
To conclude, we have discovered a subtle yet critical ﬂaw
in the design and implementation of TCP. The ﬂaw man-
ifests as a side channel that affects all Linux kernel ver-
sions 3.6 and beyond and may possibly be replicated in
other operating systems if left unnoticed. We show that
the ﬂaw allows a variety of powerful blind off-path TCP
attacks. Finally, we propose changes to the design and
implementation of TCP’s global rate limit to prevent or
mitigate the side channel.
Acknowledgement
Research was sponsored by the Army Research Labo-
ratory and was accomplished under Cooperative Agree-
ment Number W911NF-13-2-0045 (ARL Cyber Secu-
rity CRA). The views and conclusions contained in this
document are those of the authors and should not be in-
terpreted as representing the ofﬁcial policies, either ex-
pressed or implied, of the Army Research Laboratory
or the U.S. Government. The U.S. Government is au-
thorized to reproduce and distribute reprints for Govern-
ment purposes notwithstanding any copyright notation
here on. The work is also supported by National Science
Foundation under Grant #1464410.
References
[1] Blind TCP/IP Hijacking is Still Alive. http://
phrack.org/issues/64/13.html.
[2] Cloud Messaging. https://developers.goo
gle.com/cloud-messaging/.
[3] [tcpm] mitigating TCP ACK loop (“ACK storm”)
https://www.ietf.org/m
DoS attacks.
ail-archive/web/tcpm/current/ms
g09450.html.
[4] ABRAMOV, R., AND HERZBERG, A. Tcp ack
storm dos attacks. Journal Computers and Security
(2013).
[5] ALEXANDER, G., AND CRANDALL, J. R. Off-
Path Round Trip Time Measurement via TCP/IP
Side Channels. In INFOCOM (2015).
[6] BELLOVIN, S. M. A Technique for Counting Nat-
ted Hosts.
In Proceedings of the 2Nd ACM SIG-
COMM Workshop on Internet Measurment (2002).
[7] BEVERLY, R., BERGER, A., HYUN, Y., AND
K CLAFFY. Understanding the Efﬁcacy of De-
ployed Internet Source Address Validation Filter-
ing. In Proc. ACM SIGCOMM IMC (2009).
[8] BEVERLY, R., KOGA, R., AND K CLAFFY. Initial
Longitudinal Analysis of IP Source Spooﬁng Ca-
pability on the Internet. In Internet Society Article
(2013).
[9] CHEN, Q. A., QIAN, Z., JIA, Y. J., SHAO, Y.,
AND MAO, Z. M. Static detection of packet injec-
tion vulnerabilities: A case for identifying attacker-
controlled implicit information leaks.
In CCS
(2015).
[10] CHEN, S., WANG, R., WANG, X., AND ZHANG,
K. Side-channel Leaks in Web Applications: A Re-
ality Today, a Challenge Tomorrow. In IEEE Sym-
posium on Security and Privacy (2010).
[11] ENSAFI, R., KNOCKEL, J., ALEXANDER, G.,
AND CRANDALL, J. R. Detecting Intentional
Packet Drops on the Internet via TCP/IP Side Chan-
nels. In PAM (2014).
[12] ENSAFI, R., PARK, J. C., KAPUR, D., AND
CRANDALL, J. R.
Idle Port Scanning and Non-
interference Analysis of Network Protocol Stacks
using Model Checking.
In USENIX Security
(2010).
[13] FLACH, T., KATZ-BASSETT, E., AND GOVIN-
DAN, R. Quantifying Violations of Destination-
based Forwarding on the Internet. In IMC (2012).
[14] GILAD, Y., AND HERZBERG, A. Off-Path Attack-
ing the Web. In USENIX WOOT (2012).
[15] GILAD, Y., AND HERZBERG, A. Spying in the
In PETS
Dark: TCP and Tor Trafﬁc Analysis.
(2012).
224  25th USENIX Security Symposium 
USENIX Association
16
[16] GILAD, Y., AND HERZBERG, A. When tolerance
the case of injection-friendly
causes weakness:
browsers. In WWW (2013).
[29] ZHANG, X., KNOCKEL, J., AND CRANDALL,
J. R. Original SYN: Finding Machines Hidden Be-
hind Firewalls. In INFOCOM (2015).
[17] GILAD, Y., HERZBERG, A., AND SHULMAN,
H. Off-Path Hacking: The Illusion of Challenge-
Response Authentication. Security Privacy, IEEE
(2014).
[18] HAN, B., AND BILLINGTON, J.
Termination
properties of TCP’s connection management pro-
cedures. In ICATPN (2005).
[19] JAVED, U., CUNHA, I., CHOFFNES, D., KATZ-
BASSETT, E., ANDERSON, T., AND KRISHNA-
MURTHY, A.
Investigating the root
cause of interdomain path changes. In SIGCOMM
(2013).
Poiroot:
[20] KATZ-BASSETT, E., MADHYASTHA, H. V., AD-
HIKARI, V. K., SCOTT, C., SHERRY, J., VAN WE-
SEP, P., ANDERSON, T., AND KRISHNAMURTHY,
A. Reverse Traceroute. In NSDI (2010).
[21] KNOCKEL, J., AND CRANDALL, J. R. Counting
Packets Sent Between Arbitrary Internet Hosts. In
FOCI (2014).
[22] QIAN, Z., AND MAO, Z. M. Off-Path TCP Se-
quence Number Inference Attack – How Firewall
Middleboxes Reduce Security. In IEEE Symposium
on Security and Privacy (2012).
[23] QIAN, Z., MAO, Z. M., AND XIE, Y. Collabo-
rative TCP sequence number inference attack: how
to crack sequence number under a second. In CCS
(2012).
[24] QIAN, Z., MAO, Z. M., XIE, Y., AND YU, F.
Investigation of Triangular Spamming: A Stealthy
and Efﬁcient Spamming Technique.
In Proc. of
IEEE Security and Privacy (2010).
[25] R. BRADEN, ED. Requirements for Internet Hosts
- Communication Layers. rfc 1122, 1989.
[26] RAMAIAH, ANANTHA AND STEWART, R AND
DALAL, MITESH. Improving TCP’s Robustness to
Blind In-Window Attacks. rfc5961, 2010.
[27] SONG, D. X., WAGNER, D., AND TIAN, X. Tim-
ing Analysis of Keystrokes and Timing Attacks on
SSH. In USENIX Security (2001).
[28] XIAO, Q., REITER, M. K., AND ZHANG, Y. Mit-
igating storage side channels using statistical pri-
vacy mechanisms. In CCS (2015).
USENIX Association  
25th USENIX Security Symposium  225
17