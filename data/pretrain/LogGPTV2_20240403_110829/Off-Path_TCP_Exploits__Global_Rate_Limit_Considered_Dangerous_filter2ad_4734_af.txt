### 7.2 TCP Hijacking Case Study

Our attack does not require any assistance from client-side or server-side malware, unlike previous studies [23, 14]. Therefore, our target is any long-lived TCP connection that does not use SSL/TLS. Potential targets include video streaming, advertisements, news websites, and Internet chat rooms (e.g., IRC). Depending on the implementation, there are two primary scenarios: 1) the client periodically initiates requests and awaits responses, or 2) the server proactively pushes notification messages. In both cases, our attack can inject malicious messages to the client, enabling classic attacks such as phishing or cross-site scripting.

For this case study, we chose the news website www.usatoday.com, which maintains a long-lived TCP connection that retrieves news updates every 30 seconds. This interval provides ample time for inferring sequence numbers and ACK numbers. The attacker and victim client machines used in our lab are Ubuntu 14.04 hosts. Once the numbers are inferred, we perform a desynchronization attack [4] by sending a spoofed request to the server, forcing it to send a response to the client. Since the client did not send the request, it will reject the response due to an invalid ACK number. When the client subsequently sends a legitimate request, the server will reject it because the sequence number is considered outdated. With the client and server desynchronized, the attacker no longer needs to worry about race conditions where the server might respond to the client first. During this process, the attacker periodically sends spoofed responses with correctly acknowledged ACK numbers. If these spoofed responses arrive before the client sends a request, they will be dropped without adverse effects.

We implemented the attack end-to-end and successfully hijacked the connection, injecting a phishing registration window at the top of the webpage, as shown in Figure 13. We repeated the experiment 10 times and summarized the results in Table 3. The attack first infers the sequence and ACK numbers before injecting the malicious payload. Success rate 2 quantifies the accuracy of inferring the sequence and ACK numbers. However, USAToday occasionally switches the type of HTTP request, causing the injected payload to mismatch the request. Success rate 1 quantifies the rate of injecting a matching response, which is lower than success rate 2 but still reasonable in our experiments. The time to succeed is longer than in SSH and Tor experiments, primarily due to the additional steps of ACK number inference and data injection.

**Table 3: USAToday Injection Results**

| Metric                  | Value   |
|-------------------------|---------|
| Success Rate 1          | 7/10    |
| Success Rate 2          | 9/10    |
| Avg # of Rounds with Loss | 2.22   |
| Bandwidth (pkts)        | 5000    |
| Avg % of Rounds with Loss | 3.63%  |
| Time Cost (s)           | 81.05   |

**Definitions:**
- **Success Rate 1:** Success rate of injecting the phishing registration window.
- **Success Rate 2:** Success rate of inferring the correct sequence and ACK numbers.

### 8. Discussion and Defenses

#### Vulnerabilities in Other OSes
We examined whether the studied vulnerability exists in the latest versions of Windows and FreeBSD (the latter's TCP stack is also used by macOS). Neither Windows nor FreeBSD has implemented all three conditions that trigger challenge ACKs according to RFC 5961. Additionally, ACK throttling is not present in Windows or macOS. Ironically, not fully implementing the RFC makes these systems safer in this context.

#### Defenses
The root cause of the attacks described is the side channel associated with the global challenge ACK count, which can leak information about ongoing TCP connections. Network protocols are often not designed to guarantee non-interference properties [21]. In our study, we found that the design and implementation of RFC 5961 introduced an information flow through the shared challenge ACK counter, making it highly exploitable.

The best defense strategy is to eliminate the side channel (the global challenge ACK count) entirely. Each connection should have a separate counter that does not interfere with others. A potential downside is that if the number of connections increases, the aggregate challenge ACK count could rise without bounds. However, there is currently no evidence suggesting this worst-case scenario is likely. If resource waste is a concern, adding noise to the channel is a common defense against side-channel attacks [10, 27]. Instead of a fixed global challenge ACK count, random values can be added for each interval, confusing the attacker during the search process. Even if the attacker repeats the probe, the results will differ over time. To ensure the added randomness is theoretically sound, differential privacy can be applied, as done in [28]. We plan to propose these defenses to the Linux community.

### 9. Related Work

Previous work on off-path TCP sequence number inference heavily relies on executing malicious code on the client side [22, 23, 14, 16, 17, 1], either as malware [22, 23] or malicious JavaScript [14, 16, 17]. These methods use side channels observable by the malicious code, such as OS packet counters [22, 23, 9], global IPID [14, 1], and HTTP responses [16]. In contrast, our off-path TCP attack eliminates this requirement, making it more dangerous. The only prior study with a similar threat model is the one reported by lkm in Phrack Magazine in 2007 [1], which exploits the global IPID side channel on Windows hosts. However, this attack is extremely noisy and can take up to 20 minutes to succeed, with a low success rate unless the attacker has low latency to the victim. Our newly reported attack is faster and significantly more reliable.

Other types of information can also be inferred by off-path or blind attackers [12, 21, 11, 29, 5, 15]. For example, Ensafi et al. [12] show that leveraging the SYN cache and RST rate limit on FreeBSD can infer if a port is open on a target host. Knockel et al. [21] demonstrate the use of a per-destination IPID side channel to leak the number of packets sent between two arbitrary hosts. Alexander et al. [5] can infer the RTT between two arbitrary hosts with reasonable accuracy within minutes. Gilad et al. [15] can infer if two hosts have established a TCP connection using the same noisy global IPID side channel. Compared to the newly discovered side channel, these methods have limitations, such as requiring stateful firewalls or NAT, and having low success rates even when tests are repeated multiple times.

Many side channels can be abused for unwanted information leakage but can also be used legitimately for network measurements. For instance, the global IPID side channel has been used to infer a network’s port blocking policy [24] and to count the number of hosts behind a NAT [6]. Despite being considered a vulnerability, ISPs that allow IP spoofing are still prevalent [7, 8]. IP spoofing has also been used in legitimate applications such as reverse traceroute [20], detecting interdomain path changes [19], and detecting routing policy violations [13].

### 10. Conclusions

In conclusion, we have discovered a subtle yet critical flaw in the design and implementation of TCP, manifesting as a side channel affecting all Linux kernel versions 3.6 and beyond. This flaw allows various powerful blind off-path TCP attacks. We propose changes to the design and implementation of TCP’s global rate limit to prevent or mitigate the side channel.

### Acknowledgements

This research was sponsored by the Army Research Laboratory under Cooperative Agreement Number W911NF-13-2-0045 (ARL Cyber Security CRA). The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies of the Army Research Laboratory or the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Government purposes. The work is also supported by the National Science Foundation under Grant #1464410.

### References

[1] Blind TCP/IP Hijacking is Still Alive. http://phrack.org/issues/64/13.html.
[2] Cloud Messaging. https://developers.google.com/cloud-messaging/.
[3] [tcpm] mitigating TCP ACK loop (“ACK storm”) https://www.ietf.org/mail-archive/web/tcpm/current/msg09450.html.
[4] ABRAMOV, R., AND HERZBERG, A. Tcp ack storm dos attacks. Journal Computers and Security (2013).
[5] ALEXANDER, G., AND CRANDALL, J. R. Off-Path Round Trip Time Measurement via TCP/IP Side Channels. In INFOCOM (2015).
[6] BELLOVIN, S. M. A Technique for Counting Natted Hosts. In Proceedings of the 2Nd ACM SIGCOMM Workshop on Internet Measurement (2002).
[7] BEVERLY, R., BERGER, A., HYUN, Y., AND K CLAFFY. Understanding the Efficacy of Deployed Internet Source Address Validation Filtering. In Proc. ACM SIGCOMM IMC (2009).
[8] BEVERLY, R., KOGA, R., AND K CLAFFY. Initial Longitudinal Analysis of IP Source Spoofing Capability on the Internet. In Internet Society Article (2013).
[9] CHEN, Q. A., QIAN, Z., JIA, Y. J., SHAO, Y., AND MAO, Z. M. Static detection of packet injection vulnerabilities: A case for identifying attacker-controlled implicit information leaks. In CCS (2015).
[10] CHEN, S., WANG, R., WANG, X., AND ZHANG, K. Side-channel Leaks in Web Applications: A Reality Today, a Challenge Tomorrow. In IEEE Symposium on Security and Privacy (2010).
[11] ENSAFI, R., KNOCKEL, J., ALEXANDER, G., AND CRANDALL, J. R. Detecting Intentional Packet Drops on the Internet via TCP/IP Side Channels. In PAM (2014).
[12] ENSAFI, R., PARK, J. C., KAPUR, D., AND CRANDALL, J. R. Idle Port Scanning and Non-interference Analysis of Network Protocol Stacks using Model Checking. In USENIX Security (2010).
[13] FLACH, T., KATZ-BASSETT, E., AND GOVINDAN, R. Quantifying Violations of Destination-based Forwarding on the Internet. In IMC (2012).
[14] GILAD, Y., AND HERZBERG, A. Off-Path Attacking the Web. In USENIX WOOT (2012).
[15] GILAD, Y., AND HERZBERG, A. Spying in the Dark: TCP and Tor Traffic Analysis. In PETS (2012).
[16] GILAD, Y., AND HERZBERG, A. When tolerance causes weakness: The case of injection-friendly browsers. In WWW (2013).
[17] GILAD, Y., HERZBERG, A., AND SHULMAN, H. Off-Path Hacking: The Illusion of Challenge-Response Authentication. Security Privacy, IEEE (2014).
[18] HAN, B., AND BILLINGTON, J. Termination properties of TCP’s connection management procedures. In ICATPN (2005).
[19] JAVED, U., CUNHA, I., CHOFFNES, D., KATZ-BASSETT, E., ANDERSON, T., AND KRISHNAMURTHY, A. Investigating the root cause of interdomain path changes. In SIGCOMM (2013).
[20] KATZ-BASSETT, E., MADHYASTHA, H. V., ADHIKARI, V. K., SCOTT, C., SHERRY, J., VAN WESEP, P., ANDERSON, T., AND KRISHNAMURTHY, A. Reverse Traceroute. In NSDI (2010).
[21] KNOCKEL, J., AND CRANDALL, J. R. Counting Packets Sent Between Arbitrary Internet Hosts. In FOCI (2014).
[22] QIAN, Z., AND MAO, Z. M. Off-Path TCP Sequence Number Inference Attack – How Firewall Middleboxes Reduce Security. In IEEE Symposium on Security and Privacy (2012).
[23] QIAN, Z., MAO, Z. M., AND XIE, Y. Collaborative TCP sequence number inference attack: How to crack sequence number under a second. In CCS (2012).
[24] QIAN, Z., MAO, Z. M., XIE, Y., AND YU, F. Investigation of Triangular Spamming: A Stealthy and Efficient Spamming Technique. In Proc. of IEEE Security and Privacy (2010).
[25] R. BRADEN, ED. Requirements for Internet Hosts - Communication Layers. rfc 1122, 1989.
[26] RAMAIAH, ANANTHA AND STEWART, R AND DALAL, MITESH. Improving TCP’s Robustness to Blind In-Window Attacks. rfc5961, 2010.
[27] SONG, D. X., WAGNER, D., AND TIAN, X. Timing Analysis of Keystrokes and Timing Attacks on SSH. In USENIX Security (2001).
[28] XIAO, Q., REITER, M. K., AND ZHANG, Y. Mitigating storage side channels using statistical privacy mechanisms. In CCS (2015).