In a practical deployment, the suspicious ﬂow pool could
contain more than one type of worm, and could contain
innocuous ﬂows (as a result of false positives by the ﬂow
classiﬁer). In these cases, we would like for Polygraph to
still output a signature, or set of signatures, that matches
the worms found in the suspicious pool, and does not match
innocuous ﬂows.
We show that the Bayes generation algorithm can be
used unmodiﬁed even in the case of multiple worms or
noise in the pool. However, for the token subsequence and
conjunction algorithms, we must perform clustering. With
clustering, the suspicious ﬂow pool is divided into several
clusters, where each cluster contains similar ﬂows. The sys-
tem then outputs a signature for each cluster, by using the
algorithms previously described to generate a signature that
matches every ﬂow in a cluster.
Clearly, the quality of the clustering is important for gen-
erating good signatures. First, the clusters should not be too
general. If we mix ﬂows from different worms into the same
cluster, or mix ﬂows of worms and noise in the same clus-
ter, the resulting signature may be too general and exhibit a
high false positive rate. Second, the clusters should not be
too speciﬁc. If ﬂows of the same worm are separated into
different clusters, the signatures for each cluster may be too
speciﬁc to match other ﬂows of the worm.
We choose to adapt a widely-used clustering method,
hierarchical clustering [11], to our problem setting. Hi-
erarchical clustering is relatively efﬁcient, does not need
to know the number of clusters beforehand, and can be
adapted to match our semantics. We next describe the de-
tails of how we use hierarchical clustering in Polygraph.
Hierarchical Clustering. Each cluster consists of a set of
ﬂows, and a signature generated using that set. Given s
ﬂows, we begin with s clusters, each containing a single
ﬂow. At this point, the signature for each cluster is very
speciﬁc. It matches exactly the one ﬂow in that cluster.
The next step is to iteratively merge clusters. Whenever
two clusters are merged, the signature generation algorithm
being used is run again on the combined set of samples to
produce a new, more sensitive signature for the new cluster.
We decide which two of the clusters to merge ﬁrst by
determining what the merged signature would be for each of
the O(s2)pairs of clusters, and using the innocuous pool to
estimate the false positive rate of that signature. The lower
the false positive rate is, the more speciﬁc the signature is.
The more speciﬁc the signature is, the more similar are the
two clusters. Hence, we merge the two clusters that result
in the signature with the lowest false positive rate. After
each merge, we compute what the merged signature would
be between the new cluster and each of the remaining O(s)
clusters. We always choose whichever pair of the current
clusters results in the signature with the lowest false positive
rate to merge next.
Merging stops when the signature resulting from merg-
ing any two clusters would result in an unacceptably high
false positive rate, or when there is only one cluster remain-
ing. The system then outputs the signature for each of the
remaining clusters that has enough samples in it to be likely
to be general enough. As we show in Section 5, a cluster
should contain at least 3 samples to be general enough to
match other samples of the worm. The cost of this algo-
rithm is to compute O(s2)signatures.
Note that our method for generating signatures with clus-
tering is a greedy approach for ﬁnding the best signatures.
As is well-known in the literature, a greedy approach may
reach local minimum instead of global minimum. For ex-
ample, two ﬂows from different worms may have some co-
incidental similarity, causing them to be merged into a sin-
gle cluster during an early round of the algorithm, possibly
preventing the ideal clustering (and set of signatures) from
being found. However, due to the complexity of the prob-
lem, a greedy approach is worthwhile, since it offers re-
duced computational cost compared to an exhaustive search
of possible clusterings.
5. Evaluation
In our experiments, we evaluate the performance of each
Polygraph signature generation algorithm under several sce-
narios. We ﬁrst consider the simple case where the suspi-
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
cious ﬂow pool contains only ﬂows of one worm. We next
consider the case where the ﬂow classiﬁer is imperfect, re-
sulting in innocuous requests present in the suspicious ﬂow
pool along with the ﬂows from one worm. Last, we con-
sider the most general case, in which the suspicious ﬂow
pool contains ﬂows from multiple worms, and from innocu-
ous requests.
5.1. Experimental Setup
We describe our experimental setup below. In all our ex-
periments, we set the token-extraction threshold k = 3 (de-
= 2,
scribed in Section 4.1), the minimum token length
and the minimum cluster size to be 3. We conduct 5 in-
dependent trials for each experiment, and report the 2nd
worst value for each data point (e.g., the 80th percentile).
All experiments were run on desktop machines with 1.4
GHz Intel R Pentium R III processors, running Linux ker-
nel 2.4.20.
Polymorphic workloads. We generate signatures for poly-
morphic versions of three real-world exploits. The ﬁrst two
exploits, the Apache-Knacker exploit (described in Section
2) and the ATPhttpd exploit10 use the text-based HTTP pro-
tocol. The third exploit, the BIND-TSIG exploit, uses the
binary-based DNS protocol.
In our experiments, we show that Polygraph generates
high quality signatures for both HTTP exploits and the DNS
exploit, even with an ideal polymorphic engine. In order to
simulate an ideal polymorphic engine, we ﬁll wildcard and
code bytes for each exploit with values chosen uniformly at
random. For the HTTP exploits, we also include randomly
generated headers of random length, which do not affect the
functioning of the exploit.
Network traces. We used several network traces as input
for and to evaluate Polygraph signature generation. For our
HTTP experiments, we used two traces containing both in-
coming and outgoing requests, taken from the perimeter of
Intel Research Pittsburgh in October of 2004. We used a
5-day trace (45,111 ﬂows) as our innocuous HTTP pool.
We used a 10-day trace (125,301 ﬂows), taken 10 days after
the end of the ﬁrst trace, as an evaluation trace. The eval-
uation trace was used to measure the false positive rate of
generated signatures. In experiments with noisy suspicious
pools, noise ﬂows were drawn uniformly at random from
the evaluation pool.
We also used a 24-hour DNS trace, taken from a DNS
server that serves a major academic institution’s domain,
and several CCTLDs. We used the ﬁrst 500,000 ﬂows from
this trace as our innocuous DNS pool, and the last 1,000,000
ﬂows as our evaluation trace.
5.2. Experimental Results
We describe our experimental results below.
5.2.1. Single Polymorphic Worm
We ﬁrst consider the case where the suspicious ﬂow pool
contains only ﬂows from one worm. In these experiments,
we want to determine what signatures Polygraph would ﬁnd
for each worm, how accurate these signatures are (e.g., how
many false positives and false negatives they cause), and
how many worm samples are necessary to generate a qual-
ity signature. If there are too few worm samples in the sus-
picious ﬂow pool, the resulting signatures will be too spe-
ciﬁc, because they will incorporate tokens that those sam-
ples have in common only by coincidence, but that do not
appear in other samples of the worm. For each exploit, we
run our signature generation algorithms using different sus-
picious pools, of size ranging from 2 to 100 worm samples.
Signature Quality. Tables 1 and 2 show our results for
the Apache-Knacker and BIND-TSIG exploits. For sake of
comparison, we also evaluate the signatures based on the
longest common substring, and the most speciﬁc common
substring (that is, the one that results in the fewest false pos-
itives) for each worm.11 Token-subsequence signatures are
shown in regular expression notation. The Bayes signatures
are a list of tokens and their corresponding scores, and the
threshold decision boundary, which indicates the score nec-
essary for a ﬂow to match the signature.
The conjunction and token-subsequence signatures gen-
erated by Polygraph exhibit signiﬁcantly fewer false posi-
tives than ones consisting of only a single substring. For the
Apache-Knacker exploit, the subsequence signature pro-
duces a lower false positive rate than the conjunction signa-
ture, which is expected since the ordering property makes
it more speciﬁc. For both exploits, the Bayes signature is
effectively equivalent to the best-substring signature. This
is reasonable for the Apache-Knacker exploit, since all but
one of the tokens occurs very frequently in innocuous traf-
ﬁc. For the BIND-TSIG exploit, the Bayes signature would
be equivalent to the conjunction signature if the matching
threshold were set slightly higher. We hypothesize that this
would have happened if we had speciﬁed a lower maximum
false positive rate (we used .001%). It also would have hap-
pened if the best substring occurred equally often in the in-
put innocuous pool as in the evaluation trace.
Number of Worm Samples Needed. For each algorithm,
the correct signature is generated 100% of the time for all
experiments where the suspicious pool size is greater than 2,
and 0% of the time where the suspicious pool size is only 2.
10In this ATPhttpd exploit, the attacker provides a long URL in a GET
request, which is used to overwrite the return address on the server, trans-
ferring control to the attacker’s code.
11We do not propose an algorithm to ﬁnd such a substring
automatically—we simply measure the result of using each substring and
report the best one.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Class
Longest Substring
Best Substring
False +
92.5%
.008%
Conjunction
.0024%
False −
0%
0%
0%
Token
Subsequence
.0008%
0%
Bayes
.008%
0%
Signature
HTTP/1.1\r\n
\xFF\xBF
‘GET ’, ‘ HTTP/1.1\r\n’, ‘: ’, ‘\r\nHost: ’,
‘\r\n’, ‘: ’, ‘\r\nHost: ’, ‘\xFF\xBF’, ‘\r\n’
GET .* HTTP/1.1\r\n.*: .* \r\nHost: .*
\r\n.*: .*\r\nHost: .*\xFF\xBF.*\r\n
‘\r\n’: 0.0000, ‘: ’: 0.0000, ‘\r\nHost: ’: 0.0022,
‘GET ’: 0.0035, ‘ HTTP/1.1\r\n’: 0.1108,
‘\xFF\xBF’: 3.1517. Threshold: 1.9934
Table 1. Apache-Knacker signatures. These signatures were successfully generated for innocuous
pools containing at least 3 worm samples.
Class
Longest Substring
Best Substring
Conjunction
Token Subsequence
False +
.3279%
.0023%
0%
0%
Bayes
.0023%
False −
0%
0%
0%
0%
0%
Signature
\x00\x00\xFA
\xFF\xBF
‘\xFF\xBF’, ‘\x00\x00\xFA’
\xFF\xBF.*\x00\x00\xFA
‘\x00\x00\xFA’: 1.7574, ‘\xFF\xBF’: 4.3295
Threshold: 4.2232
Table 2. BIND-TSIG signatures. These signatures were successfully generated for innocuous pools
containing at least 3 worm samples.
The signatures generated using 2 samples are too speciﬁc,
and cause 100% false negatives.
5.2.2. Single Polymorphic Worm Plus Noise
Next we show that Polygraph generates quality signatures
even if the ﬂow classiﬁer misclassiﬁes some ﬂows, result-
ing in innocuous ﬂows in the suspicious ﬂow pool. In these
experiments, we use hierarchical clustering with our con-
junction and token subsequence algorithms. Ideally, one or
more signatures will be generated that match future samples
of the polymorphic worm, and no signatures will be gener-
ated from the innocuous trafﬁc that will result in false posi-
tives. We also demonstrate that Bayes does not require hier-
archical clustering, even when there are innocuous ﬂows in
the suspicious pool. In each of these experiments, we use 5
ﬂows from a polymorphic worm, while varying the number
of additional innocuous ﬂows in the suspicious ﬂow pool.
the
conjunction and
False Negatives For
token-
subsequence signatures, Polygraph generates a cluster
containing the worm ﬂows, and no other ﬂows. The signa-
tures for these clusters are the same signatures generated in
the case with no noise, and produce 0% false negatives.
grows beyond 80%, at which point the signatures cause
100% false negatives. This is because we are only using
a token as a feature in the Bayes signature if it occurs in
at least 20% of the suspicious ﬂow pool.12 This parameter
can be adjusted to allow Bayes to generate signatures with
higher noise ratios.
False Positives Figures 5(a) and 5(b) show the additional
false positives (that is, not including those generated by the
correct signatures) that result from the addition of noise.
In the HTTP case, when there is sufﬁciently high noise,
there are also clusters of innocuous ﬂows that result in sig-
natures. That is, the clustering algorithm interprets simi-
lar noise ﬂows that are dissimilar from ﬂows in the innocu-
ous pool as other worms in the pool. We hypothesize that
this occurs because our HTTP traces come from a relatively
small site. That is, a more diverse innocuous pool would al-
low the algorithm to determine that the resulting signatures
cause too many false positives and should not be output.
Again, once the ratio of noise grows beyond the 80%
threshold, Bayes does not use any tokens from the actual
worm ﬂows as part of its signature.
Instead, the signa-
ture consists only of tokens common to the innocuous noise
12We do this to minimize the number of tokens that are only coinciden-
The Bayes signatures are not affected by noise until it
tally in common between ﬂows being used as part of the signature.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
1
e
t
a
R
e
v
i
t
i
s
o
P
e
s
l
a
F
l
a
n
o
i
t
i
d
d
A
0.8
0.6
0.4
0.2
Conjunction