例19-3：失效测试的参照文件
The quick brown fox jumped over the lazy dog and it
bithim
2100
---
## Page 2102
现在开始测试，我们将句子部分地覆盖上红色块。当运行测试的时
候，我们捕捉MozReftestlnvalidate事件同时移除红色块。一旦红色块
被移除，我们将会清除reftest-wait的值来允许测试框架拍摄测试的快
照。在这个例子中，我们通过添加"disappear"类属性使得大红色块变
成不可见来达到移除块的目的（例19-4）。
例19-4：失效测试的测试文件
The quick brown fox jumped over the lazy dog
anditbit him
一旦块被移除，我们便得到了被绿色边框环绕的句子，这个句子正
和前面的参照测试中的句子匹配。
2102
---
## Page 2104
备注
测试用例：编辑摘要一输入第二个摘要
steditsum
图19-1最终的失效实测的渲染效果
[1]CSS2.1生成的内容，参见
http://www.w3.org/TR/CSS2/selector.html#before-and-after。
[2]CSS2.1@media规则，参见
http://www.w3.org/TR/CSS2/media.html
构建社区
为了使开放的Web变成现实，我们在Mozilla工程中所做的每件事都
是鼓励全世界范围内社区里的人们积极参与进来。我们对所有的测
试框架也进行着同样的实践。我们正在努力使得每种测试框架的运
行、理解和测试的创建都变得尽可能简单。
这对于即时Mozilla测试社区产生了切实的直接利益。当我们的缺陷
协商团队（bugtriagecorps）发现了页面的一个问题时，他们能够把
问题缩小到最小范围的测试用例上。这些最小范围的测试用例可以
容易地被加入参照测试框架里。开发者也能容易地编写测试来判断
2103
---
## Page 2105
他们的修补或者新功能是不是像设计的一样正常工作。然而，要想
摆脱回归测试不积极的本性，我们还得采取进一步行动。
我们正在开始的一个项目是对实时网站进行比较。其中主要的动机
是想要了解我们新的下一代HTML5解析器工作在大型网站时的不同
表现。这一实时比较引擎是被构建在参照测试框架之上的。
作为实时站点比较工具的一部分，我们也计划邀请Web开发人员提
交他们为自已网站所创建的测试，这些测试是他们准备包含进一个
特别的站点比较测试套件里的。例如，如果你正在为某个站点开发
一个复杂的导航系统，你可能想要上传测试标记或者包含此导航系
统代码的链接。如果测试标记和它先前的渲染效果在两个Firefox主
要里程碑之间发生了改变，那么我们将会发送通知给你。
我们也把参照测试上传到各种不同的W3C组里，这些组致力于为一
些技术（如CSS和SVG）研发具有互操作性的测试套件。通过向这些
主题责献我们的测试用例，将帮助所有这些详细说明书的制定者去
考虑互操作性，以推进Web的发展。我们也主动在其他的Web浏览器
上运行我们自已的参照测试。通过继续为回归测试框架装进更多可
能的内容，我们能扩展测试框架，以使它对于Web开发者更有用，
并且使它成为测试未来Web技术的一种机制。
保持测试框架简单并且可扩展，对于任何希望把回归测试从反应型
变为前瞻型活动的人都是关键性的课程。虽然这两条单独的每一条
都儿乎是足够了，但建立一个能够被其他新项目开发者重新利用的
测试框架也是很重要的。通过确认你的测试框架是简单的、强大的
和可扩展的，你就为开发者创建了一种资源，这种自动化回归测试
框架可以帮助测试最新的技术和行为，而且它会以出乎你想象的方
式被开发者们所扩展。Mozilla参照测试框架正在做所有这些事情，
目标是惠及所有人，从数以百万计的依靠Mozilla产品的人们到Wweb
用户，从打印登机牌的旅行者，到在其站点实现了最新的HTML5标
准的Web开发人员。，这真是一个美丽的框架。
第20章ClamAnti-Virus：用开源工具测试
开源代码
TomaszKojm
2104
---
## Page 2106
软件测试总是充满挑战，无论你多么努力都不能确信自已的程序是
完全安全、没有缺陷的。即使你能够对算法的完美性进行证明，现
实世界将很快地对此进行验证。软件缺陷在编译器、操作系统或者
第三方库中并不少见，这些因素引人了一层额外的复杂性。为了使
测试过程有效，你必须灵活处理、全面考虑，并且选择合适的工具
来完成适当的任务。
对于防病毒扫描软件的测试称得上是一个真正强劲的对手。人人都
期望防病毒软件具备非常好的稳定性、可靠性、准确性，以及快速
等特性。因此，开发者需要进行大量的测试，以确保软件和病毒特
征数据库都能满足质量需求。所有一切都需要谨慎的测试和调适，
以避免软件在到达终端用户时发生意外情况。
在过去的儿年中，ClamAnti-Virus项目部署了广泛多样的测试技术以
使得该产品能够满足用于各种重要任务的应用程序。在此我将不仅
对开发者需要解决的一般性难题进行分析，而且还将尽力探索这些
滩题的解决方案。测试方法视不同的平台可能会有所不同，本章的
案例研究主要关注于UNIX平台之上的各种问题。UNIX的系统设计采
取的是著名的"KISS"法则：保持简单、傻瓜化（Keepit
Simple,Stupid）！这一尽管粗糙但是准确的规则同样适用于测试任
务。简单即美，UNIX系统就是这一理论的典范。
ClamAnti-Virus项目
ClamAnti-Virus(ClamAV)是一个UNIX系统上的开源防病毒工具包。
它采用C语言编写，并在GNUGPLv2下发布。该工具的开发始于
2002年，并于五年之后被SourceFire获得，现在已成为开源安全领域
的重要角色。ClamAV由国际化的开发团队维护，该项目提供了一个
防病毒引擎库（libclamav），以及在此之上的一系列工具，包括命
令行扫描器（clamscan）和多线程后台扫描程序（clamd）。这个扫
描器配备了一个拥有580000多条记录的病毒特征数据库。
这一项目的主要目标是与邮件服务器整合，对邮件进行扫描。这就
使得ClamAV成为一个完成关键任务的应用程序，它的扫描要兼顾稳
定及可靠，以保证合法的邮件正常投递。这个扫描器还可以有很多
其他的用途。目前，已经有超过100个第三方应用程序对ClamAV进
行扩展，以不同形式提供存取扫描、HTTP通信检测，或与FTP和其
他服务的整合。
2105
---
## Page 2107
与所有的防病毒产品一样，ClamAV不仅是一个软件，而且是一种服
务。为了提供准确的检测，登记数据库需要保持更新，覆盖目前所
有的威胁，并且没有误报。为了保持检测的准确率在一个可接受的
程度，需要做大量的测试。
测试方法
ClamAnti-Virus项目使用多种黑盒测试和白盒测试来尽可能地清除程
序错误，令用户的体验更舒适，工作更高效。
黑盒测试与白盒测试
黑盒测试与白盒测试方法是软件测试中最普遍的设计方法。在黑盒
测试方法中，软件被看作是一个神秘的对象，它的内部结构和设计
是未知的。它接受一些输入数据，对数据进行处理，然后输出结
果。如果一个程序能正确处理数据并输出预期的结果，则认为测试
是成功的。黑盒测试是以软件说明书为基础的，而白盒测试则需要
具有对软件内部实现的了解，并关注于程序的某一特定路径的测
试。程序员要小心地选择测试用例以覆盖所有重要的代码单元。
虽然黑盒测试和白盒测试方法是互相补充的，但是二者都有一些共
同的局限。其中主要的一个问题是它们都不能对程序进行全面的测
试。这就要求你富有创造性、有效地进行设计，甚至不仅如此，为
了在用户使用软件之前将缺陷找到，你还要开发漂亮的测试来覆盖
各种用例。
静态分析
代码的静态分析是一种白盒测试方法，它不需要代码的执行。这种
方法的目的在于查找一般性的编程错误，确保源代码满足所有重要
的要求和标准。静态分析既可以手动执行也可以自动执行。由于手
动地对代码进行严格的检查是一项繁重的工作，开发人员会选择专
业的工具对代码进行自动分析，基于语法、语义和数据流等技术进
行代码检查。
GCC编译器是最有用并被厂泛使用的静态分析工具之一。在ClamAV
项目中，我们主要使用GCC编译器。它在编译阶段对代码进行语法
2106
---
## Page 2108
和语义方面的检查。语法错误破坏了C语言代码的规则，造成了致命
的错误。程序员需要对所有此类问题进行改正才能对程序进行编
译。语义分析则更有趣得多。它在语法检查之后执行，主要关注程
序内部设计的正确性。语义分析包括作用范围检查（检查标识名是
否被正确处理）和类型检查（确保操作符应用在合适的操作数上）
等。在很多情况下，语义缺陷会被视为与语法错误同样严重的问