MakeNode()函数相当简单，它处理动态内存分配和初始化节点。该函
数的参数是指向新项的指针，其返回值是指向新节点的指针。如果 malloc()
无法分配所需的内存，则返回空指针。只有成功分配了内存，MakeNode()
函数才会初始化新节点。下面是MakeNode()的代码：
static Trnode * MakeNode(const Item * pi)
{
Trnode * new_node;
new_node = (Trnode *) malloc(sizeof(Trnode));
1403
if (new_node != NULL)
{
new_node->item = *pi;
new_node->left = NULL;
new_node->right = NULL;
}
return new_node;
}
AddNode()函数是二叉查找树包中最麻烦的第2个函数。它必须确定新
节点的位置，然后添加新节点。具体来说，该函数要比较新项和根项，以确
定应该把新项放在左子树还是右子树中。如果新项是一个数字，则使用进行比较；如果新项是一个字符串，则使用strcmp()函数来比较。但是，该
项是内含两个字符串的结构，所以，必须自定义用于比较的函数。如果新项
应放在左子树中，ToLeft()函数（稍后定义）返回true；如果新项应放在右子
树中，ToRight()函数（稍后定义）返回true。这两个函数分别相当于。
假设把新项放在左子树中。如果左子树为空，AddNode()函数只需让左子节
点指针指向新项即可。如果左子树不为空怎么办？此时，AddNode()函数应
该把新项和左子节点中的项做比较，以确定新项应该放在该子节点的左子树
还是右子树。这个过程一直持续到函数发现一个空子树为止，并在此此处添
加新节点。递归是一种实现这种查找过程的方法，即把AddNode()函数应用
于子节点，而不是根节点。当左子树或右子树为空时，即当root->left或root-
>right为NULL时，函数的递归调用序列结束。记住，root是指向当前子树顶
部的指针，所以每次递归调用它都指向一个新的下一级子树（递归详见第9
章）。
static void AddNode(Trnode * new_node, Trnode * root)
1404
{
if (ToLeft(&new_node->item, &root->item))
{
if (root->left == NULL)       /* 空子树 */
root->left = new_node;     /* 所以，在此处添加节点 */
else
AddNode(new_node, root->left); /* 否则，处理该子树*/
}
else if (ToRight(&new_node->item, &root->item))
{
if (root->right == NULL)
root->right = new_node;
else
AddNode(new_node, root->right);
}
else                  /* 不应含有重复的项 */
{
fprintf(stderr, "location error in AddNode()\n");
exit(1);
1405
}
}
ToLeft()和ToRight()函数依赖于Item类型的性质。Nerfville宠物俱乐部的
成员名按字母排序。如果两个宠物名相同，按其种类排序。如果种类也相
同，这两项属于重复项，根据该二叉树的定义，这是不允许的。回忆一下，
如果标准C库函数strcmp()中的第1个参数表示的字符串在第2个参数表示的字
符串前面，该函数则返回负数；如果两个字符串相同，该函数则返回0；如
果第1个字符串在第2个字符串后面，该函数则返回正数。ToRight()函数的实
现代码与该函数类似。通过这两个函数完成比较，而不是直接在AddNode()
函数中直接比较，这样的代码更容易适应新的要求。当需要比较不同的数据
形式时，就不必重写整个AddNode()函数，只需重写Toleft()和ToRight()即
可。
static bool ToLeft(const Item * i1, const Item * i2)
{
int comp1;
if ((comp1 = strcmp(i1->petname, i2->petname)) petkind, i2->petkind) root;
if (look.child == NULL)
return look; /* 提前退出 */
while (look.child != NULL)
{
if (ToLeft(pi, &(look.child->item)))
{
look.parent = look.child;
look.child = look.child->left;
}
else if (ToRight(pi, &(look.child->item)))
{
look.parent = look.child;
look.child = look.child->right;
}
else     /* 如果前两种情况都不满足，则必定是相等的情况 */
break;    /* look.child 目标项的节点 */
}
1408
return look;   /* 成功返回 */
}
注意，如果 SeekItem()函数返回一个结构，那么该函数可以与结构成员
运算符一起使用。例如， AddItem()函数中有如下的代码：
if (SeekItem(pi, ptree).child != NULL)
有了SeekItem()函数后，编写InTree()公共接口函数就很简单了：
bool InTree(const Item * pi, const Tree * ptree)
{
return (SeekItem(pi, ptree).child == NULL) ? false : true;
}
3.考虑删除项
删除项是最复杂的任务，因为必须重新连接剩余的子树形成有效的树。
在准备编写这部分代码之前，必须明确需要做什么。
图17.13演示了最简单的情况。待删除的节点没有子节点，这样的节点
被称为叶节点（leaf）。这种情况只需把父节点中的指针重置为NULL，并使
用free()函数释放已删除节点所占用的内存。
1409
图17.13 删除一个叶节点
删除带有一个子节点的情况比较复杂。删除该节点会导致其子树与其他
部分分离。为了修正这种情况，要把被删除节点父节点中储存该节点的地址
更新为该节点子树的地址（见图17.14）。
1410
图17.14 删除有一个子节点的节点
最后一种情况是删除有两个子树的节点。其中一个子树（如左子树）可
连接在被删除节点之前连接的位置。但是，另一个子树怎么处理？牢记树的
基本设计：左子树的所有项都在父节点项的前面，右子树的所有项都在父节
点项的后面。也就是说，右子树的所有项都在左子树所有项的后面。而且，
因为该右子树曾经是被删除节点的父节点的左子树的一部分，所以该右节点
中的所有项在被删除节点的父节点项的前面。想像一下如何在树中从上到下
查找该右子树的头所在的位置。它应该在被删除节点的父节点的前面，所以
要沿着父节点的左子树向下找。但是，该右子树的所有项又在被删除节点左
子树所有项的后面。因此要查看左子树的右支是否有新节点的空位。如果没
1411
有，就要沿着左子树的右支向下找，一直找到一个空位为止。图17.15演示
了这种方法。
图17.15 删除一个有两个子节点的项
① 删除一个节点
现在可以设计所需的函数了，可以分成两个任务：第一个任务是把特定
项与待删除节点关联；第二个任务是删除节点。无论哪种情况都必须修改待
删除项父节点的指针。因此，要注意以下两点。
1412
该程序必须标识待删除节点的父节点。
为了修改指针，代码必须把该指针的地址传递给执行删除任务的函数。
第一点稍后讨论，下面先分析第二点。要修改的指针本身是Trnode *类
型，即指向Trnode的指针。由于该函数的参数是该指针的地址，所以参数的
类型是Trnode **，即指向指针（该指针指向Trnode）的指针。假设有合适的
地址可用，可以这样编写执行删除任务的函数：
static void DeleteNode(Trnode **ptr)
/* ptr 是指向目标节点的父节点指针成员的地址 */
{
Trnode * temp;
if ((*ptr)->left == NULL)
{
temp = *ptr;
*ptr = (*ptr)->right;
free(temp);
}
else if ((*ptr)->right == NULL)
{
temp = *ptr;
*ptr = (*ptr)->left;
1413
free(temp);
}
else /* 被删除的节点有两个子节点 */
{
/* 找到重新连接右子树的位置 */
for (temp = (*ptr)->left; temp->right != NULL;
temp = temp->right)
continue;
temp->right = (*ptr)->right;
temp = *ptr;
*ptr = (*ptr)->left;
free(temp);
}
}
该函数显式处理了 3 种情况：没有左子节点的节点、没有右子节点的节
点和有两个子节点的节点。无子节点的节点可作为无左子节点的节点的特
例。如果该节点没有左子节点，程序就将右子节点的地址赋给其父节点的指
针。如果该节点也没有右子节点，则该指针为NULL。这就是无子节点情况
的值。
注意，代码中用临时指针记录被删除节点的地址。被删除节点的父节点
指针（*ptr）被重置后，程序会丢失被删除节点的地址，但是free()函数需要
1414
这个信息。所以，程序把*ptr的原始值储存在temp中，然后用free()函数使用
temp来释放被删除节点所占用的内存。
有两个子节点的情况，首先在for循环中通过temp指针从左子树的右半
部分向下查找一个空位。找到空位后，把右子树连接于此。然后，再用
temp 
保存被删除节点的位置。接下来，把左子树连接到被删除节点的父节
点上，最后释放temp指向的节点。
注意，由于ptr的类型是Trnode **，所以*ptr的类型是Trnode *，与temp的
类型相同。
② 删除一个项
剩下的问题是把一个节点与特定项相关联。可以使用SeekItem()函数来
完成。回忆一下，该函数返回一个结构（内含两个指针，一个指针指向父节
点，一个指针指向包含特定项的节点）。然后就可以通过父节点的指针获得
相应的地址传递给DeleteNode()函数。根据这个思路，DeleteNode()函数的定
义如下：
bool DeleteItem(const Item * pi, Tree * ptree)
{
Pair look;
look = SeekItem(pi, ptree);
if (look.child == NULL)
return false;
if (look.parent == NULL)  /* 删除根节点 */
DeleteNode(&ptree->root);
1415
else if (look.parent->left == look.child)
DeleteNode(&look.parent->left);
else
DeleteNode(&look.parent->right);
ptree->size--;
return true;
}
首先，SeekItem()函数的返回值被赋给look类型的结构变量。如果
look.child是NULL，表明未找到指定项，DeleteItem()函数退出，并返回
false。如果找到了指定的Item，该函数分3种情况来处理。第一种情况是，
look.parent的值为NULL，这意味着该项在根节点中。在这情况下，不用更新
父节点，但是要更新Tree结构中根节点的指针。因此，函数该函数把该指针
的地址传递给DeleteNode()函数。否则（即剩下两种情况），程序判断待删
除节点是其父节点的左子节点还是右子节点，然后传递合适指针的地址。
注意，公共接口函数（DeleteItem()）处理的是最终用户所关心的问题
（项和树），而隐藏的DeleteNode()函数处理的是与指针相关的实质性任
务。
4.遍历树
遍历树比遍历链表更复杂，因为每个节点都有两个分支。这种分支特性
很适合使用分而制之的递归（详见第9章）来处理。对于每一个节点，执行
遍历任务的函数都要做如下的工作：
处理节点中的项；
处理左子树（递归调用）；
1416