title:DEMO: Starving Permission-Hungry Android Apps Using SecuRank
author:Vincent F. Taylor and
Ivan Martinovic
DEMO: Starving Permission-Hungry Android Apps
Using SecuRank
Vincent F. Taylor
Department of Computer Science
University of Oxford
Oxford, United Kingdom
PI:EMAIL
Ivan Martinovic
Department of Computer Science
University of Oxford
Oxford, United Kingdom
PI:EMAIL
ABSTRACT
We demonstrate SecuRank, a tool that can be employed
by Android smartphone users to replace their currently in-
stalled apps with functionally-similar ones that require less
sensitive access to their device. SecuRank works by using
text mining on the app store description of apps to perform
groupings by functionality. Once groups of functionally-
similar apps are found, SecuRank uses contextual permis-
sion usage within groups to identify those apps that are less
permission-hungry. Our demonstration will showcase both
the Android app version of SecuRank and the web-based
version. Participants will see the eﬀectiveness of SecuRank
as a tool for ﬁnding and replacing apps with less permission-
hungry alternatives.
Keywords
Android; smartphone app; least privilege; permission
1.
INTRODUCTION
Competition among app developers has led to app stores
being inundated with groups of functionally-similar general-
purpose apps, such as ﬂashlights and alarm clocks. Within
groups of functionally-similar apps, however, the use of dan-
gerous permissions often varies widely.
It is known from
search engine optimisation that users tend to disproportion-
ately favour the highest ranking search results when per-
forming searches [7]. Thus, users may inadvertently down-
load and install a permission-hungry app when there was a
competing app that provided the required functionality, but
without requiring as much sensitive access to their device.
We illustrate the problem of widely varying dangerous per-
mission usage by showing the Top 8 search results for the
search query “alarm clock” in Fig. 1. The most permission-
hungry app uses six dangerous permissions while the least
permission-hungry app uses only two dangerous permissions.
This is in spite of the fact that all these apps provide the
same basic functionality. Moreover, these apps all have mil-
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS’16 October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4139-4/16/10.
DOI: http://dx.doi.org/10.1145/2976749.2989032
lions of downloads and are highly rated, further complicating
the task of the average user in choosing a suitable app.
SecuRank is designed to suggest replacements for general-
purpose apps only. By general-purpose apps, we mean those
that provide generic functionality, with more than one apps
competing to provide that functionality. Non-general-purpose
apps such as Facebook and Bank of America are not sup-
ported by SecuRank because usually there is only one app
that matches what the user is looking for. SecuRank only
focuses on the so-called dangerous permissions present on
Android [2], since these are the ones that guard sensitive
user data.
1.1 Failure of Run-time Permissions
Android 6.0 (API level 23, code-name Marshmallow ) aims
to return power to the user by introducing run-time permis-
sions [1]. Now, users no longer grant an app’s permissions in
their entirety at install-time. Instead, they must now selec-
tively accept or reject permissions at run-time. This is a wel-
come improvement, but as Eling et al. [4] discover, 40.4% of
users still accept ﬁne-grained, intrusive and unnecessary run-
time permission requests. This supports prior work which
shows that users suﬀer from conditioning and/or a lack of
understanding when presented with security warnings [5].
Additionally, app developers may nullify the switch-over to
run-time permissions altogether by targeting their apps to
API level 22 or lower.
For this reason, permission-hungry apps continue to be a
problem in the face of the introduction of run-time permis-
sions. We are motivated to provide a tool that can identify
and recommend apps that use only as many dangerous per-
missions as they need, i.e., apps that follow the principle
of least privilege [8]. On Android, using apps that follow
the principle of least privilege limits opportunities for adver-
saries to perform privilege escalation attacks, app collusion
attacks, and confused deputy attacks [3].
1.2 Demonstration
To this end, we will demonstrate SecuRank1, a tool that
can be used to audit the list of apps installed on a smartphone
to determine whether any of them can be replaced with a
functionally-similar alternative that requires less sensitive
access to the device. Participants will be introduced to the
SecuRank website and allowed the opportunity to check if
apps of interest to them have less permission-hungry alter-
natives. Participants will also be able to use the SecuRank
1SecuRank is freely available to use at https://securank.me/
and as a free Android app.
1850Figure 1: Snapshot of the Top 8 Google Play Store results for the search query “alarm clock”. All apps have very high ratings
and provide similar functionality, but the most permission-hungry app uses three times as many dangerous permissions as the
least permission-hungry app.
app on demonstration Android devices to examine its user
interface and the results provided. Motivated participants
may install and run SecuRank on their own Android devices
during the demonstration session. This is expected to stimu-
late further discussions among participants and demonstra-
tors by showcasing real-world results.
2. SECURANK IMPLEMENTATION
SecuRank uses the concept of contextual permission usage
to identify permission-hungry apps from groups of functionally-
similar apps.
2.1
Identifying Functionally-Similar Apps
App developers are interested in detailing the features
of their apps to attract downloads as well as provide key-
words for the app store search ranking algorithm. Thus, a
majority of apps have very detailed descriptions outlining
their features. The idea is that functionally-similar apps
will have similar app store descriptions and this can be
calculated using a similarity metric. SecuRank identiﬁes
functionally-similar apps by using the cosine similarity mea-
sure to compare app descriptions across the Google Play
Store and clustering apps whose description fall above the
similarity threshold.
2.2 Contextual Permission Usage
Once groups of functionally-similar apps are identiﬁed,
dangerous permission usage by apps within each group is
analysed to identify those apps that are permission-hungry,
i.e., not following the principle of least privilege. To iden-
tify misuse of dangerous permissions, we penalise apps that
use dangerous permissions that are not common among apps
of that particular functionality. The idea is that if all the
apps provide similar functionality, then dangerous permis-
sion usage outside of the norm might be a useful indicator
of an app being over-privileged. This approach is similar
to the one used by CHABADA [6]. However, instead of
merely identifying apps that are outliers, we provide a tool
that leverages the information to recommend functionally-
similar apps that are preferable. Additionally, we study the
entire Google Play Store to understand the prevalence of
outliers, and the extent to which SecuRank can help users
to identify and avoid them.
We deﬁne the Individual Permission Prevalence (IPP) of
a dangerous permission as the fraction of apps in a group of
functionally-similar apps using that dangerous permission.
App Overall Permission Prevalence (AOPP) is deﬁned as the
mean of the IPPs of those dangerous permissions used by an
app. Algorithm 1 shows how IPP and AOPP are calculated.
Algorithm 1: Calculate IPP and AOPP for a list of apps
Input: List of apps β = β1, . . . , βn
Output: IPP, AOPP per app
permList ← [ ]
foreach app in β do
IP P ← ∅
foreach perm in GetU niqueItems(permList) do
IP P [perm] ← permList.count(perm) ÷ len(β)
AOP P ← ∅
foreach app in β do
permList ← permList + getP ermissions(app)
temp ← [ ]
foreach perm in getP ermissions(app) do
AOP P [app] ← mean(temp)
temp ← temp + IP P [perm]
return AOP P, IP P
As an example, consider four apps: app1 = {A, B, C}, app2 =
{A, B}, app3 = {A, C}, app4 = {A}, where A, B and C are
dangerous permissions.
IPP and AOPP are calculated as
follows:
1. Make list of all dangerous permissions, [A, B, C, A, B,
A, C, A].
2. Count occurrences of each dangerous permission in list,
i.e., pA = 4, pB = 2, pC = 2.
3. IPP is the fraction of occurrences of a dangerous per-
4 = 1.0,
mission to the number of apps, i.e., IP PA = 4
IP PB = 2
4 = 0.5, IP PC = 2
4 = 0.5.
4. AOPP is the mean of the IPPs for those dangerous per-
missions used by an app, i.e., AOP P1 = 0.66, AOP P2 =
0.75, AOP P3 = 0.75, AOP P4 = 1.0.
An app is considered to be less permission-hungry if it has
a higher AOPP than the app it is intended to replace.
2.3 Screenshots of SecuRank
Screenshots of the SecuRank Android app’s main activi-
ties are shown in Fig. 2. The user initiates the scan from
the Home Screen. The list of apps on the device is sent to
the server for processing. Apps that have less permission-
hungry alternatives are presented on the Results screen, and
these alternatives can be seen on the Suggestions screen.
4.5/510M-50M3User Rating:4.3/510M-50M54.5/51M-5M44.4/55M-10M24.5/55M-10M34.3/55M-10M24.0/510M-50M54.2/55M-10M6Downloads:Dangerous Permissions:Actual Screenshot of Search Results from the Google Play Store1851(a) Home screen
(b) Results screen
(c) Suggestions screen
Figure 2: Screenshots of the main activities in the SecuRank Android app.
4. REFERENCES
[1] Requesting Permissions at Run Time. http://developer.
android.com/training/permissions/requesting.html.
Accessed July 2016.
[2] System Permissions. http://developer.android.com/
guide/topics/security/permissions.html. Accessed July
2016.
[3] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R.
Sadeghi, and B. Shastry. Towards Taming
Privilege-Escalation Attacks on Android. In NDSS,
2012.
[4] N. Eling, S. Rasthofer, M. Kolhagen, E. Bodden, and
P. Buxmann. Investigating Users’ Reaction to
Fine-Grained Data Requests: A Market Experiment. In
2016 49th Hawaii International Conference on System
Sciences (HICSS), pages 3666–3675, Jan 2016.
[5] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and
D. Wagner. Android Permissions: User Attention,
Comprehension, and Behavior. In Proceedings of the 8th
Symposium on Usable Privacy and Security (SOUPS
2012), SOUPS ’12, pages 3:1–3:14, New York, NY,
USA, 2012. ACM.
[6] A. Gorla, I. Tavecchia, F. Gross, and A. Zeller.
Checking App Behavior Against App Descriptions. In
Proceedings of the 36th International Conference on
Software Engineering, ICSE 2014, pages 1025–1035,
New York, NY, USA, 2014. ACM.
[7] J. Lee. No. 1 Position in Google Gets 33% of Search
Traﬃc [Study].
http://searchenginewatch.com/sew/study/2276184/
no-1-position-in-google-gets-33-of-search-traﬃc-study,
June 2013. Accessed July 2016.
[8] J. H. Saltzer. Protection and the control of information
sharing in multics. Commun. ACM, 17(7):388–402, July
1974.
Figure 3: Percentage of apps having preferable (i.e.
permission-hungry) alternatives.
less
3. RESULTS
We ran the SecuRank tool on the entire Google Play
Store to understand the extent to which apps could be re-
placed with less permission-hungry, i.e., preferable alterna-
tives. Fig. 3 shows the likelihood of apps having preferable
alternatives, broken down by the popularity and cost (free
or paid) of the app. For both free and paid apps, more pop-
ular apps were more likely to have a less permission-hungry
alternative.
Across our results, we looked at the quality of the replace-
ment apps that were being suggested by SecuRank. We
used the average user rating of an app as a proxy for its
quality. SecuRank was able to ﬁnd preferable alternatives
for approximately 210,000 apps in the Google Play Store.
Overall, 53.2% of the alternatives had the same (4.9%) or
higher (48.3%) rating than the original app. Of the sugges-
tions that had a lower rating, one-third were rated within
0.25 stars (out of ﬁve stars) of the original. This suggests
that the apps being recommended by SecuRank would be
well-received by users, since they too are rated as highly as
the apps they replace.
1510501005001K5K10K50K100K500K1M5M10M50M100MMinimum number of downloads01020304050Preferable alternatives (%)FreePaid1852