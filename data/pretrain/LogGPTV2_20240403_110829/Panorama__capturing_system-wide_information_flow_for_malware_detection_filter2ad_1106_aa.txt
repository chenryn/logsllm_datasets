title:Panorama: capturing system-wide information flow for malware detection
and analysis
author:Heng Yin and
Dawn Xiaodong Song and
Manuel Egele and
Christopher Kruegel and
Engin Kirda
Panorama: Capturing System-wide Information Flow for
Malware Detection and Analysis ∗
†
Heng Yin
‡
Dawn Song
PI:EMAIL
PI:EMAIL
§
Manuel Egele, Christopher Kruegel, and Engin Kirda
{pizzaman, chris, ek}@seclab.tuiwen.ac.at
ABSTRACT
Malicious programs spy on users’ behavior and compromise
their privacy. Even software from reputable vendors, such
as Google Desktop and Sony DRM media player, may per-
form undesirable actions. Unfortunately, existing techniques
for detecting malware and analyzing unknown code samples
are insuﬃcient and have signiﬁcant shortcomings. We ob-
serve that malicious information access and processing be-
havior is the fundamental trait of numerous malware cate-
gories breaching users’ privacy (including keyloggers, pass-
word thieves, network sniﬀers, stealth backdoors, spyware
and rootkits), which separates these malicious applications
from benign software. We propose a system, Panorama, to
detect and analyze malware by capturing this fundamental
trait. In our extensive experiments, Panorama successfully
detected all the malware samples and had very few false
positives. Furthermore, by using Google Desktop as a case
study, we show that our system can accurately capture its
information access and processing behavior, and we can con-
ﬁrm that it does send back sensitive information to remote
servers in certain settings. We believe that a system such
∗
This material is based upon work partially supported by
the National Science Foundation under Grants No. 0311808,
No. 0433540, No. 0448452, No. 0627511, and CCF-0424422.
Partial support was also provided by the International Tech-
nology Alliance, and by the U.S. Army Research Oﬃce under
the Cyber-TA Research Grant No. W911NF-06-1-0316, and
under grant DAAD19-02-1-0389 through CyLab at Carnegie
Mellon. Moreover, this work was supported by the Austrian
Science Foundation (FWF) under grant P18157, the FIT-IT
project Pathﬁnder, and the Secure Business Austria compe-
†
tence center.
Aﬃliated with Carnegie Mellon University and College of
William and Mary.
‡
Aﬃliated with UC Berkeley and Carnegie Mellon Univer-
sity.
§
Aﬃliated with Secure Systems Lab at Technical University
Vienna.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright 2007 ACM 978-1-59593-703-2/07/0010 ...$5.00.
as Panorama will oﬀer indispensable assistance to code an-
alysts and malware researchers by enabling them to quickly
comprehend the behavior and inner-workings of an unknown
sample.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—In-
vasive software
General Terms
Security
Keywords
Malware Detection, Malware Analysis, Dynamic Taint Anal-
ysis, Spyware
1.
INTRODUCTION
Malicious software (i.e., Malware) creeps into users’ com-
puters, collecting users’ private information, wrecking havoc
on the Internet and causing millions of dollars in damage.
Surprisingly, even software provided by reputable vendors
may contain code that performs undesirable actions which
may violate users’ privacy. For example, Google Desktop, a
popular local ﬁle system search tool, actually sends sensitive
user information such as the local search index ﬁles back to
Google’s servers in certain conﬁguration settings [18]. In an-
other widely publicized example, Sony Media Player installs
a rootkit without the user’s knowledge in order to enforce
copyright restrictions and sends back users’ music listening
habits [34].
Malware detection and analysis is a challenging task, and
current malware analysis and detection techniques often fall
short and fail to detect many new, unknown malware sam-
ples. Current malware detection methods in general fall into
two categories:
signature-based detection and heuristics-
based detection. The former cannot detect new malware
or new variants. The latter are often based on some heuris-
tics such as the monitoring of modiﬁcations to the registry
and the insertion of hooks into certain library or system
interfaces. Since these heuristics are not based on the fun-
damental characteristics of malware, they can incur high
false positive and false negative rates. For example, many
benign software access and modify registry entries. Hence,
just because an application creates hooks in the registry does
not mean that it is malicious (i.e., the application could be a
116useful system utility). Furthermore, to evade detection, mal-
ware may attempt to hook library or system call interfaces
that the detector does not monitor. Even worse, since many
rootkits hide in the kernel, most such heuristics-based detec-
tors cannot detect them as they do not necessarily modify
any visible registry entries or library or system call inter-
faces.
In this paper, we propose a novel approach for the detec-
tion and analysis of privacy-breaching malware. We observe
that numerous malware categories, including spyware, key-
loggers, network sniﬀers, stealth backdoors, and rootkits,
share similar fundamental characteristics, which lies in their
malicious or suspicious information access and processing
behavior. That is, they access, tamper, and (in some cases)
leak sensitive information that was not intended for their
consumption. For example, when a user inputs some text
into an editor, benign software (except the editor) will not
access this text, whereas a keylogger will obtain the text,
and then send it to the attacker. This behavior is typically
exhibited without the user’s knowledge or consent and it is
this fundamental trait that separates such malicious appli-
cations from benign software.
Thus, based on this observation, we have designed and
developed an end-to-end approach to automatically identify
this fundamental trait of malicious/suspicious information
access and processing behavior of a given program. At a
high level, our approach is a three-step process: test, mon-
itor, and analyze. When examining a malware sample, we
ﬁrst load it into our analysis environment and run a series
of automated tests on it. Each test generates events that in-
troduce sensitive information into the system in a way that
is not destined for the sample under analysis. For example,
the introduced information may be keystrokes that are in-
tended for the Windows login process, or user input that is
entered into web forms. We then monitor the behavior of
the sample during the tests and record its information access
and processing behavior. Finally, we automatically analyze
the recorded information access and processing behavior of
the sample to detect malicious/suspicious behavior and use
the behavioral information we extract from the sample for
detailed analysis.
To monitor and record the information access and process-
ing behavior of the sample in the test cases, we propose to
use whole-system, ﬁne-grained taint tracking. The approach
works by marking the sensitive information introduced in the
tests as tainted, and monitoring taint propagation over the
whole system (including the propagation through the kernel
and all applications). We monitor the taint propagation at
the hardware level. To perform meaningful analysis, we also
need a mechanism to extract operating-system level infor-
mation. For example, we need to know which processes and
which program modules operate on tainted data, or which
ﬁles the tainted data is written to. We call this concept
operating-system-aware taint analysis.
By combining the taint propagation information at the
hardware level with operating-system-level knowledge, we
then generate taint graphs. A taint graph is a representa-
tion of information ﬂow that shows the processes that access
tainted data, how the data propagates through the system,
and ﬁnally, to which ﬁle or network connection this data is
written to. Based on taint graphs, we can deﬁne various
policies that specify the characteristic behavior of diﬀerent
types of malware. By checking the policies against the taint
graph of an unknown sample, we can then enable automatic
detection and analysis of malicious code from numerous cat-
egories.
To explore the feasibility of our approach, we have de-
signed and developed an end-to-end prototype called Panorama.
Our experiments demonstrate that Panorama is successful
in detecting all malicious code samples in our test set, gen-
erating only a small number of false positives. During the
tests, we also observed that ﬁne-grained taint analysis suf-
fers from a signiﬁcant performance degradation (a slowdown
by a factor of 20). However, since Panorama is targeted to
support oﬀ-line detection and analysis of malware, and since
optimization is not our main focus while building the pro-
totype, we believe that although signiﬁcant, this overhead
is not a severe limitation for our purposes. We also believe
that the approach we propose can be used in combination
with existing malware crawlers (e.g., such as [25]) to search
the web for unknown malware.
In summary, this paper makes the following contributions:
• We observe that a fundamental trait of privacy-breaching
malware lies in their information access and process-
ing behavior to sensitive information, and propose an
end-to-end automatic approach to classify and detect
malware using their information access and processing
behaviors. Our approach does not rely on signatures
and thus, it can detect novel instances of malicious
code. And since it captures the fundamental trait of
malware, it provides a uniﬁed approach to detect and
analyze a wide spectrum of diﬀerent malware.
• We have designed and developed Panorama, an end-
to-end system that can automatically analyze samples
for malicious information access and processing behav-
ior. As a critical component of Panorama, we have
designed and developed a whole-system, ﬁne-grained,
operating-system-aware, dynamic taint tracking sys-
tem to enable us to monitor and investigate the un-
known sample’s information access and processing be-
havior to sensitive information.
• In our extensive experiments, our system detected all
the malware samples and had very few false positives.
The malware samples include a wide range of diﬀerent
classes of malware, such as keyloggers, password snif-
fers, packet sniﬀers, stealth backdoors, rootkits and
spyware. Using the Google Desktop as a case study,
we demonstrate that our system accurately captures
its information access and processing behavior, and
that we can conﬁrm by automated analysis that it does
leak sensitive information to remote servers.
The paper is structured as follows: The next section gives
an overview of our approach. Section 3 presents details on
the design and implementation of Panorama. Section 4 dis-
cusses our taint graph-based malware analysis and detec-
tion. Section 5 presents the experimental results. Section 6
discusses the potential evasions and our countermeasures.
Section 7 surveys related work and Section 8 concludes the
paper.
2. OVERVIEW OF APPROACH
Given an unknown program to analyze, we wish to au-
tomatically determine whether it exhibits malicious infor-
mation access and processing behavior. At a higher level,
Guest System
Malware
Policies
Malware Detection
Engine
Test Script
Test Engine
OS−aware
Specify Taint Sources
Taint Engine
Detection
Results
Malware Analysis
Engine
Taint Graphs
Figure 1: System Overview
our approach to automatically detect whether an unknown
sample exhibits malicious behavior is a three-step process:
test, monitor, and analyze. In this work, we focus on the
analysis of Windows-based malware. Hence, we use an out-
of-the-box installation of Microsoft Windows as the analysis
environment. We regard all code that comes with this instal-
lation as being trusted (in contrast to the unknown sample
about which we have no information). We load the sam-
ple to be analyzed into this environment and mark which
ﬁles belong to the loaded sample. We then run the entire
environment including Microsoft Windows and the loaded
sample in our system Panorama. Figure 1 depicts the ar-
chitecture of Panorama. The system consists of the taint
engine, the test engine, the malware detection engine, and
the malware analysis engine.
To perform our automatic malware detection and analy-
sis, we run a series of automated tests, which is performed
by the test engine. For each test, we generate events that
introduce sensitive information into the guest system. This
sensitive data is sent to some trusted application, and is
not destined for the sample that is under analysis. We then
monitor the behavior of the sample during the tests and
record its information access and processing behavior with
respect to the sensitive information introduced in the tests.
To this end, we have designed the taint engine, which per-
forms whole-system, ﬁne-grained information ﬂow tracking.
It monitors how the sensitive information propagates within
the whole guest system (including the propagation through
the kernel and all applications). In particular, we need to in-
vestigate whether the information has propagated into the
sample (i.e., whether it has been accessed by the sample)
and what the sample has done with the information (e.g.,
sending it to an external server via the network).
Note that even though dynamic taint analysis has been
proposed before, our approach is the ﬁrst generic framework
that applies dynamic taint analysis to the problem domain
of detecting and analyzing privacy-breaching malware. Fur-
thermore, our system oﬀers several new capabilities that