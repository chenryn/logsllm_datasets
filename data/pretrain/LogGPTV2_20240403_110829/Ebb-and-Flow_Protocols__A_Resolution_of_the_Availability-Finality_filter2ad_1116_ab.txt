### Tolerating Adversaries in a Partially Synchronous Environment

In a partially synchronous environment, the protocol can tolerate \((n - f) / 2\) adversaries, where \(f\) is any value between \(n/3\) and \(n/2\). This indicates a trade-off between the two guarantees. The snap-and-chat protocol achieves an optimal balance of \((n/2, n/3)\), eliminating the need for such a trade-off.

### Dynamic Availability (P2)

If the Global Stabilization Time (GST) is zero, the available ledger \(LOG_{da}\) is guaranteed to be both safe and live at all times, provided that fewer than 50% of the awake nodes are adversarial.

### Assumptions on Adversary Behavior

The assumptions about the adversary differ for the security of the two ledgers, aligning with the flexibility of the protocol [20]. Together, P1 and P2 ensure that the finalized ledger \(LOG_{fin}\) remains safe under network partition, i.e., before \(\max\{GST, GAT\}\), and subsequently catches up with the available ledger \(LOG_{da}\), which is always live and safe if the majority of awake nodes are honest.

- If \(GAT = 0\), the environment is a classical partially synchronous network, and \(LOG_{fin}\) has the optimal resilience achievable in that environment.
- If \(GST = 0\) and \(GAT = \infty\), the environment is a synchronous network with dynamic participation, and \(LOG_{da}\) has the optimal resilience achievable in that environment.

Thus, our construction ensures consistency between the two ledgers without sacrificing the best possible security guarantees of each individual ledger, achieving the ebb-and-flow property optimally.

### Flexible BFT Revisited

P1 and P2, combined with prefix consistency, provide flexible consensus. Our mathematical formulation of the ebb-and-flow property extends beyond that of Flexible BFT [20] in two ways:

1. **Dynamic Participation**: We incorporate dynamic participation as a new client belief.
2. **Prefix Consistency**: We require prefix consistency between the ledgers in all circumstances, not just when both clients' assumptions are correct.

This flexibility is similar to that offered by Nakamoto’s longest chain protocol, where all clients, regardless of their beliefs, should eventually converge on a unique ledger to resolve disputes about ownership.

### Comparison with Existing Protocols

- **[20]**: The flexible BFT protocol supports clients who can tolerate \(n/2\) adversaries in a synchronous environment and \(n/4\) adversaries in a partially synchronous environment. Our construction improves this by supporting \(n/2\) adversaries in a synchronous environment and \(n/3\) adversaries in a partially synchronous environment.
- **[27]**: This randomized Byzantine agreement protocol is secure under both synchronous and asynchronous environments but is not flexible. The gap between the resilience achieved by the snap-and-chat protocol and the protocol in [27] highlights the value of flexibility.

### Manuscript Outline

- **Section II**: Presents a balancing attack on Gasper, demonstrating its lack of security.
- **Section III**: Formulates the ebb-and-flow security property, describes the construction of snap-and-chat protocols, and proves their optimal resilience.
- **Section IV**: Shows simulation results for snap-and-chat protocols.
- **Section V-A**: Compares the design of snap-and-chat protocols and finality gadgets.
- **Section V-B**: Discusses transferring results to the Proof-of-Work (PoW) setting.
- **Section V-C**: Provides an overview of additional features offered by snap-and-chat protocols.

### Balancing Attack on Gasper

Gasper, proposed for Ethereum 2.0's beacon chain, is vulnerable to a liveness attack in a synchronous network model. The attack exploits adversarial network delays, leading to a loss of safety for the underlying dynamically available ledger. 

- **Epoch and Slot Structure**: Each epoch is divided into \(C\) slots, with each slot having a committee of size \(n/C\).
- **Attack Strategy**: The adversary waits for an opportune epoch, where the proposer in the first slot is adversarial, and there are enough adversarial validators to maintain a split between 'left' and 'right' chains. The attacker selectively releases withheld votes to influence the fork choice of honest nodes, maintaining a tie and preventing finalization.

### Optimal Ebb-and-Flow Protocols

We formulate the ebb-and-ﬂow security property, present the construction of snap-and-chat protocols, and show that they achieve the ebb-and-ﬂow property with optimal resilience.

- **Model and Formulation**:
  - **Nodes and Time**: There are \(n\) nodes, and time proceeds in slots with synchronized clocks.
  - **Networking and Corruption**: The adversary can corrupt up to \(f\) nodes and control message delays.
  - **Sleeping Nodes**: The adversary can choose whether nodes are awake or asleep, with honest nodes executing the protocol only when awake.

By combining a dynamically available longest-chain protocol and a partially synchronous BFT protocol, we construct state machine replication protocols (snap-and-chat protocols) that achieve the desired ebb-and-ﬂow property.