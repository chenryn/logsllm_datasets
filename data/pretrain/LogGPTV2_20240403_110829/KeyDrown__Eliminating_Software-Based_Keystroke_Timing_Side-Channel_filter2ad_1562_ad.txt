CPU time as long as it is waiting inside the poll function.
Whenever we receive a keystroke event from the kernel, we
create an additional GTK+ keystroke event with a random key
that is associated with the text ﬁeld of the hidden window.
For every keystroke — regardless of whether it is a printable
character or not — that comes from the kernel, the same path
is active within the library. Thus, an attacker cannot distinguish
an injected keystroke from a real keystroke anymore.
The second layer has no knowledge of an event’s source.
Thus,
it cannot violate R3, as the information whether a
keystroke is real or injected is not present in the second layer.
On Android, the handling of input events is considerably
simpler. The injected events travel directly to the foreground
application without going to any non-Android library. Thus,
all events have exactly the same execution path, and it is
only necessary to drop our fake event immediately before
the registered touch event handler is called. To not leak any
information through the non-executed touch handler, we access
the cache lines in the same way as if the touch handler was
executed.
8
C. Third Layer
Basic Concept. While the ﬁrst
layer protects against
interrupt-based attacks and the second layer prevents attacks
on the library handling the user inputs, the buffer that stores the
actual secret is not protected and can still be monitored using
a Prime+Probe attack. The fake keystrokes sent by the kernel
are unused key codes, which do not have any effect on the
user interface element or the corresponding buffer. We mitigate
cache attacks on this layer by generating cache activity on
the cache lines that are used when the buffer is processed for
any key code received from the kernel. More speciﬁcally, we
access the buffer every time the library receives a keystroke
event from the kernel. This ensures that the buffer is cached
for both real and fake keystrokes.
An attacker who mounts a Flush+Reload attack against
the library, or a Prime+Probe attack directly on the buffer,
sees cache activity for both real and injected events. This
is also the case for cache template attacks, as the injected
events induce a signiﬁcant amount of noise in both the proﬁling
and the exploitation phase. Therefore, the third layer protects
against attacks that are mounted against the Android keyboard
as shown by Lipp et al. [30], or Multi-Prime+Probe attacks
directly on the input ﬁeld buffer (cf. Section III-B).
Implementation Details. In GTK+, the GtkEntry widget
implements the GtkEditable interface, which describes a
text-editing widget, used as a single-line text and password
entry ﬁeld. By setting its visibility ﬂag, entered characters are
shown as a symbol and, thus, hidden from the viewer.
Implementing the countermeasure directly in the GTK+
library would require rebuilding the library and all of its de-
pendencies. As this is highly impractical, we chose a different
approach: LD_PRELOAD allows listing shared objects that are
loaded before other shared objects on the execution of the
program [28]. By using this environment variable, we can
overwrite the gtk_entry_new function that is called when
a new object of GtkEntry should be created. In our own
implementation, we register a key press event handler for the
new entry ﬁeld. This event handler is called on both real and
injected keys and accesses the underlying buffer.
On Android, the basic concept is the same. It is, however,
implemented as part of the keyboard and not the library. The
keyboard relies on the inotifyd command to detect touch
events provided by the kernel. If a password entry ﬁeld is
focused, the keyboard accesses the password entry buffer on
every touch event by calling the key handling function with a
dummy key. This ensures that both the buffer as well as the
keyboard’s key handling functions are active for every event.
V. EVALUATION
We evaluate KeyDrown with respect to the requirements
R1, R2, R3 as well as discuss the performance of our imple-
mentation. We evaluate the x86 version of KeyDrown on a
Lenovo ThinkPad T460s (Intel Core i5-6200U) and the ARM
version on both an LG Nexus 5 (ARMv7) and a OnePlus
3T (ARMv8). A large comparison table can be found in the
appendix. As the results are very similar for all architectures,
we provide the results for the LG Nexus 5 (ARMv7) and
the OnePlus 3T (ARMv8) in the appendix. We evaluate four
TABLE II.
AND DO NOT WORK (
), PARTLY WORK (
OVERVIEW WHICH ATTACKS WORK (
)
) WITH ENABLED () AND DISABLED () KeyDrown.
Android < 8


Android ≥ 8


Linux


KeyDrown
Interface-based [10], [23], [60]
Interrupt-based (rdtsc, [53])
Prime+Probe on L1 [46]
Prime+Probe on LLC
Multi-Prime+Probe
Flush+Reload [17]
DRAMA [43]
different side channels with and without KeyDrown: procfs,
rdtsc, Flush+Reload (including cache template attacks), and
Prime+Probe on the last-level cache. We discuss Prime+Probe
attacks on the L1 cache and DRAMA side-channel attacks.
Table II gives an overview of all known and new attacks and
whether KeyDrown prevents them.
To evaluate KeyDrown, we chose a uniform key-injection
interval [0 ms, 20 ms]. Note that this is not a constant interrupt
rate but quite the opposite. Any real keystroke replaces the
currently scheduled key injection. Real keystrokes are much
rarer and when splitting time into 20 ms intervals, the distri-
bution of real keystrokes in these 20 ms intervals is uniform,
identical to the uniform distribution of our key-injection delay.
Hence, based on the time a keystroke arrives there is no side
channel leaking whether it was a fake one, or a real one. This
leads to a uniform interrupt density function with 100 events
per second, independent of the real keystrokes.
As described in Section III, we compare our results to an
always-one oracle and a random-guessing oracle. A random-
guessing oracle, which chooses randomly — without any
information — for every 10 ms interval whether there was a
keystroke based on an apriori probability, would achieve an F-
score of 0.14. The always-one oracle performs slightly better,
as it has a higher true positive rate of 100 %, but it also has
a false positive rate of 100 %, i.e., the oracle neither uses nor
provides any information. The F-score of the always-one oracle
is 0.15 and thus, higher than the F-score of a random-guessing
oracle. If a side channel yields an F-score of this value or
below, the attacker gains no advantage over the always-one
oracle from this side channel.
For all evaluated attacks, we provide the precision of the
attack with and without KeyDrown, based on the best threshold
distinguisher we can ﬁnd. KeyDrown does not inﬂuence the
recall, as it does not reduce the number of true positives and it
also does not increase the number of real keystrokes. However,
we provide the recall for all attacks with a recall below 1. The
harmonic mean of precision and recall — the F-score — gives
an indication how well the countermeasure works. We provide
the advantage over the always-one oracle as a direct indicator
on whether it makes sense to use the side channel or not.
A. Requirement R1
We evaluate KeyDrown with respect to R1, the elimination
of single-trace attacks. R1 deﬁnes that a side channel may
not provide any advantage over an always-one oracle, i.e.,
the advantage measured in the F-score must be ≤0.0 %. We
show that KeyDrown fulﬁlls this requirement by mounting
state-of-the-art attacks with and without KeyDrown. Table III
summarizes the F-scores for all attacks with and without
9
TABLE III.
F-SCORE WITHOUT AND WITH KeyDrown AND ADVANTAGE
OVER ALWAYS-ONE ORACLE FOR STATE-OF-THE-ART ATTACKS. KeyDrown
ELIMINATES ANY SIDE-CHANNEL ADVANTAGE.
Side Channel
procfs
rdtsc
Flush+Reload
LLC Prime+Probe
no KeyDrown
(∆ always-one)
KeyDrown
(∆ always-one)
1.00
0.94
0.99
0.81
(+575.0 %)
(+537.4 %)
(+569.3 %)
(+440.0 %)
0.15
0.14
0.09
0.11
(+0.0 %)
(−3.8 %)
(−40.2 %)
(−27.7 %)
Fig. 9. Multi-Prime+Probe attack on the 5 cache sets from 0x2514250
to 0x2514390 of i8042_interrupt. Injected keystrokes ((cid:78)) and real
events (•) are not distinguishable with KeyDrown (before dotted line).
Flush+Reload attack on address 0x381c0 of libgdk-3.so.
Injected keystrokes ((cid:78)) and real events (•) are not distinguishable when
Fig. 8.
KeyDrown is active (before dotted line).
KeyDrown. In all cases, KeyDrown eliminates any advantage
that can be gained from the side channel, when considering
single-trace attacks only. In some cases, the numerous false
positives and false negatives lead to an even worse F-score.
Flush+Reload. Flush+Reload allows an attacker to monitor
accesses to memory addresses of a shared library with a very
high accuracy. Figure 8 shows the result of such an attack
against the gdk_keymap_get_modifier_mask function
at address 0x381c0 of
libgdk-3.so (v3.20.4 on Ubuntu
Linux), the shared library isolating GTK+ from the windowing
system. This function is executed on every keystroke to re-
trieve the hardware modiﬁer mask of the windowing system.
The attacker measures cache hits on the monitored address
whenever a key is pressed and, thus, can spy on the keystroke
timings very accurately. While KeyDrown is active, the attacker
measures additional cache hits on every injected keystroke and
cannot distinguish between real and fake keystrokes. When
KeyDrown is not active, the attack is successful.
For other addresses found using cache template attacks,
we made the same observation. Without KeyDrown, both
proﬁling and exploiting vulnerable addresses is possible. With
KeyDrown, we still ﬁnd all addresses that are loaded into
the cache upon keystrokes, however, as we cannot distinguish
between real and fake keystrokes we cannot exploit
this
anymore. Without KeyDrown, the precision is 1.00 and the F-
score is 0.99, which is a +569.3 % advantage over an always-
one oracle. If KeyDrown is active, the precision is lowered
to 0.05 and, thus, the resulting F-score is 0.09, which is a
(negative) advantage of −40.2 % over the always-one oracle.
Prime+Probe. If an attacker cannot use Flush+Reload, a
fallback to Prime+Probe is possible. The disadvantage of a
Prime+Probe attack on the last-level cache is the amount of
noise that increases the false-positive rate. Prior to this work,
there was no successful keystroke attack using Prime+Probe
on the last-level cache. We perform the Multi-Prime+Probe
attack presented in Section III-B to attack keystroke timings.
Figure 9 shows the results of inferring keystrokes by
detecting the keyboard interrupt handler’s cache activity using
Multi-Prime+Probe. We monitored 5 cache sets in parallel for
a higher noise robustness. Without KeyDrown, the precision is
Fig. 10. Multi-Prime+Probe attack on the 5 cache sets corresponding to a
password ﬁeld’s buffer within a demo application. Injected keystrokes ((cid:78)) and
real events (•) are not distinguishable with KeyDrown (before dotted line).
already at a quite low value of 0.71 with a recall of only
0.92, yielding an F-score of 0.81, which is an advantage
over an always-one oracle of +440.0 %. Memory accesses
to one of the cache sets by any other application cannot
be distinguished from a cache set access by the keyboard
interrupt handler, causing a high number of false positives.
If we enable KeyDrown, the precision drops to 0.06, as the
attacker additionally measures the noise generated by the
injected keystrokes. The F-score is then 0.11, which is a
(negative) advantage over an always-one oracle of -27.7 %.
Figure 10 shows the results of mounting a Multi-Prime+
Probe attack on the buffer of a password ﬁeld within a GTK+
application. Although there is more noise visible in the traces,
we achieve the same precision and F-score as for the attack on
the kernel module when KeyDrown is disabled. If we enable
KeyDrown, the precision drops to 0.05, which is a bit lower
than the precision on the kernel, resulting in an F-score of
0.10, which is again no advantage over an always-one oracle.
Interrupts. KeyDrown also protects against interrupt-based
attacks, including our new timing-based attack. For the attacks
based on the procfs interface [10], [23], we measure an
average reading interval of 980 cycles. With our new attack
based on rdtsc, we can measure every 95 cycles on average,
resulting in a probing frequency one order of magnitude higher.
Figure 11 and Figure 12 illustrate the effect of our
countermeasure on the procfs-based interrupt attack and
the rdtsc-based attack, respectively. Without KeyDrown, we
achieve a precision of 1.00 for the procfs-based attack and
a precision of 0.89 for the rdtsc-based attack, resulting in
an F-score of 1.00 and 0.94 respectively. Enabling KeyDrown
reduces the precision to 0.08 and 0.07 respectively. Thus, the
resulting F-score is 0.15, which is exactly the same as the
always-one oracle, for the procfs-based attack, and 0.14 for
the rdtsc-based attack, which is a (negative) advantage over
an always-one oracle of -3.8 %.
10
00.511.522.53·1090200400600Runtime[cycles]Latency[cycles]00.20.40.60.81·1090246Runtime[cycles]Activecachesets1.61.822.22.42.62.833.2·109024Runtime[cycles]ActivecachesetsWe set the simulated typing variance to ±40 ms which is
a bit less than the value reported by Lee et al. [27] for trained
text sequences. In total, we generated 300 000 simulated traces,
each containing 8 keystrokes within 2 s. From this set of
simulated traces, we evaluated how many randomly chosen
traces we have to combine to extract the correct positions of the
keystrokes. We found that an attacker requires an average of
2458 traces to extract the correct positions. This is signiﬁcantly
more than the 1825 traces deemed to be secure in R2.
C. Requirement R3
As KeyDrown fulﬁlls R1 and R2, we can be assured that the
underlying technique is a working countermeasure. However,
as the implementation of a countermeasure itself can leak
information, we need to ensure that KeyDrown does not create
a new software-based side channel in order to satisfy R3.
First Layer. The ﬁrst layer runs in the kernel and can
thus only be attacked using Prime+Probe. Figure 7 shows
that, in general, we have the same execution ﬂow and data
accesses. For the few deviations, we prevent any potential
cache leakage from non-executed code paths by performing
the same memory accesses as if they were executed. As an
attacker cannot distinguish if a cache activity is caused by an