                    Console.WriteLine("native lan manager: " + ss[1]);
                    int off = 0;
                    for (int i = 47; i < len - 7; i++)
                    {
                        if (buf[i] == 'N' && buf[i + 1] == 'T' && buf[i + 2] == 'L' && buf[i + 3] == 'M' && buf[i + 4] == 'S' && buf[i + 5] == 'S' && buf[i + 6] == 'P') { off = i; break; }
                    }
                    byte[] ntlm = new byte[len];
                    Array.Copy(buf, off, ntlm, 0, len);
                    len = BitConverter.ToInt16(ntlm, 0xc);
                    off = BitConverter.ToInt16(ntlm, 0x10);
                    Console.WriteLine("negotiate target: " + Encoding.Unicode.GetString(ntlm, off, len));
                    Console.WriteLine("os major version: " + ntlm[off - 8]);
                    Console.WriteLine("os minor version: " + ntlm[off - 7]);
                    Console.WriteLine("os build number: " + BitConverter.ToInt16(ntlm, off - 6));
                    Console.WriteLine("ntlm current revision: " + ntlm[off - 1]);
                    off += len;
                    int type = BitConverter.ToInt16(ntlm, off);
                    while (type != 0)
                    {
                        off += 2;
                        len = BitConverter.ToInt16(ntlm, off);
                        off += 2;
                        switch (type)
                        {
                            case 1:
                                {
                                    Console.WriteLine("NetBIOS computer name: " + Encoding.Unicode.GetString(ntlm, off, len));
                                    break;
                                }
                            case 2:
                                {
                                    Console.WriteLine("NetBIOS domain name: " + Encoding.Unicode.GetString(ntlm, off, len));
                                    break;
                                }
                            case 3:
                                {
                                    Console.WriteLine("DNS computer name: " + Encoding.Unicode.GetString(ntlm, off, len));
                                    break;
                                }
                            case 4:
                                {
                                    Console.WriteLine("DNS domain name: " + Encoding.Unicode.GetString(ntlm, off, len));
                                    break;
                                }
                            case 5:
                                {
                                    Console.WriteLine("DNS tree name: " + Encoding.Unicode.GetString(ntlm, off, len));
                                    break;
                                }
                            case 7:
                                {
                                    Console.WriteLine("time stamp: {0:o}", DateTime.FromFileTime(BitConverter.ToInt64(ntlm, off)));
                                    break;
                                }
                            default:
                                {
                                    Console.Write("Unknown type {0}, data: ", type);
                                    for (int i = 0; i < len; i++)
                                    {
                                        Console.Write(ntlm[i + off].ToString("X2"));
                                    }
                                    Console.WriteLine();
                                    break;
                                }
                        }
                        off += len;
                        type = BitConverter.ToInt16(ntlm, off);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("err: " + ex);
                }
            }
        }
    }
效果展示图是这样的
msf底下也有类似的模块auxiliary/scanner/smb/smb_version
###  3\. ntlm relay
Hot
Potato，2018-8581,2019-1040相信大家也都不陌生了，这其中都有ntlmrelay的影子。作为一个在上世纪就被提出的安全问题，时至2019的今天，ntlmrelay仍然在远程命令执行。横向扩展，权限提升等方面发挥着巨大的作用。本篇文章剩余部门简单的介绍一些ntlm_relay相关的概念。
(1) ntlm_relay 的一般过程
先回顾下之前ntlm 认证的 type1,type2,type 3
那如果这个时候有个中间的攻击者出现
看图已经能够很清晰得理解ntlm_relay的一般过程，作为中间人，攻击者将来自客户端的包(type
1)转发给服务端，将来自服务端的challenge(type 2)转发给客户端，然后客户端计算完response 之后，再把response(type 3)
转发给服务端，服务端验证rsponse通过之后，授予攻击者访问的权限。
我们抓包查看整个过程跟上图差不多(其中Attacker是172.16.100.1,Inventory
Server是172.16.100.5，Target是172.16.100.128)
(2) ntlmrelay or smbrelay
我们之前反复在说一件事,ntlm是一个嵌入式的协议，消息的传输依赖于使用ntlm的上层协议，比如SMB,LDAP,HTTP等。我们通过查看包就可以很清楚的看到这一点。
那ntlm的上层协议是smb的情况下,ntlmrelay就是smbrelay。那如果上层协议是http，我们也可以叫做httprelay，但是都统称ntlmrelay，因此，后面统一用ntlm_relay，就不再纠结这个字样了。
(3) 跨协议的relay
又是我们之前反复强调的一个点,ntlm是一个嵌入式的协议，消息的传输依赖于使用ntlm的上层协议，比如SMB,LDAP,HTTP等,那不管上层协议是啥，ntlm的认证总归是type
1,type 2,type3
。所以我们就不局限于之前提到的smb到smb这种relay，可以在一个协议里面提取ntlm认证信息，放进另外一个协议里面，实现跨协议的relay。
(4) relay or reflet
再看看relay的这种图
如上图，如果Inventory Server和Target是同一台机子，那么也就是说我们攻击者拿到Inventory
Server发来的请求之后，发回给Inventory
Server进行认证。这个就是reflect。在工作组环境里面，工作组中的机器之间相互没有信任关系，每台机器的账号密码只是保存在自己的SAM文件中，这个时候relay到别的机器，除非两台机器的账号密码一样，不然没有别的意义了，这个时候的攻击手段就是将机器reflect回机子本身。因此微软在ms08-068中对smb
reflect到smb 做了限制。CVE-2019-1384(Ghost Potato)就是绕过了该补丁。
(5) 挖掘ntlm_relay的一般方法
  1. 如何触发Inventory Server 向Attacker发起请求，将在下篇文章里面详细阐述
  2. Attacker拿到请求之后，是进行ntlm ntlm破解还是选择进行relay，relay的话，可以跨协议relay，那relay到不同的协议能起到什么作用，将在下下篇文章里面详细阐述。