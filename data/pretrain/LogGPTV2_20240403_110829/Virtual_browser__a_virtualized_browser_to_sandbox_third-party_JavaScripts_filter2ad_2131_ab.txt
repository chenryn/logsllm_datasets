### Figure 2(b) Analysis

As shown in Figure 2(b), the `for` loop is not executed directly on the native JavaScript engine. To exploit this vulnerability, the virtual browser's source code must contain a `for` loop with the exact same pattern, where `a`, `b`, and `c` are all open inputs. Attackers would then need to manipulate other inputs to achieve specific values that trigger the attack. Meeting either of these conditions is challenging, as discussed in Section 6.3.

### Dynamic Language Features

Some dynamic language features, such as `eval` and `with`, are not supported in current JavaScript-based approaches. Developers still use `eval` to parse JSON strings in older browsers that lack native JSON support. According to Gatekeeper [21], approximately 9.4% of widgets use `with`.

### Classical Runtime Approaches

Classical runtime approaches, such as the runtime part in GateKeeper [21], employ a parameter checking model. This means they cannot check the safety of `eval` and `setTimeout`, whose parameters contain JavaScript code and need to be passed to the JavaScript parser. Web Sandbox [27] does not execute third-party scripts, making it difficult to switch execution contexts for `with` statements. Although it is possible to recursively transfer `eval` arguments back to the server for further processing, this would introduce significant client-server delays, rendering the approach impractical. Therefore, Web Sandbox does not support `with` and has incomplete support for `eval`.

### Browser Modification and Plugins

Approaches that modify existing browsers or use plugins like Native Client [38] are not universally supported by all browsers. Mozilla has publicly rejected adopting NaCl [8], and there is no indication that Internet Explorer (IE) and Opera will adopt it either. Consequently, these approaches can only protect a limited number of users who deploy them. In contrast, Virtual Browser uses only JavaScript features that are supported by all current browsers.

## 3. Design

### 3.1 Architecture

The architecture of Virtual Browser, illustrated in Figure 3, closely resembles a native web browser but is implemented entirely in JavaScript. Below, we detail the interface, components, and data flows of Virtual Browser.

#### 3.1.1 Interface

Similar to Microsoft Web Sandbox, Virtual Browser takes a string containing the code of a third-party JavaScript program as input. For example, the following code includes third-party JavaScript:

```javascript
str = "third-party JavaScript code";
```

This string, which can be embedded in host web pages, is vulnerable to string injection attacks. To mitigate this, we use Base64 encoding, one of many existing methods [36, 29] to prevent such attacks. Virtual Browser also provides a file loading interface. An XMLHttpRequest is made to the same-origin web server, which redirects the request to the real web server (e.g., `www.a.com`). The received content is then fed into the evaluate interface.

#### 3.1.2 Components and Data Objects

The functionality of Virtual Browser's components and data objects mirrors their counterparts in a native browser.

- **Virtual JavaScript Parser**: Parses third-party JavaScript code and outputs the parsed JavaScript Abstract Syntax Tree (AST).
- **Virtual JavaScript Execution Engine**: Executes the parsed AST from the virtual JavaScript parser. The interface includes `putValue`, `getValue`, and function call/return. `putValue` is triggered when an object is changed, and modifications to private or shared functions/variables go through this method. `getValue` provides an interface for read operations. Function call/return is used for calling shared functions from natively running code and private functions from third-party code.
- **Virtual CSS Parser**: Parses CSS code and attaches the results to the Virtual DOM.
- **Virtual HTML Parser**: Parses HTML code provided by other components and outputs the DOM tree.

**Data Objects:**

- **Virtual DOM**: Linked to the native DOM via an iframe. This link is solely for displaying the virtual DOM on the screen. Access to the native DOM from third-party code is forbidden, and access to the virtual DOM from trusted code is also restricted by iframe isolation.
- **Private Objects**: Stores JavaScript objects accessible only to third-party JavaScript in Virtual Browser. Section 4.1.2 provides details on isolation.

#### 3.1.3 Flows

**Flows within Virtual Browser:**

When a third-party JavaScript code runs in Virtual Browser, the virtual JavaScript parser first parses it into an AST and passes it to the virtual JavaScript execution engine. The execution engine processes the AST similarly to a standard JavaScript interpreter. When HTML content is encountered, it is sent to the virtual HTML parser. Similarly, JavaScript code and CSS style sheets are directed to the virtual JavaScript and CSS parsers. All these processes are depicted in Figure 3.

**Flows between Virtual Browser and Trusted Code:**

Virtual Browser is isolated from trusted code, as analyzed in Section 4.1. The only connection is a shared object that links trusted code running on the native browser with third-party code running in Virtual Browser.

### 3.2 Examples of JavaScript Operations

**Figure 4: Securing Several Dynamic JavaScript Operations**

In this section, we demonstrate several JavaScript operations in Virtual Browser to illustrate its functionality. Some of these operations are not supported by previous approaches.

- **`with` Statement**: A notoriously difficult problem, `with` becomes straightforward in our system because Virtual Browser interprets JavaScript. As shown in Figure 4(a), `with exp` is simply a context switch.
- **`eval` Function**: Often disallowed due to its unpredictability, `eval` is handled by redirecting its contents back to the virtual JavaScript parser. Regardless of nested `eval` calls, the JavaScript remains within the virtual JavaScript engine, as shown in Figure 4(b).
- **`document.write`/`innerHTML`**: These functions are related to the HTML parser. When the virtual JavaScript execution engine encounters them, it redirects them to the virtual HTML parser, as illustrated in Figure 4(c). If scripts are found in the HTML, an XMLHttpRequest is sent to the same-origin web server and then redirected to the real web server.
- **`arguments` Object**: Implemented inside a function, `arguments` are stored in the current running context. Third-party code can directly access these arguments.

## 4. Security Analysis

### 4.1 Isolation through Avoidance

We design Virtual Browser as a separate browser built on top of existing browsers. The right part of Figure 1 shows Virtual Browser running on a native browser, with trusted JavaScripts and third-party JavaScripts running in their respective environments. The method for building Virtual Browser is similar to building a native browser, requiring a JavaScript engine, HTML parser, CSS parser, etc., all written in JavaScript.

#### 4.1.1 Cutting off Outflows of Virtual Browser

To prevent third-party code from running directly on the native browser, we ensure it is confined within Virtual Browser. We avoid using functions that can trigger native parsing, such as `eval` and `new Function(string)`. We also perform static call graph analysis on the WebKit JavaScript Core to identify and avoid functions that call the JavaScript parser.

#### 4.1.2 Cutting off Inflows of Virtual Browser

To prevent trusted JavaScripts from accessing objects in Virtual Browser, we use iframes to isolate the virtual DOM and encapsulate other objects. We provide a limited API as the interface and keep all other variables and objects private within Virtual Browser.

### 4.2 Enabling Secure Communication

In Section 4.2, we enable shared objects and secure communication channels. Since we have already built an isolated sandbox, we focus on redirecting potentially dangerous flows within the third-party code back to the sandbox to facilitate safe communication.

By combining avoidance and redirection, Virtual Browser ensures that third-party JavaScripts and their data flows remain securely contained, while enabling necessary communication with external resources.