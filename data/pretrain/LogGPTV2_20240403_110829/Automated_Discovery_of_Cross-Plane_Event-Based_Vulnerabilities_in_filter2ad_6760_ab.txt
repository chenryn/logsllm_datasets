network link state changes (i.e., all apps that register link
event listeners). An app that cares about new network links can
use that event to make decisions about what functionality to
perform (e.g., recalculation of bandwidth for QoS guarantees).
Such an app can also gather information about what the control
plane’s state looks like in the present (i.e., API read calls),
request changes to the control plane (i.e., API write calls), or
notify other apps and core services asynchronously (i.e., event
dispatching). That process is repeated by other apps and core
services that register event listeners and react to events, and
the combination of such interactions forms the basis (and
complexity) of the event-driven SDN architecture.
In ONOS, apps can access the control plane’s state through
API read calls (e.g., getHosts()) or by registering to receive
asynchronous events (e.g., listening for HostEvent events).
API write calls can trigger event dispatches. ONOS uses a
special listener for data plane packet events, the PacketPro-
cessor, that allows components to receive or generate data
plane packets.
B. SDN Security Challenges
1) Malicious data plane input: By design, the SDN archi-
tecture decouples the control and data planes. However, control
plane decisions are often made as a result of information
3
SDN ControllerController CoreApp A…Event Dispatchers(Northbound API)Core Services(Northbound API)CONTROL PLANESouthbound APICore Data StoresDATA PLANE…APPLICATION PLANE(Reactive Event-Based Network Applications)EL (event kind X)App Internal MethodsApp Internal Data StoreOpenFlow MessagesNetwork Events (in)Data Store EventsData Plane ConnectionsEL (event kind Y)…App BELEL…Network Events (out)Core Service EventsELEventListenerData Plane HostForwarding Device…DATA PLANE    CONTROL PLANEVictim HostsAttacker Host1AppSDN ControllerAppCore ServiceSB API (in)AppCore ServiceSB API (out)……2345gathered from data plane input, allowing attackers to inﬂuence
control plane behavior even if the controller and app infrastruc-
tures are assumed to be hardened. Cross-plane attacks, such
as topology poisoning [22], [14], [57], impact control plane
operations by causing denial-of-service or connectivity-based
attacks. Figure 2 shows a representative example of a cross-
plane attack that uses malicious data plane input to produce
an unintended data plane effect.
Attackers can infer whether the network is non-SDN or
SDN and which controller is being used in an SDN setting [4],
[71]. Defenses to date, such as control plane causality track-
ing [59], [62], trusted data plane identities [26], and timing-
based link fabrication prevention [57], are useful in preventing
speciﬁc classes of attacks but are not designed for vulnerability
discovery because they track speciﬁc execution traces as they
occur rather than all possible execution traces prior to runtime.
Current SDN vulnerability tools, such as BEADS [25] and
DELTA [34], rely on fuzzing techniques that do not easily
capture complex event-based vulnerabilities.
Although controllers that are written in safely typed lan-
guages (e.g., Java) can mitigate unchecked data plane input,
type safety does not completely prevent misuse. An attacker
can try to leverage syntactically valid data that may be
semantically invalid depending on its use. For instance, the
IPv4 address 255.255.255.255 is syntactically valid, but
there may be unintended consequences if a controller or app
component attempts to use it as a host address.
Mitigation approach: EVENTSCOPE analyzes how ma-
licious data plane input and cross-plane attacks can have
cascading effects throughout controller components and apps
as a result of unhandled event types (Section V). We demon-
strate how that analysis allows us to identify ONOS app
vulnerabilities (Section VII).
2) Event-driven apps: SDN controller services and apps
can subscribe to events of interest with event listeners. How-
ever, not all event types of a particular event kind may be
handled. In the absence of well-deﬁned formal properties
(e.g., safety and liveness) that specify what an app’s behavior
ought to be, it is not easy to automatically determine what
constitutes “correct” or “incorrect” behavior. As a result, it
is difﬁcult
to ﬁnd bugs that are syntactically correct but
semantically incorrect regarding the intended app behavior, and
difﬁcult to determine how that behavior affects the data plane.
Network veriﬁcation approaches [29], [11] require formal
property speciﬁcations or do not scale beyond trivial con-
trollers. CONGUARD [66] and DELTA [34] offer models for
reasoning about the ordering of OpenFlow events, but such
events are only one part in a complex, event-driven, network
operating system that must consider additional (and often more
sophisticated) network abstractions.
Mitigation approach: EVENTSCOPE uses a clustering
approach to infer the intended application behavior based on
the insight that apps that perform similar functionality are in-
terested in similar kinds of events and event types (Section IV).
EVENTSCOPE identiﬁes cases in which a given app’s event
types are absent with respect to similar apps and evaluates
whether these absences create vulnerabilities (Section V-B).
Fig. 3: EVENTSCOPE architecture overview.
3) Event ﬂow interactions: As apps can originate from
different parties [59], assessment of system-wide “correct”
behavior is complex when components closely collaborate
and form event-driven dependencies. The event-driven SDN
architecture allows ﬂexible and composable development, with
events helping to provide convenient abstractions and allowing
components to subscribe to asynchronous activities of interest.
Prior work [1], [18], [43], [61], [42] has approached controller
design by providing formally speciﬁed runtime languages and
safe-by-construction controllers, but such approaches do not
offer the extensibility of the operating-system-like controllers
used in practice in production.
Understanding how event-driven components in an SDN
interact is challenging because events have both control ﬂow
and data ﬂow elements. Events represent control ﬂow because
they are processed by event listener methods that may call
additional methods depending on the event information, and
they represent data ﬂow because they carry data describing the
event (e.g., a host event contains that host’s details). Although
control ﬂow and data ﬂow can be modeled together in program
dependence graphs [16] or code property graphs [67], analysis
is often limited to single procedures because too many details
prevent the analysis from scaling to complex, inter-procedural
event-driven systems. Further, events can be used to inﬂuence
what code paths are or are not taken and to trigger additional
events.
Mitigation approach: EVENTSCOPE uses the event
ﬂow graph to model the key features of an event-driven SDN
system while abstracting away unnecessary control ﬂow details
(Section V-A). The event ﬂow graph shows how triggered
events have consequences elsewhere, particularly when ma-
licious data plane inputs later inﬂuence data plane changes.
III. EVENTSCOPE OVERVIEW
We designed EVENTSCOPE to identify cross-plane event-
based vulnerabilities in three phases, as illustrated in Figure 3.
The ﬁrst phase, the candidate vulnerability generator, takes
the set of SDN apps as input and produces a list of unhandled
event types for each app. In our implementation, we require
the apps’ Java bytecode. As ground truth about which event
types apps should handle is not available, EVENTSCOPE uses
a clustering approach that reports event types that are common
in the cluster but are not handled in a particular app.
The second phase, the event ﬂow graph generator, takes the
apps’ code, the controller’s code, and a deﬁnition of controller
4
SDN app codeSDN controller codeCandidate VulnerabilityGeneratorEvent UseEvent Flow GraphGeneratorMissing Event Types1    2    3123Data Plane InData Plane Out…Vulnerability ValidatorData Plane InData Plane Out…Vulnerabilities (and Contexts)API and Event UseCore ServicesEvent Use MatrixEvent Flow GraphCandidate VulnerabilitiesEVENT FLOW ANALYSISEVENT USE ANALYSISAPI definitionAPI calls as inputs and constructs an event ﬂow graph that
records how events propagate and inﬂuence the system. This
includes event propagation within the controller as well as
within apps and combinations of apps.
Finally, the event ﬂow graph and the unhandled event types
from the ﬁrst two phases are combined in the third phase, the
vulnerability validator, to identify the data plane impacts of
unhandled event types. The output of this phase results in a
list of vulnerabilities that can inﬂuence the data plane as a
result of unhandled event types.
EVENTSCOPE automates the process and the phases work
together, but for illustrative purposes, we discuss each of
EVENTSCOPE’s three phases separately before discussing the
results from applying EVENTSCOPE to the ONOS SDN con-
troller. In summary:
•
•
•
The candidate vulnerability generator (Section IV)
generates a list of possible vulnerabilities resulting
from unhandled events based on apps’ event use in
comparison to that of similar apps.
The event ﬂow graph generator (Section V-A)
analyzes the use of events between components to
construct a concise representation of how events are
passed and how they affect data plane operations.
The vulnerability validator (Section V-B) ﬁlters and
validates the possible missing-event-handling vulner-
abilities from the ﬁrst component by using the event
ﬂow graph to determine whether the missing event
has had data plane impacts, either in isolation or in
combination with other apps.
Inputs: Users provide EVENTSCOPE with the controller’s
code and apps’ code to be analyzed. In our implementation,
this code is provided as Java bytecode. EVENTSCOPE also
requires a deﬁnition of the controller’s northbound (i.e., appli-
cation) interface, which is simply the set of method signatures
that comprise the northbound API.
Outputs: EVENTSCOPE produces a list of vulnerabilities
related to missing-event handling that can impact the data-
plane and the contexts in which the vulnerabilities occur.
Practitioners can investigate such vulnerabilities to report bugs
or to determine if exploits can be realized.
IV. EVENT USE ANALYSIS
In this section, we analyze the use of event kinds and event
types in SDN app components and focus on unhandled events
as signs of potential vulnerabilities. From that information,
EVENTSCOPE generates a list of candidate vulnerabilities.
A. Event Use Methodology
Given the lack of ground truth about how apps should
handle event types, we approach the problem of identifying
possible unhandled event types by analyzing the similarity of
different apps’ uses of events. EVENTSCOPE clusters similar
apps together, and, for each app, marks the unhandled event
types in that app (with respect to that cluster) as a candidate
vulnerability.
Algorithm 1 Candidate Vulnerability Generation
Input: Apps A, event kinds EK, event types ET , threshold τ
Output: List of candidate vulnerabilities VC, event use matrix M
Initialize: M [i][j] ← false;∀i ∈ A,∀j ∈ ET
(cid:46) Event use
matrix MA×ET
D[i][j] ← 0;∀i ∈ A,∀j ∈ A
V ← A ∪ ET ,E ← ∅,GS ← (V,E)
VC ← ∅
(cid:46) Distance matrix DA×A
(cid:46) SimRank graph GS
(cid:46) Candidate vulnerability list VC
(cid:46) Similarity matrix SA×A
(cid:46) Distance = 1− Similarity
(cid:46) Set of app clusters C
(cid:46) Union of event types within cluster c
T ← getHandledEventTypes(a)
for each t ∈ T do
M [a][t] ← true
E ← E ∪ {(a, t) , (t, a)}
for each j ∈ S[i] do
1: for each a ∈ A do
2:
3:
4:
5:
6: S ← SimRank(GS, A)
7: for each i ∈ S do
8:
D[i][j] ← 1 − S[i][j]
9:
10: C ← hierarchicalCluster(D, τ )
11: for each c ∈ C do
12:
13:
14:
15:
16:
17:
18:
19:
20:
u ← ∅
for each a ∈ C do
u ← u ∪ M [a]
for each a ∈ C do
d ← u \ M [a]
for each t ∈ d do
k ← getEventKind(t, EK , ET )
if k is handled by a then
VC .append((a, t))
(cid:46) Set difference d of cluster and app
1) Algorithm: We describe EVENTSCOPE’s approach,
shown in Algorithm 1. We assume a set of apps that contain
event listeners, A; a set of event kinds, EK (e.g., HostEvent
in ONOS); a set of event types, ET (e.g., HOST ADDED
in ONOS) that relate to the functional nature of event kinds
in EK; and a threshold, τ, used to determine the number of
app clusters. For intermediate data structures, we generate an
event use matrix, M, that shows how apps use event types;
a distance matrix, D, that represents the “distances” between
apps in terms of how they are related; and a bipartite directed
graph, GS, that represents the relations between apps and event
types.
The algorithm determines the event types that each app
uses (lines 1–5). It does so using static analysis through the
generation of a control ﬂow graph (CFG) of the relevant event
listener method. If a given event type is handled (line 2), it
is marked in the event use matrix, M, (line 4) and in the
bipartite graph, GS (line 5). The algorithm then computes the
SimRank similarity metric across GS and reduces it to vertices
of interest, or A ⊂ V, to produce the similarity matrix, S
(line 5). It then takes the inverse of the similarity metric to
compute the distance metric (lines 7–9), and uses it to compute
app clusters by using a complete-linkage2 (i.e., maximum
linkage) hierarchical clustering algorithm (line 10).
After the apps are partitioned into clusters, the algorithm
inspects each app relative to its own cluster (lines 11–20). For
each cluster, it generates a union of event types handled by
that cluster’s apps (lines 12–14). For a given app, it computes
2Alternatives include single-linkage and average-linkage clustering. We
chose complete-linkage clustering because it 1) maximizes the distance
between two elements of different clusters and 2) avoids the problem of
grouping dissimilar elements that single-linkage clustering would entail [28].
5
what event types are not handled by that app’s event listener
with respect to the cluster’s union (line 16). In some cases,
the event type will be related to an event kind that the app
does not handle at all, and we do not consider such scenarios
to represent candidate vulnerabilities. When the event type’s
kind is handled by the app (line 19), the algorithm marks the
event kind as a candidate vulnerability (line 20).
2) Design decisions: Initially, we applied the Levenshtein
distance as our distance metric by treating each row of M as
a bit vector, based on prior work on SDN app API use simi-
larity [32]. However, we found that the Levenshtein distance
did not capture the structural similarities among apps, event
kinds, and event types. Instead, we opted for the SimRank
metric, which expresses the idea that “two objects are similar
if they are related to similar objects” [24]. SimRank ﬁts more
naturally with our problem of expressing the similarity of two
apps that have relations to similar event types.
As each app includes a self-deﬁned category, we were
interested in whether such categories could describe functional
event use similarity. However, we found that the categories are
too vague to be meaningful for similar-event-handling identi-
ﬁcation, so we opted instead for a distance-based clustering
approach that can be generated even if app categories are not
speciﬁed. One example of the problem is that of the forwarding
app fwd and the routing app routing in ONOS, which are
both in the trafﬁc engineering category. While we might expect
those apps to be similar, since they are in the same category
and share the same high-level objective of making trafﬁc
engineering decisions at different OSI layers, it turns out that
the reactive forwarding app responds to new packets to make
its decisions, while the routing app uses the existing network
state to make its decisions. Those functional differences result
in use of radically different event kinds and types.
3) Interpretation: Because apps do not provide well-
deﬁned semantics about their correct operation, we do not have