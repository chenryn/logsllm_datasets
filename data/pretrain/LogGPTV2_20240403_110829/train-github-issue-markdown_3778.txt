I've noticed an easy area to make a mistake in the language because of this SO
question. Take this example:
    class MyClass {
        @SetDefaultValue
        filePath: string;
    }
    var c = new MyClass();
    console.log(c.filePath);
    function SetDefaultValue(defaultValue = "Example") {
        return function (target: Object, propertyKey: string | symbol) {
            target[propertyKey] = defaultValue;
        };
    }
This compiles fine; however, this will output `undefined`. To fix this, the
developer needs to remember to add parentheses:
    class MyClass {
        @SetDefaultValue()
        filePath: string;
    }
Now it will output `Example`.
This seems too sneaky to me. I can see this leading to incredibly annoying
bugs in applications. Is there any way the compiler could get both ways to
work or throw a compile error for one of them?