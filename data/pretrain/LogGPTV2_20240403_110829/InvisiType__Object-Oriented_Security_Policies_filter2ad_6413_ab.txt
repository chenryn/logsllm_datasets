promote(s, TaintPolicy)
return s
Figure 4. Untainting a sanitized string in the
escape function in the cgi module
applied to strings received from a socket. Strings are un-
tainted in the escape method by calling promote on the
sanitized string and the TaintPolicy class, as shown in
Figure 4. The pair of demote and promote operation
implements Taint Constraints 1 and 4.
2.4 Detecting Safety Violations
The runtime system of the language automatically en-
sures that there is no information ﬂow from an input string
to system calls. A tainted string in this system is a string
that has been demoted with the TaintPolicy class. All
input strings are marked as tainted; the taint is propagated
through concatenation; taint is removed when escape is
called; any system call on tainted strings generates an ex-
ception. This example illustrates how ﬁne-grained informa-
tion ﬂow control can be provided in a way that requires no
modiﬁcation to third-party code, at either the source or bi-
nary level.
3
InvisiType Design
In this section, we present the design and rationale of In-
visiType. We ﬁrst describe the class hierarchy of policy and
protected classes, then describe how to deﬁne the safety-
checking rules. Finally, we describe how InvisiType enables
the platform developers to distinguish between third-party
and platform code using the notion of restricted code do-
mains.
3.1
InvisiType Policy and Protected Classes
As discussed in Section 1, policies are expressed as sub-
classes of InvisiType. A protected class is derived dy-
namically and implicitly, via multiple inheritance, from the
policy and the class of the object being put under the pol-
icy. A platform developer can choose to place individual
object instances under a policy possibly only for a duration.
Thus, the type of an object can change dynamically. An
object’s class hierarchy consists of the classes it belongs to
ordinarily, followed by a dynamically modiﬁable protected
class hierarchy consisting of one or more protected classes,
as shown in Figure 5. Note that the protected class hier-
archy is visible only to the runtime system and not to the
application software.
The built-in demote and promote functions can be
used to apply a policy to or remove a policy from an object
(Figure 6). Upon demotion, a new protected class imple-
menting the given safety-checking rules in a policy class is
added as the lowest member in the instance’s protected class
hierarchy. Upon promotion, the protected subclass corre-
sponding to the given policy is removed from the object’s
hierarchy.
Figure 5. Class hierarchy for InvisiType sub-
classes: normal arrow indicates inheritance sup-
ported in an underlying language and a dotted arrow
indicates inheritance supported by the InvisiType run-
time.
3.2 Safety Checking In InvisiType Classes
InvisiType is designed as an extension of the underly-
ing programming language to allow for application-speciﬁc
safety checks. Safety checks are often required when the
state of an object is read or modiﬁed and when methods
are invoked on an object. Besides the code written in the
object-oriented programming language itself, we also have
to deal with native methods. Thus, in the following, we de-
scribe how we can add safety checks to each of the three
categories in turn:
1. speciﬁc virtual methods
2. language primitives, and
3. native method call.
3.2.1 Method Invocations
A policy class can extend an ordinary class by deﬁning new
virtual methods with the same name. Methods overriding
those in the original class are passed an extra argument by
the runtime system: the method deﬁned in the original class.
This allows the overriding method to invoke the original
method before or after safety checks.
Consider a common safety rule that requires access
control be checked before conﬁdential data can be ac-
cessed.
Figure 7 illustrates how this safety rule can
be enforced with AccessControlPolicy, a subclass
of InvisiType.
This policy simply overrides the
 Function
demote(object, invisiType-class)
promote(object, invisiType-class)
Description
Demote the object by adding the class of the given InvisiType policy to its pro-
tected class hierarchy
Promote the object by removing the given InvisiType policy from its protected
class hierarchy
Figure 6. Signature of the demote and promote functions
accessConfidentialData with one that raises an ex-
ception. All newly created clients are subjected to the Ac-
cessControlPolicy by demoting them with respect to the
policy class. They are promoted back when they pass the
checkACL method.
class AccessControlPolicy(InvisiType):
def accessConfidentialData(method, self):
raise Exception("Illegal Access")
class Client:
def __init__(self):
...
demote(self, AccessControlPolicy)
def checkACL(self):
...
if success == True:
promote(self, AccessControlPolicy)
def accessConfidentialData(self):
# accessing confidential data
Figure 7. Over-riding a virtual method in Ac-
cessControlPolicy
string type) and original arguments to the handler( self
and other). The add method calls the propagate
method and passes all the arguments. Propagate dele-
gates the operation to the handler and demotes the result
object with TaintPolicy.
Taint propagation is implemented similarly for other op-
erations such as getitem which returns a copy of the
character at the given index from the string. Taint also prop-
agates through string native methods such as upper()
which returns a copy of the string converted to the upper
case. The nativecall method is called for such na-
tive methods, and it calls the propagate method to per-
form taint propagation by demoting the return value of the
native functions.
3.2.3 Native methods
We now describe how we handle native method implemen-
tations. System calls are a particularly important subset of
native methods as they interface with the external world.
We often have to perform special checks to avoid leakage
of sensitive data from the application. We need to moni-
tor which of these native methods are called, and check the
protected parameters passed into such methods.
3.2.2 Language Primitives
Dynamic languages like Python have a set of built-in oper-
ation handlers that can be overridden by the application. A
policy class can insert ﬁne-grained safety checks by over-
riding these operation handlers. For example, it can restrict
access to certain attributes of a protected object by chang-
ing the getattr operation handler; or it can restrict the
methods that can be invoked on protected objects by adding
checks to the call operator handler. Like the above,
the new handlers also take the policy object and the handler
for its superclass as additional arguments.
add ,
Let us return to the TaintPolicy example deﬁned in
The policy class overrides operation han-
Figure 2.
dlers such as
getitem .
When a binary add operation is applied to an object sub-
jected to the TaintPolicy, the add method in the
TaintPolicy class is called. Passed to the method are
the the original handler of the add operation ( add in
radd
and
To
handle
native methods,
class has
by
voked
pre-deﬁned four methods
the
nativecall ,
runtime
the
InvisiType
in-
syscall ,
before nativecall arg ,
as described in
system:
that
are
after nativecall arg ,
and
Table 1.
The InvisiType runtime invokes the
syscall
method before a system call is made. A policy class can
override the syscall to add safety checks to system
calls. The syscall method takes two arguments: the
system call function and the demoted object on which the
system call is invoked.
In the TaintPolicy example in Figure 2,
the
syscall method is overridden to throw an exception
if any system call is to be attempted on a protected object.
This prevents tainted strings from ﬂowing into system calls.
Whenever the InvisiType runtime encounters a na-
tive method invocation to a protected object, it will call
nativecall . Again, policy classes can perform
safety checks by overriding the nativecall method.
nativecall takes as arguments the native method
Method
syscall
nativecall
before nativecall arg
after nativecall arg
Description
Method invoked when a protected object is used as an argument to a system call
Method invoked when a natively implemented method of a protected object is called
Method invoked before a protected object is used as an argument to a natively implemented method
Method invoked after a protected object is used as an argument to a natively implemented method
Table 1. Pre-deﬁned methods in the InvisiType class
called, the demoted object, the arguments, as well as a set of
keywords summarizing the relevant semantic information in
the native methods. For example, the keyword readonly
speciﬁes if the native method to be invoked only reads and
not writes the object. This information allows the policy
class to react accordingly.
a protected object
as
object,
the
Finally, whenever
an argument
is passed
another
and
invoked
before and after the native method, respectively. Over-
riding this method allows safety checks to be added before
the object is used or after the native method returns.
to a native method of
before nativecall arg
are
after nativecall arg
methods
3.3 Restricted Mode
To enable policies that differentiate between the third-
party code versus the framework itself, the InvisiType sys-
tem introduces the notion of a restricted mode. It has two
built-in functions:
import restricted(modulename) imports an un-
trusted or third-party module,
in restricted mode() returns true if the current
frame is executing code from a restricted module. This
can be used to restrict access in restricted modules.
We now demonstrate how in restricted mode()
can be used to prevent untrusted functions from modify-
ing protected objects. The ReadonlyPolicy, as shown
in Figure 8, overrides two methods:
setattr and
nativecall . The former prevents restricted code
from writing to a protected object’s attributes directly. The
latter prevents restricted code from invoking any native
methods that do not possess the readonly property.
3.4 Language Compatibility
The InvisiType technique is applicable to object-oriented
languages supporting class inheritance. Multiple inheri-
tance is not required at the language level, as it is not ex-
posed at the programming level. The only class having
more than one immediate superclass is a protected class. Its
inheritance from a policy class is set up by the InvisiType
runtime system upon the invocation of a demote operation.
class ReadonlyPolicy(InvisiType):
def __setattr__(handler, self, name, attr):
if in_restricted_mode():
raise OperationError(
"Object %s is read-only" % self)
return handler(self, name, attr)
def __nativecall__(nativemethod, self,
args, readonly):
if not readonly and in_restricted_mode():
raise OperationError(
"Object %s is read-only" % self)
return nativemethod(*args)
Figure 8. ReadonlyPolicy: prevents restricted
modules from changing protected objects
Highly reﬂective languages such as Smalltalk, Ruby,
PHP and Javascript (which are also known as dynamic lan-
guages) are more suitable for InvisiType than less reﬂective
languages.
In those languages, every access to an object
goes through the type dispatch mechanism, which may be
intercepted by the InvisiType runtime to override a default
behavior. This allows, for instance, the addition of safety
checks for attribute access by overriding an attribute access
operation.
It is not possible to utilize the full power of the Invisi-
Type concept in less reﬂective languages like Java or C#.
Since only method invocations use the type dispatch mech-
anism in these languages, the InvisiType idea is only appli-
cable to adding safety checks to method invocations.
InvisiType is compatible with optimization techniques
such as Just-In-Time (JIT) compilation. The JIT compiler
dynamically compiles a method at runtime by specializ-
ing the method with the most common argument types. If
the method is called with arguments of uncommon types,
the JIT runtime falls back on the interpreter to execute the
method. If an InvisiType instance is used as an argument for
a method for the ﬁrst time, the JIT runtime considers it as an
unseen type and uses the interpreter to execute the method.
When the argument of the InvisiType is used enough times,
JIT will compile the method specializing with the Invisi-
Type.
Description
InvisiType Policy
Restrict an object from being used in system calls and propagate taint
TaintPolicy
Remove write access to an object in restricted mode
ReadonlyPolicy
WriteonlyPolicy Remove read access to an object in restricted mode
NoAccessPolicy
Remove read and write access to an object in restricted mode
Table 2. Pre-deﬁned security policies in InvisiType
4 Security Policies
Throughout the paper, we have presented a number of se-
curity policies to illustrate the capability of the InvisiType
system. These policies, summarized in Table 2, are signif-
icant in their own right because they can be used for many
different applications.
The taint policy is useful not just for catching security
vulnerabilities in web applications. It can be used for pre-
venting data leakage of downloaded consumer applications.
For example, a mobile application on a smart phone may
wish to access some contact information. Today, an end
user may be given a choice of whether to grant it access,
which would also allow the application to export the infor-
mation if it so pleases. With the taint policy, we can prevent
the third-party application from exporting the contact infor-
mation.
Here are some other scenarios in which the various poli-
cies can be used. The readonly policy can be used to ensure
that a third-party application does not accidentally modify
conﬁguration information which may lead to security vul-
nerabilities such as allowing access to arbitrary ﬁles. The
writeonly policy can be used to ensure that untrusted code
can initialize a session object but not read it back. This
policy guarantees that the untrusted code cannot leak in-
formation related to previous sessions to the outside. The
NoAccessPolicy may be useful to hide top-secret informa-
tion, like cryptographic keys, from third-party software.
5 An InvisiType Implementation
We have implemented a prototype of the InvisiType run-
time system as part of the Python programming language.
5.1 PyPy Implementation
We implemented our InvisiType runtime system on
PyPy. Designed to be ﬂexible and support experimentation,
PyPy is a Python interpreter written in Python itself [28].
The interpreter is written in RPython, a restricted subset of
Python, which can be statically compiled. Some of the poli-
cies, TaintPolicy for instance, described in this paper
are also written in RPython for performance consideration.
The C-translated version of the PyPy interpreter we use has
a performance comparable to CPython, a reference imple-
mentation for Python [27]. Our prototype is compatible
with optimizations implemented in PyPy interpreter. For
instance, as an optimization, PyPy interpreter emits special
bytecodes for method access and built-in function access;
the InvisiType runtime works with the optimizations effort-
lessly.
5.2 Protected Classes
As discussed in Section 3, a protected class inherits from
a policy class and the class of the object it protects. A new