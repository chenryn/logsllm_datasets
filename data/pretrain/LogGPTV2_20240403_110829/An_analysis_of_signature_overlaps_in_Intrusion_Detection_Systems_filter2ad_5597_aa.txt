title:An analysis of signature overlaps in Intrusion Detection Systems
author:Fr&apos;ed&apos;eric Massicotte and
Yvan Labiche
An Analysis of Signature Overlaps in Intrusion Detection Systems
Fr´ed´eric Massicotte
Communications Research Centre Canada
Yvan Labiche
Software Quality Engineering Laboratory
Ottawa, Canada
Department of Systems and Computer Engineering
Carleton University, Ottawa, Canada
PI:EMAIL
Abstract—An Intrusion Detection System (IDS) protects
computer networks against attacks and intrusions, in combina-
tion with ﬁrewalls and anti-virus systems. One class of IDS is
called signature-based network IDSs, as they monitor network
trafﬁc, looking for evidence of malicious behaviour as speciﬁed
in attack descriptions (referred to as signatures).
Many studies report that IDSs, including signature-based
network IDSs, have problems to accurately identify attacks.
One possible reason that we observed in our past work, and
that is worth investigating further, is that several signatures
(i.e., several alarms) can be triggered on the same group of
packets, a situation we coined overlapping signatures.
This paper presents a technique to precisely and systemat-
ically quantify the signature overlapping problem of an IDS
signature database. The solution we describe is based on set
theory and ﬁnite state automaton theory, and we experiment
with our technique on one widely-used and maintained IDS.
Results show that our approach is effective at systematically
quantifying the overlap problem in one IDS signature database,
and can be potentially used on other IDSs.
Keywords-Intrusion Detection Signature; Set Theory; Au-
tomaton Theory;
I. INTRODUCTION
An Intrusion Detection System (IDS) protects computer
in combination
networks against attacks and intrusions,
with ﬁrewalls and anti-virus systems. One class of IDS
is called signature-based network IDSs, as they monitor
network trafﬁc, looking for evidence of malicious behaviour
as speciﬁed in attack descriptions (referred to as signatures).
Signature-based network IDSs are simply called IDSs in the
remainder of this paper.
Many studies (e.g., [1,2]) have reported that IDSs have
problems to identify attacks accurately. For instance, practi-
tioners and researchers have reported that IDSs miss attacks
or that they provide (too many) false alarms. This is often
due to incorrect signatures: e.g., a signature is not precise
enough to characterize the set of packets that should be
observed to raise an alarm, and therefore can raise an alarm
on normal trafﬁc. We have also observed [3] that an IDS can
miss an attack because two (or more) signatures characterize
the same set of packets. This is a problem we refer to as
the signature overlapping problem since the sets of packets
characterized by two (or more) different signatures are not
disjoint. One likely reason for overlapping signatures is
the necessity for IDS builders and the IDS community to
constantly update the signature database to cope for the
new attacks and vulnerabilities that are regularly identiﬁed.
For instance, because of the diversity of network attacks
(based on the National Vulnerability Database, more than
4900 new software vulnerabilities have been identiﬁed every
year since 2005),1 we can see a quick growth in the number
of signatures used by IDSs. Therefore, while Snort [4] used
around 3000 signatures in 2005, there are more than 15 000
signatures in its database in 2010: the number of signatures
has increased 5 times in 5 years (while it only doubled from
2002 to 2005).
Consequently, as the set of added or modiﬁed signatures
increases, it becomes more and more difﬁcult to maintain
a coherent and consistent set of signatures, and errors are
made or inconsistencies are introduced. As discussed later,
this is an important problem since overlapping signatures
can lead to (1) an evasion attack (i.e., an attack that is not
detected by the IDS), (2) a squealing attack (i.e., a fake
attack that is detected as a real attack by the IDS)2 [5], or
(3) both at the same time whereby a real attack is combined
with a squealing attack to prevent the network administrator
from identifying the real attack. These could eventually have
a negative impact on the IDS performance (e.g., the IDS
begins to miss packets), which can result in a denial of
service on the IDS itself.
Unfortunately, to date, there has not been any attempt
to study this signature overlapping problem, with one very
recent exception that we will discuss later. Only anecdotal
evidence of the problem has been reported. No solution has
so far been proposed to systematically study and quantify
the signature overlapping problem in a signature database.
Identifying a method to systematically quantify the problem
would be helpful from different points of view. First, the
method could help explain in qualitative and quantitative
ways what practitioners observe. Second, the method could
point to problems to be ﬁxed in signature databases and help
future modiﬁcations of signature databases to avoid overlap-
ping signatures. Third, the method could help improve IDSs,
1nvd.nist.gov/home.cfm
2A squealing attack is when the attacker generates synthetic attacks (i.e.,
trafﬁc that mimics a real attack without doing a real attack) speciﬁcally
tailored to make IDSs raise many alarms (e.g., to overwhelm the network
administrator).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE109as improvements to signatures could reduce IDS evasion
problems and prevent some squealing attacks.
In this paper, we propose such a method, to precisely and
systematically identify overlapping signatures in a signature
database. The method is based on the characterization of
signatures as sets and ﬁnite state automata and then uses
set theory and automata theory, and related algorithms, to
identify overlaps. We have implemented our solution and
applied it to the signature database of one well-known IDS,
namely Snort [4]. Results are signiﬁcant as we are able to
show the (unexpected) extent of overlapping signatures in
this database. We are also able to show, with a concrete
example, how to exploit overlapping signatures to create
evasion attacks.
The contribution of this paper is ﬁve-fold. (1) We propose
a systematic approach to quantify the signature overlapping
problem in an IDS signature database. (2) We illustrate how
this approach can be applied to a widely-used IDS. (3) We
succinctly present a tool that can automate our approach.
(4) We perform a case study showing the effectiveness of
our approach on that IDS. (5) We show how to exploit
overlapping signatures to create synthetic and real (evasion)
attacks.
The remainder of this paper is structured as follows. We
present examples of the signature overlapping problem (Sec-
tion II) and then show its relevance for the IDS community
(Section III). We then detail our approach to systematically
quantify the signature overlapping problem in IDS signa-
ture databases (Section IV). Section V discusses the tool
support for our method. The method and tool are used in
a case study: Section VI. The related work is presented in
Section VII. Conclusions are drawn in Section VIII.
II. SIGNATURE OVERLAPPING EXAMPLES
The intent of this section is not to formalize the deﬁnition
of how and when signatures overlap (which is done in Sec-
tion IV), but to provide intuitive examples of this problem.
To illustrate the signature overlapping problem with con-
crete IDS signatures, we use Snort. A Snort signature is
composed of plug-ins (Snort terminology) and raises an IDS
event if all its plug-ins return (evaluate to) true [4]. For
example, in the signature of Figure 1, content (line 4) is
a plug-in that evaluates the content of the packet payload,
and content:"CWD" is a predicate that veriﬁes whether a
packet contains the string CWD (not case sensitive, line 5) in
its packet payload. pcre (line 6) is a plug-in that evaluates
the content of the packet payload using a regular expression.
Lines 7-8 specify meta-data, providing the identiﬁcation and
the revision number of the signature.
Figure 2 shows another Snort signature. Both S1672 (Fig-
ure 1) and S336 (Figure 2) come from the signature database
of Snort 2.4.5.
We argue here that any (sequence of) packet(s) that
lines 1, 3-5 are
triggers S336 also triggers S1672. First,
alert tcp $EXTERNAL NET any -> $HOME NET 21 (
1
2 msg:”FTP CWD ∼ attempt”;
3
4
5
6
7
8
ﬂow:to server,established;
content:”CWD”;
nocase;
pcre:”/ˆCWD\s+∼/smi”;
sid:1672;
rev:11;)
Figure 1. Snort Signature 1672
alert tcp $EXTERNAL NET any -> $HOME NET 21 (
1
2 msg:”FTP CWD ∼ root attempt”;
ﬂow:to server,established;
3
content:”CWD”;
4
nocase;
5
content: ”∼root”;
6
distance:1; nocase;
7
pcre:”/ˆCWD\s+∼root/smi”;
8
9
sid:336;
10 rev:10;)
Figure 2. Snort Signature 336
the same in the two ﬁgures. Line 2 in each ﬁgure does
not specify constraints on packets. Rather it speciﬁes the
message to be sent to the network administrator, should a
packet matching the signature be observed.
Second,
the regular expression at
line 6 in Figure 1
speciﬁes that the packet payload has to start (i.e., ˆ) with
the string CWD followed by at
least one (i.e., +) space
character (i.e., \s) and then followed by the string ∼. The
regular expression is delimited by two characters /, and
smi (read options s, m, and i) that are regular expression
modiﬁers [4] (typically used to indicate whether the search
is case sensitive and how to handle new lines).
Thus, a packet payload that matches the regular expression
of line 6, will match the constraints speciﬁed in lines 4-5.
In Snort signatures, the content and pcre plug-ins are
often looking at the same bytes for performance reasons
(Section IV-B).
Third, lines 4-7 in Figure 2 specify that the string ∼root
(not case sensitive, line 7) has to be at a distance of one
byte (line 7) after the string CWD (not case sensitive, lines
4-5) in the packet payload. Line 8 in Figure 2 speciﬁes
the same thing as line 6 in Figure 1 with the exception
that the string ∼ has to be followed by the string root.
Here the regular expression of line 8 could be rewritten to
/ˆCWD\s∼root/smi (i.e., removing the + sign) without
changing which packets are matching this signature since the
distance plug-in restricts a distance of one byte between
CWD and ∼root. In fact, this rewritten regular expression
can replace lines 4-8.
Thus, the regular expression at line 6 in Figure 1 would
match any string that meets the speciﬁcation of the rewritten
regular expression of line 8 in Figure 2. Speciﬁcally, S1672
does not require the string ∼root one byte after the
string CWD (as speciﬁed in lines 6-7 of Figure 2). As a
consequence, any (sequence of) packet(s) that triggers S336
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
110alert tcp $EXTERNAL NET any -> $HOME NET 21 (
also triggers S1672.
1
2 msg:”FTP large PWD command”;
3
4
5
6
7
8
ﬂow:to server,established;
dsize:10;
content:”PWD”;
nocase;
sid:1624;
rev:6;)
Figure 3. Snort Signature 1624
Figure 3 shows another Snort signature from the same
Snort 2.4.5 signature database. Here, some, but not all the
(sequences of) packets that trigger S1624 also trigger S1672
(and vice-versa), i.e., (sequences of) packets exist that can
trigger both signatures at the same time: for instance, a
packet within an open session with a destination port of
21 that contains the string "CWD ∼PWDxx" does. One
can argue that this packet is not an attack, but an attacker
could use it
to mislead the network administrator (e.g.,
squealing attack) or prevent the IDS from detecting attacks
(Section VI-B2).
Note that it is not possible to trigger S336 and S1624 on
the same (sequence of) packet(s) since we cannot have a
packet that contains a payload that matches both signatures.
First, the packet payload has to be of size 10 (line 4 in
Figure 3). Second, it has to match /ˆCWD\s+∼root/smi
(line 8 in Figure 2) which requires a string of at least 9
characters (e.g., CWD ∼root). Third, the packet payload
has to also contain the string PWD (line 5 in Figure 3) which
is 3 characters long. Thus, a packet payload matching line 5
in Figure 3 and line 8 in Figure 2 needs 12 characters which
contradicts line 4 in Figure 3. Thus, S336 and S1624 can not
be triggered on the same (sequence of) packet(s).
These signature overlapping examples are simple to iden-
tify. Someone familiar with the Snort language would iden-
tify them easily if told to look at those signatures. But the
process of looking for every signature overlap in an IDS
signature database (with 3 000 to 15 000 signatures) has
to be automated. Moreover, the payload plug-ins such as
content and pcre have to be considered together since
they may be looking at the same bits in the packet payload
(which is the case in Figure 1 and Figure 2). Manually
deciphering what
those plug-ins specify is not an easy
task. Consequently, a systematic approach such as the one
presented in this paper is required for analyzing the signature
overlapping problem.
III. RELEVANCE OF THE SIGNATURE OVERLAPPING
PROBLEM
Modern IDSs, such as Snort 2.4.5 (the latest version
where signatures can be shown to any unregistered user)
and Snort 2.8.5 (released in 2010), include the ability to
control which signatures should be triggered when a packet
matches multiple signatures (e.g., the order in which the
signatures are triggered is based on the priority and impact
of the attack) and the ability to log multiple IDS events (i.e.,
corresponding to the triggered signatures) on a single packet
or stream. That notion of stream is important in IDSs such as
Snort. Snort reassembles the TCP and UDP packets into one
or more larger packets (i.e., a steam) allowing the signatures
to match packet payloads that are split across several TCP
or UDP packets [4]. In the rest of this paper we simply use