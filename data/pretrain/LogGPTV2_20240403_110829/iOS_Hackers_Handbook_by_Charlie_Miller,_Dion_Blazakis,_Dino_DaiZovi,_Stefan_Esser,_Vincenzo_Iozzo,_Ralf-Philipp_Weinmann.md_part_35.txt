are the same as those available for Mac OS X kernel debugging, and can be
extracted from the kernel debugging documentation provided by Apple.
cc0099..iinndddd 225522 44//1166//22001122 55::4477::0055 PPMM
Chapter 9 n Kernel Debugging and Exploitation 253
However, certain debugging features simply do not work as expected or not
at all. Options to create a kernel dump on panic or a nonmaskable interrupt
(NMI) seem not to work due to the lack of an Ethernet device inside iPhones.
Other options like breaking into the debugger on a NMI are supposed to
work according to reports from Apple developers, but when you try them
out, they only cause a panic followed by a reboot. This might be caused by
another broken kernel patch. An NMI can be triggered on recent iDevices
by pressing the power button and the volume down button at the same time
for a few seconds.
Table 9-1: Debugging options selectable by the debug boot argument
NAME VALUE DESCRIPTION
DB_HALT 0x01 This halts on boot and waits for
a debugger to be attached.
DB_PRT 0x02 This causes kernel printf()
statements to be sent to the console.
DB_NMI 0x04 This should halt on NMI.
DB_KPRT 0x08 This causes kernel kprintf()
statements to be sent to the console.
DB_SLOG 0x20 This outputs diagnostic information to the
system log.
DB_ARP 0x40 This allows the debugger to ARP and route
for debugging across routers.
DB_LOG_PI_SCRN 0x100 This disables the graphical panic dialog.
Before you can use KDP on devices like the iPhone, you need to solve
a few problems. KDP is a UDP protocol that can be used over Ethernet or
via the serial interface, which are both ports you will not fi nd in iPhones.
However, the iPhone dock connector pin-out reveals that at least a serial port
can be accessed through pins 12 and 13. Those can be used to build an iPhone
dock-connector-to-serial adapter. You can fi nd guidelines on this book’s website
(www.wiley.com/go/ioshackershandbook) explaining the complete dock con-
nector pin-out, the required parts, and the construction process.
Once you have a dock-connector-to-serial adapter that connects your iPhone
to a serial port, you run into another problem with the GNU debugger (GDB) and
its KDP support. By default, GDB does not support KDP via serial, because even
when serial is used, KDP still encapsulates every message inside a fake Ethernet
and UDP packet. Because this problem affects not only iOS, but also Mac OS X
kernel debugging, a solution already exists. In 2009 David Elliott created a tool
called SerialKDPProxy that acts as a UDP to KDP over serial proxy. You should
cc0099..iinndddd 225533 44//1166//22001122 55::4477::0055 PPMM
254 Chapter 9 n Kernel Debugging and Exploitation
use a fork of the original tool that is available at Github https://github.com/
stefanesser/serialKDPproxy, because the original tool does not work correctly
in combination with Mac OS X Lion. The usage of this tool looks as follows:
$ ./SerialKDPProxy /dev/tty.
Opening /dev/tty.
Waiting for packets, pid=577
AppleH3CamIn: CPU time-base registers mapped at DART translated address:
0x0104502fmi_iop_set_config:192 cmd->reasetup_cyclesAppleH3CamIn:
:se4Driver:
pdleOpennit: driver advertises bootloader pages
AppleNANDLegacyFTL::_FILInit: driver advertises WhiteningData
eD1815PMU::start: DOWN0: 1050mV
tart: set VBUCK1_PRE1 to 950
AppleD1815PMU::start:A2 x 4 = 8,IIAppleNANDFTL::_publishServices:
Creating block device of 3939606 sectors of 8192 bytes
AppleNANDFTL::_publishServices: block device created, ready for work
AppleNANDFTL::setPowerStamappings
With this setup you can fi nally use GDB to connect to the iOS kernel waiting
for a debugger. For best results, you should use the GDB binary provided within
the iOS SDK, because it already comes with all the necessary ARM support.
To let GDB speak through the SerialKDPProxy, confi gure it for a remote KDP
target and tell it to attach to the localhost:
$ /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gdb -arch
armv7 GNU gdb 6.3.50-20050815 (Apple version gdb-1705)
(Fri Jul 1 10:53:44 UTC 2011)
This GDB was configured as
“--host=x86_64-apple-darwin --target=arm-apple-darwin”...
(gdb) target remote-kdp
(gdb) attach 127.0.0.1
Connected.
When you try to use the debugger at that point you see that the usability
is very limited because GDB knows nothing about the actual target that is
debugged. The backtrace feature does not work as expected and shows only
one unknown entry. Also, the examine command incorrectly disassembles the
code in ARM mode instead of Thumb mode:
(gdb) bt
#0 0x8006e110 in ?? ()
(gdb) x/5i $pc
0x8006e110: undefined
0x8006e114: rscle r2, sp, r0, lsl #24
0x8006e118: rscsle r2, r9, r0, lsl #28
0x8006e11c: ldrtmi r4, [r1], -r0, asr #12
0x8006e120: mrrc2 7, 15, pc, r4, cr15
cc0099..iinndddd 225544 44//1166//22001122 55::4477::0066 PPMM
Chapter 9 n Kernel Debugging and Exploitation 255
To get a correct disassembly you have to force GDB to take the T bit in the
CPSR register into account:
(gdb) x/6i $pc | $cpsr.t
0x8006e111: undefined
0x8006e113: b.n 0x8006e114
0x8006e115: cmp r4, #0
0x8006e117: beq.n 0x8006e0f4
0x8006e119: cmp r6, #0
0x8006e11b: beq.n 0x8006e110
Solving the broken backtrace problem is not as easy. To get a good back-
trace you need to provide a symbolized kernel binary to GDB. Using the
decrypted and unpacked kernelcache binary improves the situation, but
it provides only a very small set of kernel symbols. A full set of kernel
symbols is unavailable because Apple does not want anyone to debug iOS
kernels. Therefore, it does not provide an iOS kernel debug kit to the public.
However, the provided kernel debug kit for Mac OS X is still useful for iOS
kernel debugging, because it allows you to use tools like zynamics BinDiff,
which can port symbols even across CPU architectures. Alternatively, the
idaiostoolkit provides a larger set of already ported kernel symbols for
some iOS kernels.
These kernel symbols can be used as follows$
/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gdb -arch armv7
kernelcache.symbolized
(gdb) target remote-kdp
(gdb) attach 127.0.0.1
Connected.
(gdb) bt
#0 0x8006e110 in sub_8006E03C ()
#1 0x8006e19e in Debugger ()
#2 0x8007402a in sub_80074020 ()
#3 0x8000a9a0 in kdp_set_ip_and_mac_addresses ()
#4 0x8000ac88 in sub_8000AC14 ()
#5 0x80020cf6 in sub_80020C98 ()
#6 0x8006c31c in sub_8006C300 ()
Now you can set breakpoints anywhere you like. This demonstration sets a
breakpoint at the address 0x8017484A, which is the address of the call to copyin()
that caused the stack-based buffer overfl ow in the paniclog demonstration. It is
located inside the setgroups() system call:
(gdb) break *0x8017484a
Breakpoint 2 at 0x8017484a
(gdb) c
Continuing.
cc0099..iinndddd 225555 44//1166//22001122 55::4477::0066 PPMM
256 Chapter 9 n Kernel Debugging and Exploitation
From there, you continue the execution until your code triggers the break-
point. Because the setgroups() system call is triggered several times during
boot, it is wise to activate this breakpoint only after the system has fully booted.
When executing the malicious binary, you indeed end up at the breakpoint:
Breakpoint 2, 0x8017484a in sub_80174810 ()
(gdb) x/5i $pc | $cpsr.t
0x8017484b : blx 0x8006cdf0 
0x8017484f : mov r8, r0
0x80174851 : cbnz r0,
0x8017488c 
0x80174853 : mov r0, r4
0x80174855 : bl 0x80163fc0 
You can see that the breakpoint hit just before a call to the copyin() func-
tion, which is used inside the kernel to copy data from user space into kernel
space. To understand what is going on, you can ask GDB for the parameters to
copyin(), which are stored in the R0, R1, and R2 registers. In addition to that,
you also ask for the stack-pointer SP and the saved stack-pointer in R7:
(gdb) i r r0 r1 r2 r7 sp
r0 0x2fdff850 803207248
r1 0xcd2cbf20 -852705504
r2 0x200 512
r7 0xcd2cbf7c -852705412
sp 0xcd2cbf20 -852705504
This shows that the call to copyin() will copy 512 bytes from the user space
stack into the kernel space stack. You can also see that copying 512 bytes will
overfl ow the kernel stack buffer, because the saved stack-pointer in R7 is only
92 bytes above the buffer.
Kernel Extensions and IOKit Drivers
iOS has no kernel extension binaries in the fi lesystem. However, this does not mean
that iOS does not support the concept of kernel extensions. Instead, all the required
kernel extensions are prelinked into the kernelcache binary. This means special seg-
ments are added to the kernelcache binary called __PRELINK_TEXT, __PRELINK_INFO,
and __PRELINK_STATE. These segments contain all the loaded kernel extensions
and additional metadata about them. Working on or with the iOS kernel exten-
sions therefore requires tools to handle the additional Mach-O binaries within the
kernelcache. Earlier versions of HexRays’ IDA Pro toolkit could not deal with these
prelinked kernel extensions by default, and required help from an IDAPython script
that searched for all the KEXT binaries inside the kernelcache and added additional
segments to the IDA database. The output of this script is shown in Figure 9-1. With
the release of version 6.2 of IDA, these fi les are now handled by default.
cc0099..iinndddd 225566 44//1166//22001122 55::4477::0066 PPMM
Chapter 9 n Kernel Debugging and Exploitation 257
Figure 9.1: Kernel extensions found in the kernelcache
Reversing the IOKit Driver Object Tree
IOKit device drivers are special kinds of kernel extensions that use the IOKit API
inside the iOS kernel and are implemented in a special limited version of C++.
The implementation and defi nition of the IOKit are located in the iokit subdi-
rectory of the XNU source code; and the C++ kernel implementation, including
all the available base objects, is located in the libkern subdirectory.
Because most of the IOKit drivers are closed source components and do not come
with source code, the usage of C++ makes things a bit more complicated from the
reverse engineer’s point of view. Object hierarchy has to be reconstructed from the
binary, and determining the call-graph is more complicated for object-oriented
programs. At the same time, the use of C++ introduces typical C++-only vulner-
ability classes into the kernel, which makes kernel exploitation more interesting.
To completely analyze the functionality of an IOKit driver, it is important to
be able to reconstruct the C++ object hierarchy from the binary. Under normal
circumstances, this would be a complicated task, but luckily IOKit driver binaries
follow several simple rules when defi ning new IOKit objects:
n IOKit objects always extend other IOKit objects or objects derived from
the IOKit base objects.
n For every IOKit object, a metaclass is registered that reveals the name of
the object and a pointer to the parent.
n The metaclass defi nition is directly followed by the class defi nition in the
binary for iOS 4 and nearby it for iOS 5.
cc0099..iinndddd 225577 44//1166//22001122 55::4477::0066 PPMM
258 Chapter 9 n Kernel Debugging and Exploitation
Because these rules are always followed, it is possible to reconstruct the whole
IOKit object tree from the binary only. As a starting point, implement an IDAPython
script that searches for all cross-references of the __ZN11OSMetaClassC2EPKcPKS_j
symbol. This symbol is the constructor of the OSMetaClass object that is defi ned
as follows:
/*!
* @function OSMetaClass
* @param className A C string naming the C++ class
* that this OSMetaClass represents.
* @param superclass The OSMetaClass object representing
the superclass
* of this metaclass’s class.
* @param classSize The allocation size of the represented C++
class.
*/
OSMetaClass(const char * className,
const OSMetaClass * superclass,
unsigned int classSize);
From the defi nition, you can see that the OSMetaClass constructor is called
with a string containing the name of the C++ class that the metaclass represents
and with a pointer to the parent metaclass. At the binary level this looks like
what is shown in Figure 9-2.
Figure 9.2: OSOrderedSet metaclass constructor
The OSMetaClass constructor is called at the binary level with four, instead
of three, parameters. The fi rst parameter that is passed in the R0 register
contains a pointer to the metaclass currently being constructed. The other
parameters — className, superclass, and classSize — are passed within
the R1, R2, and R3 registers, respectively. To reconstruct the C++ class tree you
have to start at the call to the OSMetaClass constructor and trace the values of
the R1 and R2 registers backward from this position. In addition to that, you
have to determine the current function and fi nd all cross-references to it. There
should be only one such cross-reference. From the cross-reference found, you
can trace the value of the R0 register back to fi nd a pointer to the new metaclass.
(See Figure 9-3.)
cc0099..iinndddd 225588 44//1166//22001122 55::4477::0066 PPMM
Chapter 9 n Kernel Debugging and Exploitation 259
Figure 9.3: Call of the OSOrderedSet metaclass constructor
Within the disassembly you can see that immediately after the constructor
has been called, a pointer to the metaclass’s method table is written to the object.
This is useful because it allows you to fi nd the method table responsible for
an object. Within the kernelcache binary, the method table of the metaclass is
always directly followed by the method table of the normal class. Although all
of this demonstration occurs inside the iOS 4.3.5 kernel binary, the same applies
to the iOS 5 kernel. The object initialization was changed a bit, and therefore in
iOS 5 forward- and backtracking of register values is a bit more complicated.
With all this information, it is now a two-step process to rebuild the C++
class tree. In the fi rst step, all calls to the OSMetaClass constructor are col-
lected, including the four data elements className, metaclass, superclass, and
methodtable. For a Python script, the best approach is to create a dictionary and
use the metaclass as a key. This allows the second step to simply go through all
the collected classes and construct the link to the parent class. From this data
structure, it is a straightforward task to generate a graph in a .gml fi le format
(for example) that can be visualized with free tools like yEd Graph Editor from
yWorks, as shown in Figure 9-4. An IDAPython script that performs the whole
tree reconstruction and outputs a graph fi le is part of the idaiostoolkit.
Figure 9.4: yEd showing a visual display of the IOKit class tree
cc0099..iinndddd 225599 44//1166//22001122 55::4477::0066 PPMM
260 Chapter 9 n Kernel Debugging and Exploitation
In addition to being able to display a visual representation of the IOKit class
hierarchy, the inheritance relationship between classes is very useful when
reversing the functionality of an IOKit class. With this information it is possible
to check the methods inside the method table of a class and determine if the
same method is also used in the parent class. If the method is not found in the
parent’s method table, it has been overwritten in the child class. But in case it
is found, it was just inherited from the parent. This allows you to distinguish
specifi c functionality added by a child class.
When reversing IOKit drivers it comes in handy that, although the drivers
themselves are closed source and come without symbols, the IOKit base classes
are part of the main kernel and come with symbols and source code. And
because these are C++ class methods, their symbols are in mangled form and
reveal the method prototype even without access to the source code. This also
means that walking up the inheritance tree, from a given method, allows you to
determine if the overwritten method was one of the methods of an IOKit base
class. In this case, the original symbol can be used to create a new symbol for
the derived class, as shown in the following example from the method table of
the IOFlashControllerUserClient class:
805584E8 DCD __ZN9IOService16allowPowerChangeEm+1
805584EC DCD __ZN9IOService17cancelPowerChangeEm+1
805584F0 DCD __ZN9IOService15powerChangeDoneEm+1
805584F4 DCD sub_80552B24+1
805584F8
DCD __ZN12IOUserClient24registerNotificationPortEP8ipc_portmy+1
805584FC
DCD __ZN12IOUserClient12initWithTaskEP4taskPvmP12OSDictionary+1
You can then compare this to the method table of the parent class IOUserClient,
which reveals the original symbol of the overwritten method:
80270120 DCD __ZN9IOService16allowPowerChangeEm+1
80270124 DCD __ZN9IOService17cancelPowerChangeEm+1