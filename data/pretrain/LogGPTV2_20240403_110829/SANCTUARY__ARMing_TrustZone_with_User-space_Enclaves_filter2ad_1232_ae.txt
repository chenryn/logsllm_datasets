to its SA with L2 cache is comparable to regular TrustZone
communication. Hence, SANCTUARY does not
introduce a
large communication latency. The higher overhead for the
communication between SA and TA is caused by the fact
that the context switch is not performed by the SANCTUARY
core but is triggered by the corresponding LA. This means
the SA ﬁrst has to communicate with the normal world before
it can communicate with the secure world. As mentioned in
Load Sanctuary binaries
Shut down core
Lock & Verify
Start Sanctuary:
Early core initialization
Set up kernel space env.
Set up user space env.
7
113
13
59
37
18
4
[7]
[109]
[12]
311
36
130
145
Table III: Performance Sanctuary Setup.
Section V, the OP-TEE driver could also be included into the
SL. Then, the SANCTUARY core could switch directly to the
secure world. In this case performance similar to that of a
call from LA to TA can be expected. When the L2 cache is
deactivated for SANCTUARY memory, the duration of a call
from LA to SA increases by a factor of 1.66, however the
overall performance is still practical. The relative standard
deviation of the communication measurements is low with
28%-34% for the conﬁguration with L2 activated and 20%-
32% for the conﬁguration with L2 deactivated.
2) Sanctuary Setup: The primary difference in running SANC-
TUARY Instance compared to TAs lies in the setup time needed
to isolate a CPU core. The bare execution speed of SAs
and TAs is the same as they run on the same hardware.
Table III breaks down the single steps performed starting the
LA, requesting a SANCTUARY Instance initialization, up to
execution of the SA. In the Load Sanctuary binaries step, both
the SL and SA binaries are loaded in 7ms. In the next step,
the Linux hotplug mechanism is used to shut down the core.
With L2 cache enabled for this core, this represents the most
expensive step of the SANCTUARY setup process with 113ms.
Next, the SANCTUARY is locked and veriﬁed (cf. Section V).
Subsequently, the Zircon kernel is booted (Start Sanctuary
step). We measured the boot process in three phases. The
ﬁrst phase covers early initialization of the core. In the second
phase, the platform components are initialized and the kernel
environment
the user space
environment is set up, it ends with the execution of the SA. The
results show that the boot overhead is higher if the L2 cache is
not active. In the second boot step, the boot time increases by
a factor of 7, in the third step even by a factor of 36. However,
even without using the L2 cache for the SANCTUARY core, the
complete SANCTUARY setup can still be performed in around
450ms. If the identity-based ﬁltering feature is implemented
in the cache, a setup time around 200ms can be achieved.
Further optimizations could be achieved by reducing the SL.
The relative standard deviation of the measurements with L2
activated range from 27% to 38%. With deactivated L2 the
relative standard deviation values range from 26% to 44%.
3) Sanctuary Teardown: Table IV shows the performance
evaluation of the Sanctuary teardown. In the Sanctuary shut-
down step, the L1 cache is invalidated and the Zircon kernel
brought into its original state. In the Unlock Sanctuary step,
the SANCTUARY memory is zeroed which takes up most of
the time. The complete teardown of the SANCTUARY can be
is set up. In the last phase,
11
Figure 6: GenOTP app protocols for secret key provisioning and OTP generation. A lock symbol indicates TrustZone-protected
communication channels.
Measurement
with L2 (ms)
without L2 (ms)
Sanctuary shutdown
Unlock Sanctuary
Restart core
1
45
53
[1]
58
[54]
Table IV: Performance Sanctuary Teardown.
performed very fast in around 100ms with and without L2
cache. For the former case, the relative standard deviation
ranges from 15% to 40% and for the later from 14% to 25%.
The measurements further emphasize the practicability of
SANCTUARY, as setup and teardown induce a total run time
overhead of approximately 340ms with L2, respectively ap-
proximately 600ms without L2.
B. Use-Case: OTP Generation for Two-Factor Authentication
To illustrate the practicability of SANCTUARY in real-world
applications, we implemented a One-time Password (OTP)
generator app on top of our prototype, which we call GenOTP.
The GenOTP app, which we will now describe in more detail,
consists of an LA and an SA. It can be used to seal a secret
key to the SA and restore it at a later point in time to generate
a fresh OTP. With SANCTUARY, every service provider can
develop a custom app that protects the secret key without the
need of an own TA in the TEE.
1) Scenario Description: Two-factor authentication schemes
are often used for authenticating users on websites. The ﬁrst
factor, the knowledge factor, is usually represented by an user-
name and a password. The second factor, the possession factor,
is represented by a hardware token or a mobile device that
creates fresh OTPs. The OTPs are created from a secret key
shared between the user’s device and the veriﬁcation server.
In a Time-based One-time Password Algorithm (TOTP) [30],
the secret key is then used together with a fresh timestamp to
generate an OTP. The secret key must be securely stored on
the device and the TOTP code protected during execution.
12
In our scenario, an online retailer wants to offer two-factor
authentication for its online shop. We assume that a customer’s
mobile device contains a TEE and supports SANCTUARY. The
online retailer implemented the GenOTP app consisting of non-
sensitive code in an LA and security-sensitive code in an SA.
We further assume that the GenOTP app is already installed
on the user’s device and that the TEE contains an unique
asymmetric key pair (SKdevice, P Kdevice), brought onto the
device during production. During the installation of GenOTP,
P Kdevice was sent to the retailer’s back end. We assume that
Proxy TA and Sealing TA are present on the device.
2) Provision Secret Key: For generating OTPs on the mobile
device, a secret key KT OT P needs to be provisioned to it. The
process for receiving the key from the retailer’s back end is
shown in Figure 6. The customer selects the option to provision
a key in the GenOTP LA. A SANCTUARY Instance is started
and executes the GenOTP SA. The SA then hands over the
IP address of the server it wants to communicate with and the
message it wants to send to the Proxy TA. In this case, the
message only contains the information provision_key. The
Proxy TA now calls the STA to get the hash value of the
SA binary running in the SANCTUARY Instance and creates
a signature SigSA over the hash value and message using the
device unique private key SKdevice.
After the Proxy TA created the signature SigSA,
it sends
it to the retailer’s back end, together with the hash HSA
calculated over the SA binary and the message provision_key.
In particular, the signed and thus protected message and HSA
is passed to the network stack in the normal world to be
forwarded to the server. The involvement of the normal world
is omitted in Figure 6 for lucidity as it is only providing
non-secure functionalities. The retailer’s back end, which has
P Kdevice, can now verify if the SA was correctly loaded in
a SANCTUARY Instance, since only then a valid signature is
created by the Proxy TA. If veriﬁcation succeeds, a secret key
KT OT P is created and returned via the Proxy TA to the SA.
The SA now needs to store the received key s.t. fresh OTPs can
be generated anytime, even without Internet connection. For
this, the Sealing TA is used. The SA collects all data it wants
to seal in a state object SSA and forwards it to the Sealing TA.
GenOTPLegacy App (LA)GenOTPSanctuary App (SA)OP-TEEProvision Keyprovision_keyBack EndHSA   = Hash(SA)msg = provision_keySigSA = Sign(SKdevice;       msg||HSA )SKdevice Call back endusing Proxy TAprovision_key, ip_addressmsg = provision_keyVerify(PKdevice ;SigSA, msg||HSA)provision_key, HSA , SigSAKTOTPRelay to GenOTP SASSA := {KTOTP}KTOTPsave_state, SSAPKdevice Provision Secret KeyGenerate OTPGenerate OTPRetrieve KTOTP using Sealing TAgenerate_otpget_stateSSAOTPt = TOTP(KTOTP; t)  OTPtDisplay OTPtto UserHSA   = Hash(SA)KSA     = Derive_Key(HSA)SSA_s  = Seal(KSA; SSA)Seal and store KTOTP using Sealing TACreate KTOTP HSA  = Hash(SA)KSA   = Derive_Key(HSA)SSA   = Decrypt(KSA; SSA_s)Sealing TAProxy TAIn our scenario, SSA only contains the secret key KT OT P . In
general, any data that needs to be stored persistently can be
incorporated into SSA. When the Sealing TA receives SSA,
it calls the STA to get the SA binary hash. From the hash a
symmetric key KSA unique to the SA is derived. KSA is then
used to seal SSA to the speciﬁc SA, producing the cipher
SSA_S. Finally, the data is sealed to the Sealing TA using
functionality provided by OP-TEE.
3) Generate OTP: When the customer later wants to generate
a fresh OTP for login into the retailer’s online shop, he selects
the OTP generation option from the LA. After a SANCTUARY
Instance is started, the SA uses get_state of the Sealing TA to
retrieve its saved data. The Sealing TA ﬁrst restores the sealed
SA state SSA_S using the functionality provided by OP-TEE.
Next, a hash computed over the SA binary is received from
the STA and used to derive the SA unique key KSA. The key
is then used to decrypt SSA_S which results in the state object
SSA. SSA, which contains the secret key KT OT P , is then
returned to the GenOTP SA. Finally, the SA runs the TOTP
algorithm to compute a fresh OT Pt from the key KT OT P and
the current timestamp t. The generated OTP is returned to the
LA which displays it to the user. The customer can now use
the OTP to perform a two-factor authentication.
4) GenOTP Performance: Besides performing microbench-
marks We also measured performance of the implemented
GenOTP app. Averaging over 100 runs, we measured the
time it takes to perform the Provison key and the Generate
OTP processes shown in Figure 6. The results are listed in
Table V. Provisioning a key onto the device takes around 1s,
whereas the provisioning time increases by factor 1.3 without
L2 cache. Measurements include all steps from SANCTUARY
Instance setup, SA signature computation, encrypting and
storing the secret key, up to the point where the SANCTUARY
Instance is completely teared down. Only the communication
and processing delays introduced by the back end are not
included. We again split the measurement into multiple phases:
(1) SANCTUARY Instance is started and the call to the back end
is issued, (2) the secret key is received and processed by the
SA, and (3) the secret key is stored, the SANCTUARY Instance
teared down and all resources reclaimed by the normal world.
The measurement of generate OTP is divided into two phases:
(1) setup and retrieval of the secret key from the Sealing TA,
and (2) generation of a fresh OTP and SANCTUARY Instance
teardown. Generating a fresh OTP using SANCTUARY takes
around half a second. When the L2 cache is deactivated, the
process time increases by a factor of 1.6. The relative standard
deviation values for the GenOTP measurements range from
11% to 21% for the conﬁguration with L2 activated and from
11% to 22% for the conﬁguration with L2 deactivated.
The results show that
the SANCTUARY design is indeed
practical in real-world scenarios, even without the L2 cache.
The setup of the SANCTUARY Instance and the communication
with other normal-world and secure-world components is fast
enough such that the user experience is not inﬂuenced. More-
over, since the SANCTUARY Instance runs on an isolated core,
the LOS does not have to be suspended and can run in parallel
with the SANCTUARY Instance. This means the delays intro-
duced by the SANCTUARY setup and teardown never result in a
frozen UI since the LOS is always fully responsive. Therefore,
SANCTUARY fulﬁlls functional requirement 7: Positive user
experience from Section III-B.
Measurement
Provision key:
Setup & Server call
Process server result
Save state & Teardown
Generate OTP:
Setup & Retrieve state
Generate OTP & Teardown
with L2 (ms)
without L2 (ms)
884
780
10
94
365
266
99
1174
1067
10
97
630
514
116
Table V: GenOTP App Performance.
VIII. RELATED WORK
In this section we compare SANCTUARY against existing TEE
implementations in hardware and software.
A. Secure Hardware Architectures
Hardware-based security architectures have been developed
by both, academia and industry. Industry solutions like Intel
Software Guard Extensions (SGX) [31] and ARM Trust-
Zone [5] are available in commercial off-the-shelf products.
Intel SGX [31] provides hardware-enforced code and data
isolation, while the TCB consists of the CPU and its microcode
only. So-called enclaves run security-sensitive code that can be
can be veriﬁed via local and remote attestation. However, SGX
is tailored to Intel x86 desktop/server chips, and thus not found
in embedded (or mobile) devices. For mobile devices, ARM
offers a TEE implementation with TrustZone [5]. TrustZone
isolates critical code by dividing physical hardware in virtual
normal-world and secure-world realms. The secure world runs
its own TOS and TAs, but vendors are very strict about
which applications may run in the secure world. SANCTUARY
overcomes this restriction by only having a minimal and ﬁxed
set of functionality in the secure world, while the remaining
sensitive code runs in isolated normal-world enclaves.
Sanctum [14] provides protected enclave execution similar to
Intel’s SGX. Unlike SGX, it extends the open-source RISC-
V platform, and provides additional protection mechanisms
against side-channel attacks by applying cache partitioning
to the last level cache (LLC), while ﬂushing the per-core
L1 cache upon enclave exit. SPM [50] and follow-up works
like Sancus [41], [42] propose an isolation architecture for
low-end embedded systems with a hardware-only TCB. They
extend the openMSP430 CPU architecture with additional
CPU instructions for secure provisioning and protected storage,
as well as an extended memory access logic with isolation
enforcement. TrustLite [34] uses the generalized concept of
an Execution-Aware Memory Protection Unit (EAMPU) to
enforce program counter based memory access policies stored
in tables directly in the SoC and a trusted loader to enable