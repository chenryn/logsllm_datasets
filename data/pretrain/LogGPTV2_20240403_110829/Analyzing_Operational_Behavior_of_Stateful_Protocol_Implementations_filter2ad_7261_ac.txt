12
void t e l n e t d _ a p p c a l l ( void * ts ) {
if ( u i p _ c o n n e c t e d () ) /* A new c o n n e c t i o n ? */
{
if (! c o n n e c t e d ) {
s . state = S T A T E _ N O R M A L ;
c o n n e c t e d = 1;
... /* o t h e r i n i t i a l i z a t i o n code */
}
else { /* r e j e c t the new c o n n e c t i o n */ }
}
...
}
Fig. 3: Code snippet to explain an unrealizable CEX
atoms. The pLTL model checker is unaware of any such
dependency. A CEX is a state sequence s1, . . . , sn, where
every state si maps each proposition to either true or false.
The spurious CEX checker (see Fig. 2) inspects whether the
truth assignments in each CEX state (si) agree with their atom-
semantics (not the semantic names) using an SMT solver. If the
assignments agree, the CEX is considered to be a consistent
CEX. If they do not agree, we guide the model checker with
an invariant that instructs it not to explore si in the future.
Consider the following proposition-atom mappings: p 7→
{x > 0}, q 7→ {x + y = 5}, r 7→ {y  0 cannot be false. So the truth assignment
¬(x > 0)∧(x+y = 5)∧(y < 5) makes the CEX unsatisﬁable.
The following invariant will be automatically generated to
guide the model checker: q ∧ r → p (i.e., p must be assigned
true when both q and r are assigned true).
Step 2 (Replaying CEX). Due to the incompleteness of
symbolic execution (e.g., loop unrolling) and the limited gran-
ularity of user input (e.g., incomplete input to Algorithm 1)
to our analysis, the generated CEX may not be reproducible
in an actual execution. Consider the Telnet server (Telnetd)
implementation in Contiki-2.4 [26] as an example. One of the
properties that the implementation is expected to comply with
is: “when the server has an ongoing connected session with a
client, the server must reject any further connection requests.”
Due to a semantic bug in the implemented FSM, the server
mistakenly accepts a new connection while there is an ongoing
session, and thus, the implementation violates the property. We
will explain this violation later in detail (see § VI-B).
Now consider the code snippet of the patched Telnetd
implementation shown in Fig. 3. It ﬁxes the bug by adding
a guard variable connected so that the server accepts a new
connection only if it is not already connected. Now, suppose
the developer mistakenly assumes the protocol FSM state to be
composed of only one variable (i.e., s.state) and excludes
connected. Since connected is neither a state variable nor
marked as a conditional variable, the extracted E-FSM M lacks
information about connected and has transition(s) that would
allow M to accept multiple connections at a time. As a result,
the property of allowing only one connection at a time would
appear to be violated since the model checker would be able
to generate a consistent CEX that would not be ruled out in
Step 1. However, it is evident from Fig. 3 that such a CEX
is not realizable in any actual execution of the protocol as
connected guards the violation of the property.
To rule out such unrealizable CEXs, we concretely replay
each consistent CEX and monitor the execution of the protocol
implementation. The replay execution is guided by the CEX
through concrete values obtained from an SMT solver. We
monitor the performed actions and the changes of states during
the execution and check whether it matches the CEX. If the
protocol execution agrees with the CEX, we report this as a
realizable CEX which reproduces the underlying semantic bug.
IV. IMPLEMENTATION
We now describe the implementation of CHIRON’s compo-
nents and present an optimization technique to preemptively
rule out spurious transitions.
E-FSM extractor. We implemented the FSM extractor of
CHIRON on top of the KLEE symbolic execution engine [27],
which we use to symbolically execute the protocol source.
We also implemented our path exploration technique. Our
implementation is about 3.5 KLoC of C++ code in addition
to the original KLEE code base.
FSM translator and model checker. We choose the NuSMV-
2.5.4 symbolic model checker [28] because symbolic model
checkers tend to support models with a large state space [21].
We implemented the FSM translator in C++ (400 LoC), which
performs the following three steps: (i) parses the intermediate
representation (i.e., XML) of the E-FSM, (ii) generates the
atom-proposition mapping ﬁle, and (iii) translates the E-FSM
into the SMV modeling language.
Spurious CEX checker and CEX replayer. We implemented
the spurious CEX checker in C++ (600 LoC) utilizing the li-
braries of KLEE. To replay each consistent CEX in the second
step of validating CEXs, we implemented a CEX replayer that
runs the source code with concrete values obtained from an
SMT solver and keeps track of whether the protocol execution
and the CEX agree at each step.
Optimization. For a given protocol stack (e.g., TCP/IP), an
application layer protocol depends on the underlying transport
layer protocol (e.g., TCP, UDP) to exchange messages between
the peers. These protocols are typically developed with the
assumption that the transport protocol is operating correctly.
Some transport layer protocols can impose restrictions on the
feasible ordering of the occurrence of possible network events.
For example, a server running on TCP cannot receive any data
prior to a connection establishment. Instead of checking the
feasibility of an occurred network event, application protocols
rely on the transport layer protocols to trigger each network
event appropriately.
Recall that our FSM extraction algorithm applies all events
to every state (line 12 of Algorithm 1). This can consequently
result in many spurious transitions. To reduce spurious tran-
sitions, we allow the developer to provide an event model
that merely dictates the feasible ordering of network events,
which can be found in the protocol stack documentation. This
optional optimization enables CHIRON to reduce the size
of the extracted E-FSMs by leveraging developers’ domain-
knowledge. Applying this optimization can lead to a signiﬁcant
improvement (see §VI-C) for protocols developed for IoT
devices as their TCP/IP stacks are often rudimentary compared
to traditional TCP/IP stacks (e.g., Linux). Instead of supporting
conventional socket-level abstractions, these IoT stacks use
several network events2 to notify the applications. For instance,
to analyze a client running on TCP of Contiki, CHIRON
needs to explicitly consider 8 types of network events whereas
considering only recv event (i.e., arrival of a network packet)
will be sufﬁcient for the analysis of a client on TCP of Linux.
Note that this optimization is applied to the occurrence of the
network events (e.g., recv event), and hence, this does not alter
the data the events may carry (e.g., a CCS message).
V. DISCUSSION
We now brieﬂy discuss some aspects of CHIRON.
What
if protocol states are not encoded in program
variables? CHIRON’s FSM extraction requires the protocol
states to be encoded in some program variables of the imple-
mentation. While a developer is free to implement a protocol’s
FSM by not encoding protocol states in any program variables,
we observe that typically implementations of stateful protocols
in the wild encode the states in program variables whereas the
opposite is rare.
How about timers? Network protocols invariably use timers
to conduct appropriate actions upon timeouts. There can be
two types of timeouts: one triggered as an event by the
underlying protocol stack and the other caused by ﬁring off
a timer maintained by the implementation. CHIRON handles
both cases: the former as a network event and the latter as
a library function (a stub of the timer library) that returns a
symbolic boolean variable signifying the status of the timer.
How about assuring absence of semantic bugs? CHIRON is
geared towards detecting semantic bugs by ﬁnding noncompli-
ance instead of assuring compliance with a temporal property.
CHIRON uses a model checker to determine whether the
extracted E-FSM violates the property. Recall that the E-FSM
is essentially an approximation of the protocol’s implemented
FSM. This is potentially a cause of false positive CEXs, which
we rule out using the validation steps. Hence, any realizable
CEX reported by CHIRON represents an actual semantic bug.
Conversely, in case of no violation, CHIRON does not assure
the absence of semantic bugs with respect to the property.
What kind of properties does CHIRON check? To be
precise, CHIRON’s discovery holds only for temporal safety
properties. Checking liveness properties is challenging [29]
and outside the scope of this paper. In the context of network
protocols, temporal safety properties can be broadly catego-
rized into two groups. (i) G1: Properties whose violations
2For instance, to provide TCP reliability Contiki requires the application to
store unacknowledged outgoing packets since Contiki’s TCP does not store
them due to memory limitations. To retransmit a packet, Contiki notiﬁes the
application by using an additional network event (i.e., reXmit). Application
layer protocols are expected to handle all such events.
TABLE I: Protocol implementations tested
Protocol
Mode
Implementation
TLS 1.0
Client
OpenSSL 1.0.1g
Telnet
Server
DHCP
Client
Contiki 2.4
Contiki 2.7
FNET 2.7.2
Contiki 2.7
FNET 2.7.2
Protocol
Notation
TLS OP
Telnet C24
Telnet C27
Telnet F
DHCP C
DHCP F
produce discernible external effects. An example from G1 is
“An HttpResponse from the server must be preceded by an
HttpRequest”. (ii) G2: Properties whose violations produce
only silent internal effects (e.g., change in a state variable).
An example from G2 is “Upon receiving a DHCPOFFER in
the REQUESTING state, the host must silently discard it and
change no state”. While prior work [5], [30]–[32] can be
tailored to check properties from G1 (but not G2), CHIRON
can check properties from both groups.
What about false negatives? Measuring false negatives is
non-trivial due to the absence of ground truth about
the
number of semantic bugs present
in an arbitrary protocol
implementation.
VI. EVALUATION
In this section, we demonstrate the effectiveness and the
practicality of CHIRON by applying it to various protocol
implementations. We seek to answer the following research
questions: (a) Is CHIRON effective in detecting semantic
bugs? (b) How much improvement can we gain by applying
the optimization on the event model? (c) How much time does
CHIRON require to analyze an implementation?
A. Setup
We applied CHIRON to several implementations of three
application layer protocols: one secure protocol (TLS) and two
non-secure protocols (Telnet and DHCP). TLS is widely used
to secure network connections in various scenarios, including
HTTPS. Telnet is a byte-oriented bidirectional communication
protocol and often used as means to provide a command line
interface for interacting with a (possibly remote) device. Telnet
is still being used in the wild by Android and embedded
systems’ developers and also by Cisco network administrators.
DHCP is a binary protocol that assigns IP addresses to devices
on a network. It is widely used in both home and enterprise
settings.
We obtained a total of 6 implementations of these protocols
shown in Table I. We focus on the client implementation
of TLSv1.0 and used one of the mainstream implementa-
tions: OpenSSL. We chose to use OpenSSL 1.0.1g as it was
identiﬁed to contain the “CCS Injection” vulnerability (CVE-
2014-0224) [5], [6]. To establish a secure channel, each TLS
connection starts with either a full handshake or an abbreviated
handshake. For our demonstration, we only consider a full
handshake to be performed between the client and the server.
Thus, we analyzed the portion of TLS OP (see Table I)
that
implemented the ﬁnite state machine of TLS, which
spanned across multiple source ﬁles (e.g., ssl/s3_clnt.c,
ssl/s3_pkt.c, ssl/s3_both.c, ssl/s3_lib.c).
To demonstrate the general applicability of CHIRON, we
used various Telnet and DHCP implementations from different
TCP/IP protocol stacks developed for IoT devices such as uIP
(part of the Contiki OS) and FNET. In particular, we focus
on the Telnet server and the DHCP client implementations
developed for Contiki 2.4, Contiki 2.7, and FNET 2.7.2. We
used Contiki 2.7 and FNET 2.7.2 because these were the
latest releases at the time of evaluation. Contiki 2.4 came to
our attention because of a bug reported in its Telnet server
implementation [4]. In the remainder of the section we will use
the notation deﬁned in Table I to refer to an implementation.
B. Detected Semantic Bugs
To demonstrate the effectiveness of CHIRON in detecting
semantic bugs, we used 6 properties for TLS, 11 for Telnet,
and 7 for DHCP. Table II – IV show the properties along with
the reports on violation. Given the lack of formalized and
complete speciﬁcation for these protocol implementations, we
selected these sets of properties to cover diverse, but essential
protocol functionalities.
The properties (OP1 – OP6) we selected for the TLS client
(see Table II) are based on the correct chronological sequence
of the protocol messages exchanged during a full handshake as
dictated by the RFC [1]. A full handshake involves four ﬂights
of messages exchanged between the client and the server. The
client ﬁrst sends a ClientHello. The server responds with
a series of messages starting with ServerHello and ending
with ServerHelloDone. Between these messages, the server
can send some optional messages (ServerCertificate,
ServerKeyExchange, and CertificateRequest) depend-
ing on the parameters being negotiated. Next the client sends
a series of messages ending with ClientFinished, and
the server replies with ServerFinished to complete the
handshake. However, both the client and the server must send
a change cipher spec (CCS) message before their respective
Finished message. Failing to comply with these properties
can have critical security implications such as broken TLS
guarantees and impersonation attacks.
The properties (DP1 – DP7) of a DHCP client (see Table IV)
are all extracted from the RFC [13]. They govern how a DHCP
client implementation must react to various received messages.
In contrast, for the Telnet server, we selected the properties
from various sources (see Table III). The TP1 property is
speciﬁc to implementations that support only one active client
session at a time. TP2 – TP4 are obtained from the Telnet
RFC [12] and describe how an implementation must interpret
and react to incoming data. Properties like TP5 – TP7, though
not extracted from RFCs, are used to demonstrate how a
developer can use CHIRON to reason about whether their
implementation moves correctly between states as desired.
Moreover, any telnet implementation must be able to operate
as a Network Virtual Terminal (NVT), which is a bare bone
implementation of the Telnet protocol where all options are
disabled. Therefore, we derived four additional properties (TP8
– TP11) from the Telnet RFC speciﬁcally targeting NVTs.
We discovered a total of 11 semantic bugs: 1 in TLS OP,
5 in Telnet C24, 4 in Telnet C27, and 1 in DHCP C. Each
bug signiﬁes that CHIRON found a realizable CEX against the
property in question. We now describe the discovered semantic
bugs in detail. For brevity, we group the similar bugs together.
Bug 1 (Accepting early CCS during TLS handshake).
According the RFC [1], during a handshake, the CCS message
from the server (i.e., ServerCCS) is expected to arrive at the
client right before the ServerFinished message. Therefore,
the client must not accept any ServerCCS received in out of
order (denoted as property OP1). In our tests, CHIRON detects