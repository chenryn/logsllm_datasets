on-disk element queries, each of which is to be translated into
key-value queries that FCCE can process. Labels are expressed as
dictionary items to express complex element attributes. A simple
element query searching for file entities whose path contains a sub-
string firefox translates into two FCCE queries: the first searches
for all satisfied labels, and the second searches for raw data to
construct elements associated with these labels.
When raw data is retrieved from disk, buckets of key-value pairs
are first cached in the FCCE client where data within a bucket
has tight data locality and high probability to be queried in the
same high-level graph query or following queries. Then, different
components of an element are constructed and some are cached for
frequent referencing, e.g., the principal label for processes contains
multiple pieces of information including the username, uid, group,
etc., and it is cached as a reference. Next, elements are constructed
and cached. Lastly, the requested graph is assembled and returned.
5 WAR ROOM CASE STUDY
The security industry is evolving with ubiquitous monitoring fa-
cilities and enduring data generation mechanisms. The DARPA
Transparent Computing (TC) program aims to push this trend to
an extreme and investigate how security analysts can benefit from
a complete recording of computations across a small network. Sev-
eral research teams from academia and industry provided real-time
monitoring of computations on diverse systems (Table 4). All mon-
itoring systems emitted traces that can construct host-level CGs.
DARPA held a two-week threat detection competition in 2017
where a red team planned and conducted various attack campaigns
covering all monitored devices with in-house planning and tool
development. Traditional detection mechanisms such as anti-virus
were nullified due to the unknown tools/malware and the inability
to discover campaign stories. Anomaly detection mechanisms were
limited due to the lack of training data and the variance of user be-
haviors between training and detection periods4. Since the attacks
were unknown to the detection teams, it was also impossible to
perform machine learning-based detection on attack data.
Given the fact that automatic security knowledge acquisition
is largely unavailable in the setup and cannot cover unforeseen
learning domains, embedding human domain knowledge into pre-
programmed automated detection algorithms, e.g., SLEUTH [30],
and dynamically composed analytical programs (based on fresh
observations and related knowledge) achieved significant outcomes.
We deployed τ-calculus in the DARPA’s threat hunting war room
and trained two research scientists on τ-calculus to perform threat
hunting tasks. During the evaluation, data from live-monitored
devices was streamed through Apache Kafka, translated into CG
format, and ingested into four FCCE data nodes. τ-calculus was
run on a CentOS VM (16 vcores and 140GB mem).
τ-calculus established the threat hunting environment for rea-
soning over ongoing threats atop tens of millions of records per
day from multiple systems. First-line alarms were raised by either
τ-calculus detectors, external detectors, or pure manual discover-
ies. Threat hunters inspected alarms to eliminate false positives,
connect attack steps, and explore undetected portions of attack
campaigns. Overcoming fundamental issues in conventional threat
hunting environments, τ-calculus helped us lead the competition
with 67.5% attack campaign plots detected5.
This section presents four concrete threat hunting tasks dy-
namically planned and completed during the competition on all
monitored OSes to demonstrate the capability of τ-calculus: IOC de-
tection (Section 5.1), interactive reasoning (Section 5.2), provenance
tracking (Section 5.3), and threat evaluation (Section 5.4).
5.1 IOC Detection on Windows
Threat hunting usually starts from IOCs or observables provided by
automatic detectors. The ability to promptly implement new IOC
detectors regarding the on-site observations and newly acquired
knowledge is critical to the discovery of newly developed attacks. τ-
calculus was used for rapid development of a Windows IOC detector
against reflective DLL injection (RDI) [19] during the competition.
The automatic detector with a few lines of τ-calculus code captured
the operation of DoublePulsar [15], which was used in conjunction
with EternalBlue [21] by the red team in their attacks.
4It is common in the security industry that the availability and the quality of training
data impoverish well-designed anomaly detection mechanisms.
5The result is calculated by the red team based on multiple hit-points for each campaign
story. The result is not simply an evaluation of our detection, but an evaluation of the
combined monitoring and detection capabilities with multiple monitoring teams.
Session 9D: VulnDet 1CCS’18, October 15-19, 2018, Toronto, ON, Canada1890function detectRDI () {
pattern patRDI ( whitelist ) {
evcr eat eT has ⟨type : cr eate_thr ead⟩
eninjector conn evcr eat eT
eninjector has ⟨type : subject ⟩
eninjector = not whitelist ()
evcr eat eT conn eninject ee
eninject ee has ⟨type : subject ⟩
}
pattern knownBenign () {
enmonitor P r oc has ⟨cmdline : winloдbeat .exe⟩
ensear chP r oc has ⟨cmdline : SearchIndexer .exe⟩
. . .
}
cg = load " windows - live - graph "
rdi = match patRDI ( knownBenign ) in cg
label rdi ⟨aler t : RDI ⟩
}
Figure 6: τ-calculus IOC detector against RDI.
pattern patPWDDB () {
enpwddb has ⟨path : /etc/pwd .db⟩
enpwddb conn evr eaddb
evr eaddb has ⟨type : r ead⟩
evr eaddb conn enr eader
}
Figure 7: τ-calculus pattern for tapping pwd.db.
The IOC detector (Figure 6) essentially comprised two graph
patterns: the first described the general DLL injection behavior
that a process creates a remote thread into another process, and the
second whitelisted known benign DLL injection instances. In the
first pattern, CG labels provided a level of abstraction from the
raw data so that threat hunters did not need to enumerate subjects
as process, thread, etc., and events with the create_thread type6,
CreateRemoteThread (Window API), RtlCreateUserThread (un-
documented Windows API), or even direct syscalls.
The detectDRI() function executed in seconds even on the
entire two-week dataset. It captured 17 injection instances with-
out whitelisting (denoted by an empty knownBenign() pattern).
The knownBenign() pattern was created and revised throughout
the days to exclude anomalous (in terms of not seen in previous
data) but not malicious processes (verified with external knowledge
via Google). After detection, post-IOC analyses were performed
for false positive elimination, of which Section 5.4 gives an ex-
ample. Lastly, three alerted RDIs were credited by the red team,
which belonged to the operation of DoublePulsar — injections into
lsass.exe and winlogon.exe from rundll32.exe.
5.2 Interactive Reasoning on FreeBSD
The main task of threat hunting is to interactively program hu-
man reasoning procedures, inspect the outcomes, and iteratively
6This abstract label was provided by the monitoring team.
Figure 8: vi data movement shown in a CG Browser (visual-
ization interpretation: Section 2.1 and Table 1).
pattern patFORW ( startSubG , n) {
in startSubG
enst ar t
enst ar t reachn elf wd
}
Figure 9: τ-calculus pattern for forward discovery.
revise the threat hypotheses and the reasoning procedures based
on observations and related knowledge. We performed such threat
hunting procedure using τ-REPL and CG Browser during the com-
petition. On the FreeBSD system, accesses to known sensitive files
were checked periodically, e.g., read and write of /etc/passwd,
/etc/pwd.db, and /etc/spwd.db, using simple τ-calculus patterns.
The first suspicious access pinned by a threat hunter was matched
by pattern patPWDDB() in Figure 7 — process vi read the FreeBSD
user list database /etc/pwd.db, which is a binary file. By writing a
new pattern in τ-REPL to match forward and backward events/en-
tities connected to the process, the hunter noticed the vi process
wrote into /home/steve/passwd.txt (looking like a text file) be-
fore it exited (Figure 8). Though nothing happened to passwd.txt
for several hours, it was added to the tracked file list. On the next
day, when inspecting the tracked files, the threat hunter applied a
forward information tracking pattern in Figure 9 on passwd.txt.
A chain of information flows was returned with process fcgiwrap
and a UNIX_SOCKET feeding into each other at the end (Figure 10).
At this point, a data exfiltration alert was raised for this single
attack step. We then wrote a set of τ-calculus functions to explore
the bigger picture or the entire attack campaign around the data
exfiltration path and provide answers to the following questions:
(1) Why did not our automatic data leak detector fire?
(2) Where did the user, who used vi, come from?
(3) Did the user perform any other harmful actions?
(4) How did the fcgiwrap process started and is it benign?
(5) Are there any other files exfiltrated via fcgiwrap?
(6) Did the attacker use fcgiwrap for other type of attacks?
Session 9D: VulnDet 1CCS’18, October 15-19, 2018, Toronto, ON, Canada1891pattern patLeakDet ( srcs , sinks , n , pathGuide ) {
in srcs
evsr c
ensink in sinks
evsr c reachn elpath
elpath reachn ensink
elpath = pathGuide (elpath )
}
Figure 11: Information leak detection pattern in τ-calculus.
patLeakDet() referred to a subgraph — selected sensitive sources
described in another pattern, e.g., an event evwif i that satisfies
evwif i has ⟨api : .∗дetConnectionIn f o.∗⟩ and comes from a Binder
entity. sinks was matched with network entities. n was the maxi-
mum information-flow hops to check, and pathGuide was another
pattern to guide the traversal with heuristics. This pattern combines
two reach operators to function as a pathfinder (Section 4.3), and
paths from the source to the sink subgraphs are stored in elpath.
One alert confirmed with patLeakDet() was a collusive leak:
App LobiwApp requested WiFi information from a Binder entity via
an event with label getConnectionInfo. LobiwApp wrote the infor-
mation into /storage/emulated/0/gather.txt, which was then
read by SetexApp. SetexApp leaked the information via an event
SEND_TO into a NETFLOW entity with IP address 255.255.255.255,
i.e., broadcasting to hidden receiver(s).
5.4 Threat Evaluation on Linux
One common threat hunting task is to evaluate whether a given
security alert is a false positive before further attack story discovery.
We used τ-calculus to manually evaluate a download-and-execute
alert on a Linux workstation flagged by an external behavior de-
tector: executable tedit was downloaded to disk through Firefox
and then executed. The key question to answer was whether this
is a benign download-and-execute activity or a malicious one. An
effective way to answer it, given the CG at inter-process level7, is to
explore related activities to infer and compare user intentions with
process behaviors. Using τ-REPL and CG Browser, we iteratively
followed the steps below for evaluating the reported alert:
(1) Root cause analysis with backward discovery patterns
(2) Impact analysis with forward discovery patterns
(3) Backward/forward inspection of connected processes/files
We confirmed this alert to be a real threat within half an hour via
τ-calculus threat hunting: the executed program connected and sent
information to an external host 128.55.12.167:443, and forked
dash that executed hostname, whoami, ifconfig, and netstat.
The behavior was suspicious considering the expected functionality
(an editor) indicated by its name tedit.
6 POLICY REASONING WITH τ -CALCULUS
This section outlines a use case in which τ-calculus was used to
provide reasoning for enforcing comprehensive policies on live
systems. It was evaluated as a DARPA demonstration where several
monitoring teams streamed live system traces to our platform. One
7Other means, e.g., drive-by download behavior identification [98], may require more
fine-grained CGs at the process level.
Figure 10: passwd.txt exfiltration shown in a CG Browser
(visualization interpretation: Section 2.1 and Table 1).
Answers. (1) there is some missing information among fcgiwrap,
nginx, and UNIX_SOCKET. The automatic data leak detector was
fooled by the missed data, while the threat hunter obtained enough
evidence from the name of fcgiwrap to conclude the leak; (2)/(3) the
user logged in via ssh and did not have any other suspicious activi-
ties in that ssh session. (4) fcgiwrap was a forked worker from its
parent process, which was launched via a sudo command in an ssh
session where no suspicious activities such as privilege escalation
actions were found. (5)/(6) several other file exfiltration activities
were found from the sibling processes of the fcgiwrap worker pro-
cess. While it was difficult for the automatic data leak detector to
fire alerts (we had no knowledge of which files were sensitive on
the target system), the opaque human knowledge that recognized
sensitive keywords from the file names worked.
Lastly, the red team credited us for finding the data leaks and gave
us the ground truth that one attacker knew about i) a vulnerability
of the download.py FastCGI script for downloading arbitrary files
via an online vulnerability database lookup and ii) sensitive file
paths on the target machine via social engineering. download.py
was normally installed and invoked by fcgiwrap.
5.3 Provenance Tracking on Android
It is straightforward to detect information leakage in τ-calculus due
to its built-in traversal operator reach, employed as graph pattern
construct. This case study illustrates the flexibility of τ-calculus
when composing information leakage detection programs. A threat
hunter should be able to dynamically allocate/modify the source,
destination, and traversal constraints during a hunt regarding his
growing knowledge about the underlying dataset.
Android owns its unique inter-process communication (IPC)
mechanism, a.k.a., Binder framework. All system services, such as
WiFi and notifications, are accessible to Apps through APIs on top of
Binder. Instead of syscalls, the Android monitoring team provided
us traces at the Binder level. For instance, a read event from a
Binder entity had an attribute (encoded as a CG label) recording
the name of the API call passed through Binder.
We composed several patterns in τ-calculus including the main
pattern (Figure 11) to discover links between two subgraphs. srcs in
Session 9D: VulnDet 1CCS’18, October 15-19, 2018, Toronto, ON, Canada1892(a) Event retrieval by time range.
(b) Element (entity/event) retrieval by UUID.
Figure 12: τ-calculus graph retrieval performance.
team who intercepted specific network requests on a monitored
server queried our checking system with policies to check whether
these requests should be blocked. Our policy checking system then
reasoned over data from monitored clients which talked to the
server and provided answers to the queries.
Our policy reasoning system employed τ-calculus for processing
policy checking queries, which were translated into τ-calculus pro-
grams and evaluated. For instance, a query with policy “whether the
request was originated from a specific user” generated a τ-calculus
program with four graph patterns for (1) searching the request
socket, (2) executing parameterized back traversal dealing with
user change(s) via sudo, setuid, etc., (3) guiding the traversal along
the call chain, and (4) halting the traversal when needed8 to test
for user match. Some policies were flow-sensitive (e.g., linking a
download action and an upload action with more than 10 steps of op-
erations, such as tar, mv, gzip, unzip, and pipe). Others were not
about information flow (e.g., a C program triggered a network con-
nection with system("curl ...") that created a chain of entities
e3−−→socket; the policy required testing the existence
e1−−→sh
p
of the process tree given network information about its leaves).
e2−−→curl
In summary, τ-calculus provided a comprehensive pattern com-
position mechanism that translated policy reasoning into graph
searching problems similar to threat discovery. In the demo, our sys-
tem answered all 26 queries9 (on the same set of DARPA monitored
systems as mentioned in Section 5) with 100% correctness, some of
which are pre-programmed queries, and some are impromptu.
7 PERFORMANCE EVALUATION
This section reports on the performance throughput and scalability
of τ-calculus, which supports both historical and real-time threat
detection. For this evaluation, 161GB of two-week CG data from 6
monitored hosts (including the four listed in Table 4) were stored