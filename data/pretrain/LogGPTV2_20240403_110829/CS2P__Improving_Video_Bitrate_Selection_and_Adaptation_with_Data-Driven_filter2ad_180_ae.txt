performance of CS2P in the wild.
Custom multi-city deployment: First, we took two rounds
of 4-day experiments to respectively compare the perfor-
mance of CS2P +MPC vs. BB [27] (during Jan. 11 to 14,
2016) and CS2P +MPC vs. HM14+MPC [47] (during May
16 to 19, 2016). In each round, 200+ client video players
were involved from 5 university campuses across 4 different
cities in China,15 connecting to a centralized server deployed
in our lab. We use the data collected on the previous day to
train our model, and apply the model for throughput predic-
tion and bitrate adaptation for the current day. When a new
client session starts, it randomly selects one of the two bi-
trate adaptation strategies (CS2P +MPC and HM+MPC/BB)
with equal probability. The video clients are Google Chrome
web browsers for Linux, Mac OS X and Windows with V8
JavaScript engine while the video server is a simple HTTP
server based on Node.js (version 0.10.32).
Table 4 shows that our CS2P + MPC signiﬁcantly outper-
forms BB in a variety of QoE metrics except startup delay,
i.e., increasing the average bitrate by 9.3%, reducing mid-
stream bitrate switches respectively by 5.6% and improving
GoodRatio by 17.6%. The overall QoE improvement is 14%
relative to BB. In addition, we ﬁnd that CS2P + MPC outper-
forms HM + MPC in terms of all QoE metrics except for bi-
14Since Harmonic Mean (HM) can not be used to predict the
initial throughput, for fair comparison we use the same pre-
dicted throughput at initial epoch in HM as that in CS2P.
15Due to the limited number of volunteer clients involved, we
cannot test the three strategies simultaneously.
Metrics
AvgBitrate
GoodRatio
Bitrate Variability
Startup Delay
Overall QoE
vs. HM+MPC vs. BB
9.3%
17.6%
5.6%
-3.0%
14.0%
10.9%
2.5%
-2.3%
0.4%
3.2%
Table 4: QoE improvement by CS2P +MPC compared
with HM+MPC and BB in a real-world experiment in 4
cities of China.
Figure 13: Prediction error on total rebuffering time.
trate variability, i.e., improving the average bitrate, GoodRa-
tio and startup delay respectively by 10.9%, 2.5% and 0.4%,
resulting an overall QoE improvement by 3.2%. Note that
due to the limited number of clients in our experiment, the
accuracy of the cross-session prediction in CS2P is lower
than the trace-driven simulations. We believe that this is a
conservative estimate of the QoE gain, and the improvement
of CS2P v.s. HM is likely more signiﬁcant in large scale sce-
narios with more client-side measurements.
Deployment in a large commercial VoD service: We also
deployed CS2P in the VoD system of iQIYI, where CS2P is
used to estimate the total rebuffering time at the beginning
of ﬁxed-bitrate streaming sessions. Speciﬁcally, at the be-
ginning of the session, we use CS2P to predict throughput
Ti for all future epochs i, and calculate the total download-
ing time of the video DTp, given size of each chunk. The
predicted rebuffering time is RTp = max{0, DTp − X},
where X is the video length. We compare the RTp with
the actual measured rebuffering time RTm. We then focus
on the sessions with rebuffering events (RTm > 0). Fig-
ure 13 shows that the predicted rebuffering time is close to
the actual value, with 70%+ sessions achieving prediction
error ≤20%. Our discussion with the iQIYI engineers sug-
gest that these preliminary results are very promising as a
means of informing their bitrate and CDN server selection
 0 0.2 0.4 0.6 0.8 124681020Absolute Percentage ErrorStates 0 0.2 0.4 0.6 0.8 15075100200400Absolute Percentage ErrorSample (# of sessions) 0 0.2 0.4 0.6 0.8 16183042Absolute Percentage ErrorEpoch Length (seconds) 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1CDFAbsolute Normalized Errorlogic and there are ongoing plans for a more comprehensive
evaluation of CS2P in their production system.
8 Related Work
Path properties measurement:
Studies on path prop-
erties have shown prevalence and persistence of network
bottlenecks (e.g., [25]), constancy of various network met-
rics (e.g., [49], longitudinal patterns of cellular performance
(e.g., [36]), intra-session RTT variation (e.g., [37]), and spa-
tial similarity of network performance (e.g., [17]). In con-
trast, our focus is on throughput stability and predictability.
Bandwidth measurement: Unlike prior path mapping ef-
forts (e.g., [19,33,40]), CS2P uses a data-driven model based
on available session features and does not require any infer-
ence of path information (e.g., traceroute). Other approaches
use packet-level probing to estimate the available bandwidth
and the capacity of Internet paths (e.g., [12, 26]). Unlike
CS2P, these active probes need full client/server-side con-
trol which is often infeasible in the wild.
Throughput prediction:
Prior work either developed
approximate analytical models of TCP throughput as a
function of packet loss and delay [24, 38] or leveraged
Time-series models (e.g., Holt-Winters [32] and Auto-
Regressive [24]) and machine-learning models (e.g., Sup-
port Vector Regression [34], Gradient Boosting Regression
Trees [41]) to predict session’s throughput based on previ-
ous measurements. However, these approaches do not pro-
vide satisfactory prediction accuracy to feed into the video
adaptation algorithms.
Video QoE prediction:
Jiang et al., observe that video
quality is typically determined by a subset of critical fea-
tures, and thus propose CFA [29] to predict video QoE of
a new session based on the QoE measurements of similar
sessions in history. CS2P is inspired by similar insight that
end-to-end performance is predictable because it is deter-
mined by only a few critical features. While CFA and CS2P
are complementary, there are some important differences be-
tween them: 1) CFA only predicts application-layer qual-
ity using both video-speciﬁc and network-speciﬁc features,
whereas CS2P predicts network-layer throughput using only
network-speciﬁc features; 2) CFA only considers initial bi-
trates and does not do midstream throughput model; 3) CFA
envisions a deployment model of centralized control while
CS2P is amenable of a decentralized execution.
Adaptive video streaming: Our work is in the context of
Dynamic Adaptive Streaming over HTTP (DASH), where it
is known that choosing high and sustainable bitrate is criti-
cal to video quality of experience [16]. Prior work implic-
itly assumes that throughput is unstable and unpredictable,
and eschews this in favor of using the player buffer occu-
pancy for controlling bitrates [27]. Recent work [47, 50] ar-
gues that adaptive video streaming can signiﬁcantly beneﬁt
from accurate throughput prediction. However, these do not
provide a concrete prediction algorithm. Our contribution is
in developing an effective throughput predictor and demon-
strating its utility for DASH.
9 Conclusions
Designing good bitrate selection and adaptation algorithms
is critical to deliver good quality of experience (QoE). Prior
work argues that accurate throughput prediction could help
improve initial bitrate selection and the midstream adapta-
tion [45, 47, 50], but fails to provide a concrete roadmap to
achieve these beneﬁts. Our work bridges this gap by provid-
ing a large-scale measurement analysis of throughput vari-
ability and builds on these data-driven insights to develop
the CS2P framework. CS2P uses cross-session stateful pre-
diction models. These models can be easily plugged into
the bitrate selection logic of client- and server-side adap-
tation algorithms. Thus, CS2P offers an immediately de-
ployable middle ground between complex centralized con-
trol architectures [23] and purely decentralized adaptation
algorithms [27, 47]. We demonstrate the beneﬁts of CS2P
using both trace-driven analysis and pilot deployments and
ﬁnd that CS2P outperforms prior work on both throughput
prediction accuracy and video QoE.
Acknowledgments
The authors would like to thank Menggang Tan, Jia Wang,
Ling Cai, Yongqiang Dong and Jing Liu for helping us de-
ploy the multi-city experiments and all the volunteers joining
the experiment. We also thank Keith Winstein for shepherd-
ing our paper and SIGCOMM reviewers for their feedback.
This work is supported in part by the National Basic Re-
search Program (2012CB315802) and the Natural Science
Foundation of China (61379133, 61133015). This work is
also funded in part by NSF (CNS-1345305) and by a Juniper
Networks Fellowship.
10 References
[1] Cisco Visual Networking Index.
http://www.cisco.com/c/en/us/solutions/service-provider/
visual-networking-index-vni/index.html.
[2] DASH-264 JavaScript reference client landing page 1.4.0.
http://dashif.org/reference/players/javascript/1.4.0/samples/
dash-if-reference-player/index.html.
[3] Dash.js.
https://github.com/Dash-Industry-Forum/dash.js/wiki.
[4] FCC Measuring Broadband America .
http://www.fcc.gov/measuring-broadband-america.
[5] Final Report on the Validation of Objective Models of Video
Quality Assessment.
http://videoclarity.com/PDF/COM-80E_ﬁnal_report.pdf.
[6] Hadamard Product.
https://en.wikipedia.org/wiki/Hadamard_product_(matrices).
[7] HSDPA. http://home.iﬁ.uio.no/paalh/dataset/hsdpa-tcp-logs/.
[8] iQIYI. http://www.iqiyi.com.
[9] MLab NDT. https:
//console.cloud.google.com/storage/browser/m-lab/ndt/.
[10] Netﬂix. http://www.netﬂix.com.
[11] Node.js. https://nodejs.org/en/.
[12] Pathchar.
http://www.caida.org/tools/utilities/others/pathchar/.
[13] YouTube live encoder settings, bitrates and resolutions.
https://support.google.com/youtube/answer/2853702?hl=en.
[14] S. Akhshabi, L. Anantakrishnan, C. Dovrolis, and A. C.
Begen. Server-Based Trafﬁc Shaping for Stabilizing
Oscillating Adaptive Streaming Players. In Proc. ACM
NOSSDAV.
[15] A. Balachandran, V. Sekar, A. Akella, and S. Seshan.
Analyzing the Potential Beneﬁts of CDN Augmentation
Strategies for Internet Video Workloads. In Proc. ACM IMC,
2013.
[16] A. Balachandran, V. Sekar, A. Akella, S. Seshan, I. Stoica,
and H. Zhang. Developing a Predictive Model of Quality of
Experience for Internet Video. In Proc. ACM SIGCOMM,
2013.
[17] H. Balakrishnan, M. Stemm, S. Seshan, and R. H. Katz.
Analyzing Stability in Wide-area Network Performance.
ACM SIGMETRICS Performance Evaluation Review,
25(1):2–12, 1997.
[18] C. M. Bishop. Pattern Recognition and Machine Learning.
springer, 2006.
[19] F. Dabek, R. Cox, F. Kaashoek, and R. Morris. Vivaldi: A
Decentralized Network Coordinate System. In Proc. ACM
SIGCOMM, 2004.
[20] L. De Cicco, S. Mascolo, and V. Palmisano. Feedback
Control for Adaptive Live Video Streaming. In Proc. ACM
MMSys, 2011.
[21] M. Dischinger, M. Marcon, S. Guha, P. K. Gummadi,
R. Mahajan, and S. Saroiu. Glasnost: Enabling End Users to
Detect Trafﬁc Differentiation. In Proc. USENIX NSDI, 2010.
[22] F. Dobrian, V. Sekar, A. Awan, I. Stoica, D. Joseph,
A. Ganjam, J. Zhan, and H. Zhang. Understanding the
Impact of Video Quality on User Engagement. In Proc. ACM
SIGCOMM, 2011.
[23] A. Ganjam, F. Siddiqui, J. Zhan, X. Liu, I. Stoica, J. Jiang,
V. Sekar, and H. Zhang. C3: Internet-Scale Control Plane for
Video Quality Optimization. In Proc. USENIX NSDI, 2015.
[24] Q. He, C. Dovrolis, and M. Ammar. On the Predictability of
Large Transfer TCP Throughput. In Proc. ACM SIGCOMM,
2005.
[25] N. Hu, L. Li, Z. M. Mao, P. Steenkiste, and J. Wang. A
Measurement Study of Internet Bottlenecks. In Proc. IEEE
INFOCOM, 2005.
[26] N. Hu, L. E. Li, Z. M. Mao, P. Steenkiste, and J. Wang.
Locating internet bottlenecks: Algorithms, measurements,
and implications. In Proc. ACM SIGCOMM, 2004.
[27] T. Y. Huang, R. Johari, N. McKeown, M. Trunnell, and
M. Watson. A Buffer-Based Approach to Rate Adaptation:
Evidence from a Large Video Streaming Service. In Proc.
ACM SIGCOMM, 2014.
[28] M. Jain and C. Dovrolis. End-to-end Estimation of the
Available Bandwidth Variation Range. ACM SIGMETRICS
Performance Evaluation Review, 33(1):265–276, 2005.
[29] J. Jiang, V. Sekar, H. Milner, D. Shepherd, I. Stoica, and
H. Zhang. CFA: A Practical Prediction System for Video
QoE Optimization. In Proc. USENIX NSDI, 2016.
[30] J. Jiang, V. Sekar, and H. Zhang. Improving Fairness,
Efﬁciency, and Stability in HTTP-Based Adaptive Video
Streaming With Festive. IEEE/ACM Transactions on
Networking, 22(1):326–340, 2014.
[31] S. S. Krishnan and R. K. Sitaraman. Video Stream Quality
Impacts Viewer Behavior: Inferring Causality Using
Quasi-experimental Designs. In Proc. ACM IMC, 2012.
[32] Y. S. Lim, Y. C. Chen, E. M. Nahum, D. Towsley, and R. J.
Gibbens. How Green is Multipath TCP for Mobile Devices?
In Proc. ACM SIGCOMM AllThingsCellular, 2014.
[33] H. V. Madhyastha, T. Isdal, M. Piatek, C. Dixon,
T. Anderson, A. Krishnamurthy, and A. Venkataramani.
iPlane: An Information Plane for Distributed Services. In
Proc. USENIX OSDI, 2006.
[34] M. Mirza, J. Sommers, P. Barford, and X. Zhu. A Machine
Learning Approach to TCP Throughput Prediction. In Proc.
ACM SIGMETRICS, 2007.
[35] K. Murphy and M. Dunham. PMTK: Probabilistic Modeling
Toolkit. In Proc. NIPS, 2008.
[36] A. Nikravesh, D. R. Choffnes, E. Katz-Bassett, Z. M. Mao,
and M. Welsh. Mobile Network Performance from User
Devices: A Longitudinal, Multidimensional Analysis. In
Proc. PAM, 2014.
[37] B. A. A. Nunes, K. Veenstra, W. Ballenthin, S. Lukin, and
K. Obraczka. A Machine Learning Framework for TCP
Round-trip Time Estimation. EURASIP Journal on Wireless
Communications and Networking, 2014(1):1–22, 2014.
[38] J. Padhye, V. Firoiu, D. Towsley, and J. Kurose. Modeling
TCP Throughput: A Simple Model and its Empirical
Validation. In Proc. ACM SIGCOMM, 1998.
[39] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel,
B. Thirion, O. Grisel, and J. Vanderplas. Scikit-learn:
Machine Learning in Python. Journal of Machine Learning
Research, 12:2825–2830, 2011.
[40] V. Ramasubramanian, D. Malkhi, F. Kuhn, M. Balakrishnan,
A. Gupta, and A. Akella. On the Treeness of Internet Latency
and Bandwidth. ACM SIGMETRICS Performance
Evaluation Review, 37(1):61–72, 2009.
[41] G. Ridgeway. Generalized Boosted Models: A Guide to the
GBM Package. Update, 1(1):1–12, 2007.
[42] K. Salamatian and S. Vaton. Hidden Markov Modeling for
Network Communication Channels. In Proc. ACM
SIGMETRICS, 2001.
[43] S. Sundaresan, W. De Donato, N. Feamster, R. Teixeira,
S. Crawford, and A. Pescape. Broadband Internet
Performance: A View From the Gateway. In Proc. ACM
SIGCOMM, 2011.
[44] S. Tao and R. Guerin. Application-speciﬁc Path Switching: a
Case Study for Streaming Video. In Proc. ACM Multimedia,
2004.
[45] G. Tian and Y. Liu. Towards Agile and Smooth Video
Adaptation in Dynamic HTTP Streaming. In Proc. ACM
CoNEXT, 2012.
[46] W. Wei, B. Wang, and D. Towsley. Continuous-time Hidden
Markov Models for Network Performance Evaluation.
Performance Evaluation, 49(14):129–146, 2002.
[47] X. Yin, A. Jindal, V. Sekar, and B. Sinopoli. A
Control-Theoretic Approach for Dynamic Adaptive Video
Streaming over HTTP. In Proc. ACM SIGCOMM, 2015.
[48] X. Yin, V. Sekar, and B. Sinopoli. Toward a Principled
Framework to Design Dynamic Adaptive Streaming
Algorithms over HTTP. In Proc. ACM SIGCOMM HotNets,
2014.
[49] Y. Zhang, N. Dufﬁeld, V. Paxson, and S. Shenker. On the
Constancy of Internet Path Properties. In Proc. ACM IMW,
2001.
[50] X. K. Zou, J. Erman, V. Gopalakrishnan, E. Halepovic,
R. Jana, X. Jin, J. Rexford, and R. K. Sinha. Can Accurate
Predictions Improve Video Streaming in Cellular Networks?
In Proc. ACM HotMobile, 2015.