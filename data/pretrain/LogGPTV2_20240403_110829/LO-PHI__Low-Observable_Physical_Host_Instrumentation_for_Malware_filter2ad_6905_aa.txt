title:LO-PHI: Low-Observable Physical Host Instrumentation for Malware
Analysis
author:Chad Spensky and
Hongyi Hu and
Kevin Leach
LO-PHI: Low-Observable Physical Host
Instrumentation for Malware Analysis
Chad Spensky∗†, Hongyi Hu∗§ and Kevin Leach∗‡
∗MIT Lincoln Laboratory PI:EMAIL
†University of California, Santa Barbara PI:EMAIL
§Dropbox PI:EMAIL
‡University of Virginia PI:EMAIL
Abstract—Dynamic-analysis
techniques have become the
linchpins of modern malware analysis. However, software-based
methods have been shown to expose numerous artifacts, which
can either be detected and subverted, or potentially interfere
with the analysis altogether, making their results untrustworthy.
The need for less-intrusive methods of analysis has led many
researchers to utilize introspection in place of instrumenting the
software itself. While most current introspection technologies
have focused on virtual-machine introspection, we present a novel
system, LO-PHI, which is capable of physical-machine introspec-
tion of both non-volatile and volatile memory, i.e., hard disk and
system memory. We demonstrate that we are able to provide anal-
ysis capabilities comparable to existing solutions, whilst exposing
zero software-based artifacts and minimal hardware artifacts. To
demonstrate the usefulness of our system, we have developed
a framework for performing automated binary analysis. We
employ this framework to analyze numerous potentially malicious
binaries using both traditional virtual-machine introspection and
our new hardware-based instrumentation. Our results show that
not only is our analysis on-par with existing software-based
counterparts, but that our physical instrumentation is capable
of successfully analyzing far more binaries, as it is not foiled by
popular anti-analysis techniques.
I.
INTRODUCTION
With the rapid advancement of malware, the capabilities
of existing analysis techniques have become obsolete. Tools
that exist within the operating system or hypervisor are prone
to creating artifacts that are visible to the malicious code.
Malware authors can leverage these artifacts to conceal their
true intentions by halting execution or potentially subverting
the analysis technique all together. Even with clever designs,
there remains no proven technique for developing low-artifact
software-based analysis tools. Moreover, recent work by Kirat
et al. [44] showed that at least 5% of the malware analyzed in
their study employed anti-analysis techniques that successfully
evade most existing analysis tools. Subsequently, numerous
systems have been developed that attempt to detect and analyze
these environment-aware malware (e.g., [13], [49]). Chen et
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23121
al. [20] even provide a taxonomy of anti-analysis techniques
and mitigations commonly employed. However, no bullet-
proof solutions exist, and most existing solutions require
continuous updating as they rely on emulation frameworks.
To address these problems we present LO-PHI (Low-
Observable Physical Host Instrumentation), a novel system ca-
pable of analyzing software executing on commercial-off-the-
shelf (COTS) bare-metal machines, without the need for any
additional software on the machines. LO-PHI permits accurate
monitoring and analysis of live-running physical hosts in real-
time, with a minimal addition of “plug-and-play” components
to an otherwise unmodiﬁed system under test (SUT). We have
taken a two-pronged approach that is capable of instrument-
ing machines with actual hardware, to minimize artifacts, or
with traditional software-based techniques utilizing hardware
virtualization, to maximize scale. This permits the tradeoff
between transparency, scale, and cost when appropriate as well
as the potential for parallel analysis. Our architecture uses
physical hardware and software-based sensors to monitor a
SUT’s memory, network, and disk activity as well as actuate
its keyboard, mouse, and power. The raw data collected from
our sensors is then processed with modiﬁed open source tools,
i.e., Volatility [9] and Sleuthkit [18], to bridge the semantic
gap, i.e., convert raw data into human-readable, semantically
rich, output. Because LO-PHI is designed to collect raw low-
level data, it is both operating system and ﬁle system agnostic.
Our framework can be easily extended to support new or legacy
operating systems and ﬁle systems as long as the hardware tap
points are suitable for data acquisition.
LO-PHI also necessitated the development of novel in-
trospection techniques. While numerous techniques exist for
memory acquisition [19], [28], [72] of bare-metal systems,
passively monitoring disk activity has only recently begun
to be explored [50]. In this work we present a hardware
sensor capable of passively snifﬁng the disk activity of a live
machine while introducing minimal artifacts. Subsequently,
we have also developed the required modules for parsing
and reconstructing the underlying serial advanced technology
attachment (SATA) protocol. All of the source code for LO-
PHI is available under the Berkeley Software Distribution
(BSD) license at http://github.com/mit-ll/LO-PHI.
While the potential applications for LO-PHI are vast, we
focus on our ability to perform automated malware analysis on
physical machines, and demonstrate its usefulness by show-
casing the ability to analyze classes of malware that trivially
evade existing dynamic analysis techniques. We ﬁrst brieﬂy
summarize the current state of dynamic malware analysis to
better highlight our contributions in Section II. Next, we de-
scribe the design and implementation of our system, including
hardware sensors for memory and disk capture as well as
actuators for controlling and reverting a system under test
(SUT) in Section III. We then attempt to quantify the exposed
hardware artifacts of our system Section IV and some of our
inherent limitations in Section V. We discuss the design of our
automated binary analysis framework in Section VI and present
the ﬁndings from our analysis of various malware samples
in Section VII. Finally, we compare LO-PHI to other related
works in Section VIII and highlight areas that we feel are rich
for future work in Section IX.
In summary we claim to make the following contributions
to the ﬁeld of dynamic analysis:
Deployed and tested an extremely low-artifact,
hardware-based, dynamic analysis environment ca-
pable of analyzing malware that avoids traditional
software-based techniques
Developed hardware capable of introspecting the com-
munication between SATA devices as well as asyn-
chronous memory acquisition
• Wrote a module capable of reconstructing SATA
frames into high-level disk sector operations
•
•
•
•
• Modiﬁed open-source forensics tools to reconstruct
ﬁle system and operating system states
Constructed a framework, and accompanying infras-
tructure, for automating analysis of binaries on both
physical and virtual machines
Demonstrated the scalability of our system to execute
and analyze thousands of samples with comparable
ﬁdelity to traditional VM-based solutions
II. BACKGROUND AND THREAT MODEL
In this section, we introduce the vocabulary and basic
concepts surrounding the LO-PHI system as well as the scope
of our threat model.
a) Stealthy Malware: Recent malware detection and
analysis tools rely on virtualization, emulation, and debugging
tools. Unfortunately, these techniques are becoming obsolete
with the growing interest in stealthy malware. Malware is
stealthy if it makes an effort to hide its true behavior. This
stealth can emerge in several ways.
First, malware can simply remain inactive in the presence
of an analysis tool. Such malware will use a series of platform-
speciﬁc tests to determine if certain tools are in use. If no tools
are found, then the malware executes its malicious payload.
Second, malware may abort its host’s execution. For exam-
ple, a sample may attempt to execute an esoteric instruction
that is not properly emulated by the tool being used. In this
case, attempting to emulate the instruction may lead to raising
an unhandled exception, crashing the program.
Third, malware may simply disable defenses or tools
altogether. For instance, OllyDbg would crash when attempting
2
to emulate printf calls with a large number of ‘%s’ tokens.
This type of malware may also infect kernel space and then
disable defenses by abusing its elevated privilege level.
b) Artifacts: As mentioned above, stealthy malware
evades detection by concluding whether an analysis tool is
being used to watch its execution. This means that there must
be some piece of evidence available to the malware that it
uses to make this determination, commonly known as the
observer effect. This may be anything from execution time
(e.g., debuggers make programs run more slowly) to I/O device
names (e.g., if a device has a name with ‘VMWare’ in it), to
emulation idiosyncrasies (e.g., QEMU fails to set certain ﬂags
when executing obscure corner-case instructions). We refer to
these bits of evidence as artifacts. LO-PHI seeks to make
instrumentation and measurement of malware more transparent
by reducing or eliminating the presence of these artifacts.
c) Malware Analysis: These stealth techniques have
necessitated the development of increasingly sophisticated
techniques to analyze them. For benign or non-stealthy bi-
naries, numerous debuggers exist such as OllyDbg, Immunity,
and gdb. These debuggers can be trivially detected in most
cases (e.g., by using the isDebuggerPresent() function).
These anti-analysis techniques led researchers to develop more
transparent, security-focused analysis frameworks using virtual
machines, which generally work by hooking system calls to
provide an execution trace which can then be analyzed [7],
[24], [25], [30], [64], [74]. System call interposition has its own
inherent problems [34] (e.g., performance overhead), which
led many researchers to decouple their analysis code even
further from the execution path. Virtual-machine introspection
(VMI) peeks at system state without any direct interaction
with the control ﬂow of the program, thus mitigating much of
the performance overhead. VMI has prevailed as the dominant
low-artifact technique and has been used by numerous malware
analysis systems [26], [35], [38], [42], [47], [63], [65]. Jain et
al. [41] provide an excellent overview of this area of research.
However, introspection techniques have very limited access to
the semantic meaning of the data that they are acquiring, which
led to the development of numerous techniques for bridging
this semantic gap in both memory [9], [27], [33], [42], [48] and
disk [18], [45], [50] accesses. All VM-based techniques thus
far have nevertheless been shown to reveal some detectable
artifacts [20], [57], [59], [60] that could still be used to subvert
analysis [31], [57].
Because the techniques used to bridge the semantic gap
rely only on raw data and are in no way tied to the method
of acquisition, newer techniques further decouple the analysis
code from the SUT by moving the analysis portion into system
management mode (SMM) mode, an isolated execution mode
available on x86 processors, [10], [70], [72], [75] or onto
a separate processor altogether [12], [52], [53], [56], [76].
Similarly, our work fueled the development of an array of
methods for acquiring a system’s memory and disk state,
while introducing even fewer artifacts. In decreasing order of
artifacts, the most popular techniques for acquiring memory
use either specialized software [21], [62] or hardware to exploit
direct memory access (DMA) over FireWire [28], [51] or using
a peripheral component interconnect (PCI) card [19], [68].
Molina et al. [52] used a PCI card to obtain an out-of-band
method for accessing the hard disk. While a few techniques
have been proposed to defeat introspection and semantic-gap
based approaches [11], they tend to be very fragile in practice
and are not
likely to be widely deployed. With LO-PHI,
we hope to help bridge the gap between these low-artifact
data acquisition methods and the semantically-rich emulated
analysis frameworks to provide similar output with far less
overhead.
d) Threat Model: While LO-PHI has an almost-
complete view of the SUT, and introduces very few artifacts,
we still make a few necessary assumptions about the malware
that we are analyzing. Speciﬁcally, we assume that the malware
can interact with the SUT without restriction, but that any
malicious modiﬁcations made to the system will be visible
either in main memory or on the disk drive. Malware capable
of infecting peripherals or other onboard chips are currently out
of scope for our system. Similarly, we assume that the malware
in question is not actively trying to thwart semantic-gap recon-
struction or avoid our particular hardware through signature-
based means. Finally, we assume that our instrumentation was
in place before the malicious code was executed, to ensure
that our exposed artifacts cannot be ﬁngerprinted. That is, the
malware has no chance to analyze the SUT without LO-PHI in
place, and thus cannot distinguish our analysis system from a
system without our instrumentation. Otherwise, we assume that
malware may employ any exploitation, anti-analysis, or anti-
debugging techniques. More precisely, LO-PHI is speciﬁcally
designed to detect highly-sophisticated stealthy malware.
III. SYSTEM IMPLEMENTATION
LO-PHI leverages various sensors, actuators, and software
analysis tools combined into a simple and scalable framework.
For the purpose of our framework we generally deﬁne a
sensor as any data collection component (e.g., memory, disk,
or network) and an actuator as any component which provides
inputs for the system (e.g., power, keyboard, or mouse). Our
architecture allows for simple one-off experiments on a single
target SUT as well as much larger analyses running in parallel
on multiple SUTs. The hardware sensors support high-speed,
low-artifact collection of various data from a SUT, such
as memory or disk activity. Similarly, we employ hardware
actuators, which automatically drive a SUT to set up and run
experiments, as well as clean up afterwards. The software
analysis tools run on a separate analysis machine, capable of
aggregating and analyzing the collected data in real time.
In addition to the hardware, LO-PHI also supports tra-
ditional virtual-machine introspection using software-based
sensors and actuators within our framework. While the ma-
jor contribution of this paper is our hardware instrumen-
tation, much of our
framework’s power stems from its
duality. We have implemented all of our capabilities in
both virtual and physical environments within the same ab-
stracted software interface written in Python. This permits
the development of tools that will seamlessly work in ei-
ther environment, physical or virtual, depending on their
instantiation. For example, analysis scripts need only im-
plement high-level functionality (e.g., memory_read(),
power_on(), disk_revert()), which our framework
will execute appropriately for the given machine type. Simi-
larly, we devised a scripting language for keyboard and mouse
actions, along with an appropriate parser for each instantiation.
A. Physical Instrumentation
While much work has been done in instrumenting and
introspecting virtual machines, we are only aware of a few
systems [43], [44], [73] that have had the goal of bare-metal
instrumentation. We feel that the lack of existing solutions
is likely due to a lack of motivation and the high barrier of
entry, i.e., it is more costly in both human effort and resources
to instrument physical machines. In this work, we hope to
highlight the usefulness of these techniques and advance the
state-of-the-art in malware analysis.
One of our major design goals was to create tools that
could be utilized on a wide range of existing commercial-
off-the-shelf (COTS) hardware with minimal modiﬁcation.
While implementations with fewer artifacts are possible with
specialized hardware (e.g., memory interposers) or modiﬁ-
cations of existing hardware (e.g., ﬁrmware modiﬁcations),
developing more robust sensors permits a wider range of
potential analyses and helps future-proof our techniques. For
these reasons, we chose to focus on two major sources of data
for our physical sensors: main memory and disk activity. In
particular, we employed Xilinx ﬁeld-programmable gate array
(FPGA) boards to interface with both the peripheral component
interconnect express (PCIe) interface, for memory acquisition,
and the Serial ATA (SATA) interface, for disk introspection.
All of our sensors and actuators communicate over gigabit
Ethernet via the user datagram protocol (UDP).
1) Memory (Physical): Our memory sensor is implemented
on a Xilinx ML507 development board. This particular board
has single-lane PCIe connector, which we utilize as an end-
point to read the SUT’s memory using direct memory access
(DMA). We instantiate the card as a bus master by enabling
the Bus Master Enable bit in the card’s conﬁguration register.
While each peripheral is designated a distinct memory region