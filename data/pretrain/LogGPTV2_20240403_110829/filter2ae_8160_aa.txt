Author： **jmpews（知道创宇404安全实验室)**
本文涉及到的相关资料可以参考 ：https://github.com/jmpews/pwn2exploit/
关于堆的分配原理我觉的这篇文章
[《glibc内存管理ptmalloc源代码分析》](http://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf)
已经说得很详细。但是我尽力用 glibc 源码和自己的理解总结去概述, 本文章在说明时尽可能引用 `glibc-2.19` 中具体的代码和介绍,
用一些实例代码作为验证, 以及自己对 ptmalloc 的理解。
## 分析堆的相关工具
在 Phrack 的一篇文章中 [《Advanced Doug Lea's malloc
exploits》](http://paper.seebug.org/papers/Archive/refs/heap/%5BPhrack%5DAdvanced%20Doug%20lea%27s%20malloc%20exploits.pdf),
有一小节讲到 `Heap layout analysis` 作者利用了 `main_arena` 这个静态全局变量, 进行 heap dump 工作,
这里需要注意的是, 需要安装 `libc6-dbg` 以获取 `debugging symbols`, 此细节部分请查看
`参考资料/glibc的调试相关`.
这里介绍几个工具, 用于堆空间分配的分析.
下面几个工具都是解析堆空间分配的
下面几个工具大同小异, 简单介绍下原理, 都是采用 python 的 gdb 的 API, 关于 API 有一篇文章:
https://sourceware.org/gdb/onlinedocs/gdb/Breakpoints-In-Python.html#Breakpoints-In-Python
之后通过 cat /proc/PID/maps 获取 heap base, 通过 gdb 的 `x/` 查看内存, 通过 `debugging
symbols` 获取 `main_arena` 地址
    https://github.com/cloudburst/libheap
    https://github.com/Mipu94/peda-heap
    https://github.com/hugsy/gef
    https://github.com/pwndbg/pwndbg
  * ltrace:  
通过 ltrace 函数跟踪库函数调用。 关于 ltrace 的内部实现有一篇介绍文章,
[ltrace_internals.pdf](http://paper.seebug.org/papers/Archive/refs/ltrace_internals.pdf),
这里说一下大致原理, 起一个进程执行命令后, 根据 PID 拿到可执行文件, 之后按照 ELF 解析可执行文件, 拿到符号列表, 之后使用 ptrace
attach 到 PID 上, 并在所有函数符号上插入断点。
  * 通过 LD_PRELOAD 的 hook 方式跟踪内存分配函数, 这也是 Phrack 中 [《Advanced Doug Lea's malloc exploits》](http://paper.seebug.org/papers/Archive/refs/heap/%5BPhrack%5DAdvanced%20Doug%20lea%27s%20malloc%20exploits.pdf) 利用的方法, 缺点就是需要重新执行程序: https://github.com/nihilus/HeapTracer/blob/master/linux-native
## 堆内存分配(ptmalloc设计)的思考
下面仅仅是个人在阅读完 ptmalloc 的分配和释放算法之后的一些关于 ptmalloc 设计上的一些想法, 毕竟之前是做开发的,
#### 0\. 为什么需要 ptmalloc
首先 **内存的分配和回收很频繁的** , 这也就是其他语言希望实现高效的 GC, 针对频繁的操作, 第一个想到的解决方法就是 **缓存** ,
这也就是为什么 ptmalloc 存在各种各样的缓冲区. 假如不存在缓冲区, 每次分配都需要触发系统调用贼慢. 接下来就要引出 ptmalloc
涉及到的几种缓存, 这里只是概念性的解释几种缓存, 具体会在下文详细介绍.
#### 1\. Bins
为了避免每次触发系统调用, 首先想到的解决方法就是释放的内存暂时不归还给系统, 标记为空闲, 等下一次再需要相同大小时, 直接使用这块空闲内存即可.
（存储结构是双向环链表, 类似 hash 表, hash 算法就是 chunk 的长度, 用双向环链表解决 hash 冲突)
这就涉及到, 刚刚释放的内存什么时候加到 Bins ? 相邻的两个空闲 chunk 什么时候合并? 怎么合并?
#### 2\. Top
另一个应该想到的就是, 可以先利用系统调用 `brk()` 分配一块比较大的内存作为缓存, 之后即使没有在 Bins 中也找不到,
也不需要每次触发系统调用, 直接切割这块大的内存即可.
这就涉及到 '这块大内存' 什么时候重新补充大小(不断切割会导致 top 变小)? 什么时候需要缩小(归还给系统)?
#### 3\. Fastbins
Bins 和 Top 缓存是最基本的, 如果想要做进一步的优化, 其实就是更细分的缓存, 也就是更准确的命中缓存, 这里 Fastbins
存在的更具体的原因是 **避免 chunk 重复切割合并**.
如果了解过 Python 源码的同学可能会更理解, 这里的 Fastbins 类似于 Python 中整数对象 PyIntObject 的小整数
`small_ints`, 这里也只是理念类似, small_ints 准确的说是预先初始化, 可以一直重复使用而不被释放.
Ok, 再回到 Fastbins 的讨论, 对于长度很小的 chunk 在释放后不会放到 Bins, 也不会标记为空闲, 这就避免了 **合并** ,
下次分配内存时首先查找 Fastbins, 这就避免了 **切割**.
#### 4\. Unsorted bin
Unsorted 是更细粒度的缓存, 属于 **'刚刚释放的内存'与 Bins 之间的缓存**.
在 **1\. Bins** 中提到一个问题, 刚刚释放的内存什么时候加到 Bins ? 这其实就与 Unsorted 有关, 刚刚释放的内存会先放到
Unsorted 缓存, 在下一次内存分配时, 会优先于 Bins 查找, 如果能命中 Unsorted 缓冲最好, 否则就把 Unsorted 中的
chunk 统一整理到对应 Bins.
#### 5\. last_remainder
这其实也是一个缓存, 是针对于切割时使用的, 大致就是希望一直切割同一个 chunk. 在遍历 Unsorted 时使用, 但是它的使用是有条件的.
以上就是在阅读完 ptmalloc 分配内存那一部分代码后对 ptmalloc 的缓存设计上的一些想法. 下面会具体介绍 ptmalloc
在进行堆内存用到的各种具体的数据结构.
## chunk 结构
#### chunk 结构
这里先贴出一段 `glibc-2.19/malloc/malloc.c` 中关于 chunk 的解释. 不再详细解释.
`boundary tag` 边界标记, 关于它下文会进行介绍
`INTERNAL_SIZE_T` 头部损耗, 参考 `eglibc-2.19/malloc/malloc.c:299`, 其实也就是 `size_t`.
    eglibc-2.19/malloc/malloc.c:1094
    /*
      -----------------------  Chunk representations -----------------------    */
    /*
      This struct declaration is misleading (but accurate and necessary).
      It declares a "view" into memory allowing access to necessary
      fields at known offsets from a given base. See explanation below.
    */
    // 一个 chunk 的完整结构体
    struct malloc_chunk {
      INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */
      INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */
      struct malloc_chunk* fd;         /* double links -- used only if free. */
      struct malloc_chunk* bk;
      /* Only used for large blocks: pointer to next larger size.  */
      struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
      struct malloc_chunk* bk_nextsize;
    };
    /*
       malloc_chunk details:
        (The following includes lightly edited explanations by Colin Plumb.)
        // chunk 的内存管理采用边界标识的方法, 空闲 chunk 的 size 在该 chunk 的 size 字段和下一个 chunk 的 pre_size 字段都有记录
        Chunks of memory are maintained using a `boundary tag' method as
        described in e.g., Knuth or Standish.  (See the paper by Paul
        Wilson ftp://ftp.cs.utexas.edu/pub/garbage/allocsrv.ps for a
        survey of such techniques.)  Sizes of free chunks are stored both
        in the front of each chunk and at the end.  This makes
        consolidating fragmented chunks into bigger chunks very fast.  The
        size fields also hold bits representing whether chunks are free or
        in use.
        An allocated chunk looks like this:
        // 正在使用的 chunk 布局
        chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          |             Size of previous chunk, if allocated            | |
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          |             Size of chunk, in bytes                       |M|P|
          mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          |             User data starts here...                          .
          .                                                               .
          .             (malloc_usable_size() bytes)                      .
          .                                                               |
    nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          |             Size of chunk                                     |
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        // 几个术语规定, 'chunk' 就是整个 chunk 开头, 'mem' 就是用户数据的开始, 'Nextchunk' 就是下一个 chunk 的开头
        Where "chunk" is the front of the chunk for the purpose of most of
        the malloc code, but "mem" is the pointer that is returned to the
        user.  "Nextchunk" is the beginning of the next contiguous chunk.
        // chunk 是双字长对齐
        Chunks always begin on even word boundaries, so the mem portion
        (which is returned to the user) is also on an even word boundary, and
        thus at least double-word aligned.
        // 空闲 chunk 被存放在双向环链表
        Free chunks are stored in circular doubly-linked lists, and look like this:
        chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          |             Size of previous chunk                            |
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        `head:' |             Size of chunk, in bytes                         |P|
          mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          |             Forward pointer to next chunk in list             |
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          |             Back pointer to previous chunk in list            |
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          |             Unused space (may be 0 bytes long)                .
          .                                                               .
          .                                                               |
    nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        `foot:' |             Size of chunk, in bytes                           |
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        // P 标志位不能放在 size 字段的低位字节, 用于表示前一个 chunk 是否在被使用, 如果为 0, 表示前一个 chunk 空闲, 同时 pre_size 也表示前一个空闲 chunk 的大小, 可以用于找到前一个 chunk 的地址, 方便合并空闲 chunk, 但 chunk 刚一开始分配时默认 P 为 1. 如果 P 标志位被设置, 也就无法获取到前一个 chunk 的 size, 也就拿不到前一个 chunk 地址, 也就无法修改正在使用的 chunk, 但是这是无法修改前一个 chunk, 但是可以通过本 chunk 的 size 获得下一个 chunk 的地址. 
        The P (PREV_INUSE) bit, stored in the unused low-order bit of the
        chunk size (which is always a multiple of two words), is an in-use
        bit for the *previous* chunk.  If that bit is *clear*, then the
        word before the current chunk size contains the previous chunk
        size, and can be used to find the front of the previous chunk.
        The very first chunk allocated always has this bit set,
        preventing access to non-existent (or non-owned) memory. If
        prev_inuse is set for any given chunk, then you CANNOT determine
        the size of the previous chunk, and might even get a memory
        addressing fault when trying to do so.
        Note that the `foot' of the current chunk is actually represented
        as the prev_size of the NEXT chunk. This makes it easier to
        deal with alignments etc but can be very confusing when trying
        to extend or adapt this code.
        The two exceptions to all this are
        // 这里的 the trailing size 是指下一个 chunk 的 pre_size, 因为 top 位于最高地址, 不存在相邻的下一个 chunk, 同时这里也解答了上面关于 top 什么时候重新填满
         1. The special chunk `top' doesn't bother using the
      trailing size field since there is no next contiguous chunk
      that would have to index off it. After initialization, `top'
      is forced to always exist.  If it would become less than
      MINSIZE bytes long, it is replenished.
         2. Chunks allocated via mmap, which have the second-lowest-order
      bit M (IS_MMAPPED) set in their size fields.  Because they are
      allocated one-by-one, each must contain its own trailing size field.
    */
阅读文档, 是理解的最快的方式之一.
`P (PREV_INUSE)` 标志位表示前一个 chunk 是否在使用, 0 为没有在使用.
`prev_size` 表示前一个 chunk 的大小, 仅在 `P (PREV_INUSE)` 为 0 时有效, 也就是前一个 chunk 为空闲状态.
`size` 表示该整个 chunk 大小, 并非 malloc 返回值.
`fd`, `bk`, `fd_nextsize`, `fd_nextsize` 是对于空闲 chunk 而言, 对于正在使用的 chunk,
从当前位置开始就是 malloc 返回给用户可用的空间.
`fd`, `bk` 组成了 Bins 的双向环链表
对于空闲的 chunk 空间布局, 见上, 是环形双向链表. 存放在空闲 chunk 容器中.
关于 chunk 有一些操作, 判断前一个是否在使用, 判断下一个 chunk 是否正在使用, 是不是 `mmap` 分配的, 以及对标志位 `P`
等的操作, 可以参考 `glibc-2.19/malloc/malloc.c:1206` 中 `Physical chunk operations`
一小节(直接搜素该关键字即可).
#### 边界标示
对于 chunk 的空间布局组织采用边界标示的方法, chunk 的存储是一段连续的内存, 其实就是 chunk 头部保存长度信息,