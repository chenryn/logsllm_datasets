### AOSP的system/nfc模块分析

#### 重点聚焦
- **协议栈实现**：在AOSP的`system/nfc`文件夹中，协议栈在此实现。
- **原始缓冲区操作**：涉及大量直接操作原始缓冲区。
- **用户可控数据**：存在用户可控的数据。

#### Java封装与JNI实现
- **Java封装**：提供高层API。
- **JNI实现**：用于Java与C/C++代码之间的交互。
- **Mifare支持**：支持Mifare卡的相关功能。
- **NDEF处理**：实现NDEF（NFC Data Exchange Format）处理。
- **卡片模拟**：实现卡片模拟功能。
- **P2P实现**：实现LLCP（Logical Link Control Protocol）等P2P通信协议。
- **标签类型**：支持t1t, t2t, t4t, i93等多种标签类型。

#### 基础概念
- **GKI (Generic Kernel Interface)**：
  - **缓冲区内存分配器**：基于环形缓冲区，难以破坏堆，减少“double free”问题。
  - **消息传递**：在不同的任务之间传递消息。
  - **计时器**：管理定时任务。
- **NFA (NFC Forum Architecture)**：
  - **系统管理器**：管理整个NFC系统。
  - **设备管理器**：管理NFC设备。
  - **状态机管理器**：管理各种状态机。
  - **资源初始化和释放**：负责资源的初始化和释放。
  - **协议切换**：在不同协议之间进行切换。
  - **消息收发**：与其他组件进行通信。
  - **总结**：NFA可以被视为一个“管家程序”。
- **标签类型**：
  - **命名方式**：命名方式较为随意。
  - **读写支持**：支持t1t, t2t, t3t, t4t, t5t, i93(ISO-15693), Mifare等标签类型。
  - **卡片模拟支持**：支持t3t（有限功能）和t4t。

#### 模糊测试与代码审计
- **复杂性**：涉及多线程、多状态机和多状态。
- **输入顺序**：多阶段输入，顺序不定。
- **代码耦合度高**：难以分解。
- **约束条件**：子模块崩溃不一定意味着可以通过用户输入触发。
- **结论**：建议进行代码审计而非模糊测试。

#### Proxmark 3
- **简介**：Proxmark 3是一个强大的通用RFID工具，支持从低频到高频的各种标签。
- **硬件组成**：芯片、高频天线、低频天线（非必须）、USB线。
- **代码分支**：
  - **官方分支**：稳定但功能有限。
  - **Iceman分支**：不稳定但功能更强大。
- **法律提示**：请遵守当地法律，不要进行非法监听等行为。

#### 示例代码
- **ISO 15693协议模拟**：
  ```c
  void SimTagIso15693(uint32_t parameter, uint8_t *uid) {
      LEDsoff();
      LED_A_ON();
      FpgaDownloadAndGo(FPGA_BITSTREAM_HF);
      SetAdcMuxFor(GPIO_MUXSEL_HIPKD);
      FpgaWriteConfWord(FPGA_MAJOR_MODE_HF_SIMULATOR | FPGA_HF_SIMULATOR_NO_MODULATION);
      FpgaSetupSsc(FPGA_MAJOR_MODE_HF_SIMULATOR);
      StartCountSspClk();
      uint8_t cmd[ISO15693_MAX_COMMAND_LENGTH];
      BuildInventoryResponse(uid);
      while (!BUTTON_PRESS()) {
          uint32_t eof_time = 0, start_time = 0;
          int cmd_len = GetIso15693CommandFromReader(cmd, sizeof(cmd), &eof_time);
          if ((cmd_len >= 5) && (cmd[0] & ISO15693_REQ_INVENTORY) && (cmd[1] == ISO15693_INVENTORY)) {
              bool slow = !(cmd[0] & ISO15693_REQ_DATARATE_HIGH);
              start_time = eof_time + DELAY_ISO15693_VCD_TO_VICC_SIM - DELAY_ARM_TO_READER_SIM;
              TransmitTo15693Reader(ToSend, ToSendMax, start_time, slow);
          }
          Dbprintf("%d bytes read from reader:", cmd_len);
          Dbhexdump(cmd_len, cmd, false);
      }
      FpgaWriteConfWord(FPGA_MAJOR_MODE_OFF);
      LEDsoff();
  }
  ```

#### 实例分析
- **涵盖模块**：
  - 卡片模拟案例。
  - 读写器案例。
  - NFA案例。

#### CVE-2019-9358
- **概述**：位于卡片模拟协议栈中的中危漏洞。
- **详情**：
  - **NDEF检查**：未验证读入的服务数量。
  - **越界写入**：最多可写入480字节到全局变量段。
- **调试发现**：Android系统限制了自身的Felica模拟能力，可能是出于法律考虑。
- **Sony规定**：参见Sony官网的相关技术规范。

通过以上分析，我们可以更好地理解AOSP的`system/nfc`模块及其相关组件的工作原理。