# []{#managing-system-services-with-systemctl_configuring-basic-system-settings.html#enabling-a-system-service_managing-system-services-with-systemctl}启用系统服务 {.title}
:::
您可以将服务配置为在系统引导时自动启动。`enable`{.literal}
命令读取所选服务单元的 `[Install]`{.literal} 部分，并在
`/etc/systemd/system/`{.literal} 目录及其子目录中创建到
`/usr/lib/systemd/system/name.service`{.literal}
文件的符号链接。但是，它不会重写已存在的链接。
::: itemizedlist
**流程**
-   要将一个与系统服务对应的服务单元配置为在引导时自动启动，以
    `root`{.literal} 身份输入以下命令：
    ``` literallayout
    # systemctl enable .service
    ```
    使用您要启用的服务单元的名称替换 [*\*]{.emphasis}（例如
    `httpd`{.literal}）。
    ::: itemizedlist
    -   如果要确保重新创建符号链接，以 `root`{.literal}
        用户身份使用以下命令：
        ``` literallayout
        # systemctl reenable .service
        ```
        该命令禁用所选服务单元，并立即再次启用。
        ::: example
        []{#managing-system-services-with-systemctl_configuring-basic-system-settings.html#idm140217590631056}
        **例 13.5. 启用 httpd.service**
        ::: example-contents
        要将 Apache HTTP 服务器配置为在引导时自动启动，以
        `root`{.literal} 用户身份运行以下命令：
        ``` screen
        # systemctl enable httpd.service
        Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.
        ```
        :::
        :::
    :::
:::
::: itemizedlist
**其他资源**
-   [显示系统服务状态](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#displaying-system-service-status_managing-system-services-with-systemctl){.link}
-   [启动系统服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#starting-a-system-service_managing-system-services-with-systemctl){.link}
:::
:::
::: section
::: titlepage
# []{#managing-system-services-with-systemctl_configuring-basic-system-settings.html#disabling-a-system-service_managing-system-services-with-systemctl}禁用系统服务 {.title}
:::
您可以防止服务单元在引导时自动启动。`disable`{.literal}
命令读取所选服务单元的 `[Install]`{.literal} 部分，并从
`/etc/systemd/system/`{.literal} 目录及其子目录中删除到
`/usr/lib/systemd/system/name.service`{.literal} 文件的符号链接。
::: itemizedlist
**流程**
-   要将一个与系统服务对应的服务单元配置为在引导时不自动启动，以
    `root`{.literal} 身份输入以下命令：
    ``` literallayout
    # systemctl disable .service
    ```
    使用您要禁用的服务单元的名称替换 [*\*]{.emphasis}（例如：
    `bluetooth`{.literal}）。
    ::: example
    []{#managing-system-services-with-systemctl_configuring-basic-system-settings.html#idm140217687628048}
    **例 13.6. 禁用 bluetoothd.service**
    ::: example-contents
    `bluetoothd`{.literal} 守护进程的服务单元名为
    `bluetooth.service`{.literal}。要防止这个服务单元在引导时启动，以
    `root`{.literal} 用户身份输入以下命令：
    ``` literallayout
    # systemctl disable bluetooth.service
    Removed symlink /etc/systemd/system/bluetooth.target.wants/bluetooth.service.
    Removed symlink /etc/systemd/system/dbus-org.bluez.service.
    ```
    :::
    :::
    ::: itemizedlist
    -   要屏蔽所有服务单元并阻止手动启动或者由其他服务启动，以
        `root`{.literal} 用户身份运行以下命令：
        ``` literallayout
        # systemctl mask .service
        ```
        这个命令将 `/etc/systemd/system/name.service`{.literal}
        文件替换为指向 `/dev/null`{.literal}
        的符号链接，呈现实际单元文件并可供 `systemd`{.literal} 访问。
    -   要恢复这个操作并取消掩码一个服务单元，请输入：
        ``` literallayout
        # systemctl unmask .service
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   [显示系统服务状态](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#displaying-system-service-status_managing-system-services-with-systemctl){.link}
-   [停止系统服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#stopping-a-system-service_managing-system-services-with-systemctl){.link}
:::
:::
:::
[]{#working-with-systemd-targets_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#working-with-systemd-targets_configuring-basic-system-settings.html#working-with-systemd-targets_configuring-basic-system-settings}第 14 章 使用 systemd 目标 {.title}
:::
systemd 目标由目标单元表示。目标单元文件以 `.target`{.literal}
文件扩展结尾，其唯一用途是通过一组依赖项将其他 systemd
单元分组到一起。例如，`graphical.target 单元`{.literal}
用于启动图形会话，启动系统服务，如 GNOME 显示管理器
`(gdm.service)`{.literal} 或 Accounts Service
(`accounts-daemon.service`{.literal})，并激活
`multi-user.target 单元`{.literal}。同样，multi-user.target
单元启动其他基本系统服务，如 NetworkManager
`(NetworkManager.service)`{.literal} 或 D-Bus
`(dbus.service)`{.literal}，并激活另一个名为 basic.target 的目标单元。
本节包含使用 `systemd`{.literal} 目标时实施的步骤。
::: section
::: titlepage
# []{#working-with-systemd-targets_configuring-basic-system-settings.html#con_difference-between-sysv-runlevels-and-systemd-targets_working-with-systemd-targets}SysV 运行级别和 systemd 目标之间的区别 {.title}
:::
之前的 Red Hat Enterprise Linux 版本使用 SysV init 或 Upstart
发布，并实施了一组代表特定操作模式的预定义运行级别。这些运行级别从 0 到
6，由系统管理员启用特定运行级别时要运行的系统服务选择定义。从 Red Hat
Enterprise Linux 7 开始，运行级别的概念已被 systemd 目标替代。
Red Hat Enterprise Linux 7
带有很多预定义目标，它们比之前的版本中的运行级别标准集合类似。出于兼容性的原因，它还为这些目标提供别名，直接映射到
SysV 运行级别。
下表提供了 SysV 运行级别的完整列表及其对应的 systemd 目标：
::: table
[]{#working-with-systemd-targets_configuring-basic-system-settings.html#tabl-systemd-Targets-Runlevels}
**表 14.1. SysV 运行级别与 systemd 目标的比较**
::: table-contents
  运行级别        目标单元                                                      描述
  --------------- ------------------------------------------------------------- --------------------------------
  `0`{.literal}   `runlevel0.target`{.literal}, `poweroff.target`{.literal}     关闭系统。
  `1`{.literal}   `runlevel1.target`{.literal}, `rescue.target`{.literal}       设置救援 shell。
  `2`{.literal}   `runlevel2.target`{.literal}, `multi-user.target`{.literal}   设置一个非图形化的多用户系统。
  `3`{.literal}   `runlevel3.target`{.literal}, `multi-user.target`{.literal}   设置一个非图形化的多用户系统。
  `4`{.literal}   `runlevel4.target`{.literal}, `multi-user.target`{.literal}   设置一个非图形化的多用户系统。
  `5`{.literal}   `runlevel5.target`{.literal}, `graphical.target`{.literal}    设置图形化多用户系统。
  `6`{.literal}   `runlevel6.target`{.literal}, `reboot.target`{.literal}       关闭并重启系统。
:::
:::
下表将 SysV init 命令与 systemctl 进行比较。使用 systemctl
实用程序查看、更改或配置 systemd 目标：
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`运行级别`{.literal} 和 `telinit`{.literal}
命令仍可在系统中使用，并可按预期工作，但只出于兼容性原因被包括在内，因此应该尽量避免使用。
:::
::: table
[]{#working-with-systemd-targets_configuring-basic-system-settings.html#tabl-systemd-Targets-telinit}
**表 14.2. SysV init 命令与 systemctl 的比较**
::: table-contents
  旧命令                         新命令                                           描述
  ------------------------------ ------------------------------------------------ --------------------------
  `runlevel`{.literal}           `systemctl list-units --type target`{.literal}   列出当前载入的目标单元。
  `telinit runlevel`{.literal}   `systemctl isolate name.target`{.literal}        更改当前目标。
:::
:::
::: itemizedlist
**其他资源**
-   man `sysv init`{.literal}
-   man `upstart init`{.literal}
-   man `systemctl`{.literal}
:::
:::
::: section
::: titlepage
# []{#working-with-systemd-targets_configuring-basic-system-settings.html#proc_viewing-the-default-target_working-with-systemd-targets}查看默认对象 {.title}
:::
默认目标单元由 `/etc/systemd/system/default.target`{.literal} 文件代表。
::: itemizedlist
**流程**
-   要确定默认使用哪个目标单元：
    ``` screen
    $ systemctl get-default
    graphical.target
    ```
-   使用符号链接决定默认对象：
    ``` screen
    $  ls -l /usr/lib/systemd/system/default.target
    ```
    []{#working-with-systemd-targets_configuring-basic-system-settings.html#proc_viewing-the-target-units_working-with-systemd-targets}
    = 查看目标单元
:::
默认情况下，`systemctl list-units`{.literal} 命令只显示活跃的单位。
::: itemizedlist
**流程**
-   列出所有载入的单元，而不考虑它们的状态：
    ``` screen
    $ systemctl list-units --type target --all
    ```
-   要列出所有当前载入的目标单元：
    ``` screen
    $ systemctl list-units --type target
    UNIT                  LOAD   ACTIVE SUB    DESCRIPTION
    basic.target          loaded active active Basic System
    cryptsetup.target     loaded active active Encrypted Volumes
    getty.target          loaded active active Login Prompts
    graphical.target      loaded active active Graphical Interface
    local-fs-pre.target   loaded active active Local File Systems (Pre)
    local-fs.target       loaded active active Local File Systems
    multi-user.target     loaded active active Multi-User System
    network.target        loaded active active Network
    paths.target          loaded active active Paths
    remote-fs.target      loaded active active Remote File Systems
    sockets.target        loaded active active Sockets
    sound.target          loaded active active Sound Card
    spice-vdagentd.target loaded active active Agent daemon for Spice guests
    swap.target           loaded active active Swap
    sysinit.target        loaded active active System Initialization
    time-sync.target      loaded active active System Time Synchronized
    timers.target         loaded active active Timers
    LOAD   = Reflects whether the unit definition was properly loaded.
    ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
    SUB    = The low-level unit activation state, values depend on unit type.
    17 loaded units listed.
    ```
:::
::: section
::: titlepage
## []{#working-with-systemd-targets_configuring-basic-system-settings.html#proc_changing-the-default-target_working-with-systemd-targets}更改默认对象 {.title}
:::
默认目标单元由 `/etc/systemd/system/default.target`{.literal}
文件代表。以下流程描述了如何使用 systemctl 命令更改默认目标：
::: orderedlist
**流程**
1.  要确定默认目标单元：
    ``` screen
    # systemctl get-default
    ```
2.  将系统配置为默认使用不同的目标单元：
    ``` literallayout
    # systemctl set-default multi-user.target
    rm /etc/systemd/system/default.target
    ln -s /usr/lib/systemd/system/multi-user.target /etc/systemd/system/default.target
    ```
    这个命令将 `/etc/systemd/system/default.target`{.literal}
    文件替换为到 `/usr/lib/systemd/system/name.target`{.literal}
    的符号链接，其中 name
    是您要使用的目标单元的名称。使用您要默认使用的目标单元的名称替换
    [*multi-user*]{.emphasis}。
3.  重启
    ``` screen
    # reboot
    ```
:::
:::
::: section
::: titlepage
## []{#working-with-systemd-targets_configuring-basic-system-settings.html#proc_changing-the-default-target-using-symbolic-link_working-with-systemd-targets}使用符号链接更改默认对象 {.title}
:::
以下流程描述了如何通过创建指向目标的符号链接来更改默认目标。
::: orderedlist
**流程**
1.  要确定默认目标单元：
    ``` screen
    #  ls /usr/lib/systemd/system/default.target -l
    ```
2.  创建符号链接：
    ``` screen
    #  ln -sf /usr/lib/systemd/system/graphical.target /etc/systemd/system/default.target
    ```
3.  重启系统：
    ``` screen
    # reboot
    ```
    ::: itemizedlist
    **验证步骤**
    -   验证新创建的 default.target:
        ``` screen
        $ systemctl get-default
        multi-user.target
        ```