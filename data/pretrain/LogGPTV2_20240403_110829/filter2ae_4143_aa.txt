## 前言
最近在研究webshell免杀的问题，到了内存马免杀部分发现传统的Filter或者Servlet查杀手段比较多，不太容易实现免杀，比如有些工具会将所有注册的`Servlet`和`Filter`拿出来，排查人员仔细一点还是会被查出来的，所以  
**我们要找一些其他方式实现的内存马。比如我今天提到的JSP的内存马（虽然本质上也是一种Servlet类型的马）** 。
## JSP加载流程分析
在Tomcat中`jsp`和`jspx`都会交给`JspServlet`处理，所以要想实现`JSP`驻留内存，首先得分析`JspServlet`的处理逻辑。
            jsp
            org.apache.jasper.servlet.JspServlet
        ...
    ...
            jsp
            *.jsp
            *.jspx
下面分析`JspServlet#service`方法，主要的功能是接收请求的URL，判断是否预编译，核心的方法是`serviceJspFile`。
    public void service (HttpServletRequest request, HttpServletResponse response)
                throws ServletException, IOException {
            String jspUri = jspFile;
                jspUri = (String) request.getAttribute(
                        RequestDispatcher.INCLUDE_SERVLET_PATH);
                if (jspUri != null) {
          //检查请求是否是通过其他Servlet转发过来的
                    String pathInfo = (String) request.getAttribute(
                            RequestDispatcher.INCLUDE_PATH_INFO);
                    if (pathInfo != null) {
                        jspUri += pathInfo;
                    }
                } else {
           //获取ServletPath和pathInfo作为jspUri
                    jspUri = request.getServletPath();
                    String pathInfo = request.getPathInfo();
                    if (pathInfo != null) {
                        jspUri += pathInfo;
                    }
                }
            }
            try {
                //是否预编译
                boolean precompile = preCompile(request);
                //核心方法
                serviceJspFile(request, response, jspUri, precompile);
            } catch (RuntimeException | IOException | ServletException e) {
                throw e;
            } catch (Throwable e) {
                ExceptionUtils.handleThrowable(e);
                throw new ServletException(e);
            }
        }
`preCompile`中只有当请求参数以`jsp_precompile`开始才会进行预编译，否则不进行预编译。
    boolean preCompile(HttpServletRequest request) throws ServletException {
            String queryString = request.getQueryString();
            if (queryString == null) {
                return false;
            }
            //    public static final String PRECOMPILE = System.getProperty("org.apache.jasper.Constants.PRECOMPILE", "jsp_precompile");
            int start = queryString.indexOf(Constants.PRECOMPILE);
            if (start 
> 在开发模式下，容器会经常检查jsp文件的时间戳来决定是否进行编译，如果jsp文件的时间戳比对应的.class文件的时间戳晚就证明jsp又进行了修改，需要再次编译，但是不断地进行时间戳的比对开销很大，会影响系统性能，而在生产模式下系统不会经常想的检查时间戳。所以一般在开发过程中使用开发模式，这样可以在jsp修改后再次访问就可以见到修改后的效果非常方便，而系统上线之后就要改为生产模式，虽然生产模式下会导致jsp的修改需要重启服务器才可以生效，但是上线后的改动较少而且性能很重要。
默认Tomcat是以开发模式运行的。一般我们遇到的Tomcat都是以开发模式运行的，所以会由`JspCompilationContext#compile`进行编译。
    if (options.getDevelopment() || mustCompile) {
                    synchronized (this) {
                        if (options.getDevelopment() || mustCompile) {
                            ctxt.compile();
                            mustCompile = false;
                        }
                    }
                } else {
                    if (compileException != null) {
                        // Throw cached compilation exception
                        throw compileException;
                    }
                }
下面我们看下编译部分都做了什么，Tomcat默认使用`JDTCompiler`编译，首先通过`isOutDated`判断是否需要编译，再去检查JSP文件是否存在，删除原有的java和Class文件，通过`jspCompiler.compile()`编译。
    public void compile() throws JasperException, FileNotFoundException {
          //获取编译器，默认使用JDTCompiler编译
            createCompiler();
          //通过isOutDated决定是否编译
            if (jspCompiler.isOutDated()) {
                if (isRemoved()) {
                    throw new FileNotFoundException(jspUri);
                }
                try {
                    //删除已经生成的java和Class文件
                    jspCompiler.removeGeneratedFiles();
                    jspLoader = null;
                    //编译
                    jspCompiler.compile();
                    jsw.setReload(true);
                    jsw.setCompilationException(null);
                ...
        }
下面我们分析如何将生成的class文件注册为Servlet。首先判断`theServlet`是否为空，如果为空则表示还没有为JSP文件创建过Servlet，则通过`InstanceManager.newInstance`创建Servlet,并将创建的Servlet保存在`theServlet`属性中。
    public Servlet getServlet() throws ServletException {
    // getReloadInternal是否Reload默认为False，也就是说如果theServlet为true就会直接返回。
            if (getReloadInternal() || theServlet == null) {
                synchronized (this) {
                    if (getReloadInternal() || theServlet == null) {
                 //如果theServlet中有值则销毁该Servlet.
                        destroy();
                        final Servlet servlet;
                        try {
                            //创建Servlet实例
                            InstanceManager instanceManager = InstanceManagerFactory.getInstanceManager(config);
                            servlet = (Servlet) instanceManager.newInstance(ctxt.getFQCN(), ctxt.getJspLoader());
                        } catch (Exception e) {
                            Throwable t = ExceptionUtils
                                    .unwrapInvocationTargetException(e);
                            ExceptionUtils.handleThrowable(t);
                            throw new JasperException(t);
                        }
                    //初始化servlet
                        servlet.init(config);
                        if (theServlet != null) {
                            ctxt.getRuntimeContext().incrementJspReloadCount();
                        }
                    //将servlet保存到theServlet中，theServlet由volatile修饰，在线程之间可以共享。
                        theServlet = servlet;
                        reload = false;
                    }
                }
            }
            return theServlet;
        }
下面有一个小知识点，`theServlet`是由`volatile`修饰的，在不同的线程之间可以共享，再通过`synchronized
(this)`加锁，也就是说无论我们请求多少次，无论是哪个线程处理，只要`this`是一个值，那么`theServlet`属性的值是一样的，而`this`就是当前的`jspServletWrapper`，我们访问不同的JSP也是由不同的`jspServletWrapper`处理的。
最后就是调用`servlet.service`方法完成请求处理。
## 内存驻留分析
上面我们已经分析完了JSP的处理逻辑，要想要完成内存驻留，我们要解决下面的问题。
  * 请求后不去检查JSP文件是否存在
  * theServlet中一直保存着我们的servlet，当我们请求对应url还能交给我们的servlet处理
第二个问题比较容易，`theServlet`能否获取到Servlet或者获取到哪个Servlet和`jspServletWrapper`是有关的，而在`JspServlet#serviceJspFile`中，如果我们已经将Servlet注册过，可以根据url从`JspRuntimeContext`中获取得到对应的`jspServletWrapper`。
    private void serviceJspFile(HttpServletRequest request,
                                    HttpServletResponse response, String jspUri,
                                    boolean precompile)
            throws ServletException, IOException {
            JspServletWrapper wrapper = rctxt.getWrapper(jspUri);
            if (wrapper == null) {
           ...
            }
            try {
                wrapper.service(request, response, precompile);
            } catch (FileNotFoundException fnfe) {
                handleMissingResource(request, response, jspUri);
            }
        }
### 绕过方法一
下面解决`请求后不去检查JSP文件是否存在`问题，首先我想绕过下面的判断,如果我们能让`options.getDevelopment()`返回false就不会进入`complie`部分。
    if (options.getDevelopment() || mustCompile) {
                    synchronized (this) {
                        if (options.getDevelopment() || mustCompile) {
                            // The following sets reload to true, if necessary
                            ctxt.compile();
                            mustCompile = false;
                        }
                    }
                }
`development`并不是一个`static`属性，所以不能直接修改，要拿到`options`的对象。
    private boolean development = true;
`options`对象被存储在`JspServlet`中，
    public class JspServlet extends HttpServlet implements PeriodicEventListener {
    ...
        private transient Options options;
`MappingData`中保存了路由匹配的结果,`MappingData`的`wrapper`字段包含处理请求的`wrapper`，在Tomcat中，`Wrapper`代表一个Servlet，它负责管理一个
Servlet，包括的
Servlet的装载、初始化、执行以及资源回收。在`Wrapper`的`instance`属性中保存着`servlet`的实例，因此我们可以从`MappingData`中拿到`JspServlet`进而更改`options`的`development`属性值。
    public class MappingData {
        public Host host = null;
        public Context context = null;
        public int contextSlashCount = 0;
        public Context[] contexts = null;