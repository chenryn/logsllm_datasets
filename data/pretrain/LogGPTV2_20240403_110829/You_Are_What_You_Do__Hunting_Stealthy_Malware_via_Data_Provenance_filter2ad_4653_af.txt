cious actions. To limit the vulnerability of the IDS to mimicry
attacks, a number of improvements [45], [50], [49], [76],
[106] have been proposed by considering more features in
the analysis. For example, [45] incorporates into the analysis
information about the call stack conﬁguration at the time of
a system call to counteract mimicry attacks. To automate the
construction of mimicry attacks, several techniques [67], [51],
[85] have been proposed. However, these systems focus on
monitoring system call traces, which do not reﬂect the context
of each syscall event. In contrast, our approach uses data prove-
nance that encodes historical context into causality graphs.
Conducting mimicry attacks on provenance-based solutions is
more challenging than on system call traces as provenance
graphs contain complex structural information that is difﬁcult
to imitate without impeding the attack.
Provenance-based Solutions
A large body of work has
been proposed to leverage provenance for multiple areas such
as forensic analysis [30], [70], [71], [74], [89], [55], [29],
[57], network debugging and troubleshooting [38], [37], alert
triage [56], intrusion detection and access control [28], [86],
[80], [73], [100], and attack reconstruction [107], [103], [104].
Linux Provenance Modules (LPM) [30] and Hi-Fi [89]
proposed an efﬁcient and trusted provenance collecting frame-
work by adding provenance hooks in the Linux kernel similar
to Linux Security Modules. BEEP [70] and ProTracer [74]
are provenance trackers that solve the problem of dependency
explosion in the provenance graph by execution partitioning
the event-handling loops. Liu et al. [73] proposed an anomaly
based priority search to address the dependency explosion
problem. LogGC [71] further reduces the log size using
the idea of execution partitioning. Winnower [55] provides
a storage efﬁcient provenance auditing framework for large
clusters. MCI [68] proposes a reliable and efﬁcient approach
to restore ﬁne-grained information ﬂow among system events
using dual execution (LDX). While these techniques address
different problems, we believe that they can be integrated into
PROVDETECTOR to improve its accuracy. Besides forensic
investigation, provenance is also used in network debugging.
Chen et al. [38] proposed differential provenance which rea-
sons the differences compared to good and bad references.
The same authors [37] also proposed secure packet provenance
(SPP) that provides provenance on the Internet’s data plane
which has a high data rate. NoDoze [56] is an automated
threat alert triage system based on data provenance. It ranks the
alerts from third party threat detection systems (TDS) by the
rareness of causal paths in their provenance graph. However,
it cannot effectively extract the K rarest paths as it enumerates
all the paths of a provenance graph. Moreover, it only provides
anomaly scores to paths to help with investigation and does
not provide a systematic way to separate benign and malicious
paths. PROVDETECTOR addresses the limitations and provides
an end-to-end solution to automatically learns the boundaries
from training data using machine learning techniques. Besides,
a TDS is not required by PROVDETECTOR.
IX. CONCLUSION
In this paper, we present PROVDETECTOR, an anomaly
detection based approach to detect stealthy impersonation
malware using OS level provenance graphs. PROVDETECTOR
uses a novel rareness-based path selection algorithm to identify
causal paths in the provenance graph which represent
the
potentially malicious behavior of a process. These causal paths
are then used by a pipeline of a document embedding model
and a novelty detection model to determine if the process is
malicious. We evaluated PROVDETECTOR with 23 target pro-
grams using a system provenance dataset from an enterprise.
The results show that PROVDETECTOR has consistently high
precision and recall for the evaluated programs, demonstrating
its effectiveness and practicality in the detection of stealthy
malware.
13
ACKNOWLEDGEMENTS
We would like to thank the anonymous reviewers for
their helpful feedback. This work was supported in part by
NSF CNS 13-30491. Ding Li and Kangkook Jee are the
corresponding authors. The views expressed in this material
are those of the authors only.
REFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
[21]
[22]
[23]
[27] T. Barabosch, S. Eschweiler, and E. Gerhards-Padilla, “Bee master:
Detecting host-based code injection attacks,” in International con-
ference on detection of intrusions and malware, and vulnerability
assessment. Springer, 2014, pp. 235–254.
[28] A. Bates, K. R. B. Butler, and T. Moyer, “Take Only What You Need:
Leveraging Mandatory Access Control Policy to Reduce Provenance
Storage Costs,” in TaPP, 2015.
[29] A. Bates, W. U. Hassan, K. Butler, A. Dobra, B. Reaves, P. Cable,
T. Moyer, and N. Schear, “Transparent web service auditing via
network provenance functions,” in WWW, 2017.
[30] A. Bates, D. Tian, K. R. B. Butler, and T. Moyer, “Trustworthy whole-
system provenance for the linux kernel,” in Proceedings of the 24th
USENIX Conference on Security Symposium, 2015, pp. 319–334.
[31] T. Y. Berger-Wolf and J. Saia, “A framework for analysis of dynamic
social networks,” in Proceedings of the 12th ACM SIGKDD interna-
tional conference on Knowledge discovery and data mining. ACM,
2006, pp. 523–528.
[32] P. Bojanowski, E. Grave, A. Joulin, and T. Mikolov, “Enriching word
vectors with subword information,” Transactions of the Association
for Computational Linguistics, vol. 5, pp. 135–146, 2017.
[33] P. F. Brown, P. V. Desouza, R. L. Mercer, V. J. D. Pietra, and J. C.
Lai, “Class-based n-gram models of natural language,” Computational
linguistics, vol. 18, no. 4, pp. 467–479, 1992.
I. Burguera, U. Zurutuza, and S. Nadjm-Tehrani, “Crowdroid:
behavior-based malware detection system for android,” in Proceedings
of the 1st ACM workshop on Security and privacy in smartphones and
mobile devices. ACM, 2011, pp. 15–26.
[34]
[35] M. Caselli, E. Zambon, and F. Kargl, “Sequence-aware intrusion
detection in industrial control systems,” in Proceedings of the 1st ACM
Workshop on Cyber-Physical System Security. ACM, 2015, pp. 13–
24.
[36] R. Chalapathy, A. K. Menon, and S. Chawla, “Anomaly detection using
one-class neural networks,” arXiv preprint arXiv:1802.06360, 2018.
[37] A. Chen, A. Haeberlen, W. Zhou, and B. T. Loo, “One primitive to
diagnose them all: Architectural support for internet diagnostics,” in
EuroSys, 2017.
[38] A. Chen, Y. Wu, A. Haeberlen, W. Zhou, and B. T. Loo, “The
Good, the Bad, and the Differences: Better Network Diagnostics with
Differential Provenance,” in ACM SIGCOMM, 2016.
[39] T. Chen, L.-A. Tang, Y. Sun, Z. Chen, and K. Zhang, “Entity
embedding-based anomaly detection for heterogeneous categorical
events,” in Proceedings of the Twenty-Fifth International Joint Con-
ference on Artiﬁcial Intelligence, ser. IJCAI’16. AAAI Press, 2016,
pp. 1396–1403.
[40] L. P. Cordella, P. Foggia, C. Sansone, and M. Vento, “A (sub) graph
isomorphism algorithm for matching large graphs,” IEEE transactions
on pattern analysis and machine intelligence, vol. 26, no. 10, pp.
1367–1372, 2004.
[41] A. Damodaran, F. Di Troia, C. A. Visaggio, T. H. Austin, and
M. Stamp, “A comparison of static, dynamic, and hybrid analysis
for malware detection,” Journal of Computer Virology and Hacking
Techniques, vol. 13, no. 1, pp. 1–12, 2017.
[42] F. Dang, Z. Li, Y. Liu, E. Zhai, Q. A. Chen, T. Xu, Y. Chen, and
J. Yang, “Understanding ﬁleless attacks on linux-based iot devices
with honeycloud,” in Proceedings of the 17th Annual International
Conference on Mobile Systems, Applications, and Services. ACM,
2019, pp. 482–493.
[43] B. Dong, Z. Chen, H. W. Wang, L.-A. Tang, K. Zhang, Y. Lin, Z. Li,
and H. Chen, “Efﬁcient discovery of abnormal event sequences in
enterprise security systems,” in Proceedings of the 2017 ACM on
Conference on Information and Knowledge Management.
ACM,
2017, pp. 707–715.
[44] D. Eppstein, “Finding the k shortest paths,” SIAM Journal on comput-
ing, vol. 28, no. 2, pp. 652–673, 1998.
[45] H. H. Feng, O. M. Kolesnikov, P. Fogla, W. Lee, and W. Gong,
“Anomaly detection using call stack information,” in 2003 Symposium
on Security and Privacy.
IEEE, 2003.
[46] Y. Feng, S. Anand, I. Dillig, and A. Aiken, “Apposcopy: Semantics-
based detection of android malware through static analysis,” in Pro-
https:
Sandbox
-
Automated
Malware
Analysis,”
Injection
for Windows,”
“Remote Thread Injection on Windows,” http://blog.aaronballman.
com/2011/06/remote-thread-injection-on-windows/, 2011.
“Defending Against Malicious Application Compatibility Shims,”
https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-
Defending-Against-Malicious-Application-Compatibility-Shims-
wp.pdf, 2015.
“AtomBombing: Brand New Code
https://blog.ensilo.com/atombombing-brand-new-code-injection-
for-windows, 2016.
“Fileless Attack Survival Guide,” https://dsimg.ubm-us.net/envelope/
395823/551993/Fileless%20Attack%20Survival%20Guide.pdf, 2018.
“Macro-less Document and Fileless Malware: the perfect cloaking
mechanism for new threats,” https://forums.juniper.net/t5/Threat-
Research/Macro-less-Document-and-Fileless-Malware-the-perfect-
cloaking/ba-p/317425, 2018.
“The 2017 State of Endpoint Security Risk Report,” https://www.
barkly.com/ponemon-2018-endpoint-security-statistics-trends, 2018.
“Cuckoo
https://cuckoosandbox.org/, 2019.
“Event Tracing,” https://docs.microsoft.com/en-us/windows/desktop/
ETW/event-tracing-portal, 2019.
“Fitting an elliptic envelope,” https://scikit-learn.org/stable/modules/
outlier detection.html#ﬁtting-an-elliptic-envelope, 2019.
“gensim: Topic modelling for humans,” https://radimrehurek.com/
gensim/index.html, 2019.
“Novelty detection with Local Outlier Factor,” https://scikit-
learn.org/stable/modules/outlier detection.html#novelty-detection-
with-local-outlier-factor, 2019.
“PowerShell Empire,” https://github.com/EmpireProject/Empire, 2019.
“Process Hollowing,” https://attack.mitre.org/techniques/T1093/, 2019.
“scikit-learn: machine learning in Python,” https://scikit-learn.org/,
2019.
Entities,”
“Sofacy
//unit42.paloaltonetworks.com/unit42-sofacy-attacks-multiple-
government-entities/, 2019.
“System administration utilities,” 2019, man7.org/linux/man-pages/
man8/auditd.8.html/.
“Tencent HABO,” https://habo.qq.com/, 2019.
“VirusShare,” https://virusshare.com, 2019.
“VirusSign,” https://www.virussign.com/, 2019.
“VirusTotal
56f98e3ed00e48ff9cb89dea5f6e11c1/, 2019.
“The 2017 State of Endpoint Security Risk,” https://cdn2.hubspot.
net/hubfs/468115/Campaigns/2017-Ponemon-Report/2017-ponemon-
report-key-ﬁndings.pdf, 2017.
“VirusTotal,” https://www.virustotal.com/, 2018.
“Microsoft
Execution
center/vulnerabilities/writeup/106402, 2019.
Internet Explorer CVE-2019-0541 Remote Code
Vulnerability,”
https://www.symantec.com/security-
https://www.virustotal.com/gui/ﬁle/
Attacks Multiple
Government
Report,”
[24] B. Anderson, D. Quist, J. Neil, C. Storlie, and T. Lane, “Graph-
based malware detection using dynamic analysis,” Journal in computer
Virology, vol. 7, no. 4, pp. 247–258, 2011.
[25] A. Bako, “All paths in an activity network,” Statistics: A Journal of
Theoretical and Applied Statistics, vol. 7, no. 6, pp. 851–858, 1976.
[26] T. Barabosch, N. Bergmann, A. Dombeck, and E. Padilla, “Quincy:
Detecting host-based code injection attacks in memory dumps,” in
International Conference on Detection of Intrusions and Malware, and
Vulnerability Assessment. Springer, 2017, pp. 209–229.
14
ceedings of the 22nd ACM SIGSOFT International Symposium on
Foundations of Software Engineering. ACM, 2014, pp. 576–587.
[47] S. Fewer, “Reﬂective dll injection,” Harmony Security, Version, vol. 1,
2008.
[49]
[48] D. Gao, M. K. Reiter, and D. Song, “On gray-box program tracking
for anomaly detection,” Department of Electrical and Computing
Engineering, p. 24, 2004.
J. T. Gifﬁn, D. Dagon, S. Jha, W. Lee, and B. P. Miller, “Environment-
sensitive intrusion detection,” in International Workshop on Recent
Advances in Intrusion Detection. Springer, 2005, pp. 185–206.
J. T. Gifﬁn, S. Jha, and B. P. Miller, “Efﬁcient context-sensitive
intrusion detection.” in NDSS, 2004.
[50]
[51] ——, “Automated discovery of mimicry attacks,” in International
Workshop on Recent Advances in Intrusion Detection. Springer, 2006,
pp. 41–60.
[52] M. Graeber, “Abusing windows management instrumentation (wmi) to
build a persistent, asyncronous, and ﬁleless backdoor.”
[53] H. HaddadPajouh, A. Dehghantanha, R. Khayami, and K.-K. R. Choo,
“A deep recurrent neural network based approach for internet of
things malware threat hunting,” Future Generation Computer Systems,
vol. 85, pp. 88–96, 2018.
[54] W. Hardy, L. Chen, S. Hou, Y. Ye, and X. Li, “Dl4md: A deep learning
framework for intelligent malware detection,” in Proceedings of the
International Conference on Data Mining (DMIN).
The Steering
Committee of The World Congress in Computer Science, Computer ,
2016, p. 61.
[55] W. U. Hassan, L. Aguse, N. Aguse, A. Bates, and T. Moyer, “To-
wards scalable cluster auditing through grammatical inference over
provenance graphs,” in Network and Distributed Systems Security
Symposium, 2018.
[56] W. U. Hassan, S. Guo, D. Li, Z. Chen, K. Jee, Z. Li, and A. Bates,
“NoDoze: Combatting threat alert fatigue with automated provenance
triage.” in NDSS, 2019.
[57] W. U. Hassan, M. A. Noureddine, P. Datta, and A. Bates, “Omega-
Log: High-ﬁdelity attack investigation via transparent multi-layer log
analysis,” in NDSS, 2020.
[58] S. Hochreiter and J. Schmidhuber, “Long short-term memory,” Neural
computation, vol. 9, no. 8, pp. 1735–1780, 1997.
[59] M. N. Hossain, S. M. Milajerdi, J. Wang, B. Eshete, R. Gjomemo,
R. Sekar, S. D. Stoller, and V. N. Venkatakrishnan, “SLEUTH: real-
time attack scenario reconstruction from COTS audit data,” in 26th
USENIX Security Symposium, USENIX Security 2017, Vancouver, BC,
Canada, August 16-18, 2017., 2017, pp. 487–504.
[61]
[60] Y. Ji, S. Lee, M. Fazzini, J. Allen, E. Downing, T. Kim, A. Orso, and
W. Lee, “Enabling reﬁnable cross-host attack investigation with efﬁ-
cient data ﬂow tagging and tracking,” in USENIX Security Symposium,
2018.
I. Katriel, L. Michel, and P. Hentenryck, “Maintaining longest paths
incrementally,” Constraints, vol. 10, no. 2, pp. 159–183, Apr. 2005.
[62] Y. Kawakoya, E. Shioji, M. Iwamura, and J. Miyoshi, “Api chaser:
Taint-assisted sandbox for evasive malware analysis,” Journal of