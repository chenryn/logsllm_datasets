### Limiting Vulnerability to Mimicry Attacks in IDS

To mitigate the vulnerability of Intrusion Detection Systems (IDS) to mimicry attacks, several enhancements have been proposed. These include incorporating additional features into the analysis [45], [50], [49], [76], [106]. For instance, [45] integrates information about the call stack configuration at the time of a system call to counteract mimicry attacks. Several techniques [67], [51], [85] have also been developed to automate the construction of mimicry attacks. However, these systems primarily monitor system call traces, which lack the contextual information of each syscall event. In contrast, our approach utilizes data provenance, encoding historical context into causality graphs. Conducting mimicry attacks on provenance-based solutions is more challenging than on system call traces, as provenance graphs contain complex structural information that is difficult to imitate without compromising the attack.

### Provenance-Based Solutions

A significant body of work has leveraged provenance for various applications, including forensic analysis [30], [70], [71], [74], [89], [55], [29], [57], network debugging and troubleshooting [38], [37], alert triage [56], intrusion detection and access control [28], [86], [80], [73], [100], and attack reconstruction [107], [103], [104].

- **Linux Provenance Modules (LPM)** [30] and **Hi-Fi** [89] introduced an efficient and trusted provenance collection framework by adding provenance hooks in the Linux kernel, similar to Linux Security Modules.
- **BEEP** [70] and **ProTracer** [74] are provenance trackers that address the dependency explosion problem in the provenance graph through execution partitioning.
- **Liu et al.** [73] proposed an anomaly-based priority search to tackle the dependency explosion issue.
- **LogGC** [71] further reduces log size using execution partitioning.
- **Winnower** [55] provides a storage-efficient provenance auditing framework for large clusters.
- **MCI** [68] proposes a reliable and efficient approach to restore fine-grained information flow among system events using dual execution (LDX).

While these techniques address different problems, they can be integrated into PROVDETECTOR to enhance its accuracy. Provenance is also used in network debugging. **Chen et al.** [38] proposed differential provenance to reason about differences compared to good and bad references. The same authors [37] also introduced **Secure Packet Provenance (SPP)**, which provides provenance on the Internet’s data plane, handling high data rates. **NoDoze** [56] is an automated threat alert triage system based on data provenance, ranking alerts from third-party threat detection systems (TDS) by the rarity of causal paths in their provenance graph. However, NoDoze cannot effectively extract the K rarest paths, as it enumerates all paths in the provenance graph. Additionally, it only provides anomaly scores to paths, aiding investigation but not systematically separating benign and malicious paths. PROVDETECTOR addresses these limitations, providing an end-to-end solution that automatically learns boundaries from training data using machine learning techniques, and does not require a TDS.

### Conclusion

In this paper, we present PROVDETECTOR, an anomaly detection approach that uses OS-level provenance graphs to detect stealthy impersonation malware. PROVDETECTOR employs a novel rareness-based path selection algorithm to identify causal paths in the provenance graph, representing potentially malicious behavior. These causal paths are then analyzed by a pipeline of a document embedding model and a novelty detection model to determine if the process is malicious. We evaluated PROVDETECTOR with 23 target programs using a system provenance dataset from an enterprise. The results show that PROVDETECTOR consistently achieves high precision and recall, demonstrating its effectiveness and practicality in detecting stealthy malware.

### Acknowledgements

We would like to thank the anonymous reviewers for their valuable feedback. This work was partially supported by NSF CNS 13-30491. Ding Li and Kangkook Jee are the corresponding authors. The views expressed in this material are those of the authors only.

### References

[1]–[107] (References listed as in the original text)

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.