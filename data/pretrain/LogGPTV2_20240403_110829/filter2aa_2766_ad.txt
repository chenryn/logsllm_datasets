I/DEBUG   (   73):          #05  pc 00053454  /system/lib/libdvm.so 
Since these crashes are not reliably reproducible, it is hard to say if they are all 
separate or a single bug, or even if they are ﬁxed or not, without further testing and 
analysis.
Results - Nokia N9
We also fuzzed the NFC stack on a Nokia N9 running MeeGo 1.2 Harmattan PR1.2 with 
the same approaches described above.
Protocol Layer
A total of 12,000 test cases were developed and tested against the low level NFC 
protocols, as described below.
Device
Type
Test 
cases
Results/notes
Nokia N9
Type 2 (UL)
4000
18 bytes of MiFare UL memory
MiFare 1k/4k
Cannot emulate at this time
Type 4 (DESFire)
4000
15 bytes of Capacity Container
ISO 14443 A-4 (PDU)
Nothing interesting to fuzz
Type 1 (Topaz)
Cannot emulate at this time
Type 3 (FelCa)
Cannot emulate at this time
LLCP - Connect
2000
19 bytes of information
LLCP - I
2000
13 bytes of header information
Application Layer
A total of 34852 test cases were performed against the Nokia N9.  See below for details.
Charlie Miller: Exploring the NFC Attack Surface 
Device
Type
Test 
cases
Results/notes
Nokia N9
NDEF - bitﬂip
9000
Mutation-based
NDEF - short text
1626
Generation-based
NDEF - short URI
538
Generation-based
NDEF - short SMS
1265
Generation-based
NDEF - short SP
3675
Generation-based
NDEF - short BT
1246
Generation-based
NDEF - long text
2440
Generation-based
NDEF - long vcard
15062
Generation-based
Crashes
No crashes were detected.  Nokia N9 stack FTW, or more likely, my method is ﬂawed in 
some manner.
NFC higher level code
So far we have considered the NFC stack responsible for communicating and obtaining 
NDEF messages from the outside world.  Clearly, this is an important part of the attack 
surface, but it is really just the ﬁrst piece of the puzzle.  What remains to be seen is 
what the mobile device does with the NDEF data when it receives it.  This section 
answers that question and sees what other components of the device are related to 
NFC and can be activated and used without user interaction.
Nexus S - Android 2.3.3
The ﬁrst device we reviewed was a Nexus S running Android 2.3.3.  As of now, there is 
no supported way to update a Nexus S with AT&T baseband to Android 4.  This device’s 
support of NFC is pretty basic.  Out of the box, NFC is enabled but doesn’t do a whole 
lot.  The device will process NFC data presented to it anytime the screen is on (even if 
the device is locked).
Charlie Miller: Exploring the NFC Attack Surface 
NFC intents are handled by the Tags application, see Figure 11, below.
Figure 11: Tags processing an NFC Smart Poster
This Java application just displays the contents but takes no real action.  If you tap on 
the URL, it will open up the application indicated (in this case Browser) with the included 
data, in this case a URL.  By default, the Tags application handles NFC data, but other 
applications can register for that intent as well.  When this happens, depending on the 
conﬁguration of the app, the new app either handles the NFC data instead of Tags or 
allows the user to choose which app to handle NFC data, as in Figure 12, below.
Charlie Miller: Exploring the NFC Attack Surface 
Figure 12: The user may choose which app to handle the NFC tag
The Tags application can display data from the following categories deﬁned in src/com/
android/apps/tag/message/NdefMessageParser.java in the Android source code:
• Text
• SMS
• Smart Poster
• Phone call
• Vtag
• URL
• Image
In general, outside of the NFC stack, there is not much on the attack surface of this 
Android phone.  Large portions of the NFC code are written in Java, only a small 
amount of the codebase is actually native code.
Galaxy Nexus - Android 4.0.1
The Galaxy Nexus is an Android phone running Ice Cream Sandwich.  It still has some 
of the same features as the Nexus S, but ICS introduced Android Beam, which greatly 
increases the attack surface visible through NFC.  Out of the box, the device has NFC 
enabled.  It will process NFC data any time the screen is on and the device is unlocked.
Charlie Miller: Exploring the NFC Attack Surface 
For some types of NDEF data, it is exactly the same as the the Nexus S running 
Gingerbread, using com.android.nfc to hand data off to com.google.android.tag to 
display to the user.  These types of data include:
• Text
• SMS
• Phone
• Image
However, some types of data that used to be handled by Tags are now handled by 
Android Beam.
Android Beam is a way for two NFC-enabled Android devices to quickly share data such 
as contacts, web pages, You Tube videos, directions, and apps, see [20].  One can 
determine which apps are enabled with Android Beam by searching the 
AndroidManifest.xml ﬁles to see which apps handle NFC intents.  
For example, looking at the Android Browser, we see:
The only apps that register for these types of intents are Browser, Contacts, and Tags.
When two devices are placed close to each other, if one of them is currently showing 
something that is “beamable”, the device will prompt the user if they want to send it, as 
seen in Figure 13, below.
Charlie Miller: Exploring the NFC Attack Surface 
Figure 13: Android asking a user to share the app they’re using, in this case Crime City
If the user chooses to beam it, the devices establish an LLCP connection and a simple 
NDEF message is passed from the device beaming to the other device.  The data is 
sent via Simple NDEF Exchange Protocol (SNEP) with a fallback to NDEF Push 
Protocol (NPP), see [17,18,21].  
In the end, however, the device does not act any differently whether a particular NDEF 
message is received via LLCP/NPP or simply read from a tag.  In other words, the 
magic of Android Beam has nothing to do with establishing NFC connections between 
devices but rather relies entirely on how the device is conﬁgured to handle different 
NDEF messages when they arrive.  What this means is that now instead of vtags and 
smart posters being processed by the Tags application, this data is now directly passed 
to the Contacts or Browser applications.  
Just to reiterate, this means that on ICS devices, if an attacker can get the device to 
process an NFC tag, they can get it to visit a web site of their choosing in the Browser 
with no user interaction.  Obviously, the Browser represents an extremely large attack 
surface, and in ICS, that attack surface is now available through NFC!
The Android Browser will parse at least the following formats, if not more:
Type
File format
Web related
html
css
js
xml
Charlie Miller: Exploring the NFC Attack Surface 
Type
File format
Image
bmp
gif
ico
jpg
wbmp
svg
png
Audio
mp3
aac
amr
ogg
wav
Video
mp4
3pg
Font
ttf
eot
The way that Android beam works for the other advertised services is simply through 
URL handlers.  In Android you can bring up Google Play (aka Android MarketPlace), the 
Maps application, YouTube, etc. through special URLs passed to the browser.  In other 
words, instead of the attack surface looking like Figure 1, it really looks like Figure 14, 
below.
Charlie Miller: Exploring the NFC Attack Surface 
Figure 14: Actual NFC attack surface if NFC can communicate with the browser
Galaxy Nexus - Android 4.1.1
We brieﬂy looked at a Galaxy Nexus running Jelly Bean.  It is mostly the same as an 
ICS device.  There are two small changes.  One is that it supports NFC simple 
Bluetooth pairing, like the Nokia N9.  However, it always prompts before allowing 
Bluetooth pairing over NFC.  Figure 15 shows an example of the prompt.
Charlie Miller: Exploring the NFC Attack Surface 
Figure 15: Android displays a prompt before establishing a Bluetooth Pairing via NFC
The other way Jelly Bean NFC differs is in regards to Android Beam.  A few more 
applications are conﬁgured to accept NFC intents.  The list is below.
• BrowserGoogle
• Contacts
• Gmail
• GoogleEarth
• Maps
• Phonesky
• TagGoogle
• YouTube
Otherwise, the Jelly Bean build performs identically as an ICS build with regards to 
NFC.
Nokia N9 - MeeGo 1.2 Harmattan PR1.3
The Nokia N9 is a phone running the MeeGo operating system.  Out of the box it does 
not have NFC enabled.  Once enabled, It will process NFC data anytime the screen is 
on.  If the device is locked, it will process low level NFC data, but handles high level 
data differently.  None of the attacks outlined later work if the N9 has the screen locked.  
Charlie Miller: Exploring the NFC Attack Surface 
Typically, when an NFC message is read, a process called conndlgs (Connectivity 
Dialogues) displays it to the screen, see Figure 16, below.  
Figure 16: conndlgs and its simple interface
The conndlgs process will display options to “view” or “send” which will open up the 
appropriate corresponding application or cancel.  For example, hitting view for text 
NDEFs opens up the notes application while hitting view for smart poster NDEFs opens 
up the web browser, called QTWebProcess. 
One exception to this rule is Bluetooth pairing.  When the device receives an NDEF 
Pairing request, it automatically attempts to pair to the requesting device.  Depending 
on user settings, this may or may not require user interaction, see Figure 17, below.  By 
default, pairing does not require user interaction.  Furthermore, if Bluetooth is disabled, 
when an NDEF Pairing request arrives, the device will enable Bluetooth for the user.  
Charlie Miller: Exploring the NFC Attack Surface 
Figure 17: If the “Conﬁrm sharing and connecting option” is enabled, it forces a prompt 
before Bluetooth sharing is performed
Nokia N9’s also have a similar mechanism to Android’s Beam called Content Sharing.  It 
is possible for one N9 to share data with another N9 over NFC (for small payloads) or 
over Bluetooth automatically set up via NFC.  Using this mechanism one can force a 
Nokia N9 to display images in Gallery, contacts in Contacts, videos in Videos, and 
documents such as .txt, .doc, .xls, .pdf, and so forth in Documents.  It does not seem to 
be possible to force it to open the browser but just about everything else is possible.  It 
does not require user interaction, even if the setting “Conﬁrm sharing and connecting” is 
set to on.  The thought of forcing the device to parse arbitrary PDF and MS Ofﬁce 
formats is almost as frightening as having it open up web pages!
One interesting thing is it doesn’t seem to be possible by default to share audio ﬁles via 
the Music app.  However, if you want to, you can share audio ﬁles by sharing them 
through the Videos app.  Just set a breakpoint at open64 in the obex-client process, call 
print strcpy($r0, "/home/user/MyDocs/Movies/mv.mp3")
hit continue and the audio ﬁle will be shared.
The following is a list of the ﬁle formats which can be shared though content sharing.