### Debug Information
```
I/DEBUG   (   73):          #05  pc 00053454  /system/lib/libdvm.so
```

### Analysis of Crashes
Given that these crashes are not consistently reproducible, it is challenging to determine whether they are distinct issues or a single bug. Further testing and analysis are required to ascertain if the issues have been resolved.

### Results - Nokia N9
We also tested the NFC stack on a Nokia N9 running MeeGo 1.2 Harmattan PR1.2 using the same approaches described above.

#### Protocol Layer
A total of 12,000 test cases were developed and tested against the low-level NFC protocols. The results are detailed below:

| Device | Type | Test Cases | Results/Notes |
|--------|------|------------|---------------|
| Nokia N9 | Type 2 (UL) | 4000 | 18 bytes of MiFare UL memory |
| Nokia N9 | MiFare 1k/4k | - | Cannot emulate at this time |
| Nokia N9 | Type 4 (DESFire) | 4000 | 15 bytes of Capacity Container |
| Nokia N9 | ISO 14443 A-4 (PDU) | - | Nothing interesting to fuzz |
| Nokia N9 | Type 1 (Topaz) | - | Cannot emulate at this time |
| Nokia N9 | Type 3 (FelCa) | - | Cannot emulate at this time |
| Nokia N9 | LLCP - Connect | 2000 | 19 bytes of information |
| Nokia N9 | LLCP - I | 2000 | 13 bytes of header information |

#### Application Layer
A total of 34,852 test cases were performed against the Nokia N9. The details are as follows:

| Device | Type | Test Cases | Results/Notes |
|--------|------|------------|---------------|
| Nokia N9 | NDEF - bitflip | 9000 | Mutation-based |
| Nokia N9 | NDEF - short text | 1626 | Generation-based |
| Nokia N9 | NDEF - short URI | 538 | Generation-based |
| Nokia N9 | NDEF - short SMS | 1265 | Generation-based |
| Nokia N9 | NDEF - short SP | 3675 | Generation-based |
| Nokia N9 | NDEF - short BT | 1246 | Generation-based |
| Nokia N9 | NDEF - long text | 2440 | Generation-based |
| Nokia N9 | NDEF - long vcard | 15062 | Generation-based |

**Crashes:** No crashes were detected. This could be due to the robustness of the Nokia N9 stack, or it may indicate a flaw in the testing method.

### Higher-Level NFC Code
So far, we have focused on the NFC stack responsible for communicating and obtaining NDEF messages from the outside world. This is an important part of the attack surface, but it is only the first step. The next question is what the mobile device does with the NDEF data once it receives it. This section explores other components of the device related to NFC and how they can be activated without user interaction.

### Nexus S - Android 2.3.3
The first device we reviewed was a Nexus S running Android 2.3.3. Currently, there is no supported way to update a Nexus S with AT&T baseband to Android 4. The deviceâ€™s support for NFC is basic. Out of the box, NFC is enabled but has limited functionality. The device will process NFC data whenever the screen is on, even if the device is locked.

**NFC Intents:**
NFC intents are handled by the Tags application, which displays the contents but takes no further action. If you tap on a URL, it opens the specified application (e.g., Browser) with the included data. By default, the Tags application handles NFC data, but other applications can register for the same intent. When this happens, the new app either handles the NFC data instead of Tags or allows the user to choose which app to use.

**Tags Application:**
The Tags application can display data from the following categories defined in `src/com/android/apps/tag/message/NdefMessageParser.java`:
- Text
- SMS
- Smart Poster
- Phone call
- Vtag
- URL
- Image

In general, outside of the NFC stack, there is not much on the attack surface of this Android phone. Most of the NFC code is written in Java, with only a small portion being native code.

### Galaxy Nexus - Android 4.0.1
The Galaxy Nexus runs Ice Cream Sandwich, which introduced Android Beam, significantly increasing the attack surface through NFC. Out of the box, the device has NFC enabled and will process NFC data whenever the screen is on and the device is unlocked.

**Android Beam:**
Android Beam allows two NFC-enabled Android devices to quickly share data such as contacts, web pages, YouTube videos, directions, and apps. You can determine which apps are enabled with Android Beam by searching the `AndroidManifest.xml` files for those that handle NFC intents.

**Apps Registering for NFC Intents:**
- Browser
- Contacts
- Tags

When two devices are placed close to each other, and one is showing something "beamable," the device prompts the user to send it. If the user chooses to beam it, the devices establish an LLCP connection and pass an NDEF message via Simple NDEF Exchange Protocol (SNEP) with a fallback to NDEF Push Protocol (NPP).

**Behavior:**
The device behaves the same whether an NDEF message is received via LLCP/NPP or read from a tag. This means that on ICS devices, an attacker can get the device to visit a website of their choosing in the Browser with no user interaction, making the Browser a significant attack surface.

**File Formats Parsed by Android Browser:**
- **Web Related:** HTML, CSS, JS, XML
- **Image:** BMP, GIF, ICO, JPG, WBMP, SVG, PNG
- **Audio:** MP3, AAC, AMR, OGG, WAV
- **Video:** MP4, 3GP
- **Font:** TTF, EOT

### Galaxy Nexus - Android 4.1.1
We briefly examined a Galaxy Nexus running Jelly Bean. It is mostly the same as an ICS device with two minor changes:
1. It supports NFC simple Bluetooth pairing, like the Nokia N9, but always prompts before allowing Bluetooth pairing over NFC.
2. More applications are configured to accept NFC intents, including:
   - BrowserGoogle
   - Contacts
   - Gmail
   - GoogleEarth
   - Maps
   - Phonesky
   - TagGoogle
   - YouTube

Otherwise, the Jelly Bean build performs identically to an ICS build regarding NFC.

### Nokia N9 - MeeGo 1.2 Harmattan PR1.3
The Nokia N9 runs the MeeGo operating system. Out of the box, NFC is not enabled. Once enabled, it processes NFC data whenever the screen is on. If the device is locked, it processes low-level NFC data but handles high-level data differently. None of the attacks outlined later work if the N9 has the screen locked.

**Connectivity Dialogues (conndlgs):**
When an NFC message is read, the conndlgs process displays options to "view" or "send," which open the appropriate application or cancel. For example, viewing text NDEFs opens the notes application, while viewing smart poster NDEFs opens the web browser (QTWebProcess).

**Bluetooth Pairing:**
When the device receives an NDEF Pairing request, it automatically attempts to pair with the requesting device. Depending on user settings, this may or may not require user interaction. By default, pairing does not require user interaction. If Bluetooth is disabled, the device will enable it when an NDEF Pairing request arrives.

**Content Sharing:**
Nokia N9 has a similar mechanism to Android's Beam called Content Sharing. It allows one N9 to share data with another N9 over NFC (for small payloads) or over Bluetooth automatically set up via NFC. Using this mechanism, one can force a Nokia N9 to display images in Gallery, contacts in Contacts, videos in Videos, and documents such as .txt, .doc, .xls, .pdf, and more in Documents. It does not seem possible to force it to open the browser, but almost everything else is possible. It does not require user interaction, even if the setting "Confirm sharing and connecting" is set to on.

**Sharing Audio Files:**
By default, it is not possible to share audio files via the Music app. However, you can share audio files by sharing them through the Videos app. Set a breakpoint at `open64` in the obex-client process, call `print strcpy($r0, "/home/user/MyDocs/Movies/mv.mp3")`, and continue to share the audio file.

**File Formats for Content Sharing:**
- Images: BMP, GIF, ICO, JPG, WBMP, SVG, PNG
- Audio: MP3, AAC, AMR, OGG, WAV
- Video: MP4, 3GP
- Documents: .txt, .doc, .xls, .pdf