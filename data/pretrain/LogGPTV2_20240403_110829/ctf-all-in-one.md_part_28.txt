hild process, may be RAW(True), NONE(False), REPR, HEX
-w, --write how to print out content written to
child process, may be RAW(True), NONE(False), REPR, HEX
-a, --ahead message to feed into stdin before in
teract
-b, --before don't do anything before reading tho
se input
-d, --decode when in interact mode, this option c
an be used to specify decode function REPR/HEX to input raw hex
bytes
-l, --delay write delay, time to wait before wri
te
zio 在 CTF 中的应用
何不把使用 pwntools 的写的 exp 换成 zio 试试呢xD。
305
2.4.3 metasploit
2.4.3 MetaSploit
306
2.4.4 binwalk
2.4.4 binwalk
Binwalk 介绍
安装
快速入门
实例
参考资料
Binwalk 介绍
Binwalk 是一个快速，易于使用的工具，用于分析，逆向工程和提取固件映像。 官
方给出的用途是提取固件镜像，然而，我们在做一些隐写类的题目的时候，
Binwalk 这个工具非常方便。
最好在 *nix 系统下使用，如果你的 Windows 版本是 1703 及以上，那么在 WSL 中
安装 binwalk 是个不错的选择。
安装
如果你是在 Ubuntu 下，那么使用下面的命令安装：
$ sudo apt install binwalk
快速入门
扫描固件
Binwalk 可以扫描许多嵌入式文件类型和文件系统的固件镜像，比如：
307
2.4.4 binwalk
$ binwalk firmware.bin
DECIMAL HEX DESCRIPTION
----------------------------------------------------------------
---------------------------------------------------
0 0x0 DLOB firmware header, boot partition: "d
ev=/dev/mtdblock/2"
112 0x70 LZMA compressed data, properties: 0x5D,
dictionary size: 33554432 bytes, uncompressed size: 3797616 byte
s
1310832 0x140070 PackImg section delimiter tag, little en
dian size: 13644032 bytes; big endian size: 3264512 bytes
1310864 0x140090 Squashfs filesystem, little endian, vers
ion 4.0, compression:lzma, size: 3264162 bytes, 1866 inodes, bl
ocksize: 65536 bytes, created: Tue Apr 3 04:12:22 2012
文件提取
可以使用 binwalk 的 -e 参数来提取固件中的文件：
$ binwalk -e firmware.bin
如果你还指定了 -M 选项，binwalk 甚至会递归扫描文件，因为它会提取它们：
$ binwalk -Me firmware.bin
如果指定了 -r 选项，则将自动删除无法提取的任何文件签名或导致大小为 0 的
文件：
$ binwalk -Mre firmware.bin
参考资料
308
2.4.4 binwalk
309
2.4.5 Burp Suite
2.4.5 Burp Suite
Burp Suite 介绍
安装
快速入门
参考资料
BurpSuite 介绍
Burp Suite 是一款强大的 Web 渗透测试套件，主要功能包括代理截获、网页爬
虫、Web 漏洞扫描、定制化爆破等，结合 Burp 的插件系统，还可以进行更加丰富
多样的漏洞发掘。
可以从官网获取到社区版的 Burp，社区版的 Burp 有一些功能限制，但是可以通过
其他渠道获取到专业版。Burp 使用 Java 语言编程，可以跨平台运行。
安装
在官网上选择适合自己版本的 Burp，官网提供多平台的安装包，在保证系统拥有
Java 环境的基础上，推荐直接下载 Jar file 文件。
下载完成后双击 burpsuite_community_v1.x.xx.jar 即可运行，其他安装方式遵循相
关指示安装即可。
快速入门
proxy
Burp 使用的第一步是实现浏览器到 Burp 的代理，以 Firefox 为例
选择 选项 ——> 高级 ——> 网络 ——> 连接 设置 ——>配置代理到本机的未占用
端口(默认使用 8080 端口)
在 Burp 的 proxy 下的 options 中查看代理监听是否开启，默认监听 127.0.0.1:8080
310
2.4.5 Burp Suite
在 Firefox 的代理状态下，访问 HTTP 协议的网页即可在Burp中截获交互的报文，
可以使用Firefox插件-Toggle Proxy来快速切换代理模式。
HTTPS 下的 proxy（老版本 Burp ）
新版 Burp（1.7.30）已经不需要单独导入证书即可抓包，而老版 Burp Https 协议
需要浏览器导入 Burp 证书才可正常抓包，具体操作见参考文档。
intruder
311
2.4.5 Burp Suite
intruder 常用于口令爆破，当然作为支持批量可编程的网页重发器，它还有许多有
趣的玩法。
使用步骤：
1. 在 proxy 页面拦截口令登录请求包
2. 在 http 报文显示栏点击右键，选择 “Send to Intruder”
3. 进入 intruder 选项栏，选择子选项栏 Positions，点击右边栏的 “Clear” 清空智
能识别的占位符
4. 重新选中需要爆破的部分，点击右边栏的 “Add” 添加新的占位符
5. 选择子选项栏 “Payloads”，添加爆破口令模式以及爆破文件
6. 在子选项栏 “Options” 中可以添加更加复杂的爆破结果匹配模式
7. 选择完成后，点击右上角的 “Start attack” 开始爆破
312
2.4.5 Burp Suite
repeater
repeater 用于单一报文的重复发包测试，在 proxy 界面报文包只能发送一次，通过
右键 “Send to Repeater” 可以在 repeater 界面反复发包测试。
参考资料
新手教程
Kali 中文网-Burp 教程
Burp 测试插件推荐
Burp 证书导入
313
2.4.6 Wireshark
2.4.6 Wireshark
314
2.4.7 Cuckoo Sandbox
2.4.7 Cuckoo Sandbox
简介
安装
参考资料
简介
安装
参考资料
https://cuckoosandbox.org/
315
三、分类专题篇
第三章 分类专题篇
Pwn
3.1.1 格式化字符串漏洞
3.1.2 整数溢出
3.1.3 栈溢出
3.1.4 返回导向编程（ROP）（x86）
3.1.5 返回导向编程（ROP）（ARM）
3.1.6 Linux 堆利用（一）
3.1.7 Linux 堆利用（二）
3.1.8 Linux 堆利用（三）
3.1.9 Linux 堆利用（四）
3.1.10 内核 ROP
3.1.11 Linux 内核漏洞利用
3.1.12 Windows 内核漏洞利用
3.1.13 竞争条件
3.1.14 虚拟机逃逸
Reverse
3.2.1 patch 二进制文件
3.2.2 脱壳技术（PE）
3.2.3 脱壳技术(ELF)
3.2.4 反调试技术（PE）
3.2.5 反调试技术（ELF）
3.2.6 指令混淆
Web
3.3.1 SQL 注入利用
3.3.2 XSS 漏洞利用
Crypto
Misc
Mobile
316
3.1.1 格式化字符串漏洞
3.1.1 格式化字符串漏洞
格式化输出函数和格式字符串
格式化字符串漏洞基本原理
格式化字符串漏洞利用
x86-64 中的格式化字符串漏洞
CTF 中的格式化字符串漏洞
扩展阅读
格式化输出函数和格式字符串
在 C 语言基础章节中，我们详细介绍了格式化输出函数和格式化字符串的内容。在
开始探索格式化字符串漏洞之前，强烈建议回顾该章节。这里我们简单回顾几个常
用的。
函数
#include 
int printf(const char *format, ...);
int fprintf(FILE *stream, const char *format, ...);
int dprintf(int fd, const char *format, ...);
int sprintf(char *str, const char *format, ...);
int snprintf(char *str, size_t size, const char *format, ...);
转换指示符
317
3.1.1 格式化字符串漏洞
字符 类型 使用
d 4-byte Integer
u 4-byte Unsigned Integer
x 4-byte Hex
s 4-byte ptr String
c 1-byte Character
长度
字符 类型 使用
hh 1-byte char
h 2-byte short int
l 4-byte long int
ll 8-byte long long int
示例
#include
#include
void main() {
char *format = "%s";
char *arg1 = "Hello World!\n";
printf(format, arg1);
}
printf("%03d.%03d.%03d.%03d", 127, 0, 0, 1); // "127.000.000.
001"
printf("%.2f", 1.2345); // 1.23
printf("%#010x", 3735928559); // 0xdeadbeef
printf("%s%n", "01234", &n); // n = 5
318
3.1.1 格式化字符串漏洞
格式化字符串漏洞基本原理
在 x86 结构下，格式字符串的参数是通过栈传递的，看一个例子：
#include
void main() {
printf("%s %d %s", "Hello World!", 233, "\n");
}
gdb-peda$ disassemble main
Dump of assembler code for function main:
0x0000053d : lea ecx,[esp+0x4]
0x00000541 : and esp,0xfffffff0
0x00000544 : push DWORD PTR [ecx-0x4]
0x00000547 : push ebp
0x00000548 : mov ebp,esp
0x0000054a : push ebx
0x0000054b : push ecx
0x0000054c : call 0x585 
0x00000551 : add eax,0x1aaf
0x00000556 : lea edx,[eax-0x19f0]
0x0000055c : push edx
0x0000055d : push 0xe9
0x00000562 : lea edx,[eax-0x19ee]
0x00000568 : push edx
0x00000569 : lea edx,[eax-0x19e1]
0x0000056f : push edx
0x00000570 : mov ebx,eax
0x00000572 : call 0x3d0 
0x00000577 : add esp,0x10
0x0000057a : nop
0x0000057b : lea esp,[ebp-0x8]
0x0000057e : pop ecx
0x0000057f : pop ebx
0x00000580 : pop ebp
0x00000581 : lea esp,[ecx-0x4]
0x00000584 : ret
End of assembler dump.
319
3.1.1 格式化字符串漏洞
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0x56557000 --> 0x1efc
EBX: 0x56557000 --> 0x1efc
ECX: 0xffffd250 --> 0x1
EDX: 0x5655561f ("%s %d %s")
ESI: 0xf7f95000 --> 0x1bbd90
EDI: 0x0
EBP: 0xffffd238 --> 0x0
ESP: 0xffffd220 --> 0x5655561f ("%s %d %s")
EIP: 0x56555572 (: call 0x565553d0 )
EFLAGS: 0x216 (carry PARITY ADJUST zero sign trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x56555569 : lea edx,[eax-0x19e1]
0x5655556f : push edx
0x56555570 : mov ebx,eax
=> 0x56555572 : call 0x565553d0 
0x56555577 : add esp,0x10
0x5655557a : nop
0x5655557b : lea esp,[ebp-0x8]
0x5655557e : pop ecx
Guessed arguments:
arg[0]: 0x5655561f ("%s %d %s")
arg[1]: 0x56555612 ("Hello World!")
arg[2]: 0xe9
arg[3]: 0x56555610 --> 0x6548000a ('\n')
[------------------------------------stack----------------------
---------------]
0000| 0xffffd220 --> 0x5655561f ("%s %d %s")
0004| 0xffffd224 --> 0x56555612 ("Hello World!")
0008| 0xffffd228 --> 0xe9
0012| 0xffffd22c --> 0x56555610 --> 0x6548000a ('\n')
0016| 0xffffd230 --> 0xffffd250 --> 0x1