if dom(s.event(t)) ≤ dom(τ )
otherwise
Critical Sectiontimepreemptionmax delaylhpriorityττThe above state transformers have the form:
Deﬁnition 11. Same High State.
State × N × T → State
and are completely formalised in the PVS sources [26]. Due
to space limitations we present here only an extract of the
end action transformer.
Deﬁnition 8. End Action.
end action(s, t, τ ) :=
If s.ts(τ ) 6= inactive ∧ s.rem time = 0 ∧
s.rem actions(τ ) 6= hi
Then
Cases s.rem actions(τ ) Of
run(time span) :
s \ ts(τ ) := runnable,
rem actions(τ ) := tail (s.rem actions(τ ))
rem time(τ ) := time span,
block (time span) :
s \ ts(τ ) :=
rem actions(τ ) := tail (s.rem actions(τ ))
rem time(τ ) := time span
if ptrans (τ )
otherwise
blocked
 cm blocked
Else
...
Endif
where t is the point in time for which end action should be
evaluated.
If the current action of this thread has ﬁnished
(s.rem time(τ ) = 0), the presented part of end action se-
lects the following action in s.rem actions(τ )(provided more
actions remain for this period) and depending on this action
adjusts the thread state accordingly.
In particular we set
the thread to cm blocked if the thread blocks and ptrans (τ )
holds.
The state transformers are invoked for each thread in
the above order (i.e., σ := deadline ◦ release ◦ end action ◦
next action) for each thread in the recursively deﬁned state
transformer dispatch step:
Deﬁnition 9. Dispatch Step.
 σ(s, t, τi)
dispatch step(s, t, τi) :=
if i = 0
σ(dispatch step(s, t, τi−1), t, τi) otherwise
This step is in turn invoked recursively for each point in time
starting from an initial state s0:
Deﬁnition 10. Dispatch.
 dispatch step(s0, t, τmax)
dispatch(s0, t) :=
if t = 0
dispatch step(dispatch(s0, t − 1), t, τmax) otherw.
Thus, our main theorem stating conﬁdentiality is
Theorem 1. Conﬁdentiality.
∀τi ∈ T, t ∈ N, s0.
output(dispatch(s0, t), τi, t) =
output(dispatch(purge(s0, τi), t), τi, t)
The proof is straightforward with help of the following pred-
icate and by induction over all points in time t and over all
thread indices i. We proved this predicate to be an invariant
of our scheduler with a similar induction over t and i:
same high state(s, sp)(τ ) := ∀τ0 ∈ Thigh (τ ).
If ptrans (τ0)Then
s.rem wct(τ0) = sp.rem wct(τ0)∧
(s.ts(τ0) = ready ∨ s.ts(τ0) = cm blocked ) ⇔
(sp.ts(τ0) = ready ∨ sp.ts(τ0) = cm blocked )∧
s.ts(τ0) 6= blocked ∧ sp.ts(τ0) 6= blocked
Else
dyn(s, τ0) = dyn(sp, τ0)
Endif
where sp is the purged state of s and dyn(s, τ ) denotes the
entire dynamic state of τ (i.e., s.ts(τ ) plus all the remaining
times and actions s.rem ∗).
Deﬁnition 11 formalises the following proposition on the dy-
namic thread state of those threads τ0 which have a higher
priority than τ : Provided ¬ptrans (τ0) holds, the dynamic
state is the same in the original state s and in the purged
state sp. Otherwise, if the countermeasure predicate
ptrans (τ0) holds, at least the remaining wct is the same in s
and in sp and either in both states or in none of the two,
the scheduler considers these threads as if they were ready
(i.e., s.ts(τ0) = ready or s.ts(τ0) = cm blocked ; sp.ts respec-
tively).
It follows that threads for which this predicate holds pro-
duce the same output. Thus, our main theorem holds be-
cause this predicate is an invariant.
6. TIMELY ISOLATION OF
NONINTERFERING THREADS
A consequence of the arguments we gave in the context
of unauthorised information ﬂows is that in our system, the
precise points in time when a thread τ may run cannot be
aﬀected by the actions of a thread τ from which τ must not
receive information (i.e., for which dom(τ ) (cid:2) dom(τ ) holds).
Our system therefore isolates time wise the thread τ from
the thread τ0.
Commercial time-partitioning systems such as
LynxOS [16] typically implement a hierarchical ﬁxed-priority
scheduler inside their partitions to support Posix threads.
To achieve the above kind of timely isolation between τ and
τ0 they do, however, rely on the underlying partition sched-
uler and schedule both threads in diﬀerent partitions. With
our solution, this hierarchical approach is no longer nec-
essary because our countermeasure can be used to timely
isolate threads directly with the ﬁxed-priority scheduler.
7. REAL-TIME GUARANTEES
All previously reported results hold for arbitrary thread
sets that are scheduled on top of a budget-enforcing ﬁxed-
priority scheduler. In the following discussion on preserved
real-time guarantees, we restrict ourselves only to strictly
periodic thread sets. We will partially lift this restriction in
Section 8.
Remember, strictly-periodic threads are those with equi-
distant release points πi,k and identical budgets for each
release. In the following, we omit the release index k. Fur-
thermore, let Πi = πi,k+1 − πi,k for all k.
In a real-time system, it is crucial that all hard real-time
threads meet their deadlines. For this reason, an admis-
sion test is performed which decides before the thread set
is executed whether each thread will meet all its deadlines.
Probably the most popular result is Liu and Layland’s cri-
terion [14] which says that a set of n periodic threads can
be scheduled by the rate monotonic (RM) policy if
Σ
1≤i≤n
wcet i
Πi
≤ n · (2
1
n − 1).
Here is assumed that Πi = di for all i, that all the threads
never block, and the threads are ordered by increased pe-
riods. Lehoczky et al. proposed the time-demand analysis
method [12] that provides a suﬃcient and necessary schedu-
lability test. On the other hand, Sha et al. [23] included
blocking times showing that the thread set is schedulable by
the RM priority assignment if
∀k ∈ {1, ...n}. Σ
1≤i≤k
wcet i
Πi
+
bk
Πk
≤ k · (2
1
k − 1)
where bk is an upper bound on the duration of blocking
that the kth thread may experience due to resources held
by lower priority threads. In this section, we follow Liu [11]
to determine the diﬀerent blocking times depending on the
diﬀerent blocking reasons.
In addition to the usual inﬂuence of high-priority threads
on the timing behaviour of lower-prioritised threads, our
modiﬁed scheduler may prohibit ready lower-prioritised
threads from running because it switches to the idle thread
to avoid information leakage.
In the worst case, a thread
τl is prohibited from running during each blocking time bh
of all higher prioritised threads τh for which the counter-
measure is applied. We call this time the “prohibition time”
bl(pr) of a thread τl. It holds:
Equation 1. Prohibition Times.
bl(pr) =
Σ
τh∈Tptrans ,high (τl)
d Πh
Πl
ebh
with Tptrans ,high (τl) = {τh ∈ Thigh (τl)|ptrans (τh)} as intro-
duced in Section 4.1.
Obviously, prohibiting threads from running increases the
idle time. We quantify the increase in idle time by the pro-
hibition time of the lowest-prioritised thread bidle(pr).
To assure that the thread set remains schedulable on the
modiﬁed scheduler, we reuse a common admission test for an
unmodiﬁed scheduler and take into account the prohibition
times as an additional blocking term.
In some situations,
a thread set must be rejected when considering prohibition
times that would otherwise have been accepted by an accep-
tance test for an unmodiﬁed scheduler.
Consequently, this results in a lower utilisation compared
to the utilisation of this unmodiﬁed scheduler Uorig. Pre-
cisely, the maximum utilisation which can be achieved due
to our modiﬁcation is U = Uorig − bidle(pr)
.
Now we investigate how well-behaving real-time threads
are constrained by our countermeasures. For this, we com-
pare an admission with and without prohibition times and
relate these results to a system that always enforces worst-
case behaviour (e.g., a time-partitioning scheduler 3).
3A time-partitioning scheduler computes for each thread τi
ﬁxed, recurring and nonoverlapping time intervals of size
wcet i + wcbt i. Because no two threads are active at the
same time, the blocking times of one thread cannot be used
to run another thread.
Πidle
7.1 Blocking due to Self Suspension
Threads may block due to self suspension (e.g., in a block-
ing systemcall when they wait for the completion of asyn-
chronous I/O). We assume that an upper bound xi on the
time a thread τi blocks due to self suspension is known a-
priori.
Figure 6: Blocking due to self suspension. τl misses
its deadline because the gray-shaded part does not
ﬁt.
Liu [15] (pg. 165 ﬀ) gives an upper bound bl(ss) on the
blocking time due to self suspension:
Equation 2. Blocking due to Self Suspension.
bl(ss) = xl +
Σ
τh∈Thigh (τl)
min(wcet h, xh)
We illustrate this formula using the example in Figure 6.
A low-priority thread τl may consume the time the higher
prioritised thread τh suspends itself. For example, τl runs
in τh’s second period independent of when τh suspends itself
during this period. The blocking time origins from τh delay-
ing its execution prior to the period of τl. Consequently τh
consumes additional time in the interval of τl’s period. This
additional time is at most the minimum of the worst-case
execution time of τh and its maximum self-suspension time
xh. The latter case is shown in the ﬁgure.
Because malicious and erroneous threads can signal infor-
mation both by the amount of time they self suspend and
through the point in time when they self suspend we have
to prevent low-priority threads from running during the en-
tire time in which such a thread could run or suspend itself.
Attributing the prohibition times of these threads to the
blocking time due to self suspension, we get the blocking
time bcm
(ss) for our countermeasure.
l
Equation 3. Blocking Time Self Suspension Countermea-
sure
bcm
l
(ss) = xl +
Σ
min(wcet h, xh) +
τh∈T¬ptrans ,high (τl)
exh
Σ
d Πh
τh∈T ptrans ,high(τl)
Πl
The second sum in this formula is the prohibition time bl(pr)
if we consider self suspension as the only reason for blocking.
Because the maximum self-suspension time must be con-
sidered for every period of higher prioritised threads rather
than only once and in the minimum with wcet, an admission
test for an unmodiﬁed scheduler could accept more thread
sets.
Compared to a scheduler that always enforces the worst-
case behaviour, our approach accepts more thread sets be-
cause the prohibition times need only to be considered for
xhxhxhprioritytimelhττthose threads for which the countermeasure must be applied.
Threads authorised to send to other (respectively lower-
prioritised) threads remain unaﬀected. A realistic example
in which this situation arises are real-time drivers (e.g., disk,
network, sensor, etc.) that read conﬁdential data only in its
encrypted form. Such a real-time driver can be classiﬁed
with the lowest security class ⊥. As these drivers typically
have short periods, rate monotonic scheduling would assign
them a high priority. While the modiﬁed scheduler leaves
the driver unrestricted, a time-partitioning scheduler must
execute it in a separate partition of the length wcet i + xi to
prevent leakage from secret applications to the low-classiﬁed
driver. A time-partitioning scheduler can therefore not ex-
ploit the self-suspension time to schedule additional threads.
7.2 Blocking due to Nonpreemptibility
To determine the maximum blocking time due to nonpre-
emptibility we need to know how many times Kh a thread τh
suspends itself after it starts and the duration of the largest
nonpreemptible critical section max delay low (τh) (Deﬁni-
tion 4).
Thus, the blocking time due to nonpreemptibility is [15]:
Equation 4. Blocking Time due to Nonpreemptibility.
bh(np) = (Kh + 1) max delay low (τh)
A thread τh for which we also apply our ﬁrst countermea-
sure of switching to the idle thread (i.e., for which ptrans (τh)
holds) can be blocked due to nonpreemptibility only before
it starts. Thus we get:
Figure 7: Self suspension of τh allows τl to release
the resource unless the countermeasure prevents τl
from running.
is no longer possible when the countermeasure switches to
the idle thread instead. Not having investigated the secu-
rity of resource allocation protocols yet, we propose to use
nonpreemptible critical sections instead.
In a multiprocessor system, nonpreemptible critical sec-
tions and self suspension can be combined to implement
preemption-aware critical sections [9]. Whenever the re-
source is held by a thread on another processor a requesting
thread suspends itself so that other threads could be sched-
uled on its CPU when the countermeasure is not applied.
With acquiring the resource, the thread signals the sched-
uler not to preempt it. Thus, the resource is either free or
held on another processor and the switch to the idle thread
does not hinder any thread to free the resource. Figure 8
illustrates this locking scheme.
Equation 5. Blocking Time due to Nonpreemptibility
Countermeasure.
 max delay low (τh)
bh(np) =
(Kh + 1) max delay low (τh) otherwise
if ptrans (τh)
In theory, our approach could accept more thread sets than
the unmodiﬁed scheduler when Kh · max delay low (τh) is
large compared to the self suspension time xh.
In prac-
tice, nonpreemptible critical sections are short and this ef-
fect could not be seen. Still an admission for our modiﬁed