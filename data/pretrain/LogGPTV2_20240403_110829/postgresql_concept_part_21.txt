Server
LIBPQ
Queries
Results
Figure17.3: LIBPQdataflow
17.1 C Language Interface (LIBPQ)
LIBPQ is thenativeC interfaceto POSTGRESQL. Psql and most other interfacesuseit internally
fordatabaseaccess.
Figure 17.3 shows how LIBPQ is used. The application code communicates with the user’s
terminalandusesLIBPQfordatabaseaccess. Itturn, LIBPQsendsqueriestothedatabaseserver
andretrievesresults.
Figure17.4 showsthesampleprogramusingLIBPQtoaccessPOSTGRESQL.Thesamplepro-
gramperformsthefollowingtasks:
• Establishadatabaseconnection
• Promptforandreadthestatecode
• FormanappropriateSQLquery
• PasstheSQLquerytoLIBPQ
• HavePOSTGRESQLexecutethequery
• RetrievethequeryresultsfromLIBPQ
• Displaytheresultstotheuser
• Terminatethedatabaseconnection
All interactions with the database are accomplished via LIBPQ functions. The following LIBPQ
functionsarecalledbythesampleprogram:
190 CHAPTER17. PROGRAMMINGINTERFACES
/*
* libpq sample program
*/
#include 
#include 
#include "libpq-fe.h" /* libpq header file */
int
main()
{
char state_code[3]; /* holds state code entered by user */
char query_string[256]; /* holds constructed SQL query */
PGconn *conn; /* holds database connection */
PGresult *res; /* holds query result */
int i;
conn = PQconnectdb("dbname=test"); /* connect to the database */
if (PQstatus(conn) == CONNECTION_BAD) /* did the database connection fail? */
{
fprintf(stderr, "Connection to database failed.\n");
fprintf(stderr, "%s", PQerrorMessage(conn));
exit(1);
}
printf("Enter a state code: "); /* prompt user for a state code */
scanf("%2s", state_code);
sprintf(query_string, /* create an SQL query string */
"SELECT name \
FROM statename \
WHERE code = ’%s’", state_code);
res = PQexec(conn, query_string); /* send the query */
if (PQresultStatus(res) != PGRES_TUPLES_OK) /* did the query fail? */
{
fprintf(stderr, "SELECT query failed.\n");
PQclear(res);
PQfinish(conn);
exit(1);
}
for (i = 0; i 
#include 
#include  /* libpgeasy header file */
int
main()
{
char state_code[3]; /* holds state code entered by user */
char query_string[256]; /* holds constructed SQL query */
char state_name[31]; /* holds returned state name */
connectdb("dbname=test"); /* connect to the database */
printf("Enter a state code: "); /* prompt user for a state code */
scanf("%2s", state_code);
sprintf(query_string, /* create an SQL query string */
"SELECT name \
FROM statename \
WHERE code = ’%s’", state_code);
doquery(query_string); /* send the query */
while (fetch(state_name) != END_OF_TUPLES) /* loop through all rows returned */
printf("%s\n", state_name); /* print the value returned */
disconnectdb(); /* disconnect from the database */
return 0;
}
Figure17.5: LIBPGEASYsampleprogram
17.5. COMPILINGPROGRAMS 193
/*
* ecpg sample program
*/
#include 
EXEC SQL INCLUDE sqlca; /* ecpg header file */
EXEC SQL WHENEVER SQLERROR sqlprint;
int
main()
{
EXEC SQL BEGIN DECLARE SECTION;
char state_code[3]; /* holds state code entered by user */
char *state_name = NULL; /* holds value returned by query */
char query_string[256]; /* holds constructed SQL query */
EXEC SQL END DECLARE SECTION;
EXEC SQL CONNECT TO test; /* connect to the database */
printf("Enter a state code: "); /* prompt user for a state code */
scanf("%2s", state_code);
sprintf(query_string, /* create an SQL query string */
"SELECT name \
FROM statename \
WHERE code = ’%s’", state_code);
EXEC SQL PREPARE s_statename FROM :query_string;
EXEC SQL DECLARE c_statename CURSOR FOR s_statename;/* DECLARE a cursor */
EXEC SQL OPEN c_statename; /* send the query */
EXEC SQL WHENEVER NOT FOUND DO BREAK;
while (1) /* loop through all rows returned */
{
EXEC SQL FETCH IN c_statename INTO :state_name;
printf("%s\n", state_name); /* print the value returned */
state_name = NULL;
}
free(state_name); /* free result */
EXEC SQL CLOSE c_statename; /* CLOSE the cursor */
EXEC SQL COMMIT;
EXEC SQL DISCONNECT; /* disconnect from the database */
return 0;
}
Figure17.6: ECPGsampleprogram
194 CHAPTER17. PROGRAMMINGINTERFACES
/*
* libpq++ sample program
*/
#include 
#include  // libpq++ header file
int main()
{
char state_code[3]; // holds state code entered by user
char query_string[256]; // holds constructed SQL query
PgDatabase data("dbname=test"); // connects to the database
if ( data.ConnectionBad() ) // did the database connection fail?
{
cerr << "Connection to database failed." << endl
<< "Error returned: " << data.ErrorMessage() << endl;
exit(1);
}
cout << "Enter a state code: "; // prompt user for a state code
cin.get(state_code, 3, ’\n’);
sprintf(query_string, // create an SQL query string
"SELECT name \
FROM statename \
WHERE code = ’%s’", state_code);
if ( !data.ExecTuplesOk(query_string) ) // send the query
{
cerr << "SELECT query failed." << endl;
exit(1);
}
for (int i=0; i < data.Tuples(); i++) // loop through all rows returned
cout << data.GetValue(i,0) << endl; // print the value returned
return 0;
}
Figure17.7: LIBPQ++sampleprogram
17.6. ASSIGNMENTTOPROGRAMVARIABLES 195
Interface include files are typically installed in /usr/local/pgsql/include. The compiler flag
-I is needed to ensure that the compiler searches the specified directory for include files—for
example,-I/usr/local/pgsql/include.
Interface libraries are typically installed in /usr/local/pgsql/lib. The compiler flag -L is
needed to ensure that the compiler searches the directory for library files—for example, -
L/usr/local/pgsql/lib.
Thecompilerflag-lisneededforthecompilertolinktoaspecificlibraryfile. Tolinktolibpq.a
orlibpq.so,theflag-lpqisneeded. Becausethe-lflagknowsthatthefilebeginswithlib,-llibpq
isnotcorrect—just-lpq.
Thecommandstocompilemyappforvariousinterfacesarelistedbelow:
LIBPQ cc -I/usr/local/pgsql/include -o myapp myapp.c -L/usr/local/pgsql/lib -lpq
LIBPGEASY cc -I/usr/local/pgsql/include -o myapp myapp.c -L/usr/local/pgsql/lib -lpgeasy
ECPG ecpg myapp.pgc
cc -I/usr/local/pgsql/include -o myapp myapp.c -L/usr/local/pgsql/lib -lecpg
LIBPQ++ cc++ -I/usr/local/pgsql/include -o myapp myapp.cpp -L/usr/local/pgsql/lib -lpq++
Notice that each interface has its own library. ECPG requires the ecpg preprocessor to be run
beforecompilation. LIBPQ++requirestheuseofadifferentcompiler.
17.6 Assignment to Program Variables
POSTGRESQL is a network-capable database. That is, the database server and user application
can be run on different computers. Because character strings have the same representation on
all computers, they are used for communication between the user program and databaseserver.
Queries are submitted as character strings, and results are passed back as character strings.
Thisapproachprovidesreliablecommunicationevenwhenthetwocomputersinvolvedarequite
different.
ThesampleprogramsinthischapterperformSELECTsonaCHAR(30)column. Becausequery
results are returned as character strings, returned values can be assigned directly to program
variables. Incontrast, noncharacterstringcolumns, likeINTEGERandFLOAT,cannotbeassigned
directlytointegerorfloating-pointvariables. Aconversionmightberequiredinstead.
For example, when you are using LIBPQ or LIBPQ++, a SELECT on an INTEGER column does
not return an integerfrom the database, but rathera characterstring that must be convertedto
anintegerbythe application. An INTEGERisreturnedasthe string’983’ ratherthan theinteger
value 983. To assign this value to an integer variable, you use the C library function atoi()—for
example,var = atoi(colval).
OneexceptioninvolvesBINARYcursors,whichreturnbinaryrepresentationsofcolumnvalues.
You can assign results from BINARY cursors directly to program variables. However, because
196 CHAPTER17. PROGRAMMINGINTERFACES
theyreturncolumnvaluesinbinaryformat,boththeapplicationandthedatabaseservermustbe
runningonthesamecomputeroratleastoncomputerswiththesameCPUarchitecture. Seethe
DECLAREmanualpageformoreinformationonBINARYcursors.
LIBPGEASYusesfetch() to return valuesdirectlyinto program variables. This function should
placeresultsintocharacterstringvariablesoruseBINARYcursorsifpossible.
ECPG automatically converts data returned by POSTGRESQL to the proper format before as-
signmenttoprogramvariables.
The interpreted languages covered later in this chapter have type-less variables, so they do
nothavethisproblem.
17.7 ODBC
ODBC (Open Database Connectivity) is an interface used by some applications and application-
building tools to access SQL databases. This middleware layer is not meant for programming
directly,butratherforcommunicatingwithotherapplications.
The ODBC source code is located in pgsql/src/interfaces/odbc. It can be compiled on both
Unixandnon-Unixoperatingsystems.
17.8 Java (JDBC)
Figure17.8showsaJavaversionofthesameapplication.
The interface’s source code is located in pgsql/src/interfaces/jdbc. Once the interface is
compiled,thefilepostgresql.jar shouldbecopiedtothedirectorycontainingtheotherjarfiles.
Thefullpathnameofpostgresql.jarmustthenbeaddedtotheCLASSPATHenvironmentvariable.
Java programs are compiled using javac and run using java. Java is both a compiled and
interpretedlanguage. Itiscompiledforspeed,butinterpretedwhenexecutedsothatanycomputer
canrunthecompiledprogram.
17.9 Scripting Languages
Up to this point, the interfaces discussed have used compiled languages. Compiled languages
requireuserprogramstobecompiledintoCPUinstructions.
The remaining interfaces are scripting languages. Scripting languages execute more slowly
thancompiledlanguages,butofferseveralbenefits:
17.9. SCRIPTINGLANGUAGES 197
/*
* Java sample program
*/
import java.io.*;
import java.sql.*;
public class sample
{
Connection conn; // holds database connection
Statement stmt; // holds SQL statement
String state_code; // holds state code entered by user
public sample() throws ClassNotFoundException, FileNotFoundException, IOException, SQLException
{
Class.forName("org.postgresql.Driver"); // load database interface
// connect to the database
conn = DriverManager.getConnection("jdbc:postgresql:test", "testuser", "");
stmt = conn.createStatement();
System.out.print("Enter a state code: "); // prompt user for a state code
System.out.flush();
BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
state_code = r.readLine();
ResultSet res = stmt.executeQuery( // send the query
"SELECT name " +
"FROM statename " +
"WHERE code = ’" + state_code + "’");
if (res != null)
while(res.next())
{
String state_name = res.getString(1);
System.out.println(state_name);
}
res.close();
stmt.close();
conn.close();
}
public static void main(String args[])
{
try {
sample test = new sample();
} catch(Exception exc)
{
System.err.println("Exception caught.\n" + exc);
exc.printStackTrace();
}
}
}
Figure17.8: Javasampleprogram