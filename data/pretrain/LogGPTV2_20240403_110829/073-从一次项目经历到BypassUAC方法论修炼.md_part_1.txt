从一次项目经历到BypassUAC方法论修炼
原创六号刃部 酒仙桥六号部队
2020-09-02原文
这是 酒仙桥六号部队 的第 73 篇文章。
全文共计3660个字，预计阅读时长12分钟。
背景
在某次渗透测试的过程中获取到一个普通用户的权限，由于某些操
作需要域管理员的权限，当时用了一些网上公开的BypassUAC方法
，在实际利用的过程中效果并不是太好。
在项目结束后想着学习一下BypassUAC方法，以便之后的项目中不
依赖别人公布出来的、大家都在用的BypassUAC方法。
毕竟别人做好后，来投喂，不如我们自己去捕猎，去挖掘过UAC的方
法。本文记录的是通过COM组件的方法BypassUAC过程，这是一个方
法论修炼的记录，掌握其原理，我们就可以去创造属于我们自己的
独家BypassUAC方法。
基础介绍
在正式开始之前，我们需要对UAC的工作原理有一些简单了解。
UAC 是 微 软 Microsoft Windows
Vista以后版本引入的一种安全机制。其原理是通知用户是否对应用
程序使用硬盘驱动器和系统文件授权，以达到帮助阻止恶意程序（
有时也称为“恶意软件”）损坏系统的效果。
通过UAC，应用程序和任务可始终在非管理员帐户的安全上下文中运
行 ， 除 非 管 理 员 特 别 授 予 管 理 员 级 别 的 系 统 访 问 权 限 。 UAC
可以阻止未经授权的应用程序自动进行安装，并防止无意中更改系
统设置。
下图清晰描述了如何根据是否启用UAC以及应用程序是否具有UAC清
单来运行应用程序。
在 开 启 了 UAC 之 后 ， 如 果 用 户 是 标 准 用 户 ， Windows
会给用户分配一个标准Access Token。
如果用户以管理员权限登陆，会生成两份访问令牌，一份是完整的
管理员访问令牌（Full Access Token），一份是标准用户令牌。
具体的表现形式是如下图，当我们需要其它特权的时候，会弹出窗
口，询问你是否要允许以下程序对此计算机更改？如果你有完整的访问
令牌（即，你以设备管理员的身份登录，或者你属于管理员组），
则可以选择是，然后继续进行。但是，如果已为你分配了标准的用户
访问令牌，则会提示你输入具有特权的管理员的凭据。
下列是需要授权的行为或者动作，并非逐一的过程：
 配置Window Update
 增加或删除用户账户
 改变用户的账户类型
 改变UAC设置
 安装ActiveX
 安装或移除程序
 设置家长控制
 将文件移动或复制到Prigram Files或Windwos目录
 查看其它用户文件夹
UACEM
本文使用到的项目UACEM，UACEM项目地址
UACME 项 目 总 结 了 50 多 种 绕 过 UAC 的 方 式 ， 并 且 列 出 具 备 auto-
elevate能力的UAC白名单程序或接口。
UACME项目中的利用方式可以分为两大类：
1、各类UAC白名单程序的DLL劫持（Dll Hijack）；
2、各类提升权限的COM接口利用（Elevated COM interface）。
项目的主程序为Akagi，其中包含了所有的method，使用vs2019本
地 编 译 后 可 以 使 用 akagi32 41 或 者 akagi64
41启动程序，41这个指的是README中描述的方法索引，运行后可以
直接得到管理员权限的cmd窗口。
本篇则是利用Akagi和Yuubari这两个项目来学习如何利用COM接口
进行BypassUAC。
可被利用的COM interface类型
以列表中的41为例：
Author: Oddvar MoeType: Elevated COM interface
Method: ICMLuaUtil
Target(s): Attacker defined
Component(s): Attacker defined
Implementation: ucmCMLuaUtilShellExecMethod
Works from: Windows 7 (7600)
Fixed in: unfixed 🙈
How: -
这个方法的目标接口是，ICMLuaUtil，对应Akagi项目中具体实现
函数为ucmCMLuaUtilShellExecMethod，在项目中的methods/a
pi0cradle.c文件中可以找到该方法的定义：
观察发现这里利用的是CMSTPLUA组件的ICMLuaUtil接口。
以管理员权限打开，在Registry中打开CLSIDs，然后输入cmstpl
ua搜索，即可快速定位到该组件。
右键可以查看cmstplua组件的Elevation的一个属性，这里的Ena
bled 跟 Auto
Approval现实的都为True,表示这个组件可以用来绕过UAC认证，
这是第一点。
如果需要达到成功利用的条件，那么第二点，目标接口ICMLuaUti
，需要一个可以执行命令的地方，我们可以把鼠标放在ICMLuaUtil
上可以看到接口对应的二进制文件为cmlua.dll。
虚函数偏移为cmlua.dll+0x6360，在这个时候我们通过IDA打开系
统文件（c:\windows\system32\cmlua.dll)。
可以看到ICMLuaUti接口的虚函数表。
最后我们确定一下，通过双击看它的反汇编代码，就可以看到一个
关键的call调用，在IDA中看到ShellExec这个函数调用了ShellE
xecuteExW这个Windows API实现了命令执行。
通过上面的操作分析，要实现BypassUAC执行命令的COM组件，我们
可以总结为两点。
1. Elevation属性中的Enabled跟Auto Approval为True；
2. COM组件中的接口存在可以执行命令，如ICMLuaUtil的ShellE
xec。
寻找可利用的COM组件
接下来我们需要快速的寻找到具备这两点的COM组件，那么怎么去找
呢？一种方法是使用上面的oleviewdotnet，一个一个的去看，非
常麻烦和不高效。
最好的方式其实是通过编程实现对你当前机器所有的COM组件进行搜
索，然后去找这个相应属性，目前已经有这样的轮子了，我们可以
直接用。
这里使用UACME项目中的Yuubari，用vs2019打开后，在右边的Yu
ubari将其设为启动项,随后在生成中选择配置管理器，设置releas
e模式，这里要注的一点是，一定要把Debug模式切换成release模
式。
以上选择完成之后，会在你所存放Yuubari项目目录下生成一个out
put\x64\Release的目录，在这个目录下有编译好的二进制文件Ua
cInfo64.exe，运行UacInfo64.exe，会在同目录下生成一个uac
18363.log文件，记录其输出的结果。
使用UacInfo64.exe得到的不光是我们需要的COM组件，它会把一
些其他的信息一起寻找并输出，只需要UacInfo64.exe就可以把系
统上所有支持auto-elevate的都找出来。
这里使用之前提到的cmstplua进行搜索，3e5fc7f9-9a51-4367-
9063-a120244fbec7 ， 可 以 看 到 Autoelevated COM
objects组件的。
调用ICMLuaUtil.ShellExec执行命令
当我们找到合适的可以利用的COM组件后，下一步就是写代码。我们
利用的关键点是创建这个COM组件的进程是需要被系统可信任的进程
。
利用系统的可信进程去进行调用，可以选择的有rundll32.exe、e
xplorer.exe等，我们只需要把创建COM组件的代码以及执行你想
执行的命令代码，放到可信任进程里面去执行，这样就可以Bypass
UAC。
放到可信任进程里面去执行有两种方式，第一种是我们把它做成一
个dll,然后使用undll32.exe 去调用。
DLL调用
直接使用UACME中的代码摘出来，然后在VC2019中新建一个工程，
如下是定义接口的声明。
就在这里面通过创建COM组件，然后调用这个COM组件的ShellExec
方法执行你想执行的命令，通过这样的方式就可以了。