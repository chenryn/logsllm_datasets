depending on the specific trap. A system call exception may end up in the trap handler if there is
nothing for the system call to do except generate a trap. The trap handler may jump to the interrupt
handler if it finds that it is running on an interrupt stack. thandler() eventually calls the higher-level
TRap() function [osfmk/ppc/trap.c] to process traps.
// osfmk/ppc/trap.c
struct savearea *
trap(int trapno, struct savearea *ssp, unsigned int dsisr, addr64_t dar)
{
int exception;
...
exception = 0;
...
if (/* kernel mode */) {
// Handle traps originating from the kernel first
// Examples of such traps are T_PREEMPT, T_PERF_MON, T_RESET
// Various traps should never be seen here
// Panic if any of these traps are encountered
...
} else {
/* user mode */
// Handle user mode traps
...
}
// The 'exception' variable may have been set during trap processing
if (exception) {
doexception(exception, code, subcode);
}
...
if (/* user mode */) {
// If an AST is needed, call ast_taken()
// Repeat until an AST is not needed
}
return ssp;
}
There are several criteria for the invalidity of a trap's occurrence. For example, T_IN_VAIN should
never be seen by trap() because it should have been disposed of by EatRupt in
osfmk/ppc/lowmem_vectors.s. Note that TRap() determines whether a trap originated from the
user mode or kernel mode by looking at the contents of the SRR1 in the save area. It uses the
USER_MODE() macro [osfmk/ppc/proc_reg.h] for this purpose.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 39 of 137
// osfmk/ppc/proc_reg.h
#define ENDIAN_MASK(val,size) (1 .
// 
#ifdef __APPLE_API_PRIVATE
#define SYS_syscall 0
#define SYS_exit 1
#define SYS_fork 2
#define SYS_read 3
#define SYS_write 4
#define SYS_open 5
#define SYS_close 6
...
#define SYS_MAXSYSCALL 370
#endif
Several system call numbers are reserved or simply unused. In some cases, they may represent calls
that have been obsoleted and removed, creating holes in the sequence of implemented system calls.
Note that the zeroth system callsyscall()is the indirect system call: It allows another system call to
be invoked given the latter's number, which is provided as the first argument to syscall(), followed
by the actual arguments required by the target system call. The indirect system call has traditionally
been used to allow testingsay, from a high-level language like Cof new system calls that do not have
stubs in the C library.
// Normal invocation of system call number SYS_foo
ret = foo(arg1, arg2, ..., argN);
// Indirect invocation of foo using the indirect system call
ret = syscall(SYS_foo, arg1, arg2, ..., argN);
The syscall.h file is generated during kernel compilation by the bsd/kern/makesyscalls.sh shell
script,[6] which processes the system call master file bsd/kern/syscalls.master. The master file
contains a line for each system call number, with the following entities in each column within the line
(in this order):
[6] The script makes heavy use of the awk and sed Unix utilities.
The system call number
The type of cancellation supported by the system call in the case of a thread cancellation: one
of PRE (can be canceled on entry itself), POST (can be canceled only after the call is run), or
NONE (not a cancellation point)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 44 of 137
 The type of funnel[7] to be taken before executing the system call: one of KERN (the kernel
funnel) or NONE
[7] Beginning with Mac OS X 10.4, the network funnel is not used.
 The files to which an entry for the system call will be added: either ALL or a combination of T
(bsd/kern/init_sysent.cthe system call table), N (bsd/kern/syscalls.cthe table of system
call names), H (bsd/sys/syscall.hsystem call numbers), and P (bsd/sys/sysproto.hsystem
call prototypes)
The system call function's prototype
Comments that will be copied to output files
; bsd/kern/syscalls.master
;
; Call# Cancel Funnel Files { Name and Args } { Comments }
;
...
0 NONE NONE ALL { int nosys(void); } { indirect syscall }
1 NONE KERN ALL { void exit(int rval); }
2 NONE KERN ALL { int fork(void); }
...
368 NONE NONE ALL { int nosys(void); }
369 NONE NONE ALL { int nosys(void); }
The file bsd/kern/syscalls.c contains an array of stringssyscallnames[]that contains each
system call's textual name.
// bsd/kern/syscalls.c
const char *syscallnames[] = {
"syscall", /* 0 = syscall indirect syscall */
"exit", /* 1 = exit */
"fork", /* 2 = fork */
...
"#368", /* 368 = */
"#369", /* 369 = */
};
We can examine the contents of the syscallnames[] arrayand for that matter, other kernel data
structuresfrom user space by reading from the kernel memory device /dev/kmem.[8]
[8] The /dev/kmem and /dev/mem devices have been removed from the x86 version of
Mac OS X. A simple kernel extension can be written to provide /dev/kmem's
functionality, allowing experiments such as this one. This book's accompanying web site
provides information about writing such a driver.
Running nm on the kernel binary gives us the address of the symbol syscallnames, which we can
dereference to access the array.
$ nm /mach_kernel | grep syscallnames
0037f3ac D _syscallnames
$ sudo dd if=/dev/kmem of=/dev/stdout bs=1 count=4 iseek=0x37f3ac | od -x
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 45 of 137
0000000 0032 a8b4
0000004
$ sudo dd if=/dev/kmem of=/dev/stdout bs=1 count=1024 iseek=0x32a8b4 | strings
syscall
exit
fork
...
The file bsd/kern/init_sysent.c contains the system call switch table, sysent[], which is an
array of sysent structures, containing one structure for each system call number. This file is
generated from the master file during kernel compilation.
// bsd/kern/init_sysent.c
#ifdef __ppc__
#define AC(name) (sizeof(struct name) / sizeof(uint64_t))
#else
#define AC(name) (sizeof(struct name) / sizeof(register_t))
#endif
__private_extern__ struct sysent sysent[] = {
{
0,
_SYSCALL_CANCEL_NONE,
NO_FUNNEL,
(sy_call_t *)nosys,
NULL,
NULL,
_SYSCALL_RET_INT_T
}, /* 0 = nosys indirect syscall */
{
AC(exit_args),
_SYSCALL_CANCEL_NONE,
KERNEL_FUNNEL,
(sy_call_t *)exit,
munge_w,
munge_d,
_SYSCALL_RET_NONE
}, /* 1 = exit */
...
{
0,
_SYSCALL_CANCEL_NONE,
NO_FUNNEL,
(sy_call_t *)nosys,
NULL,
NULL,
_SYSCALL_RET_INT_T
}, /* 369 = nosys */
};
int nsysent = sizeof(sysent) / sizeof(sysent[0]);
The sysent structure is declared in bsd/sys/sysent.h.
// bsd/sys/sysent.h
typedef int32_t sy_call_t(struct proc *, void *, int *);
typedef void sy_munge_t(const void *, void *);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 46 of 137
extern struct sysent {