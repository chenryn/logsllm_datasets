indicates a bug. Sign extension is somewhat difficult to locate in C, but it shows up 
well in assembly code as the movsx instruction. Try to practice searching through 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
275 
assembly for sign-extension conversions and then relating them back to the source 
code, which is a useful technique. 
As a brief demonstration, compare Listings 6-14 and 6-15. 
Listing 6-14. Sign-Extension Example 
unsigned int l; 
char c=5; 
l= 
Listing 6-15. Zero-Extension Example 
unsigned int l; 
unsigned char c=5; 
l= 
Assuming the implementation calls for signed characters, you know that sign 
extension will occur in Listing 6-14 but not in Listing 6-15. Compare the generated 
assembly code, reproduced in Table 6-8. 
Table 6-8. Sign Extension Versus Zero Extension in Assembly Code 
Listing 6-14: Sign Extension Listing 6-15: Zero Extension 
mov 
[ebp+var_5], 5 
mov 
[ebp+var_5], 5 
movsx 
eax, [ebp+var_5] 
xor 
eax, eax 
mov 
al, [ebp+var_5] 
mov 
[ebp+var_4], eax 
mov 
[ebp+var_4], eax 
You can see that in the sign-extension example, the movsx instruction is used. In the 
zero-extension example, the compiler first clears the register with xor eax, eax and 
then moves the character byte into that register. 
Auditing Tip: Sign Extension 
When looking for vulnerabilities related to sign extensions, you should focus on code 
that handles signed character values or pointers or signed short integer values or 
pointers. Typically, you can find them in string-handling code and network code that 
decodes packets with length elements. In general, you want to look for code that 
takes a character or short integer and uses it in a context that causes it to be 
converted to an integer. Remember that if you see a signed character or signed short 
converted to an unsigned integer, sign extension still occurs. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
276 
As mentioned previously, one effective way to find sign-extension vulnerabilities is to 
search the assembly code of the application binary for the movsx instruction. This 
technique can often help you cut through multiple layers of typedefs, macros, and 
type conversions when searching for potentially vulnerable locations in code. 
Truncation 
Truncation occurs when a larger type is converted into a smaller type. Note that the 
usual arithmetic conversions and the integral promotions never really call for a large 
type to be converted to a smaller type. Therefore, truncation can occur only as the 
result of an assignment, a typecast, or a function call involving a prototype. Here's a 
simple example of truncation: 
int g = 0x12345678; 
short int h; 
h = g; 
When g is assigned to h, the top 16 bits of the value are truncated, and h has a value 
of 0x5678. So if this data loss occurs in a situation the programmer didn't expect, it 
could certainly lead to security failures. Listing 6-16 is loosely based on a historic 
vulnerability in Network File System (NFS) that involves integer truncation. 
Listing 6-16. Truncation Vulnerability Example in NFS 
void assume_privs(unsigned short uid) 
{ 
    seteuid(uid); 
    setuid(uid); 
} 
int become_user(int uid) 
{ 
    if (uid == 0) 
        die("root isnt allowed"); 
    assume_privs(uid); 
} 
To be fair, this vulnerability is mostly known of anecdotally, and its existence hasn't 
been verified through source code. NFS forbids users from mounting a disk remotely 
with root privileges. Eventually, attackers figured out that they could specify a UID of 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
277 
65536, which would pass the security checks that prevent root access. However, this 
UID would get assigned to an unsigned short integer and be truncated to a value of 0. 
Therefore, attackers could assume root's identity of UID 0 and bypass the protection. 
Take a look at one more synthetic vulnerability in Listing 6-17 before looking at a 
real-world truncation issue. 
Listing 6-17. Truncation Vulnerabilty Example 
unsigned short int f; 
char mybuf[1024]; 
char *userstr=getuserstr(); 
f=strlen(userstr); 
if (f > sizeof(mybuf)-5) 
  die("string too long!"); 
strcpy(mybuf, userstr); 
The result of the strlen() function, a size_t, is converted to an unsigned short. If a 
string is 66,000 characters long, truncation would occur and f would have the value 
464. Therefore, the length check protecting strcpy() would be circumvented, and a 
buffer overflow would occur. 
A show-stopping bug in most SSH daemons was caused by integer truncation. 
Ironically, the vulnerable code was in a function designed to address another security 
hole, the SSH insertion attack identified by CORE-SDI. Details on that attack are 
available at www1.corest.com/files/files/11/CRC32.pdf. 
The essence of the attack is that attackers can use a clever known plain-text attack 
against the block cipher to insert small amounts of data of their choosing into the SSH 
stream. Normally, this attack would be prevented by message integrity checks, but 
SSH used CRC32, and the researchers at CORE-SDI figured out how to circumvent it 
in the context of the SSH protocol. 
The responsibility of the function containing the truncation vulnerability is to 
determine whether an insertion attack is occurring. One property of these insertion 
attacks is a long sequence of similar bytes at the end of the packet, with the purpose 
of manipulating the CRC32 value so that it's correct. The defense that was engineered 
was to search for repeated blocks in the packet, and then do the CRC32 calculation up 
to the point of repeat to determine whether any manipulation was occurring. This 
method was easy for small packets, but it could have a performance impact on large 
sets of data. So, presumably to address the performance impact, a hashing scheme 
was used. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
278 
The function you're about to look at has two separate code paths. If the packet is 
below a certain size, it performs a direct analysis of the data. If it's above that size, it 
uses a hash table to make the analysis more efficient. It isn't necessary to understand 
the function to appreciate the vulnerability. If you're curious, however, you'll see that 
the simpler case for the smaller packets has roughly the algorithm described in Listing 
6-18. 
Listing 6-18. Detect_attack Small Packet Algorithm in SSH 
for c = each 8 byte block of the packet 
    if c is equal to the initialization vector block 
        check c for the attack. 
        If the check succeeds, return DETECTED. 
        If the check fails, you aren't under attack so return OK. 
    for d = each 8 byte block of the packet before c 
        If d is equal to c, check c for the attack. 
            If the check succeeds, return DETECTED. 
            If the check fails, break out of the d loop. 
    next d 
next c 
The code goes through each 8-byte block of the packet, and if it sees an identical 
block in the packet before the current one, it does a check to see whether an attack 
is underway. 
The hash-table-based path through the code is a little more complex. It has the same 
general algorithm, but instead of comparing a bunch of 8-byte blocks with each other, 
it takes a 32 bit hash of each block and compares them. The hash table is indexed by 
the 32-bit hash of the 8-byte block, modulo the hash table size, and the bucket 
contains the position of the block that last hashed to that bucket. The truncation 
problem happened in the construction and management of the hash table. Listing 
6-19 contains the beginning of the code. 
Listing 6-19. Detect_attack Truncation Vulnerability in SSH 
/* Detect a crc32 compensation attack on a packet */ 
int 
detect_attack(unsigned char *buf, u_int32_t len, 
              unsigned char *IV) 
{ 
    static u_int16_t *h = (u_int16_t *) NULL; 
    static u_int16_t n = HASH_MINSIZE / HASH_ENTRYSIZE; 
    register u_int32_t i, j; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
279 
    u_int32_t l; 
    register unsigned char *c; 
    unsigned char *d; 
    if (len > (SSH_MAXBLOCKS * SSH_BLOCKSIZE) || 
        len % SSH_BLOCKSIZE != 0) { 
        fatal("detect_attack: bad length %d", len); 
    } 
First, the code checks whether the packet is overly long or isn't a multiple of 8 bytes. 
SSH_MAXBLOCKS is 32,768 and BLOCKSIZE is 8, so the packet can be as large as 262,144 
bytes. In the following code, n starts out as HASH_MINSIZE / HASH_ENTRYSIZE, which is 
8,192 / 2, or 4,096, and its purpose is to hold the number of entries in the hash table: 
for (l = n; l  n) { 
        n = l; 
        h = (u_int16_t *)xrealloc(h, n * HASH_ENTRYSIZE); 
    } 
} 
If h is NULL, that means it's your first time through this function and you need to 
allocate space for a new hash table. If you remember, l is the value calculated as the 
right size for the hash table, and n contains the number of entries in the hash table. 
If h isn't NULL, the hash table has already been allocated. However, if the hash table 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
280 
isn't currently big enough to agree with the newly calculated l, you go ahead and 
reallocate it. 
You've looked at enough code so far to see the problem: n is an unsigned short int. If 
you send a packet that's big enough, l, an unsigned int, could end up with a value 
larger than 65,535, and when the assignment of l to n occurs, truncation could result. 
For example, assume you send a packet that's 262,144 bytes. It passes the first 
check, and then in the loop, l changes like so: 
Iteration 1: l = 4096    l = 49152 
When l, with a value of 65,536, is assigned to n, the top 16 bits are truncated, and n 
ends up with a value of 0. On several modern OSs, a malloc() of 0 results in a valid 
pointer to a small object being returned, and the rest of the function's behavior is 
extremely suspect. 
The next part of the function is the code that does the direct analysis, and because it 
doesn't use the hash table, it isn't of immediate interest: 
    if (len  MAX_SIZE){ 
        error("bad length supplied\n"); 
        return 1; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
283 
    } 
    if(read(sockfd, buf, length sizeof(short)) < 0){ 
        error("read: %m\n"); 
        return 1; 
    } 
    return 0; 
} 
The first check is actually incorrect. Note that the result type of the sizeof operator is 
a size_t, which is an unsigned integer type. So for the subtraction of (length - 
sizeof(short)), length is first promoted to a signed int as part of the integer 
promotions, and then converted to an unsigned integer type as part of the usual 
arithmetic conversions. The resulting type of the subtraction operation is an unsigned 
integer type. Consequently, the result of the subtraction can never be less than 0, and 
the check is effectively inoperative. Providing a value of 1 for length evades the very 
condition that the length check in the first half of the if statement is trying to protect 
against and triggers an integer underflow in the call to read(). 
More than one value can be supplied to evade both checks and trigger a buffer 
overflow. If length is a negative number, such as 0xFFFF, the first check still passes 
because the result type of the subtraction is always unsigned. The second check also 