# Runtime Verification of Authorization Hook Placement for the Linux Security Modules Framework

## Authors
- Antony Edwards
- Trent Jaeger
- Xiaolan Zhang

### Contact Information
- **Emails:**
  - Antony Edwards: [EMAIL]
  - Trent Jaeger: [EMAIL]
  - Xiaolan Zhang: [EMAIL]

### Affiliation
IBM T.J. Watson Research Center, Hawthorne, NY 10532

## Abstract
This paper introduces runtime tools designed to assist the Linux community in verifying the correctness of the Linux Security Modules (LSM) framework. The LSM framework includes a set of authorization hooks embedded within the Linux kernel to facilitate additional authorizations, such as mandatory access control (MAC). While in-kernel authorization offers both security and performance benefits over system call interposition, it is more challenging to ensure that all security-sensitive operations are properly authorized. We have explored both static and runtime analysis techniques, finding them to be complementary. Static analysis, though comprehensive, can generate false positives and is complex to implement. In contrast, runtime analysis is simpler but lacks the code and input coverage of static analysis. Our runtime verification approach leverages the fact that most LSM hooks are correctly placed to identify misplaced ones. The tools we developed collect current LSM authorizations and detect inconsistencies. We describe our approach, the design of the tools, and the anomalies found in an LSM-patched Linux 2.4.16 kernel.

## Categories and Subject Descriptors
- **D.2.9 [Software Engineering]:** Management—Configuration management
- **D.4.6 [Operating Systems]:** Security and Protection—Access controls
- **K.6.5 [Management of Computing and Information Systems]:** Security and Protection—Unauthorized access

## General Terms
- Security
- Management
- Languages

## 1. Introduction
The Linux Security Modules (LSM) project aims to provide a generic framework for enforcing a wide variety of authorization mechanisms and policies. This framework allows developers to implement their chosen authorization modules for the Linux kernel, enabling system administrators to select the module that best fits their security policy. For instance, modules implementing mandatory access control (MAC) policies to contain compromised system services are under development.

The LSM framework consists of authorization hooks inserted into the Linux kernel. Placing these hooks within the kernel rather than at the system call boundary enhances security and performance. However, it is more difficult to verify that all controlled operations are properly authorized. The system call interface is a natural mediation point, but within the kernel, there is no clear equivalent. Any kernel function can access security-sensitive data, necessitating a lower-level mediation interface. Additionally, it is crucial to ensure that the correct access control policy (e.g., write data) is enforced for each security-sensitive operation.

Recent efforts have focused on using static analysis tools to verify various security properties. We expect that static analysis will be used where possible, complemented by runtime analysis. Our static analysis approach enables comprehensive verification of the variables used in security-sensitive operations, but determining the required authorizations statically is challenging due to varying data and control flows. We found that many LSM hooks are correctly placed, so inconsistencies often indicate problems. We developed tools to find such inconsistencies and analyze runtime data to identify issues.

In this paper, we present a runtime verification approach and tools to help the LSM community and Linux kernel developers ensure that LSM authorization hooks completely authorize accesses. Our approach involves instrumenting the Linux kernel to collect security-relevant runtime events and analyzing the collected data to identify potential errors. We extended GCC to add necessary instrumentation and built kernel modules to collect runtime events. We also designed a filtering language to extract relevant events for analysis. Our tools generate two representations: authorization graphs and sensitivity class lists, which we used to find inconsistencies. Using this approach, we identified three bugs in LSM hook placement in the file system, which have since been fixed, and another anomaly that led to significant discussion.

The remainder of the paper is structured as follows:
- **Section 2:** Defines the general hook placement problem.
- **Section 3:** Develops an approach to solving the general hook placement problem.
- **Section 4:** Outlines the implementation of the tools and discusses the analyses performed and their results.
- **Section 5:** Concludes and describes future work.

## 2. General Hook Placement Problems

### 2.1 Concepts
We define the following key concepts in the construction of an authorization framework:
- **Security-sensitive Operations:** These are the operations that impact the system's security.
- **Controlled Operations:** A subset of security-sensitive operations that mediate access to other security-sensitive operations, defining a mediation interface.
- **Authorization Hooks:** These are the authorization checks in the system (e.g., in the LSM-patched Linux kernel).
- **Policy Operations:** These are the conceptual operations authorized by the authorization hooks.

Correct authorization hook placement must ensure that all security-sensitive operations are authorized. It is more convenient to express authorization policy at a higher level (e.g., file read or write), so we authorize conceptual operations, called policy operations. Since the number of security-sensitive operations can be large, it is preferable to authorize them once at a mediation interface. The set of controlled operations defines such an interface. Thus, our problem is to verify that all controlled operations are authorized for the expected policy operations using the LSM authorization hooks.

Identifying controlled operations is more challenging for in-kernel mediation than for system call mediation. The system call interface provides a well-known mediation point for all security-sensitive operations, making it easy to use as both the controlled and policy operations. When authorization hooks are inserted in the kernel, the mediation interface is less obvious, making it harder to identify the controlled operations and their mapping to policy operations.

### 2.2 Relationships to Verify
Figure 2 shows the relationships between the concepts:
1. **Identify Controlled Operations:** Find the set of operations that define a mediation interface through which all security-sensitive operations are accessed.
2. **Determine Authorization Requirements:** For each controlled operation, identify the authorization requirements (i.e., policy) that must be authorized by the LSM hooks.
3. **Verify Complete Authorization:** For each controlled operation, verify that the correct authorization requirements are authorized by LSM hooks.
4. **Verify Hook Placement Clarity:** Ensure that controlled operations implementing a policy operation are easily identifiable from their authorization hooks to maintain robustness against source code changes.

The basic idea is to identify the controlled operations and their authorization requirements, then verify that the authorization hooks mediate those controlled operations properly. First, we need an approach to find the controlled operations in the kernel. Second, because the controlled operations are at a lower level than the policy operations, we need to determine the authorization requirements of each controlled operation. Third, we compare the LSM hook authorizations to the expected authorization requirements. These tasks are complex for in-kernel authorization, so automated support is essential.

Finally, to ensure maintainability, we must verify that the controlled operations representative of each policy operation can be easily determined from the authorization hook locations. This work has been done and is presented elsewhere [4].

### 2.3 Related Work
Recent research has shown promise in using static analysis to verify security properties. Existing program analysis tools have been used to find common security errors, such as buffer overflows and printf vulnerabilities [12, 15, 17]. Specialized tools like xgcc [5], ITS4/RATS [16], and MOPS [3] have also been developed for finding security vulnerabilities.

Program analysis tools are based on formal properties of programming languages, allowing for complete analysis. However, they can be computationally expensive and may produce conservative analyses with many false positives. Additionally, program verification is complex to implement.