## 前记
一直想复现0ctf的题目，ezdoor就不说了，当时做完了web的部分，但是拿下来的文件opcache少了个00我也是服了，后来的反编译一直报错，想到就心塞....  
今天又想起来另一道给了源码的题目，就是login
me，说实话，复现这题也是为了自己学习新的语言，给自己一些挑战，毕竟是nodejs+mongodb，之前自己都没有接触过这方面的开发，只是有略微了解。所以也可以说又是一次标准的零基础日题了~
## 环境搭建
### mongodb搭建
首先是下载
    curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz
然后就出问题了，如图：
解决方案
    subl /etc/resolv.conf
添加
    nameserver 8.8.8.8
    nameserver 8.8.4.4
    nameserver 198.153.192.1
    nameserver 198.153.194.1
    nameserver 208.67.222.222
    nameserver 208.67.220.220
然后
    service NetworkManager restart
即可  
下载完成后
    tar -zxvf mongodb-linux-x86_64-3.0.6.tgz
解压后启动mongodb
    cd ./mongodb-linux-x86_64-3.0.6/bin/
启动
    ./mongod
报错
    2018-04-08T17:19:33.264-0700 I STORAGE  [initandlisten] exception in initAndListen: 29 Data directory /data/db not found., terminating
    2018-04-08T17:19:33.264-0700 I CONTROL  [initandlisten] dbexit:  rc: 100
发现没有`/data/db`，我们去创建
    mkdir -p /data/db
再启动，启动完成后，我们尝试
发现成功
### 安装nodejs
sudo apt-get install nodejs  
sudo apt-get install npm  
测试
发现安装完毕  
后尝试node指令，发现继续报错，发现未安装完毕
    apt install nodejs-legacy
即可解决
### 启动服务
启动我们的js文件
    node index.js
继续报错  
发现模块没安装(和python差不多)  
于是装模块
    npm install express
    npm install moment
    npm install mongodb
    npm install body-parser
装完后
    node index.js
继续警告
    body-parser deprecated undefined extended: provide extended option fuck.js:4:20
修改index.js
    // app.use(bodyParser.urlencoded({}));
    app.use(bodyParser.urlencoded({extended:false}));
用后者即可解决  
继续运行
    node.js
发现各种报错  
比如
    Error: Can't set headers after they are sent.
进程直接崩了  
无奈，手动修改源码，改了若干处，用了catch捕捉，和next()，最后可运行脚本如下
    var express = require('express')
    var app = express()
    var bodyParser = require('body-parser')
    // app.use(bodyParser.urlencoded({}));
    app.use(bodyParser.urlencoded({extended:false}));
    var path    = require("path");
    var moment = require('moment');
    var MongoClient = require('mongodb').MongoClient;
    var url = "mongodb://localhost:27017/";
    MongoClient.connect(url, function(err, db) {
        if (err) throw err;
        dbo = db.db("test_db");
        var collection_name = "users";
        var password_column = "password_"+Math.random().toString(36).slice(2)
        var password = "21851bc21ae9085346b99e469bdb845f";
        // flag is flag{password}
        var myobj = { "username": "admin", "last_access": moment().format('YYYY-MM-DD HH:mm:ss Z')};
        myobj[password_column] = password;
        dbo.collection(collection_name).remove({});
        dbo.collection(collection_name).update(
            { name: myobj.name },
            myobj,
            { upsert: true }
        );
        app.get('/', function (req, res) {
            res.sendFile(path.join(__dirname,'index.html'));
        })
        app.post('/check', function (req, res,next) {
            var check_function = 'if(this.username == #username# && #username# == "admin" && hex_md5(#password#) == this.'+password_column+'){\nreturn 1;\n}else{\nreturn 0;}';
            for(var k in req.body){
                var valid = ['#','(',')'].every((x)=>{return req.body[k].indexOf(x) == -1});
                if(!valid) 
                {
                    res.send('Nope');
                    return next();
                }
                check_function = check_function.replace(
                    new RegExp('#'+k+'#','gm')
                    ,JSON.stringify(req.body[k]))
            }
            var query = {"$where" : check_function};
            var newvalue = {$set : {last_access: moment().format('YYYY-MM-DD HH:mm:ss Z')}}
            dbo.collection(collection_name).updateOne(query,newvalue,function (e,r){
            if(e) 
            {
                console.log('\r\n', e, '\r\n', e.stack);
                    try {
                        res.end(e.stack);
                        }   
                    catch(e) { }
                return next()
            }       
            res.send('ok');
                // ... implementing, plz dont release this.
            });
        })
        app.listen(8081)
    });
由于本地复现，我就不把flag处理了，就是
    flag{21851bc21ae9085346b99e469bdb845f}
然后
    mongodb://localhost:27017/
默认开在27017端口，所以不用管  
此时去查看表和数据是否正常
    > db.users.find()
    { "_id" : ObjectId("5acb11582be7bd70afb9d4c3"), "username" : "admin", "last_access" : "2018-04-09 00:08:08 -07:00", "password_6ya2mt945d9jatt9" : "21851bc21ae9085346b99e469bdb845f" }
发现一切正常，环境最终搭建完毕  
心里一万句mmp
## 源码分析
这里就直接分析题目当时泄露的源码了，虽然对nodejs不了解..但毕竟都是代码，强行读还是能读的
    var express = require('express')
    var app = express()
    var bodyParser = require('body-parser')
    app.use(bodyParser.urlencoded({}));
    var path    = require("path");
    var moment = require('moment');
    var MongoClient = require('mongodb').MongoClient;
    var url = "mongodb://localhost:27017/";
    MongoClient.connect(url, function(err, db) {
        if (err) throw err;
        dbo = db.db("test_db");
        var collection_name = "users";
        var password_column = "password_"+Math.random().toString(36).slice(2)
        var password = "XXXXXXXXXXXXXXXXXXXXXX";
        // flag is flag{password}
        var myobj = { "username": "admin", "last_access": moment().format('YYYY-MM-DD HH:mm:ss Z')};
        myobj[password_column] = password;
        dbo.collection(collection_name).remove({});
        dbo.collection(collection_name).update(
            { name: myobj.name },
            myobj,
            { upsert: true }
        );
        app.get('/', function (req, res) {
            res.sendFile(path.join(__dirname,'index.html'));
        })
        app.post('/check', function (req, res) {
            var check_function = 'if(this.username == #username# && #username# == "admin" && hex_md5(#password#) == this.'+password_column+'){\nreturn 1;\n}else{\nreturn 0;}';
            for(var k in req.body){
                var valid = ['#','(',')'].every((x)=>{return req.body[k].indexOf(x) == -1});
                if(!valid) res.send('Nope');
                check_function = check_function.replace(
                    new RegExp('#'+k+'#','gm')
                    ,JSON.stringify(req.body[k]))
            }
            var query = {"$where" : check_function};
            var newvalue = {$set : {last_access: moment().format('YYYY-MM-DD HH:mm:ss Z')}}
            dbo.collection(collection_name).updateOne(query,newvalue,function (e,r){
                if(e) throw e;
                res.send('ok');
                // ... implementing, plz dont release this.
            });
        })
        app.listen(8081)
    });
首先看前面一堆定义
    var express = require('express')
    var app = express()
    var bodyParser = require('body-parser')
    app.use(bodyParser.urlencoded({}));
    var path = require("path");
    var moment = require('moment');
    var MongoClient = require('mongodb').MongoClient;
    var url = "mongodb://localhost:27017/";
大致就是引入模块，和python差不多
    express
    body-parser
    path
    moment
    mongodb
然后是nodejs与mongodb的连接
    var MongoClient = require('mongodb').MongoClient;
    var url = "mongodb://localhost:27017/";
紧接着看操作
    MongoClient.connect(url, function(err, db) {
        if (err) throw err;
        dbo = db.db("test_db");
        var collection_name = "users";
        var password_column = "password_"+Math.random().toString(36).slice(2)
        var password = "XXXXXXXXXXXXXXXXXXXXXX";
        // flag is flag{password}
        var myobj = { "username": "admin", "last_access": moment().format('YYYY-MM-DD HH:mm:ss Z')};
        myobj[password_column] = password;
        dbo.collection(collection_name).remove({});
        dbo.collection(collection_name).update(
            { name: myobj.name },
            myobj,
            { upsert: true }
        );
连接上后，得到几个关键信息  
数据库名：test_db  
表名:users  
字段名：  
username  
last_access  
以及随机生成的password列名
    password_"+Math.random().toString(36).slice(2)
结果大致这样
    password_6ya2mt945d9jatt9
然后数据如下
    var myobj = { "username": "admin", "last_access": moment().format('YYYY-MM-DD HH:mm:ss Z')};
    myobj[password_column] = password;
其中password就是我们需要的flag  
然后进行操作
    dbo.collection(collection_name).remove({});
        dbo.collection(collection_name).update(
            { name: myobj.name },
            myobj,
            { upsert: true }
        );
把之前的都删了，然后更新成最新的  
也就是说，password这一列的列名每个人都不一样，但是对应的数据不会变，也就是flag  
等于给我们的注入加大了难度，即无列名注入  
然后接着看两个路由，又想到了python.....
    app.get('/', function (req, res)
    app.post('/check', function (req, res)
先看get方法的路由
    app.get('/', function (req, res) {
            res.sendFile(path.join(__dirname,'index.html'));
        })
没什么特别的，就是你直接访问这个页面，会打印index.html的源代码  
然后看post方法的路由
    app.post('/check', function (req, res) {
        var check_function = 'if(this.username == #username# && #username# == "admin" && hex_md5(#password#) == this.'+password_column+'){\nreturn 1;\n}else{\nreturn 0;}';
        for(var k in req.body){
            var valid = ['#','(',')'].every((x)=>{return req.body[k].indexOf(x) == -1});
            if(!valid) res.send('Nope');
            check_function = check_function.replace(
                new RegExp('#'+k+'#','gm')
                ,JSON.stringify(req.body[k]))
        }
        var query = {"$where" : check_function};
        var newvalue = {$set : {last_access: moment().format('YYYY-MM-DD HH:mm:ss Z')}}
        dbo.collection(collection_name).updateOne(query,newvalue,function (e,r){
            if(e) throw e;
            res.send('ok');
            // ... implementing, plz dont release this.
        });
    })
这里就是一个拼接，大致上就是看你post的username和password是否带有危险参数  
即
    #
    (
    )
携带了就返回nope  
若未携带，则进行拼接查询，将结果的last_access时间更改为最新的，然后返回ok  
这里为了明显，我举个例子  
比如我们post数据
    username=admin&password=2
经过他的处理变成
    if(this.username == "admin" && "admin" == "admin" && hex_md5("2") == this.password_f47ta8usnzrozuxr){ return 1; }else{ return 0;}
然后查询是否有
    username = admin
    password = md5(2)
的数据  
如果有，则更新这条数据的最后登入时间，反则不操作  
并且一律返回ok  
所以，只要没带危险字符都是返回ok  
然后最后是服务端口
    app.listen(8081)
即服务跑在8081端口上
## 攻击点思考
一点一点思考，虽然没做过nodejs相关的知识学习，但是至少sql注入做的不少  
对于返回一律是相同的操作，注入无非两种方式：  
报错注入  
时间盲注  
经过随手测试