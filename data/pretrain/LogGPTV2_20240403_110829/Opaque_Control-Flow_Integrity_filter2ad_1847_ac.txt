Recursively traverse all non-call references until a
ﬁxed point is reached (i.e., a set with only calls).
The instruction immediately after each call forms the
target set for that return.
Our heuristics are tuned to prefer false positives (non-targets
treated as possibly valid destinations), since such errors do not
signiﬁcantly affect the operation of our system. In particular,
each such error only marginally weakens the system’s security
(by admitting an unnecessary control-ﬂow link that remains
guarded by randomization) and slightly increases generated
code size. A compiler-side solution could be more precise, at the
cost of requiring source code and recompilation of programs.
5) Bounds Range Minimization: As discussed in §III-C,
we use a combination of clustering and portals to reduce
bounds ranges. While the portals themselves are created only at
binary load-time, it is in the static phase that branch targets are
clustered together and empty nexuses created. Algorithm 1 gives
7
Description
Original Code
Rewritten Code (MPX-mode)
Rewritten Code (Legacy-mode)
TABLE IV.
SUMMARY OF CODE TRANSFORMATIONS
Indirect Branches
call/jmp r/[m]
Returns
ret (cid:104)n(cid:105)
1: mov [esp-4], eax
2: mov eax, r/[m]
3: cmp byte ptr [eax], 0xF4
4: cmovz eax, [eax+1]
— chunk boundary —
5: bndmov bnd1, gs:[branch_id]
6: bndcu bnd1, eax
7: jmp 9
— chunk boundary —
8: xor eax, eax
9: and al, align_mask
10: bndcl bnd1, eax
11: xchg eax, [esp-4]
12: call/jmp [esp-4]
— chunk boundary —
1: xchg eax, [esp]
2: and al, align_mask
3: bndmov bnd1, gs:[branch_id]
4: jmp 6
— chunk boundary —
5: xor eax, eax
6: bndcu bnd1, eax
7: bndcl bnd1, eax
8: xchg eax, [esp]
9: ret (cid:104)n(cid:105)
1: push ecx
2: push eax
3: mov eax, r/[m]
4: cmp byte ptr [eax], 0xF4
5: cmovz eax, [eax+1]
— chunk boundary —
6: mov ecx, branch_id
7: cmp eax, gs:[ecx]
8: jb 10
9: cmp gs:[ecx+4], eax
10: jbe
— chunk –/— boundary ——
abort
11: and al, align_mask
12: xchg eax, [esp]
13: pop ecx
14: pop ecx
15: call/jmp [esp-8]
— chunk boundary —
1: xchg eax, [esp]
2: cmp eax, gs:[branch_id]
3: jb 9
4: and al,
—— chunk —/— boundary ——
align_mask
5: cmp eax, gs:[branch_id + 4]
6: jae 9
7: xchg eax, [esp]
8: ret (cid:104)n(cid:105)
— chunk boundary —
9: jmp abort
a high level overview of our clustering algorithm. Each cluster
created in this step gets an empty nexus. In our implementation,
all nexuses are homogeneous in size, but more sophisticated
implementations could tailor nexus sizes to individual branches
based on the size of their statically determined target set.
Organizing the code into power-of-two sized chunks (for
SFI enforcement) impacts portals. In the absence of chunking,
the size of each portal is the ﬁve bytes required for a direct
jump; but chunking rounds this up to the nearest multiple of
the chunk-size. In our implementation, this makes each portal
16 bytes long. Though this slightly increases both ﬁle and code
sizes, it only marginally affects the average bounds size, and
does not noticeably impact performance. Section V-D contains
a detailed breakdown of how bounds sizes vary with the number
of portals per cluster.
B. Accelerated Bounds Checks
To optimize performance, we leverage the Intel memory-
protection extensions (MPX) for x86/64 architectures to store
and check bounds. MPX instructions will be supported in Intel
processors from 2015 onwards, so our approach will beneﬁt
from hardware acceleration in the near future. MPX instructions
execute as NOPs on legacy processors.
MPX provides hardware-accelerated bounds checking in-
structions and registers, for protection against buffer overﬂow
or underﬂow attacks. The eight new bounds registers each
hold two pointers, and can be used to store both the lower
and upper bounds associated with a pointer value. New MPX
instructions allow for quick loading and testing of these bounds
registers. We use the three MPX instructions shown in Table III.
Instruction bndmov loads bounds from the BLT into bounds
register bnd, and bndcl and bndcu verify that the target
address is within the loaded bounds.
To secure binaries intended for use on non-MPX systems,
O-CFI also has a legacy mode that uses the cmp and jcc
instructions to guard branches. Although the lack of dedicated
8
range checking instructions makes these guards less efﬁcient
than their MPX-enabled counterparts, binaries rewritten in this
mode receive the same level of protection.
Table IV shows the ﬁnal consolidated sequence of instruc-
tions that enforces bounds, prevents execution of unintended in-
structions, and allows ﬁne-grained randomization. Column three
shows the instructions used when targeting MPX-compatible
platforms, while column four shows those used on non-MPX,
legacy processors. Chunks are 16 bytes each. In each listing,
instructions appearing before the ﬁrst chunk boundary are
appended to the preceding chunk, or wherever they best ﬁt.
Subsequent instructions are conﬁned to dedicated chunks in
order to maintain security.
MPX Mode.
In MPX mode, lines 1 and 11 of the guard code
for indirect branches preserve the eax register, which is used as
a scratch space. Lines 3 and 4 implement the dynamic lookup
and redirection mechanism for stale code pointers. Lines 5, 6,
and 10 load the bounds associated with this branch into bounds
register bnd1 and then compare it against the target address.
If the target address is outside the bounds, a #BR exception is
raised, and the program halted. Line 9 masks the target address,
forcing it to a chunk boundary.
Line 8 foils hijackers who attempt to abuse the ﬁnal chunk
as a gadget. The earlier chunk boundary (above line 5) needs
no such protection because all logic above it is strictly for
preserving program functionality, not for enforcing security.
Thus, jumping to that boundary during a code-reuse attack does
not help the attacker—the resulting gadget implements a fully
guarded jump.
The process is shorter for returns, since returns do not
require stale pointer correction. The full return guard code
therefore ﬁts within two 16-byte chunks.
Legacy Mode. To protect binaries executing on processors
without MPX support, O-CFI emits legacy mode guards. This
mode uses comparison (cmp) instructions (lines 7 and 9 of the
Algorithm 2 RuntimeSetup(C, BLT ): Perform runtime ran-
domization, and bounds range setup and optimization.
Input: C {clustered code segment}, BLT {bounds table}
Output: C {randomized, bounds optimized code segment}
RandomizeCode(C)
CreateAllPortals(C)
UpdateDirectBranches(C)
UpdateJumpTable(C)
UpdateBoundsTable(BLT )
SetupSegmentedAccess(BLT ) {Move the bounds table to
a random page and set up segmented memory access to it
via the gs register.}
Algorithm 3 RandomizeCode(C, Shuﬄe): Randomize basic
blocks in a cluster-aware manner.
Input: C {clustered code segment}, Shuﬄe {a method that
Output: a randomized code segment
takes a set as input and outputs a random ordering}
{Shufﬂe basic-blocks within the cluster.}
R ← ∅
for all c ∈ C do
R ← R ∪ {Shuﬄe(c)}
end for
{Shufﬂe the order of clusters within the code segment.}
return Shuﬄe(R)
indirect branch code, and lines 2 and 5 of the return code) to
compare the target address against both bounds. A conditional
jump immediately following each comparison transfers control
to an abort function if any check fails. The abort function halts
(and optionally re-randomizes and restarts) the program.
Some creativity is required to squeeze the lengthier legacy
guards into a small number of chunks, while avoiding the
introduction of gadgets (at chunk boundaries) abusable by
attackers. For example, the short-jump instructions (at line 8
of the indirect branch code, and lines 3 and 6 of the return
code) take circuitous routes to the abort function, but have
shorter encodings than long-jumps, saving space. (Since the
jumps are never taken during a policy-satisfying run, there
is no performance downside.) The indirect branch code uses
ecx as a temp register for indexing the BLT in lines 7 and 9,
achieving shorter encodings of those instructions.
To prevent abuse of the second chunk boundary as a
jump target during an attack, the legacy guard instructions
are carefully arranged so that the second boundary splits an
instruction’s encoding, and the bytes falling after the boundary
decode to an illegal opcode. In the return code listing, the
align mask argument (0xF0) decodes to an illegal opcode
preﬁx. In the indirect branch code listing, the destination
argument of the conditional jump in line 10 (abort) is chosen
so that its ﬁrst byte is an illegal instruction.1 (As in MPX
mode, the ﬁrst chunk boundary requires no protection, since
the instructions that follow it implement a fully guarded jump.)
C. Dynamic Randomization and Protection
The dynamic phase of our system proceeds at load-time,
before the binary executes. In this phase the basic blocks are
1The argument to jbe is a 32-bit, little-endian, relative offset, so we preﬁx
our abort function implementation with a 256-byte sled of NOPs, allowing
jump offsets to it to have an arbitrary least-signiﬁcant byte (e.g., 0xF4).
9
Algorithm 4 CreatePortal (N, t): Create a portal to t from
nexus N.
Input: N {a nexus}, t {target address}
Output: Add a direct jump to t in the ﬁrst available slot in
N, and returns its address.
for i = 1 to Capacity(N ) do
if N [i] is an empty slot then
N [i] ← CreateDirectJump(t)
return Address(N [i])
end if
end for
return null {Return null if insufﬁcient capacity.}
Algorithm 5 CreateAllPortals(C): Fill each nexus with
portals to targets until (a) there are no more targets for that
branch, or (b) the nexus capacity is reached.
Input: C {the ordered set of clusters, post randomization}
Output: Fill nexuses with portals.
for all c ∈ C do
for i = 1 to Capacity(c.nexus) do
b ← GetParentBranch(c)
f ← FarthestTarget(c, b)
q ← CreatePortal (c.nexus, f )
if q (cid:54)= null then
UpdateTargets(b, f , q)
end if
end for
end for
randomized for diversity, bounds on indirect branches are ﬁxed,
and bounds ranges are further minimized. O-CFI uses a runtime
library for this purpose, which it injects into the Import Address
Table (IAT) of the rewritten binary during the static phase.
The Windows load order guarantees that all statically linked
libraries initialize before the modules that link to them. The
dynamic phase is thus carried out by the intermediate library
in its initialization code. Algorithm 2 describes the order of
steps taken by the initialization code.
First, the two-step process detailed in Algorithm 3 is used
to randomize the code segment without affecting bounds ranges.
Next, each nexus is populated using a greedy algorithm that
creates portals to the farthest targets of its parent branch step-
by-step, until its capacity is exhausted. Algorithm 5 shows the
pseudo-code for this process while Algorithm 4 details how
individual portals are created.
Once the targets of all branches have been ﬁnalized, direct
branch operands are relocated to their correct locations and
all jump-table entries in the .told section are updated with
their new addresses. The BLT is also updated to reﬂect the
new ranges for each branch, after which it is then moved to a
random page of memory. Finally, the gs segment register is
updated to point to the new base address of the BLT.
D. Platform Support and Infrastructure
We have implemented O-CFI for 32-bit versions of Windows
(XP/Vista/7/8). Our O-CFI approach however, is not OS speciﬁc
and is also applicable to 64-bit versions of Windows as well
as Linux and OS X.
The implementation consists of three parts: (i) a static
rewriter, (ii) an intermediate library, and (iii) an API hooking
TABLE VI.
GADGET CHAIN LENGTHS ACROSS SPEC BENCHMARKS
TABLE VII.
BOUNDS RANGE REDUCTION FACTORS WITH PORTALS
Gadget Chain Size
Chance (%)
2
3
4
5
2.0
0.8
0.01
–
of each gadget. (Section III-B examines the probability of
guessing the address of the BLT itself.)
Under these assumptions, we carry out two experiments.
First, we evaluate the statistical likelihood of chaining gadgets
without violating branch bounds. Second, we attempt to use
post-randomization gadget addresses to manually craft practical
attacks against rewritten binaries, and evaluate how O-CFI
resists implementation disclosure in practice.
1) Chaining Gadgets: We use the Mona ROP-generation
tool [9] to identify all gadgets in a secured binary after the load-
time phase, simulating full disclosure of the code segment. To
simulate an attacker’s attempts to guess branch ranges, payload
chains are created by randomly selecting gadgets from the
discovered gadget set. When a selected gadget falls outside
the bounds of the previous gadget in the chain, the chain is
terminated and its length is considered the payload length for
that run. By repeating this process over multiple runs, we
estimate the probability of successfully crafting payloads of
various lengths.
This procedure estimates the probability of success of
disclosure attacks resembling JIT-ROP, where a failure (such as
a #BR violation) results in program termination and subsequent
re-randomization of code and re-selection of bounds ranges.
BROP-like attacks, on the other hand, exploit the lack
of re-randomization when binaries are respawned via the
fork system call. A crucial advantage of our system against