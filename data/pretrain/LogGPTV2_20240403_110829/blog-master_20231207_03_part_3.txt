+SELECT * FROM ft2 ftupper WHERE  
+   EXISTS (  
+   SELECT c1 FROM ft2 WHERE  
+     EXISTS (SELECT 1 FROM ft4 WHERE ft4.c2 = ft2.c2) AND c1 = ftupper.c1 )  
+  AND ftupper.c1 > 900  
+  ORDER BY ftupper.c1 LIMIT 10;  
+                                                                                                                                                          QUERY PLAN                                                                                                                                                             
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
+ Foreign Scan  
+   Output: ftupper.c1, ftupper.c2, ftupper.c3, ftupper.c4, ftupper.c5, ftupper.c6, ftupper.c7, ftupper.c8  
+   Relations: (public.ft2 ftupper) SEMI JOIN ((public.ft2) SEMI JOIN (public.ft4))  
+   Remote SQL: SELECT r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8 FROM "S 1"."T 1" r1 WHERE ((r1."C 1" > 900)) AND EXISTS (SELECT NULL FROM "S 1"."T 1" r2 WHERE ((r1."C 1" = r2."C 1")) AND EXISTS (SELECT NULL FROM "S 1"."T 3" r3 WHERE ((r2.c2 = r3.c2)))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint  
+(4 rows)  
+  
+SELECT * FROM ft2 ftupper WHERE  
+   EXISTS (  
+   SELECT c1 FROM ft2 WHERE  
+     EXISTS (SELECT 1 FROM ft4 WHERE ft4.c2 = ft2.c2) AND c1 = ftupper.c1 )  
+  AND ftupper.c1 > 900  
+  ORDER BY ftupper.c1 LIMIT 10;  
+ c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8    
+-----+----+-------+------------------------------+--------------------------+----+------------+-----  
+ 903 |  3 | 00903 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo  
+ 905 |  5 | 00905 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo  
+ 907 |  7 | 00907 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo  
+ 909 |  9 | 00909 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo  
+ 913 |  3 | 00913 | Wed Jan 14 00:00:00 1970 PST | Wed Jan 14 00:00:00 1970 | 3  | 3          | foo  
+ 915 |  5 | 00915 | Fri Jan 16 00:00:00 1970 PST | Fri Jan 16 00:00:00 1970 | 5  | 5          | foo  
+ 917 |  7 | 00917 | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo  
+ 919 |  9 | 00919 | Tue Jan 20 00:00:00 1970 PST | Tue Jan 20 00:00:00 1970 | 9  | 9          | foo  
+ 923 |  3 | 00923 | Sat Jan 24 00:00:00 1970 PST | Sat Jan 24 00:00:00 1970 | 3  | 3          | foo  
+ 925 |  5 | 00925 | Mon Jan 26 00:00:00 1970 PST | Mon Jan 26 00:00:00 1970 | 5  | 5          | foo  
+(10 rows)  
+  
+-- EXISTS should be propogated to the highest upper inner join  
+EXPLAIN (verbose, costs off)  
+   SELECT ft2.*, ft4.* FROM ft2 INNER JOIN  
+   (SELECT * FROM ft4 WHERE EXISTS (  
+       SELECT 1 FROM ft2 WHERE ft2.c2 = ft4.c2)) ft4  
+   ON ft2.c2 = ft4.c1  
+   INNER JOIN  
+   (SELECT * FROM ft2 WHERE EXISTS (  
+       SELECT 1 FROM ft4 WHERE ft2.c2 = ft4.c2)) ft21  
+   ON ft2.c2 = ft21.c2  
+   WHERE ft2.c1 > 900  
+   ORDER BY ft2.c1 LIMIT 10;  
+                                                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                                                       
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
+ Foreign Scan  
+   Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft4.c1, ft4.c2, ft4.c3  
+   Relations: ((((public.ft2) INNER JOIN (public.ft4)) SEMI JOIN (public.ft2 ft2_1)) INNER JOIN (public.ft2 ft2_2)) SEMI JOIN (public.ft4 ft4_1)  
+   Remote SQL: SELECT r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8, r6.c1, r6.c2, r6.c3 FROM (("S 1"."T 1" r1 INNER JOIN "S 1"."T 3" r6 ON (((r1.c2 = r6.c1)) AND ((r1."C 1" > 900)))) INNER JOIN "S 1"."T 1" r8 ON (((r1.c2 = r8.c2)))) WHERE EXISTS (SELECT NULL FROM "S 1"."T 3" r9 WHERE ((r1.c2 = r9.c2))) AND EXISTS (SELECT NULL FROM "S 1"."T 1" r7 WHERE ((r7.c2 = r6.c2))) ORDER BY r1."C 1" ASC NULLS LAST LIMIT 10::bigint  
+(4 rows)  
+  
+SELECT ft2.*, ft4.* FROM ft2 INNER JOIN  
+   (SELECT * FROM ft4 WHERE EXISTS (  
+       SELECT 1 FROM ft2 WHERE ft2.c2 = ft4.c2)) ft4  
+   ON ft2.c2 = ft4.c1  
+   INNER JOIN  
+   (SELECT * FROM ft2 WHERE EXISTS (  
+       SELECT 1 FROM ft4 WHERE ft2.c2 = ft4.c2)) ft21  
+   ON ft2.c2 = ft21.c2  
+   WHERE ft2.c1 > 900  
+   ORDER BY ft2.c1 LIMIT 10;  
+ c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | c1 | c2 | c3   
+----+----+----+----+----+----+----+----+----+----+----  
+(0 rows)  
+  
+-- Can't push down semi-join with inner rel vars in targetlist  
+EXPLAIN (verbose, costs off)  
+SELECT ft1.c1 FROM ft1 JOIN ft2 on ft1.c1 = ft2.c1 WHERE  
+   ft1.c1 IN (  
+       SELECT ft2.c1 FROM ft2 JOIN ft4 ON ft2.c1 = ft4.c1)  
+   ORDER BY ft1.c1 LIMIT 5;  
+                                                                            QUERY PLAN                                                                               
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------  
+ Limit  
+   Output: ft1.c1  
+   ->  Merge Semi Join  
+         Output: ft1.c1  
+         Merge Cond: (ft1.c1 = ft2_1.c1)  
+         ->  Foreign Scan  
+               Output: ft1.c1, ft2.c1  
+               Relations: (public.ft1) INNER JOIN (public.ft2)  
+               Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r1."C 1")))) ORDER BY r1."C 1" ASC NULLS LAST  
+         ->  Foreign Scan  
+               Output: ft2_1.c1, ft4.c1  
+               Relations: (public.ft2 ft2_1) INNER JOIN (public.ft4)  
+               Remote SQL: SELECT r5."C 1", r6.c1 FROM ("S 1"."T 1" r5 INNER JOIN "S 1"."T 3" r6 ON (((r5."C 1" = r6.c1)))) ORDER BY r5."C 1" ASC NULLS LAST  
+(13 rows)  
```  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")