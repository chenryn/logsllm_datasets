Nevertheless, iwlmvm/mem in the debug ﬁlesystem does not use this
interface. Instead the implementation of the read operation (in function
iwl_dbgfs_mem_read 19) boils down to calling iwl_mvm_send_cmd(mvm,
&hcmd); with a host command in the parameter hcmd. This function calls
iwl_trans_pcie_send_hcmd to enqueue a command in queues that the
Wi-Fi chip reads using Direct Memory Access (DMA). This interface
is shared with every command that the Linux kernel sends to the chip
19 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/mvm/debugfs.c#L1799
16
Ghost in the Wireless, iwlwiﬁ edition
(for example to request scanning access points, to conﬁgure some radio
properties, etc.) and we can expect that messages sent through it are
processed by the ﬁrmware.
When iwlwifi and iwlmvm prepare a command for the Wi-Fi chip,
they use a structure named iwl_host_cmd 20 where they ﬁll the command
ID and parameters. The identiﬁers consist of two bytes, deﬁning a group
of commands (enum iwl_mvm_command_groups 21) and a command inside
a group. For example, the command used to read memory is:
— group DEBUG_GROUP = 0xf,
— command LMAC_RD_WR = 0 or UMAC_RD_WR = 1, to read memory
from the LMAC or the UMAC processor.
This identiﬁer is packed into a 4-byte structure iwl_cmd_header 22
before being sent to the chip. With this information, it should be possible
to ﬁnd the code processing such commands in the ﬁrmware.
Arbitrary Code Execution The host manages the chip through a
set of commands mentioned previously. The command IDs as well as
the associated request and response structures are declared in the kernel
module source code.
The ﬁrmware implementation of these commands was reverse-
engineered, allowing us to ﬁnd undocumented commands. One of these
commands (of ID 0xf1) receives host data in 2 steps:
1. A ﬁrst structure made of a size and a ﬂag (struct input { size_t
count; int flag; }) is received. The size ﬁeld is actually the
expected size of the next received data.
2. Data is then read directly on the stack, leading to a stack overﬂow
if the size speciﬁed in the ﬁrst command is larger than the size of
the stack buﬀer.
In order to trigger the vulnerability, we based our exploit on
ftrace-hook. It allows sending arbitrary commands to the chip by hijack-
ing a single function from the Linux module: iwl_mvm_send_cmd(). The
exploit works in 2 steps:
20 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/iwl-trans.h#L207
21 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/fw/api/commands.h#L32
22 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/fw/api/cmdhdr.h#L65
N. Iooss, G. Campana
17
1. A shellcode is ﬁrst put somewhere at a ﬁxed address in the heap of
the ﬁrmware using legit commands. Reverse engineering allowed us
to discover a few commands which copy large amounts of data from
the host to the heap without alteration, for later use. Optionally,
the debugfs mechanism can be used to ensure that the shellcode is
indeed written to the expected address.
2. The vulnerability is then triggered: the stack overﬂow vulnerability
allows the attacker to take control of pc and redirect the execution
to the shellcode previously put in the heap.
We developed a shellcode which enables the global debug mode ﬂag.
This ﬂag is notably checked by the ﬁrmware iwlmvm/mem implementation
to tell whether write access is allowed, which eventually allows us to read
and write memory using this convenient debugfs mechanism.
This stack overﬂow vulnerability was successfully exploited in the
ﬁrmware version 34.0.1. This vulnerability doesn’t exist anymore in the
ﬁrmware version 46.6f9f215c.0.
3.2
Secure Boot and bypassing it
Locating the Loader The previous sections presented how we interacted
with Intel Wi-Fi chips from Linux and how the code is loaded from
ﬁrmware ﬁles. During the study we wondered whether the veriﬁcation of
the authenticity of the code is implemented in hardware or in some code
running on the LMAC or the UMAC processors. Indeed it is common for
microcontrollers to have a Boot ROM with code which authenticates the
loaded ﬁrmware before running it. If an Intel Wi-Fi chip had such code,
how could we ﬁnd it?
Actually on the studied chip, this is easy:
— the Linux kernel module can read the memory of the chip,
— and the module can also read the program counter registers (pc)
of the chip processors.
We patched iwlwifi to dump parts of the memory and to record the
pc values right before the ﬁrmware was loaded. We found out that most
memory regions contain random data which change at every boot, except
two areas:
— one between addresses 0x00402e80 and 0x00402fff,
— one between addresses 0x00060000 and 0x00061eff.
The second area contains valid ARCompact instructions and
the recorded pc values alternate between 0x0006107e, 0x00061092,
0x00061098 and a few other addresses. So we knew we dumped some
18
Ghost in the Wireless, iwlwiﬁ edition
interesting code. Moreover the ﬁrst instructions of this area include mov
sp, 0x00403000, deﬁning the stack pointer to the top of the ﬁrst area.
The dumped code is quite small (4554 bytes) and, surprisingly, it does
not include any implementation of RSA or SHA256 algorithms. How could
it verify the ﬁrmware signature?
Studying more closely the data we got shows that at address
0x00061e00 is located the same RSA2048 public key as in the ﬁrmware
ﬁle. This key is used by a function at 0x00060fa8. After more analysis
we found out that the dumped code uses this key with some hardware
registers in the following sequence:
— Write 1 and 0 to the peripheral register located at 0x00a24b08.
— Write 3 to 0x00a24b00.
— Write the 256 bytes of the public key to 0x00a24900, 0x00a24901,
etc.
— Write the 256 bytes of the ﬁrmware signature to 0x00a24800,
0x00a24801, etc.
— Write 1 to 0x00a2506c and 0x00a25064.
— Wait for the lowest bit of peripheral register located at 0x00a24b04
to become zero.
— Read the decrypted RSA signature from 0x00a24a00.
— Write 1 to 0x00a20804.
This code probably drives a coprocessor which decrypts RSA2048
signatures in PKCS#1 v1.5 format. Other peripheral registers are used
in a similar way, to compute the SHA256 digest of the ﬁrmware being
loaded. Such coprocessors are usually called cryptographic accelerators
and it is normal to see one on a Wi-Fi chip, which could oﬄoad some
cryptographic operations to dedicated hardware.
This new knowledge of the cryptoprocessor enabled looking for code
referencing its addresses in the ﬁrmware. And indeed the UMAC code
uses the cryptoprocessor in a similar way to verify some signatures, for
example when processing FW_PAGING_BLOCK_CMD commands.
Bypassing Secure Boot Linux loads a ﬁrmware on the Wi-Fi chip by
sending its sections. We previously described (in section 2.4) that it is
not possible to directly modify the content of these sections. By reverse-
engineering the code of the loader, we found the code which computed
a SHA256 digest over all the sections. The loader needs to implement
this to verify a RSA-2048 signature embedded in the ﬁrst section (using a
cryptoprocessor).
N. Iooss, G. Campana
19
This code does not wait for the full ﬁrmware to be received before
computing its digest, but updates the SHA256 state after each section is
received. Does it mean that an attacker can modify a section after it has
been veriﬁed? We patched the Linux kernel in order to send a section twice:
once with the original content, and a second time with some modiﬁcations.
This failed. The ﬁrmware started successfully but the modiﬁcations were
ignored. Digging further, we discovered that the loader modiﬁes some
hardware registers of the chip after receiving a section. We suppose this
locked some memory pages to make them no longer writable from Linux.
In short, when the ﬁrmware loader starts, Linux is allowed to write to
most of the memory of the chip, and the memory progressively becomes
read-only while the ﬁrmware is loaded. But the memory does not solely
contain the ﬁrmware: it also contains the loader! And trying to write to
the loader data actually works!!
More
precisely,
when
we
call
Linux’s
function
iwl_trans_pcie_write_mem
to
write
some
data
at
0x00402e80
before loading the ﬁrmware, we manage to read the new data back (using
iwl_trans_pcie_read_mem). The stack of the loader is located at this
address, so it is possible to overwrite some return address to make the
loader execute our code (which can be written using the normal ﬁrmware
loading interface). The attack therefore consists in writing a modiﬁed
ﬁrmware to the memory of the chip, replacing a return address with zero
in the stack of the loader, and notifying the loader that the ﬁrmware is
loaded. This works ﬁne on the ﬁrst Wi-Fi chip studied (Intel Dual Band
Wireless AC 8260), but not on the second one (Intel Wireless-AC 9560
160MHz).
On the second chip, we observe that the value we read back after
modifying the stack is successfully modiﬁed, but the loader seems to
ignore it. Another thing was strange: despite the loader using some global
variables in memory, we do not see these variables change when reading
their values. We suppose this is caused by a caching mechanism: the
content of the stack is used from a cache memory of the Wi-Fi chip.
As the read/write access from the Linux driver modiﬁes the physical
memory directly without invalidating the cache, the chip ignores these
modiﬁcations.
To ﬁx the attack, we modiﬁed the ﬁrmware image in order to force
cached data to be ﬂushed to the memory. One way to achieve this consists
in increasing the number of sections which are loaded by the chip. This
number is actually present in the ﬁrst section transmitted to the chip
20
Ghost in the Wireless, iwlwiﬁ edition
(the one which contains the signature). By declaring that the ﬁrmware
contains 196 sections (listing 16), the behavior of the chip changes:
— When trying to load this ﬁrmware directly, the chip refuses to boot
and a SecBoot message appears in the kernel log. This is expected,
because the modiﬁed section is included in the signed data.
— When trying to load this ﬁrmware while overwriting a code address
on the stack, the chip successfully boots.
1
import
struct
2
3
old_section = get_first_section ("iwlwifi -9000 -pu -b0 -jf -b0 -46. ucode")
4
new_section = (
5
old_section [:0 x284] +
# Header
with
RSA
signature
6
# Define
196
fake
sections
at
address 0 with
size
0.
7
struct.pack("<I", 196) +
8
struct.pack("<IIII", 7, 8, 0, 0) * 196
9
)
Listing 16. Extract of a Python script which modiﬁes the ﬁrst section
More precisely we identiﬁed in the dumped stack, at 0x00402fc0, the
code address 0x00060f7a. This address is right after a function call,23 in
the code of the ﬁrmware (listing 17).
1
00060 f70
f1 c0
push_s
blink
2
00060 f72
66 0c 8f ff
bl
FUN_000603d4
( initialize
things)
3
00060 f76
e6 0b 8f ff
bl
FUN_00060358
( compute
SHA256)
4
(the
value
at 0 x00402fc0
is
here)
5
00060 f7a
7e 0d 8f ff
bl
FUN_000604f4
(verify
RSA
signature )
6
00060 f7e
d1 c0
pop_s
blink
7
00060 f80
e0 7e
j_s
blink
Listing 17. Attacked function of the Wi-Fi chip loader (ARCompact assembly)
We
perform
the
attack
by
modifying
the
function
iwl_pcie_load_cpu_sections_8000 24 (in the iwlwifi kernel module)
to write zero to 0x00402fc0 (listing 18). This actually bypasses the call
to the function which veriﬁes the RSA signature and directly starts the
loaded ﬁrmware.
1
iwl_trans_grab_nic_access (trans);
2
unsigned
int
iterations ;
3
for ( iterations = 0;
iterations
< 70000;
iterations ++) {
4
iwl_write32 (trans , HBUS_TARG_MEM_WADDR , 0 x00402fc0 );
23 In ARCompact, instruction bl peforms a branch with link operation, used to call a
function.
24 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/pcie/trans.c#L719
N. Iooss, G. Campana
21
5
iwl_write32 (trans , HBUS_TARG_MEM_WDAT , 0);
6
}
7
iwl_trans_release_nic_access (trans);
Listing 18. Loop added to iwlwiﬁ to bypass the signature veriﬁcation
Being able to load arbitrary code on a Wi-Fi chip greatly helps ana-
lyzing how it works. In the remaining parts of this article, we will present
some experiments enabled by this access.
4
Use Cases and Practical Applications
4.1
Understanding the Paging Memory
Going beyond physical memory The studied ﬁrmware ﬁle deﬁned
a section at address 0x01000000 with 241664 bytes (cf. listing 8 in sec-
tion 2.2). Contrary to the other sections, this one is not loaded directly in
the memory of the chip. Instead, iwlwifi allocates speciﬁc buﬀers in the
main memory and transmits their physical addresses to the chip, using
a FW_PAGING_BLOCK_CMD command in function iwl_send_paging_cmd.25
This means that this code is loaded once the LMAC and the UMAC
processors have already been started. At this point, we wondered: where
is this code stored in the Wi-Fi chip? How is it authenticated?
The second question is simple to answer: the implementation of
the FW_PAGING_BLOCK_CMD command in the UMAC code (at address
0x80452184) reads all the pages using DMA transfers and verify a
RSA2048-SHA256 signature provided by a Code Signature Section. How-
ever, all DMA transfers target the same 4096-byte page on the memory of
the chip, at 0x00447000. So the data is not actually kept by the chip.
The host physical addresses of the blocks are saved in a structure
iwl_fw_paging_cmd 26 at address 0xc0885774. We retrieve the content
of the structure from the chip using the debug ﬁlesystem (cf. section 3.1)
and decode it according to the structure deﬁnition (listing 19).
1
struct
iwl_fw_paging_cmd
at 0 xc0885774 :
2
* flags = 0x303: 0x200=secured , 0x100=enabled , 3 pages
in
last
block
3
* block_size = 15 (0 x8000 = 32768
bytes/block , 8 pages/block)
4
* block_num = 8
5
Block
addresses :
6
Host
phys 0 x10b976000 = Code
Signature
Section
25 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/fw/paging.c#L232
26 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/fw/api/paging.h#L22
22
Ghost in the Wireless, iwlwiﬁ edition
7
Host
phys 0 x10b9f0000 = Paging
mem 0 x01000000
8
Host
phys 0 x10b9f8000 = Paging
mem 0 x01008000
9
Host
phys 0 x10ba00000 = Paging
mem 0 x01010000
10
Host
phys 0 x10ba08000 = Paging
mem 0 x01018000
11