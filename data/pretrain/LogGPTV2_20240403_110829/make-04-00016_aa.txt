|  | machine learning & |  |
|---|---|---|
|  |knowledge extraction | |
Article
VloGraph: A Virtual Knowledge Graph Framework for
Distributed Security Log Analysis
Kabul Kurniawa1,2,*, Andreas Ekelhart3,4, Elmar Kiesling1, Dietmar Winkler5, Gerald Quirchmayr2
and A Min Tjoa5
1 	Institute for Data, Process and Knowledge Management, Vienna University of Economics and Business,1020 Vienna, Austria; PI:EMAIL
2 	Research Group Multimedia Information Systems, University of Vienna, 1090 Vienna, Austria;
PI:EMAIL
3 	Research Group Security and Privacy, University of Vienna, 1090 Vienna, Austria;
PI:EMAIL
4 	SBA Research, 1040 Vienna, Austria
5 	Information and Software Engineering, Vienna University of Technology, 1040 Vienna, Austria;PI:EMAIL (D.W.); PI:EMAIL (A.M.T.)
* 	Correspondence: PI:EMAIL
Abstract: The integration of heterogeneous and weakly linked log data poses a major challenge in
many log-analytic applications. Knowledge graphs (KGs) can facilitate such integration by providing
a versatile representation that can interlink objects of interest and enrich log events with backgroundknowledge. Furthermore, graph-pattern based query languages, such as SPARQL, can support rich
log analyses by leveraging semantic relationships between objects in heterogeneous log streams.
Constructing, materializing, and maintaining centralized log knowledge graphs, however, poses
|  |  | significant challenges. To tackle this issue, we propose VloGraph—a distributed and virtualized alternative to centralized log knowledge graph construction. The proposed approach does not involve any a priori parsing, aggregation, and processing of log data, but dynamically constructs a virtual log KG from heterogeneous raw log sources across multiple hosts. To explore the feasibility of this approach, we developed a prototype and demonstrate its applicability to three scenarios. Furthermore, we evaluate the approach in various experimental settings with multiple heterogeneous log sources and machines; the encouraging results from this evaluation suggest that the approach can enable efficient graph-based ad-hoc log analyses in federated settings. ||---|---|---|| Citation: Kurniawan, K.; Ekelhart, A.; Kiesling, E.; Winkler, D.; Quirchmayr, G.; Tjoa, A.M. VloGraph: A Virtual Knowledge Graph Framework for Distributed Security Log Analysis. Mach. Learn. Knowl. Extr. 2022, 4, |Citation: Kurniawan, K.; Ekelhart, A.; Kiesling, E.; Winkler, D.; Quirchmayr, G.; Tjoa, A.M. VloGraph: A Virtual Knowledge Graph Framework for Distributed Security Log Analysis. Mach. Learn. Knowl. Extr. 2022, 4, |significant challenges. To tackle this issue, we propose VloGraph—a distributed and virtualized alternative to centralized log knowledge graph construction. The proposed approach does not involve any a priori parsing, aggregation, and processing of log data, but dynamically constructs a virtual log KG from heterogeneous raw log sources across multiple hosts. To explore the feasibility of this approach, we developed a prototype and demonstrate its applicability to three scenarios. Furthermore, we evaluate the approach in various experimental settings with multiple heterogeneous log sources and machines; the encouraging results from this evaluation suggest that the approach can enable efficient graph-based ad-hoc log analyses in federated settings. |371–396. 
	Keywords: semantic log analysis; virtual log graphs; dynamic log extraction; decentralized logquerying;
Academic Editor: Ján Paraliˇc 	forensics
Received: 25 February 2022
Accepted: 3 April 2022
| Published: 8 April 2022
Publisher’s Note: MDPI stays neutral with regard to jurisdictional claims in published maps and institutional affil-iations.
 | Published: 8 April 2022| Published: 8 April 2022
Publisher’s Note: MDPI stays neutral with regard to jurisdictional claims in published maps and institutional affil-iations.
 | Published: 8 April 2022
Publisher’s Note: MDPI stays neutral with regard to jurisdictional claims in published maps and institutional affil-iations.
 | Published: 8 April 2022
Publisher’s Note: MDPI stays neutral with regard to jurisdictional claims in published maps and institutional affil-iations.| Published: 8 April 2022
Publisher’s Note: MDPI stays neutral with regard to jurisdictional claims in published maps and institutional affil-iations.
 | 1. IntroductionLog data analysis is a crucial task in cybersecurity, e.g., when monitoring and audit-ing systems, collecting threat intelligence, conducting forensic investigations of incidents, and pro-actively hunting threats [1]. Currently available log analysis solutions, such as Security Information and Event Management (SIEM) systems, support the process by aggregating log data as well as storing and indexing log messages in a central relational database [2]. With their strict schemas, however, such databases are limited in their ability to represent links between entities [3]. This results in a lack of explicit links between heterogeneous log entries from dispersed log sources in turn makes it difficult to integrate the partial and isolated views on system states and activities reflected in the various logs. Furthermore, the central log aggregation model is also bandwidth-intensive and compu-tationally demanding [2,4,5], which limits its applicability in large-scale infrastructures. Without a dedicated centralized log infrastructure, however, the process necessary to ac-quire, integrate and query log data are tedious and inefficient, which poses a key challenge for security analysts who often face time critical tasks. ||---|---|---|---|---|---|| Copyright: |© 2022 by the authors. |© 2022 by the authors. |© 2022 by the authors. |© 2022 by the authors. |1. Introduction Log data analysis is a crucial task in cybersecurity, e.g., when monitoring and audit-ing systems, collecting threat intelligence, conducting forensic investigations of incidents, and pro-actively hunting threats [1]. Currently available log analysis solutions, such as Security Information and Event Management (SIEM) systems, support the process by aggregating log data as well as storing and indexing log messages in a central relational database [2]. With their strict schemas, however, such databases are limited in their ability to represent links between entities [3]. This results in a lack of explicit links between heterogeneous log entries from dispersed log sources in turn makes it difficult to integrate the partial and isolated views on system states and activities reflected in the various logs. Furthermore, the central log aggregation model is also bandwidth-intensive and compu-tationally demanding [2,4,5], which limits its applicability in large-scale infrastructures. Without a dedicated centralized log infrastructure, however, the process necessary to ac-quire, integrate and query log data are tedious and inefficient, which poses a key challenge for security analysts who often face time critical tasks. || Licensee MDPI, Basel, Switzerland. This article is an open access article |Licensee MDPI, Basel, Switzerland. This article is an open access article |Licensee MDPI, Basel, Switzerland. This article is an open access article |Licensee MDPI, Basel, Switzerland. This article is an open access article |Licensee MDPI, Basel, Switzerland. This article is an open access article |1. Introduction Log data analysis is a crucial task in cybersecurity, e.g., when monitoring and audit-ing systems, collecting threat intelligence, conducting forensic investigations of incidents, and pro-actively hunting threats [1]. Currently available log analysis solutions, such as Security Information and Event Management (SIEM) systems, support the process by aggregating log data as well as storing and indexing log messages in a central relational database [2]. With their strict schemas, however, such databases are limited in their ability to represent links between entities [3]. This results in a lack of explicit links between heterogeneous log entries from dispersed log sources in turn makes it difficult to integrate the partial and isolated views on system states and activities reflected in the various logs. Furthermore, the central log aggregation model is also bandwidth-intensive and compu-tationally demanding [2,4,5], which limits its applicability in large-scale infrastructures. Without a dedicated centralized log infrastructure, however, the process necessary to ac-quire, integrate and query log data are tedious and inefficient, which poses a key challenge for security analysts who often face time critical tasks. || distributed |under |the |terms |and |1. Introduction Log data analysis is a crucial task in cybersecurity, e.g., when monitoring and audit-ing systems, collecting threat intelligence, conducting forensic investigations of incidents, and pro-actively hunting threats [1]. Currently available log analysis solutions, such as Security Information and Event Management (SIEM) systems, support the process by aggregating log data as well as storing and indexing log messages in a central relational database [2]. With their strict schemas, however, such databases are limited in their ability to represent links between entities [3]. This results in a lack of explicit links between heterogeneous log entries from dispersed log sources in turn makes it difficult to integrate the partial and isolated views on system states and activities reflected in the various logs. Furthermore, the central log aggregation model is also bandwidth-intensive and compu-tationally demanding [2,4,5], which limits its applicability in large-scale infrastructures. Without a dedicated centralized log infrastructure, however, the process necessary to ac-quire, integrate and query log data are tedious and inefficient, which poses a key challenge for security analysts who often face time critical tasks. || conditions of the Creative Commons Attribution (CC BY) license (creativecommons.org/licenses/by/ 4.0/). |conditions of the Creative Commons Attribution (CC BY) license (creativecommons.org/licenses/by/ 4.0/). |conditions of the Creative Commons Attribution (CC BY) license (creativecommons.org/licenses/by/ 4.0/). |conditions of the Creative Commons Attribution (CC BY) license (creativecommons.org/licenses/by/ 4.0/). |conditions of the Creative Commons Attribution (CC BY) license (creativecommons.org/licenses/by/ 4.0/). |1. Introduction Log data analysis is a crucial task in cybersecurity, e.g., when monitoring and audit-ing systems, collecting threat intelligence, conducting forensic investigations of incidents, and pro-actively hunting threats [1]. Currently available log analysis solutions, such as Security Information and Event Management (SIEM) systems, support the process by aggregating log data as well as storing and indexing log messages in a central relational database [2]. With their strict schemas, however, such databases are limited in their ability to represent links between entities [3]. This results in a lack of explicit links between heterogeneous log entries from dispersed log sources in turn makes it difficult to integrate the partial and isolated views on system states and activities reflected in the various logs. Furthermore, the central log aggregation model is also bandwidth-intensive and compu-tationally demanding [2,4,5], which limits its applicability in large-scale infrastructures. Without a dedicated centralized log infrastructure, however, the process necessary to ac-quire, integrate and query log data are tedious and inefficient, which poses a key challenge for security analysts who often face time critical tasks. ||  | | | | | |
Mach. Learn. Knowl. Extr. 2022, 4, 371–396. 
Mach. Learn. Knowl. Extr. 2022, 4 372To illustrate the issue, consider the example in Figure 1. It is based on log data produced by multi-step attacks as described in [6]. These log data sets will also be used in a scenario in Section 7. The various steps of the attack are reflected in a large number of log messages in a diverse set of log sources dispersed across multiple hosts and files (e.g., Syslog, ApacheLog, AuthLog, MailLog etc.). Vulnerability Scan, for instance—which scans a system for known vulnerabilities—leaves some traces in multiple log sources such as Syslog and ApacheLog on Host1 and Host3, respectively. User Enumeration—an activity that aims to guess or confirm valid users in a system—also leaves some traces in (AuthLog, MailLog etc.) stored on Host1 and Host2. As this example shows, a single attack step typically results in a large number of log events that capture comprehensive information. This information can be used for log analysis and attack investigation, but correlating, tracing, and connecting the individual indicators of compromise—e.g., through timestamps, IP addresses, user names, processes and so forth—is typically a challenging and often time-consuming task. This is partly due to the weak structure of log sources and their inconsistent format and terminologies. Consequently, it is difficult to get a complete picture of suspicious activities and understand what happened in a given attack—particularly in the face of fast evolving, large volume, and highly scattered log data.Figure 1. Motivating example illustrating that attack steps leave traces in various log sources across
multiple hosts, making it difficult to reconstruct what happened.
To tackle these challenges, we propose VloGraph, a decentralized framework to contex-tualize, link, and query log data. We originally introduced this framework in [7]; in this paper, we extend this prior work with a detailed requirements specification, evaluation with two additional application scenarios, and a section reflecting upon graph-based log integration and analysis, decentralization and virtualization, and discussing applications and limitations.More specifically, we introduce a method to execute federated, graph pattern-based queries over dispersed, heterogeneous raw log data by dynamically constructing virtual knowledge graphs [8,9]. This knowledge-based approach is designed to be decentralized, flexible and scalable. To this end, it (i) federates graph-pattern based queries across end-points, (ii) extracts only potentially relevant log messages, (iii) integrates the dispersed log events into a common graph, and (iv) links them to background knowledge.All of these steps are executed at query time without any up-front ingestion and conversion of log messages.
Figure 2 illustrates the proposed approach; the virtual log knowledge graph at the center of the figure is constructed dynamically from dispersed log sources based on analysts’queries and linked to external and internal knowledge sources.
Mach. Learn. Knowl. Extr. 2022, 4 373Mach. Learn. Knowl. Extr. 2022, 4 373
Figure 2. Concept overview.A key advantage of the graph-based model of this virtual knowledge graph is that it provides a concise, flexible, and intuitive abstraction for the representation of various relations such as, e.g., connections in networked systems, hierarchies of processes on endpoints, associations between users and services, and chains of indicators of compromise. These connections automatically link log messages that are related through common entities (such as users, hosts, and IP addresses); such links are crucial in cybersecurity investigations, as threat agent activities typically leave traces in various log files that are often spread across multiple endpoints in a network, particularly in discovery, lateral movement, and exfiltration stages of an attack ATT&CK Matrix for Enterprise [10].In contrast to traditional workflows that store log messages in a centralized repos-itory, VloGraph shifts the log parsing workload from ingestion to analysis time. This makes it possible to directly access and dynamically integrate the most granular raw log data without any loss of information that would occur if the logs were pre-filtered and aggregated—typical steps performed before transferring them to a central archive.VloGraph tackles a number of pressing challenges in security log analysis (discussed in Section 4) and facilitates (i) ad-hoc integration and semantic analyses on raw log data without prior centralized materialization, (ii) the collection of evidence-based knowledge from heterogeneous log sources, (iii) automated linking of fragmented knowledge about system states and activities, and (iv) automated linking to external security knowledge (such as, e.g., attack patterns, threat implications, actionable advice).The remainder of this paper is organized as follows: Section 2 introduces background knowledge as conceptual foundation, including semantic standards and virtual knowledge graphs. Section 3 provides an overview of related work in this area, and in Section 4, we discuss challenges in log analysis and derive requirements for our approach. Section 5 introduces the proposed VloGraph architecture and describes the components for virtual log knowledge graph construction in detail. In Section 6 we present a prototypical im-plementation of the architecture and illustrate its use in three application scenarios. We evaluate our approach on a systematically generated log dataset in Section 7 and discuss benefits and limitations of the presented approach in Section 8. Finally, we conclude with an outlook on future work in Section 9.2. Background