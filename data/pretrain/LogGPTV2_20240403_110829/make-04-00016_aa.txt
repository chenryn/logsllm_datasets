# VloGraph: A Virtual Knowledge Graph Framework for Distributed Security Log Analysis

## Authors
Kabul Kurniawan<sup>1,2,*</sup>, Andreas Ekelhart<sup>3,4</sup>, Elmar Kiesling<sup>1</sup>, Dietmar Winkler<sup>5</sup>, Gerald Quirchmayr<sup>2</sup>, and A Min Tjoa<sup>5</sup>

### Affiliations
1. Institute for Data, Process and Knowledge Management, Vienna University of Economics and Business, 1020 Vienna, Austria; Email: [PI:EMAIL]
2. Research Group Multimedia Information Systems, University of Vienna, 1090 Vienna, Austria; Email: [PI:EMAIL]
3. Research Group Security and Privacy, University of Vienna, 1090 Vienna, Austria; Email: [PI:EMAIL]
4. SBA Research, 1040 Vienna, Austria
5. Information and Software Engineering, Vienna University of Technology, 1040 Vienna, Austria; Email: [D.W.]; Email: [A.M.T.]

* Correspondence: [PI:EMAIL]

## Abstract
The integration of heterogeneous and weakly linked log data is a significant challenge in many log-analytic applications. Knowledge graphs (KGs) can facilitate this integration by providing a versatile representation that interlinks objects of interest and enriches log events with background knowledge. Graph-pattern-based query languages, such as SPARQL, can support rich log analyses by leveraging semantic relationships between objects in heterogeneous log streams. However, constructing, materializing, and maintaining centralized log knowledge graphs pose significant challenges.

To address these issues, we propose VloGraph—a distributed and virtualized alternative to centralized log knowledge graph construction. This approach does not involve any a priori parsing, aggregation, or processing of log data but dynamically constructs a virtual log KG from heterogeneous raw log sources across multiple hosts. To explore the feasibility of this approach, we developed a prototype and demonstrated its applicability in three scenarios. Furthermore, we evaluated the approach in various experimental settings with multiple heterogeneous log sources and machines. The encouraging results suggest that our approach can enable efficient graph-based ad-hoc log analyses in federated settings.

## Citation
Kurniawan, K.; Ekelhart, A.; Kiesling, E.; Winkler, D.; Quirchmayr, G.; Tjoa, A.M. VloGraph: A Virtual Knowledge Graph Framework for Distributed Security Log Analysis. Mach. Learn. Knowl. Extr. 2022, 4, 371–396.

**Keywords:** semantic log analysis, virtual log graphs, dynamic log extraction, decentralized log querying, forensics

**Academic Editor:** Ján Paralič

**Received:** 25 February 2022  
**Accepted:** 3 April 2022  
**Published:** 8 April 2022

**Publisher’s Note:** MDPI stays neutral with regard to jurisdictional claims in published maps and institutional affiliations.

## 1. Introduction
Log data analysis is a crucial task in cybersecurity, particularly for monitoring and auditing systems, collecting threat intelligence, conducting forensic investigations of incidents, and proactively hunting threats [1]. Currently available log analysis solutions, such as Security Information and Event Management (SIEM) systems, support the process by aggregating log data and storing and indexing log messages in a central relational database [2]. However, these databases, with their strict schemas, are limited in their ability to represent links between entities [3], resulting in a lack of explicit connections between heterogeneous log entries from dispersed log sources. This makes it difficult to integrate the partial and isolated views on system states and activities reflected in the various logs. Additionally, the central log aggregation model is bandwidth-intensive and computationally demanding [2,4,5], which limits its applicability in large-scale infrastructures. Without a dedicated centralized log infrastructure, acquiring, integrating, and querying log data are tedious and inefficient, posing a key challenge for security analysts who often face time-critical tasks.

### Example
Consider the example in Figure 1, based on log data produced by multi-step attacks as described in [6]. These log data sets will also be used in a scenario in Section 7. The various steps of the attack are reflected in a large number of log messages in a diverse set of log sources dispersed across multiple hosts and files (e.g., Syslog, ApacheLog, AuthLog, MailLog, etc.). For instance, a vulnerability scan, which scans a system for known vulnerabilities, leaves traces in multiple log sources such as Syslog and ApacheLog on Host1 and Host3, respectively. User enumeration, an activity that aims to guess or confirm valid users in a system, also leaves traces in (AuthLog, MailLog, etc.) stored on Host1 and Host2. As this example shows, a single attack step typically results in a large number of log events that capture comprehensive information. This information can be used for log analysis and attack investigation, but correlating, tracing, and connecting the individual indicators of compromise—e.g., through timestamps, IP addresses, user names, processes, and so forth—is typically a challenging and time-consuming task. This is partly due to the weak structure of log sources and their inconsistent format and terminologies. Consequently, it is difficult to get a complete picture of suspicious activities and understand what happened in a given attack, especially in the face of fast-evolving, large-volume, and highly scattered log data.

![Figure 1: Motivating example illustrating that attack steps leave traces in various log sources across multiple hosts, making it difficult to reconstruct what happened.](figure1.png)

### Proposed Solution
To tackle these challenges, we propose VloGraph, a decentralized framework to contextualize, link, and query log data. We originally introduced this framework in [7]; in this paper, we extend this prior work with a detailed requirements specification, evaluation with two additional application scenarios, and a section reflecting upon graph-based log integration and analysis, decentralization and virtualization, and discussing applications and limitations.

More specifically, we introduce a method to execute federated, graph pattern-based queries over dispersed, heterogeneous raw log data by dynamically constructing virtual knowledge graphs [8,9]. This knowledge-based approach is designed to be decentralized, flexible, and scalable. It (i) federates graph-pattern-based queries across endpoints, (ii) extracts only potentially relevant log messages, (iii) integrates the dispersed log events into a common graph, and (iv) links them to background knowledge. All of these steps are executed at query time without any up-front ingestion and conversion of log messages.

![Figure 2: Concept overview.](figure2.png)

A key advantage of the graph-based model of this virtual knowledge graph is that it provides a concise, flexible, and intuitive abstraction for the representation of various relations, such as connections in networked systems, hierarchies of processes on endpoints, associations between users and services, and chains of indicators of compromise. These connections automatically link log messages that are related through common entities (such as users, hosts, and IP addresses); such links are crucial in cybersecurity investigations, as threat agent activities typically leave traces in various log files that are often spread across multiple endpoints in a network, particularly in the discovery, lateral movement, and exfiltration stages of an attack [10].

In contrast to traditional workflows that store log messages in a centralized repository, VloGraph shifts the log parsing workload from ingestion to analysis time. This allows direct access and dynamic integration of the most granular raw log data without any loss of information that would occur if the logs were pre-filtered and aggregated—typical steps performed before transferring them to a central archive. VloGraph tackles several pressing challenges in security log analysis (discussed in Section 4) and facilitates (i) ad-hoc integration and semantic analyses on raw log data without prior centralized materialization, (ii) the collection of evidence-based knowledge from heterogeneous log sources, (iii) automated linking of fragmented knowledge about system states and activities, and (iv) automated linking to external security knowledge (such as, e.g., attack patterns, threat implications, actionable advice).

The remainder of this paper is organized as follows: Section 2 introduces background knowledge as a conceptual foundation, including semantic standards and virtual knowledge graphs. Section 3 provides an overview of related work in this area, and in Section 4, we discuss challenges in log analysis and derive requirements for our approach. Section 5 introduces the proposed VloGraph architecture and describes the components for virtual log knowledge graph construction in detail. In Section 6, we present a prototypical implementation of the architecture and illustrate its use in three application scenarios. We evaluate our approach on a systematically generated log dataset in Section 7 and discuss benefits and limitations of the presented approach in Section 8. Finally, we conclude with an outlook on future work in Section 9.

## 2. Background
[Content of Section 2 goes here]