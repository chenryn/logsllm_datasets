have
LUPD(op, (id, w)) = L(cid:48)(op, id).
this captures the fact
Intuitively,
that an update operation
computationally hides the underlying keyword w, and hence it
cannot be correlated with any previous search query involving
w by a computationally bounded adversary.
We now examine whether ODXT is forward private as
per this deﬁnition. Since LUPD
ODXT(op, (id, w)) = ⊥, an update
operation in ODXT hides not only the underlying keyword w,
but also the identiﬁer id and the operation op. In other words,
the following is a natural corollary of Theorem-1:
Corollary-1 (Forward Privacy of ODXT). Assuming that F
and Fp are secure PRFs and the decisional Difﬁe-Hellman
assumption holds over the group G, ODXT is adaptively
forward private.
G. Backward Privacy of ODXT
leakage function L = (cid:0)LSETUP,LSEARCH,LUPD(cid:1) is adaptively
Next, we formally describe the backward privacy guaran-
tees of ODXT. According to the formal deﬁnition introduced
by Bost et al. [6], a dynamic SSE scheme that supports single
keyword searches and is adaptively secure with respect to some
Type-II backward private if there exist stateless functions L(cid:48)(cid:48)
and L(cid:48)(cid:48)(cid:48) such that for any (op, id, w), we have
LUPD(op, (id, w)) = L(cid:48)(cid:48)(op, id)),
and
LSEARCH(w) = L(cid:48)(cid:48)(cid:48)(TimeDB(w), Upd(w)).
We now examine whether ODXT is forward backward as
per this deﬁnition. Recall that we have
LUPD
ODXT(op, (id, w)) = ⊥,LSEARCH
ODXT (q) = (TimeDB(q), Upd(q)),
for any conjunctive query q. This is a natural generalization
of the aforementioned leakage proﬁle for Type-II backward
privacy from the setting of single keyword searches to our
setting of conjunctive keyword searches. Hence, the following
is also a natural corollary of Theorem-1:
Corollary-2 (Backward Privacy of ODXT). Assuming that
F and Fp are secure PRFs and the decisional Difﬁe-Hellman
assumption holds over the group G, ODXT is adaptively Type-
II backward private.
H. Discussion on the Leakage Proﬁle of ODXT
In this subsection, we present a more in-depth analysis of
the leakage proﬁle for ODXT during conjunctive searches and
its implications.
Output Leakage. We begin by noting that the output leak-
age (alternatively, the result pattern leakage) is incurred by
nearly all existing SSE schemes, including static and dynamic
schemes, in the setting of both single and conjunctive keyword
searches (such as in [14], [9], [29], [6], [10], [37]). This is
usually considered acceptable in the SSE literature; indeed the
few known data/query recovery attacks that manage to exploit
this leakage ([22], [7], [38], [3]) assume extremely strong
adversarial models where the adversary has partial knowledge
of the plaintext database/queries.
s-Term Leakages. We focus next on the leakages related to
the s-term, namely, the total number of operations on the s-
term and the timestamps corresponding to these operations.
We begin by noting that these leakages are somewhat inherent
in our design paradigm, which attempts to tie both the search
complexity and the leakage to the s-term, as it has the least
frequency of occurrence. We draw parallels with conjunctive
SSE schemes in the static setting, most notably the scheme of
Cash et al. [9] and the more recent scheme of Lai et al. [29],
which incur similar s-term leakages.
In the setting of single keyword search, existing forward
and Type-II backward private SSE schemes [6], [10], [37] also
incur leakages of update patterns; the only constructions not
to incur such leakages seem to rely on the use of ORAM-
style data structures [6], [10]. Fortifying ODXT with such data
structures in an attempt to prevent this leakage is an interesting
open challenge, although this would probably have to trade-
off with some degradation in search performance (mostly in
terms of communication complexity and number of rounds of
communication during searches).
It is also possible (and perhaps conceptually simpler) to
mask this leakage by using volume-hiding techniques such
as padding [14], [25] where for the s-term w1, the client
additionally sends a randomly chosen set of dummy stoken
keys to the server, such that the total number of stoken keys
sent is the same for all queries. This would incur a degradation
in search performance, and it is up to the designer to decide
on a suitable trade-off between performance and leakage.
However, we would like to point out that there are no
known data/query recovery attacks on either static or dynamic
conjunctive SSE schemes that specially exploit leakages re-
lated to the s-term. So we believe that even without the afore-
mentioned fortiﬁcations, it appears that our ODXT scheme is
not vulnerable to any known attacks due to the leakages related
to the s-term.
x-Term Leakages. Next, we focus on the x-term leakages.
We again draw parallels with conjunctive SSE schemes in
the static setting, most notably the scheme of Cash et al. [9]
and the more recent scheme of Lai et al. [29], which incur
similar x-term leakages. The only known attack on conjunctive
SSE schemes that exploits a form of x-term leakages is the
ﬁle injection attack proposed by Zhang et al. in [38]. More
concretely, the adversarial server must be able to compute
|DB(w1) ∩ DB(wi)| when processing the search query.
We note however that for ﬁle injection attacks to work
efﬁciently, the adversarial server must recover, for every x-
term wi, the result size corresponding to each sub-query of
the form w1 ∩ wi. However, the x-term leakage proﬁle of
ODXT is not sufﬁcient to compute this term, since the set
of xtoken values sent to the server is randomly permuted
precisely to mask such inference-style attacks. In addition,
in ODXT, the server only learns update histories, and not
the exact correspondences between insertions and deletions on
the same identiﬁer-keyword pair, which is also necessary for
inferring the aforementioned information.
Once again, either implementing the XSet using ORAM-
style data structures or adopting volume-hiding techniques
such as padding may be useful in masking this leakage even
further; however, even without such additional fortiﬁcations,
it appears that our ODXT scheme is not vulnerable to ﬁle
injection attacks, or any other known attacks for that matter,
due to the leakages related to the x-terms in a conjunctive
query.
I. ODXT in the Multi-Client Setting
As already discussed, ODXT removes the need for an
additional round of communication between the client and
the server during conjunctive searches. Beyond the obvious
savings in terms of search latency, this also potentially expands
the applicability of ODXT to settings where multiple rounds of
interaction are unsuitable, such as the multi-client SSE setting.
In the multi-client setting, a data owner outsources its
encrypted data to an external server and enables other parties
to perform queries on the encrypted data by providing them
with search tokens for speciﬁc queries. The key requirement is
that external parties should learn no information beyond what
is revealed by the search tokens authorized to them.
Unfortunately, schemes such as BDXT with search opera-
tions involving multiple rounds of client-server communication
are inherently unsuited to the multi-client setting. This is
because such schemes potentially allow the untrusted server to
collude with malicious clients and recover sensitive informa-
tion about queries issued by honest clients [9]. In particular, a
malicious client could gain access to intermediate messages
exchanged between the server and the honest clients, and
exploit them to learn outcomes of queries involving conjuncts
that it was not originally authorized for.
On the other hand, ODXT involves a single round of com-
munication during searches. Hence, it is inherently resistant
to such attacks. In particular, since the only message from
the server to each client is the ﬁnal list of ﬁle identiﬁers
corresponding to the client’s query, there are no intermediate
messages that a malicious client could observe/manipulate to
infer unauthorized information. Consequently, ODXT can be
combined with well-established authorization techniques for
controlled disclosure (such as discussed in [12], [27], [23])
and deployed in the multi-client setting. Additionally, using
techniques introduced by the authors of [23], ODXT can be
extended to hide client-issued queries not only from the server
but also from the token issuing authority.
As a concrete example, when ODXT is implemented in
the multi-client setting, the token generation algorithm can be
implemented using a secure two-party oblivious transfer (OT)
protocol [1], [30] between the client and the token issuing
authority. For simplicity, we can assume that the token issuing
authority is the data owner itself (the same assumption is made
in [23].
In this protocol, the data owner’s input would be the secret
key used to generate search tokens, while the client’s input
would be the keyword(s) that is wishes to search for. At the
end of the protocol, the client would learn the search token(s)
corresponding to its query without gaining any additional
information about the secret key, while the data owner would
13
learn no information about the query issued by the client. After
this, the client can simply forward this search token to the
server, and the search process would be executed exactly as
in the ODXT protocol described in Section III-C. We can
also argue that this affords the client precisely the same query
privacy guarantees against the server as the original ODXT
protocol.
We would also implement an authentication mechanism
that would allow the server to verify that any search token that
it receives from a client was actually issued by the data owner,
and was not forged by the client. This is important to prevent
query privilege escalation attacks wherein a client could try and
issue queries beyond those authorized by the data owner. Since
we are in the semi-honest setting, any standard authentication
mechanism (e.g., existentially unforgeable digital signatures)
would sufﬁce for this purpose.
Finally, using techniques from [23], we can also boost
the security of ODXT in the multi-client setting to withstand
arbitrarily malicious behavior from both the data owner as well
as from a group of (potentially colluding) clients. Such tech-
niques would not compromise the core security and efﬁciency
guarantees of ODXT.
IV. EXPERIMENTAL EVALUATION
In this section, we report on a prototype implementation
of ODXT and compare it with a prototype implementation of
MITRACONJ, which is a na¨ıve adaptation of the MITRA scheme
for conjunctive queries, as well as prototype implementations
of dynamic variants of IEX-2LEV and IEX-ZMF proposed
by Kamara and Moataz [24], which are not backward private.
Implementation Details. Our prototype implementations are
developed in Python (version-3.8) using the PyCrypto library5
for symmetric-key operations and the Sagemath library6 for
group-based operations. More speciﬁcally, we realize all PRF
operations using AES-256 in counter mode, and all group op-
erations in ODXT over the elliptic curve Curve25519 [2]. We
implement the TSet data structure using Riak7, which provides
APIs for realizing distributed NoSQL key-value dictionaries,
while the XSet dictionary is realized using a Bloom ﬁlter [4].
Platform and Dataset Used. For our experiments, we used
a cluster of four 64-bit Intel Xeon E5-2690 v4 2.60GHz
processors, running Ubuntu 18.04.1 LTS, with 128GB RAM
and 1TB SSD hard disk, connected over a 10MBps wide-area
network (WAN).
We used a 60.92GB-sized real world dataset from Wikime-
dia downloads [17], with 16 million documents and 43 million
keywords. We simulated updates by randomly inserting and
deleting documents from the original dataset into an empty
dataset. Overall, we performed a total of 108 update operations,
30% of which were deletions. Our experiments were designed
to ensure that each ﬁle in the 61GB dataset was inserted at
least once; hence the entire database was effectively used.
5https://pycryptodome.readthedocs.io/en/latest/
6http://www.sagemath.org/
7http://basho.com/products/riak-kv/
A. Performance Evaluation
Multi-Threaded Implementations. Our experiments use
multi-threaded implementations of the client and the server. In
particular, for MITRACONJ, the search operation corresponding
to each keyword in the queried conjunction is executed in
parallel. Hence,
in our
experiments is determined purely by the frequency of the most
frequent keyword(s). Similarly, for ODXT, the search opera-
tions corresponding to the x-terms are executed in parallel;
however by design, the search latency in our experiments
depends only on the frequency of the least frequent keyword.
the search latency for MITRACONJ
Search Latency v/s Computational Complexity. Note that
in the setting of multi-threaded implementations, the varia-
tion of search latency with the frequency of keywords in
the queried conjunction do not exactly correspond to the
asymptotic expressions for computational overhead mentioned
in Sections III-A and III-C. In particular, the expressions for
computational overhead take into account the total work done
across all the keywords in the conjunction. Nonetheless, the
core advantage of ODXT over MITRACONJ is also reﬂected in
our experiments evaluating search latency.
Client and Server Latency. Figures 10 and 11 compare the
various schemes with respect to the computational overheads
at the client and the server for conjunctive searches involving
two and six keywords, respectively. ODXT closely matches
IEX-2LEV (despite achieving stronger security guarantees)
and outperforms MITRACONJ and IEX-ZMF in most cases.
The only cases where MITRACONJ either matches or out-
performs ODXT is when all terms in the conjunction have
nearly the same frequency, i.e., either the s-term has very high
frequency of updates, or all x-terms have very low frequency
of updates. However, such queries occur relatively rarely in
practice. For most commonly encountered queries, ODXT
offers signiﬁcantly faster searches.
A simple observation is that in the extreme cases, the
performance for ODXT can be boosted by using only the TSet
to search for every keyword in the conjunction in parallel.
This eliminates the usage of the heavier elliptic machinery,
and achieve performance comparable with MITRACONJ. We
illustrate this when we compare the end-to-end search latency
of ODXT with the other benchmarks in Figure 13.
Communication Overheads. Figure 12 compares the various
schemes with respect
to the communication overheads for
conjunctive searches involving two and multiple keywords,
respectively. For ODXT and IEX-ZMF, the communication
overheads scale with the update-frequency for the least fre-
quent keyword, while in MITRACONJ, the communication over-
heads grow cumulatively with the frequency of each queried
keyword. Note that IEX-ZMF has a constant communication
overhead, but as we show later in Figure 14, this is achieved at
the cost of nearly 100x greater storage as compared to ODXT.
Note: Observe that the ﬂat lines corresponding to MITRACONJ
in Figure 12 have some “bumps” when the frequency of w1
jumps from 106 to 107. For the two-keyword case, this is
explained as follows: since the queries for w1 and w2 are
executed in parallel, the contributions of w1 and w2 towards
the overall communication overhead are proportional to their
14
107
105
103
101
10−1
)
s
m
n
i
(
e
m
T
i
n
o
i
t
a
t
u
p
m
o
C
t
n
e
i
l
C
101
102
ODXT
MITRACONJ
IEX-2LEV
IEX-ZMF
)
s
m
n
i
(
e
m
T
i
n
o
i
t
a
t
u
p
m
o
C
t
n
e
i
l
C
104
103
102
101
100
10−1
10−2
ODXT
MITRACONJ
IEX-2LEV
IEX-ZMF
103
104
105
106
107
101
102
|Upd(w1)|
103
104
105
|Upd(w2)|
)
s
m
n
i