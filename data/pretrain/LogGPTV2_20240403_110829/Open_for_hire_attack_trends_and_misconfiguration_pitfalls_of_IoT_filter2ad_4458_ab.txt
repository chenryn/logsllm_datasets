### 3.1.2 Utilizing Datasets from Project Sonar and Shodan

To identify misconfigured IoT devices, we leverage datasets provided by Project Sonar from Rapid7 [67] and Shodan [73]. These datasets contain essential information such as IP addresses, ports, protocols, headers, and banner information of hosts with open ports identified through scans. We use these datasets to search for misconfigured IoT devices in protocols including Telnet, MQTT, CoAP, AMQP, XMPP, and UPnP. The information from these datasets helps us verify the results obtained from our scans. Since the scan frequencies vary among the datasets, we correlate the results identified across all datasets.

### 3.1.3 Identifying Misconfigured Hosts

Our work considers both TCP and UDP protocols, focusing on vulnerabilities associated with the misconfiguration of these protocols in IoT devices. We specifically target devices that lack authentication, authorization, and encryption configurations. Additionally, many devices with default configurations use default parameters for authentication. To identify vulnerable hosts from the scan data, we classify our methodology into two approaches: Banner-based and Response-Based.

### 3.1.4 Related Work on Network Scanning and Analysis

Jonker et al. [43] use four independent datasets, including honeypots and a network telescope, to perform a comprehensive analysis of gathered attacks. They introduce a new framework for macroscopic characterization of attacks, attack targets, and DDoS protection services. Their findings highlight the global problems caused by DoS attacks and the most targeted types of servers.

Richter et al. analyze unsolicited traffic at firewalls from 89,000 hosts across 1,300 networks of a significant Content Distribution Network [68]. Their findings indicate that localized scanning campaigns likely target narrow regions in the IP address space, differing from Internet-wide scanning services in terms of target selection. The authors compare the suspicious traffic received on the firewalls to the UCSD Darknet Network Telescope [54], providing a comprehensive analysis of scanning services.

### 2.4 IoT-Honeypot Fingerprinting

Honeypot fingerprinting is the process of detecting whether a target system is a honeypot. This can involve active, passive, or both fingerprinting techniques, such as banner-based, static-response, low-interaction libraries, and response times. Honeypot fingerprinting helps adversaries avoid interacting with honeypots, either directly or through malware propagation. Research on honeypot fingerprinting has increased over time, starting with early works by Holz et al. [35] in 2005, who queried target systems for known static responses from honeypots. More recent works include Vetterl et al. [92], who systematically detected known open-source honeypots by analyzing deviations in responses.

A first approach towards the detection of IoT honeypots was proposed by Surnin et al. [80], who detect honeypots emulating SSH and Telnet protocols through multiple checks. In this paper, we also use static banners sent by known IoT honeypots to detect and filter them from our scan results, extending our previous work on honeypot fingerprinting [75].

### 3.2 Banner-based (TCP) Approach

This approach involves analyzing banners received upon a successful connection with the target host. Banner grabbing is a technique used to retrieve more information from the target host, such as type, version, username, and session-related metadata. We use the ZGrab tool to fetch banner information from connected targets for protocols like Telnet, MQTT, AMQP, and XMPP. Table 2 lists sample banners indicating protocol misconfigurations on target devices.

- **Telnet**: We examine banners received from Telnet scans, which try to establish a session with the target host on port 23 or 2323. Upon connecting, the target host sends a banner with basic server information. If the banner contains characters like "$", "root@xxx:∼$", or "admin@xxx:∼$", we infer that the target host accepts unauthenticated connections.
- **MQTT**: The MQTT scan investigates the possibility of connecting to port 1883 without authentication. Banners with "MQTT Connection Code:0" indicate unauthenticated access to MQTT servers.
- **AMQP**: The AMQP scan involves scanning for port 5672 and retrieving metadata like version, product, and supported authentication mechanisms. We refer to the CVE [53] and NIST NVD [59] databases to search for known vulnerable versions.
- **XMPP**: The XMPP scan targets client (port 5222) and server (port 5269) ports, primarily for devices supporting non-TLS connections. Banners are examined for known vulnerabilities, such as accepting plain-text authentication.

### 3.3 Response-based (UDP) Approach

Protocols using UDP do not respond with banners and must be explicitly queried. We target CoAP and UPnP protocols, using the ZMap tool to scan for open ports. The methodology for each protocol is described below.

- **CoAP**: We scan for CoAP port 5683 and query end systems for "/.well-known/core". Responses like "x1C" indicate full access to the target system. Table 3 summarizes some responses and their misconfiguration details.
- **UPnP and SSDP**: We scan for devices with SSDP enabled on port 1900 and trigger a response to a query. Devices exposed to the Internet with SSDP enabled can be recruited for DDoS attacks [17].

### 3.4 Storing and Analyzing Scan Results

The banners and responses received from active scanning and querying are stored in a database for further analysis. We also analyze the responses for known high-severity vulnerabilities from the CVE database. The results are correlated with the open datasets analyzed in Subsection 3.1.2. We find a total of 1,832,893 unique, vulnerable hosts exposed to the Internet, and present our findings and analysis in the results section.

### 3.5 IoT-Honeypot Fingerprinting

From our Internet-scanning methodology, we expect some misconfigured devices to be honeypots, potentially poisoning our result dataset. We perform honeypot fingerprinting to identify and filter these honeypots. Honeypots are deception-based network monitoring systems that proactively detect attacks by simulating protocols and services. We filter honeypots using banner-based honeypot fingerprinting, adapted from existing research by Morishita et al. and Vetterl et al. [55, 92], and extended to detect IoT-based honeypots.

### 3.6 IoT Honeypot Deployment

To determine potential attack vectors and study attack trends, we deploy open-source honeypots in our lab setup, configured to face the Internet without any firewall (see Appendix Section A.3 for details on ensuring honeypots are not used for malicious purposes). The network traffic gathered on these honeypots is analyzed to understand attack trends.

#### 3.6.1 IoT Honeypots

We choose Cowrie [61], HosTaGe [90], Dionaea [83], ThingPot [99], U-Pot [32], and Conpot [69] honeypots, as they are relevant to our study based on emulated protocols and are open source and widely used. These honeypots can simulate IoT-based device profiles, such as CoAP-based smoke sensors or Arduino boards running IoT protocols.

#### 3.6.2 Deployment Setup

The honeypots are deployed in our lab environment with an unfiltered network. They are grouped based on emulated protocols, with each group assigned a public IP address and port-forwarding enabled on routers. All honeypots, except HosTaGe, run as containers on a system with Ubuntu 18.04 LTS Server. The HosTaGe honeypot is deployed on a rooted Samsung S10 Galaxy device. Attacks gathered on the honeypots are exported daily and imported into the database. We record the attacks for one month in April 2021, summarizing the findings in Section 4.

### 3.7 Network-Telescope Analysis

To get a more holistic view of the attack landscape, we analyze FlowTuple data from a network telescope, which is a portion of routed IP address space with no legitimate traffic. This data helps us understand the attack landscape across a large network, in addition to the traffic we receive on our honeypots. Analyzing the traffic on the telescope provides information about remote network events such as flooding DoS attacks, infection of hosts by Internet worms, and network scanning [54].