provided by projects like Project Sonar from Rapid7 [67] and Shodan
[73]. These datasets contain essential information like IP address,
port, protocol, headers, and banner information of the host with the
open ports identified through the scan. We utilize the datasets from
Project Sonar and Shodan to search for misconfigured IoT devices
in Telnet, MQTT, CoAP, AMQP, XMPP, and UPnP. The information
from the datasets assists us in verifying the results obtained from
our scans. The aforementioned datasets vary by scan frequency,
and hence we correlate the results identified in all the datasets.
3.1.3
Identifying misconfigured hosts: The protocols considered
in our work involve both TCP and UDP protocols. We consider vul-
nerabilities associated with the misconfiguration of protocols in IoT
devices. We focus on devices that prominently lack any authentica-
tion, authorization, and encryption configurations. Furthermore,
we derive that many devices with default configurations also use
default parameters for authentication. To identify vulnerable hosts
from the scan data obtained from the above approach, we classify
our methodology into two: Banner-based and Response-Based.
197
Jonker et al. [43] use four independent datasets that include
honeypots and a network telescope to perform a comprehensive
analysis of the gathered attacks and introduce a new framework to
enable a macroscopic characterization of attacks, attack targets, and
DDoS Protection Services. The authors present significant results
regarding the global problems caused by DoS attacks and the most
targeted types of servers.
Lastly, Richter et al. analyze the unsolicited traffic at firewalls
from 89, 000 hosts across 1, 300 networks of a significant Content
Distribution Network [68]. Their findings indicate that localized
scanning campaigns likely target narrow regions in the IP address
space. Their characteristics vary compared to the Internet-wide
scanning services in terms of target selection. The authors further
compare the suspicious traffic received on the firewalls to the UCSD
Darknet Network Telescope [54] and provide a comprehensive
analysis of the scanning services.
2.4 IoT-Honeypot Fingerprinting
Honeypot fingerprinting is the process of detecting if a target sys-
tem is indeed a honeypot. The fingerprinting process may involve
either active, passive, or both fingerprinting techniques. Some
examples include banner-based, static-response, the use of low-
interaction libraries, and response times. Honeypot fingerprinting
can help adversaries in avoiding any interaction with a honeypot
either directly or through malware propagation. Research on hon-
eypot fingerprinting has increased over time. Early works on hon-
eypot fingerprinting started in 2005 by Holz et al. [35] who queried
the target system for known static responses from honeypots. More
recent works include Vetterl et al. [92] who systematically detected
known open-source honeypots by analyzing the deviation in re-
sponse from that of honeypots. The authors considered open-source
honeypots that emulate Telnet, SSH, and HTTP protocols.
A first approach towards the detection of IoT honeypots was
proposed by Surnin et al. [80]. The authors detect honeypots that
emulate SSH and Telnet protocols by performing multiple checks
through tests that determine if the target is a honeypot. Based on
the results of each test, the authors assign a probability for the
target. In this paper, we also use static banners sent by known IoT
honeypots to detect and filter them from our scan results. For this,
we extend our previous work on honeypot fingerprinting [75].
IMC ’21, November 2–4, 2021, Virtual Event, USA
Banner-based (TCP):. This approach involves the analysis of
the banners received on a successful connection with the target
host. Banner grabbing is a technique that is used to retrieve more
information from the target host. The information in the banners
may help know the type, version, username, and even the session-
related metadata. Based on the scanned protocol, the banners vary
in the information sent. We use the ZGrab tool in our scan to fetch
the banner information from the connected target. This approach
is followed for the Telnet, MQTT, AMQP, and XMPP protocols. In
Table 2 we list sample banners that indicate misconfiguration of
the protocol on the target device and are explained below.
• Telnet: We examine the banners received from the Telnet
scan. The scan tries to establish a session with the target
host to discover an open Telnet port, either 23 or 2323. Upon
connecting, the target host sends a banner to our scanning
host with basic server information. While the Telnet protocol
itself can be exploited for active banner grabbing, we instead
use our ZMap Telnet scan probe to get essential information
on the target host. The banners received from the hosts
provide us with information like the protocol, server, version,
and some headers. We examine the banners received for
established connections with unauthenticated console access.
In case of finding certain characters like "$", "root@xxx:∼$"
and "admin@xxx:∼$" in the response banners, we infer that
the target hosts accept unauthenticated connections.
• MQTT: The MQTT (Message Queuing Telemetry Transport)
protocol scan investigates the possibility of connecting to
port 1883 without any authentication. The banner received
upon connection establishment with a target host provides
information about supported authentication methods or con-
nects to the target directly. After a successful connection, all
the topics and channels on the target host are listed. We ex-
amine the received banners for "MQTT Connection Code:0"
which specifies unauthenticated access to MQTT servers.
• AMQP: The AMQP (Advanced Message Queuing Protocol)
scan involves scanning the Internet for port 5672. The probe
retrieves metadata from the target host like version, product,
and the supported authentication mechanisms on connec-
tion. The AMQP protocol has many open-source implemen-
tations like RabbitMQ [95], Apache Qpid [27] and Apache
ActiveMQ [26]. We refer to the CVE [53] and NIST NVD
[59] database to search for known vulnerable versions of
the protocol used in the devices detected from our scan. The
findings are listed in Section 4.
• XMPP: The XMPP protocol (Extensible Messaging and Pres-
ence Protocol) is widely used in IoT devices for message
passing and communication. The XMPP protocol is scanned
for both client (5222) and server ports (5269). We primar-
ily scan for devices that support non-TLS connections on
these ports. Then, we examine the banners received from the
hosts for known vulnerabilities and misconfigurations, like
accepting the authentication in plain text. Furthermore, as
XMPP supports anonymous logins, it is possible to establish
connections with the servers without any authentication.
The banner provides information like version, features and
Banner Response
Indicator
Srinivasa et al.
Misconfiguration
Protocol
Telnet
Telnet
Telnet
MQTT
AMQP
AMQP
XMPP
XMPP
$
root@xxx:∼$
admin@xxx:∼$
MQTT Connection Code:0
Version: 2.7.1
Version: 2.8.4
MECHANISM
MECHANISM No auth
No auth, console access
No auth, root console access
No auth, root console access
Connection Accepted with no auth
No auth
No auth
No encryption
Table 2: Misconfiguration indicators: TCP protocols
supported authentication-mechanisms. The information re-
ceived from the banners is used to determine the potential
vulnerabilities on the device.
Response-based (UDP):. The protocols using UDP as the trans-
port layer do not respond with banners and therefore have to be
explicitly queried for any information on the service. We target
two UDP-based protocols, namely CoAP and UPnP, employed in
IoT devices on the Internet to search for any misconfigurations
and known vulnerabilities. We use the ZMap tool to scan for open
CoAP and UPnP ports. The methodology followed for each of the
protocols is described below.
Protocol
CoAP
CoAP
CoAP
CoAP
UPnP
Response
x1C
220
220-Admin
CoAP Resources
upnp:rootdevice
USN: uuid:5a34308c-1a2c-4546
-ac5d-7663dd01dca1::upnp:rootdevice
EXT:
SERVER: Ubuntu/lucid UPnP/1.0
MiniUPnPd/1.4
LOCATION: http://192.168.0.1:16537/rootDesc.xml
Misconfiguration
Full Access
Connected Session
Admin access connection
Resource Disclosure
Resource Disclosure
Table 3: Misconfiguration indicators: UDP protocols
• CoAP: The CoAP (Constrained Application Protocol) is a
web-based transfer protocol used in constrained environ-
ments like IoT devices for machine-to-machine communica-
tion. CoAP supports multicast and uses UDP as the transport
layer. We scan the Internet for CoAP port 5683 and query
the end systems for "/.well-known/core". The query triggers
a response from the host, based on the configuration set
by the administrators. Since CoAP can easily translate to
HTTP, it responds with responses like "x1C" that indicate
full access to the target system. Table 3 summarizes some
of the responses received from misconfigured devices and
their misconfiguration details. The sample responses listed
in the table show the indicators in the response that denote
a specific misconfiguration. However, having systems with
CoAP exposed to the Internet itself is a vulnerability and can
be recruited for DoS amplification attacks [8].
• UPnP and SSDP: The UPnP (Universal Plug and Play) pro-
tocol enables device discovery and control in a network.
Internet providers use UPnP forwarding on routers to de-
ploy network configuration. The UPnP protocol uses SSDP
(Simple Service Discovery Protocol) for the advertisement
and discovery of devices on a network. SSDP has been used
extensively in smart-home and industrial IoT environments
198
Attack trends and misconfiguration pitfalls of IoT devices
IMC ’21, November 2–4, 2021, Virtual Event, USA
for automation and control of IoT devices. We scan the Inter-
net for devices with SSDP enabled on port 1900 and trigger
a response to a query. Table 3 shows a sample response
obtained from a device exposed to the Internet and SSDP en-
abled. The devices exposed to the Internet could be recruited
by malware or botmasters or adversaries for DDoS attacks
[17].
The banners and the responses received from active scanning
and querying are stored in a database to perform further analysis.
Furthermore, we analyze the responses for known high-severity
vulnerabilities from the CVE database. The results are correlated
with the open datasets analyzed from Subsection 3.1.2. We find a
total of 1, 832, 893 unique, vulnerable hosts exposed to the Internet
and present our findings and analysis in the results section.
3.2 IoT-Honeypot Fingerprinting
From our Internet-scanning methodology, we expect that some of
the misconfigured devices may be honeypots and can poison our
result dataset. Thus, we perform honeypot fingerprinting to iden-
tify honeypots in our dataset and filter them. Honeypots are widely
used deception-based network monitoring systems that proactively
detect attacks. They work by simulating protocols and services on
the target system and classified based on their simulation levels into
low, medium, and high interaction. We filter honeypots from our
scan results by following banner-based honeypot fingerprinting.
This technique is adapted from existing research methodology pro-
posed by Morishita et al. and Vetterl et al. [55, 92] and is extended
to detect IoT-based honeypots.
Honeypot fingerprinting is the technique used to determine if a
vulnerable target system is a honeypot [55, 80, 92]. This may assist
honeypot developers improve the simulation capabilities, or help
adversaries evade honeypots. The techniques are based on banners,
response-deviation, static content, lack of simulation, and inter-
action capabilities. We leverage our previous work on multistage
honeypot fingerprinting that is based on banners and responses
received from the honeypots [75]. The framework performs sequen-
tial checks based on the services discovered on the target host and
the response received is analyzed to determine if the target is a hon-
eypot. We deploy open-source and widely used honeypots in our
lab to determine the unique characteristics that differentiate them
from existing systems. These characteristics can be static banners,
response, or content. For the purposes of this paper we only attempt
fingerprinting for honeypots emulating Telnet. These include the
HoneyPy [48], Cowrie [61], MTPot [19], Telnet IoT honeypot [42],
Conpot [69], Kippo [20], Kako [3], Hontel [76] and Anglerfish [1]
honeypots.
3.3 IoT Honeypot Deployment
The scans from our methodology reveal a large number of mis-
configured devices. To determine the potential attack vectors and
to study the attack trends, one of the obvious ways is to deploy
honeypots. Honeypots have been a valuable resource for studying
the attack trends. We choose open-source honeypots and deploy
them in our lab setup, where they are configured to face the Internet
without any firewall (see Appendix Section A.3 for details about
how we ensured that our honeypots were not used for malicious
purposes). The network traffic gathered on all these honeypots
is analyzed to understand the attack trends. We describe the IoT
honeypots and their deployment in the following subsections.
3.3.1
IoT Honeypots. We choose Cowrie [61], HosTaGe [90],
Dionaea [83], ThingPot [99], U-Pot [32], and Conpot [69] honeypots
in our methodology as we find these honeypots relevant to our
study based on emulated protocols and because they are open
source and widely used [55, 92]. Furthermore, these honeypots are
capable of simulating IoT-based device profiles. For example, the
HosTaGe honeypot can simulate a CoAP-based smoke sensor or,
an Arduino board running IoT protocols. The protocols emulated
by these honeypots are listed in Table 1.
3.3.2 Deployment Setup. The honeypots are deployed in our lab
environment with an unfiltered network. Moreover, the honeypots
are grouped based on the emulated protocols as shown in Figure
1. By grouping them in this way, we ensure no overlap of the
protocols emulated by the honeypots. Each group is assigned a
public IP address with port-forwarding enabled on the routers.
This way, the honeypots are independent of their network and are
exposed to the Internet. All the honeypots, except HosTaGe, run as
containers on a system with Ubuntu 18.04 LTS Server. The HosTaGe
honeypot is deployed on a rooted Samsung S10 Galaxy device to
emulate services on ports below 1024. All the attacks gathered on
the honeypots are exported daily and imported into the database.
We record the attacks on all the honeypots for one month in April
2021 on a day to day basis. The findings are summarized in the
Section 4.
Figure 1: Honeypot experimental setup
3.4 Network-Telescope Analysis
The honeypots deployed in our lab environment provide us with
traffic on a limited IP address space. To address this limitation and
199
U-Pot: UPnPConpot: SSH,Telnet, HTTP, S7, MODBUSThingPot: XMPPCowrie: SSH,TelnetDionaea: HTTP,MQTT,FTP,SMBHosTaGeTelnet, MQTT, AMQP, CoAP, SSH, HTTP, SMBRouter-1Router-2Router-3Samsung Galaxy S10 Host-1Ubuntu 18.04 LTS Host-2Ubuntu 18.04 LTS Host-3Honeypot Lab SetupPostgresDBAttack dataAttack dataIMC ’21, November 2–4, 2021, Virtual Event, USA
Srinivasa et al.
get a more holistic view of the attack landscape, we analyze the
FlowTuple data from a network telescope. A network telescope is
a portion of routed IP address space in which no legitimate traf-
fic exists [14]. Telescopes contain massive data that is captured
across large number of routed IP address space. This data helps
us to understand the attack landscape across the large network, in
addition to the traffic we receive on our honeypots. An analysis
of the traffic received on the telescope provides information about
the remote network events such as flooding DoS attacks, infection
of hosts by Internet worms, and network scanning [54]. Studying