            final Class clazz = Vehicle.class;
            final long arrayLength = -1L;
            final long totalObjectRefs = 1L;
            final long depth = 1l;
            final long streamBytes = 95L;
            public Status checkInput(FilterInfo filterInfo) {
                if (filterInfo.arrayLength()  this.arrayLength
                        || filterInfo.references()  this.totalObjectRefs
                        || filterInfo.depth()  this.depth || filterInfo.streamBytes()  this.streamBytes) {
                    return Status.REJECTED;
                }
                if (filterInfo.serialClass() == null) {
                    return Status.UNDECIDED;
                }
                if (filterInfo.serialClass() != null && filterInfo.serialClass() == this.clazz) {
                    return Status.ALLOWED;
                } else {
                    return Status.REJECTED;
                }
            }
        }
jdk 9 还在ObjectInputStream 类中添加两个函数，目的是让过滤器能set/get当前的数据流。
    public class ObjectInputStream
        extends InputStream implements ObjectInput, ObjectStreamConstants {
        private ObjectInputFilter serialFilter;
        ...
        public final ObjectInputFilter getObjectInputFilter() {
            return serialFilter;
        }
        public final void setObjectInputFilter(ObjectInputFilter filter) {
            ...
            this.serialFilter = filter;
        }
        ...
    }
与jdk 9 相反，JDK 8最新的版本（ 1.8.0_144 ）
似乎只允许使用ObjectInputFilter.Config.setObjectInputFilter来设置过滤器。
# Process-wide （全局）过滤器
通过设置 jdk.serialFilter （
） 来配置Process-wide过滤器，这样的配置也可以作为系统属性（
 ）
或者 安全属性 （
）。如果系统属性被定义，那么它常常配置的是过滤器；否则，过滤器就要根据安全属性（比如：jdk1.8.0_144/jre/lib/security/java.security
）来配置过滤器了。  
jdk.serialFilter的值作为过滤规则，过滤器通过检查类的名字或者限制输入二进制流的内容来达到过滤的目的。可以用逗号和空格来分割过滤规则。数据流在被检查之前会被过滤，过滤器会忽略配置的顺序。下面是过滤器的一般配置示例
    - maxdepth=value // the maximum depth of a graph
    - maxrefs=value // the maximum number of the internal references
    - maxbytes=value // the maximum number of bytes in the input stream
    - maxarray=value // the maximum array size allowed
其他的规律也会匹配由Class.getName()返回的类名和包名。类名和包名的规则也接受星号（*），双星号（ ** ），句号 （ . ) 和斜杠 （ /
）。下面是一些可能发生的场景
    // this matches a specific class and rejects the rest
    "jdk.serialFilter=org.example.Vehicle;!*" 
     // this matches all classes in the package and all subpackages and rejects the rest 
    - "jdk.serialFilter=org.example.**;!*" 
    // this matches all classes in the package and rejects the rest 
    - "jdk.serialFilter=org.example.*;!*" 
     // this matches any class with the pattern as a prefix
    - "jdk.serialFilter=*;
# 内置过滤器
jdk 9 也引进了一个内置的过滤器，配置这个过滤器主要用于RMI和Distributed Garbage Collection (DGC) 。RMI
Registry 和 DGC的内置过滤器是白名单的形式，白名单包含了服务器能够执行的类。下面是 RMIRegistryImpl 和 DGCImp的白名单类
## RMIRegistryImpl
    java.lang.Number
    java.rmi.Remote
    java.lang.reflect.Proxy
    sun.rmi.server.UnicastRef
    sun.rmi.server.RMIClientSocketFactory
    sun.rmi.server.RMIServerSocketFactory
    java.rmi.activation.ActivationID
    java.rmi.server.UID
## DGCImpl
    java.rmi.server.ObjID
    java.rmi.server.UID
    java.rmi.dgc.VMID
    java.rmi.dgc.Lease
除了这些类，用户也可以用sun.rmi.registry.registryFilter和sun.rmi.transport.dgcFilter
添加自己的过滤器，系统和安全属性的配置和上文所提到的配置是一致的。
# 结语
然而，java反序列化不是它自己的漏洞，使用序列化框架反序列化不信任的数据才是问题所在。这两点的不同非常重要，因为后者是因为糟糕的程序设计而引入的漏洞，而不是java本身的问题。在JEP
290 （ 
）之前的反序列化框架，根本不会验证对象的合法性。而且现在有大量的方法去缓和反序列化漏洞，在JDK本身中没有具体的规范来处理这个缺陷。但是在新版的JEP
290中，Oracle引入了新的过滤机制，这个机制允许开发人员结合自己的应用场景来配置自己的过滤器。新的过滤机制似乎能更容易的缓解反序列化那些不被信任的输入数据所带来的问题。