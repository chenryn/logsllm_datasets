pointer is modiﬁed appropriately. Two prominent classes
of code pointers that an attacker can target are function
pointers and stack return addresses. Other exploitable
code pointers include longjmp buffers.
A function pointer can be modiﬁed directly by code in-
jected by the attacker before control is returned to the ap-
plication to make a system call. Should the application
later use this function pointer, control is returned to the at-
tacker code. This paper focuses on binary code compiled
from C source code, hence we analyze where function
pointers can appear in such executables. One instance is
when the application developer explicitly declares pointer
variables to functions at the C language level; whenever
a function pointer is used by the application, control can
be recovered by changing the pointer variable to contain
the address of malicious code. However, although func-
tion pointers are a commonly used feature in many C
programs, there might not be sufﬁcient instances of such
function invocations to successfully perform a complete
exploit.
A circumstance in which function pointers are used more
frequently is the invocation of shared library functions by
dynamically linked ELF (executable and linking format)
binaries. When creating dynamically linked executables,
a special section (called procedure linkage table – PLT) is
created. The PLT is used as an indirect invocation method
for calls to globally deﬁned functions. This mechanism
allows for the delayed binding of a call to a globally de-
ﬁned function. At a high level, this means that the PLT
stores the addresses of shared library functions. When-
ever a shared function is invoked, an indirect jump is per-
formed to the corresponding address. This provides the
attacker with the opportunity to modify the address of a
library call in the PLT to point to attacker code. Thus,
whenever a library function call is made, the intruder can
regain control.
The redirection of shared library calls is a very effective
method of regaining control, especially when one consid-
ers the fact that applications usually do not invoke system
calls directly. Instead, almost all system calls are invoked
through shared library functions. Thus, it is very proba-
ble that an application executes a call to a shared function
before every system call. However, this technique is only
applicable to dynamically linked binaries. For statically
164
14th USENIX Security Symposium
USENIX Association
linked binaries, alternative mechanisms to recover control
ﬂow must be found.
One such mechanism is the modiﬁcation of the function
return addresses on the stack. Unfortunately (from the
point of view of the attacker), these addresses cannot be
directly overwritten by the malicious code. The reason, as
mentioned previously, is that these addresses are checked
at every system call. Thus, it is necessary to force the ap-
plication to overwrite the return address after the attacker
has relinquished control (and the ﬁrst system call has ﬁn-
ished). Also, because the stack is analyzed at every sys-
tem call, no further system calls may be invoked between
the time when the return address is modiﬁed and the time
when this forged address is used in the function epilogue
(i.e., by the ret instruction).
In principle, every application instruction that writes a
data value to memory can be potentially used to modify
a function return address. In the Intel x86 instruction set,
there is no explicit store instruction. Being based on a
CISC architecture, many instructions can specify a mem-
ory location as the destination where the result of an oper-
ation is stored. The most prominent family of instructions
that write data to memory are the data transfer instructions
(using the mov mnemonic).
int global;
void f() 
{
global = 0;
}
movl   $0x0,0x8049578
(a) Direct variable access
int global;
void f() 
{
int *p = &global;
*p = 0;
}
movl   $0x8049578,0xfffffffc(%ebp)
mov    0xfffffffc(%ebp),%eax
movl   $0x0,(%eax)
(b) Variable access via pointer
int index;
int array[];
void f() 
{
}
array[index] = 0;
mov    0x80495a0,%eax
movl   $0x0,0x80495c0(,%eax,4)
(c) Array access
Figure 2: Unsuitable store instructions.
Of course, not all instructions that write to memory can
be actually used to alter a return address. For example,
consider the C code fragments and their corresponding
machine instructions shown in Figure 2. In the ﬁrst ex-
ample (a), the instruction writes to a particular address
(0x8049578, the address of the variable global), which
is speciﬁed by an immediate operand of the instruction.
This store instruction clearly cannot be forced to over-
write an arbitrary memory address. In the other two cases
((b) and (c)), the instruction writes to a location whose ad-
dress is determined (or inﬂuenced) by a value in a regis-
ter. However, in example (b), the involved register %eax
has been previously loaded with a constant value (again
the address of the variable global) that cannot be inﬂu-
enced by the intruder. Finally, even if the attacker can
choose the destination address of the store instruction, it
is also necessary to be able to control the content that is
written to this address. In example (c), the attacker can
change the content of the index variable before returning
control to the application. When the application then per-
forms the array access using the modiﬁed index variable,
which is loaded into register %eax, the attacker can write
to an (almost) arbitrary location on the stack. However,
the constant value 0 is written to this address, making the
instruction not suitable to set a return address to the mali-
cious code.
The examples above highlight the fact that even if appli-
cation code contains many store instructions, only a frac-
tion of them might be suitable to modify return addresses.
Even if the original program contains assignments that
dereference pointers (or access array elements), it might
not be possible to control both the destination of the store
instruction and its content. The possibility of using an
assignment operation through a pointer to modify the re-
turn address on the stack was previously discussed in [7].
However, the authors did not address the problem that an
assignment might not be suitable to perform the actual
overwrite. Moreover, if a suitable instruction is found,
preparing the environment is often not a trivial task. Con-
sider a situation where an application ﬁrst performs a
number of operations on a set of variables and later stores
only the result. In this case, the attacker has to set up the
environment so that the result of these operations exactly
correspond to the desired value. In addition, one has to
consider the effects of modiﬁcations to the environment
on the control ﬂow of the application.
A simple example is shown in Figure 3. Here, the attacker
has to modify the variable index to point to the (return) ad-
dress on the stack that should be overwritten. The value
that is written to this location (i.e., the new return address)
is determined by calculating the sum of two variables a
and b. Also, one has to ensure that a > 0 because other-
wise the assignment instruction would not be executed.
USENIX Association
14th USENIX Security Symposium
165
int index, a, b;
int array[];
void f() 
{
if (a > 0)
array[index] = a + b;
}
(a) Possible overwrite
Figure 3: Possibly vulnerable code.
The presented examples serve only as an indication of the
challenges that an attacker faces when attempting to man-
ually comprehend and follow different threads of execu-
tion through a binary program. To perform a successful
attack, it is necessary to take into account the effects of
operations on the initial environment and consider differ-
ent paths of execution (including loops). Also, one has
to ﬁnd suitable store instructions or indirect function calls
that can be exploited to recover control. As a result, one
might argue that it is too difﬁcult for an attacker to repeat-
edly make system calls and recover control, which is nec-
essary to perform a successful compromise. In the next
section, we show that these difﬁculties can be overcome.
4 Symbolic Execution
This section describes in detail the static analysis tech-
niques we use to identify and exploit possibilities for re-
gaining control after the invocation of a system call. As
mentioned previously, control can be regained when a
conﬁguration C is found such that control ﬂow will even-
tually reach the target address t when program p is exe-
cuted starting from address s.
Additional constraints are required to make sure that a
program execution does not violate the application model
created by the intrusion detection system. In particular,
system calls may only be invoked in a sequence that is
considered legitimate by the intrusion detection system.
Also, whenever a system call is invoked, the chain of
function return addresses on the stack has to be valid.
In our current implementation, we enforce these restric-
tions simply by requiring that the target address t must be
reached from s without making any intermediate system
calls. In this way, we ensure that no checks are made by
the intrusion detection system before the attacker gets a
chance to execute her code. At this point, it is straightfor-
ward to have the attack code rearrange the stack to pro-
duce a valid conﬁguration (correct chain of function re-
turn addresses) and to make system calls in the correct
order.
The key approach that we use to ﬁnd a conﬁguration C
for a program p and the two addresses s and t is sym-
bolic execution [10]. Symbolic execution is a technique
that interpretatively executes a program, using symbolic
expressions instead of real values as input. In our case,
we are less concerned about the input to the program. In-
stead, we treat all values that can be modiﬁed by the at-
tacker as variables. That is, the execution environment of
the program (data, stack, and heap) is treated as the vari-
able input to the code. Beginning from the start address
s, a symbolic execution engine interprets the sequence of
machine instructions.
To perform symbolic execution of machine instructions
(in our case, Intel x86 operations), it is necessary to ex-
tend the semantics of these instructions so that operands
are not limited to real data objects but can also be sym-
bolic expressions. The normal execution semantics of In-
tel x86 assembly code describes how data objects are rep-
resented, how statements and operations manipulate these
data objects, and how control ﬂows through the state-
ments of a program. For symbolic execution, the deﬁ-
nitions for the basic operators of the language have to be
extended to accept symbolic operands and produce sym-
bolic formulas as output.
4.1 Execution State
We deﬁne the execution state S of program p as a snap-
shot of the content of the processor registers (except the
program counter) and all valid memory locations at a par-
ticular instruction of p, which is denoted by the program
counter. Although it would be possible to treat the pro-
gram counter like any other register, it is more intuitive to
handle the program counter separately and to require that
it contains a concrete value (i.e., it points to a certain in-
struction). The content of all other registers and memory
locations can be described by symbolic expressions.
Before symbolic execution starts from address s,
the
execution state S is initialized by assigning symbolic
variables to all processor registers (except the program
counter) and memory locations in writable segments.
Thus, whenever a processor register or a memory location
is read for the ﬁrst time, without any previous assignment
to it, a new symbol is supplied from the list of variables
{υl, υ2, υ3, . . .}. Note that this is the only time when sym-
bolic data objects are introduced.
In our current system, we do not support ﬂoating point
data objects and operations, so all symbols (variables)
represent integer values. Symbolic expressions are linear
combinations of these symbols (i.e., integer polynomials
over the symbols). A symbolic expression can be written
as cn ∗ υn + cn−1 ∗ υn−1 + . . . + c1 ∗ υ1 + c0 where the
166
14th USENIX Security Symposium
USENIX Association
int i, j, k;
void f()
{
i = 3*j + k;
}
 8048364:     mov    0x8049588,%edx
 804836a:     mov    %edx,%eax
 804836c:     add     %eax,%eax
 804836e:     add     %edx,%eax
 8048370:     add     0x804958c,%eax
 8048376:     mov    %eax,0x8049590
 804837b:
eax:               v0
edx:               v1
8049588 (j) :  v2
804958c (k):  v3
8049590 (i) :  v4
eax:                v0
edx:                v2
8049588:  (j) : v2
804958c:  (k): v3
8049590:  (i) : v4
PC:           8048364
PC:           804836a
Step 1
Step 2
eax:               v2
edx:               v2
8049588 (j) :  v2
804958c (k):  v3
8049590 (i) :  v4
eax:               2*v2
edx:               v2
eax:               3*v2
edx:               v2
eax:               3*v2+v3
edx:               v2
eax:               3*v2+v3
edx:               v2
8049588 (j) :  v2
804958c (k):  v3
8049590 (i) :  v4
8049588 (j) :  v2
804958c (k):  v3
8049590 (i) :  v4
8049588 (j) :  v2
804958c (k):  v3
8049590 (i) :  v4
8049588 (j) :  v2
804958c (k):  v3
8049590 (i) :  3*v2+v3
PC:           804836c
PC:           804836e
PC:           8048370
PC:           8048376
PC:           804837b
Step 3
Step 4
Step 5
Step 6
Step 7
Figure 4: Symbolic execution.
ci are constants. In addition, there is a special symbol ⊥
that denotes that no information is known about the con-
tent of a register or a memory location. Note that this
is very different from a symbolic expression. Although
there is no concrete value known for a symbolic expres-
sion, its value can be evaluated when concrete values are
supplied for the initial execution state. For the symbol
⊥, nothing can be asserted, even when the initial state is
completely deﬁned.
By allowing program variables to assume integer polyno-
mials over the symbols υi, the symbolic execution of as-
signment statements follows naturally. The expression on
the right-hand side of the statement is evaluated, substitut-
ing symbolic expressions for source registers or memory
locations. The result is another symbolic expression (an
integer is the trivial case) that represents the new value of
the left-hand side of the assignment statement. Because
symbolic expressions are integer polynomials, it is pos-
sible to evaluate addition and subtraction of two arbitrary
expressions. Also, it is possible to multiply or shift a sym-
bolic expression by a constant value. Other instructions,
such as the multiplication of two symbolic variables or a
logic operation (e.g., and, or), result in the assignment
of the symbol ⊥ to the destination. This is because the
result of these operations cannot (always) be represented
as integer polynomial. The reason for limiting symbolic
formulas to linear expressions will become clear in Sec-
tion 4.3.
Whenever an instruction is executed, the execution state is
changed. As mentioned previously, in case of an assign-