sendBroadcast(i); 
7. Local Root Privilege Escalation via ADB 
We discovered two devices that allow the user to obtain root privileges by entering commands via ADB: 
Alcatel A30 and Leagoo P1. These two devices allow a user with physical access to the device to obtain a 
root shell on the device by allowing the shell user (ADB) to modify read-only properties at runtime. This 
undocumented feature goes against the standard Android security model. Recently, a Twitter user with the 
handle of Elliot Anderson discovered that certain OnePlus devices can obtain root access via ADB29. 
29 https://www.xda-developers.com/oneplus-root-access-backdoor/ 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Notably, the Alcatel A30 was an Amazon Prime exclusive device30. We will focus on the Alcatel A30 
device, although the approach to obtain a root shell via ADB is the same for both devices: modify read-only 
properties at runtime and restart the ADB daemon so it executes as the root user. 
7.1 Alcatel A30 – Root Privilege Escalation via ADB 
Allowing the modification of read-only properties at runtime allows either a user with physical access to 
the device or the vendor (specifically TCL Corporation) to execute commands as the root user. The 
properties of concern here are ro.debuggable and ro.secure. Notably, on the Alcatel A30 device, 
changing the ro.debuggable property to have a value of 1 will create a UNIX domain socket named 
factory_test that will execute the commands supplied to it as the root user. This behavior is not present 
on the Leagoo P1 device. This allows the vendor to execute commands as the root user if they change the 
value of the ro.debuggable property and use a process that has access to write to the factory_test socket 
in the /dev/socket directory, although we did not witness the behavior. Moreover, we verified that 
platform apps can change the ro.debuggable property at runtime. TCL Corporation should control the 
framework key since they are the vendor and have certain apps that are executing as the system user. In 
addition, they also control the SELinux rules to control which processes can interact with the factory_test 
socket. 
The end-user can also obtain root privileges by restarting ADB as root using certain commands via ADB. 
This allows a root shell via ADB to be obtained for command execution as the root user. At this point, 
root privileges can be used to obtain a permanent root privilege as opposed to a temporary one. Using 
root privileges, the private directories of apps, among others, can be examined and exfiltrated. For ADB 
to be able to execute commands as the root user, instead of the usual shell user, the ro.debuggable 
property needs to be set to a value of 1 and the ro.secure property needs to be set to a value of 0. At this 
point, the user can use the adb root command, which will restart the adbd process running as the root 
user. With root privileges, SELinux can be disabled to prevent the Mandatory Access Control (MAC) rules 
from preventing certain actions on the device using the setenforce 0 command. Below are the commands 
to enter using ADB to obtain a root shell. 
adb shell setprop ro.debuggable 1 
adb shell setprop ro.secure 0 
adb root 
adb shell setenforce 0 
adb shell 
MICKEY6US:/ # id 
uid=0(root) gid=0(root) 
groups=0(root),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admi
n),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc) context=u:r:shell:s0 
Below is the factory_test UNIX domain socket in the /dev/socket directory from the Alcatel A30 
device. 
MICKEY6US:/dev/socket # ls –al 
total 0 
drwxr-xr-x  7 root      root       760 2017-05-10 17:58 . 
30 https://www.theverge.com/circuitbreaker/2017/3/24/15042450/alcatel-a30-moto-g5-plus-amazon-prime-exclusive-phones-
ad-lockscreen 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
drwxr-xr-x 15 root      root      4220 2017-05-10 17:55 .. 
srw-rw----  1 system    system       0 2017-05-10 17:58 adbd 
srw-rw----  1 root      inet         0 1970-11-08 00:12 cnd 
srw-rw----  1 root      mount        0 1970-11-08 00:12 cryptd 
srw-rw----  1 root      inet         0 1970-11-08 00:12 dnsproxyd 
srw-rw----  1 root      system       0 1970-11-08 00:12 dpmd 
srw-rw----  1 system    inet         0 2017-05-10 17:55 dpmwrapper 
srw-rw-rw-  1 root      root         0 2017-05-10 17:58 factory_test 
On the Alcatel A30 device, the init.rc file contains the logic to start the /system/bin/factory_test 
binary once the ro.debuggable property is set to a value of 1. 
on property:ro.debuggable=1 
    start bt_wlan_daemon 
service bt_wlan_daemon /system/bin/factory_test 
    user root 
    group root 
    oneshot 
    seclabel u:r:bt_wlan_daemon:s0 
7.2 Leagoo P1 – Root Privilege Escalation via ADB 
Similar behavior is also (except the factory_test socket) present on the Leagoo P1 device with a build 
fingerprint of 
sp7731c_1h10_32v4_bird:6.0/MRA58K/android.20170629.214736:user/release-
keys. Below are the ADB commands, the same as for the Alcatel A30 device, to obtain a root shell via 
ADB.  
adb shell setprop ro.debuggable 1 
adb shell setprop ro.secure 0 
adb root 
adb shell setenforce 0 
adb shell 
t592_otd_p1:/ # id 
uid=0(root) gid=0(root) 
groups=0(root),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admi
n),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc) context=u:r:su:s0 
8. Programmatically Factory Resetting the Device 
A factory reset will wipe the data and cache partitions. This removes any apps the user has installed and 
any other user or app data that the user does not have backed up externally. An unintentional factory reset 
can present a major inconvenience due to potential for data loss. For an app to be able to directly factory 
reset a device, it requires that an app have the MASTER_CLEAR permission31. This permission is only granted 
to apps that are pre-installed. Therefore, a third-party app that the user downloads cannot perform a factory 
reset of the device directly. There is an exception for enabled Mobile Device Management (MDM) apps. A 
user can download an MDM app and then enable it as a device administrator through the Settings app. Prior 
to enabling the app as a device administrator, the user will be presented with its list of capabilities, which 
can include the “erase all data” capability. All of the vulnerabilities we found were due to an app privileged 
31 https://developer.android.com/reference/android/Manifest.permission.html#MASTER_CLEAR 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
enough to perform a factory reset (i.e., apps that are granted the MASTER_CLEAR permission and platform 
apps) exposing an interface that, when called, will programmatically initiate a factory reset of the device. 
A privileged app can initiate a factory reset of the device by sending a broadcast intent with an action of 
android.intent.action.MASTER_CLEAR. The system_server process contains a broadcast receiver 
named com.android.server.MasterClearReceiver that, when it receives the MASTER_CLEAR action, will 
boot into recovery mode to format the data and cache partitions. This is generally accomplished by calling 
a method with a signature that is similar to the following method although the parameters can vary: 
android.os.RecoverySystem.rebootWipeUserData(*). This method writes content to a file with a path 
of /cache/recovery/command that contains at least the line of --wipe_data and boots into recovery mode. 
8.1 T-Mobile Revvl Plus & T-Mobile Coolpad Defiant – Factory Reset 
The T-Mobile Revvl Plus device32 and the T-Mobile Coolpad Defiant33 have a pre-installed app with a 
package 
name 
of 
com.qualcomm.qti.telephony.extcarrierpack 
(versionCode=25, 
versionName=7.1.1). This app is privileged since it executes as the system user. This app contains a 
broadcast 
receiver 
application 
component 
with 
a 
fully 
qualified 
class 
name 
of 
com.qualcomm.qti.telephony.extcarrierpack.UiccReceiver. When the UiccReceiver component 
receives a broadcast intent with an action string of com.tmobile.oem.RESET, it will initiate and complete 
a programmatic factory reset by sending out a broadcast intent with an action string of 
android.intent.action.MASTER_CLEAR. This will cause the user to lose any data that they have not 
backed up or synced to an external location. The source code provided below will initiate a factory reset of 
the device.  
sendBroadcast(new Intent("com.tmobile.oem.RESET")); 
8.2 Essential Phone – Factory Reset 
The vulnerability lies in an app with a package name of 
com.ts.android.hiddenmenu 
(versionName=1.0, platformBuildVersionName=8.1.0). This app is a platform app and executes as the 
system user. Generally, the MASTER_CLEAR permission34 is required to be able to send a broadcast intent 
with an action string of android.intent.action.MASTER_CLEAR broadcast intent, but the app has the 
capability as various powerful permissions are granted by default to platform apps. The 
com.ts.android.hiddenmenu app has an activity application component show below. 
The RTNResetActivity app component is explicitly exported, as it sets the android:exported attribute 
to a value of true. When an app component is exported, this allows any on the device to start this app 
component since there are no permission requirements (e.g., android:permission attribute) to access it. 
32 https://www.t-mobile.com/devices/t-mobile-revvl-plus 
33 https://support.t-mobile.com/community/phones-tablets-devices/android/coolpad-defiant 
34 https://developer.android.com/reference/android/Manifest.permission.html#MASTER_CLEAR 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Internally, the RTNResetActivity component starts other components where the 
com.ts.android.hiddenmenu.util.ResetActivity activity sends a broadcast intent with 
android.intent.action.MASTER_CLEAR. This will programmatically factory reset the device and 
potentially cause data loss. The source code below can be run to initiate a factory reset. 
Intent i = new Intent(); 
i.setClassName("com.ts.android.hiddenmenu", "com.ts.android.hiddenmenu.rtn.RTNResetActivity"); 
startActivity(i); 
Figure 2 shows the steps involved for a third-party to programmatically factory reset the Essential device. 
FIGURE 2. PROGRAMMATIC FACTORY ON THE ESSENTIAL PHONE DEVICE. 
8.3 ZTE Zmax Champ – Factory Reset 
The pre-installed app that exposes the capability for a third-party app to factory reset the device has a 
package name of com.zte.zdm.sdm (versionCode=31, versionName=V5.0.3). This app executes as the 
system user. This app does not request the android.permission.MASTER_CLEAR permission in it 
AndroidManifest.xml file, although it will be automatically granted this permission since it is executing 
as the system user. The system user is a privileged user on the device and is granted a powerful block of 
permissions by default. One of these capabilities granted to the system user is to programmatically factory 
reset the device.  
The com.zte.zdm.sdm app has a statically declared broadcast receiver in its AndroidManifest.xml file 
with a name of com.zte.zdm.VdmcBroadcastReceiver that can handle broadcast intents with an action 
string of android.intent.action.DM_FATORY_RESET_TEST_BY_TOOL. The VdmcBroadcastReceiver 
component is exported, by default, and accessible to any app on the device, since it does not explicitly set 
the android:exported attribute a value to false, has at least one intent-filter declared, and is not 
protected by a custom or platform-defined permission. When a broadcast intent is sent with this action, the 
com.zte.zdm.MyCommand.bootCommand(String) method is called with a parameter of --wipe_data. 
This method will write a value of --wipe_data to a file with a path of /cache/recovery/command and 
then use the PowerManager to boot into recovery mode. Generally, a few additional lines are written in 
addition to the --wipe_data line, but these lines have been omitted from step 5 of Figure 2. This will 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
programmatically factory reset the device. The code to perform the aforementioned described behavior is 
below. The code is a single line and simply sends a broadcast intent with a specific action string. 
sendBroadcast(new Intent("android.intent.action.DM_FATORY_RESET_TEST_BY_TOOL")); 
8.4 Leagoo Z5C – Factory Reset 
Any app on the device can send an intent to factory reset the device programmatically. This does not require 
any user interaction. capability is present in an unprotected application component of the 
com.android.settings app (versionCode=23, versionName=6.0-android.20170630.092853). This 
app has an exported broadcast receiver named com.sprd.settings.PhoneTrackCommandReceiver, and 
its declaration in the AndroidManifest.xml file is shown below. 
Internally, when the PhoneTrackCommandReceiver component receives a broadcast intent with an action 
string of android.intent.action.phonetrack_masterclear, it will send a broadcast intent with an 
action string of android.intent.action.MASTER_CLEAR, which initiates a programmatic factory reset of 
the device. The single source code line below will cause the Leagoo Z5C device to be perform a factory 
reset. 
sendBroadcast(new Intent("android.intent.action.phonetrack_masterclear")); 
8.5 Leagoo P1 – Factory Reset 
The vulnerability lies in an app with a package name of com.wtk.factory (versionCode=1, 
versionName=1.0). This app executes as the system user as it is a platform app. Specifically, this app is 
signed with the platform key and sets the android:sharedUserId attribute to a value of 
android.uid.system in its AndroidManifest.xml file. This app also requests the MASTER_CLEAR 
permission, allowing it to perform a programmatic factory reset of the device. The com.wtk.factory app 
has a broadcast receiver application component declared in its AndroidManifest.xml file show below. 
The 
MMITestReceiver 
app 
component 
sends 
a 
broadcast 
intent 
with 
android.intent.action.MASTER_CLEAR as the action string when it receives an intent sent to it using the 
source code below.  
Intent i2 = new Intent(); 
i2.setAction("com.mmi.helper.request"); 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
i2.setClassName("com.wtk.factory", "com.wtk.factory.MMITestReceiver"); 
i2.putExtra("type", "factory_reset"); 
i2.putExtra("value", "100"); 
sendBroadcast(i2); 
8.6 Plum Compass – Factory Reset 
The vulnerability is contained in an app with a package name of com.android.settings 
(versionCode=23, versionName=6.0-eng.root.20161223.224055). This app is a platform app and 
executes as the system user. This app also requests the MASTER_CLEAR permission allowing it to perform a 
programmatic factory reset of the device. The com.android.settings app has a broadcast receiver 
application component show below. 
Internally, 
the 
FactoryReceiver 
component 
sends 
a 
broadcast 
intent 
with 
android.intent.action.MASTER_CLEAR as the action string when it receives an intent sent to it using the 
source code below. 
Intent i = new Intent(); 
i.setClassName("com.android.settings", "com.android.settings.FactoryReceiver"); 
sendBroadcast(i); 
8.7 Orbic Wonder – Factory Reset 
The vulnerability lies in the core Android package (with a package name of android) which is a privileged 
part of the Android OS. This process executes as the system user. Within the android package, there is a 
broadcast receiver application component named com.android.server.MasterClearReceiver. When 
this component receives a broadcast intent addressed to it, it will programmatically initiate and complete a 
factory reset. The source code below will initiate a factory reset on the device. Please note that the action 
string of potatoes is not strictly required, it just needs to be any non-empty string. 
Intent i2 = new Intent(); 
i2.setClassName("android", "com.android.server.MasterClearReceiver"); 