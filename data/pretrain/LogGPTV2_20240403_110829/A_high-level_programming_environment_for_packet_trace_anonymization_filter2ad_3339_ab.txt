allows type-checking on trace-rewrite operations to catch inconsis-
tency between output data elements.
3.2 Trace Parsing
Trace parsing usually consists of three steps: ﬂow reassembling,
(optional) line breaking, and protocol-speciﬁc parsing.
Flow Reconstruction: Bro’s application parsing begins by re-
assembling IP fragments and then reassembling the TCP byte
stream. (We ignore here Bro’s UDP processing, though our tech-
niques could be applied to it, too.) In case of TCP retransmission or
packet reordering, the bytes that arrive ﬁrst are not delivered until
the gap is ﬁlled, at which point the bytes are delivered together. For
example, suppose an SMTP command arrives in three packets with
the last two in reverse order: “MAIL Fro”, “bob.org>\r\n”,
and “m:\r\n” after processing the
third packet.
Breaking into Lines: Many protocols (e.g., SMTP, FTP, the non-
data part of HTTP) process application data one line at a time. For
such protocols, there is an intermediate step that structures the bytes
from reassembler into lines before protocol-speciﬁc parsing. Fol-
lowing the above example, the line divider will emit a line “MAIL
From: ” after it sees \r\n.
Protocol-Speciﬁc Parsing: The parser takes plain bytes as input
and emits typed and semantically meaningful data ﬁelds. It ﬁrst di-
vides the bytes according to protocol syntax, then converts bytes of
each ﬁeld to typed values—e.g., string, integer, boolean, record—
and groups the values by events, ﬁnally placing the events in an
event queue. (As event parameters, each data element carries a se-
mantic meaning.) Currently Bro has parsers for DNS, Finger, FTP,
HTTP, ICMP, Ident, MIME, NTP, Netbios, Rlogin, SMTP, SSH,
and Telnet.
A major challenge in parsing is that the parser often cannot
strictly follow the RFCs that deﬁne the application protocol, since
in practice there are frequently deviations from the letter of the
standards, or deﬁciencies in the trafﬁc being analyzed. Two par-
ticular difﬁculties relevant for our discussion are:
Line Delimiters: Line-oriented protocols (e.g., SMTP, HTTP) gen-
erally are speciﬁed to use the two-byte sequence CRLF (\r\n) as
the delimiter between lines. However, some end hosts also interpret
single LF (\n) and/or CR (\r) as the end of the line. Ideally, we
would like to identify which delimiter each host uses, and consis-
tently apply that interpretation.
Content Gaps: For traces captured under high-volume trafﬁc con-
ditions, sometimes the packet ﬁlter fails to capture all of the pack-
ets. Such “content gaps” are generally unsolvable, but we found
that most of them occur within the data-transfer section of an ap-
plication dialog rather than in the command/reply exchange. We
developed a content gap recovery mechanism for SMTP and HTTP
that skips over gaps that appear consistent with being wholly con-
tained within a data transfer. With this heuristic, we ﬁnd that most
content gaps no longer disrupt parsing. (We note that content gaps
are also delivered as events, and the policy script may decide to
eliminate them, keep them, or even insert new content gaps in the
output trace.)
In summary, there can be some loss of ﬁdelity when data goes
through the trace parser. This is in fact a general problem for any
network monitoring tools.
3.3 Trace Composer
The trace composer consists of rewrite functions and a packet
generator. As discussed above, the rewrite functions are called dur-
ing event processing. A rewrite function generates a byte string on
each invocation and buffers the string for the packet generator. Af-
ter processing events, Bro invokes the packet generator to process
buffered bytes and generate output packets. Below we will look at
the rewrite functions and packet generation in detail.
3.3.1 Rewrite Functions
A rewrite function performs the inverse of parsing: it prints the
typed data elements to a byte string in a protocol speciﬁc format,
placing them in the right order and adding proper delimiters. For
example, rewrite_finger_request takes four parameters:
c (the associated connection, of type connection, which is a
record of connection information), full (a boolean ﬂag indicating
whether the Finger request was for the “full” format), username
and hostpart (both strings). The rewrite function concatenates
username and hostpart, adds \r\n to the end, and inserts
“/W ” to the beginning of the line when full is true. Thus,
with parameters (T, "alice", "host123"), the function
# Write a finger request to trace.
rewriter finger_request %(full: bool,
username: string, hostpart: string%)
%{
const int is_orig = 1;
if ( full )
@WRITE@(is_orig, "/W ");
@WRITE@(is_orig, username);
if ( hostpart->Len() > 0 )
{
@WRITE@(is_orig, "@");
@WRITE@(is_orig, hostpart);
}
@WRITE@(is_orig, "\r\n");
%}
Figure 2: Source Code of a Rewrite Function
generates the string “/W alice@host123\r\n”, and with pa-
rameters (F, "bob", ""), it generates “bob\r\n”.
Rewrite Function Compiler: When implementing the rewrite
functions for various protocols, we found a number of common-
alities: they all need to convert Bro values to C++ native values
and fetch the connection object, and for each built-in function we
need to write a Bro-language prototype declaration and add initial-
ization code to bind the Bro built-in function to the C++ function.
So we looked for ways to facilitate code reuse to avoid the tedious
and error-prone task of repeating the similar code at each place.
To do so, we developed a “rewrite function compiler”. We
write rewrite functions with Bro-style function prototypes and
C++ bodies. The compiler inserts code for the value conver-
sion and connection record fetch, extracts Bro function proto-
types, and generates function binding code. With the rewriter
compiler, most rewrite functions can be implemented with around
10 lines of code each.
Figure 2 shows the source code of
“rewrite_finger_request”. Note that each rewrite func-
tion has a hidden ﬁrst parameter: “c: connection”, which is
inserted into the C++ code and the Bro prototype during compila-
tion.2
Currently we have implemented rewrite functions for FTP,
HTTP, SMTP, Finger, and Ident.
3.3.2 Packet Generation: Framing
After rewriter functions emit byte sequences, the packet framer
decides how to pack the bytes into packets.
It cares about
1) whether the bytes should ﬁt into a single packet or be split across
multiple ones, and 2) what timestamp to attach to each packet.
The central concern of the packet framing algorithm is to keep
the trafﬁc dynamics as close to the original as possible and yet to
remain transparent to the policy scripts. For example, an HTTP re-
quest can be transmitted line-by-line, one packet per line, or all in
one packet; for each of these cases, we would like the rewritten re-
quest to maintain the original packet structure and the timestamps.
Note that we cannot directly reuse the packet structure present in
the input trace because there is not necessarily a one-to-one map-
ping between bytes in the input and output traces, as a policy script
can change data lengths, insert or remove objects, or change the
ordering among objects. So in general it is only possible to approx-
imate the original dynamics. Also, as the policy script does not
have to specify the origin of data when it calls a rewrite function,
the trace composer does not know an explicit mapping between
original and new data objects and has to derive an implicit tempo-
2The boolean variable “is orig = 1” means the direction of the TCP ﬂow is
from the connection originator (the Finger client).
# when the original Content-Length header
# arrives on connection c
msg$header_slot = reserve_rewrite_slot(c);
...
# after the entire data entity is processed
seek_rewrite_slot(c, msg$header_slot);
rewrite_http_header(c, is_orig, "Content-Length",
fmt(" %d", data_length));
release_rewrite_slot(c, msg$header_slot);
Figure 3: Deferring Writes to HTTP Content-Length Header
ral relation to map bytes to packets, as follows.
In the common case, transformed data is written to the same TCP
ﬂow (i.e., same direction of a TCP connection) as the input packet
currently being processed. The framer places the bytes in the cur-
rent output packet. If the payload size exceeds the MTU, it gener-
ates another output packet with the same timestamp to hold the rest
of the data.
Usually the data written by the policy script originates from data
in the current input packet; thus, the output trace has a similar
packet structure as the input trace. However, there are two cases
in which the data to write actually comes from an earlier or later
input packet:
1. When an event consists of data from multiple packets, the
data may range across packet boundaries or appear in re-
transmitted packets. In this case, the transformed data will
be written with respect to the last packet associated with the
event, i.e., the packet whose arrival makes the trace parser
generate the event.
2. When the policy script cannot decide immediately what to
write before seeing later data. For example, when rewrit-
ing HTTP messages, the new Content-Length header for an
HTTP entity cannot be decided until the entity is entirely
transformed.
In another example, when anonymizing FTP
traces, user names in unsuccessful login attempts might be
treated differently than user names in successful logins (be-
cause the unsuccessful ones can leak sensitive information,
such as passwords mistyped for user names), so the script
needs to see the server reply before it can decide how to
anonymize the argument of the “USER” command.
For the ﬁrst of these, we ﬁnd it tolerable to simply associate the
data with the event’s last packet, because to do otherwise would
require a great deal of work—tracing each event parameter’s origin
throughout the trace reassembly and parsing hierarchy in order to
know from exactly which input packet the data originates.
Deferring Writes: The second case, of the policy script having
to defer its transformation decision, presents a larger problem, be-
cause it not only leads to imprecise timestamps for output packets,
but also causes inconvenience for transformation script program-
ming: in the HTTP message case, the Content-Length header has
to be written before the data entity, so the script must buffer up all
the transformed data entity until it ﬁnishes processing the entire en-
tity. To address this problem, we added support for deferring writes
so that the script can essentially write packets out of order.
The trace composer supports deferring writes by allowing the
policy script to reserve slots in current output packets. The script
may then seek the reserved slot at a later point, write data to it, and
release the slot. (See Figure 3)
3.3.3 Packet Generation: TCP/IP header ﬁelds
Once packet payloads are determined, the trace composer at-
taches TCP and IP headers to output packets. Also, if no data is
written in the current packet cycle, but the trace composer needs to
construct a packet to carry a TCP ﬂag (SYN, RST, or FIN) or sim-
ply an acknowledgment, it generates an empty packet and attaches
the headers to it.
For every output packet, the trace composer ﬁrst fetches the TCP
and IP headers of the most recent input packet on the same TCP
ﬂow and generate the new headers by modifying the following
header ﬁelds:
1. If the trace is being anonymized, the source and destination
addresses in the IP header are anonymized, as discussed in
Section 4.4.2.
2. As the output trace does not have IP fragments (Bro reassem-
bles fragments early in its protocol processing, making it too
difﬁcult to track their contribution to the ﬁnal byte stream),
the composer clears fragment bits in the IP header.
3. The composer keeps the original IP identiﬁcation ﬁeld, un-
less the (source IP, ID) pair has already appeared in the out-
put trace, in which case we increment the ID till no conﬂict
is found.
4. TCP sequence/acknowledgment numbers are adjusted to re-
ﬂect new data lengths, as is the IP packet length ﬁeld. The
composer then recomputes the TCP and IP checksums. (Note
that, similar to the case of fragments in the input trace, be-
cause Bro discards packets with checksum failures early in
its processing, it is too difﬁcult to propagate checksum errors
into the transformed output.)
5. Currently the composer discards IP options, because Bro
lacks an interface to access them, and some of them would
take signiﬁcant effort to address. The composer keeps cer-
tain TCP options, such as maximum segment size, window
scaling and SACK negotiation (but not SACK blocks, due to
the ambiguity of the location of the SACK’d data in the trans-
formed stream), and timestamps; and replaces other options
with NOP.
6. TCP ﬂags are propagated, except that the composer removes
the FIN ﬂag. This is because additional packets may be in-
serted after the last one present in the input stream, and these
must still be numbered in the sequence space before the ﬁnal
FIN to comply with TCP semantics. We can imagine a “con-
ceptual” FIN that is reordered together with the payloads and
comes only at the end of the data ﬂow. Therefore, the trace
composer inserts a FIN ﬂag only when the ﬂow reassembler
has delivered, and the transformation script has processed,
the last chunk of the ﬂow.
3.4 Trace Rewriters for Trace Size Reduction
As a demonstration of the utility of trace transformation in ad-
dition to anonymization, we implemented trace rewriters for HTTP
and SMTP to reduce the size of traces rather than the privacy of
their embedded contents. At LBNL, for example, the volume of
HTTP trafﬁc often exceeds 50 GB per day. The site wants to con-
tinuously record this trafﬁc (for intrusion detection analysis), but
the volume proves problematic.
header to reﬂect the new data length, and keeps the original
Content-Length and the actual data length in an “X-Actual-Data-
Length” header (see Appendix A for an example). Testing it on a
729 MB trace ﬁle, and setting the threshold to 0 bytes (so all enti-
ties are replaced by hashes), the rewriter reduces the trace size to
25 MB, a factor of 29. If we compare the gzipped sizes of the traces
(which the site often does with traces, in order to keep them longer
before the disk ﬁlls up), the reduction becomes a factor of 69 (from
377 MB to 5.5 MB). Alternatively, we can implement more selec-
tive size reductions, such as stripping out only non-HTML objects