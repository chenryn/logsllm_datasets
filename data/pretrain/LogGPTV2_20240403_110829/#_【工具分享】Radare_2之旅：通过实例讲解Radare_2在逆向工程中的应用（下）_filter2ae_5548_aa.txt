# 【工具分享】Radare 2之旅：通过实例讲解Radare 2在逆向工程中的应用（下）
|
##### 译文声明
本文是翻译文章，文章来源：megabeets.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
译者：[ **Kp_sover**](http://bobao.360.cn/member/contribute?uid=2899451914)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**传送门**
[**【工具分享】Radare 2之旅——通过crackme实例讲解Radare
2在逆向工程中的应用（上）**](http://bobao.360.cn/learning/detail/4400.html)
**  
**
**前言**
好了，接着上一篇继续介绍 Radare 2 其他的功能。
**定位（Seeking）**
之前介绍过，r2分析完一个程序后会停留在入口点，现在是时候去其他地方看看了，刚刚看到我们所感兴趣的字符串都是在 'main'
这个函数里被调用的，因此我们用'seek' 命令跳转过去，在 r2 里，它的指令是 's' ,当然你仍然可以用在它后面添加 '?'
的方式来查看它所有可能的用法，根据你的需要选择吧：
    [0x08048370]> s?
    |Usage: s  # Seek commands
    | s                 Print current address
    | s addr            Seek to address
    | s-                Undo seek
    | s- n              Seek n bytes backward
    | s–                Seek blocksize bytes backward
    | s+                Redo seek
    | s+ n              Seek n bytes forward
    | s++               Seek blocksize bytes forward
    | s[j*=]            List undo seek history (JSON, =list, *r2)
    | s/ DATA           Search for next occurrence of ‘DATA’
    | s/x 9091          Search for next occurrence of x90x91
    | s.hexoff          Seek honoring a base from core->offset
    | sa [[+-]a] [asz]  Seek asz (or bsize) aligned to addr
    | sb                Seek aligned to bb start
    | sC[?] string      Seek to comment matching given string
    | sf                Seek to next function (f->addr+f->size)
    | sf function       Seek to address of specified function
    | sg/sG             Seek begin (sg) or end (sG) of section or file
    | sl[?] [+-]line    Seek to line
    | sn/sp             Seek next/prev scr.nkey
    | so [N]            Seek to N next opcode(s)
    | sr pc             Seek to register
seek 命令通常是接受一个地址或者数学表达式作为参数，这个表达式可以是操作指令、标志位、或者内存操作相关，现在我们想查找 main 函数，因此我们使用
's main' 指令就可以了，不过在这之前我们可以先看看 r2 到底为我们分析出了哪些函数，因此我们用 'afl'
指令，这个指令代表着分析函数列表（Analyze Functions List）.
    [0x08048370]> afl
    0x080482ec    3 35           sym._init
    0x08048320    1 6            sym.imp.strcmp
    0x08048330    1 6            sym.imp.strcpy
    0x08048340    1 6            sym.imp.puts
    0x08048350    1 6            sym.imp.__libc_start_main
    0x08048360    1 6            sub.__gmon_start___252_360
    0x08048370    1 33           entry0
    0x080483a0    1 4            sym.__x86.get_pc_thunk.bx
    0x080483b0    4 43           sym.deregister_tm_clones
    0x080483e0    4 53           sym.register_tm_clones
    0x08048420    3 30           sym.__do_global_dtors_aux
    0x08048440    4 43   -> 40   sym.frame_dummy
    0x0804846b   19 282          sym.rot13
    0x08048585    1 112          sym.beet
    0x080485f5    5 127          main
    0x08048680    4 93           sym.__libc_csu_init
    0x080486e0    1 2            sym.__libc_csu_fini
    0x080486e4    1 20           sym._fini
漂亮，在这里我们看到了之前看到过的导入函数，同时还有入口点，导入库，主函数和两个引起我们兴趣的函数：'sym.beet' 和 'sym.rot13'.
**反汇编（Disassembling）**
**主函数**
是时候去看看反汇编代码了，首先我们用 's main' 指令定位到main函数入口处，然后用 'pdf'（输出反汇编代码）
注意：就像我之前说过的，这系列文章的主要目的是去让大家了解并学习 r2
的，而不是去教大家如何阅读或者理解反汇编代码，所以在这里我不会刻意的去逐条解释每句代码的意思！事实上这些汇编代码只要有基础的汇编知识我相信都是很容易看懂的.
    [0x08048370]> s main
    [0x080485f5]> pdf
              ;– main:
    / (fcn) main 127
    |   main ();
    |           ; var int local_8h @ ebp-0x8
    |           ; var int local_4h @ esp+0x4
    |              ; DATA XREF from 0x08048387 (entry0)
    |           0x080485f5      8d4c2404       lea ecx, [esp + local_4h]   ; 0x4
    |           0x080485f9      83e4f0         and esp, 0xfffffff0
    |           0x080485fc      ff71fc         push dword [ecx – 4]
    |           0x080485ff      55             push ebp
    |           0x08048600      89e5           mov ebp, esp
    |           0x08048602      53             push ebx
    |           0x08048603      51             push ecx
    |           0x08048604      89cb           mov ebx, ecx
    |           0x08048606      83ec0c         sub esp, 0xc
    |           0x08048609      6800870408     push str._n__.::_Megabeets_::. ; str._n__.::_Megabeets_::.
    |           0x0804860e      e82dfdffff     call sym.imp.puts          ; int puts(const char *s)
    |           0x08048613      83c410         add esp, 0x10
    |           0x08048616      83ec0c         sub esp, 0xc
    |           0x08048619      6815870408     push str.Think_you_can_make_it_ ; “Think you can make it?” @ 0x8048715
    |           0x0804861e      e81dfdffff     call sym.imp.puts          ; int puts(const char *s)
    |           0x08048623      83c410         add esp, 0x10
    |           0x08048626      833b01         cmp dword [ebx], 1          ; [0x1:4]=0x1464c45
    |       ,=< 0x08048629      7e2a           jle 0x8048655
    |       |   0x0804862b      8b4304         mov eax, dword [ebx + 4]    ; [0x4:4]=0x10101
    |       |   0x0804862e      83c004         add eax, 4
    |       |   0x08048631      8b00           mov eax, dword [eax]
    |       |   0x08048633      83ec0c         sub esp, 0xc
    |       |   0x08048636      50             push eax
    |       |   0x08048637      e849ffffff     call sym.beet
    |       |   0x0804863c      83c410         add esp, 0x10