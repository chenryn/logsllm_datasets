    图 15.11:容器之间的连接
    前面的命令在第一个容器内运行，`curl`命令到达第二个容器。输出显示了服务器和请求信息。
7.  Similar to *Step 6*, connect the first container to the third one:
    ```
    docker exec -it $FIRST_CONTAINER sh -c "curl $THIRD_CONTAINER" 
    ```
    不出所料，在*步骤 6* 和*步骤 7* 中检索到不同的服务器名称和地址:
    ![Figure 15.12: Connection between containers ](img/B15021_15_12.jpg)
    图 15.12:容器之间的连接
    这表明使用自定义编织网络创建的容器正在按预期工作。
8.  您可以使用以下命令删除应用和网络:
    ```
    docker service rm workshop
    docker network rm weave-custom-net
    ```
在本练习中，您已经在 Docker 中安装并使用了一个网络插件。除此之外，您还创建了一个使用自定义网络驱动程序进行连接的容器化应用。在下一节中，您将了解更多关于 Docker 中的卷插件的信息。
# 卷插件
Docker 卷被装载到容器中，以允许有状态应用在容器中运行。默认情况下，卷在主机的文件系统中创建，并由 Docker 管理。此外，在创建卷时，可以指定卷驱动程序。例如，您可以通过网络或存储提供商装载卷，如**谷歌**、 **Azure** 或 **AWS** 。您还可以在 Docker 容器中本地运行数据库，同时数据卷在 AWS 存储服务中保持不变。这样，您的数据卷将来可以在任何其他位置运行的其他数据库实例中重用。要使用不同的卷驱动程序，您需要使用卷插件来增强 Docker。
Docker 卷插件控制卷的生命周期，包括`Create`、`Mount`、`Unmount`、`Path`和`Remove`功能。在插件软件开发工具包中，卷驱动程序接口定义如下:
```
// Driver represent the interface a driver must fulfill.
type Driver interface {
     Create(*CreateRequest) error
     List() (*ListResponse, error)
     Get(*GetRequest) (*GetResponse, error)
     Remove(*RemoveRequest) error
     Path(*PathRequest) (*PathResponse, error)
     Mount(*MountRequest) (*MountResponse, error)
     Unmount(*UnmountRequest) error
     Capabilities() *CapabilitiesResponse
}
```
注意
完整的驱动程序代码可在[https://github . com/docker/go-plugins-helper/blob/master/volume/API . go](https://github.com/docker/go-plugins-helpers/blob/master/volume/api.go)获得。
驱动程序界面的功能显示，卷驱动程序专注于卷的基本操作，如`Create`、`List`、`Get`、`Remove`操作。插件负责在容器中装载和卸载卷。如果您想要创建一个新的卷驱动程序，您需要用相应的请求和响应类型来实现这个接口。
Docker Hub 和开源社区已经提供了许多卷插件。例如，目前有 18 个卷插件在 Docker Hub 上分类和验证:
![Figure 15.13: Volume plugins in Docker Hub ](img/B15021_15_13.jpg)
图 15.13:Docker 集线器中的卷插件
大多数插件专注于从不同来源提供存储，例如云提供商和存储技术。根据您的业务需求和技术栈，您可以在 Docker 设置中考虑卷插件。
在下面的练习中，您将使用 SSH 连接在远程系统中创建卷，并在容器中创建卷。对于通过 SSH 连接创建和使用的卷，您将使用[https://github.com/vieux/docker-volume-sshfs](https://github.com/vieux/docker-volume-sshfs)提供的`open-source docker-volume-sshfs`插件。
## 练习 15.03:卷插件正在运行
Docker 卷插件通过提供来自不同提供商和技术的存储来管理卷的生命周期。在本练习中，您将安装和配置一个卷插件，通过 SSH 连接创建卷。成功创建卷后，您将在容器中使用它们，并确保文件被持久保存。你可以使用`docker-volume-sshfs`插件来实现这个目标。
要完成练习，请执行以下步骤:
1.  Install the `docker-volume-sshfs` plugin by running the following command in your terminal:
    ```
    docker plugin install --grant-all-permissions vieux/sshfs
    ```
    此命令通过授予以下所有权限来安装插件:
    ![Figure 15.14: Plugin installation ](img/B15021_15_14.jpg)
    图 15.14:插件安装
2.  Create a Docker container with an SSH connection to provide volumes to other containers with the following command:
    ```
    docker run -d -p 2222:22 \
    --name volume_provider \
    rastasheep/ubuntu-sshd:14.04
    ```
    该命令创建并运行名为`volume_provider`的`sshd`容器。港口`2222`已发布，将在以下步骤中用于连接该容器。
    您应该得到如下输出:
    ```
    87eecaca6a1ea41e682e300d077548a4f902fdda21acc218a51253a883f725d
    ```
3.  Create a new volume, named `volume-over-ssh`, by running the following command:
    ```
    docker volume create -d vieux/sshfs \
    --name volume-over-ssh \
    -o sshcmd=root@localhost:/tmp \
    -o password=root \
    -o port=2222
    ```
    该命令使用`vieux/sshfs`驱动程序和用`sshcmd`指定的`ssh`连接以及`password`和`port`参数创建新的卷:
    ```
    volume-over-ssh
    ```
4.  Create a new file and save it in the volume created in *Step 3* by running the following command:
    ```
    docker run --rm -v volume-over-ssh:/data busybox \
    sh -c "touch /data/test.txt && echo 'Hello from Docker Workshop' >> /data/test.txt"
    ```
    该命令通过安装`volume-over-ssh`来运行容器。然后它创建一个文件并写入其中。
5.  Check the contents of the file created in *Step 4* by running the following command:
    ```
    docker run --rm -v volume-over-ssh:/data busybox \
    cat /data/test.txt
    ```
    此命令通过装载相同的卷来运行容器，并从中读取文件:
    ```
    Hello from Docker Workshop
    ```
6.  (可选)通过运行以下命令删除卷:
    ```
    docker volume rm volume-over-ssh
    ```
在本练习中，您已经在 Docker 中安装并使用了一个卷插件。此外，您已经创建了一个卷，并从多个容器中使用它进行写入和读取。
在下一个活动中，您将使用网络和卷插件在 Docker 中安装 WordPress。
## 活动 15.01 :安装带有网络和音量插件的 WordPress
您的任务是使用网络和卷插件在 Docker 中将博客及其数据库设计和部署为微服务。您将使用 **WordPress** ，因为它是最受欢迎的**内容管理系统** ( **CMS** )，被互联网上超过三分之一的网站使用。存储团队要求您对 WordPress 内容使用通过 **SSH** 的卷。此外，网络团队希望您使用**编织网络**在容器之间建立网络。使用这些工具，您将使用 Docker 插件创建网络和卷，并将它们用于 WordPress 及其数据库:
1.  使用**编织网**插件创建一个 Docker 网络(即`wp-network`)。
2.  使用`vieux/sshfs`驱动程序创建一个名为`wp-content`的卷。
3.  创建一个名为`mysql`的容器来运行`mysql:5.7`映像。确保设置了`MYSQL_ROOT_PASSWORD`、`MYSQL_DATABASE`、`MYSQL_USER`和`MYSQL_PASSWORD`环境变量。此外，容器应从*第 1 步*开始使用`wp-network`。
4.  Create a container with the name `wordpress` and use the volume from *Step 2* mounted at `/var/www/html/wp-content`. For the configuration of WordPress, do not forget to set the `WORDPRESS_DB_HOST`, `WORDPRESS_DB_USER`, `WORDPRESS_DB_PASSWORD`, and `WORDPRESS_DB_NAME` environment variables in accordance with *Step 3*. In addition, you need to publish port `80` to port `8080`, reachable from the browser.
    您应该让`wordpress`和`mysql`容器运行:
    ![Figure 15.15: The WordPress and database containers ](img/B15021_15_15.jpg)
图 15.15:WordPress 和数据库容器
此外，您应该能够在浏览器中访问 WordPress 设置屏幕:
![Figure 15.16: WordPress setup screen ](img/B15021_15_16.jpg)
图 15.16: WordPress 设置屏幕
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor359)找到。
# 总结
这一章着重于用插件扩展 Docker。通过安装和使用 Docker 插件，可以通过自定义存储、网络或授权方法来增强 Docker 操作。您首先考虑了 Docker 中的插件管理和插件 API。有了插件应用编程接口，你可以通过编写新的插件来扩展 Docker，让 Docker 为你工作。
本章接着讲述了授权插件以及 Docker 守护程序是如何配置为使用插件的。如果您在生产或企业环境中使用 Docker，授权插件是控制谁可以访问您的容器的基本工具。然后，您探索了网络插件以及它们如何扩展容器之间的通信。
虽然 Docker 已经介绍了基本的网络，但我们还是看了网络插件是如何成为新网络功能的门户的。这就引出了最后一节，在这一节中，卷插件展示了如何在 Docker 中启用自定义存储选项。如果您的业务环境或技术栈要求您扩展 Docker 的功能，那么学习插件以及如何使用它们是至关重要的。
这一章的结尾也把我们带到了这本书的结尾。您在第一章就已经开始了这段旅程，学习了 Docker 的基础知识，并在您的系统上运行了第一个容器，看看您已经走了多远。就在这本书的过程中，您已经使用 Dockerfiles 创建了您的映像，并学习了如何使用公共存储库(如 Docker Hub)发布这些映像，或者如何将您的映像存储在系统上运行的存储库中。您已经学会了使用多阶段 Dockerfiles，并使用 docker-compose 实现您的服务。您甚至已经掌握了网络和容器存储的细节，以及作为项目一部分的 CI/CD 管道的实现和作为 Docker 映像构建一部分的测试。
在进一步了解 Docker 安全性和容器最佳实践之前，您已经使用 Docker Swarm 和 Kubernetes 等应用练习了编排 Docker 环境。然后，您的旅程继续进行，对您的服务度量和容器日志进行现实世界的监控，最后使用 Docker 插件来帮助扩展您的容器服务功能。我们已经介绍了许多工作来提高您对 Docker 的技能和知识。希望它能让你的应用体验更上一层楼。请参考交互式版本，了解如何在出现问题时排除故障并报告问题。您还将了解 Docker Enterprise 的当前状态，以及在使用和开发 Docker 时将采取的下一个重大举措。