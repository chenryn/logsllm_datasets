logical identity-dependent secure channels, whose security is
enforced by the TCC. Such channels are ”logical” in that
the data is transferred through modules by the UTP (i.e., A
releases data to the UTP and it is unloaded, then B is loaded
and receives data from the UTP). The channel is secure as it
guarantees (1) data integrity, through message authentication
codes, and (2) the authentication of the end points based on
their execution order (i.e., A sends to B and B receives from
A, but B and C will never exchange data). A beneﬁt of these
channels is that they allow to maintain all the data locally
(UTP side) thereby avoiding the interaction with the client
during the execution.
A client reply is authenticated through a TCC attestation,
or through previously established symmetric secret keys. The
client receives and veriﬁes the attestation. The last executed
module (in the control ﬂow graph) calls the TCC attestation
CB 
code 
base 
A(){}︎
B(){}︎
C(){}︎
Identity Table 
 A34D39FB︎
ID(A)︎
ID(B)︎
 B71686EC︎
ID(C)︎
 E323AFEC︎
CB 
1
Apps 
Identity Table 
 ID(A)︎ A34D39FB︎
 ID(B)︎ B71686EC︎
 ID(C)︎ E323AFEC︎
2
4
3
OS 
A(){}︎
secure  
channel 
ID-based key 
B(){}︎
trusted 
component
Hardware 
Fig. 3: Sketch of our solution.
service, and the TCC attests the module’s identity. Such last
module includes (the integrity measurement of) some param-
eters in its attestation, such as the client’s initial request, the
identity set of the code modules, and the reply. The attestation,
jointly with the parameters used to generate it, represents a
proof of execution veriﬁable by the client. By verifying the
module’s identity and the identity set, the client can trust that
the code base correctly served the request.
Note that, by design, the hash chain created by the protocol
enforces the execution order of the modules and guarantees
their integrity by computing their identities. This means that
the client neither has to be aware of the execution order for
any speciﬁc execution, a highly desirable feature, nor has to
verify the identity of any modules, except for the last one.
III. MODEL
Threat Model. The UTP platform is untrusted,
though
equipped with a trusted component. An adversary may take
control of any software running on the UTP machine, includ-
ing services and the OS. So, he can read/modify any data.
The UTP platform is equipped with a TCC. The TCC is
responsible to provide security guarantees for code and data,
and to link them to the (trusted) TCC manufacturer. The TCC
is trustworthy due to its minimal hardware/software security
perimeter (i.e., it does not include peripherals, such as disk or
network devices, nor the OS). A TPM-based TCC includes
components such as: the CPU, the LPC bus, the memory
modules,
the communication bus with the memory. Other
implementations could be based on secure coprocessors [39].
The adversary cannot perform physical attacks but is al-
lowed to use the TCC. Actually, we assume that the TCC
primitives (described below) are always called by an untrusted
principal. Hence, the adversary can tamper with the interme-
diate states of code modules when they are not running in the
trusted environment. It can inject false data as input to a code
module and it can execute tampered modules on the TCC.
DoS and cryptographic attacks are out of scope. The former
are difﬁcult to prevent due to the untrusted OS. The latter are
assumed computationally infeasible for the adversary.
System Model. Code base. Our service is composed by m
modules (or PALs1) p1
, . . . , pm. The control ﬂow is a directed
graph over the PALs describing their execution order. An
execution ﬂow is a sequence of PALs of ﬁnite but unknown
, . . . , p4) that respects the control ﬂow. We
length n (e.g., p1
, p3
1Piece of Application Logic, using the notation of previous works [33, 32].
421
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:56 UTC from IEEE Xplore.  Restrictions apply. 
refer to a generic execution ﬂow with p1
clear from context the distinction with the code base set.
, . . . , pn. It will be
We assume the service is either originally created or
suitably partitioned into code modules by the service authors.
In Section VII, we brieﬂy discuss how modules can be deﬁned.
UTP-side. The code base is available on the UTP, possibly
outsourced by its (trusted) authors.
Client-side. The client knows the cryptographic hashes of the
attested PALs, and also the hash of the Identity Table (Fig. 3),
which represents the identity set. Ideally, the information could
be provided by the (trusted) authors of the code base and it
requires a constant amount of space.
Additionally, the client knows and trusts the TCC’s public
key K+
TCC. This can be achieved through an initial TCC Veriﬁ-
cation Phase: the client interacts with the UTP to retrieve K+
TCC
and the associated certiﬁcate. If the public key is correctly
certiﬁed by a trusted Certiﬁcation Authority (e.g., the TCC
manufacturer), then it can be trusted and used for veriﬁcation.
TCC Model.
The TCC is abstracted through a set of
primitives, derived from the available Trusted Computing
technologies [20, 45]. They can be implemented on a variety
of TC architectures, e.g., Intel TXT-enabled processors and a
TPM. Future implementations may leverage Intel SGX [25].
• out ← execute(c, in) It executes some code c in isolation
over some input data in and returns the output out.
← auth put(rcv, data) and
• {data}snd−rcv
← auth get(snd,{data}snd−rcv
The
primitives for secure storage allow to specify the identity rcv
(resp. snd) of the only recipient (resp. sender) code that can
retrieve (resp. send) some data. Secured data is protected with
key K and stored outside the TCC in untrusted storage.
• report ← attest(N, parameters) It accepts a fresh nonce
N and some parameters, typically measurements, and pro-
duces the attestation (report). The attestation binds this
information together with the identity of the executing code,
which is stored in an internal register REG.
• {0, 1}← verify(c, parameters, N, K+
, report) It is im-
plemented on the client, who calls it with the execution in-
formation (such as code identity, input and output parameters,
nonce, TCC public key and report) to be veriﬁed.
{data,∅}
TCC
K
K
)
IV. SECURE IDENTIFICATION OF
ACTIVELY EXECUTED CODE
A. A Naive Solution
A client could verify and establish trust in the execution
of a large code base by iteratively checking that each PAL is
run correctly and respects the control ﬂow graph. A relatively
simple protocol to achieve this is the following: the client
sends a request to the UTP to execute the ﬁrst PAL p1 on the
TCC, and provides the necessary input values for the service.
When the PAL terminates, the UTP forwards to the client
an attestation returned by p1 that covers its identity (i.e., a
hash of the module), the input and the output data. The output
includes the identity of the next PAL to be run, besides the
result of the execution (i.e., the intermediate state). Using the
TCC primitives, the client can verify that the output is valid,
since it was calculated with the correct code and the proper
input. The same procedure can then be repeated for each PAL
422
in the execution ﬂow until the ﬁnal result (i.e., the actual reply
for the client) is produced by pn. The protocol ensures that the
PALs are called in the right order and run over the correct data.
Hence, it offers the required correctness guarantees.
Although the naive approach is secure and only attests the
code modules that are actually executed, it has a number of
drawbacks. First, attestations are expensive, so a large number
of executed modules can consume lots of TCC resources.
Second, it is interactive, since it requires the client to verify
each PAL and to mediate the transfer of the intermediate state
between two module executions. Third, it is not veriﬁcation
efﬁcient as the client has to check every attestation.
In the rest of the section we eliminate the above drawbacks.
We explain a set of orthogonal techniques that: remove the
interactivity with the client and reduce the TCC attestations
to one (§IV-B), address an issue with identity-based secure
storage (§IV-C), and optimize performance with a novel TCC-
based key sharing solution (§IV-D). Finally, we devised a
ﬂexible and veriﬁable trusted execution protocol (§IV-E).
B. Reducing Communication
When a trusted execution is requested, the client is only
interested in obtaining the ﬁnal reply (generated by the last
executed module pn) and in verifying the validity of the whole
execution (i.e., as if the code were executed as one single
module). As a consequence, the intermediate states do not have
to be transmitted to the client as long as the client can check at
a later time that they were handled correctly. Similarly, each
PAL execution does not need to be attested as long as the
client is still able to verify the correctness of the ﬁnal result.
In the naive protocol, the client is involved in each PAL
execution to ensure that the result of a piece of code pi is
properly provided as input to the next module pi+1. This
is accomplished with two attestations returned to the client.
The ﬁrst is generated by pi and provides evidence about pi’s
intermediate state and the identity of the PAL that should
be run next. The second is generated by pi+1 and provides
evidence that the PAL received the correct intermediate state.
Therefore, if a malicious UTP tampers with the execution,
e.g., by running pi+1 with some incorrect input data, this can
be detected with the second attestation. Hence, the veriﬁcation
of these attestations conﬁrms that the intermediate state was
correctly transferred from pi to pi+1.
Attestations are a key mechanism in secure code execution
but the overhead they impose is a concern. Attestations are
essential because they convey the execution integrity properties
to a client. They are however expensive, since they involve
digital signatures. In addition, they are meant to be veriﬁed.
Consequently, each one imposes a non-zero overhead on the
client. Veriﬁcation requires not only the signature check, but
also access to a copy of all data that is attested (i.e., at least
the measurement of the code, the input and the output data).
In our approach, we build a “secure channel” between
PALs without the client’s supervision, thus saving attestation,
communication and veriﬁcation effort. We leverage the TCC
secure storage capabilities (§III) to protect the data while it is
saved locally in the UTP’s untrusted storage. Recall that the
TCC secure storage is based on code identity to authenticate
the auth put and auth get operations. By ensuring that only
the correct code modules access security-sensitive intermediate
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:56 UTC from IEEE Xplore.  Restrictions apply. 
state results, secure storage can be used as the basis to build a
secure data transmission between PALs, instead of relying on
attestations. Essentially, a mutually-authenticated channel is
created: a PAL pi authenticates the identity of the previous
sender pi−1 when it gets the data from a protected input,
and uses the identity of the next recipient pi+1 to securely
store its results, before releasing them to the UTP’s untrusted
environment. It is because of this construction that the client
only needs to verify the last executed PAL. Consequently, it
is critical to ensure that such single veriﬁcation can indeed be
utilized to bootstrap trust into an arbitrary number of correct
(though unveriﬁed) PALs that were called previously. We now
present the end-to-end scenario for completeness and clarity.
The client ﬁrst issues a service request and provides the
respective input values in and a fresh nonce N to the UTP. The
, in||N).
UTP calls the ﬁrst module with the input: execute(p1
The module carries out the initial part of the service com-
, h(in)||N||out) before
putation and it
terminating. In other words, it saves a measurement of the
intermediate state in secure storage,
input and any output
specifying the identity of the only subsequent PAL that is
allowed to retrieve it (i.e., p2 in the service execution ﬂow). The
−p
outcome of the call is the protected data {h(in)||N||out}p
,
K
is not
which is then returned to the UTP. Notice that p1
attested, so it will not be veriﬁed by the client.
−p
,{h(in)||N||out}p
) to
run module p2. The PAL authenticates the received data
it came from trusted source. This is
to make sure that
achieved by calling auth get(p1
) with
p1’s identity. If the identity is not correct then auth get
fails, otherwise it succeeds and the PAL continues (part of)
the service execution. Before it terminates, the PAL performs
, h(in)||N||out) to secure the (updated) output
auth put(p3
intermediate state for the subsequent PAL. This procedure is
repeated by all intermediate PALs.
The UTP next calls execute(p2
,{h(in)||N||out}p
invokes auth put(p2
−p
K
K
1
2
1
2
1
2
TCC
it also gives assurance about
, h(in)||h(out), N, K+
The last PAL is attested and veriﬁed by the client. After
pn retrieves the result from pn-1 and runs the service code,
it calls the attestation primitive attest(N, h(in)||h(out)) to
get a proof of execution that covers the input and output
measurements, besides pn’s own code. Since the attestation
includes the nonce N,
the
freshness of the computation. The output with the attesta-
tion and the reply data {report, out} is ﬁrst released to
the UTP’s untrusted environment, and then forwarded to
the client. The client veriﬁes the execution proof by calling
verify(pn
, report) and accepts the re-
sult only if the primitive succeeds.
Analysis. The attestation binds together the initial inputs, the
output and the identity of the last PAL. The cryptographic
mutually authenticated chain that links pn to the previous PALs
ensures that computation is performed only among correct
PALs: when the veriﬁcation of the correct execution of pn
succeeds then, by construction, the client also trusts that pn can
only have received data from a valid pn-1; the same reasoning
can be repeated up to p1, which is the single entry point
to the service and is the PAL that received the initial input
data. Hence, correct intermediate PALs only accept data from
(respectively deliver data to) correct PALs. Furthermore, as
each piece of code speciﬁes the receiver in auth put, the
overall execution order must match a valid control ﬂow.
PAL1
idPAL3