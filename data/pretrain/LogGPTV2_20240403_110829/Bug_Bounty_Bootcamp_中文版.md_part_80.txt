Once you've located the SAML response, you can analyze its content to
see which fields the service provider uses for determining the identity
of the user. Since the SAML response is used to relay authentication
data to the service provider, it must contain fields that communicate
that information. For example, look for field names like
`      username     ` , `      email address     ` , `      userID     `
, and so on. Try tampering with these fields in your proxy. If the SAML
message lacks a signature, or if the signature of the SAML response
isn't verified at all, tampering with the message is all you need to do
to authenticate as someone else!
一旦找到了 SAML
响应，您可以分析其内容，看看服务提供商用于确定用户身份的哪些字段。由于
SAML
响应用于将认证数据传递给服务提供商，因此必须包含传达该信息的字段。例如，查找字段名称，例如用户名、电子邮件地址、用户
ID 等。尝试在代理中篡改这些字段。如果 SAML 消息缺少签名，或者根本不验证
SAML 响应的签名，则篡改消息就足以作为其他人进行认证！
### Step 3: Bypass the Signature {#c20.xhtml#h2-501546c20-0009}
If the SAML message you're tampering with does have a signature, you can
try a few strategies to bypass it.
如果你篡改的SAML消息具有签名，你可以尝试一些策略来绕过它。
If the signatures are verified only when they exist, you could try
removing the signature value from the SAML response. Sometimes this is
the only [ ]{#c20.xhtml#Page_320 .pagebreak title="320"} action required
to bypass security checks. You can do this in two ways. First, you can
empty the signature field:
如果只有存在签名时才会验证签名，您可以尝试从SAML响应中删除签名值。有时这是绕过安全检查所必需的唯一操作。您可以用两种方式来实现。首先，您可以清空签名字段：
          victim_user
Or you can try removing the field entirely:
或者你可以尝试完全删除该字段：
          victim_user
If the SAML response signature used by the application is predictable,
like the base64 example we discussed earlier, you can simply recalculate
the signature and forge a valid SAML response.
如果应用程序使用的 SAML 响应签名是可预测的，就像我们之前讨论的 base64
示例一样，您可以简单地重新计算签名并伪造一个有效的 SAML 响应。
### Step 4: Re-encode the Message {#c20.xhtml#h2-501546c20-0010}
After tampering with the SAML response, re-encode the message into its
original form and send it back to the service provider. The service
provider will use that information to authenticate you to the service.
If you're successful, you can obtain a valid session that belongs to the
victim's account. SAML Raider is a Burp Suite extension that can help
you with editing and re-encoding SAML messages.
篡改 SAML
响应后，重新编码消息并将其发送回服务提供商。服务提供商将使用该信息来对您进行身份验证。如果成功，则可以获得属于受害者帐户的有效会话。SAML
Raider 是一个 Burp Suite 扩展，可以帮助您编辑和重新编码 SAML 消息。
## Hunting for OAuth Token Theft {#c20.xhtml#h1-501546c20-0005}
Before you dive into hunting for OAuth open redirect issues, you should
first determine whether the website is using OAuth. You can figure this
out by intercepting the requests to complete authentication on the
website and look for the `      oauth     ` keyword in the HTTP
messages.
在你深入挖掘OAuth重定向问题之前，你应该先确定该网站是否正在使用OAuth。你可以通过拦截完整身份验证请求并查看HTTP消息中的oauth关键字来确定这一点。
Then start looking for open redirect vulnerabilities. You can find
details on how to find open redirects in [ Chapter 7 ]{.xref
itemid="xref_target_Chapter 7"} . Finally, see if you can smuggle the
OAuth tokens offsite by using one of the open redirects that you've
found.
然后开始寻找开放重定向漏洞。您可以在第七章中找到有关如何查找开放重定向的详细信息。最后，通过使用您找到的其中一个开放重定向，查看是否可以窃取OAuth令牌到外部网站。
## [ ]{#c20.xhtml#Page_321 .pagebreak title="321"} Escalating the Attack {#c20.xhtml#h1-501546c20-0006}
SSO bypass usually means that attackers can take over the accounts of
others. Therefore, these vulnerabilities are of high severity before any
escalation attempts. But you can escalate SSO bypass vulnerabilities by
attempting to take over accounts with high privileges, such as admin
accounts.
SSO绕过通常意味着攻击者可以接管他人的帐户。因此，在任何升级尝试之前，这些漏洞的严重程度非常高。但是，您可以通过尝试接管高特权帐户（例如管理员帐户）来升级SSO绕过漏洞。
Also, after you've taken over the user's account on one site, you can
try to access the victim's account on other sites by using the same
OAuth credentials. For instance, if you can leak an employee's cookies
via subdomain takeover, see if you can access their company's internal
services such as admin panels, business intelligence systems, and HR
applications with the same credentials.
此外，在接管了一个站点上的用户帐户后，您可以尝试使用相同的OAuth凭据访问受害者在其他站点上的帐户。例如，如果您可以通过子域接管泄漏员工的cookie，请尝试使用相同的凭据访问其公司的内部服务，如管理员面板、商业智能系统和人力资源应用程序。
You can also escalate account takeovers by writing a script to automate
the takeover of large numbers of accounts. Finally, you can try to leak
data, execute sensitive actions, or take over the application by using
the accounts that you have taken over. For example, if you can bypass
the SSO on a banking site, can you read private information or transfer
funds illegally? If you can take over an admin account, can you change
application settings or execute scripts as the admin? Again, proceed
with caution and never test anything unless you have obtained
permission.
你也可以编写脚本自动接管大量账户，以提高账户接管的效率。最后，你可以使用接管的账户试图泄露数据、执行敏感操作或接管应用程序。例如，如果你可以绕过银行网站的SSO，你能查看私人信息或非法转账吗？如果你能够接管管理员账户，你能够更改应用程序设置或作为管理员执行脚本吗？再次强调，必须谨慎行事，除非你已获得许可，否则不要测试任何东西。
## Finding Your First SSO Bypass! {#c20.xhtml#h1-501546c20-0007}
Now that you are familiar with a few SSO bypass techniques, try to find
your first SSO bypass bug:
既然你已经熟悉了一些SSO绕过技术，现在尝试寻找你的第一个SSO绕过漏洞吧。
1.  If the target application is using single sign-on, determine the SSO
    mechanism in use.
2.  If the application is using shared session cookies, try to steal
    session cookies by using subdomain takeovers.
3.  If the application uses a SAML-based SSO scheme, test whether the
    server is verifying SAML signatures properly.
4.  If the application uses OAuth, try to steal OAuth tokens by using
    open redirects.
5.  Submit your report about SSO bypass to the bug bounty program!
:::
[]{#c21.xhtml}
::: section
# [ [ ]{#c21.xhtml#Page_323 .pagebreak title="323"} 21 ]{.ChapterNumber} [ Information Disclosure ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
The IDOR vulnerabilities covered in [ Chapter 10 ]{.xref
itemid="xref_target_Chapter 10"} are a common way for applications to
leak private information about users. But an attacker can uncover
sensitive information from a target application in other ways too. I
call these bugs *information disclosure* bugs. These bugs are common; in
fact, they're the type of bug I find most often while bug bounty
hunting, even when I'm searching for other bug types.
本书第10章提到的IDOR漏洞是应用程序泄露用户私人信息的常见途径。但攻击者也可以通过其他方式获取目标应用程序的敏感信息。我将这些漏洞称为信息披露漏洞。这些漏洞很常见，事实上，它们是我在赏金猎人活动中最常发现的缺陷类型，即使我在寻找其他类型的缺陷时也是如此。
These bugs can happen in many ways, depending on the application. In
this chapter, we'll talk about a few ways you might manage to leak data
from an application, and how you can maximize the chances of finding an
information disclosure yourself. This chapter delves into some of the
techniques mentioned in [ Chapter 5 ]{.xref
itemid="xref_target_Chapter 5"} , but with a focus on extracting
sensitive and private information by using these techniques.
这些漏洞可能因应用程序的不同而发生。本章中，我们将讨论从应用程序泄露数据的一些方法，并介绍如何最大化发现信息泄露的机会。本章深入探讨了第5章提到的一些技术，但重点关注如何使用这些技术提取敏感和私人信息。
## [ ]{#c21.xhtml#Page_324 .pagebreak title="324"} Mechanisms {#c21.xhtml#h1-501546c21-0001}
Information disclosure occurs when an application fails to properly
protect sensitive information, giving users access to information they
shouldn't have available to them. This sensitive information can include
technical details that aid an attack, like software version numbers,
internal IP addresses, sensitive filenames, and filepaths. It could also
include source code that allows attackers to conduct a source code
review on the application. Still other times, the application leaks
private information of users, like a user's age, bank account numbers,
email addresses, and mailing addresses, to unauthorized third parties.
信息泄露发生在应用程序未能正确保护敏感信息时，使用户可以访问他们不应该拥有的信息。这些敏感信息可能包括技术详细信息，如软件版本号、内部IP地址、敏感文件名和文件路径。它还可能包括源代码，使攻击者可以对应用程序进行源代码审查。有时，应用程序还会泄漏用户的私人信息，例如用户的年龄、银行帐户号码、电子邮件地址和邮寄地址，传递给未经授权的第三方。
Most systems aim to hide development information, including software
version numbers and configuration files, from the outside world, because
it allows attackers to gather information about an application and
strategize about how to most effectively attack it. For example,
learning the exact software versions an application uses will allow
attackers to look for publicly disclosed vulnerabilities that affect the
application. Configuration files often contain information such as
access tokens and internal IP addresses that attackers can use to
further compromise the organization.
大多数系统的目标是隐藏开发信息，包括软件版本号和配置文件，以防止攻击者收集关于应用程序的信息并制定如何最有效地攻击它的策略。例如，了解应用程序使用的确切软件版本将使攻击者寻找影响该应用程序的公开披露的漏洞。配置文件通常包含访问令牌和内部IP地址等信息，攻击者可以使用它们来进一步破坏组织。
Typically, applications leak version numbers in HTTP response headers,
HTTP response bodies, or other server responses. For example, the
`      X-Powered-By     ` header, which is used by many applications,
shows you which framework the application runs:
通常，应用程序会在HTTP响应头，HTTP响应正文或其他服务器响应中泄漏版本号。例如，许多应用程序使用的X-Powered-By头会向您显示应用程序运行的框架：
    X-Powered-By: PHP/5.2.17
On the other hand, applications leak sensitive configuration files by
not applying proper access control to the files, or by accidentally
uploading a sensitive file onto a public repository that outside users
can access.
另一方面，应用程序通过未对文件应用适当的访问控制或意外地将敏感文件上传到外部用户可以访问的公共存储库中而泄漏敏感配置文件。
Another piece of information that applications should protect is their
source code. When the backend code of an application is leaked to the
public, the leaked code can help attackers understand the application's
logic, as well as search for logic flaw vulnerabilities, hardcoded
credentials, or information about the company's infrastructure, such as
internal IPs. Applications can leak source code by accidentally
publishing a private code repository, by sharing code snippets on public
GitHub or GitLab repositories, or by uploading it to third-party sites
like Pastebin.
应用程序应该保护的另一个信息是它们的源代码。当应用程序的后端代码泄露给公众时，泄露的代码可以帮助攻击者理解应用程序的逻辑，并搜索逻辑漏洞漏洞，硬编码凭据或有关公司基础架构的信息，例如内部IP。应用程序可能会通过意外发布私有代码存储库，通过在公共GitHub或GitLab存储库上共享代码片段，或通过将其上传到Pastebin等第三方站点来泄漏源代码。
Finally, applications often leak sensitive information by including it
in their public code. Developers might accidentally place information
such as credentials, internal IP addresses, informative code comments,
and users' private information in public source code such as the HTML
and JavaScript files that get served to users.
应用程序经常通过将敏感信息包含在其公共代码中泄漏。开发人员可能会意外地将信息（例如凭据、内部IP地址、信息性代码注释和用户的私人信息）放在公共源代码中，例如提供给用户的HTML和JavaScript文件中。
## Prevention {#c21.xhtml#h1-501546c21-0002}
It's difficult to completely prevent sensitive information leaks. But
you can reliably lower the possibilities of information disclosure by
safeguarding your data during the development process.
完全阻止敏感信息泄露是困难的。但你可以通过在开发过程中保护数据，可靠地降低信息泄露的可能性。
[ ]{#c21.xhtml#Page_325 .pagebreak title="325"} The most important
measure you should take is to avoid hardcoding credentials and other
sensitive information into executable code. Instead, you can place
sensitive information in separate configuration files or a secret
storage system like Vault (
[https://github.com/hashicorp/vault/](https://github.com/hashicorp/vault/){.LinkURL}
). Also, audit your public code repositories periodically to make sure
sensitive files haven't been uploaded by accident. Tools can help you
monitor code for secrets, such as secret-bridge (
[https://github.com/duo-labs/secret-bridge/](https://github.com/duo-labs/secret-bridge/){.LinkURL}
). And if you have to upload sensitive files to the production server,
apply granular access control to restricts users' access to the files.
你应该采取的最重要的措施是避免将凭据和其他敏感信息硬编码到可执行代码中。相反，可以将敏感信息放在单独的配置文件或像Vault（https://github.com/hashicorp/vault/）这样的秘密存储系统中。另外，定期审核公共代码库，以确保敏感文件没有被意外上传。工具可以帮助您监视包含秘密的代码，例如secret-bridge（https://github.com/duo-labs/secret-bridge/）。如果您必须上传敏感文件到生产服务器，则应用精细的访问控制以限制用户对文件的访问。
Next, remove data from services and server responses that reveals
technical details about the backend server setup and software versions.
Handle all exceptions by returning a generic error page to the user,
instead of a technical page that reveals details about the error.