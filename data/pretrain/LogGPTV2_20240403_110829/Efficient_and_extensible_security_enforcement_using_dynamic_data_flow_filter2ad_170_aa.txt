# Efficient and Extensible Security Enforcement Using Dynamic Data Flow Analysis

**Authors:**
- Walter Chang
- Brandon Streiff
- Calvin Lin

**Abstract:**
Current taint tracking systems suffer from high overhead and a lack of generality. In this paper, we address both issues with an extensible system that is significantly more efficient than previous software taint tracking systems and is fully general for dynamic data flow tracking problems. Our system uses a compiler to transform untrusted programs into policy-enforcing programs. It can be easily reconfigured to support new analyses and policies without modifying the compiler or runtime system. Our system employs a sound and sophisticated static analysis to dramatically reduce the amount of data that must be dynamically tracked.

For server programs, our system's average overhead for taint tracking is 0.65%, comparable to the best hardware-based solutions. For compute-bound benchmarks, our system produces no runtime overhead because our compiler can prove the absence of vulnerabilities, eliminating the need for dynamic taint tracking. After modifying these benchmarks to include format string vulnerabilities, our system's overhead is less than 13%, which is over 6 times lower than the previous best solutions. We demonstrate the flexibility and power of our system by applying it to file disclosure vulnerabilities, a problem that taint tracking cannot handle. To prevent such vulnerabilities, our system introduces an average runtime overhead of 0.25% for three open-source server programs.

**Categories and Subject Descriptors:**
- D.4.6 [Operating Systems]: Security and Protection—Information Flow Controls

**General Terms:**
- Reliability, Security, Verification

**Keywords:**
- Dynamic Data Flow Analysis, Security Enforcement, Static Analysis

**Permission to Use:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.

**CCS'08, October 27–31, 2008, Alexandria, Virginia, USA.**
- Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.

## Introduction

Many security attacks rely on the ability to pass carefully crafted hostile data to vulnerable portions of a target program. One method of preventing such attacks is to perform dynamic taint analysis. This approach marks untrusted data as tainted, tracks the flow of tainted data through the system, and checks that tainted data is not misused. Existing taint analysis research has largely followed two directions: (1) improving runtime overhead and (2) extending the generality of taint tracking.

Significant progress has been made in the first direction. Recent work has reduced the extreme overheads of early systems by performing taint-specific optimizations, but performance remains a challenge, with average overheads of 260% for compute-bound applications. Alternative techniques can reduce the average overhead to 75% for compute-bound applications, but this result requires processor and OS-specific assumptions that are not generally applicable.

The second direction, which has received less attention, extends the generality of taint analysis, recognizing that taint tracking is a special case of data flow tracking. Taint analysis tracks one bit of information, while data flow tracking can track multiple bits of information and combine them in more flexible ways. Taint-based systems are limited to specific types of exploits, while general data flow tracking can handle a broader range of problems. Such generality will become particularly important as developers move to memory-safe languages like Java and C#, where taint tracking for secure control flow is not needed.

## Our System

Figure 1 illustrates the overall structure of our system. The input is an untrusted program, and the output is an enhanced program that enforces a specified security policy. The policy is selected by the end-user at compile time. To enforce the desired policy, the compiler performs a static vulnerability analysis to identify potential violations and then identifies locations in the input program that require dynamic analysis. The enhanced program then dynamically enforces the policy using a tag-based dynamic data flow analysis, discussed in Section 4.1.

The policy is defined in an annotation file, describing the policy and the effects of standard library calls. Thus, the policy is entirely separate from the data flow tracking mechanism, allowing new security policies to be specified without modifying the compiler or runtime system.

The key to our system’s low overhead is the compiler’s ability to identify many innocuous data flows that do not need to be tracked. For example, if a program reads data into several buffers, but only one buffer is used in a way that violates the policy, the other buffers and their flows do not need to be tracked. In cases where the compiler can prove that no policy violations are possible, the resulting program contains no instrumentation and incurs no runtime overhead.

Our compiler can precisely identify innocuous data flows because:
1. The system's security policy can be interpreted as a static data-flow analysis.
2. The compiler performs an interprocedural analysis using a precise and scalable pointer analysis.

This paper makes three main contributions:
1. We introduce a system that accepts untrusted C programs and produces C programs that can enforce any policy expressible as data flow tracking. Our system includes predefined policies for taint and file disclosure and can be extended to handle other problems and security policies without modifying the implementation.
2. We show that our system is general by using it to enforce file disclosure vulnerabilities—a privacy problem that taint tracking cannot handle—as well as to perform traditional taint tracking. Our system is as general as GIFT but is configured through an existing declarative annotation language.
3. We demonstrate our system’s performance advantages by evaluating it on both server programs and compute-bound programs. For common open-source server programs, our system’s average overhead is 0.65%, compared with 6% for the previous best results. For compute-bound SPECint benchmarks, our system can prove the absence of format string errors, resulting in zero overhead. After inserting vulnerabilities, our system’s average overhead for compute-bound programs is less than 13%, compared with 75-260% for previous systems.

## Related Work

Our work generalizes dynamic taint tracking, which has been used to protect against buffer overflows, stack smashing, and format string attacks. Taint tracking is a practical realization of some concepts of information flow control and integrity but typically ignores implicit flows. Previous work in taint tracking has used dynamic binary instrumentation frameworks or specialized hardware, focusing on reducing runtime overhead.

Many taint tracking systems based on binary instrumentation, such as TaintCheck or Dytan, have high overheads, up to 37×. More recent systems like LIFT have improved performance, but overhead for compute-bound programs remains as high as 7.9×. Xu et al. present a high-performance compiler-based taint tracking system, achieving an average overhead of 6% for server applications, but this comes at a cost of 75% for compute-bound applications.

Hardware-based taint tracking can eliminate much of the overhead associated with software-based taint tracking but can still have overheads up to 23% due to cache performance degradation. Most hardware-based systems only defend against memory and control flow errors. Raksha provides additional flexibility but at a high cost, with average overhead exceeding 3×.

Lam and Chiueh’s General Information Flow Tracking (GIFT) is a framework that uses a compiler to add code for propagating and checking tags associated with data, handling a wide range of problems beyond overwrite attacks. However, GIFT policies are defined operationally by writing code, limiting the compiler's ability to analyze and optimize the added code, leading to average CPU time overheads of 82% for sandboxing client applications.

Inline reference monitors use security automata to defend against attacks but are unsuitable for tracking information flow. PQL presents a more flexible scheme based on pattern matching of event sequences on objects, but it requires type safety and works only on heap objects, making it unsound for scalar variables.

Static analysis can find bugs and potential security vulnerabilities in software, but such systems still require significant effort from developers to verify and fix reported vulnerabilities. For example, CQUAL has been used to find format string vulnerabilities, but programmers must manually determine whether the reported vulnerability is real or a false positive, with a false positive rate of approximately 84%. In contrast, our system uses statically identified vulnerabilities to determine where dynamic guards are required, producing a system protected from the vulnerability without additional programmer effort.

Language-based security solutions, such as type-safe C and bounds checking for C, provide strong guarantees at compile time but impose significant performance overhead or require significant developer effort to rewrite and redesign current programs. Safe-C approaches cannot handle errors like SQL injection that do not violate language semantics. JiF supports complex information flow policies that our system cannot, but our system handles a broader class of problems that plague even safe languages.

## Moving Beyond Taint Analysis

Before detailing our system, we explain the importance of moving beyond taint analysis to richer data flow tracking problems. Taint tracking does not provide sufficient information to handle many attacks. For example, taint tracking cannot handle file disclosure vulnerabilities, which require the simultaneous tracking of two different properties. Additionally, taint tracking is too simplistic for problems in privacy and access control, such as enforcing labeled security policies, which require tracking hierarchical levels and non-hierarchical categories. To meet future challenges, systems must be able to track multiple complex properties simultaneously.

With respect to policies, most taint tracking systems enforce "low-level" policies that prevent overwrite attacks. While overwrite attacks are a major concern in unsafe languages, they are not a significant concern in managed languages and scripting languages that already guarantee memory safety. Privacy breaches and information breaches often occur without memory errors and represent a serious challenge for current and future web applications. To address these and future attacks, systems must support higher-level policies that are aware of higher-level application contexts.