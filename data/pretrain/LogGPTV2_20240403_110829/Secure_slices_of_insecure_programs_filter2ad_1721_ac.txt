The computation of secure slices relies on the transformation function, denoted as \( \tau \). This function is parameterized by the set of invalid flows in the program and operates independently of the method used to identify these flows. Consequently, if we can detect invalid flows even in the presence of declassification, a secure slice can be computed using \( \tau \).

For instance, Hammer et al. [11] present a data flow analysis framework for intransitive non-interference analysis [26]. This framework, defined over a dependence graph, is specifically designed to support information declassification. The output from this framework—a set of invalid flows—can be utilized to appropriately modify a program and produce secure slices. The prototype tool described in the following section is based on this framework and, as demonstrated, it can be used to compute secure slices.

### Secure Slicing in Real Programming Languages

A key feature of the transformation process discussed in this paper is its scalability to real, non-trivial programming languages such as Java. There are well-known algorithms for dependence analysis of programs written in modern programming languages (e.g., [24, 31, 5, 21]), which makes it possible to build information flow analyzers on top of them. However, only a few such tools exist (e.g., the tool described in [11]), and most information flow control (IFC) systems are based on type systems, such as Jif (originally named JFlow) [19] and Flow Caml [30].

We have developed a prototype tool capable of performing IFC on software systems written in Java and/or Java bytecode, supporting security annotations at both the source and bytecode levels. The tool also allows for the enforcement of non-interference in programs that need to intentionally declassify information.

The tool, implemented in Java, leverages the slicing and analysis libraries of Indus [25], a framework for the analysis of full Java programs. The slicing library provides methods to compute highly customizable, interprocedural, context-sensitive slices in both backward and forward directions. The analysis library includes modules to calculate inter- and intra-method data dependencies, control dependencies, interference dependencies, ready dependencies, and other related analyses. Both libraries operate on top of Jimple [23], a three-address representation for Java bytecode, which is part of the Soot framework [22] that provides libraries for Jimple manipulation.

**Note:**
- The tool does not support dynamic class loading, reflection, and native methods.
- The term "interference" here refers to concurrent write/read access to shared memory between different program threads.

### Example Program and Secure Slices

Consider the Java program in Figure 5, which will help illustrate how the tool handles complex features of Java, such as object sensitivity and dynamic dispatch. Security annotations, using a two-level security lattice (Low → High), are provided as program comments for clarity. "Provides" tags (P) mark statements generating secure data, while "Allows" tags (A) indicate the allowed upper security level of the information flowing to an output channel.

To identify invalid flows, the tool computes the backward slice for each "allows"-tagged statement in the program (statements 18, 22, and 24 in our example). Each slice is then analyzed to find statements providing information at a security level not lower or equal to the allowed level of the criterion statement. If such a statement is found, an invalid flow is identified.

**Analysis of the Slices:**

- **Backward slice for statement 18:** {13, 16, 17}. This slice does not include any "provides"-tagged statements, so the flows to statement 18 are valid. The tool correctly identifies that the object referenced at line 18 is the one created at line 16, not the first created object (line 14) which was set with a High value (variable `sec`).
- **Backward slice for statement 22:** {11, 12, 16, 17, 19, 20, 21}. Since statement 12 provides a High flow, the tool indicates an invalid flow from statement 12 to statement 22.
- **Backward slice for statement 24:** Similar to the slice for statement 22, it includes statement 12 due to the inclusion of statements 19 and 20. The tool reports the invalid flow from statement 12 to statement 24.

From this analysis, we conclude that statements 22 and 24 are the sinks of two invalid flows and need to be modified to produce a secure slice. These statements can be eliminated or changed to output a default value using the \( \tau \) transformation function. Figure 6 shows a secure slice of the example program, where statements 22 and 24 now print out a default message.

### Example: A Java Program with Declassification

A typical example of a program that needs to intentionally declassify information is a password checking program, as shown in Figure 7. The program is annotated with security levels from the lattice Public → Confidential → Secret. The password list is Secret, the user names list and the query introduced by the user are Confidential.

```java
public static void main(String[] args) {
    int sec = 0; // P: High
    int pub = 1;
    A o = new A();
    o.set(sec);
    o = new A();
    o.set(pub);
    System.out.print(o.get()); // A: Low
    if (sec == 0 && args[0].equals("007")) {
        o = new B();
    }
    o.set();
    System.out.print("Censored"); // A: Low
    o.set(42);
    System.out.print("Censored"); // A: Low
}

class A {
    int x;

    public void set(int i) { x = i; }
    public int get() { return x; }
}

class B extends A {
    public void set() { x = 0; }
}
```

Figure 6: Secure slice of the Java program in Listing 5

```java
private String[] names; // P: Confidential
private String[] passwords; // P: Secret

public boolean check(String username, String query) { // P: Confidential
    boolean match = false;
    boolean nameOkFlag = false;
    for (int i = 0; i < names.length; i++) {
        if (names[i].equals(username)) {
            nameOkFlag = true;
            if (passwords[i].equals(query)) {
                match = true;
                break;
            }
        }
    }
    if (nameOkFlag) {
        System.out.println("Access granted");
    } else {
        System.out.println("Invalid username or password");
    }
    return match;
}
```

Figure 7: A Java program with declassification

This example demonstrates how the tool can handle declassification and ensure that sensitive information is properly managed and protected.