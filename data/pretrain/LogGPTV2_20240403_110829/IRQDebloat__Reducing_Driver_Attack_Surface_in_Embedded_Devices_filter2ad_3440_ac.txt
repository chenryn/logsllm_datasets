when we regroup I/O sequences, and will be replayed with
speciﬁc values (randomly chosen from 0 or -1) during the I/O
replay. These values were chosen by examining the code of
several timer and UART drivers and identifying values that
minimize the amount of polling needed among the hardware
seen in our evaluation corpus. An example of this sort of
problematic code is given in Listing 3; here, the FreeBSD
kernel repeatedly polls the UART’s FIFO status register until
the FR_TXFF bit is clear. Returning 0 allows this loop to be
bypassed, resulting in a shorter trace.
Listing 3 PL011 UART driver in the FreeBSD kernel.
static void
uart_pl011_putc(struct uart_bas *bas, int c)
{
/* Wait when TX FIFO full. Push character otherwise. */
while (__uart_getreg(bas, UART_FR) & FR_TXFF)
;
__uart_setreg(bas, UART_DR, c & 0xff);
}
To identify timer and UART peripherals, we identify any
MMIO address that has a signiﬁcantly higher number of
appearances than the ﬁrst MMIO read address (which cor-
responds to the top-level IRQ source register). Empirically,
we found that a threshold of around 10 times higher than the
appearance number of the ﬁrst MMIO read address works well
to identify this kind of polling code.
2) Postdominator Computation: The preprocessing stage
augments the trace with immediate postdominator information
so that each basic block address in the trace becomes a pair
(addr, ipdom).
We ﬁrst collect all functions and possible return nodes using
static analysis to disassemble each function and create a CFG.
In our implementation, we use Binary Ninja (2.4.2846) as
our base disassembler. To help overcome the limitations of
imprecise binary analysis, we guide the disassembly with the
addresses from the traces. To compute postdominators we use
the standard fast dominance algorithm from Cooper et al. [15].
In some cases, we found that the disassembler could miss
basic blocks in a function. To overcome this, we split the
CFG of such functions into multiple sub-CFGs and compute
postdominators for the smaller CFGs. An example of this
occurs when Binary Ninja fails to resolve a switch statement.
Instead of trying to resolve the switch table, we mark the basic
block as a return node, and the switch table targets (observed
from the trace as the next instruction) as the start of a new
function. The EI stack and immediate postdominators will be
computed locally inside those functions without changing any
divergence results.
Fig. 3. Example CFG and two traces through the CFG: “A→C→R2” and
“A→B→A→C→R2”.
During preprocessing we also resolve inconsistencies be-
tween QEMU’s translation blocks and actual basic blocks in
the static CFG. For QEMU, a translation block is any straight-
line code that
instruction.
However, basic blocks in the static CFG may be split up
further, since incoming edges to the middle of a block are
not allowed.
terminates in a branch or call
To ﬁx the issue, we check for missing basic blocks during
the trace re-processing. For every address in the trace, we cross
check the next address after its basic block ends, the outgoing
edges of the basic block, and the next address in the trace,
and determine whether we need to split the translation block
into a true basic block. If so, we create a new trace entry
corresponding to the start of the basic block.
D. Divergence Analysis
Our divergence analysis is an implementation of execution
indexing [48], which we gave an overview of in Section II-B.
To better handle the kind of traces encountered in embedded
IRQ fuzzing, we made several modiﬁcations to the core
algorithm, which we detail in this section.
1) Trace Realignment with Multiple Return nodes: One
substantial step in trace analysis is to build an immediate post-
dominator mapping for every basic block inside the function.
In the case of multiple return nodes in a function, a common
approach is to create a fake return node sink, and add an edge
from every actual return node to the fake return node, so that
we can use the fake return node as a single root to compute
the immediate postdominators.
However, during our experiments, we found this approach
can sometimes produce unnecessarily large divergences. Con-
sider the example CFG in Figure 3 and two traces through it,
“A→C→R2” and “A→B→A→C→R2”. If we create a fake
node for R1 and R2, both A and B will have the fake node
as the immediate postdominator. With the update of the EI
stack, two traces will diverge at the ﬁrst address, but since
their immediate postdominators are both the fake return node,
the two traces would only be able to realign at the fake return
node after R2. As a result, we will miss the node C, especially
if C dispatches to another IRQ handler. However, if we remove
R1, and build the immediate postdominator based on R2, node
A will be the immediate postdominator of B, and C will be
the immediate postdominator of A, so we will still be able to
realign at node C.
As a solution, we build separate postdominator mappings
for each return node. During trace processing, we pick the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1614
ABCR1R2appropriate postdominator mapping by looking ahead in the
trace to see which return was actually invoked.
2) Trace Truncation: Whereas traces of traditional userland
programs are typically complete (i.e.,
they all eventually
reconverge at the program’s exit point), our IRQ fuzzing traces
are often cut short either because we reach the trace length
threshold or because the execution hits some error during
tracing. This means that some functions in the trace will have
no return node, which is needed to identify the post-dominator
at a function call. To address this problem, we detect trace
truncation and promote the last basic block for that function
in the trace to a return node.
3) Walking Misaligned Traces: When traces diverge, the
original trace alignment algorithm favors shorter EI stacks,
and only proceeds on the trace with a larger EI stack until
they re-align. However, because our traces may be truncated,
we have found that sometimes a shorter EI stack doesn’t mean
the trace is closer to the end.
Instead, our trace alignment ﬁrst tries to align the traces by
proceeding on the trace with the larger EI stack. If realignment
fails, we re-try with the shorter EI stack. In the case where
a divergence is encountered and both EI stacks are the same
height, we try to proceed on both traces and then pick the
alignment that re-converges earlier (i.e., has a smaller amount
of divergence).
E. Postprocessing
The output from differential analysis is a list of divergence
points, which may also contain unrelated divergence points in
addition to the expected IRQ dispatchers. However, we can
take advantage of the fact that IRQ handlers are registered
dynamically to more precisely identify the handlers. Because
handlers are registered dynamically, they must be stored by
the OS as function pointers; thus, we can ﬁlter the results by
including divergences where 1) the divergence is caused by an
indirect call, and 2) the branch target is a function.
On ARM, indirect calls are generally made via the blx
and bx instructions; MIPS uses jr and jalr. To check
function targets, we reuse the results from trace preprocessing
(which gives us an over-approximation of potential functions),
and match the branch target address against the function start
addresses. We will show in Section V-E that although this
ﬁltering strategy is simple, it sufﬁces to eliminate almost all
the false positives in our dataset.
F. Instrumentation
Our instrumentation modiﬁes the target kernel to remove the
handler corresponding to undesired hardware functionality. To
do so, we must locate the function in the binary ﬁrmware
image, and then overwrite it. To ﬁnd the appropriate locations
to patch in the static ﬁrmware image, we create a signature
out of the bytes surrounding the hook site. Then, we scan the
ﬁrmware image to locate the matching code. Our signature is
32 bytes, which we have found in testing to be sufﬁcient to
uniquely identify the code locations we need to patch.
PLATFORMS AND OPERATING SYSTEMS TESTED
TABLE I
Name
RasPi
RasPi
RasPi
Beaglebone
SABRE Lite
SABRE Lite
Samsung NURI
Romulus
WRT54GL
SteamLink
OS
Linux
FreeBSD
RiscOS
Linux
VxWorks
Linux
Linux
Linux
Linux
Linux
SoC
BCM2837
BCM2837
BCM2837
TI AM335x
BD-SL-i.MX6
BD-SL-i.MX6
Exynos 4210
AST2500
BCM5352
MV88DE3108
Snapshot
JTAG
JTAG
JTAG
JTAG
QEMU
QEMU
QEMU
QEMU
JTAG
KMod
IntC
BCM
BCM
BCM
AM335x
GICv3
GICv3
GIC+Combiner
ASPEED VIC
MIPS
GIC+APB
Our current prototype supports disabling handlers on Linux,
FreeBSD, and RiscOS. In Linux, we patch the IRQ han-
dler by overwriting the start with mov r0, 2; mov pc,
lr, which sets the return value to IRQ_WAKE_THREAD
(2) and returns. Similarly in FreeBSD, we set
the re-
turn value to be FILTER_SCHEDULE_THREAD (4) and
return.
In RiscOS, we instead patch the IRQ handler
with bic r11, r11, 1; mov pc, lr, which clears the
IRQDesp_Link_Unshared bit and then returns. We deter-
mined these values by reading the kernel source for each OS,
but in future work we hope to determine appropriate return
values automatically.
V. EVALUATION
In this section, we evaluate IRQDebloat along two dimen-
sions of generality: hardware diversity and ﬁrmware diversity.
To demonstrate that our approach to interrupt handler identiﬁ-
cation works across diverse interrupt controller models, we test
it against six ARM-based platforms and one MIPS platform
across four different operating systems, detailed in Table I, for
a total of ten different embedded conﬁgurations. By examining
the Interrupt Controller (IntC) column, we can see that only
one of our tested systems,
the i.MX6-based SABRE Lite
board, exclusively uses the ARM GIC standard, indicating that
there is considerable diversity in embedded interrupt controller
hardware.
To show that we can generalize across different operating
systems, which may have different code patterns for IRQ
dispatch, we evaluate on Linux, FreeBSD, VxWorks, and
RiscOS. RiscOS in particular serves as a robustness test for
our trace alignment and IRQ handler identiﬁcation, as the
operating system is quite old (dating to 1987) and written
almost entirely in ARM assembly.
In each case, we begin by establishing ground truth. For
hardware,
this means examining the datasheets and open-
source ﬁrmware to understand how the interrupt controller
works at the hardware level. For the operating system eval-
uation, we locate the handler registration code in each OS
and then add logging code to collect a trace of all interrupt
handlers known to the OS.
Next, we evaluate the fuzzing, preprocessing, and diver-
gence analysis components of IRQDebloat. We compare the
identiﬁed handlers to the ground truth on each platform to
identify false negatives (i.e., registered IRQ handlers that are
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1615
REGISTERED IRQ HANDLERS FOR EACH OS. † INDICATES A THREADED HANDLER.
TABLE II
IPI
Mbox
SYS Timer
PMU
USB
GPIO
MMC/SD
Loc Timer
UART
FrameBuf
Video
DMA
Eth
I2C
SPI
Chained/Virtual
Other
RasPi
Linux
1
1
0
1
3
0
1
1
1
1
1
1
0
0
0
3
0
RasPi
FreeBSD
5
1†
0
1
1
2
1†
1
1
1†
1†
0
0
0
0
1
0
RasPi
RiscOS
0
1
1
0
1
0
1
1
1
1
1
7
0
0
0
0
0
BeagleBone
Linux
0
2
1
1
1
0
1
0
3
2
1
2
1+1†
1+1†
1+1†
1+1†
3+3†
Romulus
Linux
0
0
1
0
1
2
0
0
1
1
1†
0
1
1
0
6
1
Nuri
Linux
0
0
2
0
0
1
0