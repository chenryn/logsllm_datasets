# Managed Code Rootkits

## Introduction
### Speaker Information
- **Erez Metula**
  - Secure Software Engineer
  - Application Security Department Manager, 2BSecure
  - Email: [PI:EMAIL]
- **Date**: August 2nd, 2009

## Demo: `println(string s)` Goes Crazy
- **Trivial Question**: What should be the output of the following Java code?
  ```java
  class HelloWorld {
      public static void main(String[] args) {
          System.out.println("Hello World!");
      }
  }
  ```
- **Simple Proof of Concept (PoC)**: Sometimes "1+1=3"
- **Modification**: The `println()` method was modified to print every string twice.

## Agenda
1. Introduction to managed code execution model
2. What are Managed Code Rootkits?
3. MCR advantages
4. Application VM modification and malware deployment
5. Interesting attack scenarios (+ DEMOS!)
6. .NET-Sploit 1.0 – Generic Framework modification tool
7. Q&A – if time permits

## Background
- I started exploring the idea of Managed Code language modification in 2008.
- Wrote a whitepaper titled “.NET Framework Rootkits – Backdoors inside your Framework.”
- Presented at Black Hat Europe 2009 and CanSecWest.
- .NET Rootkits served as a case study for the Managed Code Rootkit concept.
- Today, we will discuss the general concept and also examine Java Rootkits.

## What is Managed Code?
- **Definition**: Code that executes under the management of an application virtual machine (VM), often referred to as "the sandbox."
- **Examples**:
  - Java Virtual Machine (JVM)
  - .NET Framework (CLR)
  - PHP (Zend Engine)
  - Flash Player / AIR - ActionScript Virtual Machine (AVM)
  - Python
  - Dalvik virtual machine (Google Android)
  - SQLite virtual machine (VDBE)
  - Perl virtual machine
- **Key Features**:
  - High-level intermediate assembly language
  - Platform independence: "Write once, run everywhere"
  - The VM acts as a machine-specific "bridge" allowing the same code to run on various platforms (Windows, Linux, Mac, mobile phones, etc.)

## Overview of Execution Models
### Java Execution Model
- **Steps**:
  1. Compile Java source code to bytecode (`.class` files).
  2 - Load the class into the JVM.
  3. Just-In-Time (JIT) compilation to machine-specific instructions.
  4. Execute the machine instructions.
- **Components**:
  - Java Source Code
  - Bytecode
  - JVM
  - JIT Compiler
  - Java Class Library
  - JAR Files

### .NET Execution Model
- **Steps**:
  1. Compile .NET source code to Microsoft Intermediate Language (MSIL).
  2. Load the assembly into the .NET Framework.
  3. JIT compilation to machine-specific instructions.
  4. Execute the machine instructions.
- **Components**:
  - .NET Source Code
  - MSIL
  - .NET Framework (CLR)
  - JIT Compiler
  - Global Assembly Cache (GAC)
  - DLLs

## What are Managed Code Rootkits (MCR)?
- **Definition**: User-mode, application-level rootkits hidden inside the managed code environment libraries.
- **Target**: The managed code runtime (VM) providing services to upper-level applications.
- **Influence**: Control over all applications running in the managed code environment.
- **Comparison with Traditional Rootkits**:
  - Traditional rootkits hide information from the OS (files, processes, registry keys, ports, etc.).
  - MCRs can hide from applications and cause sophisticated logical behavior modifications.
- **Advantages**:
  - Overlooked by antivirus (AV) and intrusion prevention systems (IPS).
  - Forensics checklists do not cover managed code runtimes.
  - Developers' backdoors are hidden from code review audits.
  - Universal rootkit: one deployment can control all applications.
  - Large attack surface due to widespread installation of VMs.
  - Sophisticated attacks enabled by low-level access to important methods.

## Attack Scenarios
- **Scenario #1**: Attacker gains admin access to a machine via an unpatched vulnerability.
  - Post-exploitation vector for rooted machines.
- **Scenario #2**: Trusted insider threat (developers, IT admins, DBAs, etc.) who abuses admin privileges.
- **Possible Actions**:
  - Hide processes, files, and network connections.
  - Install a backdoor for future access.
  - Manipulate sensitive application logic.

## Implementation Techniques
- **Non-Evasive Techniques**:
  - Aspect-Oriented Programming (AOP) with dynamic weaving.
  - Configuration modification.
  - Setting an alternative evil ClassLoader in Java (`-javaagent:MyEvilAgent.jar`).
  - Tampering with library locations in `.NET` (e.g., `machine.config`).
- **Evasive Techniques**:
  - Direct modification of the library intermediate bytecode.
  - The modified sandbox "lies" to the application, making detection difficult.

## Example Implementations
### Java JVM Modification
- **Steps**:
  1. Locate and extract the class (e.g., `PrintStream.class` from `rt.jar`).
     ```sh
     jar xf rt.jar java/io/PrintStream.class
     ```
  2. Disassemble the class using Jasper disassembler.
     ```sh
     java -jar jasper.jar PrintStream.class
     ```
  3. Modify the bytecode.
  4. Assemble the modified bytecode using Jasmin assembler.
     ```sh
     java -jar jasmin.jar PrintStream.j
     ```
  5. Deploy the modified class back to its location.
     ```sh
     jar uf rt.jar java/io/PrintStream.class
     ```

### .NET Framework Modification
- **Steps**:
  1. Locate the DLL in the GAC and disassemble it.
     ```sh
     ILDASM mscorlib.dll /OUT=mscorlib.dll.il /NOBAR /LINENUM /SOURCE
     ```
  2. Modify the MSIL code and reassemble it.
     ```sh
     ILASM /DEBUG /DLL /QUIET /OUTPUT=mscorlib.dll mscorlib.dll.il
     ```
  3. Force the Framework to use the modified DLL.
     ```sh
     c:\WINDOWS\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089
     ```
  4. Avoid NGEN cached native DLL.
     ```sh
     ngen uninstall mscorlib
     ```
  5. Remove traces with NGEN.

## Adding "Malware API" to Classes
- **Method Injection**: Extend the runtime environment with general-purpose "malware API" implemented as new methods.
- **Examples**:
  - `private void SendToUrl(string url, string data)`
  - `private void ReverseShell(string ip, int port)`
  - `private void HideFile(string fileName)`
  - `private boolean InjectClass(Class maliciousClass)`
  - `private Socket MitM(string victimURL, int port, string attackerURL)`

For more information, please refer to the following resources:
- [Java Rootkits](http://www.applicationsecurity.co.il/Java-Rootkits.aspx)
- [.NET Rootkits](http://www.applicationsecurity.co.il/.NET-Framework-Rootkits.aspx)
- [BlackHat Europe Slides](https://example.com/blackhat-europe-slides)

---

This revised version aims to provide a clear, professional, and well-structured presentation of the topic.