Managed Code Rootkits
Managed Code Rootkits
Hooking into Runtime Environments 
Hooking into Runtime Environments 
Erez Metula,
Erez Metula,
Secure Software Engineer
Secure Software Engineer 
Application Security Department Manager, 2BSecure
Application Security Department Manager, 2BSecure
PI:EMAIL
PI:EMAIL
August 2
August 2nd
nd, 2009
, 2009
DEMO – println(string s) goes crazy
..or how to make code do more than it should
•
Trivial question: 
What should be the output of the following (Java) code?
class HelloWorld {  
        public static void main(String args[])  {
           System.out.println("Hello World!");
        }
}
•
A simple PoC of language modification. Sometimes  “1+1=3”
•
“println()” was modified to print every string twice
Agenda
• Introduction to managed code execution model
• What are Managed Code Rootkits?
• MCR advantages
• Application VM modification and malware deployment
• Interesting attack scenarios (+ DEMOS!)
• .NET-Sploit 1.0 – Generic Framework modification tool
• Q&A – if time permits..
Background
• I started playing with the idea of Managed Code language 
modification back in 2008
• Wrote a whitepaper titled “ .NET Framework Rootkits – 
Backdoors inside your Framework”
• Presented in BH EU 2009 & CanSecWest
• .NET Rootkits was a case study of the Managed Code 
Rootkit concept
• Today we’ll talk about the general concept and take a look 
at Java Rootkits as well
What is managed code
?
•
Code that executes under the management of an application virtual 
machine, a.k.a “the sandbox”
• Think of it as an “applicative OS” for apps
• Example: Java Virtual machine (JVM)
• High level intermediate assembly language
• As opposed to unmanaged code (example:  C/C++) which is 
executed directly by the CPU
•
Write once, run everywhere
• Managed code is independent of the underlying platform.
• The VM acts as a machine specific “bridge”
• Same code can run on Windows, Linux, Mac, Mainframe, 
mobile phone, database, car, toaster.. 
Write once, run everywhere
Managed code platform examples
• Examples of application VM used in managed code 
platforms
•
Java Virtual Machine (JVM)
•
.NET Framework (CLR)
•
PHP (Zend Engine)
•
Flash Player / AIR - ActionScript Virtual Machine (AVM)
•
Python
•
Dalvik virtual machine (Google Android, thanks to Marc Schoenefeld ) 
•
SQLite virtual machine (VDBE)
•
Perl virtual machine 
•
Etc…
• Java & .NET were chosen as case studies
•
Execution model similar to each other and to other platforms 
•
Used today by most new development projects 
)Bytecode (CLASS
Java Source 
code
Machine 
specific code
Compile
Hosted
Java JVM
•VM
•Managed code
JVM
JIT
Loader
Java class 
library
JAR
JAR
JAR
Load a class based 
on its name
Bytecode
Machine instructions 
(ASM)
Java JVM
OS
APP
Overview of Java execution model
Execution
Assembly (EXE/DLL)
.
NET Source 
code
Machine 
specific code
Compile
.
NET Framework
•VM
•Managed code
CLR
JIT
Loader
GAC
DLL
DLL
DLL
MSIL
Machine instructions 
(ASM)
 Net VM.
OS
APP
Overview of .NET execution model
Hosted
Execution
Load a class based 
on its signature
What are Managed Code Rootkits (MCR
)?
•
User-mode, Application level rootkits, hidden inside the managed code 
environment libraries
•
Their target - the managed code runtime (the VM) providing services 
to the upper level applications
• Web apps & desktop applications
•
MCR influence is on the upper level application, controlling all apps
• Traditional rootkits usually hide some information from the OS
• Hiding their presence
• Hiding files, processes, registry keys, ports, etc…
• MCR can do the same, but by hiding from the applications
• MCR can also cause sophisticated logical behavior modification
•
An ideal, overlooked place for malicious code hiding
•
No AV / IPS understands intermediate language bytecodes
•
No AV / IPS can tell whether the application behavior is legit
•
Forensics checklists does not cover managed code runtimes
•
Developers backdoors are hidden from code review audits
•
Universal rootkit - rely on the VM’s generation of machine specific code for 
different platforms 
•
Large attack surface
•
VM’s are Installed/preinstalled on almost every machine 
•
one deployment can control all applications (hosting - very dangerous)
•
Managed code becomes part of the OS (Example: .NET PowerShell cmdlet’s)
•
Sophisticated attacks enabler
•
Low level access to important methods
•
Timing 
•
Object Oriented malware  
MCR advantages
Application
Runtime Class 
Libraries
OS APIs and services
static void Main(string[] args)
        { 
//DO SOMETHING
//EXAMPLE: call RuntimeMethod
RuntimeMethod();
        }
public void RuntimeMethod ()
{    //The implementation of RuntimeMethod ()
     //DO SOMETHING DIFFERENT
} 
User
public void RuntimeMethod () 
{    //The implementation of RuntimeMethod ()
     //Implementation code
     //…..
} 
Hacked
..From language modification to rootkit implementation
Example Code
The WriteLine(s) double printing PoC (.NET
)
•
Original code of WriteLine:
•
Modified code:
Print #1
Print #2 (duplicate)
Attack Scenarios
•
Messing with the sandbox usually requires admin privileges (ACL restriction)
•
Scenario #1 - Attacker gains admin access to a machine by exploiting an 
unpatched vulnerability 
•
Housekeeping attack vector
•
Alternative post exploitation attack vector for rooted machines
•
Scenario #2 – The “trusted insider” threat – trusted employee who abuses his 
admin privileges on the attacked machine
•
Here we’re talking about  Developers, IT Admins, DBA’s, etc.
•
What’s next?
•
Attacker installs a MCR, capable of 
•
Hide processes
•
Hide files
•
Hide network connections
•
Install a backdoor for future access to the system
•
Manipulate sensitive application logic
Implementation techniques
•
MCR’s act as a part of the sandbox so they have access to low level, 
private methods
•
They can change the virtual machine’s implementation
•
Non evasive (“by design”)
• AOP - Aspect programming (dynamic weaving)
• Configuration modification
• Setting an alternative evil ClassLoader 
• Loading a malicious agent   “-javaagent:MyEvilAgent.jar” (Java)
• Library location tampering of “machine.config” (.NET)
•
Evasive 
• Direct modification of the library intermediate bytecode
•
Using evasive techniques, the application cannot detect the presence 
of a rootkit.  The modified sanbox “lies” to the application.
•
Overview of Java JVM modification steps
• Locate the class (usually in rt.jar) and extract it:
jar xf rt.jar java/io/PrintStream.class 
• Dissassemble it (using Jasper disassembler)
Java –jar jasper.jar PrintStream.class 
• Modify the bytecode
• Assemble it (using Jasmin assembler)
Java –jar jasmin.jar PrintStream.j
• Deploy the modified class back to its location:
jar uf rt.jar java/io/PrintStream.class 
For more information:
http://www.applicationsecurity.co.il/Java-Rootkits.aspx
Java Rootkits
an example of evasive technique implementation 
.NET Rootkits
an example of evasive technique implementation 
•
Overview of .NET Framework modification steps
• Locate the DLL in the GAC, and disassemble it
ILDASM mscorlib.dll /OUT=mscorlib.dll.il /NOBAR /LINENUM /SOURCE 
• Modify the MSIL code, and reassemble it
ILASM /DEBUG /DLL /QUIET /OUTPUT=mscorlib.dll mscorlib.dll.il
• Force the Framework to use the modified DLL
c:\WINDOWS\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089
• Avoiding NGEN cached Native DLL
 ngen uninstall mscorlib 
• Remove traces with NGEN
•
More info can be obtained at the “.NET Rootkits” whitepaper (
http://www.applicationsecurity.co.il/.NET-Framework-Rootkits.aspx) and the BlackHat 
Europe slides
Add “malware API” to classes
the building blocks
• A.K.A. Method / Function injection
• Extend the runtime environment with general purpose 
“malware API” implemented as new methods 
•
Used by payload code - Deploy once, use many times
•
Parameter passing
• Some examples
•
private void SendToUrl(string url, string data)
•
private void ReverseShell(string ip, int port)
•
private void HideFile (string fileName)
•
private boolean InjectClass (Class maliciousClass)
•
private Socket MitM (string victimURL, int port, string attackerURL)