discussion of the actual processors used in typical satphones.
In general, the architecture of satellite phones is similar to
the architecture of cellular phones [10]. Both types of phones
have to perform a lot of signal processing due to speech
processing and wireless communication, thus they typically
ship with a dedicated digital signal processor (DSP) for such
purposes. Consequently, complex mathematical operations
like for example data compression or speech encoding
are outsourced to the DSP where the actual computations
are performed. More relevant for our purpose is the fact
that DSPs are also suitable for executing cryptographic
algorithms, which makes DSP code a prime candidate for
holding GMR cipher code.
The core of the phone is a standard microprocessor
(usually an ARM-based CPU) that serves as the central
control unit within the system. This CPU initializes the DSP
during the boot process. Furthermore, both processors share
at least parts of the main memory or other peripheral devices
to implement inter-processor communication. To understand
the ﬂow of code and data on a phone, we thus also need to
analyze the communication between the two processors.
2Page 37 of the speciﬁcation [9] actually states that the encryption
algorithm has to be stored on the SIM card.
130
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
The operating system running on a phone is typically a
specialized embedded operating system that is designed with
respects to the special requirements of a phone system (e.g.,
limited resources, reliability, real-time constraints, etc.). All
of the software is deployed as one large, statically linked
ﬁrmware binary. For our analysis, we were especially in-
terested in the inter-processor communication functionality
provided by the operating system as well as the DSP
initialization routine. This is due to the fact that cipher
code will likely be implemented in the DSP for performance
reasons. Our interest for the DSP initialization routine arises
from the fact that it typically reveals where DSP code is
located in the ﬁrmware and how it is mapped to memory.
C. Related Work
Satellite telecommunication systems are related to terres-
trial cellular systems, the GMR-1 standard is for example
derived from the GSM standard. We can thus leverage
work on the analysis of cellular systems for our security
analysis as we discuss in the following. Briceno et al.
published in 1999 an implementation of the GSM A5/1 and
A5/2 algorithms, which they apparently obtained by reverse
engineering an actual GSM handset [11]. However, no actual
details about the analysis process were ever published and
it remains unclear how they actually derived the algorithms.
Our analysis is also based on actual satellite phones, we
discuss the general approach in Section III and provide
analysis details in later sections.
There has been lots of work on the security analysis of the
ciphers used within GSM [12]–[20]. A5-GMR-1 is related to
the A5/2 algorithm used within GSM, but the conﬁguration
of the cipher is different. Our attack for this algorithm builds
on the ideas of Petrovic and Fuster-Sabater [13] and Barkan
et. Al. [18] which we extended to enable a time/ciphertext
trade-off.
Up to now, there has been no work on the security aspects
of satellite telecommunication systems that we are aware of
and we are the ﬁrst to explore this topic.
III. GENERAL APPROACH
In this section, we outline the general methodology we
used for identifying and extracting cipher algorithms from
satellite phones. Furthermore, we also discuss the assump-
tions that helped us during the analysis phase and provide
an overview of our target satphones.
We analyzed two representative phones that use the two
different standards we are interested in. More precisely, we
analyzed the ﬁrmwares of the following two phones:
• Thuraya SO-2510 satphone that implements the GMR-
1 speciﬁcation
• Inmarsat IsatPhone Pro satphone that implements the
GMR-2 speciﬁcation
The starting point of our analysis was the publicly avail-
able ﬁrmware upgrade of each of these two devices. The
entire analysis was performed purely statically since we did
not have a real satellite phone at our disposal that we could
instrument to perform a dynamic analysis. Furthermore, we
did not have access to a whole device simulator that enables
debugging of arbitrary ﬁrmware image,
thus we had to
develop our own set of analysis tools. However, the ARM
code for the main microprocessor (used by both phones) can
be partially executed and debugged in a CPU emulator such
as QEMU.
The approach we followed to analyze both satphones can
be separated into the following ﬁve phases:
1) Obtain the ﬁrmware installer (usually a Windows setup
program).
2) Extract the ﬁrmware image from the installer.
3) Reconstruct the correct memory mappings of the code
and data sections in the ﬁrmware image.
4) Identify the DSP initialization procedure in order to
extract the DSP code/mapping.
5) Search for the cipher algorithms in the DSP code using
speciﬁc heuristics as well as control and data ﬂow
analysis techniques.
Several steps can be automated, but some manual analysis
is nevertheless required. We successfully applied this method
to the two phones we analyzed. In addition, we speculate that
also other kinds of satphones can be analyzed in this way.
Two assumptions also helped us to ﬁnd the relevant pieces
of code in a shorter amount of time:
1) The key length of the stream cipher algorithms is
known.
2) The frame length is equal to the key length.
3) Since the GMR standards are derived from GSM, the
ciphers bear at least some resemblance to the well-
known, LFSR-based A5 algorithms.
The ﬁrst two assumptions can be derived from the publicly
available parts of the GMR speciﬁcation [9]. The third as-
sumption was conjectured by us. Note that the standard only
speciﬁes the general parameters of the crypto algorithms, but
no details about the actual algorithm are publicly available.
Nevertheless, these assumptions enabled us to decrease the
search space of potential code. The last assumption is
rather speculative, but helped us in ﬁnding one of the two
algorithms.
IV. SECURITY ANALYSIS OF GMR-1
We used the Thuraya SO-2510 phone as an example for
a handset that operates according to the GMR-1 standard.
This decision was solely driven by the fact that the ﬁrmware
of this satphone is publically available from the vendor’s
website. In fact, we did not analyze any other GMR-1
satellite phone, but since the protocol is standardized we are
conﬁdent that our analysis results apply to all other GMR-1
phones as well.
A. Hardware Architecture
The Thuraya SO-2510 runs on a Texas Instruments
OMAP 1510 platform. The core of the platform is an ARM
131
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
CPU along with a TI C55x DSP processor. This information
can be deduced from corresponding strings in the binary
and from pictures of the actual components soldered on the
circuit board [21]. Figure 3 provides a high-level overview
of the architecture.
Function address % relevant instr.
0001D038
0001CFC8
0001D000
0001D064
00014C9C
00014CAC
43%
41%
41%
37%
25%
25%




 








Figure 3. The OMAP1510 Platform [22]
Both processors can communicate with each other using
a special shared peripherals bus. Furthermore, they share the
same RAM and can access additional memory (e.g., SRAM
or Flash) on equal terms. Initially, DSP code or data has
to be loaded by the ARM CPU into the speciﬁc memory
regions of the DSP. The DSP code can be located in either
the on-chip SARAM (which holds 96 KB of memory) or in
the SRAM, which is accessed through the memory interface
controller (MIC). Writes to the SARAM region of the DSP
are especially interesting for extracting the corresponding
DSP code. The ofﬁcial OMAP1510 documents suggest pre-
deﬁned memory regions to be used by the ARM-MMU
for mapping this memory area [22]. During our analysis,
we could conﬁrm that the ﬁrmware uses exactly the same
mappings.
B. Finding the Crypto Code
The ﬁrmware of the Thuraya SO-2510 is publically avail-
able as a 16 MB sized binary ﬁle from the vendor’s website.
The ﬁrmware ﬁle is neither (partially) packed nor encrypted
and thus the ARM code can be analyzed directly. In the
very beginning of the ARM CPU initialization routine, the
code sets up the virtual memory system by enabling the
MMU with a static translation table. Using this translation
table, we deduced the correct memory mapping at runtime.
By searching for accesses to the DSP SARAM memory and
through string references within the ARM code, we were
able to determine the DSP setup code that copies the DSP
code from the ﬁrmware into the SARAM before resetting
the DSP. Brieﬂy speaking, the code is extracted and byte-
swapped (due to the differing endianness of both processors)
FUNCTIONS RATED BY PERCENTAGE OF BIT-LEVEL INSTRUCTIONS
Table I
from a number of separate chunks from the ﬁrmware image.
For convenience, we ran the related ARM code in the QEMU
emulator and dumped the resulting DSP code afterwards.
This yields approximately 240 KB of DSP code (located in
both SARAM and SRAM) that can be readily disassembled
by tools such as IDA Pro.
Since GMR-1 is derived from GSM, we speculate that
the cipher algorithm employed in GMR-1 bears at least
some resemblance to the A5/2 cipher from GSM. Due to the
nature of this algorithm (e.g., the presence of feedback shift
registers), the cipher code is bound to contain a lot of bit shift
and XOR operations — unless it is somehow obfuscated.
We thus implemented an analysis tool within IDA Pro that
counts the occurrences of such instructions in each function
and sets them in relation to the total number of instruc-
tions in the function. Similar ideas to spot cryptographic
primitives have already been published in the literature [1]–
[3]. Table I lists the six top-rated functions found when
using this heuristic. The four topmost functions are rather
short sequences of code that bear striking resemblance to
feedback register shift operators; a disassembly is depicted
in Figure 12 in the Appendix. Further analyzing the call sites
of these four functions revealed an exposed memory region
holding variables which equal
• the assumed key length,
• the assumed number and length of the feedback regis-
ters, and
• the assumed frame-number lengths (see Section III).
These were all strong indicators that we have spotted the
correct region of the code. Starting from this code area, we
reverse-engineered the relevant code portions to obtain the
cryptographic algorithm employed in the DSP.
C. Structure of the Cipher
The cipher used in GMR-1 is a typical stream-cipher.
Its design is a modiﬁcation of the A5/2 cipher [13], [18],
which is used in GSM networks. The cipher uses four
linear feedback shift registers (LFSR) which are clocked
irregularly. We call these registers R1, R2, R3 and R4, see
Fig. 4 for a schematic of the structure.
Comparing A5/2 and A5-GMR-1, we see that for most
registers the feedback polynomials and also the selection of
input taps for the non-linear majority-function M with
M : {0, 1}3 (cid:2)→ {0, 1}
x (cid:2)→ x2x1 ⊕ x2x0 ⊕ x0x1
132
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
Figure 4. The A5-GMR-1 cipher
Size
19
22
23
17
R1
R2
R3
R4
Feedback polynomial
x19 + x18 + x17 + x14 + 1
x22 + x21 + x17 + x13 + 1
x23 + x22 + x19 + x18 + 1
x17 + x14 + x13 + x9 + 1
Taps
1,6,15
3,8,14
4,15,19
1,6,15
Final
11
1
0
-
Table II
CONFIGURATION OF THE LFSRS
were changed, see Tab. II for details. Also, the positions
of the bits that are xor’ed with the respective outputs of
the majority functions are different. For curious reasons, all
feedback-polynomials have ﬁve monomials.
D. Mode of Operation
Next we focus on the mode of operation. Clocking a single
LFSR means evaluating its respective feedback polynomial
and using the resulting bit to overwrite the leftmost position
of the LFSR, after shifting its current state by one bit to
the right. When the cipher is clocked for the l-th time with
irregular clocking active, the following happens:
1) The irregular clocking component C evaluates all taps
of R4, the remaining registers are clocked accordingly,
i.e.,
a) Iff M(R4,1, R4,6, R4,15) =R 4,15, register R1 is
clocked.
b) Iff M(R4,1, R4,6, R4,15) = R4,6, register R2 is
clocked.
c) Iff M(R4,1, R4,6, R4,15) = R4,1, register R3 is
clocked.
2) The taps of R1, R2, and R3 are evaluated and one bit