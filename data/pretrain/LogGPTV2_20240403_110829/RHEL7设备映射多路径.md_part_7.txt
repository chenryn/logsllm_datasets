| `new_binding         | （从 Red Hat Enterprise Linux Release 7.2     |
| s_in_boot`{.literal} | 开始）使用 `new_bindings_in_boot`{.literal}   |
|                      | 参数在 `initramfs`{.literal}                  |
|                      | 文                                            |
|                      | 件系统中保持已被常规文件系统中绑定文件耗尽的  |
|                      | `user_friendly_                               |
|                      | name`{.literal}。这样会造成问题，因为只有重建 |
|                      | `initramfs`{.literal} 文件系统时才会将        |
|                      | `initramfs`{.literal} 文件系统中的            |
|                      | `user_friendly_names`{.literal}               |
|                      | 绑定                                          |
|                      | 与常规文件系统中的绑定同步。当将此参数设定为  |
|                      | `no`{.literal} 后，多路经不会在               |
|                      | `initramfs`{.literal}                         |
|                      | 文件系                                        |
|                      | 统中创建任何新绑定。如果某个设备中原来没有在  |
|                      | `/etc/multipath/bindings`{.filename} 的       |
|                      | `initramfs`{.literal}                         |
|                      | 副本中有任何绑定，多路经会使用其 WWID         |
|                      | 作为别名，而不是为其分配                      |
|                      | `user                                         |
|                      | _friendly_name`{.literal}。之后在引导后，该节 |
|                      | 点会挂载至常规文件系统，多路径会为该设备分配  |
|                      | `us                                           |
|                      | er_friendly_name`{.literal}。可将该参数设定为 |
|                      | `yes`{.literal} 或者                          |
|                      | `no`{.literal}。如果未设定，则默认使用        |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` co                 | （从 Red Hat Enterprise Linux Release 7.2     |
| nfig_dir `{.literal} | 开始）如果设定为 `""`{.literal}               |
|                      | 以外的                                        |
|                      | 内容，多路径会按字母顺序搜索这些路径，查找以  |
|                      | \".conf\"                                     |
|                      | 结尾                                          |
|                      | 的文件，并从中读取配置信息，就如同该信息位于  |
|                      | `/etc/multipath.conf`{.filename}              |
|                      | 文件中一样。这样您就会在具体机器的配置文件    |
|                      | 以外有一个主配置文件。`config_dir`{.literal}  |
|                      | 参数必须为 `""`{.literal}                     |
|                      | 或者完全限定目录名。只能在主                  |
|                      | `/etc/multipath.conf`{.filename}              |
|                      | 文件中设定这个参数，不能在由                  |
|                      | `config_dir`{.literal}                        |
|                      | 文                                            |
|                      | 件自己指定的某个文件中设定这个参数。默认值为  |
|                      | `/etc/multipath/conf.d`{.filename}。          |
+----------------------+-----------------------------------------------+
| `deferr              | 如果设定为                                    |
| ed_remove`{.literal} | `yes`{.lit                                    |
|                      | eral}，则在删除最后一个路径设备时，multipathd |
|                      | 将会执行延期删                                |
|                      | 除，而不是常规删除。这样就会保证如果执行常规  |
|                      | 删除且操作失败时某个多路径设备正在使用中，该  |
|                      | 设备会在最后一个用户关闭该设备时自动被删除。  |
+----------------------+-----------------------------------------------+
| `log_ch              | 如果设定为 `once`{.literal}，multipathd       |
| ecker_err`{.literal} | 会采用详细等级 2                              |
|                      | 记录第一个路径检查器错误。                    |
|                      | 之后的所有错误都要在该设备恢复后采用详细等级  |
|                      | 3 记录。如果设定为                            |
|                      | `always`{.literal}，multipathd                |
|                      | 会一直使用详细等级 2                          |
|                      | 记录路径检查器错误。默认值为                  |
|                      | `always`{.literal}。                          |
+----------------------+-----------------------------------------------+
| `sk                  | 如果设定为                                    |
| ip_kpartx`{.literal} | `yes`{.literal}，`kpartx`{.literal}           |
|                      | 不会在该设备中自动创建分区。这样              |
|                      | 即使该设备有分区表，也可以允许用户在不创建分  |
|                      | 区的情况下创建多路径设备。这个选项的默认值为  |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
:::
:::
:::
::: section
::: titlepage
# [⁠]{#mpio_configfile.html#config_file_multipath}4.4. 多路径设备配置属性 {.title}
:::
[]{#mpio_configfile.html#idm140613832656064
.indexterm}[]{#mpio_configfile.html#idm140613832653984 .indexterm}
::: para
[表 4.2
"多路径属性"](#mpio_configfile.html#tb-multipath_defaults){.xref} 显示在
`multipath.conf`{.filename} 配置文件 `multipaths`{.literal}
部分中可为每个特定多路径设备设置的属性。这些属性只适用于一个指定的
multipath。这些默认属性可供 DM Multipath 使用，并且能覆盖
`multipath.conf`{.filename} 文件中 `defaults`{.literal} 和
`devices`{.literal} 部分设置的属性。
:::
[]{#mpio_configfile.html#idm140613829841952
.indexterm}[]{#mpio_configfile.html#idm140613829840192
.indexterm}[]{#mpio_configfile.html#idm140613829838912
.indexterm}[]{#mpio_configfile.html#idm140613844130176
.indexterm}[]{#mpio_configfile.html#idm140613844128896
.indexterm}[]{#mpio_configfile.html#idm140613844127136
.indexterm}[]{#mpio_configfile.html#idm140613844125856
.indexterm}[]{#mpio_configfile.html#idm140613844124096
.indexterm}[]{#mpio_configfile.html#idm140613834608144
.indexterm}[]{#mpio_configfile.html#idm140613834606384
.indexterm}[]{#mpio_configfile.html#idm140613834605104
.indexterm}[]{#mpio_configfile.html#idm140613834603344
.indexterm}[]{#mpio_configfile.html#idm140613834602064
.indexterm}[]{#mpio_configfile.html#idm140613834600304
.indexterm}[]{#mpio_configfile.html#idm140613827736336
.indexterm}[]{#mpio_configfile.html#idm140613827734576
.indexterm}[]{#mpio_configfile.html#idm140613827733296
.indexterm}[]{#mpio_configfile.html#idm140613827731536
.indexterm}[]{#mpio_configfile.html#idm140613827730256
.indexterm}[]{#mpio_configfile.html#idm140613821370880
.indexterm}[]{#mpio_configfile.html#idm140613821369600
.indexterm}[]{#mpio_configfile.html#idm140613821367872
.indexterm}[]{#mpio_configfile.html#idm140613821366624
.indexterm}[]{#mpio_configfile.html#idm140613821364864
.indexterm}[]{#mpio_configfile.html#idm140613821363584
.indexterm}[]{#mpio_configfile.html#idm140613838069792
.indexterm}[]{#mpio_configfile.html#idm140613838068512
.indexterm}[]{#mpio_configfile.html#idm140613838066752
.indexterm}[]{#mpio_configfile.html#idm140613838065472
.indexterm}[]{#mpio_configfile.html#idm140613838063712
.indexterm}[]{#mpio_configfile.html#idm140613838062432
.indexterm}[]{#mpio_configfile.html#idm140613837520304
.indexterm}[]{#mpio_configfile.html#idm140613837519024
.indexterm}[]{#mpio_configfile.html#idm140613837517264 .indexterm}
::: table
[⁠]{#mpio_configfile.html#tb-multipath_defaults}
**表 4.2. 多路径属性**
::: table-contents
+----------------------+-----------------------------------------------+
| 属性                 | 描述                                          |
+======================+===============================================+
| ` wwid `{.literal}   | 指定 `multipath`{.literal}                    |
|                      | 属性采用的多路径设备的 WWID。这个参数在       |
|                      | `multipath.conf`{.filename}                   |
|                      | 文件的这个部分是必须的。                      |
+----------------------+-----------------------------------------------+
| ` alias `{.literal}  | 指定使用 `multipath`{.literal}                |
|                      | 属性的多路径设备的符号名称。如果您使用的是    |
|                      | `use                                          |
|                      | r_friendly_names`{.literal}，请必要将其设定为 |
|                      | `                                             |
|                      | mpathn`{.literal}，这样可能会与自动分配的用户 |
|                      | 友好名称冲突，进而给出不正确的设备节点名称。  |
+----------------------+-----------------------------------------------+
| ` path_groupin       |   -------------------                         |
| g_policy `{.literal} | --------------------------------------------- |
|                      |   指定用于                                    |
|                      | 未指定路径的默认路径分组策略，可能的值包括：  |
|                      |                                               |
|                      | `failover`{.literal} = 每个优先组群有一个路径 |
|                      |   `multi                                      |
|                      | bus`{.literal} = 所有有效路径在一个优先组群中 |
|                      |   `group_by_serial`                           |
|                      | {.literal} = 每个检测到的系列号有一个优先组群 |
|                      |   `group_by_p                                 |
|                      | rio`{.literal} = 每个路径优先值有一个优先组群 |
|                      |   `group_by_node_n                            |
|                      | ame`{.literal} = 每个目标节点名有一个优先组群 |
|                      |   -------------------                         |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` path_              |   ----------------------------------------    |
| selector `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定用来决定下一个                          |
|                      |  I/O 操作所使用路径的默认算法。可能的值包括： |
|                      |   `round-robin 0`{.literal}：在路径组中       |
|                      | 循环每个路径，向每个路径发送同样数量的 I/O。  |
|                      |   `queue-length 0`{.literal}：将下一          |
|                      | 组 I/O 发送到具有最少未处理 I/O 请求的路径。  |
|                      |   `service-time 0`{.literal}：将下一组 I      |
|                      | /O 发送到具有最短预计服务时间的路径，这是由未 |
|                      | 处理 I/O 的总量除以每个路径的相对流量决定的。 |
|                      |   ----------------------------------------    |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    |   -----------------------------------------   |
| failback `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   管理路径组群出错切换。                      |
|                      |   `immediate`{.literal} 值指                  |
|                      | 定立即恢复到包含活跃路径的最高级别路径组群。  |
|                      |   `manual`{.literal} 值指定不需要立           |
|                      | 即恢复，只有在操作者干预的情况下会发生恢复。  |
|                      |   `followover`{.literal} 值指定当路径组的第   |
|                      | 一个路径成为活跃路径时应执行自动恢复。这可让  |
|                      | 节点在另一个节点请求故障修复时不会自动恢复。  |
|                      |   大于 0 的数字值指定推迟出错切换，以秒表示。 |
|                      |   -----------------------------------------   |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` prio `{.literal}   |   ---------------                             |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定要获得路径优先值所需调用的默认程序      |
|                      | 及参数。例如：SPC-3 中的 ALUA 字节提供了一个  |
|                      | 可改变的 `prio`{.literal} 值。可能的值包括：  |
|                      |   `const`{.literal}：为所有路径设定优先权 1。 |
|                      |                                               |
|                      |  `emc`{.literal}：为 EMC 阵列生成路径优先权。 |
|                      |   `alua`{.liter                               |
|                      | al}：根据 SCSI-3 ALUA 设置生成路径有限级。从  |
|                      | Red Hat Enterprise Linux 7.3 开始，如果在设备 |
|                      | 配置中指定 `prio "alua exclusive_pref_bit"`{. |
|                      | literal}，多路径将生成包含只使用 `pref`{.lite |
|                      | ral} 字节集的路径组，并为该组设定最高优先级。 |
|                      |   `ont                                        |
|                      | ap`{.literal}：为 NetApp 阵列生成路径优先权。 |
|                      |   `rdac`{.literal}：                          |
|                      | 为 LSI/Engenio RDAC 控制程序生成路径优先权。  |
|                      |   `hp_sw`{.literal}：为 Compaq                |
|                      | /HP 控制程序在激活/等待模式中生成路径优先权。 |
|                      |   `hds`{.literal}：为                         |
|                      |  Hitachi HDS Modular 存储阵列生成路径优先权。 |
|                      |   ---------------                             |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    |   ----                                        |
| features `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   多路径设                                    |
|                      | 备的默认额外功能，使用以下格式：\"*number_of  |
|                      | _features_plus_arguments* *feature1* \...\"。 |
|                      |   `features`{.literal} 可能的值包括：         |
|                      |   `queue_if_no_p                              |
|                      | ath`{.literal}，与将 `no_path_retry`{.literal |
|                      | } 设置为 `queue`{.literal} 相同。欲了解使用此 |
|                      | 功能可能出现的问题，请参阅〈[第 5.7 节 "有 qu |
|                      | eue_if_no_path 功能的问题"](#MPIO_admin-troub |
|                      | leshoot.html#queueifnopath_issues){.xref}〉。 |
|                      |   `reta                                       |
|                      | in_attached_hw_handler`{.literal}：若此参数值 |
|                      | 被设为 `yes`{.literal}，并且 SCSI 层已经为路  |
|                      | 径设备添加了硬件控制程序，multipath 将不会强  |
|                      | 制设备使用 `multipath.conf`{.filename} 文件指 |
|                      | 定的 `hardware_handler`{.literal}。若 SCSI 层 |
|                      | 没有添加硬件控制程序，multipath 仍然会使用已  |
|                      | 配置的硬件控制程序。默认值为 `no`{.literal}。 |
|                      |                                               |
|                      | `pg_init_retries n`{.literal}：路径组初始化重 |
|                      | 试，失败前最多重试 *n* 次，1 \<= *n* \<= 50。 |
|                      |   `pg_init                                    |
|                      | _delay_msecs n`{.literal}：在路径组初始化重试 |
|                      | 的间隔，等待 *n* 毫秒，0 \<= *n* \<= 60000。  |
|                      |   ----                                        |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` no_pa              |   -----------------------                     |
| th_retry `{.literal} | --------------------------------------------- |
|                      |   此属性的数字值指定了系                      |
|                      | 统在禁用队列前，应该尝试使用失败路径的次数。  |
|                      |   值为                                        |
|                      |  `fail`{.literal} 意味着立即失败，无需排队。  |
|                      |   值为 `qu                                    |
|                      | eue`{.literal} 意味着路径固定前不会停止排队。 |
|                      |   -----------------------                     |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` r                  | 指定                                          |
| r_min_io `{.literal} | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O 请求数。这个设置值用于运行内核为 2.6.31   |
|                      | 之前的系统。使用新版本的系统应使用            |
|                      | `rr_min_io_rq`{.literal}。默认值为 1000。     |
+----------------------+-----------------------------------------------+
| ` rr_m               | 使用 request-based device-mapper-multipath    |
| in_io_rq `{.literal} | 指定                                          |
|                      | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O                                           |
|                      | 请求数。                                      |
|                      | 这个设置值用于运行当前内核的系统。在使用内核  |
|                      | 2.6.31 版本之前的系统应使用                   |
|                      | `rr_min_io`{.literal}。默认值为 1。           |
+----------------------+-----------------------------------------------+
| ` r                  | 如果将其设为                                  |
| r_weight `{.literal} | `priorities`{.literal}，就不会在调用          |
|                      | `selector`{.literal}                          |
|                      | 选择下一个路径前向路径发送                    |
|                      | `rr_min_io`{.literal} 请求，而是由            |
|                      | `rr_min_io`{.literal}                         |
|                      | 乘以路径优先权决定发送的请求数，即由          |
|                      | `prio`{.literal} 功能决定。如果将其设定为     |
|                      | `u                                            |
|                      | niform`{.literal}，则所有路径都有相同的加权。 |
+----------------------+-----------------------------------------------+
| ` flush_on_          | 如果将其设为                                  |
| last_del `{.literal} | `yes`{.literal}                               |
|                      | ，那么当设备的最后一条路径被删除时，multipath |
|                      | 将会禁用队列。                                |
+----------------------+-----------------------------------------------+
| ` user_friend        | 如果将其设为                                  |
| ly_names `{.literal} | `yes`{.literal}，即指定该系统应该使用文件     |
|                      | `/etc/multipath/bindings`{.filename}          |
|                      | 为该多路径分配一个持久且唯一的别名，格式为    |
|                      | `mpath`{.literal}*`n`*。如果设定为            |
|                      | `no`{.literal}，即指定该系统应使用 WWID       |
|                      | 作为该多路径的别名。在这两                    |
|                      | 种情况下，您在这里指定的数值将被您在配置文件  |
|                      | `multipaths`{.literal}                        |
|                      | 部分指定的具体设备别名覆盖。                  |
+----------------------+-----------------------------------------------+
| ` delay_watc         | （从 Red Hat Enterprise Linux Release 7.2     |
| h_checks `{.literal} | 开始）如果将其设定为大于 0                    |
|                      | 的值，`multipathd`{.command}                  |
|                      | 守护进程将监视最                              |
|                      | 近有效的路径，并执行指定数量的检查。如果在监  |
|                      | 视期间这些路径再次变为无法使用，则不会在这些  |
|                      | 路径下一次可用时就使用它们，直到连续检查使用  |
|                      | `delay_wait_checks`{.literal}                 |
|                      | 指定的次数后它们都可用为止。                  |
|                      | 这样可防止将                                  |
|                      | 那些可能不太可靠的路径在上线后立即投入使用。  |
+----------------------+-----------------------------------------------+
| ` delay_wai          | （从 Red Hat Enterprise Linux 7.2             |
| t_checks `{.literal} | 开始）如果将其设定为大于 0                    |
|                      | 的值，则最近重新上线的设备在由                |
|                      | `delay_watch_checks`{.literal}                |
|                      | 指定的检查次数内再次无法使用后，那么它        |
|                      | 下一次上线后就不会被标记并延迟，并在经过使用  |
|                      | `delay_watch_checks`{.literal}                |
|                      | 指定的检查次数后方可使用。                    |
+----------------------+-----------------------------------------------+
| `deferr              | 如果设定为                                    |
| ed_remove`{.literal} | `yes`{.lit                                    |
|                      | eral}，则在删除最后一个路径设备时，multipathd |
|                      | 将会执行延期删                                |
|                      | 除，而不是常规删除。这样就会保证如果执行常规  |
|                      | 删除且操作失败时某个多路径设备正在使用中，该  |
|                      | 设备会在最后一个用户关闭该设备时自动被删除。  |
+----------------------+-----------------------------------------------+
| `sk                  | 如果设定为                                    |
| ip_kpartx`{.literal} | `yes`{.literal}，`kpartx`{.literal}           |
|                      | 不会在该设备中                                |
|                      | 自动创建分区。这样即使该设备有分区表，也可以  |
|                      | 允许用户在不创建分区的情况下创建多路径设备。  |
+----------------------+-----------------------------------------------+
:::
:::
::: para
以下示例显示在配置文件中为两个特定多路径设备指定的多路径属性。第一个设备的
WWID 为 `3600508b4000156d70001200000b0000`{.literal}，符号名称为
`yellow`{.literal}。
:::
::: para
示例中第二个多路径设备的 WWID 为
`1DEC_____321816758474`{.literal}，符号名称为
`red`{.literal}。在这个示例中，`rr_weight`{.literal} 属性被设为
`priorities`{.literal}。
:::
``` screen
multipaths {
       multipath {
              wwid                  3600508b4000156d70001200000b0000
              alias                 yellow
              path_grouping_policy  multibus
              path_selector         "round-robin 0"
              failback              manual
              rr_weight             priorities
              no_path_retry         5
       }
       multipath {
              wwid                  1DEC_____321816758474
              alias                 red
              rr_weight             priorities