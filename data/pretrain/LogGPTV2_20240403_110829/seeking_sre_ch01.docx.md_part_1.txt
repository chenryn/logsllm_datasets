# SRE 中的上下文与控制
Coburn Watson 微软（原 Netflix）和 David N. Blank-Edelman 的讨论
     **David：**我们很高兴在彼此认识的时候谈论很多事情。我听过你谈论过的最有趣的事情之一是一种
SRE 的方法，该方法专注于提供上下文，而不是使用围绕控制的过程（实践 SRE
的更常见的方法）。我们可以进一步研究吗？你能解释一下上下文相对于控制的含义，以及它们各自的典范吗？
**Coburn：**我认为上下文提供了额外的相关信息，使某人能够更好地了解给定请求或陈述背后的原理。在最高级别上，Netflix
与工程团队共享的可用性相关上下文将是其微服务的趋势可用性，以及这与预期目标的关系，包括下游依赖项的可用性。使用此特定领域的上下文，工程团队有责任（和上下文）采取必要步骤来提高其可用性。
 在基于控制的模型中，团队将意识到其微服务的可用性目标，但如果它们未能实现该目标，可能会采取惩罚性行动。此操作可能涉及拒绝将代码推送到生产中的能力。在
Netflix，我们倾向于前一种模式，共享微服务级可用性的上下文，然后在需要时与团队合作，以帮助提高可用性。
挑战在于确保向团队提供足够的上下文。当某人在 Netflix
做出非理想的运维决策时，首先要问的是此人是否有足够的背景来做出更好的决策。通常，SRE
团队会发现，可用性受到的打击是由于未能将足够的上下文传递给团队，尤其是与可靠性相关的上下文。这恰恰是作为
SRE 团队为提高整体可用性而应该做出的努力。
在非常大的组织中，要提供足够的上下文更为困难，但基于足够的上下文，员工就可以实现其服务所需的可用性目标。在这种规模的组织中，通常必须依靠更多流程来实现可用性目标。一个例子是谷歌错误预算模型。参见[第4章，"服务级别目标"，](https://landing.google.com/sre/book/chapters/service-level-objectives.html)来自谷歌的第一本*站点可靠性工程*书。更基于控制的模型的另一个案例是当服务涉及生命安全时。如果有人经常为飞机自动驾驶仪系统编写不安全的软件，此人（和公司）对主要基于上下文的方法的容忍度可能非常低。如果飞机在高空失去动力，他们不可能聚在一起，找出如何通过额外的上下文来提高飞机的可用性。每个
SRE
组织都有自己可以承担的风险预期，通过这些来确定在基于上下文的模型与基于控制的模型之间的取舍。
我认为信息和上下文是有区别的。在系统监视中，信息可能只是一堆可用性指标，呈现在仪表板中，也可以通过电子邮件发送给团队。收到此类电子邮件的典型工程师会忽略它，因为，1）他们负责为服务编写业务逻辑，2）他们缺乏消化和理解作为时间序列呈现的资源和可用性指标的专业知识。
在
Netflix，我们提供数十万个运维指标。为了支持上下文驱动的模型以提高可用性，我们必须将特定的领域知识用于数据。这需要获取信息并将其调整为一种格式，以讲述有关可用性的故事。通过应用这种转换，我们能够根据需要将此上下文推送到团队，以便他们能够衡量给定微服务的可用性是否有所改善。例如，一个关键的可用性指标是给定微服务上从属服务获得的趋势成功率（从客户端测量并根据原因分解故障率）。
我的团队并不拥有可用性，但我们的工作是随着时间的推移来改进它。为什么？因为有人总是能把系统弄趴下。很多时候，团队会伸出手来说："我不太确定可用性为何下降；我们可以谈谈吗？"在调查这种情况时，可能会发现有人修改了客户端库或更改了超时设置。如前所述，重要的是相信其实没有人希望做出疏忽的运维操作；他们只是缺乏做出更好决定的上下文。我们也不能忘记，系统可能过于复杂，避免事件所需的操作栏既过高又不必要。后一类的一个示例是动态系统中静态超时的调优。
尽管上下文驱动模型是理想的，但当你看到团队反复发生事故时，可以仍会转向所需的控制模型。因为团队得到了与其他团队相同的有效可用性上下文，但可用性继续受到影响。在一些公司中，控制采取禁止代码推送到生产中的形式，然后工程师当然会来找管理层，因为他们需要将代码推送到生产中。在
Netflix，我将与工程经理进行"你在我的名单上"的讨论，其中包括围绕服务可用性的期望而进行的额外个人级别设置。如果能达成共识，那么我将提到，他们正在开发许多功能，但没有解决提高可用性所需的必要更改。最后，我问，"我们如何把可用性提到议事日程？"在我看来，这就是我真正想要的控制范围。我很幸运，在一家公司工作，有一群成熟的个人，他们认识到可用性对业务的重要性，并愿意适当地确定工作的优先次序。我发现这种类型的讨论通常让问题往正确的方向解决。
前面提到过，但值得再次呼吁，虽然上下文与控制相比看起来像一个美好的乌托邦，似乎每个人都可以实现。但要记住，我们经营的业务是视频流媒体而已，如果我们有一个失败，也只是无法观看而已。我们不需要担心飞机从天上掉下来，也不必考虑心脏起搏器会停止工作。这让我们在上下文与控制的自由切换方面有了更大的灵活性。
**大卫：**这是否意味着基于上下文的方法在较小的规模下能工作，但在较大的规模下却不太有效？
**Coburn：**我认为，上下文与控制的选择，与"规模"与生产环境或客户群的规模没有多大关系。它更多的是关于组织的大小以及它们在团队之间如何运作。随着组织的发展，有效使用上下文实现可用性可能具有挑战性。随着公司的发展，一个关键因素可能较少是一对一的沟通或面对面的时间。
在 Netflix，我拥有所有工程团队，我们在一个类似校园的地方办公。我可以和
Netflix
的任何经理一起喝咖啡。我曾在惠普这样的大公司工作过，那时候有些团队就位于地球的另一个半球。在这种这种跨时区的工作环境中，我仍然能得到适当的上下文，但需要更多的工作来提供有效的上下文。我的假设是，如果一家公司从控制开始，那主要是因为（无论规模如何）他们更乐于在流程和控制方面带领团队。
**David：**基础架构是否有一种与上下文相关的可靠性作用？
**Coburn：**我们认为，在现在的发布模式下有很大的可靠性，因为我们本质上是不可变的。我想大家都曾在公司工作过，在那里我们升级了一些东西，结果情况很糟糕，我们整晚都在救火，因为我们正在努力恢复网站，而且补丁不起作用。当我们将新代码投入生产时，我们从不升级任何内容，我们只是将新版本与当前代码库一起推送。不管别人怎么称呼它，其实就是红/黑发布或蓝/绿发布。新版本的代码进入的是试错环境，如果金丝雀发布遇到某些问题，我们只是把它关闭，然后立即回滚，这样我们甚至不经历完整的部署。这使恢复时间从几小时降低到几分钟。
 尽管我们有不可变的代码部署，但我们也有称为快速属性（或动态属性）的内容。这意味着我们可以随后动态更新应用程序属性进入生产环境。这打破了我们的不可变模型，但确实经常需要这么做，但我们也看到此功能被过度使用并导致生产事件。与生产中的其他常见问题一样，如果我们看到团队或团队在动态属性管理问题上步履蹒跚，那就会通过改进工具来寻求消除风险的方法。在我们的生产环境中，我们现在使用我们的持续交付平台
Spinnaker
来管理动态属性的交错推出，以尽量减少问题的频率并及早发现问题。我们将这一总体战略称为"护栏"。
即使我们做到了这一点，有时团队仍然会手动更改某些内容，而不是通过快速属性管道，并最终导致生产故障。如果它再次发生，我们会说，"好吧，他们显然还没有得到消息。我们需要和他们见面，然后说：请不要按下这个按钮。"我们尝试不挪走手动修改的按钮，但在某些时候，我们可能会彻底关闭这个机制。
**David：**这就提出了一个有关反馈循环的问题。听起来你的一些反馈信号是"网站是否停机了？""有正面发展的趋势吗？"除了以黑盒方式观察系统并查看你所关心的指标是否发生变化之外，是否有更直接的方法从人类那里获得了解，他们是否得到了所需的上下文？
**Coburn：**这是我们公司成长过程中的发展之一。在 Netflix，我们可能有
2000 名工程师，涵盖所有不同的产品领域。我可以构建一个内部工具
UI、一个编码引擎、一个基础架构堆栈，或者为你提供更好建议的工具。其中一些工作的努力（比其他的工作）更侧重于面向客户的可用性的影响。从数字角度来看，在给定的一天，我们大概有
50%
的工程团队可以在生产中做任何他们想做的事，而且无论他们以任何方式工作，我们的服务可用性都不会受到影响。
起初，我们经常在大厅里走来走去，类似于打更那样大喊："嘿，我们的可用性是三个九；这是一个问题！"问题是，这是一个非常漫无边际的消息，只有
50%
的人感兴趣，其余的人会探出脑袋说："好吧，嗯，你说可用性不够好，但我能做些什么，因为我的服务并不影响可用性？"