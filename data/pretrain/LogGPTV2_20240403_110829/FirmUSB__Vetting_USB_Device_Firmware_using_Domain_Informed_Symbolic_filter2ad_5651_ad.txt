tions written inside the interrupt function on the current path are
stored in a map,W Set, by a listener, recordStores, that is registered
with the symbolic execution engine. Another listener, checkLoads,
detects load instructions reading from memory locations that have
not been written in the same interrupt function and on the current
path. The source location of such a load instruction is added to the
set of symbolic values and symbolic execution is restarted with the
updated set of symbolic values. For each interrupt function, this
process is repeated for a given number of iterations, τ.
When Endpoints Can Be Predicted. Another issue is identifying
the endpoint address that will be used for sending HID data. The
endpoint number that will be used for the specific functionality is
extracted by scanning the interface descriptors that come after the
configuration descriptor. To acquire the endpoint address, we can
use the endpoint buffer candidates computed by Algorithm 1 as
each endpoint is normally allocated by having a constant amount
of offset from the consecutive endpoints. This constant offset is the
packet size, which can be 8, 16, 32, or 64 bytes depending on the
speed of the device.
Registers, EP0 : P(MemoryLoc), Sym : P(MemoryLoc,maxEP: int)
Algorithm 4 An algorithm for detecting concrete data flows to
any of the endpoint buffers.
1: FindUnexpectedDataFlow(F : F irmwar e, , isAReд: Memory Mapping of
2: function checkConcAccesses(i:Instr, s: Execution State)
if i ∈ tarдet Instrs and isAConstant(i .src) then
3:
F laддedAccesses ← F laддedAccesses ∪ {i }
4:
end if
5:
6: end function
7: Other EPs : P(MemoryLoc)
8: Other EPs ← ∅
9: for each i = 8, 16, 32, 64, k = 1 : max EP do
10:
11:
12: end for
13: M : F .Instructions × {src, dst } (cid:55)→ N ∪ {⊥} × N ∪ {⊥}
14: M ←PropConstMemAccesses(F, isAReд)
15: tarдet Insts ← ∅
16: for each store instruction si ∈ F .Instructions do
17:
for each j ∈ EP0 do Other EPs ← Other EPs ∪ {j + i ∗ k }
end for
then tarдet Insts ←
Other Eps
∈
tarдet Insts ∪ {si }
if M(si .dst).second
end if
then
18:
19: end for
20: counters ← ∅
21: for each add or sub instruction ai ∈ F .Instructions do
22:
if exists no use ui of ai as a getElementPtr s.t. ai’s result is used as an index
end if
counters ← counters ∪ {V alue(ai .dst)}
if ai .dst is a direct address then
end if
23:
24:
25:
26:
27: end for
28: Register checkConcAccesses as a listener and run symbolic execution with
29: return F laддedAccesses
symbolic values Sym ∪ counters
Algorithm 4 shows how candidate endpoint buffer addresses
can be used to detect concrete value flows into a potential end-
point buffer. After computing candidate endpoint buffers based on
a given number of maximum endpoints to be considered and the
constant offsets (lines 7-12), it identifies the store instructions that
may be storing to an endpoint buffer (lines 13-19). It also identifies
add and subtract instructions that may be manipulating counters.
9
If such an instruction does not have a getElementPtr reference,
then it probably is not used as an index into an array. If such an
instruction’s destination address can be resolved, the respective
memory location is identified as a potential counter (lines 20-27).
Such counters are often used to delay the attack and becomes a
bottleneck similar to the loops for symbolic execution engines. All
counter locations are marked as symbolic in addition to the other
variables symbolic addressed that have been passed as an input the
algorithm (line 28). By registering a listener, checkConcAccesses
(lines 2-6), for the symbolic execution engine, suspicious instruc-
tions that may be reading a constant value into an endpoint buffer
are detected and stored in FlaддedAccesses.
Algorithm 5 An algorithm for detecting inconsistent data flows.
1: FindInconsistentDataFlow(F : F irmwar e)
2: Sym, Conc : MemoryLoc × Context Id → Bool
3: Sym, Conc ← λx, y .f alse
4: F laддedAccesses : P(Instr)
5: F laддedAccesses ← ∅
6: function recordAccesses(i:Instr, s: Execution State)
if isAStor e(i) then
7:
8:
9:
10:
11:
12:
13: end function
14: function onSymExTermination
15:
16:
17: end function
18: Register recordSymAccesses and onSymExTermination as listeners and run
19: return F laддedAccesses
if isSymbolic(i .src) then
Sym ← Sym[(i .dst, i .blockI D) (cid:55)→ true]
elseConc ← Conc[(i .dst, iblockI D) (cid:55)→ true]
end if
F laддedAccesses ← { i | Conc(i .dst, i .blockI D) and
∃b .Sym(i .dst, b) and b (cid:44) i .blockI D}
symbolic execution
end if
When Endpoints Cannot Be Predicted. There may be cases when
endpoints are setup via the hardware logic and are not easily
guessed, i.e., the constant offset hypothesis fails. In such cases
malicious behavior can still be detected by checking for inconsis-
tent data flow as shown by Algorithm 5. The algorithm assumes
that the device sometimes acts non-maliciously, i.e., the data sent
to the host is read from a symbolic location, and sometimes act
maliciously, i.e., the data sent to the host is read from a concrete lo-
cation. To detect this, we perform a pass of the symbolic execution
algorithm with two listeners (line 18). Listener recordAccesses
records whether a store into a memory location get its data from a
symbolic or a concrete source along with the block identifier as the
context information (lines 6-13). Upon termination of the symbolic
execution algorithm, listener checkConcAccesses identifies mem-
ory locations that are known to receive symbolic values in some
contexts and concrete values in others (lines 14-17). Instructions
that write to such memory locations using concrete sources are
stored in FlaддedAccesses and are returned by the algorithm.
5 EVALUATION
We evaluate FirmUSB based upon two malicious firmware images
and across our separate backend engines built on angr and Fie. One
firmware binary that we analyze is reverse engineered C code from
a Phison 2251-03 USB controller (Phison) and the other (EzHID)
implements a keyboard for the Cypress EZ-USB. A key difference
between the images is that the Phison firmware is meant to act as
Firmware Name (Controller)
Phison (Phison 2251-03)
EzHID (Cypress EZ-USB)
Symbolic
Domain Spec.
Full
Partial
Full
Partial
Full
Partial
Full
Partial
No
No
Yes
Yes
No
No
Yes
Yes
Time to Target (seconds)
Coverage At Target (%)
Fie Engine
Fie Engine
angr Engine
HID
Config
–
–
68.91
–
70.28
10.76
9.65
5.33
5.18
68.72
–
70.09
24.04
22.07
11.88
11.13
Config
384.40
58.54
55.77
7.68
–
63.52
–
9.45
HID
43.49
21.64
7.91
5.64
–
67.04
–
9.87
angr Engine
HID
Config
–
–
49.53
–
49.53
25.92
25.92
11.24
11.24
48.58
–
48.58
36.47
36.47
14.45
14.45
Config
59.60
48.61
44.66
38.88
–
–
42.06
37.95
HID
46.47
41.91
38.87
36.26
–
–
43.08
38.71
Table 2: Time for each FirmUSB backend to reach USB-related target instructions (Query 1) for our two firmwares. The sym-
bolic column represents the symbolic mode used to execute the binary and the domain specific column states that USB specific
conditions were applied to the execution. The coverage (lower is better) is included to show the effects of partial symbolic and
domain constraining optimizations. The dashes (–) indicate that the run was unable to complete due to an error.
a mass storage device, but contains hidden code to act as a Human
Interface Device (HID), whereas EzHID acts as a normal keyboard,
but injects malicious keystrokes at run time. Our evaluation goals
are to determine what USB configurations a firmware will act as
during run time in order to compare against an expected device
model and to search for inconsistent behavior of its claimed identity.
All evaluation is performed on a SuperMicro server with 128GiB
of RAM and dual Intel(R) Xeon(R) CPU E5-2630 v4 2.20GHz CPUs
for a total of 20 cores. The angr Engine used Python 2.7.10 running
on PyPy 5.3.112 while the Fie Engine used a modified version of
KLEE[16] on LLVM-2.9. In practice, due to implementations of the
backends themselves, FirmUSB was only able to utilize a single
core (Python 2.7 and KLEE are single threaded). We did not opt to
orchestrate multiple processes for increased resource utilization.
Except for making the EzHID firmware malicious, we did not modify
or tailor the firmware images to aid FirmUSB during analysis.
The evaluation begins with an explanation of the firmware bench-
marks we used, followed by the output of our symbolic location
finder from Algorithm 3, then on towards our domain informed
algorithms, and finally Query 1 and Query 2 on both firmwares.
5.1 Benchmarks
The first firmware we used for analysis is the Phison Firmware.
It was reverse engineered in to C code by [41] and then modified
to perform a BadUSB attack. The firmware initially enumerates
itself as a Mass Storage device and later may re-enumerate as an
Human Interface Device. After a predefined threshold count, it
starts sending input data from a hardcoded script. Since, the device
is now operating as a keyboard, the sent data is accepted as valid
keystrokes. The Phison firmware runs on top of an 8051 core, which
influenced our choice to select Intel’s 8051 architecture as our initial
target to analyze.
Our second USB firmware case study was based on the EzHID
Sun Keyboard firmware. In normal usage this firmware was meant
to work with an EZ-USB chip for bridging the legacy Sun keyboard
to a modern USB bus. From the stock firmware, we modified the
image with a malicious keystroke injector, similar to that of the
Phison firmware. After a set delay, the firmware will begin to inject
a series of static scan codes on to the active USB bus. This inter-
rupts the normal flow of keystrokes from the Sun keyboard until
12In practice, we received roughly a 2x speedup over the standard CPython interpreter,
at the expense of greatly increased memory usage.
the injection has completed. EzHID’s firmware was chosen as it
was readily available online13 and also compatible with the 8051
architecture (with 8052 SFR and RAM extensions).
5.2 Symbolic Values
One of our main contributions in this paper is the Algorithm 3
which finds the memory locations that need to be symbolic in order
to analyze the firmware. FirmUSB utilizes two symbolic execution
engines both of which require specified symbolic memory regions.
Large portions of both benchmarks are only conditionally accessible.
Without the correct regions being symbolic the code cannot be
properly covered and the analysis becomes incomplete. When no
memory region is set symbolic the coverage achieved for Phison is
17.20% and for EzHID it is 22.49%. In this case interrupts are still
fired but due to unmet conditions, not much of the code is executed
until the code finally ends up executing an infinite loop. Since the
target instructions are also guarded by conditions, the symbolic
execution never reaches them. As a result, the malicious property of
the firmware cannot be determined without more symbolic memory.
To improve this, we use Algorithm 3 to set memory regions as
symbolic, causing us to reach the targets.
One interesting aspect here is the contrast between our two
benchmarks. Phison uses direct addressing for most of the memory
reads and the conditional variables on the target path. On the other
hand, EzHID uses indirect reads from memory for conditional vari-
ables in the path to target. By recording loads and stores for each
path we were able to record the destination of indirect memory
accesses. Our algorithm found that only 26 bytes for Phison and