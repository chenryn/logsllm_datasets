the symbolic model is a substantially higher-level than what can
actually happen in Bitcoin. For instance, while the executions of
contracts strictly follow the BitML semantics (so, the possible con-
figurations are pre-determined), in Bitcoin adversaries can append
arbitrary transactions to the blockchain (not necessarily those ob-
tained by the compiler), crafting them with data in their knowledge,
possibly sniffed over the network.
In order to reason about the behaviour
Computational model.
of participants in Bitcoin, we introduce a computational model,
where attackers are only subject to the usual restrictions of stan-
dard computational models (i.e. they can only manipulate bitstrings
using PPTIME algorithms). As in the symbolic model, also com-
putational participants are rendered as strategies: these strategies
can listen to network traffic and scan the blockchain, in order to
decide their next actions. As an action, a participant can append a
transaction to the blockchain: for this to happen, the bitstring gen-
erated by a strategy must be the encoding of a transaction which
redeems some unspent transaction outputs on the blockchain. An-
other action is broadcasting a bitstring: this is used for off-chain
communications, e.g., when participants need to exchange signa-
tures, or to reveal their secrets. The adversary strategy defines the
behaviour of the dishonest participants, and acts as a scheduler for
all the participants’ moves, as in the symbolic model. The main
difference, here, is that computational actions are bitstrings, instead
of symbolic terms. Computational adversaries can obtain these
bitstrings from their knowledge (e.g., sniffed messages), with the
only limitation of crafting them through PPTIME algorithms. For
simplicity, our model slightly abstracts from the actual low-level be-
haviour of Bitcoin (e.g., we assume the blockchain to be immutable
and without forks, and we neglect transaction fees).
Relating symbolic and computational security. The main re-
sult of this paper is a computational soundness theorem [9]: it states
that, with overwhelming probability, runs in the computational
model have a corresponding run in the symbolic model. Therefore,
computational attacks can be observed in the symbolic model. More
precisely, the theorem states that we can securely execute BitML
contracts on Bitcoin according to the following workflow. First, each
honest participant chooses her symbolic strategy, which drives the
stipulation and execution of contracts according to the symbolic se-
mantics. Then, they translate their strategies to computational ones;
in this step, we leverage our compiler to map the involved contracts
into Bitcoin transactions. Finally, participants execute their com-
putational strategies, being subject to computational adversaries.
Our computational soundness result ensures that computational
strategies admit no attacks, unless the original symbolic strategies
also admit the same attack. To state computational soundness, we
define a correspondence relation (called coherence) between runs of
contracts in the two models. Intuitively, (symbolic) deposits ⟨A, vB⟩
correspond to (computational) unspent transaction outputs for vB
which can be redeemed using only A’s signature. Active contracts
⟨C , v⟩ also correspond to unspent transaction outputs, but they
involve more complex redeem conditions (e.g., they may require to
provide a signature from all the contract participants, or to reveal
a secret having a certain length). Performing a transition in the
symbolic semantics of a contract C corresponds to appending to
the blockchain one of the transactions obtained by compiling C.
Practical consequences of computational soundness. To il-
lustrate the practical applications of our results, recall the OddsEvens
contract introduced before. Assume that A’s symbolic strategy is
to (i) stipulate the contract, depositing 3B and committing to a
randomly chosen secret a of length 0 or 1; (ii) reveal her secret at a
certain time t′ < t; (iii) withdraw her deposit at time t′; (iv) collect
the pot, if she is the winner. According to the symbolic semantics,
in all the runs of OddsEvens which are conformant to A’ strategy
(and to any adversarial strategy), after time t′, A will receive at
least 2B (i.e. her deposit) from the contract. Computational sound-
ness guarantees that the same holds in the computational model,
i.e. when executing the compiled contract on Bitcoin. Note that
proving this result directly in the computational model is incon-
venient, as the adversary — not being constrained to follow the
structure of the contract — can play any sequence of actions that
respects the computational model, and the consistency of the Bit-
coin blockchain (where he can also append transactions crafted
by himself, not obtained by the BitML compiler). In this setting,
proving security against all adversaries would require to cope with
a universal quantification over all possible PPTIME algorithms. By
contrast, proving security in the symbolic model is significantly
simpler: a verification algorithm should check if the desired prop-
erty holds in all the reachable configurations in the contract runs
conformant with A’s strategy. This simplification is similar to the
one obtained when reasoning about the security of cryptographic
protocols in symbolic models, instead of computational ones [9].
3 RELATED WORK
The first proposal to implement smart contracts on Bitcoin dates
back (at least) to 2012 [1], and the first scientific paper to 2013 [12].
Since then, the research on smart contracts has evolved along dif-
ferent directions: (i) studying contracts that can be run directly
on Bitcoin; (ii) increasing the expressiveness of contracts through
Bitcoin extensions; (iii) developing high-level languages for Bitcoin
contracts; (iv) studying new blockchain infrastructures for smart
contracts. Below we briefly survey the literature along these lines.
Bitcoin smart contracts. Basic smart contracts which transfer
bitcoins according to the external state [2, 3] can be implemented
4
using multi-signature transactions. Timed commitments for Bitcoin
were originally introduced by [12], and then used to implement
multiparty computations, like lotteries. The lottery in [12] requires
each player to deposit a collateral which grows quadratically with
the number of players. Subsequent works proposed Bitcoin exten-
sions which allow for lotteries without collaterals. More general
forms of fair multiparty computations on “pure” Bitcoin, exploiting
SegWit [43], were proposed in [11, 22, 41]. Contingent payments
for Bitcoin (i.e., contracts which allow to sell solutions for a class
of NP problems) were introduced in [18, 46].
Extensions of the Bitcoin scripting language. Other works
proposed extensions of Bitcoin to enhance the expressiveness of
smart contracts. In [49] the Bitcoin scripting language is extended
with covenants, a construct that can constrain the structure of the
redeeming transaction. Another implementation of covenants is
proposed in [53], exploiting a (currently disabled) opcode to con-
catenate arbitrary data, and introducing a new opcode to verify
signatures against it. Covenants enable contracts that implement
vaults, i.e. protocols which scatter a money transfer along a se-
quence of transactions, giving the ability to the owner of the vault
to abort the transfer if he detects misbehaviour. More generally,
recursive covenants allow to implement a state machine through a
sequence of transaction that store its state. The collaterals of multi-
party lotteries can be eliminated through Bitcoin extensions: e.g.,
[20] requires input malleability (i.e. the possibility of not signing
any input), while [47] requires a new opcode that checks if the
redeeming transaction belongs to a predetermined set. The work
[32] proposed a contingent payment protocol that does not rely on
zero-knowledge proofs, but instead requires a new opcode to check
if the two top elements of the stack are a valid key pair. The work
[42] captures general multiparty, interactive, stateful computations
by exploiting a new opcode (similar to the one in [53]), to check
signatures for arbitrary messages.
Languages for Bitcoin smart contracts. Only a few languages
for Bitcoin contracts have been proposed so far. TypeCoin [30]
allows to model the updates of a state machine as affine logic propo-
sitions. Users “run” this machine by putting transactions on the
blockchain, with the guarantee that only legit updates can be per-
formed. A downside of [30] is that liveness is guaranteed only when
participants cooperate, i.e., an adversary can prevent the others
from completing the contract. Note instead that in BitML, honest
participants can always make a contract progress. The other lan-
guages we are aware of, IVY [5], BALZaC [8] and Simplicity [52],
are high-level alternatives to the Bitcoin scripting language, that
can be compiled into Bitcoin scripts. In order to implement a smart
contract using these languages, one still needs to design it as a
protocol involving message exchanges and transactions (although
with more readable scripts). Note that these languages do not allow
to describe the whole contract, but only the individual transactions
used in the associated protocol. Compared to these approaches,
BitML has two main advantages: first, it can express the whole con-
tract within a single term; second, it relieves the designer from the
burden of Bitcoin transactions, which, instead, can be automatically
generated by our compiler. The loss of expressiveness caused by the
abstraction from low-level Bitcoin details (discussed in Section 10),
is repaid by a gain of elegance in the specifications of contracts,
and by the simplification of upcoming verification techniques.
Smart contracts beyond Bitcoin. After Bitcoin, other platforms
and languages for smart contracts have been created [19]. Currently,
the most popular ones are Ethereum [28] (in the permissionless
setting) and Hyperledger Fabric [10] (in the permissioned one). The
recent attacks on Ethereum contracts have given rise to extensive re-
search on how to make it more secure. A few papers study EVM, the
bytecode language which is the target of compilation of Ethereum
contracts. Among them, [44] formalises the semantics of EVM, and
develops a symbolic execution of EVM contracts, to detect some
vulnerability patterns. Another approach based on the analysis of
vulnerability patterns on dependency graphs is pursued by [59],
which develop a tool called Securify. A more detailed formalisa-
tion of EVM (validated against the official Ethereum test suite) is
in [37], which also proposes a set of general security properties
relevant for avoiding classic vulnerabilities in Ethereum contracts.
The work [36] develops EtherTrust, a framework for the static veri-
fication of Ethereum smart contracts at the EVM level, which can
establish the absence of re-entrancy vulnerabilities. Also [23] de-
tects vulnerabilities of Ethereum contracts, by translating Solidity
and EVM code into F∗ [56]. Further, given a Solidity program and
an alleged compilation of it into EVM bytecode, [23] verifies that
the two pieces of code have equivalent behaviours. The work [38]
uses the Isabelle/HOL proof assistant [51] to verify the EVM ob-
tained by compiling the Solidity code of “Deed”, a contract which
is part of the Ethereum Name Service. In particular, it proves that,
upon an invocation of the contract, only its owner can decrease the
balance. The work [55] proposes Scilla, a strongly typed intermedi-
ate language where contracts are represented as Communicating
Automata. Compared to EVM, Scilla is more structured: this sim-
plifies formal reasoning, and makes contracts more amenable to
verification. Ongoing work aims at a Coq formalization of Scilla.
Other papers propose domain-specific languages for Ethereum con-
tracts. Among them, [45] represents smart contracts as finite state
automata, where state transitions can be constrained according to
contract variables and inputs; a tool is provided to translate these
automata into Solidity code. The work [24] compiles to Solidity a
fragment of the language for financial contracts introduced by [39].
While the previous works address qualitative properties of con-
tracts, the work [29] develops a framework for their quantitative
analysis, by transforming contracts (specified in an abstract lan-
guage) into state-based games. This allows one to compute the
worst-case guaranteed utility resulting from interacting with a
contract, which can be helpful to detect vulnerabilities.
4 THE BITML CALCULUS
We assume a set Part of participants, ranged over by A, B, . . ., and
we denote with Hon ⊆ Part a non-empty set of honest participants.
We also assume a set of names, of two kinds: x, y, . . . denote de-
posits of B, while a, b, . . . denote secrets. We denote with ⃗x a finite
sequence of deposit names, and we adopt a similar notation for
sequences of other kinds.
5
Definition 1 (Contract preconditions).
G ::= A:? v @ x
| A:! v @ x
| A:secret a
| G | G
volatile deposit of vB, expected from A
persistent deposit of vB, expected from A
committed secret by A
composition
⋄
The precondition A:! v @ x requires A to own vB in a deposit x,
and to spend it for stipulating a contract C. Instead, A:? v @ x only
requires A to pre-authorize the spending of x. Since x is not spent
upfront, there is no guarantee that vB will be available when C de-
mands x, as A can spend it for other purposes. Finally, A:secret a
requires A to generate a random nonce a, and commit to it before
C starts. During the execution of C, A can choose whether to reveal
a to the other participants, or not.
Definition 2 (Contracts). The syntax of contracts is in Figure 1,
We abbreviate put ⃗x & reveal ⃗a if p as: (i) put ⃗x when ⃗a is empty
and p is true, (ii) reveal ⃗a if p when ⃗x is empty, (iii) τ when ⃗x and
⃗a are empty and p is true, and (iv) we omit “if p” when the predicate
p is true. We denote with 0 the empty sum. In guarded contracts, we
assume that the order of decorations is immaterial, e.g., we consider
⋄
after t : A : B : D equivalent to B : A : after t : D.
A contract C is a choice among branches. Intuitively, a branch D
performs an action, and possibly proceeds with a continuation C ′.
The action put ⃗x & reveal ⃗a if p atomically performs the follow-
ing: (i) spend all the volatile deposits ⃗x, adding their values to
the current balance; (ii) check that all the secrets ⃗a have been re-
vealed, and that they satisfy the predicate p. The guarded contract
split v1 → C1 | · · · | vn → Cn divides the contract into n con-
tracts Ci, each one with balance vi. The sum of the vi must be equal
to the current balance. The prefix withdraw A transfers the whole
balance to A (to transfer only a part of it, one can perform a split).
Note that, when enabled, the above actions can be fired by anyone
at anytime. To restrict who can execute a branch and when, one can
use the decoration A : D, which requires the authorization of A,
and the decoration after t : D, which requires to wait until time t.
Definition 3 (Contract advertisement). A contract advertise-
ment is a term {G}C satisfying the following conditions: (i) the
names in G are distinct; (ii) each name in C occurs in G; (iii) the
names in put ⃗x & reveal ⃗a if p are distinct; and, each name in p
⋄
occurs in ⃗a; (iv) each A in {G}C has a persistent deposit in G.
The last condition will be used to guarantee that the contract is
stipulated only if all the involved participants give their authoriza-
tions. Indeed, in order to transform a contract advertisement {G}C
into an active contract, our semantics requires only the authoriza-
tions of participants with persistent deposits in G. So, condition (iv),
makes the participants involved in {G}C equal to those with per-
sistent deposits in G, causing the stipulation to happen only when
everyone agrees. Requiring exactly the authorizations to spend
persistent deposits in the symbolic semantics is key to implement
contract stipulation in Bitcoin: indeed, to record that a contract has
been stipulated, in Bitcoin one has to append a suitable transaction,
say Tinit. When doing this, the Bitcoin network cannot check condi-
tions corresponding to committing to a secret, or to pre-authorize
a volatile deposit, since these actions are performed off-chain. The
C ::=(cid:80)
i∈I Di
D ::=
put ⃗x & reveal ⃗a if p . C
| withdraw A
| split ⃗v → ⃗C
| A : D
| after t : D
contract
guarded contract
collect deposits ⃗x and secrets ⃗a
transfer the balance to A
split the balance (|⃗v | = |⃗C |)
wait for A’s authorization
wait until time t
p ::=
true
| p ∧ p
| ¬p
| E = E
| E < E
predicate
truth
conjunction