title:T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs
author:Ming-Wei Shih and
Sangho Lee and
Taesoo Kim and
Marcus Peinado
T-SGX: Eradicating Controlled-Channel Attacks
Against Enclave Programs
Ming-Wei Shih†,⋆, Sangho Lee†, and Taesoo Kim
Georgia Institute of Technology
{mingwei.shih, sangho, taesoo}@gatech.edu
(SGX)
Abstract—Intel Software Guard Extensions
is a
hardware-based trusted execution environment (TEE) that en-
ables secure execution of a program in an isolated environ-
ment, an enclave. SGX hardware protects the running enclave
against malicious software, including an operating system (OS),
a hypervisor, and even low-level firmwares. This strong security
property allows the trustworthy execution of programs in a hostile
environment, such as a public cloud, without trusting anyone (e.g.,
a cloud provider) between the enclave and the SGX hardware.
However, recent studies have demonstrated that enclave programs
are vulnerable to an accurate controlled-channel attack: Since
enclaves rely on the underlying OS, a curious or potentially
malicious OS can observe a sequence of accessed addresses by
intentionally triggering page faults.
In this paper, we propose T-SGX, a complete mitigation
solution to the controlled-channel attack in terms of compatibility,
performance, and ease of use. T-SGX relies on a commodity
component of the Intel processor (since Haswell), Transactional
Synchronization Extensions (TSX), which implements a restricted
form of hardware transactional memory. As TSX is implemented
as an extension (i.e., snooping the cache protocol), any unusual
event, such as an exception or interrupt, that should be handled in
its core component, results in an abort of the ongoing transaction.
One interesting property is that the TSX abort suppresses the
notification of errors to the underlying OS, which means that
the OS cannot know whether a page fault has occurred during
the transaction. T-SGX, by utilizing such property, can carefully
isolate effects of attempts to tap running enclaves,
thereby
completely eradicating the known controlled-channel attack.
We have implemented T-SGX as a compiler-level scheme
that automatically transforms a normal enclave program into
a secured one. We not only evaluate the security properties of
T-SGX, but also demonstrate that it applies to all the previously
demonstrated attack targets including libjpeg, Hunspell, and
FreeType. In addition, we evaluate the performance of T-SGX
by porting ten benchmark programs of nbench to the SGX
environment. The results are promising; that is, T-SGX incurs on
average 50% runtime overhead, which is an order of magnitude
faster than state-of-the-art mitigation schemes.
† The two lead authors contributed equally to this work.
⋆ The author did part of this work during an intership at Microsoft Research.
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes  is  granted  provided  that  copies  bear  this  notice  and  the  full  citation 
on  the  first p age. R eproduction f or c ommercial p urposes i s s trictly prohibited 
without the prior written consent of the Internet Society, the first-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23193
Marcus Peinado
Microsoft Research
PI:EMAIL
I.
INTRODUCTION
Hardware-based trusted execution environments (TEEs)
have become one of the most promising solutions against
various security threats, including malware, remote exploits,
kernel exploits, hardware Trojans, and even malicious cloud op-
erators [27]. ARM’s TrustZone [1] and Samsung’s KNOX [50]
are now widely deployed on mobile phones and tablets. To
secure traditional computing devices, such as laptops, desktops,
and servers, the trusted platform module (TPM) [60], Intel’s
Trusted Execution Technology (TXT) [16], and Software Guard
Extensions (SGX) [24] have been developed and are being
adopted into mainstream products. Among these hardware-
based TEEs, Intel SGX is getting considerable attention because
it can be the basis for practical solutions in an important
security domain: the trustworthy public cloud, which provides
strong guarantees of both confidentiality and integrity, which
are known to be the biggest obstacle to wider cloud adop-
tion [27, 59]. Homomorphic encryption [14] has been proposed
as a software-only solution to this problem, but, so far, it is
too slow for practical uses. More critically, sensitive operations
are often executed on potentially malicious clients [13, 36, 41],
which significantly weakens the overall, end-to-end security of
the system. In contrast, hardware-based Intel SGX provides
strong security guarantees for running enclaves in combination
with Intel’s efforts on formal verification of the hardware spec-
ification and implementation of cryptographic operations [26].
The resulting security guarantees enable a variety of new
applications, including data analytics [51], MapReduce [12],
machine learning [46], Tor [31], network function virtualization
(NFV) [53], and library OSs [4, 61, 62].
While Intel SGX draws significant attention to communities
because of its strong security guarantees, researchers have
recently demonstrated two critical side-channel attacks against
SGX programs, namely,
the page-fault- and cache-based
side-channel attack [10, 54, 65]. The page-fault-based side-
channel attack, also known as the controlled-channel attack,
is particularly dangerous because it gives the malicious OS
complete control over the execution of SGX programs. In
contrast, the cache-based side-channel attack have to passively,
thus non-interactively, monitor the execution from the outside.
Specifically, to launch a controlled-channel attack, the malicious
OS can stop an enclave program, unmap the target memory
pages, and simply resume its execution. By using the leaked
addresses, researchers [65] could reconstruct input text and
image files from running enclave programs [4]. Similarly,
the pigeonhole [54] attack could extract bits of encryption
keys from cryptographic routines in OpenSSL and libgcrypt.
In response to the controlled-channel attack, two types of
countermeasures have been proposed, namely, obfuscating
memory accesses [9, 49, 54] and isolating page faults [19, 54],
but both are limited in terms of performance or compatibility.
First, memory access obfuscation suffers from huge perfor-
mance degradation: up to 4000× overhead without significant
developer effort [54]. Second, more efficient schemes, such as
self-paging [19] and contractual execution [54], require new
page-fault delivery mechanisms that do not exist in mainstream
processors and are unlikely to be included in them in the
foreseeable future. For example, Intel considers side-channel
attacks as out of scope for SGX [26] and is unlikely to disrupt
core processor components to accommodate such proposals.
In this paper, we propose a new, practical enclave design,
T-SGX, that can protect any enclave program against controlled-
channel attacks. At a high level, T-SGX transforms an enclave
program such that any exception or interrupt that occurs during
the execution is redirected to one specific page (see §V-B). We
provide strong security guarantees against controlled-channel
attacks under a conservative threat model (see §VII). T-SGX
realizes this mechanism with a commodity hardware feature,
Intel Transactional Synchronization Extensions (TSX), that
was introduced with the Haswell processor. The key enabling
property of TSX is the way it aborts an ongoing transaction
when encountering an erroneous situation, such as a page
fault or interrupt. In particular, when a page fault occurs, TSX
immediately invokes a user-space fallback handler without
notifying the underlying OS. The fallback handler recognizes
whether the very recent attempt to execute a code page or access
a data page has triggered a page fault. If it did, T-SGX carefully
terminates the program. Further, TSX ensures that such traps
and exceptions are never exposed to system software including
the OS and a hypervisor, implying that the controlled-channel
attack relying on page-fault monitoring is no longer possible
with T-SGX because even the OS cannot know whether a page
fault has occurred. However, obtaining a working, efficient
TSX-secured enclave binary requires careful program analysis.
First, TSX is very sensitive to cache usage; it treats cache
conflicts and evictions as errors [25, §15.3.8.2]. Thus, we have
to carefully compose transactional code regions based on their
memory access patterns. Second, TSX treats any interrupts
and exceptions as errors (e.g., timer and I/O interrupts), so we
cannot run a code region for a long time even if it makes
no memory accesses. Third, setting up a TSX transaction
is very expensive (around 200 cycles on our test machine
with an Intel Core i7-6700K 4 GHz CPU), which implies a
naïve solution, wrapping individual instructions with TSX, is
impractical. Finally, we need to carefully arrange transactional
code regions in memory to hide transitions between them from
attackers (see §V-B).
T-SGX is based on a modified LLVM compiler satisfying
the following three important design requirements. One is that
T-SGX automatically transforms a normal enclave program
into a secured version, all of whose code and data pages are
wrapped with TSX. Another requirment is that T-SGX isolates
the specific page for the fallback handler and other transaction
control code, called springboard, from the original program’s
code and data pages to ensure that exceptions including
page faults and timer interrupts can only be triggered on the
springboard. The OS can still identify whether an exception has
occurred at the springboard, but this does not reveal any mean-
ingful information. Lastly, T-SGX ensures that no unexpected
transaction aborts caused by benign errors (e.g., transaction
buffer overflow and timer interrupts), by carefully splitting a
target enclave program into a number of small execution blocks
satisfying the TSX cache constraints. A conservative splitting
strategy (e.g., secure individual basic blocks) significantly slows
down T-SGX (§VIII). We develop compiler-level optimization
techniques such as loop optimizations and cache usage analysis
that maximize the size of execution blocks (§VI). Our evaluation
results show the effectiveness of T-SGX in terms of security,
compatibility, and performance. We applied T-SGX to three
previous controlled-channel attack targets including libjpeg,
Hunspell, and FreeType and demonstrated that the attack can
no longer work. In addition, applying T-SGX to these programs
require no source code modifications. We also checked the
overall overhead of the programs. On average, the execution
time increased by 40% and the memory consumption increased
by 30%. Moreoever, we applied T-SGX to a popular benchmark
suite, nbench, and confirmed that the performance overhead of
T-SGX was 50% on average.
•
In summary, this paper makes the following contributions:
•
New security mechanism. We develop a new security
mechanism, T-SGX, that protects enclave programs
from a serious threat: the controlled-channel attack.
At compilation time, T-SGX transforms an enclave
program into a secure version without requiring anno-
tations or other manual developer efforts, and, most
important, it does not require hardware modifications.
Novel usage of TSX. To the best of our knowledge,
T-SGX is the first attempt
to use TSX to detect
suspicious exceptions. Mimosa [18] was the first
application of TSX to establish a confidential memory
region, but it focuses on detecting read-write or write-
write conflicts, which is the original use case of TSX.
In contrast, we use TSX to isolate exceptions such as
page faults and redirect them to a user space handler
under our control.
Springboard and program analysis. The properties
of TSX (e.g., cache- and interrupt-sensitivity) limit
developers apply TSX to only a small protion of a
program. Our springboard design and program analysis
make a breakthrough: we can run any program in
transactions without compatibility problems.
Evaluation and analysis. We evaluated the security
and performance of T-SGX by applying it to two repre-
sentive groups of programs: three previous controlled-
channel attack targets including libjpeg, Hunspell, and
FreeType and a benchmark suite, nbench. The results
show a 40% and a 50% performance degradation on
the first and the second group, respectively. T-SGX is
also easy to use; that is, it transforms all the programs
with no source code modification.
•
•
The remainder of this paper is organized as follows. §II
explains details about Intel SGX and TSX. §III describes
controlled-channel attacks in depth. §IV provides the ideal
system model. §V explains the design of T-SGX. §VI depicts
how we implemented T-SGX. In §VII we conduct a security
analysis of T-SGX. §VIII shows our evaluation results. §IX
considers limitations of T-SGX. §X discusses related work. §XI
concludes this paper.
2
II. HARDWARE PRIMITIVES AND MOTIVATION
In this section, we explain two hardware primitives sup-
ported by Intel CPUs: SGX for trusted computing and TSX
for transactional memory. We also study how they handle
CPU exceptions, since exceptions including page faults are the
controlled channels a malicious OS can use to attack enclave
programs [65].
A. Intel SGX
Intel Software Guard Extensions (SGX) is a set of exten-
sions to the x86 instruction set architecture that aims to enable
a hardware-based TEE, such that the Trusted Computing Base
(TCB) consists of only the code and data that reside in a secure
container (enclave) and the underlying hardware components.
An SGX-enabled processor enforces new memory access
semantics over an enclave such that the code and data within
an enclave are inaccessible to all external software, including
the operating system and the hypervisor. A dedicated physical
memory region is allocated at boot time for enclave instantiation.
To prevent known memory attacks such as memory snooping,
SGX relies on a Memory Encryption Engine (MEE) to encrypt
the enclave memory content. The enclave memory can only
be decrypted when entering the CPU package during enclave
execution. SGX provides a flexible programming model that
allows an application to instantiate an enclave as part of its
address space via the SGX instruction set. The enclave code
and data are measured during the enclave initialization process.
This measurement forms an enclave’s identity, which a remote
party can verify by means of remote attestation [23, 30]. In
addition to the hardware-based protection mechanisms, SGX
relies on the operating system to help with enclave initialization,
exception handling, and resource management.
B. Intel TSX
In this section, we explain Intel Transactional Synchro-
nization Extensions (TSX), which is Intel’s implementation
of hardware transactional memory (HTM) [20]. HTM was
originally proposed to reduce the overhead of acquiring locks
for mutual exclusion and to simplify concurrent programming.
With HTM, a thread can transactionally execute in a critical
section without any explicit software-based lock such as a
spinlock or mutex. If a transaction completes without conflict,
all of its read and write attempts are committed to memory.
Otherwise, all of intermediate read and write attempts are
rolled back (never exposed to the real memory) and a fallback
(or abort) handler that was registered at the beginning of the
transaction is invoked. The fallback handler decides whether to
retry the transaction. Intel TSX supports two different interfaces,
namely, hardware lock elision (HLE) and restricted transactional
memory (RTM). For the discussion of this paper, we focus
only on RTM.
Intel TSX provides four instructions: XBEGIN, XEND, XABORT,
and XTEST. A thread can initiate a transactional execution
using XBEGIN and terminate it using XEND. It can use XABORT to
terminate a transaction and XTEST to test whether it is currently
executing in a transaction.
Figure 1 shows a code snippet that uses TSX. It first executes
_xbegin() (i.e., XBEGIN) to begin a transaction. If it succeeds,
_xbegin() returns _XBEGIN_STARTED and continues to execute
1 unsigned status;
2
3 // begin a transaction
4 if ((status = _xbegin()) == _XBEGIN_STARTED) {
5
6
7
8
9 } else {
10
11 }
// execute a transaction
[code]
// atomic commit
_xend();
// abort
Fig. 1: A basic example of Intel TSX. _xbegin() initiates a transaction
region to execute [code] and _xend() closes the region. An exception
at [code] makes the control flow go to the else block.
the code inside the if block (line 6). If there is no conflict,
the program will eventually execute _xend() (i.e., XEND) to
atomically commit all the intermediate results. However, if
there is a conflict or an exception (§II-C), the transaction is
rolled back and the program executes the else block (line 10)
to handle the error.
Technical details. Understanding the technical details of the
TSX implementation [34] is important because such details
can explain why TSX exhibits the described behavior (§II-C2).
During a transaction, HTM needs a buffer to store intermediate
data read or written, so it can commit them to memory at the end
of the successful transaction. Instead of introducing a separate
buffer, TSX uses the L1 cache as a buffer. This choice was made
not only to avoid extra storage requirements, but also to simplify
the implementation of TSX; it piggybacks on the existing cache
coherence protocol to detect memory read or write conflicts
without introducing complex new logic. The cache coherence
protocol maintains data consistency between the caches of
different cores such that TSX can detect data conflicts at the
granularity of cache lines and roll back a transaction when a
conflict occurs.
C. Exceptions inside SGX and TSX
During execution, a CPU can encounter various exceptions,
such as page faults, general protection faults, and interrupts.
When an exception occurs, the CPU calls the corresponding
exception handler managed by the OS to resolve the problem
or gracefully terminate execution. The CPU handles exceptions
that occur during enclave and transactional execution differently
from those that occur during normal execution.
1) SGX: Asynchronous Enclave Exit (AEX): Although SGX
assumes the underlying OS could be malicious, it relies on the
OS for exception handling. SGX takes special provisions to
minimize information leakage during exception handling. Any
exception or interrupt that arrives during enclave execution
causes an Asynchronous Enclave Exit (AEX). Figure 2 depicts
how the AEX is conducted. The processor first stores the
enclave’s register context and the exit reason (exception code)
in a region of enclave memory called the state save area (SSA)
and loads synthetic values into the registers. In the case of
page faults, the processor provides the OS only with the base
address of the faulting page and not with the exact address.
It then transfers control to the regular OS kernel exception
handler. Eventually, the exception handler will return control to
a user mode trampoline function outside the enclave, which can
call the ERESUME instruction. ERESUME will restore the enclave’s
saved register context and resume enclave execution.
3
A. Threat Model
We explain the threat model of the controlled-channel attack.
Note that our system, T-SGX, assumes the same threat model.
First, the attack assumes that an OS can manage (e.g., map
and unmap) enclave memory pages although it cannot see their
contents. Whenever an enclave program attempts to access an
unmapped page, the OS will receive a page fault to handle
it; then the handler either remaps the page and resumes the
program or generates an access violation error. However, this
attack does not assume that the OS knows the exact offset of
a page fault because TEEs can hide this information from the
OS.
Second, the attack assumes that an attacker knows the
detailed behavior of a target enclave program, especially its