# Title: Semantically Rich Application-Centric Security in Android

## Authors:
- Machigar Ongtang
- Stephen E. McLaughlin
- William Enck
- Patrick D. McDaniel

## Conference:
2009 Annual Computer Security Applications Conference

## Abstract
Smartphones have become ubiquitous, but the security requirements of these systems and their applications are still being understood. Consequently, the security infrastructure in current smartphone operating systems is often underdeveloped. This paper addresses the security needs of smartphone applications by enhancing the Android operating system with a framework called Secure Application INTeraction (Saint). Saint governs permission assignment and runtime use as dictated by application provider policies. We provide an in-depth description of the semantics of application policies, the architecture of Saint, and explore areas for extension, optimization, and improvement. Through concrete examples, we demonstrate that Saint provides necessary utilities for applications to assert and control security decisions on the platform.

**Keywords:** mobile phone security, Android, application interactions, mediation

## 1. Introduction
Smartphones have revolutionized mobile computing, supporting new markets in communication, entertainment, and commerce. The widespread availability and affordability of hardware and software, such as Apple’s App Store, Android Market, and BlackBerry App World, have made smartphones pervasive.

Mobile applications are shifting from standalone designs to a collaborative (service) model. In this environment, applications expose internal features to other applications and use services provided by others. This "use and extend" development culture has led to an explosion of innovative applications, particularly in the Android community.

However, the Android security model is "system-centric," with applications statically identifying permissions at installation time. Developers have limited control over who receives these permissions or how they are used. Permissions are often vague suggestions, and the operating system and users must make decisions without sufficient context.

Consider a hypothetical PayPal service on Android. Applications like browsers, email clients, and music players use the PayPal service to purchase goods. Only PayPal (the corporation) can determine which applications are legitimate. Unfortunately, Android does not provide means to enforce such policies. While Android protects the phone from malicious applications, it offers limited infrastructure for applications to protect themselves.

Based on extensive development experience, we identify three essential application policies missing in the Android security framework:

1. **Permission Assignment Policy**: Applications have limited ability to control who receives permissions for accessing their interfaces.
2. **Interface Exposure Policy**: Android provides only rudimentary facilities for controlling how interfaces are used by other applications.
3. **Interface Use Policy**: Applications have limited means of selecting, at runtime, which application's interfaces they use.

This paper introduces the Secure Application INTeraction (Saint) framework, which extends the Android security architecture to address these key application requirements. In the Saint-enhanced infrastructure, applications provide installation-time policies that regulate permission assignment. At runtime, access and communication between applications are subject to policies asserted by both the caller and callee applications. These policies go beyond static permission checks by restricting access based on runtime state, such as location, time, and network configuration.

## 2. Smartphone Application Security
Figure 1 illustrates the fictitious PersonalShopper smartphone shopping application. PersonalShopper tracks items a user wishes to buy and interacts with payment applications to facilitate purchases. Users can add items through the phone’s UI, creating a vendor-independent shopping cart. Items can be found either by searching online vendors or through a location-based search application.

PersonalShopper works with checkout applications like SecurePayer and TrustCheckout to improve shopping efficiency and protect customer privacy. The application and its services interact with password vaults for authentication and record transactions in a personal ledger application.

Several security requirements for this application include:

1. **Trusted Payment Services**: PersonalShopper should only use trusted payment services.
2. **Network and Location Restrictions**: PersonalShopper may restrict its use to trusted networks and safe conditions.
3. **Software Version Requirements**: PersonalShopper may require specific versions of service software.
4. **Data Privacy**: PersonalShopper may ensure transaction information is not leaked by the phone’s ledger application.
5. **Location Privacy**: The location-based search application may provide location information only if PersonalShopper holds the necessary permissions.

None of these policies are supported by the current Android security system. While some may be partially emulated using complex application code, code signing, and permission structures, they are outside the scope of Android’s security policy. As a result, developers must create custom security features, which is ad hoc, error-prone, and inexact.

What is needed is a more semantically rich policy infrastructure for Android. We begin our investigation by outlining the Android system and security mechanisms. Section IV examines the spectrum of policies needed to fulfill applications' security requirements, highlighting those that cannot be satisfied by the current Android. We then introduce the goals, design, and implementation of the Saint system.

## 3. Android Overview
Android is a mobile phone platform developed by the Google-led Open Handset Alliance (OHA). The platform quickly gained popularity due to its open-source nature and global adoption. While based on Linux, the middleware presented to developers hides traditional OS abstractions, focusing on applications.

Android applications are primarily written in Java and compiled into a custom bytecode (DEX). Each application runs in a separate Dalvik virtual machine instance with a unique user identity, providing isolation and minimizing the effects of a compromise.

All inter-application communication passes through the middleware's binder IPC mechanism. Applications are composed of components, which interact using Intent messages. There are four types of components: Activity, Service, Broadcast Receiver, and Content Provider. Figure 2 depicts common IPC between component types.

Android’s application-level security framework is based on permissions, but it lacks the flexibility and richness needed for modern, collaborative applications. The Saint framework aims to address these limitations by providing a more comprehensive and dynamic security model.