option, instead of doing password-based authentication, it performs EPAK authen-
tication. The epakt/REALM service credential, which holds an epakticket and session
key Kc,as, is read from the credential cache. If it does not exist or is expired, kinit
aborts with an error. An epakauth is created and encrypted with Kc,as, and is sent
along with the epakticket in a padata of type PA-EPAK-AS-REQ to the AS. If
the AS reply includes a PA-EPAK-AS-REP indicating success, kinit uses Kc,as to
decrypt the encrypted part of the AS reply.
kdc The kdc program, which performs the function of the AS, supports EPAK by
recognizing and responding appropriately to PA-EPAK-AS-REQ padata. Kepak is
used to decrypt the epakticket, and the rules speciﬁed in Section 3.3 are enforced,
including veriﬁcation of epakauth, principal name, and ticket times. The AS reply
includes the TGT and session key Kc,tgs like normal, but Kc,tgs is encrypted with
35
CHAPTER 5. EPAK IMPLEMENTATION
Figure 5.2:
SAWK Implementation. Pre-authentication is performed (steps 1-
9) by running sawkinit. The SAWK Client (sawkc) and SAWK Server (sawks)
communicate securely over TLS. sawkinit invokes genpatrequest to create an
EPAK-REQ (steps 1-2) that is passed to the sawkc (step 3). The EPAK-REQ
is then transmitted to the sawks (step 4) and is used by genpatreply to create
an EPAK-REP (step 5-6). The EPAK-REP is encrypted with AuthT okencomplete
and returned to the sawkc along with AuthT okenuser (step 7a). AuthT okenemail is
emailed to the user and retrieved by the fetchtoken program (step 7b), invoked by
sawkc. AuthT okenemail is combined with AuthT okenuser to to decrypt the EPAK-
REP, which is then returned to sawkinit (step 8) and stored in the credential cache
(step 9). AS authentication is then performed (steps 10-12).
36
kdckinit --epaksawkssawkcgenpatrequestsavepatgenpatreply(Credential Cache)3 4 5 6 8 9 10 7a Email Providerfetchtokensawkinit1 2 11 12 7b 7b 9 5.1. SAWK IMPLEMENTATION
employeeB@MYCOMPANY = ^.*@companyB.com$
employeeC@MYCOMPANY = ^.*@companyC.com$
partner@MYCOMPANY = ^.*@company(B|C).com$
guest@MYCOMPANY
= ^.*@.*$
Table 5.1: Example SAWK-S ACL. Regular expressions map email addresses to
principals. For example, PI:EMAIL can authenticate as either employ-
eeB, partner, or guest.
Kc,as instead of a Kc. A PA-EPAK-AS-REP is also included in the reply.
A new option, epak ticket lifetime, can be speciﬁed in the krb5.conf to indi-
cate the maximum lifetime of an EPAK ticket. If not speciﬁed, this value defaults
to eight hours.
5.1 SAWK Implementation
The SAWK implementation is shown in Figure 5.2.
sawk This small script runs sawkinit followed by kinit --epak, to perform pre-
authentication and AS authentication in one command.
sawkinit The sawkinit program is a small script that launches genpatrequest,
sawkc, and savepat. The ticket times, if speciﬁed, are forwarded to genpatrequest,
and the credential cache name is forwarded to savepat.
A conﬁguration ﬁle, sawkinit.conf, speciﬁes the location of the three programs
mentioned above. It also speciﬁes the hostname and port of the machine running
the SAWK-S.
Usage: sawkinit [-l time] [-s time] [-c ccache]
[principal]
37
CHAPTER 5. EPAK IMPLEMENTATION
sawkc and sawks These two programs, implemented in Java, communicate to
perform one-round, group-based SAW authentication. The sawkc and sawks com-
municate over TLS to protect the AuthT okenuser returned in step 7a.
The email address, speciﬁed in sawkc.properties, is sent along with the EPAK-
REQ in step 4.
In step 7a, the sawks responds with three items: the AuthT okenuser, an EPAK-
REP encrypted with AuthT okencomplete, and a transaction ID that helps identify
the email of step 7b. To prevent leaking valid/invalid addresses, an authentication
failure is handled by returning a random value in place of the EPAK-REP.
Valid addresses and their mappings to principal names are speciﬁed in the
sawks.acl ﬁle, which uses regular expressions to group email addresses. An ex-
ample ACL is shown in Table 5.1.
The helper program fetchtoken in step 7b retrieves the AuthT okenemail, which
is XOR-ed with AuthT okenuser to produce AuthT okencomplete and decrypt the EPAK-
REP.
Usage: sawkc requestfile replyfile [host] [port]
fetchtoken This helper program, written in C, polls the email provider to obtain
the AuthT okenemail. The email to retrieve is identiﬁed by a transaction ID and the
SAWK-S hostname (to help prevent phishing attacks).
The email subject line contains the transaction ID, hostname, and AuthT okenemail
to facilitate quick retrieval. The AuthT okenemail is saved to a speciﬁed token ﬁle to
be read by sawkc.
Account properties for email retrieval are speciﬁed in a conﬁguration ﬁle named
fetchtoken.conf. These properties include username, email protocol, mail server,
38
and timeout. Valid email protocols include POP3 and IMAP, optionally over TLS.
5.2. TNK IMPLEMENTATION
Usage: fetchtoken trans id sawks tokfile
5.2 TNK Implementation
The TNK implementation is shown in Figure 5.3.
tnk This script runs tnkinit followed by kinit --epak, to perform both pre-
authentication and AS authentication in one command.
tnkinit The tnkinit program is a small script that launches genpatrequest,
tnkc, and savepat. The ticket times, if speciﬁed, are forwarded to genpatrequest,
and the credential cache name is forwarded to savepat.
A conﬁguration ﬁle, tnkinit.conf, speciﬁes the location of the three programs
mentioned above. It also speciﬁes the hostname and port of the machine running
the TNK-S.
Usage: tnkinit [-l time] [-s time] [-c ccache]
[principal]
tnkc and tnks These two Java programs perform trust negotiation to obtain the
resource “Authenticated as principal X”. Policy ﬁles dictate what credentials must
be released to obtain this resource. The tnkc and tnks communicate over TLS to
protect potentially sensitive credentials.
The EPAK-REQ is sent in step 4, trust negotiation is performed in step 7, and
the EPAK-REP is returned in step 8 if trust negotiation succeeds.
Usage: tnkc requestfile replyfile [host] [port]
39
CHAPTER 5. EPAK IMPLEMENTATION
Figure 5.3: TNK Implementation. Pre-authentication is performed (steps 1-10) by
running tnkinit. The TNK Client (tnkc) and TNK Server (tnkc) communicate
securely over TLS. tnkinit invokes genpatrequest to create an EPAK-REQ (steps
1-2) that is passed to the tnkc (step 3). The EPAK-REQ is then transmitted to
the tnks (step 4) and is used by genpatreqply to create an EPAK-REP (step 5-
6). Trust negotiation is performed between the tnkc and tnks (step 7). If trust
negotiation succeeds, the EPAK-REP is transmitted (step 8) to the tnkc and is
returned to sawkinit (step 9) and stored in the credential cache (step 10). AS
authentication is then performed (steps 11-13).
40
kdckinit --epaktnkstnkcgenpatrequestsavepatgenpatreply(Credential Cache)3 4 5 6 8 9 11 tnkinit1 2 12 13 10 7 10 5.3. PRACTICE AND EXPERIENCE
5.3 Practice and Experience
Even with documentation for the Heimdal API, the barrier to entry for modifying
Heimdal is high, requiring a detailed understanding of its data structures and the
functions that operate on them. A proﬁciency in C and in the automake build
system is also required.
The stand-alone programs genpatrequest, genpatreply, and savepat help
EPAK authentication systems work with EPAK-REQ and EPAK-REP messages
without the need to link against the Heimdal krb5 library. To alleviate the diﬃ-
culty of interprocess communication, these programs read and write to ﬁles, with
the ﬁlenames passed as command-line parameters.
Working with ASN.1 presents a small challenge. The EPAK-REQ and EPAK-
REP messages are, for the most part, handled by the utility programs mentioned
above, which use the Heimdal ASN.1 implementation. However, both the SAWK-S
and TNK-S need to parse the principal name out of the EPAK-REQ. This is solved
by using an ASN.1 Java library, but a more favorable solution might be to create a
utility program to extract the name.
While testing the performance of TNK authentication, an anomaly was dis-
covered. The execution time for trust negotiation varied wildly from a few sec-
onds to almost a minute. The culprit was a random-number generator that often
blocked when more entropy was required. To solve this, Java was reconﬁgured to
use /dev/urandom instead of /dev/random. Even though /dev/random provides
more assurance of truly random numbers, /dev/urandom still provides a suﬃcient
amount of unpredictability.
41
CHAPTER 5. EPAK IMPLEMENTATION
42
Chapter 6 — Threat Analysis
Kerberos has many important security properties that make it resistant to attacks
(see Section 2.2). In general, it provides authenticity for clients and servers, integrity
of message data, and conﬁdentiality of secrets, e.g., session keys. The last phase of
Kerberos can be used to set up a shared secret between the client and application
server to provide conﬁdentiality for subsequent communication.
Although Kerberos is not impervious to all forms of attacks, time has proven it
to be eﬀective at ensuring a high level of security.
EPAK aims to retain the conﬁdentiality, integrity, and authenticity properties of
Kerberos by extending Kerberos in a natural way. By extending phase 1 with the
standard padata mechanism, and leaving phase 2 and 3 unchanged, we reduce the
opportunity for new ﬂaws.
Phase 0 (pre-authentication) reuses the well-established Kerberos concept of
sending a request to obtain a ticket and session key, but it also introduces a new
attack vector that must be examined for each particular authentication scheme. For
example, SAWK and TNK inherit the security risks of SAW and trust negotiation,
respectively. In addition, SAWK and TNK rely on the security of TLS. The de-
sign and use of the EPAK-REQ and EPAK-REP messages in phase 0 must also be
analyzed.
The epakticket and epakauth are always communicated in encrypted form. The
epakticket, just like all Kerberos tickets, is opaque to the client. It is encrypted
with Kepak, a shared secret between the PAS and the AS. The epakauth, created by
the client, is protected with the session key Kc,as so that it can only be viewed by
the AS. It is short-lived and assures that the client presenting the ticket is the one
43
CHAPTER 6. THREAT ANALYSIS
who was issued the ticket.
The epakticket cannot be successfully modiﬁed by a client to authenticate as a
diﬀerent principal. Like all Kerberos tickets, modifying the epakticket results in a
corrupt ticket which, if submitted, will be rejected by the server due to data integrity
failure (invalid HMAC).
A client should not be allowed to obtain a ticket with an arbitrary lifetime. The
PAS restricts the ticket lifetime by using the genpatreply program, which enforces
the rules speciﬁed in Section 3.3.
The PAS authenticates valid users only. To do so, it only returns an EPAK-
REP after the client has proven its authenticity, or it returns the EPAK-REP in
an encrypted form such that the client must prove its authenticity to obtain the
decryption key.
The PAS is responsible for enforcing the security of the EPAK-REP, to prevent
replay and to prevent an eavesdropper from gaining access. Only the session key
Kc,as of the EPAK-REP needs to be encrypted, but in our implementations of SAWK
and TNK, the entire EPAK-REP is encrypted within TLS.
When TLS is used to communicate between the PAC and PAS, it provides server
authentication and protects against attacks like DNS spooﬁng. With TNK, addi-
tional server authentication may also be performed as part of the trust negotiation.
If the EPAK-REQ is not communicated securely, an eavesdropper can replay
it. However, an attacker must still prove his authenticity before he can obtain an
EPAK-REP from the PAS.
Access to a client’s credential cache enables impersonation. Kerberos tickets
can be used multiple times and therefore require persistent storage. Both system
administrators and those with physical access to a client’s machine can impersonate
44
a user during the lifetime of a valid ticket. An epakticket is non-renewable, so it
presents less risk than other Kerberos tickets. This risk is also mitigated by Kerberos
implementations that store credentials in memory instead of on disk.
The padata of phase 1 (PA-EPAK-AS-REQ) may be replayed by an attacker, but
is ineﬀective for two reasons. First, the epakauth has a short-lived timestamp that
provides a small window in which a replay may be performed. Second, even if the
replay is dispatched within the limited time frame, the AS reply is useless to an at-
tacker, who does not have the session key Kc,as disclosed during pre-authentication.
Kc,as is needed to decrypt the session key Kc,tgs in the AS reply, which is required
for phase 2.
An epakticket for one principal cannot be used to authenticate to a diﬀerent
principal; an expired epakticket will also be rejected. The AS only accepts valid
tickets meeting the conditions delineated in Section 3.3.
45
CHAPTER 6. THREAT ANALYSIS
46
Chapter 7 — Related Work
Public key based Kerberos for Distributed Authentication (PKDA [25]) relieves
the load on a Kerberos KDC server by oﬀ-loading the authentication process to
the application servers. Clients do not make contact with the KDC at all in this
protocol. In eﬀect, it is meant as a replacement for SSL, but the authors themselves
admit that SSL is a ”formidable” solution.
PKINIT [33] is a Kerberos extension that moves Kerberos beyond password-
based authentication to public-key cryptography, which provides greater scalability.
EPAK builds on the ideas of PKINIT and other public-key extensions to enhance
Kerberos in similar ways.
Role-based Access Control (RBAC) [24] is an approach to mapping user identities
to roles within an organization. Users authenticate to known subjects, and then
subjects are assigned a role(s). All access control policies are speciﬁed in terms of
roles. This indirection provides scalability. As users enter and leave the system, the
role assignment rules change, but all access control policies remain the same. EPAK
leverages this same idea in the way it maps users to Kerberos principals. In its pure
form, RBAC is a closed system. The ideas presented in this paper can be applied
to RBAC systems to make them open.
GSSAPI [18] is a generic API for client/server authentication. Since most Ker-
beros distributions include a GSSAPI implementation, applications that support
GSSAPI also support Kerberos. Extending Kerberos with EPAK allows these ap-
plications to support many other authentication systems. Alternatively, an authen-
tication system could just implement the GSSAPI interface, but that would not
aﬀord it the beneﬁts of Kerberos (like SSO), and it could not be used with Kerber-
47
CHAPTER 7. RELATED WORK
ized services that do not support GSSAPI.
48
Chapter 8 — Conclusions and Future Work
EPAK is an attractive framework that facilitates the incorporation of diverse au-
thentication schemes into Kerberos. EPAK clearly separates pre-authentication and
AS authentication to enable heterogeneous systems to be loosely coupled with Ker-
beros. Two concrete examples, SAWK and TNK, demonstrate the extensibility of
EPAK.
SAWK and TNK provide grouping techniques that allow Kerberos to scale to
a large number of people. Services can be provided to outsiders without manag-
ing individual user accounts. Large Kerberos deployments (e.g., Microsoft Active
Directory) could adopt EPAK to empower businesses with this rich environment.
Newer, lesser-known authentication systems can be integrated into Kerberos to
increase their usability and performance. New protocols can be adopted without
changing Kerberos-based security frameworks. Slow-running authentication schemes
can leverage Kerberos’ SSO capability.
A timing analysis of SAWK and TNK, and a comparison to other work on session
resumption is left as future work. In addition, more authentication protocols can
be incorporated into Kerberos using EPAK to identify and reaﬃrm its extensibility
and to guide future directions.
Standardization of EPAK is a worthy goal. The types PA-EPAK-AS-REQ and
PA-EPAK-AS-REP need to be assigned reserved values so they can be used without
risk of conﬂict. The submission of an RFC for EPAK is a natural next step for it
to become an IETF standard.
49
CHAPTER 8. CONCLUSIONS AND FUTURE WORK
50
References
[1] Elisa Bertino, Elena Ferrari, and Anna Cinzia Squicciarini. Trust-X: A Peer-
to-Peer Framework for Trust Establishment. IEEE Transactions on Knowledge
and Data Engineering, 2004.
[2] F. Butler, I. Cervesato, A.D. Jaggard, and A. Scedrov. A Formal Analysis
of Some Properties of Kerberos 5 using MSR.
In IEEE Computer Security
Foundations Workshop, Jun 2002.
[3] Giovanni Di Crescenzo and Olga Kornievskaia. Eﬃcient Kerberized Multicast
in a Practical Distributed Setting. Lecture Notes in Computer Science, 2001.
[4] Don Davis. Kerberos Plus RSA for World Wide Web Security. In Proceedings
of the First USENIX Workshop on Electronic Commerce, Jul 1995.
[5] T. Dierks and C. Allen. RFC 2246: The TLS Protocol Version 1.0, Jan 1999.
[6] I. Downnard. Public-Key Cryptography Extensions into Kerberos. Potentials,
IEEE, 21, Dec 2002.
[7] Armando Fox and Steven D. Gribble. Security on the Move: Indirect Authen-
tication using Kerberos. In Mobile Computing and Networking, 1996.
[8] Ravi Ganesan. Yaksha: Augmenting Kerberos with Public Key Cryptography.