data1 as the associated data. She uploads data1 along with the provider authentication blocks to the routing provider
and the routing provider distributes the message to the other mirror providers.
Each provider checks that Alice is allowed to make the desired group modiﬁcation and sends data0, cai to all
i ∈ (P ∪ P (cid:48)) \ {Alice} and sends data0 to Alice. Each participant veriﬁes the messages is authentic from Alice
and updates their participant list after they have received the message from every provider. If the message does not
verify the session is terminated.
This message authenticates the group change to all old and new participants which leaks any new participants
to participants that have been removed. To avoid this leakage it is up to the implementation to send a separate
group update message removing users before sending a message adding the new users.
K. Two Party Channels
All communication between the clients and providers and between providers is performed over a two-party
channel that supplies all of the security properties discussed in Section II. The mirror providers act as clients
when communicating with the routing provider. This is a synchronous channel that is setup by ﬁrst performing
an anonymous Difﬁe-Hellman key agreement followed by a NAXOS key agreement to provide authentication to
the channel. Then all messages are secured by using a NAXOS key agreement with keys being ratcheted on every
message. Algorithm 1 details the algorithm for setting up the channel from the initiator. Line 1 generates the DH
s
p, eskc[1] ← {0, 1}l
Algorithm 1 Client To Provider Channel Setup
1: function C2SCHANNELSETUP(C, S, lpks, lskc)
eskc[0] ←R Z∗
2:
epkc[0] ← geskc[0], epkc[1] ← gH(eskc[1],lskc)
3:
k0 ← KDF3(lpkeskc[0]
)
4:
c0 ← Enck0(C, epkc[1])
5:
SEND(S, epkc[0], c0)
6:
epks[0], c1 ← RECV(S)
7:
km1 ← lpkH(eskc[1],lskc)
8:
km2 ← epks[0]lskc
9:
km3 ← epks[0]H(eskc[1],lskc)
10:
k1 ← KDF1(km1, km2, km3, S, C)
11:
t, epks[1] ← Deck1(c1)
12:
p, epkc[2] ← geskc[2]
eskc[2] ←R Z∗
13:
km4 ← epks[1]lskc
14:
km5 ← lpkH(eskc[1],lskc)
15:
km6 ← epks[1]H(eskc[1],lskc)
16:
k1 ← KDF1(km4, km5, km6, C, S)
17:
c2 = Enck2(t, epkc[2])
18:
SEND(S, c2)
19:
return eskc, epks
20:
s
s
keys for the anonymous DH key agreement and line 2 generates the ephemeral NAXOS keys. Lines 5-6 encrypts
the clients identity and NAXOS ephemeral key and send it to the provider. Line 7 receives the provider’s response
and line 8-9 compute the shared NAXOS key and decrypt the provider’s next ephemeral public key and a challenge.
Line 10 generates the clients next ephemeral keys. Finally, Lines 11-13 ratchets the channel keys and sends the
challenge back.
Algorithm 2 details setting up the channel from the provider. Lines 2-4 compute the anonymous DH shared
secret using the provider’s long-term key and decrypt the clients identity and NAXOS ephemeral public key. Line
5 looks up the long-term public key of the client and line 6-8 compute the NAXOS shared key. Lines 9-11 encrypt
the challenge and the providers next ephemeral DH key and send it to the client. Lines 12-18 decrypt the clients
response and check that the client’s response matches the challenge.
Algorithm 3 details how a message is sent using the two-party channel. Lines 2-3 ﬁnd the id of the senders
last sent ephemeral DH key and the receivers last seen ephemeral public key. Line 4 computes the shared secret
from the two keys and line 5 generates the senders next ephemeral DH keys. Line 6 encrypts the message and the
10
p , epks[1] ← gesks[1]
Algorithm 2 Provider To Client Channel Setup
1: function S2CCHANNELSETUP(S, C, lsks)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
epkc[0], c0 ← RECV(C)
k0 ← KDF3(epkc[0]lsks)
C, epkc[1] ← Deck0 (c0)
lpkc ←LOOKUPUSER(C)
esks[0] ← 0, 1l, epks[0] ← gH(esks[0],lsks)
esks[1] ← Z∗
km1 ← epkc[1]lsks
km2 ← lpkH(eskc[0],lsks)
km3 ← epkc[1]H(esks[0],lsks)
k1 ← KDF1(km1, km2, km3, S, C)
ts ←R {0, 1}l
c1 ← Enck1(ts, epks[1])
SEND(C, epks[0], c1)
c2 ← RECV(C)
km4 ← lpkH(esks[1],lsks)
km5 ← epkc[1]lsks
km6 ← epkc[1]H(esks[1],lsks)
k3 ← KDF1(km4, km5, km6, C, S)
tc, epkc[2] ← Deck2 (c1)
if ts = tc then
return (C, esks, epkc)
return ⊥
else
c
c
Algorithm 3 Channel Send
1: function SECURESEND(S, R, m, lsks, esks, lpkr, epkr)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
ns ← |eskr|
nr ← |epkr|
km1 ← epkr[nr − 1]lsks
km2 ← lpkr[nr − 1]H(esks[ns−1],lsks)
km3 ← epkr[nr − 1]H(esks[ns−1],lsks)
k ← KDF1(km1, km2, km3, S, R)
esks[ns] ← Z∗
p , epks[ns] ← gesks[ns]
c ← Enck(m, epks[ns])
SEND(R, nr − 1, c)
return (esks, epkr)
next ephemeral public key. Finally, line 7 sends the encrypted message along with the id of the receivers public
key used to encrypt it.
Algorithm 4 Channel Receive
1: function SECURERECV(R, S, eskr, epks)
2:
3:
4:
5:
6:
7:
8:
9:
ns ← |epks|
nr, c ←RECV(C)
km1 ← lpkH(eskr[nr−1],lskr)
km2 ← epks[ns − 1]lskr
km3 ← epks[ns − 1]H(eskr[nr−1],lskr)
k ← KDF1(km1, km2, km3, S, R)
m, epks[ns] ← Deck(c)
return (eskr, epks)
s
Algorithm 4 details receiving a message from the channel. Line 2 ﬁnds the id of the sender’s last ephemeral
public key. Line 3 reads the id of the receiver’s ephemeral key used to encrypt the message and the ciphertext. Line
11
4 computes the shared key and line 5 decrypts the message and the senders next ephemeral public key.
L. Long-term Key Veriﬁcation
The ability for Alice to verify that Bob is actually Bob is a challenging problem in messaging systems. This is
enforced in Mobile CoWPI by verifying the real Bob knows the private key associated with the long-term public key
Alice retrieves from the providers. Mobile CoWPI does not necessitate a speciﬁc mechanism for verifying these keys
and identities but some such mechanism is required to provide participant authentication. In practice key ﬁngerprints
can be compared in person or with an interactive scheme such as the Socialist Millionaire Protocol (SMP) as applied
by Alexander and Goldberg [1].
IV. SECURITY
In this section we discuss the security provided by Mobile CoWPI. We argue that it provides all of the desired
security properties discussed in Section II. We provide full proofs in Appendix A. We model our hash function (H)
and key derivation functions (KDF1, KDF2, KDF3) as random oracles. We also assume the decisional Difﬁe-
Hellman problem is hard. We utilize the fact distinguishing between a random key and a key generated with the
NAXOS key agreement is hard if the adversary does not know the long-term and ephemeral secret keys of one
of the parties in the key agreement as shown by the NAXOS authors. We assume our AEAD scheme provides
IN D$ − CP A and IN T − CT XT security. Finally, we assume all participants in a conversation have veriﬁed
their long-term keys either manually or with SMP.
A. Message Conﬁdentiality
Message conﬁdentiality is the property that only participants of a conversation can read a message. We provide
message conﬁdentiality against a powerful adversary that may corrupt any or all of the providers, may control any
user that is not a participant in the target conversation, and may reveal the long-term and ephemeral keys of any
participant on any non-target message.
To compromise the conﬁdentiality of a message:
Sid, “M SG”, A, EncKDF2(ka)(m), ca1, . . . , autha1, . . .
The adversary must be able to distinguish between EncKDF2(ka)(m) and a random string. If an adversary can
make this distinction they must be able to do one of the following:
1)
2)
3)
Compute a two-party NAXOS key without being one of the parties allowing them to decrypt one of the
ciphertext blocks c∗ and retrieve the key input ka, thus decrypting the m.
Decrypt one of the c∗ ciphertext blocks without knowing the symmetric key and learn ka, thus breaking
the IN D$ − CP A security of the AEAD scheme.
Distinguish the ciphertext EN CKDF2(ka)(m) from random without knowing ka, thus breaking the IN D$−
CP A security of the AEAD scheme.
B. Message Authentication and Integrity
Message authentication implies message integrity. Message authentication provides the property that when Bob
receives a message from Alice in session Sid, Alice must have sent that message. Mobile CoWPI provides message
authentication against a strong adversary that may control any or all of the providers and any users or sessions.
As long as Alice and Bob have not had their long-term keys and ephemeral keys of session Sid compromised, all
messages received by Bob from Alice are authentic.
For an adversary to forge a message from Alice to Bob the adversary must create a message:
Sid, “M SG”, A, EncKDF2(ka)(m), cab, . . . , autha1, . . .
If the adversary can forge the message they must be able to do one of the following:
1)
2)
Compute a two party NAXOS key without knowing Alice’s or Bob’s long-term and ephemeral keys,
allowing the adversary to create the ciphertext block cab.
Forge a valid ciphertext block cab from Alice to Bob without knowing the symmetric key, thus breaking
the IN T − CT XT security of the AEAD scheme.
12
C. Forward Secrecy
Forward secrecy is the property that past messages are conﬁdential even if future key material is revealed.
Mobile CoWPI provides forward secrecy of a message m after every user i ∈ P has processed the receipt of every
user j ∈ P acknowledging m. Forward secrecy assumes the same adversary as message conﬁdentiality.
Let P be the set of participants in session Sid and let