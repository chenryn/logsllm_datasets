network installs outbound policies for one preﬁx group for half of
the top eyeball networks and installs inbound policies proportional
to the number of top content providers. Again, the inbound policies
match on one header ﬁeld that we select at random, and outbound
policies match on destination preﬁx group plus one additional header
ﬁeld.
In the following subsections, we show that the required forward-
ing rules and compilation time scale proportionally with the total
number of policies for each participant.
6.2 Forwarding-Table Space
We ﬁrst evaluate the number of preﬁx groups to implement a partic-
ular SDX policy, given a certain number of participants and preﬁxes.
We then quantify the number of ﬂow rules that result from a given
number of preﬁx groups.
Number of preﬁx groups. We estimate the number of preﬁx groups
(and hence, VNHs) that result when the participant ASes at the SDX
apply policies to a certain number of preﬁxes. When policies involve
portions of ﬂow space other than destination IP address, the number
of preﬁx groups can be larger than the number of participants times
the number of next-hop IP addresses at the exchange, since the
resulting policies can create more forwarding equivalence classes.
Figure 6: Number of preﬁx groups as a function of the number of preﬁxes,
for different numbers of participants.
Figure 7: The number of forwarding rules as a function of the number of
preﬁx groups for different number of participants.
To study the relationship between the number of preﬁxes and
the number of preﬁx groups, we consider the approximately 300
ASes at AMS-IX which announce more than one preﬁx (about
half of all ASes at the exchange). The results are similar for other
large IXPs. Each experiment has two parameters, N and x, deﬁning
the set of ASes that participate (the top N by preﬁx count, for
N ∈ {100,200,300}) and the set of preﬁxes with SDX policies
(|px| = x ∈ [0,25000], selected at random from the default-free
routing table). In a given experiment, for AS i ∈ [1, . . . ,N], let pi
be the set of preﬁxes announced by AS i, and let p(cid:48)
i = pi ∩ px. We
then run the minimum disjoint subset algorithm over the collection
P(cid:48) = {p(cid:48)
N}, yielding the set of preﬁx groups.
1, . . . , p(cid:48)
Figure 6 shows that the number of preﬁx groups is sub-linear in
the number of preﬁxes. As the number of preﬁxes to which SDX
policies are applied increases, more preﬁxes are advertised by the
same number of participants, thereby increasing the likelihood that
the advertised preﬁxes are part of the same forwarding equivalence
class. We also note that the number of preﬁx groups is signiﬁcantly
smaller than the number of preﬁxes, and that the ratio of preﬁx
groups to preﬁxes decreases as the number of preﬁxes increases,
indicating good scaling properties.
Number of forwarding rules. Figure 7 shows how the number
of forwarding rules varies as we increase the number of preﬁx
groups, for different numbers of participants. We select the number
of preﬁx groups based on our analysis of the preﬁx groups that
might appear in a typical IXP (Figure 6). We run the experiment as
described above, selecting participant ASes according to common
050001000015000200002500030000Preﬁxes30060090012001500PreﬁxGroups300Participants200Participants100Participants2004006008001000PreﬁxGroups0600012000180002400030000FlowRules300Participants200Participants100Participants560Figure 8: Compilation time as a function of the number of preﬁx groups, for
different numbers of participants.
Figure 9: Number of additional forwarding rules.
policies at IXPs. The number of forwarding rules increases roughly
linearly with the number of preﬁx groups. Because each preﬁx
group operates on a disjoint portion of the ﬂow space, the increase
in forwarding rules is linear in the number of preﬁx groups.
6.3 Compilation Time
We measure the compilation time for two scenarios: (1) initial
compilation time, which measures the time to compile the initial set
of policies to the resulting forwarding rules; and (2) incremental
compilation time, which measures how long it takes to recompute
when changes occur.
Initial compilation time. Figure 8 shows how the time to com-
pute low-level forwarding rules from higher-level policies varies
as we increase both the number of preﬁx groups and IXP partici-
pants. The time to compute the forwarding rules is on the order of
several minutes for typical numbers of preﬁx groups and partici-
pants. The results also show that compilation time increases roughly
quadratically with the number of preﬁx groups. The compilation
time increases more quickly than linearly because, as the number of
preﬁx groups increases, the interactions between policies of pairs of
participants at the SDX also increases. The time for the SDX to com-
pute VNHs increases non-linearly as the number of participants and
preﬁx groups increases. We observed that for 1,000 preﬁx groups
and 100 participants, VNH computation took about ﬁve minutes.
As discussed in Section 4.3, the SDX controller achieves faster
compilation by memoizing the results of partial policy compilations.
Supporting caching for 300 participants at the SDX and 1,000 preﬁx
groups could require a cache of about 4.5 GB. Although this require-
ment may seem large, it is on the order of the amount of memory
required for a route server in a large operational IXP today.
Incremental compilation time. Recall that in addition to comput-
ing an initial set of forwarding table rules, the SDX controller must
recompile them whenever the best BGP route for a preﬁx changes
or when any participant updates its policy. We now evaluate the ben-
eﬁts of the optimizations that we discussed in Section 4.3 in terms
of the savings in compilation time. When new BGP updates arrive
at the controller, the controller must recompute VNH IP addresses
for the affected routes to establish new preﬁx groups.
Figure 9 shows the number of additional rules that are generated
when a “burst” of BGP updates of a certain size arrives. These
rules must reside in the forwarding table until the SDX controller
recomputes the minimum disjoint set. The ﬁgure represents a worst-
case scenario, whereby each BGP update results in a change to the
best path and, hence, an additional VNH in the table, causing a
Figure 10: Time to process a single BGP update for various participants.
number of additional forwarding rules that depends on the number
of participants with policies installed. In practice, as we discussed
in Section 4.3, not every BGP update induces changes in forwarding
table entries. When a BGP update arrives, the SDX controller installs
additional ﬂow table rules for the affected ﬂows and computes a new
optimized table in the background to ultimately coalesce these ﬂows
into the smaller, minimal forwarding tables. As shown in Figure 10,
re-computing the tables takes less than 100 milliseconds most of the
time.
7 Related Work
We brieﬂy describe related work in SDN exchange points, interdo-
main route control, and policy languages for SDNs.
SDN-based exchange points. The most closely related work is
Google’s Cardigan project [22], which shares our broad goal of using
SDN to enable innovation at IXPs. Cardigan runs a route server
based on RouteFlow [17] and uses an OpenFlow switch to enforce
security and routing policies. The Cardigan project is developing
a logical SDN-based exchange point that is physically distributed
across multiple locations. Unlike the SDX in this paper, Cardigan
does not provide a general controller for composing participant
policies, offer a framework that allows IXP participants to write
policies in a high-level language, or introduce techniques for scaling
to handle a large number of participants and policies.
Interdomain route control. Previous work on applying SDN to
interdomain routing has focused on how to use the separation of data
and control planes to improve the manageability of routing within a
single AS [8, 9]. Similarly, earlier work such as the Routing Control
Platform (RCP) developed a BGP route controller for inﬂuencing
2004006008001000PreﬁxGroups0150300450600750Time(seconds)300Participants200Participants100Participants020406080100BurstSize(BGPUpdates)06001200180024003000AdditionalRules300Participants200Participants100Participants0100200300400500600Time(milliseconds)0.20.40.60.81.0P(Time≤x)300Participants200Participants100Participants561route selection within a single AS and enabled various functions,
such as re-routing trafﬁc within an AS in the event of attack or
trafﬁc surge [3]. These systems apply SDN to help operators route
interdomain trafﬁc more efﬁciently within an AS, but they do not
provide a way for multiple ASes to independently deﬁne policies
which can then be composed into a single coherent forwarding
policy for forwarding trafﬁc between ASes. Previous work has also
proposed outsourcing end-to-end path selection to third parties with
an SDN controller [10, 11], but unlike SDX, these systems require
ASes to modify their existing routing infrastructure.
Policy languages for SDNs. SDX takes advantage of recent ad-
vances in programming languages for SDNs that allow opera-
tors to express policies at a higher level of abstraction than ﬂow
rules [6, 12, 20]. In particular, Pyretic provides both topology ab-
straction and composition operators that we take advantage of when
implementing the SDX policy compiler. It is worth pointing out,
of course, that these languages only make it possible to imple-
ment something like the SDX—as discussed in Section 5, Pyretic
is merely the language that we use to encode SDX policies, but the
controller must ﬁrst perform syntactic transformation and incorpo-
rate BGP routing information to ensure forwarding according to
AS policies that is congruent with the BGP routes that the SDX
participants advertise.
8 Conclusion
SDX can break the logjam on long-standing problems in interdomain
routing by enabling entirely new policies with ﬁne-grained control
over packet handling. The SDX supports policies that match and act
on multiple header ﬁelds, and allow ASes to have remote control
over the trafﬁc. The SDX addresses many of the challenges of
an SDN-enabled IXP. The virtual switch abstraction ensures that
ASes cannot see or control aspects of interdomain routing outside
of their purview. Policy compilation allows the SDX controller to
combine policies, resolving conﬂicts that arise between participants.
The SDX policy compilation algorithm ensures that forwarding is
consistent with BGP route advertisements; various optimizations
ensure that SDX policies can be efﬁciently compiled to ﬂow rules;
and that these rules can be updated quickly when policies or BGP
routes change. We have run experiments with the SDX in both
controlled settings and in the wide area, and we have released a
preliminary version of the SDX controller [18]. In ongoing work, we
are working with a large regional IXP to deploy OpenFlow switches
and our SDX controller for an initial deployment of interdomain
routing applications beyond BGP.
As demand grows for more ﬂexible data-plane functionality, we
believe that BGP should also evolve to support richer patterns (be-
yond destination preﬁx) and actions (beyond selecting a single next-
hop). We also envision that participant ASes might eventually write
policies not only to control how trafﬁc ﬂows between ASes, but also
to control how trafﬁc ﬂows through middleboxes (and other cloud-
hosted services) along the path between source and destination,
thereby enabling “service chaining” through middleboxes.
Acknowledgments
We thank our shepherd Walter Willinger, Hyojoon Kim, Jo˜ao Lu´ıs
Sobrinho, Jennifer Gossels, Darrell Newcomb, Michael Schapira,
and the anonymous reviewers for comments. This research was
supported by NSF awards CNS-1040705, CNS-1040838, CNS-
1162112, CNS-1261462, and CNS-1261357. We thank Internet2 for
their support and recognition with an Internet Innovation Award, the
organizations that host Transit Portal nodes, and the GENI Project
Ofﬁce for supporting our ongoing deployment efforts.
References
[1] B. Ager, N. Chatzis, A. Feldmann, N. Sarrar, S. Uhlig, and
W. Willinger. Anatomy of a large European IXP. In Proc. ACM
SIGCOMM, 2012.
[2] BIRD. http://bird.network.cz/.
[3] M. Caesar, D. Caldwell, N. Feamster, J. Rexford, A. Shaikh, and
J. van der Merwe. Design and implementation of a routing control
platform. In Proc. USENIX NSDI, 2005.
[4] Euro-IX Public Resources.
https://www.euro-ix.net/resources.
[5] ExaBGP. https://github.com/Exa-Networks/exabgp.
[6] N. Foster, A. Guha, M. Reitblatt, A. Story, M. J. Freedman, N. P.
Katta, C. Monsanto, J. Reich, J. Rexford, C. Schlesinger, A. Story, and
D. Walker. Languages for software-deﬁned networks. IEEE
Communications Magazine, 51(2):128–134, 2013.
[7] B. Heller, N. Handigol, V. Jeyakumar, B. Lantz, and N. McKeown.
Reproducible network experiments using container based emulation.
In Proc. ACM CoNEXT, December 2012.
[8] C.-Y. Hong, S. Kandula, R. Mahajan, M. Zhang, V. Gill, M. Nanduri,
and R. Wattenhofer. Achieving high utilization with software-driven
WAN. In Proc. ACM SIGCOMM, 2013.
[9] S. Jain, A. Kumar, S. Mandal, J. Ong, L. Poutievski, A. Singh,
S. Venkata, J. Wanderer, J. Zhou, M. Zhu, J. Zolla, U. H¨olzle,
S. Stuart, and A. Vahdat. B4: Experience with a globally-deployed
software deﬁned WAN. In Proc. ACM SIGCOMM, 2013.
[10] V. Kotronis, X. Dimitropoulos, and B. Ager. Outsourcing the routing
control logic: Better Internet routing based on SDN principles. In
Proc. HotNets Workshop, pages 55–60, 2012.
[11] K. Lakshminarayanan, I. Stoica, and S. Shenker. Routing as a service.
Technical Report UCB/CSD-04-1327, UC Berkeley, 2004.
[12] C. Monsanto, J. Reich, N. Foster, J. Rexford, and D. Walker.
Composing software deﬁned networks. In Proc. USENIX NSDI, 2013.
[13] Noviﬂow. http://noviflow.com/.
[14] Quagga. http://www.nongnu.org/quagga/.
[15] J. Rexford, J. Wang, Z. Xiao, and Y. Zhang. BGP routing stability of
popular destinations. In Proc. Internet Measurment Workshop, pages
197–202. ACM, 2002.
[16] RIPE Routing Information Service (RIS).
http://www.ripe.net/ris.
[17] C. E. Rothenberg, M. R. Nascimento, M. R. Salvador, C. N. A. Corrˆea,
S. Cunha de Lucena, and R. Raszuk. Revisiting routing control
platforms with the eyes and muscles of software-deﬁned networking.
In Proc. HotSDN Workshop, pages 13–18. ACM, 2012.
[18] SDX Controller.
https://github.com/sdn-ixp/sdx-platform.
[19] V. Valancius, N. Feamster, J. Rexford, and A. Nakao. Wide-area route
control for distributed services. In Proc. USENIX Annual Technical
Conference, 2010.
[20] A. Voellmy, H. Kim, and N. Feamster. Procera: A language for
high-level reactive network control. In Proc. HotSDN Workshop, 2012.
[21] R. Wang, D. Butnariu, and J. Rexford. OpenFlow-based server load
balancing gone wild. In Proc. HotICE Workshop, March 2011.
[22] S. Whyte. Project CARDIGAN An SDN Controlled Exchange Fabric.
https://www.nanog.org/meetings/nanog57/
presentations/Wednesday/wed.lightning3.whyte.
sdn.controlled.exchange.fabric.pdf, 2012.
[23] B. Zhang, V. Kambhampati, M. Lad, D. Massey, and L. Zhang.
Identifying BGP routing table transfer. In Proc. SIGCOMM MineNet
Workshop, August 2005.
562