ample, when refusing to decrypt anything but the MIME root.
Another reason is that MIME boundaries will be ignored by
higher layer parsers: For example, in Figure 8, the MIME boundary
--BOUNDARY is simply removed by the email client; but even if the
mail client would not remove the MIME boundary and the MIME
header, they would be treated like simple ASCII strings by the
HTML parser. Mitigation approaches to EFAIL-DE are manifold and
have been summarized in Subsection 2.4.
B.3 REPLY Attacks
Figure 9a shows a malicious email sent by the attacker to either the
sender, or to one of the recipients of the original encrypted email.
The body of this original email is included as the second body
part of a multipart/mixed MIME email. The attacker uses simple
ASCII art to hide the fact that there is a second part in the email, by
Figure 7: Simplified example of EFAIL-MG for CBC mode.
Required are a known plaintext (here the beginning of the
content type MIME header) and the corresponding pair of ci-
phertexts (typically the IV and the first ciphertext block C1).
From a single block of known plaintext, we can construct ar-
bitrary many blocks of chosen plaintext, separated by blocks
with pseudorandom plaintext, abusing the malleability of
CBC mode encryption: If we flip a single bit in the first ci-
phertext/IV, the corresponding bit in the plaintext is flipped.
B ATTACKS ON EMAIL ENCRYPTION
B.1 EFAIL-MG Attacks
In 2008, Poddebniak et al. [33] published a security analysis on end-
to-end email encryption in S/MIME and OpenPGP. The authors
described two attack classes: EFAIL-MG and EFAIL-DE attacks.
EFAIL-MG attacks are purely cryptographic and exploit the mal-
leability of the CBC block cipher mode in a known-plaintext set-
ting. They are well understood, and the email security community
quickly specified mitigations in the form of AEAD ciphers which
are, however, not yet implemented in email clients.
Figure 7 shows a simplified example of such an attack. The start-
ing point is one block of known plaintext, which is always present
in email encryption since both S/MIME and PGP/MIME mandate
the encryption of complete MIME elements, and the Content-type
header always occupies the first block in the ciphertext and is
known to the attacker. For Inline PGP, a similar situation occurs
because of the labels of the OpenPGP packets. Mandatory compres-
sion in OpenPGP is an issue, which was solved in [33].
Based on the malleability of CBC, this single block of known
plaintext can be transformed into arbitrary many blocks of chosen
plaintext. This chosen ciphertext is used to construct input for a
high-level language like HTML (but, for example, PDF would also be
possible), which exposes exfiltration channels when being parsed.
These chosen plaintext blocks, however, alternate with blocks
containing pseudorandom plaintext, which cannot be controlled by
the attacker. A major contribution in [33] was to show that in lan-
guages like HTML, such pseudorandom block can be “commented
out” such that they do not interrupt the parsing process.
EFAIL-MG attacks can be mitigated by using a non-malleable
cipher, such as the newly introduced AEAD ciphers that are non-
malleable since they provide integrity of ciphertext (INT-CTXT, [4]).
decryptionC o n t e n t -C1P0B1B2B3B4B5B6B7B8Content- line breaks. When Bob opens this email in his
email client, the second body part will be decrypted automatically
and is displayed outside the currently visible window. If Bob replies
to this email, the decrypted body of the received message will be
appended to his reply; thus, he sends the decrypted plaintext to
the attacker. This attack is of course less stealthy than the original
EFAIL attacks; Bob may notice a scrollbar when opening the email
or he may get a warning if he doesn’t encrypt his reply. However,
stealthiness can easily be increased, for example, by using CSS or
Unicode [1] to hide the second part. Müller et al. [31] showed that
12 of 19 PGP-capable mail clients and 11 of 21 clients supporting
S/MIME are vulnerable to variants of this attack. All affected clients
interpreted ciphertext at arbitrary positions of the MIME tree.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
From: Alice 
To: Bob 
Subject: URGENT: Time for a meeting?
Content-type: multipart/mixed; boundary="BOUNDARY"
--BOUNDARY
Content-type: text/plain
Time for a meeting today at 2 pm? It's urgent! Alice
...
--BOUNDARY
Content-type: application/pkcs7-mime; smime-type=enveloped-data
Content-Transfer-Encoding: base64
MIAGCSqGSIb3DQEHA6CAMIACAQAxggHXMIIB0wIB...
--BOUNDARY--
(a) Attacker-prepared email received by email client.
From: Bob 
To: Alice 
Subject: Re: URGENT: Time for a meeting?
Content-type: text/plain
Sorry, today I'm busy! Bob
On 01/05/19 08:27, Eve wrote:
> Time for a meeting today at 2 pm? It’s urgent! Alice
> 
> 
> ...
> 
>
> Secret plaintext
> Tomorrow 9 pm
(b) Reply from Bob to the attacker.
Figure 9: A REPLY attack from [31]: A benign-looking email
containing an encrypted part hidden in the MIME structure.
If the victim replies to this email, the victim also (unknow-
ingly) leaks the decrypted content to the attacker.
C NOVEL ATTACK VARIANTS
In this section details on the attacks described in Subsection 2.6 can
be found.
C.1 Multipart/alternative S/MIME Exploit
Thunderbird mitigates EFAIL-DE attacks by blocking decryption
of encrypted MIME leaves in multipart/mixed MIME trees. This
countermeasure also blocks REPLY attacks [31] if the encrypted
part is hidden with multipart/mixed.
From: Alice 
To: Bob 
Subject: URGENT: Time for a meeting?
Content-type: multipart/alternative; boundary="BOUNDARY"
--BOUNDARY
Content-type: text/html
Please reply to this harmless looking message
--BOUNDARY
Content-type: application/pkcs7-mime; smime-type=enveloped-data
Content-Transfer-Encoding: base64
MIAGCSqGSIb3DQEHA6CAMIACAQAxggHXMIIB0wIB...)
--BOUNDARY--
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
Figure 10: Source code of a multipart/alternative message
containing CSS styles in the attacker’s part which hide the
second part. Note that the first part must also be S/MIME en-
crypted by the attacker for HTML/CSS to be interpreted.
In Figure 10 a working exploit which bypasses these (unintended)
REPLY attack countermeasures for Thunderbird’s S/MIME imple-
mentation by wrapping the ciphertext in multipart/alternative
is documented. Screenshots are depicted in Figure 11 and Figure 12.
Figure 11: Bob receives a harmless-looking email with the
embedded invisible S/MIME ciphertext part. Note that this
specially-crafted email is not even displayed as encrypted /
confidential by Thunderbird.
In a multipart/alternative MIME structure, Thunderbird ei-
ther allows unencrypted text/plain in another leave, or the other
leave must also be encrypted and then may contain, for example,
text/html. In Figure 10 the second option is used, where the plain-
text of the first leave is shown in blue. Before transmission, this
first leave must be encrypted with the recipients public key, which
is not a problem for the attacker since email certificates are public.
C.2 Downgrading PGP/MIME to PGP/Inline
Enigmail for Thunderbird implemented a countermeasure against
EFAIL-DE which each PGP/MIME encrypted leave of a multipart
email in a separate window. This countermeasure unintendedly
also blocked some REPLY attacks from [31].
In Figure 13 a working exploit for OpenPGP in Enigmail is given,
which bypasses REPLY attack countermeasures. Corresponding
screenshots are depicted in Figure 14 and Figure 15. The second
leave (red) in the multipart/mixed MIME tree originally was of
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1663Figure 12: Bob replies to Alice, thereby unknowingly leaking
the (invisible) plaintext within the quoted reply message.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
From: Alice 
To: Bob 
Subject: URGENT: Time for a meeting?
Content-Type: multipart/mixed; boundary="BOUNDARY"
--BOUNDARY
Content-type: text/html
Please reply to this harmless looking message
--BOUNDARY
Content-Type: text/plain
-----BEGIN PGP MESSAGE-----
hQEMA+XhBIZl3+i5AQf/d45V53fvG5mSCYGD1Lnr...
-----END PGP MESSAGE-----
--BOUNDARY--
Figure 13: Email source code for a multipart/mixed message
created by the attacker. The first part uses CSS to hide the
second part, which contains a PGP/MIME message put into
the context of a PGP/Inline message part.
PGP/MIME type multipart/encrypted (which would have re-
sulted in displaying the plaintext in a separate window in Enig-
mail/Thunderbird) was changed to Inline PGP with MIME type
text/plain.
Figure 15: Bob replies to Alice, thereby leaking the plaintext.
Note that current Enigmail versions show a warning when
replying to partially encrypted emails. Furthermore, there is
a scrollbar, indicating more quoted text. However, Bob may
still reply to this message, if he’s in a hurry.
D PSEUDOCODE FOR REPLY BEHAVIOR
As an example of the evaluation results from Section 5, the following
pseudo-code shows the behaviour of Gmail Reply- and Reply-All-
actions, as we reverse-engineered after testing against a corpus of
8091 known email headers.
class Gmail:
def reply(msg):
if msg.has("mail-followup-to"):
compose(to=msg.get_all("mail-followup-to", "reply-to")
else if msg.has("reply-to"):
compose(to=msg.get_all("reply-to"))
else if msg.has("from"):
compose(to=msg.get_all("from"))
else if msg.has("resent-from"):
compose(to=msg.get_first("resent-from"))
else:
compose(to="(unknown sender)")
def reply_to_all(msg):
if msg.has("mail-followup-to"):
compose(to=msg.get_all("mail-followup-to", "reply-to"),
cc=msg.get_all("to", "apparently-to", "cc"))
else if msg.has("reply-to"):
compose(to=msg.get_all("reply-to"),
cc=msg.get_all("to", "apparently-to", "cc"))
else if msg.has("from"):
compose(to=msg.get_all("from"),
cc=msg.get_all("to", "apparently-to", "cc"))
else:
# No "Reply All"-Button displayed.
pass
Figure 14: Bob receives a benign-looking email from Alice,
including an embedded invisible PGP/Inline ciphertext part.
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1664