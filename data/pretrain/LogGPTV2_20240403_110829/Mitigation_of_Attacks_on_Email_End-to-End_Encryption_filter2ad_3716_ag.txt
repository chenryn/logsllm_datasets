### EFAIL Attacks on Email Encryption

#### B.1 EFAIL-MG Attacks
In 2008, Poddebniak et al. [33] published a security analysis of end-to-end email encryption in S/MIME and OpenPGP. The authors described two classes of attacks: EFAIL-MG and EFAIL-DE. EFAIL-MG attacks exploit the malleability of the CBC block cipher mode in a known-plaintext setting. These attacks are well understood, and the email security community has specified mitigations, such as the use of AEAD ciphers, which are not yet implemented in most email clients.

**Figure 7: Simplified Example of EFAIL-MG for CBC Mode**
- **Known Plaintext**: The starting point is one block of known plaintext, which is always present in email encryption. Both S/MIME and PGP/MIME mandate the encryption of complete MIME elements, and the Content-type header always occupies the first block in the ciphertext.
- **Malleability Exploitation**: Based on the malleability of CBC, this single block of known plaintext can be transformed into multiple blocks of chosen plaintext. This chosen ciphertext is used to construct input for high-level languages like HTML (or PDF), which exposes exfiltration channels when parsed.
- **Mitigation**: EFAIL-MG attacks can be mitigated by using non-malleable ciphers, such as AEAD ciphers, which provide integrity of ciphertext (INT-CTXT, [4]).

#### B.2 EFAIL-DE Attacks
EFAIL-DE attacks involve decrypting parts of an email that should remain encrypted. For example, when refusing to decrypt anything but the MIME root, higher-layer parsers may ignore MIME boundaries. In Figure 8, the MIME boundary `--BOUNDARY` is removed by the email client. Even if the client does not remove the MIME boundary and header, they are treated as simple ASCII strings by the HTML parser. Mitigation approaches for EFAIL-DE are diverse and have been summarized in Subsection 2.4.

#### B.3 REPLY Attacks
**Figure 9a: Malicious Email Sent by the Attacker**
- **Attack Vector**: The attacker sends a malicious email to either the sender or one of the recipients of the original encrypted email. The body of the original email is included as the second body part of a multipart/mixed MIME email.
- **Stealth Techniques**: The attacker uses simple ASCII art to hide the fact that there is a second part in the email. When Bob opens this email in his client, the second body part will be decrypted automatically and displayed outside the visible window. If Bob replies to this email, the decrypted body of the received message will be appended to his reply, thus sending the decrypted plaintext to the attacker.
- **Vulnerability**: MÃ¼ller et al. [31] showed that 12 out of 19 PGP-capable mail clients and 11 out of 21 clients supporting S/MIME are vulnerable to variants of this attack. All affected clients interpreted ciphertext at arbitrary positions in the MIME tree.

#### C. Novel Attack Variants
**C.1 Multipart/alternative S/MIME Exploit**
- **Thunderbird Countermeasure**: Thunderbird mitigates EFAIL-DE attacks by blocking decryption of encrypted MIME leaves in multipart/mixed MIME trees. This countermeasure also blocks REPLY attacks if the encrypted part is hidden with multipart/mixed.
- **Exploit Bypass**: Figure 10 shows a working exploit that bypasses these countermeasures by wrapping the ciphertext in multipart/alternative. The first part must also be S/MIME encrypted by the attacker for HTML/CSS to be interpreted.

**C.2 Downgrading PGP/MIME to PGP/Inline**
- **Enigmail Countermeasure**: Enigmail for Thunderbird implemented a countermeasure against EFAIL-DE by opening each PGP/MIME encrypted part of a multipart email in a separate window.
- **Exploit Bypass**: Figure 13 shows a working exploit for OpenPGP in Enigmail, which bypasses REPLY attack countermeasures. The second part (red) in the multipart/mixed MIME tree was originally of PGP/MIME type multipart/encrypted, but was changed to Inline PGP with MIME type text/plain.

#### D. Pseudocode for REPLY Behavior
The following pseudocode demonstrates the behavior of Gmail's Reply and Reply-All actions, as reverse-engineered from testing against a corpus of 8,091 known email headers.

```python
class Gmail:
    def reply(self, msg):
        if msg.has("mail-followup-to"):
            self.compose(to=msg.get_all("mail-followup-to", "reply-to"))
        elif msg.has("reply-to"):
            self.compose(to=msg.get_all("reply-to"))
        elif msg.has("from"):
            self.compose(to=msg.get_all("from"))
        elif msg.has("resent-from"):
            self.compose(to=msg.get_first("resent-from"))
        else:
            self.compose(to="(unknown sender)")

    def reply_to_all(self, msg):
        if msg.has("mail-followup-to"):
            self.compose(to=msg.get_all("mail-followup-to", "reply-to"), cc=msg.get_all("to", "apparently-to", "cc"))
        elif msg.has("reply-to"):
            self.compose(to=msg.get_all("reply-to"), cc=msg.get_all("to", "apparently-to", "cc"))
        elif msg.has("from"):
            self.compose(to=msg.get_all("from"), cc=msg.get_all("to", "apparently-to", "cc"))
        else:
            # No "Reply All"-Button displayed.
            pass
```

This pseudocode provides a clear understanding of how Gmail handles reply and reply-all actions, ensuring that the correct recipients are included in the response.