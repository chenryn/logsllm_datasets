### 全文检索技术与优化

#### SQL 语句示例
```sql
SELECT * 
FROM tbl 
WHERE ts @@ to_tsquery('pg & alibaba')
ORDER BY ts_rank(ts, to_tsquery('pg & alibaba'));
-- 或者使用 ts_rank_cd
-- ORDER BY ts_rank_cd(ts, to_tsquery('pg & alibaba'))
```

参考文档: [PostgreSQL 文本搜索排名](https://www.postgresql.org/docs/10/static/textsearch-controls.html#TEXTSEARCH-RANKING)

#### 词距离条件
- **按距离范围搜索**：可以通过自定义用户定义函数（UDF）来实现，利用 `RANGE` 相交操作进行判断。

#### 内置排名算法
- 支持四种权重：
  - 标题
  - 作者
  - 摘要
  - 内容

内置的排名算法提供了多种归一化选项：
- `0` (默认)：忽略文档长度
- `1`：将排名除以 `1 + log(文档长度)`
- `2`：将排名除以文档长度
- `4`：将排名除以词项之间的平均调和距离（仅 `ts_rank_cd` 支持）
- `8`：将排名除以文档中唯一词的数量
- `16`：将排名除以 `1 + log(文档中唯一词的数量)`
- `32`：将排名除以自身加 1

#### 自定义排名
- **排序索引**：
  - 使用 RUM 索引：
    ```sql
    CREATE EXTENSION rum;
    CREATE INDEX rumidx ON test_rum USING rum (a rum_tsvector_ops);
    ```

#### 前缀模糊查询
- 创建索引并进行查询：
  ```sql
  CREATE INDEX idx ON tbl (col text_pattern_ops);
  SELECT * FROM tbl WHERE col ~ '^前缀' OR col LIKE '前缀%';
  ```

#### 前后模糊查询
- 当前后模糊查询字符少于 3 个时，需要使用表达式索引。
- 参考文档: [GitHub 示例](https://github.com/digoal/blog/blob/master/201704/20170426_01.md)

#### 中文前后模糊查询
- 参考文档: [GitHub 示例](https://github.com/digoal/blog/blob/master/201605/20160506_02.md)

#### 数据库创建
- 语法:
  ```sql
  CREATE DATABASE name
  [ [ WITH ] [ OWNER [=] user_name ]
  [ TEMPLATE [=] template ]
  [ ENCODING [=] encoding ]
  [ LC_COLLATE [=] lc_collate ]
  [ LC_CTYPE [=] lc_ctype ] -- 注意：不能设置为 C
  [ TABLESPACE [=] tablespace_name ]
  [ ALLOW_CONNECTIONS [=] allowconn ]
  [ CONNECTION LIMIT [=] connlimit ]
  [ IS_TEMPLATE [=] istemplate ] ];
  ```

#### 相似查询
- 创建自定义函数 `get_res`：
  ```sql
  CREATE OR REPLACE FUNCTION get_res(
      text, -- 要按相似搜的文本
      int8, -- 限制返回多少条
      float4 DEFAULT 0.3, -- 相似度阈值
      float4 DEFAULT 0.1 -- 相似度递减步长
  ) RETURNS SETOF record AS $$
  DECLARE
      lim float4 := 1;
  BEGIN
      IF NOT ($3 > 0 AND $4 > 0 AND $4 <= 1) THEN
          RAISE NOTICE '$3 must >0 and $4 > 0 and <=1';
          RETURN;
      END IF;

      LOOP
          PERFORM set_limit(lim);
          RETURN QUERY SELECT similarity(info, $1) AS sml, * FROM tbl WHERE info % $1 ORDER BY sml DESC LIMIT $2;
          IF FOUND THEN
              RETURN;
          END IF;

          IF lim < $3 THEN
              RETURN;
          ELSE
              lim := lim - $4;
          END IF;
      END LOOP;
  END;
  $$ LANGUAGE plpgsql STRICT;
  ```

- 查询示例：
  ```sql
  SELECT * FROM get_res(
      '输入搜索文本',
      输入限制条数,
      输入阈值,
      输入步长
  ) AS t(sml float4, id int, info text);
  ```

#### 任意字段组合条件搜索
- **位图扫描**：多个独立索引的位图扫描或单个 GIN 多字段复合索引。
  ```sql
  SELECT * FROM table WHERE col1 = ? AND col2 = ?;
  ```

- **RUM 索引**：支持 20 亿行数据，每行 50 个字段，任意字段组合查询，毫秒级响应，1 万+ TPS。
  - 参考文档: [GitHub 示例](https://github.com/digoal/blog/blob/master/201802/20180228_01.md)

#### 案例与架构设计
- **全文检索**：
  - [GitHub 示例](https://github.com/digoal/blog/blob/master/201603/20160310_01.md)
  - [PostgreSQL 文档](https://www.postgresql.org/docs/10/static/textsearch.html)

- **模糊、正则查询**：
  - [PostgreSQL 文档](https://www.postgresql.org/docs/10/static/pgtrgm.html)

- **多字段任意组合查询**：
  - [PostgreSQL 文档](https://www.postgresql.org/docs/10/static/indexes-bitmap-scans.html)

#### 相似度去重
- **导购系统**：1 亿历史导购文章，数组（商品ID）相似判断，实时判定盗文，毫秒级响应。
- **新零售-商品相关短文相似查询**：10 亿级短文，短文特征值海明码相似识别，毫秒级响应。
- **图像搜索系统**：10 亿级图片，相似图片识别，对象识别（开发中），毫秒级响应。

#### 云产品方案
- **RDS PG**：
  - **smlar 插件**：相似文本、数组，海明码切片相似。
  - **imgsmlr 插件**：相似图片，图像特征值提取与存储，图像相似搜索，图像识别（开发中）。

#### 画像系统
- **心选**、**生意参谋**、**优酷**、**B2B 卖家智能运营**、**菜鸟**、**友盟**等。
  - **XXXpush**：ToB 实时圈人系统，1 万个标签字段，毫秒级响应，并发需求 200+，DML 需求分钟级体现到查询中。

#### 云产品方案
- **RDS PG**：
  - **阿里云 varbitx 插件**：翻转存储 tag, userid_varbit，用户 ID 字典化。
  - **单台 RDS PG**：标签数据合并延迟 10 分钟级，查询响应毫秒级，支持并发 500+，裸空间节省 80 倍。

#### 案例
- **数据银行项目**：20 亿+ 用户，万级标签，大屏展示（100+ 标签组合圈选透视）。