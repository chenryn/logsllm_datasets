vector select * from tbl where ts @@ to_tsquery('pg & alibaba')
order by ts_rank(ts, to_tsquery('pg & alibaba') );
-- order by ts_rank_cd(ts, to_tsquery('pg & alibaba') )
https://www.postgresql.org/docs/10/static/textsearch-controls.html#TEXTSEARCH-RANKING
全文检索技术 词距离条件
-
按距离范围搜索
自定义UDF，RANGE相交操作判断。
全文检索技术 词距离条件
-
全文检索技术 内置
- ranking
支持4种weight：
标题、作者、摘要、
内容
内置ranking
算法
全文检索技术 掩码
- ranking
Both ranking functions take an integernormalizationoption that specifies whether and how a document's length should impact its rank.
0 (the default) ignores the document length
1 divides the rank by 1 + the logarithm of the document length
2 divides the rank by the document length
4 divides the rank by the mean harmonic distance
between extents
(this is implemented only byts_rank_cd)
8 divides the rank by the number of unique words
in document
16 divides the rank by 1 + the logarithm of the
number of unique words in document
32 divides the rank by itself + 1
内置ranking
算法
全文检索技术 内置
- ranking
全文检索技术 自定义
- ranking
ranking sort index
• rum index am
– CREATE EXTENSION rum;
– CREATE INDEX rumidx ON test_rum USING rum (a rum_tsvector_ops);
前缀模糊查询背景技术
• create index idx on tbl (col text_patten_ops);
• select * from tbl where {col ~ '^前缀' | like '前缀%'};
• 自动
– postgres=# explain select * from pre where c1 like '你%';
– QUERY PLAN
– --------------------------------------------------------------------
– Index Scan using idx_pre on pre (cost=0.29..2.71 rows=1 width=21)
– Index Cond: ((c1 ~>=~ '你'::text) AND (c1 ~=~ '尾结'::text) AND (reverse(c1) ~
– QUERY PLAN
C
– -----------------------------------------------------------------------
– Bitmap Heap Scan on pre (cost=3.61..4.82 rows=1 width=21)
– Recheck Cond: (c1 ~~ '%abc%'::text)
– -> Bitmap Index Scan on idx_pre2 (cost=0.00..3.61 rows=1 width=0)
– Index Cond: (c1 ~~ '%abc%'::text)
– (4 rows)
前后模糊查询背景技术
• 当前后模糊查询低于 3个字符时，需要使用
表达式索引
, split
– https://github.com/digoal/blog/blob/master/201
704/20170426_01.md
支持中文的前后模糊查询背景技术
• https://github.com/digoal/blog/blob/master/201605/20160506_02.md
• Command: CREATE DATABASE
• Description: create a new database
• Syntax:
• CREATE DATABASE name
• [ [ WITH ] [ OWNER [=] user_name ]
• [ TEMPLATE [=] template ]
• [ ENCODING [=] encoding ]
• [ LC_COLLATE [=] lc_collate ]
• [ LC_CTYPE [=] lc_ctype ] 不能=C (=c时,pg_trgm无法切分wchar)
• [ TABLESPACE [=] tablespace_name ]
• [ ALLOW_CONNECTIONS [=] allowconn ]
• [ CONNECTION LIMIT [=] connlimit ]
• [ IS_TEMPLATE [=] istemplate ] ]
相似查询
• create or replace function get_res(
• text, --要按相似搜的文本
• int8, --限制返回多少条
• float4 default 0.3, --相似度阈值，低于这个值不再搜搜
• float4 default 0.1 --相似度递减步长，直至阈值
• ) returns setof record as $$
• declare
• lim float4 := 1;
• begin
• --判定
• if not ($3  0) then
• raise notice '$3 must >0 and  0 and $4 0 and <=1';
• return;
• end if;
相似查询
• loop
• --设置相似度阈值
• perform set_limit(lim);
•
• return query select similarity(info, $1) as sml, * from tbl where info % $1 order by sml desc limit $2;
• --如果有，则退出loop
• if found then
• return;
• end if;
•
• --否则继续，降低阈值
• --当阈值小于0.3时，不再降阈值搜索，认为没有相似。
• if lim < $3 then
• return;
• else
• lim := lim -$4;
• end if;
• end loop;
• end;
• $$ language plpgsql strict;
相似查询
• select * from get_res(
– '输入搜索文本 ',
– 输入限制条数 ,
– 输入阈值 ,
– 输入步长
• ) as t(sml float4, id int, info text);
相似查询
• postgres=# select * from get_res('睰掇贼展跃𫘽唂四𫗪麾𫑘赁青乖涢鳋揃擝垭
岮操彴凄鋺约鞯夗缝特鏋邜鯩垭䌸墙靰礼徛亦猰庴酽恎噡𫓨翱勜嘹雍岈擦宠
淽蒸佊鴁糜𫝫籹侰亇浰', 10, 0.4, 0.05) as t(sml float4, id int, info text);
• -[ RECORD 1 ]--------------------------------------------------------------------------------------------
------------------------------
• sml | 0.882353
• id | 1
• info | 佛睰掇贼展跃𫘽唂四𫗪麾𫑘赁青乖涢鳋揃擝垭岮操彴凄鋺约鞯夗缝特鏋
邜鯩垭䌸墙靰礼徛亦猰庴酽恎噡𫓨翱勜嘹雍岈擦宠淽蒸佊鴁糜𫝫籹侰亇浰鶙
• Time: 52.852 ms
任意字段组合条件搜索 内部加速技
-
术
1 bitmap scan
• 多个独立的索引的BITMAP SCAN（或单个GIN多字段复合索引(using gin (c1,c2,...))）
– select * from table where col1 = ? and col2 = ?;
– 合并扫描后，访问的数据块非常少，速度很快。
搜索 加速技术
ADHoc - 2 - rum index
• 20亿行，每行50个字段，任意字段AND\OR组合查询，毫秒级响应，1万+
TPS。
– https://github.com/digoal/blog/blob/master/201802/20180228_01.md
增加字段无需DDL
数组表 数组
示多个 RUM
字段 索引
RUM 毫秒级
全局字 ADHoc
精准索 响应
典化 QUERY
引加速 1万+TPS
表达式
原始字
RUM
段
索引
传统方法，表达式索引加速
案例 架构设计、代码、实操手册
-
• 全文检索
– https://github.com/digoal/blog/blob/master/201603/20160310_01.md
– https://github.com/digoal/blog/blob/master/201712/20171206_01.md
– https://github.com/digoal/blog/blob/master/201712/20171205_02.md
– https://www.postgresql.org/docs/10/static/textsearch.html
– https://github.com/digoal/blog/blob/master/201801/20180123_01.md (含距离搜索)
– https://github.com/digoal/blog/blob/master/201612/20161231_01.md
• 模糊、正则查询
– https://www.postgresql.org/docs/10/static/pgtrgm.html
• 相似查询
– https://www.postgresql.org/docs/10/static/pgtrgm.html
– 算法：contrib/pg_trgm/trgm_regexp.c
– https://github.com/digoal/blog/blob/master/201802/20180202_01.md
– https://github.com/digoal/blog/blob/master/201802/20180205_03.md
• 多字段任意组合查询
– https://www.postgresql.org/docs/10/static/indexes-bitmap-scans.html
– https://www.postgresql.org/docs/10/static/bloom.html
– https://www.postgresql.org/docs/10/static/btree-gin.html
– https://github.com/digoal/blog/blob/master/201802/20180228_01.md
– https://github.com/digoal/blog/blob/master/201805/20180518_02.md
特征、相似
Case3( )
• 相似
– 数组相似
– 文本特征值相似
– 图片相似
案例
相似度
去重
• 导购系统
– 1亿历史导购文章：数组（商品ID）相似判断
– 实时判定盗文
– 毫秒级
• 新零售-商品相关短文相似查询
– 10亿级短文
– 短文特征值海明码相似识别
– 切分，通过smlar插件overlap求相似
– 毫秒级
浏览轨迹
• 图像搜索系统 (图、文本
– 10亿级图片 向量)、推
– 相似图片识别 荐相似商品
– 对象识别（doing）
– 毫秒级
痛点
• 多值存储和高效检索
– 海量多值数据，相似查询，毫秒响应
– 海量短文相似查询，毫秒响应
• 图像特征值存储和高效检索
– 图片相似查询，毫秒响应
难以加速
– 图像识别，毫秒响应
云产品方案、效果
• RDS PG
– smlar插件
• 相似文本、数组
• 海明码切片(转码)相似
– imgsmlr插件
• 相似图片
海明码切分
图像特征值提取与存储
图像特征值比对
RDS PostgreSQL
• smlar插件
– cosine, overlap, tdidf相似
• imgsmlr插件
– 图像特征值，图像相似搜
– 图像识别(doing)
• smlar插件
– 短文海明距离<N，相似性
– 海明码切片+smlar overlap高速检索
案例 架构设计、代码、实操手册
-
• 数组相似
– https://github.com/digoal/blog/blob/master/201701/20170116_02.md
– https://github.com/digoal/blog/blob/master/201701/20170116_03.md
– https://github.com/digoal/blog/blob/master/201701/20170116_04.md
– https://github.com/digoal/blog/blob/master/201701/20170112_02.md
• 海明码相似
– https://github.com/digoal/blog/blob/master/201708/20170804_01.md
• 图片相似搜索
– https://github.com/digoal/blog/blob/master/201607/20160726_01.md
– https://github.com/digoal/blog/blob/master/201809/20180904_02.md
– https://github.com/digoal/blog/blob/master/201809/20180904_03.md
– https://github.com/digoal/blog/blob/master/201809/20180904_04.md
画像、特征、透视
Case4( )
• 画像系统
案例
• 心选
• 生意参谋
1、多值列：标签
• 优酷 2、多列任意组合搜
索Adhoc SQL
• B2B卖家智能运营
• 菜鸟
• 友盟
– 多值列标签+任意字段组合 圈选
案例
• XXXpush
– 业务背景： ToB 实时圈人系统
– 数据来源：实时标签数据
– 数据规模：单表10亿条记录，单个B-1亿用户，1万个标签字
段。
– 数据描述：每个用户的标签数据
– 查询需求：任意标签组合圈人
• 100毫秒级响应
– 并发需求：200+
– DML需求：实时标签分钟级体现到查询中
痛点
• 1万个 TAG，大宽表。
– 目前没有数据库支持。需要拆分成多表。
• 原方案成本高，收益低。
– 8台，数据延迟天级别，响应时间接近分钟级，
并发不到 。
100
效率低
云产品方案、效果
• RDS PG
– 阿里云varbitx插件
– 翻转存储 tag, userid_varbit
– 用户ID字典化
• 单台RDS PG
– 标签数据合并延迟10分钟级
– 查询响应毫秒级
– 支持并发500+
– 裸空间节省80倍算上索引至少240倍节省
案例
• 数据银行项目(一期)
• 20亿+用户，万级标签，大屏展示（100+标签组合
圈选透视）
– 1、求COUNT，2000亿（20亿用户，100个标签组合）
USER_IDS，响应速度2.6秒。