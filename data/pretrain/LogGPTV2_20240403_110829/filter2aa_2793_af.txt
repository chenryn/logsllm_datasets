os.remove(output)
binary.save(output)
os.chmod(output, 0b111000000) # rwx------
success("PT_INTERP has changed. Saved temp file {}".format(output))
parser = argparse.ArgumentParser(description='Force to use assigned new ld.so by
changing the binary')
parser.add_argument('-b', dest="binary", help='input binary')
parser.add_argument('-l', dest="ld", help='ld.so version')
parser.add_argument('-o', dest="output", help='output file')
args = parser.parse_args()
change_ld(args.binary, args.ld, args.output)
在运行脚本之前需要先创建一个 ld 的符号链接，然后根据需求添加命令行参数，如下所示。
$ sudo ln -s /usr/local/glibc-2.26/lib/ld-2.26.so /lib64/ld-glibc-2.26
$ python change_ld.py -h
usage: change_ld.py [-h] [-b BINARY] [-l LD] [-o OUTPUT]
Force to use assigned new ld.so by changing the binary
optional arguments:
-h, --help
show this help message and exit
-b BINARY
input binary
-l LD
ld.so version
-o OUTPUT
output file
$ python change_ld.py -b hello -l 2.26 -o hello_debug
[+] PT_INTERP has changed. Saved temp file hello_debug
$ file hello
hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked,
interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32,
BuildID[sha1]=e066fc51f4d1f584bf6f4e61429fe45bce772176, not stripped
$ file hello_debug
hello_debug: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked,
interpreter /lib64/ld-glibc-2.26, for GNU/Linux 2.6.32,
BuildID[sha1]=e066fc51f4d1f584bf6f4e61429fe45bce772176, not stripped
当我们需要进行源码调试（特别是调试堆利用漏洞时），可以使用 gdb 命令 directory，但这种
第 5 章
分析环境搭建 ┃ XXXVI
方法只能制定单个文件或目录，而不能解析子目录，所以推荐使用下面这条 bash 命令在启动调试器
时加载源码。
$ gdb `find ~/path/to/glibc/source -type d -printf '-d %p '` ./a.out
5.2
Docker 环境
5.2.1
容器与 Docker
容器化（Containerization），也被称为基于容器（Linux Containers，LXC）的虚拟化和应用容器
化，是 Linux 上一种用于部署和运行应用的操作系统级虚拟化方法。一个宿主机上可以运行多个相
互隔离的容器，每个容器拥有单独的内核，可以看作是一个简易的 Linux 环境及环境中运行的应用
程序。
Docker 是当前一个主流的开源应用容器引擎，通过让开发者打包他们的应用以及依赖包到容器
中，即可将标准化的业务程序部署到任意生产环境中，使得开发者无须再关心生产环境的差异，实
现快速的自动打包和部署。
由于容器使用进程级别的隔离，并使用宿主机的内核，而没有对整个操作系统进行虚拟化，因
此和虚拟机相比，它的隔离性较差，但启动部署都更加便捷，具有可移植性。Docker 容器与虚拟机
的差别如图 5-1 所示。
图 5-1
Docker 容器与虚拟机的差别
容器是通过一个镜像（Image）来启动的，其状态包括运行、停止、删除和暂停。
镜像是一个可执行程序包，包含了运行应用程序所需的所有内容，如代码、运行时库、环境变
量和配置文件等。镜像可以看成是容器的模版，Docker 根据镜像来创建容器，且同一个镜像文件可
以创建多个容器。
通常一个镜像文件是通过继承另一个镜像文件，并加上一些个性化定制的东西而得到的，例如
在 Ubuntu 镜像中集成 Apache 服务器，就得到了一个新的镜像。为了方便镜像文件的共享，可以将
制作好的镜像文件上传到仓库（Repository），这是一个系统中存放镜像文件的地方，可分为公开仓
库和私有仓库两种。其中，Docker Hub 是 Docker 的官方仓库，从中可以找到我们需要的镜像和应用。
第 5 章
分析环境搭建 ┃ XXXVII
Dockerfile 是一个文本文件，内含多条指令（Instruction），相当于是镜像文件的配置信息。Docker
会根据 Dockerfile 来生成镜像文件。
5.2.2
Docker 安装及使用
Docker 有免费使用的社区版（Community Edition，CE）和付费服务的企业版（Enterprise Edition，
EE）两个版本，个人用户使用社区版即可。Ubuntu16.04 使用下面的命令即可安装并启用服务（服务
器-客户端架构），将普通用户加入 Docker 用户组可以避免每次命令都输入 sudo。
$ curl -s https://get.docker.com/ | sh
# 安装
$ service docker start
# 启用
$ sudo usermod -aG docker firmy
# 添加组用户
$ docker version
Client:
Version:
18.09.5
API version:
1.39
Go version:
go1.10.8
Git commit:
e8ff056
Built:
Thu Apr 11 04:44:24 2019
OS/Arch:
linux/amd64
Experimental:
false
Server: Docker Engine - Community
......
下面以 hello-world 和 ubuntu 镜像文件为例，演示 Docker 的一些基本操作。
$ # 抓取镜像文件
$ docker image pull library/hello-world
Using default tag: latest
latest: Pulling from library/hello-world
1b930d010525: Pull complete
Digest: sha256:92695bc579f31df7a63da6922075d0666e565ceccad16b59c3374d2cf4e8e50e
Status: Downloaded newer image for hello-world:latest
$ # 查看本地镜像文件
$ docker image ls
REPOSITORY
TAG
IMAGE ID
CREATED
SIZE
hello-world
latest
fce289e99eb9
3 months ago
1.84kB
$ # 生成容器并运行，该容器输出信息后自动终止
$ docker run hello-world
$ # 启动一个不会自动终止的 Ubuntu 容器
$ docker run -it ubuntu /bin/bash
root@68a2e4a54e74:/# uname -a
Linux 68a2e4a54e74 4.15.0-47-generic #50~16.04.1-Ubuntu SMP Fri Mar 15 16:06:21
UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
$ # Ctrl+P+Q 即可退出控制台，容器保持后台运行
$ # 列出正在运行的容器
第 5 章
分析环境搭建 ┃ XXXVIII
$ docker container ls
CONTAINER ID
IMAGE
COMMAND
CREATED
STATUS
PORTS
NAMES
68a2e4a54e74
ubuntu
"bash"
7 minutes ago
Up 7 minutes
objective_tharp
$ # 停止和删除容器
$ docker container stop 68a2e4a54e74
$ docker container rm 68a2e4a54e74
5.2.3
Pwn 题目部署
在本地部署 Pwn 题目，通常使用 socat 就可以满足需求，端口号为 10001。
$ socat tcp4-listen:10001,reuseaddr,fork exec:./pwnable &
但如果是办一个比赛需要同时连接大量用户，可能会导致服务器资源紧张，且权限隔离也存在
问题。因此，我们选择使用 Docker 和 ctf_xinetd 来进行部署，先复制（clone）该项目。
$ git clone https://github.com/Eadom/ctf_xinetd.git
$ cd ctf_xinetd/ && cat ctf.xinetd
service ctf
{
disable = no
socket_type = stream
protocol
= tcp
wait
= no
user
= root
type
= UNLISTED
port
= 9999
bind
= 0.0.0.0
server
= /usr/sbin/chroot
# replace helloworld to your program
server_args = --userspec=1000:1000 /home/ctf ./helloworld
banner_fail = /etc/banner_fail
# safety options
per_source
= 10 # the maximum instances of this service per source IP address
rlimit_cpu
= 20 # the maximum number of CPU seconds that the service may use
#rlimit_as
= 1024M # the Address Space resource limit for the service
#access_times = 2:00-9:00 12:00-24:00
}
首先，将 Pwn 的二进制文件放到 bin 目录下，并修改 flag 为该题目的 flag 字符串。然后修改配
置文件 ctf.xinetd，比较重要的是端口 port 和参数 server_args，修改 helloworld 为二进制文件名。然
后用 build 命令创建镜像。
$ docker build -t "helloworld" .
$ docker image ls
REPOSITORY
TAG
IMAGE ID
CREATED
SIZE
helloworld
latest
3da30d9c1322
4 minutes ago
369MB
ubuntu
16.04
9361ce633ff1
5 weeks ago
118MB
启动容器，命令中的三个 helloworld 分别代表 host name、container name 和 image name。此时，
第 5 章
分析环境搭建 ┃ XXXIX
用户就可以通过开放端口 10001 连接到该题目。
$ docker run -d -p "0.0.0.0:10001:9999" -h "helloworld" --name="helloworld"
helloworld
$ docker ps
CONTAINER ID
IMAGE
COMMAND
CREATED
STATUS
PORTS
NAMES
b3934c16c6ac
helloworld
"/start.sh"
2 minutes ago
Up 2 minutes
0.0.0.0:10001->9999/tcp
helloworld
另外，运维人员如果想抓取该 Pwn 题运行时的网络流量便于复查和监控作弊，可以在该服务器
上使用 tcpdump 抓取，例如：
$ tcpdump -w pwn1.pcap -i eth0 port 10001
参考资料
[1]
Docker Documentation[Z/OL].
[2]
QEMU documentation[Z/OL].
[3]
matrix1001. 关于不同版本 glibc 强行加载的方法[EB/OL]. (2018-06-11).
第 10 章
栈溢出与 ROP ┃ XL
第 10 章
栈溢出与 ROP
10.1
栈溢出原理
由于 C 语言对数组引用不做任何边界检查，从而导致缓冲区溢出（buffer overflow）成为一种很
常见的漏洞。根据溢出发生的内存位置，通常可以分为栈溢出和堆溢出。其中，由于栈上保存着局
部变量和一些状态信息（寄存器值、返回地址等），一旦发生严重的溢出，攻击者就可以通过覆写
返回地址来执行任意代码，利用方法包括 shellcode 注入、ret2libc、ROP 等。同时，防守方也发展出
多种利用缓解机制，在本书第 4 章已经做了深入的讲解。
10.1.1
函数调用栈
函数调用栈是一块连续的用来保存函数运行状态的内存区域，调用函数（caller）和被调用函数
（callee）根据调用关系堆叠起来，从内存的高地址向低地址增长。这个过程主要涉及 eip、esp 和 ebp
三个寄存器：eip 用于存储即将执行的指令地址；esp 用于存储栈顶地址，随着数据的压栈和出栈而
变化；ebp 用于存储栈基址，并参与栈内数据的寻址。
我们通过一个简单的程序来对 x86 和 x86-64 的调用栈进行讲解。内存布局如图 10-1 所示。
int func(int arg1, int arg2, int arg3, int arg4,
int arg5, int arg6, int arg7, int arg8) {
int loc1 = arg1 + 1;
int loc8 = arg8 + 8;
return loc1 + loc8;
}
int main() {
return func(11, 22, 33, 44, 55, 66, 77, 88);
}
// gcc -m32 stack.c -o stack32
// gcc stack.c -o stack64
第 10 章
栈溢出与 ROP ┃ XLI
图 10-1
x86 和 x86-64 的调用栈
先来看 x86 的情况，每一条汇编指令都已经做了详细的注释。