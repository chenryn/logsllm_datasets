SDO_TOPO_GEO Describes a topology geometry ☒ -
METRY
SDO_GEORASTER A raster grid or image object is ☒ -
stored in a single row
Media ORDDicom Supports the storage and ☒ -
Types management of audio data
ORDDicom Supports the storage and ☒ -
management of Digital Imaging
and Communications in Medicine
(DICOM),
ORDDoc Supports storage and ☒ -
management of any type of media
data
ORDImage Supports the storage and ☒ -
management of image data
ORDVideo Supports the storage and ☒ -
management of video data
Note: The “PostgreSQL Identical Compatibility” column indicates if you can use the exact Oracle data type
syntax when migrating to Amazon Aurora PostgreSQL.
90
Oracle Character Column Semantics
Oracle supports both and semantics for column size, which determines the amount of storage
BYTE CHAR
allocated for and columns.
CHAR VARCHAR
• If you define a field as , Oracle can use up to 10 bytes for storage. However,
VARCHAR2(10 BYTE)
based on your database codepage and NLS settings, you may not be able to store 10 characters in that
field because the physical size of some non-English characters exceeds one byte.
• If you define a field as , Oracle can store 10 characters no matter how many
VARCHAR2(10 CHAR)
bytes are required to store each non-English character.
CREATE TABLE table1 (col1 VARCHAR2(10 CHAR),
col2 VARCHAR2(10 BYTE));
By default, Oracle will use semantics. When using a multi-byte character set such as UTF8, you must
BYTE
do one of the following:
• Use the modifier in the VARCHAR2/CHAR column definition
CHAR
• Modify the session or system parameter to change the default from
NLS_LENGTH_SEMANTICS
BYTE to CHAR:
ALTER system SET nls_length_semantics=char scope=both;
ALTER system SET nls_length_semantics=byte scope=both;
ALTER session SET nls_length_semantics=char;
ALTER session SET nls_length_semantics=byte;
For additional details:
https://docs.oracle.com/cd/E11882_01/server.112/e41084/sql_elements001.htm#SQLRF0021
https://docs.oracle.com/database/121/SQLRF/sql_elements001.htm#SQLRF30020
91
Migration to: PostgreSQL Common Data Types
[Back to TOC]
Overview
PostgreSQL provides multiple data types which are equivalent to certain Oracle data types. The following table
provides the full list of PostgreSQL datatypes:
PostgreSQL PostgreSQL PostgreSQL Data Type Characteristic
Data Type Family Data Type
Character CHAR Stores a single character
Data Types CHARACTER Stores a single character
CHAR(n) Stores exactly (n) characters
VARCHAR(N) Stores a variable number of characters, up to a
maximum of n characters
TEXT Specific variant of varchar, which does not require you
to specify an upper limit on the number of characters
Numeric NUMERIC (P, S) Exact numeric of selectable precision
Data Types REAL Single precision floating-point number (4 bytes)
DOUBLE PRECISION Double precision floating-point number (8 bytes)
INT A signed 4-byte integer that can store –2147483648 to
+2147483647
INTEGER A signed 4-byte integer that can store –2147483648 to
+2147483647
SMALLINT A signed 2-byte integer that can store –32768 to
+32767
BIGINT A signed 8-byte integer, giving approximately 18 digits
of precision
BIT Stores a single bit, 0 or 1
BIT VARYING Stores a string of bits
MONEY Equivalent to NUMERIC (9,2), storing 4 bytes of data.
Its use is discouraged
Date &Time TIMESTAMP Stores dates and times from 4713 BC to 1465001 AD,
Data Types with a resolution of 1 microsecond - 8 bytes
INTERVAL Stores an interval of approximately +/– 178,000,000
years, with a resolution of 1 microsecond -
16 bytes
DATE Stores dates from 4713 BC to 32767 AD, with a
resolution of 1 day - 4 bytes
TIME Stores a time of day, from 0 to 23:59:59.99, with a
resolution of 1 microsecond - 8 bytes with no
timezone, 12 bytes with timezone
Logical BOOLEAN Holds a truth value. Will accept values such as TRUE,
Data Type 't','true', 'y', 'yes', and '1' as true. Uses 1 byte of
storage, and can store NULL. This type can be used
upon table creation
XML XML XML data
Data Type
Geometric POINT An x,y value
Data Types LINE A line (pt1, pt2)
LSEG A line segment (pt1, pt2)
92
PostgreSQL PostgreSQL PostgreSQL Data Type Characteristic
Data Type Family Data Type
BOX A box specified by a pair of points
PATH A sequence of points, which may be closed or open
POLYGON A sequence of points, effectively a closed path
CIRCLE A point and a length, which specify a circle
PostgreSQL SERIAL A numeric column in a table that increases each time a
Data Types row is added
OID An object identifier. Internally, PostgreSQL adds, by
default, a hidden oid to each row, and stores a 4-byte
integer
CIDR Stores a network address of the form x.x.x.x/y where y
is the netmask
INET Similar to cidr, except the host part can be 0
MACADDR MAC (Media Access Control) address
JSON Textual JSON data
JSONB Binary JSON data, decomposed
PG_LSN PostgreSQL Log Sequence Number
BYTEA Binary data ("byte array")
TSQUERY Text search query
TSVECTOR Text search document
TXID_SNAPSHOT User-level transaction ID snapshot
UUID Universally unique identifier
PostgreSQL Character Column Semantics
PostgreSQL only supports for column size semantics. If you define a field as
CHAR VARCHAR (10),
PostgreSQL can store 10 characters regardless of how many bytes it takes to store each non-English character.
stores strings up to n characters (not bytes) in length.
VARCHAR(n)
Migration of Oracle Datatypes to PostgreSQL datatypes
Automatic migration and conversion of Oracle Tables and Data Types can be performed using Amazon’s
Schema Conversion Tool (Amazon SCT).
93
Examples
To demonstrate SCT’s capability for migrating Oracle tables to their PostgreSQL equivalents, a table containing
columns representing the majority of Oracle data types was created and converted using Amazon SCT.
Source Oracle compatible DDL for creating the table:
DATATYPES
CREATE TABLE "DATATYPES"(
"BFILE" BFILE,
"BINARY_FLOAT" BINARY_FLOAT,
"BINARY_DOUBLE" BINARY_DOUBLE,
"BLOB" BLOB,
"CHAR" CHAR(10 BYTE),
"CHARACTER" CHAR(10 BYTE),
"CLOB" CLOB,
"NCLOB" NCLOB,
"DATE" DATE,
"DECIMAL" NUMBER(3,2),
"DEC" NUMBER(3,2),
"DOUBLE_PRECISION" FLOAT(126),
"FLOAT" FLOAT(3),
"INTEGER" NUMBER(*,0),
"INT" NUMBER(*,0),
"INTERVAL_YEAR" INTERVAL YEAR(4) TO MONTH,
"INTERVAL_DAY" INTERVAL DAY(4) TO SECOND(4),
"LONG" LONG,
"NCHAR" NCHAR(10),
"NCHAR_VARYING" NVARCHAR2(10),
"NUMBER" NUMBER(9,9),
"NUMBER1" NUMBER(9,0),
"NUMBER(*)" NUMBER,
"NUMERIC" NUMBER(9,9),
"NVARCHAR2" NVARCHAR2(10),
"RAW" RAW(10),
"REAL" FLOAT(63),
"ROW_ID" ROWID,
"SMALLINT" NUMBER(*,0),
"TIMESTAMP" TIMESTAMP(5),
"TIMESTAMP_WITH_TIME_ZONE" TIMESTAMP(5) WITH TIME ZONE,
"UROWID" UROWID(10),
"VARCHAR" VARCHAR2(10 BYTE),
"VARCHAR2" VARCHAR2(10 BYTE),
"XMLTYPE" XMLTYPE
);
94
Target PostgreSQL compatible DDL for creating the table migrated from Oracle with Amazon SCT.
DATATYPES
CREATE TAB LE IF NOT EXISTS datatypes(
bfile character varying(255) DEFAULT NULL,
binary_float real DEFAULT NULL,
binary_double double precision DEFAULT NULL,
blob bytea DEFAULT NULL,
char character(10) DEFAULT NULL,
character character(10) DEFAULT NULL,
clob text DEFAULT NULL,
nclob text DEFAULT NULL,
date TIMESTAMP(0) without time zone DEFAULT NULL,
decimal numeric(3,2) DEFAULT NULL,
dec numeric(3,2) DEFAULT NULL,
double_pre cision double precision DEFAULT NULL,
float double precision DEFAULT NULL,
integer numeric(38,0) DEFAULT NULL,
int numeric(38,0) DEFAULT NULL,
interval_year interval year to month(6) DEFAULT NULL,
interval_day interval day to second(4) DEFAULT NULL,
long text DEFAULT NULL,
nchar character(10) DEFAULT NULL,
nchar_vary ing character varying(10) DEFAULT NULL,
number numeric(9,9) DEFAULT NULL,
number1 numeric(9,0) DEFAULT NULL,
"number(*)" double precision DEFAULT NULL,
numeric numeric(9,9) DEFAULT NULL,
nvarchar2 character varying(10) DEFAULT NULL,
raw bytea DEFAULT NULL,
real double precision DEFAULT NULL,
row_id character(255) DEFAULT NULL,
smallint numeric(38,0) DEFAULT NULL,
timestamp TIMESTAMP(5) without time zone DEFAULT NULL,
timestamp_with_time_zone TIMESTAMP(5) with time zone DEFAULT NULL,
urowid character varying DEFAULT NULL,
varchar character varying(10) DEFAULT NULL,
varchar2 character varying(10) DEFAULT NULL,
xmltype xml DEFAULT NULL
)
WITH (
OIDS=FALSE
);
Note: While most of the datatypes were converted successfully, a few exceptions were raised for datatypes
that Amazon SCT is unable to automatically convert and where SCT recommended manual actions:
• PostgreSQL does not have a BFILE data type
BFILEs are pointers to binary files.
Recommended actions: either store a named file with the data and create a routine that retrieves
the file from the file system or store the data inside a blob datatype in your table.
95
• PostgreSQL doesn’t have a ROWID data type
ROWIDs are physical row addresses inside Oracle’s storage subsystems. The datatype is
ROWID
primarily used for values returned by the pseudocolumn.
ROWID
Recommended actions: while PostgreSQL contains a column that is the physical location of
ctid
the row version within its table, it does not have a comparable data type. However, you can use
as a partial datatype equivalent. Note: If you are using ROWID datatypes in your code,
CHAR
modifications may be necessary.
• PostgreSQL does not have a UROWID data type
Universal rowid, or , is a single Oracle datatype that supports both logical and physical
UROWID
rowids of foreign table rowids such as non-Oracle tables accessed through a gateway.
Recommended actions: PostgreSQL does not have a comparable data type. You can use
as a partial datatype equivalent. However, if you are using datatypes in
VARCHAR(n) UROWID
your code, modifications may be necessary.
For additional details:
https://www.postgresql.org/docs/current/static/ddl-system-columns.html
https://www.postgresql.org/docs/current/static/datatype.html
https://aws.amazon.com/documentation/SchemaConversionTool
96
Migrating from: Oracle Table Constraints
[Back to TOC]
Overview
The Oracle database provides six types of constraints to enforce data integrity on table columns. Constraints
ensure that data inserted into tables is controlled and satisfies logical requirements.
Oracle integrity constraint types:
• Primary key: enforces that row values in a specific column are unique and not null.
• Foreign key: enforces that values in the current table exist in the referenced table.
• Unique: prevents data duplication on a column, or combination of columns, and allows one null value.
• Check: enforces that values comply with a specific condition.
• Not null: enforces that null values cannot be inserted into a specific column.
• REF: references an object in another object type or in a relational table.
Constraint Creation
Oracle allows to create new constraints in two ways:
• Inline: Defines a constraint as part of a table column declaration:
SQL> CREATE TABLE EMPLOYEES (
EMP_ID NUMBER PRIMARY KEY,
…);
• Out-Of-Line: Defines a constraint as part of the table DDL during table creation:
SQL> CREATE TABLE EMPLOYEES (
EMP_ID NUMBER,
…,
CONSTRAINT PK_EMP_ID PRIMARY KEY(EMP_ID));
Note: NOT NULL constraints must be declared using the inline method.
Oracle constraints can be specified with the following syntax:
•
CREATE / ALTER TABLE
•
CREATE / ALTER VIEW
Note: Views have only a primary key, foreign key, and unique constraints.
97
Major Constraint Types
PRIMARY KEY Constraint
A unique identifier for each record in a database table can appear only once and cannot contain NULL values.
A table can only have one primary key.
When creating a primary key constraint inline, you can specify only the keyword. When you
PRIMARY KEY
create the constraint out-of-line, you must specify one column or combination of columns.
Creating a new primary key constraint will also implicitly create a unique index on the primary key column if
no such index already exists. When dropping a primary key constraint, the system generated index is also
dropped. If a user defined Index was used, the index is not dropped.
Limitations
• Primary keys cannot be created on columns defined with the following data types:
LOB, LONG, LONG RAW, VARRAY, NESTED TABLE, BFILE, REF, TIMESTAMP WITH
. Note: The data type is allowed as primary
TIME ZONE TIMESTAMP WITH LOCAL TIME ZONE
key.
• Primary keys can be created from multiple columns (composite PK), limited to a total of 32 columns.
• Defining the same column as both a primary key and as a unique constraint is not allowed.
Examples
1. Create an Inline primary key using a system-generated primary key constraint name:
SQL> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMBER PRIMARY KEY,
FI RST_NA ME VA RCHAR2(20),
LAST_NAME VARCHAR2(25),
EMAIL VARCHAR2(25));
2. Create an inline primary key using a user-specified primary key constraint name:
SQL> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMBER CONSTRAINT PK_EMP_ID PRIMARY KEY,
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(25),
EMAIL VARCHAR2(25));
3. Create an out-of-line primary key:
SQL> CREATE TABLE EMPLOYEES(
EMPLOYEE_ID NUMBER,
FI RST_NAME VARCHAR2(20),
LA ST_NAME VARCHAR2(25),
EMAIL VARCHAR2(25));
CONSTRAINT PK_EMP_ID PRIMARY KEY (EMPLOYEE_ID));
98
4. Add a primary key to an existing table:
SQL> ALTER TABLE SYSTEM_EVENTS
ADD CONSTRAINT PK_EMP_ID PRIMARY KEY (EVENT_CODE, EVENT_TIME);
FOREIGN KEY Constraint
Foreign key constraints identify the relationship between column records defined with a foreign key constraint
and a referenced primary key or a unique column. The main purpose of a foreign key is to enforce that the
values in table A also exist in table B, as referenced by the foreign key.
A referenced table is known as a parent table while the table on which the foreign key was created is known
as a child table. Foreign keys created in child tables generally reference a primary key constraint in a parent
table.
Limitations
• Foreign keys cannot be created on columns defined with the following data types:
LOB, LONG, LONG RAW, VARRAY, NESTED TABLE, BFILE, REF, TIMESTAMP WITH
.
TIME ZONE
• Composite Foreign key constraints, comprised from multiple columns, cannot have more than 32
columns.
• Foreign key constraints cannot be created in a statement with a subquery clause.
CREATE TABLE
• A referenced primary key or unique constraint on a parent table must be created before the foreign
key creation command.
ON DELETE Clause
The clause specifies the effect of deleting values from a parent table on the referenced records
ON DELETE
of a child table. If the clause is not specified, Oracle does not allow deletion of referenced key
ON DELETE
values in a parent table that has dependent rows in the child table.
• : Any dependent foreign key values in a child table are removed along with
ON DELETE CASCADE
the referenced values from the parent table.
• : Any dependent foreign key values in a child table are updated to NULL.
ON DELETE NULL
Examples
1. Create an inline foreign key with a user-defined constraint name:
SQ L> CRE ATE TA BLE EM PLOYEE S (
EMPLOYEE_ID NUMBER PRIMARY KEY,
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(25),
EMAIL VARCHAR2(25) ,
DEPARTMENT_ID REFERENCES DEPARTMENTS(DEPARTMENT_ID));
99
2. Create an Out-Of-Line foreign key with a system-generated constraint name:
SQL> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMBER PRIMARY KEY,
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(25),
EMAIL VARCHAR2(25),
DEPARTMENT_ID NUMBER,
CONSTRAINT FK_FEP_ID
FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID));
3. Create a foreign key using the clause:
ON DELETE CASCADE
SQL> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMBER PRIMARY KEY,
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(25),
EMAIL VARCHAR2(25),
DEPARTMENT_ID NUMBER,
CONSTRAINT FK_FEP_ID
FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
ON DELETE CASCADE);
4. Add a foreign key to an existing table:
SQL> ALTER TABLE EMPLOYEES
ADD CONSTRAINT FK_FEP_ID
FOREIGN KEY(DEPARTMENT_ID)
REFERENCES DEPARTMENTS(DEPARTMENT_ID);
UNIQUE Constraint
A unique constraint is similar to a primary key constraint. A unique constraint specifies that the values in a
single column, or combination of columns, must be unique and cannot repeat in multiple rows.
The main difference from primary key constraint is that the unique constraint can contain NULL values. NULL
values in multiple rows are also supported provided the combination of values is unique.
Limitations
• A unique constraint cannot be created on columns defined with the following data types:
LOB, LONG, LONG RAW, VARRAY, NESTED TABLE, BFILE, REF, TIMESTAMP WITH
TIME ZONE
• A unique constraint comprised from multiple columns cannot have more than 32 columns.
• Primary key and unique constraints cannot be created on the same column or columns.
100
Example
Create an inline unique Constraint:
SQL> CREATE TABLE EMPLOYEES (
EMPLOYEE_ID NUMBER PRIMARY KEY,
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(25),
EMAIL VARCHAR2(25) CONSTRAINT UNIQ_EMP_EMAIL UNIQUE,
DEPARTMENT_ID NUMBER);
Check Constraint
Check constraints are used to validate that values in specific columns meet specific criteria or conditions. For
example, a check constraint on an column can be used to validate that each record has
EMPLOYEE_EMAIL
an “ ” suffix, if a record fails the “check” validation, an error is raised and the record is not inserted.
@aws.com
Using a check constraint can help transfer some of the logical integrity validation from the application to the
database.
In-Line vs. Out-Of-Line
When creating a check constraint as inline, it can only be defined on a specific column. When using the out-of-
line method, the check constraint can be defined on multiple columns.
Limitations