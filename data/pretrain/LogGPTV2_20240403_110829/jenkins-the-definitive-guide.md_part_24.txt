### 8.13. Making Noise

If your Jenkins instance is running on a machine located near the development team, you may want to include audio notifications as part of your notification strategy. This can be particularly effective for small, co-located teams. However, it becomes more challenging if the build server is set up on a virtual machine or in a different part of the building.

Jenkins offers two plugins for integrating audio feedback into your build process: the Jenkins Sounds plugin and the Jenkins Speaks plugin. Both can be installed via the Plugin Manager page.

#### Jenkins Sounds Plugin

The Jenkins Sounds plugin is the more flexible of the two. It allows you to create a detailed notification strategy based on the latest build result and, optionally, the previous build result (see Figure 8.27, “Configuring Jenkins Sounds rules in a build job”). For example, you can configure Jenkins to play one sound the first time a build fails, a different sound if the build fails a second time, and yet another sound when the build is fixed.

To set this up, you need to enable the Jenkins Sounds checkbox in the Post-build Actions section of your build job configuration page. You can add as many sound configuration rules as needed. Each rule requires you to specify which build result will trigger the sound and the applicable previous build results (e.g., Not Built, Aborted, Failed, Unsuccessful, or Successful).

The Jenkins Sounds plugin provides a large list of pre-defined sounds, but you can also add your own. Sounds are stored in a ZIP or JAR file with a flat directory structure. The list of sounds in the plugin is simply the list of filenames without extensions. The plugin supports AIFF, AU, and WAV files.

In the System Configuration page, you can provide Jenkins with a new sound archive file using either the `http://` notation if the file is available on a local web server or the `file://` notation if it is available locally (see Figure 8.28, “Configuring Jenkins Sounds”). After saving the configuration, you can test the sounds in your archive via the Test Sound button in the Advanced section.

#### Jenkins Speaks Plugin

Another option is the Jenkins Speaks plugin, which allows Jenkins to broadcast a customized announcement (in a robotic voice) when a build fails (see Figure 8.29, “Configuring Jenkins Speaks”). You can configure the exact message using Jelly, an XML-based scripting language used in Jenkins.

The advantage of this approach is its precision. Since you can use Jenkins variables in the Jelly script, you can customize the message to include specific details about the build state. For example:
```
Your attention please. Project ${build.project.name} has failed again.
```
If you leave the field blank, the plugin will use a default template that you can configure in the System Configuration page. It's usually a good idea to do this and only use a project-specific script if necessary.

The disadvantage is that the robotic voice can be difficult to understand. To mitigate this, start your announcement with a generic phrase like "Your attention please" or combine it with the Jenkins Sounds plugin to grab developers' attention before the message is broadcast. Using hyphens in your project names (e.g., `game-of-life` instead of `gameoflife`) will also help the plugin pronounce project names correctly.

Both these approaches are useful for small teams but may be limited for larger ones, especially if the server is not physically close to the development team. Future versions may support playing sounds on a separate machine, but this feature is currently unavailable.

### 8.14. Extreme Feedback Devices

There are many imaginative notification tools and strategies, including devices such as Ambient Orbs, Lava Lamps, traffic lights, and other USB-controlled devices. The Build Radiator (see Section 8.6, “Build Radiators”) also falls into this category if projected onto a large screen.

One device that integrates well with Jenkins is the Nabaztag. The Nabaztag (see Figure 8.30, “A Nabaztag”) is a popular WiFi-enabled robotic rabbit that can flash colored lights, play music, or even speak. The advantage of the Nabaztag is that it works via WiFi, so it can be located away from the build server, making it suitable even if your Jenkins instance is in a server room or on a virtual machine.

There is a Jenkins plugin available for the Nabaztag. Once installed and Jenkins is restarted, it is easy to configure. In Jenkins’s main Configuration page, go to the Global Nabaztag Settings section and enter the serial number and secret token for your device (see Figure 8.31, “Configuring your Nabaztag”). You can also set default information about how the Nabaztag should react to changes in build status, what voice to use, and what message to say when a build fails, succeeds, is fixed, or fails again. To activate Nabaztag notification for a particular build job, tick the Nabaztag Publisher option in your build job configuration.

With the exception of the build radiator, many of these devices have similar limitations to the Jenkins Speaks and Jenkins Sounds plugins—they are best suited for small, co-located teams working on a limited number of projects. Nevertheless, when they work, they can be a useful addition to your general notification strategy.

### 8.15. Conclusion

Notification is a vital part of your overall Continuous Integration (CI) strategy. A failed build is of little use if no one is notified. Notification is not a one-size-fits-all solution; it needs to be tailored to your organization's culture and toolset.

It is important to define and implement a well-thought-out notification strategy. Email is ubiquitous and forms the backbone of many notification strategies. For larger teams or busy technical leads, consider setting up an escalation strategy based on advanced email options (see Section 8.3, “More Advanced Email Notification”). Complement this with more active strategies such as instant messaging or desktop notifiers. If your team uses a chat or IRC channel, integrate this into your notification strategy. SMS notification is also a great strategy for critical build jobs.

Ensure you have both passive and active (pull and push) notification strategies. A prominent build radiator or an extreme feedback device sends a strong message to the team that fixing builds is a priority and can help instill a more agile team culture.

### 9.1. Introduction

High-quality code is essential as it contains fewer bugs and is easier to understand and maintain. However, the definition of code quality can be subjective, varying between organizations, teams, and individuals.

Coding standards are rules that define acceptable coding styles and conventions within a team or organization. Agreeing on and applying these standards is often more important than the standards themselves. Consistent coding styles make the code more readable and maintainable, especially for new team members.

Coding standards include aesthetic aspects such as code layout and naming conventions, as well as best practices like avoiding missing curly brackets in Java. Only experienced developers can fully judge code quality, which is why practices like code reviews and pair programming are essential. However, code quality metrics tools can be very helpful.

These tools analyze your application source code or byte code and check whether the code adheres to certain rules. Code quality metrics can cover a wide range of aspects, from coding standards and best practices to code coverage and potential bugs. Some metrics focus on measurable characteristics like lines of code (NLOC), average code complexity, or lines per class, while others perform more sophisticated static analysis.

Jenkins offers a variety of code quality reporting plugins, many of which are for Java static analysis tools such as Checkstyle, PMD, FindBugs, Cobertura, and JDepend. Others, like fxcop and NCover, are for .NET applications. Sonar is a notable exception, as it can extract code quality metrics from any Maven project with no additional configuration required.

In the rest of this chapter, we will explore how to set up code quality reporting in Jenkins and how to use it effectively in your build process.

### 9.2. Code Quality in Your Build Process

Before setting up code quality reporting in Jenkins, it's important to consider the broader context. Code quality metrics are most valuable when part of a broader process improvement strategy.

**First Level: IDE Integration**
Modern IDEs like Eclipse, NetBeans, and IntelliJ have plugins for tools like Checkstyle, PMD, and FindBugs, providing rapid feedback to developers on code quality issues. This is a fast and efficient way to teach developers about organizational or project coding standards.

**Second Level: Build Server**
Set up a dedicated code quality build job that runs after the normal build and test. This job produces project-wide code quality metrics, helping to monitor the overall health of the project. Weekly code quality reviews can further enhance the effectiveness of these reports by discussing issues and trends within the team.

Running this job separately is important because code coverage analysis and static analysis tools can be slow. It is also crucial to keep code coverage tests separate from builds, as the code coverage process produces instrumented code that should never be deployed to a production repository.

Code quality reporting is typically a passive process, but it can be made more active by configuring the build to fail if code quality metrics fall below an acceptable level. This can be done in Jenkins or in your build script, with the advantage of changing failing criteria more easily outside the build script.

Remember, coding standards are guidelines, not absolute rules. Use failing code quality builds and reports as indicators of potential areas for improvement, not as absolute measures of value.

### 9.3. Popular Java and Groovy Code Quality Analysis Tools

Several open-source tools can help identify poor coding practices in Java and Groovy.

**Checkstyle**
Checkstyle is a static analysis tool for Java that enforces highly-configurable coding standards and checks for poor coding practices, complex code, and duplicated code. It supports a large number of rules, including naming conventions, annotations, javadoc comments, class and method size, and code complexity metrics.

**PMD**
PMD is another static analysis tool similar to Checkstyle, focusing on coding and design practices.

**FindBugs**
FindBugs is an innovative tool that identifies potentially dangerous and buggy code, developed by Bill Pugh and his team at the University of Maryland.

**CodeNarc**
For Groovy and Grails, CodeNarc checks coding practices and conventions.

These tools can be easily integrated into your build process. In the following sections, we will look at how to set up these tools to generate XML reports that Jenkins can use for its own reporting.

#### 9.3.1. Configuring Checkstyle

Checkstyle is a versatile and flexible tool that should be part of any Java-based code quality analysis strategy. It supports a wide range of rules, including naming conventions, annotations, javadoc comments, class and method size, and code complexity metrics.

**Configuration in Ant**
If you are using Ant, download the Checkstyle JAR file from the website and make it available to Ant. Place the JAR file in one of your project directories or use Ivy or the Maven Ant Task library to declare a dependency on Checkstyle. Declare the Checkstyle task as follows:
```xml
<taskdef resource="checkstyletask.properties" classpath="lib/checkstyle.jar"/>
<checkstyle config="config/sun_checks.xml">
    <fileset dir="src">
        <include name="**/*.java"/>
    </fileset>
    <formatter type="xml" toFile="checkstyle-report.xml"/>
</checkstyle>
```
Invoke this task (e.g., `ant checkstyle`) to generate the Checkstyle reports.

**Configuration in Maven**
For Maven 2, add the following to the `<build>` section:
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-checkstyle-plugin</artifactId>
    <version>2.4</version>
    <configuration>
        <configLocation>src/main/config/company-checks.xml</configLocation>
    </configuration>
</plugin>
```
For Maven 3, add the plugin to the `<reporting>` section of the `maven-site-plugin`:
```xml
<project>
    ...
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.0-beta-2</version>
                <configuration>
                    <configLocation>src/main/config/company-checks.xml</configLocation>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
    ...
</project>
```

By following these steps, you can effectively integrate code quality tools into your Jenkins build process and improve the overall quality of your code.