        $k = 'this_is_a_very_secret_keythis_is_a_very_secret_keythis_is_a_very_secret_keythis_is_a_very_secret_keythis_is_a_very_secret_key';
        mt_srand(1337);
        for ($i=0; $i   ASSIGN                                                   !0, 'input_your_flag_here'
      29     1        INIT_FCALL                                               'encrypt'
             2        SEND_VAL                                                 'this_is_a_very_secret_key'
             3        SEND_VAR                                                 !0
             4        DO_UCALL                                         $2
             5        IS_IDENTICAL                                     ~1      $2, '85b954fc8380a466276e4a48249ddd4a199fc34e5b061464e4295fc5020c88bfd8545519ab'
             6      > JMPZ                                                     ~1, ->9
      30     7    >   ECHO                                                     'Congratulation%21+You+got+it%21'
      35     8      > EXIT
      32     9    >   ECHO                                                     'Wrong+Answer'
      35    10      > EXIT
    branch: #  0; line:    27-   29; sop:     0; eop:     6; out1:   7; out2:   9
    branch: #  7; line:    30-   35; sop:     7; eop:     8; out1:  -2
    branch: #  9; line:    32-   35; sop:     9; eop:    10; out1:  -2
    path #1: 0, 7,
    path #2: 0, 9,
    Function encrypt:
    Finding entry points
    Branch analysis from position: 0
    Jump found. (Code = 42) Position 1 = 32
    Branch analysis from position: 32
    Jump found. (Code = 44) Position 1 = 34, Position 2 = 12
    Branch analysis from position: 34
    Jump found. (Code = 62) Position 1 = -2
    Branch analysis from position: 12
    Jump found. (Code = 44) Position 1 = 34, Position 2 = 12
    Branch analysis from position: 34
    Branch analysis from position: 12
    filename:       /var/www/html/flag.php
    function name:  encrypt
    number of ops:  38
    compiled vars:  !0 = $pwd, !1 = $data, !2 = $cipher, !3 = $pwd_length, !4 = $data_length, !5 = $i
    line     #* E I O op                           fetch          ext  return  operands
    -------------------------------------------------------------------------------------      16     0  E >   RECV                                             !0
             1        RECV                                             !1
      17     2        INIT_FCALL                                               'mt_srand'
             3        SEND_VAL                                                 1337
             4        DO_ICALL
      18     5        ASSIGN                                                   !2, ''
      19     6        STRLEN                                           ~6      !0
             7        ASSIGN                                                   !3, ~6
      20     8        STRLEN                                           ~6      !1
             9        ASSIGN                                                   !4, ~6
      21    10        ASSIGN                                                   !5, 0
            11      > JMP                                                      ->32
      22    12    >   INIT_FCALL                                               'chr'
            13        INIT_FCALL                                               'ord'
            14        FETCH_DIM_R                                      $6      !1, !5
            15        SEND_VAR                                                 $6
            16        DO_ICALL                                         $6
            17        INIT_FCALL                                               'ord'
            18        MOD                                              ~8      !5, !3
            19        FETCH_DIM_R                                      $7      !0, ~8
            20        SEND_VAR                                                 $7
            21        DO_ICALL                                         $8
            22        BW_XOR                                           ~7      $6, $8
            23        INIT_FCALL                                               'mt_rand'
            24        SEND_VAL                                                 0
            25        SEND_VAL                                                 255
            26        DO_ICALL                                         $8
            27        BW_XOR                                           ~6      ~7, $8
            28        SEND_VAL                                                 ~6
            29        DO_ICALL                                         $6
            30        ASSIGN_CONCAT                                 0          !2, $6
      21    31        PRE_INC                                                  !5
            32    >   IS_SMALLER                                       ~6      !5, !4
            33      > JMPNZ                                                    ~6, ->12
      24    34    >   INIT_FCALL                                               'encode'
            35        SEND_VAR                                                 !2
            36        DO_UCALL                                         $6
            37      > RETURN                                                   $6
    branch: #  0; line:    16-   21; sop:     0; eop:    11; out1:  32
    branch: # 12; line:    22-   21; sop:    12; eop:    31; out1:  32
    branch: # 32; line:    21-   21; sop:    32; eop:    33; out1:  34; out2:  12
    branch: # 34; line:    24-   24; sop:    34; eop:    37; out1:  -2
    path #1: 0, 32, 34,
    path #2: 0, 32, 12, 32, 34,
    End of function encrypt
    Function encode:
    Finding entry points
    Branch analysis from position: 0
    Jump found. (Code = 42) Position 1 = 20
    Branch analysis from position: 20
    Jump found. (Code = 44) Position 1 = 23, Position 2 = 4
    Branch analysis from position: 23
    Jump found. (Code = 62) Position 1 = -2
    Branch analysis from position: 4
    Jump found. (Code = 43) Position 1 = 15, Position 2 = 18
    Branch analysis from position: 15
    Jump found. (Code = 42) Position 1 = 19
    Branch analysis from position: 19
    Jump found. (Code = 44) Position 1 = 23, Position 2 = 4
    Branch analysis from position: 23
    Branch analysis from position: 4
    Branch analysis from position: 18
    Jump found. (Code = 44) Position 1 = 23, Position 2 = 4
    Branch analysis from position: 23
    Branch analysis from position: 4
    filename:       /var/www/html/flag.php
    function name:  encode
    number of ops:  24
    compiled vars:  !0 = $string, !1 = $hex, !2 = $i, !3 = $tmp
    line     #* E I O op                           fetch          ext  return  operands
    -------------------------------------------------------------------------------------       3     0  E >   RECV                                             !0
       4     1        ASSIGN                                                   !1, ''
       5     2        ASSIGN                                                   !2, 0
             3      > JMP                                                      ->20
       6     4    >   INIT_FCALL                                               'dechex'
             5        INIT_FCALL                                               'ord'
             6        FETCH_DIM_R                                      $4      !0, !2
             7        SEND_VAR                                                 $4
             8        DO_ICALL                                         $4
             9        SEND_VAR                                                 $4
            10        DO_ICALL                                         $4
            11        ASSIGN                                                   !3, $4
       7    12        STRLEN                                           ~5      !3
            13        IS_EQUAL                                         ~4      ~5, 1
            14      > JMPZ                                                     ~4, ->18
       8    15    >   CONCAT                                           ~4      '0', !3
            16        ASSIGN_CONCAT                                 0          !1, ~4
            17      > JMP                                                      ->19
      10    18    >   ASSIGN_CONCAT                                 0          !1, !3
       5    19    >   PRE_INC                                                  !2
            20    >   STRLEN                                           ~5      !0
            21        IS_SMALLER                                       ~4      !2, ~5
            22      > JMPNZ                                                    ~4, ->4
      13    23    > > RETURN                                                   !1
    branch: #  0; line:     3-    5; sop:     0; eop:     3; out1:  20
    branch: #  4; line:     6-    7; sop:     4; eop:    14; out1:  15; out2:  18
    branch: # 15; line:     8-    8; sop:    15; eop:    17; out1:  19
    branch: # 18; line:    10-    5; sop:    18; eop:    18; out1:  19
    branch: # 19; line:     5-    5; sop:    19; eop:    19; out1:  20
    branch: # 20; line:     5-    5; sop:    20; eop:    22; out1:  23; out2:   4
    branch: # 23; line:    13-   13; sop:    23; eop:    23; out1:  -2
    path #1: 0, 20, 23,
    path #2: 0, 20, 4, 15, 19, 20, 23,
    path #3: 0, 20, 4, 18, 19, 20, 23,
    End of function encode
还原出的php逻辑和之前猜的一样。
    ](https://blog.zsxsoft.com/post/36)