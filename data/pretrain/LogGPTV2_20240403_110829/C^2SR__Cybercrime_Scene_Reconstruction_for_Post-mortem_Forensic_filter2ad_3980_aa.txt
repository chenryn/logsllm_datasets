title:C^2SR: Cybercrime Scene Reconstruction for Post-mortem Forensic
Analysis
author:Yonghwi Kwon and
Weihang Wang and
Jinho Jung and
Kyu Hyung Lee and
Roberto Perdisci
C2SR: Cybercrime Scene Reconstruction for
Post-mortem Forensic Analysis
1University of Virginia, 2University at Buffalo, SUNY, 3Georgia Institute of Technology, 4University of Georgia
Yonghwi Kwon1, Weihang Wang2, Jinho Jung3, Kyu Hyung Lee4, and Roberto Perdisci3,4
PI:EMAIL, PI:EMAIL, PI:EMAIL, {kyuhlee, perdisci}@uga.edu
Abstract—Cybercrime  scene  reconstruction  that  aims  to  re-
construct a previous execution of the cyber attack delivery process 
is  an  important  capability  for  cyber  forensics  (e.g.,  post  mortem 
analysis  of  the  cyber  attack  executions).  Unfortunately,  existing 
techniques  such  as  log-based  forensics  or  record-and-replay 
techniques  are  not  suitable  to  handle  complex  and  long-running 
modern applications for cybercrime scene reconstruction and post 
mortem  forensic  analysis.  Speciﬁcally,  log-based  cyber  forensics 
techniques often suffer from a lack of inspection capability and do 
not provide details of how the attack unfolded. Record-and-replay 
techniques  impose  signiﬁcant  runtime  overhead,  often  require 
signiﬁcant  modiﬁcations  on  end-user  systems,  and  demand  to 
replay  the  entire  recorded  execution  from  the  beginning.  In  this 
paper,  we  propose  C2SR,  a  novel  technique  that  can  recon-
struct  an  attack  delivery  chain  (i.e.,  cybercrime  scene)  for  post-
mortem forensic analysis. It provides a highly desired capability: 
interactable  partial  execution  reconstruction.  In  particular,  it 
reproduces a partial execution of interest from a large execution 
trace of a long-running program. The reconstructed execution is 
also interactable, allowing forensic analysts to leverage debugging 
and analysis tools that did not exist on the recorded machine. The 
key  intuition  behind  C2SR  is  partitioning  an  execution  trace  by 
resources  and  reproducing  resource  accesses  that  are  consistent 
with the original execution. It tolerates user interactions required 
for  inspections  that  do  not  cause  inconsistent  resource  accesses. 
Our  evaluation  results  on  26  real-world  programs  show  that 
C2SR has low runtime overhead (less than 5.47%) and acceptable 
space  overhead.  We  also  demonstrate  with  four  realistic  attack 
scenarios  that  C2SR  successfully  reconstructs  partial  executions 
of  long-running  applications  such  as  web  browsers,  and  it  can 
remarkably reduce the user’s efforts to  understand the incident.
I. 
INTRODUCTION
Exploiting  software  has  become  a  non-trivial  process  of 
chaining  multiple  exploits  in  various  software  layers.  This  is 
because exploiting a single vulnerability is often not sufﬁcient 
to  launch  a  successful  attack,  avoiding  various  protection 
techniques  such  as  ASLR.  As  a  result,  understanding  the 
attack  delivery  process  (i.e.,  how  a  security  incident  unfolds) 
is critical for attack attribution and identifying espionage. For 
example,  details  about  the  attack  delivery  processes  can  help 
reveal  malicious  actors  and  compromised  entities.
The  Association 
for  Crime  Scene  Reconstruction
(ACSR)  [32]  deﬁnes  crime  scene  reconstruction  (CSR)  as
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25  February  2021, Virtual
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.23128
www.ndss-symposium.org
“the forensic science discipline that aims to gain explicit
knowledge of the series of events that surround the commission
of a crime using deductive and inductive reasoning, physical
evidence, scientiﬁc methods, and their interrelationships.”
CSR is an invaluable component of post-mortem forensic
analysis because it reconstructs crime scenes, providing a
more intuitive understanding of the crime [15], [82].
In the context of cybercrime, a similar capability to CSR is
highly desirable. Reconstructing an execution of the attack de-
livery process to gain knowledge of the series of cyber events,
which we call cybercrime scene, for post-mortem forensic
analysis can open various opportunities. Speciﬁcally, cyber
forensic analysts can investigate the reconstructed execution
via various analysis tools, including malware analysis tools
and debuggers, to gain more knowledge of attacks.
Unfortunately, reconstructing a cybercrime scene (i.e., ex-
ecution of the attack process) of modern applications for
forensic analysis is challenging because (1) an exploit often
happens during a long-running execution of a complex and
concurrent application, requiring reconstruction of a large
portion of attack irrelevant execution and (2) user-interactions
on the reconstructed execution for forensic analysis (e.g.,
execution inspection) can cause new syscalls and instructions
to be executed, interfering with execution reconstruction tech-
nique (e.g., record-and-replay techniques). For instance,
in
some web attacks, such as malvertising attacks [20], [73],
[6], malicious payloads are often delivered through a chain
of multiple network servers. Reconstructing the malicious
payload delivery process from a long-running web browser
execution and allowing forensic analysts to use debuggers and
inspectors is desirable while difﬁcult to achieve.
Existing post-mortem analysis techniques are not suitable
to handle the above scenarios. Speciﬁcally, forensic analysis
techniques [49], [35], [54], [51], [65], [69], [10], [50] analyze
system events (e.g., syscall) to identify causal dependencies be-
tween system subjects (e.g., processes) and objects (e.g., ﬁles
and network addresses), and generate causal graphs. However,
they often suffer from the lack of inspection capability and
are unable to provide details of the incident. While record-and-
replay techniques can be used for post-mortem analysis as they
can replay a recorded execution, they also do not ﬁt well in
our scenario. Speciﬁcally, recording the ﬁne-grained program
execution [80], [5], [39], [70] often imposes signiﬁcant runtime
overhead. Coarse-grained record-and-replay techniques [27],
[42] focus on system-level events to reduce the overhead.
However, they often require modiﬁcations (e.g., customized
kernel) or hardware supports on end-user systems.
More importantly, we realize that
there are two criti-
cal capabilities required for cybercrime scene reconstruction:
(1) interactable execution reconstruction to allow analysts
to investigate the execution in greater detail and (2) partial
execution reconstruction from a long execution.
First, many recent attacks exploit various languages (e.g.,
JavaScript and WebAssembly) to leave fewer traces behind.
For instance, a script-based ﬁleless attack [88] is challenging
to understand only with the system- or instruction-level traces
(e.g., syscalls or instruction traces). Even if a forensic analyst
investigates a replayed execution of such an incident using
existing record-and-replay techniques, there exists a semantic
gap between the system-level execution and the malicious
payload delivered via high-level script. It is desirable, if not
necessary,
to leverage debugging tools for those scripting
languages and new technologies to unfold details of the attack.
However, existing record-and-replay techniques do not allow
attaching such additional software to replay execution because
they make a replay execution divert from its recording.
Second, most existing record-and-replay techniques require
to replay an entire recorded execution trace from the beginning
of the execution, even if a forensic analyst only wants to
reconstruct a certain part of the trace (e.g., a limited time
window around a suspected security incident). In our context,
this particularly limits the effectiveness of the techniques
because an analyst often wants to investigate a partial execution
of long-running applications such as web browsers and email
clients, which often run for days.
In this paper, motivated by the deﬁnition of crime scene
reconstruction (CSR), we propose an important cyber-forensic
capability, Cybercrime Scene Reconstruction (or C2SR), that
aims to reconstruct an attack delivery process (or cybercrime
scene), for post-mortem forensic analysis. To the best of
our knowledge, C2SR is the ﬁrst practical
technique that
enables both interactable and ﬁne-grained partial execution
reconstruction. In other words, C2SR allows a forensic analyst
to reconstruct a partial execution of a single task (e.g., a
single browser tab of a web browser) and interact with the
reconstructed execution, using debugging tools that are not
part of the recording. C2SR records system calls with their ar-
guments and then partitions the trace (i.e., the recorded system
calls) by resources, which we call resource-based execution
partitioning (§ IV-A). The key intuition of the resource-based
execution partitioning is that each autonomous execution (e.g.,
browser tabs) accesses resources in a disjoint way (i.e., differ-
ent browser tabs access separate sets of resources). Hence,
partitioning an execution trace by resources essentially slices
the execution between autonomous executions. In addition,
C2SR allows live interactions of a reconstructed execution
for forensic investigation purposes, as long as the interactions
do not cause resource accesses that cannot be reconstructed
via our new concept, consistent resource accesses, that allow
different yet reproducible resource accesses.
Our contributions are summarized as follows:
• We propose a new cyber forensic capability: cybercrime
scene reconstruction. To the best of our knowledge, this
is the ﬁrst technique that enables an interactable partial
execution reconstruction.
• We propose the novel concept of resource-based execution
partitioning, along with practical resource reconstruction
methods and algorithms for the cybercrime scene reconstruc-
tion. (§ IV-A and § IV-B).
• We develop and evaluate a prototype of C2SR. The evalua-
tion results show that C2SR’s partial execution is highly
effective in practical forensic investigations that
include
long-running and complex real-world applications such as
Firefox. C2SR can reproduce security incidents by recon-
structing less than 1% of the entire trace with reasonable
recording and execution reconstruction overhead: less than
5.47% and 8.31% respectively).
Scope. We compare our work with other research in the area
to draw a clear scope. Speciﬁcally, this research focuses on
reconstructing the cybercrime scene (i.e., a partial execution
that is directly related to the attack) for post-mortem forensic
analysis. In particular, we focus on enabling user interactions
with reconstructed execution so that a forensic analyst can
utilize various debugging or forensic tools that did not exist at
recording time. In contrast, record-and-replay techniques often
aim to replay recorded executions faithfully and determinis-
tically. They do not allow replay execution to diverge from
the recording, and thus, additional debugging or forensic tools
cannot be attached to the replay execution. C2SR does not aim
to provide a deterministic or faithful replay at the instruction-
level. Instead, we design and implement a novel technique to
reconstruct an interactable execution that is consistent with the
recorded execution trace at the resource access level.
Assumptions and Limitations. C2SR targets to reconstruct a
speciﬁc incident from a program running multiple tasks (e.g.,
a web-browser opens multiple tabs) where each task accesses
the resources in a disjointed way. C2SR would not be effective
if multiple tasks concurrently access the same resource in a
non-deterministic way. Furthermore, reproducing concurrency
bugs (i.e., executions that are sensitive to the resource access
orders) is out of this paper’s scope. Besides, we assume that all
the system resources are accessed through syscalls, and C2SR
captures resource-accessing syscalls. Although it is uncommon
in practice, if the resource is modiﬁed directly by the kernel
without invoking syscalls, we cannot capture them. In terms of
performance overhead, C2SR’s recording overhead is similar
to other log-based techniques leveraging syscall or library
hooking [49], [54], [51], [69], [10], [50], [92], [62].
II. MOTIVATING EXAMPLE
We use a realistic malicious advertisement attack (synthe-
sized from real-world incidents [97], [26]) to demonstrate the
effectiveness of C2SR in a forensic investigation scenario. In
this scenario, a victim uses Firefox to open multiple web pages
in multiple tabs, and one tab loads a malicious website that
downloads a malware (i.e., drive-by download).
A. Attack Scenario
The victim has nine browser tabs opened before it accesses
the compromised website. Then,
the victim opens a new
tab (the 10th tab) and navigates to www.forbes.com, which
happens to include a malicious online advertisement. The
malicious ad executes JavaScript code and secretly launches a
WebAssembly module in the user’s browser. The WebAssem-
bly module includes code that downloads a malware binary.
2
how the malicious payload that downloads the binary is
delivered. The analyst focuses on discovering technical details
of the attack delivery as well as identifying responsible entities
(e.g., web servers) involved with the attack.
Starting to Reconstruct
the Exploited Tab. To recon-
struct the attack delivery process of Tab 10 (that navigated
www.forbes.com), the analyst runs C2SR with Firefox and
provides the recorded execution trace as input. After Firefox
is launched, the default start page is loaded. Then, the analyst
types ‘www.forbes.com’ in the address bar to initiate the
execution reconstruction. When the browser connects to the
domain (e.g., sending a DNS request), C2SR hooks the API for
the DNS request (e.g., getaddrinfo()) and detects that there
is an autonomous task that starts from the network access to
www.forbes.com, meaning that the task can be reconstructed.
Then, it starts to reconstruct the recorded execution by redi-
recting resource accesses to reconstructed resources obtained
from the execution trace.
Resource-based Execution Partitioning. The essence of
C2SR that makes an interactable partial execution recon-
struction possible is the idea of resource based execution
partitioning. It is based on the observation that individual par-
tial executions from a long-running application mostly access
disjoint sets of resources, meaning that each partial execution
mostly accesses different resources from other executions, and
rarely interfere with them. Intuitively, each browser tab is inde-
pendent of other browser tabs. Hence, a partial execution can
be obtained by partitioning the execution trace by resources
accessed during the partial execution.
C2SR partitions an execution trace, consisting of syscalls,
by resource. Speciﬁcally, it ﬁrst groups syscalls that access the
same resource. For each group, all syscalls in the same group
access the same resource. For example, suppose that a program
receives contents from www.forbes.com. There will be a group
for www.forbes.com and it includes all the syscalls that access
(i.e., read and write) the www.forbes.com ﬁle exclusively.
C2SR reconstructs resources from the partitioned groups (of
syscalls) on individual resources, resulting in reconstructed
resources. Each reconstructed resource contains all the values
and states observed during the recording and is capable of
emulating the original resource (e.g., a web server). During
reconstructed execution, C2SR essentially hooks resource ac-
cessing syscalls to redirect them to access the reconstructed
resources. To this end, a partial
interactable reconstructed
execution is created. A forensic analyst is allowed to interact
with the reconstructed execution, including installing a new
software for inspection, as long as it does not prevent C2SR
from reproducing consistent resource accesses. The in-depth