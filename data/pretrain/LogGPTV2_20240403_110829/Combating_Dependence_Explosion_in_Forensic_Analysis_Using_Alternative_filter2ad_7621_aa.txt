title:Combating Dependence Explosion in Forensic Analysis Using Alternative
Tag Propagation Semantics
author:Md Nahid Hossain and
Sanaz Sheikhi and
R. Sekar
2020 IEEE Symposium on Security and Privacy
Combating Dependence Explosion in Forensic Analysis
Using Alternative Tag Propagation Semantics
Md Nahid Hossain
R. Sekar
{mdnhossain,ssheikhi,sekar}@cs.stonybrook.edu
Stony Brook University, Stony Brook, NY, USA.
Sanaz Sheikhi
Abstract—We are witnessing a rapid escalation in targeted cyber-
attacks called Advanced and Persistent Threats (APTs). Carried out
by skilled adversaries, these attacks take place over extended time
periods, and remain undetected for months. A common approach for
retracing the attacker’s steps is to start with one or more suspicious
events from system logs, and perform a dependence analysis to
uncover the rest of attacker’s actions. The accuracy of this analysis
suffers from the dependence explosion problem, which causes a very
large number of benign events to be flagged as part of the attack.
In this paper, we propose two novel techniques, tag attenuation and
tag decay, to mitigate dependence explosion. Our techniques take
advantage of common behaviors of benign processes, while providing
a conservative treatment of processes and data with suspicious
provenance. Our system, called MORSE, is able to construct a compact
scenario graph that summarizes attacker activity by sifting through
millions of system events in a matter of seconds. Our experimental
evaluation, carried out using data from two government-agency
sponsored red team exercises, demonstrates that our techniques are
(a) effective in identifying stealthy attack campaigns, (b) reduce the
false alarm rates by more than an order of magnitude, and (c) yield
compact scenario graphs that capture the vast majority of the attack,
while leaving out benign background activity.
Introduction
I.
There has been a spate of targeted high-profile attacks on many
large enterprises, including Target [13], Equifax [1], Deloitte [11]
and the US Office of Personnel Management (OPM) [9]. Often
called “Advanced and Persistent Threats” (APTs) [2], these are
sophisticated attack campaigns carried out by skilled attackers.
For instance, the OPM breach lasted more than 8 months, and
leaked highly sensitive information used in security clearance of
21.5M individuals [9]. The Equifax breach went undetected for
2.5 months, and compromised sensitive information such as social
security numbers of over 140M users.
Unlike traditional malware attacks that are indiscriminate, APTs
choose their targets deliberately, e.g., high-value data such as
intellectual property and financial, account or health information.
They are able to bypass existing defenses using a combination of
social engineering and advanced exploit techniques. Consequently,
intrusion detection systems (IDS), often called Security Information
and Event Management (SIEM) systems (e.g., IBM QRadar [5]),
are the first to flag signs of these attacks. Unfortunately, today’s
IDS face many challenges against sophisticated APTs:
• Needle-in-a-haystack: Today’s systems employ a wide range of
IOCs (“indicators of compromise”) that capture isolated indi-
cators such as malware signatures, abnormal traffic volume, or
modification of specific Windows registry keys. Unfortunately,
many of these IOCs may be triggered by benign activities
This work was supported primarily by DARPA (contract FA8650-15-C-7561),
and in part by grants from NSF (CNS-1918667) and ONR (N00014-17-1-2891).
© 2020, Md Nahid Hossain. Under license to IEEE.
DOI 10.1109/SP40000.2020.00064
1139
as well. Since attacks constitute relatively rare events among
billions of benign background events, a flood of false positives
results, making it extremely difficult to identify real attacks.
• Connecting the dots: Although existing systems can identify in-
dividual events that trigger IOCs, they don’t provide much help
in understanding the “big picture.” To respond to sophisticated
APTs in real-time, techniques are needed to connect seemingly
disparate low-level events to uncover an overall campaign.
• Scaling and performance: Even a relatively small enterprise
with hundreds of hosts can generate terabytes of audit and
security event logs every day [89], [31]. Many detection and
analysis tasks require graph searches that can be very expensive
when operating on such large datasets.
Consequently, human analysts today find it very difficult to
understand the progression of APT campaigns, causing them to
remain undetected for months [13], [59], [1], [11], [9].
Provenance-based Detection and Forensics
Researchers have proposed the use of provenance to overcome
some of the difficulties summarized above. For attack detection,
provenance provides additional context to prune away false
positives that result when events are considered in isolation. For
instance, it is common for processes to execute scripts or load
binary code during normal operation, but the very same actions may
be used in attacks. Using provenance, also called taintedness in this
line of research, it is possible to distinguish between benign behavior
and attacks such as control-flow hijack, SQL injection and cross-site
scripting [75], [62], [63], [86], [71], or malware execution [30].
For forensic analysis, Backtracker [36] used coarse-grained
provenance from system-call logs to construct a dependence
graph of system events. Given a system event corresponding to an
attacker action, a backward graph search can be used to identify
the potential entry point (e.g., IP address) of this attack. Then, a
forward search from the entry point can be used to understand the
totality of attacker’s actions. These backward and forward analyses
serve to connect together all of the attacker’s steps, thus presenting
the overall attack scenario to a cyber analyst.
Dependence Explosion
Most forensic analysis techniques [36], [26], [30], [51], [57]
operate on the basis of coarse-grained provenance. In particular,
if a subject (i.e., a process) reads from a network source, then
all subsequent writes by the subject are treated as (potentially)
dependent on the network source. This leads to a dependence
explosion, as every output of a process becomes dependent on
every earlier input operation. The impact of this explosion is severe
for long-running processes such as web browsers, email readers,
and network servers. Unfortunately, such long-running processes
generate the bulk of the activities on today’s systems. Dependence
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:08 UTC from IEEE Xplore.  Restrictions apply. 
explosions can also occur due to files that are read and written
by numerous processes, e.g.,
.bash history. Coarse-grained
provenance causes all readers of this file (i.e., all instances of bash
shell processes) to be dependent on all writers (i.e., all previous
bash processes). Consequently, a straight-forward application of
forward analysis can result in a graph with millions of nodes, a size
far too large to be understood by an analyst.
Fine-grained Provenance
Fine-grained information flow tracking [62], [87], [14], [35] can
trace back specific output bytes of a process to specific input bytes
consumed by it. As a result, a single output can often be associated
with a single input, thereby avoiding the massive precision loss
incurred by coarse-grained tracking.
A major challenge faced by fine-grained tracking techniques is
their high performance overhead, ranging from 2x to 10x. But an
even bigger problem is the need for extensive instrumentation of ap-
plications and/or OS code [62], [87], [14], [35], [53], [52], [32], [33].
Consequently, enterprises cannot rely on fine-grained provenance
unless vendors ship their applications with such instrumentation.
There is no indication that such a measure is under consideration by
any vendor, so enterprises are limited to coarse-grained dependence
for the foreseeable future. Indeed, coarse-grained provenance track-
ing is already built into today’s OSes such as Linux (Linux auditing
system) and Windows (ETW — Event Tracing for Windows).
Previous Mitigation Techniques and Limitations
Recognizing the difficulties of obtaining fine-grained provenance
data, researchers have begun to develop alternative techniques to
mitigate dependence explosion in COTS audit data. SLEUTH [30]
associates a cost measure with each edge in the dependence graph,
and prunes away higher-cost paths to arrive at compact scenario
graphs summarizing attacker activity. While this approach is effec-
tive on fast moving attacks, we find that for long-running attacks,
it can produce graphs with numerous benign nodes. HOLMES [57]
exploits the multi-stage structure of typical APTs to generate a com-
pact high-level scenario graph (HSG). However, it faces challenges
on APTs that lack this structure, e.g., ransomware attacks.
PRIOTRACKER [51] prioritizes edges that represent anomalous
dependencies (i.e., dependencies rarely been witnessed before) in
order to speed up forensic investigations. NODOZE [29] generalizes
the approach to target anomalous paths rather than individual edges.
An important drawback of anomaly based approaches is the need
for representative training data. Problems with training data can
lead to false positives, false negatives, or both.
Even more important, both PRIOTRACKER and NODOZE
aim to identify attacker activities that are usually performed by
attacker-provided malware. They assume that these activities
will be anomalous, and differ from benign background activity.
Unfortunately, attackers have a great deal of control over the
behavior of their malware, and can hence intentionally avoid
unusual dependencies that trigger these systems.
We therefore propose a new approach that:
• avoids optimistic assumptions about malware behavior,
• avoids the need for any training data,
• significantly reduces dependence explosion, and
• yields compact scenario graphs, even for stealthy campaigns.
We have implemented our approach into a tool called MORSE.
A. Approach Overview and Summary of Contributions
We begin with a motivating example in Section II that illustrates the
challenges in detecting and summarizing stealthy attack campaigns.
We then introduce our techniques for mitigating dependence
explosion in Section III. As is common with information flow
techniques, we associate tags with data items, and propagate these
tags along with the data. We identify two types of tags:
• data tags that capture the integrity and confidentiality aspects
• subject tags that are associated only with subjects, and indicate
of a data item, and
our level of suspicion that a particular subject is malicious.
The core idea behind our approach is to modulate tag propagation
using subject tags. In particular, our tag propagation rules are
lenient on benign subjects, and take advantage of their typical
behaviors in order to reduce dependence explosion. At the same
time, we use conservative tag propagation rules for suspicious
subjects that may be under the direct control of attackers.
We introduce two key concepts, tag attenuation and tag decay
that mitigate dependence explosion through benign processes. Tag
decay captures the intuition that a benign subject, if it is subverted
and becomes malicious, will do so soon after consuming suspicious
input that contains an exploit. For this reason, we allow the data
tags of benign subjects to decay gradually and become benign over
time, unless they exhibit suspicious behavior. This feature breaks
the dependency between suspicious inputs and outputs of a benign
subject after a certain threshold of time.
to contain an exploit
Tag attenuation captures the intuition that objects serve as
imperfect
intermediaries for propagating malicious behavior
through benign subjects. In particular, each such propagation
requires the intermediary object
that
compromises the subject that consumes it. To capture the difficulty
of creating a series of such exploits, we attenuate data tags of a
benign subject before propagating it to the object that it writes into.
In Section IV, we present a policy-based attack detection
approach that takes advantage of tag attenuation and decay to
significantly reduce false positives. Our techniques for attack
campaign reconstruction are described in Section V.
The implementation of MORSE is sketched in Section VI. We
use the motivating example from Section II to illustrate its operation
in Section VII. Our experimental evaluation (Section VIII) shows
that MORSE is effective in detecting a range of stealthy APT-style
campaigns, where some of the critical steps are invisible in the data.
For instance, our system was able to detect campaigns that relied on:
• previously stolen credentials,
• in-memory (rather than file-based) malware, and
• preexisting malware on the target system, including instances
of rootkits, Trojan ssh servers and kernel malware.
Our tag attenuation and decay techniques decreased false positives
by an order of magnitude, while reducing scenario graph sizes by
35x, all without missing any significant attacker activity. Evasion
attacks and lateral movement are also discussed in Section VIII,
followed by related work and conclusions in Sections IX and X.
II. Motivating Attack Scenario
In this section, we illustrate the problem of dependency explosion
using an attack scenario from a recent red team engagement that was
carried out as part of a research program organized by a government
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:08 UTC from IEEE Xplore.  Restrictions apply. 
1140
Fig. 1: Motivating example: CCleaner ransomware. Rectangles denote subjects (processes), while oval-shaped nodes denote files and diamonds denote network objects.
Edges denote events, and are oriented in the direction of information flow. Edges without a specific event label denote reads and writes.
agency. The red team’s goal was to organize a highly stealthy
ransomware attack, with the following stealth and evasive elements:
• Stolen credentials. The red team assumed that the login
credentials of the victim user had already been stolen by the
attacker. This enabled the attacker to gain access to the victim
machine without raising any suspicion.
• Use of malware matching a benign application. The red team
made use of malware named ccleaner that was crafted to
evade virus signatures. Note that ccleaner [85] is a widely used
application that analyzes all files and removes unneeded and
unwanted files. This behavior blends in perfectly with that of
ransomware that reads/encrypts/removes many files.
• Extensive interaction with benign background activity. A
benign backup task periodically copied over all user files to a
backup server, including files created by the attacker’s malware.
Moreover, malware execution made use of benign supporting
processes such as dbus-launch.
Fig. 1 shows a fragment of the dependence graph (also known
as provenance graph) relating to this attack, constructed from the
audit log produced by the Linux auditd daemon. Rectangles in
this graph are subjects (processes), while objects are depicted as
ovals (files) and diamonds (network connections). Edges in the
graph correspond to system events such as read, write, load,
fork, execve, and so on. Edges are oriented in the direction of
information flow, and annotated with event names. To reduce
clutter, we omit annotations on read and write edges.
Logically, the attack begins with the theft of login credentials
for the user Bob, but this step is assumed to have taken place
“out-of-band” and is not visible in the audit data. Using these
credentials, the attacker Trudy logs into Bob’s machine B using
ssh. There are numerous logins into B, as shown at the left end
of Fig. 1. Some of these are by Bob and others may be by Trudy.
To reduce clutter, we elide the details of these ssh sessions, except
the one corresponding to the attack.
In the ssh session corresponding to the attack, Trudy downloads
ccleaner malware using scp, and then executes it. This malware
analyzes the files in Bob’s home directory. It selects several files to
hold as ransom. Each of these files are replaced with their encrypted
versions, which are indicated with a .tkn suffix in the figure.
When ccleaner starts up, it also executes dbus-launch, a behavior
associated with some of the libraries and toolkits used by it.
In a parallel ssh session, Bob logs into B and initiates a backup
of the files in his home directory to a second host A. This activity
is shown at the left bottom of Fig. 1, and happens to take place
immediately after the ransomware attack.
Note that benign activities surrounding the attack far exceed
the attack activity. To reduce clutter, we have elided many of
these benign activities, including: many ssh sessions for Bob, the
details of all the files that were backed up, subsequent activities
of dbus-launch, and so on. If those details were included, then
the picture will be at least 10 times larger.
Challenges:
This attack poses many challenges for detection
and forensic analysis tools. By using stolen credentials, Trudy
enters the system without triggering any alarms related to typical
break-in activities, e.g., scanning for and exploiting known
vulnerabilities, or clicking on email attachments. By using novel
malware with a disguised name, Trudy avoids triggering most code
signature and file-name based malware detectors. By blending with
the behavior of legitimate ccleaner program, Trudy can also evade
behavior-based and anomaly-based attack detectors. In contrast,