Experience’ 11, 11 (Movenber 1981), 1119—1184.
我们将把这段文本复制进我们的文本编辑器并且保存文件名为fmt-info.txt。现在，让我们
重新格式这个文本并且让它成为一个50个字符宽的项目。我们能用-w选项对文件进行处理：
[ne@linuxbox -]$ fnt -v 50 fnt-info.txt I head
'fnt° reads fron the specified FILE arguments
(or standard input if
none aze given) , and urites to standard output.
By default, blank lines, spaces betveen words,
preserved in the output; successive input lines
vith different indentation are not joined; tabs
are expanded on input and introduced on output.
好，这真是一个奇怪的结果。大概我们应该认真的阅读这段文本，因为它恰好解释了发生了
什么：
默认情况下，输出会保留空行，单词之间的空格，和缩进；持续输入的具有不同缩进的文本
行不会连接在一起：tab字符在输入时会展开，输出时复原。
所以，fnt会保留第一行的缩进。幸运的是，fnt提供了一个选项来更正这种行为：
好多了。通过添加-c选项，现在我们得到了所期望的结果。
fmnt有一些有意思的选项：
这个-P选项尤为有趣。通过它，我们可以格式文件选中的部分，通过在开头使用一样的符
号。很多编程语言使用锚标记（#）去提醒注释的开始，而且它可以通过这个选项来被格式
让我们创建一个有用到注释的程序。
317
---
## Page 319
[ne@linuxbox -]$ cat > fnt-code.txt
# This file contains code vith comments.
# This line is a conment.
# Folloved by another coanent line.
  #
This, on the other hand, is a line of code.
And another line of code.
And another.
用fmt，我们能格式注释并且不让代码被触及。
xapo-sug , #, d-os a-4ug s[- xoqxnuou]
# This file contains code vith comments.
# This line is a conment. Folloved by another
# connent line. And another.
This, on the other hand, is a line of code.
And another line of code.
And another.
注意相邻的注释行被合并了，空行和非注释行被保留了。
22.1.4pr一格式化打印文本
pr程序用来把文本分页。当打印文本的时候，经常希望用几个空行在输出的页面的顶部或底部
添加空白。此外，这些空行能够用来插入到每个页面的页眉或页脚。
下面我们将演示pr的用法。我们准备将distros.txt这个文件分成若干张很短的页面（仅展
示前两张页面）：
[ne@linuxbox -]$ pr -1 15 =g 65 distros.txt
20081211 18:27
distros.txt
Page 1
318
---
## Page 320
SUSE
10.2
12/07/2006
Fedora
10
11/25/2008
SUSE
11.0
06/19/2008
Ubuntu
8.04
04/24/2008
Fedora
8
11/08/2007
200812-11 18:27
distros.txt
Page 2
10.3
10/04/2007
Ubuntu
6.10
10/26/2006
Fedora
7
05/31/2007
Ubuntu
7.10
10/18/2007
Ubuntu
7.04
04/19/2007
在上面的例子中，我们用-1选项（页长）和-w选项（页宽）定义了宽65列，长15行的一
个“页面”。pr为distros.txt中的内容编订页码。用空行分开各页面，生成了包含文件修改时
间、文件名、页码的默认页眉。pr指令拥有很多调整页面布局的选项，我们将在下一章中进一
步探讨。
22.1.5 printf —Format And Print Data
与本章中的其他指令不同，printf井不用于流水线执行（不接受标准输入）。在命令行中，它也
鲜有运用（它通常被用于自动执行指令中）。所以为什么它如此重要？因为它被广泛使用。
的多种语言中运用。事实上，在bash中，printf是内置的°printf这样工作：
printf“fornat”argunents
首先，发送包含有格式化描远的字符串的指令，接着，这些描述被应用于参数列表上。格式
化的结果在标准输出中显示。下面是一个小例子：
[ne@linuxbox -]$ printf "I formatted the string: %s\na foo
I fornatted the string: foo
319
---
## Page 321
）
转义序列（例如\n，换行符）和以%字符开头的序列，这被称为转换规范。在上面的例子中，转
og uus  se ,, pexog I yuad s[- xoqxuou]
I fornatted ‘foo' as a string
我们可以看到，在命令行输出中，转换规范%s被字符串“foo”所替代。s转换用于格式化
字符串数据。还有其他转换符用于其他类型的数据。此表列出了常用的数据类型：
组件
描远
d
将数字格式化为带符号的十进制整数
f
格式化并输出浮点数
0
将整数格式化为八进制数
8
将字符串格式化
x
将整数格式化为十六进制数，必要时使用小写a-f
X
与x相同，但变为大写
%
打印%符号（比如，指定“%%”）
表22-5:printf转换规范组件
下面我们以字符串“380”为例，展示每种转换符的效果。
[ne@linuxbox -]$ printf *%d, %f, %o, %s, %x, %X\n* 380 380 380 380 380 380
380, 380.000000, 574, 380, 17c, 17C
由于我们指定了六个转换符，我们还必须为printf提供六个参数进行处理。下面六个结果
展示了每个转换符的效果。可将可选组件添加到转换符以调整输出。完整的转换规范包含以下
内容：
%[flags][vidth] [ precision]conversion_specification
320
---
## Page 322
使用多个可选组件时，必须按照上面指定的顺序，以便准确编译。以下是每个可选组件的描
述：
组件
描迹
flags
有5种不同的标志：#一使用“备用格式”输出。这取决于
数据类型。对于o（八进制数）转换，输出以0为前缀.对于
x和X（十六进制数）转换，输出分别以0x或0X为前缀。
0一（零）用零填充输出。这意味着该字段将填充前导零，比
如“000380”。
一（破折号）左对齐输出。默认情况下，printf右对齐输出。
一（空格）在正数前空一格。
+一（加号）在正数前添加加号。默认情况下，printf只在负
数前添加符号。
width
指定最小字段宽度的数。
 -precision
对于浮点数，指定小数点后的精度位数。对于字符申转换，
指定要输出的字符数。
表22-5:printf转换规范组件
以下是不同格式的一些示例：
自变量
格式
结果
备注
380
"%d*
380
简单格式化
整数。
380
"%#x
0x17c
使用“替代
格式”标志
将整数格式
化为十六进
制数°
321
---
## Page 323
380
"%05d
00380
用前导零
(padding)格
式化整数，
且最小字段
宽度为五个
字符。
380
"%05.5f”
380.00000
使用前导零
和五位小数
位精度格式
化数字为浮
点数。由于
指定的最小
字段宽度（5）
小于格式化
后数字的实
际宽度，因
此前导零这
一命令实际
上没有起到
作用。
089
%010.5f"
0380.00000
将最小字段
宽度增加到
10.前导零
现在变得可
见。
380
"%+d”
+380
使用+标
志标记正
数。
380
"%-d*
380
使用-标志
左对齐
322
---
## Page 324
abcdefghijk
“%5s"
abcedfghijk
用最小字段
宽度格式化
字符串。
abcdefghijk
"%d”
abcde
对字符串应
用精度，它
被从中截
断。
表22-6:print转换规范示例
再次强调，printf主要用在脚本中，用于格式化表格数据，而不是直接用于命令行。但是我
们仍然可以展示如何使用它来解决各种格式化问题。首先，我们输出一些由制表符分隔的字段
dx]
str1 str2 str3
通过插入\t（tab的转义序列），我们实现了所需的效果。接下来，我们让一些数字的格式变
得整齐：
01u\p9t+ =amsog 91 P0% :ouryuad s[-xoqxmuou]
3.14156295 32589
Line: 01071 3.142 Resu1t : +32589
这显示了最小字符宽度对字符间距的影响。或者，让我们看看如何格式化一个小网页：
[ne@linuxbox -]$ printf "\n\t\n\t\t%s\n
Ieu\\\\g\\u\\u\\
le* *Page Content"
Page Title
323
---
## Page 325
Page Content
22.2Document Formatting Systems
22.3文件格式化系统
到目前为止，我们已经查看了简单的文本格式化工具。这些对于小而简单的任务是有好处的
但更大的工作呢？Unix在技术和科学用户中流行的原因之一（除了为各种软件开发提供强大的
多任务多用户环境之外），是它提供了可用于生成许多类型文档的工具，特别是科学和学术出版
物。事实上，正如GNU文档所描述的那样，文档准备对于Unix的开发起到了促进作用：
UNIX的第一个版本是在位于贝尔实验室的PDP-7上开发的。在1971年，开发人员想要
获得PDP-11进一步开发操作系统。为了证明这个系统的成本是合理的，他们建议为AT&
T专利部门创建文件格式化系统。第一个格式化程序是由J.F.Ossanna撰写的，重新实现了