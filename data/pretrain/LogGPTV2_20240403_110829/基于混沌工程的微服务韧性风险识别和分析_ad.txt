### 代码优化

```python
def _searchSource(graph, node, search_result):
    """
    子算法: 在 graph 中搜索影响节点 node 的节点，并将结果存储在 search_result 中。
    """
    links = getLinks(graph, node)  # 获取 graph 中所有包含 node 的边的集合 links
    if len(links) < 1:
        return  # 如果 node 的邻接节点中没有需要继续追溯的节点，则停止链路搜索
    
    sub_graph = graph.remove(links)  # 构建新的子图，以保证从两个方向都能追溯的边不会被重复搜索
    links = sorted(links, key=lambda x: x.weight, reverse=True)  # 根据边的权重排序，权重较高的边优先输出
    
    for link in links:
        other_node = link.get_other_node(node)  # 获取 link 中除 node 外的另一个端点
        child_result = {
            'node': other_node,
            'children': []
        }
        search_result['children'].append(child_result)
        _searchSource(sub_graph, other_node, child_result)  # 递归方式继续追溯链路

def _build_path_strings(node_children, cur_string, path_strings):
    """
    子算法: 在缓存路径 cur_string 后根据 children 继续构建链路。
    """
    if not node_children:
        return  # 如果没有后续节点，则停止构建链路
    
    path_strings.remove(cur_string)  # 在最终输出链路中删除缓存链路
    
    for child in node_children:
        new_string = f"{child.name} → {cur_string}"  # 构建新的缓存链路
        path_strings.append(new_string)  # 在最终输出中添加缓存链路
        _build_path_strings(child.children, new_string, path_strings)  # 递归调用链路生成方法以输出所有可能的链路
```

### 案例研究及结果分析

为了验证本文提出的微服务韧性风险识别和分析方法的有效性，我们选择了由文献[77]所提出的微服务基线测试套件 Sock-Shop (https://microservices-demo.github.io/) 作为实验对象。本案例研究旨在验证以下问题：

1. 本文提出的韧性风险识别方法是否能够自动地识别出目标系统的韧性风险？
2. 本文提出的韧性风险分析方法是否能够有效地分析出目标系统在发生韧性风险时的因果影响链路？

#### 目标系统及实验环境

**Sock-Shop 系统架构**

如图 9 所示，Sock-Shop 系统由前端 (front-end)、订单服务 (order)、支付服务 (payment)、用户服务 (user)、商品详情服务 (catalogue)、购物车服务 (cart) 以及邮寄服务 (shipping) 这几个微服务组成。每个微服务均可以独立运行且拥有独立的数据库。为了保持微服务技术异构性的特点，不同微服务的实现语言及使用的数据库各不相同。微服务之间的通信主要采用 HTTP 协议，并使用了 RESTful 接口设计风格。

![Sock-Shop 系统架构图](fig9.png)

**部署环境**

图 10 展示了 Sock-Shop 的部署环境。整个部署环境由一个控制服务器和一个由一个 Master 节点及三个 Worker 节点组成的 Kubernetes 集群管理平台构成。Sock-Shop 系统被部署在 Kubernetes 集群上，每个微服务在一个或多个容器上运行。控制服务器负责自动化实现韧性风险识别方法。Jenkins 容器负责 Sock-Shop 系统的自动部署和混沌实验，Locust 工具用于模拟应用压力场景，Chaos-Toolkit 工具用于实现系统环境扰动。部署环境中的各个服务器配置相同，具体配置见表 1。所有容器均按默认配置部署，未对资源分配进行额外设置。

![Sock-Shop 部署环境](fig10.png)

| 配置 | 参数 |
|---|---|
| 操作系统 | Ubuntu Server 16.04 |
| CPU | Intel Xeon E5-2620 * 2 |
| 内存 | 64GB DDR4 |
| 磁盘 | 3TB |
| 网卡 | 1000Mb/s |

上述目标系统和实验环境满足了本文第 2.1 节中提出的各项系统前提：自动化部署组件 Jenkins 与 Sock-Shop 提供的 Kubernetes 部署配置文件满足了条件 (1) 的系统自动化构建能力；Sock-Shop 系统已处于可发布运行的状态，因此满足条件 (2)；Kubernetes 本身集成的时序数据收集工具 Prometheus 使目标系统满足了条件 (3)。案例研究将首先按照条件 (4) 和条件 (5) 提出的假设下对目标系统进行韧性风险识别。

#### Sock-Shop 的韧性风险识别

为了验证研究问题 1，我们将根据本文第 2 节提出的韧性风险识别方法寻找 Sock-Shop 系统中的韧性风险。

##### 服务性能指标

在 Sock-Shop 中，所有用户操作均为网页端的点击操作，因此系统服务均为事务性的 HTTP 服务。在本案例研究中，服务平均响应时间和响应成功率被作为所有服务的基础性能指标。核心服务的服务性能指标将根据业务关注点设立。表 2 展示了针对 Sock-Shop 系统各服务所设计的服务性能指标。

| 服务 | 服务性能指标名称 | 描述 |
|---|---|---|

希望这些优化后的文本能够更加清晰、连贯和专业。如果有进一步的需求或修改，请告诉我！