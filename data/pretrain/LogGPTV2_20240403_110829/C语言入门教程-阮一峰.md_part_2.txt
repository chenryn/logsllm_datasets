常⽤的占位符除了 ，还有 表示代⼊的是字符串。
%i %s
printf("%s will come tonight\n", "Jane");
上⾯示例中， 表示代⼊的是⼀个字符串，所以 的第⼆个参数就必须是字符串，这个例⼦是
%s printf()
。执⾏后的输出就是 。
Jane Jane will come tonight
输出⽂本⾥⾯可以使⽤多个占位符。
printf("%s says it is %i o'clock\n", "Ben", 21);
上⾯示例中，输出⽂本 有两个占位符，第⼀个是字符串占位符 ，第⼆个是整
%s says it is %i o'clock %s
数占位符 ，分别对应 的第⼆个参数（ ）和第三个参数（ ）。执⾏后的输出就是
%i printf() Ben 21 Ben
。
says it is 21 o'clock
参数与占位符是⼀⼀对应关系，如果有 个占位符， 的参数就应该有 个。如
printf() n printf() n + 1
果参数个数少于对应的占位符， 可能会输出内存中的任意值。
printf()
的占位符有许多种类，与 C 语⾔的数据类型相对应。下⾯按照字⺟顺序，列出常⽤的占位符，
printf()
⽅便查找，具体含义在后⾯章节介绍。
：浮点数。
%a
：浮点数。
%A
：字符。
%c
：⼗进制整数。
%d
：使⽤科学计数法的浮点数，指数部分的 为⼩写。
%e e
：使⽤科学计数法的浮点数，指数部分的 为⼤写。
%E E
：整数，基本等同于 。
%i %d
：⼩数（包含 类型和 类型）。
%f float double
：6 个有效数字的浮点数。整数部分⼀旦超过 6 位，就会⾃动转为科学计数法，指数部分的
%g
为⼩写。
e
：等同于 ，唯⼀的区别是指数部分的 为⼤写。
%G %g E
：⼗进制 short int 类型。
%hd
：⼋进制 short int 类型。
%ho
：⼗六进制 short int 类型。
%hx
：unsigned short int 类型。
%hu
：⼗进制 long int 类型。
%ld
：⼋进制 long int 类型。
%lo
：⼗六进制 long int 类型。
%lx
：unsigned long int 类型。
%lu
：⼗进制 long long int 类型。
%lld
：⼋进制 long long int 类型。
%llo
：⼗六进制 long long int 类型。
%llx
：unsigned long long int 类型。
%llu
：科学计数法表示的 long double 类型浮点数。
%Le
：long double 类型浮点数。
%Lf
：已输出的字符串数量。该占位符本身不输出，只将值存储在指定变量之中。
%n
：⼋进制整数。
%o
：指针。
%p
：字符串。
%s
：⽆符号整数（unsigned int）。
%u
：⼗六进制整数。
%x
： 类型。
%zd size_t
：输出⼀个百分号。
%%
输出格式 #
可以定制占位符的输出格式。
printf()
（1）限定宽度
允许限定占位符的最⼩宽度。
printf()
printf("%5d\n", 123);
上⾯示例中， 表示这个占位符的宽度⾄少为 5 位。如果不满 5 位，对应的值的前⾯会添加空格。
%5d
输出的值默认是右对⻬，即输出内容前⾯会有空格；如果希望改成左对⻬，在输出内容后⾯添加空格，可
以在占位符的 的后⾯插⼊⼀个 号。
% -
printf("%-5d\n", 123);
上⾯示例中，输出内容 的后⾯添加了空格。
123
对于⼩数，这个限定符会限制所有数字的最⼩显示宽度。
printf("%12f\n", 123.45);
上⾯示例中， 表示输出的浮点数最少要占据 12 位。由于⼩数的默认显示精度是⼩数点后 6 位，所
%12f
以 输出结果的头部会添加 2 个空格。
123.45
（2）总是显示正负号
默认情况下， 不对正数显示 号，只对负数显示 号。如果想让正数也输出 号，可以在占
printf() + - +
位符的 后⾯加⼀个 。
% +
printf("%+d\n", 12);
printf("%+d\n", -12);
上⾯示例中， 可以确保输出的数值，总是带有正负号。
%+d
（3）限定⼩数位数
输出⼩数时，有时希望限定⼩数的位数。举例来说，希望⼩数点后⾯只保留两位，占位符可以写成 。
%.2f
printf("Number is %.2f\n", 0.5);
上⾯示例中，如果希望⼩数点后⾯输出 3 位（ ），占位符就要写成 。
0.500 %.3f
这种写法可以与限定宽度占位符，结合使⽤。
printf("%6.2f\n", 0.5);
上⾯示例中， 表示输出字符串最⼩宽度为 6，⼩数位数为 2。所以，输出字符串的头部有两个空
%6.2f
格。
最⼩宽度和⼩数位数这两个限定值，都可以⽤ 代替，通过 的参数传⼊。
* printf()
printf("%*.*f\n", 6, 2, 0.5);
printf("%6.2f\n", 0.5);
上⾯示例中， 的两个星号通过 的两个参数 和 传⼊。
%*.*f printf() 6 2
（4）输出部分字符串
占位符⽤来输出字符串，默认是全部输出。如果只想输出开头的部分，可以⽤ 指定输出的⻓
%s %.[m]s
度，其中 代表⼀个数字，表示所要输出的⻓度。
[m]
printf("%.5s\n", "hello world");
上⾯示例中，占位符 表示只输出字符串 “hello world” 的前 5 个字符，即“hello”。
%.5s
标准库，头⽂件 #
程序需要⽤到的功能，不⼀定需要⾃⼰编写，C 语⾔可能已经⾃带了。程序员只要去调⽤这些⾃带的功
能，就省得⾃⼰编写代码了。举例来说， 这个函数就是 C 语⾔⾃带的，只要去调⽤它，就能实
printf()
现在屏幕上输出内容。
C 语⾔⾃带的所有这些功能，统称为 “标准库”（standard library），因为它们是写⼊标准的，到底包括哪
些功能，应该怎么使⽤的，都是规定好的，这样才能保证代码的规范和可移植。
不同的功能定义在不同的⽂件⾥⾯，这些⽂件统称为 “头⽂件”（header file）。如果系统⾃带某⼀个功
能，就⼀定还会⾃带描述这个功能的头⽂件，⽐如 的头⽂件就是系统⾃带的 。头⽂件的
printf() stdio.h
后缀通常是 。
.h
如果要使⽤某个功能，就必须先加载对应的头⽂件，加载使⽤的是 命令。这就是为什么使⽤
#include
之前，必须先加载 的原因。
printf() stdio.h
#include 
注意，加载头⽂件的 语句不需要分号结尾，详⻅《预处理器》⼀章。
#include
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
变量 语⾔教程 ⽹道
- C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
变量（varible）可以理解成⼀块内存区域的名字。通过变量名，可以引⽤这块内存区域，获取⾥⾯存储的
值。由于值可能发⽣变化，所以称为变量，否则就是常量了。
变量名 #
变量名在 C 语⾔⾥⾯属于标识符（identifier），命名有严格的规范。
只能由字⺟（包括⼤写和⼩写）、数字和下划线（ ）组成。
_
不能以数字开头。
⻓度不能超过 63 个字符。
下⾯是⼀些⽆效变量名的例⼦。
$zj
j**p
2cat
Hot-tab
tax rate
don't
上⾯示例中，每⼀⾏的变量名都是⽆效的。
变量名区分⼤⼩写， 、 、 都是不同的变量。
star Star STAR
并⾮所有的词都能⽤作变量名，有些词在 C 语⾔⾥⾯有特殊含义（⽐如 ），另⼀些词是命令（⽐如
int
），它们都称为关键字，不能⽤作变量名。另外，C 语⾔还保留了⼀些词，供未来使⽤，这些保
continue
留字也不能⽤作变量名。下⾯就是 C 语⾔主要的关键字和保留字。
auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for,
goto, if, inline, int, long, register, restrict, return, short, signed, sizeof, static, struct, switch,
typedef, union, unsigned, void, volatile, while
另外，两个下划线开头的变量名，以及⼀个下划线 + ⼤写英⽂字⺟开头的变量名，都是系统保留的，⾃⼰
不应该起这样的变量名。
变量的声明 #
C 语⾔的变量，必须先声明后使⽤。如果⼀个变量没有声明，就直接使⽤，会报错。
每个变量都有⾃⼰的类型（type）。声明变量时，必须把变量的类型告诉编译器。
int height;
上⾯代码声明了变量 ，并且指定类型为 （整数）。
height int
如果⼏个变量具有相同类型，可以在同⼀⾏声明。
int height, width;
int height;
int width;
注意，声明变量的语句必须以分号结尾。
⼀旦声明，变量的类型就不能在运⾏时修改。
变量的赋值 #
C 语⾔会在变量声明时，就为它分配内存空间，但是不会清除内存⾥⾯原来的值。这导致声明变量以后，
变量会是⼀个随机的值。所以，变量⼀定要赋值以后才能使⽤。
赋值操作通过赋值运算符（ ）完成。
=
int num;
num = 42;
上⾯示例中，第⼀⾏声明了⼀个整数变量 ，第⼆⾏给这个变量赋值。
num
变量的值应该与类型⼀致，不应该赋予不是同⼀个类型的值，⽐如 的类型是整数，就不应该赋值为⼩
num
数。虽然 C 语⾔会⾃动转换类型，但是应该避免赋值运算符两侧的类型不⼀致。
变量的声明和赋值，也可以写在⼀⾏。
int num = 42;
多个相同类型变量的赋值，可以写在同⼀⾏。
int x = 1, y = 2;
注意，赋值表达式有返回值，等于等号右边的值。
int x, y;
x = 1;
y = (x = 2 * x);
上⾯代码中，变量 的值就是赋值表达式（ ）的返回值 。
y x = 2 * x 2
由于赋值表达式有返回值，所以 C 语⾔可以写出多重赋值表达式。
int x, y, z, m, n;
x = y = z = m = n = 3;
上⾯的代码是合法代码，⼀次为多个变量赋值。赋值运算符是从右到左执⾏，所以先为 赋值，然后依次
n
为 、 、 和 赋值。
m z y x
C 语⾔有左值（left value）和右值（right value）的概念。左值是可以放在赋值运算符左边的值，⼀般是
变量；右值是可以放在赋值运算符右边的值，⼀般是⼀个具体的值。这是为了强调有些值不能放在赋值运
算符的左边，⽐如 是合法的表达式，但是 就会报错。
x = 1 1 = x
变量的作⽤域 #
作⽤域（scope）指的是变量⽣效的范围。C 语⾔的变量作⽤域主要有两种：⽂件作⽤域（file scope）和
块作⽤域（block scope）。
⽂件作⽤域（file scope）指的是，在源码⽂件顶层声明的变量，从声明的位置到⽂件结束都有效。
int x = 1;
int main(void) {
printf("%i\n", x);
}
上⾯示例中，变量 是在⽂件顶层声明的，从声明位置开始的整个当前⽂件都是它的作⽤域，可以在这个
x
范围的任何地⽅读取这个变量，⽐如函数 内部就可以读取这个变量。
main()
块作⽤域（block scope）指的是由⼤括号（ ）组成的代码块，它形成⼀个单独的作⽤域。凡是在块作