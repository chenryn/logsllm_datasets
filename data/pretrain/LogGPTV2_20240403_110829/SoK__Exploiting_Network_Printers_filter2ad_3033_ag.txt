(cid:9)(cid:10)(cid:4)(cid:11)(cid:12)(cid:13)(cid:14)(cid:6)(cid:15)
(cid:17)(cid:1)(cid:1)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:4)(cid:6)(cid:7)(cid:8)
(cid:9)(cid:10)(cid:4)(cid:11)(cid:12)(cid:13)(cid:14)(cid:6)(cid:15)
(cid:18)(cid:11)(cid:11)
Figure 9: Using a dedicated print server for attack mitiga-
tion.
Furthermore, if supported by the device, strong pass-
words should be set for PostScript startjob and system
parameters, PJL disk lock and control panel lock, as well
as the embedded web server. Additionally, malicious PJL
commands can be blocked using an IDS/IPS. Note, how-
ever, that such signature-based approaches are doomed to
fail for PostScript which offers various code obfuscation
techniques.
9. Future research directions and challenges
In the following we present attacks beyond printers and
propose future research challenges.
9.1. Google Cloud Print (GCP)
In 2010 Google introduced the ﬁrst release of Google
Cloud Print (GCP) – a web-based service allowing different
devices to register and conﬁgure printers via Google. With
this service the printer’s driver installation and conﬁguration
can be skipped and the end-users can print their documents
directly from mobile devices. In Figure 10 we depict the
protocol ﬂow of using GCP. One can see that there are two
different scenarios: (1) Using a printer with integrated GCP
support and (2) using a USB or network printer available
only on the intranet, which does not support GCP. Depend-
ing on the given scenario there exist different security risks.
Printer with GCP support. Registration: A printer with
GCP support is a printer, which can initiate HTTP requests
and call the GCP API in order to be registered. The con-
ﬁguration of the printer is performed almost automatically.
By accessing the printer settings, an end-user can start the
registration process of the printer on Google. As a result,
the printer displays a unique URL, which is needed to bind
the freshly registered printer to a speciﬁc Google account.
For this purpose the end-user must invoke the URL with
his browser on the PC or mobile and log into Google.
Consequentially, the printer is added and can be used from
different devices.
Printing jobs: After the registration the end-user can use
GCP and his printer. In Figure 10a the protocol ﬂow is
depicted:
(1) In the ﬁrst step a ﬁle is sent to the GCP service. This
can be initiated by a mobile or desktop application by
choosing the Cloud Printer for printing the selected
ﬁle.
(2) In step two the GCP service can interpret and convert
the received ﬁle which can be in PostScript format. Ac-
cording to the API documentation [29], "GCP attempts
to convert the document to a type supported by the
printer." However, the conversion cannot be guaranteed
by the GCP.
(3) In step three the ﬁle is sent
to the Cloud Printer
for printing. An optional PostScript interpretation is
performed here if the output produced by GCP is in
PostScript format.
From a security perspective both PostScript interpreters (on
the GCP service and on the Cloud Printer) are relevant.
Attacking GCP: The goal of our attack is to use a malicious
ﬁle and enforce the GCP service to reveal internal, non-
public information.
In our tests we were able to enforce the GCP service to
interpret and thus process a PostScript ﬁle, reading out the
current version of the interpreter. We achieved this by:
(1) Sending to GCP a ﬁle included in an HTTP
to
contentType
with
set
POST
application/postscript.
request
(2) The ﬁle caused the interpreter to read out and store
the accessed information (in our case the information
regarding the version and supported features of the used
interpreter) within the ﬁle, which would to be printed.
225
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:18 UTC from IEEE Xplore.  Restrictions apply. 
(a) Using printer with GCP support.
(b) Using GCP on USB or network printer without GCP support.
Figure 10: Google Cloud Print (GCP) abstract protocol ﬂow.
(3) Then, the ﬁle was transferred to our printer where we
were able to see the result of our attacking vector.
In order to avoid misuse or damage, we refused to exe-
cute DoS attacks or try to read out stored ﬁles on the GCP.
We promptly reported the issue to Google and currently we
wait for response from the security team.
Attacking Cloud Printer: Similarly to the attacks described
in Section 5 and evaluated in Section 7, an attacker can
enforce the end-user to print a maliciously crafted ﬁle. In
case the ﬁle is not converted by GCP, it will be processed
by the PostScript interpreter on the Cloud Printer, allowing
an attacker to execute the attacks and directly targeting the
Cloud Printer.
Printer without GCP support. In case the printer does not
support GCP, Google offers a different approach to provide
its printing service.
Registration: In comparison to the previous approach, now
the conﬁguration is performed on a device with Google
Chrome, for example, the end-user’s PC. By accessing the
URL chrome://devices within the browser, a locally
installed and conﬁgured printer can be selected. Consequen-
tially, the end-user needs to log into Google. The binding
of the selected devices to the end-user’s account is done
automatically.
Behind the scenes on the PC, a Chrome Print Service
deamon is started. This service constantly pulls printing
jobs from GCP and forwards them to one of the locally
conﬁgured printer.
Attacking the end-user’s PostScript interpreter: By analyz-
ing the protocol ﬂow we made the following interesting
observations:
(1) In case the PC is not online or the Chrome Print Service
is turned off, the GCP cannot be used. Therefore, a
mobile app can use the GCP in this scenario only if
the PC and the Chrome Print Service is running.
(2) There exist different PostScript interpreters. One on the
GCP service, on the PC, and on each of the printers.
(3) Depending on the ﬁle sent to GCP and of the locally
installed printer driver on the PC, different PostScript
interpreters are used.
In addition to the already described attacks, one further
component at risk can be evaluated – the PostScript inter-
preter on the PC; see Step 4 in Figure 10b. In our evaluation
we were able to send a PostScript ﬁle in step 1. For reasons
unknown,3 GCP did not convert this ﬁle. It sent the ﬁle
directly to the Chrome Print Service. Consequentially, the
Chrome Print Service used the installed PostScript inter-
preter and executed the code within the ﬁle. In our proof-of-
concept attack we accessed all ﬁles and folders in the end-
user’s home directory, including their names in the ﬁle. Then,
the modiﬁed ﬁle was sent to the printer where we veriﬁed
the success of the attack. As a result the attacker capable
of enforcing an end-user to print a maliciously crafted ﬁle
can gain access to sensitive information stored locally on
the end-user’s device.
We evaluated GCP and its processing of PostScript ﬁles.
We identiﬁed that Google used an outdated version of the
PostScript processor. We responsibly disclosed this issue
to Google developers, who acknowledged our ﬁndings and
performed an update.
9.2. Website interpreter attacks
Similarly to the attacks started on GCP an attacker
can start attacks on the PostScript interpreter available on
a website. A typical example is, websites which convert
PostScript ﬁle to another format. Thus, an attacker has direct
access to the used interpreter.
PostScript to PDF converter. As part of our analysis we
evaluated popular websites converting PostScript to PDF
ﬁles and depicted the results in Table 7. In our evaluation
we concentrated only on a proof-of-concept attack which
lists ﬁles stored on the server and results in information
disclosure. The idea of the attack is as followed. An attacker
sends a maliciously crafted PostScript ﬁle to the website,
which contains instructions to list all ﬁles contained in a
folder and adds these in the generated PDF ﬁle. The attacker
then downloads the generated PDF ﬁle and can see the
results of the attack. The used attack vector does not deviate
from the attack vectors used on printers since the PostScript
commands remain the same.
One can see that eight out of twelve websites were
susceptible against the started attack and revealed locally
3. Note that the GCP service was a Black-Box for us during the analysis.
226
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:18 UTC from IEEE Xplore.  Restrictions apply. 
Website
http://www.convertio.co
http://www.convertfiles.com
http://www.coolutils.com
http://www.pdfconvertonline.com
http://www.ps2pdf.com
http://www.sciweavers.org
http://www.convertepstojpg.com
http://www.zamzar.com
http://www.freefileconvert.com
http://www.online-utility.org
http://www.epsconverter.com
http://www.pdfaid.com
Product
Ghostscript
Ghostscript
Ghostscript
Ghostscript
Ghostscript
Ghostscript
Ghostscript
Ghostscript
Ghostscript
Ghostscript
Ghostscript
ABCpdf
Information
disclosure
–
–
–
–
TABLE 7: Information disclosure caused by PostScript code
executed on websites converting PS to PDF ﬁles. More than
half of the evaluated websites was affected.
stored ﬁles. A future research question should provide a
comprehensive evaluation of possible and more critical at-
tacks like DoS, Server-Side-Request-Forgery, and any attack
capable to manipulate locally stored ﬁles. Generally speak-
ing, any system interpreting PostScript or PJL ﬁles should
be evaluated with respect to the attacks described in this
paper.
PDF to PostScript. PDF is a complex platform-independent
document format. It allows end-users to deﬁne new doc-
uments including texts, fonts, graphics, or interactive el-
ements. The interactive elements can consist of HTML,
XML, or even JavaScript building blocks, and thus of-
fer attackers new capabilities. The scientiﬁc studies have
presented PDF programming features useful for new at-
tacks [14] or methods for executing malicious HTTP re-
quests from PDF ﬁles [57], [14]. Based on these results
antivirus companies have attempted to classify and detect
malicious PDF ﬁles [11].
Another attack vector, which is not analyzed in-depth
in the previous research, is an attack exploiting PDF to
PostScript conversion. This conversion is typically executed
in the printer driver, or a similar printer handling utility,
before the PDF ﬁle is sent to the printer device. An attacker
could thus construct a benign-looking PDF ﬁle containing
malicious PostScript commands. For example, a similar
approach used Heiderich et al. to attack Web application
ﬁlters with malicious innerHTML mutations [34] or SVG
ﬁles [33].
9.3. 3D printers
3D printers have gained much popularity in the recent
years. This makes 3D printers also attractive attack targets
and attack gadgets. Several researchers showed how to
modify design ﬁles (.STL ﬁles) to include voids and cavities,
which can destroy the resulting object during its usage [12],
[64]. Song et al. showed how to use built-in smartphone
sensors to extract conﬁdential design data while the device
is printing [54].
3D printers use printer languages that are completely
different from typical printer languages described in Sec-
tion 2. The printing instructions and design description are
transmitted to the 3D printer in toolpath ﬁles. There are
several toolpath ﬁle formats. The most prevalent format is G-
code, which is used in the RepRap project [6]. G-code ﬁles
contain standard commands to set speciﬁc offset positions or
remove offsets; however, they can also contain conﬁguration
commands for setting heater fault detection timeout,4 or to
upload conﬁguration ﬁles.5 These commands could become
interesting for a motivated attacker.
Since the 3D printers are still rather expensive in com-
parison to typical printers, occasional end-users and devel-
opers use 3D printing cloud engines. These services accept
3D design ﬁles and ship the resulting object to the end-users.
This makes the 3D printer cloud services an interesting
attack target.
9.4. Printer software and ﬁrmware
Firmware updates. The dangers of malicious ﬁrmware
updates are well-known and have been discussed in [7],
[56]. In contrast to other networked devices, however, it is
common for printers to deploy ﬁrmware updates as ordinary
print jobs. This opens up a wide gateway for attackers
because access to printing functionality is usually a low
hurdle.
Firmware modiﬁcation attacks against network printers
have been demonstrated for the Lexmark e240n [40], for
virtually all HP printers [21], [22], and for the Canon
PIXMA series [38]. All they needed to do was understand
how the proprietary checksum algorithms used for ﬁrmware
veriﬁcation work. Heiland modiﬁed ﬁrmware for Xerox
devices which enabled them to execute arbitrary commands
on the device – the tool to digitally sign the ﬁrmware and
the secret key was included in the ﬁrmware itself [35].
Weidenbach and Ernst adapted the attack and showed that
even recent Xerox printers were vulnerable [63]. Costin et
al. discussed methods for large scale ﬁrmware analyses [65],
[19].
As a countermeasure, vendors started to digitally sign
their ﬁrmware [49]. The security of code signing is based
on keeping the private key a long-term trade secret. There
are, however, potentially still printers in the wild which are
vulnerable to malicious ﬁrmware – either because they have
not yet been updated or because proprietary checksum algo-
rithms are sold as cryptographically secure digital signature
schemes. It certainly must be pointed out that analyzing
ﬁrmware can be hard if vendors do not document their
ﬁrmware formats and update routines. Usually this requires
some reverse engineering.
To give a rough overview of the ﬁrmware deployment
procedure, we downloaded and systematically categorized
1,400 ﬁrmware ﬁles for the top ten printer manufacturers.
4. http://reprap.org/wiki/G-code#M570:_Conﬁgure_heater_fault_
detection
5. http://reprap.org/wiki/G-code#M559:_Upload_conﬁguration_ﬁle
227
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:18 UTC from IEEE Xplore.  Restrictions apply. 
Out of ten analyzed manufacturers, nine use PJL commands
for all or at least some of their ﬁrmware update procedures,
which is a strong indicator that updates are deployed as or-
dinary print jobs. The remaining manufacturer – Kyocera –
applies the PRESCRIBE page description language. We can,
therefore, claim that it is common in the printing industry to
install new ﬁrmware over the printing channel and point out
a major design ﬂaw: data and code are transferred over the
same channel. It is, however, out of the scope of this work to
make a reasoned statement on the individual manufacturers’
protection mechanisms. An in-depth analysis of ﬁrmware
modiﬁcation attacks should be part of future work.
Software packages. In the recent years, printer vendors