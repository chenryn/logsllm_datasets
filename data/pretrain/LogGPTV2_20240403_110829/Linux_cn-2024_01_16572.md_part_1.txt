---
author: Julia Evans
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2062
date: '2024-01-21 18:47:00'
editorchoice: false
excerpt: 大家是怎么看待 Git 提交的？
fromurl: https://jvns.ca/blog/2024/01/05/do-we-think-of-git-commits-as-diffs--snapshots--or-histories/
id: 16572
islctt: true
largepic: /data/attachment/album/202401/21/184647vzxemtv993tjgmze.jpg
permalink: /article-16572-1.html
pic: /data/attachment/album/202401/21/184647vzxemtv993tjgmze.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 大家是怎么看待 Git 提交的？
tags:
- Git
thumb: false
title: Git 提交是差异、快照还是历史记录？
titlepic: true
translator: Cubik65536
updated: '2024-01-21 18:47:00'
---
![](/data/attachment/album/202401/21/184647vzxemtv993tjgmze.jpg)
大家好！我一直在慢慢摸索如何解释 Git 中的各个核心理念（提交、分支、远程、暂存区），而提交这个概念却出奇地棘手。
要明白 Git 提交是如何实现的对我来说相当简单（这些都是确定的！我可以直接查看！），但是要弄清楚别人是怎么看待提交的却相当困难。所以，就像我最近一直在做的那样，我在 Mastodon 上问了一些问题。
### 大家是怎么看待 Git 提交的？
我进行了一个 [非常不科学的调查](https://social.jvns.ca/@b0rk/111563158717698550)，询问大家是怎么看待 Git 提交的：是快照、差异，还是所有之前提交的列表？（当然，把它看作这三者都是合理的，但我很好奇人们的 *主要* 观点）。这是调查结果：
![](/data/attachment/album/202401/21/184734gklvmdjhvvt2mrmv.png)
结果是：
* 51% 差异
* 42% 快照
* 4% 所有之前的提交的历史记录
* 3% “其他”
我很惊讶差异和快照两个选项的比例如此接近。人们还提出了一些有趣但相互矛盾的观点，比如 “在我看来，提交是一个差异，但我认为它实际上是以快照的形式实现的” 和 “在我看来，提交是一个快照，但我认为它实际上是以差异的形式实现的”。关于提交的实际实现方式，我们稍后再详谈。
在我们进一步讨论之前：我们的说 “一个差异” 或 “一个快照” 都是什么意思？
### 什么是差异？
我说的“差异”可能相当明显：差异就是你在运行 `git show COMMIT_ID` 时得到的东西。例如，这是一个 rbspy 项目中的拼写错误修复：
```
diff --git a/src/ui/summary.rs b/src/ui/summary.rs
index 5c4ff9c..3ce9b3b 100644
--- a/src/ui/summary.rs
+++ b/src/ui/summary.rs
@@ -160,7 +160,7 @@ mod tests {
  ";
          let mut buf: Vec = Vec::new();
-        stats.write(&mut buf).expect("Callgrind write failed");
+        stats.write(&mut buf).expect("summary write failed");
          let actual = String::from_utf8(buf).expect("summary output not utf8");
          assert_eq!(actual, expected, "Unexpected summary output");
      }
```
你可以在 GitHub 上看到它： 
### 什么是快照？
我说的 “快照” 是指 “当你运行 `git checkout COMMIT_ID` 时得到的所有文件”。
Git 通常将提交的文件列表称为 “树”（如“目录树”），你可以在 GitHub 上看到上述提交的所有文件：
（它是 `/tree/` 而不是 `/commit/`）
### “Git 是如何实现的”真的是正确的解释方式吗？
我最常听到的关于学习 Git 的建议大概是 “只要学会 Git 在内部是如何表示事物的，一切都会变得清晰明了”。我显然非常喜欢这种观点（如果你花了一些时间阅读这个博客，你就会知道我 *喜欢* 思考事物在内部是如何实现的）。
但是作为一个学习 Git 的方法，它并没有我希望的那么成功！通常我会兴奋地开始解释 “好的，所以 Git 提交是一个快照，它有一个指向它的父提交的指针，然后一个分支是一个指向提交的指针，然后……”，但是我试图帮助的人会告诉我，他们并没有真正发现这个解释有多有用，他们仍然不明白。所以我一直在考虑其他方案。
但是让我们还是先谈谈内部实现吧。
### Git 是如何在内部表示提交的 —— 快照
在内部，Git 将提交表示为快照（它存储每个文件当前版本的 “树”）。我在 [在一个 Git 仓库中，你的文件在哪里？](https://jvns.ca/blog/2023/09/14/in-a-git-repository--where-do-your-files-live-/) 中写过这个，但下面是一个非常快速的内部格式概述。
这是一个提交的表示方式：
```
$ git cat-file -p 24ad81d2439f9e63dd91cc1126ca1bb5d3a4da5b
tree e197a79bef523842c91ee06fa19a51446975ec35
parent 26707359cdf0c2db66eb1216bf7ff00eac782f65
author Adam Jensen  1672104452 -0500
committer Adam Jensen  1672104890 -0500
Fix typo in expectation message
```
以及，当我们查看这个树对象时，我们会看到这个提交中仓库根目录下每个文件/子目录的列表：
```
$ git cat-file -p e197a79bef523842c91ee06fa19a51446975ec35