# 0x00 profile语法分析
以 `backoff.profile` 为例来讲解
```
#
# Backoff POS Malware
#
# This profile takes steps to dress up the POST side of Beacon's C2 to
# look like Backoff. The GET side is left generic.
#
# Indicators from:
#   http://blog.spiderlabs.com/2014/07/backoff-technical-analysis.html
#   https://gsr.trustwave.com/topics/backoff-pos-malware/backoff-malware-overview/
#
# Author: @armitagehacker
#
# 
set sample_name "Backoff POS Malware";
set sleeptime "30000"; # use a ~30s delay between callbacks
set jitter    "10";    # throw in a 10% jitter
set useragent "Mozilla/5.0 (Windows NT 6.1; rv:24.0) Gecko/20100101 Firefox/24.0";
# the relevant indicators
http-post {
    set uri "/windebug/updcheck.php /aircanada/dark.php /aero2/fly.php /windowsxp/updcheck.php /hello/flash.php";
    client {
        header "Accept" "text/plain";
        header "Accept-Language" "en-us";
        header "Accept-Encoding" "text/plain";
        header "Content-Type" "application/x-www-form-urlencoded";
        id {
            netbios;
            parameter "id";
        }
        output {
            base64;
            prepend "&op=1&id=vxeykS&ui=Josh @ PC&wv=11&gr=backoff&bv=1.55&data=";
            print;
        }
    }
    server {
        output {
            print;
        }
    }
}
# No information on backoff use of GET, so generic GET request.
http-get {
    set uri "/updates";
    client {
        metadata {
            netbiosu;
            prepend "user=";
            header "Cookie";
        }
    }
    server {
        header "Content-Type" "text/plain";
        output {
            base64;
            print;
        }
    }
}
```
注释符号 `#`  选择赋值 `set` 用来设置一些程序的默认值 语句以`;` 结束,类似JavaScript.
代码中 `set sleeptime "30000";`  即为设置心跳时间为30000毫秒，`set jitter    "10";` 为默认抖动系数（0-99%）
`set useragent "Mozilla/5.0 (Windows NT 6.1; rv:24.0) Gecko/20100101 Firefox/24.0";` 设置 user-agent 其中的http-get与http-post基本为固定语法了。
```
http-get {
    set uri "/updates";
    client {
        metadata {
        }
    }
    server {
        header "";
        output {
        }
    }
}
```
为了更好的看懂这些，以下是官网语法文档。
# 0x01 文档
配合官方文档写了下,其中很多用不到，没关系需要什么看什么,长文字直接用的机翻了大概意思差不多。
## Data Transform Language
数据转换也就是CS内置的几种编码
Statement | Action |  Inverse  
-|-|-
append "string"	 | Append "string"	| Remove last LEN("string") characters
base64	| Base64 Encode	| Base64 Decode
base64url	| URL-safe Base64 Encode |	URL-safe Base64 Decode
mask	| XOR mask w/ random key	| XOR mask w/ same random key
netbios	| NetBIOS Encode 'a'	| NetBIOS Decode 'a'
netbiosu	| NetBIOS Encode 'A'	| NetBIOS Decode 'A'
prepend "string" |	Prepend "string" |	Remove first LEN("string") characters
数据转换语句可以任意数量顺序组合,以终止语句结束,在转换中只能使用一个终止语句
Statement | What 
-|-|
header "header" |Store data in an HTTP header
parameter "key" | Store data in a URI parameter
print   | Send data as transaction body
uri-append | Append to URI
终止语句将转换后的数据储存到Http头中，参数终止语句将转换的数据 print来最后发送这些编码的数据
print是 `http-get.server.output`，`http-post.server.output` 和 `http-stager.server.output` 的终止语句配合上文代码可以看出。
其他块使用 `header`，`parameter`，`print`和`uri-append` `termination`语句,如果在`http-post.client.output`上使用`header` `parameter` `uri append` `termination`语句，beacon会将其响应分块到一个合理的长度，以适应事务的一部分。
## Strings
Beacon的Profile语法可以多个地方使用 Strings
Value | Special Value 
-|-|
"\n"  |  Newline character
"\r"   | Carriage Return
"\t"   | Tab character
"\u####"  |  A unicode character
"\x##"  | A byte (e.g., \x41 = 'A')
"\\"   | \
## Options
Beacon的默认值,分为全局和本地,全局更改Beacon的设置，本地用于特定事务。
Option | Context | Default Value | Changes 
-|-|-|-|
amsi_disable  | null  |    false  | (Attempt to) disable AMSI for execute-assembly, powerpick, and psinject
dns_idle    | null |    0.0.0.0 | IP address used to indicate no tasks are available to DNS Beacon; Mask for other DNS C2 values
dns_max_txt  | null |   252   | Maximum length of DNS TXT responses for tasks
dns_sleep    | null |   0  | Force a sleep prior to each individual DNS request. (in milliseconds)
dns_stager_prepend   | null  |   null  |    Prepend text to payload stage delivered to DNS TXT record stager
dns_stager_subhost   | null |   .stage.123456.    | Subdomain used by DNS TXT record stager.
dns_ttl  | null |   1    |  TTL for DNS replies
host_stage   | null    |   true     |  Host payload for staging over HTTP, HTTPS, or DNS. Required by stagers.
jitter     | null  |   0     | Default jitter factor (0-99%)
maxdns     | null  |   255   | Maximum length of hostname when uploading data over DNS (0-255)
pipename     | null   |    msagent_##   |  Name of pipe to use for SMB Beacon's peer-to-peer communication. ## is replaced with a number unique to your team server.
pipename_stager  | null   |    status_##    |  Name of pipe to use for SMB Beacon's named pipe stager. ## is replaced with a number.
sample_name   | null   |   My Profile   |  The name of this profile (used in the Indicators of Compromise report)
sleeptime     | null   |   60000     | Default sleep time (in milliseconds)
spawnto_x86   | null   |   %windir%\syswow64\rundll32.exe   |  Default x86 program to open and inject shellcode into
spawnto_x64   | null     | %windir%\sysnative\rundll32.exe  |  Default x64 program to open and inject shellcode into
tcp_port     | null    |   4444     |  TCP Beacon listen port
uri   | http-get,http-post    |  [required option]  |   Transaction URI
uri_x86   | http-stager      | null |  x86 payload stage URI
uri_x64   | http-stager      | null | x64 payload stage URI
useragent    |null  |     Internet Explorer (Random)   |  Default User-Agent for HTTP comms.
verb     |  http-get,http-post   | GET,POST     |  HTTP Verb to use for transaction
以上都是简单的英语我也就懒的翻译了,使用URI可以将多个URI 指定为一个空格分隔的字符串,CS会自己处理。
## Beacon HTTP Transaction
HTTP请求 参数
Request | Component | Block | Data 
-|-|-|-|
http-get   |   client  |  metadata   |   Session metadata
http-get    |  server  |  output  |  Beacon's tasks
http-post  |   client  |  id  |  Session ID