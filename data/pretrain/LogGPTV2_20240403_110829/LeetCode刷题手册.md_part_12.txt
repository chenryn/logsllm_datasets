st.buildsegmentTree(0, 0, len(nums)-1)
func(i,j int) int
int 
---
## Page 61
queryRight)
st.leftchild(treeIndex), st.rightchild(treeIndex) 
queryRight int) int {
[queryLeft...queryRight] 的值
//在以 treeIndex 为根的线段树中［left...right］的范围里，搜索区间
// Query define
//查询［left....right］区间内的值
func (st *SegmentTree) Query(left, right int) int {
func (st *SegmentTree) rightchild(index int) int {
func (st *SegmentTree) leftchild(index int) int {
st.tree[rightTreeIndex]]
st.leftchild(treeIndex), st.rightchild(treeIndex) 
//在 treeIndex 的位置创建[left..
} else if queryRight  midTreeIndex {
 midTreeIndex, leftTreeIndex, rightTreeIndex := left+(right-left)>>1,
if left == queryLeft && right == queryRight {
if len(st.data) > 0 { 
 return 2*index + 2 
 return 2*index + 1 
return 0
st.tree[treeIndex] = st.merge(st.tree[leftTreeIndex],
st.buildSegmentTree(rightTreeIndex, midTreeIndex+l, right)
St.buildSegmentTree(leftTreeIndex, left, midTreeIndex) 
midTreeIndex, leftTreeIndex, rightTreeIndex := left+(right-left)>>1,
if left == right { 
 return st.queryInTree(rightTreeIndex, midTreeIndex+l, right, queryLeft,
 return st.tree[treeIndex] 
 return st.queryInTree(O, O, len(st.data)-l, left, right)
return 
st.tree[treeIndex] = st.data[left]
..right’区间的线段树
---
## Page 62
st.lazy[treeIndex]] 
st.lazy[treeIndex]] 
normalize current node by removing lazinesss 
st.leftchild(treeIndex), st.rightchild(treeIndex)
queryRight int) int {
func (st *SegmentTree) queryLazyInTree(treeIndex, left, right, queryLeft,
func (st *SegmentTree) QueryLazy(left, right int) int {
// QueryLazy define
// 查询［left....right］区间内的值
range
range
queryRight))
midTreeIndex)，
queryRight)
 if left > queryRight ll right  midTreeIndex {
   //  u = b   =>  
if st.lazy[treeIndex] != O { // this node is lazy
if len(st.data) > 0 { 
return 0
return st.merge(st.queryInTree(leftTreeIndex, left, midTreeIndex, queryLeft,
 return st.tree[treeIndex]
 return 0 // represents a null node 
 return st.queryLazyInTree(O, O, len(st.data)-1, left, right)
 St.queryInTree(rightTreeIndex, midTreeIndex+l, right, midTreeIndex+1
return st.queryInTree(leftTreeIndex, left, midTreeIndex, queryLeft,
st.lazy[treeIndex] = 0 // current node processed. No longer lazy
ou ua o z pn // }  =i  
 St.lazy[rightTreeIndex] = st.merge(st.lazy[rightTreeIndex],
 st.lazy[leftTreeIndex] = St.merge(st.lazy[leftTreeIndex] 
// st.tree[treeIndex] += (right - left + l) * st.lazy[treeIndex] // 
// st.lazy[leftTreeIndex] += st.lazy[treeIndex]
st.tree[treeIndex] = st.merge(st.tree[treeIndex], st.lazy[treeIndex]]
// st.lazy[rightTreeIndex] += st.lazy[treeIndex]
---
## Page 63
func (st *SegmentTree) UpdateLazy(updateLeft, updateRight, val int) {
// UpdateLazy define 
策略也需要变化，这里暂不详细讨论
//当然区间更新也可以都更新成定值，如果只区间更新成定值，那么lazy 更新策略需要变化，merge
// 这里的区间更新关注的是变化，单点更新关注的是定值 
和单点更新不同 
// 注意这里的更新值是在原来值的基础上增加或者减少，
//更新［updateLeft....updateRight］位置的值
st.tree[rightTreeIndex]] 
st.leftchild(treeIndex)， st.rightchild(treeIndex) 
func (st *SegmentTree) updateInTree(treeIndex, left, right, index, val int) 
//以 treeIndex 为根，更新index 位置上的值为 val
func (st *SegmentTree) Update(index, val int) {
// Update define 
// 更新 index 位置的值
queryRight))
queryLeft, midTreeIndex),
queryRight)
queryLeft, queryRight)
if len(st.data) > 0 {
 St.tree[treeIndex] = st.merge(st.tree[leftTreeIndex],
if index > midTreeIndex { 
if left == right { 
if len(st.data) > 0 { 
 } else if queryRight >l
而不是把这个区间内的值都赋值为×，区间更新
---
## Page 64
updateRight, val)
updateRight, val)
update range 
st.lazy[treeIndex]]
st.lazy[treeIndex]]
normalize current node by removing laziness 
st.leftchild(treeIndex), st.rightchild(treeIndex)
updateRight,val int） { 
func (st *SegmentTree) updateLazyInTree(treeIndex, left, right, updateLeft,
 St.updateLazyInTree(rightTreeIndex, midTreeIndex+l, right, updateLeft,
if updateLeft >1,
// merge updates
st.updateLazyInTree(leftTreeIndex, left, midTreeIndex, updateLeft,
if left > right ll left > updateRight ll right  0 { 
 return 2*index + 2 
St.tree[treeIndex] = st.merge(st.tree[leftTreeIndex],
midTreeIndex,
if left == right { 
st.merge = oper
st.tree[treeIndex] = st.merge(st.tree[leftTreeIndex],
st.buildSegmentTree(rightTreeIndex, midTreeIndex+l, right)
st.buildSegmentTree(leftTreeIndex, left, midTreeIndex) 
st.data, st.tree = data, tree
for i := O; i >1
len(nums))， make([]int, 4*]en(nums))
---
## Page 66
st.leftchild(treeIndex), st.rightchild(treeIndex) 
func (st *SegmentCountTree) updateCountInTree(treeIndex, left, right, val int)
//以treeIndex 为根，更新［left...right］区间内的计数
func (st *SegmentCountTree) UpdateCount(val int) {
// UpdateCount define 
//更新计数
queryRight) +
st.leftchild(treeIndex), st.rightchild(treeIndex) 
right { 
queryRight int) int {
[queryLeft...queryRight］的值，值是计数值
//在以treeIndex为根的线段树中［left．..right］的范围里，搜索区间
if len(st.data) > 0 { 
 return st.queryInTree(rightTreeIndex, midTreeIndex+l, right, queryLeft,
if val >= st.data[left] && val = st.data[right] Ill left ==
if queryRight  st.data[right] {
 st.updateCountInTree(O, 0, len(st.data)-1, val)
return 0
 St.queryInTree(leftTreeIndex, left, midTreeIndex, queryLeft, queryRight)
 return st.tree[treeIndex]
st.updateCountInTree(rightTreeIndex, midTreeIndex+l, right, val)
midTreeIndex,
if left == right {
st.tree[treeIndex]++
 return o 
return st.queryInTree(0, 0, len(st.data)-1, left, right)
st.updateCountInTree(leftTreeIndex, left, midTreeIndex, val)
return
  x  
---
## Page 67
并查集 UnionFind
func (uf *UnionFind) Union(p,q int) {
// Union define 
func (uf *unionFind) Find(p int) int 
// Find define 
func (uf *UnionFind) Init(n int) {
// Init define 
type UnionFind struct 
// UnionFind defind
package template
} else { 
if proot == qroot {
qroot := uf.Find(q)
proot := uf.Find(p)
for p != uf.parent[p]
for i := range uf.parent
parent, rank []int
if
return root
// compress path 
for root != uf.parent[root] {
root := p 
uf.rank = make([]int, n)
uf.parent = make([]int, n)
uf.count = n
count
 uf.parent[proot] = qroot 
 root = uf.parent[root]
if uf.rank[proot] == uf.rank[qroot] { 
uf.parent[qroot] = proot 
return
p = tmp 
uf.parent[p] = root
tmp := uf.parent[p]
uf.parent[i] = i
uf.rank[qroot] > uf.rank[proot] {
int
---
## Page 68
川
// Find define
func (uf *UnionFindCount)
// Init define
type UnionFindCount struct { 
//计算每个集合中元素的个数+最大集合元素个数
func (uf *UnionFind) Totalcount(） int {
// Totalcount define
/
/
func (uf *UnionFindCount) Find(p int) int
// UnionFindCount define 
for root != uf.parent[root] {
root := p 
uf.count = make([]int, n)
uf.parent = make([]int, n)
maxUnioncount int 
parent, count []int
return uf.count
uf.count--
func (uf *UnionFindCount) union(p,q int) 
不进行秩压缩，时间复杂度爆炸，太高了
return root
qroot := uf.find(q)
proot := uf.find(p)
 root = uf.parent[root]
if proot != qroot 
if proot 
uf.count[i] =
uf.parent[i] = i
uf.count[qroot] += uf.count[proot]
uf.parent[proot] = qroot 
 return
uf.rank[proot]++
== qroot
 Init(n int)
---
## Page 69
第四章Leetcode 题解
func max(a int,b int) int {
func (uf *UnionFindCount) MaxUnionCount(） int {
// MaxUnionCount define 
func (uf *UnionFindcount) Count(） [int {
// Count define 
uf.count[qroot])]
func (uf *UnionFindCount) Union(p,q int){
// Union define 
ifａ>b{
 return uf.maxUnioncount
return b
 return uf.count 
uf.count[proot] += uf.count[qroot]
uf.parent[qroot] = proot 
uf.maxUnioncount = max(uf.maxUnioncount, (uf.count[proot] +
//set relation[o] as parent 
} else if uf.count[qroot] > uf.count[proot] {
if proot == len(uf.parent)-1 {
if proot == qroot {
qroot := uf.Find(q)
proot := uf.Find(p)
 return a
//proot is root
 return 
proot, qroot = qroot, proot
proot, qroot = qroot, proot 
// qroot is root, always attach to root
---
## Page 70
Example:
element twice.
You may assume that each input would have exactly one solution, and you may not use the same
target.
Given an array of integers, return indices of the two numbers such that they add up to a specific 
题目
让我们在题解的太空遨游吧~
markdown 中，可以提交你的最优解 PR。
题解慢慢更新中，欢迎大家提出更好的解法。点击页面下方的edit，会跳转到 github 对应的页面
1. Two Sum
100%了。相差的 88 题是还没有beats 100%的，笔者还需要继续优化~
这一章就是LeetCode 的题解了。笔者目前只刷到 608 题，题解这里有 520 题，都已经 runtime beats 
Because nums[0] + nums[1] = 2 + 7 = 9,
Given nums = [2, 7, 11, 15], target = 9,
return [0,1] 
9
---
## Page 71
Example:
You may assume the two numbers do not contain any leading zero, except the number O itself.
return it as a linked list.
stored in reverse order and each of their nodes contain a single digit. Add the two numbers and 
You are given two non-empty linked lists representing two non-negative integers. The digits are 
题目
2. Add Two Numbers
代码
回结果。
数字的下标即可。如果找不到，就把这个数字存入 map 中，等待扫到"另一半"数字的时候，再取出来返
顺序扫描数组，对每一个元素，在 map 中找能组合给定值的另一半数字，如果找到了，直接返回 2个
这道题最优的做法时间复杂度是 O(n)。
解题思路
在数组中找到2个数之和等于给定值的数字，结果返回2个数字在数组中的下标。
题目大意
Explanation: 342 + 465 = 807.
Output: 7 -> 0 -> 8 
Input:(2 -> 4 -> 3)+(5 ->6 -> 4)
func twosum(nums []int, target int) [int {
package leetcode 
return nil
m := make(map[int]int) 
for i := O; i < len(nums); i++ {