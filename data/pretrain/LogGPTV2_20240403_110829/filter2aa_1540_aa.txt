# ExploitSpotting: Automatically Locating Vulnerabilities from Vendor Patches

## Presenter
Jeongwook Oh  
Senior Security Researcher  
WebSense Inc.  
Defcon 18, August 1, 2010, Las Vegas, USA

## Motivation
- Over the past five years, I have been working on a security product.
- Intrusion Prevention Systems (IPS) and vulnerability scanners require signatures.
- Detailed technical information on patches is often not provided by vendors.
- Microsoft's MAPP program has emerged in recent years, but it is often insufficient.
- In such cases, you have two options:
  - Manually compare disassemblies.
  - Use binary diffing tools.
- Binary diffing is the most effective method to extract valuable information from patches.

## Methodology
### Overview
- I will demonstrate the entire process of a typical binary diffing.
- You will gain an understanding of what binary diffing entails.
- The example will illustrate the standard binary diffing process using the MS10-018 patch for the CVE-2010-0806 vulnerability.

### Example: CVE-2010-0806 Patch
#### Patch Description
- **Vulnerability**: Use-after-free in the Peer Objects component (iepeers.dll) in Microsoft Internet Explorer 6, 6 SP1, and 7.
- **Impact**: Allows remote attackers to execute arbitrary code via vectors involving access to an invalid pointer after object deletion.
- **Exploitation**: This vulnerability was exploited in the wild in March 2010.
- **Source**: [CVE-2010-0806](http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0806)

### Step-by-Step Analysis
#### Acquire Patches
- Download the patch from the official Microsoft page (MS10-018).
- For XP IE 7, use the following link: [Patch Download](http://www.microsoft.com/downloads/details.aspx?FamilyID=167ed896-d383-4dc0-9183-cd4cb73e17e7&displaylang=en)

#### Extract Patches
- Use the command: `C:\> IE7-WindowsXP-KB980182-x86-ENU.exe /x:out`

#### Acquire Unpatched Files
- Collect unpatched files from the operating system where the patch is intended to be installed.
- Use `SortExecutables.exe` from the DarunGrim2 package to consolidate the files into a directory with the version number.

#### Load Binaries in DarunGrim2
- Launch `DarunGrim2.exe` and select "File > New > Diffing from IDA" from the menu.
- Wait for the process to complete, which can take from a few seconds to a few minutes depending on the binary size and complexity.

#### Binary Level Analysis
- Identify functions with a low match rate (e.g., 86% or 88%), indicating minor code changes that may be security patches.

#### Function Level Analysis
- Click on the function match row to view the matching graphs.
- Color codes:
  - **White**: Matched blocks
  - **Yellow**: Modified blocks
  - **Red**: Unmatched blocks (inserted or removed)
- Follow the control flow from the red block to understand the patch. For example, if `esi` is set as the return value (`eax`), the patch likely sanitizes the return value under certain conditions.

### Challenges with Current Binary Diffing Tools
- **File Management**: Tedious tasks like downloading patches, storing old binaries, and manually loading files.
- **Identifying Security Updates**: Distinguishing between security and feature updates.
- **Function Analysis**: Reviewing all modified functions, especially when there are many.

### Solution: DarunGrim 3
- **Bin Collector**: Automates binary collection and management.
- **Automatic Patch Handling**: Downloads and extracts patches.
- **Vendor Support**: Supports Microsoft binaries; Adobe and Oracle support coming soon.
- **Security Implication Score**: Highlights functions with more security-related patches.
- **User-Friendly Web Interface**: Provides easy access to diffing results.

### Architecture Comparison
#### DarunGrim 2
- **Diffing Engine**
- **Database (SQLite)**
- **IDA**
- **Windows GUI**

#### DarunGrim 3
- **Diffing Engine**
- **Database (SQLite)**
- **IDA**
- **Python Interface**
- **Web Console**
- **Bin Collector**
- **Binary Storage**

### Performing Diffing
#### Interactive
- **Using DarunGrim2.exe UI**:
  - Provide paths for each binary.
- **Using DarunGrim2.exe + Two IDA Sessions**:
  - Launch DarunGrim2.exe.
  - Run two IDA sessions.
  - Use DarunGrim2 plugin in both original and patched binaries.
  - Analyze data through shared memory.
- **Using DarunGrim Web Console**:
  - User-friendly interface.
  - Includes "Bin Collector" and "Security Implication Score" support.

#### Non-Interactive
- **Using DarunGrim2C.exe Command Line Tool**:
  - Batch-able, quick, and handy.
- **Using DarunGrim Python Interface**:
  - Batch-able, quick, and highly scriptable.

### Diffing Engine and Database
- **Python Interface**:
  - `import DarunGrimEngine`
  - `DarunGrimEngine.DiffFile(unpatched_filename, patched_filename, output_filename, log_filename, ida_path)`
  - Performs disassembly using IDA, runs as a background process, and automatically runs the DarunGrim IDA plugin and DiffEngine.

- **Database Access**:
  - `import DarunGrimDatabaseWrapper`
  - `database = DarunGrimDatabaseWrapper.Database(filename)`
  - Retrieve and print function match information and disassembly lines.

### Bin Collector
- **Automated Binary Collection**:
  - Visits vendor patch pages using `mechanize` and `BeautifulSoup`.
  - Extracts and archives binary files.
  - Uses `sqlalchemy` to index files and `PE` version information for storage.
- **Scriptable and Extensible**:
  - Written in Python.
  - Supports Microsoft binaries; Adobe and Oracle support coming soon.

### Web Console Workflow
1. **Select Vendor**: Currently supports Microsoft; Oracle and Adobe support coming soon.
2. **Select Patch Name**.
3. **Select OS**.
4. **Select File**: Choose between GDR (General Distribution Release) and QFE/LDR (Quick Fix Engineering/Limited Distribution Release).
5. **Initiate Diffing**: Automatically selects the unpatched file based on filename and version.
6. **Check Results**: Review the diffing results.

### Reading Results
- **Locate Security Patches**: Focus on identifying security patches quickly.
- **Handle Noisy Results**: Sometimes, diff results can be unclear due to noise.