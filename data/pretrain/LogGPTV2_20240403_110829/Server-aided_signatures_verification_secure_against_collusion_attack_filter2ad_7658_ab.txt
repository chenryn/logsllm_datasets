message/signature pair (m; (cid:27)) to C. C then initi-
ates the AidedVerify protocol as a client, and the
adversary A responses as the server.
402
Schemes
Sign
BLS
ZSS
BB
BGLS
(cid:27) = H0(m)x
(cid:27) = g
1
(H1 (m)+x)
1
((cid:27)1; (cid:27)2) =
(g
H1 (m)+x+yr ; r)
(cid:27)i = H0(mi)xi
k
(cid:27) =
i=1 (cid:27)i
∏
Verify
^e(g; (cid:27)) ?=
^e(g; g) ?=
^e(pk; H0(m))
^e((cid:27); gH1(m) · pk)
^e(g; g) ?=
^e((cid:27)1; gH1(m) · pkX
∏
^e(g; (cid:27)) ?=
k
i=1 ^e(pki; H0(mi))
· pk(cid:27)2
Y )
Table 1: Concise Review of Four Signature Schemes
Output. A outputs a message/signature pair (m
C. A is considered to win the game if m
⊤ ← AidedVerifyc(m
∗
) to
=∈ M and
; pk; ((cid:28); (cid:0))) ↔ AidedVerifys((cid:0)).
; (cid:27)
; (cid:27)
∗
∗
∗
∗
2.3 Review of Pairing-based Signatures
Table 1 gives a concise review of a few selected short signa-
ture schemes and an aggregate signature scheme. H0; H1 are
cryptographic (collision resistant) hash functions which map
arbitrary bit-strings to G and Zp respectively. The private
signing key is a random element x ∈R Zp; any additional
component which may be required is denoted by y ∈R Zp.
BB is provably secure in the standard model.
3. OUR SECURITY DEFINITION
We propose a better model of the security of a SAV scheme
against collusion between the server and the signer.
Definition 5. A server-aided veri(cid:12)cation protocol is (t; qv)-
sound against adaptive chosen veri(cid:12)cation attacks under col-
lusion if for all probabilistic polynomial time adversary A
which runs within time t wins the following game with neg-
ligible probability in a security parameter (cid:21).
Setup. The challenger C runs the algorithms Setup, KeyGen
and VStetup to obtain the system parameter Param, a
key pair (sk; pk) and the private/public veri(cid:12)cation pa-
rameter VString = ((cid:28); (cid:0)) respectively. The adversary
A is given Param, (sk; pk) and (cid:0), but not (cid:28) .
Query. A can adaptively make at most qv OAidedVer queries,
as de(cid:12)ned in De(cid:12)nition 4. A can maintain some state
information state throughout all these queries.
Output. With state, A outputs a message m
∗
∗
; m
to C. Let b0 ← Verify(pk; (cid:27)
and a
∗
) and
,pk, VString ) ↔ A(state).
signature (cid:27)
b1 ← AidedVerifyc(m
We say that A wins if b0 ̸= b1.
,(cid:27)
∗
∗
∗
∗
∗
; (cid:27)
An alternative de(cid:12)nition can be given by assigning b0 ←
; pk; VString) ↔ AidedVerifys((cid:0)) instead.
AidedVerifyc(m
It is equivalent to the above de(cid:12)nition by the correctness of
a SAV protocol (De(cid:12)nition 3).
4. OUR SOLUTION
The basic idea of our protocol is similar to the generic
protocol of Girault and Lefranc [9]. Let f be a scheme-
speci(cid:12)c public function which takes (Param, pk, m, (cid:27)) as
input. Their protocol assumes the predicate is in the for-
m of ^e(g; g) = ^e((cid:27)
; r),
; f (Param; pk; m; r)), where (cid:27) = ((cid:27)
′
′
403
′
(cid:27)
is the group element in (cid:27) and r is the other part of the
signature, if any1. Hence the application is rather limited,
e.g., it cannot be applied on schemes which involve predi-
cates not based on ^e(g; g) [3, 2]. In contrast, our protocol
works with predicate which is based on the comparisons be-
tween elements in GT or products of them. This generalizes
the predicate class of [9] and e(cid:11)ectively covers nearly all
pairing-based veri(cid:12)cation algorithms, in particular, signa-
ture schemes such as [2, 3, 6] studied in [8].
4.1 Our Generic Protocol
We (cid:12)rst establish some notations. Let F be a scheme-
speci(cid:12)c function which takes (Param, pk, m, (cid:27)) as input and
let Fagg be a function that is speci(cid:12)c to an aggregate sig-
nature scheme which takes Param, {pki
}, {mi}, (cid:27) as input.
In the basic form, the output of F or Fagg only consists
of a set of group-G elements {Ci}i∈[1;(cid:23)] for a positive in-
teger (cid:23). A more general de(cid:12)nition F′
agg allows the
∏
output to be pairs of a group-G element and an exponen-
t in Zp, {(Ci; vi)}i∈[1;(cid:23)]. Let V be a predicate in the form
(k;l)∈Y ^e(Ck; Cl) for some subsets
of
X ;Y ⊆ {1;··· ; (cid:23)} × {1;··· ; (cid:23)}. Similarly, corresponding to
the more general de(cid:12)nition F′
be a predicate
k ; C vl
(i;j)∈X ^e(C vi
in the form of
l )
for some subsets X ;Y ⊆ {1;··· ; (cid:23)} × {1;··· ; (cid:23)}.
or F′
; C vj
j ) ?=
(i;j)∈X ^e(Ci; Cj) ?=
∏
, let V′
(k;l)∈Y ^e(C vk
or F′
∏
∏
i
We reduce the task of server-aided veri(cid:12)cation to the task
of \secure" delegation of pairing computation. Let S be a
secure pairing delegation protocol to be described in details.
The framework of our generic protocol is given below.
1. The veri(cid:12)er runs the pre-computation phase of S, pos-
sibly with the knowledge of a (set of) public key.
2. After receiving a (set of) message, a signature and a
(set of) public key, the veri(cid:12)er executes F (or Fagg) to
obtain {Ci}i∈[1;(cid:23)] (or {(Ci; vi)}i∈[1;(cid:23)] for F or F′
agg).
3. The veri(cid:12)er engages with the server in the request-
response phase of S to ask for the values of ^e(Ci; Cj),
^e(Ck; Cl) where (i; j) ∈ X ; (k; l) ∈ Y according to the
predicate V (or V′
).
4. The veri(cid:12)er runs the veri(cid:12)cation phase of S to ensure
the pairing are computed correctly.
5. The veri(cid:12)er (cid:12)nally checks if the predicate is true ac-
cording to the values obtained in the output phase of
S, which is gives the result of the veri(cid:12)cation of the
signature.
4.2 Pairing Delegation Protocols
The key element of our SAV protocol is pairing delegation
S, which is introduced in [4]. Below we adopt slightly the
de(cid:12)nition from [11].
Definition 6. A pairing delegation protocol is a two-move
interactive protocol between a client (delegator) and a serv-
er (delegatee) consists of (cid:12)ve phases { pre-computation, re-
quest, response, veri(cid:12)cation and output.
1. Pre-computation phase: the client performs local com-
putation taking the system parameter and possibly one
of the points A, B as the input. The system parameter
includes the bilinear map context (G; GT ; g; p; ^e).
1We abused the notation of f a bit such that it may take a
truncated part of the input (only a part of (cid:27) in their case).
2. Request phase: the client sends a message to the serv-
er based on the output of the pre-computation phase.
In case that one of the points is not used in the pre-
computation phase, The message to be sent should be
further processed with the knowledge of any points which
are not used in the pre-computation phase.
3. Response phase:
the server sends a message to the
client. The input of the server includes the system pa-
rameter and the message from the client in the request
phase.
4. Veri(cid:12)cation phase: the client veri(cid:12)es the message from
the server based on the output of the pre-computation
phase. It halts and output ⊥ if the check fails.
5. Output phase: the client outputs a GT element ^e(A; B)
and the server has no local output.
To our knowledge, the studies of pairing delegation proto-
cols in the literature include [4, 10, 11] . Only the protocols
in [11] consider batch delegation.
Definition 7
([11]). Batch pairing delegation protocol
is an interactive protocol between a client (delegator) and a
server (delegatee). The input of the client consists of a set
of points A;{Bi}i∈[1;(cid:23)] ∈ G for a positive integer (cid:23). As a
result of the protocol, the client outputs a set of GT elements
{^e(A; Bi)}i∈[1;(cid:23)] and the server has no local output.
The (cid:12)rst reason we turn our attention to the batch pair-
ing delegation protocol is that, the de(cid:12)nitions of soundness
in [4, 10] do not specify whether A and/or B are known to
the adversary (the malicious server in our context). Indeed,
none of the protocols in [10] is designed for the case which
both of the two input points are public. This is important
in SAV since the input of the veri(cid:12)cation algorithm is by
de(cid:12)nition public (also recall that the adversary in our ad-
versarial model is equipped with the message, the signature,
the system parameters, etc.) It is simply not suitable for
our purpose if the security of the protocols relies on the fact