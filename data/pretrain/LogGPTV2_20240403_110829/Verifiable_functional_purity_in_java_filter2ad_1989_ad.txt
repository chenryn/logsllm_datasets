the key is speciﬁed as an argument to the constructor. Immutabil-
ity of AES also required making all instance variables final and
immutable. To accomplish this, we had to remove debugging trace
information from the class. In a case where preserving such in-
formation is important, a suitable solution would be to return from
the top-level methods an object containing both the original return
value and the debugging trace for that method call.
Notice that we also changed the return type of the encrypt and
decrypt methods to an immutable type. This was not strictly nec-
essary for verifying the purity of the AES library, but it helps clients
of the AES library write their own pure methods that manipulate
data returned from the AES library. In general, returning an im-
mutable data structure helps verify purity of other parts of the code.
After our refactoring, clients of the AES library are able to check
that decryption is the inverse of encryption by inserting
k.check(x);
before every call to k.encrypt(x), where instance k is of type
AES. The check method can be deﬁned as follows:
public void check(ByteArray x) {
assert(decrypt(encrypt(x)).equals(x));
}
Since this method is pure, inserting the call to check cannot change
the program’s behavior. Moreover, this call ensures that encrypt
and decrypt satisfy the inverse property for every value x that is
ever encrypted by any client of the AES library.
7.2 Voting machine
7.2.1 Motivation
Next, we examined the serialization and deserialization code of
an experimental voting machine implementation [24]. We refac-
tored the code to make serialization and deserialization pure. Our
goal was to conﬁrm at runtime that deserialization is the inverse of
serialization, following the pattern described in Section 2.2. This
ensures that all votes that are successfully recorded will be read
back correctly during vote tallying.
7.2.2 Changes to the codebase
Nearly all changes made were simply replacing standard Java
arrays with Joe-E immutable arrays. Another common change was
adding the Immutable interface to classes that were already ob-
servationally immutable. (This required nothing more than adding
“implements Immutable” to the class declaration.)
Another modiﬁcation involved the use of a monotonically in-
creasing serial number to ﬁlter out duplicate ballots. The last re-
ceived serial number was stored as a static ﬁeld inside the
BallotMessage class. Inside the deserialization method, the se-
rial number of the ballot was compared with the static value of the
most recently received serial number; if the serial number was al-
ready received, the deserialization method would return null. With
detection of duplicate ballots written in this way, the deserialization
is not deterministic. To ﬁx this, we separated the deserialization
functionality from duplicate ballot suppression.
The only other signiﬁcant change necessary was to require that
a Ballot received all of its Races upon construction. Prior to
refactoring, the Ballot class exposed a method addRace(Race
r). This method had to be removed in order to make the Ballot
class immutable.
The method that we wished to make veriﬁably pure serves to
check the serialization. The method is called after the object has
been serialized to an array of bytes, and tests that the serialized
form deserializes to match the original ballot.
Its signature was
initially:
public static boolean
deserializesTo (byte[] serialized,
BallotMessage bm)
After refactoring, the method was changed to use a ByteArray
instead of byte[]. The actual deserialization, which is performed
by a constructor that takes a ByteArray, is also veriﬁably pure.
7.3 HTML parser
Our third application, an HTML parser [20], was a much larger
and more instructive undertaking. Since our modiﬁcations to this
library were signiﬁcant, we ensured that it retained its functional-
ity by verifying that our modiﬁed version and the original version
produced the same results when run on a corpus of HTML test
cases [11].
7.3.1 Motivation
Our primary goal was to refactor the code to make the top-level
parse method pure. From a security perspective, a pure parse
method is valuable for any system in which parses need to be per-
formed on behalf of different users or using data from different
sources. An example of this is on a web forum, where posts to the
forum must be sanitized to prevent cross-site scripting attacks. A
pure parse method together with a pure sanitization routine ensures
that there can be no accidental data contamination between differ-
ent posts, and that no private information about a user can be acci-
dentally leaked into another post or to another user. Additionally, a
pure parse method guarantees that a given parse is reproducible on
any machine under virtually any circumstances.
Before refactoring, the top-level method signature, which resides
in the Parser class, was the following:
public NodeList parse (NodeFilter filter)
throws ParserException
Originally, neither the Parser class nor the NodeFilter class was
immutable, and hence this method was not veriﬁably pure.
7.3.2 Mutable static state
We removed several instances of mutable static state from the
HTML library, so that the code would pass the Joe-E veriﬁer. For
example, originally the only way to pass options to the parser was
to set a global ﬂag, parse, and then restore the ﬂag, as follows:
boolean oldValue = SomeClass.SOMEFLAG;
SomeClass.SOMEFLAG = true;
try { parser.parse(); }
finally { SomeClass.SOMEFLAG = oldValue; }
This pattern seems to have been used to avoid propagating a con-
ﬁguration parameter through several levels in the call hierarchy.
However, this use of global variables makes it harder to see how
the ﬂag is speciﬁed, renders the code thread-unsafe, and violates
Joe-E’s prohibition on shared mutable state.
We eliminated this pattern by augmenting the API with a top-
level parse method that takes an extra argument and passes it as
necessary to other parts of the program. The original top-level
parse method remains, using a default value for the ﬂag.
Instance method calls in constructors
The original codebase also violated Joe-E restrictions by printing
to System.out for debugging and reading the default locale us-
ing java.util.Locale.getDefault(). Using Locale objects
in Joe-E code is not problematic, but the default locale is system-
dependent and therefore non-deterministic. We instead modiﬁed
the API to require that a Locale be passed as a parameter to ob-
jects needing access to the locale.
7.3.3
We found many constructors that called other instance methods
during their execution. As discussed earlier, Joe-E prohibits this
(see § 6.2), so we had to eliminate all calls to instance methods
from within constructors. This was bothersome—it was one of the
few changes we had to make that did not reﬂect poor or nonstan-
dard style in the original code—but fortunately we were able to
work around the problem in every case by inlining the instance
method, replacing the instance method with a static method, or us-
ing a factory method instead of a constructor. Nonetheless, this
String html = getHtmlStringFromSomewhere();
Parser p = new Parser(html);
NodeList list = p.parse(null); // null NodeFilter
// do something with the parse "tree" in list
Figure 6: A typical use of the Parser class. The HTML doc-
ument is supplied to the constructor as a string. Then, the
parse method is called with a NodeFilter as a parameter.
A NodeList is returned, which contains a list of the top-level
nodes from the HTML document.
experience suggests that the restriction on calling instance methods
from constructors may place an undue burden on Joe-E program-
mers. We are currently considering less restrictive alternatives for
future Joe-E releases.
7.3.4 Immutable classes
Once the HTML parser’s code passed the Joe-E veriﬁer, we refac-
tored the Parser and NodeFilter classes to be immutable.
The original Parser class contained a Lexer as an instance vari-
able. In order to make the Parser class immutable, this instance
variable had to be removed due to the fact that a Lexer is inherently
mutable. We refactored the code to construct and use a Lexer in-
side the top-level parse method. A typical use of the Parser class
can be seen in Figure 6.
Making the classes that implement the NodeFilter interface
immutable was straightforward, except for the IsEqualFilter
class. This required signiﬁcant effort due to the fact that this class,
which tests whether two nodes are equivalent to each other, con-
tained an instance variable of type Node. As a result, all classes that
implemented the Node interface had to be made immutable, which
necessitated removing all setter methods from any Node subclass
and requiring that all ﬁelds were set upon construction of any sub-
class of Node.
Refactoring the Node subclasses to be immutable proved difﬁ-
cult due to a nonstandard construction pattern. The library used
a prototype construction pattern to support the creation of custom
parsers that recognize varying sets of HTML tags4: before parsing,
the caller could register a set of Node prototypes. When the Lexer
needed to construct a new Node, it would clone a prototype and
then overwrite the relevant ﬁelds of the clone using setter methods.
We refactored the code to use a more standard construction pat-
tern in which Nodes are constructed using a constructor that takes
an argument for each instance ﬁeld that needs to be set. Minor
functionality was lost with this change, as it is no longer possible
to create a custom NodeFactory (without creating a custom class
implementing the NodeFactory interface) to recognize a different
set of nodes.
Also, to make Nodes immutable, we had to split the Page class
into two classes. Before refactoring, the Page class conﬂated two
distinct purposes. It was used by both the Lexer and by the Node
classes. The Lexer used a Page instance during lexing to main-
tain information about the current position of the cursor in the page
and to get and unget characters. This inherently requires a mutable
class. On the other hand, the Node classes only used the Page ob-
ject for ﬁnding out the line and column numbers for characters in
the page. This information is ﬁxed and will never change after con-
struction of a Node. To reﬂect this fact, we created an immutable
class called PageInfo to hold this information and extracted it
from the mutable Page class. Now, when the Lexer creates a Node,
4For example, one could create a parser that recognizes only img
tags, and treats all other tags as generic tags with no hierarchical
structure.
it obtains the PageInfo from the Page and passes it to the Node’s
constructor.
As illustrated above, immutability is a property that necessarily
spreads through related classes. We noticed similarities between
these immutable data structures and those used in functional pro-
gramming. For instance, immutable data structures must be con-
structed from the bottom up and hence are necessarily acyclic.
We also refactored the parse method to make the parse tree it
returns be immutable. This is not necessary for the purity of the
parse method, but it aids the creation of other pure methods that
use the data structure returned by the parse method, since callers
of the parse method can directly pass the parse tree it returns as a
parameter to other pure methods.
7.4 Summary of patterns
Using a strictly-functional style throughout a program is the most
reliable pattern for attaining veriﬁable purity, as it ensures that ev-
ery method will be pure. Such a strict approach is generally not
necessary to achieve useful purity guarantees. None of the three
applications that we refactored were written in an exclusively func-
tional style, either before or after our modiﬁcations. Our approach
to purity requires only that immutable types (and thus functional
programming style) be used for the interface of a pure function, al-
lowing its internal algorithms to be written in an imperative fashion
if the programmer so desires.
Objects that have cycles (for example, a tree with parent pointers
or a doubly-linked list) pose a challenge for our approach. A cyclic
object graph, even if it is observationally immutable once fully con-
structed, cannot be statically veriﬁed as immutable in our system.
We may therefore be unable to verify purity for methods that use
such objects.
Joe-E required us to eliminate the use of mutable static state and
pass parameters explicitly as arguments instead of using mutable
global variables. We found that this brought our code closer to a
functional style and had beneﬁts of its own.
We believe that new code can take better advantage of Joe-E’s
guarantees if the class hierarchy is designed with immutability in
mind. If part of a class is immutable but the rest of the class is
not, the entire class must be treated as mutable. Consequently, if
a concept has separable mutable and immutable aspects, it may be
helpful to represent it as two separate classes.
7.5 Waterken Server
The Waterken server is an extensible web server designed for
building distributed web services [9]. Waterken is implemented in
a mixture of Joe-E and Java. The Joe-E code was not retroﬁtted
from Java to Joe-E, as in our previous examples, but was designed
and implemented following object-capability principles. The Joe-
E portion is substantial, comprising 8,246 source lines of code and
132 classes.
We counted the number of pure methods in the Waterken Joe-E
code. (See Table 2.) Our results are somewhat surprising: a large
fraction of methods (17%) and an even larger fraction of construc-
tors (29%) are veriﬁably pure. While the code was written in an
object-capability style, veriﬁable purity was not an explicit goal.
This suggests that veriﬁable purity can (and does) occur as a natu-
ral consequence of object-capability discipline.
8. DISCUSSION
One advantage of our approach is that it can facilitate reasoning
about side-effects and data dependencies for methods even if they
do not strictly meet our requirements to be functionally pure. Since
the accessible data and possible effects of a method are limited to
Methods
Constructors
Pure Total % pure
17%
29%
524
128
89
37
Table 2: The number of pure and impure methods and con-
structors in the Waterken Server.
objects reachable from its arguments, these effects are still bounded
even if some arguments are mutable. In particular, the method can
only mutate objects that are reachable from its non-immutable ar-
guments. Typing and capability reasoning can limit this set to a
small portion of the in-memory objects in the program, e.g., the
values in a single array of ints, or the private instance ﬁelds of an
object.
One can sometimes use these bounded effects to achieve purity
properties from methods that are not individually pure. For in-
stance, consider the following set of operations on a non-immutable
object o:
T o = new T(a);
o.f(b); o.g(c);
... // do something with o
If the constructor is pure and the arguments a, b, and c are all im-
mutable, then the state of o after this sequence of operations will be
a deterministic function of a, b, and c and no other side effects will
occur. We will refer to a sequence of invocations with this property
as a functionally pure sequence.
If all of the inputs are known in advance, the sequence above can
be written as a single veriﬁably pure function; for this example, we
would have:
T pure(A a, B b, C c) {
T o = new T(a);
o.f(b); o.g(c);
return o;
}
The more interesting case is where the inputs are not known in
advance, such as if some of them come from interactions with a
user. In this case, some of the inputs depend on information re-
ceived from the program, e.g., return values from invocations on o.
This case can be expressed as a sequence of veriﬁably pure method
calls if it is refactored to use a purely functional style. Speciﬁcally,
we would refactor T to be immutable and replace each mutating
instance method of T with one that returns both the original return
value and a new object that has the modiﬁcations applied.
For cases in which making T immutable is impractical or cum-
bersome, we need a new set of rules sufﬁcient to verify such a se-
quence is functionally pure. It is safe to add return values to the
ﬁrst scenario above, as long as they do not enable modiﬁcations to
the object’s internal state. This limitation can easily be veriﬁed by
requiring the return values to be immutable. (Thrown exceptions
would also be a concern, but Joe-E already requires all throwables
to be immutable). This set of restrictions is not as trivial to check
as the ones needed for individual methods to be veriﬁably pure, but
it allows for reasoning about useful properties of non-immutable
objects.
The pattern allows for purity to be demonstrated in event-based
interactive systems, such as a voting machine. Each voter’s actions
constitute a stream of events that should be interpreted as they ar-
rive to produce the voted ballot. Pure sequences can allow us to