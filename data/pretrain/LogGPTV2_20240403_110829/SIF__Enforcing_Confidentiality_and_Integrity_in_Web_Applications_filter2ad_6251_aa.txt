title:SIF: Enforcing Confidentiality and Integrity in Web Applications
author:Stephen Chong and
K. Vikram and
Andrew C. Myers
SIF: Enforcing Conﬁdentiality and Integrity in Web Applications
Stephen Chong
Andrew C. Myers
Department of Computer Science, Cornell University
K. Vikram
Abstract
SIF (Servlet Information Flow) is a novel software
framework for building high-assurance web applications,
using language-based information-ﬂow control to en-
force security. Explicit, end-to-end conﬁdentiality and
integrity policies can be given either as compile-time
program annotations, or as run-time user requirements.
Compile-time and run-time checking efﬁciently enforce
these policies.
Information ﬂow analysis is known to
be useful against SQL injection and cross-site scripting,
but SIF prevents inappropriate use of information more
generally: the ﬂow of conﬁdential information to clients
is controlled, as is the ﬂow of low-integrity information
from clients. Expressive policies allow users and appli-
cation providers to protect information from one another.
SIF moves trust out of the web application, and into
the framework and compiler. This provides application
deployers with stronger security assurance.
Language-based information ﬂow promises cheap,
strong information security. But until now, it could not
effectively enforce information security in highly dy-
namic applications. To build SIF, we developed new lan-
guage features that make it possible to write realistic web
applications. Increased assurance is obtained with mod-
est enforcement overhead.
Introduction
1
Web applications are now used for a wide range of
important activities: email, social networking, on-line
shopping and auctions, ﬁnancial management, and many
more. They provide services to millions of users and
store information about and for them. However, a
web application may contain design or implementation
vulnerabilities that compromise the conﬁdentiality, in-
tegrity, or availability of information manipulated by the
application, with ﬁnancial, legal, or ethical implications.
According to a recent report [33], web applications ac-
count for 69% of Internet vulnerabilities. Current tech-
niques appear inadequate to prevent vulnerabilities in
web applications.
In general, information security vulnerabilities arise
from inappropriate information dependencies, so track-
ing information ﬂows within applications offers a com-
prehensive solution. Conﬁdentiality can be enforced
by controlling information ﬂow from sensitive data to
clients; integrity can be enforced by controlling infor-
mation ﬂow from clients to trusted information—as a
side effect, protecting against common vulnerabilities
like SQL injection and cross-site scripting. In fact, recent
work [14, 19, 37, 15] on static analysis of PHP and Java
web applications has used dependency analyses to ﬁnd
many vulnerabilities in existing web applications and
web application libraries. Dynamic tainting can detect
some improper dependencies and has also proved use-
ful in detecting vulnerabilities [39, 6]. However, static
analyses have the advantage that they can conservatively
identify information ﬂows, providing stronger security
assurance [28].
Therefore, we have developed Servlet Information
Flow (SIF), a novel framework for building web appli-
cations that respect explicit conﬁdentiality and integrity
information security policies. SIF web applications are
written in Jif 3.0, an extended version of the Jif program-
ming language [21, 24] (which itself extends Java with
information-ﬂow control). The enforcement mechanisms
of SIF and Jif 3.0 track the ﬂow of information within
a web application, and information sent to and returned
from the client. SIF reduces the trust that must be placed
in web applications, in exchange for trust in the servlet
framework and the Jif 3.0 compiler—a good bargain be-
cause the framework and compiler are shared by all SIF
applications.
The security policies used in SIF are both strong and
expressive. Information ﬂow is tracked through a type
system that tracks all information ﬂows, not merely ex-
plicit ﬂows. Security enforcement is end-to-end, because
policies are enforced on information from when it en-
ters the web application, to when it leaves, even as in-
formation ﬂows between different client requests. The
security policies are expressive, allowing complex secu-
rity requirements of multi-user systems to be enforced.
Unlike prior frameworks for tracking information ﬂow
in web applications, policies can express ﬁne-grained re-
quirements for both conﬁdentiality and integrity. Further,
the interactions between conﬁdentiality and integrity are
controlled.
The end-to-end security provided by information-ﬂow
control has long been appealing, but much theoretical
work on language-based information ﬂow has not yet
USENIX Association
16th USENIX Security Symposium
1
been successfully put into practice. We have identiﬁed
limitations of existing security-typed languages for rea-
soning about security in a dynamic external environment,
and we have extended the Jif language with new features
supporting these dynamic environments, resulting in a
new version of the language, Jif 3.0.
Information-ﬂow control mechanisms work by label-
In previous information ﬂow mecha-
ing information.
nisms, the space of labels is essentially static.
In ear-
lier versions of Jif, for example, labels are expressed in
terms of principals, but the set of principals is ﬁxed at
compile time. This is a serious limitation for web appli-
cations, which often add new users at run time. Jif 3.0
adds the ability for applications to create their own prin-
cipals, dynamically extending the space of information
labels. Moreover, Jif 3.0 allows applications to imple-
ment their own authentication and authorization mecha-
nisms for these application-speciﬁc principals—a neces-
sity given the diversity of authentication schemes needed
by different applications. Jif 3.0 also improves Jif’s abil-
ity to reason about dynamic security policies, allowing,
for example, web application users to specify their own
security requirements at run time and have them enforced
by the information ﬂow mechanisms. These new mecha-
nisms create new information channels, but Jif 3.0 tracks
these channels and prevents their misuse.
To explore the performance and usability of SIF, we
developed two web applications with non-trivial security
requirements: an email application specialized for cross-
domain communication, and a multiuser shared calendar.
Both applications add new principals and policies at run
time, and both allow users to deﬁne their own informa-
tion security policies, which are enforced by the same
mechanisms used for compile-time policies.
In summary, this paper makes three signiﬁcant contri-
butions:
• It shows how to use language-based information
ﬂow to construct a practical framework for high-
assurance web applications, in which information
ﬂow is tracked to and from clients, and users can
specify and reason about information security. To
our knowledge, this is the ﬁrst implemented web ap-
plication framework to strongly enforce both conﬁ-
dentiality and integrity.
• It shows that application-deﬁned mechanisms for
access control and authentication, and a dynami-
cally extensible space of labels, can be integrated
securely with language-based information ﬂow.
• It describes the experience using these new mecha-
nisms to build realistic web applications.
The remainder of the paper is structured as follows.
Section 2 gives an overview of the Servlet Informa-
tion Flow framework, including some background on Jif.
Section 3 introduces the new dynamic features in Jif 3.0,
which enhance Jif’s ability to express and enforce dy-
namic security requirements. Our experience with build-
ing web applications in SIF is described in Section 4.
Section 5 covers related work, and Section 6 concludes.
2 Servlet Information Flow framework
SIF is built using the Java Servlet framework [7], but
presents a higher-level interface to web applications.
Through a combination of static and dynamic mecha-
nisms, SIF ensures that web applications use data only
in accordance with speciﬁed security policies, by track-
ing the ﬂow of information in the server, and informa-
tion sent to and from the client. Web applications in
SIF are written entirely in Jif 3.0, an extended version of
the security-typed language [36] Jif, in which types are
annotated with information ﬂow policies. Security poli-
cies are enforced on information as it ﬂows through the
system, giving stronger security assurance than ordinary
(discretionary) access control.
In designing SIF, we faced two main challenges. The
ﬁrst was identifying information ﬂows in web applica-
tions, including information that ﬂows over multiple re-
quests. For example, a request sent to a server by a
user may contain information about the user’s previous
request and response. The second challenge was to re-
strict insecure information ﬂows while providing sufﬁ-
cient ﬂexibility to implement full-ﬂedged web applica-
tions. The resulting framework is a principled approach
to designing realistic, secure web applications.
SIF is implemented in about 4040 non-comment, non-
blank lines of Java code. An additional 960 lines of Jif
code provide signatures for the Java classes that web ap-
plications interact with. Jif signatures provide security
annotations for Java classes, and expose only a subset of
the actual methods and ﬁelds to clients. SIF web appli-
cations are compiled against the Jif signatures, but linked
at run time against the Java classes. Some Java Servlet
framework functionality makes reasoning about infor-
mation security infeasible. Using signatures and wrap-
per classes, SIF necessarily limits access to this func-
tionality, but without preventing implementation of full-
ﬂedged web applications.
In this section, we ﬁrst describe the threat model that
SIF addresses, and the security assurances that SIF pro-
vides. We present some background about Jif before de-
scribing the design of SIF.
2.1 Threat model and security assurance
Threat model. We assume that web application clients
are potentially malicious, and that web application im-
plementations are benign but possibly buggy. Thus, we
aim to ensure that appropriate conﬁdentiality and in-
2
16th USENIX Security Symposium
USENIX Association
tegrity security policies are enforced on server-side in-
formation regardless of the actions of clients, or the mis-
takes of well-meaning application programmers.
Although the Jif programming language prevents the
unintentional violation of information security, it pro-
vides mechanisms for explicit intentional downgrading
of security policies (see Section 4.3). While a well-
meaning programmer will be unable to accidentally mis-
use these mechanisms, a malicious programmer may be
able to subvert them, or use certain covert channels that
Jif does not track (see Section 2.2).
We do not address network threats, such as denial of
service attacks, or the interception and alteration of data
sent over the network.
The Jif compiler and SIF are added to the trusted com-
puting base, which already includes the servlet container,
and the software stack required to run the servlet con-
tainer. Note that SIF web applications are not part of
the trusted computing base, whereas in standard servlet
frameworks, web applications must be trusted.
Security assurance. In a typical web application, secu-
rity assurance consists of convincing each party with a
stake in the system that the application enforces their se-
curity requirements. Obviously users would like to have
assurance that information they input will be conﬁden-
tial, and information they view is not corrupted. The ap-
plication provider (i.e., deployer) may also have conﬁ-
dentiality and integrity requirements for its information.
Like other recent work on improving security of web ap-
plications (e.g., [14, 18, 37, 15]), we focus on providing
assurance to deployers. The difference here is that SIF
enforces rich policies for information integrity and con-
ﬁdentiality, including policies provided by the user.
Although we focus on providing assurance to deploy-
ers, it is worth considering security assurance from a
web application user’s perspective. Users must be con-
vinced that they are communicating with an application
that enforces their security requirements. The security
validation offered by SIF effectively partitions the secu-
rity assurance problem into two parts: ﬁrst, ensuring that
the application respects users’ security requirements, and
second, ensuring the server users communicate with is
correctly running the application.
SIF addresses the ﬁrst part of the assurance problem:
verifying the security properties of web application code.
SIF does not address the second part: convincing a re-
mote client they are communicating with veriﬁed code.
This step is important if the web application provider
might be malicious. However, remote attestation meth-
ods [34, 10, 30] seem likely to be effective in solving
this second problem. Attestation methods could be used
to sign application code, or alternatively, to sign a veri-
ﬁcation certiﬁcate from a trusted SIF compiler that has
checked the code. We leave integration of attestation
mechanisms till future work.
In any case, concern about malicious application
providers should not be exaggerated; users’ willingness
to spend money via web applications suggests they al-
ready place a modicum of trust in them. This work aims
to ensure this trust is justiﬁed. At a minimum, this means
application deployers can be more conﬁdent in making
possibly legally binding representations to their users.
The SIF framework provides the following security as-
surances to deployers of web applications.
• SIF applications enforce explicit information secu-
rity policies. In particular, SIF ensures that infor-
mation sent to the client is permitted to be read by
the client, thus ensuring that conﬁdential informa-
tion held on the server is not inadvertently released
to the client. Further, information received from
the client is marked as tainted by the client, help-
ing prevent inappropriate use of low-integrity infor-
mation. Thus, useful conﬁdentiality and integrity
restrictions are enforced in SIF applications.
• The information security policies of back-end sys-
tems (e.g., a database, ﬁle system, or legacy applica-
tion) are also enforced, provided these systems have
appropriate interfaces annotated with Jif 3.0 secu-
rity policies. Thus, adding a web front-end to an
existing system does not weaken the security assur-
ance of that system, modulo the assumptions of our
threat model.
• Jif ensures that security policies on information
are not unintentionally weakened, or downgraded.
However, many web applications that handle sensi-
tive information intentionally downgrade informa-
tion as part of their functionality. As discussed fur-
ther in Section 4.3, SIF web applications must sat-
isfy rules that enforce selective downgrading [22,
26] and robustness against all attackers [5], secu-
rity conditions that provide strong information ﬂow
guarantees in the presence of downgrading.
• SIF web applications can produce only well-formed
HTML. While cascading style sheets and JavaScript
may be used, they cannot be dynamically generated,
and must be explicitly speciﬁed in the deployment
descriptor, where they can be more easily reviewed
by the application deployer. The deployer thereby
gains assurance that a web application does not con-
tain malicious client-side code.
2.2 Background on Jif
SIF web applications are written in Jif 3.0, a new ver-
sion of the Jif programming language. To understand the
design of SIF, some background on the Jif programming