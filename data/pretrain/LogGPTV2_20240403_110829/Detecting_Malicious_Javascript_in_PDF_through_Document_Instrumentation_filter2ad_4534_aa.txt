title:Detecting Malicious Javascript in PDF through Document Instrumentation
author:Daiping Liu and
Haining Wang and
Angelos Stavrou
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Detecting Malicious Javascript in PDF through Document Instrumentation
Daiping Liu
Haining Wang
Department of Computer Science
College of William and Mary
Department of Computer Science
College of William and Mary
PI:EMAIL
PI:EMAIL
Angelos Stavrou
Center for Secure Information Systems
George Mason University
PI:EMAIL
Abstract— An emerging threat vector, embedded malware
inside popular document formats, has become rampant since
2008. Owed to its wide-spread use and Javascript support, PDF
has been the primary vehicle for delivering embedded exploits.
Unfortunately, existing defenses are limited in effectiveness,
vulnerable to evasion, or computationally expensive to be
employed as an on-line protection system. In this paper, we
propose a context-aware approach for detection and conﬁne-
ment of malicious Javascript in PDF. Our approach statically
extracts a set of static features and inserts context monitoring
code into a document. When an instrumented document is
opened, the context monitoring code inside will cooperate with
our runtime monitor to detect potential infection attempts in
the context of Javascript execution. Thus, our detector can
identify malicious documents by using both static and runtime
features. To validate the effectiveness of our approach in a real-
world setting, we ﬁrst conduct a security analysis, showing that
our system is able to remain effective in detection and be robust
against evasion attempts even in the presence of sophisticated
adversaries. We implement a prototype of the proposed system,
and perform extensive experiments using 18623 benign PDF
samples and 7370 malicious samples. Our evaluation results
demonstrate that our approach can accurately detect and
conﬁne malicious Javascript in PDF with minor performance
overhead.
Keywords-Malcode bearing PDF; malicious Javascript; mal-
ware detection and conﬁnement; document instrumentation.
I. INTRODUCTION
Malware authors are constantly seeking for new ways
to compromise computer systems. Recently, they have em-
barked to take advantage of popular forms of data exchange,
focusing their attention on malcode-bearing PDF docu-
ments [1]. The PDF standard has several unique advantages
when used as an attack vector: (1) it has replaced Microsoft
Word as the most dominant document format; (2) it has
been widely considered to be safe; (3) it is easy to craft
a malicious PDF; and more importantly, (4) it supports
Javascript. All of these features have made PDF one of
the most attractive exploitation vehicles. This is clearly
supported by the fact that the number of discovered PDF
vulnerabilities has quadrupled in the last ﬁve years [2]
with many attack cases having been reported [1] [3]. The
most striking observation comes from Microsoft malware
protection center, showing that the exploitation of old PDF
vulnerabilities is on the rise [1].
Despite the increasing number of successful PDF infec-
tions and their impact on end users, thus far, only a few
methods for detection of malicious PDF have been proposed
as response to this emerging threat. Unfortunately, it ap-
pears that traditional signature and behavior based detection
methods, which are favored by the majority of modern anti-
virus software, cannot handle malicious PDF well. Recently,
researchers exploit the structural differences between benign
and malicious documents to detect malicious PDF [4] [5]
[6] [7]. These methods have been proven to be simple, fast,
and accurate. However, when attackers are aware of these
static features, they can evade easily [8]. Another recent
work extracts and tests malicious Javascript in an emulated
interpreter [9]. Although it is more robust against evasion,
attackers can still exploit syntax obfuscations to subvert
Javascript extraction. Also it is very costly to emulate all
PDF-speciﬁc Javascript objects. In 2009, Adobe announced
the Protected Mode, a sandboxing mechanism that runs PDF
reader in a conﬁned environment. Although it raises the bar,
Adobe Sandbox has its own drawbacks. An obvious one is
that there exist vulnerabilities in the sandbox itself. Actually
hackers have already discovered different ways to escape
Adobe Sandbox [10] [11].
The detection of malicious PDF exhibits two distinct
challenges. First, users tend to open multiple PDFs simu-
taneously. However, the runtime behaviors of a PDF reader
can vary as different documents are opened, and both benign
and malicious PDFs are processed by one single thread in the
PDF reader. These can inevitably affect detection accuracy
due to the interference among multiple open documents.
Second, although it is straightforward to locate traditional
malware once detected, it is non-trivial to pinpoint these
malicious PDF documents since all open documents could
be malicious.
In this paper, we introduce a context-aware approach to
detect and conﬁne malicious Javascript in PDF through static
document instrumentation and runtime behavior monitoring.
Our method is motivated by the fact that some essential oper-
ations of Javascript in malicious PDF rarely occur in benign
documents. Our context-aware approach can efﬁcaciously
overcome the aforementioned two challenges. On one hand,
context-aware approach can make detection features, like
suspicious memory consumption, more effective in detec-
tion. On the other hand, the context information explicitly
indicates which open documents are malicious.
There are different ways to achieve context-aware mon-
itoring. One intuitive choice is to extract Javascript from
documents [9] [14]. Alternatively, Javascript interpreters can
be instrumented [15]. But these methods are neither robust
nor easy to implement in practice. Instead, we choose to
perform static document instrumentation. This method, to
the best of our knowledge, has never been explored before
for PDF malware detection and conﬁnement. For each PDF
Javascript snippet, we include a prologue and epilogue to
inform our runtime detector for the entry to and exit from
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.92
DOI 10.1109/DSN.2014.92
DOI 10.1109/DSN.2014.92
100
100
100
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:29:18 UTC from IEEE Xplore.  Restrictions apply. 
Table I: Existing Methods to Detect and Conﬁne Malicious PDF.
Method
Signature
Structural [5] [4] [6]
Extract-and-Emulate [9]
Lexical Analysis of Javascript [7]
Adobe Sandboxing [12]
CWSandbox [13]
Difﬁcult to Evade
No
No
Neutral
Neutral
Neutral
Neutral
Our Method
Yes
Javascript context. The advantage of using static document
instrumentation over the other two alternatives lies in three
aspects. First and most important, it is immune to code and
syntax obfuscations. Second, it does not need to emulate
Javascript interpreters, resulting in much less development
effort and minor computational overhead. Last but not least,
it provides good portability and can be easily deployed at
end hosts.
When an instrumented document is loaded, our runtime
detector monitors the behaviors of a PDF reader process
and identiﬁes potential infection attempts from Javascript.
The infection attempt manifests itself through a sequence
of suspicious actions, such as exploiting to compromise
systems, retrieving malware and executing it. By monitoring
these suspicious behaviors as evidence of infection, we
compute a weighted sum to detect malicious PDF.
Our system also deﬁnes ﬁve novel static features for detec-
tion. These features characterize the obfuscation techniques
frequently used in malicious PDF. The combination of static
and runtime features will be more effective and robust than
existing methods, which are either fully static [5] [4] [6]
or fully dynamic [9] [13]. A more thorough comparison
between our method and others is presented in Table I.
For any new intrusion detection mechanism, we need
to perform a security analysis—a task that in many cases
is even more important than its detection performance. In
principle, it is required that the defense system remains
robust and secure even when its internal operation is exposed
to attackers. To this end, we conduct a security analysis
of our approach showing that our system is still effective
in detection and robust against evasion attacks even in
the presence of a sophisticated adversarial environment. In
particular, a list of potential advanced attacks are discussed
and mitigations for their impact are presented.
To validate the efﬁcacy of our system, we conduct a series
of experiments using a corpus of 18623 benign and 7370
malicious PDF documents. The experimental results show
that our static and runtime features achieve very promising
detection performance. No false positive and few (25 out
of 942) false negatives are generated during the evaluation.
It
takes only 0.04 seconds on average to instrument a
malicious sample and about 5.5 seconds to process a very
large (20 MB) document. The slowdown caused by our
runtime detector is 0.093 seconds for a single Javascript.
Even when as many as 20 separate scripts are instrumented,
the slowdown does not exceed 2 seconds. Overall, our
system provides an effective defense against malicious PDF
in practice.
End-Host Deployment
Yes
Yes
No
Yes
Yes
No
Yes
Need Emulation
No
No
Yes
No
No
No
Neutral
Low Overhead
Yes
Yes
No
Yes
Yes
No
Yes
The remainder of the paper is outlined as follows. In
Section II, we survey related work. The system design is
detailed in Section III. Then in Section IV, we analyze
the robustness of our system under the assumption of an
advanced attacker. The evaluation results are presented in
Section V. Section VI discusses the limitations and future
work. Finally, we conclude in Section VII.
II. RELATED WORK
Existing research on malicious PDF detection has taken
two directions, static methods which build statistical models
from document content and classify unknown samples using
machine learning, and dynamic methods which execute
suspicious Javascript in some constrained environments.
Early static methods are based on n-gram analysis to
detect universal malicious ﬁles [16] [17]. In 2011, Laskov et
al. [7] presented PJScan, the ﬁrst static method dedicated to
the detection of malicious PDF. Using a patched SpiderMon-
key, PJScan extracts lexical tokens of Javascript and trains
an OCSVM (One Class Support Vector Machine) classiﬁer
to identify malicious PDF. Instead of analyzing Javascript,
Malware Slayer [6] inspects the content of malicious PDF
and counts the frequency of PDF keywords. Then, a set
of keywords with high frequency are selected and fed into
various machine learning algorithms for detection. PDFRate
[4] extracts more structural features from PDF and thus
builds a more accurate classiﬁer. It can also detect targeted
attacks. Srndic et al. [5] proposed a structural-path based
method. They modeled a document as a set of structural
paths and detected malicious PDF using Decision Tree
and SVM (Support Vector Machine). Wepawet [18] uses
JSAND [14], which leverages statistical and lexical features
of Javascript, to detect malicious PDF. In general, static
methods have been proven to be simple, fast, and effective.
However, they are susceptible to mimicry attacks [8]. Our
method differs from these fully static methods in that,
besides static features, we also use runtime behaviors of
malicious Javascript for detection.
Compared with static detection, dynamic approaches are
more robust against mimicry attacks. Tzermias et al. [9] pro-
posed MDScan, which extracts Javascript from documents
and executes it in instrumented SpiderMonkey and Nemu
[19]. However, such a method suffers several limitations.
First, it requires reliable Javascript extraction, which can
be subverted by syntax obfuscations. Attackers can hide
shellcode at some weird places in a document, e.g., in the
title, and reference it in forms like “this.info.title”.
In this case, the extracted Javascript will fail to execute in
emulated environments. Moreover, it is required to emulate
101101101
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:29:18 UTC from IEEE Xplore.  Restrictions apply. 
the front-end will
Static Analysis and Instrumentation: For suspicious PDF,
the front-end ﬁrst parses the document structure and then
decompresses the objects and streams. A set of static features
are extracted in this process. When a document has been
decompressed,
it and add
context monitoring code for Javascript. In some cases, if
the document is encrypted using an owner’s password, i.e.,
a mode of PDF in which the document is readable but non-
modiﬁable, we need to remove the owner’s password. With
the help of PDF password recovery tools like [28], this can
be done easily and very fast.
instrument
Runtime Detection: The back-end component works in
two steps, runtime monitoring and runtime detection. When
an instrumented PDF is loaded,
the context monitoring
code inside will cooperate with our runtime monitor, which
tries to collect evidence of potential
infection attempts.
When Javascript executes to the end or a critical operation
occurs, the runtime detector will compute a malscore. If the
malscore exceeds a predeﬁned threshold, the document will
be classiﬁed as malicious.
B. Static Features
Several recent works have proposed to detect malicious
PDF by statically analyzing document content [4] [5] [6].
Static methods are simple, and they have promising perfor-
mance in detecting existing malicious documents. In this
work, we deﬁne ﬁve novel static features to aid runtime
detection by leveraging the obfuscation techniques used in
malicious PDF. Although static features are vulnerable to
evasion, their usefulness for detection lies in two aspects:
(1) if malicious documents use obfuscations, our system can
detect them with higher conﬁdence; and (2) if not, then the
unobfuscated documents can be processed more easily and
accurately by our front-end component. In the following, we
detail the static features used in our system.
Ratio of PDF Objects on Javascript Chain: In PDF,
a labelled object is called an indirect object, which can