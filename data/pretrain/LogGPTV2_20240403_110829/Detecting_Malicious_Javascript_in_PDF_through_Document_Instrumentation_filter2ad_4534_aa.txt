# Detecting Malicious JavaScript in PDF through Document Instrumentation

**Authors:**
- Daiping Liu
- Haining Wang
- Angelos Stavrou

**Conference:**
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

**Abstract:**
Embedded malware within popular document formats, particularly PDFs, has become a significant threat since 2008. Due to its widespread use and support for JavaScript, PDFs have been the primary medium for delivering embedded exploits. However, existing defenses are often limited in effectiveness, vulnerable to evasion, or computationally expensive. In this paper, we propose a context-aware approach for detecting and confining malicious JavaScript in PDFs. Our method involves static extraction of features and the insertion of context monitoring code into the document. When an instrumented document is opened, the context monitoring code collaborates with our runtime monitor to detect potential infection attempts during JavaScript execution. This dual approach leverages both static and runtime features to identify malicious documents. We validate our approach through security analysis and extensive experiments using 18,623 benign and 7,370 malicious PDF samples, demonstrating high accuracy and minimal performance overhead.

**Keywords:**
- Malcode-bearing PDF
- Malicious JavaScript
- Malware detection and confinement
- Document instrumentation

## I. Introduction

Malware authors continually seek new ways to compromise computer systems. Recently, they have exploited popular data exchange formats, focusing on malcode-bearing PDF documents. The PDF format offers several advantages as an attack vector:
1. It has replaced Microsoft Word as the dominant document format.
2. It is widely considered safe.
3. It is easy to craft a malicious PDF.
4. It supports JavaScript, making it highly attractive for exploitation.

The number of discovered PDF vulnerabilities has quadrupled in the past five years, with numerous attack cases reported. Despite the increasing threat, few effective methods for detecting malicious PDFs have been proposed. Traditional signature and behavior-based detection methods, favored by most antivirus software, struggle with malicious PDFs. Recent research has explored structural differences between benign and malicious documents, but these methods can be easily evaded if attackers are aware of the static features. Another approach involves extracting and testing JavaScript in an emulated interpreter, which, while more robust, is still susceptible to syntax obfuscations and computationally expensive. Adobe's Protected Mode, a sandboxing mechanism, also has limitations, as vulnerabilities in the sandbox itself have been exploited.

The detection of malicious PDFs presents two main challenges:
1. Users often open multiple PDFs simultaneously, leading to varied runtime behaviors that can affect detection accuracy.
2. Identifying malicious PDFs among multiple open documents is non-trivial.

In this paper, we introduce a context-aware approach for detecting and confining malicious JavaScript in PDFs through static document instrumentation and runtime behavior monitoring. This method is motivated by the fact that certain JavaScript operations in malicious PDFs are rare in benign documents. Our approach effectively addresses the aforementioned challenges by enhancing detection features and explicitly identifying malicious documents.

## II. Related Work

Existing research on malicious PDF detection has focused on two directions: static methods, which build statistical models from document content, and dynamic methods, which execute suspicious JavaScript in constrained environments.

Early static methods used n-gram analysis to detect universal malicious files. In 2011, Laskov et al. introduced PJScan, a static method for detecting malicious PDFs using lexical tokens and machine learning. Other static methods, such as Malware Slayer and PDFRate, inspect PDF content and use various machine learning algorithms for detection. These methods are simple, fast, and effective but are susceptible to mimicry attacks.

Dynamic approaches, like MDScan, extract and execute JavaScript in emulated environments. While more robust against mimicry attacks, they require reliable JavaScript extraction and emulation, which can be subverted by syntax obfuscations and hidden shellcode.

Our method differs from these fully static or dynamic methods by combining static and runtime features, providing a more effective and robust solution.

## III. System Design

### A. Overview

Our system consists of two main components: static analysis and instrumentation, and runtime detection.

#### Static Analysis and Instrumentation

For suspicious PDFs, the front-end first parses the document structure, decompresses objects and streams, and extracts a set of static features. Context monitoring code is then inserted into the document. If the document is encrypted with an owner's password, the password is removed using PDF password recovery tools.

#### Runtime Detection

The back-end component performs runtime monitoring and detection. When an instrumented PDF is loaded, the context monitoring code inside the document cooperates with our runtime monitor to collect evidence of potential infection attempts. If the malscore, computed based on detected behaviors, exceeds a predefined threshold, the document is classified as malicious.

### B. Static Features

We define five novel static features to aid runtime detection by leveraging obfuscation techniques in malicious PDFs. These features help in two ways:
1. They increase confidence in detecting obfuscated malicious documents.
2. They simplify and improve the accuracy of processing unobfuscated documents.

#### Ratio of PDF Objects on JavaScript Chain

In PDFs, labeled objects (indirect objects) can form chains. The ratio of these objects on the JavaScript chain is one of the static features we use. This feature helps in identifying obfuscation patterns commonly used in malicious PDFs.

## IV. Security Analysis

To ensure the robustness of our system, we conduct a security analysis, demonstrating its effectiveness and resilience against evasion attacks even in the presence of sophisticated adversaries. We discuss potential advanced attacks and present mitigations for their impact.

## V. Evaluation Results

We validate our system through a series of experiments using a corpus of 18,623 benign and 7,370 malicious PDF documents. The results show high detection performance with no false positives and few false negatives. The average time to instrument a malicious sample is 0.04 seconds, and the slowdown caused by our runtime detector is minimal, even when multiple scripts are involved.

## VI. Limitations and Future Work

While our system provides an effective defense against malicious PDFs, there are some limitations. Future work will focus on improving the system's scalability and further enhancing its robustness against advanced evasion techniques.

## VII. Conclusion

In this paper, we presented a context-aware approach for detecting and confining malicious JavaScript in PDFs through static document instrumentation and runtime behavior monitoring. Our method combines static and runtime features, providing a more effective and robust solution compared to existing methods. Extensive experiments and security analysis demonstrate the high accuracy and low performance overhead of our system, making it a practical defense against malicious PDFs.