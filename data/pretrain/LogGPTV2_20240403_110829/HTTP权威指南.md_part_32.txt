### 匹配与条件请求

当客户端发送一个条件请求时，如果缓存的实体标签（ETag）与服务器上的实体标签匹配，服务器将返回一条 `304 Not Modified` 响应。例如：

**条件请求**
```http
GET /announce.html HTTP/1.0
If-None-Match: "v2.6"
```

**响应**
```http
HTTP/1.0 304 Not Modified
Date: Wed, 03 Jul 2002, 19:18:23 GMT
ETag: "v2.6"
Expires: Fri, 05 Jul 2002, 05:00:00 GMT
```

在上述示例中，由于客户端提供的 ETag `"v2.6"` 仍然与服务器上的 ETag 匹配，因此服务器返回了 `304 Not Modified` 响应。

如果服务器上的 ETag 发生变化（例如变为 `"v3.0"`），则服务器会在 `200 OK` 响应中返回新的内容及相应的 ETag。

### 多个 ETag 的使用

可以在 `If-None-Match` 首部包含多个 ETag，以告知服务器缓存中已存在带有这些 ETag 的对象副本。例如：
```http
If-None-Match: "v2.6", "v2.4", "v2.5"
If-None-Match: "foobar", "A34FAC0095", "Profiles in Courage"
```

### 强弱验证器

缓存可以使用 ETag 来判断已缓存版本是否为最新。从这个角度来看，ETag 和最近修改日期都是缓存验证器。HTTP/1.1 支持“弱验证器”，允许服务器声明非实质性或不重要的修改是“足够好”的等价体。

- **强验证器**：只要内容发生变化，强验证器就会改变。
- **弱验证器**：允许对内容进行少量修改，但在内容的主要含义发生变化时，通常也会改变。弱验证器使用前缀 `W/` 标识。

例如：
```http
ETag: W/"v2.6"
If-None-Match: W/"v2.6"
```

服务器必须确保不为两个不同的实体重用特定的强 ETag 值，或者为两个语义不同的实体重用特定的弱 ETag 值。

### 何时使用 ETag 和最后修改日期

- 如果服务器回送了一个 ETag，HTTP/1.1 客户端必须使用 ETag 验证器。
- 如果服务器只回送了一个 `Last-Modified` 值，客户端可以使用 `If-Modified-Since` 验证。
- 如果 ETag 和最后修改日期都提供，客户端应该同时使用这两种验证方法，以便 HTTP/1.0 和 HTTP/1.1 缓存都能正确响应。

除非无法生成 ETag，否则 HTTP/1.1 服务器应发送 ETag，并最好同时发送 `Last-Modified` 值。

### 控制缓存的能力

服务器可以通过多种方式指定文档在过期之前可以被缓存的时间，按优先级递减排列如下：

1. 附加 `Cache-Control: no-store` 首部到响应中。
2. 附加 `Cache-Control: no-cache` 首部到响应中。
3. 附加 `Cache-Control: must-revalidate` 首部到响应中。
4. 附加 `Cache-Control: max-age` 首部到响应中。
5. 附加 `Expires` 日期首部到响应中。
6. 不附加过期信息，让缓存自行确定过期日期。

### no-Store 与 no-Cache 响应首部

- **no-store**：禁止缓存复制响应。缓存通常会像非缓存代理服务器一样转发响应，然后删除对象。
- **no-cache**：允许存储在本地缓存中，但在与原始服务器进行新鲜度验证之前，不能提供给客户端。

示例：
```http
Pragma: no-cache
Cache-Control: no-store
Cache-Control: no-cache
```

### max-age 响应首部

`Cache-Control: max-age` 表示从服务器传送文档起，文档处于新鲜状态的秒数。还有一个 `s-maxage` 首部，仅适用于共享缓存。

示例：
```http
Cache-Control: max-age=3600
Cache-Control: s-maxage=3600
```

### Expires 响应首部

`Expires` 指定实际的过期日期，但由于时钟不同步问题，推荐使用 `max-age`。示例：
```http
Expires: Fri, 05 Jul 2002, 05:00:00 GMT
```

### must-revalidate 响应首部

`Cache-Control: must-revalidate` 告诉缓存，在没有与原始服务器进行再验证的情况下，不能提供陈旧的对象副本。如果原始服务器不可用，缓存必须返回 `504 Gateway Timeout` 错误。

### 试探性过期

如果响应中没有 `Cache-Control: max-age` 或 `Expires` 首部，缓存可以计算试探性最大使用期。常用的算法之一是 LM-Factor 算法，它基于最后修改日期来估计文档的新鲜度。

### 客户端的新鲜度限制

Web 浏览器通常有刷新按钮，可以强制对可能过期的内容进行刷新。客户端可以使用 `Cache-Control` 请求首部来强化或放松对过期时间的限制。常见的指令包括 `max-stale`、`min-fresh` 和 `max-age`。

### 注意事项

文档过期系统并不完美。发布者如果不小心分配了很长的过期日期，可能会导致文档修改后无法及时显示在所有缓存中。因此，很多发布者不会使用很长的过期日期，甚至不使用过期日期，这使得缓存难以确定文档的新鲜度。

### 设置缓存控制

不同的 Web 服务器提供了不同的机制来设置 HTTP 缓存控制首部。以下是 Apache Web 服务器的一些相关模块和配置示例：

- **mod_headers**：用于设置单独的 HTTP 首部。
- **mod_expires**：自动生成带有正确过期日期的 `Expires` 首部。
- **mod_cern_meta**：将包含 HTTP 首部的文件与特定对象关联起来。

通过这些模块，可以灵活地控制缓存行为。具体配置请参见 Web 服务器文档。