Five Whys, 140, 487
deployment, 93
guidelines for, 10
(see also continuous build and deployment)
initial response, 151
development environment, 19
lessons learned, 158
development/ops split, 4
overview of, 159
DevOps, 7
process-induced emergencies, 155
Direct Server Response (DSR), 228
solution availability, 158
disaster recovery tools, 195
test-induced emergencies, 152
disaster role playing, 401
encapsulation, 228
disaster testing, 462-465
endpoints, in debugging, 138
Disaster and Recovery Testing (DiRT), 462
engagements (see SRE engagement model)
disk access, 303
error budgets
Diskerase process, 85
benefits of, 35
distractibility, 411
best practices for, 481
distributed consensus systems
forming, 34
benefits of, 285
guidelines for, 8
coordination, use in, 293
motivation for, 33
deploying, 304-312
error rates, 38, 60
locking, use in, 286
Escalator, 178
monitoring, 312
ETL pipelines, 327
need for, 285
eventual consistency, 287
overview of, 313
executor load average, 253
patterns for, 291-295
performance of, 296-304 F
principles, 289
failures, best practices for, 479
quorum composition, 310
(see also cascading failures)
quorum leasing technique, 299
fake backends, 204
(see also consensus algorithms)
false-positive alerts, 180
514 | Index
feature flag frameworks, 381 high-velocity approach, 24, 88
file descriptors, 263 hotspotting, 236
Five Whys, 140, 487
flow control, 233 I
FLP impossibility result, 290
idempotent operations, 78, 316
Flume, 328
incident management
fragmentation, 229
best practices for, 166
effective, 161
G
formal protocols for, 130
gated operations, 89 incident management process, 153, 163
Generic Routing Encapsulation (GRE), 228 incident response, 104
GFE (Google Frontend), 21, 232 managed incident example, 165
GFS (Google File System), 76, 293, 318-319, roles, 163
354 template for, 485
global overload, 248 unmanaged incident example, 161
Global Software Load Balancer (GSLB), 18 when to declare an incident, 166
Gmail, 65, 360 infrastructure services
Google Apps for Work, 29 identifying risk tolerance of, 31
Google Compute Engine, 38 improved SRE through automation, 69
Google production environment integration proposals, 89
best practices for, 479-484 integration tests, 186, 201
complexity of, 205 intent-based capacity planning
datacenter topology, 14 Auxon implementation, 211-213
development environment, 19 basic premise of, 209
hardware, 13 benefits of, 209
Shakespeare search service, 20-22 defined, 209
software infrastructure, 19 deploying approximation, 214
system software, 15-19 driving adoption of, 215-217
Google Workflow system precursors to intent, 210
as model-view-controller pattern, 334 requirements and implementation, 213
business continuity and, 337 selecting intent level, 210
correctness guarantees, 335 team dynamics, 218
development of, 333 interrupts
stages of execution in, 335 cognitive flow state and, 409
graceful degradation, 267 dealing with, 407
GTape, 360 dealing with high volumes, 412
determining approach to handling, 408
H distractibility and, 411
managing operational load, 408
Hadoop Distributed File System (HDFS), 16
on-call engineers and, 412
handoffs, 164
ongoing responsibilities, 413
“hanging chunk” problem, 329
polarizing time, 411
hardware
reducing, 413
managing failures, 15
ticket assignments, 413
software that “organizes”, 15-19
IRC (Internet Relay Chat), 164
terminology used for, 13
health checks, 281
J
healthcare.gov, 103
hermetic builds, 89 jobs, 16
hierarchical quorums, 311 Jupiter network fabric, 14
Index | 515
L majority quorums, 304
labelsets, 112 MapReduce, 328
lame duck state, 234 mean time
latency between failures (MTBF), 184, 199
defined, 341 to failure (MTTF), 10
measuring, 38 to repair (MTTR), 10, 68, 184
monitoring for, 60 memory exhaustion, 263
launch coordination Mencius algorithm, 302
checklist, 373-380, 493 meta-software, 70
engineering (LCE), 370, 384-387 Midas Package Manager (MPM), 91
(see also product launches) model-view-controller pattern, 334
lazy deletion, 349 modularity, 100
leader election, 286, 292 Moiré load pattern in pipelines, 331
lease systems, 294 monitoring distributed systems
Least-Loaded Round Robin policy, 243 avoiding complexity in, 62
level of service, 37 benefits of monitoring, 56, 107
(see also service level objectives (SLOs)) best practices for, 481
living incident documents, 164 blackbox vs. whitebox, 59, 120
load balancing case studies, 65-66
datacenter challenges of, 64, 107
datacenter services and tasks, 231 change-induced emergencies, 154
flow control, 233 creating rules for, 63
Google's application of, 231 four golden signals of, 60
handling overload, 247 guidelines for, 9
ideal CPU usage, 232, 248 instrumentation and performance, 61
lame duck state, 234 monitoring philosophy, 64
limiting connections pools, 235-240 resolution, 62
packet encapsulation, 228 setting expectations for, 57
policies for, 240-246 short- vs. long-term availability, 66
SRE software engineering dynamics, 218 software for, 18
distributed consensus systems and, 307 symptoms vs. causes, 58
frontend terminology, 55
optimal solutions for, 223 valid monitoring outputs, 10
using DNS, 224-227 (see also Borgmon; time-series monitor‐
virtual IP addresses (VIPs), 227 ing)
policy Multi-Paxos protocol, 297, 303
Least-Loaded Round Robin, 243 (see also consensus algorithms)
Round Robin, 241 multi-site teams, 127
Weighted Round Robin, 245 multidimensional matrices, 112
load shedding, 267 multiphase pipelines, 328
load tests, 383 MySQL
lock services, 18, 293 migrating, 73-75, 437
logging, 138 test-induced emergencies and, 152
Lustre, 16
N
M N + 2 configuration, 22, 210-212, 266, 482
machines negative results, 144
defined, 13, 56 Network Address Translation, 228
managing with software, 15 network latency, 300
516 | Index
network load balancer, 227 Outalator, 178-182
network partitions, 287 Outalator
Network Quality of Service (QoS), 157, 252 aggregation in, 180
network security, 106 benefits of, 178
networking, 17 building your own, 179
NORAD Tracks Santa website, 369 incident analysis, 181
number of “nines”, 38, 477 notification process, 178
reporting and communication, 181
O tagging in, 180
overhead, 49
older releases, rebuilding, 89
overload handling
on-call
approaches to, 247
balanced on-call, 127
best practices for, 483
benefits of, 132
client-side throttling, 249
best practices for, 393, 400-405
load from connections, 257
compensation structure, 128
overload errors, 253
continuing education, 406
overview of, 258
education practices, 392, 395
per-client retry budget, 254
formal incident-management protocols, 130
per-customer limits, 248
inappropriate operational loads, 130
per-request retry budget, 254
initial learning experiences, 394
product launches and, 383
learning checklists, 403
request criticality, 251
overview of, 125, 406
retrying requests, 254
resources for, 129
(see also retries, RPC)
rotation schedules, 126
utilization signals, 253
shadow on-call, 405
(see also cascading failures)
stress-reduction techniques, 128
target event volume, 8
P
targeted project work, 397
team building, 391 package managers, 91
time requirements, 128 packet encapsulation, 228
training for, 395-401 Paxos consensus algorithm
training materials, 397 Classic Paxos algorithm, 301
typical activities, 126 disk access and, 303
one-phase pipelines, 328 Egalitarian Paxos consensus algorithm, 302
open commenting/annotation system, 171 Fast Paxos consensus algorithm, 301, 320
operational load Lamport’s Paxos protocol, 290
cross-industry lessons, 467 (see also consensus algorithms)
managing, 408 performance
ongoing responsibilities, 408 efficiency and, 12
types of, 407 monitoring, 61
operational overload, 130 performance tests, 186
operational underload, 132 periodic pipelines, 328
operational work (see toil) periodic scheduling (see cron)
out-of-band checks and balances, 342, 357 persistent storage, 303
out-of-band communications systems, 154 Photon, 305
outage tracking pipelining, 302
baselines and progress tracking, 177 planned changes, 277
benefits of, 182 policies and procedures, enforcing, 89
Escalator, 178 post hoc analysis, 58
Index | 517
postmortems Protocol Data Units, 229
benefits of, 169 provisioning, guidelines for, 11
best practices for, 171-174, 482 PRR (Production Readiness Review) model,
collaboration and sharing in, 171 442, 444-448
concept of, 169 push frequency, 34
cross-industry lessons, 465-467 push managers, 413
example postmortem, 487-490 Python’s safe_load, 201
formal review and publication of, 171
Google's philosophy for, 169 Q
guidelines for, 8
“queries per second” model, 248
introducing postmortem cultures, 172
Query of Death, 276
on-call engineering and, 400
queuing
ongoing improvements to, 175
controlled delay, 267
rewarding participation in, 174
first-in, first-out, 267
triggers for, 170
last-in, first-out, 267
privacy, 341
management of, 266, 294
proactive testing, 159
queuing-as-work-distribution pattern, 295
problem reports, 136
quorum (see distributed consensus systems)
process death, 276
process health checks, 281 R
process updates, 277
Raft consensus protocol, 298, 302
process-induced emergencies, 155
(see also consensus algorithms)
Prodtest (Production Test), 76
RAID, 354
product launches
Rapid automated release system, 90, 91
best practices for, 480
read workload, scaling, 298
defined, 370
real backups, 343
development of Launch Coordination Engi‐
real-time collaboration, 171