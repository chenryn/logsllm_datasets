Gotta  
   glitch
      ‘em all!
10+ Years of War Stories 
Glitching Embedded Devices
AGENDA
Introduction
FI in the wild
Practical FI
Protections
Where is the problem?
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(pin); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(pin); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    gets(pin);
    result = comparePIN(pin);
    if (result == false) {
        sprintf(tmp,"PIN correct\r\n");
    } else {
        sprintf(tmp,"PIN %s is 
                     incorrect\r\
n",pin);
    }
    printf(tmp);
    return result;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    gets(pin);
    result = comparePIN(pin);
    if (result == false) {
        sprintf(tmp,"PIN correct\r\n");
    } else {
        sprintf(tmp,"PIN %s is 
                     incorrect\r\
n",pin);
    }
    printf(tmp);
    return result;
}
Where is the problem?
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(pin); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(pin); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    gets(pin);
    result = comparePIN(pin);
    if (result == false) {
        sprintf(tmp,"PIN correct\r\n");
    } else {
        sprintf(tmp,"PIN %s is 
                     incorrect\r\
n",pin);
    }
    printf(tmp);
    return result;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    gets(pin);
    result = comparePIN(pin);
    if (result == false) {
        sprintf(tmp,"PIN correct\r\n");
    } else {
        sprintf(tmp,"PIN %s is 
                     incorrect\r\
n",pin);
    }
    printf(tmp);
    return result;
}
Where is the problem?
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(PIN); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(PIN); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    fgets(pin,sizeof(pin),stdin);
    result = comparePIN(pin);
    if (result == false) {
        sprintf(tmp,"PIN correct\r\n");
    } else {
        sprintf(tmp,"PIN %s is 
                     incorrect\r\
n",pin);
    }
    printf("%s",tmp);
    return result;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    fgets(pin,sizeof(pin),stdin);
    result = comparePIN(pin);
    if (result == false) {
        sprintf(tmp,"PIN correct\r\n");
    } else {
        sprintf(tmp,"PIN %s is 
                     incorrect\r\
n",pin);
    }
    printf("%s",tmp);
    return result;
}
IS IT NOW 
SECURE?
Where is the problem?
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(PIN); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(PIN); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    fgets(pin,sizeof(pin),stdin);
    result = comparePIN(pin);
    if (result == false) {
        sprintf(tmp,"PIN correct\r\n");
    } else {
        sprintf(tmp,"PIN %s is 
                     incorrect\r\
n",pin);
    }
    printf("%s",tmp);
    return result;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    fgets(pin,sizeof(pin),stdin);
    result = comparePIN(pin);
    if (result == false) {
        sprintf(tmp,"PIN correct\r\n");
    } else {
        sprintf(tmp,"PIN %s is 
                     incorrect\r\
n",pin);
    }
    printf("%s",tmp);
    return result;
}
IS IT NOW 
SECURE?
Who am I?
Demo
Fault Injection attacks
Voltage glitching
5.5V
100 ms
1.8V
5.5V
100 ms
1.8V
Voltage glitching
5.5V
100 ms
1.8V
5.5V
100 ms
1.8V
Glitch!
Glitch!
How FI works?
+5V
CPU
GND
SRAM
CU
ALU
CACHE
…
…
How FI works?
CU
ALU
CACHE
How FI works?
CU
ALU
CACHE
How FI works?
CU
ALU
CACHE
How FI works?
CU
ALU
CACHE
Glitch!
Disabling modules
HW IP
Flipping bits
CMP R0, R1
BNE ERROR
. . .
Skipping / corrupting 
instructions
Effects of glitches
REG
R/W
Preventing R/W
1
1
0
0
Flipping bits
0
0
0
1
0
1
1 → 0
1
0
1
0
0
0
1
1
Flipping bits
0
0
0 → 1
Skipping/corrupting instructions
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(PIN); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(PIN); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    fgets(pin,sizeof(pin),stdin);
    result = comparePIN(pin);
    if (result == false) {
        sprintf(tmp,"PIN correct\r\n");
    } else {
        sprintf(tmp,"PIN %s is 
                     incorrect\r\
n",pin);
    }
    printf("%s",tmp);
    return result;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    fgets(pin,sizeof(pin),stdin);
    result = comparePIN(pin);
    if (result == false) {
        sprintf(tmp,"PIN correct\r\n");
    } else {
        sprintf(tmp,"PIN %s is 
                     incorrect\r\
n",pin);
    }
    printf("%s",tmp);
    return result;
}
Skipping/corrupting instructions
 result = comparePIN(pin);
 result = comparePIN(pin);
ldr
r0, [sp, #pin]
bl comparePIN
str
r0, [sp, #result]
ldr
r0, [sp, #pin]
bl comparePIN
str
r0, [sp, #result]
11
11
11
11
00
00000011010
00000011010
Address
Opcode
 result = comparePIN(pin);
 result = comparePIN(pin);
 result = pin;
 result = pin;
ldr
r0, [sp, #pin]
bl comparePIN
str
r0, [sp, #result]
ldr
r0, [sp, #pin]
bl comparePIN
str
r0, [sp, #result]
ldr
r0, [sp, #pin]
strb r2, [r3, #0] 
str
r0, [sp, #result]
ldr
r0, [sp, #pin]
strb r2, [r3, #0] 
str
r0, [sp, #result]
1100
Skipping/corrupting instructions
11
11
11
00
00000011010
00000011010
Address
Opcode
Skipping/corrupting instructions
 result = comparePIN(pin);
 result = comparePIN(pin);
ldr
r0, [sp, #pin]
bl comparePIN
str
r0, [sp, #result]
ldr
r0, [sp, #pin]
bl comparePIN
str
r0, [sp, #result]
11
00
00
11
00
00000010001
00000010001
Address
Opcode
 result = comparePIN(pin);
 result = comparePIN(pin);
 comparePIN(pin);
 comparePIN(pin);
ldr
r0, [sp, #pin]
bl comparePIN
str
r0, [sp, #result]
ldr
r0, [sp, #pin]
bl comparePIN
str
r0, [sp, #result]
ldr
r0, [sp, #pin]
bl comparePIN
asrs r1, r2, #32 
ldr
r0, [sp, #pin]
bl comparePIN
asrs r1, r2, #32 
1100
Skipping/corrupting instructions
00
00
11
00
00000010001
00000010001
Address
Opcode
Disabling modules
HW IP
Flipping bits
CMP R0, R1
BNE ERROR
. . .
Skipping / corrupting 
instructions
Effects of glitches
Chip Destruction
REG
R/W
Preventing R/W
FI in the wild
FI is trendy!
But it has been there for years...
Age test!
What is the relation between these two?
Don’t do this at home!
Practical FI
Fault Injection Rule #1
Fault Injection Rule #2
10+ Years Glitching
Bypassing authentication
   Bypassing secure boot
      Escalating privileges
         Recovering crypto keys
            Modifying security config.
Bypassing authentication
Bypassing authentications
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(pin); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
const char *PIN = "19379148"
// Compare the PIN with the correct one 
// Return true if different
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(pin); i++) {
        if (pin[i]!=PIN[i])
            return true;
    }
    return false;
}
// Authenticate PIN. 
// Return true if incorrect
bool pinAuthentication() {
    char pin[80];
    char tmp[80];
    bool result=false;
    printf("Please, introduce PIN\r\n");
    gets(pin);
    result = comparePIN(pin);
    if (result == false) {