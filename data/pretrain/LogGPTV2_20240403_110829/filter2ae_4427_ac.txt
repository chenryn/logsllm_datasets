        if ( !v6 )
          break;
        v3 = v12++;
        v4 = v11++;
        *(&v18 + v3) = *v4;
        if ( v12 == 3 )
        {
          v21 = v18 >> 2;
          v22 = 16 * (v18 & 3) + (v19 >> 4);
          v23 = 4 * (v19 & 0xF) + (v20 >> 6);
          v24 = v20 & 0x3F;
          ptr = realloc(ptr, v17 + 4);
          for ( i = 0; i  0 )
      {
        for ( j = v12; j > 2;
        v22 = 16 * (v18 & 3) + (v19 >> 4);
        v23 = 4 * (v19 & 0xF) + (v20 >> 6);
        v24 = v20 & 0x3F;
        for ( k = 0; v12 + 1 > k; ++k )
        {
          ptr = realloc(ptr, v17 + 1);
          v7 = v17++;
          *((_BYTE *)ptr + v7) = byte_406C20[(unsigned __int8)*(&v21 + k)];
        }
        while ( 1 )
        {
          v9 = v12++;
          if ( v9 > 2 )
            break;
          ptr = realloc(ptr, v17 + 1);
          v8 = v17++;
          *((_BYTE *)ptr + v8) = 61;
        }
      }
      result = realloc(ptr, v17 + 1);
      result[v17] = 0;
      return result;
    }
此处便为base64解密但是字母表却发生了变化.之后便是与RVYtG85NQ9OPHU4uQ8AuFM+MHVVrFMJMR8FuF8WJQ8Y=进行比较  
写脚本解密
    base64_table='IJLMNOPKABDEFGHCQRTUVWXSYZbcdefa45789+/6ghjklmnioprstuvqwxz0123y'
    base_encode=str(raw_input(u"请输入解密字符"))
    counter=base_encode.count("=")
    length=len(base_encode)
    encode=""
    encode_re=""
    if(counter==2):
        a=base64_table.find(base_encode[length-4:length-3])#取前六位
        a=a>4
        encode_re=chr(a+b)
    if(counter==1):
        a=base64_table.find(base_encode[length-4:length-3])#第一个字符前6位
        a=a>4
        encode_re1=chr(a+b)
        a=base64_table.find(base_encode[length-3:length-2])#第二个字符后4位
        a=(a&0xf)>2
        encode_re2=chr(a+b)
        encode_re=encode_re1+encode_re2
    length=length-4
    if(counter==0):
        length=length+4
    for i in range(0,length,4):#以4个字符为一组
       a=base64_table.find(base_encode[i:i+1])#第一个字符6位
       a=a>4
       encode=encode+chr(a+b)
       a=base64_table.find(base_encode[i+1:i+2])#第二个字符后4位
       a=((a&0xf)>2
       encode=encode+chr(a+b)
       a=base64_table.find(base_encode[i+2:i+3])#取第三个字符后2位
       a=(a&3)>18    
    b500               pop r1           
    b201               push r2          
    b200               push r1
    c3                 esp-1^=esp-2     
    b500               pop r1           r1=input[0]^0x78
    500018000000       r1=r1>0x18  
    b500               pop r1     
    7000ff000001       r2=r1&&0xff     r2=(input[0]^0x78)&0xff
    01190000000a       r11=0x19     
    020900             r1=ptr[r11]   
    11010000           if(r2==0) r1=r2+4*r1 else r1=r2+r1
    b019000000         push 0x19
    b50a               pop  r11
    b200               push r1
    b409               pop  ptr[r11]   ptr[0x19]=r1
    011a0000000a       r11=0x1a
    b109               push ptr[r11]   prt[0x1a]
    b500               pop  r1
    10000100000000     r1=r1+1      
    011a0000000a       r11=0x1a
    040009             ptr[0x1a]=r1=1
    b01a000000         push 0x1a
    b50a               pop r11
    020900             r1=ptr[r11]=ptr[0x1a]
    86000600000000     r1=r1<0x6
    8800026000000      r1!=0 jz 0x26  
    91                 nop
    ff                 exit
    c2:
    b01a000000         push 0x1a
    b50a               pop r11
    020900             mov r1,ptr[r11]  r1=0
    86000600000000     r1=r1<0x6            
    880026000000       r1!=0;jz 0x26    
    91                 nop    
    ff                 exit
由此可得知prt[0x1a]处计数循环，循环输入6次字符，且改变异或的值。ptr[0x19]为判断位。。判断异或后的值是否为0。而与其异或的就是xyz{|}
就可以得到密码  
xyz{|}
#### 总结
逆向题目中虚拟机经常是一个重要的考点，而最近密码法的出台使得密码，尤其是国密受到了重视。就在最近的中石油比赛中也碰到了国密。这题收获还是不小的。