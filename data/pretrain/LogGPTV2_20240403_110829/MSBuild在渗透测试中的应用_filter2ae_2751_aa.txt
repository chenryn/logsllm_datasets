# MSBuild在渗透测试中的应用
|
##### 译文声明
本文是翻译文章，文章原作者 talosintelligence，文章来源：blog.talosintelligence.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
在之前的[文章](https://blog.talosintelligence.com/2019/11/hunting-for-lolbins.html)中，我们讨论了操作系统默认功能以及其他合法可执行文件的应用场景，攻击者可以在后续攻击阶段（post-compromise）中，通过这种“living-off-the-land”方式来执行程序，我们称这种可执行文件为“LoLBins”。Cisco
Talos一直在跟踪监测数据，尝试分析实际环境中LoLBins的使用状况。
这里我们主要关注以[MSBuild](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view%3Dvs-2019)作为后续攻击平台的行为，为此我们专门从各种来源收集信息，包括公开及私有数据仓库，也包括提交至[Cisco
Threat Grid](https://www.cisco.com/c/en/us/products/security/threat-grid/index.html)平台的样本。
我们收集了恶意MSBuild工程配置文件，分析了相关结构，观察感染方式以及最终payload。此外，我们还讨论了这些行为背后的潜在攻击者。
## 0x01 MSBuild
MSBuild是Microsoft Build Engine的一部分，可以使用XML输入文件来编译应用程序。输入文件通常使用[Microsoft
Visual Studio](https://visualstudio.microsoft.com/)来创建，然而编译应用程序不一定需要使用Visual
Studio，因为系统中可能已经存在编译过程中需要使用的某些.NET平台及其他编译器。
攻击者可以利用MSBuild的这一功能，将恶意源码隐藏在MSBuild配置文件或者工程文件中。
攻击者可以使用MSBuild引擎，通过源码形式来使用恶意软件。[Casey
Smith](https://twitter.com/subTee)在几年前发现并详细描述过这种技术，所提供的PoC模板也经常存在于我们收集到的样本中。
这种技术的优势包括：
1、可以用来绕过应用程序白名单机制，比如[Windows Applocker](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/applocker-overview)。
2、代码在内存中编译，因此磁盘上不会存在驻留文件，不容易引起防御方警觉。
3、攻击者可以采用各种方法来混淆payload，比如随机变量名，或者使用远程站点上的秘钥来加密payload，加大传统检测方法的处理难度。
## 0x02 样本概述
MSBuild输入配置文件有个特点：开发者可以在其中包括一个特殊的XML标签，指定[内联任务](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-inline-tasks?view%3Dvs-2019)，使MSBuild编译并在内存中加载源代码。
图1. MSBuild配置文件中内联任务的定义
根据任务属性，开发者可以指定项目在编译时会自动执行的新类、方法或者代码片段。
源代码可以指定为驱动器上的外部文件。将工程文件及恶意源代码解耦合，可以增加防御方对恶意MSBuild执行场景的检测难度。
在研究过程中，我们从各种数据源收集了100多个潜在的恶意MSBuild恶意文件，分析投递方法并研究最终payload，这些payload通常会采用位置无关代码（通常称为shellcode）形式来投递。
###  Metasploit
我们收集到的样本大多数包含Metasploit Meterpreter stager
shellcode变种，这是由msfvenom工具生成的、适用于嵌入C#变量的一种格式。这种shellcode通常经过混淆处理，比如使用zlib或GZip压缩字节数组，然后将数组转化为经过base64编码的可读文本。
图2. MSBuild配置文件中的Meterpreter stager shellcode样例
我们可以使用shellcode调试器（[scdbg](http://sandsprite.com/blogs/index.php?uid%3D7%26pid%3D152)）来快速分析shellcode，这可能是最方便的一款工具。Scdbg提供了调试shellcode的多个选项，该工具基于开源x86模拟库（libemu）开发，因此只能模拟Windows环境，无法正确分析所有shellcode。无论如何，该工具是分析大量shellcode样本的一个最佳切入点，可以生成日志文件，以便采用集群方式处理。
当然，为了分析shellcode，我们需要将其从适用于C#字节数组变量的形式转换为二进制形式。如果大家经常使用基于Unix的主机以及控制台/shell，那么首先想到的可能是默认工具`xxd`。`xxd`经常用来将二进制文件格式转储为人眼可读的十六进制格式。
`xxd`也提供了还原模式，我们可以使用命令行参数`-r`及`-p`，将C#数组字节转换为二进制文件。
    xxd -r -p input_text_shellcode_file output_binary_shellcode_file
`xxd`支持多种常见的转储格式，但并不一定总是生成正确的输出数据。我们需要检查二进制字节，确保其与shellcode文本文件指定的字节相同。
图3. Scdgb API 跟踪Metasploit stager shellcode
大家可以下载到编译好的scdbg，但我还是推荐大家从[源码](https://github.com/dzzie/VS_LIBEMU)进行编译，因为其中提供了新的API仿真功能。
###  Covenant
[Covenant](https://github.com/cobbr/Covenant)是相对较新的、基于C#的一个命令及控制（C2）框架，可以允许攻击者（或者红方队员）基于多种感染方式（包括MSBuild）创建payload。MSBuild加载器对应的框架代码（skeleton
code）相对比较简单，采用二进制payload作为输入，使用zlib解压缩后，在MSBuild进程空间中加载。
输入payload必须为.NET程序集（assembly），由框架代码加载并执行。Covenant框架采用自定义的post-exploitation植入体（implant），即“Grunts”。Grunts提供了与C2服务器通信的基础框架，发送至受害者系统的任务采用经过混淆的C#程序集格式，由Grunts负责加载并执行。
图4. Covenant中用来加载Grunt植入体的框架代码
###  NPS
NPS是一个简单的可执行封装器，可以将`System.Management.Automation`及其他程序集载入可执行程序的进程空间中。该程序的目标是尝试规避`powershell.exe`的执行限制，运行自定义PowerShell代码。
[nps_payload](https://github.com/trustedsec/nps_payload)工具开发者利用了这种原理，帮助攻击者使用其他方法（包括MSBuild配置工具）来创建非PowerShell
payload。该工具可以生成MSBuild工程文件，用户可以选择使用Meterpreter stager shellcode
payload或者自定义的PowerShell代码payload。
图5. MSBuild非PowerShell工作流程
###  Cobalt Strike
虽然Metasploit shellcode MSBuild payload是我们最常碰到的样本，我们还找到了其他样本，这些样本使用[Cobalt
Strike](https://blog.talosintelligence.com/2018/07/multiple-cobalt-personality-disorder.html) beacon作为payload。beacon
shellcode结构上与PE文件类似，但需要调用shellcode加载器手动加载到内存执行。加载器位于blob开头处，位置在`MZ`魔术字节之前。
图6. Cobalt Strike payload初始执行流程
图7. Cobalt Strike反射式加载器
payload本身大小超过200KB，因此识别起来相对比较容易。下文中我们将介绍攻击者更为复杂的一次操作，其中攻击者使用托管在远程网站上的秘钥，通过AES256算法加密beacon
payload，实现混淆目标。
###  Mimikatz
我们发现唯一比Cobalt Strike shellcode/beacon长的payload为包含2个Mimikatz
payload的一个样本，该样本逻辑上更为复杂，可以将可执行文件载入内存，调用`CreateThread`最终运行该文件。PE加载器的源码可以在Github上找到，这里攻击者略作修改，使其能与MSBuild配合使用。
图8. MSBuild Mimikatz加载器
加载器首先检查系统架构（32位还是64位），然后加载并运行匹配的Mimikatz可执行程序，可执行程序使用base64编码，存放在一个变量中。
## 0x03 案例分析
在过去6个月中，我们分析了提交至Cisco Threat
Grid平台上的样本，下面我们将分析3个典型案例。我们将滥用MSBuild的样本标记为`MSBuild Process Builds with
Project File (xml/csproj)`，大家也可以使用这个标识符来搜索尝试使用相同技术的其他样本。
图9. 滥用MSBuild的攻击标识符
###  案例1：Dropbox上包含MSBuild payload的Word文档
使用MSBuild投递payload的第1个案例为Word文档，该文档会向用户展示常见的钓鱼信息，提示用户“启用内容”来执行文档中包含的VBA宏代码。
启用宏后，VBA代码会在用户的`Temp`目录两种创建2个文件。第1个文件为`expenses.xlsx`，该文档实际上是MSBuild的XML配置文件，其中包含待编译的恶意代码，可以运行payload。
根据VirusTotal提供的信息，该样本托管在公开访问的Dropbox目录中，文件名为`Candidate Resume - Morgan Stanley
202019.doc`，这表明此次攻击活动具有针对性，或者红方渗透测试团队尝试通过诱饵文档突破目标公司的防御。
图10. 诱饵文件
在用户临时目录中创建的第2个文件名为`resume.doc`，这是一个无害的诱饵文档，为市场经理的一份简历。
图11. 无害的诱饵文档