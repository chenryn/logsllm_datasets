### 5.5 Instantiation

#### Security Bounds for the Robustness of G against Memory Attacks

The security bounds for the robustness of the pseudo-random generator \( G \) against memory attacks are summarized in Table 5.1. The parameters used in the analysis include:
- \( q_s \in \{1, 2, 4\} \)
- \( k \in \{40, 64\} \)
- \( \lambda \in \{32, 64\} \)

| \( q_s \) | \( k \) | \( \lambda \) | \( n \) | \( \gamma^* \) |
|---------|--------|-------------|-------|--------------|
| 1       | 40     | 32          | 599   | 559          |
| 1       | 40     | 64          | 631   | 591          |
| 1       | 64     | 32          | 863   | 799          |
| 1       | 64     | 64          | 895   | 831          |
| 2       | 40     | 32          | 631   | 591          |
| 2       | 40     | 64          | 665   | 625          |
| 2       | 64     | 32          | 895   | 831          |
| 2       | 64     | 64          | 959   | 895          |
| 4       | 40     | 32          | 695   | 655          |
| 4       | 40     | 64          | 823   | 783          |
| 4       | 64     | 32          | 959   | 895          |
| 4       | 64     | 64          | 1087  | 1023         |

Our construction is based on the following operations:
- **Refresh**: \( \text{refresh}(S, I) = S \cdot X + I \in \mathbb{F}_{2^n} \)
- **Next**: \( \text{next}(S) = G(U) \), where \( U = [X_0 \cdot S]_{m_1} \)

In Section 4.3, the standard pseudo-random generator \( G \) is defined as:
\[ G(U) = \text{AES}_U(0) \oplus \text{AES}_U(1) \oplus \cdots \oplus \text{AES}_U(\nu - 1) \]
where \( \nu \) is the number of calls to AES with a 128-bit key \( U \), and \( m = 128 \).

For a security parameter \( k = 40 \):
- \( n = 489 \)
- \( \gamma^* = 449 \)
- \( \nu = 5 \)

Applying Theorem 14, we obtain the following bounds:
- For \( k = 40 \): \( n = 567 + q_s \lambda \), \( \gamma^* = 527 + q_s \lambda \)
- For \( k = 64 \): \( n = 831 + q_s \lambda \), \( \gamma^* = 767 + q_s \lambda \)

Consequently, for \( q_s \in \{1, 2, 4\} \), \( k \in \{40, 64\} \), and \( \lambda \in \{32, 64\} \), the concrete security bounds for \( G \) are given in Table 5.1. Specifically:
- For \( q_s = 1 \) and \( \lambda = 32 \), \( G \) is \(((t_0, 2^{40}, 2^{40}, 1), 32, 559, 2^{-40})\)-robust against memory attacks if \( n = 599 \).
- For \( q_s = 4 \) and \( \lambda = 64 \), \( G \) is \(((t_0, 2^{64}, 2^{64}, 4), 64, 1023, 2^{-64})\)-robust against memory attacks if \( n = 1087 \) (based on the discussion about the security of AES in Section 4.5).

---

### Chapter 6: Robustness Against Side-Channel Attacks

#### 6.1 Model Description

In this chapter, we provide a syntactic formalization for the security of pseudo-random number generators with input against side-channel attacks. This formalization is based on [ABP+15]. We use Definition 27 for the pseudo-random number generator with input throughout this chapter.

**Recap of the Robustness Security Model (ROB)**

In the robustness security model ROB (Section 4.1), the distribution sampler \( D \) generates external inputs used to refresh the generator and provides the adversary \( A \) with some information about how the environment of the generator leaks when it generates these inputs. This information is modeled by \( z \). To model information leakage during the execution of the algorithms `refresh` and `next`, we allow the adversary to choose the leakage functions, collectively named \( f \), associated with each algorithm or even each small block. Since our model restricts to non-adaptive leakage, the adversary must choose these functions beforehand, and they are provided as input to the `initialize` procedure (see Figure 6.1).

**New Leakage-Resilient Robustness Security Game (LROB(γ∗, λ))**

- **Parameters**:
  - \( \gamma^* \): Same as in the basic robustness ROB.
  - \( c \): Entropy counter.
  - `compromised`: Boolean flag indicating if the state is compromised.
  - \( \lambda \): Maximal information leakage that can be collected during the execution of `refresh` and `next` operations.
  - \( \alpha \): Minimal expected entropy of \( S \) after a `leak-next` call, in a safe case (when `compromised` is false).

- **Procedures**:
  - **Initialize/ Finalize**: Initiate and conclude the security game with the additional leakage function \( f \).
  - **Get-State/ Set-State**: Same as in the basic robustness ROB.
  - **D-Refresh**: Generates new inputs and updates the state.
  - **Leak-Refresh**: Runs the `refresh` algorithm and provides information leakage \( L \) on the input \( (S, I) \) and seed. If the state is compromised, the entropy counter \( c \) is reduced by \( \lambda \) bits. If \( c \) drops below \( \gamma^* \), it is reset to 0.
  - **Next-ROR**: Runs the `next` algorithm and returns the output.
  - **Leak-Next**: Runs the `next` algorithm and provides information leakage \( L \) on the input \( S \) and seed. If the state is safe, the new entropy estimate \( c \) is set to \( \alpha \); otherwise, it is reset to 0.

**Entropy Estimates in LROB(γ∗, λ)**

The threshold \( \gamma^* \) needs to be slightly higher in our new model to maintain security even in the presence of leakage. Typically, it has to be increased by \( \lambda \).

**Definition 37 (Leakage-Resilient Robustness of Pseudo-Random Number Generator with Input)**

A pseudo-random number generator with input \( G = (\text{setup}, \text{refresh}, \text{next}) \) is called \((t, q_r, q_n, q_s, \gamma^*, \lambda, \epsilon)\)-leakage-resilient robust if, for any adversary \( A \) running in time \( t \), that first generates a legitimate distribution sampler \( D \) (for the `D-refresh`/`leak-refresh` procedure), makes at most \( q_r \) calls to `D-refresh`/`leak-refresh`, \( q_n \) calls to `next-ror`/`leak-next`, and \( q_s \) calls to `get-state`/`set-state` with a leakage bounded by \( \lambda \), the advantage of \( A \) in the game LROB(γ∗, λ) is at most \( \epsilon \).

#### 6.2 Analysis and Limitation of the Original Construction

Let us recall the robust construction described in Section 4.3, denoted as \( G \). It uses a \((t, \epsilon)\)-secure standard pseudo-random generator \( G : \{0, 1\}^m \rightarrow \{0, 1\}^{n+\ell} \). The seed is a pair \((X, X_0)\) of length \( 2n \), where \( n \) is the state length, \( \ell \) is the output length, and \( p = n \) is the input length.

The construction uses iterated multiplication and addition in the finite field \( \mathbb{F}_{2^n} \) to refresh the internal state because it provides a proven seeded extractor that accumulates entropy, which is more efficient than using a hash function.

- **Setup**: Outputs seed \( (X, X_0) \leftarrow \{0, 1\}^{2n} \).
- **Refresh**: \( S' = \text{refresh}(S, I; X) = S \cdot X + I \) over \( \mathbb{F}_{2^n} \).
- **Next**: \( (S', R) = \text{next}(S; X_0) = G(U) \), where \( U = [X_0 \cdot S]_{m_1} \), the truncation of \( X_0 \cdot S \).

Unfortunately, even a secure standard pseudo-random generator is not sufficient to resist information leakage.