should produce a record signed by TD C’s private key K −1
:
T DC
NE in TD C resolves to:
TD memberships
AD:endhost
AID1 : EID1 AID1 ∈ T D1,1 ⊆ T D1,2 ⊆ T LDC
AID1 : EID2 AID1 ∈ T D1,1 ⊆ T D1,2 ⊆ T LDC
AID2 : EID3 AID2 ∈ T LDC
Here, the lookup of NE under TD C returned three records:
two endpoints EID1, EID2 in the same AD (AID1) and an-
other in a second AD, AID2. The trust domain memberships
of each AD are indicated: for example, AID1 is contained in
T D1,1 which is a sub-domain of T D1,2 which is a subdomain
of the top level domain T LDC . AID2 is simply indicated as
a member of the top level domain T LDC .
B. k-Path Resolution Service
At this point the source possesses the AID:EID of the label
that was looked up, as well as possibly a hierarchy of nested
trust domains that contain this AID, but not a route to that
AD:EID. The source now issues a route lookup query to the
respective trust domains as appropriate (e.g., if the AID is
contained in TD1 which is contained in TD2, and the source
knows how to reach the Path Servers of TD1, it can contact
TD1 directly). In the following description we assume that
the source has no advance information and can only reach its
own top-level TD using one of the AD’s up-paths. The path
resolution query from the source ﬁrst goes to the top level
TD ingress point, which may then query one of the top-level
Path Servers to see if the down-paths have been uploaded.
If not, or if the top level trust domain prefers not to resolve
individual AD paths, it may also delegate the lookup based
on the TD containment information provided in the address
query. Eventually, a trust domain is found that contains the
destination AD and whose Path Servers have a fresh copy of
the k up-paths of the AID.
Path Server update.
Through SCION’s periodic path con-
struction beacons, every endpoint AD obtains a fresh set of
k paths in its TD. Whenever an AD selects a different set
of paths due to policy changes or path failures,
the AD
actively updates its new k-path information to the Path Server.
Consequently this enables in-bound trafﬁc control, another
way for the endpoints’ routing policies to be reﬂected. A
destination AD can attach distinct sets of k-paths depending
on the identity of the source endpoints that are performing the
query. For example, if a query is originating from outside the
local TD, the destination AD can instruct the Path Server to
only provide paths that pass through a set of speciﬁc high-
security gateway ADs; whereas if the query originates inside
the TD then a more general and efﬁcient set of paths can be
served.
Trust-scoped path resolution. A trust scoped path query
enforces that a given path computation should only involve
(and be restricted to paths using) ADs within a speciﬁc set of
trust domains. For example, if a query is scoped to within top
220
level domain C, any AD that is not either explicitly speciﬁed
by the querier, or in C, should not be able to directly affect the
communication or the results of the query. For top-level scoped
reachability queries, the implementation is straightforward.
The querier sets a ﬂag in its query indicating that this is a trust-
scoped query restricted to the top level trust domain C. Then,
when a Path Server is queried for paths, it simply withholds
any paths that are not scoped for C. If the Path Server needs
to follow a delegation path (e.g., querying the Path Server of a
sub-TD), the Path Server ensures that the delegation path never
exits C (in terms of forwarders or communication principals).
This effectively restricts the set of participants in the path
computation strictly to members of C. A label lookup can be
scoped to a top level domain in a similar way.
Subtleties arise if a narrower scoping is desired. For
example, suppose a source issues a path query (AID1 :
EID1)(AID1 ∈ T D1,1 ⊆ T D1,2 ⊆ T LDC ), with the trust
scoping constraint of T D1,2 (where T D1,2 ⊆ T LDC ). Since
T D1,2 may not be a top level TD, and may not participate
in the inter-TD top level routing layer, this implies that the
path query is expected to traverse T LDC but that the ADs in
T LDC (and, indeed the authority of T LDC itself) may not be
trusted. In such a situation, the source is required to designate
a particular explicitly source-selected route to reach T D1,2.
The ADs in this route are allowed to drop the packet if it
violates their routing policy but are expected to strictly follow
the semantics of the routing otherwise. It is the responsibility
of the source to discover a trusted route to reach the trusted TD
T D1,2; this can involve a separate path query (possibly, scoped
to a group which contains only the high-level members of the
top level domain T LDC ), or the route can be hand-conﬁgured
based on source preferences.
VII. ROUTE JOINING
Route construction (Section V) allows an endpoint AD to
determine its k up-paths to its core; route lookup (Section VI)
allows a source AD to discover the k down-paths from
the destination’s core to the destination AD. Route joining
combines these up and down paths to construct a working
end-to-end route. The joining algorithm runs at the source
endpoint AD, and is used to create an end-to-end “shortcut”
path, if possible, between endpoint ADs. It takes as input the
k up-paths of the source AD and the queried k down-paths
of the destination, where each path is speciﬁed as a set of
ingress/egress interfaces and peering interfaces at each transit
AD as Section V describes.
The use of the peering links is to enable the source and
destination to ﬁnd not only joining points at a common
ancestor AD, but also joining points at a common peering
link. For example, in Figure 4, without considering the peering
link between C and D, nodes F and G can only ﬁnd route
F, C, A, T C, B, D, G. When also comparing the peering nodes
at the up-paths, F and G are able to ﬁnd a shortcut path
F, C, D, G.
The source endpoint needs to ﬁnd a common ancestor
provider or a common peering link to splice together the up-
path of the source and the down-path of the destination AD. If
the source and destination ADs are in distinct trust domains,
then the route may need to traverse top-level TDs via the
inter-TLTD protocol. Finding the common joining point can be
accomplished via a number of methods. Since we anticipate
that the paths will be reasonably short and k is also quite
small (less than 10), a simple way is to hash the IDs of each
provider and peering link of the destination AD down-paths
into a hash table and look up the providers and peering links
of the source AD. This takes time and space proportional to
the total number of provider ADs and peering links named in
both source and destination. For shortcuts crossing TD1 and
TD2, the common join point is either an AD belonging to
both of the TDs or a peering link with one end in TD1 and
the other in TD2.
VIII. FORWARDING
Once a source AD constructs an end-to-end route, it gathers
the opaque ﬁelds for all transit ADs in the selected route, and
embedds these opaque ﬁelds in its data packets to allow the
transit ADs to verify the authenticity of the path and ﬁnd the
egress interface at each hop. The ingress and egress interfaces
in the opaque ﬁelds instruct each transit AD on how to route
the packets to the next hop, without requiring a forwarding
table lookup. Each AD derives a MAC veriﬁcation key from
the timestamp T S embedded in the data packet, which is then
used to check the MAC. If the MAC is correct we say that
the link is not expired. The way opaque ﬁelds are gathered
differs slightly depending on whether the path is a complete
up/down path or a shortcut path:
Here,
1) The end-to-end route is the combination of a com-
plete up-path and down-path.
the source AD
embeds all
the opaque ﬁelds constructed by the transit
ADs in both the up-path of the source AD and the down-
path of
the destination AD. For example in Figure 4,
AD E uses up-path pE = {E, C, A, T C} and down-
path pG = {T C, B, D, G} to reach AD G, and needs to
embed OpE (C), OpE (A), OpE (T C), OpG(T C), OpG(B), and
OpG (D) into its data packets.
2) The end-to-end route is a shortcut. Once a common
joining point X (either a common ancestor AD or a common
peering link) is found between an up-path pA of the source AD
A and a down-path pB of the destination B, the source only
embeds the opaque ﬁelds of (i) the transit ADs in the shortcut,
and (ii) the immediate previous-hop AD(s) of the joining point
X. The opaque ﬁelds for (ii) are needed because according to
Equation 2, the MAC in the opaque ﬁeld Op(i) also includes
the opaque ﬁeld Op(i − 1) from the immediate previous hop,
thus requring Op(i − 1) for MAC veriﬁcation. To illustrate,
consider ADs E and F in Figure 4 communicating through
a shortcut {E, C, F }. The source AD E embeds OpE (C),
OpE (A), OpF (C), and OpF (A) into its data packets, where pE
is E’s up-path and pF is F ’s down-path. Note that OpE (A)
and OpF (A) may not be equal, because they may originate
from path construction beacons with different timestamps T S.
As another example in Figure 4, E and G communicate via
the shortcut {E, C, D, G}. Then the source AD E embeds
221
OpE (C), OpE (A), OpG(D), OpG(B), and the opaque ﬁeld for
the peering link OC,D(C) into its data packets.
Finally, the packet contains a pointer that advances at each
AD to indicate which opaque ﬁeld to use at that AD, and a
pointer to indicate if the current AD is in the up-path or down-
path to prevent routing loops and to make correct distinction
between ingress and egress interfaces in the opaque ﬁelds.
When the packet has reached the destination, the destination
can reverse the paths to construct a symmetric return path, thus
facilitating two-way communication. During the lifetime of the
connection, the source endpoint can monitor path quality and
switch to any of the other k2 combinations of alternative path
choices to improve latency, throughput, or drop rates.
IX. SECURITY ANALYSIS
Rather than designing our architecture with speciﬁc coun-
termeasures against known attacks, we have designed it using
sound principles of isolation, control and explicit trust such
that security follows as an inherent property rather than as an
add-on by separate sub-protocols. This section ﬁrst presents
SCION’s intrinsic security against known attacks, and then
discusses SCION’s general attack resilience.
A. Defending against Known Attacks
We show that SCION can naturally eliminate or limit a wide
range of severe control- and data-plane attacks.
Preﬁx (AID/EID) hijacking. SCION provides in-depth de-
fense against preﬁx (AID/EID) hijacking. First, each endpoint
AD or endhost uses AIP [17] as the self-certifying address.
Second, the identities/addresses of the endpoint ADs or end-
hosts are scoped and isolated in different TDs and are signed
by the corresponding TD Core. Hence, even if a malicious
endpoint M in TD 1 claims the same AID or EID as an
endpoint in TD 2, the claimed AID or EID is still scoped
to TD 1 and will not collide with that in TD 2. Moreover,
since M does not have the private key corresponding to the
public key from which the identiﬁer of AID is derived, M
cannot sign any valid statements for the AD.
Routing path falsiﬁcation. During path construction in
SCION, each transit AD commits itself into the path con-
struction beacon and signs both the locally announced link and
the preceding path information in an onion fashion. Hence, a
malicious AD cannot drop particular ADs in the preceding
path to make the path shorter and more appealing, but can
only drop the entire preceding path which would cause the
endhosts to select other paths without the malicious router.
Due to the use of onion signatures, a malicious router cannot
extract and splice segments from different paths, nor can it
modify the previous hops in the path.
Wormhole attacks. Two colluding ADs can announce a
bogus link between each other, to create shorter paths for
attracting trafﬁc. SCION limits such attacks in two ways. First,
if scoped path resolution (Section VI-B) is used for getting
high-assurance paths (where the end-to-end paths must be
constructed within the same TD), only two malicious ADs
within the same TD can create a wormhole link between
each other (since paths/links are restricted to particular TDs),
and can only affect
the trafﬁc of their customers in that
TD. Second, even if cross-domain paths are allowed (e.g., a
shortcut with a cross-domain peering link), the endpoint ADs
still know exactly who is on the communication path due to
the signatures and certiﬁcates included in the down- and up-
paths, thus retaining explicit trust.
Data-plane attacks. Malicious routers can drop or falsify
packets at the data plane, including both control messages such
as routing updates and data packets. SCION mitigates such
data-plane attacks in several ways. First, SCION provides an
endpoint AD with multiple path choices; thus an endpoint AD
can efﬁciently avoid a path with detected poor performance.
Second, each transit AD digitally signs itself into the path con-
struction beacons and hence the endpoint AD knows exactly
who is on the forwarding path (and is accountable for potential
misbehavior), thus providing accountability for the ADs’ for-
warding behavior. Third, a malicious router M dropping path
construction beacons can only render the path/link containing
M unavailable to the endpoints (while the endpoints can select
other paths excluding the malicious router), thus gaining itself
no advantage.
Reﬂection DoS attacks.
In a reﬂection attack, an attacker
spoofs the return address of a primary target B to a secondary
target A, so that A sends unwanted packets to target B.
In systems that permit verifying address ownership, such
as AIP, it is possible to add-on a protocol to authenticate
return addresses (e.g., by ensuring that the packet is signed
with the public key of the owner of the return address).
This approach, however, adds complexity and overhead. For
example, in return-address signing, the endpoint (or router)
must verify a signature on every incoming data packet. SCION
provides more inherent protection against reﬂection attacks,
without needing cryptographic veriﬁcation, because the way
that packets are addressed is integrated with the path that it
traverses. Consider a malicious AD M attempting to inject an
attack packet to A with a spoofed return path to a legitimate
target AD B. Since return paths are symmetric, M itself
must be on the return path from A to B, so M has gained
no advantage from the attack because it might as well have
directly ﬂooded the primary target B.
B. General Attack Resilience
the primary weakness of current
Isolation: enabling attack localization. As discussed in
Section II,
inter-domain
routing protocols is that the system is vulnerable to routing
plane attacks by any adversary that is, or could make itself be,
on any path between the source and the destination. In contrast,
SCION provides strict isolation properties to localize attacks,
failures, and misconﬁguration. Since routing computation is
isolated by trust domains, a malicious AD can only attack
routes that have at least one endpoint inside its own trust
domain. In addition, the victims of these routing attacks tend
to be downstream endpoint ADs, who are the ﬁnal approvers
of the route computation in SCION (each endpoint must
explicitly select k down-paths, sign the selection and upload
222
it to a route server). Because the target is actively involved in
ﬁnal route approval, attacking the route computation cannot be
done stealthily: the target of the attack always has a chance
to examine the forged route and always has to approve it
explicitly. Compare this, for example, with the case of path
computation in BGP, where a destination has no control over,
and is often unaware of what routes to itself are eventually
adopted by the rest of the Internet.
Control and explicit trust: providing resilience and ﬂex-
ibility.
In SCION, an AD is able to determine or control
the route that it uses to another AD, and is thus able to
facilitate a well-quantiﬁed level of trustworthiness or reliability
for its network service provision. Speciﬁcally, both endpoint
ADs in end-to-end communication can select a set of k well-
deﬁned paths to the TD Core. This choice is made explicitly,
with knowledge of the exact identities supplying the path and
the full authentication information of each path is provided.
A source AD gets both these sets to choose from, yielding
potentially up to k2 end to end AD-level paths. A destination
AD can in fact select different sets of k paths to serve to
different source endpoints; for example, the destination AD
can approve a separate set of high-assurance paths for trusted
entities; this can be provided even if the TD route servers are
untrusted by encrypting the route record using a group key.
Furthermore, these route sets are all separated by trust domain,
with each domain maintaining a different set of k paths. An
AD that is in more than one TD can thus not only switch paths
but also change the routing context to a different TD.
Scalability: route freshness. Current inter-domain routing
protocols are based on path-vector instead of link-state rout-
ing, partially because in link-state routing each node must
periodically generate routing updates which are propagated
throughout the entire network. However, in path vector, routing
updates are generated “on-demand” only when route changes
happen to achieve scalability. Attempting to secure these
incremental updates is problematic. An attacker could re-
order or re-inject route update messages causing invalid and
inconsistent routes to propagate in the network. Path-vector
based route announcements cannot have short timeouts, since
a path-vector update requires a destination AD to push its
announcement to the entire network, and the protocol is not
scalable if every AD is performing this broadcast at a high
rate like link-state routing, since this would cause O(n2)
communication overhead per update where n is the number