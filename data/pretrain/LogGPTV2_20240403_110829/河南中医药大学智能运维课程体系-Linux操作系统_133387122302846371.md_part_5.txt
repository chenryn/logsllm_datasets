### 基本网络配置
- **IP/Mask**：配置IP地址和子网掩码。
- **Gateway/Route**：设置默认网关和路由。
- **DNS**：配置域名服务器。

#### 网络配置工具
- **ifconfig**：用于临时配置网络信息。
- **配置文件**：使用`vi`编辑器修改网络配置文件。
- **nmcli**：推荐使用，CentOS中通过NetworkManager进行管理。
- **nmtui**：推荐使用，在图形界面下进行网络配置。

---

## 第69页
### 4. 远程管理
#### 4.1 远程管理概述
远程管理是指通过网络由一台计算机（主控端）远距离控制另一台计算机（被控端）的技术。

- **定义**：远程管理不仅限于物理上的远距离，而是指通过网络对远端计算机进行控制。
- **功能**：操作者在主控端可以启动被控端的应用程序、访问文件数据，甚至利用被控端的外部打印设备和通信设备进行打印和互联网访问。
- **重要性**：对于个人计算机来说，远程管理不是必需的，而对于放置在数据中心中的服务器，远程管理至关重要。主要的管理方式是通过远程方式进行。

---

## 第70页
### 4. 远程管理
#### 4.1 远程管理概述
Linux常用的远程管理协议包括Telnet、SSH和VNC。

- **Telnet**：
  - 数据在网络上以明文传输，存在安全隐患。
- **SSH**：
  - 全称Secure Shell，通过加密通信数据提高安全性。
  - 是目前UNIX/Linux系统中最常用的远程管理方式。
- **VNC**：
  - 可以在本地计算机上以图形方式显示远程服务器的图形界面。
  - 登录时可使用专门的客户端软件或浏览器。

---

## 第71页
### 4. 远程管理
#### 4.2 CentOS实现SSH远程管理
通过SSH协议进行远程管理采用C/S结构，需要：

- **受控端**：安装支持SSH协议的服务器端软件（如OpenSSH）。
- **主控端**：安装支持SSH协议的客户端软件。

- **OpenSSH**：
  - 广泛使用的支持SSH协议的服务器端软件。
  - 支持SSH协议的1.3、1.5和2版本。
  - 提供ssh、scp和sftp等命令进行远程操作。
  - 服务端组件包括sshd、sftp-server和ssh-agent。
  - 官方网站：[http://www.openssh.com](http://www.openssh.com)

---

## 第72页
### OpenSSH Users
以下操作系统和产品已将OpenSSH集成到基础系统中：

- OpenBSD
- FreeBSD
- BSDiBSD/OS
- NetBSD
- Mac OS X Version 10.1及更高版本
- HP-UX (称为HP-UX Secure Shell)
- 所有Linux系统，如Red Hat
- Microsoft Windows

更多详细信息请参阅官方文档。

---

## 第73页
### 4. 远程管理
#### 4.2 CentOS实现SSH远程管理
在CentOS上实现SSH远程管理的步骤如下：

1. **安装OpenSSH**：在CentOS上安装OpenSSH软件。
2. **配置自启动**：确保OpenSSH随操作系统自启动。
3. **修改配置文件**：编辑`/etc/ssh/sshd_config`文件。
4. **配置防火墙**：允许SSH协议的访问。
5. **使用客户端软件**：使用支持SSH协议的客户端软件进行远程管理。

- **支持的客户端软件**：
  - **Windows平台**：Putty、Termius、XShell、Bitvise SSH、MobaXterm等。
  - **Mac平台**：OpenSSH Client、Shuttle、Secure Shell、Termius等。
  - **Android平台**：JuiceSSH、ConnectBot等。
  - **iOS平台**：Prompt、Termius、iSSH等。

---

## 第74页
### 4. 远程管理
#### 4.2 CentOS实现SSH远程管理
CentOS在最小化安装时已默认安装并启用sshd服务，并且防火墙已允许sshd服务。

- **查看sshd运行状态**：
  ```bash
  # 查看sshd运行状态
  [root@Project-01-Task-02~]# systemctl status sshd
  ```

- **输出示例**：
  ```plaintext
  ● sshd.service - OpenSSH server daemon
     Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)
     Active: active (running) since Wed 2020-02-12 22:51:21 CST; 3min 44s ago
  Docs: man:sshd(8)
        man:sshd_config(5)
  Main PID: 874 (sshd)
  Tasks: 1 (limit: 5036)
  Memory: 7.0M
  CGroup: /system.slice/sshd.service
  ```

- **日志示例**：
  ```plaintext
  Feb 12 22:51:20 Project-01-Task-02.localdomain systemd[1]: Starting OpenSSH server daemon..
  Feb 12 22:51:21 Project-01-Task-02.localdomain sshd[874]: Server listening on 0.0.0.0 port 22.
  ```

---

## 第75页
### 表3-5 OpenSSH常用字段解释
| 字段名称             | 含义                                                         |
|----------------------|--------------------------------------------------------------|
| Port                 | 设置SSH的端口号                                             |
| Protocol             | 启用SSH版本的协议                                           |
| ListenAddress        | 设置服务监听的地址                                           |
| DenyUsers            | 拒绝访问的用户                                               |
| AllowUsers           | 允许访问的用户                                               |
| PermitRootLogin      | 设置是否禁止root用户登录                                     |
| PermitEmptyPasswords | 设置用户登录是否需要密码认证                                 |
| PasswordAuthentication | 是否启用口令认证方式                                         |
| AcceptEnv            | 指定客户端发送的哪些环境变量将会被传递到会话环境中           |
| AddressFamily        | 指定sshd(8)应当使用哪种地址族                               |
| AllowGroups          | 允许登录的组名列表                                           |
| AllowTcpForwarding   | 是否允许TCP转发                                             |
| AuthorizedKeysFile   | 存放该用户可以用来登录的RSA/DSA公钥                         |
| Banner               | 在用户认证前显示的内容                                       |
| ChallengeResponseAuthentication | 是否允许质疑-应答认证                                       |
| Ciphers              | 指定SSH-2允许使用的加密算法                                 |
| ClientAliveCountMax  | sshd(8)在未收到任何客户端回应前最多允许发送多少个"alive"消息 |
| ClientAliveInterval  | 如果超过这么长时间没有收到客户端的数据，sshd(8)将发送"alive"消息 |
| Compression          | 是否对通信数据进行压缩                                       |
| ForceCommand         | 强制执行这里指定的命令                                       |
| GatewayPorts         | 是否允许远程主机连接本地的转发端口                           |
| LoginGraceTime       | 限制用户必须在指定时限内认证成功                             |
| MaxStartups          | 最大允许保持多少个未认证的连接                               |
| MaxAuthTries         | 每个连接最大允许的认证次数                                   |
| UseDNS               | 是否应该对远程主机名进行反向解析                             |

---

## 第76页
### 通过SSH方式管理远程CentOS
- **安装OpenSSH**：在CentOS上安装OpenSSH。
- **启动sshd服务**：启动sshd服务并查看其运行状态。
- **设置自启动**：确保sshd服务随系统自启动。
- **配置sshd服务**：编辑`/etc/ssh/sshd_config`文件。
- **多终端的SSH客户端应用**：适用于Windows、Android等多个平台。

---

## 第77页
### 5. 网络管理
对Linux操作系统网络管理的认识与理解。

---

## 第78页
### Linux内核架构
- **System Call Interface (SCI)**：系统调用接口。
- **Process Management (PM)**：进程管理。
- **Virtual File System (VFS)**：虚拟文件系统。
- **Memory Management (MM)**：内存管理。
- **Network Stack**：网络子系统。
- **Device Drivers (DD)**：设备驱动程序。
- **CPU Architecture (Arch)**：CPU架构相关代码。

---

## 第79页
### 网络子系统
- **Programmatic Network Interface**：编程网络接口。
- **O/S Services**：操作系统服务。
- **Non-Kernel Layer**：非内核层。
- **Network Interface**：网络接口。
- **Virtual File System**：虚拟文件系统。
- **Kernel Sub-System Call Interface**：内核子系统调用接口。
- **Protocol Independent Interface**：协议无关接口。
- **Process Scheduler (PM)**：进程调度器。
- **Memory Manager (MM)**：内存管理器。
- **Network Protocols**：网络协议。
- **Network Device Drivers**：网络设备驱动程序。
- **Device Independent Interface**：统一设备模型。
- **Arch, CPU架构相关代码**：CPU架构相关代码。
- **DD, 设备驱动程序**：设备驱动程序。

---

## 第80页
### 网络子系统
- **Network Device Drivers**：网络设备驱动程序。
- **Device Independent Interface**：统一设备模型。
- **Network Protocols**：实现网络传输协议。
- **Network Stack**：网络子系统。
- **Protocol Independent Interface**：协议无关接口。
- **systemd-networkd**：网络配置工具。
- **NetworkManager**：网络管理工具。
- **网络测试工具**：用于网络测试的工具。
- **网络监控工具**：用于网络监控的工具。

---

## 第81页
### systemd-networkd
- **项目介绍**：
  - systemd是freedesktop的一个项目。
  - 官网：[https://www.freedesktop.org/wiki/Software/systemd](https://www.freedesktop.org/wiki/Software/systemd)。
  - 项目源码发布在GitHub：[https://github.com/systemd/systemd](https://github.com/systemd/systemd)。
  
- **功能**：
  - systemd-networkd是systemd默认提供的网络管理服务。
  - 它可以完全管理以太网，但不能管理无线网卡、PPP等。
  - 能够检测并配置网络连接，也能够创建虚拟网络设备。

---

## 第82页
### systemd-networkd
- **配置**：
  - **systemd.netdev**：创建虚拟网络设备。
  - **systemd.network**：配置所有匹配的网络连接的地址与路由。
  - 当systemd-networkd服务退出时，通常不做任何操作，以保持现有的网络设备和配置不变。
  - 从initramfs切换到实际根文件系统以及重启该网络服务都不会导致网络连接中断。
  - 更新网络配置文件并重启systemd-networkd服务后，已被删除的虚拟网络设备仍将存在于系统中，可能需要手动删除。
  - 配置文件存放位置依据优先级不同而不同：
    - 优先级最低的存放在`/usr/lib/systemd/network`目录。
    - 优先级居中的存放在`/run/systemd/network`目录。
    - 优先级最高的存放在`/etc/systemd/network`目录。

---

希望这些优化后的文本能更好地帮助你理解和使用这些内容。如果还有其他需要改进的地方，请告诉我！