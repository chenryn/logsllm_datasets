title:Detouring: Translating software to circumvent hard faults in simple
cores
author:Albert Meixner and
Daniel J. Sorin
Appears in the 38th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Anchorage, Alaska, June, 2008
Detouring: Translating Software to Circumvent Hard Faults in Simple Cores
Albert Meixner
Daniel J. Sorin
Dept. of Computer Science
Dept. of Electrical and Computer Engineering
Duke University
PI:EMAIL
Abstract
CMOS technology trends are leading to an increas-
ing incidence of hard (permanent) faults in processors. 
These faults may be introduced at fabrication or occur 
in the ﬁeld. Whereas high-performance processor cores 
have  enough  redundancy  to  tolerate  many  of  these 
faults, the simple, low-power cores that are attractive 
for  multicore  chips  do  not.  We  propose  Detouring,  a 
software-based  scheme  for  tolerating  hard  faults  in 
simple cores. The key idea is to automatically modify 
software such that its functionality is unchanged but it 
does  not  use  any  of  the  faulty  hardware.  Our  initial 
implementation  of  Detouring  tolerates  hard  faults  in 
several  hardware  components,  including  the  instruc-
tion cache, registers, functional units, and the operand 
bypass network. Detouring has no hardware cost and 
no performance overhead for fault-free cores. 
1.  Introduction
As CMOS fabrication technology continues to scale 
to  ever-smaller  dimensions,  processor  cores  are 
increasingly  susceptible  to  hard  (permanent)  faults 
[20]. These hard faults may be introduced during fabri-
cation or they may occur in the ﬁeld. Rather than dis-
carding cores with hard faults, it would be preferable to 
tolerate their defects, with perhaps a slight degradation 
in performance. 
Tolerating a hard fault requires some mechanism for 
circumventing  the  faulty  circuitry.  In  a  high-perfor-
mance, superscalar, speculative core, there exists a sig-
niﬁcant  amount  of  redundancy  that  can  be  used  for 
fault tolerance [2, 3, 19, 18]. For example, if an ALU is 
determined to have a permanent fault, the core can sim-
ply stop using that ALU. The core continues to operate 
correctly,  using  its  remaining  ALUs,  but  its  perfor-
mance is somewhat degraded. 
Unlike  superscalar  cores,  simple  cores  have  little 
hardware  redundancy  for  tolerating  hard  faults.  This 
lack  of  fault  tolerance  is  emerging  as  a  problem, 
because simple, in-order cores with shallow pipelines 
Duke University
PI:EMAIL
are  a  popular  option  for  multicore  chips—such  as 
Sun’s  Niagara  [9],  Cisco’s  Silicon  Packet  Processor 
[5], and the SPEs in the Cell Processor [8]. The area-
efﬁciency and power-efﬁciency of simple cores enable
multicore  chips  to  stay  within  their  area,  power,  and 
thermal budgets. Adding spare hardware for fault toler-
ance  would  undermine  the  advantages  of  these  cores 
and is not an attractive option for commodity systems.
In  this  paper,  we  propose  Detouring,  a  software-
based scheme for improving the aggregate chip perfor-
mance (which we will refer to as “throughput”) of mul-
ticore processors (also known as chip multiprocessors 
or CMPs) with simple cores in the presence of perma-
nent faults. The key idea is to modify the executed code 
when a hard fault is present, such that it does not use 
any of the faulty hardware yet has the same functional-
ity as the original code. We illustrate a high-level view 
of  Detouring  in  Figure
1.  This  code  modiﬁcation  can 
be performed in various contexts—via static compila-
tion, dynamic compilation, binary translation [11], or a 
virtual  machine—with  differing  tradeoffs.  In  our 
implementation of Detouring, we have developed soft-
ware  modiﬁcations,  called  Detours,  to  tolerate  hard 
faults in several hardware components, including regis-
ters,  functional  units,  the  instruction  cache,  and  the 
operand bypass network. 
Detouring  is  a  software-only  solution  that  has  no 
performance cost for fault-free cores and no hardware 
cost. Our results show that our current set of Detours 
can tolerate 42.5% of all possible hard stuck-at faults in 
the  core  itself  and  nearly  all  faults  in  the  instruction 
cache. The performance of a core using a Detour varies 
as a function of the workload and the particular Detour, 
as we show in Section
6. When applied to a chip multi-
List of hard faults
Original code
Detouring
Software
Translation
Code that does not
use faulty circuitry
Figure 1.
High-Level View of Detouring
1
processor (CMP), Detouring can signiﬁcantly increase 
the chip’s throughput in the presence of hard faults.
The  rest  of  the  paper  is  organized  as  follows.  In 
2,  we  compare  Detouring  to  prior  work.  In 
Section
3, we describe our system model and state our 
Section
4,  we  present  Detouring, 
assumptions.  In  Section
tolerate  speciﬁc  faults.  In 
including  Detours 
Section
5, we discuss the modiﬁcations that we made 
to the compiler. We experimentally evaluate Detouring 
in Section
6, and we conclude in Section
to 
7. 
2.  Related Work
The areas of work most related to Detouring are soft-
ware-based fault tolerance, hardware-based fault toler-
ance, 
for 
unimplemented 
instructions, and microcode patches.
software 
handlers 
2.1.  Software-Based Fault Tolerance
Prior work has used instruction replication to detect 
[15]  and  correct  transient  errors  [17].  Instruction 
redundancy can detect errors due to some hard faults, 
but it is not well-suited to tolerating hard faults. To tol-
erate  a  hard  fault,  no  more  than  one  of  the  copies  of 
each instruction must use the faulty circuitry, which is 
only  possible  on  cores  with  redundant  hardware 
resources.  Detouring  speciﬁcally  targets  permanent, 
(rather than transient) errors, provides no error detec-
tion capability, and works on cores without redundant 
hardware.  As  a  consequence  of  the  different  focus, 
Detouring has much lower impact on runtime, because 
it  changes  only  those  portions  of  the  code  that  are 
affected  by  erroneous  circuitry.  Detouring  does  not 
modify code running on fault-free cores.
Software schemes have also been proposed to detect 
permanent  hardware  faults  (e.g.,  [7,  16,  22]).  These 
schemes are complimentary to Detouring, which does 
not provide error detection or diagnosis, but relies on 
the  presence  of  some  error  detection  mechanism  to 
obtain information about faulty hardware.
2.2.  Hardware-Based Fault Tolerance
High-performance  superscalar  cores  have  multiple 
instances  of  many  of  their  resources  (e.g.,  ALUs, 
fetch/decode  lanes).  This  redundancy  is  used  to 
increase  performance,  but  it  can  also  be  leveraged  to 
tolerate  hard  faults  [2,  3,  19, 18].  Bower  et  al.  [2,  3] 
develop  schemes  for  diagnosing  hard  faults  in  micro-
processor  components  and  then  deconﬁguring  these 
faulty components. Shivakumar et al. [19] and Schuch-
man and Vijaykumar [18] improve chip yield by using 
hardware redundancy to tolerate fabrication defects.
2
A  hardware  approach  to  providing  hard  fault  toler-
ance for storage, but not logic, is to use error correcting 
codes (ECC). Architects can add ECC to registers and 
other  storage  elements,  but  ECC  is  costly.  ECC  adds 
multiple bits to each storage element, plus hardware to 
compute and check the ECC (which may be on the crit-
ical path).
Unlike  hardware-based  fault  tolerance,  Detouring 
uses software to provide hard fault tolerance. Detour-
ing  uses  software  because  it  focuses  on  cores  that  do 
not have signiﬁcant amounts of hardware redundancy
and cannot afford spares due to cost or power. 
2.3.  Software Handlers
There is a long history of using software to emulate 
instructions that are not implemented in hardware. Cer-
tain instructions may be complicated to implement in 
hardware (e.g., ﬂoating point square root) or they may 
be used so rarely that a relatively slow software emula-
tion is sufﬁcient (e.g., legacy instructions). When these 
instructions  are  encountered,  the  processor  traps  to  a
software routine or to a microcode implementation.
Detouring  differs  from  this  work  in  a  few  aspects. 
First, Detouring has a different goal. Instead of emulat-
ing non-existent hardware, Detouring tolerates faults in 
existing  hardware.  Second,  Detouring  is  not  strictly 
instruction-based. For example, Detouring can tolerate 
a fault in a register that could be used by many instruc-
tions.  Third,  Detouring  seeks  to  provide  functionality 
for  common  operations,  not  just  rare  instructions. 
Fourth, unlike traditional software emulation, Detour-
ing  does  not  necessarily  use  simple  units  to  emulate 
more complex ones. Detouring may use complex units 
to emulate simple ones, and it may use partially broken 
units to emulate fault-free ones.
2.4.  Microcode Patches
Software,  generally  in  the  form  of  microcode,  has 
been used to overcome design bugs that are uncovered 
too late in the product cycle to be ﬁxed in hardware [6]. 
Detouring  differs  in  that  it  tolerates  hard  faults  that 
occur dynamically due to physical phenomena. Detour-
ing also does not require that the core has microcode.
3.  System Model
To  simplify  the  system  issues  associated  with 
Detouring, we assume a speciﬁc target system model in 
which a control processor is coupled with a number of 
simple  in-order  cores.  The  control  processor  runs  the 
operating system and has full control over the assign-
ment  of  tasks  to  the  simple  cores.  The  cores  execute 
small to mid-size kernels and refer system calls to the 
control processor. In the context of Detouring, the con-
trol processor is in charge of recompiling programs for 
individual  cores  and  scheduling  tasks  such  that  faults 
have  minimal  impact.  Note  that  the  control  processor 
can  be  logical  (i.e.,  physically  identical  to  the  simple 
cores but used differently) or physical. A physical con-
trol processor can sit on the same die as the other cores, 
such as the PPE on the IBM Cell [8]. The control pro-
cessor can also be external, such as a commodity out-
of-order  processor  (control  processor)  coupled  with  a 
graphics  [14]  or  physics  [23]  accelerator  board  that 
contains a number of simpler processors.
This system model suits a number of applications— 
including networking, multimedia, and certain types of 
scientiﬁc computing—in which task throughput is the 
goal and multiple simple tasks can be spread across the 
cores. For example, a network router chip can use cores 
for encryption, packet routing and analysis, error cor-
rection,  etc.  Detouring  improves  throughput  by  using 
faulty cores that would otherwise be disabled.
We  next  describe 
the  processor  core  model 
(Section
3.1) and system requirements (Section
3.2).
3.1.  Processor Core Model
Detouring’s ability to tolerate hardware faults is fun-
damentally  limited  to  faults  in  circuitry  under  direct 
software  control.  In  complex  out-of-order  cores,  soft-
ware  has  little  control  over  the  circuitry  and  thus 
Detouring’s  fault  coverage  is  minimal.  The  optimal 
cores  for  Detouring  are  VLIW  processors,  which  are 
designed  to  give  the  compiler  tight  control  over  pro-
gram  execution.  Traditional  single-issue, 
in-order 
RISC  cores,  which  are  the  focus  of  this  work,  are 
between these two extremes, but closer to VLIW.
Our Detouring implementation is built on top of the 
open-source  OpenRISC  1200  (OR1200)  microarchi-
tecture  [10].  The  OR1200  is  a  32-bit  scalar  (1-wide), 
in-order  RISC  core  with  a  4-stage  pipeline  (Fetch, 
Decode,  Execute,  Writeback)  and  32  general  purpose 
registers.  It  has  an  instruction  cache  and  data  cache, 
which we assume in this paper to both be 16KB and 2-
way  set-associative.  The  data  cache  is  write-back, 
write-allocate,  and  it  blocks  on  misses.  The  OR1200 
core has an integer ALU, a non-pipelined integer mul-
tiplier/divider,  and  a  load/store  unit,  but  no  ﬂoating 
point hardware. There is a single branch delay slot and 
no branch penalty, so no branch prediction is needed. 
3.2.  System Requirements
Detouring  assumes  that  the  system  is  capable  of 
detecting and diagnosing hard faults, as well as recom-
piling software.
Error Detection and Diagnosis. Detouring  requires  a 
system to have the ability to detect errors and diagnose 
hard  faults  (i.e.,  determine  where  the  faults  are).  The 
implementation of error detection and fault diagnosis is 
a topic that is orthogonal to Detouring, and we assume 
the use of existing techniques. Low-cost options, such 
as software testing and diagnosis [7, 16, 22] and built-
in  self-test  (BIST)  are  a  natural  ﬁt,  but  more  heavy-
weight solutions could also be applied. Unlike Detour-
ing  itself,  an  error  detection  mechanism  will  impact 
fault-free  performance  such  that  fast  mechanisms  are 
preferable. The speed of fault diagnosis is less critical, 
because the appearance of a new permanent fault is an 
infrequent  event  and  the  recompilation  necessary  to 
adapt to the discovered fault is in itself a time-consum-
ing process. Thus, software-based diagnosis is a good 
option for Detouring.
Recompilation. The  list  of  hard  faults  obtained  from 
diagnosis is used as an input to the Detouring software 
translation.  Detouring  could  be  implemented  in  the 
static compiler, a dynamic compiler, or a binary trans-
lator. Detouring could also be implemented as a virtual 
machine that acts as an interface between the software 
written  for  the  architectural  (fault-free)  ISA  and  the 
potentially faulty hardware. In this paper, the Detour-
ing  is  performed  by  re-compiling  the  source  code.  A 
perhaps more elegant model would have software dis-
tributed  in  an  intermediate  format  (e.g.,  LLVA  [1]), 
such that the core later compiles it to an executable. In 
this software distribution and usage model, Detouring 
would just require re-compiling from the intermediate 
format (either statically or dynamically).
4.  Detouring
In this section, we ﬁrst describe the speciﬁc Detours 
that  we  have  developed  or  adapted  from  previously 
known  emulation  routines  (Section
4.5). 
We  then  explain  how  a  Detour  for  a  given  piece  of 
hardware  can  coincidentally  tolerate  faults  in  other 
4.6),  describe  how  to  com-
parts  of  the  chip  (Section
pose multiple Detours (Section
4.7), and discuss faults 
for which we do not yet have Detours (Section
4.1-Section
4.8). 
4.1.  Functional Unit Detours
There are many different functional units in even a 
simple core. The OR1200 core does not have ﬂoating 
point hardware, so we do not consider it. However, it is 
well-known  how  to  emulate  ﬂoating  point  arithmetic 
with software that uses only integer arithmetic. 
For  any  functional  unit,  it  is  possible  that  a  fault 
either effectively disables the entire unit or just a small 
3
fraction of it. In the latter case, we try to leverage the 
remaining hardware that is not faulty.
4.1.1.  Multiplier
The multiplier is a large circuit with many possible 
locations for faults. Being able to Detour around multi-
plier faults is thus beneﬁcial. The multiplier in our core 
takes two 32-bit operands as inputs and returns a 64-bit 
product. A multiplier is a highly regular structure and,
even if portions of it are faulty, it can often be used as a 
narrower multiplier to speed up emulation. For exam-
ple, if a fault affects only the 37th bit of the product, 
then we can salvage a fault-free 16x16 multiplier. We 
only resort to the typical slow shift-and-add emulation 
if a fault affects too many result bits.
In our experiments we found that over 90% of single 
permanent faults affect only either the upper or lower 
32-bits of the results, such that we still have a fault-free 
16x16 multiplier available. We also support 16x8 and 
8x16  cases  that  require  24  correct  output  bits.  We 
explored  a  few  other  similar  Detours,  including  one 
that used fault-free 8*8 multiplication, but the advan-
tage over shift-and-add emulation was minimal.
4.1.2.  Divider
The divider is another large functional unit, but we 
have  not  discovered  any  clever  Detours  for  tolerating 
faults within it. Currently, we use a standard shift-and-
subtract algorithm for our division Detour. This Detour 
provides correct operation, but its performance is prob-
ably  only  acceptable  for  software  that  does  not  fre-
quently perform divisions. 
4.1.3.  Shifter
The  OR1200  provides  both  left  and  right  shift 
instructions.  The  three  operands  are  the  data  to  be 
shifted (X), direction to shift, and shift amount (shamt).
Left Shift. Left  shifting  X  by  shamt  is  equivalent  to 
multiplying  X  by  a  scale  factor  of  2shamt.  Thus,  our 
Detour must be able to determine 2shamt. For constant 
shifts, it is easy to compute this scale factor at compile 
time. For variable shifts, we must determine 2shamt at 
runtime. If the fault does not affect right shifting, then 
we  use  this  hardware  to  compute  the  scale  factor  as 
0x80000000 >> (31-shamt). Otherwise, we look it up 
in a table.
Right Shift. We  ﬁrst  compute  a  scale  factor  of 
1<<(32-shamt),  either  by  using  left  shifting  (if  this 
capability is fault-free) or by looking it up in a table. 
We  multiply  the  scale  factor  and  X  to  produce  the 
desired  result  in  the  upper  32  bits  of  the  multiplier’s 
result. We illustrate an example in Figure
2. 
X = 0... 01101101
shamt = 2, scale factor = 232-shamt = 230
result of multiplying X*230
0........................011011
010.............................0
high 32-bits of product
Figure 2.
Right Shift Detour Example
low 32-bits of product
4.1.4.  Adder/Subtractor
Addition and subtraction are performed with mostly 
the same logic. Unfortunately, our attempts to develop 
an efﬁcient Detour to tolerate hard faults in this shared 
circuitry  have  thus  far  been  unsuccessful.  We  have 
devised correct Detours, but they involve far too many 
instructions  to  achieve  reasonable  performance,  espe-
cially because this functional unit is used so frequently. 
For the small subset of faults that affect either addi-
tion or subtraction, but not both, we can provide efﬁ-
cient Detours. The key to the Detour for faulty addition 
(subtraction) is to negate the appropriate operand and 
then perform a subtraction (addition). 
4.1.5.  Bitwise Logical Operators
The  OR1200  ISA  has  the  following  bitwise  opera-
tors:  AND,  OR,  XOR,  and  NOT  (implemented  using 
XOR).  A  fault  in  any  one  of  these  operations  can  be 
tolerated by expressing it in terms of the other opera-
tions. The necessary expressions are derived by apply-
ing simple Boolean logic and DeMorgan’s Laws.
4.1.6.  Partial-Word Loads/Stores
A fault could cause partial-word loads or stores to be 
incorrect, even though whole-word accesses are unaf-
fected by the fault. Example of such faults are faults in 
the alignment and extension hardware. Our Detours are 
similar  to  the  software  used  to  support  partial-word 
accesses  in  architectures,  like  the  Alpha  21064  [13], 
that do not support them in hardware. The key differ-
ence  is  motivation:  the  21064  wanted  to  avoid  hard-
ware  that  could  slow  the  critical  path,  whereas 
Detouring’s goal is to tolerate faults.
Partial-Word Load. Our  Detour  ﬁrst  computes  the 
word-aligned address and loads the full word. We shift 
the  word  to  the  desired  byte  or  half-word  and  then 
sign/zero extend it. 
Partial-Word Store. As  with  the  partial-word  load 
Detour,  this  Detour  ﬁrst  computes  the  word-aligned 
address and loads the full word. We compute the mask 
of the bits that will be overwritten and clear those bits 
with  an  AND.  We  then  take  the  desired  byte  or  half-
word to be written, shift it to the desired position, and 
OR  it  with  the  loaded  word,  thereby  overwriting  the 
4
Before
jal FOO
nop # delay slot
After
movhi rX, hi(FOO_RETURN#K)
ori rX, rX, lo(FOO_RETURN#K)
j FOO
nop # delay slot
FOO_RETURN#K:
Figure 3.
We use another register (rX) instead of r9. K is 
a unique number for each call site.
Detour for Link Register (r9).  
bits  that  had  been  cleared  with  the  AND.  Lastly,  we 
store this word to memory. 
4.1.7.  Zero/Sign Extension Unit
The OR1200 has a functional unit for extending par-
tial words, and it can perform either zero-extension or 
sign-extension. Zero-extension can be emulated using 
simple bitwise AND with a constant. The sign-exten-
sion Detour uses a left-shift (to move the desired sign 
bit to the beginning of the word) followed by an arith-
metic right-shift (to propagate the sign bit).
4.2.  Register File Detours
Detouring avoids faulty entries in the register ﬁle by 
excluding  the  affected  registers  from  register  alloca-
tion. In general, this Detour is straightforward, but cer-
tain 
registers  have  special  purposes  or  usage 
conventions. For example, register zero is often hard-
wired to be all-zero. In the OR1200 architecture, regis-
ter nine (r9) is hardwired to be the link register for the 
jump-and-link  (jal)  instruction.  We  address  this  issue 
with the link register Detour shown in Figure
3.
Other registers are, by ABI (application binary inter-
face)  convention,  expected  to  be  the  stack  pointer, 
frame pointer, call return address, etc. If one of these 