案；其次描述思考该问题的概念模型；然后描述预测一个表单中有
用的输入框（以及输入框组合）以及预测适合于这些输入框所需的
合适值的策略；最后总结并评论我们在方案部署方面的经验。
提供DeepWeb访问的其他可选方案
访问deep-web内容有两种通用的方法。第一种方法是为特定领域
（如汽车、书或者房地产）创建中间协调器（mdiator)，这种方法被
垂直搜索引擎广泛采用。在这种方法中，我们先创建一个主(mster)
表单（即作为中间协调器），然后在每个表单和该中间协调器之间
创建语义映射。对于每个中间协调器上的查询，基于一些预计算的
表单摘要信息选择相关的底层表单；通过语义映射在每个表单上构
建查询；接着从每个选择的表单中返回内容，然后组合这些内容呈
现给用户。从高层上看，该方法和现代提供购物对比的门户网站的
1473
---
## Page 1475
实现思想很相似，这些门户网站通过使用Web服务，返回很多底层
站点的供应信息。
由于垂直搜索专注于一个领域内的同类表单的收集，因此这种方法
可以适合于垂直搜索，但它不适合于通用的搜索引擎。首先，构建
和维护很多不同的中间协调器和映射的人工代价很高。其次，识别
对搜索引擎关键字查询最相关的表单是非常具有挑战性的。只有小
部分的表单需要识别，否则，底层表单接收到的用户流量可能超过
了它们的处理能力。为了实现相关表单的识别，极端情况下，表单
的摘要信息可能需要和底层内容几乎一样大。最后，即更基础的原
因是，Web上的数据可以是方方面面，无法给领域的边界做出清晰
的定义。因而，为Web创建一个中间协调器将是一项宏伟的挑战，
而且该中间协调器需要支持100多种语言。因此，当目标是覆盖很
多领域上的大量表单时，这种方法是不可行的。
第二种方法是探寻，为任何感兴趣的HTML表单预先计算最相关的
表单提交。每个表单提交生成一个唯一的URL，该URL可以像任何
其他的HTML页面一样被搜索引擎索引。这种方法能够充分利用现
有的搜索引擎基础设施。此外，它可以将deep-web页面无缝地融合
到Web搜索中，也就是说，这些deep-web页面可以被直接插入到结
果页的排序列表中来响应搜索查询请求。此外，如果用户基于页面
摘要(sippet)认为搜索结果是相关的，当点击该搜索结果时，就可以
给deep-web内容带来用户流量。
实现探寻方法-主要面临两个挑战。第一，HTML表单通常含有多
个输入框，因此，对所有输入框的所有可能值的整个笛卡几积进行
枚举的简单策略，会导致生成海量的URL。Web爬虫需要抓取每个
生成的URL，抓取太多的URL会耗尽Web爬虫的资源，而且很可能
会对这些HTML表单的宿主Web服务器带来无法承受的负荷。此
外，当笛卡几积非常大时，很可能会有大量的结果页面是空的，因
而从索引角度考虑，这些结果页是无用的。例如，在Cars.com上的
某个查询表单有5个输入框，这些输入框的笛卡儿积生成的URL超过
2.4亿个，而实际上该网站只有65辆车待售(htp：//www.cars.com)。
毫不奇怪，对于这些URL，大量的表单提交将无法得到任何记录，
因此对于搜索引擎是无用的。
第二，HTML表单通常包含文本输入框，而且可能需要输入合适的
值才能够返回检索结果。文本输入框可以有两种类型：一是接受任
意输入值的通用输入框，如关键字搜索框，二是只接受某个特定集
1474
---
## Page 1476
合中的值键入的输入框，图9-1所示的是商店定位的邮政编码输入
框。
本章的剩余部分所描述的解决方案采用如下策略来解决这些挑战。
首先，我们设计了称之为"信息度测试"iformativenesstest)的测评方
式，用来评估查询模板，即表单输入框的组合。对于任何模板，我
们通过不同集合的值来探测表单中的模板里的输入框，并且检查我
们得到的HTML页面之间是否有显著不同。生成的结果页面显著不
同的模板被认为是作为探寻的好的候选模板。其次，为了识别适合
于探寻的查询模板，我们设计了一个算法，它可以高效地遍历查询
模板的空间。该算法权衡了生成更少的URL和达到网站内容的高覆
盖率。最后，我们设计了算法来预测文本输入框的合适的输入值。
该算法扩展了之前为通用文本输入选择关键字的算法(Brbosa
2004，Ntoulas2005），采用富信息量测试方式来表示从通用的数据
类型中识别键入的输入项的值，比如邮政编码、价格和日期。
HTML表单处理的基础
这里我们只是简要地概述了表单处理。更多的信息可以通过HTML
表单规范来获取
(htp: /www.w3.org/TR/html401/interact/forms.html)。
HTML表单是由form标签定义的（如例9-1）。参数action表示当表单
提交时，需要执行查询处理的服务器。表单可以有若干个输入控
件，每个控件通过input标签定义。输入控件可以有很多类型，其中
最重要的是文本框(txtbox)、下拉选择框(slect menu，通过分离的
select标签定义）、复选框（ceckbox)、单选按钮（rdiobutton)和提交按
直接在HTML页面上看到的名字。用户可以选择以下方式选择输入
值：在文本框中输入任意的关键字，或在下拉选择框、复选框和单
选按钮中选择预定义的选项。此外，存在隐藏输入框(hddeninput)，
它的值是固定的且对于和表单交互的用户是不可见的。隐藏输入框
通常用于为表单提交提供一些额外的上下文信息（如该表单的来源
站点）。在这一章中，我们集中研究表单中的选择按钮和文本输入
框。复选框、单选框的处理方式和下拉选择框相同。
例9-1：包含让用户搜索工作的表单的HTML代码
1475
---
## Page 1477
Keywords: 
State: 
..
Sort By: 
...
当提交一个表单时，浏览器会通过get或者post方法，发送包含输入
值的HTTP请求到服务器。如果采用get方法，参数会附加到action参
数值后，在HTTP请求中，作为URL的一部分（如例9-1的
http://jobs.com/fnd?src=hp& kw=chef& st=Any& sort=salary& s=go)。
如果采用post方法，参数会在HTTP请求体（bdy)中发送，URL仅仅包
含action（如例9-1的http：/jobs.com/find)。因此，使用get方法从表
单中得到的URL是唯一的（依赖于提交的参数值），但采用post方
法得到的URL不是唯一的。
因为搜索引擎是基于Web页面的URL来识别它们，从post得到的结果
页面无法区分URL，因此不能直接插入到搜索引擎的索引中。此
外，按照HTML规范，当表单提交导致状态变化或者产生副作用
（sdeeffect）（如购物车、旅行预定和登录），必须使用post表单。正
如之前描述的，这样的站点通常本质上没有信息。由于这些原因，
我们把注意力限制在get表单，这种表单可以生成更适合于Web搜索
的内容。
任何需要输入个人信息的表单都必须去除，举个例子，通过过滤任
何包含密码输入框以及任何如用户名、登录等通常都和个人信息相
关的单词。同样，只是简单地记录用户反馈或者评论的表单也可以
通过以下方式去除：忽略那些包含有文本区域输入框的表单。
1476
---
## Page 1478
最后一点，我们提出的方案无法处理Javascript事件（正如本章所描
述的）。表单和输入控件可以包含onselect、onclick和onsubmit属
性，这些属性可以包含任意的Javascript代码。处理这些事件意味着
要模拟Javascript在所有可能事件下的执行。原则上，我们可以利用
Javascript引擎如SpiderMonkey和V8（见本章的“参考文献”），通过
利用Web浏览器为我们执行表单提交，从而扩展我们的算法来处理
这些表单。但是这种模拟的处理代价很高，因而其挑战在于能够快
速地识别那些很可能会生成deep-web内容的Javascript表单，而且可
以把这些deep-web内容添加到搜索引擎索引中，也就是说，最后的
那个Web页面有一个诸如get请求一样的“幂等URL"(iempotentURL)。
查询和查询模板
我们可以把表单理解为允许用户向后台数据库提交查询的接口。每
个表单提交都是一个查询，这个查询的输入是表单的输入框中提供
的值，返回的是数据库的记录子集。该查询属于由表单输入项和其
值约束的限制性语言(rstrictedlanguage)。此外，表单站点的内容在
查询之前是未知的。因此，为探寻选择表单提交的问题实质上是在
内容未知的数据库中的限制性语言中选择一组查询。
选择正确的一组查询的挑战在于表单输入项的模糊性质。尤其是，
输入项可以有两种类型。第一，选择输入项是在数据库记录上增加
选择条件，如例9-1中的kw（在求职描述中的关键字(kyword)）和
st（状态(sate)）。选择输入项的值可以从一个预定义的列表（通过
选择菜单）中获取，或者在文本输入项中输入。文本输入项可能只
接受特定类型的值，但其类型我们通常是无法知道的。选择输入项
通常可以分配一个可以匹配数据库中所有记录的通配符值。对于选
择菜单，该通配符必须是该菜单的一个选项，如输入状态有Any这
个选项值；对于文本输入项，其通配符是空字符事。
第二，存在表示层输入项，它们不影响记录的选择，而只是控制表
示方面，比如结果页面的排序或HTML页面布局，如例9-1中的排
序。对选择输入项和表示层输入项进行区分是探寻算法需要解决的
一个挑战。
形式上，假设我们需要使用SQL来提交查询。我们可以把表单站点
的内容建模为只包含一个单表D的数据库，该表包含m个属性。每
个表单提交可以看做一个如下查询：select*fromDwhereP，其中P
表示通过选择输入项来表示的选择谓词。
1477
---
## Page 1479
例如，假设例9-1的表单是用于在job表Jobs(position、city、state、
desc)上提交查询，提交请求返回在美国加州的厨师岗位的检索，其
对应的查询应该是：select*fromJobswhere state=CA'anddesc
like"%chef%。注意一点，我们这里假定在例9-1的其他输入项是表
示层输入项。
探寻的问题本质上是选择一组较优的查询（表单提交）。但是，对
每个表单提交的属性进行推测是不现实甚至不可行的。因为一个表
单可能对应几百方种不同方式的表单提交，分别测试每个表单提交
可能会耗尽底层站点的资源。为了推测表单提交的集合，我们定义
了查询模板。查询模板指定表单中输入项的一个子集作为绑定输入
项(bndinginput)，其余的是自由输入项(feeinput)。通过给绑定输入
项赋以不同的值，可以生成多个表单提交。以SQL查询为例，查询
模板可以简洁地表示表单中的所有查询：select*fromDwhereP，其
中P只包含表单中绑定输入项的选择谓词。绑定输入项的个数即模
板的维度。表9-1显示了例9-1表单查询模板的三个实例。
表9-1：查询模板例子，每个模板都有不同的绑定输入项以及相应的表单提交的URL集合和底层
Jobs数据库上的SQL查询
绑定输入项
表单提交URL和SQL查询
st
URL: hp:/ljobs.com/find?src=hp&kw=&st=S&sort=salary&s=go
查询: select * from Jobs where state = S
4
URL: hp://jobs.com/find?src=hp&kw=K&st=Any&sort=salary&s=go
查询： select *from Jobs where desc 1ike‘%K%
st, kw
URL: hrp://jobs.com/find?src=hp&kw=K&st=S&sort=salary&s=go
查询： select *from Jobs where state -S and desc 1ike‘%K%
注意，在实践中，为了生成有效的表单提交，必须给模板中的自由
输入项分配值。理想情况下，我们希望不要为模板的SQL查询增加
任何额外的选择条件。对于文本输入，我们可以分配空字符事；对
于选择菜单，我们可以分配菜单的默认值，期望该值可以用通配符