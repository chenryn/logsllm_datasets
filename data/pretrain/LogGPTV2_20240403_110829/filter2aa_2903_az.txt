入）
20
～
31
保留
32
～
255
用户
定义
中断
中
断
可屏蔽中断
来自INTR的外部
中断或INT n指令
3.3.2 错误代码
CPU在产生某些异常时，会向栈中压入一个32位的错误代码。其格
式如图3-3所示。
图3-3 异常的错误代码
其各个位域的含义如下。
EXT（External Event）（位0）：如果为1，则表示外部事件导致该
异常。
IDT（Descriptor Location）（位1）：描述符位置。如果为1，表示
错误码的段选择子索引部分指向的是IDT表中的门描述符；如果为
0，表示索引部分指向的是LDT或GDT中的描述符。
TI（GDT/LDT）（位2）：仅当IDT位为0时有效。如果该位为1，
表示索引部分指向的LDT中的段或门描述符；如果为0，表示索引
部分指向的GDT中的描述符。
段选择子索引域表示与该错误有关的描述符在IDT、LDT或GDT表
中的索引。
缺页异常的错误码采用的格式与此不同。
3.3.3 示例
下面通过一个小程序来进一步理解错误类异常，如清单3-1所示。
该示例使用了Windows操作系统的结构化异常机制，对其很陌生的读者
可以先读一下本书的第11章（见11.4节）。
清单3-1 演示错误类异常的Fault小程序
1    // 通过除零异常理解错误类异常的处理过程
2    // Raymond Zhang 2005 Dec.
3    #include 
4    #include 
5    
6    #define VAR_WATCH() printf("nDividend=%d, nDivisor=%d, nResult=%d.\n"
, \
7           nDividend,nDivisor,nResult)
8    
9    int main(int argc, char* argv[])
10   {
11     int nDividend=22,nDivisor=0,nResult=100;
12    
13     __try
14     {
15        printf("Before div in __try block:");
16        VAR_WATCH();
17    
18        nResult=nDividend / nDivisor;
19    
20        printf("After div in __try block: ");
21        VAR_WATCH();
22     }
23     __except(printf("In __except block: "),VAR_WATCH(),
24        GetExceptionCode()==EXCEPTION_INT_DIVIDE_BY_ZERO?
25        (nDivisor=1,
26          printf("Divide Zero exception detected: "), VAR_WATCH(),
27          EXCEPTION_CONTINUE_EXECUTION):
28        EXCEPTION_CONTINUE_SEARCH)
29     {
30        printf("In handler block.\n");
31     }
32     return getchar();
33   }
在以上小程序中，我们故意设计了一个除零操作，即第18行，该行
对应的汇编指令如下：
18:           nResult=nDividend / nDivisor;
00401087 8B 45 E4            mov         eax,dword ptr [ebp-1Ch]
0040108A 99                  cdq
0040108B F7 7D E0            idiv        eax,dword ptr [ebp-20h]
0040108E 89 45 DC            mov         dword ptr [ebp-24h],eax
IA-32手册中对IDIV指令内部操作的定义开始几行是：
IF SRC = 0
  THEN #DE; (* Divide error *)
FI;
……
也就是当CPU在执行IDIV指令时，首先会检查源操作数（除数）是
否等于零，如果等于零，那么就产生除零异常。#DE是除零异常的简短
记号（见表3-2）。
对于这个示例，当CPU执行到0040108B地址处的IDIV指令时，因
为源操作数的值是零，所以CPU会检测到此情况，并报告除零异常。接
下来CPU会把EFLAGS寄存器、CS寄存器和EIP寄存器的内容压入栈保
存起来，然后转去执行除零异常对应的异常处理程序（如何找到处理程
序的细节将在3.5节中讨论）。异常处理程序在执行完一系列检查和预
处理后（见11.2节和11.3节），会调用__except块的过滤表达式，并期望
得到以下3个值之一。
EXCEPTION_CONTINUE_SEARCH（0）：本保护块不处理该异
常，请继续寻找其他的异常保护块。
EXCEPTION_CONTINUE_EXECUTION（1）：异常情况被消除，
请回去继续执行。
EXCEPTION_EXECUTE_HANDLER（1）：请执行本块中的处理
代码。
过滤表达式可以包含函数调用或其他表达式，只要其最终结果是以
上3个值中的一个。这个示例利用逗号运算符，在其中包含了一系列操
作：第23行打印出位置信息和当时的各变量值；第24行到第28行通过条
件运算符来判断发生的是何种异常，如果不是除零异常（异常代码不等
于EXCEPTION_INT_DIVIDE_BY_ZERO），那么就返回
EXCEPTION_CONTINUE_SEARCH，让异常处理程序继续搜索其他保
护块，如果是除零异常，就执行第25、26和27行。第25行将除数改为
1（纠正错误情况），第26行打印出当前信息，然后第27行返回
EXCEPTION_CONTINUE_EXECUTION，让CPU回到导致该异常的指
令位置继续执行。
执行这个小程序，得到的结果如下：
Before div in __try block:nDiviedend=22, nDivisor=0, nResult=100.
In __except block: nDiviedend=22, nDivisor=0, nResult=100.
Divide Zero exception detected: nDiviedend=22, nDivisor=1, nResult=100.
After div in __try block: nDiviedend=22, nDivisor=1, nResult=22.
容易看出，以上实际执行结果和我们的分析是一致的，异常情况被
纠正后，程序又继续正常运行了。
3.4 中断/异常的优先级
CPU在同一时间只可以执行一个程序，如果多个中断请求或异常情
况同时发生，CPU应该以什么样的顺序来处理呢？是按照优先级高低依
次处理，先处理优先级最高的。截至本书写作之时，IA-32架构定义了
10个中断/异常优先级别，具体情况见表3-3。
表3-3 中断/异常的优先级别
优先级
描  述
1（最
高）
硬件重启动和机器检查异常（Machine Check Exception）
2
任务切换陷阱（见4.3节）
3
外部硬件（例如芯片组）通过CPU引脚发给CPU的特别干预
（interventions）。
● #FLUSH：强制CPU刷新高速缓存
● #STPCLK（Stop Clock）：使CPU进入低功耗的Stop-Grant状态
● #SMI（System Management Interrupt）：切换到系统管理模式（SMM）
● #INIT：热重启动（soft reset）
4
上一指令导致的陷阱：
● 执行INT 3（断点指令）导致的断点
● 调试陷阱，包括单步执行异常（EFlags[TF]=1）和利用调试寄存器设置
的数据或输入输出断点（见4.2节）
5
不可屏蔽（外部硬件）中断（NMI）
6
可屏蔽的（外部硬件）中断
7
代码断点错误异常，即从内存取指令时检测到与调试寄存器中的断点地址相
匹配，也就是利用调试寄存器设置的代码断点
8
取下一条指令时检测到的错误：
● 违反代码段长度限制
● 代码内存页错误（即代码属性的内存页导致页错误）
9
解码下一指令时检测到的错误：
● 指令长度大于15字节（包括前缀）
● 非法操作码
● 协处理器不可用
10（最
低）
执行指令时检测到的错误：
● 溢出，当EFlags[OF]=1时执行INTO指令
● 执行BOUND指令时检测到边界错误
● 无效的TSS（任务状态段）
● 段不存在
● 栈异常
● 一般保护异常
● 数据页错误
● 对齐检查异常
● x87 FPU异常
● SIMD浮点异常
IA-32架构保证表3-3中各优先级别的定义对于所有IA-32处理器都是
一致的，但是同一级别中的各种情况的优先级可能与CPU型号有关。
3.5 中断/异常处理
尽管中断和异常从产生的根源来看有着本质的区别，但是系统
（CPU和操作系统）是用统一的方式来响应和管理它们的。本节先简要
介绍实模式下的中断和异常处理，然后详细介绍保护模式的情况，最后
再扩展到64位（IA-32e模式）。
3.5.1 实模式
在x86处理器的实地址模式下，中断和异常处理的核心数据结构是
一张名为中断向量表（Interrupt Vector Table，IVT）的线性表。它的位
置固定在物理地址0～1023，1KB大小。
每个IVT表项的长度是4个字节，共有256个表项，与x86 CPU的256
个中断向量一一对应。再进一步，每个IVT表项的4个字节分为两个部
分：高两个字节为中断例程的段地址；低两个字节为中断例程的偏移地
址。因为是在实模式下，所以段地址左移4位再加上偏移地址便可以得
到20位的中断例程物理地址。
当中断或者异常发生时，CPU会按照以下步骤来响应中断和异常。
① 将代码段寄存器CS和指令指针寄存器（EIP）的低16位压入堆
栈。
② 将标志寄存器EFLAGS的低16位压入堆栈。
③ 清除标志寄存器的IF标志，以禁止其他中断。
④ 清除标志寄存器的TF（Trap Flag）、RF（Resume Flag）和
AC（Alignment Check）标志。
⑤ 使用向量号n作为索引，在IVT中找到对应的表项（n*4+IVT表基
地址）。
将表项中的段地址和偏移地址分别装入CS和EIP寄存器中，并开始
执行对应的代码。
中断例程总是以IRET指令结束。IRET指令会从堆栈中弹出前面保
存的CS、IP和标志寄存器的值，于是便返回到了被中断的程序。