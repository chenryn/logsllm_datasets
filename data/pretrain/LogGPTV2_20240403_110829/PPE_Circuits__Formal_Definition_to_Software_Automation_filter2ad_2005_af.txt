Boneh-Franklin01 ([28])
Gentry-Silverberg02 ([38])
Boneh-Boyen04a ([26]) (ℓ = 160)
Waters05 ([52]) (|H(id)| = 16)
Naccache05 ([50]) (B(H(id)) = 8)
Our Tool
AutoPPE
Output
output
Testable
Testable
Type I
Testable
Testable
Type I
Testable
Testable
Type I
Testable
Testable
Type I
Testable
Testable
Type III
Testable
Testable
Type I
Unknown Not testable Unknown
Type I
Testable
Type I
Unknown
Testable
Type I Anon-IBE Unknown
Signature
Testable
Testable
Type I
Signature
Type I
Testable
Testable
Type I
Testable
Testable
Signature
Testable
Testable
Type III Signature
CL04 Scheme C ([32]) (B(msg) = 8) Type I
Testable
Testable
Signature
Testable
Testable
Type I
Signature
Type II Signature
Testable
Testable
Testable
Unknown
Type I
Testable
Unknown
Type I
Testable
Testable
Type I
Type III
Testable
Testable
Testable
Testable
Type I
Testable
Testable
Type III
Testable
Testable
Type I
CP-ABE
Type III CP-ABE
Testable
Testable
Custom
Type I
Testable
Testable
Custom Unknown Not Testable Unknown
Type I
Custom Unknown Not Testable Unknown
Type I
Type I
Custom Unknown
Testable
Testable
Custom Unknown
Type I
Dodis ([34]) (|C(x)| = 2)
Dodis ([34]) (|C(x)| = 4)
Lys02 ([47]) (|C(x)| = 5)
Lys02 ([47]) (|C(x)| = 5)
Jager15 ([46]) (|H(x)| = 4)
Jager15 ([46]) (|H(x)| = 4)
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Testable
Custom Testcase 1 (Figure 12)
Custom Testcase 2 (Figure 14)
Boyen-Waters ([31])
AGOT14 ([3])
RW13 ([51]) (a = 60)
RW13 ([51]) (a = 8)
100-DDH
100-DBDH
DLIN
Testable
Testable
Table 1: The output of AutoCircuitPPE on various PPE circuit testability problems. Here, ℓ represents the number of delegation
levels in a HIBE scheme, |id| denotes the length of the identity, |H(id)| denotes the length of the hash of identity id, B(H(id))
denotes the number of blocks in the hash of identity id, B(msg) denotes the number of blocks in message msg, |C(x)| denotes
the length of encoding of input x, |H(x)| denotes the length of encoding of input x, and a denotes the number of attributes.
whether d is a small prime (d ∈ {1, 3, 5, 7, 11}), as none of the
real world schemes have polynomials with a high degree on their
variables.
Table 1 summarizes 29 test results. For IBE schemes, we ran
our tool to output a PPE circuit which tests for well-formedness
of a secret key of an identity given the master public key and the
identity. For Verifiable Random Function (VRF) schemes, we aimed
to construct a PPE circuit that tests for the validity of VRF output
and proof of pseudorandomness given the verification key and
VRF input. For signature schemes, we ran the tool to output a PPE
circuit which acts as a verification procedure that checks the well-
formedness of a signature given message and verification key. We
encoded each of the schemes into a PPE problem instance similar
to [45] (See [45] Section 5.2 for more details). As in [45], we encode
the VRF bit string input of [34, 46, 47] schemes as a vector of Zp
variables. We observe that the size of the polynomials in these
schemes grows exponentially in size with respect to the length of
the encoding of the input. Consequently, we tested these schemes
only with a short length encoding.
We demonstrate the flexibility of our tool by testing it on prob-
lem instances in Type I, II and III pairing settings. Many of PPE
problem instances in Table 1 are in the Type I setting (we first
encoded in whatever setting the scheme’s authors chose). We also
translated several of these schemes into the Type III setting for
testing. AutoCircuitPPE outputs a PPE testing circuit for all the prob-
lem instances on which AutoPPE outputs a PPE testing set17. More
importantly, our tool outputs PPE testing circuits for the Bellare-Kiltz-
Peikert-Waters IBE [24], Dodis VRF [34], Boyen-Waters IBE [30] and
some custom test cases on which AutoPPE was not able to produce a
valid PPE testing set.
17For all instances on which AutoPPE outputs a PPE testing set, our tool also
outputs the same PPE circuit. This is because we retain Rules 1 and 2 used by AutoPPE
and prioritize these rules over Rules 3 and 4 in our QSearch algorithm.
Session 2B: Applied Cryptography CCS '20, November 9–13, 2020, Virtual Event, USA401We tested our tool on a few custom examples, some of them
having more than 100 polynomials. The 100-DDH and 100-DBDH
examples have already be tested in [45]. In the (new) DLIN test case,
the trusted set contains polynomials {a, b, c, ax, by} in group G1,
and the untrusted set contains the polynomial c(x + y) in group G1.
The 100-DBDH and DLIN examples are not PPE Testable under the
Decisional Bilinear Diffie-Hellman (DBDH) assumption and DLIN
assumptions respectively. We additionally designed two custom
test cases meant to utilize all of our tool’s rules. The results are
in Table 1 and the details are in Appendix H.
Recall that AutoCircuitPPE optimizes the output of the QSearch
algorithm (Section 4.3). Table 1 shows the number of PPE gates
and Boolean gates output post-optimization. On the Bellare et. al.
IBE scheme for 4-bit identities, Dodis VRF for 4-bit inputs and the
Boyen-Waters IBE scheme, the PPE circuit output by QSearch has 98,
180 and 491 boolean gates, respectively, whereas post-optimization
the corresponding PPE circuits have only 31, 49 and 124 boolean
gates.
5.4 Open Problems
This work solves a major open problem posed by [45] by defining
PPE circuits and developing a method for automatically generating
them. We remark on two limitations of our tool, which are exciting
directions for future research.
First, we do not handle rational polynomials; that is, our tool
1/x , which rules
cannot accept inputs with elements of the form д
out many interesting schemes such as the Gentry IBE [37], the
Boneh-Boyen signatures [26] and the Dodis-Yampolskiy VRF [35].
A well-formedness test for such schemes should check if the de-
nominators of the untrusted rational polynomials evaluate to 0, and
output INVALID accordingly. While this was also an open problem
from [45], we believe the general logic capabilities realized in this
work create a foundation that could perform this check and then
branch accordingly. Working this out, however, appears non-trivial.
Second, we’d like a more efficient method for encoding schemes
n
for automated analysis. In the Dodis VRF scheme [34], the VRF func-
the exponent polynomials asn
tion on input bit string x and private key {a1, a2, · · · an} outputs
i s.t. xi =1 ai . In order to input the scheme to our tool, we encode
д
i =1(ai xi + 1 − xi). Notice that this
polynomial has an exponential number of monomials incurring
a huge computational cost for finding PPEs in our rules. This is
notably the case in other VRF schemes [46, 47] as well. As a result,
we could test the schemes only on small input lengths.
6 CONCLUSION
Computer automation holds great promise for improving the speed,
accuracy and capabilities of cryptographic implementations. This
work presents an automation algorithm and software tool for de-
signing (pairing-based) cryptographic verification algorithms that
can support arbitrary logic. The tool found verification algorithms
for schemes that could not be handled by prior tools and for which
we were unable to find solutions by hand. It executes quickly (usu-
ally 100 seconds or less) even for schemes with 100 or more elements
in their description. There are many exciting future directions for
automated cryptographic design and this tool will help in the auto-
mated design of algorithms requiring arbitrary logic.
ACKNOWLEDGMENTS
Susan Hohenberger was supported by NSF CNS-1414023, NSF
CNS-1908181, the Office of Naval Research N00014-19-1-2294, and
a Packard Foundation Subaward via UT Austin. Satyanarayana
Vusirikala was supported by a UT Austin Provost Fellowship, NSF
grants CNS-1908611 and CNS-1414082, DARPA SafeWare and the
Packard Foundation. Brent Waters was supported by NSF CNS-
1414082, CNS-1908611, Simons Investigator Award and Packard
Foundation Fellowship.
REFERENCES
[1] Masayuki Abe, Melissa Chase, Bernardo David, Markulf Kohlweiss, Ryo Nishi-
maki, and Miyako Ohkubo. 2012. Constant-Size Structure-Preserving Signatures:
Generic Constructions and Simple Assumptions. Cryptology ePrint Archive,
Report 2012/285. https://eprint.iacr.org/2012/285.
[2] Masayuki Abe, Jens Groth, Miyako Ohkubo, and Takeya Tango. 2014. Converting
Cryptographic Schemes from Symmetric to Asymmetric Bilinear Groups. In
Advances in Cryptology - CRYPTO. Springer, 241–260.
[3] Masayuki Abe, Jens Groth, Miyako Ohkubo, and Mehdi Tibouchi. 2014. Structure-
Preserving Signatures from Type II Pairings. In Advances in Cryptology - CRYPTO
2014. 390–407.
[4] Masayuki Abe, Fumitaka Hoshino, and Miyako Ohkubo. 2016. Design in Type-
I, Run in Type-III: Fast and Scalable Bilinear-Type Conversion Using Integer
Programming. In Advances in Cryptology - CRYPTO. Springer, 387–415.
[5] Joseph A. Akinyele, Gilles Barthe, Benjamin Grégoire, Benedikt Schmidt, and
Pierre-Yves Strub. 2014. Certified Synthesis of Efficient Batch Verifiers. In IEEE
27th Computer Security Foundations Symposium. IEEE Computer Society, 153–165.
[6] Joseph A. Akinyele, Christina Garman, and Susan Hohenberger. 2015. Automating
Fast and Secure Translations from Type-I to Type-III Pairing Schemes. In ACM
SIGSAC Conference on Computer and Communications Security. ACM, 1370–1381.
[7] Joseph A. Akinyele, Matthew Green, and Susan Hohenberger. 2013. Using SMT
solvers to automate design tasks for encryption and signature schemes. In ACM
SIGSAC Conference on Computer and Communications Security. ACM, 399–410.
[8] Joseph A. Akinyele, Matthew Green, Susan Hohenberger, and Matthew W. Pagano.
2012. Machine-generated algorithms, proofs and software for the batch veri-
fication of digital signature schemes. In the ACM Conference on Computer and
Communications Security. ACM, 474–487.
[9] Joseph A. Akinyele, Matthew Green, Susan Hohenberger, and Matthew W. Pagano.
2014. Machine-generated algorithms, proofs and software for the batch verifi-
cation of digital signature schemes. Journal of Computer Security 22, 6 (2014),
867–912.
[10] José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, Matthew Campagna, Ernie
Cohen, Benjamin Grégoire, Vitor Pereira, Bernardo Portela, Pierre-Yves Strub,
and Serdar Tasiran. 2019. A Machine-Checked Proof of Security for AWS Key