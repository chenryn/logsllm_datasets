title:Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript
Libraries on the Web
author:Tobias Lauinger and
Abdelberi Chaabane and
Sajjad Arshad and
William Robertson and
Christo Wilson and
Engin Kirda
Thou Shalt Not Depend on Me: Analysing the Use
of Outdated JavaScript Libraries on the Web
Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad, William Robertson, Christo Wilson and Engin Kirda
Northeastern University
{toby, 3abdou, arshad, wkr, cbw, ek}@ccs.neu.edu
Abstract—Web developers routinely rely on third-party Java-
Script libraries such as jQuery to enhance the functionality of
their sites. However, if not properly maintained, such dependen-
cies can create attack vectors allowing a site to be compromised.
In this paper, we conduct the ﬁrst comprehensive study of
client-side JavaScript library usage and the resulting security
implications across the Web. Using data from over 133 k websites,
we show that 37 % of them include at least one library with a
known vulnerability; the time lag behind the newest release of
a library is measured in the order of years. In order to better
understand why websites use so many vulnerable or outdated
libraries, we track causal inclusion relationships and quantify
different scenarios. We observe sites including libraries in ad hoc
and often transitive ways, which can lead to different versions of
the same library being loaded into the same document at the same
time. Furthermore, we ﬁnd that libraries included transitively, or
via ad and tracking code, are more likely to be vulnerable. This
demonstrates that not only website administrators, but also the
dynamic architecture and developers of third-party services are
to blame for the Web’s poor state of library management.
The results of our work underline the need for more thorough
approaches to dependency management, code maintenance and
third-party code inclusion on the Web.
I.
INTRODUCTION
The Web is arguably the most popular contemporary
programming platform. Although websites are relatively easy to
create, they are often composed of heterogeneous components
such as database backends, content generation engines, multiple
scripting languages and client-side code, and they need to deal
with unsanitised inputs encoded in several different formats.
Hence, it is no surprise that it is challenging to secure websites
because of the large attack surface they expose.
One speciﬁc, signiﬁcant attack surface are vulnerabilities
related to client-side JavaScript, such as cross-site scripting
(XSS) and advanced phishing. Crucially, modern websites often
include popular third-party JavaScript libraries, and thus are at
risk of inheriting vulnerabilities contained in these libraries. For
example, a 2013 XSS vulnerability in the jQuery [13] library
before version 1.6.3 allowed remote attackers to inject arbitrary
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes  is  granted  provided  that  copies  bear  this  notice  and  the  full  citation 
on  the  ﬁrst  page.  Reproduction  for  commercial  purposes  is  strictly  prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23414
scripts or HTML into vulnerable websites via a crafted tag. As
a result, it is of the utmost importance for websites to manage
library dependencies and, in particular, to update vulnerable
libraries in a timely fashion.
To date, security research has addressed a wide range of
client-side security issues in websites, including validation [30]
and XSS ([17], [36]), cross-site request forgery [4], and session
ﬁxation [34]. However, the use of vulnerable JavaScript libraries
by websites has not received nearly as much attention. In
2014, a series of blog posts presented cursory measurements
highlighting that major websites included known vulnerable
libraries ([25], [26], [24]). These ﬁndings echo warnings from
other software ecosystems like Android [3], Java [32] and
Windows [21], which show that vulnerable libraries continue
to exist in the wild even when they are widely known to
contain severe vulnerabilities. Given that JavaScript dependency
management is relatively primitive and corresponding tools
are not as well-established as in more mature ecosystems,
these ﬁndings suggest that security issues caused by outdated
JavaScript libraries on the Web may be widespread.
In this paper, we conduct the ﬁrst comprehensive study on
the security implications of JavaScript library usage in websites.
We seek to answer the following questions:
• Where do websites load JavaScript libraries from (i.e.,
ﬁrst or third-party domains), and how frequently are
these domains used?
• How current are the libraries that websites are using,
•
and do they contain known vulnerabilities?
Are web developers intentionally including JavaScript
libraries, or are these dependencies caused by adver-
tising and tracking code?
Are existing remediation strategies effective or widely
used?
•
• Are there additional
technical, methodological, or
organisational changes that can improve the security
of websites with respect to JavaScript library usage?
Note that the focus of this paper is not measuring the security
state of speciﬁc JavaScript libraries. Rather, our goal (and
primary contribution) is to empirically examine whether website
operators keep their libraries current and react to publicly
disclosed vulnerabilities.
Answering these questions necessitated solving three funda-
mental methodological challenges. First, there is no centralised
repository of metadata pertaining to JavaScript libraries and
their versions, release dates, and known vulnerabilities. To
address this, we manually constructed a catalogue containing
all “release” versions of 72 of the most popular open-source
libraries, including detailed vulnerability information on a
subset of 11 libraries. Second, web developers often modify
JavaScript libraries by reformatting, restructuring or appending
code, which makes it difﬁcult to detect library usage in the
wild. We solve this problem through a combination of static
and dynamic analysis techniques. Third, to understand why
speciﬁc libraries are loaded by a given site, we need to track all
of the causal relationships between page elements (e.g., script
s1 in frame f1 injects script s2 into frame f2). To solve this,
we developed a customised version of Chromium that records
detailed causality trees of page element creation relationships.
Using these tools, we crawled the Alexa Top 75 k websites
and a random sample of 75 k websites drawn from a snapshot
of the .com zone in May 2016. These two crawls allow us to
compare and contrast JavaScript library usage between popular
and unpopular websites. In total, we observed 11,141,726 inline
scripts and script ﬁle inclusions; 87.7 % of Alexa sites and
46.5 % of .com sites used at least one well-known JavaScript
library, with jQuery being the most popular by a large majority.
Analysis of our dataset reveals many concerning facts
about JavaScript library management on today’s Web. More
than a third of the websites in our Alexa crawl include at
least one vulnerable library version, and nearly 10 % include
two or more different vulnerable versions. From a per-library
perspective, at least 36.7 % of jQuery, 40.1 % of Angular, 86.6 %
of Handlebars, and 87.3 % of YUI inclusions use a vulnerable
version. Alarmingly, many sites continue to rely on libraries
like YUI and SWFObject that are no longer maintained. In fact,
the median website in our dataset is using a library version
1,177 days older than the newest release, which explains why so
many vulnerable libraries tend to linger on the Web. Advertising,
tracking and social widget code can cause transitive library
inclusions with a higher rate of vulnerability, suggesting that
these problems extend beyond individual website administrators
to providers of Web infrastructure and services.
We also observe many websites exhibiting surprising
behaviours with respect to JavaScript library inclusion. For
example, 4.2 % of websites using jQuery in the Alexa crawl
include the same library version multiple times in the same
document, and 10.9 % include multiple different versions of
jQuery into the same document. To our knowledge, ours
is the ﬁrst study to make these observations, since existing
tools ([27], [20]) are unable to detect these anomalies. These
strange behaviours may have a negative impact on security as
asynchronous loading leads to nondeterministic behaviour, and
it remains unclear which version will ultimately be used.
Perhaps our most sobering ﬁnding is practical evidence that
the JavaScript library ecosystem is complex, unorganised, and
quite “ad hoc” with respect to security. There are no reliable
vulnerability databases, no security mailing lists maintained by
library vendors, few or no details on security issues in release
notes, and often, it is difﬁcult to determine which versions of
a library are affected by a speciﬁc reported vulnerability.
Overall, our study makes the following contributions:
• We conduct the ﬁrst comprehensive study showing that
a signiﬁcant number of websites include vulnerable or
outdated JavaScript libraries.
• We present results on the origins of vulnerable
JavaScript
library inclusions, which allows us to
contrast the security posture of website developers with
third-party modules such as WordPress, advertising or
tracking networks, and social media widgets.
• We show that a large number of websites include
JavaScript libraries in unexpected ways, such as mul-
tiple inclusions of different library versions into the
same document, which may impact their attack surface.
• We ﬁnd existing remediation strategies to be ineffective
at mitigating the threats posed by vulnerable JavaScript
libraries. For example, less than 3 % of websites could
ﬁx all their vulnerable libraries by applying only patch-
level updates. Similarly, only 1 % of websites use the
version-aliasing services offered by JavaScript CDNs.
II. BACKGROUND
JavaScript has allowed web developers to build highly inter-
active websites with sophisticated functionality. For example,
communication and production-related online services such as
Gmail and Ofﬁce 365 make heavy use of JavaScript to create
web-based applications comparable to their more traditional
desktop counterparts. In this paper, we focus exclusively on
aspects of client-side JavaScript executed in a browser, not the
recent trend of using JavaScript for server-side programming.
A. JavaScript Libraries
In many cases, to make their lives easier, web developers
rely on functionality that is bundled in libraries. For example,
jQuery [13] is a popular JavaScript library that makes HTML
document traversal and manipulation, event handling, animation,
and AJAX much simpler and compatible across browsers.
In the simplest case, a JavaScript library is a plain-text script
containing code with reasonably well-deﬁned functionality. The
script has full access to the DOM that includes it; the concept of
namespaces does not exist in JavaScript, and everything that is
created is by default global. More elaborate libraries use hacks
and conventions to protect the code against naming conﬂicts,
and expose interfaces for retrieving meta-data such as the name
and version of the library. Over the course of this study, we
found that JavaScript libraries overwhelmingly use the Semantic
Versioning [28] convention of major.minor.patch, such
as 1.0.1, where the major version component is increased for
breaking changes, the minor component for new functionality,
and the patch component for backwards-compatible bug ﬁxes.
To include a library into their website, developers typically
use the  HTML tag and
point to an externally-hosted version of the library or a copy
on their own server. Library vendors often provide a miniﬁed
version that has comments and whitespace removed and local
variables shortened to reduce the size of the ﬁle. Developers
can also concatenate multiple libraries into a single ﬁle, create
custom builds of libraries, or use advanced miniﬁcation features
such as dead code removal. While custom miniﬁcation builds
are relatively common, more aggressive miniﬁcation settings are
rare in client-side JavaScript because they can break code [9].
CDNs. Many libraries are available on Content Distribution
Networks (CDNs) for use by other websites. Google, Microsoft
2
and Yandex host libraries on their CDNs, some popular libraries
(e.g., Bootstrap and jQuery) offer their own CDNs, and some
community-based CDNs accept to host arbitrary open-source
libraries. JavaScript CDNs enable caching of libraries across
websites to increase performance. Another useful feature offered
by some CDNs is version aliasing. That is, when including a
library, the developer may specify a version preﬁx instead of the
full version string, in which case the CDN returns the newest
available version with that preﬁx. When implemented correctly,
the patched version of a library will automatically be used on the
website when it becomes available on the CDN. However, this
works only for security issues ﬁxed in a backwards-compatible
manner, and it conﬂicts with client-side security mechanisms
such as subresource integrity [37]. In addition, version aliasing
makes client-side caching of resources less efﬁcient because it
must be conﬁgured for shorter time spans, that is, hours instead
of years. As a result, version aliasing is often discouraged [11].
Third Parties.
Third-party modules such as advertising,
trackers, social media or other widgets that are often embedded
in webpages typically implemented in JavaScript. Furthermore,
these scripts can also load libraries, possibly without the
knowledge of the site maintainer. If not isolated in a frame,
these libraries gain full privileges in the including site’s context.
Thus, even if a web developer keeps own library dependencies
updated, outdated versions may still be included by badly
maintained third-party content. Also, some JavaScript libraries
and many web frameworks contain their own copies of libraries
they depend on. Hence, web developers may unknowingly rely
on software maintainers to update JavaScript libraries.
B. Vulnerabilities in JavaScript Libraries
While JavaScript is the de-facto standard for developing
client-side code on the Web, at the same time it is notorious
for security vulnerabilities. A common, lingering problem is
Cross-Site Scripting (XSS) [17], which allows an attacker to
inject malicious code (or HTML) into a website. In particular,
if a JavaScript library accepts input from the user and does
not validate it, an XSS vulnerability might creep in, and all
websites using this library could become vulnerable.
As an example, consider the popular jQuery library and its
$() function, which is overloaded and has different behaviour
depending on which type of argument is passed [15]: If a string
containing a CSS selector is passed, the function searches the
DOM tree for corresponding elements and returns references to
them; if the input string contains HTML, the function creates
the corresponding elements and returns the references. As a
consequence, developers who pass improperly sanitised input
to this function may inadvertently allow attackers to inject
code even though the developers’ original intent was only
to select an existing element. While this API design places
convenience over security considerations and the implications
could be better highlighted in the documentation, it does not
automatically constitute a vulnerability in the library.
In older versions of jQuery, however, the $() function’s le-
niency in parsing string parameters could lead to complications
by misleading developers to believe, for instance, that any string
beginning with # would be interpreted as a selector and could be
safe to pass to the function, as #test selects the element with
identiﬁer test. Yet, jQuery considered parameters containing a
TABLE I.
THE 30 MOST FREQUENT LIBRARIES IN OUR ALEXA WEB
CRAWL (OUT OF 72 SUPPORTED LIBRARIES). ∗DYNAMIC METHOD DETECTS
G ALL KNOWN VERSIONS, Q RECENT VERSIONS, H ONLY THE LIBRARY’S
PRESENCE; OTHERWISE DETECTION BY STATIC METHOD ONLY.
Library
jQuery
jQuery-UI
Modernizr
Bootstrap
Yepnope
jQuery-Migrate
SWFObject
Underscore
jQuery-Tools
Flexslider
Moment
RequireJS
jQuery-Form
Backbone
Angular
LoDash
jQuery-Fancybox
GreenSock GSAP
Handlebars
Prototype
Hammer.js
FastClick
WebFont Loader
MooTools
Isotope
jQuery-Cookie
Knockout
jQuery-Mobile
Mustache
jQuery-Validation
Versions
∗Dyn.
66
G
46
G
24
G
32
Q
10 H
7
G
2
Q
61
G
8
Q
11 H
54