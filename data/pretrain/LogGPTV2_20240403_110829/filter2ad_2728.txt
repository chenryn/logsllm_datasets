title:HOTS: An OWAMP-Compliant Hardware Packet Timestamper
author:Zhang Shu and
Katsushi Kobayashi
HOTS: An OWAMP-Compliant Hardware
Packet Timestamper
Zhang Shu and Katsushi Kobayashi
National Institute of Information and Communications Technology, Japan
{zhang, ikob}@koganei.wide.ad.jp
1
Introduction
Accurate timestamps on both the sender and the receiver side are crucial for
one-way delay (OWD) measurements. Traditionally, the methods of (i) peering
with NTP servers, and (ii) connecting to a time source directly, have been used
to maintain the accuracy of a measurement system clock. However, it has became
clear that such methods suﬀer from errors to diﬀerent extents.
In this paper, we introduce the hardware OWAMP [1] timestamper (HOTS),
which generates extremely precise clock information for OWAMP test packets
on both the sender and the receiver side. Compared with traditional methods,
HOTS oﬀers the following advantages: (i) the generated timestamp can be ex-
tremely precise because HOTS accepts an external 10-MHz signal as well as
the 1PPS signal as input, and (ii) HOTS bypasses all of the software process-
ing, thus minimizing possible errors. We also present the early results of OWD
measurements that we made using this timestamper.
DAG [2] is a similar measurement instrument which also uses hardware to
generate timestamps for a packet. However, this product is only designed to
record the arrival timestamp of a packet and cannot be used to measure OWD.
2 Methodology
2.1 OWAMP Overview
The one-way active measurement protocol (OWAMP) is designed to measure
one-way delay, jitter or packet loss. It consists of two inter-related protocols:
OWAMP-Control and OWAMP-Test. OWAMP-Control is used to initiate, start
and stop test sessions and to fetch their results, while OWAMP-Test is used to
deﬁne the format of the test packets.
OWAMP test packets are transmitted in UDP datagrams. The header of the
packets includes an 8-byte “Timestamp” ﬁeld where the sender inserts the clock
information when an OWAMP test packet is sent.
2.2 HOTS
Simply speaking, HOTS is a packet over SONET (POS) network interface card
(NIC) which has a function to generate timestamps for outgoing or incoming
C. Dovrolis (Ed.): PAM 2005, LNCS 3431, pp. 358–361, 2005.
c(cid:1) Springer-Verlag Berlin Heidelberg 2005
HOTS: An OWAMP-Compliant Hardware Packet Timestamper
359
packets destined for a speciﬁc port. Because it uses a PCI bus, HOTS can be
used on most of the PCs.
HOTS has three I/O ports: one bidirectional SC connector and two mini-
BNC jacks. The SC connector is used to send and receive packets, just as a
normal SC connector does. The two mini-BNC jacks are used to obtain clock
information from an external source such as a GPS or CDMA receiver.
HOTS can accept two kinds of signal as input: a 1PPS signal and a 10-MHz
signal. The precision of the generated timestamp depends on the accuracy of the
provided signals. In our measurements, we used two kinds of GPS receiver to
generate these signals: the HP 58503A and the TymServe 2100. Both of them
can generate extremely precise clock information.
HOTS maintains two clock-related counters: C1 and C2, which respectively
hold the seconds and the fractions of a second based on the two kinds of external
signals. The counters are operated as follows.
1. When reset (or the interface becomes up), both counters are cleared to zero.
2. In operational mode, C2 is incremented based on the external 10-MHz signal.
3. When the 1PPS signal is received, C1 is incremented and C2 is cleared to
zero.
Sender Behavior. When HOTS is used on the sender side, it works as follows.
1. When receiving a packet from the upper layer (usually the driver program),
HOTS checks whether this packet is a UDP datagram and is destined for a
speciﬁc port.
2. If it is, HOTS generates a timestamp (ts) based on the two clock counters,
inserts the timestamp into the “Timestamp” ﬁeld of the packet, recalculates
the UDP checksum based on the original one and the new timestamp, and
then sends the packet to the physical link.
3. If the packet is not a UDP packet or is not destined for a speciﬁc port, HOTS
does nothing apart from sending the packet to the physical link.
Receiver Behavior. When used on the receiver side, HOTS behaves as follows.
1. When receiving a packet from the physical link, it checks whether this packet
is a UDP datagram and is destined for a speciﬁc port.
2. If it is, HOTS generates a timestamp (tr), and passes the timestamp to the
upper layer as well as the received packet. How the timestamp is passed
to the upper layer depends on the users. In our measurements, we directly
recorded (in the driver program) the timestamp in the body of the OWAMP
test packet for simplicity. We also cleared the UDP checksum so that the
datagram would not be dropped in the UDP processing because of inconsis-
tent UDP checksums.
3. If the packet is not a UDP datagram or the port number is not a speciﬁc
one, HOTS simply passes the received packet to the upper layer as other
NICs would.
360
Z. Shu and K. Kobayashi
The OWAMP program on the receiver side will receive the packet in the
user-space by normal socket API and the OWD can be calculated by
D = tr − ts
(1)
HOTS works with both IPv4 and IPv6 OWAMP test packets.
3 One-Way Delay Measurements
3.1 Measured Network
We made OWD measurements on the APAN-JP network, which is part of the
Asia-Paciﬁc Advanced Network [3]. The topology of the measured network is
shown in Fig. 1. P C1 and P C2 were the two end hosts between which we sent
and received OWAMP test packets. These hosts were located at our institute
in Tokyo and a data center in Fukuoka, respectively. There were ﬁve routers
between the two hosts. The major distances between the two hosts were the 30
km between our institute and downtown Tokyo, and the 900 km between Tokyo
and Fukuoka.
Fig. 1. Topology of the measured network
We periodically sent and received four kinds of test packet: packets of either
64 bytes or 1400 bytes in IPv4 or IPv6. All of these packets were sent once per
second.
3.2 Measurement Results
Some early results for the IPv4 packets are shown in Fig. 2. From this graph, we
can see that the OWD for the IPv4 64-byte packets was usually about 10.7ms,
and the OWD for the IPv4 1400-byte packets was several milliseconds longer.
For IPv6, the results were similar to those for IPv4 packets.
3.3 Adaptation for Other OWAMP Implementation
HOTS can be easily used in other OWAMP software, such as the implementation
from Internet2 [4], to perform highly precise measurements with the following
modiﬁcations.
– Specify the negotiated port numbers of the test packets on both the sender
and the receiver side before transmitting a test packet.
– On the receiver side, use the hardware-generated timestamp when calculating
the OWD.
HOTS: An OWAMP-Compliant Hardware Packet Timestamper
361
)
s
m
l
(
y
a
e
D
y
a
W
-
e
n
O
 20
 19
 18
 17
 16
 15
 14
 13
 12
 11
 10
64-byte
1400-byte
13:50
13:55
Time
Fig. 2. Typical results for IPv4
4 Conclusion and Future Work
Highly precise OWD measurement is a challenge because of the diﬃculty of elim-
inating errors in process to obtain an accurate timestamp and other overheads.
In this paper, we introduced HOTS - a hardware packet timestamper that we
developed to measure OWD. HOTS can generate extremely precise clock infor-
mation for OWAMP test packets provided an accurate time source such as a
GPS or CDMA receiver. We presented the results of a preliminary OWD mea-
surement that we did on the APAN-JP network to show its eﬀectiveness.
References
1. S. Shalunov, B. Teitelbaum, A. Karp, J. W. Boote, and M. J. Zekauskas. (2004,
Aug.) A one-way active measurement protocol (OWAMP). Internet draft. [Online].
Available: http://www.ietf.org/internet-drafts/draft-ietf-ippm-owdp-10.txt
2. DAG network monitoring interface cards. [Online]. Available: http://www.endace.
com/networkMCards.htm
3. Asia-Paciﬁc Advanced Network. [Online]. Available: http://www.apan.net
4. Internet2 OWAMP implementation.
[Online]. Available: http://e2epi.internet2.
edu/owamp