title:Automated Attack Synthesis by Extracting Finite State Machines from
Protocol Specification Documents
author:Maria Leonor Pacheco and
Max von Hippel and
Ben Weintraub and
Dan Goldwasser and
Cristina Nita-Rotaru
3
7
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Automated Attack Synthesis by Extracting Finite
State Machines from Protocol Speciﬁcation
Documents
Maria Leonor Pacheco∗, Max von Hippel†, Ben Weintraub†, Dan Goldwasser∗, Cristina Nita-Rotaru†
∗Purdue University, West Lafeyette, IN, USA, {pachecog,dgoldwas}@purdue.edu
†Northeastern University, Boston, MA, USA, {vonhippel.m,weintraub.b,c.nitarotaru}@northeastern.edu
Abstract—Automated attack discovery techniques, such as
attacker synthesis or model-based fuzzing, provide powerful ways
to ensure network protocols operate correctly and securely. Such
techniques, in general, require a formal representation of the
protocol, often in the form of a ﬁnite state machine (FSM).
Unfortunately, many protocols are only described in English
prose, and implementing even a simple network protocol as
an FSM is time-consuming and prone to subtle logical errors.
Automatically extracting protocol FSMs from documentation can
signiﬁcantly contribute to increased use of these techniques and
result in more robust and secure protocol implementations.
In this work we focus on attacker synthesis as a representative
technique for protocol security, and on RFCs as a representative
format for protocol prose description. Unlike other works that
rely on rule-based approaches or use off-the-shelf NLP tools
directly, we suggest a data-driven approach for extracting FSMs
from RFC documents. Speciﬁcally, we use a hybrid approach
consisting of three key steps: (1) large-scale word-representation
learning for technical language, (2) focused zero-shot learning
for mapping protocol text to a protocol-independent information
language, and (3) rule-based mapping from protocol-independent
information to a speciﬁc protocol FSM. We show the gener-
alizability of our FSM extraction by using the RFCs for six
different protocols: BGPv4, DCCP, LTP, PPTP, SCTP and TCP.
We demonstrate how automated extraction of an FSM from an
RFC can be applied to the synthesis of attacks, with TCP and
DCCP as case-studies. Our approach shows that it is possible
to automate attacker synthesis against protocols by using textual
speciﬁcations such as RFCs.
I. INTRODUCTION
Automated attack discovery techniques, such as attacker
synthesis or model-based fuzzing, provide powerful ways
to ensure network protocols operate correctly and securely.
Such techniques, in general, require a formal representation
of the protocol, often in the form of a ﬁnite state machine
(FSM). Unfortunately, many protocols are only described
in English prose, and implementing even a simple network
protocol as an FSM is time-consuming and prone to subtle
logical errors. Automated attack discovery techniques are
therefore infrequently employed in the real world because
of the signiﬁcant effort required to implement a protocol FSM.
Automatically extracting protocol FSMs from documentation
can signiﬁcantly contribute to increased use of these techniques
and result in more robust and secure protocol implementations.
We observe that for network protocols there is an untapped
resource of information available in the form of RFCs. With the
recent interest in using data to automatically solve problems in
Given the inherent ambiguity of natural
several ﬁelds, we ask the question: “Can we leverage formal
prose descriptions of protocols to improve protocol security?”
language text,
extracting protocol information is not a straightforward task.
The writers of protocol speciﬁcations often rely on human
readers’ understanding of context and intent, making it difﬁcult
to specify a set of rules to extract information. This is by
no means unique to the computer networks domain, and as a
result, the natural language community shifted its focus over
the last decade to statistical methods that can help deal with
such ambiguity. At the same time, one can not just apply
“off-the-shelf” implementations of NLP tools combined in an
ad-hoc way, as training such tools on poorly selected datasets
will result in reduced performance and cause the resulting
applications to be brittle.
Unlike other software, network protocols follow a speciﬁc
pattern: they are described by messages and FSMs, they must
meet temporal safety and liveness properties, and they follow a
structured language. Thus, NLP tools trained on such aspects of
a protocol are likely to generalize on protocols with a similar
structure. Unlike other NLP tasks where high precision is
needed, protocol validation is more robust to noisy NLP results
because the ultimate result comes from protocol execution.
NLP techniques have been applied selectively in related prob-
lems. WHYPER [1] and DASE [2] apply NLP techniques to
identify sentences that describe the need for a given permission
in a mobile application description and extract command-line
input constraints from manual pages, respectively. The work
in [3] used documentation and source code to create an ontology
allowing the cross-linking of software artifacts represented in
code and natural language on a semantic level.
Several other works looked at inferring protocol speciﬁcation
– based on network traces [4], [5], [6], [7], [8], using program
analysis [9], [10], [11], [12], or through model checking [13],
[14]. Comparetti et al. [4] infer protocol state machines from
observed network traces by clustering messages based on
the similarity of message contents and their reaction to the
execution. Caballero et al. [6] extracts the protocol message
format, given a trace of protocol messages. Cho et al. [7]
extracts the protocol state machines from network traces with
the help of a set of end-user provided abstraction functions
to generate an abstract alphabet out of trace messages. The
approach relies intensively on human expert input.
© 2022, Maria Leonor Pacheco. Under license to IEEE.
DOI 10.1109/SP46214.2022.00056
51
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:43 UTC from IEEE Xplore.  Restrictions apply. 
Our contribution. In this work we focus on attacker
synthesis as a representative technique for protocol security, and
on RFCs as a representative format for protocol description. Our
goal is to close the automation gap between automated protocol
speciﬁcation and security validation by extracting protocol
FSMs from the corresponding RFCs. Unlike other works that
rely on rule-based approaches or use off-the-shelf NLP tools
directly, we suggest a data-driven approach for extracting
information from RFC documents. Off-the-shelf NLP tools are
typically trained over news documents, and when applied to
technical documents that include many out-of-vocabulary words
(i.e. technical terms), their performance degrades substantially.
Rule-based systems, on the other hand, are developed to support
information extraction based on the speciﬁc format of the
textual input. Unfortunately, different RFC documents deﬁne
variables, constraints, and temporal behaviors totally differently.
Moreover, RFCs follow no common document structure.
Machine-learning systems can deal with these challenges,
however training such systems from scratch requires signiﬁcant
human effort annotating data with the relevant labels, which
could be different for different protocols. We confront these
challenges with a hybrid approach consisting of three key
steps: (1) large-scale word-representation learning for technical
language, (2) focused zero-shot learning for mapping protocol
text to a protocol-independent information language, and (3)
rule-based mapping from protocol-independent information to
a speciﬁc protocol FSM.
While RFCs are the main form for textual speciﬁcation
for protocols, they do not necessarily contain the complete
speciﬁcation, referred to as canonical FSM. There does not exist
a one-to-one mapping between the textual speciﬁcation and a
canonical formal speciﬁcation of the state machine, as canonical
FSMs are created based not only on information contained in
RFCs, but on input from experts with domain knowledge. This
is a limitation for any statistical NLP approach. In this paper,
we propose an alternative intermediary representation (i.e. a
grammar) that can be used to recover partial state machines.
Our approach exploits the large number of technical doc-
uments found in online technical forums to train a deep
learning model, capturing the properties of and interactions
between technical terms. This process does not require direct
annotation, and does not add to the human effort involved
in building the model. Our zero-shot information extraction
approach builds on that representation. Since each protocol
consists of its own set of predicates and variables, we suggest
a zero-shot approach in which we separate between protocols
observed during training and testing. The model learns to
identify and connect concepts relevant for the training protocols
and at test time it is evaluated on extracting a set of symbols
which were not observed at training. The output of that step
creates an intermediate representation of conditions, operations
and transitions, extracted from protocol text. The ﬁnal step
transpiles the intermediate representation into an FSM written
in PROMELA code [15]. We make the following contributions:
• We propose an embedding that allows us to learn network
technical terms without the need to annotate data. To learn
this embedding, we collected a set of 8,858 unlabeled
RFCs from ietf.org and rfc-editor.org cover-
ing aspects of computer networking, including protocols,
procedures, programs, concepts, meeting notes and opin-
ions. These documents contain a total of 475M words.
• We suggest and evaluate an NLP framework for the
task of recovering FSMs from the RFCs, designed to
adapt to previously unobserved protocols. We show the
generalizability of our FSM extraction by using the RFCs
for six different protocols: BGPv4, DCCP, LTP, PPTP,
SCTP, and TCP. As part of the NLP framework we propose
a general-purpose abstraction for annotating the segments
of text in RFC speciﬁcation documents that describe the
FSM for each of six network protocols. For example, of
the 20 transitions in the TCP FSM, our NLP pipeline can
extract 17, either correctly or partially so.
• We demonstrate how automated extraction of an FSM from
an RFC can be applied to the synthesis of attacks, with
TCP and DCCP as case-studies. We ﬁnd that even when
the extracted FSM has errors, we can generate attacks
that are conﬁrmed on a canonical hand-written model of
the same protocol. However, the quality of the extracted
FSM impacts the accuracy of the attack synthesis. For
example, in the case of TCP, we can ﬁnd attacks against
only one property using our NLP pipeline, as opposed to
against all four when using the canonical FSM.
The code is available at https://github.com/RFCNLP.
The rest of the paper is organized as follows. We discuss
attack synthesis and NLP techniques in Section II. Our
grammar is described in Section III,
language
embedding in Section IV, parsing in Section V, and FSM
extraction in Section VI. We present the TCP and DCCP
attack synthesis case studies in Section VII. We evaluate NLP
components, FSM extraction, and automated attack synthesis
in Section VIII. We present related work in Section IX. We
discuss limitations and improvements in Section X.
technical
II. MOTIVATION AND OUR APPROACH
In this section, we summarize the motivation of our work,
the main challenges related to the extraction of FSMs from
speciﬁcation documents, and the way our approach is designed
to circumvent these challenges.
A. Need for Automated FSM Extraction
Automated attack discovery methods typically model the
system under attack abstractly — either implicitly, e.g. with a
statistical representation, or explicitly, e.g. with a ﬁnite state
machine [16], [17], [18]. An FSM represents a program as a
graph, where the nodes are program states and the edges are
transitions (i.e. changes in state). Recent work in the theory
of security use FSMs to deﬁne what it means to attack [19],
[18]. Conversely, various attack discovery methods leverage
FSMs to compute attacks [16], [20], [21], [22], [18].
Current attack ﬁnding [16], [20], [22] and attack synthesis
techniques [18] rely on a manually deﬁned FSM speciﬁed by
an expert. Anecdotally, there are reports where such FSMs
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:43 UTC from IEEE Xplore.  Restrictions apply. 
252
were derived from code directly because speciﬁcations lacked
such a description [22].
B. Challenges in FSM Extraction from RFCs
One common way of specifying protocols is with RFCs.
While RFCs provide some structure that can be exploited for
automated information extraction, it is not a straightforward
task. An RFC describes in natural language, which is inherently
ambiguous, the protocol’s variables, states, and conditions for
state transitions. Even for humans, creating a formal model
from the text requires considerable domain expertise. From an
NLP perspective, this is a specialized information extraction
task, called semantic parsing [23], mapping the protocol text
into structured information: the FSM. The mapping consists of
multiple inter-dependent predictions, each extracting individual
elements from the document, which together should capture
the conditions and transitions of the FSM. Unlike traditional
semantic parsing domains that operate over short texts, such
as mapping a request in natural language to a command for a
personal assistant (e.g., “set timer to 30 minutes”), extracting
an FSM requires processing multiple interconnected sentences
to capture the transitions from just a single state.
Recently, very promising results were obtained by NLP
researchers using deep learning methods for information
extraction and semantic parsing tasks [24], [25], [26], [27].
However, most of the recent successes in these areas depend on
large amounts of annotated data. When dealing with technical
domains, high-quality annotated resources are scarce, and the
fact that a deep understanding of the protocols is needed to
annotate these documents makes generating enough data to
support machine learning systems a costly and difﬁcult process.
Furthermore, dealing with specialized domains also reduces
the amount of non-labeled data which can potentially be used.
Unlike traditional NLP domains, such as newswire text, in
which a vast amount of data is available for training NLP
models, when learning to extract FSMs from network protocol
RFCs, we are limited by the number of existing protocols.
Given the data scarcity problem, it is difﬁcult to build an NLP
model that will reliably generalize to new protocols that were
not observed during the training phase, as there is no common
document structure to RFCs and the different functionality
described by the protocols results in a different set of symbols
and behaviors used by each protocol. In the next section we
describe our approach for dealing with these challenges.
Fig. 1: Overview of our approach.
353
C. Our Approach
As we discussed in the previous section, the lack of training
resources prevents us from taking an end-to-end learning
approach, in which a complex neural model is trained to predict
the complete FSM directly from the text. Instead, we break
the process into several parts, allowing us to exploit several
different forms of supervision and human expertise. Figure 1