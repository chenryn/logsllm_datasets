user ultimately plans to request B blocks, then using multi-
block queries does not introduce any overhead — indeed, it
usually reduces both communication and computation cost
— provided (cid:100)B/q(cid:101) ≥ (cid:100)v/(k− v−t − q)(cid:101).) Therefore, the worst
Guruswami-Sudan bound occurs when m = k−(cid:98)√
case overhead for our example of setting q to preserve the
kt (cid:99)− 1
and the user seeks to fetch exactly q = (cid:98)√
kt (cid:99)− t blocks.
When this worst case occurs, multi-block queries do not
improve costs compared to issuing separate, single-block
queries; indeed, it is easy to show that m ≥ q. Nonethe-
less, when v(cid:48) ≤ q−1
and therefore that the communication and computation
cost are always strictly lower than those resulting from
q consecutive single-block queries. To make the above
example more concrete, suppose that (cid:96) = k = 10 and t = 5 so
kt (cid:99)(cid:1), we have that m  1 it
turns out that, although each of the m − 1 “follow-up”
queries must involve the same set of k database servers
that responded to the ﬁrst query, the follow-up queries do
not need to be for the same set of q blocks. In particular,
if the user already plans to fetch mq or more blocks
from the database, then the follow-up queries introduce no
communication or computation overhead compared to the
case of v(cid:48) = 0 Byzantine servers [20]. (Equivalently, if the
4Preserving the Guruswami-Sudan robustness bound is a somewhat
arbitrary goal, since we argue below that even less robustness should
sufﬁce if one accepts the premise that the PIR servers are all rational
agents.
It is trivial to modify the parameters from the above
example to return additional blocks per query (at a cost
of lower Byzantine robustness), or to get better Byzantine
robustness (at a cost of returning fewer blocks per query).
For example, again considering the case of (cid:96) = k = 10 and
t = 5, the user can set q = 3 blocks per query to get a
robustness bound of v = 1 servers, which always yields a
three-fold improvement in throughput compared to single-
block queries (provided the query succeeds because there
are only v(cid:48) ≤ 1 Byzantine servers). Moreover, we point out
that the user could pack an additional q(cid:48) blocks into each
query without reducing robustness by sharing her query
among q(cid:48) additional database servers. Doing so incurs an
additive increase rather than a multiplicative increase in the
communication cost of the query, and no change in per-
sever computation cost. (That is, the communication cost
N
N ﬁeld elements.)
However, this latter trick has the undesirable side effect
of increasing the user’s exposure to potentially malicious
database servers without increasing the privacy threshold
to compensate, so we do not explore it any further.
increases from(cid:0)(cid:96)+k(cid:1)√
ﬁeld elements instead of q(cid:48)·(cid:0)(cid:96) + k(cid:1)√
N ﬁeld elements to(cid:0)(cid:96)+k +2q(cid:48)(cid:1)√
Our analysis so far suggests that multi-block queries
can easily improve throughput compared to single-block
queries by a factor of two or more, even for modest
parameter choices. However, it turns out that the above
analysis actually understates the expected throughput gains
from switching to multi-block queries:
it categorically
overstates the need to maintain high robustness (thus,
low throughput) for most queries, and assumes that both
single-block and multi-block queries use a block size that
provides optimal communication cost only for single-block
queries. The remainder of this section discusses how one
should select parameters to get optimal throughput with
multi-block queries.
Making the case for tolerating reduced robustness. Good
robustness with respect to Byzantine database servers is an
immensely useful property for an IT-PIR protocol to pos-
sess; therefore, some remarks about why it is reasonable to
tolerate reduced robustness are in order. Suppose that the
user chooses q such that her query is robust against up to v
Byzantine database servers. In this case, if she receives at
most v incorrect responses, then not only can she recover
her q requested blocks, but she also learns which subset
of database servers provided her with Byzantine responses.
Once the user catches some database server misbehaving,
she can (and should) exclude it from her future queries.
Thus, a coalition of malicious (but rational) database
servers that wish to disrupt a user’s queries should return
incorrect responses if and only if the coalition is larger
than the robustness threshold v for the given query. We
already noted above, however, that single- and multi-block
queries are information-theoretically indistinguishable by
any coalition of up to t database servers; moreover, the
non-collusion assumption states that larger coalitions do
not exist among the database servers. Suppose that an
“average” query can tolerate at most ¯v  1), then once the
user issues m ≤ v(cid:48) queries, the cost per retrieved block is
always as low as our optimistic analysis predicts.
c j
(cid:16)
b j
b j+1
b j+2
b j+3
s
e
c
i
d
n
i
k
c
o
l
B
b(cid:48)
j = b j+4
c(cid:48)
j
j)(cid:2),Pj,σ j
(cid:3)(cid:17)
Record descriptor
j,(b j,c j),(b(cid:48)
j,c(cid:48)
Figure 1: A record that spans ﬁve consecutive PIR blocks. The record
has index j; it begins at the cj th ﬁeld element of block bj and ends
at the c(cid:48)j th ﬁeld element of block b(cid:48)j = bj + 4. In the descriptor for
this record, Pj
is an optional set of metadata about the record, such
as information regarding its price or access criteria, and σj is an
optional cryptographic signature on the rest of the tuple. Looking
ahead to Section IV, Protocol 4 and the zero-knowledge proofs that
extend Protocols 2 – 4 with pricing and access control use the optional
values Pj and σj.
Selecting the communication-optimal block size. Suppose
the largest record in the database D is S ﬁeld elements
long. For a ﬁxed block size of s ﬁeld elements, this longest
record spans at most B = (cid:100)(S− 1)/s(cid:101) + 1 blocks (cf. Figure 1).
If each IT-PIR query can retrieve up to q blocks, then
users must submit Q = (cid:100)B/q(cid:101) queries to retrieve a record
without leaking any information about that record to the
database servers. Suppose that all servers respond to the
user’s queries (i.e., that (cid:96) = k); the communication cost is
therefore 2 (cid:96)· Q(cid:0)(cid:100)N/s(cid:101) + s(cid:1) ﬁeld elements for each record
that
the user retrieves, and the communication-optimal
block size s is the positive integer that minimizes this
expression. (It is clear that the computation-optimal block
size is just any block size that minimizes Q; i.e., any block
size for which Q = 1.)
Case 1 (q > 1): Clearly, we also have that Q = 1 for the
communication-optimal block size since Q(cid:0)(cid:100)N/s(cid:101)+s(cid:1)≥
(cid:0)(cid:100)N/(sQ)(cid:101) + sQ(cid:1), with equality holding if and only if
Q = 1. (In other words, if a block size of s yields
Q > 1, then switching the block size to s(cid:48) = sQ always
reduces both communication and computation cost.)
We therefore want the (positive integer) value of s
that minimizes the sum (cid:100)N/s(cid:101) + s subject to Q = 1. The
smallest positive integer value of s for which Q = 1
is s = (cid:100)(S− 1)/(q− 1)(cid:101); hence, the communication-optimal
block size is s = max(cid:0)(cid:100)(S− 1)/(q− 1)(cid:101),(cid:100)√
N(cid:101)(cid:1).
Case 2 (q = 1): Because B = (cid:100)(S− 1)/s(cid:101) + 1 ≥ 2, it follows
that Q = (cid:100)B/q(cid:101)(cid:54) = 1 in general; that is, without making
some assumptions about the layout of the database,
a single query does not sufﬁce to retrieve an arbitrary
record when q = 1. The “worst case” occurs when some
block contains a single ﬁeld element from a longest
record, in which case S − 1 ﬁeld elements from that
record appear in other blocks. By setting s ≥ S − 1
we can ensure that each of these other ﬁeld elements
are in the same block; therefore, the communication-
optimal block size is s = max(cid:0)S − 1,(cid:100)√
N(cid:101)(cid:1), which
always yields Q = 2.
per query is Θ(cid:0)max{S/q,
N}(cid:1). It may be possible to
√
In both of the above cases, the communication cost
reduce communication costs by using data-dependent opti-
mizations; i.e., by rearranging the records and introducing
padding as appropriate to eliminate all unnecessary block
for example, when all records have a ﬁxed length S ≥ √
overﬂows. The best possible communication cost occurs,
N ,
in which case setting s = (cid:100)S/q(cid:101) with Q = 1 sufﬁces for any
q.
Communication-optimality of multi-block IT-PIR. Return-
ing to our database-driven e-commerce example, wherein
users seek to purchase e-books, music, movies, or smart
phone and tablet apps from a PIR database, we note that
PIR’s linear computation requirement places a practical
upper limit on the size of the database. Under reason-
√
able assumptions about the database records, it follows
for such applications that (S− 1)/(q− 1) >
N ; i.e., that the
actual communication cost is always Θ(S/q) in practice.
For example, suppose the largest ﬁle in an online video
store that supports up to q ≤ 3 blocks per query is a
movie occupying just 700 megabytes: the length of such
(S− 1)/(q− 1) ≤ √
a database would have to exceed 120 petabytes before
N , which seems far too large for the linear
computation cost of PIR to be economically feasible on
modern hardware. In real-world e-commerce scenarios, we
therefore expect the communication cost of multi-block
√
IT-PIR to be within a factor of ((cid:96) + k)/(q− 1) of optimal. As S
N , this overhead factor approaches
increases relative to
k/(q− 1).
IV. SPIR Constructions
This section presents four new SPIR constructions
that extend Goldberg’s IT-PIR. Each of our constructions
supports variable-length records with the (multi-block)
optimal communication cost. The ﬁrst construction di-
rectly extends Goldberg’s IT-PIR protocol into SPIR using
ephemeral, record-level encryption and a key retrieval
strategy inspired by Naor and Pinkas’ oblivious polynomial
evaluation protocol [32]. The second and third protocols
replace ephemeral encryption with static encryption and
use Camenisch et al.’s OT (or POT/OTAC) and Henry et
al.’s SPIR (or PSPIR), respectively, to let users retrieve —
perhaps by purchasing — the long-term decryption keys
for the records they seek. The fourth protocol generalizes
Henry et al.’s (P)SPIR protocol to support both multi-
block and sub-block queries, thereby supporting queries for
variable-length records in a plaintext PSPIR database. Each
construction offers a different set of features and different
performance and usability characteristics, all of which is
summarized in Table 2 and Section IV-B.
A. Model
Our SPIR constructions build on the multi-block IT-
PIR from Section III; thus, the model considers a set of (cid:96)
independent database servers that each hold a complete
replica of the (possibly encrypted) database. The user
queries some subset of the database servers for a single