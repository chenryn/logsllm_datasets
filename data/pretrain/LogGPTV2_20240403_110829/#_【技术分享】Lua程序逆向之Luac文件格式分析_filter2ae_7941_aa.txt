# 【技术分享】Lua程序逆向之Luac文件格式分析
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[非虫](http://bobao.360.cn/member/contribute?uid=2669205776)
预估稿费：600RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**简介**
****
Lua语言对于游戏开发与相关逆向分析的人来说并不陌生。Lua语言凭借其高效、简洁与跨平台等多种特性，一直稳立于游戏、移动APP等特定的开发领域中。
目前Lua主要有5.1、5.2、5.3共三个版本。5.1版本的Lua之所以目前仍然被广泛使用的原因之一，是由于另一个流行的项目LuaJit采用了该版本Lua的内核。单纯使用Lua来实现的项目中，5.2与5.3版本的Lua则更加流行。这里主要以Lua版本5.2为例，通过分析它生成的Luac字节码文件，完成Lua程序的初步分析，为以后更深入的反汇编、字节码置换与重组等技能打下基础。
**Lua与Luac**
Lua与Python一样，可以被定义为脚本型的语言，与Python生成pyc字节码一样，Lua程序也有自己的字节码格式luac。Lua程序在加载到内存中后，Lua虚拟机环境会将其编译为Luac（下面文中Luac与luac含义相同）字节码，因此，加载本地的Luac字节码与Lua源程序一样，在内存中都是编译好的二进制结构。
为了探究Luac的内幕，我们需要找到合适的资料与工具来辅助分析Luac文件。最好的资料莫过于Lua的源码，它包含了Lua相关知识的方方面面，阅读并理解Luac的构造与Lua虚拟机加载字节码的过程，便可以通透的了解Luac的格式。但这里并不打算这么做，而采取阅读第三方Lua反编译工具的代码。主要原因是：这类工具的代码往往更具有针对性，代码量也会少很多，分析与还原理解Luac字节码文件格式可以省掉不少的时间与精力。
**luadec** 与 **unlua**
是最流行的Luac反汇编与反编译工具，前者使用C++语言开发，后者使用Java语言，这两个工具都能很好的还原与解释Luac文件，但考虑到Lua本身采用C语言开发，并且接下来打算编写
**010 Editor** 编辑器的Luac.bt文件格式模板， **010 Editor**
的模板语法类似于C语言，为了在编码时更加顺利，这里分析时主要针对 **luadec** 。
**Luac文件格式**
一个Luac文件包含两部分：文件头与函数体。文件头格式定义如下：
    typedef struct {
        char signature[4];   //".lua"
        uchar version;
        uchar format;
        uchar endian;
        uchar size_int;
        uchar size_size_t;
        uchar size_Instruction;
        uchar size_lua_Number;
        uchar lua_num_valid;
        uchar luac_tail[0x6];
    } GlobalHeader;
第一个字段 **signature** 在lua.h头文件中有定义，它是 **LUA_SIGNATURE** ，取值为“33Lua"，其中， **33**
表示按键 ****。 **LUA_SIGNATURE** 作为Luac文件开头的4字节，它是Luac的Magic
Number，用来标识它为Luac字节码文件。Magic
Number在各种二进制文件格式中比较常见，通过是特定文件的前几个字节，用来表示一种特定的文件格式。
**version** 字段表示Luac文件的格式版本，它的值对应于Lua编译的版本，对于5.2版本的Lua生成的Luac文件，它的值为0x52。
**format**
字段是文件的格式标识，取值0代表official，表示它是官方定义的文件格式。这个字段的值不为0，表示这是一份经过修改的Luac文件格式，可能无法被官方的Lua虚拟机正常加载。
**endian** 表示Luac使用的字节序。现在主流的计算机的字节序主要有小端序 **LittleEndian** 与大端序 **BigEndian**
。这个字段的取值为1的话表示为 **LittleEndian** ，为0则表示使用 **BigEndian** 。
**size_int** 字段表示int类型所占的字节大小。 **size_size_t**
字段表示size_t类型所占的字节大小。这两个字段的存在，是为了兼容各种PC机与移动设备的处理器，以及它们的32位与64位版本，因为在特定的处理器上，这两个数据类型所占的字节大小是不同的。
**size_Instruction** 字段表示Luac字节码的代码块中，一条指令的大小。目前，指令 **Instruction**
所占用的大小为固定的4字节，也就表示Luac使用等长的指令格式，这显然为存储与反编译Luac指令带来了便利。
**size_lua_Number** 字段标识 **lua_Number** 类型的数据大小。 **lua_Number** 表示Lua中的
**Number** 类型，它可以存放整型与浮点型。在Lua代码中，它使用 **LUA_NUMBER**
表示，它的大小取值大小取决于Lua中使用的浮点数据类型与大小，对于单精度浮点来说， **LUA_NUMBER**
被定义为float，即32位大小，对于双精度浮点来说，它被定义为double，表示64位长度。目前，在macOS系统上编译的Lua，它的大小为64位长度。
**lua_num_valid** 字段通常为0，用来确定 **lua_Number** 类型能否正常的工作。
**luac_tail** 字段用来捕捉转换错误的数据。在Lua中它使用 **LUAC_TAIL** 表示，这是一段固定的字符串内容："
**x19x93rnx1an** "。
在文件头后面，紧接着的是函数体部分。一个Luac文件中，位于最上面的是一个顶层的函数体，函数体中可以包含多个子函数，子函数可以是嵌套函数、也可以是闭包，它们由常量、代码指令、Upvalue、行号、局部变量等信息组成。
在Lua中，函数体使用 **Proto** 结构体表示，它的声明如下：
    typedef struct {
        //header
        ProtoHeader header;
        //code
        Code code;
        // constants
        Constants constants;
        // functions
        Protos protos;
        // upvalues
        Upvaldescs upvaldescs;
        // string
        SourceName src_name;
        // lines
        Lines lines;
        // locals
        LocVars loc_vars;
        // upvalue names
        UpValueNames names;
    } Proto;
**ProtoHeader** 是 **Proto** 的头部分。它的定义如下：
    typedef struct {
        uint32 linedefined;
        uint32 lastlinedefined;
        uchar numparams;
        uchar is_vararg;
        uchar maxstacksize;
    } ProtoHeader;
**ProtoHeader** 在Lua中使用 **lua_Debug** 表示， **lua_Debug**
的作用是调试时提供函数的行号，函数与变量名等信息，只是它部分字段的信息在生成Luac字节码时，最终没有写入Luac文件中。 **linedefined**
与 **lastlinedefined** 是定义的两个行信息。 **numparams** 表示函数有几个参数。 **is_vararg**
表示参数是否为可变参数列表，例如这个函数声明：
    function f1(a1, a2, ...)
        ......
    end
这点与C语言类似，三个点“…”表示这是一个可变参数的函数。 **f1()** 在这里的 **numparams** 为2，并且 **is_vararg**
的值为1。
**maxstacksize** 字段指明当前函数的Lua栈大小。值为2的幂。
在 **ProtoHeader** 下面是函数的代码部分，这里使用 **Code** 表示。 **Code**
存放了一条条的Luac机器指令，每条指令是一个32位的整型大小。 **Code** 定义如下：
    struct Code {
        uint32 sizecode;
        uint32 inst[];
    } code;
**sizecode** 字段标识了接下来的指令条数。 **inst** 则存放了当前函数所有的指令，在Lua中，指令采用 **Instruction**
表示，它的定义如下：
    #define LUAI_UINT32unsigned int
    typedef LUAI_UINT32 lu_int32;
    typedef lu_int32 Instruction;
当 **LUAI_BITSINT** 定义的长度大于等于32时， **LUAI_UINT32** 被定义为unsigned
int，否则定义为unsigned long，本质上，也就是要求 **lu_int32** 的长度为32位。
接下来是 **Constants** ，它存放了函数中所有的常量信息。定义如下：
    typedef struct {
        uint32 sizek;
        Constant constant[];
    } Constants;
**sizek** 字段标识了接下来 **Constant** 的个数。 **constant** 则是 **Constant**
常量列表，存放了一个个的常量信息。的定义如下：
    typedef struct {
        LUA_DATATYPE const_type;
        TValue val;
    } Constant;
**LUA_DATATYPE** 是Lua支持的各种数据类型结构。如 **LUA_TBOOLEAN** 表示bool类型，使用 **lua_Val**
表示； **LUA_TNUMBER** 表示数值型，它可以是整型，使用 **lua_Integer**
表示，也可以是浮点型，使用lua_Number表示；LUA_TSTRING表示字符串。这些所有的类型信息使用const_type字段表示，大小为1字节。
TValue用于存放具体的数据内容。它的定义如下：
    typedef struct {
        union Value {
            //GCObject *gc;     /* collectable objects */
            //void *p;          /* light userdata */
            lua_Val val;        /* booleans */
            //lua_CFunction f;  /* light C functions */
            lua_Integer i;      /* integer numbers */
            lua_Number n;       /* float numbers */
        } value_;
    } TValue;
对于 **LUA_TBOOLEAN** ，它存放的值可以通过Lua中提供的宏 **bvalue** 来计算它的值。
对于 **LUA_TNUMBER** ，它存放的可能是整型，也可能是浮点型，可以直接通过 **nvalue**
宏自动进行类型判断，然后获取它格式化后的字符串值。对于Lua的5.3版本，对 **nvalue** 宏进行了改进，可以使用 **ivalue**
宏获取它的整型值，使用 **fltvalue** 宏来获取它的浮点值。
对于 **LUA_TSTRING**
，它存放的是字符串信息。可以使用rawtsvalue宏获取它的字符串信息。而写入Luac之后，这里的信息实则是64位的值存放了字符串的大小，并且紧跟着后面是字符串的内容。
接下来是 **Protos** ，它表示当前函数包含的子函数信息。定义如下：
    typedef struct(string level) {
        uint32 sizep;
        Proto proto[];
    } Protos
**sizep** 字段表示当前函数包含的子函数的数目。所谓子函数，指的是一个函数中包含的嵌套函数与闭包。如下面的代码：
    function Create(n) 
        local function foo1() 
            print(n) 