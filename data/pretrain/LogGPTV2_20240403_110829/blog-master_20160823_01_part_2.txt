```
### 四、非全库一致性备份举例 :  
知道pg_dump备份流程后, 可以想象如果数据库庞大, pg_dump备份的时间就会越长, 持锁就会越久. 这对有DDL需求的数据库来说, 可能是无法忍受的.  
因此您可能需要将pg_dump的粒度弄小一点, 不要一次备份整库, 例如同时备份有一致性需求或者依赖关系的数据表.  
举个例子 :  
```
#!/bin/bash    
# 环境变量    
PATH=$PATH:$HOME/bin    
export PATH    
export LANG=en_US.utf8    
export PGHOME=/opt/pgsql    
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib    
export DATE=`date +"%Y%m%d%H%M"`    
export PATH=$PGHOME/bin:$PATH:.    
# 程序变量    
TODAY=`date +%Y%m%d`    
EMAIL="PI:EMAIL"    
BAKBASEDIR="/database/pgbak"    
RESERVE_DAY=4    
HOST="10.10.10.10"    
PORT="1921"    
ROLE="postgres"    
# 不一致备份, 按单表进行.    
for DB in `psql -A -q -t -h $HOST -p $PORT -U $ROLE postgres -c "select datname from pg_database where datname not in ('postgres','template0','template1')"`    
do    
echo -e "------`date +%F\ %T`----Start Backup----IP:$HOST PORT:$PORT DBNAME:$DB TYPE:$BAKTYPE TO:$BAKBASEDIR------"    
for TABLE in `psql -A -q -t -h $HOST -p $PORT -U $ROLE $DB -c "select schemaname||'.'||tablename from pg_tables where schemaname !~ '^pg_' and schemaname <>'information_schema'"`    
do    
pg_dump -f ${BAKBASEDIR}/${DB}-${TABLE}-${TODAY}.dmp.ing -F c -t $TABLE --lock-wait-timeout=6000 -E UTF8 -h ${HOST} -p ${PORT} -U ${ROLE} -w ${DB}    
if [ $? -ne 0 ]; then    
echo -e "backup $HOST $PORT $DB $BAKBASEDIR error \n `date +%F%T` \n"|mutt -s "ERROR : PostgreSQL_backup " ${EMAIL}    
echo -e "------`date +%F\ %T`----Error Backup----IP:$HOST PORT:$PORT DBNAME:$DB TABLE:$TABLE TO:$BAKBASEDIR------"    
rm -f ${BAKBASEDIR}/${DB}-${TABLE}-${TODAY}.dmp.ing    
break    
fi    
mv ${BAKBASEDIR}/${DB}-${TABLE}-${TODAY}.dmp.ing ${BAKBASEDIR}/${DB}-${TABLE}-${TODAY}.dmp    
echo -e "------`date +%F\ %T`----Success Backup----IP:$HOST PORT:$PORT DBNAME:$DB TABLE:$TABLE TO:$BAKBASEDIR------"    
done    
done    
echo -e "find ${BAKBASEDIR}/${DB}_${TABLE}_${TODAY}.dmp* -daystart -mtime +${RESERVE_DAY} -delete"    
find ${BAKBASEDIR}/${DB}_${TABLE}_${TODAY}.dmp* -daystart -mtime +${RESERVE_DAY} -delete    
```
\# 这只是个简单的例子, 每次只备份1张表. 多次调用pg_dump.  
\# 实际使用时需要考虑业务逻辑, 确保业务数据一致性. 例如某一些有关联的表确保放在同一个pg_dump中导出. 多个-t talbename参数即可.  
\# 同时需要注意在设计时需要考虑到单表数据量不要太大, 应该考虑分区表. 否则该单表的DDL操作也会加大和pg_dump发生冲突的概率.  
\# 对于较大的数据库还是建议使用PITR物理增量备份方式. 这个后面会讲到.  
### 五、并行备份举例 :  
并行备份首先需要9.3的pg_dump, 服务端需要9.2以及以上支持pg_export_snapshot的版本. 因此并行备份也是一致性备份.  
使用并行备份需要n+1个连接, n指-j n指定的并行度, 1 是主连接也就是到处事务状态的连接, 其他连接导入这个事务状态, 进行到处.  
对于9.2以前的版本, 如果要并行备份来提高备份速度, 同时又要数据库一致性, 那么请在备份期间不要对备份对象执行dml操作.  
首先创建1000个测试表, 插入测试数据 :  
```
digoal=# do language plpgsql $$    
digoal$# declare    
digoal$#   v_sql text;    
digoal$# begin    
digoal$#   for i in 1..1000 loop    
digoal$#     v_sql := 'create table test_'||i||'(id int, info text)';    
digoal$#     execute v_sql;    
digoal$#     v_sql := 'insert into test_'||i||'(id,info) select generate_series(1,1000),''test''';    
digoal$#     execute v_sql;    
digoal$#   end loop;    
digoal$# end;    
digoal$# $$;    
```
备份, 并行度为10, 备份到./paralleldmp目录, 这个目录会自动创建 :  
```
pg93@db-172-16-3-33-> pg_dump -f ./paralleldmp -F d -C -E UTF8 --no-tablespaces -j 10 -h 127.0.0.1 -p 1999 -U postgres digoal    
```
输出每个表一个文件, 加上一个toc文件.  
还原测试 :  
首先删除digoal库.  
```
pg93@db-172-16-3-33-> psql    
psql (9.3devel)    
Type "help" for help.    
digoal=# \c postgres postgres    
You are now connected to database "postgres" as user "postgres".    
postgres=# drop database digoal;    
DROP DATABASE    
```
还原 :  
```
pg93@db-172-16-3-33-> pg_restore -C -h 127.0.0.1 -p 1999 -U postgres -d postgres -j 10 ~/paralleldmp     
```
检查是否还原 :  
```
pg93@db-172-16-3-33-> psql    
psql (9.3devel)    
Type "help" for help.    
digoal=# \dt    
             List of relations    
 Schema |      Name      | Type  |  Owner       
--------+----------------+-------+----------    
 public | pwd_dictionary | table | postgres    
 public | tbl_user       | table | postgres    
 public | test           | table | postgres    
 public | test_1         | table | postgres    
 public | test_10        | table | postgres    
 public | test_100       | table | postgres    
 public | test_1000      | table | postgres    
 public | test_101       | table | postgres    
 public | test_102       | table | postgres    
 public | test_103       | table | postgres    
 public | test_104       | table | postgres    
 public | test_105       | table | postgres    
 public | test_106       | table | postgres    
 public | test_107       | table | postgres    
 public | test_108       | table | postgres    
 public | test_109       | table | postgres    
 public | test_11        | table | postgres    
 public | test_110       | table | postgres    
 public | test_111       | table | postgres    
 public | test_112       | table | postgres    
 public | test_113       | table | postgres    
 public | test_114       | table | postgres    
 public | test_115       | table | postgres    
 public | test_116       | table | postgres    
 public | test_117       | table | postgres    
 public | test_118       | table | postgres    
 public | test_119       | table | postgres    
 public | test_12        | table | postgres    
 public | test_120       | table | postgres    
 public | test_121       | table | postgres    
 public | test_122       | table | postgres    
 public | test_123       | table | postgres    
 public | test_124       | table | postgres    
 public | test_125       | table | postgres    
... 略    
```
### 六、TOC文件定制举例 :  
定制TOC文件可以达到调整还原顺序, 开关还原对象的目的.  
首先要创建list. 使用pg_restore的 -l 参数. 从directory或dmp文件中创建list. 下面以目录归档为例, 创建list文件 :  
```
pg93@db-172-16-3-33-> pg_restore ~/paralleldmp -l >./toc.list    
```
以下为部分list文件截取 :  
分号为注释;  
```
pg93@db-172-16-3-33-> less toc.list     
;    
; Archive created at Mon May 27 08:58:40 2013    
;     dbname: digoal    
;     TOC Entries: 2026    
;     Compression: -1    
;     Dump Version: 1.12-0    
;     Format: UNKNOWN    
;     Integer: 4 bytes    
;     Offset: 8 bytes    
;     Dumped from database version: 9.3devel    
;     Dumped by pg_dump version: 9.3devel    
;    
;    
; Selected TOC Entries:    
;    
8744; 1262 26431 DATABASE - digoal postgres    
6; 2615 2200 SCHEMA - public postgres    
8745; 0 0 COMMENT - SCHEMA public postgres    
8746; 0 0 ACL - public postgres    
7; 2615 26432 SCHEMA - test postgres    
8747; 0 0 ACL - test postgres    
1176; 3079 12536 EXTENSION - plpgsql     
8748; 0 0 COMMENT - EXTENSION plpgsql     
1189; 1255 26433 FUNCTION public alter_role_pwd(name, text) postgres    
1190; 1255 26434 FUNCTION public create_role(name, text) postgres    
171; 1259 26435 TABLE public pwd_dictionary postgres    
172; 1259 26441 TABLE public tbl_user postgres    
173; 1259 26444 SEQUENCE public tbl_user_id_seq postgres    
8749; 0 0 SEQUENCE OWNED BY public tbl_user_id_seq postgres    
174; 1259 26446 TABLE public test postgres    
176; 1259 26457 TABLE public test_1 postgres    
185; 1259 26511 TABLE public test_10 postgres    
275; 1259 27051 TABLE public test_100 postgres    
1175; 1259 32451 TABLE public test_1000 postgres    
276; 1259 27057 TABLE public test_101 postgres    
277; 1259 27063 TABLE public test_102 postgres    
278; 1259 27069 TABLE public test_103 postgres    
```
截取一行解释一下 :  
```
8744; 1262 26431 DATABASE - digoal postgres    
8744 对应 dumpId    
1262 对应 catalogId.tableoid    
26431 对应 catalogId.oid    
DATABASE 对应 desc    
- 对应 te->namespace ? te->namespace : "-"    
digoal 对应 tag    
postgres 对应 owner    
```
以上TOC文件中entry的意思截取自代码如下 :  
src/bin/pg_dump/pg_backup_archiver.c  
```
void    
PrintTOCSummary(Archive *AHX, RestoreOptions *ropt)    
{    
        ArchiveHandle *AH = (ArchiveHandle *) AHX;    
        TocEntry   *te;    
        OutputContext sav;    
        char       *fmtName;    
        sav = SaveOutput(AH);    
        if (ropt->filename)    
                SetOutput(AH, ropt->filename, 0 /* no compression */ );    
        ahprintf(AH, ";\n; Archive created at %s", ctime(&AH->createDate));    
        ahprintf(AH, ";     dbname: %s\n;     TOC Entries: %d\n;     Compression: %d\n",    
                         AH->archdbname, AH->tocCount, AH->compression);    
        switch (AH->format)    
        {    
                case archFiles:    
                        fmtName = "FILES";    
                        break;    
                case archCustom:    
                        fmtName = "CUSTOM";    
                        break;    
                case archTar:    
                        fmtName = "TAR";    
                        break;    
                default:    
                        fmtName = "UNKNOWN";    
        }    
        ahprintf(AH, ";     Dump Version: %d.%d-%d\n", AH->vmaj, AH->vmin, AH->vrev);    
        ahprintf(AH, ";     Format: %s\n", fmtName);    
        ahprintf(AH, ";     Integer: %d bytes\n", (int) AH->intSize);    
        ahprintf(AH, ";     Offset: %d bytes\n", (int) AH->offSize);    
        if (AH->archiveRemoteVersion)    
                ahprintf(AH, ";     Dumped from database version: %s\n",    
                                 AH->archiveRemoteVersion);    
        if (AH->archiveDumpVersion)    
                ahprintf(AH, ";     Dumped by pg_dump version: %s\n",    
                                 AH->archiveDumpVersion);    
        ahprintf(AH, ";\n;\n; Selected TOC Entries:\n;\n");    
        /* We should print DATABASE entries whether or not -C was specified */    
        ropt->createDB = 1;    
        for (te = AH->toc->next; te != AH->toc; te = te->next)    
        {    
                if (ropt->verbose || _tocEntryRequired(te, ropt, true) != 0)    
                        ahprintf(AH, "%d; %u %u %s %s %s %s\n", te->dumpId,    
                                         te->catalogId.tableoid, te->catalogId.oid,    
                                         te->desc, te->namespace ? te->namespace : "-",    
                                         te->tag, te->owner);    
                if (ropt->verbose && te->nDeps > 0)    