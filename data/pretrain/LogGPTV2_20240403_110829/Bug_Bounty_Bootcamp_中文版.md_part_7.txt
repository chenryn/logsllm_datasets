表格1-1：三个漏洞赏金计划的比较：HackerOne、Facebook和GitHub。
```{=html}
```
  -------------------------------------------------------------------------------------------------------------------------------------------
  **Program**    **Asset type** **In scope**                                                                **Payout amount**  **Response
                                                                                                                               time**
  -------------- -------------- --------------------------------------------------------------------------- ------------------ --------------
  HackerOne      Social site    \                                                   \$500--\$15,000+   Fast. Average
                                https://api.hackerone.com\                                                                     time to
                                \*.vpn.hackerone.net\                                                                          response is 5
                                [https://www.hackerone.com](https://www.hackerone.com){.LinkURL}\                              hours. Average
                                And more assets . . .\                                                                         time to triage
                                Any vulnerability except exclusions are in scope.                                              is 15 hours.
  Facebook       Social site,   Instagram\                                                                  \$500 minimum      Based on my
                 nonsocial      Internet.org / Free Basics\                                                                    experience,
                 site, mobile   Oculus\                                                                                        pretty fast!
                 site, IoT, and Workplace\                                                                                     
                 source code    Open source projects by Facebook\                                                              
                                WhatsApp\                                                                                      
                                Portal\                                                                                        
                                FBLite\                                                                                        
                                Express Wi-Fi\                                                                                 
                                Any vulnerability except exclusions are in scope.                                              
  GitHub         Social site    [https://blog.github.com/](https://blog.github.com/){.LinkURL}\             \$617--\$30,000    Fast. Average
                                [https://community.github.com/](https://community.github.com/){.LinkURL}\                      time to
                                [http://resources.github.com/](http://resources.github.com/){.LinkURL}\                        response is 11
                                And more assets . . .\                                                                         hours. Average
                                Use of known-vulnerable software.\                                                             time to triage
                                Clickjacking a static site.\                                                                   is 23 hours.
                                Including HTML in Markdown content.\                                                           
                                Leaking email addresses via *.patch* links.\                                                   
                                And more issues . . .                                                                          
  -------------------------------------------------------------------------------------------------------------------------------------------
```{=html}
```
:::
[]{#c02.xhtml}
::: section
# [ [ ]{#c02.xhtml#Page_15 .pagebreak title="15"} 2 ]{.ChapterNumber} [ Sustaining Your Success ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
Even if you understand the technical information in this book, you may
have difficulty navigating the nuances of bug bounty programs. Or you
might be struggling to actually locate legitimate bugs and aren't sure
why you're stuck. In this chapter, we'll explore some of the factors
that go into making a successful bug bounty hunter. We'll cover how to
write a report that properly describes your findings to the security
team, build lasting relationships with the organizations you work with,
and overcome obstacles during your search for bugs.
即使您理解了本书中的技术信息，您可能会在利用漏洞赏金计划的微妙之处方面遇到困难。或者您可能正在努力实际定位合法漏洞，却不确定为什么会陷入困境。在本章中，我们将探讨成功的漏洞赏金猎人所需要具备的一些因素。我们将介绍如何编写报告，将您的发现正确地描述给安全团队，与您合作的组织建立持久的关系，并在寻找漏洞的过程中克服障碍。
## [ ]{#c02.xhtml#Page_16 .pagebreak title="16"} Writing a Good Report {#c02.xhtml#h1-123456c01-0001}
A bug bounty hunter's job isn't just finding vulnerabilities; it's also
explaining them to the organization's security team. If you provide a
well-written report, you'll help the team you're working with reproduce
the exploit, assign it to the appropriate internal engineering team, and
fix the issue faster. The faster a vulnerability is fixed, the less
likely malicious hackers are to exploit it. In this section, I'll break
down the components of a good vulnerability report and introduce some
tips and tricks I've learned along the way.
一个漏洞赏金猎人的工作不仅是寻找漏洞，而且还需要向组织的安全团队解释它们。如果您提供一个写得很好的报告，您将帮助您正在与之合作的团队重现漏洞、将其分配给适当的内部工程团队并更快地修复问题。漏洞被解决得越快，恶意黑客利用漏洞的可能性就越小。在本节中，我将分解一个好的漏洞报告的组成部分，并介绍我学到的一些技巧和诀窍。
### Step 1: Craft a Descriptive Title {#c02.xhtml#h2-123456c01-0001}
The first part of a great vulnerability report is always a descriptive
title. Aim for a title that sums up the issue in one sentence. Ideally,
it should allow the security team to immediately get an idea of what the
vulnerability is, where it occurred, and its potential severity. To do
so, it should answer the following questions: What is the vulnerability
you've found? Is it an instance of a well-known vulnerability type, such
as IDOR or XSS? Where did you find it on the target application?
一份良好的漏洞报告的第一部分总是一个描述性的标题。标题应该简洁概括问题，并尽可能的让安全团队立刻明确漏洞所在，其影响和潜在程度。为了做到这一点，它应该回答以下问题：你发现的漏洞是什么？它是否属于IDOR或XSS等已知漏洞类型？在目标应用程序的哪里发现它？
For example, instead of a report title like "IDOR on a Critical
Endpoint," use one like "IDOR on *https://example.com/change_password*
Leads to Account Takeover for All Users." Your goal is to give the
security engineer reading your report a good idea of the content you'll
discuss in the rest of it.
例如，可以使用"https://example.com/change_password上的IDOR导致所有用户的账户接管"这样的报告标题，而非"关键端点上的IDOR"。您的目标是让阅读报告的安全工程师对您接下来要讨论的内容有一个良好的了解。
### Step 2: Provide a Clear Summary {#c02.xhtml#h2-123456c01-0002}
Next, provide a report summary. This section includes all the relevant
details you weren't able to communicate in the title, like the HTTP
request parameters used for the attack, how you found it, and so on.
接下来，提供报告摘要。此部分包括所有相关的细节，您在标题中无法传达，比如用于攻击的HTTP请求参数，您是如何发现它的等等。
Here's an example of an effective report summary:
以下是一份有效报告摘要的例子：
> The *https://example.com/change_password* endpoint takes two POST body
> parameters: `       user_id      ` and `       new_password      ` . A
> POST request to this endpoint would change the password of user
> `       user_id      ` to `       new_password      ` . This endpoint
> is not validating the `       user_id      ` parameter, and as a
> result, any user can change anyone else's password by manipulating the
> `       user_id      ` parameter.
>
> https://example.com/change_password端点需要两个POST请求体参数：user_id和new_password。对此端点的POST请求将把用户user_id的密码更改为new_password。此端点未验证user_id参数，因此任何用户都可以通过操作user_id参数来更改其他任何人的密码。
A good report summary is clear and concise. It contains all the
information needed to understand a vulnerability, including what the bug
is, where the bug is found, and what an attacker can do when it's
exploited.
一个好的报告摘要应该清晰简明。它包含了理解某个漏洞所需的所有信息：包括bug是什么，它在哪里被发现，以及攻击者在利用该漏洞时会做些什么。
### Step 3: Include a Severity Assessment {#c02.xhtml#h2-123456c01-0003}
Your report should also include an honest assessment of the bug's
severity. In addition to working with you to fix vulnerabilities,
security teams have other responsibilities to tend to. Including a
severity assessment will help them prioritize which vulnerabilities to
fix first, and ensure that they take care of critical vulnerabilities
right away.
你的报告还应包括漏洞的严重程度诚恳的评估。除了与你合作修复漏洞外，安全团队还有其他职责需要注意。包括漏洞严重性评估将有助于他们优先处理哪些漏洞，并确保立即处理重要漏洞。
[ ]{#c02.xhtml#Page_17 .pagebreak title="17"} You could use the
following scale to communicate severity:
您可以使用以下标尺来沟通严重程度：
**Low severity**
低严重性
The bug doesn't have the potential to cause a lot of damage. For
example, an open redirect that can be used only for phishing is a
low-severity bug.
这个漏洞没有潜在的能力造成很大的损害。例如，只能用于网络钓鱼的开放重定向是低严重性漏洞。
**Medium severity**
中等严重性
The bug impacts users or the organization in a moderate way, or is a
high-severity issue that's difficult for a malicious hacker to exploit.
The security team should focus on high- and critical-severity bugs
first. For example, a cross-site request forgery (CSRF) on a sensitive
action such as password change is often considered a medium-severity
issue.
漏洞对用户或组织的影响较为中等，或者是一个高严重性问题，不易被恶意黑客利用。安全团队应该首先关注高和严重的漏洞。例如，对于敏感操作（如密码更改）的跨站点请求伪造（CSRF）通常被视为中等严重性问题。
**High severity**
高严重性
The bug impacts a large number of users, and its consequences can be
disastrous for these users. The security team should fix a high-security
bug as soon as possible. For example, an open redirect that can be used
to steal OAuth tokens is a high-severity bug.
该漏洞影响大量用户，其后果可能对这些用户造成灾难性的影响。安全团队应该尽快修复高安全性漏洞。例如，一个可用于窃取OAuth令牌的开放重定向是一种高危漏洞。
**Critical severity**
重要性严重
The bug impacts a majority of the user base or endangers the
organization's core infrastructure. The security team should fix a
critical-severity bug right away. For example, a SQL injection leading
to remote code execution (RCE) on the production server will be
considered a critical issue.
Bug影响到大多数用户或危及组织的核心基础设施。安全团队应立即修复关键性缺陷。例如，在生产服务器上导致远程代码执行（RCE）的SQL注入将被视为关键问题。
Study the *Common Vulnerability Scoring System* *(* *CVSS* *)* at
[https://www.first.org/cvss/](https://www.first.org/cvss/){.LinkURL} for
a general idea of how critical each type of vulnerability is. The CVSS
scale takes into account factors such as how a vulnerability impacts an
organization, how hard the vulnerability is to exploit, and whether the
vulnerability requires any special privileges or user interaction to
exploit.
学习通用漏洞评分系统（CVSS）https://www.first.org/cvss/
以了解每种漏洞的严重程度。CVSS评分考虑了漏洞对组织的影响、漏洞的利用难度以及漏洞是否需要特殊权限或用户交互才能利用等因素。
Then, try to imagine what your client company cares about, and which
vulnerabilities would present the biggest business impact. Customize
your assessment to fit the client's business priorities. For example, a
dating site might find a bug that exposes a user's birth date as
inconsequential, since a user's age is already public information on the
site, while a job search site might find a similar bug significant,
because an applicant's age should be confidential in the job search
process. On the other hand, leaks of users' banking information are
almost always considered a high-severity issue.
那么，试着想象一下你的客户公司关心什么，以及哪些漏洞可能会对业务产生最大的影响。将您的评估定制以适应客户的业务优先级。例如，约会网站可能会发现暴露用户出生日期的漏洞并不重要，因为用户的年龄已经是公共信息，而求职网站可能会发现类似的漏洞非常重要，因为申请人的年龄应该在求职过程中保密。另一方面，用户银行信息的泄露几乎总是被认为是高度严重的问题。
If you're unsure which severity rating your bug falls into, use the
rating scale of a bug bounty platform. For example, Bugcrowd's rating
system takes into account the type of vulnerability and the affected
functionality (
[https://bugcrowd.com/vulnerability-rating-taxonomy/](https://bugcrowd.com/vulnerability-rating-taxonomy/){.LinkURL}
), and HackerOne provides a severity calculator based on the CVSS scale
(
[https://docs.hackerone.com/hackers/severity.html](https://docs.hackerone.com/hackers/severity.html){.LinkURL}
).
如果您不确定您的漏洞属于哪个严重级别，请使用漏洞赏金平台的评级标准。例如，Bugcrowd的评估系统考虑到漏洞类型和受影响的功能（https://bugcrowd.com/vulnerability-rating-taxonomy/），而HackerOne则基于CVSS标准提供了一个严重性计算器（https://docs.hackerone.com/hackers/severity.html）。
You could list the severity in a single line, as follows:
你可以将严重程度列在单行中，如下所示：
> Severity of the issue: High
>
> 问题的严重程度：高
[ ]{#c02.xhtml#Page_18 .pagebreak title="18"} Providing an accurate
assessment of severity will make everyone's lives easier and contribute
to a positive relationship between you and the security team.
提供准确的严重性评估将使每个人的生活更容易，并促进您与安全团队之间的积极关系。
### Step 4: Give Clear Steps to Reproduce {#c02.xhtml#h2-123456c01-0004}
Next, provide step-by-step instructions for reproducing the
vulnerability. Include all relevant setup prerequisites and details you
can think of. It's best to assume the engineer on the other side has no
knowledge of the vulnerability and doesn't know how the application
works.
请提供重现漏洞的逐步说明。包括所有相关的设置前提条件和您可以想到的细节。最好假设另一边的工程师不知道漏洞，也不知道应用程序如何工作。
For example, a merely okay report might include the following steps to
reproduce:
例如，一个仅仅还可以的报告可能包括以下重现步骤：
1.  Log in to the site and visit *https://example.com/change_password* .
2.  Click the **Change Password** button.
3.  Intercept the request, and change the `       user_id      `
    parameter to another user's ID.
Notice that these steps aren't comprehensive or explicit. They don't
specify that you need two test accounts to test for the vulnerability.
They also assume that you have enough knowledge about the application
and the format of its requests to carry out each step without more
instructions.
请注意，这些步骤不是全面或明确的。它们没有说明你需要两个测试帐户来测试漏洞。它们还假定你已经具有足够的关于应用程序和其请求格式的知识，可以在没有更多指示的情况下执行每个步骤。