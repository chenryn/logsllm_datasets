```css
.container {
    box-sizing: border-box;
}
```
See also: [Box-sizing](https://developer.mozilla.org/en-US/docs/Web/CSS/Box-sizing)
### Visibility 
```css
.invisible-elements {
    visibility: hidden;
}
```
See also: [Visibility](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility)
### Auto keyword
```css
div {
    margin: auto;
}
```
See also: [Margin](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)
### Overflow
```css
.small-block {
    overflow: scroll;
}
```
See also: [Overflow](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow)
CSS Animation {.cols-5}
---------
### Shorthand {.col-span-5 .secondary}
|              | name     | duration | timing-function | delay   | count      | direction           | fill-mode | play-state |
|--------------|----------|----------|-----------------|---------|------------|---------------------|-----------|------------|
| `animation:` | `bounce` | `300ms`  | `linear`        | `100ms` | `infinite` | `alternate-reverse` | `both`    | `reverse`  |
|              | name     | duration | timing-function | delay   | count      | direction           | fill-mode | play-state |
### Properties {.row-span-2 .col-span-2}
| Property                     | Value                                                  |
|------------------------------|--------------------------------------------------------|
| `animation:`                 | _(shorthand)_                                          |
| `animation-name:`            | \                                                |
| `animation-duration:`        | \ms                                              |
| `animation-timing-function:` | ease / linear / ease-in / ease-out / ease-in-out       |
| `animation-delay:`           | \ms                                              |
| `animation-iteration-count:` | infinite / \                                   |
| `animation-direction:`       | normal / reverse / alternate / alternate-reverse       |
| `animation-fill-mode:`       | none / forwards / backwards / both / initial / inherit |
| `animation-play-state:`      | normal / reverse / alternate / alternate-reverse       |
{.left-text}
See also: [Animation](https://developer.mozilla.org/en-US/docs/Web/CSS/animation)
### Example {.col-span-3}
```css
/* @keyframes duration | timing-function | delay |
   iteration-count | direction | fill-mode | play-state | name */
animation: 3s ease-in 1s 2 reverse both paused slidein;
/* @keyframes duration | timing-function | delay | name */
animation: 3s linear 1s slidein;
/* @keyframes duration | name */
animation: 3s slidein;
animation: 4s linear 0s infinite alternate move_eye;
animation: bounce 300ms linear 0s infinite normal;
animation: bounce 300ms linear infinite;
animation: bounce 300ms linear infinite alternate-reverse;
animation: bounce 300ms linear 2s infinite alternate-reverse forwards normal;
```
### Javascript Event {.col-span-3}
```js
.one('webkitAnimationEnd oanimationend msAnimationEnd animationend')
```
CSS Flexbox {.cols-2}
-------
### Simple example
```css
.container {
  display: flex;
}
```
```css
.container > div {
  flex: 1 1 auto;
}
```
### Container {.row-span-2}
.container {
```css
  display: flex;
  display: inline-flex;
```
```css
  flex-direction: row;            /* ltr - default */
  flex-direction: row-reverse;    /* rtl */
  flex-direction: column;         /* top-bottom */
  flex-direction: column-reverse; /* bottom-top */
```
```css
  flex-wrap: nowrap; /* one-line */
  flex-wrap: wrap;   /* multi-line */
```
```css
  align-items: flex-start; /* vertical-align to top */
  align-items: flex-end;   /* vertical-align to bottom */
  align-items: center;     /* vertical-align to center */
  align-items: stretch;    /* same height on all (default) */
```
```css
  justify-content: flex-start;    /* [xxx        ] */
  justify-content: center;        /* [    xxx    ] */
  justify-content: flex-end;      /* [        xxx] */
  justify-content: space-between; /* [x    x    x] */
  justify-content: space-around;  /* [ x   x   x ] */
  justify-content: space-evenly;  /* [  x  x  x  ] */
```
}
### Child
.container > div {
```css
  /* This: */
  flex: 1 0 auto;
  /* Is equivalent to this: */
  flex-grow: 1;
  flex-shrink: 0;
  flex-basis: auto;
```
```css
  order: 1;
```
```css
  align-self: flex-start;  /* left */
  margin-left: auto;       /* right */
```
}
CSS Flexbox Tricks
--------------
### Vertical center
```css
.container {
  display: flex;
}
.container > div {
  width: 100px;
  height: 100px;
  margin: auto;
}
```
### Vertical center (2)
```css
.container {
  display: flex;
  /* vertical */
  align-items: center; 
  /* horizontal */
  justify-content: center;
}
```
### Reordering
```css
.container > .top {
 order: 1;
}
.container > .bottom {
 order: 2;
}
```
### Mobile layout
```css
.container {
  display: flex;
  flex-direction: column;
}
.container > .top {
  flex: 0 0 100px;
}
.container > .content {
  flex: 1 0 auto;
}
```
A fixed-height top bar and a dynamic-height content area.
### Table-like {.col-span-2}
```css
.container {
  display: flex;
}
/* the 'px' values here are just suggested percentages */
.container > .checkbox { flex: 1 0 20px; }
.container > .subject  { flex: 1 0 400px; }
.container > .date     { flex: 1 0 120px; }
```
This creates columns that have different widths, but size accordingly according
to the circumstances.
### Vertical
```css
.container {
  align-items: center;
}
```
Vertically-center all items.
### Left and right {.col-span-2}
```css
.menu > .left  { align-self: flex-start; }
.menu > .right { align-self: flex-end; }
```
CSS Grid Layout
------------
### Grid Template Columns
```css
#grid-container {
    display: grid;
    width: 100px;
    grid-template-columns: 20px 20% 60%;
}
```
### fr Relative Unit
```css
.grid {
    display: grid;
    width: 100px;
    grid-template-columns: 1fr 60px 1fr;
}
```
### Grid Gap
```css
/*The distance between rows is 20px*/
/*The distance between columns is 10px*/
#grid-container {
    display: grid;
    grid-gap: 20px 10px;
}
```
### CSS Block Level Grid
```css
#grid-container {
    display: block;
}
```
### CSS grid-row
CSS syntax: 
- grid-row: grid-row-start / grid-row-end;
#### Example
```css
.item {
    grid-row: 1 / span 2;
}
```
### CSS Inline Level Grid
```css
#grid-container {
    display: inline-grid;
}
```
### minmax() Function
```css {.wrap}
.grid {
    display: grid;
    grid-template-columns: 100px minmax(100px, 500px) 100px; 
}
```
### grid-row-start & grid-row-end
CSS syntax: 
- grid-row-start: auto|row-line;
- grid-row-end: auto|row-line|span n;
#### Example
```css
grid-row-start: 2;
grid-row-end: span 2;
```
### CSS grid-row-gap
```css
grid-row-gap: length;
```
Any legal length value, like px or %. 0 is the default value
### CSS grid-area
```css
.item1 {
    grid-area: 2 / 1 / span 2 / span 3;
}
```
### Justify Items
```css
#container {
    display: grid;
    justify-items: center;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px;
}
```
### CSS grid-template-areas
```css
.item {
    grid-area: nav;
}
.grid-container {
    display: grid;
    grid-template-areas:
    'nav nav . .'
    'nav nav . .';
}
```
### Justify Self
```css
#grid-container {
    display: grid;
    justify-items: start;
}
.grid-items {
    justify-self: end;
}
```
The grid items are positioned to the right (end) of the row.
### Align Items
```css
#container {
    display: grid;
    align-items: start;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-gap: 10px;
}
```
CSS Dynamic Content
------------
### Variable
Define CSS Variable
```css
:root {
  --first-color: #16f;
  --second-color: #ff7;
}
```
Variable Usage
```css
#firstParagraph {
  background-color: var(--first-color);
  color: var(--second-color);
}
```
See also: [CSS Variable](https://developer.mozilla.org/en-US/docs/Web/CSS/--*)
### Counter
```css
/* Set "my-counter" to 0 */
counter-set: my-counter;
```
```css
/* Increment "my-counter" by 1 */
counter-increment: my-counter;
```
```css
/* Decrement "my-counter" by 1 */
counter-increment: my-counter -1;
```
```css
/* Reset "my-counter" to 0 */
counter-reset: my-counter;
```
See also: [Counter set](https://developer.mozilla.org/en-US/docs/Web/CSS/counter-set)
### Using counters
```css
body { counter-reset: section; }
h3::before {
  counter-increment: section; 
  content: "Section." counter(section);
}
```
```css
ol {
  counter-reset: section;   
  list-marker-type: none;
}
li::before {
  counter-increment: section;
  content: counters(section, ".") " "; 
}
```
Css 3 tricks
------------
### Scrollbar smooth
```css
html {
    scroll-behavior: smooth;
}
```
[Click me](#css-getting-started), the page will scroll smoothly to Getting started
Also see {.cols-1}
---------
- [CSS selectors cheatsheet](https://frontend30.com/css-selectors-cheatsheet/) _(frontend30.com)_
- [MDN: Using CSS flexbox](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes)
- [Ultimate flexbox cheatsheet](http://www.sketchingwithcss.com/samplechapter/cheatsheet.html)
- [GRID: A simple visual cheatsheet](http://grid.malven.co/)
- [CSS Tricks: A Complete Guide to Grid](https://css-tricks.com/snippets/css/complete-guide-grid/)
- [Browser support](https://caniuse.com/#feat=css-grid)