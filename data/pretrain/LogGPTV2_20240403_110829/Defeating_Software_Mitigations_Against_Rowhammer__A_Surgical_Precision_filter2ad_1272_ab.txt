found several DIMMs behaving like rank-mirrored devices when viewed from
software, a fact signiﬁcantly aﬀecting the eﬀectiveness of Rowhammer. While
this information is public, previous work has mostly ignored it [17,22].
In addition to standard-compliant rank mirroring, other custom address
remappings can exist. During our research we discovered one particular on-
DIMM remapping among several particularly vulnerable DIMMs: address pin
A3 is XORed into bits A2 and A1. We came across this after discovering peri-
odic sequences of 8 row pairs either exhibiting many bit ﬂips or none at all on
some very vulnerable DIMMs. That lead us to try linear combinations of the 4
least signiﬁcant DRAM bits until we consistently triggered bit ﬂips over all row
pairs—and therefore reverse-engineered the remapping formula.
We remark that on-DIMM remappings can be arbitrarily composed, and we
found several DIMMs where both rank mirroring and the custom remapping was
in eﬀect, as we will show in Sect. 5.
Eﬃciency Considerations. An issue worth addressing is the eﬃcient map-
ping of a physical memory area to DRAM address space—computing the DRAM
addresses of all memory words in the area. Most generally, one would have to
translate the addresses of every word, since there are no contiguity guarantees.
To address this, we deﬁne a property named mapping granularity, which spec-
iﬁes the maximum length of an aligned physically-contiguous area of memory
that is guaranteed to be contiguous in DRAM address space for a particular
combination of memory controller and chain of remappings, taking into account
any interaction between them. This mapping granularity is often much larger
than a memory word, reducing the number of required computations by several
orders of magnitude.
Defeating Software Mitigations Against Rowhammer
55
3.2 Implementation
We implemented RAMSES as a standalone C library in less than 2000 lines
of code. We provide mapping functions for Intel Sandy Bridge, Ivy Bridge and
Haswell memory controllers based on functions reverse engineered in previous
work [17]. Support for DDR4 memory controllers, as well as AMD CPUs is a
work in progress. We provide DDR rank mirroring and the on-DIMM remap-
pings discussed in the previous section, with the possibility to easily add new
remappings once they are discovered.
4 Applications of RAMSES
In this section we discuss applications of the end-to-end memory addressing
models provided by RAMSES. We ﬁrst look at a Rowhammer test tool and
proﬁler, which we will compare with the state of the art in Sect. 5 as well as use it
to evaluate existing defenses. We then brieﬂy discuss the output of our proﬁler—
ﬂip tables. Finally, we present an attack simulator to use the proﬁler’s output to
quickly evaluate the feasibility of Rowhammer attacks. These applications, along
with miscellaneous small related utilities are released together as Hammertime.
4.1 Hammering with RAMSES
Targeting. The most used hammering technique thus far, double-sided
Rowhammer, relies on alternately activating two “target” rows situated on each
side of a “victim” row. Given that modern DRAM modules have up to millions of
individual rows, target selection becomes important. We have already discussed
how present attacks use heuristics to select targets in Sect. 2.3. A quite diﬀerent
strategy is to assume (near-)perfect knowledge about all aspects of the memory
system, which in our case is provided by RAMSES. Armed with such a mapping
function, a Rowhammer test tool can accurately select both target and victim
rows, minimizing the search space to precisely target the DRAM region of inter-
est. A beneﬁt of such precision, aside from the obvious speedup, is the ability
to study Rowhammer and argue about the results in terms of actual physical
DRAM geometry entirely from software. In particular, Rowhammer itself can be
used as a side-channel to reverse-engineer memory mappings, a method we our-
selves used to pin down the non-standard DRAM address remapping discussed
in Sect. 3.1. This opens the door to commodity hardware being used for rapid
data collection about diﬀerent aspects of Rowhammer. Given that the same com-
modity hardware is also likely to be targeted by a Rowhammer-based exploit,
making a fast and complete test is useful in assessing the vulnerability of a given
system.
Preparation and Hammering. While our proﬁler is designed to work with
arbitrary memory allocations, some options are provided that can increase
eﬀectiveness or ﬁdelity. Namely, memory locking informs the kernel to keep
56
A. Tatar et al.
page allocations unchanged throughout the lifetime of the buﬀer. This prevents
swapout or copy-on-write events from changing page mappings, which would
invalidate target selections. Huge Pages can allocate the buﬀer using huge
page sizes (2 MiB or 1 GiB on x86 64). This forces the buﬀer to be more contigu-
ous in physical memory, potentially increasing the number of targetable rows.
In addition, huge pages are also implicitly locked.
Because sandboxing or program privileges are no issue in implementing our
proﬁler, we are free to make use of hardware features to bypass the cache, which
on x86 is the unprivileged native instruction clflush. The number of reads for a
hammer attempt is automatically calibrated at runtime to saturate the memory
bus for a set number of refresh intervals.
4.2 Flip Tables
To keep the experimental data obtained from the proﬁler reusable, we keep all
addresses used in output in a format as close to the hardware as possible, namely
DRAM addresses. This allows examining the eﬀects of Rowhammer on various
DRAM modules at the hardware level, regardless of the particularities of the
system the data was collected on. Proﬁler output is a sequence of hammerings,
each consisting of a set of target addresses along with bit ﬂip locations in the
victim rows, if any occur. We collect this output in a machine-readable plain
text ﬁle we term the ﬂip table. We release all ﬂips tables for the DIMMs we
experimented with as part of Hammertime and will further maintain a repository
so that others can contribute additional ﬂip tables.
4.3 Attack Simulator
Design. The goal of simulation is to provide a lightweight alternative to full
program execution for evaluating the feasibility of Rowhammer-based attacks.
What exactly constitutes a useful bit ﬂip is up to each individual attack to
decide. A page table entry (PTE) attack could, for example, be interested in
0 → 1 bit ﬂips at page oﬀsets corresponding to read/write ﬂags in PTEs. A user
of the Hammertime simulator would specify bit ﬂip positions of interest and
receive realistic estimates of success rate and average time to ﬁnd the ﬁrst bit
ﬂip for a large number of DIMMs. At the same time, the simulator allows for
more complex attack plans if desired.
Implementation. To make the simulation interface user-friendly and easily
extensible we implemented it in Python. It consists of two programming inter-
faces: a lower-level view of ﬂip tables, allowing their contents to be programati-
cally accessed, and a higher-level exploit simulation interface which presents bit
ﬂips as they would occur in software: as bit oﬀsets within a virtual page.
Published Rowhammer attacks [7,9,19–22] rely on ﬂipping bits at precise
memory locations for successful exploitation. To achieve this goal, attacks have
an initial “templating” phase where they look for vulnerable memory pages with
Defeating Software Mitigations Against Rowhammer
57
Listing 1.1. Implementation of Dedup Est Machina in Hammertime’s simulator
class D e d u p E s t M a c h i n a ( e s t i m a t e . E x p l o i t M o d e l ):
def c h e c k _ p a g e ( self , vpage ):
useful = [
x for x in vpage . p u l l d o w n s
if x . p a g e _ o f f s e t % 8 == 0 # Bits 0 -7
or ( x . p a g e _ o f f s e t % 8 == 1 and ( x . mask & 0 x7 )) # Bits 8 -10
or x . p a g e _ o f f s e t % 8 == 7 # Bits 56 -63
or ( x . p a g e _ o f f s e t % 8 == 6 and ( x . mask & 0 xf0 )) # Bits 52 -55
]
return len ( useful ) > 0
a bit ﬂip at the desired oﬀset within a page. The victim process (or kernel) is then
coerced into storing data structures within these pages. After that, the attacker
uses Rowhammer again in order to cause a bit ﬂip in the target data struc-
tures. Overlooking the problem of actually triggering Rowhammer, the simula-
tion interface provides a fast way of evaluating the prevalence of “good” victim
pages across a huge number of memory conﬁgurations.
An exploit is represented in the simulator by an Exploit Model. In the simplest
case, an Exploit Model provides a function answering one yes-or-no question: is
a given memory page useful to exploit. An example of an attack implemented as
exploit model can be seen in Listing 1.1. More advanced victim selection strate-
gies are also supported by providing hooks at single hammering or ﬂiptable
granularity.
5 Evaluation
We tested Hammertime on two identical systems with the following conﬁgura-
tion:
CPU: Intel Core i7-4790 @ 3.6 GHz
Motherboard: Asus H97M-E
Memory: DDR3; 2 channels, 4 slots, max 32 GiB
Kernel: Linux 4.4.22
The systems network-boot from a “golden” image and discard all local ﬁlesys-
tem changes on power oﬀ, ensuring that no state is kept between proﬁling runs
and that each test starts from a known clean state. This also prevents accidental
persistent ﬁlesystem corruption due to Rowhammer—a valid concern considering
the workloads involved.
We tested a total of 33 memory setups: 12 single DRAM modules and 21
dual-channel sets, of sizes ranging from 4 to 16 GiB. Out of these, 14 exhib-
ited Rowhammer bit ﬂips during an initial test run and were selected for fur-
ther experimentation. The vulnerable memory setups in question are detailed in
Table 1. These initial results show that on DIMMs that we looked at, only 42%
are vulnerable when proﬁling is performed from the CPU, a contrast with 85%
that is reported in the original Rowhammer paper which uses an FPGA plat-
form for testing [13]. Given that realistic attack scenarios are performed from the
CPU, 42% is more representative of the number of vulnerable DDR3 systems.
58
A. Tatar et al.
Table 1. Detailed information on the set of DIMMs vulnerable to Rowhammer used
for evaluating Hammertime and generating its ﬂip tables.
Brand
Serial Number
ID Size
[GiB]
Freq.
[MHz]
Ch. Ranks
/DIMM
Rank
mirror
DIMM
remap
Corsair
Crucial
Geil
GSkill
Hynix
Integral
PNY
V7
8
8
8
GPB38GB1866C9DC
CML16GX3M2C1600C9
CMD16GX3M2A1600C9
CML8GX3M2A1600C9W
A1 16
A2 16
A3
8
A4
CMY8GX3M2C1600C9R
BLS2C4G3D1609ES2LX0CEU B1
C1
D1
E1
E2
F1
G1
H1
I1
J1
F3-14900CL8D-8GBXM
MD8GK2D31600NHS-Z
F3-14900CL9D-8GBSR
HMT351U6CFR8C-H9
IN3T4GNZBIX
V73T8GNAJKI
8
8
8
8
4
8
4
8
1600
1600
1600
1600
1600
1866
1333
1866
1866
1333
1333
1600
1600
1600
2
2
2
2
2
2
2
2
2
2
1
2
1
1
2
2
1
2
2
1
2
1
1
2
2
2
1
2
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
Goodram GR1333D364L9/8GDC
Samsung M378B5173QH0
5.1 Proﬁling Bit Flips
Our proﬁling run consists of three hammer strategies: Single represents single-
sided Rowhammer. A single target row is selected and hammered along with
a second distant row, allocated in a separate buﬀer and automatically selected
in order to trigger a bank conﬂict. Ampliﬁed targets two consecutive rows for
hammering. Double represents double-sided Rowhammer and selects as targets
rows separated by one victim row. We ran each strategy with all-ones/all-zeroes
and all-zeroes/all-ones data patterns for victim/target rows, respectively, and
with a hammer duration of 3 refresh intervals. We proﬁled 128 MiB of each
memory setup, allocated using 1 GiB hugepages for 8 GiB and 16 GiB setups
and 2 MiB hugepages for 4 GiB setups.
Table 2 shows the results of the three hammer strategies mentioned earlier
applied to the 14 memory setups. Overall we see double-sided Rowhammer by
far outperforming single-sided and ampliﬁed Rowhammer on all memory setups.
Using single-sided Rowhammer as a baseline, the “Ampliﬁed” strategy manages
to be signiﬁcantly more eﬀective for some setups (A2, E2, H1), while proving
inferior for others (A4, B1, E1). We also see the breakdown of bit ﬂip num-
bers into 0 → 1 (pullups) and 1 → 0 (pulldowns). Several setups (A3, E2, G1,
H1, J1) show a signiﬁcant diﬀerence in the ratio of pullups versus pulldowns
between single-sided and ampliﬁed/double-sided hammer strategies, which sug-
gests diﬀerent Rowhammer variants induce intereferences of diﬀerent nature at
the DRAM level.
We evaluate the reliability with which bit ﬂips occur repeatedly by perform-
ing 10 consecutive 32 MiB proﬁling runs on a subset of memory setups and
comparing the obtained ﬂip tables. We found that the vast proportion (80–90%)
Defeating Software Mitigations Against Rowhammer
59
Table 2. Proﬁling results for vulnerable DIMMs.
ID Single
Vuln.
rows[%]
Total