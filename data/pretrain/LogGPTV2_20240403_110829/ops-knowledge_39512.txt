User: I have an existing C process that can take one text input and produce a single image file.
This C process has a high setup/teardown cost due to it's interface with an external system.
Once the setup/teardown has occured the actual production of image from text is almost instantaneous.
My plan is to daemonize the C process, so it will receive text and produce image files in an infinite loop, while maintaining a connection to the external system.
I will also write a small client program in python, which will interface with the daemon to send text/receive the image. 
The target OS is unix.
The question is, what is the best way to do bidirectional IPC between python/C in this case?
Should I just open a unix domain socket and send packed structs back and forth, or should I look at something like Apache Thrift or protobuf?
UPDATE:
Just going to keep it simple, and open a unix domain socket
Assistant: My default choice would be to use normal sockets communicating over localhost. Sockets are a well understood language and platform neutral API that tend to perform very well. They also the advantage of not tieing you to two processes on the same box which can be advantageous in many situations.