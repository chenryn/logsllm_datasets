**作者：天融信阿尔法实验室**  
**原文链接：**
## Hibernate简介
Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。
Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的JaveEE架构中取代CMP，完成数据持久化的重任。
## Java动态字节码生成
通过分析Hibernate1 payload 的构造过程 使用了Java的动态字节码生成的技术，这里针对该技术来提前进行一下讲解
什么是动态字节码生成，相信大家听字面意思也能大致有个概念，众所周知java是编译型语言，所有的.java文件最终都要编译成.class后缀的字节码形式。
那我们可不可以绕过.java直接操纵编译好的字节码呢？当然可以，java的反射机制就是在程序运行期去操纵字节码从而获得像方法名，属性名，构造函数，等等并对其进行操作。
当然这个只是对已经编译好的类来进行操作，我们可不可以在java运行期让程序自动生成一个.class字节码文件，其实说是生成，给我的感觉更多像是组装一个.class文件
当然也是可以的，Java为我们提供了两种方式。
  * **ASM** ：直接操作字节码指令，执行效率高，要是使用者掌握Java类字节码文件格式及指令，对使用者的要求比较高。
  * **Javassit** : 提供了更高级的API，执行效率相对较差，但无需掌握字节码指令的知识，对使用者要求较低。
javassit是一个第三方jar包我们可以通过maven以以下方式导入
          org.javassist
          javassist
          3.19.0-GA
Javassist是一个开源的分析、编辑和创建Java字节码的类库。是由东京工业大学的数学和计算机科学系的 Shigeru Chiba （千叶
滋）所创建的。它已加入了开放源代码JBoss
应用服务器项目,通过使用Javassist对字节码操作为JBoss实现动态AOP框架。javassist是jboss的一个子项目，其主要的优点，在于简单，而且快速。直接使用java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构，或者动态生成类。
Javassist中最为重要的是ClassPool，CtClass ，CtMethod 以及 CtField这几个类。
  * ClassPool：一个基于HashMap实现的CtClass对象容器，其中键是类名称，值是表示该类的CtClass对象。默认的ClassPool使用与底层JVM相同的类路径，因此在某些情况下，可能需要向ClassPool添加类路径或类字节。
  * CtClass：表示一个类，这些CtClass对象可以从ClassPool获得。
  * CtMethods：表示类中的方法。
  * CtFields ：表示类中的字段。
接下来通过代码来进行演示
    public class JavassisTest1 {
        public static void main(String[] args) {
            ClassPool pool = ClassPool.getDefault();
            Loader loader = new Loader(pool);
            CtClass ct = pool.makeClass("JavassistTestResult");//创建类
            ct.setInterfaces(new CtClass[]{pool.makeInterface("java.io.Serializable")});//让该类实现Serializable接口
            try {
                CtField f= new CtField(CtClass.intType,"id",ct);//生成一个字段 类型为int 名字为id
                f.setModifiers(AccessFlag.PUBLIC);//将字段设置为public
                ct.addField(f);//将字段设置到类上
                CtConstructor constructor=CtNewConstructor.make("public GeneratedClass(int pId){this.id=pId;}",ct);//添加构造函数
                ct.addConstructor(constructor);
                CtMethod helloM=CtNewMethod.make("public void hello(String des){ System.out.println(des);}",ct);//添加方法
                ct.addMethod(helloM);
                ct.writeFile("/Users/IdeaProjects/Apache_ShardingSphere/Test5/target/classes/com/javassistTest/");//将生成的.class文件保存到磁盘
                Class c = loader.loadClass("JavassistTestResult");
                Constructor constructor1 = c.getDeclaredConstructor(int.class);
                Object object = constructor1.newInstance(1);
                System.out.println(1234);
            } catch (CannotCompileException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (NoSuchMethodException e) {
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            }
        }
    }
执行后的结果，可以看到在对应的目录下生成了我们输入的类名`JavassistTestResult`同名的class文件
我们看一看该class文件的源码
可以看到该类的代码与我们调用javassist所示所输入的内容完全相同，该class文件就是我们通过调用javassist所提供的类与方法在运行时期动态生成的。
我们测试一下动态生成的类是否真的可用
    public class JavassisTest3 {
        public static void main(String[] args) {
            try {
                ClassPool pool = ClassPool.getDefault();
                pool.insertClassPath("/Users/IdeaProjects/Apache_ShardingSphere/Test5/target/classes/com/javassistTest");
                Loader loader = new Loader(pool);
                Class clazz = loader.loadClass("JavassistTestResult");
                Constructor constructor1 = clazz.getDeclaredConstructor(int.class);
                Object object = constructor1.newInstance(1);
                Class clazz1 = object.getClass();
                String className = clazz1.getName();
                Field field = clazz1.getField("id");
                String fieldName = field.getName();
                System.out.println("className: "+className+"\n"+"fieldName: "+fieldName);
            } catch (NotFoundException | ClassNotFoundException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                e.printStackTrace();
            } catch (NoSuchMethodException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (NoSuchFieldException e) {
                e.printStackTrace();
            }
        }
    }
以下是执行结果，可以确定我们动态生成的类是确实可用的。
以上就是对javassist这个动态字节码生成技术的一些简介。
## Hibernate1 源码深度解析