amount of computation for each of A1’s queries) and makes at most q queries to its oracle, and the total
length of the inputs does not exceed µ.
Next, integrity of the ciphertext stream follows easily from the ciphertext integrity of AE:
Theorem 3. For every t, q1, q2, µ1, µ2 ∈ N it holds that
Advint-cs
CH (t, r) ≤ AdvintAE (t + O(q1 + q2), r) + collN (q1) ,
where r = (q1, q2, µ1, µ2),
Proof. Fix t, q1, q2, µ1, µ2 ∈ N. Let A = (A1,A2) be a t-time INT-CS adversary using resources (q1, q2, µ1, µ2).
CH (A) ≤ AdvintAE (B) and B runs in time t + O(q1 + q2) and
We exhibit an INT adversary B such that Advint-cs
uses the same query resources as A.
Refer to games G1 and G2 deﬁned in Figure 9. (As usual, oracle SD is left implicitly deﬁned.) The
ﬁrst is a modiﬁed version of the INT-CS game with adversary A and the partially speciﬁed channel CH.
The changes preserve the semantics of the game and are only meant to clarify our argument. First, we have
renamed some variables: in particular, sync has been renamed to sync1, win to win 1, and De.sync to sync2.
Second, we rearranged the logic used to check if the channel is in sync so that sync1 gets set before invoking
procedure Demux (9:13). Third, the game declares an array str T [ ] used by procedure Write to associate a
given plaintext X to its ciphertext Y (cid:48), as well as the nonce N and associated data A used to encrypt it (9:21).
Before invoking AE.Dec , the Demux procedure checks if the inputs are stored in T (9:31). Fourth, we added
a ﬂag win 2 (9:34). Finally, we declare two strings: S∗, used to track the whole sender-ciphertext stream (and
not just the undelivered part); and Y ∗, used to track the ciphertext stream consumed by the Recv oracle,
i.e. Y ∗ = cat(Y ) where Y i is the fragment output by Read in the i-th Recv query. One can easily check
that the random variables G1(A) = 1 and Expint-cs
Game G2 is identical to G1 until the ﬂag win 2 gets set, at which point the revised game sets X to ⊥.
This ensures that the next branch (9:35) is taken if T [N, A, Y (cid:48)] (cid:54)= (cid:5) (9:32). Next, we show there exists an
INT adversary B such that
CH (A) = 1 are identically distributed.
Pr(cid:2) G1(A) = 1(cid:3) ≤ Pr(cid:2) G2(A) = 1(cid:3) + AdvintAE (B) + collN (q1) ,
(11)
Adversary B Enc,Dec simulates A in game G1. Its deﬁnition is precisely the pseudocode in Figure 9, except
line (9:20) is replaced by “Y (cid:48) ← Enc(N, A, X)”, and lines (9:34–35) are replaced with “X ← Dec(N, A, Y (cid:48))”.
(Note that B runs in time t + O(q1 + q2), makes as many queries to its oracles as A1 does, and the
queries have the same bit length.) By deﬁnition of the INT game, we have that Pr(cid:2) ExpintAE (B) sets res(cid:3) =
Pr(cid:2) G1(A) sets win 2
(cid:3). Conditioning on the probability of a nonce collision and applying the Fundamental
Consider the probability that G2(A) sets win 1 ← 1. We begin with a few deﬁnitions.
Lemma of Game Playing [10] yields equation (11).
Let Win(f )
denote the event that when ASend,Recv halts, the variable win 1 has the value f ∈ {0, 1}. (Note that Win(1)
and G2(A) = 1 are the same event.) We write Unsync1(i) to denote the event that sync1 ← 0 is set during
A1’s i-th query to Recv, and this is the ﬁrst such query. (Note that if Unsync1(i) holds, then sync1 = 0 for
every subsequent query.) We deﬁne Unsync2(i) in kind.
A couple of observations. First, if Win(1) holds, then Unsync1(i) holds for some 1 ≤ i ≤ q2. (Flag win 1
can only be set on line 9:15; reaching this point implies that sync1 = 0.) Second, if Unsync2(j) holds for
21
G3 G4
Send(M0, sc0, M1, sc1)
1 L0 ← leak ((cid:96), M0, sc0); L1 ← leak ((cid:96), M1, sc1)
2 if L0 (cid:54)= L1 then return (⊥,⊥)
3 (X, N, α) ←← Mux SD (Mb, scb, var Mu)
4 (X, α) ←← M.Mux SD (Mb, scb, var Mu.st)
5 if X = (cid:5) then N ← (cid:5)
6 else N ← N .Next (var Mu.ng)
7 (C, γ) ←← Write SD (X, N, α, var Wr )
8 return (C, γ)
G5 G6
Send(M0, sc0, M1, sc1)
19 L0 ← leak ((cid:96), M0, sc0); L1 ← leak ((cid:96), M1, sc1)
20 if L0 (cid:54)= L1 then (X, α) ← (⊥,⊥)
21 else (X, α) ←← M.Mux SD (M, sc, var mu)
22 if X = ⊥ and α = ⊥ then return (⊥,⊥)
23 if X = (cid:5) then N ← (cid:5)
24 else N ← N .Next (var Mu.ng)
25 (C, γ) ←← Write SD ( X 1|X| , N, α, var Wr )
26 return (C, γ)
G1(A) G2(A)
1 declare str Env , S, S∗, Y ∗, T [ ], bool sync[ ], win[ ]
2 (Mu, Wr , Re, De) ←← Init ( )
3 sync1, sync2 ← 1
4 ASend,Recv
5 return win 1
(var Env )
1
Send(M, sc)
6 (X, N, α) ←← Mux SD (M, sc, var Mu)
7 (C, γ) ←← Write SD (X, N, α, var Wr )
8 S ← S (cid:107) C; S∗ ← S∗ (cid:107) C
9 return (C, γ)
12
Recv(C)
10 (Y, N, α) ←← Read SD (C, var Re)
11 if sync1 and Y (cid:22) S then
Y ∗ ← Y ∗ (cid:107) Y ; S ← S % Y
13 else sync1 ← 0
14 (M, sc, γ) ←← Demux SD (Y, N, α, var De)
15 if ¬sync1 then win 1 ← win 1 ∨ (M (cid:54)= ⊥ ∧ sc (cid:54)= ⊥)
16 return (M, sc, γ)
G4 G5
Send(M0, sc0, M1, sc1)
9 L0 ← leak ((cid:96), M0, sc0); L1 ← leak ((cid:96), M1, sc1)
10 if L0 (cid:54)= L1 then return (⊥,⊥)
11 (X, α) ←← M.Mux SD (Mb, scb, var Mu.st)
12 if L0 (cid:54)= L1 then (X, α) ← (⊥,⊥)
13 else (X, α) ←← M.Mux SD (M, sc, var mu)
14 if X = ⊥ and α = ⊥ then return (⊥,⊥)
15 if X = (cid:5) then N ← (cid:5)
16 else N ← N .Next (var Mu.ng)
17 (C, γ) ←← Write SD (X, N, α, var Wr )
18 return (C, γ)
BMux
27 (∗, Wr ,∗,∗) ←← Init ( )
28 b(cid:48) ←← ASend(cid:48)
(var Env ); return b(cid:48)
B2(I, var Env ) // Handle SD request.
29 O ←← A2(I, var Env ); return O
Send(cid:48)(M0, sc0, M1, sc1)
30 (x, α) ←← Mux(M0, sc0, M1, sc1)
31 if x = ⊥ and α = ⊥ then return (⊥,⊥)
32 if x = 0 then N ← (cid:5)
33 else N ← N .Next (var Mu.ng)
34 (C, γ) ←← Write SD (1x, N, α, var Wr )
35 return (C, γ)
(var Env ):
1
1
Write SD (X, N, α, var Wr )
17 declare str A, γ
18 (cid:104)A, γ(cid:105) ←← SD((cid:104)write, ready,|X|, α(cid:105))
19 if X = (cid:5) then return ((cid:5), γ)
20 Y (cid:48) ← AE.Enc (Wr .K, N, A, X)
21 T [N, A, Y (cid:48)] ← X
22 if Y (cid:48) = ⊥ or SD((cid:104)parse, A(cid:107) Y (cid:48)(cid:105)) (cid:54)= (cid:104)|A|+|Y |,|A|(cid:105)
γ ←← SD((cid:104)write, invalid ptxt(cid:105))
return ((cid:5), γ)
23
24
25 return (A(cid:107) Y (cid:48), γ)
Demux SD (Y, N, α, var De)
26 declare str X, γ, int a
27 γ ←← SD((cid:104)demux, ready,|Y |, α(cid:105))
28 if (Y = (cid:5) and γ (cid:54)= (cid:5)) or ¬sync2 then
return (⊥,⊥, γ)
30 else if Y (cid:54)= (cid:5) then
(cid:104) , a(cid:105) ← SD((cid:104)parse, Y (cid:105)); A ← Y [:a]; Y (cid:48) ← Y % A
if T [N, A, Y (cid:48)] (cid:54)= (cid:5) then X ← T [N, A, Y (cid:48)]
else
29
31
32
33
if X = ⊥ then
X ← AE.Dec (De.K, N, A, Y (cid:48))
if X (cid:54)= ⊥ then win 2 ← 1 ; X ← ⊥
sync2 ← 0; γ ←← SD((cid:104)demux, invalid ctxt(cid:105))
return (⊥,⊥, γ)
34
35
36
37
38
39 (M, sc, γ) ←← M.Demux SD (X, var De.dx )
40 return (M, sc, γ)
Figure 9: top: games G4, G5, and G6 and adversary B for proof of Theorem 2. Note that procedure Write ( ) in the
deﬁnition of B is as deﬁned in games G3–G6. Bottom: games for proof of Theorem 3.
22
some 1 ≤ j ≤ q2, then for every j ≤ q ≤ q2, the output of the q-th Recv query is (M, sc, γ), where M = ⊥
and sc = ⊥. (This is made clear by lines 9:27 and 9:36.) Hence, no query following (and including) the q-th
sets win 1 ← 1.
We now show that if Unsync1(i) holds, then so does Unsync2(i). Suppose that the i-th query to Recv
is the ﬁrst to set sync1 ← 0, and let C denote the input to the oracle. The i-th query setting sync1 ← 0
implies that Read SD(C, var Re) output a triple of strings (Y, N, α) such that Y (cid:54)(cid:22) S (9:10–11). We examine
the possible values of sync2 after the next execution of Demux (9:14). If sync2 = 0 prior to execution of
line 9:14, then we are done; so suppose that sync2 = 1. Y (cid:54)(cid:22) S implies that Y (cid:54)= ε, so the branch at line
If T [N, Y [:a], Y [a + 1:]] = (cid:5) holds for every a ∈ N, then the branch on line 9:33 will get
9:30 is taken.
taken and sync2 will get set to 0. Suppose to the contrary that T [N, Y [:a], Y [a + 1:]] (cid:54)= (cid:5) for some a ∈ N.
By deﬁnition of Write , this means that Y is a substring of S∗, i.e. there exists some string P such that
P (cid:107) Y (cid:22) S∗. Because the i-th is the ﬁrst query to set sync1 ← 0, it must be the case that P = Y ∗. But
S = S∗ % Y ∗ (9:12), so Y (cid:22) S, a contradiction. Therefore, Unsync1(i) implies Unsync2(i).
Suppose that Win(1) holds. This implies Unsync1(i) holds for some 1 ≤ i ≤ q2, which in turn implies
Unsync2(i) holds (as we just saw). But this means that no query following (and including) the i-th sets
win 1 ← 1, so Win(1) cannot hold. We conclude that Pr(cid:2) G2(A) = 1(cid:3) = 0.
Finally, a similar argument allows us to reduce the SIM-STAT security of CH to the SIM-mSTAT security
of M. However, we will need to restrict the behavior of the adversary so that the SD oracle computes the
record boundaries deterministically and independently of the adversary’s state. By construction (see 7:22,
27, and 38), this ensures that the receiver computes the correct record boundaries whenever the channel is
in-sync.
Theorem 4. Let A = (A1,A2) be a t-time SIM-STAT-adversary that makes q1 Send-queries and q2
Recv-queries. Let T be an s-time SIM-mSTAT-simulator. Suppose there is a function rec for which
A2((cid:104)parse, Y (cid:105), var Env ) outputs rec(Y ) for all strings Y, Env and rec(Y ) = rec(buf ) for all strings Y (cid:22) buf .
There exists a ˜t-time SIM-mSTAT-adversary B, ˜t-time INT-adversary C, and (t + O(s))-time SIM-STAT-
simulator S such that
Advsim-stat
CH,S (A) ≤ Advsim-mstat
M,T
(B) + AdvintAE (C) + collN (q1) ,
where ˜t = t + O(q1 + q2) and B and C have the same query resources as A.
The proof begins with the same argument used in Theorem 3, which lets us transition into a setting in which
Recv queries are evaluated without invoking AE.Dec . This allows us to construct a SIM-mSTAT adver-
sary B and a SIM-STAT simulator S such that for every SIM-mSTAT simulator T , we simulate SIM-STAT
adversary A in its game with S. Our restrictions on A2 ensures that the simulator has enough information
to accurately simulate the status of the channel.
Proof of Theorem 4. Let λ denote the ciphertext-length function associated with AE. (Recall that λ is a
bijection by deﬁnition.) let S be the simulator in Figure 10. Just as in the proof of Theorem 3, we begin
with a game Gb
1 (Figure 11) instrumented to clarify the reduction. (As usual, oracle SD is not explicitly
deﬁned.) By the same argument yielding equation (11), there exists an INT adversary C such that
Pr(cid:2) Expsim-stat
CH,S,1 (A) = 1(cid:3) ≤ Pr(cid:2) G1
1(A,S) = 1(cid:3) + AdvintAE (C) + collN (q1) .
(12)
Now consider game Gb
Moreover, adversary C runs in time t + O(q1 + q2) and makes as many queries to its oracles as A does.
2 (Figure 11). This changes the condition on line (11:32) so that X gets set on
the next line if T [N, A, Y (cid:48)] is deﬁned and x = λ−1(|Y | − a) > 0. But the former condition implies the latter
(by deﬁnition of λ and Write ), so this change has no aﬀect on the outcome of the game. Next, game Gb
replaces the invocation of M.Demux (11:51) on input of X with execution of the simulator T on input of
3
x = |X|. (The simpliﬁcation on lines 11:45–48 are the result of no longer needing the variable X and do not
impact the outcome.) Next, we exhibit adversary B such that
Pr(cid:2) Expsim-mstat
M,T ,d
(B) = 1(cid:3) = Pr(cid:2) G1