[Enable application verifier](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-application-verifier) |
FLG_APPLICATION_VERIFIER | 0x0100 | vrf | R,K,I  
[Enable bad handles detection](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-bad-handles-detection) |
FLG_ENABLE_HANDLE_EXCEPTIONS | 0x40000000 | bhd | R,K  
[Enable close exception](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-close-exception) |
FLG_ENABLE_CLOSE_EXCEPTIONS | 0x400000 | ece | R,K  
[Enable debugging of Win32 subsystem](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-debugging-of-win32-subsystem) |
FLG_ENABLE_CSRDEBUG | 0x020000 | d32 | R  
[Enable exception logging](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-exception-logging) |
FLG_ENABLE_EXCEPTION_LOGGING | 0x800000 | eel | R,K  
[Enable heap free checking](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-heap-free-checking) |
FLG_HEAP_ENABLE_FREE_CHECK | 0x20 | hfc | R,K,I  
[Enable heap parameter checking](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-heap-parameter-checking) |
FLG_HEAP_VALIDATE_PARAMETERS | 0x40 | hpc | R,K,I  
[Enable heap tagging](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-heap-tagging) | FLG_HEAP_ENABLE_TAGGING |
0x0800 | htg | R,K,I  
[Enable heap tagging by DLL](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-heap-tagging-by-dll) |
FLG_HEAP_ENABLE_TAG_BY_DLL | 0x8000 | htd | R,K,I  
[Enable heap tail checking](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-heap-tail-checking) |
FLG_HEAP_ENABLE_TAIL_CHECK | 0x10 | htc | R,K,I  
[Enable heap validation on call](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-heap-validation-on-call) |
FLG_HEAP_VALIDATE_ALL | 0x80 | hvc | R,K,I  
[Enable loading of kernel debugger symbols](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-loading-of-kernel-debugger-symbols) | FLG_ENABLE_KDEBUG_SYMBOL_LOAD | 0x040000 | ksl | R,K  
[Enable object handle type tagging](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-object-handle-type-tagging) |
FLG_ENABLE_HANDLE_TYPE_TAGGING | 0x01000000 | eot | R,K  
[Enable page heap](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-page-heap) | FLG_HEAP_PAGE_ALLOCS |
0x02000000 | hpa | R,K,I  
[Enable pool tagging](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-pool-tagging)(Windows 2000 and Windows XP
only) | FLG_POOL_ENABLE_TAGGING | 0x0400 | ptg | R  
[Enable system critical breaks](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-system-critical-breaks) |
FLG_ENABLE_SYSTEM_CRIT_BREAKS | 0x100000 | scb | R, K, I  
[Load image using large pages if possible](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/load-image-using-large-pages-if-possible)
|  |  | lpg | I  
[Maintain a list of objects for each type](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/maintain-a-list-of-objects-for-each-type)
| FLG_MAINTAIN_OBJECT_TYPELIST | 0x4000 | otl | R  
[Enable silent process exit monitoring](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/enable-silent-process-exit-monitoring) |
FLG_MONITOR_SILENT_PROCESS_EXIT | 0x200 |  | R  
[Object Reference Tracing](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/object-reference-tracing)(Windows Vista and
later) |  |  |  | R, K  
[Show loader snaps](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/show-loader-snaps) | FLG_SHOW_LDR_SNAPS | 0x02 | sls
| R,K,I  
[Special Pool](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/special-pool) |  |  | spp | R R,K (Windows Vista
and later)  
[Stop on exception](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/stop-on-exception) | FLG_STOP_ON_EXCEPTION | 0x01 |
soe | R,K,I  
[Stop on hung GUI](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/stop-on-hung-gui) | FLG_STOP_ON_HUNG_GUI | 0x08 |
shg | K  
[Stop on unhandled user-mode exception](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/stop-on-unhandled-user-mode-exception) |
FLG_STOP_ON_UNHANDLED_EXCEPTION | 0x20000000 | sue | R,K,I  
上面逆向Rtl得到的值是`0x100000`，它对应是`Enable system critical breaks`，微软官方对它的解释为：The
**Enable system critical breaks** flag forces a system break into the
debugger，大致意思是如果开启它，则可以强制产生一个中断让系统进入内核调试器。
这里a3咱们传的值为False直接跳过了，若为True，则会检查是否`Enable system critical
breaks`，如果没有开启则直接返回。这里返回值的含义是 **C0000001: 连到系统上的设备没有发挥作用** 。
`NtGlobalFlags`的很多值都有研究的价值可以用来反调试，这里不再展开，感兴趣的可以自行研究。
## 0x04 NtSetInformationProcess/Thread的逆向分析
从上面就可以看出`NtSetInformationProcess`和`NtSetInformationThread`是具有高度对称性的，代码应该也是差不多的。
> `NtSetInformationProcess(-1,0x1D,P3,4)`
LABEL_46做了清理工作，减少了EPROCESS的引用计数。可以看见如何将进程设置为Critical
Process——将`EPROCESS.Flags.BreakOnTermination(Pos 13)`位 置1
> `NtSetInformationThread(-2,18,P3,4)`
同样地，LABEL_48做了清理工作，减少引用计数。可以看见如何将线程设置为Critical
Thread——将`ETHREAD.CrossThreadFlags.BreakOnTermination(Pos 5)`位 置1
至此可以总结出它们的方式： **只用分别设置自己的`BreakOnTermination`位即可**
## 0x05 Critical Process蓝屏实现
上文主要讲了“地位”的提升，接下来就是选择哪个函数结束本进程的问题，我这里使用2个，其实最后都是调用`nt!NtTerminateProcess`。
###  1.代码实现
由于Rtl只是封装，Nt才是本质，所以在代码中我只写Nt的部分，对于Rtl的使用，可以翻到下面看完整项目。
    #include 
    #include 
    const ULONG SE_DEBUG_PRIVILEGE = 20;
    typedef enum _PROCESSINFOCLASS
    {
        ProcessBasicInformation,           //0
        ProcessQuotaLimits,                //1
        ProcessIoCounters,                 //2
        ProcessVmCounters,                 //3
        ProcessTimes,                      //4
        ProcessBasePriority,               //5
        ProcessRaisePriority,              //6
        ProcessDebugPort,                  //7 
        ProcessExceptionPort,              //8
        ProcessAccessToken,                //9
        ProcessLdtInformation,             //10
        ProcessLdtSize,                    //11
        ProcessDefaultHardErrorMode,       //12
        ProcessIoPortHandlers,             //13
        ProcessPooledUsageAndLimits,       //14
        ProcessWorkingSetWatch,            //15
        ProcessUserModeIOPL,               //16 
        ProcessEnableAlignmentFaultFixup,  //17
        ProcessPriorityClass,              //18
        ProcessWx86Information,            //19
        ProcessHandleCount,                //20
        ProcessAffinityMask,               //21
        ProcessPriorityBoost,              //22
        ProcessDeviceMap,                  //23
        ProcessSessionInformation,         //24
        ProcessForegroundInformation,      //25
        ProcessWow64Information,           //26
        ProcessImageFileName,              //27
        ProcessLUIDDeviceMapsEnabled,      //28
        ProcessBreakOnTermination,         //29  0x1D
        ProcessDebugObjectHandle,          //30
        ProcessDebugFlags,                 //31
        ProcessHandleTracing,              //32
        ProcessIoPriority,                 //33
        ProcessExecuteFlags,               //34
        ProcessTlsInformation,             //35
        ProcessCookie,                     //36
        ProcessImageInformation,           //37
        ProcessCycleTime,                  //38
        ProcessPagePriority,               //39
        ProcessInstrumentationCallback,    //40
        ProcessThreadStackAllocation,      //41
        ProcessWorkingSetWatchEx,          //42
        ProcessImageFileNameWin32,         //43
        ProcessImageFileMapping,           //44
        ProcessAffinityUpdateMode,         //45
        ProcessMemoryAllocationMode,       //46
        MaxProcessInfoClass                //47
    } PROCESSINFOCLASS;
    // 函数指针
    typedef NTSYSCALLAPI NTSTATUS(WINAPI *NTSETINFORMATIONPROCESS)(
        IN HANDLE               ProcessHandle,
        IN PROCESSINFOCLASS ProcessInformationClass,
        IN PVOID                ProcessInformation,
        IN ULONG                ProcessInformationLength
        );
    typedef BOOL(__cdecl *RTLADJUSTPRIVILEGE)(ULONG, BOOL, BOOL, PBOOLEAN);
    NTSETINFORMATIONPROCESS NtSetInformationProcess;
    RTLADJUSTPRIVILEGE RtlAdjustPrivilege;
    int main()
    {
        // 任何进程都会自动加载ntdll
        HMODULE  NtBase = GetModuleHandle(TEXT("ntdll.dll"));
        if (!NtBase) return false;
        // 获取各函数地址
        NtSetInformationProcess = (NTSETINFORMATIONPROCESS)GetProcAddress(NtBase, "NtSetInformationProcess");
        RtlAdjustPrivilege = (RTLADJUSTPRIVILEGE)GetProcAddress(NtBase, "RtlAdjustPrivilege");
        BOOLEAN A;
        BOOL Enable = TRUE;
        // RtlAdjustPrivilege返回值为0才成功
        if (RtlAdjustPrivilege(SE_DEBUG_PRIVILEGE, TRUE, FALSE, &A))
        {
            printf("------Please run program as an Administrator------\n");
            system("pause");
            return FALSE;
        }
        // 设置本进程为Critical Process
        NtSetInformationProcess(GetCurrentProcess(), ProcessBreakOnTermination, &Enable, sizeof(Enable));
        // 退出
        ExitProcess(0);
        //TerminateProcess((HANDLE)-1, 0);
        return 0;
    }
###  2.流程分析
首先不附加内核调试器，直接蓝。
恢复快照，随后附加一下Windbg，再运行，出现一个Input，让你输入，输入B(b)则windbg会接收到一个断点，输入I(i)，则会忽略该错误继续运行，栈回溯看一下。
看来就是这个函数导致蓝屏，若附加内核调试器，则会被调试器接收，否则会直接蓝屏，接下来看看这个函数的执行流程。
###  3.PspCatchCriticalBreak
这个函数在Win11中与Win10中稍有不同，对于内核调试而言，在Win10中仅有Break(B,b)，Ignore(I,i)两种选择，这两种选择都无法造成蓝屏，而在`Win11中新增了Continue(C,c)选项`，选择C则会导致蓝屏。
ETHREAD & 0x7F取了当前对象的类型，咱们这里是`Critical
Process`，因此当然是EPROCESS。我这里为了方便直接将其重命名为EPROCESS，实际情况还是根据传进来的对象来判断是进程还是线程。
最后调用了`KeBugCheckEx()`实现蓝屏。通过栈回溯咱们知道前面还有2个函数，`nt!PspTerminateAllThreads`和`nt!NtTerminateProcess`，大家应该都能猜到肯定是检查了EPROCESS的`BreakOnTermination`位才进入`PspCatchCriticalBreak`，但是这俩函数还是和后面的线程一起分析比较好。
## 0x06 思考
首先提出猜想：既然进程能像上面那样操作，先设置，再退出。那么线程是否可以呢？直接写代码开始测试
    #include 
    #include 
    const ULONG SE_DEBUG_PRIVILEGE = 20;
    typedef enum _THREADINFOCLASS
    {