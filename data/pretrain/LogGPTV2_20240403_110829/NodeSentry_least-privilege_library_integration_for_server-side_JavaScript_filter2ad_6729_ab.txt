untrusted libraries from some of the other libraries loaded in
the package which may oﬀer a functionality that we consider
core. For example we may want to ﬁlter access by the semi-
trusted library to the trusted library oﬀering access to the
ﬁle system.
We consider outright malicious libraries out of scope from
our threat model, albeit one could use NodeSentry equally
well to fully isolate a malicious library. We believe that the
eﬀort to write the policies for all other possible libraries to
be isolated from the malicious one by far outweigh the eﬀort
of writing the alleged benign functionalities of the malicious
library from scratch.
Given the fact that NodeSentry has a programmatic
policy, and that policy code can eﬀectively modify how the
enforcement mechanism functions, it could be possible to
introduce new vulnerabilities into the system via a badly
written policy. However, we consider the production of safe
and secure policy code an interesting but orthogonal – and
thus out-of-scope – issue, for which care must be taken by
the policy writer to prevent mistakes/misuse.
The key idea of our proposal is to use a variant of an inline
reference monitor [38, 13] as modiﬁed for the Security-by-
(cid:23)(cid:23)(cid:27)
Contract approach for Java and .NET [11] in order to make
it more ﬂexible. Namely, we do not embed the monitor into
the code as suggest by most approaches for inline reference
monitors but inline only the hooks in a few key places, while
the monitor is an external component. In our case this has
the added advantage of potentially improving performance
(a key requirement for server-side code) as the monitor can
now run in a separate thread and threads which do not call
security relevant actions are unaﬀected.
Further, and maybe most importantly, we do not limit our-
selves to purely raising security exceptions and stopping the
execution but support policies that specify how to “ﬁx” the
execution [12, 5, 10]. This is another essential requirement
for server side applications which must keep going.
In order to maintain control over all references acquired by
the library, e.g., via a call to "require", NodeSentry ap-
plies the membrane pattern, originally proposed by Miller [31,
§9] and further reﬁned in [44]. The goal of a membrane is to
fully isolate two object graphs [31, 44]. This is particularly
important for dynamic languages in which object pointers
may be passed along and an object may not be aware of who
still has access to its internal components.
Intuitively, a membrane creates a shadow object that is a
“clone” of the target object that it wishes to protect. Only the
references to the shadow object are passed further to callers.
Any access to the shadowed object is then intercepted and
either served directly or eventually reﬂected on the target
object through handlers. In this way, when a membrane
revokes a reference, essentially by destroying the shadow
object [44], it instantly achieves the goal of transitively
revoking all references as advocated by Miller [31].
The NodeSentry-handler intercepts the object references
received by the semi-trusted library and can check them for
compliance with the policy. Our policy decision point can
be seen as a simple automaton:
if the handler receives a
request for an action and can make the transition then the
object proxied by the membrane is called and the (proxied)
result is returned; if the automaton cannot make a transition
on the input (i.e., the policy is violated), then a security
countermeasure can be implemented by NodeSentry or,
in the worst case scenario, a security exception will be
automatically raised.
We have identiﬁed two possible points where the policy
main
st
main
st
1
2
3
4
5
6
7
// code snippet from st.js
// get a path from a url
Mount . prototype . getPath = function (u) {
u = path . normalize (url. parse (u). pathname
. replace (/^[\/\\]?/ , '/'))
. replace (/\\/g, '/')
// ...
mime
url
path
...
fs
mime
url
...
path
Upper-Bound Policy Lower-Bound Policy
fs
Figure 3: NodeSentry allows policies to be installed
on the public interface of the secure library (Upper-
Bound policies) and/or on the public interface of any
depending library (Lower-Bound policies).
hooks can be placed that fall together with two distinct types
of policies: on the public interface of the library itself with
the outer world, on the public interface of any depending
library (both built-in, core libraries and other third-party
libraries), or in both places. The choice of the location
determines two type of policies:
Upper-Bound policies are set on each member of the
public interface of a library itself with the outer world.
Those interfaces are used by the rest of the application
to interact with it. It is the ideal location to do all kinds
of security checks when speciﬁc library functionality is
executed, or right after the library returns control.
For example, these checks can be used (i) to implement
web application ﬁrewalls and prevent malformed or
maliciously crafted URLs from entering the library or
(ii) to add extra security headers to the server response
towards a client. Another example of a useful policy
would be to block speciﬁc clients from accessing speciﬁc
ﬁles via the web server.
Lower-Bound policies can be installed on the public in-
terface of any depending library, both built-in core
libraries (like e.g., "fs") or any other third-party li-
brary.
Such a policy could be used to enforce e.g., an application-
wide chroot jail or to allow ﬁne-grained access control
such as restricting reading to several ﬁles or preventing
all write actions to the ﬁle system.
Figure 3 depicts interactions with these two types of poli-
cies with the red arrows and highlights the isolated context
or membrane with a grey box. The amount of available
policy points is thus a trade-oﬀ between performance (less
points mean less checks) and security (more points mean a
more ﬁne-grained policy).
A developer wishing to use NodeSentry only needs to
replace the require call to the semi-trusted library with a
safe_require. This approach makes it possible to implement
(cid:23)(cid:23)(cid:28)
Figure 4: The "st" library has a potential security
issue because it does not check the ﬁle path for
potential directory traversal.
a number of security checks used for web-hardening , like e.g.,
enabling the HTTP Strict-Transport-Security header [20],
set the Secure and/or HttpOnly Cookies ﬂags [3] or conﬁgure
a Content Security Policy (CSP) [39], in quite a modular
way without aﬀecting the work of rank-and-ﬁle JavaScript
developers. This is described in the next section whereas we
illustrate some policy examples more in detail in Section 5.
4. USAGE MODEL
Here we describe the usage model [24] of the NodeSentry
library. The developer (such as the one whose blog entry
we have cited) has found an appropriate library for her
application.
She may now use the library to serve ﬁles to clients. As
mentioned, the library has a potential potential directory
traversal issue, as shown in Figure 4. By itself, this may
not be a vulnerability: if a library provides a functionality
to manage ﬁles, it should provide a ﬁle from any point of
the ﬁle system, possibly also using ‘..’ substrings, as far as
this is a correct string for directory. However, when used to
provide ﬁles to clients of a web server based on URLs, the
code snippet below becomes a serious security vulnerability.
An HTTP request for /%2e%2e/%2e%2e/etc/passwd, sent
by an attacker towards a server using the "st" library to
serve ﬁles, could expose unintended ﬁles.
It is of course possible to modify the original code to ﬁx the
bug but this patch would be lost when a new update to "st"
is done by the original developers of the library. Getting
involved in the community maintenance of the library so
that the ﬁx is inserted into the main branch may be too time
demanding, or the developer may just not be suﬃciently
skilled to go ﬁx it without breaking other dependent libraries,
or just have other priorities altogether.
In all these scenarios, which are the majority of the cases,
the application of NodeSentry is the envisaged solution.
The "st" library is considered semi-trusted and a num-
ber of default web-hardening policies are available in the
NodeSentry policy toolkit.
The only adjustment is to load the NodeSentry frame-
work and to make sure that "st" is safely required so that
the policy becomes active, as shown in Figure 5.
The policy rules in Figure 6 can then be activated in
the policy section and all URLs passed to "st" would be
correctly ﬁltered. The policy states that if a library wants
to access the URL of the incoming HTTP request (via
IncomingMessage.url), we ﬁrst test it on the presence of a
(encoded) dot character. If so, we return a new URL that
e.g., points to a ﬁle that contains a warning message.
1
2
3
4
5
require("nodesentry");
var http = require (" http ");
var st=
safe_require ("st");
var handler = st( process .cwd ());
http . createServer ( handler ). listen (1337);
1
2
3
4
5
6
7
if ( method === " ServerResponse . write ")
{
var h = "Strict - Transport - Security ";
var v = "max -age =3600; includeSubDomains ";
response . setHeader (h, v);
// move on with the real
// ServerResponse . write call
}
Figure 5: After loading the NodeSentry framework,
policies can be (recursively) enforced on libraries by
loading them via the newly introduced safe_require
function.
Figure 7: Before a server response is sent towards a
client, the policy ﬁrst adds the HSTS header, eﬀec-
tively mimicking the behaviour of helmet.hsts().
1
2
3
4
5
6
7
if ( method === " IncomingMessage .url") {
var regex = new RegExp (/%2 e/ig );
if ( regex . test ( origValue ))
else
return "/ your_attack_is_detected . html ";
return origValue ;
}
Figure 6:
If application code requests the URL
of the incoming request, a pointer to a diﬀerent
page is returned whenever malicious characters are
detected.
5. POLICY EXAMPLES
In deﬁning the policies, we have tried to be as modular as
possible: real system security policies are best given as collec-
tions of simpler policies, a single large monolithic policy being
diﬃcult to comprehend. The system’s security policy is then
the result of composing the simpler policies in the collection
by taking their conjunction. This is particularly appropriate
considering our scenario of ﬁltering library actions.
If the library may not be trusted to provide access to
the ﬁle system it may be enough to implements OWASP’s
check on ﬁle system management (e.g., escaping, ﬁle traversal
etc.). If a library is used for processing HTTP requests to a
database, it could be controlled for URL sanitization. Each
of those two libraries could then be wrapped by using only
the relevant policy components and thus avoid paying an
unnecessary performance price.
As a simple example for the potential of NodeSentry
we describe how we implemented the checks behind the
‘helmet’ library4, a middleware used for web hardening
and implementing various security headers for the popular
"express" framework.
It is used to, e.g., enable the HTTP Strict Transport
Security (HSTS) protocol [20] in an "express"-based web
application by requiring each application to actually use
the library when crafting HTTP requests. Figure 7 shows
a NodeSentry policy that adds the HSTS header before
sending the outgoing server response.
The developer does not need to modify the original appli-
cation code to exhibit this behaviour. They only need to
safe_require the library whose HTTPS calls they want to
restrict. This can be done once and for all at the beginning
of the library itself, as customary in many Node.js packages.
The example in Figure 8 shows a possible policy to prevent
4https://github.com/evilpacket/helmet
(cid:23)(cid:24)(cid:19)
1
2
3
4
5
6
7
8
9
if ( method === "fs. writeFile " ||
method === "fs. write " ||
method === "fs. writeFileSync " ||
method === "fs. writeSync " ||
method === "fs. appendFile " ||
method === "fs. appendFileSync ")
// simply return
return
{
}
Figure 8: A possible policy that wants to prevent a
library from writing to the ﬁle system must cover
all availalbe write operations of the "fs" library.
a library from writing to the ﬁle system without raising an
error or an exception. Whenever a possible write operation
via the "fs" library gets called, the policy will silently
return from the execution so that the real method call
never gets executed, and thus eﬀectively prevent writing to
the ﬁle system. It is possible to change this behavior by e.g.,
throwing an exception or chrooting to a speciﬁc directory.
6.
IMPLEMENTATION DETAILS
This section reports on our development of a mature
NodeSentry prototype, which is designed to work with
the latest Node.js versions and relies on the upcoming ES
Harmony JavaScript standard. Membranes require this
standard, in order to implement fully transparent wrappers,
and also build on WeakMaps, to preserve object identity
between the shadow object and the real object (1) across the
membrane and (2) on either side of the membrane. The main
goal of wrapping a library’s public API with a membrane, is
to be sure that each time an API is accessed, our enforcement
mechanism is invoked in a secure and transparent manner.
We rely on the ES Harmony reﬂection module shim by
Van Cutsem5 and its implementation of a generic membrane
abstraction, which is used as a building block of our imple-
mentation and is shown in Figure 9. The current prototype
runs seamlessly on Node.js v0.10.
Our ﬁrst stepping stone is to introduce the safe_require
function (see Figure 10) that virtualizes the require function
so that any additional library, called within the membrane,
can be intercepted by the framework.
This operation does not normally cost any additional
overhead since it is only done at system start-up and is
therefore completely immaterial during server operations. If
5https://github.com/tvcutsem/harmony-reﬂect
function newMembrane ( ifaceObj , policyObj ) {
return require (" membrane ")
. makeGenericMembrane ( ifaceObj , policyObj )
. target ;
1
2
3
4
5
}
Figure 9: We rely on a generic implementation,
available via the "membrane" library,
to wrap a
membrane around a given ifaceObj with the given
handler code in policyObj.
1
2
3
4
5
6
7
8
9
10
11
12
function safe_require ( libName ) {
var loadLib = function () {