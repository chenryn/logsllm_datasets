as StrongChain. We use two nodes, one of which controls a
share α of the hash rate, and another controls a share 1− α.
The nodes can broadcast information about blocks, although
we abstract away from most of the other network behav-
ior. We do not consider transactions (i.e., we mine empty
blocks), and we use a simpliﬁed model for the propagation
delays: delays are drawn from a Weibull distribution with
shape parameter 0.6 [31], although for Figure 3 the mean
was chosen to be negligible (more realistic values are chosen
for Table 1).
The black lines in Figure 3 demonstrate that when Tw/Ts =
1024, a miner with share 0.1% of the mining power has the
same coefﬁcient of reward variation as a miner with stake 9%
in Bitcoin. Also note that for Tw/Ts = 1024 and α ≥ 1%, the
coefﬁcient of variation does not substantially decrease any-
more, because nearly all of the reward variance is due to the
number of weak headers. Hence, there would be fewer rea-
sons for miners in our system to join large and cooperative
mining pools, which has a positive effect on the decentral-
ization of the system.
5.3 Chain Quality
One measure for the ‘quality’ of a blockchain is the stale
rate of blocks [16], i.e., the percentage of blocks that ap-
pear during forks and do not make it onto the main chain.
This is closely related to the notion of mining power utiliza-
8The ‘stubborn mining’ strategy of [39] offers mild improvements over
[11] for powerful miners, but the comparison with StrongChain is similar.
We have also modeled StrongChain using a Markov decision process, in
a way that is similar to the recently proposed framework of [51]. Due to
the state space explosion problem, we could only investigate the protocol
with a small number of expected weak headers, but we have not found any
strategies noticeably that are better than those presented.
828    28th USENIX Security Symposium
USENIX Association
10−410−310−210−1100100101102αCoeﬃcientofVariationBitcoinTw/Ts=2Tw/Ts=8Tw/Ts=64Tw/Ts=1024Latency Bitcoin
Tw/Ts = 2
Tw/Ts = 64
Tw/Ts = 1024
StrongChain
strong stale rate medium
low
high
low
weak stale rate medium
high
low
fairness medium
high
.0023
.0073
.0243
—
—
—
.9966
.9276
.7951
γ = 1
.0025
.0082
.0297
.0043
.0142
.0400
.9814
.9384
.7640
γ = 1
.0021
.0087
.0242
.0047
.0151
.0459
.9749
.9570
.7978
γ = 7
.0026
.0077
.0263
.0049
.0154
.0474
.9747
.9360
.7820
γ = 63
.0028
.0078
.0247
.0046
.0149
.0452
.9838
.9364
.7757
γ = 1
.0023
.0084
.0274
.0049
.0145
.0469
.9645
.9329
.7756
γ = 10
.0025
.0067
.0249
.0047
.0147
.0455
.9809
.9400
.7766
γ = 1023
.0019
.0081
.0263
.0047
.0149
.0463
.9812
.9385
.7775
Table 1: For several different protocols, the strong block stale rate, weak header rate, and the ‘fairness’ for an α-strong honest miner with
α = 0.1. Here, fairness is deﬁned as the ratio between the observed share of the reward and the ‘fair’ share of the rewards (i.e, 0.1). ’Low’,
’medium’, and ’high’ latencies refer to the mean of the delay distribution in the simulator; these are roughly 0.53 seconds, 5.3 seconds, and
53 seconds respectively. The simulations are based on a time period corresponding to roughly 20 000 blocks.
In Figure 4a, we have depicted the proﬁtability of this self-
ish mining strategy for different choices of Tw/Ts. As we
can see, for Tw/Ts = 1024 the probability of being ‘ahead’
after two strong blocks is so low that the strategy only be-
gins to pay off when the attackers’ mining power share is
close to 45% — this is an improvement over Bitcoin, where
the threshold is closer to 33%.
StrongChain does introduce new adversarial strategies
based on the mining of new weak headers. Some exam-
ples include not broadcasting any newly found weak blocks
(“reclusive” mining), refusing to include the weak headers
of other miners (“spiteful” mining), and postponing the pub-
lication of a new strong block and wasting the weak headers
found by other miners in the meantime. In the former case,
the attacker risks losing their weak blocks, whereas in both of
the latter two cases, the attacker risks their strong block go-
ing stale as other blocks and weak headers are found. Hence,
these are not cost-free strategies. Furthermore, because the
number of weak headers does not affect the difﬁculty rescale,
the attacker’s motive for increasing the stale rate of other
miners’ weak headers is less obvious (although in the long
run, an adversarial miner could push other miners out of the
market entirely, thus affecting the difﬁculty rescale).
In Figure 4b, we have displayed the relative payout (with
respect to the total rewards) of a reclusive α-strong miner —
this strategy does not pay for any α < 0.5. In Figure 4c, we
have depicted the relative payoff of a spiteful mine who does
not include other miners’ weak blocks unless necessary (i.e.,
unless others’ weak blocks together contribute more than R
to the difﬁculty, which would mean that any single block
found by the spiteful miner would always go stale). For low
latencies (the graphs were generated with an average latency
of 0.53 seconds), the strategy is almost risk-free, and the at-
tacker does manage to hurt other miners more than herself,
leading to an increased relative payout. However, as dis-
played in Figure 4d, there are no absolute gains, even mild
(a)
(c)
(b)
(d)
Figure 4: Payoffs of an α-strong adversarial miner for different
strategies. Figure (a): relative payoff of a selﬁsh miner following
the strategy of [11], compared to an (1− α)-strong honest miner.
Figure (b): relative payoff of a reclusive miner who does not broad-
cast her weak blocks. Figure (c): relative payoff (with respect to
the rewards of all miners combined) of a spiteful miner, who does
not include other miners’ weak blocks unless necessary. Figure
(d): absolute payoff of a spiteful miner, with 12.5 BTC on aver-
age awarded per block. We consider Bitcoin and StrongChain with
different choices of Tw/Ts, with γ = log2(Tw/Ts).
losses. As mentioned earlier, the weak headers do not af-
fect the difﬁculty rescale so there is no short-term incentive
to engage in this behavior — additionally there is little gain
in computational overhead as the attacker still needs to pro-
cess her own weak headers. In Section 6.1 we will discuss
protocol updates that can mitigate these strategies regardless.
USENIX Association
28th USENIX Security Symposium    829
00.10.20.30.40.500.20.40.60.8αRelativepayoﬀofselﬁshminerBitcoinTw/Ts=2Tw/Ts=8Tw/Ts=64Tw/Ts=1024Honest00.10.20.30.40.500.20.4αRelativepayoﬀofreclusiveminerBitcoinTw/Ts=2Tw/Ts=8Tw/Ts=64Tw/Ts=1024Honest00.10.20.30.40.500.20.40.6αRelativepayoﬀofspitefulminerBitcoinTw/Ts=2Tw/Ts=8Tw/Ts=64Tw/Ts=1024Honest00.10.20.30.40.50246αAbsolutepayoﬀofspitefulminerBitcoinTw/Ts=2Tw/Ts=8Tw/Ts=64Tw/Ts=1024Honest6 Discussion
6.1
Impact of the Parameter Choice
The results presented in Section 5 required several parame-
ters to be ﬁxed. First of all, we had to choose γ, which de-
termines the relative contribution of the weak headers to the
total mining rewards. Second, there is the contribution of the
weak blocks to the chain difﬁculty, which in the chainPoW()
function in Algorithm 1 was set to be only Tmax/Tw. This
means that the PoW of a weak header relative to a strong
block’s PoW — we call this the difﬁculty factor — is ﬁxed
to be Ts/Tw. In the following, we ﬁrst discuss the relevant
trade-offs and then motivate our choice.
When both γ and the difﬁculty factor are low, the impact
on the reward variance of the miners (as per Figure 3) will be
mild as the strong block rewards still constitute about 50%
of the mining rewards. This reliance on the block rewards
also means that ‘spiteful’ mining as discussed in Section 5.4
is disincentivized as the risk of strong blocks going stale still
has a considerable impact on total rewards. However, selﬁsh
mining as proposed in [11] relies on several blocks in a row
being mined in secret, and even for a low difﬁculty factor it
becomes much harder for the attacker’s chain to stay ‘ahead’
of the honest chain, as the latter accumulates strength from
the weak headers at a faster rate. Hence, in this setting we
only gain protection against selﬁsh mining.
When γ is high but the difﬁculty factor is not (which is
the setting of Section 5), then in addition to disincentivizing
selﬁsh mining, the reward variances become much less de-
pendent on the irregular strong block rewards. This beneﬁts
small miners and reduces centralization, as we also discuss
in Section 6.2. However, spiteful mining will have more of
an impact as the possible downside (i.e., a latency-dependent
increase in the strong block stale rate) will have less of an ef-
fect on the total rewards.
When both γ and the difﬁculty factor are high, the impact
of spiteful mining is mitigated. The reason is that blocks
quickly accumulate enough weak headers to outweigh a
strong block, and in this case spiteful miners need to adopt
the other weak blocks or risk their strong block becoming
stale with certainty. The downside in this setting is that the
system-wide block stale rate is increased. For example, if
each weak header contributes γTs/Tw to the difﬁculty and
γ = 10, then after (on average) one minute enough weak
headers are found to outweigh a strong block, and if prop-
agation of the block takes longer than one minute then some
miners will not adopt the block, increasing the likelihood of
a fork.
In this paper, we have chosen the second of the three ap-
proaches — a moderately high γ, yet a minor difﬁculty fac-
tor. The reason is that the only downside (spiteful mining)
was considered less of a concern than the other downsides
(namely a low impact on reward variances and a higher block
(a)
(b)
Figure 5: The deviation from the network time that an α-strong
adversary can introduce for its mined blocks by slowing (the left
graph) and accelerating (the right graph) timestamps.
5.5 More Reliable Timestamps
Finally, we conducted a series of simulations to investigate
how the introduced redeﬁnition of timestamps interpretation
(see getTimestamp() in Algorithm 1 and Section 4.5) inﬂu-
ences the timestamp reliability in an adversarial setting. We
assume that an adversary wants to deviate blockchain times-
tamps by as much as possible. There are two strategies for
such an attack, i.e., an adversary can either “slow down”
timestamps or “accelerate” them. In the former attack, the
best adversary’s strategy is to use the minimum acceptable
timestamp in every header created by the adversary. Namely,
the adversary sets its timestamps to the median value of the
last eleven blocks (a header with a lower timestamp would
not be accepted by the network – see Section 2.2). As for the
latter attack, the adversary can analogously bias timestamps
towards the future by putting the maximum acceptable value
in all her created headers. The maximum timestamp value
accepted by network nodes is two hours in the future with re-
spect to the nodes’ internal clocks (any header with a higher
timestamp would be rejected).
In our study, we assume that honest nodes maintain the
network time which the adversary tries to deviate from. We
consider the worst-case scenario, which is when the adver-
sary, who also biases all her header timestamps, mines the
strong block. We measure (over 10000 runs) how such a
malicious timestamp can be mitigated by our redeﬁnition of
the block timestamps interpretation. We present the obtained
results in Figure 5, and as shown in the slow-down case
our protocol achieves much more precise timestamps than
Bitcoin (the difference is around 2000 seconds). Similarly,
when the adversary accelerates timestamps, our protocol can
mitigate it effectively, adjusting the adversarial timestamps
by 2000-3500 seconds towards the correct time. This ef-
fect is achieved due to the block’s timestamp calculation as a
weighted average of all block headers. The adversary could
try to remove honest participants’ weak headers in order to
give a stronger weight to its malicious timestamps, but in
Section 6.1 we discuss ways to mitigate it.
830    28th USENIX Security Symposium
USENIX Association
00.10.20.30.40.52,0004,0006,0008,000αDeviationfromthecurrenttime(s)BitcoinTw/Ts=2Tw/Ts=8Tw/Ts=64Tw/Ts=102400.10.20.30.40.52,0004,0006,0008,000αDeviationfromthecurrenttime(s)stale rate respectively) for two reasons: a) because spiteful
mining does not lead to clear gains for the attacker, and b)
because it only has a large impact on other miners’ proﬁts
if the attacker controls a large share of the mining power,
whereas the emergence of large mining pools is exactly what
StrongChain discourages. The speciﬁc value of γ = 10 for
Tw/Ts = 1024 (or γ = log2(Tw/Ts) in general) was chosen
to sufﬁciently reduce mining reward variances, yet leaving
some incentive to discourage spiteful mining.
The protocol can be further extended to disincentivize
spiteful mining, e.g., by additionally awarding strong block
ﬁnders a reward that is proportional to the number of weak
headers included. This would make StrongChain more simi-
lar to Ethereum, where stale block (‘uncle’) rewards are paid
both to the miner of a stale block and the miner of the suc-
cessful block that included it (see Section 8 for additional
discussion of Ethereum’s protocol). However, we leave such
modiﬁcations and their consequences as future work.
6.2 StrongChain and Centralized Mining
Decentralized mining pools aim to reduce variance while
providing beneﬁts for the system (i.e., trust minimization for
pools, and a higher number of validating nodes). However,
mining in Bitcoin is in fact dominated by centralized mining
pools whose value proposition, over decentralized pools, is
an easy setup and participation. Therefore, rational miners
motivated by their own beneﬁt, instead of joining decentral-
ized pools prefer centralized “plug-and-play” mining. It is
still debatable whether centralized mining pools are beneﬁ-
cial or harmful to the system. However, it has been proved
multiple times, that the concentration of signiﬁcant comput-
ing power caused by centralized mining is risky and should
be avoided, as such a strong pool has multiple ways of mis-
behaving and becomes a single point of failure in the system.
One example is the pool GHash.IO, which in 2014 achieved
more than 51% of the mining power. This undermined trust
in the Bitcoin network to the extent that the pool was forced
to actively ask miners to join other pools [12].
In order