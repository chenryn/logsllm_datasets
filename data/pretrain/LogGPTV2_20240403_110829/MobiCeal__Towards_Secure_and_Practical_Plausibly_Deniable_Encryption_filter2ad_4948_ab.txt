device are mapped to a pool device by the thin-pool target,
while the thin target maps this pool device to multiple thin
volumes (See Fig. 1). On top of a thin volume, a block-based
ﬁle system can be deployed or an encrypted block device can
be created using dm-crypt.
III. MODEL AND ASSUMPTIONS
A. Adversarial Model and Assumptions
We consider a computationally bounded adversary who can
take snapshot of the block device storage (e.g., eMMC card,
SD card, which are usually exposed as block devices using
ﬂash translation layer) of a mobile device at different points
of time [23], [15], [32], [33]. For example, when the device
owner enters/exits a guarded facility or crosses border, the
observer takes a snapshot of the mobile device storage and tries
to compromise deniability by analyzing the snapshots. The
adversary can have full knowledge of MobiCeal’s design, but
should not know the hidden password or the encryption key of
the hidden volume. The adversary can obtain root privilege of
the device and can access both the internal and external storage
each time when capturing it. In addition, it can coerce the
device owner to reveal the passwords/encryption keys, in order
to decrypt the device to obtain sensitive data. Furthermore, the
adversary can use any password cracking programs, perform
advanced computer forensics on the disk image, or correlate
different snapshots to compromise deniability.
Similar to all the prior PDE systems for mobile devices [21],
[33], [43], our design also relies on the following assump-
tions: The adversary is assumed to be not able to capture
the device owner when he/she is working with the hidden
volume. Otherwise, the sensitive hidden data will be trivially
disclosed. We also assume that the adversary will not continue
coercing the device owner once being convinced that
the
passwords or encryption keys have been revealed. The user
should refrain from revealing the hidden passwords/hidden
keys as disclosing hidden sensitive data will create life threat
to him/her. Furthermore, MobiCeal needs to be merged with
Android code stream, so that its availability itself is not a
456
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
red ﬂag [21], [34], [35], [43], [20]. The mobile OS, kernel,
bootloader, ﬁrmware, and the baseband OS are malware-free,
and the user does not use any malicious apps that collect
information of the hidden volume or the hidden password.
B. Notations
We assume that there exists a sequence of independent
volumes {Vi}, i ∈ [1, max] on a hard disk, where max
denotes the maximal number of volumes. To store information
into public or hidden volumes, each user needs to choose a set
of passwords {Pi} which in turn serves as encryption keys.
Each volume Vi has a unique password Pi, and each volume
has at most ni ∈ N blocks of data, where N denotes the
number of blocks. Note that we allow users to choose a secret
number of volumes l ∈ max. A volume encryption scheme
consists of the following Setup, Read and Write operations
on the disk.
takes (λ, t,P,B, [n1,··· , nl]) as input and
outputs a sequence of volumes {V1,··· , Vl,··· ,Vmax}.
Note that λ denotes the security parameter, t denotes the
number of available blocks, and B denotes the block size.
• Read. It takes (b, i,P) as input, returns data d in block
b of volume Vi if i ≤ l. Note that Vi is the output of
Setup(λ,P).
• Write. It takes (b, d, i,P) as input, stores data d in block
b of volume Vi if i ≤ l. Note that Vi is the output of
Setup(λ,P).
• Setup. It
C. Security Model
Informally, a coercive multi-snapshot adversary A attempts
to obtain any stored data from a hard disk that employs a
hybrid 1 volume system. We then formally deﬁne a multi-
snapshot security game between a Probabilistic Polynomial-
Time (PPT) adversary A and a simulator S as follows.
• Setup. Upon receiving a required volume number l ∈
max from A, S ﬁrst chooses a set of passwords {Pi} ∈
{0, 1}|λ|, where i ∈ [1,··· , l]. Second, S initializes a
set of public volume {Vw} that associates with a set of
passwords {Pw} (w ∈ [1,··· , k], k ≤ max − l). Third,
S generates two independent hybrid volume encryption
schemes Σ0 and Σ1 with respect to two sets of passwords
with size l and l−1 respectively. Eventually, S sends two
sets of passwords {Pw} and {P1,···Pl−1}, and an initial
snapshot D0 of the disk to A. S also tosses a random
coin b which will be used later in the game. Note that
the initial snapshot D0 is taking on two sets of volumes
{V1,··· ,Vw},{V1,··· ,Vl}.
• Training. A chooses two access patterns (O0,i,O1,i) and
a value di, and sends them to S. Note that the value di
speciﬁes whether A would like a snapshot of the disk
after execution i. S “executes” one of access patterns
based on bit b, and sends a snapshot Di of the disk to A
if di = 1; Otherwise, proceed to next execution.
1“Hybrid” means that a disk may consist of public and hidden volumes.
(cid:2)
A ← Di ←
(O1,i)
ExecuteΣ1
ExecuteΣ0 (O0,i)
b = 1
b = 0
Note that Oj,i denotes the access pattern j ∈ [0, 1]
of execution i ∈ [1, poly(λ)]. We allow A to obtain
snapshots with on-event frequency2, and we specify the
restrictions of access patterns (e.g., O0 = [o0,1,··· , oi,n])
as follows.
– If access o0,i is a Read/Write in volume Vj, j ∈
[0, l − 1], then access o1,i in pattern O1 must be
equal to o0,i;
– If access o0,i contains a Read/Write in volume
Vj, j ∈ [0, l], then at least one public volume Vw
is randomly refreshed after each execution i;
indeed contains a Read/Write in
volume Vl, then operations can be plausibly applied
to one of public volumes {V1,···Vw}.
• Guess. A outputs bit b(cid:2). If b(cid:2) = b, then S outputs 1;
– If access o0,i
Otherwise, S outputs 0.
We deﬁne the advantage of A in the above game as
AdvA(λ) = |Pr[S → 1] − 1/2|.
Deﬁnition III.1. We say a hybrid volume encryption scheme
Σ has multi-snapshot security if for any PPT A, AdvA(λ) is
a negligible function of the security parameter λ.
IV. MOBICEAL DESIGN
A. Design Overview
The existing hidden volume-based PDE systems for mobile
devices [21], [34], [35], [43], [20], [27] cannot defend against
a multi-snapshot adversary. This is because, they hide sensitive
data among randomness being ﬁlled initially across the disk.
However, by comparing snapshots being captured at different
points of time, the multi-snapshot adversary can easily detect
changes over randomness which were not supposed to happen,
and may suspect existence of hidden data. A fundamental
limitation of the hidden volume-based approach is that, the
randomness is ﬁlled one time initially (i.e., static), which
is deﬁnitely not able to defend against the multi-snapshot
adversary, who is “dynamic”.
To defend against such a dynamic attacker, the intuition
is to also make the defense dynamic. A few existing PDE
schemes followed this idea by incorporating ORAM [15],
[19], in which each single write is turned to be oblivious to
the adversary. All those attempts, however, are problematic,
due to the following reasons. First, ORAM is prohibitively
expensive in terms of both computation and I/O [15], making
it unsuitable for mobile devices that are equipped with limited
resources. Second, we found all those ORAM-based PDEs
rely on an assumption that protecting every access pattern is
2Adversary is allowed to have plausible hidden access pattern choice
with on-event frequency snapshots in our proposed multi-snapshot security
model for hybrid volume encryption schemes. Please refer to [15] for detailed
description of these settings.
457
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
necessary for mitigating a multi-snapshot adversary. ORAM
was originally designed to hide access pattern over data being
outsourced to an untrusted third party (e.g., a cloud provider).
In this setting, the cloud provider is able to constantly monitor
access of the data (i.e., highly dynamic) due to its full control
over the data during the lifetime. In a mobile device setting
however, the adversary does not have a full control over the
victim’s mobile device during its lifetime, and is thus not
able to constantly monitor each access (i.e., less dynamic).
Therefore, we believe that hiding every access is unnecessary
for mobile devices and the ORAM-based approach is overkill
for the less dynamic attacker in the mobile device setting.
Another PDE system for mobile devices, DEFY [33], was
designed for a less dynamic attacker, but it strongly relies on
the system properties provided by a speciﬁc ﬂash ﬁle system,
and is shown to be vulnerable to deniability compromise [27].
To achieve deniability against a less dynamic attacker with-
out relying on the expensive ORAM [15], [19] or speciﬁc
system properties [33], we propose a dummy-write approach.
Speciﬁcally, each time when writing public non-sensitive data,
the system will perform a few additional artiﬁcial writes of
randomness. In this way, although the adversary can obtain
multiple snapshots, uncountable changes (i.e., caused by s-
toring the hidden data) observed by the adversary through
comparing snapshots can be denied as being caused by the
dummy writes. Note that the hidden sensitive data should
be encrypted using a secret key, such that without having
access to the secret key, the encrypted hidden data should be
indistinguishable from the randomness created by the dummy
writes. A few questions still need to be answered.
1) How many dummy writes should be performed for each
public write?
For a good obfuscation, the number of dummy writes being
performed each time should vary. In our design, the number
of dummy writes follows exponential distribution. We choose
exponential distribution, since it can ensure that the number
of dummy writes varies in a wide range and, meanwhile, the
probability of generating a large number of dummy writes
each time can be controlled as small to avoid inefﬁcient I/O
performance and disk utilization.
2) How to generate the data for each dummy write?
The dummy data are used to deny the existence of encrypted
hidden sensitive data. Therefore, without having access to
the decryption key,
the adversary should not be able to
differentiate the encrypted hidden data from the dummy data.
To achieve this, the dummy data can be created using the
same encryption algorithm (as the hidden data) with random
input and random keys, and the corresponding key should be
discarded after each encryption.
3) How can the system prevent the public data from over-
writing the hidden data?
As the public mode has no knowledge on the existence of
the hidden data, it may easily cause overwrites to them. We
need a technique to ensure that newly written public data
will not over-write the existing hidden sensitive data. The
hidden-volume technique (Sec. II-B) addresses the over-write
458
issue by placing the hidden volume to the end of the disk.
However, such a technique is only suitable for ﬁle systems
that perform writes sequentially on the storage media (e.g.,
FAT32) and over-writes are still possible when the disk is
heavily used. Steganographic ﬁle systems (Sec. II-B) address
this issue by utilizing the global bitmap in the ﬁle system to
separate the hidden data from the public data. This, however,
requires extensive modiﬁcations of the large code base of the
ﬁle system being used, which contradicts our “ﬁle system
friendly” design principle.
To resolve the over-write issue, we borrow the “global
bitmap” idea of the steganographic ﬁle system, but move
it to the block layer. The global bitmap will keep track of
blocks being used by all the public, dummy, and hidden data.
Therefore, when hidden data are written, the corresponding
blocks in the bitmap will be marked as “allocated”, and will
not be used by public/dummy data. This will not lead to
deniability compromise, since the bitmap information for the
hidden data can be denied as for the dummy data.
4) What other attacks the design is still vulnerable to?
The current design is ﬁne if the system always writes a
small amount of hidden data occasionally. However, if the
system writes a large hidden ﬁle, the adversary may observe
from the snapshot that the public data are followed by a large
amount of randomness3, and may suspect existence of hidden
sensitive information, compromising deniability. To avoid this
deniability compromise, all the data (including public, dummy,
and hidden data) should be written to random locations across
the disk. Following the aforementioned ideas, we design a
basic MobiCeal scheme which can defend against a multi-
snapshot adversary (Sec. IV-B). We also extend the basic
MobiCeal to support multiple levels of deniability (Sec. IV-
C). In addition, we describe additional design considerations
of MobiCeal (Sec. IV-D).
B. A Basic MobiCeal Scheme
We ﬁrst introduce three types of virtual volumes:
(a) Public volume. A public volume is used for daily oper-
ations which provides storage encryption without deniability.
The user can enter the decoy password during booting in order
to use the public volume. The public volume is encrypted
using a decoy key via FDE (Sec. II-A). The decoy key can be
computed using the decoy password. When the user is coerced,
he/she can simply disclose the decoy password, protecting the
hidden sensitive data.
(b) Hidden volume. A hidden volume is used when the
user needs to store sensitive data, whose existence needs to
be denied when the user is coerced. The hidden volume is
encrypted using a hidden key via FDE. The hidden key can
be computed using the hidden password. The user can enter
the hidden password during booting to use the hidden volume.
(c) Dummy volume. A dummy volume only stores data created
by dummy writes. The purpose of the dummy volume is
3Writes performed by a ﬁle system (e.g., FAT and Ext4) usually exhibit a
certain level of spatial locality.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
to obfuscate the existence of the hidden volume. Without
having access to the hidden key, the adversary is not able to
differentiate whether a volume (which is not a public volume)
is a hidden volume or a dummy volume. In this way, the user
can deny the existence of the hidden volume by interpreting
it as a dummy volume.
To ensure that a multi-snapshot adversary cannot distinguish
the hidden volume from the dummy volume, we introduce
the dummy write mechanism and the random allocation s-
trategy. Note that the system keeps the metadata (e.g., the
global bitmap, the mappings of each virtual volume and the
corresponding blocks) in a known location and the adversary
can have access to them. This will not compromise deniability,
since the metadata for the hidden volume can be interpreted
as that for the dummy volume.
Dummy Write. We use a dummy write mechanism to ob-
fuscate writes to the hidden volume. When a data block is
allocated to the public volume to store data (i.e., a public
write is issued), a dummy write will be performed with a
certain probability. To prevent the adversary from learning the
pattern of dummy writes, the dummy write will be performed
if and only if the following condition satisﬁes:
rand ≤ stored rand mod x.
Here, x is a positive integer constant (e.g., we can ﬁx x as
50 when initializing the system). stored rand is a random
number which is periodically updated (e.g., daily). To obtain
a new value of stored rand, we can utilize pseudorandom
number generator, or a more secure way is to extract it from