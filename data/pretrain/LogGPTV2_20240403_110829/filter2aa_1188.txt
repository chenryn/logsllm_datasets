# DEFCON 16: Black vs. White - The Complete Lifecycle of a Real-World Breach

**Date:** August 13, 2008  
**Presenters:** David Kennedy (ReL1K), Ken Stasiak (Static), Scott White (Sasquatch), Andrew Weidenhamer (Leroy)  
**CD Distribution Note:** This presentation was specifically created for CD distribution at DEFCON. It includes live demonstrations and box rooting, with additional content to reproduce the attacks demonstrated.

## Presentation Overview
- **Brief Introduction:** 3 minutes
- **Live Demonstrations (Black Hat):** 15 minutes
- **Tool Demonstrations (Black Hat):** 40 minutes (Two tools)
- **Manual Techniques:** 15 minutes
- **Detecting the Breach (White Hat):** 5 minutes
- **What’s the Malware Doing? (White Hat):** 10 minutes
- **How We Built It and Got It Past AV (White Hat):** 20 minutes
- **End Presentation**

## Scenario
In 2007, a Fortune 100 company hired us to perform a penetration test to simulate a real-world attack. They wanted a comprehensive view from start to finish. Our task involved:
- Gaining root access both internally and externally using advanced hacking techniques.
- Installing malware that surprisingly evaded antivirus detection.
- Simulating a scenario where the client suspects a server is compromised, but their antivirus and intrusion prevention systems are ineffective, especially against web application layer attacks.

## Live Demonstration
We will now demonstrate the initial stages of the attack.

## Tool Demonstrations – Special Release
We have developed two custom tools for DEFCON:
- **SA Exploiter Beta**
- **SQLPwn Beta**

## The Initial Attack
- **Login Form:** Simple SQL Injection to trigger error messages.

### SQL Injection Basics
- **Basic SQL Syntax:**
  ```sql
  SELECT column_name FROM table_name WHERE condition;
  ```
- **Example Query:**
  ```sql
  SELECT user_id FROM users WHERE login_name = 'admin' AND password = 'p455w0rd';
  ```
  - **Injection Points:**
    - `user_id`
    - `login_name`
    - `password`

- **Exploitation Example:**
  ```sql
  ' OR 1=1-- 
  ```

### Exploiting XP_Cmdshell
- **Definition:** `XP_CMDSHELL` in MSSQL executes a given command string as an operating system command shell and returns any output as rows of text.
- **Privileges:** By default, the SQL Server service/agent runs as SYSTEM, providing elevated privileges.
- **Challenges:** Blind SQL Injection and payload delivery through `XP_CMDSHELL` can be cumbersome and slow.

### Binary to Hex Payload Delivery
- **Process:**
  1. Convert raw binary to formatted hex.
  2. Use `echo` on the underlying OS to write the hex to a text file.
  3. Use Windows Debug to convert the hex back to a binary.
  4. Benefits: Bypass egress filtering for FTP/TFTP.
  5. Limitation: Debug supports up to 64KB file size.

### Advanced Payload Delivery Methods
- **Option 1: HTTP GET**
  - Deliver a small payload (less than 4KB) that creates a raw socket and pulls information from an HTTP server.
  - Drawbacks: Relies on egress connections, which may be detected by IDS/IPS.
- **Option 2: FTP Answer Files**
  - Basic method using FTP commands.
  - Drawbacks: Easily detectable by IDS/IPS and requires multiple egress connections.
- **The Royale with Cheese:**
  - Dump a small payload (5KB) onto the server.
  - Use debug to convert it from hex to binary.
  - Echo the malicious payload into a file.
  - Small payload converts hex to raw binary and outputs to a file.
  - No longer need to use debug for large conversions.
  - Can deliver any size binary file to the remote server.

## SA Exploiter
- **Features:**
  - Windows GUI tested on Mono/Wine.
  - String generator for automated SQL Injection.
  - Delivers +64KB payloads through binary injection.
  - Adds local administrators, disables AV, enables RDP, injects VNC, etc.
  - Integrates Metasploit's Meterpreter through SQL Injection.

## SQLPwn
- **Functionality:**
  - Scans a subnet range (e.g., 192.168.1.1-254) for ports 80 and 443.
  - Obtains hostnames and crawls entire sites.
  - Launches error-based and blind SQL Injection attacks.
  - Enables `XP_CMDSHELL` and spawns a shell through binary to hex payload.
  - Sends +64KB payloads.

## Malware Live Demonstration
- **Reverse Shell Detection:**
  - Original reverse shell packed with API redirection, easily identified by AVG.
- **PE Characteristics:**
  - Compressed with a packer (VSize much larger than RSize).
  - Section flags marked as executable and writable.
- **Code Cave:**
  - Added code to a section to avoid overwriting unpacked data.
  - Second-stage decoding and import resolution.
- **Detached Process:**
  - Uses PID 5236, not listed as active.
  - Inspects system calls and network capabilities to find the reverse shell.

## Fun Topic: 6 Hacks in 6 Minutes
- **Live Demonstration:** 6 hacks in 6 minutes.

## Conclusion
Thank you for your attention. We hope this presentation provided valuable insights into the lifecycle of a real-world breach.