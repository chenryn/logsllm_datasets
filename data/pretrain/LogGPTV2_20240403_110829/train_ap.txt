as well.
.pp
.br telnetd (8)
sets up a \fblogin_process\fp entry and leaves the rest to
.br login (1)
as usual.
after the telnet session ends,
.br telnetd (8)
cleans up utmp in the described way.
.pp
the \fiwtmp\fp file records all logins and logouts.
its format is exactly like \fiutmp\fp except that a null username
indicates a logout
on the associated terminal.
furthermore, the terminal name \fb\(ti\fp
with username \fbshutdown\fp or \fbreboot\fp indicates a system
shutdown or reboot and the pair of terminal names \fb|\fp/\fb}\fp
logs the old/new system time when
.br date (1)
changes it.
\fiwtmp\fp is maintained by
.br login (1),
.br init (1),
and some versions of
.br getty (8)
(e.g.,
.br mingetty (8)
or
.br agetty (8)).
none of these programs creates the file, so if it is
removed, record-keeping is turned off.
.sh files
.i /var/run/utmp
.br
.i /var/log/wtmp
.sh conforming to
posix.1 does not specify a
.i utmp
structure, but rather one named
.ir utmpx ,
with specifications for the fields
.ir ut_type ,
.ir ut_pid ,
.ir ut_line ,
.ir ut_id ,
.ir ut_user ,
and
.ir ut_tv .
posix.1 does not specify the lengths of the
.i ut_line
and
.i ut_user
fields.
.pp
linux defines the
.i utmpx
structure to be the same as the
.i utmp
structure.
.ss comparison with historical systems
linux utmp entries conform neither to v7/bsd nor to system v; they are a
mix of the two.
.pp
v7/bsd has fewer fields; most importantly it lacks
\fiut_type\fp, which causes native v7/bsd-like programs to display (for
example) dead or login entries.
further, there is no configuration file
which allocates slots to sessions.
bsd does so because it lacks \fiut_id\fp fields.
.pp
in linux (as in system v), the \fiut_id\fp field of a
record will never change once it has been set, which reserves that slot
without needing a configuration file.
clearing \fiut_id\fp may result
in race conditions leading to corrupted utmp entries and potential
security holes.
clearing the abovementioned fields by filling them
with null bytes is not required by system v semantics,
but makes it possible to run
many programs which assume bsd semantics and which do not modify utmp.
linux uses the bsd conventions for line contents, as documented above.
.pp
.\" mtk: what is the referrent of "them" in the following sentence?
.\" system v only uses the type field to mark them and logs
.\" informative messages such as \fb"new time"\fp in the line field.
system v has no \fiut_host\fp or \fiut_addr_v6\fp fields.
.sh notes
unlike various other
systems, where utmp logging can be disabled by removing the file, utmp
must always exist on linux.
if you want to disable
.br who (1),
then do not make utmp world readable.
.pp
the file format is machine-dependent, so it is recommended that it be
processed only on the machine architecture where it was created.
.pp
note that on \fibiarch\fp platforms, that is, systems which can run both
32-bit and 64-bit applications (x86-64, ppc64, s390x, etc.),
\fiut_tv\fp is the same size in 32-bit mode as in 64-bit mode.
the same goes for \fiut_session\fp and \fiut_time\fp if they are present.
this allows data files and shared memory to be shared between
32-bit and 64-bit applications.
this is achieved by changing the type of
.i ut_session
to
.ir int32_t ,
and that of
.i ut_tv
to a struct with two
.i int32_t
fields
.i tv_sec
and
.ir tv_usec .
since \fiut_tv\fp may not be the same as \fistruct timeval\fp,
then instead of the call:
.pp
.in +4n
.ex
gettimeofday((struct timeval *) &ut.ut_tv, null);
.ee
.in
.pp
the following method of setting this field is recommended:
.pp
.in +4n
.ex
struct utmp ut;
struct timeval tv;
gettimeofday(&tv, null);
ut.ut_tv.tv_sec = tv.tv_sec;
ut.ut_tv.tv_usec = tv.tv_usec;
.ee
.in
.\" .pp
.\" note that the \fiutmp\fp struct from libc5 has changed in libc6.
.\" because of this,
.\" binaries using the old libc5 struct will corrupt
.\" .ir /var/run/utmp " and/or " /var/log/wtmp .
.\" .sh bugs
.\" this man page is based on the libc5 one, things may work differently now.
.sh see also
.br ac (1),
.br date (1),
.br init (1),
.br last (1),
.br login (1),
.br logname (1),
.br lslogins (1),
.br users (1),
.br utmpdump (1),
.br who (1),
.br getutent (3),
.br getutmp (3),
.br login (3),
.br logout (3),
.br logwtmp (3),
.br updwtmp (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2005 robert love
.\" and copyright, 2006 michael kerrisk
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" 2005-07-19 robert love  - initial version
.\" 2006-02-07 mtk, various changes
.\"
.th inotify_add_watch 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
inotify_add_watch \- add a watch to an initialized inotify instance
.sh synopsis
.nf
.b #include 
.pp
.bi "int inotify_add_watch(int " fd ", const char *" pathname ", uint32_t " mask );
.fi
.sh description
.br inotify_add_watch ()
adds a new watch, or modifies an existing watch,
for the file whose location is specified in
.ir pathname ;
the caller must have read permission for this file.
the
.i fd
argument is a file descriptor referring to the
inotify instance whose watch list is to be modified.
the events to be monitored for
.i pathname
are specified in the
.i mask
bit-mask argument.
see
.br inotify (7)
for a description of the bits that can be set in
.ir mask .
.pp
a successful call to
.br inotify_add_watch ()
returns a unique watch descriptor for this inotify instance,
for the filesystem object (inode) that corresponds to
.ir pathname .
if the filesystem object
was not previously being watched by this inotify instance,
then the watch descriptor is newly allocated.
if the filesystem object was already being watched
(perhaps via a different link to the same object), then the descriptor
for the existing watch is returned.
.pp
the watch descriptor is returned by later
.br read (2)s
from the inotify file descriptor.
these reads fetch
.i inotify_event
structures (see
.br inotify (7))
indicating filesystem events;
the watch descriptor inside this structure identifies
the object for which the event occurred.
.sh return value
on success,
.br inotify_add_watch ()
returns a watch descriptor (a nonnegative integer).
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eacces
read access to the given file is not permitted.
.tp
.b ebadf
the given file descriptor is not valid.
.tp
.b eexist
.i mask
contains
.b in_mask_create
and
.i pathname
refers to a file already being watched by the same
.ir fd .
.tp
.b efault
.i pathname
points outside of the process's accessible address space.
.tp
.b einval
the given event mask contains no valid events; or
.i mask
contains both
.b in_mask_add
and
.br in_mask_create ;
or
.i fd
is not an inotify file descriptor.
.tp
.b enametoolong
.i pathname
is too long.
.tp
.b enoent
a directory component in
.i pathname
does not exist or is a dangling symbolic link.
.tp
.b enomem
insufficient kernel memory was available.
.tp
.b enospc
the user limit on the total number of inotify watches was reached or the
kernel failed to allocate a needed resource.
.tp
.b enotdir
.i mask
contains
.b in_onlydir
and
.i pathname
is not a directory.
.sh versions
inotify was merged into the 2.6.13 linux kernel.
.sh conforming to
this system call is linux-specific.
.sh examples
see
.br inotify (7).
.sh see also
.br inotify_init (2),
.br inotify_rm_watch (2),
.br inotify (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\" and copyright 2015 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified sun jul 25 10:41:09 1993 by rik faith (PI:EMAIL)
.th memcpy 3  2021-03-22 "" "linux programmer's manual"
.sh name
memcpy \- copy memory area
.sh synopsis
.nf
.b #include 
.pp
.bi "void *memcpy(void *restrict " dest ", const void *restrict " src \
", size_t " n );
.fi
.sh description
the
.br memcpy ()
function copies \fin\fp bytes from memory area
\fisrc\fp to memory area \fidest\fp.
the memory areas must not overlap.
use
.br memmove (3)
if the memory areas do overlap.
.sh return value
the
.br memcpy ()
function returns a pointer to \fidest\fp.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br memcpy ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c89, c99, svr4, 4.3bsd.
.sh notes
failure to observe the requirement that the memory areas
do not overlap has been the source of significant bugs.
(posix and the c standards are explicit that employing
.br memcpy ()
with overlapping areas produces undefined behavior.)
most notably, in glibc 2.13
.\" glibc commit 6fb8cbcb58a29fff73eb2101b34caa19a7f88eba
a performance optimization of
.br memcpy ()
on some platforms (including x86-64) included changing the order
.\" from forward copying to backward copying
in which bytes were copied from
.i src
to
.ir dest .
.pp
this change revealed breakages in a number of applications that performed
copying with overlapping areas.
.\" adobe flash player was the highest profile example:
.\"   https://bugzilla.redhat.com/show_bug.cgi?id=638477
.\"   reported: 2010-09-29 02:35 edt by jchuynh
.\"   bug 638477 - strange sound on mp3 flash website
.\"
.\"   https://sourceware.org/bugzilla/show_bug.cgi?id=12518
.\"   bug 12518 - memcpy acts randomly (and differently) with overlapping areas
.\"   reported:       2011-02-25 02:26 utc by linus torvalds
.\"
under the previous implementation,
the order in which the bytes were copied had fortuitously hidden the bug,
which was revealed when the copying order was reversed.
in glibc 2.14,
.\" glibc commit 0354e355014b7bfda32622e0255399d859862fcd
a versioned symbol was added so that old binaries
(i.e., those linked against glibc versions earlier than 2.14)
employed a
.br memcpy ()
implementation that safely handles the overlapping buffers case
(by providing an "older"
.br memcpy ()
implementation that was aliased to
.br memmove (3)).
.sh see also
.br bcopy (3),
.br bstring (3),
.br memccpy (3),
.br memmove (3),
.br mempcpy (3),
.br strcpy (3),
.br strncpy (3),
.br wmemcpy (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/nextup.3
.\" copyright (c) tom bjorkholm & markus kuhn, 1996
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" 1996-04-01 tom bjorkholm 
.\"            first version written
.\" 1996-04-10 markus kuhn 
.\"            revision
.\" modified 2004-05-27 by michael kerrisk 
.\"
.th sched_setparam 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
sched_setparam, sched_getparam \- set and get scheduling parameters
.sh synopsis
.nf
.b #include 
.pp
.bi "int sched_setparam(pid_t " pid ", const struct sched_param *" param );
.bi "int sched_getparam(pid_t " pid ", struct sched_param *" param );
.pp
\fbstruct sched_param {
    ...
    int \fisched_priority\fb;
    ...
};
.fi
.sh description
.br sched_setparam ()
sets the scheduling parameters associated with the scheduling policy
for the thread whose thread id is specified in \fipid\fp.
if \fipid\fp is zero, then
the parameters of the calling thread are set.
the interpretation of
the argument \fiparam\fp depends on the scheduling
policy of the thread identified by
.ir pid .
see
.br sched (7)
for a description of the scheduling policies supported under linux.
.pp
.br sched_getparam ()
retrieves the scheduling parameters for the
thread identified by \fipid\fp.
if \fipid\fp is zero, then the parameters
of the calling thread are retrieved.
.pp
.br sched_setparam ()
checks the validity of \fiparam\fp for the scheduling policy of the
thread.
the value \fiparam\->sched_priority\fp must lie within the
range given by
.br sched_get_priority_min (2)
and
.br sched_get_priority_max (2).
.pp
for a discussion of the privileges and resource limits related to
scheduling priority and policy, see
.br sched (7).
.pp
posix systems on which
.br sched_setparam ()
and
.br sched_getparam ()
are available define
.b _posix_priority_scheduling
in \fi\fp.
.sh return value
on success,
.br sched_setparam ()
and