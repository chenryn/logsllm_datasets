# Title: Provably Authenticated Group Diffie-Hellman Key Exchange

## Authors
- Emmanuel Bresson
- Olivier Chevassut
- David Pointcheval
- Jean-Jacques Quisquater

### Abstract
Group Diffie-Hellman (GDH) protocols for Authenticated Key Exchange (AKE) are designed to provide a pool of players with a shared secret key, which can be used, for example, to achieve multicast message integrity. Despite several proposed schemes over the years, no formal treatment of this cryptographic problem has been provided. This paper introduces a security model for AKE and defines the fundamental goal of AKE (with "implicit" authentication) and the entity-authentication goal. We then present an authenticated GDH scheme within this model and prove its security.

### 1. Introduction
Group Diffie-Hellman (GDH) schemes for Authenticated Key Exchange (AKE) are designed to provide a pool of players communicating over an open network with a shared secret key, which can be used to achieve cryptographic goals such as multicast message confidentiality or data integrity. Secure virtual conferencing involving up to a hundred participants is an example of such a scenario [14]. In this context, group membership is static and known in advance. At startup, participants aim to establish a session key through a conversation. GDH schemes are attractive alternatives to methods that establish a session key between every pair of players or rely on a centralized key distribution center.

Over the years, several papers [2, 3, 13, 18, 20, 21, 27, 31, 32] have attempted to extend the well-known Diffie-Hellman key exchange [17] to the multi-party setting. These protocols exhibit various performance attributes but only provide informal analyses showing that they achieve the desired security goals. Some papers offer ad-hoc security analyses, and some of these schemes have later been found to be flawed [21, 26]. Other papers provide heuristic evidence of security without quantifying it. The remaining schemes assume authenticated links, thus not considering authentication as part of the protocol design.

In the paradigm of provable security [19], one identifies a concrete cryptographic problem, defines a formal model for it, and sets security goals. The model captures the capabilities of the adversary and the players. Within this model, one defines security goals and provides a proof of security for a particular scheme. The security proof aims to show that the scheme achieves the claimed security goals under computational security assumptions.

The fundamental security goal for a GDH scheme is Authenticated Key Exchange (AKE) with "implicit" authentication. In AKE, each player is assured that no other player outside the pool can learn any information about the session key. Another desirable goal is Mutual Authentication (MA), where each player is assured that its partners actually possess the distributed session key. MA typically requires more rounds, including one round of simultaneous broadcasts.

This paper assumes honest players who do not deviate from the protocol and whose instances erase internal data upon termination. Existing two-party protocols (e.g., SSL and IPsec) make this assumption. Dealing with dishonest players, like verifiable contributory [2], is important in some environments but less so in others [1].

### 2. Related Work
Two formal models for secure key exchange have received the most attention. The first, initiated by Bellare and Rogaway [6, 8], modeled two-party and three-party key distribution. This model was extended by Blake-Wilson et al. [10, 11] to include authenticated Diffie-Hellman key exchange. Recently, Bellare, Pointcheval, and Rogaway [5] refined this model to use session IDs and included forward-secrecy, password authentication, and dictionary attacks. Our model is derived from [5].

The second formal model, based on multi-party simulatability, was initiated by Bellare, Canetti, and Krawczyk [4]. They considered Diffie-Hellman and encryption-based key exchange. Shoup [30] refined this model and showed equivalence for two parties under specific conditions. However, no such treatment has been provided for the group setting.

The work of Ateniese et al. [2] is particularly relevant as it identifies fundamental and additional desirable security goals for authenticated GDH key exchange. The authors offer provably secure authenticated protocols and sketch informal proofs. Unfortunately, these protocols were later found to be flawed [26].

Other related papers include [23, 24], though they address different problems and goals, they are still relevant.

### 3. Background
We use the following cryptographic notions throughout the paper.

#### 3.1 Concrete Security
We develop proofs in the framework of concrete provable security, providing exact analyses rather than asymptotic ones. We explicitly quantify the reduction from the security of a scheme to the security of the underlying "hard" problem(s). This allows us to determine the strength of the reduction.

We define the advantage \( \text{Adv}_{\text{ake}}(A) \) that a computationally bounded adversary \( A \) will defeat the AKE security goal of a protocol. The advantage is twice the probability that \( A \) will defeat the AKE security goal minus one.

We also consider the probability \( \text{Succ}_{\text{ma}}(A) \) that a computationally bounded adversary \( A \) will defeat the MA security goal of a protocol.

#### 3.2 The Ideal Hash Model
In the ideal hash model, also called the "random oracle model" [7], cryptographic hash functions (like SHA or MD5) are viewed as random functions. Security proofs in this model identify hash functions as oracles producing truly random values for new queries and identical answers for repeated queries. In practice, these random functions are instantiated using standard cryptographic hash functions.

Analysis in this idealized model has been successful in ensuring security guarantees for numerous cryptographic schemes, provided the hash function has no weaknesses. Security proofs in this model are superior to those provided by ad hoc designs, though they do not provide the same guarantees as those in the standard model.

#### 3.3 The Group Diffie-Hellman Problems
GDH schemes are traditionally based on different intractability assumptions. Schemes [13, 18] are based on heuristic assumptions, while [20, 22, 27] are based on assumptions reducible to well-known "hard" problems.

In a cyclic prime-order group \( \langle g \rangle \), the standard assumptions are:
1. **Decisional Diffie-Hellman (DDH) Assumption**: Distinguishing \( g^{ab} \) from a random value when given \( g^a \) and \( g^b \) is computationally hard.
2. **Group Decisional Diffie-Hellman (G-DDH) Assumption**: Distinguishing \( g^{x_1...x_n} \) from a random value for subsets of indices \( i \).

In the ideal hash function model, the CDH and G-CDH assumptions are used:
1. **Computational Diffie-Hellman (CDH) Assumption**: Given \( g^a \) and \( g^b \), computing \( g^{ab} \) is computationally hard.
2. **Group Computational Diffie-Hellman (G-CDH) Assumption**: Computing \( g^{x_1...x_n} \) for subsets of indices \( i \).

### 4. Model
In our model, the adversary \( A \), who is not a player, has significant capabilities. It controls all communications between player instances and can ask an instance to release a session key or a long-lived key at any time. We formalize the protocol and the adversary's capabilities.

#### 4.1 Protocol Participants
We fix a nonempty set \( \text{ID} \) of \( n \) players who want to participate in a GDH protocol \( P \). The number \( n \) is polynomial in the security parameter \( k \).

A player \( U_i \in \text{ID} \) can have many instances, denoted as \( \Pi^s_{U_i} \) with \( s \in \mathbb{N} \). When referring to a non-fixed member of \( \text{ID} \), we use \( U \) and denote an instance as \( \Pi^s_U \).

#### 4.2 Long-Lived Keys
Each player \( U \in \text{ID} \) holds a long-lived key \( \text{LLU} \), either a pair of matching public/private keys or a symmetric key. \( \text{LLU} \) is specific to \( U \) and not to its instances. Associated with protocol \( P \) is a LL-key generator \( \text{GLL} \) which generates \( \text{LLU} \) and assigns it to \( U \).

#### 4.3 Session IDs
We define the session ID (SID) for oracle \( \Pi^s_U \) in an execution of protocol \( P \) as \( \text{SID}(\Pi^s_U) = \{ \text{SID}_{ij} : j \in \text{ID} \} \), where \( \text{SID}_{ij} \) is the concatenation of all flows between oracles \( \Pi^s_U \) and \( \Pi^t_V \). SID is public and available to the adversary \( A \), who can listen and construct it. SIDs are used to define partnering through the notion of partner IDs (PIDs).

#### 4.4 Accepting and Terminating
An oracle \( \Pi^s_U \) accepts when it has enough information to compute a session key \( \text{SK} \). It accepts at most once, and once accepted, \( \text{SK} \) and SIDs are defined. After accepting, \( \Pi^s_U \) may want confirmation that its partners have computed \( \text{SK} \) or that they are the intended partners. Once it receives this confirmation, it terminates and sends no more messages.

#### 4.5 Oracle Queries
The adversary \( A \) has an endless supply of oracles \( \Pi^s_U \) and makes various queries:
- **Send(Π^s_U, m)**: Models \( A \) sending messages to player instances. If \( \Pi^s_U \) accepts, SIDs are updated.
- **Reveal(Π^s_U)**: Models attacks resulting in the session key being revealed. Available if \( \Pi^s_U \) has accepted.
- **Corrupt(U)**: Models attacks resulting in the player \( U \)'s long-lived key being revealed.
- **Test(Π^s_U)**: Models the semantic security of the session key \( \text{SK} \).

### 5. Conclusion
This paper provides a formal model for the authenticated GDH key exchange, defines the security goals, and presents a modified known protocol (AKE1) that can be proven secure under reasonable intractability assumptions. We also present a generic transformation to turn an AKE protocol into one that provides mutual authentication (MA) and justify its security under similar assumptions.