This function is used to test whether a decimal64 number is encoded with the canonical form. That is,
that all declets use the preferred 1000 encodings and an infinity has a coefficient of zero.
The argument is:
decimal64 (decimal64 *) Pointer to the structure to be tested.
Returns an unsigned integer (uint32_t *) which is 1 if decimal64 has canonical encoding, or 0
otherwise. No error is possible from this function.
Version 3.68 Module descriptions 51
decFloats modules
The decFloats modules are decSingle, decDouble, and decQuad. These are based on the 32-bit, 64-bit,
and 128-bit decimal types in the IEEE 754 Standard for Floating Point Arithmetic.
In contrast to the arbitrary-precision decNumber module, these modules work directly from the
decimal-encoded formats designed by the IEEE 754 committee, which are also now implemented in
IBM System z (z9 and z10) and IBM System p (POWER6) processors, and in SAP NetWeaver 7.1.14
Conversions to and from the decNumber internal format are not needed (typically the numbers are
represented internally in “unpacked” BCD or in a base of some other power of ten), and no memory
allocation is necessary, so these modules are much faster than using decNumber for implementing the
types.
Like the decNumber module, the decFloats modules
• need only 32-bit integer support; 64-bit integers are not required and binary floating-point is not
used
• support both big-endian and little-endian encodings and platforms
• support both ASCII/UTF8 and EBCDIC strings
• are reentrant and use only aligned integers and strict aliasing
• use only ANSI C.
The modules should therefore be usable on any platform with an ANSI C compiler that supports 32-bit
integers.
The decFloats modules define the data structures and a large set of functions for working directly with
the same compressed formats as decimal32, decimal64, and decimal128. The names are different to
allow them to be used stand-alone or with the decNumber module, as illustrated in Examples 7 and 8
in the User’s Guide (see page 19).
These three modules all share many of the same functions (working on the different sizes of the
formats). The decQuad module has all the same functions as decDouble except for two functions
which would convert to or from a wider format. The decSingle module is a limited (“storage”) format
which has a only a few conversion and miscellaneous functions; it is intended that any computation be
carried out in a wider format.
The remainder of this section therefore describes only the decDouble format – in the list of functions,
assume that there is a corresponding decQuad format function unless stated and assume there is not a
corresponding decSingle format function unless stated.
In this implementation each format is represented as an array of unsigned bytes. There is therefore just
one field in the decDouble structure:
bytes The bytes field represents the eight bytes of a decDouble number, using Densely Packed
Decimal encoding for the coefficient. As of decNumber 3.56 the structure has been
changed to a union of the bytes array with arrays of larger integers; see the header file for
each type for details.15
14 IBM, the IBM logo, System p, System z, and POWER6 are trademarks of International Business Machines Corporation
in the United States, other countries, or both. SAP and SAP NetWeaver are trademarks of SAP AG, in Germany, other
countries, or both.
15 See http://speleotrove.com/decimal/DPDecimal.html for a summary of Densely Packed
Decimal encoding.
52 Module descriptions Version 3.68
The storage of a number in the bytes array is assumed to follow the byte ordering (“endianness”) of
the computing platform (if big-endian, then bytes[0] contains the sign bit of the format). The code
in these modules requires that the DECLITEND tuning parameter (see page 70) be set to match the
endianness of the platform.
The decSingle and decDouble modules both require that the next wider format be included in a
program compilation (so that conversion to and from that wider format can be effected), hence the
decQuad module is always needed.16 It, therefore, contains the constant lookup tables from the the
decDPD.h header file which are shared by all three modules. These tables are automatically
generated and should not need altering.
Most of the code for these modules is included from the shared source files decCommon.c and
decBasic.c. The former contains the functions available in all three modules17 and the latter the
functions available only in decDouble and decQuad.
Definitions
The decDouble.h header file defines the decDouble data structure described above. It includes the
decContext.h and and decQuad.h header files, which are both required for use.18 If more than one
of the three decFloats formats are used in a program, it is only necessary to include the smaller or
smallest.
The decDouble.h header file also contains:
• Constants defining aspects of decDouble numbers, including the maximum precision, the
minimum and maximum (adjusted) exponent supported, the bias applied to the exponent, the
length of the number in bytes, and the maximum number of characters in the string form of the
number (including terminator)
• Definitions of the public functions in the decDouble module
• Macros defining conversions to and from the decNumber format. These are macros in order to
avoid a compile-time dependency on the decNumber module; they use decimal64 as a proxy,
and their usage is shown in Example 8 in the User’s Guide (see page 20).
Functions
The decDouble.c source file contains the public functions defined in the header file. These
comprise conversions to and from strings and other formats, arithmetic and logical operations, and
utilities.
The functions are described briefly, below. More details of the operation of each function can be
found in the description of the corresponding function in the decNumber module and details of the
underlying model and arithmetic can be found in the General Decimal Arithmetic Specification.19
In the descriptions below, many parameters are defined as one of the following:
x, y, z (const decDouble *) decimal input arguments to a function
16 This requirement is different from the decimal32, decimal64, and decimal128 modules because they can convert to wider
or narrower formats using the decNumber format as an intermediate step.
17 Except that the widening and narrowing functions are not used by decQuad.
18 The decSingle.h header file also includes decDouble.h, but the decQuad.h header file only includes
decContext.h.
19 See http://speleotrove.com/decimal/#arithmetic for details.
Version 3.68 Module descriptions 53
r (decDouble *) a decimal result argument to a function (which may be the same as an
input argument); unless stated otherwise this is also the return value from the function,
and the result will be canonical
set (decContext *) the context for a function. Only two fields of the context structure are
used: round (the rounding mode) and status (the bits in which are used to indicate any
error, etc.).
Note that the trap field in the context is not used; the decDouble functions do not check for traps after
every operation to avoid the overhead that would incur. The decContextSetStatus function (see
page 27) can be used to explicitly test status to trap.
Note also that the only informational flag set by decNumber is DEC_Inexact; the others are never set
by the decFloats module in order to improve performance and also to avoid the need for passing a
context to many functions.20
In the following list, every function has corresponding decQuad format function (for example,
decQuadAbs(r, x, set)) unless stated, and does not have a corresponding decSingle format
function unless stated.
decDoubleAbs(r, x, set)
Returns the absolute value of x. This has the same effect as decDoublePlus unless x is negative, in
which case it has the same effect as decDoubleMinus. The effect is also the same as
decDoubleCopyAbs except that NaNs are handled normally (the sign of a NaN is not affected, and an
sNaN will set DEC_Invalid_operation) and the result will be canonical.
decDoubleAdd(r, x, y, set)
Adds x and y and places the result in r.
decDoubleAnd(r, x, y, set)
Carries out the digit-wise logical And of x and y and places the result in r.
The operands must be zero or positive (sign=0), an integer (finite with exponent=0) and comprise only
zeros and/or ones; if not, DEC_Invalid_operation is set.
decDoubleCanonical(r, x)
This copies x to r, ensuring that the encoding of r is canonical.
decDoubleClass(x)
This returns the class (enum decClass) of the argument x.
decDoubleClassString(x)
This returns a description of the class of the argument x as a string (const char *).
20 The DEC_Subnormal flag is particularly expensive to maintain.
54 Module descriptions Version 3.68
decDoubleCompare(r, x, y, set)
Compares x and y numerically and places the result in r.
The result may be -1, 0, 1, or NaN (unordered); -1 indicates that x is less than y, 0 indicates that they
are numerically equal, and 1 indicates that x is greater than y. NaN is returned only if x or y is a NaN.
decDoubleCompareSignal(r, x, y, set)
The same as decDoubleCompare, except that a quiet NaN argument is treated like a signaling NaN
(causes DEC_Invalid_operation to be set).
decDoubleCompareTotal(r, x, y)
Compares x and y using the IEEE 754 total ordering (which takes into account the exponent) and
places the result in r. No status is set (a signaling NaN is ordered between Infinity and NaN). The
result will be -1, 0, or 1.
decDoubleCompareTotalMag(r, x, y)
The same as decDoubleCompareTotal except that the absolute values of the two arguments are used
(as though modified by decDoubleCopyAbs).
decDoubleCopy(r, x)
Copies x to r quietly (no status is set). This is a bit-wise operation and so the result might not be
canonical.
decDoubleCopyAbs(r, x)
Copies x to r quietly and sets the sign of r to 0 (no status is set). This is a bit-wise operation and so the
result might not be canonical.
decDoubleCopyNegate(r, x)
Copies x to r quietly and inverts the sign of r (no status is set). This is a bit-wise operation and so the
result might not be canonical.
decDoubleCopySign(r, x, y)
Copies x to r quietly with the sign of r set to the sign of y (no status is set). This is a bit-wise operation
and so the result might not be canonical.
decDoubleDigits(x)
Returns the number of significant digits in x as an unsigned 32-bit integer (uint32_t). If x is a zero
or is infinite, 1 is returned. If x is a NaN then the number of digits in the payload is returned.
decDoubleDivide(r, x, y, set)
Divides x by y and places the result in r.
Version 3.68 Module descriptions 55
decDoubleDivideInteger(r, x, y, set)
Divides x by y and places the integer part of the result (rounded towards zero) in r with exponent=0. If
the result would not fit in r (because it would have more than DECDOUBLE_Pmax digits) then
DEC_Division_impossible is set.
decDoubleFMA(r, x, y, z, set)
Calculates the fused multiply-add x × y + z and places the result in r. The multiply is carried out first
and is exact, so this operation has only the one, final, rounding.
decDoubleFromBCD(r, exp, bcd, sign)
Sets r from an exponent exp (which may indicate a NaN or infinity), a BCD array bcd, and a sign.
exp (int32_t) is an in-range unbiased exponent or a special value in the form returned by
decDoubleGetExponent (listed in decQuad.h).
bcd (const uint8_t *) is an array of DECDOUBLE_Pmax elements, one digit in each byte (BCD8
encoding); the first (most significant) digit is ignored if the result will be a NaN; all are ignored if the
result is infinite. All bytes must be in the range 0–9.
sign (int32_t) is an integer which must be DECFLOAT_Sign to set the sign bit of r to 1, or 0 to set it
to 0.
For speed, the arguments are not checked; no status is set by this function. The content of r is
undefined if the arguments are invalid or out of range (that is, could not be produced by
decDoubleToBCD).
(This function is also available in the decSingle module.)
decDoubleFromInt32(r, i)
Sets r from the signed 32-bit integer i (int32_t). The result is exact; no error is possible.
decDoubleFromNumber(r, dn, set)
This function is implemented as a macro and sets r from a decNumber, dn, using a decimal64 as a
proxy as illustrated in Example 8 in the User’s Guide (see page 20).
To use this macro, the decimal64.h header file must be included (see the text following the example
for more details about compilation).
(This function is also available in the decSingle module.)
decDoubleFromPacked(r, exp, pack)
Sets r from an exponent exp (which may indicate a special value) and a packed BCD array, pack.
exp (int32_t) is an in-range unbiased exponent or a special value in the form returned by
decDoubleGetExponent (listed in decQuad.h).
pack (const uint8_t *) is an array of DECDOUBLE_Pmax packed decimal digits (one digit per four-
bit nibble) followed by a sign nibble, and (for decDouble and decQuad only) prefixed with an extra
pad nibble (which is ignored); the sign nibble must be any of the six sign codes listed in decQuad.h
56 Module descriptions Version 3.68
and described for the decPacked module (see page 67), and digit nibbles must be in the range 0–9.
Like the decDoubleFromBCD function, the first nibble of pack (after the pad nibble, if any) is ignored
if the result will be a NaN, and all are ignored if the result is infinite.
For speed, the arguments are not checked; no status is set by this function. The content of r is
undefined if the arguments are invalid or out of range (that is, could not be produced by
decNumberToPacked, except that all six sign codes are permitted).
(This function is also available in the decSingle module.)
decDoubleFromPackedChecked(r, exp, pack)
Sets r from an exponent exp (which may indicate a special value) and a packed BCD array, pack, with
the input values fully checked.
exp (int32_t) must be an in-range unbiased exponent or a special value in the form returned by
decDoubleGetExponent (listed in decQuad.h).
pack (const uint8_t *) is an array of DECDOUBLE_Pmax packed decimal digits (one digit per four-
bit nibble) followed by a sign nibble, and (for decDouble and decQuad only) prefixed with an extra
pad nibble (which must be zero); the sign nibble must be one of the six sign codes listed in
decQuad.h and described for the decPacked module (see page 67), and digit nibbles must be in the
range 0–9.
The first nibble of pack (after the pad nibble, if any) must be zero if the result will be a NaN, and all
digit nibbles must be zero if the result is infinite.
No status is set by this function. NULL is returned instead of r if an argument is invalid or out of range
(that is, could not be produced by decNumberToPacked, except that all six sign codes are permitted).
(This function is also available in the decSingle module.)
decDoubleFromString(r, string, set)
Sets r from a character string, string (const char *).
The length of the coefficient and the size of the exponent are checked by this routine, so rounding will
be applied if necessary, and this may set status flags (underflow, overflow) will be reported, or
rounding applied, as necessary.
There is no limit to the coefficient length for finite inputs; NaN payloads must be integers with no
more than DECDOUBLE_Pmax-1 digits. Exponents may have up to nine significant digits. The syntax
of the string is fully checked; if it is not valid, the result will be a quiet NaN and an error flag will be
set.
(This function is also available in the decSingle module.)
decDoubleFromUInt32(r, u)
Sets r from the unsigned 32-bit integer u (uint32_t). The result is exact and no error is possible.
decDoubleFromWider(r, dq, set)
Sets r from an instance, dq, of the next-wider format (const decQuad *). This narrowing function
Version 3.68 Module descriptions 57
can cause rounding, overflow, etc., but not Invalid operation (sNaNs are copied and do not signal).
(This function is also available in the decSingle module, but is not available in the decQuad module.)
decDoubleGetCoefficient(x, bcd)
Extracts the coefficient of x as a BCD integer into the array bcd (uint8_t *) and returns the sign as a
signed 32-bit integer (int32_t). The returned value will be DECFLOAT_Sign if x has sign=1 or
otherwise will be 0.
The digits of the coefficent are written, one digit per byte, into DECDOUBLE_Pmax elements of the bcd
array. If x is a NaN the first byte will be zero (the remainder will be the payload), and if it is infinite
then all of bcd will be zero.
(This function is also available in the decSingle module.)
decDoubleGetExponent(x)
Returns the exponent of x as a 32-bit integer (int32_t). If x is infinite or is a NaN (a special value)
the first seven bits of the decDouble are returned, padded with 25 zero bits on the right and with the
most significant (sign) bit set to 0. For example, -sNaN would return 0x7e000000
(DECFLOAT_sNaN). The possible return values for infinities and NaNs are listed in decQuad.h.
(This function is also available in the decSingle module.)
decDoubleInvert(r, x, set)
Carries out the digit-wise logical inversion of x and places the result in r.
The operand must be zero or positive (sign=0), an integer (finite with exponent=0) and comprise only
zeros and/or ones; if not, DEC_Invalid_operation is set.
decDoubleIsCanonical(x)
Returns an unsigned integer (uint32_t) which will be 1 if the encoding of x is canonical, or 0
otherwise.
decDoubleIsFinite(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is neither infinite nor a NaN, or 0
otherwise.
decDoubleIsInfinite(x)
Returns an unsigned integer (uint32_t) which will be 1 if the encoding of x is an infinity, or 0
otherwise.
decDoubleIsInteger(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is finite and has exponent=0, or 0
otherwise.
58 Module descriptions Version 3.68
decDoubleIsLogical(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is a valid argument for logical operations
(that is, x is zero or positive (sign=0), an integer (finite with exponent=0) and comprises only zeros
and/or ones), or 0 otherwise.
decDoubleIsNaN(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is a NaN (quiet or signaling), or 0
otherwise.
decDoubleIsNegative(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is less than zero and not a NaN, or 0
otherwise.
decDoubleIsNormal(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is a normal number (that is, is finite,