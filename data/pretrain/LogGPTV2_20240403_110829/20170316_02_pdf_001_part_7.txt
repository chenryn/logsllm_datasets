### Function Description

This function is designed to test whether a `decimal64` number is encoded in its canonical form. In the canonical form, all declets use the preferred 1000 encodings, and an infinity has a coefficient of zero.

**Function Arguments:**
- **decimal64 (decimal64 *):** A pointer to the structure to be tested.

**Return Value:**
- **unsigned integer (uint32_t *):** Returns 1 if the `decimal64` number is in canonical encoding; otherwise, returns 0. This function does not generate any errors.

### decFloats Modules

The `decFloats` modules include `decSingle`, `decDouble`, and `decQuad`. These modules are based on the 32-bit, 64-bit, and 128-bit decimal types defined in the IEEE 754 Standard for Floating Point Arithmetic.

#### Key Features:
- **Contrast with decNumber Module:** Unlike the `decNumber` module, which supports arbitrary precision, the `decFloats` modules work directly with the decimal-encoded formats specified by the IEEE 754 committee. These formats are implemented in IBM System z (z9 and z10), IBM System p (POWER6) processors, and SAP NetWeaver 7.1.14.
- **Performance:** The `decFloats` modules do not require conversions to and from the `decNumber` internal format, and no memory allocation is needed, making them significantly faster.
- **Platform Support:**
  - Only 32-bit integer support is required; 64-bit integers and binary floating-point are not used.
  - Both big-endian and little-endian encodings and platforms are supported.
  - ASCII/UTF8 and EBCDIC strings are supported.
  - The modules are reentrant and use only aligned integers and strict aliasing.
  - They are written in ANSI C and should be usable on any platform with an ANSI C compiler that supports 32-bit integers.

#### Data Structures and Functions
- The `decFloats` modules define data structures and a comprehensive set of functions for working with the compressed formats of `decimal32`, `decimal64`, and `decimal128`.
- The names of the functions are distinct to allow them to be used independently or in conjunction with the `decNumber` module.
- The `decQuad` module includes all the same functions as `decDouble` except for two functions that would convert to or from a wider format.
- The `decSingle` module is a limited format with only a few conversion and miscellaneous functions, intended for storage rather than computation.

### decDouble Format

The `decDouble` format is represented as an array of unsigned bytes. The `decDouble` structure contains a single field:

- **bytes:** An array representing the eight bytes of a `decDouble` number, using Densely Packed Decimal (DPD) encoding for the coefficient. As of `decNumber` 3.56, the structure has been changed to a union of the bytes array with arrays of larger integers. For details, see the header file for each type.

#### Byte Ordering
- The storage of a number in the `bytes` array follows the byte ordering ("endianness") of the computing platform. If the platform is big-endian, `bytes[0]` contains the sign bit of the format.
- The `DECLITEND` tuning parameter must be set to match the endianness of the platform.

#### Compilation Requirements
- The `decSingle` and `decDouble` modules require the inclusion of the next wider format in the program compilation to enable conversions to and from that wider format. Therefore, the `decQuad` module is always necessary.
- The `decQuad` module contains constant lookup tables from the `decDPD.h` header file, which are shared by all three modules. These tables are automatically generated and should not need alteration.

### Shared Code
- Most of the code for these modules is included from the shared source files `decCommon.c` and `decBasic.c`.
  - `decCommon.c` contains functions available in all three modules.
  - `decBasic.c` contains functions available only in `decDouble` and `decQuad`.

### Header Files
- The `decDouble.h` header file defines the `decDouble` data structure and includes the `decContext.h` and `decQuad.h` header files, which are required for use.
- If more than one of the three `decFloats` formats are used in a program, it is only necessary to include the smaller or smallest format.

### Constants and Macros
- The `decDouble.h` header file also contains constants defining aspects of `decDouble` numbers, such as maximum precision, minimum and maximum exponent, bias applied to the exponent, length of the number in bytes, and the maximum number of characters in the string form of the number.
- Macros are provided for conversions to and from the `decNumber` format to avoid compile-time dependencies on the `decNumber` module.

### Functions
- The `decDouble.c` source file contains the public functions defined in the header file, including conversions to and from strings and other formats, arithmetic and logical operations, and utilities.
- Detailed descriptions of each function can be found in the `decNumber` module documentation and the General Decimal Arithmetic Specification.

### Function Parameters
- Many parameters are defined as follows:
  - **x, y, z (const decDouble *):** Decimal input arguments to a function.
  - **r (decDouble *):** A decimal result argument to a function, which may be the same as an input argument. Unless stated otherwise, this is also the return value from the function, and the result will be canonical.
  - **set (decContext *):** The context for a function, using the `round` (rounding mode) and `status` (error flags) fields. The `trap` field is not used to avoid overhead.

### Example Functions
- **decDoubleAbs(r, x, set):** Returns the absolute value of `x`.
- **decDoubleAdd(r, x, y, set):** Adds `x` and `y` and places the result in `r`.
- **decDoubleAnd(r, x, y, set):** Carries out the digit-wise logical AND of `x` and `y` and places the result in `r`.
- **decDoubleCanonical(r, x):** Copies `x` to `r`, ensuring that the encoding of `r` is canonical.
- **decDoubleClass(x):** Returns the class (enum `decClass`) of the argument `x`.
- **decDoubleCompare(r, x, y, set):** Compares `x` and `y` numerically and places the result in `r`.
- **decDoubleDivide(r, x, y, set):** Divides `x` by `y` and places the result in `r`.
- **decDoubleFromBCD(r, exp, bcd, sign):** Sets `r` from an exponent `exp`, a BCD array `bcd`, and a sign.
- **decDoubleFromInt32(r, i):** Sets `r` from the signed 32-bit integer `i`.
- **decDoubleFromPacked(r, exp, pack):** Sets `r` from an exponent `exp` and a packed BCD array `pack`.
- **decDoubleFromString(r, string, set):** Sets `r` from a character string `string`.
- **decDoubleGetCoefficient(x, bcd):** Extracts the coefficient of `x` as a BCD integer into the array `bcd` and returns the sign.
- **decDoubleIsCanonical(x):** Returns 1 if the encoding of `x` is canonical, or 0 otherwise.

For more detailed information on each function, refer to the corresponding function in the `decNumber` module and the General Decimal Arithmetic Specification.