Some  of  H’s  customers  test  their  products  using  open 
source and commercial products. 
H’s  customers  do  not  generally  ask  about  software 
assurance,  but  expect  that  since  H  sells  security  products, 
the  assurance  is  there.    On  occasion,  RFPs  will  ask 
questions such as "what are the measures / processes used to 
avoid  security  defects".    H  sees  more  interest  in  software 
assurance from government customers. 
H’s  customers  expect  the  same  level  of  software 
assurance whether the products were developed by H, or a 
third  party  (including  open  source).    As  a  result,  H  must 
place as much emphasis on assurance of the software it does 
not develop as software developed in house. 
E.  Company B: Large Non-Security Vendor 
B’s  development  processes  are  variable  through  the 
company  as  a  result  of  growing  by  acquisition.    B  offers 
over  100  products,  some  of  which  are  focused  on  security 
532
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:04:49 UTC from IEEE Xplore.  Restrictions apply. 
and  others  in  non-security  areas.    In  recent  years,  B  has 
begun standardizing its processes around security, including 
adding  uniform  security  software  assurance  techniques, 
including: 
•  The entire organization uses automated source code 
analysis tools. 
• 
to 
to 
tools 
•  QA  teams  in  B  are  tasked  to  perform  security 
testing  as  part  of  their  QA  efforts.    QA  teams  use 
automated  scanning 
look  for  known 
vulnerabilities,  as  well  as  on-demand  scans  by  the 
centralized  security  team  when  requested  by  QA 
teams.  Some product teams also use fuzzing tools. 
Some  groups  within  B  use  penetration  testing,  but 
B’s security team discourages relying on penetration 
testing,  preferring 
focus  on  preventing 
introduction  of  security  flaws. 
that 
penetration  testing  helps  sell  the  need  for  software 
assurance,  but  doesn’t  provide  that  assurance  by 
itself. 
  B  finds 
regulations 
•  B  provides  a  two-tier  training  system  using  out-
sourced training experts.  The introductory training 
level  has  three  modules:  a  one-hour  overview  of 
motivations 
product 
management,  a  two-hour  software  development 
policies  session  for  all  engineers,  and  a  three-hour 
class for developers and QA specialists that explains 
common vulnerabilities.  The advanced level is two 
days each on Java, C/C++, and testing.  All training 
materials are available online to encourage internal 
use.    In  addition,  periodic  “refresh”  courses  help 
keep developers up to date on the latest threats. 
•  B has an extensive product security policy which is 
a set of 80 criteria that define the security attributes 
of their products. 
and 
for 
B  finds  that  the  most  effective  methods  for  software 
assurance are threat modeling (which is done as a workshop 
with  both  security  experts  and  product  specialists)  and 
training.    Several  years  ago  B  developed  a  “top  10”  most 
serious  problems,  and  focused  on  solving  the  identified 
problems.  While B’s security team was reluctant to dictate 
priorities, this was a useful exercise. 
their  products 
B’s  initial  motivations  were  customer  threats  not  to 
purchase 
if  software  assurance  wasn’t 
improved.    Once  the  initial  threat  passed,  the  motivation 
shifted  to  a  customer  expectation  that  B  provided  secure 
software as part of the quality expectation.  Fear of publicity 
was not a significant issue.  
B has performed Common Criteria evaluations, and has 
found that while it is a useful marketing exercise, it did little 
to improve the security of their products. 
Customers do not frequently ask directly about software 
assurance, but it helps indirectly by allowing the customers 
to meet their internal security requirements. 
B  began  their  focus  on  software  assurance  about  five 
years  ago  with  internal  evangelization,  with  a  “product 
security office” officially starting about two years ago.  As 
is  typically  the  case,  it  took  12  to  24  months  to  see  an 
impact  in  reduced  vulnerabilities  and  fewer  customer 
complaints  as  a  result  of  the  focus  on  software  assurance.  
B’s  focus  on  software  assurance  now  allows  them  to  use 
security as a sales differentiator. 
One of the key difficulties in starting software assurance 
programs  is  corporate  focus  on  “Return  on  Investment” 
(ROI).    B  notes  that  ROI  arguments  are  very  difficult  for 
software  assurance  –  security  does  not  increase  sales,  but 
rather  reduces  lost  accounts,  unhappy  customers,  and  bad 
publicity. 
B’s security team reports at a very high level in the R&D 
organization, and is closely tied in to the QA organization.  
This  gives  the  security  team  the  influence  to  stop  product 
shipment, in the same way that a serious QA problem would 
stop a shipment. 
F.  Company S: Large Non-Security Vendor 
S’s business is organized into three divisions which are 
operated  independently,  with  minimal  coordination  from  a 
security  perspective.    The  division  that  was  interviewed 
reported that their focus on software assurance includes: 
•  Extensive  focus  on  an  architectural  review  panel 
that  includes  very  senior  staff,  including  a  half 
dozen  members  with  30  years  of 
security 
experience.  In addition to considering architectural 
issues,  this  review  panel  ensures  that  security  and 
cryptographic 
reinvented  or 
duplicated.    The  goal  of  the  panel  is  depth  of 
analysis, so reviews frequently last several days. 
features  are  not 
•  Using  customized  versions  of  tools  such  as  UNIX 
“lint” to search for unsafe library usage.  S also uses 
third-party  source  code  analysis  tools  on  occasion, 
but not as a regular part of their software assurance 
process.  However, S uses peer source code reviews 
before software checkin. 
  The  goal  of 
•  Any  product  change  that  creates  interfaces  which 
might  have  a  security  effect  (i.e.,  increasing  the 
“attack  surface”  of  the  product)  goes  through  an 
architectural review that includes filing a multi-page 
security  questionnaire. 
the 
questionnaire is to cause the designer to think about 
the implications of the change. 
S uses automated tests for every build which include 
some  security  tests.    More  extensive  dynamic 
testing is under consideration, but is not performed 
today.  Fuzz testing  is performed on  final versions 
of products before release. 
S  does  not  perform  penetration  testing  in  the 
product  development  organization,  but 
some 
penetration testing is done by the field staff. 
• 
• 
•  Developer training is limited to internal seminars. 
S’s  developers  are  required  to  use  the  latest  version  of 
their  product  to  develop  newer  versions.    This  provides 
significant  peer  pressure  on  developers  not  to  check  in 
flawed software. 
S  finds  that  their  most  productive  use  of  resources  is 
peer code review and architectural reviews. 
Like  many  vendors,  S  focuses  on  security  assurance 
because  of  fear  that  news  of  security  vulnerabilities  will 
appear  in  the  business  press,  which  might  bring  bad 
publicity and depress their stock price.  Unlike some other 
533
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:04:49 UTC from IEEE Xplore.  Restrictions apply. 
vendors, S found that “do the right thing” is sometimes not 
an adequate motivation, nor is saying “Microsoft does it”. 
S  is  also  affected  by  government  regulation  and 
procurement  policies  in  the  US  and  in  several  European 
countries.    S’s  government  customers  ask  about  software 
assurance requiring Common Criteria and FIPS evaluations.  
Some  of  S’s  government  customers  perform  their  own 
security  testing  in  addition  to  that  performed  in  the 
evaluation process.  S finds that some of their commercial 
customers  hire  outside  consultants  to  perform  security 
testing. 
One of the biggest issues at S is that the commitment to 
software assurance has slipped as the company has suffered 
financial setbacks and layoffs. 
Organizationally,  security  at  S  is  centralized,  and  the 
head of software assurance at S reports directly to the head 
of product development.  This has  given the security team 
the  ability  to  stop  a  release  if  a  serious  security  flaw  is 
found,  although  management  commitment  to  software 
assurance has been fairly weak. 
G.  Company K: Large Non-Security Vendor 
K  has  grown  by  acquisition,  and  has  many  relatively 
independent  product  development  organizations.    Hence, 
K’s processes are not standardized across the company. 
• 
K’s software assurance efforts include: 
•  A  single  security expert responsible  for overseeing 
software assurance across the company, assisted by 
a distributed team of engineers who answer internal 
questions on software assurance. 
•  Mandatory  training  for  all  developers  (more  than 
75% of developers trained thus far).  The training is 
a 90 minute company-developed course in “writing 
secure code” based on [1]. 
Security  reviews  as  part  of  the  design  process.    A 
security  expert  reviews  every  product  design 
document,  which  is  required  to  have  a  section 
devoted  to  security  considerations.    However,  the 
security  expert  can  only  provide  recommendations 
(which  are  frequently  assigned  a  low  priority  and 
sometimes  ignored  completely),  and  cannot  force 
changes in products. 
•  While  K’s  design  process  is  designed  to  allow  for 
to 
threat  modeling,  no  products  have  elected 
perform that modeling thus far. 
Some products use commercial tools for automated 
static code analysis.  Although these represent only 
a small fraction of the total code base, they are the 
most commonly used tools. 
Some  product  groups  use  commercial  application 
scanners  such  as  IBM/Watchfire  AppScan  to  look 
for  vulnerabilities.    K  finds  these  tools  to  be  very 
helpful,  but  notes  that  since  each  application 
scanner finds different flaws, they sometimes create 
problems  with  customer  communication;  without  a 
common  basis  for  comparison  regardless  of  how 
many tools a vendor runs, a customer can run a scan 
using  a  tool  the  vendor  does  not  own  and  find 
• 
• 
additional  flaws  (some  of  which  might  be  false 
positives). 
find 
  They 
products 
to  meet  US 
that 
•  K  has  performed  Common  Criteria  evaluations  of 
government 
some 
requirements. 
lower 
level 
evaluations  (EAL2  and  EAL3)  have  no  impact  on 
the  security  of  the  product  because  they  are 
documentation-focused, but higher level evaluations 
(EAL4  and  above)  help  improve  the  product  by 
forcing  a  more  comprehensive  security  review  and 
significant security testing. 
few  products  have  undergone 
third-party 
penetration  testing.    K  has  no  internal  penetration 
testing capabilities. 
K believes that their investments in application scanning 
•  A 
provide the greatest payoff. 
K  notes  that  many  of  their  products  are  “enterprise 
software”,  which  provides  a  measure  of  security  by 
obscurity: while it’s easy for attackers to get access to retail 
software  products,  enterprise  software,  which  sells  for 
hundreds  of  thousands  of  dollars  and  requires  custom 
installation  and  configuration,  is  mostly  unavailable  to  the 
general public.  However, the  web interfaces on enterprise 
software  products  are  more  accessible,  and  hence 
considered riskier. 
K’s  motivations  are  primarily  driven  by  customer 
expectation: just as customers expect that  vendors perform 
quality  assurance  testing,  K’s  customers  expect  that  the 
products  they  purchase  will  be  secure.    K  believes  that 
customers would be surprised at how little effort is invested 
in  software  assurance  by  vendors.    In  addition,  K  is 
concerned about bad publicity in case of a security flaw in 
their products.  At K, as in many other vendors, bad press 
would get executive attention, and might cause K to invest 
more in software assurance.   
K  notes  that  non-liability  clauses  in  software  licenses 
protect  vendors,  and  reduce  the  incentive  to  invest  in 
software  assurance.    If  K’s  processes  were  found  to  be 
significantly  worse  than  typical  industry  processes,  they 
might  be  vulnerable  to  negligence  claims.    Ironically,  this 
study,  whose  goal  was  to  make  a  case  for  improving 
software  assurance,  may  have  the  opposite  effect:  if  the 
typical  level  for  vendors  is  to  provide  minimal  software 
assurance,  then  negligence  would  not  be  a  risk,  and  hence 
there is little incentive to invest further. 
Some  of  K’s  customers  perform  application  scanning 
using  automated  tools,  and  a  few  also  perform  penetration 
tests. 
Organizationally,  security  at  K  is  distributed,  with  the 
head  of  software  assurance  reporting  to  the  CTO,  who 
reports  to  the  head  of  product  development.    The  security 
team would probably have the ability to stop a release if a 
serious  security  flaw  is  found,  although  management 
commitment to software assurance has been quite weak. 
H.  Company R: Large Non-Security Vendor 
R has grown by acquisition, as many of the companies in 
this  study.    However,  R  prides  itself  on  integrating  their 
534
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:04:49 UTC from IEEE Xplore.  Restrictions apply. 
acquisitions into a common software development process, 
including software assurance. 
R  provides  minimal  security  training  to  its  developers, 
and does not perform significant design reviews focused on 
security, makes minimal use of application testing tools, and 
performs  minimal  penetration  testing.    R  does  minimal 
threat  modeling,  as  they  consider  that  all  of  their  products 
will be directly attacked by determined adversaries.  Rather, 
R relies heavily on source code analysis to find flaws after 
products  have  been  built  and  before  they  are  shipped.    R 
uses a combination of commercial analysis tools and manual 
analysis. 
Some of R’s products have undergone Common Criteria 
evaluation  to  meet  US  government  requirements.    They 
have  not  found  the  process  to  be  particularly  helpful  as  a 
way of assessing the security of the products. 
R’s main motivation for software assurance is customer 
expectation.    Customers  buy  R’s  products  because  they 
expect  them  to  be  reliable,  high  performing,  and  secure  – 
security isn’t an option for R’s customers due to their usage.  
At the same time, however, R only rarely receives explicit 