### Company H: Security Product Vendor

Some of H’s customers test their products using both open-source and commercial solutions. Generally, these customers do not explicitly inquire about software assurance, but they assume that, given H's focus on security, such assurance is inherently provided. Occasionally, Requests for Proposals (RFPs) may include questions about the measures and processes used to avoid security defects. H has observed a higher level of interest in software assurance from government clients.

H’s customers expect the same level of software assurance, regardless of whether the products were developed in-house or by third parties, including open-source projects. Consequently, H must place equal emphasis on ensuring the security of all software, whether it was developed internally or externally.

### Company B: Large Non-Security Vendor

B’s development processes vary across the company due to its growth through acquisitions. B offers over 100 products, some focused on security and others in non-security areas. In recent years, B has begun standardizing its processes around security, implementing uniform security software assurance techniques, such as:

- **Automated Source Code Analysis:** The entire organization uses automated source code analysis tools.
- **Security Testing by QA Teams:** QA teams are tasked with performing security testing as part of their quality assurance efforts. They use automated scanning tools to identify known vulnerabilities and can request on-demand scans from the centralized security team. Some product teams also use fuzzing tools.
- **Penetration Testing:** While some groups within B use penetration testing, the security team discourages relying on it, preferring to focus on preventing the introduction of security flaws. B acknowledges that penetration testing can help sell the need for software assurance but does not provide assurance by itself.
- **Training Programs:** B provides a two-tier training system using outsourced experts. The introductory level includes three modules: a one-hour overview for product management, a two-hour session on software development policies for all engineers, and a three-hour class for developers and QA specialists explaining common vulnerabilities. The advanced level offers two-day courses on Java, C/C++, and testing. All training materials are available online, and periodic “refresh” courses keep developers up to date on the latest threats.
- **Product Security Policy:** B has an extensive product security policy consisting of 80 criteria that define the security attributes of their products.

B finds that the most effective methods for software assurance are threat modeling (conducted as a workshop with both security experts and product specialists) and training. Several years ago, B identified a “top 10” list of the most serious problems and focused on solving them. While the security team was initially reluctant to dictate priorities, this exercise proved useful.

B’s initial motivation for improving software assurance was the threat of customers not purchasing their products if security wasn’t improved. Over time, this shifted to a customer expectation that B would provide secure software as part of their quality standards. Fear of negative publicity was not a significant concern.

B has performed Common Criteria evaluations and found that while they are useful for marketing, they did little to improve the actual security of their products. Customers do not frequently ask directly about software assurance, but it helps indirectly by allowing them to meet their internal security requirements.

B began focusing on software assurance about five years ago, with a “product security office” officially starting about two years ago. It typically took 12 to 24 months to see an impact in reduced vulnerabilities and fewer customer complaints. B now uses security as a sales differentiator.

One of the key difficulties in starting software assurance programs is the corporate focus on Return on Investment (ROI). B notes that ROI arguments are challenging for software assurance, as security does not increase sales but rather reduces lost accounts, unhappy customers, and bad publicity.

B’s security team reports at a high level within the R&D organization and is closely integrated with the QA team. This gives the security team the authority to stop product shipments, similar to how a serious QA issue would halt a release.

### Company S: Large Non-Security Vendor

S’s business is organized into three divisions, each operated independently with minimal coordination from a security perspective. The division interviewed reported that their focus on software assurance includes:

- **Architectural Review Panel:** An extensive focus on an architectural review panel that includes very senior staff, with several members having 30 years of security experience. The panel ensures that security and cryptographic features are not reinvented or duplicated, aiming for in-depth analysis that often lasts several days.
- **Customized Tools and Peer Reviews:** Using customized versions of tools like UNIX “lint” to search for unsafe library usage. S also occasionally uses third-party source code analysis tools but relies more on peer source code reviews before software check-in.
- **Security Questionnaires:** Any product change that creates interfaces with potential security implications undergoes an architectural review, including a multi-page security questionnaire. The goal is to make designers think about the implications of the change.
- **Automated and Fuzz Testing:** Automated tests for every build include some security tests. More extensive dynamic testing is under consideration, and fuzz testing is performed on final product versions before release.
- **Limited Penetration Testing:** S does not perform penetration testing in the product development organization, but some field staff conduct it.
- **Developer Training:** Limited to internal seminars, with developers required to use the latest version of their product to develop newer versions, creating significant peer pressure to avoid checking in flawed software.

S finds that their most productive use of resources is peer code review and architectural reviews. Like many vendors, S focuses on security assurance to avoid negative publicity and potential stock price drops. S is also affected by government regulations and procurement policies in the US and several European countries, with government customers requiring Common Criteria and FIPS evaluations. Some commercial customers hire outside consultants for security testing.

One of the biggest issues at S is that the commitment to software assurance has waned as the company has faced financial setbacks and layoffs. Organizationally, security at S is centralized, with the head of software assurance reporting directly to the head of product development. This gives the security team the ability to stop a release if a serious security flaw is found, although management commitment to software assurance has been weak.

### Company K: Large Non-Security Vendor

K has grown through acquisitions and has many relatively independent product development organizations, leading to non-standardized processes across the company. K’s software assurance efforts include:

- **Centralized Security Expert:** A single security expert oversees software assurance across the company, assisted by a distributed team of engineers who answer internal questions.
- **Mandatory Training:** Mandatory training for all developers (more than 75% trained so far), with a 90-minute company-developed course on “writing secure code.”
- **Security Reviews:** Security reviews are part of the design process, with a security expert reviewing every product design document, which must include a section on security considerations. However, the security expert can only provide recommendations, which are sometimes ignored.
- **Threat Modeling:** While the design process allows for threat modeling, no products have elected to perform it yet.
- **Automated Static Code Analysis:** Some products use commercial tools for automated static code analysis, though these represent only a small fraction of the total code base.
- **Application Scanners:** Some product groups use commercial application scanners like IBM/Watchfire AppScan to find vulnerabilities. K finds these tools helpful but notes that different scanners find different flaws, which can create communication issues with customers.
- **Common Criteria Evaluations:** K has performed Common Criteria evaluations to meet US government requirements. Lower-level evaluations (EAL2 and EAL3) have no impact on product security, while higher-level evaluations (EAL4 and above) help improve security through comprehensive reviews and significant testing.
- **Penetration Testing:** Few products have undergone third-party penetration testing, and K has no internal capabilities for this.

K believes that their investments in application scanning provide the greatest payoff. Many of K’s products are “enterprise software,” which provides a measure of security by obscurity. While it’s easy for attackers to access retail software, enterprise software, which sells for hundreds of thousands of dollars and requires custom installation and configuration, is largely unavailable to the general public. However, web interfaces on enterprise software are more accessible and considered riskier.

K’s motivations are primarily driven by customer expectations. Just as customers expect quality assurance testing, they also expect K’s products to be secure. K believes that customers would be surprised at the minimal effort invested in software assurance by vendors. K is also concerned about bad publicity in case of a security flaw. Non-liability clauses in software licenses protect vendors and reduce the incentive to invest in software assurance. If K’s processes were significantly worse than industry standards, they might be vulnerable to negligence claims. Ironically, this study, aimed at improving software assurance, might have the opposite effect if typical vendor practices are minimal, reducing the risk of negligence and thus the incentive to invest further.

Some of K’s customers perform application scanning using automated tools, and a few also perform penetration tests. Organizationally, security at K is distributed, with the head of software assurance reporting to the CTO, who reports to the head of product development. The security team would likely have the ability to stop a release if a serious security flaw is found, though management commitment to software assurance has been weak.

### Company R: Large Non-Security Vendor

R has grown through acquisitions but prides itself on integrating its acquisitions into a common software development process, including software assurance. R provides minimal security training to its developers and performs limited design reviews focused on security. R makes minimal use of application testing tools and performs minimal penetration testing. R relies heavily on source code analysis to find flaws after products have been built and before they are shipped, using a combination of commercial analysis tools and manual analysis.

Some of R’s products have undergone Common Criteria evaluation to meet US government requirements, but R has not found the process particularly helpful in assessing product security. R’s main motivation for software assurance is customer expectation. Customers buy R’s products because they expect them to be reliable, high-performing, and secure. Security is not an option for R’s customers due to their usage. However, R rarely receives explicit inquiries about software assurance.