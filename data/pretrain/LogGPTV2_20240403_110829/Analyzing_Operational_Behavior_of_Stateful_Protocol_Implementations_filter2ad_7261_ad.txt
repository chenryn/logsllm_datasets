### TLS Client Violation of OP1

The TLS client (TLS OP) violates property OP1, which stipulates that the client must not accept a change cipher spec (CCS) message from the server (ServerCCS) if it is received out of order during a handshake. CHIRON's report indicates the existence of an execution path where the client accepts and processes a ServerCCS message, even if it arrives out of sequence, immediately following the receipt of the ServerHello message. Along this path, the client also accepts another in-order ServerCCS message just before receiving the ServerFinished message, ultimately completing the handshake successfully.

Upon closer examination of the TLS OP source code, it becomes evident that the client should only accept a ServerCCS message right before the ServerFinished message to complete the handshake. However, TLS OP does not prevent the client from accepting and processing out-of-order ServerCCS messages after the ServerHello message. This semantic bug is particularly problematic because TLS OP calculates new keys upon receiving the first ServerCCS message and does not recalculate them for any subsequent ServerCCS messages. A man-in-the-middle attacker can exploit this vulnerability by triggering the client to calculate new keys based on an empty master secret, thereby compromising the confidentiality and other guarantees provided by TLS. This issue, identified as CVE-2014-0224, was reported by Masashi Kikuchi and subsequently fixed in a later release of OpenSSL.

### Telnet Server Bug: Accepting Multiple Client Connections Simultaneously

According to the Telnet server documentation in Contiki, the server (property TP1) must not accept any new connections from a Telnet client during an ongoing session. CHIRON's tests generated a realizable counterexample (CEX) for Telnet C24, demonstrating that the Telnet server accepts a new connection even when an existing session is in progress. This semantic bug can manifest whenever an additional connection request is received. Although this bug was previously reported and fixed in a subsequent release of Contiki, its implications are critical:
- **Incorrect Protocol Behavior:** The server re-initializes variables, leading to unexpected behavior.
- **Security Issues:** The server may leak data to unauthorized clients, compromising security.

### Telnet Server Bug: No Reply with Appropriate Command

Both Telnetd implementations from Contiki (Telnet C24 and Telnet C27) violate properties TP2 and TP3, which require the Telnet server to respond appropriately to WILL and DO commands from the connected client. CHIRON's CEX demonstrates that there exists an execution path where the Telnet server fails to send back the required response when the buffer (named `telnetd_buf` in the source code) is full. The `sendopt` function in the Telnetd implementation does not check if the response command has been successfully appended to the buffer, resulting in the server never sending the response to the client. This bug can cause interoperability issues, as the client will keep waiting for a reply from the server.

### Telnet Server Bug: Potential Endless Acknowledgment Loops

Both Telnetd implementations from Contiki (Telnet C24 and Telnet C27) violate properties TP8 and TP9. According to the Telnet RFC, the server must acknowledge a DONT (resp., WONT) command by sending a WONT (resp., DONT) only if the received command causes a change in the current enabled options; otherwise, it must not acknowledge. This is necessary to prevent potential endless acknowledgment loops. Since both Telnet C24 and Telnet C27 implement the Telnet server as NVT, they should not acknowledge any DONT/WONT command requests. CHIRON's CEX shows that the Telnet server actually replies with WONT (resp., DONT) when it receives a DONT (resp., WONT) command request from the client. This can lead to two scenarios causing endless acknowledgment loops:
- **Multiple New Requests:** When the client allows multiple new requests about an option currently under negotiation.
- **Faulty Client:** If the server connects with a faulty client that acknowledges the received DONT and WONT commands. Such loops can degrade the performance of IoT devices running these implementations.

### DHCP Client Bug: No Immediate Start Over of Configuration

According to the RFC, a DHCP client (property DP1) must immediately restart the DHCP configuration process by sending a new DHCPDISCOVER message upon receiving a DHCPNAK message from the DHCP server in response to a previously sent DHCPREQUEST message. CHIRON's analysis of the Contiki DHCP client (DHCP C) generated a CEX demonstrating an execution path that violates this property. The source code reveals that DHCP C does not handle DHCPNAK messages properly. Instead, it repeatedly retransmits the DHCPREQUEST message upon timeout before giving up and starting over the configuration process. While this does not lead to inconsistencies, it hinders performance by continuing ineffective retransmissions, which can drain the power of resource-constrained IoT devices.

### Performance Evaluation

Our experiments were conducted on a commodity machine with an Intel Core i7-2620M CPU, 8GB of RAM, running Ubuntu 14.04 with Linux kernel 3.13. Table V compares the extracted E-FSMs for two event models:
- **Event Model 1 (EM1):** User-provided restricted event model considering only the feasible order of network events.
- **Event Model 2 (EM2):** Less restrictive event model where any network event can occur in any arbitrary order.

For both models, the E-FSMs contain the same number of FSM states and propositions. However, EM2 has more transitions, many of which are spurious and cannot actually occur. In the case of TLS OP, the E-FSMs for both event models have the same number of transitions due to the single relevant network event.