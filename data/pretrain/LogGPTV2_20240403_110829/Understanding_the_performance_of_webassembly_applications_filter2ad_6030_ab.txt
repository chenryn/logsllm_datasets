dimensions of the first matrix are M×N, and the dimensions of the
second matrix are N×K. Typically, programs taking a larger input
would run for a longer time, executing a set of instructions repeat-
edly. Intuitively, such programs have higher chances to be better
benefited from optimization techniques. For example, processors
(e.g., x86 CPU) leverage code cache to optimize frequently executed
instructions. JavaScript engines apply the JIT compilation on the
JS statements that are frequently executed. These optimizations
work well for JavaScript programs, especially those with hot loops.
However, it is unknown whether WebAssembly programs are effi-
ciently optimized. As WebAssembly is actively under development,
its runtime performance is highly dependent on how browser en-
gines optimize WebAssembly virtual machine. We will discuss the
performance impact of input sizes in Sec. 4.3.
535
IMC ’21, November 2–4, 2021, Virtual Event, USA
Y. Yan et al.
Figure 2: Process overview.
3 METHODOLOGY
Overview. Fig. 2 summarizes the procedure of measuring the
performance of WebAssembly and JavaScript. It has four steps:
(1) Source Code Transformation, (2) Compilation to Wasm/JS, (3)
Deployment Instrumentation, and (4) Data Collection.
First, since there are 30 programs in our benchmarks having
compilation errors, we resolve the errors by applying source code
transformation so that these benchmarks can be compiled to We-
bAssembly and JavaScript successfully. The source code transfor-
mation essentially replaces incompatible C constructs that are not
supported by Cheerp with comparable implementations. Second,
we compile 41 C benchmarks using Cheerp to generate WebAssem-
bly and JavaScript programs. Third, we instrument the generated
programs to add time measurement code and create a minimal
HTML page to load the WebAssembly/JavaScript programs. Finally,
we run the generated WebAssembly/JavaScript program in HTML
pages and collect execution time and memory usage using browsers’
built-in developer tools.
3.1 Source Code Transformation
The testing process begins with transforming the source code to
replace incompatible primitives, such as functions and data struc-
tures, with comparable compatible implementations.
the corresponding throw statements, leading to dangling
exceptions at runtime. If an exception is thrown at runtime,
the execution will crash (i.e., causing a segmentation fault).
To resolve this incompatibility, we transform the source code
to avoid using exceptions. As shown in Fig. 3(a), we remove
the try-catch statement and replace a throw statement
with a variable (error at line 10) that stores whether the
exception occurs or not. Then, statements in the catch block
are copied to the error predicate (lines 17-18).
• Union. Cheerp does not support the union data type. In
C, union can be replaced with multiple struct definitions
with proper casting operations on its uses. Fig. 3(b) shows the
related transformation. Specifically, in addition to a structure
t that includes double d at line 23, we define an additional
structure (_T2) that contains ll (line 24). When ll is referred
at line 26, we cast the original structure to _T2 to implement
the union functionality.
Figure 4: Cheerp compiled JavaScript and Wasm programs.
Figure 3: Code transformation examples.
Resolving Incompatible Primitives. One major technical chal-
lenge we encountered was that Cheerp compiler does not support
all C/C++ features generally supported by mainstream C/C++ com-
pilers such as GCC [36]. In particular, we discuss the following
representative challenges that prevent us from compiling the C
benchmarks to WebAssembly and JavaScript.
• Exceptions. Cheerp does not support exceptions correctly.
Specifically, Cheerp blindly removes all the catch blocks
in the try-catch statements. However, it does not remove
536
3.2 Compilation to Wasm/JS
We use Cheerp to generate WebAssembly and JavaScript pro-
grams from the C source files of each program under test. Fig. 4
shows an example of Cheerp compiling a Fibonacci program written
in C (Fig. 4(a)) to JavaScript (Fig. 4(b)) and WebAssembly (Fig. 4(c)).
During the compilation, several parameters are used:
• Input Size. We use 41 C benchmark programs (see Sec-
tion 4.1) in our experiment. For each benchmark, we com-
piled five sets of input with different sizes: Extra Small (XS),
Small (S), Medium (M), Large (L), and Extra Large (XL)”, de-
fined by the benchmark frameworks (PolyBenchC [75] and
Benchmarks(CSource code)Source Code TransformationCompilationDeployment InstrumentationReplacing Incompatible FunctionsWASM with LoaderTestResultsCompiledWASMTransformed C ProgramsCompiledJSInstrumenting Loader and Testing ScriptJS with LoaderData CollectionMeasuring in Chrome and FirefoxInput Embeddingtry{...if(matrix[i][j][k]ll=...;#includeintfib(inti){if(i’ tag.
Instrumenting to Add Timers. To measure execution time,
3.3.2
we use a JavaScript high-resolution timer performance.now().
The timer is added to the generated JavaScript program and the
JavaScript loader. Specifically, we insert the timer calls before the
target program starts, and after the program ends. Each benchmark
was executed five times to get the average.
3.4 Data Collection
We test the performance of WebAssembly and JavaScript on
three mainstream browsers (Chrome, Firefox, and Edge). For each
experiment, we use browsers’ developer tools (i.e., DevTools) to
collect two metrics: (1) Execution Time and (2) Memory Usage. Note
that the measured performance includes overhead caused by other
components of web browsers such as page renderer. To reduce the
overhead imposed by other tasks, we run only one browser tab that
executes a single benchmark at a time.
4 EVALUATION
In this section, we first describe the three kinds of subject pro-
grams used in the study. Next, we measure the performance of We-
bAssembly and JavaScript: (1) compiled with various optimization
levels, (2) with diverse inputs, and (3) when executed in different
browsers and platforms. We evaluated the desktop performance
and mobile performance of three mainstream browsers, Google
Chrome (v79) [37], Mozilla Firefox (v71) [66], and Microsoft Edge
(v79) [61]. The desktop experiments were done on a machine with
Intel Core i7 processor and 16 GB memory, running Ubuntu 18.04.2.
For experiments on mobile phones, we used a Xiaomi Mi 6 phone
with an 8-core processor and 6 GB memory, running Android OS.
We collected the execution time and memory usage on mobile
browsers using Android Debug Bridge (adb) [4]. The parameters
we used with Google Chrome in each subsection of the evaluation
are described in Appendix A.
4.1 Subject Programs
Our study includes three kinds of subject programs: (1) 41 We-
bAssembly binaries and 41 JavaScript programs compiled from 41
widely-used C benchmarks, (2) 9 compiler-generated WebAssembly
binaries and 9 manually-written JavaScript programs, and (3) 3 real-
world applications having implementations in both WebAssembly
and JavaScript.
Note that for the first two sets of subject programs, we develop
WebAssembly by converting implementations from C rather than
basing it on JavaScript. This is because C/C++ to WASM compi-
lation is the more desirable way for WASM development, even if
some JS to WASM compilation is possible. Currently there is no
compiler that directly compiles generic JS to WASM, as several
essential features in JavaScript, such as garbage collection, are not
supported in WebAssembly. A subset of TypeScript to WASM com-
piler exists, but the project is not for generic JavaScript and has
been inactive for several years [90]. By contrast, the support of
compiling C/C++ features to WASM is relatively mature, as several
components of WASM compilers are built atop the components of
compilers targeting C/C++. Besides, it is worth mentioning that the
original intention of WASM development is not to replace JS but as
a way to complement it.
4.1.1 Compiler-Generated WebAssembly and JavaScript. First, we
compile 41 C benchmark programs to WebAssembly and JavaScript,
and measure the contributing factors of their performances (Sec. 4.2,
4.3, 4.4, and 4.5). As shown in Table 1, these 41 C programs are se-
lected from two widely-used C benchmark suites: PolyBenchC (ver-
sion 4.2.1) [75] and CHStone (version 1.11) [44]. The two benchmark
537
IMC ’21, November 2–4, 2021, Virtual Event, USA
Y. Yan et al.
Table 1: Benchmark statistics.
“covariance”, “durbin”, “gramschmidt”, and “ludcmp”. (2) CHStone:
(2a) Encryption: “AES”, “BLOWFISH”, and “SHA”. (2b) Image/video
editing: “MOTION”. (2c) Scientific visualization and simulation:
“ADPCM” and “GSM”. (2d) Platform simulation/emulation: “MIPS”.
(2e) Signal processing that use intensive floating-point computa-
tions: “DFADD”, “DFDIV”, “DFMUL”, and “DFSIN”.
4.1.2 Compiler-Generated WebAssembly and Manually-Written Java-
Script. The second experiment setting is to compare WebAssembly
with native JavaScript (rather than JavaScript generated from C).
To do so, we manually implement 9 benchmarks chosen from Poly-
BenchC and CHStone, each representing one category of compu-
tations (data mining, BLAS routines, linear algebra kernels, linear
algebra solvers, algorithms in a graph, scientific simulation, two
different cryptographic algorithms, and hashing)1. Note that one
benchmark can be written in JavaScript in many different ways. To
make these implementations better represent real-world JavaScript,
we leverage popular JavaScript libraries, including math.js [50]
(11.1k stars on GitHub) and jsSHA [8] (2k stars on GitHub), and use
standard W3C APIs, such as Web Cryptography API [89] to per-
form SHA hashing, whenever possible. The list of manually-written
JavaScript programs and their LOC are shown in Table 9.
4.1.3 Real-World Applications in WebAssembly and JavaScript. Fi-
nally, we look for real-world applications that are available in both
WebAssembly and JavaScript from GitHub repositories. Specifically,
we search for GitHub repositories with the topics ‘WebAssembly’
and ‘wasm’, rank these repositories by the number of stars, and
then manually inspect these popular projects. Note that finding We-
bAssembly and JavaScript implementations of the same program on
GitHub is nontrivial, and there aren’t many of them available. After
inspecting over 150 GitHub repositories, we find three widely-used
libraries that have both WebAssembly and JavaScript implementa-
tions: Long.js, Hyphenopoly.js, and FFmpeg. We briefly describe each
library below. The details of the libraries, including LOC, project
size, and the input we used for the test, are given in Table 10.
Long.js defines a Long class to represent a 64 bit two’s-complement
integer value. According to ECMAScript, the JavaScript Number
type cannot represent integers whose magnitude is greater than 253
safely [59]. This library is commonly used for supporting full 64-bit
integer values and reliable 64-bit integer arithmetic operations. Both
WebAssembly implementation and JavaScript implementation [24,
25] of Long.js are available in the same repository [22].
Hyphenopoly.js hyphenates text if the user agent does not sup-
port CSS-hyphenation or has no support for a required language.
For example, if the input is ‘Hyphenation’ in American English, the
output should be ‘Hy-phen-ation.’ The WebAssembly implementa-
tion [65] (with 481 GitHub stars) and the JavaScript implementa-
tion [63] (with 593 GitHub stars) are from two different reposito-
ries [62, 64] but created by the same author.
FFmpeg provides functions and utilities to record, convert, and
stream audio and video [32]. Compared to the other two projects,
this project is much larger with over 9 million LOC and 23 MB.
For this application, the WebAssembly implementation [34] (with
4.1k GitHub stars) and the JavaScript implementation [21] (with
1To the best of our knowledge, there is no official JavaScript implementation of Poly-
BenchC and CHStore.
Yule-Walker equations solver
Biconjugate gradient stabilization
LOC Description
958 Convariance computation
984 Normalized covariance computation
978 Generalized matrix multiplication
997 Multiple matrix-vector multiplication
Summed matrix-vector multiplication
963
Symmetric matrix multiplication
977
Symmetric rank k update
955
Symmetric rank 2k update
970
954
Triangular matrix multiplication
Two matrix multiplications
999
1,015
Three matrix multiplications
953 A𝑇 times Ax
969
960 Numerical scientific simulation
962 Matrix vector multiplication
952 Matrix decomposition
945
974 QR Matrix decomposition
LU Matrix decomposition
952
Linear equations solver
994
936
Triangular matrix solver
Edge detection and smoothing Filter
1,010
Shortest paths in graph solver
928
RNA folding prediction
1,277
2D heat diffusion simulation
988
998
Electric and magnetic fields simulation
954 Heat Equation w/ 3D space simulation
Jacobi-style stencil computation (1D)
940
943
Jacobi-style stencil computation (2D)
933 Gauss-Seidel stencil computation (2D)
843
1,187 Cryptographic algorithm
1,896 Data encryption standard
5,014 Addition for double
2,689 Division for double
2,487 Multiplication for double
Sine function for double
3,192