> [TOC]
## 理论基础
  1. Chrome扩展一般指通过Chrome提供的API进行编程，自定义处理一些浏览器的行为或功能的软件。
  2. 常用的浏览器Chrome、新版Edge、Opera、brave等浏览器均基于 [Chromium 开源项目](https://www.chromium.org/Home)内核进行开发，故在一定程度上可以通用部分常见浏览器API，即所谓的Edge浏览器可以安装Chrome扩展的原理依据。
    * Chromium 浏览器之间不存在 API 奇偶校验，所以尽管使用同一浏览器内核，但不同的内核版本和后续开发目标仍然可能影响浏览器API的提供。故一个完善的多浏览器支持的扩展可能需要根据对应浏览器文档修改差异的API调用。
      * Chrome API 文档： 
      * Opera API 文档： 
      * Edge API 文档： 
    * Firefox浏览器使用开源内核Gecko，但由于Firefox v57后引入WebExtensions API并不断完善，实际上Firefox的扩展API和Chrome内核的扩展API有很大程度的兼容。经过一定实际测试，在大多数情况下，为Chrome的浏览器编写的扩展程序只需进行一些更改即可在 Firefox 中运行。
      * 移植Chrome扩展到Firefox： 
      * Firefox 扩展开发文档： 
  3. 扩展基于网页技术（HTML、JavaScript和 CSS）构建而成。它们在单独的沙盒执行环境中运行，并与 Chrome 浏览器进行交互。即主要的程序逻辑由JavaScript编写，在单独的网页（Manifest V2）或Service Worker（Manifest V3）中执行。
  4. Chrome扩展目前主要分为Manifest V2和Manifest V3两个架构，两种架构所支持的API和运行原理有很大差异。
    * 谷歌目前已经停止允许公开可见性（public）的V2扩展进入谷歌扩展商店（2022.6）。根据最新的计划（2022.9.28），谷歌浏览器可能会在（2023.1）Chrome v112实验性的停止开发版对V2架构扩展的支持，在（2023.6）Chrome v115实验性的停止稳定版对V2架构扩展的支持，在（2024.1）停止对V2企业策略（即私有扩展）的支持并移除所有谷歌扩展商店的V2架构扩展。
    * 但是由于Chrome Manifest V3的机制的激进更改和少许偶发性的Bug，导致大量常用扩展仍未升级为Manifest V3架构，Manifest V2仍然是目前的扩展主流。
    * Manifest V1架构已在Chrome v18后弃用。
    * 目前在开发者模式加载未打包的插件时，会有Manifest V2已经不建议使用的告警。
## Manifest V2扩展开发实战
目前扩展开发还是建议先大概读一下官方文档，大致了解扩展的基本结构和可以使用的API，再根据自己的需求查看对应API的详细调用格式。
  * Chrome官方文档地址： 
  * Chrome官方文档地址（Manifest V2）：
  * 中文版文档地址（Manifest V3）： 
下面会根据一个简单的编码/解码扩展实现来讲述一下安全扩展快速开发可能涉及到的内容。
### 清单文件manifest.json
简单来说，Chrome扩展是由清单文件manifest.json、扩展运行逻辑脚本JS文件、资源文件（如HTML、CSS、图片文件等，非必须）组成的。  
按照Chrome扩展的要求，清单文件manifest.json必须放置在扩展文件夹的根目录，除此以外扩展对其他的js或资源文件没有任何的目录要求（对于Manifest
V3来说，background javascript文件必须与清单文件同样放置于扩展根目录）。  
以下为Github某插件项目的文件结构：  
完整的清单文件的选项可以查看官方文档中的模板：
清单文件manifest.json决定了浏览器以怎样的方式处理扩展的JS与资源文件，这些配置将以json键值对的形式被解析，下面是一个清单文件的简单示例，开发者可以通过自己的需求对非必须字段进行删改。
    {
        // 插件名称
        "name": "BrowerToolkit",
        // 插件作者
        "author": "Ghroth",
        // 插件版本
        "version": "1.0",
        // 插件架构
        "manifest_version": 2,
        // 插件描述
        "description": "Encode/Decode、Set Cookie",
        // 插件图标
        "icons": { 
          "16": "resource/img/ico.png",
          "64": "resource/img/ico.png"
        },
        // 插件后台运行脚本
        "background": {
            // 始终运行，不会在空闲时休眠
          "persistent": true,
            // 后端运行脚本路径
          "scripts": ["resource/js/background.js"]
        },
        // 浏览器右上角插件栏设置
        "browser_action": {
            // 将鼠标悬停在操作图标上时向用户提供简短说明
          "default_title": "BrowerToolkit",
            // 插件栏图标
          "default_icon": "resource/img/ico.png",
            // 插件栏点击后弹出页面地址
          "default_popup": "resource/html/popup.html"
        },
        "permissions": [
          // API的使用权限
          "contextMenus",
          // 对相应网站的访问权限
          "http://*/*",
          "https://*/*"
        ],
        // CSP
        // 需要内联CSS生效的，style-src后面添加'unsafe-inline'
        // 需要进行web3模板生成的，script-src后面添加'unsafe-eval'
        "content_security_policy": "style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-eval'; object-src 'self';"
    }
### 后台脚本background
后台脚本在插件中处于一个服务端的角色，由指定的HTML页面或JS文件承担，开发者一般将需要后台持续运行的代码逻辑放置在后台脚本中。  
后台脚本通过清单文件中的background键进行配置，子键page决定了后台页面的路径，子键scripts决定了后台脚本的路径（该子键和page互斥，传入参数为字符串数组），子键persistent决定了脚本是否持续运行（即在不使用时休眠以节约浏览器资源）。  
需要注意的是，当persistent的值为false，即后台脚本不持续运行时，后台脚本中的JS全局变量是不可靠的，其保存的值会在脚本休眠时被删除（这一机制的类似模式在Manifest
V3中成为强制要求），此时可以使用Chrome提供的storage接口进行数据的同步或异步的保存。当persistent的值为true时，开发者可以放心的使用后台脚本中的全局变量，他们会符合正常逻辑的在浏览器开启或扩展刷新（即后台脚本加载）时被定义，浏览器关闭时（即后台脚本移除）时被移除。  
下面示例为后台脚本background.js的代码，它将在插件安装时使用contextMenus API在网页的右键菜单中添加相关可选项，API的用法将会在
**Chrome API调用** 这部分进行详细解释。
    chrome.runtime.onInstalled.addListener(function () {
        chrome.contextMenus.create({title: "WebToolkit", id: "WebToolkit", enabled: true}, function(){
            chrome.contextMenus.create({title: "对选中内容进行base64解码", parentId: "WebToolkit"});
        });  
    })
### 用户界面、browser_action、page_action和弹出页面popup
清单文件中的browser_action键则定义了一个出现在扩展栏的图标，它接受default_title、default_icon、default_popup等子键来分别决定图标标题（鼠标悬浮时显示的文字描述）、图标图片和点击时弹出的popup页面。  
类似的键还有page_action，它接受的子键与browser_action类似，但是此类图标并非一直可用，通过
**pageAction** 或 **declarativeContent**
等API决定此图标在某些页面上是否可用。对于低版本的Chrome来说，page_action最早设计出现在地址栏尾部，后来高版本Chrome将其移至扩展栏处（即与browser_action一致）。  
对于弹出页面popup来说，这个页面将是大多数扩展进行数据展示和用户逻辑处理的页面。它将在点击工具栏图标时加载和渲染相关元素，初始化内部JS代码。用户在点击popup以外的浏览器界面时将会关闭popup，此时所有的元素和变量都将被销毁。以下为扩展Wappalyzer的弹出页面。  
下面是示例扩展在popup中的代码，它通过html和js定义了一个进行编码转换的输入框，可用通过选择编码方式进行编码解码。
        ......
    # popup.js
    var codetextarea = null
    var atext = ""
    var btext = ""
    var stext = ""
    var codebutton = document.getElementById("codebutton")
    codebutton.onclick = codetext
    function codetext() {
        atext = ""
        btext = ""
        stext = ""
        codetextarea = document.getElementById("codetext")
        atext = codetextarea.value
        stext = document.getElementById("codeselect").value
        if (atext != "" && stext != "") {
            switch (stext) {
                case "0":
                    // Base64 Decode
                    btext = atob(atext)
                    break;
                case "1":
                    // Base64 Decode(中文UTF8+Url编码处理)
                    btext = decodeURIComponent(atob(atext))
                    break;
                ......
                default:
                    btext = ""
            }
        }
        if (btext != "") {