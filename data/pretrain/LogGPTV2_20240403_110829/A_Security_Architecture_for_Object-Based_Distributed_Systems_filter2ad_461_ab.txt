thentication and access control. For a given DSO, permis-
sions are simply associated with user public keys, and users
are granted those permissions if they can prove knowledge
of the associated private keys.
Finally, Globe objects use digital certiﬁcates to grant per-
missions. There are three types of such certiﬁcates: user
certiﬁcates, replica certiﬁcates, and administrative certiﬁ-
cates. Each of these certiﬁcates binds a public key to a
set of rights the entity possessing the corresponding private
key has with respect to the object. When using digital cer-
tiﬁcates, one should also consider the problem of revoking
them. A detailed description of the revocation mechanisms
in Globe is outside the scope of this paper, details are given
in [21].
A user certiﬁcate speciﬁes which of the DSO’s methods
the user is allowed to invoke. This information is encoded
as a bitmap U of size equal to the number of methods for
that object (for now, we assume the object’s public methods
do not change during the object’s lifetime). A 1 means the
user is allowed to invoke that method; 0 means he is not.
An example is shown in Figure 3(a).
We can see that user certiﬁcates describe the access con-
trol policy for the DSO. Replica certiﬁcates are used for re-
verse access control, that is, ensuring that user requests are
sent only to replicas allowed to execute them. Whenever a
user wants to invoke a given DSO method, his user proxy
has to ﬁnd a replica that is allowed to execute the method
under the DSO’s security policy. Replica certiﬁcates are
useful when the object owner wants to restrict the execu-
tion of security-sensitive methods (e.g.
those that change
the object’s state) to a set of core replicas, while less sensi-
tive operations (e.g. reads) can be executed by less trusted
caches. We use replica certiﬁcates to specify which meth-
ods a replica is allowed to execute. This information is en-
coded as a bitmap R of size equal to the number of methods
for the DSO. A 1 in the bitmap means the replica is allowed
to execute the corresponding method, while a 0 means it is
not. An example is shown in Figure 3(b).
Finally, administrative certiﬁcates govern the way cer-
tiﬁcates are issued. They specify the types of certiﬁcates an
administrative entity (i.e. user or replica) is allowed to issue
under the DSO’s security policy. For a DSO, any certiﬁcate
either has to be signed with the object’s private key, or has to
be part of a certiﬁcate chain that starts with an administra-
tive certiﬁcate signed with the object’s private key. All the
certiﬁcates in this chain, except possibly the last one, need
to be administrative certiﬁcates, such that certiﬁcate Ck1
is signed with the private key corresponding to the public
key in certiﬁcate Ck, and Ck has been delegated the right
to issue certiﬁcates of the type of Ck1. Figure 4 shows an
example of such a chain.
An administrative certiﬁcate will contain two bitmaps, R
and U, and a bit D. The R bitmap speciﬁes what types of
replica certiﬁcates the administrative entity is allowed to is-
sue. The U bitmap speciﬁes what types of user certiﬁcates
the administrative entity is allowed to issue. The D bit is
called the delegation bit, and controls whether the admin-
istrative entity is allowed to issue administrative certiﬁcates.
This organization is shown in Figure 3(c) and works as fol-
lows:
(cid:15) If the R bitmap in an administrative certiﬁcate is not
all 0s, the corresponding administrative entity is al-
lowed to issue certain types of replica certiﬁcates. The
R bitmap in these replica certiﬁcates has to be a subset
of the R bitmap in the administrative certiﬁcate.
(cid:15) If the U bitmap in an administrative certiﬁcate is not all
0s, the corresponding administrative entity is allowed
to issue certain types of user certiﬁcates. The U bitmap
in these user certiﬁcates has to be a subset of the U
bitmap in the administrative certiﬁcate.
(cid:15) Delegation Rule: if the delegation bit D in an adminis-
trative certiﬁcate is 1, the corresponding administrative
entity is allowed to issue certain types of administra-
tive certiﬁcates. The U and R bitmaps in these newly
produced certiﬁcates should be subsets of the bitmaps
in the issuer’s administrative certiﬁcate. The delegate
can itself be delegated.
At ﬁrst it may seem strange to have both users and repli-
cas as administrators for an object, since one would usually
associate a human with such a role. Administrative repli-
cas come in handy when we deal with massively replicated
DSOs. For such DSOs, a highly dynamic pattern in client
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
User Certificate
User’s Public Key
Issuer’s Signature
U:
 0010011100
Replica Certificate
Replica’s Public Key
Issuer’s Signature
R:
 1100011100
Administrative Certificate
Administrative Public Key
Issuer’s Signature
U:
R:
D:
 0110111111
 1101111100
 0
  (a)
  (b)
  (c)
lic/private key pairs, so that an entity can be identiﬁed
through its public key. Finally, Globe entities are granted
permissions through the use of digital certiﬁcates, as we saw
in Figure 3.
Figure 3. (a) User certiﬁcate that allows the
invocation of methods 2; 5; 6; and 7 of
a DSO. (b) Replica certiﬁcate that allows the
execution of methods 0; 1; 5; 6; and 7
of a DSO. (c) Administrative certiﬁcate that
allows issuing both (a) and (b) but does not
allow issuing any administrative certiﬁcates
Administrative Certificate
Administrative Public Key
Signed with DSO’s key
U:
R:
D:
 0110111111
 1101111100
 1
signs
superset
superset
delegation allowed
Administrative Certificate
Administrative Public Key
Issuer’s Signature
U:
R:
D: 0
 0000111100
 1101000000
signs
superset
User Certificate
User’s Public Key
Issuer’s Signature
U:
 0000001100
Figure 4. A certiﬁcate chain in Globe
requests can be better handled by creating new replicas on
the ﬂy, in places where most of the user requests come from.
In such a scenario, one user administrator can manually
create (through his user proxy) a number of administrative
replicas, and issue administrative certiﬁcates granting them
the right to issue replica certiﬁcates. These administrative
replicas could in turn monitor user requests and create reg-
ular replicas in places where they can better handle these
requests.
Since digital certiﬁcates are extensively used to grant
permissions, we should also consider the problem of cer-
tiﬁcate revocation. In Globe, administrative entities are re-
sponsible for generating certiﬁcate revocation lists (CRLs),
and posting them to on-line directories, where they can be
consulted by interested parties. Replicas are responsible
for checking CRLs before servicing user requests, and also
with proving to the users that their replica certiﬁcates have
not been revoked.
The last concept we need to introduce in this section is
replica location. Since some methods can be executed only
by certain replicas, a user proxy needs a way to query for
replicas allowed to execute certain methods.
If the DSO
implements its own replica directory service, such a ser-
vice should register the bitmaps associated with replicas and
support queries on individual bits in these bitmaps. Alterna-
tively, a DSO can simply register its replicas with the Globe
Location Service, which has been implemented to fully sup-
port such queries [5]. It is important to understand that the
location service need not be trusted (except for not mount-
ing DoS attacks); the results of a location query are just
hints to where replicas with bitmaps allowing the execution
of certain methods can be found. Before dispatching a re-
quest to a given replica, a client has to verify that replica
has indeed been allowed to execute that request. We will
see how this is done in Section 7.
Let us now summarize the concepts introduced so far:
the Globe security architecture is based on public key cryp-
tography. DSOs, replicas, and users are assigned pub-
4.2 Integrating External Trust Authorities
In the previous subsection, we have shown how Globe
DSOs create their own trust hierarchies. However, Globe
was designed to support billions of objects, and having to
deal with billions of trust roots is clearly not scalable. In
practice, human users have a small number of external orga-
nizations they trust (the DNS root, the university’s system
administrator, maybe the local Internet provider). In this
section we will show how our DSO-centric trust model can
accommodate external trust authorities.
First, a DSO trust hierarchy can be linked to a larger ex-
ternal hierarchy. This can be easily accomplished by having
the external trust root sign a digital certiﬁcate that associates
the DSO’s public key to whatever role that DSO plays as
part of the external trust hierarchy. Alternatively, a Certi-
ﬁcation Authority (CA) can certify an organization, so that
the organization can then use its certiﬁed public key to cer-
tify the public keys of all the DSO’s that belong to it. To
facilitate the inspection of such external certiﬁcates, each
Globe DSO provides a show pedigree() method that returns
all digital certiﬁcates that link that DSO to external trust
roots.
Another possibility is to generate a DSO trust hierar-
chy based on a larger external hierarchy (for example a
company-wide role based access control scheme). This
can be accomplished by providing a mapping that speci-
ﬁes which of the DSOs methods each entity in the exter-
nal trust hierarchy is allowed to invoke (such an entity can
be a principal, group of principals or role). Such a map-
ping will have to be distributed only to the administrative
replicas of the DSO that are in charge with issuing user cer-
tiﬁcates. These administrative replicas will also have to be
ﬁtted with the mechanisms necessary to authenticate prin-
cipals in the external hierarchy (mechanisms which may or
may not be public-key based.) Because these authentica-
tion mechanisms are application-speciﬁc they will have to
be implemented as part of the semantics subobject of the ad-
ministrative replicas. It is important to understand that the
vast majority of non-administrative replicas of the DSO do
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
not need to know anything about external trust hierarchies.
They only deal with the compact security policy described
in user certiﬁcates.
5 Secure Binding
Secure binding boils down to establishing a trust rela-
tion between a DSO and its users. Namely, we want to
securely associate a DSO to its public key, securely asso-
ciate a replica to a DSO and securely associate a DSO to a
real-world entity.
The ﬁrst problem - securely associating a DSO to its pub-
lic key - can be solved by simply making the object’s public
key a part of the object ID (however, this has the disadvan-
tage of having to change the OID whenever the object key
needs to be changed). This is not a new approach. Sys-
tems like SFS [18] have pioneered the idea of making the
resource key a part of the resource name. For Globe, we
decided to apply the same idea to object IDs. As a result,
we deﬁne a DSO’s OID to be the 160 bit SHA-1 hash [1]
of the object’s public key. The self-certifying OID is also
an elegant solution to another problem, namely how to gen-
erate unique OIDs without relying on a central authority.
In this case, by simply generating the OID, a user is sta-
tistically guaranteed that OID is unique (given it has used
a good public key generator algorithm so the key is statis-
tically unique, the probability of a collision for SHA-1 is
extremely low).
Now that we can securely associate a public key with
an object, we can also solve the problem of securely as-
sociating replicas to DSOs.
In Section 4.1 we explained
that replica certiﬁcates are used to specify which methods
a replica is allowed to execute. The replica certiﬁcate it-
self, together with the associated administrative certiﬁcate
chain, can be used as a proof that the replica is indeed part
of the object. Remember that the replica certiﬁcate plus the
administrative certiﬁcate chain securely bind the object’s
public key to the replica’s public key (the key of the user
who runs that replica) because the administrative certiﬁcate
chain must start with a certiﬁcate signed with the object’s
key. We just showed how a self-certifying OID securely
binds that OID to the object’s public key. Therefore, by
simply looking at the OID, at the replica certiﬁcate, and its
associated administrative certiﬁcate chain, one can deter-
mine whether a replica is indeed part of the object.
We have shown how secure bindings can be established
between objects and their public keys, and between objects
and their individual replicas. However, trusting these as-
sociations will not convince a user that an object actually
does what it is supposed to do. For example, a user may
not be willing to use a DSO modeling a home banking ap-
plication unless she is convinced that a real-world bank is
in charge of that DSO. Simply associating a replica with an
object ID and a public key is clearly not enough to estab-
lish such a trust relationship. What we need here is a secure
name binding, in the example we gave - a binding between
an OID (implicitly bound to a public key) and a bank name.
We claim that such a name binding needs human interac-
tion in order to be secure. This idea is close to the rationale
presented in the SDSI document [23] that accepting another
individual’s public key and associating it with a local name
should always be human mediated.
There are multiple ways one can achieve secure name
binding. For example, one could go to the local bank ofﬁce,
sign for the home banking service, and then receive the ob-
ject handle (OID plus information on how to ﬁnd replicas)
for the home banking application together with the user cer-
tiﬁcate on a ﬂoppy disk. Another possibility is for the user
to get the object handle from the bank’s Web site through a
secure HTTP connection, or through secure e-mail, bind to
the object and use one of the object’s methods to register for
an account and receive a user certiﬁcate. Yet another pos-
sibility is to get the object handle from an on-line untrusted
directory, and invoke the DSO’s show pedigree() method to
get the object’s “pedigree” certiﬁcate signed with the bank’s
private key (which in turn can be certiﬁed by a trusted CA).
Globe does not rely on any automatic way of discovering
trusted applications, it is the user’s responsibility to decide
which objects she wants to use. The Globe object server
provides only a front end for associating human readable
application names to object handles in such a way that when
the human user selects an application name, a user proxy is
then created on the server, so that the user can invoke the
object’s methods.
Let us summarize what we have presented in this section.
In Globe we make use of self-certifying OIDs to establish