bine ground truth from external threat intelligence with large passive DNS datasets (Step
(5)). The passive DNS datasets enable the creation of a graph between the bots in the local
network and the Internet infrastructure contacted by the bots. The graph is represented by
an association matrix. Spectral analysis of the association matrix enables us to extend the
ad-abuse domains to a larger set that is highly related to the ground truth. The module
iteratively expands the set of ad-abuse domains using sliding temporal windows and im-
proves our understanding of the long-term ad-abuse operation (Step (3)). After expansion,
the module sanitizes extended ad-abuse domains using historical WHOIS information to
eliminate false positives.
The resulting output from both modules will be combined (Step (6)) to derive the ﬁnal
reports (Step (7)). The infrastructure report includes all domain names and IP addresses
used by the ad-abuse campaign. These domains and their historical DNS lookup volumes
are used to generate the ﬁnancial abuse report. We use a ﬁnancial model to approximate a
lower bound of advertisers’ loss caused by the campaign.
3.3.2 Datasets to Study Ad-abuse
Before we describe the two modules in A2S in detail, we need to explain the necessary
datasets required to analyze an ad-abuse campaign. These datasets include sinkholed trafﬁc
from ad-abuse domain take-over actions and passive DNS datasets that contain historical
DNS resolutions for domain names observed in the local network.
Following a DNS query, the infected host will request commands from the C&C server.
For instance, the infected host could request a list of ads to view or click on, report user
content such as cookies and recent search terms, or even report fraudulent clicks and im-
pressions that took place. These communications between the infected host and the ad-
abuse C&C servers can be observed in the sinkhole datasets, which should include both the
21
DNS resolution requests for sinkholed domain names and all application layer (i.e., HTTP)
communication attempts towards the sinkhole infrastructure.
In addition to the sinkhole datasets, A2S needs passive DNS datasets. Speciﬁcally, the
datasets are recursive DNS query trafﬁc (qDNS) from the hosts within the network and
traditional deduplicated passive DNS datasets (pDNS-DB) that record domain names and
their historical resolutions. A2S uses these datasets to identify ad-abuse C&C domains
from ground truth set D$ to a bigger set DA, which we will thoroughly explain in Sec-
tion 3.3.4.
Often, ad-abuse botnet modules use domain name generation algorithms (DGA) [62,
52] to facilitate the fraudulent activities. In such events, we can use DNS queries that result
in “non-existent domain” (a.k.a. NXDOMAINs) as the qDNS dataset since unknown C&C
domains may have never resolved. The use of DGAs is the most complicated case of ad-
abuse. TDSS/TDL4 uses a server-side DGA to facilitate ad-abuse.
3.3.3 DNS Ad-abuse Rate Module
The DNS Ad-abuse Rate module quantiﬁes the number of ad-abuse events that are per-
formed after a single DNS request. In this case, the ad-abuse events are the C&C connec-
tions asking for impression or click fraud commands. This ad-abuse rate maps DNS lookup
volume to the number of total ad-abuse events. To properly compute the rate, the module
needs to analyze DNS queries and application-layer HTTP requests to sinkholed ad-abuse
domains.
We deﬁne the “DNS Ad-abuse Rate” as ζ = y/x, where x is the number of domain
name resolution requests for the sinkholed domains and y is the number of application-layer
communication attempts that reﬂect ad-abuse events. In other words, the module needs to
observe x domain name resolution requests and y HTTP connections to the sinkhole, within
a time window t, to safely assume a ζ level of ad-abuse happened with each historical ad-
abuse domain lookup. Administrators can collect such sinkhole datasets either by acquiring
22
a commercial sinkhole data feed or by independently taking over the ad-abuse domains,
locally or globally.
Using ζ, the module can provide the system the ability to pivot from “short-term” sink-
hole observations to “long-term” passive DNS observations. Speciﬁcally, we can use the
DNS Ad-abuse Rate to analyze many years of DNS trafﬁc related to the ad-abuse operation
using passive DNS datasets. We now discuss how A2S mines these datasets.
3.3.4 Spectral Expansion Module
The Spectral Expansion module uses local network trafﬁc to reason about the domain
names used for the ad-abuse operation, over a long period of time. The module accurately
identiﬁes additional domains based on original ground truth knowledge of the ad-abuse
operation, using a large passive DNS dataset. In other words, the spectral expansion mod-
ule is able to take a set of ground truth domains, D$, and eventually derive a larger set of
domains, DA, that have historically participated in the ad-abuse activities.
A2S derives DA using spectral clustering on DNS datasets from the local network. The
spectral expansion algorithm iterates through the entire DNS query dataset (qDNS). Each
iteration walks over DNS data for a given day, with the goal of discovering new ad-abuse
domains that will be added to the DA set.
We conservatively assume that unknown ad-abuse domains were queried by a common
group of infected hosts, or they pointed to the same Internet infrastructure that served the
known ad-abuse domains over the same temporal window. Each day, we create a tripar-
tite graph that “links” candidate domain names, their resolved IP addresses or Canonical
Names (CNAMEs), and the network hosts that queried for them. The association matrix
representing such a graph can be seen in Figure 3.3.
Spectral decomposition of this matrix enables this module to group candidate domain
names that either share common Internet infrastructure and/or local network hosts that
queried them, via standard clustering methods. Then we analyze the clusters to add domain
23
Algorithm 1 Spectral Expansion Algorithm
Require:δ
1: H ← {h|∃q ∈ DA : h queried q on day di}
2: D ← {q|∃h ∈ H : h queried q on di}
3: Rdata ← {ip|∃q ∈ D : q resolved to ip historically} ∪ {cname|∃q ∈ D : q resolved
to cname historically}
Hosts.
IPs and hosts.
4: Apply thresholds α and β to the sets of Rdata and H, respectively, to remove noisy
5: M ← relationship between D and (Rdata, H). Normalize by IPs, CNAMEs and
6: S ← M × M T
7: U ΣV ∗ ← SV D(S)
8: clusters ← XM eans(U )
9: DA ← Analyze clusters.
10: i = i + δ, Go to line 1.
names to DA. Domains are added if they have explicit relationships with already known
ad-abuse Internet infrastructure or share common infected hosts.
Algorithm 1 formally describes the spectral expansion process. Each iteration of the
algorithm processes the DNS resolutions of day, di, to update the ad-abuse domain set, DA.
The operator can set δ to determine how the algorithm iterates through time.
Next we discuss the steps in detail for one iteration. Initially we assume that DA =
D$. The ﬁrst four steps prepare necessary data for assumbling the association matrix for
domains of interest. In the ﬁrst step, the algorithm identiﬁes all internal network hosts (H)
querying any known ad-abuse domain in DA. In the second step, the algorithm narrows
down potential unknown ad-abuse domains to all domains (D) queried by infected hosts
(H). In the third step, we obtain all historical IP addresses and CNAMEs for domain
names in D from the local passive DNS database, denoted as Rdata.
During the fourth step, the algorithm removes any “noisy IP addresses” from Rdata
and “noisy hosts” from H.
IP addresses that are likely used for parking or sinkholing
and hosts that are probably large gateways or part of security research infrastructure can
introduce noisy association between domains that do not reﬂect ad-abuse behavior (see
Figure 3.3). The algorithm excludes such “noisy” IPs and hosts by using two aggressive
24
Figure 3.3: Association matrix for domain, RDATA, and host.
thresholds. Note that aggressively removing noisy IP addresses and hosts reduces connec-
tions in the graph that could have led to more C&C domains, but results in safer estimation
that is still a lower-bound.
The ﬁrst threshold (α) denotes the number of related historical domain names for an
IP address seen from network trafﬁc on the local network. We exclude IPs with an unusu-
ally high number of domains. The second threshold (β) relates to the number of domains
queried by an infected host. In this case, if the number of domains queried by a host is
more than what’s typical for infected hosts in the local network, we exclude it from the
set H. The way we reason and select the actual values of α and β will be discussed in
Section 3.5.2.
In the ﬁfth step, the algorithm builds an association matrix linking the domains in D
with the set of IP addresses and CNAMEs in Rdata and the set of internal hosts in H
that queried them. An example matrix is shown in Figure 3.3. The rows represent all
domains queried by infected hosts (q1...qm), and the columns reﬂect historically resolved
IPs/CNAMEs and the hosts that queried those domains in the day di. In order to assemble
the matrix we compute two types of weights.
The ﬁrst weight represents the DNS lookup properties from the domains in Rdata, with
respect to IPs and CNAMEs. Speciﬁcally, the weights wij and w
the ﬁrst day (wij) and the last day (w
the same sense, the weights wik and w
(cid:48)
ij are the timestamps for
(cid:48)
ij) we observed domain name qi resolving to IPj. In
(cid:48)
ik are the timestamps for the ﬁrst and last day we
observed domain name qi resolving to CNAME CNk.
25
q1qiIP1……qmIPsIPjCNt…HvHl……wilwijResolved DataHostsIP1’IPj’wij’…CNt’IPs’CNkCNk’…CNuCNu’wikwik’w11w11’wj1wj1’wm1wm1’w11w11’…………………wmjwmj’………………w1sw1s’wiswis’wmswms’………w1tw1t’w1kw1k’w1uw1u’witwit’wiuwiu’wmtwmt’wmkwmk’wmuwmu’…………………………………………Hn…wivwmvwixw1vw1xwmxw1lwml…………………………………………The second weight represents a binary indicator of whether the particular domain name
in D was queried in day di by an internal host in H. Speciﬁcally, if host hostl queried
domain qi on day di, the weight value wil equals 1; otherwise, wil equals 0. After the
matrix has been assembled, the algorithm will normalize by row (for each qi) the sum of
“IP” values to one, the sum of “CNAME” values to one, and the sum of “Host” values to
one.
In step six the algorithm transforms the association matrix Mm×n to its corresponding
similarity matrix Sm×m. This matrix represents how similar domain name qi is to any other
domain qj. During the seventh step, the algorithm performs Singular Value Decomposition
(SVD) on S, and obtains U ΣV ∗ = SV D(S). The ﬁrst twenty eigenvalues are kept for step
eight, where the twenty-dimensional eigenvectors are clustered by XMeans [64].
Step nine analyzes the resulting clusters and ﬁnds new ad-abuse domain names. This
cluster characterization process propagates the existing labels from ad-abuse domains in
our knowledge base to unknown domains. The label propagation rules are based on both
IP infrastructure overlap and querying host overlap between domains. We discuss how we
propagate these labels based on cluster speciﬁc thresholds in Section 3.5.2. The known
ad-abuse domain names set DA is updated with the newly discovered domains.
The tenth and ﬁnal step of the algorithm restarts the algorithm from the ﬁrst step.
Depending on the value δ set by the administrator, the algorithm determines the day to
check next; for δ = 1, the algorithm proceeds to the next day, whereas δ = −1 forces it
to go backwards in time. This is very useful when the original ground truth domains were
seen in the middle of the long-term network observations. Using the updated set DA, the
system can identify more ad-abuse domains. After reaching the last day of available data
according to the iterating direction speciﬁed by δ, the algorithm stops.
Finally, the module sanitizes the derived DA to exclude mistakenly characterized ad-
abuse domains based on historical WHOIS information. We extract email addresses and
name servers from WHOIS for each domain in DA, and compare these with known emails
26
and name servers used for the ad-abuse domains in D$. If either email or name server
matches, the newly discovered domain is kept in DA. Otherwise, we exclude the domain
from ﬁnancial analysis. Thus, the derived DA will be used to estimate conservative lower
bounds of ad-abuse in the local network.
3.3.5 Reports On Ad-abuse And Financial Models
Outputs from the DNS Ad-abuse Rate and Spectral Expansion Modules are combined with
further analysis of pDNS-DB to generate two reports. The ﬁrst report describes the network
infrastructure used to facilitate the ad-abuse, using historical IP addresses derived from the
extended ad-abuse domains DA. These domains, along with the DNS Ad-abuse Rate and
the daily DNS lookup volumes, are used to generate the second report that estimates the
daily and overall ﬁnancial impact of ad-abuse to the online advertising ecosystem.
To derive the ﬁnancial model used to calculate the abuse M to the ad-ecosystem, we
ﬁrst consider advertisers’ loss on both fraudulent clicks and impressions in the generic case
described by the following equation:
(cid:88)
i
Mgeneric =
ζ ∗ Ri ∗ (pclk ∗ µclk ∗ CP C + pim ∗ µim
1000
∗ CP M )
(3.1)
For each day i, advertisers’ loss is calculated based on the number of DNS requests
Ri to d ∈ DA observed in the local network. ζ ∗ Ri reﬂects the total number of ad-abuse
HTTP connections for C&C purposes. We separate the connections in ζ ∗ Ri into two
different components. The pclk component reﬂects the percentage of HTTP connections
for click fraud communications. The second component pim represents the remaining per-
centage of HTTP connections that corresponds to impression fraud communications. Since
each connection may contain multiple clicks or impressions, µclk and µim represents the
multiplicative factor for the model to derive the total number of clicks or impressions, re-
spectively. The number of clicks multiplied by the CPC (Cost Per Click) allows us to
compute the click-fraud abuse, while the number of thousand impressions multiplied by
27
Figure 3.4: Number of requests received by the DNS and HTTP sinkholes over 10 months.
the CP M (cost-per-thousand impressions) allows us to calculate the ﬁnancial loss from
the fraudulent impressions. Finally, the sum of ﬁnancial loss from all days in the dataset is
the total loss that the advertisers endured due to the infections in the local network.
Equation (3.1) shows advertisers’ loss if no fraud was detected by entities in the ad
ecosystem. Since we want to derive the lower bound of advertisers’ loss, we assume that the
botnet under inspection did not proﬁt from fraudulent clicks, due to smart pricing policies
(effectively setting CP C = $0). In addition, we assume that all impressions related ad-
abuse was successful, since the Ad “Viewability” standard has only recently seen some
traction [4, 3]. The derived ﬁnancial model for impression is the following:
(cid:88)
i
Mimpression =
ζ ∗ Ri ∗ (pim ∗ µim
1000
∗ CP M )
(3.2)
We would like to emphasize that with model Mimpression we assume that smart pricing
policies were perfect across the entire ecosystem and no click fraud made proﬁt at any
point in the lifetime of the botnet operation. The ﬁnancial model Mimpression assumes
that the attackers were able to monetize fraudulent impressions from infected hosts. This
is a realistic assumption since detecting impression fraud has been extremely challenging
to date [65, 54]. We caution the reader that fraudulent clicks could still be successfully
monetized even after smart pricing normalization, although the CPC may be reduced to a
small percentage of the standard CPC [7]. To precisely estimate this percentage it would
require us to obtain data from several affected entities in the ad ecosystem over the lifetime
28
1,00010,000100,0001,000,000AugSepOctNovDecJanFebMarAprMayJun2012 to 2013Number of connectionsDNSHTTPHTTP and DNS Sinkhole Connections Per DayTable 3.1: Summary of datasets.
DNS Sinkhole
HTTP Sinkhole
NXDOMAIN
pDNS-DB
Date Range
8/1/2012 - 5/31/2013
8/1/2012 - 5/31/2013
6/27/2010 - 9/15/2014
1/1/2011 - 11/6/2014
Size
6.9G
248.6G
133.5G
17.9T
Records
(millions)
565