# Repairing DoS Vulnerability of Real-World Regexes

**Authors:** Nariyoshi Chida (NTT Corporation / Waseda University) and Tachio Terauchi (Waseda University)

**Abstract:**
There has been significant research on synthesizing and repairing regular expressions (regexes) from examples. These programming-by-example (PBE) methods help users write regexes by allowing them to express their intentions through examples. However, existing PBE methods can generate regexes that are vulnerable to regex denial of service (ReDoS) attacks due to super-linear matching times. This paper introduces the first PBE repair method that guarantees the generation of invulnerable regexes, capable of handling real-world regexes with lookarounds and backreferences. We provide a novel formal semantics and complexity analysis for backtracking matching algorithms in real-world regexes, and define ReDoS vulnerability for these extended regexes. We introduce a condition called real-world strong 1-unambiguity (RWS1U), which is sufficient to ensure invulnerability, and present an algorithm to solve the corresponding PBE repair problem.

**Index Terms:** Real-world regexes, ReDoS, synthesis, repair

## I. Introduction
Regular expressions (regexes) are integral to modern programming languages and software development, used in general-purpose libraries, input sanitization, and data extraction from unstructured text. Despite their widespread use, developers often create regexes that are vulnerable to ReDoS attacks, where attackers craft inputs that cause the regex matching algorithm to take super-linear time. While some regex engines offer mechanisms to limit runtime, determining appropriate limits is challenging, and such options are not available in many popular regex engines, including those in Python, Java, and Node.js.

Previous research has focused on detecting vulnerable regexes, but the problem of repairing them remains largely open. Writing invulnerable regexes is a difficult task, as reported by Davis et al. [7], [18].

Recent years have seen progress in PBE methods for synthesizing and repairing regexes. These methods use positive and negative examples to synthesize a regex that correctly classifies the examples, often with additional constraints to bias the synthesis toward syntactically close pre-repair regexes. PBE methods ease the burden of writing correct regexes by letting users reflect their intentions through examples. However, existing PBE methods do not consider ReDoS resilience and may generate vulnerable regexes.

In this paper, we address this issue by proposing the first PBE repair method that guarantees the generation of invulnerable regexes, capable of handling real-world regexes with extensions like lookarounds, capturing groups, and backreferences. Previous work on ReDoS vulnerability has only addressed pure regexes, and the challenge lies in defining the complexity of backtracking matching algorithms for real-world regexes. We introduce a novel formal semantics for backtracking matching algorithms and define the time complexity for real-world regexes. We also identify a subtle bug in a previous formal definition of ReDoS vulnerability for pure regexes [12], which can misclassify some vulnerable regexes as invulnerable.

**Contributions:**
1. **Formal Definition of ReDoS Vulnerability for Real-World Regexes:** We provide a novel formal semantics and time complexity for backtracking matching algorithms in real-world regexes, and give the first formal definition of ReDoS vulnerability for these regexes.
2. **Real-World Strong 1-Unambiguity (RWS1U):** We introduce RWS1U, a condition sufficient for ensuring invulnerability in real-world regexes. We define the RWS1U repair problem and prove it is NP-hard. We also show that 1-unambiguity (deterministic regex) for pure regexes is insufficient for ensuring invulnerability.
3. **Algorithm for Solving the RWS1U Repair Problem:** We present an algorithm that builds on and extends previous PBE synthesis and repair methods to support real-world regexes and enforce RWS1U.
4. **Implementation and Evaluation:** We implement the algorithm in a tool called REMEDY and evaluate it on a set of real-world benchmarks, demonstrating its effectiveness in repairing non-trivial vulnerable regexes.

## II. Overview
We provide an informal overview of our repair algorithm using an example. Consider the regex `.*`:

### Example
- **Regex:** `.*`
- **Positive Examples:** `abc`, `def`
- **Negative Examples:** `gh`

The goal is to synthesize a regex that matches the positive examples and rejects the negative examples while ensuring it is invulnerable to ReDoS attacks. Our algorithm will generate SMT constraints to enforce both the RWS1U condition and consistency with the provided examples.

This paper is structured as follows:
- Section III: Formal Semantics and Complexity Analysis for Real-World Regexes
- Section IV: Real-World Strong 1-Unambiguity (RWS1U)
- Section V: Algorithm for Solving the RWS1U Repair Problem
- Section VI: Implementation and Evaluation

**References:**
[1]â€“[29] (Citations and references are included in the full paper.)

---

This optimized version provides a clear, coherent, and professional presentation of the research, making it easier to understand and follow.