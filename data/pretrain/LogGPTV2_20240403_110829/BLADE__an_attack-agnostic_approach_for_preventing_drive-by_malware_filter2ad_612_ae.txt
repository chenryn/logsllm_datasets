loads, particularly those resulting in malware installations on un-
suspecting victims, has attracted considerable attention from re-
searchers. In 2005, Moshchuk et al. [22] studied the threats, distri-
bution, and evolution of spyware through an examination of more
than 18 million URLs, ﬁnding scripted drive-by downloads in 5.9%
of the pages visited. Seifert et al. [31] examined the prevalence
and distribution of malicious web servers using the Capture-HPC
client honeypot, identifying more than 300 malicious sites. In [27],
Provos et al. provided a detailed dissection of the sophisticated
methodology employed by the blackhats and the steps involved
in executing a typical drive-by download exploit of a system. In
a subsequent study [26], the authors provided extensive quantita-
tive measurements of the global prevalence and distribution of the
parties (landing sites, redirection sites and script hosting sites) in-
volved in drive-by downloads by examining billions of URLs in the
Google web archive. These studies underscore the signiﬁcance of
the drive-by download malware problem and motivate development
of the BLADE system.
Website survey systems and proxy services: Blacklist services
such as stopbadware.org [5] provide alerts on malicious soft-
ware systems and websites, currently listing more than 392,000 ma-
licious sites. Strider HoneyMonkey [34] and phoneyc [23] crawl
the Internet looking for websites that host malicious code. While
the former approach uses Virtual Machines running different op-
erating systems and patch levels, the latter is a lightweight low-
interaction system that emulates browser execution of JavaScript.
SpyBye [25] operates as a proxy server and uses simple rules to
classify a URL into three categories: harmless, unknown, or dan-
gerous. The classiﬁcation process can be error prone and is meant
to be a tool for webmasters to track the security for sites that they
administer. The SecureBrowing software plug-in developed by Fin-
jan [4] scans web pages in real time for viruses and malware. While
the details of their detection methodology are proprietary, it is pre-
sumed to be a combination of attack signatures and URL black-
lists. The BrowserShield [30] proxy system uses script rewriting
and vulnerability-driven ﬁltering to transform inbound web pages
into safe equivalents by disabling execution of malicious JavaScript
and VBScript exploits at runtime. Wepawet is an online submission
service for detecting and analyzing malicious URLs with the capa-
bility of analyzing exploits in Flash, JavaScript, and PDF ﬁles [13].
Unlike these approaches, BLADE does not require attack signa-
tures and is effective against zero-day attacks.
SpyProxy [21] is an execution-based malware detection proxy
system, that executes active web content in a virtual machine en-
vironment before it reaches the browser. A limitation is that pro-
tection is guaranteed only when the host machine and the proxy
machine maintain the identical software conﬁguration.
Network- and host-based malware defense systems: Systems
such as BotHunter [14] and BotSniffer [15] are meant to detect
infected enterprise systems based on post-infection network dia-
log, but do not prevent the execution of malware. AntiVirus sys-
tems [6] and services like CloudAV [24], which attempt to block
the execution of malware, are limited by the reliance on binary sig-
natures. For drive-by attacks, BLADE addresses the limitations of
these approaches, i.e., it acts like an IPS that thwarts the execution
of malware and does not rely on signatures.
Egele et al. [12] proposed the use of x86 emulation techniques
to defend browsers against a speciﬁc type of drive-by download
attack, i.e., heap-spraying code injection attacks. Their objective
is similar to that of NOZZLE [29], which uses static analysis of
objects in the heap to detect heap-spraying attacks. BLADE dif-
fers from these systems in that it does not detect the attack, but
rather prevents the execution of the malware. Our approach has the
beneﬁt that it defends against all forms of web-based surreptitious-
download exploits, including malware installed using heap-spraying
code injection attacks.
Sandboxing/Isolation systems: Solitude [17] and Alcatraz [19]
are two systems that limit the effects of attacks by providing sup-
port for application-level isolation recovery. Secure browsers [9,
33] have been developed that use sandbox techniques to prevent
malware installations. The Chromium sandbox [9] attempts to miti-
gate browser exploits by separating the trusted browser kernel (which
runs with high-privilege outside the sandbox) and untrusted ren-
dering engine. However, the presence of published client-side ex-
ploits for Chrome validates that such strategies are not a panacea.
Recently, Barth et al. proposed a browser extension system that
uses privilege separation and isolation to limit the impact of un-
trusted extensions [7]. The Polaris system uses the principle of
least authority to restrict the impact of running untrusted applica-
tions [32]. BLADE’s unconsented-content execution prevention is
a similar concept to sandboxing. However, BLADE fully prevents
the binary execution from occurring, rather than imposing privi-
lege limitations, and it is signiﬁcantly more transparent in how it
uses user-dialog conﬁrmation to auto-remap user-initiated down-
loads. More signiﬁcantly, unlike secure browser frameworks that
require the adoption of an entirely new browser, BLADE security
protections can be deployed underneath the wide range of current
and legacy Internet browsers.
7. CONCLUSION AND FUTURE WORK
We introduced the BLADE system as a new approach to im-
munizing vulnerable Windows hosts from surreptitious drive-by
download infections. The BLADE system incorporates a kernel
module to track all browser-to-human interactions, and then uses
this information to distinguish consented web-based binary down-
loads from those cases where covert binary installations are per-
formed. In the former case, the user-consented binaries are trans-
parently remapped to the ﬁlesystem, and BLADE imposes no per-
ceptible runtime behavioral changes or performance impacts on the
browser. In the latter case, BLADE isolates and reports the mali-
cious link and binary to the user, and unlike traditional sandboxes
these malicious binaries are never executed.
We presented results from an ongoing evaluation of BLADE
against thousands of active drive-by exploits currently plaguing the
Internet (our evaluation results are unﬁltered, auto-generated, and
posted publicly to www.blade-defender.org). To date, BLADE’s in-
terception logic has demonstrated 100% effectiveness in preventing
covert binary installations using the most widely deployed browsers
!!"#$%&"'()*&'+%&,-'$.#'!/012''()*&'+%&,-'$.'!/012'1&345'Firefox 3.5!"#$"%!"#$&"!6789:'IE 7.0 '#"()!'#'*%!97;8:'IE 8.0 '#*()!'#+""!979)?&'+@!-'()*&'+%&,-'$.#'!/012'()*&'+%&,-'$.'!/012'1&345'0.98    (#%"'!(#(*%!A79B:'9.23    ""#(*%!""#)+,!C76B:'94.66 "%"#''"!"%&#**"!67)?&'+@!-'=)3&'>)?&'+@!-'()*&''+>&,-'1.12 *#,)!!!!676C;'9.45 ,#("!!!!67CC9'95.83 ,'#&&!C7B66'=)3&'>)?&'+@!-'D#E5'()*&'+%&,-'$.'F&G)"&,H)#I'D#E5'()*&'+%&,-'$.#'F&G)"&,H)#I'1&345'0.98    *#*('!*#*($!B766:'9.23    *#('"!*#('&!97C9:'94.66 (#&"%!(#&")!67CJ:'449on the Internet. Furthermore, over the past six months we have
tested BLADE against the newest 0-day drive-by exploit attacks
within days of their release and none have circumvented BLADE.
In our next phase, we plan to extend BLADE support to other
network-capable applications subject to drive-by download attacks.
8. ACKNOWLEDGEMENT
The authors would like to thank Ashish Gehani and the anony-
mous reviewers for helpful comments on earlier versions of the pa-
per. This material is based upon work supported in part by the Na-
tional Science Foundation under grant no. 0831300, the Army Re-
search Ofﬁce under Cyber-TA Grant no. W911NF-06-1-0316, the
Department of Homeland Security under contract no. FA8750-08-
2-0141, the Ofﬁce of Naval Research under grants no. N000140710907
and no. N000140911042. Any opinions, ﬁndings, and conclu-
sions or recommendations expressed in this material are those of
the authors and do not necessarily refect the views of the National
Science Foundation, the Army Research Ofﬁce, the Department of
Homeland Security, or the Offce of Naval Research.
9. REFERENCES
[1] Alexa - Top Sites By Category.
http://www.alexa.com/topsites/category.
[2] Microsoft Security Bulletin MS10-002 - Critical.
http://www.microsoft.com/technet/security/bulletin/MS10-
002.mspx.
[3] Process Monitor. http://technet.microsoft.com/en-
us/sysinternals/bb896645.aspx.
[4] ﬁnjan: securing your web. http://www.ﬁnjan.com, 2009.
[5] stopbadware.org. http://www.stopbadware.org, 2009.
[6] Symantec inc. http://www.symantec.com, 2009.
[7] B. Adam, P. F. Adrienne, S. Prateek, and B. Aaron.
Protecting browsers from extension vulnerabilities. In
Network and Distributed System Security Symposium
(NDSS), 2010.
[8] P. Barford and V. Yegneswaran. An inside look at botnets.
Special Workshop on Malware Detection, Advances in
Information Security, Springer Verlag, 2006.
[9] A. Barth, C. Jackson, C. Reis, and T. G. C. Team. The
Security Architecture of the Chromium Browser. In Stanford
Technical Report, 2008.
[10] S. Chen, J. Meseguer, R. Sasse, H. J. Wang, and Y.-M. Wang.
A systematic approach to uncover security ﬂaws in gui logic.
In Proceedings of the IEEE Symposium on Security and
Privacy, 2007.
[11] S. Dietrich, N. Long, and D. Dittrich. Analyzing distributed
denial of service tools: The Shaft Case. In Proceedings of the
USENIX System Adminstrator’s Conference, LISA, 2000.
[12] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda. Defending
browsers against drive-by downloads: Mitigating
heap-spraying code injection attacks. In Proceedings of
Detection of Intrusions and Malware and Vulnerabilility
Assessment (DIMVA), 2009.
[13] S. Ford, M. Cova, C. Kruegel, and G. Vigna. Wepawet.
http://wepawet.cs.ucsb.edu, 2009.
[14] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee.
BotHunter: Detecting malware infection through IDS-driven
dialog correlation. In Proceedings of 16th USENIX Security
Symposium, 2007.
[15] G. Gu, J. Zhang, and W. Lee. Botsniffer: Detecting botnet
command and control channels in network trafﬁc. In
Proceedings of the 15th Annual Network and Distributed
System Security Symposium (NDSS), 2008.
[16] K. J. Higgins. ’Aurora’ exploit retooled to bypass Internet
Explorer’s DEP security.
http://www.darkreading.com/security/-
vulnerabilities/showArticle.jhtml?articleID=222301436.
[17] S. Jain, F. Shaﬁque, V. Djeric, and A. Goel. Application-level
isolation and recovery with solitude. In Proceedings of ACM
EuroSys, 2008.
[18] B. Krebs. Clamping down the Clampi trojan.
http://voices.washingtonpost.com/securityﬁx/2009/09/-
clamping_down_on_clampi.html.
[19] Z. Liang, V. N. Venkatakrishnan, and R. Sekar. Isolated
program execution: An application transparent approach for
executing untrusted programs.
[20] A. Martinez-Cabrera. Malware infections double on web
pages. http://articles.sfgate.com/2010-01-26/business/-
17836038_1_malware-infected-sites.
[21] A. Moshchuk, T. Bragin, D. Deville, S. D. Gribble, and
H. M. Levy. SpyProxy: Execution-based detection of
malicious web content. In Proceedings of 16th USENIX
Security Symposium, 2007.
[22] A. Moshchuk, T. Bragin, S. D. Gribble, and H. M. Levy. A
crawler-based study of spyware on the web. In Network and
Distributed System Security Symposium, February 2006.
[23] J. Nazario. phoneyc: A Virtual Client Honeyport. In
Proceedings of LEET, 2009.
[24] J. Oberheide, E. Cooke, and F. Jahanian. Cloudav: N-version
antivirus in the network cloud. In Proceedings of 17th
USENIX Security Symposium, 2008.
[25] N. Provos. Spybye - ﬁnding malware.
http://www.monkey.org/˜provos/spybye/, 2009.
[26] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose.
All your iframes point to us. In Proceedings of the 17th
USENIX Security Symposium, 2008.
[27] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and
N. Modadugu. The ghost in the browser analysis of
web-based malware. In 1st Workshop on Hot Topics in
Understanding Botnets, 2007.
[28] M. Rajab, J. Zarfoss, F. Monrose, and A. Terzis. A
multi-faceted approach to understanding the botnet
phenomenon. In Proceedings of ACM SIGCOMM/USENIX
Internet Measurement Conference, October 2006.
[29] P. Ratanaworabhan, B. Livshits, and B. Zorn. NOZZLE: A
defense against heap-spraying code injection attacks. In
Proceedings of 18th USENIX Security Symposium, 2009.
[30] C. Reis, J. Dunagan, H. Wang, O. Dubrovsky, and S. Esmeir.
Browsershield: Vulnerability driven ﬁltering of dynamic
html. In Proceedings of OSDI, 2006.
[31] C. Seifert, R. Steenson, T. Holtz, B. Yuan, and M. A. Davis.
Know your enemy: Malicious web servers.
http://www.honeynet.org/papers/mws/, 2007.
[32] M. Stiegler, A. Karp, K. Yee, T. Close, and M. Miller.
Polaris: virus-safe computing for Windows XP.
Communications of the ACM, 49(9):88, 2006.
[33] H. J. Wang, C. Grier, A. Moshchuk, S. T. King,
P. Choudhury, and H. Venter. The multi-principal
construction of the Gazelle web browser. In Proceedings of
the 18th Usenix Security Symposium, 2009.
[34] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski,
S. Chen, and S. King. Automated web patrol with strider
honeymonkeys: Finding web sites that exploit browser
vulnerabilities. In Network and Distributed System Security
Symposium (NDSS), 2006.
450