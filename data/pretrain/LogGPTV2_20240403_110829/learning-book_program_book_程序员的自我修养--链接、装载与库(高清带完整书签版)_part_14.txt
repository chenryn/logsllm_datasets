### 第3章 目标文件的内容

#### 3.3.1 代码段

为了深入探究目标文件中的各个段，我们依旧需要依赖 `objdump` 这个强大的工具。使用 `objdump` 的 `-s` 参数可以将所有段的内容以十六进制格式打印出来，而 `-d` 参数则能够对包含指令的段进行反汇编。下面是从 `SimpleSection.o` 文件中提取的代码段（`.text`）内容及其分析：

```bash
$ objdump -s -d SimpleSection.o
```

**代码段内容：**

```
Contents of section .text:
0000 5589e583 ec088b45 08894424 04c70424
0010 00000000 e8fcffff ffc9c38d 4c240483
0020 e4f0ff71 fc5589e5 5183ec14 c745f401
0030 0000008b 15040000 00a10000 00008d04
0040 020345f4 0345f889 0424e8fc ffffff8b
0050 45f483c4 14595d8d 61fcc3
```

**反汇编结果：**

```
00000000 <func1>:
   0: 55                    push   %ebp
   1: 89 e5                 mov    %esp,%ebp
   3: 83 ec 08              sub    $0x8,%esp
   6: 8b 45 08              mov    0x8(%ebp),%eax
   9: 89 44 24 04           mov    %eax,0x4(%esp)
   d: c7 04 24 00 00 00 00  movl   $0x0,(%esp)
  14: e8 fc ff ff ff        call   19 <func1+0x19>
  19: c9                    leave  
  1a: c3                    ret    
  1b: 8d 4c 24 04           lea    0x4(%esp),%ecx
  1f: 83 e4 f0             and    $0xfffffff0,%esp
  22: ff 71 fc              pushl  -0x4(%ecx)
  25: 55                    push   %ebp
  26: 89 e5                 mov    %esp,%ebp
  28: 83 ec 14              sub    $0x14,%esp
  2b: c7 45 f4 01 00 00 00  movl   $0x1,-0xc(%ebp)
  32: 8b 15 04 00 00 00    mov    0x4,%edx
  38: 8d 04 02              lea    (%edx,%eax,1),%eax
  3b: 03 45 f4              add    -0xc(%ebp),%eax
  3e: 03 45 f8              add    -0x8(%ebp),%eax
  41: 89 04 24              mov    %eax,(%esp)
  44: e8 fc ff ff ff        call   49 <main+0x49>
  49: 8b 45 f4              mov    -0xc(%ebp),%eax
  4c: 83 c4 14              add    $0x14,%esp
  4f: 59                    pop    %ecx
  50: 5d                    pop    %ebp
  51: 8d 61 fc              lea    -0x4(%ecx),%esp
  54: c3                    ret    
```

- **.text 段** 包含了程序的机器码，即函数 `func1` 和 `main` 的指令。
- 最左边一列是偏移量，中间四列是十六进制内容，最右边一列是 `.text` 段的 ASCII 码形式。

#### 3.3.2 数据段和只读数据段

- **.data 段** 存储已初始化的全局静态变量和局部静态变量。例如，在 `SimpleSection.c` 中有两个这样的变量：`global_init_var` 和 `static_var`。
- **.rodata 段** 存储只读数据，如常量字符串和用 `const` 修饰的变量。单独设立 `.rodata` 段有助于支持 C++ 的 `const` 关键字，并且在加载时操作系统可以将其属性映射为只读，从而防止非法修改，提高程序安全性。

**示例输出：**

```bash
$ objdump -s -d SimpleSection.o
Sections:
Idx Name      Size      VMA       LMA       File off  Algn
  0 .data     00000008  00000000  00000000  00000090  2**2
  1 .rodata   00000004  00000000  00000000  00000098  2**0
Contents of section .data:
 0000 54000000 55000000  T...U...
Contents of section .rodata:
 0000 25640a00  $d..
```

- `.data` 段中的前四个字节表示 `global_init_var` 的值（十进制 84），后四个字节表示 `static_init_var` 的值（十进制 85）。
- 字节序问题（大端和小端）将在附录中详细介绍。

#### 3.3.3 BSS 段

- **.bss 段** 存储未初始化的全局变量和局部静态变量。例如，在 `SimpleSection.c` 中的 `global_uninit_var` 和 `static_var2` 就存储在 `.bss` 段中。
- 实际上，`.bss` 段并不占用磁盘空间，只在运行时分配内存。通过符号表可以看到，只有 `static_var2` 被存放在 `.bss` 段，而 `global_uninit_var` 则是一个未定义的 “COMMON 符号”。

**示例测试：**

```c
static int x1 = 0;
static int x2 = 1;
```

- `x1` 会被放在 `.bss` 段，因为它未初始化（默认为 0）。
- `x2` 会被放在 `.data` 段，因为它被显式初始化为 1。

这样处理可以节省磁盘空间，因为 `.bss` 段不占用磁盘空间。