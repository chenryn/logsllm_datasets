title:le-git-imate: Towards Verifiable Web-based Git Repositories
author:Hammad Afzali and
Santiago Torres-Arias and
Reza Curtmola and
Justin Cappos
Journal of Computer Security 28 (2020) 405–436
DOI 10.3233/JCS-191371
IOS Press
405
Towards adding veriﬁability to web-based
Git repositories
Hammad Afzali a, Santiago Torres-Arias b, Reza Curtmola a,∗
a Department of Computer Science, New Jersey Institute of Technology, NJ, USA
E-mails: PI:EMAIL, PI:EMAIL
b Tandon School of Engineering, New York University, NY, USA
E-mails: PI:EMAIL, PI:EMAIL
and Justin Cappos b
Abstract. Web-based Git hosting services such as GitHub and GitLab are popular choices to manage and interact with Git
repositories. However, they lack an important security feature – the ability to sign Git commits. Users instruct the server to
perform repository operations on their behalf and have to trust that the server will execute their requests faithfully. Such trust
may be unwarranted though because a malicious or a compromised server may execute the requested actions in an incorrect
manner, leading to a different state of the repository than what the user intended.
In this paper, we show a range of high-impact attacks that can be executed stealthily when developers use the web UI of
a Git hosting service to perform common actions such as editing ﬁles or merging branches. We then propose le-git-imate, a
defense against these attacks, which enables users to protect their commits using Git’s standard commit signing mechanism.
We implement le-git-imate as a Chrome browser extension. le-git-imate does not require changes on the server side and can
thus be used immediately. It also preserves current workﬂows used in Github/GitLab and does not require the user to leave
the browser, and it allows anyone to verify that the server’s actions faithfully follow the user’s requested actions. Moreover,
experimental evaluation using the browser extension shows that le-git-imate has comparable performance with Git’s standard
commit signature mechanism. With our solution in place, users can take advantage of GitHub/GitLab’s web-based features
without sacriﬁcing security, thus paving the way towards veriﬁable web-based Git repositories.
Keywords: GitHub, commit signature, veriﬁcation record, signed commit, browser extension
1. Introduction
Web-based Git repository hosting services such as GitHub [1], GitLab [2], Bitbucket [3], Source-
forge [4], Assembla [5], RhodeCode [6], and many others, have become some of the most used platforms
to interact with Git repositories due to their ease of use and their rich feature-set such as bug tracking,
code review, task management, feature requests, wikis, and integration with continuous integration and
continuous delivery systems. Indeed, GitHub hosts over 96 million repositories [7] which represents a
growth of more than 900% since 2013 [8]. These platforms allow users to make changes to a remote
Git repository through a web-based UI, i.e., by using a web browser, and they comprise a substantial
percentage of the changes made to Git repositories: 48 of the top 50 most starred GitHub projects in-
clude web UI commits and an average of 32.1% of all commits per project are done through the web UI.
For some of these highly popular projects, web UI commits are actually used more often than using the
*Corresponding author. E-mail: crix@njit.edu.
0926-227X/20/$35.00 © 2020 – IOS Press and the authors. All rights reserved
406
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
traditional Git command line interface (CLI) tool (e.g., 71.8% of merge commits are done via the web
UI).1
Unfortunately, this ease of use comes at the cost of relinquishing the ability to perform Git operations
using local, trusted software, including Git commit signing. Instead, a remote party (the hosting server)
is instructed to perform actions for the client. Given that the server performs most of the operations on
behalf of the user, it cannot cryptographically sign information without requiring users to share their
private keys. Effectively, since GitHub does not support user commit signing, those who use the web UI
give up the ability to sign their own commits, and must rely completely on the server.
However, trusting a web-based Git hosting service to faithfully perform those actions may be unwar-
ranted. A malicious or compromised server can instead execute the requested actions in an incorrect
manner and change the contents of the repository. Since Git repositories and other version control sys-
tem repositories represent increasingly appealing targets, they have been subjected historically to such
attacks [9–16], with varying consequences such as the introduction of backdoors in code or the removal
of security patches. Similar attacks are likely to occur again in the future, since vulnerabilities may
remain undiscovered for a prolonged amount of time and websites may be slow in patching them [17].
For example, a user interacting with a GitHub web UI to create a ﬁle in the repository can trigger a
post-commit hook that adds backdoored code on the same ﬁle on the server-side. To introduce such a
backdoor, an unscrupulous server manipulates the submitted ﬁle and adds it to the newly-created commit
object. As a result, from that moment on, the Git repository will contain malicious backdoor code that
could propagate to future releases.
To counter this, we propose le-git-imate, a defense that incorporates the security guarantees offered
by Git’s standard commit signature into Git repositories that are managed via web UI-based services
such as GitHub or GitLab. le-git-imate is implemented as a browser extension and allows tools to cryp-
tographically verify that a user’s web UI actions are accurately reﬂected in the remote Git repository.
To achieve this, we present two designs. In the ﬁrst one, which we refer to as the lightweight design,
le-git-imate computes a veriﬁcation record on the user side and then embeds it into the commit object
created by the server. The veriﬁcation record captures what the user expects to be included in the commit
object. Subsequently, anyone who clones the repository can traverse the object tree and check if the
server correctly performed the requested actions by comparing the user-embedded record to the actual
commit object created by the server. The ﬁrst design is used as a stepping stone for the second design,
which we refer to as the main design. In the main design, le-git-imate pioneers the ability to sign a web
UI commit and create a standard GPG-signed Git commit object in the browser. As a result, there is no
difference between signed commits created using le-git-imate and those created by Git client tools. This
allows users to validate the integrity of web UI commits using standard Git tools. With le-git-imate in
place, users can take advantage of GitHub/GitLab’s web-based features without sacriﬁcing security.
After exploring several strategies to compute the information necessary for the two designs, we settled
on solutions that we implemented exclusively in the browser using JavaScript, i.e., as a Chrome browser
extension. This covers the large majority of software development platforms (i.e., laptops and desktops).
Despite the tedious task of re-implementing signiﬁcant functionality of a Git client in JavaScript, this
approach achieves the best portability and does not require the presence of a local Git client. It also
features optimizations that leverage the GitHub/GitLab API to download the minimum set of Git objects
needed to compute the veriﬁcation record (for the lightweight design) or the commit signature (for the
1These statistics refer to commits after June 1, 2016, when GitHub started to use the PI:EMAIL committer
email for web UI commits, thus providing us with the ability to differentiate between web UI commits and other commits.
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
407
main design). The browser extension based on the lightweight design contains 15,838 lines of JavaScript
code, whereas the one based on the main design has 25,611 lines of code (numbers include several
third-party libraries needed to create the necessary Git objects and to push these objects to the server).
Excluding HTML/CSS templates, JSON manifests and libraries, the extension consists of a total of 4,095
and 4,467 lines of Javascript code for the two designs, respectively.
In addition to the cryptographic protections suitable for automatic veriﬁcation, le-git-imate also pro-
vides UI validation to prevent an attacker from deceiving a user into performing an unintended action.
To do this, the user is presented with information about their commit that makes it easy to see its impact.
This limits a malicious server’s ability to trick a user into performing actions they did not intend.
While this paper focuses speciﬁcally on le-git-imate’s use with GitHub and GitLab, our work is appli-
cable to all web-based Git repository hosting services [1–6]. Our techniques are also general enough to
be used on web-based code management tools that can be integrated with a Git repository (such as Ger-
rit [18] for code reviews, Jira [19] for project management, or Phabricator [20] for web-based software
development).
In this paper, we make the following contributions:
• We identify new attacks associated with common actions when using the web UI of a web-based
Git hosting service. In these attacks, the server creates a commit object that reﬂects a different
repository state than the state intended by the user. The attacks are stealthy in nature and can have
a signiﬁcant practical impact, such as removing a security patch or introducing a backdoor in the
code.
• We propose le-git-imate, a client-side defense for Git repositories that are managed via the web
UI, to mitigate the aforementioned attacks. le-git-imate pioneers creating standard GPG-signed Git
commits in the browser. Hence, it provides the exact security guarantees offered by Git’s standard
commit signing mechanism. le-git-imate offers both manual and automated key management.
• We implement le-git-imate as a Chrome browser extension for both GitHub and GitLab, and have
released it as free and open-source software [21]. Our implementation has several desirable features
that are paramount for practical adoption: (1) it does not require any changes on the server side and
can be used today, (2) it preserves current workﬂows used in GitHub/GitLab and does not require
the user to leave the browser, (3) commits generated by le-git-imate can be checked by standard
client tools (such as the Git CLI), without any modiﬁcations. le-git-imate also provides the ﬁrst
implementation of Git’s merge commit functionality in JavaScript, which is of independent interest.
Last, but not least, unlike other existing libraries [22], le-git-imate provides an implementation of
Git commands (i.e. “git commit”, “git merge”, “git push”) without needing access to
the entire repository and without creating a working directory on the client side.
• We perform a security analysis of le-git-imate, which shows its effectiveness in mitigating attacks
that may occur when developers use the web UI of web-based Git hosting services.
• We evaluate experimentally the efﬁciency of our implementation. Our ﬁndings show that, when
used with a wide range of repository sizes, le-git-imate adds minimal overhead and has comparable
performance with Git’s standard commit signature mechanism.
• We perform a user study that validates the stealthiness of our attacks against a GitLab server. The
study also provides insights into the usability of our le-git-imate defense.
Together, our contributions enable users to take advantage of GitHub/GitLab’s web-based features
without sacriﬁcing security. For ease of exposition, we will use GitHub as a representative web-based
408
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
Git hosting service throughout the paper, but our attacks and defenses (including the le-git-imate browser
extension) have been developed and implemented for both GitHub and GitLab.
2. Background on Git and GitHub
GitHub is a web-based hosting service for Git repositories, and its core functionality relies on a Git
implementation. In this section, we describe several Git and GitHub concepts as background for the
attacks introduced in Section 4 and the defenses proposed in Section 5. Readers familiar with Git/GitHub
internals may skip this section.
2.1. Git repository internals
Git records a project’s version history into a data structure called a repository. Git uses branches to
provide conceptual separation of different histories. Figure 1 shows a repository with two branches:
master and feature. As a convention, the master branch contains production code that has been
veriﬁed and tested, whereas the feature branch is used to develop a new feature.
A branch can be merged into another branch to integrate its changes into the target branch. When a
new feature is fully implemented in the feature branch, it may be integrated into the production code
by merging the feature branch into the master branch. For GitHub, this is often achieved via the
pull request mechanism, in which a developer sends a request to merge a code update from her branch
into another branch of the project, and the appropriate party (e.g., the project maintainer) does the merge.
To work as depicted above, a Git repository uses three types of objects: commit objects, tree objects,
and blob objects. From the ﬁlesystem point of view, each Git object is stored in a ﬁle whose name is a
SHA-1 cryptographic hash over the zlib-compressed contents of the ﬁle. This hash is also used to denote
the Git object (i.e, it is the object’s name).
A blob object is the lowest-level representation of data stored in a Git repository. At the ﬁlesystem
level, each blob object corresponds to a ﬁle. A tree object is similar to a ﬁlesystem directory: It has
“blob” entries that point to blob objects (similar to a ﬁlesystem directory having ﬁlesystem ﬁles) and
“tree” entries that point to other tree objects (similar to a ﬁlesystem directory having subdirectories).
2.2. Git signed commits
Git provides the ability to sign commits: The user who creates a commit object can include a ﬁeld
that represents a GPG digital signature over the entire commit object. Later, upon pulling or merging,
Git can be instructed to verify the signed commit objects using the signer’s public key. This prevents
Fig. 1. A Git repo with two branches, master and feature.
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
409
commit  tree 
parent 
[parent ]
author    
committer    
Fig. 2. The format of a Git commit object. Bold font denotes pre-deﬁned keywords, and angle brackets (i.e., ) denote actual
values for those ﬁelds. Regular and squash-and-merge commits have only one parent, whereas merge commits have two (or
more) parents depending on how many branches were merged – we show the case with two parents, the 2nd parent is enclosed
between square brackets.
Fig. 3. A regular commit on the feature branch.
tampering with the commit object and provides non-repudiation (i.e., a user cannot claim she did not
sign the commit).
However, with a service like GitHub, the server creates a commit object that is not signed by the user,
as the server lacks the cryptographic key material needed for such a signature.
2.3. Commiting via the GitHub web UI
For every code revision, a new commit object is created reﬂecting the state of the repository at that
time. This is achieved by including the name of the tree object that represents the project’s ﬁles and
directories at the moment when the commit was done. Each commit object also contains the names of
one (or more) parent commit objects, which reﬂect the previous state of the repository. The exact format
of a commit object is described in Fig. 2.
Performing a code revision using GitHub’s web UI will result in one of three possible types of Git
commit objects: regular commit, merge commit, or squash-and-merge commit objects:
Regular Commit Object. GitHub’s web UI provides the option to make changes directly into the repos-
itory, such as adding new ﬁles, deleting existing ﬁles, or modifying existing ﬁles. These changes can then
be committed to a branch, which results in a new regular commit object being added to that branch of
the repository. A new root tree is computed by modifying/adding/deleting the blob entries relevant to
the changeset in the corresponding trees and propagating these changes up to the root tree. Then, a new
commit is added with the new root tree.
For example, consider the repository shown in Fig. 1. Using GitHub’s web UI in her browser, a user
edits a ﬁle under the feature branch and then commits this change. As a result, the GitHub server will
create a new regular commit object C5 that captures the current state of the feature branch, as shown
in Fig. 3.
410
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
Fig. 4. Merge commit from merging two branches.
Attacks against regular commit objects are described in Section 4.1.
Merge Commit Object. Consider a GitHub project in which an owner is responsible for maintaining a
branch called “master” and contributors work on their own branches to make updates to the code. When
a contributor completes the changes she is working on, she will send a “pull request” to the project
owner to merge the changes from her branch into the master branch. The project owner will review