### DEFCON 2018 USA
**ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER**

#### RING 0/-2 ROOTKITS: COMPROMISING DEFENSES

---

### Table of Contents (TOC)
- **Introduction**
- **Rootkits: Ring 0**
- **Advanced Malwares and Rootkits: Ring -2**
- **Profile and Acknowledgments**

---

### Profile and Acknowledgments

**Profile:**
- **Alexandre Borges** is a malware and security researcher.
- He is a consultant, instructor, and speaker on malware analysis, memory analysis, digital forensics, rootkits, and software exploitation.
- Member of the Digital Law and Compliance Committee (CDDC/SP).
- Reviewer for The Journal of Digital Forensics, Security, and Law.
- Referee for Digital Investigation: The International Journal of Digital Forensics & Incident Response.
- Instructor at Oracle, (ISC)², and former instructor at Symantec.

**Acknowledgments:**
- Special thanks to the following professionals for their invaluable research and contributions:
  - Joanna Rutkowska
  - John Loucaides
  - Oleksandr Bazhaniuk
  - Sergey Bratus
  - Vicent Zimmer
  - Yuriy Bulygin
  - Xeno Kovah
  - Alex Bazhaniuk
  - Alex Matrosov
  - Andrew Furtak
  - Bruce Dang
  - Corey Kallenberg
  - Dmytro Oleksiuk
  - Engene Rodionov

Their work has been instrumental in my understanding and continuous learning in this field.

---

### Introduction

**Ring 0/-2 Rootkits: Compromising Defenses**

This presentation will delve into the intricacies of ring 0 and ring -2 rootkits, exploring how they can compromise system defenses. We will cover various techniques and methods used by these advanced malwares.

---

### Advanced Malwares

**Topics Covered:**
- **MBR/VBR/UEFI Rootkits:**
  - Techniques used by rootkits.
  - Kernel Code Signing Bypasses.
  - MBR + IPL infection.
  - BIOS, UEFI, and boot architecture.
  - Boot Guard.
  - Secure Boot attacks.
  - WSMT (Windows SMM Security Mitigation Table).
  - BIOS Guard.
  - BIOS/UEFI Protections.

**Ring 0:**
- **Kernel Callback Methods:**
  - WinDbg structures.
  - Kernel Drivers Structures.
  - Malicious Drivers.
  - Modern C2 communication.
  - Kernel Pools and APCs.

---

### Rootkits: Ring 0

**Kernel Callback Functions:**
- These are "modern hooks" often used by antivirus programs for monitoring and alerting kernel modules about specific events. They are also used by malware (kernel drivers) to evade defenses.
- Common callback methods include:
  - `PsSetLoadImageNotifyRoutine`: Provides notification when a process, library, or kernel memory is mapped into memory.
  - `IoRegisterFsRegistrationChange`: Provides notification when a filesystem becomes available.
  - `IoRegisterShutdownNotification`: The driver handler (`IRP_MJ_SHUTDOWN`) acts when the system is about to shut down.
  - `KeRegisterBugCheckCallback`: Helps drivers receive a notification (for cleaning tasks) before a system crash.
  - `PsSetCreateThreadNotifyRoutine`: Indicates a routine that is called every time a thread starts or ends.
  - `PsSetCreateProcessNotifyRoutine`: Invoked when a process starts or finishes.
  - `DbgSetDebugPrintCallback`: Used for capturing debug messages.
  - `CmRegisterCallback()` or `CmRegisterCallbackEx()`: Called by drivers to register a `RegistryCallback` routine, which is invoked every time a thread performs an operation on the registry.

**Example Usage:**
- Malware uses these callbacks to check if their persistence entries are maintained and, if removed, add them back.

**WinDbg Example:**
```plaintext
0: kd> dd nt!CmpCallBackCount L1
fffff801`aa733fcc  00000002
0: kd> dps nt!CallbackListHead L2
fffff801`aa769190  ffffc000`c8d62db0
fffff801`aa769198  ffffc000`c932c8b0
0: kd> dt nt!_LIST_ENTRY ffffc000`c8d62db0
[ 0xffffc000`c932c8b0 - 0xfffff801`aa769190 ]
+0x000 Flink            : 0xffffc000`c932c8b0 _LIST_ENTRY [ 
0xfffff801`aa769190 - 0xffffc000`c8d62db0 ]
+0x008 Blink            : 0xfffff801`aa769190 _LIST_ENTRY [ 
0xffffc000`c8d62db0 - 0xffffc000`c932c8b0 ]

0: kd> !list -t _LIST_ENTRY.Flink -x "dps" -a "L8" 0xffffc000`c932c8b0
ffffc000`c932c8b0  fffff801`aa769190 nt!CallbackListHead
…..
ffffc000`c932c8c8  01d3c3ba`27edfc12
ffffc000`c932c8d0  fffff801`6992a798 vsdatant+0x67798
ffffc000`c932c8d8  fffff801`69951a68 vsdatant+0x8ea68
ffffc000`c932c8e0  00000000`000a000a
.....
fffff801`aa7691c0  00000000`bee0bee0
fffff801`aa7691c8  fffff801`aa99b600 nt!HvpGetCellFlat
```

**Driver Object Registration:**
- `PsSetCreateProcessNotifyRoutine()`: Adds a driver-supplied callback routine to, or removes it from, a list of routines to be called whenever a process is created or deleted.
- `KTHREAD.LegoData` field: Malware can use this to register a malicious routine that is called during thread termination.

**Driver Types and Analysis:**
- Windows offers different types of drivers such as legacy drivers, filter drivers, and minifilter drivers, which can be developed using WDM or WDF frameworks (UMDF and KMDF).
- **Sequence of Events for Analyzing a Malicious Driver:**
  - The driver image is mapped into the kernel memory address space.
  - An associated driver object is created and registered with the Object Manager, which calls the entry point and fills the `DRIVER_OBJECT` structure’s fields.

**Filter Drivers:**
- Most ring 0 malwares install filter drivers to:
  - Modify aspects and behavior of existing drivers.
  - Filter results of operations (e.g., reading files).
  - Add new malicious features (e.g., keyloggers).
- A driver can easily "attach" one device object to another using `IoAttachDevice()` to intercept and alter data.
- The `AddDevice()` routine is used to create an unnamed `DEVICE_OBJECT` and attach it to a named `DEVICE_OBJECT` (e.g., `aborges`) from a layered driver (lower-level driver).

**IRP Processing:**
- Each IRP is processed by a dispatch routine picked from its `MajorFunction` table.
- The correct dispatch routine handles the request, picking IRP parameters from the `IO_STACK_LOCATION` using `IoGetCurrentIrpStackLocation()`.
- Parameters can be passed to the next `IO_STACK_LOCATION` using `IoCopyCurrentIrpStackLocation()` or to the next driver using `IoSkipCurrentStackLocation()`.
- Alternatively, the IRP can be passed down to the layered driver using `IoCallDriver()`, often used by rootkits to send requests directly to the filesystem driver, evading monitoring or hooking.

**Driver Stack and IO_STACK_LOCATION:**
- The `IoCompleteRequest()` function manages calling completion routines in the correct order (bottom-up).
- An IRP is usually generated by the I/O Manager in response to requests, and drivers can generate IRPs using `IoAllocateIrp()`.
- Functions like `IoGetCurrentIrpStackLocation()`, `IoGetNextIrpStackLocation()`, and `IoSkipCurrentIrpStackLocation()` are commonly used in malware analysis.
- Each device is responsible for preparing the `IO_STACK_LOCATION` for the next level, and a driver can set a completion routine using `IoSetCompletionRoutine()`.

**Parameters Field:**
- The `Parameters` field depends on the major and minor functions, making it dynamic based on the type of IRP being processed.

---

**ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER**
**DEFCON 2018 - USA**