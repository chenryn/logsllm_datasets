1
DEFCON 2018 USA
ALEXANDRE BORGES
RING 0/-2 ROOKITS : 
COMPROMISING 
DEFENSES
DEFCON 2018 - USA
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
PROFILE AND TOC
TOC:
• Introduction
• Rootkits: Ring 0
• Advanced Malwares and Rootkits: Ring -2
• Malware  and Security Researcher. 
• Consultant, Instructor  and Speaker on 
Malware Analysis, Memory Analysis, Digital 
Forensics, Rootkits and Software Exploitation. 
• Member of Digital Law and Compliance 
Committee (CDDC/ SP)
• Reviewer member of the The Journal of Digital 
Forensics, Security and Law.
• Refereer on Digital Investigation:The 
International Journal of Digital Forensics & 
Incident Response
• Instructor at Oracle, (ISC)2 and Ex-instructor 
at Symantec.
2
DEFCON 2018 - USA
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ACKNOWLEDGMENT
DEFCON 2018 - USA
3
Joanna Rutkowska
John Loucaides
Oleksandr Bazhaniuk
Sergey Bratus
Vicent Zimmer
Yuriy Bulygin
Xeno Kovah
Alex Bazhaniuk
Alex Matrosov
Andrew Furtak
Bruce Dang
Corey Kallenberg
Dmytro Oleksiuk
Engene Rodionov
These professionals deserve my sincere “thank you” and 
deep respect for their researches on these topics. I have 
learned from their explanations and articles. By the way, I 
continue learning... 
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
DEFCON 2018 - USA
4
INTRODUCTION
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
RING 0/-2 ROOTKITS
DEFCON 2018 - USA
5
ADVANCED MALWARES:
• MBR/VBR/UEFI rootkits
• Tecniques used by rootkits
• Kernel Code Signing Bypasses
• MBR + IPL infection
• BIOS, UEFI and boot architecture
• Boot Guard
• Secure Boot attacks
• WSMT (Windows SMM Security 
•
Mitigation Table)
• BIOS Guard
• BIOS/UEFI Protections
RING 0:
• Kernel Callback methods
• WinDbg structures
• Kernel Drivers Structures
• Malicious Drivers
• Modern C2 communication
• Kernel Pools and APCs
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
DEFCON 2018 - USA
6
ROOTKITS: RING 0
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
7
•
Kernel Callback Functions, which are are a kind of “modern hooks” 
oftenly used by antivirus programs for monitoring and alerting the 
kernel modules about a specific event ocurrence. Therefore, they are 
used by malwares (kernel drivers) for evading defenses.   
•
Most known callback methods are:
• PsSetLoadImageNotifyRoutine: it provides notification when a 
process, library or kernel memory is mapped into memory. 
• IoRegisterFsRegistrationChange: it provides notification when a 
filesystem becomes available. 
• IoRegisterShutdownNotification: the driver handler 
(IRP_MJ_SHUTDOWN) acts when the system is about going to 
down. 
• KeRegisterBugCheckCallback: it helps drivers to receive a 
notification (for cleaning tasks) before a system crash. 
DEFCON 2018 - USA
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
DEFCON 2018 - USA
8
• PsSetCreateThreadNotifyRoutine: indicates a routine that is 
called every time when a thread starts or ends.  
• PsSetCreateProcessNotifyRoutine: when a process starts or 
finishes, this callback is invoked (rootkits and AVs).
• DbgSetDebugPrintCallback: it is used for capturing debug 
messages. 
• CmRegisterCallback( ) or CmRegisterCallbackEx( ) are called 
by drivers to register a RegistryCallback routine, which is 
called every time a thread performs an operation on the 
registry. 
•
Malwares have been using this type of callbacks for checking 
whether their persistence entries are kept and, just in case they 
were removed, so the malware adds them back. 
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
DEFCON 2018 - USA
9
0: kd> dd nt!CmpCallBackCount L1
fffff801`aa733fcc  00000002
0: kd> dps nt!CallbackListHead L2
fffff801`aa769190  ffffc000`c8d62db0
fffff801`aa769198  ffffc000`c932c8b0
0: kd> dt nt!_LIST_ENTRY ffffc000`c8d62db0
[ 0xffffc000`c932c8b0 - 0xfffff801`aa769190 ]
+0x000 Flink            : 0xffffc000`c932c8b0 _LIST_ENTRY [ 
0xfffff801`aa769190 - 0xffffc000`c8d62db0 ]
+0x008 Blink            : 0xfffff801`aa769190 _LIST_ENTRY [ 
0xffffc000`c8d62db0 - 0xffffc000`c932c8b0 ]
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
DEFCON 2018 - USA
10
0: kd> !list -t _LIST_ENTRY.Flink -x "dps" -a "L8" 
0xffffc000`c932c8b0
ffffc000`c932c8b0  fffff801`aa769190 nt!CallbackListHead
…..
ffffc000`c932c8c8  01d3c3ba`27edfc12
ffffc000`c932c8d0  fffff801`6992a798 vsdatant+0x67798
ffffc000`c932c8d8  fffff801`69951a68 vsdatant+0x8ea68
ffffc000`c932c8e0  00000000`000a000a
.....
fffff801`aa7691c0  00000000`bee0bee0
fffff801`aa7691c8  fffff801`aa99b600 nt!HvpGetCellFlat
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
DEFCON 2018 - USA
11
•
At same way, PsSetCreateProcessNotifyRoutine( ) routine adds a 
driver-supplied callback routine to, or removes it from, a list of 
routines to be called whenever a process is created or deleted.
0: kd> dd nt!PspCreateProcessNotifyRoutineCount L1
fffff801`aab3f668 00000009
0: kd> .for (r $t0=0; $t0  .for (r $t0=0; $t0  dt _KTHREAD
By now, we have
seen malwares using 
KTHREAD.LegoData 
field
for registering a 
malicious 
routine, which would 
be  called during the 
thread termination.
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
DEFCON 2018 - USA
14
 Windows offers different types of drivers such as legacy drivers, 
filter drivers and minifilter drivers (malwares can be written using 
any one these types), which could be developed using WDM or 
WDF frameworks (of course, UMDF and KMDF take part)
•
To analyze a malicious driver, remember this sequence of events: 
• The driver image is mapped into the kernel memory address 
space. 
• An associated driver object is created and registered with 
Object Manager, which calls the entry point and fills the 
DRIVER_OBJECT structure’s fields. 
DRIVER
DEVICE_OBJECT
DRIVER_OBJECT
HARDWARE RES.
I/O CreateDevice( )
(one or more objects)
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
DEFCON 2018 - USA
15
•
Most ring 0 malwares install filter drivers for: 
• modifying aspects and behavior of existing drivers
• filtering results of operations (reading file, for example)
• adding new malicious features to a driver/devices (for 
example, keyloggers)
•
Oftenly found in filter drivers (mainly the malicious one) for 
intercepting and altering data, a driver can easily “attach” (using 
IoAttachDevice( )) one device object to another device object 
(similar to a “pipeline) to receive I/O requests (see next slide). 
•
The AddDevice( ) routine is used to create an unamed Device 
Object and to attach it to a named Device Object (ex: aborges) 
from a layered driver (lower-level driver).
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
DEFCON 2018 - USA
16
•
Each IRP will be processed by a dispatch routine, which is 
picked up from its MajorFunction Table.  
•
The correct dispatch routine will be called to handle the request, 
picking the IRP parameters from the own IO_STACK_LOCATION
by calling the IoGetCurrentIrpStackLocation( ) routine. 
•
Additionally, these IRP parameters could be passed to the next 
IO_STACK_LOCATION by using the 
IoCopyCurrentIrpStackLocation( ) routine or even to the next 
driver by calling IoSkipCurrentStackLocation( ) routine.
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
DEFCON 2018 - USA
17
• Alternatively, this IRP could be passed down to the 
layered driver by using function such as 
IoCallDriver( ).  
• Usually, rootkits use the same IoCallDriver( ) to 
send directly request to the filesystem driver, 
evading any kind of monitoring or hooking at 
middle of the path. 
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
18
Tcpip.sys
Upper Filter Driver
Function Driver
Lower Filter Driver
Miniport driver
Physical Device Object
Upper Filter Device Object
Function Device Object
Lower Filter Device Object
Driver Stack
IoCallDriver( )
IoCallDriver( )
IoCallDriver( )
IoCallDriver( )
Device Stack
IO_STACK_LOCATION 4
IO_STACK_LOCATION 3
IO_STACK_LOCATION 2
IO_STACK_LOCATION 1
No Completation Routine
Completation Routine 4
Completation Routine 3
Completation Routine 2
Device Stack
The 
IoCompleteRequest( ) 
manages calling these 
routines in the correct 
order (bottom-up). 
DEFCON 2018 - USA
ROOTKITS: RING 0
DEFCON 2018 - USA
19
IO_STACK_LOCATION
IO_STACK_LOCATION
IO_STACK_LOCATION
..............
S
T
A
T
I
C
•
A IRP is usually generated by the I/O Manager in 
response to requests. 
•
An IRP can be generated by drivers through the 
IoAllocateIrp( ) function. 
•
Analyzing malware, we are usually verify 
functions such as IoGetCurrentIrpStackLocation(), 
IoGetNextIrpStackLocation( ) and 
IoSkipCurrentIrpStackLocation( ). 
•
At end, each device holds the responsability to 
prepare the IO_STACK_LOCATION to the next 
level, as well a driver could call the 
IoSetCompletationRoutine( ) to set a completation 
routine up at CompletationRoutine field. 
D
Y
N
A
M
I
C
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
ROOTKITS: RING 0
DEFCON 2018 - USA
20
ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
Parameters field 
depends on 
the major and minor 
functions! 
ROOTKITS: RING 0
DEFCON 2018 - USA
21
Parameter field depends
on major and minor function 
number. Thus, the IRPs 