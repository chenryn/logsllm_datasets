# Extended Privilege Inheritance in RBAC

**Authors:**
- M. A. C. Dekker
- J. G. Cederquist
- Jason Crampton
- Sandro Etalle

**Publication Details:**
- **Conference Paper:** January 2007
- **DOI:** 10.1145/1229285.1229335
- **Source:** DBLP
- **Citations:** 5
- **Reads:** 51

**Author Profiles:**
- **Mendie Dekker:**
  - **Affiliation:** Windesheim University
  - **Publications:** 13
  - **Citations:** 232
  - **Profile:** [See Profile](https://www.researchgate.net/profile/Mendie_Dekker)

- **Jason Crampton:**
  - **Affiliation:** Royal Holloway, University of London
  - **Publications:** 97
  - **Citations:** 2,160
  - **Profile:** [See Profile](https://www.researchgate.net/profile/Jason_Crampton)
  - **Projects:**
    - Towards an Internet of Secure Things (INTERSECT) [View Project](https://www.researchgate.net/project/Towards-an-Internet-of-Secure-Things-INTERSECT)
    - Cryptographic Enforcement of Information Flow Policies [View Project](https://www.researchgate.net/project/Cryptographic-Enforcement-of-Information-Flow-Policies)

- **Jan Cederquist:**
  - **Affiliation:** Technical University of Lisbon
  - **Publications:** 18
  - **Citations:** 265
  - **Profile:** [See Profile](https://www.researchgate.net/profile/Jan_Cederquist)

- **Sandro Etalle:**
  - **Affiliation:** Eindhoven University of Technology
  - **Publications:** 228
  - **Citations:** 2,502
  - **Profile:** [See Profile](https://www.researchgate.net/profile/Sandro_Etalle)

**Abstract:**
In the existing Role-Based Access Control (RBAC) literature, administrative privileges are inherited in the same manner as ordinary user privileges. We argue that this approach is too restrictive from a security perspective and propose a more flexible method. We define an ordering on the set of administrative privileges, which allows us to extend the standard privilege inheritance relation naturally. This means that if a user has a particular administrative privilege, they are also implicitly authorized for weaker administrative privileges. We prove that it is possible to decide whether one administrative privilege is weaker than another and show how this result can be used to manage administrative requests in an RBAC security monitor.

## 1. Introduction

Role-Based Access Control (RBAC) [11] is a non-discretionary access control mechanism that simplifies the assignment of access rights to users. The basic idea is to group access rights and users into a relatively small number of roles, organized in a role hierarchy. In practice, an RBAC system in a large enterprise may involve thousands of roles [5]. Maintaining these roles and access rights can be overwhelming for a single administrator. The usual solution is to delegate part of the administrator's authority to other users, making the delegation mechanism flexible to reduce bottlenecks and the sharing of sensitive information like keys or passwords. However, the delegation mechanism must also be secure, ensuring that users do not obtain rights beyond those explicitly delegated by the administrator.

Several research efforts address the delegation of administrative privileges in RBAC systems. Ferraiolo et al. [5] compare different approaches. The main issue is how to model administrative privileges and determine who should have them. In ARBAC [10], administrative privileges are assigned to a separate hierarchy of administrative roles and defined by specifying a range of roles that can be changed. Crampton and Loizou [4] use the same hierarchy for both administrative and ordinary user privileges, defining administrative scope to specify which roles have administrative privileges over others. In the Role-Control Center [5], administrative privileges over roles are defined in terms of views, which are subsets of the role-hierarchy, and can only be assigned to users assigned to these roles.

In existing RBAC literature [2, 4, 5, 10, 15], administrative privileges are inherited just like ordinary user privileges. We argue that this is more restrictive than necessary for security. For example, if an administrator delegates the authority to assign a user \( u' \) to a high role, and \( u' \) uses this authority, \( u' \) can play lower roles. There is no security reason to prevent the direct assignment of \( u' \) to lower roles, as \( u' \) could play them anyway. However, in standard RBAC, administrative privileges are not interpreted in this way.

In this paper, we define an ordering on administrative privileges, extending the standard privilege inheritance relation. If a user has a particular administrative privilege, they are also implicitly authorized for weaker administrative privileges. We show that this new relation is tractable and sketch a possible implementation. We argue that decentralized management of RBAC becomes more flexible with this extension.

## 2. Preliminaries

### 2.1 RBAC State

Given the sets \( U \) of users, \( R \) of roles, and \( P \) of privileges, an RBAC state is defined as a tuple \((UA, RH, PA)\), where:
- \( UA \subseteq U \times R \) determines which users are assigned to which roles.
- \( RH \subseteq R \times R \) is the role-hierarchy, a directed graph on \( R \).
- \( PA \subseteq R \times P \) determines which privileges are assigned to which roles.

A user can play the roles to which they are assigned and the roles below them in the hierarchy. Sometimes \((r, r') \in RH\) is written as \( r > r' \). The reflexive transitive closure over the graph \( RH \) is denoted by \( \geq \).

In the RBAC model [11], a user does not get all the privileges associated with the roles they can play; they must start a session and activate one or more roles. The session gets only the privileges of the activated roles, implementing the principle of least privilege. For brevity, we will not be explicit about sessions or role activations in this paper.

### 2.2 Cycles in the Role-Graph

Some literature requires \( RH \) to be acyclic to avoid redundancy. For example, if both \((a, b) \in RH\) and \((b, a) \in RH\), using different names \( a \) and \( b \) is redundant. Similarly, \( RH \) is sometimes required to be transitively reduced. For simplicity, we ignore such constraints and assume no specific set of constraints on \( RH \) or \( PA \). Our results apply to both acyclic and cyclic directed graphs, and the extension of the privilege inheritance relation does not introduce extra cycles.

### 2.3 Privilege Inheritance

Given an RBAC state \((UA, RH, PA)\), a role \( r \) has a privilege \( p \), denoted \( r \vdash p \), if:
\[ r \geq r' \text{ and } (r', p) \in PA \text{ for some } r' \in R. \]

When a user activates a role in a session, the session acquires all the privileges of the role. Privilege inheritance allows users in a high role to use privileges of a lower role without activating that lower role, avoiding repetitive definitions in the RBAC state.

## 3. A Different View on Administrative Privileges

Privileges can be divided into user privileges and administrative privileges [11]. User privileges allow actions on objects, while administrative privileges allow actions on the RBAC state itself, such as adding edges between roles. We assume that user privileges form a finite set of atomic privileges, denoted by \( Q \), corresponding to a finite set of actions on objects. The set of administrative privileges is necessarily infinite because it includes privileges about administrative privileges.

### 3.1 Privilege Grammar

Given the sets \( U \) of users, \( R \) of roles, and \( Q \) of user privileges, the set of all privileges \( P \) is defined by the following grammar:
\[ p ::= q \mid addUser(u, r) \mid addEdge(r, r') \mid addPrivilege(r, p), \]
where \( u \in U \), \( q \in Q \), and \( r, r' \in R \).

Each administrative privilege corresponds to an administrative action. The privilege \( addUser(u, r) \) allows adding a member \( u \) to the role \( r \). The privilege \( addEdge(r1, r2) \) allows adding an edge from role \( r1 \) to \( r2 \). The construct \( addPrivilege \) is a grammatical connective, making the set \( P \) infinite despite the finiteness of the sets of users, roles, and user privileges.

### 3.2 Extended Privilege Inheritance

An RBAC state is denoted by a triple \((UA, RH, PA)\), containing the user-role assignments, the edges between roles, and the privilege assignments to roles. A well-known feature of RBAC is privilege inheritance, by which a role has the privileges to which it is explicitly assigned, and additionally, the privileges of lower roles.

#### 3.2.1 Standard Privilege Inheritance

Let \((UA, RH, PA)\) denote an RBAC state and let \( \geq \) denote the reflexive transitive closure of \( RH \). We say that a role \( r \) has the privilege \( p \), denoted by \( r \vdash p \), if:
\[ r \geq r' \text{ and } (r', p) \in PA \text{ for some } r' \in R. \]

We argue that standard privilege inheritance is inadequate for administrative privileges. For example, a role \( r \) with the privilege to add an edge \( e \) from \( r2 \) to \( r3 \) does not have the privilege to add an edge from \( r2 \) to any role below \( r3 \), nor the privilege to add an edge from any role above \( r2 \) to \( r3 \). From a security perspective, this is unnecessary, as the edge \( e \) would already provide a path to roles below \( r3 \) or from roles above \( r2 \).

#### 3.2.2 Privilege Ordering

Let \((UA, RH, PA)\) be an RBAC state, let \( p, p1, p2 \) be privileges in \( P \), let \( Q \) be the subset of user privileges in \( P \), and let \( r1, r2, r3, r4 \) be roles in \( R \). We define the relation \( \rightarrow \) as the smallest relation satisfying:
1. \( p \rightarrow p \) if \( p \in Q \)
2. \( addUser(u, r1) \rightarrow addUser(u, r2) \) if \( r1 \geq r2 \)
3. \( addEdge(r1, r2) \rightarrow addUser(u, r3) \) if \( r2 \geq r3 \) and \( (u, r1) \in UA \)
4. \( addEdge(r2, r3) \rightarrow addEdge(r1, r4) \) if \( r1 \geq r2 \) and \( r3 \geq r4 \)
5. \( addEdge(r2, r3) \rightarrow addPrivilege(r1, p2) \) if \( r1 \geq r2 \), \( r3 \geq r4 \), \( (r4, p1) \in PA \), and \( p1 \rightarrow p2 \)
6. \( addPrivilege(r2, p1) \rightarrow addPrivilege(r1, p2) \) if \( r1 \geq r2 \) and \( p1 \rightarrow p2 \)

The ordering \( \rightarrow \) is both reflexive and transitive.

#### 3.2.3 Extended Privilege Inheritance

Let \((UA, RH, PA)\) be an RBAC state. The extended privilege inheritance relation \( \vdash^* \) is defined as:
\[ r \vdash^* p \text{ if } r \vdash p \text{ or there exists } p' \text{ such that } r \vdash p' \text{ and } p' \rightarrow p. \]

This means that if a user has a particular administrative privilege, they are also implicitly authorized for weaker administrative privileges. We prove that it is possible to decide whether one administrative privilege is weaker than another and show how this result can be used to manage administrative requests in an RBAC security monitor.