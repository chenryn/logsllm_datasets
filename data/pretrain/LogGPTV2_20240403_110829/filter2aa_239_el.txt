Framework为此提供了
两种方式。
本节将介绍System.Xml.Serialization名称空间和Nuget包System.Xml.XmlSerializer。它
包含的类可用于把对象序列化为XML文档或流。这表示把对象的公共属性和公共字段转
换为XML元素和/或属性。
System.Xml.Serialization名称空间中最重要的类是XmlSerializer。要序列化对象，首先
需要实例化一个XmlSerializer对象，指定要序列化的对象类型，然后实例化一个流/写入器
对象，以把文件写入流/文档中。最后一步是在XmlSerializer上调用Serializer（）方法，给
它传递流/写入器对象和要序列化的对象。
被序列化的数据可以是基元类型的数据、字段、数组，以及XmlElement和
XmlAttribute对象格式的内嵌XML。为了从XML文档中反序列化对象，应执行上述过程的
逆过程。即创建一个流/读取器对象和一个XmlSerializer对象，然后给Deserializer（）方法
传递该流/读取器对象。这个方法返回反序列化的对象，尽管它需要强制转换为正确的类
型。
  注意： XML序列化程序不能转换私有数据，只能转换公共数据，它也不能序
列化对象图表。但是，这并不是一个严格的限制。对类进行仔细设计，就很容易避免
这个问题。如果需要序列化公共数据和私有数据，以及包含许多嵌套对象的对象图
表，就可以使用运行库或数据协定序列化机制。
示例代码使用了以下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Xml.XmlDocument
    System.Xml.XmlSerializer
名称空间：
    System.IO
    System.Xml
    System.Xml.Serialization
    static System.Console
27.5.1 序列化简单对象
下面开始序列化一个简单对象。类Product的XML特性来自名称空间
System.Xml.Serialization，用于指定属性是应该序列化为XML元素还是特性。XmlElement
特性指定属性要序列化为元素；XmlAttribute特性指定属性要序列化为特性。XmlRoot特
性指定类要序列化为根元素（代码文件ObjectToXmlSerializationSample / Product.cs）：
    [XmlRoot]
    public class Product
    {
      [XmlAttribute(AttributeName = "Discount")]
      public int Discount { get; set; }
      [XmlElement]
      public int ProductID { get; set; }
      [XmlElement]
      public string ProductName { get; set; }
      [XmlElement]
      public int SupplierID { get; set; }
      [XmlElement]
      public int CategoryID { get; set; }
      [XmlElement]
      public string QuantityPerUnit { get; set; }
      [XmlElement]
      public Decimal UnitPrice { get; set; }
      [XmlElement]
      public short UnitsInStock { get; set; }
      [XmlElement]
      public short UnitsOnOrder { get; set; }
      [XmlElement]
      public short ReorderLevel { get; set; }
      [XmlElement]
      public bool Discontinued { get; set; }
      public override string ToString() =>
          $"{ProductID} {ProductName} {UnitPrice:C}";
    }
使用这些特性，可以通过使用特性类型的属性，影响要生成的名称、名称空间和类
型。
下面的代码示例创建一个Product类的实例，填充其属性，序列化为文件。创建
XmlSerializer需要通过构造函数传递要序列化的类的类型。Serialize方法重载为接受
Stream、TextWriter、XmlWriter和要序列化的对象（代码文件
ObjectToXmlSerializationSample / Program.cs）：
    public static void SerializeProduct()
    {
      var product = new Product
      {
        ProductID = 200,
        CategoryID = 100,
        Discontinued = false,
        ProductName = "Serialize Objects",
        QuantityPerUnit = "6",
        ReorderLevel = 1,
        SupplierID = 1,
        UnitPrice = 1000,
        UnitsInStock = 10,
        UnitsOnOrder = 0
      };
      FileStream stream = File.OpenWrite(ProductFileName);
      using (TextWriter writer = new StreamWriter(stream))
      {
        XmlSerializer serializer = new XmlSerializer(typeof(Product));
        serializer.Serialize(writer, product);
      }
    }
生成的XML文件列出了Product元素、Discount折扣特性和其他存储为元素的属性：
      200
      Serialize Objects
      1
      100
      6
      1000
      10
      0
      1
      false
这里没有任何不寻常的地方。可以以使用XML文档的任何方式来使用这个文档。可
以对它进行转换，并以HTML格式显示它，用它加载XmlDocument，或者像在该示例中那
样，对它进行反序列化，并创建一个对象，该对象的状态与序列化前的状态一样（这就是
下一步要做的工作）。
从文件中创建一个新对象是通过创建一个XmlSerializer，调用Deserialize方法实现的
（代码文件ObjectToXmlSerializationSample / Program. cs）：
    public static void DeserializeProduct()
    {
      Product product;
      using (var stream = new FileStream(ProductFileName, FileMode.Open))
      {
        var serializer = new XmlSerializer(typeof(Product));
        product = serializer.Deserialize(stream) as Product;
      }
      WriteLine(product);
    }
运行应用程序时，控制台显示了产品ID、产品名称和单价。
  注意： 要忽略XML序列化中的属性，可以使用XmlIgnore特性。
27.5.2 序列化一个对象树
如果有派生的类和可能返回一个数组的属性，则也可以使用XmlSerializer类。下面介
绍一个解决这些问题的复杂示例。
除了Product类之外，再创建BookProduct （派生于Product）和Inventory类。Inventory
类包含其他两个类。
BookProduct类派生于Product，添加了ISBN属性。此属性与XML特性Isbn存储在一
起，XML特性Isbn由.NET特性XmlAttribute定义（代码文件
ObjectToXmlSerializationSample / BookProduct.cs）：
    public class BookProduct : Product
    {
      [XmlAttribute("Isbn")]
      public string ISBN { get; set; }
    }
Inventory类包含一个库存项数组。库存项可以是一个Product或BookProduct。序列化
器需要知道存储在数组中的所有派生类，否则就不能反序列化它们。数组项使用
XmlArrayItem特性定义（代码文件ObjectToXmlSerializationSample / Inventory.cs）：
    public class Inventory
    {
      [XmlArrayItem("Product", typeof(Product)),
      XmlArrayItem("Book", typeof(BookProduct))]
      public Product[] InventoryItems { get; set; }
      public override string ToString()
      {
        var outText = new StringBuilder();
        foreach (Product prod in InventoryItems)
        {
        outText.AppendLine(prod.ProductName);
        }
        return outText.ToString();
      }
    }
在SerializeInventory方法中创建Inventory对象，填充Product和BookProduct后，就序列
化Inventory （代码文件ObjectToXmlSerializationSample / Program.cs）：
    public static void SerializeInventory()
    {
      var product = new Product
      {
        ProductID = 100,
        ProductName = "Product Thing",
        SupplierID = 10
      };
      var book = new BookProduct
      {
        ProductID = 101,
        ProductName = "How To Use Your New Product Thing",
        SupplierID = 10,
        ISBN = "1234567890"
      };
      Product[] items = { product, book };
      var inventory = new Inventory
      {
        InventoryItems = items
      };
      using (FileStream stream = File.Create(InventoryFileName))
      {
        var serializer = new XmlSerializer(typeof(Inventory));
        serializer.Serialize(stream, inventory);
      }
    }
生成的XML文件定义了根元素Inventory、子元素Product和Book。BookProduct类型表
示为Book元素，因为XmlItemArray特性为BookProduct类型定义了Book名称：
        100
        Product Thing
        10
        0
        0
        0
        0
        0
        false
        101
        How To Use Your New Product Thing
        10
        0
        0
        0
        0
        0
        false
要反序列化对象，需要调用XmlSerializer的Deserialize方法：
    public static void DeserializeInventory()
    {
      using (FileStream stream = File.OpenRead(InventoryFileName))
      {
        var serializer = new XmlSerializer(typeof(Inventory));
        Inventory newInventory = serializer.Deserialize(stream) as Inventory;
        foreach (Product prod in newInventory.InventoryItems)
        {
        WriteLine(prod.ProductName);
        }
      }
    }
27.5.3 没有特性的序列化
这些代码都很好地发挥了作用，但如果不能访问已经序列化的类型的源代码，该怎么
办？如果没有源代码，就不能添加特性。此时可以采用另一种方式。可以使用
XmlAttributes类和XmlAttributeOverrides类，这两个类可以完成刚才的任务，但不需要添
加特性。下面的代码说明了这两个类的工作方式。
对于这个示例，假定Inventory、Product和派生的BookProduct类也可以在一个单独的
库中，因为序列化独立于此，为了使示例结构简单，这些类在与前面例子相同的项目中，
但请注意现在没有把特性添加到Inventory中（代码文件
ObjectToXmlSerializationWOAttributes / Inventory.cs）：
    public class Inventory
    {
      public Product[] InventoryItems { get; set; }
      public override string ToString()
      {
        var outText = new StringBuilder();
        foreach (Product prod in InventoryItems)
        {
        outText.AppendLine(prod.ProductName);
        }
        return outText.ToString();
      }
    }
Product和BookProduct类的特性也删除了。
序列化的实现代码与之前类似，区别是使用另一个重载版本创建XmlSerializer。该重
载版本接受XmlAttributeOverrides。这些重写代码来自辅助方法
GetInventoryXmlAttributes（代码文件ObjectToXmlSerializationWOAttributes 
/
Program.cs）：
    public static void SerializeInventory()
    {
      var product = new Product
      {
        ProductID = 100,
        ProductName = "Product Thing",
        SupplierID = 10
      };
      var book = new BookProduct
      {
        ProductID = 101,
        ProductName = "How To Use Your New Product Thing",
        SupplierID = 10,
        ISBN = "1234567890"
      };
      Product[] products = { product, book };
      var inventory = new Inventory
      {
        InventoryItems = products
      };
      using (FileStream stream = File.Create(InventoryFileName))
      {
        var serializer = new XmlSerializer(typeof(Inventory),
          GetInventoryXmlAttributes());
        serializer.Serialize(stream, inventory);
      }
    }
辅助方法GetInventoryXmlAttributes返回所需的XmlAttributeOverrides。此前，
Inventory类应用了XmlArrayItem特性。它们现在创建了XmlAttributes，给XmlArrayItems集
合添加了XmlArrayItemAttributes。
另一个变化是Product和BookProduct类把XmlAttribute应用于Discount和ISBN属性。为
了定义相同的行为，但没有直接应用属性，创建了XmlAttributeAttribute对象，并赋予
XmlAttributes对象的XmlAttribute属性。然后把所有这些创建的XmlAttributes添加到包含
XmlAttributes集合的XmlAttributeOverrides中。调用XmlAttributeOverrides的Add方法时，
需要应该应用的特性的类型、属性名和相应的XmlAttributes 