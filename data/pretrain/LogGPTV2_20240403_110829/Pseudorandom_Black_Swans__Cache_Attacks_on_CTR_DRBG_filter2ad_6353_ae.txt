does not reseed the CTR_DRBG during RAND_seed and
RAND_add. Instead, these calls add the entropy to a general
pool from which the PRG can later be reseeded with a call
to reseed in compliance with SP 800-90A. We estimated the
amount of entropy added during generate calls to be 12 bits.
OpenSSL 1.1.1.
In OpenSSL 1.1.1 (the latest version at
the time of writing) the maintainers rewrote much of the
random number generation API. Due to the signiﬁcant changes,
this code was professionally audited twice [2, 71], both times
ﬁnding only minor ﬂaws with the PRG implementation. The
implementation gathers additional input from a variety of
sources and feeds it into an entropy pool. These include system
event timing data, time, thread ids and output from the OS or
hardware random number generators. Given this complexity,
we did not estimate the entropy added in reseeding.
The ECDSA nonce generation mechanism in OpenSSL 1.1.1
was also improved. The nonce is generated from a hash of the
private key, the transcript, and PRG output. The inclusion of
secret data ensures that even if the PRG is compromised, the
nonce cannot be recovered. Together, these measures preclude
both state and nonce recovery.
NetBSD. The NetBSD kernel provides a source of random
numbers that can be used by a TLS implementation. We
consider an implementation that, like FortiOS, chooses to
source random numbers for OpenSSL from the system PRG
without modiﬁcation. NetBSD provides additional data in to
CTR_DRBG in the form of the least signiﬁcant 32 bits of the
rdtsc cpu counter. If this counter is not available, NetBSD uses
the kernel’s current time in microseconds, and further falls back
to an integer counter if the kernel clock is not yet running. It is
not possible for applications to add further entropy as NetBSD
does not externally expose the reseed and update functions,
and thus we do not model any additional entropy introduced
by RAND_seed and RAND_add.
H. Evaluation
We empirically evaluate the difﬁculty of extracting ECDSA
signing keys from TLS clients given the different
imple-
mentation choices described in Section VI-G. In order to
evaluate the effects of different parameter choices on attack
complexity, we reverse-engineered the FortiOS CTR_DRBG
implementation and reimplemented it ourselves using the
nist_rng library, so that we could easily adjust parameters and
hook it into implementations. We modeled attack difﬁculty
against the other implementations by adjusting addin and
reseeding behaviors to match the descriptions in Section VI-G
of each implementation.
The Victim. For our victim TLS client, we used the sample
TLS client code available in the OpenSSL documentation [60],
conﬁgured to use mutual authentication and the nist_rng library
with our choice of modeling parameters. We conﬁgured the
client to authenticate using an ECDSA certiﬁcate with NIST
P-256. For the ECDSA nonce, we used the raw PRG output,
which matches the behavior of all implementations considered
in Section VI-G, except OpenSSL 1.1.1.
The Malicious TLS Server. Our malicious server was the
default OpenSSL tool, instrumented to output TLS transcripts
and ECDSA signatures, and conﬁgured to support only RSA
key exchange cipher suites with a 16384-bit RSA certiﬁcate,
the largest allowed key size as discussed in Section VI-F.
PRG State Recovery for Winding Forward. After a TLS
connection to the malicious server, we use Flush+Reload to
recover the PRG state, as described in Section V. We then brute
forced addin and additional entropy to recover the ECDSA
nonce, which consists of raw PRG output.
Our ability to wind the generator forward largely depends
on the quantity of entropy injected between state recovery and
nonce generation. Table I summarizes the entropy sources and
brute force search space for each implementation.
Using Side-Channel Information for Space Reduction. We
note that the attacker can use the same cache side-channel
used for state recovery to reduce the search space over the
additional entropy sources. By placing additional tickers and
using timing data acquired during the state recovery process,
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 16:24:55 UTC from IEEE Xplore.  Restrictions apply. 
1250
Target
Sources
Search Reduced CPU
Space
Time
30 minutes
Space
221
221
0
243
30 minutes
N/A
200 years
OpenSSL FIPS
NetBSD
FortiOS
Custom Params
time, PID 224
counter
rdtsc
none
time
232
0
248
TABLE I: Nonce Recovery Search. We calculated the search
space for the attack described in Section VI-G. We extrapolated
custom parameter timing from smaller searches on our test
machine. OpenSSL 1.1.1 is excluded due to its non-vulnerable
nonce generation mechanism. The full search space corresponds
to the search complexity of all possible timestamps of that size,
and the reduced space corresponds to a search of one standard
deviation from the mean required search, starting from the
approximate timing of the encryption operation we gained from
our timing attacks, calculated across 100 trials.
we narrow down the set of timestamps or CPU counter values
that we need to search. We empirically evaluate the amount
of data that can gained through the instrumentation already in
place for conducting state recovery in Table I as well. We note
the entropy brute forcing is highly parallelizable, because after
the SSL/TLS handshake has been performed, each element of
the search space can be tested independently.
Empirical Results. Our attack succeeded against FortiOS
in negligible time (after state recovery) and against OpenSSL
FIPS after 30 minutes (221 work) using the hardware from
Section V-C. The search space for the custom parameters was
beyond our computational capabilities, and we terminated our
search after one hour. We tabulate our results in Table I. While
our experimental results are limited by our CPU’s speed of
≈ 222 elliptic curve scalar multiplications per hour, [84] achieve
a rate of 235 operations per hour using a commodity GPU. We
anticipate that using their setup, the custom parameters search
would be completed within two weeks.
Handling AES-256.
To demonstrate key recovery under
the constrained set of known ciphertexts available in the TLS
setting of Section VI, we implemented our attack using AES-
128. In Section VII, we handle AES-256 in the SGX setting.
V I I . F U L L E N T R O P Y I M P L E M E N TAT I O N S
The attack in Section VI relies on both the ability to observe
the PRG’s output and brute force the limited entropy of the
state update. However, we now argue that these requirements
are not fundamental. More speciﬁcally, by carrying out a
higher-resolution cache attack, we can develop a blind attack
in which the attacker can observe the victim’s cache access
patterns but not the PRG output. Furthermore, our attack only
requires observing two AES encryptions and is thus feasible
even when the update entropy is too high to brute force.
To achieve the higher-resolution cache attack however, we
require a stronger side-channel adversary: one who can observe
the cache accesses during AES encryption at a high temporal
resolution. Past research [34, 81, 85] has demonstrated that a
side-channel adversary with control of the operating system
may have access to high resolution cache data when co-located
with a victim running within an SGX enclave. This setting is
congruent with the threat model for SGX enclaves.
We begin with background on SGX, cache attacks on SGX,
and the SGX threat model (Section VII-A). We then present our
novel differential cryptanalysis technique for exploiting side-
channel information (Section VII-B). Finally, we evaluate our
attack on an SGX port of the mbedTLS library (Section VII-C).
A. Secure Enclave Technology
Intel Software Guard Extensions (SGX) [33] is an extension
of the x86 instruction set that supports private regions of
memory called enclaves. The contents of these enclaves cannot
be read by any code running outside the enclave, including
kernel and hypervisor code. This in theory allows a user-level
process to protect its code and data from a highly privileged
adversary, such as a malicious OS or hypervisor.
Cache Attacks on AES Inside SGX.
Although SGX is
intended to protect the enclave from a malicious OS, our
work demonstrates how it can render enclaved code more
vulnerable to side-channel attacks. Speciﬁcally, the attacker
in Section V only observes access patterns at the granularity
of an encryption. In contrast, a malicious OS can obtain ﬁner
resolution when the client executes in an enclave. This allows
us to observe cache accesses after each of the 16 accesses to
the AES T-tables in each encryption round [34, 81].
Threat Model. Following previous work [11, 55, 82, 90], in
this section we assume a root-privileged attacker who controls
the entire OS. This is consistent with the threat model described
in the SGX whitepaper [30], wherein an enclave guarantees
conﬁdentiality and integrity, even in the presence of a malicious
OS or hypervisor. Unlike the attack described in Section VI,
we do not assume that the enclaved TLS client is willing
to connect to a malicious attacker-controlled server, or uses
imperfect PRG reseeding.
B. Differential Cryptanalysis with side-channel Leakage
We provide the additional details about AES required for the
differential attack. AES is a substitution-permutation cipher [8]
that operates in a sequence of rounds on a 128-bit internal state
S. Each round mixes the state and combines the mixed state
with a round key. For a plaintext x, the initial state is S0 =
x ⊕ K0. Each consecutive round calculates Sj+1 = P(Sj ) ⊕ Kj+1,
where P is the state mixing function and Kj is the key for the
jth round. In efﬁcient software implementations, the mixing
step is commonly implemented using four T-tables. Each byte
of the state selects one entry from a T-table and, since the
T-table entries are 32 bits wide, each state bytes affects four
consecutive bytes in the mixed state. For example, we can
calculate the ﬁrst four bytes of state Sj+1 by:
Sj+1,0..3 = T0[Sj,0] ⊕ T1[Sj,5] ⊕ T2[Sj,10] ⊕ T3[Sj,15] ⊕ Kj+1,0..3
(1)
As before, our cache attack targets accesses to these T-tables.
Because we cannot distinguish between entries in the same
cache line, the cache leaks only the four most signiﬁcant bits
(MSBs) of each byte of the state in each round. Let (cid:10)(cid:11)U denote
setting the four least signiﬁcant bits of each byte to zero, then
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 16:24:55 UTC from IEEE Xplore.  Restrictions apply. 
1251
Algorithm 3 Find possible guesses for the last state 0 byte.
1: function L A S T S TAT E 0 B Y T E(L0,0,15, Δ0,15, LΔ1,0..3)
2:
3:
4:
5:
6:
7:
GuessList0 ← Empty
for Nibble ← 0 to 24 − 1 do
G0,0,15 = L0,0,15⊕ Nibble
Δ1,0..3 = T3[G0,0,15] ⊕ T3[G0,0,15 ⊕ Δ0,15]
if
(cid:10)Δ1,0..3(cid:11)U = LΔ1,0..3 then
GuessList0.append(G0,0,15, Δ1,0..3)
8:
return GuessList0
the leakage on byte k is Lj,k = (cid:10)Sj,k (cid:11)U. With a known plaintext
x, we can use Lj,k to recover the 4 MSBs of every byte of K0
because (cid:10)K0,k (cid:11)U = (cid:10)xk (cid:11)U ⊕ L0,k.
Unfortunately, in our blind attack setting we do not know
x. Consequently, we cannot learn information on K0 from
the leakage of the ﬁrst round. Instead, we use the known
difference between the plaintexts used in consecutive rounds
of AES-CTR to recover the AES state. From the state, we can
recover the keys, plaintexts, and ciphertexts. This is in close
correspondence to the changes targeted in differential fault
attacks [7]. We develop a similar analysis using side-channel
leakage as the basis of our attack.
Notation. We use the following notation:
1) T0..T3 is the array of 4 AES T-Tables, where Ti[j] is the
value in location j of Table i.
2) (cid:10)x(cid:11)U denotes the value of x with the lower four bits
(nibble) in each byte set to 0.
3) Li, j,k is the value leaked from the cache attack for byte
k of round j in trace i. The leaked value is only the 4
MSBs and the lower nibble is always 0.
4) Si, j,k is the real value of the state byte k of round j in
trace i. Gi, j,k is our current guess for this byte.
5) RΔj,k the value of the differential S0, j,k ⊕ S1, j,k, and Δj,k
is our current guess for this value.
6) LΔj,k = L0, j,k ⊕ L1, j,k (lower nibble is always 0).
7) Kj,k is the key value of byte k of round j.
Differential Analysis. By analyzing the difference between
the state of two encryptions, we can recover state information
that is independent of the round keys. In AES-CTR, for two
consecutive plaintexts x0 and x1 we know that x1 = x0 + 1,
so with probability (255/256) the two plaintexts only differ in
the last byte by some value Δctr. As the state of round 0 is
simply the plaintext XOR with K0, the plaintext difference is
preserved and RΔ0,15 = Δctr. Using Equation (1) we get:
S0,1,0..3 =T0[S0,0,0] ⊕ T1[S0,0,5] ⊕ T2[S0,0,10]
⊕ T3[S0,0,15] ⊕ Ki+1,0..3
S1,1,0..3 =T0[S1,0,0] ⊕ T1[S1,0,5] ⊕ T2[S1,0,10]
⊕ T3[S1,0,15] ⊕ Ki+1,0..3
=T0[S0,0,0] ⊕ T1[S0,0,5] ⊕ T2[S0,0,10]
⊕ T3[S0,0,15 ⊕ RΔ0,15] ⊕ Ki+1,0..3
LΔ1,0..3 =L0,1,0..3 ⊕ L1,1,0..3 = (cid:10)S0,1,0..3 ⊕ S1,1,0..3(cid:11)U
=(cid:10)T3[S0,0,15] ⊕ T3[S0,0,15 ⊕ RΔ0,15](cid:11)U
(2)
As (cid:10)S0,0,15(cid:11)U = L0,0,15 we only need to try the 16 options
for the lower four bits until we ﬁnd a value that satisﬁes
Equation (2) and recover S0,0,15 (see Algorithm 3 ). As RΔ0,15
is unknown, we run Algorithm 3 with each possible value
to retrieve the full set of candidates. However, as RΔ0,15 =
x0 ⊕ x0 +1 only eight candidates are possible. The full key and
plaintext recovery procedures are described in Appendix B.
Using Three or More Traces. The above attack requires only