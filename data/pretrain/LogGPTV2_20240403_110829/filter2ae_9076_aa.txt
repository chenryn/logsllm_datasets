作者：[k0shl](https://whereisk0shl.top/Dark%20Composition%20Exploit%20in%20Ring0.html
"k0shl")
#### 0x00 前言
尝试写这个 Exploit 的起因是邱神 @pgboy1988 在3月份的一条微博，这是邱神和社哥在 cansecwest2017上的议题《Win32k
Dark Composition－－Attacking the Shadow Part of Graphic
Subsystem》，后来邱神在微博公开了这个议题的 slide，以及议题中两个 demo 的
PoC，当时我也正好刚开始学习内核漏洞，于是就想尝试将其中一个 double free 的 demo 写成 exploit（事实证明我想的太简单了）。
后来由于自己工作以及其他在同时进行的一些flag，还有一些琐碎事情的原因，这个 Exploit
拖拖拉拉了半年时间，其中踩了很多坑，但这些坑非常有趣，于是有了这篇文章，我会和大家分享这个 Exploit 的诞生过程。
我在6月份完成了 Exploit 的提权部分，随后遇到了一个非常大的困难，就是对 Handle Table 的修补，10月份完成了整个漏洞的利用。
非常非常感谢邱神在我尝试写 Exploit
的过程中对我的指点，真的非常非常重要！也非常感谢我的小伙伴大米，在一些细节上的讨论碰撞，解决了一些问题，很多时候自己走不出的弯如果有大佬可以指点，或者和小伙伴交流讨论，会解决很多自己要好久才能解决的问题。
最后我还是想说，十一长假时完成这个 Exploit 的时候我差点从椅子上跳起来，whoami->SYSTEM 那一刻我突然觉得，这个世界上怕是没有什么比
system&&root 更让我兴奋的事情了！
    调试环境：
    Windows 10 x64 build 1607
    win32kbase.sys 10.0.14393.0
    Windbg 10.0.15063.468
    IDA 6.8
邱神的 slide 和 PoC: 
我会默认阅读此文的小伙伴们已经认真看过邱神和社哥的 slide，关于 slide 中提到的知识点我就不再赘述，欢迎师傅们交流讨论，批评指正，感谢阅读！
#### 0x01 关于Direct Compostion和PoC
关于 Direct Composition 在 slide
里有相关描述，如果想看更详细的内容可以参考[MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/hh437371\(v=vs.85\).aspx "MSDN")，这里我就不再赘述，我最开始复现这个
double free 漏洞的时候碰到了第一个问题，当时 PoC 无法触发这个漏洞，会返回 NTSTATUS
0xC00000D，我重新跟踪了一下调用过程，发现了第一个问题的解决方法。
首先，在 Win10 RS1 之后 Direct Compostion 的 NTAPI 引用可以通过
NtDCompositionProcessChannelBatchBuffer 调用，通过 enum DCPROCESSCOMMANDID 管理。
    enum DCPROCESSCOMMANDID
    {
        nCmdProcessCommandBufferIterator,
        nCmdCreateResource,
        nCmdOpenSharedResource,
        nCmdReleaseResource,
        nCmdGetAnimationTime,
        nCmdCapturePointer,
        nCmdOpenSharedResourceHandle,
        nCmdSetResourceCallbackId,
        nCmdSetResourceIntegerProperty,
        nCmdSetResourceFloatProperty,
        nCmdSetResourceHandleProperty,
        nCmdSetResourceBufferProperty,
        nCmdSetResourceReferenceProperty,
        nCmdSetResourceReferenceArrayProperty,
        nCmdSetResourceAnimationProperty,
        nCmdSetResourceDeletedNotificationTag,
        nCmdAddVisualChild,
        nCmdRedirectMouseToHwnd,
        nCmdSetVisualInputSink,
        nCmdRemoveVisualChild
    };
这个 NtDCompositionChannelBatchBuffer 函数在 win32kbase.sys 中，它的函数逻辑如下：
    __int64 __fastcall DirectComposition::CApplicationChannel::ProcessCommandBufferIterator(DirectComposition::CApplicationChannel *this, char *a2, unsigned int a3, __int64 a4, unsigned __int32 *a5)
    {
              switch ( v10 )
            {
              case 9:
                v11 = v6;
                if ( v5 >= 0x10 )
                {
                  v6 += 16;
                  v5 -= 16;
                  v12 = DirectComposition::CApplicationChannel::SetResourceFloatProperty(
                          v7,
                          *((_DWORD *)v11 + 1),
                          *((_DWORD *)v11 + 2),
                          *((float *)v11 + 3));
                  goto LABEL_10;
                }
                v8 = -1073741811;
                goto LABEL_2;
              case 7:
                v42 = v6;
                if ( v5 >= 0xC )
                {
                  v6 += 12;
                  v5 -= 12;
                  v12 = DirectComposition::CApplicationChannel::SetResourceCallbackId(
                          v7,
                          *((_DWORD *)v42 + 1),
                          *((_DWORD *)v42 + 2));
                  goto LABEL_10;
                }
                v8 = -1073741811;
                goto LABEL_2;
              case 1:
              .....
    }
关于 enum DCPROCESSCOMMAND 中的 API 调用在 ProcessCommandBufferIterator 是通过 switch
case 管理的，我直接跟到关键的 nCmdSetResourceBufferProperty 函数。
    else if ( v9 == 11 ) // if v9 == setbufferproperty
    {
     v22 = v6;
     if ( v5  v5
     if ( v24  g
    Breakpoint 1 hit
    win32kbase!NtDCompositionProcessChannelBatchBuffer:
    ffff87e7`8d3f30c0 488bc4          mov     rax,rsp
    kd> ba e1 win32kbase!DirectComposition::CApplicationChannel::ProcessCommandBufferIterator
    kd> g
    Breakpoint 2 hit
    win32kbase!DirectComposition::CApplicationChannel::ProcessCommandBufferIterator:
    ffff87e7`8d3f43c0 44884c2420      mov     byte ptr [rsp+20h],r9b
    //***************rdx存放resource句柄
    kd> r rdx
    rdx=ffff8785c3cb0000
    kd> dd ffff8785c3cb0000 l1//hresource值为1
    ffff8785`c3cb0000  00000001
第二步进入 NtDCompositionProcessChannelBatchBuffer 函数处理，就是第二小节中我们介绍的 switch case
处理，首先 enum 的值为0xb，进入 SetBufferProperty 处理。
    kd> ba e1 win32kbase!NtDCompositionProcessChannelBatchBuffer
    kd> g
    Break instruction exception - code 80000003 (first chance)
    0033:00007ff7`ebc91480 cc              int     3
    kd> g
    Breakpoint 0 hit
    win32kbase!NtDCompositionProcessChannelBatchBuffer:
    ffff87e7`8d3f30c0 488bc4          mov     rax,rsp
    kd> ba e1 win32kbase!DirectComposition::CApplicationChannel::ProcessCommandBufferIterator
    kd> g
    Breakpoint 1 hit
    win32kbase!DirectComposition::CApplicationChannel::ProcessCommandBufferIterator:
    ffff87e7`8d3f43c0 44884c2420      mov     byte ptr [rsp+20h],r9b
    kd> r rdx
    rdx=ffff8785c4170000
    //****************enum的值为0xb，代表setbufferproperty API