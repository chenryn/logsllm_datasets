An Excerpt from the iDefense 2011 
Cyber Threats and Trends Report
Dec. 1, 2010
The  Verisign® iDefense® Intelligence Operations Team
Contents
1  Technology Trends 
3
1.1  Malicious Code Trends 
3
1.1.1  Anti-analysis Tactics Become More Restrictive 
3
1.1.2  Mobile Malware 
4
1.1.3  Malware and 64-bit Platforms 
5
1.1.4  Low-Distribution (APT) Malware Hiding in Plain Sight 6
1.2  Vulnerability Trends 
7
1.2.1  Increase in Out-of-Band Patches from Notable 
Software Vendors 
7
1.2.2  Changing Vulnerability Disclosure Landscape 
9
1.2.3  Vendor Bounty Programs 
10
1.2.3.1  Mozilla Security Bug Bounty Program 
10
1.2.3.2  Google Security Bug Bounty Program 
11
2  Disruptors 
13
2.1  Introduction 
13
2.2  Disruptor: Convergence of the “App Store” Model and 
Traditional Computing 
15
2.3  Disruptor: The Vulnerable Cloud 
18
2.4  Disruptors Conclusion 
21
3
Disruptors
1  Technology Trends
1.1  Malicious Code Trends
1.1.1  Anti-analysis Tactics Become More Restrictive
In 2010, iDefense observed more malware samples that included anti-analysis 
tactics. Malware authors use anti-analysis techniques to frustrate individuals 
attempting to analyze their code. The tactics that iDefense observed during 
2010 included virtual machine (VM) detection, sandbox detection and 
hardware-locking mechanisms.
The VM and sandbox-detection anti-analysis techniques are by no means 
a new concept. Many malware families check the environment for artifacts 
of analysis systems, such as VM hard drive drivers and VM processes. In 
addition, iDefense observed an increase in malware families that incorporate 
VM-detection techniques. For example, when iDefense first analyzed the 
Mariposa Trojan (BFBot) in 2009,1 it only checked for artifacts related to a 
sandbox environment and if the Trojan was operating within a debugger. In 
July 2010, iDefense analyzed a Mariposa sample that also checked for video 
card drivers related to virtual machines. The addition of new checks suggests 
that malware authors see the benefits of including VM detection in their code.
Even malware samples that are noisy and blatantly obvious to the victim have 
begun using VM detection. iDefense analyzed a dropper Trojan that installed a 
Trojan whose sole purpose was to perform click-fraud and display advertising 
pop-ups on the system. This type of Trojan does not attempt to be stealthy; 
however, iDefense noticed the following code within the dropper Trojan that 
detects a VMware environment based on VMware’s ComChannel:
// Moves “VX” into EDX, then uses the VM ComChannel “IN” command 
004012FB . BA 58560000 MOV EDX,5658 
00401300 . ED IN EAX,DX 
00401301 . 90 NOP 
00401302 . 87D9 XCHG ECX,EBX 
00401304 . 87CB XCHG EBX,ECX 
// Checks to see if EBX has “VMXh” in it, if true it terminates 
00401306 . 81FB 68584D56 CMP EBX,564D5868
In addition to an increase in the use of VM detection, iDefense observed 
malware that locks itself to a system to thwart analysis on another system. 
The notorious Zeus banking Trojan, specifically versions 2 and later, includes 
a hardware-locking mechanism that will modify the Trojan to only run on the 
infected system. The Trojan accomplishes this locking by obtaining unique 
information from the local system and writing the information to its binary 
stored on the system. Upon execution, the Trojan compares the information 
included in the binary with the same information located on the system and 
will terminate if there are any differences. This hardware-locking technique is 
very effective and drastically increases the amount of effort required to analyze 
the sample on an analysis system.
1 iDefense Malicious Code Summary Report (ID# 536506, Oct. 28, 2009).
“Malware authors 
use anti-analysis 
techniques to 
frustrate individuals 
attempting to 
analyze their code.”
4
Disruptors
The increase in the use of anti-analysis tactics suggests that malware 
developers have considered the pros and cons involved with such tactics. 
The main con that malware developers accept with anti-analysis techniques 
is that their code will run on fewer systems; however, malware developers 
seem to weigh the pro of avoiding execution on analysis systems over the 
negative side effect of fewer infections. Efforts to avoid analysis show that 
malware continues to shift from a goal of spreading quickly to malware with 
an emphasis on stealth. iDefense predicts that at least one major family will 
appear in 2011 that uses new, stricter anti-analysis tactics.
1.1.2  Mobile Malware
Users are increasingly using mobile devices to send e-mails, perform 
transactions for online banking and store personal information. Some of 
the new popular applications track personal health or fitness information, 
scan barcodes, and help with time management. The ability for new mobile 
devices to track such a wealth of information and provide detailed real-time 
information draws more users to mobile platforms. Modern mobile devices 
allow applications to track real-time global positions, facing direction and even 
gravitational forces. It is no surprise that users want to develop applications 
that access this type of information because it will increase those users’ 
interaction with both the real world and the electronic world from their mobile 
devices. iDefense first identified mobile platforms as a disruptive technology 
for security in 2007. 
Mobile operating system vendors and telecommunications companies still 
wish to control applications that users may run on their mobile phones. Their 
primary reasons might be to satisfy laws, limit bandwidth usage, limit abuse, 
reduce maintenance costs and capitalize on existing communications such as 
short message service (SMS). Mobile users, however, want to utilize mobile 
devices to install new applications without permission, and the community 
interested in jailbreaking devices has grown in the past year. Now that 
jailbreaking is officially legal, according to a press release by the Electronic 
Frontier Foundation (EFF),2 community efforts to subvert these security 
controls are likely to continue to escalate.
In August 2010, one website, jailbreakme.com, released code to jailbreak the 
iPhone simply by visiting its website. Upon visiting, the code uses a zero-day 
exploit to execute code on visitors’ phones to disable the security measures 
and enable non-official applications to run. The ease of jailbreaking the iPhone 
by visiting this website demonstrates that even novice users can jailbreak their 
mobile devices. If attackers had the information that jailbreakme.com uses, 
they could have written a mobile worm that after jailbreaking a phone attempts 
to spread to other phone contacts. A worm using this type of vulnerability 
has not happened, however, and the jailbreaking community’s intent is largely 
not currently malicious, even though those who are part of that community 
are more active than attackers in developing exploits for mobile devices. 
As a side effect, jailbroken phones are less secure than their non-jailbroken 
counterparts, which could encourage more attackers to target jailbroken 
devices with malicious code. 
2 Staff. “EFF Wins New Legal Protections for Video Artists, Cell Phone Jailbreakers, and Unlockers.” July 26, 2010. EFF. http://www.
eff.org/press/archives/2010/07/26. 
“The ease of 
jailbreaking the 
iPhone by visiting 
this website 
demonstrates that 
even novice users 
can jailbreak their 
mobile devices.”
5
Disruptors
Financially motivated attacks against mobile devices also exist. The most 
popular of financially motivated attacks installs applications that make phone 
calls to premium-rate phone numbers; however, there is also malicious mobile 
software that works with banking Trojans that affect computers running 
Microsoft Windows. On Sept. 27, 2010, iDefense received samples of a Zeus 
binary that has a secondary payload to target certain brands of mobile phones 
in the UK. Upon infecting a Microsoft Windows system, the Zeus binary injects 
HTML into banking websites to convince users to install an application on 
their mobile phones. Once installed, the application monitors SMS messages 
and relays those messages to an attacker’s UK phone number to defeat one-
time-password (OTP) challenges. 
Mobile devices continue to be a segmented market with many choices 
including iPhone, Android, Symbian, BlackBerry and Windows Mobile. Users 
in the US have purchased more Android devices than iPhones in 2010 so 
far.3 Android has a less controlled application store, which may be one of the 
reasons for its increase in popularity. In 2011, iDefense predicts that at least 
one malicious application in the Android store will receive 50,000 downloads.
1.1.3  Malware and 64-bit Platforms
While rare to find on desktops just 5 years ago, 64-bit processors have 
become standard equipment for even the least expensive laptops on the 
market today. The primary advantage this architecture has over its 32-bit 
predecessor is a larger address space for memory. While the maximum 
number a computer can express with 32 bits is just greater than 4 billion, 64 
bits can represent numbers more than 18 quintillion (that is 18 billion billion). 
To put more than 4 gigabytes (GB) of memory into a computer, that computer 
must be able to support these larger numbers so the processor can easily 
address each byte of memory. With processor support in place, the operating 
system (OS) must also support this architecture to allow users to make use of 
the extra space.
While 64-bit versions of Windows XP and Windows Vista both exist, their 
adoption rate is very low compared to Microsoft’s latest OS, Windows 7. In 
July 2010, 46 percent of Windows 7 installations used the 64-bit version of the 
OS compared to just 11 percent for Windows Vista and less than 1 percent 
for Windows XP.4 As more users begin using Windows 7 and dispose of their 
older Windows XP and Vista systems, 64-bit versions of Windows will make 
up a significant portion of the Windows ecosystem.
This change will force malware authors to adapt, as 64-bit versions 
of Windows contain additional security features not present in 32-bit 
distributions. Most importantly, 64-bit versions include Kernel Patch Protection 
(KPP), or PatchGuard. This feature prevents 64-bit versions of Windows 
from loading kernel drivers that developers have not signed with a legitimate 
Authenticode signing certificate. One category of malware that often requires 
access to the kernel to operate properly is that of rootkits. These types of 
3 Tofel, Kevin C. “Android Sales Overtake iPhone in the U.S.” Aug. 2, 2010. Gigaom. http://gigaom.com/2010/08/02/android-sales-
overtake-iphone-in-the-u-s/.
4 LeBlanc, Brandon. “64-Bit Momentum Surges with Windows 7.” July 8, 2010. Windows. http://windowsteamblog.com/windows/b/
bloggingwindows/archive/2010/07/08/64-bit-momentum-surges-with-windows-7.aspx.
“In 2011, iDefense 
predicts that at 
least one malicious 
application in the 
Android store will 
receive 50,000 
downloads.”
6
Disruptors
malware hook the OS at the lowest possible level to hide files and system 
modifications from users and security software. 
To effectively create a rootkit that operates on these systems, malware authors 
are likely to use three possible tactics. First, they may sign their malware 
using legitimate code-signing certificates. In July 2010, security researchers 
discovered the Stuxnet worm, which used this tactic after its creators stole 
code-signing certificates that belonged to Realtek Semiconductor and 
JMicron. The disadvantage to this tactic for the malware author is that once 
administrators detect the rootkit, the certificate authority responsible for the 
code-signing certificate may revoke the certificate, effectively disabling the 
driver.
A second tactic that malware authors may use is disabling Windows’ ability 
to prevent unsigned drivers from loading into the kernel. One malware family, 
TDL3, has already implemented this technique to properly infect 64-bit 
systems. The rootkit overwrites the system’s master boot record (MBR) to take 
control of the system before the protection is in place, disabling KPP so the 
system will load the rootkit’s driver once the system finishes booting.
The third tactic would be to only install user-mode rootkits that operate above 
the kernel. User-mode rootkits are still capable of hiding files and system 
modifications from the user, but they are much easier for rootkit-detection 
tools to find because those tools typically work at a lower level in the OS. 
In 2011, it is likely that additional rootkits will begin targeting 64-bit versions of 
Windows by changing their code to match the tactics listed above. If attackers 
do not adapt, they will quickly find that their code does not operate on a large 
percent of the systems they want to infect.
1.1.4  Low-Distribution (APT) Malware Hiding in Plain Sight
Most modern malware uses a technique named “packing” to obfuscate 
the functionality of their programs to simultaneously evade detection by AV 
programs and thwart the efforts of malware analysts attempting to discover 
that functionality. While packing is often effective, malware uses some packers 
so commonly that AV engines detect the packer code itself rather than the 
malicious code it hides. 
AV programs also use heuristics to detect suspicious activity on a system. 
For instance, when a program accesses the memory of other programs on 
a system and creates remote threads within them, an AV program may flag 
the program as malicious. Malware that attackers intend to distribute widely, 
by sending spam or stealing credentials for online banking websites, must 
contain a packing algorithm to hide its behavior. Without a packing algorithm, 
AV programs would quickly write signatures that detect and remove the 
malware. 
On the other hand, AV programs are not likely to detect malware very quickly 
if attackers distribute it in very small numbers, such as that used in targeted 
attacks often characterized as APTs. The lack of detection is not a result of a 
7
Disruptors
packing algorithm, instead analysts who write signatures for their engines have 
never seen the malware before.
Attackers who create APT malware often use no packing techniques and 
execute their malware using methods that make them appear to be legitimate 
programs. One example is the DNSCalc5 malware on which iDefense 
reported in May 2010 related to targeted attacks. Malware in this family uses 
functionality that is not heavily obfuscated. The malware uses filenames such 
as “windfvsrv.exe” and installs itself as a Windows service. The program acts 
as a simple backdoor through which the attacker can execute commands; the 
program does not conduct any detectably malicious activities. By not using 
techniques that malware typically uses, these programs can hide in plain sight 
and evade detection for weeks or months.
1.2  Vulnerability Trends
1.2.1  Increase in Out-of-Band Patches from Notable Software Vendors
In its 2010 Trends Report, iDefense discussed the burden of patch alignment 
stemming from the trend of software vendors that purposely chose the second 
Tuesday of the month to release security updates for their scheduled patch 
release, which coincides with Microsoft’s monthly Security Bulletin release. 
Vendors did this in an effort to leverage existing processes and resources. 
This year, iDefense saw a trend of an unusual number of out-of-band (OOB) 
patch releases from three of the now five vendors (Microsoft, Oracle, Cisco, 
Adobe and SAP) that follow a scheduled patch release for some or all of 
their products. On paper, this indicates that vendors are quick to respond to 
vulnerabilities discovered in their products; however, data will show that the 
discovery of a previously unknown vulnerability released publicly for which 
a patch does not exist, otherwise known as a zero-day vulnerability, is what 
is forcing vendors to release these OOB patches. This signifies the common 
occurrence of zero-day vulnerabilities in a broader range of products, which 
has not been nearly as prevalent until this year.
2004-2009
2010
2004
2006
2007
2008
2009
In 2010, Microsoft has released four OOB security bulletins, which almost 
matches the six OOB security bulletins that Microsoft released in a 5-year 
span from 2004 to 2009 (see Exhibit 1-1). All but one of the four OOB 
Security Bulletins began as either exploits or malware that malicious actors 
5 DNS-Calc APT Trojan Uses DNS Queries to Generate C&C Port Number (ID# 595094, May 13, 2010). 
“Attackers who 
create APT 
malware often 
use no packing 
techniques and 
execute their 
malware using 
methods that 
make them appear 
to be legitimate 
programs.”
Exhibit 1-1: Microsoft OOB Patches 
Released in 2010 Compared to Patches 
Released between 2004 and 2009
8
Disruptors