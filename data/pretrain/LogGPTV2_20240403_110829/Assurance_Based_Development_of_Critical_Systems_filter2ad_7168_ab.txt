appropriate  to  a  given  problem.  We  leave  effective
recording and retrieval of patterns for future work.
3.2. Selection of a system development choice
Selection of a suitable system development choice
from the candidate set is based on seven criteria (dis-
cussed  below):  functionality,  subsequent  restrictions,
dependability,  cost,  feasibility,  standards,  and  addi-
tional non-functional requirements. A candidate choice
can be rejected based on one or several of the criteria
or modified to suit the system’s needs (if possible).
Much of the pruning of the set will be based on the
developer’s experience. In many cases, an experienced
developer might consider only a single candidate sys-
tem development choice in which he or she has consid-
erable confidence. In such a case, these criteria are exit
criteria from the selection process for that choice. Note
that these criteria are not disjoint, and so evaluating a
criterion  cannot  necessarily  be  done  in  isolation.  We
examine each criterion briefly with an emphasis on its
overall role in dependability.
•
Functionality. 
The  system  development  choice
must not obviously preclude achieving the desired
functionality. This can be checked by inspection,
analysis, prototyping and/or modeling.
Restrictions on later choices. 
Each  system  devel-
opment  choice  that  is  made  affects  the  subgoals
that are generated and thus restricts the available
choices throughout the remainder of development.
The  system  development  choice  should  not  pre-
clude desirable choices later, particularly when the
later choices support dependability.
Evidence of dependability. 
Each  system  develop-
ment choice must give rise to evidence that, along
•
•
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
•
•
•
•
along  with  an  assurance  strategy,  is  sufficient  to
argue that the assurance goal will be met.
Cost. 
The  system  development  choice  must  be
cost-effective in a complete sense; that is, it must
be possible to build both the system and a satisfac-
tory  assurance  case  within  budget.  If  providing
adequate  evidence  for  the  assurance  argument
would require resources beyond those available, a
candidate choice must be rejected.
Feasibility. 
The system development choice must
not itself be infeasible or preclude completion of
the system or a convincing system assurance case.
Applicable standards. 
Applicable  standards  can:
(1)  preclude  certain  choices  by  definition;  or  (2)
require certain development practices that restrict
or preclude certain forms of evidence that would
otherwise be required for the assurance case.
Non-functional requirements. 
requirements derive from stakeholder interests and
often prescribe certain aspects of development or
certain characteristics of the desired system. Such
prescriptions  limit  the  available  system  develop-
ment choices and are likely to affect the assurance
evidence in the same way that a standard can.
As an example of the application of these criteria,
consider  again  the  anti-lock  braking  system  example
mentioned  earlier.  Assume  that  the  braking  system’s
computations could be run on: (1) a single processor;
(2)  two  processors  whose  outputs  are  compared;  (3)
three  processors  whose  outputs  will  be  voted  on
(TMR);  or  (4)  many  processors  on  a  real-time  bus,
each running part of the computation.
Non-functional
The assurance case evidence that each choice pro-
vides would depend on the specific characteristics of
the equipment chosen and the planned software devel-
opment  approach.  If  the  dependability  obligations  of
the hardware are stringent enough, options (1) and (2)
must be rejected based on the dependability criterion.
Option (4) would have to be rejected because of cost.
applicable  standards
Applying these criteria can be quite involved since
they  depend  both  on  each  other  and  on  decisions  at
other  points  in  development.  Consider,  for  example,
the 
  criterion.  If  a  relevant  stan-
dard  prescribes  the  use  of  a  particular  programming
language,  this  might  preclude  the  subsequent  use  of
static  analysis  that  depends  on  certain  language  fea-
tures (such as strong typing) or on the existence of a
formal semantic definition of the language.
3.3. Applying system development choices
Once made, a development choice is applied to the
system  and  the  assurance  case  updated  to  reflect  its
effect. The way in which the choice is applied to the
development  artifacts  will  depend  upon  the  type  of
artifact. An architectural choice, for example, might be
applied  by  modifying  a  description  of  the  system’s
architecture  in  an  architectural  description  language.
The choice to use a particular programming language
might be recorded in project standards documentation.
The  assurance  case  extension  resulting  from  a
choice identifies the affected development artifacts and
describes the contribution that these artifacts will make
to the argument. In some cases, the choice will intro-
duce  new  goals,  obligating  the  developers  to  supply
specific evidence later in the process, while in others
the  choice  will  directly  support  a  goal  with  evidence
from a development artifact. In section 4 we will illus-
trate this linking with a more concrete example.
4. An illustrative example
To  illustrate  the  process  of  developing  a  system
using ABD,  we  present  a  summary  of  the  use  of  the
process on a realistic application. Space considerations
preclude us from describing every system development
choice, and so we examine only a subset of them. We
have selected a depth-first slice of the assurance argu-
ment  so  as  to  illustrate  artifacts  from  most  develop-
ment phases: we illustrate the development decisions,
evidence,  and  argument  from  the  requirements  level
down to source code. Although the application is real,
we have made a number of assumptions about aspects
of the application that either have not been documented
by the system developers or are necessary for ABD but
not for the application in its present form.
runway  incursions
The application we use for illustration is part of a
research  prototype  for  a  software-based  system  for
alerting  pilots  to 
  at  airports.  The
Federal Aviation Administration (FAA) defines a run-
way incursion as “any occurrence at an airport involv-
ing an aircraft, vehicle, person, or object on the ground,
that creates a collision hazard or results in the loss of
separation with an aircraft taking off, intending to take
off,  landing,  or  intending  to  land.” [2].  The  system,
known  as  the  Runway  Incursion  Prevention  System
(RIPS) [2, 3], is being developed by Lockheed Martin
on a contract from the National Aeronautics and Space
Administration (NASA).
ownship
The RIPS system operates in the cockpit of an air-
craft  (referred  to  as 
).  It  collects  information
about the position of that aircraft and of other aircraft
and ground traffic in the vicinity, examines that infor-
mation  for  evidence  of  a  runway  incursion  involving
the ownship aircraft, and alerts the pilot to such incur-
sions via an Integrated Display System (IDS).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
P
h
y
s
c
a
l
i
w
o
r
l
d
s
e
n
s
o
r
s
L
o
c
a
t
i
o
n
ADS-B transceiver
ADS-B transceiver
RSM
IDS
RSM
IDS
n
o
i
t
a
c
o
L
s
r
o
s
n
e
s
d
l
r
o
w
i
l
a
c
s
y
h
P
OWNSHIP AIRCRAFT
OTHER AIRCRAFT
Figure 2. The given RSM architecture
Our illustrative example is based on a part of RIPS
called the Runway Safety Monitor (RSM). Our work is
not  part  of  the  RIPS  development  activity,  and ABD
was  not  used  to  develop  the  RSM.  Our  example  is
strictly for purposes of illustration. In constructing it,
we have drawn upon the RSM documentation for: (1)
the problem to be solved; (2) the sources of data avail-
able for the purpose of detecting incursions; and (3) the
systems on board the aircraft and on the ground with
which an incursion detection system might interact.
4.1. The given architecture
The RSM uses existing systems on board the air-
craft including a computer, the aircraft’s ground loca-
tion  system  that  provides  the  aircraft’s  position,  and
broadcasts on the Automatic Dependent Surveillance -
Broadcast (ADS-B) link that provides the positions of
other aircraft. Limitations in the basic equipment may
make these data unavailable for up to several seconds.
This  lack  of  reliability  is  not  a  serious  problem  pro-
vided the pilot knows that RIPS is inoperative.
The decision to implement RSM in software is an
architectural decision at the level of the RIPS system:
the architects of RIPS decided to delegate the task of
alerting  the  pilot  to  a  software  sub-component  rather
than a separate system running on its own processors.
The result of this and other decisions by the RIPS
team is the RSM’s given architecture, shown in Figure
2.  The  IDS  system  polls  the  RSM  at  a  frequency  of
1 Hz to determine whether a runway incursion involv-
ing ownship is in progress. To perform its computation,
the RSM will need to know where ownship is located,
and where other aircraft that might conflict are located.
4.2. The top level assurance goal
The  top-level  goal  in  Figure  3,  G1,  states  the
required  functionality  and  dependability  of  the  RSM.
For purposes of illustration, we have assumed depend-
ability  requirements  that  place  it  in  the  ultra-depend-
able category and classify the system as safety-critical.
t
•
incursions 
In  this  example,  we  assume  that  the  RSM  is
required to meet the following two requirements (recall
that the data sources are unreliable):
•
If  the  quality  of  the  supplied  data  is  adequate,
detect  runway 
involving  ownship
within 
 time units after they begin with probabil-
ity greater than or equal to 
If  the  quality  of  the  supplied  data  is  inadequate,
report  a  failure  of  RSM  with  probability  greater
than or equal to 
Note the inclusion in Figure 3 of the system’s con-
text  in  GSN.  The  details  of  the  system’s  context  are
crucial  to  the  proper  refinement  of  the  goal  and  the
analysis associated with both the functionality and the
dependability of the system.
 time units.
p
.
0
p
1
 within 
u
4.3. The first system development choice
There  are  many  candidate  choices  that  meet  the
two  requirements  in  the  top-level  goal.  For  example,
the  overall  approach  to  the  real-time  requirements
could be either sequential or concurrent, and if concur-
rent  then  either  synchronous  or  asynchronous.  The
choice  will  be  influenced  by  the  services  available
from  the  target  operating  system  and  the  anticipated
verification approach amongst many other factors.