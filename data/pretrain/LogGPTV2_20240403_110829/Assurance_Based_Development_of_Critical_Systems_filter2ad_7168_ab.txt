### 3.2. Selection of a System Development Choice

The selection of an appropriate system development choice from the candidate set is based on seven key criteria: functionality, subsequent restrictions, dependability, cost, feasibility, standards, and additional non-functional requirements. A candidate choice may be rejected if it fails to meet one or more of these criteria, or it may be modified to better suit the system's needs, if feasible.

The pruning of the candidate set is often guided by the developer’s experience. In many cases, an experienced developer might consider only a single candidate system development choice in which they have considerable confidence. In such instances, these criteria serve as exit criteria from the selection process for that choice. It is important to note that these criteria are not mutually exclusive, and thus, evaluating a criterion cannot always be done in isolation. We will briefly examine each criterion, with a focus on its role in ensuring dependability.

- **Functionality:** The system development choice must not preclude achieving the desired functionality. This can be verified through inspection, analysis, prototyping, and/or modeling.
- **Subsequent Restrictions:** Each system development choice affects the subgoals generated and thus restricts the available choices throughout the remainder of the development. The choice should not preclude desirable options later, especially those that support dependability.
- **Dependability Evidence:** Each system development choice must provide evidence, along with an assurance strategy, that is sufficient to argue that the assurance goal will be met.
- **Cost:** The system development choice must be cost-effective in a comprehensive sense; it must be possible to build both the system and a satisfactory assurance case within the budget. If providing adequate evidence for the assurance argument would require resources beyond those available, the candidate choice must be rejected.
- **Feasibility:** The system development choice must not be infeasible and should not preclude the completion of the system or a convincing system assurance case.
- **Applicable Standards:** Applicable standards can (1) preclude certain choices by definition, or (2) require certain development practices that restrict or preclude certain forms of evidence that would otherwise be required for the assurance case.
- **Non-Functional Requirements:** Non-functional requirements, derived from stakeholder interests, often prescribe certain aspects of development or characteristics of the desired system. These prescriptions limit the available system development choices and are likely to affect the assurance evidence in the same way that a standard can.

#### Example Application of Criteria

Consider the example of an anti-lock braking system. Assume the braking system’s computations could be run on:
1. A single processor.
2. Two processors whose outputs are compared.
3. Three processors whose outputs will be voted on (TMR).
4. Many processors on a real-time bus, each running part of the computation.

The assurance case evidence provided by each choice would depend on the specific characteristics of the equipment chosen and the planned software development approach. If the dependability obligations of the hardware are stringent enough, options (1) and (2) must be rejected based on the dependability criterion. Option (4) would have to be rejected due to cost.

### 3.3. Applying System Development Choices

Once a development choice is made, it is applied to the system, and the assurance case is updated to reflect its effect. The application of the choice to the development artifacts depends on the type of artifact. For example, an architectural choice might be applied by modifying a description of the system’s architecture in an architectural description language. The choice to use a particular programming language might be recorded in project standards documentation.

The assurance case extension resulting from a choice identifies the affected development artifacts and describes the contribution that these artifacts will make to the argument. In some cases, the choice will introduce new goals, obligating the developers to supply specific evidence later in the process. In other cases, the choice will directly support a goal with evidence from a development artifact. In Section 4, we will illustrate this linking with a more concrete example.

### 4. An Illustrative Example

To illustrate the process of developing a system using ABD, we present a summary of the use of the process on a realistic application. Space considerations preclude us from describing every system development choice, so we examine only a subset of them. We have selected a depth-first slice of the assurance argument to illustrate artifacts from most development phases: we illustrate the development decisions, evidence, and argument from the requirements level down to source code. Although the application is real, we have made several assumptions about aspects of the application that either have not been documented by the system developers or are necessary for ABD but not for the application in its current form.

#### 4.1. The Given Architecture

The RSM (Runway Safety Monitor) uses existing systems on board the aircraft, including a computer, the aircraft’s ground location system, and broadcasts on the Automatic Dependent Surveillance - Broadcast (ADS-B) link. Limitations in the basic equipment may make these data unavailable for up to several seconds. This lack of reliability is not a serious problem provided the pilot knows that RIPS is inoperative.

The decision to implement RSM in software is an architectural decision at the level of the RIPS system. The architects of RIPS decided to delegate the task of alerting the pilot to a software sub-component rather than a separate system running on its own processors. The result of this and other decisions by the RIPS team is the RSM’s given architecture, shown in Figure 2.

#### 4.2. The Top-Level Assurance Goal

The top-level goal, G1, in Figure 3, states the required functionality and dependability of the RSM. For illustration, we assume dependability requirements that place it in the ultra-dependable category and classify the system as safety-critical.

In this example, we assume that the RSM is required to meet the following two requirements (recall that the data sources are unreliable):
- If the quality of the supplied data is adequate, detect runway incursions involving the ownship within a specified time units after they begin with a probability greater than or equal to \( p_1 \).
- If the quality of the supplied data is inadequate, report a failure of RSM with a probability greater than or equal to \( p_0 \).

Note the inclusion in Figure 3 of the system’s context in GSN. The details of the system’s context are crucial for the proper refinement of the goal and the analysis associated with both the functionality and the dependability of the system.

#### 4.3. The First System Development Choice

There are many candidate choices that meet the two requirements in the top-level goal. For example, the overall approach to the real-time requirements could be either sequential or concurrent, and if concurrent, then either synchronous or asynchronous. The choice will be influenced by the services available from the target operating system and the anticipated verification approach, among other factors.