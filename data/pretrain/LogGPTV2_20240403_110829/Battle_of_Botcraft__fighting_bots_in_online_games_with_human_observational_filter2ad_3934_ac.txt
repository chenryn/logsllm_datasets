8
1
 1200
 800
 400
 0
 0
 400
0
°
 800
 1200
Speed (px./sec.)
°
0
8
1
 1200
 800
 400
 0
 0
 400
°
0
1
2
 400
 800
3
3
0
°
°
0
1
2
 400
 800
°
0
4
2
300°
°
0
4
2
300°
 1200
270°
(a) Bot
 1200
270°
(b) Human
Figure 6: Average Velocity for Point-and-Click
3
0
°
0
°
 800
 1200
Speed (px./sec.)
3
3
0
°
4. HOP SYSTEM
In this section, we describe the design of our proposed
HOP system. The HOP system consists of client-side ex-
porters and a server-side analyzer. Each client-side exporter
collects and sends a stream of user-input actions taken at a
game client to the game server. The server-side analyzer
then processes each input stream and decides whether the
corresponding client is operated by a bot or a human player.
Figure 7 illustrates the high-level structure of the HOP sys-
tem.
4.1 Client-Side Exporter
Since each game client already receives raw user-input
events, the client-side exporter simply uses the available in-
formation to derive input actions, i.e., keystroke, point,
click, and drag-and-drop, and sends them back to the
server along with regular game-related data.
Ideally, the
client-side exporter should be implemented as an integral
part of the game executable or existing anti-cheat systems
[16, 17, 38, 49]. For the prototype of our HOP system, we
implement it as a standalone external program, as we do
not have source code access to the World of Warcraft.
4.2 Server-Side Analyzer
The server-side analyzer is composed of two major com-
ponents: the user-input action classiﬁer and the decision
maker. The work-ﬂow of the server-side analyzer is as fol-
lows. For each user-input action stream, the system ﬁrst
stores consecutive actions into the action accumulator. A
conﬁgurable number of actions form an action block, and
each action block is then processed by the classiﬁer. The
output of the classiﬁer contains the classiﬁcation score for
the corresponding action block, i.e., how close the group of
actions look to those of a bot, and is stored into the output
accumulator. Finally, when the output accumulator aggre-
gates a conﬁgurable amount of neural network output, the
decision maker makes a judgment. Each judgment reﬂects
whether the player is possibly operated by a bot since the
last judgment. The output accumulator is refreshed after
each decision is made. The analyzer continuously processes
user-input actions throughout each user’s game session.
261User Input 
Actions 
Action 
Accumulator
UI Action
UI Action
… 
UI Action
Neural 
Network
Output
Accumulator
NN Output
NN Output
… 
NN Output
Decision 
Maker 
Bot? 
Human?
Figure 7: Overview of the HOP system
Output 
Neuron 
<
<
Action 1 
Action 2 
… 
4.2.1 Neural Network Classiﬁcation
We employ artiﬁcial neural networks for user-input action
classiﬁcation due to the following two reasons. First, neu-
ral networks are especially appropriate for solving pattern
recognition and classiﬁcation problem involving a large num-
ber of parameters with complex inter-dependencies. The ef-
fectiveness of neural networks with user-input data classiﬁ-
cation has already been demonstrated in behavioral biomet-
ric identiﬁcation systems [1,35,36]. Second, neural networks
are not simple functions of their inputs and outputs. While
the detection methods based solely on those metrics with
clearly deﬁned equations are susceptible to inverse function
attacks, neural networks, often described as a “black box”,
are more diﬃcult to attack. Note that our HOP system
is not necessarily tied to neural networks, and we will con-
sider other classiﬁcation methods, such as support vector
machines (SVMs) or decision trees, in our future work.
The neural network we build for the HOP system is a
cascade-correlation neural network, a variant of feed-forward
neural networks that use the idea of cascade training [19].
Unlike standard multi-layer back-propagation (BP) percep-
tron networks, a cascade correlation neural network does not
have a ﬁxed topology, but rather is built from the ground up.
Initially, the neural network only consists of the inputs di-
rectly connected to the output neuron. During the training
of the neural network, a group of neurons are created and
trained separately, and the best one is inserted into the net-
work. The training process continues to include new neurons
into the network, until the neural network reaches its train-
ing target or the size of the network reaches a pre-deﬁned
limit.
Figure 8 illustrates the general construction of the cascade-
correlation neural network. There are eight input values for
each user-input action, including seven action metric param-
eters and a bias value that is used to diﬀerentiate the type
of action, e.g., keyboard action or mouse action. The neu-
ral network takes input from all actions in an action block.
The connections between the input node and neurons, and
among neurons, are represented by intersections between a
horizontal line and a vertical line. The weight of each con-
nection is shown as a square over the intersection, where
larger size indicates heavier weight.
The seven action metric parameters are: action duration,
mouse travel distance, displacement, eﬃciency, speed, an-
gle of displacement, and virtual key (a numeric value corre-
sponding to a keyboard key or a mouse button). The speed
and eﬃciency are derived parameters from the basic param-
eters, such as duration, distance and displacement. These
derived parameters are used mainly to help the neural net-
work capture the inherent association between input param-
eters, reduce the network complexity, and thus, speedup the
Duration 
Distance 
… 
Bias 
Duration 
Distance 
… 
Bias 
… 
… 
… 
Figure 8: A Cascade Neural Network
training process. The number of actions in an action block
directly aﬀects the total amount of input data to the neu-
ral network. Increasing the block size provides the neural
network with more context information and can, up to a
certain point, further improve the classiﬁcation accuracy of
the trained network. However, too many input actions can
also increase the overall complexity of the neural network
and slow down the training process.
4.2.2 Decision Making
The decision maker refers to using accumulated output
from the neural network to determine whether the corre-
sponding user-input data is likely from a bot or a human
player. Diﬀerent algorithms can be applied to consolidate
accumulated classiﬁcations. We employ a simple “voting”
scheme: if the majority of the neural network output clas-
siﬁes the user-input actions as those of a bot, the decision
will be that the game is operated by a bot, and vice versa.
The decision process is a summary of the classiﬁcations of
user-input actions over a period of time. While individual
classiﬁcation cannot be 100% correct, the more accumulated
output, the more conﬁdence we have in the decision. On the
other hand, the more accumulated output, the more user-
input actions are required, which translates to more data
storage and longer time for decision making.
4.3 Performance Impact and Scalability
The nature of MMOGs dictates our design of the HOP
system to be scalable and light-weight, limiting performance
impacts on game clients and the server. At the client side,
262the system resource consumed by the collection of user-input
actions is minor.
In addition to the system resource of a
game client, an MMOG player’s gaming experience also de-
pends on network performance. Since the user-input ac-
tions are short messages, 16 bytes of data per user-input
action, the additional bandwidth consumption induced by
the client-side exporter is negligible. The presence of the
exporter thus is imperceptible for end users. At the server
side, the scalability is critical to the success of our HOP
system. The server-side analyzer is very eﬃcient in terms
of memory and CPU usage, which is shown in Section 5.4.
The size of additional memory consumed per player is com-
parable to the size of the player’s avatar name. A single
processor core is capable of processing tens of thousands of
users simultaneously in real-time. Therefore, the HOP sys-
tem is scalable to the heavy workload at a game server.
5. EXPERIMENTS
In this section, we evaluate the eﬃcacy of our HOP sys-
tem through a series of experiments, in terms of detection
accuracy, detection speed, and system overhead. The met-
rics we use for detection accuracy include true positive rate
and true negative rate. The true positive rate is the per-
centage of bots that are correctly identiﬁed, while the true
negative rate is the percentage of humans that are correctly
identiﬁed. The detection speed is determined by the total
number of actions needed to make decisions and the average
time cost per action. In general, the larger the number of ac-
tions required for decisions and the higher the average time
cost per action, the slower the detection speed becomes.
5.1 Experimental Setup
Our experiments are based on 95 hours of traces, including
55 hours of human traces and 40 hours of game bot traces.
In total, these traces contain 3,000,066 raw user-input events
and 286,626 user-input actions, with 10 bot instances and
30 humans involved. The 10 bot instances are generated by
running the Glider bot with 10 diﬀerent proﬁles. The human
players are a diverse group, including men and women with
diﬀerent ages and diﬀerent levels of gaming experience. The
more detailed trace information has been given in Section
3.2.
The experiments are conducted using 10-fold cross vali-
dation. Each test is performed on a diﬀerent human or bot
that is left out of the training set for that test. Therefore,
to validate a given conﬁguration, 20 diﬀerent partitions are
created, one for each of the 10 bots and 10 sets of three
humans. The partitions consist of a training set of either
9 bots and 30 humans or 10 bots and 27 humans, and a
test set of either one bot or three humans. Thus, each test
is performed on unknown data that the system has not yet
been trained on.
5.2 Detection Results
The HOP system has four conﬁgurable parameters: the
number of actions per block, the number of nodes, the thresh-
old, and the number of outputs per output block. The ﬁrst
two parameters mainly determine the size and complexity of
the neural network, while the second two parameters largely
aﬀect the detection performance of the entire system. The
threshold determines how a neural network output is inter-
preted: a value over the threshold indicates a bot, while a
value under the threshold indicates a human. Note that hu-
mans have a value of 0.0 and bots have a value of 1.0 in the
training of the neural network.
We ﬁrst conﬁgure the number of actions per block and
the number of nodes. The true positive and true negative
rates with diﬀerent numbers of actions and diﬀerent numbers
of nodes are shown in Figure 9 (a) and (b), respectively.
These tests are performed with a default threshold of 0.5.
The neural network becomes more accurate as more actions
are provided, but we see diminishing returns in accuracy as
the number of actions increases, e.g., going from 4 actions
to 6 actions requires 50% more input but only provides a
relatively small increase in the overall accuracy.
In most cases, the binomial theorem predicts that combin-
ing three decisions for the 4-action neural network should
be more accurate than combining two decisions for the 6-
or 8-action neural networks. Therefore, we choose to use
a neural network with 4 actions as input, which gives true
positive and negative rates of 0.971-0.977 and 0.959-0.973,
respectively.
The overall true positive and negative rates do not always
grow as the number of nodes increases. At some points, in-
creasing the number of nodes no longer improves the true
positive or negative rates and the neural network starts to
over-ﬁt the training set. A neural network of 40 nodes pro-
vides a true positive rate of 0.976 and a true negative rate
of 0.961, which is the best combination of true positive and
true negative rates with 4 actions as input. Therefore, we
set up the neural network based on this conﬁguration.
With the neural network conﬁgured, the threshold and
the number of outputs per block determine the overall per-
formance of the system. The threshold can be increased or
decreased from the default value of 0.5 to bias the neural
network towards bots or humans, improving the true posi-
tive rate or the true negative rate, respectively. The number
of outputs per block aﬀects both the detection accuracy and
the detection speed of the system. As the number of outputs
per block increases, the detection accuracy of the system in-
creases, but the detection speed decreases as more neural
network outputs are needed to make decisions.
The true positive and negative rates with diﬀerent thresh-
olds and diﬀerent numbers of outputs for bots and humans
are listed in Table 2. The top number in each cell is the true
positive rate and the bottom number is the true negative
rate rate. The neural network has 40 nodes and takes 4 ac-
tions as input. There are a number of settings that allow for
a true positive or true negative rate of 1.0, though not both.
To avoid a false positive—mistaking a human for a bot, we
prefer a high true negative rate. The smallest number of
outputs per block that achieves a true negative rate of 1.0 is
9 outputs per block with the threshold of 0.75, which gives
a true positive rate of 0.998.
With the fully conﬁgured system (40 nodes, 4-action in-
put, the threshold of 0.75, and 9 outputs per block), Table
3 lists the true positive and negative rates for each of the
individual bots in our traces. The true negative rates are
1.0 for all of the humans, so none of the human players in
our traces are misclassiﬁed as bots. The true positive rates
are between 0.988 and 1.000 for the bots in our traces, with
the average true positive rate of 0.998.
The detection speed of the system is a function of the
total number of actions required for decision making and the
average time cost per action. The total number of actions is
36 (i.e., 9 outputs × 4 actions per output). The time cost per
263 0.99
 0.98
 0.97
 0.96
 0.95
e
t
a
R
e
v
i
t
i
s
o
P
e
u
r
T
 0.94
 20
 30
 40
 50
# of Nodes
e
t
a
R
e
v
i
t
a
g
e
N
e
u