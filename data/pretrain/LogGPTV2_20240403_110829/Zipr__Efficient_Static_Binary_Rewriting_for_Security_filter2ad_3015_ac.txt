bars 1 and 2 in Figures 3 and 4). However, when new functionality
(e.g., a security enhancement) is added to an application, it is nec-
essary to update the EH tables. As a preliminary investigation of
Session 1: Binary Rewriting and TransformationFEAST'17, November 3, 2017, Dallas, TX, USA12Figure 3: Performance Overhead of SPEC CPU2006 Benchmarks (normalized to native execution).
Figure 4: Filesize Overhead of SPEC CPU2006 Benchmarks.
composing security techniques with exception handling, we applied
a diversity transform to the six working C++ benchmarks in SPEC
CPU2006. We choose the C++ benchmarks because they are often
omitted from rewriter evaluations because they are particularly
tricky to rewrite due to the exception handling and large code size.
For these benchmarks, we applied a stack-layout diversity trans-
form (SLX), that randomly pads the activation records of functions
and inserts canaries [8]. This transform has proved effective at
preventing certain types of stack buffer overflow attacks.
Figure 5 shows the performance overhead of two configurations
when SLX is applied. For bar 1, EH-table rewriting is not applied,
and for bar 2 EH-table rewriting is enabled.
The first thing to notice is that bar 1 is missing for 453.povray
and 471.omnetpp. The missing bars are because these applications
dynamically throw exceptions, which causes the benchmark to
fail unless the EH tables are updated. These results highlight the
need for a robust binary rewriter to handle applications that throw
exceptions. The geometric mean for the working benchmarks in
0.75	1.00	1.25	1.50	1.75	2.00	2.25	2.50	2.75	400.perlbench	401.bzip2	403.gcc	410.bwaves	416.gamess	429.mcf	433.milc	434.zeusmp	435.gromacs	436.cactusADM	437.leslie3d	444.namd	445.gobmk	450.soplex	453.povray	454.calculix	456.hmmer	458.sjeng	459.GemsFDTD	462.libquantum	464.h264ref	465.tonto	470.lbm	471.omnetpp	473.astar	481.wrf	482.sphinx3	483.xalancbmk	geo.mean	Normalized	Execu0on	Time	Random	Code	Layout	OpQmized	Code	Layout	Random	Code	Layout	with	EH	Frame	RewriQng	OpQmized	Code	Layout	with	EH	Frame	RewriQng	0.75	1.00	1.25	1.50	1.75	2.00	2.25	400.perlbench	401.bzip2	403.gcc	410.bwaves	416.gamess	429.mcf	433.milc	434.zeusmp	435.gromacs	436.cactusADM	437.leslie3d	444.namd	445.gobmk	450.soplex	453.povray	454.calculix	456.hmmer	458.sjeng	459.GemsFDTD	462.libquantum	464.h264ref	465.tonto	470.lbm	471.omnetpp	473.astar	481.wrf	482.sphinx3	483.xalancbmk	geo.mean	Normalized	Filesize	Random	Code	Layout	OpQmized	Code	Layout	Random	Code	Layout	with	EH	Frame	RewriQng	OpQmized	Code	Layout	with	EH	Frame	RewriQng	Session 1: Binary Rewriting and TransformationFEAST'17, November 3, 2017, Dallas, TX, USA134 RELATED WORK
There are many static binary rewriters (e.g., [20], [10]). Some are
designed to transform the input binary to accomplish a particular
task (e.g., [19], [18]). Some work only at linking phase ([13]) or re-
quire the programs’ debugging symbols and relocation information
(e.g., [7]). Some do not provide the transformation writer with a
high-level API for developing transformations ([9]).
Recent notable static binary rewriting platforms that do not
require debugging information or other metadata include Second-
Write [3], UROBOROS [17], and Ramblr [15].
SecondWrite recreates an IR from the input binary, applies user-
specified transformations to that IR and, finally, passes the trans-
formed IR to the LLVM compiler to generate the rewritten pro-
gram. SecondWrite splits the original program stack into individual
frames, splits those frames into individual variables and, finally,
converts constants and variable memory accesses into symbols.
Based on that analysis, SecondWrite constructs an IR from the orig-
inal program that can be analyzed by LLVM. SecondWrite applies
LLVM’s built-in optimizations to this IR and uses LLVM’s code
generation algorithms to reconstruct the modified program.
UROBOROS and Ramblr recreate reassembleable disassembly [16]
from the input binary, apply user-specified transformations to that
representation and, finally, pass the modified version of that repre-
sentation to an assembler to generate the rewritten binary. Reassem-
bleable disassembly is different than the disassembly output from a
tool like objdump or IDA Pro which contains constant immediates
to address other code or data using their locations in the input
binary. Because absolute addresses are used as pointers, the instruc-
tions and data at those addresses cannot be moved and, therefore,
the output from a traditional disassembler cannot be given to an
unmodified assembler to recreate the program. In reassembleable
disassembly, those code/data immediate values have been replaced
with symbols which gives an unmodified assembler the ability to
conveniently and arbitrarily place data and code and update the
symbolic addresses with the absolute addresses as the last step
before completing the rewriting process.
To the best of our knowledge, SecondWrite, UROBOROS, and
Ramblr have left exception handling support for future work.
5 SUMMARY
Static binary rewriting is emerging as an important tool for late
stage-modification of binaries. To be widely adopted, binary rewrit-
ers must be robust and widely applicable. This paper has described
and evaluated an approach for rewriting applications that make use
of stack unwinding for exception handling. Beyond expanding the
use of static binary rewriting to an important class of applications,
the technique also improves performance. Measurements using
the full SPEC CPU2016 benchmark suite showed that when the
technique was incorporated into a modern, fully-featured binary
writer, runtime overhead was reduced from 15% to 3%.
ACKNOWLEDGMENTS
The authors thank the anonymous referees for their valuable com-
ments and helpful suggestions. The work is supported by AFRL and
DARPA under Grant Nos.: FA8750-15-C-0118, FA8750-14-C-0110
and FA8750-17-2-0079.
Figure 5: Normalized Performance Overhead of SLX Trans-
form on SPEC CPU2006 C++ Benchmarks.
this configuration is 1.26 (displayed as the the ‘ghost’ bar). For SLX
with EH-table rewriting (bar 2), the geometric mean is 1.1.
3.3 Case Study: Webservers, Ada and Libraries
To demonstrate that our EH-table rewriting is robust under a wider
range of EH handling situations, we decided to try an Ada program.
Ada is different from C++ because Ada uses exception handling
as part of normal operation. For example, the end-of-file (EOF)
conditions are typically checked by trying to read a byte, and an
exception is thrown/caught to indicate EOF.
We looked for a large, open-source project written in Ada, and
found the Ada Web Server (AWS) [2]. AWS is an Ada library that
provides web services for other programs. As part of the distribu-
tion, it comes with samples for how to use it, and we chose the WPS
(web page server) example as it provides basic web page services
that are easy to test. We noted that a single web page request often
saw tens or even hundreds of exceptions thrown, far more than all
of SPEC executes during an entire run of the test suite. Thus, we
believe AWS to be a suitable test of the functional correctness of
our EH-table rewriting.
We compiled WPS with the GNU gnat compiler using optimiza-
tion level -O2. We then performed a rewrite with and without
EH-table rewriting on the main executable (WPS statically links the
AWS code into the main executable), as well as two Ada runtime
libraries: libgnat.so and libgnarl.so. The libraries are written
mostly in Ada with some C, C++, and assembly. They support
common Ada operations like file manipulation, I/O, etc., much
like libc.so or libstdc++ for C and C++. The three files total 11
megabytes of disk space and make for a substantial test.
After rewriting, we used Apache Jmeter to run a battery of web
requests. We observed no failures and conclude that the rewriting
is robust for Ada as well as for system libraries.
For the three rewritten executables, we observed file size over-
heads of 94.8%, 44.3%, and 56.7% after EH-table rewriting (with
the optimized code layout). Unfortunately, we were unable to ade-
quately measure performance overheads, as our test setup made the
machine I/O bound, and presenting performance numbers would
be misleading.
0.75	1.00	1.25	1.50	1.75	2.00	444.namd	450.soplex	453.povray	471.omnetpp	473.astar	483.xalancbmk	geo.mean	Normalized	Execu0on	Time	SLX	OpAmized	Code	Layout	SLX	OpAmized	Code	Layout	with	EH	Frame	RewriAng	Session 1: Binary Rewriting and TransformationFEAST'17, November 3, 2017, Dallas, TX, USA14REFERENCES
[1] [n. d.]. The DWARF Debugging Standard. ([n. d.]). http://www.dwarfstd.org
[2] AdaCore. 2017. AWS Ada Web Server. (2017). http://libre.adacore.com/tools/aws/
[3] Kapil Anand, Matthew Smithson, Khaled Elwazeer, Aparna Kotha, Jim Gruen,
Nathan Giles, and Rajeev Barua. 2013. A compiler-level intermediate representa-
tion based binary analysis and rewriting system. In Proceedings of the 8th ACM
European Conference on Computer Systems - EuroSys ’13. ACM Press, New York,
New York, USA, 295. https://doi.org/10.1145/2465351.2465380
[4] Mahmoud Elnaggar, Jason Hiser, Tony Lin, Anh Nguyen-Tuong, Michele Co,
Jack Davidson, and Nicola Bezzo. 2017. Online Control Adaptation for Safe and
Secure Autonomous Vehicle Operations. In NASA/ESA Conference on Adaptive
Hardware and Systems.
[5] William H. Hawkins, Michele Co, Jason D. Hiser, Anh Nguyen-Tuong, and Jack W.
Davidson. 2017. Zipr: Efficient Static Binary Rewriting for Security. In The 47th
IEEE/IFIP International Conference on Dependable Systems and Networks.
[6] William H. Hawkins, Jason D. Hiser, and Jack W. Davidson. 2016. Dynamic
Canary Randomization for Improved Software Security. In Proceedings of the 11th
Annual Cyber and Information Security Research Conference on - CISRC ’16. ACM
Press, New York, New York, USA, 1–7. https://doi.org/10.1145/2897795.2897803
[7] Michael A. Laurenzano, Mustafa M. Tikir, Laura Carrington, and Allan Snavely.
2010. PEBIL: Efficient static binary instrumentation for Linux. In 2010 IEEE
International Symposium on Performance Analysis of Systems & Software (ISPASS).
IEEE, 175–183. https://doi.org/10.1109/ISPASS.2010.5452024
[8] Benjamin D. Rodes, Anh Nguyen-Tuong, Jason D. Hiser, John C. Knight, Michele
Co, and Jack W. Davidson. 2013. Defense against Stack-Based Attacks Using
Speculative Stack Layout Transformation. Springer Berlin Heidelberg, Berlin,
Heidelberg, 308–313. https://doi.org/10.1007/978-3-642-35632-2_29
[9] Ted Romer, Geoff Voelker, Dennis Lee, Alec Wolman, Wayne Wong, Hank Levy,
Brian Bershad, and Brad Chen. 1997.
Instrumentation and Optimization of
Win32/Intel Executables Using Etch. In Proceedings of the USENIX Windows NT
Workshop (NT’97). USENIX Association, Berkeley, CA, USA, 1–1. http://dl.acm.
org/citation.cfm?id=1267658.1267659
[10] Amitabh Srivastava, Alan Eustace, Amitabh Srivastava, and Alan Eustace. 1994.
ATOM: A System for Building Customized Program Analysis Tools. In Proceedings
of the ACM SIGPLAN 1994 conference on Programming language design and imple-
mentation - PLDI ’94, Vol. 29. ACM Press, New York, New York, USA, 196–205.
marks. (2006). http://www.spec.org/osg/cpu2006.
[12] Ian Lance Taylor. 2011. Airs - Ian Lance Taylor. (2011). http://www.airs.com/
blog/archives/460
https://doi.org/10.1145/178243.178260
[11] Standard Performance Evaluation Corporation. 2006. SPEC CPU2006 Bench-
[13] L. Van Put, D. Chanet, B. De Bus, B. De Sutter, and K. De Bosschere. 2005.
DIABLO: a reliable, retargetable and extensible link-time rewriting framework.
In Proceedings of the Fifth IEEE International Symposium on Signal Processing and
Information Technology, 2005. IEEE, 7–12. https://doi.org/10.1109/ISSPIT.2005.
1577061
[14] Mike Walker. 2015. Machine vs. Machine: Lessons from the First Year of Cyber
Grand Challenge | USENIX. (2015). https://www.usenix.org/node/190798
[15] Ruoyu Wang, Yan Shoshitaishvili, Antonio Bianchi, Aravind Machiry, John
Grosen, Paul Grosen, Christopher Kruegel, and Giovanni Vigna. [n. d.]. Ramblr:
Making Reassembly Great Again. ([n. d.]). https://doi.org/10.14722/ndss.2017.
23225
[16] Shuai Wang, Pei Wang, and Dinghao Wu. 2015. Reassembleable Disassem-
bling. In 24th USENIX Security Symposium (USENIX Security 15). USENIX As-
sociation, Washington, D.C., 627–642. https://www.usenix.org/conference/
usenixsecurity15/technical-sessions/presentation/wang-shuai
[17] Shuai Wang, Pei Wang, and Dinghao Wu. 2016. UROBOROS: Instrumenting
Stripped Binaries with Static Reassembling. In 2016 IEEE 23rd International Con-
ference on Software Analysis, Evolution, and Reengineering (SANER). IEEE, 236–247.
https://doi.org/10.1109/SANER.2016.106
[18] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen, and Zhiqiang Lin. 2012.
Binary Stirring: Self-randomizing Instruction Addresses of Legacy x86 Binary
Code. In Proceedings of the 2012 ACM Conference on Computer and Communica-
tions Security (CCS ’12). ACM, New York, NY, USA, 157–168. https://doi.org/10.
1145/2382196.2382216
[19] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen, and Zhiqiang Lin. 2012.
Securing Untrusted Code via Compiler-agnostic Binary Rewriting. In Proceedings
of the 28th Annual Computer Security Applications Conference (ACSAC ’12). ACM,
New York, NY, USA, 299–308. https://doi.org/10.1145/2420950.2420995
[20] Mingwei Zhang, Rui Qiao, Niranjan Hasabnis, R. Sekar, Mingwei Zhang, Rui
Qiao, Niranjan Hasabnis, and R. Sekar. 2014. A platform for secure static binary
instrumentation. ACM SIGPLAN Notices 49, 7 (sep 2014), 129–140. https://doi.
org/10.1145/2674025.2576208
Session 1: Binary Rewriting and TransformationFEAST'17, November 3, 2017, Dallas, TX, USA15