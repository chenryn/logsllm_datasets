64
K.M.C. Tan, K.S. Killourhy, and R.A. Maxion
traceroute. The traceroute exploit was downloaded from [8]; then it was
compiled and deployed. The traceroute exploit expects values for two argu-
ments. The ﬁrst argument identiﬁes the local platform, and the second argu-
ment is a hexadecimal number that represents the address of a speciﬁc function
in memory. This address is overwritten to point to an attacker-speciﬁed function.
The successful execution of the exploit was conﬁrmed by checking that elevated
privileges were indeed conferred.
The manifestation of the traceroute exploit was determined manually. An
inspection of the source code for the traceroute exploit as well as for the
traceroute system program, identiﬁed the precise system calls that were at-
tributable to the attack. The sequence of system calls that comprise the man-
ifestation of the attack embodied by the traceroute exploit is: brk, brk, brk,
setuid, setgid, execve. Mirroring the deployment strategy for passwd, stide
was trained on the previously collected traceroute normal data, and run with
detector-window sizes 1-15. The attack was shown to be detectable at all window
sizes, because setuid, setgid, and execve were all foreign symbols.
6 Manipulating the Manifestation; Modifying Exploits
Three vital items of knowledge have been established up to this point: the char-
acteristics of the minimal-foreign-sequence event that stide is sometimes unable
to detect; the conditions ensuring that stide does not detect such an event (the
detector-window size must be smaller than the size of the minimal foreign se-
quence); and the fact that stide is completely capable of detecting the two cho-
sen exploits when they were simply executed on the host system without any
modiﬁcations. This means that the anomaly detector is completely eﬀective at
detecting these exploits should an attacker decide to deploy them.
How can these exploits be modiﬁed so that the anomaly detector does not
sound the alarm when the modiﬁed exploits are deployed? How can an attacker
provide his or her attack(s) with every opportunity to complete successfully and
stealthily? This section shows how both exploits, guided by the detection map
established for stide, can be modiﬁed to produce manifestations (or signatures)
in the sensor data that are not visible to the detector.
6.1 Modifying passwd and traceroute
In aiming to replace the detectable anomalous manifestations of the exploits
with manifestations that are undetectable by stide, there are two points that
must be considered. Recall that each exploit embodies some goal to be attained
by the attacker, e.g., elevation of privileges.
First, because the method for achieving the goal that is embodied by each
exploit, passwd and traceroute, produces an anomalous event detectable by
stide, namely a foreign symbol, another method for achieving the same goal
must be found to replace it. Note that the goal of both exploits is the typical
one of securing an interactive shell with elevated privileges. Interestingly, the
Undermining an Anomaly-Based Intrusion Detection System
65
Table 2. The system calls that implement each of three methods that attempt to
achieve the same goal of securing an interactive root account accessible to the attacker.
Description of method
System calls that implement method
1 Changing the access
to the
/etc/passwd ﬁle in order to give the
attacker permission to modify the ﬁle
(write permission)
rights
chmod, exit
2 Changing
the
of
/etc/passwd ﬁle to the attacker
ownership
the
chown, exit
3 Opening the /etc/passwd ﬁle to append
a new user with root privileges
open, write, close, exit
new means of achieving the same goal involves changing the value of only one
variable in both exploit programs.
Second, the new method of achieving the same goal must not produce any
manifestation that is detectable by stide. Although this could mean that both
exploits are modiﬁed so that their manifestations appear normal, i.e., their man-
ifestations match sequences that already exist in the normal data, it is typically
more diﬃcult to do this than to cause the exploits to manifest as foreign se-
quences. The diﬃculty lies in the fact that the kinds of normal sequences that
can be used to eﬀect an attack may be small. This makes it more likely that
an attacker may require sequences that lie outside the normal vocabulary, i.e.,
foreign sequences.
6.2 New Means to Achieve Original Goals in Exploit Programs
In Section 5.3 it was shown that the execution of the passwd and traceroute
exploits were detectable by stide because both exploits manifested anomalously
as the foreign symbols setuid, setgid, and execve. Any attack that introduces
a foreign symbol into the sensor data that is monitored by stide, will be detected.
This is because foreign symbol manifestations lie in the visible region of stide’s
detection map. In order for the traceroute or passwd exploits to become unde-
tectable by stide, they must not produce the system calls setuid, setgid, and
execve. Instead an alternate method causing the exploits to manifest as minimal
foreign sequences is required. Only system calls that are already present in the
normal data can be the manifestation of the exploits.
For the passwd exploit, another method for achieving the same goal of secur-
ing an interactive shell with elevated privileges that does not involve the foreign
symbols setuid, setgid, and execve would be to cause the exploit program to
give the attacker permission to modify the /etc/passwd ﬁle. With such access,
the attacker can then edit the accounts and give him or herself administrative
privileges, to be activated upon his or her next login. The system calls required
66
K.M.C. Tan, K.S. Killourhy, and R.A. Maxion
to implement this method are chmod and exit. These two calls are found in the
normal data for the passwd system program.
There at least two other methods that will achieve the same goal. A second
method would be to give the attacker ownership of the /etc/passwd ﬁle, and a
third method would be to make the aﬀected system program directly edit the
/etc/passwd ﬁle to add a new administrative (root) account that is accessi-
ble to the attacker. The system calls that would implement all three methods
respectively are listed in Table 2.
For the traceroute exploit, the other method for achieving the same goal
of securing an interactive shell with elevated privileges that does not involve the
foreign symbols setuid, setgid, and execve, is to make the aﬀected system
program directly edit the /etc/passwd ﬁle to add a new administrative (root)
account that is accessible to the attacker. The system calls required to implement
this method are open, write, close, and exit. All these system calls can be
found in the normal data for the traceroute system program.
6.3 Making the Exploits Manifest as Minimal Foreign Sequences
In the previous subsection, the two exploits were made to manifest as system
calls that can be found in the normal data for the corresponding passwd and
traceroute system programs. This is still insuﬃcient to hide the manifestations
of the exploits from stide, because even though system calls that already exist in
the normal data were used to construct the new manifestation of each exploits,
the order of the system calls with respect to each other can still be foreign to the
order of system calls that typically occur in the normal data. For example, even if
chmod and exit both appear in the passwd normal data, both calls never appear
sequentially. This means that the sequence chmod, exit, is a foreign sequence
of size 2, foreign to the normal data. More precisely, this is a minimal foreign
sequence of size 2, because the sequence does not contain within it any smaller
foreign sequences or foreign symbols.
As a consequence, stide with a detector window of size 2 or larger would be
fully capable of detecting such a manifestation. In order to make the manifesta-
tion invisible to stide, it is necessary to increase the size of the minimal foreign
sequence. Increasing the size raises the chances of falling into stide’s blind spot.
Referring to Figure 1, it can be seen that the larger the size of the minimal
foreign sequence, the larger the size of the blind spot.
To increase the size of the minimal foreign sequence, the short minimal foreign
sequences that are the manifestations of both exploits (chmod, exit for the
passwd exploit, and open, write, close, and exit for the traceroute exploit)
must be padded with system calls from the normal data that would result in
larger minimal foreign sequences with common subsequences. For example, for
passwd the short minimal foreign sequence that is the manifestation of the new
method described in the previous section is chmod, exit. This is a minimal
foreign sequence of size 2. To increase this minimal foreign sequence it can be
seen that in the normal data for passwd, the system call chmod is followed by
Undermining an Anomaly-Based Intrusion Detection System
67
the sequence utime, close, munmap, and elsewhere in the normal data, munmap
is followed by exit. These two sequences
1. chmod, utime, close, munmap
2. munmap, exit
can be concatenated to create a third sequence
3. chmod, utime, close, munmap, exit.
A method of attack can be developed which manifests as this concatenated
sequence. This method is functionally equivalent to the method developed in
the previous subsection; it gives the attacker permission to modify /etc/passwd
with the chmod system call and exits with the exit system call. The three system
calls utime, close, and munmap are made in such a way that they do not alter
the state of the system.
If stide employed a detector window of size 2, and the detector window slid
over the manifestation of the exploit that is the sequence chmod, utime, close,
munmap, exit, no anomalies would result; no alarms would be generated because
the manifestation no longer contains any foreign sequences of size 2. However, if
stide employed a detector window of size 3, a single anomaly would be detected,
namely the minimal foreign sequence of size 3, close, munmap, exit, which would
result in an alarm.
The simple example given above describes the general process for creating
the larger minimal foreign sequences required to fool stide. By performing an
automated search of the normal data it is possible to ﬁnd all sequences that can
be used by an attacker as padding for the manifestation of a particular exploit.
The general process for creating larger minimal foreign sequences was automated
and used to modify both the passwd and traceroute exploits.
It is important to note that because stide only analyzes system calls and not
their arguments, it is possible to introduce system calls to increase the size of
minimal foreign sequences without aﬀecting the state of the system. Executing
system calls introduced by the attacker that are aimed at exploiting stide’s blind
spot need not cause any unintended side-eﬀects on the system because the argu-
ments for each system call is ignored. It is therefore possible to introduce system
calls that do nothing, such as reading and writing to an empty ﬁle descriptor, or
opening a ﬁle that cannot exist. This point argues for using more diverse data
streams in order to provide more eﬀective intrusion detection. Analyzing only
the system call stream may be a vulnerability in anomaly detectors.
7 Evaluating the Eﬀectiveness of Exploit Modiﬁcations
A small experiment is performed to show that the modiﬁed exploits were indeed
capable of fooling stide. As shown in the previous section, a single deployment
of a modiﬁed exploit is accompanied by a parameter that determines the size
of the minimal foreign sequence that will be the manifestation of the exploit.
Each exploit was deployed with parameter values that ranged between 2 and 7.
A minimum value of 2 was chosen, because it is the smallest size possible for a
68
K.M.C. Tan, K.S. Killourhy, and R.A. Maxion
minimal foreign sequence. The maximum value chosen was 7, because a minimal
foreign sequence of size 7 would be invisible to stide employing a detector window
of size 6. In the literature, stide is often used with a detector window of size 6 [6,
21]. 6 has been referred to as the “magic” number that has caused stide to begin
detecting anomalies in intrusive data [6,11]. Using a detector window of size 6
in this experiment serves to illustrate a case where 6 may not be the best size
to use because it will miss detecting exploits that manifest as minimal foreign
sequences of size 7 and higher.
Each of the two exploits were deployed 6 times, one for each minimal foreign
sequence size from 2 to 7. For each execution of an exploit, stide was deployed
with detector window sizes 1 to 15. 1 was chosen as the minimum value simply
because it is the smallest detector window size that the detector can be deployed
with, and 15 was chosen as the maximum arbitrarily.
7.1 Results
The x-axis for the graph in Figure 2 represents the size of the minimal foreign
sequence anomaly, and the y-axis represents the size of the detector window.
Each star marks the size of the detector window that successfully detected a
minimal foreign sequence whose corresponding size is marked on the x-axis. The
term detect for stide means that the manifestation of the exploit must have
registered as at least one sequence mismatch. Only the results for traceroute
are presented. The results for passwd are very similar and have been omitted
due to space limitations.
The graph in Figure 2 mirrors the detection map for stide, showing that the
larger the minimal foreign sequence that is the manifestation of an exploit, the
larger the detector window required to detect that exploit. Each circle marks the
intersection between the size of the minimal foreign sequence that is the mani-
festation of the exploit and the size of the detector window used by stide, namely
6. Within each circle the presence of the star indicates that the manifestation of
the exploit was detected by stide with a window size of 6.
Each successive circle along the x-axis at y = 6 depicts a shift in the man-
ifestation of the exploit in terms of the increasing size of the minimal foreign
sequence. These shifts are due to having modiﬁed the exploit. The arrows indi-
cate a succession of modiﬁcations. For example, without any modiﬁcation the
exploit will naturally manifest as a foreign symbol in the data stream; this is
represented by the circle at x = 1, y = 6. The ﬁrst modiﬁcation of the exploit re-
sulted in a minimal foreign sequence of size 2; this is represented by the circle at
x = 2, y = 6 pointed to by the arrow from the circle at x = 1, y = 6. The second
modiﬁcation yields a size-3 foreign sequence, and so forth. There is no circle at
x = 7 because it was impossible to modify the exploit to shift its manifestation
to a size-7 minimal foreign sequence, given the normal data for traceroute.
To summarize, if stide were deployed with a detector window of size 6, then it
is possible to modify the traceroute exploit incrementally, so that it manifests
as successively larger minimal foreign sequences, until a size is reached (size 7)
at which the manifestation falls out of stide’s visible detection range, and into its
Undermining an Anomaly-Based Intrusion Detection System