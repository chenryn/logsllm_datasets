title:Fine-Grained Information Flow Analysis and Enforcement in a Java Virtual
Machine
author:Deepak Chandra and
Michael Franz
23rd Annual Computer Security Applications Conference
23rd Annual Computer Security Applications Conference
Fine-Grained Information Flow Analysis and Enforcement
in a Java Virtual Machine
Deepak Chandra and Michael Franz
University of California, Irvine
Abstract
We have implemented an information ﬂow framework for
the Java Virtual Machine that combines static and dynamic
techniques to capture not only explicit ﬂows, but also im-
plicit ones resulting from control ﬂow. Unlike other ap-
proaches that freeze policies at time of compilation, our
system truly separates policy and enforcement mechanism
and thereby permits policy changes even while a program is
running. Ahead of execution, we run a static analysis that
annotates an executable with information-ﬂow information.
During execution, we then use the annotations to safely up-
date the labels of variables that lie in alternative paths of
execution while enforcing the policy currently in place. Our
framework doesn’t require access to source code and is fully
backward-compatible with existing Java class ﬁles. Prelim-
inary benchmark results suggest that the run-time overhead
of information ﬂow techniques such as ours is well within
acceptable range for many application domains.
1. Introduction
The traditional deﬁnition of a Trojan horse is a program
that exploits read access to a secret and simultaneous write
access to a public channel to leak the secret “downwards”.
In that sense, your network-connected home PC may have
the ultimate Trojan horse installed on it already—the web
browser. You have to trust your browser not to leak your
banking secrets to the kids’ web space provider when you
check up on their online activities, but you have no way of
knowing whether that trust is warranted. The existence of
executable content (such as Java and JavaScript) within web
pages only exacerbates the problem, because the function-
ality of the browser can be extended dynamically. Unfortu-
nately, there already have been incidents in which one web
site has exploited an error in the browser to steal secrets des-
tined for an unrelated second web site viewed in the same
browser.
At the server end of things, the situation is possibly
even more serious. As more and more services (bank-
ing, e-government, etc.) are migrating to the Internet, the
providers of these services are constructing web front-ends
that may contain exploitable errors. A common mistake is
relying on a script on the client’s web browser to validate
user input, when an attacker can actually send maliciously
crafted input to the server directly (using the http proto-
col).
The original emphasis in the Java infrastructure has been
on protecting the host system from malicious actions of
downloaded Java programs. This protection is provided by
way of type-safety and memory safety and by maintaining
the same visibility and data access abstractions in the vir-
tual machine as they existed in the Java program source text.
Much less emphasis has so far been placed on the integrity
and conﬁdentiality of the information handled within the
virtual machine. In particular, Java has discretionary access
controls rather than mandatory ones—once that access to
information has been granted, the holder of that informa-
tion can propagate it completely unchecked. The aim of our
research is to improve the safety of Java-based server front-
ends and client-side browser extensions, by providing ﬁne-
grained and ﬂexible information-ﬂow controls while staying
fully backward-compatible with the Java bytecode format.
We retroﬁt information-ﬂow controls on existing Java byte-
code programs without requiring recompilation or indeed
any access to source code.
Our system provides completely dynamic policies that
can be changed even while a program is already running.
This is in contrast to previous approaches such as My-
ers’ Jﬂow and Jif [30, 31] that extend the Java language
with statically checkable information-ﬂow annotations. At
compilation time, the information-ﬂow policy then becomes
“frozen”. In Erlingsson and Schneider’s approach [16, 17],
a security automaton [33] is in-lined into each program prior
to execution, which again “freezes” the security policy; fur-
thermore, this solution is limited by what is decidable by a
security automaton. In earlier work by Haldar et al. [22, 21],
a label is added to every object within the Java Virtual Ma-
chine (JVM). This label is then used for purposes such as
taint propagation, but the system does not consider infor-
mation ﬂows that are carried by control ﬂow and hence can-
1063-9527/07 $25.00 © 2007 IEEE
1063-9527/07 $25.00 © 2007 IEEE
DOI 10.1109/ACSAC.2007.37
DOI 10.1109/ACSAC.2007.37
463
463
pub1 = true
pub2 = true
if (secret)
pub1 = false
pub2 = false
pub1
pub2
Figure 1. Implicit information ﬂow from secret
to pub1 and pub2.
not be used to implement a full-ﬂedged multi-level security
(MLS) scheme [15].
The work presented here provides information labeling
at a ﬁner granularity than Haldar et al. and additionally also
correctly handles information ﬂow through control ﬂow. It
is thereby in the good company of pioneering previous work
on implementing MLS using virtual machines [32, 39, 25],
but rather than doing so at the level of a hardware-close vir-
tual machine monitor, our implementation is situated at the
richly typed level of the JVM. Our implementation is note-
worthy in that it combines static (ahead of execution) anal-
ysis techniques and dynamic (concurrent with execution)
enforcement of security policies, and in not requiring any
access to source code.
The remainder of this paper is organized as follows.
First, we brieﬂy present the basics of information ﬂow and
explain what problem we are solving (Section 2). Then,
we present our hybrid technique that combines static analy-
sis with dynamic enforcement (Section 3). This makes our
technique less conservative than current information ﬂow
analysis techniques while it is simultaneously safe, fast, and
ﬂexible. Section 4 presents benchmark results for our im-
plemented prototype. Section 5 presents related work. Fi-
nally, we conclude in Section 6.
2. Problem Statement
We say that information ﬂows from A to B when B can
observe changes to its environment that depend on the value
of A. The most straightforward way in which information
can ﬂow in a program is through an assignment. This is
also called an explicit ﬂow. For example in the statement
464464
a = b, there is ﬂow of information from b to a as one can
know the value of b by looking at the value of a. Another
explicit ﬂow, albeit with some loss of information, would
be in c = a + b. Here information ﬂows from both a and b
to c and some information is lost due to the arithmetic op-
eration. All assignment statements lhs = expression , in-
cluding parameter and return value passing, lead to a ﬂow
of information from all operands in expression to lhs.
Information can also be propagated through the control
ﬂow of a program. For example in Figure 1, there is no
direct assignment from secret
to either of the two other
variables, but still at the end of the execution of the code
fragment, one can infer what the value of secret was. Infor-
mation can ﬂow implicitly in two ways. By following the
branch, we can infer what the branch-controlling variable
was. In Figure 1, after observing that the value of pub1 has
changed, one can infer that secret is true. The traditional
solution to this problem is by attaching a security label to
the program counter as well, and coercing the labels of all
assignment targets to the least upper bound of their current
label and that of the program counter. Hence, in our exam-
ple, pub1 would become a secret as well because it is being
modiﬁed in a program region guarded by a secret control
variable.
More subtly, observing the non-execution of a branch
can leak information about the branch condition as well.
For example, by observing that the value of pub2 has not
changed when control ﬂow re-joins, one can infer that
secret is false. Hence, in this example, observing just one
of the variables pub1 or pub2 would be sufﬁcient to infer the
state of secret , even though each of the two control ﬂow al-
ternatives modiﬁes only one of the variables.
This is exactly the problem that makes it difﬁcult to con-
trol information ﬂow by strictly dynamic means, i.e., by fol-
lowing only the path through the program as it is actually
taken. In order to inhibit ﬂows that result from assignments
in alternative branches, one needs to consider all alternative
branches simultaneously. We solve this problem by using
a combination of static analysis and dynamic techniques to
handle control-dependent information ﬂows. We perform
static analyses ahead of actual execution. These analyses
result in annotations that enable the virtual machine to later
insert compensating tag instructions into alternative paths
whenever a variable is modiﬁed along just one path. The
analysis also determines and annotates the earliest point that
the program counter’s label can be lowered again after a
control ﬂow join.
Consider the example from Figure 1 again as we have
presented it in Figure 2. Here, branching on secret raises
the label of the program counter to the least upper bound of
its current value and that of secret . Every variable that is
modiﬁed has its own label coerced to the least upper bound
of its current label and the label of the program counter. For
pc label = “public”
pub1 = true
pub2 = true
if (secret)
pc label = “secret”
pc label = “secret”
pub1 = false
raise(pub2)
annotations
pub2 = false
raise(pub1)
pc label = “public”
pub1
pub2
Figure 2. Hybrid analysis—ahead of execution, information is gathered that later permits to update
labels as if all branching alternatives had been considered in parallel. Additionally, the analysis
identiﬁes and annotates the earliest point at which the program counter can be lowered again.
example, the assignment to the non-secret variable pub1 in
the left side of the branch will raise the label of pub1 to that
of secret because the program counter is secret, preventing
a leak of the contents of variable secret via pub1. In spite
of the coercion of pub1’s label, we would still be able to
infer the value of secret after the control ﬂow re-joins at
the end of the if statement by observing the non-secret vari-
able pub2. This is prevented in our implementation by au-
tomatically inserting compensation code, so that when any
variable is modiﬁed in any branch, its label is coerced in
all branches. When the control ﬂow re-joins, the program
counter’s label can be restored to the value it had before the
branch. Note that pub1 and pub2 remain classiﬁed past this
control-ﬂow join. They will be declassiﬁed only when the
next public value is written into them, overwriting whatever
secret may still be contained in them.
Unfortunately, the situation in real-life Java programs is
hardly ever as simple as in our example in Figure 2. In Fig-
ure 2, we know exactly which variable in the alternative
control path is affected, and hence we can insert a com-
pensating operation that raises the label of that variable.
However, in typical Java programs we often don’t know ex-
actly what variables might be affected in alternative control
paths, but have to deal with a congruence class of poten-
tially affected variables. Any member of this congruence
class could be affected—so we have to coerce the labels of
all of them in order to regulate information ﬂows.
For a better illustration of this situation, consider Fig-
ure 3. While following the actual ﬂow of control, we know
exactly which object is modiﬁed and hence needs to be co-
erced to the same label as secret . However, without actu-
ally executing the alternative branch, we cannot be so sure
about what object might have been affected in that other
program part. In many cases, we also cannot just execute
the alternative branch to ﬁnd out, because that might intro-
duce subtle side effects. There might also be a combinato-
rial explosion if we attempted to execute all possible paths
always. So if we want to safely exclude illegal information
ﬂows, we have to make a conservative assumption and raise
the label of all variables that could possibly be affected. In
this case, that means raising the label of the g ﬁeld in all
objects that are of class foo.
In the remainder of this paper, we report on our im-
plementation that does just that. As with almost all static
analysis techniques, a compromise has to be made between
the precision of the analysis and its cost. For example, a
less precise analysis in our example of Figure 3 might have
changed the label on all ﬁelds of all foo objects instead of
discriminating between the f and g ﬁelds. A more precise
analysis might analyze all variable bindings outside of the
method and determine that p and q actually point to the
same object always. If p = q always holds inside of m, then
in each alternative path, the congruence class of possibly af-
fected variables contains only a single element. Effectively,
this re-creates the situation of Figure 2.
Our analysis does not cover covert channels [26] in any
way, nor does it try to inhibit them. For example, one might
perform zero or one million iterations of a loop depending
465465
class foo {
    boolean f, g;
}
pc label = “secret”
p.f = false
raise( *.g )
method m(foo p, foo q)
method entry
pc label = “public”
p.f = true
q.g = true
if (secret)
pc label = “secret”
q.g = false
raise( *.f )
pc label = “public”
p.f
p.g
q.f
q.g
Figure 3. In this example, we no longer know exactly which variable is affected in the alternative
branch, so we have to be conservative and coerce a whole congruence class of storage locations.
Note that p and q may even point to the same object here.
on the value of a secret variable, and then infer the secret
value based on how long the computation took. Such con-