### 通过 `docker commit` 创建镜像

首先，我们使用 `apt-get install sqlite3` 命令在容器中安装 SQLite3。

```bash
root@0ddf83b837fe:/# apt-get install sqlite3
```

然后，我们在根目录下创建一个名为 `hellodocker` 的文件，并写入一些文本：

```bash
root@0ddf83b837fe:/# echo "test docker commit" >> hellodocker
```

完成修改后，使用 `exit` 命令安全退出容器：

```bash
root@0ddf83b837fe:/# exit
```

此时，容器的 ID 是 `0ddf83b837fe`。接下来，我们将使用 `docker commit` 命令将容器中的所有修改提交到本地库中，形成一个新的镜像：

```bash
# docker commit -m="Message" --author="XIXIHE" 0ddf83b837fe xixihe/sqlite3:v1
a0345b9244e19f03c3456b29e488b653a9cd7b9b1686e4d60a04ecb802247c95
```

成功执行 `commit` 命令后，会返回一个长字符串，这个字符串就是新创建镜像的完整 ID。

- `0ddf83b837fe`：这是刚才进行修改的容器 ID。
- `-m` 参数用于描述此次创建镜像的信息。
- `--author` 参数用于指定作者信息。
- `xixihe` 和 `sqlite3` 分别是仓库名和镜像名。
- `v1` 是标签（tag）名。

我们可以通过以下命令查看新创建的镜像：

```bash
# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
xixihe/sqlite3      v1                  a0345b9244e1        About a minute ago   220.9 MB
```

接下来，我们使用刚创建的镜像来构建并运行一个新的容器，以验证所做的修改：

```bash
# docker run -t -i xixihe/sqlite3:v1
root@ce066126f750:/# sqlite3 -version
3.8.2 2013-12-06 14:53:30 27392118af4c38c5203a04b8013e1afdb1cebd0d
root@ce066126f750:/# cat hellodocker
test docker commit
```

从以上输出可以看出，SQLite3 已经成功安装，并且根目录下的 `hellodocker` 文件也存在。

### 使用 Dockerfile 创建镜像

与 `docker commit` 方法相比，更推荐使用 Dockerfile 来构建镜像。Dockerfile 将所有需要对镜像进行的操作写在一个文件中，然后使用 `docker build` 命令从该文件创建镜像。这种方法使镜像的创建过程更加透明和独立，并且可以重复执行。

下面是一个 Dockerfile 的示例：

```dockerfile
# Version: 1.0.1
FROM ubuntu:latest
MAINTAINER xxh "PI:EMAIL"

# 设置 root 用户为后续命令的执行者
USER root

# 执行操作
RUN apt-get update
RUN apt-get install -y nginx

# 使用 && 拼接命令
RUN touch test.txt && echo "abc" >> abc.txt

# 对外暴露端口
EXPOSE 80 8080 1038

# 添加文件
ADD abc.txt /opt/

# 添加文件夹
ADD /webapp /opt/webapp

# 添加网络文件
ADD https://www.baidu.com/img/bd_logo1.png /opt/

# 设置环境变量
ENV WEBAPP_PORT=9090

# 设置工作目录
WORKDIR /opt/

# 设置启动命令
ENTRYPOINT ["ls"]

# 设置启动参数
CMD ["-a", "-l"]

# 设置卷
VOLUME ["/data", "/var/www"]

# 设置子镜像的触发操作
ONBUILD ADD . /app/src
ONBUILD RUN echo "on build excuted" >> onbuild.txt
```

#### Dockerfile 命令说明

- **FROM**：指定基础镜像。除了注释外，Dockerfile 必须以 `FROM` 指令开始。可以通过多个 `FROM` 指令在同一文件中创建多个镜像。
- **MAINTAINER**：声明镜像的作者信息。此命令不是必需的。
- **RUN**：用于修改镜像的命令，常用来安装库、程序及配置。每条 `RUN` 指令执行完毕后，会在当前镜像上创建一个新的层。`RUN` 有两种形式：
  ```dockerfile
  RUN apt-get update
  RUN ["apt-get", "update"]
  ```
  第一种形式是在 `/bin/sh` 环境中执行命令，第二种形式是直接使用系统调用 `exec` 执行。可以使用 `&&` 符号将多条命令连接在同一条 `RUN` 语句中执行：
  ```dockerfile
  RUN apt-get update && apt-get install nginx
  ```

- **EXPOSE**：指明容器内进程对外开放的端口。运行容器时，可以通过 `-P` 参数将 `EXPOSE` 中指定的端口映射到主机上的随机端口，也可以通过 `-p` 参数手动指定端口映射。

- **ADD**：向新镜像中添加文件或文件夹。源文件可以是主机文件、网络文件或文件夹路径。如果是压缩文件，Docker 会自动解压。

- **VOLUME**：在镜像中创建挂载点，允许多个容器共享数据。即使其中一个容器停止，挂载点仍然可访问，直到所有引用消失才会删除。

- **WORKDIR**：设置后续指令的工作目录。可以在 Dockerfile 中多次指定 `WORKDIR`，最后一条指令所指的目录将成为容器运行时的当前工作目录。

- **ENV**：设置环境变量。运行容器时，可以通过 `-e` 参数修改或添加新的环境变量。

- **CMD**：设置容器启动时默认运行的命令。有以下两种形式：
  ```dockerfile
  CMD ls -l -a
  CMD ["ls", "-l", "-a"]
  ```
  运行容器时，可以通过指定新的命令覆盖 `CMD` 中的命令。

- **ENTRYPOINT**：类似于 `CMD`，用于指定容器启动时默认运行的命令。不同之处在于，运行容器时添加的参数对于 `ENTRYPOINT` 是拼接，而对于 `CMD` 则是覆盖。可以通过 `--entrypoint` 参数覆盖 Dockerfile 中的 `ENTRYPOINT`。

- **USER**：指定运行容器及其后续指令的用户或 UID。

- **ONBUILD**：触发器指令。构建镜像时，Docker 会将 `ONBUILD` 指令保存到镜像元数据中，这些命令在当前镜像的构建过程中不会执行。只有当新的镜像使用 `FROM` 指令指定父镜像为当前镜像时，才会触发执行。

#### 构建镜像

使用 `docker build` 命令构建镜像：

```bash
# docker build -t xixihe/test:v1 .
```

构建过程中，Docker 会逐层执行 Dockerfile 中的指令，并生成相应的中间镜像。最终生成的镜像 ID 会显示在终端输出中。

通过上述方法，我们可以创建出结构清晰、易于维护的 Docker 镜像。