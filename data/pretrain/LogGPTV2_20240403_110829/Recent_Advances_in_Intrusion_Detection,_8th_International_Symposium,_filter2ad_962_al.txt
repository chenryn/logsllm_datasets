on computer systems and networks. However, the anomaly-based IDSes that have
been proposed in the recent years present some drawbacks, e.g., the necessity to
explicitly deﬁne a behaviour reference model. In this paper, we propose a new ap-
proach to anomaly detection, based on the design diversity, a technique from the
dependability ﬁeld that has been widely ignored in the intrusion detection area.
The main advantage is that it provides an implicit, and complete reference model,
instead of the explicit model usually required. For practical reasons, we actually
use Components-off-the-shelf (COTS) diversity, and discuss on the impact of this
choice. We present an architecture using COTS-diversity, and then apply it to web
servers. We also provide experimental results that conﬁrm the expected proper-
ties of the built IDS, and compare them with other IDSes.
Keywords: Intrusion detection, anomaly detection, design diversity, COTS di-
versity.
1 Introduction
The security of information systems is nowadays an essential issue. It is however difﬁ-
cult to ensure that a security policy is correctly enforced in an information system. So
intrusion-detection systems are needed to detect violations of the security policy.
Two approaches have been mainly used in the ﬁeld of intrusion detection: misuse
detection and anomaly detection.
Misuse detection relies on the comparison of observed behaviours to pattern signa-
tures of known attacks or intrusions. The systems based on this approach use a signature
database. While it allows to detect accurately known attacks, the signatures are often
generalised in order to detect the many variations of a given known attack. This leads
to the increase of false positives (i.e., false alarms), as benign events can match a too
generic attack signature. Systems based on the misuse approach are moreover unable to
detect new and/or unknown intrusions that are not already present in the signature data-
base. To detect new attacks, it is mandatory to keep the signature database up to date,
which is a tremendous task. It may even be humanly impossible if the attack spreads
over the Internet in minutes, such as recent worms did [1, 2].
Anomaly detection relies on the comparison of observed behaviours with a previ-
ously established “normal” behaviour. Systems using this approach raise an alert when
A. Valdes and D. Zamboni (Eds.): RAID 2005, LNCS 3858, pp. 43–62, 2006.
c(cid:3) Springer-Verlag Berlin Heidelberg 2006
44
E. Totel, F. Majorczyk, and L. Mé
an observed behaviour is sufﬁciently different from the normal behaviour. It allows to
detect new or unknown attacks, if these attacks imply an abnormal use of the system,
which is generally the case. Normal behaviours are generally explicitly deﬁned. This
raises a problem: the model may be incomplete or incorrect, leading to false negatives
(missing of attacks) or to false positives (false alarms).
The approach presented in this paper provides a way to avoid to build the behaviour
model explicitly, while allowing the built IDS to detect new or unknown attacks. It
is based on a dependability technique: N-version programming. Instead of developing
speciﬁcally each variant like in N-version programming, we propose the use of COTS
components, as it is often done nowadays [3]. This reduces the cost of the architecture,
and thus appears to us as the only viable approach, from an economic point of view.
The remaining of the paper is organised as follows. Section 2 presents related works.
Section 3 presents the architecture we propose. Section 4 presents the results obtained
when applying our proposition to detect attacks against web servers. Finally, Section 5
concludes the paper and gives some tracks for future work.
2 Related Work
In this paper, in order to detect intrusions, we suggest to apply the design diversity
technique. This technique has been widely used in highly dependable systems in order
to detect or tolerate design faults. Bringing this technique to the security ﬁeld requires
to understand the strong link which exists between the security and the dependability
ﬁelds. This work has been carried out in the MAFTIA project [4] that is presented in
Section 2.1. Two projects have goals close to ours and use design diversity relatively to
intrusion handling : the DIT [5] and HACQIT [6] projects intend to tolerate intrusions.
These two projects are presented respectively in Sections 2.2 and 2.3. Finally, intrusion
detection by design diversity can be viewed as a kind of speciﬁcation-based detection.
The Section 2.4 compares the classical speciﬁcation-based approach to our.
2.1 MAFTIA Project
The general objective of the MAFTIA (Malicious and Accidental Fault Tolerance for
Internet Applications) project is to systematically investigate the tolerance paradigm
to construct large-scale dependable distributed applications. This project developed a
set of intrusion tolerance concepts, clearly mapped into the classical dependability con-
cepts. This is done ﬁrst by deﬁning the AVI (Attack - Vulnerability - Intrusion) compos-
ite fault model [7]. A vulnerability is an internal fault in a computing or communication
system that can be exploited with malicious intention. An attack is a malicious external
intentional fault attempted at a computing or communication system, with the intent of
exploiting a vulnerability in that system. An intrusion is a fault resulting from a success-
ful attack on a vulnerability. An intrusion can cause an error which may lead to a secu-
rity failure of the computing or communication system. Intrusion detection is deﬁned
as the set of practices and mechanisms used toward detecting errors that may lead to
security failures, and/or diagnosing attacks. Several classical IDSes (DeamonWatcher,
Snort, WebIDS) are used in combination, and a tool has been developed to evaluate sev-
eral combination forms. Some alert correlation techniques are also proposed. MAFTIA
COTS Diversity Based Intrusion Detection and Application to Web Servers
45
uses the design diversity in order to provide intrusion tolerance properties, and not to
perform intrusion detection.
In this paper, our work is based on the concepts that have been proposed by this
project. In accordance with the MAFTIA results, we agree that intrusion tolerance and
intrusion detection are two tightly linked topics. Thus, we propose in this paper an
architecture that will present both tolerance and detection properties. In our work, the
intrusion detection process is not implemented through the use of classical IDSes or
through the combination of classical IDSes, but through the comparison of the output
of diversiﬁed servers (N-version programming scheme).
2.2 DIT Project
DIT (Dependable Intrusion Tolerance) is a project that proposes a general architecture
for intrusion-tolerant enterprise systems and the implementation of an intrusion-tolerant
web server as a speciﬁc instance. The architecture uses some of the solutions described
by MAFTIA, particularly redundancy and diversity, to insure intrusion tolerance. The
architecture comprises functionally redundant COTS servers running on diverse op-
erating systems and platforms, hardened intrusion-tolerant proxies that mediate client
requests and verify the behaviour of servers and other proxies, and monitoring and alert
management components based on the EMERALD intrusion-detection framework [8].
The architecture was next extended to consider the dynamic content issue and the prob-
lems related to on-line updating.
There are strong similarities between the architecture proposed in DIT and the one
described in this paper. However, the intrusion detection techniques that are proposed
in the two approaches are very different. In DIT, intrusion detection does not rely on the
N-version programming scheme, but on the use of some components like host monitors
and network intrusion detection systems. In our approach, the intrusion detection facil-
ities are provided by the properties carried out by the intrusion tolerance architecture.
We thus do not require the presence of additional intrusion detection systems.
2.3 HACQIT Project
HACQIT (Hierarchical Adaptive Control for QoS Intrusion Tolerance) is a project that
aims to provide intrusion tolerance for web servers. The architecture is composed by
two COTS web servers: an IIS server running on Windows and an Apache server run-
ning on Linux. One of the servers is declared as the primary and the other one as the
backup server. Only the primary server is connected to users. Another computer, the
Out-Of-Band (OOB) computer, is in charge of forwarding each client request from the
primary to the backup server, and of receiving the responses of each server. Then, it
compares the responses given by each server. The comparison is based on the status
code of the HTTP response. Three cases are studied:
– The ﬁrst combination is 2XX/4XX: in this case, one of the server responded with
success while the other responded with client error. The compromised server is
identiﬁed as the server that returns a 2XX status code, and they consider that an
attack on conﬁdentiality has been successful.
46
E. Totel, F. Majorczyk, and L. Mé
– The second combination is 2XX/3XX: this indicates that one web server sent back
different content than the other, which responded with redirection. An attack against
the integrity of the server that returns the 2XX status code (data items are not
cached) is thus detected, while the other server returns information in the cache
(status code 3XX). This difference is probably not due to the last request, and can
be the consequence of a previous ﬁle server modiﬁcation.
– The last combination is when one of the server did not respond to the request while
the other sent an arbitrary response.
This detection algorithm is quite simple. The detection of the faulty variant suppose,
for the ﬁrst two cases, that the server which sent a status code 200 was attacked, and for
the last case, that the server which did not send a response was attacked. In addition,
host monitors, application monitors, a network intrusion detection system (Snort) and
an integrity tool (Tripwire) are also used to detect intrusions.
This project is the only one we know that uses, as we do, the design diversity to en-
force intrusion detection. Nevertheless, the HACQIT project uses a master-slave scheme
for the diversiﬁed services and the detection algorithm appears to us as too simple. This
algorithm leans on assumptions that may be false (e.g., assumptions on the combina-
tion of status codes), and, contrarily to our algorithm (see Section 4.1) do not take the
body of the HTTP response into account. We use 3 hosts for the diversiﬁed services
(see Section 3.3) and uses a comparison algorithm to detect the faulty server. We do
not use additional IDSes, as HACQIT does. Finally, to our best knowledge, there is no
publication on experimental results obtained with the HACQIT architecture.
2.4 Speciﬁcation Based Intrusion Detection
To overcome the problems inherent to traditional misuse and statistical anomaly detec-
tion speciﬁcation-based detection has been proposed [9, 10]. Instead of building upon
description of known attacks, means to enforce expected program behaviour are pro-
vided in the form of behavior speciﬁcation languages and sets of speciﬁcations for
critical programs.
While this approach has proved to be ﬂexible and effective, it has the disadvantage
of requiring internal knowledge of the monitored program behaviour. This may not be
a problem in the case of well-documented software with source code available, or even
in the case of “closed-source” but simple programs, but dealing with large and complex
systems is difﬁcult. In contrast, our proposed approach requires no prior knowledge
of expected behaviour, as the behavior has not to be explicitly deﬁned. It is actually
implicitly deﬁned, each variant being a model for the other variants.
3 Intrusion Detection by Design Diversity
The design diversity method is issued from the dependability domain and aims at de-
tecting and tolerating faults. In this paper, we focus on a particular design diversity
approach: the N-version programming. First, we present the design diversity and par-
ticularly the N-version programming approach. Then we focus on the issues implied by
the use of COTS components in a N-version system. Then we detail the architecture we
propose.
COTS Diversity Based Intrusion Detection and Application to Web Servers
47
3.1 Design Diversity Principles
Design diversity is applicable to all elements of an information system: hardware, soft-
ware, communication links, etc. The goal of design diversity is to greatly reduce the
probability of common-mode failure in the different versions by producing indepen-
dent program faults.
Design diversity is implemented by performing a function in two or more elements
and then executing a decision or a comparison algorithm on the different results [11].
There are mainly three software design diversity techniques: recovery blocks [12];
N-self checking programming [13]; N-version programming [14]. In our case, as we
want to use COTS, the technique we use must be the N-version programming, the other
ones being non applicable by deﬁnition (recovery blocks) or due to complexity reasons
(N-self checking programming).
N-version programming is deﬁned as the independent generation of N ≥ 2 software
modules called “versions”, from the same initial speciﬁcation. “Independent genera-
tion” refers to the programming effort by individual or groups that do not interact with
each other during the programming process. The speciﬁcation of the N versions must
include the data to be used by the comparison algorithm and when this algorithm must
be applied.
N-version systems can be used to tolerate faults and to detect errors. If we take for
granted that the probability of common-mode failure is zero, it is possible to detect
which version have been faulty in a N-version system that uses at least three versions,
as, under this hypothesis, only one fault can be activated in only one version of the
N-version system.
Some studies have shown that N-version programming provides a high coverage of
error detection [15]. In the context of intrusion detection, it means that we should have
very few false negatives.
3.2 COTS-Based Diversity
Design diversity is a very expensive approach, as the same software has to be developed
several times, by several teams. However, many of the services available via Internet
(e.g., Web servers, FTP servers, ...) are already implemented as COTS. Moreover, they
are available on a wide range of operating systems. We have here a “natural” diversity
of these services, as they offer the same functionalities. That is why we aim at using a
COTS-based diversity.
Unfortunately, albeit two COTS implementing the same service should theoretically
follow the same speciﬁcation, there is no proof that it is the case. Actually, it is only
true for the COTS user interfaces, that are explicitly provided, for instance by some
international standard. The comparison algorithm can obviously only be applied on the
outputs that are deﬁned by the common speciﬁcation, and not on other outputs that may
be deﬁned by a COTS speciﬁc speciﬁcation part.
Moreover, the common speciﬁcation of the COTS neither precise what are the data
to be compared, nor when it has to be compared. Thus, a choice has to be made about
that two points. This choice can have an heavy impact on the number of differences that
will be detected, either from a false positive or false negative point of view.
48
E. Totel, F. Majorczyk, and L. Mé
l
l
a
w
e
r
i
F
COTS
Service 1
COTS
Service 2
COTS
Service 3
COTS server 1
COTS server 2
COTS server 3
Service Proxy
Service IDS
Fig. 1. General architecture
3.3 An Intrusion Detection Architecture Based on COTS Diversity
The architecture proposed, shown on Figure 1, is clearly inspired by the classical ar-
chitecture of N-version programming. It is composed of three components: a proxy, an
IDS, and a set of servers. We ﬁrst describe each of these elements. Then, we discuss the
pros and cons of the proposed architecture.
Description of the architecture. The role of the proxy is to handle the client requests.
It forwards the request from the client to the COTS servers and then forwards the re-
sponse from the IDS to the client. It ensures that the COTS servers receive the same
requests, in order to synchronise their states. It is the sole part of the architecture acces-
sible directly to the clients but it is simple enough to be considered as secure.
The IDS is in charge of comparing the response from the COTS servers. If it detects
some differences, it raises an alarm and it informs the proxy of the response that has
been elected by a voting algorithm. This algorithm is in charge of choosing which re-
sponse must be sent back to the client. Section 4.1 gives an example in the case of web
servers.
A set of COTS servers constitutes the core of the architecture: they provide the ser-
vice requested by the client. These servers offer the same services but they are diverse
in terms of application software, operating systems and hardware. This aims to reduce
the probability of a common-mode failure as in the N-version programming: in the con-
text of our studies, it aims at ensuring the vulnerabilities are decorrelated between the
servers. Thus, we can make the assumption that an intrusion occurs in only one COTS
server at a time. In this case, because the other COTS servers are not affected by the
vulnerability, the architecture allows to detect the intrusion and to tolerate it. The ref-
erence [16] demonstrates that there are very few common mode failures in a pool of
COTS database servers. Moreover, a study of the vulnerabilities of IIS and Apache [17]
COTS Diversity Based Intrusion Detection and Application to Web Servers
49
proves the same property. This shows that our assumption can be considered as true at
least in these two cases.
The choice of a three COTS servers architecture shown on Figure 1 is dictated by
several requirements: ﬁrst, it allows to tolerate one intrusion on one server without
modifying the security properties of the whole architecture. Secondly, it provides a way
to identify the failed server with a simple comparison algorithm: this would not have
been possible on a two-version architecture without additional mechanisms (e.g., server
diagnostic). Once an intrusion has occurred, this architecture with three COTS servers
cannot tolerate another intrusion before the reconﬁguration of the server that have been
compromised. It is of course possible to use more than three servers in order to tolerate
more intrusions before it is necessary to reconﬁgure the compromised servers. It must be
noted that the reconﬁguration can be made periodically or when an intrusion is detected.
It is certainly better to combine the two techniques, as the IDS can miss the detection
of some kinds of intrusion.
Taxonomy of Detected Differences. The purpose of the N-version programming is to
compare the output of several programs: a difference detection is the consequence of
a design difference. As these programs have the same speciﬁcation, this design differ-
ence can be thus recognized as a consequence of a design fault in the variant whose
output differs from those of the other variants. The discussion about COTS diversity
that has been conducted in Section 3.2 explained that this assumption on the speciﬁca-
tion uniformity must be considered as false in the case of COTS. A COTS speciﬁcation
is composed of both a common part and a speciﬁc part that differs from other variants
speciﬁc parts.
Thus, the output differences that are detected are the results (see Figure 2):
– either of design differences that are due to differences in the speciﬁc parts of the
speciﬁcations. These design differences are not necessarily (but can be) design
faults;
– or, design differences that are due to design faults in the part of the program covered
by the common speciﬁcation.
In our approach we expect to detect intrusions. Thus, we intend to detect differences
that are in fact the consequences of the exploit of vulnerabilities. These vulnerabili-
ties are design faults, and can be part of any of the two classes that have been listed
above. However, the vulnerabilities can be characterized by their consequence on the
system: their activation leads to a violation of the system security policy (i.e., the in-
tegrity, availability or conﬁdentiality properties of the system). This means that the set
of design faults detected by the comparison algorithm is the union of two sets of faults:
the vulnerabilities that permit to violate the security policy on one side, and the classi-
cal design faults that do not break the security policy on another side. Thus, albeit it is
impossible to detect if differences are due to design faults or speciﬁcation differences,
it is possible to know if these differences are due to the exploit of vulnerabilities or not.
However, we must point out here that this cannot be directly achieved automatically
by the comparison algorithm without the help of additional diagnosis (through human
expertise, use of other IDSes, etc.).
50
E. Totel, F. Majorczyk, and L. Mé
COTS 1
Specification
Common
Specification
COTS 2
Specification