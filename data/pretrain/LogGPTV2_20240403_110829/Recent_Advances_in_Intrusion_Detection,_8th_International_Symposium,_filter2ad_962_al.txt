### Anomaly-Based Intrusion Detection Systems and Design Diversity

Intrusion detection systems (IDS) play a crucial role in securing computer systems and networks. However, recent anomaly-based IDS proposals have some drawbacks, such as the need to explicitly define a behavior reference model. This paper introduces a new approach to anomaly detection based on design diversity, a technique from the dependability field that has been largely overlooked in intrusion detection. The primary advantage of this approach is that it provides an implicit and comprehensive reference model, eliminating the need for an explicit model. For practical reasons, we use Components-off-the-shelf (COTS) diversity and discuss its implications. We present an architecture that leverages COTS diversity and apply it to web servers. Experimental results confirm the expected properties of the proposed IDS and compare them with other IDS approaches.

**Keywords:** Intrusion detection, anomaly detection, design diversity, COTS diversity.

### 1. Introduction

The security of information systems is a critical concern today. Ensuring that a security policy is correctly enforced in an information system is challenging, making intrusion detection systems (IDS) essential for detecting violations of the security policy.

Two main approaches are used in intrusion detection: misuse detection and anomaly detection.

- **Misuse Detection:** This approach compares observed behaviors to pattern signatures of known attacks or intrusions. While it accurately detects known attacks, generalizing signatures to cover variations can lead to false positives. Misuse detection systems also cannot detect new or unknown intrusions unless their signature database is continuously updated, which is a significant challenge.

- **Anomaly Detection:** This approach compares observed behaviors to a previously established "normal" behavior. It can detect new or unknown attacks if these attacks result in abnormal system usage. However, explicitly defining normal behaviors can be problematic, leading to false negatives or false positives.

The approach presented in this paper avoids the need to build an explicit behavior model while allowing the IDS to detect new or unknown attacks. It is based on N-version programming, a dependability technique. Instead of developing specific variants, we propose using COTS components, which reduces costs and makes the approach economically viable.

The remainder of the paper is organized as follows: Section 2 discusses related work, Section 3 presents the proposed architecture, Section 4 details the results of applying our approach to web servers, and Section 5 concludes the paper and suggests future work.

### 2. Related Work

#### 2.1 MAFTIA Project
The MAFTIA project investigates the tolerance paradigm for constructing large-scale dependable distributed applications. It defines the AVI (Attack - Vulnerability - Intrusion) composite fault model and uses classical IDSes in combination to evaluate different forms of intrusion detection. MAFTIA uses design diversity for intrusion tolerance but not for detection.

Our work builds on MAFTIA's concepts, proposing an architecture that combines both tolerance and detection. Unlike MAFTIA, our intrusion detection process is based on comparing the outputs of diversified servers rather than using classical IDSes.

#### 2.2 DIT Project
The DIT project proposes a general architecture for intrusion-tolerant enterprise systems, including an intrusion-tolerant web server. It uses redundancy and diversity to ensure intrusion tolerance, with monitoring and alert management based on the EMERALD framework. 

While the DIT architecture shares similarities with ours, the intrusion detection techniques differ. DIT relies on host monitors and network IDSes, whereas our approach uses the properties of the intrusion tolerance architecture without additional IDSes.

#### 2.3 HACQIT Project
The HACQIT project aims to provide intrusion tolerance for web servers using two COTS web servers (IIS and Apache). It employs an Out-Of-Band (OOB) computer to compare server responses and detect intrusions. 

Although HACQIT uses design diversity, its detection algorithm is simple and may make incorrect assumptions. Our approach uses three hosts for diversified services and a more robust comparison algorithm, without additional IDSes.

#### 2.4 Specification-Based Intrusion Detection
Specification-based detection overcomes the limitations of traditional misuse and statistical anomaly detection by providing means to enforce expected program behavior. This approach requires internal knowledge of the monitored program, which can be challenging for complex systems. In contrast, our approach does not require prior knowledge of expected behavior, as it is implicitly defined by the variants.

### 3. Intrusion Detection by Design Diversity

#### 3.1 Design Diversity Principles
Design diversity is applicable to all elements of an information system, aiming to reduce the probability of common-mode failure. It is implemented by performing a function in multiple elements and then executing a decision or comparison algorithm on the results. N-version programming, the technique we use, involves independently generating N â‰¥ 2 software modules from the same initial specification.

N-version systems can detect and tolerate faults. If the probability of common-mode failure is zero, it is possible to identify the faulty version in a system with at least three versions.

#### 3.2 COTS-Based Diversity
Design diversity is typically expensive, but many internet services (e.g., web servers) are available as COTS, offering a natural diversity. However, COTS may not strictly follow the same specifications, limiting the comparison to outputs defined by the common specification. The choice of data and timing for comparison can significantly impact the number of detected differences, affecting false positives and negatives.

#### 3.3 An Intrusion Detection Architecture Based on COTS Diversity
Our proposed architecture, shown in Figure 1, includes a proxy, an IDS, and a set of COTS servers. The proxy handles client requests, ensuring that the servers receive the same requests. The IDS compares server responses and raises alarms if differences are detected, using a voting algorithm to select the response sent back to the client.

The COTS servers provide the requested service, diverse in terms of application software, operating systems, and hardware. This diversity reduces the likelihood of common-mode failures and ensures that vulnerabilities are decorrelated between servers. A three-server architecture allows tolerating one intrusion and identifying the failed server with a simple comparison algorithm.

**Taxonomy of Detected Differences:**
- Differences due to design differences in the specific parts of the specifications.
- Differences due to design faults in the part of the program covered by the common specification.

Our goal is to detect intrusions, which are design faults that violate the system's security policy. While it is impossible to automatically determine if differences are due to design faults or specification differences, it is possible to identify if they are due to the exploitation of vulnerabilities.

### 4. Results and Application to Web Servers

We applied our proposed architecture to web servers and conducted experiments to validate its effectiveness. The results confirm the expected properties of the built IDS and compare favorably with other IDS approaches.

### 5. Conclusion and Future Work

This paper presents a new approach to anomaly detection based on design diversity, using COTS components. The approach avoids the need for an explicit behavior model and can detect new or unknown attacks. Future work will focus on further refining the comparison algorithm and exploring additional applications of the architecture.

**References:**
1. [Reference 1]
2. [Reference 2]
3. [Reference 3]
4. [Reference 4]
5. [Reference 5]
6. [Reference 6]
7. [Reference 7]
8. [Reference 8]
9. [Reference 9]
10. [Reference 10]
11. [Reference 11]
12. [Reference 12]
13. [Reference 13]
14. [Reference 14]
15. [Reference 15]
16. [Reference 16]
17. [Reference 17]