### Symfony Version Affected
- **Version**: 3.4.22

### Description
A new entity was found through the relationship `XXX#hcspData` that was not configured to cascade persist operations for the `HCSPData` entity. The error message suggests two possible solutions:
1. Explicitly call `EntityManager#persist()` on the unknown entity.
2. Configure cascade persist for this association in the mapping, e.g., `@ManyToOne(..,cascade={"persist"})`.

If you are unable to identify the problematic entity, implement the `__toString()` method in the `HCSPData` class to get more information.

### Steps to Reproduce
1. **Service and Subscriber Setup**:
   - The `HCSPData` entity is fetched within a service.
   - This service is used in a subscriber that is pinned with the Doctrine `prePersist` event.

2. **Behavior in Different Versions**:
   - **Symfony 3.4.21**:
     - `$entityManager->contains($documentEntity)` returns `true`.
     - The `EntityManager` fetching `HCSPData` and the `EntityManager` flushing `XXX` are the same object (`#540`).

   - **Symfony 3.4.22**:
     - `$entityManager->contains($documentEntity)` returns `false`.
     - The `EntityManager` fetching `HCSPData` and the `EntityManager` flushing `XXX` are different objects (`#540` and `#559` respectively).

3. **Dependency Injection (DI) Issue**:
   - Both the service and the subscriber fetch the `EntityManager` in the same way: `public function __construct(EntityManagerInterface $entityManager)`.
   - In Symfony 3.4.22, the `EntityManager` instances are not the same, indicating a change in DI behavior.

### Additional Findings
- **Commit b3e17d2**:
  - Reverting the changes from this commit, made by @mmarynich, resolves the issue.

### Conclusion
The problem appears to be related to a change in the DI behavior of the `EntityManager` in Symfony 3.4.22. Reverting the changes from commit `b3e17d2` restores the expected behavior.