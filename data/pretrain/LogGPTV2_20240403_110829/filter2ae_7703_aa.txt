**作者：REInject@73lab@青藤实验室**  
**原文链接：**
恶意软件或攻击者通常使用计划任务作为他们的持久化机制。从风险发现的角度考虑，理解计划任务的运行和创建方式以及和计划任务相关联的进程是有必要的。此外，本文还分享了一种
**未公开** 的计划任务隐藏方式。
现在，让我们开始了解计划任务的一切。
## 计划任务的创建方式
MSDN 里对计划任务的细节信息描述得很详细了，包括使用的API或工作机制。所以不再重复阐述，只引用一些必要的东西：
计划任务调度器会根据任务的定义在指定的时间触发任务，它包含以下组件：
  * Triggers：任务触发的条件
  * Actions：任务运行的时候执行的动作
  * Principals：指定运行任务的用户或用户组信息
  * Settings：指定影响任务行为的其他设置
  * Registration Information：包含任务创建时间、创建人等信息
  * Data：执行任务时使用的额外的信息
更多信息可以在 [MSDN](https://docs.microsoft.com/en-us/windows/win32/taskschd/task-scheduler-start-page) 找到。
### 命令行创建计划任务
命令行创建计划任务包括 at.exe 和 schtasks.exe。
#### at.exe
使用 at 命令创建计划任务的方式：
    at 11:11 /every:Sunday,Monday,Tuesday "malware.exe"
以上命令将创建一个计划任务，在每周日、周一、周二的 11:11 执行 malware.exe。
也可以通过 `\\ComputerName` 在指定计算机上运行，更多的参数信息参考
[MSDN](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490866%28v=technet.10%29)。
下面这些信息可能会帮助排查 at.exe 生成的计划任务：
  * 路径： `%SystemRoot%\System32\at.exe`
  * 权限： 必须是管理员组用户
  * 排查： 检查创建任务时的命令行内容，看看可执行程序或者命令是否是恶意的
  * 其他：
  * at 创建的任务文件位置：`%SystemRoot%\Tasks`，关注 At[x].job 文件，x 代表任务的 ID
  * 和任务相关的 XML 文件位置：`%SystemRoot%\System32\Tasks`
  * 如果任务日志是启用的，可以排查 `应用程序和服务日志/Microsoft/Windows/TaskScheduler/Operational` 事件日志
#### schtasks.exe
at.exe 在 windows8 开始就 **弃用** 了，之后的系统都是使用 schtasks.exe 创建计划任务，该命令参数信息如下：
    SCHTASKS /Create [/S system [/U username [/P [password]]]]
        [/RU username [/RP password]] /SC schedule [/MO modifier] [/D day]
        [/M months] [/I idletime] /TN taskname /TR taskrun [/ST starttime]
        [/RI interval] [ {/ET endtime | /DU duration} [/K] [/XML xmlfile] [/V1]]
        [/SD startdate] [/ED enddate] [/IT | /NP] [/Z] [/F] [/HRESULT] [/?]
schtasks 比 at 更加强大，提供了很多自定义任务时需要的参数。在对计划任务排查时，我们可能更关注的是执行的任务内容，和它相关的参数是
`TR`。一般情况创建恶意计划任务的命令大概是这样子：
    "c:\Windows\System32\schtasks.exe" /Create /SC ONCE /TN KglN9I99 /TR "cmd /c \"start /min C:\ProgramData\KglN9I99.bat\"" /ST 20:21
这个命令中使用了 `/TN` 指定任务名称为 KglN9I99，`/TR` 参数指定运行的恶意命令，`/ST` 指定了运行时间，`/SC`
指定运行周期，还可以通过 `/ED` 参数指定任务终止日期等。
更多关于 schtasks.exe 的用法，参考 [MSDN](https://docs.microsoft.com/en-us/windows/win32/taskschd/schtasks)
下面这些信息可能会帮助排查 schtasks.exe 生成的计划任务：
  * 路径： `%SystemRoot%\System32\schtasks.exe`
  * 权限： 普通用户。如果要显式指定高权用户运行任务，需要该账户的账户名和密码信息。
  * 排查：
  * 检查调用 schtasks 的父进程信息，是否有权创建任务
  * 检查 `/TR` 参数的值，可执行文件或命令是否是恶意的
  * 其他：
  * 和任务相关的 XML 文件位置：`%SystemRoot%\System32\Tasks`
  * 如果任务日志是启用的，可以排查 `应用程序和服务日志/Microsoft/Windows/TaskScheduler/Operational` 事件日志
一旦任务创建，将会自动在目录 `%SystemRoot%\System32\Tasks` 生成一个关于该任务的描述性 XML 文件，包含了所有的任务信息。
### 图形界面创建计划任务
win+r 启动 taskschd.msc
mmc 程序启动后会直接提权到管理员权限，所以普通用户可以创建高权限的任务：
选中 Task Scheduler Library ，右键 Create Task...，在弹出界面，逐个配置即可:
需要注意的是，通过 `taskschd.msc` 创建的任务会直接从托管 **Task Scheduler** 服务的 svchost.exe 进程派生。
### 代码创建计划任务
代码最终都是和 `c:\windows\system32\taskschd.dll` 提供的 COM 服务交互，它的 GUID 是
`0F87369F-A4E5-4CFC-BD3E-73E6154572DD`。
注册表路径:
    HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\{0f87369f-a4e5-4cfc-bd3e-73e6154572dd}
该 COM 组件不支持 Elevation，无法自动提权。
下面是2种创建计划任务的代码示例。
#### csharp
c# 实现的话，为了方便，引用 [TaskScheduler](https://github.com/dahall/TaskScheduler)
项目进行计划任务的创建：
    using System;
    using System.Security.Principal;
    using System.Security.AccessControl;
    using Microsoft.Win32.TaskScheduler;
    using System.Text.RegularExpressions;
    namespace SchtaskHidden
    {
        class Program
        {
            static void Main(string[] args)
            {
                //TaskCollection tt = TaskService.Instance.RootFolder.GetTasks(new Regex("test"));
                //foreach(Task ti in tt)
                //{
                //    Console.WriteLine(ti.Name);
                //}
                //System.Environment.Exit(0);
                TaskDefinition td = TaskService.Instance.NewTask();
                td.RegistrationInfo.Description = "do something";
                //td.Principal.RunLevel = TaskRunLevel.Highest;
                //td.Principal.LogonType = TaskLogonType.ServiceAccount;
                //td.Principal.UserId = "SYSTEM";
                TimeTrigger dt = new TimeTrigger();
                dt.StartBoundary = DateTime.Now;
                dt.Repetition.Interval = TimeSpan.FromMinutes(1);
                td.Triggers.Add(dt);
                td.Actions.Add("cmd.exe", "/c \"calc.exe\"", null);
                Task t = TaskService.Instance.RootFolder.RegisterTaskDefinition(path: "testxxx", definition: td, TaskCreation.CreateOrUpdate, null, null, 0);
                Console.WriteLine("success!!");
                //TaskSecurity ts = new TaskSecurity(t);
                //ts.RemoveAccessRuleAll(new TaskAccessRule(new SecurityIdentifier(WellKnownSidType.ServiceSid, null), TaskRights.Read | TaskRights.Write | TaskRights.ReadAttributes, AccessControlType.Allow));
                //t.SetAccessControl(ts);
                //Console.WriteLine("success!!");
            }
        }
    }
#### powershell
    $TaskDescr = "test task"
    $Author = "thin0"
    $TaskName = "test"
    $TaskStartTime = [datetime]::Now
    $TaskCommand = "cmd.exe"
    $TaskArg = "/c calc.exe"
    $UserAcct = "$env:userdomain\$env:username"
    # $UserAcct = "SYSTEM"
    $ScheduleObject = new-object -ComObject("Schedule.Service")
    # connect to the local machine. 
    $ScheduleObject.Connect("localhost")
    $rootFolder = $ScheduleObject.GetFolder("\")
    $TaskDefinition = $ScheduleObject.NewTask(0) 
    $TaskDefinition.RegistrationInfo.Description = "$TaskDescr"
    $TaskDefinition.RegistrationInfo.Author = "$Author"
    #$TaskDefinition.Principal.RunLevel = 1
    $TaskDefinition.Settings.Enabled = $true
    $TaskDefinition.Settings.AllowDemandStart = $true
    $TaskDefinition.Settings.DisallowStartIfOnBatteries = $false
    $TaskDefinition.Settings.ExecutionTimeLimit = "PT0S"  # See Note Below
    $triggers = $TaskDefinition.Triggers
    $trigger = $triggers.Create(1) # Creates a "time-based" trigger, 8: system startup
    $trigger.StartBoundary = $TaskStartTime.ToString("yyyy-MM-dd'T'HH:mm:ss")
    $trigger.Repetition.Interval = 1
    $trigger.Enabled = $true
    $Action = $TaskDefinition.Actions.Create(0)
    $action.Path = "$TaskCommand"
    $action.Arguments = "$TaskArg"
    $rootFolder.RegisterTaskDefinition($TaskName,$TaskDefinition,6,$UserAcct,$null,3)
powershell 可以不用这么麻烦，有自带的 cmdlet：
    $taskname = "test"
    $cmd = "cmd.exe"
    $cmdargs = "/c calc.exe"
    $username = "$env:username"
    #$username = "SYSTEM"
    $taskdescription = "test task"
    $action = New-ScheduledTaskAction -Execute $cmd -Argument $cmdargs
    $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -minutes 1)
    $settings = New-ScheduledTaskSettingsSet -ExecutionTimeLimit (New-TimeSpan -Minutes 0) -RestartCount 3 -RestartInterval (New-TimeSpan -Minutes 1)
    Register-ScheduledTask -Action $action -Trigger $trigger -TaskName $taskname -Description $taskdescription -Settings $settings -User $username -RunLevel 1 # 1 for highest, 0 for low
删除命令：`Unregister-ScheduledTask -TaskName test -Confirm:$false`