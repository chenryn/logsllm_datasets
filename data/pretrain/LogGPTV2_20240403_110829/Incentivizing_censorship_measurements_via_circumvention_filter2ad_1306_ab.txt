### Case Study on Distributed Censorship in Pakistan

#### Key Insight
Our primary insight is that the effectiveness of censorship varies based on the financial and human resources available to censors. These differences can be leveraged to enhance circumvention performance [52].

#### Dataset and Methodology
The dataset was collected from a university campus and residential networks in two cities within the censored region. The university connects to the internet via two major ISPs in Pakistan, referred to as ISP-A and ISP-B. The dataset was gathered by sending HTTP/HTTPS requests to various blocked websites. The university site used for these tests does not itself censor the content being tested. While the focus is on YouTube, we also consider other types of blocked content, including anti-religious and pornographic material.

#### Insights about Censors
Our analysis of the dataset reveals two key insights into how ISPs enforce censorship in Pakistan:
1. **Differences in Blocking Mechanisms Across ISPs**: The blocking methods can vary between different ISPs.
2. **Variations in Blocking Mechanisms Within an ISP**: Even within the same ISP, the blocking mechanisms can differ across different URLs.

**Dataset Collection Period**: February 2015 to September 2015. Note that while YouTube was unblocked in Pakistan in January 2016 [16], thousands of other websites, including porn, religious, and political sites, remain blocked.

| Website/Categories | ISP-A | ISP-B |
|-------------------|-------|-------|
| YouTube           | HTTP Blocking → Redirected to a block page | 1) DNS Blocking → Resolved to a local host in ISP-B<br>2) HTTP/HTTPS Blocking → Request dropped |
| Other (Social, Porn, Political, etc.) | HTTP Blocking → Redirected to a block page | HTTP Blocking → Block page via iframe |

**Table 1: Comparison of filtering mechanisms used by ISP-A and ISP-B, both located in Pakistan.**

#### Analysis of Blocking Mechanisms
- **ISP-A**: Implements HTTP-level blocking, redirecting requests to a block page.
- **ISP-B**: Blocks both HTTP and HTTPS traffic, and also performs DNS blocking. This multi-stage blocking is often used to balance traffic across filtering devices.

**Blocking Mechanisms Across the World**
Similar heterogeneity in blocking mechanisms has been observed in other countries such as Thailand, UAE, Burma, and South Korea [38]. Figure 2 illustrates the distribution of blocking types across different ISPs in Yemen, Indonesia, Vietnam, and Kyrgyzstan. Common methods include DNS censorship (e.g., dropping DNS requests or responses, redirects to private IPs, or proxy-delivered block pages) and HTTP blocking (e.g., dropping HTTP GET requests, delivering block pages, or injecting TCP resets).

**Figure 2: Fraction of blocking types, across ISPs in different countries, measured using the ONI dataset [15, 38].**

#### Insights about Circumvention
We conducted measurements over several weeks to study Page Load Times (PLTs) under various direct and indirect circumvention mechanisms. For these experiments, we focused on the PLTs of the YouTube homepage. Our results showed consistent trends, so we report a subset of the findings.

**Comparison with Static Proxies**
Users often use static proxies spread globally to access blocked URLs. We found that PLTs using a direct method (i.e., HTTPS/Domain-Fronting at ISP-B) were significantly better than those using static proxies in the US, Europe, and Asia (Figure 1a). Average ping latencies are shown in Table 2.

**Table 2: Comparison of ping latencies to different static proxies from our measurement location. The ping latency to YouTube from the same location was 186ms.**

**Comparison with Tor**
Tor establishes a circuit comprising three relays (entry, middle, and exit nodes), which changes periodically. We recorded the location of the exit relay and found that using HTTPS instead of Tor for accessing YouTube resulted in significantly lower PLTs (Figure 1b). This is because Tor's multiple relays often result in longer paths, increasing PLTs.

**Comparison with Lantern**
Lantern, another proxy-based circumvention approach, was compared with directly using the IP address as the hostname in the URL of a blocked porn page (size ≈50KB). Lantern resulted in approximately 1.5x longer PLTs compared to the "IP as hostname" approach (Figure 1c). This is due to Lantern's use of trust relationships when choosing relays, leading to longer paths.

**Summary**
These results show that different circumvention techniques can lead to widely varying PLTs. Fine-grained censorship measurements can reveal differences in blocking mechanisms, which can be used to improve circumvention performance.

### C-Saw’s Design Rationale

#### Design Goals
Motivated by the insights from our case study, we set the following design goals for C-Saw:
- **G1 - Scalable Measurements with User Consent**: The system should allow the collection of fine-grained censorship measurements from a large number of users with their consent.
- **G2 - Adaptive Circumvention**: The system should dynamically adapt the circumvention approach based on the type of filtering to minimize PLTs.

**Constraints**
- **C1**: The system should not require a set of target URLs to be tested for censorship.
- **C2**: The system should preserve the privacy of users contributing censorship measurements.

#### Design Principles
- **Incentives for Diverse and Continuous Measurements**: C-Saw offers small PLTs as an incentive and obtains user consent to measure only the URLs they visit naturally.
- **High Circumvention Performance**: The system should quickly determine the blocking mechanism and adapt the circumvention strategy to choose the least overhead.

**C-Saw Overview**
A high-level view of C-Saw’s design (Figure 3) highlights its three key components:
1. **Client-Side Proxy**: Comprises a measurement module and a circumvention module.
2. **Local Database (local_DB)**: Stores information about URLs visited by the client.
3. **Global Database (global_DB)**: Along with a co-located server (server_DB), stores system-wide measurements of censored URLs from all C-Saw clients.

**Initialization**
When users install C-Saw, the client-side proxy registers with the global_DB by asking the client to solve a "No CAPTCHA reCAPTCHA". The server_DB sends a unique ID to the user for future updates to the global_DB. The proxy then downloads information about blocked URLs from the client’s AS.

**Workflow**
After initialization, all URL requests are routed through the local C-Saw proxy. The measurement module consults the local_DB to determine the blocking status of a URL. If the URL is unblocked in the local_DB, it consults the local copy of the global_DB. Based on the response, the direct path and/or some circumvention path are used for fetching the URL. The measurement module adds new URLs to the local_DB, and each client periodically sends measurements to the global_DB.

**Threat Model**
We assume an adversary can block, modify, or reject web connections but is unwilling to block all web traffic. The adversary may attempt to:
- Block clients’ access to the global_DB.
- Distort censorship measurements stored in the global_DB by contributing false measurements.
- Identify users contributing measurements to the global_DB.

C-Saw considers all these aspects in its design, assuming the adversary cannot gain unauthorized access to the local_DB or the global_DB and that users trust the C-Saw proxy.

### Detailed Design of C-Saw

#### Local Database
Each record in the local_DB contains:
- **URL**: Used as an index.
- **AS Number**: Autonomous system number at the time of measurement.
- **Tm**: Time when the URL was last measured.
- **Status**: Blocked, not-blocked, or not-measured.
- **Stage-1 Blocking to Stage-k Blocking**: Type of blocking experienced.
- **Global Posted**: Whether the latest update has been posted to the global_DB.

**Table 3: Fields in the local_DB.**

#### Global Database
The global_DB includes all fields from the local_DB and two additional fields:
- **Tp**: Time when the update was posted.
- **UUID**: A server-assigned universal unique identifier, which is a cryptographic hash of the current system time, allowing users to post updates and enabling user-centric analytics.

**Table 4: Additional fields in the global_DB.**

To protect user privacy, IP addresses are not stored in the global_DB. Clients periodically download the list of blocked URLs from the global_DB, reducing the need to locally measure every URL and enabling faster access to blocked content.

**Figure 3: C-Saw components and their interaction.**

This detailed design ensures that C-Saw can effectively and efficiently collect and utilize censorship measurements to improve circumvention performance.