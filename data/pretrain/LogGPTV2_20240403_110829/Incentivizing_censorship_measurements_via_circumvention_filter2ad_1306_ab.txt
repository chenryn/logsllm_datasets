case study on distributed censorship in Pakistan. Our key
insight is that censors possess different capabilities for block-
ing traffic based on the availability of financial and human
capital and these differences can be leveraged to improve
circumvention performance [52].
Dataset and methodology. Our dataset was collected from
a University campus as well as residential networks in two
cities within the censored region3. The University connects
to the Internet via two of the largest ISPs in Pakistan (re-
ferred to as ISP-A and ISP-B from now on). The dataset was
collected by sending HTTP/HTTPS requests for different
blocked websites. The University site we use for performing
these tests does not itself censor the type of content being
tested. While we focus on YouTube, we also consider anti-
religious and pornographic blocked content inside Pakistan.
Insights about censors. The analysis of our dataset reveals
two key insights regarding how ISPs enforce censorship in
Pakistan: (a) blocking mechanisms can differ across ISPs and
(b) blocking mechanisms can differ across URLs even within
3This dataset was collected between February, 2015 and September, 2015.
While YouTube was unblocked in Pakistan in January, 2016 [16] but thou-
sands of porn, religious, and political websites remain blocked.
535
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Aqib Nisar, Aqsa Kashaf, Ihsan Ayyub Qazi, Zartash Afzal Uzmi
Website/Categories
YouTube
Rest (Social, Porn, Political,..)
ISP-A
HTTP Blocking → Redirected to a block page
HTTP Blocking → Redirected to a block page
ISP-B
1) DNS Blocking → Resolved to a local host in ISP-B
2) HTTP/HTTPS Blocking → Request dropped
HTTP Blocking → Block page via iframe
Table 1: Comparison of filtering mechanisms used by ISP-A and ISP-B, both of which are located in Pakistan.
(a) HTTPS/DF vs. Static Proxies
(b) HTTPS vs. Tor
(c) Lantern vs. “IP as hostname”
Figure 1: Comparison of (a) static proxies located around the world with HTTPS/Domain-Fronting, (b) HTTPS vs. Tor with
different exit relay locations for fetching the YouTube homepage (≈360 KB in size) and (c) Lantern with “IP as hostname” (i.e.,
using the IP address of the blocked website in the URL as opposed to the hostname) for a porn website with ≈50 KB page size.
Note that these experiments were performed on a University campus. Each figure shows results for 200 back-to-back runs.
Static Proxy Location
UK
Netherlands
Japan
(US-1, US-2, US-3)
(Germany-1, Germany-2)
Avg. Ping Latency (ms)
228
172
387
(329, 429, 160)
(309, 174)
Figure 2: Fraction of blocking types, across ISPs in different
countries, measured using the ONI dataset [15, 38]. No DNS
refers to cases in which no DNS response was received for a
censored page, DNS Redir when a user is redirected to a dif-
ferent IP, No HTTP Resp when no HTTP response is received,
RST when a TCP reset is received and concluded to be due to
blocking, and Block Page w/o Redir when a block page is
received without DNS redirects.
an ISP. In particular, we observed that ISP-A was carrying
out HTTP-level blocking, whereas ISP-B blocked both HTTP
and HTTPS traffic (see Table 1). In addition, ISP-B was also
observed to be carrying out DNS blocking. This is known
as multi-stage blocking, which is usually carried out to load
balance traffic across filtering devices.
Blocking mechanisms across the world. Such heterogeneity
in blocking mechanisms has also been observed in several
other countries including Thailand, UAE, Burma, and South
Korea [38]. Figure 2 shows the fraction of blocking types
across different ISPs in Yemen, Indonesia, Vietnam, and Kyr-
gyzstan. Observe that DNS censorship (e.g., via dropping of
Table 2: Comparison of ping latencies to different static
proxies from our measurement location. The ping latency
to YouTube from the same location was 186ms.
DNS requests or responses, redirects to a private IP address
or to the address of a proxy that delivers a block page) and
HTTP blocking (e.g, by dropping the HTTP GET request,
delivering a block page, or injecting a TCP reset) is common,
however, their distribution varies across ISPs and countries.
Fine-grained censorship measurements can reveal such
differences in blocking mechanisms, which can be used to
select the least overhead circumvention strategy for a given
filtering mechanism.
Insights about circumvention. We carried out measure-
ments over several weeks to study PLTs under direct cir-
cumvention mechanisms (e.g., using HTTPS in ISP-A which
blocks only HTTP traffic, or using domain fronting in ISP-B
to unblock HTTPS traffic) as well as with indirect approaches
that use relays (e.g., Lantern). For these experiments, we fo-
cus on the PLTs of the YouTube homepage. As our results
exhibited a similar trend across weeks, we report only a
subset of the results.
536
00.20.40.60.81025005000750010000CDFPage Load Time (ms)HTTPS/DFUS-3Germany-2 US-2US-1NetherlandsUKGermany-1Japan00.20.40.60.8102000400060008000CDFPage Load Time (ms)HTTPSCanadaNetherlandsSwitzerlandCzech RepublicGermany-2France-2France-1Germany-100.20.40.60.8101000200030004000CDFPage Load Time (ms)IP as hostnameTorLantern00.20.40.60.813087347951840345543458998511129978449Fraction of blockingISP (AS Number)No DNSDNS RedirNo HTTP RespRSTBlock Page w/o RedirYemenIndonesiaVietnamKrygyystanIncentivizing Censorship Measurements via Circumvention
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Figure 3: C-Saw components and their interaction.
Comparison with Static Proxies. Users often access blocked
URLs using static proxies that are spread throughout the
world. We observed that PLTs under a direct method (i.e.,
using HTTPS/DF at ISP-B) were significantly better than
under static proxies located in US, Europe, and Asia as shown
in Figure 1a. The average ping latencies4 are shown in Table 2.
Observe that some proxies (e.g., Germany-1, UK, and Japan)
resulted in PLTs that varied widely across runs suggesting
either real-time on-path congestion or high load at the proxy.
Comparison with Tor. Tor operates by establishing a circuit—
which comprises three relays: entry, middle, and exit nodes—
and changes it over time (usually every 10mins unless the
circuit fails). Thus, we collected and isolated measurement
results for every unique circuit. We recorded the location of
the exit relay used by Tor across the measurement runs. We
observed that in most cases, using HTTPS instead of Tor for
accessing YouTube resulted in significantly lower PLTs (see
Figure 1b). This is because Tor’s use of multiple relays often
results in much longer paths, which inflates PLTs5.
Comparison with Lantern. We now compare the perfor-
mance of Lantern (another proxy-based circumvention ap-
proach) with directly using the IP address as hostname in the
URL of a blocked porn page (size ≈50KB) to bypass keyword
filtering. Unlike Tor, Lantern does not provide anonymity
and focuses more on availability [36]. Observe that Lantern
results in≈1.5x longer PLTs compared to the “IP as hostname”
approach (see Figure 1c). This happens because Lantern lever-
ages trust relationships when choosing relays. As a result,
traffic can go through longer paths compared to the direct
approach.
Summary. These results show that different circumven-
tion techniques can lead to widely different PLTs. Thus, fine-
grained censorship measurements can reveal differences in
blocking mechanisms, which can be used for improving cir-
cumvention performance.
4These do not include the latency from the proxies to YouTube.
5Anonymity is not always required or desirable especially when it comes at
the cost of performance as there exist countries (e.g., Pakistan) where there
are no legal implications on users who bypass censorship.
3 C-SAW’S DESIGN RATIONALE
We now present C-Saw’s key design goals and principles, an
overview of the system, and the threat model.
Design Goals. Motivated by the insights from our case
study, we set forth the following design goals for C-Saw:
• G1–Scalable Measurements with User Consent: The sys-
tem should allow collection of fine-grained censorship
measurements from large number of users with their
consent.
• G2–Adaptive Circumvention: The system should be
able to dynamically adapt the circumvention approach
based on the type of filtering to minimize PLTs.
In addition, a practical and usable solution should obey the
following constraints:
Constraint-1: The system should not require a set of target
URLs to be tested for censorship.
Constraint-2: The system should preserve the privacy of users
contributing censorship measurements.
Design Principles. The above design goals lead to the fol-
lowing design principles for C-Saw.
• To collect diverse and continuous measurements, a sys-
tem should have built-in incentives. C-Saw offers small
PLTs as an incentive and obtains user consent to mea-
sure only those URLs that a user visits in accordance
with their natural browsing habits.
• To achieve high circumvention performance, the sys-
tem should be able to (a) quickly determine the block-
ing mechanism and (b) adapt the circumvention strat-
egy to choose the one with the least overhead.
We realize these design principles in C-Saw by combining
measurements and circumvention in a single platform. Of
course, performance is not the only incentive for users, how-
ever, we view it as a useful incentive as it directly impacts
user experience and engagement.
C-Saw Overview. A high-level view of C-Saw’s design,
shown in Figure 3, highlights its three key components: (a) a
client-side proxy that comprises a measurement module and
537
Measurement Infrastructureserver DBC-Saw Clientlocal_DBProxycensoredwebsiteCensorship reportsList of blocked URLs in Client’s AS reported by other clientsglobal_DBURL A, blocked, DNS,... URL B, blocked, No HTTP,……Direct path measured for censorshipCircumventionSIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Aqib Nisar, Aqsa Kashaf, Ihsan Ayyub Qazi, Zartash Afzal Uzmi
Field
URL
AS Number
Tm
Status
Stage-1 Blocking
...
Stage-k Blocking
Global Posted
Description
Requested URL by the user
Autonomous system number
Time at which the URL was measured
blocked, not-blocked, or not-measured
Blocking experienced at stage 1
...
Blocking experienced at stage k
Was this URL posted to the global_DB?
Table 3: Fields in the local_DB.
a circumvention module, (b) a local database (local_DB) on
the client’s machine for storing information about URLs that
the client visits, and (c) a global database (global_DB) along
with a co-located server (server_DB) for storing system-wide
measurements of censored URLs from all C-Saw clients.
Initialization. When users install C-Saw, the client-side
proxy registers itself with the global_DB by first asking the
client to solve a “No CAPTCHA reCAPTCHA"; a new re-
CAPTCHA API that uses a risk analysis engine and adap-
tive CAPTCHAs to keep automated software from creating
large number of fake accounts [17]. During this phase, the
server_DB sends a unique ID to the user for sending future
updates to the global_DB. These updates include informa-
tion about only blocked URLs. Finally, the proxy downloads
information about all URLs that are blocked from the client’s
AS.
Workflow. After initialization, all URL requests are automat-
ically routed through the local C-Saw proxy. The measure-
ment module within the proxy first consults the local_DB to
ascertain the blocking status of a URL. It only consults the lo-
cal copy of global_DB6 if the URL is found to be unblocked in
the local_DB. Based on the response, the direct path and/or
some circumvention path are are used for fetching the URL.
Whenever the measurement module processes a new URL,
it adds an entry to the local_DB. Furthermore, each client
periodically sends its measurements to the global_DB.
Threat Model. We assume an adversary can block, modify,
or reject a web connection at any time but is unwilling to
block all web traffic (possibly due to collateral damage). The
adversary may attempt to (a) block clients’ access to the
global_DB, (b) distort censorship measurements stored in
the global_DB by contributing false measurements, and (c)
identify users who are contributing measurements to the
global_DB. C-Saw considers all these aspects in its design. We
assume that an adversary cannot gain unauthorized access
to the local_DB or the global_DB and that users trust the
C-Saw proxy itself (e.g., the proxy cannot be subverted by
an adversary to proxy user traffic through malicious nodes).
6Note that this copy only contains information about blocked URLs that
have the same AS as the client.
Field
Tp
UUID
Description
Time when the update was posted
Universal unique identifier
Table 4: The global_DB contains fields in the local DB
as well as these additional fields.
4 C-SAW DETAILED DESIGN
We now present the design of C-Saw’s components and de-
scribe their interactions.
4.1 Local Database
Each record in the local_DB contains a URL (used as an in-
dex), the autonomous system (AS) number at the time of mea-
surement, the time when the URL was last measured (Tm),
its blocking status, type of blocking experienced (we add
multiple fields to track multi-stage blocking), and whether
the latest update has been posted to the global_DB (see Ta-
ble 3). The blocking status of a URL can be either blocked or
not-blocked if the URL was previously measured and is set
to not-measured if it was either never measured before or its
record in the local_DB expired based on the system timer.
4.2 Global Database
The global_DB contains all fields in the local_DB and two
additional fields (see Table 4): (a) time when an update is
posted (Tp) and (b) a server assigned universal unique iden-
tifier (UUID)—which is a cryptographic hash of the current
system time—to allow users to post updates for measure-
ments they report. The UUID also allows consumers of mea-
surements to perform user-centric analytics (e.g., number of
users reporting measurements from a certain AS). To protect
user privacy, we do not store IP addresses in the global_DB.
To benefit from crowdsourced measurements reported by
other users on the same AS, clients periodically download the
list of blocked URLs from the global_DB. This obviates the
need for clients to locally measure every URL for censorship,
which reduces overhead and enables faster access to blocked
content. Note that efficiently pushing large lists to end-users
is common, e.g., Google Safe Browsing provides lists of URLs