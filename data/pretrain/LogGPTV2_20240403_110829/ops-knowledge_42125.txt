User: 给我写一个sm2的加解密工具类，使用java语言
Assistant: 以下是一个使用BouncyCastle实现SM2加解密的Java工具类示例：

```java
import org.bouncycastle.crypto.AsymmetricCipherKeyPair;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.engines.SM2Engine;
import org.bouncycastle.crypto.generators.ECKeyPairGenerator;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECKeyGenerationParameters;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.crypto.params.ECPublicKeyParameters;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.crypto.util.PrivateKeyFactory;
import org.bouncycastle.crypto.util.PublicKeyFactory;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.encoders.Hex;

import java.security.Security;

public class SM2Util {

static {
Security.addProvider(new BouncyCastleProvider());
}

private static final ECDomainParameters DOMAIN_PARAMS = new ECDomainParameters(
SM2P256V1Curve.getInstance(),
SM2P256V1Curve.getInstance().getG(),
SM2P256V1Curve.getInstance().getN());

/**
* 生成SM2公私钥对
*
* @return SM2公私钥对
*/
public static SM2KeyPair generateKeyPair() {
ECKeyPairGenerator keyPairGenerator = new ECKeyPairGenerator();
ECKeyGenerationParameters keyGenerationParams = new ECKeyGenerationParameters(DOMAIN_PARAMS, null);
keyPairGenerator.init(keyGenerationParams);
AsymmetricCipherKeyPair keyPair = keyPairGenerator.generateKeyPair();
ECPrivateKeyParameters privateKey = (ECPrivateKeyParameters) keyPair.getPrivate();
ECPublicKeyParameters publicKey = (ECPublicKeyParameters) keyPair.getPublic();
return new SM2KeyPair(privateKey.getD(), publicKey.getQ().getEncoded(false));
}

/**
* SM2加密
*
* @param publicKey SM2公钥
* @param data 待加密数据
* @return 加密后的数据
*/
public static byte[] encrypt(byte[] publicKey, byte[] data) throws Exception {
ECPublicKeyParameters publicKeyParameters = (ECPublicKeyParameters) PublicKeyFactory.createKey(publicKey);
SM2Engine engine = new SM2Engine();
engine.init(true, new ParametersWithRandom(publicKeyParameters));
return engine.processBlock(data, 0, data.length);
}

/**
* SM2解密
*
* @param privateKey SM2私钥
* @param data 待解密数据
* @return 解密后的数据
*/
public static byte[] decrypt(byte[] privateKey, byte[] data) throws Exception {
ECPrivateKeyParameters privateKeyParameters = (ECPrivateKeyParameters) PrivateKeyFactory.createKey(privateKey);
SM2Engine engine = new SM2Engine();
engine.init(false, privateKeyParameters);
return engine.processBlock(data, 0, data.length);
}

public static void main(String[] args) throws Exception {
// 生成SM2公私钥对
SM2KeyPair keyPair = generateKeyPair();
System.out.println("SM2私钥：" + Hex.toHexString(keyPair.getPrivateKey()));
System.out.println("SM2公钥：" + Hex.toHexString(keyPair.getPublicKey()));

// 待加密数据
byte[] data = "Hello, SM2!".getBytes();

// SM2加密
byte[] encryptedData = encrypt(keyPair.getPublicKey(), data);
System.out.println("加密后的数据：" + Hex.toHexString(encryptedData));

// SM2解密
byte[] decryptedData = decrypt(keyPair.getPrivateKey(), encryptedData);
System.out.println("解密后的数据：" + new String(decryptedData));
}
}

/**
* SM2公私钥对
*/
class SM2KeyPair {
private final byte[] privateKey;
private final byte[] publicKey;

public SM2KeyPair(byte[] privateKey, byte[] publicKey) {
this.privateKey = privateKey;
this.publicKey = publicKey;
}

public byte[] getPrivateKey() {
return privateKey;
}

public byte[] getPublicKey() {
return publicKey;
}
}
```

在上面的示例中，我们使用了BouncyCastle提供的SM2Engine实现SM2加解密，同时使用了SM2P256V1Curve曲线参数。在使用SM2加解密前，我们需要先生成SM2公私钥对，然后使用公钥进行加密，使用私钥进行解密。