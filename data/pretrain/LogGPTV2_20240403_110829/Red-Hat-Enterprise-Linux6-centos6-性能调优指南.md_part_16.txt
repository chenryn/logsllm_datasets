Linux 内核接收每一帧，并将其送入四步处理过程：
1. 硬件接收：网卡（NIC）接收传送的帧。根据其驱动程序配置，NIC 可将帧传送到内部硬件缓冲内存或
者指定的环缓存。
2. Hard IRQ：NIC 通过中断 CPU 插入网络帧。这样可让 NIC 驱动程序意识到该中断并调度 soft IRQ 操
作。
3. Soft IRQ：这个阶段采用实际接收进程，并在 softirq 环境中运行。就是说这个阶段会预先清空所
有在指定 CPU 中运行的程序，但仍允许插入 hard IRQ。
在这个环境中（与 hard IRQ 在同一 CPU 中运行，以便尽量减少锁定消耗），该内核会删除 NIC 硬件
缓存以及它通过网络栈的进程中的帧。从那里开始，可将帧转发、忽略或者传递给目标侦听插槽。
传递给插槽后，该帧就会被附加到拥有该插槽的程序中。这个过程会以互动方式进行直到 NIC 硬件缓
存超出帧外，或者直到达到设备加权（dev_weight）。有关设备加权的详情请参考 第 8.4.1 节 “NIC
硬件缓冲”。
4. 程序接收：程序接受帧并使用标准 POSIX 调用（read, recv, recvfrom）从任意拥有的插槽中退
出队列。此时从网络中接收到的数据不再存在于网络栈中。
CPU/缓缓存存亲亲和和性性
要维护接收路径的高流量，建议您让 L2 缓存处于热状态。如前所述，网络缓冲由作为 IRQ 的显示其存在的
同一 CPU 接收。就是说该缓存数据将位于接收 CPU 的 L2 缓存中。
要利用这个功能，请在要接收共享 L2 缓存同一核的 NIC 中的大多数数据的程序中配置进程亲和性。这样可
已最大化缓存成功率，并籍此提高性能。
8.4. 解解决决常常见见队队列列/帧帧丢丢失失问问题题
到目前为止，帧丢失最常见的原因是队列超限运转。该内核设定了队列长度限制，且在有些情况下队列填充
的速度超过排出的速度。出现这种情况时间过长，则会开始出现掉帧的情况。
如 图 8.1 “网络接收路径图表” 所示，在接收路径中有两种主要队列：NIC 硬件缓冲和插槽队列。这两种队列
都需要进行配置以放置队列超限运转。
8.4.1. NIC 硬硬件件缓缓冲冲
NIC 使用帧填充其硬件缓冲；然后该缓冲会被 softirq 排干，通过中断肯定 NIC。要询问这个队列的状
态，请使用以下命令：
ethtool -S ethX
62
CPU/缓存亲和性
使用 NIC 的对应设备名称替换 ethX。这样会显示在 ethX 中已丢失的帧数。丢帧经常是因为该队列超过保
存那些帧的缓冲空间所致。
解决这个问题有一些不同方法，即：
输输入入流流量量
您可以通过放缓下行输入流量放置队列超限运转。方法是过滤、减少联合多播组数、降低广播流量
等等。
队队列列长长度度
另外，您也可以增加队列长度。这包括在指定队列中将缓冲数增加到该驱动程序最多可以承担的数
量。方法是编辑 ethX 的 rx/tx 环参数，命令为：
ethtool --set-ring ethX
在前面所说的命令中附加恰当的 rx/tx 值。详情请参考 man ethtool。
设设备备加加权权
您还可以增加排空队列的速度。方法是相应调整 NIC 的设备加权。这个属性指的是 softirq 上下
文必须产生 CPU 并重新调度其本身前 NIC 可以接收的最多帧数。它由
/proc/sys/net/core/dev_weight 变量控制。
大多数管理员有选择第三个选项的倾向。但请注意这样做会有一定的后果。在一个迭代中增加可以从 NIC 接
收的帧数会造成额外的 CPU 周期，在此期间那个 CPU 无法调度任何应用程序。
8.4.2. 插插槽槽队队列列
和 NIC 硬件队列一样，插槽队列是由来自 softirq 上下文的网络栈填充。然后程序通过调用清空其对应插
槽的队列以便进行 read、recvfrom 等等。
要监控这个队列的状态请使用 netstat 程序。Recv-Q 列显示队列大小。一般来说对插槽队列中的超限运
转的处理与对 NIC 硬件缓冲超限运转的处理相同（例如：第 8.4.1 节 “NIC 硬件缓冲”）：
输输入入流流量量
第一个方法是延缓输入流量，方法为填充队列配置速度。具体步骤可以是过滤帧或者抢先丢掉它
们。您还可以通过降低 NIC 的设备加权 [6]延缓输入流量。
队队列列深深度度
您还可以通过增大队列深度避免插槽队列超限运转。方法是增大 rmem_default 内核参数或者
SO_RCVBUF 插槽选项值。有关详情请参考 第 8.2 节 “优化的网络设置”。
程程序序调调用用频频率率
尽可能优化程序以便更频繁地执行调用。这包括修改或者重新配置网络程序以便执行更频繁的
POSIX 调用（比如 recv、read）。反过来，这也可以让程序更快地排空队列。
很多管理员更喜欢使用增加队列深度的方法。这是最简单的解决方案，但并不总是能够长期使用。因为联网
技术发展迅速，插槽队列将继续以更快的速度填充。随着时间的推移这意味着要相应重新调整队列深度。
63
红帽企业版 Linux 6 性能调节指南
最好的解决方法是提高或者将程序配置为更迅速地从内核中排空数据，即使需要让数据在程序空间排队也无
妨。这样数据的保存就变得更灵活，因为可以根据需要置换出数据或者缓存到页中。
8.5. 多多播播注注意意事事项项
当有多个程序侦听多播组时，要求将处理多播帧的内核代码设计为为每个独立插槽复制网络数据。这个复制
很耗时且要在 softirq 上下文中进行。
因此在单一多播组中添加多个侦听程序会直接影响 softirq 上下文的执行时间。在多播组中添加侦听程序
意味着内核必须为那个组接收的每个帧生成额外的副本。
这对低流量卷且侦听程序数小时影响最小。但当多个插槽侦听一个高流量多播组时，增加的 softirq 上下
文执行时间导致在网卡和插槽多列中掉帧。增加 softirq 运行时会导致降低程序在高负载系统中运行的机
会，那样的话多播帧丢失的比例会随着侦听高容量多部组程序是的增加而增大。
如 第 8.4.2 节 “插槽队列” 或者 第 8.4.1 节 “NIC 硬件缓冲” 所属通过优化您的插槽队列和 NIC 硬件缓冲解决
丢帧问题。另外，您还可以优化程序的插槽使用。方法是将程序配置为控制单一插槽，并将接收的网络数据
迅速传播到其他用户空间进程中。
[4] 保证 CPU 和 NIC 之间的缓存亲和力意味着将其配置为共享同一 L2 缓存。有关详情请参考 第 8.3 节 “数据包接收概述”。
[5] 第 8.3 节 “数据包接收概述” 中包含数据包行程概述，应该可以帮助您定位并对应网络栈中的瓶颈区域。
[6] 设备加权是由 /proc/sys/net/core/dev_weight 控制。有关设备加权以及调整它的方法详情请参考 第 8.4.1 节 “NIC 硬件缓冲”。
64
修订记录
修修订订记记录录
修修订订 4.0-22.2.400 2013-10-31 Rüdiger Landmann
Rebuild with publican 4.0.0
修修订订 4.0-22.2 Mon July 1 2013 Wei Lliu
完成翻译、校对
修修订订 4.0-22.1 Thu Apr 18 2013 Chester Cheng
与 XML 源 4.0-22 版本同步的翻译文件
修修订订 4.0-22 Fri Feb 15 2013 Laura Bailey
为红帽企业版 Linux 6.4 发布。
修修订订 4.0-19 Wed Jan 16 2013 Laura Bailey
为保持一致进行的小修改（BZ#868404）。
修修订订 4.0-18 Tue Nov 27 2012 Laura Bailey
为红帽企业版 Linux 6.4 Beta 发布。
修修订订 4.0-17 Mon Nov 19 2012 Laura Bailey
已添加 SME 反馈 re. numad 小节（BZ#868404）。
修修订订 4.0-16 Thu Nov 08 2012 Laura Bailey
已在 numad 中添加草稿小节（BZ#868404）。
修修订订 4.0-15 Wed Oct 17 2012 Laura Bailey
采用 SME 反馈限制删除的讨论，并将本小节移到挂载选项下（BZ#852990）。
更新性能策略论述（BZ#858220）。
修修订订 4.0-13 Wed Oct 17 2012 Laura Bailey
更新性能策略论述（BZ#858220）。
修修订订 4.0-12 Tue Oct 16 2012 Laura Bailey
改进本书浏览体验（BZ#854082）。
修改 file-max 定义（BZ#854094）。
修改 threads-max 定义（BZ#856861）。
修修订订 4.0-9 Tue Oct 9 2012 Laura Bailey
在文件系统一章添加 FSTRIM 建议（BZ#852990）。
根据用户反馈更新 threads-max 参数描述（BZ#856861）。
更新有关 GFS2 碎片管理改进备注（BZ#857782）。
修修订订 4.0-6 Thu Oct 4 2012 Laura Bailey
在 numastat 工具中添加新的一节（BZ#853274）。
修修订订 4.0-3 Tue Sep 18 2012 Laura Bailey
添加备注，新的 perf 功能（BZ#854082）。
修正 file-max 参数描述（BZ#854094）。
65
红帽企业版 Linux 6 性能调节指南
修修订订 4.0-2 Mon Sep 10 2012 Laura Bailey
添加 BTRFS 一节以及对该文件系统的基本介绍（BZ#852978）。
记录使用 GDB 整合 Valgrind（BZ#853279）。
修修订订 3.0-15 Thursday March 22 2012 Laura Bailey
添加并更新 tuned-adm 侧写描述（BZ#803552）。
修修订订 3.0-10 Friday March 02 2012 Laura Bailey
更新 threads-max 和 file-max 参数描述（BZ#752825）。
更新 slice_idle 参数默认值（BZ#785054）。
修修订订 3.0-8 Thursday February 02 2012 Laura Bailey
重新调整并添加有关任务组和使用 numactl 捆绑 CPU 和内存分配的详情为 第 4.1.2 节 “调节 CPU 性
能”（BZ#639784）。
修改内部链接使用（BZ#786099）。
修修订订 3.0-5 Tuesday January 17 2012 Laura Bailey
第 5.3 节 “使用 Valgrind 简要描述内存使用” 的小修改（BZ#639793）。
修修订订 3.0-3 Wednesday January 11 2012 Laura Bailey
保证内部和外部超链接的一致性（BZ#752796）。
添加 第 5.3 节 “使用 Valgrind 简要描述内存使用”（BZ#639793）。
添加 第 4.1.2 节 “调节 CPU 性能” 并重新调整 第 4 章 CPU（BZ#639784）。
修修订订 1.0-0 Friday December 02 2011 Laura Bailey
红帽企业版 Linux 6.2 的 GA 发行版本。
66