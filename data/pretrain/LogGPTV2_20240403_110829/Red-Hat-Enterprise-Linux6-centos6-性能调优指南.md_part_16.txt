### Linux 内核接收帧的四步处理过程

Linux 内核在接收到每一帧数据时，会将其送入一个四步处理流程：

1. **硬件接收**：
   - 网卡（NIC）接收传入的帧。
   - 根据其驱动程序配置，NIC 可以将帧存储在内部硬件缓冲区或指定的环形缓存中。

2. **硬中断 (Hard IRQ)**：
   - NIC 通过中断 CPU 来插入网络帧。
   - 这使得 NIC 驱动程序能够意识到该中断，并调度软中断 (Soft IRQ) 操作。

3. **软中断 (Soft IRQ)**：
   - 在这个阶段，实际的数据接收过程在软中断环境中执行。
   - 此环境允许预先清空所有在指定 CPU 上运行的程序，但仍允许插入硬中断。
   - 在与硬中断相同的 CPU 上运行，以尽量减少锁定开销。
   - 内核从 NIC 硬件缓存中移除帧，并通过网络栈进行处理。帧可以被转发、忽略或传递给目标监听插槽。
   - 一旦帧被传递到插槽，它就会被附加到拥有该插槽的应用程序中。此过程将持续进行，直到 NIC 硬件缓存超出帧容量或达到设备加权（dev_weight）限制。有关设备加权的详细信息，请参见第 8.4.1 节“NIC 硬件缓冲”。

4. **应用程序接收**：
   - 应用程序使用标准 POSIX 调用（如 `read`、`recv`、`recvfrom`）从拥有的插槽中读取帧。
   - 此时，从网络接收到的数据不再存在于网络栈中。

### CPU/缓存亲和性

为了维护高流量接收路径，建议保持 L2 缓存处于热状态。如前所述，网络缓冲由作为中断的同一 CPU 接收，这意味着缓存数据将位于接收 CPU 的 L2 缓存中。

要利用这一特性，请在需要接收大部分数据的程序中配置进程亲和性，使其共享同一核心的 L2 缓存。这样可以最大化缓存命中率并提高性能。

### 解决常见队列/帧丢失问题

帧丢失最常见的原因是队列超限运转。内核设定了队列长度限制，在某些情况下，队列填充的速度可能超过排空的速度，从而导致帧丢失。

#### NIC 硬件缓冲

- **查询状态**：使用以下命令查询 NIC 硬件缓冲的状态：
  ```sh
  ethtool -S ethX
  ```
  将 `ethX` 替换为 NIC 的对应设备名称。这将显示在 `ethX` 中丢失的帧数。丢帧通常是因为队列超过了保存这些帧的缓冲空间。

- **解决方案**：
  1. **输入流量控制**：通过过滤、减少多播组数量、降低广播流量等方式减缓下行输入流量。
  2. **增加队列长度**：通过编辑 `ethX` 的 `rx/tx` 环参数来增加缓冲区的数量。例如：
     ```sh
     ethtool --set-ring ethX [appropriate rx/tx values]
     ```
  3. **调整设备加权**：通过调整 NIC 的设备加权来加快队列排空速度。设备加权指的是 softirq 上下文在重新调度之前可以接收的最大帧数。可以通过 `/proc/sys/net/core/dev_weight` 变量进行控制。

大多数管理员倾向于选择第三个选项，但请注意这样做可能会导致额外的 CPU 周期消耗，在此期间 CPU 无法调度任何应用程序。

#### 插槽队列

- **监控状态**：使用 `netstat` 程序监控插槽队列的状态。`Recv-Q` 列显示队列大小。

- **解决方案**：
  1. **延缓输入流量**：通过过滤帧或抢先丢弃它们来减缓输入流量。您还可以通过降低 NIC 的设备加权来实现这一点。
  2. **增加队列深度**：通过增大 `rmem_default` 内核参数或 `SO_RCVBUF` 插槽选项值来增大队列深度。
  3. **优化程序调用频率**：尽可能优化程序以更频繁地执行 POSIX 调用（如 `recv`、`read`），从而更快地排空队列。

尽管增加队列深度是最简单的解决方案，但它并不总是长期有效的。随着联网技术的发展，插槽队列将以更快的速度填充。因此，最佳解决方案是提高程序从内核中排空数据的速度，即使需要在程序空间中排队也无妨。这样可以使数据的保存更加灵活，可以根据需要交换出数据或缓存到页面中。

### 多播注意事项

当多个程序侦听同一个多播组时，内核必须为每个独立插槽复制网络数据。这种复制操作非常耗时，并且在软中断上下文中执行。

因此，向单个多播组添加多个侦听程序会直接影响软中断上下文的执行时间。每添加一个侦听程序，内核就必须为该组接收的每个帧生成额外的副本。

对于低流量和少量侦听程序的情况，影响较小。但在高流量和多个插槽侦听的情况下，增加的软中断上下文执行时间会导致网卡和插槽队列中的帧丢失。此外，增加软中断运行时间还会减少程序在高负载系统中的运行机会，从而使多播帧丢失的比例随着侦听高流量多播组的程序数量增加而增加。

解决方法包括优化插槽队列和 NIC 硬件缓冲，以及优化程序的插槽使用。具体方法是将程序配置为控制单一插槽，并迅速将接收到的网络数据传播到其他用户空间进程中。

### 修订记录

以下是文档的修订记录，详细记录了每次修订的时间、人员和内容。