8
应用程序升级失败
备份、恢复、导人和导出
3
导人旧的文件（发布版本<3）失败
可用性问题
9
标签顺序、拼写，有很多单击双击可用，“使这个界面像
谈话一样好用”
任何测试
用最新版本运行的“X”状图标的打开和保存失败，用新
版更新网页失败
背景/批处理
4
自动产生的电子信件太多/太少/不正确
软件的复杂交互
7
在两个特殊的窗件用在一起的时候会造成冲突，同一行中
不能重复执行某个特殊的功能
性能
4
像微博一样的符号要等一分钟以上才出现
总计
100
我们可以争论各种缺陷种类的重要性。例如，你可以认为自动化测
试应包括特殊情况，或者复杂的交互，或者“任何一种测试”，你也
可以认为设备升级应该是自动的，从而应当算作“可以被自动化的缺
陷”。你可以认为有些缺陷的出现可以被自动化测试程序捕获，也可
以认为我们可以有软件来打开套接字，下载PDF文件，然后对照上
周生成的PDF文件做一些比较。
2041
---
## Page 2043
不管怎么说，我承认这样的缺陷分类显示出一个应用程序的失败可
以有多种不同的方式，因而测试的策略需要通过一系列的方法来覆
盖这些可能的途径，我们称这种策略为营养均衡早餐策略。现在我
要告诉你我们是如何在Socialtext中找到这些缺陷的。
但是.....你到底是做什么的
哦，对不起，我忘了说这事儿了。Socialtext是在公司/企业范围内允
许人们安全地用会话取代交易活动的软件，就像Facebook、博客或
Twiter等。我们最初的产品是wiki，即允许公司/企业内网的人随时
随地用简单的标记语言甚至是MSWord之类的编辑器来编辑内容。
图16-2显示了一个简单的wiki页面：介绍一个新功能的用户故事板。
Socialtext
a
Story: Capture User's Edit Summary
Aewwns
Stories depending on this story
Details
图16-2wiki页面
如果要修改这一页，可点击“编辑”（Edit）按钮，画面如图16-3所
示。
2042
---
## Page 2044
Socialtext
Editing:Story: Capture User's Edit Summary
Kiewuns
ALCNLE IS OUT OF SCOP
Stories depending on this story
Details
图16-3编辑wiki页面
可以看到这个编辑器和微软Word非常像，也有粗体、斜体、标题、
加链接或图像等的按钮。格式化正文也在屏幕中显示。它还具有文
字校对功能，可是也许找不到格式或字体不对的问题。只测试编辑
器本身便是一个显著的测试问题。
Socialtext的wiki软件建立在开源组件之上，由Linux(Ubuntu)操作系
统、Apache网络服务器、Postgres数据库和Perl编程语言（LAMP栈）
组成。[1]
Socialtext的软件过程
Socialtext遵循的开发流程受到了极限编程的启发。最基本的单元是
“故事”（story），意指要求极少的文档。一个故事里包含简短的对
功能特征的描述，同时也有为了完成故事而需考虑事项的例子。我
们把这样的例子叫做“验收测试"并用简单直白的英语加以叙述。故
事的目的在于创造一个共享的心理模型，对要完成的工作有一个总
的参考和一致的期待。当然，每个故事都被嵌入到Socialtext的wiki
页面中，我们将每个故事安上“需要审查”、“开发中”、“问答中"或
“等待完成"等标签形成非正式的工作流程以便表示工作进度。
2043
---
## Page 2045
我们不期待我们的故事有终结，因为需求总是随着时间的推移而变
化。相反的是，我们试着令我们的故事好得令开发的人着手开始工
作，并在故事审查的过程到达报酬递减时宣布我们的故事“足够
好”。
我们不期待我们的故事精确无误，但我们有一个审查过程可以促使
故事做得更好。
我们不期待我们的故事毫不含糊。因为英语本身是含糊的、模棱两
可的语言。但有一些清楚的例子会有很多帮助。
一个故事描述一个完整的功能，但那个功能本身并不一定具有市场
价值或卖点。我们将收集到的一系列的故事放到“选代”，设定迭代
的时间长度为两周。我们设定选代的时间长度时并不教条，在圣诞
节前后选代的时间长度就是三周。图16-4演示了一些典型的选代的
内容和顺序。
选代结束1/16
选代结束1/30
选代结束2/13
开发当前选代
复审2/13数事
开发
预试自前
复审2/13选代
测试
建2/13小阶段
计诊钟定
产品管理
启动会议
选代国顾
图16-4选代进度一览
理想来说，迭代开始于某个周一，完成故事并且“编码结束”（code
close）于下一周的周三。回归测试大概需要两天的时间，在下一个
周一每个人都并始了下一轮迭代。这里我们是假设测试员在回归测
试中没有发现缺陷以及并发员总能按时完成并发。并且我肯定靠这
个理论一定能卖出很多书。经验告诉我们对后一个选代进行回归测
试的时候常常也会碰到前一个选代。这也没什么问题，因为还没有
开发员交付任何故事。（此时，最大的问题是：开发员和测试员既
要查找并修复前一个迭代里的缺陷，又要开发当前的选代。）
当产品经理在忙着下一个选代故事的时候，你会发现团队在同时处
理着三个选代。你可能会异这到底美在哪里（后面我们会谈论这
个），但有一种解释说这是一条流水线，而不是瀑布。
我们到底是如何做的
2044
---
## Page 2046
让我们沿着故事的经脉往下走一特别是“编辑摘要”。首先，产品
经理拿出产品方案。他注意到很多用户频繁使用“最近修改”的功
能，因为想要知道这个修改是否重要（“Matt修改了度假制度”）或小
的变化（“Matt修改了合同制度的措辞和语法”）。编辑摘要允许用户
创建一个摘要，以显示人们何时查看了修订历史（哪些是新的修
订）或一个用户操作的流程。这是一个很关键的功能，并且产品经
理说这对销售给AcmeCorporation是必需的功能。因此他们起草了一
个如图16-5所示的故事。
StoryOverview
T-Shirt EstimateS
Points
stimator(s)
awn_ Devi
SEIS XWB
ead Dev
Lead QA
Priority
altt.Heusser
Custe
ome
图
dina Levin
Notes
The user-interface will include a check box and text box fr the
convey the changes made (eg “foxed spelling° or *increased vacation policy by one 
such as search results, pages tag list, w
shat's new, etc. This is described in Story:, Lsers' edit summaries_ appear in.the ist view sniseets
图16-5故事细节
故事起始于一个用户，该用户是企业赞助商（可能是产品经理）和
功能描述。此时故事只是文本的一小段，任务还没指定给任何人。
产品经理、开发员、设计师/教练和质量保障人员会一起讨论故事的
总体规模、实现细节和故事测试。我们按点数来记录预估，即一个
开发员在一个理想工程花费半天的实现时间。因为有修正、度假和
打断等，所谓的理想是永远都实现不了的。我们跟踪实际记录的点
数并用此记录来预测未来的表现，称之为“迭代速度”。
在这个过程中，产品管理团队也许会建立实验模型，如图16-6所示
的编辑摘要对话窗口。
2045
---
## Page 2047
Save PreviewCancelRichTentwikiTest
Edit Summary (optional) (what is ths3)
Summary
图16-6编辑摘要模型
在谈编辑摘要的具体要求之前，我们还要说一件事。你会发现一旦
嵌入编辑摘要，用户不知道从哪里能调用这个功能。有许多故事会
指定编辑摘要窗口出现在修改历史、最近的改动、以更新形式出现
的用户活动流程和微型博客的邮件中。这个故事意在“采集"编辑摘
要，而且只倾向于独立的对话窗口。
故事有标题、纯文本描述、案例屏幕采集和验收测试。
在故事初期阶段，产品所有者先做一个善意的尝试去创立验收测
试，在编写代码之前由开发者和测试人员进行扩充。编写故事和审
阅过程的目的不是去创造一个穷举表，不是一个到了眼前不得不做
的大测试，而是去努力认识问题的范围，当以后发现问题的时候全
组的人会一致同意“噢，那是一个大缺陷”，并且会鼎力解决这个缺
陷，不至于抱怨那是因为什么人改变了主意或设定的要求不对等。
表16-2中列举了编辑摘要对话窗口用到的验收测试。“ando"是
OrlandoVazquezMRH是MatthewR.Heusser。测试储存在wiki页面，
在工作时段的后面，员工更新已完成的文件一—这里我们先走一
步。注意这些是这个功能的行为阶段的一些规格说明。
表16-2：编辑摘要对话窗口的验收测试
测试
开发签核
测试签核