the microserver that is used to remotely manage and control
ﬁrmware and system updates.
A problem here is that secure rebooting takes a relatively
long time (tens of seconds) and might affect the HETEE’s
response time and throughput. In practice, however, the issue
is less of a concern, due to the HETEE’s use of a low-cost
high-density microserver cluster, with 2 proxy nodes being
integrated on each adapter card (two cards in our prototype,
see Figure 5(d)). Once rebooted, a node with clean context is
registered to the idle queue. When a new task arrives, the SC
takes the ﬁrst node in the queue to create an enclave for the
task, together with required accelerators. This approach helps
reduce the average waiting time when the task arrival rate is
relatively low. Since a HETEE box typically carries no more
than 32 GPUs to serve no more than 20 servers on the same
rack, 4-8 microservers, each managing a single enclave, should
be adequate, as implied by the observation in the prior re-
search [37]–[41]: the workloads of a data center are generally
characterized by a diurnal pattern (leaving the accelerators and
servers under-utilized for most of the time except peak hours).
The system’s scalability can be improved using the techniques
like virtualizing TrustZone [42]. However, this software based
isolation increases the complexity of security control, which
might lead to a thicker TCB. How to further improve resources
utilization is left to our future research.
C. Hierarchical Isolation and TCB Simpliﬁcation
Running a complicated computing task inside HETEE often
needs the support from a complicated software stack. For
example, to perform DNN training or inference, we have to
load AI runtime (TensorFlow [18], Caffe [43] [44] or PyTorch
[45] [46]), the GPU runtime and driver (CUDA) to an enclave.
To address the security risk, we come up with a two-level
isolation design that simpliﬁes the TCB software stack. Only
security and management modules are deployed to the SC,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:57:53 UTC from IEEE Xplore.  Restrictions apply. 
1454
mCPU(cid:3)(cid:523)(cid:9)(cid:139)(cid:148)(cid:143)(cid:153)(cid:131)(cid:148)(cid:135)(cid:3)(cid:6)(cid:145)(cid:134)(cid:135)(cid:3)(cid:145)(cid:144)(cid:142)(cid:155)(cid:524)
(cid:22)(cid:135)(cid:133)(cid:151)(cid:148)(cid:135)(cid:3)(cid:5)(cid:145)(cid:145)(cid:150)(cid:3)(cid:4)(cid:149)(cid:149)(cid:139)(cid:149)(cid:150)(cid:3)(cid:16)(cid:145)(cid:134)(cid:151)(cid:142)(cid:135)(cid:149)
(cid:4)(cid:150)(cid:150)(cid:135)(cid:149)(cid:150)(cid:131)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:4)(cid:149)(cid:149)(cid:139)(cid:149)(cid:150)(cid:3)(cid:16)(cid:145)(cid:134)(cid:151)(cid:142)(cid:135)(cid:149)
(cid:19)(cid:138)(cid:155)(cid:149)(cid:139)(cid:133)(cid:131)(cid:142)(cid:142)(cid:155)(cid:3)(cid:12)(cid:149)(cid:145)(cid:142)(cid:131)(cid:150)(cid:135)(cid:134)(cid:3)(cid:20)(cid:151)(cid:135)(cid:151)(cid:135)(cid:149)(cid:3)(cid:428)
(cid:7)(cid:135)(cid:512)(cid:8)(cid:144)(cid:133)(cid:148)(cid:155)(cid:146)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:8)(cid:144)(cid:137)(cid:139)(cid:144)(cid:135)(cid:149)
FPGA
(cid:22)(cid:135)(cid:133)(cid:151)(cid:148)(cid:135)(cid:3)
(cid:22)
(cid:21)(cid:135)(cid:149)(cid:135)(cid:150)
(cid:22)(cid:135)(cid:133)(cid:151)(cid:148)(cid:135)(cid:3)
(cid:22)
(cid:21)(cid:135)(cid:149)(cid:135)(cid:150)
(cid:8)(cid:144)(cid:133)(cid:142)(cid:131)(cid:152)(cid:135)(cid:3)(cid:883)
(cid:19)(cid:148)(cid:145)(cid:154)(cid:155)
(cid:19)(cid:148)(cid:145)(cid:154)(cid:155)
(cid:17)(cid:145)(cid:134)(cid:135)(cid:3)(cid:883)
(cid:17)(cid:145)(cid:134)(cid:135)(cid:3)(cid:883)
(cid:8)(cid:144)(cid:133)(cid:142)(cid:131)(cid:152)(cid:135)(cid:3)(cid:882)
(cid:19)(cid:148)(cid:145)(cid:154)(cid:155)
(cid:19)(cid:148)(cid:145)(cid:154)(cid:155)
(cid:17)(cid:145)(cid:134)(cid:135)(cid:3)(cid:882)
(cid:17)(cid:145)(cid:134)(cid:135)(cid:3)(cid:882)
(cid:4)(cid:133)(cid:133)(cid:135)(cid:142)(cid:135)(cid:148)(cid:131)(cid:150)(cid:145)(cid:148)(cid:149)(cid:3)
(cid:4)(cid:133)(cid:133)(cid:135)(cid:142)(cid:135)(cid:148)(cid:131)(cid:150)(cid:145)(cid:148)(cid:149)(cid:3)
(cid:4)(cid:133)(cid:133)(cid:135)(cid:142)(cid:135)(cid:148)(cid:131)(cid:150)(cid:145)(cid:148)(cid:149)(cid:3)
(cid:4)(cid:133)(cid:133)(cid:135)(cid:142)(cid:135)(cid:148)(cid:131)(cid:150)(cid:145)(cid:148)(cid:149)(cid:3)
FPGA
Remote 
Attestation 
Block RAM 0
(cid:19)(cid:6)(cid:12)(cid:135)
Server 
Node
Configure 
Queue
(cid:7)(cid:16)(cid:4)
Queue
Data / Code
Message Queue
Ciphertext
CCi hhh
(cid:16)(cid:135)(cid:143)(cid:3)(cid:133)(cid:145)(cid:144)(cid:150)(cid:148)(cid:145)(cid:142)(cid:142)(cid:135)(cid:148)(cid:3)(cid:882)
(cid:18)(cid:136)(cid:136)(cid:486)(cid:133)(cid:138)(cid:139)(cid:146)(cid:3)(cid:16)(cid:135)(cid:143)(cid:3)(cid:882)
Ctrl.
Measure 
& Verify
& Verify 
MAC 
registers
(cid:22)(cid:135)(cid:133)(cid:151)(cid:148)(cid:135)(cid:3)
(cid:484)(cid:484)(cid:484) Enclaves
(cid:21)(cid:135)(cid:149)(cid:135)(cid:150)
(cid:7)(cid:16)(cid:4)
(cid:19)(cid:6)(cid:12)(cid:135)
Proxy 
Nodes
Block RAM 1
BlocBl k RAk RAMM 11
Block RAM 1
BlocBlocck oc
AMRAk 
Block RAM 2
Remote 
Attestation 
A
Channel 
Configure 
C
Channel
Enclave  
Channels
C
Plaintext
Plaintext
Plaintext
(cid:16)(cid:135)(cid:143)(cid:3)(cid:6)(cid:145)(cid:144)(cid:150)(cid:148)(cid:145)(cid:142)(cid:142)(cid:135)(cid:148)(cid:3)(cid:883)
(cid:18)(cid:136)(cid:136)(cid:486)(cid:133)(cid:138)(cid:139)(cid:146)(cid:3)(cid:16)(cid:135)(cid:143)(cid:3)(cid:883)
mCPU  ((cid:22)(cid:135)(cid:133)(cid:151)(cid:148)(cid:139)(cid:150)(cid:155)(cid:3)(cid:428)(cid:3)(cid:16)(cid:131)(cid:144)(cid:131)(cid:137)(cid:135)(cid:143)(cid:135)(cid:144)(cid:150)(cid:3)(cid:6)(cid:145)(cid:134)(cid:135))
Ctrl.
(cid:21)(cid:17)(cid:10)(cid:3)(cid:428)(cid:3)(cid:14)(cid:7)(cid:9)
(cid:7)(cid:11)(cid:3)(cid:428)(cid:3)(cid:21)(cid:22)(cid:4)(cid:3)(cid:428)(cid:3)(cid:22)(cid:11)(cid:4)
(cid:12)(cid:144)(cid:150)(cid:135)(cid:137)(cid:148)(cid:139)(cid:150)(cid:155)(cid:3)(cid:133)(cid:138)(cid:135)(cid:133)(cid:141)
(cid:134)(cid:135)(cid:512)(cid:135)(cid:144)(cid:133)(cid:148)(cid:155)(cid:146)(cid:150)(cid:139)(cid:145)(cid:144)
(cid:12)(cid:7)(cid:3)(cid:152)(cid:135)(cid:148)(cid:139)(cid:136)(cid:139)(cid:133)(cid:131)(cid:150)(cid:139)(cid:145)(cid:144)
AES-GCM 
Keys registers
(a) Structure of the SC and HETEE Enclaves.
(b) SC modules.
Security Controller.
• Remote Attestation: The attestation module is implemented
inside the FPGA chip to support cryptographic operations
(key establishment, authentication, etc.) for establishing a trust
relation between the remote user and the HETEE box. The
details are presented in Sec. III-D.
• Message (De)Encryption/Parsing/Scheduling and hardware-
assisted isolation and control: This module is implemented
inside the FPGA chip for
(de)encryption and
scheduling of messages and controlling the access to them
from different enclaves. It is designed to isolate enclaves,
particularly the proxy nodes operating them, from the
outside world (the host nodes, remote users, etc.). This is
achieved through hardware-assisted separation, such as the
use of private DDR4 controllers with hardware-wired isolated
access paths of logic implementation inside the FPGA.
recording,
( RNG: Random Number Generator; KDF: Key Derivation Function; MAC: Message Authentication Code;
Fig. 3.
DH: Diffie-Hellman key exchange engine; RSA: public key signature/encryption engine; SHA: Secure Hash Algorithm engine;
AES-GCM: symmetric de/encryption engine; )
which form a thin TCB for the HETEE (our implementation
includes isolation and security management modules on open-
source coreboot [87] ﬁrmware). Other software components,
including the GPU driver, runtime, and the AI framework
like TensorFlow, run on the proxy node. As mentioned
earlier, the proxy node is outside the TCB, physically and
logically separated from the SC but controlled by the SC.
When computing a task, each proxy node manages an
enclave and all its computing units but has been isolated from
the outside world by the SC. The integrity of its initial software
stack is veriﬁed by the SC and proven to an enclave user (the
data owner) through attestation and the computing results are
only sent back to the user. The physical isolation of the enclave
reduces resource sharing with other enclaves and the untrusted
host, minimizing the side-channel attack surface. Once the
computation is done, the node is sanitized and restored to the
trust state through secure rebooting (Sec. III-B Efﬁcient secure
cleanup), together with all computing units assigned to the
enclave. Below we elaborate the design and implementation
of these components in the HETEE.
Security controller. As a separate system, the security con-
troller runs on a board connected to the standard PCIe fabric,
acting as a gatekeeper for the secure world inside HETEE.
The SC can be implemented in a variety of ways, using
CPU, CPU+FPGA, or a custom ASIC chip. Since CPU is
not as efﬁcient as FPGA when performing encryption and
authentication computation, and the cost of developing the
ASIC chip is high, we utilized CPU+FPGA to built a prototype
(Fig. 3). The main functionalities of the SC are as follows:
• Secure boot: Secure boot
is performed by the measure
module on FPGA and the ﬁrmware code of mCPU, which
is responsible for the security of the SC itself, as well as
restoration of the proxy node’s trusted state.
• Resource assignment: This module is a program integrated
into the mCPU ﬁrmware. It is designed to dynamically con-
ﬁgure the PCIe fabric according to security or non-security
requirements, for the purpose of assigning accelerators to
computing nodes, isolating resources for enclave management
and efﬁcient security state switching for pooled accelerators.
The hardware-based message isolation and control is shown
in Fig. 3 (b). Again, the mechanism, together with the resource
assignment module, is designed to physically separate the
enclaves inside the HETEE box and the outside world, so
the SC can have full mediation on the interactions between
the secure and insecure worlds. In the meantime, the design
is meant to minimize the attack surface on the SC, to protect
its (already thin) TCB from potential exploits. Speciﬁcally,
the isolation and control mechanism is made very simple and
fully implemented in hardware, on the FPGA board that is sep-
arated from the mCPU board running ﬁrmware-based security
management of the SC. This minimizes the threat from the
input data uploaded by untrusted sources. Further the untrusted
server nodes on the rack can only access the hardware queues
that store encrypted messages (i.e., the ciphertext data/code
message queue and the ciphertext conﬁguration queue, see the
grey box in Fig. 3 (b)). Those queues are logically mapped to
each node’s own PCIe space by the PCIe ExpressFabric chips.
The FPGA logic does not implement the path for an external
node to access plain-text messages in another hardware queue
(i.e., the plaintext conﬁguration queue), essentially eliminating
the possibility for out-of-bound access. Similarly, the proxy
node inside the HETEE box can only access the plain-
text hardware message queues (i.e., the plaintext data/code
message queue). The ciphertext queues and the plain-text
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:57:53 UTC from IEEE Xplore.  Restrictions apply. 
1455
queues are built in the FPGA programmable logic, each entry
of which contains pointers to speciﬁc messages that are stored
in two physically isolated DDR memory blocks.
The FPGA board assigns a pair of queues to each enclave,
one for encrypted data (in the grey box) and the other for
the corresponding plaintext (in the green box). These queues
are physically separated from other queues on the board.
Only the isolation and control mechanism, which is also fully
implemented in hardware, is allowed to access queues on both
sides. It runs AES to encrypt/decrypt the data from one queue
before moving the result to the other queue. The module also
performs authentication (random ID in the encrypted message)
and integrity check (AES-GCM) to ensure that an enclave only
receives correct messages from the authorized party (the one
uploading the computing task in our research).
Proxy node. The proxy node is also a stand-alone system
in the HETEE box and connected to the PCIe fabric. Each
enclave runs on a separate proxy node. This reduces the
surface for possible inter-task information leaks. During task
switching (or enclave destroy), the proxy node is forced to
reboot by the SC to load trusted images and reset its state.
Inside the HETEE enclave, the proxy node is responsible
for managing the accelerators dynamically allocated to the
enclave by the SC. It runs a simpliﬁed Linux and the user-level
software stack for accelerator and a typical AI runtime. Note
that the integrity of this stack is ensured by the SC once the
proxy node is rebooted and also the stack only serves the
current computing task. In addition, during the computation,
the proxy node cannot interact with the outside without
the mediation from the SC. This reduces the surface the
software stack exposes to the adversary, even when it contains
vulnerabilities. Also under the control
is the side-channel
attack surface: unlike the prior approaches [15], which require
a CPU TEE (like TrustZone or Intel SGX) to work with a GPU
(possibly through its own TEE [16]), computing units and the
proxy node all run inside the same enclave, which allows
them to interact with each other in a highly efﬁcient and also
secure fashion, with the communication between the server
and the units all hidden from a side-channel attacker.
The proxy node accepts the code and data messages
dispatched from the SC, runs the AI model written by the
remote user on its local AI software stack, and analyzes the
data contained in the data message by invoking the assigned
accelerators. The results are then packaged into a result
message sent to the SC, and eventually delivered to the remote
user through an encrypted channel.
As the major workloads on the proxy node usually
include the AI runtime as well as different AI models, and
the intensive computation is ofﬂoaded to the accelerators, the
proxy node needs CPUs with strong I/O capabilities, even
when their computing capabilities are relatively weak. There-
fore, in our research, we chose microserver as the proxy
node, which integrates low-end Xeon E3 processors. This
design can save both cost and power consumption, which in
turn increases integration density, allowing more microservers
to be put on a single board.
D. Trust Establishment
Secure Boot. The booting of HETEE starts from the chip boot
circuit on the FPGA, which loads the encrypted bitstream ﬁle
from the external boot ﬂash memory. Then the measurement
logic on the FPGA veriﬁes the integrity of the mCPU ﬁrmware
(with the security management code). After the SC subsystem
boots up, it evaluates the ﬁrmware of proxy nodes. Once
its integrity is conﬁrmed, the ﬁrmware proceeds with a typical
secure boot process to check the proxy’s kernel image, which
further veriﬁes the binaries of critical applications.
Remote attestation and key negotiation. Remote attestation
of HETEE follows the standard protocol used by SGX [92]–
[94] and Sanctum [65], [66], which is a combination of the
SIGMA [90] authenticated key exchange protocol and TCG’s
attestation protocol [103]. It supports mutual authentication
and establishment of a secure channel between the remote user
and a HETEE enclave. SIGMA is a popular key exchange
protocol that has undergone rigorous security analysis [91].
Like SGX and Sanctum, we integrate the SC measurement
and the enclave measurement (with the version number of the
SC bitstream, ﬁrmware, and proxy node software) into the
protocol. Since an enclave is created through a secure reboot,
its software state is measured with the hash values of the kernel
and applications veriﬁed during the boot.
Remote 
User
Ga=ga
(cid:346)   Ga
HETEE
Box
(cid:347)   Gb, SCcert, SIGSCPrivAK(Ga,Gb,EM), 
MACSMKm(SCcert)
Gb=gb
Gab=(ga)b
SMKm=KDF(Gab,mSalt)
SMKs=KDF(Gab,sSalt)
Gab=(gb)a
SMKm=KDF(Gab,mSalt)
SMKs=KDF(Gab,sSalt)
Verify MACSMKm(SCcert)
Verify SC & Enclave