自由定义。例如：无标准的
XML ，Json  
3 
提供统一的接口查询平台，各个应
用系统开发人员可以从代码导出
接口信息，然后发布在接口信息查
询平台 
各应用系统自己实现了访问控制
和细粒度的数据控制权限 
有统一的接口规范，接口遵循相应
的标准规范。例如：wsdl，
swagger.io 
4 
提供统一的接口查询平台，各个应
用系统开发人员可以从代码导出
接口信息，然后发布在接口信息查
询平台 
各应用系统自己实现了访问控制
和细粒度的数据控制权限 
a) 有统一的接口规范，接口遵循
相应的标准规范。 
b) 接口规范由统一的基础设施中
心化管理。 
例如：依照规范设立的集中式 API 
Gateway 
5 
提供统一的接口平台，各个应用系
统可以自动注册接口相关信息，接
口平台可以自动测试接口是否符
合规范要求。 
提供统一的接口权限管理平台，平
台统一管理接口的访问控制权限
和数据控制权限。 
a) 有统一的接口规范，接口遵循
相应的标准规范。 
b) 接口规范由 API 按照标准的
方式去中心化管理。 
例如: 依照规范设立的分布式服务
网格(Service Mesh) 
5.2 应用性能 
应有性能是对应用实际性能（Real Performance，与感知性能 Perceived performance 相对）和可
用性（Availability）的度量，是衡量应用服务水平的重要指标。 
5.2.1 实际性能 
实际性能是指用户实际体验的性能，例如在正常载荷或者最大载荷情况下平均响应时间。通过两个
指标进行度量，如下： 
a) 应用在一定载荷（Load，例如请求数/秒、事务数/秒、页面数/秒）情况下对最终用户请求的
响应时间； 
b) 应用在一定载荷情况下计算资源消费情况，包括CPU、内存、IO、网络带宽等。通过计算资源
消费情况判断计算资源是否支持指定的载荷，或者建立资源消费情况基线，在应用生命周期中
追踪应用性能变化。 
5.2.2 可用性 
可用性是指在要求的外部资源得到保证的前提下，产品在规定的条件下和规定的时刻或时间区间
内处于可执行规定功能状态的能力。它是产品可靠性、可维护性和维护保障性的综合反映。可用性一般
通过冗余和故障转移的方式获得。 
5.2.2.1 系统可用性 
是指系统服务不中断运行时间占实际运行时间的比例。 
5.2.2.1.1 系统可用性指标 
XX/T XXXXX—XXXX 
5 
系统可用性指标定义为：MTTF/(MTTF+MTTR) * 100% ，其相关的两个指标定义如下： 
MTTF： mean time to failure，平均失效前时间，也就是平均正常运行的时间。 
MTTR： mean time to restoration， 平均恢复前时间,也就是平均故障时间。 
表4 应用性能 
级别 
实际性能 
可用性 
1 
a) 各模块独自处理性能问题，采用
不同的性能方案，性能结果是被
动获得； 
b) 
性能指标散布在日志中，采用手
工方式计算性能指标。 
a) 
应用没有进行冗余设计，不支持
高可用； 
b) 
故障问题没有设计统一的故障恢
复方案； 
2 
a) 对于典型的性能问题进行了个性
化设计，解决局部性能问题； 
b) 
对部分性能指标进行度量； 
c) 
部分性能指标采用个性化方式可
视化； 
a) 
应用部分子系统（例如应用服务
器、数据库、web 服务器等）或者
IT 设施（网络、存储、主机等）进
行冗余和故障转移设计，支持部分
高可用； 
b) 
对于部分可用性故障问题有故障
恢复方案； 
3 
a) 
站在最终用户的视角，对应用进行
系统化性能设计； 
b) 
支持对性能进行全方位度量，从端
到端性能到系统各层性能； 
c) 
支持性能指标实时采集； 
d) 
设计或者采用第三方工具对性能
进行可视化，并支持性能问题追
溯； 
a) 
应用子系统和 IT 设施有系统化的
冗余和故障转移设计，整个系统全
面支持高可用； 
b) 
应用子系统和 IT 设施的设计完整
的故障恢复方案，人工可按照恢复
方案进行故障恢复； 
c) 
设计应用子系统和 IT 设施可用性
检查（健康检查）方案； 
d) 
设计或者采用第三方工具对可用
性可视化； 
4 
a) 
设计或外购统一性能管理支持平
台，支持性能管理循环； 
b) 
建立性能管理制度化机制，平台支
持制度化性能设计流程，支持性能
度量、分析、追溯、定位、响应、
a) 
建立高可用管理支持平台，统一支
持应用子系统和 IT 设施的可用性
监控和预警； 
b) 
建立高可用制度化机制，高可用管
理支持平台可用性管理机制实施； 
XX/T XXXXX—XXXX 
6 
评估性能管理循环； 
c) 平台支持性能问题预警； 
c) 
支持自动化故障恢复过程； 
d) 
支持制度化进行灾备演习，确保故
障恢复方案有效，缩短故障恢复时
间； 
5 
a) 
支持实时性能指标自动分析能力，
对于一些常见性问题能够进行问
题自动定位； 
b) 
对于一些常见的自动定位问题能
够进行智能处理（例如扩容等）； 
c) 
支持制度化评估性能管理机制和
平台，支持卓越性能管理； 
a) 
支持实时可用性自动分析，支持常
见问题自动定位； 
b) 
自动定位的常规问题执行故障自
动恢复； 
c) 
制度化评估可用性管理机制和平
台，支持高可用卓越管理； 
5.3 应用扩展 
应用程序在达到最大负载时，能够支持以下方式进行扩展，以保证系统稳定运行。如表 5 所示。应
用扩展性是应对高并发的重要手段，扩展包括三个维度，如下： 
a) 
X 轴 – 是否支持水平扩张（容量扩展），应用可以复制多个实例，共同提供服务； 
b) 
Y 轴 – 是否支持垂直扩展（服务资源），将应用的不同模块部署在不同的进程中； 
c) 
Z 轴 – 是否支持数据扩展（数据存储），将数据分散在多个存储单元中； 
应用系统的容量需求会随着业务的发展而增加，容量扩展与应用架构相关，当应用架构具备容量扩
展的能力，才能完成容量扩展操作。 
表5 应用扩展 
级别 
水平扩展 
垂直扩展 
1 
a) 
系统容量不支持水平扩展。 
b) 
扩展时系统性能受影响。 
a) 
应用没有进行切分，采用一个巨石架构，所有
功能归集在一个发布包中； 
b) 
应用内部没有或者进行了简单的逻辑分层。 
c) 
部署不可回滚，或者回滚后需要人工进行数据
修复 
d) 
单个子系统部署耗时 30 分钟以上。 
2 
a) 
系统容量支持水平扩展，能够根据
业务的需要通过手工的方式扩展容
量，但扩展到一定容量后无法继续
a) 
应用按照经验进行了简单拆分，将大应用分为
若干独立的子系统，各个子系统独立部署。 
b) 
子系统职责定义清晰，子系统没有分层，控制
XX/T XXXXX—XXXX 
7 
扩展。 
b) 
扩展时系统性能受影响。 
例如：负载均衡的业务系统可以扩展，
但扩展到一定程度后数据库成为瓶颈，
单独扩展业务系统容量无法提升系统容
量。 
循环依赖； 
c) 
单个子系统部署耗时不超过 30 分钟 
d) 
80%业务版本需要多个子系统联动升级，升级
有先后顺序 
3 
系统容量支持水平扩展，能够根据业务
的需要通过手工的方式按需扩展。 
a) 
由架构设计人员采用领域驱动设计方法对应用
进行拆分，定义各个拆分的职责，各个拆分可以
独立继续部署。 
b) 
架构设计人员采用领域驱动定义应用切分分层
及各层职责，各层之间严格控制调用关系（例如
上层可以调用下层或者同层），控制依赖的复杂
性。 
c) 
单个服务系统部署时间不超过 10 分钟。 
d) 