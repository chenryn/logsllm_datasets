the VM, (2) the VM is not in a halted state, and (3) the
VM has enough funds to make any payments speciﬁed by
the assertion. Unanimous assertions are relatively cheap
1358    27th USENIX Security Symposium
USENIX Association
Waiting     (or halted)PendingChallengedBisectedProof OfferedChallengeBisectOne Step ProofAssertionChallengeConfirmationTimeoutTimeoutVerdictUnanimous AssertionVM Creationfor veriﬁers to verify, requiring only checking eligibility
and verifying the managers’ signatures, so they require a
small transaction fee.
In a more complicated case, an assertion is signed by
just one of the managers–a “disputable assertion.” Along
with the assertion, the asserting manager must escrow a
deposit. Such a disputable assertion is not accepted im-
mediately, but rather, if it is eligible, it is published as
pending, and other managers are given a pre-speciﬁed
time interval in which they can challenge the assertion.
(The number of steps allowed in a disputable assertion
is limited to a maximum value that is set as a parame-
ter when the VM is created, to ensure that other man-
agers have enough time to emulate the declared number
of steps of execution before the challenge interval ex-
pires.) If no challenge occurs during the interval, then
the assertion is accepted, the VM is deemed to have made
the asserted state change and taken the asserted actions,
and the asserting manager gets its deposit back.
4.2 The Bisection Protocol
If a manager challenges an assertion, the challenger must
escrow a deposit. Now the asserter and the challenger en-
gage in a game, via a public protocol, to determine who
is incorrect. The party who wins the game will recover
its own deposit, and will take half of the losing party’s
deposit. The other half of the loser’s deposit will go to
the Veriﬁer, as compensation for the work required to
referee the game.
The game is played in alternating steps. After a chal-
lenge is lodged, the asserter is given a pre-speciﬁed time
interval to bisect its previous assertion. If the previous
assertion involved N steps of execution in the VM, then
the two new assertions must involve (cid:98)N/2(cid:99) and (cid:100)N/2(cid:101)
steps, respectively, and the two assertions must combine
to be equivalent to the previous assertion.
If no valid
bisection is offered within the time limit, the challenger
wins the game. After a bisection is offered, the chal-
lenger must challenge one of the two new assertions,
within a pre-speciﬁed time interval.
The two players alternate moves. At each step, a
player must move within a speciﬁed time interval, or
lose the game. Each move requires the player making
the move to make a small additional deposit, which is
added to the stakes of the game.
After a logarithmic number of bisections, the chal-
lenger will challenge an assertion that covers a single
step of execution. At this point the asserter must offer
a one-step proof, which establishes that in the asserted
initial state, and assuming the preconditions, executing a
single instruction in the VM will reach the asserted ﬁnal
state and take the asserted publicly visible actions, if any.
This one-step proof is veriﬁed by the Veriﬁer. See Figure
1 for an overview of the state machine implementing this
protocol.
4.3 The Arbitrum VM Architecture
The Arbitrum VM has been designed to make the Veri-
ﬁer’s task of checking one-step proofs as fast and simple
as possible. In particular, the VM design guarantees that
the space to represent a one-step proof and the time to
generate and verify such a proof are bounded by small
constants, independent of the size and contents of the
program’s code and data.
As an example of an architectural choice to support
constant-bounded proofs,
the AVM does not offer a
large, ﬂat memory space. Providing an efﬁciently up-
datable hash of a large ﬂat memory space would re-
quire the space to be hashed in Merkle Tree style, with
a prover needing to provide Merkle proofs of memory
state, which requires logarithmic proof space and loga-
rithmic time to prove and verify. Instead, the Arbitrum
VM provides a tuple data type that can store up to eight
values, which can contain other tuples recursively. This
allows the same type of tree representation to be built, but
it is built and managed by Arbitrum code running in an
application within the VM. With this design, reading or
writing a memory location requires a logarithmic number
of constant-time-provable Arbitrum instructions (instead
of a single logarithmic-time provable instruction). The
Arbitrum standard library provides a large ﬂat memory
abstraction for programmers’ convenience.
We provide an overview of the VM architecture here.
For a more detailed speciﬁcation, see the extended ver-
sion of this paper.
Types The Arbitrum VM’s optimized operation is fun-
damentally dependent on its type system. In our proto-
type, types include: a special null value None, booleans,
characters (i.e., UTF-8 code points), 64-bit signed inte-
gers, 64-bit IEEE ﬂoating point numbers, byte arrays of
length up to 32, and tuples. A tuple is an array of up to 8
Arbitrum values. The slots of a tuple may hold any value,
including other tuples, recursively, so that a single tuple
might contain an arbitrarily complex tree data structure.
All values are immutable, and the implementation com-
putes the hash of each tuple when it is created, so that
the hash of any value can be (re-)computed in constant
time.4
VM State The state of a VM is organized hierarchi-
cally. This allows a hash of a VM’s state to be computed
4Tuples, and by extension types, are a fundamental aspect of our
VM design. Other non-crucial elements may change. For example,
fewer types might be supported, such as only tuple and integer types.
USENIX Association
27th USENIX Security Symposium    1359
in Merkle Tree fashion, and to be updated incrementally.
The state hash can be updated efﬁciently as the machine’s
state changes, because the VM architecture ensures that
instructions can only modify items near the root of the
state tree and that each node of the state tree has a degree
of no more than eight.
The state of a VM contains the following elements:
• an instruction stack, which encodes the current pro-
gram counter and instructions (as described below);
• a data stack5 of values;
• a call stack, used to store the return information for
procedure calls;
• a static constant, which is immutable; and
• a single mutable register which holds one value.
When a VM is initialized, the instruction stack and static
constant are initialized from the Arbitrum executable ﬁle;
the data and call stacks are both empty; and the register
is None. Note that because a single value can hold an
arbitrary amount of data through recursive inclusion of
tuples, the static constant can hold arbitrary amounts of
constant data for use in a program, and the single regis-
ter can be used to manage a mutable structure contain-
ing an arbitrary amount of data. Many programmers will
choose to use a ﬂat memory abstraction, built on top of
such a mutable structure, such as the one provided in the
Arbitrum standard library.
Instructions The VM uses a stack-based architecture.
VM instructions exist to manipulate the top of the stack,
push small integers onto the stack, perform arithmetic
and logic operations at the top of the stack, convert be-
tween types, compute the hash of a value, compute a sub-
sequence of a byte array, and concatenate byte arrays.
Control ﬂow instructions include conditional jump, pro-
cedure call, and return. Instructions to operate on tuples
include an instruction to a create new tuple ﬁlled with
None, to read a slot from a tuple, and to copy a tuple
while modifying the value of one slot. Finally, there are
instructions to interact with other parties, which are de-
scribed below.
The Instruction Stack Rather than using a conven-
tional program counter, Arbitrum maintains an “instruc-
tion stack” which holds the instructions in the remain-
der of the program. Rather than advancing the program
counter through a list of instructions, the Arbitrum VM
pops the instruction stack to get the next instruction to
5A stack is represented as either None, representing an empty stack,
or a 2-tuple (top, rest) where top is the value on top of the stack and
rest is the rest of the stack, in the same format.
execute. (If the instruction stack is empty, the VM halts.)
Jump and procedure call instructions change the instruc-
tion stack, with procedure call storing the old instruction
stack (pushing a copy of the instruction stack onto the
call stack) so that it can be restored on procedure return.
This approach allows a one-step proof to use constant
space and allows veriﬁcation of the current instruction
and the next instruction stack value in constant time. 6
Because a stack can be represented as a linked list,
AVM implementations will likely follow our prototype
implementation by arranging all of the instructions in a
program into a single linked list and maintaining the in-
struction stack value as a pointer into that linked list.
The Assembler and Loader The Arbitrum assembler
takes a program written in Arbitrum assembly language
and translates it into an Arbitrum executable. The assem-
bler provides various forms of syntactic sugar that make
programming somewhat easier, including control struc-
tures such as if/else statements, while loops, and clo-
sures. The assembler also supports inclusion of library
ﬁles, such as those in the standard library.
The Standard Library The standard library is a set of
useful facilities written in Arbitrum assembly code.
It
contains about 3000 lines of Arbitrum assembly code,
and supports useful data structures such as vectors of
arbitrary size, key-value stores, an abstraction of a ﬂat
memory space on top of the register, and handling of time
and incoming messages.
Interacting with other VMs or keys A VM interacts
with other parties by sending and receiving messages. A
message consists of a value, an amount of currency, and
the identity of the sender and receiver. The send instruc-
tion takes values from the top of the stack and sends them
as a message. If the message is not valid, for example be-
cause it tries to send more currency than the VM owns,
the invalid message will be discarded rather than sent.
A program uses the inbox instruction to copy the ma-
chine’s message inbox to the stack. The standard library
contains code to help manage incoming messages includ-
ing tracking when new messages arrive and serving them
one by one to the application.
The balance instruction allows a VM to determine
how much currency it owns, and the time instruction al-
6A more conventional approach would keep an integer program
counter, a linear array of instructions, and a pre-computed Merkle tree
hash over the instruction array. Then a one-step proof would use a
Merkle-tree proof to prove which instruction was under the current
program counter. This would require logarithmic (in the number of
instructions) space and logarithmic checking time for a one-step proof.
By contrast our approach requires constant time and space.
1360    27th USENIX Security Symposium
USENIX Association
Figure 2: Information revealed in a one step proof of an add instruction. Outer boxes rounded represent value
hashes and inner square boxes represent the values themselves. Gray boxes are values that are sent by the asserter to
the veriﬁer in the one-step proof.
lows a VM to get upper and lower bounds on the current
time.
Preconditions, Assertions, and One-Step Proofs As
described above, an assertion is a claim about an interval
of a VM’s execution. Each assertion is accompanied by
a set of preconditions consisting of: a hash of the VM’s
state before the asserted execution, a hash of the VM’s in-
box contents, an optional lower bound on the VM’s cur-
rency balance, and optional lower and upper bounds on
the time (measured in block height). An assertion will be
ignored as ineligible unless all of it preconditions hold.
(Parties may choose to store an ineligible assertion in the
hope that it becomes eligible later.)
In addition to preconditions, an assertion contains the
following components: the hash of the machine state af-
ter the execution, the number of instructions executed,
and the sequence of messages emitted by the VM.
The Arbitrum protocol may require a party to provide
a one-step proof, which is a proof of correctness, assum-
ing a set of preconditions, for an assertion covering the
execution of a single instruction. A one-step proof must
provide enough information, beyond the preconditions,
to enable the Veriﬁer to emulate the single instruction
that will be executed. Because the state of the VM is
organized as a Merkle Tree, and the starting state hash
of the VM, which is just the root hash of that Merkle
Tree, is given as a precondition, the proof need only ex-
pand out enough of the initial state Merkle tree to enable
the Veriﬁer to emulate execution of the single instruction,
compute the unique assertion that results from executing
that one instruction given the preconditions, and verify
that it matches the claimed assertion.
A one-step proof expands out any parts of the state
tree that are needed by the Veriﬁer. For example, sup-
pose that the instruction to be executed pops an item off
the stack. Recall that the stack is represented as None
for the empty stack, and otherwise as a 2-tuple (top, rest)
where top is the top item on the stack and rest is the rest
of the stack. In this example, if the stack hash is equal
to the hash of None, then the Veriﬁer will know that the
stack is empty. Otherwise the prover will need to provide
the hashes of top and rest, allowing the Veriﬁer to check
that those two hashes combine to yield the expected stack
hash. Similarly, if the instruction is supposed to add two
values, and the Veriﬁer only has the hashes of the values,
the proof must include the two values. In all cases the
prover provides values that the Veriﬁer will need to emu-
late the speciﬁed instruction, and the Veriﬁer checks that
the provided values are consistent with the hashes that
the Veriﬁer has already received. The Arbitrum VM em-
ulator used by the prover automatically determines which
elements must be provided in the proof. See Figure 2 for
an illustration of the information revealed to a Veriﬁer
during a one step proof of an add instruction.
Messages and the Inbox Messages can be sent to a
VM in two ways: a key can send a message by putting a
special message delivery transaction on the blockchain;
and another VM can send a message by using the send
instruction. A message logically has four ﬁelds: data,
which is an AVM value (marshaled into a byte array
on the blockchain); a non-negative amount of currency,
which is to be transferred from the sender to the receiver;
and the identities of the sender and receiver of the mes-
sage.
Every VM has an inbox whose hash is tracked by the
Veriﬁer. An empty inbox is represented as the AVM
value None. A new message M can be appended to a
VM’s inbox by setting the inbox to a 2-tuple (prev, M),
USENIX Association
27th USENIX Security Symposium    1361
State Root  Data StackCall StackInstruction StackStaticRegister 53????Add?TopRestTopRestTopRestwhere prev is the previous state of the inbox. A VM can
execute the inbox instruction which pushes the current
value of the VM’s inbox onto the VM’s stack.
A VM’s managers track the state of its inbox, but the
Veriﬁer only needs to track the hash of the inbox, be-
cause that is all that will be needed to verify a one-step
proof of the VM receiving the inbox contents. If the VM
later processes the inbox contents, and a one-step proof
of some step of that processing is needed, the managers
will be able to provide any values needed.
Because the inbox instruction gives the VM an inbox
state that may be a linked list of multiple messages, pro-
grammers may wish to buffer those messages inside the
VM to provide an abstraction of receiving one message