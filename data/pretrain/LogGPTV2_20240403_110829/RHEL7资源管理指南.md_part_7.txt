~]# systemctl stop cgconfig
```
::: para
然后打开并编写配置文件。保存更改后，您可以用以下指令再次启动
`cgconfig`{.systemitem}：
:::
``` screen
~]# systemctl start cgconfig
```
:::
:::
### [⁠]{#chap-Using_libcgroup_Tools.html#sec-Using_the_cgset_Command}使用 cgset 指令
::: para
获得修改相关 cgroup 的权限后，请运行用户账户中的 `cgset`{.command}
指令来设定管控器参数。请仅对手动挂载的管控器使用此指令。
:::
::: para
`cgset`{.command} 的句法为：
:::
``` screen
cgset -r parameter=value path_to_cgroup
```
::: para
其中：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    *parameter* 是要设定的参数，它与给定 cgroup 目录中的文件对应；
    :::
-   ::: para
    *value* 是参数值；
    :::
-   ::: para
    *path_to_cgroup* 是"[*与层级的根相对*]{.emphasis}"的 cgroup 路径。
    :::
:::
::: para
`cgset`{.command}
设定的值可能会受限于一个特定层级所设定的更高值。例如，在一个系统中，如果
`group1`{.filename} 被限定仅可使用 CPU 0，那您就不能设定
`group1/subgroup1`{.filename} 使用 CPU 0 和 1，或者仅使用 CPU 1。
:::
::: para
您也可以使用 `cgset`{.command} 将一个 cgroup 的参数复制到另一个已有
cgroup 中。使用 `cgset`{.command} 复制参数的句法是:
:::
``` screen
cgset --copy-from path_to_source_cgroup path_to_target_cgroup
```
::: para
其中：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    *path_to_source_cgroup* 是要复制其参数的 cgroup
    路径，相对层级的根群组；
    :::
-   ::: para
    *path_to_target_cgroup* 是目标 cgroup 的路径，相对层级的根群组。
    :::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Using_libcgroup_Tools.html#sec-Moving_a_Process_to_a_Control_Group}3.6. 将进程移至控制群组 {.title}
:::
::: para
您可以运行 `cgclassify`{.command} 指令将进程移动到 cgroup 中：
:::
``` screen
cgclassify -g controllers:path_to_cgroup pidlist
```
::: para
其中：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    *controllers* 是资源控制器列表，以逗号分隔；或者使用 `*`{.literal}
    来启动与所用可用子系统相关的层级中的进程。请注意，如果几个 cgroup
    的名称相同，`-g`{.option} 选项会将进程移至这些群组的每一个。
    :::
-   ::: para
    *path_to_cgroup* 是层级中 cgroup 的路径；
    :::
-   ::: para
    *pidlist* 是 *process identifier*（PID）的列表，以空格隔开。
    :::
:::
::: para
如果没有明确 `-g`{.option} 选项，`cgclassify`{.command} 会自动搜索
`/etc/cgrules.conf`{.filename}，并且使用第一个适用配置行。根据此配置行，`cgclassify`{.command}
会确定进程将移至的层级和
cgroup。请注意，为确保移动成功，目标层级必须存在。`/etc/cgrules.conf`{.filename}
指定的子系统也必须被合理配置来回应 `/etc/cgconfig.conf`{.filename}
中的层级。
:::
::: para
您还可以在 *pid* 前面添加 `--sticky`{.option}
选项以保证所有子进程位于同一 cgroup 中。如果您没有设定这个选项且
[**cgred**]{.application} 服务正在运行，则子进程会根据
`/etc/cgrules.conf`{.filename} 中的设置被分配到 cgroup
中。而该进程本身仍保留在启动它的 cgroup 中。
:::
::: para
您还可以使用 [**cgred**]{.application} 服务（`cgrulesengd`{.systemitem}
后台驻留程序启动服务），此服务会根据 `/etc/cgrules.conf`{.filename}
文件中设定的参数将任务移至 cgroup。请仅将 [**cgred**]{.application}
用于管理手动附加的管控器。`/etc/cgrules.conf`{.filename}
文件条目的形式可以是以下两种之一：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    *user* *subsystems* *control_group*；
    :::
-   ::: para
    *user*:*command* *subsystems* *control_group*。
    :::
:::
::: para
例如：
:::
``` programlisting
maria			net_prio		/usergroup/staff
```
::: para
此条目指定任何属于名为 `maria`{.literal} 用户的进程，都可以根据
`/usergroup/staff`{.literal} cgroup 指定的参数存取
`devices`{.systemitem} 子系统。要将特定指令与具体 cgroup 关联，请添加
*command* 参数，如下：
:::
``` programlisting
maria:ftp		devices		/usergroup/staff/ftp
```
::: para
此条目现指定，当名为 `maria`{.literal} 的用户使用 `ftp`{.command}
指令时，该进程将被自动移动到包含 `devices`{.systemitem} 子系统的层级的
`/usergroup/staff/ftp`{.systemitem} cgroup
中。然而，请注意：只有在符合适当条件后，后台驻留程序才可将该进程移动到
cgroup 中。因此，`ftp`{.command}
进程可能会在错误的群组中短暂运行。另外，如果该进程在错误群组中迅速生成子进程，这些子进程可能不会被移动。
:::
::: para
`/etc/cgrules.conf`{.filename} 文件中的条目可包括以下额外符号：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `@`{.literal} ------ 被用作 *user*
    前缀时，它代表一个群组而不是单独用户。例如：`@admins`{.literal} 表示
    `admins`{.literal} 组群中的所有用户。
    :::
-   ::: para
    `*`{.literal} ------ 代表"所有"。例如：`subsystem`{.literal}
    字段中的 `*`{.literal} 代表所有子系统。
    :::
-   ::: para
    `%`{.literal} ------ 代表与上一行相同的项目。例如：
    :::
    ``` programlisting
    @adminstaff	net_prio   /admingroup
    @labstaff	%	  %
    ```
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Using_libcgroup_Tools.html#Starting_a_Process}3.7. 启动控制群组的进程 {.title}
:::
::: para
您可以通过运行 `cgexec`{.command} 指令在手动创建的 cgroup
中启动进程。`cgexec`{.command} 的语法为：
:::
``` screen
cgexec -g controllers:path_to_cgroup command arguments
```
::: para
其中：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    *controllers* 是管控器列表，以逗号分隔；或者使用 `*`{.literal}
    来启动与所用可用子系统相关的层级中的进程。请注意，与〈[第 3.5 节
    "设定 cgroup
    参数"](#chap-Using_libcgroup_Tools.html#sec-Setting_Cgroup_Parameters){.xref}〉所描述的
    `cgset`{.command} 指令一样，如果几个 cgroup
    的名称相同，`-g`{.option} 选项会在每一个 cgroup 中都创建进程；
    :::
-   ::: para
    *path_to_cgroup* 是与层级相对的 cgroup 路径；
    :::
-   ::: para
    *command* 是要在该 cgroup 中执行的指令；
    :::
-   ::: para
    *arguments* 是该指令的所有参数。
    :::
:::
::: para
您也可以在 *command* 前添加 `--sticky`{.option}
选项，以便让所有子进程位于同一个 cgroup 中。如果您没有设定此选项且
[**cgred**]{.application} 后台驻留程序正在运行，子进程将会根据
`/etc/cgrules.conf`{.filename} 中的设定被分配到 cgroup 中。
而进程本身会保留在启动它的 cgroup 中。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Using_libcgroup_Tools.html#sec-Obtaining_Information_About_Control_Groups-libcgroup}3.8. 获区关于控制群组的信息 {.title}
:::
::: para
[libcgroup-tools]{.package}
数据包包含一些使用工具，这些工具用于获取与管控器、控制群组以及控制群组参数有关的信息。
:::
### [⁠]{#chap-Using_libcgroup_Tools.html#Listing_Controllers}将管控器列表
::: para
如要查找 kernel
中可用的管控器，并了解这些管控器如何被一起挂载至层级，请执行：
:::
``` screen
cat /proc/cgroups
```
::: para
如要查找特定子系统的挂载点，请执行下列指令：
:::
``` screen
lssubsys -m controllers
```
::: para
此处，*controllers*
代表您感兴趣的子系统列表。请注意，`lssubsys -m`{.command}
指令仅返回每一个层级的顶级挂载点。
:::
### [⁠]{#chap-Using_libcgroup_Tools.html#Finding_Control_Groups}查找控制群组
::: para
如要将系统中的 cgroup 列表，请以 `root`{.systemitem} 身份执行：
:::
``` screen
lscgroup
```
::: para
如要限定一个层级的输出，请以 `controller:path`{.literal}
的格式指定管控器和路径。例如：
:::
``` screen
~]$ lscgroup cpuset:adminusers
```
::: para
以上指令仅列出了层级（附加了`cpuset`{.systemitem} 控制器的层级）中
`adminusers`{.filename} cgroup 的子群组。
:::
### [⁠]{#chap-Using_libcgroup_Tools.html#Displaying_Parameters_of_Control_Groups}显示控制群组的参数
::: para
如要显示一个 cgroup 的参数，请运行：
:::
``` screen
~]$ cgget -r parameter list_of_cgroups
```
::: para
此处，*parameter* 是一个包含管控器值的伪文件，*list_of_cgroups*
是管控器列表（以逗号分隔）。
:::
::: para
如果您不知道实际参数的名称，请使用与以下相似的指令：
:::
``` screen
~]$ cgget -g cpuset /
```
:::
::: section
::: titlepage
# [⁠]{#chap-Using_libcgroup_Tools.html#sec-Using_libcgroup_Tools-Additional_Resources}3.9. 附加资源 {.title}
:::
::: para
如需要 cgroup 指令的最终文档，请在 [libcgroup]{.package} 数据包提供的
manual page 中查找。
:::
### [⁠]{#chap-Using_libcgroup_Tools.html#br-Using_libcgroup_Tools-Installed_Documentation}已安装的文档
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
[⁠]{#chap-Using_libcgroup_Tools.html#itemlist-The_libcgroup_Man_Pages}
**与 libcgroup 相关的 manual page**
-   ::: para
    `cgclassify`{.systemitem}(1) ------ `cgclassify`{.command}
    指令用于将正在运行的任务移至一个或多个 cgroup 中。
    :::
-   ::: para
    `cgclear`{.systemitem}(1) ------ `cgclear`{.command}
    指令用于删除层级中的全部 cgroup。
    :::