        Usage:  INC     dest  
        Modifies flags: AF OF PF SF ZF  
        Adds one to destination unsigned binary operand.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg8              3     2     2     1             2         reg16             3     2     2     
1             1         reg32             3     2     2     1             1  
        mem             15+EA   7     6     3            2-4  (W88=23+EA)  
INS - Input String from Port  (80188+)  
        Usage:  INS     dest,port  
网络安全屋 
                INSB  
                INSW  
                INSD    (386+)  
        Modifies flags: None  
        Loads data from port to the destination ES:(E)DI  (even if a         
destination operand is supplied).  (E)DI is adjusted by the size         of the 
operand and increased if the Direction Flag is cleared and         decreased 
if the Direction Flag is set.  For INSB, INSW, INSD no         operands are 
allowed and the size is determined by the mnemonic.  
                                 Clocks                 Size  
        Operands         808x  286   386    486         Bytes  
        dest,port         -     5     15     17           1         dest,port (PM)    -     
5    9/29 10/32/30        1         none              -     5     15     17           1         
none (PM)         -     5    9/29 10/32/30        1  
        - 386+ protected mode timings depend on privilege levels.  
          first number is the timing if:    CPL ?IOPL  
          second number is the timing if:   CPL > IOPL  
          third number is the timing if:    virtual mode on 486 processor  
INT - Interrupt  
        Usage:  INT     num  
        Modifies flags: TF IF  
        Initiates a software interrupt by pushing the flags, clearing the  
        Trap and Interrupt Flags, pushing CS followed by IP and loading         
CS:IP with the value found in the interrupt vector table.  Execution         
then begins at the location addressed by the new CS:IP  
                                               Clocks           Size  
            Operands                    808x  286   386   486   Bytes  
 3 (constant)                          52/72  23+m   33    26     2  
 3 (prot. mode, same priv.)              -    40+m   59    44     2         
 3 (prot. mode, more priv.)              -    78+m   99    71     2  
 3 (from VM86 to PL 0)                   -     -    119    82     2  3 (prot. mode via task 
gate)            -   167+m   TS  37+TS    2  immed8                                51/71  23+m   
37    30     1  immed8 (prot. mode, same priv.)         -    40+m   59    44     1  
immed8 (prot. mode, more priv.)         -    78+m   99    71     1  immed8 (from 
VM86 to PL 0)              -     -    119    86     1  immed8 (prot. mode, via task gate)      
-   167+m   TS  37+TS    1  
INTO - Interrupt on Overflow  
        Usage:  INTO  
网络安全屋 
        Modifies flags: IF TF  
        If the Overflow Flag is set this instruction generates an INT 4         
which causes the code addressed by 0000:0010 to be executed.  
                                          Clocks           Size  
        Operands                808x    286   386   486    Bytes  
        none: jump             53/73   24+m    35    28      1               no jump            
4       3     3     3         (prot. mode, same priv.) -       -     59    46      1  
        (prot. mode, more priv.) -       -     99    73      1  
        (from VM86 to PL 0)      -       -    119    84      1  
        (prot. mode, via task gate)      -     TS  39+TS     1  
INVD - Invalidate Cache  (486+)  
        Usage:  INVD  
        Modifies flags: none  
        Flushes CPU internal cache.  Issues special function bus cycle         
which indicates to flush external caches.   Data in write-back         external 
caches is lost.  
                                  Clocks                Size 
        Operands         808x   286   386   486         Bytes  
        none              -      -     -     4            2  
INVLPG - Invalidate Translation Look-Aside Buffer Entry (486+)  
        Usage:  INVLPG  
        Modifies flags: none  
        Invalidates a single page table entry in the Translation         Look-
Aside Buffer.  Intel warns that this instruction may be         implemented 
differently on future processors.  
                                  Clocks                Size  
        Operands         808x   286   386   486         Bytes  
        none              -      -     -     12           2  
        - timing is for TLB entry hit only.  
IRET/IRETD - Interrupt Return  
        Usage:  IRET  
                IRETD  (386+)  
        Modifies flags: AF CF DF IF PF SF TF ZF  
网络安全屋 
        Returns control to point of interruption by popping IP, CS         and 
then the Flags from the stack and continues execution at         this 
location.  CPU exception interrupts will return to the         instruction 
that cause the exception because the CS:IP placed         on the stack 
during the interrupt is the address of the offending         instruction.  
                                         Clocks                 Size  
            Operands            808x   286   386   486          Bytes  
    iret                       32/44  17+m    22    15            1     iret  (prot. mode)           
-    31+m    38    15            1     iret  (to less privilege)    -    55+m    82    36            
1     iret  (different task, NT=1) -   169+m    TS  TS+32           1     iretd                        
-      -   22/38   15            1     iretd (to less privilege)    -      -     82    36            
1     iretd (to VM86 mode)         -      -     60    15            1     iretd (different 
task, NT=1) -      -     TS  TS+32           1  
    - 386 timings are listed as real-mode/protected-mode  
Jxx - Jump Instructions Table  
        Mnemonic              Meaning                    Jump Condition  
          JA     Jump if Above                         CF=0 and ZF=0  
          JAE    Jump if Above or Equal                CF=0  
          JB     Jump if Below                         CF=1 
          JBE    Jump if Below or Equal                CF=1 or ZF=1  
          JC     Jump if Carry                         CF=1  
          JCXZ   Jump if CX Zero                       CX=0  
          JE     Jump if Equal                         ZF=1  
          JG     Jump if Greater (signed)              ZF=0 and SF=OF  
          JGE    Jump if Greater or Equal (signed)     SF=OF  
          JL     Jump if Less (signed)                 SF != OF  
          JLE    Jump if Less or Equal (signed)        ZF=1 or SF != OF  
          JMP    Unconditional Jump                    unconditional  
          JNA    Jump if Not Above                     CF=1 or ZF=1  
          JNAE   Jump if Not Above or Equal            CF=1  
          JNB    Jump if Not Below                     CF=0  
          JNBE   Jump if Not Below or Equal            CF=0 and ZF=0  
          JNC    Jump if Not Carry                     CF=0  
          JNE    Jump if Not Equal                     ZF=0  
          JNG    Jump if Not Greater (signed)          ZF=1 or SF != OF  
          JNGE   Jump if Not Greater or Equal (signed) SF != OF  
          JNL    Jump if Not Less (signed)             SF=OF  
          JNLE   Jump if Not Less or Equal (signed)    ZF=0 and SF=OF  
          JNO    Jump if Not Overflow (signed)         OF=0  
          JNP    Jump if No Parity                     PF=0  
          JNS    Jump if Not Signed (signed)           SF=0  
          JNZ    Jump if Not Zero                      ZF=0  
          JO     Jump if Overflow (signed)             OF=1  
          JP     Jump if Parity                        PF=1  
网络安全屋 
          JPE    Jump if Parity Even                   PF=1  
          JPO    Jump if Parity Odd                    PF=0           JS     Jump if 
Signed (signed)               SF=1  
          JZ     Jump if Zero                          ZF=1  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        Jx: jump          16   7+m   7+m    3             2             no jump        4    
3     3     1  
        Jx  near-label     -    -    7+m    3             4             no jump        -    
-     3     1  
- It's a good programming practice to organize code so the           expected 
case is executed without a jump since the actual           jump takes longer 
to execute than falling through the test.  
- see   JCXZ  and  JMP  for their respective timings  
JCXZ/JECXZ - Jump if Register (E)CX is Zero  
        Usage:  JCXZ    label  
                JECXZ   label  (386+)  
        Modifies flags: None  
        Causes execution to branch to "label" if register CX is zero.  Uses         
unsigned comparision.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        label:  jump      18   8+m   9+m    8             2                 no jump    6    
4     5     5  
JMP - Unconditional Jump  
        Usage:  JMP     target  
        Modifies flags: None  
        Unconditionally transfers control to "label".  Jumps by default         are within -
32768 to 32767 bytes from the instruction following         the jump.  NEAR and 
SHORT jumps cause the IP to be updated while FAR         jumps cause CS and IP to 
be updated.  
                                                        Clocks  
                   Operands                     808x  286    386   486  
        rel8  (relative)                        15    7+m    7+m    3         rel16 (relative)                        
15    7+m    7+m    3         rel32 (relative)                         -     -     7+m    3         reg16 
(near, register indirect)         11    7+m    7+m    5         reg32 (near, register indirect)          
-     -     7+m    5         mem16 (near, mem indirect)             18+EA  11+m  10+m    5         
网络安全屋 
mem32 (near, mem indirect)             24+EA  15+m  10+m    5         ptr16:16 (far, dword 
immed)              -     -    12+m    17         ptr16:16 (far, PM dword immed)           -     -    
27+m    19         ptr16:16 (call gate, same priv.)         -    38+m  45+m    32         ptr16:16 
(via TSS)                       -   175+m   TS   42+TS         ptr16:16 (via task gate)                 -   
180+m   TS   43+TS         mem16:16 (far, indirect)                 -     -    43+m    13         
mem16:16 (far, PM indirect)              -     -    31+m    18         mem16:16 (call gate, 
same priv.)         -    41+m  49+m    31         mem16:16 (via TSS)                       -   
178+m  5+TS  41+TS         mem16:16 (via task gate)                 -   183+m  5+TS  
42+TS         ptr16:32 (far, 6 byte immed)             -     -    12+m    13  
        ptr16:32 (far, PM 6 byte immed)          -     -    27+m    18         ptr16:32 (call gate, 
same priv.)         -     -    45+m    31         ptr16:32 (via TSS)                       -     -     TS   
42+TS         ptr16:32 (via task state)                -     -     TS   43+TS         m16:32 (far, 
address at dword)           -     -    43+m    13         m16:32 (far, address at dword)           
-     -    31+m    18         m16:32 (call gate, same priv.)           -     -    49+m    31         
m16:32 (via TSS)                         -     -    5+TS  41+TS         m16:32 (via task state)                  
-     -    5+TS  42+TS  
LAHF - Load Register AH From Flags  
        Usage:  LAHF  
        Modifies flags: None  
        Copies bits 0-7 of the flags register into AH.  This includes flags         
AF, CF, PF, SF and ZF other bits are undefined.  
        AH := SF ZF xx AF xx PF xx CF  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        none              4     2     2     3             1  
LAR - Load Access Rights (286+ protected)  
        Usage:  LAR     dest,src  
        Modifies flags: ZF  
        The high byte of the of the destination register is overwritten by         the 
value of the access rights byte and the low order byte is zeroed         
depending on the selection in the source operand.  The Zero Flag is         set 
if the load operation is successful.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg16,reg16       -     14    15    11            3         reg32,reg32       -     -     
15    11            3         reg16,mem16       -     16    16    11           3-7         
reg32,mem32       -     -     16    11           3-7  
网络安全屋 
LDS - Load Pointer Using DS  
        Usage:  LDS     dest,src  
        Modifies flags: None  
        Loads 32-bit pointer from memory source to destination register         and 
DS.  The offset is placed in the destination register and the         segment is 
placed in DS.  To use this instruction the word at the         lower memory 
address must contain the offset and the word at the         higher address must 
contain the segment.  This simplifies the loading         of far pointers from the 
stack and the interrupt vector table.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg16,mem32     16+EA   7     7     6            2-4         reg,mem (PM)      
-     -     22    12           5-7  
LEA - Load Effective Address  
        Usage:  LEA     dest,src  
        Modifies flags: None  
        Transfers offset address of "src" to the destination register.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg,mem          2+EA   3     2     1            2-4  
        - the MOV instruction can often save clock cycles when used in           
place of LEA on 8088 processors  
LEAVE - Restore Stack for Procedure Exit (80188+)  
        Usage:  LEAVE  
        Modifies flags: None  
        Releases the local variables created by the previous ENTER         
instruction by restoring SP and BP to their condition before         the 
procedure stack frame was initialized.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        none              -     5     4     5             1  
LES - Load Pointer Using ES  
网络安全屋 
        Usage:  LES     dest,src  
        Modifies flags: None  
        Loads 32-bit pointer from memory source to destination register         and 
ES.  The offset is placed in the destination register and the         segment is 
placed in ES.  To use this instruction the word at the         lower memory 
address must contain the offset and the word at the         higher address must 
contain the segment.  This simplifies the loading         of far pointers from the 