GET /cart/action.php?action=add&picid=7
GET /cart/action.php?action=add&picid=8
GET /cart/action.php?action=add&picid=9
GET /cart/action.php?action=add&picid=14
GET /cart/action.php?action=add&picid=15
1756
GET /cart/action.php?action=add&picid=7
GET /cart/action.php?action=add&picid=8
GET /cart/action.php?action=add&picid=9
GET /cart/action.php?action=add&picid=14
GET /cart/action.php?action=add&picid=15
1769
GET /cart/action.php?action=add&picid=7
GET /cart/action.php?action=add&picid=8
GET /cart/action.php?action=add&picid=9
GET /cart/action.php?action=add&picid=14
GET /cart/action.php?action=add&picid=15
1782
GET /cart/action.php?action=add&picid=7
GET /cart/action.php?action=add&picid=8
GET /cart/action.php?action=add&picid=9
GET /cart/action.php?action=add&picid=14
GET /cart/action.php?action=add&picid=15
POST /cart/action.php?action=purchase
GET /users/logout.php
POST /users/login.php
POST /users/register.php
GET /users/logout.php
GET /cart/action.php?action=add&picid=7
GET /cart/action.php?action=add&picid=8
GET /cart/action.php?action=add&picid=9
GET /cart/action.php?action=add&picid=14
GET /cart/action.php?action=add&picid=15
GET /users/logout.php
884
1256
POST /comments/add_comment.php
GET /cart/action.php?action=add&picid=7
GET /cart/action.php?action=add&picid=8
GET /cart/action.php?action=add&picid=9
GET /cart/action.php?action=add&picid=14
GET /cart/action.php?action=add&picid=15
POST /comments/add_comment.php
POST /users/login.php
POST /users/register.php
1389
889
POST /comments/add_comment.php
894
Figure 7: State machine that state-aware-scanner inferred for WackoPicko v2.
Halfond et al. developed a traditional black-box vul-
nerability scanner, but improved its result by leveraging
a static analysis technique to better identify input vec-
tors [22].
Pixy [28] employed static analysis with taint propa-
gation in order to detect SQL injection, XSS and shell
command injection, while Saner [4] used sound static
analysis to detect failures in sanitization routines. Saner
also takes advantage of a second phase of dynamic anal-
ysis to reduce false positives. Similarly, WebSSARI [25]
also employed static analysis for detecting injection vul-
nerabilities, but, in addition, it proposed a technique for
runtime instrumentation of the web application through
the insertion of proper sanitization routines.
Felmetsger et al. investigated an approach for detect-
ing a different type of vulnerability (some categories of
logic ﬂaws) by combining execution traces and symbolic
model checking [17]. Similar approaches are also used
for generic bug ﬁnding (in fact, vulnerabilities could be
considered a subset of the general bug category). Csall-
ner et al. employ dynamic traces for bug ﬁnding and for
dynamic veriﬁcation of the alerts generated by the static
analysis phase [12]. Artzi et al., on the other hand, use
symbolic execution and model checking for ﬁnding gen-
eral bugs in web applications [3].
On a completely separate track, efforts to improve web
application security push the developers toward writing
secure code in the ﬁrst place. Security experts are ty-
ing to achieve this goal by either educating the devel-
opers [40] or designing frameworks which prohibit the
use of bad programming practices and enforce some se-
curity constraints in the code. Robertson and Vigna de-
veloped a strongly-typed framework which statically en-
forces separation between structure and content of a web
page, preventing XSS and SQL injection [38]. Also
Chong et al. designed their language for developers to
build web applications with strong conﬁdentiality and
integrity guarantees, by means of compile-time and run-
time checks [10].
Alternatively, consequences of vulnerabilities in web
applications can be mitigated by trying to prevent the
attacks before they reach some potentially vulnerable
code, like, for example, in the already mentioned Web-
SSARI [25] work. A different approach for blocking at-
tacks is followed by Scott and Sharp, who developed a
language for specifying a security policy for the web ap-
plication; a gateway will then enforce these policies [39].
Another interesting research track deals with the prob-
lem of how to explore web pages behind forms, also
called the hidden web [36]. McAllister et al. monitor
user interactions with a web application to collect sen-
sible values for HTML form submission and generate
test cases that can be replayed to increase code cover-
age [32]. Although not targeted to security goals, the
work of Raghavan and Garcia-Molina is relevant for our
project for their contribution in classiﬁcation of different
types of dynamic content and for their novel approach
for automatically ﬁlling forms by deducing the domain
of form ﬁelds [36]. Raghavan and Garcia-Molina car-
ried out further research in this direction, by reconstruct-
ing complex and hierarchical query interfaces exposed
by web applications.
Moreover, Amalﬁtano et al. started tackling the prob-
lem of reverse engineering the state machine of client-
side AJAX code, which will help in ﬁnding the web ap-
plication server-side entry points and in better understat-
ing complex and hierarchical query interfaces [2].
Finally, we need to mention the work by Berg et al.
in reversing state machines into a Symbolic Mealy Ma-
chine (SMM) model [7]. Their approach for reversing
machines cannot be directly applied to our case because
of the infeasibility of fully exploring all pages for all the
states, even for a small subset of the possible states. Nev-
ertheless, the model they propose for a SMM ﬁts our
needs.
9 Conclusion
We have described a novel approach to inferring, as
much as possible, a web application’s internal state ma-
chine. We leveraged the state machine to drive the state-
aware fuzzing of web applications. Using this approach,
our crawler is able to crawl—and thus fuzz—more of the
web application than a classical state-agnostic crawler.
We believe our approach to detecting state change by dif-
ferences in output for an identical response is valid and
should be adopted by all black-box tools that wish to un-
derstand the web application’s internal state machine.
Acknowledgements
This work was supported by the Ofﬁce of Naval Research
(ONR) under Grant N000141210165, the National Sci-
ence Foundation (NSF) under grant CNS-1116967, and
by Secure Business Austria.
References
[1] ACUNETIX. Acunetix Web Vulnerbility Scanner. http://www.
acunetix.com/.
[2] AMALFITANO, D., FASOLINO, A., AND TRAMONTANA, P. Re-
verse Engineering Finite State Machines from Rich Internet Ap-
plications. In 2008 15th Working Conference on Reverse Engi-
neering (2008), IEEE, pp. 69–73.
[3] ARTZI, S., KIEZUN, A., DOLBY, J., TIP, F., DIG, D., PARAD-
KAR, A., AND ERNST, M. Finding bugs in web applications
using dynamic test generation and explicit state model checking.
IEEE Transactions on Software Engineering (2010).
[4] BALZAROTTI, D., COVA, M., FELMETSGER, V., JOVANOVIC,
N., KIRDA, E., KRUEGEL, C., AND VIGNA, G. Saner: Com-
posing Static and Dynamic Analysis to Validate Sanitization in
Web Applications.
In 2008 IEEE Symposium on Security and
Privacy (2008), IEEE, pp. 387–401.
[5] BALZAROTTI, D., COVA, M., FELMETSGER, V., AND VIGNA,
G. Multi-module Vulnerability Analysis of Web-based Applica-
tions. In Proceedings of the ACM conference on Computer and
Communications Security (CCS) (2007), pp. 25–35.
[6] BAU, J., BURSZTEIN, E., GUPTA, D., AND MITCHELL, J. State
of the Art: Automated Black-Box Web Application Vulnerability
Testing. In Security and Privacy (SP), 2010 IEEE Symposium on
(2010), IEEE, pp. 332–345.
[7] BERG, T., JONSSON, B., AND RAFFELT, H. Regular Inference
for State Machines using Domains with Equality Tests. In Pro-
ceedings of the Theory and practice of software, 11th interna-
tional conference on Fundamental approaches to software engi-
neering (2008), Springer-Verlag, pp. 317–331.
[8] BYRNE, D. Grendel-Scan.
http://www.grendel-scan.
com/.
[9] CHINOTEC TECHNOLOGIES.
Paros.
http://www.
parosproxy.org/.
[10] CHONG, S., VIKRAM, K., AND MYERS, A. SIF: Enforcing con-
ﬁdentiality and integrity in web applications. In Proceedings of
16th USENIX Security Symposium on USENIX Security Sympo-
sium (2007), USENIX Association, p. 1.
[11] COVA, M., BALZAROTTI, D., FELMETSGER, V., AND VIGNA,
G. Swaddler: An Approach for the Anomaly-based Detection of
State Violations in Web Applications. In Proceedings of the Inter-
national Symposium on Recent Advances in Intrusion Detection
(RAID 2007) (2007), pp. 63–86.
[12] CSALLNER, C., SMARAGDAKIS, Y., AND XIE, T. DSD-
Crasher: A hybrid analysis tool for bug ﬁnding. ACM Trans-
actions on Software Engineering and Methodology (TOSEM) 17,
2 (2008), 1–37.
[13] DI LUCCA, G., FASOLINO, A., PACE, F., TRAMONTANA, P.,
AND DE CARLINI, U. WARE: a tool for the reverse engi-
neering of Web applications.
In Sixth European Conference
on Software Maintenance and Reengineering, 2002. Proceedings
(2002), pp. 241–250.
[14] DIJKSTRA, E. W. A Note on Two Problems in Connexion with
Graphs. Numerische Mathematik 1 (1959), 269–271.
[15] DOUP ´E, A., BOE, B., KRUEGEL, C., AND VIGNA, G. Fear
the EAR: Discovering and Mitigating Execution After Redirect
Vulnerabilities. In Proceedings of the 18th ACM Conference on
Computer and Communications Security (CCS 2011) (Chicago,
IL, October 2011).
[16] DOUP ´E, A., COVA, M., AND VIGNA, G. Why Johnny Can’t
Pentest: An Analysis of Black-box Web Vulnerability Scanners.
In Detection of Intrusions and Malware, and Vulnerability As-
sessment (DIMVA 2010) (2010), Springer, pp. 111–131.
[17] FELMETSGER, V., CAVEDON, L., KRUEGEL, C., AND VIGNA,
G. Toward Automated Detection of Logic Vulnerabilities in Web
Applications. In Proceedings of the USENIX Security Symposium
(Washington, DC, August 2010).
[18] FOSSI, M. Symantec Global Internet Security Threat Report.
Tech. rep., Symantec, April 2009. Volume XIV.
[31] LI, X., YAN, W., AND XUE, Y. SENTINEL: Securing Database
In CODASPY (2012),
from Logic Flaws in Web Applications.
pp. 25–36.
[32] MCALLISTER, S., KIRDA, E., AND KRUEGEL, C. Leverag-
ing User Interactions for In-Depth Testing of Web Applications.
In Recent Advances in Intrusion Detection (2008), Springer,
pp. 191–210.
[33] MESBAH, A., BOZDAG, E., AND VAN DEURSEN, A. Crawling
AJAX by Inferring User Interface State Changes.
In Web En-
gineering, 2008. ICWE ’08. Eighth International Conference on
(july 2008), pp. 122 –134.
[34] NURMI, D., WOLSKI, R., GRZEGORCZYK, C., OBERTELLI,
G., SOMAN, S., YOUSEFF, L., AND ZAGORODNOV, D. The
Eucalyptus Open-Source Cloud-Computing System. In Cluster
Computing and the Grid, 2009. CCGRID ’09. 9th IEEE/ACM In-
ternational Symposium on (may 2009), pp. 124 –131.
[35] PORTSWIGGER. Burp Proxy. http://www.portswigger.
net/burp/.
[36] RAGHAVAN, S., AND GARCIA-MOLINA, H. Crawling the hid-
den web. In Proceedings of the International Conference on Very
Large Data Bases (2001), Citeseer, pp. 129–138.
[37] RIANCHO, A. w3af – Web Application Attack and Audit Frame-
[19] GARGOYLE SOFTWARE INC. HtmlUnit. http://htmlunit.
work. http://w3af.sourceforge.net/.
sourceforge.net/.
[20] GARRETT, J. J. Ajax: A New Approach to Web Appli-
http://www.adaptivepath.com/ideas/essays/
cations.
archives/000385.php, Feb. 2005.
[21] GROSSMAN, J. Challenges of Automated Web Application Scan-
ning. Blackhat Windows 2004, 2004.
[22] HALFOND, W., CHOUDHARY, S., AND ORSO, A. Penetration
testing with improved input vector identiﬁcation.
In Software
Testing Veriﬁcation and Validation, 2009. ICST’09. International
Conference on (2009), IEEE, pp. 346–355.
[38] ROBERTSON, W., AND VIGNA, G.
Static Enforcement of
Web Application Integrity Through Strong Typing. In Proceed-
ings of the USENIX Security Symposium (Montreal, Quebec CA,
September 2009).
[39] SCOTT, D., AND SHARP, R. Abstracting application-level web
security. In Proceedings of the 11th international conference on
World Wide Web (2002), ACM, pp. 396–407.
[40] SPI DYNAMICS. Complete Web Application Security: Phase
1 – Building Web Application Security into Your Development
Process. SPI Dynamics Whitepaper, 2002.
[23] HP. WebInspect. https://download.hpsmartupdate.com/
[41] STEVE, C., AND MARTIN, R. Vulnerability Type Distributions
webinspect/.
in CVE. Mitre report, May (2007).
[42] SUTO, L. Analyzing the Accuracy and Time Costs of Web Ap-
plication Security Scanners, 2010.
[43] VIEIRA, M., ANTUNES, N., AND MADEIRA, H. Using Web
Security Scanners to Detect Vulnerabilities in Web Services. In
Dependable Systems & Networks, 2009. DSN’09. IEEE/IFIP In-
ternational Conference on (2009), IEEE, pp. 566–571.
[24] HUANG, Y.-W., HUANG, S.-K., LIN, T.-P., AND TSAI, C.-H.
Web application security assessment by fault injection and behav-
ior monitoring. In Proceedings of the 12th international confer-
ence on World Wide Web (New York, NY, USA, 2003), WWW
’03, ACM, pp. 148–159.
[25] HUANG, Y.-W., YU, F., HANG, C., TSAI, C.-H., LEE, D.-
T., AND KUO, S.-Y. Securing web application code by static
analysis and runtime protection.
In WWW ’04: Proceedings of
the 13th international conference on World Wide Web (New York,
NY, USA, 2004), ACM, pp. 40–52.
[26] IBM.
AppScan.
http://www-01.ibm.com/software/
awdtools/appscan/.
[27] JENSEN, T. R., AND TOFT, B. Graph Coloring Problems.
Wiley-Interscience Series on Discrete Mathematics and Opti-
mization. Wiley, 1994.
[28] JOVANOVIC, N., KRUEGEL, C., AND KIRDA, E. Static anal-
ysis for detecting taint-style vulnerabilities in web applications.
Journal of Computer Security 18, 5 (2010), 861–907.
[29] KALS, S., KIRDA, E., KRUEGEL, C., AND JOVANOVIC, N.
Secubat: a Web Vulnerability Scanner.
In Proceedings of the
15th international conference on World Wide Web (2006), ACM,
pp. 247–256.
[30] LI, X., AND XUE, Y. BLOCK: A Black-box Approach for De-
tection of State Violation Attacks Towards Web Applications. In
Proceedings of the Annual Computer Security Applications Con-
ference (ACSAC 2011) (Orlando, FL, December 2011).
sion 2 contains minor tweaks from the original paper, but
no additional functionality.
WordPress v2 is an open-source blogging platform. An
administrator can create blog posts, where guests can
leave comments. No changes were made to this appli-
cation.
WordPress v3 is an up-to-date version of the open-
source blogging platform. Just like the previous version,
administrators can create blog posts, while a guest can
comment on blog posts. No changes were made to this
application.
B Scanner Conﬁguration
The following describes the exact settings that were used
to run each of the evaluated scanners.
• wget is run in the following way:
wget -rp -w 0 --waitretry=0 -nd
--delete-after --execute robots=off
• w3af settings:
misc-settings
set maxThreads 0
back
plugins
discovery webSpider
audit blindSqli, eval,
localFileInclude, osCommanding,
remoteFileInclude, sqli, xss
• skipﬁsh is run in the following way:
skipfish -u -LV -W /dev/null -m 10
A Web Applications
This section describes the web applications along with
the functionality against which we ran the black-box web
vulnerability scanner.
Gallery is an open-source photo hosting application.
The administrator can upload photos and organize them
into albums. Guests can then view and comment on
the uploaded photos. Gallery has AJAX functional-
ity but gracefully degrades (is fully functional) without
JavaScript. No modiﬁcations were made to the applica-
tion.
PhpBB v2 is an open-source forum software. It allows
registered users to perform many actions such as cre-
ate new threads, comment on threads, and message other
users. Version 2 is notorious for the amount of security
vulnerabilities it contains [6], and we included it for this
reason. We modiﬁed it to remove the “recently online”
section on pages, because this section is based on time.
PhpBB v3 is the latest version of the popular open-
source forum software.
It is a complete rewrite from
Version 2, but retains much of the same functionality.
Similar to PhpBB v2, we removed the “recently online”
section, because it is time-based.
SCARF, the Stanford Conference And Research Fo-
rum,
is an open-source conference management sys-
tem. The administrator can upload papers, and regis-
tered users can comment on the uploaded papers. We
included this application because it was used by previ-
ous research [5, 11, 30, 31]. No modiﬁcations were made
to this application.
Vanilla Forums is an open-source forum software sim-
ilar in functionality to PhpBB. Registered users can cre-
ate new threads, comment on threads, bookmark in-
teresting threads, and send a message to another user.
Vanilla Forums is unique in our test set in that it uses
the path to pass parameters in a URL, whereas all other
applications pass parameters using the query part of
the URL. For instance, a speciﬁc user’s proﬁle is GET
/profile/scanner1, while a discussion thread is lo-
cated at GET /discussion/1/how-to-scan. Vanilla
Forums also makes extensive use of AJAX, and does not
gracefully degrade without JavaScript. For instance, with
JavaScript disabled, posting a comment returns a JSON
object that contains the success or failure of the com-
ment posting, instead of an HTML response. We modi-
ﬁed Vanilla Forums by setting an XSRF token that it used
to a constant value.
WackoPicko v2 is an open-source intentionally vulnera-
ble web application which was originally created to eval-
uate many black-box web vulnerability scanners [16]. A
registered user can upload pictures, comment on other
user’s pictures, and purchase another user’s picture. Ver-