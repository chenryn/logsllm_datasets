Attacker Abilities API Assumptions Mitigations
1
11
10
3
4
9
7
8
6
5

 







 









 
Refs
[13, 52]
§III-B
[12, 18]
§III-C
[49, 45]
§VI-A
§V-B
2











∗
∗
Attack
TLS Truncation
Cookie Cutter
Session Forcing (Server)
Session Forcing (Net)
Truncation+Session Forcing
TLS Renegotiation (Ray)
TLS Renegotiation (Rex)
Triple Handshake (RSA)
Triple Handshake (DHE)
MITM Tunnel Auth (Net)
MITM Tunnel Auth (Server)
MITM Compound Auth
MITM Channel Bindings
MITM Channel ID
∗
∗
∗
∗
∗
Broken Mechanism
HTTPS Session (Tampered)
HTTPS Session (Hijacked)
HTTPS Session (Login CSRF)
HTTPS Session (Login CSRF)
TLS Client Auth (Certiﬁcate)
TLS Client Auth (Certiﬁcate)
EAP (Certiﬁcate, Password)
EAP (Certiﬁcate)
EAP (Certiﬁcate)
SASL (SCRAM-Password)
Channel ID (Public-Key)
1. Client connects to untrusted server
2. Active network attacker
3. Client authenticates on untrusted server
4. Attacker controls one subdomain on trusted server
5. Application accepts truncated TLS streams
6. Application sends attacker-chosen plaintext in channel
forcing (ﬁfth row, §III-C) has the same impact as previous
attacks; its novelty is that it bypasses their HSTS mitigation.
Our new attacks on TLS renegotiation, PEAP, SASL, and
Channel ID are server-based man-in-the-middle attacks. They
require that a client be willing to connect and authenticate
with some credential (e.g. an X.509 certiﬁcate) at an untrusted
server. The resulting attack is that the untrusted server can
impersonate the client at any trusted server that accepts the
same credential. The precondition that the client be willing to
use its credential at an untrusted server is restrictive: it is more
reasonable for public-key certiﬁcates than for server-speciﬁc
tokens such as passwords. Still, such man-in-the-middle at-
tacks by malicious servers were meant to be prevented by
various channel-binding mechanisms built into these protocols,
and our attacks show that these mitigations are insufﬁcient.
Our triple handshake attack on TLS renegotiation (§VI-A)
bypasses the renegotiation indication countermeasure, but it
applies only to servers that authenticate clients with certiﬁ-
cates during renegotiation. Such server conﬁgurations are not
widespread, but can still be found in banks, certiﬁcate authori-
ties, and VPN services. Furthermore, our impersonation attacks
apply only to clients that are willing to accept a change of
server certiﬁcates during renegotiation. Our experiments show
that these and other preconditions in the table are frequently
met by popular web browsers and TLS and HTTPS libraries.
IX-A RESPONSIBLE DISCLOSURE. We reported the attacks
to several software vendors and suggested short-term ﬁxes that
invalidate the preconditions of these attacks. We summarize
their responses below. In light of our ﬁndings, we advocate
that all applications that rely on TLS carefully review their
use of TLS libraries and implement similar ﬁxes if necessary.
• Chromium (used by Chrome, Android, Opera): Header
truncation attacks prevented in CVE-2013-2853. Server









[8]
§VI-B
§VI-C
§VI-D
17. Client accepts unknown DH groups/degenerate public keys
18. Client accepts server certiﬁcate change during renegotitation
19. HSTS: Require TLS for all actions on trusted server
10. Require renegotiation indication extension
11. Bind authentication protocol to TLS channel





• SChannel
certiﬁcate change during renegotiation prevented in
CVE-2013-6628.
lic keys prevented in CVE-2014-1491.
(used by Internet Explorer): Degenerate
Difﬁe-Hellman public keys and server certiﬁcate change
during renegotiation both prevented by a security update.
• NSS (used by Firefox): Degenerate Difﬁe-Hellman pub-
• Channel ID (implemented in Chrome): Impersonation
attack prevented by using only ECDHE ciphersuites;
speciﬁcation revised to use session hashes (§VII-A).
• Safari: Notiﬁed of header truncation attack on June 13,
2013. Notiﬁed of an incorrect renegotiation behavior on
January 10, 2014, which was ﬁxed in a later update.
• Apache: Notiﬁed of POST message truncation in
mod_php on April 29, 2013. Acknowledged, not ﬁxed.
These short-term ﬁxes, however, do not address our attacks
on channel bindings in SASL and compound authentication
in PEAP. More generally, our ﬁndings falsify the assumptions
made by the authors and users of various protocol speciﬁ-
cations [23, 49, 48, 51, 27, 42, 1, 6, 39, 33, 10]. A more
systematic ﬁx would be to strengthen the TLS protocol itself
to provide these stronger expected authentication properties.
We contacted various members of the TLS working group,
including authors of the renegotiation extension [49]. They
acknowledged the attack and we are collaborating on two
internet drafts that describe the mechanisms proposed in §VII.
We informed authors of TLS channel bindings [6] of our
attacks and they acknowledged that tls-unique in its current
form should not be used after resumption. Discussions on
revising the channel binding speciﬁcation are ongoing.
The security of our proposed extensions remains to be
formally evaluated. We plan to extend the cryptographic proofs
of miTLS to precisely model these extensions and verify that
they provide stronger authentication guarantees for TLS.
112
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:56 UTC from IEEE Xplore.  Restrictions apply. 
ACKNOWLEDGEMENTS
We thank Mart´ın Abadi, Bruno Blanchet, Catalin Hritcu,
Markulf Kohlweiss, Adam Langley, Marsh Ray, Martin Rex,
Matthew Smith, Santiago Zanella-Beguelin and the anonymous
referees for their comments on this work.
REFERENCES
[1] [MS-PEAP]: Protected Extensible Authentication Protocol (PEAP). http:
//msdn.microsoft.com/en-us/library/cc238354.aspx, 2013.
[2] HTTPS Everywhere. https://www.eff.org/https-everywhere, 2014.
[3] M. Abadi. Security protocols and their properties.
In Foundations of
Secure Computation, 2000.
[4] N. AlFardan, D. Bernstein, K. Paterson, B. Poettering, and J. Schuldt.
On the Security of RC4 in TLS. In USENIX Security, 2013.
[5] N. J. AlFardan and K. G. Paterson. Lucky thirteen: breaking the TLS
and DTLS record protocols. In IEEE S&P, 2013.
[6] J. Altman, N. Williams, and L. Zhu. Channel Bindings for TLS. IETF
RFC 5929, 2010.
[7] R. Anderson and S. Vaudenay. Minding your p’s and q’s. In ASIACRYPT,
1996.
[8] N. Asokan, V. Niemi, and K. Nyberg. Man-in-the-middle in tunnelled
authentication protocols. In Security Protocols. 2005.
[9] B. Aziz and G. Hamilton. Detecting man-in-the-middle attacks by
precise timing. In SECUREWARE, 2009.
[10] D. Balfanz and R. Hamilton. Transport Layer Security (TLS) Channel
IDs. IETF Internet Draft v01, 2013.
[11] E. Barker, D. Johnson, and M. Smid. NIST Special Publication 800-
56A Recommendation for Pair-Wise Key Establishment Schemes Using
Discrete Logarithm Cryptography (Revised), 2007.
[12] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses for cross-site
request forgery. In ACM CCS, 2008.
[13] D. Berbecaru and A. Lioy. On the Robustness of Applications Based on
the SSL and TLS Security Protocols. In PKI. 2007.
[14] K. Bhargavan, C. Fournet, R. Corin, and E. Z˘alinescu. Veriﬁed Crypto-
graphic Implementations for TLS. ACM TISSEC, 15(1):1–32, 2012.
[15] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P. Strub.
Implementing TLS with veriﬁed cryptographic security. In IEEE S&P,
2013.
[16] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, P. Strub, and
2013.
S. Zanella-Beguelin. Proving the TLS handshake (as it is).
Unpublished Draft.
[17] S. Blake-Wilson and A. Menezes. Unknown key-share attacks on the
station-to-station (STS) protocol. In PKC, 1999.
[18] A. Bortz, A. Barth, and A. Czeskis. Origin cookies: Session integrity
for Web applications. In W2SP, 2011.
[19] A. Cassola, W. Robertson, E. Kirda, and G. Noubir. A practical, targeted,
In NDSS,
and stealthy attack against WPA enterprise authentication.
2013.
[20] S. Chaki and A. Datta. ASPIER: An automated framework for verifying
security protocol implementations. In IEEE CSF, 2009.
[21] L. Chen. NIST Special Publication 800-108: Recommendation for Key
Derivation Using Pseudorandom Functions, 2009.
[22] J. Clark and P. van Oorschot. SoK: SSL and HTTPS: Revisiting Past
In
Challenges and Evaluating Certiﬁcate Trust Model Enhancements.
IEEE S&P, 2013.
[23] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol
Version 1.2. IETF RFC 5246, 2008.
[24] M. Dietz, A. Czeskis, D. Balfanz, and D. S. Wallach. Origin-bound
certiﬁcates: a fresh approach to strong client authentication for the web.
In USENIX Security, 2012.
[25] T. Duong and J. Rizzo. The CRIME attack. In Ekoparty, 2012.
[26] C. Fournet, M. Kohlweiss, and P.-Y. Strub. Modular code-based
cryptographic veriﬁcation. In ACM CCS, 2011.
[27] P. Funk and S. Blake-Wilson.
Extensible Authentication Protocol
Tunneled Transport Layer Security Authenticated Protocol Version 0.
IETF RFC 5281, 2008.
[28] M. Georgiev, S.
Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov. The most dangerous code in the world: validating SSL
certiﬁcates in non-browser software. In ACM CCS, 2012.
[29] F. Giesen, F. Kohlar, and D. Stebila. On the security of TLS renegotia-
tion. In ACM CCS, 2013.
[30] J. Hodges, C. Jackson, and A. Barth. HTTP Strict Transport Security
(HSTS). IETF RFC 6797, 2012.
[31] P. Hoffman. Additional Master Secret Inputs for TLS. IETF RFC 6358,
2012.
[32] T. Jager, F. Kohlar, S. Sch¨age, and J. Schwenk. On the security of
TLS-DHE in the standard model. In CRYPTO, 2012.
[33] S. Josefsson and N. Williams. Using GSS-API Mechanisms in SASL:
The GS2 Mechanism Family. IETF RFC 5801, 2010.
[34] B. S. Kaliski Jr. An unknown key-share attack on the MQV key
agreement protocol. ACM TISSEC, 4(3):275–288, 2001.
[35] H. Krawczyk, K. G. Paterson, and H. Wee. On the Security of the TLS
Protocol: A Systematic Analysis. In CRYPTO, 2013.
[36] G. Lowe. An attack on the needham-schroeder public-key authentication
protocol. Information Processing Letters, 56(3):131–133, 1995.
[37] M. Marlinspike. More Tricks For Defeating SSL In Practice. Black Hat
USA, 2009.
[38] N. Mavrogiannopoulos, F. Vercauteren, V. Velichkov, and B. Preneel. A
cross-protocol attack on the TLS protocol. In ACM CCS, 2012.
[39] A. Menon-Sen, N. Williams, A. Melnikov, and C. Newman. Salted
Challenge Response Authentication Mechanism (SCRAM) SASL and
GSS-API Mechanisms. IETF RFC 5802, 2010.
[40] C. Meyer and J. Schwenk. Lessons learned from previous SSL/TLS
In IACR
attacks – A brief chronology of attacks and weaknesses.
Cryptology ePrint Archive, 2013.
[41] R. Oppliger, R. Hauser, and D. Basin. SSL/TLS session-aware user
authentication – Or how to effectively thwart the man-in-the-middle.
Computer Communications, 29(12):2238–2246, 2006.
[42] A. Palekar, D. Simon, J. Salowey, H. Zhou, G. Zorn, and S. Josefsson.
IETF Internet Draft v10,
Protected EAP protocol (PEAP) version 2.
2004.
[43] K. G. Paterson, T. Ristenpart, and T. Shrimpton. Tag size does matter:
Attacks and proofs for the TLS record protocol. In ASIACRYPT, 2011.
[44] J. Puthenkulam, V. Lortz, A. Palekar, D. Simon, and B. Aboba. The
IETF Internet Draft v04,
compound authentication binding problem.
2003.
[45] M. Ray and S. Dispensa. Renegotiating TLS, 2009.
[46] J.-F. Raymond and A. Stiglic. Security issues in the Difﬁe-Hellman key
agreement protocol. IEEE Transactions on Information Theory, 22:1–17,
2000.
[47] E. Rescorla. HTTP over TLS. IETF RFC 2818, 2000.
[48] E. Rescorla. Keying Material Exporters for Transport Layer Security
(TLS). IETF RFC 5705, 2010.
[49] E. Rescorla, M. Ray, S. Dispensa, and N. Oskov. TLS renegotiation
indication extension. IETF RFC 5746, 2010.
[50] J. Salowey, H. Zhou, P. Eronen, and H. Tschofenig. TLS session
resumption without server-side state. IETF RFC 5077, 2008.
[51] D. Simon, B. Aboba, and R. Hurst. The EAP-TLS Authentication
Protocol. IETF RFC 5216, 2008.
[52] B. Smyth and A. Pironti. Truncating TLS Connections to Violate Beliefs
in Web Applications. In USENIX WOOT, 2013.
[53] E. Stark, L.-S. Huang, D. Israni, C. Jackson, and D. Boneh. The case for
prefetching and prevalidating TLS server certiﬁcates. In NDSS, 2012.
[54] P. van Oorschot.
Extending cryptographic logics of belief to key
agreement protocols. In ACM CCS, 1993.
[55] D. Wagner and B. Schneier. Analysis of the SSL 3.0 protocol.
USENIX Electronic Commerce, 1996.
In
[56] N. Williams. On the use of channel bindings to secure channels. IETF
RFC 5056, 2007.
[57] M. Zalewski. Browser Security Handbook. http://code.google.com/p/
browsersec/.
113
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:56 UTC from IEEE Xplore.  Restrictions apply.