# 红队战术：在C#中使用syscall之编写代码
##### 译文声明
本文是翻译文章，文章原作者 Jack Halon，文章来源：jhalon.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
本文专注于实际编写代码，利用在上一篇文章中学到的内容，实现一个有效的syscall。除了编写代码外，也会介绍如何对“工具”代码进行管理，以及如何为之后与其他工具的集成做准备。
* * *
在上一篇文章中，我们介绍了一些在C#中使用syscall需要了解的基本概念，其中触及了一些比较深入的主题，例如Windows内部结构及系统调用的概念。还讨论了.NET
框架的工作原理以及如何在C#中利用非托管代码执行syscall汇编代码。
在阅读本文之前，我 **强烈**
建议你先阅读上一篇文章，否则你可能无法理解本文介绍的部分主题。当然，我会尽力对其进行解释并为其中的部分主题提供外部资源链接，但本文要讨论的几乎所有内容都能在上一篇文章中找到解释！
😁
在本文中，我们会专注于实际编写代码，利用在本文中学到的内容，实现一个有效的syscall。除了编写代码外，我们也会介绍如何对“工具”代码进行管理，以及如何为之后与其他工具的集成做准备。这里集成的意思类似[Ryan
Cobb](https://twitter.com/cobbr_io)编写的[SharpSploit](https://github.com/cobbr/SharpSploit)库文件，该文件被开发用于和其他C#项目集成在一起工作，但我们编写的代码不会有这么广的应用范围。
我最初是想要在本文中引导读者逐步开发出一个真正能在工作时使用的工具，类似[Dumpert](https://github.com/outflanknl/Dumpert)或[SysWhispers](https://github.com/jthuraisamy/SysWhispers)。但是考虑到这么做之后文章的长度以及复杂度，我选择编写一个简单的PoC代码来演示单个syscall的执行。
我相信在阅读完本文及示例代码（会同时发布在[GitHub](https://github.com/jhalon/SharpCall)上）之后，你自己也能编写出一个工具！如果你需要更多信息，我还会在文章末尾提供一些其他工具的链接，这些工具也在C#中使用了相同的syscall概念。
谁知道呢，也许我会直接做一个直播，和大家一起现场编写一个新的工具！ 😏
好了，现在让我们打开Visual Studio或Visual Code，开始敲写代码吧！
## 代码及类结构设计
如果说我在编写红队使用的自定义工具（无论是恶意软件还是其他植入程序）时学到的唯一内容，就是我们一定要组织好代码以及自己的想法，将它们分成不同的类。
[类](https://docs.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/classes-and-objects)是C#中最基本的类型之一。简单来说，类是一种数据结构，它将字段(field)、方法以及其他成员函数组合在一个单元中。同时类还能够用作对象并支持[继承](https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/inheritance)和[多态](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/polymorphism)，该机制可以用于派生类的扩展。
创建完后，只要在源代码文件中添加“[using](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-directive)”指令，就能够在代码库的任意位置使用这些类了。这时我们可以直接访问这些类的静态成员以及嵌套类型，而不需要在前面添加类名做限定。
比如说我们有一个叫做“ **Syscalls** ”的新类，其中包含了syscall逻辑。如果我们没有在C#代码中添加 **using**
指令，就需要使用完整的类名对函数进行限定。也就是说，如果该类中包含了一个对 **NtWriteFile**
的syscall汇编代码，如果想要在另一个类中访问该方法，就需要使用`Syscalls.NtWriteFile`这样的形式。这样当然也没问题，但如果使用这个类的次数比较多的话，就会显得很累赘。
现在，你们中的一些人可能会问，“ _为什么我们需要这种简化？_ ”
有两个原因：第一，在组织结构上可以让我们的代码更“干净”；第二，可以让调试及修复代码的过程更加轻松，不需要在大量的文本寻找分号的位置。
现在开始对我们的代码结构进行组织。首先创建一个新的.NET Framework Console App项目，并设置使用3.5 .NET
Framework，像这样：
创建完成后，你应该可以访问一个新的文件，叫做`Program.cs`。 如果查看Visual Studio的右侧，应该能够注意到在Solution
Explorer中，解决方案的结构如下所示。
    +SharpCall SLN (Solution)
    |
    +->Properties
    |
    +->References
    |
    +->Program.cs (Main Program)
`Program.cs`文件中会包含程序的主要逻辑。就此次的PoC而言，我们会在该文件中调用并使用我们的syscall代码。之前已经介绍过了，当使用一个有效的syscall标识符调用
**syscall** 指令的时候，CPU中就会发生系统调用。该指令会让CPU从用户模式切换到内核模式，从而执行某些特权操作。
如果我们只用一个syscall，那么只需要把它添加到`Program.cs`文件。但是这么做之后，如果我们接下来想要进一步开发此程序，让其模块化或提高其灵活性，从而更好地和其他程序进行集成，就会出现更多的问题。
所以我们要始终考虑到未来的情况，把所有的syscall汇编代码分离到一个单独的文件中。这样，如果将来需要增加更多的syscall，就可以直接把它们添加到一个类中，然后从程序中对其进行调用。
这也是我们接下来要进行的工作。先在解决方案中添加一个新文件，将其命名为`Syscalls.cs`。现在，解决方案的结构应类似于：
    +SharpCall SLN (Solution)
    |
    +->Properties
    |
    +->References
    |
    +->Program.cs (Main Program)
    |
    +->Syscalls.cs (Class to Hold our Assembly and Syscall Logic)
很好，现在应该可以开始编程了吧？好吧，还不行，我们还忘了一件很重要的事情。 由于我们要使用的是非托管代码，所以还需要实例化Windows
API函数，这样我们就能够在C#程序中调用它们了。为了使用非托管函数，我们需要使用[P/Invoke](https://docs.microsoft.com/en-us/dotnet/standard/managed-code)对其结构、参数以及任何其他相关的标志信息进行声明，。
同样，以上内容也可以在`Program.cs`文件中完成，但是为了让代码更加整洁，应该在一个单独的类中完成所有P/Invoke工作。
因此，在解决方案中新添加一个文件，并将其命名为`Native.cs`，该文件包含了我们的“原生” Windows函数。
现在，解决方案的结构应类似于：
    +SharpCall SLN (Solution)
    |
    +->Properties
    |
    +->References
    |
    +->Program.cs (Main Program)
    |
    +->Syscalls.cs (Class to Hold our Assembly and Syscall Logic)
    |
    +->Native.cs (Class to Hold our Native Win32 APIs and Structs)
现在已经完成了程序的结构组织，并明确了各部分的功能，要开始正式地编程了！
## 编写syscall代码
因为这只是一个PoC，所以我会使用[NtCreateFile](https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntcreatefile)系统调用在桌面创建一个临时文件。
如果程序能够正常工作，就证明代码中的逻辑是正确的。之后我们就能编写更复杂的工具，并通过其他系统调用扩展我们的syscalls类。
还有一点要注意，下面所有的代码只能在64位系统上工作。
首先，我们需要为 **NtCreateFile** 的syscall编写汇编代码。
正如上一篇文章所述，我们可以使用[WinDBG](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools)反汇编并检查 **ntdll**
中NtCreateFile的调用情况。
先获得函数的内存地址，再在该地址处执行反汇编，这时可以获得以下输出。
从上图中可以看到syscall的标识符为0x55。
而且如果查看汇编指令的左侧，可以看到syscall指令的十六进制表示形式。由于C#不支持内联汇编，我们会把这些十六进制字符组成shellcode，并放入字节数组中。
该字节数组会放入`Syscalls.cs`文件的Syscalls类中，如图所示，创建一个新的名为`bNtCreateFile`的[静态](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/static)字节数组。
到这里我们就完成了第一个汇编的syscall代码。但我们要如何构建代码来执行这段程序呢？如果你读过我的上一篇文章的话，应该会记得一个叫做[委托(delegate)](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/)的东西。
Delegate类型代表了对具有特定参数列表和返回类型的 **方法的引用** 。在对其进行实例化的时候，可以把具有兼容的签名以及返回类型的 **任意方法**
作为它的实例。然后就能通过该实例调用被委托的方法了。
听起来可能有些混乱，但是如果你记得的话，在上一篇文章中，我们定义了一个名为`EnumWindowsProc`的委托，之后定义了该委托的实现`OutputWindow`。该实现告诉了C#要如何处理传递给此函数引用的数据，不管它是来自托管代码还是非托管代码。
在此处的`Syscall.cs`类中，我们也可以执行同样的操作，为非托管函数( **NtCreateFile**
)定义一个委托。这样我们就能在该委托的实现中，把汇编的syscall转换为一个有效的函数了。
不过还是一步步的来，首先，我们要为该NtCreateFile委托定义签名。为此，在`Syscall`类中创建一个名为`Delegates`的公共的[struct类型](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct)。