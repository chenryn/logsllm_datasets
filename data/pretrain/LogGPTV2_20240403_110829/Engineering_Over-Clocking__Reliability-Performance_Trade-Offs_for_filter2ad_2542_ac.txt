Alpha  21264  has  80  integer  physical  registers  for  32 
architectural  register  [10].  Then,  for  practically  each 
destination 
the 
architectural  destination  register  to  one  of  the  available 
physical registers. Thereby, if two instructions write to the 
same  architectural  register,  they  can  still  be  executed  in 
parallel  because  they  will  write  their  results  to  different 
physical  registers.  Regardless  of  the  implementation  for 
each  instruction  two  tasks  have  to  be  performed  to 
complete renaming. First a new register has to be allocated 
for  destination  register(s).  Second,  the  source  register(s) 
should  be  renamed  such  that  they  will  be  mapped  to  the 
correct  physical  registers.  Figure  9  presents  the  register 
renaming implementation that is used in our experiments.  
Decoded
Rd, Rs1, Rs2
Mapping
Table
Rd state change
OC
Rd’
Rs1’
Rs2’
Reservation
Station (RS)
Merged
Register File 
Rd’, Rs1’, Rs2’
Figure 9. Physical structures associated with register renaming. 
Mapping table stores the architectural to physical register 
mappings.
In 
implementing 
a  Reorder  Buffer). 
The renaming scheme in our research is similar to the one 
used in Alpha and Pentium 4 (earlier Pentium architectures 
were 
this 
implementation,  a  mapping  table  keeps  track  of  the 
physical registers that correspond to architectural registers. 
For  example,  if  the  architectural  register  r1  is  mapped  to 
physical  register  p5,  the  entry  in  mapping  table  that 
corresponds  to  r1  contains  the  number  5.  In  addition, 
mapping  table  keeps  track  of  the  states  of  the  physical 
registers.  During 
the  renaming  stage,  only  physical 
registers that are “free” should be allocated.
]
%
[
s
r
e
t
s
g
e
r
i
e
v
i
t
c
a
f
o
n
o
i
t
c
a
r
F
100.0
90.0
80.0
70.0
60.0
50.0
40.0
30.0
20.0
10.0
0.0
0
50
100
200
Executed Instructions [M]
150
250
300
Figure 10. The fraction of active registers over the simulation of 
the 123.applu application.
5
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
is  mapped 
A  physical  register  can  be  in  one  of  the  three  states: 
available  (AV)  state,  which  indicates  that  they  are  not 
used; architectural register (AR) state, which indicates that 
the  register 
to  an  architectural  register; 
allocated, but not valid (AL) state, which indicates that the 
physical  register  is  mapped  to  an  architectural  register, 
however the instruction that is generating the value is not 
completed yet. Once the instruction completes, the state is 
changed to AR. The registers in the AV state are free and 
can be mapped to architectural registers. In our techniques, 
we  utilize  these  registers  for  copying  the  values  of  the 
active register (the ones in the AR and AL states). 
the  processor.  We 
4.2.1  OPPORTUNITY
Due to the nature of the applications and the limits on the 
Instruction-level  parallelism  (ILP)  achieved,  some  of  the 
physical  registers  may  remain  in  the  AV  state  for  long 
periods  of  the  execution.  Our  goal  is  to  capture  such 
periods and use these physical registers to store the copies 
of the active registers. Then, if an error is captured on the 
active  register,  we  will  use  this  copy  value  to  restore  the 
state  of 
first  studied  different 
applications for register usage, i.e. we studied the fraction 
of registers that are active during time epochs of execution 
of  representative  applications.  The  detailed  simulation 
environment is explained in Section 5.1. Figure 10 presents 
the  fraction  of  active  registers  over  the  simulation  of  a 
representative  application.  During  several  long  periods  of 
the simulation, more than half of the registers are not used. 
This 
that  a  redundancy-based  scheme  can 
efficiently  use  these  registers  to  store  copies  of  active 
registers. We must note that the results presented here are 
for  a  representative  application.  Although  a  large  fraction 
of the physical registers are not used during the execution 
of  this  application,  the  register  file  needs  to be kept large 
enough  for  other  applications,  which  might  need  all  the 
available registers. 
indicates 
4.2.2  REDUNDANCY-BASE SCHEME (RB) 
Redundancy-based  (RB)  scheme  tries  to  allocate  the  free 
registers  for  copying  the  values  of  the  active  registers. 
Then, if an error is detected in the original value, this copy 
is used to restore the correct value. If the copy value is also 
corrupted,  the  error  cannot  be  recovered.  In  RB,  this 
allocation is performed during the register renaming stage. 
Specifically,  during  the  register  renaming,  the  register 
renaming logic additionally allocates a register that will be 
used for copying the register value. The copy register name 
is placed into the RUU (or the Reservation Station) along 
with  the  operation  code  and  source  and  destination 
registers.  At  the  completion  of  the  instruction  (i.e.,  when 
the value is written to the register file), the copy register is 
written.
We  have  to  make  three  modifications  to  the  traditional 
register  renaming  structures  (depicted  in  Figure  9)  to 
implement the RB. First, the mapping table is enhanced to 
6
the  copy  operation.  Among 
select  a  copy  register  and  store  the  selected  copy  register 
name. In addition to that, each physical register can be in 
an  additional  state  called  copy,  which  indicates  that  it  is 
used as a copy register. Second, the Reservation Station (or 
RUU) is enhanced to store the name of this copy register to 
enforce  the  copy  operation  during  the  execution  of  the 
instruction.  Therefore,  the  path  between  the  register  file 
and the Reservation Station should be modified to contain 
this information. Finally, we need to make a modification 
to  the  register  file  as  well.  It  should  be  enhanced  to 
perform 
the  possible 
implementations,  the  simplest  is  to  add  a  “copy”  port  for 
each write port in the register file. We only need to input 
the  name  of  the  copy  register.  The  value  of  the  copy 
register will be read from the corresponding data input for 
the write port and be written into the register name given in 
the copy port. Addition of the copy ports in the register file 
is  likely  to  increase  the  latency  of  the  register  file. 
However, the copy port is easier to implement than a write 
port, because it does not require any additional data input. 
During certain periods of the execution, the fraction of the 
active  registers  goes  above  50%.  This  means  that  some 
registers will have no copies. If during the allocation of a 
copy  register,  there  are  no  free  registers  (all  the  registers 
are  in  AR,  AL,  or  copy  states),  the  RB  randomly  selects 
one  copy  register  and  overwrites  it  with  the  new  copy 
value. If there are no copy registers (all registers are in AR 
and  AL  states),  the  replication  fails,  i.e.  no  copy  will  be 
generated for the current destination register.
4.2.3  REDUNDANCY-ENHANCED SCHEME (RE) 
The RB scheme has a significant drawback. In many cases, 
it might happen that a register can lose its copy before it is 
read.  If  there  was  an  error  during  the write operation, the 
value  cannot  be  recovered  if  the  copy  is  overwritten.  To 
address  this  shortcoming  of  RB,  we  implemented  the 
Redundancy-Enhanced (RE) scheme.  
RE scheme guarantees that if a copy value is overwritten, 
the corresponding active register does not have an error. To 
achieve  this,  the  register  renaming  circuit  introduces  a 
dummy instruction to the pipeline that reads the value from 
the  active  register.  For  example,  assume  register  p9  is 
storing the copy of the active register p3. Assume that p9 
will be used to store copy of another register. The register 
renaming  circuit  puts  a  dummy  instruction  that  reads  the 
value  of  p3  into  the  pipeline.  If  during  this  dummy  read 
operation  an  error  is  detected,  the  error  detection  and 
correction will be performed as usual. Hence, if there was 
an error during the write of p3, the error will be corrected. 
As  we  will  show  in  Section  5,  RE  improves  the 
performance of RB significantly. However, it can still not 
achieve  100%  recovery  because  of  failed  copy  attempts 
(~2%). Although this seems to be a small fraction, we have 
seen  that  it  can  have  a  significant  impact  on  the  recovery 
success.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
that 
register 
file.  We  believe 
4.3  REPLICATION-BASED SCHEME (RP)
The last alternative we consider is called replication-based 
scheme (RP). In this scheme, we employ a second register 
file which snoops the writes to the primary register file and 
replicates all the values written to the primary register file. 
Specifically,  the  replica  register  file  will  store  a  value 
whenever  a  write  operation  to  the  primary  register  file 
occurs. Then, if during an access to a register, an error is 
detected,  the  replica  register  file  will  be  accessed  to 
retrieve the correct value. This correct value will be stored 
in the primary register file for further accesses to the data. 
The replica register file has a corresponding write port for 
each  write  port  in  the  primary  register  file.  On  the  other 
hand,  the  read  ports  of  the  replica  file  are  only  accessed 
when  an  error  is  captured  in  the  primary  register  file. 
Hence, in our experiments we set the number of read ports 
in the replica file to 2. Note that, the area of the register file 
is dictated by the number of ports in it. Since in the replica 
file,  the  number  of  read  ports  is  going  to  be  smaller,  the 
size  of  the  replica  register  file  will  be  smaller  than  the 
original 
the  overall 
complexity  is  tolerable  because  the  register  files  usually 
consume a small fraction of the overall chip area. Note that 
the reads from the replica register file can be performed in 
multiple cycles. Therefore, the error rates during reads can 
be reduced. However, writes to the replica register file has 
to  be  completed  in  the  same  duration  as  the  writes  to  the 
primary  register  file.  Therefore,  the  probability  of  write 
errors  remains  the  same  for  the  replica  file.  This  can  be 
improved  by  having  multiple  replica  files.  However,  such 
schemes are out of the scope of this paper.  
We must note that an alternative scheme where we double 
the width of the register and write two copies at the same 
time can also provide a solution to the problem discussed 
in this paper. Then instead of using ECC or Parity, errors 
can  be  captured  by  comparing  the  two  values.  However, 
this requires a change in the main register file, which might 
degrade the overall performance. In the RP scheme, on the 
other  hand,  the  duplicate  register  file  occupies  less  space 
because of the smaller number of ports.  
4.4  ALTERNATIVE IMPLEMENTATIONS
In  our  detection  scheme,  we  assumed  that  any  error  is 
detected before the result of the operation is written back to 
the  register  file.  If  we  allow  the  result  to  be  written  and 
“terminate”  the  instruction  at  a  later  stage  in  the  pipeline 
(such as flags stage), we can utilize even more complicated 
schemes  for  detection.  However,  in  such  schemes,  the 
rollback  policy  must  be  complicated 
the 
instructions that have used this incorrect value, which will 
require  significant  modifications  to  the  overall  datapath 
design. Alternatively, the pipeline can be flushed to rid of 
all  possible  dependant  instructions.  However,  in  many 
configurations, the number of errors can be fairly high and 
to  detect 
flushing  reduces  the  performance.  Therefore,  we  do  not 
consider such schemes.  
One  can  imagine  a  scheme  where  only  the  values  of  the 
architectural  registers  are  stored.  Then,  when  an  error  is 
detected, 
this 
architectural 
this 
technique  has  large  impact on the performance and hence 
is not considered in this work.
is  restored  using 
flushing, 
the  processor  state 
file.  Similar 
register 
to 
the  proposed 
5.  EXPERIMENTS 
5.1  EXPERIMENTAL SETUP
The  SimpleScalar  [4]  version  3.0  simulator  is  used  to 
evaluate 
techniques.  The  necessary 
modifications  have  been  implemented  to  perform  register 
renaming,  error  probabilities  during  read  and  write 
operations,  and  the  proposed  error  correction  strategies. 
We use parity detection for RB, RE, and RP schemes. As 
we  have  discussed  in  previous  sections,  the  techniques 
make  use  the  selective  replay  capabilities  that  exist  in 
modern  microprocessors.  Therefore,  we  have  made 
changes  to  SimpleScalar  to  simulate  a  realistically  sized 
issue  queue,  to  model  the  events  in  the  issue  queue  in 
detail, and to simulate a realistic scheduler under selective 
replay.
Table 1. 