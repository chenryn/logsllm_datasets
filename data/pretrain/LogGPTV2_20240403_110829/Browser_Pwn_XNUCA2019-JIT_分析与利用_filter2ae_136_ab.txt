    // output: callback
###  探寻回调函数-toPrimitive
虽然已经找到了触发漏洞的方式，但是我们的分析不能到此为止，接下来的目标是尝试跟踪到具体调用回调函数的地方。继续分析`Builtins::NonNumberToNumeric`，该函数获取节点的context和input，并将其作为`NonNumberToNumeric`的参数。`NonNumberToNumeric`内部又调用了`NonNumberToNumberOrNumeric`函数。
    // srcbuiltinsbuiltins-conversion-gen.cc
    TF_BUILTIN(NonNumberToNumeric, CodeStubAssembler) {
      Node* context = Parameter(Descriptor::kContext);
      Node* input = Parameter(Descriptor::kArgument);
      Return(NonNumberToNumeric(context, input));
    }
    // srccode-stub-assembler.cc
    TNode CodeStubAssembler::NonNumberToNumeric(
        SloppyTNode context, SloppyTNode input) {
      Node* result = NonNumberToNumberOrNumeric(context, input,
                                                Object::Conversion::kToNumeric);
      CSA_SLOW_ASSERT(this, IsNumeric(result));
      return UncheckedCast(result);
    }
`NonNumberToNumberOrNumeric`函数的主要逻辑也是一个大循环，在循环里面对input的`instance_type`进行判断，判断是否是String、BigInt、ODDBALL_TYPE、JSReceiver等，然后跳转到相应的分支处去执行。如果是String，就调用`StringToNumber`把字符串转换为Number。我们要关注的是`if_inputisreceiver`这个分支，该分支会调用`NonPrimitiveToPrimitive`来把input转换为更原始的数据，如果转换结果是一个`Number/Numeric`，说明转换完成退出循环，否则继续循环。
    // srccode-stub-assembler.cc
    Node* CodeStubAssembler::NonNumberToNumberOrNumeric(
        Node* context, Node* input, Object::Conversion mode,
        BigIntHandling bigint_handling) {
        ...
      // We might need to loop once here due to ToPrimitive conversions.
      VARIABLE(var_input, MachineRepresentation::kTagged, input);
      VARIABLE(var_result, MachineRepresentation::kTagged);
      Label loop(this, &var_input);
      Label end(this);
      Goto(&loop);
      BIND(&loop);
      {
        // Load the current {input} value (known to be a HeapObject).
        Node* input = var_input.value();
        // 获取input的instancetype
        // Dispatch on the {input} instance type.
        Node* input_instance_type = LoadInstanceType(input);
        // 定义多个标签，每个标签对应一个跳转分支
        Label if_inputisstring(this), if_inputisoddball(this),
            if_inputisbigint(this), if_inputisreceiver(this, Label::kDeferred),
            if_inputisother(this, Label::kDeferred);
        // 依次判断instance_type是不是String、BigInt、ODDBALL_TYPE、JSReceiver等，并跳转到相应的分支继续执行
        GotoIf(IsStringInstanceType(input_instance_type), &if_inputisstring);
        GotoIf(IsBigIntInstanceType(input_instance_type), &if_inputisbigint);
        GotoIf(InstanceTypeEqual(input_instance_type, ODDBALL_TYPE),
               &if_inputisoddball);
        Branch(IsJSReceiverInstanceType(input_instance_type), &if_inputisreceiver,
               &if_inputisother);
        // 如果是字符串
        BIND(&if_inputisstring);
        {
          // The {input} is a String, use the fast stub to convert it to a Number.
          TNode string_input = CAST(input);
          var_result.Bind(StringToNumber(string_input));
          Goto(&end);
        }
        // 如果是BigInt
        BIND(&if_inputisbigint);
        ...
        // 是ODDBALL_TYPE
        BIND(&if_inputisoddball);
        {
          ...
        }
        // 是JSReceiver
        BIND(&if_inputisreceiver);
        {
          // The {input} is a JSReceiver, we need to convert it to a Primitive first
          // using the ToPrimitive type conversion, preferably yielding a Number.
          // 调用NonPrimitiveToPrimitive来把input转换为更原始的数据
          Callable callable = CodeFactory::NonPrimitiveToPrimitive(
              isolate(), ToPrimitiveHint::kNumber);
          Node* result = CallStub(callable, context, input);
          // Check if the {result} is already a Number/Numeric.
          //检查结果是Number还是Numeric
          Label if_done(this), if_notdone(this);
          Branch(mode == Object::Conversion::kToNumber ? IsNumber(result)
                                                       : IsNumeric(result),
                 &if_done, &if_notdone);
          BIND(&if_done);
          {
            // The ToPrimitive conversion already gave us a Number/Numeric, so we're
            // done.
            // 通过ToPrimitive的转换，已经得到了一个Number/Numeric，退出循环
            var_result.Bind(result);
            Goto(&end);
          }
          BIND(&if_notdone);
          {
            // We now have a Primitive {result}, but it's not yet a Number/Numeric.
            // 得到了更原始的结果，但是仍然不是Number/Numeric，继续循环。
            var_input.Bind(result);
            Goto(&loop);
          }
        }
        // other
        BIND(&if_inputisother);
        {
          ...
        }
      }
      ...
      return var_result.value();
    }
`NonPrimitiveToPrimitive`内部调用了`Builtins`函数`NonPrimitiveToPrimitive`，依据hint的类型调用相应的处理函数。这里的hint是`kNumber`，因此调用的是`NonPrimitiveToPrimitive_Number`函数，函数内部也仅仅是调用`Generate_NonPrimitiveToPrimitive`来进一步对参数进行处理。
    // srccode-factory.cc
    Callable CodeFactory::NonPrimitiveToPrimitive(Isolate* isolate,
                                                  ToPrimitiveHint hint) {
      return Callable(isolate->builtins()->NonPrimitiveToPrimitive(hint),
                      TypeConversionDescriptor{});
    }
    // srcbuiltinsbuiltins.cc
    Handle Builtins::NonPrimitiveToPrimitive(ToPrimitiveHint hint) {
      switch (hint) {
        case ToPrimitiveHint::kDefault:
          return builtin_handle(kNonPrimitiveToPrimitive_Default);
        case ToPrimitiveHint::kNumber:
          return builtin_handle(kNonPrimitiveToPrimitive_Number); // here
        case ToPrimitiveHint::kString:
          return builtin_handle(kNonPrimitiveToPrimitive_String);
      }
      UNREACHABLE();
    }
    // srcbuiltinsbuiltins-conversion-gen.cc
    TF_BUILTIN(NonPrimitiveToPrimitive_Number, ConversionBuiltinsAssembler) {
      Node* context = Parameter(Descriptor::kContext);
      Node* input = Parameter(Descriptor::kArgument);
      Generate_NonPrimitiveToPrimitive(context, input, ToPrimitiveHint::kNumber);
    }
`Generate_NonPrimitiveToPrimitive`函数内部会查找input的`@[@toPrimitive](https://github.com/toPrimitive
"@toPrimitive")`属性，如果存在相关属性便会通过`CallJS`来调用我们的`@[@toPrimitive](https://github.com/toPrimitive
"@toPrimitive")`属性`exotic_to_prim`，那这个toPrimitive到底是个什么呢？查了一下发现这个属性是我们可以定义的，也就是说这个地方是我们可以设置的回调函数！！！
    Symbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。
    // srcbuiltinsbuiltins-conversion-gen.cc
    // ES6 section 7.1.1 ToPrimitive ( input [ , PreferredType ] )
    void ConversionBuiltinsAssembler::Generate_NonPrimitiveToPrimitive(
        Node* context, Node* input, ToPrimitiveHint hint) {
      // Lookup the @@toPrimitive property on the {input}.
      Node* exotic_to_prim =
          GetProperty(context, input, factory()->to_primitive_symbol());
      // Check if {exotic_to_prim} is neither null nor undefined.
      // 检查exotic_to_prim，若既不是null也不是undefined
      Label ordinary_to_primitive(this);
      GotoIf(IsNullOrUndefined(exotic_to_prim), &ordinary_to_primitive);
      {
        // Invoke the {exotic_to_prim} method on the {input} with a string
        // representation of the {hint}.
        Callable callable =
            CodeFactory::Call(isolate(), ConvertReceiverMode::kNotNullOrUndefined);
        Node* hint_string = HeapConstant(factory()->ToPrimitiveHintString(hint));
        // calljs调用exotic_to_prim
        Node* result =
            CallJS(callable, context, exotic_to_prim, input, hint_string);
        //判断结果是否是一个原始值
        // Verify that the {result} is actually a primitive.
        Label if_resultisprimitive(this),
            if_resultisnotprimitive(this, Label::kDeferred);
        GotoIf(TaggedIsSmi(result), &if_resultisprimitive);
        Node* result_instance_type = LoadInstanceType(result);
        Branch(IsPrimitiveInstanceType(result_instance_type), &if_resultisprimitive,
               &if_resultisnotprimitive);
        BIND(&if_resultisprimitive);
        {
          // Just return the {result}.
          Return(result);
        }
        BIND(&if_resultisnotprimitive);
        {
          // Somehow the @@toPrimitive method on {input} didn't yield a primitive.
          ThrowTypeError(context, MessageTemplate::kCannotConvertToPrimitive);
        }
      }
      // Convert using the OrdinaryToPrimitive algorithm instead.
      BIND(&ordinary_to_primitive);
      {
        Callable callable = CodeFactory::OrdinaryToPrimitive(
            isolate(), (hint == ToPrimitiveHint::kString)
                           ? OrdinaryToPrimitiveHint::kString
                           : OrdinaryToPrimitiveHint::kNumber);
        TailCallStub(callable, context, input);
      }
    }
所以按照上面的分析，我们可以设置对象的`toPrimitive`属性，然后在处理过程中会调用该属性对应的回调函数，如下所示：
    let b = {
        [Symbol.toPrimitive](hint) {
            return 112233;
        }
    }
    let b1 = {
        [Symbol.toPrimitive](hint) {
            print('callback');
            return 112233;
        }
    }
    opt_me(1234,b);
    opt_me(1234,b);