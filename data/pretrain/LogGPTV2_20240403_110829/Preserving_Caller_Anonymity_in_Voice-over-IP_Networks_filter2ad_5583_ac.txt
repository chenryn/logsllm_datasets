 0
’differential’
’statistical’
 0
 10
 20
 30
 40
 50
 60
Clock Skew (ms)
y
t
i
l
i
b
a
b
o
r
P
0
1
-
p
o
T
y
t
i
l
i
b
a
b
o
r
P
0
1
-
p
o
T
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
’gauss’
’weibull’
’pareto’
 1
 10
 100
 1000
Number of Malicious Nodes
y
t
i
l
i
b
a
b
o
r
P
k
-
p
o
T
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 1
’gauss’
’weibull’
’pareto’
 10
k
 100
Fig. 9. Statistical Triangulation
Fig. 10.
cious Nodes
Statistical Triangulation: 10 Mali-
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
’gauss’
’weibull’
’pareto’
 1
 10
 100
 1000
Number of Malicious Nodes
y
t
i
l
i
b
a
b
o
r
P
k
-
p
o
T
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 1
’gauss’
’weibull’
’pareto’
 10
k
 100
Fig. 11. Differential Vs Statistical Trian-
gulation Attack
Fig. 12. Differential Triangulation: κ = 10
Fig. 13. Differential Triangulation: 10 Ma-
licious Nodes
the network topology; but, using a large ttl value may
allow the good nodes to detect topology discovery by
malicious nodes. Hence, the adversary may be limited
by ttl = 2, which is commonly used by topology main-
tenance protocols. Consequently, it may not be possible
to discover the entire network topology. Additionally, the
nodes may join and leave the VoIP network (churn) and
hence the topology may evolve with time. To handle
topology churn, the malicious nodes have to periodically
rediscover the VoIP network in order to retain attack efﬁ-
cacy; but, aggressive topology rediscovery makes attack
detection trivial. We evaluate the sensitivity of our at-
tacks to incomplete knowledge of the network topology,
network churn, and network size using different route set
up protocols in our experimental evaluation (see Section
V-C).
IV. COUNTERING TRIANGULATION BASED TIMING
ATTACKS
We have so far shown that while the broadcast based
route set up protocol meets the QoS requirements (by
setting up the shortest route), it is vulnerable to timing
analysis attacks. This section attempts to build route set
up protocols that can effectively trade off route latency
with anonymity. While doing so, we exploit the fact that
the route does not have to be the shortest route as long as
its one-way latency is smaller than a threshold (=250ms
56
i
d
e
r
e
v
o
c
s
D
y
g
o
o
p
o
T
l
f
o
n
o
i
t
c
a
r
F
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
’m=10’
’m=20’
’m=30’
 1
 2
 3
 4
 5
 6
ttl
Fig. 14. Topology Discovery
for interactive voice communication). One obvious ap-
proach to countering caller identiﬁcation attacks is to use
latency perturbation; each node in the network adds a
random delay before forwarding a route set up request to
its neighbors in the route set up protocol. For instance,
we could add Gaussian delay (µnoise, σ2
noise) with a
low mean (for short routes) and high variance (more
uncertainty into timing analysis attacks). Nonetheless,
this is equivalent to replacing the latency of each edge
e described by link latency (µe, σ2
e) with a perturbed
latency (µe + µnoise, σ2
noise) and is thus suscep-
tible to statistical and differential analysis attacks. Our
experiments (see Section V) indicate that this approach
does not alleviate the problem.
e + σ2
In this section, we demonstrate that a random walk
based search algorithm is resilient to triangulation based
timing attacks. However, the random walk approach may
set up highly sub-optimal routes, almost blatantly violat-
ing the one-way latency constraint. We develop hybrid
algorithms that combine the shortest route property of
the broadcast protocol and the attack resilience property
of the random walk protocol with tuneable knobs that
allow us to trade off QoS guarantees with anonymity.
A. Random Walk Search Algorithm
Similar to the broadcast based route set up protocol,
the random walk protocol operates in four steps.
initSearch. A VoIP client src initiates a search for
a receiver dst by sending search(searchId, sipurl =
dst.sipurl) to a uniformly and randomly chosen neigh-
bor q ∈ ngh(src). The search identiﬁer searchId is a
long randomly chosen unique identiﬁer.
processSearch. When p receives search(searchId,
sipurl) from its neighbor q. p checks if sipurl is the
URL of a VoIP client connected to p. If yes, p returns
its IP address result(searchId, p) to peer q. If not, p
uniformly and randomly chooses a neighbor q ∈ ngh(p).
p sends search(searchId, sipurl) to q. If p has not
57
previously seen the search identiﬁer searchId, it caches
(cid:3)searchId, sipurl, q(cid:4).
processResult. When p receives result(searchId,
q) from q. p looks up its cache of recently seen search
queries to locate (cid:3)searchId, sipurl, prev(cid:4). p adds a
routing entry (cid:3)sipurl, q(cid:4) and forwards result(searchId,
prev) to prev.
finSearch. When src receives result(searchId, q)
from q, it adds (cid:3)dst, q(cid:4) to its routing table.
There are two key properties of the random walk based
search algorithm that make it resilient to triangulation
based timing attacks. First, Markovian property (mem-
oryless) of the random walk algorithm: Let us suppose
that a random walker visits two malicious nodes p1 and
p2 in time t1 and t2 (respectively) with t1  N log N, where N is the number
of nodes in the network6. A set of colluding malicious
nodes p1, p2, ··· , pn where p1 received the ﬁrst ran-
dom walk request operates as follows. For every node
v, the adversary compiles rwdistv[pi] for all 1 ≤ i ≤
n and sorts them in increasing order. Let us suppose
that p1 is the ηth smallest element in the sorted list.
Then, we associate a score with node v as scorep1[v]
= η. We sort the nodes by their score as follows: v1
≺ v2:= (scorep1[v1] < scorep1[v2]) ∨ (scorep1[v1] =
scorep1[v2] ∧ rwdistv1[p1] < rwdistv2[p1]). Similar to
the triangulation based timing attacks, the true caller is
more likely to appear in the top few entries of this sorted
list.
We show in our experiments sections that with 10
malicious nodes the top-10 probability for a random walk
protocol is 0.05; while that for the broadcast protocol is
0.85. A major drawback with the random walk search
algorithm is its unbounded route latency. In the following
sections, we present hybrid techniques that attempt to
combine triangulation attack resilience from the random
walk search algorithm and optimal (shortest) route setup
using the broadcast search algorithm.
B. Hybrid Route Set Up Protocols
1) Controlled Random Walk: In this section, we pro-
pose a controlled combination of the random walk search
6Assuming M is irreducible
58
protocol and the broadcast search protocol. We use a
global system wide parameter γ which limits the length
of the random walk. In this protocol, the search algorithm
operates in two phases: random walk search phase (RW)
and broadcast search phase (B). The algorithm starts
operating at node src in phase RW. In phase RW, when
a node p receives a route set up request, it continues
to operate using the random walk search algorithm with
probability γ; the protocol changes to phase B with prob-
ability 1 − γ. In phase B, it uses the broadcast protocol
for route set up requests. Once the request enters phase
B, it continues to operate in that phase.
This protocol ensures that the average number of hops
1
1−γ and the probability
in the random walk phase is
that the length of the random walk exceeds d hops is
γd. Starting at node src, let us suppose that at the end
of phase RW, the request reaches node q. The broadcast
algorithm identiﬁes the shortest path between node q to
node dst. Evidently, a small value for γ ensures that the
latency of the VoIP path is near optimal. A triangulation
based timing attack may identify q (broadcast initiator)
with high probability. However, identifying the caller src
would be non-trivial to the attackers. Let the earliest
malicious nodes that participated in phase RW be node
p. If there exists no such malicious node, then we set p