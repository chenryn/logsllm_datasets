title:Return-Oriented Flush-Reload Side Channels on ARM and Their Implications
for Android Devices
author:Xiaokuan Zhang and
Yuan Xiao and
Yinqian Zhang
Return-Oriented Flush-Reload Side Channels on ARM and
Their Implications for Android Devices
Xiaokuan Zhang
Yuan Xiao
Yinqian Zhang
{zhang.5840, xiao.465}@buckeyemail.osu.edu, PI:EMAIL
Department of Computer Science and Engineering
The Ohio State University
ABSTRACT
Cache side-channel attacks have been extensively studied
on x86 architectures, but much less so on ARM processors.
The technical challenges to conduct side-channel attacks on
ARM, presumably, stem from the poorly documented ARM
cache implementations, such as cache coherence protocols
and cache ﬂush operations, and also the lack of understand-
ing of how diﬀerent cache implementations will aﬀect side-
channel attacks. This paper presents a systematic explo-
ration of vectors for Flush-Reload attacks on ARM pro-
cessors. Flush-Reload attacks are among the most well-
known cache side-channel attacks on x86. It has been shown
in previous work that they are capable of exﬁltrating sensi-
tive information with high ﬁdelity. We demonstrate in this
work a novel construction of ﬂush-reload side channels on
last-level caches of ARM processors, which, particularly, ex-
ploits return-oriented programming techniques to reload in-
structions. We also demonstrate several attacks on Android
OS (e.g., detecting hardware events and tracing software ex-
ecution paths) to highlight the implications of such attacks
for Android devices.
Keywords
Cache side channels; ﬂush-reload
1.
INTRODUCTION
Cache side-channel attacks have been gaining attraction in
recent years, in part due to their noteworthy security impli-
cations in computing environment where processor caches
are shared among mutually distrustful software programs,
e.g., public multi-tenant clouds. Due to the popularity of
x86 processors in cloud data centers, most prior studies on
cache side-channel attacks focus on x86 architectures.
In
contrast, much less research has been done on side-channel
attacks on ARM architectures. Although it is tempting to
presume similar attacks can be easily migrated from x86
to ARM processors, in fact due to signiﬁcant diﬀerences
in the cache design and implementation, conclusions drawn
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
© 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978360
on Intel processors about these hardware-dependent security
threats cannot be directly applied to ARM. To date, we have
not seen much work on the exploitability of ARM caches in
side-channel attacks. Such studies, however, are of growing
signiﬁcance due to the increasing popularity of ARM pro-
cessors in mobile devices and even cloud servers [20].
In this paper, we present a systematic exploration of Flush-
Reload side-channel attacks on ARM caches. Flush-Reload
attacks have been extensively studied on x86 platforms and
are well known for their high accuracy and eﬃciency. The
adversary who has control of an application running on a
shared computer system can exploit the unprivileged clflush
instruction on x86 to Flush cache lines out of the entire
cache hierarchy, and then measure the time to Reload it
back. The key to the attack is that such ﬂush operations,
though taking virtual addresses as input, work on physical
addresses of a cache line, so that cache lines shared with
a victim application will also be evicted in the procedure.
Therefore, the time to Reload the cache line back reveals
whether this line has been recently (after Flush and before
Reload) accessed, and thus loaded into the shared cache,
by the victim application (i.e., fast Reload) or not (i.e.,
slow Reload).
However, replicating the Flush-Reload attacks on ARM
is not as straightforward as one might imagine. The fol-
lowing research questions are yet to be explored: First,
what is ARM’s alternative for x86’s unprivileged clflush
instruction? Second, without a user-space accessible high-
precision clock, e.g., x86’s rdtsc, how does the adversary
measure time with high ﬁdelity on ARM (to perform this
timing attack)? Third, how does ARM’s cache coherence
(e.g., point of coherency/uniﬁcation [10], inclusiveness of
last-level caches) aﬀect Flush-Reload attacks? Unfortu-
nately, none of these questions has been answered in prior
research. Many of these questions (e.g., the ﬁrst one) are
even considered the fundamental obstacles for conducting
such attacks on ARM1 [50].
Our exploration of these questions is driven by Android
operating systems (OS) that run on ARM processors. An-
droid is arguably the most popular operating system in mo-
bile devices. We aim, in exploring these research questions,
to demonstrate practical cache side-channel attacks on com-
modity Android-based smartphones from zero-permission An-
droid apps. However, we stress the results might be ex-
1
It was asserted that “ARM architecture does not allow user pro-
cess to selectively evict memory lines and the Flush-Reload is not
applicable in this architecture” [50].
858tended to iOS and other computing environments should
they be powered by ARM processors.
More specially, in this paper, we show a cross-core Flush-
Reload side-channel attack on ARM that operates in ways
that are similar to return-oriented programming (ROP) at-
tacks. The ﬁrst notable novelty in this attack is the use
of a cache-ﬂush interface that is available on ARM-based
operating systems. This interface is designed to support
self-modifying code (e.g., Just-in-Time compilation) due to
ARM’s lack of coherence between data caches and instruc-
tion caches—instruction caches must be ﬂushed explicitly to
reﬂect changes made in data caches. The exact implemen-
tation of this interface, however, is processor-speciﬁc (see
Sec. 3.2). Particularly, on our testbed, a Samsung Galaxy S6
smartphone, we are constrained to conduct Flush-Reload
attacks using instruction Flushes and Reloads, which in
contrast to previously shown Flush-Reload attacks on data
caches, is a brand new attempt. However, eﬃcient exploita-
tion of instruction Reloads is non-trivial. We show by clev-
erly leveraging gadgets in shared libraries, an adversary may
redirect the control ﬂow of cache Reloads to instructions
in the libraries and return back from the gadgets immedi-
ately after loading the cache lines into the shared last-level
cache (LLC). This type of instruction-based Reloads ef-
fectively and eﬃciently replace the conventional data-based
Reloads. We call our new construction of Flush-Reload
attacks on ARM the return-oriented Flush-Reload attacks.
We further demonstrate two categories of attacks on An-
droid enabled by our presented Flush-Reload side chan-
nels: detecting hardware events and tracing software exe-
cution paths. We particularly show our attacks can detect
the occurrence of touchscreen interrupts with high ﬁdelity,
therefore enabling the unlock pattern inference attack shown
in [21] even without procfs; detect the use of hardware com-
ponents, e.g., scanning credit cards using the camera from an
Uber app, thus facilitating other attack goals (such as those
in [19, 31]); detect updates in the frame buﬀer of the smart-
phone display, hence monitoring the user’s private actions
on the device. We argue the applicability of the attacks is
beyond these examples, and we leave a thorough exploration
of attack spaces as future work.
Contributions. To summarize, we make the following con-
tributions in this paper.
• A systematic exploration of vectors for Flush-Reload
side-channel attacks on ARM in two aspects: cache ﬂush
operations and last-level cache inclusiveness. Particu-
larly, we study the eﬀects of the clearcache system call
on the caches of ﬁve diﬀerent ARM processors. We also
design novel approaches to programmatically determine
the inclusiveness of ARM’s last-level caches.
• A novel construction of return-oriented Flush-Reload
cache side-channel attacks on ARM processors that work
on last-level caches. To our knowledge, our paper presents
the ﬁrst attempt to implement Flush-Reload side chan-
nels on ARM. Conducting these attacks in return-oriented
manners by exploiting gadgets in shared libraries is also
innovative.
• A demonstration of the presented Flush-Reload at-
tacks in Android. We show these cache-based side chan-
nels have similar power as many procfs-based side chan-
nels, and therefore opening new, and hard to mitigate,
attack vectors once procfs side channels are eliminated.
We also show novel UI tracing attacks to illustrate the
new capabilities of our Flush-Reload attacks compared
to existing side-channel attacks in Android.
Roadmap. In the rest of the paper, we ﬁrst provide the
background knowledge of ARM processors and cache side-
channel attacks in Sec. 2. A systematic exploration of ARM’s
cache ﬂush operations and cache coherence implementation
is presented in Sec. 3. We then elaborate our construction of
the return-oriented Flush-Reload side channels on ARM
processors in Sec. 4. Next, we demonstrate two categories
of security attacks on Android that are enabled by our side
channels in Sec. 5. Countermeasures to our attacks are dis-
cussed in Sec. 6 and related work in Sec. 7. Finally, we con-
clude the paper in Sec. 8.
2. BACKGROUND
2.1 ARM Cache-Memory Hierarchy
Similar to x86 processors, ARM processors also adopt
a modiﬁed Harvard architecture, in which the upper-level
caches (e.g., L1) are split into instruction caches and data
caches so that the processors can access the data bus and
instruction bus simultaneously, while the lower-level caches
(e.g., L2) and the main memory are uniﬁed so instructions
can be manipulated as data.
Supporting self-modifying code. One diﬀerence be-
tween ARM and x86 processors is that ARM does not main-
tain coherence between the main memory and instruction
caches [10]. As such, memory writes to the code sections
will not be automatically reﬂected in the instruction cache,
causing the processors to execute staled code. This de-
sign feature aﬀects the processors’ capability to execute self-
modifying code, which is common in Just-in-Time compi-
lation. Accordingly, operating systems, e.g., Android OS,
provide a system call (i.e., clearcache) to ﬂush a range of
virtual addresses out of the caches. This system call in im-
plemented in the kernel by instructing the cp15 coprocessor.
Inclusive vs. exclusive LLCs. An inclusive LLC, in the
case of most ARM processors—the L2 cache, guarantees
that every cache line in the L1 cache also has a copy in
the L2 cache.
In contrast, if the L2 cache is exclusive to
L1, only one copy of the same memory block is stored in ei-
ther the L1 cache or the L2 cache. A third option is usually
called non-inclusive cache [29], which behaves in between of
the other two—a cache line evicted out of the L2 cache is not
also evicted from the L1 cache. Processors may implement
diﬀerent LLC inclusiveness. For example, older Intel proces-
sors (e.g., Core 2 processors) have non-inclusive L2 caches;
recent Intel processors all come with inclusive L3 caches; in
contrast, AMD processors usually have exclusive LLCs [27].
ARM’s L2 caches can be conﬁgured to be inclusive, exclusive
or non-inclusive to L1 instruction or data caches.
2.2 Cache Side-Channel Attacks
Sensitive information of a software program can be leaked
through CPU caches. Because the cache data cannot be
read by the adversary directly, such leakage is usually indi-
rect, through “side” information. Therefore, this type of at-
tacks is called cache side-channel attacks. Prior studies have
explored three types of cache side channels: time-driven,
access-driven and trace-driven. They diﬀer in their threat
models. Time-driven attacks assume only the overall execu-
tion time of certain operation is observable by the adversary;
859trace-driven attacks assume the adversary is able to observe
the power consumption traces of the execution; and access-
driven attacks assume the adversary has logical access to a
cache shared with the victim and infers the victim program’s
execution through its own use of the shared cache.
In this paper, we study access-driven cache side-channel
attacks on ARM. The other two types are less practical in
either their threat models (e.g., knowledge of power con-
sumption in trace-driven attacks) or their unrealistic as-
sumptions (e.g., assumptions of noise-free network commu-
nication in time-driven attacks). Access-driven attacks can
be performed in several ways. Here, we highlight two ap-
proaches that are widely studied in recent years: Prime-
Probe [37] and Flush-Reload [23]. We omit variations of
these attacks, such as Flush-Flush and Evict-Reload.
Prime-Probe attacks work on cache sets. By pre-loading
every cache line in the target cache set with his own memory
blocks, the adversary makes sure his future memory accesses
(to these blocks) will be served by the cache, unless some of
the cache lines are evicted by the victim program during
its execution. Therefore, his own cache misses will reveal
the victim’s cache usage in the target cache set. In Flush-
Reload attacks, the adversary shares some physical mem-
ory pages (e.g., through dynamic shared libraries) with the
victim. By issuing cache ﬂush instructions (e.g., clflush
on x86) on certain virtual address range (mapped to the
shared pages), the adversary can ﬂush the (physical) cache
lines that correspond to this address range out of the entire
cache hierarchy. Therefore future reading (i.e., Reload) of
the cache lines will be slower because they are loaded from
the memory, unless they have been accessed by the victim
(and thus have been fetched into the shared cache).
2.3 Threat Model
We assume the adversary is a regular Android app with no
additional permission than the default settings. Moreover,
we do not assume the device itself is rooted to facilitate the
attack (e.g., through kernel extensions). To diﬀerentiate our
attacks from prior work on procfs-based side channels (see
Sec. 7), we do not require this third-party app to have access
to procfs. As such, our attack will work even when these
side channels are eliminated. The only assumption we need
to make is that the malicious app is packaged together with
a native component that is compiled with Android NDK.
This conﬁguration is very common on Android app markets.
According to a recent study published in 2016, at least 37%
Android apps execute native code [14].
3. DISSECTING ARM CACHES
Unlike their counterparts in x86 processors, caches in ARM
processors are much less understood in the context of side-
channel attacks. In order to exploit ARM caches for Flush-
Reload side-channel attacks, we need to understand how
ARM caches operate in both Flush and Reload operations.
More particularly, we aim to explore the follow aspects:
• Cache ﬂush interfaces. The cache ﬂush interfaces on
x86 is well documented: the entire cache hierarchy can
be invalidated together using the privileged WBINVD in-
struction, and individual cache lines can be ﬂushed us-
ing the unprivileged clflush instruction. In contrast, no
userspace-accessible cache ﬂush instruction is available
on ARM. We will study a less-known attack vector—
clearcache system call—on Android OS, and determine
its impact on all levels of caches.
• Cache inclusiveness. The cache coherence design, partic-
ularly inclusiveness of the last-level cache to upper-level
caches, is crucial to cross-core Flush-Reload attacks:
Whether the victim’s memory access on a diﬀerent CPU
core will aﬀect the adversary’s Reloads. However, such
information is seldom mentioned in ARM speciﬁcation
or manufacturers’ documentation2. We aim to design
novel methods to empirically determine cache inclusive-
ness from Android apps.
In this section, we empirically evaluate these cache proper-
ties on three most popular Android smartphones, i.e., Sam-
sung Galaxy S5 and S6 and Google Nexus 6, and the ﬁve
processors they are equipped with. The Samsung Galaxy
S5 implements an octa-core architecture—one quad-core 1.9
GHz Cortex-A15 CPU and one quad-core 1.3 GHz Cortex-
A7 CPU—on the Exynos 5422 system-on-chip (SoC). The
Samsung Galaxy S6 is equipped with one quad-core 1.5 GHz
Cortex-A53 CPU and one quad-core 2.1 GHz Cortex-A57
CPU, on the Exynos Octa 7420 SoC. Google Nexus 6 comes
with single quad-core Krait 450 processors on the Snap-
dragon 805 SoC. Cortex-A53 and Cortex-A57 are based on
64-bit ARMv8, while other CPUs are 32-bit ARMv7-based.
Roadmap of the section. In Sec. 3.1, we study the la-
tency of several available clocks on Android to perform our
timing channel attacks. In Sec. 3.2, we explore the eﬀects of
clearcache system call and in Sec. 3.3, we empirically de-
termine the LLC (i.e., L2) inclusiveness to both L1 caches
on these processors. We discuss our ﬁndings in Sec. 3.4.
3.1 Time Measurement Facilities
Android apps do not enjoy the unprivileged rdtsc instruc-
tion available to their x86 counterparts. However, accurate