or ﬁelds) can be accessed by a particular user. However,
existing web applications do not have explicit, codiﬁed
access control rules. Rather, each application has its own
authentication system, and access control checks are in-
terspersed throughout the application.
For example, many web applications have a privileged
script used to manage the users of the web application.
This script must only be accessed by the web application
administrator, as it will likely contain logic to change the
password of an arbitrary user and perform other privileged
operations. To restrict access appropriately, the beginning
of the script will contain an access control check to ensure
that unauthorized users cannot access script functionality.
This is actually an example of the policy, “only the admin-
istrator may access the admin.php script”, or to rephrase
such a policy in terms of the resources it affects, “only the
administrator may modify the user table in the database”.
This policy is often never explicitly stated within the web
application, and must instead be inferred from the autho-
rization checks in the web application. Nemesis requires
the developer or system administrator to explicitly provide
an access control list based on knowledge of the applica-
tion. Our prototype system and evaluation suggests that,
in practice, this requires little programmer effort while
providing signiﬁcant security beneﬁts. Note that a single
developer or administrator needs to specify access control
rules. Based on these rules, Nemesis will provide security
checks for all application users.
4.1.1 File Access
Nemesis allows developers to restrict ﬁle or directory ac-
cess to a particular shadow authenticated user. For exam-
ple, a news application may only allow the administrator
to update the news spool ﬁle. We can also restrict the set
of valid operations that can be performed: read, write, or
append. For directories, read permission is equivalent to
listing the contents of the directory, while write permis-
sion allows ﬁles and subdirectories to be created. File
access checks happen before any attempt to open a ﬁle or
directory. These ACLs could be expressed by listing the
ﬁles and access modes permitted for each user.
4.1.2 SQL Database Access
Nemesis allows web applications to restrict access to SQL
tables. Access control rules specify the user, name of the
SQL database table, and the type of access (INSERT,
SELECT, DELETE, or UPDATE). For each SQL query,
Nemesis must determine what tables will be accessed
by the query, and whether the ACLs permit the user to
perform the desired operation on those tables.
In addition to table-level access control, Nemesis also
allows restricting access to individual rows in a SQL table,
since applications often store data belonging to different
users in the same table.
An ACL for a SQL row works by restricting a given
SQL table to just those rows that should be accessible to
the current user, much like a view in SQL terminology.
Speciﬁcally, the ACL maps SQL table names and access
types to an SQL predicate expression involving column
names and values that constrain the kinds of rows the
current user can access, where the values can be either
ﬁxed constants, or the current username from the shadow
authentication system, evaluated at runtime. For example,
a programmer can ensure that a user can only access their
own proﬁle by conﬁning SQL queries on the proﬁle table
to those whose user column matches the current shadow
username.
SELECT ACLs restrict the values returned by a SE-
LECT SQL statement. DELETE and UPDATE query
ACLs restrict the values modiﬁed by an UPDATE or
DELETE statement, respectively. To enforce ACLs for
these statements, Nemesis must rewrite the database
query to append the ﬁeld names and values from the
ACL to the WHERE condition clause of the query. For
example, a query to retrieve a user’s private messages
might be “SELECT * FROM messages WHERE recip-
ient=$current user”, where $current user is supplied by
the application’s authentication system. If attackers could
fool the application’s authentication system into setting
$current user to the name of a different user, they might
be able to retrieve that user’s messages.
Using Nemesis, the programmer can specify an ACL
that only allows SELECTing rows whose sender or recip-
ient column matches the current shadow user. As a result,
if user Bob issues the query, Nemesis will transform it into
the query “SELECT * FROM messages WHERE recipi-
ent=$current user AND (sender=Bob or recipient=Bob)”,
which mitigates any possible authentication bypass attack.
Finally, INSERT statements do not read or modify ex-
isting rows in the database. Thus, access control for
INSERT statements is governed solely by the table access
control rules described earlier. However, sometimes de-
velopers may want to set a particular ﬁeld to the current
shadow authenticated user when a row is inserted into
a table. Nemesis accomplishes this by rewriting the IN-
SERT query to replace the value of the designated ﬁeld
with the current shadow authenticated user (or to add an
additional ﬁeld assignment if the designated ﬁeld was not
initialized by the INSERT statement).
Modifying INSERT queries has a number of real-world
uses. Many database tables include a ﬁeld that stores
8
the username of the user who inserted the ﬁeld. The ad-
ministrator can choose to replace the value of this ﬁeld
with the shadow authenticated username, so that authen-
tication ﬂaws do not allow users to spoof the owner of a
particular row in the database. For example, in the PHP
forum application DeluxeBB, we can override the author
name ﬁeld in the table of database posts with the shadow
authenticated username. This prevents malicious clients
from spooﬁng the author when posting messages, which
can occur if an authentication ﬂaw allows attackers to
authenticate as arbitrary users.
4.2 Enhancing Access Control with DIFT
Web applications often perform actions which are not au-
thorized for the currently authenticated user. For example,
in the PHP image gallery Linpha, users may inform the
web application that they have lost their password. At
this point, the web client is unauthenticated (as they have
no valid password), but the web application changes the
user’s password to a random value, and e-mails the new
password to the user’s e-mail account. While one user
should not generally be allowed to change the password
of a different user, doing so is safe in this case because the
application generates a fresh password not known to the
requesting user, and only sends it via email to the owner’s
address.
One heuristic that helps us distinguish these two cases
in practice is the taint status of the newly-supplied pass-
word. Clearly it would be a bad idea to allow an unauthen-
ticated user to supply the new password for a different
user’s account, and such password values would have the
“user input” taint under Nemesis. At the same time, our
experience suggests that internally-generated passwords,
which do not have the “user input” taint, correspond to
password reset operations, and would be safe to allow.
To support this heuristic, we add one ﬁnal parameter
to all of the above access control rules: taint status. An
ACL entry may specify, in addition to its other parameters,
taint restrictions for the ﬁle contents or database query.
For example, an ACL for Linpha allows the application
to update the password ﬁeld of the user table regardless
of the authentication status, as long as the query is un-
tainted. If the query is tainted, however, the ACL only
allows updates to the row corresponding to the currently
authenticated user.
4.3 Protecting Authentication Credentials
Additionally, there is one security rule that does not easily
ﬁt into our access control model, yet can be protected via
DIFT. When a web client is authenticating to the web ap-
plication, the application must read user credentials such
as a password and use those credentials to authenticate
the client. However, unauthenticated clients do not have
permission to see passwords. A safe web application will
ensure that these values are never leaked to the client. To
prevent an information leak bug in the web application
from resulting in password disclosure, Nemesis forbids
any object that has the authentication credential DIFT tag
bit set from being returned in any HTTP response. In
our prototype, this rule has resulted in no false positives
in practice. Nevertheless, we can easily modify this rule
to allow passwords for a particular user to be returned
in a HTTP response once the client is authenticated for
that user. For example, this situation could arise if a se-
cure e-mail service used the user’s password to decrypt
e-mails, causing any displayed emails to be tagged with
the password bit.
5 Prototype Implementation
We have implemented a proof-of-concept prototype of
Nemesis by modifying the PHP interpreter. PHP is one of
the most popular languages for web application develop-
ment. However, the overall approach is not tied to PHP by
design, and could be implemented for any other popular
web application programming language. Our prototype is
based on an existing DIFT PHP tainting project [29]. We
extend this work to support authentication inference and
authorization enforcement.
5.1 Tag Management
PHP is a dynamically typed language. Internally, all val-
ues in PHP are instances of a single type of structure
known as a zval, which is stored as a tagged union. In-
tegers, booleans, and strings are all instances of the zval
struct. Aggregate data types such as arrays serve as hash
tables mapping index values to zvals. Symbol tables are
hash tables mapping variable names to zvals.
Our prototype stores taint information at the granular-
ity of a zval object, which can be implemented without
storage overhead in the PHP interpreter. Due to alignment
restrictions enforced by GCC, the zval structure has a few
unused bits, which is sufﬁcient for us to store the two taint
bits required by Nemesis.
By keeping track of taint at the object level, Nemesis
assumes that the application will not combine different
kinds of tagged credentials in the same object (e.g. by con-
catenating passwords from two different users together, or
combining untrusted and authentication-based input into
a single string). While we have found this assumption to
hold in all encountered applications, a byte granularity
tainting approach could be used to avoid this limitation
if needed, and prior work has shown it practical to im-
plement byte-level tainting in PHP [16]. When multiple
objects are combined in our prototype, the result’s taint
9
bits are the union of the taint bits on all inputs. This works
well for combining tainted and untainted data, such as
concatenating an untainted salt with a tainted password
(with the result being tainted), but can produce impre-
cise results when concatenating objects with two different
classes of taint.
User input and password taint is propagated across all
standard PHP operations, such as variable assignment,
arithmetic, and string concatenation. Any value with
password taint is forbidden from being returned to the
user via echo, printf, or other output statements.
5.2 Tag Initialization
Any input from URL parameters (GET, PUT, etc), as well
as from any cookies, is automatically tainted with the
’user input’ taint bit. Currently, password taint initializa-
tion is done by manually inserting the taint initialization
function call as soon as the password enters the system
(e.g., from a database) as we have not yet implemented a
full policy language for automated credential tainting. For
a few of our experiments in Section 6 (phpFastNews, PHP
iCalendar, Bilboblog), the admin password was stored in
a conﬁguration php script that was included by the appli-
cation scripts at runtime. In this case, we instrumented the
conﬁguration script to set the password bit of the admin
password variable in the script.
At the same time as we initialize the password taint,
we also set a global variable to store the candidate user-
name associated with the password, to keep track of the
current username being authenticated. If authentication
succeeds, the shadow authentication system uses this can-
didate username to set the global variable that stores the
shadow authenticated user, as well as to initialize the
shadow cookie. If a client starts authenticating a second
time as a different user, the candidate username is reset
to the new value, but the authenticated username is not
affected until authentication succeeds.
Additionally, due to an implementation artifact in the
PHP setcookie() function, we also record shadow au-
thentication in the PHP built-in session when appropriate.
This is because PHP forbids new cookies to be added
to the HTTP response once the application has placed
part of the HTML body in the response output buffer. In
an application that uses PHP sessions, the cookie only
stores the session ID and all authentication information
is stored in session ﬁles on the server. These applications
may output part of the HTML body before authentication
is complete. We correctly handle this case by storing
shadow authentication credentials in the server session
ﬁle if the application has begun a PHP session. When val-
idating and recovering shadow cookies for authentication
purposes, we also check the session ﬁle associated with
the current user for shadow authentication credentials.
This approach relies on PHP safely storing session ﬁles,
but as session ﬁles are stored on the server in a temporary
directory, this is a reasonable assumption.
5.3 Authentication Checks
When checking the authentication status of a user, we ﬁrst
check the global variable that indicates the current shadow
authenticated user. This variable is set if the user has
just begun a new session and been directly authenticated
via password comparison or deferred authentication to
a login server. If this variable is not set, we check to
see if shadow authentication information is stored in the
current session ﬁle (if any). Finally, we check to see if the
user has presented a shadow authentication cookie, and if
so we validate the cookie and extract the authentication
credentials. If none of these checks succeeds, the user is
treated as unauthenticated.
5.4 Password Comparison Authentication
Inference
Authentication inference for password comparisons is
performed by modifying the PHP interpreter’s string com-
parison equality and inequality operators. When one of
these string comparisons executes, we perform a check
to see if the two string operands were determined to be
equal. If the strings were equal, we then check their tags,
and if one string has only the authentication credential
tag bit set, and the other string has only the user input
tag bit set, then we determine that a successful shadow
authentication has occurred. In all of our experiments,
only PhpMyAdmin used a form of authentication that did
not rely on password string comparison, and our handling
of this case is discussed in Section 6.
5.5 Access Control Checks
We perform access control checks for ﬁles by checking the
current authenticated user against a list of accessible ﬁles
(and ﬁle modes) on each ﬁle access. Similarly, we restrict
SQL queries by checking if the currently authenticated
user is authorized to access the table, and by appending
additional WHERE clause predicates to scope the effect
of the query to rows allowed for the current user.
Due to time constraints, we manually inserted these
checks into applications based on the ACL needed by the
application. ACLs that placed constraints on ﬁeld values
of a database row required simple query modiﬁcations to
test if the ﬁeld value met the constraints in the ACL.
In a full-ﬂedged design, the SQL queries should be
parsed, analyzed for the appropriate information, and
rewritten if needed to enforce additional security guar-
antees (e.g., restrict rows modiﬁed to be only those cre-
10
ated by the current authenticated user). Depending on
the database used, query rewriting may also be partially
or totally implemented using database views and trig-
gers [18, 26].
5.6 SQL Injection
Shadow authentication is necessary to prevent authentica-
tion bypass attacks and enforce our ACL rules. However,
it can also be used to prevent false positives in DIFT SQL
injection protection analyses. The most robust form of
SQL injection protection [27] forbids tainted keywords
or operators, and enforces the rule that tainted data may
never change the parse tree of a query.
Our current approach does not support byte granular-
ity taint, and thus we must approximate this analysis.
We introduce a third taint bit in the zval which we use
to denote user input that may be interpreted as a SQL
keyword or operator. We scan all user input at startup
(GET, POST, COOKIE superglobal arrays, etc) and set
this bit only for those user input values that contain a
SQL keyword or operator. SQL quoting functions, such