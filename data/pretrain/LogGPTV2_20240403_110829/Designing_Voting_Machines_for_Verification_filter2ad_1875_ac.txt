The VoteConÔ¨Årmation module is constructed so that
the data that the VoteConÔ¨Årmation module sends to the
VoteCore module is exactly the data that it received from
the VoteSelection module.
Storing votes and canceling voter authentication to-
kens. After receiving a description of the votes from
the VoteConÔ¨Årmation module, the VoteCore atomically
stores the votes and cancels the voter authentication to-
ken. Votes are stored on a durable, history-independent,
tamper-evident, and subliminal-free vote storage mech-
anism [25]. By ‚Äúatomically,‚Äù we mean that once the
VoteCore component begins storing the votes and can-
celing the authentication token, it will not be reset until
after those actions complete. After those actions both
complete, the VoteCore will trigger a reset by sending a
3A ballot image is merely a list of who this voter has voted for. It
need not be an actual image or picture.
326
Security ‚Äô06: 15th USENIX Security Symposium
USENIX Association
message to the ResetModule. Looking ahead, the only
other occasion for the ResetModule to trigger a reset is
when requested by VoteCore in response to a user wish-
ing to cancel her voting session.
Cleaning up between sessions. Upon receiving a sig-
nal from the VoteCore, the ResetModule will reset all
the other components. After those components awake
from the reset, they will inform the ResetModule. Af-
ter all components are awake, the ResetModule tells all
the components to start, thereby initiating the next vot-
ing session and allowing the next voter to vote. We
also allow the VoteCore module to trigger a reset via the
ResetModule if the voter decides to cancel their voting
process; when a voter triggers a reset in this way, the
voter‚Äôs authentication token is not canceled and the voter
can use that token to vote again on that machine at a later
time. Although the VoteCore has access to external me-
dia to store votes and canceled authentication tokens, all
other state in this component is reset.
Enforcing a trusted path between the voter and the
VoteConÔ¨Årmation module. Although the above dis-
cussion only mentions the IOMultiplexor in passing,
the IOMultiplexor plays a central role in the secu-
rity of our design. Directly connecting the LCD and
touch screen to both the VoteSelection module and the
VoteConÔ¨Årmation module would be unsafe:
it would
allow a malicious VoteSelection module to retain con-
trol of the LCD and touch screen forever and display a
spoofed conÔ¨Årmation screen, fooling the voter into think-
ing she is interacting with the trusted VoteConÔ¨Årmation
module when she is actually interacting with mali-
cious code. The IOMultiplexor mediates access to the
LCD and touch screen to prevent such attacks.
It en-
forces the invariant that only one module may have con-
trol over the LCD and touch screen at a time: either
VoteConÔ¨Årmation or VoteSelection may have control,
but not both. Moreover, VoteConÔ¨Årmation is given
precedence: if it requests control, it is given exclusive
access and VoteSelection is locked out. This allows our
system to establish a trusted path between the voter in-
terface and the VoteConÔ¨Årmation module.
4.3 Hardware-enforced separation
Our architecture requires components to be protected
from each other, so that a malicious VoteSelection com-
ponent cannot tamper with or observe the state or code
of other components. One possibility would be to use
some form of software isolation, such as putting each
component in a separate process (relying on the OS for
isolation), in a separate virtual machine (relying on the
VMM), or in a separate Java applet (relying on the JVM).
Instead, we use hardware isolation as a simple method
for achieving strong isolation. We execute each mod-
ule on its own microprocessor (with its own CPU, RAM,
and I/O interfaces). This relies on physical isolation in
an intuitive way:
if two microprocessors are not con-
nected by any communication channel, then they cannot
directly affect each other. VeriÔ¨Åcation of the intercon-
nection topology of the components in our architecture
consequently reduces to verifying the physical separation
of the hardware and verifying the interconnects between
them. Historically, the security community has focused
primarily on software isolation because hardware isola-
tion was viewed as prohibitively expensive [32]. How-
ever, we argue that the price of a microprocessor has
fallen dramatically enough that today hardware isolation
is easily affordable, and we believe the reduction in com-
plexity easily justiÔ¨Åes the extra cost.
With this approach to isolation, the communication el-
ements between modules acquire special importance, be-
cause they determine the way that modules are able to in-
teract. We carefully structured our design to simplify the
connection topology as much as possible. Figure 3 sum-
marizes the interconnectivity topology, and we describe
several key aspects of our design below.
We remark that when multiple hardware components
are used, one should ensure that the same versions of
code run on each component.
Buses and wires. Our hardware-based architecture em-
ploys two types of communication channels: buses and
wires. Buses provide high-speed unidirectional or bidi-
rectional communication between multiple components.
Wires are a simple signaling element with one bit of
state; they can be either high or low, and typically are
used to indicate the presence or absence of some event.
Wires are unidirectional: one component (the sender)
will set the value of a wire but never read it, and the other
component (the receiver) will read the value of the wire
but never set it. Wires are initially low, and can be set,
but not cleared; once a wire goes high, it remains high
until its controlling component is reset. We assume that
wires are reliable but buses are potentially unreliable.
To deal with dropped or garbled messages without in-
troducing too much complexity, we use an extremely
simple communication protocol. Our protocol is con-
nectionless and does not contain any in-band signaling
(e.g., SYN or ACK packets). When a component in our
architecture wishes to transmit a message, it will repeat-
edly send that message over the bus until it is reset or it
receives an out-of-band signal to stop transmitting. The
sender appends a hash of the message to the message.
The receiver accepts the Ô¨Årst message with a valid hash,
and then acknowledges receipt with an out-of-band sig-
nal. This acknowledgment might be conveyed by chang-
ing a wire‚Äôs value from low to high, and the sender can
poll this wire to identify when to stop transmitting. Com-
USENIX Association
Security ‚Äô06: 15th USENIX Security Symposium
327
Figure 3: Our architecture, showing the hardware communication elements.
ponents that need replay protection can add a sequence
number to their messages.
Using buses and wires. We now describe how to in-
stantiate the communication paths in our high-level de-
sign from Section 4.2 with buses and wires. Once
the VoteCore module reads a valid token, it repeatedly
sends the data on the token to VoteSelection until it re-
ceives a message from VoteConÔ¨Årmation. After stor-
ing the vote and canceling the authentication token, the
VoteCore module triggers a reset by setting its wire to
the ResetModule high.
To communicate with the voter, the VoteSelection
component creates a bitmap of an image, packages that
image into a message , and repeatedly sends that message
to the IOMultiplexor. Since the VoteSelection module
may send many images, it includes in each message a se-
quence number; this sequence number does not change if
the image does not change. Also included in the message
is a list of virtual buttons, each described by a globally
unique button name and the x- and y-coordinates of the
region. The IOMultiplexor will continuously read from
its input source (initially the VoteSelection module) and
draw to the LCD every bitmap that it receives with a new
sequence number. The IOMultiplexor also interprets in-
puts from the touch screen, determines whether the in-
puts correspond to a virtual button and, if so, repeatedly
writes the name of the region to the VoteSelection mod-
ule until it has new voter input. Naming the regions pre-
vents user input on one screen from being interpreted as
input on a different screen.
When the voter chooses to proceed from the vote
the
selection phase to the vote conÔ¨Årmation phase,
VoteConÔ¨Årmation module will receive a ballot from the
VoteSelection module. The VoteConÔ¨Årmation mod-
ule will then set its wire to the IOMultiplexor high.
When the IOMultiplexor detects this wire going high,
it will empty all its input and output bus buffers, re-
set its counter for messages from the VoteSelection
module, and then only handle input and output for the
VoteConÔ¨Årmation module (ignoring any messages from
VoteSelection). If the VoteConÔ¨Årmation module deter-
mines that the user wishes to return to the VoteSelection
module and edit her votes, the VoteConÔ¨Årmation mod-
ule will set its wire to the VoteSelection module high.
The VoteSelection module will
then use its bus to
VoteConÔ¨Årmation to repeatedly acknowledge that this
wire is high. After receiving this acknowledgment, the
VoteConÔ¨Årmation module will reset itself, thereby clear-
ing all internal state and also lowering its wires to the
IOMultiplexor and VoteSelection modules. Upon de-
tecting that this wire returns low, the IOMultiplexor will
clear all its input and output buffers and return to han-
328
Security ‚Äô06: 15th USENIX Security Symposium
USENIX Association
 












































































































!









dling the input and output for VoteSelection. The pur-
pose for the handshake between the VoteConÔ¨Årmation
module and the VoteSelection module is to prevent the
VoteConÔ¨Årmation module from resetting and then im-
mediately triggering on the receipt of the voter‚Äôs previ-
ous selection (without this handshake, the VoteSelection
module would continuously send the voter‚Äôs previous se-
lections, regardless of whether VoteConÔ¨Årmation reset
itself).
4.4 Reducing the complexity of trusted
components
We now discuss further aspects of our design that facili-
tate the creation of implementations with minimal trusted
code.
Resets. Each module (except for the ResetModule) in-
teracts with the ResetModule via three wires, the initial
values of which are all low: a ready wire controlled by
the component and reset and start wires controlled by
the ResetModule. The purpose of these three wires is to
coordinate resets to avoid a situation where one compo-
nent believes that it is handling the i-th voter while an-
other component believes that it is handling the (i+1)-th
voter.
The actual interaction between the wires is as follows.
When a component Ô¨Årst boots, it waits to complete any
internal initialization steps and then sets the ready wire
high. The component then blocks until its start wire
goes high. After the ready wires for all components
connected to the ResetModule go high, the ResetModule
sets each component‚Äôs start wire high, thereby allowing
all components to proceed with handling the Ô¨Årst voting
session.
to reset.
Upon completion of a voting session, i.e., after re-
ceiving a signal from the VoteCore component,
the
ResetModule sets each component‚Äôs reset wire high.
This step triggers each component
The
ResetModule keeps the reset wires high until all the
component ready wires go low, meaning that the com-
ponents have stopped executing. The ResetModule sub-
sequently sets the reset wire low, allowing the compo-
nents to reboot. The above process with the ready and
start wires is then repeated.
Cast and cancel buttons. Our hardware architecture
uses two physical buttons, a cast button and a cancel but-
ton. These buttons directly connect the user to an indi-
vidual component, simplifying the task of establishing
a trusted path for cast and cancel requests. Our use of a
hardware button (rather than a user interface element dis-
played on the LCD) is intended to give voters a way to
know that their vote will be cast. If we used a virtual cast
button, a malicious VoteSelection module could draw a
spoofed cast button on the LCD and swallow the user‚Äôs
vote, making the voter think that they have cast their vote
when in fact nothing was recorded and leaving the voter
with no way to detect this attack. In contrast, a physical
cast button allows attentive voters to detect these attacks
(an alternative might be to use a physical ‚Äúvote recorded‚Äù
light in the VoteCore). Additionally, if we used a vir-
tual cast button, miscalibration of the touch screen could
trigger accidental invocation of the virtual cast button
against the voter‚Äôs wishes. While calibration issues may
still affect the ability of a user to scroll through a multi-
screen conÔ¨Årmation process, we anticipate that such a
problem will be easier to recover from than touch screen
miscalibrations causing the DRE to incorrectly store a