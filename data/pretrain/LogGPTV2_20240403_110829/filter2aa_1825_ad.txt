whenever possible.
A minimal DriverEntry routine could just return a successful status, like so:
NTSTATUS
DriverEntry(
_In_ PDRIVER_OBJECT DriverObject,
_In_ PUNICODE_STRING RegistryPath) {
return STATUS_SUCCESS;
}
This code would not yet compile. First, you’ll need to include a header that has the required definitions
for the types present in DriverEntry. Here’s one possibility:
#include 
Now the code has a better chance of compiling, but would still fail. One reason is that by default, the
compiler is set to treat warnings as errors, and the function does not make use of its given arguments.
Removing treat warnings as errors from the compiler’s options is not recommended, as some warnings
may be errors in disguise. These warnings can be resolved by removing the argument names entirely (or
commenting them out), which is fine for C++ files. There is another, more “classic” way to solve this, which
is to use the UNREFERENCED_PARAMETER macro:
NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
UNREFERENCED_PARAMETER(DriverObject);
UNREFERENCED_PARAMETER(RegistryPath);
return STATUS_SUCCESS;
}
As it turns out, this macro actually references the argument given just by writing its value as is, and this
shuts the compiler up, making the argument technically “referenced”.
Building the project now compiles fine, but causes a linker error. The DriverEntry function must have
C-linkage, which is not the default in C++ compilation. Here’s the final version of a successful build of the
driver consisting of a DriverEntry function only:
Chapter 2: Getting Started with Kernel Development
26
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
UNREFERENCED_PARAMETER(DriverObject);
UNREFERENCED_PARAMETER(RegistryPath);
return STATUS_SUCCESS;
}
At some point, the driver may be unloaded. At that time, anything done in the DriverEntry function
must be undone. Failure to do so creates a leak, which the kernel will not clean up until the next reboot.
Drivers can have an Unload routine that is automatically called before the driver is unloaded from memory.
Its pointer must be set using the DriverUnload member of the driver object:
DriverObject->DriverUnload = SampleUnload;
The unload routine accepts the driver object (the same one passed to DriverEntry) and returns void.
As our sample driver has done nothing in terms of resource allocation in DriverEntry, there is nothing
to do in the Unload routine, so we can leave it empty for now:
void SampleUnload(_In_ PDRIVER_OBJECT DriverObject) {
UNREFERENCED_PARAMETER(DriverObject);
}
Here is the complete driver source at this point:
#include 
void SampleUnload(_In_ PDRIVER_OBJECT DriverObject) {
UNREFERENCED_PARAMETER(DriverObject);
}
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
UNREFERENCED_PARAMETER(RegistryPath);
DriverObject->DriverUnload = SampleUnload;
return STATUS_SUCCESS;
}
Deploying the Driver
Now that we have a successfully compiled Sample.sys driver file, let’s install it on a system and then load
it. Normally, you would install and load a driver on a virtual machine, to remove the risk of crashing your
primary machine. Feel free to do so, or take the slight risk with this minimalist driver.
Chapter 2: Getting Started with Kernel Development
27
Installing a software driver, just like installing a user-mode service, requires calling the CreateService
API with proper arguments, or using a comparable tool. One of the well-known tools for this purpose
is Sc.exe (short for Service Control), a built-in Windows tool for managing services. We’ll use this tool
to install and then load the driver. Note that installation and loading of drivers is a privileged operation,
normally available for administrators.
Open an elevated command window and type the following (the last part should be the path on your
system where the SYS file resides):
sc create sample type= kernel binPath= c:\dev\sample\x64\debug\sample.sys
Note there is no space between type and the equal sign, and there is a space between the equal sign and
kernel; same goes for the second part.
If all goes well, the output should indicate success. To test the installation, you can open the registry editor
(regedit.exe) and look for the driver details at HKLM\System\CurrentControlSet\Services\Sample. Figure
2-3 shows a screenshot of the registry editor after the previous command.
Figure 2-3: Registry for an installed driver
To load the driver, we can use the Sc.exe tool again, this time with the start option, which uses the
StartService API to load the driver (the same API used to load services). However, on 64 bit systems
drivers must be signed, and so normally the following command would fail:
sc start sample
Chapter 2: Getting Started with Kernel Development
28
Since it’s inconvenient to sign a driver during development (maybe even not possible if you don’t have
a proper certificate), a better option is to put the system into test signing mode. In this mode, unsigned
drivers can be loaded without a hitch.
With an elevated command window, test signing can be turned on like so:
bcdedit /set testsigning on
Unfortunately, this command requires a reboot to take effect. Once rebooted, the previous start command
should succeed.
If you are testing on a Windows 10 (or later) system with Secure Boot enabled, changing the
test signing mode will fail. This is one of the settings protected by Secure Boot (local kernel
debugging is also protected by Secure Boot). If you can’t disable Secure Boot through BIOS
setting, because of IT policy or some other reason, your best option is to test on a virtual
machine.
There is yet another setting that you may need to specify if you intend to test the driver on pre-Windows
10 machine. In this case, you have to set the target OS version in the project properties dialog, as shown
in figure 2-4. Notice that I have selected all configurations and all platforms, so that when switching
configurations (Debug/Release) or platforms (x86/x64/ARM/ARM64), the setting is maintained.
Figure 2-4: Setting Target OS Platform in the project properties
Chapter 2: Getting Started with Kernel Development
29
Once test signing mode is on, and the driver is loaded, this is the output you should see:
c:/>sc start sample
SERVICE_NAME: sample
TYPE
: 1
KERNEL_DRIVER
STATE
: 4
RUNNING
(STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)
WIN32_EXIT_CODE
: 0
(0x0)
SERVICE_EXIT_CODE
: 0
(0x0)
CHECKPOINT
: 0x0
WAIT_HINT
: 0x0
PID
: 0
FLAGS
:
This means everything is well, and the driver is loaded. To confirm, we can open Process Explorer and
find the Sample.Sys driver image file. Figure 2-5 shows the details of the sample driver image loaded into
system space.
Figure 2-5: sample driver image loaded into system space
At this point, we can unload the driver using the following command:
sc stop sample
Behind the scenes, sc.exe calls the ControlService API with the SERVICE_CONTROL_STOP value.
Unloading the driver causes the Unload routine to be called, which at this time does nothing. You can
verify the driver is indeed unloaded by looking at Process Explorer again; the driver image entry should
not be there anymore.
Simple Tracing
How can we know for sure that the DriverEntry and Unload routines actually executed? Let’s add basic
tracing to these functions. Drivers can use the DbgPrint function to output printf-style text that can
Chapter 2: Getting Started with Kernel Development
30
be viewed using the kernel debugger, or some other tool.
Here is updated versions for DriverEntry and the Unload routine that use KdPrint to trace the fact
their code executed:
void SampleUnload(PDRIVER_OBJECT DriverObject) {
UNREFERENCED_PARAMETER(DriverObject);
DbgPrint("Sample driver Unload called\n");
}
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
UNREFERENCED_PARAMETER(RegistryPath);
DriverObject->DriverUnload = SampleUnload;
DbgPrint("Sample driver initialized successfully\n");
return STATUS_SUCCESS;
}
A more typical approach is to have these outputs in Debug builds only. This is because Dbgprint has
some overhead that you may want to avoid in Release builds. KdPrint is a macro that is only compiled in
Debug builds and calls the underlying DbgPrint kernel API. Here is a revised version that uses KdPrint:
void SampleUnload(PDRIVER_OBJECT DriverObject) {
UNREFERENCED_PARAMETER(DriverObject);
KdPrint(("Sample driver Unload called\n"));
}
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
UNREFERENCED_PARAMETER(RegistryPath);
DriverObject->DriverUnload = SampleUnload;
KdPrint(("Sample driver initialized successfully\n"));
return STATUS_SUCCESS;
}
Notice the double parenthesis when using KdPrint. This is required because KdPrint is a macro, but
apparently accepts any number of arguments, a-la printf. Since macros cannot receive a variable number
Chapter 2: Getting Started with Kernel Development
31
of parameters, a compiler trick is used to call the DbgPrint function that does accept a variable number
of parameters.
With these statements in place, we would like to load the driver again and see these messages. We’ll use a
kernel debugger in chapter 4, but for now we’ll use a useful Sysinternals tool named DebugView.
Before running DebugView, you’ll need to make some preparations. First, starting with Windows Vista,
DbgPrint output is not actually generated unless a certain value is in the registry. You’ll have to add
a key named Debug Print Filter under HKLM\SYSTEM\CurrentControlSet\Control\Session Manager (the
key typically does not exist). Within this new key, add a DWORD value named DEFAULT (not the default
value that exists in any key) and set its value to 8 (technically, any value with bit 3 set will do). Figure 2-6
shows the setting in RegEdit. Unfortunately, you’ll have to restart the system for this setting to take effect.
Figure 2-6: Debug Print Filter key in the registry
Once this setting has been applied, run DebugView (DbgView.exe) elevated. In the Options menu, make
sure Capture Kernel is selected (or press Ctrl+K). You can safely deselect Capture Win32 and Capture
Global Win32, so that user-mode output from various processes does not clutter the display.
DebugView is able to show kernel debug output even without the Registry value shown in figure
2-6 if you select Enable Verbose Kernel Output from its Capture menu. However, it seems this
option does not work on Windows 11, and the Registry setting is necessary.
Build the driver, if you haven’t already. Now you can load the driver again from an elevated command
window (sc start sample). You should see output in DebugView as shown in figure 2-7. If you unload
the driver, you’ll see another message appearing because the Unload routine was called. (The third output
line is from another driver and has nothing to do with our sample driver)
Chapter 2: Getting Started with Kernel Development
32
Figure 2-7: Sysinternals DebugView Output
Add code to the sample DriverEntry to output the Windows OS version: major, minor, and
build number. Use the RtlGetVersion function to retrieve the information. Check the results
with DebugView.
Summary
We’ve seen the tools you need to have for kernel development and wrote a very minimalistic driver to
prove the basic tools work. In the next chapter, we’ll look at the fundamental building blocks of kernel
APIs, concepts, and fundamental structures.
Chapter 3: Kernel Programming Basics
In this chapter, we’ll dig deeper into kernel APIs, structures, and definitions. We’ll also examine some of
the mechanisms that invoke code in a driver. Finally, we’ll put all that knowledge together to create our
first functional driver and client application.
In this chapter:
• General Kernel Programming Guidelines
• Debug vs. Release Builds
• The Kernel API
• Functions and Error Codes
• Strings
• Dynamic Memory Allocation
• Linked Lists
• Object Attributes
• The Driver Object
• Device Objects
General Kernel Programming Guidelines
Developing kernel drivers requires the Windows Driver Kit (WDK), where the appropriate headers and
libraries needed are located. The kernel APIs consist of C functions, very similar in essence to user-mode
APIs. There are several differences, however. Table 3-1 summarizes the important differences between
user-mode programming and kernel-mode programming.
Table 3-1: Differences between user mode and kernel mode development
User Mode
Kernel Mode
Unhandled Exceptions
Unhandled exceptions crash the process
Unhandled exceptions crashes the system
Termination
When a process terminates, all private
memory and resources are freed
automatically
If a driver unloads without freeing
everything it was using, there is a leak,
only resolved in the next boot
Return values
API errors are sometimes ignored
Should (almost) never ignore errors
IRQL
Always PASSIVE_LEVEL (0)
May be DISPATCH_LEVEL (2) or higher
Chapter 3: Kernel Programming Basics
34
Table 3-1: Differences between user mode and kernel mode development
User Mode
Kernel Mode
Bad coding
Typically localized to the process
Can have system-wide effects
Testing and Debugging
Typical testing and debugging done on
the developer’s machine
Debugging must be done with another
machine
Libraries
Can use almost and C/C++ library (e.g.
STL, boost)
Most standard libraries cannot be used
Exception Handling
Can use C++ exceptions or Structured
Exception Handling (SEH)
Only SEH can be used
C++ Usage
Full C++ runtime available
No C++ runtime
Unhandled Exceptions
Exceptions occurring in user-mode that are not caught by the program cause the process to terminate
prematurely. Kernel-mode code, on the other hand, being implicitly trusted, cannot recover from an
unhandled exception. Such an exception causes the system to crash with the infamous Blue screen of
death (BSOD) (newer versions of Windows have more diverse colors for the crash screen). The BSOD may
first appear to be a form of punishment, but it’s essentially a protection mechanism. The rationale being
it, is that allowing the code to continue execution could cause irreversible damage to Windows (such as
deleting important files or corrupting the registry) that may cause the system to fail boot. It’s better, then,
to stop everything immediately to prevent potential damage. We’ll discuss the BSOD in more detail in
chapter 6.
All this leads to at least one conclusion: kernel code must be carefully programmed, meticulous, and not
skip any details, or error checks.
Termination
When a process terminates, for whatever reason - either normally, because of an unhandled exception,
or terminated by external code - it never leaks anything: all private memory is freed, and all handles are
closed. Of course, premature handle closing may cause some loss of data, such as a file handle being closed
before flushing some data to disk - but there are no resource leaks beyond the lifetime of the process; this
is guaranteed by the kernel.
Kernel drivers, on the other hand, don’t provide such a guarantee. If a driver unloads while still holding
onto allocated memory or open kernel handles - these resources will not be freed automatically, only
released at the next system boot.
Why is that? Can’t the kernel keep track of a driver’s allocations and resource usage so these can be freed
automatically when the driver unloads?
Theoretically, this would have been possible to achieve (although currently the kernel does not track such
resource usage). The real issue is that it would be too dangerous for the kernel to attempt such cleanup.
The kernel has no way of knowing whether the driver leaked those resources for a reason; for example, the
driver could allocate some buffer and then pass it to another driver, with which it cooperates. That second
driver may use the memory buffer and free it eventually. If the kernel attempted to free the buffer when
Chapter 3: Kernel Programming Basics
35
the first driver unloads, the second driver would cause an access violation when accessing that now-freed
buffer, causing a system crash.
This emphasizes the responsibility of a kernel driver to properly clean up after itself; no one else will do it.
Function Return Values
In typical user-mode code, return values from API functions are sometimes ignored, the developer being
somewhat optimistic that the called function is unlikely to fail. This may or may not be appropriate for
one function or another, but in the worst case, an unhandled exception would later crash the process; the
system, however, remains intact.
Ignoring return values from kernel APIs is much more dangerous (see the previous Termination section),
and generally should be avoided. Even seemingly “innocent” looking functions can fail for unexpected
reasons, so the golden rule here is - always check return status values from kernel APIs.
IRQL
Interrupt Request Level (IRQL) is an important kernel concept that will be further discussed in chapter 6.
Suffice it to say at this point that normally a processor’s IRQL is zero, and in particular it’s always zero
when user-mode code is executing. In kernel mode, it’s still zero most of the time - but not all the time.
Some restrictions on code execution exist at IRQL 2 and higher, which means the driver writer must be
careful to use only allowed APIs at that high IRQL. The effects of higher than zero IRQLs are discussed in
chapter 6.
C++ Usage