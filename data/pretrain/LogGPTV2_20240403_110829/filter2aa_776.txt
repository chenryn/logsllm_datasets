# Abusing Certificate Transparency: How to Hack Web Applications Before Installation

## Presenter
Hanno BÃ¶ck  
[https://hboeck.de/](https://hboeck.de/)

## 1. HTTPS
- The foundation of secure web communication.

## 2. Certificate Authorities (CAs)
- Entities that issue and manage digital certificates.

## 3. Can We Trust Certificate Authorities?
- **No**: There have been numerous instances of illegitimate certificates in the past.

## 4. Improve or Replace CAs?
- **Popular Infosec Opinion**: CAs are problematic, and we need to eliminate them.
- **Reality**: No feasible plan exists for replacing CAs.

## 5. Improving the CA Ecosystem
- **Baseline Requirements**: Establishing minimum standards for CAs.
- **HTTP Public Key Pinning (HPKP)**: Ensuring only specific public keys can be used.
- **Certificate Authority Authorization (CAA)**: Allowing domain owners to specify which CAs can issue certificates for their domains.
- **Certificate Transparency (CT)**: Making all certificates publicly available in logs.

## 6. Certificate Transparency (CT)
- **Public Logs**: All certificates are logged and accessible to everyone.
- **Details**: Involves Merkle Hash Trees, Signed Certificate Timestamps (SCT), Signed Tree Head (STH), Precertificates, Monitors, and Gossip. These details, while complex, are not the focus of this talk.
- **Future Requirement**: Logging will be mandatory starting April 2018.
- **Current Status**: Most certificates are already being logged.
- **Monitoring CAs**: CT allows anyone to check logs for suspicious activity.
  - Example: [https://crt.sh](https://crt.sh)

## 7. Certificate Transparency as a Data Source
- **For Researchers**: To analyze and understand the certificate ecosystem.
- **For Search Engines**: To index and provide relevant information.
- **For Attackers?**: Potential misuse for malicious purposes.

## 8. Feed of New Host Names
- Certificates contain hostnames, making CT a source of newly created HTTPS host names.

## 9. Self-Hosted Web Applications
- Examples: WordPress, Joomla, Drupal, etc.

## 10. Web Application Installers
- **Process**: Upload files to the host, open in a browser, and follow installation steps (e.g., setting up an initial user account, providing database credentials).
- **Security Concern**: Typically, no authentication is required during installation.

## 11. Google Dorking Web Installers
- **Old Idea**: Use search engines to find unprotected installers.

## 12. Attack Idea
- **Time Window**: Between uploading files and completing the installer, there is a period with no protection.
- **Stream of Host Names**: CT provides a stream of newly created host names.

## 13. HTTPS and Certificates
- **Trend**: HTTPS is becoming more popular, and many hosting providers automatically issue certificates.

## 14. Attack Steps
1. **Monitor CT Logs**: Extract host names.
2. **Compare Web Pages**: Check for common installer pages.
3. **Installer Found**: Complete the installation, upload a plugin with a code execution backdoor, and revert the installation, leaving the backdoor.
4. **Database Credentials**: Installers often require MySQL credentials, which can be for external servers (e.g., [https://www.freemysqlhosting.net/](https://www.freemysqlhosting.net/)).

## 15. Demo
- A practical demonstration of the attack process.

## 16. Challenges
- **Log Delay**: Logged certificates may not be immediately public, with a lag of around 30 minutes to 1 hour.
- **Vulnerable Installers**: Despite the delay, many vulnerable installers can still be targeted.

## 17. Optimizations
- **Multiple Checks**: Instead of checking sites once, perform multiple checks over time.

## 18. Numbers
- **Potential Impact**: Approximately 4000 WordPress installations could be compromised within a month.
- **Other Apps**: Lower numbers for other applications, such as Joomla (~400) and Owncloud/Nextcloud (each ~100), but still significant.

## 19. Protection
- **Authentication for Installers**: Installers should require authentication.

## 20. Challenges for Application Developers
- **Ease of Use**: Developers want simple installation processes.

## 21. Security Tokens
- **Process**: Web application generates a token and writes it to a file. The user must read the token to complete the installation.

## 22. Vendor Responses
- **Drupal, Typo3, Owncloud**: No response.
- **WordPress, Nextcloud, Serendipity**: Participated in discussions but took no action.
- **Joomla**: Implemented a security token if the database server is not localhost.

## 23. Whitelisting Localhost
- **Idea**: Only allow local database connections.
- **Concern**: An attacker might already have access to local database credentials.

## 24. User Actions
- **Be Fast**: Ensure the installation process is completed quickly, though the speed of CT logs is unpredictable.
- **.htaccess**: Create a .htaccess file with password protection before installation. Some web applications generate .htaccess files themselves.

## 25. Takeaways
1. **Unauthenticated Installers**: Must be eliminated. Many web application developers have ignored this issue.
2. **Certificate Transparency**: A powerful tool to strengthen the HTTPS/TLS and PKI ecosystem, but also a data source for attackers.
3. **TLS Host Names**: With CT, TLS host names are no longer secret, and awareness is crucial.

## 26. Conclusion
- **Thank You for Listening!**
- **Questions?**  
- **Contact**: [https://hboeck.de/](https://hboeck.de/)