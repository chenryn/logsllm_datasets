# Title: Automating Fast and Secure Translations from Type-I to Type-III Pairing Schemes

## Authors:
- Joseph A. Akinyele
- Christina Garman
- Susan Hohenberger

### Affiliations:
- Johns Hopkins University

### Contact Information:
- PI:EMAIL (Joseph A. Akinyele)
- PI:EMAIL (Christina Garman)
- PI:EMAIL (Susan Hohenberger)

### Date: August 13, 2015

## Abstract
Pairing-based cryptography has seen significant growth over the past decade, offering both enhanced functionality and efficiency. However, there is a substantial security gap between the theoretical analysis of schemes in academic literature and their practical implementations. This discrepancy arises because there are multiple types of pairings: Type-I, often referred to as "symmetric," is typically used for presenting and proving the security of schemes due to its simplicity and weaker complexity assumptions. In contrast, Type-III, or "asymmetric," pairings are more efficient in terms of bandwidth and computation time, making them the preferred choice for practical implementations.

The transition from Type-I to Type-III pairings involves two main challenges. First, the change in the algebraic setting invalidates the original security proof. Second, there can be numerous (potentially thousands) ways to translate a Type-I scheme to a Type-III scheme, and the optimal translation may vary depending on the specific application.

Our contribution is the design, development, and evaluation of AutoGroup+, a new software tool that automatically translates Type-I pairing schemes to Type-III. The output of AutoGroup+ is both secure (assuming the input is secure) and optimal based on the user's efficiency constraints, excluding any software or runtime errors. Previous automation efforts for pairings either lacked security guarantees or were only partially automated and impractically slow. AutoGroup+ addresses the pairing security gap by providing a fast and secure translation tool.

**Funding Acknowledgments:**
- Joseph A. Akinyele: Supported by Zeutro, LLC and the Office of Naval Research under contract N00014-14-1-0333.
- Christina Garman: Supported by the Office of Naval Research under contract N00014-14-1-0333.
- Susan Hohenberger: Supported by the National Science Foundation CNS-1228443 and CNS-1414023, the Office of Naval Research under contract N00014-14-1-0333, and a Microsoft Faculty Fellowship.

## Table of Contents
1. Introduction
    1.1 Prior Work
2. Background
    2.1 Pairings
    2.2 The Z3 Satisﬁability Modulo Theories (SMT) Solver
    2.3 A Scheme Description Language (SDL) and Toolchain
3. The AutoGroup+ System
    3.1 How It Works
        3.1.1 Step 1: Generating Computer-Readable Inputs
        3.1.2 Step 2: Extracting Algebraic Dependencies
        3.1.3 Step 3: Merge Dependency Graphs
        3.1.4 Step 4: Assign Variables using the SMT Solver
        3.1.5 Step 5: Search for Optimal Solution
        3.1.6 Step 6: Evaluate and Process the Solution
    3.2 Analysis of AutoGroup+
4. An Automation Example with BB-HIBE
5. AutoGroup+: Experimental Evaluation
    5.1 Comparison with ACSC/Charm
    5.2 Comparison with Abe et al.
    5.3 Comparison with AutoGroup
    5.4 Comparison with Manual Translations
6. Conclusions
7. Acknowledgments
A. Current Efficiency Numbers for Type-I and Type-III Pairings
B. SDL Descriptions for Section 4
    B.1 SDL as Input
    B.2 Translated Scheme and Assumption SDL Descriptions
C. Camenisch-Lysyanskaya Signature Scheme

## 1. Introduction
Automation is increasingly being explored as a means to assist in the design and implementation of cryptographic schemes. The benefits of using computer assistance include speed, accuracy, and cost-effectiveness.

Recent research in automating pairing (bilinear) cryptographic constructions (e.g., [AGHP12, AGH13, AGOT14, BFF+14]) has gained momentum. Since the seminal work of Boneh and Franklin [BF01], interest in pairings has grown significantly. Pairings have become a staple at top cryptography and security conferences, and the open-source Charm library has been downloaded thousands of times worldwide. Recently, Voltage Security, a company specializing in pairings, was acquired by HP [Kri15].

Pairings are algebraic groups with special properties (see Section 2.1), often employed for their functionality and efficiency. There are different types of pairings: Type-I, called "symmetric," is typically how schemes are presented and proven secure in the literature because it is simpler and the complexity assumptions can be weaker. In contrast, Type-III, called "asymmetric," is typically the most efficient choice for implementation in terms of bandwidth and computation time.

Translating a Type-I scheme into a Type-III scheme is complex. First, there may be thousands of different Type-III translations of a Type-I scheme, and the "best" translation may depend on the application. For instance, one translation might optimize ciphertext size, while another offers the fastest decryption time. Second, each new translation requires a new proof under Type-III assumptions. Exploring and analyzing all possible translations is a significant burden on human cryptographers. Indeed, a small subset of manual translations of a scheme or particular set of schemes is regarded as a publishable result in its own right, e.g., [RCS12, CLL+13, CLL+14].

Given this translation hurdle, common practice today is to analyze a Type-I scheme but then use ad-hoc means to derive a Type-III translation that is unproven and possibly non-optimal. The goal of this work is to address this problem by advancing cryptographic automation.

### Our Contribution: The AutoGroup+ Tool
Our primary contribution is the design, development, and performance evaluation of a new publicly-available tool, AutoGroup+, that automatically translates pairing schemes from Type-I to Type-III. The output of AutoGroup+ is: (1) "secure" provided the input is "secure" (see Section 3.2) and (2) optimal based on the user’s efficiency constraints (see Section 3.1.5). The input is a computer-readable format of the Type-I construction, metadata about its security analysis, and user-specified efficiency constraints. The output is a translated Type-III construction (in text, C++, Python, or LATEX) with metadata about its security analysis. (See Figure 1.)

The audience for this tool includes:
1. Anyone wanting to implement a pairing construction.
2. Pairing construction designers.

### New Scheme Description Language (SDL) Database
The input to AutoGroup+ requires a computer-readable format of the Type-I construction, the Type-I complexity assumption(s), and the Type-I security proof. Translating human-written security proofs into SDL was a challenge. We focused on a common type of proof exhibiting a certain type of black-box reduction. We created a new SDL structure for representing assumptions and reductions of this type, which may be of independent interest. Additionally, we transcribed five assumptions, eight reductions, and improved the SDLs for nine popular constructions (from [AGH13]). (See Appendix B for an example of a simple case.) Once transcribed, these SDL files can be reused. We believe the future of cryptographic automation research will involve processing the assumptions and proofs; thus, our database is made public as a testbed for future automation research.

### Speed of Tool
AutoGroup+ took less than 21 seconds to process any of the test set, which included seven simple schemes (16 or fewer solutions), three medium schemes (256 to 512 solutions), and three complex schemes (1024 to 2048 solutions). (The preference for simple schemes was to compare with prior work.) This measures from SDL input to a C++ (or alternative) output. Speed is crucial for usage, as we anticipate that designers may iteratively use this tool like a compiler, and implementors may want to try out many different efficiency optimizations.

In contrast, in CRYPTO 2014, Abe, Groth, Ohkubo, and Tango [AGOT14] laid out an elegant theoretical framework for doing pairing translations in four steps. They left open the issue of whether their framework was practical to implement for several reasons: (1) they automated only one of four steps (code not released), (2) their algorithm for this step was exponential time, and (3) they tested it on only simple and medium schemes, but their medium scheme took over 1.75 hours for one step. Our fully automated translation of that scheme took 6.5 seconds, which is much more in line with the "compiler"-like usage we anticipate.

We attribute our drastic efficiency improvement in part to our use of the Z3 SMT Solver. As described in Section 3, we encode the translation of the scheme, its assumption(s), and its reduction as a constraint-satisfaction problem and then use Z3 to quickly find the satisfying set of solutions.

### New Results
We evaluated AutoGroup+ on 9 distinct constructions (plus 4 additional variations of one scheme), with various optimization priorities, for 48 bandwidth-optimizing translations. In Figure 8, we report the sizes compared to the symmetric case, which are significantly smaller. In Figure 9, we report on over 140 timing experiments resulting from the translations. Due both to the asymmetric setting and AutoGroup+’s optimizations, in most cases, the running times were reduced to less than 10% of the symmetric case. In Figure 10, we report on the effect that different levels of complexity have on translation time for a single scheme.

In Section 5, we compare the performance of AutoGroup+ to prior automation works, published manual translations, and translations existing as source code in the Advanced Crypto Software Collection [Con] and Charm library [AGM+13]. We discovered a few things. In fourteen points of comparison with AutoGroup, AutoGroup+ matches those solutions and provides a security validation and new assumptions, adding only a few additional seconds of running time. In three points of comparison with Abe et al. [AGOT14] and subsequent personal communications [AGOT15], our translated results match.

In the five points of overlap with ACSC and Charm, we are able to confirm the security and ciphertext-size optimality of one broadcast encryption and one hierarchical identity-based encryption implementation. We are also able to confirm the security of two signature implementations, although only one is signature-size optimal. These confirmations are new results. Our tool was able to confirm the ciphertext-size optimality but not the security of the Charm implementation of Dual System Encryption [Wat09] (meaning it may not be secure). That implementation made changes to the keys outside the scope of the translations here or in [AGH13, AGOT14]. However, our tool did find a secure translation with the same ciphertext size.

Overall, our tests show that the tool can produce high-quality solutions in just seconds, demonstrating that pairing translations can be practically and securely performed by computers.

## 1.1 Prior Work
The desirability of translating Type-I to Type-III pairings is well documented. First, this is an exercise that cryptographers are still actively doing by hand. In PKC 2012, Ramanna, Chatterjee, and Sarkar [RCS12] nicely translated the dual system encryption scheme of Waters [Wat09] from the Type-I pairing setting to a number of different Type-III possibilities. Recently, Chen, Lim, Ling, Wang, and Wee [CLL+13, CLL+14] presented an elegant semi-general framework for (re-)constructing various IBE, Inner-Product Encryption, and Key-Policy Functional Encryption schemes in the Type-III setting, assuming the SXDH assumption holds. These works go into deeper creative detail (changing the scheme or adding assumptions) than our automator, and thus mainly get better results, but then, these works appear to have taken significant human resources. In contrast, our work offers a computerized translation as a starting point.

The Advanced Crypto Software Collection (ACSC) [Con], including the Charm library [AGM+13], contains many Type-III implementations of schemes that were published and analyzed in the Type-I format. To the best of our knowledge, there is no formal analysis of these converted schemes, and thus no guarantees that the translations are secure or optimal efficiency-wise for a user’s specific application. (We remark that ACSC/Charm makes no claims that they are secure or optimal.) The public GitHub records for Charm show that it has been downloaded thousands of times; thus, it would be prudent to verify these implementations. (See our results on this in Section 5.)

In ACM CCS 2013, Akinyele, Green, and Hohenberger [AGH13] presented a publicly-available tool called AutoGroup, which offered an automated translation from Type-I to Type-III pairing schemes. This work employed sophisticated tools, such as the Z3 Satisfiability Modulo Theories (SMT) solver produced by Microsoft Research (see Section 2), to quickly find a set of possible assignments of elements into G1 or G2. There was not, however, any guarantee that the resulting translation remained secure. Indeed, Akinyele et al. [AGH13] explicitly framed their results as follows: translation has two parts: (1) the search for an efficient translation, and (2) a security analysis of it. They automated the first part and left the security analysis to a human cryptographer. Since they made their source code public, we used it as a starting point and thus named our work after theirs.

While using AutoGroup is certainly faster than a completely manual approach, the lack of a security guarantee is a real drawback. At that time, there was simply no established theory on how to generalize these translations.

Fortunately, in CRYPTO 2014, Abe, Groth, Ohkubo, and Tango [AGOT14] pushed the theory forward in this area. They elegantly formalized the notion that if certain dependencies from the Type-I complexity assumption(s) and the reduction in the security analysis were added to the dependencies imposed by the scheme itself, then there was a generic way to reason about the security of the translated scheme. Their main theorem, which we will later use, can informally be stated as:

**Theorem 1.1 (Informal [AGOT14]):** Following the conversion method of [AGOT14], if the Type-I scheme is correct and secure in the generic Type-I group model, then its converted Type-III scheme is correct and secure in the generic Type-III group model.

There are four steps in their translation: (1) build a dependency graph between the group elements for each algorithm in the construction, the complexity assumption(s), and the security reduction (In the graph, elements are nodes and a directed edge goes from g to h if h is derived from g, such as h = gx.), (2) merge all graphs into a single graph, (3) split this graph into two graphs (where elements of the first graph will be assigned to G1 and elements of the second assigned to G2), and (4) derive the converted scheme.

For the four schemes tested in [AGOT14], steps (1), (2), and (4) were done by hand. The algorithm for step (3) was exponential in two variables, and the Java program to handle step (3) reported taking 1.75 hours on a medium scheme. Thus, this is a great theoretical advance, but it left open the question of whether the entire translation could be efficiently automated as a "real-time" tool.

### AutoGroup+ in a Nutshell
In short, prior work admitted a public tool that is fast but possibly insecure [AGH13], and a cryptographic framework that is slow but secure [AGOT14]. Our goal was to realize the best of both worlds. Even though the implementations differed, we discovered that both works began by tracing generator to pairing dependencies, where [AGH13] did this bottom-up and [AGOT14] used a top-down approach. Since both of these representations can be helpful for different optimizations, AutoGroup+ does both. It also traces these dependencies for the complexity assumptions and reductions. The pairings and hash variables in the combined dependency graph are translated into a formula and constraints, and then fed into a SMT solver. The output set is then efficiently searched for an optimal solution using the SMT solver again, then verified as a valid graph split (as formalized in [AGOT14]). Finally, if the split is valid, then a converted scheme and complexity assumption(s) are output.

## 2. Background

### 2.1 Pairings
Let G1, G2, and GT be groups of prime order p. A map e : G1 × G2 → GT is an admissible pairing (also called a bilinear map) if it satisfies the following three properties:
1. **Bilinearity:** For all g ∈ G1, h ∈ G2, and a, b ∈ Zp, it holds that e(ga, hb) = e(gb, ha) = e(g, h)ab.
2. **Non-degeneracy:** If g and h are generators of G1 and G2, respectively, then e(g, h) is a generator of GT.
3. **Efficiency:** There exists an efficient method that, given any g ∈ G1 and h ∈ G2, computes e(g, h).

A pairing generator is an algorithm that, on input a security parameter 1λ, outputs the parameters for a pairing group (p, g, h, G1, G2, GT, e) such that p is a prime in Θ(2λ), G1, G2, and GT are groups of order p where g generates G1, h generates G2, and e : G1 × G2 → GT is an admissible pairing.

The above pairing is called an asymmetric or Type-III pairing. This type of pairing is generally preferred in implementations for its efficiency. We also consider symmetric or Type-I pairings, where there is an efficient isomorphism ψ : G1 → G2 (and vice versa) such that a symmetric map is defined as e : G1 × ψ(G1) → GT. We generally treat G = G1 = G2 for simplicity and write e : G × G → GT. These types of pairings are typically preferred for presenting constructions in the academic literature for two reasons. First, they are simpler from a presentation perspective, requiring fewer subscripts and other notations. More importantly, they are sometimes preferred because the underlying symmetric assumption on which the proof is based may be viewed as simpler or weaker than the corresponding asymmetric assumption.

We include current efficiency numbers for Type-I and Type-III groups in Appendix A, demonstrating the significant advantages of the latter.

### 2.2 The Z3 Satisfiability Modulo Theories (SMT) Solver
Our implementation also relies on the power of the state-of-the-art Z3 SMT solver [DMB08] developed at Microsoft Research. SMT is a generalization of boolean satisfiability (or SAT) solving where the goal is to decide whether solutions exist to a given logical formula. The publicly available Z3 is one such tool that is highly efficient in solving constraint satisfaction problems and used in many different applications.

### 2.3 A Scheme Description Language (SDL) and Toolchain
This work builds on the efforts of prior automation works [AGHP12, AGH13], which include several tools such as a scheme description language (or SDL), an accompanying parser for SDL, a code generator that translates SDL schemes into executable code in either C++ or Python, and a LATEX generator for SDL descriptions. We obtained all these prior tools from the publicly-available AutoTools GitHub repository. Our code and SDL database will be made public in this repository as well. The SDL for the constructions is the same in AutoGroup and AutoGroup+; the difference is that the latter also includes SDL for assumptions and security reductions. Since we used the code of AutoGroup as a starting point, we derived our tool name from it.

## 3. The AutoGroup+ System
As described in Section 1, AutoGroup+ is a new tool built to realize the best of both worlds from a prior tool called AutoGroup [AGH13] (fast, but no security guarantees) and new theoretical insights [AGOT14] (secure, but exponential time and no public tool).

### 3.1 How It Works
We begin with an illustration of the AutoGroup+ system in Figure 1. This system takes in the description of a symmetric (Type-I) pairing-based scheme S, together with metadata about its security and user-desired efficiency constraints, and outputs an asymmetric (Type-III) pairing-based translation S', together with metadata about its security. Informally, if S was secure, then S' will be both secure and optimal for the constraints set by the user over the space of "basic" translations.