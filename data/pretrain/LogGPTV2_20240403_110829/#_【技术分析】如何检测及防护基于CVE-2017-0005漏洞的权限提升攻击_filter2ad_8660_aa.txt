# 【技术分析】如何检测及防护基于CVE-2017-0005漏洞的权限提升攻击
|
##### 译文声明
本文是翻译文章，文章来源：blogs.technet.microsoft.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**一、前言**
2017年3月14日，微软公布了安全公告[MS17-013](https://technet.microsoft.com/en-us/library/security/ms17-013.aspx)，修复了CVE-2017-0005漏洞。CVE-2017-0005漏洞位于Windows
Win32k组件中，攻击者利用该漏洞可能实现权限提升。根据合作伙伴的可信报告，我们发现了该漏洞的零日（zero-day）利用方法。漏洞利用的目标系统为老版本的Windows系统，攻击者可借此在目标系统上提升进程权限。
在本文中，我们详细分析了漏洞利用方法的技术细节，评估了Windows
10周年更新版（于2016年8月份发布）对漏洞的防御效果，同时也评估了一些缓解措施的效果，比如SMEP（Supervisor Mode Execution
Prevention，管理模式执行保护）以及VBS（virtualization-based
security，基于虚拟化的安全）。此外，我们也展示了Windows在创造者更新（Creators Update）中带来的[Windows
Defender ATP](https://www.microsoft.com/en-us/WindowsForBusiness/windows-atp)（Windows Defender Advanced Threat
Protection）的[增强功能](https://blogs.microsoft.com/microsoftsecure/2017/03/13/whats-new-in-the-windows-defender-atp-creators-update-preview/)，Windows Defender
ATP可以检测攻击者实施的权限提升（elevation-of-privilege，EoP）攻击行为，自然也能检测与该漏洞有关的权限提升攻击行为。
**二、权限提升攻击细节**
经过对漏洞利用代码的审计分析后，我们发现此次EoP攻击的目标为运行Windows 7以及Windows
8的主机。攻击者精心构造了利用工具，避免其运行在较新的平台上。
漏洞利用工具的执行过程中的各个阶段以及对应的函数如图1所示。
**2.1 阶段1 &2：解密器以及API解析器**
为了保护主功能代码，攻击者使用AES-256算法对初始阶段的PE文件进行加密。为了加载下一阶段的代码，程序需要将某个密码作为参数传递给主入口函数。代码中使用了[CryptHashData](https://msdn.microsoft.com/en-us/library/windows/desktop/aa380202\(v=vs.85\).aspx)这个API，将传入的密码作为密钥来解密下一阶段的载荷。
第2阶段充当了一个中间阶段的角色，这个阶段用来解析API函数。这一阶段所做的API解析工作与shellcode或者位置无关（position-independent）代码的运行过程类似。
[GetProcAddress](https://msdn.microsoft.com/en-us/library/windows/desktop/ms683212\(v=vs.85\).aspx)
API解析过程的部分代码如下所示。这部分代码似乎会混淆后续的载荷，阻止对其的安全分析。
**2.3 阶段3：避免在新平台上运行**
在阶段3中，利用工具会执行一些环境检查过程，特别是会检查操作系统平台以及具体的版本信息。攻击者借此确保漏洞利用代码运行在存在漏洞的系统上（具体说来，这些系统为Windows
7以及Windows 8），它们较少启用对应的漏洞防护功能。
从代码中我们可知，工具专门针对特定版本的Windows系统研发，具体版本为：
主版本号（Major release version）为5；
主版本号为6，次版本号（minor version）为0、1或者2。
这些版本对应的是Windows 2000以及Windows 8之间的[Windows操作系统](https://msdn.microsoft.com/en-us/library/windows/desktop/ms724832\(v=vs.85\).aspx)，其中不包含Windows 8.1以及Windows
10。此外，仔细研究其中的系统架构检查代码后，我们发现漏洞利用代码针对的是64位操作系统。
下一阶段的载荷通过DLL反射技术完成加载。
**2.4 阶段4：漏洞利用程序**
环境检查通过后，攻击代码开始真正利用CVE-2017-0005这个Windows内核漏洞，最终造成内存崩溃，实现代码权限提升目的。
通过破坏PALETTE.pfnGetNearestFromPalentry中的一个指针，程序可以实现内存空间中的代码执行。微软安全研究员一直在密切跟踪这种利用技术，这种技术可以通过精心构造的PALETTE对象实现在内核中执行代码。此前我们在Duqu安全事件的一个样本中观察到这种漏洞利用技术，并于Virus
Bulletin
2015的[演讲](https://www.virusbulletin.com/uploads/pdf/conference_slides/2015/OhFlorio-VB2015.pdf)中介绍过这种技术。
如下代码片段中，我们可以看到PALETTE函数指针处于损坏状态：