通常我们会把 backlog 存放在共享的 Excel 文档里面（是为了多个 用户可以同时编辑它）。虽然正规意义上这个文档应该归产品负责 人所有，但是我们并不想把其他用户排斥在外。开发人员常常要打 开这个文档，弄清一些事情，或者修改估算值。
基于同样原因，我们没有把这个文档放到版本控制仓库上，而是放 到共享的驱动器里面。我们发现，要想保证多用户同时编辑而不会 导致锁操作或是合并冲突，这是最简单的方式。
但是基本上其它所有的制品都放在了版本控制仓库中。但是基本上其它所有的制品都放在了版本控制仓库中。
额外的故事字段
有时为了便于产品负责人判断优先级别，我们也会在产品 backlog 中使用一些其它字段。
	Track（类别）——当前故事的大致分类，例如“后台系统”	或“优化”。这样产品负责人就可以很容易选出所有的“优 	化”条目，把它们的级别都设得比较低。类似的操作执行 	起来都很方便。
Components（组件）——通常在 Excel 文档中用“复选框”
实现，例如“数据库，服务器，客户端”。团队或者产品 负责人可以在这里进行标识，以明确哪些技术组件在这个 故事的实现中会被包含进来。这种做法在多个 Scrum 团队 协作的时候很有用——比如一个后台系统团队和一个客户 端团队——他们很容易知道自己应当对哪些故事负责。
	Requestor（请求者）——产品负责人可能需要记录是哪个 	客户或相关干系人最先提出了这项需求，在后续开发过程 	中向他提供反馈。 Bug tracking ID（Bug 跟踪 ID）——如果你有个 bug 跟踪 系统，就像我们用的 Jira 一样，那么了解一下故事与 bug
之间的直接联系就会对你很有帮助。
我们怎样编写产品 BACKLOG | 7 
我们如何让产品 backlog 停留在业务层次上 如果产品负责人有技术相关的背景，那他就可能添加这样一个故 事：“给 Events 表添加索引”。他为啥要这么做？真正的潜在目 标也许是“要提高在后台系统中搜索事件表单的响应速度”。
到后面我们可能会发现：索引并不是带来表单速度变慢的瓶颈。也 许原因与索引完全不相干。指出如何解决问题的应该是开发团队，产品负责人只需要关注业务目标。
只要发现这种面向技术的故事，我一般都会问产品负责人“但是 为什么呢”这样的问题，一直问下去，直到我们发现内在的目标为 止。然后再用真正的目标来改写这个故事（“提高在后台系统中搜 索并生成表单的响应速度”）。最开始的技术描述只会作为一个注 解存在（“为事件表添加索引可能会解决这个问题”）。3 
我们怎样准备 sprint 计划
Sprint 计划的这一天很快就要到来了。有个教训我们一再体会：
在 sprint 计划会议之前，要确保产品 backlog 的井然有序。
但这到底是什么意思？所有的故事都必须定义得完美无缺？所有 的估算都必须正确无误？所有的先后次序都必须固定不变？不，不，绝不是这样！它表示的意思是：
 产品 backlog 必须存在（你能想象到这一点么？）。
只能有一个产品 backlog 和一个产品负责人（对于一个产品
而言）。
	所有重要的 backlog 条目都已经根据重要性被评过分，不同 	的重要程度对应不同的分数。
o 其实，重要程度比较低的 backlog 条目，评分相同 也没关系，因为它们在这次 sprint 计划会议上可能
根本不会被提出来。
o 无论任何故事，只要产品负责人相信它会在下一个 sprint 实现，那它就应该被划分到一个特有的重要性层次。
o 分数只是用来根据重要性对 backlog 条目排序。假 如 A 的分数是 20，而 B 的分数是 100，那仅仅是 说明 B 比 A 重要而已，绝不意味着 B 比 A 重要五 倍。如果 B 的分数是 21 而不是 100，含义也是一
样的！
我们怎样准备 SPRINT 计划| 9 
o 最好在分数之间留出适当间隔，以防后面出现一个 C，比 A 重要而不如 B 重要。当然我们也可以给 C 打一个 20.5 分，但这样看上去就很难看了，所以我
们还是留出间隔来！
	产品负责人应当理解每个故事的含义（通常故事都是由他 	来编写的，但是有的时候其他人也会添加一些请求，产品 	负责人对它们划分先后次序）。他不需要知道每个故事具 	体是如何实现的，但是他要知道为什么这个故事会在这里。
注意：产品负责人之外的人也可以向产品 backlog 中添加故事，但 是他们不能说这个故事有多重要，这是产品负责人独有的权利。他 们也不能添加时间估算，这是开发团队独有的权利。我们还曾经尝试过、或者评估过其它方式：
 使用 Jira（我们的 bug 跟踪系统）存放产品 backlog。但是 大多数产品负责人都觉得这东西操作起来太繁琐了。Excel
操作起来简单方便，直截了当。你可以使用不同的颜色、重新组织条目、在特定情况下添加列、添加注解和导入导 出数据等等。
	使用 VersionOne、ScrumWorks、XPlanner 这种敏捷过程工 	具。我们还没有测试过它们，不过以后可能会吧。
4 
我们怎样制定 sprint 计划
Sprint 计划会议非常关键，应该算是 Scrum 中最重要的活动（这当 然是我的主观意见）。要是它执行的不好，整个 sprint 甚至都会被 毁掉。
举办 Sprint 计划会议，是为了让团队获得足够的信息，能够在几个 星期内不受干扰地工作，也是为了让产品负责人能对此有充分的信
心。心。
OK，这么说可能比较模糊。其实，Sprint 计划会议会产生一些实实 在在的成果：
 sprint 目标。
团队成员名单（以及他们的投入程度，如果不是 100%的
话）。
 sprint backlog（即 sprint 中包括的故事列表）。确定好 sprint 演示日期。
确定好时间地点，供举行每日 scrum 会议。
为什么产品负责人必须参加
有时候产品负责人会不太情愿跟团队一起花上几个小时制定 sprint 计划。“嘿，小伙子们，我想要的东西已经列下来了，我没时间参
加你们的计划会议。”这可是个非常严重的问题。
我们怎样制定 SPRINT 计划| 11 
为什么整个团队和产品负责人都必须要参加 sprint 计划会议？原因 在于，每个故事都含有三个变量，它们两两之间都对彼此有着强烈 依赖。范围（scope）和重要性（importance）由产品负责人设置。估算（estimate）由团队设置。在 sprint 计划会议上，经过团队和产品负 责人面对面的对话，这三个变量会逐步得到调整优化。
会议启动以后，产品负责人一般会先概括一下希望在这个 sprint 中 达成的目标，还有他认为最重要的故事。接下来，团队从最重要的 故事开始逐一讨论每个故事，一一估算时间。在这个过程中，他们 会针对范围提出些重要问题：“‘删除用户’这个故事，需不需要 遍历这个用户所有尚未执行的事务，把它们统统取消？”有时答复 会让他们感到惊讶，促使他们调整估算。
在某些情况下，团队对故事做出的时间估算，跟产品负责人的想法 不太一样。这可能会让他调整故事的重要性；或者修改故事的范围，导致团队重新估算，然后一连串诸如此类的后续反应。
这种直接的协作形式是 Scrum 的基础，也是所有敏捷软件开发的基 础。这种直接的协作形式是 Scrum 的基础，也是所有敏捷软件开发的基 础。
如果产品负责人还是坚持没时间参加怎么办？一般我会按顺序尝 试下面的策略：
	试着让产品负责人理解，为什么他的直接参与事关项目成 	败，希望他可以改变念头。
12 | 硝烟中的 SCRUM 和 XP
	试着在团队中找到某个人，让他在会议中充当产品负责人 	的代表。告诉产品负责人，“既然你没法来开会，我们这 	次会让 Jeff 代表你参加。他会替你在会议中行使权利，改 	变故事的优先级和范围。我建议，你最好在会议开始前尽 	可能跟他沟通到位。如果你不喜欢 Jeff 当代表，也可以推 	荐其他人，只要他能全程参加我们的会议就行。”
	试着说服管理团队为我们分配新的产品负责人。	推迟 sprint 的启动日期，直到产品负责人找到时间参会为 	止。同时拒绝承诺任何交付。让团队每天都可以自由做他 	们最想做的事情。为什么不能在质量上让步
在上面的三角形中，我有意忽略了第四个变量——质量。
我尽力把内部质量和外部质量分开。
• 外部质量是系统用户可以感知的。运行缓慢、让人迷糊的 	用户界面就属于外部质量低劣。
• 内部质量一般指用户看不到的要素，它们对系统的可维护 性有深远影响。可维护性包括系统设计的一致性、测试覆 盖率、代码可读性和重构等等。
一般来说，系统内部质量优秀，外部质量仍有可能很差。而内部质 量差的系统，外部质量肯定也不怎么样。松散的沙滩上怎么可能建 起精美的楼阁？
我把外部质量也看作范围的一部分。有时出于业务考虑，可能会先 发布一个系统版本，其中用户界面给人的感觉可能比较简陋，而且 反应也很慢；不过随后会发布一个干净的版本。我都是让产品负责 人做权衡，因为他是负责定义项目范围的人。
不过内部质量就没什么好说的了。不管什么时候，团队都要保证系 统质量，这一点毋庸置疑，也没有折扣可讲。现在如此、将来如此、一直如此，直到永远。我们怎样制定 SPRINT 计划| 13 
（嗯，好吧，差不多直到永远）
那么我们怎样区分哪些问题属于内部质量，哪些属于外部质量呢？假设产品负责人这样说，“好吧，你们把它估算成 6 个故事点也行。但我相信：一定能够找到些临时方案，节省一半时间。你们只要稍 稍动下脑子就行。”
啊哈！他想把内部质量当作变量来处理。我是怎么知道的？因为他 想让我们缩减故事的估算时间，但不想为缩减范围“买单”。“临 时方案”这个词应当在你脑中敲响警钟……
为什么不允许这样干？
经验告诉我：牺牲内部质量是一个糟糕透顶的想法。现在节省下来 一点时间，接下来的日子里你就要一直为它付出代价。一旦我们放 松要求，允许代码库中暗藏问题，后面就很难恢复质量了。
碰到这种状况，我就会试着把话题转回到范围上来。“既然你想尽 早得到这个特性，那我们能不能把范围缩小一点？这样实现时间就 能缩短。也许我们可以简化错误处理的功能，把“高级错误处理”当作一个单独的故事，放到以后再实现。或者也可以降低其他故事 的优先级，好让我们集中处理这一个。”一旦产品负责人弄清楚内部质量是不可能让步的，他一般都会处理 好其他变量。
无休止的 sprint 计划会议……在 sprint 计划会议中最困难的事情是：
1）人们认为他们花不了多长时间 
2）……但他们会的！
Scrum 中的一切事情都有时间盒。我喜欢这条简单如一的规则，并 一直力求贯彻到底。
14 | 硝烟中的 SCRUM 和 XP
假如 sprint 计划会议接近尾声，但仍然没有得出 sprint 目标或者 sprint backlog，这时该怎么办？我们要打断它么？还是再延期一个
小时？或者到时间就结束会议，然后明天继续？
这种事情会一再发生，尤其是在新团队身上。你会怎么做？我不知
道。但我们的做法是什么？嗯……我通常会直接打断会议，中止它，道。但我们的做法是什么？嗯……我通常会直接打断会议，中止它，
让这个 sprint 给大家点儿罪受吧。具体一点，我会告诉团队和产品 负责人：“这个会议要在 10 分钟以后结束。我们到目前为止还没 有一个真正的 sprint 计划。是按照已经得出的结论去执行，还是明 早 8 点再开个 4 小时的会？”你可以猜一下他们会怎么回答……:o) 
我也试过让会议延续下去。但一般都没啥效果，因为大家都很累了。
如果他们在 2 到 8 个小时（不管多久，只要你固定好时间长度就可 以）内都没整理出一个还说得过去的 sprint 计划，再来一个小时他
们仍然得不出结论。我们也可以明天再安排一次会议——但大家都
已经耐心耗尽，只想启动这个 sprint，不想再花一个小时做计划。
如果可以罔顾这个事实，那这个选择也确实不错。
所以我会打断会议。是的，这个 sprint 让大家不太好过。但我们应 该看到它的正面影响，整个团队都从中获益匪浅，下个 sprint 计划会议会更有效率。另外，如果他们从前还觉得你定下的会议时间过
长的话，下次他们的抵制情绪就会少一些了。
学会按照时间盒安排工作，学会制定合乎情理的时间盒，这对会议
长度和 sprint 长度同样有帮助。
Sprint 计划会议日程
在 sprint 计划会议之前先为它初步制定一个时间表，可以减少打破