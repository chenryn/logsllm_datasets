1.用户访问iom.int域名所在的网站，会首先自动查找域名的A记录。
2.根据“.int”顶级域名的解析服务器(NS记录)的查询结果，查询进程会随机选择其中的一个解析服务器，选中我们染毒解析服务器的概率是50%。
3.如果用户的查询进程没有选中我们的染毒解析服务器，选择了一个合法的，那么解析器会将这个结果缓存下来，并将TTL时间定义为21745秒(大约6小时)。这是在写这篇文章的时候记录下的实际TTL值。
4.稍后，6个小时以后，用户再次访问网站时，解析器会再次遍历DNS树，如果这一次得到的结果是我们的恶意解析服务器，那么好了，成功了，解析服务器在我们手里，我们可以随便设置域名所对应的A记录(IP地址)。通过我们的恶意解析服务器，我们可以把回应的TTL值设置成604800秒(一周),也可以设置的更长，就看你的需要了。然后解析器在缓存中会保存这个记录，直到TTL时间结束。
5.现在，在接下来的一周中，所有访问这个域名的用户，解析器的客户端都会使用这个伪造的记录。
当你意识到有很多人或服务正在使用大型解析器时，如google的公共解析器(8.8.8.8、8.8.8.4)或Dyn的(216.146.35.35、216.146.36.36),你就可以想像到事件的严重性了。我们认为，概率问题只是一个小问题，只是一个时间问题，因为时间越长，解析的次数越多时，总会有一次解析选中我们的染毒解析服务器，然后，所有的解析客户端(潜在的数以百万计的)在相当长的一段时间中(TTL)，都会返回染毒的结果。更有甚者，对于大型解析器，我们可以很容易做一个测试，当我们知道已经使缓存中毒时，我们可以迅速采取行动。
**DNS的力量**
到这里，我们已经可以对目标进行DNS污染了，但是它给了我们什么能力呢？我们能用新获得的特权做什么呢？
1.为iom.int发行任意SSL/TLS证书：很多证书颁发机构在域名验证时允许使用DNS、HTTP、或电子邮件,基于这个事实，我们可以很容易的在我们控制的解析服务器上设置DNS记录，以证明我们拥有目标域名。即使CA选择了目标域名的实际解析服务器，只要等到缓存过期，我们只需要再次发起请求，直到它向我们的恶意解析服务器发起查询请求。这假定证书颁发机构的证书颁发系统确实执行了缓存数据–如果它没有，我们只需要立即再次尝试，直到我们的恶意服务器被选择。
2.目标邮件拦截：因为我们可以设置目标域名(通过我们控制的恶意解析服务器来解析)的MS记录，通过设置我们的恶意解析服务器，来监视从特定目标发来的DNS查询请求，如Gmail、Yahoo
Mail，或IANA的邮件服务器，并选择性的导引邮件路由路径。这种方法非常隐秘，因为除了我们关心的目标之外，我们可以给任何查询请求返回一个合法的应答。
3.接管“.int”域名本身：就“.int”顶级域名而言，如果我们想在登记处更改该域名的拥有者或解析服务器，该域名的行政联系人和技术联系人都必须认可这种变化(假设更改策略和IANA的根解析服务器的策略是相同的)，修改才会生效，具体信息可以从IANA的网站上看到。通过查询WHOIS信息，我发现，行政联系人和技术联系人的两个电子邮件地址也在iom.int上(这是字面翻译，但是联系前后文，这里的实际意思应该是电子邮件地址的解析服务器和iom.int的解析服务器是一样的)。所以我们有拦截这两个邮件的能力。现在我们只需要等待，直到从IANA的IP段发来一个DNS
MX查询请求时，对MX记录结果选择性的投毒，将电子邮件引导到我们的服务器上，这将允许我们以管理者的身份发送或接收电子邮件。为了测试能否实现污染IANA的邮件服务器，我们可以使用iom.int(因为该域名也是“.int”域名)来伪造邮件，并检查这个邮件是否被重定向到我们的恶意邮件服务器上。如果我们没有收到它，我们只需要等待合法的邮件服务器的TTL缓存时间结束，然后我们再一次尝试。
4.偷取用户凭证：因为我们可以更改域名系统，为了偷取用户的各种凭证或其它数据，我们可以重写A记录，将流量重定向到我们的钓鱼服务器上。
5.利用SRV欺骗的中间人设备：因为我们可以控制SRV记录，我们可以改变这个记录，强制嵌入设备连接到我们的服务器。包括那些在路由时会使用DNS的所有设备(假设协议中没有其他验证方法)。
6.和更多其它的
很明显，这是一个已经存在的漏洞，但是这种漏洞在现实中会很多吗？对于一个随机的“.int”网站可能存在这个漏洞，但是其它任何实际的重要网站会存在这个问题吗？
**不是一个孤立的事件**
下面是一个网站的截图，这个网站存在的漏洞和iom.int的一样。这一次是由一个错字符引发了解析服务器的解析：
存在漏洞的域名是sen.gov，美国参议院内部的一个网址缩短服务。这个域名的权威解析服务器有一个不存在的域名–“ns1-201-akam.net”。这可能是一个拼写错误的ns1-201.akam.net域名，ns1-201.akam.net域名是一个子域名，属于Akamai，这种轻微的错误造成了大量的安全问题，而这往往是你最不想看到的。这对于攻击者来讲，有可能是一个金矿，攻击者为了对目标进行钓鱼攻击或其它攻击，可以通过基于DNS的恶意重定向实现目的。由于这个漏洞的高危性和可利用性，我自己购买了这个域名，并封锁了这个域名上的所有DNS流量(这样做的结果是：在这个解析服务器上的所有查询都会失败，查询会自动跳转到其它正常工作中的解析服务器上，研究者的目的是保护这个域名，防止被坏人利用，所有就索性自己先把这个漏洞域名管理上。实际上，是为了保护这个网络不受攻击)。这个做法基本上暂时“堵住”了这个漏洞(暂时是安全的)，直到这个网站的管理员修复它。在此之后，我联系了“.gov”的注册机构，他们将我的担忧转发给了这个网站的管理员，这个管理员很快修复了该漏洞，他们的响应速度令人印象深刻。然而，这表明，这种类型的漏洞可以发生在任何人身上。除了这里列出的这两个例子，还有许多存在的，但并没有被列出来的例子，证明这不是一个孤立的问题。
**Judas DNS–一个接管解析服务器的利用工具**
为了使利用这种独特漏洞的过程更容易，我已经创建了一个利用恶意权威解析服务器的POC代码，当你已经接管了一个目标解析服务器时，你可以使用它。Judas服务会将所有的DNS请求代理到配置的权威解析服务器上，Judas的配置文件很神奇，它根据源IP、或DNS查询的类型，允许你配置DNS的响应数据。这允许一个攻击者配置一个恶意解析服务器，能做很多事件，比如选择性地重新路由来自指定源IP范围的入站电子邮件(通过修改MX记录)，设置TTL时间等。
[Judas DNS Github](https://github.com/mandatoryprogrammer/JudasDNS)
**最后的想法**
这个漏洞包含所有危险漏洞的特征。不仅是因为它很容易通过一个拼写错误或一个解析服务器的过期域名，导致该漏洞，而且由于DNS客户端故障转移的特点，导致并不能一眼就识别出这个漏洞。这意味着，它不仅可以发生在任何人身上，而且可能在很长一段时间内都察觉不到。
关于如何修补这个问题，非常有趣，因为在TLD(顶级域名)这一级上，就有可能会减轻这个问题。实际上，TLD的操作者仅仅对DNS的健康状况做一些检查，就可以确定所有域名的解析服务器是否处在工作中(仅需要检查一下域名，看一看是否能返回一个IP，或查看是否返回NXDOMAIN)，就可能完全阻止这种劫持攻击。然而，我怀疑这个工作对TLDs来讲可能是一个非常繁重的工作，并且很有可能出现错误。毕竟，如果TLD自动移除那些可能存在域名漏洞的解析服务器，弄不好就会出现断网事件，肯定会掉入赔偿的地狱。因此，如何大规模修补这个漏洞仍然是一个有趣的问题。
**参考链接**
什么是解析服务器：
A记录与NS记录——DNS资源类型：
权威解析服务器：
如何查看域名的NS记录：
域名NS记录是什么：
DNS原理及解析过程：
DNS基本操作详解：