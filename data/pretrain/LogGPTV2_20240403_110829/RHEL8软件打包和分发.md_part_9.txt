    您应当输入密码来解锁签名的 secret 密钥。
    :::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#signing-a-package-at-build-time_signing-packages}在构建时签署软件包 {.title}
:::
::: orderedlist
**流程**
1.  使用 `rpmbuild`{.literal} 命令构建软件包：
    ``` literallayout
    $ rpmbuild blather-7.9.spec
    ```
2.  使用 `--addsign`{.literal} 选项使用 `rpmsign`{.literal}
    命令为软件包签名：
    ``` literallayout
    $ rpmsign --addsign blather-7.9-1.x86_64.rpm
    ```
3.  另外，还可验证软件包的签名：
:::
``` literallayout
$ rpm --checksig blather-7.9-1.x86_64.rpm
blather-7.9-1.x86_64.rpm: size pgp md5 OK
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在构建和签名多个软件包时，请使用以下语法以避免多次输入 Pretty Good
Privacy(PGP)密码短语。
``` literallayout
$ rpmbuild -ba --sign b*.spec
```
请注意，您应该输入密码来解锁签名的 secret 密钥。
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#more-on-macros_advanced-topics}有关宏的更多信息 {.title}
:::
本节介绍选定的内置 RPM Macros。有关此类宏的详细列表，请参阅 [RPM
文档](http://rpm.org/user_doc/macros.html){.link}。
::: section
::: titlepage
## []{#advanced-topics.html#defining-your-own-macros_more-on-macros}定义您自己的宏 {.title}
:::
下面的部分论述了如何创建自定义宏。
::: itemizedlist
**流程**
-   在 RPM SPEC 文件中包括以下行：
    ``` literallayout
    %global [(opts)] 
    ```
:::
已删除 ``{.literal}
周围的所有空格。名称可以由字母数字字符组成，字符 `_`{.literal}
并且长度至少为 3 个字符。包含 `(opts)`{.literal} 字段是可选的：
::: itemizedlist
-   `Simple`{.literal} 宏不包含 `(opts)`{.literal}
    字段。在这种情况下，仅执行递归宏扩展。
-   `Parametrized`{.literal} 宏包含 `(opts)`{.literal} 字段。括号之间的
    `opts`{.literal} 字符串传递给
    `getopt(3)`{.literal}，以便在宏调用开始时进行 `argc/argv`{.literal}
    处理。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
较旧的 RPM SPEC 文件改为使用 `%define  `{.literal}
宏模式。`%define`{.literal} 和 `%global`{.literal} 宏之间的区别如下：
::: itemizedlist
-   `%define`{.literal} 具有本地范围.它适用于 SPEC 文件的特定部分。使用
    `%define`{.literal} 宏的正文会被扩展。
-   `%global`{.literal} 具有全局范围.它适用于整个 SPEC
    文件。`%global`{.literal} 宏的正文在定义时扩展。
:::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
即使宏被注释掉，宏也会被评估，或者在 SPEC 文件的 `%changelog`{.literal}
部分给出了宏的名称。要注释掉宏，请使用 `%%`{.literal}。例如：
`%%global`{.literal}。
:::
::: title
**其它资源**
:::
有关宏功能的综合信息，请参阅 [RPM
文档](http://rpm.org/user_doc/macros.html){.link}。
:::
::: section
::: titlepage
## []{#advanced-topics.html#using-the-setup-macro_more-on-macros}使用 %setup 宏 {.title}
:::
这部分论述了如何使用 `%setup`{.literal} 宏的不同变体使用源代码 tarballs
构建软件包。请注意，宏变体可以被合并 `rpmbuild`{.literal} 输出演示了
`%setup`{.literal} 宏的标准行为。在各个阶段开始时，宏输出
`Executing(%…​)`{.literal}，如下例所示。
::: example
[]{#advanced-topics.html#idm139867753155936}
**例 4.1. `%setup`{.literal} 宏输出示例**
::: example-contents
``` literallayout
Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.DhddsG
```
在启用了 `set -x`{.literal} 时设置了 shell 输出。要查看
`/var/tmp/rpm-tmp.DhddsG`{.literal} 的内容，请使用 `--debug`{.literal}
选项，因为 `rpmbuild`{.literal}
在构建成功后删除临时文件。这会显示环境变量的设置，例如：
``` literallayout
cd '/builddir/build/BUILD'
rm -rf 'cello-1.0'
/usr/bin/gzip -dc '/builddir/build/SOURCES/cello-1.0.tar.gz' | /usr/bin/tar -xof -
STATUS=$?
if [ $STATUS -ne 0 ]; then
  exit $STATUS
fi
cd 'cello-1.0'
/usr/bin/chmod -Rf a+rX,u+w,g-w,o-w .
```
:::
:::
`%setup`{.literal} 宏：
::: itemizedlist
-   确保我们在正确的目录中操作。
-   移除以前构建的驻留。
-   解包源 tarball。
-   设置一些默认权限。
:::
::: section
::: titlepage
### []{#advanced-topics.html#using-the-setup-q-option}使用 %setup -q 宏 {.title}
:::
`-q`{.literal} 选项限制 `%setup`{.literal} 宏的详细程度。只有
`tar -xof`{.literal} 而不是 `tar -xvvof`{.literal}
执行。使用这个选项作为第一个选项。
:::
::: section
::: titlepage
### []{#advanced-topics.html#using-the-setup-n-option}使用 %setup -n 宏 {.title}
:::
`-n`{.literal} 选项用于指定扩展 tarball 中的目录名称。
当来自扩展的 tarball
的目录的名称与预期的(`%{name}-%{version}`{.literal})不同，这时会使用它，这可能会导致
`%setup`{.literal} 宏错误。
例如：如果软件包名称是 `cello`{.literal}，但源代码归档在
`hello-1.0.tgz`{.literal} 中并包含 `hello/`{.literal} 目录，则 SPEC
文件内容需要如下：
``` literallayout
Name: cello
Source0: https://example.com/%{name}/release/hello-%{version}.tar.gz
…
%prep
%setup -n hello
```
:::
::: section
::: titlepage
### []{#advanced-topics.html#using-the-setup-c-option}使用 %setup -c 宏 {.title}
:::
如果源代码 tarball 不包含任何子目录，且解包后，则使用 `-c`{.literal}
选项，归档中的文件会填充当前目录。
然后 `-c`{.literal} 选项会在归档扩展中创建目录和步骤，如下所示：
``` literallayout
/usr/bin/mkdir -p cello-1.0
cd 'cello-1.0'
```
存档扩展后 目录不会更改。
:::
::: section
::: titlepage
### []{#advanced-topics.html#using-the-setup-dt-option}使用 %setup -D 和 %setup -T 宏 {.title}
:::
`-D`{.literal} 选项禁用删除源代码目录，如果多次使用 `%setup`{.literal}
宏，该选项特别有用。使用 `-D`{.literal} 选项，不使用以下行：
``` literallayout
rm -rf 'cello-1.0'
```
`-T`{.literal} 选项通过从脚本中删除以下行来禁用源代码 tarball 的扩展：
``` literallayout
/usr/bin/gzip -dc '/builddir/build/SOURCES/cello-1.0.tar.gz' | /usr/bin/tar -xvvof -
```
:::
::: section
::: titlepage
### []{#advanced-topics.html#using-the-setup-ab-option}使用 %setup -a 和 %setup -b 宏 {.title}
:::
`-a`{.literal} 和 `-b`{.literal} 选项扩展特定源：
`-b`{.literal} 选项代表
`before`{.literal}，它会在输入工作目录前扩展特定源。`-a`{.literal}
选项代表 `after`{.literal}，它会在输入后扩展这些源。它们的参数是 SPEC
文件的源号。
在以下示例中，`cello-1.0.tar.gz`{.literal} 归档包含一个空的
`examples`{.literal} 目录。这些示例以单独的 `examples.tar.gz`{.literal}
tarball 提供，并扩展至同一名称的目录中。在这种情况下，使用
`-a 1`{.literal}，如果您要在进入工作目录后扩展 `Source1`{.literal} ：
``` literallayout
Source0: https://example.com/%{name}/release/%{name}-%{version}.tar.gz
Source1: examples.tar.gz
…
%prep
%setup -a 1
```
在以下示例中，示例在单独的 `cello-1.0-examples.tar.gz`{.literal} tarball
中提供，它扩展为 `cello-1.0/examples`{.literal}。在这种情况下，使用
`-b 1`{.literal} 在进入工作目录前扩展 `Source1`{.literal}:
``` literallayout
Source0: https://example.com/%{name}/release/%{name}-%{version}.tar.gz
Source1: %{name}-%{version}-examples.tar.gz
…
%prep
%setup -b 1
```
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#common-rpm-macros-in-the-files-section_more-on-macros}%files 部分中的通用 RPM 宏 {.title}
:::
本节列出了 SPEC 文件的 `%files`{.literal} 部分所需的高级 RPM Macros。
::: table
[]{#advanced-topics.html#idm139867792896304}
**表 4.1. `%files`{.literal} 部分中的高级 RPM Macros**
::: table-contents
  宏                   定义
  -------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  %license             宏标识列为 LICENSE 文件的文件，并通过 RPM 安装和标记该文件。示例： `%license LICENSE`{.literal}
  %doc                 宏标识一个列为文档的文件，它将被 RPM 安装并标记为该文件。宏用于有关打包软件的文档，以及代码示例和随附项目。如果包含代码示例，应小心从文件中删除可执行文件模式。示例： `%doc README`{.literal}
  %dir                 宏可确保路径是此 RPM 拥有的目录。这很重要，使 RPM 文件清单准确知道卸载时要清理的目录。示例： `%dir %{_libdir}/%{name}`{.literal}
  %config(noreplace)   宏确保以下文件为配置文件，因此如果从原始安装校验和修改文件，则不应在软件包安装或更新上覆盖（或替换）。如果有更改，在升级或安装时会在文件名末尾附加 `.rpmnew`{.literal} 来创建该文件，以便不会修改目标系统中预先存在的或修改的文件。示例： `%config(noreplace) %{_sysconfdir}/%{name}/%{name}.conf`{.literal}
:::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#displaying-the-built-in-macros_more-on-macros}显示内置宏 {.title}
:::
Red Hat Enterprise Linux 提供多个内置 RPM 宏。
::: orderedlist
**流程**
1.  要显示所有内置 RPM 宏，请运行：
    ``` literallayout
    rpm --showrc
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    输出非常大。要缩小结果范围，请使用以上命令和 `grep`{.literal} 命令。
    :::
2.  要查找有关您系统版本的 RPM 宏的信息，请运行：
    ``` literallayout
    rpm -ql rpm
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}