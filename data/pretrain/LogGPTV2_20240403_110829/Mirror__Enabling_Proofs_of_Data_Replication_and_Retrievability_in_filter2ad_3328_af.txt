erstore: Proofs of writing for eﬃcient and robust
storage. In Proceedings of the 2013 ACM SIGSAC
Conference on Computer &#38; Communications
Security, CCS ’13, pages 285–298, New York, NY,
USA, 2013. ACM.
[20] Stefan Dziembowski, Sebastian Faust, Vladimir Kol-
mogorov, and Krzysztof Pietrzak. Proofs of space.
In Rosario Gennaro and Matthew Robshaw, editors,
Advances in Cryptology - CRYPTO 2015 - 35th An-
nual Cryptology Conference, Santa Barbara, CA,
USA, August 16-20, 2015, Proceedings, Part II, vol-
ume 9216 of Lecture Notes in Computer Science,
pages 585–605. Springer, 2015.
[21] C. Christopher Erway, Alptekin K¨up¸c¨u, Charalam-
pos Papamanthou, and Roberto Tamassia. Dynamic
provable data possession. In ACM Conference on
Computer and Communications Security, pages 213–
222, 2009.
[22] Mohammad Etemad and Alptekin K¨up¸c¨u. Transpar-
ent, distributed, and replicated dynamic provable
data possession. In Proceedings of the 11th Inter-
national Conference on Applied Cryptography and
Network Security, ACNS’13, pages 1–18, Berlin, Hei-
delberg, 2013. Springer-Verlag.
[26] Ghassan Karame and Srdjan Capkun. Low-cost
client puzzles based on modular exponentiation. In
Computer Security - ESORICS 2010, 15th Euro-
pean Symposium on Research in Computer Security,
Athens, Greece, September 20-22, 2010. Proceedings,
pages 679–697, 2010.
[27] Neal Koblitz. A Course in Number Theory and
Cryptography. Springer-Verlag New York, Inc., New
York, NY, USA, 1987.
[28] ¸Cetin Kaya Ko¸c, Tolga Acar, and Burton S. Kaliski,
Jr. Analyzing and comparing montgomery multipli-
cation algorithms. IEEE Micro, 16(3):26–33, June
1996.
[29] Rudolf Lidl and Harald Niederreiter. Introduction
to Finite Fields and Their Applications. Cambridge
University Press, New York, NY, USA, 1986.
[30] Yadi Ma, Thyaga Nandagopal, Krishna P. N. Put-
taswamy, and Suman Banerjee. An ensemble of
replication and erasure codes for cloud ﬁle systems.
In Proceedings of the IEEE INFOCOM 2013, Turin,
Italy, April 14-19, 2013, pages 1276–1284, 2013.
[31] NetEm.
NetEm,
Founda-
tion. Website, 2009.
Available online at
http://www.linuxfoundation.org/collaborate/
workgroups/networking/netem.
the
Linux
[32] Zachary N. J. Peterson, Mark Gondree, and Robert
Beverly. A position paper on data sovereignty: The
importance of geolocating data in the cloud.
In
Proceedings of the 3rd USENIX Conference on Hot
Topics in Cloud Computing, HotCloud’11, pages 9–9,
Berkeley, CA, USA, 2011. USENIX Association.
[33] R. L. Rivest, A. Shamir, and D. A. Wagner. Time-
lock puzzles and timed-release crypto. Technical
report, Cambridge, MA, USA, 1996.
[34] Hovav Shacham and Brent Waters. Compact Proofs
of Retrievability. In ASIACRYPT, pages 90–107,
2008.
[35] Marten van Dijk, Ari Juels, Alina Oprea, Ronald L.
Rivest, Emil Stefanov, and Nikos Triandopoulos.
Hourglass schemes: how to prove that cloud ﬁles
are encrypted. In Ting Yu, George Danezis, and
Virgil D. Gligor, editors, ACM Conference on Com-
puter and Communications Security, pages 265–280.
ACM, 2012.
[23] Sanjay Ghemawat, Howard Gobioﬀ, and Shun-Tak
Leung. The google ﬁle system. In Proceedings of the
Nineteenth ACM Symposium on Operating Systems
Principles, SOSP ’03, pages 29–43, New York, NY,
USA, 2003. ACM.
[36] Gaven J. Watson, Reihaneh Safavi-Naini, Mohsen
Alimomeni, Michael E. Locasto, and Shivaramakr-
ishnan Narayan. LoSt: location based storage. In
Ting Yu, Srdjan Capkun, and Seny Kamara, editors,
CCSW, pages 59–70. ACM, 2012.
[24] Jim Gray. Distributed computing economics. Queue,
6(3):63–68, May 2008.
[25] Ari Juels and Burton S. Kaliski Jr. PORs: Proofs Of
Retrievability for Large Files. In ACM Conference
on Computer and Communications Security, pages
584–597, 2007.
A MR-PDP
In what follows, we brieﬂy describe the multi-replica
provable data possession scheme by Curtmola et
al. [18]. Here, the user ﬁrst splits the ﬁle D into
1066  25th USENIX Security Symposium 
USENIX Association
16
n blocks d1, . . . ,d n ∈ ZN. Let p = 2p(cid:30) + 1,q = 2q(cid:30) + 1
be safe primes, and N = pq an RSA modulus; more-
over, let g be a generator of the quadratic residues
of Z∗N, and e,d a pair of integers such that e· d = 1
mod p(cid:30)q(cid:30). The user creates authentication tags for
each block i ∈ [1,n] by computing Ti ← (h(v||i)gdi)d
mod N, where h : {0,1}∗ → ZN is a hash function and
v ∈ ZN.
Subsequently, each replica is created by the user
as follows: d(k)
i ← di + PRF(k||i) where PRF denotes
a pseudorandom function. The user sends to the
service provider the tags {Ti}, the original ﬁle blocks
{di}, and the replica blocks d(k)
At the veriﬁcation stage, the user selects a replica
k and creates a (pseudo-)random challenge set I =
{(k1,i1), . . . ,(k (cid:29),i(cid:29))} where k j denotes the replica num-
ber and i j the block index.
In addition, the user
picks s ∈ Z∗N, and computes gs = gs mod N. The
challenge query then comprises the set I and the
value gs which are both sent to the service provider
who stores replica k. The service provider then com-
putes the response (T,σ ) as follows and sends it back
to the veriﬁer:
.
i
T ← ∏
i∈I
Ti, σ ← g
(k j )
i j
∑1≤ j≤(cid:29) d
s
Finally, the user checks whether:
σ ?
=(cid:31) T e
∏h(v||i)
g∑1≤ j≤(cid:29) PRF(k j||i j)(cid:30)s
B POR Schemes of Shacham and
Waters
In what follows, we brieﬂy describe the private POR
scheme by Shacham and Waters [34]. This scheme
leverages a pseudo-random function PRF. Here, the
user ﬁrst applies an erasure code to the ﬁle and
then splits it into n blocks d1, . . . ,d n ∈ Zp, where p
is a large prime. The user then chooses a random
α ∈R Zp and creates for each block an authentication
value as follows:
σi = PRF ˚key(i) +α · di ∈ Zp.
(15)
The blocks {di} and their authentication values {σi}
are all stored at the service provider in D∗.
At the POR veriﬁcation stage, the veriﬁer (here,
the user) chooses a random challenge set I ⊂{1, . . . ,n}
of size (cid:29), and (cid:29) random coeﬃcients νi ∈R Zp. The
challenge query then is the set Q := {(i,νi)}i∈I which
is sent to the prover (here, service provider). The
prover computes the response (σ , µ) as follows and
sends it back to the veriﬁer:
σ ← ∑
(i,νi)∈Q
νiσi, µ ← ∑
(i,νi)∈Q
νidi.
Finally, the veriﬁer checks the correctness of the
response:
σ ?
= αµ + ∑
(i,νi)∈Q
νi · PRF(i).
C Improving User Veriﬁcation in Mir-
ror
In what follows, we describe a number of optimiza-
tions that we adopted in our implementation in order
to reduce the eﬀort in verifying the service provider’s
response.
Using either g or h: Recall that the service
provider’s response involves powers of g and of h
which have order p(cid:30) and q(cid:30), respectively. One tech-
nique that allows to reduce the eﬀort on the user’s
side is to rely on either g or h. That is, at the be-
ginning of the veriﬁcation step, the user randomly
decides whether only g or only h shall be taken into
account. For example, let us assume that the choice
falls on g. Then, the user proceeds as follows:
1. The user computes:
˜σ := σ q(cid:30) ·
(cid:29)
c=1(cid:29) s
∏
∏
j=1
ic, j(cid:28)−(q(cid:30)·νc)
gk
.
∏
k∈R
(16)
Here, we exploit the fact that (he)q(cid:30) = 1 for any
e.
2. The user checks if:
(cid:29) s
∏
j=1
ε j+|R|(cid:28)q(cid:30)
µ j
= ˜σ .
(17)
This approach incurs two additional exponentiations
but completely eliminates the need to compute the
expressions for the values h.
Representing LFSRs by Pre-computed Matri-
ces: According to our experiments, suitable parame-
ter choices are to choose the length λ of the secret
LFSR quite small, e.g., equal to 2, while the block
size s is comparatively large. This motivates the
following optimization.
:= (a(k)
t
, . . . ,a (k)
Let A(k)
t
k ∈ {1, . . . ,r}. That is, A(k)
the k-th LFSR while A(k)
t+λ−1) for any t ≥ 1 and any
1 denotes the initial state of
t denotes the state after t − 1
USENIX Association  
25th USENIX Security Symposium  1067
17
clocks. Recall that we consider r LFSR sequences
which are all generated by the same feedback function.
Namely, it holds for any t ≥ 1 and any k ∈ {1, . . . ,r}
that a(k)
t+i−1. Due to the linearity of
the feedback function, there exists a λ ×λ matrix M,
called the companion matrix, for which it holds that:
i=1 αi · a(k)
t+λ = ∑λ
Mt · A(k)
1 = A(k)
t+1,
π(ic,1) + a(k)
π(ic,1)+1 + . . . + a(k)
∀t ≥ 0.
π(ic,1)+s−1(cid:30)
(18)
Recall that we aim to compute for each i ∈ I the value
k∈R(cid:31)a(k)
∑
(19)
where π : N× N → N is a mapping such that g(k)
i, j =
π(i, j) = ga(k)
g(k)
and to raise g by the resulting value.
The idea is now to combine as many computations
as possible to reduce the overall eﬀort. To this end,
the goal is to sum-up for each k ∈ R and each i ∈ I
the following internal states:
t
A(k)
π(i,1) = (a(k)
π(i,1), . . . ,a (k)
π(i,1)+λ−1)
...
A(k)
π(i,1)+(cid:22)s/λ(cid:21)·λ = (a(k)
π(i,1)+(cid:22)s/λ(cid:21)·λ , . . . ,a (k)
π(i,1)+(cid:22)s/λ(cid:21)·λ−1)
This can be accomplished by computing:
(cid:29)∑
i∈I
Mπ(i,1)(cid:28)·(cid:29)(cid:22)s/λ(cid:21)∑
j=0
M j·λ(cid:28)·(cid:29)∑
k∈R
1 (cid:28) .
A(k)
(20)
Observe that ∑(cid:22)s/λ(cid:21)
j=0 M j·λ is independent of the current
challenge and can be precomputed. Moreover, due
to the fact that we aim for a small LFSR length, e.g.,
λ = 2, the user may consider to precompute the value
in the last bracket for any choice of R, yielding an
additional storage eﬀort of λ · (2r−1) sectors. In such
case, the computation would boil down to the eﬀort
of computing the ﬁrst bracket only. We note that if
λ does not divide s, then the user has to compute in
addition:
(cid:29)∑
i∈I
Mπ(i,1)(cid:28)· M(cid:20)s/λ(cid:19)·λ ·(cid:29)∑
1 (cid:28) ,
A(k)
k∈R
(21)
and to add the sum of the ﬁrst s mod λ entries to
the value computed above. Also here, similar pre-
computations can be done to accelerate this step.
D Valid Relations
We now explain why (cid:28)v = (v1, . . . ,v n·s) ∈ Zn·s such that
n·s
∏
i=1
gvi
i = 1,
(22)
18
represents the only type of equations that allows the
provider to compute missing values g j from known
values gi.
To see why, recall that g j = ga j where (a j) j rep-
resents an LFSR-sequence. More precisely, this se-
quence is deﬁned by the feedback polynomial and the
initial state, i.e., the ﬁrst λ entries. Without knowing
these entries, it is (information-theoretically) impos-
sible to determine a j for larger indices. Also, any
element in (a j) j is a linear combination of the initial
state values. Let us denote this combination by L1.
This can be relaxed as follows: the knowledge of any
λ elements a j1, . . . ,a jλ of the sequence (a j) j allows
almost always to compute another element by an ap-
propriate linear combination (say L2) of a j1, . . . ,a jλ .
Notice that the coeﬃcients of L2 have to be a linear
combination of the coeﬃcients (or shifted versions)
of L1 (this is in inherent property of LFSRs). This
is exactly the deﬁnition of “valid relations” given in
Equation (12).
E Impact of the Block Size on the
Performance of MR-PDP and Mir-
ror
]
s
[
y
c
n
e
t
a
L
 1e+006
 100000
 10000
 1000
 100
 10
 1
 0.1
Store
Replicate
Verify (Server)
Verify (Client)
1
8
32
512
1024 2048
Block size [KB]
(a) Impact of block size on the performance
of MR-PDP [18].
]
s
[
y
c
n
e
a
L
t
 100000
 10000
 1000
 100
 10
 1
 0.1
Store
Replicate
Verify (Server)
Verify (Client)
1
8
32
512
1024 2048
Block size [KB]
(b) Impact of block size on the performance
of Mirror.
Figure 4: Impact of the block size on the performance
of MR-PDP [18] and Mirror.
1068  25th USENIX Security Symposium 
USENIX Association