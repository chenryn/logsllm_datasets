// Obtain a reference to the NSLog function, and use it to print the URL value
// args[2] refers to the first method argument (NSURL *url)
var NSLog = new NativeFunction(Module.findExportByName('Foundation', 'NSLog'), 'void', ['pointer',
'...']);
// We should always initialize an autorelease pool before interacting with Objective-C APIs
var pool = ObjC.classes.NSAutoreleasePool.alloc().init();
try {
// Creates a JS binding given a NativePointer.
var myNSURL = new ObjC.Object(args[2]);
// Create an immutable ObjC string object from a JS string object.
var str_url = NSString.stringWithString_(myNSURL.toString());
// Call the iOS NSLog function to print the URL to the iOS device logs
NSLog(str_url);
// Use Frida's console.log to print the URL to your terminal
console.log(str_url);
} finally {
pool.release();
}
}
});
"""
process = frida.get_usb_device().attach("Safari")
script = process.create_script(frida_code)
script.load()
sys.stdin.read()
Start Safari on the iOS device. Run the above Python script on your connected host and open the device log (as
explained in the section "Monitoring System Logs" from the chapter "iOS Basic Security Testing"). Try opening a new
URL in Safari, e.g. https://github.com/OWASP/owasp-mstg; you should see Frida's output in the logs as well as in
your terminal.
Of course, this example illustrates only one of the things you can do with Frida. To unlock the tool's full potential, you
should learn to use its JavaScript API. The documentation section of the Frida website has a tutorial and examples for
using Frida on iOS.
References
512
Tampering and Reverse Engineering on iOS
Apple's Entitlements Troubleshooting - https://developer.apple.com/library/content/technotes/tn2415/_index.html
Apple's Code Signing - https://developer.apple.com/support/code-signing/
Cycript Manual - http://www.cycript.org/manual/
iOS Instrumentation without Jailbreak - https://www.nccgroup.trust/au/about-us/newsroom-and-
events/blogs/2016/october/ios-instrumentation-without-jailbreak/
Frida iOS Tutorial - https://www.frida.re/docs/ios/
Frida iOS Examples - https://www.frida.re/docs/examples/ios/
Tools
Class-dump - http://stevenygard.com/projects/class-dump/
Class-dump-dyld - https://github.com/limneos/classdump-dyld/
Class-dump-z - https://code.google.com/archive/p/networkpx/wikis/class_dump_z.wiki
Cycript - http://www.cycript.org/
Damn Vulnerable iOS App - http://damnvulnerableiosapp.com/
Frida - https://www.frida.re
Ghidra - https://ghidra-sre.org/
Hopper - https://www.hopperapp.com/
ios-deploy - https://github.com/phonegap/ios-deploy
IPA Installer Console - https://cydia.saurik.com/package/com.autopear.installipa/
ipainstaller - https://cydia.saurik.com/package/com.slugrail.ipainstaller/
MachoOView - https://sourceforge.net/projects/machoview/
Objection - https://github.com/sensepost/objection
Optool - https://github.com/alexzielenski/optool
OWASP UnCrackable Apps for iOS - https://github.com/OWASP/owasp-mstg/tree/master/Crackmes#ios
Radare2 - https://rada.re/r/
Reverse Engineering tools for iOS Apps - http://iphonedevwiki.net/index.php/Reverse_Engineering_Tools
Swizzler project - https://github.com/vtky/Swizzler2/
Xcode command line developer tools - https://railsapps.github.io/xcode-command-line-tools.html
513
iOS Anti-Reversing Defenses
iOS Anti-Reversing Defenses
Jailbreak Detection (MSTG-RESILIENCE-1)
Overview
Jailbreak detection mechanisms are added to reverse engineering defense to make running the app on a jailbroken
device more difficult. This blocks some of the tools and techniques reverse engineers like to use. Like most other
types of defense, jailbreak detection is not very effective by itself, but scattering checks throughout the app's source
code can improve the effectiveness of the overall anti-tampering scheme. A list of typical jailbreak detection
techniques for iOS was published by Trustwave.
File-based Checks
Check for files and directories typically associated with jailbreaks, such as:
/Applications/Cydia.app
/Applications/FakeCarrier.app
/Applications/Icy.app
/Applications/IntelliScreen.app
/Applications/MxTube.app
/Applications/RockApp.app
/Applications/SBSettings.app
/Applications/WinterBoard.app
/Applications/blackra1n.app
/Library/MobileSubstrate/DynamicLibraries/LiveClock.plist
/Library/MobileSubstrate/DynamicLibraries/Veency.plist
/Library/MobileSubstrate/MobileSubstrate.dylib
/System/Library/LaunchDaemons/com.ikey.bbot.plist
/System/Library/LaunchDaemons/com.saurik.Cydia.Startup.plist
/bin/bash
/bin/sh
/etc/apt
/etc/ssh/sshd_config
/private/var/lib/apt
/private/var/lib/cydia
/private/var/mobile/Library/SBSettings/Themes
/private/var/stash
/private/var/tmp/cydia.log
/usr/bin/sshd
/usr/libexec/sftp-server
/usr/libexec/ssh-keysign
/usr/sbin/sshd
/var/cache/apt
/var/lib/apt
/var/lib/cydia
/usr/sbin/frida-server
/usr/bin/cycript
/usr/local/bin/cycript
/usr/lib/libcycript.dylib
Checking File Permissions
Another way to check for jailbreaking mechanisms is to try to write to a location that's outside the application's
sandbox. You can do this by having the application attempt to create a file in, for example, the /private directory . If
the file is created successfully, the device has been jailbroken.
NSError *error;
NSString *stringToBeWritten = @"This is a test.";
514
iOS Anti-Reversing Defenses
[stringToBeWritten writeToFile:@"/private/jailbreak.txt" atomically:YES
encoding:NSUTF8StringEncoding error:&error];
if(error==nil){
//Device is jailbroken
return YES;
} else {
//Device is not jailbroken
[[NSFileManager defaultManager] removeItemAtPath:@"/private/jailbreak.txt" error:nil];
}
Checking Protocol Handlers
You can check protocol handlers by attempting to open a Cydia URL. The Cydia app store, which practically every
jailbreaking tool installs by default, installs the cydia:// protocol handler.
if([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@"cydia://package/com.example.package"]])
{
Calling System APIs
Calling the system function with a "NULL" argument on a non-jailbroken device will return "0"; doing the same thing
on a jailbroken device will return "1". This difference is due to the function's checking for access to /bin/sh on
jailbroken devices only.
Bypassing Jailbreak Detection
Once you start an application that has jailbreak detection enabled on a jailbroken device, you'll notice one of the
following things:
1. The application closes immediately, without any notification.
2. A pop-up window indicates that the application won't run on a jailbroken device.
In the first case, make sure the application is fully functional on non-jailbroken devices. The application may be
crashing or it may have a bug that causes it to terminate. This may happen while you're testing a preproduction
version of the application.
Let's look at bypassing jailbreak detection using the Damn Vulnerable iOS application as an example again. After
loading the binary into Hopper, you need to wait until the application is fully disassembled (look at the top bar to check
the status). Then look for the "jail" string in the search box. You'll see two classes: SFAntiPiracy and
JailbreakDetectionVC . You may want to decompile the functions to see what they are doing and, in particular, what
they return.
515
iOS Anti-Reversing Defenses
As you can see, there's a class method ( +[SFAntiPiracy isTheDeviceJailbroken] ) and an instance method ( -
[JailbreakDetectionVC isJailbroken] ). The main difference is that we can inject Cycript in the app and call the class
method directly, whereas the instance method requires first looking for instances of the target class. The function
choose will look in the memory heap for known signatures of a given class and return an array of instances. Putting
an application into a desired state (so that the class is indeed instantiated) is important.
Let's inject Cycript into our process (look for your PID with top ):
iOS8-jailbreak:~ root# cycript -p 12345
cy# [SFAntiPiracy isTheDeviceJailbroken]
true
As you can see, our class method was called directly, and it returned "true". Now, let's call the -[JailbreakDetectionVC
isJailbroken] instance method. First, we have to call the choose function to look for instances of the
JailbreakDetectionVC class.
cy# a=choose(JailbreakDetectionVC)
[]
Oops! The return value is an empty array. That means that there are no instances of this class registered in the
runtime. In fact, we haven't clicked the second "Jailbreak Test" button, which initializes this class:
516
iOS Anti-Reversing Defenses
cy# a=choose(JailbreakDetectionVC)
[#""]
cy# [a[0] isJailbroken]
True
Now you understand why having your application in a desired state is important. At this point, bypassing jailbreak
detection with Cycript is trivial. We can see that the function returns a boolean; we just need to replace the return
value. We can replace the return value by replacing the function implementation with Cycript. Please note that this will
actually replace the function under its given name, so beware of side effects if the function modifies anything in the
application:
cy# JailbreakDetectionVC.prototype.isJailbroken=function(){return false}
cy# [a[0] isJailbroken]
false
517
iOS Anti-Reversing Defenses
In this case we have bypassed the jailbreak detection of the application!
Now, imagine that the application is closing immediately after detecting that the device is jailbroken. You don't have
time to launch Cycript and replace the function implementation. Instead, you have to use CydiaSubstrate, employ a
proper hooking function like MSHookMessageEx , and compile the tweak. There are good sources for how to do this;
however, by using Frida, we can more easily perform early instrumentation and we can build on our gathered skills
from previous tests.
One feature of Frida that we will use to bypass jailbreak detection is so-called early instrumentation, that is, we will
replace function implementation at startup.
1. Make sure that frida-server is running on your iOS Device.
2. Make sure that Frida is installed on your workstation.
3. The iOS device must be connected via USB cable.
4. Use frida-trace on your workstation:
$ frida-trace -U -f /Applications/DamnVulnerableIOSApp.app/DamnVulnerableIOSApp -m "-[JailbreakDetectionVC isJ
ailbroken]"
This will start DamnVulnerableIOSApp, trace calls to -[JailbreakDetectionVC isJailbroken] , and create a JavaScript
hook with the onEnter and onLeave callback functions. Now, replacing the return value via value.replace is trivial,
as shown in the following example:
onLeave: function (log, retval, state) {
console.log("Function [JailbreakDetectionVC isJailbroken] originally returned:"+ retval);
retval.replace(0);
console.log("Changing the return value to:"+retval);
}
518
iOS Anti-Reversing Defenses
This will provide the following output:
$ frida-trace -U -f /Applications/DamnVulnerableIOSApp.app/DamnVulnerableIOSApp -m "-[JailbreakDetectionVC isJ
ailbroken]:"
Instrumenting functions... `...
-[JailbreakDetectionVC isJailbroken]: Loaded handler at "./__handlers__/__JailbreakDetectionVC_isJailbroken_.js
"
Started tracing 1 function. Press Ctrl+C to stop.
Function [JailbreakDetectionVC isJailbroken] originally returned:0x1
Changing the return value to:0x0
/* TID 0x303 */
6890 ms -[JailbreakDetectionVC isJailbroken]
Function [JailbreakDetectionVC isJailbroken] originally returned:0x1
Changing the return value to:0x0
22475 ms -[JailbreakDetectionVC isJailbroken]
Note the two calls to -[JailbreakDetectionVC isJailbroken] , which correspond to two physical taps on the app's GUI.
One more way to bypass Jailbreak detection mechanisms that rely on file system checks is objection. You can find the
implementation here.
See below a Python script for hooking Objective-C methods and native functions:
import frida
import sys
try:
session = frida.get_usb_device().attach("Target Process")
except frida.ProcessNotFoundError:
print "Failed to attach to the target process. Did you launch the app?"
sys.exit(0);
script = session.create_script("""
// Handle fork() based check
var fork = Module.findExportByName("libsystem_c.dylib", "fork");
Interceptor.replace(fork, new NativeCallback(function () {
send("Intercepted call to fork().");
return -1;
}, 'int', []));
var system = Module.findExportByName("libsystem_c.dylib", "system");
Interceptor.replace(system, new NativeCallback(function () {
send("Intercepted call to system().");
return 0;
}, 'int', []));
// Intercept checks for Cydia URL handler
var canOpenURL = ObjC.classes.UIApplication["- canOpenURL:"];
Interceptor.attach(canOpenURL.implementation, {
onEnter: function(args) {
var url = ObjC.Object(args[2]);
send("[UIApplication canOpenURL:] " + path.toString());
},
onLeave: function(retval) {
send ("canOpenURL returned: " + retval);
}
});
519
iOS Anti-Reversing Defenses
// Intercept file existence checks via [NSFileManager fileExistsAtPath:]
var fileExistsAtPath = ObjC.classes.NSFileManager["- fileExistsAtPath:"];
var hideFile = 0;
Interceptor.attach(fileExistsAtPath.implementation, {
onEnter: function(args) {
var path = ObjC.Object(args[2]);
// send("[NSFileManager fileExistsAtPath:] " + path.toString());
if (path.toString() == "/Applications/Cydia.app" || path.toString() == "/bin/bash") {
hideFile = 1;
}
},
onLeave: function(retval) {
if (hideFile) {
send("Hiding jailbreak file...");MM
retval.replace(0);
hideFile = 0;
}
// send("fileExistsAtPath returned: " + retval);
}
});
/* If the above doesn't work, you might want to hook low level file APIs as well
var openat = Module.findExportByName("libsystem_c.dylib", "openat");
var stat = Module.findExportByName("libsystem_c.dylib", "stat");
var fopen = Module.findExportByName("libsystem_c.dylib", "fopen");
var open = Module.findExportByName("libsystem_c.dylib", "open");
var faccesset = Module.findExportByName("libsystem_kernel.dylib", "faccessat");
*/
""")
def on_message(message, data):
if 'payload' in message:
print(message['payload'])