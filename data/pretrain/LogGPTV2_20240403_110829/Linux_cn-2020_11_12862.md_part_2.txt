```
import pulumi_random as random
password = random.RandomString("password", length=10)
```
一个 Pulumi 项目目前只支持单一一种语言，但每个项目都可以引用其他语言编写的项目，这对于多语言团队的成员来说是一个很有用的技巧。
你已经编写了第一个 Pulumi 资源。现在你需要部署它。
离开编辑器，回到命令行。在你的项目目录下，运行 `pulumi up`，然后看着神奇的事情发生：
```
pulumi up
Previewing update (dev):
     Type                          Name                  Plan
 +   pulumi:pulumi:Stack           my-first-project-dev  create
 +   └─ random:index:RandomString  password              create
Resources:
    + 2 to create
Do you want to perform this update? yes
Updating (dev):
     Type                          Name                  Status
 +   pulumi:pulumi:Stack           my-first-project-dev  created
 +   └─ random:index:RandomString  password              created
Resources:
    + 2 created
Duration: 2s
Permalink: file:///Users/lbriggs/.pulumi/stacks/dev.json
```
太好了，你有了第一个 Pulumi 资源! 虽然你可能很享受这种成就感，但不幸的是，这个随机资源并没有那么有用：它只是一个随机的字符串，你甚至看不到它是什么。先解决这部分问题。修改你之前的程序，在你创建的常量中加入 `export`：
```
import * as pulumi from "@pulumi/pulumi";
import * as random from "@pulumi/random";
export const password = new random.RandomString(`password`, {
    length: 10
})
```
重新运行 `pulumi up`，看看输出：
```
pulumi up
Previewing update (dev):
     Type                 Name                  Plan
     pulumi:pulumi:Stack  my-first-project-dev
Outputs:
  + password: {
      + id             : "&+r?{}J$J7"
      + keepers        : output
      + length         : 10
      + lower          : true
      + minLower       : 0
      + minNumeric     : 0
      + minSpecial     : 0
      + minUpper       : 0
      + number         : true
      + overrideSpecial: output
      + result         : "&+r?{}J$J7"
      + special        : true
      + upper          : true
      + urn            : "urn:pulumi:dev::my-first-project::random:index/randomString:RandomString::password"
    }
Resources:
    2 unchanged
Do you want to perform this update? yes
Updating (dev):
     Type                 Name                  Status
     pulumi:pulumi:Stack  my-first-project-dev
Outputs:
  + password: {
      + id        : "&+r?{}J$J7"
      + length    : 10
      + lower     : true
      + minLower  : 0
      + minNumeric: 0
      + minSpecial: 0
      + minUpper  : 0
      + number    : true
      + result    : "&+r?{}J$J7"
      + special   : true
      + upper     : true
      + urn       : "urn:pulumi:dev::my-first-project::random:index/randomString:RandomString::password"
    }
Resources:
    2 unchanged
Duration: 1s
Permalink: file:///Users/lbriggs/.pulumi/stacks/dev.json
```
现在你可以在 `Outputs` 的 `result` 部分下看到一个随机生成的字符串。你现在可以看到你创建的资源有很多属性。
这一切都很好，但如果你想享受 IaC，你得提供一些随机字符串以外的东西。试试吧。
### 部署一个容器
到目前为止，你已经通过安装依赖关系和注册一个简单的随机资源来 体验了初建你的 Pulumi。现在部署一些实际的基础设施，尽管是在你的本地机器上。
首先，将 `@pulumi/docker` 提供者添加到你的堆栈中。使用你选择的包管理器将其添加到项目中：
```
npm install @pulumi/docker
```
你已经从 `npm` 下拉了 Pulumi Docker 提供商包，这意味着你现在可以在你的项目中创建 Docker 镜像。
如果你的机器上还没有安装 Docker，现在是一个极好的时机去安装它。说明将取决于你的操作系统，所以看看 [Docker 的安装页面](https://docs.docker.com/get-docker/)了解信息。
再次打开你喜欢的 IDE，运行一个 Docker 容器。修改你之前的 `index.ts` 文件，让它看起来像这样：
```
import * as pulumi from "@pulumi/pulumi";
import * as random from "@pulumi/random";
import * as docker from "@pulumi/docker";
const password = new random.RandomString(`password`, {
    length: 10
})
const container = new docker.Container(`my-password`, {
    image: 'hashicorp/http-echo',
    command: [ pulumi.interpolate`-text=Your super secret password is: ${password.result}` ],
    ports: [{
        internal: 5678,
        external: 5678,
    }]
})
export const id = container.id
```
这将创建一个容器，创建一个 Web 服务器。Web 服务器的输出是你随机生成的字符串，在本例中是一个密码。运行这个，看看会发生什么：
```
pulumi up
Previewing update (dev):
     Type                       Name                  Plan
     pulumi:pulumi:Stack        my-first-project-dev
 +   └─ docker:index:Container  my-password           create
Outputs:
  + id      : output
  ~ password: {
        id        : "&+r?{}J$J7"
        length    : 10
        lower     : true
        minLower  : 0
        minNumeric: 0
        minSpecial: 0
        minUpper  : 0
        number    : true
        result    : "&+r?{}J$J7"
        special   : true
        upper     : true
        urn       : "urn:pulumi:dev::my-first-project::random:index/randomString:RandomString::password"
    }
Resources:
    + 1 to create
    2 unchanged
Do you want to perform this update? yes
Updating (dev):
     Type                       Name                  Status
     pulumi:pulumi:Stack        my-first-project-dev
 +   └─ docker:index:Container  my-password           created
Outputs:
  + id      : "e73b34aeca34a64b72b61b0b9b8438637ce28853937bc359a1528ca99f49ddda"
    password: {
        id        : "&+r?{}J$J7"
        length    : 10
        lower     : true
        minLower  : 0
        minNumeric: 0
        minSpecial: 0
        minUpper  : 0
        number    : true
        result    : "&+r?{}J$J7"
        special   : true
        upper     : true
        urn       : "urn:pulumi:dev::my-first-project::random:index/randomString:RandomString::password"
    }
Resources:
    + 1 created
    2 unchanged
Duration: 2s
Permalink: file:///Users/lbriggs/.pulumi/stacks/dev.json
```
你会注意到在 `Outputs` 部分，你输出的值已经改变了，它只是一个 Docker 容器 ID。检查你的非常简单的密码生成器是否工作：
```
curl http://localhost:5678
Your super secret password is: &+r?{}J$J7
```
就是这样! 你刚刚用 TypeScript 配置了你的第一个基础架构。
#### 关于 Pulumi 输出的快速说明
你会注意到在创建 Docker 容器的代码中，它使用了一个特殊的 `pulumi.interpolate` 调用。如果你熟悉 TypeScript，你可能会好奇为什么需要这样做（因为它是 Pulumi 特有的）。这有一个有趣的原因。
当 Pulumi 创建一个资源时，直到程序执行时有一些值是 Pulumi 不知道的。在 Pulumi 中，这些值被称为 `Outputs`。这些 `Outputs` 可以在上面的代码中看到，例如，在你的第一个随机资源中，你使用 `export` 关键字来输出随机资源的属性，你还输出了你创建的容器的容器 ID。
因为 Pulumi 直到执行时才知道这些 `Outputs` 的值，所以在操作字符串时，它需要特殊的助手来使用它们。如果你想了解更多关于这个特殊的编程模型，请观看[这个短视频](https://www.youtube.com/watch?v=lybOxul2otM)。
### 总结
随着混合云基础架构中出现的复杂性，IaC 在很多方面都有了发展。在基础设施供应领域，Pulumi 是一个很好的选择，它可以使用你最喜欢的编程语言来供应你所需要的一切基础设施，然后你可以在你最喜欢的配置管理工具中进行标记，以采取下一步措施。
---
via: 
作者：[Lee Briggs](https://opensource.com/users/lbriggs) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出