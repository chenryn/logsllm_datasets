N denotes
the multiplicative group of integers modulo N . If S is a set,
then x ←$ S denotes the selection of an element x uniformly
at random from S. If x is a (cid:96)-bit string and (cid:96) ≥ n, [x]n de-
notes the n most signiﬁcant bits of x and [x]n denotes the n
least signiﬁcant bits of x. If A is a probabilistic algorithm,
then y ← A(x1, x2,··· ) denotes that A takes x1, x2,··· as
inputs and outputs y, and AO denotes A has oracle access
to the oracle O.
If X and Y are random variables, then
SD(X, Y ) denotes the statistical distance between X and Y ,
2 Σz| Pr[X = z] − Pr[Y = z]|. A function
i.e., SD(X, Y ) = 1
 : N → [0, 1] is said to be negligible in k if (k)  2k0. Let A be a probabilistic polynomial time algorithm
that given x ∈ ZN , outputs a set of l strings containing the
k − k0 most signiﬁcant bits of the e-th root of x with prob-
ability  (i.e. A breaks the l-set partial-domain one-wayness
of f : x → xe mod N ). Then there exists a polynomial time
algorithm B that solves the RSA problem (N, e) with success
probability (cid:48), where
(cid:48) ≥  · ( − 22k0−k+6).

2.3.2 Φ-hiding Assumption
The Φ-hiding assumption informally states that given a
RSA modulus N , it is not possible to distinguish primes e(cid:48)
which do not divide Φ(N ) from primes e that do, where
Φ(N ) = (p − 1)(q − 1) is Euler’s totient function. Note that
in the latter case, the RSA function f : x → xe mod N
is no longer a permutation, but becomes a lossy function.
Following [40], we deﬁne the Φ-hiding assumption as follows.
Let Primesλ[··· ] denote the uniform distribution of λ-bit
primes satisfying the condition in brackets. Let RSAinj
c,θ and
RSAloss
c,θ be algorithms that output the public key (pq, e) and
a lossy public key (pq, e) satisfying p = 1 mod e, respectively
(Figure 1).
Definition 4
(Φ-hiding assumption). Let c(λ), θ(λ)
be functions such that c ∈ (0, 1) and θ is an even integer sat-
isfying 0  p and that σ, N are co-prime.
Let PK = {σi + τ : i = 0, 1,··· , K − 1} and assume that
K > q. Let e be such that p = 1 mod e and e, q − 1 are
co-prime. Then,
SD(ye mod n, ze mod N ) ≤ 3q
K
where y ←$ PK and z ←$ Z∗
N .
2.4 Signatures
+
2p
q − 1
+
2
p − 1
+
A signature scheme S is deﬁned by three algorithms with
the following functionality:
S.KeyGen(1λ) This is the key generations algorithm, which
on input the security parameters 1λ, returns a key pair
(vk, sk) consisting of a veriﬁcation key vk and a signing
key sk.
S.Sign(sk, m) This is the signing algorithm, which on input
a signing key sk, and a message m, returns a signature
σ on m.
S.Verify(vk, m, σ) This is the veriﬁcation algorithm, which
on input a veriﬁcation key vk, a message m, and a
signature σ, returns either a symbol (cid:62) indicating that
σ is accepted as a valid signature on m under vk, or
the rejection symbol ⊥.
We require a signature scheme to satisfy perfect correctness,
that is, for all λ, all (vk, sk) ← S.KeyGen(1λ), and all mes-
sages m, it holds that S.Verify(vk, m, S.Sign(sk, m)) = (cid:62).
2.5 Public Key Encryption
A public key encryption scheme PKE is deﬁned by three
algorithms with the following functionality:
PKE.KeyGen(1λ) This is the key generations algorithm, which
on input the security parameter 1λ, returns a pub-
lic/private key pair (pk, sk). The public key pk deﬁnes
a supported message M(pk).
PKE.Enc(pk, m) This is the encryption algorithm, which on
input a public key pk and a message m, returns an
encryption c of m under pk.
244c,θ (λ):
RSAinj
(N, e, d) ←$ RSAGen(1λ, c)
return (N, e)
c,θ (λ):
RSAloss
e ←$ Primescλ
p ←$ Primes λ
q ←$ Primes λ
return (pq, e)
2 − θ
2
2 + θ
2
[p = 1 mod e]
Figure 1: Algorithms for deﬁning the Φ-hiding assumption
PKE.Dec(par, sk, c) This is the decryption algorithm, which
on input a private key sk and a ciphertext c, returns
either a message m or the error symbol ⊥.
We require that an encryption scheme satisﬁes perfect cor-
rectness, that is, for all λ, all (pk, sk) ← PKE.KeyGen(1λ), and
all m ∈ M(pk), it holds that PKE.Dec(sk, PKE.Enc(pk, m)) =
m.
3. PKCS#1
The Public Key Cryptography Standards (PKCS) are a
group of cryptographic standards originally published by
RSA Securities Inc. The PKCS#1 standard speciﬁes RSA-
based public-key encryption and signatures, and the cur-
rent version, PKCS#1 v2.2 [37], includes the speciﬁcation
of RSA-OAEP encryption and RSA-PSS signatures, which
we will recall below. Besides these, PKCS#1 v2.2 includes a
signature scheme originating from the earlier PKCS#1 v1.5
standard, which is similar to the FDH signature scheme (un-
like FDH, a simple padding scheme is used), as well as an
encryption scheme which also originates from PKCS#1 v1.5.
However, as the PKCS#1 v1.5 encryption scheme does not
provide an appropriate level of security (e.g. see [2]), we will
not discuss this further.
3.1 RSA-OAEP Encryption
The RSA-OAEP encryption scheme was originally pro-
posed by Bellare and Rogaway [8], and has been shown IND-
CCA secure under the RSA assumption in the random oracle
model [21, 22].
In our description of the scheme we make use of RSAGen,
and the scheme is parameterized by k0 and k1 which are
values satisfying k = n + k0 + k1, where k(λ) is the bit
length of the modulus N generated by RSAGen(1λ) and n
is the plaintext length. The scheme makes use of two hash
functions, G : {0, 1}k0 → {0, 1}k−k0 and H : {0, 1}k−k0 →
{0, 1}k0 .
KeyGen(1λ) Run (N, e, d) ← RSAGen(1λ), and set pk ← (N, e)
and sk ← (N, d). Return (pk, sk).
PKE.Enc(pk, m) Pick r ←$ {0, 1}k0 and compute s = (m||0k1 )⊕
G(r) and t = r ⊕ H(s). Then sets c ← (s||t)e mod N
and return c.
PKE.Dec(sk, c) Compute s||t = cd mod N , r = t ⊕ H(s) and
M = r ⊕ G(r). If [M ]k1 = 0k1 , returns [M ]n. Other-
wise, return ⊥.
3.2 RSA-PSS Signatures
The RSA-PSS signature scheme makes use of RSAGen and
is parameterized by k0 and k1 which are values satisfying
k0 + k1 ≤ k− 1, where k = k(λ) is the bit length of the mod-
ulus N generated by RSAGen(1λ). The scheme furthermore
makes use of two hash functions, H : {0, 1}∗ → {0, 1}k1 and
G : {0, 1}k1 → {0, 1}k−k1−1. For convenience, we will de-
note by G1(·) the k1 most signiﬁcant bits of the output of
G, and by G2(·) the remaining k − k0 − k1 − 1 bits.
PSS.KeyGen(1λ) Run (N, e, d) ← RSAGen(1λ), and set vk ←
(N, e) and sk ← (N, d). Return (vk, sk).
PSS.Sign(sk, m) Pick random r ←$ {0, 1}k0 and compute
w ← H(m||r). Then set y ← 0||w||(r⊕G1(w))||G2(w),
and return the signature σ ← yd mod N .
PSS.Verify(vk, m, σ) Firstly compute y ← σd and parse
y → b||w||r(cid:48)||γ. Furthermore, set r ← r(cid:48) ⊕ G1(w).
If b = 0, H(m||r) = w, and G2(w) = γ, return (cid:62).
Otherwise, return ⊥.
4. SECURITY MODELS
Related randomness security for encryption was introduced
by Paterson et al. [34], and captures a broad rage of random-
ness failures. In this section, we deﬁne (a slight variation of)
the security notion from [34] which we will use to analyze
RSA-OAEP encryption. We furthermore deﬁne the natu-
ral adaptation of this security notion to signature schemes
which we will use in our analysis of RSA-PSS signatures.
We note that Yuen et al. [41] considered an adaptation of
the [34] model to signature schemes which additionally takes
into account related key attacks. However, the notion we
deﬁne here is only concerned with randomness failures and
will not take into account an adversary with the ability to
manipulate the private key material of the signer.
4.1 Related Randomness Secure Encryption
The related randomness security notion deﬁned in [34]
allows the adversary to control the randomness used in en-
cryption via related randomness functions. Speciﬁcally, the
security experiment initially picks a uniformly distributed
value r, and the adversary is allowed to request encryptions
Enc(pk, m; ψ(r)) for public keys pk, messages m, and re-
lated randomness functions ψ of his choice. Note that pk
might be a maliciously generated public key, and that the
adversary potentially knows the corresponding private key.
This captures that encryptions might be done for malicious
users. The adversary is challenged to distinguish between
encryptions Enc(pk∗, m0; φ(r)) and Enc(pk∗, m1; φ(r)) for a
challenge public key pk∗ honestly generated by the experi-
ment, and messages m0, m1 and related randomness func-
tion φ of his choice. Note that in this model, the adversary
cannot inﬂuence the randomness used to generate pk∗. The
adversary is allowed to make multiple challenge queries, as
in the related randomness setting, multi-challenge security
is not implied by single-challenge security as for ordinary
IND-CCA security4. Furthermore, note that the challenge
4Note that the challenge queries are no longer independent
due to the use of related randomness, and hence cannot be
treated separately in a reduction to single-challenge security.
245IND-RR-CCAPKEA (λ):
(pk∗, sk∗) ← PKE.KeyGen(1λ)
b ←$ {0, 1}; r ←$ R
S ← ∅
b(cid:48) ← ALR,Enc,Dec(par, pk∗)
return (b = b(cid:48))
proc. Enc(pk, m, ψ):
c ← PKE.Enc(pk, m; ψ(r))
return c
proc. Dec(c):
if c ∈ S, then return ⊥
else return PKE.Dec(sk∗, c)
proc. LR(m0, m1, φ):
c ← PKE.Enc(pk∗, mb; φ(r))
S ← S ∪ {c}
return c
Figure 2: Game deﬁning indistinguishability under related randomness and chosen ciphertext attacks (IND-
RR-CCA)
queries provide the adversary with an encryption oracle for
the honestly generated pk∗ and functions φ; by submitting
(m, m, φ), the adversary obtains Enc(pk∗, m; φ(r)). Lastly,
as we consider CCA security, the adversary is allowed to
request decryptions under sk∗ corresponding to pk∗ for ci-
phertexts of his choice, but as decryption is assumed to be
deterministic, this is similar to ordinary IND-CCA security.
We refer to an adversary who is restricted to picking related
randomness functions φ and ψ from functions families Φ and
Ψ, as (Φ, Ψ)-restricted. The full security game is shown in
Figure 2.
It should be noted that, in the above description, we con-
sider separate functions families Φ and Ψ, whereas the no-
tion deﬁned in [34] only considers a single function family
i.e. Φ = Ψ. This allows us to distinguish between the related
randomness functions used for malicious users for which the
adversary might know the private key, and the related ran-
domness functions used for the honest challenge user. This
in turn allows a more detailed description of the security
properties provided by RSA-OAEP encryption.