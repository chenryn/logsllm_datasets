YES
•" 和Rasp说拜拜
Class重载绕过Rasp之从java虚拟机获得jvmti对象
0 1
获得jvmti对象
Jvm抛出没有能力重定义类
给Jvmti手动加上权能
Class重载绕过Rasp之定位JNI地址
0 1
1. 解析/proc/self/maps获得so内存偏移地址与路径
2. Elf导出函数相对地址+so内存偏移=绝对地址
3. 用函数绝对地址替换我们之前的硬编码地址
Class重载绕过Rasp之cpp转与位置无关的shellcode
0 1
•"不能使用函数 可以用内联函数替代 需要开启编译优化
•"关闭所有安全检查
•"使用基于堆栈的字符串
•"x32需要关闭pic
找到函数起始地址把函数复制出来
Class重载绕过Rasp之cpp转与位置无关的shellcode
0 1
1. 解析o文件定位函数偏移
2. 解析o文件获取函数大小
3. 把我们编写的函数复制出来
0 1
Class重载绕过Rasp之patchVM
•"右图是JVM回调Java层Agent的流程图
•"native层收到重载类消息后会调用所有Agent的eventHandlerClassFileLoadHook事件
•"eventHandlerClassFileLoadHook事件会通过getJPLISEnvironment获取JPLISEnvironment上下文
•"JAVA层的Agent会自动在native层注册eventHandlerClassFileLoadHook事件到ClassFileLoadHook
•"如果environment不为NULL"则调用Java层的transform方法 通知Agent Hook该类
•"Java类的加载或类重载JVM都会调用eventHandlerClassFileLoadHook事件
•"getJPLISEnvironment调用jvmtienv->GetEnvironmentLocalStorage 获取存储的JPLISEnvironment上下文
0 1
Class重载绕过Rasp之patchVM
•"在我们UnHook之前我们需要把已有的Agent给“杀掉”
1. Hook Java层 InstrumentationImpl 不够Hack
3. Hook Native函数 Cool
2. Hook Java层 TransformerManager 不够Hack
•"在Java层做UnHook容易被Agent拦截
0 1
Class重载绕过Rasp之patchVM
我们如果Hook"Java层的函数 很有可能被之前的Agent给拦掉
所以我们直接选择Hook Native层函数
在上面我们已经得知调用GetEnvironmentLocalStorage方法如果返回错误environment上下文会为NULL
environment为NULL就不会调用Java层的transform方法
所以我们直接Hook GetEnvironmentLocalStorage 让它直接返回错误
Class重载绕过Rasp之编写native函数
0 1
1. 查找回调类 定位回调方法
2. 遍历所有已经加载到JVM的类
3. 调用回调方法进行类的修改
Class重载绕过Rasp之编写Java回调函数
0 1
以UnHook 命令执行 为例 我们从Jar包读取原始的类 替换掉被Hook的类
从视频可以看到我们成功通过重载绕过OpenRasp
0 1
Class重载绕过Rasp
0 1
•"支持绝大部分JDK  在以下Java发行版经过测试
• patchVM执行后 其它Agent再也无法注入当前JVM虚拟机
• 可以绕过国内外几乎所有公开的Rasp以及国内厂商自研Rasp
•"不仅可以绕过Rasp还可以注入通用内存马
Java发行版
版本范围
Support2Bypass Agent
OpenJDK
6+
支持
OracleJDK
6+
支持
ZuluJDK
6+
支持
jrockit
6+
支持
SapMachine
6+
支持
Microsoft
6+
支持
Kona"JDK
6+
支持
LibericaJDK
6+
支持
毕升JDK
6+
支持
PART.06"
0 2
不出网获得稳定代理
•" 通过Http"Chunk获得稳定隧道代理
•" 通过哥斯拉获得稳定隧道代理
Http chunk正向代理
0 1
分块传输编码（Chunked"transfer"encoding）是超
文本传输协议（HTTP）中的一种数据传输机制，
允许HTTP由应用服务器发送给客户端应用（ 通常
是网页浏览器）的数据可以分成多个部分
Http chunk正向代理
0 1
优点：
1.""长连接不会中断
2.""仅需要发送一个Http请求
3.""速度很快
4.""可以在任何系统运行
缺点：
1.""不支持反向代理
Http chunk正向代理
0 1
Http"Chunk优点很多缺点很少 于是我开发了Chunk-Proxy
0 1
Chunk-proxy对各个Web容器的支持
容器
语言
是否支持双向流
是否支持长时间连接
Chunk-proxy是否支持
Tomcat
Java
双向流
支持长连接
支持
Weblogic
Java
双向流
支持长连接
支持
Jboos
Java
双向流
支持长连接
支持
Resin
Java
双向流
支持长连接
支持
Jetty
Java
双向流
支持长连接
支持
websphere
Java
双向流
支持长连接
支持
glassfish
Java
双向流
支持长连接
支持
IIS
C#
单向流
支持长链接
支持
哥斯拉正向代理
0 1
•"I/O多路复用 多个Socket共用一个隧道
• 数据传输协议基于二进制结构
•"传输流量加密 错误重试 重试校验
•"支持Socks代理和端口映射以及转发
•"支持负载均衡
不出网上线C2
0 1
PART.07"
0 2
开发后渗透插件
•" 通过哥斯拉Api 快速编写编写内存加载Mimikatz插件
编写哥斯拉插件
0 1
新建一个项目并把哥斯拉添加到依赖库
编写哥斯拉插件
0 1
1. 新建包 包名必须以shells.plugins.作者名
2. 新建一个 Swing Panel
编写哥斯拉插件
0 1
使用IDEA拖拽图形化界面
编写哥斯拉插件
0 1
1. 使用PluginAnnotation注解
2. 实现Plugin接口
3. 保存插件初始化时传入的上下文
4. 将Mimikatz复制到包目录下
编写哥斯拉插件
0 1
1. 为runButton添加单击事件
2. 通过getPlugin获取ShellcodeLoader插件
3. 读入Mimikatz到内存
4. 调用ShellcodeLoader在内存中加载PE
5. 将输出展示到resultTextArea
编写哥斯拉插件
0 1
1. 添加导出jar
2. 在导出中删除godzilla依赖
编写哥斯拉插件
0 1
在 配置->插件配置 导入我们编写的插件
编写哥斯拉插件
0 1
插件KconMimikatz成功被加载
点击Run按钮成功在内存运行Mimikatz
疑问与交流
哥斯拉下载连接：https://github.com/BeichenDream/Godzilla
Rasp对抗代码 ： https://github.com/BeichenDream/Kcon2021Code
JDK对抗代码 ： https://github.com/BeichenDream/Kcon2021Code
Chunk-Proxy ： https://github.com/BeichenDream/Chunk-Proxy
GenericAgentTools ： https://github.com/BeichenDream/GenericAgentTools
通用Java内存马： https://github.com/BeichenDream/GodzillaWebAgent
M        A        N        O        E        U        V        R        E
感谢观看！
KCon 汇聚黑客的智慧