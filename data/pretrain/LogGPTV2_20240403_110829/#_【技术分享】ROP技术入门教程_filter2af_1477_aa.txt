# 【技术分享】ROP技术入门教程
##### 译文声明
本文是翻译文章，文章来源：ketansingh.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[beswing](http://bobao.360.cn/member/contribute?uid=820455891)
预估稿费：200RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**  
**
**前言**
不可否认的是，不管是CTF赛事，还是二进制漏洞利用的过程中，ROP都是一个很基础很重要的攻击技术。
这一段是译者自己加的，与原文无关。
ROP的全称为Return-oriented
programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。
另外译者推荐，如果想更好的学习ROP技术，可以参考蒸米大神的一步一步学ROP系列文章，请自行查找。
ROP是一种攻击技术，其中攻击者使用堆栈的控制来在现有程序代码中的子程序中的返回指令之前，立即间接地执行精心挑选的指令或机器指令组。
因为所有执行的指令来自原始程序内的可执行存储器区域，所以这避免了直接代码注入的麻烦，并绕过了用来阻止来自用户控制的存储器的指令的执行的大多数安全措施。
因此，ROP技术是可以用来绕过现有的程序内部内存的保护机制的。在学习下面的内容之前，先确保自己已经了解了基本的堆栈溢出的漏洞原理。
**  
**
**一个简单的经典缓冲区溢出例子**
    #include 
    #include 
    void vuln(){
       char buffer[10];
       read(0,buffer,100);
       puts(buffer);
    }
    int main() {
       vuln();
    }
这个程序有明显的缓冲区溢出攻击。在vuln()函数中设置了10个字节的缓冲区，而我们读取的字节高达100个字节。read()的滥用导致了缓冲区溢出。
我们可以看看vuln函数调用时候，堆栈的情况：
    ADDRESS       DATA
    0xbfff0000    XX XX XX XX  
    #include 
    #include 
    #include 
    void grant() {
       system("/bin/sh");
    }
    void exploitable() {
       char buffer[16];
       scanf("%s", buffer);
       if(strcmp(buffer,"pwned") == 0) grant();
       else  puts("Nice tryn");
    }
    int main(){
       exploitable();
       return 0;
    }
我们上文说了，ROP技术并不能绕过Canay保护措施，所以我们编译这个程序的时候需要关闭堆栈保护程序。我们可以利用下面的命令编译。
    $ gcc hack_me_2.c -o hack_me_2 -fno-stack-protector -m32