            return encoder.encode_pe(x)
        # raw vector
        else:
            return x.split(',')
现在我们有了将[这个](https://www.virustotal.com/gui/file/0830ea172eb905973e52c44f8a5ce44eccba53402ac81ddb4f4d612e8d069a25/detection)转换为以下所需的一切条件：
    `0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.333333333333,0.545098039216,0.925490196078,0.41568627451,1.0,0.407843137255,0.596078431373,0.192156862745,0.250980392157,0.0,0.407843137255,0.188235294118,0.149019607843,0.250980392157,0.0,0.392156862745,0.63137254902,0.0,0.0,0.0,0.0,0.313725490196,0.392156862745,0.537254901961,0.145098039216,0.0,0.0,0.0,0.0,0.513725490196,0.925490196078,0.407843137255,0.325490196078,0.337254901961,0.341176470588,0.537254901961,0.396078431373,0.909803921569,0.2,0.858823529412,0.537254901961,0.364705882353,0.988235294118,0.41568627451,0.0078431372549,1.0,0.0823529411765,0.972549019608,0.188235294118,0.250980392157,0.0,0.349019607843,0.513725490196,0.0509803921569,0.0941176470588,0.270588235294,0.250980392157,0.0,1.0,0.513725490196,0.0509803921569,0.109803921569,0.270588235294,0.250980392157,0.870149739583,0.00198567708333,0.00146484375,0.000944010416667,0.000830078125,0.00048828125,0.000162760416667,0.000325520833333,0.000569661458333,0.000130208333333,0.000130208333333,8.13802083333e-05,0.000553385416667,0.000390625,0.000162760416667,0.00048828125,0.000895182291667,8.13802083333e-05,0.000179036458333,8.13802083333e-05,0.00048828125,0.001611328125,0.000162760416667,9.765625e-05,0.000472005208333,0.000146484375,3.25520833333e-05,8.13802083333e-05,0.000341796875,0.000130208333333,3.25520833333e-05,1.62760416667e-05,0.001171875,4.8828125e-05,0.000130208333333,1.62760416667e-05,0.00372721354167,0.000699869791667,6.51041666667e-05,8.13802083333e-05,0.000569661458333,0.0,0.000113932291667,0.000455729166667,0.000146484375,0.000211588541667,0.000358072916667,1.62760416667e-05,0.00208333333333,0.00087890625,0.000504557291667,0.000846354166667,0.000537109375,0.000439453125,0.000358072916667,0.000276692708333,0.000504557291667,0.000423177083333,0.000276692708333,3.25520833333e-05,0.000211588541667,0.000146484375,0.000130208333333,0.0001953125,0.00577799479167,0.00109049479167,0.000227864583333,0.000927734375,0.002294921875,0.000732421875,0.000341796875,0.000244140625,0.000276692708333,0.000211588541667,3.25520833333e-05,0.000146484375,0.00135091145833,0.000341796875,8.13802083333e-05,0.000358072916667,0.00193684895833,0.0009765625,0.0009765625,0.00123697916667,0.000699869791667,0.000260416666667,0.00078125,0.00048828125,0.000504557291667,0.000211588541667,0.000113932291667,0.000260416666667,0.000472005208333,0.00029296875,0.000472005208333,0.000927734375,0.000211588541667,0.00113932291667,0.0001953125,0.000732421875,0.00144856770833,0.00348307291667,0.000358072916667,0.000260416666667,0.00206705729167,0.001171875,0.001513671875,6.51041666667e-05,0.00157877604167,0.000504557291667,0.000927734375,0.00126953125,0.000667317708333,1.62760416667e-05,0.00198567708333,0.00109049479167,0.00255533854167,0.00126953125,0.00109049479167,0.000325520833333,0.000406901041667,0.000325520833333,8.13802083333e-05,3.25520833333e-05,0.000244140625,8.13802083333e-05,4.8828125e-05,0.0,0.000406901041667,0.000602213541667,3.25520833333e-05,0.00174153645833,0.000634765625,0.00068359375,0.000130208333333,0.000130208333333,0.000309244791667,0.00105794270833,0.000244140625,0.003662109375,0.000244140625,0.00245768229167,0.0,1.62760416667e-05,0.002490234375,3.25520833333e-05,1.62760416667e-05,9.765625e-05,0.000504557291667,0.000211588541667,1.62760416667e-05,4.8828125e-05,0.000179036458333,0.0,3.25520833333e-05,3.25520833333e-05,0.000211588541667,0.000162760416667,8.13802083333e-05,0.0,0.000260416666667,0.000260416666667,0.0,4.8828125e-05,0.000602213541667,0.000374348958333,3.25520833333e-05,0.0,9.765625e-05,0.0,0.000113932291667,0.000211588541667,0.000146484375,6.51041666667e-05,0.000667317708333,4.8828125e-05,0.000276692708333,4.8828125e-05,8.13802083333e-05,1.62760416667e-05,0.000227864583333,0.000276692708333,0.000146484375,3.25520833333e-05,0.000276692708333,0.000244140625,8.13802083333e-05,0.0001953125,0.000146484375,9.765625e-05,6.51041666667e-05,0.000358072916667,0.00113932291667,0.000504557291667,0.000504557291667,0.0005859375,0.000813802083333,4.8828125e-05,0.000162760416667,0.000764973958333,0.000244140625,0.000651041666667,0.000309244791667,0.0001953125,0.000667317708333,0.000162760416667,4.8828125e-05,0.0,0.000162760416667,0.000553385416667,1.62760416667e-05,0.000130208333333,0.000146484375,0.000179036458333,0.000276692708333,9.765625e-05,0.000406901041667,0.000162760416667,3.25520833333e-05,0.000211588541667,8.13802083333e-05,1.62760416667e-05,0.000130208333333,8.13802083333e-05,0.000276692708333,0.000504557291667,9.765625e-05,1.62760416667e-05,9.765625e-05,3.25520833333e-05,1.62760416667e-05,0.0,0.00138346354167,0.000732421875,6.51041666667e-05,0.000146484375,0.000341796875,3.25520833333e-05,4.8828125e-05,4.8828125e-05,0.000260416666667,3.25520833333e-05,0.00068359375,0.000960286458333,0.000227864583333,9.765625e-05,0.000244140625,0.000813802083333,0.000179036458333,0.000439453125,0.000341796875,0.000146484375,0.000504557291667,0.000504557291667,9.765625e-05,0.00760091145833,0.0,0.370786516854,0.0112359550562,0.168539325843,0.0,0.0,0.0337078651685,0.0,0.0,0.0,0.303370786517,0.0112359550562,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0561797752809,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0449438202247,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.25,0.25,0.588637653212,0.055703845605`
假设你有一个文件夹包含`pe-malicious`子文件夹中的恶意样本和`pe-legit`中的干净样本（随意给它们任何名称，但文件夹名称将成为与每个样本相关联的标签），你可以开始编码过程到一个`dataset.csv`文件，我们的模型可以使用该文件进行培训:
    ergo encode /path/to/ergo-pe-av /path/to/dataset --output /path/to/dataset.csv
喝咖啡放松一下，这个过程可能需要一段时间:)，这取决于数据集的大小以及存储磁盘的速度。
# 向量的有用属性
虽然ergo正在编码我们的数据集，但让我们休息一下，讨论这些向量的有趣属性以及如何使用它。
现在很清楚，结构上或行为上相似的可执行文件将具有相似的向量，其中可以测量与一个向量和另一个向量的距离，例如，通过使用[余弦相似性](https://en.wikipedia.org/wiki/Cosine_similarity)，定义为：
除了其他方面，这个度量标准可用于从数据集中（我要提醒的是，这是一个庞大的文件集合，无论它们是否是恶意的，你并不真正了解其他文件）提取给定族的所有样本，给定一个已知的“轴”样本。例如，假设您有MIPS的Mirai样本，并且您希望从成千上万个不同的未标记样本的数据集中提取任何体系结构的每个Mirai变体。
我在[sum数据库中](https://github.com/evilsocket/sum)对诸如`findSimilar` _“oracle”_ （
_存储过程的_ 一个奇特名称）执行的算法非常简单：
    // Given the vector with id="id", return a list of
    // other vectors which cosine similarity to the reference
    // one is greater or equal than the threshold.
    // Results are given as a dictionary of :
    //      "vector_id => similarity"
    function findSimilar(id, threshold) {
        var v = records.Find(id);
        if( v.IsNull() == true ) {
            return ctx.Error("Vector " + id + " not found.");
        }
        var results = {};
        records.AllBut(v).forEach(function(record){
            var similarity = v.Cosine(record);
            if( similarity >= threshold ) {
               results[record.ID] = similarity
            }
        });
        return results;
    }
但相当有效:
# ANN作为黑匣子和训练
同时，我们的编码器应该已经完成了它的工作，并且生成包含从每个样本中提取的所有标记向量的`dataset.csv`文件，此时应该可以用于训练我们的模型......但是
_“训练我们的模型”_ 实际上意味着什么？这个 _“模型”_ 首先是什么？
我们使用的模型是一种称为[人工神经网络](https://en.wikipedia.org/wiki/Artificial_neural_network)的计算结构，我们使用[Adam优化算法](https://arxiv.org/abs/1412.6980v8)进行训练。在网上你会找到两者非常详细和正式的定义，但底线是：
ANN是一个“盒子”，包含数百个数值参数（“神经元” 的 _“权重”_ ，按层组织），它们与输入的（我们的向量）相乘并组合以产生输出 _预测_
。培训过程包括向系统提供数据集、根据已知标签检查预测、少量更改这些参数、观察这些变化是否以及如何影响模型准确性并重复此过程达给定次数（ _时期_
）直到整体性能达到我们定义的所需最小值。
[来自nature.com的致谢](https://www.evilsocket.net/2019/05/22/How-to-create-a-Malware-detection-system-with-Machine-Learning/\[https://www.nature.com/articles/s41467-018-06322-x\]\(https://www.nature.com/articles/s41467-018-06322-x))
主要假设我们未知的数据集中的数据点之间 _存在_
数值关联，但如果已知数据集，我们将可以把该数据集划分为输出类。我们要做的是要求黑盒子摄取数据集并通过迭代调整其内部参数使其近似于这样的函数。
在`model.py`文件中你可以找到ANN的定义，这是一个完整连接的网络，每个隐藏层有70个神经元，[ReLU](https://keras.io/activations/)作为激活函数，在训练期间[丢失](https://machinelearningmastery.com/dropout-regularization-deep-learning-models-keras/)30％：
    n_inputs = 486
    return Sequential([
        Dense(70, input_shape=(n_inputs,), activation='relu'),
        Dropout(0.3),
        Dense(70, activation='relu'),
        Dropout(0.3),
        Dense(2, activation='softmax')
    ])
我们现在可以开始培训过程：
    ergo train /path/to/ergo-pe-av --dataset /path/to/dataset.csv
根据CSV文件中向量的总量，此过程可能需要几分钟到几小时甚至几天。如果你的机器上有GPU，ergo会自动使用它们而不是CPU核心，以便显着加快训练速度（如果你感到困惑，请查看[这篇文章](https://www.datascience.com/blog/cpu-gpu-machine-learning)）。
完成后，你可以使用以下方法检查模型性能统计信息：
    ergo view /path/to/ergo-pe-av
这将显示培训历史，我们可以验证模型的准确性是否确实随着时间的推移而增加（在我们的例子中，它在epoch30周围达到了97％的准确度）和[ROC曲线](https://towardsdatascience.com/understanding-auc-roc-curve-68b2303cc9c5)，它告诉我们模型如何有效地区分恶意与否（AUC，或者说曲线下的区域，为0.994，意味着模型非常好）：
此外，还将显示每个培训、验证和测试集的混淆矩阵。左上角的对角线值(深红色)代表正确预测的数量，而其他值(粉色)则是错误的(我们的模型在大约30000个样本的测试集中有1.4%的误报率):
考虑到我们的特征提取算法的简单性，这样一个大数据集的97％准确度是一个非常有趣的结果。许多错误检测都是由UPX（或者甚至只是自解压zip /
msi档案）这样的打包程序引起的，这些打包程序会影响我们正在编码的一些数据点 -添加解包策略（例如模拟解包存根直到真正的PE处于内存）和更多功能（更大的入口点矢量，动态分析跟踪被调用的API，想象力是极限！）是获得99％的关键:)
# 结论
我们现在可以删除临时文件：
    ergo clean /path/to/ergo-pe-av
加载模型并将其用作API：
    ergo serve /path/to/ergo-pe-av --classes "clean, malicious"
并要求客户端分类：
    curl -F "x=@/path/to/file.exe" "http://localhost:8080/"
您将收到如下响应（[此处正在扫描的文件](https://www.virustotal.com/gui/file/af66d5db635537de043facf1580f9655fe441f03f82a7503272e32e3d8473af5/detection)）：
该模型将样本检测为恶意样本，置信度超过99％。
现在您可以使用该模型扫描您想要的任何内容，enjoy！:)