statements still leaves plenty of room for errors.
2.3.2 Cross-site Scripting Vulnerabilities
Cross-site scripting occurs when dynamically gener-
ated Web pages display input that has not been properly
validated [7, 11, 22, 46]. An attacker may embed mali-
cious JavaScript code into dynamically generated pages
of trusted sites. When executed on the machine of a user
who views the page, these scripts may hijack the user ac-
count credentials, change user settings, steal cookies, or
insert unwanted content (such as ads) into the page. At
the application level, echoing the application input back
to the browser verbatim enables cross-site scripting.
2.3.3 HTTP Response Splitting
HTTP response splitting is a general technique that
enables various new attacks including Web cache poi-
soning, cross-user defacement, sensitive page hijacking,
as well as cross-site scripting [28]. By supplying unex-
pected line break CR and LF characters, an attacker can
cause two HTTP responses to be generated for one mali-
ciously constructed HTTP request. The second HTTP re-
sponse may be erroneously matched with the next HTTP
request. By controlling the second response, an attacker
can generate a variety of issues, such as forging or poi-
soning Web pages on a caching proxy server. Because
the proxy cache is typically shared by many users, this
makes the effects of defacing a page or constructing a
spoofed page to collect user data even more devastating.
For HTTP splitting to be possible, the application must
include unchecked input as part of the response headers
sent back to the client. For example, applications that
embed unchecked data in HTTP Location headers re-
turned back to users are often vulnerable.
2.3.4 Path Traversal
Path-traversal vulnerabilities allow a hacker to ac-
cess or control ﬁles outside of the intended ﬁle access
path. Path-traversal attacks are normally carried out via
unchecked URL input parameters, cookies, and HTTP
request headers. Many Java Web applications use ﬁles
to maintain an ad-hoc database and store application re-
sources such as visual themes, images, and so on.
If an attacker has control over the speciﬁcation of these
ﬁle locations, then he may be able to read or remove ﬁles
with sensitive data or mount a denial-of-service attack
by trying to write to read-only ﬁles. Using Java secu-
rity policies allows the developer to restrict access to the
ﬁle system (similar to using chroot jail in Unix). How-
ever, missing or incorrect policy conﬁguration still leaves
room for errors. When used carelessly, IO operations in
Java may lead to path-traversal attacks.
2.3.5 Command Injection
Command injection involves passing shell commands
into the application for execution. This attack technique
enables a hacker to attack the server using access rights
of the application. While relatively uncommon in Web
applications, especially those written in Java, this attack
technique is still possible when applications carelessly
use functions that execute shell commands or load dy-
namic libraries.
3 Static Analysis
In this section we present a static analysis that ad-
dresses the tainted object propagation problem described
in Section 2.
3.1 Tainted Object Propagation
We start by deﬁning the terminology that was infor-
mally introduced in Example 1. We deﬁne an access path
as a sequence of ﬁeld accesses, array index operations, or
method calls separated by dots. For instance, the result
of applying access path f.g to variable v is v.f.g. We
denote the empty access path by ; array indexing opera-
tions are indicated by [].
A tainted object propagation problem consists of a set
of source descriptors, sink descriptors, and derivation
descriptors:
• Source descriptors of the form hm, n, pi specify
ways in which user-provided data can enter the pro-
gram. They consist of a source method m, parame-
ter number n and an access path p to be applied to
USENIX Association
14th USENIX Security Symposium
275
• Derivation
argument n to obtain the user-provided input. We
use argument number -1 to denote the return result
of a method call.
• Sink descriptors of the form hm, n, pi specify un-
safe ways in which data may be used in the program.
They consist of a sink method m, argument number
n, and an access path p applied to that argument.
form
hm, ns, ps, nd, pdi
propa-
gates between objects in the program. They consist
of a derivation method m, a source object given
by argument number ns and access path ps, and a
destination object given by argument number nd
and access path pd. This derivation descriptor spec-
iﬁes that at a call to method m, the object obtained
by applying pd to argument nd is derived from the
object obtained by applying ps to argument ns.
of
the
how data
descriptors
specify
In the absence of derived objects, to detect potential vul-
nerabilities we only need to know if a source object is
used at a sink. Derivation descriptors are introduced to
handle the semantics of strings in Java. Because Strings
are immutable Java objects, string manipulation routines
such as concatenation create brand new String objects,
whose contents are based on the original String objects.
Derivation descriptors are used to specify the behavior of
string manipulation routines, so that taint can be explic-
itly passed among the String objects.
Most Java programs use built-in String libraries and
can share the same set of derivation descriptors as a
result. However, some Web applications use multiple
String encodings such as Unicode, UTF-8, and URL
encoding. If encoding and decoding routines propagate
taint and are implemented using native method calls or
character-level string manipulation, they also need to
be speciﬁed as derivation descriptors. Sanitization rou-
tines that validate input are often implemented using
character-level string manipulation. Since taint does not
propagate through such routines, they should not be in-
cluded in the list of derivation descriptors.
It is possible to obviate the need for manual speciﬁca-
tion with a static analysis that determines the relationship
between strings passed into and returned by low-level
string manipulation routines. However, such an analy-
sis must be performed not just on the Java bytecode but
on all the relevant native methods as well.
Example 3. We can formulate the problem of detecting
parameter tampering attacks that result in a SQL injec-
tion as follows: the source descriptor for obtaining pa-
rameters from an HTTP request is:
hHttpServletRequest.getParameter(String),−1, i
The sink descriptor for SQL query execution is:
hConnection.executeQuery(String), 1, i.
To allow the use of string concatenation in the construc-
tion of query strings, we use derivation descriptors:
hStringBuffer.append(String), 1, ,−1, i, and
hStringBuffer.toString(),
0, ,−1, i
Due to space limitations, we show only a few descrip-
tors here; more information about the descriptors in our
experiments is available in our technical report [34]. 2
Below we formally deﬁne a security violation:
Deﬁnition 3.1 A source object for a source descriptor
hm, n, pi is an object obtained by applying access path p
to argument n of a call to m.
Deﬁnition 3.2 A sink object for a sink descriptor
hm, n, pi is an object obtained by applying access path
p to argument n of a call to method m.
Deﬁnition 3.3 Object o2 is derived from object o1,
written derived(o1, o2), based on a derivation descrip-
tor hm, ns, ps, nd, pdi, if o1 is obtained by applying ps
to argument ns and o2 is obtained by applying pd to ar-
gument nd at a call to method m.
Deﬁnition 3.4 An object is tainted if it is obtained by
applying relation derived to a source object zero or more
times.
Deﬁnition 3.5 A security violation occurs if a sink ob-
ject is tainted. A security violation consists of a sequence
of objects o1 . . . ok such that o1 is a source object and ok
is a sink object and each object is derived from the pre-
vious one:
∀
0≤i<k
i : derived(oi, oi+1).
We refer to object pair ho1, oki as a source-sink pair.
3.2 Speciﬁcations Completeness
The problem of obtaining a complete speciﬁcation for
a tainted object propagation problem is an important one.
If a speciﬁcation is incomplete, important errors will be
missed even if we use a sound analysis that ﬁnds all vul-
nerabilities matching a speciﬁcation. To come up with a
list of source and sink descriptors for vulnerabilities in
our experiments, we used the documentation of the rele-
vant J2EE APIs.
Since it is relatively easy to miss relevant descriptors
in the speciﬁcation, we used several techniques to make
our problem speciﬁcation more complete. For example,
to ﬁnd some of the missing source methods, we instru-
mented the applications to ﬁnd places where application
code is called by the application server.
We also used a static analysis to identify tainted ob-
jects that have no other objects derived from them, and
examined methods into which these objects are passed.
In our experience, some of these methods turned out to
be obscure derivation and sink methods missing from our
initial speciﬁcation, which we subsequently added.
276
14th USENIX Security Symposium
USENIX Association
3.3 Static Analysis
Our approach is to use a sound static analysis to ﬁnd
all potential violations matching a vulnerability speciﬁ-
cation given by its source, sink, and derivation descrip-
tors. To ﬁnd security violations statically, it is necessary
to know what objects these descriptors may refer to, a
general problem known as pointer or points-to analysis.
3.3.1 Role of Pointer Information
To illustrate the need for points-to information, we
consider the task of auditing a piece of Java code for SQL
injections caused by parameter tampering, as described
in Example 1.
Example 4.
In the code below, string param is
tainted because it is returned from a source method
getParameter. So is buf1, because it is derived from
param in the call to append on line 6. Finally, string
query is passed to sink method executeQuery.
String param = req.getParameter("user");
1
2
3
4
5
6
7
8
StringBuffer buf1;
StringBuffer buf2;
...
buf1.append(param);
String query = buf2.toString();
con.executeQuery(query);
Unless we know that variables buf1 and buf2 may never
refer to the same object, we would have to conservatively
assume that they may. Since buf1 is tainted, variable
query may also refer to a tainted object. Thus a conser-
vative tool that lacks additional information about point-
ers will ﬂag the call to executeQuery on line 8 as po-
tentially unsafe. 2
An unbounded number of objects may be allocated by
the program at run time, so, to compute a ﬁnite answer,
the pointer analysis statically approximates dynamic pro-
gram objects with a ﬁnite set of static object “names”. A
common approximation approach is to name an object by
its allocation site, which is the line of code that allocates
the object.
3.3.2 Finding Violations Statically
Points-to information enables us to ﬁnd security viola-
tions statically. Points-to analysis results are represented
as the relation pointsto(v, h), where v is a program vari-
able and h is an allocation site in the program.
Deﬁnition 3.6 A static security violation is a sequence
of heap allocation sites h1 . . . hk such that
1. There
exists
a
v1
such
variable
that
pointsto(v1, h1), where v1 corresponds to ac-
cess path p applied to argument n of a call to
method m for a source descriptor hm, n, pi.
such
that
pointsto(vk, hk), where vk corresponds to ap-
a
variable
vk
2. There
exists
plying access path p to argument n in a call to
method m for a sink descriptor hm, n, pi.
3. There exist variables v1, . . . , vk such that
∀
1≤i<k
: pointsto(vi, hi) ∧ pointsto(vi+1, hi+1),
where variable vi corresponds to applying ps to ar-
gument ns and vi+1 corresponds applying pd to ar-
gument nd in a call to method m for a derivation
descriptor hm, ns, ps, nd, pdi.
Our static analysis is based on a context-sensitive Java
points-to analysis developed by Whaley and Lam [55].
Their algorithm uses binary decision diagrams (BDDs)
to efﬁciently represent and manipulate points-to results
for exponentially many contexts in a program. They have
developed a tool called bddbddb (BDD-Based Deductive
DataBase) that automatically translates program analy-
ses expressed in terms of Datalog [50] (a language used
in deductive databases) into highly efﬁcient BDD-based
implementations. The results of their points-to analysis
can also be accessed easily using Datalog queries. Notice
that in the absence of derived objects, ﬁnding security vi-
olations can be easily done with pointer analysis alone,
because pointer analysis tracks objects as they are passed
into or returned from methods.
However, it is relatively easy to implement the tainted
object propagation analysis using bddbddb. Constraints
of a speciﬁcation as given by Deﬁnition 3.6 can be trans-
lated into Datalog queries straightforwardly. Facts such
as “variable v is parameter n of a call to method m” map
directly into Datalog relations representing the internal
representation of the Java program. The points-to results
used by the constraints are also readily available as Dat-
alog relations after pointer analysis has been run.
Because Java supports dynamic loading and classes
can be dynamically generated on the ﬂy and called reﬂec-
tively, we can ﬁnd vulnerabilities only in the code avail-
able to the static analysis. For reﬂective calls, we use a
simple analysis that handles common uses of reﬂection
to increase the size of the analyzed call graph [34].
3.3.3 Role of Pointer Analysis Precision
Pointer analysis has been the subject of much compiler
research over the last two decades. Because determining
what heap objects a given program variable may point to
during program execution is undecidable, sound analy-
ses compute conservative approximations of the solution.
Previous points-to approaches typically trade scalability
for precision, ranging from highly scalable but imprecise
techniques [48] to precise approaches that have not been
shown to scale [43].
In the absence of precise information about pointers, a
sound tool would conclude that many objects are tainted
and hence report many false positives. Therefore, many
USENIX Association
14th USENIX Security Symposium
277
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
class DataSource {
String url;
DataSource(String url) {
this.url = url;
}
String getUrl(){
return this.url;
}
...
}
String passedUrl = request.getParameter("...");
DataSource ds1
String localUrl
DataSource ds2
= new DataSource(passedUrl);
= "http://localhost/";
= new DataSource(localUrl);
String s1
String s2
= ds1.getUrl();
= ds2.getUrl();
Figure 2: Example showing the importance of context sensitivity.
practical tools use an unsound approach to pointers, as-
suming that pointers are unaliased unless proven other-
wise [6, 20]. Such an approach, however, may miss im-
portant vulnerabilities.
Having precise points-to information can signiﬁcantly
reduce the number of false positives. Context sensitivity
refers to the ability of an analysis to keep information
from different invocation contexts of a method separate
and is known to be an important feature contributing to
precision. The effect of context sensitivity on analysis
precision is illustrated by the example below.
Example 5. Consider the code snippet in Figure 2.
The class DataSource acts as a wrapper for a URL
string. The code creates two DataSource objects and
calls getUrl on both objects. A context-insensitive an-
alysis would merge information for calls of getUrl on
lines 16 and 17. The reference this, which is consid-
ered to be argument 0 of the call, points to the object
on line 12 and 14, so this.url points to either the ob-
ject returned on line 11 or "http : //localhost/" on
line 13. As a result, both s1 and s2 will be considered
tainted if we rely on context-insensitive points-to results.
With a context-sensitive analysis, however, only s2 will
be considered tainted. 2
While many points-to analysis approaches exist, until
recently, we did not have a scalable analysis that gives
a conservative yet precise answer. The context-sensitive,
inclusion-based points-to analysis by Whaley and Lam is
both precise and scalable [55]. It achieves scalability by
using BDDs to exploit the similarities across the expo-
nentially many calling contexts.
A call graph is a static approximation of what methods
may be invoked at all method calls in the program. While
there are exponentially many acyclic call paths through
the call graph of a program, the compression achieved by
BDDs makes it possible to efﬁciently represent as many
as 1014 contexts. The framework we propose in this pa-
per is the ﬁrst practical static analysis tool for security to
leverage the BDD-based approach. The use of BDDs has
query main()
returns
matches {
object Object sourceObj, sinkObj;
sourceObj := source();
sinkObj
sinkObj
:= derived*(sourceObj);
:= sink();
}
Figure 3: Main query for ﬁnding source-sink pairs.
allowed us to scale our framework to programs consist-
ing of almost 1,000 classes.
3.4 Specifying Taint Problems in PQL
While a useful formalism, source, sink, and deriva-
tion descriptors as deﬁned in Section 3.1 are not a user-
friendly way to describe security vulnerabilities. Data-
log queries, while giving the user complete control, ex-
pose too much of the program’s internal representation
to be practical. Instead, we use PQL, a program query
language. PQL serves as syntactic sugar for Datalog
queries, allowing users to express vulnerability patterns
in a familiar Java-like syntax; translation of tainted object