            case 4: {
                int32_t val;
                memcpy(&val, &run->dynfile->data[off], sizeof(val));
                if (util_rnd64() & 0x1) {
                    val += delta;
                } else {
                    /* Foreign endianess */
                    val = __builtin_bswap32(val);
                    val += delta;
                    val = __builtin_bswap32(val);
                }
                mangle_Overwrite(run, off, (uint8_t*)&val, varLen, printable);
                break;
            }
            case 8: {
                int64_t val;
                memcpy(&val, &run->dynfile->data[off], sizeof(val));
                if (util_rnd64() & 0x1) {
                    val += delta;
                } else {
                    /* Foreign endianess */
                    val = __builtin_bswap64(val);
                    val += delta;
                    val = __builtin_bswap64(val);
                }
                mangle_Overwrite(run, off, (uint8_t*)&val, varLen, printable);
                break;
            }
            default: {
                LOG_F("Unknown variable length size: %zu", varLen);
            }
        }
    }
###  mangle_MemSet
取随机位置、随机大小，若为可打印字符用随机生成的可打印字符填充，否则用`UINT8_MAX` 填充。
    static void mangle_MemSet(run_t* run, bool printable) {
        size_t off = mangle_getOffSet(run);
        size_t len = mangle_getLen(run->dynfile->size - off);
        int    val = printable ? (int)util_rndPrintable() : (int)util_rndGet(0, UINT8_MAX);
        memset(&run->dynfile->data[off], val, len);
    }
###  mangle_MemSwap
新策略，从文件随机两处取随机大小按这两块长度的最小值进行交换。
    static void mangle_MemSwap(run_t* run, bool printable HF_ATTR_UNUSED) {
        size_t off1    = mangle_getOffSet(run);
        size_t maxlen1 = run->dynfile->size - off1;
        size_t off2    = mangle_getOffSet(run);
        size_t maxlen2 = run->dynfile->size - off2;
        size_t   len    = mangle_getLen(HF_MIN(maxlen1, maxlen2));
        uint8_t* tmpbuf = (uint8_t*)util_Malloc(len);
        defer {
            free(tmpbuf);
        };
        memcpy(tmpbuf, &run->dynfile->data[off1], len);
        memmove(&run->dynfile->data[off1], &run->dynfile->data[off2], len);
        memcpy(&run->dynfile->data[off2], tmpbuf, len);
    }
###  mangle_MemCopy
新策略，随机位置取随机大小内容插入/覆盖随机位置。
    static void mangle_MemCopy(run_t* run, bool printable HF_ATTR_UNUSED) {
        size_t off = mangle_getOffSet(run);
        size_t len = mangle_getLen(run->dynfile->size - off);
        /* Use a temp buf, as Insert/Inflate can change source bytes */
        uint8_t* tmpbuf = (uint8_t*)util_Malloc(len);
        defer {
            free(tmpbuf);
        };
        memcpy(tmpbuf, &run->dynfile->data[off], len);
        mangle_UseValue(run, tmpbuf, len, printable);
    }
    static inline void mangle_UseValue(run_t* run, const uint8_t* val, size_t len, bool printable) {
        if (util_rnd64() % 2) {
            mangle_Insert(run, mangle_getOffSetPlus1(run), val, len, printable);
        } else {
            mangle_Overwrite(run, mangle_getOffSet(run), val, len, printable);
        }
    }
###  mangle_Bytes
随机位置插入/覆盖1~2字节数据。
    static void mangle_Bytes(run_t* run, bool printable) {
        uint16_t buf;
        if (printable) {
            util_rndBufPrintable((uint8_t*)&buf, sizeof(buf));
        } else {
            buf = util_rnd64();
        }
        /* Overwrite with random 1-2-byte values */
        size_t toCopy = util_rndGet(1, 2);
        mangle_UseValue(run, (const uint8_t*)&buf, toCopy, printable);
    }
###  mangle_ASCIINum
随机位置插入/覆盖 2~8 字节数据。
    static void mangle_ASCIINum(run_t* run, bool printable) {
        size_t len = util_rndGet(2, 8);
        char buf[20];
        snprintf(buf, sizeof(buf), "%-19" PRId64, (int64_t)util_rnd64());
        mangle_UseValue(run, (const uint8_t*)buf, len, printable);
    }
###  mangle_ASCIINumChange
新策略，从随机位置起寻找数字，若未找到则执行`mangle_Bytes`操作，找到则随机对该数字进行加/减/乘/除/取反/替换随机数字。
    static void mangle_ASCIINumChange(run_t* run, bool printable) {
        size_t off = mangle_getOffSet(run);
        /* Find a digit */
        for (; off dynfile->size; off++) {
            if (isdigit(run->dynfile->data[off])) {
                break;
            }
        }
        if (off == run->dynfile->size) {
            mangle_Bytes(run, printable);
            return;
        }
        size_t len        = HF_MIN(20, run->dynfile->size - off);
        char   numbuf[21] = {};
        strncpy(numbuf, (const char*)&run->dynfile->data[off], len);
        uint64_t val = (uint64_t)strtoull(numbuf, NULL, 10);
        switch (util_rndGet(0, 5)) {
            case 0:
                val += util_rndGet(1, 256);
                break;
            case 1:
                val -= util_rndGet(1, 256);
                break;
            case 2:
                val *= util_rndGet(1, 256);
                break;
            case 3:
                val /= util_rndGet(1, 256);
                break;
            case 4:
                val = ~(val);
                break;
            case 5:
                val = util_rnd64();
                break;
            default:
                LOG_F("Invalid choice");
        };
        len = HF_MIN((size_t)snprintf(numbuf, sizeof(numbuf), "%" PRIu64, val), len);
        mangle_Overwrite(run, off, (const uint8_t*)numbuf, len, printable);
    }
###  mangle_ByteRepeatOverwrite
新策略，在随机位置选取随机不大于文件剩余空间大小的长度，覆盖为该随机位置的值。
    static void mangle_ByteRepeatOverwrite(run_t* run, bool printable) {
        size_t off     = mangle_getOffSet(run);
        size_t destOff = off + 1;
        size_t maxSz   = run->dynfile->size - destOff;
        /* No space to repeat */
        if (!maxSz) {
            mangle_Bytes(run, printable);
            return;
        }
        size_t len = mangle_getLen(maxSz);
        memset(&run->dynfile->data[destOff], run->dynfile->data[off], len);
    }
###  mangle_ByteRepeatInsert
新策略，在随机位置选取随机不大于文件剩余空间大小的长度，插入该长度大小buffer并用之前选择的随机位置的值填充。
    static void mangle_ByteRepeatInsert(run_t* run, bool printable) {
        size_t off     = mangle_getOffSet(run);
        size_t destOff = off + 1;
        size_t maxSz   = run->dynfile->size - destOff;
        /* No space to repeat */
        if (!maxSz) {
            mangle_Bytes(run, printable);
            return;
        }
        size_t len = mangle_getLen(maxSz);
        len        = mangle_Inflate(run, destOff, len, printable);
        memset(&run->dynfile->data[destOff], run->dynfile->data[off], len);
    }
###  mangle_Magic
取各种边界值进行覆写。
    static void mangle_Magic(run_t* run, bool printable) {
        uint64_t choice = util_rndGet(0, ARRAYSIZE(mangleMagicVals) - 1);
        mangle_UseValue(run, mangleMagicVals[choice].val, mangleMagicVals[choice].size, printable);
    }
###  mangle_StaticDict
新策略，随机从读入的字典中（`--dict`参数）选择一个magic，插入或替换。
    static void mangle_StaticDict(run_t* run, bool printable) {
        if (run->global->mutate.dictionaryCnt == 0) {
            mangle_Bytes(run, printable);
            return;
        }
        uint64_t choice = util_rndGet(0, run->global->mutate.dictionaryCnt - 1);
        mangle_UseValue(run, run->global->mutate.dictionary[choice].val,
            run->global->mutate.dictionary[choice].len, printable);
    }
###  mangle_ConstFeedbackDict
新策略，从cmpFeedbackMap中随机选取常量值，插入或覆盖随机位置。
    static void mangle_ConstFeedbackDict(run_t* run, bool printable) {
        size_t         len;
        const uint8_t* val = mangle_FeedbackDict(run, &len);
        if (val == NULL) {
            mangle_Bytes(run, printable);
            return;
        }
        mangle_UseValue(run, val, len, printable);
    }
    static inline const uint8_t* mangle_FeedbackDict(run_t* run, size_t* len) {
        if (!run->global->feedback.cmpFeedback) {
            return NULL;
        }
        cmpfeedback_t* cmpf = run->global->feedback.cmpFeedbackMap;
        uint32_t       cnt  = ATOMIC_GET(cmpf->cnt);
        if (cnt == 0) {
            return NULL;
        }
        if (cnt > ARRAYSIZE(cmpf->valArr)) {
            cnt = ARRAYSIZE(cmpf->valArr);
        }
        uint32_t choice = util_rndGet(0, cnt - 1);
        //从cmpFeedbackMap保存的常量值中随机选取一个 
        *len            = (size_t)ATOMIC_GET(cmpf->valArr[choice].len);
        if (*len == 0) {
            return NULL;
        }
        return cmpf->valArr[choice].val;
    }
###  mangle_RandomOverwrite
新策略，随机位置选取随机长度进行覆盖。
    static void mangle_RandomOverwrite(run_t* run, bool printable) {
        size_t off = mangle_getOffSet(run);
        size_t len = mangle_getLen(run->dynfile->size - off);
        if (printable) {
            util_rndBufPrintable(&run->dynfile->data[off], len);
        } else {
            util_rndBuf(&run->dynfile->data[off], len);
        }
    }
###  mangle_RandomInsert
新策略，随机位置选取随机长度进行插入。
    static void mangle_RandomInsert(run_t* run, bool printable) {
        size_t off = mangle_getOffSet(run);
        size_t len = mangle_getLen(run->dynfile->size - off);
        len = mangle_Inflate(run, off, len, printable);
        if (printable) {
            util_rndBufPrintable(&run->dynfile->data[off], len);
        } else {
            util_rndBuf(&run->dynfile->data[off], len);
        }
    }
###  mangle_Splice
新策略，从输入文件中截取随机大小，插入/覆盖到原文件。
    static void mangle_Splice(run_t* run, bool printable) {
        const uint8_t* buf;
        size_t         sz = input_getRandomInputAsBuf(run, &buf);
        if (!sz) {
            mangle_Bytes(run, printable);
            return;
        }
        size_t remoteOff = mangle_getLen(sz) - 1;
        size_t len       = mangle_getLen(sz - remoteOff);
        mangle_UseValue(run, &buf[remoteOff], len, printable);
    }
## 总结
可见 honggfuzz 此次新增加的一些变异策略可以对 fuzz 过程中通过 magic number
和一些判断校验起到积极的作用。对于fuzzbench的测试结果[1] [7] 笔者认为，首先 fuzzbench
项目目前正在完善，两次测试中间会对一些fuzzer的参数进行调整，就会出现两次测试间同一fuzzer对同一benchmark
测试效果截然不同，比如3月11日的测试[7] aflplusplus 一类的fuzzer是默认开启 laf 和 instrim 而 4月21日的测试[1]
则是将这两个参数移除了；其次，fuzzbench 只是收集运行24小时内的覆盖率信息作为评估标准，虽然 fuzzbench 也在讨论新的评估方式 [8]
,笔者认为评估维度还是不够丰富。因此 fuzzbench 目前的结果还是仅供参考，与afl、afl++ 众多扩展相比 honggfuzz
还有很多亟待提升的空间。
## 参考
[1]   
[2]   
[3]   
[4]   
[5]   
[6]   
[7]   
[8] 