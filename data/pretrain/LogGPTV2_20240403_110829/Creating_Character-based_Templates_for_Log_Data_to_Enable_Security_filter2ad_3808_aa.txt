title:Creating Character-based Templates for Log Data to Enable Security
Event Classification
author:Markus Wurzenberger and
Georg H&quot;old and
Max Landauer and
Florian Skopik and
Wolfgang Kastner
Creating Character-based Templates for Log Data to Enable
Security Event Classification
Markus Wurzenberger, Georg Höld, Max
Wolfgang Kastner
PI:EMAIL
Vienna University of Technology
Vienna, Austria
Landauer, Florian Skopik
PI:EMAIL
AIT - Austrian Institute of Technology
Vienna, Austria
ABSTRACT
Log data analysis is an essential task when it comes to understand-
ing a computer’s or a network’s system behavior, and enables se-
curity analysis, fault diagnosis, performance analysis, or intrusion
detection. An established technique for log analysis is log line clus-
tering, which allows to group similar events and to detect outliers,
malicious clusters or changes in system behavior. However, log line
clusters usually lack meaningful descriptions that are required to
understand the information provided by log lines within a cluster.
Template generators allow to produce such descriptions in form
of patterns that match all log lines within a cluster and therefore
describe the common features of the lines. Current approaches only
allow generation of token-based (e.g., space-separated words) tem-
plates, which are often inaccurate, because they do not recognize
words that can be spelled differently as similar and require further
information on the structure and syntax of the data, such as pre-
defined delimiters. Consequently, novel character-based template
generators are required that provide robust templates for any type
of computer log data, which can be applied in security information
and event management (SIEM) solutions, for continuous auditing,
quality inspection and control. In this paper, we propose a novel
approach for computing character-based templates, which com-
bines comparison-based methods and heuristics. To achieve this
goal, we solve the problem of efficiently calculating a multi-line
alignment for a group of log lines and compute an accurate approx-
imation of the optimal character-based template, while reducing
the runtime from O(nm) to O(mn
2). We demonstrate the accuracy
of our approach in a detailed evaluation, applying a newly intro-
duced measure for accuracy, the Sim-Score, which can be computed
independently from a ground truth, and the established F-Score.
Furthermore, we assess the robustness of the algorithm and the in-
fluence of different log data properties on the quality of the resulting
templates.
CCS CONCEPTS
• Security and privacy → Intrusion detection systems; Sys-
tems security; Network security; • Computing methodologies →
Machine learning;
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6750-9/20/10.
https://doi.org/10.1145/3320269.3384722
KEYWORDS
template generation; character-based templates; log analysis; multi-
line alignment
ACM Reference Format:
Markus Wurzenberger, Georg Höld, Max Landauer, Florian Skopik and Wolf-
gang Kastner. 2020. Creating Character-based Templates for Log Data
to Enable Security Event Classification. In Proceedings of the 15th ACM
Asia Conference on Computer and Communications Security (ASIA CCS ’20),
October 5–9, 2020, Taipei, Taiwan. ACM, New York, NY, USA, 12 pages.
https://doi.org/10.1145/3320269.3384722
1 INTRODUCTION
Grouping log lines using clustering and classification algorithms is
an established method to analyze a computer networks’ log data.
Clustering is also the basis of further analysis methods, such as
outlier detection [12] and time series analysis [6], which are often
applied in cyber security and threat detection. These methods allow
to detect suspicious anomalous events and changes in network
behavior which are consequence of malicious misuse caused by
attackers and malware or erratic behavior initiated by misconfigu-
ration and faulty usage. Once log data are clustered, it is possible
to statistically describe these clusters’ properties, such as size, or
diameter. However, most clustering algorithms provide no or only
inaccurate and insufficient information on the content of a log
line cluster. Thus, template generators are required that allow to
generate meaningful cluster descriptions. Additionally, templates
support the process of generating log parsers [2]. Numerous secu-
rity applications benefit from templates and template generators,
including security information and event management (SIEM) so-
lutions, intrusion detection systems (IDS), parser and signature
generators. Furthermore, templates can be applied for log classifi-
cation in general, for log reduction through filtering, and for event
counting.
A template is basically a string that consists of substrings which
occur in each log line of a cluster in a similar location. Those sub-
strings are referred to as static parts of the log lines of the cluster.
They are separated by wild cards, which represent variable parts
of the log lines, such as usernames, IP addresses, and identifiers
(ID). Furthermore, a template has to match all log lines of the cor-
responding cluster.
The unsolved problem of generating a sequence alignment for
more than two log lines, i.e., generating a multi-line alignment, is
one of the main reasons why currently existing template genera-
tors follow token-based approaches and not character-based ones.
In this context, tokens are substrings of a string, separated by a
predefined delimiter, e.g., space or comma. Token-based template
generators first split log lines into tokens. Afterwards, they gener-
ate a template, where tokens that represent static parts of the log
lines, i.e., occur in all log lines in the same location, remain part
of the template, and all other tokens are replaced by wild cards.
The biggest advantage of token-based template generators is their
high performance with respect to runtime. However, this proce-
dure leads to some significant drawbacks. Token-based template
generators prevent that tokens corresponding to substrings with
high similarity, which only differ in a few symbols, become part of
a template. Thus, they consider words and terms that can be spelled
differently, such as php-admin, PHP-Admin and phpadmin, or when
SQL queries are used, username and u.username, as completely
different. Furthermore, those approaches require a predefined list of
delimiters, which strongly depends on the present log data. More-
over, due to the token-based approach, larger parts of log lines are
covered by wild cards, since tokens are considered entirely different,
even if they only vary in a single symbol. Additionally, it is often
not clear how many tokens a single wild card represents. Most of
the times, a single wild card replaces a different number of tokens,
depending on the log lines that match the template.
In contrast to token-based template generators, character-based
approaches do not rely on predefined building blocks in form of
tokens. These approaches recognize static and variable parts of log
lines independently from predefined delimiters. Figure 1 provides
an example for the two different types of templates (assuming
spaces as delimiters for the token-based approach) for a certain
cluster.
In this paper, we propose an approach for generating character-
based templates to overcome the disadvantages of token-based
approaches. The main challenge to achieve this goal is to calculate
a multi-line sequence alignment [9], i.e., a sequence alignment for
more than two lines. A sequence alignment arranges two char-
acter sequences by aligning their identical or similar parts and
recognizing optional and variable characters. There exist many
efficient algorithms and string metrics to achieve this for two char-
acter sequences [12]. Furthermore, there are algorithms for genetic
or biologic sequences to calculate pair-wise and multi-line align-
ments, which however require knowledge about the evolution of
nucleotides and are therefore not suitable for log data [9]. Algo-
rithms to align multiple sequences of any characters with no evolu-
tionary context are still missing. The main reason is the difficulty
to overcome the high computational complexity of this problem,
which is at least O(nm), where n is the length of the shortest log
line and m is the number of lines in a cluster.
Hence, we propose a character-based cluster template generator
that incrementally processes the lines of a log line cluster and
reduces the computational complextiy O(nm) to O(mn
2). The main
contributions of the paper are:
(i) Four algorithms to compute multi-line sequence alignments
for any strings.
(ii) An incremental approach to efficiently generate character-
based templates that provide a more detailed representation
than token-based templates.
(iii) A universally applicable template generator for log data inde-
pendent from delimiters.
(iv) A template generator that overcomes the problem of too generic
or over-fitting templates.
(v) Evaluation of the accuracy of the proposed algorithms, as well
as qualitative and quantitative comparison to token-based
approaches carried out on real data.
The remainder structures as follows: Section 2 summarizes back-
ground and related work. The concept of the approach is introduced
in Sec. 3 and Sec. 4 describes the different algorithms for gener-
ating character-based templates in detail. Finally, Sec. 5 evaluates
and compares the algorithms, and Sec. 6 concludes the paper and
describes future work.
2 BACKGROUND AND RELATED WORK
Currently, most template generators follow token-based approaches.
Many of them build on clustering [5]. For example, SLCT [10]
follows a density-based clustering approach. Thereby, frequent
words on certain positions in the log lines are considered as static
and infrequent ones as variable. IPLoM [8], on the other hand,
implements partitioning. Hence, log lines are split at appropriate
token positions and sorted into subgroups iteratively. Furthermore,
many log parser generators provide token-based templates or build
on template generators [2]. Two examples for tree-based approaches
are Drain [3] and AECID-PG [11], which depict log data as graph-
theoretical tree, where each node represents a token with an either
static or variable pattern. Following the branches of a parser tree
allows to obtain log templates.
The foundations for character-based templates are string metrics
that allow to compare two strings character-wise. Some well-known
examples for such string metrics are the Levenshtein distance, the
Needleman-Wunsch algorithm, the Smith-Waterman algorithm, and
different versions of the Jaro distance [1]. In this paper, we focus
on the Levenshtein distance, which counts the edit operations that
are required to transform a string into another one. By reverting
this procedure and leveraging the computed score-matrix, it is
possible to calculate an alignment. Other algorithms, such as the
Needleman-Wunsch and Smith-Waterman, provide an alignment
at once, but suffer from a higher computational complexity due to
a more complex scoring function. However, all these algorithms
are only able to provide pairwise sequence alignments.
In the area of bioinformatics, there exist several highly efficient
algorithms, such as MAFFT, M-Coffee and PROMALS, that allow
to compute so-called multiple sequence alignments [9]. These al-
gorithms mostly base on previously mentioned methods for calcu-
lating pairwise sequence alignments. Due to the fact that they use
scoring systems and heuristics that make use of evolutionary rela-
tionships between amino acids, they can only be applied to strings
that represent biological sequences such as DNA and RNA, and not
to any other type of string [9]. Therefore, efficiently generating a
template for a group of similar strings remains an unsolved problem.
Furthermore, it is not expedient to calculate the optimal alignment
for a group of strings, because it would be computationally too
expensive. Hence, it is only feasible to approximate the optimal
template.
Cluster:
database-1.server.d3.local mysql-normal ORDER BY status-system
database-0.server.d4.local mysql-normal GROUP BY status-network
database-1.server.d3.local mysql-normal GROUP BY status-system
database-0.server.d4.local mysql-normal ORDER BY status-network
Template token-based:
[*] mysql-normal [*] BY [*]
Template character-based:
database-[*].server.d[*].local mysql-normal [*]R[*] BY status-[*]t[*]
Figure 1: Example of templates for a cluster of SQL logs.
3 CONCEPT
In the following, we describe a novel concept that allows to effi-
ciently generate character-based templates for groups of similar
log lines, e.g., pre-clustered log lines. The goal of computing a tem-
plate for a group of log lines is to recognize static and variable
parts occurring in all of the lines. This allows to determine shared
properties and enables the design of meaningful log line cluster
descriptions in form of templates that can be used for further anal-
ysis. Since the aim is to recognize common properties, templates
are generated for log lines that reach a certain similarity, because
otherwise a template would not provide any benefit.
In the remainder, the term template always refers to character-
based templates. Furthermore, we define the template of a log line
cluster as an ordered list of substrings that occur in the same or-
der in each log line of the cluster. In case of the given example
in Fig. 1, the template would be [database-, .server.d, .local
mysql-normal, R, BY status-, t]. The example shows that for the
words ORDER and GROUP only the character R remains part of the
template. While there exist several solutions to determine a tem-
plate for two log lines, it is not trivial to efficiently compute the
optimal template for a group of log lines. For two log lines, the
template can be generated by simply calculating the pairwise string
alignment applying, for example, the Levenshtein (LV) distance or
the Needleman-Wunsch algorithm. On the contrary, generating a
template for a group of log lines, a so-called multi-line alignment,
is complicated. The computational complexity to calculate the opti-
mal template for a group of log lines, applying comparison-based
algorithms that omit any heuristics, cannot be lower than O(nm),
where n is the length of the shortest log line within a cluster and m
is the number of lines in a cluster. The computational complexity
is that high, because each line of a cluster has to be compared with
each other line. Due to the large amount of log data, which tem-
plate generators might have to process, both n and m can be large,
which results in a long runtime. On the opposite, for token-based
template generators this is not such an issue, because n then refers
to the number of tokens within the log lines, which is much smaller
than the number of characters. Thus, the goal of the approach we
propose is to efficiently compute an approximation of the optimal
template for a group of log lines, where each log line of the cluster
has to be processed only once.
Figure 2: Template generation process flow.
The approach we propose significantly reduces the computa-
tional complexity of computing a character-based log cluster tem-
plate. Figure 2 illustrates the process flow for generating templates
for log line clusters. The algorithm processes log lines sequentially
and thus follows an incremental approach, which has to handle
each line only once. In each step, the algorithm adapts the tem-
plate. In the following, the term current template refers to these
temporary templates. Initially, the first line of a cluster defines
the current template for the cluster. Next, the algorithm calculates
the pairwise alignment between the initial template, i.e., the first
line of the cluster, and the second line of the cluster. Afterwards,
the algorithm compares the current template with each remaining
line in the cluster and adapts the template accordingly. In order to
efficiently accomplish this adaptation, we propose four different
procedures for this task and compare their advantages and disad-
vantages. The runtime of these algorithms mainly depends on the
applied distance. Our approach uses the LV-distance, because of
its relatively low computational complexity of O(n
2), compared to
other string metrics that can be applied for calculating pairwise
alignments. Hence, it is possible to process a cluster in less than
O(mn
2) runtime, where n is the length of the longest line, which
takes the most time to be processed and m is the number of lines in
the cluster. Furthermore, it is possible to modify these algorithms by
replacing the LV-distance with any other string metric that allows
to calculate an alignment. Since the input data is pre-clustered, the
resulting template has a high similarity to the optimal template,
as shown in the evaluation presented in Sec. 5 by calculating two
different metrics that measure the accuracy of the algorithms.
4 CLUSTER TEMPLATE GENERATOR
ALGORITHMS
This section introduces four different algorithms to generate chracter-
based templates for pre-clustered log data. The first two algorithms
follow quite different approaches, while the third one combines
the advantages of both and simultaneously mitigates their dis-
advantages. The fourth algorithm combines the token-based and
character-based approach. All proposed algorithms build on the
calculation of pairwise string alignments, which leverages string
metrics. In this paper, we focus on the Levenshtein-distance (LV-
distance). It is possible to replace the LV-distance by any other
distance, which allows to return the shared substrings of two com-
pared strings. We also experimented with the Needleman-Wunsch-
distance, but in comparison to the LV-distance the runtime is sig-
nificantly higher for an output of comparable quality.
The remaining section first describes the initial matching be-
tween the initial template, i.e., the first processed log line, which is
the one with the earliest timestamp, unless otherwise stated, and
the second line of a log cluster, which is the one with the second
earliest timestamp. This step is identical for all four algorithms.
Afterwards, we define the three purely character-based algorithms
merge, length and equalmerge, which enable matching a template
with a log line. Thus, they incrementally process all log lines of a log