create unlogged table tbl (  
  id serial4 primary key,  
  info text,  
  c1 int,  
  c2 float,  
  ts timestamp  
);  
```  
```  
vi t.sql  
insert into tbl (info,c1,c2,ts) values (md5(random()::text), random()*1000, random()*100, clock_timestamp());  
```  
开启10个连接, 执行`t.sql`共120秒.    
```  
pgbench -M prepared -n -r -P 1 -f ./t.sql -c 10 -j 10 -T 120  
```  
```  
transaction type: ./t.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 18336072  
latency average = 0.065 ms  
latency stddev = 0.105 ms  
initial connection time = 25.519 ms  
tps = 152823.214015 (without initial connection time)  
statement latencies in milliseconds:  
         0.065  insert into tbl (info,c1,c2,ts) values (md5(random()::text), random()*1000, random()*100, clock_timestamp());  
```  
4、使用 pgbench 内置的 tpcb模型, 自动创建表和数据.   
初始化1000万条tpcb数据.   
```  
pgbench -i -s 100 --unlogged-tables   
```  
测试tpcb读请求  
```  
pgbench -M prepared -n -r -P 1 -c 10 -j 10 -S -T 120  
transaction type:   
scaling factor: 100  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 19554665  
latency average = 0.061 ms  
latency stddev = 0.051 ms  
initial connection time = 15.302 ms  
tps = 162975.776467 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set aid random(1, 100000 * :scale)  
         0.061  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
```  
测试tpcb读写请求  
```  
pgbench -M prepared -n -r -P 1 -c 10 -j 10 -T 120  
transaction type:   
scaling factor: 100  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 2531643  
latency average = 0.474 ms  
latency stddev = 0.373 ms  
initial connection time = 18.930 ms  
tps = 21098.448090 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set aid random(1, 100000 * :scale)  
         0.000  \set bid random(1, 1 * :scale)  
         0.000  \set tid random(1, 10 * :scale)  
         0.000  \set delta random(-5000, 5000)  
         0.045  BEGIN;  
         0.095  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;  
         0.068  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
         0.069  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;  
         0.077  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;  
         0.061  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);  
         0.056  END;  
```  
5、其他留作业, 读者可以自己思考一下怎么生成?    
- tpcc  
- tpcds  
- tpch  
三、如何生成按需求分布的随机值  
https://www.postgresql.org/docs/16/pgbench.html  
1、pgbench 内置生成按不同的概率特征分布的随机值的函数.    
例如在电商业务、游戏业务中, 活跃用户可能占比只有20%, 极度活跃的更少, 如果有一表记录了每个用户的行为, 那么生成的数据可能是高斯分布的.    
```  
均匀分布  
random ( lb, ub ) → integer  
  Computes a uniformly-distributed random integer in [lb, ub].  
  random(1, 10) → an integer between 1 and 10  
指数分布  
random_exponential ( lb, ub, parameter ) → integer  
  Computes an exponentially-distributed random integer in [lb, ub], see below.  
  random_exponential(1, 10, 3.0) → an integer between 1 and 10  
高斯分布  
random_gaussian ( lb, ub, parameter ) → integer  
  Computes a Gaussian-distributed random integer in [lb, ub], see below.  
  random_gaussian(1, 10, 2.5) → an integer between 1 and 10  
Zipfian 分布  
random_zipfian ( lb, ub, parameter ) → integer  
  Computes a Zipfian-distributed random integer in [lb, ub], see below.  
  random_zipfian(1, 10, 1.5) → an integer between 1 and 10  
```  
例如  
```  
drop table if exists tbl_log;  
create unlogged table tbl_log (  
  uid int,  -- 用户id  
  info text,  -- 行为  
  ts timestamp   -- 时间  
);  
```  
```  
vi t.sql  
\set uid random_gaussian(1,1000,2.5)  
insert into tbl_log values (:uid, md5(random()::text), now());  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t.sql -c 10 -j 10 -T 120  
transaction type: ./t.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 21752866  
latency average = 0.055 ms  
latency stddev = 0.089 ms  
initial connection time = 23.170 ms  
tps = 181307.721398 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set uid random_gaussian(1,1000,2.5)  
         0.055  insert into tbl_log values (:uid, md5(random()::text), now());  
```  
```  
-- 查看分布情况, 产生的记录条数符合高斯分布  
select uid,count(*) from tbl_log group by uid order by 2 desc;  
 uid  | count   
------+-------  
  495 | 44221  
  505 | 44195  
  484 | 44128  
  478 | 44089  
  507 | 44074  
  499 | 44070  
  502 | 44069  
  506 | 44064  
  516 | 44057  
  513 | 44057  
  501 | 44019  
  ....  
   10 |  2205  
  989 |  2187  
  990 |  2185  
   11 |  2174  
    9 |  2154  
  991 |  2139  
    7 |  2131  
    6 |  2120  
  993 |  2109  
  992 |  2087  
    5 |  2084  
  994 |  2066  
    8 |  2053  
  995 |  2052  
  996 |  2042  
    3 |  2003  
    4 |  1995  
  997 |  1985  
    2 |  1984  
  999 |  1966  
    1 |  1919  
  998 |  1915  
 1000 |  1890  
(1000 rows)  
```  
2、pgbench 也可以将接收到的SQL结果作为变量, 从而执行有上下文交换的业务逻辑测试.    
```  
drop table if exists tbl;  
create unlogged table tbl (  
  uid int primary key,  
  info text,  
  ts timestamp  
);  
insert into tbl select generate_series(1,1000000), md5(random()::text), now();  
drop table if exists tbl_log;  
create unlogged table tbl_log (  
  uid int,  
  info_before text,  
  info_after text,  
  client_inet inet,  
  client_port int,  
  ts timestamp  
);  
```  
```  