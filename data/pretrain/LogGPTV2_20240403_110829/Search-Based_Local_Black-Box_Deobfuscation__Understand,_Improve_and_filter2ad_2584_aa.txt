# Search-Based Local Black-Box Deobfuscation: Understand, Improve and Mitigate (Poster)

**Authors:**
- Grégoire Menguy, Université Paris-Saclay, CEA, List, France
- Sébastien Bardin, Université Paris-Saclay, CEA, List, France
- Richard Bonichon, Nomadic Labs, France
- Cauim de Souza Lima, Université Paris-Saclay, CEA, List, France

## Abstract
This presentation is based on the paper “Search-based Local Black-Box Deobfuscation: Understand, Improve and Mitigate” by the same authors, which has been accepted for publication at ACM CCS 2021. Code obfuscation aims to protect intellectual property and other embedded secrets from being retrieved. Recent works leverage advances in artificial intelligence (AI) with the hope of developing black-box deobfuscators that are immune to standard (white-box) protection mechanisms. While promising, this new field of AI-based, and more specifically search-based black-box deobfuscation, is still in its early stages.

In this article, we deepen the understanding of search-based black-box deobfuscation in three key directions: understanding the current state-of-the-art, improving upon it, and designing dedicated protection mechanisms. Specifically, we define a novel generic framework for search-based black-box deobfuscation, encompassing prior work and highlighting key components. We are the first to point out that the search space underlying code deobfuscation is too unstable for simulation-based methods (e.g., Monte Carlo Tree Search used in prior work) and advocate the use of robust methods such as S-metaheuristics. We propose Xyntia, a new optimized search-based black-box deobfuscator that significantly outperforms prior work in terms of success rate, especially with small time budgets, while being completely immune to the most recent anti-analysis code obfuscation methods. Finally, we propose two novel protections against search-based black-box deobfuscation, allowing us to counter Xyntia's powerful attacks.

## CCS Concepts
- **Security and privacy:** Software reverse engineering
- **Computing methodologies:** Randomized search; Game tree search

## Keywords
Binary-level code analysis, deobfuscation, artificial intelligence

## ACM Reference Format
Grégoire Menguy, Sébastien Bardin, Richard Bonichon, and Cauim de Souza Lima. 2021. Search-Based Local Black-Box Deobfuscation: Understand, Improve and Mitigate (Poster). In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.3485337

## 1. Introduction
### Context
Software often contains valuable assets such as secret algorithms, business logic, or cryptographic keys, which attackers may try to retrieve. The Man-At-The-End-Attacks (MATE) scenario considers the case where software users themselves are adversarial and attempt to extract such information from the code. Code obfuscation aims to protect codes against such attacks by transforming a sensitive program \( P \) into a functionally equivalent program \( P' \) that is more difficult (e.g., in terms of time or cost) to understand or modify. Conversely, code deobfuscation aims to extract information from obfuscated codes.

White-box deobfuscation techniques, based on advanced symbolic program analysis, have proven extremely powerful against standard obfuscation schemes, especially in local attack scenarios where the attacker analyzes pre-identified parts of the code (e.g., trigger conditions). However, these techniques are inherently sensitive to the syntactic complexity of the code under analysis, leading to recent and effective countermeasures.

### Search-Based Black-Box Deobfuscation
Despite not being complete or sound, artificial intelligence (AI) techniques are flexible and often provide good enough solutions to hard problems in reasonable time. They have been recently applied to binary-level code deobfuscation. The pioneering work by Blazytko et al. [6] demonstrates how Monte Carlo Tree Search (MCTS) can be leveraged to solve local deobfuscation tasks by learning the semantics of pieces of protected codes in a black-box manner, theoretically immune to the syntactic complexity of these codes. Their method and prototype, Syntia, have successfully reversed state-of-the-art protectors like VMProtect, Themida, and Tigress, drawing significant attention from the software security community.

### Problem
While promising, search-based black-box deobfuscation techniques are not well understood. Several key questions of practical relevance, such as deobfuscation correctness and quality, and sensitivity to time budget, are not addressed in Blazytko et al.'s original paper, making it difficult to assess the strengths and weaknesses of the approach. Additionally, Syntia comes with many hard-coded design and implementation choices, raising the question of whether other choices could lead to better performance. It is also unclear how these methods compare with recent proposals for grey-box deobfuscation or general program synthesis, and how to protect against such black-box attacks.

### Goal
We aim to advance the current state of search-based black-box deobfuscation in the following three key directions:
1. Generalize the initial Syntia proposal and refine the initial experiments by Blazytko et al. to better understand search-based black-box methods.
2. Improve the current state-of-the-art (Syntia) through a careful formalization and exploration of the design space, and evaluate the approach against grey-box and program synthesis methods.
3. Study how to mitigate such black-box attacks, particularly by examining the underlying search space and promoting the application of S-metaheuristics instead of MCTS.

### Contributions
Our main contributions are:
- **Refinement of Experiments:** We systematically refine Blazytko et al.'s experiments, highlighting new strengths and weaknesses of the initial Syntia proposal. Specifically, Syntia (based on MCTS) is far less efficient than expected for small time budgets and lacks robustness. With a 1-second timeout, it only infers 16% of our dataset, and even with a 600-second timeout, it only handles 42% of the dataset (Fig. 2).
- **Insights into Syntia Internals:** We delve into Syntia's internals to rationalize our observations. The search space underlying black-box code deobfuscation is too unstable for MCTS, leading to poor estimations. As a result, Syntia behaves almost enumeratively. Figure 1 shows the distance evolution for Syntia and an enumerative MCTS (i.e., breadth-first-search), both of which show no progression.
- **Optimization Approach:** We propose viewing black-box deobfuscation as an optimization problem rather than a single-player game, allowing the use of S-metaheuristics, known to be more robust than MCTS on unstable search spaces. We introduce Xyntia, a search-based black-box deobfuscator using Iterated Local Search (ILS), known for its robustness among S-metaheuristics. Thorough experiments show that Xyntia retains the benefits of Syntia while correcting most of its flaws. Specifically, Xyntia significantly outperforms Syntia, synthesizing twice as many expressions with a 1-second budget as Syntia does with a 600-second budget (Fig. 2). Other S-metaheuristics also clearly outperform MCTS, although they are less effective here than ILS.
- **Performance Evaluation:** We demonstrate that Xyntia exceeds other state-of-the-art attackers, including the QSynth grey-box deobfuscator, program synthesizers CVC4 and STOKE, and pattern-matching-based simplifiers. Specifically, it finds twice as many expressions and is 30 times faster than QSynth on heavy protections.
- **Defense Evaluation:** We evaluate Xyntia against state-of-the-art defenses, particularly recent anti-analysis proposals. As expected, Xyntia is immune to such defenses, bypassing side-channels, path explosion, and mixed boolean-arithmetic (MBA) obfuscation. We also use it to synthesize handlers from state-of-the-art virtualizers.
- **Novel Protections:** Finally, we propose the first two protections against search-based black-box deobfuscation. We observe that all phases of black-box techniques (hypothesis, sampling, and learning) can be thwarted. We propose two practical methods exploiting these limitations and discuss them in the context of virtualization-based obfuscation: (1) semantically complex handlers and (2) merged handlers with branch-less conditions. Experiments show that both protections are highly effective against black-box attacks.