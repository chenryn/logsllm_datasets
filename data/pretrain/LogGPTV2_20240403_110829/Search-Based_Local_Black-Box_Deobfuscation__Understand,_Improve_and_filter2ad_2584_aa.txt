title:Search-Based Local Black-Box Deobfuscation: Understand, Improve and
Mitigate (Poster)
author:Gr&apos;egoire Menguy and
S&apos;ebastien Bardin and
Richard Bonichon and
Cauim de Souza Lima
Search-Based Local Black-Box Deobfuscation:
Understand, Improve and Mitigate
(Poster)
Gr√©goire Menguy
PI:EMAIL
Universit√© Paris-Saclay, CEA, List
France
S√©bastien Bardin
PI:EMAIL
Universit√© Paris-Saclay, CEA, List
France
Richard Bonichon
PI:EMAIL
Nomadic Labs
France
Cauim de Souza de Lima
PI:EMAIL
Universit√© Paris-Saclay, CEA, List
France
ABSTRACT
This presentation is based on the paper ‚ÄúSearch-based Local Blackbox
Deobfuscation: Understand Improve and Mitigate‚Äù from the same
authors, which has been accepted for publication at ACM CCS 2021.
Code obfuscation aims at protecting Intellectual Property and
other secrets embedded into software from being retrieved. Re-
cent works leverage advances in artificial intelligence (AI) with
the hope of getting blackbox deobfuscators completely immune to
standard (whitebox) protection mechanisms. While promising, this
new field of AI-based, and more specifically search-based blackbox
deobfuscation, is still in its infancy. In this article we deepen the
state of search-based blackbox deobfuscation in three key direc-
tions: understand the current state-of-the-art, improve over it and
design dedicated protection mechanisms. In particular, we define a
novel generic framework for search-based blackbox deobfuscation
encompassing prior work and highlighting key components; we
are the first to point out that the search space underlying code
deobfuscation is too unstable for simulation-based methods (e.g.,
Monte Carlo Tree Search used in prior work) and advocate the use
of robust methods such as S-metaheuristics; we propose the new
optimized search-based blackbox deobfuscator Xyntia which signif-
icantly outperforms prior work in terms of success rate (especially
with small time budget) while being completely immune to the
most recent anti-analysis code obfuscation methods; and finally
we propose two novel protections against search-based blackbox
deobfuscation, allowing to counter Xyntia powerful attacks.
CCS CONCEPTS
‚Ä¢ Security and privacy‚Üí Software reverse engineering; ‚Ä¢ Com-
puting methodologies‚Üí Randomized search; Game tree search.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
¬© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3485337
1
KEYWORDS
Binary-level code analysis; deobfuscation; artificial intelligence
ACM Reference Format:
Gr√©goire Menguy, S√©bastien Bardin, Richard Bonichon, and Cauim de Souza
de Lima. 2021. Search-Based Local Black-Box Deobfuscation: Understand,
Improve and Mitigate (Poster). In Proceedings of the 2021 ACM SIGSAC
Conference on Computer and Communications Security (CCS ‚Äô21), November
15‚Äì19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA,
3 pages. https://doi.org/10.1145/3460120.3485337
1 INTRODUCTION
Context. Software contain valuable assets, such as secret algo-
rithms, business logic or cryptographic keys, that attackers may
try to retrieve. The so-called Man-At-The-End-Attacks scenario
(MATE) considers the case where software users themselves are
adversarial and try to extract such information from the code. Code
obfuscation [11, 12] aims at protecting codes against such attacks, by
transforming a sensitive program ùëÉ into a functionally equivalent
program ùëÉ‚Ä≤ that is more ‚Äúdifficult‚Äù (more expensive, for example,
in money or time) to understand or modify. On the flip side, code
deobfuscation aims to extract information from obfuscated codes.
Whitebox deobfuscation techniques, based on advanced symbolic
program analysis, have proven extremely powerful against standard
obfuscation schemes [3, 4, 9, 17, 22, 24, 29] ‚Äì especially in local
attack scenarios where the attacker analyses pre-identified parts of
the code (e.g., trigger conditions). But they are inherently sensitive
to the syntactic complexity of the code under analysis, leading to
recent and effective countermeasures [11, 19, 20, 30].
Search-based blackbox deobfuscation. Despite being rarely com-
plete or sound, artificial intelligence (AI) techniques are flexible and
often provide good enough solutions to hard problems in reasonable
time. They have been therefore recently applied to binary-level code
deobfuscation. The pioneering work by Blazytko et al. [6] shows
how Monte Carlo Tree Search (MCTS) [8] can be leveraged to solve
local deobfuscation tasks by learning the semantics of pieces of
protected codes in a blackbox manner, in principle immune to the
syntactic complexity of these codes. Their method and prototype,
Syntia, have been successfully used to reverse state-of-the-art pro-
tectors like VMProtect [27], Themida [21] and Tigress [10], drawing
attention from the software security community [7].
Session 8: Poster & Demo Session CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2384CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
Menguy, et al.
Problem. While promising, search-based blackbox (code) deobfus-
cation techniques are still not well understood. Several key ques-
tions of practical relevance (e.g., deobfuscation correctness and
quality, sensitivity to time budget) are not addressed in Blazytko et
al.‚Äôs original paper, making it hard to exactly assess the strengths
and weaknesses of the approach. Moreover, as Syntia comes with
many hard-coded design and implementation choices, it is legit-
imate to ask whether other choices lead to better performance,
and to get a broader view of search-based blackbox deobfuscation
methods. Finally, it is unclear how these methods compare with
recent proposals for greybox deobfuscation [14] or general program
synthesis [5, 23], and how to protect from such blackbox attacks.
Goal. We focus on advancing the current state of search-based
blackbox deobfuscation in the following three key directions: (1)
generalize the initial Syntia proposal and refine the initial experi-
ments by Blazytko et al. in order to better understand search-based
blackbox methods, (2) improve the current state-of-the-art (Syntia)
through a careful formalization and exploration of the design space
and evaluate the approach against greybox and program synthe-
sis methods, and finally (3) study how to mitigate such blackbox
attacks. Especially, we study the underlying search space, bringing
new insights for efficient blackbox deobfuscation, and promote the
application of S-metaheuristics [26] instead of MCTS.
Contributions. Our main contributions are the following:
‚Ä¢ We refine Blazytko et al.‚Äôs experiments in a systematic way, high-
lighting new strengths and new weaknesses of the initial Syntia
proposal for search-based blackbox deobfuscation. Especially,
Syntia (based on Monte Carlo Tree Search, MCTS) is far less
efficient than expected for small time budgets (typical usage sce-
nario) and lacks robustness. Indeed, with 1s/expr. timeout it only
infers 16% of our dataset. Even with a 600s/expr. timeout it only
handles 42% of the dataset (Fig. 2);
‚Ä¢ We dig into Syntia internals to rationalize our observations. It
appears that the search space underlying blackbox code deobfusca-
tion is too unstable to rely on MCTS ‚Äì especially assigning a score
to a partial state through simulation leads to poor estimations.
Thus, Syntia is here almost enumerative. Fig. 1 shows the distance
evolution for Syntia and an enumerative MCTS (i.e., breadth-first-
search). Both are very alike and show no progression;
‚Ä¢ We propose to see blackbox deobfuscation as an optimization
problem rather than a single player game, allowing to reuse S-
metaheuristics [26], known to be more robust than MCTS on
unstable search spaces (especially, they do not need to score
partial states). We propose Xyntia, a search-based blackbox de-
obfuscator using Iterated Local Search (ILS) [18], known among
S-metaheuristics for its robustness. Thorough experiments show
that Xyntia keeps the benefits of Syntia while correcting most of
its flaws. Especially, Xyntia significantly outperforms Syntia, syn-
thesizing twice more expressions with a budget of 1 s/expr than
Syntia with 600 s/expr (Fig. 2). Other S-metaheuristics also clearly
beat MCTS, even if they are less effective here than ILS;
‚Ä¢ We show that Xyntia exceeds other state-of-the-art attackers,
namely the QSynth greybox deobfuscator [14], program synthe-
sizers CVC4 [5] and STOKE [23], and pattern-matching based
simplifiers. Especially, it finds 2√ó more expressions and is 30√ó
faster than QSynth on heavy protections;
‚Ä¢ We evaluate Xyntia against state-of-the-art defenses, especially
recent anti-analysis proposals [13, 19, 25, 28, 30]. As expected,
Xyntia is immune to such defenses. In particular, it bypasses side-
channels [25], path explosion [19] and MBA [30]. We also use it
to synthesize handlers from state-of-the-art virtualizers [10, 27];
‚Ä¢ Finally, we propose the two first protections against search-based
blackbox deobfuscation. We observe that all phases of blackbox
techniques can be thwarted (hypothesis, sampling and learning),
we propose two practical methods exploiting these limitations
and we discuss them in the context of virtualization-based obfus-
cation: (1) semantically complex handlers; (2) merged handlers with
branch-less conditions. Experiments show that both protections
are highly effective against blackbox attacks.
e
c
n
a
t
s
i
d
c
i
m
h
t
i
r
a
g
o
L
e
c
n
a
t
s
i
d
c
i
m
h
t
i
r
a
g
o
L
1600
1400
1200