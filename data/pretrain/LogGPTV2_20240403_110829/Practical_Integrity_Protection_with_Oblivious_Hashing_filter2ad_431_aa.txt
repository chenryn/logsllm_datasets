title:Practical Integrity Protection with Oblivious Hashing
author:Mohsen Ahmadvand and
Anahit Hayrapetyan and
Sebastian Banescu and
Alexander Pretschner
Practical Integrity Protection with Oblivious Hashing
Mohsen Ahmadvand, Anahit Hayrapetyan, Sebastian Banescu, and Alexander Pretschner
Technical University of Munich
PI:EMAIL
1 INTRODUCTION
Software is susceptible to code and data manipulation attacks from
the users who control the host(s) where the software is executed.
Such attacks, known as Man-At-The-End (MATE) [19], affect the
integrity of the software’s logic or data to benefit the attacker and
in detriment of software producers, or even other users. Disabling
license checks is one of the classical examples in which attackers
develop a patch enabling an illegitimate usage of software. Soft-
ware piracy has reportedly caused a revenue loss of $52.2 billion
in 2015 [10]. Cheating in multi-player games is yet another similar
attack in which perpetrators obtain advantages over other players
by mounting integrity attacks [20], e.g., obtaining access to the
location of other users.
ABSTRACT
Oblivious hashing (OH) is an integrity protection technique that
checks the (side) effects resulting from the executed code, in con-
trast to checking the code itself as done by self-checking (SC). SC
introduces atypical behavior in the program logic, like reading the
code section loaded in memory. Since such atypical behavior can
be detected by attackers, OH is more appealing to be employed in
practice than SC. However, OH is incapable of protecting a pre-
sumable majority of program instructions, those that depend on
nondeterministic (input) data or branches, which have to be manu-
ally identified and subsequently skipped. In this paper, we extend
OH into a practical protection scheme by proposing i) a technique
for automatic segregation of deterministic instructions, and ii) a
novel extension, Short Range Oblivious Hashing (SROH), for OH
to cover control-flow instructions dependent on nondeterminis-
tic data. Our SROH technique increases the range of instructions
that OH can protect to nondeterministic branches. Moreover, we
intertwine OH with SC to cover (nondeterministic) data dependent
instructions and enhance the resilience against tampering attacks.
We evaluate the performance overhead as well as the security of
our scheme using the MiBench dataset and 3 open source games.
Our experiments show that the proposed technique yields a 20-fold
increase in the median number of protected instructions and, on
non-CPU-intensive programs, imposes an overhead of 52%.
CCS CONCEPTS
• Security and privacy → Software security engineering;
KEYWORDS
Software protection, Oblivious hashing, Tamper detection, Self-
checking, Man-At-The-End
ACM Reference Format:
Mohsen Ahmadvand, Anahit Hayrapetyan, Sebastian Banescu, and Alexan-
der Pretschner. 2018. Practical Integrity Protection with Oblivious Hashing.
In 2018 Annual Computer Security Applications Conference (ACSAC ’18), De-
cember 3–7, 2018, San Juan, PR, USA. ACM, New York, NY, USA, 13 pages.
https://doi.org/10.1145/3274694.3274732
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC’18, December 2018, San Juan, Puerto Rico, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to the
Association for Computing Machinery.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274732
40
The MATE has full control over the host on which programs are
executed. Consequently, the MATE can monitor, disrupt and sub-
vert running programs. Once MATE attackers make their desired
malicious modifications to a software package, they can distribute
this package to other users, e.g. via an app store. Users could fall for
such malicious software clones that may put their security and/or
privacy at risk. Such compromises can also harm the reputation
of vendors [5, 7]. However, the impact of integrity attacks is not
limited to revenue loss, exposure of users’ private data, or repu-
tation damage. Stuxnet [31] and SauronProject [32] are examples
of attacks that targeted critical infrastructures stepping towards
nationwide safety/security hazards.
Given the gravity of integrity threats, it is of major importance
to avoid or at least raise the bar against them. However, this is a
daunting task, mainly because of the large attack vector that spans
multiple representations of a program, namely static, in-memory
and in-execution. Therefore, holistic protection needs to be imple-
mented to cover all the representations. Typical OS-level signature
verification routines aim at detecting inconsistencies in the static
representation, i.e. the program binary. However, they cannot detect
tampering attacks which manipulate the process memory, i.e., after
a program is loaded into memory. Similarly, a tampering attack
might not even require a modification in the process memory, but
rather a well-timed bit flip in a CPU register during program execu-
tion. Garg et al. [22] proposed Indistinguishability Obfuscation (IO)
as a building block for theoretically resilient schemes. However, IO
is still impractical due to the immense computational expenses [6].
That said, our goal is to raise the bar against perpetrators making
MATE attacks more resource-consuming and labor-intensive, such
that they are no longer economically attractive.
Since the seminal work by Aucsmith [4], many schemes were
developed to protect the integrity of programs in memory, which
are known as Self-Checksumming (SC) schemes. Against self-check-
summing protections, Wurster et al. in [47] proposed a rootkit-
based attack that pipes an untampered copy of the process memory
to all the fetch requests from guards at runtime. Furthermore, the
odd behavior of having a program reading its own memory was
ACSAC’18, December 2018, San Juan, Puerto Rico, USA
M. Ahmadvand et al.
exploited by Qiu et al. [40] to develop a taint-analysis-based attack
to defeat SC-based protections. Chen et al. proposed a stealthy pro-
tection technique (Oblivious Hashing (OH)) that neither relies on
reading process memory nor is deceptable by the memory piping
trick [13]. OH captures evidence of the actual execution of pro-
grams by computing a trace hash over the values stored in memory
corresponding to arbitrary read and write accesses in a program.
These hash values are then matched with expected ones during
execution. The expected values have to be precomputed and stored
in the programs upon distribution. Simply put, OH checks the exe-
cution effects in memory, as opposed to checking the code itself.
Therefore, it is harder to identify (stealthy) or trick (resilient) OH
in contrast to SC. Better stealth and resilience makes OH a better
protection technique than SC.
Although OH is hence a more appealing protection measure in
principle, it is unable to protect nondeterministic program traces,
i.e., memory accesses with values dependent on user-input or en-
vironment variables. This is mainly because hashing such traces
results in different hashes for different program executions. To
remove any nondeterminism from trace hashes, [12] proposed a
technique in which all variables in traces are canceled out by en-
forcing a reversible commutative function (e.g., addition) as the
hash function. This, however, enables attackers to patch variables
to any desired value, given that the modified value will be hashed
and subsequently canceled out by the protection.
Gap. An effective strategy to cope with nondeterminism requires
addressing two challenges - i) how to automatically extract deter-
ministic program segments, and ii) how to protect nondeterministic
ones. The second problem is more striking as a large portion of
program traces are expected to be nondeterministic. For instance,
only 13% of program instructions evaluated in [41] are determin-
istic. This percentage is far less for the programs in our dataset: a
mere median of 0.5% as shown in Table 1. More importantly, to the
best of our knowledge, no comprehensive study was done on the
security, resilience and overheads of OH on real-world programs.
Contributions. We turn OH into a practical integrity protec-
tion technique. We i) develop a method for an automated detection
of data and control flow dependent instructions in programs; ii)
propose the short range oblivious hashing (SROH) technique as
an extension to OH enabling protection of instructions residing
in nondeterministic branches; iii) utilize a complementary self-
checksumming-based technique to protect data dependent seg-
ments; iv) further harden the complementary protection by inter-
twining it with OH; v) enable OH to implicitly protect (nondeter-
ministic) data dependent instructions; vi) employ our protection
scheme on a dataset of 29 real-world applications to evaluate the
security as well as the induced overheads; and finally viii) open
source our cross-platform protection framework prototype written
in LLVM.
2 BACKGROUND & RELATED WORK
2.1 Software integrity protection
Protection schemes are comprised of three parts - i) check, ii) re-
spond, and iii) harden [2]. Checking activities monitor a particular
set of properties of a program to ensure that they conform to a
known good state. Response activities react when the current state
differs from the good state by, for instance, covertly terminating
the program [16]. Hardening refers to a set of techniques that are
used to add resilience to the check and response routines, making
them harder to find or disable.
Authenticating accesses to sensitive data is one of the goals in
integrity protection. Banescu et al. [7] proposed an access proxy that
authenticates legitimate modifications on sensitive data. Legitimacy
of such modifications are verified by means of authenticating the
control flow and subsequently signing the data using a white-box
HMAC [48]. Similarly, [9] proposed a scheme that introduces a light-
weight secondary process for verifying the program control flow
integrity. Such techniques primarily detect tampering attacks on
the control flow. Consequently, attackers can arbitrarily manipulate
the logic in a program as long as the control flow is preserved.
In order to ensure code integrity, a number of schemes such
as [4, 39, 46] have been proposed. These impede tampering attacks
by encrypting the code in a way such that only a genuine execution
could decrypt the code and subsequently execute it, which is en-
forced by a trace-sensitive key derivation technique. However, the
program has to eventually get decrypted in order to be executed.
Therefore, well-timed memory dumps could defeat the protection.
State inspection is another type of integrity protection in which
dedicated program invariants are verified. Ibrahim et al. [27] utilized
a set of checkers to verify return values of the sensitive functions for
arbitrary inputs as invariants. Their approach works for pure func-
tions only as opposed to other protections. Andriesse et al. [3] used
Return-Oriented Programming gadgets to craft stealthy checkers.
These checkers are bootstrapped with a simulated buffer-overflow
attack. However, shipping a program with buffer-overflow vulner-
abilities may open the door to other attacks. Moreover, anti-ROP
techniques such as [38, 49] may prevent the execution of such ver-
ifiers. The hash of code segments (also known as self-checking)
is another example of invariants that was used by a multitude of
schemes [5, 11, 23, 24, 26]. Self-checking techniques, however, are
unaware of the program execution environment and thus vulner-
able to the memory split attack [47]. Moreover, they introduce
atypical behavior (self-memory access) in programs, which in turn
may make them vulnerable to the taint-based attack [40].
Another property of the program that can potentially counter
tampering attacks is execution time, which was used by Jakobsson
et al. [29, 30] to detect compromises. Pioneer [42] and Conquer [37]
used the same idea to protect legacy systems. The mathematical
relations among hardware performance counters were used as a
clue of tampering attacks by Malone et al. [36]. All these schemes
are greatly system-specific which requires individual tailoring for
every execution host.
Oblivious hashing (OH) [13, 28] combines the deterministic mem-
ory values referenced by instructions in a program’s execution trace
by means of hashing. Given that these values are invariant for dif-
ferent runs, OH can verify the computed hashes in various parts of
the program. This technique offers in-execution protection without
introducing odd behaviors such as code segment accesses. There-
fore, it is more appealing to use in practice than SC. Despite the
benefits, OH falls short in protecting instructions working with
nondeterministic data, which we tackle in this paper.
41Practical Integrity Protection with Oblivious Hashing
ACSAC’18, December 2018, San Juan, Puerto Rico, USA
2.2 Nondeterministic code detection
Detection of instructions that receive (or depend on) input/state
in applications is challenging. Such inputs need not necessarily
be entered by users. System state data (e.g., date and time, CPU
heat measurements) have the same effect. We will use the term
“nondeterministic data” throughout this paper for data that is pro-
vided by the environment or user and that can vary across different
executions.
Inconsistent hashes primarily occur when a program p processes
some inputs and/or responds to some environmental states that
influence OH computations. The influence can be in two forms:
either an input (state) is directly incorporated into hashes or it
contributes to a branch condition.
A naive idea to detect input-independent instructions is to run
the program of interest with all possible inputs/states and identify
the intersection of all executions [13]. However, running programs
with all possible inputs/states, considering the changes over time
and program size, does not scale. Moreover, with a manual proce-
dure, the accuracy of results may decline.
To cope with this issue in a more systematic manner, we need
to distinguish between two types of nondeterminism: i) data de-
pendency which captures instructions where at least one of their
operands depends on nondeterministic data, and ii) control-flow de-
pendency which includes instructions in branches with a condition
that depends on nondeterministic data.
There are multiple techniques that could potentially be used to
single out nondeterministic instructions:
Information flow analysis. This is a technique that tracks data
propagation (from sources) to any function of interest (sinks), e.g.
standard output [44]. The difficulty of using the existing informa-
tion flow analysis tools is on the one hand in specifying all the sinks
in a program. In addition, here our objective is to identify all the
(intermediate) instructions, the operands of which are either tainted
with nondeterministic data or the execution branch of which de-
pends on such data. However, information flow analysis addresses
whether tainted data flowed into arbitrary (unsafe) functions or
not, and thus cannot directly be used to identify nondeterministic
instructions.
Program slicing. Program slicing identifies a set of instructions
(slice) that may affect (backward slicing) or be affected by (forward
slicing) the values of arbitrary variables at a given point of time [45].
In order to filter nondeterministic instructions (short for: instruc-
tions that depend on nondeterministic input), one can use (forward)
slicing to compute those instructions that may be affected by input
data. This, however, requires marking all the input variables in a
program, for all of which slicing needs to be undertaken. More-
over, slicing does not segregate data and control-flow dependencies,
which is necessary for our protection scheme.
User-input dependency detection. Dependence graphs cap-
ture dependency relations (both data and control-flow) among pro-
gram instructions. Given the dependence graphs, identifying in-
structions that depend on nondeterministic data is solvable by a
graph reachability analysis. We found two techniques for this sort
of analyses [41, 43]. The technique proposed by Scholz et al. [41]
also takes the call-site dependency status (of a function) into consid-
eration in its so-called call-sensitive analysis, which in turn makes
it the best candidate for our nondeterminism detection. However,
their tool is not publicly available1, which is the reason we had to
re-implement it from scratch.
3 DESIGN
Throughout this section, we use a sample electricity meter applica-
tion as our running example, which uses varying rates depending
on the time of day. The meter in Listing 1 charges users twice
the rate for peak hours, half the rate for off-peak hours, and the
normal rate for holidays and non-peak hours. The sensor calls the
meterUsageCycle function on an hourly basis to report consump-
tions (*kwMinute argument) in kilowatt minutes, their count (size),
and the period of usage (rate argument).
Listing 1: Fictional electricity meter application with vary-
ing rates
enum period {Peak, OffPeak, Normal};
float computeUsage(float ∗kwMinute, int size , enum period rate ) {
rating = 0.5;
rating = 2.0;
}
return usage;
} else if ( rate == OffPeak){
i =0; i<size ; i++){
rating = 1.0;
}
usage += kwMinute[i]∗rating ;
// III
//DDI
// DII |CFDI
//DDI
// DII |CFDI
//DDI
// DII |CFDI
float usage = 0;
for ( int
float
if ( rate == Peak){
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16 meterUsageCycle(float ∗kwMinute, int size , enum period rate ) {
17
18
19
20
21
22