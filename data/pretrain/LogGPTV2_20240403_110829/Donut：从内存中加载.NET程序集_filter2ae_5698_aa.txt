# Donut：从内存中加载.NET程序集
|
##### 译文声明
本文是翻译文章，文章原作者 modexp，文章来源：modexp.wordpress.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
我们可以在运行微软Windows系统的大多数设备上看到.NET
Framework的身影，.NET在针对Windows设备的攻击（红队）以及防御（蓝队）场景中也深受大家欢迎。2015年，微软将[AMSI（Antimalware
Scan Interface）](https://docs.microsoft.com/en-us/windows/desktop/AMSI/antimalware-scan-interface-portal)与执行脚本（VBScript、JScript、PowerShell）的各种Windows组件集成在一起。大约在同一时间，PowerShell中也添加了增强型日志记录或者[Script
Block Logging](https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html)功能，用来捕捉执行脚本的的所有内容，从而解决攻击者使用的任何混淆技术。为了能在红蓝对抗中占据上风，红队必须直接使用程序集（assembly），进一步深入.Net
Framework。程序集通常采用C#语言开发，可以为蓝队提供PowerShell支持的所有功能，并且还具备内存加载和执行的独特优势。在本文中，我将向大家简单介绍Donut这款工具，当我们提供一个.NET程序集、类名、方法以及其他可选参数时，[Donut](https://github.com/TheWover/donut)将生成一段位置无关代码（PIC）或者shellcode，可以从内存中加载.NET程序集。我和[TheWover](https://github.com/TheWover/)共同合作开发了这款工具，此外TheWover也写了介绍donut的一篇[文章](https://thewover.github.io/Introducing-Donut/)，欢迎大家参考。
## 0x01 CLR托管接口
CLR（Common Language
Runtime）是一个虚拟机组件，微软从v1.0版Framework（2002年发布）就开始提供[ICorRuntimeHost](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/icorruntimehost-interface)接口，用来托管.NET程序集。该接口在2006年发布的v2.0版Framework中被[ICLRRuntimeHost](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/iclrruntimehost-interface)所替代，而后者又在2009年发布的v4.0版Framew中被[ICLRMetaHost](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/iclrmetahost-interface)替代。虽然已被弃用，但`ICorRuntimeHost`目前仍是从内存中加载程序集的最简单方法。我们可以使用多种方法来实例化该接口，最常用的有如下几种方法：
  * [CoInitializeEx](https://docs.microsoft.com/en-us/windows/desktop/api/combaseapi/nf-combaseapi-coinitializeex)以及[CoCreateInstance](https://docs.microsoft.com/en-us/windows/desktop/api/combaseapi/nf-combaseapi-cocreateinstance)
  * [CorBindToRuntime](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/corbindtoruntime-function)或者[CorBindToRuntimeEx](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/corbindtoruntimeex-function)
  * [CLRCreateInstance](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/clrcreateinstance-function)以及[ICLRRuntimeInfo](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/iclrruntimeinfo-interface)
`CorBindToRuntime`以及`CorBindToRuntimeEx`执行的是同样的操作，但`CorBindToRuntimeEx`函数可以让我们指定CLR的具体行为。使用`CLRCreateInstance`时我们不必初始化COM（Component
Object Model），但v4.0版之前的Framework并没有实现该函数。如下C++代码可以从内存中加载.NET程序集：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #import "mscorlib.tlb" raw_interfaces_only
    void rundotnet(void *code, size_t len) {
        HRESULT                  hr;
        ICorRuntimeHost          *icrh;
        IUnknownPtr              iu;
        mscorlib::_AppDomainPtr  ad;
        mscorlib::_AssemblyPtr   as;
        mscorlib::_MethodInfoPtr mi;
        VARIANT                  v1, v2;
        SAFEARRAY                *sa;
        SAFEARRAYBOUND           sab;
        printf("CoCreateInstance(ICorRuntimeHost).n");
        hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
        hr = CoCreateInstance(
          CLSID_CorRuntimeHost, 
          NULL, 
          CLSCTX_ALL,
          IID_ICorRuntimeHost, 
          (LPVOID*)&icrh);
        if(FAILED(hr)) return;
        printf("ICorRuntimeHost::Start()n");
        hr = icrh->Start();
        if(SUCCEEDED(hr)) {
          printf("ICorRuntimeHost::GetDefaultDomain()n");
          hr = icrh->GetDefaultDomain(&iu);
          if(SUCCEEDED(hr)) {
            printf("IUnknown::QueryInterface()n");
            hr = iu->QueryInterface(IID_PPV_ARGS(&ad));
            if(SUCCEEDED(hr)) {
              sab.lLbound   = 0;
              sab.cElements = len;
              printf("SafeArrayCreate()n");
              sa = SafeArrayCreate(VT_UI1, 1, &sab);
              if(sa != NULL) {
                CopyMemory(sa->pvData, code, len);
                printf("AppDomain::Load_3()n");
                hr = ad->Load_3(sa, &as);
                if(SUCCEEDED(hr)) {
                  printf("Assembly::get_EntryPoint()n");
                  hr = as->get_EntryPoint(&mi);
                  if(SUCCEEDED(hr)) {
                    v1.vt    = VT_NULL;
                    v1.plVal = NULL;
                    printf("MethodInfo::Invoke_3()n");
                    hr = mi->Invoke_3(v1, NULL, &v2);
                    mi->Release();
                  }
                  as->Release();
                }
                SafeArrayDestroy(sa);
              }
              ad->Release();
            }
            iu->Release();
          }
          icrh->Stop();
        }
        icrh->Release();
    }
    int main(int argc, char *argv[])
    {
        void *mem;
        struct stat fs;
        FILE *fd;
        if(argc != 2) {
          printf("usage: rundotnet n");
          return 0;
        }
        // 1. get the size of file
        stat(argv[1], &fs);
        if(fs.st_size == 0) {
          printf("file is empty.n");
          return 0;
        }
        // 2. try open assembly
        fd = fopen(argv[1], "rb");
        if(fd == NULL) {
          printf("unable to open "%s".n", argv[1]);
          return 0;
        }
        // 3. allocate memory 
        mem = malloc(fs.st_size);
        if(mem != NULL) {
          // 4. read file into memory
          fread(mem, 1, fs.st_size, fd);
          // 5. run the program from memory
          rundotnet(mem, fs.st_size);
          // 6. free memory
          free(mem);
        }
        // 7. close assembly
        fclose(fd);
        return 0;
    }
如下是C#版的“Hello, World!”程序，当使用`csc.exe`编译后能生成一个.NET程序集，可以用来测试加载器。
    // A Hello World! program in C#.
    using System;
    namespace HelloWorld
    {
        class Hello 
        {
            static void Main() 
            {
                Console.WriteLine("Hello World!");
            }
        }
    }
编译并运行这些代码后，我们可以得到如下输出：
这是执行.NET程序集的基本方式，其中并没有考虑到Framework的具体版本。shellcode的实现有点不一样，会解析`CorBindToRuntime`以及`CLRCreateInstance`的地址（这与[subTee](https://twitter.com/subtee)开发的[AssemblyLoader](https://github.com/caseysmithrc/AssemblyLoader)类似）。如果成功解析`CLRCreateInstance`，并且调用后返回`E_NOTIMPL`或者“Not
implemented”，我们就会执行`CorBindToRuntime`（其中`pwszVersion`参数设置为NULL），请求可用的最新版本。如果我们使用`CorBindToRuntime`请求系统当前不支持的某个版本，那么运行shellcode的托管进程可能会弹出错误消息。比如，当Windows
7系统只支持v3.5.30729.5420版时，如果我们请求v4.0.30319，就会看到如下错误信息：
大家可能有疑问，为什么之前使用的OLE函数没有在shellcode中使用。除了OLE32之外，OLE函数有时候会在其他DLL中引用，比如COMBASE。xGetProcAddress可以处理转发引用，但至少目前为止，shellcode使用的是`CorBindToRuntime`以及`CLRCreateInstance`。在新版框架中，我们还可以使用`CoCreateInstance`。
## 0x02 定义.NET类型
在非托管（unmanaged）C++程序中，我们可以使用`#import`指令来访问类型（Types）。前文代码使用的是在`mscorlib.tlb`中定义的`_AppDomain`、`_Assembly`以及`_MethodInfo`接口。然而问题在于，在公开版的Windows
SDK中并没有定义这些接口。为了在较低级语言（如汇编语言或者C）中使用.NET类型，我们首先得手动定义这些接口。我们可以使用[LoadTypeLib](https://docs.microsoft.com/en-us/windows/desktop/api/oleauto/nf-oleauto-loadtypelib)
API来枚举类型信息，该函数会返回指向[ITypeLib](https://docs.microsoft.com/en-us/windows/desktop/api/oaidl/nn-oaidl-itypelib)接口的一个指针。该接口可以提取相关信息，比如库接口、方法以及变量。我发现[Olewoo](http://www.benf.org/other/olewoo/index.html)这款工具可以用来查看`mscorlib.tlb`信息。如果我们忽略面向对象编程（OOP）方面的相关信息，比如类、对象、继承、封装、抽象、多态……等，我们可以从底层来分析接口，毕竟接口只是指向某种数据结构的一个指针，而该数据结构包含指向函数/方法的指针而已。除了[phplib](https://github.com/embedthis/phplib/blob/master/ext/com_dotnet/com_dotnet.c)中的一个文件之外（该文件定义了`_AppDomain`接口），我无法在网上找到所需接口的定义。根据找到的示例，我构造了加载程序集所需的其他接口。如下即为`_AppDomain`接口中的某个方法：
            HRESULT (STDMETHODCALLTYPE *InvokeMember_3)(
              IType        *This,
              BSTR         name,
              BindingFlags invokeAttr,
              IBinder      *Binder,
              VARIANT      Target,
              SAFEARRAY    *args,
              VARIANT      *pRetVal);
虽然shellcode中没有使用`IBinder`接口的任何方法，我们可以将类型安全地改成`void
*`，但为了以后使用方便，我还是定义了如下接口。`DUMMY_METHOD`宏简单定义了一个函数指针：
        typedef struct _Binder IBinder;
        #undef DUMMY_METHOD
        #define DUMMY_METHOD(x) HRESULT ( STDMETHODCALLTYPE *dummy_##x )(IBinder *This)
        typedef struct _BinderVtbl {
            HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
              IBinder * This,
              /* [in] */ REFIID riid,
              /* [iid_is][out] */ void **ppvObject);
            ULONG ( STDMETHODCALLTYPE *AddRef )(