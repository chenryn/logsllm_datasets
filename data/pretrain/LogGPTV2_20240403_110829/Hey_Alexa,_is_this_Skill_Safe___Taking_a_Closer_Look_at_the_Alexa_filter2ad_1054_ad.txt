number through their designated permission API. There are
many other scenarios where this gap can be exploited. For
example, a conversational skill targeted at kids can lure them
into revealing details about their home or personal life after
gaining their trust (assuming users’ responses can trigger the
skill’s initial certiﬁed intents).
Finding 3: An attacker can make code changes after ap-
proval to coax a user into revealing sensitive information.
This is possible as an attacker can register any number
of intents during the certiﬁcate process,
irrespective of
whether or not all intents are triggered. Thus, an attacker can
register dormant intents which are never triggered during the
certiﬁcation process to evade being ﬂagged as suspicious.
However, after the certiﬁcation process the attacker can
change the backend code (e.g., change the dialogue to
request for a speciﬁc information) to trigger dormant intents.
Backend Skill ServiceRegister intents (one remains dormant)Check for Alexa signed requestsAlexa builds model from intentsValidate endpoint (accept requests only signed by Amazon)Send signed and unsigned requests from different vantage pointsRespond to only Alexa signed requests5Backend codeAlexa approves skill (skill appears on store)Dormant intent becomes active1b.2b.2a.1a.4.3.2c.Spoken word triggers dormant intentAlexa Skill KitSend intent value to backend pointSensitive data sent as JSON obj6.Change backend dialogue codeAfter certificationCode change tries to trigger dormant intentUserAttackerLog dataTABLE VI: Detailed breakdown of skills potentially bypassing the Alexa permission model.
Skills detected through regular expression
After manually inspecting skill description
Verbally request data
Non-verbally request data
Does not request data
Skill invocable but non-functional
Skill not available in store
Name
432
109
65
1
20
19
4
Data Type
Email
Phone
417
26
4
1
7
12
2
242
108
33
1
4
62
8
Location
416
133
76
0
22
24
11
Unique
skills ∗
1,482
358
166
3
52
113
24
w/o PP
668
169
99
2
34
25
9
Filtering mechanism
n
o
i
t
a
v
i
t
c
A
∗
Some skills access multiple data types, hence the summation across different data types will be slightly higher than the number of unique skills.
tion which may vary frequently over time, a phone number
typically does not vary as frequently and hence should be
instructed to be requested through the permission API.
To understand how prevalent this practice is in the skill
store, we ﬁltered skills that contain keywords related to dif-
ferent permissions (like ‘address’, ‘location’, ‘postal’, ‘city’,
‘country’, ‘email’, ‘phone’ , ‘mobile’, ‘name’, ‘gps’, ‘state’,
‘zip’) within their descriptions. A mapping of permissions to
associated data types is shown in Table V. We found 13,499
such skills in the US store. We then performed a regular
expression based search on the 13,499 skill descriptions to
identify skills discussing the collection of privacy-sensitive
data, protected by permissions. Note that our goal is to provide
a conservative lower-bound approximation to demonstrate the
existence of this practice rather than a comprehensive estimate
of its prevalence. We segment each skill’s description into sen-
tence and leverage a set of four regular expressions conforming
to the general pattern “your ” (shown in Table XI
in Appendix A) to identify mentions of the user’s name, phone
number, location, and email address.
For each data type we removed skills that requested
permission to access the corresponding data type. Table VI
lists the number of candidate skills that
initially matched
our regular expressions. We then manually read the text to
validate that the skills were actually discussing the use of such
information and found many false positives due to reasons
such as developers providing their email address and/or phone
number as contact information, developers requesting access
to sensitive data through account linking (this would require
an additional authentication step), regional skills (often had
‘city’ and ‘state’ mentioned in the description) and skills
requesting ﬁxed player ‘name’ (e.g., gaming skills). After
manually vetting the candidates we found a total of 358 unique
skills potentially requesting information that is protected by a
permission API. Next, to remove any remaining false positives,
we manually activated the 358 skills to determine if they
were really request data types protected by the permission
APIs. Table VI shows the actual number of skills accessing
data without using the dedicated permission API. We can see
that the vast majority of the skills request data verbally (166
skills in total). However, a signiﬁcant portion of the skills
were also not functional, where either they were invocable but
the backend server did not respond, or they were no longer
available in the store. Table VII lists some of the non-verbal
permission bypassing techniques. Interestingly, there are skills
(B07QHB3P5L, B071F3BHBT) that request users to provide
a name or email address through an external website (often
associated with a passphrase or token to identify the user). We
TABLE VII: Non-verbal permission bypassing techniques.
Bypassing Technique
Redirects user to a website where they have to enter their
name and game ID
Redirects user to another website where they have to enter their
email to generate a code which can then be used to create a game
Skill asks user to add their phone number to a list created
by the skill, which is then accessed by the skill
Data
Name
Email
Phone
also found one skill requesting users to add phone numbers
on a list created by the skill (B07HVHSP6W). Lastly, we
looked at whether these skills were providing a privacy policy.
From Table VI we see that around 59.8% (out of 169) of the
active and functional skills bypassing the permission APIs (i.e.,
skills requesting data verbally or nonverbally) do not provide
a privacy policy link. In terms of categories, we found that
most of the skills bypassing the permission APIs belong to
the ‘Games & Trivia’ category. Table XII in Appendix B lists
the skill categories bypassing the permission APIs.
While these skills are likely benign (we can not deﬁnitively
say if there was any malicious intent without knowing all
possible ways in which the data is used), such capabilities
can nevertheless be exploited by an attacker, especially when
combined with Alexa’s auto-enable feature to activate the
wrong skill. Anecdotally, we found a skill providing insurance
quotes that asks for other forms of personal data not protected
by the permission APIs, such as DoB and gender. Worryingly,
this skill does not provide a privacy policy.8 In this paper, we
focused on skills requesting data types protected by the permis-
sion model. Analyzing skills accessing all forms of sensitive
data not protected by the permission model is something we
leave as future work.
Finding 4: Alexa does not properly mediate the intent of sen-
sitive data types. As demonstrated above an adversary can
directly request data types that are structured to be protected
by permission APIs. Even when the attacker uses a built-in
data type, like Amazon.Phone for an intent, the skill does
not get ﬂagged for requesting sensitive data. This suggests
that Amazon’s permission model is somewhat ﬂawed. While
requesting different forms of sensitive information directly
from the user rather than using a permission-protected API is
not a technical implementation ﬂaw, it is rather a conceptual
ﬂaw as users may struggle to understand who is collecting
the data (there is no distinction between the voice template
used by native skills versus third-party skills).
8https://www.amazon.com/dp/B07QJ5YFDH
9
VI. SKILL SQUATTING
Given that we have shown the lack of transparency on
how Alexa selects skills with same invocation phrases (in
Section V-A), we next want to investigate RQ2: How effective
are skill squatting attacks? While existing work (by Kumar et
al. [35] and Zhang et al. [56]) has focused on demonstrating
how one speciﬁc approach can squat skills, our investigation
focuses on evaluating the efﬁcacy of different squatting patterns
found in the wild. We use a semi-automated approach where
we use Amazon’s TTS (Text-to-Speech) ‘Polly’ to generate
utterances of invocation phrases that are phonologically very
similar and record skills that get activated. This enables us
to evaluate the efﬁcacy of different squatting patterns —
something existing literature[35], [56] has not analyzed.
A. Common Approaches for Squatting Skills
We use phonological distance between all pairs of unique
invocation names (in the US store) to compute phonological
similarity between invocation names. For this we ﬁrst gen-
erated the phonetic encoding of each invocation name using
the following three popular phonetic algorithms: soundex [41],
metaphone [34] and nysiis [19]. We then computed the Lev-
enshtein distance [37] between the phonetic encodes to deter-
mine similarity among invocation names. We also computed
the generic Levenshtein distance among all invocation pairs.
Figure 6 shows the CDF of the similarity among invocation
names. We can see that most of the invocation names have
similarity scores in the range of [0.2, 0.4]. However, for detect-
ing potential voice-squatting skills we focused on the highly
similar pairs. We, therefore, only considered invocation pairs
with an average similarity score of ≥ 0.96 and marked them as
potential squatting attempts.9 We found 338 such invocation
pairs. Next, we manually analyzed these invocation name pairs
to ﬁlter pairs that sound quite different when pronounced (e.g.,
‘github stats’ and ‘github status’; ‘indiana facts’ and ‘indian
facts’). We eventually found 85 instances which we classiﬁed
as potential squatting attempts. Note that we do not claim these
skills as malicious squatting attempts; rather, they are ways in
which Alexa may activate the wrong skill due to the auto-
enable feature. Once we identiﬁed potential skill-squatting
attempts, we shifted our focus on (manually) grouping them
into different categories. Table VIII highlights the different
patterns of squatting attempts found in the wild. The four com-
mon skill-squatting patterns are – homophones, punctuation,
spacing, and different spellings (including spelling mistakes).
Among these patterns, homophones and different spellings
seem to be more prevalent. Interestingly, we also found spacing
(i.e., joining or splitting words) as a technique, previously not
discussed by existing literature.
To check for malicious intentions, we checked if developers
systematically register skills to impersonate other skills. While
we found few examples of skills providing similar functional-
ity, we found no systematic large scale abuse. For example,
in the US store the skill “i. p. lookup” (B01N13LZ7S) is
homonym of “eye pee lookup” (B01GU5GE8A) — both skills
provide the same functionality: a geo-lookup function for IPv4
addresses, but are registered with different developer name.
9We averaged all three phonetic encoding-based similarity scores to increase
our odds of selecting truly similar invocation names. The threshold was
empirically set to 0.96.
Fig. 6: Similarity score for invocation names taken from all
English-speaking stores.
Similarly, the skills “mission two move” (B07HD8SSZG) and
“mission too move” (B082WK7TNZ) are registered under
different developer name. We also found several instances
where the original skill developer registered multiple skills
using similar invocation names. For example, the following
two skills: “Sat Sri Akaal” (B07S18BCQ6) and “Sat Shri
Akaal” (B07RY8RZDX) are registered by the same developer,
likely to increase the probability of her skill being activated.
However, across skill stores the registered homonyms were
simply a variation between the British and American spelling
(e.g., “colour lab” vs. “color lab”).
Finding 5: While we found four common approaches for
squatting an existing skill, we did not ﬁnd any systematic
malicious abuse of skill squatting in the wild. The non-
evidence of malicious skill-squatting is a valuable data-point
for the research community, as previous works have focused
on showcasing how skills can be squatted without validating
the prevalence and impact in the real world. However, it
should be noted that the cause of non-detection could have
been due to mitigation strategies enacted by Amazon, which
may have been inﬂuenced by prior work.
B. Efﬁcacy of Skill Squatting
To check to what extent the discovered squatting patterns
work, we employed Amazon’s TTS (Text-to-Speech) service
named ‘Polly’ to generate utterances of invocation phrases
using two user accounts. We use a similar setup as described
in Section V-A, where we used an Amazon Echo as receiver
and transmitted the samples with a mono speaker in close
distance. We randomly selected skill pairs from the skill
squatting patterns identiﬁed in the previous section (i.e, from
Table VIII). We selected 10 such skill pairs using spelling
variants, punctuation and homophones (30 pairs in total), plus
the six pairs of word-spacing instances. We ran the TTS service
for each skill pair, where one skill was invoked using the ﬁrst
account and the other using the second account. We logged
Alexa’s responses and observed the activity log on the app.
Among the 36 skill pairs at least one of the skills was enabled
across both two accounts in 28 cases. In eight cases, Alexa
did not ﬁnd a matching skill and tried to fulﬁll the request
internally.
For the spelling variant scenario, in eight cases the same
skill was enabled. Proper spelling seems to be preferred over
mistakes (e.g., ‘ﬂick ﬁnder’ over ‘ﬂic ﬁnder’), and American
10
0.00.20.40.60.81.0Similarity0.00.20.40.60.81.0%ofinvocationpairs(CDF)soundex(phonological)nysiis(phonological)metaphone(phonological)levenshtein(character)TABLE VIII: Common Skill-squatting patterns based on the analysis of phonetically similar innovation names.
Description
Occurrences
Examples
Homophone: Similar or homophone utterances
Punctuation: Invocations differed only in punctuation
Word-spacing: Compound words are joined or split differ-
ently
Spelling: Different spellings or spelling mistake
32
18
6
29
“wierd facts” vs. “weird facts”; “hear motivation” vs. “here motivation”; “chuck norris
fan” vs. “chack noris fan”
“the rock of k. c.” vs. “the rock of k c”; “cool one oh ﬁve” vs. “cool one o. ﬁve”; “farmer’s
market” vs. “farmers market”
“world war two facts” vs. “worldwar two facts”; “under water sounds” vs. “underwater
sounds”; “morning check list” vs. “morning check list”
“random colour” vs. “random color”; “travelling facts” vs. “traveling facts”; “recipe
organizer” vs. “recipe organiser”
spelling over British spelling (e.g., ‘recipe organizer’ instead
of ‘recipe organiser’). For the remaining two pairs no matching
skills were activated. Similar results were obtained for punctu-
ation. In eight cases, the same skill was enabled (the remaining
two were internally handled). In all of the succeeding test
cases, invocation names without the use of punctuation was
favored (e.g.,‘farmers market’ instead of ‘farmer’s market’).
For the homophones, six skills were enabled across both