# Shadow Walker: Raising the Bar for Rootkit Detection

## Introduction
**Authors:** Sherri Sparks & Jamie Butler

### What Is a Rootkit?
- **Defining Characteristic:** Stealth.
  - Unlike viruses, which focus on replication, rootkits prioritize hiding their presence.
- **Definition by Greg Hoglund (Author of NT Rootkit):** "A set of programs that patch and trojan existing execution paths within the system."

### What is a Rootkit Used For?
- **Primary Purpose:** Concealing a hacker's presence on a compromised system to enable undetected re-entry at a later time.
- **Indirect Overlap:** With parental control software and spyware.

### Rootkits and x86 Hardware Architecture: Pentium Protection Rings
- **Ring 0 (Kernel Mode):**
  - Full access to all memory and the entire instruction set.
  - Example: Kernel Rootkits
- **Ring 3 (User Mode):**
  - Restricted memory access and limited instruction set availability.
  - Example: User Rootkits

### Rootkits and the Operating System
- **System View:** The user/application view of the system is defined by what the OS provides via the API interface.
- **Hiding Mechanism:** Rootkits intercept and alter communications at the interfaces between various OS components, effectively performing a "man in the middle" attack.

### OS Components Attacked by Rootkits
- **I/O Manager:** Logging keystrokes or network activity.
- **Device & File System Drivers:** Hiding files.
- **Object Manager:** Hiding object (process/thread) handles.
- **Security Reference Monitor:** Disabling security policies governing runtime access checks on objects.
- **Process & Thread Manager:** Hiding processes and threads.
- **Configuration Manager:** Hiding registry entries.

### Generations of Rootkits
- **First Generation:**
  - Replaced or modified system files on the victim’s hard disk.
  - Example: UNIX login program.
- **Second Generation:**
  - Modified static OS components/structures loaded in memory.
  - Techniques: Table-based hooking (IAT, EAT, SSDT, IDT), inline function hooking.
  - Modes: Kernel and user mode rootkits.
- **Third Generation:**
  - Modified dynamic OS objects loaded in memory.
  - Technique: Direct Kernel Object Manipulation (DKOM).
  - Example: FU Rootkit, which unlinks process objects from the Windows dynamically linked list of active process objects.
  - Scope: Virtually unlimited, as kernel objects represent most system entities (processes, threads, drivers, security tokens, etc.).
  - Mode: Exclusively kernel mode rootkits.

### Current Rootkit Detection Methods
- **Behavioral Detection:**
  - Detects the effects of a rootkit on the victim system, potentially identifying unknown rootkits.
  - Examples: PatchFinder by Joanna Rutkowska, VICE by Jamie Butler.
  - Challenges: High false positive rate, requiring skilled users to screen out false positives.
- **Integrity Checking:**
  - Detects unauthorized changes to system files or loaded OS components in memory.
  - Example: Tripwire.
  - Limitation: Ineffective against modern rootkits that make changes in memory rather than on disk.
- **Signature-Based Detection:**
  - Searches memory or the file system for unique byte patterns (signatures) found in the rootkit’s code.
  - Example: AV scanners.
  - Limitation: Ineffective against unknown rootkit/malware variants or obfuscated code.
- **Diff-Based Detection:**
  - Compares the current state of the system with a known good baseline.
  - Examples: Microsoft Strider GhostBuster, System Internals Rootkit Revealer, F-Secure Blacklight.

### Shortcomings of Current Rootkit Technology
- **Vulnerability to Signature Scans and Integrity Checks:**
  - Advanced public kernel rootkits are often detected by simple signature scans and integrity checkers.
  - Rootkit drivers in non-paged memory and modifications to OS components in memory are easily detectable.
  - Need for a method to hide rootkit driver code and its modifications to kernel memory.

### Early Viruses and Polymorphism
- **Similar Problem:**
  - Viruses used polymorphism/metamorphism to vary the appearance of their code.
  - Few rootkits have integrated these techniques.

### Introducing Shadow Walker
- **Prototype for a 4th Generation Rootkit:**
  - Alternative to viral polymorphism: Virtual Memory Subversion.
  - Proof of concept: Transparently controlling the contents of memory viewed by other applications and kernel drivers.
  - Minimal performance impact.

### Implications of Virtual Memory Subversion
- **In-Memory Security Scanners:**
  - Rely on the integrity of their view of memory, even if they don’t use OS APIs.
  - If a scanner’s memory reads can be controlled, signature scanners and heuristic scanners (e.g., VICE) can be fooled.
  - Potential to make known rootkits, viruses, or worms immune to in-memory signature scans.

### Review
- **Windows Virtual Address Space Layout:**
  - Application code, global variables, per-thread stacks, DLLs, Ntoskrnl, HAL, boot drivers, process page tables, system cache, paged pool, nonpaged pool.
- **Virtual Memory:**
  - Separate virtual and physical address spaces.
  - Managed by dividing them into fixed-size blocks (paging) or variable-size blocks (segmentation).
  - Virtual address space can be larger than physical address space.
  - Virtually contiguous memory blocks do not need to be physically contiguous.
- **Virtual to Physical Memory Mapping (Paging):**
  - Virtual and physical memory address spaces divided into same-size blocks (pages and frames).
  - Mapping information kept in page tables (PTEs).
- **X86 PTE Format:**
  - Contains reserved bits, global bit, dirty and accessed bits, cache and write-through bits, owner and write bits, valid bit, and page frame number.
- **Page Faults:**
  - Occur when accessing a virtual address whose PTE indicates the page is not in physical memory.
  - OS may move less recently used pages to disk (pagefile) to satisfy current memory demands.

This revised version aims to provide a clear, coherent, and professional overview of rootkits, their detection methods, and the introduction of Shadow Walker.