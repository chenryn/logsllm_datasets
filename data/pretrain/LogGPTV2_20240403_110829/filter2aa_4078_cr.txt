写)的存储器。 标准 ROM 芯片的内容在 出厂时就被 "烧入"， 并且终端用户无法改变其中的内容。
ROM 芯片通常包含 " 自 引 导指令 " 信息， 也就是计算机在从磁盘上加载操作系统之前用于启动的
信息。 " 自 引 导指令"信息、包含为人熟知的每次引 导 PC 时运行的通电 自检(pow巳r-On SelιTest， POST)
系列诊断程序。
ROM 的主要优点在于不能被修改。 用户或系统管理员意外发生的错误无法清除或修改芯片上
的内容， 这个特性使得 ROM 特别适于协调计算机最 内 层的工作。
有一种 ROM 类型可以被系统管理员在一定范围 内予以修改， 这种 ROM 被称为可编程只读存
储器(Programrnable Read-Only Memory， PROM) ， 并且具有如下所示的 几种子类型:
可编程只读存储器 基本的可编程只读存储器σROM)芯片在功能上与 ROM 芯片非常相似， 但
第 9 章 安全脆弱性、 威胁和对施
是存在一个例外。 在制造过程中 ， PROM 芯片的内容没有在工厂被 " 烧入 "， 这一点与标准的 ROM
芯片不一样。 相反， PROM 芯片井入了特殊的功能， 允许终端用户稍后在芯片中烧入内容。 然而，
烧入过程具有相似的结果: 一旦数据被写入 PROM 芯片， 那么就不能再被更改。 本质上， PROM 芯
片与 ROM 芯片的功能一样。
PROM 芯片为软件开发人员提供了一个在高速的、 定制的存储芯片中永久存储信息的机会。
PROM 芯片被普遍用于需要某些定制功能的硬件开发应用中 ， 但是一旦被编程就无法再进行修改。
可擦除可编程只读存储器(Erasable PROM， EPROM) 由于 PROM 芯片相对昂贵并且软件开
发人员希望能在写入数据之后修改他们的代码， 于是人们开发出 了可擦除 PROM但PROM)。 在这些
芯片上有一个很小的窗口 ， 当用特殊的紫外线光照射时就可以擦除芯片上的内容。 这个过程完成后，
终端用户 就可 以将新的信息烧入 EPROM， 就像它之前从未编程一样 。
电可擦除可编程只读存储器(Electronically ERPOM， EEPROM) 尽管有了一些擦除功能， 但
是 EPROM 的擦除过程仍然有些麻烦。 擦除操作要求从计算机上物理拆除芯片并暴露在一束特殊的
紫外线光之下 。 电可擦除 PROM(EEPROM)是另 一种更灵活的、 更友好的解决方案， 使用送到芯片
引 脚上 的 电压强制进行擦除。 擦除 EEPROM 时 ， 不用从计算机上拆除芯片， 这就比标准的 PROM
和 EPROM 芯片更具吸引力。
闪存 闪存是 EEPROM 的衍生概念。 它是一种非易失性存储媒体， 可 以进行电子擦除和重写。
EEPROM 和 闪存主要的 区别是， EEPROM 必须完全擦除后才能重写， 而 闪存可以 以块或页的方式
进行擦写。 闪存是最常见的 NAND 闪存， 被广泛用于存储卡 、 优盘、 移动设备和 SSD(固态硬盘)。
2. 随机存取存储器
随机存取存储器(Random Access Memory， 良咄，f)是可读和可写的存储器， 包含计算机在处理过
程中使用的信息。 只 有当 电源持续不断供应时， RAM 才能保存其内容。 与 ROM 不一样的是， 当计
算机电源关闭时， 存储在 RAM 内 的所有数据都会消失。 因此， RAM 只被用 于暂时存储数据。 任何
关键数据都不能只存储在 RAM 中 : 而是始终应当在另外的存储设备上保留备份副本， 以防电源突
然 中 断导致发生数据丢失的事件 。 下 面是 RAM 的 几种类型:
实际的存储器 实际的存储器(也被称为主存储器)通常是计算机中可用 的最大的 RAM 存储资
源 。 实际的存储器一般由许多动态的 RAM 芯片组成， 因此， CPU 必须定期对它们进行刷新(要了 解
更多的信息， 请参看真实场景 " 动态 RAM 与静态 RAM" ) 。
高速缓存 RAM 计算机系统包含许多高速缓存。 通过将数据从速度较慢的设备取出并暂时存
储在高性能的设备上， 以便在希望时可以重复使用 。 高速缓存能够提高系统的性能 ， 这称为高速缓
存 RAM。 处理器通常包含一个位于主板上的高速缓存， 这个极快速的存储器被用于保持将要操作
的数据。 这个板上或第 l 级的高速缓存往往由不同芯片上的某个静态 RAM 高速缓存(被称为第 2 级
高速缓存)进行备份， 第 2 级高速缓存保存来 自 计算机主存储器的数据。 类似地， 主存储器中通常包
含存储在磁性介质上的高速缓存信息。 这条存储链连续向下经过存储器/存储设备层次结构， 从而使
得计算机能够通过保持即将使用的数据(用于 CPU 指令、 数据获取、 文件访问或其他操作)更容易获
得来改善性能 。
许多外围设备也使用主板高速缓存来减轻它们对计算机和操作系统造成的负担。 例如， 许多更
高端的打印机包含非常大的 RAM 高速缓存， 这样操作系统可以快速假脱机一项作业给打印机， 并
且随后可以忘记这个打印作业， 也不必等待打印机对所有的请求产生输出结果。 打 印机可以预处理
来 自 主板高速缓存的信息， 从而释放计算机和操作系统继续执行其他任务。
227
CISSP 官方学习指南(第 7 版)
⑧ 真实场景
动态 RAM 与静态 RAM
目 前有 两种主要类型 的良协1: 动 态RAM 和静态RAM. 绝大多数计算机都包含这两种RAM，
并且根据不同 的 目 的对它们加以 使用 。
为 了存储数据， 动态RAM 使用 了 一系 列 电容器， 这些微小 的 电子设备能够保持电荷。 电容器
可能保持电荷(在内存中表示为比特 1)， 也可能没有 电荷(表示为 比特 0)。 但是， 随着时间的流逝，
屯容器会自然放屯 ， 所以 CPU 必须花费时间来刷新动态RAM 的 内 容， 从而确保比特 l 不会无意 中
变为比特 0， 以 免改变存储器中的内容。
静态 RAM 建立在更加复杂 的技术之上 ， 即可以用 于任何 目 的和用 途的逻辑设备: 触发器
(flip-flop)。 触发器是一个 ON/OFF 开关， 必须把开关从一端拔到另一端 ， 让比特从 O 转换到 1 ， 反
之亦然。 因 此， 只要有电源供应 ， 静态存储器就一直保存其中 的 内 容， 并且不需要 CPU 定期进行
原忏斤 。
在价格上， 因 为 电容器比触发器使宜 ， 所以动态RAM比静态RAM 使宜 。 但是， 静态RAM 的
运行速度比动态 RAM 快得多 。 对于 系 统设计人员 来说， 这就产生了 权衡性能价格的 问 题， 因此系
统设计者通常会使用 静态RAM与 动 态RAM 相组合的 方式， 从而达到 费 用 与性能的平衡。
3. 寄存器
CPU 还包括一种有限容量的板上存储器， 即寄存器。 在执行计算或处理指令时， 寄存器为 CPU
的核心部分(也就是算术逻辑单元(Arithmetic-Logical Unit， ALU))提供可直接访问 的存储位置。 事实
上 ， 除 了数据作为指令的一部分直接提供外， ALU 操纵的任何数据必须被载入寄存器。 这种存储器
类型的主要优点是 ALU 本身的一部分， 因 此计算速度与标准的 CPU 速度一致。
4. 存储器寻址
当利用存储器资源时， 处理器必须具有引 用存储器中不同位置的方法。 解决这个问题的办法被
称为寻址， 并且在不同 的环境中存在多种不同的寻址方案。 接下来我们将讨论 5 种比较常用 的寻址
方案:
寄存器寻址 前面曾 经提到过， 寄存器直接安装在 CPU 上的非常小的存储位置。 当 CPU 需要
从某个寄存器中获得信息来完成操作时 ， 可 以使用寄存器地址(例如 ， " 寄存器 1 " )去访问 寄存器的
内容。
228
立即寻址 就其本身而言， 立即寻址并不是一种技术上的存储器寻址方案， 而是引用某些数据
的一种方法， 这些数据作为指令的一部分提供给 CPU 使用 。 例如， CPU 可能处理命令 "将寄存器 l
中 的数值与 2 相加 "。 这条命令使用两种寻址方案。 第一种方案是作为命令一部分的直接寻址， 即告
诉 CPU 将数值 2 加进去并且不需要从某个存储器位置检索该数值。 第二种方案是寄存器寻址， 即命
令 CPU 从寄存器 l 中取出数值 。
直接寻址 在直接寻址中 ， 要访问 的存储器位置的实际地址会被提供给 CPU。 这个地址必须与
正在执行的指令位于相同的存储页面上。 因为与重新编写立即寻址的硬编码数据相 比， 存储位置的
内 容能够更容易地被改变， 所以直接寻址 比立即寻址更灵活。
第9章 安全脆弱性、 威胁和对施
间接寻址 间接寻址使用 的方案类似于直接寻址。 但是， 作为指令的一部分提供给 CPU 的存储
器地址并不包含 CPU 用作操作数的真实数值。 实际上， 存储器地址中包含另一个存储器地址(也许
位于不同 的页面上)0 CPU 通过读取间接地址来 了解待操作数据驻留 的位置， 随后从这个地址取出
真实的操作数。
基址+偏移量寻址 基址叫扁移量寻址使用存储在某个 CPU 寄存器中的数值作为开始计算的基
址 。 然后 ， CPU 将指令提供的偏移量与基址相力日 ， 并从计算得到 的存储位置取出 操作数。
5 辅助存储器
" 辅助存储器" 这个术语通常是指磁'即光学介质或者包含 CPU 不能立刻获得的数据的其他存
储设备。 为了让 CPU 能够访问辅助存储器中 的数据， 数据必须先由操作系统读取并存储在实际的存
储器中 。 但是， 辅助存储器比主存储器的价格便直许多， 而且可以被用于存储大量的信息。 在这种
环境下 ， 硬盘、 软盘和光学介质(例如， CD 和 DVD)都可以作为辅助存储器使用 。
虚拟存储器是一种特殊类型的辅助存储器， 由操作系统负责管理， 就好像实际的存储器一样。
虚拟存储器中最常见的类型是绝大多数操作系统作为其内存管理功能一部分进行管理的页面文件。
这种特殊格式化的文件包含先前被存储在存储器中但近期并不使用的数据。 当操作系统需要访问在
页面文件中保存的地址时， 会查看页面是驻留在存储器中(如果驻留在存储器中 ， 就可 以立即进行访
问)还是被交换到磁盘中(如果被交换到磁盘中 ， 就会将数据从磁盘读回 实际的存储器中 ， 这个过程
也被称为分页)。
使用虚拟存储器是一种廉价的方法， 使得计算机在运行时拥有的存储器就好像比物理安装的实
际存储器多 。 虚拟存储器的主要缺点是: 在主存储器和辅助存储器之间交换数据时进行分页操作的
速度相对较惺(微秒级的存储功能、 毫秒级的磁盘系统; 通常这意味着量级相差 3 个级别)， 并且会
消 耗计算机的 大量开销和减缓整个系统的速度。
6. 存储器的安全问题
存储器存储并处理数据， 而某些数据可能极其敏感。 因此， 我们很有必要了 解各种不同类型的
存储器并了解它们如何存储和保留数据。 任何保留敏感数据的存储器设备在由于某种原因被允许离
开组织之前， 应当清除里面的数据。 这一点对于辅助存储器和 ROMIPROM厄PROMlEEPROM 设备
来说尤其重要， 原因在于这些设备在 电源供应被切断后仍然可 以保留数据 。
然而， 存储器的数据保留 问题不仅限于那些被设计用于保留数据的存储器类型。 前面曾经介绍
过， 静态 也创 和动态 RAM 芯片是通过电容器和触发器来存储数据的(参见前面的真实场景 "动态
RAM 与静态 RAM " )。 从技术上讲， 在电源被切断后， 这些电子元件在有限的一段时间 内仍有可能
保存一些电量。 从理论上讲， 一位技术经验丰富的人可以针对这些元件采取电子方法， 然后从设备
上取出存储的部分数据。 不过， 这需要有丰富的技术方面的专业知识， 除才附手拥有令人难以置信
的财力和资源 ， 否则不可能构成威肋 。
当系统被关闭或 RAM 被从主板上拔出时， 也有一种冻结存储器芯片以延迟驻留数据衰减的攻
击 ， 参见 http://en.wikipedia.org/wiki/ cold-boot.attack。
警告 :
由RAM芯 片 引起的最大安全威胁其实非常简单: RAM 芯片 经常被盗。 毕竟， 谁也不会每天都
检查 自 己的计算机中 究竟有多 少存储器? 某些人可能轻易地从大量系统中拆除很少一部分存储器，
229
CISSP 官方学 习指南(第 7 版)
然后将这些具有很高价值的 芯片放在一个小 包里带出房间 。 然而， 因 为存储器芯片 的价格不断下跌，