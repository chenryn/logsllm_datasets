may  choose  to  hide  processes  only  from  Task  Manager 
and tlist. The GhostBuster design described  so  far will not 
detect  such  ghostware  because  the  tool  cannot  experience 
the  hiding  behavior.  It  is  also  possible  for  ghostware  to 
target  GhostBuster  so  that  resources  are  hiding  from  all 
running programs except the GhostBuster process. 
process  list  to  support  OS  functionalities  other  than 
To  address  these  two  issues,  we  have  implemented  a 
responding  to  enumeration  queries.  Similarly,  to  detect 
GhostBuster  extension  in  the  form  of  a  DLL.  Instead  of 
hidden modules, our low-level scan extracts the truth of all 
running  the  GhostBuster  EXE  that  can  be  easily  targeted, 
modules  loaded  by  all  processes  from  a  kernel  data 
we inject the GhostBuster DLL into every running process 
structure and compares that with the high-level API scan.  
and  perform  the  scans  and  diff  from  inside  each  process, 
Outside-the-box scanning of volatile resources such as 
processes  and  modules  requires  an  additional  step  of 
making  the  image  of  the  relevant  memory  address  space 
available  outside.  Ideally,  a  PCI-add-in  card  as  described 
in  the  Copilot  paper  [PFM+04]  or  a  Myrinet  NIC  as 
described  in  the  Bookdoors  paper  [BNG+04]  should  be 
used  to  retrieve  volatile  data  through  Direct  Memory 
Access  (DMA)  without  the  knowledge  or  intervention  of 
the  potentially  infected  OS.  To  allow  users  without  the 
extra  hardware  to  use  GhostBuster  today,  we  obtain  a 
“truth  approximation”  by  inducing  a  blue  screen  (i.e., 
kernel  crash)  to  generate  a  memory  dump  file,  and  apply 
similar kernel data structure traversal code to the dump file 
to  perform  the  outside-the-box  scan.  This  is  only  an 
approximation  because  future  ghostware  programs  can 
potentially  trap  the  blue-screen  events  and  remove  all 
essentially  turning  every  process  into  a  GhostBuster.  In 
particular,  OS  utilities  such  as  Windows  Explorer,  Task 
Manager,  and  RegEdit  are  now  all  GhostBusters.  This 
makes  it  more  difficult  for  ghostware  programs  to  target 
GhostBuster,  while  hiding 
from  common  utilities. 
Injecting  GhostBuster 
into  an  anti-virus  scanner 
is 
particularly  interesting.  As  a  demonstration,  we  set  up  a 
Hacker  Defender-infected  machine,  installed  the  eTrust 
anti-virus  software,  and  ran  the  on-demand  scanner.  The 
scanner  could  not  detect  Hacker  Defender,  even  though  it 
did  have  the  known-bad  signatures.  We  then  injected  the 
GhostBuster DLL into the scanner process InocIT.exe; that 
allowed  InocIT.exe  to  detect  Hacker  Defender’s  hidden 
entries.  This  combination  creates  a  dilemma  for  malware 
programs:  they  will  be  detected  by  GhostBuster  if  they 
hide  from  InocIT.exe  and  by  the  eTrust  signatures  if  they 
traces of themselves from the memory dump. 
do not hide. 
Experimental Results
Another  potential  attack  on  GhostBuster  is  to  hide  a 
large number of innocent files, together with the ghostware 
Figure  6  shows  the  results  of  GhostBuster  detecting 
files.  Although  this  would  make  it  more  difficult  to 
four  process-hiding  and  one  module-hiding  ghostware 
identify ghostware files, the GhostBuster tool still provides 
programs.  The 
first 
three,  namely  Aphex,  Hacker 
effective  detection  of  ghostware  infection  in  this  case 
Defender,  and  Berbew,  can  be  detected  by  using  the 
because the existence of a large number of hidden files is a 
Active  Process  List  as  the  truth,  while  FU  can  only  be 
serious anomaly. 
detected  by  running  GhostBuster  in  the  advanced  mode. 
Since  the  hidden  vanquish.dll  is  injected  into  many 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:20 UTC from IEEE Xplore.  Restrictions apply. 
Automating the Outside-the-box Solution
distribution  of  the  OS  to  scan  the  same  set  of  partitions. 
There  are  two  extensions  that  can  be  implemented  to 
automate  the  outside-the-box  ghostware  detection  and 
greatly enhance its usability. In an enterprise environment, 
the CD boot can be replaced by a network boot through the 
Remote  Installation  Service  (RIS)  [RIS]:  upon  a  reboot,  a 
client machine contacts the RIS server to obtain a network 
boot  loader, which  then performs the  outside-the-box  scan 
and diff.  
Our  results  showed  that  the  cross-view  diff  reports 
contained zero or very  few  false positives: in all cases, the 
number  of  false  positives  was  four  or  less,  and  they  were 
mostly  temporary  files  and  log  files  generated  by  system 
daemons  such  as  FTP.  We  also  experimented  with  the 
T0rnkit rootkit [ZT] that replaces OS utility programs with 
trojanized  versions.  The  GhostBuster  approach  could 
detect its hidden files as well.  
Another  approach  is  to  use  a  Virtual  Machine  (VM): 
6. Conclusions
we  include  a  clean  version  of  VM  on  the  GhostBuster 
WinPE CD  and ask  the user  to  boot  the machine  from  the 
Stealth  malware  programs  are  becoming  a  serious 
CD.  The  GhostBuster  process  will  automatically  start  and 
threat  to  the  future  of  the  Internet, and  yet  they have  been 
insert an ASEP hook  to  the potentially  infected  boot drive 
dealt  with  mostly  in  an  ad-hoc  fashion.  In  this  paper,  we 
to enable auto-start of a high-level scan, and then launch a 
have  described  a  cross-view  diff-based  framework  for 
VM  instance  to  boot  from  that  drive.  Inside  the  VM 
systematic detection of ghostware programs that hide files, 
instance,  the  scanning  code  will  save  the  scan  result  file 
Registry,  processes,  and  loaded  modules.  We  have 
and  notify  the  host  machine  of  its  completion.  The  host 
proposed using the inside-the-box diff  of a high-level scan 
machine  then  “powers  down”  the  VM  instance,  grabs  the 
and  a  low-level  scan  to  provide  an  efficient,  automatic 
released  infected  drive,  executes  the  outside-the-box 
solution  that  can  be  run  frequently  to  detect  most  of 
scanning  code,  removes  the  added  ASEP  hook,  and 
today’s  ghostware  programs.  Experimental  results  have 
invokes  the  comparison  code.  If  no  hidden  resource  is 
shown that it takes only seconds to detect hidden processes 
detected,  the  machine  is  rebooted  normally  into  its  boot 
and  modules,  tens  of  seconds  to  detect  hidden  critical 
drive. 
Registry  entries,  and  a  few minutes  to  detect  hidden  files. 
A  similar  technique  can  be used  when  the ghostware-
In  the  case  of  Hacker  Defender,  the  most  popular 
infected machine  is  in  fact  a VM. As  a demonstration, we 
Windows  rootkit  today  according  to  Product  Support 
set  up  a  Hacker  Defender-infected  VM  using  the  Virtual 
Service engineers, we were able to deterministically detect 
PC  software  and  performed  an  infected  scan  inside  the 
its  presence  within  5  seconds  through  hidden-process 
VM.  We  then  “powered  down”  the  VM  and  scanned  the 
detection,  locate  its hidden  auto-start Registry keys  within 
virtual disk drive from the host machine using a utility that 
one  minute,  remove  the  keys  to  disable  the  malware,  and 
allows  a  virtual  drive  to  appear  as  a  normal  drive  on  the 
reboot the machine to delete the now-visible files.  
host  machine.  A  diff  of  the  two  scans  revealed  all  the 
We  have  also  proposed  an  outside-the-box,  CD-boot 
hidden  files  and  contained  zero  false  positive  because  the 
solution  to  detect  more  advanced  ghostware  that  may 
two scans were performed on exactly the same drive image 
interfere  with  the  inside-the-box  scans.  Experimental 
in such a VM setting. 
results  based  on  12  real-world  ghostware  programs 
Detecting Linux/Unix Ghostware
showed that, while they employ a wide variety of resource-
hiding  techniques,  they  can  all  be  uniformly  detected  b y 
Similar  ghostware  problems  exist  on  the  Linux/Unix 
GhostBuster’s  diff-based  approach  that  targets  the  hiding 
platforms  as  well  [PFM+04,YKS,YC,YW98,B99,YA03]. 
behavior  and  effectively  turns  the  problem  into  its  own 
(In  fact,  the  term  “rootkit”  originated  from  the  root 
solution.  False  positives  in  a  cross-view  diff  report  are 
privilege  concept  on  Unix  platforms.)  A  common 
minimal and can be easily filtered out. 
technique used by Linux/Unix ghostware programs to hide 
resources  is  to  intercept  system  calls  to  the  kernel  via  a 
Loadable  Kernel  Module 
(LKM) 
[ZK,YJ,J01].  For 
example,  some  rootkits  are  known  to  hook  read,  write, 
close,  and  the getdents  (get directory  entries)  system  calls. 
More  advanced  rootkits  can  directly  patch  the  kernel  in 
memory [YC98,YL01]. 
As  we  pointed  out  in  the  Introduction,  the  problem 
space of stealth software is broader than that of ghostware, 
which has been our focus so far. Stealth software may hide 
their  persistent  state  in  a  form  for  which  current  OS  does 
not  provide  query/enumeration  APIs  or  does  not  provide 
common  utilities  that  make  use  of  such  APIs.  Examples 
include  hiding  executable  code  inside  the  BIOS  [YB], 
We  have  experimented  with  several  file-hiding 
video  card  EEPROM,  boot  sectors  [D],  bad  disk  sectors, 
rootkits  including  Darkside  0.2.3  [ZD]  for  FreeBSD,  and 
Alternate  Data  Streams  (ADS),  etc.  Stealth  software  can 
Superkit  [ZS]  and  Synapsis  for  Linux.  For  the  inside-the-
also hide their active running code in a form that cannot be 
box high-level scan, we used the “ls” command to scan all 
revealed  by  the  process/module  query  APIs;  they  can 
mounted  partitions.  For  the  outside-the-box  scan,  we  used 
inject  code  into  an  existing  process  and hijack  a  thread  to 
the  same  command  from 
the  clean,  bootable  CD 
execute  that  code.  Detection  of  these  advanced  hiding 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:20 UTC from IEEE Xplore.  Restrictions apply. 
techniques  is  beyond  the  scope  of  this  paper  and  we  plan 
Checker,”  in  Proc.  of  the  2
  ACM  Conf.  on  Computer  and 
nd
to pursue them as future work. 
Communications Security, pp. 18-29, Nov. 1994. 
As  a  final note, most  of  today’s Windows  rootkits  do 
[MSDN] Naming a File, 
not  modify  OS  files  or  memory  image;  rather,  they 
http://msdn.microsoft.com/library/default.asp?url=/library/en-
“extend”  the  OS  through  ASEP  hooking  in  a  way  that  is 
us/fileio/base/naming_a_file.asp.
indistinguishable 
from  many  other  good 
software 
[PE] Process Explorer, 
programs  that also  extend the OS. Therefore,  it  is difficult 
http://www.sysinternals.com/ntw2k/freeware/procexp.shtml.
to  apply  the  genuinity  tests  and  software-based  attestation 
[PF] How to Disable the Prefetcher Component in Windows XP, 
techniques  that detect deviations  from  a known-good hash 
http://support.microsoft.com/?kbid=307498.
of  a  well-defined  OS  memory  range  [KJ03,SPDK04].  On 
[PFM+04]  Nick  L.  Petroni,  Jr.,  Timothy  Fraser,  Jesus  Molina, 
the other hand, these techniques can detect both hiding and 
and  William  A.  Arbaugh,  “Copilot  -  a  Coprocessor-based 
non-hiding malware programs  that modify  the OS  and  are 
complementary to the GhostBuster approach.   
Kernel  Runtime  Integrity  Monitor,”  in  Proc.  Usenix  Security 
Symposium, Aug. 2004. 
[R00] John Robbins, Debugging Applications, 2000. 
Acknowledgement 
[RIS] Remote Installation Services, 
We  would  like  to  express  our  sincere  thanks  to David 
fault.asp?url=/windows2000/en/datacenter/help/sag_RIS_Defa
Brumley,  Aaron  Johnson,  Lee  Yan,  Bill  Arbaugh,  Dan 
ult_topnode.htm.
Simon, and Brad Daniels for their valuable discussions and 
[SPDK04]  A.  Seshadri,  A.  Perrig,  L.  van  Doorn,  and P.  Khosla, 
http://www.microsoft.com/windows2000/en/datacenter/help/de
to  the  reviewers  for  their  valueable  comments.  The MFT-
based  technique  was  inspired  by  discussions  with  Robert 
Hensing,  and  the  implementation  was  based  on  the  code 
provided by Ed Elliott and Takefumi Kakimoto. 
References  
“SWATT:  SoftWare-based  ATTestation 
for  Embedded 
Devices,” in Proc. IEEE  Symp.  on  Security  and Privacy, May 
2004. 
[SR] Windows XP System Restore, 
http://msdn.microsoft.com/library/default.asp?url=/library/en-
us/dnwxp/html/windowsxpsystemrestore.asp.   
[SRM] System Restore Monitored File Extensions, 
http://msdn.microsoft.com/library/default.asp?url=/library/en-
[AID] Working with the AppInit_DLLs registry value, 
us/sr/sr/monitored_file_extensions.asp.   
http://support.microsoft.com/kb/q197571/.
[SR00] D. A. Solomon  and M. E. Russinovich,  Inside Microsoft 
[B99] D. Brumley, “Invisible Intruders: Rootkits In Practice,” 
Windows 2000, Third Edition, 2000. 
;login: The Magazine of USENIX and SAGE, 
http://www.usenix.org/publications/login/1999-
9/features/rootkits.html, 1999. 
[W04]  “Strider  GhostBuster:  Why  It's  A  Bad  Idea  For  Stealth 
Software  To  Hide  Files,”  Yi-Min  Wang,  Usenix  Security 
Symposium,  Work-in-Progress 
Report 
presentation, 
[BNG+04]  A.  Bohra,  I.  Neamtiu,  P.  Gallard,  F.  Sultan,  and  L. 
http://www.usenix.org/events/sec04/tech/wips/, Aug. 2004.  
Iftode,  “Remote  Repair  of  Operating  System  State  Using 
[WPE] Microsoft Windows Preinstallation Environment 
Backdoors,”  in  Proc.  Int.  Conf.  on  Autonomic  Computing 
(Windows PE), 
(ICAC), pp. 256-263, May 2004. 
http://www.microsoft.com/licensing/programs/sa/support/winp
[D] Chapter 7 - Disk, File System, and Backup Utilities, 
e.mspx.
Microsoft TechNet, 
http://www.microsoft.com/technet/prodtechnol/winntas/suppor
t/utilitys.mspx.
[WR+04]  Yi-Min Wang,  et  al.,  "AskStrider: What Has Changed 
on  My  Machine  Lately?",  Microsoft  Research  Technical 
Report MSR-TR-2004-03, Jan. 2004.  
[HB99]  Galen  Hunt  and  Doug  Brubacher.  “Detours:  Binary 
[WRV+04]  Yi-Min  Wang,  Roussi  Roussev,  Chad  Verbowski, 
Interception  of  Win32  Functions,”  in  Proc.  the  3rd  Usenix 