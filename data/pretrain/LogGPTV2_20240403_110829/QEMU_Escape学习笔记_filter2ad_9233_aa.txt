# QEMU Escape学习笔记
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 环境搭建
###  1、源码安装qemu
qemu最好通过下载源码安装方式，如果通过apt安装，会依赖当前ubuntu的版本，qemu的版本比较老。
    #下载源码
    wget https://download.qemu.org/qemu-5.0.0.tar.xz 
    #安装依赖
    sudo apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev
    #编译
    tar xvJf qemu-5.0.0.tar.xz
    cd qemu-5.0.0
    ./configure
    make #这一步编译可能需要30分钟左右
    sudo make install
    #接下来测试命令
    qemu-system-x86_64 --version
    #QEMU emulator version 5.0.0
    #Copyright (c) 2003-2020 Fabrice Bellard and the QEMU Project developers
###  2、可能遇到的问题
  1. KVM kernel module: No such file or directory  
在启动qemu的过程中如果遇到`Could not access KVM kernel module: No such file or
directory`问题，需要检查虚拟机->设置->处理器中的虚拟化引擎的虚拟化Inter VT-x/EPT 或AMD-V/RVI是否开启。
  2. KVM kernel module: Permission denied  
启动qemu 在开启-enable-kvm时遇到以下问题
        Could not access KVM kernel module: Permission denied
    failed to initialize KVM: Permission denied
通过查资料，发现时kvm权限问题，于是运行以下命令
        $ sudo chown root:kvm /dev/kvm
    #chown: invalid group: ‘root:kvm’
又遇到问题，可能没有安装qemu-kvm，参考
        $ sudo apt install qemu-kvm
安装完后配置权限
        root[@ubuntu](https://github.com/ubuntu "@ubuntu"):# sudo adduser $USER kvm
    Adding user `root' to group `kvm' ...
    Adding user root to group kvm
    Done.
    root[@ubuntu](https://github.com/ubuntu "@ubuntu"):# chown $USER /dev/kvm
    root[@ubuntu](https://github.com/ubuntu "@ubuntu"):# chmod 666 /dev/kvm
    root[@ubuntu](https://github.com/ubuntu "@ubuntu"):# ll /dev/kvm
    crw-rw---- 1 root kvm 10, 232 Nov 18 17:21 /dev/kvm
    root[@ubuntu](https://github.com/ubuntu "@ubuntu"):# systemctl restart libvirtd.service
    Failed to restart libvirtd.service: Unit libvirtd.service not found.
又出现错误，参考
        root[@ubuntu](https://github.com/ubuntu "@ubuntu"):# kvm-ok
    INFO: /dev/kvm exists
    KVM acceleration can be used
    root[@ubuntu](https://github.com/ubuntu "@ubuntu"):# apt install -y qemu qemu-kvm libvirt-daemon libvirt-clients bridge-utils virt-manager
安装完后，测试成功
        root[@ubuntu](https://github.com/ubuntu "@ubuntu"):/home/leo/Desktop/strng/strng# systemctl status libvirtd.service
    ● libvirtd.service - Virtualization daemon
    Loaded: loaded (/lib/systemd/system/libvirtd.service; enabled; vendor preset:
    Active: active (running) since Wed 2020-11-18 19:06:08 PST; 48s ago
      Docs: man:libvirtd(8)
            https://libvirt.org
    Main PID: 54248 (libvirtd)
     Tasks: 19 (limit: 32768)
    CGroup: /system.slice/libvirtd.service
            ├─54248 /usr/sbin/libvirtd
            ├─54723 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/defaul
            └─54724 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/defaul
        root[@ubuntu](https://github.com/ubuntu "@ubuntu"):~# systemctl restart libvirtd.service
    root[@ubuntu](https://github.com/ubuntu "@ubuntu"):~# ./launch.sh 
    [    0.000000] Initializing cgroup subsys cpuset
    [    0.000000] Initializing cgroup subsys cpu
    [    0.000000] Initializing cgroup subsys cpuacct
启动成功！！！
## HITB GSEC2017 babyqemu
###  Step1 : 分析设备
运行一下命令解包
    mkdir core
    cd core
    cpio -idmv revision = 16;
      v2->class_id = 255;
      v2->realize = pci_hitb_realize;
      v2->exit = pci_hitb_uninit;
      v2->vendor_id = 0x1234;
      v2->device_id = 0x2333;
    }
可以看到设备号device_id=0x2333，功能号vendor_id=0x1234
接着在ubuntu中查看pci的I/O信息，运行`sudo ./lauch.sh`，遇到错误`./qemu-system-x86_64:
/usr/lib/x86_64-linux-gnu/libcurl.so.4: version `CURL_OPENSSL_3' not found
(required by ./qemu-system-x86_64)`  
运行`sudo apt-get install libcurl3`可以解决
    # lspci -v
    00:00.0 Class 0600: 8086:1237
    00:01.3 Class 0680: 8086:7113
    00:03.0 Class 0200: 8086:100e
    00:01.1 Class 0101: 8086:7010
    00:02.0 Class 0300: 1234:1111
    00:01.0 Class 0601: 8086:7000
    00:04.0 Class 00ff: 1234:2333 -> hitb
    # cat /sys/devices/pci0000\:00/0000\:00\:04.0/resource
    0x00000000fea00000 0x00000000feafffff 0x0000000000040200
    0x0000000000000000 0x0000000000000000 0x0000000000000000
resource文件内容的格式为start end flag
。在resource0文件中，根据flag最后一位为0可知存在一个MMIO的内存空间，地址为0xfea00000，大小为0x100000。
然后看hitb设备注册了什么函数，分析pci_hitb_realize函数
    void __fastcall pci_hitb_realize(PCIDevice_0 *pdev, Error_0 **errp)
    {
      pdev->config[61] = 1;
      if ( !msi_init(pdev, 0, 1u, 1, 0, errp) )
      {
        timer_init_tl(&pdev[1].io_regions[4], main_loop_tlg.tl[1], 1000000, hitb_dma_timer, pdev);//timer结构体，回调函数为hitb_dma_timer
        qemu_mutex_init(&pdev[1].io_regions[0].type);
        qemu_cond_init(&pdev[1].io_regions[1].type);
        qemu_thread_create(&pdev[1].io_regions[0].size, "hitb", hitb_fact_thread, pdev, 0);
        memory_region_init_io(&pdev[1], &pdev->qdev.parent_obj, &hitb_mmio_ops, pdev, "hitb-mmio", 0x100000uLL);//注册mmio内存空间，内存操作结构体hitb_mmio_ops
        pci_register_bar(pdev, 0, 0, &pdev[1]);
      }
    }
注册了timer结构体，其回调函数为hitb_dma_timer；同时也注册了hitb_mmio_ops内存操作的结构体，其包含hitb_mmio_read和hitb_mmio_write两个操作。  
得到了重点函数
    hitb_mmio_read
    hitb_mmio_write
    hitb_dma_timer
###  Step2 : 分析函数
在分析以上三个函数之前，需要先搞懂设备的结构体，在Local type中搜索hitb可以找到HitbState
    struct __attribute__((aligned(16))) HitbState
    {
      PCIDevice_0 pdev;
      MemoryRegion_0 mmio;
      QemuThread_0 thread;
      QemuMutex_0 thr_mutex;
      QemuCond_0 thr_cond;
      _Bool stopping;
      uint32_t addr4;
      uint32_t fact;
      uint32_t status;
      uint32_t irq_status;
      dma_state dma;
      QEMUTimer_0 dma_timer;
      char dma_buf[4096];
      void (*enc)(char *, unsigned int);
      uint64_t dma_mask;
    };
    struct dma_state
    {
      uint64_t src;
      uint64_t dst;
      uint64_t cnt;
      uint64_t cmd;
    };
####  hitb_mmio_read
    uint64_t __fastcall hitb_mmio_read(HitbState *opaque, hwaddr addr, unsigned int size)
    {
      if ( size == 4 )
      {
        if ( addr == 128 ) return opaque->dma.src;
        if ( addr == 140 ) return *(&opaque->dma.dst + 4);
        if ( addr == 132 ) return *(&opaque->dma.src + 4);
        if ( addr == 136 ) return opaque->dma.dst;
        if ( addr == 144 ) return opaque->dma.cnt;
        if ( addr == 152 ) return opaque->dma.cmd;
        if ( addr == 8 ) return opaque->fact;
        if ( addr == 4 ) return opaque->addr4;
        if ( addr == 32 ) return opaque->status;
        if ( addr == 36 ) return opaque->irq_status;
     }
size==4，通过addr读取结构体数据
####  hitb_mmio_write
    void __fastcall hitb_mmio_write(HitbState *opaque, hwaddr addr, uint64_t val, unsigned int size)
    {
      if ( (addr > 0x7F || size == 4) && (!((size - 4) & 0xFFFFFFFB) || addr dma.cmd & 1))
            opaque->dma.src = val;
        if ( addr == 140 && !(opaque->dma.cmd & 1))
            *(&opaque->dma.dst + 4) = val;
        if ( addr == 144 && !(opaque->dma.cmd & 1) )
            opaque->dma.cnt = val;
        if ( addr == 152 && val & 1 && !(opaque->dma.cmd & 1) )
        {
            opaque->dma.cmd = val;
            v7 = qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL_0);
            timer_mod(&opaque->dma_timer, (((4835703278458516699LL * v7) >> 64) >> 18) - (v7 >> 63) + 100);//触发timer
        }
        if ( addr == 132 && !(opaque->dma.cmd & 1))
            *(&opaque->dma.src + 4) = val;
        if ( addr == 136 && !(opaque->dma.cmd & 1) )
            opaque->dma.dst = val;
       }
    }
关键的操作如上所示，都需要满足的条件`size==4 &&
opaque->dma.cmd&1==0`，其中当`addr==152`时触发timer，调用hitb_dma_timer函数
####  hitb_dma_timer
    void __fastcall hitb_dma_timer(HitbState *opaque)
    {
      v1 = opaque->dma.cmd;
      if ( v1 & 1 )
      {
        if ( v1 & 2 )
        {
          v2 = (LODWORD(opaque->dma.src) - 0x40000);
          if ( v1 & 4 )
          {    //v1==7
            v7 = &opaque->dma_buf[v2];
            (opaque->enc)(v7, LODWORD(opaque->dma.cnt));//调用enc函数指针