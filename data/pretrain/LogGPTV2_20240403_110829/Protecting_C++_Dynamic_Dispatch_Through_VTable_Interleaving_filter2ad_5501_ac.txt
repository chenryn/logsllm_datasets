the larger function and can be used directly rather than being
...
class E {
public:
int mE;
virtual void faz();
}
class D : public E, public B {
...
(a) C++ Code
(b) Class Hierarchy
Fig. 15: Multiple Inheritance Example
Fig. 16: Multiple Inheritance Memory Layout for D
loaded from the object. Similarly to the case of singleton
ranges we believe these callsites have not been devirtualized by
LLVM since devirtualization is the result of language agnostic
passes.
VII. COMPLEX CLASS HIERARCHIES
Our discussion so far assumed a simple tree-shaped hierar-
chy. C++ however supports multiple and virtual inheritance,
which result
in non-tree class hierarchies. To explain our
handling of these we extend the example in Figure 1 with
multiple inheritance by adding another base class E for D
(Figure 15).
To handle multiple inheritance C++ dictates that for classes
with multiple bases a separate sub-object is emitted within each
object instance - one for each direct base class. Furthermore
each sub-object contains a separate vptr pointing into a differ-
ent sub-vtable within the object’s vtable. In the ABI’s terms the
object’s vtable becomes a vtable group consisting of multiple
primitive vtables. For example Figure 16 shows the two sub-
objects within D corresponding to the two base classes - E and
B.
Each sub-object contains a vptr to a different sub-vtable
within D’s vtable group. Note that since each primitive vtable
inherits its layout from precisely one (primitive) base vtable
we can break down a complex hierarchy into several simple
tree-shaped hierarchies containing only primitive vtables, as
shown in Figure 17
Virtual Inheritance throws a kink in this approach as virtual
diamonds can sometimes result in diamonds even in the de-
composed hierarchies. We handle these cases by breaking one
of the diamond edges to layout the vtables. This necessitates
support for multiple ranges per check. In practice multiple
ranges per check are very rare. Even in our largest benchmark
(chrome), the average number of ranges per callsite is very
close to 1 (≈ 1.005).
This decomposition allows us to reduce complex hierar-
chies with both multiple and virtual inheritance to forests of
7
Fig. 17: Decomposed Class Hierarchy
Order(R)
// List of ordered and aligned vtable entries
ovtbl = [ ]
order = pre(R)
// Map of new address points for each class
{ }
addrPtM =
n = max(len(vtbl(C)) for C in order)
padLen = 2(cid:100)log2(n)(cid:101) + 1
for C in order do
v = vtbl(C)
nzeros = padLen - ((len(ovtbl)+addrPt(v)) mod padLen)
ovtbl.append(zeros(nzeros))
addrPtM[C] = len(ovtbl) + addrPt(v)
ovtbl.append(v)
return (ovtbl, addrPtM)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
Fig. 18: VTable Ordering Algorithm: Given the root R of a
tree in the decomposed class hierarchy, the Order function
returns the ordered vtable layout in memory, and a map from
each class to its address point in the memory layout.
primitive tree hierarchies which we know how to handle.
VIII. ALGORITHMS
In this section we discuss the algorithms used for building
Ordered and Interleaved VTables and their correctness. For
both, we assume that the class hierarchy has already been
decomposed into a collection of trees containing only primitive
vtables. Both algorithms operate on one tree at a time. We
denote by pre(R) the list of classes of a tree rooted at class
R in preorder traversal order. We further denote by vtbl(C)
the primitive vtable for class C (represented as a list of entries)
in the tree, by addrPt(v) the offset of the unique address
point in the primitive vtable v and by zeros(n) a function
returning a list of n zeros.
A. Ordering
To build Ordered VTables, for each tree in the class
hierarchy, we follow the algorithm in Figure 18. The presented
algorithm ﬁnds the size of the largest vtable n (line 8) in the
current tree, and using n, stores in padLen a sufﬁciently large
power of 2 (line 9) so that no two consecutive address points
in the preorder traversal are more than padLen entries apart.
Next it performs a preorder traversal and appends primitive
vtables consecutively (lines 11-16), while adding sufﬁcient
0-padding (lines 13-14) before each appended vtable (line
16) so that its address point is a multiple of padLen. The
algorithm returns the newly ordered vtables ovtbl along
with the generated map addrPtM describing the new address
points of all classes in the tree. This information is sufﬁcient
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
Interleave(R)
// Map (classes->(old indices->new indices))
newInd = { }
ivtbl = [ ] // list of interleaved entries
order = pre(R)
posM = { } // Map (classes->cur. position)
addrPtM = { } // Map (classes->new addr. point)
i = 0
for C in order do
posM[C] = 0
addrPtM[C] = i
i++
do
for C in order do
v = vtbl(C)
if (posM[C] < len(v))
newInd[C][posM[C]] = len(ivtbl) - addrPtM[C]
ivtbl.append(v[posM[C]])
posM[C]++
while (ivtbl changes)
return (ivtbl, addrPtM, newIndM)
Fig. 19: VTable Interleaving Algorithm: : Given the root R of
a tree in the decomposed class hierarchy, the Interleave
function returns the interleaved vtable layout in memory, a
map from each class to its address point in the memory
layout, and a map from each class and each index in its old
vtable to the corresponding new index in the memory layout.
to generate checks and update all uses of the old vtables with
the new ordered ones.
Termination. The algorithm obviously terminates (it contains
a single bounded loop) and preserves all original primitive
vtables in t in ovtbl (since it appends each at some iteration
in line 16).
Correctness. Since addrPtM[C] is set only once for each
class C at line 15, and at that point it correctly reﬂects C’s
new address point in ovtbl we can reason that addrPtM
correctly translates address points.
To show that address points can be efﬁciently checked for
any subtree in C, it is sufﬁcient to note that:
1)
2)
3)
All address points are multiples of padLen, which
is a power of 2.
For each subtree the valid address points lay in a
continuous range due to preorder traversal (line 11).
In a given range, there is no value that is a multiple
of padLen and not an address point (this follows
from the fact that no 2 address points are more than
padLen appart).
B. Interleaving
In Figure 19 we present the algorithm used for building
the interleaved vtable for each tree of primitive vtables. To
simplify presentation the algorithm shown here handles only
the positive indices in a vtable and assumes that the original
address point for each vtable is 0. Handling negative indices
of vtables and a non-zero address point is analogical.
The algorithm in Figure 19 takes in the root R of a tree of
primitive vtables and initializes the following data structures:
•
•
•
•
newInd - a map from the classes in pre(R) and
their old vtable indices to their new indices in the
interleaved layout
ivtbl - the new interleaved memory layout repre-
sented as a list of all the entries of the original vtables
in the interleaved order
posM - a temporary map containing for each class
the index of the next vtable entry to be added to the
interleaved layout
addrPtM - a map containing the new address point
in ivtbl of each class in pre(R).
In lines 10-13 the algorithm initializes the posM map to all
0s, and addrPtM with the new address point for each class.
As evident from the loop, for each class C the new address
point becomes its position in the preorder traversal. The core
of the algorithm consists of the two nested loops on lines 15-
22. The outer loop (lines 15-22) iterates as long as we are
accumulating values in ivtbl, while the inner loop (lines 16-
21) traverses the classes in preorder traversal order (order)
accumulating (if possible) an entry from each vtable. The inner
loop uses the posM map to keep track of its current position
in each vtable. At each iteration of the inner loop, if we have
not reached the end of the current vtable (line 18), we add
one entry from this vtable to ivtbl (line 20) and increment
the current position posM[C] for this vtable (line 21). Note
that when adding a new entry to ivtbl in the inner loop,
we also record in newInd (line 19) what the new index of
this entry is. The algorithm returns a triple containing ivtbl,
addrPtM and newIndM which is sufﬁcient for building the
interleaved vtable and updating all uses and indices of the old
vtables.
Termination. The algorithm terminates, since:
The outer loop (lines 15-22) terminates when ivtbl
stops changing.
2) Whenever we add an entry to ivtbl (line 20) we
1)
3)
also increment some entry in posM (line 21).
All entries in posM are bounded due to line 18.
Correctness. To establish the correctness of the algorithm we
must further show that:
1)
All entries from the old vtables are present in ivtbl.
2) When we update address points and indices in the
program using addrPtM and newIndM we will not
change old behavior.
Indices for inherited ﬁelds are consistent between
base and derived classes.
3)
Our strategy for proving the above properties is that we will
establish several key lemmas and corollaries, which together
will immediately imply the above properties. In the following
lemmas, unless otherwise mentioned, when referring to the
newInd, ivtbl and addrPtM data structures, we mean their
state after the algorithm is done. We start with the following
helper lemma:
Lemma 1. Lines 19-21 are executed exactly once for each C ∈
pre(R) such that pos[C] = i ∀i.0 ≤ i < len(vtbl(C))
8
Proof: This follows from the fact
that for all C ∈
pre(R): (1) posM[C] is initialized to 0, (2) posM[C] in-
creases monotonically and (3) the algorithm doesn’t terminate
until posM[C]=len(vtbl(C)).
The above lemma implies that each entry in newInd is
set precisely once and never changed, and that for each C ∈
pre(R) and ∀i.0 ≤ i < len(vtbl(C)) newInd[C][i] is
well deﬁned. Additionally, since by the previous lemma the
values of C and i span all classes in pre(R) and all vtable
indices for each class, then the value of v[posM[C]] at line
20 spans (exactly once) all entries of all original primitive
vtables. Therefore we can establish the following corollary:
Corollary 1. ∀C ∈ pre(R) and ∀E ∈ vtbl(C) E occurs
exactly once in ivtbl.
Corollary 1 establishes requirement (1) - that each entry
from the original vtables is represented once in the interleaved
layout. Next we establish requirement (2) with the following
lemma:
Lemma 2. ∀C ∈ pre(R) and ∀i.0 ≤ i < len(vtbl(C))
vtbl(C)[i]=ivtbl[addrPtM[C]+newInd[C][i]]
Since we use addrPtM and newInd to translate address
points and vtable indices, after translation the expression used
to obtain the i-th entry of the vtable of a class C would
be ivtbl[addrPtM[C]+newInd[C][i]]. Therefore the
above lemma states that after translating the indices and
address points with addrPtM and newInd, when getting the
i-th entry of the vtable of a class C, we would obtain precisely
the same value (vtbl(C)[i]) that we would have gotten
using normal vtables.
the outer loop at line 21. Therefore they will be equal in the
next iteration of the outer loop as well.
Now using Lemma 3 we can ﬁnally establish requirement
(3):
Lemma 4. ∀B, D ∈ pre(R) where B is a su-
perclass of D, and ∀i.0 ≤ i < len(vtbl(B)),
newInd[B][i]=newInd[D][i].
Proof: Let newInd[B][i] be set
in the k-th iter-
ation of the outer loop. Therefore at
the start of the k-
th iteration posM[B] < len(vtbl(B)) (due to line 18).
Therefore by Lemma 3 at the beginning of that k-th iteration
of the outer loop posM[D] = posM[B] = i. Further-
more, since posM[D] = posM[B] < len(vtbl(B)) ≤
len(vtbl(D)) it follows that newInd[D][posM[D]]
also is set
loop. But
posM[D]=posM[B]=i therefore newInd[D][i] is set in
the k-th iteration of the outer loop.
in the k-th iteration of
the outer
the
Finally,
set
denote
len(ivtbl)D
set. Since the inner
(in
inner
len(ivtbl)
let len(ivtbl)B denote len(ivtbl)
loop)
when newInd[B][i] is
when
and
loop follows
newInd[D][i] is
preorder traversal,
then all classes X visited by the inner
loop from the time we set newInd[B][i] to the time
we set newInd[D][i] are derived from B. By applying
Lemma 3 for each of
follows that
posM[X] = posM[B] and by the same argument as for
D, for each of those classes lines 19-21 will be executed
and thus an entry will be appended to ivtbl. Therefore
len(ivtbl)D = len(ivtbl)B + (order.indexOf(D) −
order.indexOf(B)). Therefore: