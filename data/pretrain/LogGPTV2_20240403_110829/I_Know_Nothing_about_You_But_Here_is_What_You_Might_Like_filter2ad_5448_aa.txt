title:I Know Nothing about You But Here is What You Might Like
author:Rachid Guerraoui and
Anne-Marie Kermarrec and
Rhicheek Patra and
Mahammad Valiyev and
Jingjing Wang
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
I know nothing about you but here is what you
might like
Rachid Guerraoui
Anne-Marie Kermarrec
Rhicheek Patra
Mahammad Valiyev
Jingjing Wang
EPFL
Inria
EPFL
TUM
EPFL
rachid.guerraoui@epﬂ.ch
PI:EMAIL
rhicheek.patra@epﬂ.ch
PI:EMAIL
jingjing.wang@epﬂ.ch
Abstract—Recommenders widely use collaborative ﬁltering
schemes. These schemes, however,
threaten privacy as user
proﬁles are made available to the service provider hosting the
recommender and can even be guessed by curious users who
analyze the recommendations. Users can encrypt their proﬁles to
hide them from the service provider and add noise to make them
difﬁcult to guess. These precautionary measures hamper latency
and recommendation quality.
In this paper, we present a novel recommender, X-REC,
enabling an effective collaborative ﬁltering scheme to ensure
the privacy of users against the service provider (system-level
privacy) or other users (user-level privacy). X-REC builds on two
underlying services: X-HE, an encryption scheme designed for
recommenders, and X-NN, a neighborhood selection protocol
over encrypted proﬁles. We leverage uniform sampling to ensure
differential privacy against curious users. Our extensive eval-
uation demonstrates that X-REC provides (1) recommendation
quality similar to non-private recommenders, and (2) signiﬁcant
latency improvement over privacy-aware alternatives.
I.
INTRODUCTION
As of 2016, around 45% of the world population (around
3.5 billion people) has access to Internet services such as
online social networks (Facebook, Twitter) or online prod-
uct recommendations (movies: Netﬂix, music: Last.fm, books:
Amazon). All of these services rely on some form of rec-
ommenders. The most popular recommenders today are col-
laborative ﬁltering (CF) ones [1]. The intuition behind CF is
straightforward. A user, Alice, is matched with Bob, a like-
minded user, also called a neighbor. Alice will be recom-
mended any item recently liked by Bob (if they both liked
common items in the past).
A. Motivation
Privacy concerns. To compute neighbors and recommenda-
tions, a service provider collects data from users in the form
of proﬁles. This, however, opens major privacy concerns.
The proﬁle of a user (Alice) might get leaked from service
providers [2]. E-commerce sites often release their databases to
third-parties for data mining, intrusion detection and statistical
reporting [3]. In fact, besides the fear from service providers
(system-level privacy), Alice might also be concerned about
another curious user Bob guessing her proﬁle (user-level pri-
vacy). Users that resemble Alice do not only contribute to her
recommendations but also indirectly observe her contribution
to their recommendations.
Privacy tradeoffs. Encrypting user data is an appealing way
to protect proﬁles from the service providers (system-level
privacy). Fully Homomorphic Encryption (FHE) [4] allows a
server, hosted by the service provider, to perform any collab-
orative ﬁltering algorithm over encrypted user data. However,
FHE schemes are considered impractical because of their high
latency. A state-of-the-art implementation of FHE [5] would
induce a latency of 28 hours 1 to make a Movielens recom-
mendation [6] (42 hours for a FilmTrust recommendation [7])
whereas the same CF algorithm (non-private) has a latency of
12 ms for Movielens (18 ms for FilmTrust). Schemes ensuring
CCA-security [8] prevent
the server from performing any
CF-related operations over the data. Additive homomorphic
encryption schemes are insufﬁcient for CF on the server-side:
they require all users to be logged-in in order to compute
a recommendation [9]–[11]. Garbled circuits [12], [13] also
require all users to be logged-in in order to collaboratively
build new circuits when new users join.
To protect the privacy of a user from other users (user-
level privacy), the classical approach consists in adding noise
and obfuscating proﬁles [14], which impacts the quality of the
recommendations. To summarize, ensuring privacy of users
against service providers and other users typically induces
signiﬁcant tradeoffs. Current state-of-the-art systems guarantee
either system-level privacy or user-level privacy, but not both.
B. Contributions
In this paper, we present X-REC, a novel recommender
which ensures the privacy of users against the service providers
(system-level privacy) or other users (user-level privacy) with
negligible increase of latency in providing recommendations to
end-users, while preserving recommendation quality. X-REC
builds over two underlying services: a homomorphic encryp-
tion scheme over integers to encrypt user proﬁles, called X-
HE, and a neighborhood selection protocol over the encrypted
proﬁles, called X-NN. We provide efﬁcient implementations of
both these services. X-NN operates over data encrypted under
X-HE and selects nearest neighbors if their similarities pass a
given similarity threshold (T ). It emulates the truth tables of
the two logical gates XOR and AND with integer operations
and thus circumvents the necessity of FHE. We employ a
uniform user sampling technique which, we show, guarantees
differential privacy [15] in the context of a recommender.
Unlike in recent privacy-preserving systems [9]–[12] where
users are required to be logged-in, X-REC does not restrict
the dynamicity 2 of the system.
X-REC’s architecture mainly consists of an x-client (per
user) along with two servers: an x-server and an untrusted
1We estimate this FHE latency based on the number of operations required
for a single recommendation and the latency of a single FHE operation [5].
2Users can log-in/log-out (resp. join/leave) at any time.
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.22
439
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:11 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: Overview of X-REC. (The arrows denote the sequence of operations during a recommendation computation.)
related work in § VII. Finally, we conclude the paper in § VIII.
We provide the detailed analysis of our privacy guarantees
along with formal proofs in our companion technical report
[19] for interested readers.
Third Party (TP) as shown in Figure 1. As in Privad [16] or
Alambic [17], we assume that these servers do not collude.
The x-server can be typically hosted by an e-commerce player
like Netﬂix whereas the TP functionality can be rendered by
some non-proﬁt digital rights company like European Digital
Rights (EDRI) or Electronic Frontier Foundation (EFF). The
introduction of a third-party (TP in our case) is inevitable,
because a completely non-interactive private solution with a
single server is proved to be impossible [18].
A practical demonstration of our implementation of X-REC
is available at the X-REC website [19]. Our X-REC imple-
mentation runs on any highperf multi-processor Intel Xeon
like-machine for its underlying servers and any lightweight
machine like a laptop, or a smartphone, as a client.
We consider real-world traces, namely Movielens and
FilmTrust, and report on X-REC’s privacy, quality and latency.
X-REC leverages integers, scaled from ﬂoating-point values, to
work with X-HE. Compared with a non-private recommender,
recommendation quality could be impacted due to uniform
user sampling and scaled integers. Our extensive evaluation
shows that X-REC provides prediction quality comparable to
that of state-of-the-art non-private algorithms (USER-BASED-
KNN [1], ITEM-BASED-KNN [20], FUNKSVD [21], KOREN-
MF [22], and SLOPEONE [23]) on both Movielens and
FilmTrust. In this sense, adding privacy (as in X-REC) does
not impact recommendation quality.
With an implementation of X-HE, we show that X-REC
is signiﬁcantly more efﬁcient than the state-of-the-art private
scheme, namely the encryption-based private recommender by
Jeckmans et. al [24], which we denote by J-REC. To the best of
our knowledge, J-REC is the only system that ensures system-
level privacy using homomorphic encryption, which is also
the case in X-REC. X-REC has performance improvement
over J-REC varying from 11× to 15.5× for two different
variants of J-REC. We also evaluate the scalability of X-REC
on a highperf machine (2-Processor Xeon 10-core CPU E5-
2680) with hyperthreading enabled and demonstrate that X-
REC scales up by 2.4× for Movielens (3× for FilmTrust).
C. Roadmap
The rest of the paper is organized as follows. We provide an
overview of X-REC’s architecture and its privacy guarantees in
§ II. We introduce our X-HE implementation in § III and X-
NN implementation in § IV. We provide the recommendation
scheme and privacy analysis of X-REC in § V. We then provide
the results of our exhaustive evaluation in § VI, followed by
A. Architecture Overview
II. OVERVIEW
X-REC’s architecture consists of three main components:
the x-server,
the TP, and an x-client per user (Figure 1).
An x-client typically hosts a web browser through which the
associated user communicates with the x-server. X-REC also
involves a Trusted Third-Party (TTP) at a one-time setup only,
for key generation and distribution.
Before explaining X-REC, we ﬁrst recall the basic prin-
ciple underlying a standard threshold-based 3 non-private CF
scheme [27], which we denote NX-REC (Algorithm 1). NX-
REC involves only the clients and a server. First, the x-client
sends a new rating (rA,i) to the x-server (Step 3). The x-server
periodically, say after L new ratings in total from all users,
computes the adjusted cosine similarities [25] (τ) between
all pairs (u, v) of users followed by their threshold-based
similarities (φ). Let Iu denote the set of items rated by u.
To present the threshold-based similarities, we use the Iverson
bracket (d[ ]) indicator which is deﬁned as follows.
(cid:4)(cid:3)
τ (u, v) =
(cid:2)
i∈Iu,v (ru,i − ¯ru)(rv,i − ¯rv)
if P is true;
otherwise.
(cid:3)
i∈Iu(ru,i − ¯ru)2
(cid:4)(cid:3)
d[P ] =
1
0
i∈Iv (rv,i − ¯rv)2
(1)
φ(u, v) = τ (u, v) · d[τ (u,v)>T ]
(2)
Then, the x-server computes the prediction components
(EA, DA), leveraging the similarities, as shown in Step 14.
The ﬁnal predictions are computed on the x-client (Equa-
tion 19). Here, the similarity-based neighbors computation is
only performed periodically ofﬂine for all the users as in most
e-commerce platforms, for example, Netﬂix [28].
to ensure privacy.
We now brieﬂy explain how X-REC departs from NX-REC
• In NX-REC, the x-server receives the item-id i from the
x-client (Step 4) which reveals that Alice was interested
in i even if we ignore the rating. In X-REC, an x-client
sends a sampled (i along with a few other items selected
3Methods like K-Nearest Neighbors (KNN) reveal neighbors to the x-
server [26] and are hence not suitable for system-level privacy. A threshold-
based scheme avoids such inference attacks.
440
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:11 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1: Non-private recommendation (NX-REC)
1: Input: rA,i, U, T, I
rA,i: New rating of Alice (A) for item i, U: Set of all users, T :
2: Output: (cid:2)rA: Predictions for Alice’s preference towards items in I.
Threshold for similarity, I: Set of all items.
Alice’s x-client:
3: sends rA,i to the x-server.
X-server:
Update:
4: receives rA,i from Alice’s x-client and updates Alice’s proﬁle PA on
the x-server.
Ofﬂine similarity computation (periodical):
5: computes threshold-based user-to-user adjusted cosine similarities (φ)
ofﬂine (periodically after L new ratings in total from all users):
computes adjusted cosine similarity (τ (u, v)) as shown in
Equation 1
computes threshold-based adjusted cosine similarity (φ(u, v)) as
shown in Equation 2.
6: for all u in U do
7:
8:
for all v in U \ u do
9:
end for
10:
11: end for
Online prediction computation:
12: computes intermediate predictions for Alice:
13: for all i in I do
14:
EA,i =
φ(A, u)(ru,i − ¯ru), DA,i =
(cid:3)
u∈U
(cid:3)
u∈U
|φ(A, u)|
15: end for
16: sends EA and DA to Alice’s x-client.
Alice’s x-client:
17: computes ﬁnal predictions [25]:
18: for all i in I do
19:
(cid:4)
computes the predictions leveraging EA and DA:
u∈U φ(A, u)(ru,i − ¯ru)
(cid:4)
(cid:2)rA,i = ¯rA +
= ¯rA +
u∈U |φ(A, u)|
EA,i
DA,i
(rA,i − ¯rA)2
20: end for
at random) set of normalized 4 ratings, encrypted under
X-HE, which are stored on the x-server. The normalized
rating is:
(cid:5)(cid:6)(cid:7)
RA,i = (rA,i − ¯rA)
i∈IA
(3)
• As X-HE does not support comparison, X-REC leverages
X-NN to privately compute threshold-based neighbors
(steps 5-11). This computation requires one round of com-
munication with the TP, which is performed periodically
ofﬂine for all the users (as in Netﬂix [28]).
• The TP might collude with a user in a real-world deploy-
ment. In X-REC, the predictions (EA,i and DA,i in Step
14) are masked by adding a TP Obfuscator R to prevent
TP from colluding with a user (system-level privacy).
Finally, the x-client computes the predictions leveraging
R (sent by the x-server).
For latency optimization, the x-server computations (steps 4
and 12-16) are performed ofﬂine in X-REC. We now present
each component along with its functionalities (Figure 1).
TTP. During the one-time setup of X-REC, the TTP generates
a master key (SM ), a guard key (SG) as well as a private key
for the TP (ST P ). X-HE involves a key-switching technique
to transform ciphertexts. (Details will be provided in § III.)
Homomorphic encryption-based operations over ciphertexts
can be executed only if they are encrypted under a common
4We enforce normalization as X-HE does not support encrypted division.
441
key. X-REC uses a matrix MA→B to switch an encryption
under key A to an encryption under key B. The TTP computes
the key-switching matrices between the generated keys. Then,
the TTP distributes the keys and key-switching matrices as
shown in Table I. At the end of the key generation phase,
the TTP exits the system and destroys SM along with all its
key-related knowledge.
Recipient
Sender
Keys
X-server
TP
TTP
TTP
X-client
X-server
SG
ST P
SG
Key-switching matrices
MSG→SM , Mmult,
MSM →ST P , MST P →SM
MSM →SG
MSG→SM
TABLE I: Keys and key-switching matrices in X-REC.
X-client. When a user u logs-in through its x-client, the x-
server sends SG and MSG→SM to the x-client (in Table I).