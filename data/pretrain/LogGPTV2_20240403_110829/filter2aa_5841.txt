# Super Safe RSA 2
Cryptography, 425 points
## Description:
> Wow, he made the exponent really large so the encryption MUST be safe, right?! 
## Solution:
After connecting to the server, we receive a response similar to the the following:
```console
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_2# nc 2018shell3.picoctf.com 56543
c: 3213081539808298113212954397369154269136228949084984834809140756426366645605884138817285347200894595253703261889429802167949745053449213128261224838659810795610445070887756328273592631010583653370300618261301719293385198663490438697089769434751512369205040349000058315454573913611128217332674385161736097955
n: 57838579222438915476194378620295658400897448584604803316548115586651184591389419803450570655256844957053972459199598788710492189790363014148039135868828759907254959902953471862672255287816030976941567062923372608220677874619750208841977791831433997030010114494949942515178383403566835967585096552443891341599
e: 20371514170492355248744905041309255578801528993979472282159393199058078549873231568778697871969936862286599116158877257729287138821291018136002370771627842497067252338041465396712532764276415723004335909608894889324417877884793219720000953348417396822780277932959880910071243244399088903977960710315151546097
```
We'll solve the challenge with [RsaCtfTool](https://github.com/Ganapati/RsaCtfTool).
First, we create a public key from n and e:
```console
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_2# ~/utils/RsaCtfTool/RsaCtfTool.py --createpub --n 57838579222438915476194378620295658400897448584604803316548115586651184591389419803450570655256844957053972459199598788710492189790363014148039135868828759907254959902953471862672255287816030976941567062923372608220677874619750208841977791831433997030010114494949942515178383403566835967585096552443891341599 --e 20371514170492355248744905041309255578801528993979472282159393199058078549873231568778697871969936862286599116158877257729287138821291018136002370771627842497067252338041465396712532764276415723004335909608894889324417877884793219720000953348417396822780277932959880910071243244399088903977960710315151546097 > key.pub
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_2# cat key.pub
-----BEGIN PUBLIC KEY-----
MIIBHjANBgkqhkiG9w0BAQEFAAOCAQsAMIIBBgKBgFJdaCxlX7nVDA9fq7Ob11Bd
BMhoarCtX4uNz6wF0QeSwkgv3DLKABcrDxsAwWxIPOjYZNCABBywgckh4sjSgcuQ
lhopuZ5BbVM8QzvpZJ1QgFt4WzfeML711/ridh62ETwWzSbamfO9gX5wE9466tD0
pKrAQ9QLygxTTvrtOtkfAoGAHQKPTYvLIp36aHPO+yz5snGA3MGCSoZWL8YcDj/i
NuOnEFvjF/R0AbUF1gH3Hpd29KA7KgDc8entXJVV1lvmoRESoqq/aC7lDqOJTLc7
KMcjbGPoS3WOiHAy5oGPqLDKJq7f3z3LxNYPVJc9L1Cb5Dildm4eVnb2pfCQVxWt
VvE=
-----END PUBLIC KEY-----
```
We check the RsaCtfTool can crack the private key:
```console
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_2# ~/utils/RsaCtfTool/RsaCtfTool.py --publickey key.pub --private > key.priv
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_2# cat key.priv
-----BEGIN RSA PRIVATE KEY-----
MIIB4AIBAAKBgFJdaCxlX7nVDA9fq7Ob11BdBMhoarCtX4uNz6wF0QeSwkgv3DLK
ABcrDxsAwWxIPOjYZNCABBywgckh4sjSgcuQlhopuZ5BbVM8QzvpZJ1QgFt4Wzfe
ML711/ridh62ETwWzSbamfO9gX5wE9466tD0pKrAQ9QLygxTTvrtOtkfAoGAHQKP
TYvLIp36aHPO+yz5snGA3MGCSoZWL8YcDj/iNuOnEFvjF/R0AbUF1gH3Hpd29KA7
KgDc8entXJVV1lvmoRESoqq/aC7lDqOJTLc7KMcjbGPoS3WOiHAy5oGPqLDKJq7f
3z3LxNYPVJc9L1Cb5Dildm4eVnb2pfCQVxWtVvECAwEAAQJBAI2jxQtLNY+u0bgk
Q8MuEyseRqsx9h3MgV9nxSNi8/SN3kwWhGJ2vl5L0noMjDByJ9qG+qKTOmlkUESK
C9bdNDkCQQCU3dFwKrPn+T70uP19LKLDcQOhOXSz2TBknc5P5ENLRNgvc9uk4EsC
3njAE4OHUy1FhwBtIg9HMx54vwP7RGgXAgMBAAECAwEAAQJAf2GGSwhjPTGjcCtV
QpNENLysbM6Uqj7JrD8wgh6lm6Kc6l2FAPFeSckRZwd62KdooIIcfi/NxcIAfYLO
snB9Ig==
-----END RSA PRIVATE KEY-----
``
We save c as a binary file:
```console
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_2# c=3213081539808298113212954397369154269136228949084984834809140756426366645605884138817285347200894595253703261889429802167949745053449213128261224838659810795610445070887756328273592631010583653370300618261301719293385198663490438697089769434751512369205040349000058315454573913611128217332674385161736097955
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_2# echo "obase=16; $c" | BC_LINE_LENGTH=0 bc | awk '{ print (length($0) % 2 == 0) ? $0 : 0$0; }' | xxd -p -r > c.bin
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_2# xxd c.bin
00000000: 0493 5935 df50 2c5c bcee 0261 abdf 0b77  ..Y5.P,\...a...w
00000010: 0a2d 6c8b eec1 5fc9 2e8a 4dbd 0d31 6419  .-l..._...M..1d.
00000020: 0266 cbe0 fdc5 31a5 6f9a 4fbb 27dc 7418  .f....1.o.O.'.t.
00000030: 593d 4fec 22b8 f818 23b1 af12 e9c0 1959  Y=O."...#......Y
00000040: 45fa 1005 340a e7ee 3d90 a0d6 d14f 636f  E...4...=....Oco
00000050: fc32 66da 38e8 303f d0a8 5bad f10a 0baa  .2f.8.0?..[.....
00000060: e882 d7b2 59eb ac94 d628 3e0a 57b2 173f  ....Y....(>.W..?
00000070: fdb6 2baa b7aa cedd eedb 1f50 8a63 10a3  ..+........P.c..
```
Finally, we run RsaCtfTool to decrypt the ciphertext:
```console
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_2# ~/utils/RsaCtfTool/RsaCtfTool.py --publickey key.pub --private --uncipher c.bin
-----BEGIN RSA PRIVATE KEY-----
MIIB4AIBAAKBgFJdaCxlX7nVDA9fq7Ob11BdBMhoarCtX4uNz6wF0QeSwkgv3DLK
ABcrDxsAwWxIPOjYZNCABBywgckh4sjSgcuQlhopuZ5BbVM8QzvpZJ1QgFt4Wzfe
ML711/ridh62ETwWzSbamfO9gX5wE9466tD0pKrAQ9QLygxTTvrtOtkfAoGAHQKP
TYvLIp36aHPO+yz5snGA3MGCSoZWL8YcDj/iNuOnEFvjF/R0AbUF1gH3Hpd29KA7
KgDc8entXJVV1lvmoRESoqq/aC7lDqOJTLc7KMcjbGPoS3WOiHAy5oGPqLDKJq7f
3z3LxNYPVJc9L1Cb5Dildm4eVnb2pfCQVxWtVvECAwEAAQJBAI2jxQtLNY+u0bgk
Q8MuEyseRqsx9h3MgV9nxSNi8/SN3kwWhGJ2vl5L0noMjDByJ9qG+qKTOmlkUESK
C9bdNDkCQQCU3dFwKrPn+T70uP19LKLDcQOhOXSz2TBknc5P5ENLRNgvc9uk4EsC
3njAE4OHUy1FhwBtIg9HMx54vwP7RGgXAgMBAAECAwEAAQJAf2GGSwhjPTGjcCtV
QpNENLysbM6Uqj7JrD8wgh6lm6Kc6l2FAPFeSckRZwd62KdooIIcfi/NxcIAfYLO
snB9Ig==
-----END RSA PRIVATE KEY-----
[+] Clear text : picoCTF{w@tch_y0ur_Xp0n3nt$_c@r3fu11y_4137999}
```
The flag: picoCTF{w@tch_y0ur_Xp0n3nt$_c@r3fu11y_4137999}