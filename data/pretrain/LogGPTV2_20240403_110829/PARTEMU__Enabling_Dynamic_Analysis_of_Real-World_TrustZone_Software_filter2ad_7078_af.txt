files/secure-boot-and-image-authentication-
technical-overview-v2-0.pdf.
[40] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida,
and H. Bos. VUzzer: Application-aware Evolutionary
Fuzzing. In 24th Annual Network and Distributed Sys-
tem Security Symposium, NDSS, 2017.
[41] Samsung. Knox Platform for Enterprise White Paper.
https://docs.samsungknox.com/whitepapers/
knox-platform/samsung-knox.htm.
[42] Samsung.
Knox Platform Security.
https:
//developer.samsung.com/tech-insights/
knox/platform-security.
[29] L. Kernel. LK embedded kernel. https://github.
com/littlekernel/lk.
[43] Samsung. Samsung TEEGRIS. https://developer.
samsung.com/teegris.
[30] D. Komaromy. Unbox Your Phone - Exploring and
Breaking Samsung’s TrustZone Sandboxes. http://
www.ekoparty.org/charla.php?id=756.
[31] K. Koscher, T. Kohno, and D. Molnar. SURROGATES:
enabling near-real-time dynamic analyses of embedded
systems. In 9th USENIX Workshop on Offensive Tech-
nologies, WOOT ’15, Washington, DC, USA, August 10-
11, 2015., 2015.
[32] Linux. Qualcomm Secure Memory Manager binding.
https://github.com/torvalds/linux/blob/
master/Documentation/devicetree/bindings/
soc/qcom/qcom,smem.txt.
[33] B. McGillion, T. Dettenborn, T. Nyman, and N. Asokan.
Open-TEE – an open virtual trusted execution environ-
ment. Technical report, Aalto University, 2015.
[34] OP-TEE. Open Portable Trusted Execution Environ-
ment - OP-TEE. https://www.op-tee.org/.
[35] Open-TEE. Open-TEE. https://open-tee.github.
io/.
[36] R. Padhye, C. Lemieux, K. Sen, L. Simon, and H. Vi-
jayakumar. FuzzFactory: Domain-Speciﬁc Fuzzing with
Waypoints. Proceedings of the ACM on Programming
Languages, 3(OOPSLA), Oct. 2019.
[37] Qualcomm Android TEE Driver. https://android.
googlesource.com/platform/hardware/qcom/
keymaster/+/master/QSEEComAPI.h.
[44] Samsung. Secured Communication with the Payment
Networks. https://developer.samsung.com/tech-
insights/pay/secured-communication-with-
the-payment-networks.
[45] D. Shen.
Attacking your “Trusted Core” Ex-
ploiting TrustZone
https:
//www.blackhat.com/docs/us-15/materials/us-
15-Shen-Attacking-Your-Trusted-Core-
Exploiting-Trustzone-On-Android-wp.pdf.
on Android.
[46] A. Software. Trusted Firmware-A. https://github.
com/ARM-software/arm-trusted-firmware.
[47] I. Standard.
IEEE Standard Test Access Port and
https:
Boundary-Scan Architecture 1149.1-1990.
//ieeexplore.ieee.org/document/938734, 1990.
[48] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang,
J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vi-
gna. Driller: Augmenting Fuzzing Through Selective
Symbolic Execution. In 23rd Annual Network and Dis-
tributed System Security Symposium, NDSS, 2016.
[49] S. M. S. Talebi, H. Tavakoli, H. Zhang, Z. Zhang, A. A.
Sani, and Z. Qian. Charm: Facilitating dynamic analysis
of device drivers of mobile systems. In Proceedings of
the 27th USENIX Security Symposium, 2018.
[50] A. Tarasikov. Reverse Engineering Samsung Exynos.
http://allsoftwaresucks.blogspot.com/2019/
05/reverse-engineering-samsung-exynos-
9820.html.
804    29th USENIX Security Symposium
USENIX Association
[51] threatpost.com.
Android Qualcomm Vul-
of Devices.
60
Percent
Impacts
nerability
https://threatpost.com/android-qualcomm-
vulnerability-impacts-60-percent-of-
devices/118191/, Visited Aug 2019.
[52] Trustonic. Android Driver for the Trustonic Trusted
https://github.com/
Execution Environment.
TrustonicNwd/tee-mobicore-driver.kernel.
[53] Trustonic.
Android user space
components
the Trustonic Trusted Execution Environ-
https://github.com/TrustonicNwd/tee-
for
ment.
mobicore-driver.daemon.
[54] Trustonic.
Device Coverage: Trustonic Embeds
Hardware Security in 9 of the Top 10 Android
OEMs. https://www.trustonic.com/trustonic-
device-coverage, Visited Aug 2019.
[55] Trustonic.
Internet of Things.
trustonic.com/markets/iot/.
https://www.
[56] Trustonic. Trustonic Application Protection. https:
//www.trustonic.com/solutions/trustonic-
application-protection-tap/.
[57] Trustonic.
Trustonic Secured Platforms.
https:
//www.trustonic.com/solutions/trustonic-
secured-platforms-tsp/.
[58] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda.
Panorama: Capturing system-wide information ﬂow for
malware detection and analysis. In Proceedings of the
14th ACM Conference on Computer and Communica-
tions Security, 2007.
[59] J. Zaddach, L. Bruno, A. Francillon, and D. Balzarotti.
AVATAR: A framework to support dynamic security
analysis of embedded systems’ ﬁrmwares. In 21st An-
nual Network and Distributed System Security Sympo-
sium, NDSS 2014, San Diego, California, USA, February
23-26, 2014, 2014.
[60] M. Zalewski.
tus Screen.
status_screen.txt.
AFL: Understanding the Sta-
http://lcamtuf.coredump.cx/afl/
[61] M. Zalewski. American Fuzzy Lop. http://lcamtuf.
coredump.cx/afl/.
[62] zdnet.com.
Security ﬂaw lets
keys
re-
from Qualcomm chips.
cover private
https://www.zdnet.com/article/security-
flaw-lets-attackers-recover-private-keys-
from-qualcomm-chips/, Visited Aug 2019.
attackers
[63] H. Zhang, D. She, and Z. Qian. Android root and its
providers: A double-edged sword. In Proceedings of
the 22Nd ACM SIGSAC Conference on Computer and
Communications Security, 2015.
[64] H. Zhang, D. She, and Z. Qian. Android ion hazard: The
curse of customizable memory management system. In
Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security, 2016.
A Appendix
A.1 Selecting Components to Emulate
Table 7 shows whether we choose to emulate or reuse each
component that the TZOS depends on, based on the criteria
in Table 1.
A.2 SLOC for Emulated Components
Table 8 quantiﬁes our implementation effort using source lines
of code for core PARTEMU and each emulated component.
USENIX Association
29th USENIX Security Symposium    805
TZOS
QSEE
Kinibi
TEEGRIS
OP-TEE
TAs[note a]
TZOSes[note a]
Hardware
Component C
C – TZOS C – Other
Coupling
Coupling
Tight
Bootloader
Loose
Secure Monitor Tight
Loose
Loose
TEE Driver
Loose
N/A
TEE Userspace N/A
Tight
Bootloader
Loose
Secure Monitor Loose
Tight
Loose
Tight
TEE Driver
Tight
Loose
TEE Userspace
Tight
Bootloader
Loose
Secure Monitor Loose
Tight
Loose
Tight
TEE Driver
Tight
Loose
TEE Userspace
Tight
Bootloader
Loose
Secure Monitor Tight
Loose
Loose
TEE Driver
Loose
N/A
TEE Userspace N/A
-
-
-
-
-
-
-
-
-
Source Encrypted? Decision
Avail?
Emulate
Partial
No
Closed No
Reuse
Emulate[note b]
Open
No
Exclude
Closed No
Emulate
No
Partial
Partial
No
Emulate
Reuse
No
Open
Emulate
No
Open
Emulate
No
Partial
Partial
Yes
Emulate
Reuse
Open
No
Emulate
Closed No
Emulate
Partial
No
Closed No
Reuse
Emulate[note b]
Open
No
Closed No
Exclude
-
-
-
Reuse
Reuse
Emulate
Table 7: Showing components chosen for emulation or reuse for QSEE, Kinibi, TEEGRIS, and OP-TEE.
[note a]Since the TZOS and TAs are the target components we want to analyze, we have to reuse the original binaries.
[note b]We believe both reusing or emulating the TEE drivers in these cases are practically feasible.
Category
Component
New or Modiﬁcation
to Existing Code?
PARTEMU
QSEE
Kinibi
TEEGRIS
OP-TEE
Total
QEMU (PARTEMU run management API) New
New
PARTEMU AFL plugin
PARTEMU LLVM run plugin
New
New
QEMU (hardware emulation)
New
Bootloader
New
TEE driver+AFL driver
QEMU (hardware emulation)
New
Existing [46]
Secure Monitor
Existing [53]
TEE userspace
New
AFL driver
QEMU (hardware emulation)
New
Existing [53]
Secure Monitor
New
TEE userspace
New
AFL driver
QEMU (hardware emulation)
New
New
Bootloader
New
AFL driver
-
-
SLOC Added
or Modiﬁed
1060
846
147
4642
1636
1379
551
781
49
656
551
677
435
542
310
2[note a]
266
14530
Table 8: Table with lines of code added or modiﬁed for each emulated component. SLOC was calculated using sloccount.
[note a]OP-TEE only required the bootloader to set up two registers, which we did using two assembly instructions.
806    29th USENIX Security Symposium
USENIX Association