### 优化后的文本

#### 通信开销与更新频率的关系
**图12：两词合取搜索查询 q = (w1 ∧ w2)**
- **(a)** 通信开销与变量 |Upd(w1)| 的关系。
- **(b)** 通信开销与变量 |Upd(w2)| 的关系。

**多词合取搜索查询 q = (w1 ∧ ... ∧ w6)，其中 |Upd(wℓ)| = 10^7，对于 ℓ ∈ [3, 6]**
- **(c)** 通信开销与变量 |Upd(w1)| 的关系。
- **(d)** 通信开销与变量 |Upd(w2)| 的关系。

图中的凸起表示 w1 的更新频率从“小”到“大”的过渡点，相对于 w2 的更新频率。

#### 端到端搜索延迟
**图13：增强型 ODXT 的实验结果**
- **(a)** 两词合取搜索查询 q = (w1 ∧ w2) 中，端到端搜索延迟与变量 |Upd(w1)| 的关系。
- **(b)** 两词合取搜索查询 q = (w1 ∧ w2) 中，端到端搜索延迟与变量 |Upd(w2)| 的关系。

**多词合取搜索查询 q = (w1 ∧ ... ∧ w6)，其中 |Upd(wℓ)| = 10^7，对于 ℓ ∈ [3, 6]**
- **(c)** 端到端搜索延迟与变量 |Upd(w1)| 的关系。
- **(d)** 端到端搜索延迟与变量 |Upd(w2)| 的关系。

比较了 ODXT（进行了上述修改以提高极端情况下的搜索性能）与其他方案在涉及两个和多个关键词的合取搜索中的端到端延迟。ODXT 的端到端搜索延迟仅随最不频繁关键词的更新频率而变化，并且在所有频率范围内的查询中均优于其他方案。特别是，上述修改使得 ODXT 即使在所有合取项具有几乎相同频率的极端情况下也能与 MITRACONJ 竞争。即使最不频繁关键词 w1 的频率高达 10^5，ODXT 的端到端合取搜索延迟也小于 10 秒。例如，在 60.92GB 的数据库中执行形式为“查找包含关键词 stock、consensus、infrastructure 和 cash 的所有电子邮件”的合取查询时，平均端到端搜索延迟仅为 0.75 秒，这在实际应用中与明文数据库的搜索延迟相当。

#### 服务器存储开销
**图14：服务器存储开销与更新次数的关系**

图14 比较了各方案在服务器上的存储开销。在所有情况下，存储开销随着更新次数线性增长。MITRACONJ 的存储开销大约是明文搜索索引的 75 倍。尽管需要额外的 XSet 字典存储空间，ODXT 仅需 3 倍于明文搜索索引的存储开销。

希望这些改进能帮助您更好地理解和展示您的数据。如果有任何进一步的需求，请随时告诉我！