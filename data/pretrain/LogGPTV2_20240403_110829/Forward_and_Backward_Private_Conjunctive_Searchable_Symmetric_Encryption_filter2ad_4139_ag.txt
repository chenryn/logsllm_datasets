n
o
i
t
a
c
i
n
u
m
m
o
C
1012
109
106
103
100
ODXT
MITRACONJ
IEX-2LEV
IEX-ZMF
106
107
101
102
)
B
K
n
i
(
d
a
e
h
r
e
v
O
n
o
i
t
a
c
i
n
u
m
m
o
C
107
106
105
104
103
102
101
100
ODXT
MITRACONJ
IEX-2LEV
IEX-ZMF
106
107
ODXT
MITRACONJ
IEX-2LEV
IEX-ZMF
101
102
103
104
105
106
107
|Upd(w2)|
103
104
105
|Upd(w1)|
(a) |Upd(w2)| = 107
(b) |Upd(w1)| = 10
(c) |Upd(w2)| = 107
(d) |Upd(w1)| = 10
Figure 12: Two-conjunctive search query q = (w1 ∧ w2): (a) communication overhead v/s variable |Upd(w1)|, (b) communication overhead v/s variable |Upd(w2)|. Multi-
conjunctive search query q = (w1 ∧ . . . ∧ w6) with |Upd(w(cid:96))| = 107 for (cid:96) ∈ [3, 6]: (c) communication overhead v/s variable |Upd(w1)|, (d) communication overhead v/s
variable |Upd(w2)|
respective update-frequencies. The bumps indicate a transition
point between “small” and “large” update-frequencies of w1,
relative to the update-frequency of w2.
13
Figure
Search
Latency.
End-to-End
compares
ODXT (with the modiﬁcation as mentioned above for
boosting search performance in extreme cases) and the
other schemes with respect to their end-to-end latency for
conjunctive searches involving two and multiple keywords
over a 10MBps wide-area network (WAN). As in our
micro-benchmarks involving only the client or the server,
the end-to-end search latency for ODXT scales only with
the update-frequency of the least frequent keyword. It also
outperforms all of the remaining schemes across queries
involving keywords from all frequency ranges. In particular,
the modiﬁcation proposed above allows ODXT to be
competitive with MITRACONJ even in the extreme cases where
all terms in the conjunction have nearly the same frequency.
Note that the end-to-end conjunctive search latency for
ODXT is less than 10 seconds even when the frequency of
the least frequent keyword w1 is as high as 105. For example,
the average end-to-end search latency of a conjunctive query
of the form “Find all emails containing the keywords stock,
consensus, infrastructure and cash” over a database of size
60.92GB is only 0.75 seconds, which is comparable in practice
with the search latency over plaintext databases.
15
)
s
m
n
i
(
y
c
n
e
t
a
L
h
c
r
a
e
S
d
n
E
-
o
t
-
d
n
E
108
105
102
10−1
101
102
ODXT-Boosted
MITRACONJ
IEX-2LEV
IEX-ZMF
)
s
m
n
i
(
y
c
n
e
t
a
L
h
c
r
a
e
S
d
n
E
-
o
t
-
d
n
E
105
104
103
102
101
100
10−1
ODXT-Boosted
MITRACONJ
IEX-2LEV
IEX-ZMF
103
104
105
|Upd(w1)|
106
107
101
102
103
104
105
|Upd(w2)|
108
106
104
102
100
)
s
m
n
i
(
y
c
n
e
t
a
L
h
c
r
a
e
S
d
n
E
-
o
t
-
d
n
E
106
107
101
102
106
105
104
103
102
101
100
)
s
m
n
i
(
y
c
n
e
t
a
L
h
c
r
a
e
S
d
n
E
-
o
t
-
d
n
E
ODXT-Boosted
MITRACONJ
IEX-2LEV
IEX-ZMF
ODXT-Boosted
MITRACONJ
IEX-2LEV
IEX-ZMF
103
104
105
|Upd(w1)|
106
107
101
102
103
104
105
106
107
|Upd(w2)|
(a) |Upd(w2)| = 107
(b) |Upd(w1)| = 10
(c) |Upd(w2)| = 107
(d) |Upd(w1)| = 10
Figure 13: Experimental results with boosted ODXT: Two-conjunctive search query q = (w1 ∧ w2): (a) end-to-end search latency v/s variable |Upd(w1)|, (b) end-to-end
search latency v/s variable |Upd(w2)|. Multi-conjunctive search query q = (w1 ∧ . . . ∧ w6) with |Upd(w(cid:96))| = 107 for (cid:96) ∈ [3, 6]: (c) end-to-end search latency v/s variable
|Upd(w1)|, (d) end-to-end search latency v/s variable |Upd(w2)|
)
B
G
n
i
(
e
g
a
r
o
t
S
105
102
10−1
10−4
10−7
ODXT
MITRACONJ
IEX-2LEV
IEX-ZMF
Plaintext Search Index
100
10−1
10−2
10−3
10−4
y
r
e
v
o
c
e
R
f
o
y
t
i
l
i
b
a
b
o
r
P
Operation op
File identiﬁer id
Keyword w
101 102 103 104 105 106 107 108
Total Number of Updates
101 102 103 104 105 106 107 108
N = |Upd(DB)|
Figure 14: Server storage v/s number of updates
Storage Overheads. Figure 14 compares the schemes with
respect to the storage overhead at the server. In all cases, the
storage overhead grows linearly with the number of updates.
The storage overhead for MITRACONJ is approximately 75x that
of the plaintext search index. Despite the additional storage
required for the XSet dictionary, ODXT requires only 3x