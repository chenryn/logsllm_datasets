I was testing a few different ways to calculate a quantity over an array, and
noticed for loops slowed down significantly from commit `317a4d1`* (16 days
old master). @timholy suggested I file an issue here.  
The test code is here:
https://github.com/JaredCrean2/julia_tests/tree/master/array_speed2. It does
the calculating using a manually inlined double for loop, ArrayViews, and
SubArrays.
Using Julia Version 0.4.0-dev+5149 (2015-06-01 18:58 UTC) Commit `317a4d1`*
(16 days old master)
     592.426 milliseconds (14232 allocations: 586 KB)
    double loop @time printed above
     495.138 milliseconds (14422 allocations: 599 KB)
    ArrayView @time printed above
      15.753 seconds      (300 M allocations: 8240 MB, 3.39% gc time)
    slice @time printed above
Using Julia Version 0.4.0-dev+5439 (2015-06-18 13:48 UTC) Commit `a23caa0`* (0
days old master):
       1.720 seconds      (102 k allocations: 3600 KB)
    double loop @time printed above
     566.122 milliseconds (16237 allocations: 692 KB)
    ArrayView @time printed above
       4.137 seconds      (240 M allocations: 8240 MB, 12.96% gc time)
    slice @time printed above
I looked at `@code_warntye getEulerFlux(q,F)`, and the `a23caa0` produced a
huge amount of code (>1100 lines) compared to the `317a4d1` (~70 lines), and
included many lines that looked like
    (top(throw_boundserror))(q::Array{Float64,3},GenSym(45))::Union{}
that were not present in `317a4d1`.