他们的 Dockerfile ，而第二个项目的 Dockerfile 就会被自动修复。
88
ONBUILD 为他人作嫁衣裳
那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础
镜像更新，各个项目不用同步 Dockerfile 的变化，重新构建后就继承了基础镜
像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 Dockerfile
就会变为：
FROM node:slim
RUN "mkdir /app"
WORKDIR /app
CMD [ "npm", "start" ]
这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名
字为 my-node 的话，各个项目内的自己的 Dockerfile 就变为：
FROM my-node
COPY ./package.json /app
RUN [ "npm", "install" ]
COPY . /app/
基础镜像变化后，各个项目都用这个 Dockerfile 重新构建镜像，会继承基础镜
像的更新。
那么，问题解决了么？没有。准确说，只解决了一半。如果这个 Dockerfile 里
面有些东西需要调整呢？比如 npm install 都需要加一些参数，那怎么办？这
一行 RUN 是不可能放入基础镜像的，因为涉及到了当前项目的
./package.json ，难道又要一个个修改么？所以说，这样制作基础镜像，只解
决了原来的 Dockerfile 的前4条指令的变化问题，而后面三条指令的变化则完
全没办法处理。
ONBUILD 可以解决这个问题。让我们用 ONBUILD 重新写一下基础镜像的
Dockerfile :
89
ONBUILD 为他人作嫁衣裳
FROM node:slim
RUN "mkdir /app"
WORKDIR /app
ONBUILD COPY ./package.json /app
ONBUILD RUN [ "npm", "install" ]
ONBUILD COPY . /app/
CMD [ "npm", "start" ]
这次我们回到原始的 Dockerfile ，但是这次将项目相关的指令加上
ONBUILD ，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的
Dockerfile 就变成了简单地：
FROM my-node
是的，只有这么一行。当在各个项目目录中，用这个只有一行的 Dockerfile 构
建镜像时，之前基础镜像的那三行 ONBUILD 就会开始执行，成功的将当前项目的
代码复制进镜像、并且针对本项目执行 npm install ，生成应用镜像。
90
参考文档
参考文档
Dockerfie 官方文档：https://docs.docker.com/engine/reference/builder/
Dockerfile 最佳实践文档：https://docs.docker.com/engine/userguide/eng-
image/dockerfile_best-practices/
91
其它制作镜像的方式
其它生成镜像的方法
除了标准的使用 Dockerfile 生成镜像的方法外，由于各种特殊需求和历史原
因，还提供了一些其它方法用以生成镜像。
从 rootfs 压缩包导入
格式： docker import [选项] ||- [[:]]
压缩包可以是本地文件、远程 Web 文件，甚至是从标准输入中得到。压缩包将会
在镜像 / 目录展开，并直接作为镜像第一层提交。
比如我们想要创建一个 OpenVZ 的 Ubuntu 14.04 模板的镜像：
$ docker import \
http://download.openvz.org/template/precreated/ubuntu-14.04-
x86_64-minimal.tar.gz \
openvz/ubuntu:14.04
Downloading from http://download.openvz.org/template/precreated/
ubuntu-14.04-x86_64-minimal.tar.gz
sha256:f477a6e18e989839d25223f301ef738b69621c4877600ae6467c4e528
9822a79B/78.42 MB
这条命令自动下载了 ubuntu-14.04-x86_64-minimal.tar.gz 文件，并且作为
根文件系统展开导入，并保存为镜像 openvz/ubuntu:14.04 。
导入成功后，我们可以用 docker ps 看到这个导入的镜像：
$ docker images openvz/ubuntu
REPOSITORY TAG IMAGE ID CREA
TED SIZE
openvz/ubuntu 14.04 f477a6e18e98 55 s
econds ago 214.9 MB
如果我们查看其历史的话，会看到描述中有导入的文件链接：
92
其它制作镜像的方式
$ docker history openvz/ubuntu:14.04
IMAGE CREATED CREATED BY SIZ
E COMMENT
f477a6e18e98 About a minute ago 214
.9 MB Imported from http://download.openvz.org/templa
te/precreated/ubuntu-14.04-x86_64-minimal.tar.gz
和
docker save docker load
Docker 还提供了 docker load 和 docker save 命令，用以将镜像保存为一
个 tar 文件，然后传输到另一个位置上，再加载进来。这是在没有 Docker
Registry 时的做法，现在已经不推荐，镜像迁移应该直接使用 Docker Registry，无
论是直接使用 Docker Hub 还是使用内网私有 Registry 都可以。
保存镜像
使用 docker save 命令可以将镜像保存为归档文件。
比如我们希望保存这个 alpine 镜像。
$ docker images alpine
REPOSITORY TAG IMAGE ID CREA
TED SIZE
alpine latest baa5d63471ea 5 we
eks ago 4.803 MB
保存镜像的命令为：
$ docker save alpine | gzip > alpine-latest.tar.gz
然后我们将 alpine-latest.tar.gz 文件复制到了到了另一个机器上，可以用下
面这个命令加载镜像：
$ docker load -i alpine-latest.tar.gz
Loaded image: alpine:latest
93
其它制作镜像的方式
如果我们结合这两个命令以及 ssh 甚至 pv 的话，利用 Linux 强大的管道，我
们可以写一个命令完成从一个机器将镜像迁移到另一个机器，并且带进度条的功
能：
docker save  | bzip2 | pv | ssh @ 'cat | do
cker load'
94
删除本地镜像
删除本地镜像
如果要删除本地的镜像，可以使用 docker rmi 命令，其格式为：
docker rmi [选项]  [ ...]
注意 docker rm 命令是删除容器，不要混淆。
用 ID、镜像名、摘要删除镜像
其中，  可以是 镜像短 ID 、 镜像长 ID 、 镜像名 或者 镜像摘要 。
比如我们有这么一些镜像：
$ docker images
REPOSITORY TAG IMAGE ID
CREATED SIZE
centos latest 0584b3d2cf6d
3 weeks ago 196.5 MB
redis alpine 501ad78535f0
3 weeks ago 21.03 MB
docker latest cf693ec9b5c7
3 weeks ago 105.1 MB
nginx latest e43d811ce2f4
5 weeks ago 181.5 MB
我们可以用镜像的完整 ID，也称为 长 ID ，来删除镜像。使用脚本的时候可能会
用长 ID，但是人工输入就太累了，所以更多的时候是用 短 ID 来删除镜
像。 docker images 默认列出的就已经是短 ID 了，一般取前3个字符以上，只要
足够区分于别的镜像就可以了。
比如这里，如果我们要删除 redis:alpine 镜像，可以执行：
95
删除本地镜像
$ docker rmi 501
Untagged: redis:alpine
Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd
7e1196c9264edeea521a86d
Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c
117932b05bf189b7
Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c
071f0dbff8c2899b
Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2
cc2ee866f74adf23
Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449
c7a826ef74a2d2fa
Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc4
8daa27d32c75eab3
Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba5
7b3feed1668fa7c7
我们也可以用 镜像名 ，也就是 : ，来删除镜像。
$ docker rmi centos
Untagged: centos:latest
Untagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500
db1b9bfa02a783a46e0d366c
Deleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d30
33acd70fc3c48b8a
Deleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee
32bf1faabd239d38
当然，更精确的是使用 镜像摘要 删除镜像。
96
删除本地镜像
$ docker images --digests
REPOSITORY TAG DIGEST
IMAGE
ID CREATED SIZE
node slim sha256:b4f0e0bde
b578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228 6e0c4c
8e3913 3 weeks ago 214 MB
$ docker rmi node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4
a582f3be235a3b164422be228
Untagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a58
2f3be235a3b164422be228
Untagged 和 Deleted
如果观察上面这几个命令的运行输出信息的话，你会注意到删除行为分为两类，一
类是 Untagged ，另一类是 Deleted 。我们之前介绍过，镜像的唯一标识是其
ID 和摘要，而一个镜像可以有多个标签。
因此当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。
所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的
Untagged 的信息。因为一个镜像可以对应多个标签，因此当我们删除了所指定
的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 Delete
行为就不会发生。所以并非所有的 docker rmi 都会产生删除镜像的行为，有可
能仅仅是取消了某个标签而已。
当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发
删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次
进行判断删除。镜像的多层结构让镜像复用变动非常容易，因此很有可能某个其它
镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到
没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇
怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么
有时候会发现所删除的层数和自己 docker pull 看到的层数不一样的源。
除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的
容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器
是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此
97
删除本地镜像
该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需
要的，应该先将它们删除，然后再来删除镜像。
用 docker images 命令来配合
像其它可以承接多个实体的命令一样，可以使用 docker images -q 来配合使用
docker rmi ，这样可以成批的删除希望删除的镜像。比如之前我们介绍过的，
删除虚悬镜像的指令是：
$ docker rmi $(docker images -q -f dangling=true)
我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。
比如，我们需要删除所有仓库名为 redis 的镜像：
$ docker rmi $(docker images -q redis)
或者删除所有在 mongo:3.2 之前的镜像：
$ docker rmi $(docker images -q -f before=mongo:3.2)
充分利用你的想象力和 Linux 命令行的强大，你可以完成很多非常赞的功能。
CentOS/RHEL 的用户需要注意的事项
在 Ubuntu/Debian 上有 UnionFS 可以使用，如 aufs 或者 overlay2 ，而
CentOS 和 RHEL 的内核中没有相关驱动。因此对于这类系统，一般使用
devicemapper 驱动利用 LVM 的一些机制来模拟分层存储。这样的做法除了性能
比较差外，稳定性一般也不好，而且配置相对复杂。Docker 安装在 CentOS/RHEL
上后，会默认选择 devicemapper ，但是为了简化配置，其 devicemapper 是
跑在一个稀疏文件模拟的块设备上，也被称为 loop-lvm 。这样的选择是因为不
需要额外配置就可以运行 Docker，这是自动配置唯一能做到的事情。但是 loop-
lvm 的做法非常不好，其稳定性、性能更差，无论是日志还是 docker info 中
都会看到警告信息。官方文档有明确的文章讲解了如何配置块设备给
devicemapper 驱动做存储层的做法，这类做法也被称为配置 direct-lvm 。
98
删除本地镜像
除了前面说到的问题外， devicemapper + loop-lvm 还有一个缺陷，因为它是
稀疏文件，所以它会不断增长。用户在使用过程中会注意到
/var/lib/docker/devicemapper/devicemapper/data 不断增长，而且无法控
制。很多人会希望删除镜像或者可以解决这个问题，结果发现效果并不明显。原因
就是这个稀疏文件的空间释放后基本不进行垃圾回收的问题。因此往往会出现即使
删除了文件内容，空间却无法回收，随着使用这个稀疏文件一直在不断增长。
所以对于 CentOS/RHEL 的用户来说，在没有办法使用 UnionFS 的情况下，一定
要配置 direct-lvm 给 devicemapper ，无论是为了性能、稳定性还是空间利
用率。
或许有人注意到了 CentOS 7 中存在被 backports 回来的 overlay 驱动，不过
CentOS 里的这个驱动达不到生产环境使用的稳定程度，所以不推荐使用。
99
实现原理
镜像的实现原理
Docker 镜像是怎么实现增量的修改和维护的？ 每个镜像都由很多层次构成，
Docker 使用 Union FS 将这些不同的层结合到一个镜像中去。
通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到
同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一
起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一
些写操作。 Docker 在 AUFS 上构建的容器也是利用了类似的原理。
100
操作容器
操作 Docker 容器
容器是 Docker 又一核心概念。
简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，
虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环
境）和跑在上面的应用。
本章将具体介绍如何来管理一个容器，包括创建、启动和停止等。
101
启动
启动容器
启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止
状态（stopped）的容器重新启动。
因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。
新建并启动
所需要的命令主要为 docker run 。
例如，下面的命令输出一个 “Hello World”，之后终止容器。
$ sudo docker run ubuntu:14.04 /bin/echo 'Hello world'
Hello world
这跟在本地直接执行 /bin/echo 'hello world' 几乎感觉不出任何区别。
下面的命令则启动一个 bash 终端，允许用户进行交互。
$ sudo docker run -t -i ubuntu:14.04 /bin/bash