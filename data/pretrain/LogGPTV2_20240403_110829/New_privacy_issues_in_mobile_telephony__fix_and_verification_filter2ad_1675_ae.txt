contributors. OsmocomBB. http://bb.osmocom.org.
[35] J. Zhang and G. de la Roche. Femtocells: Technologies
and Deployment. John Wiley & Sons, Ltd, 2009.
[36] M. Zhang and Y. Fang. Security analysis and
enhancements of 3GPP authentication and key
agreement protocol. IEEE Transactions on Wireless
Communications, 4(2):734–742, 2005.
8. REFERENCES
[1] http://www.pathintelligence.com. Path Intelligence
Ltd. (2010) FootPath.
[2] http://www.markryan.eu/research/UMTS/.
[3] 3GPP. Technical speciﬁcation group services and
system aspects; 3G security; formal analysis of the 3G
authentication protocol (release 4). Technical Report
TR 33.902, V4.0.0, 3rd Generation Partnership
Project, 2001.
[4] 3GPP. Generic Access Network (GAN); Mobile GAN
interface layer 3 speciﬁcation. Technical Speciﬁcation
TS 44.318 v9.2.0, 3rd Generation Partnership Project,
2010.
[5] 3GPP. Generic Access Network (GAN); Stage 2.
Technical Speciﬁcation TS 43.318 v9.0.0, 3rd
Generation Partnership Project, 2010.
[6] 3GPP. Technical speciﬁcation group services and
system aspects; 3G security; security architecture
(release 9). Technical Report TS 33.102 V9.3.0, 3rd
Generation Partnership Project, 2010.
[7] 3GPP. Security of Home Node B (HNB) / Home
evolved Node B (HeNB). Technical Speciﬁcation TS
33.302 v11.2.0, 3rd Generation Partnership Project,
2011.
[8] 3GPP. Technical speciﬁcation group services and
system aspects; 3G security; cryptographic algorithm
requirements (release 10). Technical Report TS 33.105
V10.0.0, 3rd Generation Partnership Project, 2011.
[9] M. Abadi and C. Fournet. Mobile values, new names,
and secure communication. In ACM
SIGPLAN-SIGACT Symposium on Principles of
Programming Languages, POPL, 2001.
[10] Z. Ahmadian, S. Salimi, and A. Salahi. New attacks
on UMTS network access. In Conference on Wireless
Telecommunications Symposium, WTS’09, 2009.
[11] M. Arapinis, T. Chothia, E. Ritter, and M. Ryan.
Analysing unlinkability and anonymity using the
applied pi calculus. In IEEE Computer Security
Foundations Symposium, CSF, 2010.
[12] A. Armando, R. Carbone, L. Compagna, J. Cu´ellar,
and M. L. Tobarra. Formal analysis of SAML 2.0 web
browser single sign-on: breaking the SAML-based
single sign-on for google apps. In ACM Workshop on
Formal Methods in Security Engineering, FMSE, 2008.
[13] G. Avoine and P. Oechslin. RFID Traceability: A
Multilayer Problem. In Financial Cryptography, FC,
2005.
[14] M. Barbaro and T. Zeller Jr. A face is exposed for
AOL searcher no. 4417749. The New York Times,
August 9, 2006.
[15] B. Blanchet. Proverif: Cryptographic protocol veriﬁer
in the formal model. http://www.proverif.ens.fr/.
[16] M. Bortolozzo, M. Centenaro, R. Focardi, and
G. Steel. Attacking and ﬁxing PKCS#11 security
tokens. In ACM Conference on Computer and
Communications Security, CCS, 2010.
[17] C. Caldwell. A pass on privacy? The New York
Times, July 17, 2005.
[18] I. Cervesato, A. D. Jaggard, A. Scedrov, J.-K. Tsay,
and C. Walstad. Breaking and ﬁxing public-key
kerberos. Inf. Comput., 206:402–424, February 2008.
2159. APPENDIX
Authentication, Secrecy, Integrity. The main purpose
of the AKA protocol is to provide mutual authentication and
establish session keys to be used for integrity protection and
secrecy. Hence, our analysis would not be complete without
ensuring that our privacy preserving version of the 3G AKA
protocol still achieves the goals it was originally designed
for. We verify mutual authentication and integrity proper-
ties as injective correspondence properties. We prove using
ProVerif that the original properties of the AKA protocol
are preserved by our ﬁxes; the veriﬁcation results are shown
in Table 3.
Properties
Secrecy
IMSI
KIMSI
CK, IK
conﬁdential
information
Authentication
Integrity
Identiﬁcation Paging AKA
√
NA
NA
√
√
NA
NA
NA
NA
NA
NA
NA
√
√
√
√
√
√
NA Not Applicable √ Proved to hold × Attack found
Table 3: Results of the Automatic Veriﬁcation of
the Fixed Procedures
ProVerif code We report the most relevant parts of the
ProVerif scripts used for the veriﬁcation of the ﬁxed proto-
cols. We omit the declaration of constants, any name which
is not under the scope of a new statement as public name
and hence as part of the adversary knowledge. Note that the
identity of the victim mobile for the anonymity property is
public.
Fixed IMSI paging procedure in ProVerif.
let (xpage, ximsi, =sqn, xchall) =
let (msgtype, xrand, xblob) = x in (
if msgtype = pagingReq then (
1 let PAGING_MS = in(c, x);
2
3
4
5
6
7
8
9 let PAGING_SN = new rand; new chall;
sdec(f(k, xrand), xblob) in (
if xpage = page then (
if imsi = ximsi then (
out(c, (pagingResp, xchall))))))).
Fixed AKA procedure in ProVerif.
else (out(c, aenc(pbN, r_ms,
let res = f2(k, xrand) in (
let ck = f3(k, xrand) in (
let ik = f4(k, xrand) in (
out(c, res);
in(c, xmsg)))))
let (xrand, xautn) = x in (
let (msg, xmac) = xautn in (
let ak = f5(k, xrand) in (
let xsqn = sdec(ak, msg) in (
let mac = f1(k, (xrand, xsqn)) in (
if (xmac, xsqn) = (mac, osqn) then (
30 let AKA_MS = new r_ms; in(c, x);
31
32
33
34
35
36
37
38
39
40
41
42
43
44 let AKA_SN =
45
46
47
48
49
50
51
52
53
54
55
56
57
new rand; new r_sn; new s; new r;
let mac = f1(k, (rand, osqn)) in (
let res = f2(k, rand) in (
let ck = f3(k, rand) in (
let ik = f4(k, rand) in (
let ak = f5(k, rand) in (
let autn = (senc(ak, r_sn, osqn), mac) in (
let av = (rand, res, ck, ik, ak) in (
out(c, (rand, autn));
in(c, xres);
if xres = res then (
else (out(c, reject))))))))).
(Fail, imsi, osqn))))))))).
out(c, senc(ck, r, s)))
Biprocess for unlinkability of AKA.
out(c, pbN);
(! (new sk1; new imsi1;new otmsi1;
(! (new sk2; new imsi2; new osqn; new otmsi2;
58 process new pvN; let pbN = pub(pvN) in (
59
60
61
62
63
64
65
let imsi = choice[imsi1, imsi2] in (
let k = choice[sk1, sk2] in (
let otmsi = choice[otmsi1,otmsi2] in (
(AKA_MS) | (AKA_SN)))))))))
Biprocess for anonymity of AKA.
out(c, pbN);
((! (new k; new imsi; new otmsi;
66 process new pvN; let pbN = pub(pvN) in (
67
68
69
70
71
72
let imsi = choice[id, imsi_V] in (
!new osqn;
| (new k; new id; new otmsi;
((AKA_MS) | (AKA_SN))))))
(!new osqn;
((AKA_MS) | (AKA_SN)))))
10
11
12
13
14
new r_sn1; new r_sn2;
let UK = f(k, rand) in (
out(c, (pagingReq, rand, senc(UK, r_sn2,
(page, imsi, sqn, chall))));
in(c, pres)).
Biprocess for unlinkability of IMSI paging.
Original AKA procedure in ProVerif. We check the MAC
and the sequence number (line 81) in the same conditional
statement, so to avoid false attacks due to the evaluation
of the conditional. For the same reason we introduce the
functions err and geterr (lines 73-74) to determine the error
message (lines 86-87) and avoid the use of an if statement.
out(c, pbN);
(! (new sk1; new imsi1; new otmsi1;
(! (new sk2; new imsi2; new otmsi2; new sqn;
15 process new pvN; let pbN = pub(pvN) in (
16
17
18
19
20
21
22
let imsi = choice[imsi1, imsi2] in (
let k = choice[sk1, sk2] in (
let otmsi = choice[otmsi1, otmsi2] in (
(PAGING_MS) | (PAGING_SN)))))))))
Biprocess for anonymity of IMSI paging.
out(c, pbN);
((! (new k; new imsi; new otmsi;
23 process new pvN; let pbN = pub(pvN) in (
24
25
26
27 | (new k; new id; new otmsi;
28
29
let imsi = choice[id, imsi_V] in
(! ((PAGING_MS) | (PAGING_SN)))))
(! ((PAGING_MS) | (PAGING_SN)))))
geterr(err(x,x,y,z))=synchFail.
let (xrand, xautn) = x in (
let (msg, xmac) = xautn in (
let ak = f5(k, xrand) in (
let xsqn = sdec(ak, msg) in (
let mac = f1(k, (xrand, xsqn)) in (
if (xmac, xsqn) = (mac,sqn) then (
73 reduc geterr(err(x,z,y,y))=macFail;
74
75 let AKA_MS = new r_ms; in(c, x);
76
77
78
79
80
81
82
83
84
85
86
87
88
let res = f2(k, xrand) in (
let ck = f3(k, xrand) in (
let ik = f4(k, xrand) in (
out(c, res); in(c, xmsg)))))
else (let err_msg =
geterr(err(mac, xmac, sqn, xsqn)) in
out(c, err_msg))))))).
216