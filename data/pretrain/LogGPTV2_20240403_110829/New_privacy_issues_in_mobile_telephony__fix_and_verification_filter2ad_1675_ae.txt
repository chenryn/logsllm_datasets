# References

1. **OsmocomBB**  
   - URL: http://bb.osmocom.org

2. **J. Zhang and G. de la Roche**  
   - *Femtocells: Technologies and Deployment*  
   - Publisher: John Wiley & Sons, Ltd  
   - Year: 2009

3. **M. Zhang and Y. Fang**  
   - *Security analysis and enhancements of 3GPP authentication and key agreement protocol*  
   - Journal: IEEE Transactions on Wireless Communications  
   - Volume: 4, Issue: 2  
   - Pages: 734–742  
   - Year: 2005

4. **Path Intelligence Ltd.**  
   - *FootPath*  
   - URL: http://www.pathintelligence.com  
   - Year: 2010

5. **Mark Ryan**  
   - *UMTS Research*  
   - URL: http://www.markryan.eu/research/UMTS/

6. **3GPP**  
   - *Technical Specification Group Services and System Aspects; 3G Security; Formal Analysis of the 3G Authentication Protocol (Release 4)*  
   - Technical Report: TR 33.902, V4.0.0  
   - Year: 2001

7. **3GPP**  
   - *Generic Access Network (GAN); Mobile GAN Interface Layer 3 Specification*  
   - Technical Specification: TS 44.318 v9.2.0  
   - Year: 2010

8. **3GPP**  
   - *Generic Access Network (GAN); Stage 2*  
   - Technical Specification: TS 43.318 v9.0.0  
   - Year: 2010

9. **3GPP**  
   - *Technical Specification Group Services and System Aspects; 3G Security; Security Architecture (Release 9)*  
   - Technical Report: TS 33.102 V9.3.0  
   - Year: 2010

10. **3GPP**  
    - *Security of Home Node B (HNB) / Home evolved Node B (HeNB)*  
    - Technical Specification: TS 33.302 v11.2.0  
    - Year: 2011

11. **3GPP**  
    - *Technical Specification Group Services and System Aspects; 3G Security; Cryptographic Algorithm Requirements (Release 10)*  
    - Technical Report: TS 33.105 V10.0.0  
    - Year: 2011

12. **M. Abadi and C. Fournet**  
    - *Mobile Values, New Names, and Secure Communication*  
    - Conference: ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL)  
    - Year: 2001

13. **Z. Ahmadian, S. Salimi, and A. Salahi**  
    - *New Attacks on UMTS Network Access*  
    - Conference: Wireless Telecommunications Symposium (WTS'09)  
    - Year: 2009

14. **M. Arapinis, T. Chothia, E. Ritter, and M. Ryan**  
    - *Analysing Unlinkability and Anonymity Using the Applied Pi Calculus*  
    - Conference: IEEE Computer Security Foundations Symposium (CSF)  
    - Year: 2010

15. **A. Armando, R. Carbone, L. Compagna, J. Cuéllar, and M. L. Tobarra**  
    - *Formal Analysis of SAML 2.0 Web Browser Single Sign-On: Breaking the SAML-Based Single Sign-On for Google Apps*  
    - Conference: ACM Workshop on Formal Methods in Security Engineering (FMSE)  
    - Year: 2008

16. **G. Avoine and P. Oechslin**  
    - *RFID Traceability: A Multilayer Problem*  
    - Conference: Financial Cryptography (FC)  
    - Year: 2005

17. **M. Barbaro and T. Zeller Jr.**  
    - *A Face is Exposed for AOL Searcher No. 4417749*  
    - Publication: The New York Times  
    - Date: August 9, 2006

18. **B. Blanchet**  
    - *ProVerif: Cryptographic Protocol Verifier in the Formal Model*  
    - URL: http://www.proverif.ens.fr/

19. **M. Bortolozzo, M. Centenaro, R. Focardi, and G. Steel**  
    - *Attacking and Fixing PKCS#11 Security Tokens*  
    - Conference: ACM Conference on Computer and Communications Security (CCS)  
    - Year: 2010

20. **C. Caldwell**  
    - *A Pass on Privacy?*  
    - Publication: The New York Times  
    - Date: July 17, 2005

21. **I. Cervesato, A. D. Jaggard, A. Scedrov, J.-K. Tsay, and C. Walstad**  
    - *Breaking and Fixing Public-Key Kerberos*  
    - Journal: Information and Computation  
    - Volume: 206  
    - Pages: 402–424  
    - Month: February  
    - Year: 2008

# Appendix

## Authentication, Secrecy, and Integrity

The primary objective of the AKA (Authentication and Key Agreement) protocol is to provide mutual authentication and establish session keys for integrity protection and secrecy. Our analysis would be incomplete without ensuring that our privacy-preserving version of the 3G AKA protocol still achieves its original design goals. We verify mutual authentication and integrity properties as injective correspondence properties. Using ProVerif, we confirm that the original properties of the AKA protocol are preserved by our fixes. The verification results are summarized in Table 3.

### Table 3: Results of the Automatic Verification of the Fixed Procedures

| Property         | IMSI | KIMSI | CK, IK | Confidential Information | Authentication | Integrity |
|------------------|------|-------|--------|--------------------------|----------------|-----------|
| Secrecy          | √    | NA    | NA     | NA                       | NA             | NA        |
| Identification   | NA   | NA    | NA     | NA                       | √              | √         |
| Paging           | NA   | NA    | NA     | NA                       | √              | √         |
| AKA              | √    | √     | √      | √                        | √              | √         |

- **NA**: Not Applicable
- **√**: Proved to hold
- **×**: Attack found

### ProVerif Code

We present the most relevant parts of the ProVerif scripts used for verifying the fixed protocols. Declarations of constants and any names not under the scope of a `new` statement are considered public and part of the adversary's knowledge. Note that the identity of the victim mobile for the anonymity property is public.

#### Fixed IMSI Paging Procedure in ProVerif

```proverif
let (xpage, ximsi, =sqn, xchall) =
let (msgtype, xrand, xblob) = x in (
  if msgtype = pagingReq then (
    let PAGING_MS = in(c, x);
    let PAGING_SN = new rand; new chall;
    sdec(f(k, xrand), xblob) in (
      if xpage = page then (
        if imsi = ximsi then (
          out(c, (pagingResp, xchall))))))).
```

#### Fixed AKA Procedure in ProVerif

```proverif
else (out(c, aenc(pbN, r_ms,
  let res = f2(k, xrand) in (
    let ck = f3(k, xrand) in (
      let ik = f4(k, xrand) in (
        out(c, res);
        in(c, xmsg)))))
  let (xrand, xautn) = x in (
    let (msg, xmac) = xautn in (
      let ak = f5(k, xrand) in (
        let xsqn = sdec(ak, msg) in (
          let mac = f1(k, (xrand, xsqn)) in (
            if (xmac, xsqn) = (mac, osqn) then (
              let AKA_MS = new r_ms; in(c, x);
              let AKA_SN = new rand; new r_sn; new s; new r;
              let mac = f1(k, (rand, osqn)) in (
                let res = f2(k, rand) in (
                  let ck = f3(k, rand) in (
                    let ik = f4(k, rand) in (
                      let ak = f5(k, rand) in (
                        let autn = (senc(ak, r_sn, osqn), mac) in (
                          let av = (rand, res, ck, ik, ak) in (
                            out(c, (rand, autn));
                            in(c, xres);
                            if xres = res then (
                              out(c, senc(ck, r, s)))
                            else (out(c, reject))))))))).
              (Fail, imsi, osqn))))))))).
```

#### Biprocess for Unlinkability of AKA

```proverif
out(c, pbN);
(! (new sk1; new imsi1; new otmsi1;
  (! (new sk2; new imsi2; new osqn; new otmsi2;
    process new pvN; let pbN = pub(pvN) in (
      let imsi = choice[imsi1, imsi2] in (
        let k = choice[sk1, sk2] in (
          let otmsi = choice[otmsi1, otmsi2] in (
            (AKA_MS) | (AKA_SN)))))))))
```

#### Biprocess for Anonymity of AKA

```proverif
out(c, pbN);
((! (new k; new imsi; new otmsi;
  process new pvN; let pbN = pub(pvN) in (
    let imsi = choice[id, imsi_V] in (
      !new osqn;
      | (new k; new id; new otmsi;
        ((AKA_MS) | (AKA_SN))))))
  (!new osqn;
    ((AKA_MS) | (AKA_SN)))))
```

#### Biprocess for Unlinkability of IMSI Paging

```proverif
out(c, pbN);
(! (new sk1; new imsi1; new otmsi1;
  (! (new sk2; new imsi2; new otmsi2; new sqn;
    process new pvN; let pbN = pub(pvN) in (
      let imsi = choice[imsi1, imsi2] in (
        let k = choice[sk1, sk2] in (
          let otmsi = choice[otmsi1, otmsi2] in (
            (PAGING_MS) | (PAGING_SN)))))))))
```

#### Biprocess for Anonymity of IMSI Paging

```proverif
out(c, pbN);
((! (new k; new imsi; new otmsi;
  process new pvN; let pbN = pub(pvN) in (
    let imsi = choice[id, imsi_V] in
      (! ((PAGING_MS) | (PAGING_SN)))))
  (! ((PAGING_MS) | (PAGING_SN)))))
```

#### Original AKA Procedure in ProVerif

We check the MAC and the sequence number in the same conditional statement to avoid false attacks due to the evaluation of the conditional. For the same reason, we introduce the functions `err` and `geterr` to determine the error message and avoid the use of an `if` statement.

```proverif
out(c, pbN);
(! (new sk1; new imsi1; new otmsi1;
  (! (new sk2; new imsi2; new otmsi2; new sqn;
    process new pvN; let pbN = pub(pvN) in (
      let imsi = choice[imsi1, imsi2] in (
        let k = choice[sk1, sk2] in (
          let otmsi = choice[otmsi1, otmsi2] in (
            (PAGING_MS) | (PAGING_SN)))))))))
```

```proverif
geterr(err(x, x, y, z)) = synchFail.
let (xrand, xautn) = x in (
  let (msg, xmac) = xautn in (
    let ak = f5(k, xrand) in (
      let xsqn = sdec(ak, msg) in (
        let mac = f1(k, (xrand, xsqn)) in (
          if (xmac, xsqn) = (mac, sqn) then (
            let AKA_MS = new r_ms; in(c, x);
            let res = f2(k, xrand) in (
              let ck = f3(k, xrand) in (
                let ik = f4(k, xrand) in (
                  out(c, res);
                  in(c, xmsg)))))
            else (let err_msg = geterr(err(mac, xmac, sqn, xsqn)) in
              out(c, err_msg))))))).
```

This structured and formatted version of the references and appendix should enhance clarity, coherence, and professionalism.