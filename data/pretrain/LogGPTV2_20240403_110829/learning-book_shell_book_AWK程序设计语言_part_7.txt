do statements while (expression)
break
continue
表达式
我们从表达式开始讨论，因为表达式是最简单的语句，大多数其他语句都是由不同类型的表达式组
合而成.初等表达式与其他表达式通过运算符组合在一起，形成一个新的表达式.初等表达式是最原始
的构造块：它们包括常量，变量，数组引用，函数调用，以及各种内建变量，例如字段的名字。
我们从常量与变量开始对表达式的讨论，然后是运算符，它们可以用来组合表达式，这些表达式可以
分成5种类别：算术，比较，逻辑，条件，与赋值，运算符之后，讨论的是内建算术运算函数与字符串函数，
最后是数组
常量（Constants）.Awk中只有两种类型的常量：字符串与数值，将一个字符序列用一对双引号包
围起来就创建了一个字符串常量，正如"Asia"，或"hello，world”或"".字符串常量可以包含表
35
2.2列出的转义序列
一个数值常量可以是一个整数，就像1127，或十进制小数，3.14，或者是用科学计数法表示的数：
0.707E-1.月一个数的不月表示法都拥有相网的值：1e6,1.00E6，10e5，0.1e7与1000000都表示
同一个数，所有的数都用浮点格式存储，浮点数的精度依赖于机器，
变量（Variables）.表达式可以包含若干种类型的变量：用户定义的，内建的，或字段，用户定义的变
量名字由数字，字母与下划线构成，但是名字不能以数字开始，所有的内建变量的名字都是大写字母
每一个变量都有一个值，这个值可以是字符串或数值，或两者都是，因为变量的类型不需妥事先声
明，所以awk需要根据上下文环境推断出变量的类型，当需要时，awk可以把字符串转化为数值，或反
之.例如，在程序
$4 == "Asia"{ print $1, 100 * $2 }
---
## Page 40
第二章AWK语言
32
里，$2会被转换成数值，如果它原来不是数值的话，同样的道理，如果S1与S4原来不是字符串，它们会
被转换成字符串.
一个未初始化的变量的值是"”（空字符串）与0.
内建变量（Built-InVariables）.表2.5列出了所有的内建变量，其中一些我们已经见过了，另一些
会在本节或后面的章节里用到.这些变量可以用在所有的表达式中，而且可以被用户重置，每当有一个
新的文件被读取，FILENAME就会被重新赋值，每当有一个新的记录被读进来，FNR,NF，NR就会被重新
赋值，另外，当SO发生改变，或有新的字段被创建时，NF就被重置.RLENGTH与RSTART会随着每一次
match的调用而改变
表2.5:内建变量
变量
意义
默认值
ARGC
命令行参数的个数
ARGV
命令行参数数组
FILENAME
当前输入文件名
FNR
当前输入文件中的记录号
FS
控制着输入行的字段分割符
NF
当前记录的字段个数
NR
目前为止已读的记录数量
OFMT
数值的输出格式
"%.6g"
OFS
输出字段分割符
ORS
输出的记录的分割符
"\n*
RLENGTH
被函数match匹配的字符串的长度
RS
控制着输入行的记录分割符
"\n "
RSTART
被函数match匹配的字符串的开始
SUBSEP
下标分割符
"\034"
字段变量（FieldVariables).当前输入行的字段从S1,S2，一直到$NF；$0表示整行.字段变量与
其他变量相比没什么不同一它们也可以用在算术或字符串运算中，也可以被赋值，于是，人们可以将
countries的每一行的第2个字段除以1000,从而可以用百万平方英里—而不是千平方英里—来表
示面积：
{$2=$2/ 1000; print }
也可以将一个新的字符串赋给字段：
BEGIN
( FS = OFS = "\t" }
=）1==
$4 == "South America"{ $4 = "SA"}
{print }
在这个程序里，BEGIN动作重新设置FS（FS控制输入行的字段分割符)与OFS（OFS控制输出的字段分
割符）为制表符.第4行的print语句打印可能被修改过的$0.值得注意的是：如果S0发生了改变
36
---
## Page 41
第二章AWK语言
88
（通过赋值或替换），那么S1，S2等等，以及NE就会被重新计算；同样的道理，当S1（或S2等）被修改
了，S0就会被重新构造，构造的方式是使用OFS重新分割字段
字段也可以通过表达式指定.例如，S（NF-1）表示当前输入行的例数第2个字段，表达式两边的括
号不能省略：$NF-1表示最后一个字段减1后的值
如果字段变量引用到了不存在的字段，例如$（NF+1)，那么它的值就是初始值一空字符串，可以通
过向一个字段变量赋值来创建它.例如，下面这个程序创建了第5个字段，该字段包含的值是人口密度：
BEGIN { FS = OFS = "\t" }
{ $5 =1000 *$3/ $2;print }
当需要时，任何突然出现的字段都会被创建，并且它们的初始值都是空值。
每一行的字段数都可以不同，但是awk的具体实现通常将字段数上限设置为100.
算术运算符（ArithmeticOperators）.Awk提供了通常的+，-，*，/，&，^运算符.运算符&计算余
数：x$y的值是x被y除的余数；当x或y是负数时，x$y的结果依赖于机器.是指数运算符：xy表
示xY.所有的算术运算都用的是浮点数，
比较运算符（ComparisonOperators).比较表达式指的是那些含有关系运算符，或含有正则表达式
匹配运算符的表达式.关系运算符包括=与>.
37
表达式
1.初等表达式包括：
数值与字符事常量，变量，字段，函数调用，数组元素。
2.可以把表达式组合起来的运算符包括：
赋值运算符=+=-=*=/=名=
条件表达式？：
逻辑运算符I1(OR),&&(AND),1(NOT)
匹配运算符~和1~
关系运算符>=
拼接运算符(没有显式的拼接运算符)
算术运算符+-★/%
单目运算符+和-
自增与自减运算符++和--（包括前组与后短）
括号（用于分组）
正则表达式的运算符包括～（被匹配）与！～（不被匹配）.如果比较表达式的判断结果为真，则它的值是1，
否则为0.所以，表达式
$4 - /Asia/
的值是1，如果当前输入行的第4个字段包含Asia的话；反之，如果不包含，那么它的值就是0.
---
## Page 42
第二章AWK语言
逻辑运算符（LogicalOperators).逻辑运算符将多个表达式组合成为逻辑表达式.如果逻辑表达式
的真值为真，那么它的值就为1；如果为假，值就为0.在对逻辑表达式求值时，具有非零值或非空值的操
作数被当作真；相应的，值为零或空的操作数被当作假，操作数之间被&&或11分开，求值是从左至右进
行的，当整个逻辑表达式的值可以确定时，求值就停下来，这意味着在表达式
expr&& expr2
中，如果expr;的值为假，那么exprg就不会被求值，而在表达式
exprs || expr4
中，如果expra的值为真，expr就不会被求值.
在&&与|之后可以插入换行符.
条件表达式（ConditionalExpressions）.一个条件表达式具有形式：
expr1 ? expr2 : exprs
首先,expr被求值.如果值为真，也就是值非零或非空，那么整个条件表达式的值就会是expr2的值；否
则，如果expr;的值为假，那么条件表达式的值就会是exprs.expr2与expra只有其中一个会被求值．38
下面这个程序利用条件表达式打印$1的例数，如果S1的值为0,那就打印一条警告：
{print ($1 1= 0 ? 1/S1 :"$1 is zero, line " NR) )
赋值运算符（AssignmentOperators).在赋值表达式中可以使用7种赋值运算符.最简单的赋值表
达式是
uar = expr
在这个表达式中，uar是一个变量或字段的名字，然后expr是一个任意的表达式.例如，为了计算总人口
与亚洲的国家数量，我们可以写
$4 == "As1a"
{pop = pop+ $3; n = n+1}
END
"Asian countries is", pop, "million."
将countries作为输入数据，输出将是
Total population of the 4 Asian countries is 2173 million.
第一个动作含有两个赋值语句，第一个累积人口，第二个计算国家的数量，变量没有被显式地初始化，但
在下面这个程序里，我们仍然利用了族认的初始化行为，程序的功能是寻找人口最多的国家：
$3>maxpop{ maxpop =$3; country = $1}
END
{ print "country with largest population:",
country, maxpop
---
## Page 43
第二章AWK语言
35
注意，只有当至少有一行的$3是正数时，程序才是正确的.
另外6个赋值运算符是+=，-=，*=，/=，$=，以及=.它们的意义都是类似的：uop=e等价于u=
uope,但是u只被求值一次，赋值表达式：
pop = pop + $3
可以用+=写成更加紧凑的形式：
pop += $3
紧凌版与冗长版具有相同的作用—左值加上右值，并赋给左值一但是+=更简短，运行起来也更快，再
看另外一个例子：
{ $2 /= 1000; print }
这个程序将第2个字段除以1000，再打印整行
39
一个赋值语句是一个表达式；整个表达式的值是左边的变量的新值，于是，赋值语句可以放在任意表
达式内部，在复合赋值语句
FS = OFS = "\t"
中，字段分割符与输出字段分割符都被设置为制表符，赋值表达式在条件判断中也很常见，例如：
if ((n = length($0)) > 0)...
自增与自减(Increment andDecrement Operators).赋值语句：
n= n+ 1
通常写成++n或n++，这里用到了一元自增运算符，作用是给变量加1.前细形式++n在侍递n的值之
前为n加1;后细形式n++在侍递n的值之后，为n加1.当++应用到赋值表达式时，这会造成一些不
一样的地方.如果n的初始值为1,赋值语句i=++n为n加1,并将新值2赋给i，而i=n++同样
为n加1,但将日值1赋给i.如果仅仅是给n加1,那么n++与++n没什么区别.前缀与后缀自减运
算符--给变量减1,除此之外与++相同.
内建算术函数（Built-InArithmeticFunctions）.内建算术函数在表2.6中列出，这些函数都可以
作为初等表达式使用，在表格中，x与y都是任意的表达式.
可以用这些函数来得到一些有用的常量：atan2（0,-1）得到π，exp（1）返因e—自然对数的底.
为了计算x的以10为底的对数，我们可以用1og（x）/1og（10）来实现
rand（）返回一个大于等于0,小于1的伪随机浮点数.调用srand（x）可以使随机数生成器的开
40
始点从x开始，如果没有调用srand,每次程序运行时，rand都从同一个值开始，
赋值语6
randint = int(n * rand()) + 1
将randint的值设置为1到n之间的一个整数，包括1与n.这里我们用到函数int来丢弃返回值的
小数部分，赋值语句
x = int(x + 0.5)
---
## Page 44
第二章AWK语言
98
表2.6:内建算术函数
函数
返回值
atan2 (y,x)
3/x的反正切值，定义域在一π到π之间
cos (x)
x的余弦值，x以张度为单位
exp(x)
x的指数函数，e
int (x)
x的整数部分；当x大于0时，向0取整
1og(x)
x的白然对数（以e为底)
rand()
返回一个随机数r,0≤r<1
sin (x)
x的正弦值，x以强度为单位。
sqrt (x)
x的方根
srand(x)
x是rand（）的新的随机数种子
将正数x四舍五入为最接近它的整数.
字符串运算符（StringOperators).Awk中只有一种字符运算符一拼接，拼接并没有显式的运算
符，通过陆续写出字符串常量，变量，数组元素，函数返回值，与其他表达式，就可以创建一个字符串，程
序
{print NR ":" $0 }
会将每一个输入行打印出来，并在前面冠上行号，以及一个冒号，行号，冒号与输入行之间没有空格，数
值NR会被自动转换成字符事（如果必要的话，$0也会做相网的转换)；然后三个字符串拼接在一起并打
印出来.
作为正则表达式的字符串（String8asRegularExpressions）.到目前为止，在所有的匹配表达式中，
一与1～右边的操作数都是都是一个被斜杠包围起来的正则表达式.实际上，任意一个表达式都可以用作
匹配运算符的右操作数，Awk对这些表达式求值，如果必要的话将这些值转换成字符事，再将这些字符
串解释成正则表达式.例如，程序
{$+[6-0]=S5TP }N1D8
$2 -digits
会将那些第2个字段有且仅有数字的行打印出来。
因为字符串可以被拼接起来，于是一个正则表达式可以由多个子部分构成.下面这个程序将那些具
有有效浮点数的行打印出来：
BEGIN{
sign = "[+-]?"
[6-0][·]+[6-0]= ewp
fraction = "[•1[0-9]+"
(+[6-0].ubts[aa])。=4uauodxa
$0~number
---
## Page 45
第二章AWK语言
在一个匹配表达中，一个被双引号包围的字符串，可以与一个被斜杠包围的正则达式互换着使用，例如41
"[0-9】+$"与/~[0-9】+S/.然而有一个例外，如果被双引号包图的字符串想妥匹配一个正则表达式
元字符的字面值，那就要在反斜杠的前面再加一个反斜杠来保护它.于是
/+[6-01(-|+\)/ -0$
与
+[6-0]（-|+\\）。-0$
是等价的
这种性质可能看起来非常晦涩难懂，但是，被双引号包围的字符串被awk解析时，起保护作用的反
斜杠就会被移除，这祥想的话应该就容易理解多了，如果一个正则表达式的元字符需要一个反斜杠来暂
时移除它的特殊意义，那么在字符串中，这个反斜杠就需要一个额外的反斜杠来保住它自已.如果一个匹
配运算符的右操作数是一个变量或字段，正如
x~$1
那么第1个字段中的反斜杠就不需要一层额外的保护，因为在数据中反斜杠并没有特殊的意义
测试用户对正则表达式交互性的理解是很客易的：程序
$1~$2
允许用户输入一个字符串与一个正则表达式；如果字符串匹配正则表达式的话，它就会回射该行echoes theline
back.
内建字符串函数（Built-In StringFunctions).表2.7列出了awk的内建字符串函数.在这张表中，
r表示一个正则表达式（或者是一个字符串，或者是被一对斜杠包图了的）.8与t是字符串表达式，n与P
是整数.
函数index（8,t）返回t在8中第一次出现的位置；如果t没有在8中出现，那就返因0.字符串第
一个字符的位置是1：
index("banana", "an")
返回2.
函数match（8,r）返回g中最左最长的，能被r匹配的子串，返回值是子串在g中的开始位置，如
果没有我到相匹配的子事，邵就返回0.这个函数还会将内建变量RSTART置为子串的起始位置，将
RLENGTH置为子串的长度
函数split（8,a，fs）根据分割符fs将字符事8分割成一个个子串，并存到数组a中.这个函数会
在数组之后讨论，也就是在这一节的末尾，
42
sprintf（format，expr，expr2r…-yexpr_）返团（不打印）一个字符串，这个字符串包含格式化了
的expri，expr2，,exprn，格式化的依据与printf的格式说明符相网，printf的格式说明符就是
format.于是，语句
（$P9 0）ud=x
把一个字符串赋值给x，这个字符串通过把S1格式化成10个字符宽度的字符串，把S2格式化成至少
6个字符宽度的十进制整数来生成.2.4节包含了一个完整的，关于格式转换字符的描述。
---
## Page 46
第二章AWK语言
88