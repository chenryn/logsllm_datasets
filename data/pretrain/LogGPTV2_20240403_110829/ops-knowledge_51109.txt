User: So I am relatively new to IPC and I have a c program that collects data and a python program that analyses the data. I want to be able to:

Call the python program as a subprocess of my main c program
Pass a c struct containing the data to be processed to the python process 
Return an int value from the python process back to the c program 

I have been briefly looking at Pipes and FIFO, but so far cannot find any information to address this kind of problem, since as I understand it, a fork() for example will simply duplicate the calling process, so not what I want as I am trying to call a different process.
Assistant: If your struct is simple enough, you could even not use IPC at all. Provided, you can serialize it as string parameters that could be used as program arguments and provided the int value to return can be in the range 0-127, you could simply:

in C code:

prepare the command arguments to pass to the Python script
fork-exec (assuming a Unix-like system) a Python interpretor with the script path and the script arguments
wait for child termination
read what the script passed as code termination

in Python:

get the arguments from command line and rebuild the elements of the struct
process it
end the script with exit(n) where n is an integer in the range 0-127 that will be returned to caller.


If above does not meet your requirements, next level would be to use pipes:

in C code:

prepare 2 pipe pairs one for C->Python (let's call it input), one for Python->C (let's call it output)
serialize the struct into a char buffer
fork
in child


close write side of input pipe
close read side of output pipe
dup read side of input pipe to file descriptor 0 (stdin) (see `dup2)
dup write side of output pipe to file descriptor 1 (stdout)
exec a Python interpretor with the name of the script

in parent


close read side of input pipe
close write side of output pipe
write the buffer (eventually preceded by its size if it cannot be known a priori) to the write side on input file
wait for the child to terminate
read the return value from the read side of output pipe


in Python:

read the serialized data from standard input
process it
write the output integer to standard output
exit