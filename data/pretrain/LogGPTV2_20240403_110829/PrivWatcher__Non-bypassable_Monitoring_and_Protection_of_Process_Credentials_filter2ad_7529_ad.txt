It starts by
exploiting the race condition vulnerability CVE-2016-2059
to control a function pointer that will eventually call the
kernel function commit_creds with malicious parameters to
set the UID of the attacking process to 0.
KNOXout [10] and iovyroot [7] both exploit CVE-2015-
1805 to overwrite the ptmx_fops->check_flags kernel func-
tion. The function pointer would either be used to jump to
a gadget to overwrite addr_limit and directly rewrite the
credentials, in the case of iovyroot, or to jump to the kernel
function override_creds to override the credentials with a
privileged uid, in the case of KNOXout.
PingPong Root, QuadRooter, KNOXout and iovyroot share
the same exploitation technique. All of these exploits work
in roughly two stages: 1) they use the memory corruption
vulnerability to divert kernel control ﬂow and execute some
attacker-speciﬁed shell code; and 2) the shell code then ma-
nipulates process credentials (e.g., overwrites them) in order
to give elevated privileges to attacker processes. They all
failed to overcome kernel code integrity protection and they
all did not need to mount sophisticated code reuse exploita-
tion to compromise the system. In fact, directly calling a
legitimate kernel functions with malicious parameters, like
QuadRooter, would likely bypass all existing code reuse de-
fenses. Even if there exist a tool that can completely elimi-
nate code reuse attacks, the underlying memory corruption
vulnerabilities would still allow attackers to directly carry
out the second stage attack without triggering code integrity
or CFI protection.
All these exploits perfectly fall within the threat model
deﬁned in Section 2. Given that PrivWatcher implements a
proper policy that prevents malicious values to be written
to the credential data ﬁelds, it will be able to stop all these
exploits. It can successfully detect and prevent the second
stage when attackers attempt to manipulate process creden-
tials (Section 3.4). It therefore would have prevented all of
these exploits from successfully gaining root privileges.
These exploits also demonstrate that, in practice, pro-
cess credential is the preferred target of attackers. We can
expect this to remain a signiﬁcant threat as more defense
techniques get enabled by default for the kernel (e.g., [9])
and correspondingly attackers begin carrying out pure non-
control data attacks.
3.4.4 Future Work
We have demonstrated how PrivWatcher can stop existing
kernel attacks. Nevertheless, once PrivWatcher is widely
adopted, attackers are likely to either corrupt other non-
control data ﬁelds, or to ﬁnd ways to overcome the adopted
security policy.
Applying PrivWatcher to other types of non-control data,
such as the credentials of inode structures, the secure link
between them and their usage contexts need to be precisely
deﬁned. As a future work, we will explore how to utilize
automated techniques, such as static source code analysis
(e.g., [38]), to achieve this goal.
In terms of supporting other access control policies en-
forced by the kernel, one potential candidate is SELinux.
SELinux is a mandatory access control (MAC) policy that
assigns every subject (e.g., processes) and every object (e.g.,
ﬁles) a security label. A policy ﬁle, written by the adminis-
trator or generated automatically, gives the allow and deny
rules based on labels. The policy ﬁle is loaded into the ker-
nel for enforcement. PrivWatcher can be easily adapted to
protect SELinux credentials and enforce their semantics by
consulting the policy ﬁle. In this regard, we plan to inves-
tigate applying PrivWatcher mechanisms to protect more
policy-speciﬁc credentials.
4. PROTOTYPE IMPLEMENTATION
We implemented a PrivWatcher prototype for Ubuntu
Linux running on an x86 64 platform. Our prototype uses
QEMU with KVM hardware acceleration as the securely
isolated execution domain (QEMU/KVM). Being a hyper-
visor, QEMU/KVM already provides the ability to intercept
guest kernel’s MMU operations. We note that adopting a
hypervisor is only an implementation decision: as long as
PrivWatcher’s assumptions are met, any isolated execution
domain can be used.
174Apart from our description in Section 3, here we cover ad-
ditional kernel-side changes handling several technicalities in
the Linux kernel. Overall, our prototype added about 750
lines of code (LoC) to the kernel source code.
Reserving the Safe Region: We modiﬁed the kernel linker
script for a large enough slab of contiguous virtual memory
addresses.
It supports the maximum number of processes
in the system, as reported by /proc/sys/kernel/pid_max.
The corresponding physical address for this slab can be stat-
ically determined and PrivWatcher guarantees it is never
mapped writable to the kernel.
Mediating Updates to Process Credentials: PrivWatcher
needs to change the way process privileges are updated so
that it can mediate them. The Linux kernel documentation
states that a process can only change its own privileges and
does so through a read-copy-update (RCU) approach: the
updated credential is a modiﬁed copy of the current one, and
is committed to the process by using three well-deﬁned APIs
(i.e., commit_creds, override_creds, and revert_creds).
These are therefore the only places at which the privilege of
a process is updated, and as mentioned we insert a call to
PrivWatcher for veriﬁcation at these points.
Managing Protected Credentials: We need to handle two
technicalities for the cred structure. First, the cred struc-
ture is reference counted, and the reference counter is an
integer ﬁeld within the cred structure. PrivWatcher would
therefore forbid the kernel from updating the counter. We
solve it by replacing it with a pointer to an external counter
and then refactor the kernel code accordingly (only two
API functions handle counter operations, i.e., get_cred and
put_cred). Second, Linux allows a single cred instance to
be shared among multiple processes. However, given that
PrivWatcher needs to ensure a one-to-one relationship be-
tween credentials and the process it describes, we disabled
this sharing. We require every task_struct (i.e., the PCB)
to have it own copy of the cred structure.
The init Process: The pgd, as well as the task_struct
and cred structures of the init process are not allocated
during runtime but are instead hard-coded. We handle this
corner case by hard-coding the back references of init’s
cred structure to their proper values. We also modify the
linker script so that init’s cred structure resides in a sepa-
rate page which is considered as part of the safe region.
Kernel Threads and Interrupt Context: When the Linux
kernel is running in the context of a kernel thread or han-
dling an interrupt, the interconnection between the active
process PCB and mapped page tables does not hold. A ker-
nel thread is a task that is running only in the kernel context,
without a userspace counterpart. Hence, the kernel does not
need to update the page tables base pointer when a kernel
thread is scheduled. Similarly, when an interrupt is received,
the kernel switches to a diﬀerent context to handle the in-
terrupt, while the page tables base pointer would be still
pointing to the previously interrupted process. PrivWatcher
handles this corner case while implementing the LSM hooks
discussed in Section 3.2. The LSM veriﬁes that the kernel
is not running in either a kernel thread or an interrupt con-
text before enforcing the interconnection between the active
process and the mapped page tables.
5. PERFORMANCE EVALUATION
In this section, we present micro-benchmarks and applica-
tion benchmarks for performance evaluation of PrivWatcher.
We focus on evaluating the additional overhead introduced
(i.e., on top of the assumed security properties). The mea-
surements were made on a system with Intel Core i7-2600
CPU at 3.4GHz and 16GB RAM.
We note here that because of PrivWatcher’s assumptions
(Section 2), the end-to-end performance overhead relative
to an unmodiﬁed kernel should be understood as that of
PrivWatcher, plus those introduced by code integrity and
control data (or CFI) protection. Nevertheless, as we estab-
lish in this section, the additional overhead of PrivWatcher,
relative to the assumed protections, is negligible.
To best capture PrivWatcher’s overhead, we chose to eval-
uate using a comparative approach. First, we measure its
overhead relative to an unmodiﬁed kernel without any as-
sumed protections. We expect a higher overhead in this case,
given that the runtime cost of PrivWatcher monitoring is not
shadowed by other security tools. We then measure against
a rather naive version of code integrity protection: a system
that traps every page table update to ensure that 1) only the
virtual addresses of the kernel’s code section can be mapped
with supervisor (e.g., Ring 0) execution privileges, and 2)
the kernel’s code section is never mapped writable. Addi-
tionally, we ensure that the SMEP bit in cr4 is always set, so
that instruction fetches from the userspace are forbidden in
kernel mode [36]. This naive implementation provides basic
code integrity protection as required by our threat model
(Section 2), and the technique used is similar to many pre-
vious works (e.g., [50, 19, 28]). We expect PrivWatcher’s
additional overhead relative to this implementation of code
integrity protection to be smaller.
We note that our code integrity implementation is purely
for the purpose of measuring PrivWatcher performance and
is not intended to be bullet-proof. Its performance is also not
optimized and the results should not be interpreted as a pre-
diction of the end-to-end aggregate overhead of PrivWatcher
plus the assumed protections.
We omit evaluation of PrivWatcher overhead relative to
CFI protection for two reasons: 1) currently Linux kernel
space ASLR only randomizes the kernel code load location
at boot time [9] and therefore does not introduce runtime
overhead; 2) since most CFI protection mechanisms rely on
(or ensure) code integrity protection, and that as we demon-
strate the overhead of PrivWatcher itself is small, the addi-
tional performance cost of CFI will dominate and dwarf that
of PrivWatcher.
In the following we refer to the overhead of only running
PrivWatcher as “PW NoTrap”, the overhead of our imple-
mentation of code integrity protection as “PGT Trap”, and
ﬁnally the combined overhead of PrivWatcher and code in-
tegrity protection as “PW Trap”. The results shown are
overhead values relative to the benchmark scores of an un-
modiﬁed kernel.
5.1 Micro-benchmarks
Table 1 shows the results of evaluating PrivWatcher using
UnixBench [14]. For all test cases except execl, process cre-
ation, and shell scripts, there was no signiﬁcant diﬀerence in
performance. These test cases involve intensive computation
or I/O operations and do not trigger events that need to be
monitored (i.e., changes to process privileges and PGT up-
175Dhrystone2
Whetstone
Execl
File Copy 1024B
File Copy 256B
File Copy 4096B
Pipe
Process Creation
Shell Scripts (8)
System Call
PW NoTrap PGT Trap PW Trap
%
%
%
-0.1
-1.1
23.3
0.0
0.0
-0.9
1.3
22.3
11.0
-0.5
-0.1
-0.7
91.5
-0.2
0.2
0.1
0.3
93.3
85.4
-0.3
-0.2
-3.7
94.4
-2.2
1.1
-2.7
1.3
95.1
90.1
3.7
Table 1: UnixBench results, showing overhead in
percentage relative to an unmodiﬁed kernel, the
lower the better.
PW NoTrap PGT Trap PW Trap
%
%
%
bzip2
gzip
ApacheBench
kcbench
1.2
1.1
0.0
1.5
-1.0
1.3
-0.7
56.1
1.6
2.2
-1.0
56.8
Table 2: Application benchmark results, showing
overhead relative to an unmodiﬁed kernel, the lower
the better. The values shown are averages over 10
runs, with standard deviation less than 5% for all
benchmarks.
dates). The diﬀerences shown are likely within the margin
or error of our experiments.
In the case of execl and process creation, we see an over-
head of about 22% for PW NoTrap, and about 94% for PW
Trap. Both of these operations involve installing a new cred
structure to processes and therefore PrivWatcher needs to
be invoked to check for any potential malicious privilege es-
calations. As can be seen, most of the overhead for PW Trap
is due to trapping PGT updates (PGT Trap). The relative
overhead of PW Trap to PGT Trap is only 3.2% and 1.9%
for execl and process creation, respectively.
For both PW NoTrap and PW Trap, the overhead of the
shell script test closely mirrors that of execl and process cre-
ation. This is expected, since shell scripts typically need to
invoke multiple processes. Consequently, the cost of process
creation and program loading becomes a dominant factor.
5.2 Application Benchmarks
To evaluate PrivWatcher’s impact on overall system per-
formance, we experimented with two ﬁle compression appli-
cations (bzip2 and gzip), ApacheBench [1] (a web bench-
marking tool), as well as a kernel compilation benchmark
(kcbench [8]). These applications oﬀer a mixture of com-
putation, I/O and network operations, process/thread cre-
ation, and program loading that mimics a typical real-world
workload. Speciﬁcally, bzip2 and gzip were used to com-
press a 107MB ﬁle. ApacheBench was used to run 100 GET
requests to the Google main page. The kernel compilation
benchmarking tool kcbench was run on the Linux mainline
kernel source tree with a concurrency level of 1 (-j1).
Table 2 shows the application benchmark results. As ex-
pected from micro-benchmark, for compute, I/O, or network-
intensive applications (bzip2, gzip, and ApacheBench), nei-