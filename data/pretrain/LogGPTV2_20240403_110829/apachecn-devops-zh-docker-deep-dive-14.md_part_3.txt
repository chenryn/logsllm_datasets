    ```
     $ docker secret create revprox_cert domain.crt
     cqblzfpyv5cxb5wbvtrbpvrrj
     $ docker secret create revprox_key domain.key
     jqd1ramk2x7g0s2e9ynhdyl4p
     $ docker secret create postgres_password domain.key
     njpdklhjcg8noy64aileyod6l 
    ```
    `*   创造`staging_token`机密。
    ```
     $ echo staging | docker secret create staging_token -
     sqy21qep9w17h04k3600o6qsj 
    ```
    `*   列出机密。
    ```
     $ docker secret ls
     ID          NAME                DRIVER    CREATED              UPDATED
     njp...d6l   postgres_password             47 seconds ago       47 seconds ago
     cqb...rrj   revprox_cert                  About a minute ago   About a minute ago
     jqd...l4p   revprox_key                   About a minute ago   About a minute ago
     sqy...qsj   staging_token                 23 seconds ago       23 seconds ago 
    ```
    ``` 
 ```这是所有的先决条件。该部署应用了！
##### 部署示例应用
如果你还没有这样做，克隆应用的 GitHub 回购到你的 Swarm 管理器。
```
$ git clone https://github.com/dockersamples/atsea-sample-shop-app.git
Cloning into 'atsea-sample-shop-app'...
remote: Enumerating objects: 30, done.
remote: Counting objects: 100% (30/30), done.
remote: Compressing objects: 100% (30/30), done.
remote: Total 672 (delta 20), reused 0 (delta 0), pack-reused 642
Receiving objects: 100% (672/672), 7.29 MiB | 33.19 MiB/s, done.
Resolving deltas: 100% (217/217), done.
$ cd atsea-sample-shop-app 
```
 `现在您已经有了代码，可以部署应用了。
使用`docker stack deploy`命令部署栈。在其基本形式中，它接受两个参数:
*   栈文件的名称
*   栈的名称
该应用的 GitHub 存储库包含一个名为`docker-stack.yml`的栈文件，因此我们将使用它作为栈文件。我们将栈称为`seastack`，尽管如果您不喜欢，可以选择不同的名称。
在 Swarm 管理器的`atsea-sample-shop-app`目录中运行以下命令。
部署栈(应用)。
```
$ docker stack deploy -c docker-stack.yml seastack
Creating network seastack_default
Creating network seastack_back-tier
Creating network seastack_front-tier
Creating network seastack_payment
Creating service seastack_database
Creating service seastack_appserver
Creating service seastack_visualizer
Creating service seastack_payment_gateway
Creating service seastack_reverse_proxy 
```
 `您可以运行`docker network ls`和`docker service ls`命令来查看作为应用一部分部署的网络和服务。
从命令输出中需要注意的几件事。
网络是在服务出现之前创建的。这是因为服务连接到网络，因此需要先创建网络，然后才能启动。
Docker 在其创建的每个资源前添加栈的名称。在我们的示例中，栈被称为`seastack`，这意味着所有资源都被命名为`seastack_`。例如，`payment`网络被称为`seastack_payment`。部署前创建的资源(如机密)不会被重命名。
另外需要注意的是一个名为`seastack_default`的网络的存在。这在栈文件中没有定义，那么为什么要创建它呢？每个服务都需要连接到一个网络，但是`visualizer`服务没有指定一个。因此，Docker 创建了一个名为`seastack_default`的网站，并将其附在上面。您可以通过运行`docker network inspect seastack_default`命令来验证这一点。
您可以使用几个命令来验证栈的状态。`docker stack ls`列出系统上的所有栈，包括它们有多少服务。`docker stack ps `给出特定栈的更详细信息，如*期望状态*和*当前状态*。让我们看看他们俩。
```
$ docker stack ls
NAME                SERVICES       ORCHESTRATOR
seastack            5              Swarm
$ docker stack ps seastack
NAME                          NODE     DESIRED STATE    CURRENT STATE
seastack_reverse_proxy.1      wrk-2    Running          Running 7 minutes ago
seastack_payment_gateway.1    wrk-1    Running          Running 7 minutes ago
seastack_visualizer.1         mgr-1    Running          Running 7 minutes ago
seastack_appserver.1          wrk-2    Running          Running 7 minutes ago
seastack_database.1           wrk-2    Running          Running 7 minutes ago
seastack_appserver.2          wrk-1    Running          Running 7 minutes ago 
```
 `当对无法启动的服务进行故障排除时，`docker stack ps`命令是一个很好的开始位置。它概述了栈中的每个服务，包括每个副本计划在哪个节点上、当前状态、所需状态和错误消息。以下输出显示了在`wrk-2`节点上为`reverse_proxy`服务启动副本的两次失败尝试。
```
$ docker stack ps seastack
NAME                NODE     DESIRED      CURRENT  ERROR
                             STATE        STATE
reverse_proxy.1     wrk-2    Shutdown     Failed   "task: non-zero exit (1)"
\_reverse_proxy.1   wrk-2    Shutdown     Failed   "task: non-zero exit (1)" 
```
 `要了解特定服务的更多详细日志，您可以使用`docker service logs`命令。您可以将服务名称/标识或副本标识传递给它。如果您将服务名称或 ID 传递给它，您将获得所有服务副本的日志。如果您向它传递一个特定的副本标识，您将只能获得该副本的日志。
以下`docker service logs`命令显示了`seastack_reverse_proxy`服务中所有副本的日志，这些副本在之前的输出中有两个失败的副本。
```
$ docker service logs seastack_reverse_proxy
seastack_reverse_proxy.1.zhc3cjeti9d4@wrk-2 | [emerg] 1#1: host not found...
seastack_reverse_proxy.1.6m1nmbzmwh2d@wrk-2 | [emerg] 1#1: host not found...
seastack_reverse_proxy.1.6m1nmbzmwh2d@wrk-2 | nginx: [emerg] host not found..
seastack_reverse_proxy.1.zhc3cjeti9d4@wrk-2 | nginx: [emerg] host not found..
seastack_reverse_proxy.1.1tmya243m5um@mgr-1 | 10.255.0.2 "GET / HTTP/1.1" 302 
```
 `输出被修剪以适合页面，但是您可以看到显示了来自所有三个服务副本的日志(两个失败，一个正在运行)。每一行都以复制副本的名称开始，包括服务名称、复制副本编号、复制副本标识和计划运行的主机名称。下面是日志输出。
> **注意:**您可能已经注意到，前面输出中的所有副本都显示为副本编号 1。这是因为 Docker 一次创建一个，并且在前一个失败时才开始一个新的。
这很难说，因为输出被修剪以适合书籍，但看起来前两个副本失败了，因为它们依赖于另一个服务中仍在启动的东西(当相关服务启动时，这是一种竞争条件)。
你可以跟踪日志(`--follow`)，跟踪日志(`--tail`)，获取额外的细节(`--details`)。
现在栈已经启动并运行，让我们看看如何管理它。
#### 管理应用
我们知道*栈*是一组相关的服务和基础设施，作为一个单元进行部署和管理。虽然这是一个充满时髦词汇的花哨句子，但它提醒我们，栈是由正常的 Docker 资源构建的——网络、卷、机密、服务等。这意味着我们可以用它们正常的 docker 命令来检查它们:`docker network`、`docker volume`、`docker secret`、`docker service` …
考虑到这一点，可以使用`docker service`命令来管理作为栈一部分的服务。一个简单的例子是使用`docker service scale`命令增加`appserver`服务中的副本数量。但是，**这不是推荐的方法！**
推荐的方法是声明性方法，它使用栈文件作为真理的最终来源。因此，对栈的所有更改都应该对栈文件进行，然后更新后的栈文件应该用于重新部署应用。
下面是为什么命令式方法(通过命令行界面进行更改)不好的一个快速例子:
> *假设您有一个从本章前面从 GitHub 克隆的`docker-stack.yml`文件部署的栈。这意味着您有两个`appserver`服务的副本。如果使用`docker service scale`命令将其更改为 4 个副本，集群的当前观察状态将是 4 个正在运行的副本，但栈文件仍将定义 2 个。诚然，这听起来不像世界末日。但是，假设您随后编辑栈文件以使用更新的映像，并使用`docker stack deploy`命令以推荐的方式将其展开。作为此次推广的一部分，集群中`appserver`副本的数量将回滚到 2 个，因为您从未将栈文件更新为 4 个副本。出于这种原因，建议通过栈文件对应用进行所有更改，并在适当的版本控制系统中管理栈文件。*
让我们走一遍对栈进行一些声明性更改的过程。
我们将进行以下更改:
*   将`appserver`副本的数量从 2 个增加到 10 个
*   将可视化工具服务的停止宽限期延长至 2 分钟
编辑`docker-stack.yml`文件并更新以下两个值:
*   `.services.appserver.deploy.replicas=10`
*   `.services.visualizer.stop_grace_period=2m`
栈文件的相关部分现在如下所示:
```
appserver:
  image: dockersamples/atsea_app
  networks:
    - front-tier
    - back-tier
    - payment
  deploy:
    replicas: 2             
visualizer:
  image: dockersamples/visualizer:stable
  ports:
    - "8001:8080"
  stop_grace_period: 2m     <<Updated value
<Snip 
```
 `保存文件并重新部署应用。
```
$ docker stack deploy -c docker-stack.yml seastack
Updating service seastack_reverse_proxy (id: z4crmmrz7zi83o0721heohsku)
Updating service seastack_database (id: 3vvpkgunetxaatbvyqxfic115)
Updating service seastack_appserver (id: ljht639w33dhv0dmht1q6mueh)
Updating service seastack_visualizer (id: rbwoyuciglre01hsm5fviabjf)
Updating service seastack_payment_gateway (id: w4gsdxfnb5gofwtvmdiooqvxs) 
```
 `像这样重新部署应用只会更新已更改的组件。
运行`docker stack ps`查看`appserver`副本数量增加。
```
$ docker stack ps seastack
NAME                    NODE     DESIRED STATE   CURRENT STATE
seastack_visualizer.1   mgr-1    Running         Running 1 second ago
seastack_visualizer.1   mgr-1    Shutdown        Shutdown 3 seconds ago
seastack_appserver.1    wrk-2    Running         Running 24 minutes ago
seastack_appserver.2    wrk-1    Running         Running 24 minutes ago
seastack_appserver.3    wrk-2    Running         Running 1 second ago
seastack_appserver.4    wrk-1    Running         Running 1 second ago
seastack_appserver.5    wrk-2    Running         Running 1 second ago
seastack_appserver.6    wrk-1    Running         Starting 7 seconds ago
seastack_appserver.7    wrk-2    Running         Running 1 second ago
seastack_appserver.8    wrk-1    Running         Starting 7 seconds ago
seastack_appserver.9    wrk-2    Running         Running 1 second ago
seastack_appserver.10   wrk-1    Running         Starting 7 seconds ago 
```
 `输出已被修剪，以便适合页面，并且只显示更新的服务。
注意`visualizer`服务有两行。一行显示 3 秒前关闭的副本，另一行显示已经运行 1 秒的副本。这是因为我们对`visualizer`服务所做的更改导致 Swarm 终止现有的副本，并使用新的`stop_grace_period`值开始新的副本。
您还可以看到`appserver`服务现在有 10 个副本，并且它们在“当前状态”列中处于不同的状态——一些是*运行*，而另一些仍然是*启动*。
足够的时间后，集群将收敛，使得*当前观察状态*与新的*期望状态*相匹配。此时，集群上部署和观察到的内容将与栈文件中定义的内容完全匹配。这是一个快乐的地方
这种声明式更新模式应该用于对应用/栈的所有更新。也就是说**所有的更改都应该通过栈文件以声明方式进行，并使用`docker stack deploy`** 展开。
删除栈的正确方法是使用`docker stack rm`命令。不过要注意！它删除栈而不要求确认。
```
$ docker stack rm seastack
Removing service seastack_appserver
Removing service seastack_database
Removing service seastack_payment_gateway
Removing service seastack_reverse_proxy
Removing service seastack_visualizer
Removing network seastack_front-tier
Removing network seastack_payment
Removing network seastack_default
Removing network seastack_back-tier 
```
 `请注意，网络和服务被删除，但机密没有被删除。这是因为机密是预先创建的，并且在部署栈之前就存在了。如果您的栈在顶层定义了卷，这些卷也不会被`docker stack rm`删除。这是因为卷旨在作为长期持久的数据存储，并且独立于容器、服务和栈的生命周期而存在。
恭喜你。您知道如何使用 Docker Stacks 部署和管理多服务应用。
### 使用 Docker 栈部署应用-命令
*   `docker stack deploy`是部署**和**更新栈文件(通常称为`docker-stack.yml`)中定义的服务栈的命令。
*   `docker stack ls`列出 Swarm 上的所有栈，包括它们有多少服务。
*   `docker stack ps`给出了已部署栈的详细信息。它接受栈的名称作为其主要参数，列出每个副本在哪个节点上运行，并显示*期望状态*和*当前状态*。
*   `docker stack rm`从蜂群中删除一个栈。在删除栈之前，它不会要求确认。
### 章节总结
栈是本机 Docker 解决方案，用于部署和管理具有多种服务的云本机微服务应用。它们被整合到 Docker 引擎中，并为部署和管理应用的整个生命周期提供了一个简单的声明性界面。
您从应用代码和一组基础设施需求开始，比如网络、端口、卷和机密。您将应用容器化，并将所有应用服务和基础设施需求组合到一个声明性栈文件中。您可以设置副本的数量，以及滚动更新和重启策略。然后，使用`docker stack deploy`命令获取文件并从中部署应用。
未来对已部署应用的更新应该通过声明方式完成，方法是将栈文件签出源代码管理，对其进行更新，重新部署应用，并将栈文件签回源代码管理。
因为栈文件定义了诸如服务副本数量之类的东西，所以您应该为每个环境维护单独的栈文件，例如开发、测试和生产。`````````````````````````````````