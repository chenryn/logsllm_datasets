# Index of Terms and Concepts

## E
### Encapsulation and Packets
- **Encapsulation**: The process of wrapping data in a protocol header, forming a packet.
- **Packets**: Units of data transmitted over a network, typically encapsulated within headers.

### Encoding Functions
- **EncodePointer() Function**: A function used to obfuscate pointers for security purposes.
- **EncodeSystemPointer() Function**: A function designed to encode system-specific pointers securely.

### Encoding
- **Entities (Encoded Data)**: Special characters or sequences that represent specific information in various encoding schemes.
- **HTML Encoding**: A method of encoding HTML content to prevent script injection.
- **Multiple Encoding Layers**: Using more than one encoding scheme to secure data.
- **Parameters**: Variables or values passed to an encoding function.
- **UTF-16 Encoding**: A character encoding capable of encoding all 1,112,064 valid code points in Unicode using one to four 16-bit code units.
- **UTF-8 Encoding**: A variable-width character encoding capable of encoding all 1,112,064 valid code points in Unicode using one to four 8-bit bytes.
- **XML Encoding**: A method of encoding XML data to ensure it is properly formatted and secure.

### Encryption
- **Algorithms**: Mathematical procedures for performing encryption and decryption.
- **Asymmetric Encryption**: A form of encryption where the key used to encrypt the data is different from the key used to decrypt it.
- **Block Ciphers**: Symmetric key algorithms that operate on fixed-length groups of bits, called blocks.
- **Common Vulnerabilities**: Known weaknesses in encryption systems that can be exploited.
- **Digital Encryption Standard (DES) Encryption**: An outdated symmetric-key algorithm for the encryption of electronic data.
- **ISAKMP (Internet Security Association and Key Management Protocol)**: A protocol used to establish security associations and cryptographic keys.
- **IV (Initialization Vector)**: A random or pseudo-random value used in conjunction with a secret key for data encryption.
- **Key Exchange Algorithms**: Methods for securely exchanging cryptographic keys between two parties.
- **Stream Ciphers**: Symmetric key ciphers that encrypt individual digits (usually bits) of a plaintext message.
- **Symmetric Encryption**: A form of encryption where the same key is used for both encryption and decryption.

### End User License Agreements (EULAs)
- **EULAs**: Legal agreements between software developers and users, outlining the terms and conditions of software usage.

### Endpoint Mappers
- **Endpoint Mappers**: Components that map service endpoints to their respective communication channels.

### Endpoints and RPC Servers
- **Binding to Endpoints**: The process of connecting to a remote procedure call (RPC) server through its specified endpoint.

### Enforcing Policies
- **Enforcing Policies**: Implementing and maintaining rules and guidelines to ensure security and compliance.

### Enhanced Kernel Protections
- **Enhanced Kernel Protections**: Additional security measures implemented in the kernel to protect against vulnerabilities.

### Enterprise Firewalls
- **Layer 7 Inspection**: A deep packet inspection technique that examines application layer data to identify and block malicious traffic.

### Entries in UNIX Directories
- **Entries**: Individual files or directories listed in a UNIX directory.

### Entry Points
- **Entry Points**: The initial points of execution in a program or system.

### ENV Environment Variable (UNIX)
- **ENV Environment Variable**: A variable in UNIX that specifies the path to the user's default shell initialization file.

### Environment Arrays and File Descriptors (UNIX)
- **Environment Arrays**: Arrays of environment variables in UNIX.
- **File Descriptors**: Integer values that represent open files in a UNIX system.

### Environment Strings (Linux)
- **Environment Strings**: Key-value pairs that store configuration information in Linux.

### Environment Subsystems
- **Environment Subsystems**: Components that manage the environment in which applications run.

### Environment Variables
- **PATH_INFO**: A CGI environment variable that contains additional path information.
- **UNIX Environment Variables**: Variables that configure the environment in a UNIX system.

### Environmental Attacks
- **Environmental Attacks**: Exploits that target the environment in which a system operates.

### Equality Operators
- **Equality Operators**: Operators used to compare two values for equality.

### err() Function
- **err() Function**: A function used to print error messages in C.

### Error Checking Branches and Code Paths
- **Error Checking Branches**: Code paths that handle and check for errors during program execution.

### Error Domains
- **Error Domains**: Categories or types of errors that can occur in a system.

### Error Messages in Web-Based Applications
- **Overly Verbose Error Messages**: Detailed error messages that can provide attackers with sensitive information.

### Errors
- **Lists and Pointer Updates**: Issues related to managing lists and updating pointers.
- **Loops**: Errors that occur within loops, such as infinite loops or off-by-one errors.

### escape_sql() Function
- **escape_sql() Function**: A function used to escape special characters in SQL queries to prevent SQL injection.

### Escaping Metacharacters
- **Escaping Metacharacters**: The process of neutralizing special characters to prevent them from being interpreted as metacharacters.

### ESP (Extended Stack Pointer)
- **ESP**: A register in x86 architecture that points to the top of the stack.

### Stefan Esser
- **Stefan Esser**: A well-known security researcher and hacker.

### Establishing TCP Connections
- **Establishing TCP Connections**: The process of setting up a connection-oriented communication channel using the TCP protocol.

### ETag Header Field (HTTP)
- **ETag Header Field**: An HTTP response header that provides a unique identifier for a resource.

### /etc Directory (UNIX)
- **/etc Directory**: A directory in UNIX systems that contains system-wide configuration files.

### eval() Function
- **Perl eval() Function**: A function in Perl that evaluates a string as a Perl expression.
- **PHP eval() Function**: A function in PHP that evaluates a string as PHP code.

### Evasion
- **Metacharacter Evasion**: Techniques used to bypass metacharacter filtering in input validation.

### Event Objects (Windows NT)
- **Event Objects**: Synchronization objects in Windows NT that signal the occurrence of an event.

### Examples
- **Example of Bad Counting with Structure Padding (Listing 6-34)**: An example demonstrating issues with structure padding.
- **Example of Dangerous Program Use (Listing 8-19)**: An example showing how a program can be misused.
- **Example of Structure Padding Double Free (Listing 6-33)**: An example illustrating double free issues due to structure padding.

### Exception Handling (C++)
- **Exception Handling (EH)**: A mechanism in C++ for handling runtime errors and other exceptional conditions.

### Exceptional Conditions
- **Exceptional Conditions**: Unusual or unexpected situations that require special handling.

### execl() Function
- **execl() Function**: A function in C that replaces the current process image with a new process image.

### Execute() Function (ASP)
- **Execute() Function**: A function in ASP that executes a command or script.

### execve() Function
- **execve() Function**: A system call in UNIX that executes a new program, replacing the current process.

### ExpandEnvironmentStrings() Function
- **ExpandEnvironmentStrings() Function**: A Windows API function that expands environment variables in a string.

### Expect Header Field (HTTP)
- **Expect Header Field**: An HTTP request header that indicates expectations the client has about the server's behavior.

### Expectations in Security
- **Security Expectations**: Assumptions and requirements regarding the security of a system or application.

### Expert C Programming
- **Expert C Programming**: A book or resource on advanced C programming techniques.

### Expires Header Field (HTTP)
- **Expires Header Field**: An HTTP response header that specifies when a resource should be considered stale.

### Explicit Allow and Deny Filters
- **Explicit Allow Filters (White Lists)**: Filters that explicitly allow certain inputs while blocking others.
- **Explicit Deny Filters (Black Lists)**: Filters that explicitly block certain inputs while allowing others.

### Explicit Type Conversions
- **Explicit Type Conversions**: Conversions between data types that are explicitly specified by the programmer.

### Exploiting Software
- **Exploiting Software**: Techniques and methods used to exploit vulnerabilities in software.

### Exploiting Transitive Trusts
- **Exploiting Transitive Trusts**: Taking advantage of trust relationships between systems to gain unauthorized access.

### Export Function Tables
- **Export Function Tables**: Tables that list functions exported by a dynamic link library (DLL).

### Extended Base Pointer (EBP)
- **EBP**: A register in x86 architecture that holds the base address of the current stack frame.

### Extended Stack Pointer (ESP)
- **ESP**: A register in x86 architecture that points to the top of the stack.

### Extensible Stylesheet Language Transformations (XSLT)
- **XSLT**: A language for transforming XML documents into other formats, such as HTML or plain text.

### Extensions and UNIX Privileges
- **Extensions**: Add-ons or additional features that extend the functionality of a system.
- **UNIX Privileges**: Permissions and rights granted to users and processes in a UNIX system.

### External Application Invocation (OpenSSH)
- **External Application Invocation**: The process of launching an external application, such as OpenSSH, from within another program.

### External Entities
- **External Entities**: References to external resources in XML documents.

### External Flow Sensitivity
- **External Flow Sensitivity**: The sensitivity of code analysis to the flow of data from external sources.

### External Trust Levels
- **External Trust Levels**: The levels of trust assigned to external sources in a system.

### External Trusted Sources and Spoofing Attacks
- **Spoofing Attacks**: Attacks where an attacker impersonates a trusted source to gain unauthorized access.
- **Firewalls**: Network security systems that monitor and control incoming and outgoing network traffic based on predetermined security rules.

### Extraneous Delimiters
- **Extraneous Delimiters**: Unnecessary or incorrect delimiters in input or data.

### Extraneous Filename Characters (Windows NT)
- **Extraneous Filename Characters**: Invalid or unnecessary characters in filenames in Windows NT.

### Extraneous Input Thinning
- **Extraneous Input Thinning**: The process of removing unnecessary or invalid input from test cases or code audits.

## F
### Failure Handling
- **Failure Handling**: The process of managing and responding to failures or errors in a system.

### Fastcalls
- **Fastcalls**: A calling convention in x86 assembly that allows for faster function calls.

### fclose() Function
- **fclose() Function**: A C function that closes a file stream.

### fcntl() Function
- **fcntl() Function**: A UNIX system call that manipulates file descriptor properties.

### Feasibility Studies (SDLC)
- **Feasibility Studies**: Assessments conducted during the System Development Life Cycle (SDLC) to determine the practicality of a project.

### Feng, Dengguo
- **Dengguo Feng**: A notable figure in the field of cryptography and computer security.

### Ferguson, Niels
- **Niels Ferguson**: A renowned cryptographer and security expert.

### fgets() Function
- **fgets() Function**: A C function that reads a line from a file stream.

### Fields, Hidden Fields, and Auditing
- **Hidden Fields**: Form fields that are not visible to the user but can be used to store data.
- **Auditing**: The process of reviewing and analyzing system or application logs and configurations for security and compliance.

### FIFOs (UNIX)
- **FIFOs (First In, First Out)**: Named pipes in UNIX that facilitate inter-process communication.

### File Access
- **ASP**: File access in Active Server Pages (ASP).
- **ASP.NET**: File access in ASP.NET.
- **Java Servlets**: File access in Java servlets.
- **Perl**: File access in Perl.
- **PHP**: File access in PHP.

### File Canonicalization
- **Path Metacharacters**: Special characters in file paths that need to be canonicalized to prevent security issues.

### File Descriptors (UNIX)
- **File Descriptors**: Integer values that represent open files in a UNIX system.

### File Handlers
- **File Handlers**: Components or functions that manage file operations.

### File I/O API (Windows NT)
- **File I/O API**: The set of functions and interfaces in Windows NT for performing file input and output operations.

### File Inclusion
- **ASP**: File inclusion in Active Server Pages (ASP).
- **ASP.NET**: File inclusion in ASP.NET.
- **Java Servlets**: File inclusion in Java servlets.
- **Perl**: File inclusion in Perl.
- **PHP**: File inclusion in PHP.

### File Path Truncation
- **Truncation**: The process of shortening file paths, which can lead to security vulnerabilities.

### File Squatting (Windows NT)
- **File Squatting**: A technique where an attacker creates a file to interfere with legitimate file operations.

### File Streams (Windows NT)
- **File Streams**: Features in Windows NT that allow multiple data streams to be associated with a single file.

### File System IDs (Linux)
- **File System IDs**: Identifiers used to uniquely identify file systems in Linux.

### File System Layout
- **File System Layout**: The organization and structure of a file system.

### File Systems
- **OS Interaction**: How file systems interact with the operating system.
- **Permissions**: Access control settings for files and directories.

### File Transfer Protocol (FTP)
- **FTP (File Transfer Protocol)**: A standard network protocol used for transferring files between a client and a server.

### File Types (Windows NT)
- **File Types**: Different types of files recognized by the Windows NT operating system.

### Filenames (UNIX)
- **Filenames**: Names assigned to files in a UNIX system.

### Files
- **Change Monitoring**: Tracking changes to files.
- **Closing Files**: Closing open files in the stdio system.
- **Core Files**: Files generated when a program crashes, containing a snapshot of the program's memory.
- **Opening Files**: Opening files in the stdio system.
- **Reading Files**: Reading data from files in the stdio system.
- **Umask**: A file mode creation mask that determines the default permissions for newly created files.
- **UNIX Files**: Files in a UNIX system, including boot files, device files, directories, and more.
- **Windows NT Files**: Files in the Windows NT operating system, including canonicalization, case sensitivity, and file types.

### Filesystem Hierarchy Standard (UNIX)
- **Filesystem Hierarchy Standard**: A reference describing the conventions used for the layout of a UNIX-like file system.

### Filtering Metacharacters
- **Character Stripping Vulnerabilities**: Security issues arising from insufficient filtering of metacharacters.
- **Escaping Metacharacters**: Neutralizing special characters to prevent them from being interpreted as metacharacters.
- **Insufficient Filtering**: Inadequate filtering of input, leading to potential security vulnerabilities.
- **Metacharacter Evasion**: Techniques used to bypass metacharacter filtering in input validation.

### Filters
- **Explicit Allow Filters (White Lists)**: Filters that explicitly allow certain inputs while blocking others.
- **Explicit Deny Filters (Black Lists)**: Filters that explicitly block certain inputs while allowing others.

### Finding Return Values (Listing 7-27)
- **Finding Return Values**: An example or listing that demonstrates how to find and handle return values in code.

### Findings Summaries
- **Findings Summaries**: Reports summarizing the results of an application review or security assessment.

### Firewalls
- **Attack Surfaces**: The total sum of the different points where an unauthorized user can try to enter data to or extract data from an environment.
- **Host-Based Firewalls**: Firewalls installed on individual host machines to control network traffic.
- **Layer 7 Inspection**: A deep packet inspection technique that examines application layer data to identify and block malicious traffic.
- **Packet-Filtering Firewalls**: Firewalls that inspect and filter packets based on predefined rules.
- **Proxy Firewalls**: Firewalls that act as intermediaries between clients and servers, filtering and forwarding requests.
- **Spoofing Attacks**: Attacks where an attacker impersonates a trusted source to gain unauthorized access.
- **Stateful Firewalls**: Firewalls that keep track of the state of network connections and make decisions based on that state.
- **Stateless Firewalls**: Firewalls that do not maintain any state information and make decisions based solely on individual packets.

### Flags
- **ACEs (Access Control Entries)**: Entries in an access control list (ACL) that specify permissions for a security principal.
- **TCP Connections**: Flags used in TCP connections, such as the URG flag.
- **URG Flags**: The urgent pointer flag in the TCP header, indicating the presence of urgent data.

### Floating Points and Conversions
- **Floating Point Conversions**: Conversions between floating-point and other numeric types.

### Floating Types (C Programming Language)
- **Floating Types**: Data types in C that represent real numbers, such as float and double.

### Floats
- **Floats**: Data types in programming languages that represent real numbers.

### Flow Analysis
- **Flow Analysis**: The process of analyzing the flow of data and control in a program.

### Flow Transfer Statements
- **Flow Transfer Statements**: Statements that transfer control from one part of a program to another, such as if, for, and while.

### Flow, Control Flow
- **Control Flow**: The order in which statements, instructions, or function calls are executed in a program.

### fopen() Function
- **fopen() Function**: A C function that opens a file and returns a file pointer.

### fork() Function
- **fork() Function**: A system call in UNIX that creates a new process by duplicating the current process.

### Format Specifiers
- **Format Specifiers**: Special placeholders in format strings that define how data should be formatted.

### Format String Vulnerability in a Logging Routine (Listing 8-17)
- **Format String Vulnerability**: A vulnerability that occurs when a format string is constructed from user input without proper validation.

### Format String Vulnerability in WU-FTPD (Listing 8-16)
- **Format String Vulnerability**: A specific example of a format string vulnerability in the WU-FTPD FTP server.

### Format Strings
- **Format Strings**: Strings that contain format specifiers, used to format output in functions like printf.

### Formats and Metacharacters
- **Formats**: Various formats used in different contexts, such as format strings, path metacharacters, and SQL queries.
- **Metacharacters**: Special characters that have a specific meaning in a given context, such as shell metacharacters and SQL metacharacters.

### Forms (HTTP)
- **Forms**: HTML forms used to collect and submit data in web applications.

### forward() Method (Java Servlets)
- **forward() Method**: A method in Java servlets that forwards a request to another resource.

### Forward-Tracing Code
- **Forward-Tracing Code**: Code that follows the flow of data and control from the current point to future points.

### fprintf() Function
- **fprintf() Function**: A C function that formats and writes data to a file stream.

### Fragmentation
- **IP Fragmentation**: The process of breaking IP packets into smaller fragments to fit within the maximum transmission unit (MTU) of a network.
- **Overlapping Fragments**: Fragments that overlap in their data, which can be used to exploit vulnerabilities.
- **Pathological Fragment Sets**: Sets of fragments that are crafted to cause issues in the receiving system.
- **Processing**: The process of reassembling fragmented packets.
- **Stateful Firewalls**: Firewalls that keep track of the state of network connections and handle fragmentation.
- **Stateless Firewalls**: Firewalls that do not maintain state information and handle fragmentation differently.
- **Zero-Length Fragments**: Fragments with no data, which can be used to exploit vulnerabilities.

### Frasunek, Przemyslaw
- **Przemyslaw Frasunek**: A notable figure in the field of computer security and cryptography.

### fread() Function
- **fread() Function**: A C function that reads binary data from a file stream.

### free() Function
- **free() Function**: A C function that deallocates memory previously allocated with malloc, calloc, or realloc.

### FreeBSD
- **FreeBSD**: A free and open-source Unix-like operating system.
- **Privileges**: Dropping privileges temporarily to reduce the risk of security vulnerabilities.

### From Header Field (HTTP)
- **From Header Field**: An HTTP request header that contains the email address of the person responsible for generating the request.

### fscanf() Function
- **fscanf() Function**: A C function that reads formatted data from a file stream.

### fstat() Function
- **fstat() Function**: A UNIX system call that retrieves information about an open file.

### ftok() Function
- **ftok() Function**: A UNIX system call that generates a unique key from a pathname and a project ID.

### FTP (File Transfer Protocol)
- **Active FTP**: A mode of FTP where the client initiates the data connection.
- **Passive FTP**: A mode of FTP where the server initiates the data connection.
- **Stateless Firewalls**: Firewalls that do not maintain state information and handle FTP differently.

### Fully Functional Resolvers (DNS)
- **Fully Functional Resolvers**: DNS resolvers that can perform all necessary DNS resolution tasks.

### Function Pointers
- **Obfuscation**: Techniques used to make function pointers less understandable and harder to reverse-engineer.
- **Registration of Function Pointers**: The process of registering function pointers for later use.

### Function Prologue (Listing 5-1)
- **Function Prologue**: The initial part of a function that sets up the stack frame and local variables.

### Function Prototypes (C Programming Language)
- **Function Prototypes**: Declarations that specify the name, return type, and parameters of a function, used for type checking.

### Functions
- **_wsprintfW() Function**: A wide-character version of the sprintf function in Windows.
- **_xlate_ascii_write() Function**: A function used for writing translated ASCII data.
- **access() Function**: A UNIX system call that checks the accessibility of a file.
- **AdjustTokenGroups() Function**: A Windows API function that modifies the group membership of a token.
- **AdjustTokenPrivileges() Function**: A Windows API function that adjusts the privileges of a token.
- **alloc() Function**: A function used to allocate memory.
- **Allocation Functions**: Functions that allocate memory, which should be audited for security.
- **apr_palloc() Function**: A memory allocation function in the Apache Portable Runtime (APR) library.
- **Auditing Functions**: The process of reviewing and analyzing functions for security and correctness.
- **authenticate() Function**: A function used to authenticate a user.
- **Bounded String Functions**: Functions that operate on strings with a bounded length, reducing the risk of buffer overflows.
- **BUF-MEM_grow() Function**: A function used to grow a memory buffer.
- **Calling Conventions**: Rules that dictate how functions receive parameters and return values.
- **checkForAnotherInstance() Function**: A function that checks for the existence of another instance of a program.
- **cleanup() Function**: A function used to clean up resources.
- **cleanup_exit() Function**: A function that cleans up resources and exits the program.
- **close() Function**: A function that closes a file or resource.
- **CloseHandle() Function**: A Windows API function that closes an open object handle.
- **CoInitializeEx() Function**: A Windows API function that initializes the COM library.
- **collecttimeout() Function**: A function used to collect timeout information.
- **ConnectNamedPipe() Function**: A Windows API function that connects a named pipe.
- **ConvertSidToStringSid() Function**: A Windows API function that converts a security identifier (SID) to a string.
- **ConvertStringSidToSid() Function**: A Windows API function that converts a string to a security identifier (SID).
- **CoRegisterClassObject() Function**: A Windows API function that registers a class object.
- **crackaddr() Function**: A function used to crack or parse an address.
- **Create*() Functions**: Functions that create various types of objects, such as files, events, and mutexes.
- **CreateEvent() Function**: A Windows API function that creates or opens a named or unnamed event object.
- **CreateFile() Function**: A Windows API function that creates or opens a file or I/O device.
- **CreateHardLink() Function**: A Windows API function that creates a hard link.
- **CreateMutex() Function**: A Windows API function that creates or opens a named or unnamed mutex object.