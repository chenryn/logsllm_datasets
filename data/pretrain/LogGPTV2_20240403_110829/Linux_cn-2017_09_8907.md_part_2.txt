此外，理论并不会多无聊。 正如你在介绍中所看到的，你可以借助非常多的资料深入学习。
书籍是吸收理论知识的最佳途径之一。 它们可以让你停下来想一会儿。 当然，看书是一件非常平静的事情，可能不符合你的学习风格。 不过，请尝试阅读下列书籍，看看它是否适合你：
*    机器学习教程    Machine Learning textbook ， Tom Mitchell 著，书可能比较旧，但是却很经典。这本书很好的解释介绍了机器学习中最重要的课题，步骤详尽，逐层深入。
*  机器学习: 使数据有意义的算法艺术和科学   Machine Learning: The Art and Science of Algorithms that Make Sense of Data （你可以在[这里](http://www.cs.bris.ac.uk/%7Eflach/mlbook/materials/mlbook-beamer.pdf)看到这本书的幻灯片版本）：这本书对初学者来说非常棒。 里面讨论了许多实践中的应用程序，其中有一些是在 Tom Mitchell 的书中缺少的。
*    机器学习之向往    Machine Learning Yearning  ：这本书由 吴恩达   Andrew Ng 编写的，仍未完本，但对于那些正在学习 ML 的学生来说，这一定是很好的参考资料。
*    算法与数据结构    Algorithms and Data Structures  由 Jurg Nievergelt 和 Klaus Hinrichs 著。
* 也可以参阅 Matthew North 的   面向大众的数据挖掘    Data Mining for the Masses 。 你会发现这本书引导你完成一些最困难的主题。
*    机器学习介绍    Introduction to Machine Learning  由 Alex Smola 和 S.V.N. Vishwanathan 著。
![](/data/attachment/album/201709/28/063500ndzhhqliqjdhhydq.png)
*花些时间看书并研究其中涵盖的资料*
视频和慕课对于喜欢边听边看来学习的人来说非常棒。 慕课和视频非常的多，多到可能你都很难找到适合你的。 下面列出了最知名的几个：
* [这个著名的机器学习慕课](https://www.coursera.org/learn/machine-learning)，是 吴恩达   Andrew Ng 讲的，介绍了机器学习及其理论。 别担心，这个慕课讲的非常好，一步一步深入，所以对初学者来说非常适用。
* [麻省理工学院 Open Courseware 的 6034 课程的节目清单](https://youtu.be/TjZBTDzGeGg?list=PLnvKubj2-I2LhIibS8TOGC42xsD3-liux)，已经有点前沿了。 在你开始本系列之前，你需要做一些 ML 理论方面的准备工作，但是你不会后悔的。
在这一点上，重要的是要将各种独立的技术融会贯通，形成整体的结构图。 首先了解关键的概念： 监督学习   supervised learning 和 无监督学习   unsupervised learning 的区别、分类和回归等。 手动（书面）练习可以派上用场，能帮你了解算法是如何工作的以及如何应用这些算法。 在大学课程里你经常会找到一些书面练习，可以看看波特兰州立大学的 [ML 课程](http://web.cecs.pdx.edu/%7Emm/MachineLearningSpring2017/)。
### 3、 开始动手
通过看书和看视频了解理论和算法都非常好，但是需要超越这一阶段，就要开始做一些练习。你要学着去实现这些算法，应用学到的理论。
首先，有很多介绍 Python 和 R 方面的机器学习的基础知识。当然最好的方法就是使用交互式教程：
* [Python 机器学习：Scikit-Learn 教程](https://www.datacamp.com/community/tutorials/machine-learning-python)，在这篇教程里面，你可以学到使用 Scikit-Learn 构建模型的 KMeans 和支持向量机（SVM）相关的知名算法。
* [给初学者的 R 语言机器学习教程](https://www.datacamp.com/community/tutorials/machine-learning-in-r) 用 R 中的类和 caret 包介绍机器学习。
* [Keras 教程：Python 深度学习[25](https://www.datacamp.com/community/tutorials/deep-learning-python) 涵盖了如何一步一步的为分类和回归任务构建多层感知器（MLP）。
还请查看以下静态的（非互动的）教程，这些需要你在 IDE 中操作：
* [循序渐进：Python 机器学习](http://machinelearningmastery.com/machine-learning-in-python-step-by-step/)： 一步一步地学习 Scikit-Learn。
* [循序渐进：使用 Keras 开发你的第一个神经网络](http://machinelearningmastery.com/tutorial-first-neural-network-python-keras/)： 按这个教程一步一步地使用 Keras 开发你的第一个神经网络。
* 你可以考虑看更多的教程，但是[机器学习精要](http://www.machinelearningmastery.com/)这篇教程是非常好的。
除了教程之外，还有一些课程。参加课程可以帮助你系统性地应用学到的概念。 经验丰富的导师很有帮助。 以下是 Python 和机器学习的一些互动课程：
* [用 scikit-learn 做监督学习](https://www.datacamp.com/courses/supervised-learning-with-scikit-learn)： 学习如何构建预测模型，调整参数，并预测在未知数据上执行的效果。你将使用 Scikit-Learn 操作真实世界的数据集。
* [用 Python 做无监督学习](https://www.datacamp.com/courses/unsupervised-learning-in-python)： 展示给你如何从未标记的数据集进行聚类、转换、可视化和提取关键信息。 在课程结束时，还会构建一个推荐系统。
* [Python 深度学习](https://www.datacamp.com/courses/deep-learning-in-python)： 你将获得如何使用 Keras 2.0 进行深度学习的实践知识，Keras 2.0 是前沿的 Python 深度学习库 Keras 的最新版本。
* [在 Python 中应用机器学习](https://www.coursera.org/learn/python-machine-learning)： 将学习者引入到机器学习实践中，更多地关注技术和方法，而不是这些方法背后的统计学知识。
![](/data/attachment/album/201709/28/063500mavaas7v6oh5meem.png)
*理论学习之后，花点时间来应用你所学到的知识。*
对于那些正在学习 R 语言机器学习的人，还有这些互动课程：
* [机器学习介绍](https://www.datacamp.com/courses/introduction-to-machine-learning-with-r) 可以让你宏观了解机器学习学科最常见的技术和应用，还可以更多地了解不同机器学习模型的评估和训练。这门课程剩下的部分重点介绍三个最基本的机器学习任务： 分类、回归和聚类。
* [R 语言无监督学习](https://www.datacamp.com/courses/unsupervised-learning-in-r) ，用 R 语言从 ML 角度提供聚类和降维的基本介绍。 可以让你尽快获得数据的关键信息。
* [实操机器学习](https://www.coursera.org/learn/practical-machine-learning)涵盖了构建和应用预测功能的基本组成部分，其重点是实际应用。
最后，还有很多书籍以偏向实践的方式介绍了 ML 主题。 如果你想借助书籍内容和 IDE 来学习，请查看这些书籍：
*    Python 机器学习    Python Machine Learning Book ，Sebastian Raschka 著。
*    人工神经网络与深度学习导论：Python 应用实用指南    Introduction to Artificial Neural Networks and Deep Learning: A Practical Guide with Applications in Python ，Sebastian Raschka 著。
*    R 语言机器学习    Machine Learning with R ，Brett Lantz 著。
### 4、 练习
实践比使用 Python 进行练习和修改材料更重要。 这一步对我来说可能是最难的。 在做了一些练习后看看其他人是如何实现 ML 算法的。 然后，开始你自己的项目，阐述你对 ML 算法和理论的理解。
最直接的方法之一就是将练习的规模做得更大些。 要做一个更大的练习，就需要你做更多的数据清理和功能工程。
* 从 [Kaggle](http://www.kaggle.com/) 开始。 如果你需要额外的帮助来征服所谓的“数据恐惧”，请查看 [Kaggle 的 Python 机器学习教程](https://www.datacamp.com/community/open-courses/kaggle-python-tutorial-on-machine-learning) 和 [Kaggle 的 R 语言机器学习教程](https://www.datacamp.com/community/open-courses/kaggle-tutorial-on-machine-learing-the-sinking-of-the-titanic)。 这些将带给您快速的提升。
* 此后，你也可以自己开始挑战。 查看这些网站，您可以在其中找到大量的 ML 数据集：[UCI 机器学习仓库](http://archive.ics.uci.edu/ml/)，[用于机器学习的公开数据集](http://homepages.inf.ed.ac.uk/rbf/IAPR/researchers/MLPAGES/mldat.htm) 和 [data.world](https://data.world/)。
![](/data/attachment/album/201709/28/063500mxqm26bjx3tszzf6.png)
*熟能生巧。*
### 5、 项目
虽然做一些小的练习也不错，但是在最后，您需要做一个项目，可以在其中展示您对使用到的 ML 算法的理解。
最好的练习是实现你自己的 ML 算法。 您可以在以下页面中阅读更多关于为什么您应该做这样的练习，以及您可以从中学到什么内容：
* [为什么有许多先进的 API，比如 tensorflow，还需要自己手动实现机器学习的算法？](https://www.quora.com/Why-is-there-a-need-to-manually-implement-machine-learning-algorithms-when-there-are-many-advanced-APIs-like-tensorflow-available)
* [为什么要从头开始实现机器学习算法？](http://www.kdnuggets.com/2016/05/implement-machine-learning-algorithms-scratch.html)
* [使用 Python 从头开始实现一个分类器，我能从中学到什么？](http://www.jeannicholashould.com/what-i-learned-implementing-a-classifier-from-scratch.html)
接下来，您可以查看以下文章和仓库。 可以从中获得一些灵感，并且了解他们是如何实现 ML 算法的。
* [如何实现机器学习算法](http://machinelearningmastery.com/how-to-implement-a-machine-learning-algorithm/)
* [从头开始学习机器学习](https://github.com/eriklindernoren/ML-From-Scratch)
* [从头开始学习机器学习算法](https://github.com/madhug-nadig/Machine-Learning-Algorithms-from-Scratch)
![](/data/attachment/album/201709/28/063500zsezkq0qw7hgxpl5.png)