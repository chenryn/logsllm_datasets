作者：启明星辰ADLab
#### 1\. 漏洞描述
2017年6月，微软发布的补丁修复了多个远程执行漏洞，其中包括 CVE-2017-8543 Windows Search
搜索漏洞（CNVD-2017-09381，CNNVD-201706-556），该漏洞几乎影响所有的 Windows 操作系统。对于 Windows XP 和
Windows Server 2003 等停止更新的系统，微软也发布了对应的补丁，用户可以手动下载补丁进行安装。
Windows 搜索服务（Windows Search Service，WSS）是 Windows
的一项默认启用的基本服务，用于建立和维护文件系统索引。由于 WSS 在解析搜索请求时，存在内存越界漏洞，可能导致远程代码执行。
#### 2\. 协议分析
当客户端对远程主机发起搜索请求后，它们之间使用 Windows 搜索协议（Windows Search
Protocol，WSP）进行数据交互。交互的消息序列如下所示。其中，CPMConnectIn 消息中包括服务器的名称和索引名称（默认
Windows\SYSTEMINDEX）。服务器验证客户端的权限后建立会话，回复 CPMConnectOut 消息； CPMCreateQueryIn
消息用于设置查询的文件目录范围、关键字信息等； CMPSetBindingsIn 消息用于设置返回的查询结果内容，例如文件名称、文件类型等；
CPMGetRowsIn 消息用于请求查询结果。
![](https://images.seebug.org/content/images/2017/07/CVE-2017-8543-----POC
---------ADLab633.png-w331s)
以上信息的 Header 需遵循以下格式，Header 大小为 0x10。
![](https://images.seebug.org/content/images/2017/07/CVE-2017-8543-----POC
---------ADLab669.png-w331s)
其中，`_msg` 表示消息类型，常用的消息类型如下所示。
![](https://images.seebug.org/content/images/2017/07/CVE-2017-8543-----POC
---------ADLab698.png-w331s)
与该漏洞成因相关的两个消息是 `CPMSetBindingsIn` 和 `CPMGetRowsIn`。
首先介绍 `CPMSetBindingsIn` 消息，消息的格式如下所示。
    struct CPMSetBindingsIn
    {
        int msg_0;
        int status_4;
        int ulCheckSum_8;
        int ulReserved2_c;
        int hCursor_10;
        int cbRow_14;
        int cbBindingDesc_18;
        int dummy_1c;
        int cColumns_20;
        struct Column aColumns[SIZE];
    };
前 0x10 字节是消息 `Header；hCursor` 是 `CPMCreateQueryOut` 消息返回的句柄；`cbRow` 表示 `row`
的长度，以字节为单位；`aColumns` 是 `Column` 类型结构体数组；`cColumns` 是数组的长度。在这里，每一行 (row)
代表一条查询结果，每一列 (column) 代表查询结果属性，例如文件名称、文件类型等。
`CPMSetBindingsIn` 中的 `Column` 结构体定义如下：
    struct Column
    {
        struct CFullPropSpec cCFullPropSpec;
        int   Vtype;
        char  AggregateUsed;   
        char  AggregateType;
        char  ValueUsed;    
        char  padding1;
        short ValueOffset; 
        short ValueSize;   
        char  StatusUsed;     
        char  padding2;       
        short StatusOffset;    
        char  LengthUsed;     
        char  padding3;
        short LengthOffset;    
    }
        struct CFullPropSpec
        {
            char GUID[0x10];
            int ulKind;
            int PrSpec;
         }
其中，GUID 标志所代表的属性，例如 `guidFilename=E05ACF41-5AF70648-BD8759C7-D9248EB9` 代表文件名称。
![](https://images.seebug.org/content/images/2017/07/CVE-2017-8543-----POC
---------ADLab1818.png-w331s)
Vtype 表示 column 对应的数据类型。常用数据类型如下表，在 `CPMSetBindingsIn` 消息中，Vtype 一般取值 0x0c。
ValueOffset 表示在每一行 (row)，该 column 数据存放的偏移位置，ValueSize 表示这个 column 数据所占内存大小。
当收到 `CPMSetBindings` 消息时，程序调用 `DoSetBindings` 进行数据解析。`DoSetBindings` 是
`CRequestServer` 类的成员函数。 `CRequestServer` 类中还包括其他解析函数，例如
`DoCreateQuery`、`DoGetRows` 等。数据成员 `cCProxyMessage_c0` 即为接收的数据 Buffer。
    class CRequestServer
    {
    public:
            void DoConnect(unsigned long len,unsigned long &var)();     //解析CPMConnectIn消息
            void DoCreateQuery(unsigned long len,unsigned long &var);   //解析CPMCreateQueryIn消息
            void DoSetBindings(unsigned long len,unsigned long &var);   //解析CPMSetBindingsIn消息
            void DoGetRows(unsigned long len,unsigned long &var)();      //解析CPMGetRowsIn消息
        .....
    private:
        ...
            CVIQuery *pCVIQuery_5c;
            XArray *pXArray_6c;
            CProxyMessage cCProxyMessage_c0;  
    ... 
    };
`DoSetBindings` 函数的实现如下所示。
        void DoSetBindings(unsigned long len,unsigned long &var)
        {
            CPMSetBindingsIn *pCPMSetBindingsIn = &cCProxyMessage_c0;
            pCPMSetBindingsIn->ValidateCheckSum(var_40,len);
            struct CMemDeSerStream* pCMemDeSerStream = new pCMemDeSerStream((char*)pCPMSetBindingsIn);
            class CPidMapper* pCPidMapper=new CPidMapper(0);
            CTableColumnSet * pCTableColumnSet = new CTableColumnSet(pCMemDeSerStream, pCPidMapper);
            pCVIQuery_5c->SetBindings(pCPMSetBindingsIn->hCursor_10,
                pCPMSetBindingsIn->cbRow_14,
                pCTableColumnSet,
                pCPidMapper);
        }
（1）`DoSetBindings` 函数首先初始化 `pCPMSetBindingsIn` 指针，使其指向接收的 `CPMSetBindingsIn`
数据，然后使用 `pCPMSetBindingsIn` 指针初始化 `CMemDeSerStream` 类。`CMemDeSerStream`
类用于完成各个字段的读取。
![](https://images.seebug.org/content/images/2017/07/CVE-2017-8543-----POC
---------ADLab3639.png-w331s)
（2）使用 `pCMemDeSerStream` 指针初始化 `CTableColumnSet` 类。`CTableColumnSet` 类和
`CPidMapper` 类都是 `CCountedDynArray` 类的派生类。`CCountedDynArray`
是一个数组类，数据成员包含一个指针数组 `Array_4`。`CTableColumnSet` 类构造函数首先调用 `GetULong` 获得数组长度
`cColumns` 作为循环次数，然后循环解析 `aColumns` 数组元素。在 `while` 循环中：
  * 解析 column 结构中的 `CFullPropSpec` 结构，将对象指针 `&CFullPropSpec` 添加到 `CPidMapper` 中： `pCPidMapper->array_4[CurrentIndex] = &cCFullPropSpec`
  * 解析 column 结构中的其他字段，并保存到 `CTableColumn`类，将对象指针 `pCTableColumn` 添加到 `CTableColumnSet` 中：`pCTableColumnset->array_4[RetIndex] = pCTableColumn`
        CTableColumnSet(CMemDeSerStream *pCMemDeSerStream, CPidMapper* pCPidMapper)
        {
            int _ColumnCount = pCMemDeSerStream->GetULong();
            SetExactSize(_ColumnCount);
            char GUID[16]={0};
            int count = 0;
            do{
                CFullPropSpec cCFullPropSpec(pCMemDeSerStream);     //解析CFullPropSpec
                if(0==cCFullPropSpec.IsValid())
                    goto error;
                int RetIndex = pCPidMapper->NameToPid(&cCFullPropSpec,0,0);  
                CTableColumn *pCTableColumn = new CTableColumn(RetIndex,1);  //解析CTableColumn
                Add(pCTableColumn,RetIndex);            count++;
            }while(countCurrentIndex)
                return 0;
            while(1)
            {
                CTableColumn *pCTableColumn = pCTableColumnSet->Get(index);
                result = CheckBinding(pCTableColumn, pCTableRowAlloc, cbRow);
                if ( result = pCTableColumnSet->CurrentIndex)
                    return 0;
            }
            return result;
        }
        int CheckBinding(CTableColumn *pCTableColumn,CTableRowAlloc *pCTableRowAlloc,int cbRow)
        {
            pCTableColumn->Validate(cbRow,0);
            //.......
        }
`CTableCursor::checkBinding` 调用 `CTableColumn::Validate` 进行验证，如果 `ValueSize +
ValueOffset` 大于 `cbRow`，将抛出异常，以防内存越界。
        void validate(int cbRow,bool flag)
        {
            try
            {
                if(ValueSize_06 + ValueOffset_04>cbRow)
                    throw 0x80040E08;
            }
        }
接下来介绍 `CPMGetRows` 消息，`CPMGetRowsIn` 消息格式如下：
    struct CPMGetRowsIn
    {   
        int msg_0;
        int status_4;
        int ulCheckSum_8;
        int ulReserved2_c;
        int hCursor_10;
        int cRowsToTransfer_14;
        int cbRowWidth_18;
        int cbSeek_1c;
        int cbReserved_20;
        int cbReadBuffer_24;
        int ulClientBase_28;
        int fBwdFetch_2c; 
        int eType_30;
        int chapt_3C;
        union
        {
            CRowSeekAt cCRowSeekAt;
            CRowSeekAtRatio cCRowSeekAtRatio;
            CRowSeekByBookmark cCRowSeekByBookmark;
            CRowSeekNext cCRowSeekNext;
        }
    }
`CPMGetRowsOut` 的消息格式如下：
    struct CPMGetRowsOut
    {
        int msg_0;
        int status_4;
        int ulCheckSum_8;
        int ulReserved2_c;
        int cRowsReturned_10;
        int eType_14;
        int chapt_18;
        //Rows_offset;
    }
在 `CPMGetRowsIn` 消息中，`cbRowWidth` 表示 `row` 长度，与 `CPMSetBindingsIn` 消息中的
`cbRow` 意义相同。`cbReadBuffer` 表示用于存放 `CPMGetRowsOut` 消息的 `buffer`
大小；`cbReserved` 表示 `Rows` 数据在 `CPMGetRowsOut` 消息中的偏移；`eType`
表示查询的方法，取值范围如下表所示。
![](https://images.seebug.org/content/images/2017/07/CVE-2017-8543-----POC
---------ADLab6489.png-w331s)
在 `CPMGetRowsOut` 消息中，对于每一行（row）中的列（column）， column 数据使用 `CTableVariant`
类表示。`CTableVariant` 结构定义如下。其中 `Vtype` 表示数据类型，取值范围见前文 `Vtype` 常用数据类型表所示。如果
`Vtype` 为字符串等变长数据类型，`offset` 则指向的该变长数据偏移位置。`CTableVariant` 结构存放在 `valueoffset`
指定的位置，变长数据则存放在内存末尾位置，在后面解析代码中进行说明。
![](https://images.seebug.org/content/images/2017/07/CVE-2017-8543-----POC
---------ADLab6725.png-w331s)
当接收 `CPMGetRowsIn` 数据，调用 `DoGetRows` 函数，函数实现如下所示。
        void DoGetRows(unsigned long len,unsigned long &var)
        {
            CMPGetRowsOut *pCMPGetRowsOut = cCProxyMessage_c0;
            CPMGetRowsIn *pCPMGetRowsIn = &cCProxyMessage_c0;
            pCPMGetRowsIn->ValidateCheckSum(var_40,len);
            char *pCPMGetRowsIn_eType_30 = &pCPMGetRowsIn->eType_30;
            char *pCPMGetRowsIn_eType_cbseek= (char *)&pCPMGetRowsIn->eType_30 +                            pCPMGetRowsIn->cbSeek_1c;
            struct CMemDeSerStream* pCMemDeSerStream = new pCMemDeSerStream(pCPMGetRowsIn_eType_30,
            *pCPMGetRowsIn_eType_cbseek);
            CRowSeekMethod* pCRowSeekMethod=0; 
            UnmarshallRowSeekDescription(pCMemDeSerStream,&pCRowSeekMethod,0);  
            int a2=0;
            if(pCPMGetRowsIn->cbReadBuffer_24>0x1300)                                                               pXArray_6c->init(pCPMGetRowsIn->cbReadBuffer_24);
            char * pArray = pXArray_6c->pArray_0;
            if(pArray){
                *(DWORD*)pArray = 0xcc;
                *(DWORD*)(pArray + 4) = 0;
                *(DWORD*)(pArray + 8) = 0;
                *(DWORD*)(pArray + c) = 0;
            }
            pCMPGetRowsOut = pXArray_6c->pArray_0;
            CFixedVarBufferAllocator cCFixedVarBufferAllocator(
                pCMPGetRowsOut,
                a2,
                pCPMGetRowsIn->cbReadBuffer_24,
                pCPMGetRowsIn->cbRowWidth_18,
                pCPMGetRowsIn->cbReserved_20);
            int flag =1;
            CGetRowsParams cCGetRowsParams(
                pCPMGetRowsIn->cRowsToTransfer_14,
                flag,
                pCPMGetRowsIn->cbRowWidth_18,
                &cCFixedVarBufferAllocator);
            CRowSeekMethod *pCRowSeekMethod_new;
            pCVIQuery_5c->GetRows(
                pCPMGetRowsIn->hCursor_10,
                pCRowSeekMethod,
                &cCGetRowsParams,
                &pCRowSeekMethod_new);