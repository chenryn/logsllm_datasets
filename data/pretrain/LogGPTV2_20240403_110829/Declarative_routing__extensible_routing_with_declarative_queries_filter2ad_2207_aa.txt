title:Declarative routing: extensible routing with declarative queries
author:Boon Thau Loo and
Joseph M. Hellerstein and
Ion Stoica and
Raghu Ramakrishnan
Declarative Routing:
Extensible Routing with Declarative Queries
Boon Thau Loo(cid:3) Joseph M. Hellerstein(cid:3) y
(cid:3)UC Berkeley
fboonloo, jmh, PI:EMAIL
yIntel Research
Ion Stoica(cid:3)
(cid:14)University of Wisconsin›Madison
Raghu Ramakrishnan(cid:14)
PI:EMAIL
ABSTRACT
The Internet’s core routing infrastructure, while arguably ro-
bust and e(cid:14)cient, has proven to be di(cid:14)cult to evolve to ac-
commodate the needs of new applications. Prior research on
this problem has included new hard-coded routing protocols
on the one hand, and fully extensible Active Networks on the
other. In this paper, we explore a new point in this design
space that aims to strike a better balance between the exten-
sibility and robustness of a routing infrastructure. The basic
idea of our solution, which we call declarative routing, is to
express routing protocols using a database query language.
We show that our query language is a natural (cid:12)t for routing,
and can express a variety of well-known routing protocols in
a compact and clean fashion. We discuss the security of our
proposal in terms of its computational expressive power and
language design. Via simulation, and deployment on Plan-
etLab, we demonstrate that our system imposes no funda-
mental limits relative to traditional protocols, is amenable to
query optimizations, and can sustain long-lived routes under
network churn and congestion.
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network
Architecture and Design
General Terms
Design, Languages, Security
Keywords
Extensible routing, Declarative queries, Routing languages
INTRODUCTION
1.
Designing routing protocols is a di(cid:14)cult process. This is
not only because of the distributed nature and scale of the
networks, but also because of the need to balance the exten-
sibility and (cid:13)exibility of these protocols on one hand, and
their robustness and e(cid:14)ciency on the other hand. One need
look no further than the Internet for an illustration of these
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for pro(cid:2)t or commercial advantage and that copies
bear this notice and the full citation on the (cid:2)rst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speci(cid:2)c
permission and/or a fee.
SIGCOMM’05, August 22–26, 2005, Philadelphia, Pennsylvania, USA.
Copyright 2005 ACM 1›59593›009›4/05/0008 ...$5.00.
hard tradeo(cid:11)s. Today’s Internet routing protocols, while ar-
guably robust and e(cid:14)cient, are hard to change to accom-
modate the needs of new applications such as improved re-
silience and higher throughput. Upgrading even a single
router is hard [16]. Getting a distributed routing protocol
implemented correctly is even harder. And in order to change
or upgrade a deployed routing protocol today, one must get
access to each router to modify its software. This process is
made even more tedious and error prone by the use of con-
ventional programming languages.
Several solutions have been proposed to address the lack
of (cid:13)exibility and extensibility in Internet routing. Overlay
networks allow third parties to replace Internet routing with
new, \from-scratch" implementations of routing functionality
that run at the application layer. However, overlay networks
simply move the problem from the network to the applica-
tion layer where third parties have control: implementing or
updating an overlay routing protocol still requires a complete
protocol design and implementation, and requires access to
the overlay nodes. A radically di(cid:11)erent approach, Active Net-
works [14], allows one to deploy new routing functionality
without the need to have direct access to routers. However,
due to the general programming models proposed for Active
Networks, they present di(cid:14)culties in both router performance
and the security and reliability of the resulting infrastructure.
In this paper, we explore a new point in this design space
that aims to strike a better balance between the extensibility
and the robustness of a routing infrastructure. Our solution,
which we call declarative routing, can be viewed as an appli-
cation of database techniques to the domain of networking.
It is based on the observation that recursive query languages
studied in the deductive database literature [5, 23] are a nat-
ural (cid:12)t for expressing routing protocols. Deductive database
query languages focus on identifying recursive relationships
among nodes of a graph, and are well suited for expressing
paths among nodes in a network.
With declarative routing, a routing protocol is implemented
by writing a simple query in a declarative query language like
Datalog, which is then executed in a distributed fashion at
some or all of the nodes. Declarative routing can be viewed as
a restrictive instantiation of Active Networks for the control
plane, which aims to balance the concerns of expressiveness,
performance and security, properties which are needed for an
extensible routing infrastructure to succeed. Next, we discuss
how declarative routing satis(cid:12)es these properties:
Expressiveness: As we will show in Section 3, Datalog
queries can express a variety of well-known routing proto-
cols (e:g:; distance vector, path vector, dynamic source rout-
ing, link state, multicast) in a compact and clean fashion,
typically in a handful of lines of program code. Moreover,
higher-level routing concepts (e:g:; QoS constraints) can be
achieved via simple modi(cid:12)cations to these queries. Finally,
writing the queries in Datalog illustrates surprising relation-
ships between protocols. In particular, we show that distance
289vector and dynamic source routing di(cid:11)er only in a simple,
traditional query optimization decision: the order in which a
query’s predicates are evaluated.
E(cid:14)ciency: By leveraging well-studied query optimization
techniques (in Section 7), we show (in Section 9) via simula-
tion and implementation that there is no inherent overhead
in expressing standard protocols via a declarative query lan-
guage. In addition, query optimization techniques can lead to
e(cid:14)cient execution, and facilitate work-sharing among queries.
Security: As shown in Section 6, Datalog has several desir-
able security properties. In particular, Datalog is a side-e(cid:11)ect
free language, and Datalog queries can be easily \sandboxed".
Furthermore, the complexity of basic Datalog queries is poly-
nomial in the size of the input [5]. While adding functions to
Datalog alters its theoretical worst-case complexity, powerful
tests for termination on given inputs are available [18].
Declarative routing could evolve to be used in a variety of
ways. One extreme view of the future of routing is that indi-
vidual end-users (or their applications) will explicitly request
routes with particular properties, by submitting route con-
struction queries to the network. The safety and simplicity
of declarative queries would clearly be bene(cid:12)cial in that con-
text. A more incremental view is that an administrator at an
ISP might recon(cid:12)gure the ISP’s routers by issuing a query to
the network; di(cid:11)erent queries would allow the administrator
to easily implement various routing policies between di(cid:11)er-
ent nodes or di(cid:11)erent tra(cid:14)c classes. Even in this managed
scenario, the simplicity and safety of declarative routing has
bene(cid:12)ts over the current relatively fragile approaches to up-
grading routers. While this second scenario is arguably the
more realistic one, in this paper, we consider the other ex-
treme in which any node (including end-hosts) can issue a
query. We take this extreme position in order to explore the
limits of our design.
To demonstrate the feasibility of our idea, we have imple-
mented a prototype on top of PIER [2], a distributed rela-
tional query processor. Through a combination of simulations
on transit-stub network topologies and experiments on the
PlanetLab [21] testbed, we evaluate the scalability and e(cid:14)-
ciency of our system, as well as its ability to sustain long-lived
routes under network churn and congestion.
We do not propose that this work in its current form can
serve as a \drop-in" replacement for existing network infras-
tructures, which have evolved and coagulated over many years
under various constraints. However, if progress is to be made
in deploying new, more (cid:13)exible infrastructures for network
routing, we believe that a cleaner foundation is needed. Our
work can be viewed as a step in that direction, based on ap-
plying well-studied techniques from the deductive database
literature to the network domain.
2. SYSTEM MODEL
We model the routing infrastructure as a directed graph,
where each link is associated with a set of parameters (e:g:; loss
rate, available bandwidth, delay). The nodes in the routing
infrastructure can either be IP routers or overlay nodes.
In a centralized design such as the Routing Control Plat-
form [15], network information is periodically gathered from
the routing infrastructure, and stored at one or more central
servers. Each query is sent to one or more of these servers,
which process the queries using their internal databases and
set up the forwarding state at the routers in the network.
In this paper, we focus on a fully distributed implemen-
tation to explore the limits of our design. Like traditional
routers, the infrastructure nodes in our model maintain links
to their neighbors, compute routes, and set up the forwarding
state to forward data packets. However, instead of running a
traditional routing protocol, each infrastructure node runs a
general-purpose query processor.
Figure 1 shows the basic components of an infrastructure
Queries(cid:13)
Query Processor(cid:13)
Base(cid:13)
Tuples(cid:13)
Derived(cid:13)
Tuples(cid:13)
Result(cid:13)
Tuples(cid:13)
Neighbor(cid:13)
Table Updates(cid:13) Query Results(cid:13)
Neighbor Table(cid:13)
Forwarding Table(cid:13)
Routing Infrastructure Node(cid:13)
Routing(cid:13)
Infrastructure(cid:13)
Figure 1: Basic Components of Routing Infrastructure
Node and Co-located Query Processor.
node (router) and its co-located query processor. Each router
maintains a typical set of local information including the links
to its neighbors (neighbor table) and the forwarding informa-
tion to route packets (forwarding table). The neighbor table
is periodically updated in response to link failures, new links,
or link metric changes. These updates are performed outside
the query processor using standard mechanisms such as peri-
odic pings. The query processor can read the neighbor table
(either periodically or upon being noti(cid:12)ed of updates), and
install entries into the forwarding table.
In our discussion,
this simple interface is the only interaction required between
the query processor and the router’s core forwarding logic.
Both routing protocols and route requests can be expressed
as declarative queries, and issued either by the routers them-
selves or by third-parties or end-hosts. Upon receiving the
query request, each query processor initiates a distributed ex-
ecution of the query in the network. The results of the query
are used to establish router forwarding state (the forwarding
table in Figure 1), which the routers use for forwarding data
packets. Alternatively, the query results can be sent back to
the party that issued the query, which can use these results
to perform source routing.
During query execution, intermediate data generated by a
query processor is stored locally, and can be sent to neighbor-
ing query processors for further processing. To keep with the
database terminology, we refer to the local information that
the node reads as base tuples, and the generated intermediate
data as derived tuples. Tuples are organized in tables. The
base tuple we use frequently in our examples is the link tuple:
link(source, destination, . . . ). A link tuple corresponds
to a copy of an entry in the neighbor table, and represents
an edge from the node itself (source) to one of its neighbors
(destination). The other (cid:12)elds, \: : :", represent link metrics
(delay, loss rate and bandwidth). Each tuple is stored at the
address indicated by the underlined address (cid:12)eld. Thus, in
the case of a link tuple, source represents the address of the
node storing the neighbor table. Each link tuple is uniquely
identi(cid:12)ed by its source and destination pair (the unique key).
An example of a derived tuple is the path tuple:
path(source, destination, pathVector, cost). A path
tuple indicates that destination is reachable from source along
the path in pathVector, where cost is the aggregate sum of
all link costs along the path. Each path tuple is uniquely
identi(cid:12)ed by its pathVector.
In addition, some of the derived tuples generated by the
query processor also form part of the query answer as result
tuples as speci(cid:12)ed by the query. In Sections 3 and 5 we will
see examples of result tuples path, nextHop and bestP ath.
Each query is accompanied by a speci(cid:12)cation of the lifetime
(duration) of the protocol/route. During the lifetime of a
query, neighbor table updates are made available to the query
processor, and these updates trigger the recomputation of
some of the existing derived and result tuples. In the next
section, we step through a concrete example of how a query
can be speci(cid:12)ed and executed within this execution model.
3. THE BASICS
We will start with a query that expresses the transitive clo-
sure of the link table, which can be used to compute network
reachability. We will show how this query can be expressed
in Datalog, describe the generation of a query plan for this
query, and (cid:12)nally show the execution of the query plan on
a distributed query engine. We illustrate the connection be-
tween recursive queries and routing protocols by showing that
the execution of this query resembles the well-known path
vector and distance vector routing protocols.
3.1 Datalog Program Syntax
Datalog is similar to Prolog [13], but hews closer to the
spirit of declarative queries, exposing no imperative control.
A Datalog program consist of a set of declarative rules. Since
these programs are commonly called \recursive queries" in
the database literature, we will use the term \query" when
we refer to a Datalog program. A Datalog rule has the form
 :- , where the body is a list of predicates over
constants and variables, and the head de(cid:12)nes a set of tuples
derived by variable assignments satisfying the body’s predi-
cates. The rules can refer to each other in a cyclic fashion
to express recursion. The order in which the rules are pre-
sented is immaterial. The commas separating the predicates
in a rule are logical conjuncts (AND), and the order in which
predicates appear has no semantic signi(cid:12)cance.
The query does not impose any restriction on either source
or destination as both S and D are unbound variables. Hence,
the query computes the full transitive closure consisting of the
paths between all pairs of reachable nodes. If the query is only
interested in the paths from a given node b to every other node
in the network, the query would be path(b; D; P; C), with the
source (cid:12)eld bound to constant b.
We now focus on the remaining portions of rules NR1 and
NR2. The expression P = f concatP ath(L; P1) is a predicate
function that is satis(cid:12)ed if P is assigned to the path vector
produced from prepending link L to the existing path vector
P1. With these additions, rules NR1 and NR2 also compute
the total path costs, and the path vectors.
The above query will not terminate due to the generation of
path tuples with cycles. To prevent computing paths with cy-
cles, we can add an extra predicate f inP ath(P2; S) = f alse
to rule NR2, where the function f inP ath(P; S) returns true
if node S is in the path vector P.
3.3 Query Plan Generation
To execute a query, we (cid:12)rst need to generate a query plan.
A query plan is a data(cid:13)ow diagram consisting of relational
operators that are connected by arrows indicating the (cid:13)ow of
tuples during the query execution. Figure 2 shows a query
plan for the Datalog query discussed in the previous section.
The query plan is formulated based on Datalog’s semi-na(cid:127)(cid:16)ve
(cid:12)xpoint evaluation [8] mechanism which ensures that each
rule does not redundantly generate the same tuple twice.
Rule NR1 is implemented by simply renaming existing link
tuples to path tuples. This is shown by the rightward arrow at
the bottom of the (cid:12)gure from link(S; D; C) to path(S; D; P; C).
Following Prolog-like conventions [23], names for tuples,
predicates, function symbols and constants begin with a lower-
case letter, while variable names begin with an upper-case
letter. Most implementations of Datalog enhance it with a
limited set of function calls (which start with \f " in our
syntax), including boolean predicates, arithmetic computa-
tions and simple list manipulation (e:g:; the f concatP ath
function in our (cid:12)rst example). Presented with a program, a
Datalog system will (cid:12)nd all possible assignments of tuples to
unbound variables that satisfy the rules in the query.
3.2 First Datalog Example
Our (cid:12)rst example, the Network-Reachability query, takes as
input link tuples, and computes the set of all paths encoded
in path tuples. In all our examples, S, D, C and P abbreviate
the source, destination, cost and pathVector (cid:12)elds respectively
for both the link and path tuples. As before, the address