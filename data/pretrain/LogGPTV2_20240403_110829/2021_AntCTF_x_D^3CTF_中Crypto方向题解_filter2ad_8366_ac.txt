                    userpubkey = [int(i) for i in userpubkey[1:-1].split(', ')]
                except:
                    self._send('publickey format error')
                    self.passwd.pop(userid)
                    return 0
                self.pubkey[userid] = elgamal(userpubkey)
                self._send('sign up success')
                return 1
        def signin(self):
            self._send('please give me your name')
            userid = self._recv()
            if userid not in self.passwd:
                self._send('sorry the userid is not existed')
                return 0
            while 1:
                random.seed(urandom(8))
                r = random.getrandbits(8 * 11)
                self._send('please give me your passwd(encrypted and xored by r)')
                self._send(str(r))
                userdata = self.dec_recv()
                if bytes_to_long(userdata) == r ^ bytes_to_long(self.passwd[userid]):
                    self._send('signin success')
                    break
                else:
                    self._send('password error')
            endkey = urandom(5)
            key = userdata + endkey
            self._send('now let\'s communicate with this key')
            self.enc_send(endkey , userid)
            return userid , key
        def handle(self):
            signal.alarm(240)
            key = b''
            userid = ''
            while 1:
                self._send(MENU)
                choice = self._recv()
                if choice == b'1':
                    self.signup()
                elif choice == b'2':
                    temp = self.signin()
                    if temp != 0:
                        userid , key = temp
                        break
                else:
                    self._send('error')
            msg = self.dec_recv(enc_key = key)
            if msg == b'I am a ctfer.Please give me flag':
                self.enc_send(b'ok, your flag is here ' + ctfer_flag , userid , enc_key= key)
            elif msg == b'I am Alice, Please give me true flag' and userid == b'Alice':
                self.enc_send(b'Hi Alice, your flag is ' + Alice_flag , userid , enc_key= key)
            return 0
        def finish(self):
            self.request.close()
    class ForkedServer(socketserver.ForkingMixIn, socketserver.TCPServer):
        pass
    if __name__ == "__main__":
        HOST, PORT = '0.0.0.0', 10001
        server = ForkedServer((HOST, PORT), server)
        server.allow_reuse_address = True
        server.serve_forever()
`Alice`端的代码如下
    import socket
    from elgamal import elgamal
    from pubkey import server_pubkey
    from prikey import Alice_prikey , AlicePasswd
    from Crypto.Util.number import long_to_bytes , bytes_to_long
    from Crypto.Cipher import AES
    import socketserver , signal
    def pad(m):
        m += bytes([16 - len(m) % 16] * (16 - len(m) % 16))
        return m
    def unpad(m):
        return m[:-m[-1]]
    class Alice:
        def __init__(self , ip , port):
            self.pridec = elgamal(Alice_prikey)
            self.pubenc = elgamal(server_pubkey)
            self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.s.connect((ip, port))
        def _recv(self):
            data = self.s.recv(1024)
            return data.strip()
        def _send(self, msg):
            if isinstance(msg , str):
                msg = msg.encode()
            self.s.send(msg)
        def enc_send(self, msg , enc_key = b''):
            if enc_key == b'':
                y1 , y2 = self.pubenc.encrypt(bytes_to_long(msg))
                self._send(str(y1) + ', ' + str(y2))
            else:
                assert len(enc_key) == 16
                aes = AES.new(enc_key , AES.MODE_ECB)
                self._send(aes.encrypt(pad(msg)))
        def dec_recv(self,  enc_key = b''):
            msg = self._recv()
            if enc_key == b'':
                c = [int(i) for i in msg.split(b', ')]
                m = self.pridec.decrypt(c)
                return long_to_bytes(m)
            else:
                assert len(enc_key) == 16
                aes = AES.new(enc_key , AES.MODE_ECB)
                return unpad(aes.decrypt(msg))
        def main(self):
            firstmsg = self._recv()
            if firstmsg != b'1. signup  2.signin':
                return 0
            self._send('2')
            self._recv()
            self._send('Alice')
            self._recv()
            r = int(self._recv())
            userdata = long_to_bytes(bytes_to_long(AlicePasswd) ^ r)
            self.enc_send(userdata)
            self._recv()
            self._recv()
            endkey = self.dec_recv()
            key = userdata + endkey
            self.enc_send(b'I am a ctfer.Please give me flag' , enc_key = key)
            return self.dec_recv(enc_key = key)
    class Task(socketserver.BaseRequestHandler):
        def _recv(self):
            data = self.request.recv(1024)
            return data.strip()
        def _send(self, msg, newline=True):
            if isinstance(msg , bytes):
                msg += b'\n'
            else:
                msg += '\n'
                msg = msg.encode()
            self.request.sendall(msg)
        def handle(self):
            signal.alarm(60)
            self._send('Hello, I am Alice, can you tell me the address of the server?\nIn return, I will give you the ctf_flag')
            try:
                addr = self._recv()
                ip, port = [x.strip() for x in addr.split(b':')]
                port = int(port)
            except:
                ip, port = '0.0.0.0', 10001
            a = Alice(ip , port)
            msg = a.main()
            self._send(b'Thanks, here is your flag')
            self._send(msg)
    class ForkedServer(socketserver.ForkingMixIn, socketserver.TCPServer):
        pass
    if __name__ == "__main__":
        HOST, PORT = '0.0.0.0', 10003
        server = ForkedServer((HOST, PORT), Task)
        server.allow_reuse_address = True
        server.serve_forever()
`server`和`Alice`的密钥生成和使用都和`elgamal算法`一致，这里不再阐述
服务端的大概逻辑如下
    U: User
    S: Server
    UserPasswd = UserPublicKey
    Sign Up:
    S -> U : 'please give me your name'
    U -> S : userid
    S : assert len(userid)  U : 'please give me your passwd(encrypted)'
    U -> S : c = elgamal.enc(UserPasswd,ServerPublicKey)
    S : userpasswd = elgamal.dec(c,ServerPrivateKey
    S : assert len(userpasswd)  U : 'sign up success'
    Sign In:
    S -> U : 'please give me your name'
    U -> S : userid
    S : assert userid in passwd
    S -> U : 'please give me your passwd(encrypted and xored by r)'
    S -> U : r = random.getrandbits(8 * 11)
    U -> S : c = elgamal.enc(UserPasswd ^ r,ServerPublicKey)
    S : assert elgamal.dec(c,ServerPrivateKey) == passwd[userid] ^ r
    S : key = userdata + endkey, userdata = passwd[userid] ^ r, endkey = urandom(5)
    S -> U : 'now let\'s communicate with this key'
    S -> U : k = elgamal.enc(key,UserPasswd)
    U -> S : m = AES.enc(key,msg)
    S : dm = AES.dec(key,m)
    S : if dm == 'I am a ctfer.Please give me flag':
        S -> U : r1 = AES.enc(key,ctfer_flag)
    S : if dm == 'I am Alice, Please give me true flag' and userid == 'Alice'
        S -> U : r2 = AES.enc(key,Alice_flag)
大概理解下来就是一个利用`elgamal`进行密钥交换然后加密通信的逻辑
由于这里我们需要以`Alice`的身份登陆并使用交换的`AES通信密钥`进行密文的加密，所以我们需要知道`AlicePasswd`和`key`
这道题目中由于也有`Alice`端的服务，所以我们可以伪装成服务端来和`Alice`端进行通信，也就是进行`中间人攻击`
首先来看看如何获得`AlicePasswd`，观察`Alice`端的如下代码
     def main(self):
        firstmsg = self._recv()
        if firstmsg != b'1. signup  2.signin':
            return 0
        self._send('2')
        self._recv()
        self._send('Alice')
        self._recv()
        r = int(self._recv())
        userdata = long_to_bytes(bytes_to_long(AlicePasswd) ^ r)
        self.enc_send(userdata)
        self._recv()
        self._recv()
        endkey = self.dec_recv()
        key = userdata + endkey
        self.enc_send(b'I am a ctfer.Please give me flag' , enc_key = key)
        return self.dec_recv(enc_key = key)
    def dec_recv(self,  enc_key = b''):
        msg = self._recv()
        if enc_key == b'':
            c = [int(i) for i in msg.split(b', ')]
            m = self.pridec.decrypt(c)
            return long_to_bytes(m)
        else:
            assert len(enc_key) == 16
            aes = AES.new(enc_key , AES.MODE_ECB)
            return unpad(aes.decrypt(msg))
由于`endkey`长度为`5`，而`key`的长度是`16`，那么可以自然推断出`userdata`的长度为`11`
但是如果我们控制`r`使得`userdata`的第一个字节异或为了`\x00`，那么`userdata`的长度就变成了`10`，如果`endkey`的长度不变，再使用`userdata
+ endkey`作为`AES`的`key`，那么会通不过`assert len(enc_key) == 16`，即连接会断开
这样我们可以通过单字节爆破`AlicePasswd`的值使得`key`的长度从`16`变成`15`，这样就能获得`AlicePasswd`的第一个字节，然后重复该过程便可以获得`AlicePasswd`（每爆破出一个字节，在爆破下一个字节的时候将`endkey`的长度变长一位即可连续爆破）
PS：实际上的操作过程中`AlicePasswd`的最后一个字节爆破不出来，我们使用服务端的`Sign In`功能来爆破最后一个字节即可
在拿到了`AlicePasswd`之后，我们便可以伪造成`Alice`登陆服务端，但是由于`endkey`是使用`AlicePublicKey`来进行加密的，所以我们还需要拿到`endkey`的值才能获得`AES`的`key`并进行`任意文本加解密`
前面我们提过，`endkey`长度为`5`，但是实际上`elgamal`的`p`是`512`比特的，也就是说`endkey`远比`p`小
如果我们将`elgamal`加密后的`endkey`的`y2`乘以一个倍数`k`，那么`elgamal`解密后的`endkey`就会变大`k`倍，这个值如果特别大，则`userdata
+ endkey`就也会变大，这样便会通不过`assert len(enc_key) == 16`，即连接会断开
那么我们就可以通过遍历`k`并查看连接是否断开来得到`endkey`的大致范围，然后通过控制`r`让`userdata`的长度变小来使得我们的`k`可以不断变大，进而将`endkey`的取值范围不断缩小来得到`endkey`
最后我们便可以进行`任意文本加解密`来获取`flag`