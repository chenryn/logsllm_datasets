[2] Krste Asanović, Rimas Avizienis, Jonathan Bachrach, Scott Beamer, David Bian-
colin, Christopher Celio, Henry Cook, Daniel Dabbelt, John Hauser, Adam Izraele-
vitz, Sagar Karandikar, Ben Keller, Donggyu Kim, John Koenig, Yunsup Lee, Eric
Love, Martin Maas, Albert Magyar, Howard Mao, Miquel Moreto, Albert Ou,
David A. Patterson, Brian Richards, Colin Schmidt, Stephen Twigg, Huy Vo,
and Andrew Waterman. 2016. The Rocket Chip Generator. Technical Report
UCB/EECS-2016-17. EECS Department, University of California, Berkeley.
[3] Pierre Bayon, Lilian Bossuet, Alain Aubert, Viktor Fischer, François Poucheret,
Bruno Robisson, and Philippe Maurine. 2012. Contactless Electromagnetic Active
Attack on Ring Oscillator Based True Random Number Generator. In Constructive
Side-Channel Analysis and Secure Design. Vol. 7275. Springer Berlin Heidelberg,
Berlin, Heidelberg, 151–166. https://doi.org/10.1007/978-3-642-29912-4_12
[4] Eduardo Boemo and Sergio López-Buedo. 1997. Thermal monitoring on FPGAs
using ring-oscillators. In Field-Programmable Logic and Applications (Lecture
Notes in Computer Science). Springer, Berlin, Heidelberg, 69–78. https://doi.org/
10.1007/3-540-63465-7_212
[5] BusyBox. 2019. BusyBox: The Swiss Army Knife of Embedded Linux. https:
//busybox.net/about.html.
[6] Christian Cachin. 1997. Entropy measures and unconditional security in cryptog-
raphy. Ph.D. Dissertation. ETH Zurich.
[7] Y. Cao, V. Rožić, B. Yang, J. Balasch, and I. Verbauwhede. 2016. Exploring active
manipulation attacks on the TERO random number generator. In International
Midwest Symposium on Circuits and Systems (MWSCAS). 1–4.
[8] T.J. Chaney and C.E. Molnar. 1973. Anomalous Behavior of Synchronizer and
Arbiter Circuits. IEEE Trans. Comput. C-22 (Apr 1973), 421–422. https://doi.org/
10.1109/T-C.1973.223730
[9] A. Cherkaoui, V. Fischer, A. Aubert, and L. Fesquet. 2013. A Self-Timed Ring
Based True Random Number Generator. In IEEE 19th International Symposium
on Asynchronous Circuits and Systems. 99–106. https://doi.org/10.1109/ASYNC.
2013.15
[10] Shaanan Cohney, Andrew Kwong, Shahar Paz, Daniel Genkin, Nadia Heninger,
Eyal Ronen, and Yuval Yarom. 2020. Pseudorandom Black Swans: Cache Attacks
on CTR_DRBG. In IEEE Symposium on Security and Privacy (Oakland). 750–767.
[11] Ian Cutress and Wendell Wilson. 2020. Testing a Chinese x86 CPU: A Deep Dive
into Zen-based Hygon Dhyana Processors. https://www.anandtech.com/show/
15493/hygon-dhyana-reviewed-chinese-x86-cpus-amd/3.
[12] Frederik Michel Dekking, Cornelis Kraaikamp, Hendrik Paul Lopuhaä, and Lu-
dolf Erwin Meester. 2005. A Modern Introduction to Probability and Statistics.
Springer London. https://doi.org/10.1007/1-84628-168-7
[13] Digilent. [n.d.]. Arty A7 Reference Manual. https://reference.digilentinc.com/
reference/programmable-logic/arty-a7/reference-manual
[14] Digilent. [n.d.]. Pmod SD Reference Manual. https://reference.digilentinc.com/
_media/reference/pmod/pmodsd/pmodsd_rm.pdf
[15] Maurizio Di Paolo Emilio. 2020. EETimes - Maxim Intros MCU with PUF Tech-
nology. https://www.eetimes.com/maxim-intros-mcu-with-puf-technology/
[16] Viktor Fischer and Miloš Drutarovský. 2003. True Random Number Generator
Embedded in Reconfigurable Hardware. In Cryptographic Hardware and Embed-
ded Systems - CHES 2002 (Lecture Notes in Computer Science), Burton S. Kaliski,
cetin K. Koc, and Christof Paar (Eds.). Springer Berlin Heidelberg, 415–430.
[17] Dan Goodin. 2013. We cannot trust Intel and Via’s chip-based crypto, FreeBSD
developers say. https://arstechnica.com/information-technology/2013/12/we-
cannot-trust-intel-and-vias-chip-based-crypto-freebsd-developers-say/.
[18] Guan-Chyun Hsieh and J. C. Hung. 1996. Phase-locked loop techniques. A
survey. IEEE Transactions on Industrial Electronics 43 (Dec 1996), 609–615. https:
//doi.org/10.1109/41.544547
[19] Z. Gutterman, B. Pinkas, and T. Reinman. 2006. Analysis of the Linux random
number generator. In IEEE Symposium on Security and Privacy (Oakland).
[20] Nadia Heninger, Zakir Durumeric, Eric Wustrow, and J. Alex Halderman. 2012.
Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network Devices.
In USENIX Security Symposium (USENIX Security). 205–220.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
[21] Daniel E. Holcomb, Wayne P. Burleson, and Kevin Fu. 2009. Power-Up SRAM
State as an Identifying Fingerprint and Source of True Random Numbers. IEEE
Trans. Comput. 58 (Sep 2009), 1198–1210. https://doi.org/10.1109/TC.2008.212
[22] Intrinsic ID. 2017. White Paper - The reliability of SRAM PUF.
,
16 pages. https://www.intrinsic-id.com/wp-content/uploads/2017/08/White-
Paper-The-reliability-of-SRAM-PUF.pdf
[23] K. Kang, H. Kufluoglu, K. Roy, and M. Ashraful Alam. 2007. Impact of Negative-
Bias Temperature Instability in Nanoscale SRAM Array: Modeling and Analysis.
Transactions on Computer-Aided Design of Integrated Circuits and Systems 26, 10
(Oct 2007), 1770–1781.
[24] Michael Kerrisk. [n.d.]. proc(5) - Linux manual page. http://man7.org/linux/man-
pages/man5/proc.5.html
[25] JD Kilgallin. 2019. Factoring RSA Keys in the IoT Era. In IEEE International
Conference on Trust, Privacy and Security in Intelligent Systems, and Applications
(TPSISA).
[26] D.J. Kinniment and E.G. Chester. 2002. Design of an on-chip random number
generator using metastability. In Proceedings of the 28th European Solid-State
Circuits Conference. 595–598.
[27] R. Maes and V. van der Leest. 2014. Countering the effects of silicon aging on
SRAM PUFs. In International Symposium on Hardware-Oriented Security and Trust
(HOST). 148–153.
[28] Abhranil Maiti, Vikash Gunreddy, and Patrick Schaumont. 2013. A Systematic
Method to Evaluate and Compare the Performance of Physical Unclonable Func-
tions. In Embedded Systems Design with FPGAs. Springer, New York, NY, 245–267.
https://doi.org/10.1007/978-1-4614-1362-2_11
[29] Mehrdad Majzoobi, Farinaz Koushanfar, and Srinivas Devadas. 2011. FPGA-Based
True Random Number Generation Using Circuit Metastability with Adaptive
Feedback Control. In Cryptographic Hardware and Embedded Systems – CHES
2011 (Lecture Notes in Computer Science). Springer Berlin Heidelberg, 17–32.
[30] Joseph McMahan, Weilong Cui, Liang Xia, Jeff Heckey, Frederic T. Chong, and
Timothy Sherwood. 2017. Challenging on-chip SRAM security with boot-state
statistics. In Symposium on Hardware Oriented Security and Trust (HOST). 101–
105.
[31] Julian Murphy, Maire O’Neill, Frank Burns, Alex Bystrov, Alex Yakovlev, and Basel
Halak. 2012. Self-Timed Physically Unclonable Functions. In 5th International
Conference on New Technologies, Mobility and Security (NTMS). 1–5.
https:
//doi.org/10.1109/NTMS.2012.6208707 ISSN: 2157-4960.
[32] S. P. Park, K. Kang, and K. Roy. 2009. Reliability Implications of Bias-Temperature
Instability in Digital ICs. IEEE Design Test of Computers 26 (Nov 2009), 8–17.
https://doi.org/10.1109/MDT.2009.154
[33] C.S. Petrie and J.A. Connelly. 1996. Modeling and simulation of oscillator-based
random number generators. In IEEE International Symposium on Circuits and
Systems (ISCAS), Vol. 4. 324–327 vol.4. https://doi.org/10.1109/ISCAS.1996.541967
[34] V. Reddy, A. T. Krishnan, A. Marshall, J. Rodriguez, S. Natarajan, T. Rost, and S.
Krishnan. 2002. Impact of negative bias temperature instability on digital circuit
reliability. In International Reliability Physics Symposium (RELPHY). 248–254.
[35] A. Roelke and M. R. Stan. 2016. Attacking an SRAM-Based PUF through Wearout.
In IEEE Computer Society Annual Symposium on VLSI (ISVLSI). 206–211.
[36] D. Schellekens, B. Preneel, and I. Verbauwhede. 2006. FPGA Vendor Agnostic True
Random Number Generator. In International Conference on Field Programmable
Logic and Applications (FPL). 1–6.
[37] Michal Varchola and Milos Drutarovsky. 2010. New High Entropy Element for
FPGA Based True Random Number Generators. In Cryptographic Hardware and
Embedded Systems (CHES). 351–365.
[38] M. Varchola, M. Drutarovsky, R. Fouquet, and V. Fischer. 2008. Hardware Plat-
form for Testing Performance of TRNGs Embedded in Actel Fusion FPGA. In
18th International Conference Radioelektronika. 1–4. https://doi.org/10.1109/
RADIOELEK.2008.4542712
[39] Ihor Vasyltsov, Eduard Hambardzumyan, Young-Sik Kim, and Bohdan Karpinskyy.
2008. Fast Digital TRNG Based on Metastable Ring Oscillator. In Cryptographic
Hardware and Embedded Systems – CHES 2008 (Lecture Notes in Computer Science).
Springer Berlin Heidelberg, 164–180.
[40] T.C. Weigandt, Beomsup Kim, and P.R. Gray. 1994. Analysis of timing jitter in
CMOS ring oscillators. In Proceedings of IEEE International Symposium on Circuits
and Systems - ISCAS ’94, Vol. 4. 27–30 vol.4. https://doi.org/10.1109/ISCAS.1994.
409188
[41] Steve H. Weingart. 2000. Physical Security Devices for Computer Subsystems:
A Survey of Attacks and Defenses. In Cryptographic Hardware and Embedded
Systems — CHES 2000 (Lecture Notes in Computer Science). Springer, Berlin, Hei-
delberg, 302–317. https://doi.org/10.1007/3-540-44499-8_24
[42] J. Wu and M. O’Neill. 2010. Ultra-lightweight true random number generators.
Electronics Letters 46 (Jul 2010), 988–990. https://doi.org/10.1049/el.2010.0893
[43] Xilinx. 2016. 7 Series FPGAs Configurable Logic Block User Guide (UG474).
,
74 pages.
[44] Xilinx. 2016. AXI GPIO v2.0: LogiCORE IP Product Guide. , 34 pages.
[45] Xilinx. 2018. 7 Series FPGAs Data Sheet: Overview (DS180). , 18 pages.
[46] Xinghai Tang, V. K. De, and J. D. Meindl. 1997. Intrinsic MOSFET parameter
fluctuations due to random dopant placement. IEEE Transactions on Very Large
672ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Michael Moukarzel and Matthew Hicks
Scale Integration (VLSI) Systems 5 (Dec 1997), 369–376. https://doi.org/10.1109/
92.645063
[47] S. Zeitouni, Y. Oren, C. Wachsmann, P. Koeberl, and A. Sadeghi. 2016. Remanence
Decay Side-Channel: The PUF Case. IEEE Transactions on Information Forensics
and Security 11, 6 (2016), 1106–1116.
[48] M. Šimka, M. Drutarovský, and V. Fischer. 2011. Testing of PLL-based true random
number generator in changing working conditions. Radioengineering 20 (2011),
94–101.
A RINGRAM’S SPATIAL LOCALITY
Figure 13 shows the spatial relationship of 768 individual RingRAM
cells on a Xilinx Artix-7 FGPA [45] on a Digilent Arty-A7-100T
evaluation board [13].
B ARTIFACT APPENDIX
B.1 Abstract
This artifact appendix describes how to use and implement
RingRAM to reproduce the results presented in this paper. The
artifact contains the source code for RingRAM, an evaluation
design, data capture scripts, implementation across three eval-
uation boards, and is publicly available as a GitHub reposi-
tory: https://github.com/FoRTE-Research/RingRAM. In addition
we demonstrate how to place/rout RingRAM cells across the FPGA
as well as porting our evaluation design onto other FPGAs.
B.2 Artifact check-list (meta-information)
cells
the 64-RingRAM cells
• Program: Vivado, python3
• Hardware: Arty-A735, Arty-A7100, Virtex7-VC709
• Output: 64-bits depicting the state of 64-RingRAM
• Experiments: Capture 320,000 samples (64-bits) from
• How much disk space required (approximately):
• How much time is needed to prepare workflow (ap-
• How much time is needed to complete experiments
• Publicly available: Yes
• Code licenses (if publicly available): MIT License
(approximately): 10mins
proximately): 20mins
10MB
B.3 Description
B.3.1 How to access. This artifact is publicly accessible and clone-
able through its GitHub repository: https://github.com/FoRTE-
Research/RingRAM. The repository contains the RingRAM primi-
tive, an evaluation design used to test and monitor the state of
RingRAM cells, and scripts for creating symmetric and tightly
packed cells.
B.3.2 Hardware dependencies. While RingRAM can be ported onto
any FPGA system, this artifact was built and evaluated using these
three evaluation boards: Arty A7-35, Arty A7-100, and VC709
B.3.3
Software dependencies.
(1) Vivado: All the evaluation boards in this artifact utilize Xilinx
FPGAs. Therefore Xilinx’s Vivado design suite is required to
synthesis, place/route, and generate bitstreams.
(2) python3: As RingRAM layouts are required to be symmet-
ric and tightly packed, this artifact controls placement by
modifying the Xilinx Design contraint (.xdc) file. We utilize
python to automate this process allowing us to move and
port our layout.
B.4 Installation
(1) Clone repository:
• https://github.com/FoRTE-Research/RingRAM
(2) Creating vivado project using make commands:
• Arty A7-35: make RingRAM-A735
• Arty A7-100: make RingRAM-A7100
• Virtex 7-VC709: make RingRAM-VC709
• Create Project
• Project Type - RTL Project
• Add Sources - Include Verilog (.v) files in HDL directory
• Add Constraints - Include Xilinx Design Constraints (.xdc)
(3) Creating vivado project manually:
files in HDL directory
B.5 Experiment workflow
(1) Generate a bitstream data programming file of the RingRAM
evaluation design by running synthesis and implementation
on the provided HDL files. This can be done manually or by
running make (RingRAM-A735, RingRAM-A7100, RingRAM-
VC709)
(2) Prepare
serial output using the
captureSerial script. Specify the serial port [-P] ac-
tivated when connecting the target FPGA device’s serial
port to your system.
to capture
(3) Using Vivado’s Hardware Manager download bitstream data
the
programming file into the targeted FPGA device.
B.6 Evaluation
To utilize RingRAM in any design, one need only to instantiate
the RingRAM component found in RRAM.v. However to evaluate
RingRAM we create a state machine (RRAM_CTRL.v) that controls
the enables of the RingRAM cells and transmits their states through
a UART port (UART_CTRL.v). Controlling the enables allows us
to set and reset their race condition: LOW enables prevents any
feedback forcing the outputs to be high, HIGH enables initiates
the race condition. To properly evaluate RingRAM cells we must
capture and examine the result of multiple race conditions across
multiple cells. To achieve this, the state machine continuously tog-
gles the enable and transmits the cell’s outputs through the serial.
To optimize serial communication we do not encode our data in
ASCII, instead the raw binary values of all the cells are transmitted
in bursts. To capture and store these iterations we wrote a script
(captureSerial) that automatically verifies that when LOW en-
able all outputs are HIGH and when HIGH enable stores the outputs
of the race conditions in a log file.
Command:
captureSerial [-P] [-F]
Parameters:
(1) [-p] [-P] [--PORT]: Location of the serial port
(2) [-f] [-F] [--FILE]: File output path
673RingRAM: A Unified Hardware Security
Primitive for IoT Devices that Gets Better with Age
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 13: There is no obvious correlation between location and RingRAM cell stability.
(2) xdcAddBlocks: add blocks to contain the equivalent pinouts
and pblock locations.
All results generated in this paper were extracted utilizing this
state machine (RRAM_CTRL.v) to control 64 RingRAM cells and cap-
ture 320,000 samples (captureSerial). Depending on the desired
evaluation there are customization options available: physical place-
ment, inverter chain lengths, and the number of RingRAM cells.
B.7 Experiment customization
There are two sources of variation that a designer must avoid when
implementing RingRAM: systematic and structural. We provide
two guidelines to avoid these sources of variation: Symmetric and
Tightly-packed. The xdcRingRAMCC script generates a Xilinx Design
Constraints (.xdc) file that adheres to these guidelines:
Command:
xdcRingRAMCC [-F] [-C] [-I] [-X] [-Y] [-P]
Parameters:
(1) [-f][-F][--FPGA]: Which FPGA design to use
(2) [-c][-C][--CELLS]: RingRAM cells to generate
(3) [-i][-I][--INV]: Length of the RingRAM inverter chains
(4) [-x][-X][--POSX]: Starting horizontal index of the LUT
(5) [-y][-Y][--POSY]: Starting vertical index of the LUT
(6) [-p][-P][--PATH]: The location and name of the RingRAM
primitive
B.7.1 Placement. To customize the physical
location of the
RingRAM cells modify the [-X] and [-Y] parameters. However, as it
is important to keep symmetry, you should examine the LUT place-
ments of the FPGA. Open the synthesis/implementation design in
Vivado and examine the layout to determine which cells to use.
Inverter Chain Length. To customize the inverter chain
B.7.2
length of the RingRAM cells modify the:
(1) xdcRingRAMCC: The [-I] parameter
(2) top_level: The g_RRAM_INV parameter
B.7.3 RingRAM Cells. To customize the number of RingRAM cells
modify the:
(1) xdcRingRAMCC: The [-C] parameter
(2) top_level: The g_RRAM_CELLS parameter
B.7.4 Porting to another FPGA. The RingRAM primitive RRAM.v
can be instantiated in any design or on any FPGA. To customize
the number of cells or the length of the inverter chains set the
g_RRAM_CELLS or g_RRAM_INV parameters respectively.
However to port the RingRAM layout it is necessary to modify
the:
(1) xdcRingRAMCC: [-P] and [-F] parameter
13579111315171921232527293133353739414345474951535557596163656769717375777981838587899193959799101103105107109111113115117119121123125127Row index123456Column index0.50.60.70.80.91.0Cell response stability674