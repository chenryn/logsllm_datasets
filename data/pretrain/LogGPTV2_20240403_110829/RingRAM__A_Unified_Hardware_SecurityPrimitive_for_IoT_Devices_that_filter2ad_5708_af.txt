以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

[2] Krste Asanović, Rimas Avizienis, Jonathan Bachrach, Scott Beamer, David Biancolin, Christopher Celio, Henry Cook, Daniel Dabbelt, John Hauser, Adam Izraelevitz, Sagar Karandikar, Ben Keller, Donggyu Kim, John Koenig, Yunsup Lee, Eric Love, Martin Maas, Albert Magyar, Howard Mao, Miquel Moreto, Albert Ou, David A. Patterson, Brian Richards, Colin Schmidt, Stephen Twigg, Huy Vo, and Andrew Waterman. 2016. The Rocket Chip Generator. 技术报告 UCB/EECS-2016-17。加州大学伯克利分校 EECS 系。

[3] Pierre Bayon, Lilian Bossuet, Alain Aubert, Viktor Fischer, François Poucheret, Bruno Robisson, 和 Philippe Maurine. 2012. 基于环振荡器的真随机数生成器的无接触电磁主动攻击。在《建设性侧信道分析与安全设计》中。第 7275 卷。Springer Berlin Heidelberg，柏林，海德堡，151–166 页。https://doi.org/10.1007/978-3-642-29912-4_12

[4] Eduardo Boemo 和 Sergio López-Buedo. 1997. 使用环振荡器进行 FPGA 的热监控。在《现场可编程逻辑及其应用》（计算机科学讲义）中。Springer，柏林，海德堡，69–78 页。https://doi.org/10.1007/3-540-63465-7_212

[5] BusyBox. 2019. BusyBox：嵌入式 Linux 的瑞士军刀。https://busybox.net/about.html.

[6] Christian Cachin. 1997. 密码学中的熵度量和无条件安全性。博士论文。苏黎世联邦理工学院。

[7] Y. Cao, V. Rožić, B. Yang, J. Balasch, 和 I. Verbauwhede. 2016. 探索 TERO 随机数生成器的主动操纵攻击。在国际中西部电路与系统研讨会（MWSCAS）。1–4 页。

[8] T.J. Chaney 和 C.E. Molnar. 1973. 同步器和仲裁器电路的异常行为。IEEE 计算机汇刊 C-22（1973 年 4 月），421–422 页。https://doi.org/10.1109/T-C.1973.223730

[9] A. Cherkaoui, V. Fischer, A. Aubert, 和 L. Fesquet. 2013. 一种自定时环形真随机数生成器。在 IEEE 第 19 届异步电路和系统国际研讨会。99–106 页。https://doi.org/10.1109/ASYNC.2013.15

[10] Shaanan Cohney, Andrew Kwong, Shahar Paz, Daniel Genkin, Nadia Heninger, Eyal Ronen, 和 Yuval Yarom. 2020. 伪随机黑天鹅：CTR_DRBG 的缓存攻击。在 IEEE 安全与隐私研讨会（奥克兰）。750–767 页。

[11] Ian Cutress 和 Wendell Wilson. 2020. 测试中国 x86 CPU：深入研究基于 Zen 的 Hygon Dhyana 处理器。https://www.anandtech.com/show/15493/hygon-dhyana-reviewed-chinese-x86-cpus-amd/3.

[12] Frederik Michel Dekking, Cornelis Kraaikamp, Hendrik Paul Lopuhaä, 和 Ludolf Erwin Meester. 2005. 概率论与统计学现代导论。Springer London。https://doi.org/10.1007/1-84628-168-7

[13] Digilent. [未注明日期]. Arty A7 参考手册。https://reference.digilentinc.com/reference/programmable-logic/arty-a7/reference-manual

[14] Digilent. [未注明日期]. Pmod SD 参考手册。https://reference.digilentinc.com/_media/reference/pmod/pmodsd/pmodsd_rm.pdf

[15] Maurizio Di Paolo Emilio. 2020. EETimes - Maxim 推出带有 PUF 技术的 MCU。https://www.eetimes.com/maxim-intros-mcu-with-puf-technology/

[16] Viktor Fischer 和 Miloš Drutarovský. 2003. 嵌入可重构硬件的真随机数生成器。在《密码硬件和嵌入式系统——CHES 2002》（计算机科学讲义），Burton S. Kaliski, cetin K. Koc, 和 Christof Paar 编辑。Springer Berlin Heidelberg，415–430 页。

[17] Dan Goodin. 2013. FreeBSD 开发者称我们不能信任 Intel 和 VIA 的芯片级加密。https://arstechnica.com/information-technology/2013/12/we-cannot-trust-intel-and-vias-chip-based-crypto-freebsd-developers-say/.

[18] Guan-Chyun Hsieh 和 J. C. Hung. 1996. 锁相环技术综述。IEEE 工业电子汇刊 43（1996 年 12 月），609–615 页。https://doi.org/10.1109/41.544547

[19] Z. Gutterman, B. Pinkas, 和 T. Reinman. 2006. Linux 随机数生成器的分析。在 IEEE 安全与隐私研讨会（奥克兰）。

[20] Nadia Heninger, Zakir Durumeric, Eric Wustrow, 和 J. Alex Halderman. 2012. 挖掘你的 P 和 Q：检测网络设备中的广泛弱密钥。在 USENIX 安全研讨会（USENIX Security）。205–220 页。

[21] Daniel E. Holcomb, Wayne P. Burleson, 和 Kevin Fu. 2009. 上电 SRAM 状态作为识别指纹和真随机数来源。IEEE 计算机汇刊 58（2009 年 9 月），1198–1210 页。https://doi.org/10.1109/TC.2008.212

[22] Intrinsic ID. 2017. 白皮书 - SRAM PUF 的可靠性。16 页。https://www.intrinsic-id.com/wp-content/uploads/2017/08/White-Paper-The-reliability-of-SRAM-PUF.pdf

[23] K. Kang, H. Kufluoglu, K. Roy, 和 M. Ashraful Alam. 2007. 负偏压温度不稳定性对纳米级 SRAM 阵列的影响：建模与分析。计算机辅助集成电路与系统设计汇刊 26, 10（2007 年 10 月），1770–1781 页。

[24] Michael Kerrisk. [未注明日期]. proc(5) - Linux 手册页。http://man7.org/linux/man-pages/man5/proc.5.html

[25] JD Kilgallin. 2019. 物联网时代的 RSA 密钥分解。在 IEEE 国际可信、隐私与智能系统安全会议（TPSISA）。

[26] D.J. Kinniment 和 E.G. Chester. 2002. 利用亚稳态设计片上随机数生成器。在第 28 届欧洲固态电路会议。595–598 页。

[27] R. Maes 和 V. van der Leest. 2014. 应对硅老化对 SRAM PUF 的影响。在国际硬件导向安全与信任研讨会（HOST）。148–153 页。

[28] Abhranil Maiti, Vikash Gunreddy, 和 Patrick Schaumont. 2013. 评估和比较物理不可克隆函数性能的系统方法。在《使用 FPGA 的嵌入式系统设计》。Springer，纽约，NY，245–267 页。https://doi.org/10.1007/978-1-4614-1362-2_11

[29] Mehrdad Majzoobi, Farinaz Koushanfar, 和 Srinivas Devadas. 2011. 基于 FPGA 的真随机数生成器，利用电路亚稳态并采用自适应反馈控制。在《密码硬件和嵌入式系统——CHES 2011》（计算机科学讲义）。Springer Berlin Heidelberg，17–32 页。

[30] Joseph McMahan, Weilong Cui, Liang Xia, Jeff Heckey, Frederic T. Chong, 和 Timothy Sherwood. 2017. 通过启动状态统计挑战片上 SRAM 安全性。在硬件导向安全与信任研讨会（HOST）。101–105 页。

[31] Julian Murphy, Maire O’Neill, Frank Burns, Alex Bystrov, Alex Yakovlev, 和 Basel Halak. 2012. 自定时物理不可克隆函数。在第五届新技术、移动性和安全国际会议（NTMS）。1–5 页。https://doi.org/10.1109/NTMS.2012.6208707 ISSN: 2157-4960.

[32] S. P. Park, K. Kang, 和 K. Roy. 2009. 数字 IC 中偏置温度不稳定性的可靠性影响。IEEE 设计与测试计算机汇刊 26（2009 年 11 月），8–17 页。https://doi.org/10.1109/MDT.2009.154

[33] C.S. Petrie 和 J.A. Connelly. 1996. 基于振荡器的随机数生成器的建模与仿真。在 IEEE 国际电路与系统研讨会（ISCAS），第 4 卷。324–327 页。https://doi.org/10.1109/ISCAS.1996.541967

[34] V. Reddy, A. T. Krishnan, A. Marshall, J. Rodriguez, S. Natarajan, T. Rost, 和 S. Krishnan. 2002. 负偏压温度不稳定性对数字电路可靠性的影晌。在国际可靠性物理研讨会（RELPHY）。248–254 页。

[35] A. Roelke 和 M. R. Stan. 2016. 通过磨损攻击 SRAM 基础的 PUF。在 IEEE 计算机协会年度 VLSI 研讨会（ISVLSI）。206–211 页。

[36] D. Schellekens, B. Preneel, 和 I. Verbauwhede. 2006. 与 FPGA 供应商无关的真随机数生成器。在国际现场可编程逻辑与应用会议（FPL）。1–6 页。

[37] Michal Varchola 和 Milos Drutarovsky. 2010. 新的高熵元件用于基于 FPGA 的真随机数生成器。在密码硬件和嵌入式系统（CHES）。351–365 页。

[38] M. Varchola, M. Drutarovsky, R. Fouquet, 和 V. Fischer. 2008. 用于测试 Actel Fusion FPGA 中嵌入的 TRNG 性能的硬件平台。在第 18 届国际无线电电子会议。1–4 页。https://doi.org/10.1109/RADIOELEK.2008.4542712

[39] Ihor Vasyltsov, Eduard Hambardzumyan, Young-Sik Kim, 和 Bohdan Karpinskyy. 2008. 基于亚稳态环振荡器的快速数字 TRNG。在《密码硬件和嵌入式系统——CHES 2008》（计算机科学讲义）。Springer Berlin Heidelberg，164–180 页。

[40] T.C. Weigandt, Beomsup Kim, 和 P.R. Gray. 1994. CMOS 环振荡器时序抖动分析。在 IEEE 国际电路与系统研讨会——ISCAS ’94，第 4 卷。27–30 页。https://doi.org/10.1109/ISCAS.1994.409188

[41] Steve H. Weingart. 2000. 计算机子系统的物理安全设备：攻击与防御综述。在《密码硬件和嵌入式系统——CHES 2000》（计算机科学讲义）。Springer，柏林，海德堡，302–317 页。https://doi.org/10.1007/3-540-44499-8_24

[42] J. Wu 和 M. O’Neill. 2010. 超轻量级真随机数生成器。电子通信 46（2010 年 7 月），988–990 页。https://doi.org/10.1049/el.2010.0893

[43] Xilinx. 2016. 7 系列 FPGA 可配置逻辑块用户指南（UG474）。74 页。

[44] Xilinx. 2016. AXI GPIO v2.0：LogiCORE IP 产品指南。34 页。

[45] Xilinx. 2018. 7 系列 FPGA 数据表：概述（DS180）。18 页。

[46] Xinghai Tang, V. K. De, 和 J. D. Meindl. 1997. 由于随机掺杂剂放置引起的 MOSFET 内在参数波动。IEEE 极大规模集成系统汇刊 5（1997 年 12 月），369–376 页。https://doi.org/10.1109/92.645063

[47] S. Zeitouni, Y. Oren, C. Wachsmann, P. Koeberl, 和 A. Sadeghi. 2016. 剩磁衰减侧信道：PUF 案例。IEEE 信息取证与安全汇刊 11, 6（2016 年），1106–1116 页。

[48] M. Šimka, M. Drutarovský, 和 V. Fischer. 2011. 在变化的工作条件下测试 PLL 基础的真随机数生成器。无线电工程 20（2011 年），94–101 页。

### RingRAM 的空间局部性

图 13 显示了在 Digilent Arty-A7-100T 评估板 [13] 上的 Xilinx Artix-7 FGPA [45] 上 768 个单独的 RingRAM 单元的空间关系。

### 附录 B：实验附录

#### B.1 摘要
本实验附录描述了如何使用和实现 RingRAM 以重现本文所述的结果。该实验包含 RingRAM 的源代码、评估设计、数据捕获脚本、三个评估板上的实现，并且公开可用的 GitHub 仓库为：https://github.com/FoRTE-Research/RingRAM。此外，我们还演示了如何在 FPGA 上放置和布线 RingRAM 单元，以及将我们的评估设计移植到其他 FPGA 上。

#### B.2 实验清单（元信息）
- 单元格：64-RingRAM 单元
- 程序：Vivado, python3
- 硬件：Arty-A735, Arty-A7100, Virtex7-VC709
- 输出：64 位表示 64-RingRAM 单元的状态
- 实验：从 64-RingRAM 单元中捕获 320,000 个样本（64 位）
- 所需磁盘空间（大约）：10MB
- 准备工作流所需时间（大约）：10 分钟
- 完成实验所需时间（大约）：20 分钟
- 公开可用：是
- 代码许可证（如果公开可用）：MIT 许可证

#### B.3 描述

##### B.3.1 如何访问
此实验可通过其 GitHub 仓库公开访问和克隆：https://github.com/FoRTE-Research/RingRAM。该仓库包含 RingRAM 原语、用于测试和监视 RingRAM 单元状态的评估设计，以及创建对称和紧密打包单元的脚本。

##### B.3.2 硬件依赖
虽然 RingRAM 可以移植到任何 FPGA 系统上，但此实验是在以下三个评估板上构建和评估的：Arty A7-35、Arty A7-100 和 VC709。

##### B.3.3 软件依赖
1. Vivado：所有评估板都使用 Xilinx FPGA。因此，需要 Xilinx 的 Vivado 设计套件来综合、布局布线和生成比特流。
2. Python3：由于 RingRAM 布局需要对称和紧密打包，此实验通过修改 Xilinx 设计约束文件（.xdc）来控制放置。我们利用 Python 来自动化这一过程，以便移动和移植我们的布局。

#### B.4 安装
1. 克隆仓库：
   - https://github.com/FoRTE-Research/RingRAM
2. 使用 make 命令创建 Vivado 项目：
   - Arty A7-35：make RingRAM-A735
   - Arty A7-100：make RingRAM-A7100
   - Virtex 7-VC709：make RingRAM-VC709
3. 手动创建 Vivado 项目：
   - 创建项目
   - 项目类型 - RTL 项目
   - 添加源文件 - 包含 HDL 目录中的 Verilog (.v) 文件
   - 添加约束 - 包含 Xilinx 设计约束文件 (.xdc)

#### B.5 实验工作流程
1. 通过运行综合和实现生成 RingRAM 评估设计的比特流数据编程文件。这可以通过手动操作或运行 make (RingRAM-A735, RingRAM-A7100, RingRAM-VC709) 来完成。
2. 准备捕获串行输出，使用 captureSerial 脚本。指定连接目标 FPGA 设备串行端口时激活的串行端口 [-P]。
3. 使用 Vivado 的硬件管理器将比特流数据编程文件下载到目标 FPGA 设备中。

#### B.6 评估
要在任何设计中使用 RingRAM，只需实例化 RRAM.v 中的 RingRAM 组件即可。然而，为了评估 RingRAM，我们创建了一个状态机（RRAM_CTRL.v），它控制 RingRAM 单元的使能并通过 UART 端口（UART_CTRL.v）传输它们的状态。控制使能允许我们设置和重置它们的竞争条件：低使能防止任何反馈，强制输出为高；高使能启动竞争条件。为了正确评估 RingRAM 单元，我们必须捕获和检查多个单元在多次竞争条件下的结果。为此，状态机不断切换使能并通过串行端口传输单元的输出。为了优化串行通信，我们不将数据编码为 ASCII，而是以突发方式传输所有单元的原始二进制值。为了捕获和存储这些迭代，我们编写了一个脚本（captureSerial），该脚本自动验证当低使能时所有输出为高，当高使能时将竞争条件的输出存储在日志文件中。

命令：
```
captureSerial [-P] [-F]
```

参数：
1. [-p] [-P] [--PORT]：串行端口的位置
2. [-f] [-F] [--FILE]：文件输出路径

#### B.7 实验定制

有两类变异性是设计师在实现 RingRAM 时必须避免的：系统性和结构性。我们提供了两个指导方针来避免这些变异源：对称性和紧密打包。xdcRingRAMCC 脚本生成一个遵循这些指导方针的 Xilinx 设计约束文件（.xdc）：

命令：
```
xdcRingRAMCC [-F] [-C] [-I] [-X] [-Y] [-P]
```

参数：
1. [-f][-F][--FPGA]：使用哪个 FPGA 设计
2. [-c][-C][--CELLS]：生成的 RingRAM 单元数量
3. [-i][-I][--INV]：RingRAM 反相链的长度
4. [-x][-X][--POSX]：查找表的起始水平索引
5. [-y][-Y][--POSY]：查找表的起始垂直索引
6. [-p][-P][--PATH]：RingRAM 原语的位置和名称

##### B.7.1 放置
要自定义 RingRAM 单元的物理位置，请修改 [-X] 和 [-Y] 参数。但是，为了保持对称性，您应该检查 FPGA 的查找表放置。在 Vivado 中打开综合/实现设计并检查布局，以确定使用哪些单元。

##### B.7.2 反相链长度
要自定义 RingRAM 单元的反相链长度，请修改：
1. xdcRingRAMCC：[-I] 参数
2. top_level：g_RRAM_INV 参数

##### B.7.3 RingRAM 单元
要自定义 RingRAM 单元的数量，请修改：
1. xdcRingRAMCC：[-C] 参数
2. top_level：g_RRAM_CELLS 参数

##### B.7.4 移植到另一个 FPGA
RingRAM 原语 RRAM.v 可以在任何设计或 FPGA 中实例化。要自定义单元数量或反相链长度，请分别设置 g_RRAM_CELLS 或 g_RRAM_INV 参数。然而，要移植 RingRAM 布局，需要修改：
1. xdcRingRAMCC：[-P] 和 [-F] 参数

---

图 13：RingRAM 单元的位置与其稳定性之间没有明显的相关性。

---