3 METHODOLOGY
To analyze errors in EasyList, we first need to extract real FP and
FN errors from the noisy datasets. In the following, we present our
methodologies for information extraction.
3.1 Linking Reports with EasyList
To understand how crowdsourcing reports impact EasyList updates,
we first needed to link the two datasets. More specifically, we sought
to accurately identify which EasyList version was created as a
result of a given report. Our linking method was based on a few
observations. Under a crowdsourcing report, EasyList editors often
refer to the ChangeSet [44] links in the Mercurial repository. This is
a confirmation of the correction of an FN or FP error in the refereed
EasyList version. Similarly, users (reporters) also use the ChangeSet
links to refer to the filters or EasyList versions that caused the
errors, or the ones where the errors were solved.
Based on these observations, we scanned the collected forums’
topics and their threads/replies. We considered the post details if
they met the following requirements: (1) The reply had a Change-
Set link; (2) The reply was created by EasyList editors; (3) The
timestamp of the EasyList version in the ChangeSet link was after
the timestamp of the report; and (4) The time gap between the
timestamp of the EasyList version in the ChangeSet link and the
timestamp of the reply was within a day.
It is worth mentioning that there is a probability that an editor
corrected an error but did not reply to the reporter and confirm the
232
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Alrizah et al.
correction. In this case, there is no way for us to link the report
to the EasyList version. Moreover, the editor might return an old
ChangeSet link, which had been created more than a day before the
editor’s response or was created by another editor. In this case, we
do not have strong evidence that an EasyList version was created
in response to that, or to a similar report. The editors occasionally
returned an old ChangeSet link to indicate that an error has been re-
solved. Therefore, the inclusion criteria listed above were designed
to be conservative, and the successfully linked pairs selected by our
approach are trustworthy (manually confirmed).
After this step, we had 5,284 reports in total. There were 3,700
reports about FN errors submitted by 758 users and 1,584 reports
about FP errors from 801 users. The covered time span was from
November 2009, to December 2018. We call this sub-dataset as D2A.
3.2 Reproducing FPs
To deeply analyze FP errors, we simulated the errors using old
versions of EasyList and the web pages that were impacted. There
were challenges to simulate the errors and pinpoint the influenced
elements of the reported web pages.
Each website has a differ-
Challenges of Reproducing FPs.
ent structure that varies over time. Consequently, many FP errors
occurred in the past do not exist in subsequent structures. This
was the first challenge we faced, and we used the Internet Archive:
Wayback Machine service [7] (Wayback Machine) to extract old
versions of the websites.
The second challenge was how to recognize elements impacted
by FP errors. Usually, EasyList simultaneously blocks and hides
more than one element on the same page due to multiple matched
filters. Sometimes it even filters out dozens of elements, the majority
of which are ads, making it an arduous task to distinguish between
true positives (TP) results and FP errors.
We identified the web page elements impacted by an FP error by
utilizing the difference between two successive EasyList versions:
the version that corrected the error and the version that was cre-
ated before it. We designed our method to identify the legitimate
elements that were falsely blocked by using a reverse method of ad
blocking. The essence of the idea is that each EasyList version has
its scope that depends on the scopes of its filters. When a new FN
error is encountered, a new version is created to expand the range
of EasyList to cover the ads in the page that has the error. For an
FP error, the scope of EasyList is shrunk by adding new exception
rule(s) or/and removing filter(s).
Next, we
Identifying the Affected Elements by FP Errors.
introduce the detailed methodology to extract web page elements
impacted by an FP error (i.e., the EasyList filter). Let ϒ be the set
of elements that are affected by the bad filters (FP-error-causing
filters). In other words, ϒ represents legitimate elements that are
misidentified as ads. Let Zk be EasyList version k created to fix
an FP error. Let Zk−1 be the EasyList version immediately before
EasyList version k, which contains the false-positive-causing filters.
Here the goal is to identify ϒ by matching Zk and Zk−1 against the
affected web page.
First, we consider EasyList version k. Let N be the set of elements
in the web page and Fi(N) be a set of ad elements matched by filter i.
Typically, an EasyList filter may also match legitimate elements and
thus the filters often come with exception rules. Here, Ej(N) which
represents a set of non-ad elements matched by exception rule j
and overwrites the output of Fi(N). Using the EasyList version k,
the blocked ad elements in the web page are:
Ej(N)
Fi(N) − 
S = 
i∈Zk
j∈Zk
Next, we backtrace to version Zk−1 where there are FP-error-
causing filters. To identify ϒ (the set of legitimate elements that
were incorrectly blocked by filters in version Zk−1), we preform set
subtraction between the set of elements blocked by Zk−1 and the
set of elements blocked Zk. As a result, legitimate elements blocked
by Zk−1 are:

Fi(N) − 
i∈Zk−1
j∈Zk−1
ϒ =(cid:169)(cid:173)(cid:171)
Ej(N)(cid:170)(cid:174)(cid:172) −(cid:169)(cid:173)(cid:171)

i∈Zk
Fi(N) − 
j∈Zk
Ej(N)(cid:170)(cid:174)(cid:172)
To better explain the process above, we use a toy example. Sup-
pose Z1 is EasyList version 1, and Z2 EasyList version 2 created
to correct the FP error in version 1. A web page has elements N =
{n1, n2, n3, n4, n5, n6}. The ad elements are {n1, n2, n3}. Z1 has fil-
ters { f1, f2} and an exception rule {e3} that prevents n6 from being
blocked because it is not an ad element. As a result, suppose f1
blocks {n1, n2, n5} and f2 blocks {n3}. e3 excepts {n6} from being
blocked. Since n5 is not an ad, f1 causes an FP error.
In our toy example, Z2 is then created to correct the above FP
error by adding a new exception to the list: { f1, f2, e3, e4} where the
new rule e4 excepts {n5}. To find n5, we apply the above equation
ϒ = ({n1, n2, n3, n5} − {n6}) − ({n1, n2, n3, n5} − ({n5, n6}) = {n5}.
As illustrated above, {n5} is exactly the element affected by the FP
error.
In this way, we built a list of CSS selectors to identify the Docu-
ment Object Model (DOM) of ϒ that was used when we scanned
the Wayback Machine. We scanned 2,203 web pages from different
websites that were reported with FP errors in D2A.
Limitations of using Internet Archive. We are aware of the
potential limitations of Internet Archive[40, 41, 88]. Here, we want
to briefly discuss how such limitations affect our analysis. First, the
frozen ads problem. Because the archived webpages are no longer
“live”, the ads are frozen (i.e., not loading from the live source).
However, this does not impact our analysis since we focus on FP,
i.e., legitimate web elements blocked by EasyList filters, not the ad
elements. Second, the nearest-neighbor timestamp problem. It is
a known limitation that archived snapshots are incomplete. The
consecutive snapshots might have a big time gap in between. For
our analysis, we utilized the Wayback CDX Server API [66] to
check the nearest snapshot to our requested date to make sure the
dates are close by (309 web pages are eliminated due to the lack
of snapshots). Third, the absence of archived web page problem.
Certain web pages were not achieved due to the Robots Exclusion
Protocol [1] or the websites were low-ranked. We found 76 websites
in our analysis were not archived. Additionally, errors that could
only be triggered by logging-in were not simulated. Other issues
such as “archive-escapes destination” and “same-origin escapes” do
not apply to our context.
233
Analyzing the Crowdsourcing Process of Ad-blocking Systems
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
The lifetime or duration of the FP error on
Error Duration.
each website started when the error-causing filter matched the non-
ad element(s) on the website and lasted until the error was corrected.
Thus, we should be able to find the duration of the impacted element
on the website and the duration of error-causing filter on the filter
list. The overlap between these intervals until error correction is
the duration of an FP error.
To find the duration of each impacted element, we built a Java ap-
plication to scan all the snapshots of impacted websites. We utilized
the Wayback CDX Server API. The API enables complex queries
that return the list of web page snapshots captured by Wayback.
We used it to specify our queries, e.g., excluding permanent URL
redirections [18]. We removed 82 web pages that had permanent
URL redirection. We utilized the HtmlUnit, which is a “GUI-Less
browser for Java programs"[29]. It is hard to use Java applications to
emulate browser behavior, such as executing JavaScript. Therefore,
we used HtmlUnit to emulate parts of browser behavior, including
the lower-level aspects of HTTP and supporting JavaScript.
To find the duration of an error-causing filter, we used dataset
D1 to identify the time when the filter was added to EasyList. Still,
we could not directly identify the filter in each case. The predica-
ment was that there were 869 cases of EasyList editors creating
exception filters to correct the errors. That did not help the process
of recognizing which filter caused the problem. The exception fil-
ter overrode the error-causing filter in the scope of the impacted
filter. Thus, we built a Google Chrome extension to reproduce the
ad-blocking effect in various circumstances. The Chrome extension
is similar to the Adblock Plus extension, but it is fed with a specific
list. For each case, we fed the extension with the EasyList version
that was created directly before the version that was created to cor-
rect the error. Furthermore, we modified some filters to fit with the
archive.org website. In each snapshot of any website, archive.org is
the first party. For example, the URL of the snapshot of cnn.com in
May 2013, is
https://web.archive.org/web/20130531-
230746/http://www.cnn.com/
Filters like: /hads-$domain=cnn.com will not block anything
in this snapshot since the first party of snapshot is archive.org,
while http://www.cnn.com/ is the sub-domain. We changed
the domain of the filters that required indicating the first party in
each case to archive.org. Moreover, we used Webrecorder [84]
to replay web archives and activate dynamic scripts.
FP Instances. We ended up with 570 instances (out of 2,203)
that correctly emulated the FP errors. We analyzed each instance to
extract the element types and feature and indicate the filter cause
the FP error. This sub-dataset was designated as D2FP
3.3 Extracting FN Errors
EasyList depends on crowdsourcing to detect FN errors, which
happens when ads are not blocked as expected. Three main parts
need to be investigated in order to provide a pragmatic analysis: the
crowd contribution, the EasyList reaction, and the countermeasures
of ad publishers. Therefore, from dataset D2, we extracted such
information from FN error reports as the profiles of users who
reported the errors, the domains and explanatory words from titles,
the timestamps of posting, the outgoing links from the replies, and
234
the contents of replies. There were 17.9K FN reports submitted by
4,552 users who reported 12,866 websites.
We attempted to extract the rejected or incorrect FN reports. We
classified a report as a rejected report if one or more of the following
conditions were met: (1) The editors replied explicitly to reject the
report; (2) The editors indicated that the report was not applicable
because it was about FP errors or other issues such as adware; (3)
The report was insufficient and locked (if it was not replied to or did
not include the websites where the error occurred); (4) The editors
referred to a ChangeSet link that belonged to another filter list, or
responded with an old ChangeSet link and locked the thread; (5)
The topic was locked after the editor asked a question, but there
was no response from the reporter.
Conditions (4) and (5) were applied to posts with small threads,
because we cannot manually validate posts with many replies. We
found 3,750 reports that met at least one of these conditions. This
sub-dataset was designated as D2B.
We studied the explanatory words from the titles and the Change-
Set links to indicate the error types generally. The forum mainly
targets ad elements. However, we noticed in a previous stage that
some reports were about adware and software issues. These reports
were considered incorrect reports. In later sections, we will ana-
lyze errors that might have been reported due to privacy issues,
anti-adblocks, and social media content that were not considered
incorrect reports by EasyList editors.
3.4 Websites Involved in the Reports
Our dataset revealed that the EasyList community used the open
forums to report over 12,266 websites. Some of them were men-
tioned in more than one report. In our analysis, we studied only the
websites that were indicated in dataset D2A (reports with ground-
truth). Dataset D2A includes 4,212 websites. FP reports mentioned
1,266 websites, whereas FN reports referred to 2,946 websites. Some
of the websites were included in both FN and FP reports.
4 ANALYSIS
In this section, we deeply investigate the main factors related to
ad-blocking systems’ accuracy: the users, the websites, the types
of errors, and the time. We study the association between these
factors and the errors to draw a substantial picture of potential
consequences.
4.1 FP vs. FN Errors
From dataset D2A, Table 2 shows that there are 1,584 FP-related
reports and 3,700 FN-related reports. Even though we took conser-
vative linking methods, FPs still took 30% of all the errors, which is
a non-trivial portion. The delay of correcting FP errors, in general,
was shorter than that of correcting FN errors, which also varied
among different types of reporters. More specifically, the reporters
were classified into seven categories according to their experience
and tasks, as shown below:
• Editor: EasyList authors or maintainers
• Anonymous: guest users that are not registered in the forums
• New Member: registered users that have less than ten posts
whether they are reports or not
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Alrizah et al.
Title
Anonymous
New Member
Senior Member
Developer
Other Lists Editor
Veteran
Editor
Total
FP
FN
# Reports
Avg. of days
FP
FN
2.37 1.80
530
3.94 9.31
371
2.31 6.42
160
1.80 16.30
83
1.65 2.65
105
1.95 5.34
255
80
0.58 0.52
1,584.00 3,700.00 2.09 6.05
853
307
749
99
603
751
338
SD.
FP
FN
6.88 7.38
8.77 21.09
5.35 17.48
5.52 31.08
3.86 11.02
5.17 14.31
1.49 2.98
5.29 15.05
Table 2: FP and FN error reports submitted by different categories
of users: “# Reports” means the number of reports, “Avg”. is the