q. The public key, y, is the value gx ∈ Gq.
∗
To encrypt a message m ∈ Gq, one chooses γ R← Z
∗
q
and evaluates the ordered pair (gγ, myγ). Decryption of
an ElGamal ciphertext (G, M) is computed by the expres-
sion M · G
−x. One can re-encrypt a ciphertext (G, M) by
choosing δ R← Z
∗
q and evaluating (Ggδ, Myδ). The de-
cryption method remains the same. Decryption is a homo-
morphism from the pairwise multiplicative group of cipher-
texts to the multiplicative group of plaintexts: Let (G, M)
and (F, N) be ciphertexts for m and n respectively. Then
(G × F, M × N) is a ciphertext for m × n. We will make
use of the following protocols:
Proof of knowledge of discrete logarithm (KDL) [8]
A prover P proves to an honest veriﬁer V the knowledge of
the discrete logarithm base g for a ∈ Z
∗
q without leaking out
any information about logg a. We let KDLg {a} denote an
instance of this protocol. The computational cost of the pro-
tocol KDLg {a} given in [8] is one modular exponentiation
for P and two modular exponentiations for V.
Proof of correct re-encryption (PCR) [9]
A prover P proves to an honest veriﬁer V that an ElGa-
(cid:3)) is a re-encryption of a ciphertext
(cid:3)
mal ciphertext (G
, M
(G, M) without leaking any other information. We let
(cid:3))} denote an instance of this pro-
PCR {(G, M) (cid:2) (G
(cid:3)
(cid:3)
tocol. The proof consists of showing that logg(G
/G) =
logy(M
/M) = r, without leaking any information about
the value r. The computational cost of this protocol is 2
modular exponentiations for P and 4 modular exponentia-
tions for V.
Discrete logarithm proof systems [5, 10, 33]
An efﬁcient zero-knowledge proof can be constructed for
any monotone boolean formula whose atoms consist of the
protocols KDL or P CR. This paper uses a single boolean
formula, whose computational cost for P and V will be an-
alyzed in the section where it is presented (Section 7).
, M
(cid:3)
3.3 Re-encryption Mix Networks
An ElGamal mix is a list of ciphertexts followed by a
permuted list of the re-encrypted ciphertexts. Let L =
(cid:3)
(cid:3)
(cid:3) = [(G
j)] be two lists of ElGamal
[(Gj, Mj)] and L
j, M
(cid:3)
consists of the elements of
ciphertexts. To indicate that L
L re-encrypted and permuted according to a permutation π,
we use the following notation:
(cid:3) = MIX π(L).
L
Veriﬁable mixing. Veriﬁable mixing protocols [17, 20,
(cid:3) =
27] allow a mix server to prove to a veriﬁer that L
(cid:3) =
MIX π(L). More precisely, let L = [(Gj, Mj)] and L
(cid:3)
(cid:3)
j)] be two lists of ElGamal encrypted messages. A
[(G
j, M
veriﬁable mixing protocol allows the mix server to prove the
existence of a permutation π and a sequence of exponents γj
(cid:3)
(cid:3)
such that (G
j) = (Gπ(j)gγj , Mπ(j)yγj ), without leak-
j, M
ing any information about π or the values γj. Given n input
ciphertexts, the computational cost of the most efﬁcient ver-
iﬁable mixing protocol [20] is 6n modular exponentiations
for the prover (the mix server) and 6n modular exponentia-
tions for the veriﬁer. We denote a proof of veriﬁable mixing
PVM {L (cid:2) L
(cid:3)} .
Equivalent mixing. We say that two mixes are equiva-
lent when they share the same permutation. More precisely,
(cid:3)
(cid:3)
0 = MIX π0(L0) and L
1 = MIX π1(L1). These two
let L
mixes are equivalent if π0 = π1. To prove that two ElGamal
ciphertext mixes are equivalent, we run a veriﬁable mix pro-
tocol on the pairwise product of ciphertexts of both mixes
(see [19] for detail). The computational cost of a proof of
equivalent mixing is thus equal to the cost of a veriﬁable
mixing protocol. We denote a proof of equivalent mixing
1) } .
PEM { (L0 (cid:2) L
(cid:3)
(cid:3)
0) = (L1 (cid:2) L
4 Overview
In this section, we give a broad overview of our approach
to deterring voluntary trace disclosure in mix networks. A
regular mix network applies to a set of n inputs a permuta-
tion chosen uniformly at random from the set T of permuta-
tions on n elements. Our trace-deterring mixnet, in contrast,
deﬁnes two disjoint sets of permutations T0 and T1. A mix
server applies a permutation chosen either from T0 or from
T1. The choice is dictated by the bits of a secret key held by
the server (we call this secret key the collateral secret key
of the server).
More precisely, let n > 0 denote the number of inputs in
a mixing batch and let T denote the set of permutations on
n elements. A trace-deterring partition, or TD-partition, is
a partition of T into three disjoint subsets: T0, T1 and T∗.
Let bi denote a bit of the server’s collateral secret key. If
bi = 0, the server applies to the batch a permutation cho-
sen (uniformly at random) from the set T0. If bi = 1, the
server applies to the batch a permutation chosen (uniformly
at random) from the set T1. The set T∗ consists of left-over
permutations that are never used by the mix server.
Deﬁnition 1. (Trace-deterring partition) Let T denote
the set of permutations on n elements, and let (T0,T1,T∗)
be a partition of T into three disjoint subsets. We say that
(T0,T1,T∗) is a trace deterring partition, or TD-partition, if
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:52:05 UTC from IEEE Xplore.  Restrictions apply. 
for all π0 ∈ T0 and all π1 ∈ T1 and all subsets M ⊂ Zn
such that 0 < |M| < n, we have π0(M) (cid:5)= π1(M).
This deﬁnition states that the knowledge of any (strict,
non-empty) subset of the inputs, and the image of this sub-
set by a permutation π chosen from T0 ∪T1 reveals whether
π ∈ T0 or π ∈ T1. This property of TD-partitions de-
ters a dishonest mix server from revealing to a third party
any information that would help decrease the size of the
anonymity set of a message. Indeed, if the server reveals
any correspondence between a subset of its inputs and a
subset of its outputs, the correspondence also reveals one
bit of the server’s collateral secret key. This bit is incrim-
inating evidence of the server’s breach of privacy (a single
bit is very weak evidence, but as we shall see, a complete
trace exposes the complete collateral key of a server).
Deﬁnition 1 is the strongest possible, in the sense that
it prevents the mix server from revealing the image of any
non-empty strict subset of the inputs. The server can not
reveal the image of single input. Nor can it reveal what pair
of outputs (as a set) corresponds to a pair of inputs, nor for
that matter the image (as a set) of any strict subset of the
inputs. We feel this strong deﬁnition is justiﬁed. Since it
is difﬁcult to anticipate the privacy requirements of speciﬁc
applications, privacy primitives should be designed with the
most conservative assumptions possible.
Example. One example of a TD-partition for n = 3
is T0 = {[1, 2, 3]}, T1 = {[2, 3, 1], [3, 1, 2]} and
T∗ = {[1, 3, 2], [2, 1, 3], [3, 2, 1]}.
It is easy to verify
that knowledge of any (strict, non-empty) subset of the
inputs, and the image of that subset by a permutation
chosen from T0 ∪ T1 reveals whether the permutation
belongs to T0 or T1. In this toy example, the sets T0 and T1
contain only “shift” permutations (like fragile mixing [31]),
but in the next section we will deﬁne TD-partitions for
which |T0 ∪ T1| = (n − 1)!.
In a nutshell, our approach is to let a mix perform mul-
tiple rounds of mixings on an input batch. In each round of
mixing, a random permutation is chosen from either T0 or
T1 according to one bit of the server’s collateral secret key.
Any trace between inputs and outputs discloses whether the
permutation is in T0 or T1 and thus also discloses the corre-
sponding bit of the secret collateral key.
Figure 1 illustrates the idea. In the ﬁgure, a collateral
secret key string 10 . . . 1 is committed through a Key com-
mitment scheme (Section 6). The TD-partition in this ex-
ample deﬁnes T0 as the identity permutation singleton and
T1 as the set of circular permutations (Section 5). The cor-
respondence between the committed bits of the collateral
key and the permutations applied in the mixing rounds is
proved in zero-knowledge. If the mix traces any subset of
the input messages, the input-to-output correspondence re-
veals whether the permutation applied is the identity or a
circular permutation — thus also revealing whether the cor-
responding bit of the collateral key is 0 or 1.
Secret key
Key commitment
Trace-Deterring
Mixing rounds
Key-exposing
trace
1                    0       …… 1
1
a (cid:32)
rhg
3
rhg
a (cid:32)
2
1
a (cid:32)
1
0
2
1
rhg
3
……
……
committed during 
the system setup
enforced through
TDM protocol
Figure 1. Trace-deterring protocol.
TD partition (Section 5). This paper deﬁnes a speciﬁc TD-
partition that satisﬁes two additional properties required for
our mix network application:
1. Privacy. At least one of the sets T0 or T1 must be suf-
ﬁciently large to ensure that a mix network that selects
permutations only from T0 ∪ T1 offers good privacy.
2. Correctness. Let bi denote one bit of the collateral se-
cret key of a mix server. We need an efﬁcient proto-
col that allows a mix server to prove that it applied a
permutation selected from T0 if bi = 0, or from T1 if
bi = 1.
Collateral key commitment (Section 6). The collateral
key commitment (KC) protocol is run only once in a setup
stage to commit every mix server to its collateral secret key.
A mix server executes a zero-knowledge protocol with an
honest veriﬁer to prove that it has correctly committed to its
collateral key.
Trace-deterring mixing round (Section 7). One round of
trace deterring mixing (TDM) binds one bit of a server’s
collateral key to one permutation applied to a batch of mes-
sages. The TDM mixing protocol does not consume any
keying information and can be run a polynomial number of
times for (KC). In TDM, a mix server takes as input a com-
mitment to a bit b of its collateral key and a list of ElGamal
ciphertexts. The server re-encrypts and mixes this list ac-
cording to a permutation chosen from the set T0 if b = 0 or
from the set T1 if b = 1. Finally, the server outputs the per-
muted list and proves to an honest veriﬁer that it executed
the TDM protocol correctly.
Trace-deterring mix network (Section 8). Since there is
only one bit of collateral key associated with each round of
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:52:05 UTC from IEEE Xplore.  Restrictions apply. 
mixing, each server needs to perform a sequence of trace-
deterring permutations in order to represent meaningful col-
lateral keys. If the server performs these transformations on
the same batch consecutively, it can reveal only an end-to-
end correspondence of a message to a third party. This can
be done without any communication with other mix servers.
We remove this option by interleaving the sequential mixing
of independent servers. The deﬁnition of a TD-partition en-
sures that any complete trace of the input to output reveals
the collateral keys.
5 Trace-Deterring Partition
Throughout this section and the rest of this paper, we let
n denote the number of inputs submitted to the mix server.
We let T denote the set of permutations on n elements. It
is well-known that |T | = n!. We let Id ∈ T denote the
identity permutation on n elements.
In what follows, we deﬁne a speciﬁc TD-partition that
we will serve as the building block of our TD-mixing pro-
tocol. Our TD-partition is based on circular permutations,
which are deﬁned as follows:
Deﬁnition 2. (Circular permutation) Let π ∈ T be a per-
mutation on n elements. We say that π is a circular permu-
tation if its cyclic decomposition contains a single cycle of
length n. In other words, a circular permutation is a permu-
tation for which the successive images of any element form
a cycle of length exactly n.
Throughout the rest of this paper, we let C ⊂ T denote
the set of circular permutations on n elements. The number
of circular permutation is |C| = (n − 1)!. Circular per-
mutations should not be confused with “shift” permutations
(there are only n shift permutations on n elements). For ex-
ample, with n = 4, the permutation π deﬁned by π(1) = 3,
π(2) = 4, π(3) = 2 and π(4) = 1 is a circular permutation
(its cyclic decomposition contains a single cycle (3, 4, 2, 1)
of length 4), but it is not a shift permutation.
Proposition 1. Let T∗ = T − (C ∪ Id) denote permuta-
tions that are neither circular nor the identity. The partition
({Id},C,T∗) is trace-deterring.
Proof. Let π ∈ T1 and let M be a subset of inputs elements
such that 0 < |M| < n. We must show that Id(M) (cid:5)=
π(M). We have Id(M) = M. We also have π(M) (cid:5)=
M, for otherwise π would have a cycle of length strictly
less than n, contradicting the assumption that π is a circular
permutation. It follows that Id(M) (cid:5)= π(M).
Proposition 2. We deﬁne the size of a TD-partition
(T0,T1,T∗) as max(|T0|,|T1|). The partition ({Id},C,T∗)
is of size (n − 1)!
The proof of this proposition is immediate: it is a well-
known fact that |C| = (n − 1)!. The partition ({Id},C,T∗)
is of maximal size in the following sense: any TD-partition
(T0,T1,T∗) such that T0 = {Id} must satisfy T1 ⊆ C (the
proof is in the appendix).