# Java安全之Thymeleaf SSTI分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## About Thymeleaf
Thymeleaf是SpringBoot中的一个模版引擎，个人认为有点类似于Python中的Jinja2，负责渲染前端页面。
之前写JavaWeb和SSM的时候，前端页面可能会用JSP写，但是因为之前项目都是war包部署，而SpringBoot都是jar包且内嵌tomcat，所以是不支持解析jsp文件的。但是如果是编写纯静态的html就很不方便，那么这时候就需要一个模版引擎类似于Jinja2可以通过表达式帮我们把动态的变量渲染到前端页面，我们只需要写一个template即可。这也就是SpringBoot为什么推荐要使用Thymeleaf处理前端页面了。
## 基础知识
###  片段表达式
Thymeleaf中的表达式有好几种
  * 变量表达式： `${...}`
  * 选择变量表达式： `*{...}`
  * 消息表达： `#{...}`
  * 链接 URL 表达式： `@{...}`
  * 片段表达式： `~{...}`
而这次遇到的是片段表达式(FragmentExpression)： `~{...}`，片段表达式可以用于引用公共的目标片段比如footer或者header
比如在`/WEB-INF/templates/footer.html`定义一个片段，名为copy。``
          &copy; 2011 The Good Thymes Virtual Grocery
在另一template中引用该片段``
      ...
片段表达式语法：
  1. **~{templatename::selector}** ，会在`/WEB-INF/templates/`目录下寻找名为`templatename`的模版中定义的`fragment`，如上面的`~{footer :: copy}`
  2. **~{templatename}** ，引用整个`templatename`模版文件作为`fragment`
  3. **~{::selector} 或 ~{this::selector}** ，引用来自同一模版文件名为`selector`的`fragmnt`
其中`selector`可以是通过`th:fragment`定义的片段，也可以是类选择器、ID选择器等。
当`~{}`片段表达式中出现`::`，则`::`后需要有值，也就是`selector`。
###  预处理
语法：`__${expression}__`
官方文档对其的解释：
> 除了所有这些用于表达式处理的功能外，Thymeleaf 还具有 _预处理_ 表达式的功能。
>
> **预处理是在正常表达式之前完成的表达式的执行** ，允许修改最终将执行的表达式。
>
> 预处理的表达式与普通表达式完全一样，但被双下划线符号（如`__${expression}__`）包围。
个人感觉这是出现SSTI最关键的一个地方，预处理也可以解析执行表达式，也就是说找到一个可以控制预处理表达式的地方，让其解析执行我们的payload即可达到任意代码执行
## 调试分析
其实大部分都是MVC对request的处理流程，在MVC中是DispatcherServlet拦截请求并分发到Handler处理，那下断点直接定位到DispatcherServlet#doDispatch方法（所有的request和response都会经过该方法）。
首先获取到了Handler，之后进入doDispatch方法的实现，这里重点注意下下面3个方法
> 1、ha.handle() ，获取ModelAndView也就是Controller中的return值
>
>
> 2、applyDefaultViewName()，对当前ModelAndView做判断，如果为null则进入defalutViewName部分处理，将URI
> path作为mav的值
>
> 3、processDispatchResult()，处理视图并解析执行表达式以及抛出异常回显部分处理
###  ha.handle
首先跟进`mv = ha.handle(processedRequest, response, mappedHandler.getHandler());`
调用了/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.class#handleInternal，继续跟进
跳到invokeHandlerMethod方法。这里就是使用Handler处理request并获取ModelAndView
在/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter直接跟进到invokeAndHandle方法
这里通过invokeForRequest函数，根据用户输入的url，调用相关的controller，并将其返回值`returnValue`，作为待查找的模板文件名，通过Thymeleaf模板引擎去查找，并返回给用户。
重点是`returnValue`值是否为`null`，根据Controller写法不同会导致`returnValue`的值存在`null`和`非null`的情况。
上面Controller中return的字符串并根据前缀和后缀拼接起来，在templates目录下寻找模版文件
例如下面的Thymeleaf默认配置类文件+Controller，Thymeleaf就会去找`/templates/index.html`
默认配置类文件org/springframework/boot/autoconfigure/thymeleaf/ThymeleafProperties.java
    @ConfigurationProperties(prefix = "spring.thymeleaf")
    public class ThymeleafProperties {
        private static final Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;
        public static final String DEFAULT_PREFIX = "classpath:/templates/";
        public static final String DEFAULT_SUFFIX = ".html";
        /**
         * Whether to check that the template exists before rendering it.
         */
        private boolean checkTemplate = true;
        /**
         * Whether to check that the templates location exists.
         */
        private boolean checkTemplateLocation = true;
        /**
         * Prefix that gets prepended to view names when building a URL.
         */
        private String prefix = DEFAULT_PREFIX;
        /**
         * Suffix that gets appended to view names when building a URL.
         */
        private String suffix = DEFAULT_SUFFIX;
        /**
         * Template mode to be applied to templates. See also Thymeleaf's TemplateMode enum.
         */
        private String mode = "HTML";
        /**
         * Template files encoding.
         */
        private Charset encoding = DEFAULT_ENCODING;
Controller
    @Controller
    public class IndexController {
        @RequestMapping("/index")
            public String test1(Model model){
                model.addAttribute("msg","Hello,Thymeleaf");
                return "index";
        }
    }
上面这种是returnValue不为null的情况。那如果Controller如下写的话，returnValue的值就会为null
    @GetMapping("/doc/{document}")
    public void getDocument(@PathVariable String document) {
        log.info("Retrieving " + document);
        //returns void, so view name is taken from URI
    }
###  applyDefaultViewName
如果ModelAndView值不为null则什么也不做，否则如果`defaultViewName`存在值则会给ModelAndView赋值为defaultViewName，也就是将URI
path作为视图名称（具体逻辑会在后面讲）