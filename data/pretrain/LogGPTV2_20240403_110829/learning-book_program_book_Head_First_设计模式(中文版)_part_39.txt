R
Q
T
B
N
E
U
G
Z
PDG
你现在的位置
313
---
## Page 350
PDG
---
## Page 351
9送代器与组合模式
管理良好的集合
当然，我把集合都好
好地封装起来了！
有许多种方法可以把对象堆起来成为一个集合（collec-
tion）。你可以把它们放进数组、堆栈、列表或者是散列表（Hashtable）中，
这是你的自由。每一种都有它自己的优点和适合的使用时机，但总有一个时候，你
的客户想要遍历这些对象，而当他这么做时，你打算让客户看到你的实现吗？我们
当然希望最好不要！这太不专业了。没关系，不要为你的工作担心，你将在本章中
学习如何能让客户遍历你的对象而又无法窥视你存储对象的方式：也将学习如何创
建一些对象超集合（supercollection），能够一口气就跳过某些让人望而生畏的数
据结构。你还将学到一些关于对象职责的知识。
这是新的一章
315
---
## Page 352
大新闻
爆炸性新闻：对象村餐厅和对象村煎
饼屋合并了
真是个好消息！现在我们可以在同一个地方，享用煎饼屋美味的煎饼早餐，
和好吃的餐厅午餐了。但是，好像有一点小麻烦
但是我们无法同意菜单的实现。
他们想用我的煎饼屋菜
那个小丑使用ArrayList记录他的菜单
单当做早餐的菜单，并用餐
项，而我用的是数组。我们两个都不
厅的菜单当做午餐的菜单。我
愿意改变我们的实现毕竞我们
们大家都同意了达样实现菜单
有太多代码依籍于它们了。
O
Mel
PDG
316
第9章
---
## Page 353
选代器与组合模式
检查菜单项
对象村餐厅
至少Lou和Mel都同意实现Menultem。
素食BLT
（煎）培根、生菜&西红
让我们检查每份菜单上的项目和实现。
用铁皮面包微
2.99
BLT
对象村煎饼屋
培根、生菜&西红柿
例汤
一碗例汤，配土豆沙拉
K&BS薄煎饼早餐
热狗
薄煎饼、清蛋和吐司
2.99
餐厅的莱单有许多午餐项目.而整
热狗，酸菜，上盖芝士
薄煎饼早餐例餐
饼屋的莱单则是罕馨项日。每个莱
清蒸时蔬加糙米
薄饼带煎蛋，香肠
单项都有名称、叙述和价格。
请燕的夜菜配糙米
蓝莓薄煎饼
2.99
新鲜董莓和蓝莓糖浆微成的薄煎饼
松饼
3.49
松饼，可以选择蓝莓或草幕
public class MenuItem (
3.59
String name;
String description;
boolean vegetarian;
double price:
public MenuItem (String name,
String description,
boolean vegetarian,
莱单项包含了名称、叙述、是否为素舍的标志，
double price)
还有价格。将这些值传入构造器来初始化这个
this.name = name;
莱单项。
this.description = description;
this.vegetarian = vegetarian;
this.price = price;
public String getName () (
return name;
这费setter方法让你能
够取得莱单项的各个字
众
public String getDescription() (
return description;
段。
public double getPrice(){
return price;
public boolean isVegetarian()
return vegetarian;
你现在的位置
317
---
## Page 354
两份菜单
Lou和Mel的菜单实现
我用的是ArrayList，
让我们看看Lou和Mel在吵些什么。他们都在菜
这样才可以轻易地扩
单项的存储方式上花了很多的时间和代码，也许
展菜单。
有许多其他代码依赖这些菜单项。
这是Lou的煎屋莱单实现。
public class PancakeHouseMenu {
ArrayList menuItems;
Lou使用一个AtrayList存储他的
public PancakeHouseMenu()(= MAX_ITEMS)(
System.err.println("Sorry, menu is full!
Can't add item to menu");
}else{
menuItems [numberOfItems] = menuItem;
Mel特别坚持让他的菜单保持在一定的长度
numberOfItems = numberOfItems + 1;
之内（或许是他不希望记太多舍谱）
public MenuItem[] getMenuItems ()
setMenuJtem（）返回一个莱单项的数组。
return menuItems;
}
就和lou一样，Mel还有许多其他的莱单代码依赖于这
//
这里还有菜单的其他方法
个数组。他忙着麦莱，没空重写这么多代码！
你现在的位置
319
---
## Page 356
Java版本的女招待
有两种不同的菜单表现方式，
这会带来什么问题？
女招待是ava版的
想了解为什么有两种不同的菜单表现方式会让事情变得复杂化，让我
们试着实现一个同时使用这两个菜单的客户代码。假设你已经被他们
两个人合组的新公司雇用，你的工作是要创建一个Java版本的女招待
（毕竞，这是对象村）。这个Java版本的女招待规格是：能应对顾客的需
要打印定制的菜单，甚至告诉你是否某个菜单项是素食的，而无需询
问厨师。这可是一大创新！
跟我们来看看这份关于女招待的规格，然后看看如何实现她
Java版本的女招待规格
Java版本的女招待：代号为“Alice
printMenu ()
-打印出菜单上的每一项
printBreakfastMenu ()
－只打印早餐项
printLunchMenu ()
－只打印午餐项
printVegetarianMenu ()
-打印所有的素食菜单项
isItemVegetarian (name)
指定项的名称，如果该项是素食的话，返回true，
否则返回false
PDG
320
第9章
---
## Page 357
选代器与组合模式
我们先从实现printMenu（方法开始：
1打印每份菜单上的所有项，必须调用PancakeHouseMenu和DinerMenu的
getMenultem()方法，来取得它们各自的菜单项。请注意，两者的返回类型是
方法看起来一样，但
不一样的。
是调用所返回的结果
PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu() ;
却是不一样的类型。
ArrayList breakfastItems = pancakeHouseMenu.getMenuItems ();
DinerMenu dinerMenu = new DinerMenu ();
军餐项是在一个
Arzaylist中，午馨项
则是在一个数组中。
②现在，想要打印PancakcHouscMenu的项，我们用循环将早餐ArrayList内的项
一列出来。想要打印DinerMenu的项目，我们用循环将数组内的项一一列出
来。
现在，我们必须宾现
for (int i = 0; i< breakfastItems.size(); i++){
两个不同的循环，个别
MenuItem menuItem = (MenuItem)breakfastItems.get (i) ;
处理这两个不同的莱
System.out.print(menuItem.getName ()+  “);
System.out.println(menuItem.getPrice() + " );
System.out.println (menuItem.getDescription ()) ;
.…处理AzzayList的猫
for (int i =0;i< lunchItems.length; i++)(
MenuItem menuItem = lunchItems[i];
System.out.print(menuItem.getName() + “) ;
处理组的炖环
System.out.println(menuItem.getPrice()+");
System.out.println (menuItem.getDescription()) ;
3实现女招待中的其他方法，做法也都和这一页的方法相类似。我们总是需要
处理两个菜单，并且用两个循环遍历这些项。如果还有第三家餐厅以不同的
实现出现，我们就需要有三个循环。
你现在的位置
321
---
## Page 358
目标是什么
harpenyourpencil
根据我们的printMenu（实现，下列哪一项为真？
A.我们是针对PancakeHouseMenu和
D.女招待需要知道每个菜单如何表达
DinerMenu的具体实现编码，而不是
内部的菜单项集合，这违反了封装。
针对接口。
E.我们有重复的代码；printMenuO方
B.女招待没有实现Java女招待API，所
法需要两个循环，来遍历两种不同
以她没有遵守标准。
的菜单。如果我们加上第三种菜单，
C.如果我们决定从DinerMenu切换
我们就需要第三个循环。
到另一种菜单，此菜单的项是用
口F.这个实现并没有基于MXML（Menu
Hashtable来存放的，我们会因此需要
XML），所以就没有办法互操作。
修改女招待中的许多代码。
下一步呢？
Mel和Lou让我们很为难。他们都不想改变自身的实现，因为意味着要重写许多代码。但
是如果他们其中一人不肯退让，我们就很难办了，我们所写出来的女招待程序将难以维
护、难以扩展。
如果我们能够找出一个方法，让他们的菜单实现一个相同的接口，该有多好！（除了他们
的getMenuItemO方法的返回类型不同之外，这两个菜单其实非常类似）。这样一来，我们
就可以最小化女招待代码中的具体引用，同时还有希望摆脱遍历这两个菜单所需的多个循
环。
听起来很棒！但要怎么做呢？
322第9章
---
## Page 359
选代器与组合模式
可以封装遍历吗？
如果你从本书中学到了一件事情，那就是封装变化的部分。很明显，在这
里发生变化的是：由不同的集合（collection）类型所造成的遍历。但是，
这能够被封装吗？让我们来看看这个想法..
1要遍历早餐项，我们需要使用ArrayList的size（）和get（）方法：
for（inti=0;i<breakfastItems.size（);i++){
MenuItem menuItem =(MenuItem)breakfastItems.get(i);
1
(get(1)
get(2)
get(3)
S
set(）让我们速历每个
get(o)
项。
Arraylist
这是一个MenuJtem的
Arraylist
②要遍历午餐项，我们需要使用数组的length字段和中括号：
数组
lunchltems[0]
for（inti=0;i<lunchItems.length;i++）{
lunchltems[1]
MenuItem menuItem =lunchItems[i];
lunchltems[2]