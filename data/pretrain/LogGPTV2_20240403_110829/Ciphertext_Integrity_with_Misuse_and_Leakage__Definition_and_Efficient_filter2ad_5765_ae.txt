DTE which encrypts ℓ-block messages provides (𝑞, 𝑡, 𝜀)-CIML
security in the unbounded leakage model as long as 𝑡 ≤ 𝑡′ −
(𝑞 + 1)(𝑡H + (2ℓ + 1)𝑡F) where 𝑡H and 𝑡F are the time needed
to evaluate H and F, and we have
𝜀 ≤ 𝜀F⋆ + 𝜀𝑐𝑟 + 2𝑞 · 𝜀𝑝𝑟 + (𝑞 + 1) · 2
−𝑛.
An interesting observation about this statement is that it
shows that the pseudorandomness of F has no impact on the
success probability of the CIML adversary.
The proof of Theorem 5.3 is given in Appendix A.
6 DIGEST, COMMIT AND ENCRYPT
The previous construction reaches different types of guaran-
tees with and without leakages (namely, MR and CIML). As
a (more balanced) alternative, we now present a construction
that drops the requirement of MR (without leakage), and
only focuses on CIML security. This construction has the
advantage of only requiring one execution of the leak-free
function, but at the expense of relying on the random oracle
model in its proof of CIML security (yet not for its LR CPA
security, as will be shown in Section 7).
We acknowledge that the use of a random oracle when
analyzing implementation weaknesses is questionable, since
the random oracle is an abstraction, and therefore does not
offer a simple model for physical leakages.
In order to overcome this difficulty, we assume that the
random oracle has unbounded leakages: it leaks all of its
inputs and outputs. Of course, such a leakage model would
be too strong for proving any confidentiality property of a
construction that would hash a secret value. But we show
that, even in a such a strong leakage model, CIML can be
achieved.
Besides, and as discussed in [47], the random oracle model
sometimes comes in handy in order to argue about the security
of natural constructions of which the LR seems hard to reach
in the standard model. In view of the practical interest of the
DCE construction, we therefore include a proof in this model
in our treatment and suggest the further investigation of DCE
instances as an interesting scope for further research. We note
that our proof does not make use of the programmability of
the random oracle, which is a common source of gaps in the
Conference’17, July 2017, Washington, DC, USA
Figure 5: DCE leakage-resilient AE (part I). Part II
is identical to Fig. 3.
DCE
Enc𝑘(𝑟, 𝑚), where 𝑚 = (𝑚1, 𝑚2, . . . , 𝑚ℓ):
(∀𝑖 =
∙ h ← H(𝑟‖𝑚)
∙ 𝑘0 ← F*
𝑘(h)
∙ 𝑐0 ← F𝑘0 (𝑝𝐵) ⊕ 𝑟
∙ 𝑘𝑖 ← F𝑘𝑖−1 (𝑝𝐴), 𝑐𝑖 ← F𝑘𝑖 (𝑝𝐵) ⊕ 𝑚𝑖
1, . . . , ℓ)
∙ return 𝐶 = (h, 𝑐0, 𝑐1, 𝑐2, . . . , 𝑐ℓ)
∙ 𝑘0 ← F*
∙ 𝑟 ← F𝑘0 (𝑝𝐵) ⊕ 𝑐0
∙ 𝑘𝑖 ← F𝑘𝑖−1 (𝑝𝐴), 𝑚𝑖 ← F𝑘𝑖 (𝑝𝐵) ⊕ 𝑐𝑖
(∀𝑖 =
1, . . . , ℓ)
∙ if h = H(𝑟‖𝑚) return 𝑚 = (𝑚1, ..., 𝑚ℓ), else return
⊥.
𝑘(h)
Dec𝑘(𝐶), where 𝐶 = (h, 𝑐0, 𝑐1, 𝑐2, . . . , 𝑐ℓ):
Figure 6: The DCE scheme.
soundness of schemes that are proven to be secure in this
model but are insecure for any instantiation of the random
oracle.
6.1 Specifications
The authentication part of the DCE scheme is outlined in
Figure 5 which is then plugged to the encrypting part of
Figure 3. The full specification is available in Figure 6. There,
H is a hash function and 𝑝𝐴 and 𝑝𝐵 are two public distinct
constants in ℬ = {0, 1}𝑛. The key 𝑘 is picked randomly from
𝒦, as usual.
6.2 Security analysis
Theorem 6.1. Let H : {0, 1}𝑛 × {0, 1}⋆ ↦−→ {0, 1}𝑛 be
modeled as a random oracle. Let F* : {0, 1}𝑛 × {0, 1}𝑛 ↦−→
{0, 1}𝑛 be (𝑞 + 1, 𝑡′, 𝜀F* )-pseudorandom. Then, DCE provides
(𝑞, 𝑡, 𝜀)-CIML security in the unbounded leakage model, where
𝑡 ≤ 𝑡′ − (𝑞 + 1)(𝑡H + (2ℓ + 1)𝑡F), ℓ is the number of blocks
of the encrypted messages, 𝑡H and 𝑡F are the time needed to
evaluate H and F, and we have
𝜀 ≤ 𝜀F* + 4(𝑞 + 1)2/2𝑛 + (𝑞 + 1)/2𝑛.
Francesco Berti, Fran¸cois Koeune, Olivier Pereira,
Thomas Peters, Fran¸cois-Xavier Standaert.
The proof of Theorem 6.1 is given in Appendix B. The CPA
security of DCE without leakage (or misuse) in the random
oracle model is immediate.
7 LEAKAGE-RESILIENT CPA
SECURITY
The ciphertext integrity properties discussed in the previous
sections do not imply anything about the confidentiality of
the messages that are encrypted with DTE and DCE.
This section shows the leakage-resilient CPA security of
these schemes, which is measured by the probability that
an adversary distinguishes between playing the PrivKlmcpa,0
𝒜L,AE
and PrivKlmcpa,1
𝒜L,AE games, defined in Figure 7 and borrowed
from PSV [37]. This is essentially the traditional CPA game,
with the addition that the challenger provides leakages for
any computation it performs, including the test query at
Step 3), and that the adversary can access a leakage oracle L
that gives him leakages from the attacked circuit on chosen
inputs (which makes it possible to run matching attacks, as
described in Section 4). This oracle was formally omitted in
the previous sections, as it was meaningless in the unbounded
leakage model.
We recall that the lmcpa superscript in the notation PrivKlmcpa,0
𝒜L,AE
stands for multiple messages and blocks leakage-resilient CPA
security, which relates to the remark in introduction that
our following proofs only guarantee that the security of our
constructions for multiple messages and blocks reduces to
their security for one block, and then depends on what can
be guaranteed for this single block. As discussed in [37], this
is the best that can be achieved given the impossibility of
leakage-resilient CPA security with negligible advantage (due
the the fact that even a single bit of plaintext leakage trivially
breaks the semantic security game).
𝒜L,AE , with AE = (𝒦, Enc, Dec), is the output of the
PrivKlmcpa,b
following experiment:
(1) Select 𝑘 $← 𝒦
(2) 𝒜L gets access to a leaking encryption oracle that,
when queried on a message 𝑚 of arbitrary block
length, returns Enc𝑘(𝑚) together with the leakage
resulting from the encryption process.
(3) 𝒜L submits two messages 𝑚0 and 𝑚1 of identical
block length, to which he is replied with Enc𝑘(𝑚𝑏)
and the corresponding leakage.
(4) 𝒜L can keep accessing the leaking encryption oracle.
(5) 𝒜L outputs a bit 𝑏′.
Figure 7: The PrivKlmcpa,b
𝒜L,AE game
The PrivKleav,b
𝒜L,AE game [37], modeling leakage-resilient eaves-
dropper security, is defined just in the same way, except that
the encryption oracles from steps 2 and 4 disappear.
Ciphertext Integrity with Misuse and Leakage
Conference’17, July 2017, Washington, DC, USA
Definition 7.1. An AE scheme AE = (𝒦, Enc, Dec) with
leakage function L is (𝑞, 𝑡, 𝜖) lmcpa-secure (resp. leav-secure)
if, for every (𝑞, 𝑡)-bounded adversary 𝒜L, the lmcpa (resp.
leav) advantage |PrivKlmcpa,0
𝒜L,AE−
𝒜L,AE|) is bounded by 𝜖.
PrivKleav,1
𝒜L,AE | (resp. |PrivKleav,0
𝒜L,AE −PrivKlmcpa,1
7.1 Background: LMCPA security of
PSV-ENC
Observing that the encryption part of all our schemes essen-
tially follows the PSV-ENC scheme, we can hope to import
the results of the previous analyzes of that scheme.
The security of an implementation of the PSV-ENC scheme
relies on the assumption that the block cipher implementation
that it uses has 2-simulatable leakages.
The notion of simulatable leakages is based on the 𝑞-sim-
game below, from which 𝑞-simulatable leakages are defined.
This game essentially measures the capability of a simulator
to produce leakages that look consistent with given inputs
and outputs of a block cipher, without knowing the key used
in the computation.
Game 𝑞-sim(𝒜, F, L,𝒮, 𝑏) [43, Section 2.1].
The challenger selects two random keys 𝑘, 𝑘* $← 𝒦. The
output of the game is a bit 𝑏′ computed by 𝒜L based on the
challenger responses to a total of at most 𝑞 adversarial
queries of the following type:
Query
Enc(𝑥)
and one query of the following type:
Query
Gen(𝑧, 𝑥)
Response if 𝑏 = 0 Response if 𝑏 = 1
F𝑘(𝑥), L(𝑘, 𝑥)
Response if 𝑏 = 0 Response if 𝑏 = 1
𝒮 L(𝑧, 𝑥, 𝑘)
F𝑘(𝑥), 𝒮 L(𝑘*, 𝑥, F𝑘(𝑥))
𝒮 L(𝑧, 𝑥, 𝑘*)
Definition 7.2. [𝑞-simulatable leakages [43, Def. 1]] Let F be
a PRF having leakage function L. Then F has (𝑞𝒮 , 𝑡𝒮 , 𝑞𝒜, 𝑡𝒜, 𝜖𝑞-𝑠𝑖𝑚)
𝑞-simulatable leakages if there is a (𝑞𝒮 , 𝑡𝒮 )-bounded simulator
𝒮 L such that, for every (𝑞𝒜, 𝑡𝒜)-bounded adversary 𝒜L, we
have
| Pr[𝑞-sim(𝒜, F, L,𝒮 L, 1) = 1]−
Pr[𝑞-sim(𝒜, F, L,𝒮 L, 0) = 1]| ≤ 𝜖𝑞-𝑠𝑖𝑚.
Based on this definition, the eavesdropper security of PSV-
ENC can be summarized as follows.
Theorem 7.3 ([37], Thm 3.). Let F be a (𝑞, 𝑡, 𝜖F)-PRF
whose implementation has running time 𝑡F and a leakage
function LF with (𝑞𝒮 , 𝑡𝒮 , 𝑞, 𝑡, 𝜖2-𝑠𝑖𝑚) 2-simulatable leakages.
The advantage of every (𝑞− 𝑞𝑟, 𝑡− 𝑡𝑟)-bounded 𝒜LF playing
the PrivKleav,b
PSV−ENC = ℓ(Adv𝑠 +
4(𝜖F + 𝜖2-𝑠𝑖𝑚)) where Adv𝑠 is a bound on the eavesdropper
advantage of a (𝑞 − 𝑞𝑟′ , 𝑡 − 𝑡𝑟′ )-bounded adversary trying
to distinguish the encryptions of two single-block messages
encrypted with the PSV-ENC scheme, 𝑞𝑟, 𝑞𝑟′ are 𝒪(ℓ𝑞𝒮 ) and
𝑡𝑟, 𝑡𝑟′ are 𝒪(ℓ(𝑡𝒮 + 𝑡F)).
PSV−ENC game is bounded by 𝜖eav
This result relates the eavesdropper security of the PSV-
ENC scheme to the security that is offered in front of an
adversary who can only get a single encryption of a single
block messages, which is expected to be simpler to evaluate
(see discussion in [37]). Note that, in our analysis below, we
will not need to use any result about the CPA security of
PSV-ENC.
7.2 Bounding hash function leakages
The security of the PSV-ENC scheme is going to be helpful
for the encryption part of the DTE and DCE modes, but the
first parts of our modes also include the evaluation of a hash
function running on the message to be encrypted, which may
in turn leak information about the message and help win the
PrivKlmcpa,b
𝒜L,AE game: if the implementation of the hash function
just leaks its input in full, we can obviously not hope for
any confidentiality. We therefore turn to the definition of our
security assumption about the hash function implementation,
before analyzing DCE and DTE.
Concretely, we need a bound on the distinguishing proba-
bility of an adversary who would see the leakages resulting
from hashing something containing a message 𝑚0 and those
resulting from hashing something containing 𝑚1. Simply as-
suming the indistinguishability of leakages on adversarially
chosen 𝑚0 and 𝑚1 would be way too strong from a physical
point-of-view: if an adversary knows 𝑚0 and 𝑚1, he can ob-
tain leakages computed on these two values directly from the
hash function implementation, and compare those leakages
with the leakage returned by the challenger, in a leakage
matching attack.
However, our adversary faces a more difficult problem,
since he is not able to predict what message is hashed when
he gets leakages to distinguish. More precisely, the adversary
may be able to choose 2 messages 𝑚0 and 𝑚1, but must
then decide the value of 𝑏 when he gets H(𝑟‖𝑚𝑏), LH(𝑟‖𝑚𝑏)
in return, where 𝑟 is a fresh random value and LH(𝑥) is the
leakage resulting from evaluating the hash function on 𝑥.
Since DTE and DCE encrypt (𝑟‖𝑚𝑏) with PSV-ENC, 𝑟 is
unknown to the adversary, and he cannot feed his device
with (𝑟‖𝑚0) or (𝑟‖𝑚1) in order to match the leakages, and
is bound to run a more sophisticated SPA attack due to the
partially unknown state.
The DCE and DTE schemes also hash (𝑟‖𝑚𝑏) and not
(𝑚𝑏‖𝑟). While equivalent in theory, this makes sure that,
when using an iterating hash function, the block containing
the randomness 𝑟 is processed before the blocks containing the