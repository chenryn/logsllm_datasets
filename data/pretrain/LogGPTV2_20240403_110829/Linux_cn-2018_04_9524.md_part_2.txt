通常，加密消息也被发送者自己的 PGP 密钥签名。无论何时使用加密消息，这应当是默认的，因为没有认证的加密没有很大意义（除非你是一个告密者或秘密代理并且需要可行的可否认性）
#### 理解密钥身份
每个 PGP 密钥必须有一个或多个与之关联的身份。通常，“ 身份   Identity ”指的是以下格式中的人物全名和邮件地址：
```
Alice Engineer 
```
有时也会在括号中包含说明，来告诉终端用户关于该特定密钥的更多信息：
```
Bob Designer (obsolete 1024-bit key) 
```
由于人们可以和多个职业和个人实体相关联，因此在同一密钥上可以有多个身份：
```
Alice Engineer 
Alice Engineer 
Alice Engineer 
```
当使用多个身份时，其中之一将被标记为“ primary identity   主要身份 ”来让检索更简单。
#### 理解密钥有效性
为了能使用其他人的公钥来加密或验证，你需要确保它确实属于正确的人（Alice）而不属于冒牌的（Eve）。在 PGP 中，这被称为“密钥有效性”：
* 有效性： 完全   full  -- 意味着非常确认该密钥属于 Alice
* 有效性： 临界   marginal  -- 意味着大致确认该密钥属于 Alice
* 有效性： 未知   unknown  -- 意味着不确认该密钥是否属于 Alice
#### Web of Trust （WOT） 与 Trust on First Use (TOFU)
PGP 使用了一种信任委托机制叫“Web of Trust”。它的核心是尝试替代 HTTPS/TLS 世界中对集中式认证机构的需求。PGP 把这个责任交给了每个用户，而不是各种软件开发商来决定谁应该是你的可信认证实体。
不幸的是，很少有人理解 Web of Trust 的是如何工作的，能使用它的人更少。它仍然是 OpenPGP 规范的一个重要方面，但 GnuPG 的近期版本（2.2 及以上）已经实现了一种替代机制叫“Trust on First Use”(TOFU)。
你可以把 TOFU 当作类似 SSH 的信任方式。使用 SSH，当你第一次连接到远程系统，它的密钥指纹会被记录和保存。如果将来密钥改变，SSH 客户端将会提醒你并拒绝连接，迫使你决定是否信任已改变的的密钥。
同样，当你第一次导入某人的 PGP 密钥，它被假定可信。如果在将来的任何时候，GnuPG 碰巧发现另一同样身份的密钥，过去导入的密钥和新密钥都将被标记为无效，并且你需要手动指出保留哪个。
#### 安装 OpenPGP 软件
首先，理解 PGP、OpenPGP、GnuPG 和 gpg 之间的不同很重要：
* PGP （“Pretty Good Privacy”） 是最初商业软件的名字
* OpenPGP 是与最初 PGP 工具兼容的 IETF 标准
* GnuPG （“Gnu Privacy Guard”）是实现了 OpenPGP 标准的自由软件
* GnuPG 的命令行工具称为 “gpg”
今天，“PGP”这个词几乎被普遍用来表示开放的 OpenPGP 标准，而不是最初的商业软件，因此“PGP”和“OpenPGP”是可以互换的。“GnuPG”和“pgp”这两个词应该仅在提及工具时使用，而不用于它们产生的输出或它们实现的 OpenPGP 功能。举例：
* PGP（而非 GnuPG 或 GPG）密钥
* PGP（而非 GnuPG 或 GPG）签名
* PGP（而非 GnuPG 或 GPG）密钥服务器
理解这一点应该可以保护你免受来自你遇到的其他 PGP 用户“实际上”不可避免的迂腐。
##### 安装 GnuPG
如果你正在使用 Linux，你应该已经安装过了 GnuPG。在 Mac 上，你应该安装 [GPG-Suite](https://gpgtools.org/)，或者使用 `brew` 安装 `gnupg2`。在 Windows 上，你应该安装 [GPG4Win](https://www.gpg4win.org/)，并且为了可以工作，你可能需要调整指南中的部分命令，除非你设置了类似 Unix 的环境。对其他平台来说，你需要自行查找正确的地址来下载和安装 GnuPG。
##### GnuPG 1 vs. 2
GnuPG v.1 和 GnuPG v.2 都实现了同样的标准，但它们提供不兼容的库和命令行工具，所以许多发行版都带有了旧的版本 1 和最新的版本 2。你需要确保你总是使用 GnuPG v.2。
首先，运行：
```
$ gpg --version | head -n1
```
如果你看到 `gpg (GnuPG) 1.4.x`，说明你正使用 GnuPG v.1。尝试下 `gpg2` 命令：
```
$ gpg2 --version | head -n1
```
如果你看到 `gpg (GnuPG) 2.x.x`，说明你可以继续了。这篇指南将假设你使用 GnuPG 2.2 版本（或更新）。如果你正使用 GnuPG 的 2.0 版本，本指南中某些命令可能无效，你应该考虑安装 GnuPG 最新的 2.2 版本
##### 确保你总是使用 GnuPG v.2
如果你 `gpg` 和 `gpg2` 命令都有，你应该确保总是使用 GnuPG v.2，而不是旧的版本。你可以通过设置别名来确保这一点：
```
$ alias gpg=gpg2
```
你可以把它放在你的 `.bashrc` 中，以确保它在你使用 `gpg` 命令时总是被加载。
在本系列的第 2 部分中，我们将介绍生成和保护你的 PGP 主密钥的基本步骤。
通过 Linux 基金会和 edX 的免费[“Introduction to Linux”](https://training.linuxfoundation.org/linux-courses/system-administration-training/introduction-to-linux) 课程了解关于 Linux 的更多信息。
---
via: 
作者：[Konstantin Ryabitsev](https://www.linux.com/users/mricon) 译者：[kimii](https://github.com/kimii) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出