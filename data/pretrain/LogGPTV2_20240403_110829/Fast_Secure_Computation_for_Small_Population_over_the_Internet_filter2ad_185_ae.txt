2 ⊕b
6(cid:96)+α) ←
3(cid:96)+α) ← Com(pp3, epα
3(cid:96)+α), (cb
3(cid:96)+α, ob
4 ⊕b
9(cid:96)+α) ← Com(pp3, epα
9(cid:96)+α). Let (c, o) ← Com(pp3, H(d)). Set B =
(cid:9), where {pij}i∈[4],j∈ind(Pi3) refer to the permutation
α}α∈[12(cid:96)],b∈{0,1}, c,{pij}i∈[4],j∈ind(Pi3)
compute (cb
Com(pp3, epα
(cid:8)C,{cb
α) ← Com(pp3, epα
1 ⊕b
α
α, ob
3 ⊕b
6(cid:96)+α), (cb
6(cid:96)+α, ob
), (cb
9(cid:96)+α, ob
strings of wires corresponding to the shares known to P3.
– Pg(g ∈ [2]) sends B to P3 and c to P4.
If Cg = ∅, Pg sends the openings of the commitments
in B corresponding to {xij}i∈[4],j∈ind(Pig) i.e the input shares that it holds at end of Round 1 and
Mg = {mij}i∈[4],j∈ind(Pig) where mαβ = pαβ ⊕ xαβ. The common shares, however, are opened by
one garbler. The openings corresponding to commitment of {x13, x14, x34} are sent only by P1. The
openings corresponding to commitment of {x23, x24, x43} are sent only by P2.
– P3 locally does
◦ Add {P1, P2} to F3 if B received from P1, P2 is not identical.
◦ If C3 = F3 = ∅ (indicating no conﬂict with the garblers so far), then (a) add Pg to C3 (g ∈ [2]) when
the indices { ¯mij = pij ⊕ xij}i∈[4],j∈ind(Pi3), computed using its version of xij and pij, received
from Pg, mismatches with {mij}i∈[4],j∈ind(Pi3) received from Pg; (b) add (P1, P2) to F3 when
M1, M2 received from them is not consistent w.r.t. {m13, m14, m23, m24, m34, m43}.
◦ If C3 = F3 = ∅, then add Pg to C3 when any of the openings sent by Pg (g ∈ [2]) results to ⊥.
Otherwise, it sets X = ||i∈[4],j∈ind(Pi)Xij, where Xij contains encoded input for xij and computes
Y ← Ev(C, X) with C ∈ B.
15
Figure 5: Protocol g4PC() (contd)
– P4 locally adds {P1, P2} to F4 if c received from them do not match.
Round 3:
– If Cα (cid:54)= ∅∨Fα (cid:54)= ∅, Pα (α ∈ [4]) sends Oα = {oij}i∈[4],j∈ind(Piα) to Pβ where Pβ /∈ Cα∪Fα and (TTP, β)
to all.
– If Cg = Fg = ∅, Pg (g ∈ [2]) sends o to P3, P4.
– If C3 = F3 = ∅, P3 sends Y to P1, P2 and P4.
– If Pα (α ∈ [4]) receives Oβ from Pβ in Round 3, it uses Oβ to open its missing shares {xiα}i∈[4]\{α}.
Else compute y = f (⊕j∈ind(P1)x1j,
If one of the opening leads to ⊥, set Cα = Pβ.
⊕ind(P2)x2j,⊕ind(P3)x3j,⊕ind(P4)x4j).
– If Pg (g ∈ [2]) receives Y from P3 such that P3 /∈ Cg and (P3, P1), (P3, P2) /∈ Fg, then compute y ←
De(Y, d). If P4 receives Y as above and o from one of the Pgs, it computes y after recovering H(d) ←
Open(pp, c, o). If P1/P2/P4 receives invalid Y, they populate their respective corrupt set C with P3. If
P3 receives o, then it computes H(d) and subsequently y.
Round 4:
– If Pα computed y, it sends (y, TTP) when elected as TTP and y otherwise to all and terminates.
– If (TTP, β) is received in Round 3 and (y, TTP) is received from Pβ, a party Pα outputs y and terminates.
If only the former condition is true, then Pα identiﬁes the sender of the message (TTP, β) as corrupt.
– If Cα (cid:54)= ∅ and y is received from a party not in Cα, Pα outputs y and terminate.
Round 5: If Pα (α ∈ [4]) has not terminated yet, it sends its view Oα to every party in P \ Cα. On receiving
Oβ from some Pβ (cid:54)∈ Cα, it computes y as a TTP does and terminates.
4.3 Correctness and Security
We prove the correctness via a sequence of lemmas.
Lemma 4.4. For honest Pi, Pj, Pi /∈ Cj holds.
Proof. An honest Pj would add Pi to Cj if one of the following are true: (a) During InputCommiti if either
there is no majority among the version of (ppi, cij) received from the set of parties Pi or Pj receives an invalid
opening corresponding to commitment on input share from Pi; (b) garbler Pi sends labels inconsistent with the
message that it sent to evaluator Pj in Round 1; (c) garbler Pi’s opening of committed encoded input of GC sent
to evaluator Pj fails; (d) evaluator Pi sends an invalid Y to Pj; (e) Pi assigns Pj to be the TTP and sends Oi
comprising of invalid openings of committed shares; (f) Pj received (TTP, β) from Pi but no output is received
from Pβ in Round 4. Since none of the above can occur for honest Pi and Pj, the lemma holds.
Lemma 4.5. A pair of honest parties cannot belong to Fi of an honest Pi.
Proof. An honest Pi would add (Pj, Pk) to Fi if one of the following holds: (a) During execution of InputCommitj,
the versions of Pj’s commitment on its input shares received by Pi from Pj and Pk were inconsistent (analogous
16
condition w.r.t. InputCommitk); (b) when (Pj, Pk) are garblers, Pi = P4 and o received from Pj, Pk is not identi-
cal; (c) (Pj, Pk) are garblers, Pi = P3 and: (c.1) B received from Pj, Pk is not identical (c.2) when Fi = ∅ at the
end of of all the four executions of InputCommit but the indices received by Pi from the garblers corresponding to
the common shares held by them do not match i.e when Mj, Mk received from them is not consistent. It is easy to
verify that cases (a), (b) and (c.1) cannot occur for honest Pj, Pk. Regarding case (c.2), the argument follows from
the fact that Pj, Pk must be in agreement with respect to corrupt party’s (say Pl) input shares at the end of Round 1
itself. If not, then the version forwarded by at most one among (Pj, Pk) (say Pj) during InputCommitl can match
with the one Pi received by Pl, leading to Pi populating Fi with {Pl, Pk}. This contradicts the assumption in case
(c.2) regarding Fi = ∅ at the end of of all executions of InputCommit; completing the proof.
Lemma 4.6. The encoded output Y computed by an honest P3 corresponds to the committed inputs of all parties.
Proof. An honest P3 evaluates the GC and computes Y when both F3 and C3 are empty. This implies that the
corrupt party ‘commits’ to its input in Round 1 of its InputCommit instance (by Lemma 4.2). We can thus conclude
that the honest garbler would possess committed input shares of all parties at the end of Round 1 itself and open
the encoded inputs accordingly. A potentially corrupt garbler is forced to send the encoded inputs corresponding
to committed inputs. Because– (a) if corrupt garbler tries to open different encoded inputs for the shares known
to P3, then he is added to C3; (b) if it tries to open different encoded inputs for the shares not known to P3, then
P3 would add the pair of garblers to F3. Thus, in either case, P3 does not evaluate as at least one among F3, C3 is
non-empty.
Lemma 4.7. If the encoded output Y of a corrupt evaluator P3 is used for output computation by an honest
garbler, then it must correspond to committed inputs of all parties.
Proof. An honest garbler, say Pg releases the opening information o for H(d) and uses the encoded output Y
(such that De(Y, d) (cid:54)= ⊥) received from evaluator P3 to compute output if P3 /∈ Cg and (P3, P1), (P3, P2) /∈ Fg.
Lemma 4.2 implies that P3 did not misbehave in InputCommit3 at all and has committed a unique input in Round
1. This implies that P3 receives encoded inputs for committed shares and authenticity ensures that Y corresponds
to the committed inputs of all the parties. Note that authenticity of the garbling scheme is preserved since P3
receives only the preimage-resistant hash of the decoding information in the form H(Y0)||H(Y1) corresponding
to each output wire (enabling P3 to compute the output). Here, Y0, Y1 refer to the labels for values 0 and 1
respectively corresponding to an output wire.
Lemma 4.8. Protocol g4PC is correct.
Proof. We argue that the output y computed corresponds to the unique inputs committed by each Pi (i ∈ [4])
during InputCommiti. It follows from Lemmas 4.3, 4.1 respectively that a corrupt party is forced to commit to a
unique input and the honest parties’ inputs are established as the committed inputs with public commitments by the
end of parallel executions of InputCommit. According to the protocol, an honest party Pα computes output in one
of the following ways: (a) via decoding the encoded output Y; (b) via the Oβ received from Pβ on being elected as
TTP; (c) on receiving y from an honest party; (d) on receiving (y, TTP) from Pβ and (TTP, β) from some other
party. In case (a), irrespective of whether P3 is honest or corrupt, correctness follows from Lemma 4.6–4.7. The
strong binding property of commitment scheme implies the output computed in case (b) is correct irrespective of
whether Pβ is honest or corrupt. The correctness for case (c) follows from case (a) and the fact that the message
was received from an honest party. The last case is argued as follows. The chosen TTP, Pβ, is honest, irrespective
of whether the message (TTP, β) is received from a corrupt or an honest party. While the former follows from the
fact that a corrupt party does not have a corrupt companion to elect, the latter follows from Lemma 4.4–4.5. Now
the correctness follows in case (d) from case (b).
While the full proof of security appear in Appendix D, we provide intuition for guaranteed output delivery
and state the theorem below. If the corrupt party misbehaves in one of the InputCommit instances or while com-
municating the GC and openings on commitment of input labels (as a garbler in round 2), then an honest party
invokes TTP on identifying the corrupt or detecting a conﬂict in Round 3. All the parties get output in Round
17
4. Otherwise, if P3 is honest and gives out Y, then all the honest parties compute output by the end of Round 3
itself using hash of the decoding information sent by one of the garblers and Y. A corrupt P3 can neither receive
decoding information for his non-committed input nor convince honest parties about the corresponding Y. If Y
corresponds to its committed input but it sends it only to some honest party or none, the remaining honest parties
will receive output from the honest party who receives Y or through Oβs sent by other honest parties in Round 5.
Theorem 4.9. Assuming one-way permutations, protocol g4PC securely realizes the functionality FGOD (Fig. 11)
against a malicious adversary that corrupts at most one party.
4.4 Optimizations
The communication efﬁciency of our g4PC can be boosted similar to as described for f3PC in Section 3.2.
5 4PC with guaranteed output delivery in four rounds
In this section, we propose an efﬁcient 4-round 4-party protocol secure against one active corruption, assuming
pairwise channels. Deviating from the approach of [IKKP15, MRZ15] and our proposals for 3PC and 4PC, we
explore the setting of multiple evaluators, namely two evaluators and two garblers. With a guarantee of an honest
evaluator, this protocol achieves guaranteed output delivery at the expense of communication and computation of
two copies of the same GC.
The protocol ensures that the honest evaluator is either successful in GC evaluation or some honest party
identiﬁes a corrupt party or a pair of parties in conﬂict (assured to include the corrupt party) by the end of Round
2. In the former case, the encoded output obtained upon GC evaluation is used for output computation in Round
3 itself. In the latter case, the honest party, having identiﬁed at least one honest party, sends his possessed input
shares in Round 3. The use of replicated secret sharing (RSS) allows reconstruction of the output based on views
of two honest parties by the end of Round 3. All parties obtain output by the end of Round 4.
The single evaluator and three garblers approach seems to require a minimum of 5 rounds (when the evaluator
is corrupt) while requiring the same amount of communication. With the above high level idea, we proceed to
present our protocol. We reuse the protocol for input consistency (Fig. 3). Similar to our g4PC protocol, each
party Pi (i ∈ [4]) maintains a pair of global sets– a corrupt set Ci and a conﬂict set Fi which respectively hold
identities of the party detected to be corrupt and pairs of parties detected to be in conﬂict.
5.1 Our protocol
Without loss of generality, P1, P2 take the role of garblers and P3, P4 enact the role of evaluators in our protocol
g4PC4. We reuse most of the tricks from our 5-round protocol and leverage the presence of an honest evaluator.
Speciﬁcally, the corrupt evaluator, unlike in our 5-round protocol, cannot drag all the honest parties all the way to
Round 4 for its detection. If everything goes as per the protocol and so no honest party elects a TTP in the end
of Round 2, the honest evaluator must be able to compute the encoded output Y by the end of Round 2 and help
all to get the output in Round 3. Otherwise, all the parties get output via a TTP by Round 4. The presence of an
additional evaluator needs communicating one extra copy of the GC. We present the protocol g4PC4 in Figure 6.
5.2 Correctness and Security
The proof for correctness appear below.
Lemma 5.1. For honest Pi, Pj, Pi /∈ Cj holds.
Proof. The proof follows directly from the Lemma 4.4.
Lemma 5.2. Consider honest Pi. A pair of honest parties cannot belong to Fi.
18
Figure 6: Protocol g4PC4()
Inputs: Party Pα has xα for α ∈ [4].
Common Inputs: The circuit C(x1, x2, x3, x4) that computes f (x12⊕x13⊕x14, x21⊕x23⊕x24, x31⊕x32⊕
x34, x41 ⊕ x42 ⊕ x43) each input, their shares and output are from {0, 1}(cid:96). P3, P4 are the evaluators and
(P1, P2) are the garblers.
Output: y = C(x1, x2, x3, x4)
Primitives: G = (Gb, En, Ev, De) that is correct, private, oblivious and authentic, a NICOM (Com, Open) a
PRG G, a 3-party 1-private RSS, pre-image resistant Hash H and sub-protocol InputCommitα (Figure
3) for every Pα ∈ P.
Round 1: Round 1 of InputCommitα for every Pα ∈ P is run. In parallel,
– P1 chooses random seed s ∈R {0, 1}κ for G and sends s to P2.
– Pv (v ∈ {3, 4}) samples ppv for NICOM and sends to P1, P2.
Round 2: Round 2 of InputCommitα is run. In parallel,
– Pg(g ∈ [2]) locally computes B3 exactly the way B is computed in Protocol g4PC. It also computes B4 with
respect to pp4 in a similar way.
– Pg(g ∈ [2]) sends B3 to P3. If Cg = ∅, Pg sends the openings of the commitments in B3 corresponding to
{xij}i∈[4],j∈ind(Pig) i.e the input shares that it holds at end of Round 1 and Mg = {mij}i∈[4],j∈ind(Pig)
where mαβ = pαβ ⊕ xαβ. Analogous steps are executed with respect to P4. The common shares,
however, are opened by one garbler. The openings corresponding to commitment of {x13, x14, x34} are
sent only by P1. The openings corresponding to commitment of {x23, x24, x43} are sent only by P2.
– Pv (v ∈ {3, 4})) local computation step is same as that of P3 in g4PC (with respect to Cv and Fv).
Round 3:
– If Cα (cid:54)= ∅∨Fα (cid:54)= ∅, Pα (α ∈ [4]) sends Oα = {oij}i∈[4],j∈ind(Piα) to Pβ where Pβ /∈ Cα∪Fα and (TTP, β)
to all.
– If Cg = Fg = ∅, Pg (g ∈ [2]) sends o to P3, P4.
– If Cv = Fv = ∅, Pv (v ∈ {3, 4}) sends Y to all.
– If Pα (α ∈ [4]) receives Oβ from Pβ in Round 3, it uses Oβ to open its missing shares {xiα}i∈[4]\{α}.
Else compute y = f (⊕j∈ind(P1)x1j,
If one of the opening leads to ⊥, set Cα = Pβ.
⊕ind(P2)x2j,⊕ind(P3)x3j,⊕ind(P4)x4j).
– If Pg (g ∈ [2]) receives a valid Y from Pv such that Pv /∈ Cg and (Pv, P1), (Pv, P2) /∈ Fg, then compute y ←
De(Y, d). If Pv receives o from one of the Pgs, it computes y after recovering H(d) ← Open(pp, c, o).
Round 4:
– If Pα computed y via being elected as TTP, it sends (y, TTP) to all and terminates.
– If (TTP, β) is received in Round 3 and (y, TTP) is received from Pβ, a party Pα outputs y and terminates.
19
Proof. An honest Pi would add (Pj, Pk) to Fi if one of the following holds: (a) During execution of InputCommitj,
the versions of Pj’s commitment on its input shares received by Pi from Pj and Pk were inconsistent. (Analogous
condition wrt InputCommitk) (b) When (Pj, Pk) are garblers, Pi is evaluator and: (b.1) Bi received from Pj, Pk is
not identical (b.2) When Fi = ∅ at the end of all executions of InputCommitm(m ∈ [4]) but the indices received
by Pi from the garblers corresponding to the common shares held by them do not match i.e when Mj, Mk received
from them is not consistent. It is easy to verify that cases (a) and (b.1) cannot occur for honest Pj, Pk. For case
(b.2), the argument follows from the fact that Pj, Pk must be in agreement with respect to corrupt party’s (say
Pl) input shares at the end of Round 1 itself. If not, then the version forwarded by atmost one among (Pj, Pk)
(say Pj) during InputCommitl could match the one Pi received by Pl, leading to Pi populating Fi with {Pl, Pk}.
This contradicts the assumption in case (b.2) regarding Fi = ∅ at the end of of all executions of InputCommit;
completing the proof.
Lemma 5.3. The encoded output Y computed by an honest evaluator corresponds to the committed inputs of all
parties.
Proof. Consider an honest evaluator Pi. If i = 3, the proof follows exactly as described in Lemma 4.6. Else if
i = 4, the proof of Lemma 4.6 still holds, except in that P3,F3,C3 are replaced with P4,F4,C4.
Lemma 5.4. If the encoded output sent by a potentially corrupt evaluator is used for output computation by an
honest garbler, it must correspond to committed inputs of all parties.
Proof. Similar to our g4PC protocol, an honest garbler, say Pg uses the encoded output Y (such that De(Y, d) (cid:54)=
⊥) received from evaluator Pv to compute output only if Pv /∈ Cg and (Pv, P1), (Pv, P2) /∈ Fg at the end of round
2. Correspondingly, if Cg = Fg = ∅, Pg would also send o to both the evaluators in round 3. This ensures that Y
corresponds to committed inputs as follows: Although Pv may be corrupt, however, Lemma 4.2 implies that Pv
did not misbehave in InputCommitv at all and has committed a unique input in Round 1. As a result, Pv receives
encoded inputs for committed shares and authenticity ensures that Y corresponds to the committed inputs of all
the parties. Note that authenticity of the garbling scheme is preserved since Pv receives only the preimage-resistant
hash of the decoding information.
Theorem 5.5. Protocol g4PC4 is correct.
Proof. We argue that the output y computed corresponds to the unique inputs committed by each Pi (i ∈ [4])
during InputCommiti. It follows from Lemmas 4.1, 4.3 that a corrupt party is forced to commit to its input and
the honest parties’ inputs are established as the committed inputs with public commitments by the end of parallel
executions of InputCommit. According to the protocol, output computation is done by one of the following cases:
(a) by decoding the encoded output Y sent by an evaluator (b) by Oα received from Pα on being elected as a TTP.
(c) by receiving (y, TTP) from a party Pβ when (TTP, β) was received in round 3. Case (a) follows directly from