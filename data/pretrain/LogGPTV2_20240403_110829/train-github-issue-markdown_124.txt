### Steps to Add and Use `test-component-library` in a TypeScript React Project

1. **Add the `test-component-library` Dependency:**

   Update your `package.json` file to include the `test-component-library` dependency:

   ```json
   "dependencies": {
     "test-component-library": "git+https://github.com/anmdsystems/test-component-library.git"
   }
   ```

2. **Create or Update `App.tsx`:**

   Ensure that your `App.tsx` file imports the necessary components and uses the `Button` component from `test-component-library`.

   ```typescript
   import React from 'react';
   import './App.css';
   import { Button } from 'test-component-library';

   function App() {
     return (
       <div className="App">
         <Button>Click Me</Button>
       </div>
     );
   }

   export default App;
   ```

3. **Run the Sample App:**

   After adding the dependency and updating `App.tsx`, run your application. If you encounter the following error, it indicates an issue with React hooks:

   ```
   Warning: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
     1. You might have mismatching versions of React and the renderer (such as React DOM).
     2. You might be breaking the Rules of Hooks.
     3. You might have more than one copy of React in the same app.
   See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.
   ```

   Additionally, you may see a stack trace indicating the specific line where the error occurs:

   ```
   react.development.js:1622 Uncaught TypeError: Cannot read properties of null (reading 'useState')
       at Object.useState (react.development.js:1622:1)
       at Button (Button.tsx:9:1)
       at renderWithHooks (react-dom.development.js:16305:1)
       at mountIndeterminateComponent (react-dom.development.js:20074:1)
       at beginWork (react-dom.development.js:21587:1)
       at HTMLUnknownElement.callCallback (react-dom.development.js:4164:1)
       at Object.invokeGuardedCallbackDev (react-dom.development.js:4213:1)
       at invokeGuardedCallback (react-dom.development.js:4277:1)
       at beginWork$1 (react-dom.development.js:27451:1)
       at performUnitOfWork (react-dom.development.js:26557:1)
   ```

### Troubleshooting the `Invalid Hook Call` Error

1. **Check React and ReactDOM Versions:**
   Ensure that the versions of `react` and `react-dom` are consistent. You can check the versions in your `package.json` and update them if necessary.

   ```json
   "dependencies": {
     "react": "^17.0.2",
     "react-dom": "^17.0.2"
   }
   ```

2. **Verify the `test-component-library` Compatibility:**
   Ensure that `test-component-library` is compatible with your version of React. Check the library's documentation for any specific version requirements.

3. **Resolve Multiple Copies of React:**
   Make sure there is only one copy of React in your project. You can use tools like `npm ls react` to check for multiple instances and remove any duplicates.

4. **Follow the Rules of Hooks:**
   Ensure that all custom hooks and functional components follow the [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html). Specifically, hooks should only be called at the top level of a functional component or another hook.

By following these steps, you should be able to resolve the `Invalid Hook Call` error and successfully integrate the `test-component-library` into your TypeScript React project.