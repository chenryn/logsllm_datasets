title:Architecture and Applications for a Distributed Embedded Firewall
author:Charles Payne and
Tom Markham
Architecture and Applications for a Distributed Embedded Firewall
Charles Payne
Tom Markham
Secure Computing Corporation
(cid:1)cpayne,markham(cid:2)@securecomputing.com
Abstract
The distributed ﬁrewall is an important new line of net-
work defense.
It provides ﬁne-grained access control to
augment the protections afforded by the traditional perime-
ter ﬁrewall. To be effective, though, a distributed ﬁrewall
must satisfy two critical requirements. First, it must em-
brace a protection model that acknowledges that every-
thing behind the ﬁrewall may not be trustworthy. The mali-
cious insider with unobstructed access the network can still
mount limited attacks. Second, the ﬁrewall must be tamper-
resistant. Any ﬁrewall that executes on the same untrusted
operating system that it is charged to protect begs the ques-
tion: who is protecting whom? This paper presents a new
distributed, embedded ﬁrewall that satisﬁes both require-
ments. The ﬁrewall ﬁlters Internet Protocol trafﬁc to and
from the host. The ﬁrewall is tamper-resistant because it
is independent of the host’s operating system. It is imple-
mented on the host’s network interface card and managed
by a protected, central policy server located elsewhere on
the network. This paper describes the ﬁrewall’s architec-
ture and associated assurance claims and discusses unique
applications for it.
1. Introduction
Traditional perimeter ﬁrewalls are a critical component
of network defense, but they should not be considered the
only line of defense. First, their protection is too coarse.
This leaves the ﬁrewall helpless against the malicious in-
sider, who operates freely within the ﬁrewall’s security
perimeter. Second, it is costly to extend their protections
to mobile users, because the ﬁrewall’s security perimeter is
determined somewhat artiﬁcially by the ﬁrewall’s location
in the network topology. For effective network defense, we
must augment perimeter ﬁrewalls with more ﬁne-grained
access controls.
Bellovin [1] argued that a distributed ﬁrewall provides
the ﬁne-grained protection that is needed. In this solution,
a ﬁrewall is placed at each host in the network, and all ﬁre-
walls are managed as a single entity. That is, centralized
management is coupled with distributed enforcement. Dis-
tributed ﬁrewalls contain the malicious insider because the
security perimeter is drawn around each host. Because the
perimeter is no longer deﬁned by network topology, the
distributed ﬁrewall is an ideal solution for mobile users,
telecommuters and business-to-business extranets. Also,
since distributed ﬁrewall policy is expressed in terms of net-
work endpoints, changes to network topology have little if
any impact on policy management. Ioannidis, Keromytis,
Bellovin and Smith [3] described a prototype distributed
ﬁrewall for OpenBSD hosts.
The distributed ﬁrewall falls short, however, if it assumes
that all users on the local host are trustworthy. If these users
are trusted to access the network freely, limited attacks such
as network snifﬁng, host address spooﬁng and denial of ser-
vice are still possible. To effectively contain the malicious
insider, distributed ﬁrewalls must embrace a stronger pro-
tection model that acknowledges that users on the host may
not be trustworthy. In other words, in addition to protecting
the host from a malicious network, the ﬁrewall must pro-
tect the network from a malicious host. This requirement
becomes more signiﬁcant when we recognize that many in-
sider attacks are not mounted intentionally. Worms like
Code Red and NIMDA, for example, can turn loyal users
into unwitting insiders [4].
The distributed ﬁrewall also falls short if it executes on
an untrusted operating system. So-called personal ﬁre-
walls suffer this fate. These software-based solutions fail
to satisfy a cornerstone requirement for ﬁrewalls: tamper-
resistance. Personal ﬁrewalls are relatively easy to disable
via a network-based attack [7]. Like the emperor’s dress-
maker, they can leave the host — and by consequence the
network — a bit exposed.
This paper describes a new distributed embedded ﬁrewall
called EFW that embraces the stronger protection model
and that is tamper-resistant. EFW ﬁlters Internet Protocol
(IP) trafﬁc to and from the host. EFW is tamper-resistant
because it is independent of the host’s operating system. In-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:01 UTC from IEEE Xplore.  Restrictions apply. 
stead, the ﬁrewall is implemented on the host’s network in-
terface card (NIC) and managed by a central, protected pol-
icy server elsewhere on the network. EFW is implemented
on a commodity NIC and scales easily to thousands of hosts.
The paper focuses on EFW’s architecture and how it can
support interesting security applications. Section 2 deﬁnes
EFW’s security and non-security objectives. Sections 3 and
4 illustrate the component and management architectures,
respectively, that result from these objectives.
Distributed ﬁrewalls like EFW offer new opportunities in
security policy enforcement. Section 5 enumerates several
novel applications that we have identiﬁed for EFW.
Finally, EFW’s genesis occurred in DARPA-sponsored
research from the late 1990’s. Since then, we have investi-
gated its use in many problem domains. Section 6 offers a
glimpse at EFW’s future directions.
The remainder of this section considers related work.
1.1. Related Work
While EFW’s goals and objectives closely resemble
those of Bellovin [1],
the two efforts proceeded inde-
pendently and resulted in very different implementations
(Bellovin’s implementation is described in [3]). Bellovin
noted that “for more stringent protections, the policy en-
forcement can be incorporated into a tamper-resistant net-
work card” [1, Section 7.5], but he chose to implement his
distributed ﬁrewall with kernel extensions, a user level dae-
mon and a new device driver. Besides offering a simpler
development path for a prototype, this strategy enabled the
ﬁrewall to handle application-level policies. EFW, on the
other hand, focuses on IP packet ﬁltering because of the
limited processing power available on the NIC.
Nessett and Humenn [5] proposed a novel multilayer
ﬁrewall that can be managed centrally. Nessett’s ﬁrewall
includes all of the devices, such as perimeter ﬁrewalls,
switches and routers, that currently perform ﬁltering in the
network. This work illustrates the pitfalls that can be en-
countered when ﬁrewall policy management is inextricably
bound to network topology management. Bellovin [1] and
Markham [4] advocate breaking this bond. Nessett and Hu-
menn’s results also underscore the importance of creating
multiple layers (e.g., distributed ﬁrewalls and perimeter ﬁre-
walls) in an overall network defense strategy.
2. Objectives for EFW
2.1. Security Objectives
Figure 1 illustrates an EFW NIC on a protected host, the
EFW policy server (also protected by an EFW NIC), and
the communication paths between them. To illustrate our
high-level design strategy, we state the security objectives
for EFW in the form recommended by [6]. Assertions that
EFW must satisfy are expressed as claims. Following the
statement of each claim are zero or more assumptions upon
which the claim relies. Validated assumptions are repre-
sented as claims elsewhere in this section and are so ref-
erenced. Unvalidated assumptions represent potential vul-
nerabilities for EFW that must be validated by other means
(procedural controls, physical security, and so forth).
Protected
Host
EFW NIC
(cid:1)
EFW
Policy
Server
EFW NIC
(cid:1)
(cid:1)
Audit Events
Policy Management Trafﬁc
Figure 1. EFW NIC and Policy Server
The top-level claim is that EFW performs its function
correctly.
Claim 1 EFW blocks unapproved IP trafﬁc to and from the
host, which assumes
(cid:1) EFW is conﬁgured properly
(cid:1) EFW is non-bypassable [Claim 2]
The ﬁrst assumption captures the importance of strength
in policy, while the second assumption captures the impor-
tance of strength in mechanism. The ﬁrst assumption is val-
idated on a case-by-case basis. Essentially we must ensure
that the policy enforced by EFW is appropriate for the op-
erational environment and its security threats. We will not
consider this requirement further except to describe, in Sec-
tion 4, the tools that EFW provides for policy management.
Claim 2 EFW is non-bypassable, which assumes
We divide the objectives for EFW into two camps:
(cid:1) The host can communicate only through EFW-enabled
security-related and non-security-related.
NICs
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:01 UTC from IEEE Xplore.  Restrictions apply. 
(cid:1) EFW is
[Claim 3]
tamper-resistant
to host-based attack
Claim 5 Only the EFW policy server can disable an EFW
NIC, which assumes
(cid:1) EFW is tamper-resistant
to network-based attack
(cid:1) The operation is available only by a command to the
[Claim 4]
EFW NIC API
The ﬁrst assumption is not trivial to achieve, and cur-
rently EFW offers no technical means to validate it. This
means that we cannot, for example, stop the user from
swapping out the EFW NIC for a non-EFW NIC. However,
technical measures do exist in the EFW policy server to de-
tect such activity. Fortunately, this potential vulnerability
is temporary. Section 6 describes a technology that will
prevent the host from accessing network resources unless
it communicates through an EFW NIC.
Claim 3 EFW is tamper-resistant to host-based attacks,
which assumes
(cid:1) The EFW NIC hardware is protected from direct ma-
nipulation
(cid:1) Only the EFW policy server can disable an EFW NIC
[Claim 5]
(cid:1) Only the EFW policy server can download new policy
[Claim 6]
(cid:1) Attackers cannot masquerade as the EFW policy
server [Claim 8]
(cid:1) The command is accepted only from the EFW policy
server [Claim 7]
(cid:1) Only authorized users can access the EFW policy
server
Claim 6 Only the EFW policy server can download new
policy to an EFW NIC, which assumes
(cid:1) The operation is available only by a command to the
EFW NIC API
(cid:1) The command is accepted only from the EFW policy
server [Claim 7]
(cid:1) Only authorized users can access the EFW policy
server
The ﬁrst supporting assumption for Claims 5 and 6 is
validated by the EFW implementation. The third support-
ing assumption can be validated by procedural controls and
physical security. The remaining assumption is validated by
a combination of technology, procedural and physical secu-
rity controls, as described below.
Claim 4 EFW is tamper-resistant to network-based at-
tacks, which assumes
Claim 7 The command is accepted only from the EFW pol-
icy server, which assumes
(cid:1) Only the EFW policy server can disable an EFW NIC
[Claim 5]
(cid:1) Only the EFW policy server can download new policy
[Claim 6]
(cid:1) Attackers cannot masquerade as the EFW policy
server [Claim 8]
The ﬁrst assumption in Claim 3 can be validated by re-
stricting the hardware interfaces. Newer generations of the