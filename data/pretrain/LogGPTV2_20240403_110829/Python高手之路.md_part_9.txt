示例5.2引导venv环境
示例5.2所示），而不像vitualenv那样都帮我们做好。
virtualenv 的参数--system-site-packages 作用相同。
并不包含很多配置项。其中的 include-system-site-package 作用和前面介绍过的
包或其他包。可以通过Python的-m标志来加载模块：
的一部分。
Python 3.3接受。也就是说，虚拟环境的使用如此流行以至于如今它已经成为Python 标准库
它是如此的通用，以至于已经有名为tox的工具来专门解决这一问题（详见6.7节)。
-2013-09-02 22:26:07-- https://bitbucket.org/pypa/setuptools/raw
venv模块的缺点就是它不会默认安装 setuptools 和 pip。因此我们只能自己引导环境（如
$ source myvenv/bin/activate
激活虚拟环境的机制同前面描述的一样，通过执行 source 命令激活脚本：
在 myvenv 内部，可以找到当前环境的名为 pyvenv.cfg 的配置文件。默认情况下它
构建虚拟环境现在变得非常简单：
$ python3.3 -m venv 
venv模块是Python 3.3及以上版本的一部分,可以操作虚拟环境而无需使用virtualenv
最近，PEP405（http://www.python.org/dev/peps/pep-0405/）定义的虚拟环境机制已经被
你可能已经猜到，虚拟环境对自动运行单元测试集非常有用。这是一个非常通用的模式，
(myvenv) $ wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/
同样，可以调用deactivate退出虚拟环境。
(myvenv)$
venv: error: the following arguments are required: ENv DIR
usage: venv [-h] [--system-site-packages] [--symlinks] [--clear] [--upgrade]
在某些特定场景下，仍然需要访问系统中安装的包。那么可以通过在创建虚拟环境时向
ez_setup.py-O-1python
/bootstrap/ez_setup.py
ENV DIR [ENV_DIR...]
本电子书仅限学习交流使用，请勿用于商业用途
第5章虚拟环境
59
---
## Page 67
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
9
Writing /tmp/easy_install-hxo3b0/pip-1.4.1/setup.cfg
Processing pip-1.4.1.tar.gz
Reading https://pypi.python.org/simple/pip/
Searching for pip
接下来可以通过easy_install安装 pip:
Finished processing dependencies for setuptools==1.1
Installed /home/jd/myvenv/lib/python3.3/site-packages/
Installing easy_install-3.3 script to /home/jd/myvenv/bin
running egg._info
running bdist_egg
Installing Setuptools
Now working in /tmp/tmp228fqm/setuptools-1.1
100%[==
Downloading https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.
Best match: pip 1.4.1
Processing dependencies for setuptools==1.1
Adding setuptools 1.1 to easy-install.pth file
writing dependency_links to setuptools.egg-i
running install
Extracting in /tmp/tmp228fqm
Downloading https://pypi,python.org/packages/source/s/setuptools/
Saving to:'STDOUT
Length: 11835 (12K) [text/plain]
HTTP request sent, awaiting response... 200 OK
Connecting to bitbucket.org (bitbucket.org) 1131.103.20.168l:443...
gz#md5=6afbb46aeb48abac658d4df742bff714
(myvenv) $ easy_install pip
setuptools-1.1-py3.3.egg
[...]
setuptools-l.1.tar.gz,
connected.
第5章
虚拟环境
本电子书仅限学习交流使用，请勿用于商业用途
=>]11,835
--.-K/s in Os
---
## Page 68
熊猫爱中国www.xiongmaoi.com
熊猫
该不是什么问题。
好的选择。最好的选择仍然是基于virtualenv。考虑它们的工作方式都一样，所以这应
码已经并入Python3.4中，这意味着引导问题在最近的 Python 版本中已经解决了。
但是，如果不是只针对Python 3.3及以上版本，那么实在没必要这么做。另外，pip 引导代
做好一些你期望的工作。虽然写个小工具利用venv模拟virtualenv的默认行为并不难,
不管怎样，大多数程序都要同时支持 Python 2和 Python 3，所以完全依赖venv不是最
所以尽管Python3.3默认包含了venv模块，但是必须承认它有缺点，就是它不会默认
接下来就可以通过pip 安装任何其他所需的包了。
Finished processing dependencies for pip
Processing dependencies for pip
Installed /home/jd/myvenv/lib/python3.3/site-packages/pip-1.4.1-py3.3.egg
Installing pip-3.3 script to /home/jd/myvenv/bin
Adding pip 1.4.1 to easy-install.pth file
warning: no files found matching '*.html' under directory 'docs'
 Running pip-1.4.1/setup.py -q bdist_egg --dist-dir /tmp/easy_instali-hxo3b0
Installing pip script to /home/jd/myvenv/bin
'docs/ _build'
warning: no previously-included files matching *.rst' found under directory
/pip-1.4.1/egg-dist-tmp-efgi80
本电子书仅限学习交流使用，请勿用于商业用途
第5章虚拟环境
9
---
## Page 69
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 70
熊猫爱中国www.xiongmaoi.com
熊猫6.1
行其中定义的test_true 函数。
示例6.1test_true.py中的一个真实的简单测试
在查找与某个特定文件相关联的测试时会比较方便，如示例6.1所示。
这也可以避免这些测试代码被错误地安装在顶层tests 模块。
以便只要软件被安装了，它们就可以被任何其他人运行或重用而无需使用源代码包。同时，
扰或者破坏现有程序，还会极大地帮助你和其他开发人员维护软件。
增强你的软件，让软件更加健壮，避免引入回归问题。
试的代码是毫无用处的，因为没有办法能最终证明它是可以工作的。
开始单元测试。如果你想被说服的话，建议你从了解测试驱动开发的好处开始。编写未经测
第6章一
通常比较简单的方式是采用模块树的层次结构作为测试树的层级结构。也就是说，覆盖
测试应该保存在应用程序或库的tests 子模块中。这可以使测试代码随模块一同分发，
本章将介绍可以用来构建良好测试集的 Python 工具。我们还将讨论如何利用这些工具
这是能够写出来的最简单的单元测试。要运行它，只需加载test_true.py文件并运
def test true():
重磅消息！现在居然还有人在自己的项目中没有测试策略。本书的目的不是试图说服你
assert True
基础知识
单元测试
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 71
熊猫爱中国www.xiongmaoi.com
熊猫爱中
出，测试也会出错退出。
些假值（False、None、O等），它就会抛出 AssertionError 异常。如果有其他异常抛
令会加载所有以 test_开头的文件，然后执行其中所有以 test_开头的函数。
readthedocs.org/en/latest/）这个包要解决的一
64
因此，针对我们的源代码树中的test_true.py 文件运行 nosetests 将得到以下结果：
．显然，对于你的所有测试文件都这么做肯定是太痛苦了。这就是 nose（https://nose.
很简单，对吗？这种方法尽管简单，但却在很多小的项目中广泛使用且工作良好。除了
一旦有 AssertionError 异常抛出，测试就失败了；一旦 assert 的参数被判断为某
FAILED (failures=l)
Ran 2 tests in 0.003s
AssertionError
Traceback (most recent call last):
FAIL: test_true.test_false
test_true.test_false ... FAIL
test_true.test_true ... ok
 nosetests -v
但是，一旦测试失败，输出就会相应改变，以体现这次失败，包括完整的跟踪回溯。
Ran 1 test in 0.003s
test_true.test_true.
A- sisanasou s
 File "/usr/lib/python2.7/dist-packages/nose/case.py", line 197, in
第6章单元测试
assert False
self.test(*self.arg)
runTest
本电子书仅限学习交流使用，请勿用于商业用途
一安装之后，它将提供nosetests 命令，该命
1
---
## Page 72
熊猫爱中国www.xiongmaoi.com
熊猫
unittest在Python2.7中已经做了较大改进，如果正在支持Python的早期版本，那么
警告
Python 标准库的一部分。
试之前或之后执行某些操作）也会非常痛苦。
有给出这一信息，而只是声称此断言是错误的一
nose，它们不需要其他工具或库，而且只依赖 assert 就足够了。
这用 unittest 就比较方便了。它提供了解决上述问题的工具，而且 unittest 是
而且，用这种基本的无框架方式实现一些高级的测试（如忽略某个测试，或者在每个测
显然，因为a 和b 不同，所以测试不能通过。但是，它们到底有何不同呢？assert 没
FAILED(failures=l)
AssertionError
不过，在需要编写更复杂的测试时，只使用assert 会让人很抓狂。设想一下下面这个测试：
Ran 1 test in 0.001s
Traceback (most recent call last):
FAIL: test_complicated.test_key
test_complicated.test_key ... FAIL
$nosetests -v
当运行nosetests时，它会给出如下输出：
def test key():
 File "/home/jd/test_complicated.py", line 4, in test_key
assert a==b
File "/usr/lib/python2.7/dist-packages/nose/case.py", line 197, in
self.test(*self.arg)
assert a == b
b=['b']
[a.'e]=e
runTest
-----
-一-
1
，
本电子书仅限学习交流使用，请勿用于商业用途
一这是没什么用的。
一
6.1基础知识
65
---
## Page 73
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
的类，并且写一个运行测试的方法。与使用 assert 不同，我们依赖unittest.TestCase 类
提供的一个方法，它提供了一个等价的测试器。运行时，其输出如下：
可能需要使用它的向后移植的名字 unittest2 ( htps:/ypi.python.org/pypi/unitet2/0.5.1 ） 。
66
模块：
如果需要支持 Python 2.6,可以使用下面的代码段在运行时为任何 Python 版本导入正确的
First extra element 1:
First list contains 1 additional elements.
First differing element 0:
AssertionError: Lists differ: ['a', 'b'] != ['b']
Traceback (most recent call last):
FAIL: test_key (test_complicated.TestKey)
$ nosetests -v
如你所见，实现起来并没有更复杂。需要做的就只是创建一个继承自unittest.TestCase
test_key (test_complicated.TestKey) ... FAIL
class TestKey(unittest.TestCase):
如果用unittest 重写前面的例子，看起来会是下面的样子：
import unittest
except ImportError:
try:
 File "/home/jd/Source/python-book/test_complicated.py", line 7, in
第6章
import unittest2 as unittest
self.assertEqual(a, b)
import unittest
test_key
def test_key(self):
self.assertEqual(a, b)
b=['b']
a=['a'，'b']
单元测试
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 74
熊猫爱中国www.xiongmaoi.com
示例6.2让测试失败
所示。
如果执行一定会抛出一个错误但没有特定的断言去检查时，这是很方便的，如示例6.2
expMatches 等。最好是通读一遍pydoc unittest，以便全面了解。
rtListEqual、assertMultiLineEqual、assertNotAlmostEqual、assertNot
assertIn、assertIs、assertIsIntance、assertIsNon、assertualIsNot、as
ertEqual、assertTrue、 assertFalse、 assertGreater、assertGreaterEqual、
时都会感谢你没有使用assert，这同时也为他提供了调试信息。
例时永远不应该使用 as sert 的原因。任何人试图 hack 你的代码并最终遇到某个测试失败
少我们获得了为什么测试会失败的真正信息，它可以帮我们解决这个问题。这就是写测试用
有时候，某个测试如果不能运行，忽略它是很有用的。例如，希望根据某个库的存在与
也可以使用fail(msg)方法有意让某个测试立刻失败。例如，已知代码的某个部分
unittest 提供了一组测试函数，可以用来特化测试，如assertDictEqual、ass-
如你所见，这个输出结果很有用。仍然有断言错误被抛出，而且测试仍然失败了，但至
class TestFail(unittest.TestCase):
import unittest