;
CA SERVER), but they have different expiration dates
CN=
(all with a 20-year validity period). Those seem to be coming from
IAM products of another Korean vendor, which we believe could
be an additional instance of private key reuse. Furthermore, we
found 4 universities in China to be using the same server public
key. Their chains differ because some also sent the CA certificate
during TLS handshake, but some did not. Interestingly the name of
.com.cn (same as the
the leaf certificates is once again
cluster of 17 universities discussed above), but these are all expired
;OU=
in September 2020. Nevertheless, this suggests that our suspicions
might be correct. Another cluster that gained new membership is
made of 3 French schools, where the name of the leaf certificate is
.network, which seems to be a domain owned
by a French Wi-Fi solution provider. The chains differ because both
the leaf and CA certificates were different, but the server public
key remains the same, which we believe could be another case of
key reuse.
8 DISCUSSION
8.1 Responsible disclosure
As discussed in Section 4, we have responsibly reported the OS
design weaknesses to the corresponding vendors. While Microsoft
and Apple dismissed our reports, Google already has fixes planned
for both Chrome OS and Android. The CAT profile issues discussed
in Section 6 have also been disclosed to the affected TEIs. Some
replied saying that they fixed the issues following our reports, while
some said they are ditching eduroam CAT and have removed the
profiles completely. Some acknowledged but dismissed the reported
weaknesses claiming the probability of exploit is low. Some took
our reports more seriously and had further discussions with us
and an engineer of eduroam. A problem faced by some TEIs is that
Chrome OS can only handle a set of names when matching subject
alternative names but not for subject names. However, those TEIs
have multiple servers with subject names that belong to different
third/second-level domains, and thus they resort to using a very
permissive hostname constraint (e.g., a TLD) in their profiles, which
contributed to the findings discussed in Section 6.2 and 6.3. This
is yet another example of poor OS designs hurting user security.
We have relayed these deployment challenges back to the Chrome
OS team and they are now considering adding new parameters in
the design of their profile format to facilitate name checking. For
the suspected cases of key reuse (Section 7.2.3), we contacted the
IAM vendors but received no responses. After 30 days, we then
contacted the affected TEIs. Two schools acknowledged our findings
and changed their keys and certificates following our reports. For
the problematic configuration instructions (Section 5), we prepared
sample instructions recommending good practices that should be
adopted, and have already shared with the affected TEIs. To improve
the potential impact of our reports, we manually locate the contact
methods of the IT staffs in charge of the instructions/profiles. Each
report is tailor-made in accordance with the security labels assigned
to the instructions (Section 5), including the explanation of issues
as well as the suggested fixes. We finished the disclosure process
in early August 2021. We managed to contact 1732 TEIs which
prescribed insecure manual configuration instructions, and received
48 acknowledgments a month later. Some TEIs have updated their
instructions following our reports.
8.2 Suggestions for improving security
Based on our results, we make the following suggestions for improv-
ing the security of WPA2-Enterprise. First, the use of pre-configured
profiles should be encouraged, as the overall quality of the resulting
configurations tend to be significantly higher (see Section 6), and
it helps to prevent human errors from Wi-Fi users. Second, OS
vendors need to revamp their designs of the Wi-Fi configuration UI.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1111Insecure options should be made difficult to apply or even removed
completely. Relying on human intervention (e.g., iOS and macOS)
is generally a bad idea, and the design of Android 7+ has merits as
it increases the chance of arriving at a secure configuration (see
Section 5.2). Third, to reduce the impact of ET attacks, TEIs should
consider to use multi-factor authentication to protect services that
share SSO credentials with Wi-Fi, or use separate (instead of SSO)
credentials for Wi-Fi. Finally, we question the merits of using the
X.509 PKI in WPA2-Enterprise. We argue that Wi-Fi does not need a
scalable authentication solution like the X.509 PKI, which is known
to be difficult to implement and deploy correctly. The current design
seems to be inheriting all of the PKI’s complexity and deployment
challenges for no apparent benefits. We conjecture that one might
be better off with a simpler means of server authentication, but we
leave the exploration of that design space for future work.
8.3 Ethical considerations
We take the following ethical considerations into account during
our study. First, we manually retrieve configuration instructions
from TEIs without programmatic scraping of their websites, thus
robots.txt does not apply. Second, we redact names of TEIs in our
results, as some of the weaknesses might still persist. Third, when
collecting TLS parameters from eduroam authentication servers, we
do not complete the TLS handshakes and never attempt any actual
user log-ins. For 223 out of the 3637 successfully probed eduroam
domains, we had to use actual user email addresses, which we col-
lected from Google Scholar and IEEE Xplorer. We conclude this use
of email addresses is highly unlikely to cause harms to the users
based on the following considerations. When authenticating to
eduroam, the phase-1 traffic is not encrypted, and the outer identity
can be snooped by the host institute (if roaming) and eavesdroppers
within range. Some schools encourage the use of anonymous outer
identity because of this. In an ideal world, our data collection should
succeed with only anonymous identities. However, we noticed that
some servers perform a legitimacy check on the outer identity be-
fore proceeding to TLS handshake. Thus in an attempt to increase
coverage, we try real email addresses in cases where generic ac-
counts did not work. Since the outer identity is an unauthenticated
input, the account owners can repudiate ever initiating the phase-1
traffic when phase-2 authentication is unsuccessful, which is guar-
anteed by our aborted TLS handshakes. This should pose little to
no risk to the corresponding users. Over the data collection period,
our probing only incurs an infrequent, negligible amount of traffic
(a few partial TLS handshakes) to the TEIs’ authentication servers,
which should not cause any disruption to their benign services.
9 RELATED WORK
Given its importance, implementations and deployments of TLS
have gone through extensive scrutiny over the years [14, 15, 25, 27,
32, 37, 45, 53]. TLS typically relies on X.509 certificates for server
authentication, which is itself tricky to implement and configure
correctly [17, 19, 20, 35, 41, 58]. Various appliances intercept TLS for
different reasons, though many were found to be hurting security
due to the use of broken ciphers and improper validation of certifi-
cates [24, 26, 29, 29, 62]. Some of these results inspired the design
of our measurement study presented in Sections 6 and 7. Although
enterprise Wi-Fi was shown to be vulnerable to different attacks
under various settings [12, 13, 16, 18, 49, 60, 61], to the best of our
knowledge, this is the most extensive measurement study to date
covering different aspects of supplicant and server configurations,
and the first to establish links between the misguided UI designs of
mainstream OSs and poor supplicant configurations. Our results
also suggest that awareness of the ET attack remains low among
practitioners, despite years of academic research on the topic.
10 CONCLUSION
In this paper, we presented a multifaceted study of the WPA2-
Enterprise ecosystem. We first proposed a framework for comparing
the security of WPA2-Enterprise configurations. We then utilized
this framework to evaluate the realizable configurations supported
by the UIs of mainstream OSs and discovered many design weak-
nesses that can negatively impact security. Moreover, we conducted
a large-scale evaluation of 7275 configuration instructions from
2061 TEIs and observed that 85.7% TEIs were prone to credential
thefts on at least one OS. We also analyzed 3593 eduroam CAT
profiles and discovered additional configuration issues. Finally, we
collected and evaluated the TLS parameters used by the authenti-
cation servers of 3637 eduroam domains, and identified numerous
security issues including the use of weak signature algorithms and
suspected cases of key reuse. The results of our study show that the
WPA2-Enterprise ecosystem has numerous security holes caused
by poor supplicant and server configurations. Vendors, IT adminis-
trators and users all need to do their part in order to fully realize
the security promises of WPA2-Enterprise.
ACKNOWLEDGMENTS
We thank the reviewers, especially our shepherd Frank Li, for their
insightful comments and suggestions on how to improve this paper.
We would also like to thank the engineers at eduroam, particu-
larly Stefan Winter, for taking the time to discuss with us some
of the problems found in CAT profiles and the deployment chal-
lenges faced by certain TEIs. This work was supported in part by
the departmental startup budget NEW/SYC, GRF matching fund
GRF/20/SYC, and Project Impact Enhancement Fund 3133292C from
The Chinese University of Hong Kong (CUHK), as well as US De-
partment of Defense (DARPA) Grant D19AP00039, and US National
Science Foundation (NSF) grants CNS-2007512 and CNS-2006556.
The views and conclusions contained herein are those of the au-
thors and should not be interpreted as necessarily representing the
policies or endorsements of the funding agencies.
REFERENCES
[1] [n. d.]. A Configuration File Format for Extensible Authentication Protocol
(EAP) Deployments. https://tools.ietf.org/id/draft-winter-opsawg-eap-metadata-
00.html.
[2] [n. d.]. CWE-297: Improper Validation of Certificate with Host Mismatch. https:
//cwe.mitre.org/data/definitions/297.html.
[3] [n. d.]. Linux WPA/WPA2/IEEE 802.1X Supplicant. https://w1.fi/wpa_supplicant/.
[4] [n. d.]. Open Network Configuration.
https://chromium.googlesource.
com/chromium/src/+/main/components/onc/docs/onc_spec.md#EAP-
configurations.
[5] [n. d.]. WiFi CSP - Windows Client Management | Microsoft Docs.
//docs.microsoft.com/en-us/windows/client-management/mdm/wifi-csp.
https:
[6] [n. d.].
WiFi.EAPClientConfiguration | Apple Developer Documenta-
https://developer.apple.com/documentation/devicemanagement/wifi/
tion.
eapclientconfiguration.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1112[7] 2012. Divide and Conquer: Cracking MS-CHAPv2 with a 100% success
rate. https://web.archive.org/web/20160316174007/https://www.cloudcracker.
com/blog/2012/07/29/cracking-ms-chap-v2/.
[8] 2020. Evil Twins, Eavesdropping, and Password Cracking: How the Office of
Inspector General Successfully Attacked the U.S. Department of the Interior’s
Wireless Networks. https://www.doioig.gov/sites/doioig.gov/files/FinalAudit_
WirelessNetworkSecurity_Public.pdf.
[9] Brad Antoniewicz. 2015. 802.11 Attacks.
[10] Elaine Barker and Allen Roginsk. 2019. Transitioning the Use of Cryptographic
Algorithms and Key Lengths. NIST special publication 800-131A Rev. 2 (2019).
[11] R. Barnes, M. Thomson, A. Pironti, and A. Langley. 2015. Deprecating Secure
Sockets Layer Version 3.0. https://tools.ietf.org/html/rfc7568.
[12] Alberto Bartoli, Eric Medvet, Andrea De Lorenzo, and Fabiano Tarlao. 2018. (In)
Secure Configuration Practices of WPA2 Enterprise Supplicants. In Proceedings
of the 13th International Conference on Availability, Reliability and Security. 1–6.
[13] Alberto Bartoli, Eric Medvet, and Filippo Onesti. 2018. Evil twins and WPA2
Enterprise: A coming security disaster? Computers & Security 74 (2018), 1–11.
[14] Benjamin Beurdouche, Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric
Fournet, Markulf Kohlweiss, Alfredo Pironti, Pierre-Yves Strub, and Jean Karim
Zinzindohoue. 2015. A messy state of the union: Taming the composite state
machines of TLS. In IEEE Symposium on Security and Privacy (S&P). 535–552.
[15] Karthikeyan Bhargavan and Gaëtan Leurent. 2016. Transcript Collision Attacks:
Breaking Authentication in TLS, IKE, and SSH. In NDSS.
[16] Sebastian Brenza, Andre Pawlowski, and Christina Pöpper. 2015. A practical
investigation of identity theft vulnerabilities in eduroam. In Proceedings of the
8th ACM Conference on Security & Privacy in Wireless and Mobile Networks. 1–11.
[17] Chad Brubaker, Suman Jana, Baishakhi Ray, Sarfraz Khurshid, and Vitaly
Shmatikov. 2014. Using frankencerts for automated adversarial testing of certifi-
cate validation in SSL/TLS implementations. In 2014 IEEE Symposium on Security
and Privacy. IEEE, 114–129.
[18] Aldo Cassola, William K Robertson, Engin Kirda, and Guevara Noubir. 2013. A
Practical, Targeted, and Stealthy Attack Against WPA Enterprise Authentication..
In NDSS.
[19] Sze Yiu Chau, Omar Chowdhury, Endadul Hoque, Huangyi Ge, Aniket Kate,
Cristina Nita-Rotaru, and Ninghui Li. 2017. Symcerts: Practical symbolic execu-
tion for exposing noncompliance in X. 509 certificate validation implementations.
In 2017 IEEE Symposium on Security and Privacy (SP). IEEE, 503–520.
[20] Yuting Chen and Zhendong Su. 2015. Guided differential testing of certificate
validation in SSL/TLS implementations. In Proceedings of the 2015 10th Joint
Meeting on Foundations of Software Engineering. 793–804.
[21] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W. Polk. 2008.
Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation
List (CRL) Profile. https://tools.ietf.org/html/rfc5280.
[22] Aldo Cortesi, Maximilian Hils, Thomas Kriechbaumer, and contributors. 2010–.
mitmproxy: A free and open source interactive HTTPS proxy. https://mitmproxy.
org/ [Version 6.0].
[23] Dino A Dai Zovi and Shane A Macaulay. 2005. Attacking automatic wireless
network selection. In Proceedings from the Sixth Annual IEEE SMC Information
Assurance Workshop. IEEE, 365–372.
[24] X de Carné de Carnavalet and Mohammad Mannan. 2016. Killed by proxy:
Analyzing client-end TLS interception software. In NDSS.
[25] Joeri de Ruiter and Erik Poll. 2015. Protocol State Fuzzing of TLS Implementations.
In USENIX Security.
[26] Joyanta Debnath, Sze Yiu Chau, and Omar Chowdhury. 2020. When TLS Meets
Proxy on Mobile. In International Conference on Applied Cryptography and Net-
work Security. Springer, 387–407.
[27] Antoine Delignat-Lavaud, Cédric Fournet, Markulf Kohlweiss, Jonathan
Protzenko, Aseem Rastogi, Nikhil Swamy, Santiago Zanella-Béguelin,
Karthikeyan Bhargavan, Jianyang Pan, and Jean Karim Zinzindohoué. 2017.
Implementing and proving the TLS 1.3 record layer. In Security and Privacy (SP),
2017 IEEE Symposium on. IEEE, 463–482.
[28] Thai Duong and Juliano Rizzo. 2011. Here Come The ⊕ Ninjas. Technical Report.
[29] Zakir Durumeric, Zane Ma, Drew Springall, Richard Barnes, Nick Sullivan, Elie
Bursztein, Michael Bailey, J Alex Halderman, and Vern Paxson. 2017. The Security
Impact of HTTPS Interception. In NDSS.
[30] Jochen Eisinger. 2001. Exploiting known security holes in Microsoft’s PPTP
Authentication Extensions (MS-CHAPv2). University of Freiburg,[cit. 2008-27-05]
Dostupné (2001).
[31] Sascha Fahl, Marian Harbach, Thomas Muders, Lars Baumgärtner, Bernd
Freisleben, and Matthew Smith. 2012. Why Eve and Mallory love Android: An
analysis of Android SSL (in) security. In Proceedings of the 2012 ACM conference
on Computer and communications security. 50–61.
[32] Paul Fiterau-Brostean, Bengt Jonsson, Robert Merget, Joeri de Ruiter, Konstanti-
nos Sagonas, and Juraj Somorovsky. 2020. Analysis of DTLS Implementations
Using Protocol State Fuzzing. In 29th USENIX Security Symposium (Security).
[33] Matthew Gast. 2005. 802.11 wireless networks: the definitive guide. O’Reilly Media,
[34] Jim Geier. 2008. Implementing 802.1X security solutions for wired and wireless
networks. John Wiley & Sons.
Inc.
cal Report.
[35] Martin Georgiev, Subodh Iyengar, Suman Jana, Rishita Anubhai, Dan Boneh, and
Vitaly Shmatikov. 2012. The most dangerous code in the world: validating SSL
certificates in non-browser software. In Proceedings of the 2012 ACM conference
on Computer and communications security. 38–49.
[36] Jonathan Hassell. 2002. RADIUS: securing public access to private resources.
O’Reilly Media, Inc.
[37] Boyuan He, Vaibhav Rastogi, Yinzhi Cao, Yan Chen, VN Venkatakrishnan, Run-
qing Yang, and Zhenrui Zhang. 2015. Vetting SSL usage in applications with
SSLint. In 2015 IEEE Symposium on Security and Privacy. IEEE, 519–534.
[38] Joshua Hill. 2001. An analysis of the RADIUS authentication protocol. (2001).
[39] Michael Howard, David LeBlanc, and John Viega. 2010. 24 Deadly Sins of Software
Security: Programming Flaws and How to Fix Them. McGraw-Hill.
[40] Man Hong Hue. 2021. List of URLs used as references. https://gist.github.com/
hugohue/66a45b16bd444f73e757b65eba858113
[41] Deepak Kumar, Zhengping Wang, Matthew Hyder, Joseph Dickinson, Gabrielle
Beck, David Adrian, Joshua Mason, Zakir Durumeric, J Alex Halderman, and
Michael Bailey. 2018. Tracking certificate misissuance in the wild. In 2018 IEEE
Symposium on Security and Privacy (SP). IEEE, 785–798.
[42] B. Laurie, A. Langley, and E. Kasper. 2013. Certificate Transparency. RFC 6962
(Experimental).
[43] Arjen Lenstra and Benne De Weger. 2005. On the possibility of constructing mean-
ingful hash collisions for public keys. In Australasian Conference on Information
Security and Privacy.
[44] Gaëtan Leurent and Thomas Peyrin. 2019. From collisions to chosen-prefix
collisions application to full SHA-1. In Annual International Conference on the
Theory and Applications of Cryptographic Techniques. Springer, 527–555.
[45] Christopher Meyer and Jörg Schwenk. 2013. SoK: Lessons learned from SSL/TLS
attacks. In International Workshop on Information Security Applications. Springer,
189–209.
[46] K. Moriarty and S. Farrell. 2021. Deprecating TLSv1.0 and TLSv1.1. https:
//tools.ietf.org/html/draft-ietf-tls-oldversions-deprecate-12.
[47] PCI Security Standards Council. 2015. Migrating from SSL and Early TLS. Techni-
[48] Bradley Reaves, Jasmine Bowers, Nolen Scaife, Adam Bates, Arnav Bhartiya,
Patrick Traynor, and Kevin RB Butler. 2017. Mo (bile) money, mo (bile) problems:
Analysis of branchless banking applications. ACM Transactions on Privacy and
Security (TOPS) 20, 3 (2017), 1–31.
[49] Pieter Robyns, Bram Bonné, Peter Quax, and Wim Lamotte. 2014. Short paper:
exploiting WPA2-enterprise vendor implementation weaknesses through chal-
lenge response oracles. In Proceedings of the 2014 ACM conference on Security and
privacy in wireless & mobile networks. 189–194.
[50] Bruce Schneier, David Wagner, et al. 1999. Cryptanalysis of microsoft’s PPTP
authentication extensions (MS-CHAPv2). In International Exhibition and Congress
on Network Security. Springer, 192–203.
[51] Y. Sheffer, R. Holz, and P. Saint-Andre. 2015. Summarizing Known Attacks on
Transport Layer Security (TLS) and Datagram TLS (DTLS). RFC 7457 (Informa-
tional).
[52] Suphannee Sivakorn, George Argyros, Kexin Pei, Angelos D Keromytis, and
Suman Jana. 2017. HVLearn: Automated black-box analysis of hostname veri-
fication in SSL/TLS implementations. In 2017 IEEE Symposium on Security and
Privacy (SP). IEEE, 521–538.
[53] Juraj Somorovsky. 2016. Systematic fuzzing and testing of TLS libraries. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 1492–1504.
[54] Alexander Sotirov, Marc Stevens, Jacob Appelbaum, Arjen K Lenstra, David
Molnar, Dag Arne Osvik, and Benne de Weger. 2008. MD5 considered harmful
today, creating a rogue CA certificate. In Annual Chaos Communication Congress.
[55] Marc Stevens, Elie Bursztein, Pierre Karpman, Ange Albertini, and Yarik Markov.
2017. The first collision for full SHA-1. In Annual International Cryptology
Conference. Springer, 570–596.
[56] Marc Stevens, Pierre Karpman, and Thomas Peyrin. 2016. Freestart collision for
full SHA-1. In Annual International Conference on the Theory and Applications of
Cryptographic Techniques.
[57] Marc Stevens, Arjen Lenstra, and Benne Weger. 2007. Chosen-Prefix Collisions
for MD5 and Colliding X.509 Certificates for Different Identities. In Annual
International Conference on Advances in Cryptology.
[58] Cong Tian, Chu Chen, Zhenhua Duan, and Liang Zhao. 2019. Differential testing
of certificate validation in SSL/TLS implementations: an RFC-guided approach.
ACM Transactions on Software Engineering and Methodology (TOSEM) 28, 4 (2019).
[59] S. Turner and T. Polk. 2011. Prohibiting Secure Sockets Layer (SSL) Version 2.0.
https://tools.ietf.org/html/rfc6176.
[60] Mathy Vanhoef and Frank Piessens. 2017. Key Reinstallation Attacks: Forcing
Nonce Reuse in WPA2. In Proceedings of the 24th ACM Conference on Computer
and Communications Security (CCS). ACM.
[61] Mathy Vanhoef and Frank Piessens. 2018. Release the Kraken: new KRACKs in
the 802.11 Standard. In Proceedings of the 25th ACM Conference on Computer and
Communications Security (CCS). ACM.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1113[62] Louis Waked, Mohammad Mannan, and Amr Youssef. 2018. To intercept or not to
intercept: Analyzing TLS interception in network appliances. In ACM AsiaCCS.
[63] Xiaoyun Wang, Dengguo Feng, Xuejia Lai, and Hongbo Yu. 2004. Collisions for
Hash Functions MD4, MD5, HAVAL-128 and RIPEMD. IACR Cryptology ePrint
Archive (2004).
[64] Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu. 2005. Finding Collisions in the
Full SHA-1. In Annual International Cryptology Conference.
A ASSUMPTIONS AND CONSIDERATIONS OF
OUR COMPARISON FRAMEWORK
A.1 Trust anchors and issuance policies
Note that in order to keep our framework concise, we do not enu-
merate the number of trust anchors, and we do not compare the
trustworthiness of different CAs. We acknowledge that not all CAs
follow the same set of issuance policies, and some CAs might be eas-
ier to compromise than the others. Also because of this, the policies
that a CA adhere to in its daily operations will have a significant
influence over the actual security of configurations with β = Sp..
Certificate validation can be rendered pointless if the specified trust
anchors contain a CA that will issue any certificates to arbitrary
entities, including potential attackers. On the other extreme, if one
unique CA is specified as the sole trust anchor, and this turns out
to be a dedicated CA that will only sign the certificate used by
the authentication server but nothing else, then even supposedly
vulnerable configurations (the four of (_, Sp., N, _)) might turn
out to be safe from the ET attack, as the attacker will be unable
to obtain a workable certificate. This is also why those 4 nodes
are colored purple in Figure 1, to denote the fact that the actual
success of the attack depends on the policies and practices of the
specified trust anchors. This consideration is particularly important
for OSs that do not support server name checking (γ = N), as a ded-
icated CA could be the only means for achieving secure supplicant
configurations.
A.2 Phase-2 methods
Similarly, when we rank (δ = Ob.) to be better than (δ = Cl.),
we only make the distinction on whether the credentials are sent
in cleartext, and refrain from having a fine-grained comparison
on the security of possible obfuscation algorithms (e.g. different
hash digests and ciphers), as doing so will make the framework
unnecessarily complex, especially when only a handful of phase-2
methods are actually getting deployed at the time of writing.
A.3 Usability
Also note that in Figure 1, nodes are ranked only in terms of secu-
rity, not usability. For certificate validation, while programmatically
rejecting invalid ones (α = P) might put less burdens on the user,
given the same set of trust anchors and a careful user, we assume