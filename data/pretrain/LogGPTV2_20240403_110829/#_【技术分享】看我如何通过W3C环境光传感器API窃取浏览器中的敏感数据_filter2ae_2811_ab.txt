更麻烦的事实是攻击者能够提取像素完美的跨域图像和框架：关键的是，发现既定网站或图像如何寻找遭攻击的用户（我们在演示中关注图像是因为它们更容易提取）。在极端案例中，例如那些紧急访问某个账户从而使用账户恢复QR码的站点( )，攻击者就能劫持用户账户。
这种攻击跟[《像素完美定时》](https://www.contextis.com/documents/2/Browser_Timing_Attacks.pdf)论文中所使用的技术类似，它起作用的方式如下：
（1） 内嵌一个来自遭攻击域名的图像；一般来讲，这会成为不同验证用户的资源，如登录用户的头像或安全码。
（2） 使用SVG过滤器创建图像的黑白格式（SVG中的过滤器也在跨域资源中起作用）。
（3） 缩放图像，这样每个像素都可填满整个屏幕。
（4） 遍历图像中的所有像素，在用户屏幕上将它们都展示出来，并记录这个像素的光传感器读数。
（5） 从每个像素读数中撰写结果图像。
这样就能从任何允许跨域内嵌框架（没有X-Frame-Options头或者框架前身内容安全策略指令）的文档中提取所有的图像资源和数据。
**攻击详情和其它考虑因素**
既然我们演示了这些攻击，我们就可以讨论一下实际利用这种技术的考虑因素。
**检测速度**
由于我们每次都提取一点点信息，利用中的一个主要限制因素就是检测速度。原则上，浏览器传感器能够传输60Hz读取速率。然而，这不意味着我们每秒钟就能提取60位，因为最终的检测限制跟传感器能够检测到的屏幕亮度变化有关。在实验中，我们测试的屏幕亮度读数延迟是200到300毫秒，而对于一个完全可靠的利用来说，假设每500毫秒传输1位更实际。
在这个检测速率下，示例检测次数如下：
**8个字符的明文字符串：24秒（假设对于以一个已知字体呈现的字母数字字符串来说，每个字符是6位）**
**16个字符的明文字符串：48秒**
**20×20 QR码：3分钟20秒**
**之前检测1000个流行URL：8分钟20秒**
**64×64像素图像：34分钟8秒**
用户不可能会忍受一个似乎在黑白之间来回切换很长时间以检测即使很短的文本字符串的网站。然而，在某些情况下，当用户不用设备时（比如晚上将设备放到架子上），攻击者就能够提取更多的数据；恶意网站能利用scree.keepAwake
API来让它无限制显示。
未来，光传感器有可能能够测量强度或光饱和度（红色、绿色、蓝色），从而让攻击发生得更快。
**传感器读数的准确性**
虽然光传感器本身提供了准确的读数，但这种技术的一个实际困难之处在于测试过程中不断变化的光条件，以及用户会拿着设备移动的可能性（尤其是移动手机）。
我们发现结果的准确度受多个因素的影响，如屏幕亮度（屏幕越亮越对攻击有利）、传感器上方反射面的距离和角度（放在架子上的手机会从平行表面反射光从而产生好的结果；缺乏反射面会让攻击变得非常难）、以及周围光的数量（环境越暗，噪音越少，检测就越容易）。
**浏览器支持**
攻击在现代浏览器中起作用：火狐和Chrome浏览器目前会将老旧API作为环境光事件，我们在演示中也用了这一点。在火狐浏览器中不需要权限，但在Chrome中目前还要求启用chrome://flags#enable-experimental-web-platform-features标记。这个老旧的API不久之后会被替代为新的环境光传感器API，这个API目前在Chrome中实现（chrome://flags#enable-generic-sensor），它在功能上跟我们的目的一致。
我们已将安全/隐私漏洞报告提交给了[火狐](https://bugzilla.mozilla.org/show_bug.cgi?id=1357733)和[Chrome](https://bugs.chromium.org/p/chromium/issues/detail?id=713167)。
**应对措施**
当前提案认为以下的保护措施就足够了：
**限制传感器读数频率（低于60Hz）**
**限制传感器输出精度（量化结果）**
以我们所知，这些预防措施是基于研究成果漏洞报告的响应，这说明可使用陀螺仪恢复音频信号。我们的理解是Chrome提案尝试将“陀螺仪误用”的解决方案应用于其它传感器，对于所有实例来说可能不足。尝试生成构建于具体和专门风险之上的威胁模式可能并不正确。
对于光传感器来说，限制频率将不会阻止我们的攻击；即使频率低至1Hz，，也会发生同样的攻击，只不过速度会变缓。
限制输出的精准度可能是更好的解决方案，只要能保证屏幕颜色不会影响传感器的输出级别就可。可能在某些其他情况下攻击也可能实现（亮屏、反射面离屏幕很近），但在实践中的难度更大。
可能最显而易见的解决方案是要求用户给予请求访问传感器的网站权限，就像其他功能如地理位置那样。将安全和隐私考虑放到环境光传感器API规范中来记录如上的攻击风险也是稳妥的办法。
**用户建议**
在火狐浏览器中，尝试在about:config中禁用传感器——将device.sensors.enabled设置为“false”。在Chrome浏览器中，多数用户当前应该是不会受到这种攻击，除非用户手动启用了此前提及的试验性标记。
**网络开发人员建议**
为了保护文档被不受信任网站实施内嵌框架，将X-Frame-options设置为拒绝HTTP头。这样做还会阻止其它类型的攻击如点击劫持攻击。
目前尚无缓解针对图像的攻击，因为它们并不受X-Frame-Options的限制。
**总结**
所展示的攻击表明，看似无恶意的环境光传感器能让恶意网站违反同源策略、窃取跨域数据并提取用户浏览历史信息。
这里的经验就是，从隐私工程角度来设计规范和系统是一个复杂的进程：应该严肃重视在未部署任何保护措施的情况下做出将敏感API暴露到网络的决策。危险之一就是规范作者和浏览器厂商会基于过于宽泛的但不适用于某个具体新功能的原则和研究结果而做出决策（类似于陀螺仪读数保护措施并不足以保护光传感器数据）。
可能更让人兴奋的经验是，技术标准、隐私工程和隐私影响评估充满乐趣，它能让我们发现会给现实生活带来后果的微小问题。如需提供任何关于规范或功能方面的帮助，可[随时联系](https://lukaszolejnik.com/)作者。