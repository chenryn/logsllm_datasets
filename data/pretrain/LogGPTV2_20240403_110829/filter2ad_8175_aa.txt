ProjectDiscovery组织开源了很多自动化扫描的内部工具和研究，它们都是基于`Go`语言编写，并且在实际渗透中有极大的作用。我非常喜欢这个组织开源的软件，它也是我学习`Go`语言的动力之一，所以计划写一个系列文章来研究下它们的代码。
## 介绍
naabu的项目地址是：
几个特性：
  * 基于syn/connect两种模式扫描
  * 多种输入类型支持，包括HOST / IP / CIDR表示法。
  * 自动处理多个子域之间的重复主机
  * **Stdin** 和 **stdout** 支持集成到工作流中
  * 易于使用的轻量级资源
    ▶ naabu -host hackerone.com
                      __
      ___  ___  ___ _/ /  __ __
     / _ \/ _ \/ _ \/ _ \/ // /
    /_//_/\_,_/\_,_/_.__/\_,_/ v2.0.3
        projectdiscovery.io
    [WRN] Use with caution. You are responsible for your actions
    [WRN] Developers assume no liability and are not responsible for any misuse or damage.
    [INF] Running SYN scan with root privileges
    [INF] Found 4 ports on host hackerone.com (104.16.100.52)
    hackerone.com:80
    hackerone.com:443
    hackerone.com:8443
    hackerone.com:8080
## 扫描方式
扫描相关的代码在 `v2/pkg/scan`目录
### cdn check
顾名思义，跟踪一下，发现cdn检查调用的是`github.com/projectdiscovery/cdncheck`中的项目。
通过接口获取一些CDN的ip段，判断ip是否在这些ip段中
    // scrapeCloudflare scrapes cloudflare firewall's CIDR ranges from their API
    func scrapeCloudflare(httpClient *http.Client) ([]string, error) {
        resp, err := httpClient.Get("https://www.cloudflare.com/ips-v4")
        if err != nil {
            return nil, err
        }
        defer resp.Body.Close()
        data, err := ioutil.ReadAll(resp.Body)
        if err != nil {
            return nil, err
        }
        body := string(data)
        cidrs := cidrRegex.FindAllString(body, -1)
        return cidrs, nil
    }
    // scrapeIncapsula scrapes incapsula firewall's CIDR ranges from their API
    func scrapeIncapsula(httpClient *http.Client) ([]string, error) {
        req, err := http.NewRequest(http.MethodPost, "https://my.incapsula.com/api/integration/v1/ips", strings.NewReader("resp_format=text"))
        if err != nil {
            return nil, err
        }
        req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
        resp, err := httpClient.Do(req)
        if err != nil {
            return nil, err
        }
        defer resp.Body.Close()
        data, err := ioutil.ReadAll(resp.Body)
        if err != nil {
            return nil, err
        }
        body := string(data)
        cidrs := cidrRegex.FindAllString(body, -1)
        return cidrs, nil
    }
    // scrapeAkamai scrapes akamai firewall's CIDR ranges from ipinfo
    func scrapeAkamai(httpClient *http.Client) ([]string, error) {
        resp, err := httpClient.Get("https://ipinfo.io/AS12222")
        if err != nil {
            return nil, err
        }
        defer resp.Body.Close()
        data, err := ioutil.ReadAll(resp.Body)
        if err != nil {
            return nil, err
        }
        body := string(data)
        cidrs := cidrRegex.FindAllString(body, -1)
        return cidrs, nil
    }
    // scrapeSucuri scrapes sucuri firewall's CIDR ranges from ipinfo
    func scrapeSucuri(httpClient *http.Client) ([]string, error) {
        resp, err := httpClient.Get("https://ipinfo.io/AS30148")
        if err != nil {
            return nil, err
        }
        defer resp.Body.Close()
        data, err := ioutil.ReadAll(resp.Body)
        if err != nil {
            return nil, err
        }
        body := string(data)
        cidrs := cidrRegex.FindAllString(body, -1)
        return cidrs, nil
    }
    func scrapeProjectDiscovery(httpClient *http.Client) ([]string, error) {
        resp, err := httpClient.Get("https://cdn.projectdiscovery.io/cdn/cdn-ips")
        if err != nil {
            return nil, err
        }
        defer resp.Body.Close()
        data, err := ioutil.ReadAll(resp.Body)
        if err != nil {
            return nil, err
        }
        body := string(data)
        cidrs := cidrRegex.FindAllString(body, -1)
        return cidrs, nil
    }
### connect扫描
naabu的connect扫描就是简单的建立一个tcp连接
    // ConnectVerify is used to verify if ports are accurate using a connect request
    func (s *Scanner) ConnectVerify(host string, ports map[int]struct{}) map[int]struct{} {
        for port := range ports {
            conn, err := net.DialTimeout("tcp", fmt.Sprintf("%s:%d", host, port), s.timeout)
            if err != nil {
                delete(ports, port)
                continue
            }
            gologger.Debugf("Validated active port %d on %s\n", port, host)
            conn.Close()
        }
        return ports
    }
### syn扫描
syn扫描只能在unix操作系统上运行，如果是windows系统，会切换到connect扫描。
syn扫描的原理是只用发一个syn包，节省发包时间，而完整的tcp需要进行三次握手。
#### 获取空闲端口
初始化时，获取空闲端口，并监听这个端口
    import github.com/phayes/freeport
    func NewScannerUnix(scanner *Scanner) error {
        rawPort, err := freeport.GetFreePort()
        if err != nil {
            return err
        }
        scanner.listenPort = rawPort
        tcpConn, err := net.ListenIP("ip4:tcp", &net.IPAddr{IP: net.ParseIP(fmt.Sprintf("0.0.0.0:%d", rawPort))})
        if err != nil {
            return err
        }
        scanner.tcpPacketlistener = tcpConn
        var handlers Handlers
        scanner.handlers = handlers
        scanner.tcpChan = make(chan *PkgResult, chanSize)
        scanner.tcpPacketSend = make(chan *PkgSend, packetSendSize)
        return nil
    }
#### 监听网卡
获取网卡名称
SetupHandlerUnix 监听网卡
    const (
        maxRetries     = 10
        sendDelayMsec  = 10
        chanSize       = 1000
        packetSendSize = 2500
        snaplen        = 65536
        readtimeout    = 1500
    )
    func SetupHandlerUnix(s *Scanner, interfaceName string) error {
        inactive, err := pcap.NewInactiveHandle(interfaceName)
        if err != nil {
            return err
        }
        err = inactive.SetSnapLen(snaplen)
        if err != nil {
            return err
        }
        readTimeout := time.Duration(readtimeout) * time.Millisecond
        if err = inactive.SetTimeout(readTimeout); err != nil {
            s.CleanupHandlers()
            return err
        }
        err = inactive.SetImmediateMode(true)
        if err != nil {
            return err
        }
        handlers := s.handlers.(Handlers)
        handlers.Inactive = append(handlers.Inactive, inactive)
        handle, err := inactive.Activate()
        if err != nil {
            s.CleanupHandlers()
            return err
        }
        handlers.Active = append(handlers.Active, handle)
        // Strict BPF filter
        // + Packets coming from target ip
        // + Destination port equals to sender socket source port
        err = handle.SetBPFFilter(fmt.Sprintf("tcp and dst port %d and tcp[13]=18", s.listenPort))
        if err != nil {
            s.CleanupHandlers()
            return err
        }
        s.handlers = handlers
        return nil
    }
从网卡中过滤数据包 `tcp and dst port %d and tcp[13]=18`
%d 即第一步获取的空闲端口，tcp[13]=18 即tcp的第十三位偏移的值为18，即仅抓取 _TCP_ SYN标记的数据包。
#### 监听数据
通过pcap监听数据
    func TCPReadWorkerPCAPUnix(s *Scanner) {
        defer s.CleanupHandlers()