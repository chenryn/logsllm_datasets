2.3.6 Portability
systems like Windows NT and MacOS, provided
that the local Mail Transfer Agent (MTA) has some
means of running a process as a given user.
2.3.7 Logging
The complete and unmodiﬁed headers of each mes-
sage are logged. This was implemented to aid in
determining precisely which headers triggered par-
ticular rules and whatnot after the fact. At runtime,
if an error is reported, the headers causing the error
are included, but we thought there might be some
value in being able to examine the headers after the
fact, or to be able to examine the data for patterns
over a period of time. This is also consistent with
the belief that where security is a concern, it is bet-
ter not to need what one has than not to have what
one needs.
2.3.8 White Pages
This feature allows each user to have a bit of text
that would be intended as a biographical sketch
available to other insiders. Even among insiders, in-
dividual users have control over who sees their white
pages entries, by providing their preferred means of
handling requests to see their white pages entries.
Available options are:
Deny Do not let anyone (but administrators) re-
trieve the entry.
Ask Respond to each attempt to see the white
pages entry by mailing the entry’s owner and
asking for approval.
If the owner approves
the request (by replying to the request with a
“yes”), forward the entry to the requester. Re-
fusals (made by replying to the request with a
“no”) result in the requester being told that the
request has been denied by the entry’s owner. If
no answer is received in a conﬁgurable amount
of time, the requester is told that the request
has expired without a response from the entry’s
owner.
Should run unmodiﬁed on any Unix machine where
Perl 5.004 can be found. In theory, it would take
very little work for the system to run under alien
Allow Let anyone who is a subscriber of the list
view the entry.
2.3.9 Remote Administration
doesn’t verify properly.
While the software should be able to be adminis-
tered directly from the machine where it’s running,
a set of commands should be available to the ad-
ministrators, to allow them to administer the list
without having to login to the machine running the
software. Additionally, if there are changes that
need to be made on more than one machine, the
software should accept the command, and then sync
the other systems to ensure that all systems are con-
ﬁgured to agree with each other.
Because of the nature of Internet email and the po-
tential eﬀects of accepting commands from attack-
ers, the software does not execute commands un-
less it can be proven that they originated from an
administrator. For this purpose, a valid PGP dig-
ital signature is required. Recently, we have added
the ability for administrators and moderators to au-
thenticate themselves via the use of the X-Password
header mechanism. We don’t recommend use of this
mechanism; if it’s at all possible, use PGP.
2.3.10 File serving
Having ﬁles (such as system documentation, or
other ﬁles of interest) available for insiders can be
useful. Making them available via HTTP [7, 3] or
FTP [15] could be problematic, as these are not
subject to the same sorts of authentication mecha-
nisms that exist in Shibboleth. Making Shibboleth do
this itself has been most useful; requests are sent to
Shibboleth as are any other requests, and responses
are sent via email, with the requested ﬁles sent as
MIME [8] attachments.
2.3.11 PGP Signature Generation
Each list has the option of having all of its traﬃc
PGP signed [2]. That is, before Shibboleth sends
a message, it PGP signs the message with its own
key. This is an important option: all of the header
checking in the world won’t do us any good if a
user can be fooled by a simple forgery that never
went through the Shibboleth server. By enabling
the option to have all messages PGP signed, such
forgeries wouldn’t be possible to perpetrate in a way
that would fool most of the users. They’d want to
know where the signature is, or why the signature
2.3.12 Additional Sender Veriﬁcation
In addition to SMTP header checks and the use of
the X-Password header, Shibboleth supports PGP.
A message signed with PGP will be veriﬁed on the
basis of the signature’s correctness. SMTP header
checks will not be performed.
2.4 Additional Features
These are features that we should have, but have
not yet implemented.
2.4.1 Peer support
Because of the processing requirements of the sys-
tem, it is desirable to have the ability to share the
load among several machines. Perhaps one ma-
chine receives incoming mail and handles veriﬁca-
tion, while another machine receives the mail from
the ﬁrst machine and handles subsequent process-
ing. Once a more ﬁnal version of the features are
available, we’ll describe each of the parts’ interfaces,
which will show where load can be split among ma-
chines.
2.4.2 Conﬁgurable Load
The software should be conﬁgurable to be a sys-
tem pig (i.e., handle redundant tasks with parallel
processes or threads) or to be nice (i.e., process ev-
erything sequentially; do not take up extra cycles.)
2.4.3 Digest Generation
Shibboleth’s digest is diﬀerent from most systems’
digests. A digest can be requested by any user and
an index of all of the articles which have been posted
to the speciﬁed list will be returned. The user then
chooses which articles he wants by quoting the lines
containing the articles he wants to read and sending
that mail back to the digester. The digester then
sends those articles to the requester, separately.
Something we’re considering is the ability for users
to receive mail in batches, perhaps through some
sort of digest capability as described in RFC
1153 [21].
3 Implementation
We’ll limit our focus on implementation details that
we believe to be the most relevant to our goals of pri-
vacy and security, particularly where we do things
that aren’t known to be done by other mailing list
managers.
3.1 Language
Perl was chosen as the implementation language be-
cause it satisﬁed some important criteria for our ap-
plication.
Portability Well-written Perl code will run un-
changed on essentially any Unix implementa-
tion, and even on non-Unix platforms.
Safety Perl
frees the programmer from dealing
with the sorts of problems that are unrelated
to the project at hand and historically the most
problematic, including management of memory
and of ﬁxed-length buﬀers. Additionally, Perl’s
taint-checking allows us to run Shibboleth with-
out worrying about the likelihood of unveriﬁed
user data being handled unsafely.
Rich Library Perl has a rich library of modules
that allows us to work with simple interfaces to
protocols and systems we’ll be using.
Pattern Matching Perl’s sophisticated pattern-
matching capabilities are well suited to the sort
of analysis of text data that we do.
3.2 Sender Veriﬁcation
Erring on the side of paranoia, we begin with the as-
sumption that a message is from an outsider. We’ll
consider the veriﬁcation process ﬁrst and then con-
sider the noteworthy parts in more detail.
(a) If
the digital
the
sender’s identity is accepted without need
for further veriﬁcation.
signature is good,
(b) If the digital signature is bad, the mes-
sage is sent to the administrator for re-
view, with the note that the digital signa-
ture failed.
2. If the user can be identiﬁed, his nym is associ-
ated with the message. Otherwise, the message
is sent to the administrator for review with the
note that the sender could not be identiﬁed as
an insider and a “user unknown” bounce is re-
turned to the sender.
3. The Received and Message-ID headers in the
message are examined.
If any hosts that are
not in the user’s proﬁle were involved in sending
the message, the message is sent to the admin-
istrator for review, with the note that a header
didn’t match the user’s proﬁle.
4. If the user’s proﬁle contains a password, the
message is checked for the presence and cor-
rectness of an X-Password header.
3.3 Getting Mail to Shibboleth
Mailing lists typically require a few aliases to en-
sure that mail directed to the list’s address will
be delivered properly, as well as such variations as
listname-owner. Because we need Shibboleth to
process not only things directed speciﬁcally to it or
to any of its lists, but also to any other insider, we
would require a larger number of aliases.
Shibboleth has the support necessary to generate
and to maintain a separate MTA alias ﬁle.
We actually favor a newfangled option1 to all of
this alias maintenance. Most MTAs support a fea-
ture for aliasing multiple addresses to a single mail-
box. For example, in recent versions of Sendmail,
mail addressed to user, user+foo, and user+bar
all get delivered to the same place. A Usenet FAQ
describes how to do this in detail [13]. By using
this feature, a site can create a user with a preﬁx
that will be used for all of the family’s lists. Then,
addresses will be user+list or user+nym. Shibbo-
leth will generate bounces for anything that doesn’t
exist. That is, if “nym” does not exist, it is be
1. If a digital signature is present it is evaluated.
1This options is not fully implemented.
Shibboleth’s responsibility to inform the sender of
the incoming message that the intended recipient
address does not exist.
By having mail go to a user account, we can also
place the burden of managing the ID of the user
running the process on the MTA. Rather than hav-
ing to write our own setuid front-end for Shibboleth,
the MTA will perform the setuid for us. This saves
us some headaches in permissions related to aliases
and other ﬁles we need to access.
It’s also much
more easy for us to run from a single unprivileged
account this way, making all of our database ﬁles,
archives, and other data unreadable to all other sys-
tem users.
3.3.1
Identifying the User
Each user’s proﬁle, as is shown in Figure 1 con-
tains a list of Perl patterns; an address that matches
the pattern is associated with the user. This allows
users to send mail from any of their accounts, with-
out revealing how many such accounts they have,
or even giving anyone any idea that they have more
than one. This is a convenience issue, as mailing
lists that accept mail only from subscribers are typ-
ically less intelligent and require that one send mail
from the exact address that one uses to subscribe
to the list. For those who do a lot of contract work
(thus changing daytime address often), those who
send mail from both home and work, or those who
use more than one machine, our solution is much
more workable.
Headers that we examine for this case are the SMTP
envelope’s From (sometimes called From because
MTAs have historically stored the value in a From
header without a separating colon, but instead fol-
lowed by a space and a timestamp) and the mes-
sage’s From header.
3.3.2 SMTP Header Checking
wh-matt_curtin is Matt Curtin
Destination Email: PI:EMAIL
Valid addresses:
cmcurtin@interhack\.net
MX servers:
cmcurtin@\w+\.interhack\.net
cmcurtin@cis\.ohio-state\.edu
\w+\.interhack\.net
\w+\.cis\.ohio-state\.edu
X-Password:
White page access:
PGP key ID:
User is:
User subscribed:
allow
DEADBEEF
wh-hosts, wh-all,
wh-chat, wh-security
User is admin in:
wh-all
User is moderator in: wh-all
Figure 1: Typical User Proﬁle
Again, each insider’s proﬁle contains a list of Perl
patterns used to identify known SMTP relays.
If
any relay does not match one of the patterns in the
proﬁle, an error is signaled.
So,
for example,
For convenience, administrators can specify “clus-
ters”, a token that will be associated with a
list of patterns.
if an instal-
lation has some number of insiders who are all
AOL subscribers, each can have the *aol* clus-
ter in his proﬁle, and then the *aol* cluster can
be made to recognize hosts that ﬁt the pattern
\S+\.(mx|mail)\.aol\.com and mrin[0-9]+.
3.3.3 X-Password
recognize
that PGP—our preference
We
for
authentication—is not available to all. Nontechnical
members on less capable platforms might especially
have diﬃculty using PGP correctly and ﬁnding tools
that allow them to use it conveniently. Lastly and
ironically, there are companies whose security orga-
nizations have banned the use of PGP.
In an eﬀort to prevent outsiders from being able
to send mail by impersonating an insider and to
prevent insiders from impersonating each other by
means of trivial SMTP forgery, we examine each
of the headers put in place by mail relays used to
deliver the message as well as the “domain part”
(right side: that which follows @) of the Message-ID.
To provide an option for additional authentication
for those who have no capability to PGP, Shibbo-
leth supports a user-deﬁned header that contains a
password. This isn’t considered a “high-security”
option, as it’s susceptible to replay attacks [9], just
as is any reusable-password authentication scheme
whose credentials are sent in cleartext.
It is also important to note that use of PGP also
provides the feature of nonrepudiation.
If the
X-Password feature is used instead of PGP, there
is no nonrepudiation feature in the system.
3.4 Address Standardization
Several beneﬁts are realized by the address stan-
dardization feature. A common problem with mail-
ing lists is that responses to messages sent to mail-
ing lists will have both the mailing list itself and
the author of the message that prompted a response
included on the copy-to list, resulting in some sub-
scribers receiving several copies of messages in re-
sponse to theirs or of messages even further down
the thread.
the address
Implementation of
standardization
mechanism requires that all messages—both insider-
to-insider and insider-to-list—be processed by Shib-
boleth. As such, we can prevent subscribers from
receiving multiple copies of the same message, even
if the author speciﬁes a speciﬁc user’s address and
a list to which he subscribes.
Sometimes, a Shibboleth user’s shadowed address
will fall into the hands of outsiders, either by way
of oversight, perhaps a careless person forwarding
the mail to outsiders without removing such head-
ers, or intentionally. Perhaps a subscriber has been
ejected for some reason and has saved addresses of
other insiders.
An outsider sending a message to an insider or ad-
dressing one of the Shibboleth lists will receive a
“user unknown” bounce. A copy of the message
will also be sent to the list administrators. This
has proven to be an eﬀective means of prevent-
ing unwanted traﬃc from ﬁnding its way to insid-
ers. Never has unsolicited bulk email (“spam”) ever
made it to a subscriber, though some of our ad-
dresses appear to have been sold as part of at least
one spam software package; the administrators got
copies of the spam, as they would any message from
an apparent outsider, but the insiders had no idea
that the spam was ever directed their way.
Indi-
viduals who unscrupulously add others to their lists
without conﬁrmation occasionally add an insider’s
shadowed address. After receiving the bounce, the
list operator who added the shadowed address will
typically remove the address. (If not, he will just
keep getting bounces!)
If an insider sends mail that includes outsiders, the
message goes to an administrator for handling. If
the administrator approves the message, Shibboleth
will remove the outsiders’ addresses, thus preventing
any replies from insiders also being directed to out-
siders. Replies from outsiders that include insider
addresses will, of course, bounce.
3.5 Cryptographic Strength Modera-
tion
A potential weakness for any moderation scheme
is the authentication mechanism used for the mod-
erators to identify themselves and the messages
that they approve. As Shibboleth is fully inte-
grated with PGP (albeit “classic” IDEA/RSA/MD5
PGP 2.6.x), we can easily require cryptographic