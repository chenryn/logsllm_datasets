### Configuration and Usage of Application Activity Trace in IBM MQ

#### 1. Priority of Configuration Stanzas
- **AllActivityTrace Stanza**: The values specified in the `AllActivityTrace` stanza are used for the connection unless a more specific `ApplicationTrace` stanza is found.
- **ApplicationTrace Stanza**: If an `ApplicationTrace` stanza meets the matching criteria (described in points 2, 3, and 4), its values will override those in the `AllActivityTrace` stanza.

#### 2. Matching Criteria
- **ApplClass Matching**:
  - The `ApplClass` in the `ApplicationTrace` stanza is matched against the type of the IBM MQ connection.
  - If the `ApplClass` does not match the connection type, the stanza is ignored for that connection.

- **ApplName Matching**:
  - The `ApplName` value in the `ApplicationTrace` stanza is compared with the file name portion of the `ApplName` field from the API exit context structure (MQAXC).
  - The file name portion is derived from the characters to the right of the final path separator (`/` or `\`).
  - If the `ApplName` in the stanza includes a wildcard (`*`), only the characters to the left of the wildcard are compared with the equivalent number of characters from the `ApplName` of the connection.
  - For example, if the stanza value is `"FRE*"`, only the first three characters are used in the comparison. Thus, `"path/FREEDOM"` and `"path\FREDDY"` match, but `"path/FRIEND"` does not.
  - If the `ApplName` value in the stanza does not match the connection's `ApplName`, the stanza is ignored for that connection.

- **Most Specific ApplName**:
  - If multiple stanzas match the `ApplName` and `ApplClass` of the connection, the one with the most specific `ApplName` is used.
  - The most specific `ApplName` is defined as the one that uses the most characters to match the `ApplName` of the connection.
  - For example, if the ini file contains stanzas with `ApplName = "FRE*"` and `ApplName = "FREE*"`, the stanza with `ApplName = "FREE*"` is chosen for a connection with `ApplName = "path/FREEDOM"` because it matches four characters (whereas `ApplName = "FRE*"` matches only three).

- **Last Matching Stanza**:
  - If after applying the rules in points 2, 3, and 4, there is more than one stanza that matches the connection's `ApplName` and `ApplClass`, the values from the last matching stanza are used, and all other stanzas are ignored.

#### 3. Overriding Default Settings
- **Global Trace Level and Frequency**:
  - The global trace level and frequency settings under the `AllActivityTrace` stanza can be overridden for connections matching an `ApplicationTrace` stanza.
  - The following parameters can be set under an `ApplicationTrace` stanza. If they are not set, the values are inherited from the `AllActivityTrace` stanza:
    - `ActivityInterval`
    - `ActivityCount`
    - `TraceLevel`
    - `TraceMessageData`
    - `StopOnTraceMsg`

#### 4. mqat.ini Syntax
- **Commenting**:
  - Text beginning with a hash (`#`) or semicolon (`;`) is considered a comment that extends to the end of the line.
- **Stanza Key**:
  - The first significant (non-comment) line must be a stanza key.
  - A stanza key consists of the name of the stanza followed by a colon.
- **Parameter-Value Pair**:
  - A parameter-value pair consists of the name of a parameter followed by an equals sign and then the value.
  - Only a single parameter-value pair can appear on a line.
  - Leading and trailing whitespace is ignored.
  - There is no limit on the amount of white space between stanza names, parameter names, and values.
  - Line breaks are significant and not ignored.
- **Line Length**:
  - The maximum length for any line is 2048 characters.
- **Case Sensitivity**:
  - Stanza keys, parameter names, and constant parameter values are not case-sensitive, but variable parameter values (`ApplName` and `DebugPath`) are case-sensitive.

#### 5. Example Configuration
- **AllActivityTrace Stanza**:
  ```ini
  AllActivityTrace:
  ActivityInterval=1
  ActivityCount=100
  TraceLevel=MEDIUM
  TraceMessageData=0
  StopOnGetTraceMsg=ON
  ```

- **ApplicationTrace Stanzas**:
  ```ini
  ApplicationTrace:
  ApplName=amqs*
  Trace=ON
  TraceLevel=HIGH
  TraceMessageData=1000

  ApplicationTrace:
  ApplName=amqsact*
  Trace=OFF
  ```

  - The `AllActivityTrace` stanza defines the default behavior when activity trace is enabled.
  - The first `ApplicationTrace` stanza enables high-detail tracing for applications whose names start with "amqs".
  - The second `ApplicationTrace` stanza turns off tracing for applications whose names start with "amqsact".

#### 6. Performance Tuning
- **Impact of Enabling Trace**:
  - Enabling application activity trace can affect performance. The overhead can be reduced by tuning the `ActivityCount` and `ActivityInterval` settings.
- **Selective Tracing**:
  - Only trace the applications that you need.
  - Ensure at least one application is running and ready to retrieve the activity trace message data from the `SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE`.
  - Keep the queue depth as low as possible by increasing the number of applications draining the queue.
  - Set the `TraceLevel` value to collect the minimum amount of data required. `TraceLevel=LOW` has the lowest impact on messaging performance.
  - Tune the `ActivityCount` and `ActivityInterval` values to adjust how often activity trace messages are generated.

#### 7. Viewing Trace Messages
- **amqsact Sample Program**:
  - The `amqsact` program formats Application Activity Trace messages and is provided with IBM MQ.
  - The compiled program is located in the samples directory:
    - On AIX and Linux: `MQ_INSTALLATION_PATH/samp/bin`
    - On Windows: `MQ_INSTALLATION_PATH\tools\c\Samples\Bin`

- **Display Mode**:
  - By default, `amqsact` processes messages on `SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE`.
  - You can override this behavior by specifying a queue name or topic string.
  - Example command:
    ```sh
    amqsact -m TESTQM -v
    ```

- **Dynamic Mode**:
  - In dynamic mode, activity trace data is enabled at the start of the sample using a non-durable subscription to a system topic.
  - Example commands:
    ```sh
    amqsact -m QMGR1 -w 30 -a amqs*
    amqsact -m QMGR1 -w 10 -c QMGR1.TO.QMGR2
    amqsact -m QMGR1 -w 60 -i 414D5143514D475231202020202020206B576B5420000701 -v
    ```

#### 8. Subscribing to Application Activity Trace Information
- **Dynamic Subscription**:
  - From IBM MQ 9.0, you can dynamically subscribe to application activity trace information using special IBM MQ system topics.
  - Topic strings have the format:
    ```
    $SYS/MQ/INFO/QMGR/qmgr_name/ActivityTrace/resource_type/resource_identifier
    ```
  - Examples:
    - Application: `$SYS/MQ/INFO/QMGR/QMGR1/ActivityTrace/ApplName/amqsputc.exe`
    - Channel: `$SYS/MQ/INFO/QMGR/QMGR1/ActivityTrace/ChannelName/SYSTEM.DEF.SVRCONN`
    - Connection: `$SYS/MQ/INFO/QMGR/QMGR1/ActivityTrace/ConnectionId/414D5143514D475231202020202020206B576B5420000701`

- **Access Control**:
  - To subscribe to these topic strings, you must have "subscribe" authorization.
  - System topics do not inherit authorizations from the root of the queue manager topic tree. Access must be granted to an administered topic object at or deeper than the `$SYS/MQ` point in the topic tree.

By following these guidelines, you can effectively configure and manage application activity trace in IBM MQ, ensuring optimal performance and detailed monitoring.