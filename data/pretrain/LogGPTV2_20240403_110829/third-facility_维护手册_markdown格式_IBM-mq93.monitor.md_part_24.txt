1.A value specified in the AllActivityTrace stanza is used for the connection unless the value also occurs
in an ApplicationTrace stanza and the stanza fulfills the matching criteria for the connection described
in points 2, 3, and 4.
2.The ApplClass is matched against the type of the IBM MQ connection. If the ApplClass does not
match the connection type then the stanza is ignored for this connection.
3.The ApplName value in the stanza is matched against the file name portion of the ApplName field from
the API exit context structure (MQAXC) for the connection.
The file name portion is derived from the characters to the right of the final path separator (/ or
\) character. If the stanza ApplName includes a wildcard (*) then only the characters to the left
of the wildcard are compared with the equivalent number of characters from the ApplName of the
connection.
For example, if a stanza value of "FRE*" is specified then only the first three characters are used in
the comparison, so "path/FREEDOM" and "path\FREDDY" match, but "path/FRIEND" does not. If the
ApplName value of the stanza does not match the connection ApplName, the stanza is ignored for this
connection.
4.If more than one stanza matches the ApplName and ApplClass of the connection, then the stanza
with the most specific ApplName is used.
IBM MQ Monitoring and performance 207
The most specific ApplName is defined as the one that uses the most characters to match the
ApplName of the connection.
For example, if the ini file contains a stanza with ApplName = "FRE*" and another stanza with
ApplName = "FREE*" then the stanza with ApplName = "FREE*" is chosen as the best match
for a connection with ApplName = "path/FREEDOM" because it matches four characters (whereas
ApplName = "FRE*" matches only three).
5.If after applying the rules in points 2, 3, and 4, there is more than one stanza that matches the
connections ApplName and ApplClass of the connection, the values from the last matching will be
used and all other stanzas will be ignored.
Overriding default settings for each rule
Optionally, the global trace level and frequency settings under the AllActivityTrace stanza can be
overridden for those connections matching an ApplicationTrace stanza.
The following parameters can be set under an ApplicationTrace stanza. If they are not set, the value is
inherited from the AllActivityTrace stanza settings:
• ActivityInterval
• ActivityCount
• TraceLevel
• TraceMessageData
• StopOnTraceMsg
mqat.ini syntax
The syntax rules for the format of the mqat.ini file are:
• Text beginning with a hash or semicolon is considered to be a comment that extends to the end of the
line.
• The first significant (non-comment) line must be a stanza key.
• A stanza key consists of the name of the stanza followed by a colon.
• A parameter-value pair consists of the name of a parameter followed by an equals sign and then the
value.
• Only a single parameter-value pair can appear on a line. (A parameter-value must not wrap onto another
line).
• Leading and trailing whitespace is ignored. There is no limit on the amount of white space between
stanza names, parameter names and values, or parameter/value pairs. Line breaks are significant and
not ignored
• The maximum length for any line is 2048 characters
• The stanza keys, parameter names, and constant parameter values are not case-sensitive, but the
variable parameter values (ApplName and DebugPath) are case-sensitive.
Application Activity Trace File Example
The following example shows how the configuration data is specified in the Activity Trace ini file.
208 Monitoring and Performance for IBM MQ
AllActivityTrace:
ActivityInterval=1
ActivityCount=100
TraceLevel=MEDIUM
TraceMessageData=0
StopOnGetTraceMsg=ON
ApplicationTrace:
ApplName=amqs*
Trace=ON
TraceLevel=HIGH
TraceMessageData=1000
ApplicationTrace:
ApplName=amqsact*
Trace=OFF
The above AllActivityTrace stanza defines how activity trace will perform by default when enabled, either
through ApplicationTrace rules or through the queue manager ACTVTRC attribute or programmatically
enabled by an application.
The first ApplicationTrace stanza defines a rule that will result in any MQI activity by an application
whose name starts with "amqs" being traced. Trace generated for these applications will be of high
detail and include up to 1000 bytes of message data. The activity interval and count parameters will be
inherited
The second ApplicationTrace stanza defines a rule that turns trace off for applications with names
starting "amqsact" (the activity trace sample). This rule will override the earlier 'on' rule for the amqsact
application, resulting in no trace for that application.
An example is also shipped as a sample called mqat.ini in the C samples directory (the same directory
as the amqsact.c file). This file can be copied to the queue manager data directory, for queue managers
that have been migrated from an earlier release of IBM MQ.
What to do next
Enabling application activity trace can affect performance. The overhead can be reduced by tuning
the ActivityCount and the ActivityInterval settings. See “Tuning the performance impact of
application activity trace” on page 209.
Tuning the performance impact of application activity trace
Enabling application activity trace can incur a performance penalty. This can be reduced by only tracing
the applications that you need, by increasing the number of applications draining the queue, and by
tuning ActivityInterval, ActivityCount and TraceLevel in mqat.ini.
About this task
Enabling application activity trace selectively for an application or for all queue manager applications
can result in additional messaging activity, and in the queue manager requiring additional storage space.
In environments where messaging performance is critical, for example, in high workload applications
or where a service level agreement (SLA) requires a minimum response time from the messaging
provider, it might not be appropriate to collect application activity trace or it might be necessary to
adjust the detail or frequency of trace activity messages that are produced. The preset values of
ActivityInterval, ActivityCount and TraceLevel in the mqat.ini file give a default balance
of detail and performance. However, you can tune these values to meet the precise functional and
performance requirements of your system.
Procedure
• Only trace the applications that you need.
Do this by creating an ApplicationTrace application-specific stanza in mqat.ini, or by changing the
application to specify MQCNO_ACTIVITY_TRACE_ENABLED in the options field on the MQCNO structure
IBM MQ Monitoring and performance 209
on an MQCONNX call. See“Configuring activity trace behavior using mqat.ini” on page 204and“Setting
MQCONNX options to control collection of activity trace information” on page 203.
• Before starting trace, check that at least one application is running and is ready to retrieve the activity
trace message data from the SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE.
• Keep the queue depth as low as possible, by increasing the number of applications draining the queue.
• Set the TraceLevel value in the mqat.ini file to collect the minimum amount of data required.
TraceLevel=LOW has the lowest impact to messaging performance. See“Configuring activity trace
behavior using mqat.ini” on page 204.
• Tune the ActivityCount and ActivityInterval values in mqat.ini, to adjust how often activity
trace messages are generated.
If you are tracing multiple applications, the activity trace messages might be being produced faster
than they can be removed from the SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE. However, when you
reduce how often activity trace messages are generated, you are also increasing the storage space
required by the queue manager and the size of the messages when they are written to the queue.
What to do next
The simplest way to view the contents of application activity trace messages is to use the “amqsact
sample program” on page 210.
amqsact sample program
amqsact formats Application Activity Trace messages for you and is provided with IBM MQ.
The compiled program is located in the samples directory:
• On AIX and Linux MQ_INSTALLATION_PATH/samp/bin
• On Windows MQ_INSTALLATION_PATH\tools\c\Samples\Bin
Display mode
By default, amqsact in display mode processes messages on SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE.
You can override this behavior by specifying a queue name or topic string.
You can also control the trace period displayed and specify whether the activity trace messages are
removed or retained after display.
amqsact
amqsact -m QMgrName
-q QName -t TopicString
-d Depth -w Timeout -s
-b Browse -v Verbose
StartTime -e EndTime
Required parameters for display mode
-m QMgrName
Name of the queue manager.
-d Depth
Number of records to display.
210 Monitoring and Performance for IBM MQ
-w Timeout
Time to wait, in seconds. If no trace messages appear in the specified period, amqsact exits.
-s StartTime
Start time of record to process.
-e EndTime
End time of record to process.
Optional parameters for display mode
-q QName
Specify a specific queue to override the default queue name
-t TopicString
Subscribe to an event topic
-b
Browse records only
-v
Verbose output
Example output for display mode
Use amqsact on queue manager TESTQM, with verbose output, on an MQCONN API call:
amqsact -m TESTQM -v
The preceding command gives the following example output:
MonitoringType: MQI Activity Trace
Correl_id:
00000000: 414D 5143 5445 5354 514D 2020 2020 2020 'AMQCTESTQM '
00000010: B5F6 4251 2000 E601 ' '
QueueManager: 'TESTQM'
Host Name: 'ADMINIB-1VTJ6N1'
IntervalStartDate: '2014-03-15'
IntervalStartTime: '12:08:10'
IntervalEndDate: '2014-03-15'
IntervalEndTime: '12:08:10'
CommandLevel: 750
SeqNumber: 0
ApplicationName: 'IBM MQ_1\bin\amqsput.exe'
Application Type: MQAT_WINDOWS_7
ApplicationPid: 14076
UserId: 'Emma_Bushby'
API Caller Type: MQXACT_EXTERNAL
API Environment: MQXE_OTHER
Application Function: ''
Appl Function Type: MQFUN_TYPE_UNKNOWN
Trace Detail Level: 2
Trace Data Length: 0
Pointer size: 4
Platform: MQPL_WINDOWS_7
MQI Operation: 0
Operation Id: MQXF_CONN
ApplicationTid: 1
OperationDate: '2014-03-15'
OperationTime: '12:08:10'
ConnectionId:
00000000: 414D 5143 5445 5354 514D 2020 2020 2020 'AMQCTESTQM '
00000010: FFFFFFB5FFFFFFF6 4251 2000 FFFFFFE601 ' '
QueueManager: 'TESTQM'
Completion Code: MQCC_OK
Reason Code: 0
Dynamic mode
You can enable dynamic mode by specifying an application name, a channel name, or a connection
identifier as an argument to amqsact. Note that you can use wildcard characters in the name.
IBM MQ Monitoring and performance 211
In dynamic mode, activity trace data is enabled at the start of the sample by use of a nondurable
subscription to a system topic. Collecting activity trace data stops when amqsact stops. You must specify
a timeout for amqsact in dynamic mode. You can run multiple copies of amqsact concurrently, with each
instance receiving a copy of any activity trace data.
amqsact
amqsact -m QMgrName -w Timeout
-a Application name
-c Channel name -i Connection ID -v Verbose
Required parameters for dynamic mode
-m QMgrName
Name of the queue manager.
-w Timeout
Time to wait, in seconds. If no trace messages appear in the specified period, amqsact exits.
Optional parameters for dynamic mode
-a Application name
Specify an application name to collect messages for
-c Channel name
Specify a channel to collect messages for
-i Connection ID
Specify a connection to collect messages for.
-v
Verbose output
Example output for dynamic mode
The following command generates and displays activity trace messages for any connections made by
applications that start with the text "amqs". After 30 seconds of inactivity, the amqsact program ends,
and no new activity trace data is generated.
amqsactc -m QMGR1 -w 30 -a amqs*
The following command generates and displays activity trace messages for any activity on the
QMGR1.TO.QMGR2 channel. After 10 seconds of inactivity, the amqsact program ends, and no new
activity trace data is generated.
amqsactc -m QMGR1 -w 10 -c QMGR1.TO.QMGR2
The following command generates and displays verbose activity trace messages for any activity on
the existing IBM MQ connection that has a CONN of "6B576B5420000701", and an EXTCONN of
"414D5143514D47523120202020202020". After a minute of inactivity, the amqsact program ends,
and no new activity trace data is generated.
amqsactc -m QMGR1 -w 60 -i 414D5143514D475231202020202020206B576B5420000701 -v
212 Monitoring and Performance for IBM MQ
Subscribing to application activity trace information
From IBM MQ 9.0, you can dynamically subscribe to application activity trace information as an
alternative to collecting the information through queue manager level configuration.
About this task
Application activity trace traces the behavior of an application and provides a detailed view of the
parameters that are used by an application as it interacts with IBM MQ resources. It also shows the
sequence of MQI calls issued by an application.
Before IBM MQ 9.0, application activity trace is collected and read by writing activity trace PCF messages
to the system queue SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE. For more information, see “Configuring
central collection of application activity trace information” on page 202.
In addition to writing trace data to the system queue, from IBM MQ 9.0, the product provides the ability
to dynamically subscribe to activity trace data, written to special IBM MQ system topics, rather than
collecting the information through queue manager level configuration.
Note that IBM MQ 9.0 does not use exits for this purpose. If you have previously used exits to trace
application activity, you must switch to using the new method for collecting application activity trace.
Creating a subscription enables activity trace. You do not have to set queue manager or application
attributes as for central collection of trace data. However, any explicit blocking of activity trace by
disabling trace at queue manager or application levels also blocks activity trace from being delivered to
any matching subscriptions.
Procedure
• “Subscriptions to application activity trace” on page 213
• “Creating subscriptions to application activity trace” on page 214
• “Using amqsact to view trace messages” on page 215
• “Configuring trace levels using mqat.ini” on page 217
Subscriptions to application activity trace
You can subscribe to an IBM MQ system topic to collect application activity trace information.
You subscribe to a special IBM MQ system topic string that represents the activity to trace. Subscribing
automatically generates activity trace data messages and publishes them to the subscription destination
queue. If you delete the subscription, the generation of activity trace data stops for that subscription.
A subscription can trace activity on one of the following resources:
• A specified application
• A specified IBM MQ channel
• An existing IBM MQ connection
You can create multiple subscriptions, with different, or the same topic strings. Where you create multiple
subscriptions with the same system activity trace topic strings, each subscription receives a copy of the
activity trace data, and this might have adverse performance implications.
Enabling any level of activity trace might have adverse performance effects. The more subscriptions,
or the more resources subscribed to, the greater the potential performance overhead. To minimize the
overhead of collecting activity trace, the data is written to messages and delivered to the subscriptions
asynchronously from the application activity itself. Often, multiple operations are written to a single
activity trace data message. The asynchronous operation can introduce a delay between the application
operation and the receipt of the trace data that records the operation.
IBM MQ Monitoring and performance 213
Creating subscriptions to application activity trace
You can create subscriptions to specific topics to collect application activity trace data on IBM MQ 9.0.
When a subscription is created against specific system topic strings, appropriate activity trace PCF data
messages are automatically published to that subscription. For detailed information on subscribing to
topics, see Publish/subscribe messaging.
The topic strings have the format:
$SYS/MQ/INFO/QMGR/qmgr_name/ActivityTrace/resource_type/resource_identifier
Where:
• qmgr_name specifies the queue manager that the traced application is connected to. qmgr_name is
the name of the queue manager with all trailing blank characters removed and any forward slash (/)
characters replaced by an ampersand (&) character.
• resource_type specifies the type of resource data is being collected for, and is one of the following
strings:
– ApplName to specify an application. The request subscribes to all IBM MQ connections that have an
application name that matches the one specified by the resource_identifier.
– ChannelName to specify an IBM MQ channel.
– ConnectionId to specify an IBM MQ connection.
• resource_identifier identifies the actual resource. The format depends on the resource type:
– For a resource type of ApplName, the resource_identifier is the trailing part (the value that follows the
last / or \) of the application name as seen by the queue manager, with any trailing blank characters
removed. The value matches the ApplName value from the API exit context structure (MQAXC). The
ApplName of a connection is returned as the APPLTAG value when you use the MQSC command
DISPLAY CONN.
– For a resource type of ChannelName, the resource_identifier is the name of the channel to be traced.
If the channel name identifies an SVRCONN channel, all application activity for connected clients is
traced. If the channel name identifies a queue manager to queue manager channel, the incoming
and outgoing messages are traced. The resource_identifier is the channel name with all trailing blank
characters removed and any ‘/’ characters replaced by a ‘&’ character.
– For a resource type of ConnectionId, the resource_identifier is the unique connection identifier that
is assigned to each connection. The connection identifier in the topic string is the full 24-byte value
written as a hexadecimal string. This value is the concatenation of the EXTCONN followed by the
CONN values that are returned from the MQSC command DISPLAY CONN.
You can use wildcards in a resource_identifier to match multiple resource identities in a single
subscription. The wildcard can either be in the default topic style ('#' or '+') or in the character style ('*'
or '?'). When you use the topic style wildcard, it cannot be combined with part of a resource name, it
can be used only to match all possible applications, channels, or connections. The use of any wildcards
increases the level of trace data that is generated, which can affect performance.
To subscribe to these topic strings, you must have "subscribe" authorization. System topics do not inherit
authorizations from the root of the queue manager topic tree. A user must be granted access to an
administered topic object at or deeper than the $SYS/MQ point in the topic tree. You can subscribe if you
have access to the SYSTEM.ADMIN.TOPIC, although this grants access to all $SYS/MQ topic strings, not
just the activity trace. To control access more specifically, new administered topic objects can be defined
for deeper points in the tree, either for all activity trace or, for example, for a specific application name or
channel name.
214 Monitoring and Performance for IBM MQ
Examples
The following example shows a topic string for an application that is named amqsput running on a
Windows system:
$SYS/MQ/INFO/QMGR/QMGR1/ActivityTrace/ApplName/amqsputc.exe
The following example shows a topic string for a channel:
$SYS/MQ/INFO/QMGR/QMGR1/ActivityTrace/ChannelName/SYSTEM.DEF.SVRCONN
The following example shows a topic string for a connection:
$SYS/MQ/INFO/QMGR/QMGR1/ActivityTrace/ConnectionId/
414D5143514D475231202020202020206B576B5420000701
The following example shows a topic string that creates a subscription to trace data for all channels on
queue manager QMGR1:
$SYS/MQ/INFO/QMGR/QMGR1/ActivityTrace/ChannelName/#
The following example shows a topic string that creates a subscription to trace data for applications with
names that start with "amqs" (note that to use the "*" wildcard, the subscription must be created using
the character wildcard model):
$SYS/MQ/INFO/QMGR/QMGR1/ActivityTrace/ApplName/amqs*
Related concepts
“System topics for monitoring and activity trace” on page 287
System topics in queue manager topic trees are used for resource monitoring (some of which is similar to
the content of statistics messages) and as a way of consuming application activity trace.
Using amqsact to view trace messages
You can use the amqsact program with IBM MQ 9.0 to generate and view trace messages.
The amqsact program is an IBM MQ sample. To use this sample, you must use the client-connected
executable file, amqsactc. The executable file is located in the samples directory:
• On Linux and UNIX platforms, MQ_INSTALLATION_PATH/samp/bin64
• On Windows platforms, MQ_INSTALLATION_PATH\tools\c\Samples\Bin64
You can use amqsact in two ways:
Display mode
Format and display activity trace data messages that are being delivered to
SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE.
Dynamic mode