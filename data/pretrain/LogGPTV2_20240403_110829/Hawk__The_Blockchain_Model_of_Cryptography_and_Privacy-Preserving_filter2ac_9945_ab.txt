### Aborting and Financial Penalties

If a party aborts, the aborting party will face financial penalties, while the remaining parties will receive compensation. As noted in cryptography literature, such fairness guarantees are generally not achievable using only off-chain protocols, such as secure multi-party computation (MPC) [7], [17].

Hawk provides built-in mechanisms for enforcing refunds of private bids after certain timeouts. Additionally, Hawk allows programmers to define additional rules within the contract to govern financial fairness.

### Security Against Dishonest Managers

We ensure authenticity against a dishonest manager: beyond aborting, a dishonest manager cannot influence the auction outcome or the redistribution of funds, even if they collude with a subset of users. Input-independent privacy against a faulty manager is a prerequisite for this. If the manager aborts, they can be financially penalized, and the participants will receive corresponding remuneration.

An auction with these security and privacy requirements cannot be trivially implemented on existing cryptocurrency systems like Ethereum [57] or Zerocash [11]. Ethereum offers programmability but lacks transactional privacy, while Zerocash ensures transactional privacy but at the cost of reduced programmability compared to Bitcoin.

### Handling Aborts and Timeouts

Aborts are managed using timeouts. In a Hawk program, such as the one in Figure 2, timeout parameters are declared using the `HawkDeclareTimeouts` syntax. Three timeouts are defined, with T1 < T2 < T3:

- **T1**: The Hawk contract stops collecting bids after T1.
- **T2**: All users must open their bids to the manager by T2. If a user fails to open their bid by T2, their input bid is treated as 0, and any other data as ⊥, allowing the manager to proceed.
- **T3**: If the manager aborts, users can reclaim their private bids after T3.

The public Hawk contract, φpub, can also implement incentive structures. For example, in our sealed auction program, φpub defines two functions: `check` and `managerTimeOut`. The `check` function is invoked if the Hawk contract completes execution within T3, indicating that the manager did not abort. If the contract does not complete within T3, the `managerTimeOut` function is invoked. Note that all Hawk contracts implicitly have a default entry point for accepting deposits, which are held until redistributed by the contract. Bidders should verify that the manager has made a public deposit before submitting their bids.

### Additional Applications

Beyond the sealed auction, Hawk supports various other applications. More sample programs are provided in Section VI-B.

### Contributions

To the best of our knowledge, Hawk is the first system to simultaneously offer transactional privacy and programmability in a decentralized cryptocurrency system.

#### Formal Models for Decentralized Smart Contracts

We are among the first to provide a formal, academic treatment of the blockchain model of cryptography. We present a formal, Universal Composability (UC) model for the blockchain, which is of independent interest and useful for defining and modeling the security of protocols in the blockchain model. Our formal model has been adopted by the Gyges work [35] for designing criminal smart contracts.

In defining the formal blockchain model, we use the concept of "wrappers" to modularize protocol design and simplify presentation. Wrappers handle common details such as timers, pseudonyms, and global ledgers, reducing redundancy in protocol descriptions.

#### New Cryptography Suite

We implement a new cryptography suite that integrates private transactions with programmable logic. Our protocol suite includes three essential primitives: `freeze`, `compute`, and `finalize`.

- **Freeze**: Allows parties to commit to both data and coins. Committed coins are frozen in the contract, and the payout distribution is determined by the program φpriv.
- **Compute**: Parties open their committed data and currency to the manager, who computes the function φpriv. Based on the outcome, the manager constructs new private coins and submits them to the blockchain along with zero-knowledge proofs of their well-formedness.
- **Finalize**: The previously frozen coins are redistributed among the users.

Our protocol suite generalizes Zerocash, which only supports private money transfers without programmability. We define the security of our primitives using ideal functionalities and formally prove their security under a simulation-based paradigm.

#### Implementation and Evaluation

We developed a Hawk prototype and evaluated its performance through several example applications, including a sealed-bid auction, a "rock, paper, scissors" game, a crowdfunding application, and a swap financial instrument. We optimized the protocol, achieving a 10× performance improvement over a straightforward implementation. For about 100 parties, the manager's cryptographic computation (the most expensive part) takes under 2.85 minutes using 4 cores, costing less than $0.14 in EC2 time. On-chain computations are very cheap, taking under 20ms in all cases. We plan to open-source our Hawk framework in the near future.

### Background and Related Work

#### Background

Bitcoin offers limited programmability through a scripting language that is neither Turing-complete nor user-friendly. Previous efforts to create smart contract-like applications on Bitcoin (e.g., lottery [7], [17], micropayments [4], verifiable computation [40]) highlight the difficulty of retrofitting Bitcoin’s scripting language, motivating the need for a Turing-complete, user-friendly smart contract language.

Ethereum is the first Turing-complete decentralized smart contract system. With Ethereum’s launch, numerous smart contract applications are being developed, such as prediction markets [3], supply chain provenance [6], crowd-based fundraising [1], and security and derivatives trading [28].

#### Security of the Blockchain

Like earlier works, we rely on the underlying decentralized blockchain to be secure, assuming the consensus protocol is secure when an adversary does not control a large fraction of the computational power. Existing cryptocurrencies are designed with heuristic security, and researchers have identified various attacks [29], [34]. Efforts to formally understand the security of blockchain consensus have also begun [32], [45].

#### Minimizing On-Chain Costs

Since every miner executes smart contract programs while verifying transactions, cryptocurrencies like Bitcoin and Ethereum collect transaction fees correlated with the cost of execution. While we do not explicitly model these fees, we design our protocols to minimize on-chain costs by performing most heavy-weight computations off-chain.

#### Additional Related Works

Several prior works have explored leveraging blockchain for financial fairness. For example, Bentov et al. [17], Andrychowicz et al. [7], Kumaresan et al. [40], Kiayias et al. [36], and Zyskind et al. [59] show how Bitcoin can ensure fairness in MPC protocols. These protocols perform off-chain secure computation but do not guarantee transactional privacy. They either lack system implementations or provide specific applications (e.g., lottery). In contrast, Hawk offers a generic platform for non-specialist programmers to develop privacy-preserving smart contracts.

#### Smart Contracts

The idea of programmable electronic "smart contracts" dates back nearly twenty years [53]. Recent decentralized cryptocurrencies ensure authenticity but not privacy, while other smart contract implementations rely on trusted servers [46]. Our work realizes the vision of parties interacting with a trustworthy "virtual computer" that executes programs involving money and data.

#### Programming Frameworks for Cryptography

Several works have developed programming frameworks that generate cryptographic implementations from high-level specifications, including compilers for MPC [19], [39], [41], [51], authenticated data structures [44], and (zero-knowledge) proofs [12], [30], [31], [49]. Zheng et al. [58] show how to generate secure distributed protocols for applications like sealed auctions, battleship games, and banking. These works support various security notions but do not interact directly with money or leverage public blockchains for financial fairness. Thus, our work is among the first to combine the "correct-by-construction" cryptography approach with smart contracts.

#### Concurrent Work

Our framework is the first to provide a full-fledged formal model for decentralized blockchains, as embodied by Bitcoin, Ethereum, and other popular cryptocurrencies. In concurrent and independent work, Kiayias et al. [36] also propose a blockchain model in the (Generalized) UC framework and derive similar results [37]. However, their formalism is limited to fair MPC with public deposits, whereas ours is designed for a broader range of protocols. Both our real-world and ideal-world wrappers model the presence of arbitrary user-defined contract programs, and our formalism has been adopted by the Gyges work [35].

### The Blockchain Model of Cryptography

#### The Blockchain Model

We begin by informally describing the trust model and assumptions, then propose a formal framework for the "blockchain model of cryptography" for specifying and reasoning about the security of protocols.

- **Blockchain**: A decentralized set of miners running a secure consensus protocol to agree on the global state. The blockchain is trusted for correctness and availability but not for privacy.
- **Time**: The blockchain is aware of a discrete clock that increments in rounds (epochs).
- **Public State**: All parties can observe the state of the blockchain, including the public ledger and the state of any user-defined blockchain program.
- **Message Delivery**: Messages sent to the blockchain arrive at the beginning of the next round. An adversary may reorder messages within the same round, attempting front-running attacks.
- **Pseudonyms**: Users can create an unbounded polynomial number of pseudonyms.
- **Correctness and Availability**: The blockchain performs prescribed computations correctly and is always available.

#### Advantages of a Generic Blockchain Model

We adopt a generic blockchain model where the blockchain can run arbitrary Turing-complete programs. This contrasts with previous and concurrent works [7], [17], [40], [50] that retrofit Bitcoin’s limited scripting language. Our generic model yields more efficient cryptographic protocols, as demonstrated in Section VII and the online version [37].

#### Formally Modeling the Blockchain

We use a carefully designed notational system to make our constructions understandable without delving into the precise details of our formal modeling. We provide formal, precise specifications of functionality and security, and our protocols are proven secure under the UC framework. This contributes a formal, UC-based framework for describing and proving the security of distributed protocols that interact with a blockchain, which we call "the blockchain model of cryptography."

#### Programs, Wrappers, and Functionalities

- **Ideal Program (Ideal)**: Describes the ideal specification.
- **Blockchain Program (B or Blockchain)**: Describes the program executing on the blockchain.
- **User/Manager Program (UserP)**: Describes the user-side or manager-side protocol.

Wrappers transform these programs into UC-style functionalities or protocols:

- **Ideal Wrapper F(·)**: Transforms IdealP into a UC ideal functionality F(IdealP).
- **Blockchain Wrapper G(·)**: Transforms B into a blockchain functionality G(B).
- **Protocol Wrapper Π(·)**: Transforms UserP into a user-side or manager-side protocol Π(UserP).

Wrappers implement common features needed by every smart contract application, such as time, public ledger, pseudonyms, and adversarial reordering of messages, reducing redundancy.

#### Conventions for Writing Programs

Our wrapper-based system modularizes notation and uses simple conventions for writing user-defined ideal programs, blockchain programs, and user protocols.

- **Timer Activation Points**: The ideal and blockchain wrappers implement a clock that advances in rounds. Every time the clock advances, the Timer activation point is invoked, allowing the definition of timeout operations (e.g., refunding money after a certain timeout).

For detailed formal models and proofs, refer to Appendix B.