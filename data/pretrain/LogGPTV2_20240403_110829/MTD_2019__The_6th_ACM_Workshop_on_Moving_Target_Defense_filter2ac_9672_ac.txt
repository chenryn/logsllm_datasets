Event-based
Hybrid-based
Fig. 3. Classiﬁcations of Timeliness-based MTD.
contexts (e.g., under the assumption of trusted entities for
key management).
• Providing another layer of defense in cooperation with
existing defense mechanisms. At the same time, MTD
can cooperate with other defense mechanisms by assisting
in intrusion detection that can thwart potential attackers
and/or provide new attack patterns observed during the
reconnaissance stage of the attack. In addition, MTD can
add another layer of defense when a defensive deception is
used to deceive an attacker. In particular, when the attacker
realized the deception and can successfully identify vulner-
able system component, not being lured by the deception
(e.g., a honeypot), MTD can be executed to migrate the
system platform in order to invalidate the information of
the system vulnerabilities collected by the attacker in the
current system conﬁguration.
However, we also need to be aware of the following caveats
in developing MTD techniques:
• High frequency of triggering MTD operation may signiﬁ-
cantly hinder seamless, quality service provision to users.
This issue is related to a design principle related to ‘when
to move’ a target because triggering MTD operations too
often naturally leads to reducing service availability and/or
interrupting seamless service provision.
• Non-adaptive, non-intelligent MTD may waste defense
cost while not decreasing system vulnerabilities. In some
system / network settings, resources are highly constrained,
such as IoT environments or mobile, wireless networks. The
strategy in deciding how to expend defense resources is
critical to prolonging system lifetime and increase system
reliability (or survivability). If a deployed MTD is not
adaptively and/or intelligently executed based on a level of
detected security vulnerabilities, then the required system
goals, such as minimizing defense cost and maintaining a
certain level of system security, may not be met.
• How to execute MTD operations in resource-constrained,
distributed network environments has not been suf-
ﬁciently studied in the literature. Most existing MTD
approaches consider a trusted third party for network
management associated with running an MTD technique.
However, in some decentralized or distributed, resource-
constrained environments, such as mobile ad hoc networks,
wireless sensor networks, or IoT networks, it is not easy
to identify a trusted infrastructure that can make critical
decisions on MTD executions. Further, the cost of executing
MTD operations should be considered as a priority as those
contested environments can only afford highly lightweight
MTD solutions.
Fig. 2. An example of an adaptive MTD: A blue vertical line represents a
proactive MTD which is triggered at ﬁxed MTD interval whereas a red line
presents a reactive MTD which is triggered on an event (e.g, an intrusion
detection alert).
the attacker quickly expires [100], thus regular movement is
important. Proactive MTD moves regardless of the presence
of an attacker costing additional delay in the protected
system. The hybrid adaptation is based on both reactive
and proactive features, wherein the time interval to trigger
an MTD operation is adaptive upon certain events or security
alerts while the interval is also bounded in length to prevent
potential, undetected security threats [171]. Fig. 2 shows
an example of ‘when to move’ which addresses at what
time point the element(s) of MTD can be moved under
hybrid adaptations [4, 69]. In Fig. 2, a blue line means an
MTD can be triggered at a ﬁxed MTD interval whereas
an orange line shows an MTD triggered by an event (e.g.,
an intrusion detection alert). Intuitively, we can notice that
using the ﬁxed MTD interval is more proactive than using
the adaptive MTD interval in confusing attackers. However,
high frequency of MTD operations may incur high cost.
Hence, an optimal MTD interval can be identiﬁed at run-
time to balance both cost and security. A running system
can have different moving elements (e.g., IP, Port, OS, VM,
Applications) over the time, and their changes can take place
either at a regular ﬁxed interval of time or upon receiving
an intrusion detection alert.
C. Discussions: Beneﬁts and Caveats of MTD
In this section, we discuss the key beneﬁts of MTD and
caveats in developing MTD techniques, in relation with the
roles and design principles of MTD techniques.
The key beneﬁts of MTD techniques include as follows:
• Providing affordable defense opportunities. Compared
to conventional security mechanisms aiming to perfectly
eliminate any vulnerabilities and risks that can be introduced
by attackers, MTD provides a new perspective of a defense
system by continuously changing the attack surface, which
makes it harder for attackers to achieve their goals. MTD
allows us to leverage legacy system components and existing
technologies, enabling a greater likelihood of achieving
affordable defense solutions and avoiding the necessity of
creating a new, highly robust security mechanism, such
as cryptographic solutions, which requires more resource
time to develop but may be less applicable in broad
/
III. CLASSIFICATION TYPES OF MTD
MTD techniques have been studied under various classiﬁ-
cations with different criteria. In this section, we discuss how
the MTD techniques have been classiﬁed in the literature. In
addition, we distinguish the concepts of MTD from those of
deception and discuss what the commonalities and differences
are between them.
A. Timeliness-based MTD
Timeliness-based MTD classiﬁes MTD techniques based on
criteria to determine ‘when to move.’ Fig. 3 depicts the three
common timeliness-based MTD categories as follows:
• Time-based: This approach triggers an MTD operation
based on a certain time interval called the MTD interval
which can be a ﬁxed interval or a variable interval [22].
With a ﬁxed time interval, the MTD mechanism periodically
changes the attack surface (e.g., IP/Port addresses, OS
rotation, VM migration) with a constant equal time which
remains unchanged. If the interval time is too large, then an
attacker may be allowed a sufﬁcient amount of time to scan
a system and then penetrate into the system, resulting in a
security breach. On the other hand, if the interval time is too
small, then the MTD triggers even when there is no attack
on the system, wasting defense resources and degrading
performance. Therefore, determining the MTD interval time
to perform an MTD operation has a signiﬁcant impact on the
effectiveness and efﬁciency of a given MTD technique [23].
• Event-based: This approach performs an MTD operation
only when a certain event occurs. The event can encompass
any indication an attacker accesses a system or attempts
to launch a certain attack. That
if the defender can
accurately predict potential attacks, then events can trigger
the appropriate MTD operation. In order to discover the key
events that should trigger the MTD action, attack prediction
based adaptive MTD approaches have been proposed using
machine learning [36], game theory [168], and control
theory [129].
• Hybrid: Some MTD approaches take a hybrid strategy.
[87, 129, 170, 171] execute MTD
These approaches
operations adaptively based on both the time and event-
based MTD strategies for proactive and reactive adaptations,
respectively.
is,
B. Operation-based MTD
Operation-based MTD classiﬁes MTD techniques based on
criteria to determine ‘how to move’. Hong and Kim [69]
labeled three types of MTD techniques based on the nature
of the operations: shufﬂing, diversity, and redundancy. Each
type is detailed as follows:
• Shufﬂing: This technique rearranges or randomizes system
conﬁgurations, such as mutating IP addresses at a TCP/IP
layer or dynamically adjusting the migration time of VMs.
The key goal of these shufﬂing-based MTD techniques is
to increase confusion and uncertainty for attackers (i.e., to
make the identiﬁcation of vulnerable targets more difﬁcult)
by making information collected by the attackers obsolete or
7
Resilience / Robustness
Diversity
Shufﬂing
Redundancy
Performance / Efﬁciency
Reliability / Availability
Fig. 4. Relationships between Shufﬂing, Diversity and Redundancy (SDR).
by wasting attackers resources in the collection of useless in-
formation. Ultimately, shufﬂing-based MTD can prevent or
delay the attackers from accessing a target system. Because
the system earns more time to monitor the attack behaviors
(e.g., scanning attacks), the system’s defense mechanisms
(e.g., IDS) can prepare more intelligent strategies to deal
with the attack based on identiﬁed attacks.
• Diversity: This technique employs the deployment of system
components with different
implementations that provide
the same functionalities. The examples include the use of
diverse paths for routing or the change of platforms consist-
ing of different implementation of software components or
migration between different platforms (i.e, software stacks
and/or hardware). Diversity-based MTD aims to enhance
system resilience by increasing fault-tolerance in that the
system can provide normal services in the presence of
attackers in the system.
• Redundancy: This technique provides multiple replicas of
system (or network) components, such as multiple paths
between nodes in a network layer or multiple software com-
ponents providing the same functionality at the application
layer. The key aim of redundancy-based MTD is to increase
system dependability (e.g., reliability or availability) by
providing redundant ways of providing the same services
when some of the network nodes or system components
are compromised. In this sense, redundancy contributes to
increasing system (or network) resilience in the presence
of insider threats. This technique can often be combined
with diversity-based MTD so that, for example, redundant
services are available where the attackers are required to
know additional credentials or intelligence to use other al-
ternative components (e.g., different or additional credentials
or a different level of privileges).
Although these three types of MTD operations can be
used to classify MTD techniques (see Section IV), they often
support each other directly or indirectly in realizing their
respective goals. We summarize the connections between the
SDR types and their goals in Fig. 4.
First, the concept of diversity is adopted from the principle
that the diversity of system components can enhance security
(i.e., software polyculture enhances security [50, 56, 147]),
leading to high system resilience (or robustness) even in the
presence of attacks. If system diversity is high, there exists
a variety of alternatives to the provision of the same service,
such as multiple routes from a source to a destination to deliver
a message.
Second, shufﬂing also can enhance diversity because how to
rearrange system components can affect the degree of system
diversity. For example, a platform migration using a shufﬂing
technique leads to higher diversity. How to shufﬂe targets is
closely related to how much cost incurs from shufﬂing the
targets and, accordingly, how much it can enhance security
or interrupt services to normal users. The effectiveness of
shufﬂing is also affected by how diverse a target is in nature.
For example, given a network, we want to increase the number
of different types of software that provides the same set of
services. But if we only have one or two software types, then
there is an inherent limitation of the performance achievable
by the shufﬂing operation. On the other hand, if the shufﬂing is
optimally performed, system diversity also increases, leading
to higher system resilience against attacks.
Finally, high diversity and effective shufﬂing are critical
to increasing redundancy for achieving higher reliability (or
availability) while properly dealing with attackers. Particularly,
if redundancy is high with low diversity due to a poor or no
shufﬂing technique, it can be also leveraged by the attackers
to persistently use alternate ways to get
into the system.
Therefore, these three types of techniques, shufﬂing, diversity,
and redundancy, namely SDR, impact each other and should be
considered in combination to properly enhance system security
or resilience.
C. MTD vs. Deception
MTD and deception techniques have been used without
clear distinction. To clarify this distinction, we brieﬂy describe
what deception is and how it has been used as a defensive
technique in the literature. More importantly, we discuss
what are different and common between MTD and defensive
deception in terms of their purposes and strategies.
1) Defensive Deception: In military settings, deception is
originally derived from actions to be executed to intentionally
mislead an opponent’s decision associated with strengths and
weakness of military capacities, intents, and/or operations.
Defensive deception is created to affect an attacker’s action in
a way a defender wants to achieve its mission [139]. Deception
has been studied based on a number of classiﬁcations.
Bell and Whaley [19] and Almeshekah and Spafford [8]
discuss deception techniques in terms of either ‘hiding the
real’ or ‘showing the false.’ That is, the defender can mod-
ify information and/or present misleading information to the
attacker. For example, the defender can mislead the attackers
to misjudge by providing a false sense that the attacker has
complete, certain, relevant information for its decision making,
which is not true indeed.
Caddell [21] classiﬁes deception in terms of ‘passive decep-
tion’ and ‘active deception.’ The passive deception includes
actions to hide capabilities or intents from the attacker. The
active deception involves leading the attacker to form false
beliefs by providing false information. Daniel and Herbig [42]
8
introduce two types of deception techniques based on their
goals, aiming to increase an attacker’s perceived ambiguity
and to mislead the attacker to misjudge.
Rahman et al. [126] proposed a game-theoretic approach
using Nash equilibrium strategy as a deception technique to
prevent remote OS ﬁngerprinting attacks. They showed that
the designed technique named DeceiveGame can signiﬁcantly
decrease the ﬁngerprinter attack success probability while the
overall usability of the system is preserved without perfor-
mance degradation. Bell and Whaley [19] and Almeshekah and
Spafford [8] show some other example deception techniques
that dissimulate information in order to hide real information
and simulate information to make the attacker form false
beliefs. Examples of dissimulation deception are masking (i.e.,
hiding the real), repackaging (i.e., creating the false), and
dazzling (i.e., confusing an attacker) [8, 19]. Examples of
the simulation deception include mimicking (i.e., imitating the
real), inventing (i.e., creating the false), and decoying (i.e.,
luring) [8, 19]. Based on our discussion above, we can ﬁnd the
commonalities and differences between deception and MTD as
below.
2) Commonalities between MTD and Deception: Both ap-
proaches have the same goal to confuse attackers by increasing
their uncertainty in the decision process of launching attacks.
Hence, the deception techniques used for increasing confusion
can also belong to MTD. In addition, even if the deception
techniques are used to mislead attackers but they are also being
dynamically deployed (i.e., a different set of decoy nodes is
deployed at a different time [52]), they can be treated as MTD
techniques.
3) Differences between MTD and Deception: Although
these two defense techniques are common in their goal,
deception takes a more aggressive strategy than MTD in terms
of intentionally presenting false information for the attacker
to form false beliefs while MTD does not use a strategy of
lying or disseminating false information to mislead attackers.
But these two defense mechanisms can work together well to
beneﬁt each other in the following sense. Deploying deception
can be less costly than MTD operations and can help MTD to
save its cost because the attack can be delayed if an attacker
is successfully deceived by the deployed defensive deception
and accordingly MTD does not have to be triggered as often
as the system without deception [30]. In addition, the defense
strength achievable by defensive deception is limited in nature
because the deception can be ultimately known to the attacker
sometime later. When the attacker found it was deceived by the
defensive deception, the system can trigger an MTD operation
to protect the system without security breach.
D. Discussions on MTD Classiﬁcations
While the timeliness-based MTD categorizes MTD tech-
niques based on the principle of ‘when to move,’ the operation-
based MTD classiﬁes MTD techniques by answering ‘how to
move.’ In the timeliness-based MTD, when a defender has
high uncertainty about an attacker’s current activities and/or
behaviors, it is better to trigger an MTD operation based on
a certain, ﬁxed time interval. However, after the defender
becomes certain about the attack patterns / activities, it can
detect the system’s vulnerabilities more accurately. And then,
the defender can adaptively execute the MTD operation to