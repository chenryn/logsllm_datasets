# UEFI and Secure Boot Security Analysis

## Overview
This document provides an in-depth analysis of UEFI (Unified Extensible Firmware Interface) and Secure Boot, focusing on potential vulnerabilities and methods to exploit or mitigate them. The content is organized into several sections for clarity.

## UEFI Bootkit and Secure Boot
- **UEFI Bootkit**: A malicious firmware that can be loaded before the operating system.
- **Modified Firmware**: If the firmware does not enforce Secure Boot, it can allow unauthorized code execution.
- **Secure Boot**: A security standard that ensures only trusted software can run during the boot process.

### Key Components
- **Hardware I/O, Memory, Network, Graphics**
- **UEFI DXE Core/Dispatcher**: Manages the loading of drivers and applications.
- **UEFI OS Loaders**: Responsible for loading the operating system.
- **System Firmware (SEC/PEI)**: Initial stages of the UEFI boot process.
- **DXE Driver**: Drivers loaded by the DXE core.
- **Signed BIOS Update**: Ensures that only authorized updates are applied.
- **OS Kernel and Drivers**: The core of the operating system and its components.
- **OS Exploit**: Vulnerabilities in the OS that can be exploited.

## Disabling Secure Boot
### Methods
- **BIOS Setup**: Turn On/Off Secure Boot in the BIOS setup menu.
- **SecureBootEnable UEFI Variable**: This variable controls the state of Secure Boot.
  - **Note**: If the `SecureBootEnable` variable is not present, the BIOS stores the Secure Boot enable flag in the SPI Flash as a non-volatile (NV) variable.
  - **Steps**:
    1. Dump the SPI flash with Secure Boot ON and OFF.
    2. Compare the two SPI flash images to identify changes.

### Tools
- **Chipsec Utility**:
  - `chipsec_util.py spi dump spi.bin`: Dumps the SPI flash.
  - `chipsec_util.py uefi nvram spi.bin`: Extracts NVRAM from the SPI flash.
  - `chipsec_util.py decode spi.bin`: Decodes the SPI flash image.

## Secure Boot Image Verification Policies
- **DxeImageVerificationLib**: Defines policies for different types of images.
- **Policies**:
  - `IMAGE_FROM_FV (ALWAYS_EXECUTE)`, `IMAGE_FROM_FIXED_MEDIA`, `IMAGE_FROM_REMOVABLE_MEDIA`, `IMAGE_FROM_OPTION_ROM`
  - `ALWAYS_EXECUTE`, `NEVER_EXECUTE`, `ALLOW_EXECUTE_ON_SECURITY_VIOLATION`, `DEFER_EXECUTE_ON_SECURITY_VIOLATION`, `DENY_EXECUTE_ON_SECURITY_VIOLATION`, `QUERY_USER_ON_SECURITY_VIOLATION`

### Modifying Image Verification Policies
- **Read "Setup" UEFI Variable**: Look for specific sequences like `04 04 04`, `00 04 04`, `05 05 05`, `00 05 05`.
- **Modify Policy Bytes**: Change the bytes corresponding to policies to `00` (ALWAYS_EXECUTE).
- **Write Modified "Setup" Variable**:
  - `chipsec_util.py uefi var_set Setup EC87D643-EBA4-4BB5-A1E5-3F3E36B20DA9 <modified_data>`

## Bypassing Secure Boot via PE/TE Header Confusion
- **PE/COFF vs. TE Headers**: The BIOS allows running TE (Terse Executable) images without signature checks.
- **Exploit**:
  - Convert a malicious PE/COFF EFI executable to TE format.
  - Replace OS boot loaders with the TE EFI executable.
  - The executable will load and patch the original OS boot loader, bypassing Secure Boot.

## Other Secure Boot Problems
- **CSM (Compatibility Support Module)**: Allows legacy OS boot through unsigned MBR and option ROMs.
- **Mitigations**:
  - Force CSM to Disabled if Secure Boot is Enabled.
  - Implement `isCSMEnabled()` function always returning FALSE in Secure Boot.
  - Never fall back to legacy boot if UEFI executable verification fails.

## Clearing Platform Keys
- **Clear Secure Boot Keys**: Takes effect after a reboot.
- **Restore Default Keys**: Triggers the restore of Secure Boot keys to their default values.
- **Implementation Bug**: The system may beep three times and continue booting with modified Secure Boot settings.

## Handling Sensitive Data
- **BIOS Keyboard Buffer**: Stores keystrokes in the BIOS data area.
- **Exposure**: Some BIOSes do not clear the keyboard buffer, leading to potential exposure of pre-boot passwords.
- **Tool**: `chipsec_main -m common.bios_kbrd_buffer` to check for exposed passwords.

## SMI Handlers
- **System Management Interrupt (SMI) Handlers**: Potential vulnerabilities in SMI handlers.
- **Coordination**: Ongoing with independent BIOS vendors and platform manufacturers.

## Kernel Privileges
- **Kernel Privileges Required**: Exploits generally require access to hardware resources.
- **Signed OS Driver**: A legitimate signed driver can act as a confused deputy, allowing user-mode exploits.

## References
- **CHIPSEC Framework**: https://github.com/chipsec/chipsec
- **MITRE Copernicus Tool**
- **NIST BIOS Protection Guidelines (SP 800-147 and SP 800-147B)**
- **Windows Hardware Certification Requirements**
- **UEFI Forum Sub-teams**: USST (UEFI Security) and PSST (PI Security)
- **UEFI Firmware Security Best Practices**

### Research Papers and Presentations
- **Security Issues Related to Pentium System Management Mode (CSW 2006)**
- **Implementing and Detecting an ACPI BIOS Rootkit (BlackHat EU 2006)**
- **Hacking the Extensible Firmware Interface (BlackHat USA 2007)**
- **Persistent BIOS Infection (Phrack66)**
- **A New Breed of Malware: The SMM Rootkit (BlackHat USA 2008)**
- **Attacking Intel BIOS (BlackHat USA 2009)**
- **Getting Into the SMRAM: SMM Reloaded (CSW 2009)**
- **Analysis of building blocks and attack vectors associated with UEFI (SANS Institute)**
- **(U)EFI Bootkits (BlackHat USA 2012, SaferBytes 2012, HITB 2013)**
- **Defeating Signed BIOS Enforcement (PacSec 2013, Ekoparty 2013)**
- **All Your Boot Are Belong To Us (CanSecWest 2014 Intel and MITRE)**
- **Setup for Failure: Defeating Secure Boot (Syscan 2014)**
- **Extreme Privilege Escalation (BlackHat USA 2014)**

---

Thank you for your attention. For more information and further reading, please refer to the provided references and research papers.