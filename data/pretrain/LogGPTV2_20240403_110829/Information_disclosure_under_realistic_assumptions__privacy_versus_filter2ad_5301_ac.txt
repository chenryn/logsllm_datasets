compute a p-optimal DDF if we relax this assumption on
T . We now develop another algorithm, which is based on
forward traversal of T and for which we are able to relax
the assumption on T .
It is easier to check the p-safety property under the as-
sumption that p is set-monotonic, when T is forward tra-
versed. However, as the following example shows, if a dis-
closure algorithm does only one forward traversal of T , we
cannot always guarantee p-safety.
Figure 5 gives an example of this situation. Assume that
the safety predicate p is true for D′ if |D′| ≥ 2. The diagram
describes a DDF A based on the one-time forward traversal.
The leftmost column indicates that for the database state
d1, the DDF returns Tn (indicated with a solid circle). Sim-
ilarly, the DDF returns Ti for d2, d3, and d4. Clearly, the
disclosure set DS(A, d1) = {d1} violates the safety predi-
cate p. Therefore, DDF A is not p-safe.
Interestingly, in
the case of database state d1, no information is explicitly
returned to the user. Yet, the adversary can still infer that
the true database state is d1 from just the knowledge of the
algorithm.
To deal this, we can modify the DDF as follows. We select
a subset D′ = {d2, d3, d4} of D, take the subset D′′ = D′ ∪
{d1}, and then split them into two sets (D′, D′′) using the
notion of at-large-split, where D′′ = {d3, d4}, D′ = {d1, d2}.
For d3, d4, the new DDF will return D′′ same as the original
DDF. For d1, d2, the new DDF will return Ti+1, which is
the earliest disclosure schema in which both d1 and d2 are
in the same partition. Algorithm 3 given in Figure 6 follows
this intuition.
Claim 4. Given a problem setting (D, D, T ), a safety pred-
icate p that is p set-monotonic and easy-split, Algorithm 3
returns a p-optimal DDF in polynomial time in |D| = m and
|T | = n.
Proof sketch. From the algorithm, observe that ∀d ∈
D:
∃D′ ⊆ D, p(D′) ∧ d ∈ D′ ∧ (∃Ti, si
j ∈ Ti, t[d] = Ti ∧ D′ ⊆ si
j)
d ∈ D A′′
1 (d)
T2
22030
22031
T2
T5
22040
T5
23000
24000
T5
Table 4: The DDF A′′
1
t[D] ← Tn;
For i = 1 to n do
T ′; //element of T
01.Input: T ,D,p,n;
02.Output: t; //output DDF, represented by an array on D
03.Var: D′,D∗,C; //subset of D
04.
05.Begin
06.
07. D′ ← D;
T ′ ← Tn;
08.
09. C ← D;
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20. Return t[D];
21.End.
For j = 1 to ni do
j ) do
C ← D′ ∩ si
j ;
T ′ ← Ti;
t[C] ← Ti;
D′ ← D′ \ C;
If p(D′ ∩ si
End If
End For
End For
Figure 7: Algorithm 4
Deﬁnition 11. Given a problem setting (D, D, T ), a safety
predicate p that is set-monotonic, we say that p is Tn-safe,
if the following condition holds: there exists D′ ⊆ D such
that
∀d′ ∈ D′, ∀Ti ∈ T \ {Tn}, ∀si
d′ ∈ si
j ⇒ p(si
p(D′) = true.
j) = f alse;
j ∈ Ti,
3.3 Designing p-optimal Algorithms
By deﬁnition, a p-optimal algorithm deﬁnes a p-optimal
DDF. When we talk about a p-optimal algorithm, we are
more concerned with eﬃciency. Note that the algorithms
presented so far do not deﬁne a p-optimal DDF, but rather
compute a p-optimal DDF. Whereas, in practice we typically
need an algorithm that deﬁnes a p-optimal DDF; i.e., an
algorithm that given a problem setting, safety predicate p,
and a database state, returns a disclosure schema Ti.
A naive p-optimal disclosure algorithm can ﬁrst compute
a p-optimal DDF, e.g, using algorithms given in Section 3,
and then use the output DDF data structure to return a
disclosure schema for an input database state x. Such a
disclosure algorithm, however, will have the complexity of
the algorithm to compute p-optimal DDF. A more eﬃcient
p-optimal algorithm can be based on the following steps,
under the assumption that p is set-monotonic and Tn-safe.
• Traverse T from T1 to Tn−1:
– If p(t(T1, x)) return T1;
– Otherwise, for every Ti, construct a set D′ ⊆
t(Ti, x) such that every no database state in D′
has output schema prior to Ti;
– if p(D′) then return Ti;
• return Tn (i.e., no prior Ti was returned for x)
Note that an algorithm following the above steps will de-
ﬁne a p-optimal DDF under the speciﬁed conditions. Also,
it has better average complexity than that of the naive al-
gorithm, which is based on computing the entire p-optimal
DDF. However, the worst case complexity is still the same
as that of the algorithm to compute a p-optimal DDF, which
is polynomial in the size of D and T .
In some cases the size of D may be relatively small, in
which case even the naive algorithm may be acceptable.
However, in the worst case, for the general problem setting
we have considered, the size of D may be exponential in the
size of a single database state. We therefore conclude that a
more domain-speciﬁc problem setting is necessary for better
complexity.
We say that p is Tn-safe for T .
In other words, there exists a set D′ that satisﬁes p and
such that any p-safe DDF returns Tn for every element in
D′.
The property of p being Tn-safe is used in Algorithm 4
(Figure 7), which simpliﬁes Algorithm 3.
Claim 5. Given a problem setting (D, D, T ) and a safety
predicate p that is set-monotonic and Tn-safe, Algorithm 4
returns a p-optimal DDF in polynomial time in |D| = m and
|T | = n.
This claim follows directly from the previous claim and the
Tn-safety property. Note that here we no longer require the
easy-split property for p.
So far we have discussed several speciﬁed simple cases to
avoid solving a NP-hard problem. Each of Algorithm 2, 3,
and 4 computes a p-optimal DDF under certain assump-
tions. Note that the property of p being set-monotonic is
common in the all three. This property plays a central role
in reducing complexity. The typical ”counting”-based safety
predicates would always satisfy the set-monotonic property.
4. THE CASE OF MICRODATA DISCLOSURE
4.1 The problem setting (D, D, T )
In a microdata disclosure problem, we are given an origi-
nal table that contains a set of attributes ID (such as SSN
or name), a set of attributes Q that are non-sensitive but
serve as quasi-identiﬁer, and a sensitive attribute S. The
attributes ID or Q can be used to identify an individual.
(For simplicity of presentation, we assume that S is a single
attribute.) Under this setting, a database state x is the as-
sociation between the ID and the sensitive attribute S (i.e.,
the projection of the original table on ID and S).
Let N be the number of tuples in the original table. We
denote as x = {x1, x2, . . . , xN } where each i, 1 ≤ i ≤ N
corresponds to an ID in the table. Let B = {b1, b2, . . . , bnB }
be the set of all possible values of the sensitive attribute. The
domain D of all possible values of the database state x could
be denoted as BN and has the size of nN
B . The restricted
sub-domain D here is equal to D, D = {d1, d2, ...dnN
}. For
every d in the restricted sub-domain D, we use d(xi) to
denote the sensitive value of xi given by d.
B
The quasi-identiﬁers contained in the original table are
used to generalize the disclosure table by grouping peo-
ple and their sensitive attributes with the same general-
ized quasi-identiﬁers. Given a particular generalization, re-
gardless of how it is obtained, we can have a partition on
the set of all tuples in the original table, denoted by G :
{x1, x2, . . . , xN } → N. G takes one tuple as input and out-
puts a group number. For example, G(x1) = G(x2) means
that for the generalization G, x1 and x2 are in the same
group. Every generalization G determines a partition on
the domain D, deﬁned as follows:
T = {s|∀d1, d2 ∈ s, ∀xi, d1(G−1(G(xi))) = d2(G−1(G(xi)))}
where d1(G−1(G(xi))) represents the bag of sensitive at-
tributes of the set G−1(G(xi)).
Traditionally, we traverse a generalization lattice, in which
each node is a generalization, based on some utility function
[5]. The sequence of traversed nodes deﬁnes a sequences of
disclosure schemas. Our candidate schema sequence T is
deﬁned as follows:
• (T1, T2, . . . , Tn−1) is the sequence determined by the
sequence of the generalizations;
• Tn, the last schema, which discloses nothing
4.2 The safety predicate p
There are two important safety requirements used in the
microdata disclosure problem: k-anonymity [24, 4] and l-
diversity [2]. Satisfaction of k-anonymity requires that the
size of any group determined by the chosen generalization
is at least k. There are multiple variants of the l-diversity
property [2]. For example, entropy l-diversity means, intu-
itively, that the entropy of the bag of all the possible values
of any xi is greater than log2l. This is under the assumption
of uniform probability distribution of values in the bag (i.e.,
every value has the same probability to be the true value).
Suppose we have a disclosure set DS for a given x, Note
that k-anonymity is not a property of a disclosure set. The
property of entropy l-diversity is equivalent to the following
predicate p on the disclosure set DS:
M ini(Eni(DS)) ≥ log2l
where Eni(DS) is the entropy of the bag of all possible sen-
sitive values for xi under the assumption of uniform proba-
bility distribution.
4.3 Disclosure Algorithm for Entropy l-diversity
In Section 3, we have shown that the set-monotonic prop-
erty of the safety predicate p serves as a key condition to
achieve a P-Time p-optimal algorithm in the size of D.
Unfortunately, the safety predicate p for entropy l-diversity
is not set-monotonic. To see this, consider the following ex-
ample of entropy 2-diversity shown in Table 8, in which only
sensitive attributes of the generalized groups are listed.
For T1, observe that the generalization group that cor-
responds to the bag {A, A} of sensitive attributes violates
entropy 2-diversity. For T2 consider the set D′ of all pos-
sible database states that violate entropy 2-diversity at T1.
Note that, for every element in D′, either the values of the
sensitive attribute in Tuple 1 and Tuple 2 are both A, or are
both B. However, the probability of being A is 3 times the
probability of being B. Thus,
A
A
C
A
B
D
B
E
T1
A
B
A
D
C
A
B
E
T2
. . .
Figure 8: An example of Entropy 2-diversity
Therefore, D′ violates entropy 2-diversity. Now, consider
the following set D′′ ⊂ D′:
D′′ = {(A, A, B, B, A, E, C, D), (B, B, A, A, C, D, A, E)}
D′′ contains only two elements. It is easy to observe that
∀1 ≤ i ≤ 8, Eni(D′′) = log22
Thus D′′ satisﬁes entropy 2-diversity and therefore T2 can be
returned as output for every d ∈ D′′, which shows that the
safety predicate p for entropy l-diversity is not set-monotonic.
As a result, we may not be able achieve a P-time p-optimal
disclosure algorithm for a microdata disclosure problem and
entropy l-diversity without having more specialized condi-
tions. Furthermore, even if the safety predicate p for entropy
l-diversity is set-monotonic, we still have the problem that
the achieved p-safe disclosure algorithm is P-time in the size
of D, which is exponential, in the worst case, in the size of
the original table.
In the following, we develop an algorithm that is (1) poly-
nomial in the size of the original table (not the size of |D|!),
(2) p-safe, but only (3) weakly p-optimal. The notion of con-
servative p-safety and weak p-optimality is formalized in the
following deﬁnitions.
Deﬁnition 12. Given a problem setting (D, D, T ), we say
that a predicate q is a conservative approximation of a safety
predicate p if
∀D′ ⊆ D, q(D) ⇒ p(D′)
We say that a DDF A is conservatively p-safe w.r.t. a con-
servative approximation q if
∀x ∈ D, q(DS(A, x)) = true
We say that a disclosure algorithm is conservatively p-safe
w.r.t. q if it deﬁnes a conservatively p-safe DDF.
Deﬁnition 13. Given a problem setting (D, D, T ), we say
that a DDF A is weakly p-optimal for a conservative approx-
imation q of p if:
A is p-safe, and
∀A′ ≺ A, A′ is not conservative p-safe for q
We say that a disclosure algorithm is weakly p-optimal for
a conservative approximation q of p if the DDF it deﬁnes is
weakly p-optimal for q.
For the problem setting of microdata disclosure, we de-
ﬁne a conservative approximation q of entropy l-diversity as
follows:
En1(D′) = En2(D′) ≈ 0.81 < log2 2
M ini(Eni(DS)) ≥ log2l
and
Eni(DS) ≥ EnG(i)
where EnG(i) denotes the entropy of the bag of sensitive
attribute values in the generalized group which contains ID
i. We will refer to this predicate as conservative l-diversity.
Algorithm 5 for microdata and entropy l-diversity is given
in Figure 10. In it, the term rs(g) denotes the rotation set
of the generalized group g of the original table.
Given a sequence of sensitive values associated with IDs in
a generalized group β = (b1, b2, . . . , bk) (i.e., ID(1) to ID(k)
are generalized to one group), the rotation set means the
following:
rs(β) = {β′|β′ = (bi, . . . , bk, b1, . . . , bi−1), (1 ≤ i ≤ k)}
Note that the rotation set rs(g) is the smallest set such that
for any ID i that is generalized in group g,
Eni(rs(g)) ≥ EnG(i)
In Algorithm 5 we modiﬁed the candidate schema se-
quence of the original problem setting to a new sequence
T ′ constructed as follows. First, we traverse the original se-
quence up to the ﬁrst node that satisﬁes l-anonymity. From
that node, select an arbitrary path up the generalization
lattice to the root node.
Claim 6. Given the modiﬁed problem setting (D, D, T ′),
Algorithm 5 is weakly p-optimal, where p is entropy l-diversity,
w.r.t. to conservative l-diversity. Furthermore, Algorithm 5
is polynomial time in the size of the original table and the
size of the generalization lattice.
Proof sketch. When a generalized group is checked to
satisfy entropy l-diversity, the rotation set of any possible
database state in this generalized group must also satisfy
entropy l-diversity. Since the entropy function is monotonic
[2], any conjunction of such rotationsets must also satisfy
entropy l-diversity. Observe from Algorithm 5, that the
predicate p is guaranteed, and so Algorithm 5 is p-safe.
Now, Algorithm 5 returns a disclosure schema as early as
possible for the rotation sets of all possible database states.
Thus, for any DDF A′ that is locally better than the DDF
deﬁned by Algorithm 5, the property of weak entropy l-
diversity can not be satisﬁed for A′.
Finally, it is easy to see that Algorithm 5 is polynomial in
the size of the original table and the size of the generalization
lattice.
4.4 Application Example of Algorithm 5
We now apply Algorithm 5 to a patient information dis-
closure example similar to the one discussed in section 1.
The original table shown in Table 5.
In this example, we are about to generate a disclosure
table that satisﬁes Entropy 2-diversity. First, we traverse
the generalization lattice to ﬁnd the ﬁrst node that satisﬁes
2-anonymity.
The generalization lattice of quasi-identiﬁers and its traver-
sal is shown in Figure 10. We ﬁnd the ﬁrst node (M arital,
Age, ∗), for which the disclosure table satisﬁes 2-anonymity
as shown in Table 6.
We then select a new sequence T ′ = (T1, T2, T3, T4) where
T1 represents (M arital, Age, ∗), T2 represents (M arital, ∗, ∗),
T3 represents (∗, ∗, ∗) and T4 represents that nothing is dis-
closed.
Name Marital Age
Old
Alan
Bob
Old
Clark
Diana
Ellen
Fen
Grace
Helen
Ian
Jolie
M
M
M
M
M
M
S
S
S
S