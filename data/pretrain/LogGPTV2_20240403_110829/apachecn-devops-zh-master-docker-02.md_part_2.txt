```
请注意，我们不必告诉 Docker 使用 nginx。因为我们有 nginx 二进制文件作为入口点，所以我们传递的任何命令都会覆盖 Dockerfile 中定义的`CMD`。
这将显示我们已经安装的 nginx 版本，我们的容器将停止，因为 nginx 二进制文件将只被执行来显示版本信息，然后进程将停止。一旦我们建立了自己的形象，我们将在本章的后面查看这个例子。
# 其他文件说明
在我们的示例 Dockerfile 中，有一些指令没有包括在内。让我们在这里看看他们。
# 用户
`USER`指令允许您指定运行命令时要使用的用户名。`USER`指令可用于文件中的`RUN`指令、`CMD`指令或`ENTRYPOINT`指令。此外，`USER`指令中定义的用户必须存在，否则您的映像将无法构建。使用`USER`指令还会引入权限问题，不仅是在容器本身上，而且在装载卷时也是如此。
# 工作目录
`WORKDIR`指令为`USER`指令可以使用的同一组指令设置工作目录(`RUN`、`CMD`和`ENTRYPOINT`)。它还允许您使用`CMD`和`ADD`指令。
# 构建时
`ONBUILD`指令允许您隐藏一组命令，以便在将来使用该映像时使用，作为另一个容器映像的基础映像。
例如，如果您想给开发人员一个映像，并且他们都有不同的代码库要测试，您可以使用`ONBUILD`指令在需要实际代码之前打好基础。然后，开发人员只需将他们的代码添加到您告诉他们的目录中，当他们运行新的 Docker 构建命令时，它会将他们的代码添加到运行的映像中。
`ONBUILD`指令可以与`ADD`和`RUN`指令结合使用，例如在以下示例中:
```
ONBUILD RUN apk update && apk upgrade && rm -rf /var/cache/apk/*
```
每当我们的映像被用作另一个容器映像的基础时，这将运行更新和包升级。
# 包封/包围（动词 envelop 的简写）
`ENV`指令在构建和执行时设置映像中的环境变量。当您启动映像时，这些变量可以被覆盖。
# 最佳实践
既然我们已经介绍了 Dockerfile 指令，那么让我们来看看编写自己的 docker file 的最佳实践:
*   你应该试着养成使用`.dockerignore`文件的习惯。我们将在下一节介绍`.dockerignore`文件；如果你习惯于使用`.gitignore`文件，这看起来会很熟悉。它将在构建过程中忽略您在文件中指定的项目。
*   记住每个文件夹只有一个 Dockerfile 来帮助您组织容器。
*   为你的 Dockerfile 使用一个版本控制系统，比如 Git 就像任何其他基于文本的文档一样，版本控制不仅可以帮助您向前移动，还可以根据需要向后移动。
*   尽量减少每个映像安装的软件包数量。在建立你的形象时，你想要达到的最大目标之一就是让它们尽可能的小。不安装不必要的软件包将大大有助于实现这一目标。
*   确保每个容器只有一个应用进程。每次需要新的应用进程时，最好使用新的容器来运行该应用。
*   把事情简单化；过于复杂的 Dockerfile 会增加膨胀，还可能导致进一步的问题。
*   以身作则！Docker 自己有一个相当详细的风格指南来发布他们在 Docker Hub 上托管的官方映像。你可以在本章末尾的阅读部分找到相关链接。
# 构建容器映像
在本节中，我们将介绍`docker image build`命令。正如他们所说，这是橡胶与道路的交汇处。现在是我们开始建立未来形象的时候了。我们将寻找不同的方法来实现这个目标。请将此视为您之前使用虚拟机创建的模板。这将有助于通过完成艰苦的工作来节省时间；您只需要创建需要添加到新映像中的应用。
使用`docker build`命令时，有很多开关可以使用。因此，让我们使用总是很方便的`docker image build`命令上的`--help`开关来查看我们能做的所有事情:
```
$ docker image build --help
```
然后有很多不同的旗帜列出，你可以通过时，建立你的形象。现在，这看起来似乎需要消化很多，但是在所有这些选项中，我们只需要使用`-- tag`，或者它的简写`-t`，来命名我们的映像。
您可以使用其他选项来限制构建过程将使用多少 CPU 和内存。在某些情况下，您可能不希望`build`命令占用尽可能多的 CPU 或内存。这个过程可能会运行得慢一点，但是如果您在本地计算机或生产服务器上运行它，并且这是一个很长的构建过程，您可能需要设置一个限制。还有一些选项会影响为构建我们的形象而推出的容器的网络配置。
通常，您不会使用`--file`或`-f`开关，因为您是从 Dockerfile 所在的同一个文件夹运行`docker build`命令的。将 Dockerfile 保存在不同的文件夹中有助于对文件进行排序，并保持文件的命名约定不变。
还值得一提的是，虽然您能够在构建时传递额外的环境变量作为参数，但是它们是在构建时使用的，并且您的容器映像不会继承它们。这对于传递代理设置等信息非常有用，这些信息可能只适用于您的初始构建/测试环境。
我们前面讨论过的`.dockerignore`文件用于排除那些我们不想包含在`docker build`中的文件或文件夹，因为默认情况下，与 Dockerfile 在同一文件夹中的所有文件都将被上传。我们还讨论了将 Dockerfile 放在单独的文件夹中，这同样适用于`.dockerignore`。它应该放在 Dockerfile 所在的文件夹中。
将映像中要使用的所有项目保存在同一个文件夹中，有助于将`.dockerignore`文件中的项目数量(如果有)保持在最低限度。
# 使用 Dockerfile 构建容器映像
第一种方法是创建一个 Dockerfile，这是我们在构建基本容器映像时要考虑的。事实上，我们将使用上一节中的 Dockerfile，然后对其执行`docker image build`命令，从而获得一个 nginx 映像。所以，让我们从再次查看 Dockerfile 开始:
```
FROM alpine:latest
LABEL maintainer="Russ McKendrick "
LABEL description="This example Dockerfile installs NGINX."
RUN apk add --update nginx && \
 rm -rf /var/cache/apk/* && \
 mkdir -p /tmp/nginx/
COPY files/nginx.conf /etc/nginx/nginx.conf
COPY files/default.conf /etc/nginx/conf.d/default.conf
ADD files/html.tar.gz /usr/share/nginx/
EXPOSE 80/tcp
ENTRYPOINT ["nginx"]
CMD ["-g", "daemon off;"]
```
Don't forget that you will also need the `default.conf`, `html.tar.gz`,and `nginx.conf` files in the files folder. You can find these in the accompanying GitHub repository.
所以，我们有两种方法来建立这个形象。第一种方法是在使用`docker image build`命令时指定`-f`开关。我们还将使用`-t`开关为新映像命名:
```
$ docker image build --file  --tag : .
```
现在，``通常是您在 Docker Hub 上注册的用户名。我们将在[第 3 章](03.html) *、存储和分发映像*中更详细地了解这一点；目前，我们将使用`local`，``是您想要提供的独特容器价值。通常，这将是版本号或其他描述符:
```
$ docker image build --file /path/to/your/dockerfile --tag local:dockerfile-example .
```
通常不使用`--file`开关，当您有其他文件需要包含在新映像中时，这可能会有点棘手。一种更简单的构建方法是将 Dockerfile 单独放在一个单独的文件夹中，以及您将使用`ADD`或`COPY`指令注入到映像中的任何其他文件:
```
$ docker image build --tag local:dockerfile-example .
```
要记住的最重要的事情是最后的点(或周期)。这是告诉`docker image build`命令在当前文件夹中构建。构建映像时，您应该会看到类似以下终端输出的内容:
![](img/6e1391b3-78b9-41bb-be22-c2da8c578d51.png)
构建完成后，您应该能够运行以下命令来检查映像是否可用，以及映像的大小:
```
$ docker image ls
```
从以下终端输出可以看出，我的映像大小为 5.98 MB:
![](img/32a631a1-77f7-461d-8248-8080e5641502.png)
通过运行以下命令，您可以使用新构建的映像启动容器:
```
$ docker container run -d --name dockerfile-example -p 8080:80 local:dockerfile-example
```
这将启动一个名为`dockerfile-example`的容器，您可以使用以下命令检查它是否正在运行:
```
$ docker container ls 
```
打开浏览器，转到`http://localhost:8080/`会显示一个极其简单的网页，如下所示:
![](img/7eb0d970-366a-4736-89e2-9d1a482d4161.png)
接下来，我们可以快速运行本章前面部分提到的一些命令，从下面开始:
```
$ docker container run --name nginx-version local:dockerfile-example -v
```
从以下终端输出可以看出，我们当前运行的是 nginx 1 . 14 . 0 版:
![](img/c6575287-1cf9-45d9-8d35-d1a8125cc814.png)
现在我们已经构建了第一个映像，接下来我们可以看到运行的命令显示了我们在构建时嵌入的标签。要查看此信息，请运行以下命令:
```
$ docker image inspect -f {{.Config.Labels}} local:dockerfile-example
```
从下面的输出可以看出，这显示了我们输入的信息:
![](img/27e551d4-99ed-4040-800e-986df10b1958.png)
在我们继续之前，您可以使用以下命令停止并移除我们启动的容器:
```
$ docker container stop dockerfile-example
$ docker container rm dockerfile-example nginx-version  
```
我们将在第 4 章*管理容器*中详细介绍 Docker 容器命令。
# 使用现有容器
构建基础映像最简单的方法是从 Docker Hub 的一个官方映像开始。Docker 还将这些正式构建的 docker 文件保存在他们的 GitHub 存储库中。因此，对于使用他人已经创建的现有映像，您至少有两种选择。通过使用 Dockerfile，您可以准确地看到构建中包含的内容，并添加您需要的内容。如果您以后想要更改或共享该 Dockerfile，则可以对其进行版本控制。
有另一种方法可以实现这一点；但是，不建议也不认为这是好的做法，我强烈建议您不要使用它。
I would only use this method during a prototyping phase to check that the commands I am running work as expected in an interactive shell before putting them in a Dockerfile. You should always use a Dockerfile.
首先，我们应该下载我们想要用作基础的映像；和以前一样，我们将使用 Alpine Linux:
```
$ docker image pull alpine:latest
```
接下来，我们需要在前台运行一个容器，以便与它进行交互:
```
$ docker container run -it --name alpine-test alpine /bin/sh
```
容器运行后，您可以根据需要使用`apk`命令添加包，或者使用任何适合您的 Linux 风格的包管理命令。
例如，以下命令将安装 nginx:
```
$ apk update
$ apk upgrade
$ apk add --update nginx
$ rm -rf /var/cache/apk/*
$ mkdir -p /tmp/nginx/
$ exit
```
安装完所需的包后，需要保存容器。前一组命令末尾的`exit`命令将停止正在运行的容器，因为我们正在脱离的外壳进程恰好是保持容器在前台运行的进程。您可以在终端输出中看到如下内容:
![](img/8dd37ad8-124e-4bdd-99da-053fe0af7dfe.png)
It is at this point that you should really stop; I do not recommend you use the preceding commands to create and distribute images, apart from the one use case we will cover in the next part of this section.
因此，要将停止的容器保存为映像，您需要执行类似以下的操作:
```
$ docker container commit  :
```
例如，我运行以下命令来保存我们启动和定制的容器的副本:
```
$ docker container commit alpine-test local:broken-container 
```
注意我如何称呼我的形象`broken-container`？采用这种方法的一个用例是，如果由于某种原因，您的容器出现了问题，那么将失败的容器保存为映像，或者甚至将其导出为 TAR 文件，以便在您需要一些帮助来找到问题的根源时与其他人共享，这是非常有用的。
要保存映像文件，只需运行以下命令:
```
$ docker image save -o  :
```
因此，对于我们的示例，我运行了以下命令:
```
$ docker image save -o broken-container.tar local:broken-container
```
这给了我一个 6.6 MB 的文件，叫做`broken-container.tar`。当我们有这个文件时，您可以解压缩它并四处看看，从下面的结构中可以看到:
![](img/b9291bbe-f356-443c-a892-c4198c3c5695.png)