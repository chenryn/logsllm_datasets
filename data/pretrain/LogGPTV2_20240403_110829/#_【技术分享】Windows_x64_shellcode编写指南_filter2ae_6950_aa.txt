# 【技术分享】Windows x64 Shellcode 编写指南

## 译文声明
本文为翻译文章，原文来源：tophertimzen.com  
原文地址：[请提供原始链接]  
译文仅供参考，具体内容表达及含义以原文为准。

**翻译者**：[xgxgxggx](http://bobao.360.cn/member/contribute?uid=2830254841)  
**预估稿费**：200 RMB  
**投稿方式**：发送邮件至 linwei#360.cn 或登录网页版在线投稿

---

## 前言
最近，我重写了几个 shellcode，并将之前在 32 位平台实现的 shellcode 移植到 64 位平台。在移植过程中，我发现很难在网上找到相关的资料。因此，我决定将我的移植过程写成一篇博客（这也是我的第一篇博客），希望能帮助那些需要移植 64 位 shellcode 的人。

网上已经有许多教程介绍了 shellcode 的基础知识，所以我不会重复这些内容。虽然我会介绍调用约定、寄存器覆盖和寄存器相关知识，但不会深入讨论汇编语言的基础知识。读者可以参考 Skape 的 [Understanding Windows Shellcode](https://publish.adlab.corp.qihoo.net:8360/contribute/www.nologin.com/Downloads/Papers/win32-shellcode.pdf) 或资源 [project-shellcode](http://www.projectshellcode.com/) 进行深入学习（注：原链接失效，已替换）。

本文将介绍 32 位汇编与 64 位汇编的差异，以及如何利用 Windows 系统中的结构体来开发 64 位 shellcode。此外，我还将介绍我开发的两种漏洞利用辅助工具。

在开始之前，需要说明的是我仍然处于学习漏洞利用开发的初级阶段。为了简化实验，本文使用的系统是 Windows 7 x64 版本。为简化叙述，x86 指 Win32 平台，x64 指 Win64 平台。

---

## 寄存器 (Registers)

### x86
x86 处理器中有 8 个 32 位通用寄存器：
- `eax` - 累加器
- `ecx` - 计数寄存器
- `edx` - 数据寄存器
- `ebx` - 基地址寄存器
- `esp` - 堆栈指针
- `ebp` - 基址指针
- `esi` - 源索引寄存器
- `edi` - 目标索引寄存器
- `eip` - 指令指针

由于向后兼容的原因，其中 4 个寄存器 (`eax`, `ebx`, `ecx`, `edx`) 可以拆分为 16 位和 8 位寄存器：
- `AX` - `EAX` 的低 16 位
- `AH` - `AX` 的高 8 位
- `AL` - `AX` 的低 8 位
- `BX` - `EBX` 的低 16 位
- `BH` - `EBX` 的高 8 位
- `BL` - `EBX` 的低 8 位

`ECX` 和 `EDX` 也使用字母 (C, D) 和后缀 (X, H, L) 表示 16 位和 8 位寄存器。

### x64
64 位处理器使用前缀 `R` 扩展上述 8 个寄存器，例如 `RAX`, `RCX`, `RDX` 等。需要注意的是，x86 平台下的寄存器表示方式仍然可用（如 `eax`, `ax`, `al` 等）。

还引入了 8 个新的寄存器：`r8`, `r9`, `r10`, `r11`, `r12`, `r13`, `r14`, `r15`。这些寄存器也可以分为 32 位、16 位和 8 位版本：
- `r#` - 64 位
- `r#d` - 低 32 位
- `r#w` - 低 16 位
- `r#b` - 8 位

不幸的是，这些新的 8 位扩展寄存器不能像 `eax` 中的低 16 位的高 8 位那样使用。

---

## 覆盖寄存器 (Clobber Registers)
覆盖寄存器是在函数（如 Windows API）中可能会被修改的寄存器。在汇编代码中不应该使用这些寄存器，因为这可能会导致程序不稳定。但是，如果明确知道某个 API 函数会修改哪些寄存器，还是可以使用这些寄存器的。

在 Win32 API 中，`EAX`, `ECX` 和 `EDX` 都是覆盖寄存器。在 Win64 API 中，除了 `RBP`, `RBX`, `RDI`, `RSI`, `R12`, `R13`, `R14` 和 `R15` 之外，其他寄存器都是覆盖寄存器。`RAX` 和 `EAX` 分别用于 x64 和 x86 函数的返回值。

---

## 调用约定 (Calling Convention)

### x86
Win32 API 通常使用 `__stdcall` 调用约定，从右到左向堆栈上传递参数。例如，调用一个有两个参数 `int x` 和 `int y` 的函数 `foo`：

```assembly
foo(int x, int y)
```

在堆栈上的传递顺序为：
```assembly
push y
push x
```

### x64
Win64 平台下的函数调用约定不同，但类似于 Win32 平台下的 `__fastcall`，使用寄存器传递参数。前四个参数分别使用 `RCX`, `RDX`, `R8` 和 `R9` 传递，其余参数则使用堆栈传递。需要注意的是，使用寄存器传递参数时也是从右到左传递。

例如，对 Windows 函数 `MessageBox` 的调用声明如下：
```c
int WINAPI MessageBox(
    _In_opt_  HWND hWnd,
    _In_opt_  LPCTSTR lpText,
    _In_opt_  LPCTSTR lpCaption,
    _In_      UINT uType
);
```

在 Win64 调用约定下，参数为：
```assembly
r9 = uType
r8 = lpCaption
rdx = lpText
rcx = hWnd
```

---

## Shellcode

现在我们已经了解了 Win64 下的 Shellcode 与 Win32 的关键区别，让我们开始编写我们的 shellcode。为了演示运行 Win64 shellcode，我将编写代码弹出一个 `MessageBox` 对话框。当 shellcode 完成后，我将使用我编写的工具将其注入到 `calc.exe` 进程中，以验证 shellcode 是否能够在另一个进程中运行。

### 注释
我将使用 NASM 编译汇编代码，并使用 Jeremy Gordon 编写的 `golink` 链接程序。使用你最喜欢的文本编辑器编辑汇编代码，我使用的是 Windows 平台下的 Notepad++。

### 开始

#### 1. 声明 NASM 指令
```assembly
bits 64
section .text
global start
```

#### 2. 设置堆栈
```assembly
start:
    sub rsp, 28h                ; 为调用的函数预留堆栈空间
    and rsp, 0fffffffffffffff0h ; 确保堆栈 16 字节对齐
```

#### 3. 获取 Kernel32 的基地址
Win64 和 Win32 平台的 PEB 结构位置不同。在 Win32 中，PEB 位于 `[fs:30h]` 指向的地址；而在 Win64 中，PEB 位于 `[gs:60h]`。

尽管 PEB 结构发生了很大变化，但我们只关心 `LDR` 链表（`PEB_LDR_DATA`）的位置。在 Windbg 中，可以使用 `!peb` 命令获取 LDR 的位置。

在 Windbg 输出的 PEB 结构中，`Ldr.InMemoryOrderModuleList` 包含 `Kernel32.dll`，它位于链表的第三个位置。此列表显示了进程中各个内存模块（PE 文件、可执行文件和 DLL 文件）在内存中的位置。

```windbg
Ldr.InMemoryOrderModuleList:         00000000002b3150 . 00000000002b87d0
    Base TimeStamp                     Module
ff600000 4a5bc9d4 Jul 13 16:57:08 2009 C:\Windows\System32\calc.exe
77b90000 4ce7c8f9 Nov 20 05:11:21 2010 C:\Windows\SYSTEM32\ntdll.dll
77970000 4ce7c78b Nov 20 05:05:15 2010 C:\Windows\system32\kernel32.dll
```

通过在 Windbg 中使用 `dt` 命令填充 PEB 结构，确定 `Ldr` 链表的位置。
```windbg
0:000> dt _PEB 000007fffffd4000
ntdll!_PEB
   +0x000 InheritedAddressSpace : 0 ''
   +0x001 ReadImageFileExecOptions : 0 ''
   +0x002 BeingDebugged    : 0x1 ''
   +0x003 BitField         : 0x8 ''
   +0x003 ImageUsesLargePages : 0y0
   +0x003 IsProtectedProcess : 0y0
   +0x003 IsLegacyProcess  : 0y0
   +0x003 IsImageDynamicallyRelocated : 0y1
   +0x003 SkipPatchingUser32Forwarders : 0y0
   +0x003 SpareBits        : 0y000
   +0x008 Mutant           : 0xffffffff`ffffffff Void
   +0x010 ImageBaseAddress : 0x00000000`ff600000 Void
   +0x018 Ldr              : 0x00000000`77cc2640 _PEB_LDR_DATA
```

`Ldr` 链表位于 PEB 的偏移 `0x18` 处。接下来，我们需要执行以下步骤：
- 通过在 PEB 偏移 `0x18` 处获取 `Ldr` 链表，然后访问 `Ldr` 结构偏移 `0x20` 处的 `InMemoryOrderModuleList`。
- 在 `_LIST_ENTRY` 结构中，包含向前和向后的指针，所有 `_LIST_ENTRY` 组成一个循环链表。通过这个链表可以找到 `Kernel32` 的基地址。

```windbg
0:000> dt _PEB_LDR_DATA 77cc2640
ntdll!_PEB_LDR_DATA
   +0x000 Length           : 0x58
   +0x004 Initialized      : 0x1 ''
   +0x008 SsHandle         : (null) 
   +0x010 InLoadOrderModuleList : _LIST_ENTRY [ 0x00000000`002b3140 - 0x00000000`002b87c0 ]
   +0x020 InMemoryOrderModuleList : _LIST_ENTRY [ 0x00000000`002b3150 - 0x00000000`002b87d0 ]
   +0x030 InInitializationOrderModuleList : _LIST_ENTRY [ 0x00000000`002b3270 - 0x00000000`002b87e0 ]
   +0x040 EntryInProgress  : (null) 
   +0x048 ShutdownInProgress : 0 ''
   +0x050 ShutdownThreadId : (null)
```

偏移 `0x20` 处为 `InMemoryOrderModuleList`。从 `_LIST_ENTRY` 结构的输出可以看出，`Kernel32.dll` 是第三个内存模块。通过遍历这个链表，可以找到 `Kernel32` 的基地址。

```windbg
0:000> dt _LIST_ENTRY
```

---

希望这篇指南对你有所帮助！如果你有任何问题或建议，请随时联系我。