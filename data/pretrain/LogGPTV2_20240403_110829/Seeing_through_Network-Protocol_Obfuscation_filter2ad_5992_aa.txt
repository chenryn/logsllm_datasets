# Title: Seeing through Network-Protocol Obfuscation

## Authors:
- Liang Wang, University of Wisconsin, PI:EMAIL
- Kevin P. Dyer, Portland State University, PI:EMAIL
- Aditya Akella, University:// Wisconsin, PI:EMAIL
- Thomas Ristenpart, Cornell Tech, PI:EMAIL
- Thomas Shrimpton, University of Florida, teshrim@cise.ufl.edu

## Abstract
Censorship-circumvention systems are designed to help users bypass Internet censorship. As more sophisticated deep-packet-inspection (DPI) mechanisms have been deployed by censors to detect circumvention tools, activists and researchers have responded by developing network protocol obfuscation tools. These tools have proven effective in practice against existing DPI and are now distributed with systems such as Tor.

In this work, we provide the first in-depth investigation of the detectability of in-use protocol obfuscators by DPI. We build a framework for evaluation that uses real network traffic captures to assess detectability based on metrics such as the false-positive rate against background (i.e., non-obfuscated) traffic. We first exercise our framework to show that some previously proposed attacks from the literature are not as effective as a censor might like. We then develop new attacks against five obfuscation tools as they are configured in Tor, including two variants of obfsproxy, FTE, and two variants of meek. Our results indicate that all of these obfuscation mechanisms can be reliably detected by a determined censor with sufficiently low false-positive rates for use in many censorship settings.

## Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Security and protection

## Keywords
Censorship-resistance; network obfuscation; Tor

## 1. Introduction
Nation-states and other Internet censors use deep-packet inspection (DPI) to detect and block the use of circumvention tools. They do so by recognizing the tools’ protocol headers or other telltale fingerprints contained in the application-layer content of network packets. In response, researchers and activists have proposed numerous approaches for obfuscating the network protocols being used. These obfuscation tools can be categorized as either attempting to randomize all bytes sent over the wire, mimicking an unblocked protocol such as HTTP, or tunneling traffic over an implementation of an unblocked protocol. Examples of network obfuscators from each of these three classes are now deployed as Tor pluggable transports and with other anti-censorship tools. Currently, available evidence indicates that existing DPI systems are easily subverted by these tools, and nation-state censors are not currently blocking their use via DPI. Thus, these systems provide significant value against today's censors.

Can censors easily adapt and deploy new DPI algorithms that accurately detect these protocol obfuscators? Houmansadr et al. [16] proposed several attacks for detecting mimicry obfuscators, but they did not measure false-positive rates. It may be that their attacks are undeployable in practical settings due to labeling too many "legitimate" connections as emanating from an anti-censorship tool. Moreover, the randomizing and tunneling obfuscators, which are the most widely used at present, have not been evaluated for detectability at all. In short, no one knows whether these obfuscators will work against tomorrow’s censors.

In this work, we provide the first in-depth, empirical investigation of the detectability of modern network protocol obfuscators and the collateral damage to real network traffic due to false positives. Our results suggest that all of the in-use protocol obfuscation mechanisms can be reliably detected by methods that require surprisingly little in the way of payload parsing or DPI state. See Figure 1 for a summary of our best-performing attacks against Tor’s pluggable transport obfuscators.

To obtain these results, we built a trace analysis framework and exercised it with a variety of datasets. Prior attack evaluations [12, 16] have focused primarily on small, synthetic datasets generated by a researcher running a target tool in a specific environment, and evaluating true-positive and false-negative rates of a certain attack. This may lead to over-estimation of tool efficacy in practice: actual false-positive rates may be prohibitively large, and the synthetic traces used in lab evaluations may be unlike the network traces seen in real environments. We address both of these issues by employing an experimental methodology that more closely reflects the setting of nation-state-level DPI.

We collected nearly a terabyte of packet traces from routers associated with various networks at our university campus, representing about 14 million TCP flows. Given the size of the covered networks (five /16 networks and three /24 networks), this represents a large, diverse dataset suitable for assessing false positives. We supplement this with researcher-driven traces of obfuscation tools, collected across a number of client environments.

## 2. Background
### Censorship
Nation-states and other organizations assert control over Internet communications by blocking connections to websites based on IP address, application-layer content of packets, active probing of remote servers, or some combination of these. For a more detailed taxonomy of attacks, see [16].

IP filtering is a commonly-used censorship technique where censors monitor a list of IPs and block all communications whose source or destination IP belongs to the list. IP filtering can be deployed in border ASes or local ISPs by nation-state censors [53]. To bypass IP filtering, a simple method is to use anonymous proxies. By deploying proxies outside the censored network, users within the censored network can submit traffic past censors to the (unfiltered) proxy IP. Various proxy-based censorship circumvention systems have been developed, such as Freegate, Ultrasurf, and JonDo. Tor [11], an onion routing system, helps circumvent IP-based filtering due to its use of a large number of proxies (and bridges). A more recent proposal is to use domain fronting, in which one sends traffic through an unwitting reverse proxy [42].

In addition to filtering by IPs, and partly because of the burden of maintaining an exhaustive and accurate list of proxy IP addresses, censors have increasingly also deployed deep packet inspection (DPI) techniques. This enables censors to attempt protocol identification by inspecting the application-layer content of packets (e.g., application-layer headers) as well as packet size or timing information, in order to classify the traffic as generated by communication protocols associated with an anti-censorship tool. In the past, Tor traffic itself contained unique application-layer fingerprint patterns that could be recognized by DPIs [51]. In this work, we focus primarily on DPI-based censorship.

A final class of protocol identification attacks uses active probing of a remote server. The Great Firewall of China, for example, is known to attempt Tor handshakes with destination IP addresses should a DPI test flag a flow to that IP as possibly emanating from a Tor client [51]. We will consider an active attack briefly in §4.2, and also in consideration of filtering out a (passive) DPI test’s false positives (§6.2).

### Network Protocol Obfuscation
In response to censors' efforts to carry out protocol identification, researchers have developed several approaches to protocol obfuscation. The goals have been to force DPI to misidentify flows of a censored protocol as those of a protocol that is not blocked, or to prevent DPI from recognizing the flows' protocol at all. Suggested obfuscation techniques roughly fall into three categories:

- **Randomizers**: A randomizing obfuscator aims to hide all application-layer static fingerprints, usually by post-processing traffic with an obfuscation step that emits only bits that are indistinguishable from random ones. Examples include Dust [48], ScrambleSuit [52], and the various versions of obfsproxy [40, 54]. The latter are currently deployed with Tor.
  
- **Protocol Mimicry**: A mimicry obfuscator attempts to produce traffic that looks to DPI as if it were generated by some "benign" protocol, also called the cover protocol. One example of lightweight mimicry is format-transforming encryption (FTE) [12, 24], now deployed with Tor and implemented elsewhere [44]. It encrypts messages to produce ciphertexts that match regular expressions commonly used by DPI for identifying protocols. Less efficient obfuscators like Stegotorus [46], SkypeMorph [26], CensorSpoofer [45], and Marionette [13] use heavier steganographic techniques to produce messages that look like a cover protocol. Marionette also provides mechanisms to mimic higher-level protocol behaviors, perform traffic shaping, and protect against some forms of active attacks.

- **Tunneling**: A logical extreme of mimicry is to simply tunnel data over a (typically encrypted) cover protocol. Intuitively, this should provide the best possible mimicry as one is, in fact, using an existing implementation of the cover protocol. An example now deployed with Tor is meek, which uses domain fronting and tunnels traffic over HTTPS connections to popular cloud load balancers such as Google (meekG) and Amazon (meekA).

Several of these obfuscation techniques are now in use with Tor as pluggable transports (PTs). A PT is Tor's terminology for an obfuscator.