anchors, which are distributed with operating systems and user
agents like email clients (e.g., Thunderbird) or web browsers.
For instance, the Windows and OS X operating systems come
with root stores supplied by the vendors, who decide which
CAs they include. Software on this OSes generally uses the
OS-supplied trust anchors. Mozilla takes a different approach:
their products have their own root store.
CAs can issue certiﬁcates directly (a practice that is thor-
oughly discouraged; see Section IV-F) or via intermediate
certiﬁcates. Trust chains must not be broken, i.e., missing
intermediate certiﬁcates, chaining to root certiﬁcates that are
not in the root store, having expired certiﬁcates in the chain etc.
Self-signed certiﬁcates, where root and end-host certiﬁcates are
the same, are a special case, which we discuss in Section IV-D.
Later in this paper, in Section IV, we will discuss problematic
PKI setups after going through several observations from our
measurements.
D. Client-authentication methods
The client-to-server communication protocols examined
in this paper generally authenticate the initiator of the com-
munication on the application layer and not in-band during
the SSL/TLS handshake. SMTP did originally not require
authentication for message submission (i.e., user agent to mail
server), but this was added later to ﬁght spam. Message transfer
between MTAs (i.e., transfer from the source MTA to the
destination MTA) does not require authentication of the sender.
To choose the appropriate authentication mechanism, a
4
client is supposed to query the server for the mechanisms
it supports (e.g., using the EHLO command with SMTP, or
CAPABILITY for IMAP). The server returns a list of supported
authentication mechanisms, sorted by preference, from which
the client then selects.
Some of the most widely used mechanisms, LOGIN and
PLAIN [46], transmit user credentials without further protection
(independently of whether there is an underlying SSL/TLS
connection or not). Some other mechanisms use cryptographic
functions to transmit a hashed version of the credentials (often
using deprecated hash functions such as MD5). An adver-
sary who is able to eavesdrop on the authentication process
can potentially recover the credentials. Challenge-response
mechanisms such as CRAM [28] and SCRAM [33] (which
also use HMAC) provide much better protection. With these
mechanisms, the password is never transmitted at all. In the
case of SCRAM, the password can even be stored in a salted
format on server-side, and hence not even a server compromise
would reveal the true password to an attacker.
E. Related work
A number of publications have studied the deployment of
network security protocols, with a focus on either the develop-
ment of generic, large-scale measurement methodologies or the
measurement and analysis of the HTTPS and SSH protocols.
Provos and Honeyman [37] were probably the ﬁrst to carry
out academic, large-scale scans of security protocols. Their
work focused on SSH. Later, Heidemann et al. carried out
a census of Internet hosts [18]. Leonard and Loguinov [29]
presented a scanner capable of carrying out Internet-wide scans
with proper randomisation of target IP addresses. Durumeric
et al. presented the fast zmap scanner in 2013 [6]. We used
zmap in our work.
Vratonjic et al. [45] carried out a scan of the top 1 million
hosts as determined by Alexa Inc. Holz et al. [24] carried
out scans of the HTTPS ecosystem in a large-scale, long-term
study over the duration of 18 months. The authors also used
data from passive monitoring (using the Bro Network Monitor).
The study showed the poor state of the Web PKI and predicted
very little movement towards improvement. More recently,
Durumeric et al. [7] presented an Internet-wide study of the
HTTPS certiﬁcate ecosystem; Huang et al. [25] expanded on
this in their investigation of forward-secure cipher deployments
in TLS. Amann et al. [2] and Akhawe et al. [1] carried out
two studies that analysed the aspects of trust relationships of
the Web PKI and the occurrence and treatment of error cases
during certiﬁcate validation in popular implementations, again
using data from passive monitoring with Bro.
Some studies focused more on vulnerabilities in the wild.
Heninger et al. [19] studied data sets won with zmap to investi-
gate the cause and distribution of weak RSA and DSA keys. In
their study of the Heartbleed vulnerability, Durumeric et al. [10]
also found email and XMPP servers to be vulnerable. Gasser
et al. [14] presented a large-scale study of the deployment of
SSH in 2014, with a focus on the distribution of insecurely
conﬁgured devices.
There are not many studies that would focus on the use of
SSL/TLS beyond HTTPS. Concerning email, a recent study [9]
actively probed the most popular email servers and observed
the security of SMTP servers interacting with Gmail over the
duration of a year. The authors found that the most popular
providers did a decent job in setting up secure servers. A paper
that was not yet published at the time of our initial submission
also investigated the security of email server setups [12]. The
authors limited themselves to a relatively small number of
servers. However, an important ﬁnding of theirs is that SMTP
servers often do not verify the correctness of a certiﬁcate in
outgoing connections. In our own study, we extend our analysis
to the whole Internet, but also to client-facing email retrieval
protocols and chat protocols. On a global scale, our ﬁndings
are not as reassuring as those for the most popular providers.
Finally, a number of online dashboards give some insight
into the current deployment of SSL/TLS: SSL Pulse for the
most popular websites8, Gmail about their SMTP peers9, or
the IM observatory for XMPP servers10. The ICSI Certiﬁcate
Notary11 also offers an online, DNS-based query system that
allows to check the validity of a given X.509 certiﬁcate.
III. DATA COLLECTION
We collected data using both active scans and passive
measurement, i.e., trafﬁc monitoring. We use our scans to
characterise global TLS deployment. The use of passive moni-
toring data allows us to understand which speciﬁcs of TLS are
actually used; e.g., which protocol versions and cipher suites
are negotiated between communication partners. Active scans
are not as suitable for this purpose: the responder chooses the
cipher suite from the initiator’s offers.
For email, we include all three SSL/TLS-variants of SMTP:
SMTP with STARTTLS on port 25, SMTPS on port 465,
and SUBMISSION with STARTTLS on port 587. For IMAP
and POP3, we chose both the pure SSL/TLS as well as the
STARTTLS variant. For XMPP, we investigate both client-to-
server and server-to-server setups, in both STARTTLS and pure
SSL/TLS variants. For IRC, we only investigate the client-to-
server communication12. We limit our IRCS scan to the most
common port, 6697, and probe for IRC STARTTLS support
on the default IRC port, 6667.
A. Active scans
In this section, we describe the process we used to perform
our active scans. We also explain some insights we gained and
some peculiar phenomena we encountered when scanning.
a) Scanner: Our scanner consists of two parts. The ﬁrst
is the zmap [6] network scanner, which we used to determine
IP addresses that had ports of interest open. We scanned the
entire routable IPv4 space13, using a BGP dump from the
Oregon collector of Routeviews14 as a whitelist of routable
preﬁxes. We ran our scanning campaigns over several weeks,
from 2015-06-09 through 2015-08-04. Due to time-sharing
constraints on the scanning machine, we had to run the scans
8https://www.trustworthyinternet.org/ssl-pulse/
9https://www.google.com/transparencyreport/saferemail/
10https://xmpp.net/reports.php
11http://notary.icsi.berkeley.edu/
12Recall that server-to-server communications are not standardised.
13Appropriate ways to scan IPv6 are an open research topic.
14http://www.routeviews.org
at different speeds, resulting in scans of different durations, as
summarised in Table I. In general, scans lasted roughly 20-36
hours. We refrained from scanning at line speed (although this
is possible with our setup) to reduce our scans’ impact.
The second part of our scanner is a component that starts
an array of OpenSSL client instances, collects their output, and
stores it in a database. We patched the STARTTLS implemen-
tations of OpenSSL as the current version does not follow the
RFCs. More speciﬁcally, the current OpenSSL client does not
query the server capabilities and ignores a server’s refusal to
negotiate SSL/TLS. Furthermore, OpenSSL did not yet support
STARTTLS for IRC, either.
We used a blacklist of IP ranges generated during past
scans [14, 42]. At the time of writing, it contains 177 entries
covering 2.6 million addresses (about 0.08% of the routable
space). Entries were computed from both automated and per-
sonal emails that reached us and complained about the scans.
b) Scanned protocols: Table I gives an overview of
our dataset from active scans. It shows the number of hosts
responding to connection attempts as well as the number of
hosts to which a successful SSL/TLS connection could be
established. The table also lists the number of unique end-
host certiﬁcates that we encountered on all machines in the
respective scans. Furthermore, it contains the number of total
and unique intermediate certiﬁcates encountered in the scans.
Note that many servers seem to have a SSL/TLS port open,
yet do not carry out successful SSL/TLS handshakes. This
phenomenon has been observed before for HTTPS [6, 24]; we
encounter it again for email and chat.
Previous scans performed by us show that servers that
support only SSL 3 are very rare today. Modern Debian-based
systems do not even include it in the default OpenSSL binary
they ship. Initially, we followed their lead and did not try to
connect with an optional fall-back to SSL 3. However, we
revised that decision after inspecting data from the passive
monitoring and deciding we wanted to allow for some compar-
isons. We thus enabled fall-back to SSL 3 for the remainder
of our scans.
c) Background noise: We observed a phenomenon
which has also been mentioned before by the zmap community:
independently of the port one chooses to scan Internet-wide,
there is always a number of hosts that reply to SYN packets
without carrying out a full TCP handshake later. We veriﬁed
this by scanning ﬁve arbitrarily chosen ports (1337, 7583,
46721, 58976, 65322) and sending out 100M probes each
time. We scanned twice with different seeds for each port.
Every time, the average response rate was 0.07–0.1%. When
scanning protocols with very low deployment, it is important
to keep this phenomenon in mind as one of the causes for
failed SSL/TLS handshakes. This is particularly important to
consider for less-used protocols such as IRC or XMPP.
B. Passive collection
For our passive measurements, we examined nine days of
trafﬁc of the Internet uplink of the University of California at
Berkeley, which has a 10 GE uplink with a peak trafﬁc of more
than 7 GB/s each way.
5
TABLE I: Description of our active scan dataset containing hosts listening on ports, successful handshakes, end-host and
intermediate certiﬁcates. Entries marked with † used STARTTLS, and those with ‡ allowed fallback to SSL 3. S2S is short for
server-to-server, C2S for client-to-server.
Protocol
SMTP†,‡
SMTPS‡
SUBMISSION†,‡
IMAP†,‡
IMAPS
POP3†,‡
POP3S
IRC†
IRCS
XMPP, C2S†,‡
XMPPS, C2S
XMPP, S2S†,‡
XMPPS, S2S‡
HTTPS
Port
25
465
587
143
993
110
995
6667
6697
5222
5223
5269
5270
443
Period
7/27–7/28
7/22–7/23
7/27
7/25–7/26
7/09–7/11
7/26
7/10–7/12
8/02–8/04
7/17–7/18
7/29–7/30
7/13–7/14
7/31–8/01
7/24
6/30–7/09
No. hosts
12,488,000
7,234,817
7,849,434
8,006,617
6,297,805
8,930,688
5,186,724
2,573,207
1,948,656
2,188,813
2,223,994
2,459,666
2,046,204
42,676,912
Successful SSL/TLS Unique end-host-certs
3,848,843 (30.82%)
1,373,751 (35.69%)
800,574 (23.29%)
3,437,382 (47.51%)
753,691 (22.31%)
3,378,009 (43.03%)
1,024,757 (25.14%)
4,076,809 (50.91%)
1,053,110 (25.55%)
4,121,108 (65.43%)
4,074,211 (45.62%)
998,013 (24.5%)
747,508 (26.72%)
2,797,300 (53.93%)
3003 (80.97%)
3709 (0.14%)
6332 (73.11%)
8661 (0.44%)
53,544 (2.44%)
38,916 (63.61%)
38,916 (55.25%)
70,441 (3.16%)
6221 (63.61%)
9780 (0.39%)
1146 (67.69%)
1693 (0.08%)
27,252,853 (63.85%)
8,598,188 (31.55%)
Intermediate certs (unique)
2,243,846 (23,462, 1.05%)
2,583,786 (10,357, 0.4%)
2,580,305 (16,070, 0.62%)
2,406,987 (12,913, 0.54%)
2,791,451 (16,700, 0.6%)
2,325,032 (10,135, 0.44%)
1,795,814 (7876, 0.44%)
638 (84, 13.17%)
2551 (315, 12.35%)
5927 (1913, 32.28%)
32,629 (2773, 8.5%)
5927 (1913, 32.28%)
783 (147, 18.77%)
24,555,475 (227,321, 0.93%)
TABLE II: Connections and servers in passive scans. En-
tries marked with † used STARTTLS. S2S is short for server-
to-server, C2S for client-to-server.
Protocol
Port
Connections
Servers
SMTP†
SMTPS
SUBMISSION†
IMAP†
IMAPS
POP3†
POP3S
IRC†
IRCS
XMPP, C2S†
XMPPS, C2S
XMPP, S2S†
XMPPS, S2S
25
465
587
143
993
110
995
6667
6697
5222
5223
5269
5270
3,870,542
37,306
7,849,434
25,900
4,620,043
18,774
159,702
53
18,238
13,517
911,411
175
0
8626
266
373
239
1196
110
341
2
15
229
2163
2
0
a) Trafﬁc monitoring and capture: We used the Bro
Network Security Monitor15 [35] to gather information about
all outgoing SSL/TLS sessions. In a default installation, Bro
already offers deep visibility into standard SSL/TLS trafﬁc,
extracting certiﬁcates and meta-information like cipher and
key use. For this work, we extended Bro to also work with
protocols using STARTTLS. We added support for STARTTLS
for the SMTP, POP3, IRC, XMPP, and IMAP protocols.
We also use Bro to extract the server’s offered authentication
capabilities for all outgoing SMTP, POP3, and IMAP sessions,
which allows us to deduce how many of the contacted servers
support STARTTLS. We added support for capabilities to the
IMAP protocol analyser we created for this work; support was
already present in Bro for SMTP and POP3 capabilities.
Our passive dataset was collected from 2015-07-29 to
2015-08-06. We observed a total of 9,730,095 SSL/TLS connec-
tions on the monitored ports. The connections were established
15http://www.bro.org
6
to 12,637 unique destination IP addresses with 10,294 distinct
Server Name Indication (SNI) values and 10,164 unique end-
host certiﬁcates. Table II shows the number of connections and
servers encountered per port.
Please note that our passive data set exhibits artefacts of the
collection process that are beyond our control. As our data is
collected at the Internet uplink of one university, it is potentially
biased. We assume that, due to the high number of students
with diverse cultural backgrounds, the trafﬁc we see is similar
to trafﬁc in other parts of the world, however.
b) Ethical considerations: We are aware of the ethical
considerations that must be taken into account when observing
passive trafﬁc. This research strives to understand the inter-
play between server and client software at the technical level
and does not concern any human subjects. For the SSL/TLS