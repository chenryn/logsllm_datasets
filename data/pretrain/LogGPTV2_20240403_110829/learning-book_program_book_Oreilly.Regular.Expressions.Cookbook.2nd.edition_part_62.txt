Z
Regex options: Case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
[a-z][a-20-9+\- .]*://([a-20-9\--_~%!$&’()*+,;=]+)e([a-20-9\-._~%]+|+
\[[a-f0-9:.]+\]1\[v[a-f0-9][a-z0-9\-._%!$8′()*+,;=:]+\])（：[0-9]+)？
（/[a-20-9)--_%!$&′()*+,μ==@]+)*/?(\?[a-z0-9\- ._%!$8′()*+,;=:@/>]*)？+
(#[a-20-9\--_%!$&′()*+,;=:@/?]*)?$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
Discussion
Extracting the user from a URL is easy if you already know that your subject text is a
valid URL. The username, if present in the URL., occurs right after the scheme and the
two forward slashes that begin the “authority” part of the URL. The usermame is sep-
arated from the hostname that follows it with an @ sign. Since @ signs are not valid
in hostnames, we can be sure that we’re extracting the username portion of a URL if
we find an @ sign after the two forward slashes and before the next forward slash in
8.9 Extrating the User from a URL | 455
---
## Page 472
the URL. Forward slashes are not valid in usermames, so we don’t need to do any special
checking for them.
All these rules mean we can very easily extract the usermame if we know the URL to be
valid. We just skip over the scheme with [a-zo-9+^- J+) and the ://. Then, we grab
the username that follows. If we can match the @ sign, we know that the characters
before it are the username. The characterclass[a-zo-9- _%$&()*+,=] lists all the
characters that are valid in usernames.
This regex willfind a match only if the URL actually specifies a user. When it does, the
regex will match both the scheme and the user parts of the URL. Therefore, we’ve added
a capturing group to the regular expression. When the regex finds a match, you can
retrieve the text matched by the first (and only) capturing group to get the usermame
without any delimiters or other URL parts. Recipe 2.9 tells you all about capturing
groups. See Recipe 3.9 to learn how to retrieve text matched by capturing groups in
your favorite programming language.
If you don’t already know that your subject text is a valid URL, you can use a simplified
version of the regex from Recipe 8.7. Since we want to extract the user, we can exclude
URLs that don’t specify an authority. The regex in the solution actually matches only
URLs that specify an authority that includes a username. Requiring the authority part
of the URI makes the regular expression quite a bit simpler. It's even simpler than the
one we used in Recipe 8.8.
Since this regex matches the whole URL, we added an extra capruring group around
the part of the regex that matches the user. Retrieve the text matched by capturing
group number 1 to get the URL's user.
If you want a regex that matches any valid URL, including those that don’t specify the
user, you can use one of the regexes from Recipe 8.7. The first regex in that recipe
captures the user, if present, in the third capturing group. The capturing group will
include the @ symbol. You can add an extra capturing group to the regex if you want
to capture the username without the @ symbol.
SeeAlso
Recipe 3.9 shows code to get the text matched by a particular part (capruring group)
of a regex. Use this to get the user name.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2
altermation. Recipe 2.9 explains grouping. Recipe 2.11 explains named captruring
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.8 explains
groups. Recipe 2.12 explains repetition. Recipe 2.18 explains how to add comments.
456 | Chapter 8: URLs, Paths, and Intemet Adreses
---
## Page 473
8.10Extracting theHostfromaURL
Problem
You want to extract the host from a string that holds a URL. For example, you want
to extract μu,xegexcookbook,con from http: / /www,regexcookbook, com/.
Solution
Extract the host from a URL known to be valid
LA
[a-z][a-z0-9+\-- ]*://
#Schene
]*)？+
$（+[ or ^) to anchor the match to the start of the string.  skips over the scheme, and  skips
over the optional user. The hostname follows right after that.
RFC 3986 allows two different notations for the host. Domain names and IPv4 ad-
dresses are specified without square brackets, whereas IPv6 and future IP addresses are
specified with square brackets. We need to handle those separately because the nota-
tion with square brackets allows more punctuation than the notation without. In par-
ticular, the colon is allowed between square brackets, but not in domain names or IPv4
addresses. The colon is also used to delimit the hostname (with or without square
brackets) from the port number.
[a-z0-9\--_~%]+> matches domain names and IPv4 addresses. [0-9]+)
# Port nunber
Regexoptions: Free-spacing, case insensitive
Regexflvers: .NET, Java 7, PCRE 7, Perl 5.10, Ruby 1.9
[a-z][a-20-9+\- - ]*://
\A
# Scheme
):
# Port nunber
Regex options: Free-spacing, case insensitive
Regexflarer: PCRE, Perl 5.10, Python
[a-z][a-20-9+\- . ]*:/([a-z0-9\--_~%!$&’()*+,;=]+@)？
([a-20-9\- -_~%]+1\[[a-20-9\--_%!$&′()*+,;=: ]+\]):([0-9]+)
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Extract the port while validating the URL
\A
[a-z][a-z0-9+\- ]*://
#Schene
(@+[=+s(）.g$i%-\6-0z-e])
# User
([a-20-9\-._~%]+
# Named host
[[a-f0-9:-]+\]
 aa #
# IPv6 host
1[v[a-fo-9][a-z0-9\- ._%!$&′()*+,;=:]+\])
: ([0-9]+)
（/[a-20-9\-._"%!sa′()*+，;==@]+)*/?
# Path
8.11 Extracting the Port from a URL I 459
---
## Page 476
（[/θ:=+(),g$i%-\6-0z-e]\)
 Query
（[/@:=+(),g$i%-6-0z-e]#)
# Fragnent
Z
Regexoptions: Case insensitive
Regex flavors: .NET, Java, PCRE, Perl, Python, Ruby
[a-z][a-20-9+\- .]*:\/\/([a-20-9\-._%!$&'()*+,;=]+@)？
（[a-20-9\--_%]+|[[a-f0-9:.]+\]|[v[a-f0-9][a-z0-9)-._%!$&′()*+,;=]
+\])：([0-9]+)(V/[a-20-9--_%!$s’()*+,;==é]+)*\/?+
（\?[a-z0-9\-._%!s&()*+,;=:@\/?]*)>(#[a-20-9--_%1$&()*+,;==@\/>]*)?$
Regex options: Case insensitive
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python
Discussion
Extracting the port number from a URL is easy if you already know that your subject
text is a valid URL. We use \A> or (^) to anchor the match to the start of the string.
[a-z][a-z0-9+\- .]*://> skips over the scheme, and  skips over the optional user. ([a-z][a-z0-9+\- .]*:(//[^/?#]+)?)?)
# Path
([a-z0-9--_~%!$&’()*+,;==é/]+)
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Ruby
Discussion
You can use a much simpler regular expression to extract the path if you already know
that your subject text is a valid URL. While the generic regex in Recipe 8.7 has three
different ways to match the path, depending on whether the URL specifies a scheme
and/or authority, the specific regex for extracting the path from a URL known to be