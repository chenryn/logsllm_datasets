The computational complexity of this algorithm is clearly
equivalent to the naive iterative implementation, as the same
operations are performed. Nevertheless, it exhibits a sub-
linear memory consumption per query. Indeed, the max-
imum depth of recursion is O(log(n)), which means that
only the memory for the O(log(n)) recursive calls is required.
Each recursive call needs to store O(l log(N)) bits due to the
Paillier ciphertexts in Z∗
N l +1, hence the overall storage cost
O(l log(N)) = O(log2(n) log(N)). In conclusion,
when u queries are simultaneously performed, the server
stores only O(n+u·log2(n)) memory, with significant savings
w.r.t. a naive approach.
is:⌈log(n)⌉
l =1
5 SECURITY ANALYSIS
In the previous sections we observed how our PPSS protocol
ensures the confidentiality of the remotely stored string, of
the searched substring, and of the results returned by each
search query. Furthermore, it provide indistinguishability of
the search-pattern followed by multiple queries as well as
the access-pattern privacy of locating the occurrences of a
given substring.
In the following, adopting the framework introduced by
Curtmola in [8], we provide a formal definition of the infor-
mation leakage coming from a PPSS and we formally specify
the adversarial model as well as the security guarantees pro-
vided by our PPSS protocol.
Experiment transcript ← RealP,A(λ):
(cid:16)[[D]], {List_ql}i−1
(D, stA) ← AD(1λ),
∀i ∈ {1, . . . , d}: List_qi ← ∅, List_Ri ← ∅
(qi , stA) ← Ai
∀j ∈ {1, . . . , w}:
([[D]], auxs) ← P.Setup(D, 1λ)
l =1, {List_Rl}i−1
[[qi]]j ← P.Trapdoor(j, qi , auxs , res1, . . . , resj−1)
([[resj]], stA) ← A.Search(stA,[[qi]]j ,[[D]])
resj ← P.Retrieve([[resj]], auxs)
l =1, stA
(cid:17)
List_qi ← ([[qi]]1, . . . ,[[qi]]w)
List_Ri ← ([[res1]], . . . ,[[resw]])
transcript ←(cid:110)[[D]], stA, {List_qi}d
(cid:111)
i =1, {List_Ri}d
i =1
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Experiment transcript ← IdealA,S(λ):
([[D]], stS) ← SD(LD, 1λ)
(D, stA) ← AD(1λ),
∀i ∈ {1, . . . , d}: List_qi ← ∅, List_Ri ← ∅
(qi , stA) ← Ai
∀j ∈ {1, . . . , w}:
(cid:16)[[D]], {List_ql}i−1
transcript ←(cid:110)[[D]], stA, {List_qi}d
List_qi ← ([[qi]]1, . . . ,[[qi]]w)
List_Ri ← ([[res1]], . . . ,[[resw]])
l =1, stA
([[qi]]j , stS) ← Sqi(j, stS, LD, Lq1, . . . , Lqi−1, Lqi)
([[resj]], stA) ← A.Search(stA,[[qi]]j ,[[D]])
l =1, {List_Rl}i−1
i =1, {List_Ri}d
i =1
(cid:111)
(cid:17)
Figure 2: Security game experiments
Definition 5.1 (Leakage of PPSS Protocol). Given a doc-
ument collection D, a string q, and a PPSS protocol P =
(Setup, Query) its leakage L = (LD, Lq) is defined as fol-
lows. LD denotes the information learnt by the adversary
in the Setup phase, i.e., the information inferred by the ad-
versary from the observation of the privacy-preserving rep-
resentation [[D]]. Lq denotes the information learnt by the
adversary in the w iterations (rounds) executed during the
Query phase of the protocol, i.e., information inferred from
the result of the Trapdoor procedure and the execution of
the Search procedure.
The security game stated in Definition 5.2 allows to prove
that a semi-honest adversary does not learn anything but the
leakage L. To this end, this definition requires the existence
of a simulator S, taking as inputs only LD and Lq, which
is able to generate a transcript of the PPSS protocol for the
adversary that is computationally indistinguishable from the
one generated when a legitimate client interacts with the
server during a real execution of the protocol.
Definition 5.2 (Security Game). Given a PPSS protocol P
with security parameter λ, d≥1 queries and the leakage of P
for all the queries L = (LD, Lq1, . . . , Lqd), an adversary A
consisting of d + 1 probabilistic polynomial time algorithms
A = (AD, A1, . . . Ad), and a simulator S, which is also
a tuple of d + 1 probabilistic polynomial time algorithms
S = (SD,Sq1, . . . Sqd), the two probabilistic experiments
RealP,A(λ) and IdealA,S(λ) shown in Fig. 2 are considered.
Denote as D(o) a probabilistic polynomial time algorithm
taking as input a transcript of an experiment o and returning
a boolean value indicating if the transcript belongs to the
real or ideal experiment. The protocol P, with leakage L, is
secure against every semi-honest probabilistic polynomial
time adversary A = (AD, . . . Ad), if there exists a simulator
S = (SD,Sq1, . . . Sqd) such that for every D:
(cid:16)D(o)=1|o←RealP,A(λ)(cid:17) − Pr
(cid:16)D(o)=1|o←IdealA,S(λ)(cid:17)
Pr
≤ ϵ(λ), where ϵ(·) is a negligible function.
In the experiments shown in Fig. 2, D is chosen by the
adversarial algorithm AD and the query qi is adaptively cho-
sen by the i-th adversarial algorithm Ai, depending on the
transcripts of the protocol in the previous queries. All the
adversarial algorithms share a state, denoted as stA, which
is used to store possible information learnt by the adversary
throughout the experiment.
The RealP,A experiment represents an actual execution
of the protocol, where the client receives the document col-
lection D and the d queries and it behaves as specified in the
protocol; conversely, in the IdealA,S experiment, the client
is simulated by S, which however employs only the leakage
information L = (LD, Lq1, . . . , Lqd). In particular, the sim-
ulator SD constructs a privacy-preserving representation
[[D]] by exploiting only the knowledge of LD, while each
simulator Sqi
constructs the trapdoor for each round of the
i-th query by exploiting only the knowledge of the leakage
LD, Lqj , j = 1, . . . , i.
Theorem 5.3. Given a document collection D with z ≥ 1
documents {D1, . . . , Dz} and d ≥ 1 substrings q1, . . . , qd , our
PPSS protocol is secure against a semi-honest adversary, as
per Definition 5.2, with a leakage L = (LD, Lq1, . . . , Lqd),
i =1(len(Di) + 1), ω), with ω denoting the
size of ciphertexts computed by the semantically secure en-
cryption scheme E employed to construct [[D]], and Lqi
=
(len(qi), bi, |OD,qi |), 1≤i≤d, where OD,qi is defined as per Def-
inition 4.1 and bi is the radix chosen to execute the Lipmaa PIR
protocol.
where LD = (z
Proof. See Appendix A.
□
We remark that Theorem 5.3 guarantees search and access
pattern privacy, as they are not enclosed in the leakage L.
6 EXPERIMENTAL EVALUATION
We validated our PPSS protocol implementing a client-server
architecture and running it on a dual Intel Xeon CPU E5-2620
clocked at 3 GHz, endowed with 128 GiB DDR4-2133, and
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
)
s
(
i
e
m
T
p
u
t
e
S
100
50
0
0
100
200
Genome Size (MiB)
Figure 3: Execution time of the Setup procedure for
genomes of increasing size. The blue line shows the fit
between the experimental data and the linear model
given by SetupTime = 0.4369 ∗ GenomeSize − 2.2
64-bit Gentoo Linux17.0 OS. Our implementation provides a
cryptographic security level of at least λ = 80 bits, relying on
the multi-precision integer arithmetic GMP library [14] and a
proper parametrization of the generalized Pailler algorithms
provided by the libhcs library [29], to implement the PIR-
related cryptographic operations. The AES-128 CounTeR
(CTR) mode primitives of OpenSSL ver. 1.0.2r [17] are used
for the cell-wise encryption/decryption of [[D]]=(⟨C⟩, ⟨SA⟩).
Our implementation, together with detailed instructions on
how to reproduce the experimental campaign described in
the following, as well as the data files employed for assessing
functionalities and performance of the provided implemen-
tation, are publicly available online [20].
We chose as our case study a genomic dataset in the
widely employed FASTA format [7] where an alphabet of
five characters is employed to represent a DNA sequence, i.e.:
Σ = {C, G, A,T , N}. Specifically, we considered a document
containing approximately 40 · 106 nucleotides (characters)
belonging to the 21-th human chromosome selected from
the Ensembl publicly available data [12].
In the experiments, we considered documents with vari-
able sizes replicating and truncating the mentioned dataset
appropriately. We considered substring searches with a sub-
string q having m = 6 characters, as it is the size of many
restriction enzyme sites (transcribed as m-character strings),
that are commonly employed in DNA-based paternity tests.
Indeed, the test employs the distances between the occur-
rences of one of the mentioned substrings in the DNA frag-
ments of two hosts to identify if the hosts are related [1].
In the actual implementation employed for the experimen-
tal campaign, we introduced some optimizations which allow
to reduce the number of entries in the arrays ⟨C⟩ and ⟨SA⟩.
First of all, we recall that ⟨C⟩ is the cell-wise encryption of
the array C, which is obtained as described in lines 4 – 6
of Algorithm 2 from the matrix representation, M, of the
BWT, L, of the document. Specifically, as any entry M[c][i],
R
R
array CR with(cid:6) n+1
(cid:7) entries, where CR[j] is a tuple with R +1
(cid:7) entries requiring (only) O(|Σ| · log(n) + R · log(|Σ|) bits.
(cid:6) n+1
with c ∈ Σ ∪ {$}, i ∈ {1, . . . , n + 1} stores the number of
occurrences of character c in the subarray (L[1], . . . , L[i]),
the array C has (|Σ| + 1) · (n + 1) entries storing O(log n) bits.
To reduce the memory footprint of this array, we derive an
hybrid representation between M and the BWT L: given a
parameter R, referred to as sample period, we construct an
elements, the first one being M[:][j · R], that is the j · R-th
column of M, and the other R ones are the characters of the
BWT L at positions {j · R, . . . , j · R + R − 1} (i.e., CR[j] =
concatArrayWithCharacters(M[:][j · R], L[j · R], L[j · R +
1], . . . , L[j · R + (R − 1)])). In this way, the array CR has
The substring search procedure outlined in Algorithm 1 was
modified accordingly to make use of CR in place of M. Specif-
ically, each access to M[c][i], c ∈ Σ ∪ {$}, i ∈ {1, . . . , n + 1},
is replaced by retrieving M[c][⌊ i
R⌋-th entry
of CR and adding it to the number of occurrences of c in
the first i mod R characters of the BWT L found in the ⌊ i
R⌋-
th entry of CR. We chose a sample period R which allows
to encrypt each entry of CR to an AES-128 CTR ciphertext
within approximately log(N) bits, where N is the modulus
employed in the LFAHE Paillier scheme. Furthermore, to re-
duce the number of entries of the array ⟨SA⟩, we encrypted
in a single AES-128 CTR ciphertext of approximately log(N)
bits as many entries as possible from the array SA. In this
way, we reduced the original number of entries of the en-
crypted arrays ⟨C⟩ and ⟨SA⟩ by significant constant factors
(resp. 1200 and 28), obtaining a comparable speed-up in the
Search procedure.
R⌋ · R] from the ⌊ i
In the first test, we focused on the Setup procedure of
Algorithm 2, which builds the privacy-preserving represen-
tation [[D]] of the dataset. The execution time for this pro-
cedure for genomes of increasing size is reported in Figure 3.
In this test we considered also the genomic data correspond-
ing to the 1-st human chromosome, which is much bigger
than the 21-th one employed in all other tests. The experi-
mental results confirm the expected linear trend and they
show practical performance for the Setup procedure: indeed,
building the privacy-preserving representation of the 1-st
human chromosome, which is as big as 238 MB, requires
only 103 seconds.
In the subsequent tests, we profiled the performance of the
Query procedure. We evaluated separately the two phases
of the Query procedure, labeled as Qnum and Qocc in Algo-
rithm 3, that compute the number of occurrences and the set
of positions of the leading character of the occurrence of the
substring, respectively. The performance figures related to
the second phase refers to the retrieval of a single occurrence,
as the costs of retrieving all of them is proportional to their
number. We remark that the communication cost reported in
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
40
20
0
)
s
(
t
s
o
C
t
n
e
i
l
C
Qnum
Qocc
0
20
Radix b
40
10
5