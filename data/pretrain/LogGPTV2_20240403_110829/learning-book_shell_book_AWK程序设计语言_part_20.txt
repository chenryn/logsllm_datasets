正确格式.这次不是直接对文格进行格式化，而是生成排版程序（例如troff，TEX等）的格式化命令，
维护手稿的交叉引用
文件准备的一个常见问题是为条目创建一个一致的名字或编号集合，条目可以是文献引用，图表，示
例等.某些文本格式化程序可以帮助我们完成这件工作，但是大多数情况下还是需要自己来完成，我们
的下一个例子是对交叉引用进行编号，该技术对于技术文格编写来说特别有用，
编写文档时，作者为不同的条目创建并使用不同的符号名，这些条目之后会被交叉引用，因为名字是
符号化的，所以条目可以被添加，删除，重新编排，而不用修改已存在的名字，本节所提出的交叉引用技
citations, figures, tables, examples, and so on
---
## Page 124
第五章文本处理
116
术是使用两个程序共问创建一个文本，文本中的符号名被适当的编号所替代.这里有一个示例文档，文
格中包含了两个文献引用和一张图的符号名：
121
.#Fig _quotes_
Figure _quotes_ gives two brief quotations from famous books.
Figure _quotes_:
.#Bib _alice_
"...and what is the use of a book,' thought Alice,
without pictures or conversations?'" [_alice_]
#Bib_huck
"... if I'd a knowed what a trouble it was to make a book
I wouldn't a tackled it and ain't agoing to no more." [_huck_]
[_alice_] Carroll, L., Alice's Adventures in Wonderland,
Macmi1lan, 1865.
[_huck_] Twain, M., Adventures of Huckleberry Finn,
Webster & Co., 1885.
每一个定叉符号名的行都具有形式：
.#Category _SymbolicName_
这样的定叉可以出现在文枝中的任何地方，只要作者愿意，他可以定义多种不同的Category.在整篇
文档中，某一条目总是通过它的符号名来引用，我们规定符号名以下划线开始并结尾，不过也可以使用其
他任意的名字，前提是你可以从文本中把它们分离出来（条目的名字不可以相同，即使它们在不同的类别
中）.名字，#Fig与，#Big以句点开始，这样的话即使交又引用未被解析，格式化程序troff也可以忽
略它们（对于不同的格式化程序，我们可能需妥作不同的约定）
转换程序创建一份新版本的文档，在新版本中，定义被删除，并且每一个符号名都被一个数字编号所
替代.在每一个类别中，编号从1开始，并按照原始文档中该类别定义出现的顺序而递增
把文档输送给两个程序就可以完成上面所说的转换过程，这里体现出的工作划分思想是强大的通用
编程技巧的又一个实例：第一个程序创建第二个程序，并让第二个程序完成剩下的部分，在这个案例中，
第一个程序xref扫描原始文档并创建第二个程序xref.temp，实际的转换过程将由xref.temp 完
成.假设手稿的原版是document，只需要键入
awk -f xref document > xref.temp
awk -f xref.temp document
就可以得到带有数字形式引用的文档，第二个程序的输出可以被重定向到打印机或文本格式化程序，上122
面所提到的示例文枯的转换结果是：
原文为 Two programs create the version in which the nymbolic names are replaced by suitable numbers. 原文显得有点突几: 不经过
发战直接提“Two programs....
---
## Page 125
第五章文本处理
117
Figure 1 gives two brief quotations from famous books.
Figure 1:
"...^and what is the use of a book,' thought Alice,
"... if I'd a knowed what a trouble it was to make a book
I wouldn't a tackled it and ain't agoing to no more." [2]
[1] Carroll, L., Alice's Adventures in Wonderland,
Macmi1lan, 1865.
[2] Twain, M., Adventures of Huckleberry Finn,
Webster & Co., 1885.
程序xref在文档中搜索以，#开始的行，对该行的每一次出现，程序都会递增数组count中与该
类别对应的元素的值，然后打印一条gsub语句.
# xref - create numeric values for symbolic names
#
input: text with definitions for symbolic names
#
/^\.#/（printf("(gsub(/s/，\"$d\"))\n"，$2,++count[$1]）}
END( printf("1/^[·1#/\n"）}
对于文件document，xref 输出的是第二个程序xref.temp：
{gsub(/_quotes_/，"1")}
{gsub(/_alice_/,"1")}
{gsub(/_huck_/，"2")}
1/*[-]#/
gsub把符号名全局性地替换成数字编号，最后一条语句忽略以，#开始的行，从而删除掉符号名定叉，
Exercise5.15如果遗漏了符号名末尾的下划线，会发生什么事？
Exercise5.16修改xref：可以侦测到某个符号名的多次定义
Exercise5.17修改xref，使得它可以生成你所喜爱的文本编辑器或流式编辑器（比如sed）的编辑命
令，而非awk命令.这会对编辑器的性能产生什么影响？
Exercise5.18你有没有办法让xref只需要对输入数据遍历一次？“遍历一次”对定义的放置位置而
言，既含著什么限制条件？
---
## Page 126
第五章文本处理
118
制作KWIC索引
一个KWIC(Keyword-In-Context)索引指的是一种显示了其所在行的上下文内的每一个单词的索
引.在本质上，它所提供的信息等价于重要语汇索引（concordance），虽然形式上有点不同.考虑下面三
123
个句子：
All's well that ends well.
Nature abhors a vacuum.
Every man has a price.
这三个旬子的KWIC索引是：
Nature  abhors a vacuum.
All's well that ends well.
Every man has a price.
Nature abhors  a vacuum.
All's well that ends well.
Every man has a price.
Every man has a price.
Every man has a price.
Nature abhors a vacuum.
Every man has a price.
All's well that ends well.
Nature abhors a  vacuum.
All's well that ends well.
All's  well that ends well.
在款件工程领域，关于如何构造KWIC索引有一段很有趣的历史.该问题由Parnas在1972年提
出，当时是把它当作一个设计习题，他提供了一个基于单个程序的解决方案，Unix命令ptx用于构造
KWIC索引，它的方法与Parnas相比非常相似，大约只有500行C代码.
Unix管道提供了一个三步骤的解决方案：第一个程序生成每一个输入行的旋转，于是，行内的每一
个单词轮流移动到其所在行的行首；第二个程序对它们进行排序；最后一个程序把它们恢复到旋转前的
样子.SoftwareTools也提供了一个构造KWIC索引的程序，该程序就是以本段所提出的方案为基础实
现的，除了排序，大约包含70行Ratfor（一种结构化的Fortran舒生语言）代码.
使用awk的话会更加方便，只需要两个简短的awk程序，程序之间再放置一个sort命令即可：
awk '
#kwic - generate kwic index
print $0
for (i = length($0); i > 0; i--) # compute length only once
（==（）xqns）
这个索引是在我的系统上运行kwie 特到的，某儿行的出现晰序与美文原版不文一性，我也不如道是什么原因《我甚至没搞壁区WIC完竞是
什)—者注
---
## Page 127
第五章文本处理
119
 prefix space suffix ==> suffix tab prefix
（-）xq（+0)xu
）|
sort -f
awk '
BEGIN { FS = "\t"; WID = 30 }
substr($1,1,WID))
.{
第一个程序首先打印每个输入行的副本，然后，为输入行内的每一个空格打印一行输出，输出行由三部分
构成：当前输入行空格后的内容，制表符，当前输入行空格前的内客。
124
所有的输出行再以管道的方式输送给Unix命令sort-f，选项-f表示“合并（folding)”大小写，
比如，Jack与jack将会紧挨在一起出现.
第二个awk程序对Bort的输出进行重构与格式化.它首先打印当前输入行制表符后面的内客，再
是一个制表符，最后是当前输入行制表符前面的内客。
Exercise5.19为kwic添加一个“停止列表（stoplist)”，“停止列表*指的是不能被当作关键词的单词
集合，比如“a”，“the”
Exereise5.20修改kwic，使得它可以显示尽可能多的行内数据，方法是在末尾换行，而非截断.①
Exercise 5.21编写一个创建重要语汇索引（concordance）的程序：对每一个重妥的单词，显示所有的
出现了该单词的句子或短语
制作索引
编写大型文档（例如书籍或手册）时，通常情况下需要制作一份索引，这个任务由两部分组成：第一
部分是决定为哪些术语制作索引，想把这部分工作做好需要多动点脑子，而且它无法通过机械化步骤完
成；券一部分则完成是积械化的：根据索引宇和页酶列表，生成按字母排序且精心格式化过的索引，本书
的最后几页就是由索引组成的.
在本节的剩下部分里，我们将使用awk和Bort构造一个索引器的核心部分（本书所用的索引构造
程序只比它稍微复杂了一点）.基本思路类似于KWIC索引程序：分而治之.任务被细分成一系列小任
务，每个小任务只需要一行排序命令或一个简短的awk程序就可以完成.由于每一个小任务都很简单且
独立，所以很客易通过扩充或修改它们，来满足更加复杂的索引需求。
这些程序包含了许多与troff相关的细节（本书就是用troff排版的），如果用的是其他排版程序
（比如TEX或Scribe），郡么这些细节都会发生变化，不过程序的基本结构是一样的
我们通过在文本中插入格式化命令来为书籍制作索引.当troff扫描文本时，根据命令把索引字与
页码搜集到一个文件中，文件的内容类似于下面的文本，这些文本是索引准备程序进一步加工处理的原
材料（索引字与页码之阔用一个制表符分开）：
125
* 8 文,为) Fix kwLe to show as mach as possible of lines, by wrapping around at the ends rather than truncating.
---
## Page 128
第五章文本处理
120
[FS]  variable
35
[FS]  variable
36
arithmetic operators
36
coercion rules
4 4
string comparison
4 4
numeric comparison
4 4
arithmetic operators
4 4
coercion~to number
45
coercion-to string
45
[if]-[else]statement
4 7
control-flow statements
4 8
[FS]  variable
52
我们的目标是对于索引字，比如
string comparison
4 4
在最终的索引中会以两种形式呈现：
string comparison 44
comparison, string 44
索引字通常按照术语中出现的每一个空格进行分割并旋转，波浪号一用于阻止分割：
coercion~to number
4 5
将不会对“to”进行索引
有几个细节需要注意，由于我们用的是troff，它有一些字号与字体设置命令，所以在排序时需要
识别并忽略它们.另外，由于字体需要经常改变，所以我们用命令【..·]表示在索引中用等宽字体显示
被方括号包围的文本，例如
[if]-[else] statement
将会被打印成
if-else statement
制作索引的过程由六个命令共同完成：
ix.sort1
先按索引字，再按页码对输入进行排序
ix.collapse
合并同一个术语的页码
ix.rotate
生成索引字的旋转
ix.genkey
为了强制按照正确的顺序进行排序，生成一个排序键
ix.sort2
按照排序键进行排序
ix.format
生成最终的输出
---
## Page 129
第五章文本处理
121
这些命令逐渐地往最终的索引中添加索引字-页码对，接下来，我们按照顺序对这些程序进行分析
第一个排序命令把索引字-页码对当作输入数据，把相同的术语放在一起，并按照页码排序：
126
# ix.sort1 - sort by index term, then by page number
#
input/output: lines of the form string tab number
#
sort by string, then by number; discard duplicates
n--u+ -0+.-x0
解释一下Bort的命令行参数：-t"tab·表示使用制表符作为字段分隔符；+0-1表示第一个排序
键是第一个字段，结果是按照字母排序；+1n-2表示第二个排序键是第二个字段，结果是按照数值排序；
-u表示丢弃重复条目，（在第六章我们将展示一个排序生成程序，它可以根据用户的需要构建排序命令
的参数）如果以上面的数据作为输入，则ix.sort1的输出是：
arithmetic operators
36
arithmetic operators
4 4
coercion rules
4 4
coercion~to number
45
coercion-to string
45
control-flow statements
4 8
[FS] variable
[FS] variable
9
[FS]  variable
52
[if]-[else] statement
4 7
numeric comparison 44
string comparison
4 4
这个输出成为下一个程序ix.collapse的输入，它把同一个术语的页码都放在同一行，该程序是
通常的control-break程序的变形
# ix.collapse - combine number lists for identical terms
input: string tab num \n string tab num ...
#
output: string tab num num ...
BEGIN { FS = OFS = "\t" }
$1 1= prev {
if (NR > 1)
printf ("\n*)
prev = $1
printf("&s\ts", $1, $2)
next
{printf(" &s"，$2)}
在 Linux 中可以写成 sort -t $\t°+0 -1 +1n -2=α译者注
---
## Page 130
第五章文本处理
122
（（）U（<））
ix.collapse 的输出是
127
arithmetic operators
3644
coercion rules
4 4
coercion~to number
45
coercion-to string
45