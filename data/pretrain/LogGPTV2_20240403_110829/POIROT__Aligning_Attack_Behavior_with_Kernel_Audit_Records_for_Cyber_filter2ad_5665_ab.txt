CTI reports related to a known attack. These reports appear in
security blogs, threat intelligence reports by industry, underground
forums on cyber threats, and public and private threat intelligence
feeds. In addition to natural language, the attacks are often de-
scribed in structured and semi-structured standard formats as well.
These formats include OpenIOC[14], STIX[49], MISP[48], etc. Es-
sentially, these exchange formats are used to describe the salient
points of the attacks, the observed IOCs, and the relationships
among them. For instance, using OpenIOC the behavior of a mal-
ware sample can be described as a list of artifacts such as the files
it opens, and the DLLs it loads [13]. These standard descriptions
are usually created by the security operators manually [66, 67].
Additionally, automated tools have also been built to automatically
extract IOCs from natural language and complement the work of
human operators [27, 41, 75]. These tools can be used to perform
an initial extraction of features to generate the query graph and
later refined manually by a security expert. We believe that manual
refinement is an important component of the query graph construc-
tion because automated methods may often generate noise and
reduce the quality of the query graphs.
1Kernel logs can be monitored using tools such as ETW, Auditd, and DTrace in Mi-
crosoft Windows, Linux, and FreeBSD, respectively.
Graph Alignment…S  ThresholdForensic AnalysisMISPSTIXIOC RelationshipsKernel Audit LogsSession 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom17972:
Graph
Query
A=∗.%exe%,
DeputyDog Mal-
Fig.
C=%APPDATA%\∗,
ware.
D=%HKCU%\Software\Microsoft\Windows\CurrentVersion\-
Run\∗, E=%External IP address%.
of
B=∗,
We model the behavior appearing in CTI reports also as a labeled,
typed, and directed graph, which we call query graph (Gq). If a
description in a standard format is present, the creation of the query
graph can be easily automated and further refined by humans. In
particular, the entities appearing in the reports (e.g., processes, files)
are transformed into nodes while relationships are transformed
into directed edges [60]. Nodes and edges of the query graph may
be further associated with additional information such as labels (or
names), types (e.g., processes, files, sockets, pipes, etc) and other
annotations (e.g., hash values, creation time, etc) depending on the
information that an analyst may deem necessary for matching. In
the current Poirot implementation, we use names and types for
specifying explicit mappings between nodes in the query graph
and nodes in the provenance graph.
As an example of query graph construction, consider the follow-
ing excerpt from a report [50] about the DeputyDog malware, used
in our evaluation.
the
execution,
In order
this
adds
8aba4b5184072f2a50cbc5ecfe326701
Upon
writes
“28542CC0.dll” to this location: “C:\Documents and Settings\All
Users\Application Data\28542CC0.dll”.
to maintain
persistence,
registry key:
original malware
“%HKCU%\Software\Microsoft\Windows\CurrentVersion\Run\
28542CC0”. The malware then connects to a host in South Korea
(180.150.228.102).
The excerpt mentions several actions and entities that perform
them and is readily transformed into a graph by a security analyst.
For instance, the first sentence clearly denotes a process writing to
a file (upon execution the malware writes a file to a location). We
point out that the level of detail present in this excerpt is common
across a large majority of CTI reports and can be converted to a
reliable query graph by a qualified cyber analyst. In particular, the
verbs that express actions carried out by subjects can often be easily
mapped to reads/writes from/to disk or network and to interactions
among processes (e.g., a browser downloads a file, a process spawns
another process, a user clicks on a spear-phishing link, etc).
Fig. 2 shows the query graph corresponding to the above excerpt.
Ovals, diamonds, rectangles, and pentagons represent processes,
sockets, files, and registry entries, respectively 2. In Fig. 2, node B
represents the malware process or group of processes (we use a ∗ to
denote that it can have any name), node A represents the image file
of the malware, while nodes C, D and E represent a dropped file, a
registry and an Internet location, respectively. We highlight at this
point that the query graph that is built contains only information
2We use the same notation for the rest of the figures in the paper.
about information flows among specific entities as they appear in
the report (processes, files, IP addresses, etc) and is not intended
to be a precise subgraph of all the malicious entities that actually
appear during the attack. In a certain sense, the query graph is a
summary of the actual attack graph. In our experiments, the query
graphs we obtained were usually small, containing between 10-40
nodes and up to 150 edges.
3.3 Graph Alignment
Finally, we model threat hunting as determining whether the query
graph Gq for the attack “manifests” itself inside the provenance
graph Gp. We call this problem Graph Alignment Problem.
We note at this point that Gq expresses several high-level flows
between the entities (processes to files, etc.). In contrast, Gp ex-
presses the complete low-level activity of the system. As a result,
an edge in Gq might correspond to a path in Gp consisting of mul-
tiple edges. For instance, if Gq represents a compromised browser
writing to a system file, in Gp this may correspond to a path where
a node representing a Firefox process forks new processes, only
one of which ultimately writes to the system file. Often, this kind of
correspondence may be created by attackers adding noise to their
activities to escape detection. Therefore, we need a graph alignment
technique that can match single edges in Gq to paths in Gp. This
requirement is critical in the design of our algorithm.
In graph theory literature, there exist several versions of the
graph matching problem. In exact matching, the subgraph embed-
ded in a larger graph Gp must be isomorphic to Gq [76]. In contrast,
in the graph pattern matching (GPM) problem, some of the restric-
tions of exact matching are relaxed to extract more useful subgraphs.
However, both problems are NP-complete in the general case [10].
Even though a substantial body of work dedicated to GPM exists
[8, 12, 16, 32, 55, 69, 78], many have limitations that make them
impractical to be deployed in the field of threat hunting. Specifically,
they (i) are not designed for directed graphs with labels and types
assigned to each node, (ii) do not scale to millions of nodes, or (iii)
are designed to align all nodes or edges in the query graph exhaus-
tively. Moreover, these approaches are not intended for the context
of threat hunting, taking into account an evasive adversary which
tries to remain stealthy utilizing the knowledge of the underlying
matching criteria. Due to these considerations, we devise a novel
graph pattern matching technique that addresses these limitations.
In Fig. 1, graph nodes are represented in different shapes to model
different node types, such as a file, process, and socket, however,
the labels are omitted for brevity. In particular, Poirot starts by
finding the set of all possible candidate alignments i : j where i and
j represent nodes in V(Gq) and V(Gp), respectively. Then, starting
from the alignment with the highest likelihood of finding a match,
called a seed node, we expand the search to find further node align-
ments. The seed nodes are represented by hexagons in Fig. 1 while
matching nodes in the two graphs are connected by dotted lines.
To find an alignment that corresponds to the attack represented
in CTI relationships, the search is expanded along paths that are
more likely to be under the influence of an attacker. To estimate this
likelihood, we devise a novel metric named influence score. Using
this metric allows us to largely exclude irrelevant paths from the
search and efficiently mitigate the dependency explosion problem.
ABCDE1. exec2. write3. write4. sendSession 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom1798Prior works have also proposed approaches to prioritize flows based
on a score computed as length [32, 69] or cost [25]. However, they
can be defeated by attacks [52, 70] in which attackers frequently
change their ways to evade the detection techniques. For instance, a
proximity-based graph matching approach [32, 69] might be easily
evaded by attackers, who, being aware of the underlying system
and matching approach, might generate a long chain of fork com-
mands to affect the precision of proximity-based graph matching.
In contrast, our score definition explicitly takes the influence of a
potential attacker into account. In particular, we increase the cost
for the attacker to evade our detection, by prioritizing flows based
on the effort it takes for an attacker to produce them. Our search for
alignment uses such prioritized flows and is described in section 4.
After finding an alignment Gq :: Gp, a score is calculated, rep-
resenting the similarity between Gq and the aligned subgraph of
Gp. When the score is higher than a threshold value, Poirot raises
an alert which declares the occurrence of an attack and presents
a report of aligned nodes to a system analyst for further forensic
analysis. Otherwise, Poirot starts an alignment from the next seed
node candidate. After finding an attack subgraph in Gp, Poirot
generates a report containing the aligned nodes, information flows
between them, and the corresponding timestamps. In an enterprise
setting, such visually compact and semantic-rich reports provide
actionable intelligence to cyber analysts to plan and execute cyber-
threat responses. We discuss the details of our approach in section 4.
4 ALGORITHMS
In this section, we discuss our main approach for alignment be-
tween Gq and Gp by (a) defining an alignment metric to measure
how proper a graph alignment is, and (b) designing a best-effort
similarity search based on specific domain characteristics.
4.1 Alignment Metric
We introduce some notations (in table 1), where we define two
kinds of alignments, i.e., a node alignment between two nodes in
two different graphs, and a graph alignment which is a set of node
alignments. Typically, two nodes i and j are in a node alignment
when they represent the same entity, e.g., a node representing a com-
monly used browser mentioned in the CTI report (node %browser%
in the query graph Gq of Fig. 3) and a node representing a Firefox
process in the provenance graph. We note that, in general, the node
alignment relationship is a many-to-many relationship from V(Gq)
to V(Gp), where V(Gq) and V(Gp) are the set of vertices of Gq and
Gp respectively. Therefore, given a query graph Gq, there may be a
large number of graph alignments between Gq and many subgraphs
Notation
i : k
i (cid:57)(cid:57)(cid:75) j
label−−−→ j
i
Gq :: Gp
V (G)
E(G)
F(G)
Description
Node alignment. Node i is aligned to node k (i and k are in
two distinct graphs).
Flow. A path starting at node i and ending at node j.
An edge from node i to node j with a specific label.
Graph alignment. A set of node alignments i : k where i is a
node of Gq and k is a node of Gp.
Set of all vertices in graph G.
Set of all edges in graph G.
Set of all flows i (cid:57)(cid:57)(cid:75) j in graph G such that i (cid:44) j.
Table 1: Notations.
of Gp. Another thing to point out is that each of these graph align-
ments can correspond to different subgraphs of Gp. Each of these
subgraphs contains the nodes that are aligned with the nodes of
Gq; however, they may contain different paths among those nodes.
Among these subgraphs, we are interested in finding the subgraph
that best matches the graph Gq.
Based on these definitions, the problem is to find the best possible
graph alignment among a set of candidate graph alignments. To
illustrate this problem, consider the query and provenance graphs
Gq and Gp, and two possible aligned graphs in Fig. 3, where the
node shapes represent entity types (e.g., process, file, socket), and
the edges represent information flow (e.g., read, write, IPC) and
causal dependencies (e.g., fork, clone) between nodes. The numbers
shown on the edges of Gp are not part of the provenance graph but
serve to identify a single path in our discussion. In addition, the
subgraphs of Gp determined by these two graph alignments with
Gq are represented by dotted edges in Gp. Each flow in Gp and
corresponding edge in Gq is labeled with the same number. The
problem is, therefore, to decide which among many alignments is
the best candidate. Intuitively, for this particular figure, alignment
(Gq :: Gp)2 is closer to Gq than (Gq :: Gp)1, mainly because the
number of its aligned nodes is higher than that of (Gq :: Gp)1, and
most importantly, its flows have a better correspondence to the
edges of the query graph Gq.
Influence Score. Before formalizing the intuition expressed
4.1.1
above, we must introduce a path scoring function, which we call
influence score and which assigns a number to a given flow between
two nodes. This score will be instrumental in defining the “goodness”
of a graph alignment. In practice, the influence score represents
the likelihood that an attacker can produce a flow. To illustrate
this notion, consider the two nodes firefox2 and %registry%\firefox
in the graph Gp in Fig. 3. There exist two flows from firefox2 to
%registry%\firefox, one represented by the edges labeled with the
number 2 (and passing through nodes java1 and java2), and another
represented by the edges labeled 3, 3, and 5 (and passing through
nodes tmp.doc and word1). Assuming firefox2 is under the control of
an attacker, it is more likely for the attacker to execute the first flow
rather than the second flow. In fact, in order to exercise the second
flow, an attacker would have to take control over process launcher2
or word1 in addition to firefox2. Since launcher2 or word1 share no
common ancestors in the process tree with firefox2, such takeover
would have to involve an additional exploit for launcher2 or word1,
which is far more unlikely than simply exercising the first flow,
where all processes share a common ancestor launcher1. We point
out that this likelihood does not depend on the length of the flow,
rather on the number of processes in that flow and on the number
of distinct ancestors those processes share in the process tree. One
can, in fact, imagine a long chain of forked processes, which are
however all under the control of the attacker because they all share
a common ancestor in the process tree, i.e., the first process of
the chain. Another possible scenario of attacks present in the wild
involves remote code loading from a single compromised process,
where all the code with malicious functionality is loaded in main
memory and the same process (e.g., firefox) executes all the actions
on behalf of the attacker. While this technique leaves no traces
on the file system and may evade some detection tools, Poirot
Session 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom1799Fig. 3: Simplified Provenance Graph (Gp), Query Graph (Gq), and two sample graph alignments (Gq :: Gp). Node types are
shown with different shapes, and possible alignments for each node is shown with the same color. The numbers on the edges
are merely to illustrate possible paths/flows and do not have additional meaning.
would be able to detect this kind of attack. In fact the influence
score remains trivially unchanged.
One additional important point to note is that this notion of
measuring the potential influence of an attacker is very robust
concerning evasion methods from an attacker. Every activity that
an attacker may use to add noise and try to evade detection will
likely have the same common ancestors, namely the initial com-
promise points of the attack, unless the attacker pays a higher cost
to perform more distinct compromises. Thus, such efforts will be
ineffective in changing the influence score of the paths.
Based on these observations, we define the influence score, Γi, j,
between a node i and a node j as follows:
 max
i(cid:57)(cid:57)(cid:75)j
0