  * Format numbers with commas in the query view (#12031)
  * Add a JSON Diff view for supervisor specs (#12085)
![image](https://user-
images.githubusercontent.com/177816/167922122-32466a67-0364-4f7e-93d0-0675abc29158.png)
  * Improve the formatting and info contents of code auto suggestion docs (#12085)
![image](https://user-
images.githubusercontent.com/177816/167922311-99c79f49-0aa1-4ae4-903d-097fae7ee3f4.png)
  * Add shard detail column to segments view (#12212)
![image](https://user-
images.githubusercontent.com/177816/167922493-8e621a41-631c-4eae-9005-359c5aab7473.png)
  * Avoid refreshing tables if a menu is open (#12435)
  * Misc other bug fixes and usability improvements
## # Metrics
### # Query metrics now also set the `vectorized` dimension by default. This
can be helpful in understanding performance profile of queries.
12464
### # Auto-compaction duty also report duty metrics now. A dimension to
indicate the duty group has also been added.
12352
This release includes several additional improvements for metrics:
  * Druid includes the Prometheus emitter by defult (#11812)
  * Fixed the missing `conversionFactor` in Prometheus emitter (12338)
  * Fixed an issue with the `ingest/events/messageGap` metric (#12337)
  * Added metrics for Shenandoah GC (#12369)
  * Added metrics as follows: `Cpu` and `CpuSet` to `java.util.metrics.cgroups`, `ProcFsUtil` for `procfs` info, and `CgroupCpuMonitor` and `CgroupCpuSetMonitor` (#11763)
  * Added support to route data through an HTTP proxy (#11891)
  * Added more metrics for Jetty server thread pool usage (#11113)
  * Added worker category as a dimension TaskSlot metric of the indexing service (#11554)
  * Added `partitioningType` dimension to `segment/added/bytes` metric to track usage of different partitioning schemes (#11902)
  * Added query laning metrics to visualize lane assignment (#12111)
## # Cloud integrations
### # Allow authenticating via Shared access resource for azure storage
12266
## # Other changes
  * Druid now processes lookup load failures more quickly (#12397)
  * `BalanceSegments#balanceServers` now exits early when there is no balancing work to do (#11768)
  * `DimensionHandler` now allows you to define a `DimensionSpec` appropriate for the type of dimension to handle (#11873)
  * Added an interface for external schema providers to Druid SQL (#12043)
# # Security fixes
## # Support for access control on setting query contexts
Today, any context params are allowed to users. This can cause 1) a bad UX if
the context param is not matured yet or 2) even query failure or system fault
in the worst case if a sensitive param is abused, ex) maxSubqueryRows. Druid
now has an ability to limit context params per user role. That means, a query
will fail if you have a context param set in the query that is not allowed to
you.
The context parameter authorization can be enabled using
Druid.`auth.authorizeQueryContextParam`s. This is disabled by default to
enable a smoother upgrade experience.
(#12396)
## # Other security improvements
This release includes several additional improvements for security:
  * You can now optionally enable auhorization on Druid system tables (#11720)
  * Log4j2 has been upgraded to 2.17.1 (#12106)
# # Performance improvements
### # Ingestion
  * More accurate memory estimations while building an on-heap incremental index. Rather than using the maximum possible aggregated row size, Druid can now use (based on a task context flag) a closer estimate of the actual heap footprint of an aggregated row. This enables the indexer to fit more rows in memory before performing an intermediate persist. (#12073)
### # SQL
  * Vectorized virtual column processing is enabled by default. It will improve performance for majority of the queries. (#12520)
  * Improved performance for SQL queries with large IN filters. You can achieve better performance by reducing `inSubQueryThreshold` in SQL query context. (#12357)
  * `time_shift` is now vectorized (#12254)
# # Bug fixes
Druid 0.23.0 contains over 68 bug fixes. You can find the complete list here
# # Upgrading to 0.23.0
Consider the following changes and updates when upgrading from Druid 0.22.x to
0.23.0. If you're updating from an earlier version than 0.22.1, see the
release notes of the relevant intermediate versions.
## # Auto-killing of segments
In `0.23.0`, Auto killing of segments is now enabled by default (#12187). The
new defaults should kill all unused segments older than 90 days. If users do
not want this behavior on an upgrade, they should explicitly disable the
behavior. This is a risky change since depending on the interval, segments
will be killed immediately after being marked unused. this behavior will be
reverted or changed in the next druid release. Please see (#12693) for more
details.
## # Other changes
  * Kinesis ingestion requires `listShards` API access on the stream.
  * Kafka clients libraries have been upgraded to `3.0.0` (#11735)
  * The dynamic coordinator config, percentOfSegmentsToConsiderPerMove has been deprecated and will be removed in a future release of Druid. It is being replaced by a new segment picking strategy introduced in (#11257). This new strategy is currently toggled off by default, but can be toggled on if you set the dynamic coordinator config useBatchedSegmentSampler to true. Setting this as such, will disable the use of the deprecated percentOfSegmentsToConsiderPerMove. In a future release, useBatchedSegmentSampler will become permanently true. (#11960)
# # Developer notices
## # updated airline dependency to 2.x
https://github.com/airlift/airline is no longer maintained and so druid has
upgraded to https://github.com/rvesse/airline (Airline 2) to use an actively  
maintained version, while minimizing breaking changes.
This is a backwards incompatible change, and custom extensions relying on the
CliCommandCreator extension point will also need to be updated.
12270
## # Return 404 instead of 400 for unknown supervisors or tasks
Earlier supervisor/task endpoint return 400 when a supervisor or a task is not
found. This status code is not friendly and confusing for the 3rd system. And
according to the definition of HTTP status code, 404 is right code for such
case. So we have changed the status code from 400 to 404 to eliminate the
ambigiuty. Any clients of these endpoints should change the response code
handling accordingly.
11724
## # Return 400 instead of 500 when SQL query cannot be planned
Any SQL query that cannot be planned by Druid is not considered a bad request.
For such queries, we now return 400. Developers using SQL API should change
the response code handling if needed.
12033
## # ResponseContext refactoring
`0.23.0` changes the the `ResponseContext` and it's keys in a breaking way.
The prior version of the response context suggested that keys be defined in an
enum, then registered. This version suggests that keys be defined as objects,
then registered. See the `ResponseContext` class itself for the details.
(#11828)
## # Other changes
  * `SingleServerInventoryView` has been removed. (#11770)
  * `LocalInputSource` does not allow ingesting same file multiple times. (#11965)
  * `getType()` in `PostAggregator` is deprecated in favour of `getType(ColumnInspector)` (#11818)
# # Known issues
For a full list of open issues, please see Bug .
# # Credits
Thanks to everyone who contributed to this release!
@2bethere  
@317brian  
@a2l007  
@abhishekagarwal87  
@adarshsanjeev  
@aggarwalakshay  
@AlexanderSaydakov  
@AmatyaAvadhanula  
@andreacyc  
@ApoorvGuptaAi  
@arunramani  
@asdf2014  
@AshishKapoor  
@benkrug  
@capistrant  
@Caroline1000  
@cheddar  
@chenhuiyeh  
@churromorales  
@clintropolis  
@cryptoe  
@davidferlay  
@dbardbar  
@dependabot[bot]  
@didip  
@dkoepke  
@dungdm93  
@ektravel  
@emirot  
@FrankChen021  
@gianm  
@hqx871  
@iMichka  
@imply-cheddar  
@isandeep41  
@IvanVan  
@jacobtolar  
@jasonk000  
@jgoz  
@jihoonson  
@jon-wei  
@josephglanville  
@joyking7  
@kfaraz  
@klarose  
@LakshSingla  
@liran-funaro  
@lokesh-lingarajan  
@loquisgon  
@mark-imply  
@maytasm  
@mchades  
@nikhil-ddu  
@paul-rogers  
@petermarshallio  
@pjain1  
@pjfanning  
@rohangarg  
@samarthjain  
@sergioferragut  
@shallada  
@somu-imply  
@sthetland  
@suneet-s  
@syacobovitz  
@Tassatux  
@techdocsmith  
@tejaswini-imply  
@themarcelor  
@TSFenwick  
@uschindler  
@v-vishwa  
@Vespira  
@vogievetsky  
@vtlim  
@wangxiaobaidu11  
@williamhyun  
@wjhypo  
@xvrl  
@yuanlihan  
@zachjsh