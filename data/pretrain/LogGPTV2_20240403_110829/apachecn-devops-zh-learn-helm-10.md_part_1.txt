# 十、答案
# 第一章:理解 Kubernetes 和 Helm
以下是本章所提问题的一些答案:
1.  如果一个应用在单个应用中包含所有必要的逻辑和功能，则该应用为`monolithic`。单片应用可以分解成多个不同的应用，称为**微服务**。
2.  Kubernetes 是一个容器编排工具。举几个例子，它解决了工作负载调度、可用性和可伸缩性方面的问题。
3.  `create`、`describe`、`edit`、`delete`和`apply`
4.  为了部署应用，用户必须了解许多不同类型的资源。维护同步的本地和活动状态、管理应用生命周期以及维护样板 YAML 资源文件也是一项挑战。
5.  Helm 包括四个生命周期命令，为用户提供了轻松管理 Kubernetes 应用的能力。用户应用这些命令与 Helm 图表交互，Helm 图表是部署应用所需的 Kubernetes 资源的打包。Helm 抽象了 Kubernetes 资源的复杂性，并提供了给定应用的修订历史，允许应用回滚到以前的快照。它还允许动态生成 YAML 资源，并简化了本地和活动状态之间的同步。最后，Helm 以预先确定的顺序应用 Kubernetes 资源，并允许自动化的生命周期挂钩，这可用于执行各种自动化任务。
6.  可以使用`helm rollback`命令。Helm 为每个应用快照分配一个版本。当应用的一个或多个区域从先前应用的状态修改时，会分配新的修订。
7.  `Install`、`Upgrade`、`Rollback`和`Uninstall.`
# 第 2 章:准备 Kubernetes 和 Helm 环境
以下是本章所提问题的一些答案:
1.  Windows 和 Mac 用户可以分别使用 Chocolatey 或 Homebrew 软件包管理器安装 Helm。所有用户(Windows、Mac 和 Linux)也可以从其位于[https://github.com/helm/helm/releases](https://github.com/helm/helm/releases)的 GitHub 发布页面安装 Helm。
2.  Helm 使用本地`kubeconfig`文件进行身份验证。
3.  Kubernetes 角色提供授权。管理员可以通过创建`RoleBinding`来管理这些权限，该 T0 将角色绑定到用户或组。
4.  `helm repo add`命令用于在本地配置 Helm 图表存储库。需要安装该存储库中包含的图表。
5.  Helm 使用的三个`XDG`环境变量是`XDG_CACHE_HOME`、`XDG_CONFIG_HOME`和`XDG_DATA_HOME`。`XDG_CACHE_HOME`用于分配缓存文件的位置(包括从上游图表库下载的图表)。`XDG_CONFIG_HOME`用于设置 Helm 配置的位置(包括`helm repo add`保存的存储库信息)。`XDG_DATA_HOME`用于保存插件信息，使用`helm plugin install`命令添加。
6.  `Minikube`允许用户在其本地机器上轻松创建单节点 Kubernetes 集群。`Minikube`自动配置`Kubeconfig`进行身份验证，并为用户分配`cluster-admin`以执行任何所需的操作。
# 第三章:安装你的第一个舵轮图
以下是本章所提问题的一些答案:
1.  Helm 枢纽是上游图表库的集中位置。用户可以通过使用`helm search hub`命令或访问位于[https://hub.helm.sh/](https://hub.helm.sh/)的 Helm Hub 网站与之交互。
2.  `helm get`命令用于获取已安装的 Helm 版本的详细信息，例如应用的值和生成的 Kubernetes 资源。`helm show`命令用于显示 Helm 图表的一般信息，如支持值列表和图表`README`。
3.  `--set`标志用于提供内联值，对于提供简单值或包含不应保存到文件中的机密的值非常有用。`--values`标志用于通过使用值文件来提供值，并且有助于一次提供大量值并将应用的值保存到源代码管理存储库中。
4.  `helm history`命令可用于列出版本的修订。
5.  如果您升级一个版本而不提供任何值，默认情况下会应用`--reuse-values`标志，这将重用上一版本中应用的每个值。如果至少提供了一个值，则应用`--reset-values`标志，将每个值重置为默认值，然后合并提供的值。
6.  `helm history`命令将显示六个版本，第六个版本表示应用回滚到修订版 3。
7.  `helm list`命令可用于查看部署到一个名称空间的所有版本。
8.  `helm search repo`命令可用于列出每个存储库的图表。
# 第四章:理解舵轮图
以下是本章所提问题的一些答案:
1.  YAML 是最常用的格式，尽管 JSON 也可以替代使用。
2.  三个必填字段为`apiVersion`、`name`和`version`。
3.  通过将所需的依赖关系值放置在名称与依赖关系图表名称相同的地图中，可以引用或覆盖图表依赖关系中的值。也可以使用`import-values`设置导入值，该设置可用于允许使用不同的名称引用依赖值。
4.  您可以创建一个升级挂钩，以确保在运行`helm upgrade`命令之前拍摄数据快照。
5.  您可以提供`README.md`文件来为您的图表提供文档。您也可以创建`templates/NOTES.txt`文件，该文件可以在安装时动态生成发行说明。最后，`LICENSE`文件可以用来提供法律信息。
6.  `range`动作允许图表开发者生成重复的 YAML 部分。
7.  `Chart.yaml`文件用于定义关于 Helm 图表的元数据。该文件也称为图表定义。`Chart.lock`文件用于保存图表相关性状态，提供关于所使用的确切相关性版本的元数据，以便可以重新创建`charts/`文件夹。
8.  `helm.sh/hook`注释用于定义钩子资源。
9.  函数和管道允许图表开发人员对模板中的数据进行复杂的处理和格式化。常用功能有`date`、`include`、`indent`、`quote`、`toYaml`。
# 第五章:建立你的第一个 Helm 图表
以下是本章所提问题的一些答案: