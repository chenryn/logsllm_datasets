sub do_master_failover
eval{
58
5
5
check_set_latest_slaves();
force_shutdown($dead_master);
$log->info();
else{
($dead_master,$new_master);
sdeadn
log->info（)
$exit _code =MHA::MasterRotate:main(@ARGV);
$exit_code =MHA::MasterFailover:main(@ARGV);
code
图8-13
图8-12
第8章MySQL集群和高可用设计丨311
---
## Page 334
312丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
8.2.5
（1）Failover 如果在8个小时内再次切换，是会直接抛错的，如图 8-15 所示。
通过源码我们可以看到很多不曾注意的细节，我们来简单罗列一下。
我们可能不知道的MHA逻辑
#If the last failover was done within 8 hours, we don't do failover
slogk->e
l0g
save_master_binlog(Sdead_master);
log
log
>info(
!$_ser
inf
$min
in
nt
Phase 4:Slaves Recovery Phase..\n");
select_new_master$dead_master,
mana
Phase 3.2:Saving Dead Master's Binlog Phase..\n");
atmas
find_latest_base_slave($dead_master);
>is_gtid_auto_pos_enabled()）{
图8-15
图8-14
vanced_latest_slave();
---
## Page 335
8.2.6MHA的缺点和局限性
也对于切换逻辑的一些阈值做了调整，大家可以根据自己的系统情况进行定制和改进。
们的测试和代码实现来看，和目前的实现需求还有一些差距，在充分测试MHA的基础上，我们
而且在日志中会有明文密码的情况，这是潜在的隐患，还有参数 secondary_check 的设置，从我
100000000（将近100M）。
过下面的代码可以看到，延迟不是根据时间来判断，而是根据relay 的大小，大小差异在
MHA的可用性。
connect，一般建议设置为 ping insert。
上的延迟是无法启动MHA的。
它的逻辑如下图8-16 所示，其实就是在一个指定的表中写入一条记录，以此来验证
当然在代码中也看到了一些不完善的地方，比如 master_ip_failover 的实现，逻辑部分很简陋
if
健康检查的部分是参数 ping_type，它有3个可选值：ping insert、ping select和 ping
my $g_seconds_behind_master=30;
（1）需要在各个节点间打通 ssh 信任关系，这有一定的安全隐患，默认端口是 22，
MHA本身也存在一些潜在的缺点和局限性，我们来简单罗列一下：
而对于数据的延迟，我们通过代码可以看到这个逻辑是可以根据需求来定制的，通
主从复制检查的阈值是基于 seconds_behind_master，默认是30秒，也就是说 30秒以
（3）数据延迟的阈值
CREA
（2）主从复制的检查阈值
Sdbh->do("CREATE DATABASE IF NOT EXISTS infra");
($latest->{Master_Log_File} gt $target->{Relay_Master_Log_File))
bh->(RaiseError)=1;
infra.
.chk ma
图8-16
第8章MySQL集群和高可用设计|313
---
## Page 336
314丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
理，可以提高效率和准确性。
量的补充工作，主要包括 MHA 参数定制和 MHA 平台化管理。
8.2.7
悉 Perl、MHA 逻辑和其他开发技能；综合下来，要改造为 Python 或者其他实现方式是存
和业界的落地情况下参差不齐。
能产生不一致，在5.6版本中开始引入了 Binlog Server 的角色，但是实际上在架构复杂性
有些公司是禁用22端口的，需要做下调整。
在
的丝（2）无法保证强一致，MHA是基于MySQL原生态的复制机制，主从之间数据有可
一些壁垒的。
·根据配置文件生成部署脚本：
·根据配置文件生成节点信任关系：
（1）部署脚本
·修改 ssh 端口为定制端口，默认为22，比如设置端口为20022；
1．参数定制
MHA是-
（5）项目活跃度，MHA在近些年来鲜有项目更新，对于持续化的维护存在潜在问题。
（4）定制难度大，MHA 是基于Perl开发，
（3）中心化管理，当中心节点宕机则无法保障高可用。
（3）MHA管理
●switchover逻辑脚本化：
（2）主从切换
对于MHA的管理，主要梳理了如下的逻辑和功能，把管理维护操作融入了平台化管
2．平台化管理
MHA 集群状态检测：
）查看节点通信情况：
，根据切换情况更新部署脚本配置：如果集群发生了切换，可以重置集群的一些配
，修改日志的格式，目前有些日志输出是不统一的，可以根据需求来定制内容
，定制超时时间，
切换；
查看主从延迟：
报告内容定制：
置，让集群可以快速恢复使用。
异化配置；
MHA 的补充和改进
个成熟的技术，
：如果发生了集群切换，应该有相关的报告提示和信息提示。
可以及时跟进主从延迟，
默认为4秒，可以根据业务优先级调整，比如改为6~10秒;
周期性检查节点间的通信情况，
周期性检查集群的整体状态，
，但不是一个完美的技术方案，我们需要在此基础上进行大
目前 MHA 在这部分的逻辑比较少，需要深入定制;
根据配置关系生成统一的部署脚本，避免过多的差
主要目标是让信任关系的创建更便捷一些;
语言相对小众，
在发生故障前避免因为延迟导致的不可
，过滤错误日志；
属于巡检任务
如果要做定制，则需要熟
---
## Page 337
术的成熟想必也会逐渐成为一种趋势，从 Galera 到后面 Percona 包装的 PXC，从 Group
信很多DBA都会记住5.7.17版这个具有重要里程碑意义的版本，高可用方案随着这个技
8.3
来的小节中细讲。
们需要向更高的要求和标准迈进，在我看来，这一站便是InnoDB Cluster，我们将在接下
已有的功能完善的更好。
从 MySQL 原生的异步复制过渡到插件式的半同步复制，再到 Group Replication；相
我赞同那句话：没有最好，只有更好。MHA只是我们高可用历程中的一个站点，我
如果从一个整体的规划来说，我们希望 MHA 覆盖如下图 8-18 所示的维度，能够把
MHA健康检查日报的内容可以参考下图8-17。
·平台化启停 MHA：启停MHA 操作都可以实现平台化管理，快捷方便。
·健康检查脚本：
日报；
MySQL高可用方案之InnoDBCluster
MySQL库
MHA Manager
定制健康检查脚本，如果有几十甚至上百套集群，可以统一发送
应用编号
8036
MHA状态
元数据管理
自动化部署
自动化测试
图8-18
图8-17
OK
SSH状态
基本管理
定制内容
数据报告
同步状态主库IP
司
0
调度任务
故障自愈
主从切换
第8章MySQL集群和高可用设计|315
从库IP
E
0.12
1.13
12
VIP
6
9199
---
## Page 338
316丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
大版本更新都会逐渐补上以前一些遗留的问题。
方案中的一个重要组件，如下图8-19所示。
Shell、MySQL Router 和 MGR (MySQL Group Replication），其中 MGR 是 InnoDB Cluster
就学InnoDB Cluster 是不是合适，我们需要了解一下 InnoDB Cluster 的三大件 MySQL
8.3.1
成熟，到时候会是摆在MySQL DBA 面前的一个艰难选择。
年实战经验的老手，在技术成熟度方面完全不逊于官方。所以选择哪一个或者哪一个更
replication 的角度再回头来看，竟然发现是如此相似。Galera 的作者都是一批有着 20 多
个强一致性的设计方式，自然会用到组播的方式。
从长远来看，我看好InnoDBCluster的发展，
MySQL 的这个高可用方案是一个 share nothing 的架构，这样也就使得整个架构是一
InnoDB Cluster 推出以来，很多人都想尝尝鲜，但是也可能会想，MGR 还没玩好，
InnoDB Cluster 三大件
MySQL Servers
Client App
HighAvailabilityCluster
Group Replication
图8-19
，毕竟这是MySQL欠下来的债，后面的
iste
MySQLXAdminAPI
---
## Page 339
是先行测试，对于集群架构一目了然，如图8-20所示。
完成安装部署的工作，所以图形化，本机快速测试，学习周期很缩短，而且过程清晰。
速安装，快速迭代，让你先投入足够的时间和精力去了解它，然后再反过来投入一些精力来
收益来说是不高的，建议通过实践学习来快速掌握，而不是刚开始就琢磨高大上的概念。
80%的时间花在安装部署上，而对于之后深入学习投入的时间和精力很少，这样对于学习
8.3.2
如果想快速入手InnoDB Cluster有什么好的方法吗，我的建议是通过图形化的方式来快
InnoDB Cluster 图形化安装是Windows 版本自带的功能，基于 sandbox来做的，目前
其实在学习一门新技术时，大家经常会犯一个错误，那就是对于一门新技术的学习，
下面有个Check 的按钮，可以在线检查，实时输出状态，如图 8-21所示。
快速入手InnoDBCluster的建议
thitpyuean
国
图8-21
图8-20
etCancel
第8章MySQL集群和高可用设计|317
---
## Page 340
318丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
先你得有 sandbox，接着是InnoDB Cluster的三大组件，所以你可以从官网直接下载下来
版本是2.6，而它的最低要求是2.7及以上，所以还是需要提前准备下这个部分。
就不赘述了。
MySQLProxy，这些的使用率个人感觉还是不高，也就是经受的考验还不够，原因有很多，
终于有了这个官方的高可用解决方案。你要说还有一些方案补充，比如 MySQLCluster,
8.3.3使用 sandbox 快速部署 InnoDB Cluster
测试，也是全然没有问题，如果想更快更方便地测试模拟，还可以使用 sandbox来做，首
mysql-js> dba.deploySandboxInstance(3310)
make install
安装InnoDB Cluster 环境的一个基本要求就是 Python，我看了下，很多默认的系统
记得 MySQL Group Replicatioin 刚开始的时候，MySQL 界很是轰动，等待了多年，
使用 MySQL Shell 的命令 mysqlsh 开始部署，创建一个端口为 3310 的实例。
mv /usr/bin/python /usr/bin/python2.6
make distclean
如果你的系统是 Python 2.6版本的，可以考虑升级到2.7，参考如下的方法。
对于 InnoDB Cluster 的学习也算是一个启蒙吧。
图形化安装还是比较清晰的，安装完成后，我们可以很方便地进行检查，如下图8-22所示。
然后我们开启安装之旅。
显而易见，搭建InnoDBCluster需要多台服务器，而如果只是在一台服务器上做练习
做基本的环境设置，替换旧的 Python。
Python 2.7
 /usr/local/bin/python2.7 -V
查看 Python 的版本。
./configure
下载安装包，部署。
ke
selec
clean
*fron
replication_group
IBER
/usr/bin/pythonsandbox 安装部署 ter 
图8-22
HOST
MEMBER_P
MEMBER_ST
---
## Page 341
bin/mysqlrouter
dn
至少需要3个节点。
# 1n -s /home/innodb_cluster/mysql-router-2.1.3-linux-glibc2.12-x86-64bit/
这个时候还是要输入密码，成功之后，这个绑定就打通了。
配置MySQLRouter的启动节点为端口3310的实例
/usr/bin/mysqlroute
接下来，我们再配置一下 MySQL Router，创建个软链接，保证能够正常调用。
mysql-js> cluster.addInstance('root@localhost:3330')
这个时候Cluster 就创建好了。
再加入端口为3330的节点，日志和节点2相似。
Adding instance to
mysql-js> cluster.addInstance('root@localhost:3320')
接着把另外两个节点加入进来，先加入端口为3320的节点。
定义一个Cluster 变量，节点1就开启了Cluster创建之旅，可以从下面的信息看出，
Classic
Closing old connection...
R
mysql-js>\connect root@localhost:3310
我们切换到 3310的 MySQL 实例，准备开始创建 Cluster。
dba.deploySandboxInstance(3330)
dba.deploySandboxInstance (3320)
接着创建另外两个节点3320和3330。
Deployingnew
Please enter a MySQL root password for the new instance:
输入密码之后，
/root/mysql-sandboxes/3310
luster successfully created. Use Cluster.addInstance () to add MysQL instances.
 new InnoDB cluster will
 Session successfully established. No default schema selected.
/usr/bin/mysqlroute
MySQL
一个3310端口的MySQL服务就启动了。
the cluster
added
instance
'root@localhost:3310'
'testcluster'
tothe
take
'root@1ocalhost:3320'
InnoDB
from a
few
Depending on the amount of
第8章MySQL集群和高可用设计丨319
---