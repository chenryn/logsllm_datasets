are not significantly different than those of the resolvers.
The resilience of the DNS infrastructure to BGP hijack attacks is
also a function of the distribution and the topological location of the
nameservers in the Internet. We measured the characteristics of the
nameservers from the Internet routing perspective. Our findings
show that the nameservers are concentrated in just a few ASes.
Our measurements show that 80% of the ASes host less than 10% of
the nameservers, and the rest of the nameservers are concentrated
on the remaining ASes. This concentration of the nameservers on
a few ASes, typically CDNs, makes it easier to intercept traffic of
multiple nameservers with a single prefix hijack.
SadDNS. For a nameserver to be vulnerable to side-channel at-
tack (Section 3.2), the attacker must be able to ‘mute‘ the name-
server to extend the time-window for the attack. This is achieved by
abusing rate-limiting in nameservers. To find out if a nameserver
supports rate-limiting, we use the following methodology: we
send to the nameserver a burst of 4000 queries in one second,
and see if this stops (or reduces) the subsequent responses received
from this server. We consider a nameserver to be vulnerable if we
can measure a reduction in responses after the burst.
Fragmentation. We evaluate the vulnerability to fragmentation-
based poisoning in nameservers and domains by testing three prop-
erties required to create a sufficiently large fragment in order to
inject malicious records into it: (1) support of IMCP fragmentation
needed, (2) record types for optimising response size, (3) by bloating
the queried domain and (4) fitting the response into the limitation
of EDNS.
PMTUD. We first check for the support of path MTU discovery
(PMTUD) with ICMP fragmentation needed: we send to the name-
server an ICMP fragmentation needed packet, which indicates that
the nameserver should fragment packets sent to our test host. Then
we send queries of different type to that domain. We consider a
nameserver vulnerable if the responses return fragmented.
Record types. We evaluated fragmentation with three record
types: ANY, A and MX. We use DNS requests of type ANY to increase
0%10%20%30%40%50%/11/12/13/14/15/16/17/18/19/20/21/22/23/24% of prefixesResolvers: Open resolverResolvers: AdnetNameservers: AlexaSIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tianxiang Dai, Philipp Jeitner, Haya Shulman, and Michael Waidner
Implementation Vulnerable Note
BIND 9.14.0
Unbound 1.9.1
PowerDNS Recursor 4.3.0
systemd resolved 245
dnsmasq-2.79
yes
no
yes
yes
no
cached
doesn’t support ANY at all
cached
cached
not cached
Table 5: ANY caching results of popular resolvers.
Figure 4: CDF of resolver EDNS UDP size vs. minimum frag-
ment size emitted by nameservers.
the response size above the fragmentation limit of the nameserver.
We find that for 19.50% of domains in 1M-top Alexa there is at least
one nameserver which emits fragmented DNS responses, which can
be used for cache poisoning attacks via injection of IP fragments.
We plot the minimum fragment size emitted by those nameservers
in Figure 4, which shows that most affected nameservers (83.2%)
fragment DNS responses down to a size of 548 bytes and 7.05%
even down to 292 bytes. We tested ANY response caching in 5 of
the most popular resolver implementations and found that 3 out
of 5 use the contents of an ANY response, to answer subsequent A
queries, without issuing further queries (See Table 5). Namely, the
adversaries can often launch cache poisoning attacks by issuing
queries for ANY record type in the domain.
However, only open resolvers (or forwarders) allow the attacker
to trigger ANY queries. We repeat the same study using queries for
A record type and then for MX record type, which are the query
types typically triggered using the other query-triggering methods,
such as via email or a script in a browser. We get vulnerability rates
of 0.29% and 0.44% respectively due to the smaller response sizes
which are often not sufficiently large to reach the nameserver’s
minimum fragment size. However, these numbers represent the
lower bound.
Bloat query. The attacker can bloat the queries by concatenat-
ing multiple subdomains which increases the responses sizes. The
maximum increase is up to 255 characters. The labels are limited
to max 63 characters (+1 for the label delimiter) and the attacker
can concatenate four subdomains: 4*64 (minus the parent domain).
This increases the vulnerable resolvers to above 10%.
Fitting into response. Additionally to the requirement that the
DNS response size must be big enough to trigger fragmentation
on the nameserver side, it must also be small enough to fit in the
resolvers maximum response size advertised in EDNS.
To evaluate this, we measure the EDNS UDP size of more than
1.5K open resolvers collected from Censys [32] IPv4 Internet scans.
We query each resolver by triggering a query to our own name-
server and measure the EDNS UDP payload size advertised in the
query. The results are shown in Figure 4. Approximately 40% of
the resolvers support UDP payload sizes of up to 512 bytes, while
50% of the resolvers advertise a payload size equal or larger than
4000 bytes. The remaining 10% are between 1232 and 2048 bytes.
Given the minimum MTU size measurement of the nameservers
in 1M-top Alexa domains in Figure 4, this means that the resolver
population is essentially portioned in two groups: one group (40%)
which is vulnerable to poisoning attacks with 7% of all vulnerable
domains and one group (50-60%) which is vulnerable to poisoning
attack with all the vulnerable domains.
(a) Resolver
(b) Domain
Figure 5: Venn diagram of all vulnerable resolvers (by num-
ber of back-end addresses) and domains.
5.3 Comparative Analysis
Our measurements show that the methodologies for DNS cache
poisoning can often result in practical attacks, depending on the
setup, network conditions and server configurations. In this section
we compare the DNS cache poisoning methodologies with respect
to stealthiness, effectiveness and applicability.
The main insights of the experimental measurements that we
performed using each of the methods in Section 3 are summarised
in Table 6. The columns in Table 6 correspond to the attacks we
carried out against the domains and resolvers in our dataset (see
Section 5).
BGP Hijack SadDNS
sub-
same-
Applicability
80%
or
70%
Effectiveness
11%
and
12%
0.2%
497
987K
Stealthiness
Fragmentation
any IPID
global IPID
and
4%
0.1%
1024
65K
91%
and
1%
20%
5
325
Vuln. resolvers
Vuln. domains
70%
or
53%
Hitrate
Queries needed
Total traffic (pkts)
100%
1
2
Visibility very
visible visible stealthy, but locally de-
tectable (Packet flood) very stealthy
Additional requirements
none
none
Additional
requirements
Table 6: Comparison of the cache poisoning methods.
max(resolver EDNS size)
< min(nameserver MTU)
5.3.1 Applicability. A method is applicable against a resolver for
some domain if it results in a practical DNS cache poisoning attack.
The applicability for each method for resolvers and domains is
listed in Table 6.
845
0%20%40%60%80%100%68   292    548 1500 2048 3072 4096% of populationsize (bytes)EDNS size of resolversminimum fragment size of nameservers45,1171,7873,5255,51516,6721,1451,075HijackDNSSADDNSFragDNS407,48339,09461,45529,69010,1782652,587HijackDNSSADDNSFragDNSFrom IP to Transport and Beyond:
Cross-Layer Attacks Against Applications
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
To compare the applicability of the methodologies we use the
results of our internet measurements (Tables 3 and 4) and take
the numbers for the ad-Net resolvers and 1M-top Alexa domains
datasets. We also show the absolute number of all vulnerable re-
solvers (according to a back-end address) and domains in all our
datasets in Figure 5. This figure shows that the number of resolvers
and domains vulnerable to HijackDNS is by far the highest, while
SadDNS has more vulnerable domains and FragDNS has more vul-
nerable resolvers. The overlaps between the vulnerable domains
and resolvers can be seen as expected for a distribution of unrelated
properties, i.e., SadDNS and FragDNS have a significant overlap
with HijackDNS, which is due to the fact that 53-70% of the sys-
tems we measured are vulnerable to HijackDNS, while SadDNS
and FragDNS only have a small overlap compared to number of
vulnerable systems in each category. Only 11% of the DNS resolvers
and 12% of the domains are vulnerable to SadDNS attack. Many
more resolvers are vulnerable to injection of content via IPv4 frag-
ments, hence FragDNS attack is more applicable than SadDNS. In
addition, due to its large size, the open resolver dataset dominates
the results in our comparison.
5.3.2 Effectiveness. Attack effectiveness is demonstrated with the
traffic volume needed for a successful attack, which is a function
of the number of queries that should be triggered for a successful
attack. The larger the attack volume, the less stealthy the attack is.
We define hitrate as the probability to poison the target DNS cache
with a single query and calculate the expected number of queries
for each of the poisoning methods by inversion of the hitrate. We
estimate the expected number of packets sent to the resolver by
multiplying this with the traffic volume generated per query. For
SadDNS where the amount of traffic during the attack is not stable,
we analyse the experimental data for the amount of traffic needed.
HijackDNS. If an AS prefers a malicious BGP announcement
of the adversary to the announcement of the victim AS, then the
attack is effective, requiring only a single packet to send a malicious
BGP announcement and then another packet to send a spoofed DNS
response with malicious DNS records.
SadDNS. Using our implementation of SadDNS attack from
Section 3.2 we find that the DNS cache poisoning with SadDNS
succeeds after an average of 471 seconds (min: 39 seconds, max:
779 seconds). This is inline with the results in [57] which report an
average of 504 seconds. To achieve a successful attack we needed
to run 497 iterations on average. This is correlated with the attack
duration since we do not trigger more than two queries per second.
When more queries within one attack iteration are triggered, the
resolvers respond with servfail. By inverting this number we
get a hitrate of 0.2%. Notably however, since most of the queries
do not result in attack windows of meaningful length, an attacker
should be able to optimise the attack by analysing the exact back-
off strategies used by the target resolver, and adjusting the queries
according to this.
Using the results from our SadDNS experiment, we also obtain
statistics for how may packets are sent to the target resolver. On
average, our implementation sent 986,828 packets or 88MB of traffic,
which is again, comparable to the original attack (69MB in [57]).
FragDNS. Only about 1% of the domains allow deterministic
fragmentation-based cache poisoning attacks thanks to slowly in-
cremental global IPID counter in nameservers. More than 4% of the
domains are vulnerable to probabilistic attacks by attempting to
hit an unpredictable IPID counter and to match the UDP checksum.
When the IPID values are not predictable, the probability to hit
the correct value is roughly 0.1%. To match the UDP checksum,
the attacker needs to predict the partial UDP checksum of the sec-
ond fragment of response sent by the nameserver. This means that
the probability to match the UDP checksum is the inverse of the
number of possible second fragments emitted by the nameserver
(assuming equal distribution).
To calculate the per-nameserver hitrate of FragDNS attack for
each domain we calculate the product of both probabilities, match-
ing the IPID as well as matching the UPD checksum. We take the
average of these per-nameserver hitrates to calculate a per domain
hitrate. The results of our evaluation are: when the nameservers
use a single global counter for IPID, depending on the rate at which
queries arrive at the nameserver, the median hitrate over all vul-
nerable domains (for different rates of queries from other sources)
is 20%. When the nameserver selects IPID values pseudorandomly,
the median hitrate is 0.1% which is the probability to correctly
guess the IPID, as most servers to not randomise the records in
DNS responses.
FragDNS attack also requires large traffic volumes with 1024
packets median computed over vulnerable domains with 65K pack-
ets for an unpredictable IPID, and with only 325 packets on average
against a predictable IPID against high load servers, such as the
servers of top-level domains.
In the worst case, the attack requires 64 packets to fill the resolver
IP-defragmentation buffer and another packet to trigger the query.
Combined with a 0.1% success rate, this translates to an average of
65,000 packets.
Stealthiness. In BGP prefix hijacks malicious BGP announce-
5.3.3
ments manipulate the control plane and a single BGP announce-
ment suffices to change the forwarding information in the routers.
BGP prefix hijacks generate lower traffic volume when performing
the hijack but may be more visible in the Internet since the attack
impact is more global. The more networks are affected as a result
of the BGP hijack the higher the chance is that such attacks may
be detected. Same-prefix hijack is more stealthy in control plane
than sub-prefix hijack since it does not affect the global routing
BGP table in the Internet, but causes manipulations only locally at
the ASes that accept the malicious announcement. Furthermore,
as we already mentioned, short-lived BGP hijacks typically are
ignored and do not trigger alerts [23, 48, 49]. In contrast, guessing
the source port with SadDNS method (Section 3.2) or injecting
malicious payload via IPv4 fragmentation (Section 3.3) generate
more traffic than BGP hijacks, but only locally on the network of
the victim DNS resolver or the target nameserver. In contrast to
BGP hijacks the attack is performed on the data plane, and is hence
not visible in the global BGP routing table in the Internet.
SadDNS attack creates a large traffic volume and hence may
be detected by the affected networks. FragDNS attacks against
domains that uses a global sequentially incremental IPID counter
are the stealthiest.
846
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tianxiang Dai, Philipp Jeitner, Haya Shulman, and Michael Waidner
6 COUNTERMEASURES
Almost all Internet systems, applications and even security mecha-
nisms use DNS. As we showed, a vulnerable DNS introduces not
only threats to systems using it but also to security mechanisms,
such as PKI. We provide recommendations to mitigate that threat.
We also set up a tool at https://crosslayerattacks.sit.fraunhofer.de
to allow clients to check if their networks are operating DNS plat-
forms vulnerable to the cache poisoning attacks evaluated in our
work. In the rest of this section we separately explain our recom-
mendations for DNS servers to prevent cache poisoning attacks
and then for applications to prevent cross-layer attacks.
6.1 DNS servers
In addition to recommendations and best practices for patching
DNS servers, such as those in [RFC5452] [43], we recommend a
new countermeasure we call security by obscurity. Our experi-
ence of cache poisoning evaluation in the Internet showed that the
less information the adversary has, the more hard it becomes to
launch the attacks in practice. Security by obscurity proves effective
not only against off-path but also against on-path MitM attacks.
Although it is a known bad practice in cryptography it turns out
useful in practice. Specifically, for launching the attacks the attack-
ers need to collect intelligence about the target victims, such as
which caching policies are used, which IP addresses are assigned to
the resolver - randomising or blocking this information, will make