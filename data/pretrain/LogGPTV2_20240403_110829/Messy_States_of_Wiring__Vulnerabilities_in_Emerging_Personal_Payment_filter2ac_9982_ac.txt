cause a collision. The attacker only has to obtain the param-
eters between the price and an optional ﬁeld for creating a
collision.
Orders have a time window in which the payment can be
accepted. Since the time for calculating the MD5 collision is
usually longer than this window, capturing the packet after
the payment has been set up and then generating the collision
is impractical. However, we can predict the necessary param-
eters to practically implement the MD5 attack. Based on our
empirical studies, some PPSs put the price near the optional
ﬁeld, usually named return_URL or orderuid, in addition to
some other possibilities. Then the attackers can create the
collision based only on two different prices. Moreover, some
parameters between the price and the optional ﬁeld can be
obtained from other orders, such as noti f y_url, merchant ID,
and the merchandise name. These parameters can be eas-
ily obtained by applying for the payment and capturing the
network packet. The most difﬁcult problem comes from the
condition where the order ID lies in the area between the price
and the optional ﬁeld, since it varies in different orders. We
USENIX Association
30th USENIX Security Symposium    3279
collected order IDs from some merchants and found that a
timestamp with a random sequence is the most common form.
For example, an order from xddpay platform contains the or-
der ID “20201009053425901798", where “20201009053425"
is the timestamp and “901798" is the random number. Based
on the demo provided for the PPS, the random sequence is
often created by the function “math.round(seed)". If the seed
does not specially assign but only adopts the default value,
which is the common situation in the sample code, the current
time will be used as the seed when calling the function, and
knowing that we can pre-calculate the random sequences to
predict the order ID.
MD5 Collision Generation. The Chosen-Preﬁx attack
method proposed in [43] can be employed by us to achieve
such a goal. Given two different preﬁxes (denoted as Preﬁx1
and Preﬁx2), two corresponding sufﬁxes (denoted as sufﬁx1
and sufﬁx2) can be constructed so that the concatenated val-
ues of Preﬁx1||sufﬁx1 and Preﬁx2||sufﬁx2 collide under MD5,
with the time complexity of 239, where || denotes the concate-
nation of two strings.
The original price and the modiﬁed price are referred to as
P1 and P2 respectively. Since the attacker is most likely trying
to reduce the price he has to pay for an item, we assume P2,
the modiﬁed price, is a smaller value than P1. Here we assume
the optional ﬁeld is a returnURL (this ﬁeld is usually designed
as an optional ﬁeld in our collected PPS protocols). One key
property of URL is that any content after # will be ignored,
therefore we can add # at the end of the URL and place the
near collision blocks after the # so that we can even eliminate
the inﬂuence of collision blocks in the order packet. Let S1 and
S2 be the generated sufﬁxes, which are the collision blocks. By
using the Chosen-Preﬁx attack, the attacker can generate two
strings, P1||URL#||S1 and P2||URL#||S2, that collide in MD5
algorithm, as shown in Figure 6. Furthermore, the parameters
are delivered through JSON form, and some characters (i.e,
“ : {} []") are keywords. Any S1 or S2 that contains any of
those characters can cause parsing problems. In the practical
experiment, we will calculate multiple collision cases to avoid
this situation.
Parameters Replacing. Leveraging the vulnerability that
some order parameters are generated locally at the MC, the
attacker ﬁrst prepares two sets of parameters with the same
MD5 value. The attacker then manipulates the MC to in-
clude P1||URL#||S1 in the order request packet orderrq to
purchase the merchandise. Once the order packet is sent back
to MC from MS after generating the MD5 Token, the attacker
replaces the ﬁeld of P1||URL#||S1 with P2||URL#||S2 while
(cid:3)
p. The
using the same token to generate a new packet order
attacker then sends it to PMP to continue the transaction
process. Figure 7 summarizes the procedure of this attack.
Prefix
Suffix
Same MD5 
Price1...URL#
string1
Price1...URL#string1
Price2...URL#
string2
Price2...URL#string2
KEY
Figure 6: MD5 collision for two pairs of order parameters.
Attacker/MC
MS
PMP
1.generate data1(price), 
                  data2(price')
2. orderrq(data1)
4. orderp
5. generate orderp' (data2)
6. orderp'
3. Token=sign(...+KEY)
    generate orderp(data1) 
8. Personal account
12. Payment 
    notification
9. Payment 
13. Payment 
    notification
7.Token*=sign(...+KEY)
   Token= Token*
10. Payment 
     monitoring
11. Money 
    checking
Figure 7: The ﬂow of MD5 collision attack on PPS.
3.4 Vulnerable Payment Account Delivery
As shown in Figure 2, the merchant’s personal account will
be sent to the MC in QR code form after PMP has checked
the packet signature as part of the payment process. The
price will also be sent along with the QR code and displayed
on the payment webpage to prompt the user. In general, if
the displayed money amount is the same as the commodity
price, the user at MC will trust this information and make the
payment.
3.4.1 Lacking Order Checking Mechanisms
Most of the payment interfaces designed by the PPSs only
display the price, order ID, and QR code to the MC so that a
user can conﬁrm and pay the bill. However, there is neither
information on the merchandise for the order nor the shipping
address. As a result, the order ID is the only clue a buyer can
use to associate the payment with the item he/she is trying
to purchase. However, since a buyer has no way to obtain
his order ID, he will trust the one displayed by the payment
interface. Even if the order has been substituted, the victim
buyer doesn’t notice the displayed order ID is not the one for
his order. It leaves the opportunity for an attacker to swap a
buyer’s order payment information with his/her own order
without the victim being aware .
3280    30th USENIX Security Symposium
USENIX Association
Victim/MC
Attacker/MC
MS
PMP
Table 1: The list of collected 35 PPSs
1.orderrq*
2. orderp*
3. orderrq
5. orderp
4. orderp
6.orderp*
8. Personal account
9. Payment 
13. Payment 
    notification
12. Payment 
    notification
7.Order check
10. Payment 
     monitoring
11. Money 
    checking
Figure 8: The ﬂow of attack with payment substituting.
3.4.2 Attack: Payment Substitution
A payment substitution attack is shown in Figure 8. In this
attack, the attacker ﬁrst performs the man-in-the-middle at-
tack to block the order, orderp, sent from the victim’s MC to
the PMP. Meanwhile, he obtains an order packet for his own
∗
p. Then the attacker substitutes the order informa-
order, order
∗
tion in the JSON ﬁeld of orderp with that in the order
p and
sends this tampered order packet orderp to the PMP. Since
this order request was a legitimate one, PMP will gladly ac-
cept the request and return the corresponding payment infor-
mation to the victim’s client based on the unchanged header
information in orderp. The victim user, not knowing that his
order has been swapped, will pay for the order but cannot get
his purchased item, while the attacker gains his merchandise
without paying.
3.5 Vulnerable Historical Order Inquiry
Generally, it is desirable to have an order inquiry system that
can support queries on the details of previous transactions,
such as order id, payer id, goods’ name, and payment amounts.
However, we found that most of the inquiry APIs in PPSs
often return only a ﬂag indicating whether an inquired order
is paid or not. This limitation is also a key facilitator for our
other attack in Sections 3.2.3, 3.3.2, and 3.3.4, since by the
inquiry API a merchant can never recognize that an order’s
price has been tampered with.
4 Empirical Study
In this section, we discuss our empirical study to analyze
the payment service from PPSs. Our goal is twofold. First,
we investigate the usage of PPS and expose security issues
existing in PPS by detecting the potential vulnerabilities as
we have discussed in Section 3. Second, we use case studies
to exhibit our attacks on some real-world payment applica-
PPS Names
Paysapi
Xddpay
Sdpay
020zf
Weimifu
Pay10086
Yktapi
Xunhupay
Paypayzhu
Caiwumao
Userspay
Greenyep
Qianmapay
Bearpay
Xinyipay
Zhifu
BufPay
ARYA
L pays
Paycats
188PC
PayJS
Heimipay
Fastpay
Huanxipay
Yijinka
PersonalPay
Shouxiaoqian
XorPay
7CPay
Yuandianpay
Dunpay
Jupay
XPay
Sihupay
Website
https://www.paysapi.com/
https://www.xddpay.com
https://www.sdpay.cc/doc/pay.html
https://www.020zf.com
http://weimifu.net/index.php
http://www.pay10086.com/docpay
http://weimifu.net/yktApi/index.php
https://www.xunhupay.com
https://www.paypayzhu.com
http://www.jiakeshuma.com
http://pay.userspay.com
https://www.greenyep.com
http://qianma.app/
http://www.bearpay.net
http://www.bosee.cn/index.html
https://zf-api.com
https://bufpay.com
http://www.moont.cn
http://lp.edlm.cn/
https://www.paycats.cn/
http://188pc.cn
https://payjs.cn
https://www.heimipay.com/
http://www.weixin.mobi
https://www.zhapay.com
http://www.yijinka.com/
http://www.personalpay.cn
https://shouxiaoqian.com
https://xorpay.com
https://www.7cpo.com
https://www.suyoupay.cn
https://www.dunpay.net
http://pay.jam00.comk
http://xpay.exrick.cn/
http://jia.bendilaosiji.com/
tions supported by PPSs, demonstrating that the revealed
vulnerabilities can cause serious consequences in real-world
transactions.
4.1 PPS Ecosystem
We collect PPS systems primarily via internet search and fo-
rum topics that match common keywords for PPS, such as
“personal money collection”, “security payment interface”,
“visa-free”, among others. To this end, we found 35 PPSs,
listed in Table 1. Their vulnerabilities are shown in Fig. 9,
where the orange block represents that the PPS has the cor-
responding vulnerability and the red block indicates that the
PPS has ﬁxed the vulnerability based on our feedback. PPS
names marked in red have temporarily stopped providing their
payment services after our investigation.
USENIX Association
30th USENIX Security Symposium    3281
(cid:40)(cid:91)(cid:76)(cid:86)(cid:87)(cid:72)(cid:71)(cid:3)(cid:57)(cid:88)(cid:79)(cid:81)(cid:72)(cid:85)(cid:68)(cid:69)(cid:76)(cid:79)(cid:76)(cid:87)(cid:92)
(cid:41)(cid:76)(cid:91)(cid:72)(cid:71)(cid:3)(cid:57)(cid:88)(cid:79)(cid:81)(cid:72)(cid:85)(cid:68)(cid:69)(cid:76)(cid:79)(cid:76)(cid:87)(cid:92)(cid:3)(cid:68)(cid:73)(cid:87)(cid:72)(cid:85)(cid:3)(cid:50)(cid:88)(cid:85)(cid:3)(cid:53)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)
Figure 9: The vulnerabilities distributions in the collected 35 PPSs, where the horizontal axis lists the names of PPSs and the
vertical axis lists the vulnerabilities that we have discussed in Section 3.
4.1.1 Discovering the Use of PPS in Merchant
The use of O-API, which is designed for the order interaction
between MC and PMP, is a strong indicator for the use of PPS
in the merchant system. Almost all of the O-APIs are in the
form of REST APIs at a URL. These URLs can be obtained by
automatically parsing the user documents, which are then used
to match against the source code of websites or applications.
In the case of websites, they are directly visible, while parsing
the mobile apps requires a basic reverse engineering tool such
as Androguard [3].
4.1.2 Usage Statistics of PPSs
PPSs are currently used in both websites and mobile apps,
with the web as the recommended method of deployment.
In web-based deployment, PPSs are incorporated as plugins
or website templates by the providers. Our study shows that
PPS’s plugins have been downloaded more than 11,611 times
according to the statistics of two popular repositories (i.e.,
Packagist and WordPress) and some data from PPS websites
[11, 28–30, 50, 51], covering at least 10 thousand merchants
and 20 million customers. Speciﬁcally, for one popular PPS,
FastPay [11], 1,292 merchants and 129 corporations are us-
ing its service to implement the payment function in their
products. The number of customers relying on this service
could be in the millions. For example, we have found more
than 10,000 customers that recharge the accounts and conduct
purchase services on the website of an SEO-related merchant
that adopts the Paysapi PPS. In terms of use of PPS in mobile
apps, a total of 26,956 apps were crawled from SnapPea and
Android Market app stores belonging to different categories.
We found 564 apps that contain the string of unique PPS in-
terface URLs. Through manual inspection, we found that 67
of them have employed PPS payment services, with average
Table 2: Signature Mechanisms of 35 PPSs
Order packet Order Inquiry Packet
One-layer MD5
Two-layer MD5
No signature
30
2
3
31
2
2
downloads of 2,000. These statistics evidence that PPS ser-
vice has become an emerging payment paradigm, attracting a
large number of merchants and individuals, and the adoption
of PPS is still growing rapidly. They also justify the necessity
and importance of our investigation.
4.2 PPS Vulnerability Analysis
4.2.1 Vulnerable Signature Mechanism
To our surprise, we found three PPSs that do not adopt any sig-
nature mechanism to protect the order packets in transmission,
i.e., no Token for integrity protection. The remaining 32 PPSs
leverage a weak cryptographic primitive, MD5 speciﬁcally,
for the token generation. 30 of them leverage the one-layer
MD5 algorithm while 2 of them adopt the two-layer MD5
algorithm, all of which can be broken by MD5 collision attack
(Section 3.3.4). For one-layer and two-layer MD5, the Token
is generated by Token=MD5(order parameters+KEY) and
Token=MD5(MD5(order parameters)+KEY), respectively.
In the order inquiry packet, 31 PPSs leverage the single layer
MD5 algorithm, and 2 PPSs adopt the two-layer MD5 algo-