div
Script Runtime
stack
heap
Program 
counter
Script Runtime
stack
heap
Program 
counter
Window references: 
{window, windowProxy2}
Window references: 
{window, windowProxy1}
Figure 1: Cross-Frame References and the Isolation 
Between Frame1 and Frame2 
script 
an 
runtime 
executes 
Each  frame  has a  script  runtime,  which includes  a  stack,  a 
heap, a program counter pointing to the current instruction in the 
scripts object, and a set of window references (to be discussed 
in the next paragraph). When the script accesses a DOM object, 
the 
instruction 
“LoadMember baseObj,nameString”  to  get  the  object’s 
reference.  For  example,  to  access document.body,  the  script 
runtime  executes  “LoadMember RefDocument, ‘body’”, 
where RefDocument  is  a  reference  to  the document  object. 
LoadMember is an instruction to look up a child object name 
and return the object’s reference. 
The script runtime keeps a window references object. 
The  reference  to  the  window  object  of  Frame1  is  in  the 
window references  of  Frame1’s  runtime,  so  any  script 
running  in Frame1  can  get  the  reference  to  every  object  in  its 
own DOM and manipulate it. Hypothetically, if a script running 
in  Frame2  from  http://b.com  had  a  reference  to  the  window 
object of Frame1, the script could also totally control the DOM 
of Frame1, which violates the same-origin policy. Therefore it is 
a crucial security requirement that the reference to the window 
object  should  never  be  passed  outside  its  own  frame.  Instead, 
Frame2 has a window proxy windowProxy1 to communicate 
with Frame1. Conceptually the window proxy is a clone of the 
window  object,  but  it  is  specifically  created  for  Frame2  to 
access  Frame1.  The  window  proxy  is  the  object  in  which  the 
cross-frame  check  is  performed:  for  any  operation2 to  get  the 
reference of a child of windowProxy1, a domain-ID check is 
made  to  ensure  that  the  domains  of Frame1  and Frame2  are 
identical. For example, assuming a script is running in Frame2, 
and windowProxy1 is represented as WND1 in the script, then 
2 The write operation to the location object is an exceptional 
case. It does not follow the same-origin policy. The domain check 
is explicitly bypassed for this operation. 
the  script  expression  “WND1.document”  will  fail  with  an 
access-denied error, because WND1 (i.e., windowProxy1) is the 
proxy between two frames from different domains. The domain-
ID check in the window proxy is simply a string comparison to 
check if the two domains expressed in the plain text format are 
identical.  
The mechanism described above appeared to provide a good 
isolation  between  frames  of  different  domains.  However,  in  the 
next section, we analyze a number of real attacks that bypass or 
fool it  to allow a  malicious  script to  control  a  frame  of another 
domain. 
4.  A Study of Real-World Attacks Against IE 
The isolation mechanism presented in Figure 1 is designed 
to  prevent  a  script  from  http://a.com  to  access  the  DOM  from 
http://b.com. The implicit assumptions are (1) every cross-frame 
communication must go through a window proxy, (2) the window 
proxy has the correct domain-IDs of the accessor frame and the 
accessee frame. We studied the Microsoft Security Vulnerability 
database, and found that all discovered frame-isolation bugs are 
because  of  the  invalidity  of  these  assumptions.  There  are 
unexpected execution paths in the system to bypass the check or 
feed incorrect domain-IDs to the check. These exploit scenarios 
take  advantage  of  the  navigation  mechanism,  IE’s  interactions 
with  other  system  components,  function  aliasing  in  the  script 
runtime,  excessive expressiveness  of  frame  navigations,  and  the 
semantics  of  user  events.  In  this  section,  four  real  attacks  are 
discussed to show that it is very hard to for browser developers to 
exhaustively reason about all possible execution scenarios. 
In these examples, we assume the user’s critical information 
is stored on the website http://payroll, and the malicious website 
visited by the user is http://evil. The goal of http://evil is to steal 
the payroll information and/or actively change the direct deposit 
settings of the user, for example. We use “doEvil” to represent 
a piece of malicious Javascript payload supplied by http://evil that 
does the damage. In the following discussion, the attacker’s goal 
is to execute doEvil in the context of http://payroll.  
4.1  Exploiting the Interactions between IE 
and Windows Explorer 
IE  and  Windows  Explorer 3  have  tight  interactions.  For 
example, if we type “file:c:\” in the address bar of IE, the 
content area will load the folder of the local C drive. Similarly, if 
we  type  “http://msn.com”  in  the  address  bar  of  Windows 
Explorer,  the  content  area  displays  the  homepage  of  MSN.  On 
Windows  XP  prior  to  Service  Pack  2,  this  convenient  feature 
gave the attacker a path to bypass the security check. 
Attack  1. Figure 2 illustrates an attack where the script of 
http://evil loads a frame for http://payroll and manipulates it by 
injecting  doEvil  into  the  frame.  The  script  of  http://evil, 
running  in  Frame1,  first  opens  the  http://payroll  page  in 
Frame2,  and  then  navigates  Frame2  to  the  URL  “file: 
javascript:doEvil”.  Because  the  protocol  portion  of  the 
URL  is  “file:”,  IE  passes  the  URL  to  Windows  Explorer. 
Windows  Explorer  treats  it  as  a  normal  file-URL  and  removes 
“files:”  from  it,  and  treats  the  remainder  of  the  URL  as  a 
filename. However, the remainder is “javascript:doEvil”, 
3 Windows Explorer is the application to display the local folders 
and files. It is sometimes referred to as the Shell. 
so  Windows  Explorer  passes it back  to  IE as  a javascript-URL. 
According  to  the  “javascript:”  protocol,  navigating  Frame2  to 
such a URL is to add doEvil into the scripts of Frame2 and 
execute it [13]. Normally, one frame navigating another frame to 
a  javascript-URL  is  subject  to  the  same-origin  policy.  For 
open(“javascript: 
example, 
doEvil”,”frame2”)  will  result  in  an  access  denied  error. 
However, since the javascript-URL is passed from the Windows 
Explorer, Frame2 receives the script as if it was from the local 
machine,  not  from  the  Internet,  which  bypasses  the  same-origin 
check. 
statement 
the 
Windows Explorer 
Address Parser
Window Explorer 
IE
Frame2 = open(“http://payroll”, “frame2”);
open(“file: javascript: doEvil”, “frame2”)
Frame1:  URL=http://evil
Salary=$1234
Direct deposit settings …
Frame2:  URL=http://payroll
Figure 2: Illustration of Attack 1 
4.2  Exploiting Function Aliasing  
In Javascript, a method (i.e., a member function) itself is also 
an object, and thus its reference can be assigned to another object, 
which  is  essentially  an  alias  of  the  function.  The  aliasing 
combined  with  the  frame  navigation  could  result  in  a  very 
complicated  scenario  where  the  real  meaning  of  a  script 
statement is difficult to obtain based on its syntactical form.  
an 
to 
“frame2.location.assign” 
Attack  2. The attack shown in Figure 3 has four steps: (1) 
Frame1 loads the script from http://evil, which sets a timer in 
Frame2 to execute a statement after one second; (2) the script 
makes 
of 
alias 
“window.location.assign”.  According 
the  DOM 
specification, executing the method location.assign(URL) 
of  a  frame  is  to  navigate  the  frame  to  URL;  (3)  the  script 
navigates  its  own  frame  (i.e.,  frame1)  to  http://payroll;  (4) 
location.assign 
when 
(‘javascript:doEvil’) is executed in Frame2. Because 
of 
means 
“frame1.location.assign(‘javascript:doEvil’)
”.  Despite  that  it  is  physically  a  cross-frame  navigation  to  a 
javascript-URL,  the  operation  is  syntactically  an  intra-frame 
operation,  which  does  not  trigger  the  cross-frame  check.  As  a 
result, doEvil  is  merged  into  the  scripts  of  the  http://payroll 
DOM, and get executed. 
statement 
aliasing, 
expires, 
really 
timer 
the 
the 
the 
(1) Set a timer in Frame2 to execute a 
statement after 1 second
(2) Frame2.location.assign 
=window.location.assign
(3) Navigate Frame1 to http://payroll
(1)
(4)
Frame1:  URL=http://evil
After 1 second, execute:
“location.assign(‘
javascript:doEvil’)”
Frame2: URL=http://evil
Figure 3: Illustration of Attack 2 
4.3  Exploiting  the  Excessive  Expressiveness 
of Frame Navigation Calls 
The syntax of frame navigation calls can be very expressive. 
An  attacker  page  can  exploit  the  excessive  expressiveness  to 
confuse IE about who really initiates the operation. 
a 
a 
executes 
statement 
confusing 
in  Frame0 
to  navigate  Frame1 
Attack  3.  Shown  in  Figure  4  above,  Frame0  from 
http://evil  opens  two  frames,  both  loading  http://payroll.  These 
two  frames  are  named  Frame1  and  Frame2.  Then  the  script 
running 
statement 
Frame2.Open(“javascript:doEvil”,Frame1).  This 
is 
the  URL 
“javascript:doEvil”,  but  the  critical  question  is  who  is 
the  initiator  of  the  navigation,  Frame0  or  Frame2?  In  the 
unpatched  versions  of  IE,  Frame2  is  considered  the  initiator, 
because the open method being called is a member of Frame2. 
Therefore, the cross-frame check is passed because Frame1 and 
Frame2  are  both  from  http://payroll.  Similar  to  all  previous 
examples, doEvil  is  then  merged  into Frame1’s  scripts  and 
get executed. 
to 
Frame1:  URL=http://payroll
Frame2:  URL=http://payroll
Frame0 executes a statement:        
Frame2.open(“javascript:doEvil”,Frame1)
Frame0:  URL=http://evil
Figure 4: Illustration of Attack 3 
4.4  Exploiting the Semantics of User Events 
We have discussed a number of attacks in which a piece of 
script from the attacker frame can be merged into the scripts of 
the  victim  frame.  The  other  form  of  attacks  is  to  merge  the 
victim’s  DOM  into  the  attacker’s  DOM  so  that  the  attacker’s 
script can manipulate it.  
DOM
window 
windowProxy1: 
To service Frame2
windowProxy2:
To service Frame1
window 
DOM
location
event
document
history
location
event
document
history
body
scripts
srcElement
body
scripts
Text box
anchor
font
image
Frame1: URL=http://payroll
In body.onCLick(), the script uses
event.srcElement.parentElement.parentElement
to reference  to the “document” object in Frame1
Frame0: URL = http://evil
Figure 5: Illustration of Attack 4 
Attack 4. The DOM objects have the setCapture method 
to capture all mouse events, including those outside the objects’ 
own screen regions. In the attack shown in Figure 5, the script 
from  http://evil 
load 
“document.body. 
http://payroll, 
setCapture()”  to  capture  all  mouse  events  so  that  they 
invoke  the  event  handlers  of  the  body  element  of  Frame0 
rather than the element under the mouse cursor. When the user 
clicks  inside  Frame1,  the  event  is  handled  by  the  method 
body.onClick() 
the  capture. 
in  Frame0  creates  Frame1 
then 
in  Frame0  because  of 
calls 
to 
the 
script 
Therefore, 
Suppose  the  user  clicks  on  the  font  object  in  Frame1,  the 
DOM  object  event.srcElement  in  Frame0  becomes  an 
alias  to  the  font  object,  according  to  the  dentition  of 