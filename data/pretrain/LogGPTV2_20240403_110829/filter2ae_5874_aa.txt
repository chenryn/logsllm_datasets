来源：[
**腾讯安全湛泸实验室**](http://weibo.com/ttarticle/p/show?id=2309404105928097034074)  
作者：[腾讯安全湛泸实验室](http://weibo.com/ZhanluLab)
### ​​0x00背景
今年3月结束的Pwn2own比赛中，湛泸实验室1秒内攻破史上最高难度的Edge浏览器，拿到首个单项最高分14分。此次比赛湛泸实验室准备了多个Edge漏洞和windows10内核提权漏洞，相关漏洞信息已经报告给微软。本文粗略介绍一下Pwn2Own比赛中湛泸实验室所用到的两个Edge漏洞，以及漏洞利用中的DVE（Data-Virtualization
Execute）技术。这两个Edge漏洞我们实验室都完成了利用，在利用的细节上和之前IE上的cve-2014-6332有着异曲同工之妙。即DVE技术的基本思想：程序的一切皆是数据，通过修改程序的关键数据结构来控制程序执行，从而绕过所有Mitigation机制。下面笔者将较为细致地分析Pwn2own比赛的漏洞成因和利用过程，现在就开始Pwn2Own的旅程吧。Let’s
go!!!!
### 0x01 漏洞简介
去年，湛泸实验室发现Chakra引擎中ArrayBuffer对象的两个神洞，一个越界访问(CVE:2017-0234)和一个释放后重用(CVE:2017-0236)。这两个漏洞的特殊之处在于漏洞的触发路径都在chakra引擎生成的jit
代码中。下面，笔者就和大家分享这两个漏洞的相关细节。
### 0x02漏洞成因
先看下面这段JS代码：
    function write(begin,end,step,num)
    {
     for(var i=begin;i
    rax=0000000000000001 rbx=00000186e9c00000 rcx=00000186e9800dc0
    rdx=0000000000010000 rsi=00000186e95d68c4 rdi=00000036be1fb900
    rip=00000187e9f00122 rsp=00000036be1fb5d0 rbp=00000036be1fb670
     r8=000000003000000e  r9=0000000040000010 r10=000100006e617579
    r11=0000000000000001 r12=000100006e617579 r13=000100006e617579
    r14=0001000040000010 r15=000100003000000e
    iopl=0         nv up ei pl zr na po nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246   
    mov     dword ptr [rbx+r8*4],r12d ds:00000187`a9c00038=????????
最终代码运行到此处，rbx是buffer对象的内存基地址，r8是数组索引0x3000000e，r12给数组赋予的值，整个过程没有检测索引的范围造成了数组越界。当然漏洞不仅仅这一个，仔细推敲上述过程，我们可以发现，JIT在使用buffer对象的缓冲区域时并没有检测buffer对象是否被分离释放，这就是我们发现的第二个漏洞。可能细心点的读者都发现了，写入的地址不可访问，都是?????????，那为什么漏洞会利用成功而且不崩溃呢？请看下文。
### 0x03 漏洞利用
只有crash是远远不够的，还记得yuange曾经说过：”exp的价值远远大于poc”。下面笔者将分析一下两个漏洞的利用技术，两个漏洞成因极为相似，所以在利用技术上也很相近。
触发UAF漏洞主要代码如下：
    var buffer = new ArrayBuffer(0x10000);
    var view = new Uint32Array(buffer);
    var worker = new Worker('uaf1.js');
    worker.postMessage(buffer,[buffer]);
    worker.terminate();
主要逻辑：
1）申请一个ArrayBuffer类型的数组变量buffer对象
2）紧接着新建Uint32Array类型的数组对象view,引用上面的buffer对象
3）通过调用postMessage(buffer,[buffer])和terminate()会将buffer对象申请的缓冲区内存彻底释放,这里是触发UAF的关键。work.postMessage移交buffer对象所有权,
terminate()结束worker线程的时候会释放掉buffer这个对象原来申请的内存。
4）然而在类型数组view中却仍然保留着buffer对象申请的缓冲区内存的引用，并且引用时没有做检查,所以造成UAF 漏洞。.
越界代码因为ArrayBuffer对象申请4G虚拟空间，占位内存必须在ArrayBuffer的4G空间之后，这样两个漏洞利用就只有占位空间不一样，利用TypedArray写内存的索引不一样。UAF漏洞占位在原有buffer对象申请的缓冲区空间，OOB漏洞占位在其后4G空间。这样OOB漏洞写占位内存时，索引需要增加0x100000000/4=0x40000000，其它都相同。
##### 1\. 详细分析
我们来跟踪一下UAF的漏洞利用相关代码。 1）首先，申请一个ArrayBuffer类型的数组变量buffer，找到这个buffer变量，看一下内存结构
​rcx是ArrayBuffer对象，0x00000186-e9c00000是buffer对象申请的缓冲区内存，0x00000000-00010000
是buffer长度
​下面是buffer的内存部分大小0x10000
​2）紧接着新建Uint32Array类型的变量view,引用上面的buffer，然后write(0,0x4000,1,0x1234);
//大循环操作内存,让chakra引擎生成JIT代码
使用view对象操作ArraryBuffer的内存,看看被修改的buffer对象缓冲区这块内存，内存布局如下
​3）通过调用postMessage(buffer,[buffer])和terminate()会将buffer的缓冲区内存空间彻底释放。执行terminate之后释放了buffer对象的缓冲区内存，buffer指针被置空，长度值为0，（0x00000001-00000000实际代表长度为零）。
worker.postMessage(buffer,[buffer]);
worker.terminate();当worker调用postMessage的时候会发生Detach操作
​会调用 Js::ArrayBufferDetachedStateBase *__fastcall
Js::ArrayBuffer::DetachAndGetState—>
chakra!Js::ArrayBuffer::ClearParentsLength 把对象的长度清掉
​此时还没有清掉内存，后续函数会把内存释放掉。
4）然而在变量view 中却仍然保留着buffer对象缓冲区的引用，所以造成UAF
漏洞。下面内存是view对象的，此时View对buffer对象申请的缓冲区的引用仍然存在，也就是地址并没有清零
​此时我们看一下内存情况，buffer对象申请的缓冲区是不能被访问的
​已经被系统给回收了。 这样我们再占位这内存后，利用view对象去操作这块内存就造成了UAF漏洞。
##### 2\. 漏洞利用&Pwn
漏洞原因已经比较清晰了，but, How to Pwn?继续分析， 利用技术要点： 1）UAF漏洞在释放buffer对象的缓冲区后，紧接着通过分配Array
来占用已释放的缓冲区内存。OOB漏洞不需要前面的释放buffer对象缓冲区代码，最终占位的是缓冲区4G后的空间。 代码如下：
    for(var i=0;i ---------------------------    
    | 0x20 内存块头部|
    Arrint.seg--------->| |
    | |
    | |
    | 0x3000 内存块|
    | |
    | |