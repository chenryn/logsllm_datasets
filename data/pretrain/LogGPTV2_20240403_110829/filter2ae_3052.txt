## 浏览器解码看XSS
### 浏览器解码规则
浏览器无论什么情况都会遵守一个这样的解码规则：
  * HTML解析器对HTML文档进行解析完成HTML解码并且创建DOM树
  * javascript 或者 CSS解析器对内联脚本进行解析，完成JS CSS解码
  * URL解码会根据URL所在的顺序不同而在JS解码前或者解码后
### HTML编解码
#### HTML解析器
HTML中有五类元素：
  1. 空元素(Void elements)，如``,``,``等等
  2. 原始文本元素(Raw text elements)，有``和``
  3. RCDATA元素(RCDATA elements)，有``和``
  4. 外部元素(Foreign elements)，例如MathML命名空间或者SVG命名空间的元素
  5. 基本元素(Normal elements)，即除了以上4种元素以外的元素
五类元素的区别如下：
  1. 空元素，不能容纳任何内容（因为它们没有闭合标签，没有内容能够放在开始标签和闭合标签中间）。
  2. 原始文本元素，可以容纳文本。
  3. RCDATA元素，可以容纳文本和字符引用。
  4. 外部元素，可以容纳文本、字符引用、CDATA段、其他元素和注释
  5. 基本元素，可以容纳文本、字符引用、其他元素和注释
HTML解析器作为一个状态机，它从输入流中获取字符并按照转换规则转换到另一种状态。在解析过程中，任何时候它只要遇到一个`hhhhhhhh` ,首先状态机吃下``标签的时候进入标签结束状态然后进入`Data state`状态
一般来说HTML编码需要在`Data State` 状态下进行
例如如果存在`hhhhh` 那么就无法解析这个编码
但是如果是`hhhhhhhh&#104` 却能够正确成功的解析
HTML状态机可容纳`RCDATA`状态中的字符引用，这意味着在``和``标签中的字符引用会被HTML解析器解码，对`RCDATA`有个特殊的情况。在浏览器解析`RCDATA`元素的过程中，解析器会进入`“RCDATA状态”`。在这个状态中，如果遇到``或``的内容中），唯一能够被解析器认做是标签的就是``或者``。当然，这要看开始标签是哪一个。因此，在``和``的内容中不会创建标签，不会有脚本执行。
在建立好DOM语法树之后浏览器开始进行一个url或者js解码
意味着你如果在JS标签中使用HTML实体编码是没有用的
例如：``
但是如果存在代码`` 就能够弹窗了
原因是``遵循XML和SVG的定义。
我们知道，在XML中，`&#40;`会被解析成`（`
那么对于``而言同样遵守XML的规则进行解析
  * 在XML中实体会自动转义,除了包含的实体
师傅的总结：
### javascript编解码
说完了解码的第一步，接下来就是JS解码或者URL解码
JS编码的规则相对来说比较严谨，它对除了阿拉伯数字和字母外的东西都进行了一个编码
最常用的如`\uXXXX`这种写法为`Unicode`转义序列，表示一个字符，其中xxxx表示一个16进制数字，如``
但是无法执行？？？
我们以浏览器的视角来看：首先读到``
这里我们想是否可以结合上面的HTML编码呢？
我们按照他的顺序反过去，先JS编码然后HTML解码
``
浏览器读到了``
如果用户正常输入的话凡是存在``
发现弹窗了两次,是因为服务端进行一个HTML解码发现存在两个`alert()`弹窗于是直接弹
所以对于这种情况，正确防御XSS的方法
应该是先javascript编码然后再进行HTML编码
对于服务器而言它看到的内容应该是
1、首先
    \u0027\u0029\u003b\u0061\u006c\u0065\u0072\u0074\u0028\u0027\u0053\u0052\u0043
经过第一步HTML解码后变为`\u0027\u0029\u003b\u0061\u006c\u0065\u0072\u0074\u0028\u0027\u0053\u0052\u0043`
2、JavaScript解析器工作，`\u0027\u0029\u003b\u0061\u006c\u0065\u0072\u0074\u0028\u0027\u0053\u0052\u0043`变为`');alert('SRC`，刚才已经讲过JavaScript解析时只有标识符名称不会被当做字符串，控制字符仅会被解析为标示符名称或者字符串，因此`\u0027`被解释成单引号文本，`\u0028`和`\u0029`被解释成为圆括号文本，不会变为控制字符被解析执行。
在这里采用的先JS编码后HTML编码中只弹窗了一次。
### URL编解码
讨论URL编码我们采用新的语句
`hhhhh`
在这里我们以浏览器视角来看
浏览器看到`hhhhhh`
然后进行一个URL编码
`hhhhhh`
最后进行一个HTML编码
    hhhhhh
有师傅提供了其他的例子：
``
这里的value1：浏览器看到`