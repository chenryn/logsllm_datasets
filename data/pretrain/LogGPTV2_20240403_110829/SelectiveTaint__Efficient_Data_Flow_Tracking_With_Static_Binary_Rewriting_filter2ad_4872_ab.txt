heap are only in relative addresses when performing the static
analysis. In addition, there are also unknown inputs (from a
command line, local Ô¨Åles and keystrokes, or remote network
packet) that also make the problem hard.
Insights
3.2
It is obvious that in order to address the aforementioned chal-
lenges, it requires the inference of possible values of both
registers and memory cells at each program point. Fortunately,
a key enabling technique in this direction is the VSA [3, 4],
which seeks to compute the possible values at each symbolic
memory address and register. Therefore, with VSA, we could
determine whether a particular memory address or register in-
volves taint or not, e.g., whether it is an alias to the address of
our interest, or it will hold the propagations of the tainted data.
To see exactly how VSA helps our analysis, we show the
value set analysis results of our running example along with
its assembly code in Table 1. At the prologue of function
the stack pointer address for a function is unknown statically.
After executing push %ebp at 0x8048687, esp has a value
server, the initial esp has a value set of ((cid:150), 0x0,(cid:150)), since
set of ((cid:150), -0x4,(cid:150)). The analysis continues, and computes
sets ((cid:150), -0x410,(cid:150)), and thus these two registers are actually
the rest of the VSA for each register and memory operand.
With the statically computed VSA, we can easily see that ebx
at 0x80486a9 and eax at 0x80486c6 have the same value
aliased. In fact, both of them refer to the address of the local
variable buffer deÔ¨Åned in function server.
To statically analyze which instructions need to be tainted,
a straw-man approach is to statically maintain tainted value
sets (i.e., value sets of registers and symbolic memory that
need to be tainted) at each program point. In particular,
this approach checks whether the value set of any of the
operand of an instruction is a subset of the tainted value set,
if so, this instruction is added into the tainted instruction
set; meanwhile the register or symbolic memory of the
corresponding operand is also added to the tainted value
sets if the taint will be propagated to this operand, and the
corresponding taint rule is used to taint this instruction.
that need to be tainted, and instead the VSA identiÔ¨Åed the
However, when analyzing real-world binaries, VSA may
lose its precision due to various factors such as imprecise con-
trol Ô¨Çow graph (CFG), sophisticated static point-to analysis
(which is an undecidable problem [31]), and unknown inputs.
Consequently, as illustrated in Figure 2, we may not be able
will never be involved in taint analysis. Therefore, in order not
to have any false negatives (no missing of attacks) when using
taint analysis, we eventually decide to taint the instructions
tainted) can have false negatives because of the imprecision
mentioned, but it will not have false positives for the must-
analysis (the worst case is it can be empty, if the must-analysis
cannot decide anything). On the other hand, by using VSA,
to get the ideal tainted instruction setI for the instructions
must-tainted instruction set It (i.e., instructions must be
we can also identify must-not-tainted instruction setIu that
that are not inIu. The worst case of our algorithm is that
the identiÔ¨ÅedIu is‡¢ù, which means we taint all instructions
is to conÔ¨Ådently enlargeIu as much as possible (note that
setIu, the instructions in dark gray are identiÔ¨Åed as in must-
tainted instruction setIt, and all instructions not in light gray
tion, a must-not-tainted value setVu is maintained and if the
value set of any of its operand is a subset ofVu, this instruction
is added toIu. For instance, for instructions at 0x804861a
not-tainted value setVu equals value setS, which contains
As in our running example, in Table 1, the instructions
in light gray are identiÔ¨Åed as in must-not-tainted instruction
are our conservatively tainted instructions. For each instruc-
and 0x804861d before taint introduction at 0x8048620, must-
all possible values at this execution point (recall VSA is a
similarly to other DBI-based taint analysis. Our key objective
we will not have false positives when being conservative).
1668    30th USENIX Security Symposium
USENIX Association
Value Set Examples
esp:((cid:150),-0x4,(cid:150))
ebp:((cid:150),-0x4,(cid:150))
esp:((cid:150),-0x42c,(cid:150))
ebx:((cid:150),-0x410,(cid:150))
eax:((cid:150),-0x410,(cid:150))
Assembly
:
8048687
8048688
804868a
804868b
804868c
8048692
8048699
804869f
80486a4
80486a9
80486ab
80486ad
80486af
80486b6
80486b8
80486c0
80486c6
80486ca
80486cd
80486d0
80486d5
80486d9
80486dd
80486df
80486e4
80486ea
80486eb
80486ec
80486ed
push %ebp
mov %esp,%ebp
push %edi
push %ebx
sub $0x420,%esp
movl $0x0,-0xc(%ebp)
lea -0x40c(%ebp),%ebx
mov $0x0,%eax
mov $0x100,%edx
mov %ebx,%edi
mov %edx,%ecx
rep stos %eax,%es:(%edi)
movl $0x0,-0xc(%ebp)
jmp 80486d9
movl $0x400,0x8(%esp)
lea -0x40c(%ebp),%eax
mov %eax,0x4(%esp)
mov 0x8(%ebp),%eax
mov %eax,(%esp)
call 80485fd
addl $0x1,-0xc(%ebp)
cmpl $0x2,-0xc(%ebp)
jle 80486b8
mov $0x0,%eax
add $0x420,%esp
pop %ebx
pop %edi
pop %ebp
ret
Value Set Examples
ebp:((cid:150),-0x434,(cid:150))
ebp:((cid:150),-0x434,(cid:150))
esp: ((cid:150),-0x45c,(cid:150))
buffer size:(0x800,(cid:150),(cid:150))
buffer addr:((cid:150),-0x410,(cid:150))
Vu=S - ((cid:150),[-0x410,0x3f0],(cid:150))
inst. is tainted, as ((cid:150),-0x410,(cid:150))‡£∞Vu
Assembly
:
80485fd
80485fe
8048600
8048603
804860b
8048613
8048616
804861a
804861d
8048620
8048625
8048628
804862c
804862e
8048631
8048634
8048637
804863b
804863d
8048641
8048643
8048647
804864a
804864c
804864f
8048651
8048654
8048658
804865b
804865f
8048662
8048665
804866a
8048672
804867a
804867d
8048680
8048685
8048686
push %ebp
mov %esp,%ebp
sub $0x28,%esp
movl $0x0,0xc(%esp)
movl $0x800,0x8(%esp)
mov 0xc(%ebp),%eax
mov %eax,0x4(%esp)
mov 0x8(%ebp),%eax
mov %eax,(%esp)
call 80484f0
mov %eax,-0xc(%ebp)
cmpl $0x0,-0xc(%ebp)
jle 8048685
mov 0xc(%ebp),%eax
movzbl (%eax),%eax
mov %al,-0xd(%ebp)
cmpb $0x60,-0xd(%ebp)
jle 8048651
cmpb $0x7a,-0xd(%ebp)
jg 8048651
movzbl -0xd(%ebp),%eax
sub $0x20,%eax
mov %eax,%edx
mov 0xc(%ebp),%eax
mov %dl,(%eax)
mov -0xc(%ebp),%eax
mov %eax,0x8(%esp)
mov 0xc(%ebp),%eax
mov %eax,0x4(%esp)
mov 0x8(%ebp),%eax
mov %eax,(%esp)
call 80484a0
movl $0x400,0x8(%esp)
movl $0x0,0x4(%esp)
mov 0xc(%ebp),%eax
mov %eax,(%esp)
call 80484c0
leave
ret
Table 1: The assembly code snippets of our running example. Instructions in light gray are identiÔ¨Åed by our analysis as in
Ô¨Çow sensitive analysis). At taint source 0x8048620, must-
must-not-tainted instruction setIu, and Instructions in dark gray are in must-tainted instruction setIt.
not-tainted value setVu is updated by removing value set
((cid:150),[-0x410,0x3f0],(cid:150)) fromVu, as the tainted buffer starts at
((cid:150),‚àí0x410,(cid:150)) with a buffer length 0x800. At 0x8048658,
[ebp+0xc] has value set ((cid:150), -0x410,(cid:150)), which is not a subset
of must-not-tainted value setVu and thus this instruction is
not added toIu and will be instrumented instead. Eventually
not inIu, i.e., instructions not in light gray, which consists of
all instructions inIt, i.e., instructions in dark gray, with Ô¨Åve
SELECTIVETAINT will conservatively taint all instructions
additional instructions in white.
Figure 2: The Essence of SELECTIVETAINT
Scope and Assumptions. In this work, we focus on x86
binaries with ELF format running atop Linux platform. We
assume the binary code is not obfuscated, and we are able
to get their correct disassembly. For proof-of-concept, we
demonstrate the use of taint analysis to track the untrusted
user input through static binary rewriting, and detect the
memory exploits by just using a single bit (tainted or not) in
our taint record. Also, our static binary rewriting is based on
DYNINST [7]. While it is not perfect, it has been widely used
USENIX Association
30th USENIX Security Symposium    1669
ùêº(cid:3048): must-not-tainted insn. ùêº(cid:3047): must-tainted insn.I: ideally-tainted insn.Figure 3: Overview of SELECTIVETAINT
in building many static binary rewriting-based prototypes,
e.g., TYPEARMOR [35], and most recently UNTRACER [27].
4 Detailed Design
In this section, we present the detailed design of SELECTIVE-
TAINT. As illustrated in Figure 3, there are four key compo-
nents inside:
‚Ä¢ CFG Reconstruction (¬ß4.1). When given an applica-
tion binary, we will Ô¨Årst disassemble and build its CFG
starting from the main function. If there is a library call,
we will resolve the calling target and use the function
summaries to decide whether further instrumentation
of the library is needed. If an indirect jmp/call is
encountered, we will perform backward slicing [36] and
use the VSA and type information to resolve the target.
‚Ä¢ Value Set Analysis (¬ß4.2). VSA [3] has become a stan-
dard technique in static binary analysis for determining
the possible values of a register or a symbolic memory
address. We use the VSA to help identify the instruction
operands that are never involved in the taint analysis.
‚Ä¢ Taint Instruction IdentiÔ¨Åcation (¬ß4.3). Selective
tainting essentially aims to identify the instructions that
are involved in the taint analysis. With the identiÔ¨Åcation
ofIu by VSA, we then start from the instructions that
the rest of instructions that are not inIu.
introduce the taint sources, and systematically identify
‚Ä¢ Binary Rewriting (¬ß4.4). Having identiÔ¨Åed the instruc-
tions that need to be tainted, we then use the static binary
rewriting to insert the taint analysis logic including
tracking of the taint sources and taint propagations as
well as the taint checks at the taint sinks.
4.1 CFG Reconstruction
The Ô¨Årst step of SELECTIVETAINT is to disassemble and
rebuild the CFG, when given an application binary. This is
quite a standard process and the only additional challenge is to
identify the control Ô¨Çow targets of the indirect calls and jumps,
as they are important to compute the VSA. To get the CFG,
we Ô¨Årst reconstruct the possible control Ô¨Çow targets using the
RAMBLR [36] approach, and in case of undecided target (e.g.,
jmp/call eax), we use the following approaches:
Handling Indirect Call. We adopt and implement two
forward-edge CFI
approaches, namely
identiÔ¨Åcation
TYPEARMOR [35] and œÑCFI [26], to recover the type
information (i.e., parameter count and parameter type) about
actual and formal parameters at the callsites and callee
functions. By connecting the matching callsites and callees
regarding these type information, we build a CFG which is
an over-approximation of actual CFG. The type information
is generated by running liveness analysis at indirect callsites
and use-def analysis at callees.
Handling Indirect Jump. We Ô¨Årst use VSA to resolve the
indirect jump target and connect the jump target if it is
solved. Otherwise, we determine whether the function that
contains the indirect jump uses any external data references
(e.g., global variable addresses): if not, we connect all of the
possible basic block starting address in this function as the
potential jump target (we still consider it local); otherwise,
we connect the jump target with all function entry addresses.
The rationale is we notice the inter-procedural jumps we
encountered are from compiler optimizations, and basically
compiler optimizes the call instruction with an indirect jump.
We therefore connect the indirect jump in this way to get an
over-approximation of the CFG.
4.2 Value Set Analysis
Our VSA Algorithm. A key technique inside SELECTIVE-
TAINT is the VSA [3], which is a context-sensitive and Ô¨Çow-
sensitive whole program analysis. As described in algorithm 1,
our whole_program_VSA Ô¨Årst initializes the ValueSet for
each instruction in the program with an initial esp, initial
empty heap, and initial memory cell values resolved from
original binary. Then, function VSA is called to analyze each
function func, which is of work list style with multiple it-
erations on each individual instruction until no changes are
discovered (i.e., reached a Ô¨Åxed point). The context and value
sets are adjusted depending on the type of instruction opcode,
e.g., for call/ret instruction, inter-procedural analysis is per-
formed and the environment is adjusted accordingly including
changing the current stack region and matching formal and
actual parameters.
Practical Challenges. While the idea of calculating VSA is
simple, it has a number of practical challenges when used for
data Ô¨Çow tracking, such as context-sensitive, Ô¨Çow-sensitivity,
and alias analysis. In the following, we describe these
challenges and also how we have addressed them below:
1670    30th USENIX Security Symposium
USENIX Association
Selective Binary Taint AnalysisBinaryRewritingValue Set AnalysisCFG ReconstructionTaint Instruction IdentificationOriginal BinaryRewritten BinaryVSA(entryFunc, context)
ValueSet, context‚Üê init()
worklist‚Üê {entryInst}
while worklist‚â†‡¢ù do
i‚Üê pop(worklist)
newContext‚Üê adjustContext(context, callee(i))
Algorithm 1: Whole Program Value Set Analysis
1 Function whole_program_VSA(CFG, ValueSet):
2
3
4 Function VSA(CFG, ValueSet, func, context):
5
6
7
8
9
10
11
12
13
14
VSA(CFG, ValueSet, callee(i), newContext)
adjustContext(context, caller(i))
if callInst(i) then
if condInst(i) then
ValueSeti
if retInst(i) then
entry‡£µV S ValueSetcn
exitn‚Üê ValueSeti
exit[addr(opi)]‚Üê (,,)
exit‚Üê EXE(i,
‡£∂
entryn‚ààentry
exit‚â† ValueSeti
exit‡£∂ newValueSeti
exit‚Üê ValueSeti
exit then
ValueSeti