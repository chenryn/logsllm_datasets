title:BaseSpec: Comparative Analysis of Baseband Software and Cellular Specifications
for L3 Protocols
author:Eunsoo Kim and
Dongkwan Kim and
CheolJun Park and
Insu Yun and
Yongdae Kim
BASESPEC: Comparative Analysis of Baseband
Software and Cellular Specifications for L3 Protocols
Eunsoo Kim∗, Dongkwan Kim∗, CheolJun Park, Insu Yun, Yongdae Kim
{hahah, dkay, fermioncj, insuyun, yongdaek}@kaist.ac.kr
KAIST
Abstract—Cellular basebands play a crucial role in mobile
communication. However, it is significantly challenging to assess
their security for several reasons. Manual analysis is inevitable
because of the obscurity and complexity of baseband firmware;
however, such analysis requires repetitive efforts to cover diverse
models or versions. Automating the analysis is also non-trivial
because the firmware is significantly large and contains numerous
functions associated with complex cellular protocols. Therefore,
existing approaches on baseband analysis are limited to only a
couple of models or versions within a single vendor.
In this paper, we propose a novel approach named BASESPEC,
which performs a comparative analysis of baseband software and
cellular specifications. By leveraging the standardized message
structures in the specification, BASESPEC inspects the message
structures implemented in the baseband software systematically.
It requires a manual yet one-time analysis effort to determine how
the message structures are embedded in target firmware. Then,
BASESPEC compares the extracted message structures with those
in the specification syntactically and semantically, and finally, it
reports mismatches. These mismatches indicate the developer’s
mistakes, which break the compliance of the baseband with the
specification, or they imply potential vulnerabilities. We evaluated
BASESPEC with 18 baseband firmware images of 9 models from
one of the top three vendors and found hundreds of mismatches.
By analyzing these mismatches, we discovered 9 erroneous cases:
5 functional errors and 4 memory-related vulnerabilities. Notably,
two of these are critical remote code execution 0-days. Moreover,
we applied BASESPEC to 3 models from another vendor, and
BASESPEC found multiple mismatches, two of which led us to
discover a buffer overflow bug.
I.
INTRODUCTION
A baseband processor (BP) of cellular devices such as smart-
phones plays an important role in cellular networks. Although
users mainly interact with the interface of user applications
running on an application processor, all application data are
transferred by the BP to use its radio interface. The BP runs
the software, which is typically a real-time operating system
dedicated to managing the radio communication; therefore, it
includes low-level digital signal processing and complicated
cellular protocol stacks. To provide seamless network services
to users, the baseband software continuously communicates
∗These two authors equally contributed.
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual  
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24365
www.ndss-symposium.org
with a core network using numerous cellular control plane
messages at layer 3 (L3) [4].
The baseband software is an alluring attack target because
it can be used to monitor and modify the transferring data if
it is exploited. Therefore, researchers have proposed several
approaches to analyze its security, particularly for the L3
protocols. To discover security bugs in their implementation,
researchers dynamically analyzed specific protocols, such as
SMS or cell broadcast messages, using fuzzers [47], [46], [63],
[42], or they manually inspected a small portion of baseband
software in an ad-hoc manner [25], [15], [64].
These approaches suffer from mainly three technical chal-
lenges: the obscurity of baseband firmware, limited applicability
of manual analysis, and difficulties in automation. First, the
structure of baseband firmware is obscure as vendors are
reluctant to publish their details. Second, to uncover this
obscurity, a manual analysis is inevitable, which requires
significant repetitive efforts to investigate numerous functions
(i.e., over 90K) across diverse baseband models or versions.
Third, automating is thus necessary, but it is also non-trivial.
The size of the baseband software is extremely large (i.e.,
tens of MB) and cellular protocols contain numerous complex
states, which can be neither statically analyzed nor dynamically
triggered by fuzzers. In addition, identifying bugs requires
an explicit oracle, such as a program crash or a noticeable
abnormal behavior; therefore, it is limited to a few bug types.
Thus, existing approaches can analyze only a couple of device
models or versions within a single vendor.
To address these challenges, we propose a novel system
named BASESPEC, which performs a comparative analysis
of baseband implementation and cellular specifications, by
leveraging the nature of a baseband as a modem for network
communication. BASESPEC’s key intuition is that a message
decoder in baseband software embeds protocol specifications
in a machine-friendly structure to parse incoming messages;
hence, the embedded protocol structures can be easily extracted
and compared with reference to the specification. This enables
BASESPEC to automate the entire comparison process and
explicitly discover mismatches in the protocol implementation,
which are non-compliant to the specification. These mismatches
can directly pinpoint developers’ mistakes when embedding
the protocol structures or hint at potential vulnerabilities.
For the comparative analysis, BASESPEC first analyzes
baseband firmware to identify the message decoder and extracts
embedded protocol structures in the firmware. Then, it compares
the extracted structures with the specification in two aspects:
1) whether the embedded structures are syntactically equivalent
to the specification, and 2) whether the decoder function
Fig. 1: Overall cellular network architecture
semantically follows the specification. Thus, a comparative
analysis between the actual implementation and specification
can explicitly identify mismatches. Then, we manually analyze
those mismatches to verify if they can produce functional or
security bugs. Note that BASESPEC requires an initial analysis
of target firmware to locate the decoder function and determine
how the message structures are embedded in the firmware.
This may require considerable manual efforts; however, this
analysis is only a one-time task. The knowledge obtained
from this analysis can be reused for other baseband models
or versions. This is because the main decoding logic rarely
changes across diverse baseband models or versions within a
vendor. Meanwhile, the automated comparison procedure can
be reused across other vendors once their firmware is analyzed.
With a prototype of BASESPEC, we analyzed the imple-
mentation of standard L3 messages in 18 baseband firmware
images of 9 device models from one of the top three vendors.
BASESPEC identified hundreds of mismatches that indicate
both functional errors and potentially vulnerable points in the
baseband implementation. We investigated their functional and
security implications and discovered 9 erroneous cases affecting
33 distinct messages: 5 of these cases are functional errors and
4 of them are memory-related vulnerabilities. Notably, 2 of
the vulnerabilities are critical remote code execution (RCE)
0-days. To evaluate the applicability of BASESPEC, we also
applied BASESPEC to 3 models from a different vendor in the
top three. Through this analysis, BASESPEC identified multiple
mismatches, two of which led us to discover a buffer overflow.
In summary, our contributions are as follows:
• We propose a novel approach named BASESPEC for discover-
ing bugs in cellular baseband software. BASESPEC performs a
comparative analysis of embedded specifications in baseband
software and documented ones.
• We demonstrate the practicality of BASESPEC. By running an
automated prototype of BASESPEC on 18 baseband firmware
images of 9 models from one of the top three vendors, we
identified hundreds of mismatches, which are non-compliant
with the specification.
• By further analyzing the mismatches, we discovered 9
erroneous cases, of which 5 are functional errors and 4
are vulnerabilities including 2 RCE 0-days. We responsibly
disclosed all findings to the vendor.
• Applying BASESPEC to 3 firmware images from another
vendor identified multiple mismatches, two of which cause a
buffer overflow bug.
II. BACKGROUND
A. Cellular Architecture
A cellular network has three main components, namely,
a cellular device, base station, and core network, as shown
in Figure 1. These components have different terms per cellular
TABLE I: Protocols grouping standard L3 messages. The first column
represents a 4-bit protocol discriminator (PD). The fifth denotes the
document version that we used for comparison (§VII); the last column
represents whether the protocol is implemented in the baseband binary.
Description
PD
0 Group Call Control
1 Broadcast Call Control
2 EPS Session Management
3 Call control; call related SS
4 GPRS Transparent Transport Protocol
5 Mobility Management
6 Radio Resources Management
7 EPS Mobility Management
8 GPRS Mobility Management
9
10 GPRS Session Management
11 non-call related Supplementary Services
12 Location Services
14 Reserved for extension
15 Tests procedures
Short Message Service
Abbrev. Spec No. Version
GCC
BCC
ESM
CS
v15.8
v15.8
44.068
44.069
24.301
24.008
44.018
GTTP
24.008
MM
RR
44.018
EMM 24.301
GMM 24.008
SMS
24.011
24.008
SM
24.080
SS
LCS
23.271
-
-
-
36.509
-
-
-
-
-
-
v15.8
v15.5
v15.8
v15.8
v15.3
v15.8
v15.1
Implemented
in firmware
-
-
✓
✓
-
✓
✓
✓
✓
✓
✓
✓
-
-
✓
generation; here, we use generic terms for simplicity. For
example, NodeB, eNodeB, and gNodeB represent the base
stations for 3G, 4G, and 5G, respectively.
A cellular device refers to any device located at the edge
of a cellular network, and it allows users to access cellular
services; the most common device is a smartphone. A cellular
device usually has two separate processors for performance:
an application processor (AP), on which the mobile operating
systems and user applications run, and a cellular BP, where
radio/digital signal processing is performed.
A base station offers a wireless connection to cellular
devices. It
transmits messages, which are from the core
network to a cellular device and vice versa, through the radio
interface. Thus, it is responsible for managing radio resources
to provide users better service quality. A core network provides
core procedures such as mobility management and session
management, which include crucial user identification and
security services such as encryption and integrity checks.
The cellular protocol stack has multiple layers as the OSI
model. The air interface of a cellular network is at layers 1
and 2 of the OSI model. Various core procedure messages
are delivered on layer 3. To appropriately handle these layers,
the baseband of a cellular device also implements the cellular
protocol stack. Further, to provide backward compatibility for
cell coverage and roaming, the latest 4G/5G cellular devices
also support earlier 2G/3G cellular technologies.
B. Cellular Specifications and Standard Layer 3 Messages
The cellular specification is defined by an international work-
ing group called the 3rd Generation Partnership Project (3GPP),
which unites seven telecommunications standard development
organizations such as ETSI. There are over 100 specification
documents, and most documents have hundreds of pages.
Because of their enormous quantity and complexity, many
mistakes have been observed in their implementations [47],
[46], [63], [64], [25], [15], [42], [39], [23], [54], [51], [57].
Among the various protocols and messages in the spec-
ification, the standard layer 3 (L3) messages are used in
complex core procedures, such as mobility management, session
management, or even cryptographic operations to protect private
information of users. Thus, multiple vulnerabilities have been
found in their processing routines [64], [25], [15], [42]. The
standard L3 messages are not only limited to a specific cellular
2
Base StationCore NetworkCellular DeviceAPBP2~4GPhysicalLayerLayer 1Data Link LayerLayer 2Layer 3Radio ControlCellular Protocol StackStandard L3 MessagesMM, SM, etcLayer 4 ~including digital signal processing. To meet the real-time
requirements for radio communication, it runs a real-time
operating system as its firmware Thus, its firmware operates
as a single executable and is loaded into memory at runtime;
thus, we refer to baseband firmware as a baseband binary.
Baseband software is typically proprietary, and manufactur-
ers do not publicly share detailed information such as the source
code. For instance, Qualcomm’s Snapdragon, MediaTek’s Helio,
and Samsung’s Exynos are the top 3 system-on-a-chip products
that contains a BP [17]. However, none of these manufacturers
share the detailed information. Therefore, researchers often
perform reverse engineering to analyze and identify security
problems in the baseband software. In addition, each baseband
may have a different architecture according to its design
choice. Thus, baseband analyses require an appropriate tool
that supports the target baseband architecture.
L3 message processing.
In the baseband, an L3 message
is first classified by its PD and message identity. Then,
the baseband parses and decodes the message to obtain the
information of the IEs, using the pre-defined message structures.
After decoding the message, it performs an appropriate action
for each decoded IE, and finally, it processes the message as
defined in the specification. Hereafter, we refer to the functions
involved in the decoding procedure as L3 message decoders, and
those for the message processing as IE and message handlers.
III. OVERVIEW
A. Challenges
There are mainly three technical challenges that hinder the
existing approaches in finding the bugs in baseband firmware.
C1. Obscurity of baseband firmware. Cellular baseband
firmware remains largely unknown because vendors do not
make its details public to protect their proprietary implemen-
tations. This obscurity severely hinders the analysis of the
firmware, thereby requiring significant manual efforts for the
analysis. To reduce the manual efforts, memory dumps are
often used as they already processed the initializing steps and
include runtime information [25], [15]. However, obtaining
them requires real devices, and a special feature (e.g., a
hidden dump menu only available in old Android devices) or a
vulnerability to trigger it. One can consider using a hardware
debug interface, such as JTAG; however, it is also disabled in
recent devices. Further, even memory dumps cannot be analyzed
by state-of-the-art binary analysis tools such as IDA Pro [31];
for example, function identification, which is fundamental for a
static analysis, often fails because of the firmware’s obscurity.
C2. Limited applicability of manual analysis. To uncover
the obscurity of baseband firmware, researchers have focused
on a manual analysis [64], [25], [15]. However, this method is
fundamentally limited in scalability and applicability because
manually investigating numerous functions for hundreds of L3
messages is nearly impossible. Therefore, even similar types of