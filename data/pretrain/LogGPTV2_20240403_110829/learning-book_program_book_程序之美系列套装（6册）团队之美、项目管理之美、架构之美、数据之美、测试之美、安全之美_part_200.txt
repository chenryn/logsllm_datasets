---
## Page 1132
private CodeBlock replacement:
public CodeBlockReplacementException (CodeBlock compiled)
replacement=compiled;
public CodeBlock getReplacementBlock ()
return replacement;
{
上
技巧#6：小心使用装饰（decorator）模式
从设计的角度来看，装饰模式是好的，但是，它的额外间接性开销
很大。请记住，移除和增加装饰模式都是允许的。这种移除会被认
为是一次“异常事件”并可以通过抛出一个专门的异常来实现。
9.9终极灵活性
使用了这些技巧，现在我们有了一个不必进行重要的架构调整就可
以改进和扩展的高度优化的模拟系统。一个更好的编译器可以插入
这个系统的后端，可以使用其他的组件和替换不同的实现来适应大
范围的目标。例如：
组成虚拟硬盘的数据实际上可以由世界上任意地方的服务器提供
（只要需要）。
模拟系统的用户交互（虚拟屏幕、键盘和鼠标）可以通过一个远程
系统来进行。
JPC可以在任意标准的Java2虚拟机上运行x86软件，因此，底层的
硬件选择与操作系统和软件的选择无关。另外，虚拟机的全部状态
1131
---
## Page 1133
都可以保存，模拟的机器也可以及时“冻结”。可以在随后的某天在
一台不同的物理机器上恢复，虚拟机上的任何宿主软件都不会感到
任何的改变。
9.9.1灵活的数据
有了JPC，可以通过一根存储棒来携带你的磁盘镜像，连同一份完
整的JIVM和JPC代码。然后你可以把它插到任意的计算机上并“启
动"你的机器来处理所有私人邮件和其他工作，当你完成工作并拨
出存储棒时，在宿主上不会留下任何东西。
另外，你的硬盘镜像也可以放在因特网上的一台服务器上，只要载
入一个本地JIPC并把它指向你的服务器，你就可以从世界的任何地
方访问你自已的机器。加上适当的认证和传输安全，这成为移动办
公的一个强大的工具。JPC对Java空间的自然适应性意味着几乎任
何设备都可以用作为远程访问的终端入口，从嵌入Java的浏览器到
移动设备。
对于高安全坏境中的敏感工作，通过在一个其硬件驱动位于安全服
务器上的本地JPC实例上工作，可以在最基础的硬件级别保证数据
的安全性和完整性。每个工作人员都可以完全控制他们正在使用的
虚拟硬件，从而使他们能够高效地工作。然而，他们没有办法从系
统中抽取数据，即使他们设法破坏掉他们前面的计算机的物理安
全：本地机器实际上完全不知道运行在VM内、JIPC内、访客操作
系统内等的应用程序。
即使当雇员的信任不是一个问题时，在虚拟机（尤其像JIPC那样灵
活的虚拟机）上工作意味着物理硬件完全可以随时替换。因此，对
于灾后恢复和最终备份来说，机器的全部状态都备份了起来，而不
仅仅是硬盘数据，像JIPC这样的模拟程序在即时故障转移很重要的
地方具有很明显的优势（即使通过广域网）。
因为JPC的硬件不可知性，这些情形也可以完全适用于非x86的硬
件，对于瘦客户端来说这是完美的解决方案，而不论什么情况，用
户都可以得到他们喜欢的x86环境。
9.9.2灵活的审计和支持
通过适当的授权系统，可以远程检查和接管一个运转的JPC实例的
屏幕、键盘和鼠标。通过远程收集可疑活动的键盘输入和屏幕截图
1132
---
## Page 1134
以作为证据，可以有效地监控欺诈行为。JIPC使低级别的硬件访问
成为可能，而那些试图从模拟操作系统中探测并移除监控软件的技
术能人不可能破坏这个特性。即使赋予了（访客系统上）管理员权
限的用户也不能够逃避监控，无论他多有见识。
一个审计的JIPC系统可以只是记录活动、即时扫描并标记动作，或
更进一步防止某些行为。例如，与适当的服务器软件合作，一个监
控的实例可以扫描不恰当图像的视频输出并在虚拟显卡级别模糊
（或用其他内容替换）它们。这样低级别的监控意味着用户不能通
过安装其他的查看软件来破坏内容保护系统。
如果一个帮助桌面可以逐字逐句地完全看见整个屏幕在做什么并直
接在虚拟硬件级别用键盘和鼠标进行交互，那么，远程辅助可以变
得高效得多。即使当JPC在运行那些从来都没有实现过远程访问的
操作系统（例如DOS，它的使用遍及世界的许多行业和国家）时，
这都有可能。
9.9.3灵活的计算
比依赖本地资源或必要时仅仅从远程资源中导入数据来运行主模拟
程序更好，核心的模拟程序可以在一台集中的"JIPC"服务器上执
行。因为JIPC只需要一个标准的JVM就能运行，这台集中的JPC服务
器可以基于完全不同于常规的x86PC的硬件。已经有一些候选可以
做到这一点，JPC已经可以在一个96核心的Azul计算服务器（Azul
computeappliance）上演示了。Sun基于Niagara的服务器和来自于移
动电话技术的系统（JPC已经在NokiaN95这个基于ARM11的系统上
启动了DOS）也有可能。
但是，为什么要集中一台服务器来运行所有这些JPC实例呢？大概
因为因特网上的任何资源都可以运行一个代表其他人的JIPC实例，
而屏幕输出和用户输入通过网络传输到虚拟机的拥有者。按这种工
作方式，整个世界都可以看成是多个用户和多台机器，在前端的用
户和后端的机器之间都没有固定的硬件拥有关系了。如果有一台机
器空闲了，任意一个用户都可以使用它，远程启动一个JIPC实例来
处理他们个人的磁盘镜像数据。如果这个空闲的机器突然有了其他
的用途，这个JIPC实例可以“冻结”，它的状态可以移动到另一台空
闲的物理资源上。
1133
---
## Page 1135
虽然后面这种情形对于交互式用户来说也许难以想象，对于他们来
说，通过因特网进行冻结和恢复会花太长的时间，从而会觉得不太
方便，但对于那些需要同时运行许多并行虚拟机而没有很多交互的
用户来说，这就很有意义。这是目前那些使用大量机器来运行大规
模并行任务（例如渲染动画电影的画面、通过分子模拟搜索药物、
优化工程设计问题和给复杂的金融工具定价）的用户的体验。
9.10终极安全性
容许未检查过的代码在你的机器上运行，这充满了危险，而且这种
速增长。你可能会丢失数据、身份失窃和受骗，最坏的是，如果你
在运行从不知名的或未认证的源下载的软件时没有小心地检查，那
就可能会牵连到犯罪事件中。
对于流行的操作系统和因特网浏览器的制造商修补的每个安全漏
洞，似乎在原来修复的地方又会新增长两个漏洞。意识到这一点
后，你如何才能运行那些真正增强你的浏览体验或提供有用服务的
代码呢？
运行在JavaApplet沙箱中的Java代码在十多年前就已经提供这种安
全级别了。增加由JIPC呈现的额外的独立安全层，你就拥有了两层
保险的沙箱来在其中运行未检查过的代码。JIPC的Web站点
（http://www.jpc.physics.ox.ac.uk）演示了JPC如何能够在一个标准的
Applet中作为网页的一部分来启动DOS和运行许多经典的游戏：换
句话说，他们演示了一段未检查过的x86（DOS）可执行代码在任
意机器上的完全安全的容器中运行。
在Applet沙箱中运行JPC有一个主要的不利方面：安全限制不允许
IPC创建类加载器，因此，对JPC的速度有很大提高的动态编译禁止
了。一个好消息是通过利用JIPC设计的内在灵活性，可以避开这个
问题而不影响安全性。
在Applet沙箱中的Java代码可以按需从网络加载类，只要它们来自
和Applet代码最初所在的相同的服务器。利用这一点，我们已经构
建了这样一个远程编译器：对运行在Applet中的JPC实例所需要的类
进行编译，当负责运行这些JIPC实例的IM请求时把编译好的类发
送回这些实例。本机IVM仅仅把这些类看作凑巧需要而不是JIPC内
1134
---
## Page 1136
其他类需要的静态资源，而实际上，这些类已经由这些JPCApplet
实例按需编译了。
这样，即使在标准的JavaApplet沙箱中，我们也获得了已编译类的
速度，而用户可以放心，无论JIPC正在运行什么，JM都遵守在一
个危险环境中使执行代码这个行为变得安全的基本限制。
远程编译的一个好处是随着时间的推移，许多JPC实例利用它，它
构建了一个可以在IPC实例之间共享的已编译类的库。因此，编译
服务器很快成为一个先前已编译的类的Web服务器。此外，通过计
算每个已编译类的请求的次数，服务器知道哪些类最常使用，因此
知道对哪些类花更多的时间进行优化。虽然后面这个特性还没有实
现，但是，我们相信，这样集中的优化可以弥补由于在加载类时网
络延迟所造成的JPCApplet客户端所遭受的执行速度瓶颈。因此，
JPCApplet客户端可以像那些本地实现编译的JIPC应用程序客户端一
样好。!1
[1].当然，当编译服务器和JPCApplet通过100M网络连接时，实际上
不会察觉到由于网络问题造成的性能瓶颈。使编译在其他地方进行
的好处是释放了本地的CPU资源，而这似乎平衡了网络的延迟。
9.11第二次做会更好
每个人都知道一件事在第二次做的时候可能会做得更好。
-HenryFord，《我的生活和工作》
在学术的环境中开发伴随着它自已的挑战，这些挑战和商业背景中
的挑战有些微小的不同。在学术的环境中，性能目标主要是自我要
求，这既有好处也有坏处。对于并发人员的这一方面需要训练以保
持项目的前进路线和防止项目的中心偏移。然而，自由的环境也容
许想法获得快速的发展和测试以确认或反驳它们的好处。对于非常
有创造力和雄心的项目，这种氛围对于最终的成功非常关键。
JPC的架构只有一小队的并发人员就进展得非常好，这是由于对
编码采取选代的态度才获得的。如图9-13所示，在这个项目的发展
过程中已经编写了500000行代码。而至今，只有85000行代码留了
下来。这个模拟程序的每个部分都经历了许多重写，包括一次完全
清除和重写。
1135
---
## Page 1137
周而复始的净化、重写和精炼是难以达到的，虽然在学术环境中比
较容易。倘若你在情绪上没有非常依恋你的代码，代码删除的过程
就像是泻药，这不仅适合于代码，也适合于开发人员对于它的态
度。HenryFord是对的：你的第二次尝试几乎总是会更好。在这一
系列的选代改进达到终止的条件时，一切都会变得很好。
550
500
450
+00
KLOC
300
250
200
150
100
50
2005-07
2006-01
2006-07
2007-01
2007-07