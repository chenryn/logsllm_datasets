e
r
u
t
a
n
g
s
f
i
o
r
e
b
m
u
n
e
g
a
r
e
v
a
s
e
r
u
t
a
n
g
s
f
i
o
r
e
b
m
u
n
e
g
a
r
e
v
a
 24
 22
 20
 18
 16
 14
 12
 10
 20
 18
 16
 14
 12
 10
 8
 6
 4
 2
 12
 11
 10
 9
 8
 7
 6
 5
 4
 3
 2
 1
m=16
m=32
160
40
80
SEQ_LEN
120
a (average block size)=64
m=16
m=32
m=64
m=16
m=32
m=64
40
80
120
160
SEQ_LEN
a (average block size)=128
40
80
120
160
SEQ_LEN
Fig. 1. The above ﬁgures show how the value of conﬁguration parameters a and m
of Autograph aﬀect the eﬀectiveness of our allergy attack at diﬀerent SEQ LEN. The
eﬀectiveness of our attacks is measured by the average number of distinct signatures
generated in each of our 10 rounds of experiments. The column on the left shows the
result of varying a while holding m constant, where the column on the right shows the
eﬀect of varying m while holding a constant. Note that no signatures will be generated
when SEQ LEN is smaller than m. Also note that we have only experimented on
Autograph conﬁgurations with a > m.
attack described above. Every time Autograph generates a signature for our
“attack traﬃc”, we add it to the blacklist. We repeat the “attack” until no more
signature is generated (i.e. all content blocks are blacklisted).
After describing the experimental setup, we will present our results on the ﬁrst
target request in Fig. 1. The results for the other two targets are very similar to
those of the ﬁrst one, and are therefore elided for brevity.
70
S.P. Chung and A.K. Mok
Our experiments show that the attack presented in Sect. 4.1 is very eﬀective
for all three target requests. At all combinations of SEQ LEN, a and m where
SEQ LEN ≥ m, at least 8 out of the 10 rounds of our attack successfully in-
duced Autograph into generating one or more signatures. Thus, we are conﬁdent
that for any target request, at any reasonable conﬁguration of Autograph, our
attack will succeed in a small number of rounds, even if content blocks from the
target requests (and some related requests) are all blacklisted.
Finally, observe that the eﬀectiveness of our attack drops when a (the average
block size) increases. This is because with a larger a, the target request will be
represented by fewer (but longer) content blocks in the blacklist. As a result, it
is less likely for any random subsequence from the request to cross the boundary
of two adjacent blacklisted blocks and result in a successful signature genera-
tion. On the other hand, the eﬀectiveness of our attack increases with m (the
minimum block size), and this trend is more signiﬁcant for larger SEQ LENs.
This may be due to the following behavior of COPP: a separate content block
with the last m bytes of the ﬂow will be created if the normal partitioning does
not ﬁnd a content block that ends at the last byte of the suspicious ﬂow. We
believe, the last block thus generated, as well as the ﬁrst block for our ran-
dom subsequence have the best chance of being a new, non-blacklisted content
block that achieves our goal. This is because both of them don’t start after a
2-byte subsequence that matches the breakmark B. Thus, a longer m will mean
a longer last block, which in turn increases the chance for it to cross the bound-
ary of two adjacent blacklisted blocks. Furthermore, longer SEQ LEN will mean
that the content of the ﬁrst and the last block are signiﬁcantly diﬀerent, and
improve the chance that they will produce two separate blocks that have not
been blacklisted.
5 Type II Allergy Attack
Despite the success in our experiments against Autograph, the attack presented
in Sect. 4.1 has two weaknesses. First of all, it is very likely that the signatures
generated will match many other requests. In fact, we ﬁnd that many of the
signatures generated from our experiments will result in the ﬁltering of all HTTP
requests generated by IE. While this can be an advantage to some attackers,
others may want the attack to be more speciﬁc. Furthermore, a direct allergy
attack similar to that described in Sect. 4.1 will not be eﬀective against ASG
systems like Polygraph [8], which make use of a normal traﬃc corpus to avoid
generated signatures from causing excessive false positives. Even though the ﬁrst
problem only occurs when some part of our target request is blacklisted (which
is a rare case), and the attempt to check generated signatures against a corpus
of normal traﬃc appears impractical, let us once again assume the worst case
scenario.
To overcome the above weaknesses, we will propose a more sophisticated form
of allergy attack: the attack against future traﬃc. We call this attack the type
II allergy attack. This attack is ﬁrst described in [11] as follow:
Allergy Attack Against Automatic Signature Generation
71
However, even this approach may fall short against a sophisticated at-
tacker with prior knowledge of an unreleased document. In this scenario
an attacker might coerce Earlybird into blocking the documents release
by simulating a worm containing substrings unique only to the unre-
leased document.
From the above description, we see that with a target that is diﬀerent from
the current traﬃc, the type II attack will be successful even if all generated
signatures are matched against a normal traﬃc corpus. Due to the diﬀerence
between the target traﬃc and the current traﬃc, some generated signatures will
not match with anything in the corpus. Furthermore, if the characteristics that
diﬀerentiate the current traﬃc and the target (i.e. the part that will be used in
the generated signatures) is not common to all future traﬃc, the type II attack
will also lead to a more speciﬁc DoS attack, which leaves other future traﬃc
mostly unaﬀected.
As our survey showed, the level of sophistication required for the type II at-
tack is actually not very high, since URLs on many websites evolve in an easily
predictable manner. For example, the use of the date is common for news sites
like cnn.com, while the use of ISBN numbers are common among queries to
amazon.com. The URLs for Microsoft security bulletin which provide informa-
tion about vulnerabilities related to Microsoft products contain the id number
of the vulnerability (e.g. MS05-053). All these elements can be used for the type
II allergy attack. Furthermore, the common use of web caching information in
HTTP requests and responses makes many general HTTP traﬃc possible targets
of the type II attack (for example, it seems possible for “poisonous” signatures
that ﬁlter requests with the “If-Modiﬁed-Since” ﬁeld being any value in the next
30 days to block all pages updated in the coming month).
Finally, we emphasize that any mechanism to avoid false positive by checking
signatures against normal traﬃc only when they are generated (as in EarlyBird
[11] and Polygraph [8]) will be defeated by the type II attacks, since any signa-
tures from such attack will have zero false positive at the time of generation.
6 What Makes an ASG System Vulnerable and
Exploitable
In this section, we will present some insight on the allergy attack, based on our
study of diﬀerent ASG systems. In particular, we will try to answer the following
questions:
1. What are the properties that make an ASG system vulnerable to allergy
attacks?
2. What are the properties that make a vulnerable ASG system easily ex-
ploitable?
To better illustrate our ideas, we will give examples of ASG systems with the
properties concerned, and show how those properties guide the design of allergy
attacks against vulnerable systems.
72
S.P. Chung and A.K. Mok
6.1 Semantic-Free Signature Generation
We believe the root of the vulnerability against allergy attacks lies at the semantic-
free signature generation process. By semantic-free, we mean signatures are gener-
ated without considering how the properties matched by the signatures contribute
to successful worm activities. In other word, the diﬀerent components of a worm
(e.g protocol frame for control hijacking, ﬁller bytes for buﬀer overﬂow, return
address used to direct control to worm payload, or the worm payload itself) are
treated the same in a semantic-free signature generation process. This property
makes it possible for the vulnerable ASG system to confuse part of the targetted
traﬃc as an invariant property of a “worm”, and use it as a “worm signature”,
and thus is a precondition for successful allergy attacks. Now let’s consider some
example ASG systems with this property.
Honeycomb: As one of the earliest ASG systems, Honeycomb [5] uses honey-
pots to collect worm packets, and generates signatures by ﬁnding the longest
common substring (LCS) among the collected packets. As we can see, the signa-
ture generation process makes no attempt to ﬁnd out how that longest common
substring contribute to a successful attack. Attack against Honeycomb is similar
to the one presented in Sect. 4.1, but is simpler. The attacker only needs to es-
tablish connections with random IP addresses, and send the request they want to
have ﬁltered over the connection. By repeating this a large number of times, the
attacker will eventually establish multiple connections with the honeypot, and
populate the suspicious pool with enough of his attack packets. The LCS-based
signature generation will then generate signatures based on the target request
in the attack packets.
EarlyBird: EarlyBird [11] is an ASG system designed to be eﬃcient in both
time and space, so that it can process traﬃc on high-speed link in real time.
EarlyBird extracts prevalent 40-byte sequences that both originate from, and
are destined to signiﬁcantly diverse IP addresses as signatures. Once again, the
signature generation ignores how the signature byte sequences aﬀect the target
host. Thus an attack strategy similar to the above applies to EarlyBird as well.
Attack packets containing the target request alone will be sent to a large number
of addresses in the target network (30 for the default conﬁguration in [11]). In
order for the attack to be successful, those packets should also appear to come
from a diverse set of source addresses (30 again). Since EarlyBird performs very
limited ﬂow reassembly and no real connection is needed for a source address to
be counted, we believe the source addresses can be spoofed. Even if more accurate
ﬂow reassemble process is employed and real connection is needed, the number
of machines that the attacker has to control still appears to be insigniﬁcant for
hackers nowadays.
In addition to understanding the role of diﬀerent parts of the worm packet in
the worm’s activity, and make use of this information in signature generation,
it is also very important to conﬁrm that the identiﬁed worm components are
“functional”. If the signature is generated using the payload of the worm, it is
Allergy Attack Against Automatic Signature Generation
73
important to make sure that the “payload” is at least executable. If the signa-
ture generation utilize the return address used in a control hijacking, then it is
necessary to check whether that address will result in the execution of worm
payload. Without these sanity checks, the more sophisticated signature gener-
ation process will only complicate the design of allergy attacks, but will not
stop them. Now let’s consider the system presented in [6] and TaintCheck [9] as
examples.
CFG-based Signature Generation: The system proposed in [6] is very sim-
ilar to EarlyBird. However, instead of using 40-byte sequences as signatures,
the system employs prevalent executable-code fragment that appears in packets
with diverse source and destination. In particular, a code fragment is considered
prevalent if its structurally equivalent variants are found in many packets (i.e.
a byte-by-byte match is not necessary). With this new type of signatures, any
packet that contains executable code with the same structure as the signature
code fragment will be dropped. Signatures thus generated will then be resilient
to certain polymorphic techniques (like register renaming and instruction sub-
stitution). However, the system in [6] does not verify that the executable code
used in the signature is indeed a worm payload. In fact, any executable code
in a suspicious packet can be used as a signature, even if it does not corre-
spond to any worm activity, or will never be executed by the attacked host at
all. As a result, it is possible to launch an allergy attack against the system
in [6] to block all packets containing executable code of the attacker’s choice.
The attack is basically the same as that against EarlyBird, the only diﬀerence
is that code fragments from the target executable are used in the attack pack-
ets. Even though this attack is ineﬀective against services oﬀered by the pro-
tected network, it may be used to prevent hosts from downloading patches for
vulnerabilities (which are usually packaged as “.EXE” ﬁles), or worm removal
tools.
TaintCheck: TaintCheck [9] is a novel intrusion detection system that uses dy-
namic taint analysis to keep track of tainted data, i.e. data that originates or is
derived arithmetically from an untrusted input. An alert is generated whenever
the tainted data are used in an unsafe way, e.g. used as a jump address. Further-
more, TaintCheck can obtain the value of tainted data that is used for unsafe
operations. In an injected code attack, this will mean the value used to over-
write a function pointer or return address. In [9], Newsome et al suggest using
the most signiﬁcant three bytes of this value as a signature for attacks exploiting
the same vulnerability. The evaluation in [9] shows that this preliminary signa-
ture generation scheme is very eﬀective in detecting attacks and results in low
false positives. However, if the overwritten value is used to ﬁlter incoming traﬃc
without checking whether it really leads to the eventual execution of the worm
payload, the system will be vulnerable to allergy attacks. In order to block out
the target request, the attacker simply modiﬁes a real control-hijacking attack
to overwrite the corresponding function pointer or return address with a 3-byte