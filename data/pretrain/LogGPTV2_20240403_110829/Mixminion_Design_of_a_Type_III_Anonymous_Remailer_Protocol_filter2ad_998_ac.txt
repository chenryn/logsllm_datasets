It is worth noting that while semantically secure encryp-
tion cannot be used directly to solve the problem of tagging
attacks in Mixminion, the structure of the operations per-
formed on the message as it travels through the network
is similar to the Luby-Rackoff [20] structure. In particular
the fact that the header depends on the body and vice versa
makes sure that if the message is tagged in any way it will
become entirely different from what was intended, and its
contents will provide no information at all to an attacker.
Mixminion is the ﬁrst system, to our knowledge, to achieve
this property by distributing the operation of a cipher across
many nodes of a mix network.
No mix except the crossover point can get any informa-
tion distinguishing forward messages from replies. While
the crossover point cannot be certain whether the message
that it is processing is a forward message or a reply, it does
gain partial information because crossover points are less
frequent on forward paths, and therefore a message which
is crossing-over is more likely to be a reply message.
4.3. Multiple-message tagging attacks
The above design is still vulnerable to a subtle and dan-
gerous attack. If Alice sends a group of messages along the
same path, the adversary can tag some of those message as
they leave Alice, recognize the pattern (number and timing
of tagged and untagged messages) at the crossover point,
and observe where the untagged ones go. With some as-
sumptions about our adversary, we can reduce this attack to
a trafﬁc conﬁrmation attack we’re already willing to accept:
when Alice sends a bunch of messages, the adversary can
count them and look for the pattern later. He can also drop
some of them and look for resulting patterns.
The adversary can only recognize a tag if he happens
to own the crossover point that Alice chooses. Therefore,
Alice picks k crossover points for her messages;3 to match
a tag signature with certainty, an adversary would have to
own all k crossover points. (And even then, it seems harder
as the subsets of her messages would overlap with subsets
of messages from other senders.)
The key here is that when the adversary doesn’t own a
given crossover point, tagging messages destined for that
crossover is equivalent to dropping them. The crossover
point in question simply doesn’t deliver the message to the
second leg. Therefore, if the adversary doesn’t own most
of the crossover points that Alice chooses, a successful
multiple-message tagging attack seems infeasible. We leave
a security analysis of the multiple-paths idea to future work,
but see Section 8.
3We can prevent the adversary from using divide-and-conquer on Al-
ice’s groupings if Alice uses a hybrid path starting with a short cascade
— so even if the adversary tags a subset of the messages he doesn’t know
(unless he owns the whole cascade) the groupings of tagged messages.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
5. Other design decisions
5.1. Forward secure link encryption and its beneﬁts
Unlike remailer Types I and II that used SMTP [33] (or-
dinary Internet e-mail) as their underlying transport mech-
anism, Mixminion clients and nodes communicate using
a forward secure encrypted channel based on TLS [10].
TLS allows the establishment of an encrypted tunnel us-
ing ephemeral Difﬁe-Hellman key negotiation. In order to
guarantee that the receiving end is the one intended by the
creator of the anonymous message, the receiving node signs
the ephemeral key. As soon as a session key has been es-
tablished, the parties destroy their Difﬁe-Hellman keys and
begin sending messages through the tunnel. After each mes-
sage, the parties perform a standard key update operation to
generate a fresh session key and delete the old key mate-
rial. Key updates don’t require any asymmetric encryption
techniques, and so are relatively fast.
The purpose of link encryption is to provide forward se-
crecy: once the ephemeral link keys have been deleted, not
even the nodes that exchange messages can decrypt or rec-
ognize messages that might have been intercepted on the
links. This makes it impossible to comply with demands
for decryption of past trafﬁc that might be served in some
jurisdictions, and limits the impact of server compromise on
the anonymity of messages already delivered. Even if an at-
tacker manages to get hold of the session key at a particular
point he would have to observe all subsequent trafﬁc to be
able to update his key appropriately.
Additionally link encryption makes active and passive
attacks on the network links more difﬁcult. Since a mes-
sage tells each mix the identity of its successor in the path,
it is difﬁcult for an attacker to mount a man-in-the-middle
attack to modify messages, inject messages to a node as
if they were part of the normal communications, or delete
messages. An additional heartbeat signal in the TLS tunnel
could be used to complicate message delaying attacks.
The encrypted channel offers only limited protection
against trafﬁc analysis. Encrypted links between honest
nodes prevent an adversary from recognizing even his own
messages, but without link padding, he can still measure
how much trafﬁc is being transmitted.
As a fringe beneﬁt, using a separate link protocol makes
it easier to deploy relay-only mixes — such nodes simply
omit SMTP support, as the next section discusses.
5.2. Message types and delivery modules
Once a Mixminion packet reaches the ﬁnal mix in its
path, it must either be delivered to its intended recipient,
dropped if it is an intra-network dummy message, or pro-
cessed further if it is a remixed Type II packet. In order
to support different kinds of delivery, the header includes a
type code for the action to be taken to deliver the message.
A few types — such as ‘dummy’, ‘SMTP’, and ‘local deliv-
ery’ — are speciﬁed as a part of the Mixminion standard.
Others may be added by future extensions to implement
abuse-resistant exit policies (see Section 5.3), to adminis-
ter nymservers (see Section 7), to publish anonymously to
Usenet, to relay messages to older remailers, or to support
other protocols.
Nearly all delivery methods require additional informa-
tion beyond the message type and its payload. The SMTP
module, for example, requires a mailbox.4 This information
is placed in a variable-length annex to the ﬁnal subheader.
The types each mix supports are described in a capabil-
ity block, which also includes the mix’s address, long-term
(signing) public key, short-term (message decryption) pub-
lic key, remixing capability, and batching strategy. Mixes
sign these capability blocks and publish them on directory
servers (see Section 6). Clients download this information
from the directory servers.
The possibility of multiple delivery methods doesn’t
come free: their presence may fragment the anonymity set.
For example, if there were ﬁve ways to send an SMTP mes-
sage to Bob, an attacker could partition Bob’s incoming
mail by guessing that one of those ways is Alice’s favorite.
An active attacker could even lure users into using a com-
promised exit node by advertising that node as supporting
a rare but desirable delivery method. We believe these at-
tacks do not provide an argument against extensibility per
se, but rather argue against the proliferation of redundant
extensions, and against the use of rare extensions.
5.3. Exit policies and abuse
One important entry in a node’s capability block is its
exit policy, that describes to which addresses and by which
methods a mix node is prepared to deliver messages. Exit
abuse is a serious barrier to wide-scale remailer deployment
— rare indeed is the network administrator tolerant of ma-
chines that potentially deliver hate mail.
On one end of the spectrum are open exit nodes that will
deliver anywhere; on the other end are middleman nodes
that only relay trafﬁc to other remailer nodes, and private
exit nodes that only deliver locally. More generally, nodes
can set individual exit policies to declare which trafﬁc they
will deliver: some may allow trafﬁc only for local users;
others may require other forms of trafﬁc authentication [38].
Preventing abuse of open exit nodes is an unsolved prob-
lem. If receiving mail is opt-in, an abuser can forge an opt-
in request from his victim. Indeed, requiring recipients to
4A mailbox is the canonical form of the “user@domain” part of an
e-mail address. Mixminion uses only mailboxes in the protocol, because
the other parts of an e-mail address could differ among senders who obtain
an address from different sources, thus leading to smaller anonymity sets.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
declare their interest in receiving anonymous mail is risky
— human rights activists in Guatemala cannot both sign up
to receive anonymous mail and also retain plausible denia-
bility. Similarly, if receiving mail is opt-out, an abuser can
deny service by forging an opt-out request from a legitimate
user. We use a compromise, where all users are assumed
to want to receive mail, but each Mixminion message ar-
rives with instructions on how to opt out. Speciﬁcally, the
message includes a secret that must be used to authorize
the opt-out. Thus adversaries who cannot read the victim’s
mail cannot forge an opt-out request. (We believe that re-
stricting ourselves to such adversaries is reasonable. After
all, adversaries strong enough to read the victim’s mail can
probably deny service to him in some other way. Users may
also avoid this attack by running their own ‘delivery-only’
nodes, which would amount to an implicit opt-in.)
Of course, a mixture of open and restricted exit nodes
will allow the most ﬂexibility for volunteers running
servers. But while a large number of middleman nodes is
useful to provide a large and robust network, a small num-
ber of exit nodes still simpliﬁes trafﬁc analysis. In these at-
tacks, the adversary observes both a suspected user and the
network’s exit nodes and looks for timing or packet correla-
tions. The fewer exit nodes in the system, the easier it is for
an attacker to observe them all. Thus, the number of avail-
able open exit nodes remains a limiting security parameter
for the remailer network.
5.4. Replay prevention, message expiration, and key
rotation
Mixmaster offers rudimentary replay prevention by
keeping a list of recent message IDs. To keep the list
from getting too large, it expires entries after a server-
conﬁgurable amount of time. But if an adversary records
the input and output batches of a mix and then replays a
message after the mix has forgotten about it, the message’s
decryption will be exactly the same. Thus, Mixmaster does
not provide the forward anonymity that we want.
Chaum ﬁrst observed this attack in [7], but his solution
(which is proposed again in Babel5) — to include in each
message a timestamp that describes when that message is
valid — also has problems. Speciﬁcally, it introduces a new
class of partitioning attacks, where the adversary can distin-
guish and track messages based on timestamps. If messages
have short lifetimes, then some legitimate messages will ex-
pire before they can be delivered. But if messages have long
lifetimes, then messages near their expiration date will be
5Actually, Babel is vulnerable to a much more direct timestamp attack:
each layer of the onion includes “the number of seconds elapsed since Jan-
uary 1, 1970 GMT, to the moment of message composition by the sender.”
Few people will be composing a message on a given second, so an adver-
sary owning a mix at the beginning of the path and another at the end could
trivially recognize a message.
rare, and an adversary can exploit this fact by intentionally
delaying a message until near its expiration date. If he owns
a mix later in the path he can recognize the message by its
unusually late expiration date.
One way of addressing this partitioning attack is to add
dummy trafﬁc so that it is less rare for messages to arrive
near their expiration date, but dummy trafﬁc is still not well-
understood. Another approach would be to add random val-
ues to the expiration date of each mix in the path, so an ad-
versary delaying a message at one mix cannot expect that it
is now near to expiring elsewhere in the path; but this seems
open to statistical attacks.
We use a compromise solution that still provides forward
anonymity. Messages don’t contain any timestamp or expi-
ration information. As in Mixmaster, each mix keeps hashes
of the headers of all messages it has processed; but unlike
Mixmaster, a mix only discards these hashes when it ro-
tates its public key. Mixes should choose key rotation fre-
quency based on their security goals and on the number of
hashes they are willing to store, and advertise their key rota-
tion schedules along with their public key information. (See
Section 6.)
Note that this solution does not entirely solve the par-
titioning problem — near the time of a key rotation, the
anonymity set of messages will be divided into those
senders who knew about the key rotation and used the new
key, and those who did not. Also note that while key rota-
tion and link encryption (see Section 5.1) both provide for-
ward security, their protection is not redundant. With only
link encryption, an adversary running one mix could com-
promise another and use its private key to decrypt messages
previously sent between them. Key rotation limits the win-
dow of opportunity for this attack.
6. Directory Servers
The Mixmaster protocol does not specify a means for
clients to learn the locations, keys, capabilities, or perfor-
mance statistics of mixes. Several ad hoc schemes have
grown to ﬁll that void [30], but as we explain below, it is
important that all clients learn this information in the same
way. (Omitting directory servers is not an option: without
timely information, clients cannot respond to changes in the
set of mixes, or to changes in mix keys.) Here we describe
Mixminion directory servers and examine the anonymity
risks of such information services.
In Mixminion, a group of redundant directory servers
provide clients information about nodes’ current keys, ca-
pabilities, and state. These directory servers must be syn-
chronized and redundant: we lose security if clients have
different information about network topology and node reli-
ability. An adversary who controls a directory server could
track certain clients by providing different information —
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
perhaps by listing only mixes under its control, or by in-
forming only certain clients about a given mix.
Moreover, an adversary without control of a directory
server can still exploit differences among client knowledge.
If Eve knows that mix  is listed on server D1 but not on
D2, she can use this knowledge to link trafﬁc through 
to clients who have queried D1. Eve can also distinguish
trafﬁc based on any differences between clients who use di-
rectory servers and those who don’t, between clients with
up-to-date listings and those with old listings, and (if the di-
rectory is large and so is given out in pieces) between clients
who have different subsets of the directory.
So it is not merely a matter of convenience for clients
to retrieve up-to-date mix information. We must specify a
directory service as a part of our standard. Thus Mixmin-
ion provides protocols for mixes to advertise their capability
certiﬁcates to directory servers, and for clients to download
complete directories.6 Directory servers work together to
ensure correct and complete data by successively signing
certiﬁcate bundles, so users can be sure that a given mix
certiﬁcate has been seen by a threshold of directory servers.
While we require stronger synchronization and trust for the
directory servers, we believe this is realistic because there
will be far fewer of them than mix nodes, and they will be
much more static.
But even if client knowledge is uniform, an attacker can
mount a trickle attack by delaying messages from Alice
at a compromised node until the directory servers remove
some mix  from their listings — he can then release the
delayed messages and guess that any messages still using
 are likely to be from Alice. An adversary controlling
many nodes can launch this attack effectively. Thus clients