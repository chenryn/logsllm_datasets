It is important to note that, while semantically secure encryption cannot directly address the problem of tagging attacks in Mixminion, the operational structure of the message as it traverses the network bears a resemblance to the Luby-Rackoff [20] construction. Specifically, the interdependence between the header and the body ensures that any tagged message will be significantly altered from its original form, thereby providing no useful information to an attacker. To our knowledge, Mixminion is the first system to achieve this level of security by distributing the cipher operations across multiple nodes in a mix network.

Only the crossover point in the network can potentially distinguish between forward messages and replies, but even then, it cannot be certain. Crossover points are less frequent on forward paths, making a crossing-over message more likely to be a reply. However, the crossover point gains only partial information due to this frequency difference.

### 4.3. Multiple-Message Tagging Attacks

Despite these precautions, the design remains vulnerable to a subtle and dangerous attack. If Alice sends multiple messages along the same path, an adversary can tag some of these messages as they leave Alice, recognize the pattern (number and timing of tagged and untagged messages) at the crossover point, and observe where the untagged messages go. Under certain assumptions about the adversary, this attack can be reduced to a traffic confirmation attack, which we are already prepared to accept: the adversary can count the messages and look for patterns later, or drop some messages and observe the resulting patterns.

The adversary can only recognize a tag if they control the crossover point that Alice chooses. To mitigate this, Alice selects \( k \) crossover points for her messages. For the adversary to match a tag signature with certainty, they would need to control all \( k \) crossover points. Even then, the overlapping subsets of messages from different senders make it more challenging. If the adversary does not control most of the chosen crossover points, a successful multiple-message tagging attack becomes infeasible. A detailed security analysis of the multiple-paths idea is left for future work, but see Section 8 for further discussion.

To prevent the adversary from using divide-and-conquer on Aliceâ€™s groupings, Alice can use a hybrid path starting with a short cascade. This way, even if the adversary tags a subset of the messages, they cannot determine the groupings unless they control the entire cascade.

### 5. Other Design Decisions

#### 5.1. Forward Secure Link Encryption and Its Benefits

Unlike remailer Types I and II, which used SMTP [33] (ordinary Internet email) as their underlying transport mechanism, Mixminion clients and nodes communicate via a forward-secure encrypted channel based on TLS [10]. TLS allows the establishment of an encrypted tunnel using ephemeral Diffie-Hellman key negotiation. The receiving node signs the ephemeral key to ensure it is the intended recipient. Once the session key is established, the parties destroy their Diffie-Hellman keys and begin sending messages through the tunnel. After each message, a standard key update operation generates a fresh session key and deletes the old key material, which is relatively fast as it does not require asymmetric encryption.

The purpose of link encryption is to provide forward secrecy: once the ephemeral link keys are deleted, even the nodes that exchanged messages cannot decrypt or recognize intercepted messages. This makes it impossible to comply with demands for decryption of past traffic, limiting the impact of server compromise on the anonymity of delivered messages. Even if an attacker obtains the session key at a particular point, they must observe all subsequent traffic to update their key appropriately.

Additionally, link encryption makes active and passive attacks on network links more difficult. Since a message tells each mix the identity of its successor in the path, mounting man-in-the-middle attacks, injecting messages, or deleting messages becomes challenging. An additional heartbeat signal in the TLS tunnel can complicate message delaying attacks.

While the encrypted channel offers limited protection against traffic analysis, it prevents an adversary from recognizing even their own messages. Without link padding, however, the adversary can still measure the amount of traffic being transmitted. Using a separate link protocol also simplifies the deployment of relay-only mixes, which simply omit SMTP support.

#### 5.2. Message Types and Delivery Modules

When a Mixminion packet reaches the final mix in its path, it must be delivered to its intended recipient, dropped if it is an intra-network dummy message, or processed further if it is a remixed Type II packet. The header includes a type code for the action to be taken to deliver the message. Standard types like 'dummy', 'SMTP', and 'local delivery' are specified, and others can be added for future extensions, such as implementing abuse-resistant exit policies, administering nymservers, publishing anonymously to Usenet, relaying messages to older remailers, or supporting other protocols.

Most delivery methods require additional information beyond the message type and payload. For example, the SMTP module requires a mailbox. This information is placed in a variable-length annex to the final subheader. The types each mix supports are described in a capability block, which also includes the mix's address, long-term (signing) public key, short-term (message decryption) public key, remixing capability, and batching strategy. Mixes sign these capability blocks and publish them on directory servers, and clients download this information from the directory servers.

The presence of multiple delivery methods can fragment the anonymity set. For instance, if there are five ways to send an SMTP message to Bob, an attacker could partition Bob's incoming mail by guessing Alice's favorite method. An active attacker could even lure users into using a compromised exit node by advertising it as supporting a rare but desirable delivery method. These attacks do not argue against extensibility per se but rather against the proliferation of redundant extensions and the use of rare extensions.

#### 5.3. Exit Policies and Abuse

A crucial entry in a node's capability block is its exit policy, which describes the addresses and methods by which a mix node is prepared to deliver messages. Exit abuse is a significant barrier to wide-scale remailer deployment, as few network administrators tolerate machines that potentially deliver hate mail.

On one end of the spectrum are open exit nodes that deliver anywhere, while on the other end are middleman nodes that only relay traffic to other remailer nodes and private exit nodes that only deliver locally. More generally, nodes can set individual exit policies to declare which traffic they will deliver: some may allow traffic only for local users, while others may require other forms of traffic authentication [38].

Preventing abuse of open exit nodes is an unsolved problem. If receiving mail is opt-in, an abuser can forge an opt-in request from the victim. Requiring recipients to declare their interest in receiving anonymous mail is risky, as human rights activists in Guatemala cannot both sign up to receive anonymous mail and retain plausible deniability. Similarly, if receiving mail is opt-out, an abuser can deny service by forging an opt-out request from a legitimate user. We use a compromise where all users are assumed to want to receive mail, but each Mixminion message arrives with instructions on how to opt out. The message includes a secret that must be used to authorize the opt-out, preventing adversaries who cannot read the victim's mail from forging an opt-out request.

A mixture of open and restricted exit nodes provides the most flexibility for volunteers running servers. While a large number of middleman nodes is useful for a robust network, a small number of exit nodes simplifies traffic analysis. In these attacks, the adversary observes both a suspected user and the network's exit nodes and looks for timing or packet correlations. The fewer exit nodes, the easier it is for the attacker to observe them all. Thus, the number of available open exit nodes remains a limiting security parameter for the remailer network.

#### 5.4. Replay Prevention, Message Expiration, and Key Rotation

Mixmaster offers rudimentary replay prevention by keeping a list of recent message IDs, expiring entries after a configurable time. However, if an adversary records the input and output batches of a mix and replays a message after the mix has forgotten about it, the message's decryption will be the same. Thus, Mixmaster does not provide the forward anonymity we desire.

Chaum first observed this attack in [7], proposing a solution to include a timestamp in each message describing when it is valid. However, this introduces new partitioning attacks, where the adversary can distinguish and track messages based on timestamps. Short-lived messages may expire before delivery, while long-lived messages near their expiration date become rare, allowing an adversary to exploit this by intentionally delaying a message until near its expiration date.

One approach to address this partitioning attack is to add dummy traffic so that messages arriving near their expiration date are less rare. Another approach is to add random values to the expiration date of each mix in the path, making it difficult for an adversary to delay a message and expect it to be near expiring elsewhere. We use a compromise solution that still provides forward anonymity. Messages do not contain any timestamp or expiration information. Each mix keeps hashes of the headers of all messages it has processed, discarding these hashes only when it rotates its public key. Mixes should choose key rotation frequency based on their security goals and the number of hashes they are willing to store, and advertise their key rotation schedules along with their public key information.

This solution does not entirely solve the partitioning problem, as near the time of a key rotation, the anonymity set of messages will be divided into those senders who knew about the key rotation and used the new key, and those who did not. While key rotation and link encryption both provide forward security, their protection is not redundant. With only link encryption, an adversary running one mix could compromise another and use its private key to decrypt messages previously sent between them. Key rotation limits the window of opportunity for this attack.

### 6. Directory Servers

The Mixmaster protocol does not specify a means for clients to learn the locations, keys, capabilities, or performance statistics of mixes. Several ad hoc schemes have filled this void [30], but it is crucial that all clients learn this information in the same way. Without timely information, clients cannot respond to changes in the set of mixes or mix keys. Here, we describe Mixminion directory servers and examine the anonymity risks of such information services.

In Mixminion, a group of redundant directory servers provides clients with information about nodes' current keys, capabilities, and state. These directory servers must be synchronized and redundant to ensure security. An adversary controlling a directory server could track certain clients by providing different information, such as listing only mixes under its control or informing only certain clients about a given mix.

Even without control of a directory server, an adversary can exploit differences among client knowledge. If Eve knows that mix \( M \) is listed on server \( D1 \) but not on \( D2 \), she can use this knowledge to link traffic through \( M \) to clients who have queried \( D1 \). Eve can also distinguish traffic based on differences between clients who use directory servers and those who donâ€™t, between clients with up-to-date listings and those with old listings, and (if the directory is large and given out in pieces) between clients who have different subsets of the directory.

Thus, it is not merely a matter of convenience for clients to retrieve up-to-date mix information; we must specify a directory service as part of our standard. Mixminion provides protocols for mixes to advertise their capability certificates to directory servers and for clients to download complete directories. Directory servers work together to ensure correct and complete data by successively signing certificate bundles, so users can be sure that a given mix certificate has been seen by a threshold of directory servers.

While we require stronger synchronization and trust for the directory servers, this is realistic because there will be far fewer of them than mix nodes, and they will be much more static. However, even if client knowledge is uniform, an attacker can mount a trickle attack by delaying messages from Alice at a compromised node until the directory servers remove some mix \( M \) from their listings. They can then release the delayed messages and guess that any messages still using \( M \) are likely to be from Alice. An adversary controlling many nodes can launch this attack effectively.