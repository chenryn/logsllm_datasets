weakest preconditions. In practice, it can be realized using
taint analysis techniques.
B. Conceptual Framework
Now we discuss how the theoretical model can be im-
plemented in practice. Since binary programs do not exhibit
the symbolic state {Si} and
explicit variables and types,
constraint Δi are represented with symbolic memories. The
program Pi
is represented with assembly instructions. A
detailed framework which technically synthesizes the whole
concolic execution process is shown in Figure 1.
182
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:37 UTC from IEEE Xplore.  Restrictions apply. 
(cid:12)(cid:144)(cid:149)(cid:150)(cid:148)(cid:151)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:23)(cid:148)(cid:131)(cid:133)(cid:139)(cid:144)(cid:137)(cid:3)
(cid:4666)(cid:135)(cid:484)(cid:137)(cid:484)(cid:481)(cid:3)(cid:12)(cid:144)(cid:150)(cid:135)(cid:142)(cid:3)(cid:19)(cid:139)(cid:144)(cid:4667)
(cid:12)(cid:144)(cid:149)(cid:150)(cid:148)(cid:151)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:15)(cid:139)(cid:136)(cid:150)(cid:139)(cid:144)(cid:137)
(cid:4666)(cid:135)(cid:484)(cid:137)(cid:484)(cid:481)(cid:3)(cid:5)(cid:4)(cid:19)(cid:3)(cid:19)(cid:139)(cid:144)(cid:3)(cid:23)(cid:145)(cid:145)(cid:142)(cid:4667)
(cid:6)(cid:145)(cid:144)(cid:149)(cid:150)(cid:148)(cid:131)(cid:139)(cid:144)(cid:150)(cid:3)(cid:8)(cid:154)(cid:150)(cid:148)(cid:131)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)
(cid:6)(cid:145)(cid:144)(cid:149)(cid:150)(cid:148)(cid:131)(cid:139)(cid:144)(cid:150)(cid:3)(cid:22)(cid:145)(cid:142)(cid:152)(cid:139)(cid:144)(cid:137)
(cid:4666)(cid:135)(cid:484)(cid:137)(cid:484)(cid:481)(cid:3)(cid:22)(cid:16)(cid:23)(cid:486)(cid:15)(cid:139)(cid:132)(cid:4667)
(cid:4666)(cid:135)(cid:484)(cid:137)(cid:484)(cid:481)(cid:3)(cid:29)(cid:885)(cid:4667)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)(cid:21)(cid:135)(cid:131)(cid:149)(cid:145)(cid:144)(cid:139)(cid:144)(cid:137)
(cid:8)(cid:144)(cid:150)(cid:148)(cid:155)
(cid:6)(cid:138)(cid:135)(cid:133)(cid:141)(cid:146)(cid:145)(cid:139)(cid:144)(cid:150)
(cid:12)(cid:144)(cid:149)(cid:150)(cid:148)(cid:151)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:883)
(cid:485)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)
(cid:8)(cid:154)(cid:146)(cid:148)(cid:135)(cid:149)(cid:149)(cid:139)(cid:145)(cid:144)(cid:3)(cid:883)
(cid:485)
(cid:4666)(cid:4)(cid:149)(cid:149)(cid:135)(cid:143)(cid:132)(cid:142)(cid:155)(cid:3)(cid:6)(cid:145)(cid:134)(cid:135)(cid:4667)
(cid:4666)(cid:12)(cid:144)(cid:150)(cid:135)(cid:148)(cid:143)(cid:135)(cid:134)(cid:139)(cid:131)(cid:150)(cid:135)(cid:3)(cid:15)(cid:131)(cid:144)(cid:137)(cid:151)(cid:131)(cid:137)(cid:135)(cid:4667)
(cid:485)
(cid:8)(cid:154)(cid:139)(cid:150)
(cid:12)(cid:144)(cid:149)(cid:150)(cid:148)(cid:151)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:143)
(cid:22)(cid:133)(cid:138)(cid:135)(cid:134)(cid:151)(cid:142)(cid:135)(cid:148)
(cid:21)(cid:135)(cid:149)(cid:150)(cid:145)(cid:148)(cid:135)
(cid:12)(cid:144)(cid:149)(cid:150)(cid:148)(cid:151)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:883)
(cid:485)
(cid:485)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)
(cid:8)(cid:154)(cid:146)(cid:148)(cid:135)(cid:149)(cid:149)(cid:139)(cid:145)(cid:144)(cid:3)(cid:146)(cid:3)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)
(cid:8)(cid:154)(cid:146)(cid:148)(cid:135)(cid:149)(cid:149)(cid:139)(cid:145)(cid:144)(cid:3)(cid:883)
(cid:485)
(cid:4666)(cid:4)(cid:149)(cid:149)(cid:135)(cid:143)(cid:132)(cid:142)(cid:155)(cid:3)(cid:6)(cid:145)(cid:134)(cid:135)(cid:4667)
(cid:4666)(cid:12)(cid:144)(cid:150)(cid:135)(cid:148)(cid:143)(cid:135)(cid:134)(cid:139)(cid:131)(cid:150)(cid:135)(cid:3)(cid:15)(cid:131)(cid:144)(cid:137)(cid:151)(cid:131)(cid:137)(cid:135)(cid:4667)
(cid:485)
(cid:12)(cid:144)(cid:149)(cid:150)(cid:148)(cid:151)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:144)
(cid:8)(cid:154)(cid:139)(cid:150)
(cid:485)
(cid:6)(cid:145)(cid:144)(cid:133)(cid:148)(cid:135)(cid:150)(cid:135)(cid:3)(cid:8)(cid:154)(cid:135)(cid:133)(cid:151)(cid:150)(cid:139)(cid:145)(cid:144)
(cid:485)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)
(cid:8)(cid:154)(cid:146)(cid:148)(cid:135)(cid:149)(cid:149)(cid:139)(cid:145)(cid:144)(cid:3)(cid:147)(cid:3)
(cid:6)(cid:145)(cid:144)(cid:149)(cid:150)(cid:148)(cid:131)(cid:139)(cid:144)(cid:150)(cid:3)
(cid:16)(cid:145)(cid:134)(cid:135)(cid:142)(cid:149)
(cid:485)
(cid:4666)(cid:22)(cid:16)(cid:23)(cid:3)(cid:15)(cid:131)(cid:144)(cid:137)(cid:151)(cid:131)(cid:137)(cid:135)(cid:4667)
(cid:485)
(cid:6)(cid:145)(cid:144)(cid:149)(cid:150)(cid:148)(cid:131)(cid:139)(cid:144)(cid:150)(cid:3)
(cid:16)(cid:145)(cid:134)(cid:135)(cid:142)(cid:149)
(cid:485)
(cid:4666)(cid:22)(cid:16)(cid:23)(cid:3)(cid:15)(cid:131)(cid:144)(cid:137)(cid:151)(cid:131)(cid:137)(cid:135)(cid:4667)
(cid:485)
(cid:22)(cid:135)(cid:150)(cid:3)(cid:139)(cid:144)(cid:139)(cid:150)(cid:139)(cid:131)(cid:142)(cid:3)(cid:149)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)(cid:152)(cid:131)(cid:142)(cid:151)(cid:135)(cid:149)
(cid:17)(cid:135)(cid:153)(cid:3)(cid:23)(cid:135)(cid:149)(cid:150)(cid:3)(cid:6)(cid:131)(cid:149)(cid:135)(cid:149)
(cid:4668)(cid:152)(cid:883)(cid:3)(cid:485)(cid:3)(cid:152)(cid:141)(cid:4669)(cid:3)
(cid:6)(cid:145)(cid:144)(cid:150)(cid:148)(cid:145)(cid:142)
(cid:9)(cid:142)(cid:145)(cid:153)(cid:3)(cid:883)
(cid:4)(cid:149)(cid:149)(cid:139)(cid:137)(cid:144)(cid:3)(cid:149)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)(cid:152)(cid:131)(cid:142)(cid:151)(cid:135)(cid:149)(cid:483)(cid:3)(cid:152)(cid:883)(cid:3)
(cid:17)(cid:135)(cid:153)(cid:3)(cid:23)(cid:135)(cid:149)(cid:150)(cid:3)(cid:6)(cid:131)(cid:149)(cid:135)(cid:149)
(cid:4668)(cid:152)(cid:141)(cid:3397)(cid:883)(cid:3)(cid:485)(cid:3)(cid:152)(cid:140)(cid:4669)(cid:3)
(cid:6)(cid:145)(cid:144)(cid:150)(cid:148)(cid:145)(cid:142)
(cid:9)(cid:142)(cid:145)(cid:153)(cid:3)(cid:884)
(cid:23)(cid:135)(cid:149)(cid:150)(cid:3)(cid:133)(cid:131)(cid:149)(cid:135)(cid:149)(cid:3)(cid:150)(cid:145)(cid:3)(cid:132)(cid:135)(cid:3)(cid:135)(cid:154)(cid:146)(cid:142)(cid:145)(cid:148)(cid:135)(cid:134)(cid:3)(cid:4668)(cid:152)(cid:884)(cid:3)(cid:485)(cid:3)(cid:152)(cid:140)(cid:4669)(cid:3)
Fig. 1: A conceptual framework for concolic executing binary programs
Vertically, the framework includes several rounds of con-
crete executions, and each round is initiated with a new setting
of symbolic values. Horizontally, each round includes several
essential steps for symbolic reasoning.
Instruction Tracing: In this step,
the concolic executor
records the instructions during concrete execution. This can
be achieved based on CPU tools (e.g., Intel Pin [18]), or
machine emulation tools (e.g., QEMU [19]). In general, not all
instructions are our interests. A forward taint analysis process
can be employed to ﬁlter out the unrelated instructions.
Instruction Lifting: This step interprets the semantic of each
assembly instruction with a form of intermediate language
(IL), and lifts the whole trace into intermediate representatives
(IR) using the IL. In this way, the original operations on
registers and memories can be explicitly modeled.
Constraint Extraction: Each branch with symbolic con-
ditions indicates a new control ﬂow possibility. Concolic
execution extracts the constraint model for each branch via
recursive symbolic expression substitution. Each concrete
execution round may generate several constraint models
depending on the number of conditional branches along the
trace. The constraint models are generally described with a
language of satisﬁability modulo theories (SMT), such as
SMT-Lib [20].
Constraint Solving: A constraint solver is employed to
search solutions for each constraint model. There are several
popular constraint solvers off-the-shelf, such as MiniSat [21]
and Z3 [22].
After new test cases are generated, a scheduler prioritizes
the newly generated test cases, and determines which one
should be used in the next round of concrete execution.
This process is carried on until all test cases are explored.
In practical implementations, a checkpoint mechanism can
be used to further facilitate concolic execution by saving
redundant executions.
Note that some concolic execution tools (e.g., Angr) adopt a
hybrid concolic execution approach rather than our discussed
framework. Such tools lift the whole program into IR ﬁrst
and then perform dynamic symbolic execution on the IR.
In this way, the efforts in redundant instruction lifting can
be saved. However, such tools also inherit the drawbacks
of static analysis and emulation, and they are vulnerable
to sophisticated obfuscation techniques (e.g., code mutation).
Considering the popularity of camouﬂages in binaries, our
conceptual framework is more reliable for binary analysis.
IV. CHALLENGES
In this section, we ﬁrst overview the errors that may occur
during concolic execution, and then discuss the challenges that
may incur such errors; ﬁnally, we discuss the scalability issues
for small-size programs.
A. Errors for Symbolic Execution
When performing symbolic reasoning, errors can be intro-
duced in four stages.
• Es0: Symbolic variable declaration errors, which happen
before symbolic reasoning. As a result,
insufﬁcient
constraints can be generated for triggering new control
ﬂows.
• Es1: Instruction tracing and supporting errors, which
happen when some instructions are missing, or are not
supported for instruction lifting.
• Es2: Data propagation errors, which can be introduced
when some instructions are not correctly interpreted, or
when memories are not correctly modeled. As a result,
the symbolic states are not correct computed.
• Es3: Constraint modeling errors, which can be introduced
when a required satisﬁability modulo theory is not
supported.
The listed errors are not independent. Any error in one stage
can cause other errors in its posterior stages.
183
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:37 UTC from IEEE Xplore.  Restrictions apply. 
B. Accuracy Challenges
Real-world binaries exhibit rich diversities in syntax and
semantics. A program (e.g., Malware) can employ rarely used
syntax to avoid analysis, which may incur errors in symbolic
reasoning. Table I demonstrates a list of such technical
challenges with the corresponding errors they may incur.
TABLE I: A list of challenges, and the corresponding errors
they may incur.
Challenge
Symbolic Variable Declaration
Covert Symbolic Propagation
Parallel Program
Symbolic Array
Contextual Symbolic Value
Symbolic Jump
Floating-point Number
Stage of Error
Es0 Es1 Es2 Es3
(cid:2)
(cid:2)
(cid:2)
(cid:2)
-
-
-
-
-
-
-
-
-
-
-
-
(cid:2)
(cid:2)
-
-
-
-
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
1) Symbolic Variable Declaration: Symbolic variables are
the factors that affect program execution. Such factors include
program arguments, and other runtime information from the
context, such as time. In general, symbolic variables should
be declared before concolic execution. An attainable approach
is to consider the arguments to the program (i.e., argv) as
symbolic variables; however, it is frustrating to consider all
possible factors. Besides, even for the symbolic variables from
argv, concolic executors may not be able to handle varying
lengths of symbolic variables automatically.
Figure 2(a) demonstrates an example where a logic bomb
(i.e.,Bomb()) can only be triggered at a speciﬁc time. To
explore the bomb path, a concolic executor should declare
tv as a symbolic variable, and then solve the constraint for
tv. Failure in handling the challenge incurs Es0.
2) Covert Symbolic Propagation: When extracting con-
straint models, the symbolic data propagation process should
be correctly recognized. However, some data propagation are
not explicit. An extreme case happens when the symbolic
values are saved outside the process (e.g., into a ﬁle), and