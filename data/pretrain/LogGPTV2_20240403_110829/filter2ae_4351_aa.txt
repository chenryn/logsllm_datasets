原文：
内核调试是一件非常有趣的事情，但是，这件事情却并不简单——尤其是对于Apple来说。当然，网络上面已经有许多这方面的文章了，然而，随着时间的推移，许多内容已经过时了。因此，这篇文章中，我尽最大努力提供2019年最准确的信息、正确的命令以及正确的引导参数，当然，所有这些，我们都将会以实例的方式进行说明。
**在MacOS上开始内核调试**
* * *
首先，我们要搭建一个实验环境。为此，我们需要有一个要调试其内核的设备（在本文中，以iMac
2011作为调试对象），以及一个要在其上进行调试的设备（在本文中，为MacBook Pro
2009）。当然，我们可以用本文中介绍的各种方式将两者连接起来，但对我来说，最合适的方法（也是最可靠的方法），似乎是通过两者之间的Firewire电缆进行连接（这是因为我的两台计算机都有Firewire端口）。
硬件配置好之后，我们需要准备一些软件。从理论上说，我们可以调试RELEASE版内核，但是对于初学者时，调试Development版的内核要更合适一些。默认情况下，MacOS都提供了一个RELEASE版的fused内核，它位于/system/library/kernels/kernel中，其中kernel是一个Mach-O
64-bit executable x86_64文件。我们可以访问Apple
Developer页面，并下载内核调试工具包，这样就可以获得MacOS版本的Development内核了。
实际上，只要导航至[ Apple Developer Portal
Downloads](https://developer.apple.com/downloads/index.action?q=Kernel%20Debug%20Kit
" Apple Developer Portal Downloads") ，将看到如下所示的内容：
需要注意的是，我们需要根据自己的MacOS版本来下载相应的内核调试工具包！之后，我们就可以引导下载的内核了，如果内核与我们的MacOS版本不匹配的话，将无法正常引导！大家一定要小心行事。
**查找适合自己MacOS版本的内核调试工具包**
* * *
为了找到正确的内核调试工具包，您必须知道您的MacOS版本和实际构建编号（actual build
number）。要想了解当前所用的MacOS版本，只需转至Apple logo处，单击“About This
Mac”，就能从窗口中看到相应的版本（例如，我的系统为“Version 10.13.6”）。
为了获取实际构建编号，既可以单击“About This Mac”窗口中的“Version”标签，也可以运行终端命令`sw_vers | grep
BuildVersion`。对于我的系统来说，运行命令后，输出结果为`buildversion:17g65`。
    Last login: Sun Dec  2 03:58:16 on ttys000
    Isabella:~ geosn0w$ sw_vers | grep BuildVersion
    BuildVersion:    17G65
    Isabella:~ geosn0w$
因此，就我来说，运行的是MacOS High Sierra(10.13.6) build number
17G65。这样，就可以根据自己的系统版本下载合适的、包含安装文件的.DMG文件了。
**准备调试对象以供调试器调试**
* * *
将调试工具包下载到调试对象（即要调试其内核的计算机）后，双击DMG文件即可挂载该DMG文件。在DMG中，您可以看到一个名为kerneldebugkit.pkg的文件。双击该文件，然后按照安装向导进行操作即可。这个过程中，它会要求输入MacOS登录密码。需要注意的是，请不要将安装程序放入垃圾箱，因为以后还会用到的。
当安装完成时，它将如下所示。
安装完成后，请导航到/library/developer/kdks。在那里，有一个名为kdk_your_version_buildnumber.kdk的文件夹。对于我来说，该文件夹名为kdk_10.13.6_17g65.kdk。然后，打开该文件夹，其中会看到一个名为“System”的文件夹。切换至该文件夹，然后导航到“Library”，进而导航到“Kernels”。在该文件夹中，可以看到内核的二进制文件、XCode调试符号文件（.dSYM），等等。其中，名为kernel.development的文件就是我们的兴趣之所在。
然后，请将kernel.development复制粘贴到/system/library/kernels/下面，跟RELEASE内核二进制文件放在一起。完成上述操作后后，MacOS上就有了两个内核，一个是RELEASE版，一个是DEVELOPMENT版。
**在调试对象上禁用SIP**
* * *
为了正确调试，需要在要调试其内核的计算机上禁用SIP（系统完整性保护）。为此，重新启动计算机并进入恢复模式。为此，请重新启动计算机，当听到“boong！”的声音，或屏幕打开时，按CMD+R组合键，等待几秒钟，并可以进入Recovery
Mode用户界面，然后，从顶部栏打开“Terminal”。
在Recovery Terminal中，运行csrutil disable命令。然后重新启动计算机，并使其正常启动。
**自2018/2019年起设置NVRAM boot-args的正确方法**
* * *
这些年来，苹果已经改变了其boot-args，所以，我们在互联网上找到的相关内容可能有用，也可能没用，这主要取决于文章的发表的时间。截至2018年，以下boot-args在MacOS High
Sierra上面测试通过。
注意！以下boot-args假设通过Firewire，或通过基于Thunderbolt适配器的Firewire来执行该操作的。
如果您通过物理FireWire端口（较旧的Mac机器）使用FireWire电缆的话：
在Terminal中运行以下命令：
    sudo nvram boot-args="debug=0x8146 kdp_match_name=firewire fwdebug=0x40 pmuflags=1 -v"
如果您通过ThunderBolt适配器使用FireWire：
在Terminal中运行以下命令：
    sudo nvram boot-args="debug=0x8146 kdp_match_name=firewire fwkdp=0x8000 fwdebug=0x40 pmuflags=1 -v"
区别在于fwkdp=0x8000，起作用是让ioFireWireFamily.kext::applefwohci_kdp使用非内置FireWireThunderbolt适配器进行调试会话。
差不多就是这样了，调试对象在重新启动之后就可以调试了，下面，让我来解释一下启动参数的作用。
  * debug=0x8146 ->启用调试，并允许我们按下电源按钮来触发NMI（表示不可屏蔽中断），以允许调试器连接。
  * kdp_match_name=firewire ->这允许我们通过Firewire进行调试。
  * fwkdp=0x8000 ->如前所述，这告诉KEXT使用Thunderbolt至FireWire适配器。如果使用普通FireWire端口，则不要设置该参数。
  * fwdebug=0x40 ->启用applefwohci_kdp驱动程序的详细输出，这对于故障排除非常有用。
  * pmuflags=1 ->该选项禁用看门狗定时器。
  * -v -> 这一选项告诉计算机启动冗长，而不是正常的苹果标志和进度条，这对于排除故障非常有用。
除了我们设置的这些引导参数之外，MacOS还支持在`/osfmk/kern/debug.h`中定义的其他参数，我将在下面列出这些参数。这些截图来自XNU-4570.41.2。
    ...
    /* Debug boot-args */
    #define DB_HALT        0x1
    //#define DB_PRT          0x2 -- obsolete
    #define DB_NMI        0x4
    #define DB_KPRT        0x8
    #define DB_KDB        0x10
    #define DB_ARP          0x40
    #define DB_KDP_BP_DIS   0x80
    //#define DB_LOG_PI_SCRN  0x100 -- obsolete
    #define DB_KDP_GETC_ENA 0x200
    #define DB_KERN_DUMP_ON_PANIC        0x400 /* Trigger core dump on panic*/
    #define DB_KERN_DUMP_ON_NMI        0x800 /* Trigger core dump on NMI */
    #define DB_DBG_POST_CORE        0x1000 /*Wait in debugger after NMI core */
    #define DB_PANICLOG_DUMP        0x2000 /* Send paniclog on panic,not core*/
    #define DB_REBOOT_POST_CORE        0x4000 /* Attempt to reboot after
                            * post-panic crashdump/paniclog
                            * dump.
                            */
    #define DB_NMI_BTN_ENA      0x8000  /* Enable button to directly trigger NMI */
    #define DB_PRT_KDEBUG       0x10000 /* kprintf KDEBUG traces */
    #define DB_DISABLE_LOCAL_CORE   0x20000 /* ignore local kernel core dump support */
    #define DB_DISABLE_GZIP_CORE    0x40000 /* don't gzip kernel core dumps */
    #define DB_DISABLE_CROSS_PANIC  0x80000 /* x86 only - don't trigger cross panics. Only
                                             * necessary to enable x86 kernel debugging on
                                             * configs with a dev-fused co-processor running
                                             * release bridgeOS.
                                             */
    #define DB_REBOOT_ALWAYS        0x100000 /* Don't wait for debugger connection */
    ...
**准备调试器计算机**
* * *
好了，现在调试对象已经准备好了，我们需要配置运行调试器的计算机。为此，我将使用另一台运行El
Capitan的MacOS机器，但这无关紧要。还记得我们在调试对象上安装的内核调试工具包吗？我们也需要将它安装到调试器计算机上。不同之处在于，我们不会鼓捣其内核，也不会在调试器计算机上设置任何引导参数。我们需要内核正常工作，毕竟还得使用LLDB来执行调试。如果您熟悉GDB的话，那么事情就好办多了。下面给出一个[gdb->lldb命令对照表](https://lldb.llvm.org/lldb-gdb.html "gdb->lldb命令对照表")。
注意：您应该在调试器所在机器上安装相同的MacOS内核调试工具包，即使该机器的MacOS版本不同于调试对象的macOS版本，这是因为，我们不会在调试器上启动任何内核。
安装工具包后，就可以连接了。
**调试内核**
* * *
首先，请重新启动调试对象。您将看到它引导进入一个文本模式控制台，该控制台会输出详细的引导信息。等到屏幕上显示“DSMOS has
arrived!”消息后，需要按一次电源按钮，但是，不要按住不动。在调试对象上，您将看到它正在等待连接调试器完成。
**在调试器计算机上：**
* * *
打开终端窗口，并启动fwkdp-v，这是FireWire KDP
Tool，它将侦听FireWire接口并将数据重定向到本地主机，以便我们可以将KDP目标设置为localhost或127.0.0.1地址。这时，我们应该得到类似下面的输出：
    MacBook-Pro-van-Mac:~ mac$ fwkdp -v
    FireWire KDP Tool (v1.6)
    Matched on device 0x00002403
    Created plugin interface 0x7f9e50c03548 with result 0x00000000
    Created device interface 0x7f9e50c0d508 with result 0x00000000
    Opened device interface 0x7f9e50c0d508 with result 0x00000000
    Added callback dispatcher with result 0x00000000
    Created pseudo address space 0x7f9e50c0d778 at 0xf0430000
    Address space enabled.
    2018-12-02 05:51:05.453 fwkdp[5663:60796] CFSocketSetAddress listen failure: 102
    Created KDP socket listener 0x7f9e50c0d940 with result 0
    KDP Proxy and CoreDump-Receive dual mode active.
    Use 'localhost' as the KDP target in gdb.
    Ready.
现在，在不关闭该窗口的情况下，打开另一个终端窗口，并通过将kernel.development文件作为内核调试工具包的一部分传递给它，以启动LLDB调试器。请记住，内核文件可以从/library/developer/kdks/中找到。在这个目录中，有一个名为kdk_your_version_buildnumber.kdk的文件夹。就我而言，该文件夹名为kdk_10.13.6_17g65.kdk。所以，我需要的完整内核路径是`/library/developer/kdks/kdk_10.13.6_17g65.kdk/system/library/kernels/
kernel.development`。
因此，就我来说，需要在新终端窗口中执行的命令是`xcrun
lldb/library/developer/kdks/kdk_10.13.6_17g65.kdk/system/library/kernels/
kernel.development`。
    Last login: Sun Dec  2 10:37:51 on ttys000
    MacBook-Pro-van-Mac:~ mac$ xcrun lldb /Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development
    (lldb) target create "/Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development"