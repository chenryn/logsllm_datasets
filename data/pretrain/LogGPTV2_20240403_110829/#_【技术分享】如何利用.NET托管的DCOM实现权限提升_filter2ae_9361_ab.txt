**权限提升**

本文探讨了如何利用.NET编写的COM服务器执行任意反序列化，并详细介绍了相关技术细节。首先，我们讨论了通过标准_Object接口上的Equals方法实现这一目标的方法。接着，我们将介绍如何利用ClickOnce部署代理（导致CVE-2014-4073）中的漏洞，并提供了一个工具来帮助完成这项工作。

### 利用.NET COM服务器进行任意反序列化

为了使.NET编写的COM服务器执行任意反序列化，我们需要让服务器尝试为通过COM暴露的可序列化.NET对象创建运行时可调用包装器（RCW）。这可以通过在标准_Object接口上使用Equals方法实现。Equals方法用于比较两个对象的等同性。如果我们将.NET COM对象传递给服务器的Equals方法，运行时将尝试将其转换为RCW，以便托管实现可以使用它。此时，运行时需要检查该对象是否真的是一个CCW（客户端上下文窗口）包装的.NET对象。如果确实是这样，服务器运行时将调用GetSerializedBuffer，从而导致服务器进程中的任意反序列化。

#### 利用ClickOnce部署代理

这是第二次利用ClickOnce部署代理（导致CVE-2014-4073）。具体做法是将序列化的Hashtable发送到包含IHashCodeProvider接口的COM实现的服务器。当Hashtable运行其自定义反序列化代码时，它会重建内部散列结构，通过在每个密钥上调用IHashCodeProvider::GetHashCode来实现。通过添加一个可序列化的Delegate对象作为其中一个密钥，我们可以将其传递给客户端。通过以本地代码编写客户端，IManagedObject的自动序列化不会在将委托传回给我们时发生。尽管委托对象卡在服务器进程中，但CCW暴露给我们，我们可以调用它。调用委托会导致在服务器上下文中执行指定的函数，从而以服务器权限启动新进程。为此，我编写了一个工具来为任何.NET COM服务器完成此工作，详见[GitHub](https://github.com/tyranid/ExploitDotNetDCOM/tree/master/ExploitDotNetDCOMSerializer)。

微软本可以通过更改IManagedObject::GetSerializedBuffer的行为来修复CVE-2014-4073，但他们没有这样做。相反，微软以本机代码重写了代理，并发布了一篇博客文章，警告开发人员.NET DCOM的危险。然而，他们并没有弃用任何API以在.NET中注册DCOM对象，因此除非开发人员的安全意识极高并阅读了微软的安全博客，否则他们可能不会意识到这是一个问题。

这类漏洞至今仍然存在。例如，当我最近收到一台新的工作笔记本电脑时，我发现其中安装的一个由杜比编写的COM服务是用.NET编写的。经过几分钟的检查，我使用我的利用工具实现了在本地系统中的代码执行。这个漏洞现在已作为CVE-2017-7293被修复。由于.NET DCOM本质上不安全，杜比唯一的选择是以本地代码重写服务。

### 攻击Caller

找到IManagedObject bug类的新实例让我开始关注其其他影响。需要注意的是，服务器本身并无漏洞，只有当我们能强制服务器充当回调攻击应用程序的DCOM客户端时，该漏洞才能被利用。通过托管COM互操作调用DCOM对象的任何.NET应用程序都应该有类似的问题，而不仅仅是服务器。

#### WMI和PowerShell

我首先想到的是Windows Management Instrumentation (WMI)。现代版本的Windows可以使用WS-Management (WSMAN)协议连接到远程WMI实例，但由于遗留原因，WMI仍然支持DCOM传输。.NET通过[System.Management]命名空间支持WMI，这从.NET的早期就一直存在。它支持对WMI的远程访问，考虑到类的年代，几乎可以肯定在后台使用DCOM。在PowerShell (PS) 前端，通过诸如[Get-WmiObject]之类的cmdlet支持WMI。PS版本3（在Windows 8和Server 2008中引入）添加了一组新的cmdlet，包括[Get-CimInstance]。阅读相关链接可知，引入CIM cmdlet是为了支持WSMAN，并且链接明确指出“旧”WMI cmdlet使用DCOM。

为了测试这是否真的是一个漏洞，我们需要一个假的WMI服务器。似乎这是一个很大的挑战，但实际上只需修改winmgmt服务的注册，指向我们的假实现即可。只要该服务随后用CLSID {8BC3F05E-D86B-11D0-A075-00C04FB68820}注册一个COM类，COM启动器将启动服务，并为任何客户端提供我们的假WMI对象的实例。

### 链接解串器

当利用反序列化实现本地权限提升时，我们可以确保我们可以连接到服务器并运行任意代理。但在RCE案例中，我们没有这样的保证。如果WMI客户端启用了默认Windows防火墙规则，那么我们几乎肯定无法连接到委托对象所做的RPC端点。我们还需要被允许通过网络登录到运行WMI客户端的机器，我们的受攻击机器可能无法登录到域，或者企业策略可能会阻止除所有者外的任何人登录到客户端机器。

因此，我们需要一个稍微不同的计划，不是通过暴露一个新的委托对象来主动攻击客户端，而是给它传递一个字节流（反序列化时会执行所需的操作）。在这种情况下，我们需要找到一系列“Gadget”类，这些类链接在一起可执行所需的效果。

#### 分析工具

为此，我编写了一些快速分析工具。.NET支持相当不错的反射API，因此找到基本信息（比如一个类是否可序列化或一个类支持哪个接口）很容易做到。我们还需要一个要检查的程序集列表，最快的方法是使用作为.NET SDK一部分安装的gacutil实用程序（随Visual Studio一起安装）。运行命令`gacutil /l > assemblies.txt`来创建可以加载和处理的程序集名称列表。对于第一遍，我们将寻找可序列化且其中有委托的任何类，这些可能是执行操作时执行任意代码的类。使用我们的程序集列表，我们可以编写一些简单的代码来找到这些类。

在我的系统中，该分析只产生了大约20个类，其中许多类实际上是在不分布在默认安装中的F#库中。但一个类确实引起了我的注意——System.Collections.Generic.ComparisonComparer。您可以在[参考源](https://github.com/Microsoft/referencesource/blob/90b323fe52bec428fe4bd5f007e9ead6b265d553/mscorlib/system/collections/generic/comparer.cs#L157)中找到该实现，但其很简单，全貌如下：

```csharp
internal class ComparisonComparer<T> : IComparer<T>
{
    private readonly Comparison<T> _comparison;

    public ComparisonComparer(Comparison<T> comparison)
    {
        if (comparison == null)
            throw new ArgumentNullException("comparison");
        _comparison = comparison;
    }

    public int Compare(T x, T y)
    {
        return _comparison(x, y);
    }
}
```

这个类包装了一个Comparison委托，使用两个通用参数（相同类型），并返回一个整数，调用委托来实现[IComparer]接口。虽然类是内部的，但其创建通过[Comparer::Create]静态方法暴露。这是链的第一部分，通过这个类和一些序列化代理的推拿，我们可以将[IComparer::Compare]链接到Process::Start，并获得创建的任意进程。现在我们需要链的下一部分，用任意的参数来调用该比较器对象。