           Loaded: loaded (/lib/systemd/system/docker.service; enabled; 
 vendor preset: enabled)
           Active: active (running) since Sun 2017-08-13 07:29:14 UTC; 45s
 ago
             Docs: https://docs.docker.com
         Main PID: 13080 (dockerd)
           CGroup: /system.slice/docker.service
                   ├─13080 /usr/bin/dockerd -H fd://
                   └─13085 docker-containerd -l 
 unix:///var/run/docker/libcontainerd/docker-containerd.sock --
 metrics-interval=0 --start
```
8.  通过运行 hello-world 映像验证 Docker CE 是否安装正确:
```
 $ sudo docker run hello-world 
        Unable to find image 'hello-world:latest' locally 
        latest: Pulling from library/hello-world 
        b04784fba78d: Pull complete 
        Digest:
 sha256:f3b3b28a45160805bb16542c9531888519430e9e6d6ffc09d72261b0d26
 ff74f 
        Status: Downloaded newer image for hello-world:latest 
        Hello from Docker! 
 This message shows that your installation appears to be
 working correctly.
```
```
 To generate this message, Docker took the following steps:
 The Docker client contacted the Docker daemon
 The Docker daemon pulled the hello-world image from the Docker Hub
 The Docker daemon created a new container from that image, 
 which ran the executable that produced the output you are 
 currently reading 
 The Docker daemon streamed that output to the Docker client, 
 which sent it to your terminal
 To try something more ambitious, you can run an Ubuntu 
 container with the following:
 $ docker run -it ubuntu bash 
        Share images, automate workflows, and more with a free Docker ID: 
 https://cloud.docker.com/ 
 For more examples and ideas,
 visit: https://docs.docker.com/engine/userguide/.
```
# Docker 动手
本节解释如何使用 Docker 在容器中运行任何应用。上一节中解释的 docker 安装还安装了 Docker 命令行实用程序或 Docker 客户端。让我们探索一下`docker`命令。使用`docker`命令包括向它传递一系列选项和命令，后跟参数。
语法采用以下形式:
```
$ docker [option] [command] [arguments]
# To see help for individual command
$ docker help [command]  
```
要查看有关 Docker 和 Docker 版本的系统范围信息，请使用以下命令:
```
$ sudo docker info
$ sudo docker version  
```
Docker 有许多子命令来管理由 Docker 守护进程管理的多个资源。以下是 Docker 支持的管理命令列表:
| **管理命令** | **描述** |
| `Config` | Docker 配置管理器 |
| `container` | 管理容器 |
| `image` | 管理映像 |
| `network` | 管理网络 |
| `Node` | 管理 Swarrn 节点 |
| `Plugin` | 管理器插件 |
| `secret` | 经理 docker 机密 |
| `Service` | 经理服务 |
| `Stack` | 经理 Docker 栈 |
| `Swarm` | 管理群 |
| `System` | 经理 Docker |
| `Volume` | 管理卷 |
在下一节中，我们将探索容器和映像资源。
# 使用 Docker 映像
映像是一个轻量级、独立的可执行包，包含运行一个软件所需的一切，包括代码、运行时、库、环境变量和配置文件。Docker 映像用于创建 Docker 容器。映像存储在 Docker 集线器中。
# 列出映像
通过运行 Docker images 子命令，可以列出 Docker 主机中可用的所有映像。默认的 Docker 映像将显示所有顶级映像、它们的存储库和标签以及它们的大小:
```
$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
wordpress           latest              c4260b289fc7        10 days ago         406MB
mysql               latest              c73c7527c03a        2 weeks ago         412MB
hello-world         latest              1815c82652c0        2 months ago        1.84kB 
```
# 获取新映像
Docker 将自动下载 Docker 主机系统中不存在的任何映像。如果未提供标签，则`docker pull`子命令将始终下载该存储库中具有最新标签的映像。如果提供了一个标签，它将使用该标签提取特定映像。
要提取基础映像，请执行以下操作:
```
$ sudo docker pull Ubuntu 
# To pull specific version 
$ sudo docker pull ubuntu:16.04 
```
# 搜索 Docker 映像
Docker 最重要的一个特性就是很多人为了各种各样的目的创建了 Docker 映像。其中许多已经上传到 Docker Hub。通过使用 Docker 搜索子命令，您可以轻松地在 Docker Hub 注册表中搜索 Docker 映像:
```
$ sudo docker search ubuntu
NAME                                           DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
rastasheep/ubuntu-sshd                         Dockerized SSH service, built on top of of...   97                   [OK]
ubuntu-upstart                                 Upstart is an event-based replacement for ...   76        [OK]
ubuntu-debootstrap                             debootstrap --variant=minbase --components...   30        [OK]
nuagebec/ubuntu                                Simple always updated Ubuntu docker images...   22                   [OK]
tutum/ubuntu                                   Simple Ubuntu docker images with SSH access     18  
```
# 删除映像
要删除映像，请运行以下命令:
```
$ sudo docker rmi hello-world
Untagged: hello-world:latest
Untagged: hello-world@sha256:b2ba691d8aac9e5ac3644c0788e3d3823f9e97f757f01d2ddc6eb5458df9d801
Deleted: sha256:05a3bd381fc2470695a35f230afefd7bf978b566253199c4ae5cc96fafa29b37
Deleted: sha256:3a36971a9f14df69f90891bf24dc2b9ed9c2d20959b624eab41bbf126272a023  
```
请参考 Docker 文档了解与 Docker 映像相关的其余命令。
# 使用 Docker 容器
容器是映像的运行时实例。默认情况下，它完全独立于主机环境运行，仅访问主机文件和端口(如果配置了)。
# 创建容器
启动一个容器很简单，因为`docker run`传递了您想要运行的映像名称和在容器中运行它的命令。如果映像不存在于您的本地计算机上，Docker 将尝试从公共映像注册表中获取它:
```
$ sudo docker run --name hello_world ubuntu /bin/echo hello world  
```
在前面的示例中，容器将启动，打印 hello world，然后停止。容器被设计成一旦在其中执行的命令退出就停止。
例如，让我们使用 Ubuntu 中的最新映像运行一个容器。`-i`和`-t`开关的组合为您提供了对容器的交互式外壳访问:
```
$ sudo docker run -it ubuntu
root@a5b3bce6ed1b:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root 
run  sbin  srv  sys  tmp  usr  var  
```
# 列出容器
您可以使用以下命令列出 Docker 主机上运行的所有容器:
```
# To list active containers
$ sudo docker ps
# To list all containers
$ sudo docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
2db72a5a0b99        ubuntu              "/bin/echo hello w..." 
58 seconds ago      Exited (0) 58 seconds ago 
hello_world  
```
# 检查容器日志
您还可以使用以下内容查看正在运行的容器记录的信息:
```
$ sudo docker logs hello_world
hello world  
```
# 启动容器
您可以使用以下方法启动停止的容器:
```
$ sudo docker start hello_world  
```
同样，您可以使用停止、暂停、取消暂停、重新启动、重新启动等命令来操作容器。
# 删除容器
您也可以使用以下命令删除停止的容器:
```
$ sudo docker delete hello_world
# To delete a running container, use -force parameter
$ sudo docker delete --force [container]  
```
有关 Docker 容器的其余命令，请参考 Docker 文档。
# 摘要
在本章中，我们学习了容器及其类型。我们还了解了容器中的组件。我们看了不同的容器运行时工具。我们深入了解了 Docker，安装了它，并进行了动手练习。我们还学习了使用 Docker 管理容器和映像的命令。在下一章中，我们将了解目前可用的不同 COE 工具。