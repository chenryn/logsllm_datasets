title:WI is Almost Enough: Contingent Payment All Over Again
author:Ky Nguyen and
Miguel Ambrona and
Masayuki Abe
WI is Almost Enough: Contingent Payment All Over Again
Ky Nguyen
PI:EMAIL
École Normale Supérieure, CNRS,
PSL University
Miguel Ambrona
PI:EMAIL
NTT Secure Platform Laboratories
Masayuki Abe
PI:EMAIL
NTT Secure Platform Laboratories
ABSTRACT
The problem of fair exchange consists of interchanging goods be-
tween two parties that do not trust each other. Despite known
impossibility results, recent works leverage the block-chain and
zero-knowledge proofs to implement zero-knowledge contingent
payment (zkCP) systems that make fair exchange of digital goods
possible. Implementing these systems in a secure and efficient way
is a big challenge, as evidenced by several unsuccessful attempts
from the literature.
Campanelli et al. (ACM CCS 2017) discovered a vulnerability
on an existing zkCP proposal based on SNARKs (succinct non-
interactive arguments of knowledge) and suggested several repairs.
Fuchsbauer (ACM CCS 2019) found a flaw in the mentioned counter-
measures. In particular, he showed that witness-indistinguishability
(WI) is not sufficient for the zkCP schemes proposed by Campanelli
et al. to be secure.
In this work, we observe that a slightly stronger notion of WI,
that we coin trapdoor subversion WI (tS-WI), rules out Fuchsbauer’s
attack. We formally define security properties for CP systems and
show that, under tS-WI, Campanelli et al.’s proposal indeed satisfies
these properties. Additionally, we explore alternative approaches
to implement ZK (other than SNARKs) and develop a prototype,
using it to demonstrate their potential. Our new ideas result in a
protocol to sell ECDSA signatures with contingent payment that
can be executed in less than 150 milliseconds over a LAN network.
CCS CONCEPTS
• Security and privacy → Cryptography; Public key (asymmet-
ric) techniques; Privacy-preserving protocols; Security protocols.
KEYWORDS
fair exchange; contingent payment; zero-knowledge; witness indis-
tinguishability; garbled circuits
ACM Reference Format:
Ky Nguyen, Miguel Ambrona, and Masayuki Abe. 2020. WI is Almost
Enough: Contingent Payment All Over Again. In Proceedings of the 2020
ACM SIGSAC Conference on Computer and Communications Security (CCS
’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY, USA,
16 pages. https://doi.org/10.1145/3372297.3417888
This work is licensed under a Creative Commons Attribution International 4.0 License.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-7089-9/20/11.
https://doi.org/10.1145/3372297.3417888
1 INTRODUCTION
Fair exchange and smart contracts. With the development of online
commercial activities, the relationship between a buyer and a seller
plays a more and more important role in the design of modern
payment systems, even in decentralized systems such as cryptocur-
rencies. The fair exchange problem relates to a situation where the
buyer wants some piece of valuable information from the seller,
but the buyer is willing to pay only after receiving the desired in-
formation. Being even more vigilant, the buyer will consider doing
business with the seller only after being convinced about the fact
that the seller has the desired information. On the other hand, in a
natural way, the seller wants to be paid as soon as the information
is revealed. The forgoing problem can be applied in many practical
contexts, ranging from payments for solutions to hard problem
to payments for some authorized signature on a contract. Unfor-
tunately, it is well-known that fair-exchange cannot be enforced
without a trusted third party [21].
One way around this requirement is using smart contracts [41]
in cryptocurrencies. The whole cryptocurrency system acts as a
trusted third-party whose reliability stems from the public policies
agreed by the community’s members. This trusted entity is not
bound to a single member anymore, but rather understood in a
decentralized sense. Ethereum [16, 45] and Bitcoin [37] are typical
cryptocurrencies that offer the functionality of smart contracts.
For instance, Ethereum allows a member to write a smart contract
which encodes, in a Turing-complete language, the predicate that
needs to be satisfied for a payment to be made. The buyer can
then post the smart contract making a payment to any seller who
presents a piece of information 𝑠 that meets the condition 𝑓 (𝑠)
embedded in the contract. Such information 𝑠 is presumably not
publicly known and valuable for the buyer. A description of con-
tingent payment system in Ethereum was given in [42]. On the
other hand, Bitcoin, which is by far the most important and popular
cryptocurrency, also supports smart contracts but in a very limited
way. The problem lies in its scripting language that facilitates only
restricted ways to describe conditions of payments. One type of
smart contract that can be made possible by Bitcoin is the payment
made for unlocking a hash value, the so-called hash-locked transac-
tion [44]: the buyer posts a smart contract on the Bitcoin blockchain
stating a payment of 𝑛 bitcoins to anyone who presents a preimage
𝑘 of a public value 𝑦 under SHA. Consequently, a natural question
arises: how to make possible a fair exchange payment system on
Bitcoin, given only its primitive support for hash-locked transac-
tions? Here comes the idea of contingent payment (CP), which was
first studied and made possible with a protocol proposed in [36].
Zero-knowledge contingent payment systems. In a CP system, the
seller will select a key 𝑘 for a symmetric encryption scheme and
encrypt the secret information with 𝑘 to obtain a ciphertext 𝑐,
Session 2E: Smart Contracts and CryptocurrenciesCCS '20, November 9–13, 2020, Virtual Event, USA641as well as a hash value 𝑦 = SHA(𝑘). The seller then sends both
the ciphertext and hash value to the buyer, along with a proof
that the secret information used to compute 𝑐, 𝑦 indeed satisfies
the payment condition. The buyer, upon receiving 𝑐 and 𝑦, will
post a hash-locked transaction for 𝑦 on the Bitcoin blockchain. In
order to get paid, the seller just needs to present 𝑘, which also
enables the buyer to obtain the secret information decrypted from
𝑐. The contingency of the payment, i.e. the payment is made only
when the seller reveals the secret information, is ensured by the
hash-locked smart contract. Reciprocally, the system prevents the
seller from cheating by requiring a proof of correctness for the
information, which is sent together with its ciphertext and the
hash value. The cryptographic proof system used by the seller must
satisfy soundness for the buyer’s own interest. Furthermore, it must
be a zero-knowledge proof system [32] to forbid the buyer to learn
any information from the proof itself. Altogether, by CP systems
we mean zero-knowledge contingent payment (zkCP) systems.
When the notion of zkCP was first introduced in [36], there was
still no generic zero-knowledge proof that was practical enough
for an arbitrary predicate in zkCP. Nonetheless, with a great deal
of research in ZK proof systems, especially the development of suc-
cinct non-interactive arguments (SNARGs) and SNARGs of knowledge
(SNARKs) [12, 23, 28, 29, 33, 38], the situation has changed. SNARKs
are an efficient form of non-interactive ZK proof system [13], which
is set up with a common reference string (crs) accessible to both
prover and verifier [30]. The soundness of SNARKs is totally vi-
olated unless the crs is generated by a trusted third party, as a
maliciously generated crs can be used to prove arbitrary false state-
ments. Indeed, the proof of soundness in [29] uses the fact that the
crs is honestly computed. As a result, SNARKs require some kind
of trusted set up, but “trust” is precisely what zkCP tries to get rid
of. However, another observation comes to light: it is the buyer,
who verifies the proof of the seller, for whom the soundness is
important. Thus, in the initial attempts to make zkCP practical, the
buyer himself is the crs generator. For instance, the implementation
in [14] made use of this idea and gave the first realization of zkCP,
where the payment condition is a solution for a 9×9 Sudoku puzzle.
Zero-knowledge contingent service payment systems. Before long, an
attack against the implementation in [14] was presented in [18]. Fur-
thermore, the authors proposed what they coined zero-knowledge
contingent service payment (zkCSP). At a high-level, zkCSP serves
as a system for payment of service, instead of information as it is
the case for zkCP.
As an example, consider the setting of a contingent payment
system where Alice is a buyer and also a customer of a cloud storage
company, represented by Bob, who is a seller. Alice stores her files
on Bob’s servers and pays for his service each month. On the one
hand, the relation for a usual zkCP system cannot be applied in this
case, because it is the proof that Bob still keeps her files that Alice is
interested in. At the moment Alice receives a valid proof from Bob,
she learns that her files are still safe and may not pay. The problem
is what is being traded is not the files themselves but instead the
storage service that Bob is offering. Therefore, the idea of zkCSP by
Campanelli et al. [18] was to propose a different statement to be
proved in the system so as to solve this problem. More specifically,
Bob will prove to Alice that “Either your files are kept by me and 𝑘
is a SHA preimage of 𝑦 or I neither keep them nor have a preimage
of 𝑦”.
More formally, the authors propose the following relation that
will be proved by the proof system of zkCSP [18]:
𝑅𝑓 ,H(𝑦, (𝑠, 𝑟)) ⇔ (𝑓 (𝑠) ∧ 𝑦 = SHA(𝑟)) ∨ (¬𝑓 (𝑠) ∧ 𝑦 = H(𝑟)) (1)
where H is a cryptographic hash function different from SHA.
A secure zkCSP, where a Server proves to a Client knowledge of
𝑠 such that 𝑓 (𝑠) = 1 for certain efficiently computable predicate 𝑓
and will be paid for it, should satisfy the following properties [18].
P1 If the (malicious) Server is paid, then the Server does know a
satisfying value for 𝑓 .
P2 A (malicious) Client can learn no information without paying.
P3 A (malicious) Client who pays will learn that the Server knows
a satisfying value for 𝑓 , but nothing more.
Fuchsbauer showed that using a subversion witness indistin-
guishability1 (S-WI) argument system for the relation (1) to imple-
ment contingent service payment is not sufficient [27]. He proposed
a method to modify any S-WI scheme preserving the S-WI prop-
erty but making it unsuitable for contingent service payment. In
a nutshell, his idea is to modify the prover algorithm so that not
only does it output the proof, but it also leaks the value 𝑓 (𝑠) (and
thus, it cannot be applied for contingent service payment2). This
modification does not compromise S-WI if SHA and H are claw-
free, because an adversary that wins the S-WI game by submitting
witnesses (𝑠0, 𝑟0) and (𝑠1, 𝑟1) such that 𝑓 (𝑠0) ≠ 𝑓 (𝑠1) can be trans-
formed into an adversary that breaks the claw-freeness of SHA and
H. (Note that if both witnesses are valid, SHA(𝑟𝑏) = H(𝑟1−𝑏) for
either 𝑏 = 0 or 𝑏 = 1.)
The proof in [27] claimed that an S-WI argument system for
zkCSP is not enough, but it still opens up opportunities for other
directions. One main challenge is now determining what property
is sufficient for an argument system to successfully realize zkCSP.
A countermeasure against attacks on pay-to-sudoku. Back to the
attack in [18], it in fact demonstrated that allowing the buyer to
generate the crs can lead to a breach of the ZK property. More
specifically, a malicious buyer can generate a crs that still produces
a valid proof for a sudoku solution, but will leak whether a cell
(𝑖, 𝑗) contains a number 𝑚 or not in that solution, where 𝑖, 𝑗, 𝑚 are
freely chosen bythe buyer. This whole situation raises the problem
of subversion security, in particular the property of subversion ZK
(S-ZK), as coined in [7, 26].
In [26], Fuschbauer studied extensively the subversion resilience
of most important zkSNARKs in the literature, including the one
from [12] that was used in the implementation of [14]. He showed
that all these schemes will satisfy S-ZK if before using the crs, the
prover does a consistency check w.r.t its elements. Moreover, he also
showed that once the crs well-formedness is ensured, S-WI will
hold unconditionally. Regarding the notion of WI, first introduced
in [25], it ensures that a proof will not leak the information about
which witness was used to craft it.
1The notion of S-WI ensures that the system is WI even if the verifier chooses the crs.
2Observe that all the verifier (the buyer/client) wants to learn is 𝑓 (𝑠) and in these
conditions they can derive it from the proof, before the payment is done.
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA642The authors of [18] proposed checking the consistency of the crs