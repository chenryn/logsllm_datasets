willowntheserverprocess.
Although initdb willattempt to createthe respectivedatadirectory, chancesarethat it won’t
havethe permission to do so. Thus it is a good ideato create the data directorybefore running
initdbandtohandovertheownershipofittothedatabasesuperuser.
D.55 initlocation
Name
initlocation—CreateasecondaryPostgresdatabasestoragearea
initlocationdirectory
370 APPENDIXD. REFERENCEMANUAL
Inputs
directory WhereinyourUnixfilesystemdoyouwantalternatedatabasestogo?
Outputs
initlocationwillcreatedirectoriesinthespecifiedplace.
Description
initlocation creates a new Postgres secondary database storage area. See the discussion under
CREATE DATABASE about how to manage and use secondary storage areas. If the argument
does not contain a slash and is not valid as a path, it is assumed to be an environment variable,
whichisreferenced. Seetheexamplesattheend.
Inordertousethiscommand youmustbeloggedin (using’su’,forexample)asthedatabase
superuser.
Usage
Tocreateadatabaseinanalternatelocation,usinganenvironmentvariable:
$ export PGDATA2=/opt/postgres/data
Startandstoppostmastersoitseesthe$PGDATA2environmentvariable. Thesystemmustbe
configuredsothepostmastersees$PGDATA2everytimeitstarts.
$ initlocation PGDATA2
$ createdb -D ’PGDATA2’ ’testdb’
Alternatively,ifyouallowabsolutepathsyoucouldwrite:
$ initlocation /opt/postgres/data
$ createdb -D ’/opt/postgres/data/testdb’ testdb
D.56 INSERT
Name
INSERT—Insertsnewrowsintoatable
INSERTINTOtable[(column[,...] ) ]
{VALUES(expression[,...] ) |SELECTquery}
D.56. INSERT 371
Inputs
table Thenameofanexistingtable.
column Thenameofacolumnintable.
expression Avalidexpressionorvaluetoassigntocolumn.
query Avalidquery. RefertotheSELECTstatementforafurtherdescriptionofvalidarguments.
Outputs
INSERToid1 Message returned if only one row was inserted. oid is the numeric OID of the
insertedrow.
INSERT0# Messagereturnedifmorethanonerowswereinserted. #isthenumberofrows
inserted.
Description
INSERTallowsonetoinsertnewrowsintoaclassortable. Onecaninsertasinglerowatatime
orseveralrowsasaresultofaquery. Thecolumnsinthetargetlistmaybelistedinanyorder.
Eachcolumnnotpresentinthetargetlistwillbeinsertedusingadefaultvalue,eitheradeclared
DEFAULTvalueorNULL.PostgreswillrejectthenewcolumnifaNULLisinsertedintoacolumn
declaredNOTNULL.
Iftheexpressionforeachcolumnisnotof thecorrectdatatype,automatictypecoercionwill
beattempted.
Youmusthaveinsertprivilegetoatableinordertoappendtoit,aswellasselectprivilegeon
anytablespecifiedinaWHEREclause.
Usage
Insertasinglerowintotablefilms:
INSERT INTO films
VALUES (’UA502’,’Bananas’,105,’1971-07-13’,’Comedy’,INTERVAL ’82 minute’);
Inthissecondexamplethecolumndate_prodisomittedandthereforeitwillhavethedefaultvalue
ofNULL:
INSERT INTO films (code, title, did, date_prod, kind)
VALUES (’T_601’, ’Yojimbo’, 106, DATE ’1961-06-16’, ’Drama’);
Insertasinglerowintotabledistributors;notethatonlycolumnnameisspecified,sotheomitted
columndidwillbeassigneditsdefaultvalue:
372 APPENDIXD. REFERENCEMANUAL
INSERT INTO distributors (name)
VALUES (’British Lion’);
Insertseveralrowsintotablefilmsfromtabletmp:
INSERT INTO films
SELECT * FROM tmp;
Insertintoarrays(refertothePostgreSQLUser’sGuideforfurtherinformationaboutarrays):
-- Create an empty 3x3 gameboard for noughts-and-crosses
-- (all of these queries create the same board attribute)
INSERT INTO tictactoe (game, board[1:3][1:3])
VALUES (1,’{{"","",""},{},{"",""}}’);
INSERT INTO tictactoe (game, board[3][3])
VALUES (2,’{}’);
INSERT INTO tictactoe (game, board)
VALUES (3,’{{,,},{,,},{,,}}’);
Compatibility
SQL92
INSERT isfullycompatible withSQL92. Possiblelimitationsin featuresof thequery clauseare
documentedforSELECT.
D.57 ipcclean
Name
ipcclean—Cleanupsharedmemoryandsemaphoresfromabortedbackends
ipcclean
Inputs
None.
Outputs
None.
D.58. LISTEN 373
Description
ipcclean cleans up shared memory and semaphore space from aborted backends by deleting all
instances owned by user postgres. Only the DBA should execute this program as it can cause
bizarrebehavior(i.e.,crashes)ifrunduringmulti-userexecution.Thisprogramshouldbeexecuted
ifmessagessuchassemget: Nospaceleftondeviceareencounteredwhenstartingupthepostmaster
orthebackendserver.
Ifthiscommandisexecutedwhilepostmasterisrunning,thesharedmemoryandsemaphores
allocated by the postmaster will be deleted. This will result in a general failure of the backend
serversstartedbythatpostmaster.
Thisscriptisahack,butinthemanyyearssinceitwaswritten, noonehascomeupwithan
equallyeffectiveandportablesolution. Suggestionsarewelcome.
The script makes assumption about the format of output of the ipcs utility which may not be
trueacrossdifferentoperatingsystems. Therefore,itmaynotworkonyourparticularOS.
D.58 LISTEN
Name
LISTEN—Listenforaresponseonanotifycondition
LISTENname
Inputs
name Nameofnotifycondition.
Outputs
LISTEN Messagereturneduponsuccessfulcompletionofregistration.
NOTICEAsync_Listen:Wearealreadylisteningonname If this backend is already regis-
teredforthatnotifycondition.
Description
LISTENregistersthecurrentPostgresbackendasalisteneronthenotifyconditionname.
Whenever the command NOTIFY name is invoked, either by this backend or another one
connectedto the samedatabase,allthebackendscurrentlylisteningon that notify condition are
notified, and each will in turn notify its connected frontend application. See the discussion of
NOTIFYformoreinformation.
A backend can be unregistered for a given notify condition with the UNLISTEN command.
Also,abackend’slistenregistrationsareautomaticallyclearedwhenthebackendprocessexits.
374 APPENDIXD. REFERENCEMANUAL
ThemethodafrontendapplicationmustusetodetectnotifyeventsdependsonwhichPostgres
application programming interface it uses. With the basic libpq library, the application issues
LISTENasanordinarySQLcommand,andthenmustperiodicallycalltheroutinePQnotifiesto
findoutwhetheranynotifyeventshavebeenreceived. Otherinterfacessuchaslibpgtclprovide
higher-levelmethodsforhandlingnotifyevents;indeed,withlibpgtcltheapplicationprogrammer
should not even issue LISTEN or UNLISTEN directly. See the documentation for the library
youareusingformoredetails.
NOTIFY containsamoreextensivediscussionoftheuseof LISTENandNOTIFY.
Notes
namecanbeanystringvalidasaname;itneednotcorrespondtothenameofanyactualtable. If
notifynameisenclosedindouble-quotes,itneednotevenbeasyntacticallyvalidname,butcanbe
anystringupto31characterslong.
Insomepreviousreleasesof Postgres,namehadto beenclosedin double-quoteswhenitdid
notcorrespondtoanyexistingtablename,evenifsyntacticallyvalidasaname. Thatisnolonger
required.
Usage
Configureandexecutealisten/notifysequencefrompsql:
LISTEN virtual;
NOTIFY virtual;
Asynchronous NOTIFY ’virtual’ from backend with pid ’8448’ received.
Compatibility
SQL92
ThereisnoLISTENinSQL92.
D.59 LOAD
Name
LOAD—Dynamicallyloadsanobjectfile
LOAD’filename’
Inputs
filename Objectfilefordynamicloading.
D.59. LOAD 375
Outputs
LOAD Messagereturnedonsuccessfulcompletion.
ERROR: LOAD:couldnotopenfile’filename’ Message returned if the specified file is not
found. The file must be visibleto the Postgres backend, with the appropriatefull path name
specified,toavoidthismessage.
Description
Loads an object (or ".o") file into the Postgres backend address space. Once a file is loaded, all
functions in thatfile can be accessed. Thisfunction isusedin supportof user-definedtypesand
functions.
IfafileisnotloadedusingLOAD,thefilewillbeloadedautomaticallythefirsttimethefunction
is called by Postgres. LOAD can also be used to reload an object file if it has been edited and
recompiled. OnlyobjectscreatedfromClanguagefilesaresupportedatthistime.
Notes
Functions in loaded object files should not call functions in other object files loaded through the
LOAD command. For example, all functions in file A should call each other, functions in the
standard or math libraries, or in Postgres itself. They should not call functions defined in a
differentloadedfileB.ThisisbecauseifBisreloaded,thePostgresloaderisnotabletorelocate
the calls from the functions in A into the new addressspace of B. If B is not reloaded, however,
therewillnotbeaproblem.
Objectfilesmustbecompiledtocontainpositionindependentcode. Forexample,onDECsta-
tionsyoumustuse/bin/ccwiththe-G0optionwhencompilingobjectfilestobeloaded.
Note that if you areportingPostgresto anew platform, LOAD will haveto work inorder to
supportADTs.
Usage
Loadthefile/usr/postgres/demo/circle.o:
LOAD ’/usr/postgres/demo/circle.o’
Compatibility
SQL92
ThereisnoLOADinSQL92.
376 APPENDIXD. REFERENCEMANUAL
D.60 LOCK
Name
LOCK—Explicitlylockatableinsideatransaction
LOCK[TABLE]name
LOCK[TABLE]nameIN[ROW|ACCESS]{SHARE|EXCLUSIVE}MODE
LOCK[TABLE]nameINSHAREROWEXCLUSIVEMODE
Inputs
name Thenameofanexistingtabletolock.
ACCESSSHAREMODE Note: This lock mode is acquired automatically over tables being
queried.
Thisistheleastrestrictivelock mode. ItconflictsonlywithACCESS EXCLUSIVE mode.
It is used to protect a table from being modified by concurrent ALTER TABLE, DROP
TABLEandVACUUMcommands.
ROWSHARE MODE Note: AutomaticallyacquiredbySELECT...FOR UPDATE.Whileitis
asharedlock,maybeupgradedlatertoaROWEXCLUSIVElock.
ConflictswithEXCLUSIVEandACCESSEXCLUSIVElockmodes.
ROWEXCLUSIVE MODE Note: Automatically acquired by UPDATE, DELETE, and IN-
SERTstatements.
ConflictswithSHARE,SHAREROWEXCLUSIVE,EXCLUSIVEandACCESSEXCLUSIVE
modes.
SHARE MODE Note: Automatically acquired by CREATE INDEX. Share-locks the entire
table.
ConflictswithROWEXCLUSIVE, SHAREROWEXCLUSIVE, EXCLUSIVE andACCESS
EXCLUSIVEmodes. Thismodeprotectsatableagainstconcurrentupdates.
SHARE ROWEXCLUSIVE MODE Note: ThisislikeEXCLUSIVEMODE,butallowsSHARE
ROWlocksbyothers.
Conflicts with ROW EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE and
ACCESSEXCLUSIVEmodes.
EXCLUSIVE MODE Note: ThismodeisyetmorerestrictivethanSHAREROWEXCLUSIVE.
ItblocksallconcurrentROWSHARE/SELECT...FORUPDATEqueries.
Conflicts with ROW SHARE, ROW EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE,
EXCLUSIVEandACCESSEXCLUSIVEmodes.
D.60. LOCK 377
ACCESSEXCLUSIVEMODE Note: AutomaticallyacquiredbyALTERTABLE,DROPTA-
BLE,VACUUMstatements. Thisisthemostrestrictivelockmodewhichconflictswithall
otherlockmodesandprotectsalockedtablefromanyconcurrentoperations.
Note: ThislockmodeisalsoacquiredbyanunqualifiedLOCKTABLE(i.e.,thecommand
withoutanexplicitlockmodeoption).
Outputs
LOCKTABLE Thelockwassuccessfullyapplied.
ERRORname:Tabledoesnotexist. Messagereturnedifnamedoesnotexist.
Description
LOCK TABLE controls concurrent accessto a table for the duration of a transaction. Postgres
alwaysusestheleastrestrictivelockmodewheneverpossible. LOCKTABLEprovidesforcases
whenyoumightneedmorerestrictivelocking.
RDBMSlockingusesthefollowingterminology:
EXCLUSIVE Exclusivelockthatpreventsotherlocksfrombeinggranted.
SHARE Allowsotherstosharelock. PreventsEXCLUSIVElocks.
ACCESS Lockstableschema.
ROW Locksindividualrows.
Note: IfEXCLUSIVEorSHAREarenotspecified,EXCLUSIVEisassumed. Locksexistforthe
durationofthetransaction.
Forexample,anapplicationrunsatransactionatREADCOMMITTEDisolationlevelandneeds
toensuretheexistenceof datainatable for theduration of thetransaction. To achievethisyou
coulduseSHARElockmodeoverthetablebeforequerying. Thiswillprotectdatafromconcurrent
changesand provide any further read operations over the table with data in their actual current
state,becauseSHARE lockmodeconflictswithanyROWEXCLUSIVE oneacquiredbywriters,
and your LOCK TABLE name IN SHARE MODE statement will wait until any concurrent
writeoperationscommitorrollback. Note: Toreaddataintheirrealcurrentstatewhenrunninga
transactionattheSERIALIZABLEisolationlevelyouhavetoexecuteaLOCKTABLEstatement
beforeexecutinganyDMLstatement,whenthetransactiondefineswhatconcurrentchangeswill
bevisibletoitself.
Inadditiontotherequirementsabove,if atransactionisgoingtochangedatain atable,then
SHARE ROW EXCLUSIVE lock mode should be acquired to prevent deadlock conditions when
two concurrent transactions attempt to lock the table in SHARE mode and then try to change
378 APPENDIXD. REFERENCEMANUAL
data in this table, both (implicitly) acquiring ROW EXCLUSIVE lock mode that conflicts with a
concurrentSHARElock.
Tocontinuewiththedeadlock(whentwotransactionwaitforoneanother)issueraisedabove,
youshouldfollowtwogeneralrulestopreventdeadlockconditions:
• Transactionshavetoacquirelocksonthesameobjectsinthesameorder.
For example, if one application updates row R1 and than updates row R2 (in the same
transaction)thenthesecondapplicationshouldn’tupdaterowR2ifit’sgoingtoupdaterow
R1later(inasingletransaction). Instead,itshouldupdaterowsR1andR2inthesameorder
asthefirstapplication.
• Transactionsshouldacquiretwoconflictinglockmodesonlyifoneofthemisself-conflicting
(i.e.,maybeheldbyonetransactionattimeonly). Ifmultiplelockmodesareinvolved,then
transactionsshouldalwaysacquirethemostrestrictivemodefirst.
An example for this rule was given previously when discussing the use of SHARE ROW
EXCLUSIVEmoderatherthanSHAREmode.
Note: Postgresdoesdetectdeadlocksandwillrollbackatleastonewaitingtransactiontoresolve
thedeadlock.
Notes
LOCKisaPostgreslanguageextension.
ExceptforACCESSSHARE/EXCLUSIVE lockmodes,allotherPostgreslockmodesandthe
LOCKTABLEsyntaxarecompatiblewiththosepresentinOracle.
LOCKworksonlyinsidetransactions.
Usage
IllustrateaSHARElockon aprimarykeytablewhengoingtoperforminsertsintoaforeignkey
table:
BEGIN WORK;
LOCK TABLE films IN SHARE MODE;
SELECT id
FROM films
WHERE name = ’Star Wars: Episode I - The Phantom Menace’;
-- Do ROLLBACK if record was not returned
INSERT INTO films_user_comments
VALUES (_id_, ’GREAT! I was waiting for it for so long!’);
COMMIT WORK;
D.61. MOVE 379
Take a SHARE ROW EXCLUSIVE lock on a primary key table when going to perform a delete
operation:
BEGIN WORK; LOCK TABLE films IN SHARE ROW EXCLUSIVE MODE;
DELETE FROM films_user_comments
WHERE id IN (SELECT id
FROM films
WHERE rating < 5);
DELETE FROM films
WHERE rating < 5;
COMMIT WORK;
Compatibility
SQL92
There is no LOCK TABLE in SQL92, which instead uses SET TRANSACTION to specify
concurrencylevelsontransactions. Wesupportthattoo;seeSET fordetails.
D.61 MOVE