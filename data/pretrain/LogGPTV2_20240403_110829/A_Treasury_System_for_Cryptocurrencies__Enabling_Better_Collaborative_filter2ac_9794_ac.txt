typically the underlying blockchain transaction validation rules
do not take into account of the content stored in the payload of
a transaction. Therefore, additional checks are needed for the
treasury speciﬁc transactions. More speciﬁcally, we verify the
payload data of those transactions with additional algorithms.
In particular, a coin must be frozen during the entire treasury
period in order to claim its stake. This can be done by,
for example, adding extra constrain in spending condition,
saying that the coin cannot be spent until the certain block
height, which is no earlier than the end of the treasury period.
Furthermore, the stake of one coin can only be claimed once
during each treasury period.
i
Decision making. During the decision making, the voting
committee members, the voters, and the experts follow the
protocol description in Sec. IV, below. It covers the key
generation stage, the ballot casting stage, and the tally stage.
In terms of security, as shown before, with overwhelming
probability, the majority of the committee members are honest,
which can guarantee voter privacy and protocol termination.
In an unlikely extreme case, where all the voting committee
members are corrupted, our voting scheme can still ensure the
integrity of the voting result. If a cheating voting committee
member is detected, she will lose all her deposit.
For each project,
the voters/experts need to submit an
6
independent ballot. The voter can either delegate his voting
power to some expert or directly express his opinion on the
project; whereas, the expert shall only vote directly on the
project. In our prototype, we adopt the “YES-NO-ABSTAIN”
type of voting scheme. More speciﬁcally, after the voting, the
project proposals are scored based on the number of yes votes
minus the number of no votes. Proposals that got at least 10%
(of all votes) of the positive difference are shortlisted, and
all the remaining project proposals are discarded. Shortlisted
proposals are ranked according to their score, and the top
ranked proposals are funded in turns until the treasury fund
is exhausted. Each of the voting committee members will then
sign the treasury decision and treasury transactions, and those
transactions are valid if it is signed by more than t-out-of-k
voting committee members.
Post-voting execution. Certain proportion (e.g. 20%) of the
treasury fund will be used to reward the voting committee
members, voters and experts. The voting committee members
C(cid:96) ∈ C will receive a ﬁx amount of reward, denoted as ζ1.
Note that as the voting committee members are required to
perform more actions in the next treasury period, their reward
will only be transferred after the completion of those actions
at the end of pre-voting epoch in the next treasury period.
The voter Vi ∈ V will receive reward that is proportional
to his/her deposited amount, denoted as ζ2 · sti, where sti is
the amount of the stake claimed by Vi. The expert Ej ∈ E
will receive reward that is proportional to his/her received
delegations, denoted as ζ3 · Dj, where Dj is the amount
of delegations that Ej has received. Meanwhile, if a voting
committee member cheats or an expert fails to submit a valid
ballot, he/she will lose the deposited coin as a punishment. In
addition, the voting committee members will jointly generate
and commit to a random seed for the next treasury period,
in a protocol depicted as follows. To generate and commit a
random seed, voting committee members C(cid:96), (cid:96) ∈ [k] needs to
invoke a coin ﬂipping protocol. However, the cost of such a
protocol is very small when they already jointly setup a public
key pk. More speciﬁcally, each voting committee members
C(cid:96), (cid:96) ∈ [k] will pick a random group element R(cid:96) ← G and
post the encryption of it, C(cid:96) ← Encpk(R(cid:96)) to the blockchain.
(cid:96)=1 C(cid:96) is deﬁned as the committed/encrypted seed for
the next treasury period. Note that C can be jointly decrypted
as far as majority of the voting committee members are honest,
and the malicious voting committee members cannot inﬂuence
the distribution of the seed.
C :=(cid:81)k
Partitionary budgeting. The main goal of treasury is de-
centralized community-driven self-sustainable cryptocurrency
development through projects funding and adoption. The naive
approach is to select projects for funding by ranking all
submitted proposals according to the number of votes they
get and take a number of projects whose total budget does
not exceed the treasury budget. However, there exists a risk
of underfunding vital areas due to numerous project submis-
sions and inﬂated discussions on some other areas. We can
categorize proposals and allocate a certain amount of treasury
funding for each category to independently guarantee funds to
every vital area.
Analysis of existing blockchain development funding [28]
reveal marketing, PR, integration, software development and
VOTE
The ideal functionality F t,k,n,m
The functionality F t,k,n,m
E := {E1, . . . , Em}, and the adversary S. It is parameterized by a delegation calculation algorithm DelCal (described in Fig. 4) and a tally
algorithm TallyAlg (described in Fig. 5) and variables φ1, φ2, τ, J1, J2, J3, T1 and T2. Denote Ccor and Chonest as the set of corrupted and
honest voting committees, respectively.
Initially, φ1 = ∅, φ2 = ∅, τ = ∅, J1 = ∅, J2 = ∅, and J3 = ∅.
Preparation:
interacts with a set of voting committees C := {C1, . . . , Ck}, a set of voters V := {V1, . . . , Vn}, a set of experts
VOTE
Upon receiving (INIT, sid) from the voting committee Ci ∈ C, set J1 := J1 ∪ {Ci}, and send a notiﬁcation message
(INITNOTIFY, sid, Ci) to the adversary S.
Upon receiving (VOTE, sid, vi) from the expert Ei ∈ E, if |J1| < t, ignore the request. Otherwise, record (Ei, VOTE, vi) in φ1; send
a notiﬁcation message (VOTENOTIFY, sid, Ei) to the adversary S. If |Ccor| ≥ t, then additionally send a message
(LEAK, sid, Ei, VOTE, vi) to the adversary S.
Upon receiving (CAST, sid, vj , αj ) from the voter Vj ∈ V, if |J1| < t, ignore the request. Otherwise, record (Vj , CAST, vj , αj ) in
φ2; send a notiﬁcation message (CASTNOTIFY, sid, Vj , αj ) to the adversary S. If |Ccor| ≥ t, then additionally send a message
(LEAK, sid, Vj , CAST, vj ) to the adversary S.
Upon receiving (DELCAL, sid) from the voting committee Ci ∈ C, set J2 := J2 ∪ {Ci}, and send a notiﬁcation message
(DELCALNOTIFY, sid, Ci) to the adversary S.
If |J2 ∪ Chonest| + |Ccor| ≥ t, send (LEAKDEL, sid, DelCal(E, φ2)) to S.
If |J2| ≥ t, set δ ← DelCal(E, φ2).
Upon receiving (TALLY, sid) from the voting committee Ci ∈ C, set J3 := J3 ∪ {Ci}, and send a notiﬁcation message
(TALLYNOTIFY, sid, Ci) to the adversary S.
If |J3 ∪ Chonest| + |Ccor| ≥ t, send (LEAKTALLY, sid, TallyAlg(V, E, φ1, φ2, δ)) to S.
If |J3| ≥ t, set τ ← TallyAlg(V, E, φ1, φ2, δ).
Upon receiving (READTALLY, sid) from any party, if δ = ∅ ∧ τ = ∅ ignore the request. Otherwise, return
(READTALLYRETURN, sid, (δ, τ )) to the requester.
Voting/Delegation:
•
•
•
Tally:
•
•
•
•
•
•
•
Fig. 3: The ideal functionality F t,k,n,m
VOTE
organisational costs are most prominent categories. Consider-
ing this and general business development rules, we propose
to include (at least) the following categories.
not ﬁnal, and treasury deployment in cryptocurrencies will
take into account speciﬁc of a given solution based on its
development effort.
•
•
•
• Marketing. This covers activities devoted to cryp-
tocurrency market share growth; market analysis, ad-
vertisement, conferences, etc. The vastness of the area
demands this category should take the biggest percent
of the funding budget.
Technology adoption. This includes costs needed for
wider spreading of cryptocurrency; integration with
various platforms, websites and applications, deploy-
ment of ATMs etc.
Development and security. This includes costs allo-
cated for funding core and non-core development, se-
curity incident response, patch management, running
testnets, as well as similar critical technology areas.
Support. This category includes user support, docu-
mentation, maintaining of web-infrastructure needed
for the community and other similar areas.
• Organization and management. This category in-
cludes costs on team coordination and management,
legal support, etc.
• General. This includes projects not covered by the
earlier categories, e.g., research on prospective tech-
nologies for cryptocurrency application, external se-
curity audit, collaboration with other communities,
charity and so on.
It should be noted that
the given list of categories is
7
Nevertheless, having such an approach guarantees that
critical areas for cryptocurrency routine operation, support and
development will always get funding via treasury, which in
turn, guarantees cryptocurrency self-sustainability.
IV. THE PROPOSED VOTING SCHEME
A. Security modeling
The entities involved in the voting schemes are a set of
voting committee members C := {C1, . . . , Ck}, a set of voters
V := {V1, . . . , Vn}, and a set of experts E := {E1, . . . , Em}.
We consider the security of our treasury voting scheme in the
UC framework with static corruption. The security is based on
the indistinguishability between real/hybrid world executions
and ideal world executions, i.e., for any PPT real/hybrid world
adversary A we will construct an ideal world PPT simulator S
that can present an indistinguishable view to the environment
Z operating the protocol.
The Ideal world execution. In the ideal world, the voting
committee C, the voters V, and the experts E only communicate
to an ideal functionality F t,k,m,n
during the execution. The
ideal functionality F t,k,m,n
accepts a number of commands
from C,V,E. At the same time it informs the adversary of
certain actions that take place and also is inﬂuenced by the
adversary to elicit certain actions. The ideal functionality
F t,k,m,n
is depicted in Fig. 3, and it consists of three phases:
Preparation, Voting/Delegation, and Tally.
VOTE
VOTE
VOTE
Preparation phase. During the preparation phase, the vot-
ing committees Ci ∈ C need to initiate the voting process by
sending (INIT, sid) to the ideal functionality F t,k,m,n
. The
voting will not start until all the committees have participated
the preparation phase.
VOTE
Voting/Delegation phase. During the voting/delegation
phase, the expert Ei ∈ E can vote for his choice vi by sending
(VOTE, sid, vi) to the ideal functionality F t,k,m,n
. Note that
the voting choice vi is leaked only when majority of the voting
committees are corrupted. The voter Vj ∈ V, who owns αj
stake, can either vote directly for his choice vj or delegate
his voting power to an expert Ei ∈ E. Similarly, when all the
voting committees are corrupted, F t,k,m,n
leaks the voters’
ballots to the adversary S.
VOTE
VOTE
VOTE
Tally phase. During tally phase,
the voting committee
Ci ∈ C sends (DELCAL, sid) to the ideal functionality F t,k,m,n
to calculate and reveal the delegations received by each expert.
After that, they then send (TALLY, sid) to the ideal func-
tionality F t,k,m,n
to open the tally. Once all the committees
have opened the tally, any party can read the tally by sending
(READTALLY, sid) to F t,k,m,n
. Note that due to the nature
of threshold cryptography, the adversary S can see the voting
tally result before all the honest parties. Hence, the adversary
can refuse to open the tally depending on the tally result. The
tally algorithm TallyAlg is described in Fig. 5.
VOTE
VOTE
The real/hybrid world execution. In the real/hybrid world,
the treasury voting scheme utilises a number of support-
ing components. Those supporting components are modelled
as ideal functionalities. First of all, we need a blockchain
functionality FLEDGER [9] to model the underlying blockchain
infrastructure that the treasury system is built on. We then
use the key generation functionality F t,k
DKG [40] for threshold
key generation of the underlying public key crypto system.
Finally, a global clock functionality GCLOCK [9] is adopted to
model the synchronised network environment. Let EXECΠ,A,Z
denote the output of the environment Z when interacting with
parties running the protocol Π and real-world adversary A.
Let EXECF ,S,Z denote output of Z when running protocol
φ interacting with the ideal functionality F and the ideal
adversary S.
Deﬁnition 1: We say that a protocol Π UC-realizes F if
for any adversary A there exists an adversary S such that for
any environment Z that obeys the rules of interaction for UC
security we have EXECΠ,A,Z ≈ EXECF ,S,Z.
B. The voting scheme
i
Let m be the number of experts and n be the number of
∈ {0, 1}m be the unit vector where its i-th
voters. Let e(m)
coordinate is 1 and the rest coordinates are 0. We also abuse
the notation to denote e((cid:96))
as an (cid:96)-vector contains all 0’s. We
0
i ) to denote coordinate-wise encryption of e((cid:96))
use Encpk(e((cid:96))
,
i.e. Encpk(e((cid:96))
i,1), . . . , Encpk(e(1)
i,1, . . . , e((cid:96))
i,(cid:96) ).
In our scheme, we encode the vote
into a (unit) vector. Let encodeE and encodeV be the vote
encoding algorithm for the expert and voter, respectively. For
an expert, upon receiving input x ∈ {YES, NO, ABSTAIN},
i,(cid:96) ), where e((cid:96))
1) Vote encoding:
i = (e((cid:96))
i
8
Algorithm DelCal
Input: a set of the expert labels E, and a set of ballots φ2
Output: the delegation result δ
Init:
•
For i ∈ [1, m], create and initiate Di = 0.
For each ballot B ∈ φ2: parse B in form of
(Vj , CAST, vj , αj ); if vj = (Delegate, Ei) for some
Ei ∈ E, then Di := Di + αj.
Return δ := {(Ei, Di)}i∈[m].
Delegation interpretation:
•
Output:
•
Fig. 4: The delegation calculation algorithm DelCal
the encodeE returns 100, 010, 001 for YES, NO, ABSTAIN,
respectively. For a voter, the input is y ∈ {E1, . . . , Em} ∪
{YES, NO, ABSTAIN}. When y = Ei, i ∈ [m], it means that
the voter delegate his/her voting power to the expert Ei. When
y ∈ {YES, NO, ABSTAIN}, it means that the voter directly vote
on the project. The encodeV returns a unit vector of length
(m + 3), denoted as v, such that v = e(m+3)
if y = Ei, for
i ∈ [m]; and v is set to e(m+3)
if y is
YES, NO, ABSTAIN, respectively.
m+2 , and e(m+3)
m+1 , e(m+3)
m+3
i
Since sending data to the blockchain consumes coins, we
implicitly assume all the experts E and voters V have spare
coins to pay the transaction fees that is incurred during the
protocol execution. More speciﬁcally, we let each party prepare
{Ini}(cid:96)1
i=1,{Outj}(cid:96)2
(cid:96)1(cid:88)
j=1 s.t.
Ini.Value ≥ (cid:96)2(cid:88)
Outj.Value .
i=1
j=1
η
η
η
η
η
η
}(cid:96)1
η=1,{Out(Ej )
Denote the corresponding coins owned by a voter Vi ∈ V,
an expert Ej ∈ E, and a voting committee member Ct ∈ C
}(cid:96)2
}(cid:96)2
η=1), ({In(Ej )