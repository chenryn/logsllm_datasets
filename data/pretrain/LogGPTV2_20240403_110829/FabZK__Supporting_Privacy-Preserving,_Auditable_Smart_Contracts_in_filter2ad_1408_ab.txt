to verify Equation (3), it indicates incorrect txm.
Equation (3) shows that verifying the Proof of Correctness
can be achieved with only the data in the current transaction
txm; so does Proof of Balance. This is an important feature
that we will leverage in the two-step validation in Section
IV.
Proof of Assets ensures that a spending organization has
enough assets to execute the transaction. In a tabular struc-
tured ledger, a column represents all assets an organization
has received or spent [20]. Proof of Assets veriﬁes that the
sum of all committed values in a column, including that of
the current transaction, is non-negative.
We let the prover generate a range proof for the spending
organization’s remaining balance:
(cid:2)m
RP = ZK(uRP, rRP : ComRP ∧ l0 (cid:2) u (cid:2) lp),
(4)
where ZK(uRP, rRP : ComRP) is a zero-knowledge proof of
uRP such that ComRP = guRPhrRP, g and h are known to the
veriﬁer, uRP =
i=0 ui, rRP is a random number different
(cid:2)m
from the r in Equation (1), l0 and lp are two bound values.
We use the inner-product range proof from BulletProofs
i=0 ui (cid:3)
[31] to prove that an account’s remaining assets
0, in encrypted form. The details are described in appendix.
1Our approach can be adapted to more complex scenario, such as multiple
senders, which will be addressed in our future work.
545
Proof of Amount guarantees that the transaction amount is
within a certain range. In a scenario with a single spending
and a single receiving organization, the prover generates an
inner-product range proof to the transaction amount of the
receiving organization urecv ∈ [0, 2t), with a random number
rrecv.
In each transaction,
the prover also needs to gener-
ate indistinguishable cryptographic primitives for all non-
transactional organizations, in order to conceal the transac-
tion graph. These primitives are a Pedersen commitment of
0 with a random number ri, an audit token, a range proof to
0 with another random number rRPi, and a disjunctive proof
(discussed later in this section).
Besides the four aforementioned NIZK proofs, each or-
ganization needs to further check whether these proofs are
consistent with each other, i.e., the same parameters are used
in different proofs for the same organization. To achieve this
goal, we introduce Proof of Consistency.
Proof of Consistency ensures that 1) for a spending or-
ganization,
the generated range proof is consistent with
its remaining assets
instead of some arbitrary
uarb ∈ [0, 2t), 2) for other organizations, the generated range
proofs are consistent with their current transaction amounts.
We also need to make sure that the veriﬁer can validate the
Proof of Consistency without knowing the identity of the
spending organization.
(cid:2)m
i=0 ui,
To provide such a Proof of Consistency, we use a non-
interactive variant of the Chaum-Pedersen zero-knowledge
proofs [32] to construct a disjunctive zero-knowledge proof
(DZKP) for a transaction txm. A DZKP takes the spending
organization’s private key sk, or random numbers r and rRP
(for other organizations), as input and generates two non-
interactive Σ-protocols [33].
(cid:2)(cid:2)
and Token
In addition, we generate two tokens Token
(cid:2)
paired with the DZKP:
pkrRP ,
t · (ComRP/s)sk,
Token · (ComRP/s)sk,
pkrRP ,
for the spending org.,
otherwise.
(5)
for the spending org.,
otherwise.
(cid:4)
(cid:2) =
(cid:4)
Token
Token
(cid:2)(cid:2) =
(cid:3)m
(cid:3)m
(cid:2)
(cid:2)m
i=0 Comi = g
(6)
where rRP is the random number used in Equation (4),
s =
is the product of an
organization’s commitments from row 0 to row m, and
t =
is the product of the
organization’s audit tokens from row 0 to row m. Detailed
cryptographic primitives about DZKP and how it works are
described in appendix.
i=0 Tokeni = hsk
i=0 ui h
(cid:2)m
i=0 ri
ri
B. Private and Public Ledgers
In a blockchain network, each organization maintains
two ledgers: a private, off-chain ledger and a public, on-
chain ledger. Public ledger is for recording and auditing
546
Figure 2: Private ledgers and the public ledger. The public
ledger has many identical replicas on the Fabric peer nodes,
owned by participating organizations.
transactions on the Fabric channel, while private ledger is an
organization’s private datastore. Both ledgers have a tabular
structure, as shown in Figure 2.
Private Ledger stores transaction data in plaintext. It is
only accessible to and maintained by the possessing orga-
nization. As shown in Figure 2, a private ledger table has
four columns: (1) a transaction identiﬁer, i.e., tid; (2) the
transaction amount, i.e., value; (3) a validation bit vr that
indicates whether a transaction is valid, veriﬁed by Proof of
Balance and Proof of Correctness; and (4) a validation bit
vc that indicates whether a transaction is valid, veriﬁed by
Proof of Assets, Proof of Amount and Proof of Consistency.
We discuss the rationale behind separating the validations
of the ﬁve NIZK proofs in Section IV.
Public Ledger is maintained by all peer nodes, owned
by participating organizations. As shown in Figure 2, the
public ledger for an N-organization channel is a table with
N + 3 columns, corresponding to a transaction identiﬁer, N
(cid:2)(cid:2)(cid:5) sextets, and two
(cid:4)Com, Token, RP, DZKP, Token
validation bitmaps. Like private ledgers, rows in the public
(cid:2)
ledger represent transactions. The bitmaps (i.e., v
c) are
composed of N bits representing the validation results from
N organizations.
, Token
(cid:2)
r, v
The public ledger is bootstrapped by computing the Ped-
ersen commitments and audit tokens of the initial values for
all organizations in the ﬁrst row with transaction identiﬁer
tid0, denoted by the (cid:4)Com, Token(cid:5) tuples. We require the
client of each organization to validate Proof of Correctness
for itself. The system assumes that all organizations’ initial
assets are already validated at the bootstrap time.
(cid:2)
In Figure 2, the rows with transaction identiﬁer tid1 exem-
pliﬁes a transfer of 100 units of assets from Org1 to Org2.
In their private ledgers, Org1 and Org2 set the transaction
value in row tid1 as −100 and +100, respectively. The
transaction amount for other organizations in tid1 is set to
0. We store N commitments (i.e., (cid:4)com(valuei, ri)(cid:5), i =
1, . . . , N) at rowtid 1 in public ledgers. Each commitment
(cid:2)(cid:2)(cid:5)
is associated with a (cid:4)Tokeni, RPi, DZKPi, Tokeni
, Tokeni
(cid:2)
quintet, which is used to validate transaction tid1 with the
ﬁve NIZK proofs.
Hyperledger Fabric constructs transactions via chaincode
installed on the channel as an agreement of the consortium,
so only the transactions made by approved chaincode will
be accepted. FabZK follows a similar design principle: the
cryptographic primitives are computed by the extended Fab-
ric system, not externally by upper level applications. This
guarantees that no malicious user can manipulate the outputs
generated by FabZK, hence the validations are trustable.
(cid:2)(cid:2)(cid:5)
, Token
sextets in the public ledger for both transactional and
non-transactional organizations. Although the extra padding
incurs some overhead in storage size, this design allows
FabZK to hide the transaction graph and achieve one-to-
one mapping between private and public ledgers. Moreover,
the one-to-one mapping makes it easier for an organization
or auditor to track and validate the transactions.
FabZK writes (cid:4)Com, Token, RP, DZKP, Token
(cid:2)
IV. FABZK DESIGN
In this section, we provide an overview of FabZK’s
architecture and its enhanced program execution ﬂow. Then,
we introduce FabZK’s programming interfaces for writing
auditable, privacy-preserving blockchain applications.
A. Overview
Figure 3 shows the FabZK architecture. It augments
the current Fabric system to allow channel participants to
make privacy-preserving transactions with each other, and to
allow non-transactional organizations and trusted third-party
auditors to audit the results. To do so, a FabZK program
runs in four phases: preparation, execution, notiﬁcation, and
two-step validation. Preparation and notiﬁcation phases run
on the client nodes, while execution and validation phases
run in the chaincode on endorsers. Among the four phases,
execution and two-step validation are speciﬁcally designed
to support privacy and audit.
B. Program Execution Flow
On a Fabric channel, we suppose that a deal is made pri-
vately between a spending and a receiving organization. The
transaction is then reﬂected in both their private ledgers and
the public ledger. With FabZK, we formulate the problem
as a program execution ﬂow, illustrated in Figure 3.
Preparation: At
the beginning of an execution, FabZK
requires the spending and receiving organizations to ﬁrst
determine the transfer amount (u), outside of the blockchain
network. Then, the spending organization’s client code con-
structs the transaction, which consists of N tuples cor-
responding to the N columns of the public ledger. Each
tuple contains the transaction amount (±u for transactional
organizations and 0 for non-transactional organizations), a
random number, and the organization’s public key. These
tuples reﬂect the involvement of individual organizations
Figure 3: System architecture and program execution ﬂow.
The grey boxes denote FabZK’s four major stages: prepara-
tion, execution, notiﬁcation and two-step validation. Dashed
boxes represent isolated organizations.
in this transaction. After this preparation, the transaction
speciﬁcation is sent by the spending organization’s client
code to its endorsers to invoke the transfer execution, in the
Fabric network.
Execution: On receiving the transaction speciﬁcation, the
transfer chaincode written with FabZK’s API is executed
to convert the plaintext speciﬁcation to N (cid:4)Com, Token(cid:5)
tuples. The tuples represent the transfer amount of individual
organizations and form a new row on the public ledger.
The execution results are returned to the client code as an
endorsement. The client code assembles the endorsement,
and broadcasts it
to the ordering service. As shown in
Figure 3, the transfer chaincode is executed only by the
spending organization.
Notiﬁcation: Once executed, all organizations on the
channel are informed of the transaction output (i.e., N
(cid:4)Com, Token(cid:5) tuples) through the standard Fabric notiﬁca-
tion mechanism. Speciﬁcally, the orderers order transactions
from different organizations, batch them into blocks, and
deliver the blocks to the committers. The committers validate
endorser signatures inside each transaction, check the read-
write set conﬂicts, and append the transaction to the public
ledger. Meanwhile, a notiﬁcation is sent to each organiza-
tion’s client code. With the FabZK API, each client code
retrieves information from its private ledger and invokes
the two-step validation process to verify the change on the
public ledger.
Two-step Validation: Provided a transaction’s N tuples con-
structed by the spending organization, all other organizations
need to verify whether these tuples embody a valid transac-
tion using the ﬁve NIZK proofs described in Section III-A.
To improve performance, we design the validation process
as two steps to enable parallel execution (Section V-B).
Step one ensures that no asset is created or destroyed
547
Table I: FabZK’s client code and chaincode APIs.
Name
PvlGet
PvlPut
Validate
GetR
Name
ZkPutState
ZkAudit
ZkVerify
Client code APIs
Description
Retrieve transaction content from private ledger
Append transaction content to private ledger
Invoke the validation chaincode to validate a transaction
Return a list of random numbers which sum to 0
Chaincode APIs
Description
Compute commitments and audit tokens
Compute range proofs and disjunctive proofs
Verify the proofs against the input from client code
during the transaction and no organization steals assets from
others. Each organization checks whether a row on the
public ledger satisﬁes Proof of Balance and whether its
corresponding cell in the row satisﬁes Proof of Correctness.
Step two ensures that the spending organization owns
enough assets to execute the transaction, and the transaction
amount is within the predeﬁned upper and lower bounds.
This step is usually activated by a trusted third-party auditor.
To start this step, auditor asks the spending organization to
generate range proofs and disjunctive proofs. For the m-
th row, the spending organization’s client code constructs
an audit speciﬁcation, which includes its remaining balance
(i.e.,
i=0 ui), a set of the transaction amounts for the rest
of the organizations, three sets of random numbers (i.e., rRP
in Equation (4) and w1, w2 in Equation (7)), the commitment
product set (the product of an organization’s commitments
from row 0 to row m), the token product set (the product
of an organization’s audit tokens from row 0 to row m), all
organizations’ public keys, and the spending organization’s
private key.
(cid:2)m
It is safe for the spending organization to provide its
private key to the chaincode, because chaincode runs on the
organization’s own endorsers. The audit speciﬁcation is sent
to the organization’s endorsers to invoke the audit chaincode
execution. The chaincode then converts the plaintext audit
data to (cid:4)RP, DZKP, Token
(cid:2)(cid:2)(cid:5) quadruples for each
(cid:2)
organization. The auditor checks Proof of Assets, Proof of
Amount and Proof of Consistency for all organizations. A
transaction is considered valid only when all checks are
positive. Finally,
is updated on the
public ledger, which results in another notiﬁcation to all
organizations, who will then update their private ledgers.
the validation result
, Token
C. Programming Interfaces
FabZK provides two sets of programming interfaces to
enable an application’s interaction with the Fabric system.