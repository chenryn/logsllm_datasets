propagations using the union mapping function [12] as bitwise
logical operations on bit ﬁelds representing the taint sets.
Invariant checks: We also instrument invariant checks to
detect invariant violations. Likely unreachable code is checked
by instrumenting a special invariant violation function call at
the entry of the code block. Likely callee sets are veriﬁed using
a set inclusion check upon a function pointer update. Likely
unrealized call contexts are veriﬁed by checking call-stack set
inclusion at the call-sites with reasonable overheads [18].
E. Forward Recovery Mechanism
To manage switching between the slow-path and fast-path
versions of our code, each function implements both the fast-
path and slow-path code in separate control-ﬂow domains,
as shown in Figure 4. These two analyses paths are created
statically for each function as follows. First the control ﬂow
graph for a function is replicated, and the fast-path version
is instrumented with monitors resulting from the predicated
static analysis, while the slow-path instrumentation uses the
conservative static analysis. Next,
immediately after every
invariant check in the fast-path, we insert a conditional jump
to the slow-path that is taken whenever the guarding invariant
check fails. Note, that the slow-path has no invariant checks,
as it uses a conservative static analysis.
Another key issue is to handle the slow-path switching
correctly for function calls. When an invariant fails while
executing a function that is deep in the function call-graph,
that particular function can switch using the above mechanism.
Additionally, all functions in the call-stack up to the main
function must switch to the slow-path upon a return from the
slow-path domain. To achieve this, we instrument a conditional
(cid:21)(cid:26)(cid:24)
switch to the slow-path after every call-site that checks a global
ﬂag upon function return and switches to the slow-path if that
ﬂag is raised by the invariant violation. We found the dynamic
overhead of this simple recovery mechanism to be negligible.
If this overhead were unacceptable, we could rewrite the return
addresses on stack with those in the slow-path domain. As the
observed overheads for our simple solution were low, we did
not implement this more complicated strategy.
Execution begins in the fast-path domain and continues,
as shown by the bold path in Figure 4, until it encounters
an invariant violation, at which time it immediately switches
to the slow-path domain and continues forward. This switch
is safe due to two reasons: (1) the two domains only differ
in analysis logic and maintain the same program state, and
(2) safe elision guarantees equal analysis metadata state at
invariant violation. Subsequent returns through the call-stack
switches to the slow-path through the second mechanism.
VI. EVALUATION
Our evaluation shows the following:
• Iodine enables production use of taint tracking by dra-
matically reducing the overhead of taint tracking com-
pared to conservative hybrid analysis and pure dynamic
analysis.
• Iodine efﬁciently implements real-world information-
ﬂow policies for security-critical applications.
• Iodine requires reasonable proﬁling efforts. We show
regression tests are adequate to get majority of the
performance beneﬁts.
• Iodine improves the precision and scalability of static
taint analysis.
A. Experimental Setup
We evaluate Iodine over several security-sensitive real-
world applications. Our benchmark suite consists of the fol-
lowing:
• Postﬁx mail server [35] test generators–
• qmqp-source, smtp-source: mail servers.
• qmqp-sink, smtp-sink: mail clients.
• sendmail: Postﬁx to Sendmail interface.
• nginx, thttpd: serving static webpages [36], [37].
• redis: database server [38] performing key-value
store, list operations, and geographic search [39].
• vim: pattern search and text processing [40].
• gzip: (de-)compressing large media ﬁles [41].
We test Iodine in a manner that parallels how we en-
vision it will be used in practice. We ﬁrst proﬁle a set
of proﬁling executions to gather likely invariants. Then, we
use these proﬁled invariants in a predicated static analysis
to construct our ﬁnal optimized dynamic taint analysis for
a given information-ﬂow policy. We generate a set of 500
diverse proﬁle inputs by sweeping the programs’ parameter
space (e.g., data size, #clients, #requests, compression fac-
tor, etc.; excluding standardized parameters, e.g., TCP/SMTP
port). We run the postfix stress tests; nginx, thttpd
serving pydoc3 documentation and loading several webpages;
redis benchmarking application and performing geo-search
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
i
t
s
i
s
y
l
a
n
a
c
i
m
a
n
y
d
d
e
z
i
l
e
m
a
m
r
o
N
Full Dynamic
Conservative Hybrid
Iodine
8.14
7.23
5.25
7
2
1
.
7
0
1
.
2
3
1
.
7
0
1
.
2
5
1
.
2
1
1
.
9.0
8.0
7.0
6.0
5.0
4.0
3.0
2.0
1.0
smtp integrity
nginx security
Fig. 5: Dynamic information-ﬂow tracking applications
qmqp integrity
[39]; vim challenge solutions from [40]; and gzip with
SPEC’s bzip2 and sphinx reference inputs. We randomly
partition these inputs into two disjoint sets- a proﬁle set
consisting 400 executions, and a performance test set of 100
executions. We note that in an actual production environment
the proﬁling overhead of Iodine would be amortized over all
future executions of the program, not just the 100 we test.
To evaluate the beneﬁts of Iodine, we compare it against
a conservative hybrid information ﬂow tracking (IFT) tool,
and a naive dynamic IFT tool that uses no static analysis.
Our conservative hybrid IFT runs sound variants of the same
static algorithms Iodine uses, however as Iodine’s predicated
static analysis only analyzes a subset of program states, it can
often run more scalable context-sensitive predicated static anal-
yses, where sound static analysis must use context-insensitive
analysis for scalability. For our native dynamic baseline we
compare against our backend tool, DFSan[20] (4.84× avg.
for SPECint). This overhead is comparable to other purely
dynamic taint analysis systems, such as libdft [34] (5.08×).
For our conservative hybrid baseline we use DFSan with sound
static optimizations. The overhead of our conservative hybrid
system (2.83×) is also comparable to prior conservative hybrid
systems, such as TaintPipe [42] (2.67×).
All experiments are run on a single core of an Intel Xeon
E5-2620 processor with 16GB RAM running Linux 4.4.
B. IFT Security Policies
We demonstrate the effectiveness of Iodine using real taint
policies by applying it to a set of commonly used applications
with realistic taint policies adapted from Dytan [12] and
Google desktop’s privacy policy [43]. The policies we study
are:
Email integrity and privacy: We add security checks
to the Postﬁx mail server, following the policies outlined
in [13], [43]. These policies ensure: receiver addresses are
entirely determined by user input and message dates are only
determined by the time system call (email integrity), and
message bodies are passed through sanitizing functions that
perform encryption, and check for unmatched HTML tags or
scripting tags (privacy + security).
Results:
and asserts that tainted values are not used as function pointers,
return addresses, or format strings. This policy detects a
malicious overwrite attack [12].
Iodine shows a 4.4× reduction in runtime over-
head for these realistic case studies, incurring only 7% to 12%
overhead, compared to 27% to 52% obtained with conservative
hybrid analysis. These results are shown in Figure 5, as
well as those of a naive dynamic IFT analysis. With these
signiﬁcant runtime improvements Iodine enables taint tracking
in many production systems where performance concerns often
preclude security.
C. Generic Information-Flow Policies
As we only have a limited set of realistic taint policies, we
further test Iodine’s effectiveness in reducing taint overhead
over additional benchmarks by using synthetic taint policies.
We implement two different synthetic variants of taint analysis
to evaluate the effectiveness of our framework in a forward-
only analysis versus a forward-backward analysis.
Some-to-some: Propagates taints from a randomly sampled
fraction of the taint sources to the set of all sink instructions.
Both forward and backward static taint analyses are used to
implement this policy.
Some-to-all: Treats all instructions as potential sinks and
propagates taints from the sampled taint sources. Only forward
static taint optimizations are used to optimize this analysis.
Some-to-all taint policies are useful in many non-security
contexts such as database provenance and lineage queries,
information ﬂow in debugging and software testing. This
optimization also isolates the forward optimizations of our
hybrid IFT framework, showing directly how effective pred-
icated static analysis is at optimizing taint checks versus
a sound static analysis. We treat all input interfaces from
console/ﬁle/network as potential
to
randomly sample 1
3 of them for these taint policies. All output
interfaces to console/ﬁle/network are taint sinks. We ﬁnd this
sampling gives us overhead numbers similar to the realistic
policies evaluated previously. All subsequent results are based
on the above generic policies. We consistently use the 1
3
sampling fraction and the same set of sampled taint sources
for a program in all subsequent experiments, except in §VI-H
where we change this parameter.
taint sources and elect
Results:
Similar to our taint policy tests, Iodine sig-
niﬁcantly reduces the runtime of dynamic taint tracking in
our synthetic tests, as shown in Figure 6. When applied
to some-to-some taint tracking (Figure 6a), Iodine reduces
the dynamic overhead of conservative hybrid taint analysis
by 2.8×, bringing the overhead of taint tracking from 51%
with conservative hybrid analysis down to 18% over native
unmonitored execution. We also apply Iodine to some-to-all
taint tracking (Figure 6b). Iodine sees similar reductions in
overhead, reducing overhead of taint tracking to 24%, versus
92% for conservative hybrid analysis, and 276% for a pure
dynamic analysis. Once again, Iodine brings overheads down
signiﬁcantly, further showing its capability to reduce overheads
and enable taint-tracking on production systems.
Overwrite attacks on web server: We enforce a taint
policy on the Nginx web server that taints all network inputs,
SPEC benchmarks: To further evaluate Iodine’s perfor-
mance on compute-intensive programs, we run it with the
(cid:21)(cid:26)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
Baseline execution
Invariant checks
Monitors
4
7
5
.
9.93
3
1
5
.
Baseline execution
Invariant checks
Monitors
4
7
5
.
5
2
2
.
5
1
1
.
4
8
3
.
3
2
3
.
3
0
3
.
1
5
1
.
5
1
1
.
2
5
1
.
3
1
1
.
9
4
1
.
1
1
.
1
4
1
2
.
0
6
1
.
2
2
1
.
9.93
3
1
5
.
0
8
4
.
6
7
.
3
2
9
.
1
4
2
.
1
3
5
2
.
2
5
.
1
5
4
1
.
4
6
2
.
2
8
1
.
7
3
1
.
6
4
2
.
3
6
.
1
7
2
1
.
6
7
.
3
1
5
.
1
8
1
.
1
e
m
i
t
s
i
s
y
l
a
n
a
c
i
m
a
n
y
d
d
e
z
i
l
a
m
r
o
N
7
6
5
4
7
6
3
.
5
5
.
1
2
1
1
.
3
2
1
0
4
8
3
.