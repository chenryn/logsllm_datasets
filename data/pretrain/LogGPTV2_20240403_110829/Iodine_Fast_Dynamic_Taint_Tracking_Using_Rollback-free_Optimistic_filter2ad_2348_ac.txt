### Propagation and Invariant Checks
Propagation is performed using the union mapping function [12] as bitwise logical operations on bit fields representing the taint sets. For invariant checks, we instrument the code to detect violations of invariants. Unreachable code is checked by inserting a special invariant violation function call at the entry of the code block. We verify likely callee sets by performing a set inclusion check upon updating a function pointer. Additionally, we verify likely unrealized call contexts by checking call-stack set inclusion at call sites, with reasonable overheads [18].

### Forward Recovery Mechanism
To manage switching between the fast-path and slow-path versions of our code, each function implements both paths in separate control-flow domains, as illustrated in Figure 4. The two analysis paths are created statically for each function as follows:
1. The control flow graph for a function is replicated.
2. The fast-path version is instrumented with monitors resulting from the predicated static analysis, while the slow-path instrumentation uses the conservative static analysis.
3. Immediately after every invariant check in the fast-path, we insert a conditional jump to the slow-path that is taken if the invariant check fails. Note that the slow-path does not include invariant checks, as it relies on a conservative static analysis.

Another key issue is handling the slow-path switching correctly for function calls. When an invariant fails during the execution of a function deep in the call graph, that function can switch to the slow-path using the above mechanism. Additionally, all functions in the call stack up to the main function must switch to the slow-path upon returning from the slow-path domain. To achieve this, we instrument a conditional switch to the slow-path after every call site, which checks a global flag upon function return and switches to the slow-path if the flag is raised by an invariant violation. We found the dynamic overhead of this simple recovery mechanism to be negligible. If the overhead were unacceptable, we could rewrite the return addresses on the stack with those in the slow-path domain. However, since the observed overheads were low, we did not implement this more complex strategy.

Execution begins in the fast-path domain and continues until an invariant violation occurs, at which point it immediately switches to the slow-path domain and continues forward. This switch is safe for two reasons: (1) the two domains only differ in analysis logic and maintain the same program state, and (2) safe elision guarantees equal analysis metadata state at the time of the invariant violation. Subsequent returns through the call stack switch to the slow-path via the second mechanism.

### Evaluation
Our evaluation demonstrates the following:
- Iodine enables production use of taint tracking by significantly reducing the overhead compared to conservative hybrid analysis and pure dynamic analysis.
- Iodine efficiently implements real-world information-flow policies for security-critical applications.
- Iodine requires reasonable profiling efforts, with regression tests being adequate to achieve most performance benefits.
- Iodine improves the precision and scalability of static taint analysis.

#### Experimental Setup
We evaluated Iodine on several security-sensitive real-world applications, including:
- Postfix mail server test generators (qmqp-source, smtp-source, qmqp-sink, smtp-sink, sendmail).
- Nginx and thttpd for serving static webpages.
- Redis for database operations.
- Vim for pattern search and text processing.
- Gzip for compressing and decompressing large media files.

We tested Iodine in a manner that reflects its practical use. First, we profiled a set of executions to gather likely invariants. Then, we used these invariants in a predicated static analysis to construct an optimized dynamic taint analysis for a given information-flow policy. We generated a diverse set of 500 profile inputs by sweeping the programs' parameter space (e.g., data size, number of clients, number of requests, compression factor). We ran various stress tests and benchmarks, randomly partitioning the inputs into a profile set of 400 executions and a performance test set of 100 executions. In a production environment, the profiling overhead would be amortized over all future executions.

To evaluate the benefits of Iodine, we compared it against a conservative hybrid information flow tracking (IFT) tool and a naive dynamic IFT tool that uses no static analysis. Our conservative hybrid IFT runs sound variants of the same static algorithms Iodine uses, but Iodine's predicated static analysis often allows more scalable context-sensitive analyses. For the dynamic baseline, we compared against DFSan [20], which has an average overhead of 4.84× for SPECint. This overhead is comparable to other purely dynamic taint analysis systems like libdft [34] (5.08×). For the conservative hybrid baseline, we used DFSan with sound static optimizations, resulting in an overhead of 2.83×, comparable to prior conservative hybrid systems like TaintPipe [42] (2.67×).

All experiments were conducted on a single core of an Intel Xeon E5-2620 processor with 16GB RAM running Linux 4.4.

#### Information-Flow Policies
We demonstrated the effectiveness of Iodine using real taint policies applied to commonly used applications with realistic taint policies adapted from Dytan [12] and Google desktop’s privacy policy [43]. The policies we studied include:
- **Email integrity and privacy**: Security checks for the Postfix mail server ensure that receiver addresses are determined by user input and message dates are determined by the time system call. Message bodies are sanitized for encryption and checked for unmatched HTML or scripting tags.
- **Web server overwrite attacks**: A taint policy for the Nginx web server that taints all network inputs, detecting malicious overwrite attacks [12].

Results show that Iodine reduces runtime overhead by 4.4×, incurring only 7% to 12% overhead compared to 27% to 52% for conservative hybrid analysis. These results are shown in Figure 5, along with those of a naive dynamic IFT analysis. With these significant runtime improvements, Iodine enables taint tracking in many production systems where performance concerns often preclude security.

#### Generic Information-Flow Policies
To further test Iodine's effectiveness, we used synthetic taint policies. We implemented two different synthetic variants of taint analysis:
- **Some-to-some**: Propagates taints from a randomly sampled fraction of taint sources to all sink instructions, using both forward and backward static taint analyses.
- **Some-to-all**: Treats all instructions as potential sinks and propagates taints from the sampled taint sources, using only forward static taint optimizations.

These policies are useful in non-security contexts such as database provenance, lineage queries, and information flow in debugging and software testing. We randomly sampled 1/3 of the input interfaces from console/file/network as taint sources, with all output interfaces to console/file/network as taint sinks.

Results show that Iodine significantly reduces the runtime of dynamic taint tracking in our synthetic tests. For some-to-some taint tracking (Figure 6a), Iodine reduces the overhead of conservative hybrid taint analysis by 2.8×, bringing the overhead down from 51% to 18%. For some-to-all taint tracking (Figure 6b), Iodine reduces the overhead to 24%, compared to 92% for conservative hybrid analysis and 276% for a pure dynamic analysis. These results further demonstrate Iodine's capability to reduce overheads and enable taint tracking in production systems.