Key生成的（如前所述）。
NTLM2签名（由SSPI MakeSignature函数完成）如下：
  1. 获得序列号；它从零开始，并在每条消息签名后递增。该数字表示为长整数（32位Little-endian值）。
  2. 序列号与消息串联在一起。HMAC-MD5消息认证代码算法使用适当的签名Key应用于此值。这将产生一个16字节的值。
  3. 如果已NegotiateKey交换，则使用适当的SealingKey初始化RC4密码。这一次完成（在第一次操作期间），并且Key流永远不会重置。HMAC结果的前八个字节使用此RC4密码加密。如果Key交换还没有经过谈判，省略这个Sealing操作。
  4. 将版本号（” 0x01000000 “）与上一步的结果和序列号连接起来以形成签名。
例如，假设我们使用Master Key” 0x0102030405060708090a0b0c0d0e0f00 “ 在客户端上对消息” jCIFS
“（十六进制” 0x6a43494653 “）进行签名。这与客户端到服务器的签名常量连接在一起，并应用MD5生成客户端签名Key（”
0xf7f97a82ec390f9c903dac4f6aceb132 “）和客户端SealingKey（”
0x2785f595293f3e2813439d73a223810d “）；这些用于签名消息如下：
  1. 获得序列号。由于这是我们签名的第一条消息，因此序列号为零（” 0x00000000 “）。
  2. 序列号与消息串联在一起：  
0x000000006a43494653使用客户端签名Key（” 0xf7f97a82ec390f9c903dac4f6aceb132 “）应用HMAC-MD5 。结果是16字节的值” 0x0a003602317a759a720dc9c7a2a95257 “。
  3. 使用我们的SealingKey（” 0x2785f595293f3e2813439d73a223810d “）初始化RC4密码。先前结果的前八个字节通过密码传递，产生密文” 0xe37f97f2544f4d7e “。
  4. 将版本标记与上一步的结果和序列号连接起来，以形成最终签名：  
0x01000000e37f97f2544f4d7e00000000
**Sealing**
“Negotiate Sealing” NTLMFlags再次表明支持NTLM2中的消息机密性。NTLM2Sealing（由SSPI
EncryptMessage函数完成）如下：
  1. RC4密码使用适当的SealingKey初始化（取决于客户端还是服务器正在执行Sealing）。只需执行一次（在第一次Sealing操作之前），并且Key流永远不会重置。
  2. 使用RC4密码对消息进行加密；这将产生Sealing的密文。
  3. 如前所述，将生成消息的签名，并将其放置在安全尾部缓冲区中。请注意，签名操作中使用的RC4密码已经初始化（在前面的步骤中）；它不会为签名操作重置。
例如，假设我们使用Master Key” 0x0102030405060060090090a0b0c0d0e0f00 “ 在客户端上Sealing消息”
jCIFS “（十六进制” 0x6a43494653 “）。与前面的示例一样，我们使用未减弱的Master Key生成客户端签名Key（”
0xf7f97a82ec390f9c903dac4f6aceb132
“）。我们还需要生成客户SealingKey；我们将假定已经Negotiate了40位弱化。我们将弱化的Master Key（” 0x0102030405
“）与客户端到服务器的Sealing常数连接起来，并应用MD5产生客户端SealingKey（”
0x6f0d9953503333cbe499cd1914fe9ee “）。以下过程用于Sealing消息：
  1. RC4密码使用我们的客户SealingKey（” 0x6f0d99535033951cbe499cd1914fe9ee “）初始化。
  2. 我们的消息通过RC4密码传递，并产生密文” 0xcf0eb0a939 “。这是Sealing消息。
  3. 获得序列号。由于这是第一个签名，因此序列号为零（” 0x00000000 “）。
  4. 序列号与消息串联在一起：  
0x000000006a43494653使用客户端签名Key（” 0xf7f97a82ec390f9c903dac4f6aceb132 “）应用HMAC-MD5 。结果是16字节的值” 0x0a003602317a759a720dc9c7a2a95257 “。
  5. 该值的前八个字节通过Sealing密码，得到的密文为” 0x884b14809e53bfe7 “。
  6. 将版本标记与结果和序列号连接起来以形成最终签名，该最终签名被放置在安全性尾部缓冲区中：  
0x01000000884b14809e53bfe700000000整个Sealing结构的十六进制转储为：0xcf0eb0a93901000000884b14809e53bfe700000000
## 会话安全主题（Miscellaneous Session Security Topics）
还有其他几个会话安全性主题，这些主题实际上并不适合其他任何地方：
  * 数据报的签名和Sealing
  * “虚拟”的签名
###  数据报签名和Sealing
在建立数据报上下文时使用此方法（由数据报身份验证握手和”Negotiate Datagram
Style”Flags的存在指示）。关于数据报会话安全性的语义有些不同；首次调用SSPI
InitializeSecurityContext函数之后（即，在与服务器进行任何通信之前），签名可以立即在客户端上开始。这意味着需要预先安排的签名和Sealing方案（因为可以在与服务器Negotiate任何选项之前创建签名）。数据报会话安全性基于具有密钥交换的40位Lan
Manager Session Key NTLM1（尽管可能有一些方法可以通过注册表预先确定更强大的方案）。
在数据报模式下，序列号不递增；它固定为零，每个签名都反映了这一点。同样，每次签名或Sealing操作都会重置RC4Key流。这很重要，因为消息可能容易受到已知的明文攻击。
###  “虚拟”签名
如果初始化SSPI上下文而未指定对消息完整性的支持，则使用此方法。如果建立了”始终NegotiateNegotiate”
NTLMFlags，则对MakeSignature的调用将成功，并返回常量” signature”：
0x01000000000000000000000000000000
对EncryptMessage的调用通常会成功（包括安全性尾部缓冲区中的”真实”签名）。如果未Negotiate”Negotiate始终签名”，则签名和Sealing均将失败。
## 附录A：链接和参考
请注意，由于Web具有高度动态性和瞬态性，因此这些功能可能可用或可能不可用。
jCIFS项目主页  
jCIFS是CIFS / SMB的开源Java实现。本文中提供的信息用作jCIFS NTLM身份验证实现的基础。jCIFS为NTLM
HTTP身份验证方案的客户端和服务器端以及非协议特定的NTLM实用程序类提供支持。  
Samba主页  
Samba是一个开源CIFS / SMB服务器和客户端。实现NTLM身份验证和会话安全性，以及本文档大部分内容的参考。  
实施CIFS：通用Internet文件系统  
Christopher R. Hertel撰写的，内容丰富的在线图书。与该讨论特别相关的是有关 身份验证的部分。  
Open Group ActiveX核心技术参考（第11章，” NTLM”）  
与NTLM上”官方”参考最接近的东西。不幸的是，它还很旧并且不够准确。  
安全支持提供者界面  
白皮书，讨论使用SSPI进行应用程序开发。  
HTTP的NTLM身份验证方案  
有关NTLM HTTP身份验证机制的内容丰富的讨论。  
Squid NTLM认证项目  
为Squid代理服务器提供NTLM HTTP身份验证的项目。  
Jakarta Commons HttpClient  
一个开放源Java HTTP客户端，它提供对NTLM HTTP身份验证方案的支持。  
GNU加密项目  
一个开放源代码的Java密码学扩展提供程序，提供了MD4消息摘要算法的实现。  
RFC 1320-MD4消息摘要算法  
MD4摘要的规范和参考实现（用于计算NTLM密码哈希）。  
RFC 1321-MD5消息摘要算法  
MD5摘要的规范和参考实现（用于计算NTLM2会话响应）。  
RFC 2104-HMAC：消息身份验证的键哈希  
HMAC-MD5算法的规范和参考实现（用于NTLMv2 / LMv2响应的计算）。  
如何启用NTLM 2身份验证  
描述了如何启用NTLMv2身份验证的Negotiate并强制执行NTLM安全Flags。  
Microsoft SSPI功能文档  
概述了安全支持提供程序接口（SSPI）和相关功能。
## 附录B：NTLM的应用协议用法
本节研究了Microsoft的某些网络协议实现中NTLM身份验证的使用。
###  NTLM HTTP身份验证
Microsoft已经为HTTP建立了专有的” NTLM”身份验证方案，以向IIS
Web服务器提供集成身份验证。此身份验证机制允许客户端使用其Windows凭据访问资源，通常用于公司环境中，以向Intranet站点提供单点登录功能。从历史上看，Internet
Explorer仅支持NTLM身份验证。但是，最近，已经向其他各种用户代理添加了支持。
NTLM HTTP身份验证机制的工作方式如下：
  1. 客户端从服务器请求受保护的资源：  
GET /index.html HTTP / 1.1
  2. 服务器以401状态响应，指示客户端必须进行身份验证。通过” WWW-Authenticate “标头将” NTLM”表示为受支持的身份验证机制。通常，服务器此时会关闭连接：  
HTTP / 1.1 401未经授权的  
WWW身份验证：NTLM  
连接：关闭  
请注意，如果Internet Explorer是第一个提供的机制，它将仅选择NTLM。这与RFC 2616不一致，RFC
2616指出客户端必须选择支持最强的身份验证方案。
  3. 客户端使用包含Type 1消息参数的” Authorization “标头重新提交请求。Type 1消息经过Base-64编码以进行传输。从这一点开始，连接保持打开状态。关闭连接需要重新验证后续请求。这意味着服务器和客户端必须通过HTTP 1.0样式的” Keep-Alive”标头或HTTP 1.1（默认情况下采用持久连接）来支持持久连接。相关的请求标头显示如下（下面的” Authorization “标头中的换行符仅用于显示目的，在实际消息中不存在）：  
GET /index.html HTTP / 1.1  
授权：NTLM TlRMTVNTUAABAAAABzIAAAYABgArAAAACwALACAAAABXT1  
JLU1RBVElPTkRPTUFJTg ==