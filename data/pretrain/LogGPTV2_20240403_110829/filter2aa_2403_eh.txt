    m[10]="ten"; 
    m[20]="twenty"; 
    m[3]="three"; 
    m[101]="one hundred one"; 
    m[100]="one hundred"; 
    m[12]="twelve"; 
    m[107]="one hundred seven"; 
    m[0]="zero"; 
    m[1]="one"; 
    m[6]="six"; 
    m[99]="ninety-nine"; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
559 
    m[5]="five"; 
    m[11]="eleven"; 
    m[1001]="one thousand one"; 
    m[1010]="one thousand ten"; 
    m[2]="two"; 
    m[9]="nine"; 
    printf ("dumping m as map:\n"); 
    dump_map_and_set ((struct tree_struct *)(void*)&m, false); 
    std::map::iterator it1=m.begin(); 
    printf ("m.begin():\n"); 
    dump_tree_node ((struct tree_node *)*(void**)&it1, false, false, true); 
    it1=m.end(); 
    printf ("m.end():\n"); 
    dump_tree_node ((struct tree_node *)*(void**)&it1, false, false, false); 
    // set 
    std::set s; 
    s.insert(123); 
    s.insert(456); 
    s.insert(11); 
    s.insert(12); 
    s.insert(100); 
    s.insert(1001); 
    printf ("dumping s as set:\n"); 
    dump_map_and_set ((struct tree_struct *)(void*)&s, true); 
    std::set::iterator it2=s.begin(); 
    printf ("s.begin():\n"); 
    dump_tree_node ((struct tree_node *)*(void**)&it2, true, false, true); 
    it2=s.end(); 
    printf ("s.end():\n"); 
    dump_tree_node ((struct tree_node *)*(void**)&it2, true, false, false); 
}; 
指令清单 51.36  GCC 4.8.1 
dumping m as map: 
ptr=0x0028FE3C, M_key_compare=0x402b70, M_header=0x0028FE40, M_node_count=17 
ptr=0x007A4988 M_left=0x007A4C00 M_parent=0x0028FE40 M_right=0x007A4B80 M_color=1 
key=10 value=[ten] 
ptr=0x007A4C00 M_left=0x007A4BE0 M_parent=0x007A4988 M_right=0x007A4C60 M_color=1 
key=1 value=[one] 
ptr=0x007A4BE0 M_left=0x00000000 M_parent=0x007A4C00 M_right=0x00000000 M_color=1 
key=0 value=[zero] 
ptr=0x007A4C60 M_left=0x007A4B40 M_parent=0x007A4C00 M_right=0x007A4C20 M_color=0 
key=5 value=[five] 
ptr=0x007A4B40 M_left=0x007A4CE0 M_parent=0x007A4C60 M_right=0x00000000 M_color=1 
key=3 value=[three] 
ptr=0x007A4CE0 M_left=0x00000000 M_parent=0x007A4B40 M_right=0x00000000 M_color=0 
key=2 value=[two] 
ptr=0x007A4C20 M_left=0x00000000 M_parent=0x007A4C60 M_right=0x007A4D00 M_color=1 
key=6 value=[six] 
ptr=0x007A4D00 M_left=0x00000000 M_parent=0x007A4C20 M_right=0x00000000 M_color=0 
key=9 value=[nine] 
ptr=0x007A4B80 M_left=0x007A49A8 M_parent=0x007A4988 M_right=0x007A4BC0 M_color=1 
key=100 value=[one hundred] 
ptr=0x007A49A8 M_left=0x007A4BA0 M_parent=0x007A4B80 M_right=0x007A4C40 M_color=0 
key=20 value=[twenty] 
ptr=0x007A4BA0 M_left=0x007A4C80 M_parent=0x007A49A8 M_right=0x00000000 M_color=1 
key=12 value=[twelve] 
ptr=0x007A4C80 M_left=0x00000000 M_parent=0x007A4BA0 M_right=0x00000000 M_color=0 
key=11 value=[eleven] 
ptr=0x007A4C40 M_left=0x00000000 M_parent=0x007A49A8 M_right=0x00000000 M_color=1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
560 
逆向工程权威指南（下册） 
key=99 value=[ninety-nine] 
ptr=0x007A4BC0 M_left=0x007A4B60 M_parent=0x007A4B80 M_right=0x007A4CA0 M_color=0 
key=107 value=[one hundred seven] 
ptr=0x007A4B60 M_left=0x00000000 M_parent=0x007A4BC0 M_right=0x00000000 M_color=1 
key=101 value=[one hundred one] 
ptr=0x007A4CA0 M_left=0x00000000 M_parent=0x007A4BC0 M_right=0x007A4CC0 M_color=1 
key=1001 value=[one thousand one] 
ptr=0x007A4CC0 M_left=0x00000000 M_parent=0x007A4CA0 M_right=0x00000000 M_color=0 
key=1010 value=[one thousand ten] 
As a tree: 
root----10 [ten] 
        L-------1 [one] 
                L-------0 [zero] 
                R-------5 [five] 
                        L-------3 [three] 
                                L-------2 [two] 
                        R-------6 [six] 
                                R-------9 [nine] 
        R-------100 [one hundred] 
                L-------20 [twenty] 
                        L-------12 [twelve] 
                                L-------11 [eleven] 
                        R-------99 [ninety-nine] 
                R-------107 [one hundred seven] 
                        L-------101 [one hundred one] 
                        R-------1001 [one thousand one] 
                                R-------1010 [one thousand ten] 
m.begin(): 
ptr=0x007A4BE0 M_left=0x00000000 M_parent=0x007A4C00 M_right=0x00000000 M_color=1 
key=0 value=[zero] 
m.end(): 
ptr=0x0028FE40 M_left=0x007A4BE0 M_parent=0x007A4988 M_right=0x007A4CC0 M_color=0 
dumping s as set: 
ptr=0x0028FE20, M_key_compare=0x8, M_header=0x0028FE24, M_node_count=6 
ptr=0x007A1E80 M_left=0x01D5D890 M_parent=0x0028FE24 M_right=0x01D5D850 M_color=1 
key=123 
ptr=0x01D5D890 M_left=0x01D5D870 M_parent=0x007A1E80 M_right=0x01D5D8B0 M_color=1 
key=12 
ptr=0x01D5D870 M_left=0x00000000 M_parent=0x01D5D890 M_right=0x00000000 M_color=0 
key=11 
ptr=0x01D5D8B0 M_left=0x00000000 M_parent=0x01D5D890 M_right=0x00000000 M_color=0 
key=100 
ptr=0x01D5D850 M_left=0x00000000 M_parent=0x007A1E80 M_right=0x01D5D8D0 M_color=1 
key=456 
ptr=0x01D5D8D0 M_left=0x00000000 M_parent=0x01D5D850 M_right=0x00000000 M_color=0 
key=1001 
As a tree: 
root----123 
        L-------12 
                L-------11 
                R-------100 
        R-------456 
                R-------1001 
s.begin(): 
ptr=0x01D5D870 M_left=0x00000000 M_parent=0x01D5D890 M_right=0x00000000 M_color=0 
key=11 
s.end(): 
ptr=0x0028FE24 M_left=0x01D5D870 M_parent=0x007A1E80 M_right=0x01D5D8D0 M_color=0 
GCC 的实现方法与 MSVC 十分相似，具体内容可参见：http://gcc.gnu.org/onlinedocs/libstdc++ /libstdc++ 
-html-USERS-4.1/stl__tree_8h-source.html。与 MSVC 相比，GCC 创建的数据结构并没有 Isnil 字段，所以其
内存存储结构更为紧凑。另外，迭代器.end()同样指向了一个没有任何关键字或值的虚节点。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
561 
平衡树的动态调整技术（GCC） 
在平衡树里添加一个结点，可能会导致树的失衡。所以在插入结点时，需要对树进行调整，以保持树
的平衡。下面的程序将演示 GCC 的调整技术。 
指令清单 51.37  GCC 程序 
#include  
#include  
#include  
#include  
#include  
struct map_pair 
{ 
    int key; 
    const char *value; 
}; 
struct tree_node 
{ 
    int M_color; // 0 - Red, 1 - Black 
    struct tree_node *M_parent; 
    struct tree_node *M_left; 
    struct tree_node *M_right; 
}; 
struct tree_struct 
{ 
    int M_key_compare; 
    struct tree_node M_header; 
    size_t M_node_count; 
}; 
const char* ALOT_OF_TABS="\t\t\t\t\t\t\t\t\t\t\t"; 
void dump_as_tree (int tabs, struct tree_node *n) 
{ 
    void *point_after_struct=((char*)n)+sizeof(struct tree_node); 
    printf ("%d\n", *(int*)point_after_struct); 
    if (n->M_left) 
    { 
        printf ("%.*sL-------", tabs, ALOT_OF_TABS); 
        dump_as_tree (tabs+1, n->M_left); 
    }; 
    if (n->M_right) 
    { 
        printf ("%.*sR-------", tabs, ALOT_OF_TABS); 
        dump_as_tree (tabs+1, n->M_right); 
    }; 
}; 
void dump_map_and_set(struct tree_struct *m) 
{ 
    printf ("root----"); 
    dump_as_tree (1, m->M_header.M_parent); 
}; 
int main() 
{ 
    std::set s; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
562 
逆向工程权威指南（下册） 
    s.insert(123); 
    s.insert(456); 
    printf ("123, 456 are inserted\n"); 
    dump_map_and_set ((struct tree_struct *)(void*)&s); 
    s.insert(11); 
    s.insert(12); 
    printf ("\n"); 
    printf ("11, 12 are inserted\n"); 
    dump_map_and_set ((struct tree_struct *)(void*)&s); 
    s.insert(100); 
    s.insert(1001); 
    printf ("\n"); 
    printf ("100, 1001 are inserted\n"); 
    dump_map_and_set ((struct tree_struct *)(void*)&s); 
    s.insert(667); 
    s.insert(1); 
    s.insert(4); 
    s.insert(7); 
    printf ("\n"); 
    printf ("667, 1, 4, 7 are inserted\n"); 
    dump_map_and_set ((struct tree_struct *)(void*)&s); 
    printf ("\n"); 
}; 
指令清单 51.38  GCC 4.8.1 程序 
123, 456 are inserted 
root----123 
        R-------456 
11, 12 are inserted 
root----123 
        L-------11 
                R-------12 
        R-------456 
100, 1001 are inserted 
root----123 
        L-------12 
                L-------11 
                R-------100 
        R-------456 
                R-------1001 
667, 1, 4, 7 are inserted 
root----12 
        L-------4 
                L-------1 
                R-------11 
                        L-------7 
        R-------123 
                L-------100 
                R-------667 
                        L-------456 
                        R-------1001 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 5522 章
章    数
数组
组与
与负
负数
数索
索引
引  
数组的负数索引值完全不阻碍寻址。例如，array[-1]实际上表示数组 array 起始地址之前的存储空间！ 
这种技术的用途相当有限。笔者认为除了本章范例的这种场景之外，应该没有什么领域用得上这项技
术了。众所周知，在表示数组的第一个元素时，C/C++使用的数组下标是 0，而部分其他编程语言（FORTRAN
等）使用的数组下标可能是 1。在移植代码的时候，可能会忽视这种问题。此时借助负数索引值就可以用
查找 C/C++数组中的第一个元素。 
#include  
int main() 
{ 
        int random_value=0x11223344; 
        unsigned char array[10]; 
        int i; 
        unsigned char *fakearray=&array[-1]; 
        for (i=0; i<10; i++) 
                array[i]=i; 
        printf ("first element %d\n", fakearray[1]); 
        printf ("second element %d\n", fakearray[2]); 
        printf ("last element %d\n", fakearray[10]); 
        printf ("array[-1]=%02X, array[-2]=%02X, array[-3]=%02X, array[-4]=%02X\n", 
                array[-1], 
                array[-2], 
                array[-3], 
                array[-4]); 
}; 
指令清单 52.1  非优化的 MSVC 2010 下的程序  
 1  $SG2751 DB     'first element %d', 0aH, 00H 
 2  $SG2752 DB     'second element %d', 0aH, 00H 
 3  $SG2753 DB     'last element %d', 0aH, 00H 
 4  $SG2754 DB     'array[-1]=%02X, array[-2]=%02X, array[-3]=%02X, array[-4' 
 5          DB     ']=%02X', 0aH, 00H 
 6 
 7  _fakearray$ = -24   
   ; size = 4 
 8  _random_value$ = -20  
; size = 4 
 9  _array$ = -16  
; size = 10 
10  _i$ = -4  
; size = 4 
11  _main 
PROC 
12    
push       ebp 
13  
mov       ebp, esp 
14  
sub       esp, 24 
15  
mov       DWORD PTR _random_value$[ebp], 287454020 ; 11223344H 
16  
; set fakearray[] one byte earlier before array[] 
17  
lea       eax, DWORD PTR _array$[ebp] 
18  
add       eax, -1 ; eax=eax-1 
19  
mov       DWORD PTR _fakearray$[ebp], eax 
20  
mov       DWORD PTR _i$[ebp], 0 
21  
jmp       SHORT $LN3@main 
22  
; fill array[] with 0..9 
23  $LN2@main: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权