### Threat Model and Content-Sniffing XSS Attacks

In a typical content-sniffing Cross-Site Scripting (XSS) attack, the attacker uploads malicious content to a legitimate website and then directs the user's browser to render that content. Our threat model is based on the standard Web attacker threat model [33]. Although the Web attacker may have more capabilities than necessary for a content-sniffing XSS attack, we use this comprehensive threat model to ensure our defenses are robust.

#### Attacker Capabilities
- The attacker controls a website with an untrusted domain, such as `https://attacker.com/`. These capabilities can be acquired at a nominal cost on the open market.

#### User Behavior
- The user visits `https://attacker.com/` but does not treat it as a trusted site. For example, the user does not enter passwords or other sensitive information.
- When the user visits the attacker's site, the attacker can redirect the user to arbitrary URLs. This assumption aligns with a fundamental principle of web security: browsers should protect users from malicious sites.

#### Honest Website Behavior
- The honest website allows the attacker to upload content, which is then made available at a specific URL. For instance, a social networking site might allow users to upload images or videos.
- We assume that the honest site imposes restrictions on the type of content that can be uploaded.

### Constructing a Useful Threat Model

The most challenging aspect of creating a useful threat model is characterizing how honest websites restrict uploads. Some sites, like file storage services, may allow users to upload any content, while others, such as photo-sharing sites, may restrict the types of files and perform validation before serving them to other users. Based on our case studies, many sites either restrict the `Content-Type` they serve or filter content upon upload, or both.

#### Restricting Content-Type
- Some websites enforce the `Content-Type` header when serving user-uploaded content. For example, a social networking site might ensure that photographs are served with a `Content-Type` starting with `image/`, and a conference management application might only serve papers with a `Content-Type` of `application/pdf` or `application/postscript`.

#### Filtering Uploads
- When users upload content, some sites use functions like PHP’s `finfo_file` to check the initial bytes of the file and verify that the content matches the appropriate MIME type. For example, a photo-sharing site might ensure that uploaded files are actual images, and a conference management site might verify that documents are in PDF or PostScript format.
- Although not all MIME types can be recognized by their initial bytes, we assume that sites only accept commonly used types, where the initial bytes are sufficient for identification.

We also assume that the honest site uses standard XSS defenses [34] to sanitize untrusted portions of HTML documents. However, these sanitizers are not applied to non-HTML content, as using an HTML sanitizer on an image would be ineffective. For example, converting an image to HTML makes little sense because the GIF signature and HTML signature can overlap. Firefox 3 and Google Chrome use a strict HTML signature that requires the first non-whitespace characters to be a known HTML tag. According to our experiments on the Google search database (see Section 3.4), tolerating leading whitespace matches 9% more documents than requiring the initial characters to be a known HTML tag. We recommend this HTML signature because it is prefix-disjoint from other signatures.

### Compatibility Evaluation

To evaluate the compatibility of our principles for secure content sniffing, we implemented a content-sniffing algorithm that adheres to our design principles and collaborated with Google to deploy it in Google Chrome. Our evaluation process included:

1. **Search Database Analysis**: We evaluated the compatibility of our design principles over Google’s search database, which contains billions of web documents.
2. **Manual Testing**: Google’s quality assurance team manually tested our implementation for compatibility with the 500 most popular websites.
3. **Deployment and Metrics**: We deployed the algorithm to millions of users and improved it using aggregate metrics.

#### Search Database Findings
- `<!DOCTYPE html>` is the most frequently occurring initial HTML tag in documents without a `Content-Type` header.
- `<html>` is the next most frequent initial HTML tag in documents missing a `Content-Type` header, occurring with a relative frequency of 0.612.
- `<html>` occurs as the initial bytes of documents with a `Content-Type` of `text/plain` with a relative frequency of 0.556, similar to documents with an `unknown/unknown` `Content-Type`.
- `<html>` occurs as the initial bytes of documents with a bogus `Content-Type` (i.e., missing a slash) with a relative frequency of 0.059.
- When the `Content-Type` is valid, HTML tags occur with a relative frequency less than 0.001.

From these observations, we conclude that, except for `text/plain`, a content-sniffing algorithm can avoid privilege escalation by limiting when it sniffs HTML and remain compatible with a large percentage of the web. We do not draw a conclusion about `text/plain` because the data indicates that not sniffing HTML from `text/plain` is roughly as compatible as not sniffing HTML from `unknown/unknown`, yet none of the other major browsers sniff HTML from `unknown/unknown`.

#### Top 500 Sites
- We implemented a content-sniffing algorithm for Google Chrome according to our design principles. The Google Chrome quality assurance team manually analyzed the 500 most popular websites with and without our content-sniffing algorithm.
- With the algorithm disabled, the team found several incompatibilities with major websites, including Digg and United Airlines. With the algorithm enabled, the team found one incompatibility due to the algorithm not sniffing `application/x-shockwave-flash` from `text/plain`. However, every major browser is incompatible with this page, suggesting that the incompatibility is likely to be resolved by the website operator.

#### Metrics
- To improve the security of our algorithm, we instrumented Google Chrome to collect metrics about the effectiveness of each signature from users who opt-in to sharing their anonymous statistics.
- Based on this data, we found that six signatures (see Table 3) are responsible for 96% of the time the content-sniffing algorithm changes the MIME type of an HTTP response.
- We removed over half of the signatures used by the initial algorithm, which had a negligible impact on compatibility. Removing these signatures reduced the attack surface presented by the algorithm.

Google has deployed our modified algorithm to all users of Google Chrome.

### Adoption

Our design principles have been standardized by the HTML 5 working group and adopted in part by Internet Explorer 8.

#### Standardization
- The HTML 5 working group has adopted both of our content-sniffing principles in the draft HTML 5 specification [5]. The current draft advocates using prefix-disjoint signatures and classifies MIME types as either safe or scriptable.
- Content served with a safe MIME type carries no origin, but content served with a scriptable MIME type conveys the (perhaps limited) authority of its origin. The specification allows browsers to sniff safe types from HTTP responses with valid `Content-Types` (such as `text/plain`) but forbids browsers from sniffing scriptable types from these responses, avoiding privilege escalation.

#### Internet Explorer 8
- The content-sniffing algorithm in Internet Explorer 8 differs from that in Internet Explorer 7. The new algorithm does not sniff HTML from HTTP responses with a `Content-Type` header that begins with `image/` [11], partially avoiding privilege escalation.
- This change significantly reduces the content-sniffing XSS attack surface but does not mitigate attacks against sites, such as HotCRP, that accept non-image uploads from untrusted users.

### Related Work

#### Current Approaches
- **Transform Content**: Websites can defend against content-sniffing XSS attacks by transforming user uploads. For example, Flickr converts user-uploaded PNG images to JPEG format, which saves on storage costs and makes it harder to construct chameleon documents. However, this approach does not guarantee security, as an attacker might still craft a chameleon that survives the transformation.
- **Host Content Off-Domain**: Some sites host user-supplied content on an untrusted domain. For example, Wikipedia hosts English-language articles at `en.wikipedia.org` but hosts uploaded images at `upload.wikimedia.org`. This approach limits the attack surface but complicates the installation of redistributable web applications and limits interaction with the content.
- **Disable Content Sniffing**: Users can disable content sniffing using advanced browser options, though this comes at the cost of compatibility. Sites can disable content sniffing for individual HTTP responses by adding a `Content-Disposition` header with the value `attachment`, causing the browser to download the file instead of rendering its contents. Another approach, used by Gmail, is to pad `text/plain` attachments with 256 leading whitespace characters to exhaust the snifﬁng buffer. Internet Explorer 8 allows sites to disable content sniffing for individual HTTP responses by including an `X-Content-Type-Options` header with the value `nosniff`.

#### Historical Instances
- Previous references to content-sniffing XSS attacks focus on the construction and mitigation of such attacks. These attacks highlight the need for robust content-sniffing algorithms and the importance of adhering to best practices in web security.