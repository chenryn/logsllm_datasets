完成这些步骤之后，堆的布局应该如图8-12所示。
伪造的Arma（已释放，可拉内容）
守护内存块（已分配）
伪造的Arena
Blmallo
内存族
守护内存块
rena头部
Render*
Render*
UaF
伪造的虚函
数指针表
未分配内存，但可控
下一个空闲块
函数指针偏移
图8-12构造后的 RenderArena 和 dmalloc 状态
3.使用已分配的内存块
除了之前提到的方法，攻击者还可以在RenderArena后面放置一个已分配的dlmalloc内存块。
这种技术特别有用，因为在堆的分配释放和触发漏洞过程中，已分配的内存块不太可能被修改。
与上一种方法类似，虚函数表指针会指向RenderArena的结尾。当虚函数被调用时，程序会读取
加上偏移后地址的数值来作为函数指针，此处的数值可以被攻击者控制。
攻击者控制了PC寄存器以及足够的内存来进行栈迁移和ROP，距离完全控制程序又近了一步。
---
## Page 243
8.4小结
227
8.4小结
本章讨论了ARM平台上用户空间的一系列内存破坏漏洞利用技术，详细介绍了栈和堆内存
相关的实现细节和利用技术。尽管讨论的内容没有覆盖所有可能出现的漏洞类型或利用技术，但
是为漏洞利用开发提供了思路。
基于堆的内存破坏攻击与应用本身以及分配器十分相关，是目前最常见的漏洞类型。释放后
重用漏洞可以让攻击者使用新分配内存块来重用已经释放的内存块，相当于引入了别名引用bug。
我们以Android的原生分配器dlmalloc和WebKit特定分配器RenderArena为例，讨论了这种情形。
虚函数表为堆破坏漏洞提供了一种劫持原生代码执行流的方式。
通过考察一些已经公开的真实漏洞利用，可以发现简单的思路能让利用更稳定，并降低开发
成本。GingerBreak利用展示了如何利用数组下标漏洞来修改GOT。zergRush利用是Android系
统上栈破坏利用以及绕过栈cookie保护的一个突出例子。Mempodroid则展示了一种非传统的技
术，利用内核漏洞获得权限提升。
最后，本章介绍了几种思路，用来利用Webkit渲染引擎中公开且已修复的释放后重用漏洞，
解释了编写JavaScript来控制堆的关键步骤。了解本章介绍的技术之后，就可以继续学习第9章
中的构造栈迁移和ROP链了。
---
## Page 244
第9章
ROP漏洞利用技术
本章主要介绍ROP（RetumOriented Programming）漏洞利用技术基础，并解释使用这种技
术的必要性。与x86平台相比，ARM架构下的ROP技术有着较大的差异，因此本章会介绍ARM
平台相关的一些新概念。本章以bionic动态链接库这个相对充裕和稳定的ROP代码源为例来进
行介绍，并提出一些自动化的思路。
9.1历史和动机
ROP是一种利用内存中现有原生代码作为攻击载荷，面不是注入自定义指令载荷（即
shellcode）的漏润利用方法。已经有许多学术论文以各种不同的抽象程度对其进行了描述，但是
这一技术最早要追溯到1997年SolarDesigner发布在Bugtrap邮件列表中的return2libc技术
（http://seclists.org/bugtraq/1997/Aug/63）。在那篇文章中，Solar演示了一种重用现有x86代码片段
来绕过堆栈不可执行保护机制的方法。到了2000年5月，Tim Newsham在他的 Solaris7漏洞利
用中首次演示了链接超过两个调用的方法（http:/seclists.org/bugtraq/2000/May/90）。
在ARM环境中重用已有原生代码并使用ROP利用技术，有如下三个主要的原因。首先，最
明显的原因是第12章中讨论的XN保护技术。第二，是ARM架构中数据和指令缓存的分离机制，
我们随后会提到。最后，在某些ARM平台上，操作系统加载器会执行“代码签名”，所有的二进
制文件都必须使用密码学方法进行签名。这种平台上，非预期代码的执行（如通过利用漏洞引人）
就需要使用ROP技术来重用已有代码片段。
XN保护技术让操作系统能够将内存页标记为可执行或不可执行。一旦标记为不可执行内存
页中的指令被执行时，处理器就会抛出异常。这样，攻击者就无法直接将控制流劫持到内存中的
原生代码载荷中运行。攻击者必须复用程序可执行地址空间内的现有代码。要想完全控制程序执
行流，攻击者可以完全通过组装现有代码的片段来实现，也可以只通过现有代码片段将攻击者控
制的内存标记为可执行，然后执行原生代码。
代码和指令缓存分离
因为ARM9架构包含了ARMv5特性，处理器的指令和数据使用了两种分离的缓存：
---
## Page 245
9.1历史和动机
229
ARM9TDMI采用指令和数据接口分离的哈佛总线结构，这就使得指令和数据访问
可以并发进行，极大地降低了处理器的CPI。尽管内核可以使用等持状态来支持非序列
化访问或低速内存系统，但是在性能优化方面，在单周期内实现指令和数据接口的内存
访问是必要的。
基于ARM9TDMI的处理器，其典型实现拥有哈佛结构的缓存，在缓存上使用了相
同的内存结构，这样数据接口就可以访问指令的内存空间。ARM940T就是一个例子。
而SRAM的系统就不能使用这种技术了，必须换一种方式。
ARM有限公司，《ARM9TDMITM技术参考手册》3.1节：“关于内存接口”，1998。
http:/infocenter.arm.com/help/index.jsp?topic/com.arm.doc.ddi0091a/CACFBCBE.html
因此，即便没有XN保护机制，写人内存的原生指令也不是直接可执行的。指令数据最初被
写入数据缓存，随后存人主存并清空缓存。如图9-1所示：
ARM CPU
L1级缓存
指令解析引擎
指令缓存
主存
内存单元
数据缓存
图9-1数据和指令缓存
当控制流转移到刚写入的指令时，指令解码引肇会尝试从这个特定地址取出指令，并首先查
询指令缓存。这时候可能会出现如下三种情况。
口这个地址已经在指令缓存中，不会涉及到主存。会执行原先的指令，面不是攻击者改写
的载荷指令。
口缓存没有命中，就从主存中取出指令：然面，由于数据缓存并没有被清空，所以指令是
从相应内存位置取得的、攻击者写人之前就存在的数据。攻击者的载荷指令依然没有被
执行。
---
## Page 246
230第9章ROP漏润利用技术
口数据缓存已经被清空，同时指令缓存中没有这个地址。此时指令直接从主存中取得，攻
击者的载荷指令才会被执行。
由于攻击者不会往包含代码的地址空间写入数据，所以这一地址不太可能会出现在指令缓存
中。然面，当数据缓存还没有被清空时，仍然无法正确地获取攻击载荷指令。这种情况下，攻击
者可以利用存在的、合法的代码（可能已经在指令缓存中）.或者仅仅写入很多数据，来清空数
据缓存。实施这种利用时，在攻击者写人载荷之后，往往不太可能再写人很多数据，所以重用己
有代码是必要的方法。
注意在开发漏洞利用代码时，分离的数据和指令缓存往往会带来很大的廉烦，难以识别何时
应该从调试器配置切换到非预期的代码执行。当命中断点或者切换到调试器进程的时候，
数据缓存通常会被清空。调试器只看到主存中的内存，而非其正位于指令缓存的内存。
假如目标没有带者调试器运行，进程就会前溃，就像是戏击者的载有那样。要随时注意
这种原因所导致的异常崩资。
ARM处理器有一些特殊的指令来清空缓存。这些指令修改了CP15系统控制协处理器的寄存
器。不幸的是，这些指令涉及到特权寄存器的访问，因此不能在用户模式下运行。PLI指令也可
以被用来晴示指令缓存需要重新加载，但是这点不能保证被执行。
操作系统使用系统调用来提供清空指令缓存的机制。在Linux上，相关系统调用可以做到这
一点，也可以直接使用cacheflush函数。通常，在获得任意代码执行之前，是不可能调用这
种函数的：但是，调用mprotect函数时，LinuxKemel也会清空缓存。这样就可以忽略缓存分
离的影响，只要使用ROP链把内存标记为可执行后，攻击者的载荷就能在那里执行。
9.2ARM架构下的ROP基础
通常来说，目标应用不会直接包含攻击者可以用来劫持控制流的一整块代码，所以攻击者需
要通过组合现有代码片段来实现完整的载荷。当执行完一个代码片段之后，要继续保持对程序计
数器的控制是一个挑战。
早期的ret2libc技术在x86平台上实现了将一个或多个ibc函数调用进行串接。x86架构上，
函数的返回地址存储在栈上，这个返回地址指明了函数返回后程序应该在哪里执行。通过操纵栈
上的数据，攻击者可以提供libc函数返回后调用的地址，用来替换合法的函数返回地址。
ROP是比ret2libc更为通用的技术。ROP不仅可以使用整个函数，还可以使用程序中的小块
代码片段，称为gadget。为了维持对程序计数器的控制，这些gadget通常以函数返回指令为结尾。
攻击者可以选取一系列gadget，来组合成他们想要的载荷。图9-2展示了如何组合这些gadget来
实现攻击者的载荷。
---
## Page 247
9.2ARM架构下的ROP基础
231
gadget
movrax,rbx
ret
地址1
ret
mov
rei,
rcx
地址2
ca11
[zax]
ret
地址3
图9-2x86平台栈上的 ROP Gadget 链
进一步扩展这种技术，你可以使用任何以间接跳转指令结尾的gadget，例如间接条件分支指
令或者从寄存器读取的分支指令。除了相应寄存器需要事先加载好下一个gadget的地址外，这个
方法与ROP非常类似。由于这种技术非常依赖于实际可用的gadget，所以本章不作过多深人介
绍。
9.2.1ARM子函数调用
根据ARMABI（应用二进制接口，ARM平台上编译后软件结构的标准定义），子函数的返
回地址通常不存储在栈上，返回地址会存在特定用途的链接寄存器中。通过b1或blx指令调用
函数时，会把下一条指令的地址存人LR寄存器，之后才会开始执行函数。函数执行完后，使用
bx1r指令来返回。由于ARM平台下的程序计数器（PC）是可以像其他寄存器那样读写的，所
以可以将寄存器LR中的值复制到PC寄存器中。因此，moV pc，1r指令也可以作为有效的函
数结尼。
ARM处理器支持两种主要的执行模式：ARM和Thumb模式（包含Thumb2扩展）。两种模
式间的切换使用一种叫作Interworking的技术。例如，bx1r指令会查看1r寄存器的最低比特
位：如果是1，则切换到Thumb模式：如果是0.则切换到ARM模式。实际上，这个最低位存
储在当前程序状态寄存器（CPSR）中的第五个比特位中。这个比特被称为T-bit，决定了处理器
处于何种执行模式。也就是说，如果程序要调用Thumb模式下的函数，那么b1和blx指令就
会将1r寄存器的最低位设置为1。所以moVDc，1r这条指令只能用在调用和被调用函数都在
ARM模式下的情形。在ARMv6架构中，现代编译器只会为函数返回生成bx1r指令，因为这
条指令和movpc，1r没有任何性能差别，如图9-3所示。
---
## Page 248
232
第9章ROP漏洞利用技术
LR寄存器内容
A
31
31
31
6 5  4
PC寄存器内容
CPSR客存器内容
图9-3函数返回的 Interworking
读到这里，漏洞利用开发者可能会问：传统x86平台上的技术依赖于覆盖栈上的返回地址，
那在ARM平台下又可以如何利用简单的栈溢出漏洞呢？对于leafprocedure来说，使用寄存器来
存储返回地址非常好，但是对于函数又想调用其他子函数的情况，这种方法是不行的。为了实现
这一点，ARM编译器生成的代码会在函数人口之前把1r的值保存在栈上，在在执行bx1r、
返回调用函数之前，从栈恢复1r，如下面的代码所示。
·调用子函数的ARM指令