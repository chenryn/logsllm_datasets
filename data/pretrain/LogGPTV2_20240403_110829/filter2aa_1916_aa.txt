java反序列化基础知识总结
java的类加载过程
1. 首先是调用 public Class loadClass(String name) 方法，通过public方法调用保护方法
protected Class loadClass(String name, boolean resolve)  
2. 在 protected loadClass 方法中，第400行会调用一个 findLoadedClass 方法判断当前类是否已
经加载。如果类已经加载，直接返回当前类的类对象。
3. 如果创建当前 ClassLoader 时传入了父类加载器( new ClassLoader (父类加载器))就使用父类加载
器加载 TestHelloWorld 类，否则使用 JVM 的 Bootstrap ClassLoader 加载。 
4. 如果通过类加载器没有办法加载类，则会通过 findClass 方法尝试加载类。 
5. 如果当前的 ClassLoader 没有重写 findClass 方法，则会直接返回类不存在。跟进 findClass 方
法进行查看。如果当前类重写了 findClass 方法并通过传入的类名找到了对应的类字节码，那么
应该调用 defineClass 方法去 JVM 中注册该类。
6. 如果调用 loadClass 的时候传入的 resolve 参数为true，那么还需要调用 resolveClass 方法链
接类,默认为false。
7. 返回一个JVM加载后的java.lang.Class类对象
8. 通过重写 ClassLoader#findClass 方法实现自定义类的加载.
package ClassLoader_;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.lang.reflect.Method;
import java.util.Arrays;
public class selfClassload_ extends ClassLoader{
    public static String className="ClassLoader_.HelloWorld";
    public static byte[] fileByte;
    public static void main(String[] args) throws Exception {
        FileInputStream fis=new 
FileInputStream("D:\\Java\\project\\study\\serializeSummary\\src\\HelloWorld.cla
ss");
        fileByte=fileToByte(fis);
        System.out.println(Arrays.toString(fileByte));
        selfClassload_ classload = new selfClassload_();
        Class aClass = classload.loadClass(className);
        Object helloWorld = aClass.newInstance();
        Method hello = helloWorld.getClass().getMethod("hello");
        System.out.println((String)hello.invoke(helloWorld));
    }
    @Override
    protected Class findClass(String name) throws ClassNotFoundException {
        if (name.equals(className)){
            return defineClass(className,fileByte,0,fileByte.length);
        }
        return super.findClass(name);
    }
    public static byte[] fileToByte(FileInputStream fis) throws Exception{  //
将.class文件转成二进制编码
        byte[] buffer=null;
Class类
1. 上面讲到通过 loadClass 方法加载之后得到是一个 java.lang.Class类对象 ，关于这个 Class 类
对象需要简单说明一下。在java中存在一个 Class 类，作用是当类加载完成之后将类的各种属性，
方法进行封装成单独的对象。
2. Source阶段Person.class表示Person.java的字节码文件，在Class类对象阶段，通过实例化一个
Class类生成一个Class类对象用于描述Person.class字节码当中的内容，然后runtime阶段创建对
象，也是通过Class类对象进行创建的。
3. 一个小小案例解释一下 Class 类对象.
        ByteArrayOutputStream byteArrayOutputStream = new 
ByteArrayOutputStream();
        byte[] b=new byte[1024];
        int n;
        while ((n=fis.read(b))!=-1){
            byteArrayOutputStream.write(b,0,n);
        }
        fis.close();
        byteArrayOutputStream.close();
        buffer=byteArrayOutputStream.toByteArray();
        return  buffer;
    }
}
package class_;
public class classClass {
    public static void main(String[] args)  throws Exception{
        Person person = new Person();
        Class aClass = Class.forName("class_.Person");
        System.out.println(person.getClass());
        System.out.println(Person.class.getClass());
        System.out.println(aClass.getClass());
    }
}
解释
1. person对象 -->类型Person类
2. aclass对象 -->类型Class类（Class类的一个对象）
3. 在加载类之后，在堆中就产生一个Class类型的对象（一个类只有一个Class对象），这个对象包含
了被加载的类的完整结构信息。通过这个对象得到类的结构，这个Class类型的对象就像一面镜
子，可以看到类的结构，所以形象的称之为反射。
关于class类的几个点：
1. Class也是类，因此也继承Object类（类图）
2. Class类对象不是new出来的，而是系统创建的
3. 对于某个类的Class类对象，在内存中只有一份，因此类只加载一次。
4. 每个类的实例都会记得自己是由哪个Class实例生成的
5. 通过Class可以完整的得到一个类的完整结构，通过一系列的API
6. Class对象是存放在堆当中的
7. 类的字节码二进制数据是放在方法区的，有的地方称之为类的元数据（包括方法代码，变量名，方
法名，访问权限等等）
java反射
概念：
将类的各个组成部分封装为其他对象，这就是反射机制
Java反射操作的是java.lang.Class对象。 
在加载类之后，在堆中就产生一个Class类型的对象（一个类只有一个Class对象），这个对象包含了被
加载的类的完整结构信息。通过这个对象得到类的结构，这个Class类型的对象就像一面镜子，可以看到
类的结构，通过对Class类提供的一系列API就可以对某个对象进行操作。所以形象的称之为反射。
person.java
package reflect1;
public class Person {
    private String name="张三";
    public int age=10;
    private int bge=20;
    protected int cge=30;
    int dge=40;
    public Person(){
    }
1. 反射获取 class 类对象
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", bge=" + bge +
                ", cge=" + cge +
                ", dge=" + dge +
                '}';
    }
    public void eat(){
        System.out.println("eating。。。");
    }
    public void say(String content){
        System.out.println(content);
    }
}
package reflect1;
public class Demo1 {
    public static void main(String[] args) throws Exception {
        //获取class类对象的方式
        //字节码阶段，此时字节码还未进入内存当中
        //Class.forName("全类名")，将字节码文件加载进入内存，返回CLass对象
        Class cls1=Class.forName("reflect1.Person");
        System.out.println(cls1);
        //字节码文件已经加载进入内存
        //通过类名获取。
        //类名.class
2. 反射获取成员变量
        Class cls2=Person.class;//
        System.out.println(cls2);
        Class runtime2=Runtime.class;
        System.out.println(runtime2);
        Runtime runtime3=Runtime.getRuntime();
        System.out.println(runtime3.getClass());
        //runtime阶段
        //对象.getclass()  在Object类中定义，全部对象都继承了这个方法
        Person p=new Person();
        Class cls3=p.getClass();
        System.out.println(cls3);
    }
}
/*
类加载器加载class文件进入内存
类加载器对应java的ClassLoader对象
在内存中通过Class类来描述.class字节码文件
Class类用来描述字节码的内容
将其余类对象的变量封装为Field对象
构造方法封装为Constructor对象
成员方法封装为Method对象
同一个字节码文件在一次程序的运行过程中，只会被加载一次。
 */
package reflect1;
import java.lang.reflect.Field;
public class Demo2 {
    public static void main(String[] args){
        /*
        获取全部成员变量
         */
        try {
            Class personClass = Person.class;
            Field[] fields=personClass.getFields();  //获取所有public修饰的成员变量,
其余类型都不可以
            for (Field field:fields){
                System.out.println(field);  //public int reflect1.Person.age
            }
            Field ageField=personClass.getField("age");  //同样只能获取public成员变
量
            System.out.println(ageField);
            //操作成员变量
            //Person p=new Person();