 **Do you want to request a _feature_ or report a _bug_?**
Bug
**What is the current behavior?**
In React 15, render errors which killed execution of the app would leave the
existing HTML on the page. In React 16, the existing HTML gets wiped (the
"white screen of death").
**What is the expected behavior?**
It would be a _much better_ user experience if we could configure it so the
existing HTML remained if render failed. App functionality would fail, but the
page would still be there, and users could use standard HTML links etc to
continue navigating. In some cases they may not even notice that the app
broke.
I'm aware of Error Boundaries as a proposed solution for this in React 16.
However, these do not seem like a great solution for us for two reasons:
  1. We'd need to pepper a lot of them across the entire codebase to get reasonable granularity and restrict the impact of errors, for example to a `` on an `` or whatever. This is a major code change for an app which might have hundreds of components.
  2. Even if we did the above, we'd get that segment of the app (which may be significant) replaced by an error message. What if there's an unexpected error in ``? That's the entire purpose of the page, replaced by an error message. Far better for us to stop JS execution and leave the user with static HTML.
Obviously, bugs in our app are our fault and we should fix them. But they're
not always predictable: for example, today we tracked down a bug to
`localStorage.setItem` throwing an exception only on Safari 10- in Private
Browsing mode. That is a tough issue to anticipate. It's difficult to ensure
the app is bug-free, and if we miss something, the outcome in React 16 is
catastrophic instead of merely a reduction of the user experience.
Here's a demo in React 15: https://codepen.io/giles-v/pen/GdRyBX  
Here's the same code in React 16: https://codepen.io/giles-v/pen/xjxYEY