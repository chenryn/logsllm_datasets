title:Crash graphs: An aggregated view of multiple crashes to improve crash
triage
author:Sunghun Kim and
Thomas Zimmermann and
Nachiappan Nagappan
Crash Graphs: An Aggregated View of Multiple Crashes to Improve Crash Triage  
Sunghun Kim* 
Hong Kong University of Science and Technology  
Hong Kong 
PI:EMAIL 
Abstract—Crash  reporting  systems  play  an  important  role  in 
the overall reliability and dependability of the system helping 
in  identifying  and  debugging  crashes  in  software  systems 
deployed in the field. In Microsoft for example, the Windows 
Error Reporting (WER) system receives crash data from users, 
classifies them, and presents crash information for developers 
to  fix  crashes.  However,  most  crash  reporting  systems  deal 
with crashes individually; they compare crashes individually to 
classify  them,  which  may  cause  misclassification.  Developers 
need  to  download  multiple  crash  data  files  for  debugging, 
which requires non-trivial effort. In this paper, we propose an 
approach  based  on  crash  graphs,  which  are  an  aggregated 
view  of  multiple  crashes.  Our  experience  with  crash  graphs 
indicates  that  it  reduces  misclassification  and  helps  identify 
fixable crashes in advance.  
INTRODUCTION 
Keywords-component; crash; graph; triaging; network 
I. 
Crash  reporting  systems 1  such  as  Windows  Error 
Reporting (WER) [13], Mozilla Crash Stats [15], and Apple 
CrashReporter  [3]  have  been  widely  deployed  in  practice. 
The crash reporting systems help organizations determine the 
overall reliability of their software systems in the field.  
The  crash  reporting  systems  collect  crash  related  data, 
classify  them,  and  present  the  information  to  developers  to 
fix crashes [9, 11]. For example, WER receives crash stack 
traces  from  users  in  the  field.  Then,  WER  identifies  crash 
root  cause(s)  using  heuristics  (analyzing  the  traces  using 
machine learning/pattern analysis algorithms) and put similar 
crashes into one bucket. WER counts crashes per bucket to 
decide  which  buckets  to  fix  first.  If  the  number  of  crash 
reports  in  a  bucket  exceeds  a  threshold  value,  then  WER 
automatically  reports  such  crashes  as  bugs.  Developers 
investigate  these  bug  reports  and  fix  the  crashes  using  the 
collected crash data from users in the field. 
This practice helps developers quickly identify important 
and  frequent  crashes  and  fix  them.  Crash  data  provided  by 
users is useful for developers to identify the root causes of 
the crashes and as a result debugging crashes is easier. 
However,  most  crash  reporting  systems  including  WER 
deal with crashes individually rather than aggregating them 
into  a  combined  view  [9].  This  individual  crash  based 
technique is computationally efficient for data collection but 
difficult to analyze the vast repositories of data. For example, 
WER  uses  individual  crash  data  to  bucket  crashes.  When 
considering  crash  data  one  by  one,  WER  may  misclassify 
crashes.  
* Sunghun Kim was a visiting researcher with the Empirical Software 
Engineering  Research  Group  (ESE),  Microsoft  Research  in  the 
summer of 2010 when this work was carried out. 
Thomas Zimmermann, Nachiappan Nagappan 
Microsoft Research  
Redmond, WA, USA  
{tzimmer, nachin}@microsoft.com
When WER reports a crash as a bug, it provides multiple 
crash data files to developers. Then, to investigate and debug 
one  crash  bug,  developers  need  to  download  multiple  data 
files  one  by  one,  since  crash  bug  reports  include  multiple 
crash data files. This process requires non-trivial effort. This 
is similar in spirit to how other crash collection systems (like 
Mozilla) work [11]. 
In  this  paper,  we  propose  Crash Graphs  which  capture 
multiple crashes at once and provide an aggregated view of 
multiple crashes in the same bucket. These crash graphs are 
useful  for  developers  to  get  high-level  information  about 
crashes in the same bucket. Crash graphs are also useful for 
crash 
aggregated 
classification 
information of crashes. 
We evaluate crash graphs using two Microsoft products, 
Microsoft  Windows  and  Microsoft  Exchange  Server.  First, 
we  use  crash  graphs  to  detect  duplicate  crash-bug  reports. 
Our crash graphs identify duplicate bug reports with 71.5% 
precision  and  62.4%  recall.  Second,  we  predict  fixable 
crashes  using  features  from  crash  graphs.  A  machine-
learning algorithm using crash graph features predicts fixable 
crashes  with  72~80%  precision,  which 
is  useful  for 
automatic crash triaging.  
A.  Contributions 
include 
since 
they 
Our paper makes the following contributions: 
•  Crash  Graphs:  We  propose  an  aggregated  view  of 
multiple crashes in the same bucket. 
•  Experience: We present several experiences with crash 
graphs,  which  experimentally  show  the  usefulness  of 
crash  graphs  for  crash  triage  tasks,  more  specifically, 
predicting  fixable  crashes  and  detecting  duplicate 
reports. 
Overall,  our  experiences  in  practice  reveal  the  crash  graph 
approach,  an  aggregated  view  of  crashes,  is  efficient  for 
crash triaging.  
B.  Section Guide 
In the remainder of the paper, we start by presenting the 
background of crash reporting systems in Section II. Section 
III  presents  our  crash  graph  building  algorithms  and 
hypothesizes the usefulness of crash graphs. Our crash graph 
experience is presented in Section IV and its limitations are 
discussed in Section V. Section VI surveys related work and 
Section VII concludes. 
II.  BACKGROUND  
In this section, we present the WER system, the common 
crash debugging process using WER, and WER challenges. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:42:01 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE486A.  Windows Error Reporting System 
Software crashes are manifestations of errors from actual 
field  usage.  Developers  spend  tremendous  resources  and 
efforts to fix crash bugs before releasing products. However, 
often, released programs include bugs/errors (due to various 
factors  ranging  from  incorrect  code  to  improper  interaction 
with third party applications), and some of the bugs manifest 
as crashes in the field.  
To  collect  crash  information  from  the  field,  crash-
reporting systems such as WER, Apple CrashReporter, and 
Mozilla crash stats have been proposed and deployed widely. 
Most  of  these  systems  have  three  modules:  (1)  collecting 
crash information from clients, (2) classifying crashes in the 
server  side,  and  (3)  presenting  the  crashes  to  developers  to 
facilitate debugging.  
Figure 1 shows the WER system overview.  
Client
WER Server
Bug reports
crash
bucketing
minidumps
buckets
Figure 1.   WER System overview 
...
...
...
...
...
...
auto-crash
bug reports
Collecting Crashes: Windows OSs such as Windows XP 
or Windows 7 include a WER client in the OS level. Some 
programs  such  as  Microsoft  Office  have  their  own  WER 
clients.  When  a  crash  occurs  in  the  field,  the  WER  client 
shows  a  popup  screen  and  allows  users  the  option  to  send 
crash information as shown in Figure 2. If users accept, the 
WER client collects crash related data such as stack traces, 
static  variables  and 
this 
information as a minidump file. This minidump file is sent to 
the WER server. 
register  values,  and  packs 
Figure 2.   WER client popup screen  
Classification: The WER server classifies the minidump 
files received from WER clients. First, WER server identifies 
the  names  of  crashed  modules  by  resolving  Windows 
Symbols which are similar to debug symbols [9]. Then, using 
heuristics  called  bucketing  algorithms  [9],  the  WER  server 
classifies  crashes  based  on  causes  and  collects  similar 
crashes in the same bucket. This bucketing process is a core 
part  of  WER.  Buckets  are  the  basic  unit  of  crash  triaging. 
WER  counts  crash  hits  per  bucket  to  determine  crashes 
occurring most frequently. After crash hits of buckets exceed 
a predefined threshold value, WER automatically reports the 
bucket to developers.  
Presenting  Crashes:  WER  presents  highly  hit  buckets 
and  their  crash  data  as  bug  report,  called  auto-crash bugs. 
WER  can  identify  crashed  modules  by  resolving  Windows 
Symbols  and  then  mapping  the  owners  of  the  modules. 
When WER reports auto-crash bugs, WER assigns the bugs 
to the module owners. 
These  bug  reports  include  statistics  such  as  hit  counts, 
client distributions, and crashed software versions. The most 
important  information  in  bug  reports  is  minidump  files 
which includes crash stack traces. Usually an auto-crash bug 
report  includes  more  than  one  minidump  file,  since  WER 
collects  multiple  minidump  files  from  multiple  crashes  for 
each bucket.  
B.  WER Common Debugging Process  
Once  WER  has  automatically  reported  crash  bugs  and 
assigned them to developers, developers start debugging by 
reading the bug report and analyzing the statistics (frequency 
of crashes) associated with the bug report. Then developers 
download  multiple  minidump  files  and  investigate  the 
tools  such  as  windbg 2  and 
crashes  using  debugging 
“!Analyzer” [9]. Often, stack trace information in minidump 
files is very useful to fix the corresponding crashes [6, 9].  
C.  Challenges 
In  this  section,  we  briefly  discuss  challenges  in  crash 
reporting systems.  
Second-bucket problem: In general, the WER bucketing 
algorithm,  based  on  over  500  heuristics  [9]  (we  do  not 
discuss the WER process in detail here as it is not the goal of 
the  paper  and  only  briefly  touch  on  it  given  reference  [9] 
which discusses it in detail) works well and helps developers 
identify crash causes quickly. However, it is possible that the 
bucketing  algorithm  puts  crashes  caused  by  the  same  bug 
into  different  buckets;  this  is  called  the  second-bucket 
problem.  For  MS  Office  products,  about  30%  of  crashes 
have this second bucket problem [9]. 
This second bucket problem yields duplicate bug reports. 
Since WER regards crashes in different buckets as different 
types  of  crashes,  they  become  different  bug  reports,  i.e. 
duplicated  bug  reports.  These  duplicated  bug  reports 
significantly  consume  developers’  resources.  Developers 
often  realize  the  existence  of  duplicates  only  after  putting 
significant  efforts 
the 
corresponding crashes [16, 17].  
the  reports  and 
investigate 
to 
2http://www.microsoft.com/whdc/devtools/debugging/default.mspx  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:42:01 UTC from IEEE Xplore.  Restrictions apply. 
487Manual 
inspection  of  multiple  minidump 
files: 
Multiple minidump files provided in auto-crash bug reports 
constitute useful information for debugging crashes. Though 
the cause of all crashes (in the same bucket) is the same, it is 
possible  that  information  in  different  minidump  files  in  the 
same  bucket  differ.  These  variations  are  very  useful  for 
developers  to  understand  the  context  of  the  crashes  and  to 
identify the root cause (bug) for the crashes. For this reason, 
WER usually provides 10 to 20 minidump files per crash. 
However,  in  the  current  practice,  developers  need  to 
download  multiple  minidump  files  one  by  one  and  analyze 
them. This is a labor-intensive task. In addition, it is possible 
that  one  minidump  file  by  itself  does  not  have  enough 
information to identify the root cause of the crash. 
We propose Crash Graphs to address these challenges. 
III.  CRASH GRAPH 
Crash graphs combine all crash traces in one bucket and 
provide an aggregated view of all crashes in a bucket. Since 
crashes  in  the  same  bucket  share  the  main  cause,  crash 
graphs provide a high-level information of all crash traces in 
detail.  In  addition,  crash  graphs  can  show  trace  variations, 
which help developers understand the context of the crashes 
and identify the bugs. In section III.A, we present the crash 
graph  construction  technique  and  in  section  III.B,  our 
hypotheses evaluating the usefulness of crash graphs. 
A.  Graph Construction 
We construct crash graphs from crash traces in minidump 
files, and the frames (functions) in crash traces are the first 
class  element  of  crash  graphs;  they  become  nodes  in  the 
graphs. Their call relations become edges in the graphs. 
To construct a crash graph from multiple crash traces, the 
first  step  is  to  decompose  each  crash  trace  to  two-frame 
elements. From a crash trace A→B→C→D shown in Figure 
3, we get three two-frame elements, A→B, B→C, and C→D 
by  decomposing  the  crash  trace.  In  the  same  manner,  we 
decompose all crash traces in the same bucket.  
A B C D
crash trace 1
A
F G D
crash trace 2
C D F G
crash trace 3
(a) crash traces
A
B
A
F
C
D
B
C
F
G
D
F
C
D
G
D
F
G
A
F
B
C
D
G
(b) decomposing
(b) crash graph from trace 1, 2, and 3
Figure 3.   A crash graph example from multiple crash traces. 
The frames in a two-frame element become two nodes in 
the graph. Then, we add an edge between these two nodes in 
the  graph.  We  continue  this  process  for  all  decomposed 
elements.  This  graph  construction  technique  is  inspired  by 
bug 
tossing 
(reassignment) 
relations  and  construct  graphs  using 
decomposed elements.  
[10],  which  decompose 
tossing  graphs 
Since  some  frames  may  appear  more  than  one  time, 
nodes  and  edges  in  a  crash  graph  can  be  weighted.  For 
example,  frame  A  appears  2  times  in  traces  in  Figure  3. 
Therefore  weight  of  node  A  in  the  crash  graph  can  be  2. 
Similarly, since edge C→D appears 2 times, the edge weight 
is 2.  
In  this  paper,  we  use  both  weighted  and  un-weighted 
crash graphs for bug triaging tasks. 
B.  Hypotheses 
Crash graphs combine all crashes in the same bucket and 
show the entire view of all crashes. We investigate if crash 
graphs can be used to detect the second bucket problems and 
predict fixable crashes in advance.  
Specifically, we hypothesize the following:  
Hypothesis  1:  Crash graphs can detect duplicate crash 
reports  (the  second  bucket  problem)  with  high  accuracy. 
Currently, WER compares individual crash traces to bucket 
them.  Since  crash  graphs  combine  all  traces  together, 
combined crashes are more efficient in detecting the second 