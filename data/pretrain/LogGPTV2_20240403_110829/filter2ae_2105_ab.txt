                } else {
                    inputSource = new InputSource(new StringReader(this.stringRep));
                }
                return (T) new SAXSource(inputSource);
这里创建`SAXSource`并没有设置`XmlReader`，因为设置XML解析防御的策略在`XmlReader`中，所以看不出来是否存在漏洞。
再看看`StAXSource`，这里是否会导致漏洞取决于`this.inputFactory`属性中保存的`XMLInputFactory`对象，但是虽然`MysqlSQLXML`中有`inputFactory`属性，但是并没有设置这个属性的方法或者操作，而是否在开启XXE的防御是在`XMLInputFactory`对象中设置的，所以这里也看不出来是否有漏洞。
    } else if (clazz.equals(StAXSource.class)) {
                try {
                    Reader reader = null;
                    if (this.fromResultSet) {
                        reader = this.owningResultSet.getCharacterStream(this.columnIndexOfXml);
                    } else {
                        reader = new StringReader(this.stringRep);
                    }
                    return (T) new StAXSource(this.inputFactory.createXMLStreamReader(reader));
                } catch (XMLStreamException ex) {
                    SQLException sqlEx = SQLError.createSQLException(ex.getMessage(), MysqlErrorNumbers.SQL_STATE_ILLEGAL_ARGUMENT, ex, this.exceptionInterceptor);
                    throw sqlEx;
                }
### 为什么SQLSERVER和ORACLE的数据库连接没问题？
#### mssql-jdbc
首先看`mssql-jdbc`是怎么处理的,主要逻辑在`SQLServerSQLXML#getSource`中，判断类型是否为`SteamSource`，如果不是则调用`getSourceInternal`处理。`getSourceInternal`根据不同的类型调用不同的处理方法。
    public  T getSource(Class iface) throws SQLException {
            this.checkClosed();
            this.checkReadXML();
            if (null == iface) {
                T src = this.getSourceInternal(StreamSource.class);
                return src;
            } else {
                return this.getSourceInternal(iface);
            }
        }
         T getSourceInternal(Class iface) throws SQLException {
            this.isUsed = true;
            T src = null;
            if (DOMSource.class == iface) {
                src = (Source)iface.cast(this.getDOMSource());
            } else if (SAXSource.class == iface) {
                src = (Source)iface.cast(this.getSAXSource());
            } else if (StAXSource.class == iface) {
                src = (Source)iface.cast(this.getStAXSource());
            } else if (StreamSource.class == iface) {
                src = (Source)iface.cast(new StreamSource(this.contents));
            } else {
                SQLServerException.makeFromDriverError(this.con, (Object)null, SQLServerException.getErrString("R_notSupported"), (String)null, true);
            }
            return src;
        }
##### getDOMSource
这里确实也会解析`Document`，但是在解析前设置了`secure-processing`,这里应该是防御了XXE漏洞。
    private DOMSource getDOMSource() throws SQLException {
            Document document = null;
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            MessageFormat form;
            Object[] msgArgs;
            try {
                factory.setFeature("http://javax.xml.XMLConstants/feature/secure-processing", true);
                DocumentBuilder builder = factory.newDocumentBuilder();
                builder.setEntityResolver(new SQLServerEntityResolver());
                try {
                    document = builder.parse(this.contents);
    ...
                DOMSource inputSource = new DOMSource(document);
                return inputSource;
            ...
        }
##### getSAXSource
`getSAXSource`在创建`SAXParserFactory`后并没有设置属性来进行安全操作，因此这种方式可能会存在漏洞。
    private SAXSource getSAXSource() throws SQLException {
            try {
                InputSource src = new InputSource(contents);
                SAXParserFactory factory = SAXParserFactory.newInstance();
                SAXParser parser = factory.newSAXParser();
                XMLReader reader = parser.getXMLReader();
                SAXSource saxSource = new SAXSource(reader, src);
                return saxSource;
            } catch (SAXException | ParserConfigurationException e) {
                MessageFormat form = new MessageFormat(SQLServerException.getErrString("R_failedToParseXML"));
                Object[] msgArgs = {e.toString()};
                SQLServerException.makeFromDriverError(con, null, form.format(msgArgs), null, true);
            }
            return null;
        }
虽然单纯从`getSAXSource`函数中并没有直接解析，但是用户在使用下面的代码时，则默认可能会导致XXE漏洞。
    SQLXML xmlVal= rs.getSQLXML(1);
    SAXSource saxSource = sqlxml.getSource(SAXSource.class);
    XMLReader xmlReader = saxSource.getXMLReader();
    xmlReader.setContentHandler(myHandler);
    xmlReader.parse(saxSource.getInputSource());
虽然看起来是有问题的，但当我通过SQLSERVER创建XML类型数据并插入payload时，却爆了`不允许使用内部子集 DTD 分析 XML。请将
CONVERT 与样式选项 2 一起使用，以启用有限的内部子集 DTD
支持。`在SQLSERVER插入`XML`类型数据时中不允许使用DTD,所以无法插入恶意的payload。所以  
**后面的解析方式也可以不看了，无法造成XXE漏洞** 。
#### oracle-ojdbc
查了下资料似乎没有找到关于`SQLXML`的支持，所以自然也不存在漏洞。
### mysql-jdbc如何修复漏洞？
#### DOMSource
DOMSource解析前加上了开启了防御，所以解决了这个漏洞。
    if (clazz.equals(DOMSource.class)) {
                        try {
                            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
                            builderFactory.setNamespaceAware(true);
                            setFeature(builderFactory, "http://javax.xml.XMLConstants/feature/secure-processing", true);
                            setFeature(builderFactory, "http://apache.org/xml/features/disallow-doctype-decl", true);
                            setFeature(builderFactory, "http://xml.org/sax/features/external-general-entities", false);
                            setFeature(builderFactory, "http://xml.org/sax/features/external-parameter-entities", false);
                            setFeature(builderFactory, "http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
                            builderFactory.setXIncludeAware(false);
                            builderFactory.setExpandEntityReferences(false);
                            builderFactory.setAttribute("http://javax.xml.XMLConstants/property/accessExternalSchema", "");
                            DocumentBuilder builder = builderFactory.newDocumentBuilder();
                            return new DOMSource(builder.parse(this.fromResultSet ? new InputSource(this.owningResultSet.getCharacterStream(this.columnIndexOfXml)) : new InputSource(new StringReader(this.stringRep))));
                        } catch (Throwable var5) {
                            sqlEx = SQLError.createSQLException(var5.getMessage(), "S1009", var5, this.exceptionInterceptor);
                            throw sqlEx;
                        }
#### SAXSource
这里也发生了改变，之前分析`.26`版本时，并没有创建`XMLReader`，所以没有漏洞，在更新中创建了`XmlReader`并进行了安全设置。
    try {
                        XMLReader reader = XMLReaderFactory.createXMLReader();
                        reader.setFeature("http://javax.xml.XMLConstants/feature/secure-processing", true);
                        setFeature(reader, "http://apache.org/xml/features/disallow-doctype-decl", true);
                        setFeature(reader, "http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
                        setFeature(reader, "http://xml.org/sax/features/external-general-entities", false);
                        setFeature(reader, "http://xml.org/sax/features/external-parameter-entities", false);
                        return new SAXSource(reader, this.fromResultSet ? new InputSource(this.owningResultSet.getCharacterStream(this.columnIndexOfXml)) : new InputSource(new StringReader(this.stringRep)));
                    } catch (SAXException var7) {
                        sqlEx = SQLError.createSQLException(var7.getMessage(), "S1009", var7, this.exceptionInterceptor);
                        throw sqlEx;
                    }