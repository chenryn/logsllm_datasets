08 "sync"
09 )
10
11 var (
12 // counter是所有goroutine都要增加其值的变量
13 counter int
14
15 // wg用来等待程序结束
16 wg sync.WaitGroup
17 )
18
19 // main是所有Go程序的入口
20 func main() {
21 // 计数加2，表示要等待两个goroutine
22 wg.Add(2)
23
24 // 创建两个goroutine
25 go incCounter(1)
26 go incCounter(2)
27
28 // 等待goroutine结束
29 wg.Wait()
30 fmt.Println("Final Counter:", counter)
31 }
32
33 // incCounter增加包里counter变量的值
34 func incCounter(id int) {
35 // 在函数退出时调用Done来通知main函数工作已经完成
36 defer wg.Done()
37
38 for count := 0; count < 2; count++ {
39 // 捕获counter的值
40 value := counter
41
42 // 当前goroutine从线程退出，并放回到队列
43 runtime.Gosched()
44
45 // 增加本地value变量的值
46 value++
47
48 // 将该值保存回counter
49 counter = value
50 }
51 }
对应的输出如代码清单6-10所示。
代码清单6-10 listing09.go的输出
Final Counter: 2
变量counter会进行4次读和写操作，每个goroutine执行两次。但是，程序终止时，counter
变量的值为2。图6-5提供了为什么会这样的线索。
每个goroutine都会覆盖另一个goroutine的工作。这种覆盖发生在goroutine切换的时候。每
个goroutine创造了一个counter变量的副本，之后就切换到另一个goroutine。当这个 goroutine
再次运行的时候，counter变量的值已经改变了，但是goroutine并没有更新自己的那个副本的
值，而是继续使用这个副本的值，用这个值递增，并存回 counter 变量，结果覆盖了另一个
goroutine完成的工作。
图6-5 竞争状态下程序行为的图像表达
让我们顺着程序理解一下发生了什么。在第25行和第26行，使用incCounter函数创建
了两个goroutine。在第34行，incCounter函数对包内变量counter进行了读和写操作，而
这个变量是这个示例程序里的共享资源。每个goroutine都会先读出这个counter变量的值，并
在第 40 行将 counter 变量的副本存入一个叫作 value 的本地变量。之后在第 46 行，
incCounter函数对value的副本的值加1，最终在第49行将这个新值存回到counter变量。
这个函数在第43 行调用了 runtime 包的Gosched 函数，用于将 goroutine 从当前线程退出，
给其他 goroutine 运行的机会。在两次操作中间这样做的目的是强制调度器切换两个 goroutine，
以便让竞争状态的效果变得更明显。
Go 语言有一个特别的工具，可以在代码里检测竞争状态。在查找这类错误的时候，这个工
具非常好用，尤其是在竞争状态并不像这个例子里这么明显的时候。让我们用这个竞争检测器来
检测一下我们的例子代码，如代码清单6-11所示。
代码清单6-11 用竞争检测器来编译并执行listing09的代码
go build -race // 用竞争检测器标志来编译程序
./example // 运行程序
==================
WARNING: DATA RACE
Write by goroutine 5:
main.incCounter()
/example/main.go:49 +0x96
Previous read by goroutine 6:
main.incCounter()
/example/main.go:40 +0x66
Goroutine 5 (running) created at:
main.main()
/example/main.go:25 +0x5c
Goroutine 6 (running) created at:
main.main()
/example/main.go:26 +0x73
==================
Final Counter: 2
Found 1 data race(s)
代码清单6-11中的竞争检测器指出这个例子里面代码清单6-12所示的4行代码有问题。
代码清单6-12 竞争检测器指出的代码
Line 49: counter = value
Line 40: value := counter
Line 25: go incCounter(1)
Line 26: go incCounter(2)
代码清单6-12展示了竞争检测器查到的哪个goroutine引发了数据竞争，以及哪两行代码有
冲突。毫不奇怪，这几行代码分别是对counter变量的读和写操作。
一种修正代码、消除竞争状态的办法是，使用Go语言提供的锁机制，来锁住共享资源，从
而保证goroutine的同步状态。
6.4 锁住共享资源
Go语言提供了传统的同步goroutine的机制，就是对共享资源加锁。如果需要顺序访问一个
整型变量或者一段代码，atomic和sync包里的函数提供了很好的解决方案。下面我们了解一
下atomic包里的几个函数以及sync包里的mutex类型。
6.4.1 原子函数
原子函数能够以很底层的加锁机制来同步访问整型变量和指针。我们可以用原子函数来修正
代码清单6-9中创建的竞争状态，如代码清单6-13所示。
代码清单6-13 listing13.go
01 // 这个示例程序展示如何使用atomic包来提供
02 // 对数值类型的安全访问
03 package main
04
05 import (
06 "fmt"
07 "runtime"
08 "sync"
09 "sync/atomic"
10 )
11
12 var (
13 // counter是所有goroutine都要增加其值的变量
14 counter int64
15
16 // wg用来等待程序结束
17 wg sync.WaitGroup
18 )
19
20 // main是所有Go程序的入口
21 func main() {
22 // 计数加2，表示要等待两个goroutine
23 wg.Add(2)
24
25 // 创建两个goroutine
26 go incCounter(1)
27 go incCounter(2)
28
29 // 等待goroutine结束
30 wg.Wait()
31
32 // 显示最终的值
33 fmt.Println("Final Counter:", counter)
34 }
35
36 // incCounter增加包里counter变量的值
37 func incCounter(id int) {
38 // 在函数退出时调用Done来通知main函数工作已经完成
39 defer wg.Done()
40
41 for count := 0; count < 2; count++ {
42 // 安全地对counter加1
43 atomic.AddInt64(&counter, 1)
44
45 // 当前goroutine从线程退出，并放回到队列
46 runtime.Gosched()
47 }
48 }
对应的输出如代码清单6-14所示。
代码清单6-14 listing13.go的输出
Final Counter: 4
现在，程序的第43行使用了atmoic包的AddInt64函数。这个函数会同步整型值的加法，
方法是强制同一时刻只能有一个goroutine运行并完成这个加法操作。当goroutine试图去调用任
何原子函数时，这些 goroutine 都会自动根据所引用的变量做同步处理。现在我们得到了正确的
值4。
另外两个有用的原子函数是LoadInt64和StoreInt64。这两个函数提供了一种安全地读
和写一个整型值的方式。代码清单6-15中的示例程序使用LoadInt64和StoreInt64来创建
一个同步标志，这个标志可以向程序里多个goroutine通知某个特殊状态。
代码清单6-15 listing15.go
01 // 这个示例程序展示如何使用atomic包里的
02 // Store和Load类函数来提供对数值类型
03 // 的安全访问
04 package main
05
06 import (
07 "fmt"
08 "sync"
09 "sync/atomic"
10 "time"
11 )
12
13 var (
14 // shutdown是通知正在执行的goroutine停止工作的标志
15 shutdown int64
16
17 // wg用来等待程序结束
18 wg sync.WaitGroup
19 )
20
21 // main是所有Go程序的入口
22 func main() {
23 // 计数加2，表示要等待两个goroutine
24 wg.Add(2)
25
26 // 创建两个goroutine
27 go doWork("A")
28 go doWork("B")
29
30 // 给定goroutine执行的时间
31 time.Sleep(1 * time.Second)
32
33 // 该停止工作了，安全地设置shutdown标志
34 fmt.Println("Shutdown Now")
35 atomic.StoreInt64(&shutdown, 1)
36
37 // 等待goroutine结束
38 wg.Wait()
39 }
40
41 // doWork用来模拟执行工作的goroutine，
42 // 检测之前的shutdown标志来决定是否提前终止
43 func doWork(name string) {
44 // 在函数退出时调用Done来通知main函数工作已经完成
45 defer wg.Done()
46
47 for {
48 fmt.Printf("Doing %s Work\n", name)
49 time.Sleep(250 * time.Millisecond)
50
51 // 要停止工作了吗？
52 if atomic.LoadInt64(&shutdown) == 1 {
53 fmt.Printf("Shutting %s Down\n", name)
54 break
55 }
56 }
57 }
在这个例子中，启动了两个goroutine，并完成一些工作。在各自循环的每次迭代之后，在第
52 行中 goroutine 会使用 LoadInt64 来检查 shutdown 变量的值。这个函数会安全地返回
shutdown变量的一个副本。如果这个副本的值为1，goroutine就会跳出循环并终止。
在第35行中，main函数使用StoreInt64函数来安全地修改shutdown变量的值。如果
哪个doWork goroutine试图在main函数调用StoreInt64的同时调用LoadInt64函数，那
么原子函数会将这些调用互相同步，保证这些操作都是安全的，不会进入竞争状态。
6.4.2 互斥锁
另一种同步访问共享资源的方式是使用互斥锁（mutex）。互斥锁这个名字来自互斥（mutual
exclusion）的概念。互斥锁用于在代码上创建一个临界区，保证同一时间只有一个goroutine可以
执行这个临界区代码。我们还可以用互斥锁来修正代码清单6-9中创建的竞争状态，如代码清单
6-16所示。
代码清单6-16 listing16.go
01 // 这个示例程序展示如何使用互斥锁来
02 // 定义一段需要同步访问的代码临界区
03 // 资源的同步访问
04 package main
05
06 import (
07 "fmt"
08 "runtime"