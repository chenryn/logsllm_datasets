作业第一次运行时，它能正常创建表；但在第二次运行时，则会出错，因为那个表已经存在了
并且会根据情况决定是否要创建这个表。在通过mysql把脚本当作批处理作业运行时，IFNOT
语句可以让你的应用程序无需假设它将使用到的表是否已事先建立好。应用程序会正常执行，
2.6.2.2暂时性表的创建
何错误提示。这使得作业可以继续执行，仿佛创建操作已成功执行一样。
EXISTS修饰符会非常有用。对于这种情况，不适合用常规的CREATETABLE语句。原因是：在
把 mytbl表的当前存储引擎更改为InnoDB，那么可以执行下面这条语句：
表，应该使用与一个指针长度一样的大小。
表具有的大小与内部行指针长度一致，即允许表文件增长到256TB。如果指定了选项MAX_ROWS
内容里看到。
并查看其输出内容里的ENGINE选项：
来代替），则需要启用SQL的NO_ENGINE_SUBSTITUTION 模式。
储引擎不可用，并且提示使用了默认的存储引擎来代替。
如果想要创建使用某种存储引擎的临时表，则可以为CREATE TEMPORARY TABLE语句加上
在使用IF NOT EXISTS 时，需要注意的是：MySQL不会把CREATETABLE语句里的表结
如果只想创建原本不存在的表，那么可以使用CREATE TABLE IF NOT EXIST 语句。这务
如果想要修改某个已有表的存储特性，
选项MAX_ROWS和AVG_ROW_LENGTH可用于调整MyISAM表的大小。默认情况下，MyISAM
CREATE TEMPORARY TABLEtbl_name...;
如果想要确定某个表使用的是哪一种存储引擎，那么可以执行 SHOW CREATE TABLE 语句，
如果想让MySQL在指定的存储引擎不可用时产生一个错误（而不是使用默认的存储引擎
更多关于如何改变存储引擎的信息请参考2.6.5节。
ALTER TABLE mytbl ENGINE = InnoDB;
存储引擎还可以在 SHOW TABLE STATUS 语句或 INFORMATION_SCHEMA.TABLES 表的输出
)ENGINE=MyISAM DEFAULT CHARSET=latin1
Create Table: CREATE TABLEt
int（11）
Table:t
DEFAULTNULL
1.
，可以在ALTERTABLE语句里使用表选项。例如，想
2.6表的创建、删除、索引和更改
条
6
---
## Page 100
各的优缺点。
最终达到正确分隔输入行的目的。然后，再次运行LOAD DATA 语句，将这个数据文件加载到原
(empty copy），那么你就可以放心地指定不同的列和行分隔符，尝试LOAD DATA 的各种选项，
正确，那么你就会把一些乱七八糟的行插到那个原有的表里。如果有一份那个原有表的空副本
语句把它添加到某个表里，但你对用来指定数据格式的选项没什么把握。万一这些选项设置不
2.6.2.4根据其他表或查询结果来创建表
分析。
果之后，
有的那个表里。
的那个被隐藏的表也会变得可见。）
再连接时，原
TEMPORARY表的情况下便断开了与服务器的连接，
也会转向这个新建的 TEMPORARY 表。如果调用 DROP TABLE member 语句，那么被删除掉的将
member的TEMPORARY表。这时，原有的那个member表将被隐藏起来，而对member 表的引I用
表存在时，那个永久表会隐藏起来（即无法访问）。假设，在sampdb数据库中创建了一个名为
以不同的客户端可以创建具有相同名字的TEMPORARY表，同时不会发生任何冲突。
个很好的习惯。
续一段时间，那么将不再需要的资源（尤其是那些临时性的MEMORY表）及时释放掉，是一
显式地删除它，这可以让服务器尽快释放与之有关的资源。如果与服务器之间的会话还需要持
会
ENGINE表选项。
80
MySQL提供了两条语句，可用于根据其他的表或根据查询结果创建新表。这两条语句各有
有时也会想把查询结果存储到某个表里，而不是把它们显示到显示器上。在存储了查询结
是那个TEMPORARY表，而原有的那个member 表此时会“再次显现”。如果在没有删除
TEMOPARY表只对创建该表的客户端可见。因为每个客户端都只能看到它自己创建的表，所
有时候，为某个表创建一份副本会很有用。例如，你有一个数据文件，并且想用LOAD DATA
TEMPORARY表的名字可以与某个已有的永久表的相同。这不会有任何问题，那个已有的永
尽管服务器会在客户端会话结束时自动删除TEMPORARY表，但最好是能在用完它之后立即
口CREATE TABLE...LIKE 会根据原有表创建一个新表，该表是原有表的一个空副本。
这种隐藏名字的机制只对一层操作有效。也就是说，你无法创建两个同名的TEMPORARY 表。
口
口
请
在考虑是否需要使用TEMPORARY表时，注意以下几个因素。
第2章
会把原有表的结构丝毫不差地复制过来，而且会保留各列的所有属性。索引结构也照
，你可以不用再运行原来那条查询语句，也能引用它们，甚至还可以对它们做进一步的
用，这表示，当应用程序终止时，你不能假定那个TEMPORARY 表会自动消失。
的连接不一定会被关闭。那些机制可能会保持连接处于打开状态，以供其他客户端使
如果使用连接池或永久性连接，那么当你的应用程序终止时，你与 MySQL服务器之间
为你调用的每一条语句都使用相同的连接）一起使用时没什么用处。
如果客户端程序在与服务器的连接意外断开时自动重建连接，那么在你重新连接之
因
表
在
后
1为TEMPORARY表只在创建它们的会话里是可见的，所以它们与连接池机制（它不保证
被删除。为避免这类问题，则需要使用DROPTEMPORARYTABLE语句来代替。
王重新连接后，在未做检测的情况下调用了DROPTABLE语句，这时将会导致那个永久
后，上次创建的那个TEMPORARY表将不复存在。如果你之前在用TEMPORARY表来“隐
原有的那个member 表又会是可见的。
使用SQL管理数据
。（如果重新命名了TEMPORARY表，那么原有
，那么服务器将会自动为你删除它。当你下次
它
---
## Page 101
同寻常的列名：
算结果生成的，那么该列的名字将是这个表达式的文本表示，从而会使创建出的表包含一个不
中的方式来创建表时，新表的列会根据你所选择的那些列来命名。如果某个列是以表达式的计
不过，如果不够小心的话，这个新表可能会包含一些奇怪的列名。当你通过把选择数据放入其
非常简便快速地创建一个新表，并把我们感兴趣的数据填充到它里面，以便后面的语句使用。
以随时根据需要用它来快速创建一个新表，用于保存任意 SELECT查询的结果。这让我们可以
时要比CREATETABLE...LIKE更易使用，因为它可以在一条语句里创建并填充新表：
下面的语句会创建一个名为 student_f 的新表，并且它只会包含 student 表里的女生行：
结束时自动删除这个临时副本。（不过，请一定要对2.6.2.3节提到的自动重连问题多加注意。）
INSERT语句即可。该脚本将创建一个临时副本，并在该副本上执行各种操作，服务器会在脚本
表同名的TEMPORARY表。如果要使用那些事先编写好的使用了原有表名的脚本，那么你不必
TABLE...LIKE，再调用INSERTINTO...SELECT:
如果只想把原有表里的部分行插到新表中，则可以增加WHERE子句来标识要选取的那些行。
mysql>SELECT
CREATE TABLE...SELECT也可以创建这样的新表，它并不完全包含已有表的所有列。你可
CREATE TABLE student_f SELECT * FROM Student WHERE seX = 'f';
如果不太关心新表是否完全保留了原有表里的列定义，那么CREATETABLE..SELECT 有
CREATE TABLE student_f LIKE student;
当想要尝试某些会修改表内容的语句，而又不想改变原有表的内容时，便可以利用与原有
如果要创建某个表的空副本，并根据原有表的数据来填充它，那么可以先调用CREATE
IPI(）*2
INSERT INTO student_f SELECT *FROM student WHERE sex='f';
CREATETEMPORARY TABLE new_tbl_nameLIKE tbl_name;
如果要把某个表创建为其自身的一个临时副本，则需要加上关键字TEMPORARY：
INSERT INTO new_tbl_name SELECT *FROM tbl_name;
CREATE TABLE new_tbl_name LIKE tbl_name;
如果要使用CREATETABLE...LIKE 来创建某个已有表的空副本，可以编写如下语句：
口CREATETABLE...SELECT可以根据任意一条 SELECT 语句的查询结果创建一个新表
6.283185
建新表，并且可以包括来自其他表的列，或者以表达式结果形式创建出来的列。
用一条语句即可完成创建新表和填充新表的操作。它也可以用原有表的某个子集来创
制。根据查询数据来自动创建表，并把数据填入其中，这种做法也不会把原有表里
默认情况下，这条语句不会复制所有的列属性，如AUTO_INCREMENT列就不会被
据原有表的列子集创建出新表，它也不能使用除原有表以外的任何其他表里的列。
外一条语句（如INSERTINTO..SELECT）
样会被复制。不过，由于这个新表是空的，因此如果想把数据填充到里面，还需要另
索引复制过去，因为结果集不会自己索引。另一方面，CREATETABLE...SELECT
FROMmytb1;
请注意，CREATE TABLE...LIKE 不能根
2.6表的创建、删除、索引和更改
18
复
---
## Page 102
里。这两个部分里的列名是相匹配的（与位置无关），因此必须在 SELECT 部分提供别名，才能
SIGNED INTEGER、UNSIGNED、UNSIGNED INTEGER 和 DECIMAL。
看到的内容一样：
用某些特定的属性。下面的CREATETABLE...SELECT 语句，将强制把 SELECT子句生成的各
的还是NOT NULL的、字符集和排序规则、默认值，以及列注释。
原有表里的索引复制过去，而且还可能会丢失列属性。可以保留的属性包括有：该列是NULL
特征全部复制到新表的结构里去。
两个列名都为c的表，所以下面的语句将会以失败告终：
列为c，并且你想要根据这两个表里的所有行的组合创建表。由于这时是在试图创建一个具有
才行：
82
在某些场合，你可以采用在语句的 SELECT部分使用CAST（）函数的方式，在新表里强制使
_这显然不太妙，因为要想直接引用这样的列名，必须得把它当成用引号引起来的标识符
允许强制转换的类型包括：BINARY（二进制串）、CHAR、DATE、
mySql> CREATE TABLE mytbl SELECT
如前面所提到的，CREATETABLE...SELECT的一点不足在于：它不会把原有数据的所有
mySql> CREATE TABLE t3 SELECT t1.c, t2.c AS c2
解决这个问题的办法是，提供必要的别名，让每个列在新表里都各有一个唯一的名字：
如果从具有相同列名的不同表里进行查询，则会遇到一个难题。假设表t1和t2 都有一个
mysql>
mysql> DROP TABLE mytbl;
为避免这个问题，就需要使用别名来提供一个便于使用的列名：
、
IField | Type
mysql> DESCRIBE mytbl;
+----------
16.283185
mycol
1PI（）*2
6.283185
第2章使用SQL管理数据
七
->FROM t1 INNER JOIN t2;
->
V
>
CAST(PI()AS DECIMAL（10,5)) AS d;
CAST(CURTIME() AS TIME) AS t,
CAST(1
decima1(10,5)
int（1)unsigned
time
AS UNSIGNED)AS
1Null|Key|DefaultlExtra
，例如，通过把查询数据放入其中的方式来创建表，就不会把
NO
YES
NO
i，
0.00000
NULL
------
、DATETIME、TIME、SIGNED、
---
## Page 103
“年”：
分区方式是最适合的。为实现按年将各行分配到某个给定的分区，可以使用相应日期值里的
设已有了累计多年的条目需要加载到这个表里。对于每一个包含有日期的数据条目，使用范围
有些函数不适合这个规则，如RAND（)和NOW（）。
及其他一些与分区有关的选项。分区函数可以根据范围、值列表或散列值来分配各行。
此外，还要指定PARTITIONBY子句（它会定义一个可以把行分配到各个分区的分区函数），以
行分区后，得到分区表，使用分区表有很多好处，其中两个好处如下。
2.6.2.5使用分区表
CREATE TABLE 部分为这些属性提供显式的定义。
几个列的 Null 和 Default 属性，与前面几个例子里的情况有所不同。如有必要，你可以在
位数的数字列、创建不同于结果集中最长值的宽度的字符列等。此外，请注意在这个例子里有
让它们正确地匹配：
假设你想要创建一个表，用于存储一些简单的由日期和描述性字符串构成的条目，并且假
CREATE TABLE log_partition
分区函数必须具有确定性，这样，在分配行时，才会把相同的输入值分配到同一个分区，
PARTITIONBY RANGE(YEAR(dt))
口根据范围来分区。适用这种方式的情形是，行包含的是一些可划分为多个离散区间的
如果要创建分区表，可以像往常一样，在CREATETABLE 语句里提供一系列的列和索引
口优化器可以把本地化搜索限定在某个特定的分区，或者并行搜索多个分区。
口表存储可以分布在多个设备上，这样可以通过IO并行机制来缩短访问时间。
MySQL支持表分区，从而可以让表的内容分散存储在不同的物理存储位置。在对表存储进
这种提供显式列定义的技术，可以让你实现许多操作，其中包括创建具有特定精度和小数
口
口
1Field1Type
mysql> CREATE
PARTITION p0 VALUES LESS THAN (2010),
INDEX
info
dt
根据列表来分区。适用这种方式的情形是，
值域，如日期、收入水平或重量。
根据散列值来分区。
七
列，然后它会基于那些列使用内建的散列函数计算出散列值。
到各个分区。你可以自行提供一个散列函数；也可以告知MySQL要使用到的有哪些
值，如邮政编码表、
CAST(PI() AS
CAST(CURTIME(） AS TIME) AS t,
1ASi，
SELECT
(dt)
DATETIME NOT NULL,
decima1（10,5)
time
int(10)unsigned
TABLE mytb1 （i INT UNSIGNED,t TIME，d DECIMAL（10,5))
DECIMAL(10,5))AS d;
、电话号码区号、按地理区域划分出的各实体的编号。
适用这种方式的情形是，根据从行键计算出的散列值，把行分布
YES
YES
YES
NULL
NULL