程序清单16.12 predef.c程序
// predef.c -- 预定义宏和预定义标识符
#include 
void why_me();
int main()
{
printf("The file is %s.\n", __FILE__);
printf("The date is %s.\n", __DATE__);
printf("The time is %s.\n", __TIME__);
printf("The version is %ld.\n", __STDC_VERSION__);
printf("This is line %d.\n", __LINE__);
printf("This function is %s\n", __func__);
why_me();
return 0;
}
void why_me()
{
printf("This function is %s\n", __func__);
printf("This is line %d.\n", __LINE__);
1236
}
下面是该程序的输出：
The file is predef.c.
The date is Sep 23 2013.
The time is 22:01:09.
The version is 201112.
This is line 11.
This function is main
This function is why_me
This is line 21.
16.6.5 #line和#error
#line指令重置_ _LINE_ _和_ _FILE_ _宏报告的行号和文件名。可以这
样使用#line：
#line 1000       // 把当前行号重置为1000
#line 10 "cool.c"   // 把行号重置为10，把文件名重置为cool.c
#error 指令让预处理器发出一条错误消息，该消息包含指令中的文本。
如果可能的话，编译过程应该中断。可以这样使用#error指令：
#if _ _STDC_VERSION_ _ != 201112L
#error Not C11
#endif
1237
编译以上代码生成后，输出如下：
$ gcc newish.c
newish.c:14:2: error: #error Not C11
$ gcc -std=c11 newish.c
$
如果编译器只支持旧标准，则会编译失败，如果支持C11标准，就能成
功编译。
16.6.6 #pragma
在现在的编译器中，可以通过命令行参数或IDE菜单修改编译器的一些
设置。#pragma把编译器指令放入源代码中。例如，在开发C99时，标准被
称为C9X，可以使用下面的编译指示（pragma）让编译器支持C9X：
#pragma c9x on
一般而言，编译器都有自己的编译指示集。例如，编译指示可能用于控
制分配给自动变量的内存量，或者设置错误检查的严格程度，或者启用非标
准语言特性等。C99 标准提供了 3 个标准编译指示，但是超出了本书讨论的
范围。
C99还提供_Pragma预处理器运算符，该运算符把字符串转换成普通的
编译指示。例如：
_Pragma("nonstandardtreatmenttypeB on")
等价于下面的指令：
#pragma nonstandardtreatmenttypeB on
由于该运算符不使用#符号，所以可以把它作为宏展开的一部分：
1238
#define PRAGMA(X) _Pragma(#X)
#define LIMRG(X) PRAGMA(STDC CX_LIMITED_RANGE X)
然后，可以使用类似下面的代码：
LIMRG ( ON )
顺带一提，下面的定义看上去没问题，但实际上无法正常运行：
#define LIMRG(X) _Pragma(STDC CX_LIMITED_RANGE #X)
问题在于这行代码依赖字符串的串联功能，而预处理过程完成之后才会
串联字符串。
_Pragma 运算符完成“解字符串”（destringizing）的工作，即把字符串中
的转义序列转换成它所代表的字符。因此，
_Pragma("use_bool \"true \"false")
变成了：
#pragma use_bool "true "false
16.6.7 泛型选择（C11）
在程序设计中，泛型编程（generic 
programming）指那些没有特定类
型，但是一旦指定一种类型，就可以转换成指定类型的代码。例如，C++在
模板中可以创建泛型算法，然后编译器根据指定的类型自动使用实例化代
码。C没有这种功能。然而，C11新增了一种表达式，叫作泛型选择表达式
（generic selection expression），可根据表达式的类型（即表达式的类型是
int、double 
还是其他类型）选择一个值。泛型选择表达式不是预处理器指
令，但是在一些泛型编程中它常用作#define宏定义的一部分。
下面是一个泛型选择表达式的示例：
1239
_Generic(x, int: 0, float: 1, double: 2, default: 3)
_Generic是C11的关键字。_Generic后面的圆括号中包含多个用逗号分隔
的项。第1个项是一个表达式，后面的每个项都由一个类型、一个冒号和一
个值组成，如float: 1。第1个项的类型匹配哪个标签，整个表达式的值是该
标签后面的值。例如，假设上面表达式中x是int类型的变量，x的类型匹配
int:标签，那么整个表达式的值就是0。如果没有与类型匹配的标签，表达式
的值就是default:标签后面的值。泛型选择语句与 switch 语句类似，只是前
者用表达式的类型匹配标签，而后者用表达式的值匹配标签。
下面是一个把泛型选择语句和宏定义组合的例子：
#define MYTYPE(X) _Generic((X),\
int: "int",\
float : "float",\
double: "double",\
default: "other"\
)
宏必须定义为一条逻辑行，但是可以用\把一条逻辑行分隔成多条物理
行。在这种情况下，对泛型选择表达式求值得字符串。例如，对
MYTYPE(5)求值得"int"，因为值5的类型与int:标签匹配。程序清单16.13演
示了这种用法。
程序清单16.13 mytype.c程序
// mytype.c
#include 
1240
#define MYTYPE(X) _Generic((X),\
int: "int",\
float : "float",\
double: "double",\
default: "other"\
)
int main(void)
{
int d = 5;
printf("%s\n", MYTYPE(d));   // d 是int类型
printf("%s\n", MYTYPE(2.0*d)); // 2.0 * d 是double类型
printf("%s\n", MYTYPE(3L));   // 3L 是long类型
printf("%s\n", MYTYPE(&d));  // &d 的类型是 int *
return 0;
}
下面是该程序的输出：
int
double
other
1241
other
MYTYPE()最后两个示例所用的类型与标签不匹配，所以打印默认的字
符串。可以使用更多类型标签来扩展宏的能力，但是该程序主要是为了演示
_Generic的基本工作原理。
对一个泛型选择表达式求值时，程序不会先对第一个项求值，它只确定
类型。只有匹配标签的类型后才会对表达式求值。
可以像使用独立类型（“泛型”）函数那样使用_Generic 定义宏。本章后
面介绍 math 库时会给出一个示例。
1242
16.7 内联函数（C99）
通常，函数调用都有一定的开销，因为函数的调用过程包括建立调用、
传递参数、跳转到函数代码并返回。使用宏使代码内联，可以避免这样的开
销。C99还提供另一种方法：内联函数（inline function）。读者可能顾名思
义地认为内联函数会用内联代码替换函数调用。其实C99和C11标准中叙述
的是：“把函数变成内联函数建议尽可能快地调用该函数，其具体效果由实
现定义”。因此，把函数变成内联函数，编译器可能会用内联代码替换函数
调用，并（或）执行一些其他的优化，但是也可能不起作用。
创建内联函数的定义有多种方法。标准规定具有内部链接的函数可以成
为内联函数，还规定了内联函数的定义与调用该函数的代码必须在同一个文
件中。因此，最简单的方法是使用函数说明符 
inline 
和存储类别说明符
static。通常，内联函数应定义在首次使用它的文件中，所以内联函数也相
当于函数原型。如下所示：
#include 
inline static void eatline()  // 内联函数定义/原型
{
while (getchar() != '\n')
continue;
}
int main()
{
...
1243
eatline();       // 函数调用
...
}
编译器查看内联函数的定义（也是原型），可能会用函数体中的代码替
换 eatline()函数调用。也就是说，效果相当于在函数调用的位置输入函数体
中的代码：
#include 
inline static void eatline() //内联函数定义/原型
{
while (getchar() != '\n')
continue;
}
int main()
{
...
while (getchar() != '\n') //替换函数调用
continue;
...
}
由于并未给内联函数预留单独的代码块，所以无法获得内联函数的地址
1244
（实际上可以获得地址，不过这样做之后，编译器会生成一个非内联函
数）。另外，内联函数无法在调试器中显示。
内联函数应该比较短小。把较长的函数变成内联并未节约多少时间，因
为执行函数体的时间比调用函数的时间长得多。
编译器优化内联函数必须知道该函数定义的内容。这意味着内联函数定
义与函数调用必须在同一个文件中。鉴于此，一般情况下内联函数都具有内
部链接。因此，如果程序有多个文件都要使用某个内联函数，那么这些文件
中都必须包含该内联函数的定义。最简单的做法是，把内联函数定义放入头
文件，并在使用该内联函数的文件中包含该头文件即可。
// eatline.h
#ifndef EATLINE_H_
#define EATLINE_H_
inline static void eatline()
{
while (getchar() != '\n')
continue;
}
#endif
一般都不在头文件中放置可执行代码，内联函数是个特例。因为内联函
数具有内部链接，所以在多个文件中定义同一个内联函数不会产生什么问
题。
与C++不同的是，C还允许混合使用内联函数定义和外部函数定义（具
1245
有外部链接的函数定义）。例如，一个程序中使用下面3个文件：
//file1.c
...
inline static double square(double);
double square(double x) { return x * x; }
int main()
{
double q = square(1.3);
...
//file2.c
...
double square(double x) { return (int) (x*x); }
void spam(double v)
{
double kv = square(v);
...
//file3.c
...
inline double square(double x) { return (int) (x * x + 0.5); }
1246
void masp(double w)
{
double kw = square(w);
...
如上述代码所示，3个文件中都定义了square()函数。file1.c文件中是
inline static定义；file2.c 文件中是普通的函数定义（因此具有外部链接）；
file3.c 文件中是 inline 定义，省略了static。
3个文件中的函数都调用了square()函数，这会发生什么情况？。file1.c
文件中的main()使用square()的局部static定义。由于该定义也是inline定义，
所以编译器有可能优化代码，也许会内联该函数。file2.c 文件中，spam()函
数使用该文件中 square()函数的定义，该定义具有外部链接，其他文件也可
见。file3.c文件中，编译器既可以使用该文件中square()函数的内联定义，也
可以使用file2.c文件中的外部链接定义。如果像file3.c那样，省略file1.c文件
inline定义中的static，那么该inline定义被视为可替换的外部定义。
注意GCC在C99之前就使用一些不同的规则实现了内联函数，所以GCC
可以根据当前编译器的标记来解释inline。
1247
16.8 _Noreturn函数（C11）
C99新增inline关键字时，它是唯一的函数说明符（关键字extern和static
是存储类别说明符，可应用于数据对象和函数）。C11新增了第2个函数说
明符_Noreturn，表明调用完成后函数不返回主调函数。exit()函数是
_Noreturn 
函数的一个示例，一旦调用exit()，它不会再返回主调函数。注
意，这与void返回类型不同。void类型的函数在执行完毕后返回主调函数，
只是它不提供返回值。