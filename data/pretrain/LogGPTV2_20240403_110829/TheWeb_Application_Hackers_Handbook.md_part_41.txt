that the item being modified has a noticeable effect on the applica-
tion’s behavior. For example, if the application uses a numeric PageID
parameter to specify which content should be returned, substituting 1+1
for 2 with equivalent results is a good sign that SQL injection is present.
However, if you can place arbitrary input into a numeric parameter with-
out changing the application’s behavior, the preceding test provides no
evidence of a vulnerability.
3. If the first test is successful, you can obtain further evidence of the vulnera-
bility by using more complicated expressions that use SQL-specific keywords
and syntax. A good example of this is the ASCII command, which returns
the numeric ASCII code of the supplied character. For example, because the
ASCII value of A is 65, the following expression is equivalent to 2 in SQL:
67-ASCII(‘A’)
4. The preceding test will not work if single quotes are being filtered.
However, in this situation you can exploit the fact that databases implic-
itly convert numeric data to string data where required. Hence, because
the ASCII value of the character 1 is 49, the following expression is equiv-
alent to 2 in SQL:
51-ASCII(1)
TIP A common mistake when probing an application for defects such as SQL
injection is to forget that certain characters have special meaning within HTTP
requests. If you want to include these characters within your attack payloads,
you must be careful to URL-encode them to ensure that they are interpreted in
the way you intend. In particular:
n & and = are used to join name/value pairs to create the query string and
the block of POST data. You should encode them using %26 and %3d,
respectively.
n Literal spaces are not allowed in the query string. If they are submitted,
they will effectively terminate the entire string. You should encode them
using+ or %20.
n Because+ is used to encode spaces, if you want to include an actual +
in your string, you must encode it using %2b. In the previous numeric
example, therefore, 1+1 should be submitted as 1%2b1.
cc0099..iinndddd 330000 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 301
Chapter 9 n Attacking Data Stores 301
n The semicolon is used to separate cookie fi elds and should be encoded
using%3b.
These encodings are necessary whether you are editing the parameter’s
value directly from your browser, with an intercepting proxy, or through any
other means. If you fail to encode problem characters correctly, you may inval-
idate the entire request or submit data you did not intend to.
The steps just described generally are suffi cient to identify the majority
of SQL injection vulnerabilities, including many of those where no useful results or
error information are transmitted back to the browser. In some cases, however,
more advanced techniques may be necessary, such as the use of time delays
to confi rm the presence of a vulnerability. We will describe these techniques
later in this chapter.
Injecting into the Query Structure
If user-supplied data is being inserted into the structure of the SQL query itself,
rather than an item of data within the query, exploiting SQL injection simply
involves directly supplying valid SQL syntax. No “escaping” is required to
break out of any data context.
The most common injection point within the SQL query structure is within an
ORDER BY clause. The ORDER BY keyword takes a column name or number and
orders the result set according to the values in that column. This functionality
is frequently exposed to the user to allow sorting of a table within the browser.
A typical example is a sortable table of books that is retrieved using this query:
SELECT author, title, year FROM books WHERE publisher = ‘Wiley’ ORDER BY
title ASC
If the column name title in the ORDER BY is specifi ed by the user, it is not
necessary to use a single quote. The user-supplied data already directly modi-
fi es the structure of the SQL query.
TIP In some rarer cases, user-supplied input may specify a column name
within a WHERE clause. Because these are also not encapsulated in single
quotes, a similar issue occurs. The authors have also encountered applications
where the table name has been a user-supplied parameter. Finally, a surpris-
ing number of applications expose the sort order keyword (ASC or DESC) to be
specifi ed by the user, perhaps believing that this has no consequence for SQL
injection attacks.
Finding SQL injection in a column name can be diffi cult. If a value is sup-
plied that is not a valid column name, the query results in an error. This means
that the response will be the same regardless of whether the attacker submits a
cc0099..iinndddd 330011 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 302
302 Chapter 9 n Attacking Data Stores
path traversal string, single quote, double quote, or any other arbitrary string.
Therefore, common techniques for both automated fuzzing and manual testing
are liable to overlook the vulnerability. The standard test strings for numerous
kinds of vulnerabilities will all cause the same response, which may not itself
disclose the nature of the error.
NOTE Some conventional SQL injection defenses described later in this
chapter cannot be implemented for user-specifi ed column names. Using
prepared statements or escaping single quotes will not prevent this type of
SQL injection. As a result, this vector is a key one to look out for in modern
applications.
HACK STEPS
1. Make a note of any parameters that appear to control the order or field
types within the results that the application returns.
2. Make a series of requests supplying a numeric value in the parameter
value, starting with the number 1 and incrementing it with each subse-
quent request:
n If changing the number in the input affects the ordering of the results,
the input is probably being inserted into an ORDER BY clause. In SQL,
ORDER BY 1 orders by the fi rst column. Increasing this number to 2
should then change the display order of data to order by the second
column. If the number supplied is greater than the number of columns
in the result set, the query should fail. In this situation, you can confi rm
that further SQL can be injected by checking whether the results order
can be reversed, using the following:
1 ASC --
1 DESC --
n If supplying the number 1 causes a set of results with a column contain-
ing a 1 in every row, the input is probably being inserted into the name
of a column being returned by the query. For example:
SELECT 1,title,year FROM books WHERE publisher=’Wiley’
NOTE Exploiting SQL injection in an ORDER BY clause is signifi cantly differ-
ent from most other cases. A database will not accept a UNION,WHERE,OR, or
AND keyword at this point in the query. Generally exploitation requires the
attacker to specify a nested query in place of the parameter, such as replac-
ing the column name with (select 1 where > or 1/0=0),
thereby leveraging the inference techniques described later in this chapter.
For databases that support batched queries such as MS-SQL, this can be the
most effi cient option.
cc0099..iinndddd 330022 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 303
Chapter 9 n Attacking Data Stores 303
Fingerprinting the Database
Most of the techniques described so far are effective against all the common
database platforms, and any divergences have been accommodated through
minor adjustments to syntax. However, as we begin to look at more advanced
exploitation techniques, the differences between platforms become more signifi -
cant, and you will increasingly need to know which type of back-end database
you are dealing with.
You have already seen how you can extract the version string of the major
database types. Even if this cannot be done for some reason, it is usually pos-
sible to fi ngerprint the database using other methods. One of the most reliable
is the different means by which databases concatenate strings. In a query where
you control some item of string data, you can supply a particular value in one
request and then test different methods of concatenation to produce that string.
When the same results are obtained, you have probably identifi ed the type of
database being used. The following examples show how the string services
could be constructed on the common types of database:
n Oracle:‘serv’||’ices’
n MS-SQL:‘serv’+’ices’
n MySQL:‘serv’ ‘ices’ (note the space)
If you are injecting into numeric data, the following attack strings can be
used to fi ngerprint the database. Each of these items evaluates to 0 on the target
database and generates an error on the other databases:
n Oracle:BITAND(1,1)-BITAND(1,1)
n MS-SQL:@@PACK_RECEIVED-@@PACK_RECEIVED
n MySQL:CONNECTION_ID()-CONNECTION_ID()
NOTE The MS-SQL and Sybase databases share a common origin, so they
have many similarities in relation to table structure, global variables, and stored
procedures. In practice, the majority of the attack techniques against MS-SQL
described in later sections will work in an identical way against Sybase.
A further point of interest when fi ngerprinting databases is how MySQL
handles certain types of inline comments. If a comment begins with an exclama-
tion point followed by a database version string, the contents of the comment
are interpreted as actual SQL, provided that the version of the actual database
is equal to or later than that string. Otherwise, the contents are ignored and
treated as a comment. Programmers can use this facility much like preproces-
sor directives in C, enabling them to write different code that will be processed
cc0099..iinndddd 330033 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 304
304 Chapter 9 n Attacking Data Stores
conditionally upon the database version being used. An attacker also can use this
facility to fi ngerprint the exact version of the database. For example, injecting
the following string causes the WHERE clause of a SELECT statement to be false if
the MySQL version in use is greater than or equal to 3.23.02:
/*!32302 and 1=0*/
The UNION Operator
The UNION operator is used in SQL to combine the results of two or more SELECT
statements into a single result set. When a web application contains a SQL injec-
tion vulnerability that occurs in a SELECT statement, you can often employ the
UNION operator to perform a second, entirely separate query, and combine its
results with those of the fi rst. If the results of the query are returned to your
browser, this technique can be used to easily extract arbitrary data from within
the database. UNION is supported by all major DBMS products. It is the quickest
way to retrieve arbitrary information from the database in situations where
query results are returned directly.
Recall the application that enabled users to search for books based on author,
title, publisher, and other criteria. Searching for books published by Wiley causes
the application to perform the following query:
SELECT author,title,year FROM books WHERE publisher = ‘Wiley’
Suppose that this query returns the following set of results:
AUTHOR TITLE YEAR
Litchfi eld The Database Hacker’s Handbook 2005
Anley The Shellcoder’s Handbook 2007
You saw earlier how an attacker could supply crafted input to the search
function to subvert the query’s WHERE clause and therefore return all the books
held within the database. A far more interesting attack would be to use the
UNION operator to inject a second SELECT query and append its results to those
of the fi rst. This second query can extract data from a different database table.
For example, entering the search term:
Wiley’ UNION SELECT username,password,uid FROM users--
causes the application to perform the following query:
SELECT author,title,year FROM books WHERE publisher = ‘Wiley’
UNION SELECT username,password,uid FROM users--’
cc0099..iinndddd 330044 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 305
Chapter 9 n Attacking Data Stores 305
This returns the results of the original search followed by the contents of
the users table:
AUTHOR TITLE YEAR
Litchfi eld The Database Hacker’s Handbook 2005
Anley The Shellcoder’s Handbook 2007
admin r00tr0x 0
cliff Reboot 1
NOTE When the results of two or more SELECT queries are combined using
the UNION operator, the column names of the combined result set are the
same as those returned by the fi rst SELECT query. As shown in the preceding
table, usernames appear in the author column, and passwords appear in the
title column. This means that when the application processes the results
of the modifi ed query, it has no way of detecting that the data returned has
originated from a different table.
This simple example demonstrates the potentially huge power of the UNION
operator when employed in a SQL injection attack. However, before it can be
exploited in this way, two important provisos need to be considered:
n When the results of two queries are combined using the UNION operator,
the two result sets must have the same structure. In other words, they must
contain the same number of columns, which have the same or compatible
data types, appearing in the same order.
n To inject a second query that will return interesting results, the attacker
needs to know the name of the database table that he wants to target, and
the names of its relevant columns.
Let’s look a little deeper at the fi rst of these provisos. Suppose that the attacker
attempts to inject a second query that returns an incorrect number of columns.
He supplies this input:
Wiley’ UNION SELECT username,password FROM users--
The original query returns three columns, and the injected query returns
only two columns. Hence, the database returns the following error:
ORA-01789: query block has incorrect number of result columns
Suppose instead that the attacker attempts to inject a second query whose
columns have incompatible data types. He supplies this input:
Wiley’ UNION SELECT uid,username,password FROM users--
cc0099..iinndddd 330055 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 306
306 Chapter 9 n Attacking Data Stores
This causes the database to attempt to combine the password column from the
second query (which contains string data) with the year column from the fi rst
query (which contains numeric data). Because string data cannot be converted
into numeric data, this causes an error:
ORA-01790: expression must have same datatype as corresponding expression
NOTE The error messages shown here are for Oracle. The equivalent
messages for other databases are listed in the later section “SQL Syntax and
Error Reference.”
In many real-world cases, the database error messages shown are trapped
by the application and are not be returned to the user’s browser. It may appear,
therefore, that in attempting to discover the structure of the fi rst query, you are
restricted to pure guesswork. However, this is not the case. Three important
points mean that your task usually is easy:
n For the injected query to be capable of being combined with the fi rst, it is
not strictly necessary that it contain the same data types. Rather, they must
be compatible. In other words, each data type in the second query must
either be identical to the corresponding type in the fi rst or be implicitly
convertible to it. You have already seen that databases implicitly convert
a numeric value to a string value. In fact, the value NULL can be converted
to any data type. Hence, if you do not know the data type of a particular
fi eld, you can simply SELECT NULL for that fi eld.
n In cases where the application traps database error messages, you can
easily determine whether your injected query was executed. If it was,
additional results are added to those returned by the application from its
original query. This enables you to work systematically until you discover
the structure of the query you need to inject.
n In most cases, you can achieve your objectives simply by identifying a
single fi eld within the original query that has a string data type. This is
suffi cient for you to inject arbitrary queries that return string-based data
and retrieve the results, enabling you to systematically extract any desired
data from the database.
HACK STEPS
Your fi rst task is to discover the number of columns returned by the original
query being executed by the application. You can do this in two ways:
1. You can exploit the fact that NULL can be converted to any data type to
systematically inject queries with different numbers of columns until your
injected query is executed. For example:
cc0099..iinndddd 330066 88//1199//22001111 1122::0099::3311 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 307
Chapter 9 n Attacking Data Stores 307
‘ UNION SELECT NULL--
‘ UNION SELECT NULL, NULL--
‘ UNION SELECT NULL, NULL, NULL--
When your query is executed, you have determined the number of col-
umns required. If the application doesn’t return database error messages,
you can still tell when your injected query was successful. An additional
row of data will be returned, containing either the word NULL or an empty
string. Note that the injected row may contain only empty table cells and so
may be hard to see when rendered as HTML. For this reason it is preferable
to look at the raw response when performing this attack.
2. Having identified the required number of columns, your next task is to
discover a column that has a string data type so that you can use this to
extract arbitrary data from the database. You can do this by injecting a
query containing NULLs, as you did previously, and systematically replac-
ing each NULL with a. For example, if you know that the query must return
three columns, you can inject the following:
‘ UNION SELECT ‘a’, NULL, NULL--
‘ UNION SELECT NULL, ‘a’, NULL--
‘ UNION SELECT NULL, NULL, ‘a’--
When your query is executed, you see an additional row of data containing the
valuea. You can then use the relevant column to extract data from the database.
NOTE In Oracle databases, every SELECT statement must include a FROM
attribute, so injecting UNION SELECT NULL produces an error regardless of
the number of columns. You can satisfy this requirement by selecting from the
globally accessible table DUAL. For example:
‘ UNION SELECT NULL FROM DUAL--
When you have identifi ed the number of columns required in your injected
query, and have found a column that has a string data type, you are in a position
to extract arbitrary data. A simple proof-of-concept test is to extract the version