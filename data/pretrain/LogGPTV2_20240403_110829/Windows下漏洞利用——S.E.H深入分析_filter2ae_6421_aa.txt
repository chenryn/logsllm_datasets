# Windows下漏洞利用——S.E.H深入分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 引言
程序异常处理机制，简称S.E.H. 是Windwos下缓冲区溢出漏洞的一大特色，也是绕过StackCookie的一大杀器，在当年微软WinXP
SP2更新包中紧急推出SafeSEH足以见其威力。作为很多Windows exploit利用的基础技术，SEH的研究对于Win下漏洞研究有着举足轻重的作用。
本文将从最基础的SEH覆盖，到SafeSEH保护机制的绕过，再到最后绕过SafeSEH结合DEP等保护机制，对SEH的利用进行由浅入深的的研究。
## 第一章 S.E.H结构分析
在我们开始调试SEH结构之前，需要做好一些准备工作。
###  1.1 环境配置
本次实验的主要环境是Windows XP /Windows Vista
编译工具为VC++6.0/VS 2010
两个系统下都支持/SafeSEH选项，但是WinXp下没有开启全局DEP和SafeSEH，大部分模块都没有开启保护，所以研究漏洞更容易，我们会从XP入手，最后尝试在Vista下也实现漏洞利用。
**1.1.1调试工具**
安装Windbg/ImmunityDebugger作为调试工具
Windbg是Windows 的经典调试工具，采用命令行操作，功能十分强大，甚至可以调试Windows内核，目前也已经支持Mona插件。
ImmunityDebugger操作非常友好，只需要知道几个快捷键就能调试程序，因为是由python编写，相比OD对于python扩展更加友好，原生支持Mona插件。
Windbg加载符号表
    0:040> .sympath SRV*c:Symbols*http://msdl.microsoft.com/download/symbols 0:040> .reload
如果是Windows XP因为微软已经放弃了支持，只能在网络上找别人下好的符号表安装。
**1.1.2 Mona插件**
Mona插件是一个非常强大的插件，能大大加快漏洞利用程序的编写速度，特别是其中ROP字段的检索简直是WIN下漏洞利用的福音。
我们可以在github上下载[mona](https://github.com/corelan/mona)
Immunity Debugger下安装
官方描述的安装方法
> drop mona.py into the ‘PyCommands’ folder (inside the Immunity Debugger
> application folder).
>
> install Python 2.7.14 (or a higher 2.7.xx version) into c:python27, thus
> overwriting the version that was bundled with Immunity. This is needed to
> avoid TLS issues when trying to update mona.
将下载好的mona.py放进 PyCommands目录
将Python2.7.14（或更高版本的2.7.xx）安装到c:python27中，从而覆盖Immunity Debugger 与绑定的版本（python
2.5）。在尝试更新mona时，需要避免tls问题。
WinDBG下安装
需要下载mona.py、windbglib.py 和pykd
可以参考[https://github.com/corelan/windbglib上面的安装方法。](https://github.com/corelan/windbglib%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95%E3%80%82)
原文引用:
> Windows 7 or 10, 64bit
>
> Download pykd.zip from
>  and save it
> to a temporary location on your computer
>
> Check the properties of the file and “Unblock” the file if necessary.
>
> Extract the archive. You should get 2 files: pykd.pyd and vcredist_x86.exe
>
> Run vcredist_x86.exe with administrator privileges and accept the default
> values.
>
> Copy pykd.pyd to C:Program Files (x86)Windows Kits8.0Debuggersx86winext or
> C:Program Files (x86)Windows Kits10Debuggersx86winext
>
> Open a command prompt with administrator privileges and run the following
> commands:
1.寻找代码碎片
命令 !py mona findwild -s “执行” -m 模块名
例如`!py mona findwild -s "pop r32"` #寻找pop 任意寄存器 的gadget
2.打印模块信息
`!py mona module`
可以查看加载各个模块开启的安全机制
###  1.2 S.E.H分析
**1.2.1 结构化异常处理机制SEH**
S.E.H的全名为异常处理结构体(Structure Exception
Handler)是Windows特有的一种异常机制。每一个S.E.H包含两个DWORD指针：Next S.E.H Recoder（后文简称next
recoder）和Exception Handler（后文简称SE handler）
S.E.H需要通过try/catch之类的异常处理函数生成，同时S.E.H结构是存放在栈中的（仅32位环境），这也给Win程序的安全留下的隐患。
**1.2.2静态分析**
程序主要由_try{}_catch{}结构构成，在SEH_test()函数中生成一个S.E.H链。
通过除零来产生异常，触发S.E.H结构处理。
案例源码如下
    //SEH.cpp
    #include "stdafx.h"
    #include;
    #include
    char shellcode[]="x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90";
    void MyExceptionhandler()
    {
        printf("got an exception ,press Enter to kill the process!n");
        getchar();
        ExitProcess(1);
    }
    void SEH_test()
    {
        int zero=0;
        char buf[200];
        __asm int 0x3;
        __try{
            printf("In the SEH_test!n");
            strcpy(buf,shellcode);
            zero=4/zero;
        }
        __except(MyExceptionhandler()){};
    }
    int main(int argc, char* argv[])
    {
        SEH_test();
        return 0;
    }
使用IDA分析生成的HEX程序
注：这里的关键的几个函数，在IDA中我将名字修改成了与源码中的函数名同步，需要注意的是IDA的逆向是无法恢复原函数名的。
主函数和源码相同，只有一个跳转到SEH_test函数操作。
**1.2.3 S.E.H结构入栈分析**
通过 **push offset __except_handler3** 将处理结构异常函数的地址入栈
**通过** **mov eax, large fs:0** 将上一个S.E.H链的地址入栈
最后将自己的S.E.H链接放入fs:[0]作为链首。
    .text:004010F0 ; __unwind { // __except_handler3
    .text:004010F0                 push    ebp
    .text:004010F1                 mov     ebp, esp
    .text:004010F3                 push    0FFFFFFFFh
    .text:004010F5                 push    offset stru_423060
    **.text:004010FA                push    offset __except_handler3** **//SE handler入栈**
    **.text:004010FF                 mov     eax, large fs:0** **//将上一个S.E.H链入栈**
    **.text:00401105                 push    eax**
    .text:00401106                 mov     large fs:0, esp //将这个S.E.H链头放入fs:[0]，作为S.E.H链表的链首
    .text:0040110D                 add     esp, 0FFFFFEECh
    .text:00401113                 push    ebx
    .text:00401114                 push    esi
    .text:00401115                 push    edi
    .text:00401116                 mov     [ebp+ms_exc.old_esp], esp
    .text:00401119                 lea     edi, [ebp+var_124]
    .text:0040111F                 mov     ecx, 43h
    .text:00401124                 mov     eax, 0CCCCCCCCh
    .text:00401129                 rep stosd
    .text:0040112B                 mov     [ebp+var_1C], 0
    .text:00401132                 int     3               ; Trap to Debugger
    .text:00401133 ;   __try { // __except at loc_401176
    .text:00401133                 mov     [ebp+ms_exc.registration.TryLevel], 0
    .text:0040113A                 push    offset aInTheSehTest ; "In the SEH_test!n"
    .text:0040113F                 call    _printf
    .text:00401144                 add     esp, 4
    .text:00401147                 push    offset byte_428310 ; char *
    .text:0040114C                 lea     eax, [ebp+var_E4]
    .text:00401152                 push    eax             ; char *
    .text:00401153                 call    _strcpy
    .text:00401158                 add     esp, 8
    .text:0040115B                 mov     eax, 4
    .text:00401160                 cdq
    .text:00401161                 idiv    [ebp+var_1C]
    .text:00401164                 mov     [ebp+var_1C], eax
    .text:00401164 ;   } // starts at 401133
    .text:00401167                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
    .text:0040116E                 jmp     short loc_401180
    .text:00401170 ; ---------------------------------------------------------------------------    
    .text:00401170
    .text:00401170 loc_401170:                             ; DATA XREF: .rdata:stru_423060↓o
    .text:00401170 ;   __except filter // owned by 401133
    .text:00401170                 call    j_MyExceptionhandler
    .text:00401175 ; ---------------------------------------------------------------------------    
    .text:00401175                 retn
在OD中查看S.E.H结构
在INT 0x3断点，可以发现SEH链接的结构已经被OD添加了注释。