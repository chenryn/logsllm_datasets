Operator
Meaning
Example
Outcome if age is 42
==
Equal to
age == 100
False
!=
Not equal to
age != 0
True
Don’t confuse the equality operator == with the assignment operator =.
The expression x==y  compares x with y and has the value true if the values
are the same. The expression x=y assigns the value of y to x and returns the
value of y as its result.
Closely related to == and != are the relational operators. You use these
operators to find out whether a value is less than or greater than another value
of the same type. The following table shows how to use these operators.
Operator
Meaning
Example
Outcome if age is 42
Greater than
age > 16
True
>=
Greater than or equal to
age >= 42
True
Understanding conditional logical operators
C# also provides two other binary Boolean operators: the logical AND
operator, which is represented by the && symbol, and the logical OR
Download from finelybook PI:EMAIL
176
operator, which is represented by the || symbol. Collectively, these are known
as the conditional logical operators. Their purpose is to combine two
Boolean expressions or values into a single Boolean result. These operators
are similar to the equality and relational operators in that the value of the
expressions in which they appear is either true or false, but they differ in that
the values on which they operate must also be either true or false.
The outcome of the && operator is true if and only if both of the Boolean
expressions it’s evaluating are true. For example, the following statement
assigns the value true to validPercentage if and only if the value of percent is
greater than or equal to 0 and the value of percent is less than or equal to 100:
Click here to view code image
bool validPercentage;
validPercentage = (percent >= 0) && (percent = 0 && = 0 && percent = 0) && (percent = and  100);
Short-circuiting
The && and || operators both exhibit a feature called short-circuiting.
Sometimes, it is not necessary to evaluate both operands when ascertaining
the result of a conditional logical expression. For example, if the left operand
of the && operator evaluates to false, the result of the entire expression must
be false, regardless of the value of the right operand. Similarly, if the value of
the left operand of the || operator evaluates to true, the result of the entire
expression must be true, irrespective of the value of the right operand. In
these cases, the && and || operators bypass the evaluation of the right
operand. Here are some examples:
(percent >= 0) && (percent  100)
In this expression, if the value of percent is less than 0, the Boolean
expression on the left side of || evaluates to true. This value means that the
result of the entire expression must be true, and the Boolean expression to the
right of the || operator is not evaluated.
If you carefully design expressions that use the conditional logical
operators, you can boost the performance of your code by avoiding
unnecessary work. Place simple Boolean expressions that can be evaluated
easily on the left side of a conditional logical operator, and put more complex
expressions on the right side. In many cases, you will find that the program
Download from finelybook PI:EMAIL
178
does not need to evaluate the more complex expressions.
Summarizing operator precedence and associativity
The following table summarizes the precedence and associativity of all the
operators you have learned about so far. Operators in the same category have
the same precedence. The operators in categories higher up in the table take
precedence over operators in categories lower down.
Category
Operators Description
Associativity
Primary
()
++
--
Precedence override
Post-increment
Post-decrement
Left
Unary
!
+
-
+++
--
Logical NOT
Returns the value of the operand
unchanged
Returns the value of the operand
negated
Pre-increment
Pre-decrement
Left
Multiplicative *
/
%
Multiply
Divide
Division remainder (modulus)
Left
Additive
+
-
Addition
Subtraction
Left
Relational
>=
Equality
==
!=
Equal to
Not equal to
Left
Conditional
AND
&&
Conditional AND
Left
Conditional
OR
||
Conditional OR
Left
Assignment
=
Assigns the right-hand operand
to the left and returns the value
that was assigned
Right
Notice that the && operator and the || operator have a different
precedence: && is higher than ||.
Using if statements to make decisions
In a method, when you want to choose between executing two different
statements depending on the result of a Boolean expression, you can use an if
statement.
Understanding if statement syntax
The syntax of an if statement is as follows (if and else are C# keywords):
Click here to view code image
if ( booleanExpression )
    statement-1;
else
    statement-2;
If the booleanExpression evaluates to true, statement-1 runs; otherwise,
statement-2 runs. The else keyword and the subsequent statement-2 are
optional. If there is no else clause and the booleanExpression is false,
Download from finelybook PI:EMAIL
180
execution continues with whatever code follows the if statement. Also, notice
that the Boolean expression must be enclosed in parentheses; otherwise, the
code will not compile.
For example, here’s an if statement that increments a variable representing
the second hand of a stopwatch. (Minutes are ignored for now.) If the value
of the seconds variable is 59, it is reset to 0; otherwise, it is incremented by
using the ++ operator:
Click here to view code image
int seconds;
...
if (seconds == 59)
    seconds = 0;
else
    seconds++;
Boolean expressions only, please!
The expression in an if statement must be enclosed in parentheses.
Additionally, the expression must be a Boolean expression. In some
other languages—notably C and C++—you can write an integer
expression, and the compiler will silently convert the integer value to
true (nonzero) or false (0). C# does not support this behavior, and the
compiler reports an error if you write such an expression.
If you accidentally specify the assignment operator (=) instead of the
equality test operator (==) in an if statement, the C# compiler
recognizes your mistake and refuses to compile your code, such as in
the following example:
Click here to view code image
int seconds;
...
if (seconds = 59)  // compile-time error
...
if (seconds == 59) // ok
Accidental assignments were another common source of bugs in C
and C++ programs, which would silently convert the value assigned
(59) to a Boolean expression (with anything nonzero considered to be
Download from finelybook PI:EMAIL
181
true), with the result being that the code following the if statement
would be performed every time.
Incidentally, you can use a Boolean variable as the expression for an
if statement, although it must still be enclosed in parentheses, as shown
in this example:
Click here to view code image
bool inWord;
...
if (inWord == true) // ok, but not commonly used
...
if (inWord)         // more common and considered better style
Using blocks to group statements
Notice that the syntax of the if statement shown earlier specifies a single
statement after the if  (booleanExpression) and a single statement after the
else keyword. Sometimes you’ll want to perform more than one statement
when a Boolean expression is true. You could group the statements inside a
new method and then call the new method, but a simpler solution is to group
the statements inside a block. A block is simply a sequence of statements
grouped between an opening brace and a closing brace.
In the following example, two statements that reset the seconds variable to
0 and increment the minutes variable are grouped inside a block, and the
entire block executes if the value of seconds is equal to 59:
Click here to view code image
int seconds = 0;
int minutes = 0;
...
if (seconds == 59)
{
    seconds = 0;
    minutes++;
}
else
{
    seconds++;
}
Download from finelybook PI:EMAIL
182
Important If you omit the braces, the C# compiler associates only the
first statement  (seconds = 0;) with the if statement. The subsequent
statement (minutes++;) will not be recognized by the compiler as part
of the if statement when the program is compiled. Furthermore, when
the compiler reaches the else keyword, it will not associate it with the
previous if statement; instead, it will report a syntax error. Therefore, it
is good practice to always define the statements for each branch of an if
statement within a block, even if a block consists of only a single
statement. It might save you some grief later if you want to add
additional code.
A block also starts a new scope. You can define variables inside a block,
but they will disappear at the end of the block. The following code fragment
illustrates this point:
Click here to view code image
if (...)
{
    int myVar = 0;
    ... // myVar can be used here
} // myVar disappears here
else
{
    // myVar cannot be used here
    ...
}
// myVar cannot be used here
Cascading if statements
You can nest if statements inside other if statements. In this way, you can
chain together a sequence of Boolean expressions, which are tested one after
the other until one of them evaluates to true. In the following example, if the
value of day is 0, the first test evaluates to true and dayName is assigned the
string “Sunday”. If the value of day is not 0, the first test fails and control
passes to the else clause, which runs the second if statement and compares the
Download from finelybook PI:EMAIL
183
value of day with 1. The second if statement executes only if the first test is
false. Similarly, the third if statement executes only if the first and second
tests are false.
Click here to view code image
if (day == 0)
{
    dayName = "Sunday";
}
else if (day == 1)
{
    dayName = "Monday";
}
else if (day == 2)
{
    dayName = "Tuesday";
}
else if (day == 3)
{
    dayName = "Wednesday";
}
else if (day == 4)
{
    dayName = "Thursday";
}
else if (day == 5)
{
    dayName = "Friday";
}
else if (day == 6)
{
    dayName = "Saturday";
}
else
{
    dayName = "unknown";
}
In the following exercise, you’ll write a method that uses a cascading if
statement to compare two dates.
Write if statements
1. Start Microsoft Visual Studio 2017, if it is not already running.
2. Open the Selection solution, which is located in the \Microsoft
Press\VCSBS\Chapter 4\ Selection folder in your Documents folder.
Download from finelybook PI:EMAIL
184
3. On the Debug menu, click Start Debugging.
Visual Studio 2017 builds and runs the application. The form displays
two DatePicker controls, called firstDate and secondDate. Both controls
display the current date.
4. Click Compare.
The following text appears in the text box in the lower half of the
window:
Click here to view code image
firstDate == secondDate : False
firstDate != secondDate : True
firstDate   secondDate : True
firstDate >= secondDate : True
The Boolean expression, firstDate == secondDate, should be true
because both firstDate and secondDate are set to the current date. In
fact, only the less-than operator and the greater-than-or-equal-to
operator seem to be working correctly. The following image shows the
application running.
Download from finelybook PI:EMAIL
185
5. Return to Visual Studio 2017. On the Debug menu, click Stop
Debugging.
6. Display the code for the MainPage.xaml.cs file in the Code and Text
Editor window.
7. Locate the compareClick method, which should look like this:
Click here to view code image
private void compareClick(object sender, RoutedEventArgs e)
{
    int diff = dateCompare(firstDate.Date.LocalDateTime,
secondDate.Date.LocalDateTime);
    info.Text = "";
    show("firstDate == secondDate", diff == 0);
    show("firstDate != secondDate", diff != 0);
    show("firstDate  secondDate", diff > 0);
    show("firstDate >= secondDate", diff >= 0);
}
This method runs whenever the user clicks the Compare button on the
form. The expressions firstDate.Date.LocalDateTime and
secondDate.Date.LocalDateTime hold DateTime values; they represent
Download from finelybook PI:EMAIL
186
the dates displayed in the firstDate and secondDate controls on the form
elsewhere in the application. The DateTime data type is just another data
type, like int or float, except that it contains subelements with which you
can access the individual pieces of a date, such as the year, month, or
day.
The compareClick method passes the two DateTime values to the
dateCompare method. The purpose of this method is to compare dates
and return the int value 0 if they are the same, −1 if the first date is less
than the second, and +1 if the first date is greater than the second. A date
is considered greater than another date if it comes after it
chronologically. You will examine the dateCompare method in the next
step.
The show method displays the results of the comparison in the info text
box control in the lower half of the form.
8. Locate the dateCompare method, which should look like this:
Click here to view code image
private int dateCompare(DateTime leftHandSide, DateTime
rightHandSide)
{
    // TO DO
    return 42;
}
This method currently returns the same value whenever it is called rather
than 0, 1, or +1, regardless of the values of its parameters. This explains
why the application is not working as expected. You need to implement
the logic in this method to compare two dates correctly.
9. Remove the // TO DO comment and the return statement from the
dateCompare method.