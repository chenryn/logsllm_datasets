发送方也不需要连接。UDP是很简单的。然而，如果发送方把数据发送到未知的地方——
无人接收数据，也不会得到任何错误消息：
    private async Task Sender(IPEndpoint endpoint, bool broadcast,
        string groupAddress)
    {
      try
      {
        string localhost = Dns.GetHostName();
        using (var client = new UdpClient())
        {
        client.EnableBroadcast = broadcast;
        if (groupAddress ! = null)
        {
          client.JoinMulticastGroup(IPAddress.Parse(groupAddress));
        }
        bool completed = false;
        do
        {
          WriteLine("Enter a message or bye to exit");
          string input = ReadLine();
          WriteLine();
          completed = input == "bye";
          byte[] datagram = Encoding.UTF8.GetBytes($"{input} from {localhost}");
          int sent = await client.SendAsync(datagram, datagram.Length, endpoint);
        } while (! completed);
        if (groupAddress ! = null)
        {
          client.DropMulticastGroup(IPAddress.Parse(groupAddress));
        }
        }
      }
      catch (SocketException ex)
      {
        WriteLine(ex.Message);
      }
    }
现在可以用如下选项启动接收器：
    -p 9400
用如下选项启动发送器：
    -p 9400 -h localhost
可以在发送器中输入数据，发送到接收器。如果停止接收器，就可以继续发送，而不
会检测到任何错误。也可以尝试使用主机名而不是localhost，并在另一个系统上运行接收
器。
在发送器中，可以添加- 
b选项，删除主机名，给在同一个网络上侦听端口9400的所
有节点发送广播：
    -p 9400 -b
请注意广播不跨越大多数路由器，当然不能在互联网上使用广播。这种情况和多播不
同，参见下面的讨论。
25.6.3 使用多播
广播不跨越路由器，但多播可以跨越。多播用于将消息发送到一组系统上——所有节
点都属于同一个组。在IPv4中，为使用多播保留了特定的IP地址。地址是从224.0.0.0到
239.255.255.253。这些地址中的许多都保留给具体的协议，例如用于路由器，但
239.0.0.0/8可以私下在组织中使用。这非常类似于IPv6，它为不同的路由协议保留了著名
的IPv6多播地址。地址f::/ 16是组织中的本地地址，地址ffxe::/16有全局作用域，可以在公
共互联网上路由。
对于使用多播的发送器或接收器，必须通过调用UdpClient的JoinMulticastGroup方法
来加入一个多播组：
    client.JoinMulticastGroup(IPAddress.Parse(groupAddress));
为了再次退出该组，可以调用方法DropMulticastGroup：
    client.DropMulticastGroup(IPAddress.Parse(groupAddress));
用如下选项启动接收器和发送器：
    -p 9400 -g 230.0.0.1
它们都属于同一个组，多播在进行。和广播一样，可以启动多个接收器和多个发送
器。接收器将接收来自每个接收器的几乎所有消息。
25.7 使用套接字
HTTP协议基于TCP，因此HttpXX类在TcpXX类上提供了一个抽象层。然而TcpXX类
提供了更多的控制。使用套接字，甚至可以获得比TcpXX或UdpXX类更多的控制。通过
套接字，可以使用不同的协议，不仅是基于TCP或UDP的协议，还可以创建自己的协议。
更重要的是，可以更多地控制基于TCP或UDP的协议。
SocketServerSender和SocketClient项目实现为控制台应用程序（包），使用如下依赖
项和名称空间：
依赖项
    NETStandard.Library
    System.Net.NameResolution
名称空间：
    System
    System.Linq
    System.IO
    System.Net
    System.Net.Sockets
    System.Text
    System.Threading
    System.Threading.Tasks
    static System.Console
25.7.1 使用套接字创建侦听器
首先用一个服务器侦听传入的请求。服务器需要一个用程序参数传入的端口号。之
后，就调用Listener方法（代码文件SocketServer / Program.cs）：
    static void Main(string[] args)
    {
      if (args.Length ! = 1)
      {
        ShowUsage();
        return;
      }
      int port;
      if (! int.TryParse(args[0], out port))
      {
        ShowUsage();
        return;
      }
      Listener(port);
      ReadLine();
    }
    private void ShowUsage()
    {
      WriteLine("SocketServer port");
    }
对套接字最重要的代码在下面的代码片段中。侦听器创建一个新的Socket对象。给构
造函数提供AddressFamily、SocketType和ProtocolType。AddressFamily是一个大型枚举，
提供了许多不同的网络。例如DECnet（Digital Equipment在1975年发布它，主要用作PDP-
11系统之间的网络通信）;Banyan 
VINES（用于连接客户机）；当然还有用于IPv4的
InternetWork和用于IPv6的InternetWorkV6。如前所述，可以为大量网络协议使用套接字。
第二个参数SocketType指定套接字的类型。例如用于TCP的Stream、用于UDP的Dgram或
用于原始套接字的Raw。第三个参数是用于ProtocolType的枚举。例如IP、Ucmp、Udp、
IPv6和Raw。所选的设置需要匹配。例如，使用TCP与IPv4，地址系列就必须是
InterNetwork，流套接字类型Stream、协议类型Tcp。要使用IPv4创建一个UDP通信，地址
系列就需要设置为InterNetwork、套接字类型Dgram和协议类型Udp。
    public static void Listener(int port)
    {
      var listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream,
        ProtocolType.Tcp);
      listener.ReceiveTimeout = 5000; // receive timout 5 seconds
      listener.SendTimeout = 5000; // send timeout 5 seconds
      // etc.
从构造函数返回的侦听器套接字绑定到IP地址和端口号上。在示例代码中，侦听器绑
定到所有本地IPv4地址上，端口号用参数指定。调用Listen方法，启动套接字的侦听模
式。套接字现在可以接受传入的连接请求。用Listen方法指定参数，定义了服务器的缓冲
区队列的大小——在处理连接之前，可以同时连接多少客户端：
    public static void Listener(int port)
    {
      // etc.
      listener.Bind(new IPEndPoint(IPAddress.Any, port));
      listener.Listen(backlog: 15);
      WriteLine($"listener started on port {port}");
      // etc.
等待客户端连接在Socket类的方法Accept中进行。这个方法阻塞线程，直到客户机连
接为止。客户端连接后，需要再次调用这个方法，来满足其他客户端的请求；所以在
while循环中调用此方法。为了进行侦听，启动一个单独的任务，该任务可以在调用线程
中取消。在方法CommunicateWithClientUsingSocketAsync中执行使用套接字读写的任务。
这个方法接收绑定到客户端的Socket实例，进行读写：
    public static void Listener(int port)
    {
      // etc.
      var cts = new CancellationTokenSource();
      var tf = new TaskFactory(TaskCreationOptions.LongRunning,
        TaskContinuationOptions.None);
      tf.StartNew(() =>  // listener task
      {
        WriteLine("listener task started");
        while (true)
        {
        if (cts.Token.IsCancellationRequested)
        {
          cts.Token.ThrowIfCancellationRequested();
          break;
        }
        WriteLine("waiting for accept");
        Socket client = listener.Accept();
        if (! client.Connected)
        {
          WriteLine("not connected");
          continue;
        }
        WriteLine($"client connected local address " +
          $"{((IPEndPoint)client.LocalEndPoint).Address} and port " +
          $"{((IPEndPoint)client.LocalEndPoint).Port}, remote address " +
          $"{((IPEndPoint)client.RemoteEndPoint).Address} and port " +
          $"{((IPEndPoint)client.RemoteEndPoint).Port}");
        Task t = CommunicateWithClientUsingSocketAsync(client);
        }
        listener.Dispose();
        WriteLine("Listener task closing");
      }, cts.Token);
      WriteLine("Press return to exit");
      ReadLine();
      cts.Cancel();
    }
为了与客户端沟通，创建一个新任务。这会释放侦听器任务，立即进行下一次迭代，
等待下一个客户端连接。Socket类的Receive方法接受一个缓冲，其中的数据和标志可以读
取，用于套接字。这个字节数组转换为字符串，使用Send方法，连同一个小变化一起发送
回客户机：
    private static Task CommunicateWithClientUsingSocketAsync(Socket socket)
    {
      return Task.Run(() =>
      {
        try
        {
        using (socket)
        {
          bool completed = false;
          do
          {
            byte[] readBuffer = new byte[1024];
            int read = socket.Receive(readBuffer, 0, 1024, SocketFlags.None);
            string fromClient = Encoding.UTF8.GetString(readBuffer, 0, read);
            WriteLine($"read {read} bytes: {fromClient}");
            if (string.Compare(fromClient, "shutdown", ignoreCase: true) == 0)
            {
              completed = true;
            }
            byte[] writeBuffer = Encoding.UTF8.GetBytes($"echo {fromClient}");
            int send = socket.Send(writeBuffer);
            WriteLine($"sent {send} bytes");
          } while (! completed);
        }
        WriteLine("closed stream and client socket");
        }
        catch (Exception ex)
        {
        WriteLine(ex.Message);
        }
      });
    }
服务器已经准备好了。然而，下面看看通过扩展抽象级别读写通信信息的不同方式。
25.7.2 使用NetworkStream和套接字
前面使用了NetworkStream类、TcpClient和TcpListener类。NetworkStream构造函数允
许传递Socket，所以可以使用流方法Read和Write替代套接字的Send和Receive方法。在
NetworkStream的构造函数中，可以定义流是否应该拥有套接字。如这段代码所示，如果
流拥有套接字，就在关闭流时关闭套接字（代码文件SocketServer / Program.cs）：
    private static async Task CommunicateWithClientUsingNetworkStreamAsync(
      Socket socket)
    {
      try
      {
        using (var stream = new NetworkStream(socket, ownsSocket: true))
        {
        bool completed = false;
        do
        {
          byte[] readBuffer = new byte[1024];
          int read = await stream.ReadAsync(readBuffer, 0, 1024);
          string fromClient = Encoding.UTF8.GetString(readBuffer, 0, read);
          WriteLine($"read {read} bytes: {fromClient}");
          if (string.Compare(fromClient, "shutdown", ignoreCase: true) == 0)
          {
            completed = true;
          }
          byte[] writeBuffer = Encoding.UTF8.GetBytes($"echo {fromClient}");
          await stream.WriteAsync(writeBuffer, 0, writeBuffer.Length);
        } while (! completed);
        }
        WriteLine("closed stream and client socket");
      }
      catch (Exception ex)
      {
        WriteLine(ex.Message);
      }
    }
要在代码示例中使用这个方法，需要更改Listener方法，调用方法
CommunicateWithClient-UsingNetworkStreamAsync，而不是方法
CommunicateWithClientUsingSocketAsync。
25.7.3 通过套接字使用读取器和写入器
下面再添加一个抽象层。因为NetworkStream派生于Stream类，还可以使用读取器和
写入器访问套接字。只需要注意读取器和写入器的生存期。调用读取器和写入器的
Dispose方法，还会销毁底层的流。所以要选择StreamReader和StreamWriter的构造函数，
其中leaveOption参数可以设置为true。之后，在销毁读取器和写入器时，就不会销毁底层
的流了。NetworkStream在外层using语句的最后销毁，这又会关闭套接字，因为它拥有套
接字。还有另一个方面需要注意：通过套接字使用写入器时，默认情况下，写入器不刷新
数据，所以它们保存在缓存中，直到缓存已满。使用网络流，可能需要更快的回应。这里
可以把AutoFlush属性设置为true（也可以调用FlushAsync方法）：
    public static async Task CommunicateWithClientUsingReadersAndWritersAsync(
      Socket socket)
    {
      try
      {
        using (var stream = new NetworkStream(socket, ownsSocket: true))
        using (var reader = new StreamReader(stream, Encoding.UTF8, false,
          8192, leaveOpen: true))
        using (var writer = new StreamWriter(stream, Encoding.UTF8,
          8192, leaveOpen: true))
        {
        writer.AutoFlush = true;
        bool completed = false;
        do
        {
          string fromClient = await reader.ReadLineAsync();
          WriteLine($"read {fromClient}");
          if (string.Compare(fromClient, "shutdown", ignoreCase: true) == 0)
          {
            completed = true;
          }
          await writer.WriteLineAsync($"echo {fromClient}");
        } while (! completed);
        }
        WriteLine("closed stream and client socket");