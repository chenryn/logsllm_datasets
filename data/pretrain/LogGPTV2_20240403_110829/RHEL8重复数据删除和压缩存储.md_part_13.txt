::: mediaobject
![请求大小与吞吐量分析，以及关键对点](images/vdo-ev-throughput.png)
:::
:::
:::
分析示例结果：
::: itemizedlist
-   连续写入在请求大小 [**Y**]{.strong} 时达到峰时吞吐量。
    此曲线演示了可配置或自然由特定请求大小主导的应用程序如何考虑性能。较大的请求大小通常会提供更大的吞吐量，因为
    4 KiB I/O 操作可能会从合并中受益。
-   序列读取在 [**Z**]{.strong} 点达到类似的峰值吞吐量。
    在达到这些峰值时，I/O
    操作完成前的总体延迟会增加，且无额外的吞吐量。您应该调整该设备，使其不接受大于这个大小的
    I/O 操作。
-   随机读取在 [**X**]{.strong} 点达到峰时吞吐量。
    当出现大的随机访问请求时，某些设备可能达到近似连续的吞吐率，但其他系统可能会在顺序访问时受到更多的损失。
-   随机写入在 [**Y**]{.strong} 点达到峰值吞吐量。
    随机写入主要涉及和 deduplication 设备的交互，VDO
    会获得高性能，特别是请求的大小或者 I/O 深度较大时。
:::
:::
:::
:::
:::
::: section
::: titlepage
# []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effects-of-mixed-i-o-loads-on-vdo-performance_testing-vdo-performance}测试混合 I/O 加载对 VDO 性能的影响 {.title}
:::
此测试决定了您的 VDO 配置在混合读和写 I/O
加载时的情况，并分析混合读取和写入在最优的随机队列深度和请求大小从 4KB
到 1 MB 时的影响。
这个过程使用固定 I/O 深度执行四级测试，块大小在 8 KB 到 256 KB
的范围内，读的百分比以 10% 增加，从 0% 开始。
::: itemizedlist
**先决条件**
-   您已经确定了最佳 I/O 深度值。详情请查看 ["测试 I/O 深度对 VDO
    性能的影响"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effects-of-i-o-depth-on-vdo-performance_testing-vdo-performance "测试 I/O 深度对 VDO 性能的影响"){.xref}。
    在以下步骤中，使用最佳 I/O 深度值替换
    [*[best-depth]{.replaceable}*]{.emphasis}。
:::
::: orderedlist
**流程**
1.  创建一个新的 VDO 卷。
    详情请查看 ["创建用于性能测试的 VDO
    卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance "创建用于性能测试的 VDO 卷"){.xref}。
2.  通过在测试卷中执行写入 `fio`{.literal}
    作业来预先填充测试可访问的区域：
    ``` screen
    # fio --rw=write \
          --bs=8M \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --thread \
          --direct=1 \
          --scramble_buffers=1
    ```
3.  记录所报告用于读取和写入输入的吞吐量和延迟时间：
    ``` screen
    # for readmix in 0 10 20 30 40 50 60 70 80 90 100; do
        for iosize in 4 8 16 32 64 128 256 512 1024; do
          fio --rw=rw \
              --rwmixread=$readmix \
              --bs=${iosize}k \
              --name=vdo \
              --filename=/dev/mapper/vdo-test \
              --ioengine=libaio \
              --numjobs=1 \
              --thread \
              --norandommap \
              --runtime=300 \
              --direct=0 \
              --iodepth=optimal-depth \
              --scramble_buffers=1 \
              --offset=0 \
              --size=100g
        done
      done
    ```
4.  删除 VDO 测试卷。
    详情请查看 ["清理 VDO
    性能测试卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance "清理 VDO 性能测试卷"){.xref}。
5.  图形化测试结果。
    ::: example
    []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#idm139671981896000}
    **例 4.3. 混合 I/O 负载分析**
    ::: example-contents
    以下镜像演示了 VDO 如何响应混合 I/O 负载的示例：
    ::: figure
    []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#idm139671981894576}
    **图 4.4. 在不同读取和写入混合之间性能一致**
    ::: figure-contents
    ::: mediaobject
    ![在不同读取和写入混合之间性能一致](images/vdo-ev-rwmixes.png)
    :::
    :::
    :::
    在混合读取和写入范围内聚合性能和聚合延迟相对一致，从较低的写入吞吐量到更高的读取吞吐量。
    此行为可能因不同的存储而异，但重要的观察是，性能在不同的负载下保持一致，或者您可以了解对于演示特定读写混合的应用程序的性能期望。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果您的系统没有显示类似的响应一致性，这可能代表还不是最佳配置。如果出现这种情况，请联络您的红帽销售工程师。
    :::
    :::
    :::
:::
:::
::: section
::: titlepage
# []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effects-of-application-environments-on-vdo-performance_testing-vdo-performance}测试应用程序环境对 VDO 性能的影响 {.title}
:::
这些测试决定了在混合的实际应用程序环境中部署 VDO
配置如何动作。如果您知道更多有关预期环境的详细信息，还要对其进行测试。
::: itemizedlist
**先决条件**
-   考虑在您的配置中限制允许的队列深度。
-   如果可能，请调整应用程序以使用对 VDO 性能最有用的块大小的请求。
:::
::: orderedlist
**流程**
1.  创建一个新的 VDO 卷。
    详情请查看 ["创建用于性能测试的 VDO
    卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance "创建用于性能测试的 VDO 卷"){.xref}。
2.  通过在测试卷中执行写入 `fio`{.literal}
    作业来预先填充测试可访问的区域：
    ``` screen
    # fio --rw=write \
          --bs=8M \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --thread \
          --direct=1 \
          --scramble_buffers=1
    ```
3.  记录所报告用于读取和写入输入的吞吐量和延迟时间：
    ``` screen
    # for readmix in 20 50 80; do
        for iosize in 4 8 16 32 64 128 256 512 1024; do
          fio --rw=rw \
              --rwmixread=$readmix \
              --bsrange=4k-256k \
              --name=vdo \
              --filename=/dev/mapper/vdo-name \
              --ioengine=libaio \
              --numjobs=1 \
              --thread \
              --norandommap \
              --runtime=300 \
              --direct=0 \
              --iodepth=$iosize \
              --scramble_buffers=1 \
              --offset=0 \
              --size=100g
        done
      done
    ```
4.  删除 VDO 测试卷。
    详情请查看 ["清理 VDO
    性能测试卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance "清理 VDO 性能测试卷"){.xref}。
5.  图形化测试结果。
    ::: example
    []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#idm139671992833104}
    **例 4.4. 应用程序环境分析**
    ::: example-contents
    以下镜像演示了 VDO 如何响应混合 I/O 负载的示例：
    ::: figure
    []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#idm139671985347856}
    **图 4.5. 混合环境性能**
    ::: figure-contents
    ::: mediaobject
    ![混合环境性能](images/vdo-ev-mixedenvironment.png)
    :::
    :::
    :::
    :::
    :::
:::
:::
::: section
::: titlepage
# []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#options-used-for-testing-vdo-performance-with-fiotesting-vdo-performance}用于使用 fio 测试 VDO 性能的选项 {.title}
:::
VDO 测试使用 `fio`{.literal}
实用程序来整合生成具有可重复特征的数据。在测试中模拟真实世界工作负载需要以下
`fio`{.literal} 选项：
::: table
[]{#testing-vdo-performance_deduplicating-and-compressing-storage.html#idm139671947594384}
**表 4.1. 使用的 `fio`{.literal} 选项**
::: table-contents
+----------------------+----------------------+----------------------+
| 参数                 | 描述                 | 测试中使用的值       |
+:=====================+:=====================+:=====================+
| `--size`{.literal}   | `fio`{.literal}      | 100 GiB              |
|                      | 发送到每个           |                      |
|                      | 作业目标的数据数量。 |                      |
|                      |                      |                      |
|                      | 另请参阅             |                      |
|                      | `                    |                      |
|                      | --numjobs`{.literal} |                      |
|                      | 选项。               |                      |
+----------------------+----------------------+----------------------+
| `--bs`{.literal}     | `fio`{.literal}      | 4k                   |
|                      | 生成的每             |                      |
|                      | 个读写请求的块大小。 |                      |
|                      |                      |                      |
|                      | 红帽建议使用 4 KiB   |                      |
|                      | 块大小匹配 4 KiB     |                      |
|                      | 默认 VDO。           |                      |
+----------------------+----------------------+----------------------+
| `                    | `fio`{.literal}      | 1 代表 HDD，2 代表   |
| --numjobs`{.literal} | 为基准               | SSD                  |
|                      | 测试创建的作业数量。 |                      |
|                      |                      |                      |
|                      | 每个作业发送由       |                      |
|                      | `--size`{.literal}   |                      |
|                      | 选项指定的数         |                      |
|                      | 据量。第一个作业根据 |                      |
|                      | `--offset`{.literal} |                      |
|                      | 选项指定的偏移向设备 |                      |
|                      | 发送数据。除非提供了 |                      |
|                      | `--offset_           |                      |
|                      | increment`{.literal} |                      |
|                      | 选                   |                      |
|                      | 项，否则后续作业将覆 |                      |
|                      | 盖磁盘的同一区域，这 |                      |
|                      | 会将每个作业从该值开 |                      |
|                      | 始的上一个作业偏移。 |                      |
|                      |                      |                      |
|                      | 为了在闪             |                      |
|                      | 存磁盘（SSD）上达到  |                      |
|                      | 峰值性能，红帽建议至 |                      |
|                      | 少有两个作业。一个作 |                      |
|                      | 业通常足以饱和旋转型 |                      |
|                      | 磁盘（HDD）吞吐量。  |                      |
+----------------------+----------------------+----------------------+
| `--thread`{.literal} | 指示 `fio`{.literal} | [*none*]{.emphasis}  |
|                      | 作业在               |                      |
|                      | 线程中运行，而不是以 |                      |
|                      | fork                 |                      |
|                      | 运行，这             |                      |
|                      | 可以通过限制上下文切 |                      |
|                      | 换来提供更好的性能。 |                      |
+----------------------+----------------------+----------------------+
| `-                   | `fio`{.literal}      | `libaio`{.literal}   |
| -ioengine`{.literal} | 用于基准测试的 I/O   |                      |
|                      | 引擎。               |                      |
|                      |                      |                      |
|                      | 红帽测试使用名为     |                      |
|                      | `libaio`{.literal}   |                      |
|                      | 的异步非缓冲引擎测试 |                      |
|                      | 一个或多个进程同时进 |                      |
|                      | 行随机请求的工作负载 |                      |
|                      | 。`libaio`{.literal} |                      |
|                      | 引擎可让单           |                      |
|                      | 个线程在检索任何数据 |                      |
|                      | 之前异步发出多个请求 |                      |
|                      | 。这限制了同步引擎如 |                      |
|                      | 果许多线程提供请求时 |                      |
|                      | 所需的上下文切换数。 |                      |
+----------------------+----------------------+----------------------+
| `--direct`{.literal} | 该选项               | 1                    |
|                      | 允许提交到该设备的请 | (`libaio`{.literal}) |
|                      | 求绕过内核页面缓存。 |                      |
|                      |                      |                      |
|                      | 您必须将             |                      |
|                      | `libaio`{.literal}   |                      |
|                      | 引擎与               |                      |
|                      | `--direct`{.literal} |                      |
|                      | 选项搭配使           |                      |
|                      | 用。否则，内核将同步 |                      |
|                      | API 用于所有 I/O     |                      |
|                      | 请求。               |                      |
+----------------------+----------------------+----------------------+
| `                    | 任意时刻的 I/O       | 至少 128             |
| --iodepth`{.literal} | 缓冲数量。           |                      |
|                      |                      |                      |
|                      | 高的值通常会提高     |                      |
|                      | 性能，特别是用于随机 |                      |
|                      | 读取和写入时。高值可 |                      |
|                      | 确保控制器始终具有批 |                      |
|                      | 处理请求。但是，设置 |                      |
|                      | 这个值太大（通常大于 |                      |
|                      | 1K）可能             |                      |
|                      | 会导致不必要的延迟。 |                      |
|                      |                      |                      |
|                      | 红帽建议 128 到 512  |                      |
|                      | 之间的值。最         |                      |
|                      | 终的值会是一个折中的 |                      |
|                      | 选择，它取决于您的应 |                      |
|                      | 用程序如何容忍延迟。 |                      |
+----------------------+----------------------+----------------------+
| `--iodepth_bat       | 当 I/O               | 16                   |
| ch_submit`{.literal} | 深度缓               |                      |
|                      | 冲池开始为空时创建的 |                      |
|                      | I/O 请求数目。       |                      |
|                      |                      |                      |
|                      | 这个选项限制任务从   |                      |
|                      | I/O                  |                      |
|                      | 操作切换为缓冲创建。 |                      |
+----------------------+----------------------+----------------------+
| `--iodepth_batch     | 提                   | 16                   |
| _complete`{.literal} | 交批处理前需要完成的 |                      |
|                      | I/O 操作数目。       |                      |
|                      |                      |                      |
|                      | 这个选项限制任务从   |                      |
|                      | I/O                  |                      |
|                      | 操作切换为缓冲创建。 |                      |
+----------------------+----------------------+----------------------+
| `--gt                | 禁用                 | 1                    |
| od_reduce`{.literal} | 日常调用来计算延迟。 |                      |
|                      |                      |                      |
|                      | 如果                 |                      |
|                      | 启用，这个设置会降低 |                      |
|                      | 吞吐量。启用此选项， |                      |
|                      | 除非您需要测量延迟。 |                      |
+----------------------+----------------------+----------------------+
:::
:::
:::
:::
[]{#discarding-unused-blocks_deduplicating-and-compressing-storage.html}