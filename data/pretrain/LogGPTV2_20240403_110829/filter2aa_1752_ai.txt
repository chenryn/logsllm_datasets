### 3.13 结论
在本节中，我们将讨论I/O性能优化的重要性。通过合理的方法和策略，可以显著提升C程序中的I/O效率。以下是一些关键点：

- **调用write()**：合理使用`write()`函数可以提高写入操作的性能。
- **I/O性能优化**：小规模的改进可以在整体上带来显著的性能提升。
- **实际应用**：通过具体的实例来展示如何进行I/O优化。
- **Linux I/O调优**：相对于其他操作系统，Linux提供了更多高效的I/O调优方法。

### 第4章 高级文件I/O

#### 4.1 散布/聚集I/O
散布/聚集I/O是一种高效处理多个I/O操作的技术。它允许将多个分散的数据块合并成一个单一的I/O操作，从而减少系统调用次数并提高性能。

##### 4.1.1 `readv()` 和 `writev()`
Linux实现了POSIX 1003.1-2001标准中的散布/聚集I/O系统调用`readv()`和`writev()`。

- **`readv()`**：从文件描述符`fd`读取数据到多个缓冲区。
  ```c
  #include <sys/uio.h>
  ssize_t readv(int fd, const struct iovec *iov, int iovcnt);
  ```
- **`writev()`**：将多个缓冲区的数据写入文件描述符`fd`。
  ```c
  #include <sys/uio.h>
  ssize_t writev(int fd, const struct iovec *iov, int iovcnt);
  ```

其中，`iovec`结构体定义如下：
```c
struct iovec {
    void *iov_base; /* 缓冲区指针 */
    size_t iov_len; /* 缓冲区大小 */
};
```

##### 4.1.1.1 返回值
- 成功时返回实际读写的字节数。
- 失败时返回-1，并设置`errno`。

##### 4.1.1.2 `writev()`示例
以下是一个简单的示例，展示了如何使用`writev()`同时写入三个不同的段。

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/uio.h>

int main() {
    struct iovec iov[3];
    ssize_t nr;
    int fd, i;
    char *buf[] = {
        "The term buccaneer comes from the word boucan.\n",
        "A boucan is a wooden frame used for cooking meat.\n",
        "Buccaneer is the West Indies name for a pirate.\n"
    };

    fd = open("buccaneer.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1) {
        perror("open");
        return 1;
    }

    for (i = 0; i < 3; i++) {
        iov[i].iov_base = buf[i];
        iov[i].iov_len = strlen(buf[i]);
    }

    nr = writev(fd, iov, 3);
    if (nr == -1) {
        perror("writev");
        return 1;
    }

    close(fd);
    return 0;
}
```

##### 4.1.1.3 `readv()`示例
以下是一个简单的示例，展示了如何使用`readv()`同时读取三个不同的段。

```c
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/uio.h>

int main() {
    char foo[48], bar[51], baz[49];
    struct iovec iov[3];
    ssize_t nr;
    int fd, i;

    fd = open("buccaneer.txt", O_RDONLY);
    if (fd == -1) {
        perror("open");
        return 1;
    }

    iov[0].iov_base = foo;
    iov[0].iov_len = sizeof(foo);
    iov[1].iov_base = bar;
    iov[1].iov_len = sizeof(bar);
    iov[2].iov_base = baz;
    iov[2].iov_len = sizeof(baz);

    nr = readv(fd, iov, 3);
    if (nr == -1) {
        perror("readv");
        return 1;
    }

    for (i = 0; i < 3; i++) {
        printf("%s", iov[i].iov_base);
    }

    close(fd);
    return 0;
}
```

#### 4.2 epoll
epoll是Linux提供的一种高效的多路复用I/O机制，适用于高并发场景。

##### 4.2.1 创建epoll实例
```c
#include <sys/epoll.h>
int epfd = epoll_create(100); /* 计划监视约100个文件描述符 */
if (epfd == -1) {
    perror("epoll_create");
    return 1;
}
```

##### 4.2.2 控制epoll实例
```c
#include <sys/epoll.h>
int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
```

- **`EPOLL_CTL_ADD`**：将文件描述符`fd`添加到epoll实例`epfd`中。
- **`EPOLL_CTL_DEL`**：从epoll实例`epfd`中删除文件描述符`fd`。
- **`EPOLL_CTL_MOD`**：修改epoll实例`epfd`中文件描述符`fd`的事件。

##### 4.2.3 等待epoll事件
```c
#include <sys/epoll.h>
int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);
```

- `epoll_wait()`会阻塞直到有事件发生或超时。
- `events`指向一个数组，用于存储发生的事件。
- `maxevents`指定最多等待的事件数。
- `timeout`指定等待时间（毫秒），-1表示无限期等待。

以下是一个简单的示例，展示了如何使用epoll等待事件。

```c
#define MAX_EVENTS 64
struct epoll_event *events;
int nr_events, i, epfd;

events = malloc(sizeof(struct epoll_event) * MAX_EVENTS);
if (!events) {
    perror("malloc");
    return 1;
}

nr_events = epoll_wait(epfd, events, MAX_EVENTS, -1);
if (nr_events < 0) {
    perror("epoll_wait");
    return 1;
}

for (i = 0; i < nr_events; i++) {
    printf("Event on fd %d: ", events[i].data.fd);
    if (events[i].events & EPOLLIN) {
        printf("Readable\n");
    }
    if (events[i].events & EPOLLOUT) {
        printf("Writable\n");
    }
    if (events[i].events & EPOLLERR) {
        printf("Error\n");
    }
}

free(events);
close(epfd);
return 0;
```

通过以上内容，我们介绍了高级文件I/O技术，包括散布/聚集I/O和epoll，这些技术可以帮助我们在高并发场景下更高效地处理I/O操作。