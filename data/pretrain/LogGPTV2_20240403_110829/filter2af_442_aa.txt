翻译自：   
翻译： 聂心明
Java反序列化漏洞已经是过去两年安全圈里面最热的流行词了，因为每一个使用原始java序列化的框架都会受到反序列化攻击。一开始，还有很多不同的方法去试图解决这个问题的。（
 ， ， 
）。这篇文章着重讲java反序列化漏洞和解释oracle在最新的jdk中提供了怎样的缓解措施。
# 背景
让我们回顾java反序列化的进程。java序列化 （
) 是Java内置的功能，这个功能可以把java对象转换成二进制数据，也可以把二进制数据转换成对象。通过调用serialization
把对象转换成二进制数据，通过调用deserialization把二进制数据转换成java对象。在企业环境中，能直接存储和恢复对象的状态是构建分布式系统的关键因素。比如，JMS消息队列系统
（  ）
通过序列化把流对象数据通过通信线路送到目的地。 RESTful （
 ） 客户端应用可能通过序列化把
OAuth token （  ）
对象存储在硬盘上，以便做进一步的身份验证。java的远程方法调用JMI ，（
）在JVM之间直接使用序列化互相通信。除了这些还有其他使用序列化的例子。
# 检查流
当应用代码触反序列化的时候， ObjectInputStream （
）将对象流数据初始化为对象。ObjectInputStream
确保恢复已序列化的对象。在这个过程中，ObjectInputStream将字节流与JVM类路径中可用的类进行匹配。  
# 所以发生了什么问题？
在反序列化过程中，当readObject()把二进制数据转换成对象结构的时候，它会寻找序列化流中  
与对象类型相关的魔术字节,这些对象类型通常被写入流中，或者是那些已被定义的类型（比如：enum, array,
String，等）。在处理流数据时，上面提到的对象类型需要被解析，如果对象类型无法被解析，这种类型就会被解析成为一般类型TC_OBJECT （
），最终，二进制数据流中所携带的对象将从JVM类路径中恢复，如果没有找到相关的类，就会报错。  
问题出现的地方是，给readObject()提供一个字节流，此字节流可以被构造成特殊的类，这个类存在于JVM的类路径中，并且可以被使用，这篇文章列举了已知的利用链，这些利用链可以造成远程命令执行。所以有大量的类
（ 
）被认为有rce漏洞。并且，安全研究员不断发现有此类漏洞的类。现在你可能会问，怎么有这么多类用于rce？依靠这些原始类就可以构造特定恶意的类，从而实现攻击，这些恶意的类被序列化并且这些数据在各个点被交换，被解析，被执行。实现攻击的技巧是JDK信任二进制数据流，payload通过有效的初始化类来反序列化。这样构造payload就会造成毁灭性的后果。  
当然攻击者就可以通过输入二进制流来达到攻击的目的，其中的详细信息超出了本文的范围。要想得到更详细的信息可以参考ysoserial （
 ） 这个工具，这大概是生成payload最好的工具了吧。
# 怎样缓解反序列化攻击
轻率的说，通过实现 LookAheadObjectInputStream （
） 策略就可以完全缓解反序列化漏洞。缓解的实现方法是写一个ObjectInputStream 的子类，这个子类要重写 resolveClass() （
)
），并在这个方法中验证一个类是否能被加载。这个方法看上去能有效地缓解反序列化漏洞，最常见的两种实现方法是白名单和黑名单 （
 ）
。在白名单中，只能让可接受的类被反序列化解析，其他的类会被阻止。黑名单则是收集已知会造成问题的类，然后把它们全部阻止。  
白名单和黑名单都有自己的优点和缺点，但是我认为基于白名单的实现方法能更好的缓解反序列化漏洞，它能有效的识别那些安全的输入，这种做法也是安全实践的一部分。另一个方面，基于黑名单的方式很容易让名单变的越来越大，而且黑名单还会有覆盖不全和被绕过的情况。
    protected Class resolveClass(ObjectStreamClass desc)
                    throws IOException, ClassNotFoundException {
          String name = desc.getName();
          if(isBlacklisted(name) ) {
                  throw new SecurityException("Deserialization is blocked for security reasons");
          }
          if(isWhitelisted(name) ) {
                  throw new SecurityException("Deserialization is blocked for security reasons");
          }
          return super.resolveClass(desc);
    }
# jdk中新的反序列化过滤方案
尽管有一些特别的实现来缓解反序列化漏洞带来的影响，但是关于如何解决这样的问题，官方的规范依然很匮乏。为了解决这个问题，Oracle 最近引进
serialization filtering （ 
）来提高反序列化的安全性，它似乎结合了黑名单和白名单两种方式。新的反序列化过滤器被集成在JDK 9之中，然鹅，这个特性已经被移植到更老的JDK之中了。  
核心原理是，反序列化过滤基于 ObjectInputFilter （
）接口，这个接口提供一种配置能力，目的是在反序列化过程中验证输入的数据。通过ObjectInputFilter接口参数： Status.ALLOWED （
）， Status.REJECTED （
）或者 Status.UNDECIDED （
）
去检查输入数据的状态。依靠反序列化脚本可以配置这些参数，比如，如果想用黑名单的形式，那么遇到一些特殊的类就要返回Status.REJECTED，并且如果返回Status.UNDECIDED的话，就是允许反序列化。另外一方面，如果想用白名单的形式，那么当返回Status.ALLOWED的时候，就代表匹配到了白名单里面的类。此外，过滤器也被允许访问一些反序列化数据中的一些其他信息，比如，在反序列化过程中类数组中数组的长度
arrayLength （
），每一个内置对象的深度 depth （
），当前对象的引用数量 references （
），当前二进制流占用空间的大小 streamBytes （
）。这些提供了关于输入流更多的细粒度信息，并且在每一次匹配中都会返回相应的状态。
# 如何配置过滤器
jdk 9 支持三种方式配置过滤器： custom filter （  ），
也可以使用process-wide filter （  ）
配置全局的过滤器，built-in filters （
 ）
专门用于RMI，现在习惯用 Distributed Garbage Collection (DGC) （
 ）
# 基于场景的过滤器
当自己的反序列化的场景和普通场景的反序列化方式不同时，那么自定义过滤器（custom
filter）这个方案就非常合适。通常通过实现ObjectInputFilter 接口和重写checkInput函数来创建自定义过滤器。
    static class VehicleFilter implements ObjectInputFilter {