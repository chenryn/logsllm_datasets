执行范例
Balking-
1
doSave
No.4
No.3
:saverThread
No.7
厂
定斯州save保存
-不需要的话，就算了吧
---
H(balk)
T
没有重复的号码
1
因啪接
---
## Page 138
分别足guardedMethod与 stateChangingMethod。
的方法(stateChangingMethod)。
参与者的状态变化。
程执行 guardMethod 时，只要满足警戒条件，就会执行实例的操作。但警戒条件不
GuardedObject（被警戒的对象）参易者
3
（第3章）的时序图（图3-4）比较。
BalkingPattern的所有参与者
GuardedObject 参者除了guardedMethod 以外，可能还会有用米更改实例状态
在范例程序中，Data类就是 GuardedObject 参与者。save 方法与 change 方法则
GuardedObject 参与者是个拥有被警成的方法（guardedMethod）的类。当线
类图如图 4-3所示，而时序图如图 4-4所示。请与Guarded Suspension Pattern
范例程序的警戒条件则是“changed字段的值为 true"。
Balking Pattern 的所有参与者如下：
staieChangingmeihod (guarded}
statc
图 4-4 Balking Patterm 的时序图
图 4-3Balking Pattern 的类图
Guardedobject
stateCha,oingMet hod
目的作
---
## Page 139
stateChangingMethod 方法的情况）。
来就将 initialized字段设置为true，记录初始化操作已经处理完毕了（这相当于没有
化。调月 init 方法时，会先去检查 initialized字段。
警戒条件只有第一次成立时
进入下-个工作。这种情况就适合使用 Balking Pattern。这是提高程序的响应性。
不想等待警求条件成立时
的原因，是为了提高程序的执行性能-
次，
不需要割意去执行的时候
作前balk呢？
何时使用（适用性）
扩展思考方向的提示
（就是balk：设计成throw出异常也可以）。
当 initialized 字段的值为 false 时，以 dolnit 方法进行实际的初始化操作，接下
Balking Pattern 该在什么时机使用呢？也就是说，什么情况下，我们会想在操
public class Something {
当 initialized 字段的值为 truc 时，表示已经初始化了，所以就直接 return 退出
当“警戒条件只有第一次成立时”，也可以使用Balking Pattern。
balk 的原因是comient 的内容已经写在文件里了，没有必要大费工夫再去写
例如 List 4-5的 Something 类。在这里使用 initialized字段来表示是否已经初始
范例程序中，
List 4.5
1()nruy pion paztuciuouis attqnd
Private boolean initialized = false;
doInit();
if (initialized) I
return:
只进行一次初始化操作的类（Something.java）
，当 content 字段的内容没有改变，就在 save 方法里 baik 住了。
Balking
一不需要的话，就算了吧
4章
2
---
## Page 140
正常处理目的操作：返回 false 则表示发生balk，目的操作没有进行。
以返回值表达 bak 的发生
忽略 balk 的发生
的结果。
表达bak结果的方式
14
候称为latch（门门）这个门门.
似的问题，请等·下试着找看看，
终结处理等“无法执行两次以上的操作”中。练习问题中，也有（偷偷地）出现类
这个类“警戒条件不成立了以后，就绝对不会再次成立了”。
在guardedMethod方法里因为balk 而退出时，我们可用下面几种方式来表示balk
像 Something 类的 initialized 字段这种“状态只会变化一次的变量"，我们有时
以 boolean类型的返回值表示 balk 的发生
像这种只有第·次执行时警戒条件会成立的例子，经常出现在实例的初始化，
若是返回参考类型的方法，也可以返回 mull表示 balk 的发生。
最简单的方式，就是不通知调用端 balk 的发生。在范例程序中就是采用这种方
因为 iniialized 字段“只要变成 true 以后，就不会再变成 false了”。也就是说，
while (initcalized) {
在这种地方，如l果使用 Guarded Suspension Pattern，当然是错误的。
if (inilialized)
List 4-5中，有使川if条件式米检杏警成条件。
wait();
return;
private void deolnit() ↑
‘/实际的初始化操作
initialized = true;
只要锁上就不会再打开了，
程序收录在下载文件夹Balking/Others/lnitl内
例如返回 ture 就是没有 balk，而有
---
## Page 141
wait的结束是什么时候
Balking Pattern 与 Guarded Suspension Pattern 的中间
看看警戒条件会不会成立，如果还是不成立的话，就balk退出，这种方式称为 guarded
有一种折衷的做法—“在条件成立为止之前，等待一定的时间”。等待·-定的时间，
到成立为止。
法处理这个通知，通知处理会balk掉。
Subject 参与者要通知1 Observer参与者状态的变化时，若 Observer 参与者的状态无
Observer Pattern（参考附录E[GoF] [Yuki01])
Guarded Suspension Pattern（第 3 章）
6
timcd，或是简单地称为timeout
是从方法 throw 出异常。本章末的练习问题4-5就是这么做的。
以异常表达halk的发生
相关Pattern
进阶说明：timeout
，就是在实例 obj上，调用 wait 方法，timeout 的时间是约 1000ms（约1s）。
在多线程的环境下使用Observer Pattern 时，可能会用到Balking Pattern，当
也可以使用异常表达 balk的发生，这时，balk 时就不是从方法 retum 出束，而
若调用 Java 的 wait方法时加上参数，可以指定 timeout 的时问。例如，下面的语
而第3章所学过的 Guarded Suspension Pattern，当警戒条件不成立时，会等待
这一章所学的 Baking Pattern中，当警戒条件不成立时，会直接balk 退出。
这章的进阶说明要谈的是timeout,
而 Baikiang Patern 在警戚条件不成立时，线程会直接退出。
Guarded SuspensionPattcrm 作guardedMethod的警戒条件不成立时，线程会等待。
Balking-
-不需要的话，就算了吧
---
## Page 142
guarded timed 的实现
的timeout无法识别”的问题。
说“如果我是神的话，我实在想要改掉Java的这些问题")。其中之一，就是“wait
程序代码会需要稍微复杂一点，下一段中将详细解说。
wait 方法是被 notify、notifyAll，
时候。与notify、nouifyAll的时候一样，需要重新获取 obj的锁定，
发生 timeout 时
于中断，将在后面说明。
张取obj的锁定，并抛出IntermuptedException异常：
notifyAll，线程被唤醒以后，还是要重新获取 obj的锁定。
当 norifyAll 方法执行时
Java 规格里没有明确定义。
当 notify 方法执行时
发生下面的情况，才会从等待区里退出。
（如果我是神）”这样的标题，举出了·-些Java语言多线程的问题（标题的意思是
Allen Holub 的著作（参考附录E[Holubo0]）的最后一章，下了“IfI Were King
那么，看完上面的说明后，或许读者已经察觉这一件事一—我们没有办法识别
notify、notifyAli 两个方法是对实例调用的，而 interrupt 则是对线程调用的。关
那么我们就来尝试实现 guarded timed 的程序吧。首先，我们先定义 timeout 用
当 wait方法参数中设置的timeout 时间（上面的例子是约1000ms）已经到了的
notifyAll 会把实例的等待区里所有的线程全部唤醒。无论是 notity 还是
被 interrupt 时，等待区里的线程会（与被调用 notify、notifyAll 时一样）重新
执行这个语句，线程就会进入 obj 的等待区望暂停，并释放 obj 的锁定。只有
对这条线程调用 interrupt 方法时。
对obj 调月 notifyAll方法时。
但等待区甲若有多条线程时，只有一条线程会被唤醒。哪--条线科会被唤醒。
对obj调用 notify方法，线程被唤醒时。
obj.wait(l000);
//指定tirmeout时间为约i00Cmg
，还是自己 timeout 了。
，所以要实现 guarded timed,
---
## Page 143
的异常），写程序时请务必小心不要出现这些情况（Host类中，若timeout 的值为负
长），wait的参数如果传入负数的话，会抛出 IllegalArgumentException（参数不合法
一种：
InterruptedException的子类（参考附录ELea]）。也就是我们将 timeout 视为取消的
都当作和0样米处理)。
当 wait的参数传入0的时候，就表示没有timcout 时间（timeout 的时间为无限
TimeoutException
public class Host ↑
Host类（List 4-7）拥有更改状态用的 setExecutable 方法与执行用的execute 方
List 4-7
List 4-6
 public synchronized void execute () throws InterruptedException,
public synchronized void setExecutahle(boolean on) (
private boolean ready = false：//如果可以执行方法的诺则为true
private final long timeout;
public TimeoutException(String msg) f
//评断状态后执行它
/！更改状态
public Host(long timeout)
this.timeout = timeout;
 super (msgl; 
long start
notifyAll();
ready  on;
具有 tirmeout 的 Host 类（Host.java)
TimeoutException 类(TimeoutException.java)
System.currentTimeMillis();
程序收录在下载文件夹Balking/Others/Timeout 内
//timeout值
Balking-
-不需要的话，就算了吧
//开始时刻
第4喜
---
## Page 144
4-5 这样发生 timeout。这个范例中，出现了 5ms 左右的误差。
8
public class Main ↑
Main类（List 4-8）中，设置timecut 为约10000ms（约10s），建立. Host类的实
calls doExecute"};
List 4-8
public static void main(string[] args)
private void doExecute{) {
！/实际的处理操作
System.out.println(Thread.currentThread() .getName() + "
} catch (lnterruptedexception e) (
Host host = new Host(lo0oc);
l catch (TimeoutException e) {
doExecute();
while (!ready):
e.printstackrrace();
e.printstackTrace();
host.execute(); 
 System.out.println("execute BEGIN");
Main 类(Main.java)
wait(rest);
if (rest <= O) {
long rest
long now = System.currentTimeMiilist);
throw new TimeoutException ("now
timeout - (now － start);
程序收录在下载文件夹Balking/Others/Timeout 内
程字收录在下载文件夹Balking/Others/Timeout内
//剩下的等待时间
//现在时刻
---
## Page 145
适时，才进行线程目的操作；当状态不合适时，就不进行目的操作了。
现”中将要介绍。
理解的概念。
set)”。这是Java 语言规格里没有出现的名词，不过可用来与等待区比较，是可帮助
自己检查是不是中断状态，自己throw 出去（参考附录E[Holuoo])。
意识到现在是不是中断状态的方法，或是使用 islnterrupted 方法或 interrupted 方法
synchronized块，都没有办法设置 timeout 的值。
synchronized 没有 timeout，也不能中断
异常：
重点回顾
常。而必须在获取锁定，进入 synchronized 了以后，调用wait、sleep、join 等会
另外，对状态（2）中的线程调用intermupt 的话，会抛出InterruptedException
Balkingn Patterm 中，有--个具有状态的对象。而这个对象只想在自已的状态合
另外，附录E的[Venners99]中，将状态（1）的线程称为“停留在入口区（entry
将状态（2）中的线程timeout 的方法，就是本章进阶说明“guarded timed 的实
另外，即使对状态（1）中的线程调用 interrupt，也没办法抛出InteruptedException
来思考下面两种线程的状态（关丁线程的状态移转过程请参考图11-22）。
于是，首先我们以“警戒条件”来表示对象的合适状态。并在目的操作前，测
这·章我们学习了Balking Pattem。
（2）执行wait而进入等待区的状态
无法使状态（1）中i的线程 timeout。这是因为无论是synchronized方法或
（1）在 synchronized 处想要获取锁定，但被阻挡住的状态
这两种状态，线程都是暂时停位的，可是也有所不同。
（2）执行wait 而进入等待区的状念。
（1）synchronized 处想要获取锁定，但被阳挡住的状态。
TimeoutException: now - start = 10c05, timeout = s0000
execute BEGIN
at Main.mair(Main.java:6)
at Host..execute(Host.java:22)
图4-5执行范例
Balking-
←约10秒后显示
十马上显示
一不需要的话，就算了吧
4营
---
## Page 146
请尝试改写Guarded Suspension Pattern（第3章）的范例程序中出现的
范例程序的操作中，changed 字段什么时候会是 true呢？
[请看范例程序的执行范例（图4-1），因为调用 doSave 方法的时候，content 字
网下列语句中，止确的请回答○，
130
区间里。
退出，或是使用 throw 抛出异常。警成条件的测试，要使用 synchronized 放进临界
件不成立时，就会直接从方法里退出。
试现在使用满足警戒条件。只有在警戒条件满足时，才会进行目的操作：而警戒条
练习问题
Java 语言中，使用if语句来测试警戒条件。balk 的时候，可以使用 reurm 方法
满足警戒条件时，请让它抛出LivenessException（List 4-9）。
RequestQueue类（List 4-10），让它可以检查死锁的发生。当经过30秒还没有
问题4-4（使用timeout检查死锁）
图（图4-2）中，标示出 changed字段为 true 的范围。
问题4-3（范例程序操作的认知2）
段的值都没有重复，由此可以得知没有多余的文件写入操作。可是由执行结果
问题4-2（范例程序操作的认知1）
问题4-1（基础知识的确认）
解答请见附录A
那么，就进入练习问题吧：
这就是 Balking Patterm。
（2）请故意删除 save 方法的 synchronized，测试是否会出现多余的文件操作。
（1）请在程序加上调试输出，使balk 的操作可以明显得知。
光法清楚的看到balk的操作（不调用doSave 而retum退山的样子），
（5）doSave方法不会同时被两个线程所调用。
（4）doSave 方法不是 synchronized 方法。但是，由于doSave 方法只能从
（3）change 方法的话，
（1）只有 SaveThrcad 能调用出 save方法。
synchronized方法来调用，因此来到doSave方法的线程定有this的lock。
为了使多余的文件操作更容易发生，加入 sleep也无妨。
同的操作。
-定要先指定到 content 字段，再将 changed 设为 truee
，不正确的请同答×。
请在范例程序的程序
---
## Page 147
补充说明：RuntimeException与Exception 使用上的区别
常是程序员的失误，
java.lang,Exception子类的异常来表现。而解决异常状态的程序代码则写在 catch
是因为缺乏生命性的状态，是在执行中发现，且是无法恢复的状态。
但异常状态无法解决时，就会声明成 java.lang.RuntimeException 的子类。通
块里：
若是进行某些处理，而发生可以修复的异常状态，我们会使用
List 4-9 中，LivenessException 声明成 java.lang.RuntimeException 的子类。这
public class RequesrQueue l
import java.util.LinkedList;
public class LivenessException extends RuntimeException ↑
关于异常的设计，参见附录E[Bloch]的第40项。
注意：严格来说这不是为了检查出死锁。只不过以长时间无法达到警戒条件，
List 4-10
List 4-9
1 (isanbal isanbeulisanbauznd proa pazruoxuouas otiqnd 
public synchronized Request getRequest() [
 private final LinkedList queue = new LinkedList();
断定程序缺乏生命性而巴。
notifyAll();
queue.addlast(request);
while (queue.size() <= 0) ↑
(bsu) iadns
return (Request)queue.removeFirst();
try { 
第 3 章的 RequestQueue 类(RequestQueue.java)
LivenessException 类(LivenessException.java)
（ uxau) 
wait{);
Balking—
一不需要的话，就算了吧
弹4章
---
## Page 148
JENA多线精设研模式
3