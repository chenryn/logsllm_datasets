ser.no: 3
privileges:
privileges:
P2, P4 
P2, P4 
del. tree:
del. tree:
[A, 1; B, 2]
[A, 1; B, 2]
holder: UA
holder: UA
issuer: D
issuer: D
ser.no: 4
ser.no: 4
privileges:
privileges:
P4
P4
del. tree:
del. tree:
[C, 3; 
[C, 3; 
[A, 1; B,2] ]
[A, 1; B,2] ]
Figure 4: Certificates and delegation trees in PAMINA 
holder: UA
holder: UA
issuer: B
issuer: B
ser.no: 6
ser.no: 6
privileges:
privileges:
P5 
P5 
del. tree: 
del. tree: 
[]
[]
sends the policy certificate to the verifier and contin-
ues the process. If there is no policy certificate stored 
in  PMAV’s  I-CVT  the  P-DB  sends  the  certification 
path for the leaf that would contain the certificate and 
disconnects  from  V.  If  the  verifier  does  not  receive 
this non-existence proof it can assume that the P-DB 
was compromised. 
In its later requests to the P-DB V sends the identifier 
(ID) of the user in question or if possible an authenti-
cated (e.g., signed) request of the client. 
4. 
5.  The  P-DB  searches  for  all  certificates  issued  for  the 
user by those PMAs listed in the policy certificate of 
V and returns for each a delegation tree consisting of 
certificate  statements  incl.  certification  paths,  where 
recursively,  
issueri = holdersi+1 , for each level i in the tree 
and  where  holder0  =  ID  and  for  some  ACs  issuer  = 
PMAV. 
The P-DB includes also referenced role certificates. 
If a certificate was not found the P-DB gives the certi-
fication path to the leaf that would contain that AC if 
it  were  in the particular I-CVT. This path proves for 
the verifier that the AC does not exist. 
6.  The  P-DB  sends  the  ACs  to  V  over  the  encrypted 
channel. It also sends certification paths from each I-
CVT of PMAs listed in the verifier’s policy certificate 
proving  that  the  user  with  ID  has  no  ACs  issued  by 
other PMAs.  
5.4 Specification of a verifier using PAMINA 
Verifiers as specified in this section can typically be in-
tegrated into an application server or an application gate-
way. The main responsibility of a verifier is to decide if an 
authenticated user either has access to a particular resource 
or  not.  It  is in the responsibility of the application to de-
5.3 Concept of the Privilege Database 
As  mentioned  earlier  the  Privilege  Database  (P-DB) 
stores  all  I-CVTs,  which  are  periodically  updated  by  the 
PMAs.  The  main  benefit  of  this  solution  is  that  verifiers 
checking delegation trees do not have to connect to differ-
ent  databases  in  order  to  download  certificates  issued  by 
different  PMAs.  Furthermore,  PMAs  need  not  to  imple-
ment services providing verifiers; they just have to main-
tain their own I-CVTs. 
PMAs that want to use the database must be registered 
before  by  the  P-DB.  Registered  PMAs  may  send  their 
updated I-CVTs periodically over an encrypted channel to 
the P-DB. The P-DB does not maintain older versions of I-
CVTs.  This  task  remains  in  the  responsibility  of  the 
PMAs.  PMAs  can  either  send  complete  updated  I-CVTs, 
or only the changes (e.g., new signed root) since the last I-
CVT update.  
As described above, the P-DB provides verifiers basically 
only  with  those  certificate  statements  and  corresponding 
certification paths that are needed for a given access con-
trol  decision.  This  makes  the  P-DB  more  trustworthy  for 
PMAs. An informal description of the protocol for obtain-
ing ACs is given here: 
1.  Verifier  V,  which  is  not  necessarily  known  to  the  P-
DB,  establishes  a  mutual  authenticated  connection 
with the P-DB. During the authentication process they 
agree on the use of a shared key, which will be used to 
encrypt the whole communication. At the moment we 
use SSL and the services of the external PKI for this 
purpose. 
2.  After  that,  V  sends  the  name  of  its  owner  PMA 
3. 
(PMAV) to the P-DB. 
If  there  is  an  I-CVT  signed  by  PMAV  and  a  valid 
policy  certificate  issued  for  V  by  PMAV  the  P-DB 
termine  the  identity  of the user (ID) and to correctly for-
mulate a request. 
The main tasks that the verifier has to implement are:  
•  Establishing  a  secure  authenticated  connection  to  the 
Privilege Database. 
•  Requesting  the  relevant  certificate(s)  from  the  P-DB. 
The  P-DB  delivers  all  relevant  ACs  of  the  user  with 
the attached roles and delegation trees. 
•  Verification of each certificate.  
•  Evaluating the delegation trees and roles to determine 
the set of privileges the user holds. 
•  Deciding if the approved privileges are sufficient.  
Input:   Certificate  identifier  ID  and  certification  path  as 
specified in section 4: 
Certification  path  cp  =  (l0,  l1,  ...  ,  ln-1)  +  root  signature, 
where li = ( (ki0, ki1, ... kit), (hi0, hi1, ... hi(t-1)) 
Output:  Validity  of  the  certification  path  for  this  certifi-
cate 
i ← 0 
k ← (ki0, ki1, ... kit) 
h ← (hi0, hi1, ... hit) 
min_id = min(minj(kij),id) 
max_id = max(maxj(kij),id) 
d ← hash(k||h) 
i ← i + 1 
while i 0 and min_id ≤ ki (pos-1)) 
   or (pos ki pos) 
insert d in h at position pos 
d ← hash(k||h) 
i ← i + 1 
min_id = min(minj(kij),min_id) 
max_id = max(maxj(kij),max_id) 
output "Invalid certification path." 
output "Certificate ID is in I-CVT." 
if (ki0, ki1, ... kit) contains ID 
else 
output “Certificate ID is NOT in I-CVT” 
Figure 5: Algorithm for validating a cert. path 
Every  single  AC  is  verified  using  the  algorithm  above 
(see  Fig.  5).  If  an  AC  references a role definition certifi-
cate, the verifier must process the AC defining the speci-
fied role. The privileges assigned to the role are implicitly 
assigned to the user and are therefore included among his 
privileges. If the privileges are delegated to the user by an 
intermediary  PMA,  the  verifier  must  ensure  that  all  ACs 
that  belong  to  the  delegation  tree  are  valid.  Furthermore, 
the verifier must check whether the delegation trees follow 
the  rules  defined  in  section  5.2.  The  verifier  must  check 
for  example  if  each  PMA  that  issued  a  certificate  in  the 
delegation tree was authorized to do so and that no PMA 
delegation  privilege  is  greater  than  the  privilege  held  by 
that PMA.  
The policies that the verifier follows during these proc-
esses are assigned with the policy certificate. The verifier 
must also check the certificate validity periods. Finally, the 
verifier  checks  if  the  union  of  all  user privileges is suffi-
cient for the context of use. 
5.5 Prototypical implementation details 
The first prototype of PAMINA is implemented in Java. 
Java enables to run the system on different platforms, but 
many  components,  such  as  the  P-DB,  would  need  much 
better  performance.  The  PKI  we  use  for  the  management 
of  PKCs  and  for  the  verification  of  signatures  is  the  En-
trust/PKI  v.  4.0  Developer  Edition.  The  services  of  this 
PKI are integrated into the system with the use of proprie-
tary developer toolkits. In PAMINA each AC is stored as 
an  XML  document.  We  decided  to  use  XML  due  to  its 
benefits: 
•  Platform independent standard, 
•  Many  tools  for  converting  and  processing  XML 
documents are available, 
•  Human  readable  data  representation,  XML  files  can 
be viewed with any text editor. 
We have also implemented an administration framework 
which  provides  daily  management  tasks.  This  framework 
contains  tools  that  support  I-CVT related operations, like 
creation, signing and updating of the tree and the parsing, 
modification or deletion (revocation) of single ACs. 
Conclusions and future work 
In  this  paper  we  introduced  PAMINA,  a  system  which 
manages  authorization  certificates  in  distributed  environ-
ments.  The  system  utilizes  the  high  performance  and  en-
hanced  security  of  I-CVT,  an  improvement  of  a  novel 
certificate management scheme, that has been proposed in 
[1]. PAMINA can handle multiple I-CVTs each managed 
by  a  so-called  Privilege  Management  Authority  (PMA). 
Since  the  system  implements  the  pull  model,  it  can  be 
integrated  in  back-end  architectures  in  which  (remote) 
clients need not to be involved in the access control deci-
sion process.  
An  important  feature  of  PAMINA  is  the  support  of 
privilege  delegation.  Verifiers  become  more  complex  in 
delegation  networks,  and  a  large  amount  of  information 
about  the  user’s  relevant  privileges  has  to  be  collected 
from  a  lot  of  different  PMAs.  This  could  lead  to  large 
communication  costs  and  has  motivated  the  development 
of  a  central  database  which  stores  all  I-CVTs  issued  by 
different PMAs. The database provides only authenticated 
verifiers  with  those  certificates  that  they  need  to  check  a 
user’s  privileges.  In  our  flexible  model  a  PMA  can  dele-
gate  privileges  within  one  certificate  that  were  assigned 
before  by  several  certificates.  Therefore,  a  certificate  be-
longs  to  a  delegation  tree  instead  of  a  simple  delegation 
chain.  Storing  complete  delegation  trees  in  certificates  is 
helpful  to  implement  confidential  access  to certificates in 
an efficient manner. 
Due to the fact that I-CVTs provide proofs for the non-
existence  of  certificates,  verifiers  can  always be sure that 
they get all existing certificates with relevant privileges of 
a  given  user.  However,  the  database  storing  multiple  I-
CVTs  would  be  able  to  hide  complete  I-CVTs  storing 
relevant certificates from the verifier. In order to solve this 
problem,  all  PMAs  that  delegate  privileges  inform  the 
PMA(s)  that  own  the  resource  in  question  about  this  act. 
References 
[1] 
This way PMAs can configure their verifiers with the use 
of so-called policy certificates to demand all certificates of 
a specific user from a limited set of I-CVTs.  
Our  results  show  that  due  to  the  properties  of  I-CVTs, 
this  scheme  is  qualified  for  privilege  management.  The 
first prototype of PAMINA states that the integration of I-
CVTs in an operational architecture is possible despite the 
special requirements that have not originally been consid-
ered when this scheme was constructed. 
At the moment PAMINA uses the services of an exter-
nal PKI since digital signatures are needed for the protec-
tion  of  integrity  and  authenticity  of  I-CVTs.  In  the  next 
future  approach,  we  will  extend  the  system  and  add  key 
management  functionality.  Furthermore,  we  plan  to  im-
plement a version of PAMINA which can manage authori-
zation information based on SDSI/SPKI.  
Acknowledgments 
This  research  work  was  supported  by  the  German  Re-
search  Foundation  (Deutsche  Forschungsgemeinschaft, 
DFG).  The  authors  would  like  to  thank  to  Günther  Au-
gustin  and  David  Garces  for  numerous  discussions  and 
useful comments that helped to improve PAMINA. 
I. Gassko, P. S. Gemmell and P. MacKenzie: Efficient and Fresh Certification, Proceedings of the Conference Public Key Cryp-
tography 2000, v. 1751 of LNCS, pp. 342–353, Springer, 2000 
J. Linn and M. Nyström: Attribute Certification: An Enabling Technology for Delegation and Role-Based Controls in Distributed 
Environments, Proc. of the 4th ACM Workshop on RBAC, pp. 121-130, Fairfax, USA, 1999  
[3]  R. Housley, W. Ford, W. Polk, D. Solo: Internet X.509 Public Key Infrastructure Certificate and CRL Profile, IETF Request for 
Comments 2459, January 1999 
ITU-T Recommendation X.509: Information Technology – Open Systems Interconnection – The directory: Public-Key and At-
tribute Certificate Frameworks, February 2001 
P. C. Kocher: On Certificate Revocation and Validation, Proceedings of the 2nd International Conference Financial Cryptography, 
1465 of LNCS, pp. 172-177, Springer, 1998 
[2] 
[4] 
[5] 
[6]  R. C. Merkle, A Certified Digital Signature, Advances in Cryptology: CRYPTO '89, 0435 of LNCS, pp. 218-238, Springer, 1989 
[7]  M. Naor, K. Nissim: Certificate Revocation and Certificate Update, Proceedings of the 7th USENIX Security Symposium, pp. 217-
228, San Antonio, USA, 1998 
[8]  M. Myers, R. Ankney, A. Malpani, S. Galperin and C. Adams: X.509 Internet Public Key Infrastructure On-line Certificate Status 
Protocol – OCSP, IETF Request for Comments 2560, June 1999 
S. Micali: Efficient Certificate Revocation, Technical Report, Massachusetts Institute of Technology, 1996 
I. Nestlerode: Implementing EFECT, Master Thesis, Massachusetts Institute of Technology, 2000 
[9] 
[10] 
[11]  A. Buldas, P. Laud, H. Lipmaa: Accountable Certificate Management using Undeniable Attestations, Proceedings of the 7th ACM 
Conference on Computer and Communication Security, pp. 9-17, Athens, Greece, November 2000  
[12]  D. E. Knuth: The Art Of Computer Programming, Volume 3, Sorting and Searching, Second Edition. Addison-Wesley, 1998 
[13]  D. Comer: The Ubiquitous B-Tree, Computing Surveys, Vol. 11., No 2., pp. 121-137, ACM, June 1979 
[14]  S. Osborn, R. and Q. Munawer: Configuring Role-Based Access Control to Enforce Mandatory and Discretionary Access Control 
Policies, ACM Transactions on Information and System Security, Vol. 3, No. 2, pp. 85–106, May 2000