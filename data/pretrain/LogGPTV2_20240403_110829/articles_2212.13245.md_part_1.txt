**Manuscript No. (to be inserted by the editor)**
**Studying the Characteristics of AIOps Projects on GitHub**

**Roozbeh Aghili · Heng Li · Foutse Khomh**

**Received: [date] / Accepted: [date]**

### Abstract
Artificial Intelligence for IT Operations (AIOps) leverages AI approaches to manage the vast amounts of data generated during the operation of software systems. Previous research has proposed various AIOps solutions to support different tasks in system operations and maintenance, such as anomaly detection. In this study, we conduct an in-depth analysis of open-source AIOps projects on GitHub to understand their characteristics in practice. We first carefully identify a set of AIOps projects and analyze their repository metrics (e.g., programming languages used). Next, we qualitatively examine these projects to understand their input data, analysis techniques, and goals. Finally, we evaluate the quality of these projects using various metrics, such as the number of bugs. We also compare our identified AIOps projects with two baseline sets: a random sample of machine learning projects and a random sample of general-purpose projects. Our results indicate a recent and growing interest in AIOps solutions. However, quality metrics suggest that AIOps projects face more issues compared to the baseline projects. We highlight the most common issues in AIOps approaches and discuss potential solutions. Our findings provide valuable insights for practitioners and researchers into the current state of AIOps practices and suggest ways to improve its weaker aspects. To the best of our knowledge, this is the first work to characterize open-source AIOps projects.

**Keywords:** AIOps, data mining, repository mining, qualitative analysis, temporal trends, source code analysis

**Authors:**
- **Roozbeh Aghili, Heng Li, Foutse Khomh**
- **Department of Computer Engineering and Software Engineering, Polytechnique Montréal, Montréal, QC, Canada**
- **E-mail:** {roozbeh.aghili, heng.li, foutse.khomh}@polymtl.ca

### 1. Introduction
The prevalence of large-scale systems has led to an increase in generated data, making the monitoring and transformation of this data into practical insights a complex challenge. Artificial Intelligence for IT Operations (AIOps) has been introduced to address this challenge. AIOps combines big data, machine learning (ML), and other advanced analysis techniques (e.g., statistical analysis) to analyze system performance patterns, thereby improving service quality and reducing operational costs (Dang et al., 2019; Prasad and Rich, 2018). By utilizing AIOps, organizations can collect and combine different sources of system data to perform various tasks, such as anomaly detection or failure prediction, in their DevOps or operations environment (Dang et al., 2019; Prasad and Rich, 2018).

Significant research has been conducted on AIOps, proposing solutions for various maintenance and operations tasks, including predicting node failures (Li et al., 2020; Lin et al., 2018), task or job failures (El-Sayed et al., 2017; Gao et al., 2020; Rosà et al., 2015), anomaly detection (He et al., 2018; Lim et al., 2014), and self-healing (Ding et al., 2012, 2014). However, no systematic study has been conducted on AIOps practices in real-world projects, such as those available on GitHub.

Studying AIOps practices in real-world projects is important for several reasons:
1. It helps researchers and practitioners understand the current status of AIOps solutions and the characteristics of AIOps projects.
2. It provides guidance for adopting the best-performing AIOps solutions for specific application scenarios.
3. It identifies problems in AIOps practices and highlights future research opportunities.

In this work, we identify and study a set of AIOps projects publicly available on GitHub. We analyze these projects from multiple perspectives, including repository characteristics, goals, and code quality, and perform both quantitative and qualitative analyses to gain a comprehensive understanding of AIOps practices in real-world projects. We also compare the selected AIOps projects with two baselines: traditional ML projects and general-purpose projects. Specifically, we aim to answer the following three research questions (RQs):

**RQ1:** What are the characteristics of AIOps projects in terms of their GitHub metrics?
- We analyze the GitHub metrics of AIOps and baseline projects to understand the current status of AIOps projects and compare them with baselines in terms of metrics such as programming languages and the number of stars. Our observations show that AIOps solutions are being developed at a faster growth rate compared to the baselines. AIOps projects also have higher popularity metrics (e.g., number of stars and forks) and more pull requests and issues than the baselines.

**RQ2:** What are the characteristics of AIOps projects in terms of their input data, analysis techniques, and goals?
- To understand the characteristics of AIOps projects (i.e., their input data, analysis techniques, and goals), we manually investigate each project. We find that monitoring data (e.g., logs and performance metrics) is the most commonly used input data, classical machine-learning techniques are the most adopted analysis techniques, and anomaly detection is the primary goal of many AIOps projects.

**RQ3:** What is the code quality of AIOps projects?
- We further analyze the source code of AIOps and baseline projects to identify any interesting patterns related to their quality. Our findings indicate that AIOps projects have a higher issue rate, particularly in terms of bugs, code smells, and technical debt, compared to the baselines.

We share our replication package on GitHub<sup>1</sup> to enable future work to reproduce or extend our study. Our work makes several important contributions:
1. As the first study on AIOps practices in real-world projects, it helps practitioners and researchers understand the status of AIOps from a practical perspective.
2. Our qualitative analysis of the input data, analysis techniques, and goals of AIOps projects can help practitioners and researchers consider and adopt AIOps solutions that fit their specific application scenarios.
3. Our work identifies problems in AIOps practices (e.g., code quality) and highlights future research opportunities in AIOps.

The rest of the paper is organized as follows: Section 2 describes the experiment setup, including the collection and preparation of AIOps project data. Section 3 presents our approach and results for answering the research questions. Section 4 provides further discussions of our results. Section 5 discusses the threats to the validity of our findings. Section 6 summarizes prior research related to our work, and finally, Section 7 concludes the paper.

### 2. Experiment Setup
This section describes our approach for collecting the AIOps and baseline projects. We first present an overview of our study, then detail the steps for collecting and verifying AIOps and baseline projects.

#### 2.1 Overview of Our Study
Figure 1 presents an overview of our approach for studying the characteristics of AIOps projects. We select our projects from GitHub, the largest code hosting site with over 330 million repositories. We start by searching for projects with the keyword "AIOps." Through manual verification, keyword expansion, second-round search, and threshold-based filtering, we collect a total of 97 AIOps projects to answer our research questions. To better understand the characteristics of AIOps projects in a broader context, we compare our identified AIOps projects with two baselines:
1. Randomly sampled machine learning (ML) projects.
2. Randomly sampled general-purpose projects.

We choose the ML baseline because most AIOps projects leverage ML techniques. We choose the General baseline to compare our AIOps projects with general software applications on GitHub. Finally, we perform qualitative and quantitative analyses on the collected data to answer our research questions. Below, we describe the details of our data collection. The detailed approaches for answering our research questions are presented in Section 3.

#### 2.2 Collecting AIOps Projects
Through two rounds of searching AIOps-related keywords on GitHub, we collect a total of 888 candidate projects. After filtering and manual verification, we end up with 97 projects as our final set of AIOps projects. The methodology we use to select these projects follows a systematic approach recommended by (Basilietal., 1986) and is described in the following sections.

##### 2.2.1 Search AIOps Projects (First Round)
In the first step of finding a good set of projects, we search for repositories that specifically indicate themselves as AIOps projects. For this purpose, we use the GitHub interface and look for projects that match the keyword "AIOps." Our search looks at four sections of a repository: the repository name, the "about" section, the "topics" section, and the "readme" file. After searching for the keyword "AIOps," we find 505 repositories.

##### 2.2.2 Manual Verification (First Round)
Based on existing definitions of AIOps (Dang et al., 2019; Prasad and Rich, 2018), we consider AIOps projects as any project that uses IT Operations-related data, utilizes advanced analysis technologies such as machine learning or statistical analysis, and aims to reach valuable insights or enhance the system's quality through actions like monitoring and automation.

Not all of the 505 discovered repositories are suitable AIOps candidates. We select our subject projects based on three criteria:
1. The project should be about AIOps, not similar topics such as Machine Learning Operations (MLOps)<sup>2</sup> or Development and Operations (DevOps)<sup>3</sup>. Therefore, we exclude projects that are primarily about other topics.
2. The projects should contain sufficient code and be mature. We exclude repositories that do not have code and are collections of papers, slides, or other repositories. However, we accept projects that have created a dataset for use by other developers and researchers.
3. The project should not be a toy project: we exclude homework assignments or university projects.

To select the desirable projects based on the explained criteria, the first two authors of the paper (i.e., coders) jointly perform a coding process, adding a YES (AIOps projects) or NO (non-AIOps projects) tag to each project. The coding process is as follows:

- **Step 1: Coding.** Each coder analyzes all 505 repositories and independently decides if each project should be added to the final list of projects.
- **Step 2: Discussion.** The coders share their responses and discuss their approaches for selecting a project. The goal of the discussion session is to reach a common understanding of the inclusion criteria among the coders.
- **Step 3: Revision.** Based on the discussion, each coder revises their responses from Step 1.
- **Step 4: Resolving Disagreements.** In the last step, the coders discuss any remaining conflicts and try to resolve them. If an agreement cannot be reached, the third author analyzes the project, and a vote is performed.

After performing the manual verification process, we obtain a total of 84 candidate AIOps projects from the 505 projects derived from the search results, corresponding to a selection rate of 17%.

<sup>2</sup>A set of practices to maintain and deploy machine learning models.
<sup>3</sup>A set of practices that aim to shorten the system development lifecycle while preserving high quality.

##### 2.2.3 Keyword Extraction (Pattern Mining)
To have a comprehensive view of real-world AIOps projects, limiting our search to one keyword (i.e., "AIOps") is insufficient. This is mainly because the term "AIOps" was introduced in 2018 (Prasad and Rich, 2018), and some projects might exist before this terminology was introduced but are implementing AIOps solutions without using the exact term. Hence, we expand our keywords to find more projects that do not explicitly indicate themselves as AIOps repositories but actually are.

For this, we first extract all the topics of each of the 84 AIOps projects resulting from the previous step. The topics of each project are available in the "topics" section of each GitHub repository. We then use frequent pattern mining (Han et al., 2007), an analytical process to find associations and patterns in a dataset. Specifically, we utilize the frequent pattern growth method (Han et al., 2000, 2004) to find the most common topics of GitHub repositories. We set the support of the method to 2, meaning that the pattern should appear in at least two projects. In total, we find 194 patterns between the topics. Next, we hold a discussion session among all three authors to decide which patterns might be good candidates for finding more AIOps projects. We select four pairs of two-item patterns: "anomaly detection" and "log analysis," "log analysis" and "machine learning," "anomaly detection" and "machine learning," as well as "machine learning" and "automation."

---

<sup>1</sup>https://github.com/AIOpsstudy/understanding_aiops