{dxsu}>1o nq {xs}d
The Unicode standard stipulates that block names should be case insensitive, and that
any differences in spaces, hyphens, or underscores should be ignored. Most regex fla-
vors are not this flexible, unfortunately. All versions of .NET and Java 4 require the
block names to be capitalized as shown in the preceding list. Perl 5.8 and later and Java
5 and later allow any mixrure of case. Perl, Java, and .NET all support the notation
with hyphens and without spaces used in the preceding list. We recommend you use
this notation. Of the flavors discussed in this book, only XRegExp and Perl 5.12 and
56 | Chapter 2: Basic Regular Expression Skils
---
## Page 73
later are fully flexible with regard to spaces, hyphens, and underscores in Unicode block
names.
Unicode script
Each Unicode code point, excepr unassigned ones, s part of exactly one Unicode script.
Unassigned code points are not part of any script. The assigned code points up to
U+FFFF are assigned to these 72 scripts in version 6.1 of the Unicode standard:
p{Common})
^\p(Lepcha}
\p(Arabic})
\p{Limbu})
p{Armenian])
^\p(Lisu}>
p{Balinese})
p{Malayalam}>
{unueg}d\)
^\p(Mandaic}>
\p(Batak}>
\p{Meetei_Mayek}
\p{Bengal1})
p{Mongolian
\p{Boponofo})
^\p{Myannar}
^p{Brai1le}>
p-{New_Tai_Lue})
p{Buginese}
(p{Nko})
^\p(Buhid})
\p(0riya}>
p{Cherokee})
({eds8eud}d\)
\p(Coptic}
^\p(Rejang})
^\p{Cyri11ic]
^\p(Runic})
\p{Devanagar1})
\p{Samari tan
p{Ethiopic})
^p{Saurashtra]
p{Georgian})
^\p(Sinhala}>
\p(Glagolitic))
p{Sundanese})
\p{Greek}>
^\p(Syloti_Nagri}
^\p(Gujarati1]
p{Syriac})
p{Gurmukh1])
p{Tagalog}>
(\p{Han])
\p(Tagbanna])
^\p(Hangul})
^\p(Tal_Le})
\p{Hanunoo})
p{Ta1_Tham])
\p(Hebrew}
^\p(Tai_viet})
\p{Hiragana})
^\p{Tami1}>
p{Inherited}
\p{Telugu})
p{Javanese})
^\p( Thaana})
p{Kannada}>
\p{Tha1}>
p{Katakana })
\p{Tibetan}>
\p(Kayah_L1}
2.7 Unicoede Gode Points, Gategories, Blocks,and Scripts | 57
---
## Page 74
\p{Latin})
A script is a group of code points used by a particular human writing system. Some
scripts, such as Thal, correspond with a single human language. Other scripts, such as
instance, there is no Japanese Unicode scripr; instead, Unicode offrs the Hiragana,
og siduss adunu jo pasoduoo ane salentuel auog 'sadenue andunu ueds *ugte
Katakana, Han, and Latin scripts that Japanese documents are usually composed of.
We listed the Common script first, out of alphabetical order. This script contains all sors
of characters that are common to a wide range of scriprs, such as puncruation, white-
space, and miscellaneous symbols.
Java requires the name of the script to be prefixed with Is, as in p{ IsYi. Perl allows
the Is prefix, but doesn’t require it. XRegExp, PCRE, and Ruby do not allow the Is
prefix.
The Unicode standard stipulates that script names should be case insensitive, and that
any differences in spaces, hyphens, or underscores should be ignored. Most regex fla-
vors are not this flexible, unforrunately. The notation with the words in the script names
capitalized and with underscores berween the words works with all flavors in this book
that suport Unicode scripts.
Unicode grapheme
The difference berween code points and characters comes into play when there are
combieing marks. The Unicode code point U+0061 is *Latin small letter a," whereas
U+00E0 is “Latin small letter a with grave accent." Both represent what most people
would describe as a character.
U+0300 is the “combining grave accent" combining mark. It can be used sensibly only
after a letter. A string consisting of the Unicode code points U+0061 U+0300 will be
displayed as a, just like U+00E0. The combining mark U+0300 is displayed on top of
the character U+0061.
The reason for these two different ways of displaying an accented letter is that many
historical character sets encode “a with grave accent" as a single character. Unicode’s
designers thought it would be useful to have a one-on-one mapping with popular legacy
character sets, in addition to the Unicode way of separating marks and base letters,
which makes arbitrary combinations not supported by legacy character sets possible.
What matters to you as a regex user is that all regex flavors discussed in this book
operate on code points rather than graphical characters. When we say that the regular
expression \P{M} in all regex flavors that support Uni-
code but not the  matches all the marks, if any, that follow it.
We put these two regex tokens in an atomic group to make sure the  does not march aa, be-
cause there is nothing left for the dot to match after \x{2} has matched the rwo ac
cented letters. \P(M}\p{M}*){2) > does not match aa for the same reason. But  to give up its match, allowing the dot to match \u0300.
JavaScript’s regex engine does not support atomic grouping. This is not a feature that
could be added by XRegExp, because XRegExp still relies on JavaScripr’s regex engine
for the actual pattern matching. So when using XRegExp,  is the
closest we can get to emulating  with  and ^ to Mary, Jane, and Sue went to Mary′s house, the
match Mary is immediately found at the start of the string.
When you apply the same regex to the remainder of the sringe.g, by clicking “Find
ruuoo 1s1y au1e cAxen> qpieu o1 s1dtuae aut3us xaaa alosspa 1xa mox u1 ,1xaN
also fails. Attempting to match Sue atthe comma fails, too.Only then does the regex
in the string. That fails. Then, it attempts to match Jane at the same position, which
engine advance to the next character in the string. Starting at the first space, all three
altermatives fail in the same way.
Starting at the J, the first alternative, Maryo, fails to match. The second altermative,
Jane>, is then attempted starting at the 1. It matches Jane. The regex engine declares
victory.
Notice that Jane was found even though there is another occurrence of Mary in the
subject text, and that Rary appears before Jane in the regex. At least in this case, the
2. The other kind of engine is a text-directad engine. The lkey difference is that a text-directed engine visis
 eo sia r ulua pnpxoias e seum souo suo n oqns  u ee pes
mathematical sense described at the begining of Chapter 1. Th fancy Persryle regularexpressions that
make this book so interesting can be implemented only with a regex-directed engine.
62 | Chapter 2: Basic Regular Expression Skils
---
## Page 79
order of the alternatives in the regular expression does not matter. The regular expres
sion finds the leftmost match. It scans the text from left to right, tries all alternatives in
the regular expression at each step, and stops at the first position in the text where any
of the altermatives produces a valid match.
If we do another search through the remainder of the string, Sue will be found. The
fourth search will find Mary once more. If you tell the regular engine to do a fifth search,
that wil fail, because none o the three altematives match the remaining *s house sring.
The order of the altermatives in the regex matters only when rwo of them can match at
the same position in the string. The regex Jane|Janet has two alternatives that match
at the same position in the text Her nane is Janet. There are no word boundaries in
the regular expression. The fact that  and \bJanet′b bJane^,b> will both match Janet in Her nane
Is Janet. Because of the word boundaries, only one altermative can match. The order