# Anti-RE Techniques in DRM Code
## Introduction
- **About DRMs**: Overview of Digital Rights Management (DRM) and its role in protecting content.
- **Approaching the DRM**: Strategies and methods to understand and analyze DRM-protected code.

## SEH Basics
- **Overview**: Structured Exception Handling (SEH) and its importance in Windows programming.
- **Exception Dispatching**: How exceptions are handled and dispatched in the system.

## Anti-RE Techniques
### Overview
- **Trampolines**
- **Debug Registers**
- **P-Code Machine**

### Trampolines
- **Challenges**:
  - Debugging is difficult due to jitter in trampoline addresses.
  - Control flow depends on debug registers, making breakpoints (BPM/BPX) ineffective.
  - No call stack, making back tracing difficult.
  - Cannot execute until return, making it hard to determine the calling function.
  - Absence of `ret` instructions confuses disassemblers.
- **Solution**:
  - Once understood, a perfect call stack can be reconstructed.

### Debug Registers
- **Usage**:
  - The DRM system uses debug registers (DRs) for storage.
  - It uses the `SetThreadContext` API, preventing the debugger from using hardware breakpoints.
- **Countermeasures**:
  - **API Hooking**:
    - Hook into `SetThreadContext` and `GetThreadContext` APIs.
    - Redirect modifications to internal storage, preventing the DRM system from modifying DRs.
    - This allows the debugger to use DRs for breakpoints.
  - **Context Emulation**:
    - Problem: Modification of EIP depends on DRs, leading to two thread contexts (kernel mode vs. internal storage).
    - Solution: Hook `KiUserExceptionDispatcher` and pass a fake context with DR values from internal storage. On return, copy modifications to the real context and apply it via `NtContinue`.

### P-Code Machine
- **Overview**:
  - Stack-based machine with a result register.
  - 256 fixed-size opcodes (1 byte).
  - Opcodes interleaved with data (ASN.1).
  - Memory allocation in the host machine.
  - High-level and low-level opcodes, emulating a virtual CPU.
- **Loading of Opcodes**:
  - Special module containing P-Code machine.
  - Native code + opcodes decompressed at runtime.
  - No PE, IAT, or sections; relocation table and some fixed imports (MSVCRT).
- **Obfuscation**:
  - Per-module random pool to randomize opcode-to-handler mapping.
  - Descramble opcodes with a PRNG in the machine.
  - Garbage data interleaved with opcodes, parsed via ASN.1.
- **Impact**:
  - **Static RE Difficulty**:
    - Understanding the machine itself is necessary.
    - Different meaning of opcodes per module.
    - ASN.1 parsing adds complexity.
  - **Debugging Difficulty**:
    - Low signal-to-noise ratio due to a large "handler loop".
    - Opcode descrambling further complicates debugging.

### Strategies to Find Decryption Algorithm and Key Setup
1. **Write Custom Disassembler (Expensive Strategy)**:
   - Many handlers, long and complex high-level handlers.
   - Re-assemble randomization, descrambling, garbage instructions, and ASN.1.
2. **Trace Until Key Written to Memory (Brute Force Strategy)**:
   - Single-step via debugger script.
   - Slow but reaches the code writing the key.
3. **Use Emulation (Cool Strategy)**:
   - Use CPU emulation (e.g., PyEmu, x86 Emu for IDA).
   - Fast and very flexible.
4. **Use BPMs / Attack Machine Memory (Lazy Strategy)**:
   - Exploit machine memory management.
   - Set breakpoints and hardware breakpoints to trace key setup.
   - Back-trace from there.

### Keen Disappointment
- Decryption and key setup are in native code, not in the P-Code machine.

## Decrypting the Content
### The Algorithm
- **Key Derivation**:
  - Hash some files using different hash algorithms.
  - Generate a different key for every music file.
- **Decryption**:
  - Use DES-CBC (Cipher Block Chaining) with an IV from the DRM file.

### Demo
- Demonstration of the decryption process.

## Conclusion
- **Summary**:
  - Overall, the protection is good.
  - BPMs led to success, while the P-Code machine was almost useless.
  - Implementation weaknesses were identified.
- **Room for Improvements**:
  - Transform more native code to P-Code.
  - Make the P-Code machine more complex (nesting, more obfuscation).
  - Improve weak debugger detection.
  - Use DRs and let control flow depend on BPM/BPX.

## Thanks for Your Attention!
- Questions?

**Jan Newger**