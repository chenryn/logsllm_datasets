The second form defines an argument without a default value:
DEFINE_PROGRAM_ARGUMENT(
program_name IN VARCHAR2,
argument_position IN PLS_INTEGER,
argument_name IN VARCHAR2 DEFAULT NULL,
argument_type IN VARCHAR2,
out_argument IN BOOLEAN DEFAULT FALSE)
Parameters
program_name
program_name is the name of the program to which the arguments belong.
argument_position
argument_position specifies the position of the argument as it is passed to the
program.
argument_name
argument_name specifies the optional name of the argument. By default,
argument_name is NULL.
argument_type IN VARCHAR2
argument_type specifies the data type of the argument.
default_value
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 194
Database Compatibility for Oracle® Developers
Built-in Package Guide
default_value specifies the default value assigned to the argument.
default_value will be overridden by a value specified by the job when the job
executes.
out_argument IN BOOLEAN DEFAULT FALSE
out_argument is not currently used; if specified, the value must be FALSE.
Example
The following code fragment uses the DEFINE_PROGRAM_ARGUMENT procedure to
define the first and second arguments in a program named add_emp:
EXEC
DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
program_name => 'add_emp',
argument_position => 1,
argument_name => 'dept_no',
argument_type => 'INTEGER,
default_value => '20');
EXEC
DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
program_name => 'add_emp',
argument_position => 2,
argument_name => 'emp_name',
argument_type => 'VARCHAR2');
The first argument is an INTEGER value named dept_no that has a default value of 20.
The second argument is a VARCHAR2 value named emp_name; the second argument does
not have a default value.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 195
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.6 DISABLE
Use the DISABLE procedure to disable a program or a job. The signature of the DISABLE
procedure is:
DISABLE(
name IN VARCHAR2,
force IN BOOLEAN DEFAULT FALSE,
commit_semantics IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR')
Parameters
name
name specifies the name of the program or job that is being disabled.
force
force is accepted for compatibility, and ignored.
commit_semantics
commit_semantics instructs the server how to handle an error encountered
while disabling a program or job. By default, commit_semantics is set to
STOP_ON_FIRST_ERROR, instructing the server to stop when it encounters an
error. Any programs or jobs that were successfully disabled prior to the error will
be committed to disk.
The TRANSACTIONAL and ABSORB_ERRORS keywords are accepted for
compatibility, and ignored.
Example
The following call to the DISABLE procedure disables a program named update_emp:
DBMS_SCHEDULER.DISABLE('update_emp');
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 196
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.7 DROP_JOB
Use the DROP_JOB procedure to DROP a job, DROP any arguments that belong to the job,
and eliminate any future job executions. The signature of the procedure is:
DROP_JOB(
job_name IN VARCHAR2,
force IN BOOLEAN DEFAULT FALSE,
defer IN BOOLEAN DEFAULT FALSE,
commit_semantics IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR')
Parameters
job_name
job_name specifies the name of the job that is being dropped.
force
force is accepted for compatibility, and ignored.
defer
defer is accepted for compatibility, and ignored.
commit_semantics
commit_semantics instructs the server how to handle an error encountered
while dropping a program or job. By default, commit_semantics is set to
STOP_ON_FIRST_ERROR, instructing the server to stop when it encounters an
error.
The TRANSACTIONAL and ABSORB_ERRORS keywords are accepted for
compatibility, and ignored.
Example
The following call to DROP_JOB drops a job named update_log:
DBMS_SCHEDULER.DROP_JOB('update_log');
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 197
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.8 DROP_PROGRAM
The DROP_PROGRAM procedure
The signature of the DROP_PROGRAM procedure is:
DROP_PROGRAM(
program_name IN VARCHAR2,
force IN BOOLEAN DEFAULT FALSE)
Parameters
program_name
program_name specifies the name of the program that is being dropped.
force
force is a BOOLEAN value that instructs the server how to handle programs with
dependent jobs.
Specify FALSE to instruct the server to return an error if the program is
referenced by a job.
Specify TRUE to instruct the server to disable any jobs that reference the
program before dropping the program.
The default value is FALSE.
Example
The following call to DROP_PROGRAM drops a job named update_emp:
DBMS_SCHEDULER.DROP_PROGRAM('update_emp');
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 198
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.9 DROP_PROGRAM_ARGUMENT
Use the DROP_PROGRAM_ARGUMENT procedure to drop a program argument. The
DROP_PROGRAM_ARGUMENT procedure comes in two forms; the first form uses an
argument position to specify which argument to drop:
DROP_PROGRAM_ARGUMENT(
program_name IN VARCHAR2,
argument_position IN PLS_INTEGER)
The second form takes the argument name:
DROP_PROGRAM_ARGUMENT(
program_name IN VARCHAR2,
argument_name IN VARCHAR2)
Parameters
program_name
program_name specifies the name of the program that is being modified.
argument_position
argument_position specifies the position of the argument that is being
dropped.
argument_name
argument_name specifies the name of the argument that is being dropped.
Examples
The following call to DROP_PROGRAM_ARGUMENT drops the first argument in the
update_emp program:
DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT('update_emp', 1);
The following call to DROP_PROGRAM_ARGUMENT drops an argument named emp_name:
DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT(update_emp', 'emp_name');
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 199
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.10 DROP_SCHEDULE
Use the DROP_SCHEDULE procedure to drop a schedule. The signature is:
DROP_SCHEDULE(
schedule_name IN VARCHAR2,
force IN BOOLEAN DEFAULT FALSE)
Parameters
schedule_name
schedule_name specifies the name of the schedule that is being dropped.
force
force specifies the behavior of the server if the specified schedule is referenced
by any job:
 Specify FALSE to instruct the server to return an error if the specified
schedule is referenced by a job. This is the default behavior.
 Specify TRUE to instruct the server to disable to any jobs that use the
specified schedule before dropping the schedule. Any running jobs will be
allowed to complete before the schedule is dropped.
Example
The following call to DROP_SCHEDULE drops a schedule named weeknights_at_5:
DBMS_SCHEDULER.DROP_SCHEDULE('weeknights_at_5', TRUE);
The server will disable any jobs that use the schedule before dropping the schedule.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 200
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.11 ENABLE
Use the ENABLE procedure to enable a disabled program or job.
The signature of the ENABLE procedure is:
ENABLE(
name IN VARCHAR2,
commit_semantics IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR')
Parameters
name
name specifies the name of the program or job that is being enabled.
commit_semantics
commit_semantics instructs the server how to handle an error encountered
while enabling a program or job. By default, commit_semantics is set to
STOP_ON_FIRST_ERROR, instructing the server to stop when it encounters an
error.
The TRANSACTIONAL and ABSORB_ERRORS keywords are accepted for
compatibility, and ignored.
Example
The following call to DBMS_SCHEDULER.ENABLE enables the update_emp program:
DBMS_SCHEDULER.ENABLE('update_emp');
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 201
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.12 EVALUATE_CALENDAR_STRING
Use the EVALUATE_CALENDAR_STRING procedure to evaluate the repeat_interval
value specified when creating a schedule with the CREATE_SCHEDULE procedure. The
EVALUATE_CALENDAR_STRING procedure will return the date and time that a specified
schedule will execute without actually scheduling the job.
The signature of the EVALUATE_CALENDAR_STRING procedure is:
EVALUATE_CALENDAR_STRING(
calendar_string IN VARCHAR2,
start_date IN TIMESTAMP WITH TIME ZONE,
return_date_after IN TIMESTAMP WITH TIME ZONE,
next_run_date OUT TIMESTAMP WITH TIME ZONE)
Parameters
calendar_string
calendar_string is the calendar string that describes a repeat_interval
(see Section 0 that is being evaluated.
start_date IN TIMESTAMP WITH TIME ZONE
start_date is the date and time after which the repeat_interval will
become valid.
return_date_after
Use the return_date_after parameter to specify the date and time that
EVALUATE_CALENDAR_STRING should use as a starting date when evaluating the
repeat_interval.
For example, if you specify a return_date_after value of 01-APR-13
09.00.00.000000, EVALUATE_CALENDAR_STRING will return the date and
time of the first iteration of the schedule after April 1st, 2013.
next_run_date OUT TIMESTAMP WITH TIME ZONE
next_run_date is an OUT parameter that will contain the first occurrence of the
schedule after the date specified by the return_date_after parameter.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 202
Database Compatibility for Oracle® Developers
Built-in Package Guide
Example
The following example evaluates a calendar string and returns the first date and time that
the schedule will be executed after June 15, 2013:
DECLARE
result TIMESTAMP;
BEGIN
DBMS_SCHEDULER.EVALUATE_CALENDAR_STRING
(
'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=17;',
'15-JUN-2013', NULL, result
);
DBMS_OUTPUT.PUT_LINE('next_run_date: ' || result);
END;
/
next_run_date: 17-JUN-13 05.00.00.000000 PM
June 15, 2013 is a Saturday; the schedule will not execute until Monday, June 17, 2013 at
5:00 pm.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 203
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.13 RUN_JOB
Use the RUN_JOB procedure to execute a job immediately. The signature of the
RUN_JOB procedure is:
RUN_JOB(
job_name IN VARCHAR2,
use_current_session IN BOOLEAN DEFAULT TRUE
Parameters
job_name
job_name specifies the name of the job that will execute.
use_current_session
By default, the job will execute in the current session. If specified,
use_current_session must be set to TRUE ; if use_current_session is
set to FALSE, Advanced Server will return an error.
Example
The following call to RUN_JOB executes a job named update_log:
DBMS_SCHEDULER.RUN_JOB('update_log', TRUE);
Passing a value of TRUE as the second argument instructs the server to invoke the job in
the current session.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 204
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.14 SET_JOB_ARGUMENT_VALUE
Use the SET_JOB_ARGUMENT_VALUE procedure to specify a value for an argument. The
SET_JOB_ARGUMENT_VALUE procedure comes in two forms; the first form specifies
which argument should be modified by position:
SET_JOB_ARGUMENT_VALUE(
job_name IN VARCHAR2,
argument_position IN PLS_INTEGER,
argument_value IN VARCHAR2)
The second form uses an argument name to specify which argument to modify:
SET_JOB_ARGUMENT_VALUE(
job_name IN VARCHAR2,
argument_name IN VARCHAR2,
argument_value IN VARCHAR2)
Argument values set by the SET_JOB_ARGUMENT_VALUE procedure override any values
set by default.
Parameters
job_name
job_name specifies the name of the job to which the modified argument belongs.
argument_position
Use argument_position to specify the argument position for which the value
will be set.
argument_name
Use argument_name to specify the argument by name for which the value will
be set.
argument_value
argument_value specifies the new value of the argument.
Examples
The following example assigns a value of 30 to the first argument in the update_emp
job:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 205
Database Compatibility for Oracle® Developers
Built-in Package Guide
DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE('update_emp', 1, '30');
The following example sets the emp_name argument to SMITH:
DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE('update_emp', 'emp_name', 'SMITH');
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 206
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.16 DBMS_SESSION
Advanced Server provides support for the following DBMS_SESSION.SET_ROLE
procedure:
Function/Procedure Return Type Description
SET_ROLE(role_cmd) n/a Executes a SET ROLE statement followed by
the string value specified in role_cmd.
Advanced Server's implementation of DBMS_SESSION is a partial implementation when
compared to Oracle's version. Only DBMS_SESSION.SET_ROLE is supported.
3.16.1 SET_ROLE
The SET_ROLE procedure sets the current session user to the role specified in
role_cmd. After invoking the SET_ROLE procedure, the current session will use the
permissions assigned to the specified role. The signature of the procedure is:
SET_ROLE(role_cmd)
The SET_ROLE procedure appends the value specified for role_cmd to the SET ROLE
statement, and then invokes the statement.
Parameters
role_cmd
role_cmd specifies a role name in the form of a string value.
Example
The following call to the SET_ROLE procedure invokes the SET ROLE command to set
the identity of the current session user to manager:
edb=# exec DBMS_SESSION.SET_ROLE('manager');
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 207
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17 DBMS_SQL
The DBMS_SQL package provides an application interface compatible with Oracle
databases to the EnterpriseDB dynamic SQL functionality. With DBMS_SQL you can
construct queries and other commands at run time (rather than when you write the
application). EnterpriseDB Advanced Server offers native support for dynamic SQL;
DBMS_SQL provides a way to use dynamic SQL in a fashion compatible with Oracle
databases without modifying your application.
DBMS_SQL assumes the privileges of the current user when executing dynamic SQL
statements.
Function/Procedure Function or Return Description
Procedure Type
BIND_VARIABLE(c, name, value [, Procedure n/a Bind a value to a variable.
out_value_size ])
BIND_VARIABLE_CHAR(c, name, value Procedure n/a Bind a CHAR value to a variable.
[, out_value_size ])
BIND_VARIABLE_RAW(c, name, value Procedure n/a Bind a RAW value to a variable.
[, out_value_size ])
CLOSE_CURSOR(c IN OUT) Procedure n/a Close a cursor.
COLUMN_VALUE(c, position, value Procedure n/a Return a column value into a variable.
OUT [, column_error OUT [,
actual_length OUT ]])
COLUMN_VALUE_CHAR(c, position, Procedure n/a Return a CHAR column value into a variable.
value OUT [, column_error OUT [,
actual_length OUT ]])
COLUMN_VALUE_RAW(c, position, Procedure n/a Return a RAW column value into a variable.
value OUT [, column_error OUT [,
actual_length OUT ]])
DEFINE_COLUMN(c, position, column Procedure n/a Define a column in the SELECT list.
[, column_size ])
DEFINE_COLUMN_CHAR(c, position, Procedure n/a Define a CHAR column in the SELECT list.
column, column_size)
DEFINE_COLUMN_RAW(c, position, Procedure n/a Define a RAW column in the SELECT list.
column, column_size)
DESCRIBE_COLUMNS Procedure n/a Defines columns to hold a cursor result set.
EXECUTE(c) Function INTEGER Execute a cursor.
EXECUTE_AND_FETCH(c [, exact ]) Function INTEGER Execute a cursor and fetch a single row.
FETCH_ROWS(c) Function INTEGER Fetch rows from the cursor.
IS_OPEN(c) Function BOOLEAN Check if a cursor is open.
LAST_ROW_COUNT Function INTEGER Return cumulative number of rows fetched.
OPEN_CURSOR Function INTEGER Open a cursor.
PARSE(c, statement, Procedure n/a Parse a statement.
language_flag)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 208
Database Compatibility for Oracle® Developers
Built-in Package Guide
Advanced Server's implementation of DBMS_SQL is a partial implementation when
compared to Oracle's version. Only those functions and procedures listed in the table
above are supported.
The following table lists the public variable available in the DBMS_SQL package.
Public Variables Data Type Value Description
1 Provided for compatibility with Oracle syntax. See
native INTEGER
DBMS_SQL.PARSE for more information.
2 Provided for compatibility with Oracle syntax. See
V6 INTEGER
DBMS_SQL.PARSE for more information.
3 Provided for compatibility with Oracle syntax. See
V7 INTEGER
DBMS_SQL.PARSE for more information
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 209
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.17.1 BIND_VARIABLE
The BIND_VARIABLE procedure provides the capability to associate a value with an IN