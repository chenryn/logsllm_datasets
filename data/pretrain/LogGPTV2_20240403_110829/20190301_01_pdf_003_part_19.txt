### 3.15.2 DEFINE_PROGRAM_ARGUMENT

The `DEFINE_PROGRAM_ARGUMENT` procedure is used to define an argument for a program, and it comes in two forms. The second form defines an argument without a default value.

#### Signature
```sql
DEFINE_PROGRAM_ARGUMENT(
    program_name IN VARCHAR2,
    argument_position IN PLS_INTEGER,
    argument_name IN VARCHAR2 DEFAULT NULL,
    argument_type IN VARCHAR2,
    out_argument IN BOOLEAN DEFAULT FALSE
)
```

#### Parameters
- **program_name**: The name of the program to which the arguments belong.
- **argument_position**: Specifies the position of the argument as it is passed to the program.
- **argument_name**: Specifies the optional name of the argument. By default, `argument_name` is `NULL`.
- **argument_type**: Specifies the data type of the argument.
- **out_argument**: A boolean value indicating whether the argument is an output argument. Currently, this parameter must be set to `FALSE`.

#### Example
The following code fragment uses the `DEFINE_PROGRAM_ARGUMENT` procedure to define the first and second arguments in a program named `add_emp`:

```sql
EXEC DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
    program_name => 'add_emp',
    argument_position => 1,
    argument_name => 'dept_no',
    argument_type => 'INTEGER',
    default_value => '20'
);

EXEC DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
    program_name => 'add_emp',
    argument_position => 2,
    argument_name => 'emp_name',
    argument_type => 'VARCHAR2'
);
```

- The first argument is an `INTEGER` value named `dept_no` with a default value of `20`.
- The second argument is a `VARCHAR2` value named `emp_name` and does not have a default value.

---

### 3.15.6 DISABLE

The `DISABLE` procedure is used to disable a program or a job.

#### Signature
```sql
DISABLE(
    name IN VARCHAR2,
    force IN BOOLEAN DEFAULT FALSE,
    commit_semantics IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR'
)
```

#### Parameters
- **name**: The name of the program or job that is being disabled.
- **force**: A boolean value for compatibility, which is ignored.
- **commit_semantics**: Instructs the server how to handle errors encountered while disabling a program or job. By default, `commit_semantics` is set to `STOP_ON_FIRST_ERROR`, instructing the server to stop when it encounters an error. Any programs or jobs that were successfully disabled prior to the error will be committed to disk.

#### Example
The following call to the `DISABLE` procedure disables a program named `update_emp`:

```sql
DBMS_SCHEDULER.DISABLE('update_emp');
```

---

### 3.15.7 DROP_JOB

The `DROP_JOB` procedure is used to drop a job, any arguments that belong to the job, and eliminate any future job executions.

#### Signature
```sql
DROP_JOB(
    job_name IN VARCHAR2,
    force IN BOOLEAN DEFAULT FALSE,
    defer IN BOOLEAN DEFAULT FALSE,
    commit_semantics IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR'
)
```

#### Parameters
- **job_name**: The name of the job that is being dropped.
- **force**: A boolean value for compatibility, which is ignored.
- **defer**: A boolean value for compatibility, which is ignored.
- **commit_semantics**: Instructs the server how to handle errors encountered while dropping a program or job. By default, `commit_semantics` is set to `STOP_ON_FIRST_ERROR`, instructing the server to stop when it encounters an error.

#### Example
The following call to `DROP_JOB` drops a job named `update_log`:

```sql
DBMS_SCHEDULER.DROP_JOB('update_log');
```

---

### 3.15.8 DROP_PROGRAM

The `DROP_PROGRAM` procedure is used to drop a program.

#### Signature
```sql
DROP_PROGRAM(
    program_name IN VARCHAR2,
    force IN BOOLEAN DEFAULT FALSE
)
```

#### Parameters
- **program_name**: The name of the program that is being dropped.
- **force**: A boolean value that instructs the server how to handle programs with dependent jobs. 
  - Set to `FALSE` to return an error if the program is referenced by a job.
  - Set to `TRUE` to disable any jobs that reference the program before dropping the program. The default value is `FALSE`.

#### Example
The following call to `DROP_PROGRAM` drops a program named `update_emp`:

```sql
DBMS_SCHEDULER.DROP_PROGRAM('update_emp');
```

---

### 3.15.9 DROP_PROGRAM_ARGUMENT

The `DROP_PROGRAM_ARGUMENT` procedure is used to drop a program argument and comes in two forms.

#### First Form
```sql
DROP_PROGRAM_ARGUMENT(
    program_name IN VARCHAR2,
    argument_position IN PLS_INTEGER
)
```

#### Second Form
```sql
DROP_PROGRAM_ARGUMENT(
    program_name IN VARCHAR2,
    argument_name IN VARCHAR2
)
```

#### Parameters
- **program_name**: The name of the program that is being modified.
- **argument_position**: Specifies the position of the argument that is being dropped.
- **argument_name**: Specifies the name of the argument that is being dropped.

#### Examples
- The following call to `DROP_PROGRAM_ARGUMENT` drops the first argument in the `update_emp` program:
  ```sql
  DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT('update_emp', 1);
  ```

- The following call to `DROP_PROGRAM_ARGUMENT` drops an argument named `emp_name`:
  ```sql
  DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT('update_emp', 'emp_name');
  ```

---

### 3.15.10 DROP_SCHEDULE

The `DROP_SCHEDULE` procedure is used to drop a schedule.

#### Signature
```sql
DROP_SCHEDULE(
    schedule_name IN VARCHAR2,
    force IN BOOLEAN DEFAULT FALSE
)
```

#### Parameters
- **schedule_name**: The name of the schedule that is being dropped.
- **force**: A boolean value that specifies the behavior of the server if the specified schedule is referenced by any job.
  - Set to `FALSE` to return an error if the specified schedule is referenced by a job. This is the default behavior.
  - Set to `TRUE` to disable any jobs that use the specified schedule before dropping the schedule. Any running jobs will be allowed to complete before the schedule is dropped.

#### Example
The following call to `DROP_SCHEDULE` drops a schedule named `weeknights_at_5`:

```sql
DBMS_SCHEDULER.DROP_SCHEDULE('weeknights_at_5', TRUE);
```

- The server will disable any jobs that use the schedule before dropping the schedule.

---

### 3.15.11 ENABLE

The `ENABLE` procedure is used to enable a disabled program or job.

#### Signature
```sql
ENABLE(
    name IN VARCHAR2,
    commit_semantics IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR'
)
```

#### Parameters
- **name**: The name of the program or job that is being enabled.
- **commit_semantics**: Instructs the server how to handle errors encountered while enabling a program or job. By default, `commit_semantics` is set to `STOP_ON_FIRST_ERROR`, instructing the server to stop when it encounters an error.

#### Example
The following call to `ENABLE` enables the `update_emp` program:

```sql
DBMS_SCHEDULER.ENABLE('update_emp');
```

---

### 3.15.12 EVALUATE_CALENDAR_STRING

The `EVALUATE_CALENDAR_STRING` procedure is used to evaluate the `repeat_interval` value specified when creating a schedule with the `CREATE_SCHEDULE` procedure. It returns the date and time that a specified schedule will execute without actually scheduling the job.

#### Signature
```sql
EVALUATE_CALENDAR_STRING(
    calendar_string IN VARCHAR2,
    start_date IN TIMESTAMP WITH TIME ZONE,
    return_date_after IN TIMESTAMP WITH TIME ZONE,
    next_run_date OUT TIMESTAMP WITH TIME ZONE
)
```

#### Parameters
- **calendar_string**: The calendar string that describes a `repeat_interval` (see Section 0) that is being evaluated.
- **start_date**: The date and time after which the `repeat_interval` will become valid.
- **return_date_after**: The date and time that `EVALUATE_CALENDAR_STRING` should use as a starting date when evaluating the `repeat_interval`.
- **next_run_date**: An OUT parameter that will contain the first occurrence of the schedule after the date specified by the `return_date_after` parameter.

#### Example
The following example evaluates a calendar string and returns the first date and time that the schedule will be executed after June 15, 2013:

```sql
DECLARE
    result TIMESTAMP;
BEGIN
    DBMS_SCHEDULER.EVALUATE_CALENDAR_STRING(
        'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=17;',
        '15-JUN-2013', NULL, result
    );
    DBMS_OUTPUT.PUT_LINE('next_run_date: ' || result);
END;
/
```

- Output: `next_run_date: 17-JUN-13 05.00.00.000000 PM`
- Explanation: June 15, 2013, is a Saturday; the schedule will not execute until Monday, June 17, 2013, at 5:00 pm.

---

### 3.15.13 RUN_JOB

The `RUN_JOB` procedure is used to execute a job immediately.

#### Signature
```sql
RUN_JOB(
    job_name IN VARCHAR2,
    use_current_session IN BOOLEAN DEFAULT TRUE
)
```

#### Parameters
- **job_name**: The name of the job that will execute.
- **use_current_session**: By default, the job will execute in the current session. If specified, `use_current_session` must be set to `TRUE`. If `use_current_session` is set to `FALSE`, Advanced Server will return an error.

#### Example
The following call to `RUN_JOB` executes a job named `update_log`:

```sql
DBMS_SCHEDULER.RUN_JOB('update_log', TRUE);
```

- Passing a value of `TRUE` as the second argument instructs the server to invoke the job in the current session.

---

### 3.15.14 SET_JOB_ARGUMENT_VALUE

The `SET_JOB_ARGUMENT_VALUE` procedure is used to specify a value for an argument and comes in two forms.

#### First Form
```sql
SET_JOB_ARGUMENT_VALUE(
    job_name IN VARCHAR2,
    argument_position IN PLS_INTEGER,
    argument_value IN VARCHAR2
)
```

#### Second Form
```sql
SET_JOB_ARGUMENT_VALUE(
    job_name IN VARCHAR2,
    argument_name IN VARCHAR2,
    argument_value IN VARCHAR2
)
```

#### Parameters
- **job_name**: The name of the job to which the modified argument belongs.
- **argument_position**: The position of the argument for which the value will be set.
- **argument_name**: The name of the argument for which the value will be set.
- **argument_value**: The new value of the argument.

#### Examples
- The following example assigns a value of `30` to the first argument in the `update_emp` job:
  ```sql
  DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE('update_emp', 1, '30');
  ```

- The following example sets the `emp_name` argument to `SMITH`:
  ```sql
  DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE('update_emp', 'emp_name', 'SMITH');
  ```

---

### 3.16 DBMS_SESSION

Advanced Server provides support for the `DBMS_SESSION.SET_ROLE` procedure.

#### Function/Procedure
- **SET_ROLE(role_cmd)**: Executes a `SET ROLE` statement followed by the string value specified in `role_cmd`.

#### Description
- Advanced Server's implementation of `DBMS_SESSION` is a partial implementation compared to Oracle's version. Only `DBMS_SESSION.SET_ROLE` is supported.

#### 3.16.1 SET_ROLE

The `SET_ROLE` procedure sets the current session user to the role specified in `role_cmd`. After invoking the `SET_ROLE` procedure, the current session will use the permissions assigned to the specified role.

#### Signature
```sql
SET_ROLE(role_cmd)
```

- The `SET_ROLE` procedure appends the value specified for `role_cmd` to the `SET ROLE` statement and then invokes the statement.

#### Parameters
- **role_cmd**: Specifies a role name in the form of a string value.

#### Example
The following call to the `SET_ROLE` procedure invokes the `SET ROLE` command to set the identity of the current session user to `manager`:

```sql
EXEC DBMS_SESSION.SET_ROLE('manager');
```

---

### 3.17 DBMS_SQL

The `DBMS_SQL` package provides an application interface compatible with Oracle databases to the EnterpriseDB dynamic SQL functionality. With `DBMS_SQL`, you can construct queries and other commands at runtime rather than when you write the application. EnterpriseDB Advanced Server offers native support for dynamic SQL; `DBMS_SQL` provides a way to use dynamic SQL in a fashion compatible with Oracle databases without modifying your application.

- `DBMS_SQL` assumes the privileges of the current user when executing dynamic SQL statements.

#### Function/Procedure
- **BIND_VARIABLE(c, name, value [, out_value_size])**: Binds a value to a variable.
- **BIND_VARIABLE_CHAR(c, name, value [, out_value_size])**: Binds a `CHAR` value to a variable.
- **BIND_VARIABLE_RAW(c, name, value [, out_value_size])**: Binds a `RAW` value to a variable.
- **CLOSE_CURSOR(c IN OUT)**: Closes a cursor.
- **COLUMN_VALUE(c, position, value OUT [, column_error OUT [, actual_length OUT]])**: Returns a column value into a variable.
- **COLUMN_VALUE_CHAR(c, position, value OUT [, column_error OUT [, actual_length OUT]])**: Returns a `CHAR` column value into a variable.
- **COLUMN_VALUE_RAW(c, position, value OUT [, column_error OUT [, actual_length OUT]])**: Returns a `RAW` column value into a variable.
- **DEFINE_COLUMN(c, position, column [, column_size])**: Defines a column in the `SELECT` list.
- **DEFINE_COLUMN_CHAR(c, position, column, column_size)**: Defines a `CHAR` column in the `SELECT` list.
- **DEFINE_COLUMN_RAW(c, position, column, column_size)**: Defines a `RAW` column in the `SELECT` list.
- **DESCRIBE_COLUMNS**: Defines columns to hold a cursor result set.
- **EXECUTE(c)**: Executes a cursor.
- **EXECUTE_AND_FETCH(c [, exact])**: Executes a cursor and fetches a single row.
- **FETCH_ROWS(c)**: Fetches rows from the cursor.
- **IS_OPEN(c)**: Checks if a cursor is open.
- **LAST_ROW_COUNT**: Returns the cumulative number of rows fetched.
- **OPEN_CURSOR**: Opens a cursor.
- **PARSE(c, statement, language_flag)**: Parses a statement.

#### Public Variables
- **native**: Provided for compatibility with Oracle syntax. See `DBMS_SQL.PARSE` for more information.
- **V6**: Provided for compatibility with Oracle syntax. See `DBMS_SQL.PARSE` for more information.
- **V7**: Provided for compatibility with Oracle syntax. See `DBMS_SQL.PARSE` for more information.

---

### 3.17.1 BIND_VARIABLE

The `BIND_VARIABLE` procedure provides the capability to associate a value with an IN parameter in a dynamic SQL statement.

#### Signature
```sql
BIND_VARIABLE(
    c IN INTEGER,
    name IN VARCHAR2,
    value IN VARCHAR2,
    out_value_size OUT INTEGER
)
```

- **c**: The cursor identifier.
- **name**: The name of the variable.
- **value**: The value to bind to the variable.
- **out_value_size**: The size of the value (optional).

#### Example
```sql
DECLARE
    cur INTEGER := DBMS_SQL.OPEN_CURSOR;
BEGIN
    DBMS_SQL.BIND_VARIABLE(cur, 'id', '123');
    -- Further operations...
    DBMS_SQL.CLOSE_CURSOR(cur);
END;
```

This example binds the value `123` to the variable `id` in the cursor `cur`.

---

Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.