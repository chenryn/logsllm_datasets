      private function _write_file($sql, $filename, $dir) {
        $dir = $dir ? $dir : './backup/';
        // 创建目录
        if (! is_dir ( $dir )) {
         mkdir ( $dir, 0777, true );
        }
       $re = true;
       if (! @$fp = fopen ( $dir . $filename, "w+" )) {
         $re = false;
          $this->_showMsg("打开sql文件失败！",true);
        }
       if (! @fwrite ( $fp, $sql )) {
        $re = false;
          $this->_showMsg("写入sql文件失败，请文件是否可写",true);
        }
        if (! @fclose ( $fp )) {
          $re = false;
          $this->_showMsg("关闭sql文件失败！",true);
       }
       return $re;
      }
追踪变量$fp,
    ! @$fp = fopen ( $dir . $filename, "w+" )
由变量$dir和$filename控制，但这两个参数不可控，因此变量$fp也不可控，所以此处因该是误报。
seay提到的文件操作漏洞就结束了，基本都是误报，变量一步步追溯到最后都不可控，可能是调用链长一些，就容易导致误报。
#### 四、XSS
##### 存储型xss
##### /seacmseditor/php/controller.php
seay工具报echo中存在可控变量，可能存在xss,打开看看代码：
    /* 输出结果 */
    if (isset($_GET["callback"])) {
      if (preg_match("/^[\w_]+$/", $_GET["callback"])) {
       echo htmlspecialchars($_GET["callback"]) . '(' . $result . ')';
      } else {
        echo json_encode(array(
          'state'=> 'callback参数不合法'
        ));
      }
    } else {
      echo $result;
    }
两个可疑输出点，两个可控变量，$_GET["callback"]和$result，其中$_GET["callback"]先是经过了preg
_match()函数进行/^[\w_
]+$/正则匹配，从头匹配任意一个字符与下划线组合一次或多次结尾，匹配到就返回1，否则返回0，又htmlspecialchars(）函数进行防xss处理，看来$_GET["callback"]变量基本没有可利用性了，再看看$result变量，
    $CONFIG = json_decode(preg_replace("/\/\*[\s\S]+?\*\//", "", file_get_contents("config.json")), true);
    $action = $_GET['action'];
    switch ($action) {
        case 'config':
            $result =  json_encode($CONFIG);
            break;
        /* 上传图片 */
        case 'uploadimage':
        /* 上传涂鸦 */
        case 'uploadscrawl':
        /* 上传视频 */
        case 'uploadvideo':
        /* 上传文件 */
        case 'uploadfile':
            $result = include("action_upload.php");
            break;
        /* 列出图片 */
        case 'listimage':
            $result = include("action_list.php");
            break;
        /* 列出文件 */
        case 'listfile':
            $result = include("action_list.php");
            break;
        /* 抓取远程文件 */
        case 'catchimage':
            $result = include("action_crawler.php");
            break;
        default:
            $result = json_encode(array(
                'state'=> '请求地址出错'
            ));
            break;
    }
可以看到$result变量已经被限定死了，不可控，因此这处xss也是误报。到此处seay审计系统报给我们的漏洞就差不多审计完了，但是xss却没有找到，不甘心，回想之下，想到一开始
**/admin/files/adset.php**
文件中审计sql注入时，变量经过了addlashes()函数处理，因此sql注入被ban,但仔细看代码：
可以看到$ad1-3经过addslashes()函数处理一次带入了页面（这里很疑惑，addlashe()函数会转义预定义字符(单·双引号、反斜杠（\）、NULL)，因此按理来说网上有些师傅给出的xsspayload:
如：
在经过处理后，单引号（’）被转义，payload应该是不能生效的才对)带着疑问进行尝试后，果然，payload失效。
那么问题究竟在哪里？上网搜索，有师傅给出的解释是addlashes()函数主要是用于防范sql注入，对xss过滤基本没有效果，但具体原因没有说明，
**ps:有大师傅知道能讲解一下吗？**
查资料搜索addlashes()函数，了解到
    addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。
    预定义字符是：
    单引号（'）
    双引号（"）
    反斜杠（\）
    NULL
    提示：该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。
    注释：默认地，PHP 对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes()。所以您不应对已转义过的字符串使用 addslashes()，因为这样会导致双层转义。遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测。
**因为php会默认对某些预定义符号进行转义处理，因此如果此处再用addlashes()函数处理，会造成二次转义，使防范失效。**
在 **/seacmseditor/php/controller.php** 文件底部，看到：
       广告一
构造payload:
闭合
成功弹窗！因为此处和后端数据库存在交互，所以是一个 **存储型xss**
那么同样的原理，在前面我们找到过的sql注入点附近，似乎都只是进行了这样简单的过滤,是不是都存在这样的xss呢？
测试一下：
##### /admin/files/editcolumn.php
    $columnopen='class="open"';
    $id=$_GET['id'];
    $type=$_GET['type'];
    if ($type==1){
    $query = "SELECT * FROM nav WHERE id='$id'";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $nav = mysql_fetch_array($resul);
    }
    if ($type==2){
    $query = "SELECT * FROM navclass WHERE id='$id'";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $nav = mysql_fetch_array($resul);
    }
    ">
    2){?>               
     链接
    " >
同样的输入同样的输出，只是这里多了个id和type来进入sql操作，payload打一打：
GET:
    http://127.0.0.1/admin/?r=editcolumn&type=1&id=1
POST:
    name=&link=&keywords=&description=&px=&xs=0&content=&nbsp;请在后台栏目设置编辑这里的内容&save=1
成功弹窗！数据库交互存储型xss
同样的方法,测试出在
##### /admin/file/editlink.php
##### **/admin/files/editsoft.php**
##### /admin/files/edittwz.php
##### /admin/files/imageset.php
等等文件中都存在存储型xss,还有一些前面sql注入测试中提到的文件都存在同样的问题，这里就不提了。
##### 反射型xss
##### /files/contact.php
files/contact.php 12~15行
    $page=addslashes($_GET['page']);
    if ($page<>""){
    if ($page<>1){
    $pages="第".$page."页 - ";
这里的$page经过addslashes()函数处理一次带入了页面，经典问题。直接传payload打一打(因为addlashes()函数过滤，所以payload中不再使用单双引号，改用正斜杠)：payload：
    http://127.0.0.1/?r=contact&page=
成功弹窗，因为这里没有和数据库的交互，所以只是一个反射型的xss漏洞。
##### **fiels/download.php**
    $yemas=$_GET['page'];
    if ($yemas<>""){
    $yema=" - 第 $yemas 页";
    }else{
    $yema="";   
    }
    $pageyema="r=".$navs['link']
    ?>
     - 
$yema变量未过滤，直接拼接输出，xss打一打：
    http://127.0.0.1/?r=download&page=
成功弹窗
我白盒审计出的xss漏洞就这些了。
#### 五、csrf
##### admin/files/linklist.php
    $delete=$_GET['delete'];
    if ($delete<>""){
    $query = "DELETE FROM download WHERE id='$delete'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    echo "";
    exit; 
    }
    ?>
未经任何过滤检验，也没有执行token验证，可以执行csrf攻击，尝试：
点击删除，并抓包：
用burp自带工具一键生成一个poc利用一下：
换个浏览器访问：
可以看到，已经成功删除了！
除了这里，在
##### admin/files/wzlist.php
##### admin/files/softlist.php
##### admin/files/commentlist.php
##### admin/files/commentlist.php
等文件中也存在同样的漏洞问题，同样的利用方式。
#### 六、越权
##### /inc/checklogin.php
在进入到管理员首页时，首先会检测是否是登录的状态，而判断登录的状态是通过截取cookie中user字段的值来判断是否进行了登录。显然，这种是有缺陷的。我们直接在cookie中添加user=admin即可进行登录
#### 总结
至此xhcms白盒审计就结束了，这个cms不愧是传说中极其适合新手审计的目标，简直是“漏洞百出”，哈哈。
审计过程中，seay审计工具给了很大帮助，很多简单的
注入漏洞直接就报警给出来了。不过也有一些误报，就是那些利用线长一些的变量，就需要我们自己去自习寻根问源了。在审计中，遇到了不少问题，一些漏洞不再是就在几行代码中就能找到，并加以利用，而是要寻根上朔，一步步把它理清，这对我养成精心看代码的习惯有很大帮助。
不过这个cms的审计就像师傅们说的一样，简单，适合新手，但像这个cms中一样简单的sql注入之类的漏洞现在几乎稀少到不可见了，因此，下一步就要更进一步，学习审计框架之类来进行提升。