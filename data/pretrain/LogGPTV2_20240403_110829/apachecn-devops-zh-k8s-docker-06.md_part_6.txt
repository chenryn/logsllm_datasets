      serviceAccountName: external-dns
      containers:
      - name: external-dns
        image: registry.opensource.zalan.do/teapot/external-dns:latest
        args:
        - --source=service
        - --provider=coredns
        - --log-level=info
        env:
        - name: ETCD_URLS
          value: http://10.96.181.53:2379
```
请记住，如果您的 ETCD 服务器的 IP 地址不是 10.96.181.53，请在部署清单之前更改它。
使用`kubectl apply -f external-dns-deployment.yaml`部署清单。
## 通过外部 dns 集成创建负载平衡器服务
您仍然应该运行本章开头的 NGINX 部署。它有一些与之相关的服务。我们将添加另一个，向您展示如何为部署创建动态注册:
1.  To create a dynamic entry in the CoreDNS zone, you need to add an annotation in your service manifest. Create a new file called `nginx-dynamic.yaml` with the following content:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      annotations:
     external-dns.alpha.kubernetes.io/hostname: nginx.foowidgets.k8s
      name: nginx-ext-dns
      namespace: default
    spec:
      ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        run: nginx-web
      type: LoadBalancer
    ```
    请注意文件中的注释。要指示`external-dns`创建记录，您需要添加一个带有关键字`external-dns.alpha.kubernetes.io/hostname`的注释，该关键字带有服务的所需名称，在本例中为`nginx.foowidgets.k8s`。
2.  Create the service using `kubectl apply -f nginx-dynamic.yaml`.
    大约需要一分钟`external-dns`才能了解域名系统的变化。
3.  要验证记录是否已创建，请使用`kubectl logs -n kube-system -l app=external-dns`检查`external-dns` pod 日志。一旦记录被`external-dns`提取，您将看到类似如下的条目:
    ```
    time="2020-04-27T18:14:38Z" level=info msg="Add/set key /skydns/k8s/foowidgets/nginx/03ebf8d8 to Host=172.17.201.101, Text=\"heritage=external-dns,external-dns/owner=default,external-dns/resource=service/default/nginx-lb\", TTL=0"
    ```
4.  The last step to confirm that external-dns is fully working is to test a connection to the application. Since we are using a KinD cluster, we must test this from a pod in the cluster. We will use a Netshoot container, as we have been doing throughout this book.
    重要说明
    在本节的最后，我们将展示将 Windows DNS 服务器与我们的 Kubernetes CoreDNS 服务器集成的步骤。提供这些步骤是为了让您全面了解如何将企业域名系统服务器与我们的核心域名系统服务完全集成。
5.  运行网络拍摄容器:
    ```
    kubectl run --generator=run-pod/v1 tmp-shell --rm -i --tty --image nicolaka/netshoot -- /bin/bash
    ```
6.  To confirm that the entry has been created successfully, execute a `nslookup` for the host in a Netshoot shell:
    ![Figure 6.15 – Nslookup for new record ](img/Fig_6.15_B15514.jpg)
    图 6.15–新记录的 Nslookup
    我们可以根据 IP 地址确认正在使用的 DNS 服务器是 CoreDNS，这是分配给`kube-dns`服务的 IP。(还是那句话，服务是`kube-dns`，但是吊舱运行的是 CoreDNS)。
    172.17.201.101 地址是分配给新 NGINX 服务的 IP；我们可以通过列出默认命名空间中的服务来确认这一点:
    ![Figure 6.16 – NGINX external IP address ](img/Fig_6.16_B15514.jpg)
    图 6.16–NGINX 外部 IP 地址
7.  最后，让我们通过使用名称连接到容器来确认与 NGINX 的连接是否正常。在网络拍摄容器中使用`curl`命令，卷曲到端口 8080 上的域名:
![Figure 6.17 – Curl test using the external-dns name ](img/Fig_6.17_B15514.jpg)
图 6.17–使用外部域名的 Curl 测试
`curl`输出确认我们可以使用动态创建的服务名访问 NGINX web 服务器。
我们意识到其中一些测试并不令人兴奋，因为您可以使用标准浏览器来测试它们。在下一节中，我们将把集群中运行的核心域名系统与一个视窗域名系统服务器集成在一起。
### 将 coreens 与企业 dns 集成
本节将向您展示如何将`foowidgets.k8s`区域的名称解析转发到运行在 Kubernetes 集群上的 CoreDNS 服务器。
注意
本节旨在提供一个将企业域名系统服务器与 Kubernetes 域名系统服务集成的示例。
由于外部要求和额外设置，提供的步骤仅供参考，**不应在您的 KinD 集群上执行**。
对于此场景，主 DNS 服务器运行在 Windows 2016 服务器上。
部署的组件如下:
*   运行域名系统的 Windows 2016 服务器
*   到库伯斯坦的群集
*   Bitnami NGINX 部署
*   创建负载平衡器服务，分配 IP 10.2.1.74
*   配置为使用主机端口 53 的 CoreDNS 服务
*   已部署附加组件，使用本章中的配置，例如外部 dns、用于 CoreDNS 的 ETCD 集群、添加的 CoreDNS ETCD 区域以及使用地址池 10.2.1.60-10.2.1.80 的 MetalLB
现在，让我们通过配置步骤来集成我们的域名系统服务器。
#### 配置主域名系统服务器
第一步是为运行 CoreDNS pod 的节点创建一个条件转发器。
在 Windows DNS 主机上，我们需要为`foowidgets.k8s`创建一个新的条件转发器，指向运行 CoreDNS pod 的主机。在我们的示例中，CoreDNS pod 已分配给主机 10.240.100.102:
![Figure 6.18 – Windows conditional forwarder setup ](img/Fig_6.18_B15514.jpg)
图 6.18–窗口条件转发器设置
这将配置窗口域名系统服务器，将对`foowidgets.k8s`域中主机的任何请求转发到核心域名系统窗格。
#### 测试到 coreens 的 dns 转发
为了测试配置，我们将使用主网络上的工作站，该工作站已经配置为使用 Windows DNS 服务器。
我们将运行的第一个测试是由 MetalLB 注释创建的 NGINX 记录的`nslookup`:
在命令提示符下，我们执行一个`nslookup nginx.foowidgets.k8s`:
![Figure 6.19 – Nslookup confirmation for registered name ](img/Fig_6.19_B15514.jpg)
图 6.19–注册名称的 Nslookup 确认
由于查询返回了我们期望记录的 IP 地址，因此我们可以确认 Windows DNS 服务器正在将请求正确转发到 CoreDNS。
我们可以通过笔记本电脑的浏览器再做一次 NGINX 测试:
![Figure 6.20 – Success browsing from an external workstation using CoreDNS ](img/Fig_6.20_B15514.jpg)
图 6.20–使用 CoreDNS 从外部工作站成功浏览
一项测试证实了转发工作正常，但我们对系统完全正常工作感到不舒服。
为了测试一个新的服务，我们部署了一个不同的 NGINX 服务器，名为 microbot，服务有一个分配名称`microbot.foowidgets.k8s`的注释。MetalLB 已为该服务分配了 10.2.1.65 的 IP 地址。
与我们之前的测试一样，我们使用 nslookup 测试名称解析:
![Figure 6.21 – Nslookup confirmation for an additional registered name ](img/Fig_6.21_B15514.jpg)
图 6.21–Nslookup 确认一个额外的注册名称
为了确认网络服务器运行正常，我们从工作站浏览到以下网址:
![Figure 6.22 – Successful browsing from an external workstation using CoreDNS ](img/Fig_6.22_B15514.jpg)
图 6.22–使用 CoreDNS 从外部工作站成功浏览
成功！我们现在已经集成了一个企业域名服务器和一个运行在 Kubernetes 集群上的 CoreDNS 服务器。这种集成为用户提供了通过简单地向服务添加注释来动态注册服务名称的能力。
# 总结
在本章中，您了解了 Kubernetes 中的两个重要对象，它们向其他集群资源和用户公开了您的部署。
我们从服务和可以分配的多种类型开始这一章。三种主要的服务类型是集群 IP、节点端口和负载平衡器。选择服务类型将配置如何访问您的应用。
通常，服务本身并不是用于提供对集群中运行的应用的访问的唯一对象。您将经常使用集群 IP 服务和入口控制器来提供对使用第 7 层的服务的访问。一些应用可能需要额外的通信，这不是由第 7 层负载平衡器提供的。这些应用可能需要第 4 层负载平衡器来向用户公开它们的服务。在负载平衡部分，我们演示了 MetalLB 的安装和使用，MetalLB 是一种常用的开源第 7 层负载平衡器。
在最后一节中，我们解释了如何使用条件转发将动态 CoreDNS 区域与外部企业 DNS 服务器集成。集成两个命名系统提供了一种允许动态注册集群中任何第 4 层负载平衡服务的方法。
既然您知道了如何向用户公开集群上的服务，那么我们如何控制谁有权访问集群来创建新的服务呢？在下一章中，我们将解释如何将认证与您的集群集成。我们将在我们的 KinD 集群中部署一个 OIDC 提供商，并与外部 SAML2 实验室服务器连接以获取身份信息。
# 问题
1.  How does a service know what pods should be used as endpoints for the service?
    A.在服务港口旁边
    B.通过命名空间
    C.作者
    D.通过选择器标签
2.  What kubectl command helps you to troubleshoot services that may not be working properly?
    A.`kubectl get services `
    B.`kubectl get ep `
    C.`kubectl get pods `
    D.`kubectl get servers `
3.  All Kubernetes distributions include support for services that use the `LoadBalancer` type.
    A.真实的
    B.错误的
4.  Which load balancer type supports all TCP/UDP ports and accepts traffic regardless of the packet's contents?
    A.第 7 层
    B.思科层
    C.第二层
    D.第 4 层
5.  Without any added components, you can use multiple protocols using which of the following service types?
    A.`NodePort`和`ClusterIP`
    B.`LoadBalancer`和`NodePort`
    C.`NodePort`、`LoadBalancer`和`ClusterIP`
    D.`LoadBalancer`和`ClusterIP`**