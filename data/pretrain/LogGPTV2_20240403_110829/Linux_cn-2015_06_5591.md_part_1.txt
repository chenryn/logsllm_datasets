---
author: Petras Liumparas
category: 系统运维
comments_data:
- date: '2015-06-13 19:54:37'
  message: 写个脚本还真有不少要注意的地方
  postip: 113.67.178.245
  username: arhool
- date: '2015-09-04 21:36:36'
  message: 很好啊！
  postip: 120.236.167.167
  username: 来自广东的 Opera 31.0|GNU/Linux 用户
- date: '2015-10-21 18:08:46'
  message: 学习
  postip: 118.26.196.238
  username: Aran [Internet Explorer 9.0|Windows 7]
- date: '2015-10-24 02:38:26'
  message: 相当不错的文章！写的好，译得也好！
  postip: 218.66.150.72
  username: 来自福建厦门的 Chrome 45.0|GNU/Linux 用户
- date: '2016-03-15 22:10:13'
  message: 相当不错&nbsp;&nbsp;感谢译者：GOLinux 校对：wxy
  postip: 61.183.207.149
  username: interface [Firefox 45.0|Windows 10]
- date: '2017-02-09 16:52:09'
  message: xiexie
  postip: 112.224.19.1
  username: 来自山东济南的 Chrome Mobile 40.0|Android 6.0 用户
- date: '2017-03-15 19:06:36'
  message: 在shell写点长命令经常因为 空格、是否需要\转义 等等而经常掉坑里 இдஇ
  postip: 113.248.221.211
  username: 来自重庆的 Chrome Mobile 40.0|Android 5.1 用户
count:
  commentnum: 7
  favtimes: 19
  likes: 0
  sharetimes: 0
  viewnum: 15908
date: '2015-06-09 08:32:00'
editorchoice: false
excerpt: 通常，当人们提到shell脚本语言时，浮现在他们脑海中是bash，ksh，sh或者其它相类似的linux/unix脚本语言。脚本语言是与计算机交流的另外一种途径。使用图形化窗口界面（不管是windows还是linux都无所谓）用户可以移动鼠标并点击各种对象，比如按钮、列表、选框等等。但这种方式在每次用户想要计算机/服务器完成相同任务时（比如说批量转换照片，或者下载新的电影、mp3等）却是十分不方便。要想让所有这些事情变得简单并且自动化，我们可以使用shell脚本。
  某些编程语言，像pascal、foxpro、C、java之类，在执行前需要先进行编译。它们需
fromurl: http://linoxide.com/linux-shell-script/guide-start-learning-shell-scripting-scratch/
id: 5591
islctt: true
largepic: /data/attachment/album/201506/08/113720s46pren00n2681cr.jpg
permalink: /article-5591-1.html
pic: /data/attachment/album/201506/08/113720s46pren00n2681cr.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 通常，当人们提到shell脚本语言时，浮现在他们脑海中是bash，ksh，sh或者其它相类似的linux/unix脚本语言。脚本语言是与计算机交流的另外一种途径。使用图形化窗口界面（不管是windows还是linux都无所谓）用户可以移动鼠标并点击各种对象，比如按钮、列表、选框等等。但这种方式在每次用户想要计算机/服务器完成相同任务时（比如说批量转换照片，或者下载新的电影、mp3等）却是十分不方便。要想让所有这些事情变得简单并且自动化，我们可以使用shell脚本。
  某些编程语言，像pascal、foxpro、C、java之类，在执行前需要先进行编译。它们需
tags:
- 脚本
- shell
thumb: false
title: Shell脚本编程初体验
titlepic: false
translator: GOLinux
updated: '2015-06-09 08:32:00'
---
![](/data/attachment/album/201506/08/113720s46pren00n2681cr.jpg)
通常，当人们提到“shell脚本语言”时，浮现在他们脑海中是bash，ksh，sh或者其它相类似的linux/unix脚本语言。脚本语言是与计算机交流的另外一种途径。使用图形化窗口界面（不管是windows还是linux都无所谓）用户可以移动鼠标并点击各种对象，比如按钮、列表、选框等等。但这种方式在每次用户想要计算机/服务器完成相同任务时（比如说批量转换照片，或者下载新的电影、mp3等）却是十分不方便。要想让所有这些事情变得简单并且自动化，我们可以使用shell脚本。
某些编程语言，像pascal、foxpro、C、java之类，在执行前需要先进行编译。它们需要合适的编译器来让我们的代码完成某个任务。
而其它一些编程语言，像php、javascript、visualbasic之类，则不需要编译器，因此它们需要解释器，而我们不需要编译代码就可以运行程序。
shell脚本也像解释器一样，但它通常用于调用外部已编译的程序。然后，它会捕获输出结果、退出代码并根据情况进行处理。
Linux世界中最为流行的shell脚本语言之一，就是bash。而我认为（这是我自己的看法）原因在于，默认情况下bash shell可以让用户便捷地通过历史命令（先前执行过的）导航，与之相反的是，ksh则要求对.profile进行一些调整，或者记住一些“魔术”组合键来查阅历史并修正命令。
好了，我想这些介绍已经足够了，剩下来哪个环境最适合你，就留给你自己去判断吧。从现在开始，我将只讲bash及其脚本。在下面的例子中，我将使用CentOS 6.6和bash-4.1.2。请确保你有相同版本，或者更高版本。
### Shell脚本流
shell脚本语言就跟和几个人聊天类似。你只需把所有命令想象成能帮你做事的那些人，只要你用正确的方式来请求他们去做。比如说，你想要写文档。首先，你需要纸。然后，你需要把内容说给某个人听，让他帮你写。最后，你想要把它存放到某个地方。或者说，你想要造一所房子，因而你需要请合适的人来清空场地。在他们说“事情干完了”，那么另外一些工程师就可以帮你来砌墙。最后，当这些工程师们也告诉你“事情干完了”的时候，你就可以叫油漆工来给房子粉饰了。如果你让油漆工在墙砌好前就来粉饰，会发生什么呢？我想，他们会开始发牢骚了。几乎所有这些像人一样的命令都会说话，如果它们完成了工作而没有发生什么问题，那么它们就会告诉“标准输出”。如果它们不能做你叫它们做的事——它们会告诉“标准错误”。这样，最后，所有的命令都通过“标准输入”来听你的话。
快速实例——当你打开linux终端并写一些文本时——你正通过“标准输入”和bash说话。那么，让我们来问问bash shell **who am i（我是谁？）**吧。
```
root@localhost ~]# who am i                                ”和流索引）文件：
```
[root@localhost ~]# blablabla 1> output.txt
-bash: blablabla: command not found
```
在本例中，我们试着重定向流1（**stdout**）到名为output.txt的文件。让我们来看对该文件内容所做的事情吧，使用cat命令可以做这事：
```
[root@localhost ~]# cat output.txt
[root@localhost ~]#
```
看起来似乎是空的。好吧，现在让我们来重定向流2（**stderr**）：
```
[root@localhost ~]# blablabla 2> error.txt
[root@localhost ~]#
```
好吧，我们看到牢骚话没了。让我们检查一下那个文件：
```
[root@localhost ~]# cat error.txt
-bash: blablabla: command not found
[root@localhost ~]#
```
果然如此！我们看到，所有牢骚话都被记录到errors.txt文件里头去了。
有时候，命令会同时产生**stdout**和**stderr**。要重定向它们到不同的文件，我们可以使用以下语句：
```
command 1>out.txt 2>err.txt
```
要缩短一点语句，我们可以忽略“1”，因为默认情况下**stdout**会被重定向：
```
command >out.txt 2>err.txt
```
好吧，让我们试试做些“坏事”。让我们用rm命令把file1和folder1给删了吧：
```
[root@localhost ~]# rm -vf folder1 file1 > out.txt 2>err.txt
```
现在来检查以下输出文件：
```
[root@localhost ~]# cat out.txt
removed `file1'
[root@localhost ~]# cat err.txt
rm: cannot remove `folder1': Is a directory
[root@localhost ~]#
```
正如我们所看到的，不同的流被分离到了不同的文件。有时候，这也不是很方便，因为我们想要查看出现错误时，在某些操作前面或后面所连续发生的事情。要实现这一目的，我们可以重定向两个流到同一个文件：
```
command >>out_err.txt 2>>out_err.txt
```
注意：请注意，我使用“>>”替代了“>”。它允许我们附加到文件，而不是覆盖文件。
我们也可以重定向一个流到另一个：
```
command >out_err.txt 2>&1
```
让我来解释一下吧。所有命令的标准输出将被重定向到out\_err.txt，错误输出将被重定向到流1（上面已经解释过了），而该流会被重定向到同一个文件。让我们看这个实例：
```
[root@localhost ~]# rm -fv folder2 file2 >out_err.txt 2>&1
[root@localhost ~]# cat out_err.txt
rm: cannot remove `folder2': Is a directory
removed `file2'
[root@localhost ~]#
```
看着这些组合的输出，我们可以将其说明为：首先，**rm**命令试着将folder2删除，而它不会成功，因为linux要求**-r**键来允许**rm**命令删除文件夹，而第二个file2会被删除。通过为**rm**提供**-v**（详情）键，我们让rm命令告诉我们每个被删除的文件或文件夹。
这些就是你需要知道的，关于重定向的几乎所有内容了。我是说几乎，因为还有一个更为重要的重定向工具，它称之为“管道”。通过使用|（管道）符号，我们通常重定向**stdout**流。
比如说，我们有这样一个文本文件：
```
[root@localhost ~]# cat text_file.txt
This line does not contain H e l l o  word
This lilne contains Hello
This also containd Hello
This one no due to HELLO all capital
Hello bash world!