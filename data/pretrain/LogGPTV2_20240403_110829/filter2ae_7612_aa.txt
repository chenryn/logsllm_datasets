**作者：天玄安全实验室**  
**原文链接：**
## 漏洞说明
Issue-1062091为chrom中存在的一个UAF漏洞，此漏洞存在于chromium的Mojo框架中，利用此漏洞可以导致chrome与基于chromium的浏览器沙箱逃逸。这个漏洞是在Chrome
81.0.4041.0的提交中引入的。在几周后，这个提交中的漏洞恰好移动到了实验版本命令行标志的后面。但是，这个更改位于Chrome
82.0.4065.0版本中， **因此该漏洞在Chrome稳定版本81的所有桌面平台上都是可以利用的。**
## 环境配置
一开始打算像调试v8漏洞那样尝试用fetch拉取代码编译带有漏洞的chromium，但是发现chromium源码下载太慢且太大，故直接下载编译好的chromium，地址:vikyd.github.io
下载时除了chromium本体以外还需要将其pdb符号也一起下载
下载好后直接将pdb符号文件与exe执行文件解压放在一起即可
最后用windbg验证是否可以正常查找函数
注：下载以上内容都需要代理
## 漏洞分析
### POC
由于poc目录结构比较复杂，直接给出完整poc下载地址(需要代理)：bugs.chromium.org下载解压后可以得到两个html文件，其中trigger.html为我们需要的poc
然后尝试触发漏洞，根据说明得知chrome默认不会启用mojo，想要启用有两种方法: 一、在命令行启动chromium时加上`--enable-blink-features=MojoJS,MojoJSTest`参数。二、利用另一个漏洞去改写当前Frame对象内部的一个变量`content::RenderFrameImpl::enabled_bindings_`让Frame拥有调用MojoJS的能力，通过以下路径可以得到该变量：
    chrome.dll base => g_frame_map => RenderFrameImpl(main frame) => RenderFrameImpl.enabled_bindings_
关于改写变量部分具体可查看SCTF202中的0x02 exploit部分，在实际利用漏洞进行攻击时肯定采用第二种方式，而此时仅需要分析利用Issue
1062091漏洞即可，所以先不去过分关心mojo开启的问题，直接采用第一种方法开启mojo。使用windbg进行调试
在调试开始前由于当前工作目录的问题需要将poc代码中以下两处路径进行一些改动
然后用`.childdbg 1`开启子进程调试
之后经过几个`ntdll!LdrpDoDebuggerBreak`后就会触发crash
## 漏洞分析
通过观察异常信息可判断此处并非漏洞触发的第一现场，使用gflags.exe开启页堆(+hpa)与堆栈跟踪(+ust)并在启动chrome时添加--no-sandbox参数进行调试分析会发现崩溃点会转移到前一句代码
再结合代码可以判断发生崩溃的地方是在获取render_frame_host_对象虚表
使用!address查看该render_frame_host_对象内存信息会发现该内存已被释放
通过观察发现render_frame_host_对象在InstalledAppProviderImpl对象在构造时被初始化
对content::InstalledAppProviderImpl::Create函数下断，当执行到以下内容时将会创建InstalledAppProviderImpl对象
而render_frame_host_保存在InstalledAppProviderImpl对象0x8偏移处
再结合poc可以确定InstalledAppProviderImpl对象是在sub frame调用bindInterface进行接口绑定时创建的
在之后的poc执行中，父帧会通过MojoInterfaceInterceptor拦截并获取子帧的句柄
获取后便会调用body.removeChild删除子帧
最后会通过filterInstalledApps函数去调用已经被释放的render_frame_host_对象的虚函数
总结poc的执行顺序大致为：
  * 通过window.location.hash判断是否是子帧
  * 如果是子帧就去执行Mojo.bindInterface
  * 如果是父帧就去创建子帧并用MojoInterfaceInterceptor拦截子帧的Mojo.bindInterface到并将其句柄传递给父帧
  * 释放子帧
  * 使用filterInstalledApps去调用已经被释放但却依然还留有悬挂指针的render_frame_host_虚函数
## 漏洞利用
### 开启Mojo
上文中提到过chrome默认不能直接调用mojo，所以此处使用cve
2021-21224来配合开启mojo。通过分析可知mojoJS的开启与关闭主要由RenderFrameImpl类成员变量enabled_bindings_与IsMainFrame函数来决定
IsMainFrame函数的逻辑很简单就只是将一个类成员变量返回
而通过调试也可知当enabled_bindings_ & 2不为0时即可满足条件
也就是说此时只需要将enabled_bindings_修改为2，再将is_main_frame_修改为1即可满足条件开启mojo。而在一个页面中可能会存在多个frame，而这些frame所对应的RenderFrameImpl对象都存储在一个全局变量g_frame_map中
要查找到全局变量g_frame_map，就需要先获取到chrome.dll的基址，利用21224构造的地址泄露函数与读写原语，泄露window对象地址，再从window对象中获取到一个位于chrome.dll模块中的地址，再用该地址减去一定的偏移来得到chrome.dll模块基址，除此以外还可以用特征码查找的方式，这种方式兼容性会更好，但在我的环境下读写原语在进行频繁的读写操作时会产生异常发生崩溃，具体原因暂时未知，所以姑且使用减去固定偏移获取基址的办法。
之后由于无法直接通过g_frame_map符号在windbg中使用x来查找其地址，那就通过查找调用过该全局变量的函数来查找
之后在windbg中查找RenderFrame::ForEach并查看其汇编代码获取到g_frame_map地址为00007ffe`3d927888，用此值减去chrome基址得到偏移为0x7627888，只要使用chrome基址加0x7627888即可得到g_frame_map地址
g_frame_map变量8-16偏移处存放着一个链式结构，当只有一个frame时
创建sub frame后
而其对应的RenderFrameImpl对象保存在红线划出内存地址的0x28偏移处
再通过观察content::RenderFrameImpl::DidCreateScriptContext函数来获取相关变量在对象中的偏移，enabled_bindings_偏移为0x560
IsMainFrame函数中用到的have_context_变量偏移为0x88
将g_frame_map中保存的所有RenderFrameImpl对象相应偏移修改为对应的值即可。但要注意的是在我的漏洞环境（
81.0.4044.0）中，在获取成员变量enabled_bindings_时需要将g_frame_map中拿到的RenderFrameImpl对象地址加0x68再加enabled_bindings_所在偏移，而IsMainFrame中用到的成员变量就在g_frame_map中拿到的RenderFrameImpl对象的0x88偏移处。
### 内存回收
对于uaf漏洞利用的第一步肯定是将此内存进行回收，而进行内存回收的前提就是先需要知道被释放的render_frame_host_占多大内存，通过前面的调试分析得知render_frame_host_为RenderFrameHostImpl类实例，所以可以先对RenderFrameHostImpl构造函数下断，而实例大小从构造函数是看不出来的，但可以从调用该实例构造函数的函数中看到。通过kb栈回溯查看调用RenderFrameHostImpl构造函数的函数为RenderFrameHostFactory::Create
通过查看该函数可知render_frame_host_对象大小为0xC38字节
在知道了要回收的内存大小后就可以通过创建一系列的Blob来回收该内存
    var spray_buff = new ArrayBuffer(0xC38);
    var spray_view = new DataView(spray_buff);
    for(var i = 0; i  {
                    if (this.allocate.writePromise) {
                      this.allocate.writePromise.resolve(arg0);
                    }
                  }
                };
                this.allocate = allocate;
                this.ptr = new mojo.AssociatedInterfacePtrInfo();
                var progress_client_req = mojo.makeRequest(this.ptr);
                this.binding = new mojo.AssociatedBinding(
                  blink.mojom.ProgressClient, 
                  new ProgressClientImpl(), 
                  progress_client_req
                );
                return this;