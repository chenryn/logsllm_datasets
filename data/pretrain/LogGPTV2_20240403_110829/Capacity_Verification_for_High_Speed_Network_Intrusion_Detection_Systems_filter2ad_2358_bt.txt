and pij can ﬂuctuate with the operating conditions (e.g., network traﬃc). For
Performance Adaptation in Real-Time Intrusion Detection Systems
259
example, when an IDS is under “stress” (i.e., high speed and/or large volume
of audit data), mi becomes much larger and so does T (P). In overload or DoS
attacks, an attacker ﬁrst generates a lot of events (that may include “nuisance”
attacks) to overload the IDS, and then launches the intended attack [25,23], say
Aij. The overloaded IDS may be “dropping” audit data, missing key evidence,
and hence failing to detect attack Aij. Or its detection is too late (slow) to
prevent the damage of Aij. In either case, V(P) will likely decrease by Vij.
In these “stress” and “overload attack” situations, while it is unavoidable
that IDS performance will suﬀer (i.e., the intended (original) V(P) cannot be
guaranteed), it is desirable that a new optimal V(P) (i.e., the best value possible
under the new operating conditions) be provided. For example, instead of having
a high probability of missing a more important attack Aij, the IDS can decide not
to include the tasks for a less important attack Akl so that there will be suﬃcient
resources (queue space and service time) available for the tasks detecting Aij.
Decreasing V by Vkl rather than Vij is a better solution because Vkl  40 Mbps) and will drop packets. While Snort detected approx-
imately 10% (2 out of 20 exploit packets sent) of the WEB-IIS CMD.EXE attacks
that were launched during the ﬂooding, Bro detected 20% (4 out of 20) of them.
Both the IDSs were able to detect 100% of the exploit attempts when the traﬃc
load was low (< 10 Mbps). The exact IDS conﬁgurations, traﬃc conditions, and
attack strategies leading to these results are not very important. The point here
is that an IDS can be overloaded to drop packets. Unless it can detect such
conditions and quickly reconﬁgure appropriately, it can miss the critical attacks
(that can otherwise be detected) with high probability. Thus, instead of being
statically conﬁgured, a real-time IDS needs to provide performance adaptation
via dynamic reconﬁguration.
2 This is a single packet attack. The attacker sends a malicious GET request to a
Microsoft IIS Server. The request is as follows:
“GET/scripts/..%5c%5c../winnt/system32/cmd.exe?/c+dir”.
See http://www.cert.org/advisories/CA-2001-26.html for details.
3 See http://tcpreplay.sourceforge.net/ for details.
262
W. Lee et al.
2.5 Practical Considerations
We start by describing the guidelines for obtaining estimates for the various
parameters in our method. For rules derived from anomaly detection schemes,
βij and αij can be estimated using suitable training data sets. Misuse detection
rules for well deﬁned attacks will have well understood behavior, e.g., some may
even have βij = αij = 0. πi can be estimated on the basis of typical traﬃc
statistics, and can updated periodically on basis of traﬃc measurements. tij can
be measured by controlled experiments. The instantaneous values of mi reﬂect
the traﬃc mixture of the incoming packets. In practice, the mean value of mi
can be selected within a suitable time window. A site-speciﬁc risk analysis can
provide the initial pij values, which can then be updated according to traﬃc and
attack history. Scenario analysis (see Section 3.3) can use information on attacks
detected thus far to predict the likely forthcoming attack(s) Rij along with its
p(cid:2)
ij. We can use p(cid:2)
ij as the updated (posterior) probability in place of pij. Note
that as discussed in Section 2.3, the performance optimization problem allows
ranges in parameters, thus the parameters need not be measured in absolute
values. This relaxation should signiﬁcantly simplify the measurement tasks.
Estimating the costs Cβ
ij and Cα
ij also requires site-speciﬁc risk analysis. Al-
though it is diﬃcult to measure exact costs, we can still learn the relative or-
dering of intrusions in terms of their risks (or “damage cost”) [9,21,3]. One
needs to ﬁrst deﬁne a site-speciﬁc attack taxonomy. For example, attacks can be
ﬁrst categorized by results (e.g., root access, user access, denial-of-service (DoS),
and probing), then further by techniques (e.g., DoS by resource consumption or
crashing), and still further by targets (e.g., a server or a desktop) [15]. Then
knowledge about the intrusions (e.g., buﬀer-overﬂow is usually more damaging
than DoS) and assets (e.g., the same intrusion to a server is more damaging than
to a desktop) can be used to qualitatively measure the damage costs in relative
scales [21,15]. A false alarm cost can be the penalty if an automated response
is used. For example, if a normal user session is terminated, then the cost can
be the same as a DoS damage cost [15]. If an investigation is initiated, it can be
the labor cost involved (wasted). Again, we can deﬁne the site-speciﬁc relative
scales of false alarm costs. As discussion later in the paper will show, since the
main purpose of cost-beneﬁt analysis is to achieve performance adaptation un-
der resource constraint, such relative scales (not exact numbers) are suﬃcient for
determining which intrusion detection tasks should be given higher priorities.
One may argue that dealing with prior probabilities is always too hard (de-
spite our best eﬀort to simplify the matter), and instead of attempting to solve
the optimization problem, an IDS should just use some simple reconﬁguring
techniques. We note that such “simple” techniques can be derived from the op-
timization problem by simplifying certain parameters and computations. For
example, when stressed or overloaded, an IDS can cease to accept certain types
of audit data (e.g., icmp and udp), and only provide full analysis for a small
number of types of events (e.g., analyze telnet, ftp, and http only). In this
example, the IDS regards the analysis tasks for certain events as more important
than those for the others. Implicitly, the IDS has a ranking order of the values of
Performance Adaptation in Real-Time Intrusion Detection Systems
263
the analysis tasks. This IDS reconﬁguration is equivalent to solving Problem (5)
by using only the values (their rankings) and setting the time required for the
less important (to be excluded) events to an artiﬁcially large value (e.g., Dmax).
If these simple techniques seem to be adequate in practice4, what then is the
value of our elaborate analysis here? We believe that it is important to provide a
formal understanding of IDS performance analysis and adaptation, so that one
can follow the optimization principles discussed here to improve upon various
simple techniques to provide better IDS value. We also believe that measurement
techniques and tools will become available and matured, and the full potential
of optimization techniques will be realized.
3 Enabling Performance Adaptation in Real-Time IDS
In this section, we discuss how to enable real-time IDS to provide performance
adaptation. We describe prototype systems, and present experiment results.
An adaptive IDS can include multiple intrusion detection (ID) modules, per-
forming increasingly more complex and more time-consuming analysis, and shar-
ing the IDS workload. For example, a front-end module performs data gathering,
pre-processing (e.g., packet re-assembly), and as much of the detection work as
possible in real-time. A back-end module may not have stringent real-time re-
quirement because, for example, it uses pre-processed audit data (sent from the
front-end) to analyze attack trends. Its predictions on forthcoming attacks can
be used to help conﬁgure the IDS.
The front-end (real-time) module needs to provide performance adaptation.
Whenever it is stressed or overloaded, it computes a new optimal IDS con-
ﬁguration according to the new operation conditions (see Problem (5)). The
reconﬁguration deactivates some (less critical) tasks (e.g., port-scan analysis)
and/or cease to capture some events. These excluded tasks can be carried out
by the back-end if possible, for example, if they only require pre-processed audit
data and the front-end continues to capture and process the needed audit data.
We call the process of moving some analysis tasks from the front-end to the
back-end load-shedding. It essentially allocates the limited resources (i.e., buﬀer
space and service time) to the more critical tasks and events, thus ensuring that
the front-end module can provide optimal value while satisfying the constraint
T (P) ≤ Dmax. The manager needs to participate in monitoring the ID mod-
ules and initiating appropriate re-conﬁguration because the ID modules can be
under attacks (or even crashed) and thus may not be able to self-monitor and
self-reconﬁgure. An “active ﬁltering” module, such as a ﬁrewall, is desirable for
ﬁrst dropping the obvious oﬀending packets, and thus cutting down the data
volume to the ID modules. It can also be used as “admission control”, for exam-
ple, to slow down the data stream (e.g., hold and delay the packets) under some
extreme situations to help the ID modules keep up with the traﬃc.
A popular approach to manage IDS workload is to have several front-end
modules and use load-balancing to “split” the traﬃc [34]. Our research is com-
4 We have no evidence that this is indeed the case.
264
W. Lee et al.
plimentary to IDS load-balancing. First, performance adaptation is necessary