by setting the liveness-bits of all variables in 𝑆𝑟𝑐 to ⋆, and those
of all others variables to •.
Runs. We call a sequence of configurations 𝜋 ≜ Σ0Σ1 . . . Σ𝑛−1 a
run, if each consecutive pair of configurations is related by the
transition relation, i.e., if Σ𝑖 ⇝ Σ𝑖+1, for 𝑖 ∈ {0, . . . , 𝑛 − 2}. We
call Σ0 ≜ (𝑃, 𝜎0, 𝜃0, 0, 𝑡, Src) initial state, and require that 𝜃0 maps
all variables to •. Finally, for a run 𝜋 ≜ (𝑃, 𝜎0, 𝜃0, 𝑐0, 𝑡, Src) . . .
(𝑃, 𝜎𝑛−1, 𝜃𝑛−1, 𝑐𝑛−1, 𝑡, Src), we say that 𝜋 is a run of 𝑃 of length 𝑛
with respect to 𝑡 and Src and let store(𝜋, 𝑖) = 𝜎𝑖 and live(𝜋, 𝑖) ≜ 𝜃𝑖,
for 𝑖 ∈ {0, . . . , 𝑛 − 1}.
Example. Consider again Figure 2. The Figure depicts two runs 𝜋𝐿
and 𝜋𝑅 of length 3 with respect to initial cycle 1 and source {in} of
the program in Figure 1. Columns in and out show store(𝜋, 𝑖)(𝑖𝑛)
and store(𝜋, 𝑖)(𝑜𝑢𝑡), for 𝜋 ∈ {𝜋𝐿, 𝜋𝑅} and 𝑖 ∈ {1, 2}. Similarly,
columns in• and out• show live(𝜋, 𝑖)(in) and live(𝜋, 𝑖)(out), for
𝜋 ∈ {𝜋𝐿, 𝜋𝑅}, and 𝑖 ∈ {1, 2}. The Figure omits the initial state at
cycle 0, where all liveness-bits are set to •.
Flushed, Constant-Time, Public. For two runs 𝜋𝐿 and 𝜋𝑅 of
length 𝑛, we say that variable 𝑣 is flushed, if store(𝜋𝐿, 0)(𝑣) =
store(𝜋𝑅, 0)(𝑣), we call 𝑣 public, if store(𝜋𝐿, 𝑖)(𝑣) = store(𝜋𝑅, 𝑖)(𝑣),
for 𝑖 ∈ {0, . . . , 𝑛 − 1} and call 𝑣 constant-time, if live(𝜋𝐿, 𝑖)(𝑣) =
live(𝜋𝑅, 𝑖)(𝑣), for 𝑖 ∈ {0, . . . , 𝑛 − 1}.
Secrecy Assumptions. Secrecy assumptions A ≜ (Flush, Pub)
consists of a set of variables Flush ⊆ Vars that are assumed to
be flushed in the initial state, and a set of variables Pub ⊆ Vars,
that are assumed equal throughout. A pair of runs 𝜋𝐿 and 𝜋𝑅 of
length 𝑛, satisfy a set of assumptions A, if, for each 𝑣 ∈ Flush, 𝑣 is
flushed, and for each 𝑣 in Pub, 𝑣 is public. We describe how Xenon
synthesizes secrecy assumptions in § 4.
Constant-Time Execution. We now define constant-time execu-
tion with respect to a set of sinks Snk ⊆ Vars, sources Src, and
assumptions A. We say that a program 𝑃 is constant-time, if for
any initial cycle 𝑡 and any pair of runs 𝜋𝐿 and 𝜋𝑅 of 𝑃 with respect
to 𝑡 and Src of length 𝑛 that satisfy A, and any sink 𝑜 ∈ Snk, 𝑜 is
constant-time.
Example. Consider again Figure 2. If we assume that variables in
cycle 0 have the same value as in cycle 1, then out is flushed while in
is not. Neither in, nor out are public, but both are constant-time. As
out is constant-time in all runs, the program in Figure 1 is constant-
time with respect to the empty set of assumptions and sink {𝑜𝑢𝑡}. In
Figure 4, none of the variables are public or constant-time, however,
the program in Figure 3 can be shown to be constant-time with
Pub = {IF_pc, rst}.
3.2 Verifying Constant-Time Execution via
Horn Constraints
To verify constant-time execution, we mirror the formal definition
in a set of Horn clauses [24]—an intermediate language for verifi-
cation. We start with the naive, monolithic encoding and discuss
how to make it modular in § 3.3. At high level, the constraints
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea433init(𝑣𝑠𝐿, 𝑣𝑠𝑅) ∧ flush ∧ pub ⇒ inv(𝑣𝑠𝐿, 𝑣𝑠𝑅, 0, 𝑡)
(init)
to produce concrete counterexample traces, the necessary informa-
tion can often be recovered from the internal solver state.
(cid:19)
(cid:18)inv(𝑣𝑠𝐿, 𝑣𝑠𝑅, 𝑐, 𝑡) ∧ pub
∧ next(𝑣𝑠𝐿, 𝑣𝑠𝑅, 𝑣𝑠′
𝑅, 𝑡)
inv(𝑣𝑠𝐿, 𝑣𝑠𝑅, 𝑐, 𝑡) ∧ pub ⇒ 𝑜•
𝐿, 𝑣𝑠′
⇒ inv(𝑣𝑠′
𝐿, 𝑣𝑠′
𝑅, 𝑐 + 1, 𝑡) (cons)
𝐿 = 𝑜•
𝑅, for 𝑜 ∈ Snk
(ct)
Figure 7: Horn clause encoding of the verification conditions for
constant-time execution.
(1) issue a new live instruction at a non-deterministically chosen
initial cycle 𝑡, and
(2) ensure constant-time execution by verifying that the liveness-
bits for each sink are always the same, in any two runs.
The clauses—shown in Figure 7—encode verification conditions
over an inductive invariant inv(𝑣𝑠𝐿, 𝑣𝑠𝑅, 𝑐, 𝑡) of the product circuit,
where 𝑣𝑠 ranges over all variables in the circuit and their respec-
tive liveness bits, and 𝑐 and 𝑡 are the current and initial cycles,
respectively.
Initial States and Transition Relation. Formula init(𝑣𝑠𝐿, 𝑣𝑠𝑅)
describes the product circuit’s initial states and requires all liveness-
bits to be set to •. To ensure that the proof holds for any initial cycle,
init does not constrain 𝑡. Formula next(𝑣𝑠𝐿, 𝑣𝑠𝑅, 𝑣𝑠′
𝑅, 𝑡) encodes
the transition relation of the product circuit, where un-primed vari-
ables represent state before, and primed variables represent state
after the transition. Like ⇝, next sets liveness-bits of all sources
to ⋆ at clock cycle 𝑡. Importantly, constructing next requires inlin-
ing all modules and therefore can lead to large constraints that are
beyond the abilities of the solver.
Assumptions. For a set of assumptions A ≜ (Flush, Pub), we con-
struct formulas flush and pub, both of which require the variables
in their respective sets to be equal in the two runs. We let
𝐿, 𝑣𝑠′
flush ≜ (∧𝑥∈Flush 𝑥𝐿 = 𝑥𝑅) and pub ≜ (∧𝑥∈Pub 𝑥𝐿 = 𝑥𝑅) .
Horn Constraints & Solutions. We then require that the invari-
ant holds initially (init), assuming all variables in Flush and Pub
are equal in both runs; that the invariant is preserved under the
transition relation of the product circuit, assuming that public vari-
ables are equal in both runs (cons), and finally, that the liveness-bits
of any sink are the same in both runs (ct). These constraints can
then be passed to any of a vast array of existing Horn constraint
solvers [8, 34, 37, 44, 52, 55, 57] yielding a formula which, when
substituted for inv, makes all implications valid and thus proves
constant-time execution.
Proof Artifacts. To compute constant-time counterexamples and
synthesize secrecy assumptions upon a failed proof attempt, as
described in the next section, Xenon requires the solver to generate
the following artifacts:
(1) the set of variables which remained constant-time and public,
during the current failed proof attempt, and
(2) the order in which the remaining variables lost the respective
properties.
These artifacts can, for example, be extracted from a concrete coun-
terexample trace like Figure 4. However, even if the solver is unable
3.3 Finding Modular Invariants
Naively, constructing next requires all the code to be in a single mod-
ule. However, this can yield gigantic circuits whose Horn clauses
are too large to analyze efficiently. To avoid instantiating the entire
module at each usage site, Xenon constructs module summaries that
concisely describe the timing relevant properties of the module’s
input and output ports.
Per-Module Invariants and Summaries. Instead of a single whole
program invariant inv, the modular analysis constructs a per-module
invariant inv𝑚, and an additional summary sum𝑚, for each mod-
ule 𝑚. The summary only ranges over module inputs and out-
puts, and respective liveness-bits (io) and needs to include all in-
put/output behavior captured by the invariant, i.e., we add a clause:
inv𝑚(𝑣𝑠𝐿, 𝑣𝑠𝑅, 𝑡) ⇒ sum𝑚(𝑖𝑜𝐿, 𝑖𝑜𝑅, 𝑡) . The analysis produces the
same constraints as before, but now on a per-module basis, that is,
we require module invariants to hold on initial states (init), and be
preserved under the transition relation (cons), but, instead of using
the overall transition relation next we use a per-module transition
relation next𝑚. It may now happen that next𝑚 makes use of a mod-
ule 𝑛, but instead of inlining the transition relation of 𝑛 as before,
we substitute it by its module summary sum𝑛, thereby avoiding the
blowup in constraint size. Finally, we restrict sources and sinks to
occur at the top-level module, and add a clause requiring that any
sink has the same liveness-bits in both runs (ct). The summaries are
also used to modularize our assumption synthesis algorithm § 4.3,
which is crucial for our modular verification approach, as we will
discuss in § 7.
Solving Modularity Constraints. To solve the modular Horn con-
straints, the solver first computes an invariant for each module,
and then uses quantifier elimination [58] to project the module’s
behavior onto its inputs and outputs, which yields the summary.
Since a module’s summary may show up in another module’s tran-
sition relation and thereby influence its invariant, this yields an
interdependent constraint system, which we solve via a fix-point
iteration loop [24, 52].
4 COUNTEREXAMPLES & ASSUMPTION
SYNTHESIS
We now explain how Xenon uses the proof artifacts to help the
user understand and explicate secrecy assumptions when verifi-
cation fails. We first describe how Xenon analyzes the artifacts
from the failed proof attempt in order to compute a counterexample
consisting of the set of variables that—according to the informa-
tion communicated by the prover—lost the constant-time property
first (§ 4.1). Next, we discuss how Xenon uses the counterexample
to synthesize a set of secrecy assumptions that eliminate the root
cause of the verification failure (§ 4.2). This is done by computing a
blame-set that contains the variables that likely caused the loss of
constant-time for the variables in the counterexample via a control
dependency. This blame set is then used to encode an optimization
problem whose solution determines a minimal set of assumptions
required to remove the timing violation. Finally, we briefly discuss
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea434how Xenon uses module summaries to speed up counterexample
generation and secrecy assumption synthesis (§ 4.3).
4.1 Computing Counterexamples
Dependency Graph. To compute the counterexample from a failed
proof attempt, Xenon first creates a dependency graph 𝐺 ≜ (𝑉 , 𝐷 ∪
𝐶) which encodes data- and control-dependencies between program
variables. 𝐺 consists of
▶ variables 𝑉 ⊆ Vars,
▶ data-dependencies 𝐷 ⊆ (Vars×Vars), where (𝑣, 𝑤) ∈ 𝐷 if 𝑣’s
value is used to compute 𝑤 directly through an assignment,
and
▶ control-dependencies 𝐶 ⊆ (Vars× Vars) where (𝑣, 𝑤) ∈ 𝐶, if
𝑣’s value is used indirectly, i.e., 𝑤’s value is computed under
a branch whose condition depends on 𝑣.
Variable-Time Map. Next, Xenon extracts an artifact from the
failed proof attempt: a partial map varTime ∈ (Vars ⇀ N) which
records the temporal order in which variables started to exhibit
timing variability. Importantly, if for some 𝑣 varTime is undefined
(varTime(𝑣) = ⊥), 𝑣 was constant-time throughout the failed proof
attempt. For any other variables 𝑣 and 𝑤, if varTime(𝑣)  varTime(𝑣). Intuitively, if variable
𝑤 has started to exhibit timing variability after variable 𝑣, it cannot
be the cause for 𝑣 losing the constant-time property. Finally, Xenon
removes all nodes that cannot reach a sink node using the remaining
edges. This leaves us with a set of variables Cex ⊆ Vars without
incoming edges, which we present—as counterexample—to the user.
We now define the reduced graph in more detail.
Reachability. For dependency graph 𝐺 ≜ (𝑉 , 𝐷 ∪ 𝐶) and nodes
𝑣, 𝑤 ∈ 𝑉 we write 𝑣 → 𝑤, if (𝑣, 𝑤) ∈ (𝐷 ∪ 𝐶), 𝑣 →𝑛 𝑤, if there
is a sequence 𝑣0𝑣1 . . . 𝑣𝑛−1, such that 𝑣0 = 𝑣 and 𝑣𝑛−1 = 𝑤, and
𝑣𝑖 → 𝑣𝑖+1 for 𝑖 ∈ {0, . . . , 𝑛 − 2}. Finally, we say 𝑤 is reachable from
𝑣, if there exists 𝑛 such that 𝑣 →𝑛 𝑤.
Reduced Graph. For a data-flow graph 𝐺 ≜ (𝑉 , 𝐷 ∪ 𝐶), and map
varTime, we define the reduced graph with respect to varTime as
the largest subgraph 𝐺′ ≜ (𝑉 ′, 𝐷′ ∪ 𝐶′) such that 𝑉 ′ ⊆ 𝑉 , 𝐷′ ⊆ 𝐷,
𝐶′ ⊆ 𝐶 and
(1) No node is constant-time, i.e., for all 𝑣 ∈ 𝑉 ′, varTime(𝑣) ≠ ⊥.
(2) All edges respect the causal order given by varTime, i.e., for
all (𝑣, 𝑤) ∈ (𝐷′ ∪ 𝐶′), we have varTime(𝑣) ≤ varTime(𝑤).
(3) All nodes can reach a sink, i.e., for all 𝑣 ∈ 𝑉 ′, there is 𝑜 ∈ Snk
such that 𝑜 is reachable from 𝑣.
3More formally, for variables 𝑣, 𝑤 if varTime(𝑣) < varTime(𝑤), then there exist
two runs 𝜋𝐿 and 𝜋𝑅 of some length 𝑛, and two numbers 0 ≤ 𝑖, 𝑗 < 𝑛 such that
𝑖 is the smallest number such that live(𝜋𝐿, 𝑖)(𝑣) ≠ live(𝜋𝑅, 𝑖)(𝑣) and similarly 𝑗
is the smallest number such that live(𝜋𝐿, 𝑗)(𝑤) ≠ live(𝜋𝑅, 𝑗)(𝑤) and 𝑖 < 𝑗. This
information can e.g., be extracted from a concrete counterexample trace, like the one
shown in Figure 4.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
assign ID_rt = ID_instr [ 20 : 16 ];
rom32 IMEM ( IF_pc , IF_instr );
always @(*)
stall = ( ID_rt == EX_rt );
always @( posedge clk ) begin
if ( Stall == 1) begin
ID_instr
EX_rt
<= ID_instr ;
<= EX_rt ;
end else begin
ID_instr
EX_rt
<= IF_instr ;
<= ID_rt ;
end
end
Figure 8: Simplified MIPS Pipeline Fragment in Verilog.
For variable 𝑣, and graph 𝐺 ≜ (𝑉 , 𝐷 ∪ 𝐶), let pre(𝑣, 𝐺) be the set of
its immediate predecessors in 𝐺, that is
pre(𝑣, 𝐺) ≜ {𝑤 | (𝑤, 𝑣) ∈ (𝐷 ∪ 𝐶)}.
We define the counterexample Cex of a graph 𝐺 with map varTime
as the set of nodes in the reduced graph 𝐺′ (wrt. varTime), that
have no predecessors, i.e., Cex ≜ {𝑣 | pre(𝑣, 𝐺′) = ∅} .
Example: Simplified Pipeline. The code in Figure 8 shows a sim-
plified version of the pipelined processor from Figure 3. Like in
Figure 3, the pipeline either stalls (Lines 10 and 11) if flag Stall
is set (Line 9), or else forwards values to the next stage (Lines 13
and 14). To avoid a write-after-write data-hazard, the Stall flag is
set, if the instructions in the execute and decode stage have the same
target registers (Line 6). The target register is calculated from the
current instruction (Line 1), and the instruction is, in turn, fetched
from memory using the current program counter (Line 3). Note
the cyclic dependency between ID_instr and Stall that turns
comprehending the root cause into a “chicken-and-egg” problem.
Dependency Graph. To check if the pipeline fragment executes
in constant-time, we mark IF_pc as source, and ID_instr as sink
and run Xenon. Since the pipeline is variable-time, the verification
fails. To compute a minimal counterexample, Xenon creates the
dependency graph shown in Figure 9a. Each node is annotated with
information extracted from the failed proof attempt: the node is
labeled with its value under varTime, and is marked with (✓) if
the variable remained constant-time throughout the proof attempt
and (X) otherwise. Solid edges represent data- and dashed edges
represent control-dependencies.
Reduced Dependency Graph. Figure 9b shows the dependency
graph after removing all constant-time nodes and edges that vio-
late the causal ordering. Xenon erases all nodes that cannot reach
sink ID_instr. This only leaves ID_instr which we return as coun-
terexample. The ordering induced by varTime allowed us to break
the cyclic dependency between variables Stall and ID_instr,
thereby resolving the chicken-and-egg problem.
Remark. In case the proof artifact only partially resolves the cyclic
dependencies, that is, varTime only defines a partial order over
non-constant-time variables, the reduced graph may still contain
cycles, and therefore there may be no nodes without predecessor.
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea435Stall (X, 3)
Stall (X, 3)
IF_inst (✓, ⊥)
IF_pc (✓, ⊥)
ID_instr (X, 1)
EX_rt (X, 3)
ID_instr (X, 1)
EX_rt (X, 3)
ID_rt (X, 2)
ID_rt (X, 2)
(a) Dependency Graph.
(b) Dependency Graph after eliminating
constant-time nodes and edges violating the
order given by varTime.
Summary Graph
IF_instr (✓, ⊥)
ID_instr (X, 1)
Stall (X, 3)
Stall (X, 3)
IF_inst (✓, ⊥)
IF_pc (✓, ⊥)
ID_instr (X, 1)
EX_rt (X, 3)
ID_rt (X, 2)
(c) Dependency Graph with Module Summary.
Figure 9: Figure 9a shows the dependency graph for Figure 8. Data-dependencies are shown as solid edges, and control-dependencies are shown
dashed. Each node is labeled with its varTime-value and marked (✓) if the variable remained constant-time throughout the proof attempt and
(X) otherwise. Figure 9b shows the dependency graph after eliminating constant-time nodes from Figure 9a, and removing edges that violate
the variable-time map. Removing the edge between Stall and ID_instr breaks the cyclic dependency in the original graph. Figure 9c shows
the variable dependency graph with a summary graph extracted from the module summary.
We can however still apply our technique by computing the graph’s
strongly connected components and including all nodes in the
respective component in the counterexample.
4.2 Assumption Synthesis