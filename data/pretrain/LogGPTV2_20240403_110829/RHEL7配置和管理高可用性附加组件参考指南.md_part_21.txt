::: section
::: titlepage
## []{#ch-advancedresource-HAAR.html#s2-containerresource-HAAR}在捆绑包中配置 Pacemaker 资源 {.title}
:::
捆绑包可以选择性地包含一个 Pacemaker
集群资源。与捆绑包中未包含的资源一样，集群资源可能定义有操作、实例属性和元数据属性。如果捆绑包包含资源，容器镜像必须包含
Pacemaker Remote 守护进程，并且必须在捆绑包中配置
`ip-range -start`{.literal} 或 control-port``{=html}。Pacemaker
会为连接创建一个隐式 `ocf:pacemaker:remote`{.literal} 资源，在容器内启动
Pacemaker Remote，并通过 Pacemaker Remote
监控和管理资源。如果捆绑包有多个容器实例（副本），Pacemaker
资源将充当隐式克隆，如果捆绑包将 `提升-max`{.literal}
选项配置为大于零，则该克隆将是一个多状态克隆。
您可以通过为命令指定 `bundle`{.literal} 参数以及包含该资源的捆绑包
ID，使用 [**pcs resource create**]{.command} 命令在 Pacemaker
捆绑包中创建资源。有关创建包含资源的 Pacemaker 捆绑包的示例，请参阅
["Pacemaker
捆绑包配置示例"一节](#ch-advancedresource-HAAR.html#s2-containerexample-HAAR "Pacemaker 捆绑包配置示例"){.xref}。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
包含资源的捆绑包中的容器必须具有可访问的网络环境，以便集群节点上的
Pacemaker 可以与容器内的 Pacemaker 远程联系。例如，docker
`选项`{.option} `--net=none`{.literal}
不应用于资源。默认值（使用容器内的不同网络空间）与
`ip-range-start`{.literal} 参数相结合。如果使用 `docker`{.option} 选项
`--net=host`{.literal}
（使容器共享主机的网络空间），则应为每个捆绑包指定一个唯一的
`control-port`{.literal} 参数。任何防火墙都必须允许访问
`control-port`{.literal}。
:::
::: section
::: titlepage
### []{#ch-advancedresource-HAAR.html#s3-bundlenodeattributes-HAAR}节点属性和捆绑包资源 {.title}
:::
如果捆绑包包含集群资源，则资源代理可能需要设置节点属性，如 master
分数。但是，对于容器而言，哪一个节点应该获取 属性并不明显。
如果容器使用的共享存储相同，无论容器托管在哪个节点上，都可在捆绑包节点上使用
master
分数。另一方面，如果容器使用从底层主机导出的存储，那么在底层主机上使用
master 分数可能更为适当。由于这取决于特定的情况，因此
`container-attribute-target`{.literal} 资源 metadata
属性允许用户指定要使用的方法。如果设置为
`host`{.literal}，则在底层主机上检查用户定义的节点属性。如果是任何其他节点，则使用本地节点（本例中为捆绑包节点）。这个行为只适用于用户定义的属性；集群总是检查本地节点是否有集群定义的属性，如
`#uname`{.literal}。
如果将 `container-attribute-target`{.literal} 设置为
`host`{.literal}，集群会将额外的环境变量传递给资源代理，以便它能够适当地设置节点属性。
:::
::: section
::: titlepage
### []{#ch-advancedresource-HAAR.html#s3-bundlemetaattributes-HAAR}元数据属性和捆绑包资源 {.title}
:::
捆绑包上设置的任何元数据属性都将由捆绑包中包含的资源继承，以及 Pacemaker
为捆绑包创建的任何资源。这包括
`优先级`{.literal}、target`-role`{.literal} 和 `is-managed`{.literal}
等选项。
:::
:::
::: section
::: titlepage
## []{#ch-advancedresource-HAAR.html#s2-containerlimits-HAAR}Pacemaker 捆绑包的限制 {.title}
:::
Pacemaker 捆绑包在以下限制下运行：
::: itemizedlist
-   捆绑包不能包含在组中，或者通过 [**pcs**]{.command}
    命令显式克隆。这包括捆绑包包含的资源，以及 Pacemaker
    为捆绑包隐式创建的任何资源。但请注意，如果捆绑包配置了大于一
    `的副本`{.literal} 值，则捆绑包的行为就像是一个克隆一样。
-   当捆绑包不是非受管或集群处于维护模式时重启 Pacemaker
    可能会导致捆绑包失败。
-   捆绑包没有实例属性、使用属性或操作，尽管捆绑包中包含的资源可能有它们。
-   只有捆绑包使用不同的 `control-port`{.literal}
    时，包含资源的捆绑包才能在 Pacemaker 远程节点上运行。
:::
:::
::: section
::: titlepage
## []{#ch-advancedresource-HAAR.html#s2-containerexample-HAAR}Pacemaker 捆绑包配置示例 {.title}
:::
以下示例创建一个 Pacemaker `捆绑包`{.literal} 资源，其捆绑包 ID 为
`httpd-bundle`{.literal}，其中包含资源 ID 为 `httpd`{.literal} 的
`ocf:heartbeat:apache`{.literal} 资源。
此流程需要以下先决条件配置：
::: itemizedlist
-   在群集的每个节点上安装并启用了 Docker。
-   现有 Docker 镜像名为 `pcmktest:http`{.literal}
-   容器镜像包括 Pacemaker 远程守护进程。
-   容器镜像包含已配置的 Apache Web 服务器。
-   集群中的每个节点都有目录
    `/var/local/containers/httpd-bundle-0`{.filename}、`/var/local/containers/httpd-bundle-1`{.filename}
    和 `/var/local/containers/httpd-bundle-2`{.filename}，其中包含 web
    服务器 root 的 `index.html`{.literal}
    文件。在生产中，更有可能使用一个共享的文档根目录，但示例中，此配置允许您使每个主机上的
    `index.html`{.literal} 文件与众不同，以便您可以连接到 Web
    服务器并验证是否提供了 `index.html`{.literal} 文件。
:::
此流程为 Pacemaker 捆绑包配置以下参数：
::: itemizedlist
-   捆绑包 ID 是 `httpd-bundle`{.literal}。
-   之前配置的 Docker 容器镜像为 `pcmktest:http`{.literal}。
-   本例将启动三个容器实例：
-   本例会将命令行选项 `--log-driver=journald`{.option} 传递给 [**docker
    run**]{.command}
    命令。此参数不是必需的，但用于演示如何将额外选项传递给
    [**docker**]{.command} 命令。值为 `--log-driver=journald`{.option}
    表示容器内的系统日志将记录在底层主机的 `systemd`{.literal} 日志中。
-   Pacemaker 将创建三个连续隐式 `ocf:heartbeat:IPaddr2`{.literal}
    资源，每个容器镜像一个，从 IP 地址 192.168.122.131 开始。
-   IP 地址在主机接口 eth0 上创建。
-   IP 地址使用 CIDR 子网掩码 24 创建。
-   这个示例创建了一个端口映射 ID `http-port`{.literal} ；到容器分配的
    IP 地址上的端口 80 的连接将转发到容器网络。
-   本例创建存储映射 ID `httpd-root`{.literal}。对于这个存储映射：
    ::: itemizedlist
    -   `source-dir-root`{.literal} 的值是
        `/var/local/containers`{.filename}，它使用每个容器实例主机上的不同子目录指定主机文件系统上的路径的开头。
    -   `target-dir`{.literal} 的值是
        `/var/www/html`{.filename}，它指定要映射主机存储的容器中的路径名称。
    -   在映射存储时，将使用文件系统 `rw`{.literal} 挂载选项。
    -   由于此示例容器包含一个资源，Pacemaker 将自动在容器中映射
        `source-dir=/etc/pacemaker/authkey`{.literal}
        等效项，因此您不需要在存储映射中指定该路径。
    :::
:::
在本例中，现有集群配置被放入名为 `temp-cib.xml`{.filename}
的临时文件中，然后复制到名为 `temp-cib.xml.deltasrc`{.filename}
的文件中。`对集群配置的所有修改都对tmp-cib.xml`{.filename} 文件进行。当
udpates 完成后，这个过程使用 [**pcs cluster cib-push 命令的
`diff-against`{.option}** ]{.command}
选项，以便只有配置文件的更新推送到活动的配置文件。
``` screen
# pcs cluster cib tmp-cib.xml
# cp tmp-cib.xml tmp-cib.xml.deltasrc
# pcs -f tmp.cib.xml resource bundle create httpd-bundle \
container docker image=pcmktest:http replicas=3 \
options=--log-driver=journald \
network ip-range-start=192.168.122.131 host-interface=eth0 \
host-netmask=24 port-map id=httpd-port port=80 \
storage-map id=httpd-root source-dir-root=/var/local/containers \
target-dir=/var/www/html options=rw \
# pcs -f tmp-cib.xml resource create httpd ocf:heartbeat:apache \
statusurl=http://localhost/server-status bundle httpd-bundle
# pcs cluster cib-push tmp-cib.xml diff-against=tmp-cib.xml.deltasrc
```
:::
:::
::: section
::: titlepage
# []{#ch-advancedresource-HAAR.html#s1-utilization-HAAR}使用和放置策略 {.title}
:::
[]{#ch-advancedresource-HAAR.html#idm140680239393488
.indexterm}[]{#ch-advancedresource-HAAR.html#idm140680339689200
.indexterm}
Pacemaker
根据资源分配分数来决定在每个节点上放置资源的位置。资源将分配给资源分数最高的节点。此分配分数源自因素的组合，包括
`资源限制、资源粘性`{.literal}
设置、各个节点上的资源以前的故障历史记录以及每个节点的利用率。
如果所有节点上的资源分配分数相等，默认的放置策略Pacemaker
将选择一个分配的资源最少的节点来平衡负载。如果每个节点中的资源数量相等，则会选择
CIB 中列出的第一个有资格的节点来运行该资源。
但通常不同的资源使用会对节点容量有很大不同（比如内存或者
I/O）。您始终无法通过只考虑分配给节点的资源数量来平衡负载。另外，如果将资源设置为其合并要求超过提供容量，则可能无法完全启动，或者可能会以降低性能运行。要考虑以上因素，Pacemaker
允许您配置以下组件：
::: itemizedlist
-   特定节点提供的能力
-   特定资源需要的容量
-   资源放置的整体策略
:::
以下小节描述了如何配置这些组件。
::: section
::: titlepage
## []{#ch-advancedresource-HAAR.html#s2-utilizationattributes-HAAR}利用率属性 {.title}
:::
*要配置节点提供或需要资源的容量，您可以对节点和资源使用属性*。您可以通过为资源设置使用变量，并将值分配给该变量以指示资源需要，然后为节点设置相同的使用变量，并为该变量分配一个值来指示节点提供的内容。
您可以根据喜好命名使用属性，并根据您的配置定义名称和值对。使用属性的值必须是整数。
从 Red Hat Enterprise Linux 7.3 开始，您可以使用 [**pcs**]{.command}
命令设置使用属性。
以下示例为两个节点配置 CPU 容量的使用属性，命名属性
`cpu`{.literal}。它还配置 RAM 容量的使用属性，命名属性
`内存`{.literal}。在本例中：
::: itemizedlist
-   节点 1 定义为提供 2 个 CPU 和 2048 RAM
-   节点 2 定义为提供 4 个 CPU 和 2048 RAM
:::
``` screen
# pcs node utilization node1 cpu=2 memory=2048
# pcs node utilization node2 cpu=4 memory=2048
```
以下示例指定三个不同资源需要的相同的使用属性。在本例中：
::: itemizedlist
-   资源 `dummy-small`{.literal} 需要 1 个 CPU，RAM 容量为 1024
-   资源 `dummy-medium`{.literal} 需要 2 个 CPU，2048 RAM
-   资源 `dummy-large`{.literal} 需要 1 个 CPU 和 3072 RAM
:::
``` screen
# pcs resource utilization dummy-small cpu=1 memory=1024
# pcs resource utilization dummy-medium cpu=2 memory=2048
# pcs resource utilization dummy-large cpu=3 memory=3072
```
如果节点有足够的可用容量以满足资源的要求，则节点被视为有资格获得资源。
:::
::: section
::: titlepage
## []{#ch-advancedresource-HAAR.html#s2-placementstrategy-HAAR}放置策略 {.title}
:::
在配置了节点提供的容量以及资源需要的容量后，您需要设置
`placement-strategy`{.literal}
集群属性，否则容量配置无效。有关设置集群属性的详情请参考 [第 12 章
*Pacemaker
集群属性*](#ch-clusteropts-HAAR.html "第 12 章 Pacemaker 集群属性"){.xref}。
`placement-strategy`{.literal} 集群属性有四个值：
::: itemizedlist
-   `默认值`{.literal} -
    根本不考虑使用值。根据分配分数分配资源。如果分数相等，则在节点间平均分配资源。
-   `利用率`{.literal} -
    只有在决定节点是否被视为有资格时才会考虑使用值（即，它是否有足够的可用容量来满足资源的要求）。负载均衡仍会根据分配给节点的资源数量进行。
-   `balance -`{.literal}
    在决定节点是否有资格提供资源以及负载平衡时，会考虑使用值，因此会尝试以优化资源性能的方式分散资源。
-   `minimal`{.literal} -
    只有在决定节点是否有资格为资源时才会考虑使用值。对于负载平衡，会尝试尽可能将资源集中到几个节点上，从而在剩余的节点上启用以实现节电的目的。
:::
以下示例命令将 `placement-strategy`{.literal} 的值设置为
`balanced`{.literal}。运行此命令后，Pacemaker
会确保在整个集群中平均分配来自您的资源负载，而无需使用复杂的托管限制集合。
``` screen
# pcs property set placement-strategy=balanced
```
:::
::: section
::: titlepage
## []{#ch-advancedresource-HAAR.html#s2-resourceallocation-HAAR}资源分配 {.title}
:::