tized time of performing the integrity check (and a restore
only when needed) is lower than the one that would be taken
by always restoring the partition. However, if a partition is
modi(cid:12)ed often, it becomes more eﬃcient to always overwrite
its content, skipping the integrity check. This last observa-
tion motivated us to use two diﬀerent strategies when en-
suring that both system and user partitions are reverted to
a clean state before starting the analysis of a given app.
A functionality already present in an unmodi(cid:12)ed Android
device is that the \integrity check" of the system partitions
are always performed at boot time: each system partition
contains code that, as one of its tasks, performs an integrity
check on the content of the next partition. That is, partition
S1 checks the integrity of S2, S2 checks S3, and so on. In
other words, as we will discuss in the next section, the boot-
strapping and kernel code contained in the system partitions
already implements several mechanisms to maintain a chain
of trust.
Based on this observation, BareDroid restores only S1
(the root of the chain of trust), and the code contained in
every partition of the S1 ! : : : ! Sn chain will then verify
the integrity of the other partitions.
Restoring User Partitions. User partitions are often
modi(cid:12)ed by (both benign and malicious) Android apps. For
this reason, the technique adopted for system partitions is
ineﬃcient, since the integrity check would fail often. A more
eﬃcient solution is to skip the integrity check and directly
restore the user partitions before the analysis of each app.
Similarly to the previous case, restoring all user partitions
is conceptually straightforward: one could just fully rewrite
their content after the analysis of each application. However,
this option is not eﬃcient, especially because, depending on
the device, the user partitions might be quite large (in some
cases, up to few GBs).
To restore user partitions eﬃciently, we devised the fol-
lowing technique. For each user partition Ui, BareDroid
′
maintains three diﬀerent copies: the two working copies U
i ,
′′
i , and the clean copy ^Ui. The two working copies are used
U
′
i is used to analyze the given
as follows. While partition U
′′
to
application, a background thread restores partition U
i
its clean state (starting from a clean copy, ^Ui). Then, when
′′
the analysis of an application is over, the role of U
′′
i
is swapped: the partition U
is used to perform the analysis
i
of the next application, while, in the meantime, the back-
ground thread restores U
′
i to its clean state.
′
i and U
It is important to observe that, in principle, the integrity
of the clean copy of each userdata partition, ^Ui, needs to be
′′
veri(cid:12)ed before being used to restore U
i . In fact, even if
there are no incentives for doing so, a malicious application
that speci(cid:12)cally targets our infrastructure could modify ^Ui,
and this could aﬀect all subsequent applications’ analysis. In
this case, we ensure the integrity of this partition by relying
on a kernel-level partition lockdown.
′
i or U
Kernel-level Partition Lockdown. We rely on a kernel-
level mechanism (as discussed in the next section, in our
current implementation we rely on SELinux) that ensures
that the permissions associated to the ^Ui partition are set
as read-only. This way, all write attempts to ^Ui are blocked.
Clearly, for this mechanism to be eﬀective, the assumption
we made when discussing our threat model needs to hold.
However, for the sake of completeness, in Section 6.2 we
discuss several strategies for those situations in which one
cannot assume to rely on such kernel-level mechanism. Fi-
nally, we note that, in principle, we could have applied the
same protection mechanism for the system partitions as well.
Nonetheless, we opted for not doing so: we believe that if a
malicious application is able to successfully modify the sys-
tem partition on a user’s mobile device, it should have the
same eﬀect on BareDroid, so that the analysis result re-
(cid:13)ects the behavior of the malicious app accurately. Also, our
system relies on a very eﬃcient mechanism to perform the
integrity check of the system partition, and thus the bene(cid:12)t
of avoiding performing an integrity check is negligible.
4.
IMPLEMENTATION
In this section we discuss many implementation details
related to our system. First, we provide some technical de-
tails on how the boot process and the chain of trust are
implemented in Android. Then, we will discuss the details
related to how the system and userdata partitions are re-
stored, how their integrity is veri(cid:12)ed, and how modi(cid:12)cations
are prevented. Finally, we discuss several aspects and techni-
cal details on how we used BareDroid to build an in-house
cloud of Android devices, or a phone cloud.
4.1 Android Background
4.1.1 Android Partitions
Android uses several partitions to organize (cid:12)les and folders
on a device. Each of these partitions plays a diﬀerent role
in the functionality of the device. The main partitions are
the following (additional non-standard partitions can also
be present depending on the phone’s model):
(cid:15) aboot:
it contains the bootloader. The bootloader is
the software component that is in charge of starting the
boot process of the device. The bootloader is usually
written by hardware vendors and typically starts the
execution of the code in either the boot or recovery
partitions (letting the user choose upon boot);
(cid:15) boot:
it enables the phone to boot.
It includes the
kernel and the ramdisk;
(cid:15) recovery: it can be considered as an alternative boot
partition that lets the user boot the device into a recov-
ery console to perform advanced recovery and mainte-
nance operations on it;
(cid:15) system:
it contains the entire operating system, in-
cluding the kernel, the Android framework and user
interface, as well as all the system applications that
come pre-installed on the device;
(cid:15) userdata: it contains all user’s data, such as user con-
tacts, messages, settings, and user-installed applica-
tions;
(cid:15) misc:
it contains miscellaneous system settings (e.g.,
the OEM lock/unlock switch). Conceptually, the con-
tent of this partition can be viewed as a low-level con-
(cid:12)guration (cid:12)le for all components involved in the boot-
ing process.
4.1.2 Android Boot Process and Chain of Trust
We now describe the high-level steps that constitute the
boot process in Android. The (cid:12)rst step of the Android boot
process is the execution of the Boot ROM code, which then
executes the bootloader in the aboot partition. The boot-
loader is a special program (separated from the Linux kernel)
that is used to properly initialize the memory components
and load the kernel to RAM. By default, the bootloader
veri(cid:12)es that the contents of the boot and recovery parti-
tions have been signed with one of the keys contained in
the embedded keystore (e.g., OEM key). For verifying boot
and recovery partitions, the bootloader attempts to verify
the boot partition using the OEM key (cid:12)rst and try other
possible keys only if this veri(cid:12)cation fails.
Since BareDroid relies on a custom boot partition (to
specify a proper SELinux policy) and on a custom recovery
partition (that is in charge of swapping the role of the two
copies of the userdata partitions) the bootloader tries the
veri(cid:12)cation using the certi(cid:12)cate embedded in the partition
signature.
Typically, the execution moves from the bootloader to the
boot partition. However, by pressing a speci(cid:12)c combination
of buttons during the boot (i.e., the power button together
with the \Volume Up" button), a user can access to a boot
menu that allows to start the device in \recovery mode",
which executes the content of the recovery partition, and to
modify the content of the diﬀerent partitions using the USB
connection. In addition, in most of the devices, by pressing a
speci(cid:12)c combination of buttons for a few seconds, a user can
\hard-reboot" a device (i.e., force the hardware to reboot,
independently from the status of the running software).
During the execution of boot partition’s content, the ker-
nel is responsible for setting up the veri(cid:12)cation of the system
partition. Due to its large size, the system partition typi-
cally cannot be veri(cid:12)ed in the same way as the previous
parts, but must instead be veri(cid:12)ed as it is \being accessed"
through the dm-verity kernel mechanism1. dm-verity is a
kernel driver that veri(cid:12)es each block read from the system
partition against a hash tree created during the setup phase.
The root hash is signed with a certi(cid:12)cate stored in the boot
image ramdisk. Note that this certi(cid:12)cate can be trusted
since it is veri(cid:12)ed by the bootloader, as described above.
When a dm-verity error is detected for a given block, an
I/O error is raised and the block with the unexpected con-
tent is made inaccessible to user-space applications. More-
over, in this case, the device must be rebooted, and dm-
verity must be started in logging mode during all subsequent
restarts until any of the veri(cid:12)ed partitions is re-(cid:13)ashed.
Through the adoption of dm-verity, one can be assured that
the system partition can never be changed (or re-mounted
in read/write mode), because these operations would change
the superblock used to calculate the hash. For this reason,
BareDroid uses the same mechanism to establish a chain
of trust.
4.2 Restoring System Partitions
As we mentioned, we extensively use the dm-verity kernel-
level mechanism to ensure that, at the beginning of the boot
process, the system partition has not been tampered with
during the analysis of a previous application. However, ac-
1https://source.android.com/devices/tech/security/
veri(cid:12)edboot/index.html
cording to our threat model an application could get root
access and compromise the kernel. So, at least in principle,
it might have a way to tamper with the dm-verity process
itself. For this reason, just before the analysis of each ap-
plication, BareDroid overwrites the content of the boot
(that contains the implementation of the dm-verity mecha-
nism) and the recovery partitions. This ensures that, at
the beginning of each analysis, the system can rely on a
non-compromised dm-verity mechanism (which we use as
the root of our chain of trust), and it can then be used to
determine whether the system partition has been tampered
with (and thus should be re-(cid:13)ashed). Moreover, note that
this is eﬃcient because both these partitions are quite small.
4.3 Restoring User Partitions
As mentioned in the previous section, restoring the full
userdata partition before each application analysis is not
eﬃcient enough, the reason being the large size of these par-
titions (on the 16GB model of the Nexus 5 device, the user-
data partition size is about (cid:24)13GB).
Instead, to speed up the restore process, BareDroid
maintains three versions of the userdata partition (as ex-
plained in Section 3.3). One of them, userdata copy acts
as a clean snapshot of the partition’s content. The other
two, userdata1 and userdata2 play a diﬀerent role for each
analysis: when userdata1 is used for the analysis of the cur-
rent application, a background thread restores the userdata2
partition by using the userdata copy clean snapshot. For the
analysis of the next application, the roles of the two parti-
tions are swapped: userdata2 is used for the analysis, while
the background thread restores userdata1. As will be dis-
cussed in Section 5, this mechanism signi(cid:12)cantly improves
the overall overhead of the restoring process.
4.4 Kernel-level Partition Lockdown
Although the mechanism described in the previous sec-
tion signi(cid:12)cantly improves the performance of the restoring
phase, a malicious application could tamper with the user-
data copy partition to indirectly aﬀect the analysis of the
subsequent applications. In fact, while this partition is ini-
tially mounted as read-only, a malicious application could
simply re-mount it with read/write permission and modify
it.
To mitigate the risk of the attacks described above, Bare-
Droid leverages the use of SEAndroid [29]. SEAndroid
is a project useful to implement a mandatory access con-
trol (MAC) model in Android, by using SELinux to enforce
kernel-level MAC. SELinux policies are expressed at the level
of security contexts. SELinux requires a security context to
be associated with every process (or subject) and resource
(or object), which is used to decide whether access should
be allowed or not.
BareDroid uses a modi(cid:12)ed version of the AOSP SELinux
policy to protect the integrity of (cid:12)les in the userdata copy
partition. Our policy is designed to specify which processes
can mount and re-mount the partition. In our case, we spec-
i(cid:12)ed BareDroid’s update process as the only process that
has read access and can re-mount the userdata copy parti-
tion. Beyond that, writing to block devices, raw I/O, and
mknod() are also locked down.
4.5 Phone Cloud
In the previous sections we have introduced all the tech-
Figure 1: Architectural overview of the phone cloud
infrastructure.
nical details to enable the use of BareDroid on a device.
However, the device represents just one of the required com-
ponents to develop a bare-metal analysis infrastructure. For
this work, we built an infrastructure (in fact, a cluster of
phones) that is able to manage and coordinate in an auto-
matic way all the steps described in Section 3.3. Our in-
frastructure currently comprises nine devices: eight Nexus
5 32GB with Android 5.1.0 r3, and one Asus Nexus 7 2012
(WiFi) 32GB using Android 5.1.0 r3.
An orchestration software component, which we named
Supervisor, manages and coordinates the analysis of multi-
ple applications. For example, this component is in charge
of rebooting and restoring a device after the analysis of each
application. This component communicates with each phone
through the Android Debug Bridge (ADB). ADB is a ver-
satile command line tool that allows communicating with
an Android device. Furthermore, the Supervisor is physi-
cally connected to the devices through a powered USB hub.
In our experience, the USB hub needs to provide at least
500 mAh per port. During one of our stress-tests with a less
powerful USB hub, the batteries of all phones got completely
discharged.
Figure 1 shows an overview of the architecture of our
phone cloud. The following are the components that consti-
tute our system:
Supervisor: It constitutes the front-end of the infrastruc-
ture. It provides a command line interface (CLI) used
to start/stop the analysis and monitor the status of
the various devices;
con(cid:12)g.cfg: It is a con(cid:12)guration (cid:12)le that contains informa-
tion about the infrastructure (e.g., where to store logs);
device.info: It is a con(cid:12)guration (cid:12)le that contains infor-
mation (e.g., DeviceId) about the devices used by the
infrastructure;
Analysis: It provides a base class that can be used to im-
plement speci(cid:12)c malware analysis techniques.
Update manager: Each device is managed by a dedicated
update manager process.
It manages the work(cid:13)ow
of the analysis and triggers the transitions between
states. Depending on the state, the update manager