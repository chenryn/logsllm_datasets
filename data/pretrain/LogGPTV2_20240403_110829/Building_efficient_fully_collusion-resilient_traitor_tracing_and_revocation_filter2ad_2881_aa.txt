title:Building efficient fully collusion-resilient traitor tracing and revocation
schemes
author:Sanjam Garg and
Abishek Kumarasubramanian and
Amit Sahai and
Brent Waters
Building Efﬁcient Fully Collusion-Resilient Traitor Tracing
and Revocation Schemes
Sanjam Garg
UCLA
PI:EMAIL
Abishek
Kumarasubramanian
UCLA
PI:EMAIL
Amit Sahai∗
UCLA
PI:EMAIL
Brent Waters†
UTexas
PI:EMAIL
ABSTRACT
In [8, 9] Boneh et al. presented the ﬁrst fully collusion-
resistant traitor tracing and trace & revoke schemes. These
schemes are based on composite order bilinear groups and
their security depends on the hardness of the subgroup de-
cision assumption. In this paper we present new, eﬃcient
trace & revoke schemes which are based on prime order bi-
linear groups, and whose security depend on the hardness
of the Decisional Linear Assumption or the External Diﬃe-
Hellman (XDH) assumption. This allows our schemes to be
ﬂexible and thus much more eﬃcient than existing schemes
in terms a variety of parameters including ciphertext size,
encryption time, and decryption time. For example, if en-
cryption time was the major parameter of concern, then for
the same level of practical security as [8] our scheme encrypts
6 times faster. Decryption is 10 times faster. The ciphertext
size in our scheme is 50% less when compared to [8].
We provide the ﬁrst implementations of eﬃcient fully collusion-
resilient traitor tracing and trace & revoke schemes. The
ideas used in this paper can be used to make other crypto-
graphic schemes based on composite order bilinear groups
eﬃcient as well.
Categories and Subject Descriptors: E.3 [Data]: Data
Encryption—Public Key Cryptosystems; C.2.0 [Computer
Systems Organization]: Computer-Communication Net-
works —Security and Protection
General Terms: Performance, Security.
∗Research supported in part from NSF grants 0830803,
0627781, 0716389, 0456717, and 0205594, an equipment
grant from Intel, and an Okawa Foundation Research Grant.
†Supported by NSF CNS-0716199, CNS-0915361, and CNS-
0952692, Air Force Oﬃce of Scientiﬁc Research (AFO SR)
under the MURI award for “Collaborative policies and as-
sured information sharing” (Project PRESIDIO), Depart-
ment of Homeland Security Grant 2006-CS-001-000001-02
(subaward 641), and the Alfred P. Sloan Foundation.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
Keywords: Pairing Based Cryptography; Traitor Tracing;
Trace & Revoke.
1.
INTRODUCTION
Consider a scenario in which a content distributor, like
a cable/radio broadcaster, wants to broadcast content while
making sure that only those users who have paid for the ser-
vice have access to the content. In such a system, each user
will need a decoder with a secret key in order to decrypt the
content. A na¨ıve solution to achieve this would be to use an
encryption system such that the corresponding secret key is
known to all legitimate users. The broadcasting authority
can then encrypt the content and broadcast the ciphertext.
All legitimate users with the secret key will be able to de-
crypt the content. But if a dishonest user sells his key, then
an attacker could build pirate decoders which it could then
distribute, allowing unauthorized users to decrypt all future
broadcast content without ever having to communicate with
the attacker again. A malicious user could also use his own
key to build pirate decoders. The problem is that in this
system, there is no way to identify rogue users. A traitor
tracing or trace & revoke system is designed to solve this
problem. The purpose of a trace & revoke system, intro-
duced by Chor et al. [11], is to help content distributors
identify rogue users and revoke their secret keys. If revoca-
tion is not desired, one can have just traitor tracing schemes,
which helps the distributor identify the keys used in a pirate
decoder. The content distributor can then hold the corre-
sponding rogue user responsible for the loss incurred.
It should be observed that a traitor tracing system is not
designed to help to protect any particular content. The
problem of traitor tracing is distinct from what is commonly
referred to as “Digital Rights Management” (DRM). DRM
systems have traditionally been concerned with protecting
the widespread distribution of content that is already in the
hands of the (perceived) attacker. Clearly, there are funda-
mental obstacles to achieving this goal, since the attacker
can simply record what he sees and then retransmit this.
In a trace & revoke system, an authority can use the trac-
ing mechanisms to identify all of the key material (actively)
used in a pirate box and then disable these keys from being
used to access future broadcasts. The use of trace & revoke
systems best ﬁts application such as satellite radio or other
active broadcast services where users are interested in hav-
ing a device that can access the current broadcast, without
121having to be in constant communication with a dishonest
party.1 Given a pirate decoder, the challenge in a trace &
revoke system is to identify at least one of the users whose
key must have been used to construct the pirate decoder and
then revoke that key from the system. As such, traitor trac-
ing can be seen as providing a type of cryptographic method
for digital forensics – once a decoding box is discovered in
the wild, the associated cryptographic tracing algorithm al-
lows one to (provably) associate a particular user’s secret
key with the box.
A na¨ıve solution to the problem just described (in a system
of N users) would be to have N instances of an oﬀ-the-shelf
encryption system such that the ith secret key is known to
the ith user. The broadcasting authority could encrypt the
content under each public key and broadcast all the cipher-
texts2. Each legitimate user will then be able to decrypt the
part of ciphertext corresponding to its private key. Given a
pirate decoder, it is also possible for this system to identify
at least one of the rogue users whose key was used to build
it. We could then revoke this key by simply not encrypt-
ing under it in future broadcasts. But this system is very
ineﬃcient. For this system, the ciphertext size is linear in
the number of users. We provide an eﬃcient implementa-
tion of this na¨ıve solution using a fast Elgamal encryption
scheme and compare it with the performance of our scheme
in Section 7.2.
Previous Work. To overcome this limitation of ineﬃ-
ciency, many results with diﬀerent levels of security have
been proposed. A weak security property that has been
the subject of the greatest amount of previous work is the
t-collusion-resistant traitor tracing. A t-collusion-resistant
tracing [3,10,12,16,17,19,21,24] system will work as long as
the pirate uses fewer than t user keys in building the pirate
box. Prior to [8], all such schemes required a ciphertext size
blow-up at least linear in this parameter t.
A system that allows for traitor tracing regardless of how
many users’ keys are captured by the attacker is called fully
collusion-resistant. Boneh, Sahai, and Waters [8] presented
the ﬁrst fully collusion-resistant traitor tracing system with
O(√N ) size ciphertexts and public keys. A fully-collusion-
resistant traitor tracing system with constant size cipher-
texts [7] has also been constructed, but at the cost of enor-
mous private key sizes (quadratic in the number of users).
Another issue of concern in traitor tracing systems is the
need for a tracing authority, e.g [7, 8] which use a secret
tracing key to identify rogue users.
[10, 15, 22, 23, 25] allow
for a public tracing algorithm that does not require any se-
cret inputs. Other systems such as the one in [4, 9] provide
security only against a static adversary and achieve O(1)
size ciphertext and private key, but need O(N ) size public
key (which is used in the decryption algorithm).
When considering only broadcast encryption,
[9] acheive
adaptive security with O(1) size ciphertext and private key
(O(N ) size public key) and also provide a system with O(√N )
[14] obtain adaptively secure
ciphertext and public key.
broadcast encryption with O(1) cipher-text, O(N ) private
1Traitor tracing systems are not appropriate for systems
where “protecting” released content is considered the highest
priority.
2Note that here, the content itself would be a secret key
for a private-key encryption scheme (such as AES), which
would then be used to encrypt the actual content.
and public key. The recent work of
parameters and also provides identity based encryption.
[26] obtains identical
Building on [8], Boneh and Waters [9] presented a fully col-
lusion resistant, publicly traceable trace & revoke scheme,
representing the “state-of-the-art” prior to this work. How-
ever, [9] crucially makes use of composite order bilinear groups,
which lead to signiﬁcant losses in eﬃciency that make the
scheme impractical in many settings. The goal of the present
work is to build new techniques to achieve order-of-magnitude
improvements in eﬃciency without sacriﬁcing any security.
Our Contribution. We present a new traitor tracing sys-
tem that achieves the same strong security properties as [8],
but avoids the use of composite order bilinear groups. In-
stead, using new techniques, our scheme is based on prime
order bilinear groups, and its security depends on the hard-
ness of the widely believed decisional linear assumption.
This allows for shorter group elements and much more eﬃ-
cient schemes (see Section 7). We also extend this to build
publicly traceable trace & revoke schemes, improving simi-
larly in eﬃciency over [9].
Hardness assumptions in composite order bilinear groups
are limited by known attacks on factoring their modulii. Be-
cause of sub-exponential attacks against factoring, for ap-
propriate security, large composite order groups must be
used. When compared with prime order bilinear groups, for
the same level of practical security (see Section 7 for details),
a simple exponentiation in composite order bilinear groups
is about 25 times slower than one in prime order groups.
Also, one pairing operation in these larger composite order
groups is approximately 30 times costlier than a pairing in
prime order groups. The main contribution of this research
is to present traitor tracing schemes based on prime order
bilinear groups making them practical.
We also implement our protocol using the PBC library [18]
(see Section 7). We compare the eﬃciency our traitor tracing
scheme with an implementation of [8]. We obtain encryption
times up to 6 times better than [8] and ciphertexts that are
50% smaller. Decryption is 10 times faster.
We note that the techniques we use are general and can
be used to convert other cryptosystems based on composite
order groups to ones based on prime order bilinear groups.
In this respect, our work is similar to generic methods de-
scribed in a very recent concurrent and independent work
by Freeman [13]. However, our schemes are diﬀerent from
the work of [13]. His work focuses on generality and while
our work is on optimizing and implementing eﬃcient traitor
tracing systems. He provides a traitor tracing scheme using
asymmetric bilinear groups while we provide schemes based
on both symmetric and asymmetric groups. Also, our asym-
metric construction is more eﬃcient than his construction,
which does not have any known implementation.
2. PRELIMINARY DEFINITIONS
2.1 Traitor Tracing
A traitor tracing system provides protection for a broad-
cast encrypter.
It consists of four algorithms: Setup, En-
crypt, Decrypt and Trace. The Setup algorithm generates
the secret keys for all the users in the system and the public
parameters for the system. By using these public parameters
and the algorithm Encrypt, any user can encrypt a message
to all the users in the system. A recipient can use his secret
key and the Decrypt algorithm to decrypt a ciphertext.
122In case an authority discovers a pirate decoder, it can then
use the T race algorithm to identify at least one of the users
whose private key must have been used in the construction
of the pirate decoder. A publicly traceable scheme is one
where the T race algorithm has no secret inputs, i.e there
are no tracing secret keys.
The desired security properties of a traitor tracing system
are the following:
• Semantic Security: An adversary that does not have
access to the secret key of any user should not be able
to distinguish between encryptions of two messages of
its choice.
• Traceability Against Arbitrary Collusion: Con-
sider a case where an adversary has access to an ar-
bitrary number of keys of its choice and generates a
pirate decoder. Then the tracing algorithm should be
able to use the pirate decoder and detect at least one of
the users whose key must have been used to construct
the pirate decoder.
2.2 Trace & Revoke
A Trace & Revoke system is a traitor tracing system that
provides an additional property of user revocation. Once a
set of rogue users are identiﬁed, the system allows for all
honest parties to encrypt to the rest of the honest users
securely. The system consists of four algorithms Setup,
Encrypt, Decrypt and T race. The Setup algorithm gen-
erates the secret keys for all the users in the system and the
public parameters for the system. The Encrypt algorithm
can be used to encrypt a message to any subset of users of
the system. Decrypt is used to decrypt a valid ciphertext.
In a secure Trace & Revoke system, the Decrypt algorithm
succeeds if and only if the encryption was intended for him
(he belongs to the set of users that the message was en-
crypted to). The T race algorithm is used to identify the
key used inside a pirate decoder.
Boneh et al. [8] introduce a new primitive, Private Linear
Broadcast Encryption (PLBE) and showed that a PLBE is
suﬃcient for implementing a fully collusion-resistant traitor
tracing scheme.
In this paper, we give an informal treat-
ment (see [8] for details) of traitor tracing systems and their
relation to PLBE and present an improved PLBE scheme.
Boneh and Waters [9] introduce a new primitive, Aug-
mented Broadcast Encryption (AugBE) and use an AugBE
scheme (based on composite order bilinear groups) to imple-
ment a fully collusion-resistant trace & revoke scheme, se-
cure against adaptive adversaries. We present an improved
AugBE scheme based only on prime order groups.
2.3 AugBE
An Augmented Broadcast Encryption (AugBE) [9] system
consists of three algorithms: SetupAugBE, EncryptAugBE,
DecryptAugBE.
• (P K, K1, K2 . . . KN ) $←− SetupAugBE(λ): SetupAugBE
algorithm takes as input the security parameter λ and
sets up the public parameters P K for the system along
with generating the secret keys (K1, K2 . . . KN ) for all
the users in the system. N is the number of users in
the system.
• C $←− EncryptAugBE(S, P K, i, M ): This algorithm takes
as input a subset S ⊆ {1, . . . , N} of users, the public
key PK, and an index 1 ≤ i ≤ N +1, and a message M.
The algorithms outputs a ciphertext which can be de-
crypted by any user belonging to the set S∩{i, . . . , N}.
the ciphertext.
• M ← DecryptAugBE(S, j, Kj, C, P K): A user j hav-
ing access to the private key Kj can decrypt a cipher-
text C and obtain the corresponding message M . If
he is not able to decrypt he outputs ⊥.
PLBE system consists of similar algorithms. The only
diﬀerence between the AugBE and PLBE systems is that
PLBE algorithms do not take set S as input. The set of all
users is implied each time set S is referred to. We refer the
reader to [8] for details.
2.4 Desired Security Properties
We only describe the security properties required of an
AugBE system. The security properties required of a PLBE
system are implied by the ones for an AugBE system under
the condition that the set S is the set of all users. An AugBE
system is considered secure if no adversary has signiﬁcant
advantage in the following games:
• Index Hiding: This property prevents an adversary
from distinguishing between EncryptAugBE(S, P K, i, M )
and EncryptAugBE(S, i + 1, P K, M ) when the adver-
sary knows all the secret keys except the ith secret key.
Also when i /∈ S, an adversary with access to all the
private keys in the system, should not be able to tell if
the encryption has been done to index i or i + 1. The
game between the adversary and the challenger pro-
ceeds as follows. The game takes the index i as input
which is given as input to both the challenger and the
adversary.
– Setup: The challenger runs the SetupAugBE al-