she has signed c, it must be her own commitment. Since she did
not reveal her commitment c, except for sending it directly to A,
the auctioneer must have revealed c to the other bidders, letting
them sign c, before publishing the list of commitments. Therefore,
A is not honest in π. Also Bi2 , . . . ,Bik are not honest in π, as they
have signed not their own commitments.
Completeness: We need to show that V ensures all the constraints
in Φ in every run r of PPRST :
rec holds (i.e. r ∈ αi
rec), then V states dis(A)∨
Constraint (7). If αi
dis(Bi), by V1.
open holds, then V states dis(A)∨dis(Bi) by V4.
Constraint (8). If αi
reuse holds, then V states ψ∗
Constraint (9). If αX
win holds, then V states ψ∗
rec, αi
Constraint (10). If α
w, j
Constraint (11). Suppose that neither of αi
win
holds, and that ¬γ holds. It means that one of the conditions (a)–
(e) is violated in r. In each of these cases we to prove that A is
individually blamed:
Condition (a) is violated:
If A does not post a list (15) of com-
mitments at all, then A is blamed, by V2. If A posts this list, but
the commitment of some honest bidder Bi is not included, then this
bidder provides her receipt (we know that she obtained her receipt,
because otherwise, she would claim, which would mean that αi
rec
holds) and A is blamed, by V3. We also know that commitments on
this list are pairwise different, because, as we assumed, αX
reuse does
not hold, for any X.
Condition (b) is violated:
If some commitment is not opened (in
particular, if the list is not posted at all), then it must hold that
A does not provide any signature on any commitment (otherwise
αopen would hold). In this case, A is blamed by V4.
Condition (c) is violated, i.e. A does not publish any result (18). In
this case V blames A, by V5.
X∪{A}, by V2.
{A,Bw,B j}, by V6.
reuse, α
open, αX
Condition (d) is violated,
i.e. the result (18) is published, but the
published price bu is not the second highest bid amongst the bids
encrypted in C1, . . . ,Cn. In this case, by the equational theory under
consideration, A is not able to construct a valid zero-knowledge
proof, as required in S6’ and, therefore, V blames A, by V5.
Condition (e) is violated: We can assume that condition (b) is
satisﬁed (we have considered a violation of this condition above).
If an honest bidder is declared as the winner, then her signature
on the commitment Comw corresponding to the winning encrypted
bid Cw is posted in (18). This is possible only if this honest bidder
in fact has produced Cw. Now, if the bidder declared as the winner
did not bid the highest value, i.e. Cw does not contain the highest
value, then, by the equational theory under consideration, A would
not be able construct the required valid zero-knowledge proof P.
Therefore V would blame A by V5.
Now, suppose that and honest bidder B j, who has bid the highest
value, is not declared as the winner (i.e. j (cid:54)= w). One can show that
w, j
this case cannot hold, as it contradicts our assumption that α
win
does not hold.
C. PROOF OF PROPOSITION 1
In this section we prove Proposition 1.
C.1 Symbolic Setting
Assume that (4) holds. That means that
(a) J is fair, i.e. if J states ψ in a run r of an instance π of P then
π |= ψ and
(b) J ensures (¬γ ⇒ ϕ), i.e. for every run r we have r ∈ γ or J
states a formula that implies ϕ.
We now show that the two conditions of Deﬁnition 4 hold.
1. Let r be a run of an instance π of P such that π |= ϕ. We have
to show that J accepts r.
If J does not accept r, then, by deﬁnition, J outputs a formula
ψ that, by assumption, implies ϕ. From (a) we get that π |= ψ.
As ψ implies ϕ, this implies π |= ϕ. That contradicts π |= ϕ.
Hence we get the ﬁrst condition of veriﬁability of (5).
2. Let r be an arbitrary run of an instance π of P in which J
accepts r. We have to show that r ∈ γ.
As J accepts r, J does not state a formula ψ (that implies ϕ).
By (b) we have that r ∈ γ, what is the second condition of
veriﬁability.
Now we prove that (5) implies (4) under the condition that J, if
it states a formula, he states ϕ.
Assume that (5) holds. That means that
(c) For every run r of an instance π of P such that π |= ϕ, J
accepts r.
(d) For every run r in which J accepts r we have r ∈ γ.
We have to show that the fairness and completeness conditions of
Deﬁnition 2 are satisﬁed.
1. Let r be a run of an instance π of P such that J states a verdict
ψ. We have to show that π |= ψ.
By assumption we have ψ = ϕ. As by deﬁnition, J does not
accept r, by (c) we have that π |= ϕ does not hold, what im-
plies π |= ϕ, hence J is fair.
2. Further, let r be an arbitrary run of an instance of P. We
have to show that J ensures (¬γ ⇒ ϕ) in P. This is trivial
when r ∈ γ, hence let r ∈ ¬γ. If J would not state a verdict
22
that implies ϕ, then, by deﬁnition, J would accept this run.
By (d) we would get r ∈ γ. This contradiction implies the
completeness.
C.2 Computational Setting
Assume that (4) holds for some δ ∈ [0,1]. That means that
(a) J is computationally fair, i.e. Pr[π(1(cid:96)) (cid:55)→ {(J : ψ) | π (cid:54)|= ψ}]
is negligible as a function of (cid:96), for all instances π of P and
(b) for every instance π of P, the probability that J does not en-
sure (¬γ ⇒ ϕ) is δ-bounded as a function of (cid:96).
We now show that the two conditions of Deﬁnition 5 hold.
1. We have to show that Pr[π(1(cid:96)) (cid:55)→ (J : accept)] is overwhelm-
ing as a function of (cid:96) for all instances π of P with π |= ϕ.
So let π with π |= ϕ, i.e. π (cid:54)|= ϕ, be arbitrary. If Pr[π(1(cid:96)) (cid:55)→
(J : accept)] is not overwhelming, then Pr[π(1(cid:96)) (cid:55)→ {(J : ψ) |
ψ implies ϕ}] is not negligible as J accepts iff J does not out-
put any ψ (that implies ϕ). For all ψ that imply ϕ, we have
π (cid:54)|= ψ. Hence Pr[π(1(cid:96)) (cid:55)→ {(J : ψ) | π (cid:54)|= ψ}] ≥ Pr[π(1(cid:96)) (cid:55)→
{(J : ψ) | ψ implies ϕ}] is also not negligible, what contra-
dicts (a).
2. Further we have to show that Pr[π(1(cid:96)) (cid:55)→ ¬γ, (J : accept)] is
δ-bounded as a function of (cid:96).
This follows directly from (b), as J does not ensure (¬γ ⇒ ϕ)
in a run r means that r ∈ ¬γ and J does not state a formula that
implies ϕ. The latter implies that J does not state any formula
and hence, J accepts the run. Hence the second condition of
computational veriﬁability is satisﬁed.
Now we prove that (5) implies (4) under the condition that J, if
it states a formula, states ϕ.
Assume that (5) holds for some δ ∈ [0,1]. That means that for
every instance π of P
(c) If π |= ϕ, then Pr[π(1(cid:96)) (cid:55)→ (J : accept)] is overwhelming as
a function of (cid:96).
(d) Pr[π(1(cid:96)) (cid:55)→ ¬γ, (J : accept)] is δ-bounded as a function of (cid:96).
We have to show that the fairness and completeness conditions of
Deﬁnition 3 are satisﬁed.
1. Let π be an arbitrary instance of P. We have to show that
Pr[π(1(cid:96)) (cid:55)→ {(J : ψ) | π (cid:54)|= ψ}] is negligible as a function of
(cid:96).
As if J states a formula, then J states ϕ, it is enough to show
that the probability that J states ϕ is negligible if π (cid:54)|= ϕ.
The latter implies π |= ϕ and hence, by (c), Pr[π(1(cid:96)) (cid:55)→ (J :
accept)] is overwhelming. This implies that the probability
that J states ϕ is negligible, as by deﬁnition, J states a for-
mula iff J does not accept. Hence J is computationally fair.
2. Further we have to show that the probability that J ensures
(¬γ ⇒ ϕ) is δ-bounded.
This follows directly from (d), as J does not ensure (¬γ ⇒ ϕ)
in a run r means that r ∈ ¬γ and J does not state a formula that
implies ϕ. The latter means that J does not state any formula
and hence, J accepts the run. This implies the completeness.
D. ASW PROTOCOL
In this section, we provide some details on modeling and analysis
the ASW contract-signing protocol. [4].
D.1 Description of the Protocol
The objective of the ASW protocol is to enable two parties, A
(the originator) and B (the responder), to obtain each other’s signa-
ture on a previously agreed contractual text contract with the help
of a trusted third party T , where, however, T is only invoked in
case of a problem. In other words, the ASW protocol is an opti-
mistic two-party contract-signing protocol.
In the following, similarly to Section 6, we write sigk[m] as an
abbreviation for (cid:104)m, sigk(m)(cid:105), where sigk(m) is a term represent-
ing the signature on the message m with the key k. We will also
write (cid:104)m1, . . . ,mn(cid:105) to represent the concatenation of the messages
m1, . . . ,mn. We denote the public (or veriﬁcation) key of a principal
A by kA.
In the ASW protocol, there are two kinds of messages that are
considered to be valid contracts: the standard contract (cid:104)sigkA [mA],
NA, sigkB [mB],NB(cid:105) and the replacement contract
rT = sigT [(cid:104)sigA[mA], sigB[mB](cid:105)]
where NA and NB are nonces generated by A and B, respec-
tively, mA = (cid:104)kA,kB,kT , contract, hash(NA)(cid:105), and mB = (cid:104)sigkA [mA],
hash(NB)(cid:105)
The ASW protocol consists of three subprotocols: the exchange,
abort, and resolve protocols. These subprotocols are explained
next.
Exchange protocol. The basic idea of the exchange protocol is that
A ﬁrst indicates her interest to sign the contract. To this end, she
sends to B the message sigkA [mA] as deﬁned above, where NA is
a nonce generated by A. By sending this message, A “commits”
to signing the contract. Then, similarly, B indicates his interest to
sign the contract by generating a nonce NB and sending the message
sigkB [mB] to A. Finally, ﬁrst A and then B reveal NA and NB, respec-
tively. At this point both participants are able to build a standard
contract.
Abort protocol.
If, after A has sent her ﬁrst message, B does
not respond, A may contact T to abort, i.e., A runs the abort pro-
tocol with T .
In the abort protocol, A ﬁrst sends the message
If T has not received a resolve re-
quest before (see below), then T sends back to A the abort token
sigkA [(cid:10)aborted, sigkA [mA](cid:11)].
aT = sigkT [(cid:10)aborted, sigkA [(cid:10)aborted, sigkA [mA](cid:11)](cid:11)]. Otherwise (if
T received a resolve request, which in particular involves the mes-
sages sigkA [mA] and sigkB [mB] from above), it sends the replacement
contract rT to A.
Resolve protocol.
If, after A has sent the nonce NA, B does
not respond, A may contact T to resolve, i.e., A runs the resolve
protocol with T .
In the resolve protocol, A sends the message
(cid:10)sigkA [mA], sigkB [mB](cid:11) to T . If T has not sent out the abort token aT
before, then T returns the replacement contract rT , and otherwise
T returns the abort token aT . Analogously, if, after B has sent his
commitment to sign the contract, A does not respond, B may con-
tact T to resolve, i.e., B runs the resolve protocol with T similarly
to the case for A.
We assume that both in the abort and the resolve protocol, the
communication with T is carried out over a reliable channel. Com-
munication between A and B is carried out over an unreliable net-
work channels.
D.2 Properties of the Protocol
Several properties of this protocol were studied in the literature,
including fairness, balance, and abuse-freeness, under the assump-
tion that the trusted third party behaves honestly (see, e.g., [29, 43,
28, 27]). More speciﬁcally, it was assumed that the trusted third
party never produces both the abort token aT and a replacement
23
contract rT . Here, we do not make this assumption but ask whether
the trusted third party can be held accountable in case it misbe-
haves. This is a crucial question, as a positive answer justiﬁes the
assumption that the trusted third party behaves honestly.
Ideally, we would like to hold T accountable whenever it pro-
duces both aT and rT . However, it is easy to see that it is unre-
alistic: the mere fact that both messages were produced does not
necessarily mean that they were sent to any honest party, let alone
observed by the judge. We therefore consider only the case where
there is a dispute in which the judge is faced with both aT and rT .
D.3 Modeling
By PASW we denote the protocol (in the sense of Deﬁnition 1)
modeling the ASW protocol, where, in addition to A, B and T , we
consider an additional party, the judge J. The honest programs of A,
B and T are deﬁned as speciﬁed by the protocol. The judge blames
T if and only if he obtains a message of the form (cid:104)aT ,rT(cid:105), where
aT and rT are deﬁned as above, for some A, B, contract, NA, and
NB.
We assume that the set of programs that the judge can run con-
sists only of his honest program, which means that we assume
that the judge is honest. However, the sets of programs of A, B,
and T consist of all possible processes that these parties can run,
where the processes are merely limited by the network conﬁgura-
tion. Hence, for these three parties any dishonest behavior is con-
sidered.
D.4 Automated Proof of Theorem 4
Following Remark 1, we have veriﬁed the property stated by this
theorem automatically, using the constraint solving for protocol
analysis tool [35], documented in [36]. Our modelling is available
at [33].
Fairness. For the fairness condition, we have encoded the system
with only honest T and J and with the intruder subsuming A and B
(which means that he knows their private keys and has access to the
same network interface these parties have, including the interface
to T ), where T is capable to deal with up to three requests. The tool
has veriﬁed that a state in which J blames T is unreachable in this
system (note that J blames only T ).
Completeness. To show that the only constraint of Φ is ensured
by J, we have encoded the system with only honest J and all the
remaining parties subsumed by the intruder. In this case, the veri-
ﬁcation is trivial, and the tool, as expected, has conﬁrmed that it is
impossible to reach a state, where the judge obtains both aT and rT
and T is not blamed.
24