[root@db-172-16-3-39 ~]# stap -e 'global arr1; probe begin { arr1["i1", "x2"]=1; arr1["i2", "x1"]=2; foreach([x,y-] in arr1) printf("index: %s,%s, value:%d \n", x, y, arr1[x,y]); exit()}'  
index: i1,x2, value:1   
index: i2,x1, value:2   
[root@db-172-16-3-39 ~]# stap -e 'global arr1; probe begin { arr1["i1", "x2"]=1; arr1["i2", "x1"]=2; foreach([x,y] in arr1-) printf("index: %s,%s, value:%d \n", x, y, arr1[x,y]); exit()}'  
index: i2,x1, value:2   
index: i1,x2, value:1   
错误例子 :   
[root@db-172-16-3-39 ~]# stap -e 'global arr1; probe begin { arr1["i1", "x2"]=1; arr1["i2", "x1"]=2; foreach([x,y-] in arr1-) printf("index: %s,%s, value:%d \n", x, y, arr1[x,y]); exit()}'  
parse error: multiple sort directives  
        saw: operator '-' at :1:90  
     source: global arr1; probe begin { arr1["i1", "x2"]=1; arr1["i2", "x1"]=2; foreach([x,y-] in arr1-) printf("index: %s,%s, value:%d \n", x, y, arr1[x,y]); exit()}  
                                                                                                      ^  
1 parse error.  
Pass 1: parse failed.  Try again with another '--vp 1' option.  
[root@db-172-16-3-39 ~]# stap -e 'global arr1; probe begin { arr1["i1", "x2"]=1; arr1["i2", "x1"]=2; foreach([x-,y+] in arr1) printf("index: %s,%s, value:%d \n", x, y, arr1[x,y]); exit()}'  
parse error: multiple sort directives  
        saw: operator '+' at :1:81  
     source: global arr1; probe begin { arr1["i1", "x2"]=1; arr1["i2", "x1"]=2; foreach([x-,y+] in arr1) printf("index: %s,%s, value:%d \n", x, y, arr1[x,y]); exit()}  
                                                                                             ^  
1 parse error.  
Pass 1: parse failed.  Try again with another '--vp 1' option.  
合并赋值的用法, 可以同时取出索引和元素值.  
You can combine the first and second syntax to capture both the full tuple and the keys at the same time as follows.  
foreach (VAR = [VAR1, VAR2, ...] in ARRAY) STMT  
例子 :   
[root@db-172-16-3-39 ~]# stap -e 'global arr1; probe begin { arr1["i1", "x2"]=1; arr1["i2", "x1"]=2; foreach(var=[x,y] in arr1-) printf("index: %s,%s, value:%d \n", x, y, var); exit()}'  
index: i2,x1, value:2   
index: i1,x2, value:1   
The following statement is the same as the first example, except that the limit keyword limits the number of loop iterations to EXP times.   
EXP is evaluated once at the beginning of the loop.  
foreach (VAR in ARRAY limit EXP) STMT  
使用limit, 限制元素个数的输出, EXP只执行一次, 在循环开始前执行.  
[root@db-172-16-3-39 ~]# stap -e 'global arr1; probe begin {v1=0; arr1["i1", "x2"]=1; arr1["i2", "x1"]=2; foreach(var=[x,y] in arr1- limit v1+1) printf("index: %s,%s, value:%d \n", x, y, var); exit()}'  
index: i2,x1, value:2   
例如输出元素的最大值.  
[root@db-172-16-3-39 ~]# stap -e 'global arr1; probe begin { arr1["i1", "x2"]=1; arr1["i2", "x1"]=2; foreach(var=[x,y] in arr1- limit 1) printf("index: %s,%s, value:%d \n", x, y, var); exit()}'  
index: i2,x1, value:2   
6.7 if  
General syntax:  
if (EXP) STMT1 [ else STMT2 ]  
The if statement compares an integer-valued EXP to zero.   
It executes the first STMT if non-zero, or the second STMT if zero.  
The if command has the same syntax and semantics as used in C.  
EXP非零真, 0假.  
6.8 next  
The next statement returns immediately from the enclosing probe handler.  
next用于退出当前正在处理的handler, 例如 :   
[root@db-172-16-3-39 ~]# stap -e 'probe begin{print("hello\n"); next; print(" world\n")}'  
hello  
因为begin只会触发一次, 所以next后就无任何反应了.  
对于可能多次触发的探针, 例子 :   
[root@db-172-16-3-39 ~]# stap -e 'probe kernel.function("icmp_echo") {printf("hello\n"); next; printf(" world\n")}'  
在另一个窗口开一个ping  
[root@db-172-16-3-39 soft_bak]# ping 127.0.0.1  
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.  
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.037 ms  
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.023 ms  
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.028 ms  
64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.021 ms  
stap输出 :   
hello  
hello  
hello  
hello  
6.9 ; (null statement)  
General syntax:  
statement1  
;  
statement2  
The semicolon represents the null statement, or do nothing.   
It is useful as an optional separator between statements to improve syntax error detection and to handle certain grammar ambiguities.  
分号表示空语句, 一般用于将两个语句隔开, 减少误解析的可能性.  
6.10 return  
General syntax:  
return EXP  
The return statement returns the EXP value from the enclosing function.   
If the value of the function is not returned, then a return statement is not needed, and the function will have a special unknown type with no return value.  
函数的返回值使用return EXP语法 .  
例如 :   
[root@db-172-16-3-39 ~]# stap -e 'function add(x,y) {return x+y} probe begin {printf("%d\n", add($1,$2)); exit()}' 10 9  
19  
如果函数中没有return, 那么将返回unknown类型例如.  
[root@db-172-16-3-39 ~]# stap -e 'function add(x,y) {} probe begin {printf("%d\n", add($1,$2)); exit()}' 10 9  
WARNING: side-effect-free function 'add': identifier 'add' at :1:10  
 source: function add(x,y) {} probe begin {printf("%d\n", add($1,$2)); exit()}  
                  ^  
0  
6.11 { } (statement block)  
This is the statement block with zero or more statements enclosed within brackets.   
The following is the general syntax:  
{ STMT1 STMT2 ... }  
The statement block executes each statement in sequence in the block.   
Separators or terminators are generally not necessary between statements.   
The statement block uses the same syntax and semantics as in C.  
语句块使用语法 :   
{ STMT1 STMT2 ... }  
例如在条件判断中要使用多个语句的话, 需要用到语句块.  
[root@db-172-16-3-39 ~]# stap -e 'probe begin {if ($1>100) {printf("hello "); printf("%d\n",$1);}; exit();}' 101  
hello 101  
6.12 while  
General syntax:  
while (EXP) STMT  
The while statement uses the same syntax and semantics as in C.   
In the statement above, while the integer-valued EXP evaluates to non-zero, the parser will execute STMT.  
while循环 :   
[root@db-172-16-3-39 ~]# stap -e 'probe begin {while(i<10) {println(i); i++}; exit()}'  
0  
1  
2  
3  
4  
5  
6  
7  
8  
9  
```  
## 参考  
1\. https://sourceware.org/systemtap/langref/Statement_types.html  
2\. https://sourceware.org/systemtap/langref/SystemTap_overview.html#sub:SystemTap-safety  
3\. http://blog.163.com/digoal@126/blog/static/163877040201381021752228/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")