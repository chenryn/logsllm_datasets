Worker: 2 : Completed Task : 8 
Worker: 2 : Shutting Down 
Worker: 1 : Completed Task : 10 
Worker: 1 : Shutting Down 
由于程序和 Go 语言的调度器带有随机成分，这个程序每次执行得到的输出会不一样。不过，
通过有缓冲的通道，使用所有 4 个 goroutine 来完成工作，这个流程不会变。从输出可以看到每
个 goroutine 是如何接收从通道里分发的工作。 
在 main 函数的第 31 行，创建了一个 string 类型的有缓冲的通道，缓冲的容量是 10。在
第 34 行，给 WaitGroup 赋值为 4，代表创建了 4 个工作 goroutine。之后在第 35 行到第 37 行，
创建了 4 个 goroutine，并传入用来接收工作的通道。在第 40 行到第 42 行，将 10 个字符串发送
到通道，模拟发给 goroutine 的工作。一旦最后一个字符串发送到通道，通道就会在第 46 行关闭，
而 main 函数就会在第 49 行等待所有工作的完成。
第 46 行中关闭通道的代码非常重要。当通道关闭后，goroutine 依旧可以从通道接收数据，
但是不能再向通道里发送数据。能够从已经关闭的通道接收数据这一点非常重要，因为这允许通
道关闭后依旧能取出其中缓冲的全部值，而不会有数据丢失。从一个已经关闭且没有数据的通道
里获取数据，总会立刻返回，并返回一个通道类型的零值。如果在获取通道时还加入了可选的标
志，就能得到通道的状态信息。 
在 worker 函数里，可以在第 58 行看到一个无限的 for 循环。在这个循环里，会处理所有
接收到的工作。每个 goroutine 都会在第 60 行阻塞，等待从通道里接收新的工作。一旦接收到返
回，就会检查 ok 标志，看通道是否已经清空而且关闭。如果 ok 的值是 false，goroutine 就会
终止，并调用第 56 行通过 defer 声明的 Done 函数，通知 main 有工作结束。
如果 ok 标志是 true，表示接收到的值是有效的。第 71 行和第 72 行模拟了处理的工作。
一旦工作完成，goroutine 会再次阻塞在第 60 行从通道获取数据的语句。一旦通道被关闭，这个
从通道获取数据的语句会立刻返回，goroutine 也会终止自己。 
有缓冲的通道和无缓冲的通道的例子很好地展示了如何编写使用通道的代码。在下一章，我
们会介绍真实世界里的一些可能会在工程里用到的并发模式。 
6.6  小结 
并发是指 goroutine 运行的时候是相互独立的。
使用关键字 go 创建 goroutine 来运行函数。
goroutine 在逻辑处理器上执行，而逻辑处理器具有独立的系统线程和运行队列。
竞争状态是指两个或者多个 goroutine 试图访问同一个资源。
原子函数和互斥锁提供了一种防止出现竞争状态的办法。
通道提供了一种在两个 goroutine 之间共享数据的简单方法。
无缓冲的通道保证同时交换数据，而有缓冲的通道不做这种保证。
第 7 章  并发模式 
本章主要内容 
控制程序的生命周期
管理可复用的资源池
创建可以处理任务的 goroutine 池
在第 6 章中，我们学习了什么是并发，通道是如何工作的，并学习了可以实际工作的并发代
码。本章将通过学习更多代码来扩展这些知识。我们会学习 3 个可以在实际工程里使用的包，这
3 个包分别实现了不同的并发模式。每个包从一个实用的视角来讲解如何使用并发和通道。我们
会学习如何用这个包简化并发程序的编写，以及为什么能简化的原因。 
7.1  runner 
runner 包用于展示如何使用通道来监视程序的执行时间，如果程序运行时间太长，也可以
用 runner 包来终止程序。当开发需要调度后台处理任务的程序的时候，这种模式会很有用。这
个程序可能会作为 cron 作业执行，或者在基于定时任务的云环境（如 iron.io）里执行。 
让我们来看一下 runner 包里的 runner.go 代码文件，如代码清单 7-1 所示。
代码清单 7-1  runner/runner.go
 01 // Gabriel Aszalos 协助完成了这个示例 
 02 // runner 包管理处理任务的运行和生命周期 
 03 package runner 
 04 
 05 import ( 
 06 
 "errors" 
 07 
 "os" 
 08 
 "os/signal" 
 09 
 "time" 
 10 ) 
 11 
7
第 7 章  并发模式 
 12 // Runner 在给定的超时时间内执行一组任务， 
 13 // 并且在操作系统发送中断信号时结束这些任务 
 14 type Runner struct { 
 15 
 // interrupt 通道报告从操作系统 
 16 
 // 发送的信号 
 17 
 interrupt chan os.Signal 
 18 
 19 
 // complete 通道报告处理任务已经完成 
 20 
 complete chan error 
 21 
 22 
 // timeout 报告处理任务已经超时 
 23 
 timeout <-chan time.Time 
 24 
 25 
 // tasks 持有一组以索引顺序依次执行的 
 26 
 // 函数 
 27 
 tasks []func(int) 
 28 } 
 29 
 30 // ErrTimeout 会在任务执行超时时返回 
 31 var ErrTimeout = errors.New("received timeout") 
 32 
 33 // ErrInterrupt 会在接收到操作系统的事件时返回 
 34 var ErrInterrupt = errors.New("received interrupt") 
 35 
 36 // New 返回一个新的准备使用的 Runner 
 37 func New(d time.Duration) *Runner { 
 38 
 return &Runner{ 
 39 
 interrupt: make(chan os.Signal, 1), 
 40 
 complete:  make(chan error), 
 41 
 timeout:   time.After(d), 
 42 
 } 
 43 } 
 44 
 45 // Add 将一个任务附加到 Runner 上。这个任务是一个 
 46 // 接收一个 int 类型的 ID 作为参数的函数 
 47 func (r *Runner) Add(tasks ...func(int)) { 
 48 
 r.tasks = append(r.tasks, tasks...) 
 49 } 
 50 
 51 // Start 执行所有任务，并监视通道事件 
 52 func (r *Runner) Start() error { 
 53 
 // 我们希望接收所有中断信号 
 54 
 signal.Notify(r.interrupt, os.Interrupt) 
 55 
 56 
 // 用不同的 goroutine 执行不同的任务 
 57 
 go func() { 
 58 
 r.complete <- r.run() 
 59 
 }() 
 60 
 61 
 select { 
 62 
 // 当任务处理完成时发出的信号 
 63 
 case err := <-r.complete: 
 64 
 return err 
 65 
 66 
 // 当任务处理程序运行超时时发出的信号 
 67 
 case <-r.timeout: 
 68 
 return ErrTimeout 
 69 
 } 
 70 } 
 71 
 72 // run 执行每一个已注册的任务 
 73 func (r *Runner) run() error { 
 74 
 for id, task := range r.tasks { 
 75 
 // 检测操作系统的中断信号 
 76 
 if r.gotInterrupt() { 
 77 
 return ErrInterrupt 
 78 
 } 
 79 
 80 
 // 执行已注册的任务 
 81 
 task(id) 
 82 
 } 
 83 
 84 
 return nil 
 85 } 
 86 
 87 // gotInterrupt 验证是否接收到了中断信号 
 88 func (r *Runner) gotInterrupt() bool { 
 89 
 select { 
 90 
 // 当中断事件被触发时发出的信号 
 91 
 case <-r.interrupt: 
 92 
 // 停止接收后续的任何信号 
 93 
 signal.Stop(r.interrupt) 
 95 
 return true 
 96 
 97 
 // 继续正常运行 
 98 
 default: 
 99 
 return false 
100 
 } 
101 } 
代码清单 7-1 中的程序展示了依据调度运行的无人值守的面向任务的程序，及其所使用的并
发模式。在设计上，可支持以下终止点： 
程序可以在分配的时间内完成工作，正常终止；
程序没有及时完成工作，“自杀”；
接收到操作系统发送的中断事件，程序立刻试图清理状态并停止工作。
让我们走查一遍代码，看看每个终止点是如何实现的，如代码清单 7-2 所示。 
代码清单 7-2  runner/runner.go：第 12 行到第 28 行
12 // Runner 在给定的超时时间内执行一组任务， 
13 // 并且在操作系统发送中断信号时结束这些任务 
14 type Runner struct { 
15 
 // interrupt 通道报告从操作系统 
16 
 // 发送的信号 
17 
 interrupt chan os.Signal 
18 
19 
 // complete 通道报告处理任务已经完成 
20 
 complete chan error 
21 
22 
 // timeout 报告处理任务已经超时 
23 
 timeout <-chan time.Time 
24 
25 
 // tasks 持有一组以索引顺序依次执行的 
26 
 // 函数 
27 
 tasks []func(int) 
28 } 
代码清单 7-2 从第 14 行声明 Runner 结构开始。这个类型声明了 3 个通道，用来辅助管理
程序的生命周期，以及用来表示顺序执行的不同任务的函数切片。 
第 17 行的 interrupt 通道收发 os.Signal 接口类型的值，用来从主机操作系统接收中
断事件。os.Signal 接口的声明如代码清单 7-3 所示。
代码清单 7-3  golang.org/pkg/os/#Signal 
// Signal 用来描述操作系统发送的信号。其底层实现通常会 
// 依赖操作系统的具体实现：在 UNIX 系统上是 
// syscall.Signal  
type Signal interface { 
 String() string 
 Signal()//用来区分其他 Stringer 
} 
代码清单 7-3 展示了 os.Signal 接口的声明。这个接口抽象了不同操作系统上捕获和报告
信号事件的具体实现。 
第二个字段被命名为 complete，是一个收发 error 接口类型值的通道，如代码清单 7-4
所示。 
代码清单 7-4  runner/runner.go：第 19 行到第 20 行
19 
 // complete 通道报告处理任务已经完成 
20 
 complete chan error 
这个通道被命名为 complete，因为它被执行任务的 goroutine 用来发送任务已经完成的信
号。如果执行任务时发生了错误，会通过这个通道发回一个 error 接口类型的值。如果没有发
生错误，会通过这个通道发回一个 nil 值作为 error 接口值。
第三个字段被命名为 timeout，接收 time.Time 值，如代码清单 7-5 所示。
代码清单 7-5  runner/runner.go：第 22 行到第 23 行
22 
 // timeout 报告处理任务已经超时 
23 
 timeout <-chan time.Time 
这个通道用来管理执行任务的时间。如果从这个通道接收到一个 time.Time 的值，这个程
序就会试图清理状态并停止工作。 
最后一个字段被命名为 tasks，是一个函数值的切片，如代码清单 7-6 所示。
代码清单 7-6  runner/runner.go：第 25 行到第 27 行
25 
 // tasks 持有一组以索引顺序依次执行的 
26 
 // 函数 
27 
 tasks []func(int) 
这些函数值代表一个接一个顺序执行的函数。会有一个与 main 函数分离的 goroutine 来执
行这些函数。 
现在已经声明了 Runner 类型，接下来看一下两个 error 接口变量，这两个变量分别代表