## PostgreSQL 并行写入堆表，如何保证时序线性存储 - BRIN索引优化     
##### [TAG 18](../class/18.md)
### 作者      
digoal      
### 日期      
2017-06-11      
### 标签      
PostgreSQL , BRIN , 块级索引 , 并行 , 序列    
----      
## 背景    
BRIN索引的原理很简单，每个数据块（或者每一段连续的数据块）记录了其中的元数据（最大值，最小值，平均值，COUNT，AVG，NULL值个数等），当每个数据块存储的数据范围错开（边界清晰）时，块级索引的效率就非常高。  
例如测试表  
```  
create table test(id int, info text);  
-- 对ID创建BRIN索引  
create index idx_test_id on test using brin(id);  
```  
ID边界清晰的例子：  
```  
数据块1：ID值范围 1-100  
数据块2：ID值范围 101-200  
数据块3：ID值范围 301-300  
......  
```  
ID边界模糊的例子：  
```  
数据块1：ID值范围 1-30 , 60-100  
数据块2：ID值范围 31-49, 101-130  
数据块3：ID值范围 49-59, 130-159, 160-200  
......  
```  
边界清晰，指不同的数据块没有交集，或者少量交集，而边界模糊，指数据块的交集很多，数据存储散乱。  
为什么边界模糊性能不好呢？  
例如  
```  
select * from test where id between 1 and 100;   
```  
这条SQL，在边界清晰时，搜索1号数据块即可。  
而在边界模糊时，需要搜索1,2,3个数据块。  
在实际业务中，我们可能会使用自增序列，作为时序字段，当串行（单进程）写入时，序列值和行号（堆表物理存储）线性相关，而当并行写入时，情况可能会变得糟糕（仅仅当使用了大步调时）。  
怎么优化呢？  
## 自增序列，并行写入的问题  
1、串行写入  
```  
create table test(id serial8, info text);  
insert into test (info) select 'test' from generate_series(1,1000000);  
```  
线性相关性 = 1  
```  
postgres=# analyze test;  
ANALYZE  
postgres=# select correlation from pg_stats where tablename='test' and attname='id';  
 correlation   
-------------  
           1  
(1 row)  
```  
BRIN性能  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from test where id between 1000 and 10000;  
                                                        QUERY PLAN                                                           
---------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.test  (cost=6.85..5761.69 rows=9264 width=13) (actual time=0.134..2.703 rows=9001 loops=1)  
   Output: id, info  
   Recheck Cond: ((test.id >= 1000) AND (test.id   Bitmap Index Scan on idx_test_id  (cost=0.00..4.53 rows=23256 width=0) (actual time=0.026..0.026 rows=1280 loops=1)  
         Index Cond: ((test.id >= 1000) AND (test.id rn;  
    ctid    |   id    |   rn    | ?column?   
------------+---------+---------+----------  
 (0,3)      |       4 |       3 |        1  
 (0,4)      |       3 |       4 |       -1  
 (0,28)     |      29 |      28 |        1  
 (0,29)     |      28 |      29 |       -1  
 (0,39)     |      40 |      39 |        1  
 (0,40)     |      39 |      40 |       -1  
 (0,66)     |      67 |      66 |        1  
 (0,67)     |      66 |      67 |       -1  
 (0,110)    |     111 |     110 |        1  
 (0,111)    |     110 |     111 |       -1  
 (1,1)      |     189 |     186 |        3  
 (1,2)      |     190 |     187 |        3  
 (1,3)      |     191 |     188 |        3  
 (1,4)      |     192 |     189 |        3  
 (1,5)      |     193 |     190 |        3  
 (1,6)      |     194 |     191 |        3  
 (1,7)      |     195 |     192 |        3  
 (1,8)      |     196 |     193 |        3  
 (1,9)      |     197 |     194 |        3  
 (1,10)     |     198 |     195 |        3  
 (1,11)     |     199 |     196 |        3  
 (1,12)     |     200 |     197 |        3  
 (1,13)     |     201 |     198 |        3  
 (1,14)     |     202 |     199 |        3  
 (1,15)     |     203 |     200 |        3  
 (1,16)     |     204 |     201 |        3  
 (1,17)     |     205 |     202 |        3  
 (1,18)     |     206 |     203 |        3  
 (1,19)     |     207 |     204 |        3  
 (1,20)     |     209 |     205 |        4  
 (1,21)     |     210 |     206 |        4  
 (1,22)     |     212 |     207 |        5  
 (1,23)     |     220 |     208 |       12  
 (1,24)     |     223 |     209 |       14  
 (1,25)     |     226 |     210 |       16  
 (1,26)     |     229 |     211 |       18  
```  
BRIN性能  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from test where id between 1000 and 10000;  
                                                        QUERY PLAN                                                           
---------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.test  (cost=6.83..5952.29 rows=9204 width=13) (actual time=0.073..2.687 rows=9001 loops=1)  
   Output: id, info  
   Recheck Cond: ((test.id >= 1000) AND (test.id   Bitmap Index Scan on idx_test_id  (cost=0.00..4.53 rows=22764 width=0) (actual time=0.033..0.033 rows=1280 loops=1)  
         Index Cond: ((test.id >= 1000) AND (test.id <= 10000))  
         Buffers: shared hit=2  
 Planning time: 0.086 ms  
 Execution time: 3.185 ms  
(11 rows)  
```  
3、并行写入，放大序列步调，散列问题出现  
```  
postgres=# drop table test;  
DROP TABLE  
postgres=# create table test(id serial8, info text);  
CREATE TABLE  