and GCS [9, 55, 67, 68, 78]. In the case of an insider threat,
we assume that the insider is a rogue RV operator (not a
developer), who does not have access to control program
1The attacker may acquire such knowledge via a program vetting tool
(such as RVFUZZER).
USENIX Association
28th USENIX Security Symposium    427
𝑧𝑦𝑥ϕ: rollθ: pitchψ: yaw θϕψx-axis Cascading Controllerሷ𝑟𝑥ሶ𝑟𝑥ሷ𝑥𝑥ሶ𝑥𝑥ሷ𝑘𝑥𝑟𝑥POSController𝑥𝑥𝑘𝑥ሶ𝑘𝑥𝑜𝑥VELControllerACCELControllerPhysicalOperationsMissionParameterSensorsource code and cannot update the control program ﬁrmware.
Attack Model Justiﬁcations Our attack model is realistic
(and attractive) to attackers for the following reasons: (1) Such
an attack incurs a very small footprint – just one innocent-
looking command, without requiring code injection/trojaning,
memory corruption, or sensor/GPS spooﬁng; (2) The attack
can still be launched even after the control program has been
hardened against traditional software exploits [1,2,39,52]; (3)
The attack looks like an innocent “accident” because the ma-
licious parameter value passes the control program’s validity
check. In some cases (i.e., range speciﬁcation bugs), it is even
in the valid range set in the control program’s speciﬁcation.
Why would the attacker bother to manipulate control pa-
rameter values, instead of just taking control of, or crashing
the vehicle? A key observation provides the answer: If the
attacker is not aware of – and hence does not manipulate –
illegitimate-but-accepted control parameter values, it would
actually not be easy to disrupt or crash an RV with minimum
footprint2. This is because both the RV control program and
control model already achieve a level of robustness for the
RV to resist being commanded into instability or danger: The
control program can identify and reject many illegitimate
commands; and the control model can ﬁlter or mitigate the
impacts of some commands that escape the control program’s
check [11, 48]. Moreover, an internal attacker is also moti-
vated to exploit illegitimate control parameter values that are
erroneously considered normal in the RV’s speciﬁcation (i.e.,
range speciﬁcation bugs), as the attacker could evade attack in-
vestigation by claiming that he/she was following RV control
speciﬁcation when issuing the command in question.
We do acknowledge that there exist scenarios where at-
tackers can successfully launch attacks without exploiting
input validation bugs. For example, an insider could hijack an
RV by changing its trajectory, when working alone without a
co-operator (who might otherwise catch the attack in action).
4 RVFUZZER Design
In this section, we present the design of RVFUZZER. We ﬁrst
give an overview of RVFUZZER’s architecture (Section 4.1)
and then present detailed design of two key components of
RVFUZZER: (1) the control-guided instability detector that
monitors the vehicle’s control state to detect controller mal-
function (Section 4.2) and (2) the control-guided input muta-
tor that generates control program inputs for efﬁcient program
testing (Section 4.3).
4.1 Overview
RVFUZZER is designed to (1) detect physical instability of
the RV during testing and (2) generate test inputs iteratively to
2The minimum footprint would help avoid detection before the attack
succeeds.
Figure 3: Overview of RVFUZZER.
achieve high testing efﬁciency and coverage. Fig. 3 presents
an overview of RVFUZZER, which consists of four main com-
ponents: a GCS program, the subject control program, a sim-
ulator, and a control-guided tester – the core component of
RVFUZZER. The roles of the ﬁrst three components are as fol-
lows: the GCS software is responsible for issuing RV control
parameter-change commands; the subject control program, as
the testing target, controls the operations of the (simulated)
RV; and the simulator emulates the physical vehicle and its
operating physical environment. We note that (1) the GCS
and RV control programs are from real-world GCS and RV;
and (2) our simulators [7, 8] are widely adopted for robotic
vehicle design and testing.
RVFUZZER’s control-guided tester consists of two sub-
modules: (1) control instability detector and (2) control-
guided input mutator. During testing, the control instability
detector detects non-transient physical disturbances of the
target RV (e.g., crash and deviation), as indication of control
program execution anomaly caused by an input validation
bug. The control-guided input mutator is a feedback-driven
input mutator for efﬁcient mutation of control parameter and
environmental factor values. Using the results of the control
instability detector as feedback, the mutator adaptively mu-
tates control parameter values via a well-deﬁned RV control
interface (i.e., GCS commands created and issued by the GCS
software). In addition, it mutates environmental factors (e.g.,
wind) by re-conﬁguring the simulator.
4.2 Control Instability Detector
The goal of the control instability detector is to continuously
monitor RV control state to determine if a speciﬁc GCS com-
mand has induced non-transient physical disturbance. Such a
physical disturbance can be considered as an indication of an
input validation bug. We note that input validation bugs may
not lead to program crash, a common indicator of traditional
bugs (e.g., memory corruption).
We ﬁrst deﬁne a rule to detect physical disturbances, which
is tailored for input validation bugs. We then describe the
mechanism to monitor the RVFUZZER’s 6DoF control states
for detecting such a disturbance.
Indication of Control State Deviation Exploitation of an
input validation bug will cause an RV’s failure to stabilize
428    28th USENIX Security Symposium
USENIX Association
Input to sensorsOutput to actuatorsSimulatorTargetControlProgramControl stateoutputMutated parameterinput commandControl InstabilityDetectorControl-guidedInput MutatorGCS SoftwareMutated environmental factors Control-guided Tester𝑓(𝑠)Control stateMutatedparameterits control states and/or complete its mission. To accurately
detect bug-induced physical disturbance, RVFUZZER must be
equipped with the capability of control state deviation detec-
tion. Among the possible physical disturbances experienced
by an RV, there are two types of control state deviation: (1)
observed state deviation and (2) reference state deviation. Ac-
cordingly, we deﬁne a detection rule to determine if one of
the two types of control state deviation has occurred.
The ﬁrst type – observed state deviation – is the case where
a controller (e.g., the primitive x-axis velocity controller) fails
to stabilize its observed state (x(t)) according to its reference
state (r(t)). In the theoretical control model, a controller al-
ways tries to keep x(t) close to r(t) (Section 2). Consequently,
if the difference between x(t) and r(t) keeps increasing and
exceeds a certain threshold, the observed state will be con-
sidered deviating from the reference state. To quantify the
observed state deviation, we leverage the integral absolute
error (IAE) formula [47] which is widely used as a stability
metric in control systems.
(cid:90) t+w
|r(s)− x(s)|
t
w
deviation(t) =
ds
(1)
Given a time window w and starting from a certain time
instance t, the formula quantiﬁes the level of deviation
(deviation(t)). If deviation(t) is larger than a pre-determined
threshold τ, our rule will determine that there is a control state
deviation starting at t. We will describe how to experimentally
determine w and τ for each 6DoF control state in Appendix A.
The second type – reference state deviation – is the case
where an RV deviates from its given mission. A controller is
expected to adjust its reference state to track its mission. If
a controller fails to do that, it is considered malfunctioning.
To detect such a deviation, our rule will check whether the
difference between the reference state and the mission target
becomes persistently greater than a threshold.
We note that our detection rule only considers non-transient
control state deviation. An RV may experience transient con-
trol state deviation during normal operation but can effectively
recover from it, thanks to the robustness features of the con-
trollers such as the extended Kalman ﬁlter [46, 51, 60].
Control Instability Detection We now apply our “observed-
reference” and “reference-mission” deviation determination
rule to detect control instability. During a test mission, the
control program readily logs all its 6DoF control states (Sec-
tion 2). The log data can be retrieved by the GCS software,
which will then be accessed by the Control Instability Detec-
tor and applied to the evaluation of the detection rule (Fig.3).
Note that the control states include those of the three primitive
controllers (for position, velocity, and acceleration control)
inside each 6DoF controller; and each primitive controller
logs its observed, reference and mission states. As such, the
Control Instability Detector can apply the detection rule to
detect control state deviation at any primitive controller.
4.3 Control-Guided Input Mutator
A software testing system needs to judiciously generate pro-
gram inputs to achieve high bug coverage while reducing the
number of the subject program’s test runs. In other words,
the set of generated testing inputs should be representative to
produce the same or similar results when other untested inputs
were provided to the program. We ﬁrst deﬁne RVFUZZER’s
input mutation space (i.e., types and value ranges of dynam-
ically adjustable control parameters). We then describe our
control-guided input mutation strategy to generate representa-
tive testing inputs, with consideration of environmental factors
that affect the RV operation and control.
Our input generation method considers both control pa-
rameters and environmental factors3. For control parameters,
we ﬁrst deﬁne their value mutation spaces (Section 4.3.1).
We then present the feedback-driven input mutator which
generates a reduced set of control parameter-change test in-
puts (Section 4.3.2). The mutator also mutates the external
environmental factors and tests the control program under
different combinations of input control parameter values and
environment factor values.
4.3.1 Control Parameter Mutation Space
The input mutation space of the subject control program con-
sists of: (1) the list of dynamically adjustable control parame-
ters, (2) the range of all possible values for each parameter,
and (3) the default value of each parameter.
The list of control parameters is obtained from the speciﬁ-
cation of control program and the GCS command interface.
We note that this is public information even for a close-source
control program. The three most popular control software
suites (i.e., ArduPilot [15], PX4 [24], and Paparazzi [23])
all support a common parameter tuning interface deﬁned in
MAVLink [21], the de facto protocol for RV-GCS communi-
cations.
The value ranges of control parameters can be decided (1)
by the data type of the control parameter and (2) by polling
the control program itself. For a control parameter, its data
type generically sets its value range. For example, the range
of a 32-bit integer parameter is [−231,231 − 1]. Interestingly,
the ranges of many control parameters can be narrowed by
polling the control program. This can be done by ﬁrst sending
a parameter-change command with a very large/small value;
and then querying the actual value of that parameter, which
now becomes the maximum/minimum value of the parameter
deﬁned in the control program. While the possibility of such
a probe is speciﬁc to control program implementation, we do
observe such implementation logic in ArduPilot and PX4.
The mutator also selects a default value within the range
of each control parameter. Such a default value will be used
3Environmental factors are not program input but physical context in
which the RV operates.
USENIX Association
28th USENIX Security Symposium    429
in the input space search during mutation (Section 4.3.2). We
note that the set of default values of control parameters is
normally made available by RV vendors (e.g., 3DR, DJI, and
Intel), as a guidance to RV users when tuning the control
parameters.
4.3.2 Feedback-Driven Parameter Input Mutator
RVFUZZER’s input mutator accepts two inputs: the control
parameter mutation space and the result of the Control Insta-
bility Detector from the previous run of the control program.
The output of the mutator is the testing input for the program’s
next run. The efﬁciency of the control program vetting pro-
cess depends on how well the mutated inputs are generated to
trigger input validation bugs without launching too many pro-
gram test runs with different inputs. To explain our mutation
strategy and methods, we ﬁrst introduce the underlying intu-
ition of our strategy and then describe our feedback-driven
testing process with two steps: one-dimensional mutation and
multi-dimensional mutation.
Input Space Reduction Strategy
The purpose of
RVFUZZER is to ﬁnd vulnerable – i.e., illegitimate but ac-
cepted – values for each dynamically adjustable control pa-
rameter. However, it is infeasible to test all possible values
of a parameter. To improving testing efﬁciency, RVFUZZER
must be able to selectively skip certain ranges of parameter
values, if they lead to the same or similar outcome as the tested
values. The value range-skipping idea is feasible thanks to the
following observation: When control instability starts to be
observed while increasing (decreasing) the value of a control
parameter, further increase (decrease) of the parameter value
will only maintain or intensify the instability.
We note that the aforementioned observation is generally
valid. More speciﬁcally, in a control model, controllers and
ﬁlters can be lumped together as part of its dynamics. Based
on Root Locus [54], the trajectory of the loci always follows
some asymptote. Hence, the change of a parameter will cause
a monotonic change in stability. Sensor calibration can be
considered as a constant disturbance, which will cause system
response to degrade as the magnitude of the disturbance in-
creases. Mission parameters will have different effects: Some
can be grouped as part of the dynamics based on Root Locus;
Some others, such as angle limitations, could cause an exces-
sive response that introduces undesirable overshoot. This can
be viewed as an integral windup, with a larger limit causing a
larger overshoot.
Based on this observation, we propose two features for
the mutator. (1) It will report valid/invalid value ranges —
not individual values. Such a range will have a lower (min-
imum) and upper (maximum) bound. Any parameter value
outside the range will cause control instability. (2) The mu-
tator will be driven by feedback from the Control Instability
Detector (Section 4.2) to determine the next testing input.
Such feedback-driven mutation will be able to skip certain
parameter value ranges for efﬁciency.
One-dimensional Mutation
In the ﬁrst step of control
software vetting, RVFUZZER’s input mutator determines the
valid/invalid range for each control parameter independently.
The mutator isolates the impact of the target parameter on
the control state deviation by setting the values of all other
parameters to their default values.
We present the one-dimensional mutation procedure in
Algorithm 1. For each target control parameter, the mutator
determines the upper and lower bounds of the valid value
range by utilizing a mutation-based binary search method.
We elaborate the method (Algorithm 1) to ﬁnd the upper
bound of the valid range as follows. We note that the mutator
follows a syntactically similar method to ﬁnd the lower bound
of the valid range.
To ﬁnd the upper bound, the mutator will iteratively launch
test runs, using the binary search method to set the next run’s
input value and to update the working range. It will set the ini-
tial min-limit of the working range as the default value of the
target parameter; the initial max-limit of the working range as
the maximum possible value of the target parameter (Section
4.3.1); and the initial input value as the mid-point between the
min-limit and max-limit values. Thereafter, in each run, the
mutator obtains the output of the Control Instability Detector
under the current input value, and updates the working range
in the next run by considering the following two cases based
on the detector’s output (Line 14).
• Case 1 (Line 17-18): If the mutator observes that the cur-
rent input value does not cause any deviation, it skips the