### 优化后的文本

我们设计了两种扫描模式：一种是全模式，它扫描 Oyster 病毒数据库中的所有模式；另一种是常规模式，它仅扫描常规模式。此外，我们还设计了两种面向用户的取证模式，以适应不同用户群体和部署场景的需求。这两种取证模式被称为“即时”模式和“延后”模式。Avfs 可以在挂载时通过选项选择任意组合的扫描模式和取证模式。我们在 4.2.1 节中详细描述了两种扫描模式，在 4.2.2 节中描述了取证模式。

#### 4.2.1 扫描模式

常规模式和多部分（多态）模式已在 3.1 节中进行了详细说明。

- **全模式**：Oyster 在全模式下会扫描输入数据中所有模式（包括常规模式和多部分模式），利用其完整的 Trie 结构。由于多部分模式可能跨越文件的多个页面，因此扫描多部分模式可能会导致速度较慢。随机写入文件的不同位置会导致整个文件被反复扫描。在这种模式下，Oyster 会扫描数据库中的所有模式（包括使用病毒定义的多部分模式），从而保证准确性。
- **常规模式**：Oyster 在常规模式下仅扫描常规模式。这种模式通过只扫描常规模式来换取更高的速度，但牺牲了一定的准确性。

对于未知文件和干净文件，全模式的语义有所不同。对于未知文件的顺序读取，我们始终会在前一页的末尾保存状态，并随着文件的逐步扫描最终标记为干净。如果进行随机读取，则采用不同的策略。如果随机读取的位置在当前已扫描页之后，我们会触发中间页的扫描。如果随机读取的位置在当前已扫描页之前，则忽略扫描，因为这部分文件已经扫描过。

顺序写入的处理方式与顺序读取相同，但随机写入的情况略有不同。多部分模式（如 P = {p1, p2, p3}）难以检测，因为可能会出现以下情况：假设一个多部分模式 P = {p1, p2, p3} 和一个空文件。第一次写入可能在第 2 页生成 p2。扫描器会扫描到第 2 页并认为文件是干净的。接下来的写入可能在第 3 页生成 p3。最后在第 1 页写入 p1 时，文件中就会包含完整的病毒。为了避免这种情况，我们在每次随机写入时都应使之前的写入状态失效，并重新扫描整个文件以检测病毒。

我们实现了这种技术，即在每次随机写入时使用 Oyster 的多部分 Trie 结构扫描整个文件。然而，这种方法效率低下，因为某些程序（如 ld）会在文件的两端随机写入，导致多次重扫整个文件。因此，我们的当前实现是在文件的 inode 上设置一个 `full-scan-on-close` 标志，当该标志被设置时，文件在关闭时会完全扫描多部分病毒。如果在当前扫描页之前有随机写入，该标志会被设置，并且仅对常规模式进行带缓冲的扫描。带缓冲的扫描通过在相关页的两侧扩展足够大的数据缓冲区来确保跨页边界的模式能够被检测到。缓冲区的大小等于 Oyster 数据库中最长模式的长度（目前为 2,467 个字符）。图 9 展示了带缓冲的扫描实现。

![带缓冲的扫描](Figure 9: 带缓冲的扫描实现)

我们有一个可配置的参数 `max-jump`，用于决定何时设置 `full-scan-on-close` 标志。向前随机写入距离当前扫描页小于 `max-jump` 的页时，会扫描所有病毒；否则，仅扫描常规模式，并设置 `full-scan-on-close` 标志。如果设置了该标志，除了正在进行随机写入的进程外，其他所有进程将无法访问该文件。当文件关闭时，状态会被持久化存储在文件的状态文件中。如果状态表明最后一页已扫描，则文件被安全地标记为干净；否则，状态表示文件的最后已扫描页。

一旦文件被标记为干净，新的读取不会导致额外的扫描。对干净文件的追加操作与对未知文件的顺序写入相同。对文件中间的写入也与对未知文件的写入类似。

常规模式几乎与全模式相同，只是它仅扫描常规模式。对未知或干净文件的读取以及顺序写入的处理方式与全模式相同。向当前扫描页之后的随机写入会触发中间页的扫描，而向后的写入则使用带缓冲的扫描。当前最大模式长度小于一页的大小，因此带缓冲的扫描最多只会增加一页的扫描开销。这个开销比全模式小，因为在全模式下我们需要扫描整个文件以检测多部分病毒。对于大文件，全模式比常规模式慢。常规模式适用于需要高性能随机读写的情况，而全模式适用于需要检测多部分模式的情况。

#### 4.2.2 取证模式

如果某个进程试图向文件系统写入病毒，应尽早通知该进程。同样，如果某个进程正在从受感染的文件中读取数据，则读取必须失败。这些需求促使我们开发了即时模式，该模式不允许病毒写入磁盘，并返回错误以便进程采取补救措施。即时模式特别适合单用户环境，其中防止病毒是首要需求。

除了即时模式，我们还开发了另一种称为延后模式的取证模式，该模式推迟错误通知并记录恶意活动。这种模式适用于大型企业服务器，其中多个用户并发访问数据。除了实时病毒防护外，该模式还提供：
1. 通过备份文件来保证数据一致性；
2. 追踪尝试向文件系统写入病毒的进程的机制。我们记录诸如进程信息、攻击时间及受感染文件等证据，以便事后调查。

当 Avfs 挂载在现有文件系统上时，底层文件系统可能已经包含一些受感染的文件。这些现有的受感染文件会在读取时被检测到。在这种情况下，文件会被隔离，以防止任何进程访问。另一种病毒传播的可能性是通过尝试向文件系统写入病毒的进程。在即时模式下，这些写入操作会在 Avfs 层被捕获，并不允许传播到底层文件系统。此类写入权限被拒绝，并立即通知违规进程相应的错误。文件保持一致到最后一次成功的写入。然而，文件可能包含多部分病毒或跨越页边界的病毒。多部分病毒只有在其所有部分按正确顺序出现在文件中时才会被检测到。同时，即使文件包含多部分病毒的一个部分，也不能将其标记为干净。因此，如果大部分多部分病毒已被写入并在写入最后一部分时被检测到，文件仍可能因先前的部分病毒而受损。如果常规病毒跨越页边界，则只有完成病毒的最后一部分写入会被拒绝。

延后模式对现有受感染文件的处理方式与即时模式相同。这些文件会被隔离，并禁止访问。然而，尝试写入病毒的行为处理方式不同。文件可以同时有多个打开实例。文件的打开会导致一个实例的创建，而关闭该实例会导致实例终止。我们将一个会话定义为从文件首次打开到最后一次关闭的时间段。我们在会话的第一次写入时备份文件。如果在此会话期间创建了病毒，我们可以恢复到备份，使文件恢复到一致状态。这里只有一个版本的文件，因此无法恢复到超过一个会话前的版本。如果多部分病毒的部分在多个会话中写入，我们无法恢复到完全干净的版本（不包含任何病毒部分），因为我们无法在所有部分写入之前检测到病毒。通过多个文件版本，这个问题可以轻松解决。

当检测到尝试写入病毒时，我们会记录事件时间和违规进程的进程标识符（PID）。我们不会立即返回错误给进程，而是让进程相信写入成功并继续写入。然而，我们禁止违规进程对该文件的读取访问，以防止其读取所写的病毒。此外，我们也禁止所有其他进程对该文件的所有访问（读、写、打开）。在会话关闭时，我们将受感染文件重命名为一个新的名称，附加上记录的 PID 和时间戳作为违规证据。然后，我们将保存的备份重命名为原始名称，以确保数据一致性。保存的证据文件可用于启动对事件的调查。

### 5 相关工作

目前市面上有许多反病毒系统。大多数是商业产品，例如 Symantec 的 Norton Antivirus [18]、McAfee Virusscan [13]、Sophos [17]、Kaspersky Lab 的 Anti-Virus [9]、Computer Associates 的 eTrust [4] 等。为了保护商业机密，这些产品的内部细节很少公开。它们的开发是封闭的，没有机会进行同行评审。虽然这些产品的内部结构是商业机密，但广告信息和白皮书暗示了它们的一般结构。大多数商业扫描器使用病毒签名数据库来检测病毒。这些扫描器拥有庞大的病毒数据库，范围从 65,000 到 120,000 个模式不等，并且经过长时间积累。它们还使用启发式引擎进行扫描。启发式引擎可以排除不可能包含病毒的文件，并仅扫描可疑文件。这类启发式方法通常包括识别可执行文件类型、适当的文件大小以及仅扫描文件的特定区域。

一些商业扫描器提供实时病毒防护。实时防护涉及在文件使用时对其进行扫描。这是通过拦截 open、close 或 exec 系统调用并在这些调用被调用时扫描整个文件来实现的。在 open 系统调用时进行扫描只能检测到已经受感染的文件。如果在 open 操作时没有病毒但在 open 操作后写入了病毒，on-open 扫描将无法检测到。因此，大多数实时扫描器也会在文件关闭时进行扫描。这种方法有三个缺点：首先，病毒只能在写入文件后才能被检测到。如果文件无法修复，关键数据将无法恢复。其次，在文件关闭前，多个进程可以访问文件中的病毒。第三，文件在打开和关闭时都会被扫描两次。

ClamAV [11] 是一个开源系统，构成了我们扫描引擎的基础。ClamAV 维护了一个最新的病毒定义数据库，已被许多组织采用为主要的病毒扫描器，并成为几个开源项目的基础。

Dazuko 是一个内核模块，为第三方应用程序提供文件访问控制接口 [6]。Dazuko 最初由 H+BEDV Daten-technik GmbH 开发，但后来作为自由软件发布，以鼓励开发并允许用户将其编译到自定义内核中。Dazuko 拦截 open、close 和 exec 系统调用，并在这些调用期间将控制权传递给病毒扫描器以执行实时病毒扫描。Clamuko [11]（来自 ClamAV 的实时扫描器）和 H+BEDV [7] 是两个使用 Dazuko 的病毒扫描器。使用像 Dazuko 这样的系统的缺点是其内核模块必须与用户级病毒扫描器通信，从而降低了性能。通信使用套接字或设备，数据还需要穿越协议层。最后，还需要在内核和用户级之间进行数据复制。

Internet 内容适配协议 (ICAP) [8] 是一种旨在将特定基于 Internet 的内容卸载到专用服务器上的协议，从而释放资源并标准化功能实现方式。ICAP 服务器专注于提供特定功能，如垃圾邮件过滤或病毒扫描。这种方案的缺点是性能问题：数据需要通过网络传输到病毒扫描服务器。

### 6 性能评估

我们在各种系统条件下评估了 Avfs 的性能，并将其与其他商业和开源反病毒系统进行了比较。

所有基准测试都在 Red Hat Linux 9 上进行，内核版本为 vanilla 2.4.22，运行在 1.7GHz Pentium 4 处理器上，配备 1GB RAM。使用的硬盘是 20GB 7200 RPM Western Digital Caviar IDE 硬盘。为了确保冷缓存结果，我们在每次运行之间卸载了实验所用的文件系统。为了减少 ZCAV 导致的 I/O 影响，我们将测试放在靠近磁盘外部的一个分区上，该分区大小刚好满足测试数据 [5]。我们记录了所有测试的经过时间、系统时间和用户时间。我们计算了等待时间，即经过时间减去 CPU 和用户时间。等待时间主要是由于 I/O，但也可能受到调度等因素的影响。每个测试至少运行 10 次。我们使用 Student-t 分布计算了平均经过时间、系统时间和用户时间的 95% 置信区间。在每种情况下，置信区间的半宽均小于平均值的 5%。用户时间不受 Avfs 影响，因为只修改了内核，因此我们不讨论用户时间的结果。

在 6.1 节中，我们描述了 Avfs 使用的配置。6.2 节描述了我们用来测试 Avfs 的工作负载。我们在 6.3 节中描述了病毒数据库的特性。6.4 节展示了 Am-Utils 编译的结果。6.5 节展示了 Postmark 的结果。最后，在 6.6 节中，我们将我们的扫描引擎与其他扫描引擎进行了比较。

#### 6.1 配置

我们使用了所有扫描模式和取证模式的组合来评估 Avfs。

我们使用了两种扫描模式：
- **FULL**：扫描所有模式，包括多部分模式。
- **REGULAR**：仅扫描常规模式。

每种扫描模式都与我们的两种取证模式一起测试：
- **IMMEDIATE**：此模式立即返回错误给进程，并不允许恶意写入到达磁盘。
- **DEFERRED**：此模式备份文件，以便在感染后恢复到一致状态，并提供信息以追踪恶意活动。

除非另有说明，所有测试均使用默认的 Trie 最小高度为 3 和最大高度为 3。最小高度为 3 对所有数据库提供了最佳性能，最大高度为 3 对小规模数据库（如 1K、2K、4K 和 8K 模式）提供了最佳性能。我们将在 6.4 节中展示如何调整最大高度参数以提高大规模数据库的性能。

对于支持实时扫描的商业反病毒产品，我们运行了 Am-Utils 编译和 Postmark 基准测试。Clamuko 和 H+BEDV 属于这一类。Sophos 和其他一些商业病毒扫描器不支持简单的实时扫描，因此我们使用命令行工具将我们的扫描引擎与这些产品在大文件上的性能进行了比较。

#### 6.2 工作负载

我们在系统上运行了三种类型的基准测试：CPU 密集型基准测试、I/O 密集型基准测试以及与不支持实时扫描的反病毒产品的扫描引擎进行比较的基准测试。

第一个工作负载是 Am-Utils [14] 的构建。我们使用了 Am-Utilities 6.1b3，它包含超过 60,000 行 C 代码，分布在 430 个文件中。构建过程开始时会运行数百个小配置测试以检测系统特性，然后构建一个共享库、十个二进制文件、四个脚本和文档，总共生成 152 个新文件和 19 个新目录。尽管 Am-Utils 编译是 CPU 密集型的，但它包含了大量的文件系统操作，包括创建多个文件以及对这些文件进行随机读写。对于每个文件，都会创建一个状态文件，并在延后取证模式下创建文件备份。Am-Utilities 基准测试充分锻炼了 Avfs。我们使用支持的所有四种扫描模式和取证模式组合运行了这个基准测试。这个工作负载展示了用户在正常使用 Avfs 时可能遇到的性能影响。在这个基准测试中，25% 的操作是写入，22% 是 lseek 操作，20.5% 是读取，10% 是打开操作，10% 是关闭操作，其余操作是 readdir、lookup 等的混合。

我们选择的第二个工作负载是 Postmark [10]。Postmark 模拟了电子邮件服务器的操作，执行一系列文件系统操作。