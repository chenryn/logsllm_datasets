### `sem_open` Function

#### Syntax
```c
#include <semaphore.h>

sem_t *sem_open(const char *name, int oflag, mode_t mode, unsigned int value);
```
**Link with:** `-pthread`

#### Description
The `sem_open` function creates a new POSIX semaphore or opens an existing one. The semaphore is identified by the `name` argument. For details on how to construct the `name`, refer to `sem_overview(7)`.

- **oflag**: This argument specifies flags that control the operation of the call. These flags are defined in `<fcntl.h>`.
  - If `O_CREAT` is specified, the semaphore is created if it does not already exist. The owner (user ID) and group ownership (group ID) of the semaphore are set to the effective user ID and group ID of the calling process, respectively.
  - If both `O_CREAT` and `O_EXCL` are specified, an error is returned if a semaphore with the given `name` already exists.

- **mode**: This argument specifies the permissions to be placed on the new semaphore, similar to the `open(2)` function. Symbolic definitions for the permission bits can be obtained by including `<sys/stat.h>`. The permissions settings are masked against the process umask. Both read and write permissions should be granted to each class of user that will access the semaphore.

- **value**: This argument specifies the initial value for the new semaphore. If `O_CREAT` is specified and a semaphore with the given `name` already exists, then `mode` and `value` are ignored.

#### Return Value
- On success, `sem_open` returns a pointer to the new semaphore, which is used when calling other semaphore-related functions.
- On error, `sem_open` returns `SEM_FAILED`, and `errno` is set to indicate the error.

#### Errors
- **EACCES**: The semaphore exists, but the caller does not have permission to open it.
- **EEXIST**: Both `O_CREAT` and `O_EXCL` were specified in `oflag`, but a semaphore with this `name` already exists.
- **EINVAL**: 
  - `value` was greater than `SEM_VALUE_MAX`.
  - `name` consists of just "/", followed by no other characters.
- **EMFILE**: The per-process limit on the number of open file descriptors has been reached.
- **ENAMETOOLONG**: `name` was too long.
- **ENFILE**: The system-wide limit on the total number of open files has been reached.
- **ENOENT**: 
  - The `O_CREAT` flag was not specified in `oflag` and no semaphore with this `name` exists.
  - `O_CREAT` was specified, but `name` wasn't well-formed.
- **ENOMEM**: Insufficient memory.

#### Attributes
For an explanation of the terms used in this section, see `attributes(7)`.

| Interface   | Attribute  | Value  |
|-------------|------------|--------|
| `sem_open`  | Thread safety | MT-Safe |

#### Conforming to
POSIX.1-2001, POSIX.1-2008.

#### See Also
- `sem_close(3)`
- `sem_getvalue(3)`
- `sem_post(3)`
- `sem_unlink(3)`
- `sem_wait(3)`
- `sem_overview(7)`

### Colophon
This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at https://www.kernel.org/doc/man-pages/.

---

### `atan` Function

#### Synopsis
```c
#include <math.h>

double atan(double x);
float atanf(float x);
long double atanl(long double x);
```
**Link with:** `-lm`

#### Feature Test Macro Requirements for glibc
- `atanf()`, `atanl()`:
  - `_ISOC99_SOURCE` || `_POSIX_C_SOURCE >= 200112L` || `_DEFAULT_SOURCE` (since glibc 2.19)

### `copysign` Function

#### Synopsis
```c
#include <math.h>

double copysign(double x, double y);
float copysignf(float x, float y);
long double copysignl(long double x, long double y);
```
**Link with:** `-lm`

#### Feature Test Macro Requirements for glibc
- `copysign()`, `copysignf()`, `copysignl()`:
  - `_ISOC99_SOURCE` || `_POSIX_C_SOURCE >= 200112L` || `_DEFAULT_SOURCE` (since glibc 2.19)

### `rtnetlink` Macros

#### Synopsis
```c
#include <linux/rtnetlink.h>
#include <net/if.h>
#include <sys/socket.h>
#include <sys/types.h>

int rtnetlink_socket = socket(AF_NETLINK, int socket_type, NETLINK_ROUTE);

int rta_ok(struct rtattr *rta, int attrlen);
void *rta_data(struct rtattr *rta);
unsigned int rta_payload(struct rtattr *rta);
struct rtattr *rta_next(struct rtattr *rta, unsigned int attrlen);
unsigned int rta_length(unsigned int length);
unsigned int rta_space(unsigned int length);
```

#### Description
All `rtnetlink(7)` messages consist of a `netlink(7)` message header and appended attributes. The attributes should be manipulated only using the macros provided here.

- **rta_ok(rta, attrlen)**: Returns true if `rta` points to a valid routing attribute; `attrlen` is the running length of the attribute buffer. If not true, assume there are no more attributes in the message, even if `attrlen` is nonzero.
- **rta_data(rta)**: Returns a pointer to the start of this attribute's data.
- **rta_payload(rta)**: Returns the length of this attribute's data.
- **rta_next(rta, attrlen)**: Gets the next attribute after `rta`. Calling this macro will update `attrlen`. Use `rta_ok` to check the validity of the returned pointer.
- **rta_length(len)**: Returns the length required for `len` bytes of data plus the header.
- **rta_space(len)**: Returns the amount of space needed in a message with `len` bytes of data.

#### Conforming to
These macros are nonstandard Linux extensions.

#### Bugs
This manual page is incomplete.

#### Examples
Creating an `rtnetlink` message to set the MTU of a device:
```c
#include <linux/rtnetlink.h>
#include <net/if.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <string.h>

struct {
    struct nlmsghdr nh;
    struct ifinfomsg ifi;
    char attrbuf[512];
} req;

struct rtattr *rta;
unsigned int mtu = 1000;
int rtnetlink_sk = socket(AF_NETLINK, SOCK_DGRAM, NETLINK_ROUTE);

memset(&req, 0, sizeof(req));
req.nh.nlmsg_len = NLMSG_LENGTH(sizeof(req.ifi));
req.nh.nlmsg_flags = NLM_F_REQUEST;
req.nh.nlmsg_type = RTM_NEWLINK;
req.ifi.ifi_family = AF_UNSPEC;
req.ifi.ifi_index = interface_index;
req.ifi.ifi_change = 0xffffffff; // Set to all ones to change all attributes

rta = (struct rtattr *)(((char *)&req) + NLMSG_ALIGN(req.nh.nlmsg_len));
rta->rta_type = IFLA_MTU;
rta->rta_len = RTA_LENGTH(sizeof(mtu));
memcpy(RTA_DATA(rta), &mtu, sizeof(mtu));

req.nh.nlmsg_len = NLMSG_ALIGN(req.nh.nlmsg_len) + RTA_ALIGN(rta->rta_len);

// Send the message
sendto(rtnetlink_sk, &req, req.nh.nlmsg_len, 0, NULL, 0);
```

This example demonstrates how to create and send an `rtnetlink` message to set the MTU of a network interface.