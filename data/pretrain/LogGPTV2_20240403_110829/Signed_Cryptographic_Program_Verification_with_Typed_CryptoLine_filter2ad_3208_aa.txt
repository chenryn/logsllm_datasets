title:Signed Cryptographic Program Verification with Typed CryptoLine
author:Yu-Fu Fu and
Jiaxiang Liu and
Xiaomu Shi and
Ming-Hsien Tsai and
Bow-Yaw Wang and
Bo-Yin Yang
Signed Cryptographic Program Verification with Typed
CryptoLine
Institute of Information Science
College of Computer Science and
College of Computer Science and
Yu-Fu Fu
Academia Sinica
PI:EMAIL
Jiaxiang Liu
Software Engineering
Shenzhen University
PI:EMAIL
Xiaomu Shi
Software Engineering
Shenzhen University
PI:EMAIL
Ming-Hsien Tsai
Institute of Information Science
Academia Sinica
PI:EMAIL
Bow-Yaw Wang
Institute of Information Science
Academia Sinica
PI:EMAIL
Bo-Yin Yang
Institute of Information Science
Academia Sinica
PI:EMAIL
ABSTRACT
We develop an automated formal technique to specify and verify
signed computation in cryptographic programs. In addition to new
instructions, we introduce a type system to detect type errors in
programs. A type inference algorithm is also provided to deduce
types and instruction variants in cryptographic programs. In order
to verify signed cryptographic C programs, we develop a translator
from the GCC intermediate representation to our language. Using
our technique, we have verified 82 C functions in cryptography
libraries including NaCl, wolfSSL, bitcoin, OpenSSL, and BoringSSL.
CCS CONCEPTS
• Security and privacy → Logic and verification; • Theory of
computation → Verification by model checking; • Software
and its engineering → Formal software verification.
KEYWORDS
cryptographic programs; formal verification; model checking
ACM Reference Format:
Yu-Fu Fu, Jiaxiang Liu, Xiaomu Shi, Ming-Hsien Tsai, Bow-Yaw Wang,
and Bo-Yin Yang. 2019. Signed Cryptographic Program Verification with
Typed CryptoLine. In 2019 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’19), November 11–15, 2019, London, United
Kingdom. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/
3319535.3354199
1 INTRODUCTION
In 32-bit architectures, two 32-bit unsigned integers uH and uL
represent a 64-bit unsigned integer U = uH × 232 + uL. Let V =
vH ×232 +vL be a 64-bit unsigned integer represented by two 32-bit
unsigned integers vH and vL. It is straightforward to compute the
64-bit unsigned product of U and V . Specifically, [U × V] % 264 =
[uL ×vL +232×(uL ×vH +uH ×vL)]%264. In C99, such computation
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6747-9/19/11.
https://doi.org/10.1145/3319535.3354199
naturally arises when the unsigned product of two unsigned long
long variables is computed on 32-bit architectures. In this case,
only unsigned computation is required.
To obtain the signed product of two long long integers on
32-bit architectures is more involved. In 32-bit architectures, a 32-
bit signed integer sH together with a 32-bit unsigned integer sL
represent a 64-bit signed integer sH × 232 + sL. Let tH × 232 + tL be
another 64-bit signed integer represented by a 32-bit signed integer
tH and a 32-bit unsigned integer tL. The 64-bit signed product
of two 64-bit signed integers sH × 232 + sL and tH × 232 + tL is
hence [sL × tL + 232 × (sL × tH + sH × tL)] % 264. Note that sL × tL
is unsigned but sL × tH and sH × tL are signed. Both signed and
unsigned computation is needed to obtain the signed product.
Mixing signed and unsigned computation is in fact more compli-
cated than appeared. Since 32-bit signed and unsigned integers have
different ranges, one must ensure the absence of over- and under-
flow during computation. Moreover, signed integers have been used
to represent elements in large finite fields. In such representations,
mixing signed and unsigned computation is unavoidable. In order
to ensure functional correctness of cryptographic programs, a prac-
tical algorithm has to be developed to verify mixed computation in
various field and group operations used in cryptographic primitives.
In this paper, we propose an automated technique for verifying
mixed signed and unsigned computation in implementations of
various operations found in cryptographic primitives. We extend
the CryptoLine language with signed instructions. In order to dif-
ferentiate signed and unsigned expressions, a simple type system
is introduced. Type inference moreover is provided to annotate
types of variables and variants of instructions automatically. We
also extend verification algorithms for CryptoLine with signed
computation. Particularly, we employ Satisfiability Modulo Theo-
ries (SMT) solvers to verify the absence of overflow, underflow, and
range properties. Computer algebra systems also are used to check
algebraic properties in signed computation.
Our verification targets are signed C implementations of various
field and group operations in cryptographic primitives. Specifically,
we verify C implementations in NaCl, wolfSSL, bitcoin, OpenSSL,
and BoringSSL. To this end, we additionally build a translator from
the intermediate representation used in GNU compilers to Crypto-
Line. We identify a useful subset of the intermediate representation
Session 7D: Formal Analysis IIICCS ’19, November 11–15, 2019, London, United Kingdom1591termed gimpleCryptoLine, give formal semantics, and describe
how gimpleCryptoLine programs are translated to CryptoLine.
During verification, we expose a potential programming error
in NaCl 20110221 and have reported it. We would also like to point
out that the bitcoin cryptographic library is used by various cryp-
tocurrency such as Ethereum [20], Zcash [27], Ripple [25], and
Litecoin [22]. We verify 24 C functions for various field and group
operations of the secp256k1 curve used by bitcoin. We are not aware
of any prior work on verifying cryptographic C functions from cryp-
tocurrency. Moreover, the 32-bit implementation of Curve25519 in
wolfSSL represents field elements as 10 signed integers. The same
implementation is also found in OpenSSL [24] and LibreSSL [21].
To the best of our knowledge, this is the first formal verification
of signed C implementations in cryptographic libraries used in
industry.
We summarize our contributions as follows.
• We extend the domain specific language CryptoLine with
signed implementations for field and group operations in
cryptographic primitives;
• We develop practical techniques for verifying functional
• We build a translator from the intermediate representation
of GNU compilers to CryptoLine to enable the verification
of C implementations for cryptographic primitives;
• We report verification results of cryptographic C programs
correctness of signed CryptoLine programs;
from NaCl, wolfSSL, bitcoin, OpenSSL, and BoringSSL.
Related Work. The first semi-automatic verification work on real-
world cryptographic assembly implementations was proposed in [8].
The authors applied an SMT solver and a proof assistant to verify
an extensively annotated assembly implementation of the Mont-
gomery Ladderstep in 5 hours. The unsigned CryptoLine language
and its verification algorithm were proposed in [18] by extending
bvCryptoLine [28]. Our gimple translation is motivated by the
translator from LLVM intermediate representation to CryptoLine
developed in [14]. Vale [7, 10] is a tool and a high-level language for
the specification and verification of assembly codes. Jasmin [4] is
another framework for developing high-speed and high-assurance
cryptographic programs. Both tools use SMT solvers for verifica-
tion. When SMT solvers fail to verify a property, lemmas can be
added manually to help verification. In addition to SMT solvers,
our technique utilizes computer algebra systems to check algebraic
properties. We also verify widely used cryptographic C programs in
this work. HACL* [30] is a verified cryptography library implement-
ing the NaCl cryptographic API. Its implementation is written in
the high-level language F*. Its main objective is correctness rather
than efficiency. Subsequently, HACL* is not highly optimized (yet).
We focus on verifying optimized implementations in existing cryp-
tography libraries. The Fiat-Crypto project synthesizes correct C
cryptographic programs [9]. The performance of synthesized 64-bit
C programs for Curve25519 is comparable to an x86_64 assembly
implementation in BoringSSL. The project exploits a number of
features in the proof assistant Coq and requires significant human
intervention. Various implementations of algebraic operations, hash
functions, and random number generators have been formalized
and manually verified in proof assistants (see [1–3, 5, 6, 16, 17, 29]
string (bw−1bw−2 · · · b1b0)2 represents the integerw−1
represents the integer −bw−1 × 2w−1 +w−2
for examples). Our automated technique requires much less human
interaction and is friendlier to average cryptography programmers.
The paper is organized as follows. We review preliminaries in
Section 2. Section 3 presents CryptoLine with signed computation.
The translation from gimpleCryptoLine to CryptoLine is given in
Section 4. Section 5 reports experiments on cryptography libraries.
2 PRELIMINARY
Let Z and N denote the set of integers and positive integers respec-
tively. Using the binary representation of length w for integers, an
integer is represented by a bit string (bw−1bw−2 · · · b1b0)2 of w bits
bi ∈ {0, 1} for 0 ≤ i < w. In the unsigned interpretation, the bit
i =0 bi × 2i. In
the two’s complement signed interpretation, the same bit string
i =0 bi × 2i. For instance,
the bit string (111)2 denotes 7(= 22 + 21 + 20) under the unsigned
interpretation and −1(= −22 + 21 + 20) under the two’s comple-
ment signed interpretation. To interpret bit strings correctly, it is
essential to know their intended interpretations. We only consider
the unsigned and two’s complement signed interpretations.
3 CRYPTOLINE WITH SIGNED ARITHMETIC
CryptoLine is a domain specific language for modeling crypto-
graphic assembly programs and their specifications [18]. Modern
cryptography relies heavily on complex algebraic structures such
as large finite fields and groups. In elliptic curve cryptography,
for instance, a pair of field elements satisfying a curve equation
is a point on the elliptic curve. Points on the curve in turn form a
group. These field and group operations are frequently used and
thus critical to the performance of cryptosystems. In order to speed
up computation, assembly programs are written to implement vari-
ous field and group operations in practice. In OpenSSL, dedicated
ARMv8 assembly programs for NIST P256 can outperform corre-
sponding C implementations by 4 times! Indeed, a wide selection
of assembly programs can be found in OpenSSL for various cryp-
tosystems and architectures. If any of them computes incorrectly,
security of cryptosystems can be compromised. In order to improve
security of cryptosystems in use, CryptoLine is developed to help
programmers write correct cryptographic assembly programs.
The first challenge in modeling assembly programs is diver-
sity. Different architectures have different instruction sets, register
banks, condition flags, and even word sizes. In CryptoLine, a useful
set of instructions had been identified for modeling cryptographic
assembly programs [18]. Its semantics however assumed unsigned
representations. Programmers are hence forced to represent field
elements as limbs of unsigned integers. In order to allow signed
representations in cryptographic programs, we extend CryptoLine
with signed instructions. It turns out that we have to introduce
a type system with a type inference algorithm for the signed ex-
tension. The verification algorithm also needs to be expanded ex-
tensively. In this section, we explain our signed extension to the
CryptoLine language and its verification algorithm.
3.1 Syntax
We introduce a type system to track interpretations of variables and
constants in CryptoLine (Figure 1). Let w be a positive integer. The
Session 7D: Formal Analysis IIICCS ’19, November 11–15, 2019, London, United Kingdom1592Width
Type
::= 1 | 2 | 3 | · · ·
::= uint Width | sint Width
Figure 1: CryptoLine Type
type uint w corresponds to integers denoted by bit strings of length
w in the unsigned interpretation. Similarly, sint w corresponds to
integers denoted by bit strings of length w in the two’s complement
signed interpretation. A type only denotes a finite subset of integers.
Precisely, uint w denotes integers greater than −1 and less than 2w ;
sint w denotes integers greater than −2w−1 − 1 and less than 2w−1.
We use τ and τ for the lower and upper bounds of integers denoted
by the type τ. The type τ thus denotes the set {i ∈ Z : τ < i < τ}.
For instance, uint 4 = −1 and uint 4 = 16; sint 4 = −9 and sint 4 =
8. If an integer belongs to the set denoted by the type τ, the integer
is representable in τ. For conveniences, bit is short for uint 1.
Constants in CryptoLine are associated with a type. 15@uint 4
and (−1)@sint 4 denote the unsigned integer 15 and signed integer
−1 respectively. Both are represented by the bit string (1111)2,
though. Types of variables must be specified by declarations. For
instance, uint 32 x and sint 64 y declare a 32-bit unsigned variable
x and a 64-bit signed variable y respectively. An atom is either a
variable or a constant. A CryptoLine program consists of variable
declarations followed by instructions (Figure 2).
A typical instruction retrieves values from sources and stores
results in destinations. In mov v a, the value of the source a is stored
in the destination v. Depending on the value of c, cmov v c a0 a1
stores either value of sources a0 or a1 in the destination v. Convert-
ing values between different types is explicit in CryptoLine. The
cast (v@uint 16) x instruction casts the value of the source x to a
16-bit unsigned integer and stores the value in the destination v.
CryptoLine instructions have both unsigned and signed vari-
ants. For instance, uadd r x (1@uint 32) stores the sum of the
32-bit unsigned variable x and the 32-bit unsigned constant 1 in
the 32-bit unsigned destination r whereas sadd s y (1@sint 32)
stores the sum of the signed variable y and the signed constant 1
in the 32-bit signed destination s. Typical arithmetic instructions
are supported in CryptoLine. uadd and sadd are addition instruc-
tions; uadds and sadds are carrying addition instructions; uadc
and sadc are addition with carry instructions; uadcs and sadcs are
carrying addition with carry instructions. Various subtraction in-
structions (usub, usubs, usbb, usbbs) are allowed as well as their
signed variants (ssub, ssubs, ssbb, ssbbs). umul and umull are the
unsigned half- and full-multiplication instructions respectively. The
corresponding signed variants are smul and smull. Left bit-shift
instructions (ushl and sshl) are also provided for conveniences.
For bit masking in cryptographic programs, CryptoLine of-
fers the uspl and sspl instructions. For instance, the instruction
uspl uH uL (0x1000@uint 16) 12 assigns 0x1 and 0x0 to the 16-bit
unsigned destinations uH and uL respectively. Observe that the
4(= 16 − 12) most and the 12 least significant bits of 0x1000 are
0x1 and 0x0 respectively. The corresponding signed instruction
stores most significant bits in a signed destination. Consider the
signed instruction sspl sH sL (−0x1000@sint 16) 12. The 16-bit
unsigned destination sL still gets the 12 least significant bits 0x0.
The signed 16-bit destination sH however obtains −1. The join
instructions ujoin and sjoin have the reverse effect. For instance,
ujoin v (0x10@uint 8) (0x00@uint 8) stores the 16-bit value 0x1000
in the unsigned destination v.
Another common pattern in cryptography programming is bit
concatenation followed by shifting. Such a pattern is often found in
carry propagation in unsaturated representations of field elements.
The ucshl uH uL (0x0011@uint 16) (0x2222@uint 16) 8 instruction
concatenates 0x0011 with 0x2222, shifts the concatenated result
(0x00112222) 8 bits to the left, splits the shifted result (0x11222200)
into two 16-bit unsigned values (0x1122 and 0x2200), right-shifts
the less significant value by 8 bits, then stores the results in the two
16-bit unsigned destinations. Thus uH = 0x1122 and uL = 0x0022.
The corresponding signed instruction is almost identical except it
splits the shifted result into a signed and an unsigned 16-bit values.
Finally, an expression is an atom, or the sum, difference, prod-
uct of two expressions. An algebraic predicate is a conjunction of
equations or modulo equations. A range predicate is a conjunction
of comparisons on expressions. Given an algebraic predicate P and
a range predicate Q, assert P ∧∧ Q aborts with an error if their
conjunction does not hold. assume P ∧∧ Q aborts without error if
the conjunction does not hold.
3.2 Type System and Inference
Recall the computation of the product of two long long variables
in Section 1. Its mixed signed and unsigned computation must be
interpreted carefully to obtain correct results. If an unsigned bit
string is misinterpreted as a signed one or vice versa, incorrect
results will be computed and contaminate cryptographic primitives.
Keeping track of unsigned and signed interpretations can be te-
dious. Assembly programmers have to remember interpretations
of memory cells and registers so as to implement field and group
operations in cryptographic primitives correctly.
In order to identify misinterpretation, we introduce a simple
type system in CryptoLine with signed computation. Let w be a
positive integer. An unsigned type ρ is of the form uint w; a signed
type σ is of the form sint w. We also use τ to denote a (signed or
unsigned) type. Two types τ , τ ′ are compatible (written τ ∥τ ′) if they
are of the same bit length. We also write 2 • τ for the type with
double length of τ. For instance, sint 16∥uint 16 and 2 • (sint 16)
denotes sint 32. A variable typing relation v : τ specifies the type
τ for the variable v. A type context Γ is a set of variable typing
relations. Figure 3 gives the type system for CryptoLine.
Each declaration in CryptoLine specifies a type for a variable
and hence defines a variable typing relation. Let Γ be the type
context composed of all variable typing relations in a CryptoLine
program. An instruction inst is typable in Γ if Γ ⊢ inst. Typable
expressions and predicates are defined similarly.
The mov v a instruction is typable if v and a are of the same
type. The conditional move instruction cmov v c a0 a1 is typable
if v, a0, a1 are of the same type and c is of the type bit. The cast
instruction cast v@τ a expects v to be of the designated type τ.
Most arithmetic instructions require sources and destinations are
of the same type. uadd v a0 a1 expects v, a0, a1 to have the same un-
signed type; uadds c v a0 a1 additionally requires c is of the type bit.
Addition with carry is similar. uadc v a0 a1 d is typable if v, a0, a1
have the same unsigned type and an additional carry d has the type
Session 7D: Formal Analysis IIICCS ’19, November 11–15, 2019, London, United Kingdom1593::= Num@Type Var
::= · · · | x | y | z | · · · Atom ::= Var | Const
::= Exp = Exp | Exp < Exp | RPred ∧ RPred
Exp × Exp
|
Num ::= · · · | −2 | −1 | 0 | 1 | 2 | · · ·
|
|
uadd Var Atom Atom |
sadd Var Atom Atom |
usub Var Atom Atom |
ssub Var Atom Atom |
umul Var Atom Atom |
|
ushl Var Atom Num
ujoin Var Atom Atom |
sjoin Var Atom Atom |
::= Atom
::= Exp = Exp | Exp ≡ Exp mod Exp | APred ∧ APred
::= mov Var Atom
|
|
|
|
|
|
|
|
::= Type Var
Const
|
Exp + Exp
cmov Var Var Atom Atom |
uadds Var Var Atom Atom |
sadds Var Var Atom Atom |
usubs Var Var Atom Atom |
ssubs Var Var Atom Atom |
|
smul Var Atom Atom
|
sshl Var Atom Num
|
assert APred ∧∧ RPred
assume APred ∧∧ RPred
Exp
APred
Inst
Decl
Exp − Exp
RPred
cast Var@Type Atom
uadc Var Atom Atom Atom |
sadc Var Atom Atom Atom |
usbb Var Atom Atom Atom |
ssbb Var Atom Atom Atom |