推荐阅读时间：30min  
全文字数：1w
## 前言
真正反序列化漏洞的利用，肯定需要了解java反射原理。因为java反序列化的payload大多与反射机制密切相关。  
那么这篇文章就是主要讲述反射机制，算是基础知识。
> 除了反射机制之外，后续还基于commons-> collections链最后的反射机制触发点，进行了详细的反射机制特性的绕过说明。由于它与反射机制密切相关，就放在这边进行统一归纳理解。  
>  可以配合本人的另一篇文章commons-collections食用
## java反射机制
在Java中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。  
让java可以在运行时，根据传入的类名字符串，去执行这个类存在的方法等。
> 以下从开发的角度举例了一个反射机制在开发中的作用。简单了解即可。
一个不使用反射机制的例子：
    interface fruit{  
        public abstract void eat();  
    }  
    class Apple implements fruit{  
        public void eat(){  
            System.out.println("Apple");  
        }  
    }  
    class Orange implements fruit{  
        public void eat(){  
            System.out.println("Orange");  
        }  
    }  
    // 构造工厂类  
    // 也就是说以后如果我们在添加其他的实例的时候只需要修改工厂类就行了  
    class Factory{  
        public static fruit getInstance(String fruitName){  
            fruit f=null;  
            if("Apple".equals(fruitName)){  
                f=new Apple();  
            }  
            if("Orange".equals(fruitName)){  
                f=new Orange();  
            }  
            return f;  
        }  
    }  
    class hello{  
        public static void main(String[] a){  
            fruit f=Factory.getInstance("Orange");  
            f.eat();  
        }  
    }
如果我们想要添加新的水果，就需要
  * 添加新的水果类
  * 修改Factory
  * 在main函数中使用新的水果类
修改为反射机制的代码：
    interface fruit{  
        public abstract void eat();  
    }  
    class Apple implements fruit{  
        public void eat(){  
            System.out.println("Apple");  
        }  
    }  
    class Orange implements fruit{  
        public void eat(){  
            System.out.println("Orange");  
        }  
    }  
    class Factory{  
        public static fruit getInstance(String ClassName){  
            fruit f=null;  
            try{  
                f=(fruit)Class.forName(ClassName).newInstance();  
            }catch (Exception e) {  
                e.printStackTrace();  
            }  
            return f;  
        }  
    }  
    class hello{  
        public static void main(String[] a){  
            fruit f=Factory.getInstance("Reflect.Apple");  
            if(f!=null){  
                f.eat();  
            }  
        }  
    }
这时候如果我们需要添加水果，只需要
  * 添加水果类
  * 在main函数中使用新的水果类即可
那么好像可以看出一点问题，如果传入的类名可控，再加上一些办法，那就不是可以调用任意类，去运行系统命令了呢。
### 反射机制的方法
列出在实际利用中重要的方法例子：
    public void execute(String className, String methodName) throws Exception {
        Class clazz = Class.forName(className);    
        clazz.getMethod(methodName).invoke(clazz.newInstance()); 
    }
  * ឴获取类： **forName**
  * 获取类下的函数： **getMethod**
  * 执行类下的函数： **invoke**
  * 实例化类的对象： **newInstance**
以下一步步使用反射机制实现`Runtime.getRuntime().exec("calc.exe");`这个语句
  * getRuntime():其实就是Runtime类获取对象的方式，等于new一个Runtime类。之所以封装成一个函数是为了不调用一次建立一个对象，只获取一个对象来执行操作。
  * exec():调用exec函数
  * calc.exe：调用计算器程序
反射机制的执行顺序跟直接调用有些差别，一步步来
#### forName
获得一个class对象( **java.lang.Class** )有三种方法：
  1. `obj.getClass()`:如果上下文中存在某个类的实例obj，那么我们可以直接通过`obj.getClass()`来获取它的类。
    1. 假如obj是实例：获取该实例的class（如Runtime.getRuntime().getClass()结果就是class java.lang.Runtime类）（此处类的意思实际上时class这个类的对象）
    2. 假如obj是类：获取到java.lang.Class类（class这个类的对象）
  2. `Test.class`:Test是一个已经加载的类，想获取它的java.lang.Class对象，直接拿取class参数即可。（这不是反射机制）
  3. `Class.forName`:如果知道类的名字，可以直接使用forname来获取。
forName两种使用形式
    Class forName(String name) 
    //name:class名称
    Class forName(String name, **boolean** initialize, ClassLoader loader)
    //name:class名称
    //initialize：是否进行“类初始化”
    //loader：加载器
    //第一种调用形式等同于第二种，其实就是第二种形式的封装，默认进行"类初始化”，默认加载器根据类名（完整路径）来加载
    Class.forName(className) 
    Class.forName(className, true, currentLoader)
**类初始化** ：  
类初始化不等于类的实例化，举个例子：
    public class TrainPrint {
        //初始块
        {        
            System.out.printf("Empty block initial %s\n", this.getClass());    
        }
        //静态初始块
        static {
                System.out.printf("Static initial %s\n", TrainPrint.class);    
            }
        //构造函数
        public TrainPrint() {
            System.out.printf("Initial %s\n", this.getClass());
            } 
    }
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        Class.forName("TrainPrint");
    }
    // Static initial class TrainPrint
    public static void main(String[] args) throws IOException, ClassNotFoundException {
       TrainPrint test= new TrainPrint();
    }
    // Static initial class TrainPrint
    // Empty block initial class TrainPrint
    // Initial class TrainPrint
类的实例化：`静态初始块`->`初始块`->`构造函数`  
类的初始化：`静态初始块`
具有父类的类的实例化：`父类静态初始块`->`子类静态初始块`->`父类初始块`->`父类构造函数`->`子类初始块`->`子类构造函数`  
具有父类的类的实例化：`父类静态初始块`->`子类静态初始块`
> 以上对于类初始化的说明其实就是说，单独一个Class.forName(),在类静态初始块可控的情况下，可以执行恶意代码。
**调用内部类** :  
Java的普通类 C1 中支持编写内部类 C2 ，而在编译的时候，会生成两个文件： C1.class 和
C1$C2.class，我们可以把他们看作两个无关的类。  
`Class.forName("C1$C2")`可以调用这个内部类。
我们可以通过`Class.forName("java.lang.Runtime")`来获取类（java.lang.Runtime是Runtime类的完整路径）
#### getMethod
getMethod 的作用是通过反射获取一个类的某个特定的 **公有** 方法。  
而Java中支持类的重载，我们不能仅通过函数名来确定一个函数。所以，在调用 getMethod 的时候，我们需要传给他你需要获取的函数的参数类型列表，如下：  
`Class.forName("java.lang.Runtime").getMethod("exec", String.class)`
#### invoke
invoke方法位于Method类下，其的作用是传入参数，执行方法，  
`public Object invoke(Object obj, Object... args)`  
它的第一个参数是执行method的对象：
  * 如果这个方法是一个普通方法，那么第一个参数是类对象 
  * 如果这个方法是一个静态方法，那么第一个参数是类（之后会提到，这里其实不用那么死板，这个）  
它接下来的参数才是需要传入的参数。
由于我们的exec函数是一个普通方法，需要传入类对象，即`invoke(类对象，exec方法传入的参数)`  
之前说到Runtime的类对象不能通过newInstance()来获取对象（class.newInstance等于new
class）,是因为Runtime的类构造函数是一个private构造函数，只能通过getRuntime方法返回一个对象。  
获取类对象：`Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"))`
(由于getRuntime是一个静态方法，invoke传入Runtime类，进行调用)  
`invoke(Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"))，"calc.exe")`
那么合成以上的操作：
    Class.forName("java.lang.Runtime").getMethod("exec", String.class).invoke(Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"))，"calc.exe")
亲测可弹框,再简化一下：