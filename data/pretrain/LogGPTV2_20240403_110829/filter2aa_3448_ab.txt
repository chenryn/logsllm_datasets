• Omit to establish a connection and header, focus on 
Authentication 
𝑀!. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑃𝑖𝑛𝑔 𝑀𝑠𝑔
𝑀". 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑃𝑜𝑛𝑔 𝑀𝑠𝑔
𝑀#. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
Send 0x5a0000ff to get Challenge Code
EWS will generate 32 bytes and response to PLC with 
0x0114 to pass the Authentication
PLC returns the random 10 bytes Challenge Code. EWS 
will calculate the authentication code to pass the 
authentication based on the 10 bytes Challenge Code
EWS
PLC
Reverse Engineering on GxWork2/3 
𝑀$. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
• After Get random 10 bytes Challenge Code
1. 𝑋𝑜𝑟𝑒𝑑_𝑏𝑢𝑓𝑓𝑒𝑟 = 𝐶ℎ𝑎𝑙𝑙𝑒𝑛𝑔𝑒 𝐶𝑜𝑑𝑒 ⨁𝑥𝑜𝑟_𝑏𝑎𝑠𝑒_ℎ𝑒𝑥
2. Change the Xored_buffer place
𝑥𝑜𝑟_𝑏𝑎𝑠𝑒_ℎ𝑒𝑥 =
{0𝑥4𝑑, 0𝑥45, 0𝑥4𝑐, 0𝑥53, 0𝑥45, 0𝑥43, 0𝑥2𝑑, 0𝑥51, 0𝑥00, 0𝑥00}
𝑡𝑚𝑝_𝑏𝑢𝑓8[0] = 𝑥𝑜𝑟𝑒𝑑_𝑏𝑢𝑓[7]
𝑡𝑚𝑝_𝑏𝑢𝑓8[1] = 𝑥𝑜𝑟𝑒𝑑_𝑏𝑢𝑓[3]
𝑡𝑚𝑝_𝑏𝑢𝑓8[2] = 𝑥𝑜𝑟𝑒𝑑_𝑏𝑢𝑓[0]
𝑡𝑚𝑝_𝑏𝑢𝑓8[3] = 𝑥𝑜𝑟𝑒𝑑_𝑏𝑢𝑓[6]
𝑡𝑚𝑝_𝑏𝑢𝑓8[4] = 𝑥𝑜𝑟𝑒𝑑_𝑏𝑢𝑓[5]
𝑡𝑚𝑝_𝑏𝑢𝑓8[5] = 𝑥𝑜𝑟𝑒𝑑_𝑏𝑢𝑓[2]
𝑡𝑚𝑝_𝑏𝑢𝑓8[6] = 𝑥𝑜𝑟𝑒𝑑_𝑏𝑢𝑓[4]
𝑡𝑚𝑝_𝑏𝑢𝑓8[7] = 𝑥𝑜𝑟𝑒𝑑_𝑏𝑢𝑓[1]
𝑡𝑚𝑝_𝑏𝑢𝑓8[8] = 𝑥𝑜𝑟𝑒𝑑_𝑏𝑢𝑓[4]
𝑡𝑚𝑝_𝑏𝑢𝑓8[9] = 𝑥𝑜𝑟𝑒𝑑_𝑏𝑢𝑓[8]
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
• After Get random 10 bytes Challenge Code
3. Convert tmp_buf to short variable 
4. Verify PLC 10 bytes Challenge Code, Sum the tmp_buf
buf16_sum = tmp_buf16[0] + tmp_buf16[1] + tmp_buf16[2] + tmp_buf16[3];
if (tmp_buf16[4] != buf16_sum)
{
return -1;
}
tmp_buf16[0] = *(uint16_t *)(&tmp_buf8[0]);
tmp_buf16[1] = *(uint16_t *)(&tmp_buf8[2]);
tmp_buf16[2] = *(uint16_t *)(&tmp_buf8[4]);
tmp_buf16[3] = *(uint16_t *)(&tmp_buf8[6]);
tmp_buf16[4] = *(uint16_t *)(&tmp_buf8[8]);
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
• After Get random 10 bytes Challenge Code
5. Retrieve 4 short varible to interger variable
Go to function sub_10062C3E
tmp_buf32[0] = tmp_buf16[3] * tmp_buf16[1];
tmp_buf32[1] = tmp_buf16[3] * tmp_buf16[0];
tmp_buf32[2] = tmp_buf16[3] * tmp_buf16[2];
tmp_buf32[3] = tmp_buf16[3] * tmp_buf16[3];
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
6. Use a pre-defined 32 bytes code (generated by 
sub_10005cdb) to generate 32 bytes hex
7. Generate 64 bytes Output buffer
uint8_t array_5cdb[32] = 
{
0xb0, 0x7e, 0x32, 0x90, 0xb7, 0xc9, 0xa6, 0xa7,
0xe4, 0x92, 0x8b, 0x9d, 0x7d, 0x62, 0xbb, 0x6b,
0x62, 0xdc, 0x64, 0x5d, 0xd7, 0x51, 0x68, 0xd2,
0x66, 0xf7, 0xd0, 0x2b, 0xb1, 0x1a, 0xa2, 0x9f
};
memcpy(&out_buf[0], array_5cdb, 32);
memcpy(&out_buf[32], &tmp_buf32[0], 16);
memcpy(&out_buf[48], &tmp_buf8[0], 10);
out_buf[58] = 0x00;
out_buf[59] = 0x00;
out_buf[60] = 0x20;
out_buf[61] = 0xf2;
out_buf[62] = 0x08;
out_buf[63] = 0x19;
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
8. Generate 64 bytes array which value is 0x36
9. Perform Exclusive-OR first 32 bytes and _5cdb array
Go to function sub_10062860
memset(out_buf, 0x36, 64);
for (idx = 0; idx < 32; idx++)
out_buf[idx] ^= array_5cdb[idx];
© 2021 TXOne Networks Inc.
10. Generate a 104 byte array, and copy unk_10127E68 to the 
first 32 bytes  
11. Copy 64 bytes from array_104bytes, and fill 0 in the last 
8 bytes
Reverse Engineering on GxWork2/3 (Cont.)
uint8_t array_62860[32] = 
{
0x67, 0xe6, 0x09, 0x6a, 0x85, 0xae, 0x67, 0xbb,
0x72, 0xf3, 0x6e, 0x3c, 0x3a, 0xf5, 0x4f, 0xa5,
0x7f, 0x52, 0x0e, 0x51, 0x8c, 0x68, 0x05, 0x9b,
0xab, 0xd9, 0x83, 0x1f, 0x19, 0xcd, 0xe0, 0x5b
};
array_62860(32bytes)
array_104bytes(64 bytes)
0*8 bytes
104 Bytes Array
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
12. Handle last 8 bytes of 104 bytes array. Set last 8 bytes 
as 2 integer variable, and add the value 0x40
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
13. Run the calculation, update the first 32 
bytes of 104 bytes array
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
14. Function sub_10062B7B Update 104 bytes array based 
on the computed challenge code. 
15. Function sub_10062BC6, Update the value in offset 0x30 
is 0x80 of 104 bytes array, offset 0x60 add 1
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
16. Update 104 bytes array buffer, from offset 0x31, set 27 
bytes 0, offset 0x60 add 0x27
17. Update 104 bytes array buffer
•
From offset 0x58, set 4 bytes 0.
•
Offest 0x64 is integer variable, left shift 3 bit, and SWAP It to offest 
0x5c.
•
Offest 0x50 add 0x8
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
18. Update 104 bytes array to 136 bytes
•
First 32 bytes as 8 integer variable, add 32 bytes (8 integer variable) 
on offset 0x0104, and SWAP it.
•
104+32=136 bytes
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
19. From offset 0x136, set 0x5c bytes value as 0x40. 
Byte Array is 200 byte now
20. Exclusive-OR the last 32 bytes in the 200 byte 
array with Output(first 32 bytes of 64 bytes), and 
store to 200 byte array
Reply the same function behavior based on 200 
bytes.
© 2021 TXOne Networks Inc.
Reverse Engineering on GxWork2/3 (Cont.)
• After getting the final 200 bytes, the first 32 byte is the MS 
authentication function needs.
© 2021 TXOne Networks Inc.
Reverse 
Engineering
Network Traffic 
Take Over it !! Analysis
© 2021 TXOne Networks Inc.
Making a Protocol Analysis Tool
• We built a Wireshark Lua Plugin for the MELSOFT Protocol
© 2021 TXOne Networks Inc.
Fake EWS
PLC
𝑀!. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑃𝑖𝑛𝑔 𝑀𝑠𝑔
𝑀". 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑃𝑜𝑛𝑔 𝑀𝑠𝑔
𝑀#. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀$. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀%. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀&. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
Send 0x5a0000ff to get Challenge Code
𝑀'. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀(. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
Overwrite PLC Program - 0x0114 to pass the Authentication
Overwrite PLC Program - 0x1002 Remote STOP
Overwrite PLC Program - 0x1827 MC Open File
PLC returns the 10 bytes Challenge Code
Handshake Overview – Overwriting the PLC Program
© 2021 TXOne Networks Inc.
Handshake Overview – Overwriting the PLC Program
𝑀). 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀!*. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀!!. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀!". 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀!#. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀!$. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
Overwrite PLC Program – 0x1811 MC Search Directory/File
𝑀!%. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀!&. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
Overwrite PLC Program – 0x1810 MC Read Directory/File
Overwrite PLC Program – 0x1829 MC Write to File
Overwrite PLC Program – 0x182C Update File Size
Fake EWS
PLC
© 2021 TXOne Networks Inc.
Handshake Overview – Overwriting the PLC Program
𝑀!'. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀!(. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
Overwrite PLC Program – 0x1826 MC Modify File Creation Date 
and Time
𝑀!). 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀"*. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
Overwrite PLC Program – 0x1837 Close File
𝑀"!. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀"". 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀"#. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀"$. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
Overwrite PLC Program – 0x1836 Write File Modifications to 
Storage
Overwrite PLC Program – 0x1001 MC Remote Run
Fake EWS
PLC
© 2021 TXOne Networks Inc.
Fake EWS
PLC
𝑀!. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑃𝑖𝑛𝑔 𝑀𝑠𝑔
𝑀". 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑃𝑜𝑛𝑔 𝑀𝑠𝑔
𝑀#. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀$. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀%. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀&. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀'. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀(. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
Handshake Overview – Overwriting the PLC Program
Send 0x5a0000ff to get Challenge Code
PLC returns the 10 bytes Challenge Code
Overwrite PLC Program
0x0114 to pass the Authentication
Response with Error Code 0x0000
Overwrite PLC Program
0x1002 Remote STOP
Response with Error Code 0x0000
Overwrite PLC Program
0x1827 MC Open File
Response with Error Code 0x0000
© 2021 TXOne Networks Inc.
Handshake Overview – Overwriting the PLC Program
𝑀). 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀!*. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀!!. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀!". 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀!#. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀!$. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀!%. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀!&. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
Fake EWS
PLC
Overwrite PLC Program
0x1811 MC Search Directory/File
Response with Error Code 0x0000
Overwrite PLC Program
0x1810 MC Read Directory/File
Response with Error Code 0x0000
Overwrite PLC Program
0x1829 MC Write to File -I
Response with Error Code 0x0000
Overwrite PLC Program
0x1829 MC Write to File -II
Response with Error Code 0x0000
Overwrite PLC Program
0x182C Update File Size
Response with Error Code 0x0000
© 2021 TXOne Networks Inc.
Handshake Overview – Overwriting the PLC Program
𝑀!'. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀!(. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀!). 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀"*. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀"!. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀"". 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
𝑀"#. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑞𝑢𝑒𝑠𝑡
𝑀"$. 𝑀𝑒𝑙𝑠𝑜𝑓𝑡 𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒
Fake EWS
PLC
Overwrite PLC Program
0x1826 MC Modify File Creation Date and Time
Response with Error Code 0x0000
Overwrite PLC Program
0x1837 Close File
Response with Error Code 0x0000
Overwrite PLC Program
0x1836 Write File Modifications to Storage
Response with Error Code 0x0000
Overwrite PLC Program
0x1001 MC Remote Run
Response with Error Code 0x0000
© 2021 TXOne Networks Inc.
Demo
© 2021 TXOne Networks Inc.
Before Overwriting the PLC program
© 2021 TXOne Networks Inc.
After Overwriting the PLC program
© 2021 TXOne Networks Inc.
The Potential Impact of Attacks Using the 
MELSOFT Protocol
Series
iQ-R Series
Q Series
iQ-F
L Series
F Series
Type
Module Based
Module Based
Module Based
Module 
Based(without 
Ethernet Module)
Module Based
Module
CPU 
Module
Ethernet 
Module
CPU 
Module
Ethernet 
Module
CPU 
Module
Ethernet 
Module
CPU Module
CPU 
Module
Ethernet 
Module
Impact by Melsoft
*Yes
(EWS-PLC)
*Yes
(EWS-PLC)
Yes
(EWS-PLC)
Yes
(EWS-PLC)
*Yes
(EWS-PLC)
*Yes
(EWS-PLC)
Yes
(EWS-PLC)
Yes
(EWS-
PLC)
Yes
(EWS-PLC)
Impact by Melsec
(SLMP)
Yes
(HMI-PLC)
Yes
(HMI-PLC)
**Yes
(HMI-PLC)
Yes
(EWS-PLC)
Yes
(HMI-PLC)
Yes
(HMI-PLC)
N/A
N/A
N/A
* Without MELSOFT Authentication, and we can take over the device directly
** Can’t use File-related Command
© 2021 TXOne Networks Inc.
The Potential Impact of Attacks Using the 
MELSOFT Protocol(Cont.)
• Remote Run/Stop to Interrupt the Process
• Overwrite PLC Program to Change the Completed Control 
Process
• Read/Write the Data to Change the Small Part Control Process
• Malicious Files in the PLC 
• …
© 2021 TXOne Networks Inc.
MITRE ATT&CK® Matrix for Industrial Control Systems
Initial Access
Execution
Persistence
Privilege 