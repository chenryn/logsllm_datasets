### Authentication Process Overview

1. **Establish Connection and Header:**
   - Omit the connection and header establishment, focusing on the authentication process.

2. **Message Types:**
   - **ùëÄ!**: MELSOFT Ping Message
   - **ùëÄ"**: MELSOFT Pong Message
   - **ùëÄ#**: MELSOFT Request
   - **ùëÄ$**: MELSOFT Response

3. **Challenge Code Generation:**
   - Send `0x5a0000ff` to request a Challenge Code.
   - The EWS (Engineering WorkStation) generates a 32-byte response and sends it to the PLC with `0x0114` to pass the authentication.
   - The PLC returns a random 10-byte Challenge Code.
   - The EWS calculates the authentication code based on the 10-byte Challenge Code to complete the authentication.

### Reverse Engineering of GxWork2/3

**Step-by-Step Process:**

1. **After Receiving the 10-Byte Challenge Code:**
   - **XOR Operation:**
     ```c
     Xored_buffer = Challenge_Code XOR xor_base_hex
     ```
     where `xor_base_hex = {0x4d, 0x45, 0x4c, 0x53, 0x45, 0x43, 0x2d, 0x51, 0x00, 0x00}`
   - **Rearrange Xored_buffer:**
     ```c
     tmp_buf8[0] = Xored_buffer[7]
     tmp_buf8[1] = Xored_buffer[3]
     tmp_buf8[2] = Xored_buffer[0]
     tmp_buf8[3] = Xored_buffer[6]
     tmp_buf8[4] = Xored_buffer[5]
     tmp_buf8[5] = Xored_buffer[2]
     tmp_buf8[6] = Xored_buffer[4]
     tmp_buf8[7] = Xored_buffer[1]
     tmp_buf8[8] = Xored_buffer[4]
     tmp_buf8[9] = Xored_buffer[8]
     ```

2. **Convert `tmp_buf` to Short Variables:**
   - Convert `tmp_buf8` to `tmp_buf16`:
     ```c
     tmp_buf16[0] = *(uint16_t *)(&tmp_buf8[0])
     tmp_buf16[1] = *(uint16_t *)(&tmp_buf8[2])
     tmp_buf16[2] = *(uint16_t *)(&tmp_buf8[4])
     tmp_buf16[3] = *(uint16_t *)(&tmp_buf8[6])
     tmp_buf16[4] = *(uint16_t *)(&tmp_buf8[8])
     ```
   - Verify the sum of `tmp_buf16`:
     ```c
     buf16_sum = tmp_buf16[0] + tmp_buf16[1] + tmp_buf16[2] + tmp_buf16[3]
     if (tmp_buf16[4] != buf16_sum) {
         return -1;
     }
     ```

3. **Retrieve 4 Short Variables to Integer Variables:**
   - Use the function `sub_10062C3E`:
     ```c
     tmp_buf32[0] = tmp_buf16[3] * tmp_buf16[1]
     tmp_buf32[1] = tmp_buf16[3] * tmp_buf16[0]
     tmp_buf32[2] = tmp_buf16[3] * tmp_buf16[2]
     tmp_buf32[3] = tmp_buf16[3] * tmp_buf16[3]
     ```

4. **Generate 64-Byte Output Buffer:**
   - Use a pre-defined 32-byte code (generated by `sub_10005cdb`):
     ```c
     uint8_t array_5cdb[32] = {
         0xb0, 0x7e, 0x32, 0x90, 0xb7, 0xc9, 0xa6, 0xa7,
         0xe4, 0x92, 0x8b, 0x9d, 0x7d, 0x62, 0xbb, 0x6b,
         0x62, 0xdc, 0x64, 0x5d, 0xd7, 0x51, 0x68, 0xd2,
         0x66, 0xf7, 0xd0, 0x2b, 0xb1, 0x1a, 0xa2, 0x9f
     };
     memcpy(&out_buf[0], array_5cdb, 32);
     memcpy(&out_buf[32], &tmp_buf32[0], 16);
     memcpy(&out_buf[48], &tmp_buf8[0], 10);
     out_buf[58] = 0x00;
     out_buf[59] = 0x00;
     out_buf[60] = 0x20;
     out_buf[61] = 0xf2;
     out_buf[62] = 0x08;
     out_buf[63] = 0x19;
     ```

5. **Perform Exclusive-OR on First 32 Bytes:**
   - Use the function `sub_10062860`:
     ```c
     memset(out_buf, 0x36, 64);
     for (int idx = 0; idx < 32; idx++) {
         out_buf[idx] ^= array_5cdb[idx];
     }
     ```

6. **Generate a 104-Byte Array:**
   - Copy `unk_10127E68` to the first 32 bytes and fill the last 8 bytes with 0.
   - Handle the last 8 bytes as 2 integer variables and add `0x40`.

7. **Update the 104-Byte Array:**
   - Run the calculation and update the first 32 bytes of the 104-byte array.
   - Use the functions `sub_10062B7B` and `sub_10062BC6` to update specific offsets in the 104-byte array.

8. **Expand to 136-Bytes:**
   - Add 32 bytes (8 integer variables) at offset `0x0104` and swap them.

9. **Finalize the 200-Byte Array:**
   - Set the last 32 bytes to `0x40`.
   - Perform an Exclusive-OR operation on the last 32 bytes with the first 32 bytes of the 64-byte output buffer and store the result in the 200-byte array.

### Handshake Overview ‚Äì Overwriting the PLC Program

1. **Initial Messages:**
   - **ùëÄ!**: MELSOFT Ping Message
   - **ùëÄ"**: MELSOFT Pong Message
   - **ùëÄ#**: MELSOFT Request
   - **ùëÄ$**: MELSOFT Response
   - **ùëÄ%**: MELSOFT Request
   - **ùëÄ&**: MELSOFT Response
   - **ùëÄ'**: MELSOFT Request
   - **ùëÄ(: MELSOFT Response

2. **Challenge Code Exchange:**
   - Send `0x5a0000ff` to get the Challenge Code.
   - The PLC returns the 10-byte Challenge Code.

3. **Overwrite PLC Program:**
   - **0x0114**: Pass the Authentication
   - **0x1002**: Remote STOP
   - **0x1827**: MC Open File
   - **0x1811**: MC Search Directory/File
   - **0x1810**: MC Read Directory/File
   - **0x1829**: MC Write to File
   - **0x182C**: Update File Size
   - **0x1826**: MC Modify File Creation Date and Time
   - **0x1837**: Close File
   - **0x1836**: Write File Modifications to Storage
   - **0x1001**: MC Remote Run

### Potential Impact of Attacks Using the MELSOFT Protocol

1. **Remote Run/Stop:**
   - Interrupt the process by remotely running or stopping the PLC.

2. **Overwrite PLC Program:**
   - Change the completed control process by overwriting the PLC program.

3. **Read/Write Data:**
   - Modify the small part control process by reading and writing data.

4. **Malicious Files:**
   - Insert malicious files into the PLC.

### MITRE ATT&CK¬Æ Matrix for Industrial Control Systems

- **Initial Access**
- **Execution**
- **Persistence**
- **Privilege Escalation**

¬© 2021 TXOne Networks Inc.