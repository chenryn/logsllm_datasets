∗
pk
SFPK to a random one, this is the only part of the simulation, where the adversary can notice
SFPK ∈
(cid:48)
(cid:48)
something. Thus, for this to work the adversary must use a valid signature Sig
SFPK for pk
∗
∗
SFPK]R. We distinguish two cases: Sig
[pk
SFPK
∗
(cid:48)
∗
SFPK and either σ(cid:48)
SFPK = pk
this means that pk
SFPK. Since pk
SFPK is set to
random public key in GAME6 we can use an adversary that creates such a signature Σ(cid:48) to break
∗
strong existential unforgeability of the SFPK scheme. In case Sig
SFPK, we notice that in
(cid:48)
order for the adversary to see that this is a simulation the public key pk
SFPK must be in relation to
∗
pk
SFPK. Thus, we can again use the adversary to break the strong existential unforgeability of the
SFPK scheme, even if σ(cid:48)
SFPK (cid:54)= Sig
(cid:48)
∗
SFPK and Sig
SFPK (cid:54)= Π∗
SPS or Π(cid:48)
∗
(cid:48)
SFPK = pk
SFPK and pk
SFPK.
∗
SFPK. If Sig
SFPK (cid:54)= Sig
(cid:48)
SPS = σ∗
SPS, Π(cid:48)
SFPK = Π∗
(cid:48)
SFPK = Sig
(cid:48)
SFPK = Sig
SPS (cid:54)= σ∗
SPS, Π∗
In other words, the only way the adversary can randomize the challenged signature is by random-
izing the SFPK signature because the other values are signed. However, since the scheme is strongly
unforgeable the adversary has negligible chances to do so. It follows that Pr[S6] = Advseuf−cma
A,SFPK (λ).
Advadaptc-h
A,SFPK(λ) + Advseuf−cma
A,SFPK (λ)
+ AdvwiA,ΠPPE
(λ) + AdvddhA (λ)+
AdvzkA,ΠGS.Judge
(λ).
Theorem 5 (Non-frameability). Our group signature construction is non-frameable if the SFPK
scheme is existential unforgeable and the proof system used by the tracing authority is sound.
Proof. We again use the game base approach. Let us denote by Si the event that the adversary wins
the anonymity experiment in GAMEi. Moreover, let n be the number of queries to the CrptU oracle
∗
made by the adversary and let (m∗, Σ∗, uid
GAME0: The original experiment.
∗
GAME1: Let Σ∗ = (pk
SFPK, σ∗
from Π∗
∗
∗
τ , π∗
, info
the GS.Judge(gpk, uid
(cid:48)
∗
SFPK). We extract the witness w(cid:48) = (pk
SFPK, r(cid:48), 1G1, 1G2 )
SFPK, Sig
] but
∗
], m∗, Σ∗) outputs accept.
Trace, upk[uid
SFPK (cid:54)= upk[uid
(cid:48)
∗
SFPK using the tracing authorities secret key tsk = (τΠ ). We abort if pk
τ ) be the output of the adversary A.
∗
Trace, info
SPS, Π∗
, π∗
We will show that this lowers the adversaries advantage only by a negligible fraction. In particular,
this means that π∗
Trace is a valid proof for the statement:
x = { ∃τΠ ,ω (pk
SFPK,·,·,·) ←$ Extract(τΠ , Π∗
∗
SFPK)
(ρΠ , τΠ ) ← ExtGenPPE(1λ; ω) }.
27
In the end we have:
Pr[S0] ≤n ·(cid:16)
(cid:17)
SFPK (cid:54)= upk[uid
∗
(cid:48)
However, since we know that pk
Trace is a proof that breaks the
soundness property of the proof used by the tracing authority. We have shown that |Pr[S1]−Pr[S0]| ≤
AdvsoundA,ΠGS.Judge
] it follows that π∗
(λ).
It is easy to see that Pr[S1] = n · Pr[S2].
We will now show that any adversary A that breaks the non-frameability of the scheme can be
used to break the existential unforgeability of the SFPK scheme. To do so, we construct a reduction
R that plays the role of the adversary in the existential unforgeability experiment. Let pkSFPK be the
public key given to R. The reduction sets upk[j] = pkSFPK, where j is the identiﬁer from GAME2.
To answer the queries to the Sign oracle for uid = j, the reduction reduction outputs group signature
(cid:48)
(cid:48)
Σ(cid:48) = (pk
SFPK, σ(cid:48)
SFPK). To do so, the reduction can choose the randomization r freely
SFPK ←$ SFPK.ChgPK(pkSFPK, r). It can also
(cid:48)
and randomize the public key pkSFPK by running pk
randomize the SPS-EQ signature to receive σ(cid:48)
SFPK. Finally, it uses its
own signing oracle O2 to compute the SFPK signature Sig
∗
SFPK) under
∗
∗
message m∗ and for epoch info
τ , for which we know (by GAME2) that pk
SFPK is from the same
relation as the public key pkSFPK from the existential unforgeability experiment. Since this is a valid
SFPK||σ∗
, m∗, Σ∗, τ∗) (cid:54)∈ Q and that ((m∗||τ∗||pk
∗
∗
∗
forgery, it follows that (uid
SFPK) is a
valid forgery against the SFPK scheme.
SPS and compute the proof Π(cid:48)
∗
In the end, the adversary returns a group signature Σ∗ = (pk
SFPK, σ∗
SPS||Π∗
SPS, Π∗
SFPK), Sig
SPS, Π(cid:48)
SFPK, Sig
We conclude that Pr[S0] = n · Adveuf−cma
A,SFPK (λ) + AdvsoundA,ΠGS.Judge
(λ).
(cid:48)
SFPK.
SFPK, Sig
Theorem 6 (Functional Tracing Soundness). Our group signature scheme has functional trac-
ing soundness if the underlying SFPK scheme has canonical representatives, the proof system used
by the Judge is sound and the proof system used by the signers is a proof of knowledge.
Proof. Let A be an adversary against the tracing soundness of our scheme. We show how to construct
a reduction B against the soundness of ΠGS.Judge.
Given the CRS ρGS.Judge, the reduction generates the remaining parameters according to GS.Setup
and forwards them to the adversary. At some point the adversary will output the group and tracing
manager’s key material and the initial group information (info, msk, mpk, tsk = (τPPE, ω), tpk = ρPPE).
Let us further denote by (m, Σ,{uidi, πi}2
i=1, infoτ ) the adversary’s ﬁnal output. We will assume that
upk[uid1] and upk[uid2] are both deﬁned and not equal.
Assume that
GS.Judge(gpk, uidi, infoτ , πi, upk[uidi], m, Σ) = 1
for both i = 1 and i = 2, i.e. we have in particular
Verify(ρGS.Judge, xTrace, πi) = 1
for both i.
We now consider the following cases:
Case I: The tracing manager’s secret key is not properly generated, i.e. we have (τ(cid:48), ρ(cid:48)) ← ExtGen(1λ; ω)
for (τ(cid:48), ρ(cid:48)) (cid:54)= (τPPE, ρPPE). The reduction can check this, since the adversary provides the ω as
part of the tracing manager’s secret key. In this case, either of the two proofs πi breaks the
soundness of ΠGS.Judge.
Case II: The tracing manager’s secret key is properly generated. In this case, the reduction uses the
extraction trapdoor to obtain the witness used for the proof ΠSFPK contained in the signature.
There are two possibilities:
28
1. The extraction does not produce a valid witness. We bound this case by the advantage of A
against the extractor.
2. The extraction is successful, yielding a valid witness (pkSFPK, r, w1, w2). Since the witness is
valid, pkSFPK is the unique canonical representative of the key that created the signature.
Since the keys upk[uid1] and upk[uid2] are diﬀerent, at most one of them can be equal to
the extracted pkSFPK. The reduction thus returns (xTrace, πi) such that upk[uidi] (cid:54)= pkSFPK
again breaking the soundness of ΠGS.Judge.
Theorem 7 (Join Privacy). Our group signature scheme has private joins if the encryption
scheme used by the signers is IND − CPA secure and has IK − CPA key privacy and the SFPK scheme
is adaptively class hiding with key corruption.
Proof. We consider a series of games. In the following let uidb be the challenge user who is inserted
into the group and let gpk[uidb] = (pkSFPK, pkEnc) be their public key and gsk[uidb] = (skSFPK, skEnc)
be their secret key. Let Si denote the event that the adversary wins in GAMEi.
GAME0 Is the original join privacy game, hence Pr[S0] = Advjoin−privacy
(λ).
GS,A
GAME1 We modify how the challenge group information is created. For this we generate a fresh pub-
lic key encryption key pair (sk, pk) ←$ PKE.KeyGen(1λ). After the challenge user uidb is added using
AddU, we replace his entry (c = PKE.Enc(pkb, k), σSPS) in the epoch information with (PKE.Enc(pk, k), σSPS),
i.e. we replace the encryption key of the randomness to a fresh key. It is easy to see that, since the
encryption scheme has key privacy we have Pr[S1] ≤ Pr[S0] + Advik−cpa
PKE,A(λ).
∗
GAME2 In this game we further modify the ciphertext in the challenge user’s part of info
by en-
crypting the value 0 instead of the randomness used to change the SFPK key signed in σSPS. Because
the encryption scheme is IND − CPA secure it holds that Pr[S2] ≤ Pr[S1] + Advind−cpa
PKE,A (λ).
GAME3 Instead of changing the representative of user uidb’s SFPK public key, we generate a fresh
∗
public key and change its representative. The signature in info
will now be on this fresh represe-
natative. We will also use this fresh key to sign in the queries made to PrivChall. We observe that
Pr[S3] ≤ Pr[S2] + Advadaptc-h
2 , since the updated epoch information
and the signatures received from the challenge signing oracle are completely independent of the
challenge users.
SFPK,A(λ). Further, we have Pr[S3] = 1
Putting it all together we thus have
Advjoin−privacy
GS,A
(λ) ≤ Advik−cpa
PKE,A(λ) + Advind−cpa
A
(λ) + Advadaptc-h
SFPK,A(λ).
Theorem 8 (Leave Privacy). Our group signature scheme has leave privacy if the encryption
scheme used by the signers is IND − CPA secure and has IK − CPA key privacy and the SFPK scheme
is adaptively class hiding with key corruption.
Proof. This proof follows similar steps as the proof for join privacy. We consider a series of games,
where in the ﬁrst game b is ﬁxed to 0 and in the last game, b is ﬁxed to 1. Let Si denote the event
that A’s ﬁnal output in GAMEi is 0.
GAME0 The Leave − Privacy game, where bit b is ﬁxed to 0.
29
GAME1 We change the public key used to encrypt the epoch data for user uid0 using the public
key of user uid1. We have
|Pr[S0] − Pr[S1]| ≤ Advik−cpaA,PKE(λ).
GAME2 We now change the randomness encrypted in this ciphertext to the randomness for user
uid1. Because of IND − CPA security of the encryption scheme we have
|Pr[S1] − Pr[S2]| ≤ Advind−cpa
A,PKE (λ).
GAME3 We change the SFPK public key to the public key of uid1, also changing the signatures in
PrivChall to this secret key. The game is now the same as the Leave − Privacy game with the bit ﬁxed
to 1. Because of adaptive class hiding we have
|Pr[S2] − Pr[S3]| ≤ Advadaptc-h
A,SFPK(λ).
5.1 Eﬃcient Instantiation and Discussion
In this subsection we show how to eﬃciently instantiate our group signature construction. Our main
objective is to minimize the signature size of our scheme while using only building blocks that are
secure under standard assumptions and without random oracles.
(cid:48)
We ﬁrst take a look at a signature itself, which is composed of an SFPK public key pk
SFPK, an
SFPK signature SigSFPK, an SPS-EQ signature σ(cid:48)
SPS and proof ΠSFPK. To instantiate SFPK signatures
(cid:48)
SFPK is 2 elements in G1 and SigSFPK is 2 elements in G1, 1 in
we use scheme 2, which means that pk