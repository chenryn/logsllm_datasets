t = 30 s: Let h2 ping h1 for 10 s, representing an external
user’s accessing of an external network host.
Concurrently, let h6 ping h1 for 10 s, represent-
ing an internal user’s accessing of an external
network host.
t = 50 s: Let h2 ping h3 for 60 s, representing an external
user’s accessing of an internal network host.
t = 95 s: Let h6 ping h1 for 10 s again, representing an
internal user’s accessing of an external network
host.
4) Results: Table II summarizes the results of the con-
nection interruption experiment. For each controller imple-
mentation, we ran and evaluated the attack for both the fail-
safe and fail-secure cases. We examined the security metrics
of unauthorized increased access incidents in the data plane
for external users who attempted to access internal network
hosts and denial of service incidents for internal users who
legitimately attempted to access external network hosts after
the connection interruption.
In all of the fail-safe cases,
the DMZ ﬁrewall switch
defaulted to a learning switch mode, in which it operated
independently of the controller. While this allowed an internal
user to access external network hosts,
it also allowed an
external user to access internal network hosts, which represents
unauthorized increased access. In most of the fail-secure cases
(excepting Ryu), the DMZ ﬁrewall switch prevented new ﬂows
from being created. While this prevented external users from
accessing internal network hosts, it also prevented internal
users from accessing external network hosts, representing a
data plane denial of service against legitimate trafﬁc. Ryu
did not trigger rule φ2 since its ﬂow match attributes were
speciﬁed differently from those of the other two controllers,
and thus the attack never entered state σ3.
576
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:29 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II. Connection interruption experiment results. If external users able to access internal network hosts, that represents unauthorized increased access.
If internal users are not able to access external network hosts after the connection interruption, that represents denial of service against legitimate trafﬁc.
External user can access an external network host? (t = 30 s)
Internal user can access an external network host? (t = 30 s)
External user can access an internal network host? (t = 50 s)
Internal user can access an external network host? (t = 95 s)









Floodlight/OVS
Secure
Safe


POX/OVS
Secure
Safe

Ryu/OVS
Secure
Safe












The results suggest that when control plane connections are
interrupted, there is a trade-off between allowing increased
access and creating a denial of service against
legitimate
trafﬁc.
Checking of the counter’s value can be used in the conditional
expression EXAMINEFRONT(δcounter) = n. As a result, this
portion of the attack description’s memory footprint is reduced
greatly from O(n) to O(1) attack states.
VIII. DISCUSSION
We note several key points regarding language expressive-
ness, efﬁcient modeling of attacks, and distributed injections.
A. Language Expressiveness
Our attack language allows practitioners to express attacks
that are more sophisticated than the attacks discussed in
Section VII. For example, we consider the following.
• Message reordering attack: Suppose a set of messages
M need to be sent in reverse order. To do that, the attack
can store the messages in a deque δ acting like a stack,
insert the messages using the PREPEND(δ, m) action |M|
times ∀m ∈ M, and retrieve and send the messages
in reverse order using the SHIFT(δ) and PASSMESSAGE
actions |M| times.
• Message replay and ﬂooding attacks: Suppose a set
of messages M need to be sent in FIFO order more
than once. To do that, the attack can store the mes-
sages in a deque δ acting like a queue, use the
DUPLICATEMESSAGE and PREPEND(δ, m) actions to
duplicate and store message copies |M| times ∀m ∈ M,
and sometime later use the POP(δ) and PASSMESSAGE
actions to replay the messages in FIFO order |M| times.
Flooding can be implemented similarly.
Our language implements deterministic attacks in the con-
text of our testing, but we will consider stochastic and adaptive
decision-making in future work.
B. Modeling Efﬁciency
Because we include storage objects, practitioners can efﬁ-
ciently model repetitive actions that require signiﬁcantly less
memory storage. Consider an attack that requires n instances
of seeing a particular message before it continues to the rest of
the attack. A naive modeling approach would be to represent
each received message as its own attack state, which would
be similar to a memoryless ﬁnite state machine, and require
n attack states.
However, we can use a deque δcounter of length 1 to repre-
sent a counter variable and condense this portion of the attack
into one attack state. Incrementing of the counter can be done
through the actions PREPEND(δcounter, SHIFT(δcounter) + 1).
C. Distributed Injection
The runtime injector, as described, inherently imposes a
total ordering of control plane events because of its centralized
nature. In the case of a distributed runtime injector archi-
tecture, total ordering could be imposed through distributed
systems techniques. However, a guarantee of total ordering
may come at the cost of increased latency and may inversely
affect the attack’s results if messages are dependent on phys-
ical time guarantees. We will consider total ordering, timing,
and consistency model challenges in future work.
IX. RELATED WORK
A. SDN Security, Troubleshooting, and Debugging
The prior SDN work most closely related to ATTAIN is
DELTA [5], a vulnerability detection tool for SDN. DELTA
detects vulnerabilities in implementations by fuzz-testing con-
trol protocol messages. ATTAIN extends that approach with a
standardized language for writing attack descriptions to use in
a controller-agnostic architecture.
Scott-Hayward et al. [21] classify security issues and attacks
in SDN in terms of the layers they affect and the effects of
the attacks. Kl¨oti et al. [22] use the STRIDE methodology to
analyze the OpenFlow protocol’s security, and they propose
vulnerabilities and attack trees for data modeling. However,
they assume that the controller is adequately secured, whereas
such assumptions are tunable in ATTAIN’s attack model. Hong
et al. [9] propose novel SDN attacks, and their proposed
attacks can be written in the ATTAIN attack language.
later
OFRewind [23] selectively records control and data plane
events for
replay during troubleshooting of errors.
OFf [24] interfaces with one of several open-source con-
trollers for debugging,
though it requires the addition of
a library to the controller source code, whereas ATTAIN
operates independently. OFTest [25] validates switches for
OpenFlow compliance by simulating control and data plane
elements with a single switch under test, whereas ATTAIN
subsumes OFTest’s methodology to include multiple switches
and controllers with reusable attack descriptions.
577
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:29 UTC from IEEE Xplore.  Restrictions apply. 
B. Fault and Attack Injection
AJECT, proposed by Neves et al. [26] and used for vulner-
ability detection by Antunes et al. [27], generates numerous
test cases based on a user-speciﬁed protocol speciﬁcation and
simulates attacks on an application protocol. AJECT includes
a target system, target protocol speciﬁcation, attack injector,
and monitor. ATTAIN builds upon this by including a user-
deﬁned attack model as well as user-deﬁned attacks that use
OpenFlow. Loki [28] uses a partial view of the global system
state to make injections. However,
this approach requires
software modiﬁcations for probing.
X. CONCLUSION
In this paper, we proposed an attack injection framework,
ATTAIN, for testing the security and performance properties of
OpenFlow-based SDN architectures in testing environments.
Our framework allows practitioners to model a system and
an attacker’s presumed capabilities to inﬂuence the system’s
behavior; to specify reusable and shareable attack descriptions
for cross-implementation evaluation; and to actuate runtime
attacks in an SDN-enabled network. We evaluated our frame-
work with two attacks, and we found that different implemen-
tations caused different attack manifestations in the control
and data planes. In particular, we were able to cause data
plane degradation and denial of service by suppressing ﬂow
modiﬁcation requests, and we increased unauthorized access
and caused a denial of service for legitimate data plane trafﬁc
by interrupting control plane connections.
Our future work will consider attack language abstractions
that will allow practitioners to use predeﬁned attack state
graph templates to generate larger and more complex attack
descriptions without having to manually generate many of
the lower-level details. The numerous SDN controller and
switch implementations available today make it challenging
to consistently evaluate security metrics or to understand how
classes of attacks may systemically affect SDN implementa-
tions. We hope that ATTAIN spurs further interest in exploring
the security assumptions made in SDN implementations.
ACKNOWLEDGMENT
The authors would like to thank Jenny Applequist for her
editorial assistance and members of the PERFORM Group
for feedback. This material is based upon work supported by
the Army Research Ofﬁce under Award No. W911NF-13-1-
0086. This material is also based on research sponsored by
the Air Force Research Laboratory and the Air Force Ofﬁce
of Scientiﬁc Research under agreement number FA8750-11-
2-0084.
REFERENCES
[1] D. Kreutz, F. Ramos, P. Ver´ıssimo, C. Rothenberg, S. Azodolmolky,
and S. Uhlig, “Software-deﬁned networking: A comprehensive survey,”
in Proceedings of the IEEE, vol. 103, no. 1, Jan. 2015, pp. 14–76.
[2] D. Kreutz, F. Ramos, and P. Ver´ıssimo, “Towards secure and dependable
software-deﬁned networks,” in Proceedings of ACM HotSDN ’13, 2013,
pp. 55–60.
[3] P. Berde, M. Gerola, J. Hart, Y. Higuchi, M. Kobayashi, T. Koide,
B. Lantz, B. O’Connor, P. Radoslavov, W. Snow, and G. Parulkar,
“ONOS: Towards an open, distributed SDN OS,” in Proceedings of ACM
HotSDN ’14, 2014, pp. 1–6.
[4] Open Networking Foundation, “OpenFlow switch speciﬁcation version
1.3.0,” Jun. 2012.
[5] S. Lee, C. Yoon, C. Lee, S. Shin, V. Yegneswaran, and P. Porras,
“DELTA: A security assessment framework for software-deﬁned net-
works,” in Proceedings of NDSS ’17, Feb. 2017.
[6] Big Switch Networks, “Project Floodlight: Open source software for
building software-deﬁned networks,” Jan. 2016. [Online]. Available:
http://www.projectﬂoodlight.org/ﬂoodlight/
[7] Open vSwitch, “Open vSwitch: Production quality, multilayer open
virtual switch.” [Online]. Available: http://www.openvswitch.org/
[8] Open Networking Foundation, “OpenFlow switch speciﬁcation version
1.0.0,” Dec. 2009.
[9] S. Hong, L. Xu, H. Wang, and G. Gu, “Poisoning network visibility
in software-deﬁned networks: New attacks and countermeasures,” in
Proceedings of NDSS ’15, Feb. 2015.
[10] J. M. Voas and G. McGraw, Software Fault Injection: Inoculating
Programs Against Errors.
John Wiley & Sons, Inc., 1997.
[11] B. Ujcich, “An attack model, language, and injector for the control plane
of software-deﬁned networks,” Master’s Thesis, University of Illinois at
Urbana-Champaign, Urbana, IL, Aug. 2016.
[12] J. Hizver, “Taxonomic modeling of security threats in software deﬁned
networking,” in Proceedings of BlackHat ’15, Aug. 2015.
[13] Big Switch Networks, “LoxiGen: OpenFlow protocol bindings for
[Online]. Available: https://www.github.com/
languages.”
multiple
ﬂoodlight/loxigen
[14] OpenFlow at Stanford, “POX Wiki,” Jan. 2016. [Online]. Available:
https://openﬂow.stanford.edu/display/ONL/POX+Wiki
[15] Ryu SDN Framework Community, “Ryu SDN Framework,” Jan. 2016.
[16] Open
[Online]. Available: https://osrg.github.io/ryu/
“SDN
[Online].
Networking
Sep
Foundation,
environment,”
//www.opennetworking.org/images/stories/downloads/sdn-resources/
solution-briefs/sb-enterprise-campus.pdf
2013.
in
the
Available:
campus
https:
[17] ——, “Software-deﬁned networking: The new norm for networks,”
Apr. 2012. [Online]. Available: https://www.opennetworking.org/images/
stories/downloads/sdn-resources/white-papers/wp-sdn-newnorm.pdf
[18] M. Berman, J. S. Chase, L. Landweber, A. Nakao, M. Ott, D. Raychaud-
huri, R. Ricci, and I. Seskar, “GENI: A federated testbed for innovative
network experiments,” Computer Networks, vol. 61, pp. 5–23, 2014,
special issue on Future Internet Testbeds – Part I.
[19] B. Oliver, “Pica8: First to adopt OpenFlow 1.4; Why isn’t anyone
[Online]. Available: http://www.tomsitpro.com/
else?” May 2014.
articles/pica8-openﬂow-1.4-sdn-switches,1-1927.html
[20] Open vSwitch, “Open vSwitch manual: ovs-vsctl,” Dec. 2015.
http://www.openvswitch.org/support/dist-docs/
[Online]. Available:
ovs-vsctl.8.txt
[21] S. Scott-Hayward, G. O’Callaghan, and S. Sezer, “SDN security: A
survey,” in Proceedings of IEEE SDN4FNS ’13, Nov. 2013, pp. 1–7.
[22] R. Kl¨oti, V. Kotronis, and P. Smith, “OpenFlow: A security analysis,”
in Proceedings of IEEE ICNP ’13, Oct. 2013, pp. 1–6.
[23] A. Wundsam, D. Levin, S. Seetharaman, and A. Feldmann, “OFRewind:
Enabling record and replay troubleshooting for networks,” in Proceed-
ings of USENIX ’11, 2011.
[24] R. Durairajan, J. Sommers, and P. Barford, “Controller-agnostic SDN
debugging,” in Proceedings of ACM CoNEXT ’14, 2014, pp. 227–234.
[25] Big Switch Networks, “Project Floodlight: OFTest,” Jan. 2016. [Online].
Available: http://www.projectﬂoodlight.org/oftest/
[26] N. Neves, J. Antunes, M. Correia, P. Ver´ıssimo, and R. Neves, “Using
attack injection to discover new vulnerabilities,” in Proceedings of
IEEE/IFIP DSN ’06, 2006, pp. 457–466.
[27] J. Antunes, N. Neves, M. Correia, P. Ver´ıssimo, and R. Neves, “Vulner-
ability discovery with attack injection,” IEEE Transactions on Software
Engineering, vol. 36, no. 3, pp. 357–370, 2010.
[28] R. Chandra, R. M. Lefever, M. Cukier, and W. H. Sanders, “Loki: A
state-driven fault injector for distributed systems,” in Proceedings of
IEEE/IFIP DSN ’00, 2000, pp. 237–242.
578
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:29 UTC from IEEE Xplore.  Restrictions apply.