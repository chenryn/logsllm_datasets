        except:
        - 157.10.1.0/24
```
在这个网络策略中，我们指定了单个`Ingress`规则和单个`Egress`规则。这些规则中的每一条都不是基于流量来自哪个 Pod，而是基于网络请求的源 IP 来接受或拒绝流量。
在我们的例子中，我们已经为我们的`Ingress`和`Egress`规则选择了`/16`子网掩码范围(带有指定的`/24` CIDR 例外)。这有一个副作用，那就是阻止我们集群内的任何流量到达这些 Pod，因为我们的 Pod IPs 都不符合默认集群网络设置中的规则。
但是，来自指定子网掩码(且不在例外范围内)中群集外部的流量将能够向`worker` Pods 发送流量，也能够接受来自`worker` Pods 的流量。
随着我们对网络策略讨论的结束，我们可以进入一个完全不同的安全栈层——运行时安全和入侵检测。
# 在 Kubernetes 上处理入侵检测、运行时安全性和合规性
一旦您设置了您的 Pod 安全策略和网络策略，并且通常确保您的配置尽可能地防水，那么在 Kubernetes 中仍然有许多可能的攻击媒介。在本节中，我们将重点讨论来自 Kubernetes 集群的攻击。即使有非常具体的 Pod 安全策略(明确地说，这确实有帮助)，在您的集群中运行的容器和应用也有可能执行意外或恶意的操作。
为了解决这个问题，许多专业人员寻求运行时安全工具，它允许对应用进程进行持续的监控和警报。对于 Kubernetes 来说，一个流行的开源工具可以实现这一点是*法尔科*。
## 安装法尔科
法尔科称自己为 Kubernetes 进程的行为活动监视器。它可以监视运行在 Kubernetes 上的容器化应用以及 Kubernetes 组件本身。
Falco 是如何工作的？实时地，Falco 解析来自 Linux 内核的系统调用。然后，它通过规则过滤这些系统调用，这些规则是可以应用于 Falco 引擎的配置集。每当系统调用违反规则时，Falco 都会触发警报。就这么简单！
Falco 附带了一套广泛的默认规则，在内核级别增加了显著的可观察性。Falco 当然支持自定义规则，我们将向您展示如何编写它们。
但是，首先我们需要在集群上安装 Falco！幸运的是，可以使用 Helm 安装 Falco。但是，非常重要的是要注意，有几种不同的方法来安装 Falco，它们在发生违规时的有效性方面有很大的不同。
我们将使用 Helm 图表安装 Falco，该图表非常简单，适用于托管 Kubernetes 集群，或者您可能无法直接访问工作节点的任何场景。
但是，为了获得最佳的安全状态，应该在 Linux 级别将 Falco 直接安装到 Kubernetes 节点上。使用 DaemonSet 的 Helm 图表非常易于使用，但本质上不如直接安装 Falco 安全。要将 Falco 直接安装到您的节点，请查看[https://falco.org/docs/installation/](https://falco.org/docs/installation/)的安装说明。
有了这个警告，我们可以使用 Helm 安装 Falco:
1.  First, we need to add the `falcosecurity` repo to our local Helm:
    ```
    helm repo add falcosecurity https://falcosecurity.github.io/charts
    helm repo update
    ```
    接下来，我们可以继续使用 Helm 实际安装 Falco。
    重要说明
    Falco Helm 图表有许多可能的变量，可以在值文件中更改–要全面查看这些变量，您可以查看官方 Helm 图表回购位于[https://github.com/falcosecurity/charts/tree/master/falco](https://github.com/falcosecurity/charts/tree/master/falco)。
2.  要安装 Falco，请运行以下命令:
    ```
    helm install falco falcosecurity/falco
    ```
该命令将使用默认值安装 Falco，您可以在[https://github . com/Falcosecurity/charts/blob/master/Falco/values . YAML](https://github.com/falcosecurity/charts/blob/master/falco/values.yaml)上看到这些默认值。
接下来，让我们深入了解一下法尔科为具有安全意识的 Kubernetes 管理员提供了什么。
## 了解法尔科的能力
如前所述，Falco 附带了一组默认规则，但是我们可以使用新的 YAML 文件轻松添加更多规则。由于我们使用的是 Helm 版本的 Falco，将自定义规则传递给 Falco 就像创建一个新的值文件或者用自定义规则编辑默认的值文件一样简单。
添加自定义规则如下所示:
自定义猎鹰 yaml
```
customRules:
  my-rules.yaml: |-
    Rule1
    Rule2
    etc...
```
现在是讨论法尔科规则结构的好时机。为了说明这一点，让我们借用法尔科掌舵图附带的`Default`法尔科规则集的几行规则。
在 YAML 指定 Falco 配置时，我们可以使用三种不同类型的键来帮助构建规则。这些是宏、列表和规则本身。
我们在这个例子中看到的具体规则叫做`Launch Privileged Container`。该规则将检测权限容器何时被启动，并将关于该容器的一些信息记录到`STDOUT`中。在警报方面，规则可以做各种事情，但是当高风险事件发生时，登录`STDOUT`是增加可观察性的好方法。
首先，让我们看看规则条目本身。这条规则使用了几个助手条目、几个宏和列表，但是我们马上会用到它们:
```
- rule: Launch Privileged Container
  desc: Detect the initial process started in a privileged container. Exceptions are made for known trusted images.
  condition: >
    container_started and container
    and container.privileged=true
    and not falco_privileged_containers
    and not user_privileged_containers
  output: Privileged container started (user=%user.name command=%proc.cmdline %container.info image=%container.image.repository:%container.image.tag)
  priority: INFO
  tags: [container, cis, mitre_privilege_escalation, mitre_lateral_movement]
```
如你所见，法尔科规则有几个部分。首先，我们有规则名称和描述。然后，我们指定规则的触发条件——它充当 Linux 系统调用的过滤器。如果系统调用与`condition`块中的所有逻辑过滤器匹配，则触发规则。
当规则被触发时，输出键允许我们设置输出文本的显示格式。`priority`键让我们分配优先级，可以是`emergency`、`alert`、`critical`、`error`、`warning`、`notice`、`informational`和`debug`中的一个。
最后，`tags`键将标签应用于有问题的规则，使规则更容易分类。当使用不仅仅是纯文本`STDOUT`条目的警报时，这一点尤其重要。
`condition`的语法在这里特别重要，我们将重点介绍这个过滤系统是如何工作的。
首先，因为过滤器本质上是逻辑语句，所以您会看到一些熟悉的语法(如果您曾经编程或编写过伪代码的话)——还有，还有，没有，等等。这个语法非常容易学习，关于它的完整讨论——系统挖掘过滤器语法——可以在[https://github . com/draios/Sysdig/wiki/Sysdig-用户指南#过滤](https://github.com/draios/sysdig/wiki/sysdig-user-guide#filtering)中找到。
需要注意的是，Falco 开源项目最初是由 *Sysdig* 创建的，这就是为什么它使用了通用的 *Sysdig* 过滤器语法。
接下来，您将看到对`container_started`和`container`以及`falco_privileged_containers`和`user_privileged_containers`的引用。这些不是普通的字符串，而是宏的使用——对 YAML 其他块的引用，这些块指定了附加功能，并且通常使编写规则变得更加容易，而无需重复大量配置。
为了了解该规则的实际工作原理，让我们来看一下前面规则中引用的所有宏的完整引用:
```
- macro: container
  condition: (container.id != host)
- macro: container_started
  condition: >
    ((evt.type = container or
     (evt.type=execve and evt.dir=
    Detect an attempt to start a pod with a container image outside of a list of allowed images.
  condition: kevt and pod and kcreate and not allowed_k8s_containers
  output: Pod started with container not in allowed list (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace images=%ka.req.pod.containers.image)
  priority: WARNING
  source: k8s_audit
  tags: [k8s]
```
此规则作用于 Falco 中的 Kubernetes 审核事件(本质上是控制平面事件)，以在创建不在列表`allowed_k8s_containers`上的 Pod 时发出警报。默认的`k8s`审核规则包含许多类似的规则，大多数规则在触发时会输出格式化的日志。
现在，我们在本章前面讨论了 Pod 安全策略，您可能会看到 PSPs 和 Falco Kubernetes 审计事件规则之间的一些相似之处。例如，从默认的 Kubernetes Falco 规则中提取这个条目:
```
- rule: Create HostNetwork Pod
  desc: Detect an attempt to start a pod using the host network.
  condition: kevt and pod and kcreate and ka.req.pod.host_network intersects (true) and not ka.req.pod.containers.image.repository in (falco_hostnetwork_images)
  output: Pod started using host network (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace images=%ka.req.pod.containers.image)
  priority: WARNING
  source: k8s_audit
  tags: [k8s]
```
当 Pod 试图开始使用主机网络时触发的规则直接映射到主机网络 PSP 设置。
Falco 利用了这种相似性，让我们使用 Falco 作为一种方法来`trial`新的 Pod 安全策略，而不会在集群范围内应用它们，也不会导致运行 Pod 时出现问题。
为此，`falcoctl`(Falco 命令行工具)附带了`convert psp`命令。该命令接受 Pod 安全策略定义，并将其转换为一组 Falco 规则。这些 Falco 规则在被触发时只会向`STDOUT`输出日志(而不是像 PSP 不匹配那样导致 Pod 调度失败)，这使得在现有集群中测试新的 Pod 安全策略变得更加容易。
要了解如何使用`falcoctl`转换工具，请查看位于[https://falco.org/docs/psp-support/](https://falco.org/docs/psp-support/)的官方 Falco 文档。
现在我们已经对 Falco 工具有了一个很好的基础，让我们讨论如何使用它来实现合规性控制和运行时安全性。
## 将 Falco 映射到合规性和运行时安全用例
由于其可扩展性和审计低级 Linux 系统调用的能力，Falco 是持续合规性和运行时安全性的绝佳工具。
在合规方面，可以利用专门映射到合规标准(例如 PCI 或 HIPAA)要求的 Falco 规则集。这允许用户快速检测任何不符合所讨论标准的过程并采取行动。有几种标准的开源和闭源 Falco 规则集。
同样，为了运行时安全，Falco 公开了一个警报/事件系统，这意味着任何触发警报的运行时事件也可以触发自动干预和补救过程。这对安全性和合规性都有好处。例如，如果一个 Pod 触发了一个 Falco 违规警报，一个进程可以关闭该警报并立即删除违规的 Pod。
# 总结
在本章中，我们学习了 Kubernetes 环境中的安全性。首先，我们回顾了 Kubernetes 上的安全基础知识——安全栈的哪些层与我们的集群相关，以及如何管理这种复杂性的一些粗略方法。接下来，我们了解了 Kubernetes 遇到的一些主要安全问题，并讨论了 2019 年安全审计的结果。
然后，我们在 Kubernetes 中的两个不同的栈级别上实现了安全性——首先，在配置中使用 Pod 安全策略和网络策略，最后，使用 Falco 实现运行时安全性。
在下一章中，我们将学习如何通过构建自定义资源使 Kubernetes 成为您自己的。这将允许您向集群添加重要的新功能。
# 问题
1.  自定义准入控制器可以使用的两个 webhook 控制器的名称是什么？
2.  一个空白`NetworkPolicy`对于进入有什么影响？
3.  为了防止攻击者改变 Pod 的功能，什么样的 Kubernetes 控制平面事件是值得跟踪的？
# 进一步阅读
*   kuble CVE 数据库:[https://CVE . mitre . org/CGI-bin/cvekey . CGI？keyword = kubricks](https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=kubernetes)