a1 + b1
EOF
echo The final anewer for this mess is Svar5
将选项和表达式放在脚本的不同行中可以让处理过程变得更清晰，提高易读性。EOP字符串
标识了重定向给bc命令的数据的起止。当然，必须用命令替换符号标识出用来给变量赋值的命令。
你还会注意到，在这个例子中，你可以在bash计算器中赋值给变量。这一点很重要：在bash
计算器中创建的变量只在bash计算器中有效，不能在shell脚本中使用。
11.8退出脚本
迄今为止所有的示例脚本中，我们都是突然停下来的。运行完最后一条命令时，脚本就结束
了。其实还有另外一种更优雅的方法可以为脚本划上一个句号。
shell中运行的每个命令都使用退出状态码（exit status）告诉shell它已经运行完毕。退出状态
码是一个0-255的整数值，在命令结束运行时由命令传给shell。可以捕获这个值并在脚本中使用。
11.8.1查看退出状态码
Linux提供了一个专门的变量s?来保存上个已执行命令的退出状态码。对于需要进行检查的
命令，必须在其运行完毕后立刻查看或使用s?变量。它的值会变成由shell所执行的最后一条命令
的退出状态妈。
Sat Fan 15 10 : 01 :30 BDT 2014
$ date
ε$ oqoa $
$
按照惯例，一个成功结束的命令的退出状态码是0。如果一个命令结束时有错误，退出状态
---
## Page 244
11.8退出脚本
229
码就是一个正数值。
$ asdfg
-bash1 asdfg: command not found
$ echo $?
127
无效命令会返回一个退出状态码127。Linux错误退出状态码没有什么标准可循，但有一些可
用的参考，如表11-2所示。
表11-2Linux退出状态码
状态码
描
述
U
命令成功结束
1
一般性术知错误
2
不适合的shell喻令
126
命令不可执行
127
没找到命令
1.28
无效的退出参数
1.28+x
与Limux倍号x相关的严重错误
130
通过Ctrl+C终止的命令
255
正常范围之外的退出状态码
退出状态码126表明用户没有执行命令的正确权限。
-bash: ./myprog,c: Pernission denied
$./myprog,c
$ echo $?
126
另一个会碰到的常见错误是给某个命令提供了无效参数。
$ date t
date1 invalid date 'gt*
$ echo $?
$
这会产生一般性的退出状态码1，表明在命令中发生了未知错误。
11.8.2exit 命令
默认情况下，shell脚本会以脚本中的最后一个命令的退出状态码退出。
$./test6
The result is 2
$ ouoa s
6
---
## Page 245
OEZ
第11章构建基本脚本
你可以改变这种默认行为，返回自已的退出状态码。exit命令允许你在脚本结束时指定一
个退出状态码。
$ cat test13
1/bin/bash
 testing the exit status
var1=10
var3=$[$var1 + $var2]
var2=30
echo The answer is Svar3
exit 5
当查看脚本的退出码时，你会得到作为参数传给exit命令的值。
$ chmod u+x test13
The answer ie 40
$./test13
$ echo $?
5
$
也可以在exit命令的参数中使用变量。
+1/bin/bash
$ cat test14
 testing the exit status
var1=10
va±2=30
var3=$[$var1 + $var2]
exit $var3
当你运行这个命令时，它会产生如下退出状态。
$ chmod u+x test14
$./test14
$ echo $?
4 0
你要注意这个功能，因为退出状态码最大只能是255。看下面例子中会怎样。
$ cat test14b
 testing the exit status
1/bin/bash
var1=10
var2=30
var3=$[$var1 * $var2]
echo The value is $var3
exit $var3
现在运行它的话，会得到如下输出。
$./test14b
---
## Page 246
11.9小结
231
00E 8T 9nteA o
ts ouoo $
P
$
退出状态码被缩减到了0-255的区间。shell通过模运算得到这个结果。一个值的模就是被除
后的余数。最终的结果是指定的数值除以256后得到的余数。在这个例子中，指定的值是300（返
回值），余数是44，因此这个余数就成了最后的状态退出码。
在第12章中，你会了解到如何用if-then语句来检查某个命令返回的错误状态，以便知道命
令是否成功。
11.9小结
bashshell脚本允许你将多个命令串起来放进脚本中。创建脚本的最基本的方式是将命令行中
的多个命令通过分号分开来。shell会按顺序逐个执行命令，在显示器上显示每个命令的输出。
你也可以创建一个shell脚本文件，将多个命令放进同一个文件，让shel依次执行。shell脚本
文件必须定义用于运行脚本的shell。这个可以通过！符号在脚本文件的第一行指定，后面跟上
shell的完整路径。
在shell脚本内，你可以通过在变量前使用关元符来引用环境变量。也可以定义自已的变量以
便在脚本内使用，并对其赋值，甚至还可以通过反引号或$（捕获的某个命令的输出。在脚本中
可以通过在变量名前放置一个美元符来使用变量的值。
bash shell允许你更改命令的标准输人和输出，将其重定问到其他地方。你可以通过大于号将
命令输出从显示器屏幕重定向到一个文件中。也可以通过双大于号将输出数据追加到已有文件。
小于号用来将输人重定向到命令。你可以将文件内容重定向到某个命令。
Linux管道命令（断条符号）允许你将命令的输出直接重定向到另一个命令的输人。Linux系
统能够同时运行这两条命令，将第一个命令的输出发送给第二个命令的输入，不需要借助任何重
定向文件。
bash shel提供了多种方式在shell脚本中执行数学操作。expr命令是一种进行整数运算的简便
方法。在bashshell中，你也可以通过将关元符号放在由方括号包围的表达式之前来执行基本的数
学运算。为了执行浮点运算，你需要利用bc计算器命令，将内联数据重定向到输人，然后将输出
存储到用户变量中。
最后，本章讨论了如何在shell脚本中使用退出状态码。shell中运行的每个命令都会产生一个
退出状态码。退出状态码是一个0-255的整数值，表明命令是否成功执行：如果没有成功，可能
的原因是什么。退出状态码o表明命令成功执行了。你可以在shell脚本中用exit命令来声明一个
脚本完成时的退出状态码。
到目前为止，脚本中的命令都是按照有序的方式一个接着一个处理的。在下章中，你将学习
如何用一些逻辑流程控制来更改命令的执行次序。
---
## Page 247
第12章
使用结构化命令
本章内容
使用if-then语句
嵌套if语句
test命令
复合条件测试
口使用双方括号和双括号
case命令
土序操作来说，这已经足够了，因为在这种操作环境下，你想要的就是所有的命令按照
正确的顺序执行。然而，并非所有程序都如此操作。
许多程序要求对shell脚本中的命令施加一些逻辑流程控制。有一类命令会根据条件使脚本跳
过某些命令。这样的命令通常称为结构化命令（structured command）。
结构化命令允许你改变程序执行的顺序。在bashshell中有不少结构化命令，我们会逐个研究。
本章来看一下if-then和case语句。
12.1使用if-then语句
最基本的结构化命令就是if-then语句。if-then语句有如下格式。
if command
hen
commanda
fi
如果你在用其他编程语言的if-then语句，这种形式可能会让你有点困惑。在其他编程语言
中，if语句之后的对象是一个等式，这个等式的求值结果为TRUE或FALSE。但bash shell的iE语
句并不是这么做的。
bash shell的if语句会运行if后面的那个命令。如果该命令的退出状态码（参见第11章）是0
（该命令成功运行），位于then部分的命令就会被执行。如果该命令的退出状态码是其他值，then
---
## Page 248
12.1使用if-then语句
233
部分的命令就不会被执行，bash shell会继续执行脚本中的下一个命令。fi语句用来表示if-then
语句到此结束。
这里有个简单的例子可解释这个概念。
S cat testl.sh
testing the if statenent
1/bin/bash
if pwd
then
fi
echo *It worked*
这个脚本在if行采用了pwd命令。如果命令成功结束，echo语句就会显示该文本字符串。在
命令行运行该脚本时，会得到如下结果。
S./test1.sh
/home/Christine
It worked
shell执行了if行中的pwrd命令。由于退出状态码是o，它就又执行了then部分的echo语句。
下面是另外一个例子。
 testing a bad cormand
1/bin/bash
if IanltotaCormand
then
echo *It vorked*
echo *We are outside the if statement*
fi
/test2.ehs Line 3: IandotaCoemand: cormsnd not found
S./test2.sh
We are outside the if statenent
在这个例子中，我们在i语句行故意放了一个不能工作的命令。由于这是个错误的命令，所
以它会产生一个非零的退出状态码，且bash shell会跳过then部分的echo语句。还要注意，运行
ir语句中的那个错误命令所生成的错误消息依然会显示在脚本的输出中。有时你可能不想看到错
误信息。第15章将会讨论如何避免这种情况。
说明你可能在有些脚本中看到过if-then语句的另一种形式：
12
if cormand; then
coxmnanda
通过把分号放在待求值的命令尾部，就可以将then语句放在同一行上了，这样看起来更
像其他编程语言中的if-then语句。
---
## Page 249
234
第12章使用结构化命令
在then部分，你可以使用不止一条命令。可以像在脚本中的其他地方一样在这里列出多条
命令。bashshell会将这些命令当成一个块，如果if语句行的命令的退出状态值为o，所有的命令
都会被执行；如果i语句行的命令的退出状态不为0，所有的命令都会被跳过。
S cat teat3.sh
+1 /bin/bash
 testing multiple conmands in the then section
testuser=Christine
if grep $testuser /etc/passvd
then
echo *This is my first command*
echo *This is my second command*
echo *I can even put in other comnands besides echo1*
fi
ls -a /home/$testuser/ .b*
$
if语句行使用grep命令在/etc/passwd文件中查找某个用户名当前是否在系统上使用。如果有
用户使用了那个登录名，脚本会显示一些文本信息并列出该用户HOME目录的bash文件。
Christine1x:501:501:Christine B:/home/Chrietine1/bin/bash
$./test3.sh
This ie my second conmand
This is my first command
I can even put in other conmands besides echo1
/home/Chrietine/ -bash_history
/home/Christine/ ,bash_profile
/home/Christine/ -bash_logout
/home/Chrietine/, bashre
但是，如果将testuser变量设置成一个系统上不存在的用户，则什么都不会显示。
S cat test3.sh
 testing multiple cormands in the then section
1/bin/bash
testuser-toSuehUser
if grep $testuser /etc/passwd
then
echo *rhis is my first command*
roqpa sapteaq apuesos xaqio ur and uaua ueo I。 oupe
echo *This is my second conmand*
ls -a /home/$testuser/.b*
fi
$
$./test3.sh
看起来也没什么新鲜的。如果在这里显示的一些消息可说明这个用户名在系统中未找到，这
样可能就会显得更友好。是的，可以用if-then语句的另外一个特性来做到这一点。
---
## Page 250
12.3最委if
235
12.2if-then-else语句
在if-then语句中，不管命令是否成功执行，你都只有一种选择。如果命令返回一个非零退
出状态码，bashshell会继续执行脚本中的下一条命令。在这种情况下，如果能够执行另一组命令
就好了。这正是if-then-else语句的作用。
if-then-else语句在语句中提供了另外一组命令。
if cosmand
then
cosmanda
else