     ,
     message_id
     ,
    or other object references to the URL query, or the POST body parameters, and see if it makes a difference to the application’s behavior. For example, say this request displays your messages:
    如果应用程序生成的请求中没有标识符，请尝试向请求中添加一个。将id、user_id、message_id或其他对象引用附加到URL查询或POST正文参数中，并查看对应用程序行为是否产生影响。例如，假设此请求显示您的消息：
GET /api_v1/messages
    Then maybe this request would display another user’s messages instead:
    那么也许这个请求会显示另一个用户的消息：
GET /api_v1/messages?user_id=ANOTHER_USERS_ID
    Keep an Eye Out for Blind IDORs
    Still, sometimes endpoints susceptible to IDOR don’t respond with the leaked information directly. They might lead the application to leak information elsewhere, instead: in export files, email, and maybe even in text alerts. For example, imagine that this endpoint on
     example.com
    allows users to email themselves a copy of a receipt:
    然而，有时易受IDOR攻击的终端不会直接响应泄漏的信息。它们可能会导致应用程序在其他地方泄漏信息，例如在导出文件、电子邮件甚至文本警报中。例如，想象一下，在example.com上，这个终端允许用户将收据副本通过电子邮件发送给自己：
POST /get_receipt
(POST request body)
receipt_id=3001
    This request will send a copy of receipt 3001 to the registered email of the current user. Now, what if you were to request a receipt that belongs to another user, receipt 2983?
    这个请求将会把收据3001的副本发送至当前用户已注册的电子邮件。那么，如果你要请求属于另一个用户的收据，比如是收据2983，该怎么办呢？
POST /get_receipt
(POST request body)
receipt_id=2983
    While the HTTP response does not change, you may get a copy of receipt 2983 in your email inbox! Often a malicious request can cause an info leak sometime in the future. I once found an IDOR that led to an info leak one month later, in a monthly report.
    如果HTTP响应不变，您可能会在电子邮件收件箱中收到2983号收据的副本！通常，恶意请求可能会在未来某个时候造成信息泄漏。我曾经发现一个IDOR，在一个月后的月度报告中导致了信息泄漏。
    Change the Request Method
    If one HTTP request method doesn’t work, you can try plenty of others instead: GET, POST, PUT, DELETE, PATCH, and so on. Applications often enable multiple request methods on the same endpoint but fail to implement the same access control for each method. For example, if this GET request is not vulnerable to IDOR and doesn’t return another user’s resources
    如果一个HTTP请求方法不可行，你可以试试其他的方法：例如GET，POST，PUT，DELETE，PATCH等等。许多应用程序常常在同一个终点上启用多个请求方法，但未能为每个方法实现相同的访问控制。例如，如果此GET请求不易受到IDOR攻击，并且不会返回另一个用户的资源。
GET example.com/uploads/user1236-01.jpeg
    you can try to use the DELETE method to delete the resource instead. The DELETE method removes the resource from the target URL:
    您可以尝试使用DELETE方法删除资源。DELETE方法会从目标URL中删除资源。
DELETE example.com/uploads/user1236-01.jpeg
    If POST requests don’t work, you can also try to update another user’s resource by using the PUT method. The PUT method updates or creates the resource at the target URL:
    如果POST请求不起作用，您也可以尝试使用PUT方法更新另一个用户的资源。PUT方法会在目标URL上更新或创建资源：
PUT example.com/uploads/user1236-01.jpeg
(PUT request body)
NEW_FILE
    Another trick that often works is switching between POST and GET requests. If there is a POST request like this one
    另一个经常起作用的魔术是在POST和GET请求之间切换。如果有像这个一样的POST请求。
POST /get_receipt
(POST request body)
receipt_id=2983
    you can try rewriting it as a GET request, like this:
    你可以尝试将它改写为GET请求，就像这样:
GET /get_receipt?receipt_id=2983
    Change the Requested File Type
    Switching the file type of the requested file sometimes leads the server to process the authorization differently. Applications might be flexible about how the user can identify information: they could allow users to either use IDs to reference a file or use the filename directly. But applications often fail to implement the same access controls for each method of reference.
    请求文件切换文件类型有时会导致服务器以不同的方式处理授权。应用程序可能灵活地确定用户如何识别信息：它们可以允许用户使用 ID 引用文件或直接使用文件名。但是，应用程序往往未能为每种引用方法实施相同的访问控制。
    For example, applications commonly store information in the JSON file type. Try adding the
     .json
    extension to the end of the request URL and see what happens. If this request is blocked by the server
    例如，应用程序通常将信息存储在JSON文件类型中。尝试在请求URL的末尾添加“.json”扩展名，看看会发生什么。如果服务器阻止此请求。
GET /get_receipt?receipt_id=2983
    then try this one instead:
    那就试试这个：
GET /get_receipt?receipt_id=2983.json
    Escalating the Attack
    The impact of an IDOR depends on the affected function, so to maximize the severity of your bugs, you should always look for IDORs in critical functionalities first. Both
     read-based
     IDORs
    (which leak information but do not alter the database) and
     write-based
     IDORs
    (which can alter the database in an unauthorized way) can be of high impact.
    IDOR的影响取决于受影响的功能，因此为了最大化漏洞的严重性，您应始终首先寻找关键功能中的IDOR。基于读取的IDOR（泄露信息但不更改数据库）和基于写入的IDOR（可以以未经授权的方式更改数据库）都可能会造成很高的影响。
    In terms of the state-changing, write-based IDORs, look for IDORs in password reset, password change, and account recovery features, as these often have the highest business impact. Target these over, say, a feature that changes email subscription settings.
    在状态变更、基于写入的IDOR方面，寻找密码重置、密码更改和账户恢复等功能中IDOR，因为这些功能往往具有最大的商业影响。与修改电子邮件订阅设置等功能相比，重点关注这些功能。
    As for the non-state-changing (read-based) IDORs, look for functionalities that handle the sensitive information in the application. For example, look for functionalities that handle direct messages, personal information, and private content. Consider which application functionalities make use of this information and look for IDORs accordingly.
    对于非状态改变（基于读取的）IDOR，请查找应用程序中处理敏感信息的功能。例如，查找处理直接消息、个人信息和私人内容的功能。考虑哪些应用程序功能使用此信息，并相应地查找IDOR。
    You can also combine IDORs with other vulnerabilities to increase their impact. For example, a write-based IDOR can be combined with self-XSS to form a stored XSS. An IDOR on a password reset endpoint combined with username enumeration can lead to a mass account takeover. Or a write IDOR on an admin account may even lead to RCE! We’ll talk about RCEs in
     Chapter 18
    .
    您还可以将IDOR与其他漏洞相结合，以增加其影响力。例如，基于写入的IDOR可与自我XSS结合形成存储的XSS。在密码重置端点上的IDOR与用户名枚举相结合，可以导致大规模的账户接管。或者，对管理员帐户的写入IDOR甚至可能导致RCE！我们将在第18章讨论RCE。
    Automating the Attack
    After you get the hang of hunting for IDORs, you can try to automate IDOR hunting by using Burp or your own scripts. For example, you can use the Burp intruder to iterate through IDs to find valid ones. The Burp extension Autorize (
     https://github.com/Quitten/Autorize/
    ) scans for authorization issues by accessing higher-privileged accounts with lower-privileged accounts, whereas the Burp extensions Auto Repeater (
     https://github.com/nccgroup/AutoRepeater/
    ) and AuthMatrix (
     https://github.com/SecurityInnovation/AuthMatrix/
    ) allow you to automate the process of switching out cookies, headers, and parameters. For more information on how to use these tools, go to the Extender tab of your Burp window, then to the BAppStore tab to find the extension you want to use.
    掌握搜索IDOR后，您可以尝试通过使用Burp或自己的脚本自动化IDOR搜索。例如，您可以使用Burp Intruder来迭代ID以找到有效的ID。Burp扩展名Autorize（https://github.com/Quitten/Autorize/）通过使用低特权帐户访问高特权帐户来扫描授权问题。而Burp扩展名Auto Repeater（https://github.com/nccgroup/AutoRepeater/）和AuthMatrix（https://github.com/SecurityInnovation/AuthMatrix/）允许您自动化切换cookies、头文件和参数的过程。有关如何使用这些工具的更多信息，请转到Burp窗口的Extender选项卡，然后转到BAppStore选项卡以查找要使用的扩展。
    Finding Your First IDOR!
    Now that you know what IDORs are, how to bypass IDOR protection, and how to escalate IDORs, you’re ready to look for your first one! Hop on a bug bounty program and follow the steps discussed in this chapter:
    既然你知道了IDOR是什么，如何绕过IDOR保护，以及如何升级IDOR，你就已经准备好去寻找你的第一个IDOR了！赶快参加漏洞赏金计划，并按照本章讨论的步骤来进行吧！
     Create two accounts for each application role and designate one as the attacker account and the other as the victim account.
     Discover features in the application that might lead to IDORs. Pay attention to features that return sensitive information or modify user data.
     Revisit the features you discovered in step 2. With a proxy, intercept your browser traffic while you browse through the sensitive functionalities.
     With a proxy, intercept each sensitive request and switch out the IDs that you see in the requests. If switching out IDs grants you access to other users’ information or lets you change their data, you might have found an IDOR.
     Don’t despair if the application seems to be immune to IDORs. Use this opportunity to try a protection-bypass technique! If the application uses an encoded, hashed, or randomized ID, you can try decoding
     or predicting the IDs. You can also try supplying the application with an ID when it does not ask for one. Finally, sometimes changing the request method type or file type makes all the difference.
     Monitor for information leaks in export files, email, and text alerts. An IDOR now might lead to an info leak in the future.
     Draft your first IDOR report!
11
      SQL Injection
     SQL
    is a programming language used to query or modify information stored within a database. A
     SQL injection
    is an attack in which the attacker executes arbitrary SQL commands on an application’s database by supplying malicious input inserted into a SQL statement. This happens when the input used in SQL queries is incorrectly filtered or escaped and can lead to authentication bypass, sensitive data leaks, tampering of the database, and RCE in some cases.
    SQL是一种编程语言，用于查询或修改数据库中存储的信息。SQL注入是一种攻击，攻击者通过提供插入到SQL语句中的恶意输入，在应用程序数据库中执行任意SQL命令。当SQL查询中使用的输入未正确过滤或转义时，就会发生这种情况，这可能会导致绕过身份验证、敏感数据泄漏、篡改数据库以及在某些情况下引发RCE等问题。
    SQL injections are on the decline, since most web frameworks now have built-in mechanisms that protect against them. But they are still common. If you can find one, they tend to be critical vulnerabilities that result in high payouts, so when you first start hunting for vulnerabilities on a target, looking out for them is still worthwhile. In this chapter, we will talk about how
    to find and exploit two types of SQL injections: classic SQL injections and blind SQL injections. We will also talk about injections in NoSQL databases, which are databases that do not use the SQL query language.
    SQL注入攻击正在减少，因为大多数Web框架现在都具有内置机制来保护它们。但仍然很普遍。如果您能发现一个，它们往往是关键漏洞，会导致高额赔款，因此当您首次开始在目标上寻找漏洞时，仍然值得寻找它们。在本章中，我们将讨论如何查找和利用两种类型的SQL注入：经典SQL注入和盲SQL注入。我们还将讨论NoSQL数据库中的注入，这些数据库不使用SQL查询语言。
    Note that the examples used in this chapter are based on MySQL syntax. The code for injecting commands into other database types will be slightly different, but the overall principles remain the same.
    请注意，本章中使用的示例基于MySQL语法。将命令注入到其他数据库类型的代码会略有不同，但总体原则仍然相同。
    Mechanisms
    To understand SQL injections, let’s start by understanding what SQL is.
     Structured Query Language (SQL)
    is a language used to manage and communicate with databases.
    了解 SQL 注入，首先需要了解 SQL 是什么。SQL 是一种管理和与数据库通信的语言。
    Traditionally, a
     database
    contains tables, rows, columns, and fields. The rows and columns contain the data, which gets stored in single fields. Let’s say that a web application’s database contains a table called Users (
     Table 11-1
    ). This table contains three columns: ID, Username, and Password. It also contains three rows of data, each storing the credentials of a different user.
    传统上，数据库包含表、行、列和字段。 行和列包含数据，这些数据存储在单个字段中。 假设Web应用程序的数据库包含一个名为用户（表11-1）的表。 该表包含三个列：ID、用户名和密码。它还包含三行数据，每行存储不同用户的凭据。 
传统上，数据库包含表、行、列和字段。行和列包含数据，这些数据存储在单个字段中。假设一个Web应用程序的数据库包含一个名为“用户”（表11-1）的表。该表包含三个列：ID、用户名和密码。它还包含三行数据，每行存储不同用户的凭据。
       Table 11-1
      : The Example Users Database Table
      表11-1：示例用户数据库表
         ID
         Username
         Password
         1
         admin
         t5dJ12rp$fMDEbSWz
         2
         vickie
         password123
         3
         jennifer
         letmein!
    The SQL language helps you efficiently interact with the data stored in databases by using queries. For example, SQL
     SELECT
    statements can be used to retrieve data from the database. The following query will return the entire Users table from the database:
    SQL语言通过使用查询使您有效地与存储在数据库中的数据进行交互。例如，SQL SELECT语句可用于从数据库检索数据。以下查询将从数据库返回完整的用户表：
SELECT * FROM Users;
    This query would return all usernames in the Users table:
    这个查询会在用户表中返回所有的用户名：
SELECT Username FROM Users;
    Finally, this query would return all users with the username
     admin
    :
    最后，此查询将返回所有用户名为admin的用户：
SELECT * FROM Users WHERE Username='admin';
    There are many more ways to construct a SQL query that interacts with a database. You can learn more about SQL syntax from W3Schools at
     https://www.w3schools.com/sql/default.asp
    .
    构建与数据库交互的SQL查询的方法还有很多。您可以从W3Schools了解有关SQL语法的更多信息，网址为https://www.w3schools.com/sql/default.asp。
    Injecting Code into SQL Queries
    A SQL injection attack occurs when an attacker is able to inject code into the SQL statements that the target web application uses to access its database, thereby executing whatever SQL code the attacker wishes. For example, let’s say that a website prompts its users for their username and password, then inserts these into a SQL query to log in the user. The following POST request parameters from the user will be used to populate a SQL query:
    SQL注入攻击发生在攻击者能够将代码注入到目标网络应用程序用于访问其数据库的SQL语句中，从而执行攻击者期望的任何SQL代码。例如，假设一个网站提示用户输入用户名和密码，然后将这些信息插入到一个SQL查询中以登录用户。以下来自用户的POST请求参数将被用于填充SQL查询:
POST /login
Host: example.com
(POST request body)
username=vickie&password=password123
    This SQL query will find the ID of a user that matches the username and password provided in the POST request. The application will then log in to that user’s account:
    这个SQL查询将在POST请求中提供的用户名和密码匹配的用户ID。应用程序将登录该用户的帐户。
SELECT Id FROM Users
WHERE Username='vickie' AND Password='password123';
    So what’s the problem here? Since users can’t predict the passwords of others, they should have no way of logging in as others, right? The issue is that attackers can insert characters that are special to the SQL language to mess with the logic of the query. For example, if an attacker submits the following POST request:
    那么问题在哪里呢？由于用户无法预测其他人的密码，所以他们应该没有办法以其他人的身份登录，不是吗？问题在于攻击者可以插入对SQL语言来说特殊的字符来干扰查询的逻辑。例如，如果攻击者提交以下POST请求：
POST /login
Host: example.com
(POST request body)
username="admin';-- "&password=password123
    the generated SQL query would become this:
    生成的SQL查询将成为这个：
SELECT Id FROM Users
WHERE Username='admin';-- ' AND Password='password123';
    The
     --
    sequence denotes the start of a SQL comment, which doesn’t get interpreted as code, so by adding
     --
    into the username part of the query, the attacker effectively comments out the rest of the SQL query. The query becomes this:
    “--” 字符串代表 SQL 注释的开头，不被编译为代码，因此通过将“--”添加到查询语句的用户名部分，攻击者可以有效地注释掉 SQL 查询语句的其余部分。查询语句变成这样：
SELECT Id FROM Users WHERE Username='admin';
    This query will return the admin user’s ID, regardless of the password provided by the attacker. By injecting special characters into the SQL query, the attacker bypassed authentication and can log in as the admin without knowing the correct password!
    这个查询将返回管理员用户的ID，无论攻击者提供的密码是什么。通过向SQL查询中注入特殊字符，攻击者绕过了身份验证，并且可以在不知道正确密码的情况下作为管理员登录！
    Authentication bypass is not the only thing attackers can achieve with SQL injection. Attackers might also be able to retrieve data they shouldn’t be allowed to access. Let’s say a website allows users to access a list of their emails by providing the server a username and an access key to prove their identity:
    攻击者通过 SQL 注入不只能够绕过身份验证。攻击者可能还能够获取他们不应该访问的数据。例如，一个网站允许用户通过提供用户名和访问密钥来获取他们的电子邮件列表：
GET /emails?username=vickie&accesskey=ZB6w0YLjzvAVmp6zvr
Host: example.com
    This GET request might generate a query to the database with the following SQL statement:
    可能会生成以下SQL语句的数据库查询的GET请求：
SELECT Title, Body FROM Emails
WHERE Username='vickie' AND AccessKey='ZB6w0YLjzvAVmp6zvr';
    In this case, attackers can use the SQL query to read data from other tables that they should not be able to read. For instance, imagine they sent the following HTTP request to the server:
    在此情况下，攻击者可以利用 SQL 查询从其他不应读取的表中读取数据。例如，想象他们向服务器发送以下 HTTP 请求：
GET /emails?username=vickie&accesskey="ZB6w0YLjzvAVmp6zvr' 
1 UNION SELECT Username, Password FROM Users;-- "
Host: example.com
    The server would turn the original SQL query into this one:
    服务器将原始的 SQL 查询转换为以下内容：