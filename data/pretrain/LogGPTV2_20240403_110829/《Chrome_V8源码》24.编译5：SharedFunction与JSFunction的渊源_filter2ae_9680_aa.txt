# 《Chrome V8源码》24.编译5：SharedFunction与JSFunction的渊源
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1 介绍
SharedFunction是一个包含BytecodeArray和stub_entry等信息的数据集合，该集合是V8编译器的输出结果，由SharedFunction类管理。  
本文的组织方式：SharedFunction的内存布局和重要成员（章节2）；SharedFunction的初始化（章节3）；SharedFunction与JSFunction之间关系（章节4）。
## 2 SharedFunction内存布局
V8编译器以Function为粒度对源码进行编译，生成的结果叫SharedFunction。SharedFunction的特点是共享（Shared）,即可以在其他代码中使用。下面是SharedFunction的数据结构：
    1.  // SharedFunctionInfo describes the JSFunction information that can be
    2.  // shared by multiple instances of the function.
    3.  class SharedFunctionInfo : public HeapObject {
    4.  public:
    5.  V8_EXPORT_PRIVATE Code GetCode() const;
    6.  V8_EXPORT_PRIVATE static void SetScript(
    7.      Handle shared, Handle script_object,
    8.       int function_literal_id, bool reset_preparsed_scope_data = true);
    9.   V8_EXPORT_PRIVATE int EndPosition() const;
    10.    V8_EXPORT_PRIVATE int StartPosition() const;
    11.    V8_EXPORT_PRIVATE void SetPosition(int start_position, int end_position);
    12.    inline bool IsApiFunction() const;
    13.    inline bool is_class_constructor() const;
    14.    inline FunctionTemplateInfo get_api_func_data();
    15.    inline void set_api_func_data(FunctionTemplateInfo data);
    16.    inline bool HasBytecodeArray() const;
    17.    inline BytecodeArray GetBytecodeArray() const;
    18.    inline void set_bytecode_array(BytecodeArray bytecode);
    19.    inline Code InterpreterTrampoline() const;
    20.    inline bool HasInterpreterData() const;
    21.    inline InterpreterData interpreter_data() const;
    22.    inline void set_interpreter_data(InterpreterData interpreter_data);
    23.    // builtin_id corresponds to the auto-generated Builtins::Name id.
    24.    inline bool HasBuiltinId() const;
    25.    inline int builtin_id() const;
    26.    inline void set_builtin_id(int builtin_id);
    27.    inline bool HasUncompiledData() const;
    28.    inline UncompiledData uncompiled_data() const;
    29.    inline void set_uncompiled_data(UncompiledData data);
    30.    inline bool HasUncompiledDataWithPreparseData() const;
    31.    inline UncompiledDataWithPreparseData uncompiled_data_with_preparse_data()
    32.        const;
    33.    inline void set_uncompiled_data_with_preparse_data(
    34.        UncompiledDataWithPreparseData data);
    35.    inline bool HasUncompiledDataWithoutPreparseData() const;
    36.    inline LanguageMode language_mode() const;
    37.    inline void set_language_mode(LanguageMode language_mode);
    38.    DECL_PRIMITIVE_ACCESSORS(syntax_kind, FunctionSyntaxKind)
    39.    inline bool is_wrapped() const;
    40.    DECL_BOOLEAN_ACCESSORS(has_duplicate_parameters)
    41.    DECL_BOOLEAN_ACCESSORS(native)
    42.    DECL_BOOLEAN_ACCESSORS(is_asm_wasm_broken)
    43.    DECL_BOOLEAN_ACCESSORS(name_should_print_as_anonymous)
    44.    DECL_BOOLEAN_ACCESSORS(is_oneshot_iife)
    45.    DECL_BOOLEAN_ACCESSORS(are_properties_final)
    46.    DECL_BOOLEAN_ACCESSORS(is_safe_to_skip_arguments_adaptor)
    47.    DECL_BOOLEAN_ACCESSORS(has_reported_binary_coverage)
    48.    DECL_BOOLEAN_ACCESSORS(private_name_lookup_skips_outer_class)
    49.    inline FunctionKind kind() const;
    50.    DECL_INT_ACCESSORS(function_map_index)
    51.    inline void clear_padding();
    52.    inline void UpdateFunctionMapIndex();
    53.    inline bool optimization_disabled() const;
    54.    inline BailoutReason disable_optimization_reason() const;
    55.    void DisableOptimization(BailoutReason reason);
    56.    DECL_BOOLEAN_ACCESSORS(requires_instance_members_initializer)
    57.    bool HasSourceCode() const;
    58.    static Handle GetSourceCode(Handle shared);
    59.    static Handle GetSourceCodeHarmony(Handle shared);
    60.    inline bool IsSubjectToDebugging();
    61.    inline bool IsUserJavaScript();
    62.    inline bool CanDiscardCompiled() const;
    63.    void UpdateExpectedNofPropertiesFromEstimate(FunctionLiteral* literal);
    64.    void UpdateAndFinalizeExpectedNofPropertiesFromEstimate(
    65.        FunctionLiteral* literal);
    66.    DECL_CAST(SharedFunctionInfo)
    67.    // Constants.
    68.    static const uint16_t kDontAdaptArgumentsSentinel = static_cast(-1);
    69.    static const int kMaximumFunctionTokenOffset = kMaxUInt16 - 1;
    70.    static const uint16_t kFunctionTokenOutOfRange = static_cast(-1);
    71.    STATIC_ASSERT(kMaximumFunctionTokenOffset + 1 == kFunctionTokenOutOfRange);
    72.    DEFINE_FIELD_OFFSET_CONSTANTS(HeapObject::kHeaderSize,
    73.                                  TORQUE_GENERATED_SHARED_FUNCTION_INFO_FIELDS)
    74.    static const int kAlignedSize = POINTER_SIZE_ALIGN(kSize);
    75.    class BodyDescriptor;
    76.  #define FLAGS_BIT_FIELDS(V, _)                               \
    77.    /* Have FunctionKind first to make it cheaper to access */ \
    78.    V(FunctionKindBits, FunctionKind, 5, _)                    \
    79.    V(IsNativeBit, bool, 1, _)                                 \
    80.    V(IsStrictBit, bool, 1, _)                                 \
    81.    V(FunctionSyntaxKindBits, FunctionSyntaxKind, 3, _)        \
    82.    V(IsClassConstructorBit, bool, 1, _)                       \
    83.    V(HasDuplicateParametersBit, bool, 1, _)                   \
    84.    V(AllowLazyCompilationBit, bool, 1, _)                     \
    85.    V(NeedsHomeObjectBit, bool, 1, _)                          \
    86.    V(IsAsmWasmBrokenBit, bool, 1, _)                          \
    87.    V(FunctionMapIndexBits, int, 5, _)                         \
    88.    V(DisabledOptimizationReasonBits, BailoutReason, 4, _)     \
    89.     V(RequiresInstanceMembersInitializer, bool, 1, _)          \
    90.     V(ConstructAsBuiltinBit, bool, 1, _)                       \
    91.      V(NameShouldPrintAsAnonymousBit, bool, 1, _)               \
    92.      V(HasReportedBinaryCoverageBit, bool, 1, _)                \
    93.      V(IsTopLevelBit, bool, 1, _)                               \
    94.      V(IsOneshotIIFEOrPropertiesAreFinalBit, bool, 1, _)        \
    95.      V(IsSafeToSkipArgumentsAdaptorBit, bool, 1, _)             \
    96.      V(PrivateNameLookupSkipsOuterClassBit, bool, 1, _)
    97.      DEFINE_BIT_FIELDS(FLAGS_BIT_FIELDS)
    98.    #undef FLAGS_BIT_FIELDS
    99.    };
上面第1行代码的注释说明了SharedFunction可以被多个实例共享。  
下面对SharedFunction的重要成员进行解释：  
 **（1）** 第5行代码`Code GetCode()
const`的作用是获得函数的源码。不要把“源码”误认为字节码，在大多数情况下，“源码”是Builtin，其作用是构建函数入口并调用第一条字节码；  
 **（2）** 第6行代码`static void SetScript()`的作用是设置JavaScript源码的成员变量；  
 **（3）**
第9~11行代码`EndPosition()、StartPosition()、SetPosition()`的作用是设置JavaScript源码的位置。源码开始和结束位置标记的代码块是SharedFunction中BytecodeArray对应的JavaScript源码；  
 **（4）** 第12~15行代码`IsApiFunction()
const、get_api_func_data()、set_api_func_data()`的作用分别是：判断SharedFunction是不是API、获取ApiFun、设置ApiFun；  
 **（5）**
第16~18行代码`HasBytecodeArray()、set_bytecode_array()、GetBytecodeArray()`的作用分别是：判断BytecodeArray是否存在、设置BytecodeArray，获取BytecodeArray；  
 **（6）**
第19行代码`InterpreterTrampoline`的作用是获取InterpreterTrampoline的地址指针。InterpreterTrampoline为Bytecode的执行做准备，具体参见相关源码，以后我会详细讲解；  
 **（7）**
第20~22行代码`HasInterpreterData()、interpreter_data()、set_interpreter_data()`的作用分别是判断、获取和设置解释器数据；  
 **（8）**
第24~26行代码`HasBuiltinId()、builtin_id()、set_builtin_id`的作用分别是判断、获取和设置BuiltinId;  
 **（9）**
第27~35行代码中名字中包含`Uncompile`方法的作用是设置SharedFunction的优化机制。Ignition执行JSFunction时会记录Feedback，V8根据Feedback决定是否把SharedFunction（与JSFunction对应的SharedFunction）翻译为hot
code。SharedFunction的优化源码如下：
    #define BAILOUT_MESSAGES_LIST(V)                                            \
      V(kNoReason, "no reason")                                                 \
                                                                                \
      V(kBailedOutDueToDependencyChange, "Bailed out due to dependency change") \
      V(kCodeGenerationFailed, "Code generation failed")                        \
      V(kCyclicObjectStateDetectedInEscapeAnalysis,                             \
        "Cyclic object state detected by escape analysis")                      \
      V(kFunctionBeingDebugged, "Function is being debugged")                   \
      V(kGraphBuildingFailed, "Optimized graph construction failed")            \
      V(kFunctionTooBig, "Function is too big to be optimized")                 \
      V(kLiveEdit, "LiveEdit")                                                  \
      V(kNativeFunctionLiteral, "Native function literal")                      \
      V(kNotEnoughVirtualRegistersRegalloc,                                     \
        "Not enough virtual registers (regalloc)")                              \
      V(kOptimizationDisabled, "Optimization disabled")                         \