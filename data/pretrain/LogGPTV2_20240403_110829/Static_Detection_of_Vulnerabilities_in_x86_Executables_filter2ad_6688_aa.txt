title:Static Detection of Vulnerabilities in x86 Executables
author:Marco Cova and
Viktoria Felmetsger and
Greg Banks and
Giovanni Vigna
Static Detection of Vulnerabilities in x86 Executables
Marco Cova
Viktoria Felmetsger
Greg Banks
Giovanni Vigna
Department of Computer Science
University of California, Santa Barbara, USA
{marco,rusvika,nomed,vigna}@cs.ucsb.edu
Abstract
In the last few years, several approaches have been
proposed to perform vulnerability analysis of applica-
tions written in high-level languages. However, little has
been done to automatically identify security-relevant
ﬂaws in binary code.
In this paper, we present a novel approach to the
identiﬁcation of vulnerabilities in x86 executables in
ELF binary format. Our approach is based on static
analysis and symbolic execution techniques. We im-
plemented our approach in a proof-of-concept tool and
used it to detect taint-style vulnerabilities in binary code.
The results of our evaluation show that our approach is
both practical and effective.
Keywords: Vulnerability analysis, binary static analy-
sis, symbolic execution, taint analysis.
1 Introduction
Vulnerability analysis is the process of determining
if a system contains ﬂaws that could be leveraged by an
attacker to compromise the security of the system or that
of the platform the system runs on. In comparison to
other approaches to security, such as intrusion detection
and prevention, the focus of vulnerability analysis is on
identifying and eventually correcting ﬂaws, rather than
detecting and blocking attacks that exploit a ﬂaw.
Research on vulnerability analysis has produced a
number of different approaches to identify security ﬂaws
in an automatic—or semi-automatic—fashion. Some of
the most promising approaches are based on static anal-
ysis techniques. These techniques predict safe and com-
putable approximations of the set of values, or behav-
iors, that the application could show at run-time [27].
Static analysis techniques represent an appealing
building block for security analysis because they provide
results without having to actually run an application,
thus avoiding risks linked to the execution of malicious
programs. Furthermore, by computing safe approxima-
tions of a program’s behavior, they generally achieve a
low rate of false negatives. In other words, if there is a
vulnerability in the application under test, in most cases
the analysis is able to ﬁnd it. Finally, static approaches
have no impact on the run-time performance of an ap-
plication and offer the possibility to detect and correct
ﬂaws before its deployment. However, the approximate
nature of the results provided by static analysis makes it
difﬁcult to eliminate false positives. As a consequence,
some of the “vulnerabilities” identiﬁed by the analysis
might actually correspond to correct code.
A signiﬁcant part of recent efforts in static vulner-
ability analysis have been directed towards analyzing
applications written in some high-level language, such
as C, Java, or PHP [34, 21, 36]. However, the appli-
cation of static vulnerability analysis to binary code is
appealing for a number of reasons. First, it is not al-
ways the case that the source code of an application
is available. For example, some proprietary applica-
tions are distributed in binary form only. Second, even
when the source code for compiled languages is avail-
able, the “What You See Is Not What You eXecute”
principle applies [3]. This principle states that the trans-
formations performed by compilers and optimizer tools
may subtly—but signiﬁcantly—alter the actual behavior
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006of an application, and, consequently, invalidate the re-
sults of the analysis performed at the source code level.
For example, statements used to overwrite a buffer con-
taining a password may be considered redundant and,
thus, be optimized away. Also, the order of instructions
could be altered, thereby invalidating a security-critical
sequence of events.
In this paper, we explore the problem of performing
vulnerability analysis of binaries by using static analy-
sis techniques. We focus on executables written for the
Intel x86 family of processors because this is the most
widely-used architecture and it presents several charac-
teristics that make our task more challenging.
We restrict our attention to the common class of ﬂaws
that consists of the use of data coming from untrusted
sources (tainted data) in sensitive operations. As an ex-
ample, consider the “tainted-data-to-system” problem.
The system() function, which is provided by the C
standard library, executes the command(s) speciﬁed in
its only parameter by invoking a shell to evaluate that
parameter. If an attacker controls the value of the pa-
rameter passed to system(), she is able to execute ar-
bitrary commands with the privileges of the vulnerable
process. The same problem exists with the popen()
function. This vulnerability is, therefore, especially crit-
ical in two scenarios. First, if a SUID application is af-
fected, local users are able to mount local-to-root attacks
or to impersonate other users of the system. Second, if
a network-accessible application (e.g., a CGI program
or a network server) is vulnerable, then remote attackers
can gain local access.
Consider, for example, the simple program shown in
Figure 1. The application is intended to be used as a CGI
program that takes as input the name of a machine, sends
it ﬁve ping packets, and returns to the user the transmis-
sion statistics. The invocation of the ping command is
done through the popen() function without perform-
ing any validation of the user input. Therefore, if an at-
tacker invokes the program with the input string “;cat
/etc/passwd”, she will have access to the content of
the password ﬁle 1.
In this paper we make the following contributions to
the problem of detecting vulnerabilities in binary pro-
grams through static analysis:
• We propose a novel adaptation of context- and
1A similar vulnerable ASP program was actually present in early
releases of the Linksys WRT54G wireless router.
int main(int argc, char **argv) {
char *site, *query, cmd[128];
FILE *f;
query = getenv("QUERY_STRING");
if ((query &&
(site = strchr(query, ’=’)))) {
site++;
} else {
site = "localhost";
}
snprintf(cmd, sizeof(cmd),
"ping -c 1 %s", site);
f = popen(cmd, "r");
...
Figure 1. Example of a vulnerable pro-
gram.
path-sensitive symbolic execution to detect
the
class of vulnerabilities consisting of the use of
tainted data in sensitive operations.
• We present a set of techniques and heuristics that
makes the analysis of x86 binaries more efﬁcient
and practical.
• We implemented a proof-of-concept tool that uses
these techniques to analyze real-world binaries.
• We present experimental results showing that our
approach is both effective and practical.
We wish to emphasize that the goal of this paper is
to present a vulnerability detection technique, as op-
posed to a veriﬁcation technique. Our approach is nei-
ther sound nor complete, that is, it is possible that pro-
grams are ﬂagged as vulnerable when they are indeed
correct and that actual vulnerabilities are not recognized.
As we will discuss, the main sources of imprecision in
the analysis are the handling of loops, the modeling of
the x86 architecture and instruction set, and the model-
ing of libc functions.
The rest of the paper is organized as follows. In Sec-
tion 2 we discuss work related to ours. In Section 3, we
present the static analysis techniques and models that we
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006use to analyze x86 binaries. Section 4 contains a discus-
sion of how such techniques and models are leveraged
to detect taint-style vulnerabilities. The results from ex-
periments with the prototype tool that we implemented
are presented in Section 5. Finally, Section 6 concludes
and indicates future work.
2 Related Work
As mentioned earlier, a signiﬁcant part of recent ef-
forts in static vulnerability analysis have been directed
towards analyzing applications written in some high-
level language. Due to the lack of space and the signif-
icant amount of work done in this direction, we are not
going to discuss this work here. An interested reader can
refer to some of the references provided in Section 1.
The problem of identifying vulnerabilities in binary
code, on the other hand, has been mostly tackled us-
ing dynamic techniques. Within this class of tech-
niques it is possible to distinguish between testing-based
and monitoring-based approaches. Testing-based ap-
proaches try to trigger a vulnerability by exercising an
application with random or malicious inputs, [22, 28].
Monitoring-based approaches, instead, examine the ex-
ecution of an application during normal use, looking for
anomalous behaviors, [24]. In particular, a whole area
of research has focused on ways to detect attacks on the
basis of the analysis of the system call invocations per-
formed by a program [10, 12, 23].
The dynamic analysis approach described in [26] is
more closely related to ours. It describes TaintCheck, a
dynamic taint analysis tool, which can detect overwrite
attacks (e.g., format string attacks, buffer overﬂows) on
x86 binaries. TaintCheck differs from our approach in a
number of ways, mainly due to fundamental differences
between static and dynamic analysis approaches. For in-
stance, since TaintCheck performs its analysis on a run-
ning program, it covers only those execution paths that
are traversed during a given execution. Our tool achieves
a more complete code coverage since static analysis is
usually applied on all possible inputs and paths. Sec-
ond, TaintCheck detects attacks at runtime, while our
tool ﬁnds vulnerabilities without the need of running the
analyzed application. Finally, the dynamic monitoring
performed by TaintCheck may cause a signiﬁcant degra-
dation of the performance of an analyzed program. In
our tool all analyses are static and, thus, have no inﬂu-
ence on the performance of an application. Our tool, on
the other hand, suffers from a higher false positive rate
due to inherent limitations of static analysis.
While the use of dynamic techniques has been proven
useful for the detection of vulnerabilities and their ex-
ploitation, static techniques provide a set of advantages
that make them appealing. Unfortunately, there are a
number of challenges that have to be overcome by static
binary analysis tools [30], and, as a consequence, there
are only few existing approaches to the static detection
of vulnerabilities in binary programs.
In [5], the authors describe a static method to gener-
ate attack-independent signatures for vulnerabilities in
binary code. Their approach is complementary to ours
in that once a vulnerability is known, they generate a
signature that detects attack attempts. Instead, we focus
on the problem of identifying vulnerabilities.
Static binary analysis techniques are applied to the
detection of malicious code. In [4], the authors describe
an approach to statically detecting malicious code in
executable programs by abstracting the program into a
graph of critical API calls, which is then checked against
a policy automaton to determine if it may cause a viola-
tion.
Static approaches have also been applied to viruses
and worms detection, [7, 8], as well as polymorphic
worms detection, [25, 19]. Static analysis has also
been applied to rootkit detection [20] and to identify-
ing spyware-like behavior [17]. Our technique is similar
to these approaches to malicious code detection in that it
statically extracts information from an executable. How-
ever, we are concerned with the presence of possible vul-
nerabilities and not with the detection of malicious code
or behavior. Therefore, we use the results of the static
analysis in a different manner.
Our work further relates to general techniques of
static analysis of binary code. This is a very active area
of research and it would be impossible to mention all of
the relevant work here. Thus, we reference the results
that we leveraged in our work when we discuss speciﬁc
techniques.
3 Static Analysis of Binaries
Our vulnerability analysis process is logically di-
vided in two phases. We ﬁrst use several techniques
to statically approximate the state of an application dur-
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006ing execution. Then, we leverage this information to de-
tect vulnerabilities. In this section, we describe the key
characteristics of our static analysis approach, which is
an extension of the analysis presented in [18]. Our ap-
proach has been implemented in a proof-of-concept tool
whose architecture is presented in Figure 2.
Figure 2. The architecture of our vulnera-
bility detection tool.
Throughout the paper we will use the running exam-
ple given in Figure 1. Note that the example is in a C-like
language for the sake of clarity and simplicity, while our
tool operates on binary code. In particular, we assume
that our tool will be operating on dynamically-linked
x86 executable objects, formatted according to the Exe-
cutable and Linking Format (ELF). We also assume that
the analyzed executable follows a “standard compilation
model” [29]: the executables has procedures, a global
data region, a heap and a runtime stack; global variables
are located at a ﬁxed memory location; local variables
of a procedure are stored at a ﬁxed location in the frame
stack of that procedure; the program follows the cdecl
calling convention, and is not self-modifying.
3.1 Prerequisites
In order to perform our analysis, we must ﬁrst dis-
assemble the binary ﬁle and build data structures that
enable us to navigate the resulting assembly code. Note
that we are able to operate on stripped binaries, i.e., exe-
cutables that lack debugging and other support informa-
tion. We use several of the suggestions presented in [13]
to deal with the peculiarities of stripped code.
First, the binary program is disassembled using an
enhanced version of the basic linear-sweep algorithm as
described in [31], thus providing us with an assembly
level representation of the program. Note that this ver-
sion of the linear-sweep algorithm is resilient to the in-
sertion of jump tables corresponding to switch state-
ments that might have been inserted into the instruction
stream.
Second, we attempt to resolve indirect call and
jump instructions. Resolution of the possible target ad-
dresses helps in the identiﬁcation of functions and the
derivation of a complete Control Flow Graph (CFG). We
implemented a series of heuristics to determine the tar-
get values of indirect branches in some common cases.
First, to resolve jump-table-based branches, we back-
track in the code until we reach the instructions that set
up the jump table access, thus recovering the base loca-
tion and the number of entries of the table. Our imple-
mentation of this method is compiler-dependent and has
proven to work well in practice. Second, some indirect
branches are resolved by performing a form of intrapro-
cedural constant propagation. More precisely, we sym-
bolically execute the current function to determine a set
of possible targets. Finally, we apply a similar mecha-
nism interprocedurally to resolve indirect branches that
derive, for example, from the presence of functions that
return function pointers.
Third, it is necessary to identify loops and recursive