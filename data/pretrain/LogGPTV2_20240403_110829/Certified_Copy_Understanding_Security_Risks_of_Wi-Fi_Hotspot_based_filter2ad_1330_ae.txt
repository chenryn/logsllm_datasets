satisfy. Table 5 lists for each considered data clone service the re-
quirements satisfied by the data clone service. As shown in the
table, none of the analyzed services satisfies all requirements, and
some of them do not even satisfy one of those requirements. We
also report in Table 6 whether each data clone service is vulnerable
to our proposed attacks, and detail how data clone services are
threatened by these attacks.
4.3.1 On-device Attack. An on-device attack is launched by a mali-
cious app installed on either the old Android phone or the new one.
The only requirement for this attack is that the malicious app has
a permission belonging to the STORAGE permission group to read
the files on the SD card. The security issue here is that data clone
services do not protect the intermediate files generated and stored
on the SD card. Even though the intermediate files are deleted right
after transmission, data packing is in general much faster than data
transmission and thus there exists a relatively long time window
for a malicious app to copy files from this directory.
As Table 5 shows, we found that five data clone services (i.e., One-
Plus10, Xiaomi11, OPPO12, Gionee13, Nokia14 ) are vulnerable to this
attack. We have developed a proof-of-concept (PoC) malicious app
to conduct this attack (installed on either pA or pB). The app keeps
monitoring the data buffer directories to check whether a tempo-
rary file is written. If such a file is written, the app immediately
copies it to a new place on the SD card to store the data permanently.
We found that after a complete data clone procedure, our PoC app
10/sdcard/opbackup/ChangeOver
11/sdcard/MIUI/backup/Transfer/
12/sdcard/Backup/ChangeOver/
13/sdcard/amihuanji/temp/
14/sdcard/backup/
collected all temporary files, and then extracted sensitive user data
from those files.
We argue that this attack is particularly applicable to a digital
forensic scenario, in that a forensic analyst can force one Android
phone to export its personal data by using another phone with
our PoC app as the receiver. This is a typical security risk when
the user data (especially the app-related data) are assumed to be
forensic-resistant (i.e., even though a forensic analyst knows the
unlock password, he cannot retrieve the data in the sandbox).
4.3.2 Network-level Attack. In this attack, the attacker monitors
the privately built Wi-Fi network instead of installing a malicious
app on the user’s mobile phone. The steps of this attack are as
follows. The attacker first has to detect these privately built Wi-Fi
networks by identifying the specific SSID patterns. Then the at-
tacker persistently monitors the Wi-Fi signals until a certain Wi-Fi
is established. The attacker has then to crack the password and con-
nect to the WLAN; as we have seen in our analysis, the passwords
used to protect these Wi-Fi networks are often not strong enough
and thus the attacker can quickly crack them. Once the password is
cracked, the attacker can eavesdrop on the Wi-Fi and tamper data
using tools such as Ettercap. We notice that all data transmission
protocols we have analyzed in this work are implemented with
an incorrect data integrity validation, and even without any data
confidentiality protection. It is important to note that this attack
requires the attacker to be physically close to the attacked phones
and continuously monitor Wi-Fi signals in order to detect when a
data clone activity is taking place15. Therefore such an attack is un-
likely to be carried at a large scale. Rather it is an attack that is more
likely to be carried out against targeted parties (e.g., individuals
under surveillance).
As we can see from Table 5, the SSID of the Wi-Fi hotspot gener-
ated by all data clone services but Nokia can be predicted, and four
Wi-Fi networks (that is, Gionee, OnePlus, Vivo, and Xiaomi) are vul-
nerable to network-level attacks because of the predictable SSIDs
and insecure Wi-Fi passwords they use. As a result, attackers could
circumvent authentication and connect to the WLAN to conduct
further attacks against the legitimate phones. Note that although
Huawei service uses predictable SSID and insecure passwords, it
restricts the number of connected clients. An attack could only be
15Notice of course that the attacker can install a hidden device with the same capabili-
ties in the proximity of the targeted party.
Table5:SecurityoverviewoftheanalyzeddatacloneservicesServiceUnpredicatableSSIDSecureWi-FiPasswordConnectionRestrictionProtectedTemporaryDataEncryptedTransmissionIntegrityCheckDevice-to-deviceAuthenticationGionee✗✗✗✗✗✗✗Huawei✗✗✓✓✗✓✗Motorola✗/✗✓✗✗✗Nokia✓✓✗✗✗✗✗OnePlus✗✗✗✗✗✗✗OPPO✗/✗✗✗✗✗Vivo✗✗✗✓✗✗✗Xiaomi✗✗✗✗✗/✗symbol/denotesthatundercertaincircumstances(e.g.,amaliciousappisinstalled)therequirementmaybeviolated.table,noneoftheanalyzedservicessatisfiesallrequirements,andsomeofthemdonotevensatisfyoneofthoserequirements.WealsoreportinTable6whethereachdatacloneserviceisvulnerabletoourproposedattacks,anddetailhowdatacloneservicesarethreatenedbytheseattacks.4.3.1On-deviceAttack.Anon-deviceattackislaunchedbyamali-ciousappinstalledoneithertheoldAndroidphoneorthenewone.TheonlyrequirementforthisattackisthatthemaliciousapphasapermissionbelongingtotheSTORAGEpermissiongrouptoreadthefilesontheSDcard.ThesecurityissuehereisthatdatacloneservicesdonotprotecttheintermediatefilesgeneratedandstoredontheSDcard.Eventhoughtheintermediatefilesaredeletedrightaftertransmission,datapackingisingeneralmuchfasterthandatatransmissionandthusthereexistsarelativelylongtimewindowforamaliciousapptocopyfilesfromthisdirectory.AsTable5shows,wefoundthatfivedatacloneservices(i.e.,One-Plus10,Xiaomi11,OPPO12,Gionee13,Nokia14)arevulnerabletothisattack.Wehavedevelopedaproof-of-concept(PoC)maliciousapptoconductthisattack(installedoneither𝑝𝐴or𝑝𝐵).Theappkeepsmonitoringthedatabufferdirectoriestocheckwhetheratempo-raryfileiswritten.Ifsuchafileiswritten,theappimmediatelycopiesittoanewplaceontheSDcardtostorethedatapermanently.Wefoundthatafteracompletedatacloneprocedure,ourPoCappcollectedalltemporaryfiles,andthenextractedsensitiveuserdatafromthosefiles.Wearguethatthisattackisparticularlyapplicabletoadigitalforensicscenario,inthataforensicanalystcanforceoneAndroidphonetoexportitspersonaldatabyusinganotherphonewithourPoCappasthereceiver.Thisisatypicalsecurityriskwhentheuserdata(especiallytheapp-relateddata)areassumedtobeforensic-resistant(i.e.,eventhoughaforensicanalystknowstheunlockpassword,hecannotretrievethedatainthesandbox).4.3.2Network-levelAttack.Inthisattack,theattackermonitorstheprivatelybuiltWi-Finetworkinsteadofinstallingamaliciousappontheuser’smobilephone.Thestepsofthisattackareasfollows.TheattackerfirsthastodetecttheseprivatelybuiltWi-Fi10/sdcard/opbackup/ChangeOver11/sdcard/MIUI/backup/Transfer/12/sdcard/Backup/ChangeOver/13/sdcard/amihuanji/temp/14/sdcard/backup/networksbyidentifyingthespecificSSIDpatterns.Thentheat-tackerpersistentlymonitorstheWi-FisignalsuntilacertainWi-Fiisestablished.Theattackerhasthentocrackthepasswordandcon-necttotheWLAN;aswehaveseeninouranalysis,thepasswordsusedtoprotecttheseWi-Finetworksareoftennotstrongenoughandthustheattackercanquicklycrackthem.Oncethepasswordiscracked,theattackercaneavesdropontheWi-FiandtamperdatausingtoolssuchasEttercap.Wenoticethatalldatatransmissionprotocolswehaveanalyzedinthisworkareimplementedwithanincorrectdataintegrityvalidation,andevenwithoutanydataconfidentialityprotection.ItisimportanttonotethatthisattackrequirestheattackertobephysicallyclosetotheattackedphonesandcontinuouslymonitorWi-Fisignalsinordertodetectwhenadatacloneactivityistakingplace15.Thereforesuchanattackisun-likelytobecarriedatalargescale.Ratheritisanattackthatismorelikelytobecarriedoutagainsttargetedparties(e.g.,individualsundersurveillance).AswecanseefromTable5,theSSIDoftheWi-Fihotspotgener-atedbyalldatacloneservicesbutNokiacanbepredicted,andfourWi-Finetworks(thatis,Gionee,OnePlus,Vivo,andXiaomi)arevul-nerabletonetwork-levelattacksbecauseofthepredictableSSIDsandinsecureWi-Fipasswordstheyuse.Asaresult,attackerscouldcircumventauthenticationandconnecttotheWLANtoconductfurtherattacksagainstthelegitimatephones.NotethatalthoughHuaweiserviceusespredictableSSIDandinsecurepasswords,itrestrictsthenumberofconnectedclients.Anattackcouldonlybeconductedifthelegalreceiverisexcludedandreplacedbyamali-ciousreceiver.ThuswelabelHuaweiserviceas“partiallyvulnerable”tonetwork-levelattack.WeutilizedthenetworkinspectorofPoirottoconductman-in-the-middleattacksasmentionedinSection3.3.3.Despitepas-sivedataeavesdropping,theattackercouldactivelytamperthetransferreddatatoinjectmaliciouscontents.Wefoundthatinourinvestigation,𝑝𝐵unconditionallytrustsallthecloneddata.Ifanat-tackercontrols𝑝𝐴andinstallsmaliciousapps,thosemaliciousappsaretransferredandinstalledto𝑝𝐵withoutpromptingwarningorscanningmaliciouscode.Moreseriously,theattackercouldmodifytheappdatainsteadoftheAPKfile.Inthissituation,abenignappwouldbeexploitedeasily(e.g.,bytrustingafilewithamalformedformatintheappsandbox).15Noticeofcoursethattheattackercaninstallahiddendevicewiththesamecapabili-tiesintheproximityofthetargetedparty.9328ACSAC 2020, December 7–11, 2020, Austin, USA
Siqi Ma, Hehao Li, Wenbo Yang, Juanru Li1, Surya Nepal, and Elisa Bertino
conducted if the legal receiver is excluded and replaced by a mali-
cious receiver. Thus we label Huawei service as “partially vulnerable”
to network-level attack.
We utilized the network inspector of Poirot to conduct man-
in-the-middle attacks as mentioned in Section 3.3.3. Despite pas-
sive data eavesdropping, the attacker could actively tamper the
transferred data to inject malicious contents. We found that in our
investigation, pB unconditionally trusts all the cloned data. If an at-
tacker controls pA and installs malicious apps, those malicious apps
are transferred and installed to pB without prompting warning or
scanning malicious code. More seriously, the attacker could modify
the app data instead of the APK file. In this situation, a benign app
would be exploited easily (e.g., by trusting a file with a malformed
format in the app sandbox).
Table 6: Security evaluation regarding different attacks
against data clone services
We also discovered a particular network hijacking case in the
OPPO data clone serive. The data transmission thread on pB does not
check whether its used TCP port (i.e., 8939) is available. Even worse,
the UI of the platform app does not prompt any error information
when the data clone service fails to bind the TCP. As a result the data
clone service on the other device will continue transfer data without
verifying the identity of the receiver. Suppose that a malicious app
on pB occupies the 8939 port before a data clone process starts, pA
will communicate with the malicious app on pB and thus sends
user data to the malicious receiver.
4.4 Manufacturer Feedback
We have reported the discovered vulnerabilities and the conse-
quences to the corresponding manufacturers in September 2019.
Followed by our report, we also provided the suggestions to fix
the vulnerabilities. Among the seven manufacturers whose data
clone services are vulnerable, three of them (OnePlus, Vivo, and
Xiaomi) have recognized the vulnerabilities and fixed them16. We
then checked the most recent version of their data clone services.
We found that OnePlus has addressed the data leakage issue by en-
crypting the sensitive data (e.g., contacts and SMS messages) before
data transmission. Instead of establishing an open WLAN, Vivo now
protects the WLAN by adding the password requirement. The pass-
word consists of 8-12 digits of numbers and letters (in upper/lower
cases), which is difficult to crack via brute force attacks. Xiaomi
now generates a pseudo-random SSID for each device comprised
16We also earned bounty awards from those companies.
by DeviceName_ and 4 digits of pseudo-random numbers. For the
other data clone services, we observe that some manufacturers (i.e.,
Oppo, Motorola, Gionee and ) stopped updating the older version of
the systems (Android 5.1, 6.0, and 7.0) since 2018, and thus the data
clone services were not updated either.
5 RELATED WORK
App Analysis. As functionalities of mobile apps become abundant,
a large number of efforts have focused on large-scale security anal-
ysis of Android apps. Identifying data leakages is the goal of many
such analysis efforts and tools have been developed to facilitate the
analysis. FlowDroid [12] and PiOS [14] statically analyze app code
to track sensitive data flow. FlowDroid [12] optimizes previously
proposed static taint-analysis approaches relying on context, flow,
field and object-sensitivity information. To detect potential privacy
leaks, FlowDroid draws a complete Android lifecycle by including
callbacks handling and UI widgets within the apps. Instead of ana-
lyzing Android apps, PiOS targets iOS apps by analyzing whether
the proposed vetting process may leak sensitive data. Through static
analysis, it checks code paths of each app and pinpoints where the
app first accesses sensitive information and then transmits it over
the network. Due to the lack of source code, PiOS analyzes apps
that are developed in Objective-C code. However, app code analysis
is insufficient when analyzing the data clone service because the
data transmission procedure is not covered by code analysis.
Apart from analyzing the entire Android apps, some approaches
focus on certain issues, such as cryptographic misuses, unautho-
rized access, and backdoor functionalities. As cryptographic prim-
itives are sometimes implemented incorrectly, many approaches
have been proposed to identify cryptographic vulnerabilities. By
gathering the cryptographic vulnerabilities identified by the other
detection tools, such as FixDroid [25]. CrySL [20] and CryptoLint [13],
CryptoGuard [26] is proposed with a set of detection algorithms. To
address the false positive issues, a number of refinement algorithms
based on empirical observations about common programming id-
ioms and language restrictions have been proposed so that the ir-
relevant statements are removed to reduce false alarms. Kratos [28]
finds security issues in access control systems implemented in An-
droid systems. By constructing a precise call graph including all
execution paths, it identifies the paths that third-party apps with
insufficient privilege are able to access sensitive resources. Sim-
ilarly, InputScope [38] focuses on the hidden functionalities (e.g.,
backdoors and blacklists to block unwanted content) implemented
in Android apps. Through static taint analysis and backward slicing,
it checks whether the input data match with the data stored in the
app or retrieved over the network to exploit the hidden secrets. In-
stead of detecting a general type of vulnerability from the Android
app, we identify the potential vulnerabilities based on the potential
threats against the data clone service.
Apart from the static analysis, tools such as TaintDroid [15] and
Charm [31] produce realtime results by executing certain compo-
nents dynamically. TaintDroid detects misbehaving apps by tracking
the flow of privacy-sensitive data through third-party apps. By label-
ing data from privacy-sensitive sources, it identifies sensitive data
propagation through program variables, files, and inter-process
messages dynamically. Charm [31] identifies vulnerabilities and
ServiceCommunica-tionRecordsFilesonSDcardApp-relatedDataSystemSettingsAPKAppdataGionee✓✓✓✓✓Huawei✓✓✓✓✓Motorola✓✓✗✗✗Nokia✓✓✓✗✗OnePlus✓✓✓✓✓OPPO✓✓✓✓✓Vivo✓✓✓✓✓Xiaomi✓✓✓✓✓1329Certified Copy? Understanding Security Risks of Wi-Fi Hotspot based Android Data Clone Services
ACSAC 2020, December 7–11, 2020, Austin, USA
bugs in device drives. It executes the remote device driver in a
virtual machine for only servicing the low-level and infrequent
I/O operations through the USB channel. Then analysts are able
to use Charm for manual interactive debugging, record-and-replay,
and enhancing fuzzing. Since both app code and data transmission
need to be analyzed, we combine the static and dynamic analysis to
provide a complete analysis of the data clone procedure. To the best
of our knowledge, none of these security researches have analyzed
data clone apps.
OS Customization Analysis. In order to support a functionality,
manufacturers might need to modify the standard Android system
by embedding support components. However, such customized
components often result in vulnerabilities due to incorrect imple-
mentation [11, 17]. Some previous works have focused on different
customized components for vulnerability detection including cus-
tomized Android phone driver [39], permission re-delegation [16],
vendor-specific certification [32], and insecure validation [37]. In
addition, the corresponding platform apps developed by manufac-
turers might be vulnerable [18, 34]. Our study extends those works
by revealing the insecurity of data clone services.
Specifically, Woodpecker [19] identifies leakages of permissions
or capabilities. By conducting data flow analysis, it explores the
reachability of each dangerous permission from a public interface.
Furthermore, Woodpecker exploits publicly-accessible interfaces and
services with and without requesting permissions from the other
apps to check the explicit capability leaks and implicit capability