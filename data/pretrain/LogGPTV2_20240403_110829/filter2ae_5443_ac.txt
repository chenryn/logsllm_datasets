的方式去进行搜索，即先在当前ELF符号表中找，然后再从当前ELF的`DT_NEEDED`动态库中找，再然后从动态库中的`DT_NEEDED`里查找。
因为动态库本身是位置无关的(PIE)，支持被加载到内存中的随机位置，因此为了程序中用到的符号可以被正确引用，需要对其进行重定向操作，指向对应符号的真实地址。这部分我在之前写的关于[GOT,PLT和动态链接](https://evilpan.com/2018/04/09/about-got-plt/)的文章中已经详细介绍过了，因此不再赘述，感兴趣的朋友可以参考该文章。
# 实际案例
有人也许会问，我看你bibi了这么多，有什么实际意义吗？呵呵，本节就来分享几个我认为比较有用的应用场景。
## Interpreter Hack
在渗透测试中，红队小伙伴们经常能拿到目标的后台shell权限，但是遇到一些部署了HIDS的大企业，很可能在执行恶意程序的时候被拦截，或者甚至触发监测异常直接被蓝队拔网线。这里不考虑具体的HIDS产品，假设现在面对两种场景:
  1. 目标环境的可写磁盘直接mount为 **noexec** ，无法执行代码
  2. 目标环境内核监控任何非系统路径的程序的执行都会直接告警
不管什么样的环境，我相信老红队都有办法去绕过，这里我们运用上面学到的ELF知识，其实有一种更为简单的解法，即利用interpreter。示例如下:
    $ cat hello.c
    #include 
    int main() {
        return puts("hello!");
    }
    $ gcc hello.c -o hello
    $ ./hello
    hello!
    $ chmod -x hello
    $ ./hello
    bash: ./hello: Permission denied
    $ /lib64/ld-linux-x86-64.so.2 ./hello
    hello!
    $ strace /lib64/ld-linux-x86-64.so.2 ./hello 2>&1 | grep exec
    execve("/lib64/ld-linux-x86-64.so.2", ["/lib64/ld-linux-x86-64.so.2", "./hello"], 0x7fff1206f208 /* 9 vars */) = 0
`/lib64/ld-linux-x86-64.so.2`本身应该是内核调用执行的，但我们这里可以直接进行调用。这样一方面可以在没有执行权限的情况下执行任意代码，另一方面也可以在一定程度上避免内核对execve的异常监控。
利用(滥用)interpreter我们还可以做其他有趣的事情，比如通过修改指定ELF文件的interpreter为我们自己的可执行文件，可让内核在处理目标ELF时将控制器交给我们的interpreter，这可以通过直接修改字符串表或者使用一些工具如[patchelf](https://github.com/NixOS/patchelf)来轻松实现。
对于恶意软件分析的场景，很多安全研究人员看到ELF就喜欢用[ldd](https://man7.org/linux/man-pages/man1/ldd.1.html)去看看有什么依赖库，一般ldd脚本实际上是调用系统默认的[ld.so](https://man7.org/linux/man-pages/man8/ld.so.8.html)并通过环境变量来打印信息，不过对于某些glibc实现(如glibc2.27之前的ld.so)，会调用ELF指定的interpreter运行，从而存在非预期命令执行的风险。
当然还有更多其他的思路可以进行拓展，这就需要大家发挥脑洞了。
## 加固/脱壳
与逆向分析比较相关的就是符号表，一个有符号的程序在逆向时基本上和读源码差不多。因此对于想保护应用程序的开发者而言，最简单的防护方法就是去除符号表，一个简单的
**strip**
命令就可实现。strip删除的主要是Section中的信息，因为这不影响程序的执行。去除前后进行diff对比可看到删除的section主要有下面这些:
    $ diff 0 1
    1c1
     There are 28 section headers, starting at offset 0x1144:
    32,39c32
       [27] .shstrtab         STRTAB          00000000 00104d 0000f5 00      0   0  1
其中 **.symtab** 是符号表， **.strtab** 是符号表中用到的字符串。
仅仅去掉符号感觉还不够，熟悉汇编的人放到反编译工具中还是可以慢慢还原程序逻辑。通过前面的分析我们知道，ELF执行需要的只是Program
Header中的几个段，Section
Header实际上是不需要的，只不过在运行时动态链接过程会引用到部分关联的区域。大部分反编译工具，如IDA、Ghidra等，处理ELF是需要某些section信息来构建程序视图的，所以我们可以通过构造一个损坏Section
Table或者ELF Header令这些反编译工具出错，从而干扰逆向人员。
当然，这个方法并不总是奏效，逆向人员可以通过动态调试把程序dump出来并对运行视图进行还原。一个典型的例子是Android中的JNI动态库，有的安全人员对这些so文件进行了加密处理，并且在`.init/.initarray`这些动态库初始化函数中进行动态解密。破解这种加固方法的策略就是将其从内存中复制出来并进行重建，重建的过程可根据segment对section进行还原，因为segment和section之间共享了许多内存空间，例如:
    $ readelf -l main1
    ...
     Section to Segment mapping:
      Segment Sections...
       00
       01     .interp
       02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame
       03     .init_array .fini_array .dynamic .got .got.plt .data .bss
       04     .dynamic
       05     .note.ABI-tag .note.gnu.build-id
       06     .eh_frame_hdr
       07
       08     .init_array .fini_array .dynamic .got
在`Section to Segment
mapping`中可以看到这些段的内容是跟对应section的内容重叠的，虽然一个segment可能对应多个section，但是可以根据内存的读写属性、内存特征以及对应段的一般顺序进行区分。
如果程序中有比较详细的日志函数，我们还可以通过反编译工具的脚本拓展去修改`.symtab/.strtab`段来批量还原ELF文件的符号，从而高效地辅助动态调试。
## Binary Fuzzing
考虑这么一种场景，我们在分析某个IoT设备时发现了一个定制的ELF网络程序，类似于httpd，其中有个静态函数负责处理输入数据。现在想要单独对这个函数进行fuzz应该怎么做？直接从网络请求中进行变异是一种方法，但是网络请求的效率太低，而且触达该函数的程序逻辑也可能太长。
既然我们已经了解了ELF，那就可以有更好的办法将该函数抽取出来进行独立调用。在介绍ELF类型的时候其实有提到，可执行文件可以有两种类型，即可执行类型(`ET_EXEC`)和共享对象(`ET_DYN`)，一个动态链接的可执行程序默认是共享对象类型的:
    $ gcc hello.c -o hello
    $ readelf -h hello | grep Type
      Type:  DYN (Shared object file)
而动态库(.so)本身也是共享对象类型，他们之间的本质区别在于前者链接了libc并且定义了main函数。对于动态库，我们可以通过`dlopen/dlsym`获取对应的符号进行调用，因此对于上面的场景，一个解决方式就是修改目标ELF文件，并且将对应的静态函数导出添加到dynamic
section中，并修复对应的ELF头。
这个思想其实很早就已经有人实现了，比如lief的[bin2lib](https://lief.quarkslab.com/doc/latest/tutorials/08_elf_bin2lib.html)。通过该方法，我们就能将目标程序任意的函数抽取出来执行，比如hugsy就用这个方式复现了Exim中的溢出漏洞(CVE-2018-6789)，详见[Fuzzing
arbitrary functions in ELF
binaries](https://blahcat.github.io/2018/03/11/fuzzing-arbitrary-functions-in-elf-binaries/)([中文翻译](https://www.anquanke.com/post/id/100801))。
# 总结
本文主要介绍了32位环境下ELF文件的格式和布局，然后从内核空间和用户空间两个方向分析了ELF程序的加载过程，最后列举了几个依赖于ELF文件特性的案例进行具体分析，包括dynamic
linker的滥用、程序加固和反加固以及在二进制fuzzing中的应用。
ELF文件本身并不复杂，只有三个关键部分，只不过在section和segment的类型上保留了极大的拓展性。操作系统可以根据自己的需求在不同字段上实现和拓展自己的功能，比如Linux中通过dymamic类型实现动态加载。但这不是必须的，例如在Android中就通过ELF格式封装了特有的`.odex`、
`.oat`文件来保存优化后的dex。另外对于64位环境，大部分字段含义都是类似的，只是字段大小稍有变化(Elf32->Elf64)，并不影响文中的结论。
# 参考链接
  * [Linux Foundation Referenced Specifications](https://refspecs.linuxfoundation.org/)
  * [Executable and Linkable Format (ELF)](http://www.cs.yale.edu/homes/aspnes/pinewiki/attachments/ELF\(20\)format/ELF_format.pdf)
  * [Tool Interface Standard (TIS) Executable and Linking Format (ELF) Specification Version 1.2](https://refspecs.linuxfoundation.org/elf/elf.pdf)
  * [elf(5) - format of Executable and Linking Format (ELF) files](https://man7.org/linux/man-pages/man5/elf.5.html)
  * [How programs get run: ELF binaries](https://lwn.net/Articles/631631/)
  * [深入了解GOT,PLT和动态链接](https://evilpan.com/2018/04/09/about-got-plt/)
* * *