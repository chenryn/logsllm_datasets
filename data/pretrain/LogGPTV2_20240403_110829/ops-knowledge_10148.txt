User: I had PyQt4 running fine with python2 on Ubuntu 12.04.  I then installed python-PySide.  But the installation test would give me a module not found error.  Then I installed python3-PySide and it works fine.  So obviously something to do with my environment paths, but I'm not sure what I need to do.  I'm guessing PySide is automatically checking if python3 exists and if it does then it'll use it regardless.  I need PySide to work with python2.7 because of Qt4.8 compatibility issues.  Any suggestions?
some info about my system:
which python 


/usr/bin/local/python


which python3


/usr/bin/python3


EDIT:
More details about installation test.
After installation, I bring up the python console and try import PySide, as follows:
python



import PySide



ImportError: No module name PySide
But it works fine for python3:
python3



import PySide
PySide.version



'1.1.2'
Assistant: You have two independent Python 2.7 installations, one in /usr and one in /usr/local. (And that's on top of the Python 3.x installation you also have.)
This is bound to cause confusion, especially for novices. And it has caused exactly the kind of consuion it was bound to cause.
You've installed PySide into the /usr installation, so it ended up in /usr/lib/python2.7/dist-packages. If you run /usr/bin/python, that import PySide will probably work fine. (If not, see below.)
But the default thing called python and python2.7 on your PATH is the /usr/local installation, hence which python says /usr/local/bin/python, so it can't see PySide at all. So you need to get it installed for the other Python as well.

Unless you know that you need a second Python 2.7 in /usr/local for some reason, the simplest thing to do would be to scrap it. Don't uninstall it and reinstall it; just uninstall it. You've already got a Python 2.7 in /usr, and you don't need two of them.

If you really need to get PySide working with the second 2.7…
Since you still haven't explained how you've been installing PySide despite being asked repeatedly, I can't tell you exactly how to do that. But generally, the key is to make sure to use explicit paths for all Python programs (python itself, python-config, pip, easy_install, etc.) that you have to run. For example, if the docs or blog or voices in your head tell you to run easy_install at some step, run /usr/local/bin/easy_install instead. If there is no such program, then you need to install that. The fact that you already have /usr/bin/easy_install doesn't help—in fact, it hurts.

If you can get rid of the second Python, but that doesn't fix PySide yet, uninstall, rebuild, and reinstall PySide. Or, even simpler… PySide has pre-made, working binary Ubuntu packages for all of the major Python versions that have Ubuntu packages. Just install it that way.