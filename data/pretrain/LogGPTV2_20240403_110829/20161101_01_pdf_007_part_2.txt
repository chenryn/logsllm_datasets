 log_disconnections = on
 打开代码位置信息的输出, 可以反映日志信息输出自哪个代码的什么函数.
 在会话中可以使用\set VERBOSITY verbose开启
 log_error_verbosity = verbose
 记录DDL语句, 但是需要注意的是, 创建用户, 修改密码的语句也会被记录, 所以敏感SQL执行前建议在会话中关闭这个审计.
 log_statement = 'ddl'
 这个原本是1024表示跟踪的SQL在1024的地方截断, 超过1024将无法显示全SQL. 修改为2048会消耗更多的内存(基本可以忽略), 不过可以显示更长的SQL.
 track_activity_query_size = 2048
授课环境搭建
 默认autovacuum就是打开的, log_autovacuum_min_duration = 0记录所有的autovacuum操作.
 autovacuum = on
 log_autovacuum_min_duration = 0
 这个模块用于收集SQL层面的统计信息, 如SQL被执行了多少次, 总共耗时,IO的耗时, 命中率等.
 一般用于发现业务上最频繁调用的SQL是什么, 有针对性的进行SQL优化.
 shared_preload_libraries = 'pg_stat_statements'
 pg_stat_statements.max = 1000
 pg_stat_statements.track = all
 pg_stat_statements.track_utility = off
 其他, 如果要监控IO的时间, 可以打开以下参数. 会带来较大的开销, 一般不建议打开.
 track_io_timing = on
目录
授课环境
SQL优化基础
如何让数据库输出好的执行计划
压力测试工具的使用和建模
性能分析工具的使用
综合优化案例
SQL优化基本常识
 数据库统计信息介绍
 成本因子介绍
 explain的使用和输出详解
 成本因子的校准
 执行计划跟踪
 执行计划缓存管理
 跟踪和调试
 函数的三态
 多版本并发控制
数据库统计信息
 http://www.postgresql.org/docs/9.3/static/catalog-pg-statistic.html
 http://www.postgresql.org/docs/9.3/static/view-pg-stats.html
 非继承列的统计信息
 select ... from only tbl使用这项统计信息
 NULL值百分比
 平均字节数
 唯一值百分比
 高频值以及每个值的占比
 排除高频值后的平均分配区间值
 物理存储顺序和列值分布顺性
 如果该列为数组类型, 统计数组元素高频值以及各百分比, 空值百分比, 元素唯一值个数的平均分布区间, 平均唯一值
个数.
 继承列统计信息. (包含继承表的采样统计)
 select ... from tbl* 使用这项统计信息.
 表和索引: 块, 行统计信息
 pg_class.relpages, pg_class.reltuples.
数据库统计信息
 列统计信息例子 :
 digoal=# create table t8(id int, info int[]);
 digoal=# insert into t8 select generate_series(1,10000),'{1,1,2,2,3,3,4,4}'::int[];
 digoal=# insert into t8 select generate_series(1,1000000),'{100,200}'::int[];
 digoal=# analyze t8;
 digoal=# select * from pg_stats where attname='info' and tablename='t8';
 schemaname | public
 tablename | t8
 attname | info
 inherited | f -- 非继承列的统计信息, 不包含继承列的采样.
 null_frac | 0 -- 空值百分比
 avg_width | 29 -- 列的平均长度(字节)
数据库统计信息
 n_distinct | 2 -- 在整个表当中, 该列包含的唯一值个数
 most_common_vals | {"{100,200}","{1,1,2,2,3,3,4,4}"} -- 高频值
 most_common_freqs | {0.990367,0.00963333} -- 高频值的占比
 histogram_bounds | -- 排除高频值后的平均分布区间, 这里没有
 correlation | 1 -- 表的物理存储顺序和列值分布的顺性
 most_common_elems | {1,2,3,4,100,200} -- 数组类型的统计信息: 高频元素
 most_common_elem_freqs | {0.00963333,0.00963333,0.00963333,0.00963333,0.990367,0.990367,0.00963333,0.990367,0} -- 高频元素的占比以
及 : 末尾3位分别表示频率的最小, 最大值. 空值频率.
 elem_count_histogram |
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,2.01927} -- 该列元素唯一值个数平均分布柱状图, 末尾为平均唯一值个数. 本例说明大部分为2个元
素.
 柱状图的bucket个数由参数default_statistics_target决定, 越大越精确, 同时也增加了采样数据和时间.
 收集统计信息的SQL :
 analyze或vacuum analyze;
数据库统计信息
 顺性例子 :
 digoal=# create table t10(id int);
 digoal=# insert into t10 select generate_series(1,10);
 digoal=# select ctid,id from t10;
 ctid | id
 --------+----
 (0,1) | 1
 (0,2) | 2
 (0,3) | 3
 (0,4) | 4
 (0,5) | 5
 (0,6) | 6
 (0,7) | 7
 (0,8) | 8
 (0,9) | 9
 (0,10) | 10
 (10 rows)
 ctid表示物理行信息, blockid, itemid.
数据库统计信息
 digoal=# analyze t10;
 digoal=# select correlation from pg_stats where attname='id' and tablename='t10';
 correlation
 -------------
 1
 (1 row)
 digoal=# truncate t10;
 digoal=# insert into t10 select generate_series(10,1,-1);
 digoal=# analyze t10;
 digoal=# select correlation from pg_stats where attname='id' and tablename='t10';
 correlation
 -------------
 -1
 (1 row)
数据库统计信息
 digoal=# select ctid,id from t10;
 ctid | id
 --------+----
 (0,1) | 10
 (0,2) | 9
 (0,3) | 8
 (0,4) | 7
 (0,5) | 6
 (0,6) | 5
 (0,7) | 4
 (0,8) | 3
 (0,9) | 2
 (0,10) | 1
 (10 rows)
成本因子
 http://www.postgresql.org/docs/9.3/static/runtime-config-query.html#RUNTIME-CONFIG-QUERY-CONSTANTS
 src/backend/optimizer/path/costsize.c
 #seq_page_cost = 1.0 # measured on an arbitrary scale -- 连续数据块扫描的成本因子, 表示扫描1个块的成本. 例如全表扫描.
 #random_page_cost = 4.0 # same scale as above -- 离散数据块扫描的成本因子, 例如索引扫描.
 #cpu_tuple_cost = 0.01 # same scale as above -- 每一行的CPU开销
 #cpu_index_tuple_cost = 0.005 # same scale as above -- 每一个索引条目的CPU开销
 #cpu_operator_cost = 0.0025 # same scale as above -- 每一个操作符的CPU开销, 如果操作符的开销被重新定义了, 那么需要乘以这
个因子.
 #effective_cache_size = 96GB # -- 评估操作系统缓存可能使用的内存大小, PostgreSQL planner用于评估索引扫描的开销, 大的值倾向使
用索引扫描, 小的值倾向使用全表扫描. 一般设置为内存大小减去shared buffer以及内核和其他软件占用的内存.
 SSD硬盘建议random_page_cost调小到趋向seq_page_cost甚至相等.
 如果内存极大, 或者已经把热点数据全部缓存到内存中, 那么可以把数据块相关的seq_page_cost和random_page_cost调整到趋向cpu相关的
大小. 因为从内存中获取数据块成本又降了一个数量级.
EXPLAIN 输出结构
 digoal=# explain (analyze,verbose,buffers,costs,timing) select id from t11 where id Bitmap Index Scan on t11_pkey (cost=0.00..2.36 rows=9 width=0) (actual time=0.006..0.006 rows=9 loops=1)
箭头表示节点信息
 Index Cond: (t11.id 符号区分.
 这些节点可能有多个层次, 例如关联后的结果又与其他数据合并, 那么关联节点上面还会有其他节点.
EXPLAIN输出结构
 节点类型:  "Seq Scan"  "Aggregate"
 ExplainNode@src/backend/commands/explain.c  "Index Scan"  "WindowAgg"
 "Index Only Scan"  "Unique"
 "Result"
 "Bitmap Index Scan"  "Sorted"
 "Insert"
 "Bitmap Heap Scan"  "HashSetOp"
 "Update"
 "Tid Scan"  "LockRows"
 "Delete"
 "Subquery Scan"  "Limit"
 "Append"
 "Function Scan"  "Hash"
 "Merge Append"
 "Values Scan"  .....
 "Recursive Union"
 "CTE Scan"
 "BitmapAnd"  "WorkTable Scan"  PostgreSQL选择总成本最低的节点组合
 "BitmapOr" 作为最终的执行计划.
 "Foreign Scan"
 "Nested Loop"
 "Materialize"
 "Merge Join"
 "Sort"
 "Hash Join"
 "Group"
EXPLAIN语法
 EXPLAIN [ ( option [, ...] ) ] statement
 EXPLAIN [ ANALYZE ] [ VERBOSE ] statement
 where option can be one of:
 ANALYZE [ boolean ] -- 执行statement, 得到真实的运行时间以及统计信息.
 VERBOSE [ boolean ] -- 输出详细信息, 如列,schema,trigger等信息. 默认关闭.
 COSTS [ boolean ] -- 输出根据成本因子计算得出的cost值, 默认打开.(分为该节点输出第一行前的成本以及输出所有行的成本.)
 -- src/backend/optimizer/path/costsize.c