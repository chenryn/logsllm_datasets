title:Detecting Targeted Attacks Using Shadow Honeypots
author:Kostas G. Anagnostakis and
Stelios Sidiroglou and
Periklis Akritidis and
Konstantinos Xinidis and
Evangelos P. Markatos and
Angelos D. Keromytis
Detecting Targeted Attacks Using Shadow Honeypots
K. G. Anagnostakis†, S. Sidiroglou‡, P. Akritidis?, K. Xinidis?, E. Markatos?, A. D. Keromytis‡
†CIS Department, Univ. of Pennsylvania
PI:EMAIL
? Institute of Computer Science - FORTH
{akritid,xinidis,markatos}@ics.forth.gr
‡ Department of Computer Science, Columbia University
{stelios,angelos}@cs.columbia.edu
Abstract
1 Introduction
We present Shadow Honeypots, a novel hybrid archi-
tecture that combines the best features of honeypots and
anomaly detection. At a high level, we use a variety of
anomaly detectors to monitor all trafﬁc to a protected net-
work/service. Trafﬁc that is considered anomalous is pro-
cessed by a “shadow honeypot” to determine the accuracy
of the anomaly prediction. The shadow is an instance of
the protected software that shares all internal state with a
regular (“production”) instance of the application, and is
instrumented to detect potential attacks. Attacks against
the shadow are caught, and any incurred state changes
are discarded. Legitimate trafﬁc that was misclassiﬁed
will be validated by the shadow and will be handled cor-
rectly by the system transparently to the end user. The
outcome of processing a request by the shadow is used to
ﬁlter future attack instances and could be used to update
the anomaly detector.
Our architecture allows system designers to ﬁne-tune
systems for performance, since false positives will be ﬁl-
tered by the shadow. Contrary to regular honeypots, our
architecture can be used both for server and client appli-
cations. We demonstrate the feasibility of our approach in
a proof-of-concept implementation of the Shadow Hon-
eypot architecture for the Apache web server and the
Mozilla Firefox browser. We show that despite a con-
siderable overhead in the instrumentation of the shadow
honeypot (up to 20% for Apache), the overall impact on
the system is diminished by the ability to minimize the
rate of false-positives.
Due to the increasing level of malicious activity seen
on today’s Internet, organizations are beginning to de-
ploy mechanisms for detecting and responding to new at-
tacks or suspicious activity, called Intrusion Prevention
Systems (IPS). Since current IPS’s use rule-based intru-
sion detection systems (IDS) such as Snort [32] to detect
attacks, they are limited to protecting, for the most part,
against already known attacks. As a result, new detection
mechanisms are being developed for use in more pow-
erful reactive-defense systems. The two primary such
mechanisms are honeypots [28, 13, 58, 40, 20, 9] and
anomaly detection systems (ADS) [49, 53, 48, 10, 19]. In
contrast with IDS’s, honeypots and ADS’s offer the pos-
sibility of detecting (and thus responding to) previously
unknown attacks, also referred to as zero-day attacks.
Honeypots and anomaly detection systems offer differ-
ent tradeoffs between accuracy and scope of attacks that
can be detected, as shown in Figure 1. Honeypots can be
heavily instrumented to accurately detect attacks, but de-
pend on an attacker attempting to exploit a vulnerability
against them. This makes them good for detecting scan-
ning worms [3, 5, 13], but ineffective against manual di-
rected attacks or topological and hit-list worms [43, 42].
Furthermore, honeypots can typically only be used for
server-type applications. Anomaly detection systems can
theoretically detect both types of attacks, but are usually
much less accurate. Most such systems offer a tradeoff
between false positive (FP) and false negative (FN) rates.
For example, it is often possible to tune the system to
detect more potential attacks, at an increased risk of mis-
classifying legitimate trafﬁc (low FN, high FP); alterna-
tively, it is possible to make an anomaly detection system
more insensitive to attacks, at the risk of missing some
real attacks (high FN, low FP). Because an ADS-based
USENIX Association
14th USENIX Security Symposium
129
IPS can adversely affect legitimate trafﬁc (e.g., drop a le-
gitimate request), system designers often tune the system
for low false positive rates, potentially misclassifying at-
tacks as legitimate trafﬁc.
Accuracy
Honeypot
Shadow
Honeypot
Anomaly
Detection
Scan/Random
Attacks Only
Scope
All Attacks
(Random + Targeted)
Figure 1: A simple classiﬁcation of honeypots and anomaly
detection systems, based on attack detection accuracy and
scope of detected attacks. Targeted attacks may use lists of
known (potentially) vulnerable servers, while scan-based at-
tacks will target any system that is believed to run a vulner-
able service. AD systems can detect both types of attacks,
but with lower accuracy than a specially instrumented sys-
tem (honeypot). However, honeypots are blind to targeted
attacks, and may not see a scanning attack until after it has
succeeded against the real server.
We propose a novel hybrid approach that combines the
best features of honeypots and anomaly detection, named
Shadow Honeypots. At a high level, we use a variety of
anomaly detectors to monitor all trafﬁc to a protected net-
work. Trafﬁc that is considered anomalous is processed
by a shadow honeypot. The shadow version is an instance
of the protected application (e.g., a web server or client)
that shares all internal state with a “normal” instance of
the application, but is instrumented to detect potential at-
tacks. Attacks against the shadow honeypot are caught
and any incurred state changes are discarded. Legitimate
trafﬁc that was misclassiﬁed by the anomaly detector will
be validated by the shadow honeypot and will be trans-
parently handled correctly by the system (i.e., an HTTP
request that was mistakenly ﬂagged as suspicious will be
served correctly). Our approach offers several advantages
over stand-alone ADS’s or honeypots:
• First, it allows system designers to tune the anomaly
detection system for low false negative rates, min-
imizing the risk of misclassifying a real attack as
legitimate trafﬁc, since any false positives will be
weeded out by the shadow honeypot.
• Second, and in contrast to typical honeypots, our ap-
proach can defend against attacks that are tailored
against a speciﬁc site with a particular internal state.
Honeypots may be blind to such attacks, since they
are not typically mirror images of the protected ap-
plication.
• Third, shadow honeypots can also be instantiated in
a form that is particularly well-suited for protect-
ing against client-side attacks, such as those directed
against web browsers and P2P ﬁle sharing clients.
• Finally, our system architecture facilitates easy inte-
gration of additional detection mechanisms.
We apply the concept of shadow honeypots to a proof-
of-concept prototype implementation tailored against
memory-violation attacks. Speciﬁcally, we developed a
tool that allows for automatic transformation of existing
code into its “shadow version”. The resulting code al-
lows for trafﬁc handling to happen through the regular
or shadow version of the code, contingent on input de-
rived from an array of anomaly detection sensors. When
an attack is detected by the shadow version of the code,
state changes effected by the malicious request are rolled
back. Legitimate trafﬁc handled by the shadow is pro-
cessed successfully, albeit at higher latency.
In addition to the server-side scenario, we also investi-
gate a client-targeting attack-detection scenario, unique
to shadow honeypots, where we apply the detection
heuristics to content retrieved by protected clients and
feed any positives to shadow honeypots for further anal-
ysis. Unlike traditional honeypots, which are idle whilst
waiting for active attackers to probe them, this scenario
enables the detection of passive attacks, where the at-
tacker lures a victim user to download malicious data.
We use the recent libpng vulnerability of Mozilla [7]
(which is similar to the buffer overﬂow vulnerability in
the Internet Explorer’s JPEG-handling logic) to demon-
strate the ability of our system to protect client-side ap-
plications.
Our shadow honeypot prototype consists of several
components. At the front-end of our system, we use a
high-performance intrusion-prevention system based on
the Intel IXP network processor and a set of modiﬁed
snort sensors running on normal PCs. The network pro-
cessor is used as a smart load-balancer, distributing the
workload to the sensors. The sensors are responsible for
130
14th USENIX Security Symposium
USENIX Association
testing the trafﬁc against a variety of anomaly detection
heuristics, and coordinating with the IXP to tag trafﬁc that
needs to be inspected by shadow honeypots. This design
leads to the scalability needed in high-end environments
such as web server farms, as only a fraction of the servers
need to incur the penalty of providing shadow honeypot
functionality.
In our implementation, we have used a variety of
anomaly detection techniques, including Abstract Pay-
load Execution (APE) [48], and the Earlybird algorithm
[36]. The feasibility of our approach is demonstrated
by examining both false-positive and true attack scenar-
ios. We show that our system has the capacity to process
all false-positives generated by APE and EarlyBird and
successfully detect attacks. We also show that when the
anomaly detection techniques are tuned to increase detec-
tion accuracy, the resulting additional false positives are
still within the processing budget of our system. More
speciﬁcally, our benchmarks show that although instru-
mentation is expensive (20-50% overhead), the shadow
version of the Apache Web server can process around
1300 requests per second, while the shadow version of
the Mozilla Firefox client can process between 1 and 4
requests per second. At the same time, the front-end and
anomaly detection algorithms can process a fully-loaded
Gbit/s link, producing 0.3-0.5 false positives per minute
when tuned for high sensitivity, which is well within the
processing budget of our shadow honeypot implementa-
tion.
Paper Organization The remainder of this paper is or-
ganized as follows. Section 2 discusses the shadow hon-
eypot architecture in greater detail. We describe our im-
plementation in Section 3, and our experimental and per-
formance results in Section 4. Some of the limitations of
our approach are brieﬂy discussed in Section 5. We give
an overview of related work in Section 6, and conclude
the paper with a summary of our work and plans for fu-
ture work in Section 7.
2 Architecture
The Shadow Honeypot architecture is a systems ap-
proach to handling network-based attacks, combining ﬁl-
tering, anomaly detection systems and honeypots in a
way that exploits the best features of these mechanisms,
while shielding their limitations. We focus on transac-
tional applications, i.e., those that handle a series of dis-
crete requests. Our architecture is not limited to server
applications, but can be used for client-side applications
such as web browsers, P2P clients, etc. As illustrated
in Figure 2, the architecture is composed of three main
components: a ﬁltering engine, an array of anomaly de-
tection sensors and the shadow honeypot, which validates
the predictions of the anomaly detectors. The processing
logic of the system is shown graphically in Figure 3.
The ﬁltering component blocks known attacks. Such
ﬁltering is done based either on payload content [52, 2]
or on the source of the attack, if it can be identiﬁed
with reasonable conﬁdence (e.g., conﬁrmed trafﬁc bi-
directionality). Effectively, the ﬁltering component short-
circuits the detection heuristics or shadow testing results
by immediately dropping speciﬁc types of requests before
any further processing is done.
Trafﬁc passing the ﬁrst stage is processed by one or
more anomaly detectors. There are several types of
anomaly detectors that may be used in our system, in-
cluding payload analysis [53, 36, 17, 48] and network
behavior [15, 56]. Although we do not impose any par-
ticular requirements on the AD component of our sys-
tem, it is preferable to tune such detectors towards high
sensitivity (at the cost of increased false positives). The
anomaly detectors, in turn, signal to the protected appli-
cation whether a request is potentially dangerous.
Depending on this prediction by the anomaly detectors,
the system invokes either the regular instance of the ap-
plication or its shadow. The shadow is an instrumented
instance of the application that can detect speciﬁc types
of failures and rollback any state changes to a known (or
presumed) good state, e.g., before the malicious request
was processed. Because the shadow is (or should be) in-
voked relatively infrequently, we can employ computa-
tionally expensive instrumentation to detect attacks. The
shadow and the regular application fully share state, to
avoid attacks that exploit differences between the two;
we assume that an attacker can only interact with the ap-
plication through the ﬁltering and AD stages, i.e., there
are no side-channels. The level of instrumentation used
in the shadow depends on the amount of latency we are
willing to impose on suspicious trafﬁc (whether truly ma-
licious or misclassiﬁed legitimate trafﬁc). In our imple-
mentation, described in Section 3, we focus on memory-
violation attacks, but any attack that can be determined
algorithmically can be detected and recovered from, at
the cost of increased complexity and potentially higher
latency.
If the shadow detects an actual attack, we notify the
ﬁltering component to block further attacks. If no attack
is detected, we update the prediction models used by the
anomaly detectors. Thus, our system could in fact self-
train and ﬁne-tune itself using veriﬁably bad trafﬁc and
USENIX Association
14th USENIX Security Symposium
131
Input arrives
Protected System
Regular
Service
Code
State Rollback
Process
State
OS Kernel
User processes
Shadow
Honeypot
Code
Protected Service
Address Space
Anomaly Detection Sensors
Update
Predictors
Filtering
Update filters
Known
Bad Input?
Yes
Drop request
No
Indicate False Positive to AD
Update AD Model
No
Suspect
Input Based
on AD?
Yes
Use Shadow
Attack
Detected?
Yes
Indicate Hit to AD
Update AD Model
Update Filtering Component
No
Randomly
Shadow
Use
Anyway?
No
Yes
Use Shadow
Attack
Detected?
Yes
Indicate False Negative to AD
Update AD Model
No
Handle request normally
Traffic from the network
Handle request normally; if
attack, system gets compromised
Figure 2: Shadow Honeypot architecture.
Figure 3: System workﬂow.
known mis-predictions, although this aspect of the ap-
proach is outside the scope of the present paper.
As we mentioned above, shadow honeypots can be in-
tegrated with servers as well as clients. In this paper, we
consider tight coupling with both server and client ap-
plications, where the shadow resides in the same address
space as the protected application.
• Tightly coupled with server This is the most prac-
tical scenario, in which we protect a server by divert-
ing suspicious requests to its shadow. The applica-
tion and the honeypot are tightly coupled, mirroring
functionality and state. We have implemented this
conﬁguration with the Apache web server, described
in Section 3.
• Tightly coupled with client Unlike traditional hon-
eypots, which remain idle while waiting for active
attacks, this scenario targets passive attacks, where
the attacker lures a victim user to download data
containing an attack, as with the recent buffer over-
ﬂow vulnerability in Internet Explorer’s JPEG han-
dling. In this scenario, the context of an attack is an
important consideration in replaying the attack in the
shadow. It may range from data contained in a single
packet to an entire ﬂow, or even set of ﬂows. Alter-
natively, it may be deﬁned at the application layer.
For our testing scenario, speciﬁcally on HTTP, the
request/response pair is a convenient context.
Tight coupling assumes that the application can be
modiﬁed. The advantage of this conﬁguration is that at-
tacks that exploit differences in the state of the shadow
vs. the application itself become impossible. However, it
is also possible to deploy shadow honeypots in a loosely
coupled conﬁguration, where the shadow resides on a dif-
ferent system and does not share state with the protected
application. The advantage of this conﬁguration is that
management of the shadows can be “outsourced” to a
third entity.
Note that the ﬁltering and anomaly detection compo-
nents can also be tightly coupled with the protected ap-
plication, or may be centralized at a natural aggregation
point in the network topology (e.g., at the ﬁrewall).
Finally, it is worth considering how our system would
behave against different types of attacks. For most attacks
we have seen thus far, once the AD component has iden-
tiﬁed an anomaly and the shadow has validated it, the ﬁl-
tering component will block all future instances of it from
getting to the application. However, we cannot depend on
the ﬁltering component to prevent polymorphic or meta-
morphic [46] attacks. For low-volume events, the cost
of invoking the shadow for each attack may be accept-
able. For high-volume events, such as a Slammer-like
132
14th USENIX Security Symposium
USENIX Association
 
 
 
 
 
 
 
 
 
 
 
 