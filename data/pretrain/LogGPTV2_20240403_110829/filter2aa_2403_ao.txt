34 ; return 0 
35          mov    w0, 0 
36 ; restore FP and LR, then add 32 to SP: 
37          ldp    x29, x30, [sp], 32 
38          ret 
第 22 行用来分配局部变量 x 的存储空间。当 scanf()函数获取这个地址之后，它就把用户输入的数据传递
给这个内存地址。输入的数据应当是 32 位整型数据。第 27 行的指令把输入数据的值传递给 printf()函数。 
7.1.6 MIPS 
MIPS 编译器同样使用数据栈存储局部变量 x。然后程序就可以通过$sp+24 调用这个变量。scanf()
函数获取地址指针之后，通过 LW（Load Word）指令把输入变量存储到这个地址、以传递给 printf()
函数。 
指令清单 7.4  Optimizing GCC 4.4.5 (assembly output) 
$LC0: 
          .ascii  "Enter X:\000" 
$LC1: 
          .ascii  "%d\000" 
$LC2: 
          .ascii  "You entered %d...\012\000" 
main: 
; function prologue: 
          lui     $28,%hi(__gnu_local_gp) 
          addiu   $sp,$sp,-40 
          addiu   $28,$28,%lo(__gnu_local_gp) 
          sw      $31,36($sp) 
; call puts(): 
          lw      $25,%call16(puts)($28) 
          lui     $4,%hi($LC0) 
          jalr    $25 
          addiu   $4,$4,%lo($LC0) ; branch delay slot 
; call scanf(): 
          lw      $28,16($sp) 
          lui     $4,%hi($LC1) 
          lw      $25,%call16(__isoc99_scanf)($28) 
; set 2nd argument of scanf(), $a1=$sp+24: 
          addiu  $5,$sp,24 
          jalr   $25 
          addiu  $4,$4,%lo($LC1) ; branch delay slot 
; call printf(): 
          lw      $28,16($sp) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
65 
; set 2nd argument of printf(), 
; load word at address $sp+24: 
          lw      $5,24($sp) 
          lw      $25,%call16(printf)($28) 
          lui     $4,%hi($LC2) 
          jalr    $25 
          addiu   $4,$4,%lo($LC2) ; branch delay slot 
; function epilogue: 
          lw      $31,36($sp) 
; set return value to 0: 
          move    $2,$0 
; return: 
          j       $31 
          addiu  $sp,$sp,40 ; branch delay slot 
IDA 将本程序的栈结构显示如下。 
指令清单 7.5  Optimizing GCC 4.4.5 (IDA) 
.text:00000000 main: 
.text:00000000 
.text:00000000 var_18    
= -0x18 
.text:00000000 var_10    
= -0x10 
.text:00000000 var_4     
= -4 
.text:00000000 
; function prologue: 
.text:00000000     
lui      
$gp, (__gnu_local_gp >> 16) 
.text:00000004     
addiu    
$sp, -0x28 
.text:00000008     
la       
$gp, (__gnu_local_gp & 0xFFFF) 
.text:0000000C     
sw       
$ra, 0x28+var_4($sp) 
.text:00000010     
sw       
$gp, 0x28+var_18($sp) 
; call puts(): 
.text:00000014     
lw       
$t9, (puts & 0xFFFF)($gp) 
.text:00000018     
lui      
$a0, ($LC0 >> 16)  # "Enter X:" 
.text:0000001C     
jalr     
$t9 
.text:00000020     
la       
$a0, ($LC0 & 0xFFFF)  # "Enter X:" ; branch delay slot 
; call scanf(): 
.text:00000024     
lw       
$gp, 0x28+var_18($sp) 
.text:00000028     
lui      
$a0, ($LC1 >> 16)  # "%d" 
.text:0000002C     
lw       
$t9, (__isoc99_scanf & 0xFFFF)($gp) 
; set 2nd argument of scanf(), $a1=$sp+24: 
.text:00000030     
addiu    
$a1, $sp, 0x28+var_10 
.text:00000034     
jalr     
$t9  ; branch delay slot 
.text:00000038     
la       
$a0, ($LC1 & 0xFFFF)  # "%d" 
; call printf(): 
.text:0000003C     
lw       
$gp, 0x28+var_18($sp) 
; set 2nd argument of printf(), 
; load word at address $sp+24: 
.text:00000040     
lw       
$a1, 0x28+var_10($sp) 
.text:00000044     
lw       
$t9, (printf & 0xFFFF)($gp) 
.text:00000048     
lui      
$a0, ($LC2 >> 16) # "You entered %d...\n" 
.text:0000004C     
jalr     
$t9 
.text:00000050     
la       
$a0, ($LC2 & 0xFFFF) # "You entered %d...\n" ; brach delay slot 
; function epilogue:  
.text:00000054     
lw       
$ra, 0x28+var_4($sp) 
; set return value to 0:  
.text:00000058     
move     
$v0, $zero 
; return:  
.text:0000005C     
jr       
$ra 
.text:00000060     
addiu    
$sp, 0x28 ; branch delay slot 
7.2  全局变量 
在本章前文的那个程序里，如果 x 不是局部变量而是全局变量，那会是什么情况？一旦 x 变量成为了
异步社区会员 dearfuture(15918834820) 专享 尊重版权
66 
逆向工程权威指南（上册） 
全局变量，函数内部的指令、以及整个程序中的任何部分都可以访问到它。虽然优秀的程序不应当使用全
局变量，但是我们应当了解它的技术特点。 
#include  
//now x is global variable 
int x; 
int main()  
{ 
          printf ("Enter X:\n"); 
          scanf ("%d", &x); 
          printf ("You entered %d...\n", x); 
          return 0; 
}; 
7.2.1 MSVC：x86 
_DATA      SEGMENT 
COMM      _x:DWORD 
$SG2456      DB     'Enter X: ', 0aH, 00H 
$SG2457      DB     '%d', 00H 
$SG2458      DB     'You entered %d... ', 0aH, 00H 
_DATA      ENDS 
PUBLIC      _main 
EXTRN     __scanf:PROC 
EXTRN     __printf:PROC 
; Function compile flags: /Odtp 
_TEXT     SEGMENT 
_main     PROC 
     push    ebp 
     mov     ebp, esp 
     push    OFFSET $SG2456 
     call    _printf 
     add     esp, 4 
     push    OFFSET _x 
     push    OFFSET $SG2457 
     call    _scanf 
     add     esp, 8 
     mov     eax, DWORD PTR _x 
     push    eax 
     push    OFFSET $SG2458 
     call    _printf 
     add     esp, 8 
     xor     eax, eax 
     pop     ebp 
     ret     0 
_main     ENDP 
_TEXT     ENDS 
与前文不同的是，x 变量的存储空间是数据段（_data 域），反而没有使用数据栈。因此整个程序的所
有指令都可以直接访问全局变量 x。在可执行文件中，未经初始化的变量不会占用任何存储空间。 
在某些指令在变量访问这种未初始化的全局变量的时候，操作系统会分配一段数值为零的地址给它。
这是操作系统 VM（虚拟内存）的管理模式所决定的。 
如果对上述源代码稍做改动，加上变量初始化的指令： 
int x=10; //设置默认值 
那么对应的代码会变为： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
67 
_DATA   SEGMENT 
_x      DD      0aH 
... 
上述指令将初始化 x。其中 DD 代表 DWORD，表示 x 是 32 位的数据。 
若在 IDA 里打开对 x 进行初始化的可执行文件，我们将会看到数据段的开头部分看到初始化变量 x。
紧随其后的空间用于存储本例中的字符串。 
用 IDA 打开 7.2 节里那个不初始化变量 x 的例子，那么将会看到下述内容。 
.data:0040FA80 _x  
dd ?   
; DATA XREF: _main+10 
.data:0040FA80   
; _main+22 
.data:0040FA84 dword_40FA84  
dd ?   
; DATA XREF: _memset+1E 
.data:0040FA84   
; unknown_libname_1+28 
.data:0040FA88 dword_40FA88  
dd ?   
; DATA XREF: ___sbh_find_block+5 
.data:0040FA88   
; ___sbh_free_block+2BC 
.data:0040FA8C ; LPVOID lpMem 
.data:0040FA8C lpMem   
dd ?   
; DATA XREF: ___sbh_find_block+B 
.data:0040FA8C   
; ___sbh_free_block+2CA 
.data:0040FA90 dword_40FA90  
dd ?   
; DATA XREF: _V6_HeapAlloc+13 
.data:0040FA90   
; __calloc_impl+72 
.data:0040FA94 dword_40FA94  
dd ?   
; DATA XREF: ___sbh_free_block+2FE 
这段代码里有很多带“？”标记的变量，这是未初始化的x变量的标记。这意味着在程序加载到内存之
后，操作系统将为这些变量分配空间、并填入数字零
①
7.2.2 MSVC：x86+OllyDbg 
。但是在可执行文件里，这些未初始化的变量不占
用内存空间。为了方便使用巨型数组之类的大型数据，人们刻意做了这种设定。 
我们可以在 OllyDbg 观察程序的数据段里的变量。如图 7.5 所示。 
图 7.5  OllyDbug：运行 scanf()函数之后的状态 
全局变量 x 出现在数据段里。在调试器执行完 PUSH 指令之后，变量 x 的指针推即被推送入栈，我们
就可在栈里右键单击 x 的地址并选择“Follow in dump”，并在左侧的内存窗口观察它。 
在控制台输入 123 之后，栈里的数据将会变成 0x7B（左下窗口的高亮部分）。 
您有没有想过，为什么第一个字节是 0x7B？若考虑到数权，此处应该是 00 00 00 7B。可见，这是 x86 系统
里低位优先的“小端字节序/LITTLE-ENDIAN”的典型特征。小端字节序属于“字节（顺）序/endianness”的一
种，它的第一个字节是数权最低的字节，数权最高的字节会排列在最后。本书将在第 31 章将详细介绍字节序。 
此后，EAX 寄存器将存储这个地址里的 32 位值，并将之传递给 printf()函数。 
本例中，变量 x 的内存地址是 0x00C53394。 
在 OllyDbg 里，按下 Alt+M 组合键可查看这个进程的内存映射（process memory map）。如图 7.6 所示，
这个地址位于程序 PE 段的.data 域。 
① 请参阅 ISO07，6.7.8 节。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
68 
逆向工程权威指南（上册） 
图 7.6  OllyDbg：进程内存映射 
7.2.3  GCC：x86 
在汇编指令层面，Linux 与 Windows 的编译结果区别不大。它们的区别主要体现在字段（segament）名称和
字段属性上：Linux GCC 生成的未初始化变量会出现在_bss 段，对应的 ELF 文件描述了这个字段数据的属性。 
; Segment type: Uninitialized 
; Segment permissions: Read/Write 
如果给这个变量分配了初始值，比如说 10，那么这个变量将会出现在_data 段，并且具有下述属性。 
; Segment type: Pure data 
; Segment permissions: Read/Write 
7.2.4 MSVC：x64 
指令清单 7.6  MSVC 2012 x64 
_DATA   
SEGMENT 
COMM     
x:DWORD 
$SG2924  
DB   
'Enter X: ', 0aH, 00H 
$SG2925  
DB   
'%d', 00H 
$SG2926  
DB   
'You entered %d... ', 0aH, 00H 
_DATA    
ENDS 
_TEXT    
SEGMENT 
main     
PROC 
$LN3: 
sub     
rsp, 40 
lea     
rcx, OFFSET FLAT:$SG2924 ; 'Enter X: ' 
call     
printf 
lea     
rdx, OFFSET FLAT:x 
lea     
rcx, OFFSET FLAT:$SG2925 ; '%d' 
call     
scanf 
mov     
edx, DWORD PTR x 
lea      
rcx, OFFSET FLAT:$SG2926 ; 'You entered %d... ' 
call   
printf 
; return 0 