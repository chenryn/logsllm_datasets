not very different from a RDFS property. They both use the
rdfs:domain and rdfs:range elements. Simple properties can be defined
using: owl:ObjectProperty and owl:DatatypeProperty.
Object properties link individuals to individuals. They relate an
instance of a class to an instance of another class. The other class can
actually be the same class.
For example, the object property hasActivity related the class
Where with the class What. This means that a place (i.e., an individual
of the class Where) may supply a kind of activity (i.e., an individual of
the class What) to its customer, such as Golf and Paintball. The first
related class is called the domain, while the second is called the range:
Datatype properties link individuals to data values and can be used
to restrict an individual member of a class to RDF literals and XML
Schema datatypes. Since OWL does not include any data types, it
Developing an OWL Ontology for e-Tourism 19
allows the XML Schema data types to be used. All OWL reasoners
are required to support the xsd:integer and xsd:string datatypes. In the
following example, the year a tourist was born is specified using the
&xsd;positiveInteger data type from the XML Schema.
 The year a tourist was born
5.5.2 Property Characteristics
Property characteristics allow data to be made more expressive in
such a way that reasoning engines can carry out powerful inference.
They enhance reasoning by extending the meaning behind
relationships. In OWL, it is possible to define relations from one
property to other properties. Two examples are the elements
owl:equivalentProperty and owl:inverseOf.
The equivalence of properties is defined using the
owl:equivalentProperty element. Property equivalence is not the same
as property equality. Equivalent properties have the same property
extension, but may have different meanings. The following example
expresses that stating that “a Person plays a sport” is equivalent to
stating that “a Person engages in a sport”.
...
The owl:inverseOf construct can be used to define inverse relation
between properties. If the property P’ is stated to be the inverse of the
property P’’, then if X’’ is related to Y’’ by the P’’ property, then Y’’
is related to X’’ by the P’ property. For example, “a tourist plays an
activity” and “an activity isPlayedBy a tourist” are cases of an inverse
relation between properties. In such a scenario, if the tourist John
plays the activity Golf, then a reasoner may infer that Golf isPlayedBy
John. This can be expressed formally in OWL as:
20 Semantic Web Processes and Their Applications
Functional properties (owl:FunctionalProperty) express the fact
that a property may have no more than one value for each instance.
Functional properties have a unique value or no values, i.e. the
property’s minimum cardinality is zero and its maximum cardinality is
1. If an individual instance of Tourist has the PassportID property,
then that individual may not have more than one ID. However, this
does not state that every Tourist must have at least one passport ID.
This is illustrated in the following example with the hasPassportID
property, which ensures that a Tourist has only one passport ID:
The same semantic can be expressed as:
Common examples of functional properties include age, height,
date of birth, sex, marital status, etc.
Properties may be stated to be inverse functional with the element
owl:InverseFunctionalProperty. If a property is inverse functional then
the inverse of the property is functional and the inverse functional
property defines a property for which two different objects cannot
have the same value. The inverse of the property has at most one
value. The following example states that the property
isThePassportIDof is to be inverse functional:
Therefore, there can only be one passport ID for a tourist. The
inverse property of isThePassportIDof, i.e. the functional property
hasPassportID has at most one value.
Developing an OWL Ontology for e-Tourism 21
A reasoning engine can infer that no two tourists can have the
same passport ID and that if two tourists have the same passport
number, then they refer to the same individual.
FunctionalProperty and InverseFunctionalProperty can be used to
relate resources to resources, or resources to an RDF Schema Literal
or an XML Schema datatype.
Properties may be also stated to be symmetric. The symmetric
property (owl:SymmetricProperty) is interpreted as follows: if the pair
(x, y) is an instance of A, then the pair (y, x) is also an instance of A.
For example, the property b2bLink of the class Hotel of our e-
tourism ontology may be stated to be a symmetric property:
This expresses the fact that a Hotel can establish B2B (Business-
to-Business) links with several leisure organizations from the tourism
industry. For example, a Hotel can establish a B2B link with a Golf
course and a SPA. When a reasoner is given the fact that a Hotel A
has established a B2B link with a Golf course B, the reasoner can infer
that the Golf course B has also a B2B link with the Hotel A.
When a property is stated to be transitive with the element
owl:TransitiveProperty, then if the pair (x, y) is an instance of the
transitive property P, and the pair (y, z) is an instance of P, we can
infer the pair (x, z) is also an instance of P
For example, if busTour is stated to be transitive, and if there is a
bus tour from Funchal to Porto Moniz and there is a bus tour from
Porto Moniz to São Vicente, then a reasoner can infer that there is a
bus tour from Funchal to São Vicente. Funchal, Porto Moniz, and São
Vicente are individuals of the class Where. This is expressed in OWL
in the following way:
Or equivalently:
22 Semantic Web Processes and Their Applications
Both the owl:SymmetricProperty and owl:TransitiveProperty
properties are used to relate resources to resources.
5.6 Property Restrictions
Restrictions differ from characteristics since restrictions apply to
properties with specific values. Property restrictions allow specifying
a class for which its instances satisfy a condition. A restriction is
achieved through the owl:Restriction element which contains an
owl:onProperty element and one or more restriction declarations.
Examples of restrictions include owl:allValuesFrom (specifies
universal quantification), owl:hasValue (specifies a specific value),
and owl:someValuesFrom (specifies existential quantification).
The owl:allValuesFrom element is stated on a property with
respect to a class. A class may have a property P restricted to have all
the values from the class C, i.e. the constraint demands that all values
of P should be of type C (if no such values exist, the constraint is
trivially true). Let us see an example to better understand this concept:
The individuals that are members of the class
TouristOutdoorSportPlayer are those such that if there is an object that
is related to them via the #plays property, then it must be
#OutdoorSport. No assertion about the existence of the relationship
#plays is made, but if the relationship holds then the related object
must be of the class #OutdoorSport.
Developing an OWL Ontology for e-Tourism 23
Using the owl:hasValue element, a property can be required to
have a specific value. For example, individuals of the class
FunchalSiteSeeing can be characterized as those places that have 9000
as a value of their zip code. This is expressed with the following
statements:
9000
In terms of logic, the owl:someValuesFrom element allows
expression of existential quantification. This element describes those
individuals that have a relationship with other individuals of a
particular class. Unlike owl:allValuesFrom, owl:someValuesFrom
does not restrict all the values of the property to be individuals of the
same class. When owl:someValuesFrom is stated on a property P with
respect to a class C, it specifies that at least one value for that property
is of a certain type.
For example, the class TouristGolfPlayer may have a
owl:someValuesFrom restriction on the #plays property that states that
some value for the plays property should be an instance of the class
Golf. This expresses the fact that any tourist can play multiple sports
(e.g. Golf, PaintBall, Tennis, etc.) as long as one or more is an
instance of the class Golf.
The individuals that are members of the class TouristGolfPlayer
are those that are related via the #plays property to at least one
instance of the Golf class. The owl:someValuesFrom element makes
24 Semantic Web Processes and Their Applications
no restriction about other relationships that may be present. Therefore,
an individual of the class TouristGolfPlayer may play other sports.
5.7 Cardinality Restrictions
Cardinality restrictions are also property restrictions. In OWL,
three different cardinality restrictions exist:
• owl:maxCardinality – specifies the maximum number of
individuals,
• owl:minCardinality – specifies the minimum number of
individuals, and
• owl:cardinality – specifies the exact number of individuals.
The element owl:maxCardinality: is stated on a property P with
respect to a particular class C. If a owl:maxCardinality with the value
n is stated on a property with respect to a class, then any instance of
that class will be related to at most n individuals by property P. The
variable n should be a non-negative integer.
For example, the property #visitLocal of the class
SiteSeeingPackage may have a maximum cardinality of 10 since it is
considered that a site seeing package should not include more than 10
places to visit.
...
 10
The element owl:minCardinality is very similar to the element
owl:maxCardinality. As the name suggests, the only difference lies in
the fact that it specified a lower boundary for the cardinality of a
property P of a class C. The following example shows that the
property visitLocal of the class SiteSeeingPackage has a minimum
cardinality of 2. It expressed that a site seeing package should include
the visit to at least 2 site seeing locals.
Developing an OWL Ontology for e-Tourism 25
...
 2
The owl:cardinality, the last cardinality restriction statement, is a
useful element when it is necessary to expresse that a property has a
minimum cardinality which is equal to the maximum cardinality. This
is a convenience element.
It should be noticed that when using OWL Lite the cardinality
elements, owl:maxCardinality, owl:minCardinality, and
owl:cardinality, can only specify the values 0 and 1. On the other
hand, OWL Full allows cardinality statements for arbitrary non-
negative integers. Furthermore, when using OWL DL, no cardinality
restrictions may be placed on transitive properties
6. BRINGING IT ALL TOGETHER: THE OWL
ONTOLOGY FOR E-TOURISM
The following example describes the e-tourism ontology. This
ontology can be use to integrate tourist information systems or simply
serve as a schema to carry out inferencing.
]>
26 Semantic Web Processes and Their Applications
E-Tourism OWL Ontology
 v.1 2005-10-25 
E-Tourism Ontology