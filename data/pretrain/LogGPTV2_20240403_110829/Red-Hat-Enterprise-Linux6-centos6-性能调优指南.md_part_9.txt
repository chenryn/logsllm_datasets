还用来提高程序性能，方法是为一个或者多个具体 CPU 核分配中断类似性和程序线程类似性。这可让缓存
线可在指定的中断和程序线程之间共享。
具体 IRQ 数的中断近似性值是保存的相关的 /proc/irq/IRQ_NUMBER/smp_affinity 文件中，您可以
作为 root 用户查看并修改该值。保存在这个文件中的值是一个十六进制字节掩码，代表系统中所有 CPU
核。
例如：要为四核服务器指定以太网驱动程序，首先要确定与该以太网驱动程序关联的 IRQ 数：
33
红帽企业版 Linux 6 性能调节指南
# grep eth0 /proc/interrupts
32: 0 140 45 850264 PCI-MSI-edge eth0
使用 IRQ 数定位正确的 smp_affinity 文件：
# cat /proc/irq/32/smp_affinity
f
smp_affinity 的默认值为 f，即可为系统中任意 CPU 提供 IRQ。将这个值设定为 1，如下，即表示只有
CPU 0 可以提供这个中断：
# echo 1 >/proc/irq/32/smp_affinity
# cat /proc/irq/32/smp_affinity
1
可使用逗号为不连续的 32 位组限定 smp_affinity 值。在有 32 个以上核的系统有这个要求。例如：以下
示例显示在一个 64 核系统的所有核中提供 IRQ 40。
# cat /proc/irq/40/smp_affinity
ffffffff,ffffffff
要只在 64 核系统的上 32 核中提供 IRQ 40，请执行：
# echo 0xffffffff,00000000 > /proc/irq/40/smp_affinity
# cat /proc/irq/40/smp_affinity
ffffffff,00000000
注注意意
在支持中断操作的系统中，修改 IRQ 的 smp_affinity 设置硬件以便决定在不影响内核的情况下，
硬件层为具体 CPU 提供中断服务。
4.4. 红红帽帽企企业业版版 Linux 6 中中 NUMA 的的改改进进
红帽企业版 Linux 6 包括大量改进以便充分利用当今高度可扩展的硬件。本小节对由红帽企业版 Linxu 6 提
供的大多数与 NUMA 相关的重要性能改进进行概述。
4.4.1. 裸裸机机和和可可扩扩展展性性优优化化
4.4.1.1. 拓拓扑扑识识别别改改进进
以下改进可让红帽企业版 Linux 探测底层硬件和架构详情，提高其在系统中进行自动优化的功能。
提提高高的的拓拓扑扑探探测测
这可让操作系统探测到引导时的底层硬件详情（比如逻辑 CPU，超线程，核，插槽，NUMA 节点
以及节点间访问时间），并优化系统进程。
完完全全公公平平调调度度程程序序
这个新的调度模式可以保证在有效进程间平均分配运行时间。这个模式与拓扑探测联合使用可将进
程在同一插槽的 CPU 中调度以避免昂贵的远程内存访问，同时保证随时保留缓存内容。
34
第 4 章 CPU
malloc
malloc 现在已经优化，可保证分配给某个进程的内存区尽量接近执行该内存的核。这样可以增加
内存访问速度。
skbuff I/O 缓缓存存分分配配
与 malloc 类似，现已将其优化为使用与处理 I/O 操作（比如设备中断）的 CPU 最接近的内存。
设设备备中中断断亲亲和和性性
设备驱动程序记录的关于哪个 CPU 处理哪个中断的信息可用来限制在同一物理插槽中的 CPU 处理
的中断，保留缓存亲和性并限制高容量跨插槽通讯。
4.4.1.2. 改改进进多多核核处处理理器器同同步步
协调多个处理器之间的任务需要频繁、耗时的操作以便保证平行执行的进程不会损害数据完整性。红帽企业
版 Linux 包括以下改进以提高此方面的性能：
读读-拷拷贝贝-更更新新（（RCU））锁锁
通常 90% 的锁定是用于只读目的。RCU 锁定移除了在未修改数据访问时获得独家访问锁定的要
求。这个锁定模式现已用于页缓存分配：现在锁定只可用于分配或者取消分配动作。
按按 CPU 以以及及按按插插槽槽进进行行计计算算的的算算法法
很多算法已更新至在同一插槽的合作 CPU 之间执行锁定协作以便允许更细致地调整锁定。大量全
局自旋锁已使用按插槽锁定方法替换，且更新的内存分配程序区以及相关的内存页列表可在执行分
配或者取消分配操作时让内存分配逻辑贯穿更有效的内存匹配数据结构子集。
4.4.2. 虚虚拟拟化化优优化化
因为 KVM 使用内核功能，所以基于 KVM 的虚拟机可立即受益于所有裸机优化。红帽企业版 Linux 还包括大
量可让虚拟机进入逻辑性能层的改进。这些改进注重存储和网络访问中的 I/O 路径，甚至可以让加强负荷
（比如数据库以及访问服务）利用虚拟的部署。可提高虚拟系统性能的针对 NUMA 的改进包括：
CPU pinning
可将虚拟机捆绑到具体插槽中以便优化本地缓存使用，并删除昂贵的插槽间通讯和远程内存访问的
需要。
透透明明大大页页面面（（THP））
启用 THP 后，系统可为大量连续内存自动执行 NUMA 可识别的内存分配要求，减少内存锁竞争量
和所需转移后备缓冲器（TLB）内存管理操作，并可在虚拟机中将性能提高达 20%。
基基于于内内核核的的 I/O 实实施施
虚拟机 I/O 子系统现在已在内核中部署，这样可极大降低节点间通讯和内存访问，方法是避免大量
上下文切换，减少同步和通讯费用。
35
红帽企业版 Linux 6 性能调节指南
第第 5 章章 内内存存
预读本章了解红帽企业版 Linux 中可用的内存管理功能，以及如何使用这些管理功能优化系统的内存使用。
5.1. 超超大大转转译译后后备备缓缓冲冲器器（（HugeTLB））
将物理内存地址转译为性能内存地址是内存管理的一部分。物理地址和虚拟地址的映射关系保存在名为页表
的数据结构中。因为为每个地址映射读取页表会很消耗时间和资源，所以最近使用的地址都有缓存。这个缓
存就称为转译后备缓冲器（TLB）。
但 TLB 只能缓存大量地址映射。如果所要求的地址映射没有在 TLB 中，则必须仍读取页表以决定物理到虚
拟地址映射。这就是所谓的“TLB 缺失”。因为其内存要求与用来缓存 TLB 中地址映射的页面之间的关系，所
以有大内存要求的程序比使用较少内存的程序更容易受 TLB 缺失影响。因为每个缺失都涉及页表读取，因此
尽量避免这些缺失很重要。
超大转译后备缓冲器（HugeTLB）可以很大片段管理内存，以便一次可以缓存更多地址。这样可减少 TLB
缺失的可能性，进而改进有大内存要求的程序性能。
有关配置 HugeTLB 的信息可在内核文档中找到：/usr/share/doc/kernel-
doc-version/Documentation/vm/hugetlbpage.txt
5.2. 大大页页面面和和透透明明大大页页面面
内存是由块管理，即众所周知的页面。一个页面有 4096 字节。1MB 内存等于 256 个页面。1GB 内存等于
256000 个页面等等。CPU 有内嵌的内存管理单元，这些单元中包含这些页面列表，每个页面都使用页表条
目参考。
让系统管理大量内存有两种方法：
增加硬件内存管理单元中页表数
增大页面大小
第一个方法很昂贵，因为现代处理器中的硬件内存管理单元只支持数百或者书签页表条目。另外适用于管理
数千页面（MB 内存）硬件和内存管理算法可能无法很好管理数百万（甚至数十亿）页面。这会造成性能问
题：但程序需要使用比内存管理单元支持的更多的页面，该系统会退回到缓慢的基于软件的内存管理，从而
造成整个系统运行缓慢。
红帽企业版 Linux 6 采用第二种方法，即使用超大页面。
简单说，超大页面是 2MB 和 1GB 大小的内存块。2MB 使用的页表可管理多 GB 内存，而 1GB 页是 TB 内
存的最佳选择。
差大页面必须在引导时分配。它们也很难手动管理，且经常需要更改代码以便可以有效使用。因此红帽企业
版 Linux 也部署了透明超大页面 (THP)。THP 是一个提取层，可自动创建、管理和使用超大页面的大多数方
面。
THP 系统管理员和开发者减少了很多使用超大页面的复杂性。因为 THP 的目的是改进性能，所以其开发者
（社区和红帽开发者）已在各种系统、配置、程序和负载中测试并优化了 THP。这样可让 THP 的默认设置
改进大多数系统配置性能。
注：THP 目前只能映射异步内存区域，比如堆和栈空间。
5.3. 使使用用 Valgrind 简简要要描描述述内内存存使使用用
Valgrind 是为用户空间二进制提供检测的框架。它与大量用于简要描述和分析程序性能的工具一同发布。
36
第 5 章 内存
本小节提供的工具可用于探测内存错误，比如使用未初始化内存以及不正确地分配或者取消分配内存。这些
工具都包含在 valgrind 软件包中，并可使用以下命令运行：
valgrind --tool=toolname program
使用您要使用的工具名称替换 toolname（要对内存进行简要概述，请使用 memcheck, massif 或者
cachegrind），同时使用您要使用 Valgrind 进行简要概述的程序替换 program。请注意 Valgrind 的检测
可能造成程序比正常情况运行更缓慢。
Valgrind 的功能概述请参考 第 3.5.3 节 “Valgrind”。详情，包括用于 Eclipse 的插件请参考《开发者指
南》，其链接为 http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/。您还可以在安
装 valgrind 软件包后使用 man valgrind 命令查看相关文档，或者在以下位置查找这些文档：
/usr/share/doc/valgrind-version/valgrind_manual.pdf 以及
/usr/share/doc/valgrind-version/html/index.html。
5.3.1. 使使用用 Memcheck 简简要要概概述述内内存存使使用用
Memcheck 是默认 Valgrind 工具，且可以与 valgrind program 一同运行，而无需指定 --
tool=memcheck。它可探测和报告大量很难探测和诊断的内存错误，比如不应该发生的内存访问，使用未
定义或者未初始化值，错误释放的堆内存，重叠的光标以及内存泄漏。运行 Memcheck 时程序运行速度要比
正常运行时慢 10-30 倍。
Memcheck 根据探测的问题类型返回具体错误。这些错误在 Valgrind 文档中有具体论述，文档位置为
/usr/share/doc/valgrind-version/valgrind_manual.pdf。
注：Memcheck 只能报告这些错误 — 它不能放置这些错误发生。如果您的程序采用一般会造成片段失败的
的方法访问内存，片段失败仍会发生。但 Memcheck 将在失败前记录出错信息。
Memcheck 提供可用来着重检查进程的命令行选项。有些可用的选项为：
--leak-check
启用后，Memcheck 会在客户端程序完成后搜索内存泄漏。其默认值为 summary，它输出找到的
泄漏数。其他可能的值为 yes 和 full，这两个选项都会给出每个泄漏的详细情况，且 no 会禁用
内存泄漏检查。
--undef-value-errors