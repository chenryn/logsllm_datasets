在这种情况下，您可以有一个或者多个不再使用的分区。下图显示了这种情况。
::: figure
[]{#assembly_getting-started-with-partitions_managing-file-systems.html#idm139716108339792}
**图 10.6. 有未使用分区的磁盘**
::: figure-contents
::: mediaobject
![未使用的分区](images/unused-partition.png)
:::
:::
:::
在上例中，第一个图表示带有未使用分区的磁盘，第二个图表示为 Linux
重新分配未使用的分区。
在这种情况下，您可以使用分配给未使用分区的空间。您必须删除分区，然后在其位置创建适当的
Linux 分区。您可以删除未使用的分区并在安装过程中手动创建新分区。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-file-systems.html#using-free-space-from-an-active-partition_strategies-for-repartitioning-a-disk}使用活跃分区中的空闲空间 {.title}
:::
这是最常见的情况。它也是最难以处理的，因为即使您有足够的可用空间，它也当前被分配给已在使用的分区。如果您购买了一台带有预安装软件的计算机，硬盘很可能有一个大型分区存放操作系统和数据。
除了向系统添加新硬盘驱动器外，您还可以从破坏性和非破坏性重新分区中选择。
::: section
::: titlepage
### []{#assembly_getting-started-with-partitions_managing-file-systems.html#destructive-repartitioning_using-free-space-from-an-active-partition}破坏性重新分区 {.title}
:::
这会删除分区并创建几个较小的分区。您必须进行完整备份，因为原始分区中的所有数据都会被破坏。[*创建两个备份，使用验证（如果您的备份软件中可用），并在删除分区前尝试从备份中读取数据*]{.emphasis}。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
如果在该分区上安装了操作系统,必须重新安装它才能使用该系统。请注意，一些与预安装操作系统一起销售的计算机可能不包括安装介质来重新安装原始操作系统。[*在销毁原始分区及其操作系统安装前*]{.emphasis}，您应该检查是否对您的系统适用。
:::
为现有操作系统创建一个更小的分区后，您可以重新安装软件，恢复您的数据并启动
Red Hat Enterprise Linux 安装。
::: figure
[]{#assembly_getting-started-with-partitions_managing-file-systems.html#idm139716119180416}
**图 10.7. 在磁盘上进行破坏性重新分区动作**
::: figure-contents
::: mediaobject
![dstrct reprt](images/dstrct-reprt.png)
:::
:::
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
原有分区中的数据将会丢失。
:::
:::
::: section
::: titlepage
### []{#assembly_getting-started-with-partitions_managing-file-systems.html#non-destructive-repartitioning_using-free-space-from-an-active-partition}非破坏性重新分区 {.title}
:::
通过非破坏性重新分区，您将执行一个程序，使大分区减小而不丢失该分区中存储的任何文件。这个方法通常是可靠的，但在大型驱动器上可能非常耗时。
非破坏性重新分区过程很简单，它由三个步骤组成：
::: orderedlist
1.  压缩和备份现存数据
2.  重新划分现存分区的大小
3.  创建新分区
:::
每个步骤都会详细介绍。
::: section
::: titlepage
#### []{#assembly_getting-started-with-partitions_managing-file-systems.html#compressing-existing-data_non-destructive-repartitioning}压缩现有数据 {.title}
:::
第一步要压缩现存分区上的数据。这样做的原因是重新排列数据，以最大化分区\"结尾\"的可用空间。
::: figure
[]{#assembly_getting-started-with-partitions_managing-file-systems.html#idm139716100253136}
**图 10.8. 磁盘压缩**
::: figure-contents
::: mediaobject
![compression](images/compression.png)
:::
:::
:::
在上例中，第一个图在压缩前代表磁盘，压缩后的第二个图表代表磁盘。
这一步骤至关重要。如果没有它，数据的位置可能会阻止分区的大小调整为所需的范围。请注意，有些数据无法移动。在这种情况下，它会严重限制新分区的大小，并且可能强制您以破坏性方式重新分区磁盘。
:::
::: section
::: titlepage
#### []{#assembly_getting-started-with-partitions_managing-file-systems.html#resizing-the-existing-partition_non-destructive-repartitioning}重新定义现有分区大小 {.title}
:::
下图显示了实际调整大小的流程。虽然重新定义大小操作的实际结果会有所不同，具体取决于所使用的软件，但在大多数情况下，新释放空间用于创建与原始分区相同的类型未格式化的分区。
::: figure
[]{#assembly_getting-started-with-partitions_managing-file-systems.html#idm139716095788992}
**图 10.9. 分区在磁盘上调整大小**
::: figure-contents
::: mediaobject
![部分调整大小](images/part-resize.png)
:::
:::
:::
在上例中，第一个图表示重新定义大小前的分区，调整大小后的第二个图表。
务必要了解重新定义软件大小对新释放空间有什么作用，以便您可以执行相应的步骤。在此处演示的情形中，最好删除新的
DOS 分区并创建适当的 Linux 分区或分区。
:::
::: section
::: titlepage
#### []{#assembly_getting-started-with-partitions_managing-file-systems.html#creating-new-partitions_non-destructive-repartitioning}创建新分区 {.title}
:::
如[重新定义现存分区大小](#assembly_getting-started-with-partitions_managing-file-systems.html#resizing-the-existing-partition_non-destructive-repartitioning "重新定义现有分区大小"){.link}
示例中所述，创建新分区可能也可能不是必需的。然而，除非重新分区软件支持安装
Linux 系统，您很可能需要删除在调整大小过程中创建的分区。
::: figure
[]{#assembly_getting-started-with-partitions_managing-file-systems.html#idm139716092026032}
**图 10.10. 带有最终分区配置的磁盘**
::: figure-contents
::: mediaobject
![nondestruct fin](images/nondestruct-fin.png)
:::
:::
:::
在上例中，第一个图表示配置前的磁盘，配置后是第二个图表。
:::
:::
:::
:::
:::
[]{#assembly_getting-started-with-xfs-managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_getting-started-with-xfs-managing-file-systems.html#assembly_getting-started-with-xfs-managing-file-systems}第 11 章 XFS 入门 {.title}
:::
这是如何创建和维护 XFS 文件系统的概述。
::: section
::: titlepage
# []{#assembly_getting-started-with-xfs-managing-file-systems.html#the-xfs-file-system_getting-started-with-xfs}XFS 文件系统 {.title}
:::
XFS 是一个高度可扩展、高性能、强大且成熟的 64
位日志文件系统，支持单一主机上非常大的文件和文件系统。它是 Red Hat
Enterprise Linux 8 中的默认文件系统。XFS 最初于 1990 年代由 SGI
早期开发，并在非常大型的服务器和存储阵列中运行有很长的历史记录。
XFS 的功能包括：
::: variablelist
[可靠性]{.term}
:   ::: itemizedlist
    -   元数据日志，通过记录系统重启和重新挂载文件系统时可以重播的文件系统操作，确保系统崩溃后文件系统的完整性
    -   广泛的运行时元数据一致性检查
    -   可扩展且快速修复工具
    -   配额日志。这可避免在崩溃后进行冗长的配额一致性检查。
    :::
[可伸缩性和性能]{.term}
:   ::: itemizedlist
    -   支持最多 1024 TiB 的文件系统大小
    -   支持大量并发操作的能力
    -   b-tree 索引，实现可用空间管理的可扩展性
    -   复杂的元数据读头算法
    -   流视频工作负载优化
    :::
[分配方案]{.term}
:   ::: itemizedlist
    -   基于扩展的分配
    -   条状化分配策略
    -   延迟分配
    -   空间预分配
    -   动态分配的内节点
    :::
[其他功能]{.term}
:   ::: itemizedlist
    -   基于 Reflink 的文件副本（Red Hat Enterprise Linux 8 中的新功能）
    -   严格集成备份和恢复工具
    -   在线清理
    -   在线文件系统增大
    -   全面的诊断功能
    -   扩展属性(`xattr`{.literal})。这使得系统能够关联每个文件几个额外的名称/值对。
    -   项目或目录配额。这允许对目录树的配额限制。
    -   小于秒的时间戳
    :::
:::
::: title
**性能特性**
:::
XFS 在具有企业工作负载的大型系统上具有高性能。大型系统是一个相对较高的
CPU 数量、多个 HBA 和连接到外部磁盘阵列的系统。XFS 在具有多线程并行 I/O
工作负载的较小系统上也表现良好。
XFS
对于单线程、元数据密集型工作负载的性能相对较低：例如，工作负载在单个线程中创建或删除大量小文件。
:::
::: section
::: titlepage
# []{#assembly_getting-started-with-xfs-managing-file-systems.html#assembly_creating-an-xfs-file-system-getting-started-with-xfs}创建 XFS 文件系统 {.title}
:::
作为系统管理员，您可以在块设备中创建 XFS
文件系统，使其可以存储文件和目录。
::: section
::: titlepage
## []{#assembly_getting-started-with-xfs-managing-file-systems.html#proc_creating-an-xfs-file-system-with-mkfs-xfs-creating-an-xfs-file-system}使用 mkfs.xfs 创建 XFS 文件系统 {.title}
:::
这个步骤描述了如何在块设备中创建 XFS 文件系统。
::: orderedlist
**流程**
1.  要创建文件系统，请执行以下操作：
    ::: itemizedlist
    -   如果该设备是常规分区、LVM 卷、MD
        卷、磁盘或者类似的设备，请使用以下命令：
        ``` screen
        # mkfs.xfs block-device
        ```
        ::: itemizedlist
        -   使用到块设备的路径替换
            [*[block-device]{.replaceable}*]{.emphasis}。例如：
            `/dev/sdb1`{.literal}、`/dev/disk/by-uuid/05e99ec8-def1-4a5e-8a9d-5945339ceb2a`{.literal}
            或 `/dev/my-volgroup/my-lv`{.literal}。
        -   般情况下，默认选项是常见用途的最佳选择。
        -   在包含现有文件系统的块设备中使用 `mkfs.xfs`{.literal}
            时，添加 `-f`{.literal} 选项来覆盖该文件系统。
        :::
    -   要在硬件 RAID
        设备中创建文件系统，检查系统是否正确检测到该设备的条状度：
        ::: itemizedlist
        -   如果分条地理测量信息正确，则不需要额外的选项。创建文件系统：
            ``` screen
            # mkfs.xfs block-device
            ```
        -   如果信息不正确，请使用 `-d`{.literal} 选项的 `su`{.literal}
            和 `sw 参数`{.literal} 手动指定条带几何参数。`su`{.literal}
            参数指定 RAID 块大小，`sw`{.literal} 参数指定 RAID
            设备中的数据磁盘数量。
            例如：
            ``` screen
            # mkfs.xfs -d su=64k,sw=4 /dev/sda3
            ```
        :::
    :::
2.  使用以下命令等待系统注册新设备节点：
    ``` screen
    # udevadm settle
    ```
:::
::: itemizedlist
**其它资源**
-   `mkfs.xfs(8)手册页`{.literal}.
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-xfs-managing-file-systems.html#creating-an-xfs-file-system-using-rhel-system-roles_creating-an-xfs-file-system}使用 RHEL 系统角色在块设备中创建 XFS 文件系统 {.title}
:::
这部分论述了如何使用 `存储`{.literal} 角色在多个目标机器上的块设备中创建
XFS 文件系统。
::: itemizedlist
**先决条件**
-   存在一个使用该 `存储`{.literal} 角色的 Ansible playbook。
    如需有关如何应用此 playbook 的信息，请参阅
    [应用角色](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/getting-started-with-system-administration_configuring-basic-system-settings#applying-a-role_con_intro-to-rhel-system-roles){.link}。
:::
::: section
::: titlepage