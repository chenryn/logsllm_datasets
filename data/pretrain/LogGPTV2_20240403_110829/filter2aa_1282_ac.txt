Figure 153 
Figure 154 
As we mentioned before, only the first 4KB of the file is encrypted. The encrypted content is 
written to the file using ZwWriteFile: 
Figure 155 
The BcryptGenRandom routine is utilized to generate 32 random bytes: 
Figure 156 
www.LIFARS.com |  42 
The buffer generated above is transformed using the Curve25519 wrapper and then copied to a 
new buffer together with the session ECC public key (see figure 157). Based on the 
implementation of the Curve25519 algorithm, it is used to generate a shared secret (32-byte 
value). 
Figure 157 
The AES128 key and IV (initialization vector) are encrypted using Curve25519 with the session ECC 
public key, as highlighted below: 
Figure 158 
Each encrypted file has a 512-byte footer that will be explained in detail. It’s written to the 
encrypted file by calling the ZwWriteFile API: 
Figure 159 
NtSetInformationFile is used to append the “.lockbit” extension to encrypted files (0xA = 
FileRenameInformation): 
Figure 160 
As we can see below, the files are partially encrypted, which is enough to make them useless 
without decrypting them: 
www.LIFARS.com |  43 
Figure 161 
Out of the 512 bytes from the footer, we can highlight the following bytes: 
• 
last 8 bytes - first 8 bytes from the session ECC public key 
• 
previous 8 bytes - hard-coded bytes that correspond to this particular LockBit sample 
• 
112 bytes - session ECC private key that was encrypted using the Master ECC public key 
(also stored in the Private registry value) 
• 
96 bytes – AES key + IV that were encrypted using the session ECC public key 
Figure 162 
www.LIFARS.com |  44 
We can observe the icon of the encrypted files in figure 163: 
Figure 163 
We continue with the analysis of the main thread. 
The binary sends the "Cleanup" message to the hidden window via a function call to 
SendMessageA.  
Printing ransom notes 
The process enumerates the local printers using the EnumPrintersW function (0x2 = 
PRINTER_ENUM_LOCAL): 
Figure 164 
The ransomware avoids the following values that don’t correspond to physical printers: "Microsoft 
XPS Document Writer" and "Microsoft Print to PDF". 
The OpenPrinterW routine is utilized to retrieve a handle to the printer: 
Figure 165 
StartDocPrinterW is used to notify the print spooler that a document is to be spooled for printing: 
Figure 166 
www.LIFARS.com |  45 
The StartPagePrinter API notifies the spooler that a page will be printed on the printer: 
Figure 167 
The ransom note is printed via a function call to WritePrinter: 
Figure 168 
The EndPagePrinter routine notifies the print spooler that the application is at the end of a page 
in the print job: 
Figure 169 
The printing operation is effected 10000 times, as displayed in figure 170: 
Figure 170 
The print job operation is completed by calling the EndDocPrinter and ClosePrinter APIs.  
LockBit continues the printer enumeration by searching for network printers in the computer’s 
domain, network printers and print servers in the computer’s domain, and the list of printers to 
which the user has made previous connections. These function calls can be seen below (0x40 = 
PRINTER_ENUM_NETWORK, 
0x10 
= 
PRINTER_ENUM_REMOTE, 
0x4 
= 
PRINTER_ENUM_CONNECTIONS): 
www.LIFARS.com |  46 
Figure 171 
Figure 172 
Figure 173 
LockBit Wallpaper Setup 
The ransomware sends the "[+] Setup wallpaper" message to the hidden window.  
The GdiplusStartup API is utilized to initialize Windows GDI+: 
Figure 174 
The file retrieves the width of the screen of the primary display monitor via a function call to 
GetSystemMetrics: 
www.LIFARS.com |  47 
Figure 175 
The malware allocates memory for Windows GDI+ objects using GdipAlloc: 
Figure 176 
A 
Bitmap 
object 
is 
created 
based 
on 
an 
array 
of 
bytes 
by 
calling 
the 
GdipCreateBitmapFromScan0 function (0x26200a = PixelFormat32bppARGB): 
Figure 177 
CreateStreamOnHGlobal is utilized to create a stream object: 
Figure 178 
The 
binary 
creates 
a 
Bitmap 
object 
based 
on 
the 
above 
stream 
using 
GdipCreateBitmapFromStream: 
Figure 179 
A new private font collection is created via a call to GdipNewPrivateFontCollection: 
Figure 180 
The malicious process adds a memory font to the private font collection: 
www.LIFARS.com |  48 
Figure 181 
The GdipGetImageGraphicsContext function is used to create a Graphics object that is associated 
with an image object: 
Figure 182 
The malware creates multiple SolidBrush objects based on different colors using the 
GdipCreateSolidFill routine: 
Figure 183 
All SolidBrush objects are used to fill the interior of multiple rectangles using GdipFillRectangle. 
The GdipSetPageUnit API is utilized to set the unit of measure for a Graphics object: 
Figure 184 
GdipCreatePen1 is used to create a Pen object: 
Figure 185 
LockBit creates a GraphicsPath object via a function call to GdipCreatePath: 
www.LIFARS.com |  49 
Figure 186 
The process performs multiple GdipAddPathArcI calls in order to add elliptical arcs to the current 
figure of the path: 
Figure 187 
The ransomware performs function calls such as GdipFillPath and GdipDrawPath in order to 
transform the path. It creates a FontFamily object based on the Proxima Nova Font family: 
Figure 188 
A Font object is created based on the above object via GdipCreateFont: 
Figure 189 
The GdipDrawImageRect function is utilized to draw an image: 
Figure 190 
The malware measures the extent of the strings that will appear in the wallpaper by calling the 
GdipMeasureString API: 
www.LIFARS.com |  50 
Figure 191 
The process draws the strings based on a font, a layout rectangle, and a format via a call to 
GdipDrawString: 
Figure 192 
The file extracts the path of the %TEMP% directory: 
Figure 193 
GetTempFileNameW is utilized to create a temporary file: 
Figure 194 
The GdipGetImageEncoders function is used to retrieve an array of ImageCodecInfo objects 
containing information about the available image encoders: 
Figure 195 
www.LIFARS.com |  51 
The image constructed in memory is saved to the disk in the temporary file created earlier: 
Figure 196 
Figure 197 shows the wallpaper that will be set: 
Figure 197 
The RegOpenKeyA API is utilized to open the "Control Panel\Desktop" registry key (0x80000001 
= HKEY_CURRENT_USER): 
Figure 198 
The “WallpaperStyle” registry value is set to 2, and the “TileWallpaper” value is set to 0 by calling 
the RegSetValueExA routine (0x1 = REG_SZ): 
Figure 199 
www.LIFARS.com |  52 
Figure 200 
The Desktop wallpaper is set by calling the SystemParametersInfoW function (0x14 = 
SPI_SETDESKWALLPAPER, 0x3 = SPIF_UPDATEINIFILE | SPIF_SENDCHANGE): 
Figure 201 
As we can see in the next picture, the registry values were successfully modified: 
Figure 202 
Extract and save the HTA ransom note to Desktop 
LockBit sends the "[+] Extract *.hta file" message to the hidden window. The HTA ransom note is 
stored in an encrypted form in the executable. It is decrypted using the XOR operator (key = 0x38).  
The malicious binary creates a file called “LockBit_Ransomware.hta” on the user Desktop 
(0x40000000 = GENERIC_WRITE, 0x2 = CREATE_ALWAYS, 0x80 = FILE_ATTRIBUTE_NORMAL): 
Figure 203 
www.LIFARS.com |  53 
The WriteFile API is used to populate the HTA file: 
Figure 204 
The ZwCreateKey API is utilized to open the “HKCR\.lockbit” registry key (0x2000000 = 
MAXIMUM_ALLOWED): 
Figure 205 
The (Default) registry value is set to "LockBit" by calling the ZwSetValueKey function (0x1 = 
REG_SZ): 
Figure 206 
The malware creates the “HKCR\Lockbit” registry key by calling the ZwCreateKey API (0x2000000 
= MAXIMUM_ALLOWED): 
www.LIFARS.com |  54 
Figure 207 
The 
DefaultIcon 
registry 
value 
is 
set 
to 
“C:\windows\SysWow64\2ED873.ico” 
using  
ZwSetValueKey (0x1 = REG_SZ): 
Figure 208 
The process creates the following registry subkeys: "shell", "Open", and "Command". The (Default) 
value is set to "LockBit Class" using ZwSetValueKey (0x1 = REG_SZ): 
Figure 209 
The (Default) registry value under the Command key is set to open the HTA ransom note: 
Figure 210 
www.LIFARS.com |  55 
Figure 211 
The NtOpenKey routine is utilized to open the “HKCR\.hta” registry key (0x2000000 = 
MAXIMUM_ALLOWED): 
Figure 212 
The malicious binary retrieves the (Default) registry value via a function call to NtQueryValueKey 
(0x2 = KeyValuePartialInformation): 
Figure 213 
NtOpenKey is used to open the “HKCR\htafile” key (0x2000000 = MAXIMUM_ALLOWED): 
Figure 214 
The DefaultIcon registry value is set to “C:\windows\SysWow64\2ED873.ico” (0x1 = REG_SZ): 
www.LIFARS.com |  56 
Figure 215 
The 
file 
opens 
the 
Run 
registry 
key 
using 
RegCreateKeyExW 
(0x80000001 
= 
HKEY_CURRENT_USER, 0x2001F = KEY_READ | KEY_WRITE): 
Figure 216 
The ransomware creates a value called "{2C5F9FCC-F266-43F6-BFD7-838DAE269E11}", which 
contains the path to the HTA note (0x1 = REG_SZ): 
Figure 217 
ShellExecuteW is utilized to open and display the above ransom note: 
Figure 218 
www.LIFARS.com |  57 
Figure 219 
LockBit deletes the registry value used for persistence named "{9FD872D4-E5E5-DDC5-399C-
396785BDC975}". We believe this value was created to resume the encryption process in the case 
of a reboot: 
Figure 220 
The executable sends the "[+] Removed autorun key" message to the hidden window using 
SendMessageA. There is a call to ZwSetIoCompletion afterward: 
Figure 221 
The malware deletes itself when the system restarts by calling the MoveFileExW function (0x4 = 
MOVEFILE_DELAY_UNTIL_REBOOT): 
www.LIFARS.com |  58 
Figure 222 
There is also a second process that will handle the executable deletion: 
"cmd.exe /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 
\"C:\\Users\\\\Desktop\\lockbit.exe\" & Del /f /q \"C:\\Users\\\\Desktop\\lockbit.exe\"" 
By pressing Shift+F1, we can access the hidden window: 
Figure 223 
Figure 224 
www.LIFARS.com |  59 
Indicators of Compromise 
Registry Keys 
Key: HKEY_CLASSES_ROOT\Lockbit\shell\Open\Command 
Data: "C:\Windows\system32\mshta.exe" "C:\Users\\Desktop\LockBit_Ransomware.hta" 
Key: HKEY_CLASSES_ROOT\Lockbit\DefaultIcon 
Key: HKEY_CLASSES_ROOT\.lockbit\DefaultIcon 
Key: HKEY_CLASSES_ROOT\htafile\DefaultIcon 
Data: C:\windows\SysWow64\2ED873.ico 
Key: SOFTWARE\Microsoft\Windows\CurrentVersion\Run\{2C5F9FCC-F266-43F6-BFD7-
838DAE269E11} 
Data: C:\Users\\Desktop\LockBit_Ransomware.hta 
Key: SOFTWARE\Microsoft\Windows\CurrentVersion\Run\{9FD872D4-E5E5-DDC5-399C-
396785BDC975} 
Data:  
Key: HKCU\Software\2ED873D4E5389C\Private 
Key: HKCU\Software\2ED873D4E5389C\Public 
Key: HKCU\Control Panel\Desktop 
Data: Wallpaper = %AppData%\Local\Temp\.tmp.bmp 
Data: TileWallpaper = 0 
Data: WallpaperStyle = 2 
Files Created 
C:\Users\\Desktop\LockBit_Ransomware.hta 
C:\windows\SysWow64\2ED873.ico 
C:\Users\\AppData\Local\Temp\.tmp.bmp 
C:\2ED873D4.lock (or any drive) 
Processes spawned 
cmd.exe /c vssadmin Delete Shadows /All /Quiet 
cmd.exe /c bcdedit /set {default} recoveryenabled No 
www.LIFARS.com |  60 
cmd.exe /c bcdedit /set {default} bootstatuspolicy ignoreallfailures 
cmd.exe /c wmic SHADOWCOPY /nointeractive 
cmd.exe /c wevtutil cl security 
cmd.exe /c wevtutil cl system 
cmd.exe /c wevtutil cl application 
cmd.exe /c vssadmin delete shadows /all /quiet & wmic shadowcopy delete & bcdedit /set 
{default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no 
cmd.exe /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 
\"C:\Users\\Desktop\lockbit.exe\" & Del /f /q \"C:\Users\\Desktop\lockbit.exe\" 
Mutex 
\BaseNamedObjects\{3FE573D4-3FE5-DD38-399C-886767BD8875} 
LockBit 2.0 Extension 
.lockbit 
LockBit 2.0 Ransom Note 
Restore-My-Files.txt 
LockBit_Ransomware.hta 
www.LIFARS.com |  61 
Appendix 
List of processes to be killed 
wxServer  wxServerView  sqlmangr  RAgui  supervise  Culture  Defwatch  winword  QBW32  
QBDBMgr  qbupdate  axlbridge  httpd  fdlauncher  MsDtSrvr  java  360se  360doctor  wdswfsafe  
fdhost  GDscan  ZhuDongFangYu  QBDBMgrN  mysqld  AutodeskDesktopApp  acwebbrowser  
Creative Cloud  Adobe Desktop Service  CoreSync  Adobe CEF  Helper  node  AdobeIPCBroker  
sync-taskbar  sync-worker  InputPersonalization  AdobeCollabSync  BrCtrlCntr  BrCcUxSys  
SimplyConnectionManager  Simply.SystemTrayIcon  fbguard  fbserver  ONENOTEM  wsa_service  
koaly-exp-engine-service  TeamViewer_Service  TeamViewer  tv_w32  tv_x64  TitanV  Ssms  
notepad  RdrCEF  sam  oracle  ocssd  dbsnmp  synctime  agntsvc  isqlplussvc  xfssvccon  
mydesktopservice  ocautoupds  encsvc  tbirdconfig  mydesktopqos  ocomm  dbeng50  
sqbcoreservice  excel  infopath  msaccess  mspub  onenote  outlook  powerpnt  steam  thebat  
thunderbird  visio  wordpad  bedbh  vxmon  benetns  bengien  pvlsvr  beserver  raw_agent_svc  
vsnapvss  CagService  DellSystemDetect  EnterpriseClient  ProcessHacker  Procexp64  Procexp  
GlassWire  GWCtlSrv  WireShark  dumpcap  j0gnjko1  Autoruns  Autoruns64  Autoruns64a  
Autorunsc  Autorunsc64  Autorunsc64a  Sysmon  Sysmon64  procexp64a  procmon  procmon64  
procmon64a  ADExplorer  ADExplorer64  ADExplorer64a  tcpview  tcpview64  tcpview64a  avz  
tdsskiller  RaccineElevatedCfg  RaccineSettings  Raccine_x86  Raccine  Sqlservr  RTVscan  
sqlbrowser  tomcat6  QBIDPService  notepad++  SystemExplorer  SystemExplorerService  
SystemExplorerService64  Totalcmd  Totalcmd64  VeeamDeploymentSvc 
List of services to be stopped 
wrapper  DefWatch  ccEvtMgr  ccSetMgr  SavRoam  Sqlservr  sqlagent  sqladhlp  Culserver  
RTVscan  sqlbrowser  SQLADHLP  QBIDPService  Intuit.QuickBooks.FCS  QBCFMonitorService   
msmdsrv  tomcat6  zhudongfangyu  vmware-usbarbitator64  vmware-converter  dbsrv12  
dbeng8  MSSQL$MICROSOFT##WID  MSSQL$VEEAMSQL2012  SQLAgent$VEEAMSQL2012  
SQLBrowser 
SQLWriter 
FishbowlMySQL 
MSSQL$MICROSOFT##WID 
MySQL57  
MSSQL$KAV_CS_ADMIN_KIT 
MSSQLServerADHelper100 
SQLAgent$KAV_CS_ADMIN_KIT  
msftesql-Exchange 
MSSQL$MICROSOFT##SSEE 
MSSQL$SBSMONITORING  
MSSQL$SHAREPOINT 
MSSQLFDLauncher$SBSMONITORING  
MSSQLFDLauncher$SHAREPOINT  SQLAgent$SBSMONITORING  SQLAgent$SHAREPOINT  
QBFCService  QBVSS  YooBackup  YooIT  vss  sql  svc$  MSSQL  MSSQL$  memtas  mepocs  sophos  
veeam  backup  bedbg  PDVFSService  BackupExecVSSProvider  BackupExecAgentAccelerator  
BackupExecAgentBrowser 
BackupExecDiveciMediaService 
BackupExecJobEngine  
BackupExecManagementService 
BackupExecRPCService 
MVArmor 
MVarmor64  
stc_raw_agent  VSNAPVSS  VeeamTransportSvc  VeeamDeploymentService  VeeamNFSSvc  
AcronisAgent  ARSM  AcrSch2Svc  CASAD2DWebSvc  CAARCUpdateSvc  WSBExchange  
MSExchange  MSExchange$