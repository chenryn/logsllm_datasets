### Encryption Process

**Figures 153-154:**
As previously mentioned, only the first 4KB of the file is encrypted. The encrypted content is written to the file using the `ZwWriteFile` function.

**Figure 155:**
The `BcryptGenRandom` routine is used to generate 32 random bytes.

**Figure 156:**
The buffer generated by `BcryptGenRandom` is transformed using the Curve25519 wrapper and then copied to a new buffer along with the session ECC public key (see Figure 157). Based on the implementation of the Curve25519 algorithm, this process generates a shared secret (a 32-byte value).

**Figure 157:**
The AES128 key and IV (initialization vector) are encrypted using Curve25519 with the session ECC public key, as highlighted below.

**Figure 158:**
Each encrypted file has a 512-byte footer, which will be explained in detail. This footer is written to the encrypted file by calling the `ZwWriteFile` API.

**Figure 159:**
The `NtSetInformationFile` function is used to append the “.lockbit” extension to encrypted files (0xA = FileRenameInformation).

**Figure 160:**
As shown below, the files are partially encrypted, which is sufficient to render them unusable without decryption.

**Figure 161:**
Out of the 512 bytes from the footer, the following bytes are notable:
- Last 8 bytes: First 8 bytes from the session ECC public key
- Previous 8 bytes: Hard-coded bytes specific to this particular LockBit sample
- 112 bytes: Session ECC private key, encrypted using the Master ECC public key (also stored in the Private registry value)
- 96 bytes: AES key + IV, encrypted using the session ECC public key

**Figure 162:**
The icon of the encrypted files can be observed in Figure 163.

**Figure 163:**
We continue with the analysis of the main thread. The binary sends the "Cleanup" message to the hidden window via a function call to `SendMessageA`.

### Printing Ransom Notes

**Figure 164:**
The process enumerates the local printers using the `EnumPrintersW` function (0x2 = PRINTER_ENUM_LOCAL).

**Figure 165:**
The ransomware avoids the following values that do not correspond to physical printers: "Microsoft XPS Document Writer" and "Microsoft Print to PDF".

**Figure 166:**
The `OpenPrinterW` routine is used to retrieve a handle to the printer.

**Figure 167:**
The `StartDocPrinterW` function notifies the print spooler that a document is to be spooled for printing.

**Figure 168:**
The `StartPagePrinter` API informs the spooler that a page will be printed on the printer.

**Figure 169:**
The ransom note is printed via a function call to `WritePrinter`.

**Figure 170:**
The `EndPagePrinter` routine notifies the print spooler that the application is at the end of a page in the print job.

**Figure 171:**
The printing operation is repeated 10,000 times, as displayed in Figure 170.

**Figure 172-173:**
The print job operation is completed by calling the `EndDocPrinter` and `ClosePrinter` APIs. LockBit continues the printer enumeration by searching for network printers in the computer’s domain, network printers and print servers in the computer’s domain, and the list of printers to which the user has made previous connections. These function calls can be seen below (0x40 = PRINTER_ENUM_NETWORK, 0x10 = PRINTER_ENUM_REMOTE, 0x4 = PRINTER_ENUM_CONNECTIONS).

### LockBit Wallpaper Setup

**Figure 174:**
The ransomware sends the "[+] Setup wallpaper" message to the hidden window. The `GdiplusStartup` API is utilized to initialize Windows GDI+.

**Figure 175:**
The file retrieves the width of the screen of the primary display monitor via a function call to `GetSystemMetrics`.

**Figure 176:**
The malware allocates memory for Windows GDI+ objects using `GdipAlloc`.

**Figure 177:**
A `Bitmap` object is created based on an array of bytes by calling the `GdipCreateBitmapFromScan0` function (0x26200a = PixelFormat32bppARGB).

**Figure 178:**
The `CreateStreamOnHGlobal` function is used to create a stream object.

**Figure 179:**
The binary creates a `Bitmap` object based on the above stream using `GdipCreateBitmapFromStream`.

**Figure 180:**
A new private font collection is created via a call to `GdipNewPrivateFontCollection`.

**Figure 181:**
The malicious process adds a memory font to the private font collection.

**Figure 182:**
The `GdipGetImageGraphicsContext` function is used to create a `Graphics` object associated with an image object.

**Figure 183:**
The malware creates multiple `SolidBrush` objects based on different colors using the `GdipCreateSolidFill` routine.

**Figure 184:**
All `SolidBrush` objects are used to fill the interior of multiple rectangles using `GdipFillRectangle`. The `GdipSetPageUnit` API sets the unit of measure for a `Graphics` object.

**Figure 185:**
The `GdipCreatePen1` function is used to create a `Pen` object.

**Figure 186:**
LockBit creates a `GraphicsPath` object via a function call to `GdipCreatePath`.

**Figure 187:**
The process performs multiple `GdipAddPathArcI` calls to add elliptical arcs to the current figure of the path.

**Figure 188:**
The ransomware uses functions such as `GdipFillPath` and `GdipDrawPath` to transform the path. It creates a `FontFamily` object based on the Proxima Nova Font family.

**Figure 189:**
A `Font` object is created based on the above object via `GdipCreateFont`.

**Figure 190:**
The `GdipDrawImageRect` function is used to draw an image.

**Figure 191:**
The malware measures the extent of the strings that will appear in the wallpaper by calling the `GdipMeasureString` API.

**Figure 192:**
The process draws the strings based on a font, a layout rectangle, and a format via a call to `GdipDrawString`.

**Figure 193:**
The file extracts the path of the `%TEMP%` directory.

**Figure 194:**
The `GetTempFileNameW` function is used to create a temporary file.

**Figure 195:**
The `GdipGetImageEncoders` function retrieves an array of `ImageCodecInfo` objects containing information about the available image encoders.

**Figure 196:**
The image constructed in memory is saved to the disk in the temporary file created earlier.

**Figure 197:**
Figure 197 shows the wallpaper that will be set.

**Figure 198:**
The `RegOpenKeyA` API is used to open the "Control Panel\Desktop" registry key (0x80000001 = HKEY_CURRENT_USER).

**Figure 199:**
The “WallpaperStyle” registry value is set to 2, and the “TileWallpaper” value is set to 0 by calling the `RegSetValueExA` routine (0x1 = REG_SZ).

**Figure 200:**
The Desktop wallpaper is set by calling the `SystemParametersInfoW` function (0x14 = SPI_SETDESKWALLPAPER, 0x3 = SPIF_UPDATEINIFILE | SPIF_SENDCHANGE).

**Figure 201-202:**
As we can see in the next picture, the registry values were successfully modified.

### Extract and Save the HTA Ransom Note to Desktop

**Figure 203:**
LockBit sends the "[+] Extract *.hta file" message to the hidden window. The HTA ransom note is stored in an encrypted form in the executable and is decrypted using the XOR operator (key = 0x38).

**Figure 204:**
The malicious binary creates a file called “LockBit_Ransomware.hta” on the user's desktop (0x40000000 = GENERIC_WRITE, 0x2 = CREATE_ALWAYS, 0x80 = FILE_ATTRIBUTE_NORMAL).

**Figure 205:**
The `WriteFile` API is used to populate the HTA file.

**Figure 206:**
The `ZwCreateKey` API is used to open the “HKCR\.lockbit” registry key (0x2000000 = MAXIMUM_ALLOWED).

**Figure 207:**
The (Default) registry value is set to "LockBit" by calling the `ZwSetValueKey` function (0x1 = REG_SZ).

**Figure 208:**
The malware creates the “HKCR\Lockbit” registry key by calling the `ZwCreateKey` API (0x2000000 = MAXIMUM_ALLOWED).

**Figure 209:**
The `DefaultIcon` registry value is set to “C:\windows\SysWow64\2ED873.ico” using `ZwSetValueKey` (0x1 = REG_SZ).

**Figure 210-211:**
The process creates the following registry subkeys: "shell", "Open", and "Command". The (Default) value is set to "LockBit Class" using `ZwSetValueKey` (0x1 = REG_SZ).

**Figure 212:**
The (Default) registry value under the Command key is set to open the HTA ransom note.

**Figure 213:**
The `NtOpenKey` routine is used to open the “HKCR\.hta” registry key (0x2000000 = MAXIMUM_ALLOWED).

**Figure 214:**
The malicious binary retrieves the (Default) registry value via a function call to `NtQueryValueKey` (0x2 = KeyValuePartialInformation).

**Figure 215:**
The `NtOpenKey` function is used to open the “HKCR\htafile” key (0x2000000 = MAXIMUM_ALLOWED).

**Figure 216:**
The `DefaultIcon` registry value is set to “C:\windows\SysWow64\2ED873.ico” (0x1 = REG_SZ).

**Figure 217:**
The file opens the Run registry key using `RegCreateKeyExW` (0x80000001 = HKEY_CURRENT_USER, 0x2001F = KEY_READ | KEY_WRITE).

**Figure 218:**
The ransomware creates a value called "{2C5F9FCC-F266-43F6-BFD7-838DAE269E11}", which contains the path to the HTA note (0x1 = REG_SZ).

**Figure 219:**
The `ShellExecuteW` function is used to open and display the above ransom note.

**Figure 220:**
LockBit deletes the registry value used for persistence named "{9FD872D4-E5E5-DDC5-399C-396785BDC975}". We believe this value was created to resume the encryption process in the case of a reboot.

**Figure 221:**
The executable sends the "[+] Removed autorun key" message to the hidden window using `SendMessageA`. There is a call to `ZwSetIoCompletion` afterward.

**Figure 222:**
The malware deletes itself when the system restarts by calling the `MoveFileExW` function (0x4 = MOVEFILE_DELAY_UNTIL_REBOOT).

**Figure 223-224:**
There is also a second process that will handle the executable deletion:
```
cmd.exe /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 "C:\\Users\\<username>\\Desktop\\lockbit.exe" & Del /f /q "C:\\Users\\<username>\\Desktop\\lockbit.exe"
```
By pressing Shift+F1, we can access the hidden window.

### Indicators of Compromise

**Registry Keys:**
- Key: HKEY_CLASSES_ROOT\Lockbit\shell\Open\Command
  - Data: "C:\Windows\system32\mshta.exe" "C:\Users\<username>\Desktop\LockBit_Ransomware.hta"
- Key: HKEY_CLASSES_ROOT\Lockbit\DefaultIcon
- Key: HKEY_CLASSES_ROOT\.lockbit\DefaultIcon
- Key: HKEY_CLASSES_ROOT\htafile\DefaultIcon
  - Data: C:\windows\SysWow64\2ED873.ico
- Key: SOFTWARE\Microsoft\Windows\CurrentVersion\Run\{2C5F9FCC-F266-43F6-BFD7-838DAE269E11}
  - Data: C:\Users\<username>\Desktop\LockBit_Ransomware.hta
- Key: SOFTWARE\Microsoft\Windows\CurrentVersion\Run\{9FD872D4-E5E5-DDC5-399C-396785BDC975}
  - Data: 
- Key: HKCU\Software\2ED873D4E5389C\Private
- Key: HKCU\Software\2ED873D4E5389C\Public
- Key: HKCU\Control Panel\Desktop
  - Data: Wallpaper = %AppData%\Local\Temp\.tmp.bmp
  - Data: TileWallpaper = 0
  - Data: WallpaperStyle = 2

**Files Created:**
- C:\Users\<username>\Desktop\LockBit_Ransomware.hta
- C:\windows\SysWow64\2ED873.ico
- C:\Users\<username>\AppData\Local\Temp\.tmp.bmp
- C:\2ED873D4.lock (or any drive)

**Processes Spawned:**
- cmd.exe /c vssadmin Delete Shadows /All /Quiet
- cmd.exe /c bcdedit /set {default} recoveryenabled No
- cmd.exe /c bcdedit /set {default} bootstatuspolicy ignoreallfailures
- cmd.exe /c wmic SHADOWCOPY /nointeractive
- cmd.exe /c wevtutil cl security
- cmd.exe /c wevtutil cl system
- cmd.exe /c wevtutil cl application
- cmd.exe /c vssadmin delete shadows /all /quiet & wmic shadowcopy delete & bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no
- cmd.exe /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 "C:\Users\<username>\Desktop\lockbit.exe" & Del /f /q "C:\Users\<username>\Desktop\lockbit.exe"

**Mutex:**
- \BaseNamedObjects\{3FE573D4-3FE5-DD38-399C-886767BD8875}

**LockBit 2.0 Extension:**
- .lockbit

**LockBit 2.0 Ransom Note:**
- Restore-My-Files.txt
- LockBit_Ransomware.hta

### Appendix

**List of Processes to Be Killed:**
- wxServer
- wxServerView
- sqlmangr
- RAgui
- supervise
- Culture
- Defwatch
- winword
- QBW32
- QBDBMgr
- qbupdate
- axlbridge
- httpd
- fdlauncher
- MsDtSrvr
- java
- 360se
- 360doctor
- wdswfsafe
- fdhost
- GDscan
- ZhuDongFangYu
- QBDBMgrN
- mysqld
- AutodeskDesktopApp
- acwebbrowser
- Creative Cloud
- Adobe Desktop Service
- CoreSync
- Adobe CEF Helper
- node
- AdobeIPCBroker
- sync-taskbar
- sync-worker
- InputPersonalization
- AdobeCollabSync
- BrCtrlCntr
- BrCcUxSys
- SimplyConnectionManager
- Simply.SystemTrayIcon
- fbguard
- fbserver
- ONENOTEM
- wsa_service
- koaly-exp-engine-service
- TeamViewer_Service
- TeamViewer
- tv_w32
- tv_x64
- TitanV
- Ssms
- notepad
- RdrCEF
- sam
- oracle
- ocssd
- dbsnmp
- synctime
- agntsvc
- isqlplussvc
- xfssvccon
- mydesktopservice
- ocautoupds
- encsvc
- tbirdconfig
- mydesktopqos
- ocomm
- dbeng50
- sqbcoreservice
- excel
- infopath
- msaccess
- mspub
- onenote
- outlook
- powerpnt
- steam
- thebat
- thunderbird
- visio
- wordpad
- bedbh
- vxmon
- benetns
- bengien
- pvlsvr
- beserver
- raw_agent_svc
- vsnapvss
- CagService
- DellSystemDetect
- EnterpriseClient
- ProcessHacker
- Procexp64
- Procexp
- GlassWire
- GWCtlSrv
- WireShark
- dumpcap
- j0gnjko1
- Autoruns
- Autoruns64
- Autoruns64a
- Autorunsc
- Autorunsc64
- Autorunsc64a
- Sysmon
- Sysmon64
- procexp64a
- procmon
- procmon64
- procmon64a
- ADExplorer
- ADExplorer64
- ADExplorer64a
- tcpview
- tcpview64
- tcpview64a
- avz
- tdsskiller
- RaccineElevatedCfg
- RaccineSettings
- Raccine_x86
- Raccine
- Sqlservr
- RTVscan
- sqlbrowser
- tomcat6
- QBIDPService
- notepad++
- SystemExplorer
- SystemExplorerService
- SystemExplorerService64
- Totalcmd
- Totalcmd64
- VeeamDeploymentSvc

**List of Services to Be Stopped:**
- wrapper
- DefWatch
- ccEvtMgr
- ccSetMgr
- SavRoam
- Sqlservr
- sqlagent
- sqladhlp
- Culserver
- RTVscan
- sqlbrowser
- SQLADHLP
- QBIDPService
- Intuit.QuickBooks.FCS
- QBCFMonitorService
- msmdsrv
- tomcat6
- zhudongfangyu
- vmware-usbarbitator64
- vmware-converter
- dbsrv12
- dbeng8
- MSSQL$MICROSOFT##WID
- MSSQL$VEEAMSQL2012
- SQLAgent$VEEAMSQL2012
- SQLBrowser
- SQLWriter
- FishbowlMySQL
- MSSQL$MICROSOFT##WID
- MySQL57
- MSSQL$KAV_CS_ADMIN_KIT
- MSSQLServerADHelper100
- SQLAgent$KAV_CS_ADMIN_KIT
- msftesql-Exchange
- MSSQL$MICROSOFT##SSEE
- MSSQL$SBSMONITORING
- MSSQL$SHAREPOINT
- MSSQLFDLauncher$SBSMONITORING
- MSSQLFDLauncher$SHAREPOINT
- SQLAgent$SBSMONITORING
- SQLAgent$SHAREPOINT
- QBFCService
- QBVSS
- YooBackup
- YooIT
- vss
- sql
- svc$
- MSSQL
- MSSQL$
- memtas
- mepocs
- sophos
- veeam
- backup
- bedbg
- PDVFSService
- BackupExecVSSProvider
- BackupExecAgentAccelerator
- BackupExecAgentBrowser
- BackupExecDiveciMediaService
- BackupExecJobEngine
- BackupExecManagementService
- BackupExecRPCService
- MVArmor
- MVarmor64
- stc_raw_agent
- VSNAPVSS
- VeeamTransportSvc
- VeeamDeploymentService
- VeeamNFSSvc
- AcronisAgent
- ARSM
- AcrSch2Svc
- CASAD2DWebSvc
- CAARCUpdateSvc
- WSBExchange
- MSExchange
- MSExchange$

---

This version of the text is more structured and professional, with clear headings and a logical flow of information.