the design of a covert channel and the potential restrictions
among different types of riders and carriers. Since it is very
difﬁcult, if not impossible, to enumerate all possible composite
covert channels and compute the size of their Ψ (i.e., |Ψ|), we
apply the addition principle and the multiplication principle
in Enumerative Combinatorics [24] to count the total number
of arrangements in a composite covert channel:
i=1
TLi .
1) Addition principle If each ψ in a composite covert
channel relies on only one L, the total number of its
arrangements is the sum of the number of arrangements
provided by each L: |Ψ| = Pk
2) Multiplication principle If each ψ in a composite
covert channel depends on all Ls, the total number of
arrangements is the product of the number of arrange-
ments offered by each L: |Ψ| = Qk
Generally the multiplication principle can result in higher
capacity than the addition principle. In practice, both principles
may be used because some restrictions may force a ψ to have
some but not all Ls. Based on the multiplication principle, we
propose in Section III a cross-layer covert channel, named
WebLeaks, which exploits the information in both HTTP
messages and TCP packets.
TLi .
i=1
E. Encoding and decoding procedures
To use the nine methods, the encoder and decoder must
pre-agree on the riders, the carriers, R, and a codebook for
encoding/decoding. Since it is not always feasible to keep a
large codebook due to storage and security issues, we propose
efﬁcient encoding and decoding procedures to replace the
codebook. The basic idea behind the encoding algorithms is
to enumerate all carrier-rider arrangements and then index
them consecutively. In the ﬁeld of combinatorics, this index
is known as rank and the “encoding” algorithms as unrank
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:32:51 UTC from IEEE Xplore.  Restrictions apply. 
476¾A:   The rank of an arrangement
¾R:   The number of riders
¾m:  The index of a method 
A,R,m
I,Val=GetNumCar(A,R,m)
No
IsRidDis(m)
Yes
No
1
IsCarDis(m)
Λ=UkIP(Val,R,I)
End
Yes
IsCarSeq(m)
Yes
2
Π=UkSP(Val,R,I)
No
No
No
IsCarDis(m)
Yes
Yes
Θ=UkCm(Val,R-1,I-1)
U,V=SplitVal(Val,7)
IsCarSeq(m)
No
Yes
IsRidSeq(m)
Yes
IsCarDis(m)
No
U,V=SplitVal(Val,3)
No
Yes
IsCarSeq(m)
4
ΓI=UkPm(U,I)
U,V=SplitVal(Val,5)
U1,U2,V=SplitVal(Val,8)
U1,U2,V=SplitVal(Val,9)
ΓR=UkPm(U×I!,R)
ΓI=UkPm(U,I)
1=UkPm(U1,I)
ΓI
U,V=SplitVal(Val,6)
ΓR=UkPm(U1,R)
Θ=UkCm(V,R-1,I-1)
Θ=UkCm(V,R-1,I-1)
7
Π=UkSP(V,R,I)
2=UkPm(U2,I)
ΓI
ΓR=UkPm(U,R)
ΓI=UkPm(U2,I)
3
5
Π=UkSP(V,R,I)
Θ=UkCm(V,R-1,I-1)
Θ=UkCm(V,R-1,I-1)
8
End
6
9
Fig. 2: The unranking procedure for the nine cases listed in Table I.
¾R:   The number of riders
¾m:  The index of a method 
R, Riders, Carriers, m
Γs,Θs,Πs,Λs,I=ExtractArrange(R,Riders,Carriers,m)
No
IsRidDis(m)
Yes
IsCarDis(m)
Val=RkIP(Λ,R,I)
No
No
IsRidSeq(m)
Yes
1
Yes
Yes
IsCarSeq(m)
No
Val=RkSP(Π,R,I)
No
IsCarDis(m)
2
Yes
Val=RkPm(ΓI,I)
No
IsCarSeq(m)
Yes
Yes
IsCarDis(m)
No
No
Yes
IsCarSeq(m)
Val=RkCm(Θ,R-1,I-1)
Val×=RkCm(Θ,R-1,I-1)
Val=RkPm(ΓI,I)
Val=RkPm(ΓI
1,I)
Val=RkPM(ΓI,I)
Val×=RkPm(ΓR,R)/I!
7
Val=RkCm(Θ,R-1,I-1)
4
Val×=RkSP(Π,R,I)
Val×=RkPm(ΓI
2,I)
Val=RkPm(ΓR,R)
3
Val×=PkPm(ΓR,R)
5
Val×=RkCm(Θ,R-1,I-1)
Val×=RkSP(Π,R,I)
6
Val×=RkCm(Θ,R-1,I-1)
8
A=Val+IterateT(R,I,m)
End
9
Fig. 3: The ranking procedure for the nine cases listed in Table I.
algorithms which give the corresponding arrangement for a
given rank. The process is reversed for decoding, and the
“decoding” algorithms are known as ranking algorithms which
yield the rank for a given arrangement.
The inputs to the encoding procedure are a covert message,
R, and the selected method. The message is partitioned into
C-bit segments, each of which is converted to an integer
(i.e., a rank). For each rank, the selected method’s unranking
algorithm outputs a rider-carrier arrangement, according to
which the encoder dispatches the riders and the carriers.
The decoder monitors the riders and the carriers. Once it ob-
serves a rider-carrier arrangement, it invokes the corresponding
ranking algorithm to compute this arrangement’s rank and then
turns the rank into a binary segment. After concatenating all
binary segments, the decoder can recover the original message.
As mentioned before, an encoder may use only a subset
of all possible rider-carrier arrangements (especially those
regarded as legitimate arrangements by the warden) to encode
messages, because some arrangements may be considered as
an anomaly to the warden. We propose the following strate-
gies to facilitate the process of selecting the best encoding
algorithms to decrease the channel detectability.
Strategy 1: Determine whether carriers and riders can be
made distinguishable based on the vulnerability to the warden
detection. If not, method x should be used, because it does
not require distinguishable carriers and riders.
Strategy 2: If carriers or riders could be made distinguishable,
but the carriers (or riders) are not sequence detectable, methods
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:32:51 UTC from IEEE Xplore.  Restrictions apply. 
477~,  (or methods z, }), and method  will not be used. The
encoder can select other methods. Moreover, only the carrier-
rider arrangements that are consistent with the normal trafﬁc
behavior will be used.
Strategy 3: If carriers and riders could be sequence detectable,
all methods can be used. An encoder could select method
 to maximize the channel capacity. Similar to before, the
rider-carrier arrangements that deviate from the normal trafﬁc
pattern will not be used.
Although an encoder may not know the detection features
used by the warden, she just needs to mimic the normal
behavior of network objects. For example, WebLeaks to be
presented in Section III mimics normal user behavior of
Internet surﬁng and ACKLeaks in Section IV mimics the
normal TCP/IP behavior of sending TCP ACK packets.
F. Unranking and ranking algorithms
It is challenging to design algorithms to rank and unrank the
nine cases in Table I and to the best of our knowledge there
are no existing algorithms for them. We propose a divide-
and-conquer approach to design the ranking and unranking
algorithms. It is motivated by Ts’ expressions in Table I,
which can be constructed based on four building blocks:
permutation (i.e., !), combination (i.e., (cid:18)X
Y(cid:19)), integer partition
(i.e., P(X ,Y)), and set partition (i.e., S(X ,Y)). Since ranking
and unranking algorithms for these building blocks exist, our
approach is to “glue” them together for the nine cases in Table
I. We ﬁrst brieﬂy introduce the four building blocks and then
elaborate on the construction of the ranking and unranking
algorithms.
Permutation: Let RkPm(Γ,X ) and UkPm(V,X ) be the
ranking and unranking algorithms for X !, respectively, where
Γ = [γ1, . . . , γX ] is a permutation of X elements, and V is
the rank. There are several existing ranking and unranking
functions for X !, and the time complexity of traditional
unranking algorithms is O(X 2) [25]. We employ the ranking
and unranking algorithms with time complexity O(X ) in [25].
Combination Let RkCm(Θ,X ,Y) and UkCm(V,X ,Y) be
the ranking and unranking algorithms for (cid:18)X
Y(cid:19), respectively,
where Θ = [θ1, . . . , θY ] is an instance of selecting Y elements
from X available elements, where 0 ≤ Y ≤ X . We adopt the
ranking and unranking algorithms 2.7 and 2.8 in [26].
Integer partition Let RkIP(Λ,X ,Y) and UkIP(V,X ,Y)
be the ranking and unranking algorithms for the integer
partition P(X ,Y), 1 ≤ Y ≤ X , respectively. Λ= [λ1, . . . , λY ]
is the value in the kth partition (PY
k=1 λk = X ). We utilize
the ranking and unranking algorithms 3.8 and 3.9 in [26].
Set partition Let RkSP(Π,X ,Y) and UkSP(V,X ,Y) be
the ranking and unranking algorithms for the set partition
S(X ,Y), 1 ≤ Y ≤ X , respectively. Π = [π1, . . . , πX ] is a di-
vision of X riders into Y carriers. We use the RankSetPtns
and UnrankSetPtns functions in [27].
Figure 2 illustrates the unranking procedure for the nine
cases. The inputs to this procedure consist of the rank of an
the
uses
four
functions
The
unranking
procedure
rider/carrier
arrangement (i.e., A), the number of riders (i.e., R) and the
method’s index (i.e., 1 ≤ m ≤ 9) which is shown by a circled
number in Figure 2.
to
determine
(i.e.,
IsRidDis/IsCarDis) and sequence detectability (i.e.,
IsRidSeq/IsCarSeq) based on the index of adopted
method. Besides
the four
building blocks (i.e., UkPm, UkCm, UkIP, and UkSP), the
procedure uses two important functions: GetNumCar and
SplitVal.
the unranking algorithms of
distinguishability
As listed in Algorithm 1, GetNumCar computes the num-
ber of carriers (i.e., I) and the value (i.e., V al) that determines
the combination, and the permutation and the order of riders
and carriers. Table I shows that the outer layer operation of
all Ts is a summation of F(R, i, m) for i = 1 to R, where
F(R, i, m) represents the mth method’s result. For example,
F(R, i, m) = P(R, i) when m = 1. Given the rank of an
arrangement (i.e., A), we obtain I that fulﬁls Eq. (1).
I−1
Xi=1
F(R, i, m) < A ≤
I
Xi=1
F(R, i, m).
(1)
At the same time, we calculate V al = A −PI−1
i=1 F(R, i, m).
Lines 2-4 of Algorithm 1 show the corresponding operations.
According to the adopted method, SplitVal divides V al
into several parts, each of which represents the rank of the
combination/permutation/order of riders and carriers. When
m = 7, SplitVal returns two values: U = V al mod I! and
V = ⌊V al/I!⌋. U is the rank of a permutation of I carriers,
and V is the rank of dividing R indistinguishable riders into
I distinguishable carriers.
When m = 5, SplitVal outputs two values: U = V al
mod I! and V = ⌊V al/I!⌋. U is the rank of a permutation of I
carriers, and V is the rank of arranging R distinguishable rid-
ers into I indistinguishable groups. When m = 8, SplitVal
generates three values: U1, U2, and V . Letting U = V al
mod (I!)2, we have V = ⌊V al/(I!)2⌋, U1 = U mod I!, and
U2 = ⌊U/I!⌋. V is the rank of arranging R distinguishable
riders into I indistinguishable groups. Both U1 and U2 are the
ranks of permutations of I carriers. They represent different
operations in practice. U1 is related to carrier labeling, whereas
U2 involves in a permutation of carriers.
When m = 3, SplitVal calculates two values: U = V al
mod R!/I! and V = ⌊(V al − U )I!/R!⌋. U × I! is the rank of
a permutation of R riders, and V is the rank of dividing R in-
distinguishable riders into I distinguishable carriers. Similarly,
when m = 6, SplitVal yields two values: U = V al mod R!
and V = ⌊V al/R!⌋. U is the rank of a permutation of R riders,
and V is the rank of dividing R indistinguishable riders into
I distinguishable carriers. When m = 9, SplitVal gives
three values: U1, U2, and V . Letting U = V al mod (R!I!), we
have V = ⌊V al/R!I!⌋, U1 = U mod R!, and U2 = ⌊U/R!⌋.
V is the rank of dividing R indistinguishable riders into I
distinguishable carriers. U1 is the rank of a permutation of R
riders, and U2 is the rank of a permutation of I carriers.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:32:51 UTC from IEEE Xplore.  Restrictions apply. 
478As an example, using method  with R = 5, we have
T9 = 31320 different rider-carrier arrangements, and C9 =
⌊log2 31320⌋ = 14 bits. To transmit a 14-bit binary segment
“10000000000000,” we ﬁrst convert it into an integer (i.e.,
8192) and then invoke the unranking algorithm for method 
with inputs of A = 8192, R = 5, and m = 9. The outputs
of the unranking algorithm include (1) the number of carriers
(i.e., I = 4); (2) the way of arranging ﬁve riders into four
carriers (i.e., Θ={two riders in the ﬁrst carrier, one rider in
the second, third and fourth carrier each}); (3) the order of
carriers (i.e., ΓI = {2, 4, 3, 1}); and (4) the order of riders
(i.e., ΓR = {1, 5, 3, 4, 2}).
Input: A, R, m
Output: I, V al
1 I ← 0; V al ← 0;
2 while A ≥ 0 do
I ← I + 1;
V al ← A; A ← A − F(R, I, m);
3
4
5 return I, V al;
Algorithm 1: The procedure of GetNumCar.
Figure 3 shows the ranking procedure for the nine cases.
Its inputs comprise the observed riders and carriers, R, and
a method’s index. Function ExtractArrange determines
I and obtains the rider-carrier arrangements according to
the requirements of the building blocks’ ranking algorithm-
s. We use (Γs, Θs, Λs, Πs) to denote the permutations,