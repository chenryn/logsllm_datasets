7. Direct system calls and evading “mark of the syscall”
The loader leverages direct system calls for bypassing any hooks put in ntdll.dll by the EDRs. I
want to avoid going into too much detail on how direct syscalls work, since it’s not the purpose of
this post and a lot of great posts have been written about it (e.g. Outflank).
In short, a direct syscall is a WINAPI call directly to the kernel system call equivalent. Instead of
calling the ntdll.dll VirtualAlloc we call its kernel equivalent NtAlocateVirtualMemory defined in
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
6/12
the Windows kernel. This is great because we’re bypassing any EDR hooks used to monitor calls
to (in this example) VirtualAlloc defined in ntdll.dll.
In order to call a system call directly, we fetch the syscall ID of the system call we want to call from
ntdll.dll, use the function signature to push the correct order and types of function arguments to
the stack, and call the syscall  instruction. There are several tools that arrange all this for us,
SysWhispers2 and SysWhisper3 are two great examples. From an evasion perspective, there are
two issues with calling direct system calls:
1. Your binary ends up with having the syscall instruction, which is easy to statically detect (a.k.a
“mark of the syscall”, more in “SysWhispers is dead, long live SysWhispers!”).
2. Unlike benign use of a system call that is called through its ntdll.dll equivalent, the return
address of the system call does not point to ntdll.dll. Instead, it points to our code from where
we called the syscall, which resides in memory regions outside of ntdll.dll. This is an indicator
of a system call that is not called through ntdll.dll, which is suspicious.
To overcome these issues we can do the following:
1. Implement an egg hunter mechanism. Replace the syscall instruction with the egg (some random
unique identiﬁable pattern) and at runtime, search for this egg in memory and replace it with the
syscall instruction using the ReadProcessMemory and WriteProcessMemory WINAPI calls. Thereafter,
we can use direct system calls normally. This technique has been implemented by klezVirus.
2. Instead of calling the syscall instruction from our own code, we search for the syscall instruction
in ntdll.dll and jump to that memory address once we’ve prepared the stack to call the system
call. This will result in an return address in RIP that points to ntdll.dll memory regions.
Both techniques are part of SysWhisper3.
8. Removing hooks in ntdll.dll
Another nice technique to evade EDR hooks in ntdll.dll is to overwrite the loaded ntdll.dll that
is loaded by default (and hooked by the EDR) with a fresh copy from ntdll.dll. ntdll.dll is the
first DLL that gets loaded by any Windows process. EDR solutions make sure their DLL is loaded
shortly after, which puts all the hooks in place in the loaded ntdll.dll before our own code will
execute. If our code loads a fresh copy of ntdll.dll in memory afterwards, those EDR hooks will
be overwritten. RefleXXion is a C++ library that implements the research done for this technique
by MDSec. RelfeXXion uses direct system calls NtOpenSection and NtMapViewOfSection to get a
handle to a clean ntdll.dll in \KnownDlls\ntdll.dll (registry path with previously loaded DLLs). It
then overwrites the .TEXT section of the loaded ntdll.dll, which flushes out the EDR hooks.
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
7/12
I recommend to use adjust the RefleXXion library to use the same trick as described above in
section 7.
9. Spooﬁng the thread call stack
The next two sections cover two techniques that provide evasions against detecting our shellcode
in memory. Due to the beaconing behaviour of an implant, for a majority of the time the implant is
sleeping, waiting for incoming tasks from its operator. During this time the implant is vulnerable for
memory scanning techniques from the EDR. The first of the two evasions described in this post is
spoofing the thread call stack.
When the implant is sleeping, its thread return address is pointing to our shellcode residing in
memory. By examining the return addresses of threads in a suspicious process, our implant
shellcode can be easily identified. In order to avoid this, want to break this connection between
the return address and shellcode. We can do so by hooking the Sleep() function. When that hook
is called (by the implant/beacon shellcode), we overwrite the return address with 0x0 and call the
original Sleep() function. When Sleep() returns, we put the original return address back in place
so the thread returns to the correct address to continue execution. Mariusz Banach has
implemented this technique in his ThreadStackSpoofer project. This repo provides much more
detail on the technique and also outlines some caveats.
We can observe the result of spoofing the thread call stack in the two screenshots below, where
the non-spoofed call stack points to non-backed memory locations and a spoofed thread call
stack points to our hooked Sleep (MySleep) function and “cuts off” the rest of the call stack.
Default beacon thread call stack.
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
8/12
10. In-memory encryption of beacon
The other evasion for in-memory detection is to encrypt the implant’s executable memory regions
while sleeping. Using the same sleep hook as described in the section above, we can obtain the
shellcode memory segment by examining the caller address (the beacon code that calls Sleep()
and therefore our MySleep() hook). If the caller memory region is MEM_PRIVATE and EXECUTABLE and
roughly the size of our shellcode, then the memory segment is encrypted with a XOR function and
Sleep() is called. Then Sleep() returns, it decrypts the memory segment and returns to it.
Another technique is to register a Vectored Exception Handler (VEH) that handles NO_ACCESS
violation exceptions, decrypts the memory segments and changes the permissions to RX. Then
just before sleeping, mark the memory segments as NO_ACCESS, so that when Sleep() returns, it
throws a memory access violation exception. Because we registered a VEH, the exception is
handled within that thread context and can be resumed at the exact same location the exception
was thrown. The VEH can simply decrypt and change the permissions back to RX and the implant
can continue execution. This technique prevents a detectible Sleep() hook being in place when
the implant is sleeping.
Mariusz Banach has also implemented this technique in ShellcodeFluctuation.
11. A custom reﬂective loader
The beacon shellcode that we execute in this loader ultimately is a DLL that needs to be executed
in memory. Many C2 frameworks leverage Stephen Fewer’s ReflectiveLoader. There are many well
written explanations of how exactly a relfective DLL loader works, and Stephen Fewer’s code is
also well documented, but in short a Reflective Loader does the following:
1. Resolve addresses to necessary kernel32.dll WINAPIs required for loading the DLL (e.g.
VirtualAlloc, LoadLibraryA etc.)
Spoofed beacon thread call stack.
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
9/12
2. Write the DLL and its sections to memory
3. Build up the DLL import table, so the DLL can call ntdll.dll and kernel32.dll WINAPIs
4. Load any additional library’s and resolve their respective imported function addresses
5. Call the DLL entrypoint
Cobalt Strike added support for a custom way for reflectively loading a DLL in memory that allows
a red team operator to customize the way a beacon DLL gets loaded and add evasion techniques.
Bobby Cooke and Santiago P built a stealthy loader (BokuLoader) using Cobalt Strike’s UDRL
which I’ve used in my loader. BokuLoader implements several evasion techniques:
Limit calls to GetProcAddress() (commonly EDR hooked WINAPI call to resolve a function address,
as we do in section 4)
AMSI & ETW bypasses
Use only direct system calls
Use only RW or RX, and no RWX (EXECUTE_READWRITE) permissions
Removes beacon DLL headers from memory
Make sure to uncomment the two defines to leverage direct system calls via HellsGate &
HalosGate and bypass ETW and AMSI (not really necessary, as we’ve already disabled ETW and
are not injecting the loader into another process).
12. OpSec conﬁgurations in your Malleable proﬁle
In your Malleable C2 profile, make sure the following options are configured, which limit the use of
RWX marked memory (suspicious and easily detected) and clean up the shellcode after beacon has
started.
    set startrwx        "false"; 
    set userwx          "false"; 
    set cleanup         "true"; 
    set stomppe         "true"; 
    set obfuscate       "true"; 
    set sleep_mask      "true"; 
    set smartinject     "true"; 
Conclusions
Combining these techniques allow you to bypass (among others) Microsoft Defender for Endpoint
and CrowdStrike Falcon with 0 detections (tested mid April 2022), which together with
SentinelOne lead the endpoint protection industry.
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
10/12
CrowdStrike Falcon with 0 alerts.
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
11/12
Of course this is just one and the first step in fully compromising an endpoint, and this doesn’t
mean “game over” for the EDR solution. Depending on what post-exploitation activity/modules the
red team operator choses next, it can still be “game over” for the implant. In general, either run
BOFs, or tunnel post-ex tools through the implant’s SOCKS proxy feature. Also consider putting
the EDR hooks patches back in place in our Sleep() hook to avoid detection of unhooking, as well
as removing the ETW/AMSI patches.
It’s a cat and mouse game, and the cat is undoubtedly getting better.
Related Posts
Towards generic .NET assembly obfuscation (Pt. 1)
Windows Defender (and also Microsoft Defender for Endpoint, not screenshotted) with 0 alerts.
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
12/12
vivami © 2022