#### Code Sample
    df = Dataframe(numpy.zeros(10000,10000))
    random_fill_df(df, num_elements=20)
    df = df.to_sparse(fill_value=0)
    timeit.timeit('df.loc[[23, 45, 65, 67],:]', globals=globals(), number=10)
#### Problem description
The reason why row slicing takes so long is because a sparse dataframe a bunch
of sparse series. Column slicing is several order of magnitude faster but row
slicing is very poor. The sparse dataframe doesn't take advantage of the scipy
sparse matrix library which is even faster (both column and row).
#### Expected Output
In case data is stored as a scipy sparse matrix (as well) inside dataframe
object, the slicing operations can be improved, by several orders of
magnitude.
I propose that data be stored as a sparse matrix as well in the dataframe
object.
#### Output of `pd.show_versions()`
pandas: 0.20.3  
pytest: None  
pip: 9.0.1  
setuptools: 36.2.0  
Cython: None  
numpy: 1.13.1  
scipy: 0.19.1  
xarray: None  
IPython: None  
sphinx: None  
patsy: None  
dateutil: 2.6.1  
pytz: 2017.2  
blosc: None  
bottleneck: 1.2.1  
tables: None  
numexpr: 2.6.2  
feather: None  
matplotlib: 2.0.2  
openpyxl: None  
xlrd: None  
xlwt: None  
xlsxwriter: None  
lxml: None  
bs4: 4.6.0  
html5lib: 0.999999999  
sqlalchemy: None  
pymysql: None  
psycopg2: None  
jinja2: None  
s3fs: None  
pandas_gbq: None  
pandas_datareader: None