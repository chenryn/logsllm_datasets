### 2. FPGA 实验设置

#### 实验1 和 实验2

在表2中，我们列出了FPGA实验的设置。这两个实验旨在评估不同错误检测机制和对策的有效性。

| 实验参数 | 实验1 | 实验2 |
| --- | --- | --- |
| 错误检测机制/对策 | 比较单元 | 奇偶校验 |
| 时间多样性 | - | *仅在CCF情况下评估* |

**说明：**
- **奇偶校验**：在32 MHz时钟频率下进行评估，这是在室温下设备能够无故障运行的最大频率。Actel布局和布线工具给出的最大时钟频率为26 MHz。
- **时间多样性**：仅在CCF（共因故障）情况下评估。

### 3. ASIC 设置

接下来，我们在工业级ASIC双核架构上进行了类似的实验。目标架构是实现了一个容错双核架构的原型板。我们测试了两种不同的实现方案：
- 一种是两个核心同步运行；
- 另一种是在两个核心之间引入1.5个时钟周期的时间多样性。

这两种架构都使用了两个ARM7核心和一个内置自检的比较单元。闪存和RAM分别受到奇偶校验和ECC保护。当比较单元或奇偶/ECC机制检测到错误时，错误处理程序会触发一个错误引脚，并收集关于错误类型和来源的信息。该设备还配备了一个电压监视器，根据其规格，在电压下降到某个阈值以下且持续时间超过指定的最小持续时间（介于300纳秒到1微秒之间）时，会触发复位。这个机制无法禁用。

我们使用LIN接口与目标芯片通信，并对来自错误处理程序的错误引脚进行跟踪以进行故障分析。

#### 应用负载
- **比较单元**
- **ARM7 (主控)**
- **ARM7 (检查器)**
- **错误处理程序**
- **带奇偶校验的Flash**
- **带ECC的RAM**
- **LIN 接收 (RX)**
- **LIN 发送 (TX)**

图6显示了ASIC原型的框图。

### 表3. ASIC 实验设置

| 实验参数 | 实验3 | 实验4 |
| --- | --- | --- |
| 错误检测机制/对策 | 比较单元 | ECC/奇偶校验 |
| 电压监视器 | - | - |
| 时间多样性 | - | - |

**实验参数空间：**
- **时间间隔**：随机
- **延迟 (d)**：450-600 ns
- **时钟频率 (f)**：85-100 MHz (实验3)
- **时钟频率 (f)**：95-124 MHz (实验4)

**BIST (内置自检)：**
- BIST例程可以检测核心中的大多数固定故障，从而将潜在故障数量降至最低。BIST使用内置CRC单元生成每个BIST例程的签名并将其与参考值进行比较。如果值不同，则通过LIN接口发送错误消息；否则，BIST重新启动。

### 实验结果

#### 实验3
目标架构在没有时间多样性的情况下，指定的工作频率为72 MHz，但可以运行到100 MHz。根据我们的初步计划，较低的频率应该是36 MHz。然而，在实验中发现，电压监视器在故障持续时间超过600纳秒时会被触发。因此，在36 MHz甚至72 MHz下都无法引起错误。ASIC对PSD敏感的最低频率为85 MHz。

#### 实验4
使用时间多样性的目标架构指定的工作频率为80 MHz，但可以运行到124 MHz。同样，由于电压监视器的限制，ASIC对PSD敏感的最低频率为95 MHz。

### 图7. 实验3的易感故障注入参数空间
- **故障持续时间 (ns)**
- **时钟频率 (MHz)**
- **无效果区域**
- **故障效果区域**
- **电压监视器触发区域**

### 图8. 实验4的易感故障注入参数空间
- **故障持续时间 (ns)**
- **时钟频率 (MHz)**
- **无效果区域**
- **故障效果区域**
- **电压监视器触发区域**

### 结果总结

#### FPGA 结果
- **无时间多样性**：共检测到229次CCF。
- **有时间多样性**：未检测到任何CCF。
- **奇偶校验**：报告了47%的CCF。

#### ASIC 结果
- **无时间多样性**：共检测到10次CCF。
- **有时间多样性**：未检测到任何CCF。

### 评估CCF对策

- **时间多样性**：非常有效，完全消除了电源引起的CCF。
- **奇偶校验**：特别有效，尤其是在关键路径上使用时。
- **增加时序裕度**：降低系统时钟频率至最大频率的62%以下，可以防止CCF。
- **电压监视器**：结合增加的时序裕度，提供了一种有效的保护措施。

### 结论

本研究通过在FPGA和两种ASIC双核架构上进行物理故障注入实验，评估了几种针对电源引起的共因故障的对策。结果表明，时间多样性和电压监视器结合增加的时序裕度提供了出色的保护。奇偶校验，特别是对关键路径的保护，是一种重要的补充措施。

### 参考文献
[此处列出所有参考文献]

通过上述优化，文本变得更加清晰、连贯和专业。希望这对你有所帮助！