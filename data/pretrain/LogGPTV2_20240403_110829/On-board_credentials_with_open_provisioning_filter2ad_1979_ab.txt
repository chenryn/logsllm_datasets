requirement is not addressed by any of the existing provi-
sioning protocols, such as the standardized key transport
protocols [15, 3] or device management protocols [16]. Sec-
ond, if the credential program itself is conﬁdential, then a
similar mechanism is needed to encrypt the conﬁdential pro-
gram so that it can be decrypted only inside the secure en-
vironment of speciﬁc devices.
To summarize, we have identiﬁed that the code- and mem-
ory footprint is crucial requirement for an ObC system in
order to meet the objective of reusing existing secure en-
vironments.
In addition, we have identiﬁed the following
security requirements for an ObC system:
106for our ObC system on an existing programming language so
that third-party developers could use familiar development
tools. In the end, we decided to use a slimmed down version
of the Lua (v2.4) language [13] for which we wrote a clean-
slate interpreter.
In addition to the language constructs,
our interpreter also provides an interface for commonly used
cryptographic primitives.
The ObC interpreter runs in the secure environment. Cre-
dential programs are scripts that can execute on the inter-
preter.
ObC Platform Key: Only one credential program is
allowed to execute on the ObC interpreter at any given time.
Therefore, the primary issue in isolating credential programs
from one another is with respect to their ability to access
persistently stored data.
The ObC interpreter has exclusive access to a device spe-
ciﬁc master key called the ObC platform key (OPK). OPK
is one of the two secrets protected by the secure storage in
the secure environment (the other secret is private part of
the device key pair SKD which is used in provisioning and
explained in Section 4). How the OPK is initialized depends
on the speciﬁc secure environment being used. For example,
it can be derived from a one-time programmable (E-Fuse)
persistent on-chip key [17] as in the case of M-Shield or a
physically uncloneable function as in the AEGIS secure pro-
cessor [18].
The ObC interpreter provides a sealing/unsealing func-
tion for ObC programs. The programs can use it to protect
secret data to be stored persistently outside the secure en-
vironment. The key used for sealing/unsealing is derived
by applying a key-derivation function to OPK and a di-
gest of the code of the credential program which invokes
sealing/unsealing, thereby inherently isolating persistently
stored data of one credential program from another. In Sec-
tion 4, we describe how this basic sealing/unsealing function-
ality is extended to support data sharing among a group of
co-operating programs and for provisioning secret data from
external provisioning entities.
Credentials Manager: Client applications use ObCs
via the Credentials Manager. The Credentials Manager has
a simple “secure user interface” which the user can recog-
nize by customizing its appearance.
It also manages the
ObC database where sealed credential secrets and creden-
tial programs can be stored persistently. We assume that
only the Credentials Manager is allowed to communicate
with the ObC interpreter. The actual means of enforcing
this depends on the particular operating system in which
the Credentials Manager is running. For example, in Sym-
bian Series 60 devices, we make use of Symbian OS plat-
form security. Applications can claim a “vendor ID” if they
have been veriﬁably signed. Only those applications with
the manufacturer’s vendor ID are allowed to communicate
with protected applications in the secure environment. We
present a more detailed description of the design and im-
plementation of the ObC interpreter and the Credentials
Manager in a technical report [6]. In the rest of this paper,
we focus on the provisioning of ObCs.
We chose to separate provisioning functionality from the
interpreter for two reasons. First, this separation increases
reusability. The provisioning scheme could be used with
diﬀerent kind of interpreter and vice versa. Secondly, this
approach better suits the limited memory available in the se-
cure environment. Because provisioning and execution (in-
Figure 1: ObC architecture
• isolation of credential programs:
– isolation of secure environment resources from cre-
dential programs
– control of resource consumption by credential pro-
grams
– isolation of credential programs from one another,
both at runtime as well as in access to persistently
stored data
• authorized sharing of credential secrets by a group
of programs
• security of provisioning:
– provisioning credential secrets so that they are
only accessible to a speciﬁc group of credential
programs on speciﬁc devices
– provisioning conﬁdential credential programs so
that they can be only decrypted within the secure
environment of speciﬁc devices
3. OBC ARCHITECTURE
Figure 1 shows a high-level overview of our proposed ObC
architecture. We describe the components by stating our
main architectural design decisions and explaining the ra-
tionales behind them.
ObC interpreter:
Isolating credential programs from
the secure environment resources can be achieved by pro-
viding a virtualized environment where the programs can
be run.
Our minimal footprint requirement aiming at very limited
RAM usage, rules out the use of a general-purpose virtual-
ized execution environment because they cannot be made to
ﬁt into the space available. For example, in our primary tar-
get environment based on M-Shield, only tens of kilobytes
of runtime memory is available within the secure environ-
ment. However, a simple bytecode interpreter can be de-
signed to run even within these constraints. Thus we chose
to use a bytecode interpreter as the primary component of
the ObC architecture. The footprint restrictions rule out
popular bytecode interpreters like JavaCard [11]. Still, we
wanted to base the credential program development process
107terpreter) are separate components they need not be running
concurrently within the secure environment. This reduces
the footprint of the interpreter and thereby allowing more
space for ObC programs.
4. PROVISIONING
We designed the ObC provisioning system with our “open-
ness” goal in mind: namely we want to allow any entity to
provision secret data to a group of credential programs on
a device. A necessary sub-goal is a mechanism to allow au-
thorized sharing of credential secrets (provisioned or locally
created) by a family of programs.
We assume the availability of a unique device-speciﬁc key
pair. The private part of this key (SKD) is available only in-
side the secure environment. The public part (P KD) should
be certiﬁed by a trusted authority as a key pair belonging
to a compliant ObC system. Typically the device manu-
facturer will carry out this certiﬁcation during the device
manufacturing process.
Recall that the requirements for provisioning calls for a
system that allows any provisioner the ability to provision
credential secrets to a group of credential programs on a de-
vice. A trivial solution would be to just encrypt the data to
be provisioned using the device public key P KD. However,
this obvious approach has two drawbacks.
First, the provisioner could not control which programs
would have access to certain provisioned secrets. We need
to provide a means by which the provisioner can specify the
programs that can access the provisioned secrets. Second,
this approach would imply that every piece of provisioned
data must be packaged separately for every individual de-
vice. This is unoptimal, and unacceptable, in cases where
the data being provisioned is actually shared by a group of
devices. For example a content broadcast service needs to
provision the same content decryption key to a large number
of devices.
In general, the network structure (broadcast),
application structure, or the business model may necessitate
the sharing of secret data by multiple devices. Therefore, we
adapted a hybrid approach as follows.
4.1 Provisioning to families
We deﬁne a family as the group of programs and the secret
data they share. This secret data can either be credential se-
crets generated externally and provisioned to the family, or
it can be data locally generated by the programs during ex-
ecution on the ObC system. A provisioner can create a new
family by creating a family root key (RK). RK is a sym-
metric key and can be provisioned to devices by encrypting
RK with a device public key P KD. The resulting message
is the ObC provisioning initialization message denoted as
ObCP/Init. To begin provisioning, the provisioner (typi-
cally a provisioning server) acquires P KD of the target de-
vice in a trustworthy manner. For example, the provisioner
can obtain P KD by receiving it from the target device itself
along with a device certiﬁcate issued by the device manu-
facturer or by retrieving P KD via an authenticated channel
from a database maintained by the device manufacturer.
From RK we diversify two other symmetric keys. One is
called endorsement integrity key (IK). The other is called
the conﬁdentiality key (CK). CK is used to protect secret
data so that it can be securely transferred to target de-
vices. The resulting secure data transfer message denoted
as ObCP/Xfer. Once a family is provisioned with an
ObCP/Init message, any number of pieces of data can be
added to the family, possibly over time, by sending only
ObCP/Xfer messages.
When the provisioner wants to authorize a particular ObC
program to have access to the “family secrets”, he has to is-
sue an endorsement of the program. He can do this by con-
structing a message authentication code over the program
identiﬁer using IK. The resulting endorsement message is
denoted ObCP/Endorse. Programs are identiﬁed (sta-
tistically) uniquely by referring to a cryptographic hash of
the program text.1 Using a cryptographic hash of the pro-
gram text as the program identiﬁer also implies that there
is no need for an authority to manage and maintain the
namespace for program identiﬁers. This is in keeping with
the openness requirement that anyone should be able to de-
velop and deploy new credential programs without needing
permission or approval from any third party.
Our family concept is outlined in Figure 2. The immedi-
ate advantage of using families is shown in the picture; only
the family key needs to be protected by the device-speciﬁc
public key. The rest of the provisioning messages can be
protected by keys that are cryptographically bound to RK.
This makes it possible to separate the provisioning function
into several components – a service that identiﬁes devices
to be ObC-compliant, and if so, provisions a root key for
the family by sending a unique ObCP/Init message to each
unique recipient device. Thereafter ObC program endorse-
ments and encrypted ObC secrets can be retrieved from a
publicly available service. The credential programs could
even be distributed in a peer-to-peer fashion.
The family root key RK deﬁnes the scope of data shar-
ing. All secrets provisioned under a common RK can be
used by all credential programs endorsed by the RK in ques-
tion. (This is subject to an additional check to ensure that
endorsements and secrets correspond to the same “family
version”, which is explained further in Section 4.4). When
a program is updated, the updated version can also be en-
dorsed to the same family so that it continues to have access
to the secrets used by the previous version of the program.
The extent of these families is completely under the control
of the provisioner who can use them to meet a variety of
diﬀerent security and provisioning needs. As an example, a
secret may be provisioned for a single device, for a group of
devices that need to share secrets or even for all devices in
the system.
Most ObC programs are not likely to be conﬁdential. Their
integrity is indirectly assured, since all their persistent crit-
ical data should be sealed and a modiﬁed ObC program
would not able to unseal data sealed to the original one un-
less the modiﬁed version has a corresponding ObCP/Endorse.
However, a conﬁdential program can be provisioned in en-
crypted form in an ObCP/Xfer message just like creden-
tial secrets so that they can be decrypted and used only
within the secure environment of designated devices. Unlike
encrypted credential secrets, encrypted credential programs
1In our current implementation, IK is also used to protect
the integrity of payload of ObCP/Xfer messages. Similarly,
CK is used to encrypt the ObCP/Endorse message as well
so that program identiﬁers are not exposed in the clear.
This is important in the case where programs themselves
are not public. We are currently revising the provisioning
protocol so that only one cryptographic primitive, authen-
ticated encryption, is used to protect both ObCP/Xfer and
ObCP/Endorse.
108as the encryption algorithm EN C() and HMAC-SHA1 as
the integrity protection algorithm M AC().
ObCP/Xfer = EncM ac(tag|payload|version)
EncM ac(data) = EN CCK (data)|M ACIK (EN CCK (data))
ObCP/Endorse message contains the program identi-
ﬁer, obtained by taking a cryptographic hash of the program
code, similarly encrypted and integrity protected using CK
and IK respectively. The version number deﬁnes the gen-
eration of family secrets that this program is authorized to
access. Our current implementation uses SHA1 as the cryp-
tographic hash function H().
ObCP/Endorse = EncM ac(H(program)|version)
At the time of writing, we are switching to using AES-
EAX as the single cryptographic primitive for protecting
both ObCP/Endorse and ObCP/Xfer. Such a uniformiza-
tion helps in keeping the provisioning subsystem footprint
as small as possible.
In remote-provisioning scenarios we assume that these
message elements are provisioned to devices using some stan-
dardized (key) provisioning protocol like OMA-DM [16], CT-
KIP [15] or equivalent, which deﬁne the transport mecha-
nisms as well as specify how the user is authenticated dur-
ing provisioning. The ObC provisioning message elements
are still self-contained in terms of security, and therefore are
agnostic to the means of transmission.
4.3 Local data sealing
As we discussed in Section 3 (see Figure 1) one of the
reasons for separating the provisioning subsystem and the
interpreter is to minimize the footprint of the interpreter.
The interpreter does not use the device private key (SKD)
or understand the provisioning messages. Therefore, the
provisioning subsystem needs to transform the provisioning
messages into local device-speciﬁc secure packages for cre-
dential secrets as well as programs to be used later by the
ObC interpreter. We now describe these data packages and
their formats.
The sensitive data (both secrets and conﬁdential programs),
is stored outside the secure environment (in Credentials Man-
ager database) encrypted. The data is usable only in the
local device as the keys used are device speciﬁc. We call
the operation of converting data to the local storage format
sealing and the complement operation unsealing.
The seal/unseal operations all use a single cryptographic
primitive in the form of AES-EAX authenticated encryption
using a template consisting of a ﬁxed-length header and ran-
domizer. The notation AEk() stands for AES-EAX authen-
ticated encryption using this ﬁxed template and a key k. A
key derivation function KDFk() is used to derive new keys
from a key k using a diversiﬁer as input. To keep the code
footprint small also KDF () is based on AES-EAX: by using
k as the key and the diversiﬁer as one input to the AES-EAX
computation while ﬁxing the rest of the inputs to AES-EAX
to be constant bit strings, and taking the message integrity
code output from AES-EAX as the output of KDF ().
The provisioning subsystem seals family secrets using a
family-speciﬁc sealing key called local family key (LFK).
LFK is derived from the root key for secrets RKS, the provi-
sioning identiﬁer and the family version number using OPK.
Figure 2: ObC Provisioning - key hierarchy and pro-
visioning messages
are intended for the ObC system as a whole and not to any
speciﬁc credential programs. Therefore, there is no need for
any corresponding ObCP/Endorse message.
When a ObCP/Init is used to provision conﬁdential pro-
grams we use the notation RKP (and similarly use RKS
when it is used to provision credential secrets). Using diﬀer-
ent root keys for programs and secrets is often motivated by
the business model; e.g. for access control and authentica-
tion mechanisms, the keys needed to decrypt the conﬁdential
programs are most likely managed by the supplier of the ac-
cess control system, whereas keys needed for authentication
are provisioned by the owner of the service that is being
access controlled.
If the same RK is used for multiple devices, a side eﬀect
of using a symmetric key (IK) to endorse programs is that
if an attacker compromises one device and learns RK, he
can create and endorse new programs that can potentially
compromise other devices. Endorsement using digital sig-
natures as described in Section 6 avoids this risk. We chose
symmetric key based endorsements for our implementation
to keep the code footprint as small as possible.
4.2 Provisioning messages
Now we describe the formats of the provisioning messages
in more detail.
ObCP/Init message is intended to securely transport
the family root key RK to the secure environment. It is of
the form:
ObCP/Init = P KD(RK|P ID)
where P KD() refers to a secure public key encryption
scheme using P KD as the encryption key, and PID is a
“provisioning identiﬁer” that can be used to set up disjoint
families from the same root key, to distinguish diﬀerent gen-
erations of the ObC system.
ObCP/Xfer message contains a tag (which identiﬁes
the payload as either a conﬁdential ObC program or ObC
secret), the payload itself and a version number deﬁning the
generation of the family that this secret payload belongs