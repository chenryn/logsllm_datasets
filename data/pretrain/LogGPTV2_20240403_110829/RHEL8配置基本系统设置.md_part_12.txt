::: itemizedlist
-   查看当前的 [**yum**]{.strong} 配置。
-   设置 [**yum**]{.strong} \[main\] options。
-   使用 [**yum**]{.strong} 插件。
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#viewing-the-current-yum-configurations_configuring-yum}查看当前的 yum 配置 {.title}
:::
::: itemizedlist
-   要显示 `/etc/yum.conf`{.literal} 文件 `[main]`{.literal}
    部分指定的全局 yum 选项的当前值，请使用：
    ``` screen
    # {PackageManagerCommand} config-manager --dump
    ```
:::
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#setting-yum-main-options_configuring-yum}设置 yum 主选项 {.title}
:::
`/etc/yum.conf`{.literal} 配置文件包含一个 `[main]`{.literal}
部分。本节中的键值对会影响 [**[yum]{.application}**]{.strong}
如何运行并处理存储库。
您可以在 `/etc/yum.conf`{.literal} 文件 `[main]`{.literal}
部分标题下添加附加选项。
有关可用 `[main]`{.literal} 选项的完整列表，请查看
[**yum.conf**]{.strong}(5)手册页中的 `[main] OPTIONS`{.literal} 部分。
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#using-yum-plug-ins_configuring-yum}使用 yum 插件 {.title}
:::
[**[yum]{.application}**]{.strong}
提供扩展和增强操作的插件。默认安装某些插件。
下面的部分论述了如何启用、配置和禁用 [**[yum]{.application}**]{.strong}
插件。
::: section
::: titlepage
### []{#managing-software-packages_configuring-basic-system-settings.html#managing-yum-plug-ins_using-yum-plug-ins}管理 yum 插件 {.title}
:::
插件配置文件始终包含一个 `[main]`{.literal} 部分，其中
`enabled=`{.literal} 选项控制在运行 `yum`{.literal}
命令时插件是否启用。如果缺少这个选项，您可以手动将其添加到该文件中。
每个安装的插件在 `/etc/dnf/plugins/`{.literal}
目录中都有自己的配置文件。您可以在这些文件中启用或禁用特定插件选项。
:::
::: section
::: titlepage
### []{#managing-software-packages_configuring-basic-system-settings.html#enabling-yum-plug-ins_using-yum-plug-ins}启用 yum 插件 {.title}
:::
::: itemizedlist
-   启用所有 yum 插件：
    ::: orderedlist
    1.  请确定在 `/etc/yum.conf`{.literal} 文件的 `[main]`{.literal}
        部分有以 `plugins=`{.literal} 开头的行。
    2.  将 `plugins=`{.literal} 的值设置为 `1`{.literal}。
        ``` screen
        plugins=1
        ```
    :::
:::
:::
::: section
::: titlepage
### []{#managing-software-packages_configuring-basic-system-settings.html#disabling-yum-plug-ins_using-yum-plug-ins}禁用 yum 插件 {.title}
:::
::: itemizedlist
-   禁用所有 yum 插件：
    ::: orderedlist
    1.  请确定在 `/etc/yum.conf`{.literal} 文件的 `[main]`{.literal}
        部分有以 `plugins=`{.literal} 开头的行。
    2.  将 `plugins=`{.literal} 的值设置为 `0`{.literal}。
        ``` screen
        plugins=0
        ```
        ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 重要 {.title}
        [**不建议**]{.strong}禁用所有插件。某些插件提供重要的 yum
        服务。特别是 [**[product-id]{.application}**]{.strong} 和
        [**[subscription-manager]{.application}**]{.strong}
        插件，它们为基于证书的 `内容发布网络`{.literal}
        ([**CDN**]{.strong})提供支持。全局禁用插件作为方便选项，建议仅在诊断
        [**[yum]{.application}**]{.strong} 的潜在问题时才建议。
        :::
    :::
-   要禁用特定命令的所有 yum 插件，请在该命令中附加
    `--noplugins`{.literal} 选项。
    ``` screen
    # {PackageManagerCommand} --noplugins update
    ```
-   要在一个命令中禁用特定的 yum 插件，请在命令中附加
    `--disableplugin=plugin-name`{.literal} 选项。
    ``` screen
    # {PackageManagerCommand} update --disableplugin=plugin-name
    ```
    使用插件的名称替换 [*plugin-name*]{.emphasis}。
:::
:::
:::
:::
:::
[]{#introduction-to-systemd_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#introduction-to-systemd_configuring-basic-system-settings.html#introduction-to-systemd_configuring-basic-system-settings}第 13 章 systemd 简介 {.title}
:::
[**System**]{.strong} d 是 Linux 操作系统的系统和服务管理器。它设计为与
SysV init
脚本向后兼容，并提供许多功能，如在引导时并行启动系统服务、按需激活后台程序或基于依赖项的服务控制逻辑。从
Red Hat Enterprise Linux 7 开始，[**systemd**]{.strong} 替换了 Upstart
作为默认 init 系统。
[**systemd**]{.strong} 引入了 [*systemd 单元*]{.emphasis}
的概念。这些单元由位于下表中列出的目录之一的单元配置文件表示：
::: table
[]{#introduction-to-systemd_configuring-basic-system-settings.html#tabl-introduction-to-systemd}
**表 13.1. systemd 单元文件位置**
::: table-contents
  目录                                   描述
  -------------------------------------- ------------------------------------------------------------------------------------------------------------------------------
  `/usr/lib/systemd/system/`{.literal}   安装的 RPM 软件包中的 systemd 单元文件。
  `/run/systemd/system/`{.literal}       在运行时创建的 systemd 单元文件。该目录优先于安装了的服务单元文件的目录。
  `/etc/systemd/system/`{.literal}       Systemd 单元文件由 `systemctl enable`{.literal} 创建，并添加用于扩展服务的单元文件。这个目录优先于带有运行时单元文件的目录。
:::
:::
单元封装了以下相关信息：
::: itemizedlist
-   系统服务
-   侦听套接字
-   与 init 系统相关的其他对象
:::
[**systemd**]{.strong} 的默认配置是在编译过程中定义的，它可在
`/etc/systemd/system.conf`{.literal} 的 systemd
配置文件中找到。如果您想与那些默认值分离，并全局覆盖所选的 systemd
单元默认值，请使用这个文件。
例如，若要覆盖设为 90 秒的超时限制的默认值，可使用
`DefaultTimeoutStartSec`{.literal} 参数输入所需的值（以秒为单位）。
``` literallayout
DefaultTimeoutStartSec=pass:_required value_
```
::: section
::: titlepage
# []{#introduction-to-systemd_configuring-basic-system-settings.html#ref_systemd-unit-types_introduction-to-systemd}systemd 单元类型 {.title}
:::
有关可用 systemd 单元类型的完整列表，请查看下表：
::: table
[]{#introduction-to-systemd_configuring-basic-system-settings.html#tabl-systemd-unit-types}
**表 13.2. 可用的 systemd 单元类型**
::: table-contents
  单位类型         文件扩展                 描述
  ---------------- ------------------------ ----------------------------------
  服务单元         `.service`{.literal}     系统服务。
  目标单元         `.target`{.literal}      一组 systemd 单元。
  Automount 单元   `.automount`{.literal}   文件系统自动挂载点。
  设备单元         `.device`{.literal}      内核可识别的设备文件。
  挂载单位         `.mount`{.literal}       文件系统挂载点。
  路径单元         `.path`{.literal}        文件系统中的一个文件或者目录。
  Scope 单元       `.scope`{.literal}       外部创建的进程。
  Slice 单元       `.slice`{.literal}       一组管理系统进程的分层组织单元。
  套接字单元       `.socket`{.literal}      进程间的通信套接字。
  Swap 单元        `.swap`{.literal}        一个交换设备或者一个交换文件。
  计时器单元       `.timer`{.literal}       systemd 计时器。
:::
:::
:::
::: section
::: titlepage
# []{#introduction-to-systemd_configuring-basic-system-settings.html#con_systemd-main-features_introduction-to-systemd}systemd 主要功能 {.title}
:::
systemd 系统和服务管理器提供以下主要功能：
::: itemizedlist
-   [**基于套接字的激活**]{.strong} - 在引导时，[**systemd**]{.strong}
    为支持这类激活的所有系统服务创建侦听套接字，并在这些服务启动时立即将套接字传递给这些服务。这不仅允许
    [**systemd**]{.strong}
    并行启动服务，还可以在服务不可用时不丢失任何消息而重新启动服务：对应的套接字仍可访问，并且所有消息都已排队。
    [**systemd**]{.strong} 使用 [*套接字单元*]{.emphasis}
    进行基于套接字的激活。
-   [**基于总线激活**]{.strong} - 将 D-Bus
    用于进程间通信的系统服务可以按需启动，当客户端应用第一次尝试与之通信时。[**System**]{.strong}
    d 使用 [*D-Bus 服务文件进行*]{.emphasis} 基于总线的激活。
-   [**基于设备的激活**]{.strong} -
    当特定类型的硬件插入或可用时，支持基于设备的激活的系统服务可以按需启动。[**systemd**]{.strong}
    使用 [*设备单元*]{.emphasis} 进行基于设备的激活。
-   [**基于路径激活**]{.strong} -
    当特定文件或目录更改其状态时，支持基于路径激活的系统服务可以按需启动。[**systemd**]{.strong}
    使用 [*路径单元*]{.emphasis} 作为基于路径的激活。
-   [**挂载和自动挂载点管理**]{.strong} - [**systemd**]{.strong}
    监控和管理挂载和自动挂载点。[**systemd**]{.strong} 使用
    [*挂载点挂载单元*]{.emphasis}，并将 [*自动挂载单元*]{.emphasis}
    用于自动挂载点。
-   [**积极的并行化**]{.strong} - 由于使用了基于套接字的激活，因此
    [**systemd**]{.strong}
    可在所有侦听套接字都就位后立即并行启动系统服务。和支持按需激活的系统服务相结合，并行激活可大大减少引导系统所需的时间。
-   [**事务单元激活逻辑**]{.strong} -
    在激活或停用单元前，[**systemd**]{.strong}
    会计算其依赖项，创建临时事务，并验证此事务是否一致。如果事务不一致，[**systemd**]{.strong}
    会在报告错误前自动尝试修正它并从中删除非必要作业。
-   [**与 SysV init 的向后兼容**]{.strong} - [**systemd**]{.strong} 支持
    SysV init 脚本，如 [*[Linux
    标准基准核心规格]{.citetitle}*]{.emphasis} 中所述，这简化了到
    systemd 服务单元的升级路径。
:::
:::
::: section
::: titlepage
# []{#introduction-to-systemd_configuring-basic-system-settings.html#con_compatibility-changes_introduction-to-systemd}兼容性更改 {.title}
:::
systemd 系统和服务管理器的主要设计思想是与 SysV init 和 Upstart
兼容。以下是与使用 SysV init 的 Red Hat Enterprise Linux 6
系统相关的最显著兼容性变化：
::: itemizedlist
-   [**System**]{.strong} d
    对运行级别的支持有限。出于兼容性的原因，它提供了许多可以直接映射到这些运行级别的目标单元，也通过之前的
    `运行级别`{.literal} 命令进行分发。然而，并非所有 systemd
    目标都可以直接映射到运行级别，因此，这个命令可能会返回
    `N 来`{.literal} 指示未知运行级别。如果可能，建议您避免使用
    `runlevel`{.literal} 命令。\
    有关 systemd 目标及其与运行级别比较的更多信息，[请参阅使用 systemd
    目标](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#con_difference-between-sysv-runlevels-and-systemd-targets_working-with-systemd-targets){.link}
-   `systemctl`{.literal} 工具不支持自定义命令。除了
    `启动`{.literal}、`停止`{.literal} 和 `状态`{.literal}
    等标准命令外，SysV init
    脚本的作者还可以实施对任意数量的任意命令的支持，以提供额外功能。例如，`iptables`{.literal}
    的 init 脚本可以使用 `panic`{.literal} 命令执行，该命令可立即启用
    panic 模式并重新配置系统以开始丢弃所有传入和传出的数据包。[**systemd
    不支持此功能，system**]{.strong} ctl ``{.literal} 只接受记录的命令。
-   `systemctl`{.literal} 实用程序不与 [**systemd**]{.strong}
    尚未启动的服务进行通信。当 [**systemd**]{.strong}
    启动系统服务时，它会存储其主进程的 ID 来跟踪它。然后 `，`{.literal}
    systemctl 实用程序使用此 PID
    查询和管理服务。因此，如果用户直接在命令行中启动特定的守护进程，system
    `ctl`{.literal} 无法确定其当前状态或停止它。
-   [**System**]{.strong} d
    仅停止正在运行的服务。在以前的版本中，当启动关闭序列时，Red Hat
    Enterprise Linux 6 和更早的版本使用位于 `/etc/rc0.d/`{.literal}
    目录中的符号链接停止所有可用系统服务，而不考虑它们的状态。使用
    [**systemd**]{.strong} 时，只有运行的服务才会在关闭时停止。
-   系统服务无法从标准输入流读取。当 [**systemd**]{.strong}
    启动服务时，它会将其标准输入连接到
    `/dev/null`{.literal}，以防止与用户进行任何交互。
-   系统服务不继承调用用户及其会话的任何上下文（如 `HOME`{.literal} 和
    `PATH`{.literal} 环境变量）。每个服务在干净的执行上下文中运行。
-   加载 SysV init 脚本时，[**systemd**]{.strong} 读取在 Linux Standard
    Base(LSB)标头中编码的依赖关系信息，并在运行时对其进行解译。
-   服务单元中的所有操作都会有默认的 5
    分钟超时，以防止出现故障的服务中断。这个值在从 initscripts
    生成的且无法更改的服务中是被硬编码的。但是，可以使用单个配置文件来指定每个服务的时间更长的超时值，请参阅
    [更改超时限制](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#changing-the-timeout-limit_working-with-systemd-unit-files){.link}。
:::
:::
::: section
::: titlepage
# []{#introduction-to-systemd_configuring-basic-system-settings.html#_additional_resources_or_next_steps}其他资源（或后续步骤） {.title}
:::
::: itemizedlist
-   Red Hat Enterprise Linux 7 的
    [迁移规划指南](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Migration_Planning_Guide/){.link}
:::
:::
:::
[]{#managing-system-services-with-systemctl_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#managing-system-services-with-systemctl_configuring-basic-system-settings.html#managing-system-services-with-systemctl_configuring-basic-system-settings}第 14 章 使用 systemctl 管理系统服务 {.title}