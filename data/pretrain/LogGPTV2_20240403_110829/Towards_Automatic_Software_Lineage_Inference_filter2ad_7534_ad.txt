y
t
i
x
e
l
p
m
o
C
c
i
t
a
m
o
l
c
y
C
 2850
 2800
)
B
K
(
e
z
i
S
e
l
i
F
 2750
 2700
 2650
 2600
 2550
File Size
Cyclomatic Complexity
File Size
Cyclomatic Complexity
 10400
 10200
 10000
 9800
 9600
 9400
 9200
 9000
y
t
i
x
e
l
p
m
o
C
c
i
t
a
m
o
l
c
y
C
)
B
K
(
e
z
i
S
e
l
i
F
 290
 280
 270
 260
 250
 240
 230
 220
 210
 200
 190
 180
 2000
 1900
 1800
 1700
 1600
 1500
 1400
 1300
 1200
 1100
y
t
i
x
e
l
p
m
o
C
c
i
t
a
m
o
l
c
y
C
 0
 20
 40
 60
 80
 100
 120
 0
 20
 40
 60
 80
 100  120  140
 0
 10
 20
 30
Revision
(a) memcached
Revision
(b) redis
Figure 6: File size and complexity for contiguous revisions
 40
 50
Revision
 60
 70
 80
(c) redislite
7.1.2 Results
What selection of features provides the best lineage graph
with respect to the ground truth? We evaluated different
feature sets on diverse data sets.
i) Contiguous Revisions: In order to identify the ﬁrst
revision of each program, code complexity and code size
of every revision were measured. As shown in Figure 6,
both ﬁle size and cyclomatic complexity generally in-
creased as new revisions were released. For these three
data sets, the ﬁrst revisions were correctly identiﬁed by
selecting the revision that had the minimum ﬁle size and
cyclomatic complexity.
A lineage for each program was constructed as described
in §4.1. Although section/ﬁle size achieved high accu-
racies, e.g., 95.5%–99.5%, they are not reliable features
because many ties can decrease/increase the accuracies de-
pending on random guesses. n-grams over byte sequences
generally achieved better accuracies; however, 2-grams
(small size of n) were relatively unreliable features, e.g.,
6.3% inversion error in redis. In our experiments, n=4
bytes worked reasonably well for these three data sets.
The use of disassembly instructions had up to 5% in-
version error in redislite. Most errors came from
syntactical differences, e.g., changes in offsets and jump
target addresses. After normalizing operands, instruc-
tion mnemonics with operands types decreased the errors
substantially, e.g., from 5% to 0.4%. With additional
normalization, normalized instruction mnemonics with
operands types achieved the same or better accuracies.
Note that more normalized features can result in better or
worse accuracies because there may be more ties where
random guesses are involved.
In order to break ties, more speciﬁc features were used
in multi-resolution features. For example, all 10 tie cases
in memcached were correctly resolved by using more
speciﬁc features. This demonstrated the effectiveness of
using multi-resolution features for breaking ties.
ii) Released Versions:The ﬁrst/root revisions were also
correctly identiﬁed by selecting the revision that had the
minimum code size. In some cases, simple feature sets,
e.g., section/ﬁle size, could achieve higher accuracies than
semantically rich feature sets (requiring more expensive
process), e.g., instruction sequences. For example, ILINE
with section size yielded 88.3% accuracy, while ILINE
with instructions achieved 77.8% accuracy in grep. This,
however, was improved to 100% with normalization. Like
the experiments on contiguous revisions, 2-grams per-
formed worse in the experiments on released versions,
e.g., 18.9% accuracy in sendmail. Among various fea-
ture sets, multi-resolution features outperformed the other
feature sets, e.g., 99.3%–100%.
iii) Actual Release Binaries: The ﬁrst/root revisions for
nano and openssh were correctly identiﬁed by select-
ing the revision that had the minimum code size. For the
other ﬁve data sets, we performed the experiments both
with the wrong inferred root and with the correct root
given from the ground truth.
Overall accuracy of the constructed lineage was fairly
high across all the data sets even though we did not control
the variables of the compiling process, e.g., 83.3%–99.8%
accuracy with the correct root. One possible explanation
is that closer revisions (developed around the same time)
might be compiled with the same version of compiler
(available around the same time), which can make neigh-
boring revisions look related to each other at the binary
code level.
It was conﬁrmed that lineage inference can be improved
with the knowledge of the correct root. For example,
ILINE picked a wrong revision as the ﬁrst revision in
FileZilla, which resulted in 51.6% accuracy; in con-
trast, the accuracy increased to 99.8% with the correct
root revision.
iv) Malware: The ﬁrst/root samples for all seven clus-
ters were correctly identiﬁed by selecting the sample that
had the minimum code size. Section size achieved high
accuracies, e.g., 93.3–100%, which showed new variants
were likely to add more code to previous malware. File
size was not a good feature to infer a lineage of MC2
because all samples in MC2 had the same ﬁle size. The
multi-resolution feature yielded 94.9–100% accuracy.
Dynamic instrumentations at the instruction level enabled
us to catch minor updates between two adjacent vari-
ants. For example, subsequent BlasterWorm samples
add more checks for virtual environments to hide its ma-
licious activities if it is being monitored, e.g., examin-
90  22nd USENIX Security Symposium 
USENIX Association
 100
 10
s
r
e
t
s
u
l
C
f
o
r
e
b
m
u
N
 1
 0
 0.1
 0.2
 0.3
 0.4
 0.5
Distance Threshold
Figure 7: Clustering mixed data set of 2 and 3 programs
ing user names (sandbox, vmware, honey), running pro-
cesses (VBoxService.exe, joeboxserver.exe), and current
ﬁle names (C:\sample.exe). Dynamic feature sets yielded
worse accuracy in MC1, MC2, MC3, MC5, and MC6
while achieving the same accuracy in MC4 and better ac-
curacy in MC7. One main reason of the differences in
accuracy is that dynamic analysis followed a speciﬁc ex-
ecution path depending on the context. For example, in
MC2, some variants exited immediately when they de-
tected a VirtualBox service process, and produced limited
execution traces.
v) k-Straight Line Lineage: We evaluated ILINE on
mixed data sets including k different programs. For
2-straight line lineage, we mixed memcached and
redislite in that both programs have the same func-
tionality and similar code section sizes. Figure 7 shows
the resulting number of clusters with various distance
threshold values. From 0.2 to 0.5 distance threshold, the
resulting number of clusters was 2. This means ILINE
can ﬁrst perform clustering to divide the data set into two
groups, then build a straight line lineage for each group.
The resulting number of clusters of the mixed data set of
3 programs including memcached, redislite, and
redis became stabilized to 3 from 0.2 to 0.5 distance
threshold, which means they were successfully clustered
for the subsequent straight line lineage building process.
We have also evaluated ILINE on three mixed malware
data sets, each of which is a combination of different
clusters in Table 5: {MC2+MC5}, {MC4+MC6}, and
{MC2+MC3+MC7}. For each mixed data set, ILINE also
clustered malware samples correctly for the subsequent
straight line lineage inference. We discuss inferring lin-
eage on incorrect clusters in §9.
7.2 Directed Acyclic Graph Lineage
7.2.1 Data sets
For DAG lineage experiments, we also evaluated ILINE
on both goodware and malware.
i) Goodware: We have collected 10 data sets for di-
rected acyclic graph lineage experiments from github6.
We used github because we know when a project is forked
from a network graph showing the development history
as a graph including branching and merging.
6https://github.com/
3 sets of programs
2 sets of programs
We downloaded DAG revisions that had multiple times of
branching and merging histories, and compiled with the
same compilers and optimization options.
Programs # revisions
Last rev
http-parser
libgit2
redis
redislite
shell-fm
stud
tig
uzbl
webdis
yajl
First rev
Period
55 2010-11-05 2012-07-27 1.7 yr
61 2012-06-25 2012-07-17 0.1 yr
98 2010-04-29 2010-06-04 0.1 yr
97 2011-04-19 2011-06-12 0.1 yr
107 2008-10-01 2012-06-26 3.7 yr
73 2011-06-09 2012-06-01 1.0 yr
58 2006-06-06 2007-06-19 1.0 yr
73 2011-08-07 2012-07-01 0.9 yr
96 2011-01-01 2012-07-20 1.6 yr
62 2010-07-21 2011-12-19 1.4 yr
Table 6: Goodware data sets for DAG lineage
ii) Malware: We used two malware families with
known DAG lineage collected by the Cyber Genome pro-
gram. They contain 30 samples in total.
Cluster # samples Family
21 WormBot
9 MinBot
MC8
MC9
Table 7: Malware data sets for DAG lineage
7.2.2 Results
We set two policies for DAG lineage experiments: the
use of timestamp (none/pseudo/real) and the use of the
real root (none/real). The real timestamp implies the real
root so that we explored 3× 2− 1 = 5 different setups.
We used multi-resolution feature sets for DAG lineage
experiments because multi-resolution feature sets attained
the best accuracy in constructing straight line lineage.
i) Goodware: Without having any prior knowledge,
ILINE achieved 71.5%–94.1% PO accuracies. By using
the real root revision, the accuracies increased to 71.5%–
96.1%. For example, in case of tig, ILINE gained about
20% increase in the accuracy.
With pseudo timestamps, accuracies were worse even
with the real root revisions for most of data sets, e.g.,
64.0%–90.9% (see §8). By using the real timestamps,
ILINE achieved higher accuracies of 84.1%–96.7%. This
means that the recovered DAG lineages were very close
to the true DAG lineages.
ii) Malware: ILINE achieved 68.6%–75.0% accuracies
without any prior knowledge. Using the correct times-
tamps, the accuracies increased notably to 86.2%–91.7%.
While we obtained the real timestamps from the ground
truth in our experiments, we can also leverage ﬁrst seen