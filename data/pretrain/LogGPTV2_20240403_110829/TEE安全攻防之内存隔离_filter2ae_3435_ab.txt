        // 根据已注册的物理地址空间信息来设置memory_map中tee_mmap_region的物理地址范围（即PA、SIZE）
        last = collect_mem_ranges(memory_map, num_elems);
        // 设置memory_map中tee_mmap_region的region_size（内存粒度）
        // 如果是tee侧的安全内存，则设置region_size为SMALL_PAGE_SIZE(4K)
        assign_mem_granularity(memory_map);
        /*
         * To ease mapping and lower use of xlat tables, sort mapping
         * description moving small-page regions after the pgdir regions.
         */
        qsort(memory_map, last, sizeof(struct tee_mmap_region),
              cmp_init_mem_map);
        // 添加一个MEM_AREA_PAGER_VASPACE类型的tee_mmap_region
        add_pager_vaspace(memory_map, num_elems, &last);
        if (IS_ENABLED(CFG_CORE_ASLR) && seed) {
            // 如果开启了ASLR，则将安全内存起始地址加上一个随机值
            vaddr_t base_addr = TEE_RAM_START + seed;
            const unsigned int va_width = get_va_width();
            const vaddr_t va_mask = GENMASK_64(va_width - 1,
                               SMALL_PAGE_SHIFT);
            vaddr_t ba = base_addr;
            size_t n = 0;
            for (n = 0; n l1_tables, 0, sizeof(l1_xlation_table));
        for (n = 0; !core_mmap_is_end_of_table(mm + n); n++)
            //如果不是动态虚拟地址空间，则进行填充页表（映射内存）
            if (!core_mmu_is_dynamic_vaspace(mm + n))            
                // 根据PA/VA填充页表，即做内存映射 
                core_mmu_map_region(prtn, mm + n);
        /*
         * Primary mapping table is ready at index `get_core_pos()`
         * whose value may not be ZERO. Take this index as copy source.
         */
         // 根据已设置的页表设置所有核的页表
        for (n = 0; n l1_tables[0][n],
                   prtn->l1_tables[0][get_core_pos()],
                   XLAT_ENTRY_SIZE * NUM_L1_ENTRIES);
        }
    }
到这里， **TEE侧OS已经完成了对物理内存的映射** ，包括安全内存和共享内存。在开启分页后，TEEOS就可以访问这些虚拟内存地址空间了。
## 安全侧地址校验
下面以符合GP规范的TEE接口为例，简单介绍下CA和TA的通信流程：
篇幅所限，这里仅分析Secure
World侧的调用流程，重点关注TA_InvokeCommandEntryPoint调用流程，此函数用来处理所有来自Normal
World侧的请求，安全侧可信应用的漏洞挖掘也是从这个函数开始入手，这里我们只分析地址校验相关流程。
1.在TEEC_OpenSession中会去 **加载TA的elf文件**
，并设置相应的函数操作表，最终调用目标TA的TA_OpenSessionEntryPoint。
    __tee_entry_std
        --> entry_open_session
        --> tee_ta_open_session
              --> tee_ta_init_session --> tee_ta_init_user_session --> set_ta_ctx_ops
              --> ctx->ops->enter_open_session (user_ta_enter_open_session)
                    --> user_ta_enter
                         --> tee_mmu_map_param
                         --> thread_enter_user_mode
                              --> __thread_enter_user_mode // 返回到S_EL0，调用目标TA的TA_OpenSessionEntryPoint
2.TA_InvokeCommandEntryPoint调用流程如下，在此函数中会对REE传入的地址进行校验。
    __tee_entry_std
       --> entry_invoke_command
             --> copy_in_param
                  --> set_tmem_param   // 如果是memref类型，则调用set_tmem_param分配共享内存
                      --> msg_param_mobj_from_nocontig
                          --> mobj_mapped_shm_alloc
                               --> mobj_reg_shm_alloc // 最终会调用 core_pbuf_is来检查RRE传入的PA是否在非安全内存地址 范围内
             --> tee_ta_get_session
             --> tee_ta_invoke_command
                  --> check_params 
                  --> sess->ctx->ops->enter_invoke_cmd (user_ta_enter_invoke_cmd)
                       --> user_ta_enter
                            --> tee_mmu_map_param // 映射用户空间地址 (S_EL0)
                            --> tee_ta_push_current_session
                            --> thread_enter_user_mode // 返回S_EL0相应 的TA中执行TA_InvokeCommandEntryPoint
通过以上代码分析可知，在调用TA的TA_InvokeCommandEntryPoint函数之前会对REE侧传入的参数类型进行检查
，在TA代码中使用REE传入参数作为内存地址的场景下，如果未校验对应的参数类型或者参数类型为TEEC_VALUE_INPUT（与实际使用参数类型不匹配），则会绕过上面core_pbuf_is对REE传入PA的检查
，可以传入任意值，这个值可以为安全内存PA，这样就可以 **导致以S_EL0权限读写任意安全内存** 。
## 总结
TEE作为可信执行环境，通常用于运行处理指纹、人脸、PIN码等关键敏感信息的可信应用，即使手机被ROOT，攻击者也无法获取这些敏感数据。因此TEE侧程序的安全至关重要，本文深入分析了TRUSTZONE物理内存隔离、TEEOS内存管理及TEE侧对REE传入地址的校验。在了解了这些原理之后，我们就可以进行漏洞挖掘了，
当然也能写出简单有效的FUZZ工具。只有对漏洞原理、攻击方法进行深入的理解 ，才能进行有效的防御。
PS:
荣耀安全实验室是公司内专注于攻防研究的部门，这里有自由和开放的技术研究氛围，待遇优厚，欢迎有志于移动安全的大牛小牛加入我们！有意请联系：[PI:EMAIL](mailto:PI:EMAIL)，工作地点：北京
## 参考
1.TrustZone Address Space Controller TZC-380 Technical Reference Manual  
2.GlobalPlatform Device Technology TEE Client API Specification  
3.GlobalPlatform Device Technology TEE Internal API Specification  
4.Arm Trusted Firmware  
5.OP-TEE