使用同样的查询，相比部分索引，性能下降一些。  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from user_pos where sex='0' order by pos  point(5000,5000) limit 100;  
                                                                     QUERY PLAN                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.42..6.50 rows=100 width=30) (actual time=0.174..0.434 rows=100 loops=1)  
   Output: id, pos, sex, ((pos  '(5000,5000)'::point))  
   Buffers: shared hit=106  
   ->  Index Scan using idx_user_pos_0 on public.user_pos  (cost=0.42..303079.91 rows=4983333 width=30) (actual time=0.173..0.422 rows=100 loops=1)  
         Output: id, pos, sex, (pos  '(5000,5000)'::point)  
         Index Cond: (user_pos.sex = '0'::bpchar)  
         Order By: (user_pos.pos  '(5000,5000)'::point)  
         Buffers: shared hit=106  
 Planning time: 0.194 ms  
 Execution time: 0.471 ms  
(10 rows)  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from user_pos where sex='1' order by pos  point(5000,5000) limit 100;  
                                                                     QUERY PLAN                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.42..6.48 rows=100 width=30) (actual time=0.205..0.457 rows=100 loops=1)  
   Output: id, pos, sex, ((pos  '(5000,5000)'::point))  
   Buffers: shared hit=107  
   ->  Index Scan using idx_user_pos_0 on public.user_pos  (cost=0.42..304368.42 rows=5016667 width=30) (actual time=0.203..0.445 rows=100 loops=1)  
         Output: id, pos, sex, (pos  '(5000,5000)'::point)  
         Index Cond: (user_pos.sex = '1'::bpchar)  
         Order By: (user_pos.pos  '(5000,5000)'::point)  
         Buffers: shared hit=107  
 Planning time: 0.105 ms  
 Execution time: 0.494 ms  
(10 rows)  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from user_pos order by pos  point(5000,5000) limit 100;  
                                                                     QUERY PLAN                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.42..5.14 rows=100 width=30) (actual time=0.142..0.363 rows=100 loops=1)  
   Output: id, pos, sex, ((pos  '(5000,5000)'::point))  
   Buffers: shared hit=109  
   ->  Index Scan using idx_user_pos_0 on public.user_pos  (cost=0.42..472151.42 rows=10000000 width=30) (actual time=0.141..0.350 rows=100 loops=1)  
         Output: id, pos, sex, (pos  '(5000,5000)'::point)  
         Order By: (user_pos.pos  '(5000,5000)'::point)  
         Buffers: shared hit=109  
 Planning time: 0.087 ms  
 Execution time: 0.399 ms  
(9 rows)  
```  
## 问题2，搜索激活的用户，附加其他搜索条件。  
假设业务一定不会对未激活的用户进行检索。那么激活就是必选条件。  
可以使用 激活 作为部分索引的条件，避免对不必要的数据进行索引。  
```  
create table test(id int, actived boolean, colx int);  
create index idx_test_1 on test(id) where actived;  
insert into test select generate_series(1,1000000), random()::int::boolean, 1 ;  
postgres=# explain (analyze,verbose,timing,costs,buffers) select id from test where actived limit 10;  
                                                                 QUERY PLAN                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.42..0.67 rows=10 width=4) (actual time=0.033..0.036 rows=10 loops=1)  
   Output: id  
   Buffers: shared hit=4  
   ->  Index Only Scan using idx_test_1 on public.test  (cost=0.42..12341.42 rows=503700 width=4) (actual time=0.032..0.034 rows=10 loops=1)  
         Output: id  
         Heap Fetches: 10  
         Buffers: shared hit=4  
 Planning time: 0.075 ms  
 Execution time: 0.054 ms  
(9 rows)  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from test where actived limit 10;  
                                                               QUERY PLAN                                                                 
----------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.42..0.67 rows=10 width=9) (actual time=0.027..0.033 rows=10 loops=1)  
   Output: id, actived, colx  
   Buffers: shared hit=4  
   ->  Index Scan using idx_test_1 on public.test  (cost=0.42..12341.42 rows=503700 width=9) (actual time=0.025..0.029 rows=10 loops=1)  
         Output: id, actived, colx  
         Buffers: shared hit=4  
 Planning time: 0.101 ms  
 Execution time: 0.058 ms  
(8 rows)  
```  
## 问题3，根据纠偏坐标搜索近距离用户  
例如在某些时候，可能由于设备的问题，或者各国地理位置编码的问题使得经纬度需要纠偏，因此查询时都是通过纠偏后的数据进行查询。  
这个需求，需要用到表达式索引，因为纠偏是需要计算的，我们需要将纠偏这个计算作为索引表达式。  
纠偏函数例子  
```  
postgres=# create or replace function fix_point(point) returns point as $$  
  select $1 + point(0.9, 12);  
$$ language sql strict immutable;  
CREATE FUNCTION  
postgres=# select fix_point(point(1,1));  
 fix_point   
-----------  
 (1.9,13)  
(1 row)  
```  
测试数据  
```  
create table test(id int, pos point, info text);  
insert into test select generate_series(1,100000), point(random()*10000, random()*10000), 'test';  
```  
纠偏表达式索引  
```  
create index idx_test_1 on test using gist( fix_point(pos) );  
```  
纠偏查询  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from test order by fix_point(pos)  point (1,10000) limit 10;;  
                                                               QUERY PLAN                                                                 
----------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.28..0.75 rows=10 width=33) (actual time=0.062..0.078 rows=10 loops=1)  
   Output: id, pos, info, (((pos + '(0.9,12)'::point)  '(1,10000)'::point))  
   Buffers: shared hit=13  
   ->  Index Scan using idx_test_1 on public.test  (cost=0.28..4717.78 rows=100000 width=33) (actual time=0.061..0.076 rows=10 loops=1)  
         Output: id, pos, info, ((pos + '(0.9,12)'::point)  '(1,10000)'::point)  
         Order By: ((test.pos + '(0.9,12)'::point)  '(1,10000)'::point)  
         Buffers: shared hit=13  
 Planning time: 0.262 ms  
 Execution time: 0.113 ms  
(9 rows)  
```  
## 问题4，条件表达式索引 - 全量部分索引  
通常我们在建立索引时，需要制定在哪个列、哪些列、哪个表达式上面。  
还有一种方法，实际上也是表达式索引，只是表达式看起来比较奇特，例如建立女性索引。  
```  
postgres=# create table user_pos(  
id int primary key,  -- 主键  
pos point,  -- 位置  
sex char(1)  -- 性别  
);  
CREATE TABLE  
postgres=# insert into user_pos select generate_series(1,10000000), point(random()*10000,random()*10000), (random())::int::text;  
INSERT 0 10000000  
```  
条件表达式索引  
```  
create index idx1 on user_pos ( (sex='0') );  
```  
这个索引的内容是: sex='0'的结果 + 行号  
测试  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from user_pos where sex='0';  
                                                                 QUERY PLAN                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.user_pos  (cost=46663.43..182485.09 rows=4983333 width=22) (actual time=212.844..1420.697 rows=5000542 loops=1)  
   Output: id, pos, sex  
   Recheck Cond: (user_pos.sex = '0'::bpchar)  
   Rows Removed by Index Recheck: 2244498  
   Heap Blocks: exact=40505 lossy=33025  
   Buffers: shared hit=87195  
   ->  Bitmap Index Scan on idx_user_pos_0  (cost=0.00..45417.60 rows=4983333 width=0) (actual time=204.879..204.879 rows=5000542 loops=1)  
         Buffers: shared hit=13665  
 Planning time: 0.395 ms  
 Execution time: 1688.563 ms  
(10 rows)  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from user_pos where sex='0' limit 10;  
                                                               QUERY PLAN                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.43..0.90 rows=10 width=22) (actual time=0.058..0.063 rows=10 loops=1)  
   Output: id, pos, sex  
   Buffers: shared hit=1 read=3  
   ->  Index Scan using idx1 on public.user_pos  (cost=0.43..230861.93 rows=4983333 width=22) (actual time=0.057..0.060 rows=10 loops=1)  
         Output: id, pos, sex  
         Index Cond: ((user_pos.sex = '0'::bpchar) = true)  
         Filter: (user_pos.sex = '0'::bpchar)  
         Buffers: shared hit=1 read=3  
 Planning time: 0.146 ms  
 Execution time: 0.085 ms  
(10 rows)  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")