P
H
,
(
G
5,us
er,-)
H4
(HPAG5,user,-)
G
3,us
er,ro
ot)
H3
H0
ftp_rhost(0,1)
trust(1,0)
rsh(0,1)
user(1)
local_buf(1)
root(1)
sshd_bof(0,1)
Fig. 1. A sample hosts access graph
With host-pair attack graphs and hosts access graph,
we can obtain all of the attack paths from one host to
another, even if they could not access each other directly.
3) Comparing our hosts access graph with host-centric
attack graph and host-based access graph
For a target network with N hosts, our hosts access
graph has N + 1 nodes, which includes an outside
attacker’s host. And there is only one direct edge for
each pair of nodes at most. In the contrast, a host-centric
attack graph in [10] may has 2N + 1 nodes at most,
for it uses different nodes to represent the user and
root states in a same host. Additional, R. Hewett and
P. Kijsanayothin draw all of the detailed attack paths in
their host-centric attack graph, which results in multiple
directed edges between two nodes. So, our hosts access
graph, has a simpler structure when compared to host-
centric attack graph’s.
Comparing with host-based access graph in [12], our
hosts access graph has the same nodes as theirs. How-
ever, our hosts access graph has no directed edges,
which is included in the host-based access graph. Ap-
parently, our hosts access graph is therefore simpler than
host-based access graph.
B. Analysis on probability of success
Probability of success is always used in analysis of network
security. In this section, we apply probability of success to
three important objects in sequence, which are; atomic exploit,
host-pair attack graphs, and hosts access graph.
Firstly, we apply probability of success to each atomic
exploit. A general method is to retrieve such probability values
from a knowledge database. Such a database may be establish
by many experts.
130
Secondly, we calculate the probabilities of obtaining user
and root privileges successfully for each host-pair attack
graph. Some previous works [5][6][7] have discussed how to
measure the security of a network. In our model, we calculate
all the probabilities of attack paths which reach root privilege,
and then choose the maximum value as the probability of
obtaining a root privilege successfully. Using the same method,
we get the maximum probability of obtaining a user privilege
successfully. Furthermore, for each host-pair attack graph we
compare the values of these two probabilities, and choose the
higher value as the ﬁnal probability of obtaining user privilege
successfully. The reason is that if someone has obtained root
access, he can also get a user access.
Finally, we change the edges’ label of the hosts access graph
as (HPAGID, Puser, Proot), where Puser and Proot are the
probabilities value of obtaining user and root privileges. With
probabilities of obtaining user and root privileges, we relabel
the corresponding edges in the hosts access graph. Figure 2
shows such an example.
H0
(HPAG1, 0.6, 0.2)
H1
(HPAG2, 0.4, 0.3)
(
H
P
A
H2
)
3
0
.
,
.
4
0
,
4
G
A
P
H
(
G
3, 0.8, 0.4)
H3
(
H
P
A
G
5, 0.7, 0)
H4
(HPAG5, 0.7, 0)
Fig. 2. A sample hosts access graph with probability
C. Analysis on adjacency matrixes
Host-pair attack graphs and hosts access graph describe
the attack scenarios between host-pairs which are connected
directly. In order to evaluate the overall network, we need to
composite these attack probabilities to a global measurement
dynamically. Here, we propose a methodology to evaluate
network security based on adjacency matrixes.
For a network with N hosts, we draw a hosts access graph
with N + 1 nodes, which includes a host indicating an outside
attacker’ host. We use H1, H2, ···, Hn to indicate hosts in
the target network, and use H0 to indicate an attacker’s host.
So, the user adjacency matrix U is a (N +1)∗(N +1) matrix,
where element uij indicates the probability of obtaining user
privilege from host Hi to host Hj. Obviously, we can get
uii=1. For simplicity, we start
the subscript of rows and
columns of matrix from 0 to N as the subscript of hosts ID
grows.
The next step, we introduce an operation function F , C =
F (A, B), which takes two adjacency matrixes A and B as
input data, and output a matrix C. Here, A, B, and C have
the same size. The operation rule of function F is deﬁned as:
cij = max
(aik ∗ bkj)
k
= max(ai0 ∗ b0j, ai1 ∗ b2j,··· , aiN ∗ bN j)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:06:04 UTC from IEEE Xplore.  Restrictions apply. 
where cij, aik, and bkj are elements of matrix C, A, and B
individually (0 ≤ i, j, k ≤ N).
conclusions.
With the function F , it is easy to conduce to the following
1) if we have 0 ≤ aij ≤ 1 and 0 ≤ bij ≤ 1, than we get
2) F satisﬁes the commutative law, F (A, B) = F (B, A);
3) F satisﬁes the associative law, F (F (A, B), C) =
0 ≤ cij ≤ 1;
F (A, F (B, C)).
Then, we deﬁne the power iterations of Function F , that is,
F m(U) = F (F m−1(U), U), where m > 0 and F 0(U) = I.
I is an element matrix. In other words, F m(U) is the result
of square adjacency matrix U raised to the power m using
function F .
In fact, element uij in U represents the probability value of
obtaining user privilege from host Hi to Hj directly. Following
the operation of F , element aij in F 2(U) = F (U, U) repre-
sent the maximum probability of obtaining user privilege from
host Hi to Hj within 2-steps attacks. Similarly, elements in
F 3(U) gives the maximum probability within 3-steps attacks,
etc.
It is easy to see that we will get a stable matrix, Usucc =
F N−1(U) = F M (U), where M > N − 1. Elements in
Usucc give the maximum probabilities of obtain user privilege
between corresponding pair of hosts directly or indirectly.
To get the maximum probabilities of obtain root privilege
between each pair of hosts, we deﬁne root adjacency matrix
R as a (N + 1) ∗ (N + 1) matrix, where elements rij gives
the probability of obtaining root privilege form host Hi to
Hj. When i equals j, elements rij = rii gives the probability
of obtaining root privilege from a user privilege in the same
host Hi. As an exception, we set the value of r00 as 1.
Then, Rsucc = F (Usucc, R) is the maximum probability
matrix, where element rsucc
is the probability of obtaining
root privileges on host Hj from host Hi directly or indirectly.
Usucc and Rsucc in our model give many probability
values about network security, which show the probabilities
of compromising hosts successfully. Probability values in ﬁrst
rows describe the likelihood of compromising internal hosts
launched from outside attacker, while the values in second
rows describes the likelihood launched from host H1, etc.
So, our model describes overall security of a network, and
is different with previous network security analysis based on
attack graphs.
ij
1) Our model can evaluate network security with multiple
target hosts at the same time rather only one.
2) Our model can not only describe the potential at-
tack probabilities of success launched from outside at-
tacker, but also describe the potential attack probabilities
launched from inside malicious users.
In order to understand Usucc and Rsucc clearly, we consider
these matrixes as color matrixes, and draw them in a gray scale
image. The concrete example will be shown in the next section.
Interestingly, when we set all of probability values of atomic
exploits as 1, our graph is the same as reachability graph in
[21].
D. network security measurement
With Usucc and Rsucc, we continue to measure overall
security of a network. Suppose the set of important hosts
in network is C, C ⊆ H. Here an important host means it
contains some critical resources or it would cause the damage
of the network when it is compromised. For each host Hk in
C (1 ≤ k ≤ N), if a malicious attacker could compromise
it via detected vulnerabilities and obtain a user privilege, the
prospective damage to the network is duk. While an attacker
compromises it and obtains an root privilege, the prospective
damage is drk. Then the total prospective damage of whole
network brought by this attacker in host Hi is
TDHi =
(max(duk ∗ uik, drk ∗ rik))
(cid:2)
Hk∈C
Since the outside attacker is the host H0, TDH0 is the
potential damage brought by the outside attacker. Furthermore,
we look TDH0 as a security metric of a network, which
describes network’s security level as damage quantitatively. A
secure network should has a small value of TDHi as possible.
Obviously, duk and drk describe the importance of host Hk,
we may ﬁll them with the pecuniary losses. Then the value of
TDH0 gives the total pecuniary loss of a network caused by
an outside attacker.
However, there are still some difﬁculties to put TDH0 in
practice sometimes. The ﬁrst difﬁculty lies on the complication
to compute TDH0. We need to give duk and drk for each host
Hk at ﬁrst, and then calculate a TDH0 through the complicated
expressions. The second difﬁculty is that TDH0 is not suitable
for comparing security levels with different networks, for the
values of duk and drk are related with the speciﬁc network
environments. For example, if a network is used in a bank,
and contains sensitive credit card information, we should set
larger values for duk and drk than those in an unimportant
network with a similar structure, for example, a network in a
laboratory.
So, we establish a general metric index, dangerous score,
to indicate the security level of a network. Here we use wk
rather than duk and drk. For each host Hk in C, wk is its
important factor, where 0 ≤ wk ≤ 1. The higher value of
wk is, the more important the corresponding host is. We set a
host’s important factor as 1 when it contains crucial resources,
and set a host’s important factor as 0 when it contains nothing
important. As an interesting example, if there are several hosts
which all have crucial resources, and when any of these hosts
is compromised means the network is destroyed. We could set
all the values of wk of these hosts as 1. Then, the network
danger score, DS, is
DS =
(wk ∗ r0k)
(cid:2)
Hk∈C
The value of DS indicates the general dangerous level of
a network. Obviously, its value is greater than 0, and its
maximum value is equal to the number of hosts in C. The
smaller this value is,
the more secure the network is. In
general, we can deﬁne the following security sections, values
131
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:06:04 UTC from IEEE Xplore.  Restrictions apply. 
in [0, 0.1) indicate a secure network, values in [0.1, 0.4)
indicate a less secure network, values in [0.4, 0.7) indicate a
less dangerous network, values in [0.7, 1] indicate a dangerous
network, and values greater than 1 indicates a very dangerous
network.
E. detecting inside threatening hosts and stepping stones
Automatic recommendations for hardening network are wel-
comed by network administrators, since the attack graphs are
often large, complex, and difﬁcult to understand. Although
previous analysis on attack graphs talk about the probability
of success [5] and strength of the weakest adversary [6], few
suggestions are given to prevent malicious inside attackers
from attacking networks. In this section, we try to give a
prioritized list of threatening host in a network. We name
a host as a threatening host, when its valid user becomes
malicious and starts to attack other hosts in the network.
As we know, the total prospective damage of whole network
brought by a malicious attacker in host Hi is TDHi. Then
we sort the values of TDHi to get a prioritized list, where
1 ≤ i ≤ N. The higher value is, the more threatening to
network the corresponding host is. There are two meanings
to sort threatening hosts. Firstly, TDHi describe the potential
damage in network, which would give network administrators
useful suggestions on how to divide network into groups and
set up restricted access rules. Secondly, the values of TDHi
describes the quantitative potential damage brought by host
Hi. The network administrators may harden network starting
from a host with high TDHi.
Usually, outside attackers need to compromise a set of
intermediate hosts before they reach the ﬁnal targets. These
intermediate hosts are called stepping stones [24]. With the
results matrixes, U succ and Rsucc, we propose a new method
to detect potential stepping stones, which is different with
previous works [24][25].
For an inside host Hi,
(cid:2)
r0i ∗
(wk ∗ rik)
TSi =
(cid:2)
Hk∈C
(wk ∗ r0k)
Hk∈C
is its transition score, which evaluates the host’s action as a
stepping stone when an outside attacker attacks the network.
TSi tells us how important host Hi is when an outside attacker
penetrate a network. The higher value TSi is, the more help
given by the corresponding host Hi is. Obviously, the value
of TSi is in [0, 1], where 1 ≤ i ≤ N. When sorting the values
of transitions scores for all inside hosts, we create another
prioritized list of stepping stones. Those hosts with high value
are key stepping hosts, and are the ﬁrst set of hosts which
need to be patched.
F. computation cost evaluation
The computational cost of our model can be roughly ana-
lyzed as follows. When generating a host-pair attack graph,
the algorithm deals with two hosts only, so we look the
generation and analysis time as constants. While we need to
generate (N +1)∗N copies of host-pair attack graphs at most
in a network with N + 1 hosts, the worst computation cost is
O(N 2). The subsequent computation of analyzing all host-pair
attack graphs and generating a hosts access graph requires
O(N 2) too. In contrast with previous works, our model has
the same upper bound computational cost with host-centric
attack graph in [10], and less computational cost than that in
host-based access graphs in [12].
In realistic network, ﬁrewalls, network gates, and access
rules divide the network into several parts. When generating
host-pair attack graphs for a target host from the source hosts
in the same part, we will get the same network reachability, so
one host-pair attack graph needs to be generated. Furthermore,
we could also group similar hosts together and look them as
one host in the network, since these hosts have the similar
conﬁgurations and would play the same roles in the network
attacks. These two methods would apparently decrease the
number of host-pair attack graphs we need to generate.
In the following evaluation process, the computation of
function F is O(N 2). As we need to iterate function F about
N times to get Usucc and Rsucc, the total computation cost
in generation Usucc and Rsucc is about O(N 3). In realistic
enterprise networks, many hosts could not access each other
directly due to the existence of ﬁrewalls and gateways, thus
matrixes U and R may be sparse matrices, which would
make our algorithms run faster. Therefore the upper bound
computational cost of our model is O(N 3).
A. network environment
IV. EXAMPLES
In order to simplify the question, we process the same
example network used by [12][10], which is shown in Figure 3.
FW:Firewall
W: Web server
H1
A: Attacker
H0
F: File server
H2
D: Database server
H3
Fig. 3. Experimental network
In this network, there are three target hosts, which are a
publicly accessible web server W, a ﬁle server F and a database
server D. We also use H1, H2, and H3 to indicate them
individually. In addition, an attacker’s host, A, is outside the
network. We also use H0 to indicate A. A ﬁrewall FW is used
to protect the network, and its access rule is shown as Table I.
The referenced hosts’ vulnerabilities which would be exploited
by attackers is shown in Table II. For each vulnerability,
132
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:06:04 UTC from IEEE Xplore.  Restrictions apply. 
the pre-condition, post-condition, and exploiting probability
of success are also described in Table II.
TABLE I
FIREWALL RULES
Source Destination
W(H1)
All
W(H1)
All
F(H2)
All