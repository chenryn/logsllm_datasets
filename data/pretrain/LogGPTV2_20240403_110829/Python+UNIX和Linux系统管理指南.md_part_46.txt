5at
5 at 1207272461.2
S
S
5at
5a
1207272465.2
at1207272469.2
at 1207272468.2
at 1207272457.19
at
1207272467.2
1207272466.2
1207272463.2
：1207272462.2
www.TopSage.com
Y
进程与并发丨321
---
## Page 336
序员将特定的事件与特定的代码相关联。代码是与某一事件相关的代码，可以参考event
如按下按钮或是复选框被选中。当这些事件发生时，应用程序知道该如何去做，因为程
等待发生的事件。一个事件是发生在应用中的事情，尤其对于GUI组件引发的事件，例
322
件发生时，它能正确地进行响应。
柄。为了更为精确，GUI工具提供一个事件循环，静默地循环以等待事件发生，而当事
handlers（事件句柄）。GUI工具的任务之一是当相关的事件发生时，调用正确的事件句
应用程序等待什么呢？当用户做了一些操作，它是如何知道该如何处理的呢？应用程序
动检测升级，不需要明确的请求或是用户的建议，但是这是另一回事。
待用户的一些操作。当然有一些应用程序似乎由其自身来控制执行，例如，Firefox的自
列的初始化，或许是加载一些配置并将其设为某种已知的状态。但是通常应用程序只等
如浏览器、电子邮件客户端、word字处理器。你运行这些应用程序，应用程序执行一系
事件发生并执行你的工具，需要用户提供一些输出。想一下你的GUI应用程序经验，例
cron、at或是其他工具中运行时，这是明显的情况。但是当你写一个GUI工具时，为了使
当写一个控制台应用时，你经常期望它能够运行并结束，不需要用户的干预。当脚本从
GUI创建理论
个非常简单的使用PyGTK的应用，然后使用curses和Django建立相同的应用。最后，我
本章将集中在PyGTK、curses和Django的web框架。我们从基本的GUI开始，然后创建一
的应用。
上讲，你正在使用GUI，包括传统上使用GTK和QT工具包的GUI应用，也包括基于web
然而，有时你需建立一个GUI应用，通过GUI应用，你的工作会简单得多。在广泛意义
当人们考虑一名系统管理员的职责包括哪些时，构造GUI应用或许根本不会让人想起。
创建GUI
第11章
www.TopSage.com
---
## Page 337
#!/usr/bin/env python
import time
import pygtk
例11-1：简单的PyGTK应用(单窗口单按钮)
布，你可能会遇到些麻烦。参见例11-1。
如果你正在运行Ubuntu，应该已经默认安装。如果没有一个针对你所用平台的二进制发
个相对较新的Linux发布版本，安装非常简单。对Windows来说，看起来甚至更容易。
在运行这个示例或是编写自己的PyGTK应用之前，你必须安装PyGTK。如果你正运行-
程的基本原则。
简单的GUI应用，该程序没有执行任何有意义的动作，只是为了向大家演示一些GUI编
我们将编写一段简单的代码，
生成一个简单的PyGTK应用
import
句柄。
希望在单击按钮时，按钮可以执行一些动作，你必然为该按钮的单击事件定义一个事件
用，你需要对gtk.Window和gtk.Button类进行实例化，并将按钮添加到窗口上。如果你
个按键是gtk.Button类的对象。为了创建一个简单的具有一个窗口和一个按钮的GUI应
每一类型的GUI组件对应于一个Python类。例如，一个窗口是gtk.window类的对象；一
能提供的帮助。在这种情况下，通过写少量代码来生成一个GUI并不困难。在PyGTK，
GUI编辑器非常有用，但是有时你或许希望对GUI有更多的控制，甚至超出了编辑器所
Designer作为界面编辑器。
下的PyGTK，你可以使用Glade作为界面编辑器；如果你正使用PyQT，你可以使用QT
用程序，那么界面编辑器列出了你可以使用的所有GUI组件；如果你正使用Linux系统
如按钮、标签、复选框等。例如，如果你工作在Mac主机上，并且选择写一个Cocoa应
为GUI工具使用的GUI编辑器。GUI编辑器列出了GUI应用所需的各种各样的组件，例
的按钮、文本域、标签和复选框？对该问题的答案可能会有些不同。你可以选择使用
这里介绍了应用程序的行为，但是表单又是怎么回事呢？也就是说，你如何获得应用中
具有何种行为。你需要设置事件句柄，当用户触发事件时，GUI工具可以进行调用。
行为被事件驱动。当为GUI应用编码时，你将决定当一个用户做了某些操作时应用程序
gtk
，使用已经介绍的gtk.window和gtk.Button类。以下是一个
www.TopSage.com
X
创建GUI|323
---
## Page 338
PyGTK中创建一个GUI应用不需要必备面向对象的编程经验。你确实必须实例化对象，
在这个示例中，第一件需要注意的事情是main类继承自object而不是某些GTK类。在
324
s.main()
if
def
def main(self):
gtk.main()
self.button.set_label(time.asctime())
#This call makes the button visible, but it won't become visible.
self.window.add(self.button)
#The window is a container. The "add" method puts the button
#another registration of an event handler. This time, when the
self.button = gtk.Button("Click Me")
self.window.connect("destroy", self.quit)
#tells the gtk main loop to call self.quit() when the window "emits"
#this is how you "register" an event handler. Basically, this
self.window = gtk.Window(gtk.WINDOw_TOPLEVEL)
第11章
gtk.main_quit()
This is the handler method for the 'clicked’ event of the button
self.window.show()
#Makes the container visible
self.button.show()
#inside the window.
self.button.connect("clicked",self.update_button_label,None)
#method will get called.
#a button labeled "Click Me"
#the
init__(self):
"stop the main gtk event loop
set thebuttonlabelto thecurrenttime
"destroy"
signal.
www.TopSage.com
PDG
---
## Page 339
这一示例生成了Apache日志解析代码，这是我们在第3章中编写的代码。
图11-1：简单的PyGTK应用一
Me”。每一次你点击按钮的时候，它会修改按钮标签为当前的时间。图11-1和图11-2是
毁和点击事件。如果运行这段代码，这会显示一个具有按钮的窗口，按钮标签为“Click
窗口中，因为窗口是一个容器对象。我们也创建了窗口和按钮的事件句柄，分别针对销
结。我们创建了两个GUI对象，一个是gtk.window，另一个是gtk.Button。将按钮放到
么。这个示例已经被很好地注释，因此不用在这里重复每一个解释，但是会给出一个总
由于选择创建一个自定义的类，首先需要开始理解的是在构造器中发生了什么
容易地访问这些组件。
GUI组件（包括窗口、按钮、复选框等）都会附加到相同的对象上，这允许应用程序很
烈建议创建你自己的类。对于一个GUI应用，创建你自己的类的主要的好处是所有你的
但是不必创建自定义的类。然而，对于复杂一些的示例（例如我们正创建的），我们强
将要包括的功能如下：
生成一个更实际的应用。我们将介绍创建一个Apache日志浏览器的过程。在这一应用中
现在，已经介绍了创建GUI和使用PyGTK的基本知识，接下来是一个示例，使用PyGTK
使用PyGTK创建Apache日志浏览器
图11-2：简单的PyGTK应用——在点击按钮之后
该应用程序在点击按钮之前和之后的截屏。
通过行号，远端主机，状态或是发送字节数对日志进行排序。
查看行数，远端主机，状态，发送字节数；
选择和打开指定的日志文件；
simple_pygtk_app.py
simple pygtk_app.py
在点击按钮之前
Wed Apr2319:42:322008
www.TopSage.com
ClickMe
口
X
创建GUI|325
PDG
---
## Page 340
from apache_log_parser_regex import dictify_logline
#1/usr/bin/env python
例11-2：PyGTK Apache日志浏览器
326
importgtk
例11-2是日志浏览器的源代码。
def
第11章
self.add_column(self.loglines_tree,
#a Liststore holds data that is tied to a list view
self.file_chooser.connect("file_activated", self.load _logfile)
self.toolbar.insert(self.quit_button,1)
open_icon = gtk.Image()
#associate buttons with correct handlers
#create open and quit buttons and icons
#toolbar which contains the open and quit buttons
self.outer_vbox = gtk.VBox()
#a VBox is a container that holds other GUI objects primarily for layout
#stop event loop on window destroy
self.window.maximize()
self.window.set_size_request(640,480)
self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
self.add_column(self.loglines_tree,
#...and set up the proper columns for it
self.loglines_tree = gtk.TreeView(model=self.loglines_store)
self.loglines_store = gtk.ListStore(int, str, str, int, str)
#this ListStore will store tabular data of the form:
self.file_chooser=gtk.FileChooserWidget()
_init_(self):
lf.quit_button.connect("clicked",
lf.open_button.connect("clicked"
en_icon.set_
addbuttons totoolbar
control to select which file to open
lf.toolbar.insert(self.open_button, 0)
t_icon.set_from_stock(gtk.STocK_QUIT,
_from_stock(gtk.STOCK_OPEN, gtk.ICON_SIZE_LARGE_TOOLBAR)
status,
www.TopSage.com
bytes_sent，logline
,self.quit)
self.show_file_chooser)
'Bytes Sent'
'Status',
'Remote Host'
*Line Number'，o)
gtk.ICON_SIZE LARGE_TOOLBAR)
2)
展
---
## Page 341
接下来，跳到_init_()方法，这里创建了一个window对象。与之前的示例略有不同，
main对象没什么特别的，它只是碰巧是放置所有的GUI代码和动作的地方。
在PyGTK Apache日志浏览器示例中，主类ApacheLogViewer仅继承自object。这对于
1.mainO
def main(self):
def show_file_chooser(self, widget, data=None)
defa
gtk.main()
self.file_chooser.show()
tree_view.append_column(column)
column.set_sort_column_id(columnId)
column.set_resizable(True)
add_column(self, tree_view, title,
#but specifically hide the file chooser
#make everything visible
#pack things together
#make the area that holds the apache log scrollable
logfile.close()
self.file_chooser.hide()
self.window.show_all()
for
i, line in enumerate(logfile):
line_dict = dictify_logline(line)
ewColumn(title,
www.TopSage.com
toolbar,False,False)
gtk.CellRendererText() , text=columnId)
columnId, sortable=True):.
创建GUI|327
阁
PDG
---
## Page 342
志文件。行号、远端主机名、状态以及数据的字节数分别在列表控制的每一列中显示。
句柄。最后，添加按钮到工具栏中。就像使用vBox中的pack_start()一样，我们使用
添加到其中的组件提供方法。我们创建为按钮使用的图标、创建按钮、添加按钮的事件
在窗口中添加了VBox之后，添加工具栏和工具按钮。工具栏本身就是一个容器，可以为
进行布置。由于box是容器，可以包括其他box，因此可以自由地将一个box放入另一个
按钮或文本框这样简单的GUI组件即可。通过使用这些工具，可以在窗口上按你的想象
侧）或结尾处的相对位置。如果你不知道某个工具具体是什么，只需要知道它也是类似
在滚动条思想背后是你可以抛动滑块来确定距离起始点（对VBox是上部，对于HBox是左
对象。GTK具有垂直（VBox）和水平（HBox）滚动条的概念，可以在窗口上进行设置。
在创建窗口并设置大小之后，创建VBox。VBox是“垂直滚动条”，
小。
同时，用户在最大化窗口之后可以取消最大化，你或许希望定义取消最大化后的窗口大
或许是一个好的经验。根据PyGTK文档说明，窗口管理器不会响应maximize()请求。
设置窗口能够最大化。综上所述，首先设置为640×480（或是其他一些你喜欢的大小)
设为640×480是合理的，绝不是一个不恰当的默认值），但大一些或许会更好，因此
被最大化。两次设置大小参数是有目的的。虽然640×480是一个合理的尺寸（初始大小
示例中指定了窗口所需的大小。我们初始指定该窗口大小为640×480，然后定义它可以
当启动这一应用程序时，可以看到它满足了初始的需要。我们能够选择并打开指定的日
所有子组件可见。假如在创建的GUI应用程序中，希望文件选择器不可见，直到点击了
最后，设置可见和不可见。使用show_all()调用将主窗口设置为可见。这个调用也使得
日志行）放到滚动窗口中，这样如果有太多的行，可以进行滚动。
合在一起。将工具条、文件选择器和滚动窗口放到之前创建的VBox中。将列表（这包括
在创建了列表组件之后，我们创建最后一个容器—
来，创建显示组件，并将数据组件与之相关联。
图TreeView）。首先通过定义希望在列表中出现的数据类型，来创建数据部分。接下
分两部分：数据部分（这是列表视图ListStore），以及进行交互的部分（这是树状视
在创建了文件选择器之后，我们创建一个列表组件，列表中包括每一行日志。这个组件
关联到事件句柄。这部分内容非常简单，但是下文中还是会重新提及。
接下来，创建一个文件选择器组件（这样可以导航到日志文件以进行处理），然后将它
insert()向工具栏中添加按钮。
box。
“open”按钮。那么在创建时；应将文件选择器组件设置为不可见。
第11章
www.TopSage.com
一一个滚动窗口，然后将所有组件组
，这是非常简单的容器
---
## Page 343
curses不会遵循事件句柄和回调方法。你可以负责从多个用户获得输入，然后对输入进
使用Curses创建Apache日志浏览器
列的标题对这些列进行排序。
因此可以很容易地通过浏览每一行来大体了解这些数据，并且可以通过简单地点击相应
are what the various key presses do:
This will start an interactive, keyboard driven log viewing application. Here
curses based Apache log viewer
#!/usr/bin/env python
例11-3：curses Apache日志浏览器
例11-3也是Apache日志浏览器，该浏览器使用Python标准库中的curses模块实现。
GUI工具处理绘制和刷新屏幕；使用curses，则是典型地直接在屏幕上绘制文本。
数。在curses与GUI之间的另一个不同之处是：使用GUI工具，组件被添加到容器中，由
行处理。然而在GTK中，组件句柄从用户获得输出，当事件发生时，组件会调用句柄函
curses是一个库，为基于文本的创建交互式的应用程序提供了方便。与GUI工具不同,
class CursesLogViewer(object):
import operator
from apache_log_parser_regex import dictify_logline
import curses