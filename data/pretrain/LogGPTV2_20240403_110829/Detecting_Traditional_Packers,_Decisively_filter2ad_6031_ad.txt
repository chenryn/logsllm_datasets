32–46
3. Oppliger, R., Rytz, R.: Does trusted computing remedy computer security prob-
lems? Security Privacy, IEEE 3(2) (2005) 16–19
4. Brumley, D., Hartwig, C., Liang, Z., Newsome, J., Song, D.X., Yin, H.: Automati-
cally identifying trigger-based behavior in malware. In: Botnet Detection. Springer
(2008) 65–88
5. Newsome, J., Brumley, D., Franklin, J., Song, D.: Replayer: automatic protocol
replay by binary analysis. In: ACM conference on Computer and Communications
Security. CCS ’06, New York, NY, USA, ACM (2006) 311–321
6. Bayer, U., Kirda, E., Kruegel, C.: Improving the eﬃciency of dynamic malware
analysis. In: Proceedings of the 2010 ACM Symposium on Applied Computing,
ACM (2010) 1871–1878
7. Guo, F., Ferrie, P., Chiueh, T.C.: A study of the packer problem and its solutions.
In: Recent Advances in Intrusion Detection, Springer (2008) 98–115
8. Cook, S.A., Reckhow, R.A.: Time bounded random access machines. J. Comput.
Syst. Sci. 7(4) (1973) 354–375
9. Jang, J., Brumley, D., Venkataraman, S.: Bitshred: feature hashing malware for
In: ACM Conference on Computer and
scalable triage and semantic analysis.
Communications Security. CCS ’11, New York, NY, USA, ACM (2011) 309–320
10. Moser, A., Kruegel, C., Kirda, E.: Limits of static analysis for malware detection.
In: Computer Security Applications Conference. (2007) 421–430
11. Zhang, Q., Reeves, D.S.: MetaAware: Identifying metamorphic malware. In: An-
nual Computer Security Applications Conference, IEEE Computer Society (2007)
411–420
12. Sharif, M.I., Lanzi, A., Giﬃn, J.T., Lee, W.: Automatic reverse engineering of
malware emulators. In: Security and Privacy, IEEE Computer Society (2009) 94–
109
13. Kang, M.G., Poosankam, P., Yin, H.: Renovo: A hidden code extractor for packed
executables. In: WORM, ACM (November 2007)
14. Martignoni, L., Christodorescu, M., Jha, S.: OmniUnpack: Fast, generic, and safe
unpacking of malware. In: Annual Computer Security Applications Conference,
IEEE Computer Society (2007) 431–441
15. Yin, H., Song, D.: Hidden code extraction.
In: Automatic Malware Analysis.
SpringerBriefs in Computer Science. Springer New York (2013) 17–26
16. Liu, L., Ming, J., Wang, Z., Gao, D., Jia, C.: Denial-of-service attacks on host-
based generic unpackers. In Qing, S., Mitchell, C., Wang, G., eds.: Information
and Communications Security. Volume 5927 of Lecture Notes in Computer Science.
Springer Berlin Heidelberg (2009) 241–253
17. Xie, P.D., Li, M.J., Wang, Y.J., Su, J.S., Lu, X.C.: Unpacking techniques and tools
in malware analysis. Applied Mechanics and Materials 198–199 (2012) 343–350
18. Perdisci, R., Lanzi, A., Lee, W.: Classiﬁcation of packed executables for accurate
computer virus detection. Pattern Recognition Letters 29(14) (2008) 1941–1946
19. Spinellis, D.: Reliable identiﬁcation of bounded-length viruses is NP-complete.
Information Theory, IEEE Transactions on 49(1) (2003) 280–284
20. Borello, J.M., M´e, L.: Code obfuscation techniques for metamorphic viruses. Jour-
nal in Computer Virology 4(3) (2008) 211–220
21. Katz, J., Lindell, Y.: Introduction to Modern Cryptography. Chapman & Hall
(2008)
22. Elgot, C.C., Robinson, A.: Random-access stored-program machines, an approach
to programming languages. J. ACM 11(4) (1964) 365–399
23. Hartmanis, J.: Computational complexity of random access stored program ma-
chines. Mathematical Systems Theory 5(3) (1971) 232–245
24. Aho, A.V., Hopcroft, J.E., Ullman, J.D.: The Design and Analysis of Computer
Algorithms. Addison-Wesley (1974)
25. Cohen, F.: Computer Viruses. PhD thesis, University of Southern California (1986)
26. Cohen, F.: Computational aspects of computer viruses. Computers & Security
8(4) (1989) 297–298
27. Adleman, L.M.: An abstract theory of computer viruses (invited talk). In: Pro-
ceedings on Advances in cryptology. CRYPTO ’88, New York, NY, USA, Springer-
Verlag New York, Inc. (1990) 354–374
28. Thimbleby, H., Anderson, S., Cairns, P.: A framework for modelling trojans and
computer virus infection. The Computer Journal 41(7) (1998) 444–458
29. Chess, D.M., White, S.R.: An undetectable computer virus. In: Proceedings of
Virus Bulletin Conference. Volume 5. (2000)
30. Filiol, E., Josse, S.: A statistical model for undecidable viral detection. Journal in
Computer Virology 3(2) (2007) 65–74
31. Oreans Technologies. http://www.oreans.com/themida.php
32. Sipser, M.:
Introduction to the Theory of Computation. Volume 27. Thomson
Course Technology Boston, MA (2006)
33. Shaw, D.E., Deneroﬀ, M.M., Dror, R.O., Kuskin, J.S., Larson, R.H., Salmon, J.K.,
Young, C., Batson, B., Bowers, K.J., Chao, J.C., et al.: Anton, a special-purpose
machine for molecular dynamics simulation. In: ACM SIGARCH Computer Ar-
chitecture News. Volume 35., ACM (2007) 1–12
34. Stevens, M., Lenstra, A., Weger, B.: Chosen-preﬁx collisions for MD5 and colliding
X.509 certiﬁcates for diﬀerent identities. In Naor, M., ed.: Advances in Cryptology -
EUROCRYPT 2007. Volume 4515 of Lecture Notes in Computer Science. Springer
Berlin Heidelberg (2007) 1–22
35. Garey, M.R., Johnson, D.S.: Computers and Intractability. Volume 174. Freeman
New York (1979)
36. Clarke, E.M., Emerson, E.A.: Design and Synthesis of Synchronization Skeletons
Using Branching-Time Temporal Logic. In: Logic of Programs. (1981) 52–71
37. Queille, J.P., Sifakis, J.: Speciﬁcation and Veriﬁcation of Concurrent Systems in
CESAR. In: Symposium on Programming. (1982) 337–351
38. Clarke, E.M.: The Birth of Model Checking.
In: 25 Years of Model Checking.
(2008) 1–26
39. Sistla, A.P., Clarke, E.M.: The complexity of propositional linear temporal logics.
J. ACM 32(3) (July 1985) 733–749
40. Clarke, E.M., Emerson, E.A., Sistla, A.P.: Automatic Veriﬁcation of Finite State
Concurrent Systems Using Temporal Logic Speciﬁcations: A Practical Approach.
In: POPL. (1983) 117–126
41. Burch, J.R., Clarke, E.M., McMillan, K.L., Dill, D.L., Hwang, L.J.: Symbolic
model checking: 1020 states and beyond. In: LICS. (1990) 428–439
42. Marques-Silva, J.a.P., Sakallah, K.A.: GRASP-A New Search Algorithm for Satis-
ﬁability. In: Digest of IEEE International Conference on Computer-Aided Design
(ICCAD), San Jose, California (November 1996) 220–227
43. Marques-Silva, J.a.P., Sakallah, K.A.: GRASP: A Search Algorithm for Proposi-
tional Satisﬁability. IEEE Transactions on Computers 48(5) (May 1999) 506–521
44. Moskewicz, M.W., Madigan, C.F., Zhao, Y., Zhang, L., Malik, S.: Chaﬀ: Engi-
neering an Eﬃcient SAT Solver. In: DAC. (2001) 530–535
45. Biere, A., Cimatti, A., Clarke, E.M., Zhu, Y.: Symbolic Model Checking with-
out BDDs.
In: Proceedings of the 5th International Conference on Tools and
Algorithms for Construction and Analysis of Systems. TACAS ’99, London, UK,
Springer-Verlag (1999) 193–207
46. Clarke, E., Biere, A., Raimi, R., Zhu, Y.: Bounded Model Checking Using Satisﬁ-
ability Solving. Form. Methods Syst. Des. 19 (July 2001) 7–34
47. Clarke, E., Grumberg, O., Jha, S., Lu, Y., Veith, H.: Counterexample-Guided
Abstraction Reﬁnement. In Emerson, E., Sistla, A., eds.: Computer Aided Ver-
iﬁcation. Volume 1855 of Lecture Notes in Computer Science. Springer Berlin /
Heidelberg (2000) 154–169 10.1007/10722167 15.
48. Clarke, E., Grumberg, O., Jha, S., Lu, Y., Veith, H.: Counterexample-Guided
Abstraction Reﬁnement for Symbolic Model Checking. J. ACM 50 (September
2003) 752–794
49. Bradley, A.R., Manna, Z.: Checking Safety by Inductive Generalization of Coun-
terexamples to Induction. In: Formal Methods in Computer Aided Design (FM-
CAD’07). (nov. 2007) 173 –180
50. Bradley, A.R.: SAT-Based Model Checking without Unrolling.
In: Proceedings
of the 12th international conference on Veriﬁcation, model checking, and abstract
interpretation. VMCAI’11, Berlin, Heidelberg, Springer-Verlag (2011) 70–87
51. Knuth, D.E.: Art of Computer Programming, Volume 1: Fundamental Algorithms
(3rd Edition). 3 edn. Addison-Wesley Professional (July 1997)
52. Amdahl, G.M.: Validity of the single processor approach to achieving large scale
computing capabilities. In: Proceedings of the April 18-20, 1967, spring joint com-
puter conference. AFIPS ’67 (Spring), New York, NY, USA, ACM (1967) 483–485
53. Downey, R.G., Fellows, M.R., Stege, U.: Computational tractability: The view
In: Bulletin of the European Association of Theoretical Computer
from mars.
Science. 73–97
54. VMProtect Software. http://vmpsoft.com/
A Appendix – RASP Tables
Table 1. Operational semantics and time cost for the sixteen RASP instructions. Most
mnemonics are obvious; one that isn’t is bpa, which stands for “branch on positive ac-
cumulator.” Instructions have several addressing modes. The instruction cost depends
on the addressing mode; see Table 2 for details. (The deﬁnition of l(·) is equation 1 on
page 6.) This ISA allows direct formalization of unpacking behavior.
Mnemonic Operand Opcode Operational Semantics
Time Cost
halt
load
stor
add
sub
jmp
bpa
read
write
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
halt
ac ← rval; ip++;
1
l(ip) + rcost
M [lval] ← ac; ip++;
l(ip) + l(ac) + lcost
ac ← ac + rval; ip++;
l(ip) + l(ac) + rcost
ac ← ac − rval; ip++;
l(ip) + l(ac) + rcost
ip ← rval;
rcost
if (ac > 0) then ip ← rval;
l(ip) + l(ac) + rcost
else ip++;
M [lval] ← in; ip++;
out ← rval; ip++;
l(ip) + l(in) + lcost
l(ip) + rcost
j
(cid:104)j(cid:105)
(cid:104)(cid:104)j(cid:105)(cid:105)
(cid:104)j(cid:105)
(cid:104)(cid:104)j(cid:105)(cid:105)
j
(cid:104)j(cid:105)
j
(cid:104)j(cid:105)
j
(cid:104)j(cid:105)
j
(cid:104)j(cid:105)
(cid:104)j(cid:105)
(cid:104)j(cid:105)
Table 2. Values and costs for the three addressing modes. The costs allow us to analyze
asymptotic behavior as machine word and input size grow, and allow us to formulate
the restrictions on time and space crucial for our decidability results.
Mode
Operand
rval
rcost
lval
lcost
immediate
direct
indirect
j
(cid:104)j(cid:105)
(cid:104)(cid:104)j(cid:105)(cid:105)
j
l(j)
M [j]
l(j) + l(M [j])
j
l(j)
M [M [j]]
l(j) + l(M [j]) + l(M [M [j]]) M [j]
l(j) + l(M [j])