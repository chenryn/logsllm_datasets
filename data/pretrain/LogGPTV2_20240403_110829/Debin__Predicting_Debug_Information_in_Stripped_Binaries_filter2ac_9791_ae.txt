### Decompilation and Security Analysis with Debin

#### 4.2 Decompile Snippets for Debin Outputs
**Figure 4:** Debin predicts the statically linked library functions `setsockopt`, `sendto`, and `open`. Identifying such functions is crucial for detecting potentially insecure I/O operations. By searching for these sensitive function names in the output of Debin, analysts can quickly pinpoint where security issues may be located. The usefulness of this approach is further demonstrated in Section 5.4.

#### 4.3 Training and Prediction Speed
The training phase for name and type prediction in Debin takes approximately five hours per architecture. This includes around four hours to train two Extremely Randomized Trees (ET) classification models (one for registers and another for memory offsets), and one hour to train the Conditional Random Field (CRF) model using the pseudo-likelihood learning algorithm. We utilized 60 threads to run the learning algorithms. The average prediction time for each binary (with a single thread) is about two minutes, with approximately 80% of the time spent on variable recovery and 20% on constructing the dependency graph and performing Maximum A Posteriori (MAP) inference. Future work could focus on enhancing the efficiency of the variable recovery module.

### 5.4 Malware Inspection
We now discuss how Debin can assist in inspecting the behavior of malicious binaries. Using VirusShare [9], we searched for approximately 180 categories of Linux malware defined by Symantec [52] and attempted to download the latest 10 fully stripped ELF x86 malware samples for each category. Since there are usually fewer than 10 qualified malware samples for most categories, our test dataset consists of 35 binaries across 13 categories, ranging from 5.0KB to 1.7MB. We provided these malware binaries as input to Debin, whose models were trained on benign binaries as discussed earlier, and searched for security-related names in the outputs. It is important to note that we cannot report Debin's accuracy on malware because they are all stripped and contain no debug information.

The original malware and the output binaries from Debin were decompiled into Pseudo C code using the popular Hex-Rays decompiler in IDA Pro [3]. We then manually inspected the decompiled outputs. An example of how Debin reveals a DNS resolver reader was already shown in Section 1. Below, we present another use case where Debin can help identify suspicious statically linked library functions.

#### Identifying Suspicious Statically Linked Library Uses
Malicious binaries are often compiled statically and stripped to hide library function usage. In our malware dataset, 26 out of 35 samples are statically built. While library usages are crucial for identifying malicious behaviors, it would be tedious and time-consuming for analysts to manually inspect assembly code and rename them. During our inspection, we found that Debin can help in finding potentially harmful library uses by automatically renaming them. 

In **Figure 4**, we show code snippets where Debin renames suspicious library calls for two malware examples: one from the category Linux.Xorddos and another from the category Linux.Mirai. In the first snippet, Debin recovers `setsockopt` and `sendto`, indicating potential leakage of sensitive data. In the second snippet, Debin reveals the sensitive behavior of opening the file `/proc/net/tcp`, which stores active IPv4 TCP connections. Besides these examples, Debin can also recover other library calls, such as string manipulations. Library function renaming can significantly reduce the effort required for security analysts to examine malware. Debin is able to rename these library functions likely due to their presence (either statically or dynamically linked) in the training set.

#### Limitations
With our probabilistic models, Debin learns patterns of binary code from our training binaries, which we assume are benign. However, malicious binaries often exhibit more complex behaviors. For instance, we found samples in our malware dataset that use customized string encoding. Obfuscation techniques such as control flow flattening may also be employed to hinder analysis. Debin may make less accurate predictions on obfuscated binaries. Security analysts could combine de-obfuscation methods with Debin to address these issues.

### 6. Related Work
We survey some of the works most closely related to ours.

#### 6.1 Comparison with Existing Approaches
In **Table 6**, we compare Debin with several existing approaches in terms of capabilities. For variable recovery, DIVINE [13], TIE [38], and SecondWrite [23] employ Value Set Analysis [12], while Debin, to our knowledge, is the first to use a learning-based classifier. For type recovery, TIE and SecondWrite adopt constraint-based type inference. Eklavya [20] learns a Recurrent Neural Network to predict 7 types for function arguments, while Debin can predict 17 types for both function arguments and variables. Additionally, Debin is the first system capable of recovering names, a desirable functionality for decompilation and important for malware inspection. It is challenging to quantitatively compare Debin with these works due to differences in prediction granularity, benchmarks, and measurements.

| Approach        | Variable Recovery | Type Recovery | Name Recovery | Supported Architectures |
|-----------------|-------------------|---------------|---------------|-------------------------|
| DIVINE [13]     | ✓                 | ✗             | ✗             | x86                     |
| TIE [38]        | ✓                 | ✓             | partial1      | x86                     |
| SecondWrite [23]| ✓                 | ✓             | ✗             | x86                     |
| Eklavya [20]    | ✗                 | ✓             | ✗             | x86, x64                |
| Debin           | ✓                 | ✓             | ✓             | x86, x64, ARM           |

**Note:** Eklavya only predicts 7 types for function arguments.

#### 6.2 Binary Analysis
To perform binary analysis, the first step is to choose an analysis platform that translates assembly code into a corresponding Intermediate Representation (IR). Potential open-source candidates for this task include BAP [17], Mcsema [4], and angr.io [50], which lift binary code into BAP-IR, LLVM-IR, and VEX-IR, respectively. A recent framework, rev.ng [25], can recover control flow graphs and function boundaries for binaries across multiple architectures. Kim et al. [35] tested a wide range of binary analysis frameworks on different tasks. For Debin, we currently use BAP-IR for the advantages discussed in Section 4.1. Future work could involve experimenting with our learning-based techniques using other frameworks.

#### 6.3 Machine Learning for Binaries
Machine learning methods have been adopted for various binary analysis tasks. Several works focus on function identification [14, 49, 54], which is the basis for many further analysis steps. We use ByteWeight [14] in our system since it is publicly available in BAP [17]. Chua et al. [20] train a Recurrent Neural Network to predict function argument counts and types. Statistical language models [33, 34] have been used to predict types in binaries, but with a different focus on object types and class hierarchy reconstruction.

Apart from recovering source-level information from binaries, there are several works that predict other valuable characteristics. Rosenblum et al. [46] focus on toolchain provenance, predicting compiler family and version, optimization level, and programming language with high accuracy. Caliskan et al. [19] build an effective set of features and use a random forest classifier to predict programmer identity. Other works utilize machine learning to classify malware [11, 36, 48] and statistical methods to calculate binary similarity [21, 22, 55]. These tasks complement the problem addressed in this work and can benefit from the recovered names and types.

#### 6.4 Probabilistic Models for Code
In recent years, the development of large codebases has triggered studies of probabilistic models for software-related tasks such as code summarization [26], method and class name suggestions [10], code completion [45], program synthesis [42, 43], and programming language translation [32]. The works most related to ours are [44] and [15], which also leverage structured prediction algorithms with Nice2Predict [5] to infer types and names for JavaScript and Android programs, respectively. Our work differs in that it operates on lower-level binary code, which is inherently more challenging. Therefore, we need to first perform variable recovery that classifies the program elements used for structured prediction, while these works use a fixed set of rules. We also support more expressive feature functions, not only pairwise kinds but also richer factors relating multiple elements. Furthermore, these methods only work on a single high-level language (e.g., Java, JavaScript). In the context of binary analysis, our probabilistic models work on low-level code across multiple architectures and compilation settings, requiring a more general and richer set of features. Finally, our work uses one model to jointly predict names and types, while [44] uses two separate models (one for names and another for types). The work of [15] only uses one model to predict names for Android. A Statistical Machine Translation model is employed to suggest identifier names for JavaScript [53] and decompiled code [31]. While the latter is close to our work, its model achieved around 25% accuracy. Additionally, their method relies on decompilation, which already suffers from significant information loss. Our prediction directly works on binary code, achieves higher accuracy, and shows successful cases on decompilation tasks.

### 7. Conclusion
We presented a novel approach for predicting debug information in stripped binaries. The key idea is to formalize the problem as a machine learning task and leverage a combination of two complementary probabilistic models: an Extremely Randomized Trees classifier and structured prediction with Conditional Random Fields. To instantiate this idea, we introduced a comprehensive set of features suitable for predicting binary debug information and used this set to train our probabilistic models on a large number of non-stripped binaries.

The resulting system, called Debin, uses these probabilistic models to recover debug information from new, unseen binaries. Our extensive experimental evaluation of Debin indicates that the approach is accurate enough to correctly infer large portions of stripped debug information and is helpful for practical security analysis.

### Acknowledgments
We would like to thank the anonymous reviewers for their constructive feedback and Rong Jian for the helpful discussions on malware inspection.

### References
[References listed as in the original text]