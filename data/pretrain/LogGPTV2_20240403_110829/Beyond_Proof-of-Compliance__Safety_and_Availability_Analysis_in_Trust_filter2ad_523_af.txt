Y1.u1 ∈ P(cid:2)
, and m(Y1, u1, E) ∈ TSP(P(cid:1)) ↑i. By def-
, Y.u ←− Y1.u1 ∈ P|R.
inition of P(cid:2)
From (c2),
fc(Y, u, ?Z, ?w) :− fc(Y1, u1, ?Z, ?w) ∈ BCP. By induc-
tion hypothesis, BCP |= fc(Y1, u1, A, r), clearly BCP |=
fc(Y, u, A, r).
Before proving Proposition 4.2, we ﬁrst prove two aux-
iliary lemmas. Readers may wish to read the main proof
ﬁrst and refer to the two lemmas when they needed. The
following lemma is used to prove the soundness of (n1).
Lemma A.1 Assume we are given P in BRT , R, two roles
X.u and A.r, and a principal D such that SP(P|R) (cid:25)|=
m(X, u, D). Let P(cid:2) = P|R ∪ {A.r←− D}. If SP(P(cid:2)) |=
m(X, u, D), then BCP |= fc(X, u, A, r).
Proof. We use induction on i to prove that for any Z.w such
that SP(P|R) (cid:25)|= m(Z, w, D), if m(Z, w, D) ∈ TSP(P(cid:1))↑i,
then BCP |= fc(Z, w, A, r).
The basis is trivial. In the step, one of (m1) and (m2) is
used to derive m(Z, w, D) ∈ TSP(P(cid:1)) ↑i+1. Case (m1):
Z.w ←− D ∈ P(cid:2)
It must be that Z.w = A.r, since
it cannot be that Z.w ←− D ∈ P|R. By (c), BCP |=
fc(Z, w, A, r). Case (m2): Z.w ←− Z1.w1 ∈ P(cid:2)
and
m(Z1, w1, D) ∈ TSP(P(cid:1)) ↑i.
It follows that Z.w ←−
Z1.w1 ∈ P|R, by deﬁnition of P(cid:2)
. And it follows that
SP(P|R) (cid:25)|= m(Z1, w1, D), since otherwise SP(P|R) |=
m(Z, w, D), which is contradictory. Now, by induction hy-
.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
13
pothesis, BCP |= fc(Z1, w1, A, r), so the desired result
holds by (c2).
The following lemma says that (n2) is sound.
Lemma A.2 Assume we are given a BRT state P, R, and
three roles X.u, A.r, B.r1, such that A.r ←− B.r1 ∈ P,
BCP(P,R) (cid:25)|= fc(X, u, A, r), and X.u does not contain
B.r1. Then X.u does not contain A.r.
is obtained from P(cid:2)
Since X.u does not contain B.r1,
Proof.
there ex-
ists a reachable state P(cid:2)
and a principal E such that
SP(P(cid:2)) |= m(B, r1, E) and SP(P(cid:2)) (cid:25)|= m(X, u, E). We
now construct a P(cid:2)(cid:2)
such that SP(P(cid:2)(cid:2)) |= m(A, r, E) and
SP(P(cid:2)(cid:2)) (cid:25)|= m(X, u, E). P(cid:2)(cid:2)
by ﬁrst
removing any Z.w ←− Z1.w1 ∈ P(cid:2) − P|R such that
SP(P(cid:2)) (cid:25)|= m(Z1, w1, E), and then adding A.r ←− B.r1.
Clearly, P(cid:2)(cid:2)
is reachable. By induction on how m(A, r, E)
is proven in SP(P(cid:2)), it is easy to show that SP(P(cid:2)(cid:2)) |=
m(A, r, E).
To prove that SP(P(cid:2)(cid:2)) (cid:25)|= m(X, u, E), we use induc-
tion on i to prove that for any Z.w such that SP(P(cid:2)) (cid:25)|=
m(Z, w, E), if m(Z, w, E) ∈ TSP(P(cid:1)(cid:1)) ↑i, then BCP |=
fc(Z, w, A, r). The basis is trivial. In the step, one of (m1)
and (m2) is used to derive m(Z, w, E) ∈ TSP(P(cid:1)(cid:1)) ↑i+1.
Case (m1): Z.w ←− E ∈ P(cid:2)(cid:2)
. This is impossible, as this
means that Z.w ←− E ∈ P(cid:2)
, which is contradictory with
SP(P(cid:2)) (cid:25)|= m(Z, w, E). Case (m2): Z.w←− Z1.w1 ∈ P(cid:2)(cid:2)
and m(Z1, w1, E) ∈ TSP(P(cid:1)(cid:1))↑i. By deﬁnition of P(cid:2)(cid:2)
, either
Z.w = A.r and Z1.w1 = B.r1, or Z.w ←− Z1.w1 ∈ P(cid:2)
.
In the former case, fc(Z, w, A, r) follows from (c). In the
latter case, it follows that SP(P(cid:2)) (cid:25)|= m(Z1, w1, E), from
SP(P(cid:2)) (cid:25)|= m(Z, w, E), and, by induction hypothesis, that
BCP |= fc(Z1, w1, A, r). Now the desired result holds by
(c2), provided we have Z.w ←− Z1.w1 ∈ P|R. This fol-
lows from the construction of P(cid:2)(cid:2)
and the case assumption
that m(Z1, w1, E) ∈ TSP(P(cid:1)(cid:1))↑i.
Proposition 4.2: Given a BRT state P, R, and two roles
X.u and A.r in Roles(P), BCP(P,R) |= nc(X, u, A, r) if
and only if X.u does not contain A.r.
Proof. The “only if” part (Soundness): We use induction on
i to show that if BCP |=i nc(X, u, A, r), then X.u does not
contain A.r. Basis is trivial. In the step, one of (n0), (n1),
and (n2) is used to derive that BCP |=i+1 nc(X, u, A, r).
Case (n0): A.r must be g-unrestricted, and BCP |=
∼fc(X, u, A, r); therefore, BCP (cid:25)|= fc(X, u, A, r). From
Case (n1):
Lemma 4.1, X.u does not contain A.r.
A.r ←− D ∈ P, BCP |= ∼lb(X, u, D), and BCP |=
(cid:25)|= m(X, u, D) by
∼fc(X, u, A, r).
Fact 3.1. Let P(cid:2) = P|R ∪ {A.r←− D}. From Lemma A.1
it follows that SP(P(cid:2)) (cid:25)|= m(X, u, D);
therefore X.u
does not contain A.r. Case (n2): A.r ←− B.r1 ∈ P,
BCP |=n nc(X, u, B, r1), and BCP |= ∼fc(X, u, A, r).
Then SP(P|R)
By induction hypothesis, X.u does not contain B.r1; from
Lemma A.2, X.u does not contain A.r.
The “if” part (Completeness): If X.u does not contain
A.r, then we show that BCP |= nc(X, u, A, r). When A.r
is g-unrestricted. From Lemma 4.1, BCP (cid:25)|= fc(X, u, A, r),
and so BCP |= ∼fc(X, u, A, r). From (n0), BCP |=
nc(X, u, A, r).
In the rest of the proof, we only need to
consider the case that A.r is g-restricted.
If X.u does
then there exists a reachable state P(cid:2)
not contain A.r,
and a principal E such that SP(P(cid:2)) |= m(A, r, E) and
SP(P(cid:2)) (cid:25)|= m(X, u, E). We use induction on i to show that
if m(A, r, E) ∈ TSP(P(cid:1))↑i, then BCP |= nc(X, u, A, r).
First observe that, from Lemma 4.1, it follows that BCP (cid:25)|=
fc(X, u, A, r), and so BCP |= ∼fc(X, u, A, r). The basis
is trivial. In the step, one of (m1) and (m2) is used to de-
duce that m(A, r, E) ∈ TSP(P(cid:1))↑i+1. Case (m1): A.r ←−
, A.r ←− E must be in P since A.r is g-restricted.
E ∈ P(cid:2)
From Proposition 3.2 and SP(P(cid:2)) (cid:25)|= m(X, u, E), BCP (cid:25)|=
lb(X, u, E), and so BCP |= ∼lb(X, u, E). From (n1),
BCP(P,R) |= nc(X, u, A, r). Case (m2): A.r ←−
B.r1 ∈ P(cid:2)
and m(B, r1, E) ∈ TSP(P(cid:1)) ↑i. Since A.r
is g-restricted, A.r ←− B.r1 ∈ P. By induction hy-
pothesis, BCP(P,R)
Therefore,
BCP(P,R) |= nc(X, u, Z, w) by an instance of (n2).
|= nc(X, u, B, r1).
A.3 Proofs of Theorems 4.3, 4.4, and 4.5
We ﬁrst prove a lemma that will be used in establishing
lower bounds on the complexity of containment analysis.
The lemma says that if a containment does not hold, then
there exists a counter-example state that only adds type-1
statements to P and only uses role names in P.
Lemma A.3 Given P and R, two roles X.u and A.r in
Roles(P), if X.u does not contain A.r, then there exists a P(cid:2)
such that SP(P(cid:2)) |= m(A, r, E), SP(P(cid:2)) (cid:25)|= m(X, u, E),
P(cid:2) − P only has type-1 statements, and P(cid:2)
only uses role
names in P.
Proof. If X.u does not contain A.r, then there exists a P(cid:2)
that SP(P(cid:2)) |= m(A, r, E) and SP(P(cid:2)) (cid:25)|= m(X, u, E).
Given such a P(cid:2)
by replacing every
statement A.r ←− e ∈ P(cid:2) − P, where e is a role, a
linked role, or an intersection, with a set of statements
{A.r ←− Y | SP(P(cid:2)) |= m(A, r, Y )}. Using induction, it
is straightforward to show that the resulting state computes
the exact same role memberships.
Now P(cid:2)(cid:2) − P consists of only type-1 statements. From
, we derive P(cid:2)(cid:2)(cid:2)
P(cid:2)(cid:2)
by removing all type-1 statements that
uses role names (not roles) not appearing in P. For example,
a statement A.v ←− D in P(cid:2)(cid:2)
, where v does not appear in
P, will not be in P(cid:2)(cid:2)(cid:2)
. Using induction, it is straightforward
to show that, for roles in Roles(P), P(cid:2)(cid:2)(cid:2)
computes the exact
, we ﬁrst derive P(cid:2)(cid:2)
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
14
. Intuitively, A.v ←− D can affect
same memberships as P(cid:2)(cid:2)
members of roles in Roles(P) unless some type-2, 3, or 4
statement refers to the role name v, which is impossible,
are in P, and so do
since all type 2, 3, or 4 statements in P(cid:2)
not use v.
Theorem 4.3: Containment analysis in NRT is coNP-
complete.
Proof. To show coNP-hardness, we reduce the monotone
3SAT problem to the complement of the universal contain-
ment problem in NRT . Monotone 3SAT is 3SAT with each
clause containing either only positive literals or only nega-
tive literals; it is known to be NP-complete [7].
Given an instance of monotone 3SAT: φ = c1 ∧ ··· ∧
c(cid:15) ∧ c(cid:15)+1 ∧···∧ cn, in which c1, . . . , c(cid:15) are positive clauses
and c(cid:15)+1, . . . , cn are negative clauses. Let p1, . . . , ps be all
the propositional variables in φ. For each negative clause
ck = (¬pk1 ∨¬pk2 ∨¬pk3), deﬁne dk = (pk1 ∧ pk2 ∧ pk3),
then ck ⇔ ¬dk. Then φ ⇔ c1∧···∧cm∧¬(d(cid:15)+1∨···∨dn).
The formula φ is satisﬁable if and only if ψ = (c1 ∧ ··· ∧
c(cid:15)) → (d(cid:15)+1∨···∨dn) is not valid. We now construct P, R,
with the goal that A.d (cid:20) A.c is necessary if and only if ψ is
valid. In the construction, we use the role A.pi to denote the
propositional variable pi, A.cj to denote the clause cj, and
A.dk to denote the clause dk. Deﬁne P = P1∪P2∪P3∪P4,
in whichP1 = {A.c ←− A.c1 ∩ A.c(cid:2)
1 ←− A.c2 ∩
(cid:15)−1←− A.c(cid:15)−1 ∩ A.c(cid:15)}.
A.c(cid:2)
P2 = {A.cj ←− A.pj1 , A.cj ←− A.pj2 , A.cj ←−
A.pj3 | 1 ≤ j ≤ +, cj = pj1 ∨ pj2 ∨ pj3}
P3 = {A.d←− A.dk | + + 1 ≤ k ≤ n}
P4 = {A.dk ←− A.pk1 ∩ A.d(cid:2)
k, A.d(cid:2)
A.pk3 | + + 1 ≤ k ≤ n, dk = pk1 ∧ pk2 ∧ pk3}
k ←− A.pk2 ∩
2, ··· , A.c(cid:2)
1, A.c(cid:2)
Deﬁne R to be the restriction rule such that all the A.pi’s
are g-unrestricted and s-restricted, and all other roles are
g/s-restricted.
We now show that A.d (cid:20) A.c is not necessary if and only
if ψ is not valid. First, the “only if” part: If A.d (cid:20) A.c is not
necessary, then there exists a reachable state P(cid:2)
and a prin-
cipal E such that SP(P(cid:2)) |= m(A, c, E) and SP(P(cid:2)) (cid:25)|=
m(A, d, E). Consider the truth assignment I deﬁned as
follows, for every i such that 1 ≤ i ≤ s, I(pi) = true
if SP(P(cid:2)) |= m(A, pi, E), and I(pi) = false otherwise.
Then under I, (c1 ∧ ··· ∧ c(cid:15)) is true and d(cid:15)+1 ∨ ··· ∨ dn
is false; therefore ψ is not valid. The “if” part: If ψ is
not valid, then there exists a truth assignment I such that
(c1 ∧ ··· ∧ c(cid:15)) is true and (d(cid:15)+1 ∨ ··· ∨ dn) is false. Con-
sider P(cid:2) = P ∪ {A.pi ←− Z | 1 ≤ i ≤ s ∧ I(pi) = true}.
P(cid:2)
is reachable, and SP(P(cid:2)) |= m(A, c, Z) and SP(P(cid:2)) (cid:25)|=
m(A, d, Z).
We now show that containment analysis in NRT is in
coNP. Given P and R, if X.u does not contain A.r, then
, we construct P(cid:2)(cid:2)
there exists a reachable state P(cid:2)
and a principal E such that,
SP(P(cid:2)) |= m(A, r, E) and SP(P(cid:2)) (cid:25)|= m(X, u, E). From
Lemma A.3, we can assume, without loss of generality, that
P(cid:2) − P consists of only type-1 statements and P(cid:2)
uses the
same role names. From P(cid:2)
as follows, let
P(cid:2)(cid:2) = P(cid:2) ∩ P ∪ {Z.w ←− E ∈ P(cid:2) | Z.w ∈ Roles(P)}.
Clearly, P(cid:2)(cid:2) ⊆ P(cid:2)
and P(cid:2)(cid:2)
is reachable. By induction on
how m(A, r, E) is proven in SP(P(cid:2)), it is easy to see that
SP(P(cid:2)(cid:2)) |= m(A, r, E). The size of P(cid:2)(cid:2)
is polynomial in
P. This means that if a containment does not hold, then
there exists a short (polynomial in the size of the input pro-
gram P) counterproof such that one can check in polyno-
mial time. This shows that the problem is in coNP. The
method we use to construct the counter example P(cid:2)(cid:2)
also
yields an exponential algorithm for determining contain-
ment.
Theorem 4.4 Containment analysis in LRT is coNP-hard.
Proof. As in the proof of Theorem 4.3, we reduce the
monotone 3SAT problem to the complement of universal
role containment in LRT . Similarly, given an instance φ
of monotone 3SAT, we construct ψ = (c1 ∧ ··· ∧ c(cid:15)) →
(d(cid:15)+1 ∨ ··· ∨ dn) such that φ is satisﬁable if and only if ψ
is not valid.
We now construct P, R, such that A.d (cid:20) A.c is neces-
sary if and only if ψ is valid. Deﬁne P to be P1 ∪P2 ∪P3 ∪
P4 ∪ P5, in which
1 ←−
P1 = {A.c ←− A.c(cid:2)
(cid:15)−1←− A.c(cid:15)}
2.c2, ··· , A.c(cid:2)
A.c(cid:2)
P2 = {A.cj ←− A.pj1 , A.cj ←− A.pj2 , A.cj ←−
A.pj3 | 1 ≤ j ≤ +, cj = pj1 ∨ pj2 ∨ pj3}
P3 = {A.d←− A.dk | + + 1 ≤ k ≤ n}