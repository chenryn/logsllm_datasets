Server Edition, which uses a version of the SELinux ref-
erence policy. In addition, the most current version of
the SELinux reference policy is also tighter than the pol-
icy shipped with Ubuntu 8.04.
Figure 17 shows the host attack graph for a remote
attacker to install a rootkit in Fedora 8 with SELinux.
The vulnerability surface is not directly comparable with
that of Ubuntu 8.04 (shown in Figure 12) because each
has some unique attack paths.
If we assume that all
programs are equal,
the vulnerability surface of Fe-
dora 8/SELinux is smaller because there is 1 length-
1 minimal attack path and 13 length-2 minimal attack
initproc(0, 0, unconfined_t)/usr/sbin/apache2/usr/sbin/nmbd/usr/sbin/rpc.mountd/usr/sbin/smbd/usr/sbin/vsftpdproc(1, 1, unconfined_t)/sbin/portmapproc(106, 0, unconfined_t)/sbin/rpc.statdproc(108, 117, unconfined_t)/usr/sbin/namedproc(0, 0, cupsd_t)/usr/sbin/cupsdproc(0, 0, sshd_t)/usr/sbin/sshdproc(110, 119, unconfined_t)/usr/sbin/mysqldproc(101, 102, dhcpc_t)/sbin/dhclientinitproc(1000, 1000, unconfined_t)proc(0, 1000, unconfined_t)/bin/fusermount/bin/ping/bin/ping6/bin/su/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chown/usr/sbin/pppdproc(0, 1000, unconfined_mount_t)/bin/mount/bin/umountinitproc(1000, 1000, none)proc(0, 1000, none)/bin/fusermount/bin/mount/bin/ping6/bin/su/bin/umount/sbin/mount.nfs/usr/bin/arping/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chown/usr/sbin/pppdpaths in Fedora 8/SELinux, while there are 6 length-
1 minimal attack paths and 97 length-2 minimal attack
paths in Ubuntu 8.04/SELinux.
We have analyzed the vulnerability surface of SUSE
Linux Enterprise Server 10 (SLES 10) with AppArmor
protection. To keep the services in SLES 10 the same as
in Ubuntu 8.04, some services that are up by default in
SLES 10 are turned off, e.g., slpd and zmd.
The vulnerability surface of SLES 10/AppArmor un-
der the scenario that a remote attacker wants to install
a rootkit (as shown in Figure 19) is not directly com-
parable with that of Ubuntu 8.04/AppArmor. The two
distributions expose different vulnerability surfaces.
Figure 17. Host Attack Graph for a Remote
Attacker to Install a Rootkit (Fedora 8 with
SELinux)
Figure 18 shows the host attack graph for a remote at-
tacker to leave a strong trojan in Fedora 8 with SELinux.
Compared to the kernel module loading scenario, tro-
jan attack scenario has three additional minimal attack
paths:
/usr/sbin/rpc.mountd
/usr/sbin/smbd
/usr/sbin/sendmail /usr/bin/procmail
Two paths are related to ﬁle sharing and the other is due
to sendmail. Those programs are conﬁned, but they have
privileges to write to the user’s home directory or di-
rectories in the executable search path. Under the as-
sumption that all programs are equal, the vulnerabil-
ity surface of Fedora 8/SELinux is smaller than that of
Ubuntu 8.04/SELinux for the remote trojan attack sce-
nario.
Figure 18. Host Attack Graph for a Remote
Attacker to Leave a Strong Trojan (Fedora
8 with SELinux)
Different Versions of AppArmor
Figure 19. Host Attack Graph for a Remote
Attacker to Install a Rootkit (SUSE Linux
Enterprise Server 10 with AppArmor)
The common attack paths are through sshd and
rpc.mountd (NFS mount daemon). The unique paths for
Ubuntu 8.04 are through apache2, mysqld and named,
due to that those programs are not conﬁned. The unique
paths for SLES 10 are through cupsd since cupsd is not
conﬁned. Sshd also contributes to some unique paths
since there are more shells installed in SLES 10.
In SLES 10, the host attack graph for a remote at-
tacker to plant a strong Trojan horse is the same as the
graph for a remote attacker to install a rootkit. For a lo-
cal attacker to install a rootkit, the host attack graph for
SLES 10 is shown in Figure 20. There are 10 common
attack paths due to unconﬁned set uid root programs.
There are 9 unique attack paths for Ubuntu 8.04 and 20
unique attack paths for SLES 10.
The Need to Consider DAC Policy
Our approach considers both the MAC policy and
initproc(0, 0, initrc_t)/usr/sbin/rpc.rquotadproc(0, 0, sshd_t)/usr/sbin/sshdproc(0, 0, dhcpc_t)/sbin/dhclientproc(0, 0, unconfined_t)/bin/bash/bin/zsh/etc/rc.d/init.d/ntpdproc(0, 0, ifconfig_t)/sbin/ethtool/sbin/ifconfig/sbin/ip/sbin/iwconfig/sbin/mii-tool/sbin/tcproc(0, 0, insmod_t)/sbin/insmod/sbin/insmod.static/sbin/modprobe/sbin/rmmodinitproc(0, 0, nfsd_t)/usr/sbin/rpc.mountdproc(0, 0, smbd_t)/usr/sbin/smbdproc(0, 0, initrc_t)/usr/sbin/rpc.rquotadproc(0, 51, sendmail_t)/usr/sbin/sendmailproc(0, 0, sshd_t)/usr/sbin/sshdproc(0, 0, dhcpc_t)/sbin/dhclientproc(0, 51, procmail_t)/usr/bin/procmailproc(0, 0, unconfined_t)/bin/bash/bin/zsh/etc/rc.d/init.d/ntpdinitproc(4, 7, none)/usr/sbin/cupsdproc(0, 0, none)/usr/sbin/rpc.mountdproc(0, 0, /usr/sbin/sshd)/usr/sbin/sshdproc(0, 7, none)/bin/eject/bin/mount/bin/ping6/bin/su/bin/umount/opt/gnome/lib/libgnomesu/gnomesu-pam-backend/opt/gnome/sbin/change-passwd/opt/kde3/bin/kpac_dhcp_helper/sbin/unix2_chkpwd/usr/X11R6/bin/Xorg/usr/bin/at/usr/bin/chage/usr/bin/chfn/usr/bin/chsh/usr/bin/crontab/usr/bin/expiry/usr/bin/gpasswd/usr/bin/gpg/usr/bin/mandb/usr/bin/newgrp/usr/bin/opiepasswd/usr/bin/opiesu/usr/bin/rcp/usr/bin/rlogin/usr/bin/rsh/usr/bin/sudo/usr/lib/pt_chown/usr/sbin/suexec2proc(4, 13, none)/usr/lib/news/bin/inewsproc(0, 13, none)/usr/lib/news/bin/inndstart/usr/lib/news/bin/startinnfeed/bin/ash/bin/bash/bin/tcsh/bin/zsh/sbin/nologinFigure 21. Host Attack Graph for a Remote
Attacker to Install a Rootkit (Ubuntu 8.04
with SELinux – only Considering SELinux
Policy)
5.3 Performance
In our experiments, the targeted operating systems
(Ubuntu, Fedora and SUSE Linux) are installed in vir-
tual machines using VMWare. The host attack graph
generation and attack path analysis are performed on a
laptop with Intel(R) Pentium(R) M processor 1.80GHz
and 1G memory. The Prolog engine is swi-prolog
5.6.14.
The running time for the fact collector is less than 10
minutes for every test case. The running time for the
host attack graph generation and analysis is less than 10
minutes for every test case.
6 Conclusions
In this paper, we propose an approach to analyze
and compare the protection quality offered by policies
of different Mandatory Access Control mechanisms in
security-enhanced operating systems. Our analysis is
based on the security policy, system state and system
conﬁguration. We develop a tool to generate the host at-
tack graph for a given attack scenario. We propose to
use vulnerability surface to measure the protection qual-
ity of a system. We evaluate our approach by analyz-
ing and comparing SELinux and AppArmor in several
Linux distributions.
Figure 20. Host Attack Graph for a Local
Attacker to Install a Rootkit (SUSE Linux
Enterprise Server 10 with AppArmor)
the DAC policy. If we only consider MAC policy, e.g.,
SELinux policy, the result may not be accurate. Fig-
ure 21 shows the host attack graph for a remote attacker
to install a rootkit, when we only consider SELinux pol-
icy but not DAC policy. Compared to the host attack
graph that considers both DAC and MAC policy (shown
in Figure 12), we observe that without considering
DAC policies, there are following extra length-1 attack
paths: /sbin/portmap, /sbin/rpc.statd, /usr/sbin/mysqld,
/usr/sbin/named, /sbin/dhclient. They are not accurate.
For example, mysqld is running with uid 110 and un-
conﬁned t. By compromising mysqld the attacker can
control unconﬁned t, but she still cannot load a kernel
module because the uid is unprivileged. To control root
uid the attacker needs to do another exploit, e.g., by ex-
ploiting a setuid root program.
initproc(1000, 100, none)proc(0, 100, none)/bin/eject/bin/mount/bin/ping6/bin/su/bin/umount/opt/gnome/lib/libgnomesu/gnomesu-pam-backend/opt/gnome/sbin/change-passwd/opt/kde3/bin/kpac_dhcp_helper/sbin/unix2_chkpwd/usr/X11R6/bin/Xorg/usr/bin/at/usr/bin/chage/usr/bin/chfn/usr/bin/chsh/usr/bin/crontab/usr/bin/expiry/usr/bin/gpasswd/usr/bin/gpg/usr/bin/mandb/usr/bin/newgrp/usr/bin/opiepasswd/usr/bin/opiesu/usr/bin/rcp/usr/bin/rlogin/usr/bin/rsh/usr/bin/sudo/usr/lib/pt_chown/usr/sbin/suexec2proc(1000, 13, none)/usr/lib/news/bin/inewsproc(0, 13, none)/usr/lib/news/bin/inndstart/usr/lib/news/bin/startinnfeedinitunconfined_t/sbin/portmap/sbin/rpc.statd/usr/sbin/apache2/usr/sbin/mysqld/usr/sbin/named/usr/sbin/nmbd/usr/sbin/rpc.mountd/usr/sbin/smbd/usr/sbin/vsftpdcupsd_t/usr/sbin/cupsdsshd_t/usr/sbin/sshddhcpc_t/sbin/dhclientsystem_chkpwd_t/sbin/unix_chkpwd6.1 Acknowledgements
This work is supported by NSF CNS-0448204 (CA-
REER: Access Control Policy Veriﬁcation Through Se-
curity Analysis And Insider Threat Assessment), and by
sponsors of CERIAS. We also thank the anonymous re-
viewers for NDSS and the shepherd of our paper Crispin
Cowan for valuable comments that have greatly im-
proved the paper.
References
[1] Apparmor
application
security
for
linux.
http://www.novell.com/linux/security/apparmor/.
[2] Apparmor
development.
http://developer.novell.com/wiki/index.php/Apparmor.
[3] Selinux
for
http://selinux.sourceforge.net.
distributions.
[4] D. E. Bell and L. J. LaPadula. Secure computer
systems: Uniﬁed exposition and Multics interpre-
tation. Technical Report ESD-TR-75-306, Mitre
Corporation, Mar. 1976.
[5] C. Cowan, S. Beattie, G. Kroah-Hartman, C. Pu,
P. Wagle, and V. D. Gligor. Subdomain: Parsi-
In Proceedings of the
monious server security.
14th Conference on Systems Administration (LISA
2000), pages 355–368, Dec. 2000.
[6] T. Fraser. LOMAC: Low water-mark integrity pro-
In Proc. IEEE
tection for COTS environments.
Symposium on Security and Privacy, May 2000.
[7] T. Fraser. LOMAC: MAC you can live with.
In
Proceedings of the FREENIX Track: USENIX An-
nual Technical Conference, June 2001.
[8] J. D. Guttman, A. L. Herzog, J. D. Ramsdell, and
C. W. Skorupka. Verifying information ﬂow goals
in security-enhanced linux. Journal of Computer
Security, 13(1):115–134, 2005.
[9] B. Hicks, S. Rueda, L. S. Clair, T. Jaeger, and P. D.
McDaniel. A logical speciﬁcation and analysis for
In SACMAT, pages 91–100,
selinux mls policy.
2007.
[10] S. Hinrichs and P. Naldurg. Attack-based domain
transition analysis. In Annual Security Enhanced
Linux Symposium, 2006.
[11] M. Howard. Mitigate security risks by minimiz-
ing the code you expose to untrusted users. MSDN
Magazine, November 2004.
[12] M. Howard, J. Pincus, and J. M. Wing. Measuring
relative attack surfaces. In Proceedings of Work-
shop on Advanced Developments in Software and
Systems Security, December 2003.
[13] T. Jaeger, R. Sailer, and X. Zhang. Analyzing in-
tegrity protection in the SELinux example policy.
In Proceedings of the 12th USENIX Security Sym-
posium, pages 59–74, August 2003.
[14] T. Jaeger, X. Zhang, and F. Cacheda. Policy man-
agement using access control spaces. ACM Trans.
Inf. Syst. Secur., 6(3):327–364, 2003.
[15] A. Leitner. Novell and red hat security experts face
off on apparmor and selinux counterpoint. Linux
Magazine, (69), 2006.
[16] N. Li, Z. Mao, and H. Chen. Usable manda-
tory integrity protection for operating systems. In
Proc. IEEE Symposium on Security and Privacy,
May 2007.
[17] P. K. Manadhata, K. M. C. Tan, R. A. Maxion, and
J. M. Wing. An approach to measuring a system’s
attack surface. Technical Report CMU-CS-07-146,
CMU, August 2007.
[18] P. Naldurg, S. Schwoon, S. K. Rajamani, and
J. Lambert. NETRA: : seeing through access con-
trol. In FMSE, pages 55–66, 2006.
[19] NSA.
Security
enhanced
linux.
http://www.nsa.gov/selinux/.
[20] X. Ou, W. F. Boyer, and M. A. McQueen. A
scalable approach to attack graph generation.
In
Proceedings of the 13th ACM conference on Com-
puter and communications security, pages 336–
345, New York, NY, USA, 2006. ACM.
[21] B. Sarna-Starosta and S. D. Stoller. Policy analysis
for security-enhanced linux. In Proceedings of the
2004 Workshop on Issues in the Theory of Security
(WITS), pages 1–12, April 2004.
[22] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and
J. M. Wing. Automated generation and analysis of
In Proceedings of the 2002 IEEE
attack graphs.
Symposium on Security and Privacy, page 273,
Washington, DC, USA, 2002. IEEE Computer So-
ciety.
[23] S. Smalley, C. Vance, and W. Salamon.
Im-
plementing SELinux as a Linux security module.
Technical Report 01-043, NAI Labs, December
2001.
[24] Tresys
technology,
tools
ysis
http://oss.tresys.com/projects/setools.
selinux.
for
setools
-
policy
Available
anal-
at
[25] G. Zanin and L. V. Mancini. Towards a formal
model for security policies speciﬁcation and vali-
dation in the selinux system. In Proc. ACM Sympo-
sium on Access Control Models and Technologies
(SACMAT), pages 136–145, 2004.