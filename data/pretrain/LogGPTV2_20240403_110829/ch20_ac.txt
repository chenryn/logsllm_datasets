错误修复、精心测试并发布更新，同样需要由主持人决定这需要离开游戏几轮
上报给开发人员（由主持人出牌）玩家需要在多轮之后回到游戏，具体轮次取决于主持人对 SRE 团队在调查情况方面（上报之前）表现的考量
上报给业务所有者（了解任何影响用户的决策的后果）
下面是一些立刻出牌的例子：
班次变化：当前班次失去所有牌；由另一个班次接管
一个未知的可怕事情发生（游戏主管决定）
嘈杂的警报：针对不相关的小问题进行报警，失去一个回合
管理干扰：通信主管错过了下一轮处理（同样规划领导也可以错过）
无法参与事件响应的工程师会使监控失职：丢失所有监控检查卡无法参与事件响应的工程师会使监控失职：丢失所有监控检查卡
这个游戏教事件管理技能快速，而且不会让然感到沉闷（真的比坐在一堆幻灯片的面前更有趣）。在这里，人们可以实际使用该过程，时间和资源的限制，好像在处理真实的事件一样。通过游戏可以建立信心，人们可以在压力下使用事件管理过程。这些卡片强化了事件管理中出现的实际问题（例如，如果沟通不好，干扰的主管可能会来干预。或者，如果运营主管不协调谁在处理不同工作，则监控者会因而失去专注力）。
这个游戏需要准备才能正常运作。如果人数超过 12 个以上，则游戏将无法正常运作。团队还需要对游戏所基于的系统有共同的理解，要么针对的是他们实际运维的系统，要么是通过描述来了解。就像《不幸之轮》游戏一样，它需要游戏主管仔细准备场景，这样游戏主管就可以回答玩家会问的关于系统行为的问题。还应提前准备好道具，如共享的事件文档。   
活动学习示例：SRE 教室活动学习示例：SRE 教室
  SRE 课堂不是游戏。这是一个研讨会，自 2012 年以来，许多 Google SRE（包括我）都在教授。我们在许多公开会议上教授它（包括 USENIX LISA，USENIX SREcon，O'Reilly Velocity 和 FLOSS UK），我们还受邀在谷歌办公室教授这个课程。它有两种形式：半天，只有设计练习，或者一整天，包括一些谈话。
SRE 课堂旨在教人们如何进行实用的分布式系统设计和基本容量规划。这是一个相当雄心勃勃的事情；这是一个复杂的实践领域，参与者完全可能有不同的经验水平。
在这个课程中，我是为数不多的体验过教师和学生两种角色的 SRE 之一。在我加入谷歌之前，我参加了这个研讨会的最早版本之一，那是 2012 年在伦敦的谷歌办公室。在谷歌工作之后，我和其他几个人一起积极更新研讨会的内容，我自己教了很多次。最近，我为没有系统设计经验的新 Google SRE 或有意加入 SRE 团队的非 SRE Google 人员开发了一个更深入的版本（如果连续教授，则大约需要三天）。在研讨会上，我们会挑战参与者，如同把他们扔到游泳池的深水区，让他们自己摸索出路。在研讨会开始时，我们将参与者分成大约五组，每组都有一名主持人。他们得到一个问题陈述和一些非功能性的要求，比如系统规模和对故障的恢复能力。这些扩展和恢复能力要求确实是问题的核心。我们的问题之一是使用像 SQL 联接一样简单的业务逻辑，但正在设计的系统必须扩展到 Google 每天提供大约的页面浏览量，这是很可观的要求！
然后，要求每个团队设计系统，并针对运行系统所需的硬件提供一些初始容量估计。最后，我们完成一个满足目标的设计，然后进行讨论。
团队在设计上共同工作。主持人的工作不是给出答案。主持人的工作是澄清问题中任何不清楚的问题，在需要的时候提出正确的问题来帮助团队，以避免在某个坑里花费太多时间，并避免任何人主导谈话。团队一起工作，因为我们试图做的是发展他们设计分布式系统的能力（这与维护设计正确的系统有较大区别）。在许多方面，团队是否真正获得“正确”答案并不重要，过程才是重点。真正重要的是，人们花了时间与问题搏斗，权衡不同解决方案。正如前面提到的，我自己其实也一直在学习新东西，是通过艰苦的工作来自学。但我的经验，无论是学习者还是老师，都有可能在工作中迷失，以至于你和你的团队将完全无法控制工作时间和讨论问题的时间。和 Seymour Papert 的学生一样，他们发现这很有趣，因为它很难。绝大多数参加者都喜欢它，并发现它很有用（事后调查的结论）。在研讨会结束时，与会者在系统设计和容量估计方面肯定更加熟练和自信。只有一小部分学生（少于百分之十）强烈不喜欢主动学习体验。这些参与者往往是那些想坐下来、让别人读幻灯片的人，而不是通过经验来学习的人。这种练习也是学习系统体系结构原因的一种非常有效的方法。我们在不同的时间使用不同的系统设计作为本研讨会的基础，但我们经常使用的一个设计 是 Photon，一种连接日志的管道系统。我们喜欢使用这个，是因为对于大多数研讨会与会者来说，它不同于他们每天工作的系统类型，因此这更具挑战性。Photon 是一个相当复杂的野兽，而支持该服务的 SRE 团队正是我们。我注意到，通过像 SRE 课堂研讨会这样的练习，比仅仅阅读或观看某人谈论它，参与者对 Photon 有了更深入、更好的理解。努力去解决自己的问题真的有效。如果你是 SRE，并试图找出你支持的系统当前遇到的最新故障模式，这种努力确实会带来回报。
当我需要学习新系统时，我现在使用这种方法：首先找出功能性和非功能性要求，然后自己绘制设计草图，然后阅读系统实际工作原理。不管我提出的是否接近现实，我发现自己能理解它的限制和设计上的权衡，比通过被动地了解它要快得多。这确实需要更长的时间，但在许多情况下，时间投资是值得的。如果你的团队正在采用新服务或使用新的基础结构，则可以召集整个团队，准备一个白板来开始这类探索，这比坐在演示文稿面前更有趣。其缺点是，对于远程工作的团队来说，这不是一种很好的技术；呆在一个房间里真的有帮助。
不能学习的代价
SRE 团队有时会以艰苦的方式学习。我们可能导致故障，有时花很久时间恢复。更糟糕的是，我们可能会导致安全漏洞；我们可能会丢失用户数据。生产问题有时会困扰我们，但那是一种非常非常昂贵的学习方式，我们不能重复这一教训。我们需要做得更好。因此，SRE 团队必须是善于培训和学习的团队。
对于任何不注重培训 SRE 的组织来说，他们都面临一些有形成本。第一个成本是新员工（或团队之间转型的人员）工作效率提升速度迟缓。在具有多个 SRE 团队的大型组织中，可能还会发现 SRE 团队之间的凝聚力较差。如果他们不共享一个共同的培训和学习系统，分享知识，团队就会在思想、技巧和工作方法上出现分歧。团队可能会为同一目的创建或采用不同的工具和流程，从而增加开发成本，并为团队之间的切换增加障碍。不能共享知识的 SRE 团队不会有效地与组织中的其他非 SRE 工程团队协作。实际上，SRE 团队应该不断培训开发团队和自己的初级成员，让他们了解良好的生产实践。他们通过设计评审、启动准备情况审查、事后检查以及其他途径（如正式培训或与 SRE 团队轮换合作）来完成这些任务。
对于在训练中实力不强的 SRE 团队来说，另一个主要成本是，对自身技能和服务知识没有信心的新员工可能会发现自己承受了越来越大的压力，尤其是在轮值时。这是倦怠的主要风险因素，对团队效率和士气来说也很糟糕。此外，精疲力竭的 SRE 团队是一个效率低下团队，这会给整个企业带来生存风险。我们对自己和我们的团队来说都有义务，应该在教学和学习两方面做到最好。
不学习、不教授的 SRE 团队是低效的。因此，学习和教学是 SRE 的核心技能；但是这些技能对我们很多人来说很欠缺，因为我们没有受过专门训练。这些技能也是我们大多数人忽视的 SRE 至关重要的技能。近年来，我们明确将教学和教授内容加到 Google 的 SRE 职位描述中，以强调它应该是核心竞争力之一。
有效 SRE 团队的学习氛围
  学习不仅仅是关于新人入职队，或新服务上线。有效的 SRE 团队将学习融入他们的常规工作实践中。 SRE 团队最广泛的学习机会是定期的生产会议和事后分析。如果不实施这两种做法，很难可靠地运行大型复杂服务。
生产会议You can view a weekly production meeting, in which developers and SREs meet to discuss the state of their service, partly as a process of learning. The team as a whole learns new things about how the service is performing and what problems are occurring. Individuals on the team usually learn some new things about how the service operates, too. Most well-run production meetings tend to spawn sets of follow-up actions that require people to go and find answers that weren’t known during the meeting.有几种方法可以强化生产会议对于主动学习的价值。
对于新加入团队的工程师，请考虑让他们保留生产会议中出现的任何他们不清楚的清单。在大多数组织中，新工程师应指定一名团队成员作为导师，帮助他们快速跟上。每次生产会议后，该导师都可以向新工程师解释新工程师在会上注意到的项目。这也是确保团队文档常新的好机会。
如果生产会议中出现的问题哪怕经验丰富的团队成员也不清楚，那么另一种学习机会就出现了。一位工程师（或者了解问题或受命研究问题的人员）可以将知识带给团队的其他成员，也许下一次生产会议就是最好的机会。这些对系统了解不足的角落也是不幸之轮游戏的最佳创意来源。
故障报告故障报告
  Postmortems are another great (if sometimes expensive) learning opportunity. Both the process of writing them and the final artifacts are really valuable for learning curious corners of your systems and technologies (as well as for the headline purpose of actually avoiding repeating the incident).
然而，故障检验本身并不十分有趣。不过，还是可以让它变得更有趣。然而，故障检验本身并不十分有趣。不过，还是可以让它变得更有趣。
我建立了一个故障报告阅读俱乐部，作为许多密切相关的 SRE 团队分享（我们对维护的系统的知识）的重要途径。每两周，我们从最近的故障中选出最有趣的故障检测报告，然后进行半正式的讨论。有一个轮值主席，其职责是领导讨论并记录。我们通常使用白板来描述每个人都满意的事件顺序，利用房间里的所有人的知识来填补任何未知因素或当时的情境。当这一切完成时，我们再看行动项目，再次利用与会者的集体智慧来发现可以提高的地方。
参加这些会议比简单地阅读文档有更丰富的学习体验。
运维回顾聚会，这是同一种想法的不同名称，也就是各类运维人员齐聚一堂，对最近的问题和故障进行社会化且幽默的讨论。我们在 Google，我们经常以蛋糕等甜头吸引技术人员出席此类活动。每周为了运维回顾聚会而产生的甜点花销，这可能是 SRE 经理在团队发展中可以做出的最佳财务投资之一。行动号召：放弃无聊的幻灯片
在本章中，我谈到了我自己和其他 Google 技术人员使用主动方法进行教学和学习的各种尝试。你也可以将这些技术应用于自己的团队的工具、系统和流程。
对于任何 SRE 团队的成功，没有什么比其成员的学习能力更关键的了。主动学习方法是实现这一目标的最有效（而且往往是最吸引人且最有趣的）方法之一。那么，下次需要进行某种培训时，为什么不放弃幻灯片，使用其中一些方法呢？  
编者介绍
Laura Nolan 在十几岁时自学了编程，获得了计算机科学方面的学位，在 2013 年初加入 Google SRE 之前，她作为开发人员和软件性能工程师工作。在谷歌，她主要从事大型数据处理通道和网络方面的工作，所以基本上是个管道工。2017 年和 2018 年 她是 USENIX 和 SREcon EMEA 会议的协同主席。