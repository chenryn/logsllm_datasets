title:Fortifying password authentication in integrated healthcare delivery
systems
author:Yanjiang Yang and
Robert H. Deng and
Feng Bao
Fortifying Password Authentication in Integrated
Healthcare Delivery Systems
Yanjiang Yang
Robert H. Deng
School of Information Systems
School of Information Systems
Institute for Infocomm
Singapore Management
University
Singapore 178902
Singapore Management
University
Singapore 178902
PI:EMAIL
PI:EMAIL
Feng Bao
Research
Singapore 119613
baofeng@i2r.a-
star.edu.sg
ABSTRACT
Integrated Delivery Systems (IDSs) now become a primary
means of care provision in healthcare domain. However,
existing password systems (under either the single-server
model or the multi-server model) do not provide adequate
security when applied to IDSs. We are thus motivated to
present a practical password authentication system built upon
a novel two-server model. We generalize the two-server
model to an architecture of a single control server supporting
multiple service servers, tailored to the organizational struc-
ture of IDSs. The underlying user authentication and key
exchange protocols we propose are password-only, neat, eﬃ-
cient, and robust against oﬀ-line dictionary attacks mounted
by both servers.
Categories and Subject Descriptors
H.4 [Information Systems Applications]: Miscellaneous
General Terms
Security
Keywords
integrated delivery systems (IDSs), password system, user
authentication and key exchange, dictionary attack.
1.
INTRODUCTION
The application of information technology to heath care
has driven signiﬁcant structural changes of the healthcare in-
dustry and its methods of care. Taking U.S. for instance, In-
tegrated Delivery Systems (IDSs) are rapidly becoming the
primary means of care provision [11]. While their forms vary
and will continue to evolve, IDSs generally consolidate un-
der one corporate umbrella multiple types of care providers
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’06, March 21-24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003 ...$5.00.
(such as hospitals and primary care clinics) that serve diﬀer-
ent aspects of the care continuum. Some IDSs also include a
health care ﬁnancing arm that oﬀers health plans and pays
for care. IDSs depend on integrated information systems to
achieve their objectives of cost savings, expansions of mar-
ket share, and improved quality of care. It is however clear
that while the aﬃliating care providers in an IDS cooperate
with one another, each of them has its own business interest,
providing distinct services.
Since the advent of computers, entry of a user ID followed
by a password has been the most commonly employed means
of user identiﬁcation and authentication. In a password au-
thentication system, each user shares a password or some
simple password veriﬁcation data (PVD) derived from the
password with a server, and the user only needs to memo-
rize the password and uses it in user authentication process.
One appealing advantage of using password lies in that it
has little or no actual cost since no associated physical ac-
cessories such as smart cards, sensors, scanners are required.
Password authentication still demonstrates vitality in health
care, especially as wireless healthcare applications are be-
coming increasingly prevalent. We are thus concerned with
applying password authentication in healthcare information
systems, especially in IDSs.
However, password authentication has intrinsic weaknesses,
due primarily to the small space of dictionary where pass-
words are chosen. More speciﬁcally, passwords are subject
to brute-force dictionary attacks where an attacker enumer-
ates every possible password in the dictionary to determine
the actual password. The dictionary attacks can occur on-
line or oﬀ-line: in an on-line attack, the attacker repeatedly
picks a password from the dictionary and login with it to
the server by impersonating a legitimate user. Every reject
convinces the attacker to eliminate a guess; in an oﬀ-line
dictionary attack, the attacker records a past successful lo-
gin between a user and the server, and then checks all the
passwords in the dictionary against the gleaned login tran-
script, until eventually ﬁnd the correct password. On-line
dictionary attacks can be easily thwarted at the system level
by limiting the number of unsuccessful login attempts made
by a user. In contrast, oﬀ-line dictionary attacks are noto-
riously harder to deal with. As a result, tremendous eﬀort
has been dedicated to countering against oﬀ-line dictionary
attacks in password systems (e.g., [2, 5, 6, 20, 22, 18, 7, 23,
9]). Most of the existing password systems involve a single
server, assuming the server is completely reliable. Conse-

quently, these systems are precisely robust to oﬀ-line dic-
tionary attacks by outside attackers. As a matter of fact,
the server in these systems can get the password directly or
from the PVD by oﬀ-line dictionary attacks.
Unfortunately, a fully trusted server is hard to achieve in
practice, due to either outsider penetrations or unscrupu-
lous insiders such as system administrators. As a result,
deploying single-server password systems in IDSs, that is,
each aﬃliating care provider in an IDS maintains by itself
a server housing passwords of its users, is not an optimal
practice. This is because (1) some aﬃliating care providers
may lack suﬃcient expertise and funds to sustain servers
robust enough against outsider penetrations and insider at-
tacks; (2) it is now a trend that some organizations choose
to outsource their IT management to external specialized
service providers so as to reduce administrative costs.
In
such cases, system administrators may present themselves
as a big threat to system security [8]. Solutions to the prob-
lem of unreliable server is to distribute passwords as well
as the veriﬁcation functionality to multiple servers, so that
an attacker is forced to compromise several servers for the
purpose of oﬀ-line dictionary attacks (e.g. [14, 19, 24, 25]).
Clearly, these systems based on multiple servers do not di-
rectly apply to IDSs either, since we cannot expect every
aﬃliating care provider to aﬀord deploying multiple servers.
We shall further discuss the disadvantages of multi-server
password systems in Section 3.
Considering the organizational structure of IDSs, it is a
natural solution that the corporate authority of an IDS gets
involved into the trust management of its aﬃliating care
providers. Following this rationale, we present a practi-
cal password authentication system built upon a novel two-
server model: each aﬃliating care provider operates a front-
end service server, providing services to its users; the corpo-
rate authority manages a back-end control server, whose sole
purpose is to assist the service servers in user authentica-
tion. The two-server system follows the principle of multiple
servers by dispensing passwords and veriﬁcation functional-
ity to two servers, but distinguishing from other multi-server
systems in that only the service server exposes to users while
the control server stays transparent to the public. Our sys-
tem requires no PKI, which is of particularly advantage con-
sidering PKIs are proven notoriously expensive in real world
deployment. While we discuss the two-server system in the
context of IDSs, it clearly has wider applicability.
The rest of the paper is organized as follows.
In Sec-
tion 2, we review related work.
In Section 3, we discuss
diﬀerent server models for password systems and general-
ize the two-server model to the context of IDSs. We then
give a basic two-server password authentication and key ex-
change protocol in Section 4. In Section 5, we improve the
basic protocol by circumventing the weaknesses contained in
it, and in Section 6, we present the third protocol. We give
some discussions on the protocols in Section 7, and Section 8
contains the concluding remarks and future work.
2. RELATED WORK
It is a proven fact that public key techniques (e. g., expo-
nentiations in a multiplicative group) are absolutely neces-
sary to make password systems secure against oﬀ-line dic-
tionary attacks, whereas the involvement of public key cryp-
tosystems (e. g., public key encryption and digital signa-
ture schemes) is not essential [18]. This observation dif-
ferentiates two separate approaches to the development of
secure password systems: combined use of password and
public key cryptosystem, and password-only approach. The
former takes into account the asymmetry of capabilities be-
tween users and servers, so a user only uses a password while
the server has a public/private key pair at its disposal. Ex-
amples of such public key-assisted password authentication
systems include [15, 18, 7].
In these systems, the use of
public key cryptosystems entails the deployment and main-
tenance of a PKI for public key certiﬁcation, and adds to
users the burden of checking key validity. To eliminate this
drawback, password-only protocols, known as password-only
authenticated key exchange or PAKE, have been extensively
studied (e.g., [2, 5, 6, 22, 23, 9]). The PAKE protocols do
not involve any public key cryptosystem and therefore are
much more attractive for real world applications. It is our
belief that any use of public key cryptosystems in a pass-
word system should be avoided, since otherwise the beneﬁts
brought by the use of password would be counteracted to a
great extent.
Most of the existing password systems were designed over
a single server, where each user shares a password or some
PVD with a single authentication server. While these sys-
tems are suﬃciently robust against oﬀ-line dictionary at-
tacks mounted by outsiders, they are by no means resilient to
attacks initiated at the server side, e.g., in the event of server
break-ins by outsiders or misbehavior by unscrupulous sys-
tem administrators. To address this problem, password sys-
tems based on multiple servers were proposed. The prin-
ciple of such multi-server systems is distributing the pass-
word/PVD database as well as the veriﬁcation functionality
to multiple servers in order to eliminate the single point
of vulnerability. As such, without compromising multiple
servers, an attacker is bound not to be eﬀective in oﬀ-line
dictionary attacks. The idea of splitting a secret into mul-
tiple segments has also been leveraged by several systems
other than the multi-server password systems for other pur-
poses. For example, it was suggested to split a private RSA
signing key into several parts in order to enable “mutlsig-
natures” [1] or to mitigate the catastrophic consequences
of a Kerberos server that houses the secret keys of all its
users being compromised [17]. The system in [14], believed
to be the ﬁrst multi-server password system, splits a short
password among multiple servers who then collaborate on
user authentication. However, the servers in [14] need to
use public keys. An improved version of [14] was proposed
in [19] which eliminates the use of public keys while achiev-
ing similar security. Further and more rigorous extensions
were due to [24] and [25], where the former built a t-out-of-
n threshold PAKE protocol and provided a formal security
proof under the random oracle model [10], and the latter
presented two provably secure threshold PAKE protocols
under the standard model. While the protocols in [24] and
[25] are theoretically signiﬁcant, they have low eﬃciency and
high operational overhead. In these multi-server password
systems, either the servers are equally exposed to the users
and a user has to communicate in parallel with several or
all servers for authentication, or a gateway is introduced
between the users and the servers (see Section 3).
The password system most closely related to ours is the
two-server system recently proposed by Brainard et al. [4],
where one server exposes itself to users and the other is
hidden from the public. While this two-server setting is ef-

Figure 1: Models of password systems.
ﬁcient, it is not a password-only system: both servers need
to have public keys to protect the communication channels
between users and servers. As we have stressed earlier, this
makes it diﬃcult to fully enjoy the beneﬁts of a password
system. In addition, the system in [4] only performs unilat-
eral authentication and relies on the Secure Socket Layer
(SSL) to establish a session key between a user and the
front-end server. Subsequently, Yang et al.
[26] extended
and tailored this two-server system to the context of feder-
ated enterprises, where the back-end server is managed by
an enterprise headquarter and each aﬃliating organization
operates a front-end server. An improvement made in [26] is
that only the back-end server holds a public key. Neverthe-
less, the system in [26] is still not a password-only system.
We notice that the two-server system presented in [21] does
not follow the two-server model in [4, 26], but is a special
case of multi-server systems. This should be clear shortly in
Section 3. Our work in this paper generalize the two-server
model in [4, 26] to the context of IDSs, and we adopt a very
diﬀerent method in the protocol design. As a result, our
protocols require no public key cryptosystem whatsoever,
and are quite eﬃcient and neat.
3. A TWO-SERVER MODEL AND ITS AP-
PLICATION TO IDS
Password systems in the literature are generally built over
the following four types of architectures shown in Figure 1.
The ﬁrst type is the single-server model given in Figure 1(a),
where a single server is leveraged and it keeps a database of
user passwords. As mentioned earlier, most of the existing
password systems follow this single-server model, but the
single server results in a single point of vulnerability with
respect to oﬀ-line dictionary attacks against the user pass-
word database.
The second type is the plain multi-server model depicted
in Figure 1(b), in which the server side comprises multi-
ple servers for the purpose of removal of the single point of
vulnerability; the servers are equally exposed to users and
a user has to communicate in parallel with several or all
servers for authentication. Clearly, the main problem with
the plain multi-server model is the demand on communi-
cation bandwidth and the need for synchronization at the
user side, since a user has to engage in simultaneous com-
munications with multiple servers. This may cause problems
to resource constrained mobile devices such as hand phones
and PDAs. The systems in [14, 19, 24] and one of the two
protocols in [25] assume this model.
The third type is the gateway-augmented multi-server model
outlined in Figure 1(c), where a gateway is positioned as a
relaying point between users and servers, and a user only
needs to contact the gateway. Apparently, the introduction
of the gateway removes the demand of simultaneous com-
munications by a user with multiple servers as in the plain
multi-server model. However, the gateway introduces an
additional layer in the architecture, which appears “redun-
dant” since the sole role of the gateway is to relay messages
between users and servers, and it does not in any way involve
in service provision, user authentication and other security
enforcements. From security perspective, more components

in general imply more points of vulnerabilties. Protocols
based on the gateway-augmented multi-server model include
[25] and [21].
The forth type is the two-server model outlined in Fig-
ure 1(d), that comprises two servers at the server side, one
of which is a public server exposing itself to users and the
other is a back-end server staying behind the scene; users
only contact the public server, but the two servers cooper-
ate to authenticate users. It is important to note the essen-